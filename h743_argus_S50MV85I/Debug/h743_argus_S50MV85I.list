
h743_argus_S50MV85I.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025030  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000732c  08025300  08025300  00026300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802c62c  0802c62c  0002d62c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0802c634  0802c634  0002d634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000008  0802c63c  0802c63c  0002d63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000238  24000000  0802c644  0002e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000095c  24000238  0802c87c  0002e238  2**2
                  ALLOC
  8 ._user_heap_stack 00007004  24000b94  0802c87c  0002eb94  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002e238  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002702d  00000000  00000000  0002e266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000050cd  00000000  00000000  00055293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b28  00000000  00000000  0005a360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000014e9  00000000  00000000  0005be88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00009856  00000000  00000000  0005d371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000273e3  00000000  00000000  00066bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015fce8  00000000  00000000  0008dfaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      0000008c  00000000  00000000  001edc92  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007ff4  00000000  00000000  001edd20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000071  00000000  00000000  001f5d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000238 	.word	0x24000238
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080252e8 	.word	0x080252e8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400023c 	.word	0x2400023c
 800030c:	080252e8 	.word	0x080252e8

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_ldivmod>:
 8000738:	b97b      	cbnz	r3, 800075a <__aeabi_ldivmod+0x22>
 800073a:	b972      	cbnz	r2, 800075a <__aeabi_ldivmod+0x22>
 800073c:	2900      	cmp	r1, #0
 800073e:	bfbe      	ittt	lt
 8000740:	2000      	movlt	r0, #0
 8000742:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000746:	e006      	blt.n	8000756 <__aeabi_ldivmod+0x1e>
 8000748:	bf08      	it	eq
 800074a:	2800      	cmpeq	r0, #0
 800074c:	bf1c      	itt	ne
 800074e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000752:	f04f 30ff 	movne.w	r0, #4294967295
 8000756:	f000 b9ed 	b.w	8000b34 <__aeabi_idiv0>
 800075a:	f1ad 0c08 	sub.w	ip, sp, #8
 800075e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000762:	2900      	cmp	r1, #0
 8000764:	db09      	blt.n	800077a <__aeabi_ldivmod+0x42>
 8000766:	2b00      	cmp	r3, #0
 8000768:	db1a      	blt.n	80007a0 <__aeabi_ldivmod+0x68>
 800076a:	f000 f885 	bl	8000878 <__udivmoddi4>
 800076e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000772:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000776:	b004      	add	sp, #16
 8000778:	4770      	bx	lr
 800077a:	4240      	negs	r0, r0
 800077c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000780:	2b00      	cmp	r3, #0
 8000782:	db1b      	blt.n	80007bc <__aeabi_ldivmod+0x84>
 8000784:	f000 f878 	bl	8000878 <__udivmoddi4>
 8000788:	f8dd e004 	ldr.w	lr, [sp, #4]
 800078c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000790:	b004      	add	sp, #16
 8000792:	4240      	negs	r0, r0
 8000794:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000798:	4252      	negs	r2, r2
 800079a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800079e:	4770      	bx	lr
 80007a0:	4252      	negs	r2, r2
 80007a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007a6:	f000 f867 	bl	8000878 <__udivmoddi4>
 80007aa:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007b2:	b004      	add	sp, #16
 80007b4:	4240      	negs	r0, r0
 80007b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ba:	4770      	bx	lr
 80007bc:	4252      	negs	r2, r2
 80007be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c2:	f000 f859 	bl	8000878 <__udivmoddi4>
 80007c6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007ce:	b004      	add	sp, #16
 80007d0:	4252      	negs	r2, r2
 80007d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007d6:	4770      	bx	lr

080007d8 <__aeabi_uldivmod>:
 80007d8:	b953      	cbnz	r3, 80007f0 <__aeabi_uldivmod+0x18>
 80007da:	b94a      	cbnz	r2, 80007f0 <__aeabi_uldivmod+0x18>
 80007dc:	2900      	cmp	r1, #0
 80007de:	bf08      	it	eq
 80007e0:	2800      	cmpeq	r0, #0
 80007e2:	bf1c      	itt	ne
 80007e4:	f04f 31ff 	movne.w	r1, #4294967295
 80007e8:	f04f 30ff 	movne.w	r0, #4294967295
 80007ec:	f000 b9a2 	b.w	8000b34 <__aeabi_idiv0>
 80007f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f8:	f000 f83e 	bl	8000878 <__udivmoddi4>
 80007fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000800:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000804:	b004      	add	sp, #16
 8000806:	4770      	bx	lr

08000808 <__aeabi_d2lz>:
 8000808:	b508      	push	{r3, lr}
 800080a:	4602      	mov	r2, r0
 800080c:	460b      	mov	r3, r1
 800080e:	ec43 2b17 	vmov	d7, r2, r3
 8000812:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800081a:	d403      	bmi.n	8000824 <__aeabi_d2lz+0x1c>
 800081c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000820:	f000 b80a 	b.w	8000838 <__aeabi_d2ulz>
 8000824:	eeb1 7b47 	vneg.f64	d7, d7
 8000828:	ec51 0b17 	vmov	r0, r1, d7
 800082c:	f000 f804 	bl	8000838 <__aeabi_d2ulz>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	bd08      	pop	{r3, pc}

08000838 <__aeabi_d2ulz>:
 8000838:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000868 <__aeabi_d2ulz+0x30>
 800083c:	ec41 0b17 	vmov	d7, r0, r1
 8000840:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000870 <__aeabi_d2ulz+0x38>
 8000844:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000848:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800084c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000850:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000854:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000858:	ee16 1a10 	vmov	r1, s12
 800085c:	ee17 0a90 	vmov	r0, s15
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	f3af 8000 	nop.w
 8000868:	00000000 	.word	0x00000000
 800086c:	3df00000 	.word	0x3df00000
 8000870:	00000000 	.word	0x00000000
 8000874:	41f00000 	.word	0x41f00000

08000878 <__udivmoddi4>:
 8000878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800087c:	9d08      	ldr	r5, [sp, #32]
 800087e:	460c      	mov	r4, r1
 8000880:	2b00      	cmp	r3, #0
 8000882:	d14e      	bne.n	8000922 <__udivmoddi4+0xaa>
 8000884:	4694      	mov	ip, r2
 8000886:	458c      	cmp	ip, r1
 8000888:	4686      	mov	lr, r0
 800088a:	fab2 f282 	clz	r2, r2
 800088e:	d962      	bls.n	8000956 <__udivmoddi4+0xde>
 8000890:	b14a      	cbz	r2, 80008a6 <__udivmoddi4+0x2e>
 8000892:	f1c2 0320 	rsb	r3, r2, #32
 8000896:	4091      	lsls	r1, r2
 8000898:	fa20 f303 	lsr.w	r3, r0, r3
 800089c:	fa0c fc02 	lsl.w	ip, ip, r2
 80008a0:	4319      	orrs	r1, r3
 80008a2:	fa00 fe02 	lsl.w	lr, r0, r2
 80008a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008aa:	fa1f f68c 	uxth.w	r6, ip
 80008ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80008b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008b6:	fb07 1114 	mls	r1, r7, r4, r1
 80008ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008be:	fb04 f106 	mul.w	r1, r4, r6
 80008c2:	4299      	cmp	r1, r3
 80008c4:	d90a      	bls.n	80008dc <__udivmoddi4+0x64>
 80008c6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ca:	f104 30ff 	add.w	r0, r4, #4294967295
 80008ce:	f080 8112 	bcs.w	8000af6 <__udivmoddi4+0x27e>
 80008d2:	4299      	cmp	r1, r3
 80008d4:	f240 810f 	bls.w	8000af6 <__udivmoddi4+0x27e>
 80008d8:	3c02      	subs	r4, #2
 80008da:	4463      	add	r3, ip
 80008dc:	1a59      	subs	r1, r3, r1
 80008de:	fa1f f38e 	uxth.w	r3, lr
 80008e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80008e6:	fb07 1110 	mls	r1, r7, r0, r1
 80008ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ee:	fb00 f606 	mul.w	r6, r0, r6
 80008f2:	429e      	cmp	r6, r3
 80008f4:	d90a      	bls.n	800090c <__udivmoddi4+0x94>
 80008f6:	eb1c 0303 	adds.w	r3, ip, r3
 80008fa:	f100 31ff 	add.w	r1, r0, #4294967295
 80008fe:	f080 80fc 	bcs.w	8000afa <__udivmoddi4+0x282>
 8000902:	429e      	cmp	r6, r3
 8000904:	f240 80f9 	bls.w	8000afa <__udivmoddi4+0x282>
 8000908:	4463      	add	r3, ip
 800090a:	3802      	subs	r0, #2
 800090c:	1b9b      	subs	r3, r3, r6
 800090e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000912:	2100      	movs	r1, #0
 8000914:	b11d      	cbz	r5, 800091e <__udivmoddi4+0xa6>
 8000916:	40d3      	lsrs	r3, r2
 8000918:	2200      	movs	r2, #0
 800091a:	e9c5 3200 	strd	r3, r2, [r5]
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	428b      	cmp	r3, r1
 8000924:	d905      	bls.n	8000932 <__udivmoddi4+0xba>
 8000926:	b10d      	cbz	r5, 800092c <__udivmoddi4+0xb4>
 8000928:	e9c5 0100 	strd	r0, r1, [r5]
 800092c:	2100      	movs	r1, #0
 800092e:	4608      	mov	r0, r1
 8000930:	e7f5      	b.n	800091e <__udivmoddi4+0xa6>
 8000932:	fab3 f183 	clz	r1, r3
 8000936:	2900      	cmp	r1, #0
 8000938:	d146      	bne.n	80009c8 <__udivmoddi4+0x150>
 800093a:	42a3      	cmp	r3, r4
 800093c:	d302      	bcc.n	8000944 <__udivmoddi4+0xcc>
 800093e:	4290      	cmp	r0, r2
 8000940:	f0c0 80f0 	bcc.w	8000b24 <__udivmoddi4+0x2ac>
 8000944:	1a86      	subs	r6, r0, r2
 8000946:	eb64 0303 	sbc.w	r3, r4, r3
 800094a:	2001      	movs	r0, #1
 800094c:	2d00      	cmp	r5, #0
 800094e:	d0e6      	beq.n	800091e <__udivmoddi4+0xa6>
 8000950:	e9c5 6300 	strd	r6, r3, [r5]
 8000954:	e7e3      	b.n	800091e <__udivmoddi4+0xa6>
 8000956:	2a00      	cmp	r2, #0
 8000958:	f040 8090 	bne.w	8000a7c <__udivmoddi4+0x204>
 800095c:	eba1 040c 	sub.w	r4, r1, ip
 8000960:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000964:	fa1f f78c 	uxth.w	r7, ip
 8000968:	2101      	movs	r1, #1
 800096a:	fbb4 f6f8 	udiv	r6, r4, r8
 800096e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000972:	fb08 4416 	mls	r4, r8, r6, r4
 8000976:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800097a:	fb07 f006 	mul.w	r0, r7, r6
 800097e:	4298      	cmp	r0, r3
 8000980:	d908      	bls.n	8000994 <__udivmoddi4+0x11c>
 8000982:	eb1c 0303 	adds.w	r3, ip, r3
 8000986:	f106 34ff 	add.w	r4, r6, #4294967295
 800098a:	d202      	bcs.n	8000992 <__udivmoddi4+0x11a>
 800098c:	4298      	cmp	r0, r3
 800098e:	f200 80cd 	bhi.w	8000b2c <__udivmoddi4+0x2b4>
 8000992:	4626      	mov	r6, r4
 8000994:	1a1c      	subs	r4, r3, r0
 8000996:	fa1f f38e 	uxth.w	r3, lr
 800099a:	fbb4 f0f8 	udiv	r0, r4, r8
 800099e:	fb08 4410 	mls	r4, r8, r0, r4
 80009a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009a6:	fb00 f707 	mul.w	r7, r0, r7
 80009aa:	429f      	cmp	r7, r3
 80009ac:	d908      	bls.n	80009c0 <__udivmoddi4+0x148>
 80009ae:	eb1c 0303 	adds.w	r3, ip, r3
 80009b2:	f100 34ff 	add.w	r4, r0, #4294967295
 80009b6:	d202      	bcs.n	80009be <__udivmoddi4+0x146>
 80009b8:	429f      	cmp	r7, r3
 80009ba:	f200 80b0 	bhi.w	8000b1e <__udivmoddi4+0x2a6>
 80009be:	4620      	mov	r0, r4
 80009c0:	1bdb      	subs	r3, r3, r7
 80009c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009c6:	e7a5      	b.n	8000914 <__udivmoddi4+0x9c>
 80009c8:	f1c1 0620 	rsb	r6, r1, #32
 80009cc:	408b      	lsls	r3, r1
 80009ce:	fa22 f706 	lsr.w	r7, r2, r6
 80009d2:	431f      	orrs	r7, r3
 80009d4:	fa20 fc06 	lsr.w	ip, r0, r6
 80009d8:	fa04 f301 	lsl.w	r3, r4, r1
 80009dc:	ea43 030c 	orr.w	r3, r3, ip
 80009e0:	40f4      	lsrs	r4, r6
 80009e2:	fa00 f801 	lsl.w	r8, r0, r1
 80009e6:	0c38      	lsrs	r0, r7, #16
 80009e8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009ec:	fbb4 fef0 	udiv	lr, r4, r0
 80009f0:	fa1f fc87 	uxth.w	ip, r7
 80009f4:	fb00 441e 	mls	r4, r0, lr, r4
 80009f8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009fc:	fb0e f90c 	mul.w	r9, lr, ip
 8000a00:	45a1      	cmp	r9, r4
 8000a02:	fa02 f201 	lsl.w	r2, r2, r1
 8000a06:	d90a      	bls.n	8000a1e <__udivmoddi4+0x1a6>
 8000a08:	193c      	adds	r4, r7, r4
 8000a0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a0e:	f080 8084 	bcs.w	8000b1a <__udivmoddi4+0x2a2>
 8000a12:	45a1      	cmp	r9, r4
 8000a14:	f240 8081 	bls.w	8000b1a <__udivmoddi4+0x2a2>
 8000a18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a1c:	443c      	add	r4, r7
 8000a1e:	eba4 0409 	sub.w	r4, r4, r9
 8000a22:	fa1f f983 	uxth.w	r9, r3
 8000a26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000a2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a36:	45a4      	cmp	ip, r4
 8000a38:	d907      	bls.n	8000a4a <__udivmoddi4+0x1d2>
 8000a3a:	193c      	adds	r4, r7, r4
 8000a3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a40:	d267      	bcs.n	8000b12 <__udivmoddi4+0x29a>
 8000a42:	45a4      	cmp	ip, r4
 8000a44:	d965      	bls.n	8000b12 <__udivmoddi4+0x29a>
 8000a46:	3b02      	subs	r3, #2
 8000a48:	443c      	add	r4, r7
 8000a4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000a52:	eba4 040c 	sub.w	r4, r4, ip
 8000a56:	429c      	cmp	r4, r3
 8000a58:	46ce      	mov	lr, r9
 8000a5a:	469c      	mov	ip, r3
 8000a5c:	d351      	bcc.n	8000b02 <__udivmoddi4+0x28a>
 8000a5e:	d04e      	beq.n	8000afe <__udivmoddi4+0x286>
 8000a60:	b155      	cbz	r5, 8000a78 <__udivmoddi4+0x200>
 8000a62:	ebb8 030e 	subs.w	r3, r8, lr
 8000a66:	eb64 040c 	sbc.w	r4, r4, ip
 8000a6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a6e:	40cb      	lsrs	r3, r1
 8000a70:	431e      	orrs	r6, r3
 8000a72:	40cc      	lsrs	r4, r1
 8000a74:	e9c5 6400 	strd	r6, r4, [r5]
 8000a78:	2100      	movs	r1, #0
 8000a7a:	e750      	b.n	800091e <__udivmoddi4+0xa6>
 8000a7c:	f1c2 0320 	rsb	r3, r2, #32
 8000a80:	fa20 f103 	lsr.w	r1, r0, r3
 8000a84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a88:	fa24 f303 	lsr.w	r3, r4, r3
 8000a8c:	4094      	lsls	r4, r2
 8000a8e:	430c      	orrs	r4, r1
 8000a90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a98:	fa1f f78c 	uxth.w	r7, ip
 8000a9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa0:	fb08 3110 	mls	r1, r8, r0, r3
 8000aa4:	0c23      	lsrs	r3, r4, #16
 8000aa6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aaa:	fb00 f107 	mul.w	r1, r0, r7
 8000aae:	4299      	cmp	r1, r3
 8000ab0:	d908      	bls.n	8000ac4 <__udivmoddi4+0x24c>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000aba:	d22c      	bcs.n	8000b16 <__udivmoddi4+0x29e>
 8000abc:	4299      	cmp	r1, r3
 8000abe:	d92a      	bls.n	8000b16 <__udivmoddi4+0x29e>
 8000ac0:	3802      	subs	r0, #2
 8000ac2:	4463      	add	r3, ip
 8000ac4:	1a5b      	subs	r3, r3, r1
 8000ac6:	b2a4      	uxth	r4, r4
 8000ac8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000acc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ad0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ad4:	fb01 f307 	mul.w	r3, r1, r7
 8000ad8:	42a3      	cmp	r3, r4
 8000ada:	d908      	bls.n	8000aee <__udivmoddi4+0x276>
 8000adc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ae0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ae4:	d213      	bcs.n	8000b0e <__udivmoddi4+0x296>
 8000ae6:	42a3      	cmp	r3, r4
 8000ae8:	d911      	bls.n	8000b0e <__udivmoddi4+0x296>
 8000aea:	3902      	subs	r1, #2
 8000aec:	4464      	add	r4, ip
 8000aee:	1ae4      	subs	r4, r4, r3
 8000af0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000af4:	e739      	b.n	800096a <__udivmoddi4+0xf2>
 8000af6:	4604      	mov	r4, r0
 8000af8:	e6f0      	b.n	80008dc <__udivmoddi4+0x64>
 8000afa:	4608      	mov	r0, r1
 8000afc:	e706      	b.n	800090c <__udivmoddi4+0x94>
 8000afe:	45c8      	cmp	r8, r9
 8000b00:	d2ae      	bcs.n	8000a60 <__udivmoddi4+0x1e8>
 8000b02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b0a:	3801      	subs	r0, #1
 8000b0c:	e7a8      	b.n	8000a60 <__udivmoddi4+0x1e8>
 8000b0e:	4631      	mov	r1, r6
 8000b10:	e7ed      	b.n	8000aee <__udivmoddi4+0x276>
 8000b12:	4603      	mov	r3, r0
 8000b14:	e799      	b.n	8000a4a <__udivmoddi4+0x1d2>
 8000b16:	4630      	mov	r0, r6
 8000b18:	e7d4      	b.n	8000ac4 <__udivmoddi4+0x24c>
 8000b1a:	46d6      	mov	lr, sl
 8000b1c:	e77f      	b.n	8000a1e <__udivmoddi4+0x1a6>
 8000b1e:	4463      	add	r3, ip
 8000b20:	3802      	subs	r0, #2
 8000b22:	e74d      	b.n	80009c0 <__udivmoddi4+0x148>
 8000b24:	4606      	mov	r6, r0
 8000b26:	4623      	mov	r3, r4
 8000b28:	4608      	mov	r0, r1
 8000b2a:	e70f      	b.n	800094c <__udivmoddi4+0xd4>
 8000b2c:	3e02      	subs	r6, #2
 8000b2e:	4463      	add	r3, ip
 8000b30:	e730      	b.n	8000994 <__udivmoddi4+0x11c>
 8000b32:	bf00      	nop

08000b34 <__aeabi_idiv0>:
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <Argus_VerifyHALImplementation>:
/*******************************************************************************
 * Code
 ******************************************************************************/

status_t Argus_VerifyHALImplementation(s2pi_slave_t spi_slave)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
    print("########################################################\n");
 8000b40:	4813      	ldr	r0, [pc, #76]	@ (8000b90 <Argus_VerifyHALImplementation+0x58>)
 8000b42:	f00d f9e5 	bl	800df10 <print>
    print("#   Running HAL Verification Test - " HAL_TEST_VERSION "\n");
 8000b46:	4813      	ldr	r0, [pc, #76]	@ (8000b94 <Argus_VerifyHALImplementation+0x5c>)
 8000b48:	f00d f9e2 	bl	800df10 <print>
    print("########################################################\n");
 8000b4c:	4810      	ldr	r0, [pc, #64]	@ (8000b90 <Argus_VerifyHALImplementation+0x58>)
 8000b4e:	f00d f9df 	bl	800df10 <print>
    print("- SPI Slave: %d \n\n", spi_slave);
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	4810      	ldr	r0, [pc, #64]	@ (8000b98 <Argus_VerifyHALImplementation+0x60>)
 8000b56:	f00d f9db 	bl	800df10 <print>

    const status_t status = VerifyHALImplementation(spi_slave);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f000 f824 	bl	8000ba8 <VerifyHALImplementation>
 8000b60:	60f8      	str	r0, [r7, #12]

    print("########################################################\n");
 8000b62:	480b      	ldr	r0, [pc, #44]	@ (8000b90 <Argus_VerifyHALImplementation+0x58>)
 8000b64:	f00d f9d4 	bl	800df10 <print>
    if (status != STATUS_OK)
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d004      	beq.n	8000b78 <Argus_VerifyHALImplementation+0x40>
    {
        print("#   FAIL: HAL Verification Test finished with error %d!\n", status);
 8000b6e:	68f9      	ldr	r1, [r7, #12]
 8000b70:	480a      	ldr	r0, [pc, #40]	@ (8000b9c <Argus_VerifyHALImplementation+0x64>)
 8000b72:	f00d f9cd 	bl	800df10 <print>
 8000b76:	e002      	b.n	8000b7e <Argus_VerifyHALImplementation+0x46>
    }
    else
    {
        print("#   PASS: HAL Verification Test finished successfully!\n");
 8000b78:	4809      	ldr	r0, [pc, #36]	@ (8000ba0 <Argus_VerifyHALImplementation+0x68>)
 8000b7a:	f00d f9c9 	bl	800df10 <print>
    }
    print("########################################################\n\n");
 8000b7e:	4809      	ldr	r0, [pc, #36]	@ (8000ba4 <Argus_VerifyHALImplementation+0x6c>)
 8000b80:	f00d f9c6 	bl	800df10 <print>

    return status;
 8000b84:	68fb      	ldr	r3, [r7, #12]
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	08025300 	.word	0x08025300
 8000b94:	0802533c 	.word	0x0802533c
 8000b98:	08025368 	.word	0x08025368
 8000b9c:	0802537c 	.word	0x0802537c
 8000ba0:	080253b8 	.word	0x080253b8
 8000ba4:	080253f0 	.word	0x080253f0

08000ba8 <VerifyHALImplementation>:
 * @param   spi_slave The SPI hardware slave.
 *
 * @return  Returns the \link #status_t status\endlink (#STATUS_OK on success).
 *****************************************************************************/
static status_t VerifyHALImplementation(s2pi_slave_t spi_slave)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
    status_t status = STATUS_OK;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]

    print("1 > Timer Plausibility Test\n");
 8000bb4:	4848      	ldr	r0, [pc, #288]	@ (8000cd8 <VerifyHALImplementation+0x130>)
 8000bb6:	f00d f9ab 	bl	800df10 <print>
    status = TimerPlausibilityTest();
 8000bba:	f000 f8cd 	bl	8000d58 <TimerPlausibilityTest>
 8000bbe:	60f8      	str	r0, [r7, #12]
    if (status != STATUS_OK) return status;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <VerifyHALImplementation+0x22>
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	e081      	b.n	8000cce <VerifyHALImplementation+0x126>
    print("1 > PASS\n\n");
 8000bca:	4844      	ldr	r0, [pc, #272]	@ (8000cdc <VerifyHALImplementation+0x134>)
 8000bcc:	f00d f9a0 	bl	800df10 <print>

    print("2 > Timer Wraparound Test\n");
 8000bd0:	4843      	ldr	r0, [pc, #268]	@ (8000ce0 <VerifyHALImplementation+0x138>)
 8000bd2:	f00d f99d 	bl	800df10 <print>
    status = TimerWraparoundTest();
 8000bd6:	f000 f923 	bl	8000e20 <TimerWraparoundTest>
 8000bda:	60f8      	str	r0, [r7, #12]
    if (status != STATUS_OK) return status;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <VerifyHALImplementation+0x3e>
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	e073      	b.n	8000cce <VerifyHALImplementation+0x126>
    print("2 > PASS\n\n");
 8000be6:	483f      	ldr	r0, [pc, #252]	@ (8000ce4 <VerifyHALImplementation+0x13c>)
 8000be8:	f00d f992 	bl	800df10 <print>

    print("3 > SPI Connection Test\n");
 8000bec:	483e      	ldr	r0, [pc, #248]	@ (8000ce8 <VerifyHALImplementation+0x140>)
 8000bee:	f00d f98f 	bl	800df10 <print>
    status = SpiConnectionTest(spi_slave);
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f000 f9ee 	bl	8000fd4 <SpiConnectionTest>
 8000bf8:	60f8      	str	r0, [r7, #12]
    if (status != STATUS_OK) return status;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <VerifyHALImplementation+0x5c>
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	e064      	b.n	8000cce <VerifyHALImplementation+0x126>
    print("3 > PASS\n\n");
 8000c04:	4839      	ldr	r0, [pc, #228]	@ (8000cec <VerifyHALImplementation+0x144>)
 8000c06:	f00d f983 	bl	800df10 <print>

    print("4 > SPI Maximum Data Length Test\n");
 8000c0a:	4839      	ldr	r0, [pc, #228]	@ (8000cf0 <VerifyHALImplementation+0x148>)
 8000c0c:	f00d f980 	bl	800df10 <print>
    status = SpiMaxLengthTest(spi_slave);
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f000 fa6d 	bl	80010f0 <SpiMaxLengthTest>
 8000c16:	60f8      	str	r0, [r7, #12]
    if (status != STATUS_OK) return status;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <VerifyHALImplementation+0x7a>
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	e055      	b.n	8000cce <VerifyHALImplementation+0x126>
    print("4 > PASS\n\n");
 8000c22:	4834      	ldr	r0, [pc, #208]	@ (8000cf4 <VerifyHALImplementation+0x14c>)
 8000c24:	f00d f974 	bl	800df10 <print>

    print("5 > GPIO Interrupt Test\n");
 8000c28:	4833      	ldr	r0, [pc, #204]	@ (8000cf8 <VerifyHALImplementation+0x150>)
 8000c2a:	f00d f971 	bl	800df10 <print>
    status = GpioInterruptTest(spi_slave);
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f000 fde2 	bl	80017f8 <GpioInterruptTest>
 8000c34:	60f8      	str	r0, [r7, #12]
    if (status != STATUS_OK) return status;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <VerifyHALImplementation+0x98>
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	e046      	b.n	8000cce <VerifyHALImplementation+0x126>
    print("5 > PASS\n\n");
 8000c40:	482e      	ldr	r0, [pc, #184]	@ (8000cfc <VerifyHALImplementation+0x154>)
 8000c42:	f00d f965 	bl	800df10 <print>

    print("6 > GPIO Mode Test\n");
 8000c46:	482e      	ldr	r0, [pc, #184]	@ (8000d00 <VerifyHALImplementation+0x158>)
 8000c48:	f00d f962 	bl	800df10 <print>
    status = GpioModeTest(spi_slave);
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f000 ff03 	bl	8001a58 <GpioModeTest>
 8000c52:	60f8      	str	r0, [r7, #12]
    if (status != STATUS_OK) return status;
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <VerifyHALImplementation+0xb6>
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	e037      	b.n	8000cce <VerifyHALImplementation+0x126>
    print("6 > PASS\n\n");
 8000c5e:	4829      	ldr	r0, [pc, #164]	@ (8000d04 <VerifyHALImplementation+0x15c>)
 8000c60:	f00d f956 	bl	800df10 <print>

    print("7 > Lifetime Counter Timer (LTC) Test\n");
 8000c64:	4828      	ldr	r0, [pc, #160]	@ (8000d08 <VerifyHALImplementation+0x160>)
 8000c66:	f00d f953 	bl	800df10 <print>
    status = TimerTest(spi_slave);
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f001 f842 	bl	8001cf4 <TimerTest>
 8000c70:	60f8      	str	r0, [r7, #12]
    if (status != STATUS_OK) return status;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <VerifyHALImplementation+0xd4>
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	e028      	b.n	8000cce <VerifyHALImplementation+0x126>
    print("7 > PASS\n\n");
 8000c7c:	4823      	ldr	r0, [pc, #140]	@ (8000d0c <VerifyHALImplementation+0x164>)
 8000c7e:	f00d f947 	bl	800df10 <print>

    print("8 > Periodic Interrupt Timer (PIT) Test\n");
 8000c82:	4823      	ldr	r0, [pc, #140]	@ (8000d10 <VerifyHALImplementation+0x168>)
 8000c84:	f00d f944 	bl	800df10 <print>
    status = PITTest();
 8000c88:	f001 fbb6 	bl	80023f8 <PITTest>
 8000c8c:	60f8      	str	r0, [r7, #12]
    if (status == ERROR_NOT_IMPLEMENTED)
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	f113 0f09 	cmn.w	r3, #9
 8000c94:	d103      	bne.n	8000c9e <VerifyHALImplementation+0xf6>
    {
        print("8 > SKIPPED (PIT is not implemented)\n\n");
 8000c96:	481f      	ldr	r0, [pc, #124]	@ (8000d14 <VerifyHALImplementation+0x16c>)
 8000c98:	f00d f93a 	bl	800df10 <print>
 8000c9c:	e007      	b.n	8000cae <VerifyHALImplementation+0x106>
    }
    else
    {
        if (status != STATUS_OK) return status;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <VerifyHALImplementation+0x100>
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	e012      	b.n	8000cce <VerifyHALImplementation+0x126>
        print("8 > PASS\n\n");
 8000ca8:	481b      	ldr	r0, [pc, #108]	@ (8000d18 <VerifyHALImplementation+0x170>)
 8000caa:	f00d f931 	bl	800df10 <print>
    }

    print("9 > SPI Interrupt Test\n");
 8000cae:	481b      	ldr	r0, [pc, #108]	@ (8000d1c <VerifyHALImplementation+0x174>)
 8000cb0:	f00d f92e 	bl	800df10 <print>
    status = SpiTransferFromInterruptTest(spi_slave);
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f001 ff2b 	bl	8002b10 <SpiTransferFromInterruptTest>
 8000cba:	60f8      	str	r0, [r7, #12]
    if (status != STATUS_OK) return status;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <VerifyHALImplementation+0x11e>
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	e003      	b.n	8000cce <VerifyHALImplementation+0x126>
    print("9 > PASS\n\n");
 8000cc6:	4816      	ldr	r0, [pc, #88]	@ (8000d20 <VerifyHALImplementation+0x178>)
 8000cc8:	f00d f922 	bl	800df10 <print>

    return status;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	0802542c 	.word	0x0802542c
 8000cdc:	0802544c 	.word	0x0802544c
 8000ce0:	08025458 	.word	0x08025458
 8000ce4:	08025474 	.word	0x08025474
 8000ce8:	08025480 	.word	0x08025480
 8000cec:	0802549c 	.word	0x0802549c
 8000cf0:	080254a8 	.word	0x080254a8
 8000cf4:	080254cc 	.word	0x080254cc
 8000cf8:	080254d8 	.word	0x080254d8
 8000cfc:	080254f4 	.word	0x080254f4
 8000d00:	08025500 	.word	0x08025500
 8000d04:	08025514 	.word	0x08025514
 8000d08:	08025520 	.word	0x08025520
 8000d0c:	08025548 	.word	0x08025548
 8000d10:	08025554 	.word	0x08025554
 8000d14:	08025580 	.word	0x08025580
 8000d18:	080255a8 	.word	0x080255a8
 8000d1c:	080255b4 	.word	0x080255b4
 8000d20:	080255cc 	.word	0x080255cc

08000d24 <CheckTimerCounterValues>:
 * @return  Returns the \link #status_t status\endlink:
 *          - #STATUS_OK on success.
 *          - #ERROR_FAIL on failure (check the error log for more information).
 *****************************************************************************/
static status_t CheckTimerCounterValues(uint32_t hct, uint32_t lct)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
    if (lct > 999999)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	4a07      	ldr	r2, [pc, #28]	@ (8000d50 <CheckTimerCounterValues+0x2c>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d907      	bls.n	8000d46 <CheckTimerCounterValues+0x22>
    {
        error_log("Timer plausibility check:\n"
 8000d36:	683a      	ldr	r2, [r7, #0]
 8000d38:	6879      	ldr	r1, [r7, #4]
 8000d3a:	4806      	ldr	r0, [pc, #24]	@ (8000d54 <CheckTimerCounterValues+0x30>)
 8000d3c:	f00d f8e8 	bl	800df10 <print>
                  "The parameter \"lct\" of Timer_GetCounterValue() must always "
                  "be within 0 and 999999.\n"
                  "Current Values: hct = %d, lct = %d", hct, lct);
        return ERROR_FAIL;
 8000d40:	f04f 33ff 	mov.w	r3, #4294967295
 8000d44:	e000      	b.n	8000d48 <CheckTimerCounterValues+0x24>
    }
    return STATUS_OK;
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	000f423f 	.word	0x000f423f
 8000d54:	080255d8 	.word	0x080255d8

08000d58 <TimerPlausibilityTest>:
 * @return  Returns the \link #status_t status\endlink:
 *          - #STATUS_OK on success.
 *          - #ERROR_FAIL on failure (check the error log for more information).
 *****************************************************************************/
static status_t TimerPlausibilityTest(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af02      	add	r7, sp, #8
    uint32_t hct0 = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
    uint32_t lct0 = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
    uint32_t hct1 = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	60bb      	str	r3, [r7, #8]
    uint32_t lct1 = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]

    /* Get some start values */
    Timer_GetCounterValue(&hct0, &lct0);
 8000d6e:	f107 020c 	add.w	r2, r7, #12
 8000d72:	f107 0310 	add.w	r3, r7, #16
 8000d76:	4611      	mov	r1, r2
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f00c fff1 	bl	800dd60 <Timer_GetCounterValue>

    /* Check max value is not exceeded for LCT timer (us) */
    status_t status = CheckTimerCounterValues(hct0, lct0);
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	68fa      	ldr	r2, [r7, #12]
 8000d82:	4611      	mov	r1, r2
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ffcd 	bl	8000d24 <CheckTimerCounterValues>
 8000d8a:	6178      	str	r0, [r7, #20]
    if (status != STATUS_OK) return status;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <TimerPlausibilityTest+0x3e>
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	e039      	b.n	8000e0a <TimerPlausibilityTest+0xb2>

    /* Adding a delay. Depending on MCU speed, this takes any time.
     * However, the Timer should be able to solve this on any MCU. */
    for (volatile uint32_t i = 0; i < 100000; ++i) __asm("nop");
 8000d96:	2300      	movs	r3, #0
 8000d98:	603b      	str	r3, [r7, #0]
 8000d9a:	e003      	b.n	8000da4 <TimerPlausibilityTest+0x4c>
 8000d9c:	bf00      	nop
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	3301      	adds	r3, #1
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	4a1b      	ldr	r2, [pc, #108]	@ (8000e14 <TimerPlausibilityTest+0xbc>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d9f7      	bls.n	8000d9c <TimerPlausibilityTest+0x44>

    /* Get new timer value and verify some time has elapsed. */
    Timer_GetCounterValue(&hct1, &lct1);
 8000dac:	1d3a      	adds	r2, r7, #4
 8000dae:	f107 0308 	add.w	r3, r7, #8
 8000db2:	4611      	mov	r1, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f00c ffd3 	bl	800dd60 <Timer_GetCounterValue>

    /* Check max value is not exceeded for LCT timer (us) */
    status = CheckTimerCounterValues(hct1, lct1);
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ffaf 	bl	8000d24 <CheckTimerCounterValues>
 8000dc6:	6178      	str	r0, [r7, #20]
    if (status != STATUS_OK) return status;
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <TimerPlausibilityTest+0x7a>
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	e01b      	b.n	8000e0a <TimerPlausibilityTest+0xb2>

    /* Either the hct value must have been increased or the lct value if the hct
     * value is still the same. */
    if (!((hct1 > hct0) || ((hct1 == hct0) && (lct1 > lct0))))
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d816      	bhi.n	8000e08 <TimerPlausibilityTest+0xb0>
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d103      	bne.n	8000dea <TimerPlausibilityTest+0x92>
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d80e      	bhi.n	8000e08 <TimerPlausibilityTest+0xb0>
    {
        error_log("Timer plausibility check: the elapsed time could not be "
 8000dea:	6939      	ldr	r1, [r7, #16]
 8000dec:	68f8      	ldr	r0, [r7, #12]
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	9201      	str	r2, [sp, #4]
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	4603      	mov	r3, r0
 8000df8:	460a      	mov	r2, r1
 8000dfa:	4907      	ldr	r1, [pc, #28]	@ (8000e18 <TimerPlausibilityTest+0xc0>)
 8000dfc:	4807      	ldr	r0, [pc, #28]	@ (8000e1c <TimerPlausibilityTest+0xc4>)
 8000dfe:	f00d f887 	bl	800df10 <print>
                  "has elapsed!\n"
                  "The delay was induced by the following code:\n"
                  "for (volatile uint32_t i = 0; i < 100000; ++i) __asm(\"nop\");\n",
                  "Current Values: hct0 = %d, lct0 = %d, hct1 = %d, lct1 = %d",
                  hct0, lct0, hct1, lct1);
        return ERROR_FAIL;
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
 8000e06:	e000      	b.n	8000e0a <TimerPlausibilityTest+0xb2>
    }

    return STATUS_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	0001869f 	.word	0x0001869f
 8000e18:	08025670 	.word	0x08025670
 8000e1c:	080256ac 	.word	0x080256ac

08000e20 <TimerWraparoundTest>:
 * @return  Returns the \link #status_t status\endlink:
 *          - #STATUS_OK on success.
 *          - #ERROR_FAIL on failure (check the error log for more information).
 *****************************************************************************/
static status_t TimerWraparoundTest(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	@ 0x28
 8000e24:	af02      	add	r7, sp, #8
    /* Test parameter configuration: *****************************************/
    const uint8_t n = 2;        // The number of wraparounds to test.
 8000e26:	2302      	movs	r3, #2
 8000e28:	77fb      	strb	r3, [r7, #31]
    /*************************************************************************/

    uint32_t hct0 = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
    uint32_t lct0 = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
    uint32_t hct1 = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
    uint32_t lct1 = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	603b      	str	r3, [r7, #0]

    /* Get some start values. */
    Timer_GetCounterValue(&hct0, &lct0);
 8000e3a:	f107 0208 	add.w	r2, r7, #8
 8000e3e:	f107 030c 	add.w	r3, r7, #12
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f00c ff8b 	bl	800dd60 <Timer_GetCounterValue>

    /* Check max value is not exceeded for LCT timer (us) */
    status_t status = CheckTimerCounterValues(hct0, lct0);
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	68ba      	ldr	r2, [r7, #8]
 8000e4e:	4611      	mov	r1, r2
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff67 	bl	8000d24 <CheckTimerCounterValues>
 8000e56:	61b8      	str	r0, [r7, #24]
    if (status != STATUS_OK) return status;
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <TimerWraparoundTest+0x42>
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	e042      	b.n	8000ee8 <TimerWraparoundTest+0xc8>

    /* Set end after 2 seconds, i.e. 2 wrap around events. */
    uint32_t hct2 = hct0 + n;
 8000e62:	7ffa      	ldrb	r2, [r7, #31]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4413      	add	r3, r2
 8000e68:	617b      	str	r3, [r7, #20]
    uint32_t lct2 = lct0;
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	613b      	str	r3, [r7, #16]

    /* Periodically read timer values. From previous tests we
     * already know the timer value is increasing. */
    while (hct0 < hct2 || lct0 < lct2)
 8000e6e:	e032      	b.n	8000ed6 <TimerWraparoundTest+0xb6>
    {
        /* add counter a , which is increasing by +1, 1000000 or 1000,
         * different MCU different times get stuck for hard code value */
        Timer_GetCounterValue(&hct1, &lct1);
 8000e70:	463a      	mov	r2, r7
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	4611      	mov	r1, r2
 8000e76:	4618      	mov	r0, r3
 8000e78:	f00c ff72 	bl	800dd60 <Timer_GetCounterValue>

        /* Check max value is not exceeded for LCT timer (us) */
        status = CheckTimerCounterValues(hct0, lct0);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	4611      	mov	r1, r2
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ff4e 	bl	8000d24 <CheckTimerCounterValues>
 8000e88:	61b8      	str	r0, [r7, #24]
        if (status != STATUS_OK) return status;
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <TimerWraparoundTest+0x74>
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	e029      	b.n	8000ee8 <TimerWraparoundTest+0xc8>
        /* Testing if calls to Timer_GetCounterValue are equal or increasing.
         * Also testing if wraparound is correctly handled.
         * Assumption here is that two sequential calls to the get functions are
         * only a few µs apart! I.e. if hct wraps, the new lct must be smaller
         * than previous one. */
        if (!(((hct1 == hct0 + 1) && (lct1 < lct0))
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	1c5a      	adds	r2, r3, #1
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d103      	bne.n	8000ea6 <TimerWraparoundTest+0x86>
 8000e9e:	683a      	ldr	r2, [r7, #0]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d313      	bcc.n	8000ece <TimerWraparoundTest+0xae>
                || ((hct1 == hct0) && (lct1 >= lct0))))
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
        if (!(((hct1 == hct0 + 1) && (lct1 < lct0))
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d103      	bne.n	8000eb6 <TimerWraparoundTest+0x96>
                || ((hct1 == hct0) && (lct1 >= lct0))))
 8000eae:	683a      	ldr	r2, [r7, #0]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d20b      	bcs.n	8000ece <TimerWraparoundTest+0xae>
        {
            error_log("Timer plausibility check: the wraparound of \"lct\" or "
 8000eb6:	68f9      	ldr	r1, [r7, #12]
 8000eb8:	68ba      	ldr	r2, [r7, #8]
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	480b      	ldr	r0, [pc, #44]	@ (8000ef0 <TimerWraparoundTest+0xd0>)
 8000ec4:	f00d f824 	bl	800df10 <print>
                      "\"hct\" parameters of the Timer_GetCounterValue() "
                      "function was not handled correctly!\n"
                      "Current Values: hct0 = %d, lct0 = %d, hct1 = %d, lct1 = %d",
                      hct0, lct0, hct1, lct1);
            return ERROR_FAIL;
 8000ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ecc:	e00c      	b.n	8000ee8 <TimerWraparoundTest+0xc8>
        }

        hct0 = hct1;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	60fb      	str	r3, [r7, #12]
        lct0 = lct1;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	60bb      	str	r3, [r7, #8]
    while (hct0 < hct2 || lct0 < lct2)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	697a      	ldr	r2, [r7, #20]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d8c8      	bhi.n	8000e70 <TimerWraparoundTest+0x50>
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d8c4      	bhi.n	8000e70 <TimerWraparoundTest+0x50>
    }

    return STATUS_OK;
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3720      	adds	r7, #32
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	080257a0 	.word	0x080257a0

08000ef4 <SpiTransferInterruptCallback>:
 * @param   param The abstract interrupt callback parameter.
 *
 * @return  Returns #STATUS_OK.
 *****************************************************************************/
static status_t SpiTransferInterruptCallback(status_t status, void * param)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
    *((status_t*)param) = status;
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	601a      	str	r2, [r3, #0]
    return STATUS_OK;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
	...

08000f14 <SPITransferSync>:
 *            time (check also timer HAL implementation).
 *          - The S2PI layer error code if #S2PI_TransferFrame or #S2PI_GetStatus
 *            return any negative status.
 *****************************************************************************/
static status_t SPITransferSync(s2pi_slave_t slave, uint8_t * data, size_t size)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08c      	sub	sp, #48	@ 0x30
 8000f18:	af02      	add	r7, sp, #8
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
    /* Test parameter configuration: *****************************************/
    const uint32_t timeout_ms = 100;    // The transfer timeout in ms.
 8000f20:	2364      	movs	r3, #100	@ 0x64
 8000f22:	627b      	str	r3, [r7, #36]	@ 0x24
    /*************************************************************************/

    /* The status will be changed in the SPI callback. */
    volatile status_t callbackStatus = STATUS_BUSY;
 8000f24:	2302      	movs	r3, #2
 8000f26:	61fb      	str	r3, [r7, #28]

    status_t status = S2PI_TransferFrame(slave, data, data, size,
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	9301      	str	r3, [sp, #4]
 8000f2e:	4b24      	ldr	r3, [pc, #144]	@ (8000fc0 <SPITransferSync+0xac>)
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	68ba      	ldr	r2, [r7, #8]
 8000f36:	68b9      	ldr	r1, [r7, #8]
 8000f38:	68f8      	ldr	r0, [r7, #12]
 8000f3a:	f00c fd5d 	bl	800d9f8 <S2PI_TransferFrame>
 8000f3e:	6238      	str	r0, [r7, #32]
                                         SpiTransferInterruptCallback,
                                         (void*)&callbackStatus);
    if (status != STATUS_OK)
 8000f40:	6a3b      	ldr	r3, [r7, #32]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d005      	beq.n	8000f52 <SPITransferSync+0x3e>
    {
        error_log("SPI transfer failed! The call to S2PI_TransferFrame "
 8000f46:	6a39      	ldr	r1, [r7, #32]
 8000f48:	481e      	ldr	r0, [pc, #120]	@ (8000fc4 <SPITransferSync+0xb0>)
 8000f4a:	f00c ffe1 	bl	800df10 <print>
                  "yielded error code: %d",
                  status);
        return status;
 8000f4e:	6a3b      	ldr	r3, [r7, #32]
 8000f50:	e032      	b.n	8000fb8 <SPITransferSync+0xa4>

    /* Wait until the transfer is finished using a timeout.
     * Note: this already utilizes the timer HAL. So we might
     * need to test the timer before the SPI connection test. */
    ltc_t start;
    Time_GetNow(&start);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4618      	mov	r0, r3
 8000f58:	f00e fd1a 	bl	800f990 <Time_GetNow>
    do
    {
        status = S2PI_GetStatus(slave);
 8000f5c:	68f8      	ldr	r0, [r7, #12]
 8000f5e:	f00c fc2b 	bl	800d7b8 <S2PI_GetStatus>
 8000f62:	6238      	str	r0, [r7, #32]
        if (status < STATUS_OK)
 8000f64:	6a3b      	ldr	r3, [r7, #32]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	da08      	bge.n	8000f7c <SPITransferSync+0x68>
        {
            error_log("SPI transfer failed! The call to S2PI_GetStatus "
 8000f6a:	6a39      	ldr	r1, [r7, #32]
 8000f6c:	4816      	ldr	r0, [pc, #88]	@ (8000fc8 <SPITransferSync+0xb4>)
 8000f6e:	f00c ffcf 	bl	800df10 <print>
                      "yielded error code: %d", status);
            S2PI_Abort(slave);
 8000f72:	68f8      	ldr	r0, [r7, #12]
 8000f74:	f00c fe34 	bl	800dbe0 <S2PI_Abort>
            return status;
 8000f78:	6a3b      	ldr	r3, [r7, #32]
 8000f7a:	e01d      	b.n	8000fb8 <SPITransferSync+0xa4>
        }
        if (Time_CheckTimeoutMSec(&start, timeout_ms))
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000f82:	4618      	mov	r0, r3
 8000f84:	f00e fdb2 	bl	800faec <Time_CheckTimeoutMSec>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d006      	beq.n	8000f9c <SPITransferSync+0x88>
        {
            error_log("SPI transfer failed! The operation did not finished "
 8000f8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000f90:	480e      	ldr	r0, [pc, #56]	@ (8000fcc <SPITransferSync+0xb8>)
 8000f92:	f00c ffbd 	bl	800df10 <print>
                      "within %d ms. This may also be caused by an invalid "
                      "timer implementation!", timeout_ms);
            return ERROR_TIMEOUT;
 8000f96:	f06f 0305 	mvn.w	r3, #5
 8000f9a:	e00d      	b.n	8000fb8 <SPITransferSync+0xa4>
        }
    }
    while (status == STATUS_BUSY);
 8000f9c:	6a3b      	ldr	r3, [r7, #32]
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d0dc      	beq.n	8000f5c <SPITransferSync+0x48>

    if (callbackStatus != STATUS_OK)
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d006      	beq.n	8000fb6 <SPITransferSync+0xa2>
    {
        error_log("Invocation of the SPI callback failed! The SPI transfer "
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	4619      	mov	r1, r3
 8000fac:	4808      	ldr	r0, [pc, #32]	@ (8000fd0 <SPITransferSync+0xbc>)
 8000fae:	f00c ffaf 	bl	800df10 <print>
                  "callback yielded error code: %d", callbackStatus);
        return callbackStatus;
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	e000      	b.n	8000fb8 <SPITransferSync+0xa4>
    }

    return status;
 8000fb6:	6a3b      	ldr	r3, [r7, #32]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3728      	adds	r7, #40	@ 0x28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	08000ef5 	.word	0x08000ef5
 8000fc4:	0802586c 	.word	0x0802586c
 8000fc8:	080258c0 	.word	0x080258c0
 8000fcc:	08025910 	.word	0x08025910
 8000fd0:	08025998 	.word	0x08025998

08000fd4 <SpiConnectionTest>:
 *            match the expected values.
 *          - The S2PI layer error code if #S2PI_TransferFrame, #S2PI_GetStatus
 *            or the SPI callback yield any negative status.
 *****************************************************************************/
static status_t SpiConnectionTest(s2pi_slave_t slave)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	@ 0x28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
    status_t status = STATUS_OK;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	623b      	str	r3, [r7, #32]
    uint8_t data[17U] = { 0 };
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	731a      	strb	r2, [r3, #12]

    /* Transfer a pattern to the register */
    data[0] = 0x04; // Laser Pattern Register Address
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	733b      	strb	r3, [r7, #12]
    for (uint8_t i = 1; i < 17U; ++i) data[i] = i;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000ffc:	e00c      	b.n	8001018 <SpiConnectionTest+0x44>
 8000ffe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001002:	3328      	adds	r3, #40	@ 0x28
 8001004:	443b      	add	r3, r7
 8001006:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800100a:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800100e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001012:	3301      	adds	r3, #1
 8001014:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001018:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800101c:	2b10      	cmp	r3, #16
 800101e:	d9ee      	bls.n	8000ffe <SpiConnectionTest+0x2a>
    status = SPITransferSync(slave, data, 17U);
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	2211      	movs	r2, #17
 8001026:	4619      	mov	r1, r3
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ff73 	bl	8000f14 <SPITransferSync>
 800102e:	6238      	str	r0, [r7, #32]
    if (status != STATUS_OK)
 8001030:	6a3b      	ldr	r3, [r7, #32]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d004      	beq.n	8001040 <SpiConnectionTest+0x6c>
    {
        error_log("SPI connection test failed!");
 8001036:	482c      	ldr	r0, [pc, #176]	@ (80010e8 <SpiConnectionTest+0x114>)
 8001038:	f00c ff6a 	bl	800df10 <print>
        return status;
 800103c:	6a3b      	ldr	r3, [r7, #32]
 800103e:	e04e      	b.n	80010de <SpiConnectionTest+0x10a>
    }

    /* Clear the laser pattern and read back previous values. */
    data[0] = 0x04; // Laser Pattern Register Address
 8001040:	2304      	movs	r3, #4
 8001042:	733b      	strb	r3, [r7, #12]
    for (uint8_t i = 1; i < 17U; ++i) data[i] = 0;
 8001044:	2301      	movs	r3, #1
 8001046:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800104a:	e00b      	b.n	8001064 <SpiConnectionTest+0x90>
 800104c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001050:	3328      	adds	r3, #40	@ 0x28
 8001052:	443b      	add	r3, r7
 8001054:	2200      	movs	r2, #0
 8001056:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800105a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800105e:	3301      	adds	r3, #1
 8001060:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001064:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001068:	2b10      	cmp	r3, #16
 800106a:	d9ef      	bls.n	800104c <SpiConnectionTest+0x78>
    status = SPITransferSync(slave, data, 17U);
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	2211      	movs	r2, #17
 8001072:	4619      	mov	r1, r3
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ff4d 	bl	8000f14 <SPITransferSync>
 800107a:	6238      	str	r0, [r7, #32]
    if (status != STATUS_OK)
 800107c:	6a3b      	ldr	r3, [r7, #32]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d004      	beq.n	800108c <SpiConnectionTest+0xb8>
    {
        error_log("SPI connection test failed!");
 8001082:	4819      	ldr	r0, [pc, #100]	@ (80010e8 <SpiConnectionTest+0x114>)
 8001084:	f00c ff44 	bl	800df10 <print>
        return status;
 8001088:	6a3b      	ldr	r3, [r7, #32]
 800108a:	e028      	b.n	80010de <SpiConnectionTest+0x10a>
    }

    /* Verify the read pattern. */
    for (uint8_t i = 1; i < 17U; ++i)
 800108c:	2301      	movs	r3, #1
 800108e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001092:	e01f      	b.n	80010d4 <SpiConnectionTest+0x100>
    {
        if (data[i] != i)
 8001094:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001098:	3328      	adds	r3, #40	@ 0x28
 800109a:	443b      	add	r3, r7
 800109c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80010a0:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d010      	beq.n	80010ca <SpiConnectionTest+0xf6>
        {
            error_log("SPI connection test failed!\n"
 80010a8:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 80010ac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80010b0:	3328      	adds	r3, #40	@ 0x28
 80010b2:	443b      	add	r3, r7
 80010b4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80010b8:	461a      	mov	r2, r3
 80010ba:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80010be:	480b      	ldr	r0, [pc, #44]	@ (80010ec <SpiConnectionTest+0x118>)
 80010c0:	f00c ff26 	bl	800df10 <print>
                      "Verification of read data is invalid!\n"
                      "read_data[%d] = %d, but expected was %d",
                      i, data[i], i);
            return ERROR_FAIL;
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	e009      	b.n	80010de <SpiConnectionTest+0x10a>
    for (uint8_t i = 1; i < 17U; ++i)
 80010ca:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80010ce:	3301      	adds	r3, #1
 80010d0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80010d4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80010d8:	2b10      	cmp	r3, #16
 80010da:	d9db      	bls.n	8001094 <SpiConnectionTest+0xc0>
        }
    }

    return STATUS_OK;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3728      	adds	r7, #40	@ 0x28
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	080259f8 	.word	0x080259f8
 80010ec:	08025a1c 	.word	0x08025a1c

080010f0 <SpiMaxLengthTest>:
 *            match the expected values.
 *          - The S2PI layer error code if #S2PI_TransferFrame or #S2PI_GetStatus
 *            return any negative status.
 *****************************************************************************/
static status_t SpiMaxLengthTest(s2pi_slave_t slave)
{
 80010f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010f2:	b0f1      	sub	sp, #452	@ 0x1c4
 80010f4:	af04      	add	r7, sp, #16
 80010f6:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80010fa:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80010fe:	6018      	str	r0, [r3, #0]
    status_t status = STATUS_OK;
 8001100:	2300      	movs	r3, #0
 8001102:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    uint8_t data[400U] = { 0 };
 8001106:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800110a:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	3304      	adds	r3, #4
 8001114:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f022 fb61 	bl	80237e2 <memset>

    /* Setup device (enable DMA mode). */
    data[0] = 0x10; data[1] = 0x12;
 8001120:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001124:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8001128:	2210      	movs	r2, #16
 800112a:	701a      	strb	r2, [r3, #0]
 800112c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001130:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8001134:	2212      	movs	r2, #18
 8001136:	705a      	strb	r2, [r3, #1]
    status = SPITransferSync(slave, data, 2);
 8001138:	f107 010c 	add.w	r1, r7, #12
 800113c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001140:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001144:	2202      	movs	r2, #2
 8001146:	6818      	ldr	r0, [r3, #0]
 8001148:	f7ff fee4 	bl	8000f14 <SPITransferSync>
 800114c:	f8c7 01a0 	str.w	r0, [r7, #416]	@ 0x1a0
    if (status != STATUS_OK)
 8001150:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d005      	beq.n	8001164 <SpiMaxLengthTest+0x74>
    {
        error_log("Device configuration failed!");
 8001158:	48ac      	ldr	r0, [pc, #688]	@ (800140c <SpiMaxLengthTest+0x31c>)
 800115a:	f00c fed9 	bl	800df10 <print>
        return status;
 800115e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001162:	e14d      	b.n	8001400 <SpiMaxLengthTest+0x310>
    }

    data[0] = 0x12; data[1] = 0x00; data[2] = 0x2B;
 8001164:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001168:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800116c:	2212      	movs	r2, #18
 800116e:	701a      	strb	r2, [r3, #0]
 8001170:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001174:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8001178:	2200      	movs	r2, #0
 800117a:	705a      	strb	r2, [r3, #1]
 800117c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001180:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8001184:	222b      	movs	r2, #43	@ 0x2b
 8001186:	709a      	strb	r2, [r3, #2]
    status = SPITransferSync(slave, data, 3);
 8001188:	f107 010c 	add.w	r1, r7, #12
 800118c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001190:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001194:	2203      	movs	r2, #3
 8001196:	6818      	ldr	r0, [r3, #0]
 8001198:	f7ff febc 	bl	8000f14 <SPITransferSync>
 800119c:	f8c7 01a0 	str.w	r0, [r7, #416]	@ 0x1a0
    if (status != STATUS_OK)
 80011a0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d005      	beq.n	80011b4 <SpiMaxLengthTest+0xc4>
    {
        error_log("Device configuration failed!");
 80011a8:	4898      	ldr	r0, [pc, #608]	@ (800140c <SpiMaxLengthTest+0x31c>)
 80011aa:	f00c feb1 	bl	800df10 <print>
        return status;
 80011ae:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80011b2:	e125      	b.n	8001400 <SpiMaxLengthTest+0x310>
    }

    /* Transfer a pattern to the register */
    for (uint32_t i = 0; i < sizeof(data); i += 4)
 80011b4:	2300      	movs	r3, #0
 80011b6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 80011ba:	e032      	b.n	8001222 <SpiMaxLengthTest+0x132>
    {
        data[i + 0] = 0x1E;             // Address
 80011bc:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80011c0:	f5a3 72d2 	sub.w	r2, r3, #420	@ 0x1a4
 80011c4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80011c8:	4413      	add	r3, r2
 80011ca:	221e      	movs	r2, #30
 80011cc:	701a      	strb	r2, [r3, #0]
        data[i + 1] = (uint8_t)i;       // Random Data Byte 0
 80011ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80011d2:	3301      	adds	r3, #1
 80011d4:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 80011d8:	b2d1      	uxtb	r1, r2
 80011da:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 80011de:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80011e2:	54d1      	strb	r1, [r2, r3]
        data[i + 2] = (uint8_t)(i + 1); // Random Data Byte 1
 80011e4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80011ee:	3302      	adds	r3, #2
 80011f0:	3201      	adds	r2, #1
 80011f2:	b2d1      	uxtb	r1, r2
 80011f4:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 80011f8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80011fc:	54d1      	strb	r1, [r2, r3]
        data[i + 3] = (uint8_t)(i * 2); // Random Data Byte 2
 80011fe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001202:	b2da      	uxtb	r2, r3
 8001204:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001208:	3303      	adds	r3, #3
 800120a:	0052      	lsls	r2, r2, #1
 800120c:	b2d1      	uxtb	r1, r2
 800120e:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 8001212:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001216:	54d1      	strb	r1, [r2, r3]
    for (uint32_t i = 0; i < sizeof(data); i += 4)
 8001218:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800121c:	3304      	adds	r3, #4
 800121e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8001222:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001226:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800122a:	d3c7      	bcc.n	80011bc <SpiMaxLengthTest+0xcc>
    }

    status = SPITransferSync(slave, data, sizeof(data));
 800122c:	f107 010c 	add.w	r1, r7, #12
 8001230:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001234:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001238:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	f7ff fe69 	bl	8000f14 <SPITransferSync>
 8001242:	f8c7 01a0 	str.w	r0, [r7, #416]	@ 0x1a0
    if (status != STATUS_OK)
 8001246:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d005      	beq.n	800125a <SpiMaxLengthTest+0x16a>
    {
        error_log("SPI maximum data length test failed!");
 800124e:	4870      	ldr	r0, [pc, #448]	@ (8001410 <SpiMaxLengthTest+0x320>)
 8001250:	f00c fe5e 	bl	800df10 <print>
        return status;
 8001254:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001258:	e0d2      	b.n	8001400 <SpiMaxLengthTest+0x310>
    }

    /* Repeat ... */
    for (uint32_t i = 0; i < sizeof(data); i += 4)
 800125a:	2300      	movs	r3, #0
 800125c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001260:	e032      	b.n	80012c8 <SpiMaxLengthTest+0x1d8>
    {
        data[i + 0] = 0x1E;             // Address
 8001262:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001266:	f5a3 72d2 	sub.w	r2, r3, #420	@ 0x1a4
 800126a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800126e:	4413      	add	r3, r2
 8001270:	221e      	movs	r2, #30
 8001272:	701a      	strb	r2, [r3, #0]
        data[i + 1] = (uint8_t)i;       // Random Data Byte 0
 8001274:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001278:	3301      	adds	r3, #1
 800127a:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 800127e:	b2d1      	uxtb	r1, r2
 8001280:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 8001284:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001288:	54d1      	strb	r1, [r2, r3]
        data[i + 2] = (uint8_t)(i + 1); // Random Data Byte 1
 800128a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800128e:	b2da      	uxtb	r2, r3
 8001290:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001294:	3302      	adds	r3, #2
 8001296:	3201      	adds	r2, #1
 8001298:	b2d1      	uxtb	r1, r2
 800129a:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 800129e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80012a2:	54d1      	strb	r1, [r2, r3]
        data[i + 3] = (uint8_t)(i * 2); // Random Data Byte 2
 80012a4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80012ae:	3303      	adds	r3, #3
 80012b0:	0052      	lsls	r2, r2, #1
 80012b2:	b2d1      	uxtb	r1, r2
 80012b4:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 80012b8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80012bc:	54d1      	strb	r1, [r2, r3]
    for (uint32_t i = 0; i < sizeof(data); i += 4)
 80012be:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80012c2:	3304      	adds	r3, #4
 80012c4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80012c8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80012cc:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80012d0:	d3c7      	bcc.n	8001262 <SpiMaxLengthTest+0x172>
    }

    status = SPITransferSync(slave, data, sizeof(data));
 80012d2:	f107 010c 	add.w	r1, r7, #12
 80012d6:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80012da:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80012de:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80012e2:	6818      	ldr	r0, [r3, #0]
 80012e4:	f7ff fe16 	bl	8000f14 <SPITransferSync>
 80012e8:	f8c7 01a0 	str.w	r0, [r7, #416]	@ 0x1a0
    if (status != STATUS_OK)
 80012ec:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d005      	beq.n	8001300 <SpiMaxLengthTest+0x210>
    {
        error_log("SPI maximum data length test failed!");
 80012f4:	4846      	ldr	r0, [pc, #280]	@ (8001410 <SpiMaxLengthTest+0x320>)
 80012f6:	f00c fe0b 	bl	800df10 <print>
        return status;
 80012fa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80012fe:	e07f      	b.n	8001400 <SpiMaxLengthTest+0x310>
    }

    /* Verify the read pattern; skip all address bytes. */
    for (uint32_t i = 0; i < sizeof(data); i += 4)
 8001300:	2300      	movs	r3, #0
 8001302:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001306:	e075      	b.n	80013f4 <SpiMaxLengthTest+0x304>
    {
        uint32_t j = (i + 4) % sizeof(data);
 8001308:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800130c:	3304      	adds	r3, #4
 800130e:	4a41      	ldr	r2, [pc, #260]	@ (8001414 <SpiMaxLengthTest+0x324>)
 8001310:	fba2 1203 	umull	r1, r2, r2, r3
 8001314:	09d2      	lsrs	r2, r2, #7
 8001316:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800131a:	fb01 f202 	mul.w	r2, r1, r2
 800131e:	1a9b      	subs	r3, r3, r2
 8001320:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
        if (data[j + 1] != (uint8_t)i
 8001324:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8001328:	3301      	adds	r3, #1
 800132a:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 800132e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001332:	5cd2      	ldrb	r2, [r2, r3]
 8001334:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001338:	b2db      	uxtb	r3, r3
 800133a:	429a      	cmp	r2, r3
 800133c:	d11d      	bne.n	800137a <SpiMaxLengthTest+0x28a>
         || data[j + 2] != (uint8_t)(i + 1)
 800133e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8001342:	3302      	adds	r3, #2
 8001344:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 8001348:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800134c:	5cd2      	ldrb	r2, [r2, r3]
 800134e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001352:	b2db      	uxtb	r3, r3
 8001354:	3301      	adds	r3, #1
 8001356:	b2db      	uxtb	r3, r3
 8001358:	429a      	cmp	r2, r3
 800135a:	d10e      	bne.n	800137a <SpiMaxLengthTest+0x28a>
         || data[j + 3] != (uint8_t)(i * 2))
 800135c:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8001360:	3303      	adds	r3, #3
 8001362:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 8001366:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800136a:	5cd2      	ldrb	r2, [r2, r3]
 800136c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001370:	b2db      	uxtb	r3, r3
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	b2db      	uxtb	r3, r3
 8001376:	429a      	cmp	r2, r3
 8001378:	d037      	beq.n	80013ea <SpiMaxLengthTest+0x2fa>
        {
            error_log("SPI maximum data length test failed!\n"
 800137a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800137e:	b2db      	uxtb	r3, r3
 8001380:	461d      	mov	r5, r3
 8001382:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001386:	b2db      	uxtb	r3, r3
 8001388:	3301      	adds	r3, #1
 800138a:	b2db      	uxtb	r3, r3
 800138c:	461e      	mov	r6, r3
 800138e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001392:	b2db      	uxtb	r3, r3
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	b2db      	uxtb	r3, r3
 8001398:	4619      	mov	r1, r3
 800139a:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800139e:	3301      	adds	r3, #1
 80013a0:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 80013a4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80013a8:	5cd3      	ldrb	r3, [r2, r3]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80013b0:	3302      	adds	r3, #2
 80013b2:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 80013b6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80013ba:	5cd3      	ldrb	r3, [r2, r3]
 80013bc:	461c      	mov	r4, r3
 80013be:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80013c2:	3303      	adds	r3, #3
 80013c4:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 80013c8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80013cc:	5cd3      	ldrb	r3, [r2, r3]
 80013ce:	9303      	str	r3, [sp, #12]
 80013d0:	9402      	str	r4, [sp, #8]
 80013d2:	9001      	str	r0, [sp, #4]
 80013d4:	9100      	str	r1, [sp, #0]
 80013d6:	4633      	mov	r3, r6
 80013d8:	462a      	mov	r2, r5
 80013da:	f8d7 11a4 	ldr.w	r1, [r7, #420]	@ 0x1a4
 80013de:	480e      	ldr	r0, [pc, #56]	@ (8001418 <SpiMaxLengthTest+0x328>)
 80013e0:	f00c fd96 	bl	800df10 <print>
                      "Verification of read data is invalid at byte %d!\n"
                      " - expected: 0x%02X%02X%02X\n"
                      " - actual:   0x%02X%02X%02X",
                      i, (uint8_t)i, (uint8_t)(i + 1), (uint8_t)(i * 2),
                      data[j + 1], data[j + 2], data[j + 3]);
            return ERROR_FAIL;
 80013e4:	f04f 33ff 	mov.w	r3, #4294967295
 80013e8:	e00a      	b.n	8001400 <SpiMaxLengthTest+0x310>
    for (uint32_t i = 0; i < sizeof(data); i += 4)
 80013ea:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80013ee:	3304      	adds	r3, #4
 80013f0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80013f4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80013f8:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80013fc:	d384      	bcc.n	8001308 <SpiMaxLengthTest+0x218>
        }
    }

    return STATUS_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	f507 77da 	add.w	r7, r7, #436	@ 0x1b4
 8001406:	46bd      	mov	sp, r7
 8001408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800140a:	bf00      	nop
 800140c:	08025a90 	.word	0x08025a90
 8001410:	08025ab8 	.word	0x08025ab8
 8001414:	51eb851f 	.word	0x51eb851f
 8001418:	08025ae8 	.word	0x08025ae8

0800141c <ConfigureDevice>:
 *            specified time (check also timer HAL implementation).
 *          - The S2PI layer error code if #S2PI_TransferFrame or #S2PI_GetStatus
 *            return any negative status.
 *****************************************************************************/
static status_t ConfigureDevice(s2pi_slave_t slave, int8_t rcoTrim)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b092      	sub	sp, #72	@ 0x48
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	70fb      	strb	r3, [r7, #3]
    /* Setup Device and Trigger Measurement. */
    assert(rcoTrim >= -34 && rcoTrim < 0x3F - 34);
 8001428:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800142c:	f113 0f22 	cmn.w	r3, #34	@ 0x22
 8001430:	db03      	blt.n	800143a <ConfigureDevice+0x1e>
 8001432:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001436:	2b1c      	cmp	r3, #28
 8001438:	dd06      	ble.n	8001448 <ConfigureDevice+0x2c>
 800143a:	4b82      	ldr	r3, [pc, #520]	@ (8001644 <ConfigureDevice+0x228>)
 800143c:	4a82      	ldr	r2, [pc, #520]	@ (8001648 <ConfigureDevice+0x22c>)
 800143e:	f44f 712a 	mov.w	r1, #680	@ 0x2a8
 8001442:	4882      	ldr	r0, [pc, #520]	@ (800164c <ConfigureDevice+0x230>)
 8001444:	f00c ffd6 	bl	800e3f4 <__assert_func>
    const uint16_t v = (uint16_t)(0x0010U | (((uint16_t)(34 + rcoTrim) & 0x3F) << 6U));
 8001448:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800144c:	b29b      	uxth	r3, r3
 800144e:	3322      	adds	r3, #34	@ 0x22
 8001450:	b29b      	uxth	r3, r3
 8001452:	019b      	lsls	r3, r3, #6
 8001454:	b29b      	uxth	r3, r3
 8001456:	f403 637c 	and.w	r3, r3, #4032	@ 0xfc0
 800145a:	b29b      	uxth	r3, r3
 800145c:	f043 0310 	orr.w	r3, r3, #16
 8001460:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint8_t d1[] = { 0x14U, (uint8_t)(v >> 8U), v & 0xFFU, 0x21U };
 8001464:	2314      	movs	r3, #20
 8001466:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 800146a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800146e:	0a1b      	lsrs	r3, r3, #8
 8001470:	b29b      	uxth	r3, r3
 8001472:	b2db      	uxtb	r3, r3
 8001474:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8001478:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800147c:	b2db      	uxtb	r3, r3
 800147e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8001482:	2321      	movs	r3, #33	@ 0x21
 8001484:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    status_t status = SPITransferSync(slave, d1, sizeof(d1));
 8001488:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800148c:	2204      	movs	r2, #4
 800148e:	4619      	mov	r1, r3
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff fd3f 	bl	8000f14 <SPITransferSync>
 8001496:	6438      	str	r0, [r7, #64]	@ 0x40
    if (status != STATUS_OK)
 8001498:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800149a:	2b00      	cmp	r3, #0
 800149c:	d004      	beq.n	80014a8 <ConfigureDevice+0x8c>
    {
        error_log("Device configuration failed!");
 800149e:	486c      	ldr	r0, [pc, #432]	@ (8001650 <ConfigureDevice+0x234>)
 80014a0:	f00c fd36 	bl	800df10 <print>
        return status;
 80014a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014a6:	e0c8      	b.n	800163a <ConfigureDevice+0x21e>
    }

    uint8_t d2[] = { 0x16, 0x7F, 0xFF, 0x7F, 0xE9 };
 80014a8:	4a6a      	ldr	r2, [pc, #424]	@ (8001654 <ConfigureDevice+0x238>)
 80014aa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80014ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014b2:	6018      	str	r0, [r3, #0]
 80014b4:	3304      	adds	r3, #4
 80014b6:	7019      	strb	r1, [r3, #0]
    status = SPITransferSync(slave, d2, sizeof(d2));
 80014b8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80014bc:	2205      	movs	r2, #5
 80014be:	4619      	mov	r1, r3
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff fd27 	bl	8000f14 <SPITransferSync>
 80014c6:	6438      	str	r0, [r7, #64]	@ 0x40
    if (status != STATUS_OK)
 80014c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d004      	beq.n	80014d8 <ConfigureDevice+0xbc>
    {
        error_log("Device configuration failed!");
 80014ce:	4860      	ldr	r0, [pc, #384]	@ (8001650 <ConfigureDevice+0x234>)
 80014d0:	f00c fd1e 	bl	800df10 <print>
        return status;
 80014d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014d6:	e0b0      	b.n	800163a <ConfigureDevice+0x21e>
    }

    uint8_t d3[] = { 0x18, 0x00, 0x00, 0x03 };
 80014d8:	4b5f      	ldr	r3, [pc, #380]	@ (8001658 <ConfigureDevice+0x23c>)
 80014da:	633b      	str	r3, [r7, #48]	@ 0x30
    status = SPITransferSync(slave, d3, sizeof(d3));
 80014dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014e0:	2204      	movs	r2, #4
 80014e2:	4619      	mov	r1, r3
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff fd15 	bl	8000f14 <SPITransferSync>
 80014ea:	6438      	str	r0, [r7, #64]	@ 0x40
    if (status != STATUS_OK)
 80014ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d004      	beq.n	80014fc <ConfigureDevice+0xe0>
    {
        error_log("Device configuration failed!");
 80014f2:	4857      	ldr	r0, [pc, #348]	@ (8001650 <ConfigureDevice+0x234>)
 80014f4:	f00c fd0c 	bl	800df10 <print>
        return status;
 80014f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014fa:	e09e      	b.n	800163a <ConfigureDevice+0x21e>
    }

    uint8_t d4[] = { 0x10, 0x12 };
 80014fc:	f241 2310 	movw	r3, #4624	@ 0x1210
 8001500:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    status = SPITransferSync(slave, d4, sizeof(d4));
 8001502:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001506:	2202      	movs	r2, #2
 8001508:	4619      	mov	r1, r3
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff fd02 	bl	8000f14 <SPITransferSync>
 8001510:	6438      	str	r0, [r7, #64]	@ 0x40
    if (status != STATUS_OK)
 8001512:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001514:	2b00      	cmp	r3, #0
 8001516:	d004      	beq.n	8001522 <ConfigureDevice+0x106>
    {
        error_log("Device configuration failed!");
 8001518:	484d      	ldr	r0, [pc, #308]	@ (8001650 <ConfigureDevice+0x234>)
 800151a:	f00c fcf9 	bl	800df10 <print>
        return status;
 800151e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001520:	e08b      	b.n	800163a <ConfigureDevice+0x21e>
    }

    uint8_t d5[] = { 0x12, 0x00, 0x2B };
 8001522:	4a4e      	ldr	r2, [pc, #312]	@ (800165c <ConfigureDevice+0x240>)
 8001524:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001528:	6812      	ldr	r2, [r2, #0]
 800152a:	4611      	mov	r1, r2
 800152c:	8019      	strh	r1, [r3, #0]
 800152e:	3302      	adds	r3, #2
 8001530:	0c12      	lsrs	r2, r2, #16
 8001532:	701a      	strb	r2, [r3, #0]
    status = SPITransferSync(slave, d5, sizeof(d5));
 8001534:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001538:	2203      	movs	r2, #3
 800153a:	4619      	mov	r1, r3
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff fce9 	bl	8000f14 <SPITransferSync>
 8001542:	6438      	str	r0, [r7, #64]	@ 0x40
    if (status != STATUS_OK)
 8001544:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001546:	2b00      	cmp	r3, #0
 8001548:	d004      	beq.n	8001554 <ConfigureDevice+0x138>
    {
        error_log("Device configuration failed!");
 800154a:	4841      	ldr	r0, [pc, #260]	@ (8001650 <ConfigureDevice+0x234>)
 800154c:	f00c fce0 	bl	800df10 <print>
        return status;
 8001550:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001552:	e072      	b.n	800163a <ConfigureDevice+0x21e>
    }

    uint8_t d6[] = { 0x08, 0x04, 0x84, 0x10 };
 8001554:	4b42      	ldr	r3, [pc, #264]	@ (8001660 <ConfigureDevice+0x244>)
 8001556:	627b      	str	r3, [r7, #36]	@ 0x24
    status = SPITransferSync(slave, d6, sizeof(d6));
 8001558:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800155c:	2204      	movs	r2, #4
 800155e:	4619      	mov	r1, r3
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff fcd7 	bl	8000f14 <SPITransferSync>
 8001566:	6438      	str	r0, [r7, #64]	@ 0x40
    if (status != STATUS_OK)
 8001568:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800156a:	2b00      	cmp	r3, #0
 800156c:	d004      	beq.n	8001578 <ConfigureDevice+0x15c>
    {
        error_log("Device configuration failed!");
 800156e:	4838      	ldr	r0, [pc, #224]	@ (8001650 <ConfigureDevice+0x234>)
 8001570:	f00c fcce 	bl	800df10 <print>
        return status;
 8001574:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001576:	e060      	b.n	800163a <ConfigureDevice+0x21e>
    }

    uint8_t d7[] = { 0x0A, 0xFE, 0x51, 0x0F, 0x05 };
 8001578:	4a3a      	ldr	r2, [pc, #232]	@ (8001664 <ConfigureDevice+0x248>)
 800157a:	f107 031c 	add.w	r3, r7, #28
 800157e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001582:	6018      	str	r0, [r3, #0]
 8001584:	3304      	adds	r3, #4
 8001586:	7019      	strb	r1, [r3, #0]
    status = SPITransferSync(slave, d7, sizeof(d7));
 8001588:	f107 031c 	add.w	r3, r7, #28
 800158c:	2205      	movs	r2, #5
 800158e:	4619      	mov	r1, r3
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff fcbf 	bl	8000f14 <SPITransferSync>
 8001596:	6438      	str	r0, [r7, #64]	@ 0x40
    if (status != STATUS_OK)
 8001598:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800159a:	2b00      	cmp	r3, #0
 800159c:	d004      	beq.n	80015a8 <ConfigureDevice+0x18c>
    {
        error_log("Device configuration failed!");
 800159e:	482c      	ldr	r0, [pc, #176]	@ (8001650 <ConfigureDevice+0x234>)
 80015a0:	f00c fcb6 	bl	800df10 <print>
        return status;
 80015a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015a6:	e048      	b.n	800163a <ConfigureDevice+0x21e>
    }

    uint8_t d8[] = { 0x0C, 0x00, 0x00, 0x00 };
 80015a8:	230c      	movs	r3, #12
 80015aa:	61bb      	str	r3, [r7, #24]
    status = SPITransferSync(slave, d8, sizeof(d8));
 80015ac:	f107 0318 	add.w	r3, r7, #24
 80015b0:	2204      	movs	r2, #4
 80015b2:	4619      	mov	r1, r3
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff fcad 	bl	8000f14 <SPITransferSync>
 80015ba:	6438      	str	r0, [r7, #64]	@ 0x40
    if (status != STATUS_OK)
 80015bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d004      	beq.n	80015cc <ConfigureDevice+0x1b0>
    {
        error_log("Device configuration failed!");
 80015c2:	4823      	ldr	r0, [pc, #140]	@ (8001650 <ConfigureDevice+0x234>)
 80015c4:	f00c fca4 	bl	800df10 <print>
        return status;
 80015c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015ca:	e036      	b.n	800163a <ConfigureDevice+0x21e>
    }

    uint8_t d9[] = { 0x1E, 0x00, 0x00, 0x00 };
 80015cc:	231e      	movs	r3, #30
 80015ce:	617b      	str	r3, [r7, #20]
    status = SPITransferSync(slave, d9, sizeof(d9));
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	2204      	movs	r2, #4
 80015d6:	4619      	mov	r1, r3
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff fc9b 	bl	8000f14 <SPITransferSync>
 80015de:	6438      	str	r0, [r7, #64]	@ 0x40
    if (status != STATUS_OK)
 80015e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d004      	beq.n	80015f0 <ConfigureDevice+0x1d4>
    {
        error_log("Device configuration failed!");
 80015e6:	481a      	ldr	r0, [pc, #104]	@ (8001650 <ConfigureDevice+0x234>)
 80015e8:	f00c fc92 	bl	800df10 <print>
        return status;
 80015ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015ee:	e024      	b.n	800163a <ConfigureDevice+0x21e>
    }

    uint8_t d10[] = { 0x20, 0x01, 0xFF, 0xFF };
 80015f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001668 <ConfigureDevice+0x24c>)
 80015f2:	613b      	str	r3, [r7, #16]
    status = SPITransferSync(slave, d10, sizeof(d10));
 80015f4:	f107 0310 	add.w	r3, r7, #16
 80015f8:	2204      	movs	r2, #4
 80015fa:	4619      	mov	r1, r3
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff fc89 	bl	8000f14 <SPITransferSync>
 8001602:	6438      	str	r0, [r7, #64]	@ 0x40
    if (status != STATUS_OK)
 8001604:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001606:	2b00      	cmp	r3, #0
 8001608:	d004      	beq.n	8001614 <ConfigureDevice+0x1f8>
    {
        error_log("Device configuration failed!");
 800160a:	4811      	ldr	r0, [pc, #68]	@ (8001650 <ConfigureDevice+0x234>)
 800160c:	f00c fc80 	bl	800df10 <print>
        return status;
 8001610:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001612:	e012      	b.n	800163a <ConfigureDevice+0x21e>
    }

    uint8_t d11[] = { 0x22, 0xFF, 0xFF, 0x04 };
 8001614:	4b15      	ldr	r3, [pc, #84]	@ (800166c <ConfigureDevice+0x250>)
 8001616:	60fb      	str	r3, [r7, #12]
    status = SPITransferSync(slave, d11, sizeof(d11));
 8001618:	f107 030c 	add.w	r3, r7, #12
 800161c:	2204      	movs	r2, #4
 800161e:	4619      	mov	r1, r3
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff fc77 	bl	8000f14 <SPITransferSync>
 8001626:	6438      	str	r0, [r7, #64]	@ 0x40
    if (status != STATUS_OK)
 8001628:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800162a:	2b00      	cmp	r3, #0
 800162c:	d004      	beq.n	8001638 <ConfigureDevice+0x21c>
    {
        error_log("Device configuration failed!");
 800162e:	4808      	ldr	r0, [pc, #32]	@ (8001650 <ConfigureDevice+0x234>)
 8001630:	f00c fc6e 	bl	800df10 <print>
        return status;
 8001634:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001636:	e000      	b.n	800163a <ConfigureDevice+0x21e>
    }

    return status;
 8001638:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 800163a:	4618      	mov	r0, r3
 800163c:	3748      	adds	r7, #72	@ 0x48
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	08025b80 	.word	0x08025b80
 8001648:	08027b44 	.word	0x08027b44
 800164c:	08025ba8 	.word	0x08025ba8
 8001650:	08025a90 	.word	0x08025a90
 8001654:	08025bc8 	.word	0x08025bc8
 8001658:	03000018 	.word	0x03000018
 800165c:	08025bd0 	.word	0x08025bd0
 8001660:	10840408 	.word	0x10840408
 8001664:	08025bd4 	.word	0x08025bd4
 8001668:	ffff0120 	.word	0xffff0120
 800166c:	04ffff22 	.word	0x04ffff22

08001670 <TriggerMeasurement>:
 *          - The S2PI layer error code if #S2PI_TransferFrame or #S2PI_GetStatus
 *            return any negative status.
 *****************************************************************************/
static status_t TriggerMeasurement(s2pi_slave_t slave, uint16_t samples,
                                   s2pi_callback_t callback, void * callbackData)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af02      	add	r7, sp, #8
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	603b      	str	r3, [r7, #0]
 800167c:	460b      	mov	r3, r1
 800167e:	817b      	strh	r3, [r7, #10]
    // samples is zero based, i.e. writing 0 yields 1 sample
    samples = samples > 0 ? samples - 1 : samples;
 8001680:	897b      	ldrh	r3, [r7, #10]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <TriggerMeasurement+0x1e>
 8001686:	897b      	ldrh	r3, [r7, #10]
 8001688:	3b01      	subs	r3, #1
 800168a:	b29b      	uxth	r3, r3
 800168c:	e000      	b.n	8001690 <TriggerMeasurement+0x20>
 800168e:	897b      	ldrh	r3, [r7, #10]
 8001690:	817b      	strh	r3, [r7, #10]
    const uint16_t v = (uint16_t)(0x8000U | ((samples & 0x03FFU) << 5U));
 8001692:	897b      	ldrh	r3, [r7, #10]
 8001694:	015b      	lsls	r3, r3, #5
 8001696:	b29a      	uxth	r2, r3
 8001698:	f647 73e0 	movw	r3, #32736	@ 0x7fe0
 800169c:	4013      	ands	r3, r2
 800169e:	b29a      	uxth	r2, r3
 80016a0:	4b14      	ldr	r3, [pc, #80]	@ (80016f4 <TriggerMeasurement+0x84>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	82fb      	strh	r3, [r7, #22]

    // data is static as the transfer is asynchronous and the buffer must persist.
    static uint8_t data[] = { 0x1CU, 0x00U, 0x00U };
    data[0] = 0x1CU;
 80016a6:	4b14      	ldr	r3, [pc, #80]	@ (80016f8 <TriggerMeasurement+0x88>)
 80016a8:	221c      	movs	r2, #28
 80016aa:	701a      	strb	r2, [r3, #0]
    data[1] = (uint8_t)(v >> 8U);
 80016ac:	8afb      	ldrh	r3, [r7, #22]
 80016ae:	0a1b      	lsrs	r3, r3, #8
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	4b10      	ldr	r3, [pc, #64]	@ (80016f8 <TriggerMeasurement+0x88>)
 80016b6:	705a      	strb	r2, [r3, #1]
    data[2] = v & 0xFFU;
 80016b8:	8afb      	ldrh	r3, [r7, #22]
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	4b0e      	ldr	r3, [pc, #56]	@ (80016f8 <TriggerMeasurement+0x88>)
 80016be:	709a      	strb	r2, [r3, #2]

    status_t status = S2PI_TransferFrame(slave, data, data, sizeof(data),
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	9301      	str	r3, [sp, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	2303      	movs	r3, #3
 80016ca:	4a0b      	ldr	r2, [pc, #44]	@ (80016f8 <TriggerMeasurement+0x88>)
 80016cc:	490a      	ldr	r1, [pc, #40]	@ (80016f8 <TriggerMeasurement+0x88>)
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f00c f992 	bl	800d9f8 <S2PI_TransferFrame>
 80016d4:	6138      	str	r0, [r7, #16]
                                         callback, callbackData);
    if (status != STATUS_OK)
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d005      	beq.n	80016e8 <TriggerMeasurement+0x78>
    {
        error_log("SPI transfer failed to trigger measurements! "
 80016dc:	6939      	ldr	r1, [r7, #16]
 80016de:	4807      	ldr	r0, [pc, #28]	@ (80016fc <TriggerMeasurement+0x8c>)
 80016e0:	f00c fc16 	bl	800df10 <print>
                  "The call to S2PI_TransferFrame yielded error code: %d",
                  status);
        return status;
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	e000      	b.n	80016ea <TriggerMeasurement+0x7a>
    }

    return status;
 80016e8:	693b      	ldr	r3, [r7, #16]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	ffff8000 	.word	0xffff8000
 80016f8:	24000000 	.word	0x24000000
 80016fc:	08025bdc 	.word	0x08025bdc

08001700 <GPIO_Callback>:
 *
 * @param   param The abstract pointer to the boolean value that determines if
 *                the callback is invoked.
 *****************************************************************************/
static void GPIO_Callback(void * param)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
    if (param == NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d103      	bne.n	8001716 <GPIO_Callback+0x16>
    {
        error_log("GPIO interrupt test failed: callback parameter \"param\" was NULL!");
 800170e:	4806      	ldr	r0, [pc, #24]	@ (8001728 <GPIO_Callback+0x28>)
 8001710:	f00c fbfe 	bl	800df10 <print>
        return;
 8001714:	e004      	b.n	8001720 <GPIO_Callback+0x20>
    }

    gpio_data_t * data = (gpio_data_t*)param;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	60fb      	str	r3, [r7, #12]
    data->CallbackInvoked = 1;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2201      	movs	r2, #1
 800171e:	60da      	str	r2, [r3, #12]
}
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	08025c48 	.word	0x08025c48

0800172c <GPIO_SPI_Callback>:
 *            a specified time (check also timer HAL implementation).
 *          - The S2PI layer error code that may be received from the S2PI
 *            module via the \p status parameter.
 *****************************************************************************/
static status_t GPIO_SPI_Callback(status_t status, void * param)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
    IRQ_LOCK(); // prevents GPIO interrupt to preempt if set to higher priority.
 8001736:	f00b ff65 	bl	800d604 <IRQ_LOCK>

    if (param == NULL)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d107      	bne.n	8001750 <GPIO_SPI_Callback+0x24>
    {
        IRQ_UNLOCK();
 8001740:	f00b ff3e 	bl	800d5c0 <IRQ_UNLOCK>
        error_log("GPIO interrupt test failed: callback parameter \"param\" was NULL!");
 8001744:	4829      	ldr	r0, [pc, #164]	@ (80017ec <GPIO_SPI_Callback+0xc0>)
 8001746:	f00c fbe3 	bl	800df10 <print>
        return ERROR_FAIL;
 800174a:	f04f 33ff 	mov.w	r3, #4294967295
 800174e:	e049      	b.n	80017e4 <GPIO_SPI_Callback+0xb8>
    }

    gpio_data_t * data = (gpio_data_t*)param;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	617b      	str	r3, [r7, #20]

    if (status != STATUS_OK)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00a      	beq.n	8001770 <GPIO_SPI_Callback+0x44>
    {
        IRQ_UNLOCK();
 800175a:	f00b ff31 	bl	800d5c0 <IRQ_UNLOCK>
        error_log("GPIO interrupt test failed: callback parameter \"status\" was %d!",
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	4823      	ldr	r0, [pc, #140]	@ (80017f0 <GPIO_SPI_Callback+0xc4>)
 8001762:	f00c fbd5 	bl	800df10 <print>
                  status);
        data->Status = status;
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	605a      	str	r2, [r3, #4]
        return status;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	e039      	b.n	80017e4 <GPIO_SPI_Callback+0xb8>
     * #S2PI_ReadIrqPin method to obtain if the device has finished in time and
     * the interrupt is already pending. Otherwise, it would fail with an
     * timeout due to the deferred GPIO interrupt callback event. */

    ltc_t start;
    Time_GetNow(&start);
 8001770:	f107 030c 	add.w	r3, r7, #12
 8001774:	4618      	mov	r0, r3
 8001776:	f00e f90b 	bl	800f990 <Time_GetNow>
    data->ReadIrqPinValue = S2PI_ReadIrqPin(data->Slave);
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f00c fa86 	bl	800dc90 <S2PI_ReadIrqPin>
 8001784:	4602      	mov	r2, r0
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	611a      	str	r2, [r3, #16]
    while (data->ReadIrqPinValue)
 800178a:	e021      	b.n	80017d0 <GPIO_SPI_Callback+0xa4>
    {
        if (Time_CheckTimeoutMSec(&start, data->Timeout_ms))
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	f107 030c 	add.w	r3, r7, #12
 8001794:	4611      	mov	r1, r2
 8001796:	4618      	mov	r0, r3
 8001798:	f00e f9a8 	bl	800faec <Time_CheckTimeoutMSec>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00e      	beq.n	80017c0 <GPIO_SPI_Callback+0x94>
        {
            IRQ_UNLOCK();
 80017a2:	f00b ff0d 	bl	800d5c0 <IRQ_UNLOCK>
            error_log("GPIO interrupt test failed! The IRQ pin did not assert "
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	4619      	mov	r1, r3
 80017ac:	4811      	ldr	r0, [pc, #68]	@ (80017f4 <GPIO_SPI_Callback+0xc8>)
 80017ae:	f00c fbaf 	bl	800df10 <print>
                      "to low state when reading from the IRQ callback. "
                      "Elapsed %d ms.", data->Timeout_ms);
            data->Status = ERROR_TIMEOUT;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f06f 0205 	mvn.w	r2, #5
 80017b8:	605a      	str	r2, [r3, #4]
            return ERROR_TIMEOUT;
 80017ba:	f06f 0305 	mvn.w	r3, #5
 80017be:	e011      	b.n	80017e4 <GPIO_SPI_Callback+0xb8>
        }
        data->ReadIrqPinValue = S2PI_ReadIrqPin(data->Slave);
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f00c fa63 	bl	800dc90 <S2PI_ReadIrqPin>
 80017ca:	4602      	mov	r2, r0
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	611a      	str	r2, [r3, #16]
    while (data->ReadIrqPinValue)
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1d9      	bne.n	800178c <GPIO_SPI_Callback+0x60>
    }

    IRQ_UNLOCK();
 80017d8:	f00b fef2 	bl	800d5c0 <IRQ_UNLOCK>
    data->Status = STATUS_OK;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	2200      	movs	r2, #0
 80017e0:	605a      	str	r2, [r3, #4]
    return STATUS_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	08025c48 	.word	0x08025c48
 80017f0:	08025c94 	.word	0x08025c94
 80017f4:	08025cdc 	.word	0x08025cdc

080017f8 <GpioInterruptTest>:
 *            interrupt was detected.
 *          - The S2PI layer error code if #S2PI_TransferFrame, #S2PI_GetStatus
 *            or #S2PI_SetIrqCallback return any negative status.
 *****************************************************************************/
static status_t GpioInterruptTest(s2pi_slave_t slave)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08c      	sub	sp, #48	@ 0x30
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
    /* Test parameter configuration: *****************************************/
    const uint32_t timeout_ms = 300; // timeout for measurement, might be increased..
 8001800:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001804:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /*************************************************************************/

    gpio_data_t data = { .Slave = slave,
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	617b      	str	r3, [r7, #20]
 800180a:	f04f 33ff 	mov.w	r3, #4294967295
 800180e:	61bb      	str	r3, [r7, #24]
 8001810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001812:	61fb      	str	r3, [r7, #28]
 8001814:	2300      	movs	r3, #0
 8001816:	623b      	str	r3, [r7, #32]
 8001818:	f243 0339 	movw	r3, #12345	@ 0x3039
 800181c:	627b      	str	r3, [r7, #36]	@ 0x24
                         .Timeout_ms = timeout_ms,
                         .ReadIrqPinValue = 12345,
                         .CallbackInvoked = 0 };

    /* Install IRQ callback. */
    status_t status = S2PI_SetIrqCallback(slave, GPIO_Callback, &data);
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	461a      	mov	r2, r3
 8001824:	493c      	ldr	r1, [pc, #240]	@ (8001918 <GpioInterruptTest+0x120>)
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f00c fa10 	bl	800dc4c <S2PI_SetIrqCallback>
 800182c:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (status != STATUS_OK)
 800182e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001830:	2b00      	cmp	r3, #0
 8001832:	d005      	beq.n	8001840 <GpioInterruptTest+0x48>
    {
        error_log("GPIO interrupt test failed! The call to S2PI_SetIrqCallback "
 8001834:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001836:	4839      	ldr	r0, [pc, #228]	@ (800191c <GpioInterruptTest+0x124>)
 8001838:	f00c fb6a 	bl	800df10 <print>
                  "yielded error code: %d", status);
        return status;
 800183c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800183e:	e067      	b.n	8001910 <GpioInterruptTest+0x118>
    }

    /* Setup Device. */
    status = ConfigureDevice(slave, 0);
 8001840:	2100      	movs	r1, #0
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff fdea 	bl	800141c <ConfigureDevice>
 8001848:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (status != STATUS_OK)
 800184a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800184c:	2b00      	cmp	r3, #0
 800184e:	d004      	beq.n	800185a <GpioInterruptTest+0x62>
    {
        error_log("GPIO interrupt test failed!");
 8001850:	4833      	ldr	r0, [pc, #204]	@ (8001920 <GpioInterruptTest+0x128>)
 8001852:	f00c fb5d 	bl	800df10 <print>
        return status;
 8001856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001858:	e05a      	b.n	8001910 <GpioInterruptTest+0x118>
    }

    /* Check if IRQ is not yet pending. */
    if (S2PI_ReadIrqPin(slave) == 0)
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f00c fa18 	bl	800dc90 <S2PI_ReadIrqPin>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d105      	bne.n	8001872 <GpioInterruptTest+0x7a>
    {
        error_log("GPIO interrupt test failed! The S2PI_ReadIrqPin did "
 8001866:	482f      	ldr	r0, [pc, #188]	@ (8001924 <GpioInterruptTest+0x12c>)
 8001868:	f00c fb52 	bl	800df10 <print>
                  "return 0 but no interrupt is pending since no "
                  "measurements are executed yet!");
        return ERROR_FAIL;
 800186c:	f04f 33ff 	mov.w	r3, #4294967295
 8001870:	e04e      	b.n	8001910 <GpioInterruptTest+0x118>
    };

    /* Trigger Measurement. */
    status = TriggerMeasurement(slave, 0, GPIO_SPI_Callback, &data);
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	4a2c      	ldr	r2, [pc, #176]	@ (8001928 <GpioInterruptTest+0x130>)
 8001878:	2100      	movs	r1, #0
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff fef8 	bl	8001670 <TriggerMeasurement>
 8001880:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (status != STATUS_OK)
 8001882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001884:	2b00      	cmp	r3, #0
 8001886:	d004      	beq.n	8001892 <GpioInterruptTest+0x9a>
    {
        error_log("GPIO interrupt test failed!");
 8001888:	4825      	ldr	r0, [pc, #148]	@ (8001920 <GpioInterruptTest+0x128>)
 800188a:	f00c fb41 	bl	800df10 <print>
        return status;
 800188e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001890:	e03e      	b.n	8001910 <GpioInterruptTest+0x118>
    }

    /* Wait for Interrupt using the callback method. */
    ltc_t start;
    Time_GetNow(&start);
 8001892:	f107 030c 	add.w	r3, r7, #12
 8001896:	4618      	mov	r0, r3
 8001898:	f00e f87a 	bl	800f990 <Time_GetNow>
    while (!data.CallbackInvoked)
 800189c:	e00f      	b.n	80018be <GpioInterruptTest+0xc6>
    {
        if (Time_CheckTimeoutMSec(&start, timeout_ms))
 800189e:	f107 030c 	add.w	r3, r7, #12
 80018a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80018a4:	4618      	mov	r0, r3
 80018a6:	f00e f921 	bl	800faec <Time_CheckTimeoutMSec>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d006      	beq.n	80018be <GpioInterruptTest+0xc6>
        {
            error_log("GPIO interrupt test failed! The IRQ callback was not "
 80018b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80018b2:	481e      	ldr	r0, [pc, #120]	@ (800192c <GpioInterruptTest+0x134>)
 80018b4:	f00c fb2c 	bl	800df10 <print>
                      "invoked within %d ms.", timeout_ms);
            return ERROR_TIMEOUT;
 80018b8:	f06f 0305 	mvn.w	r3, #5
 80018bc:	e028      	b.n	8001910 <GpioInterruptTest+0x118>
    while (!data.CallbackInvoked)
 80018be:	6a3b      	ldr	r3, [r7, #32]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0ec      	beq.n	800189e <GpioInterruptTest+0xa6>
        }
    }

    /* Verify ... */
    if (data.Status != STATUS_OK)
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d007      	beq.n	80018da <GpioInterruptTest+0xe2>
    {
        error_log("GPIO interrupt test failed! The SPI IRQ callback yielded "
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	4619      	mov	r1, r3
 80018ce:	4818      	ldr	r0, [pc, #96]	@ (8001930 <GpioInterruptTest+0x138>)
 80018d0:	f00c fb1e 	bl	800df10 <print>
                  "an error status: %d (expected 0)", data.Status);
        return ERROR_FAIL;
 80018d4:	f04f 33ff 	mov.w	r3, #4294967295
 80018d8:	e01a      	b.n	8001910 <GpioInterruptTest+0x118>
    }

    if (data.ReadIrqPinValue != 0)
 80018da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d007      	beq.n	80018f0 <GpioInterruptTest+0xf8>
    {
        error_log("GPIO interrupt test failed! The IRQ pin returned "
 80018e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e2:	4619      	mov	r1, r3
 80018e4:	4813      	ldr	r0, [pc, #76]	@ (8001934 <GpioInterruptTest+0x13c>)
 80018e6:	f00c fb13 	bl	800df10 <print>
                  "the wrong value: %d (expected 0)", data.ReadIrqPinValue);
        return ERROR_FAIL;
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295
 80018ee:	e00f      	b.n	8001910 <GpioInterruptTest+0x118>
    }

    /* Remove callback. */
    status = S2PI_SetIrqCallback(slave, 0, 0);
 80018f0:	2200      	movs	r2, #0
 80018f2:	2100      	movs	r1, #0
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f00c f9a9 	bl	800dc4c <S2PI_SetIrqCallback>
 80018fa:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (status != STATUS_OK)
 80018fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d005      	beq.n	800190e <GpioInterruptTest+0x116>
    {
        error_log("GPIO interrupt test failed! The call to S2PI_SetIrqCallback "
 8001902:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001904:	480c      	ldr	r0, [pc, #48]	@ (8001938 <GpioInterruptTest+0x140>)
 8001906:	f00c fb03 	bl	800df10 <print>
                  "with null pointers yielded error code: %d", status);
        return status;
 800190a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800190c:	e000      	b.n	8001910 <GpioInterruptTest+0x118>
    }

    return STATUS_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3730      	adds	r7, #48	@ 0x30
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	08001701 	.word	0x08001701
 800191c:	08025d5c 	.word	0x08025d5c
 8001920:	08025db8 	.word	0x08025db8
 8001924:	08025ddc 	.word	0x08025ddc
 8001928:	0800172d 	.word	0x0800172d
 800192c:	08025e68 	.word	0x08025e68
 8001930:	08025ebc 	.word	0x08025ebc
 8001934:	08025f20 	.word	0x08025f20
 8001938:	08025f7c 	.word	0x08025f7c

0800193c <ReadEEPROM>:
 *          - The S2PI layer error code if #S2PI_CaptureGpioControl,
 *            #S2PI_ReleaseGpioControl, #S2PI_WriteGpioPin or
 *            #S2PI_ReadGpioPin return any negative status.
 *****************************************************************************/
static status_t ReadEEPROM(s2pi_slave_t slave, uint8_t * eeprom)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	@ 0x28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
    /* Enable EEPROM: */
    uint8_t d1[] = { 0x12, 0x00, 0x4B };
 8001946:	4a3f      	ldr	r2, [pc, #252]	@ (8001a44 <ReadEEPROM+0x108>)
 8001948:	f107 031c 	add.w	r3, r7, #28
 800194c:	6812      	ldr	r2, [r2, #0]
 800194e:	4611      	mov	r1, r2
 8001950:	8019      	strh	r1, [r3, #0]
 8001952:	3302      	adds	r3, #2
 8001954:	0c12      	lsrs	r2, r2, #16
 8001956:	701a      	strb	r2, [r3, #0]
    status_t status = SPITransferSync(slave, d1, sizeof(d1));
 8001958:	f107 031c 	add.w	r3, r7, #28
 800195c:	2203      	movs	r2, #3
 800195e:	4619      	mov	r1, r3
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff fad7 	bl	8000f14 <SPITransferSync>
 8001966:	6238      	str	r0, [r7, #32]
    if (status != STATUS_OK)
 8001968:	6a3b      	ldr	r3, [r7, #32]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d005      	beq.n	800197a <ReadEEPROM+0x3e>
    {
        error_log("EEPROM readout failed (enable EEPROM), "
 800196e:	6a39      	ldr	r1, [r7, #32]
 8001970:	4835      	ldr	r0, [pc, #212]	@ (8001a48 <ReadEEPROM+0x10c>)
 8001972:	f00c facd 	bl	800df10 <print>
                  "error code: %d", status);
        return status;
 8001976:	6a3b      	ldr	r3, [r7, #32]
 8001978:	e060      	b.n	8001a3c <ReadEEPROM+0x100>
    }

    uint8_t data[16] = { 0 };
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	f107 0310 	add.w	r3, r7, #16
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]

    /* Readout Data */
    for (uint8_t address = 0; address < 16; address++)
 800198a:	2300      	movs	r3, #0
 800198c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001990:	e01c      	b.n	80019cc <ReadEEPROM+0x90>
    {
        status = EEPROM_Read(slave, address, &data[address]);
 8001992:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001996:	f107 020c 	add.w	r2, r7, #12
 800199a:	441a      	add	r2, r3
 800199c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80019a0:	4619      	mov	r1, r3
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f00e fb7c 	bl	80100a0 <EEPROM_Read>
 80019a8:	6238      	str	r0, [r7, #32]
        if (status != STATUS_OK)
 80019aa:	6a3b      	ldr	r3, [r7, #32]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d008      	beq.n	80019c2 <ReadEEPROM+0x86>
        {
            error_log("EEPROM readout failed @ address 0x%02x, "
 80019b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80019b4:	6a3a      	ldr	r2, [r7, #32]
 80019b6:	4619      	mov	r1, r3
 80019b8:	4824      	ldr	r0, [pc, #144]	@ (8001a4c <ReadEEPROM+0x110>)
 80019ba:	f00c faa9 	bl	800df10 <print>
                      "error code: %d!", address, status);
            return status;
 80019be:	6a3b      	ldr	r3, [r7, #32]
 80019c0:	e03c      	b.n	8001a3c <ReadEEPROM+0x100>
    for (uint8_t address = 0; address < 16; address++)
 80019c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80019c6:	3301      	adds	r3, #1
 80019c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80019cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80019d0:	2b0f      	cmp	r3, #15
 80019d2:	d9de      	bls.n	8001992 <ReadEEPROM+0x56>
        }
    }

    /* Disable EEPROM: */
    uint8_t d2[] = { 0x12, 0x00, 0x2B };
 80019d4:	4a1e      	ldr	r2, [pc, #120]	@ (8001a50 <ReadEEPROM+0x114>)
 80019d6:	f107 0308 	add.w	r3, r7, #8
 80019da:	6812      	ldr	r2, [r2, #0]
 80019dc:	4611      	mov	r1, r2
 80019de:	8019      	strh	r1, [r3, #0]
 80019e0:	3302      	adds	r3, #2
 80019e2:	0c12      	lsrs	r2, r2, #16
 80019e4:	701a      	strb	r2, [r3, #0]
    status = SPITransferSync(slave, d2, sizeof(d2));
 80019e6:	f107 0308 	add.w	r3, r7, #8
 80019ea:	2203      	movs	r2, #3
 80019ec:	4619      	mov	r1, r3
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff fa90 	bl	8000f14 <SPITransferSync>
 80019f4:	6238      	str	r0, [r7, #32]
    if (status != STATUS_OK)
 80019f6:	6a3b      	ldr	r3, [r7, #32]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d005      	beq.n	8001a08 <ReadEEPROM+0xcc>
    {
        error_log("EEPROM readout failed (enable EEPROM), "
 80019fc:	6a39      	ldr	r1, [r7, #32]
 80019fe:	4812      	ldr	r0, [pc, #72]	@ (8001a48 <ReadEEPROM+0x10c>)
 8001a00:	f00c fa86 	bl	800df10 <print>
                  "error code: %d", status);
        return status;
 8001a04:	6a3b      	ldr	r3, [r7, #32]
 8001a06:	e019      	b.n	8001a3c <ReadEEPROM+0x100>
    }

    /* Apply Hamming Code */
    uint8_t err = hamming_decode(data, eeprom);
 8001a08:	f107 030c 	add.w	r3, r7, #12
 8001a0c:	6839      	ldr	r1, [r7, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f00d ff1c 	bl	800f84c <hamming_decode>
 8001a14:	4603      	mov	r3, r0
 8001a16:	77fb      	strb	r3, [r7, #31]
    if (err != 0)
 8001a18:	7ffb      	ldrb	r3, [r7, #31]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d006      	beq.n	8001a2c <ReadEEPROM+0xf0>
    {
        error_log("EEPROM readout failed! Failed to decoding "
 8001a1e:	7ffb      	ldrb	r3, [r7, #31]
 8001a20:	4619      	mov	r1, r3
 8001a22:	480c      	ldr	r0, [pc, #48]	@ (8001a54 <ReadEEPROM+0x118>)
 8001a24:	f00c fa74 	bl	800df10 <print>
                  "Hamming weight (Hamming parity error: %d)!", err);
        return STATUS_ARGUS_EEPROM_BIT_ERROR;
 8001a28:	236d      	movs	r3, #109	@ 0x6d
 8001a2a:	e007      	b.n	8001a3c <ReadEEPROM+0x100>
    }

    /* Add remaining bit to the end. */
    eeprom[15] = data[15] & 0x80U;
 8001a2c:	7efa      	ldrb	r2, [r7, #27]
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	330f      	adds	r3, #15
 8001a32:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	701a      	strb	r2, [r3, #0]

    return STATUS_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3728      	adds	r7, #40	@ 0x28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	080260cc 	.word	0x080260cc
 8001a48:	08025fec 	.word	0x08025fec
 8001a4c:	0802602c 	.word	0x0802602c
 8001a50:	08025bd0 	.word	0x08025bd0
 8001a54:	0802606c 	.word	0x0802606c

08001a58 <GpioModeTest>:
 *          - The S2PI layer error code if #S2PI_CaptureGpioControl,
 *            #S2PI_ReleaseGpioControl, #S2PI_WriteGpioPin or
 *            #S2PI_ReadGpioPin return any negative status.
 *****************************************************************************/
static status_t GpioModeTest(s2pi_slave_t slave)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b092      	sub	sp, #72	@ 0x48
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
    /* Read EEPROM 3 times and verify. */
    uint8_t eeprom1[16] = { 0 };
 8001a60:	2300      	movs	r3, #0
 8001a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a64:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
    uint8_t eeprom2[16] = { 0 };
 8001a70:	2300      	movs	r3, #0
 8001a72:	61fb      	str	r3, [r7, #28]
 8001a74:	f107 0320 	add.w	r3, r7, #32
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
    uint8_t eeprom3[16] = { 0 };
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	f107 0310 	add.w	r3, r7, #16
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]

    status_t status = ReadEEPROM(slave, eeprom1);
 8001a90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a94:	4619      	mov	r1, r3
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff ff50 	bl	800193c <ReadEEPROM>
 8001a9c:	6478      	str	r0, [r7, #68]	@ 0x44
    if (status != STATUS_OK)
 8001a9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d004      	beq.n	8001aae <GpioModeTest+0x56>
    {
        error_log("GPIO mode test failed (1st attempt)!");
 8001aa4:	4837      	ldr	r0, [pc, #220]	@ (8001b84 <GpioModeTest+0x12c>)
 8001aa6:	f00c fa33 	bl	800df10 <print>
        return status;
 8001aaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001aac:	e066      	b.n	8001b7c <GpioModeTest+0x124>
    }

    status = ReadEEPROM(slave, eeprom2);
 8001aae:	f107 031c 	add.w	r3, r7, #28
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ff41 	bl	800193c <ReadEEPROM>
 8001aba:	6478      	str	r0, [r7, #68]	@ 0x44
    if (status != STATUS_OK)
 8001abc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d004      	beq.n	8001acc <GpioModeTest+0x74>
    {
        error_log("GPIO mode test failed (2nd attempt)!");
 8001ac2:	4831      	ldr	r0, [pc, #196]	@ (8001b88 <GpioModeTest+0x130>)
 8001ac4:	f00c fa24 	bl	800df10 <print>
        return status;
 8001ac8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001aca:	e057      	b.n	8001b7c <GpioModeTest+0x124>
    }

    status = ReadEEPROM(slave, eeprom3);
 8001acc:	f107 030c 	add.w	r3, r7, #12
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ff32 	bl	800193c <ReadEEPROM>
 8001ad8:	6478      	str	r0, [r7, #68]	@ 0x44
    if (status != STATUS_OK)
 8001ada:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d004      	beq.n	8001aea <GpioModeTest+0x92>
    {
        error_log("GPIO mode test failed (3rd attempt)!");
 8001ae0:	482a      	ldr	r0, [pc, #168]	@ (8001b8c <GpioModeTest+0x134>)
 8001ae2:	f00c fa15 	bl	800df10 <print>
        return status;
 8001ae6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ae8:	e048      	b.n	8001b7c <GpioModeTest+0x124>
    }

    /* Verify EEPROM data. */
    if ((memcmp(eeprom1, eeprom2, 16) != 0) ||
 8001aea:	f107 011c 	add.w	r1, r7, #28
 8001aee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001af2:	2210      	movs	r2, #16
 8001af4:	4618      	mov	r0, r3
 8001af6:	f021 fe4a 	bl	802378e <memcmp>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d10a      	bne.n	8001b16 <GpioModeTest+0xbe>
        (memcmp(eeprom1, eeprom3, 16) != 0))
 8001b00:	f107 010c 	add.w	r1, r7, #12
 8001b04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b08:	2210      	movs	r2, #16
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f021 fe3f 	bl	802378e <memcmp>
 8001b10:	4603      	mov	r3, r0
    if ((memcmp(eeprom1, eeprom2, 16) != 0) ||
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d005      	beq.n	8001b22 <GpioModeTest+0xca>
    {
        error_log("GPIO Mode test failed (data comparison)!\n"
 8001b16:	481e      	ldr	r0, [pc, #120]	@ (8001b90 <GpioModeTest+0x138>)
 8001b18:	f00c f9fa 	bl	800df10 <print>
                  "The data from 3 distinct EEPROM readout does not match!");
        return ERROR_FAIL;
 8001b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b20:	e02c      	b.n	8001b7c <GpioModeTest+0x124>
    }

    /* Check EEPROM data for reasonable chip and module number (i.e. not 0) */
    uint32_t chipID = EEPROM_ReadChipId(eeprom1);
 8001b22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b26:	4618      	mov	r0, r3
 8001b28:	f00e fb6c 	bl	8010204 <EEPROM_ReadChipId>
 8001b2c:	6438      	str	r0, [r7, #64]	@ 0x40
    uint8_t module = EEPROM_ReadModule(eeprom1);
 8001b2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b32:	4618      	mov	r0, r3
 8001b34:	f00e fb74 	bl	8010220 <EEPROM_ReadModule>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    if (chipID == 0 || module == 0)
 8001b3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <GpioModeTest+0xf4>
 8001b44:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d109      	bne.n	8001b60 <GpioModeTest+0x108>
    {
        error_log("GPIO Mode test failed (data verification)!\n"
 8001b4c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001b50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001b52:	4619      	mov	r1, r3
 8001b54:	480f      	ldr	r0, [pc, #60]	@ (8001b94 <GpioModeTest+0x13c>)
 8001b56:	f00c f9db 	bl	800df10 <print>
                  "Invalid EEPROM data: Module = %d; Chip ID = %d!", module, chipID);
        return ERROR_FAIL;
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5e:	e00d      	b.n	8001b7c <GpioModeTest+0x124>
    }

    print("EEPROM Readout succeeded!\n");
 8001b60:	480d      	ldr	r0, [pc, #52]	@ (8001b98 <GpioModeTest+0x140>)
 8001b62:	f00c f9d5 	bl	800df10 <print>
    print("- Module: %d\n", module);
 8001b66:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	480b      	ldr	r0, [pc, #44]	@ (8001b9c <GpioModeTest+0x144>)
 8001b6e:	f00c f9cf 	bl	800df10 <print>
    print("- Device ID: %d\n", chipID);
 8001b72:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001b74:	480a      	ldr	r0, [pc, #40]	@ (8001ba0 <GpioModeTest+0x148>)
 8001b76:	f00c f9cb 	bl	800df10 <print>

    return STATUS_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3748      	adds	r7, #72	@ 0x48
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	080260d0 	.word	0x080260d0
 8001b88:	08026100 	.word	0x08026100
 8001b8c:	08026130 	.word	0x08026130
 8001b90:	08026160 	.word	0x08026160
 8001b94:	080261cc 	.word	0x080261cc
 8001b98:	08026230 	.word	0x08026230
 8001b9c:	0802624c 	.word	0x0802624c
 8001ba0:	0802625c 	.word	0x0802625c

08001ba4 <ReadRcoTrim>:
 *          - The S2PI layer error code if #S2PI_CaptureGpioControl,
 *            #S2PI_ReleaseGpioControl, #S2PI_WriteGpioPin or
 *            #S2PI_ReadGpioPin return any negative status.
 *****************************************************************************/
static status_t ReadRcoTrim(s2pi_slave_t slave, int8_t * rcotrim)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
    /* Read EEPROM */
    uint8_t eeprom[16] = { 0 };
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	f107 030c 	add.w	r3, r7, #12
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
    status_t status = ReadEEPROM(slave, eeprom);
 8001bbe:	f107 0308 	add.w	r3, r7, #8
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff feb9 	bl	800193c <ReadEEPROM>
 8001bca:	61f8      	str	r0, [r7, #28]
    if (status != STATUS_OK) return status;
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <ReadRcoTrim+0x32>
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	e01b      	b.n	8001c0e <ReadRcoTrim+0x6a>

    uint8_t module = EEPROM_ReadModule(eeprom);
 8001bd6:	f107 0308 	add.w	r3, r7, #8
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f00e fb20 	bl	8010220 <EEPROM_ReadModule>
 8001be0:	4603      	mov	r3, r0
 8001be2:	76fb      	strb	r3, [r7, #27]
    if (module > 0 && module < 8)
 8001be4:	7efb      	ldrb	r3, [r7, #27]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00a      	beq.n	8001c00 <ReadRcoTrim+0x5c>
 8001bea:	7efb      	ldrb	r3, [r7, #27]
 8001bec:	2b07      	cmp	r3, #7
 8001bee:	d807      	bhi.n	8001c00 <ReadRcoTrim+0x5c>
    {
            /* Read RCO Trim Value from EEPROM Map 1/2/3: */
            *rcotrim = ((int8_t) eeprom[0]) >> 3;
 8001bf0:	7a3b      	ldrb	r3, [r7, #8]
 8001bf2:	b25b      	sxtb	r3, r3
 8001bf4:	10db      	asrs	r3, r3, #3
 8001bf6:	b25a      	sxtb	r2, r3
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	701a      	strb	r2, [r3, #0]
        /* Uncalibrated module; use all 0 data. */
        error_log("EEPROM Readout failed! Unknown module number: %d", module);
        return ERROR_ARGUS_UNKNOWN_MODULE;
    }

    return status;
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	e006      	b.n	8001c0e <ReadRcoTrim+0x6a>
        error_log("EEPROM Readout failed! Unknown module number: %d", module);
 8001c00:	7efb      	ldrb	r3, [r7, #27]
 8001c02:	4619      	mov	r1, r3
 8001c04:	4804      	ldr	r0, [pc, #16]	@ (8001c18 <ReadRcoTrim+0x74>)
 8001c06:	f00c f983 	bl	800df10 <print>
        return ERROR_ARGUS_UNKNOWN_MODULE;
 8001c0a:	f06f 03c6 	mvn.w	r3, #198	@ 0xc6
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3720      	adds	r7, #32
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	08026270 	.word	0x08026270

08001c1c <MeasurementCallback>:
 *
 * @param   param The parameter passed to the #S2PI_SetIrqCallback function as
 *                an abstract pointer to an #status_t type.
 *****************************************************************************/
static void MeasurementCallback(void * param)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
    *(status_t*) param = STATUS_IDLE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <RunMeasurement>:
 *            timer HAL implementation).
 *          - The S2PI layer error code if #S2PI_TransferFrame, #S2PI_GetStatus
 *            or #S2PI_SetIrqCallback return any negative status.
 *****************************************************************************/
static status_t RunMeasurement(s2pi_slave_t slave, uint16_t samples)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b088      	sub	sp, #32
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	807b      	strh	r3, [r7, #2]
    /* Test parameter configuration: *****************************************/
    const uint32_t timeout_ms = 300;    // The transfer timeout in ms.
 8001c44:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001c48:	61fb      	str	r3, [r7, #28]
    /*************************************************************************/

    volatile status_t callbackStatus = STATUS_BUSY;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	617b      	str	r3, [r7, #20]

    status_t status = S2PI_SetIrqCallback(slave, MeasurementCallback, (void*)&callbackStatus);
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	461a      	mov	r2, r3
 8001c54:	4922      	ldr	r1, [pc, #136]	@ (8001ce0 <RunMeasurement+0xa8>)
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f00b fff8 	bl	800dc4c <S2PI_SetIrqCallback>
 8001c5c:	61b8      	str	r0, [r7, #24]
    if (status != STATUS_OK)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <RunMeasurement+0x38>
    {
        error_log("Failed to run a measurement!\n"
 8001c64:	69b9      	ldr	r1, [r7, #24]
 8001c66:	481f      	ldr	r0, [pc, #124]	@ (8001ce4 <RunMeasurement+0xac>)
 8001c68:	f00c f952 	bl	800df10 <print>
                  "Call to SetIrqCallback returned code: %d", status);
        return status;
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	e033      	b.n	8001cd8 <RunMeasurement+0xa0>
    }

    status = TriggerMeasurement(slave, samples, 0, 0);
 8001c70:	8879      	ldrh	r1, [r7, #2]
 8001c72:	2300      	movs	r3, #0
 8001c74:	2200      	movs	r2, #0
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff fcfa 	bl	8001670 <TriggerMeasurement>
 8001c7c:	61b8      	str	r0, [r7, #24]
    if (status != STATUS_OK)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d005      	beq.n	8001c90 <RunMeasurement+0x58>
    {
        error_log("Failed to run a measurement!\n"
 8001c84:	69b9      	ldr	r1, [r7, #24]
 8001c86:	4818      	ldr	r0, [pc, #96]	@ (8001ce8 <RunMeasurement+0xb0>)
 8001c88:	f00c f942 	bl	800df10 <print>
                  "Call to TransferFrame returned code: %d", status);
        return status;
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	e023      	b.n	8001cd8 <RunMeasurement+0xa0>
    }

    /* Wait until the transfer is finished using a timeout. */

    ltc_t start;
    Time_GetNow(&start);
 8001c90:	f107 030c 	add.w	r3, r7, #12
 8001c94:	4618      	mov	r0, r3
 8001c96:	f00d fe7b 	bl	800f990 <Time_GetNow>

    while (callbackStatus == STATUS_BUSY)
 8001c9a:	e00f      	b.n	8001cbc <RunMeasurement+0x84>
    {
        if (Time_CheckTimeoutMSec(&start, timeout_ms))
 8001c9c:	f107 030c 	add.w	r3, r7, #12
 8001ca0:	69f9      	ldr	r1, [r7, #28]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f00d ff22 	bl	800faec <Time_CheckTimeoutMSec>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d006      	beq.n	8001cbc <RunMeasurement+0x84>
        {
            error_log("Failed to run a measurement!\n"
 8001cae:	69f9      	ldr	r1, [r7, #28]
 8001cb0:	480e      	ldr	r0, [pc, #56]	@ (8001cec <RunMeasurement+0xb4>)
 8001cb2:	f00c f92d 	bl	800df10 <print>
                      "Timeout occurred while waiting for the SPI interrupt (%d ms).",
                      timeout_ms);
            return ERROR_TIMEOUT;
 8001cb6:	f06f 0305 	mvn.w	r3, #5
 8001cba:	e00d      	b.n	8001cd8 <RunMeasurement+0xa0>
    while (callbackStatus == STATUS_BUSY)
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d0ec      	beq.n	8001c9c <RunMeasurement+0x64>
        }
    }

    if (callbackStatus != STATUS_OK)
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d006      	beq.n	8001cd6 <RunMeasurement+0x9e>
    {
        error_log("Failed to run a measurement!\n"
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4808      	ldr	r0, [pc, #32]	@ (8001cf0 <RunMeasurement+0xb8>)
 8001cce:	f00c f91f 	bl	800df10 <print>
                  "The SPI callback yielded returned code: %d",
                  callbackStatus);
        return callbackStatus;
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	e000      	b.n	8001cd8 <RunMeasurement+0xa0>
    }

    return STATUS_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3720      	adds	r7, #32
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	08001c1d 	.word	0x08001c1d
 8001ce4:	080262ac 	.word	0x080262ac
 8001ce8:	080262fc 	.word	0x080262fc
 8001cec:	0802634c 	.word	0x0802634c
 8001cf0:	080263b0 	.word	0x080263b0

08001cf4 <TimerTest>:
 *            #S2PI_SetIrqCallback, #S2PI_CaptureGpioControl,
 *            #S2PI_ReleaseGpioControl, #S2PI_WriteGpioPin or #S2PI_ReadGpioPin
 *            return any negative status.
 *****************************************************************************/
static status_t TimerTest(s2pi_slave_t slave)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b096      	sub	sp, #88	@ 0x58
 8001cf8:	af02      	add	r7, sp, #8
 8001cfa:	6078      	str	r0, [r7, #4]
    /* Test parameter configuration: *****************************************/
    const int8_t n = 10;                // The number of measurements.
 8001cfc:	230a      	movs	r3, #10
 8001cfe:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    const uint32_t ds = 100;            // The step size in averaging samples.
 8001d02:	2364      	movs	r3, #100	@ 0x64
 8001d04:	63bb      	str	r3, [r7, #56]	@ 0x38
    const float exp_slope = 102.4f;         // Expected slope is 102.4 µs / phase / sample
 8001d06:	4bbf      	ldr	r3, [pc, #764]	@ (8002004 <TimerTest+0x310>)
 8001d08:	637b      	str	r3, [r7, #52]	@ 0x34
    const float rel_slope_error = 3e-2f; // Relative slope tolerance is 3%.
 8001d0a:	4bbf      	ldr	r3, [pc, #764]	@ (8002008 <TimerTest+0x314>)
 8001d0c:	633b      	str	r3, [r7, #48]	@ 0x30
    /*************************************************************************/

    /* Read RCOTrim value from EEPROM*/
    int8_t RcoTrim = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	74fb      	strb	r3, [r7, #19]
    status_t status = ReadRcoTrim(slave, &RcoTrim);
 8001d12:	f107 0313 	add.w	r3, r7, #19
 8001d16:	4619      	mov	r1, r3
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff ff43 	bl	8001ba4 <ReadRcoTrim>
 8001d1e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (status != STATUS_OK)
 8001d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d005      	beq.n	8001d32 <TimerTest+0x3e>
    {
        error_log("Timer test failed!\n"
 8001d26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001d28:	48b8      	ldr	r0, [pc, #736]	@ (800200c <TimerTest+0x318>)
 8001d2a:	f00c f8f1 	bl	800df10 <print>
                  "EEPROM Read test returned code: %d", status);
        return status;
 8001d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d30:	e163      	b.n	8001ffa <TimerTest+0x306>
    }
    print("RCOTrim = %d\n", RcoTrim);
 8001d32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001d36:	4619      	mov	r1, r3
 8001d38:	48b5      	ldr	r0, [pc, #724]	@ (8002010 <TimerTest+0x31c>)
 8001d3a:	f00c f8e9 	bl	800df10 <print>

    /* Configure the device with calibrated RCO to 24MHz. */
    status = ConfigureDevice(slave, RcoTrim);
 8001d3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001d42:	4619      	mov	r1, r3
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff fb69 	bl	800141c <ConfigureDevice>
 8001d4a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (status != STATUS_OK)
 8001d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d005      	beq.n	8001d5e <TimerTest+0x6a>
    {
        error_log("Timer test failed!\n"
 8001d52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001d54:	48af      	ldr	r0, [pc, #700]	@ (8002014 <TimerTest+0x320>)
 8001d56:	f00c f8db 	bl	800df10 <print>
                  "Configuration test returned code: %d", status);
        return status;
 8001d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d5c:	e14d      	b.n	8001ffa <TimerTest+0x306>
    }


    /* Run multiple measurements and calculate a linear regression.
     * Note: this uses float types for simplicity. */
    float xsum = 0;
 8001d5e:	f04f 0300 	mov.w	r3, #0
 8001d62:	64fb      	str	r3, [r7, #76]	@ 0x4c
    float ysum = 0;
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	64bb      	str	r3, [r7, #72]	@ 0x48
    float x2sum = 0;
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	647b      	str	r3, [r7, #68]	@ 0x44
    float xysum = 0;
 8001d70:	f04f 0300 	mov.w	r3, #0
 8001d74:	643b      	str	r3, [r7, #64]	@ 0x40

    print("+-------+---------+------------+\n");
 8001d76:	48a8      	ldr	r0, [pc, #672]	@ (8002018 <TimerTest+0x324>)
 8001d78:	f00c f8ca 	bl	800df10 <print>
    print("| count | samples | elapsed us |\n");
 8001d7c:	48a7      	ldr	r0, [pc, #668]	@ (800201c <TimerTest+0x328>)
 8001d7e:	f00c f8c7 	bl	800df10 <print>
    print("+-------+---------+------------+\n");
 8001d82:	48a5      	ldr	r0, [pc, #660]	@ (8002018 <TimerTest+0x324>)
 8001d84:	f00c f8c4 	bl	800df10 <print>
    for (uint8_t i = 1; i <= n; ++i)
 8001d88:	2301      	movs	r3, #1
 8001d8a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001d8e:	e072      	b.n	8001e76 <TimerTest+0x182>
    {
        ltc_t start;
        Time_GetNow(&start);
 8001d90:	f107 0308 	add.w	r3, r7, #8
 8001d94:	4618      	mov	r0, r3
 8001d96:	f00d fdfb 	bl	800f990 <Time_GetNow>

        uint32_t samples = ds * i;
 8001d9a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8001d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001da0:	fb02 f303 	mul.w	r3, r2, r3
 8001da4:	61bb      	str	r3, [r7, #24]
        assert(samples < UINT16_MAX);
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d906      	bls.n	8001dbe <TimerTest+0xca>
 8001db0:	4b9b      	ldr	r3, [pc, #620]	@ (8002020 <TimerTest+0x32c>)
 8001db2:	4a9c      	ldr	r2, [pc, #624]	@ (8002024 <TimerTest+0x330>)
 8001db4:	f44f 61b7 	mov.w	r1, #1464	@ 0x5b8
 8001db8:	489b      	ldr	r0, [pc, #620]	@ (8002028 <TimerTest+0x334>)
 8001dba:	f00c fb1b 	bl	800e3f4 <__assert_func>

        status = RunMeasurement(slave, (uint16_t)samples);
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff ff37 	bl	8001c38 <RunMeasurement>
 8001dca:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (status != STATUS_OK)
 8001dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d005      	beq.n	8001dde <TimerTest+0xea>
        {
            error_log("Timer test failed!\n"
 8001dd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001dd4:	4895      	ldr	r0, [pc, #596]	@ (800202c <TimerTest+0x338>)
 8001dd6:	f00c f89b 	bl	800df10 <print>
                      "Run measurement returned code: %d",
                      status);
            return status;
 8001dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ddc:	e10d      	b.n	8001ffa <TimerTest+0x306>
        }

        uint32_t elapsed_usec = Time_GetElapsedUSec(&start);
 8001dde:	f107 0308 	add.w	r3, r7, #8
 8001de2:	4618      	mov	r0, r3
 8001de4:	f00d fe04 	bl	800f9f0 <Time_GetElapsedUSec>
 8001de8:	6178      	str	r0, [r7, #20]

        xsum += (float) samples;
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	ee07 3a90 	vmov	s15, r3
 8001df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001df4:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001df8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dfc:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
        ysum += (float) elapsed_usec;
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	ee07 3a90 	vmov	s15, r3
 8001e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e0a:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e12:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        x2sum += (float) samples * (float) samples;
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	ee07 3a90 	vmov	s15, r3
 8001e1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	ee07 3a90 	vmov	s15, r3
 8001e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e2e:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001e32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e36:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        xysum += (float) samples * (float) elapsed_usec;
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	ee07 3a90 	vmov	s15, r3
 8001e40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	ee07 3a90 	vmov	s15, r3
 8001e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e52:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001e56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e5a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

        print("| %5d | %7d | %10d |\n", i, samples, elapsed_usec);
 8001e5e:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4872      	ldr	r0, [pc, #456]	@ (8002030 <TimerTest+0x33c>)
 8001e68:	f00c f852 	bl	800df10 <print>
    for (uint8_t i = 1; i <= n; ++i)
 8001e6c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001e70:	3301      	adds	r3, #1
 8001e72:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001e76:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8001e7a:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	dd86      	ble.n	8001d90 <TimerTest+0x9c>
    }
    print("+-------+---------+------------+\n");
 8001e82:	4865      	ldr	r0, [pc, #404]	@ (8002018 <TimerTest+0x324>)
 8001e84:	f00c f844 	bl	800df10 <print>


    const float slope = (n * xysum - xsum * ysum) / (n * x2sum - xsum * xsum);
 8001e88:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8001e8c:	ee07 3a90 	vmov	s15, r3
 8001e90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e94:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001e98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e9c:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8001ea0:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001ea4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001eac:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8001eb0:	ee07 3a90 	vmov	s15, r3
 8001eb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eb8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001ebc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ec0:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001ec4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ec8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ed0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    const float intercept = (ysum * x2sum - xsum * xysum) / (n * x2sum - xsum * xsum);
 8001ed4:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001ed8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001edc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ee0:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8001ee4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001ee8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eec:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ef0:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8001ef4:	ee07 3a90 	vmov	s15, r3
 8001ef8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001efc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001f00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f04:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001f08:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f14:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    print("Linear Regression: y(x) = %dE-7 sec * x + %dE-7 sec\n",
          (int) (10 * slope), (int) (10 * intercept));
 8001f18:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001f1c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001f20:	ee67 7a87 	vmul.f32	s15, s15, s14
    print("Linear Regression: y(x) = %dE-7 sec * x + %dE-7 sec\n",
 8001f24:	eefd 6ae7 	vcvt.s32.f32	s13, s15
          (int) (10 * slope), (int) (10 * intercept));
 8001f28:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001f2c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001f30:	ee67 7a87 	vmul.f32	s15, s15, s14
    print("Linear Regression: y(x) = %dE-7 sec * x + %dE-7 sec\n",
 8001f34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f38:	ee17 2a90 	vmov	r2, s15
 8001f3c:	ee16 1a90 	vmov	r1, s13
 8001f40:	483c      	ldr	r0, [pc, #240]	@ (8002034 <TimerTest+0x340>)
 8001f42:	f00b ffe5 	bl	800df10 <print>

    /* Check the error of the slope. */
    const float max_slope = exp_slope * (1.f + rel_slope_error);
 8001f46:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001f4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001f4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f52:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f5a:	edc7 7a08 	vstr	s15, [r7, #32]
    const float min_slope = exp_slope * (1.f - rel_slope_error);
 8001f5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001f62:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001f66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f6a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f72:	edc7 7a07 	vstr	s15, [r7, #28]
    if (slope > max_slope || slope < min_slope)
 8001f76:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001f7a:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f86:	dc08      	bgt.n	8001f9a <TimerTest+0x2a6>
 8001f88:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001f8c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f98:	d52e      	bpl.n	8001ff8 <TimerTest+0x304>
    {
        error_log("Time test failed!\n"
 8001f9a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001f9e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fa6:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001faa:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001fae:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001fb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fb6:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 8001fba:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fbe:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001fc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fc6:	eefd 5ae7 	vcvt.s32.f32	s11, s15
 8001fca:	edd7 7a08 	vldr	s15, [r7, #32]
 8001fce:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001fd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fda:	ee17 3a90 	vmov	r3, s15
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	ee15 3a90 	vmov	r3, s11
 8001fe4:	ee16 2a10 	vmov	r2, s12
 8001fe8:	ee16 1a90 	vmov	r1, s13
 8001fec:	4812      	ldr	r0, [pc, #72]	@ (8002038 <TimerTest+0x344>)
 8001fee:	f00b ff8f 	bl	800df10 <print>
                  "The measured time slope does not match the expected value! "
                  "(actual: %dE-7, expected: %dE-7, min: %dE-7, max: %dE-7)\n",
                  (int)(10 * slope), (int)(10 * exp_slope),
                  (int)(10 * min_slope), (int)(10 * max_slope));
        return ERROR_FAIL;
 8001ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff6:	e000      	b.n	8001ffa <TimerTest+0x306>
    }

    return STATUS_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3750      	adds	r7, #80	@ 0x50
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	42cccccd 	.word	0x42cccccd
 8002008:	3cf5c28f 	.word	0x3cf5c28f
 800200c:	08026400 	.word	0x08026400
 8002010:	08026440 	.word	0x08026440
 8002014:	08026450 	.word	0x08026450
 8002018:	08026490 	.word	0x08026490
 800201c:	080264b4 	.word	0x080264b4
 8002020:	080264d8 	.word	0x080264d8
 8002024:	08027b54 	.word	0x08027b54
 8002028:	08025ba8 	.word	0x08025ba8
 800202c:	080264f0 	.word	0x080264f0
 8002030:	08026530 	.word	0x08026530
 8002034:	08026548 	.word	0x08026548
 8002038:	08026580 	.word	0x08026580

0800203c <PIT_Callback>:
 *
 * @param   param An abstract parameter to be passed to the callback. This is
 *                  also the identifier of the given interval.
 *****************************************************************************/
static void PIT_Callback(void * param)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
    if (param == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d103      	bne.n	8002052 <PIT_Callback+0x16>
    {
        error_log("PIT interrupt test failed: callback parameter \"param\" was NULL!");
 800204a:	4813      	ldr	r0, [pc, #76]	@ (8002098 <PIT_Callback+0x5c>)
 800204c:	f00b ff60 	bl	800df10 <print>
            Time_GetNow(&data->t_last);
        }

        data->n++;
    }
}
 8002050:	e01d      	b.n	800208e <PIT_Callback+0x52>
        pit_data_t * data = (pit_data_t*)param;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	60fb      	str	r3, [r7, #12]
        if (data->n == 0)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10d      	bne.n	800207a <PIT_Callback+0x3e>
            Time_GetNow(&data->t_first);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	3304      	adds	r3, #4
 8002062:	4618      	mov	r0, r3
 8002064:	f00d fc94 	bl	800f990 <Time_GetNow>
            data->t_last = data->t_first;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	330c      	adds	r3, #12
 800206e:	3204      	adds	r2, #4
 8002070:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002074:	e883 0003 	stmia.w	r3, {r0, r1}
 8002078:	e004      	b.n	8002084 <PIT_Callback+0x48>
            Time_GetNow(&data->t_last);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	330c      	adds	r3, #12
 800207e:	4618      	mov	r0, r3
 8002080:	f00d fc86 	bl	800f990 <Time_GetNow>
        data->n++;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	1c5a      	adds	r2, r3, #1
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	601a      	str	r2, [r3, #0]
}
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	08026610 	.word	0x08026610

0800209c <RunPITTest>:
 *            expected time.
 *          - The PIT layer error code if #Timer_SetInterval return any
 *            negative status.
 *****************************************************************************/
static status_t RunPITTest(uint32_t exp_dt_us, uint32_t n)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b0a0      	sub	sp, #128	@ 0x80
 80020a0:	af06      	add	r7, sp, #24
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
    /* Test parameter configuration: *****************************************/
    const float rel_dt_error = 5e-3f; // Relative timer interval tolerance: 0.5 %.
 80020a6:	4b70      	ldr	r3, [pc, #448]	@ (8002268 <RunPITTest+0x1cc>)
 80020a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    const float abs_dt_error = 5.0f;  // Absolute timer interval tolerance: 5.0 us.
 80020aa:	4b70      	ldr	r3, [pc, #448]	@ (800226c <RunPITTest+0x1d0>)
 80020ac:	65bb      	str	r3, [r7, #88]	@ 0x58
    /*************************************************************************/
    float dt = (float) exp_dt_us * rel_dt_error;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	ee07 3a90 	vmov	s15, r3
 80020b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020b8:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80020bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c0:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    if (dt < abs_dt_error) dt = abs_dt_error;
 80020c4:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 80020c8:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80020cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d4:	d501      	bpl.n	80020da <RunPITTest+0x3e>
 80020d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80020d8:	667b      	str	r3, [r7, #100]	@ 0x64
    const float max_dt = (float) exp_dt_us + dt;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	ee07 3a90 	vmov	s15, r3
 80020e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020e4:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 80020e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ec:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    const float min_dt = (float) exp_dt_us - dt;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	ee07 3a90 	vmov	s15, r3
 80020f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020fa:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80020fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002102:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    if (dt < abs_dt_error * 3) dt = abs_dt_error * 3;
 8002106:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800210a:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800210e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002112:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8002116:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800211a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800211e:	d507      	bpl.n	8002130 <RunPITTest+0x94>
 8002120:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002124:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8002128:	ee67 7a87 	vmul.f32	s15, s15, s14
 800212c:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    const float t_first_max = (float) exp_dt_us + dt * 5; // use 5x tolerance for
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	ee07 3a90 	vmov	s15, r3
 8002136:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800213a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800213e:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8002142:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002146:	ee77 7a27 	vadd.f32	s15, s14, s15
 800214a:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    const float t_first_min = (float) exp_dt_us - dt * 5; // the first interval
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	ee07 3a90 	vmov	s15, r3
 8002154:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002158:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800215c:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8002160:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002164:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002168:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    /*************************************************************************/

    print("Run PIT Test (w/ %d us interval):\n"
 800216c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002170:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002174:	ee17 2a90 	vmov	r2, s15
 8002178:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800217c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002180:	ee17 1a90 	vmov	r1, s15
 8002184:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002188:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800218c:	ee17 3a90 	vmov	r3, s15
 8002190:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002194:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002198:	ee17 0a90 	vmov	r0, s15
 800219c:	9004      	str	r0, [sp, #16]
 800219e:	9303      	str	r3, [sp, #12]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	9302      	str	r3, [sp, #8]
 80021a4:	9101      	str	r1, [sp, #4]
 80021a6:	9200      	str	r2, [sp, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	4830      	ldr	r0, [pc, #192]	@ (8002270 <RunPITTest+0x1d4>)
 80021b0:	f00b feae 	bl	800df10 <print>
          " - expected first event: %d us, min: %d us, max: %d us\n",
          exp_dt_us, n, exp_dt_us, (int)min_dt, (int)max_dt,
          exp_dt_us, (int)t_first_min, (int)t_first_max);

    /* Setup the PIT callback with specified interval. */
    pit_data_t data = { 0 };
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	611a      	str	r2, [r3, #16]
    status_t status = Timer_SetInterval(exp_dt_us, &data);
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	4619      	mov	r1, r3
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f00b fdf0 	bl	800ddb0 <Timer_SetInterval>
 80021d0:	6638      	str	r0, [r7, #96]	@ 0x60
    if (status != STATUS_OK)
 80021d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d005      	beq.n	80021e4 <RunPITTest+0x148>
    {
        error_log("PIT test failed!\n"
 80021d8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80021da:	4826      	ldr	r0, [pc, #152]	@ (8002274 <RunPITTest+0x1d8>)
 80021dc:	f00b fe98 	bl	800df10 <print>
                  "Timer_SetInterval returned status code: %d", status);
        return status;
 80021e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021e2:	e0f9      	b.n	80023d8 <RunPITTest+0x33c>
    }

    /* Wait until n PIT callback have been happened. */
    const uint32_t timeout_us = (n + 1) * exp_dt_us;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	1c5a      	adds	r2, r3, #1
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	fb02 f303 	mul.w	r3, r2, r3
 80021ee:	647b      	str	r3, [r7, #68]	@ 0x44

    ltc_t start;
    Time_GetNow(&start);
 80021f0:	f107 030c 	add.w	r3, r7, #12
 80021f4:	4618      	mov	r0, r3
 80021f6:	f00d fbcb 	bl	800f990 <Time_GetNow>
    while (data.n < n)
 80021fa:	e03f      	b.n	800227c <RunPITTest+0x1e0>
    {
        if (Time_CheckTimeoutUSec(&start, timeout_us))
 80021fc:	f107 030c 	add.w	r3, r7, #12
 8002200:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002202:	4618      	mov	r0, r3
 8002204:	f00d fc24 	bl	800fa50 <Time_CheckTimeoutUSec>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d036      	beq.n	800227c <RunPITTest+0x1e0>
        {
            const uint32_t elapsed_us = Time_GetElapsedUSec(&start);
 800220e:	f107 030c 	add.w	r3, r7, #12
 8002212:	4618      	mov	r0, r3
 8002214:	f00d fbec 	bl	800f9f0 <Time_GetElapsedUSec>
 8002218:	6438      	str	r0, [r7, #64]	@ 0x40
            const uint32_t t_first_us = Time_DiffUSec(&start, &data.t_first);
 800221a:	f107 0314 	add.w	r3, r7, #20
 800221e:	1d1a      	adds	r2, r3, #4
 8002220:	f107 030c 	add.w	r3, r7, #12
 8002224:	4611      	mov	r1, r2
 8002226:	4618      	mov	r0, r3
 8002228:	f00d fbb6 	bl	800f998 <Time_DiffUSec>
 800222c:	63f8      	str	r0, [r7, #60]	@ 0x3c
            const uint32_t t_last_us = Time_DiffUSec(&start, &data.t_last);
 800222e:	f107 0314 	add.w	r3, r7, #20
 8002232:	f103 020c 	add.w	r2, r3, #12
 8002236:	f107 030c 	add.w	r3, r7, #12
 800223a:	4611      	mov	r1, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f00d fbab 	bl	800f998 <Time_DiffUSec>
 8002242:	63b8      	str	r0, [r7, #56]	@ 0x38
            error_log("PIT test failed!\n"
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002248:	9302      	str	r3, [sp, #8]
 800224a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800224c:	9301      	str	r3, [sp, #4]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	4613      	mov	r3, r2
 8002254:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002256:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002258:	4807      	ldr	r0, [pc, #28]	@ (8002278 <RunPITTest+0x1dc>)
 800225a:	f00b fe59 	bl	800df10 <print>
                      "Waiting for the PIT interrupt events yielded a timeout.\n"
                      "Timeout: %d us; Elapsed: %d us (%d of %d events).\n"
                      "First event @ %d us, last event @ %d us",
                      timeout_us, elapsed_us, data.n, n, t_first_us, t_last_us);
            status = ERROR_TIMEOUT;
 800225e:	f06f 0305 	mvn.w	r3, #5
 8002262:	663b      	str	r3, [r7, #96]	@ 0x60
            break;
 8002264:	e00e      	b.n	8002284 <RunPITTest+0x1e8>
 8002266:	bf00      	nop
 8002268:	3ba3d70a 	.word	0x3ba3d70a
 800226c:	40a00000 	.word	0x40a00000
 8002270:	08026658 	.word	0x08026658
 8002274:	08026704 	.word	0x08026704
 8002278:	08026748 	.word	0x08026748
    while (data.n < n)
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	429a      	cmp	r2, r3
 8002282:	d8bb      	bhi.n	80021fc <RunPITTest+0x160>
        }
    }

    if (status == STATUS_OK)
 8002284:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10d      	bne.n	80022a6 <RunPITTest+0x20a>
    {
        /* Disable the PIT timer callback. */
        status = Timer_SetInterval(0, &data);
 800228a:	f107 0314 	add.w	r3, r7, #20
 800228e:	4619      	mov	r1, r3
 8002290:	2000      	movs	r0, #0
 8002292:	f00b fd8d 	bl	800ddb0 <Timer_SetInterval>
 8002296:	6638      	str	r0, [r7, #96]	@ 0x60
        if (status != STATUS_OK)
 8002298:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <RunPITTest+0x20a>
        {
            error_log("PIT test failed!\n"
 800229e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80022a0:	484f      	ldr	r0, [pc, #316]	@ (80023e0 <RunPITTest+0x344>)
 80022a2:	f00b fe35 	bl	800df10 <print>
                      "Timer_SetInterval returned status code: %d", status);
        }
    }

    if (status == STATUS_OK)
 80022a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d119      	bne.n	80022e0 <RunPITTest+0x244>
    {
        /* Check if PIT callback is not invoked any more. */
        Time_DelayUSec(3 * exp_dt_us);
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	4413      	add	r3, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f00d fc69 	bl	800fb8c <Time_DelayUSec>
        if (data.n > n)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d20e      	bcs.n	80022e0 <RunPITTest+0x244>
        {
            const uint32_t elapsed_us = Time_GetElapsedUSec(&start);
 80022c2:	f107 030c 	add.w	r3, r7, #12
 80022c6:	4618      	mov	r0, r3
 80022c8:	f00d fb92 	bl	800f9f0 <Time_GetElapsedUSec>
 80022cc:	6378      	str	r0, [r7, #52]	@ 0x34
            error_log("PIT test failed!\n"
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80022d4:	4843      	ldr	r0, [pc, #268]	@ (80023e4 <RunPITTest+0x348>)
 80022d6:	f00b fe1b 	bl	800df10 <print>
                      "Timer_SetInterval has been called again after it was disabled\n"
                      "(within %d us; %d of %d events in total).",
                      elapsed_us, data.n, n);
            status = ERROR_FAIL;
 80022da:	f04f 33ff 	mov.w	r3, #4294967295
 80022de:	663b      	str	r3, [r7, #96]	@ 0x60
        }
    }

    /* Verify the measured average timer interval. */
    const float act_dt_us = (float) Time_DiffUSec(&data.t_first, &data.t_last) / (float) (n - 1);
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	f103 020c 	add.w	r2, r3, #12
 80022e8:	f107 0314 	add.w	r3, r7, #20
 80022ec:	3304      	adds	r3, #4
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f00d fb51 	bl	800f998 <Time_DiffUSec>
 80022f6:	ee07 0a90 	vmov	s15, r0
 80022fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	3b01      	subs	r3, #1
 8002302:	ee07 3a90 	vmov	s15, r3
 8002306:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800230a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800230e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    const uint32_t t_first_us = Time_DiffUSec(&start, &data.t_first);
 8002312:	f107 0314 	add.w	r3, r7, #20
 8002316:	1d1a      	adds	r2, r3, #4
 8002318:	f107 030c 	add.w	r3, r7, #12
 800231c:	4611      	mov	r1, r2
 800231e:	4618      	mov	r0, r3
 8002320:	f00d fb3a 	bl	800f998 <Time_DiffUSec>
 8002324:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t t_last_us = Time_DiffUSec(&start, &data.t_last);
 8002326:	f107 0314 	add.w	r3, r7, #20
 800232a:	f103 020c 	add.w	r2, r3, #12
 800232e:	f107 030c 	add.w	r3, r7, #12
 8002332:	4611      	mov	r1, r2
 8002334:	4618      	mov	r0, r3
 8002336:	f00d fb2f 	bl	800f998 <Time_DiffUSec>
 800233a:	62b8      	str	r0, [r7, #40]	@ 0x28

    print(" - actual event count: %d\n"
          " - actual interval: %d us\n"
          " - actual first event: %d us\n"
          " - actual last event: %d us\n\n",
          data.n, (int)act_dt_us, t_first_us, t_last_us);
 800233c:	6979      	ldr	r1, [r7, #20]
    print(" - actual event count: %d\n"
 800233e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002342:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800234c:	ee17 2a90 	vmov	r2, s15
 8002350:	4825      	ldr	r0, [pc, #148]	@ (80023e8 <RunPITTest+0x34c>)
 8002352:	f00b fddd 	bl	800df10 <print>

    if (status == STATUS_OK && (t_first_us > t_first_max || t_first_us < t_first_min))
 8002356:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002358:	2b00      	cmp	r3, #0
 800235a:	d11d      	bne.n	8002398 <RunPITTest+0x2fc>
 800235c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800235e:	ee07 3a90 	vmov	s15, r3
 8002362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002366:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800236a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800236e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002372:	d40b      	bmi.n	800238c <RunPITTest+0x2f0>
 8002374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002376:	ee07 3a90 	vmov	s15, r3
 800237a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800237e:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002382:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238a:	dd05      	ble.n	8002398 <RunPITTest+0x2fc>
    {
        error_log("PIT test failed!\n"
 800238c:	4817      	ldr	r0, [pc, #92]	@ (80023ec <RunPITTest+0x350>)
 800238e:	f00b fdbf 	bl	800df10 <print>
                  "The first timer event did not occur after the expected interval!");
        status = ERROR_FAIL;
 8002392:	f04f 33ff 	mov.w	r3, #4294967295
 8002396:	663b      	str	r3, [r7, #96]	@ 0x60
    }

    if (status == STATUS_OK && (act_dt_us > max_dt || act_dt_us < min_dt))
 8002398:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800239a:	2b00      	cmp	r3, #0
 800239c:	d117      	bne.n	80023ce <RunPITTest+0x332>
 800239e:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80023a2:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80023a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ae:	dc08      	bgt.n	80023c2 <RunPITTest+0x326>
 80023b0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80023b4:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80023b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c0:	d505      	bpl.n	80023ce <RunPITTest+0x332>
    {
        error_log("PIT test failed!\n"
 80023c2:	480b      	ldr	r0, [pc, #44]	@ (80023f0 <RunPITTest+0x354>)
 80023c4:	f00b fda4 	bl	800df10 <print>
                  "The measured timer interval does not match the expected value!");
        status = ERROR_FAIL;
 80023c8:	f04f 33ff 	mov.w	r3, #4294967295
 80023cc:	663b      	str	r3, [r7, #96]	@ 0x60
    }

    print(" - test status: %d\n\n", status);
 80023ce:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80023d0:	4808      	ldr	r0, [pc, #32]	@ (80023f4 <RunPITTest+0x358>)
 80023d2:	f00b fd9d 	bl	800df10 <print>

    return status;
 80023d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3768      	adds	r7, #104	@ 0x68
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	08026704 	.word	0x08026704
 80023e4:	080267f4 	.word	0x080267f4
 80023e8:	08026878 	.word	0x08026878
 80023ec:	080268e8 	.word	0x080268e8
 80023f0:	08026944 	.word	0x08026944
 80023f4:	0802699c 	.word	0x0802699c

080023f8 <PITTest>:
 *            expected time.
 *          - The PIT layer error code if #Timer_SetInterval or
 *            #Timer_SetCallback return any negative status.
 *****************************************************************************/
static status_t PITTest(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
    status_t status = Timer_SetCallback(PIT_Callback);
 80023fe:	482d      	ldr	r0, [pc, #180]	@ (80024b4 <PITTest+0xbc>)
 8002400:	f00b fd4a 	bl	800de98 <Timer_SetCallback>
 8002404:	6078      	str	r0, [r7, #4]
    if (status == ERROR_NOT_IMPLEMENTED) return status;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f113 0f09 	cmn.w	r3, #9
 800240c:	d101      	bne.n	8002412 <PITTest+0x1a>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	e04c      	b.n	80024ac <PITTest+0xb4>
    if  (status != STATUS_OK)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <PITTest+0x2c>
    {
        error_log("PIT test failed!\n"
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	4827      	ldr	r0, [pc, #156]	@ (80024b8 <PITTest+0xc0>)
 800241c:	f00b fd78 	bl	800df10 <print>
                  "Timer_SetCallback returned status code: %d", status);
        return status;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	e043      	b.n	80024ac <PITTest+0xb4>
    }

    status = RunPITTest(200000, 5);
 8002424:	2105      	movs	r1, #5
 8002426:	4825      	ldr	r0, [pc, #148]	@ (80024bc <PITTest+0xc4>)
 8002428:	f7ff fe38 	bl	800209c <RunPITTest>
 800242c:	6078      	str	r0, [r7, #4]
    if (status != STATUS_OK) return status;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <PITTest+0x40>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	e039      	b.n	80024ac <PITTest+0xb4>

    status = RunPITTest(10000, 10);
 8002438:	210a      	movs	r1, #10
 800243a:	f242 7010 	movw	r0, #10000	@ 0x2710
 800243e:	f7ff fe2d 	bl	800209c <RunPITTest>
 8002442:	6078      	str	r0, [r7, #4]
    if (status != STATUS_OK) return status;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <PITTest+0x56>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	e02e      	b.n	80024ac <PITTest+0xb4>

    /* High Speed Test down to 1000 microseconds. If this fails, just print
     * a message that very high frame rates might have issues. */
    status = RunPITTest(1000, 500);
 800244e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002452:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002456:	f7ff fe21 	bl	800209c <RunPITTest>
 800245a:	6078      	str	r0, [r7, #4]
    if (status != STATUS_OK)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d004      	beq.n	800246c <PITTest+0x74>
    {
        print("WARNING: PIT test failed for 1000 us interval!\n"
 8002462:	4817      	ldr	r0, [pc, #92]	@ (80024c0 <PITTest+0xc8>)
 8002464:	f00b fd54 	bl	800df10 <print>
              "         This is only critical if high frame rates (up to 1000 fps)\n"
              "         need to be achieved. Otherwise, the error can be safely ignored.\n");
        status = STATUS_IGNORE; // ignore
 8002468:	2301      	movs	r3, #1
 800246a:	607b      	str	r3, [r7, #4]
    }

    if (status == STATUS_OK) // only run if previous test succeeded!
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10e      	bne.n	8002490 <PITTest+0x98>
    {
        /* High Speed Test down to 333 microseconds. If this fails, just print
         * a message that very high frame rates might have issues. */
        status = RunPITTest(333, 500);
 8002472:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002476:	f240 104d 	movw	r0, #333	@ 0x14d
 800247a:	f7ff fe0f 	bl	800209c <RunPITTest>
 800247e:	6078      	str	r0, [r7, #4]
        if (status != STATUS_OK)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d004      	beq.n	8002490 <PITTest+0x98>
        {
            print("WARNING: PIT test failed for 333 us interval!\n"
 8002486:	480f      	ldr	r0, [pc, #60]	@ (80024c4 <PITTest+0xcc>)
 8002488:	f00b fd42 	bl	800df10 <print>
                  "         This is only critical if very high frame rates (up to 3000 fps)\n"
                  "         need to be achieved. Otherwise, the error can be safely ignored.\n");
            status = STATUS_IGNORE; // ignore
 800248c:	2301      	movs	r3, #1
 800248e:	607b      	str	r3, [r7, #4]
        }
    }

    status = Timer_SetCallback(0);
 8002490:	2000      	movs	r0, #0
 8002492:	f00b fd01 	bl	800de98 <Timer_SetCallback>
 8002496:	6078      	str	r0, [r7, #4]
    if (status != STATUS_OK)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d005      	beq.n	80024aa <PITTest+0xb2>
    {
        error_log("PIT test failed!\n"
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4809      	ldr	r0, [pc, #36]	@ (80024c8 <PITTest+0xd0>)
 80024a2:	f00b fd35 	bl	800df10 <print>
                  "Timer_SetCallback to 0 returned status code: %d", status);
        return status;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	e000      	b.n	80024ac <PITTest+0xb4>
    }

    return STATUS_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	0800203d 	.word	0x0800203d
 80024b8:	080269b4 	.word	0x080269b4
 80024bc:	00030d40 	.word	0x00030d40
 80024c0:	080269f8 	.word	0x080269f8
 80024c4:	08026ab8 	.word	0x08026ab8
 80024c8:	08026b7c 	.word	0x08026b7c

080024cc <SpiTransferFromSpiInterruptCallback>:
 *          - #ERROR_INVALID_ARGUMENT if the \p param is NULL.
 *          - The S2PI layer error code if any is passed to the callback function.
 *          - The S2PI layer error code if #S2PI_TransferFrame return any.
 *****************************************************************************/
static status_t SpiTransferFromSpiInterruptCallback(status_t status, void * param)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af02      	add	r7, sp, #8
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
    if (param == NULL)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d105      	bne.n	80024e8 <SpiTransferFromSpiInterruptCallback+0x1c>
    {
        error_log("SPI transfer from SPI interrupt test failed\n"
 80024dc:	482b      	ldr	r0, [pc, #172]	@ (800258c <SpiTransferFromSpiInterruptCallback+0xc0>)
 80024de:	f00b fd17 	bl	800df10 <print>
                  "callback parameter \"param\" was NULL!");
        return ERROR_INVALID_ARGUMENT;
 80024e2:	f06f 0304 	mvn.w	r3, #4
 80024e6:	e04d      	b.n	8002584 <SpiTransferFromSpiInterruptCallback+0xb8>
    }

    spi_irq_data_t * data = (spi_irq_data_t *) param;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	60bb      	str	r3, [r7, #8]

    if (status != STATUS_OK)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d008      	beq.n	8002504 <SpiTransferFromSpiInterruptCallback+0x38>
    {
        error_log("SPI transfer from SPI interrupt test failed:\n"
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	4826      	ldr	r0, [pc, #152]	@ (8002590 <SpiTransferFromSpiInterruptCallback+0xc4>)
 80024f6:	f00b fd0b 	bl	800df10 <print>
                  "callback received error! Error code: %d", status);
        data->Status = status;
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	601a      	str	r2, [r3, #0]
        return status;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	e03f      	b.n	8002584 <SpiTransferFromSpiInterruptCallback+0xb8>
    }

    if (!data->ReadBack)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	7e9b      	ldrb	r3, [r3, #26]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	f083 0301 	eor.w	r3, r3, #1
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d033      	beq.n	800257c <SpiTransferFromSpiInterruptCallback+0xb0>
    {
        print("Invoking SPI transfer from SPI interrupt callback...\n");
 8002514:	481f      	ldr	r0, [pc, #124]	@ (8002594 <SpiTransferFromSpiInterruptCallback+0xc8>)
 8002516:	f00b fcfb 	bl	800df10 <print>

        /* Clear the laser pattern and read back previous values. */
        data->Data[0] = 0x04; // Laser Pattern Register Address
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	2204      	movs	r2, #4
 800251e:	721a      	strb	r2, [r3, #8]
        for (uint8_t i = 1; i < 17U; ++i) data->Data[i] = 0;
 8002520:	2301      	movs	r3, #1
 8002522:	73fb      	strb	r3, [r7, #15]
 8002524:	e007      	b.n	8002536 <SpiTransferFromSpiInterruptCallback+0x6a>
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	4413      	add	r3, r2
 800252c:	2200      	movs	r2, #0
 800252e:	721a      	strb	r2, [r3, #8]
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	3301      	adds	r3, #1
 8002534:	73fb      	strb	r3, [r7, #15]
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	2b10      	cmp	r3, #16
 800253a:	d9f4      	bls.n	8002526 <SpiTransferFromSpiInterruptCallback+0x5a>
        status = S2PI_TransferFrame(data->Slave, data->Data, data->Data, 17U,
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	6858      	ldr	r0, [r3, #4]
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	f103 0108 	add.w	r1, r3, #8
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	f103 0208 	add.w	r2, r3, #8
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	9301      	str	r3, [sp, #4]
 8002550:	4b11      	ldr	r3, [pc, #68]	@ (8002598 <SpiTransferFromSpiInterruptCallback+0xcc>)
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	2311      	movs	r3, #17
 8002556:	f00b fa4f 	bl	800d9f8 <S2PI_TransferFrame>
 800255a:	6078      	str	r0, [r7, #4]
                                    SpiTransferFromSpiInterruptCallback, param);
        if (status != STATUS_OK)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d008      	beq.n	8002574 <SpiTransferFromSpiInterruptCallback+0xa8>
        {
            error_log("SPI transfer from SPI interrupt test failed:\n"
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	480d      	ldr	r0, [pc, #52]	@ (800259c <SpiTransferFromSpiInterruptCallback+0xd0>)
 8002566:	f00b fcd3 	bl	800df10 <print>
                      "Calling S2PI_TransferFrame from SPI interrupt "
                      "returned error code: %d", status);
            data->Status = status;
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	601a      	str	r2, [r3, #0]
            return status;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	e007      	b.n	8002584 <SpiTransferFromSpiInterruptCallback+0xb8>
        }
        data->ReadBack = true;
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2201      	movs	r2, #1
 8002578:	769a      	strb	r2, [r3, #26]
 800257a:	e002      	b.n	8002582 <SpiTransferFromSpiInterruptCallback+0xb6>
    }
    else
    {
        data->Finished = true;
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2201      	movs	r2, #1
 8002580:	765a      	strb	r2, [r3, #25]
    }

    return STATUS_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	08026bc8 	.word	0x08026bc8
 8002590:	08026c24 	.word	0x08026c24
 8002594:	08026c84 	.word	0x08026c84
 8002598:	080024cd 	.word	0x080024cd
 800259c:	08026cbc 	.word	0x08026cbc

080025a0 <SpiTransferFromSpiInterrupt>:
 *            match the expected values.
 *          - The S2PI layer error code if #S2PI_TransferFrame or the SPI
 *            callback yield in any non-OK status.
 *****************************************************************************/
static status_t SpiTransferFromSpiInterrupt(s2pi_slave_t slave)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b092      	sub	sp, #72	@ 0x48
 80025a4:	af02      	add	r7, sp, #8
 80025a6:	6078      	str	r0, [r7, #4]
    /* Test parameter configuration: *****************************************/
    const uint32_t timeout_us = 100000; // timeout for SPI transfers to finish
 80025a8:	4b53      	ldr	r3, [pc, #332]	@ (80026f8 <SpiTransferFromSpiInterrupt+0x158>)
 80025aa:	63bb      	str	r3, [r7, #56]	@ 0x38
    /*************************************************************************/

    status_t status = STATUS_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	637b      	str	r3, [r7, #52]	@ 0x34
    spi_irq_data_t data = { .Slave = slave };
 80025b0:	f107 0314 	add.w	r3, r7, #20
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	60da      	str	r2, [r3, #12]
 80025be:	611a      	str	r2, [r3, #16]
 80025c0:	615a      	str	r2, [r3, #20]
 80025c2:	619a      	str	r2, [r3, #24]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	61bb      	str	r3, [r7, #24]

    print("Invoking SPI transfer from task level...\n");
 80025c8:	484c      	ldr	r0, [pc, #304]	@ (80026fc <SpiTransferFromSpiInterrupt+0x15c>)
 80025ca:	f00b fca1 	bl	800df10 <print>

    /* Transfer a pattern to the register */
    data.Data[0] = 0x04; // Laser Pattern Register Address
 80025ce:	2304      	movs	r3, #4
 80025d0:	773b      	strb	r3, [r7, #28]
    for (uint8_t i = 1; i < 17U; ++i) data.Data[i] = i;
 80025d2:	2301      	movs	r3, #1
 80025d4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80025d8:	e00c      	b.n	80025f4 <SpiTransferFromSpiInterrupt+0x54>
 80025da:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80025de:	3340      	adds	r3, #64	@ 0x40
 80025e0:	443b      	add	r3, r7
 80025e2:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80025e6:	f803 2c24 	strb.w	r2, [r3, #-36]
 80025ea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80025ee:	3301      	adds	r3, #1
 80025f0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80025f4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80025f8:	2b10      	cmp	r3, #16
 80025fa:	d9ee      	bls.n	80025da <SpiTransferFromSpiInterrupt+0x3a>
    status = S2PI_TransferFrame(slave, data.Data, data.Data, 17U,
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	f103 0208 	add.w	r2, r3, #8
 8002604:	f107 0314 	add.w	r3, r7, #20
 8002608:	f103 0108 	add.w	r1, r3, #8
 800260c:	f107 0314 	add.w	r3, r7, #20
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	4b3b      	ldr	r3, [pc, #236]	@ (8002700 <SpiTransferFromSpiInterrupt+0x160>)
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	2311      	movs	r3, #17
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f00b f9ed 	bl	800d9f8 <S2PI_TransferFrame>
 800261e:	6378      	str	r0, [r7, #52]	@ 0x34
                                SpiTransferFromSpiInterruptCallback, &data);
    if (status != STATUS_OK)
 8002620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002622:	2b00      	cmp	r3, #0
 8002624:	d005      	beq.n	8002632 <SpiTransferFromSpiInterrupt+0x92>
    {
        error_log("SPI transfer from SPI interrupt test failed:\n"
 8002626:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002628:	4836      	ldr	r0, [pc, #216]	@ (8002704 <SpiTransferFromSpiInterrupt+0x164>)
 800262a:	f00b fc71 	bl	800df10 <print>
                  "Failed to transfer a data frame! Error code: %d", status);
        return status;
 800262e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002630:	e05e      	b.n	80026f0 <SpiTransferFromSpiInterrupt+0x150>
    }

    /* Wait until transfers has finished. */
    ltc_t start;
    Time_GetNow(&start);
 8002632:	f107 030c 	add.w	r3, r7, #12
 8002636:	4618      	mov	r0, r3
 8002638:	f00d f9aa 	bl	800f990 <Time_GetNow>
    while (!data.Finished && (data.Status == STATUS_OK))
 800263c:	e017      	b.n	800266e <SpiTransferFromSpiInterrupt+0xce>
    {
        if (Time_CheckTimeoutUSec(&start, timeout_us))
 800263e:	f107 030c 	add.w	r3, r7, #12
 8002642:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002644:	4618      	mov	r0, r3
 8002646:	f00d fa03 	bl	800fa50 <Time_CheckTimeoutUSec>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00e      	beq.n	800266e <SpiTransferFromSpiInterrupt+0xce>
        {
            const uint32_t elapsed_us = Time_GetElapsedUSec(&start);
 8002650:	f107 030c 	add.w	r3, r7, #12
 8002654:	4618      	mov	r0, r3
 8002656:	f00d f9cb 	bl	800f9f0 <Time_GetElapsedUSec>
 800265a:	6338      	str	r0, [r7, #48]	@ 0x30
            error_log("SPI transfer from SPI interrupt test failed:\n"
 800265c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800265e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002660:	4829      	ldr	r0, [pc, #164]	@ (8002708 <SpiTransferFromSpiInterrupt+0x168>)
 8002662:	f00b fc55 	bl	800df10 <print>
                      "Waiting for the transfers to be finished yielded a timeout.\n"
                      "Timeout: %d us; Elapsed: %d us (%d of %d events).",
                      timeout_us, elapsed_us);
            status = ERROR_TIMEOUT;
 8002666:	f06f 0305 	mvn.w	r3, #5
 800266a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800266c:	e00a      	b.n	8002684 <SpiTransferFromSpiInterrupt+0xe4>
    while (!data.Finished && (data.Status == STATUS_OK))
 800266e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002672:	b2db      	uxtb	r3, r3
 8002674:	f083 0301 	eor.w	r3, r3, #1
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d002      	beq.n	8002684 <SpiTransferFromSpiInterrupt+0xe4>
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0dc      	beq.n	800263e <SpiTransferFromSpiInterrupt+0x9e>
        }
    }

    if (data.Status != STATUS_OK)
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d006      	beq.n	8002698 <SpiTransferFromSpiInterrupt+0xf8>
    {
        error_log("SPI transfer from SPI interrupt test failed:\n"
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	4619      	mov	r1, r3
 800268e:	481f      	ldr	r0, [pc, #124]	@ (800270c <SpiTransferFromSpiInterrupt+0x16c>)
 8002690:	f00b fc3e 	bl	800df10 <print>
                  "Waiting for the transfers to be finished yielded a error code: %d",
                  data.Status);
        return data.Status;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	e02b      	b.n	80026f0 <SpiTransferFromSpiInterrupt+0x150>
    }

    print("Verify read data...\n");
 8002698:	481d      	ldr	r0, [pc, #116]	@ (8002710 <SpiTransferFromSpiInterrupt+0x170>)
 800269a:	f00b fc39 	bl	800df10 <print>
    /* Verify the read pattern. */
    for (uint8_t i = 1; i < 17U; ++i)
 800269e:	2301      	movs	r3, #1
 80026a0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80026a4:	e01f      	b.n	80026e6 <SpiTransferFromSpiInterrupt+0x146>
    {
        if (data.Data[i] != i)
 80026a6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80026aa:	3340      	adds	r3, #64	@ 0x40
 80026ac:	443b      	add	r3, r7
 80026ae:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026b2:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d010      	beq.n	80026dc <SpiTransferFromSpiInterrupt+0x13c>
        {
            error_log("SPI transfer from SPI interrupt test failed:\n"
 80026ba:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 80026be:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80026c2:	3340      	adds	r3, #64	@ 0x40
 80026c4:	443b      	add	r3, r7
 80026c6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026ca:	461a      	mov	r2, r3
 80026cc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80026d0:	4810      	ldr	r0, [pc, #64]	@ (8002714 <SpiTransferFromSpiInterrupt+0x174>)
 80026d2:	f00b fc1d 	bl	800df10 <print>
                      "Verification of read data is invalid!\n"
                      "read_data[%d] = %d, but expected was %d",
                      i, data.Data[i], i);
            return ERROR_FAIL;
 80026d6:	f04f 33ff 	mov.w	r3, #4294967295
 80026da:	e009      	b.n	80026f0 <SpiTransferFromSpiInterrupt+0x150>
    for (uint8_t i = 1; i < 17U; ++i)
 80026dc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80026e0:	3301      	adds	r3, #1
 80026e2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80026e6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80026ea:	2b10      	cmp	r3, #16
 80026ec:	d9db      	bls.n	80026a6 <SpiTransferFromSpiInterrupt+0x106>
        }
    }

    return STATUS_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3740      	adds	r7, #64	@ 0x40
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	000186a0 	.word	0x000186a0
 80026fc:	08026d38 	.word	0x08026d38
 8002700:	080024cd 	.word	0x080024cd
 8002704:	08026d64 	.word	0x08026d64
 8002708:	08026dcc 	.word	0x08026dcc
 800270c:	08026e70 	.word	0x08026e70
 8002710:	08026ee8 	.word	0x08026ee8
 8002714:	08026f00 	.word	0x08026f00

08002718 <SpiTransferFromGpioInterruptCallback>:
 *          print statement asynchronously.
 *
 * @param   param The abstract interrupt callback parameter.
 *****************************************************************************/
static void SpiTransferFromGpioInterruptCallback(void * param)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af02      	add	r7, sp, #8
 800271e:	6078      	str	r0, [r7, #4]
    if (param == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d103      	bne.n	800272e <SpiTransferFromGpioInterruptCallback+0x16>
    {
        error_log("SPI transfer from GPIO interrupt test failed:\n"
 8002726:	481c      	ldr	r0, [pc, #112]	@ (8002798 <SpiTransferFromGpioInterruptCallback+0x80>)
 8002728:	f00b fbf2 	bl	800df10 <print>
                  "callback parameter \"param\" was NULL!");
        return;
 800272c:	e030      	b.n	8002790 <SpiTransferFromGpioInterruptCallback+0x78>
    }

    print("Invoking SPI transfer from GPIO interrupt callback...\n");
 800272e:	481b      	ldr	r0, [pc, #108]	@ (800279c <SpiTransferFromGpioInterruptCallback+0x84>)
 8002730:	f00b fbee 	bl	800df10 <print>

    /* Clear the laser pattern and read back previous values. */
    spi_irq_data_t * data = (spi_irq_data_t *) param;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	613b      	str	r3, [r7, #16]
    data->Data[0] = 0x04; // Laser Pattern Register Address
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	2204      	movs	r2, #4
 800273c:	721a      	strb	r2, [r3, #8]
    for (uint8_t i = 1; i < 17U; ++i) data->Data[i] = i;
 800273e:	2301      	movs	r3, #1
 8002740:	75fb      	strb	r3, [r7, #23]
 8002742:	e007      	b.n	8002754 <SpiTransferFromGpioInterruptCallback+0x3c>
 8002744:	7dfb      	ldrb	r3, [r7, #23]
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4413      	add	r3, r2
 800274a:	7dfa      	ldrb	r2, [r7, #23]
 800274c:	721a      	strb	r2, [r3, #8]
 800274e:	7dfb      	ldrb	r3, [r7, #23]
 8002750:	3301      	adds	r3, #1
 8002752:	75fb      	strb	r3, [r7, #23]
 8002754:	7dfb      	ldrb	r3, [r7, #23]
 8002756:	2b10      	cmp	r3, #16
 8002758:	d9f4      	bls.n	8002744 <SpiTransferFromGpioInterruptCallback+0x2c>
    status_t status = S2PI_TransferFrame(data->Slave, data->Data, data->Data, 17U,
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	6858      	ldr	r0, [r3, #4]
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	f103 0108 	add.w	r1, r3, #8
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f103 0208 	add.w	r2, r3, #8
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	9301      	str	r3, [sp, #4]
 800276e:	4b0c      	ldr	r3, [pc, #48]	@ (80027a0 <SpiTransferFromGpioInterruptCallback+0x88>)
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	2311      	movs	r3, #17
 8002774:	f00b f940 	bl	800d9f8 <S2PI_TransferFrame>
 8002778:	60f8      	str	r0, [r7, #12]
                                         SpiTransferFromSpiInterruptCallback, param);
    if (status != STATUS_OK)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d007      	beq.n	8002790 <SpiTransferFromGpioInterruptCallback+0x78>
    {
        error_log("SPI transfer from GPIO interrupt test failed:\n"
 8002780:	68f9      	ldr	r1, [r7, #12]
 8002782:	4808      	ldr	r0, [pc, #32]	@ (80027a4 <SpiTransferFromGpioInterruptCallback+0x8c>)
 8002784:	f00b fbc4 	bl	800df10 <print>
                  "Calling S2PI_TransferFrame from GPIO interrupt "
                  "returned error code: %d", status);
        data->Status = status;
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	601a      	str	r2, [r3, #0]
        return;
 800278e:	bf00      	nop
    }
}
 8002790:	3718      	adds	r7, #24
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	08026f84 	.word	0x08026f84
 800279c:	08026fe0 	.word	0x08026fe0
 80027a0:	080024cd 	.word	0x080024cd
 80027a4:	08027018 	.word	0x08027018

080027a8 <SpiTransferFromGpioInterrupt>:
 *            match the expected values.
 *          - The S2PI layer error code if #S2PI_TransferFrame or the GPIO or
 *            SPI callback yield in any non-OK status.
 *****************************************************************************/
static status_t SpiTransferFromGpioInterrupt(s2pi_slave_t slave)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b08e      	sub	sp, #56	@ 0x38
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
    /* Test parameter configuration: *****************************************/
    const uint32_t timeout_ms = 300; // timeout for measurement, might be increased..
 80027b0:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80027b4:	633b      	str	r3, [r7, #48]	@ 0x30
    /*************************************************************************/

    spi_irq_data_t data = { .Slave = slave };
 80027b6:	f107 0310 	add.w	r3, r7, #16
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	605a      	str	r2, [r3, #4]
 80027c0:	609a      	str	r2, [r3, #8]
 80027c2:	60da      	str	r2, [r3, #12]
 80027c4:	611a      	str	r2, [r3, #16]
 80027c6:	615a      	str	r2, [r3, #20]
 80027c8:	619a      	str	r2, [r3, #24]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	617b      	str	r3, [r7, #20]

    /* Install IRQ callback. */
    status_t status = S2PI_SetIrqCallback(slave, SpiTransferFromGpioInterruptCallback, &data);
 80027ce:	f107 0310 	add.w	r3, r7, #16
 80027d2:	461a      	mov	r2, r3
 80027d4:	4940      	ldr	r1, [pc, #256]	@ (80028d8 <SpiTransferFromGpioInterrupt+0x130>)
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f00b fa38 	bl	800dc4c <S2PI_SetIrqCallback>
 80027dc:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (status != STATUS_OK)
 80027de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <SpiTransferFromGpioInterrupt+0x48>
    {
        error_log("SPI transfer from GPIO interrupt test failed:\n"
 80027e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80027e6:	483d      	ldr	r0, [pc, #244]	@ (80028dc <SpiTransferFromGpioInterrupt+0x134>)
 80027e8:	f00b fb92 	bl	800df10 <print>
                  "The call to S2PI_SetIrqCallback returned error code: %d", status);
        return status;
 80027ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ee:	e06f      	b.n	80028d0 <SpiTransferFromGpioInterrupt+0x128>
    }

    /* Setup Device for invoking GPIO interrupt. */
    status = ConfigureDevice(slave, 0);
 80027f0:	2100      	movs	r1, #0
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7fe fe12 	bl	800141c <ConfigureDevice>
 80027f8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (status != STATUS_OK)
 80027fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d004      	beq.n	800280a <SpiTransferFromGpioInterrupt+0x62>
    {
        error_log("SPI transfer from GPIO interrupt test failed.");
 8002800:	4837      	ldr	r0, [pc, #220]	@ (80028e0 <SpiTransferFromGpioInterrupt+0x138>)
 8002802:	f00b fb85 	bl	800df10 <print>
        return status;
 8002806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002808:	e062      	b.n	80028d0 <SpiTransferFromGpioInterrupt+0x128>
    }

    /* Trigger Measurement and invoke GPIO interrupt. */
    status = TriggerMeasurement(slave, 0, 0, 0);
 800280a:	2300      	movs	r3, #0
 800280c:	2200      	movs	r2, #0
 800280e:	2100      	movs	r1, #0
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7fe ff2d 	bl	8001670 <TriggerMeasurement>
 8002816:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (status != STATUS_OK)
 8002818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800281a:	2b00      	cmp	r3, #0
 800281c:	d004      	beq.n	8002828 <SpiTransferFromGpioInterrupt+0x80>
    {
        error_log("GPIO interrupt test failed!");
 800281e:	4831      	ldr	r0, [pc, #196]	@ (80028e4 <SpiTransferFromGpioInterrupt+0x13c>)
 8002820:	f00b fb76 	bl	800df10 <print>
        return status;
 8002824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002826:	e053      	b.n	80028d0 <SpiTransferFromGpioInterrupt+0x128>
    }

    ltc_t start;
    Time_GetNow(&start);
 8002828:	f107 0308 	add.w	r3, r7, #8
 800282c:	4618      	mov	r0, r3
 800282e:	f00d f8af 	bl	800f990 <Time_GetNow>

    /* Wait for Interrupt using the callback method. */
    while (!data.Finished)
 8002832:	e00f      	b.n	8002854 <SpiTransferFromGpioInterrupt+0xac>
    {
        if (Time_CheckTimeoutMSec(&start, timeout_ms))
 8002834:	f107 0308 	add.w	r3, r7, #8
 8002838:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800283a:	4618      	mov	r0, r3
 800283c:	f00d f956 	bl	800faec <Time_CheckTimeoutMSec>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d006      	beq.n	8002854 <SpiTransferFromGpioInterrupt+0xac>
        {
            error_log("SPI transfer from GPIO interrupt test failed:\n"
 8002846:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002848:	4827      	ldr	r0, [pc, #156]	@ (80028e8 <SpiTransferFromGpioInterrupt+0x140>)
 800284a:	f00b fb61 	bl	800df10 <print>
                      "The IRQ callback was not invoked within %d ms.",
                      timeout_ms);
            return ERROR_TIMEOUT;
 800284e:	f06f 0305 	mvn.w	r3, #5
 8002852:	e03d      	b.n	80028d0 <SpiTransferFromGpioInterrupt+0x128>
    while (!data.Finished)
 8002854:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002858:	b2db      	uxtb	r3, r3
 800285a:	f083 0301 	eor.w	r3, r3, #1
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1e7      	bne.n	8002834 <SpiTransferFromGpioInterrupt+0x8c>
        }
    }

    if (data.Status != STATUS_OK)
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d006      	beq.n	8002878 <SpiTransferFromGpioInterrupt+0xd0>
    {
        error_log("SPI transfer from GPIO interrupt test failed:\n"
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4619      	mov	r1, r3
 800286e:	481f      	ldr	r0, [pc, #124]	@ (80028ec <SpiTransferFromGpioInterrupt+0x144>)
 8002870:	f00b fb4e 	bl	800df10 <print>
                  "Waiting for the transfers to be finished yielded a error code: %d",
                  data.Status);
        return data.Status;
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	e02b      	b.n	80028d0 <SpiTransferFromGpioInterrupt+0x128>
    }

    print("Verify read data...\n");
 8002878:	481d      	ldr	r0, [pc, #116]	@ (80028f0 <SpiTransferFromGpioInterrupt+0x148>)
 800287a:	f00b fb49 	bl	800df10 <print>
    /* Verify the read pattern. */
    for (uint8_t i = 1; i < 17U; ++i)
 800287e:	2301      	movs	r3, #1
 8002880:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002884:	e01f      	b.n	80028c6 <SpiTransferFromGpioInterrupt+0x11e>
    {
        if (data.Data[i] != i)
 8002886:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800288a:	3338      	adds	r3, #56	@ 0x38
 800288c:	443b      	add	r3, r7
 800288e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002892:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8002896:	429a      	cmp	r2, r3
 8002898:	d010      	beq.n	80028bc <SpiTransferFromGpioInterrupt+0x114>
        {
            error_log("SPI transfer from GPIO interrupt test failed:\n"
 800289a:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 800289e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80028a2:	3338      	adds	r3, #56	@ 0x38
 80028a4:	443b      	add	r3, r7
 80028a6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80028aa:	461a      	mov	r2, r3
 80028ac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80028b0:	4810      	ldr	r0, [pc, #64]	@ (80028f4 <SpiTransferFromGpioInterrupt+0x14c>)
 80028b2:	f00b fb2d 	bl	800df10 <print>
                      "Verification of read data is invalid!\n"
                      "read_data[%d] = %d, but expected was %d",
                      i, data.Data[i], i);
            return ERROR_FAIL;
 80028b6:	f04f 33ff 	mov.w	r3, #4294967295
 80028ba:	e009      	b.n	80028d0 <SpiTransferFromGpioInterrupt+0x128>
    for (uint8_t i = 1; i < 17U; ++i)
 80028bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80028c0:	3301      	adds	r3, #1
 80028c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80028c6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80028ca:	2b10      	cmp	r3, #16
 80028cc:	d9db      	bls.n	8002886 <SpiTransferFromGpioInterrupt+0xde>
        }
    }

    return STATUS_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3738      	adds	r7, #56	@ 0x38
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	08002719 	.word	0x08002719
 80028dc:	08027098 	.word	0x08027098
 80028e0:	08027108 	.word	0x08027108
 80028e4:	08025db8 	.word	0x08025db8
 80028e8:	08027140 	.word	0x08027140
 80028ec:	080271a8 	.word	0x080271a8
 80028f0:	08026ee8 	.word	0x08026ee8
 80028f4:	08027220 	.word	0x08027220

080028f8 <SpiTransferFromPitInterruptCallback>:
 *          print statement asynchronously.
 *
 * @param   param The abstract interrupt callback parameter.
 *****************************************************************************/
static void SpiTransferFromPitInterruptCallback(void * param)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	6078      	str	r0, [r7, #4]
    status_t status = Timer_SetInterval(0, param); // disable timer
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	2000      	movs	r0, #0
 8002904:	f00b fa54 	bl	800ddb0 <Timer_SetInterval>
 8002908:	6138      	str	r0, [r7, #16]
    if (status != STATUS_OK)
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00a      	beq.n	8002926 <SpiTransferFromPitInterruptCallback+0x2e>
    {
        error_log("SPI transfer from PIT interrupt test failed:\n"
 8002910:	6939      	ldr	r1, [r7, #16]
 8002912:	4823      	ldr	r0, [pc, #140]	@ (80029a0 <SpiTransferFromPitInterruptCallback+0xa8>)
 8002914:	f00b fafc 	bl	800df10 <print>
                  "Timer_SetCallback to 0 returned status code: %d",
                  status);
        if (param != NULL) ((spi_irq_data_t*)param)->Status = status;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d03b      	beq.n	8002996 <SpiTransferFromPitInterruptCallback+0x9e>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	601a      	str	r2, [r3, #0]
        return;
 8002924:	e037      	b.n	8002996 <SpiTransferFromPitInterruptCallback+0x9e>
    }


    if (param == NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d103      	bne.n	8002934 <SpiTransferFromPitInterruptCallback+0x3c>
    {
        error_log("SPI transfer from PIT interrupt test failed:\n"
 800292c:	481d      	ldr	r0, [pc, #116]	@ (80029a4 <SpiTransferFromPitInterruptCallback+0xac>)
 800292e:	f00b faef 	bl	800df10 <print>
                  "callback parameter \"param\" was NULL!");
        return;
 8002932:	e031      	b.n	8002998 <SpiTransferFromPitInterruptCallback+0xa0>
    }

    print("Invoking SPI transfer from PIT interrupt callback...\n");
 8002934:	481c      	ldr	r0, [pc, #112]	@ (80029a8 <SpiTransferFromPitInterruptCallback+0xb0>)
 8002936:	f00b faeb 	bl	800df10 <print>

    /* Clear the laser pattern and read back previous values. */
    spi_irq_data_t * data = (spi_irq_data_t *) param;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	60fb      	str	r3, [r7, #12]
    data->Data[0] = 0x04; // Laser Pattern Register Address
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2204      	movs	r2, #4
 8002942:	721a      	strb	r2, [r3, #8]
    for (uint8_t i = 1; i < 17U; ++i) data->Data[i] = i;
 8002944:	2301      	movs	r3, #1
 8002946:	75fb      	strb	r3, [r7, #23]
 8002948:	e007      	b.n	800295a <SpiTransferFromPitInterruptCallback+0x62>
 800294a:	7dfb      	ldrb	r3, [r7, #23]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	4413      	add	r3, r2
 8002950:	7dfa      	ldrb	r2, [r7, #23]
 8002952:	721a      	strb	r2, [r3, #8]
 8002954:	7dfb      	ldrb	r3, [r7, #23]
 8002956:	3301      	adds	r3, #1
 8002958:	75fb      	strb	r3, [r7, #23]
 800295a:	7dfb      	ldrb	r3, [r7, #23]
 800295c:	2b10      	cmp	r3, #16
 800295e:	d9f4      	bls.n	800294a <SpiTransferFromPitInterruptCallback+0x52>
    status = S2PI_TransferFrame(data->Slave, data->Data, data->Data, 17U,
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6858      	ldr	r0, [r3, #4]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f103 0108 	add.w	r1, r3, #8
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f103 0208 	add.w	r2, r3, #8
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	9301      	str	r3, [sp, #4]
 8002974:	4b0d      	ldr	r3, [pc, #52]	@ (80029ac <SpiTransferFromPitInterruptCallback+0xb4>)
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	2311      	movs	r3, #17
 800297a:	f00b f83d 	bl	800d9f8 <S2PI_TransferFrame>
 800297e:	6138      	str	r0, [r7, #16]
                                SpiTransferFromSpiInterruptCallback, param);
    if (status != STATUS_OK)
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d008      	beq.n	8002998 <SpiTransferFromPitInterruptCallback+0xa0>
    {
        error_log("SPI transfer from PIT interrupt test failed:\n"
 8002986:	6939      	ldr	r1, [r7, #16]
 8002988:	4809      	ldr	r0, [pc, #36]	@ (80029b0 <SpiTransferFromPitInterruptCallback+0xb8>)
 800298a:	f00b fac1 	bl	800df10 <print>
                  "Calling S2PI_TransferFrame from GPIO interrupt "
                  "returned error code: %d", status);
        data->Status = status;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	601a      	str	r2, [r3, #0]
        return;
 8002994:	e000      	b.n	8002998 <SpiTransferFromPitInterruptCallback+0xa0>
        return;
 8002996:	bf00      	nop
    }
}
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	080272a4 	.word	0x080272a4
 80029a4:	0802730c 	.word	0x0802730c
 80029a8:	08027368 	.word	0x08027368
 80029ac:	080024cd 	.word	0x080024cd
 80029b0:	080273a0 	.word	0x080273a0

080029b4 <SpiTransferFromPitInterrupt>:
 *            callback yield in any non-OK status.
 *          - The PIT layer error code if #Timer_SetCallback or the PIT
 *            callback yield in any non-OK status.
 *****************************************************************************/
static status_t SpiTransferFromPitInterrupt(s2pi_slave_t slave)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b090      	sub	sp, #64	@ 0x40
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
    /* Test parameter configuration: *****************************************/
    const uint32_t timeout_ms = 100;    // timeout for test.
 80029bc:	2364      	movs	r3, #100	@ 0x64
 80029be:	63bb      	str	r3, [r7, #56]	@ 0x38
    const uint32_t interval_us = 1000;  // PIT interval for the first event.
 80029c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029c4:	637b      	str	r3, [r7, #52]	@ 0x34
    /*************************************************************************/

    spi_irq_data_t data = { .Slave = slave };
 80029c6:	f107 0314 	add.w	r3, r7, #20
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	605a      	str	r2, [r3, #4]
 80029d0:	609a      	str	r2, [r3, #8]
 80029d2:	60da      	str	r2, [r3, #12]
 80029d4:	611a      	str	r2, [r3, #16]
 80029d6:	615a      	str	r2, [r3, #20]
 80029d8:	619a      	str	r2, [r3, #24]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	61bb      	str	r3, [r7, #24]

    status_t status = Timer_SetCallback(SpiTransferFromPitInterruptCallback);
 80029de:	4844      	ldr	r0, [pc, #272]	@ (8002af0 <SpiTransferFromPitInterrupt+0x13c>)
 80029e0:	f00b fa5a 	bl	800de98 <Timer_SetCallback>
 80029e4:	6338      	str	r0, [r7, #48]	@ 0x30
    if (status == ERROR_NOT_IMPLEMENTED) return status;
 80029e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e8:	f113 0f09 	cmn.w	r3, #9
 80029ec:	d101      	bne.n	80029f2 <SpiTransferFromPitInterrupt+0x3e>
 80029ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f0:	e079      	b.n	8002ae6 <SpiTransferFromPitInterrupt+0x132>
    if  (status != STATUS_OK)
 80029f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <SpiTransferFromPitInterrupt+0x50>
    {
        error_log("SPI transfer from PIT interrupt test failed:\n"
 80029f8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80029fa:	483e      	ldr	r0, [pc, #248]	@ (8002af4 <SpiTransferFromPitInterrupt+0x140>)
 80029fc:	f00b fa88 	bl	800df10 <print>
                  "Timer_SetCallback returned status code: %d", status);
        return status;
 8002a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a02:	e070      	b.n	8002ae6 <SpiTransferFromPitInterrupt+0x132>
    }

    /* Setup the PIT callback with specified interval. */
    status = Timer_SetInterval(interval_us, &data);
 8002a04:	f107 0314 	add.w	r3, r7, #20
 8002a08:	4619      	mov	r1, r3
 8002a0a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002a0c:	f00b f9d0 	bl	800ddb0 <Timer_SetInterval>
 8002a10:	6338      	str	r0, [r7, #48]	@ 0x30
    if (status != STATUS_OK)
 8002a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d005      	beq.n	8002a24 <SpiTransferFromPitInterrupt+0x70>
    {
        error_log("SPI transfer from PIT interrupt test failed:\n"
 8002a18:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a1a:	4837      	ldr	r0, [pc, #220]	@ (8002af8 <SpiTransferFromPitInterrupt+0x144>)
 8002a1c:	f00b fa78 	bl	800df10 <print>
                  "Timer_SetInterval returned status code: %d", status);
        return status;
 8002a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a22:	e060      	b.n	8002ae6 <SpiTransferFromPitInterrupt+0x132>
    }

    ltc_t start;
    Time_GetNow(&start);
 8002a24:	f107 030c 	add.w	r3, r7, #12
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f00c ffb1 	bl	800f990 <Time_GetNow>

    /* Wait for test to be finished. */
    while (!data.Finished)
 8002a2e:	e00f      	b.n	8002a50 <SpiTransferFromPitInterrupt+0x9c>
    {
        if (Time_CheckTimeoutMSec(&start, timeout_ms))
 8002a30:	f107 030c 	add.w	r3, r7, #12
 8002a34:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002a36:	4618      	mov	r0, r3
 8002a38:	f00d f858 	bl	800faec <Time_CheckTimeoutMSec>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d006      	beq.n	8002a50 <SpiTransferFromPitInterrupt+0x9c>
        {
            error_log("SPI transfer from PIT interrupt test failed:\n"
 8002a42:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002a44:	482d      	ldr	r0, [pc, #180]	@ (8002afc <SpiTransferFromPitInterrupt+0x148>)
 8002a46:	f00b fa63 	bl	800df10 <print>
                      "The IRQ callback was not invoked within %d ms.",
                      timeout_ms);
            return ERROR_TIMEOUT;
 8002a4a:	f06f 0305 	mvn.w	r3, #5
 8002a4e:	e04a      	b.n	8002ae6 <SpiTransferFromPitInterrupt+0x132>
    while (!data.Finished)
 8002a50:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	f083 0301 	eor.w	r3, r3, #1
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1e7      	bne.n	8002a30 <SpiTransferFromPitInterrupt+0x7c>
        }
    }

    if (data.Status != STATUS_OK)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d006      	beq.n	8002a74 <SpiTransferFromPitInterrupt+0xc0>
    {
        error_log("SPI transfer from PIT interrupt test failed:\n"
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4825      	ldr	r0, [pc, #148]	@ (8002b00 <SpiTransferFromPitInterrupt+0x14c>)
 8002a6c:	f00b fa50 	bl	800df10 <print>
                  "Waiting for the transfers to be finished yielded a error code: %d",
                  data.Status);
        return data.Status;
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	e038      	b.n	8002ae6 <SpiTransferFromPitInterrupt+0x132>
    }

    status = Timer_SetCallback(0);
 8002a74:	2000      	movs	r0, #0
 8002a76:	f00b fa0f 	bl	800de98 <Timer_SetCallback>
 8002a7a:	6338      	str	r0, [r7, #48]	@ 0x30
    if (status != STATUS_OK)
 8002a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d005      	beq.n	8002a8e <SpiTransferFromPitInterrupt+0xda>
    {
        error_log("SPI transfer from PIT interrupt test failed:\n"
 8002a82:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a84:	481f      	ldr	r0, [pc, #124]	@ (8002b04 <SpiTransferFromPitInterrupt+0x150>)
 8002a86:	f00b fa43 	bl	800df10 <print>
                  "Timer_SetCallback to 0 returned status code: %d", status);
        return status;
 8002a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a8c:	e02b      	b.n	8002ae6 <SpiTransferFromPitInterrupt+0x132>
    }

    print("Verify read data...\n");
 8002a8e:	481e      	ldr	r0, [pc, #120]	@ (8002b08 <SpiTransferFromPitInterrupt+0x154>)
 8002a90:	f00b fa3e 	bl	800df10 <print>
    /* Verify the read pattern. */
    for (uint8_t i = 1; i < 17U; ++i)
 8002a94:	2301      	movs	r3, #1
 8002a96:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8002a9a:	e01f      	b.n	8002adc <SpiTransferFromPitInterrupt+0x128>
    {
        if (data.Data[i] != i)
 8002a9c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002aa0:	3340      	adds	r3, #64	@ 0x40
 8002aa2:	443b      	add	r3, r7
 8002aa4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002aa8:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d010      	beq.n	8002ad2 <SpiTransferFromPitInterrupt+0x11e>
        {
            error_log("SPI transfer from PIT interrupt test failed:\n"
 8002ab0:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 8002ab4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002ab8:	3340      	adds	r3, #64	@ 0x40
 8002aba:	443b      	add	r3, r7
 8002abc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002ac6:	4811      	ldr	r0, [pc, #68]	@ (8002b0c <SpiTransferFromPitInterrupt+0x158>)
 8002ac8:	f00b fa22 	bl	800df10 <print>
                      "Verification of read data is invalid!\n"
                      "read_data[%d] = %d, but expected was %d",
                      i, data.Data[i], i);
            return ERROR_FAIL;
 8002acc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad0:	e009      	b.n	8002ae6 <SpiTransferFromPitInterrupt+0x132>
    for (uint8_t i = 1; i < 17U; ++i)
 8002ad2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8002adc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002ae0:	2b10      	cmp	r3, #16
 8002ae2:	d9db      	bls.n	8002a9c <SpiTransferFromPitInterrupt+0xe8>
        }
    }

    return STATUS_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3740      	adds	r7, #64	@ 0x40
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	080028f9 	.word	0x080028f9
 8002af4:	0802741c 	.word	0x0802741c
 8002af8:	0802747c 	.word	0x0802747c
 8002afc:	080274dc 	.word	0x080274dc
 8002b00:	08027540 	.word	0x08027540
 8002b04:	080272a4 	.word	0x080272a4
 8002b08:	08026ee8 	.word	0x08026ee8
 8002b0c:	080275b8 	.word	0x080275b8

08002b10 <SpiTransferFromInterruptTest>:
 *            match the expected values.
 *          - The S2PI layer error code if #S2PI_TransferFrame or #S2PI_GetStatus
 *            return any negative status.
 *****************************************************************************/
static status_t SpiTransferFromInterruptTest(s2pi_slave_t slave)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
    status_t status = STATUS_OK;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60fb      	str	r3, [r7, #12]

    print(" .1 >> SPI Transfer from SPI Interrupt Test\n");
 8002b1c:	481c      	ldr	r0, [pc, #112]	@ (8002b90 <SpiTransferFromInterruptTest+0x80>)
 8002b1e:	f00b f9f7 	bl	800df10 <print>
    status = SpiTransferFromSpiInterrupt(slave);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff fd3c 	bl	80025a0 <SpiTransferFromSpiInterrupt>
 8002b28:	60f8      	str	r0, [r7, #12]
    if (status != STATUS_OK) return status;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <SpiTransferFromInterruptTest+0x24>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	e029      	b.n	8002b88 <SpiTransferFromInterruptTest+0x78>
    print(" .1 >> PASS\n\n");
 8002b34:	4817      	ldr	r0, [pc, #92]	@ (8002b94 <SpiTransferFromInterruptTest+0x84>)
 8002b36:	f00b f9eb 	bl	800df10 <print>

    print(" .2 >> SPI Transfer from GPIO Interrupt Test\n");
 8002b3a:	4817      	ldr	r0, [pc, #92]	@ (8002b98 <SpiTransferFromInterruptTest+0x88>)
 8002b3c:	f00b f9e8 	bl	800df10 <print>
    status = SpiTransferFromGpioInterrupt(slave);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7ff fe31 	bl	80027a8 <SpiTransferFromGpioInterrupt>
 8002b46:	60f8      	str	r0, [r7, #12]
    if (status != STATUS_OK) return status;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <SpiTransferFromInterruptTest+0x42>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	e01a      	b.n	8002b88 <SpiTransferFromInterruptTest+0x78>
    print(" .2 >> PASS\n\n");
 8002b52:	4812      	ldr	r0, [pc, #72]	@ (8002b9c <SpiTransferFromInterruptTest+0x8c>)
 8002b54:	f00b f9dc 	bl	800df10 <print>

    print(" .3 >> SPI Transfer from PIT Interrupt Test\n");
 8002b58:	4811      	ldr	r0, [pc, #68]	@ (8002ba0 <SpiTransferFromInterruptTest+0x90>)
 8002b5a:	f00b f9d9 	bl	800df10 <print>
    status = SpiTransferFromPitInterrupt(slave);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7ff ff28 	bl	80029b4 <SpiTransferFromPitInterrupt>
 8002b64:	60f8      	str	r0, [r7, #12]
    if (status == ERROR_NOT_IMPLEMENTED)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f113 0f09 	cmn.w	r3, #9
 8002b6c:	d103      	bne.n	8002b76 <SpiTransferFromInterruptTest+0x66>
    {
        print(" .3 >> SKIPPED (PIT is not implemented)\n\n");
 8002b6e:	480d      	ldr	r0, [pc, #52]	@ (8002ba4 <SpiTransferFromInterruptTest+0x94>)
 8002b70:	f00b f9ce 	bl	800df10 <print>
 8002b74:	e007      	b.n	8002b86 <SpiTransferFromInterruptTest+0x76>
    }
    else
    {
        if (status != STATUS_OK) return status;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <SpiTransferFromInterruptTest+0x70>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	e003      	b.n	8002b88 <SpiTransferFromInterruptTest+0x78>
        print(" .3 >> PASS\n\n");
 8002b80:	4809      	ldr	r0, [pc, #36]	@ (8002ba8 <SpiTransferFromInterruptTest+0x98>)
 8002b82:	f00b f9c5 	bl	800df10 <print>
    }

    return STATUS_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	0802763c 	.word	0x0802763c
 8002b94:	0802766c 	.word	0x0802766c
 8002b98:	0802767c 	.word	0x0802767c
 8002b9c:	080276ac 	.word	0x080276ac
 8002ba0:	080276bc 	.word	0x080276bc
 8002ba4:	080276ec 	.word	0x080276ec
 8002ba8:	08027718 	.word	0x08027718

08002bac <InitializeDevice>:
 *
 * @return  The pointer to the handle of the created device instance. Used to
 *          identify the calling instance in case of multiple devices.
 *****************************************************************************/
static argus_hnd_t* InitializeDevice(s2pi_slave_t slave)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
    /* The API module handle that contains all data definitions that is
     * required within the API module for the corresponding hardware device.
     * Every call to an API function requires the passing of a pointer to this
     * data structure. */
    argus_hnd_t * device = Argus_CreateHandle();
 8002bb4:	f00d fef4 	bl	80109a0 <Argus_CreateHandle>
 8002bb8:	60f8      	str	r0, [r7, #12]
    HandleError(device ? STATUS_OK : ERROR_FAIL, true, "Argus_CreateHandle failed!");
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <InitializeDevice+0x18>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	e001      	b.n	8002bc8 <InitializeDevice+0x1c>
 8002bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc8:	4a0e      	ldr	r2, [pc, #56]	@ (8002c04 <InitializeDevice+0x58>)
 8002bca:	2101      	movs	r1, #1
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f00b f9f3 	bl	800dfb8 <HandleError>
     * of multiple devices on a single SPI peripheral.
     *
     * Also note the #Argus_InitMode alternative that uses a third
     * parameter to choose the measurement mode: see the #argus_mode_t
     * enumeration for more information on available measurement modes. */
    status_t status = Argus_Init(device, slave);
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f00d fedd 	bl	8010994 <Argus_Init>
 8002bda:	60b8      	str	r0, [r7, #8]
    HandleError(status, true, "Argus_Init failed!");
 8002bdc:	4a0a      	ldr	r2, [pc, #40]	@ (8002c08 <InitializeDevice+0x5c>)
 8002bde:	2101      	movs	r1, #1
 8002be0:	68b8      	ldr	r0, [r7, #8]
 8002be2:	f00b f9e9 	bl	800dfb8 <HandleError>

    /* Adjust additional configuration parameters by invoking the dedicated API methods.
     * Note: The maximum frame rate is limited by the amount of data sent via UART.
     *       See #PrintResults function for more information. */
    status = Argus_SetConfigurationFrameTime(device, 100000); // 0.1 second = 10 Hz
 8002be6:	4909      	ldr	r1, [pc, #36]	@ (8002c0c <InitializeDevice+0x60>)
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f00d ffbf 	bl	8010b6c <Argus_SetConfigurationFrameTime>
 8002bee:	60b8      	str	r0, [r7, #8]
    HandleError(status, true, "Argus_SetConfigurationFrameTime failed!");
 8002bf0:	4a07      	ldr	r2, [pc, #28]	@ (8002c10 <InitializeDevice+0x64>)
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	68b8      	ldr	r0, [r7, #8]
 8002bf6:	f00b f9df 	bl	800dfb8 <HandleError>

    return device;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	08027728 	.word	0x08027728
 8002c08:	08027744 	.word	0x08027744
 8002c0c:	000186a0 	.word	0x000186a0
 8002c10:	08027758 	.word	0x08027758

08002c14 <MeasurementReadyCallback>:
 *                 identify the calling instance in case of multiple devices.
 *
 * @return  Returns the \link #status_t status\endlink (#STATUS_OK on success).
 *****************************************************************************/
static status_t MeasurementReadyCallback(status_t status, argus_hnd_t * device)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
    (void)device; // unused in this example...

    HandleError(status, false, "Measurement Ready Callback received error!");
 8002c1e:	4a08      	ldr	r2, [pc, #32]	@ (8002c40 <MeasurementReadyCallback+0x2c>)
 8002c20:	2100      	movs	r1, #0
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f00b f9c8 	bl	800dfb8 <HandleError>
     *
     * Note: Do not call the Argus_EvaluateMeasurement method
     *       from within this callback since it is invoked in
     *       a interrupt service routine and should return as
     *       soon as possible. */
    myDataReadyEvents++;
 8002c28:	4b06      	ldr	r3, [pc, #24]	@ (8002c44 <MeasurementReadyCallback+0x30>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	3301      	adds	r3, #1
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	4b04      	ldr	r3, [pc, #16]	@ (8002c44 <MeasurementReadyCallback+0x30>)
 8002c34:	701a      	strb	r2, [r3, #0]

    return STATUS_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	08027780 	.word	0x08027780
 8002c44:	24000254 	.word	0x24000254

08002c48 <PrintResults>:
 *          ```
 *
 * @param   res A pointer to the latest measurement results structure.
 *****************************************************************************/
static void PrintResults(argus_results_t const * res)
{
 8002c48:	b5b0      	push	{r4, r5, r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af04      	add	r7, sp, #16
 8002c4e:	6078      	str	r0, [r7, #4]
     *       the API from reaching the full frame rate. This example sends
     *       approximately 80 characters per frame at 115200 bps which limits
     *       the max. frame rate of 144 fps:
     *       115200 bps / 10 [bauds-per-byte] / 80 [bytes-per-frame] = 144 fps */
    print("%4d.%06d s; Range: %5d mm;  Amplitude: %4d LSB;  Quality: %3d;  Status: %d\n",
          res->TimeStamp.sec,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6859      	ldr	r1, [r3, #4]
          res->TimeStamp.usec,
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6898      	ldr	r0, [r3, #8]
          res->Bin.Range / (Q9_22_ONE / 1000),
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
    print("%4d.%06d s; Range: %5d mm;  Amplitude: %4d LSB;  Quality: %3d;  Status: %d\n",
 8002c5e:	4a0f      	ldr	r2, [pc, #60]	@ (8002c9c <PrintResults+0x54>)
 8002c60:	fb82 4203 	smull	r4, r2, r2, r3
 8002c64:	441a      	add	r2, r3
 8002c66:	1312      	asrs	r2, r2, #12
 8002c68:	17db      	asrs	r3, r3, #31
 8002c6a:	1ad2      	subs	r2, r2, r3
          res->Bin.Amplitude / UQ12_4_ONE,
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f8b3 31b8 	ldrh.w	r3, [r3, #440]	@ 0x1b8
    print("%4d.%06d s; Range: %5d mm;  Amplitude: %4d LSB;  Quality: %3d;  Status: %d\n",
 8002c72:	091b      	lsrs	r3, r3, #4
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	461c      	mov	r4, r3
          res->Bin.SignalQuality,
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 31ba 	ldrb.w	r3, [r3, #442]	@ 0x1ba
    print("%4d.%06d s; Range: %5d mm;  Amplitude: %4d LSB;  Quality: %3d;  Status: %d\n",
 8002c7e:	461d      	mov	r5, r3
          res->Status);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
    print("%4d.%06d s; Range: %5d mm;  Amplitude: %4d LSB;  Quality: %3d;  Status: %d\n",
 8002c84:	9302      	str	r3, [sp, #8]
 8002c86:	9501      	str	r5, [sp, #4]
 8002c88:	9400      	str	r4, [sp, #0]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	4804      	ldr	r0, [pc, #16]	@ (8002ca0 <PrintResults+0x58>)
 8002c90:	f00b f93e 	bl	800df10 <print>
}
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bdb0      	pop	{r4, r5, r7, pc}
 8002c9c:	fa04a397 	.word	0xfa04a397
 8002ca0:	080277ac 	.word	0x080277ac

08002ca4 <PrintDeviceInfo>:
 * @brief   Prints information about the initialized devices.
 *
 * @param   device The pointer to the device handler.
 *****************************************************************************/
static void PrintDeviceInfo(argus_hnd_t * device)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af02      	add	r7, sp, #8
 8002caa:	6078      	str	r0, [r7, #4]
    /* Print some information about current API and connected device. */
    const uint32_t value = Argus_GetAPIVersion();
 8002cac:	f00d ff10 	bl	8010ad0 <Argus_GetAPIVersion>
 8002cb0:	6178      	str	r0, [r7, #20]
    const uint8_t a = (uint8_t)((value >> 24) & 0xFFU);
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	0e1b      	lsrs	r3, r3, #24
 8002cb6:	74fb      	strb	r3, [r7, #19]
    const uint8_t b = (uint8_t)((value >> 16) & 0xFFU);
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	0c1b      	lsrs	r3, r3, #16
 8002cbc:	74bb      	strb	r3, [r7, #18]
    const uint8_t c = (uint8_t)(value & 0xFFFFU);
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	747b      	strb	r3, [r7, #17]
    const uint32_t id = Argus_GetChipID(device);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f00d ff32 	bl	8010b2c <Argus_GetChipID>
 8002cc8:	60f8      	str	r0, [r7, #12]
    const char * m = Argus_GetModuleName(device);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f00d ff04 	bl	8010ad8 <Argus_GetModuleName>
 8002cd0:	60b8      	str	r0, [r7, #8]

    print("\n##### AFBR-S50 API - Advanced Example #########################\n"
 8002cd2:	7cf9      	ldrb	r1, [r7, #19]
 8002cd4:	7cba      	ldrb	r2, [r7, #18]
 8002cd6:	7c78      	ldrb	r0, [r7, #17]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	9301      	str	r3, [sp, #4]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	4803      	ldr	r0, [pc, #12]	@ (8002cf0 <PrintDeviceInfo+0x4c>)
 8002ce4:	f00b f914 	bl	800df10 <print>
          "  API Version: v%d.%d.%d\n"
          "  Chip ID:     %d\n"
          "  Module:      %s\n"
          "###############################################################\n\n",
          a, b, c, id, m);
}
 8002ce8:	bf00      	nop
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	080277f8 	.word	0x080277f8

08002cf4 <ExampleMain>:
 *          and hardware initialization.
 *
 *          This function will never be exited!
 *****************************************************************************/
void ExampleMain(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b0f6      	sub	sp, #472	@ 0x1d8
 8002cf8:	af00      	add	r7, sp, #0
    status_t status = STATUS_OK;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4

#if RUN_HAL_TESTS
    /* Running a sequence of test in order to verify the HAL implementation. */
    status = Argus_VerifyHALImplementation(SPI_SLAVE);
 8002d00:	2001      	movs	r0, #1
 8002d02:	f7fd ff19 	bl	8000b38 <Argus_VerifyHALImplementation>
 8002d06:	f8c7 01d4 	str.w	r0, [r7, #468]	@ 0x1d4
    HandleError(status, true, "HAL Implementation verification failed on SPI_SLAVE!");
 8002d0a:	4a1f      	ldr	r2, [pc, #124]	@ (8002d88 <ExampleMain+0x94>)
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	f8d7 01d4 	ldr.w	r0, [r7, #468]	@ 0x1d4
 8002d12:	f00b f951 	bl	800dfb8 <HandleError>
#endif // RUN_HAL_TESTS

    /* Instantiate and initialize the device handlers. */
    argus_hnd_t * device = InitializeDevice(SPI_SLAVE);
 8002d16:	2001      	movs	r0, #1
 8002d18:	f7ff ff48 	bl	8002bac <InitializeDevice>
 8002d1c:	f8c7 01d0 	str.w	r0, [r7, #464]	@ 0x1d0

    /* Print a device information message. */
    PrintDeviceInfo(device);
 8002d20:	f8d7 01d0 	ldr.w	r0, [r7, #464]	@ 0x1d0
 8002d24:	f7ff ffbe 	bl	8002ca4 <PrintDeviceInfo>
     * The callback is invoked every time a measurement has been finished.
     * The callback is used to schedule the data evaluation routine to the
     * main thread by the user.
     * Note that the timer based measurement is not implemented for multiple
     * instance yet! */
    status = Argus_StartMeasurementTimer(device, &MeasurementReadyCallback);
 8002d28:	4918      	ldr	r1, [pc, #96]	@ (8002d8c <ExampleMain+0x98>)
 8002d2a:	f8d7 01d0 	ldr.w	r0, [r7, #464]	@ 0x1d0
 8002d2e:	f00d fe49 	bl	80109c4 <Argus_StartMeasurementTimer>
 8002d32:	f8c7 01d4 	str.w	r0, [r7, #468]	@ 0x1d4
    HandleError(status, true, "Argus_StartMeasurementTimer failed!");
 8002d36:	4a16      	ldr	r2, [pc, #88]	@ (8002d90 <ExampleMain+0x9c>)
 8002d38:	2101      	movs	r1, #1
 8002d3a:	f8d7 01d4 	ldr.w	r0, [r7, #468]	@ 0x1d4
 8002d3e:	f00b f93b 	bl	800dfb8 <HandleError>

    /* The program loop ... */
    for (;;)
    {
        /* Check if new measurement data is ready. */
        if (myDataReadyEvents)
 8002d42:	4b14      	ldr	r3, [pc, #80]	@ (8002d94 <ExampleMain+0xa0>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0fa      	beq.n	8002d42 <ExampleMain+0x4e>
        {
            IRQ_LOCK();
 8002d4c:	f00a fc5a 	bl	800d604 <IRQ_LOCK>
            myDataReadyEvents--;
 8002d50:	4b10      	ldr	r3, [pc, #64]	@ (8002d94 <ExampleMain+0xa0>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	3b01      	subs	r3, #1
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d94 <ExampleMain+0xa0>)
 8002d5c:	701a      	strb	r2, [r3, #0]
            IRQ_UNLOCK();
 8002d5e:	f00a fc2f 	bl	800d5c0 <IRQ_UNLOCK>

            /* The measurement data structure. */
            argus_results_t res;

            /* Evaluate the raw measurement results. */
            status = Argus_EvaluateData(device, &res);
 8002d62:	463b      	mov	r3, r7
 8002d64:	4619      	mov	r1, r3
 8002d66:	f8d7 01d0 	ldr.w	r0, [r7, #464]	@ 0x1d0
 8002d6a:	f00d fe79 	bl	8010a60 <Argus_EvaluateData>
 8002d6e:	f8c7 01d4 	str.w	r0, [r7, #468]	@ 0x1d4
            HandleError(status, false, "Argus_EvaluateData failed!");
 8002d72:	4a09      	ldr	r2, [pc, #36]	@ (8002d98 <ExampleMain+0xa4>)
 8002d74:	2100      	movs	r1, #0
 8002d76:	f8d7 01d4 	ldr.w	r0, [r7, #468]	@ 0x1d4
 8002d7a:	f00b f91d 	bl	800dfb8 <HandleError>

            /* Use the obtain results, e.g. print via UART. */
            PrintResults(&res);
 8002d7e:	463b      	mov	r3, r7
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff ff61 	bl	8002c48 <PrintResults>
        if (myDataReadyEvents)
 8002d86:	e7dc      	b.n	8002d42 <ExampleMain+0x4e>
 8002d88:	080278b8 	.word	0x080278b8
 8002d8c:	08002c15 	.word	0x08002c15
 8002d90:	080278f0 	.word	0x080278f0
 8002d94:	24000254 	.word	0x24000254
 8002d98:	08027914 	.word	0x08027914

08002d9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002da2:	4b19      	ldr	r3, [pc, #100]	@ (8002e08 <MX_DMA_Init+0x6c>)
 8002da4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002da8:	4a17      	ldr	r2, [pc, #92]	@ (8002e08 <MX_DMA_Init+0x6c>)
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002db2:	4b15      	ldr	r3, [pc, #84]	@ (8002e08 <MX_DMA_Init+0x6c>)
 8002db4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	607b      	str	r3, [r7, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	200b      	movs	r0, #11
 8002dc6:	f001 f824 	bl	8003e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002dca:	200b      	movs	r0, #11
 8002dcc:	f001 f83b 	bl	8003e46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	200c      	movs	r0, #12
 8002dd6:	f001 f81c 	bl	8003e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002dda:	200c      	movs	r0, #12
 8002ddc:	f001 f833 	bl	8003e46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002de0:	2200      	movs	r2, #0
 8002de2:	2100      	movs	r1, #0
 8002de4:	200d      	movs	r0, #13
 8002de6:	f001 f814 	bl	8003e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002dea:	200d      	movs	r0, #13
 8002dec:	f001 f82b 	bl	8003e46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002df0:	2200      	movs	r2, #0
 8002df2:	2100      	movs	r1, #0
 8002df4:	200e      	movs	r0, #14
 8002df6:	f001 f80c 	bl	8003e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002dfa:	200e      	movs	r0, #14
 8002dfc:	f001 f823 	bl	8003e46 <HAL_NVIC_EnableIRQ>

}
 8002e00:	bf00      	nop
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	58024400 	.word	0x58024400

08002e0c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b088      	sub	sp, #32
 8002e10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e12:	f107 030c 	add.w	r3, r7, #12
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	605a      	str	r2, [r3, #4]
 8002e1c:	609a      	str	r2, [r3, #8]
 8002e1e:	60da      	str	r2, [r3, #12]
 8002e20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e22:	4b2d      	ldr	r3, [pc, #180]	@ (8002ed8 <MX_GPIO_Init+0xcc>)
 8002e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e28:	4a2b      	ldr	r2, [pc, #172]	@ (8002ed8 <MX_GPIO_Init+0xcc>)
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e32:	4b29      	ldr	r3, [pc, #164]	@ (8002ed8 <MX_GPIO_Init+0xcc>)
 8002e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	60bb      	str	r3, [r7, #8]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e40:	4b25      	ldr	r3, [pc, #148]	@ (8002ed8 <MX_GPIO_Init+0xcc>)
 8002e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e46:	4a24      	ldr	r2, [pc, #144]	@ (8002ed8 <MX_GPIO_Init+0xcc>)
 8002e48:	f043 0302 	orr.w	r3, r3, #2
 8002e4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e50:	4b21      	ldr	r3, [pc, #132]	@ (8002ed8 <MX_GPIO_Init+0xcc>)
 8002e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	607b      	str	r3, [r7, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ed8 <MX_GPIO_Init+0xcc>)
 8002e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e64:	4a1c      	ldr	r2, [pc, #112]	@ (8002ed8 <MX_GPIO_Init+0xcc>)
 8002e66:	f043 0308 	orr.w	r3, r3, #8
 8002e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ed8 <MX_GPIO_Init+0xcc>)
 8002e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e74:	f003 0308 	and.w	r3, r3, #8
 8002e78:	603b      	str	r3, [r7, #0]
 8002e7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S50MV85I_SPI_NSS_GPIO_Port, S50MV85I_SPI_NSS_Pin, GPIO_PIN_SET);
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	2110      	movs	r1, #16
 8002e80:	4816      	ldr	r0, [pc, #88]	@ (8002edc <MX_GPIO_Init+0xd0>)
 8002e82:	f004 f887 	bl	8006f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S50MV85I_SPI_NSS_Pin;
 8002e86:	2310      	movs	r3, #16
 8002e88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e92:	2303      	movs	r3, #3
 8002e94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(S50MV85I_SPI_NSS_GPIO_Port, &GPIO_InitStruct);
 8002e96:	f107 030c 	add.w	r3, r7, #12
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	480f      	ldr	r0, [pc, #60]	@ (8002edc <MX_GPIO_Init+0xd0>)
 8002e9e:	f003 feb9 	bl	8006c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S50MV85I_IRQ_Pin;
 8002ea2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ea6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ea8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002eac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(S50MV85I_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002eb2:	f107 030c 	add.w	r3, r7, #12
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4809      	ldr	r0, [pc, #36]	@ (8002ee0 <MX_GPIO_Init+0xd4>)
 8002eba:	f003 feab 	bl	8006c14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	2028      	movs	r0, #40	@ 0x28
 8002ec4:	f000 ffa5 	bl	8003e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002ec8:	2028      	movs	r0, #40	@ 0x28
 8002eca:	f000 ffbc 	bl	8003e46 <HAL_NVIC_EnableIRQ>

}
 8002ece:	bf00      	nop
 8002ed0:	3720      	adds	r7, #32
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	58024400 	.word	0x58024400
 8002edc:	58020000 	.word	0x58020000
 8002ee0:	58020400 	.word	0x58020400

08002ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8002ee8:	f000 f88c 	bl	8003004 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002eec:	f000 fdde 	bl	8003aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ef0:	f000 f818 	bl	8002f24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ef4:	f7ff ff8a 	bl	8002e0c <MX_GPIO_Init>
  MX_DMA_Init();
 8002ef8:	f7ff ff50 	bl	8002d9c <MX_DMA_Init>
  MX_SPI1_Init();
 8002efc:	f000 f8b4 	bl	8003068 <MX_SPI1_Init>
  MX_TIM5_Init();
 8002f00:	f000 fba8 	bl	8003654 <MX_TIM5_Init>
  MX_TIM6_Init();
 8002f04:	f000 fbfe 	bl	8003704 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8002f08:	f000 fc7c 	bl	8003804 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  app_main();
 8002f0c:	f00b f874 	bl	800dff8 <app_main>

  while (1)
  {
	  printf("STM32 PANIC!!!!!!\n\t");
 8002f10:	4803      	ldr	r0, [pc, #12]	@ (8002f20 <main+0x3c>)
 8002f12:	f020 fbe7 	bl	80236e4 <iprintf>
	  HAL_Delay(100);
 8002f16:	2064      	movs	r0, #100	@ 0x64
 8002f18:	f000 fe5a 	bl	8003bd0 <HAL_Delay>
	  printf("STM32 PANIC!!!!!!\n\t");
 8002f1c:	bf00      	nop
 8002f1e:	e7f7      	b.n	8002f10 <main+0x2c>
 8002f20:	08027930 	.word	0x08027930

08002f24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b09c      	sub	sp, #112	@ 0x70
 8002f28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f2e:	224c      	movs	r2, #76	@ 0x4c
 8002f30:	2100      	movs	r1, #0
 8002f32:	4618      	mov	r0, r3
 8002f34:	f020 fc55 	bl	80237e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f38:	1d3b      	adds	r3, r7, #4
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f020 fc4f 	bl	80237e2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002f44:	2002      	movs	r0, #2
 8002f46:	f004 f859 	bl	8006ffc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	603b      	str	r3, [r7, #0]
 8002f4e:	4b2c      	ldr	r3, [pc, #176]	@ (8003000 <SystemClock_Config+0xdc>)
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	4a2b      	ldr	r2, [pc, #172]	@ (8003000 <SystemClock_Config+0xdc>)
 8002f54:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002f58:	6193      	str	r3, [r2, #24]
 8002f5a:	4b29      	ldr	r3, [pc, #164]	@ (8003000 <SystemClock_Config+0xdc>)
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002f62:	603b      	str	r3, [r7, #0]
 8002f64:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002f66:	bf00      	nop
 8002f68:	4b25      	ldr	r3, [pc, #148]	@ (8003000 <SystemClock_Config+0xdc>)
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f74:	d1f8      	bne.n	8002f68 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f76:	2302      	movs	r3, #2
 8002f78:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8002f7e:	2340      	movs	r3, #64	@ 0x40
 8002f80:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f82:	2302      	movs	r3, #2
 8002f84:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f86:	2300      	movs	r3, #0
 8002f88:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002f8a:	2304      	movs	r3, #4
 8002f8c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 8002f8e:	2322      	movs	r3, #34	@ 0x22
 8002f90:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8002f92:	2301      	movs	r3, #1
 8002f94:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002f96:	2302      	movs	r3, #2
 8002f98:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002f9e:	230c      	movs	r3, #12
 8002fa0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8002fa6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002faa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f004 f85d 	bl	8007070 <HAL_RCC_OscConfig>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002fbc:	f000 f84e 	bl	800305c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fc0:	233f      	movs	r3, #63	@ 0x3f
 8002fc2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002fcc:	2308      	movs	r3, #8
 8002fce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002fd0:	2340      	movs	r3, #64	@ 0x40
 8002fd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002fd4:	2340      	movs	r3, #64	@ 0x40
 8002fd6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002fd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002fdc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002fde:	2340      	movs	r3, #64	@ 0x40
 8002fe0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002fe2:	1d3b      	adds	r3, r7, #4
 8002fe4:	2103      	movs	r1, #3
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f004 fc1c 	bl	8007824 <HAL_RCC_ClockConfig>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002ff2:	f000 f833 	bl	800305c <Error_Handler>
  }
}
 8002ff6:	bf00      	nop
 8002ff8:	3770      	adds	r7, #112	@ 0x70
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	58024800 	.word	0x58024800

08003004 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800300a:	463b      	mov	r3, r7
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	605a      	str	r2, [r3, #4]
 8003012:	609a      	str	r2, [r3, #8]
 8003014:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8003016:	f000 ff31 	bl	8003e7c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800301a:	2301      	movs	r3, #1
 800301c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800301e:	2300      	movs	r3, #0
 8003020:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8003022:	2300      	movs	r3, #0
 8003024:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8003026:	231f      	movs	r3, #31
 8003028:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800302a:	2387      	movs	r3, #135	@ 0x87
 800302c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800302e:	2300      	movs	r3, #0
 8003030:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003032:	2300      	movs	r3, #0
 8003034:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8003036:	2301      	movs	r3, #1
 8003038:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800303a:	2301      	movs	r3, #1
 800303c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800303e:	2300      	movs	r3, #0
 8003040:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8003042:	2300      	movs	r3, #0
 8003044:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003046:	463b      	mov	r3, r7
 8003048:	4618      	mov	r0, r3
 800304a:	f000 ff4f 	bl	8003eec <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800304e:	2004      	movs	r0, #4
 8003050:	f000 ff2c 	bl	8003eac <HAL_MPU_Enable>

}
 8003054:	bf00      	nop
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003060:	b672      	cpsid	i
}
 8003062:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003064:	bf00      	nop
 8003066:	e7fd      	b.n	8003064 <Error_Handler+0x8>

08003068 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800306c:	4b29      	ldr	r3, [pc, #164]	@ (8003114 <MX_SPI1_Init+0xac>)
 800306e:	4a2a      	ldr	r2, [pc, #168]	@ (8003118 <MX_SPI1_Init+0xb0>)
 8003070:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003072:	4b28      	ldr	r3, [pc, #160]	@ (8003114 <MX_SPI1_Init+0xac>)
 8003074:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003078:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800307a:	4b26      	ldr	r3, [pc, #152]	@ (8003114 <MX_SPI1_Init+0xac>)
 800307c:	2200      	movs	r2, #0
 800307e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003080:	4b24      	ldr	r3, [pc, #144]	@ (8003114 <MX_SPI1_Init+0xac>)
 8003082:	2207      	movs	r2, #7
 8003084:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003086:	4b23      	ldr	r3, [pc, #140]	@ (8003114 <MX_SPI1_Init+0xac>)
 8003088:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800308c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800308e:	4b21      	ldr	r3, [pc, #132]	@ (8003114 <MX_SPI1_Init+0xac>)
 8003090:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003094:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003096:	4b1f      	ldr	r3, [pc, #124]	@ (8003114 <MX_SPI1_Init+0xac>)
 8003098:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800309c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800309e:	4b1d      	ldr	r3, [pc, #116]	@ (8003114 <MX_SPI1_Init+0xac>)
 80030a0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80030a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003114 <MX_SPI1_Init+0xac>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80030ac:	4b19      	ldr	r3, [pc, #100]	@ (8003114 <MX_SPI1_Init+0xac>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030b2:	4b18      	ldr	r3, [pc, #96]	@ (8003114 <MX_SPI1_Init+0xac>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80030b8:	4b16      	ldr	r3, [pc, #88]	@ (8003114 <MX_SPI1_Init+0xac>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80030be:	4b15      	ldr	r3, [pc, #84]	@ (8003114 <MX_SPI1_Init+0xac>)
 80030c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80030c4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80030c6:	4b13      	ldr	r3, [pc, #76]	@ (8003114 <MX_SPI1_Init+0xac>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80030cc:	4b11      	ldr	r3, [pc, #68]	@ (8003114 <MX_SPI1_Init+0xac>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80030d2:	4b10      	ldr	r3, [pc, #64]	@ (8003114 <MX_SPI1_Init+0xac>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80030d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003114 <MX_SPI1_Init+0xac>)
 80030da:	2200      	movs	r2, #0
 80030dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80030de:	4b0d      	ldr	r3, [pc, #52]	@ (8003114 <MX_SPI1_Init+0xac>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80030e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003114 <MX_SPI1_Init+0xac>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80030ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003114 <MX_SPI1_Init+0xac>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 80030f0:	4b08      	ldr	r3, [pc, #32]	@ (8003114 <MX_SPI1_Init+0xac>)
 80030f2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80030f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80030f8:	4b06      	ldr	r3, [pc, #24]	@ (8003114 <MX_SPI1_Init+0xac>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80030fe:	4805      	ldr	r0, [pc, #20]	@ (8003114 <MX_SPI1_Init+0xac>)
 8003100:	f006 fcde 	bl	8009ac0 <HAL_SPI_Init>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <MX_SPI1_Init+0xa6>
  {
    Error_Handler();
 800310a:	f7ff ffa7 	bl	800305c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	24000258 	.word	0x24000258
 8003118:	40013000 	.word	0x40013000

0800311c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b0b8      	sub	sp, #224	@ 0xe0
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003124:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	605a      	str	r2, [r3, #4]
 800312e:	609a      	str	r2, [r3, #8]
 8003130:	60da      	str	r2, [r3, #12]
 8003132:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003134:	f107 0310 	add.w	r3, r7, #16
 8003138:	22b8      	movs	r2, #184	@ 0xb8
 800313a:	2100      	movs	r1, #0
 800313c:	4618      	mov	r0, r3
 800313e:	f020 fb50 	bl	80237e2 <memset>
  if(spiHandle->Instance==SPI1)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a61      	ldr	r2, [pc, #388]	@ (80032cc <HAL_SPI_MspInit+0x1b0>)
 8003148:	4293      	cmp	r3, r2
 800314a:	f040 80ba 	bne.w	80032c2 <HAL_SPI_MspInit+0x1a6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800314e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 32;
 800315a:	2320      	movs	r3, #32
 800315c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 129;
 800315e:	2381      	movs	r3, #129	@ 0x81
 8003160:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8003162:	2302      	movs	r3, #2
 8003164:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003166:	2302      	movs	r3, #2
 8003168:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800316a:	2302      	movs	r3, #2
 800316c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 800316e:	2340      	movs	r3, #64	@ 0x40
 8003170:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8003172:	2300      	movs	r3, #0
 8003174:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003176:	2300      	movs	r3, #0
 8003178:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800317a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800317e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003180:	f107 0310 	add.w	r3, r7, #16
 8003184:	4618      	mov	r0, r3
 8003186:	f004 fed9 	bl	8007f3c <HAL_RCCEx_PeriphCLKConfig>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <HAL_SPI_MspInit+0x78>
    {
      Error_Handler();
 8003190:	f7ff ff64 	bl	800305c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003194:	4b4e      	ldr	r3, [pc, #312]	@ (80032d0 <HAL_SPI_MspInit+0x1b4>)
 8003196:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800319a:	4a4d      	ldr	r2, [pc, #308]	@ (80032d0 <HAL_SPI_MspInit+0x1b4>)
 800319c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80031a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80031a4:	4b4a      	ldr	r3, [pc, #296]	@ (80032d0 <HAL_SPI_MspInit+0x1b4>)
 80031a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031b2:	4b47      	ldr	r3, [pc, #284]	@ (80032d0 <HAL_SPI_MspInit+0x1b4>)
 80031b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031b8:	4a45      	ldr	r2, [pc, #276]	@ (80032d0 <HAL_SPI_MspInit+0x1b4>)
 80031ba:	f043 0302 	orr.w	r3, r3, #2
 80031be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031c2:	4b43      	ldr	r3, [pc, #268]	@ (80032d0 <HAL_SPI_MspInit+0x1b4>)
 80031c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	60bb      	str	r3, [r7, #8]
 80031ce:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB3(JTDO/TRACESWO)     ------> SPI1_SCK
    PB4(NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = S50MV85I_SPI_SCK_Pin|S50MV85I_SPI_MISO_Pin|S50MV85I_SPI_MOSI_Pin;
 80031d0:	2338      	movs	r3, #56	@ 0x38
 80031d2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d6:	2302      	movs	r3, #2
 80031d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e2:	2300      	movs	r3, #0
 80031e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031e8:	2305      	movs	r3, #5
 80031ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ee:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80031f2:	4619      	mov	r1, r3
 80031f4:	4837      	ldr	r0, [pc, #220]	@ (80032d4 <HAL_SPI_MspInit+0x1b8>)
 80031f6:	f003 fd0d 	bl	8006c14 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 80031fa:	4b37      	ldr	r3, [pc, #220]	@ (80032d8 <HAL_SPI_MspInit+0x1bc>)
 80031fc:	4a37      	ldr	r2, [pc, #220]	@ (80032dc <HAL_SPI_MspInit+0x1c0>)
 80031fe:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8003200:	4b35      	ldr	r3, [pc, #212]	@ (80032d8 <HAL_SPI_MspInit+0x1bc>)
 8003202:	2225      	movs	r2, #37	@ 0x25
 8003204:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003206:	4b34      	ldr	r3, [pc, #208]	@ (80032d8 <HAL_SPI_MspInit+0x1bc>)
 8003208:	2200      	movs	r2, #0
 800320a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800320c:	4b32      	ldr	r3, [pc, #200]	@ (80032d8 <HAL_SPI_MspInit+0x1bc>)
 800320e:	2200      	movs	r2, #0
 8003210:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003212:	4b31      	ldr	r3, [pc, #196]	@ (80032d8 <HAL_SPI_MspInit+0x1bc>)
 8003214:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003218:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800321a:	4b2f      	ldr	r3, [pc, #188]	@ (80032d8 <HAL_SPI_MspInit+0x1bc>)
 800321c:	2200      	movs	r2, #0
 800321e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003220:	4b2d      	ldr	r3, [pc, #180]	@ (80032d8 <HAL_SPI_MspInit+0x1bc>)
 8003222:	2200      	movs	r2, #0
 8003224:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003226:	4b2c      	ldr	r3, [pc, #176]	@ (80032d8 <HAL_SPI_MspInit+0x1bc>)
 8003228:	2200      	movs	r2, #0
 800322a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800322c:	4b2a      	ldr	r3, [pc, #168]	@ (80032d8 <HAL_SPI_MspInit+0x1bc>)
 800322e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003232:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003234:	4b28      	ldr	r3, [pc, #160]	@ (80032d8 <HAL_SPI_MspInit+0x1bc>)
 8003236:	2200      	movs	r2, #0
 8003238:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800323a:	4827      	ldr	r0, [pc, #156]	@ (80032d8 <HAL_SPI_MspInit+0x1bc>)
 800323c:	f000 fea6 	bl	8003f8c <HAL_DMA_Init>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_SPI_MspInit+0x12e>
    {
      Error_Handler();
 8003246:	f7ff ff09 	bl	800305c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a22      	ldr	r2, [pc, #136]	@ (80032d8 <HAL_SPI_MspInit+0x1bc>)
 800324e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003250:	4a21      	ldr	r2, [pc, #132]	@ (80032d8 <HAL_SPI_MspInit+0x1bc>)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 8003256:	4b22      	ldr	r3, [pc, #136]	@ (80032e0 <HAL_SPI_MspInit+0x1c4>)
 8003258:	4a22      	ldr	r2, [pc, #136]	@ (80032e4 <HAL_SPI_MspInit+0x1c8>)
 800325a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800325c:	4b20      	ldr	r3, [pc, #128]	@ (80032e0 <HAL_SPI_MspInit+0x1c4>)
 800325e:	2226      	movs	r2, #38	@ 0x26
 8003260:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003262:	4b1f      	ldr	r3, [pc, #124]	@ (80032e0 <HAL_SPI_MspInit+0x1c4>)
 8003264:	2240      	movs	r2, #64	@ 0x40
 8003266:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003268:	4b1d      	ldr	r3, [pc, #116]	@ (80032e0 <HAL_SPI_MspInit+0x1c4>)
 800326a:	2200      	movs	r2, #0
 800326c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800326e:	4b1c      	ldr	r3, [pc, #112]	@ (80032e0 <HAL_SPI_MspInit+0x1c4>)
 8003270:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003274:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003276:	4b1a      	ldr	r3, [pc, #104]	@ (80032e0 <HAL_SPI_MspInit+0x1c4>)
 8003278:	2200      	movs	r2, #0
 800327a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800327c:	4b18      	ldr	r3, [pc, #96]	@ (80032e0 <HAL_SPI_MspInit+0x1c4>)
 800327e:	2200      	movs	r2, #0
 8003280:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003282:	4b17      	ldr	r3, [pc, #92]	@ (80032e0 <HAL_SPI_MspInit+0x1c4>)
 8003284:	2200      	movs	r2, #0
 8003286:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003288:	4b15      	ldr	r3, [pc, #84]	@ (80032e0 <HAL_SPI_MspInit+0x1c4>)
 800328a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800328e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003290:	4b13      	ldr	r3, [pc, #76]	@ (80032e0 <HAL_SPI_MspInit+0x1c4>)
 8003292:	2200      	movs	r2, #0
 8003294:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003296:	4812      	ldr	r0, [pc, #72]	@ (80032e0 <HAL_SPI_MspInit+0x1c4>)
 8003298:	f000 fe78 	bl	8003f8c <HAL_DMA_Init>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_SPI_MspInit+0x18a>
    {
      Error_Handler();
 80032a2:	f7ff fedb 	bl	800305c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a0d      	ldr	r2, [pc, #52]	@ (80032e0 <HAL_SPI_MspInit+0x1c4>)
 80032aa:	679a      	str	r2, [r3, #120]	@ 0x78
 80032ac:	4a0c      	ldr	r2, [pc, #48]	@ (80032e0 <HAL_SPI_MspInit+0x1c4>)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80032b2:	2200      	movs	r2, #0
 80032b4:	2100      	movs	r1, #0
 80032b6:	2023      	movs	r0, #35	@ 0x23
 80032b8:	f000 fdab 	bl	8003e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80032bc:	2023      	movs	r0, #35	@ 0x23
 80032be:	f000 fdc2 	bl	8003e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80032c2:	bf00      	nop
 80032c4:	37e0      	adds	r7, #224	@ 0xe0
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40013000 	.word	0x40013000
 80032d0:	58024400 	.word	0x58024400
 80032d4:	58020400 	.word	0x58020400
 80032d8:	240002e0 	.word	0x240002e0
 80032dc:	40020010 	.word	0x40020010
 80032e0:	24000358 	.word	0x24000358
 80032e4:	40020028 	.word	0x40020028

080032e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003318 <HAL_MspInit+0x30>)
 80032f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80032f4:	4a08      	ldr	r2, [pc, #32]	@ (8003318 <HAL_MspInit+0x30>)
 80032f6:	f043 0302 	orr.w	r3, r3, #2
 80032fa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80032fe:	4b06      	ldr	r3, [pc, #24]	@ (8003318 <HAL_MspInit+0x30>)
 8003300:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	607b      	str	r3, [r7, #4]
 800330a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	58024400 	.word	0x58024400

0800331c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003320:	bf00      	nop
 8003322:	e7fd      	b.n	8003320 <NMI_Handler+0x4>

08003324 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003328:	bf00      	nop
 800332a:	e7fd      	b.n	8003328 <HardFault_Handler+0x4>

0800332c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003330:	bf00      	nop
 8003332:	e7fd      	b.n	8003330 <MemManage_Handler+0x4>

08003334 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003338:	bf00      	nop
 800333a:	e7fd      	b.n	8003338 <BusFault_Handler+0x4>

0800333c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003340:	bf00      	nop
 8003342:	e7fd      	b.n	8003340 <UsageFault_Handler+0x4>

08003344 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003348:	bf00      	nop
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003352:	b480      	push	{r7}
 8003354:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003356:	bf00      	nop
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003364:	bf00      	nop
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	HAL_SYSTICK_Callback();
 8003372:	f00a fead 	bl	800e0d0 <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003376:	f000 fc0b 	bl	8003b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003384:	4802      	ldr	r0, [pc, #8]	@ (8003390 <DMA1_Stream0_IRQHandler+0x10>)
 8003386:	f002 f927 	bl	80055d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800338a:	bf00      	nop
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	240002e0 	.word	0x240002e0

08003394 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003398:	4802      	ldr	r0, [pc, #8]	@ (80033a4 <DMA1_Stream1_IRQHandler+0x10>)
 800339a:	f002 f91d 	bl	80055d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800339e:	bf00      	nop
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	24000358 	.word	0x24000358

080033a8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80033ac:	4802      	ldr	r0, [pc, #8]	@ (80033b8 <DMA1_Stream2_IRQHandler+0x10>)
 80033ae:	f002 f913 	bl	80055d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80033b2:	bf00      	nop
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	24000500 	.word	0x24000500

080033bc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80033c0:	4802      	ldr	r0, [pc, #8]	@ (80033cc <DMA1_Stream3_IRQHandler+0x10>)
 80033c2:	f002 f909 	bl	80055d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	24000578 	.word	0x24000578

080033d0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80033d4:	4802      	ldr	r0, [pc, #8]	@ (80033e0 <SPI1_IRQHandler+0x10>)
 80033d6:	f007 f86d 	bl	800a4b4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80033da:	bf00      	nop
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	24000258 	.word	0x24000258

080033e4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80033e8:	4802      	ldr	r0, [pc, #8]	@ (80033f4 <USART3_IRQHandler+0x10>)
 80033ea:	f008 fad9 	bl	800b9a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	2400046c 	.word	0x2400046c

080033f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S50MV85I_IRQ_Pin);
 80033fc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003400:	f003 fde1 	bl	8006fc6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003404:	bf00      	nop
 8003406:	bd80      	pop	{r7, pc}

08003408 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800340c:	4802      	ldr	r0, [pc, #8]	@ (8003418 <TIM6_DAC_IRQHandler+0x10>)
 800340e:	f007 fd90 	bl	800af32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003412:	bf00      	nop
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	24000420 	.word	0x24000420

0800341c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003428:	2300      	movs	r3, #0
 800342a:	617b      	str	r3, [r7, #20]
 800342c:	e00a      	b.n	8003444 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800342e:	f3af 8000 	nop.w
 8003432:	4601      	mov	r1, r0
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	60ba      	str	r2, [r7, #8]
 800343a:	b2ca      	uxtb	r2, r1
 800343c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	3301      	adds	r3, #1
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	429a      	cmp	r2, r3
 800344a:	dbf0      	blt.n	800342e <_read+0x12>
  }

  return len;
 800344c:	687b      	ldr	r3, [r7, #4]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b086      	sub	sp, #24
 800345a:	af00      	add	r7, sp, #0
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003462:	2300      	movs	r3, #0
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	e009      	b.n	800347c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	1c5a      	adds	r2, r3, #1
 800346c:	60ba      	str	r2, [r7, #8]
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	3301      	adds	r3, #1
 800347a:	617b      	str	r3, [r7, #20]
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	429a      	cmp	r2, r3
 8003482:	dbf1      	blt.n	8003468 <_write+0x12>
  }
  return len;
 8003484:	687b      	ldr	r3, [r7, #4]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <_close>:

int _close(int file)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003496:	f04f 33ff 	mov.w	r3, #4294967295
}
 800349a:	4618      	mov	r0, r3
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034b6:	605a      	str	r2, [r3, #4]
  return 0;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <_isatty>:

int _isatty(int file)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034ce:	2301      	movs	r3, #1
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3714      	adds	r7, #20
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
	...

080034f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003500:	4a14      	ldr	r2, [pc, #80]	@ (8003554 <_sbrk+0x5c>)
 8003502:	4b15      	ldr	r3, [pc, #84]	@ (8003558 <_sbrk+0x60>)
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800350c:	4b13      	ldr	r3, [pc, #76]	@ (800355c <_sbrk+0x64>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d102      	bne.n	800351a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003514:	4b11      	ldr	r3, [pc, #68]	@ (800355c <_sbrk+0x64>)
 8003516:	4a12      	ldr	r2, [pc, #72]	@ (8003560 <_sbrk+0x68>)
 8003518:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800351a:	4b10      	ldr	r3, [pc, #64]	@ (800355c <_sbrk+0x64>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4413      	add	r3, r2
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	429a      	cmp	r2, r3
 8003526:	d207      	bcs.n	8003538 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003528:	f020 f9be 	bl	80238a8 <__errno>
 800352c:	4603      	mov	r3, r0
 800352e:	220c      	movs	r2, #12
 8003530:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003532:	f04f 33ff 	mov.w	r3, #4294967295
 8003536:	e009      	b.n	800354c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003538:	4b08      	ldr	r3, [pc, #32]	@ (800355c <_sbrk+0x64>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800353e:	4b07      	ldr	r3, [pc, #28]	@ (800355c <_sbrk+0x64>)
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4413      	add	r3, r2
 8003546:	4a05      	ldr	r2, [pc, #20]	@ (800355c <_sbrk+0x64>)
 8003548:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800354a:	68fb      	ldr	r3, [r7, #12]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3718      	adds	r7, #24
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	24050000 	.word	0x24050000
 8003558:	00005000 	.word	0x00005000
 800355c:	240003d0 	.word	0x240003d0
 8003560:	24000b98 	.word	0x24000b98

08003564 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003568:	4b32      	ldr	r3, [pc, #200]	@ (8003634 <SystemInit+0xd0>)
 800356a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800356e:	4a31      	ldr	r2, [pc, #196]	@ (8003634 <SystemInit+0xd0>)
 8003570:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003574:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003578:	4b2f      	ldr	r3, [pc, #188]	@ (8003638 <SystemInit+0xd4>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 030f 	and.w	r3, r3, #15
 8003580:	2b06      	cmp	r3, #6
 8003582:	d807      	bhi.n	8003594 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003584:	4b2c      	ldr	r3, [pc, #176]	@ (8003638 <SystemInit+0xd4>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f023 030f 	bic.w	r3, r3, #15
 800358c:	4a2a      	ldr	r2, [pc, #168]	@ (8003638 <SystemInit+0xd4>)
 800358e:	f043 0307 	orr.w	r3, r3, #7
 8003592:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003594:	4b29      	ldr	r3, [pc, #164]	@ (800363c <SystemInit+0xd8>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a28      	ldr	r2, [pc, #160]	@ (800363c <SystemInit+0xd8>)
 800359a:	f043 0301 	orr.w	r3, r3, #1
 800359e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80035a0:	4b26      	ldr	r3, [pc, #152]	@ (800363c <SystemInit+0xd8>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80035a6:	4b25      	ldr	r3, [pc, #148]	@ (800363c <SystemInit+0xd8>)
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	4924      	ldr	r1, [pc, #144]	@ (800363c <SystemInit+0xd8>)
 80035ac:	4b24      	ldr	r3, [pc, #144]	@ (8003640 <SystemInit+0xdc>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80035b2:	4b21      	ldr	r3, [pc, #132]	@ (8003638 <SystemInit+0xd4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d007      	beq.n	80035ce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80035be:	4b1e      	ldr	r3, [pc, #120]	@ (8003638 <SystemInit+0xd4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f023 030f 	bic.w	r3, r3, #15
 80035c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003638 <SystemInit+0xd4>)
 80035c8:	f043 0307 	orr.w	r3, r3, #7
 80035cc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80035ce:	4b1b      	ldr	r3, [pc, #108]	@ (800363c <SystemInit+0xd8>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80035d4:	4b19      	ldr	r3, [pc, #100]	@ (800363c <SystemInit+0xd8>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80035da:	4b18      	ldr	r3, [pc, #96]	@ (800363c <SystemInit+0xd8>)
 80035dc:	2200      	movs	r2, #0
 80035de:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80035e0:	4b16      	ldr	r3, [pc, #88]	@ (800363c <SystemInit+0xd8>)
 80035e2:	4a18      	ldr	r2, [pc, #96]	@ (8003644 <SystemInit+0xe0>)
 80035e4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80035e6:	4b15      	ldr	r3, [pc, #84]	@ (800363c <SystemInit+0xd8>)
 80035e8:	4a17      	ldr	r2, [pc, #92]	@ (8003648 <SystemInit+0xe4>)
 80035ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80035ec:	4b13      	ldr	r3, [pc, #76]	@ (800363c <SystemInit+0xd8>)
 80035ee:	4a17      	ldr	r2, [pc, #92]	@ (800364c <SystemInit+0xe8>)
 80035f0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80035f2:	4b12      	ldr	r3, [pc, #72]	@ (800363c <SystemInit+0xd8>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80035f8:	4b10      	ldr	r3, [pc, #64]	@ (800363c <SystemInit+0xd8>)
 80035fa:	4a14      	ldr	r2, [pc, #80]	@ (800364c <SystemInit+0xe8>)
 80035fc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80035fe:	4b0f      	ldr	r3, [pc, #60]	@ (800363c <SystemInit+0xd8>)
 8003600:	2200      	movs	r2, #0
 8003602:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003604:	4b0d      	ldr	r3, [pc, #52]	@ (800363c <SystemInit+0xd8>)
 8003606:	4a11      	ldr	r2, [pc, #68]	@ (800364c <SystemInit+0xe8>)
 8003608:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800360a:	4b0c      	ldr	r3, [pc, #48]	@ (800363c <SystemInit+0xd8>)
 800360c:	2200      	movs	r2, #0
 800360e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003610:	4b0a      	ldr	r3, [pc, #40]	@ (800363c <SystemInit+0xd8>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a09      	ldr	r2, [pc, #36]	@ (800363c <SystemInit+0xd8>)
 8003616:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800361a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800361c:	4b07      	ldr	r3, [pc, #28]	@ (800363c <SystemInit+0xd8>)
 800361e:	2200      	movs	r2, #0
 8003620:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003622:	4b0b      	ldr	r3, [pc, #44]	@ (8003650 <SystemInit+0xec>)
 8003624:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003628:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800362a:	bf00      	nop
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	e000ed00 	.word	0xe000ed00
 8003638:	52002000 	.word	0x52002000
 800363c:	58024400 	.word	0x58024400
 8003640:	eaf6ed7f 	.word	0xeaf6ed7f
 8003644:	02020200 	.word	0x02020200
 8003648:	01ff0000 	.word	0x01ff0000
 800364c:	01010280 	.word	0x01010280
 8003650:	52004000 	.word	0x52004000

08003654 <MX_TIM5_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b088      	sub	sp, #32
 8003658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800365a:	f107 0310 	add.w	r3, r7, #16
 800365e:	2200      	movs	r2, #0
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	605a      	str	r2, [r3, #4]
 8003664:	609a      	str	r2, [r3, #8]
 8003666:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003668:	1d3b      	adds	r3, r7, #4
 800366a:	2200      	movs	r2, #0
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	605a      	str	r2, [r3, #4]
 8003670:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003672:	4b21      	ldr	r3, [pc, #132]	@ (80036f8 <MX_TIM5_Init+0xa4>)
 8003674:	4a21      	ldr	r2, [pc, #132]	@ (80036fc <MX_TIM5_Init+0xa8>)
 8003676:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = (TIM5_BUS_CLK / 1000000) - 1;
 8003678:	f004 fc34 	bl	8007ee4 <HAL_RCC_GetPCLK1Freq>
 800367c:	4603      	mov	r3, r0
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	4a1f      	ldr	r2, [pc, #124]	@ (8003700 <MX_TIM5_Init+0xac>)
 8003682:	fba2 2303 	umull	r2, r3, r2, r3
 8003686:	0c9b      	lsrs	r3, r3, #18
 8003688:	3b01      	subs	r3, #1
 800368a:	4a1b      	ldr	r2, [pc, #108]	@ (80036f8 <MX_TIM5_Init+0xa4>)
 800368c:	6053      	str	r3, [r2, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800368e:	4b1a      	ldr	r3, [pc, #104]	@ (80036f8 <MX_TIM5_Init+0xa4>)
 8003690:	2200      	movs	r2, #0
 8003692:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003694:	4b18      	ldr	r3, [pc, #96]	@ (80036f8 <MX_TIM5_Init+0xa4>)
 8003696:	f04f 32ff 	mov.w	r2, #4294967295
 800369a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800369c:	4b16      	ldr	r3, [pc, #88]	@ (80036f8 <MX_TIM5_Init+0xa4>)
 800369e:	2200      	movs	r2, #0
 80036a0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036a2:	4b15      	ldr	r3, [pc, #84]	@ (80036f8 <MX_TIM5_Init+0xa4>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80036a8:	4813      	ldr	r0, [pc, #76]	@ (80036f8 <MX_TIM5_Init+0xa4>)
 80036aa:	f007 fab8 	bl	800ac1e <HAL_TIM_Base_Init>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 80036b4:	f7ff fcd2 	bl	800305c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80036be:	f107 0310 	add.w	r3, r7, #16
 80036c2:	4619      	mov	r1, r3
 80036c4:	480c      	ldr	r0, [pc, #48]	@ (80036f8 <MX_TIM5_Init+0xa4>)
 80036c6:	f007 fd63 	bl	800b190 <HAL_TIM_ConfigClockSource>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 80036d0:	f7ff fcc4 	bl	800305c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80036d4:	2320      	movs	r3, #32
 80036d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036d8:	2300      	movs	r3, #0
 80036da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80036dc:	1d3b      	adds	r3, r7, #4
 80036de:	4619      	mov	r1, r3
 80036e0:	4805      	ldr	r0, [pc, #20]	@ (80036f8 <MX_TIM5_Init+0xa4>)
 80036e2:	f007 ffc5 	bl	800b670 <HAL_TIMEx_MasterConfigSynchronization>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80036ec:	f7ff fcb6 	bl	800305c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80036f0:	bf00      	nop
 80036f2:	3720      	adds	r7, #32
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	240003d4 	.word	0x240003d4
 80036fc:	40000c00 	.word	0x40000c00
 8003700:	431bde83 	.word	0x431bde83

08003704 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800370a:	1d3b      	adds	r3, r7, #4
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	605a      	str	r2, [r3, #4]
 8003712:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003714:	4b18      	ldr	r3, [pc, #96]	@ (8003778 <MX_TIM6_Init+0x74>)
 8003716:	4a19      	ldr	r2, [pc, #100]	@ (800377c <MX_TIM6_Init+0x78>)
 8003718:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = (TIM6_BUS_CLK / 1000000) - 1;
 800371a:	f004 fbe3 	bl	8007ee4 <HAL_RCC_GetPCLK1Freq>
 800371e:	4603      	mov	r3, r0
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	4a17      	ldr	r2, [pc, #92]	@ (8003780 <MX_TIM6_Init+0x7c>)
 8003724:	fba2 2303 	umull	r2, r3, r2, r3
 8003728:	0c9b      	lsrs	r3, r3, #18
 800372a:	3b01      	subs	r3, #1
 800372c:	4a12      	ldr	r2, [pc, #72]	@ (8003778 <MX_TIM6_Init+0x74>)
 800372e:	6053      	str	r3, [r2, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003730:	4b11      	ldr	r3, [pc, #68]	@ (8003778 <MX_TIM6_Init+0x74>)
 8003732:	2200      	movs	r2, #0
 8003734:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8003736:	4b10      	ldr	r3, [pc, #64]	@ (8003778 <MX_TIM6_Init+0x74>)
 8003738:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800373c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800373e:	4b0e      	ldr	r3, [pc, #56]	@ (8003778 <MX_TIM6_Init+0x74>)
 8003740:	2200      	movs	r2, #0
 8003742:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003744:	480c      	ldr	r0, [pc, #48]	@ (8003778 <MX_TIM6_Init+0x74>)
 8003746:	f007 fa6a 	bl	800ac1e <HAL_TIM_Base_Init>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <MX_TIM6_Init+0x50>
  {
    Error_Handler();
 8003750:	f7ff fc84 	bl	800305c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8003754:	2310      	movs	r3, #16
 8003756:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003758:	2300      	movs	r3, #0
 800375a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800375c:	1d3b      	adds	r3, r7, #4
 800375e:	4619      	mov	r1, r3
 8003760:	4805      	ldr	r0, [pc, #20]	@ (8003778 <MX_TIM6_Init+0x74>)
 8003762:	f007 ff85 	bl	800b670 <HAL_TIMEx_MasterConfigSynchronization>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <MX_TIM6_Init+0x6c>
  {
    Error_Handler();
 800376c:	f7ff fc76 	bl	800305c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003770:	bf00      	nop
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	24000420 	.word	0x24000420
 800377c:	40001000 	.word	0x40001000
 8003780:	431bde83 	.word	0x431bde83

08003784 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a19      	ldr	r2, [pc, #100]	@ (80037f8 <HAL_TIM_Base_MspInit+0x74>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d10f      	bne.n	80037b6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003796:	4b19      	ldr	r3, [pc, #100]	@ (80037fc <HAL_TIM_Base_MspInit+0x78>)
 8003798:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800379c:	4a17      	ldr	r2, [pc, #92]	@ (80037fc <HAL_TIM_Base_MspInit+0x78>)
 800379e:	f043 0308 	orr.w	r3, r3, #8
 80037a2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80037a6:	4b15      	ldr	r3, [pc, #84]	@ (80037fc <HAL_TIM_Base_MspInit+0x78>)
 80037a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80037ac:	f003 0308 	and.w	r3, r3, #8
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80037b4:	e01b      	b.n	80037ee <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM6)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a11      	ldr	r2, [pc, #68]	@ (8003800 <HAL_TIM_Base_MspInit+0x7c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d116      	bne.n	80037ee <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80037c0:	4b0e      	ldr	r3, [pc, #56]	@ (80037fc <HAL_TIM_Base_MspInit+0x78>)
 80037c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80037c6:	4a0d      	ldr	r2, [pc, #52]	@ (80037fc <HAL_TIM_Base_MspInit+0x78>)
 80037c8:	f043 0310 	orr.w	r3, r3, #16
 80037cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80037d0:	4b0a      	ldr	r3, [pc, #40]	@ (80037fc <HAL_TIM_Base_MspInit+0x78>)
 80037d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80037d6:	f003 0310 	and.w	r3, r3, #16
 80037da:	60bb      	str	r3, [r7, #8]
 80037dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80037de:	2200      	movs	r2, #0
 80037e0:	2100      	movs	r1, #0
 80037e2:	2036      	movs	r0, #54	@ 0x36
 80037e4:	f000 fb15 	bl	8003e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80037e8:	2036      	movs	r0, #54	@ 0x36
 80037ea:	f000 fb2c 	bl	8003e46 <HAL_NVIC_EnableIRQ>
}
 80037ee:	bf00      	nop
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40000c00 	.word	0x40000c00
 80037fc:	58024400 	.word	0x58024400
 8003800:	40001000 	.word	0x40001000

08003804 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003808:	4b26      	ldr	r3, [pc, #152]	@ (80038a4 <MX_USART3_UART_Init+0xa0>)
 800380a:	4a27      	ldr	r2, [pc, #156]	@ (80038a8 <MX_USART3_UART_Init+0xa4>)
 800380c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800380e:	4b25      	ldr	r3, [pc, #148]	@ (80038a4 <MX_USART3_UART_Init+0xa0>)
 8003810:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003814:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003816:	4b23      	ldr	r3, [pc, #140]	@ (80038a4 <MX_USART3_UART_Init+0xa0>)
 8003818:	2200      	movs	r2, #0
 800381a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800381c:	4b21      	ldr	r3, [pc, #132]	@ (80038a4 <MX_USART3_UART_Init+0xa0>)
 800381e:	2200      	movs	r2, #0
 8003820:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003822:	4b20      	ldr	r3, [pc, #128]	@ (80038a4 <MX_USART3_UART_Init+0xa0>)
 8003824:	2200      	movs	r2, #0
 8003826:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003828:	4b1e      	ldr	r3, [pc, #120]	@ (80038a4 <MX_USART3_UART_Init+0xa0>)
 800382a:	220c      	movs	r2, #12
 800382c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800382e:	4b1d      	ldr	r3, [pc, #116]	@ (80038a4 <MX_USART3_UART_Init+0xa0>)
 8003830:	2200      	movs	r2, #0
 8003832:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003834:	4b1b      	ldr	r3, [pc, #108]	@ (80038a4 <MX_USART3_UART_Init+0xa0>)
 8003836:	2200      	movs	r2, #0
 8003838:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800383a:	4b1a      	ldr	r3, [pc, #104]	@ (80038a4 <MX_USART3_UART_Init+0xa0>)
 800383c:	2200      	movs	r2, #0
 800383e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003840:	4b18      	ldr	r3, [pc, #96]	@ (80038a4 <MX_USART3_UART_Init+0xa0>)
 8003842:	2200      	movs	r2, #0
 8003844:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8003846:	4b17      	ldr	r3, [pc, #92]	@ (80038a4 <MX_USART3_UART_Init+0xa0>)
 8003848:	2230      	movs	r2, #48	@ 0x30
 800384a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800384c:	4b15      	ldr	r3, [pc, #84]	@ (80038a4 <MX_USART3_UART_Init+0xa0>)
 800384e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003852:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart3.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8003854:	4b13      	ldr	r3, [pc, #76]	@ (80038a4 <MX_USART3_UART_Init+0xa0>)
 8003856:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800385a:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800385c:	4811      	ldr	r0, [pc, #68]	@ (80038a4 <MX_USART3_UART_Init+0xa0>)
 800385e:	f007 ffc1 	bl	800b7e4 <HAL_UART_Init>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8003868:	f7ff fbf8 	bl	800305c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800386c:	2100      	movs	r1, #0
 800386e:	480d      	ldr	r0, [pc, #52]	@ (80038a4 <MX_USART3_UART_Init+0xa0>)
 8003870:	f009 fd94 	bl	800d39c <HAL_UARTEx_SetTxFifoThreshold>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 800387a:	f7ff fbef 	bl	800305c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800387e:	2100      	movs	r1, #0
 8003880:	4808      	ldr	r0, [pc, #32]	@ (80038a4 <MX_USART3_UART_Init+0xa0>)
 8003882:	f009 fdc9 	bl	800d418 <HAL_UARTEx_SetRxFifoThreshold>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800388c:	f7ff fbe6 	bl	800305c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003890:	4804      	ldr	r0, [pc, #16]	@ (80038a4 <MX_USART3_UART_Init+0xa0>)
 8003892:	f009 fd4a 	bl	800d32a <HAL_UARTEx_DisableFifoMode>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <MX_USART3_UART_Init+0x9c>
  {
    Error_Handler();
 800389c:	f7ff fbde 	bl	800305c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80038a0:	bf00      	nop
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	2400046c 	.word	0x2400046c
 80038a8:	40004800 	.word	0x40004800

080038ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b0b8      	sub	sp, #224	@ 0xe0
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	605a      	str	r2, [r3, #4]
 80038be:	609a      	str	r2, [r3, #8]
 80038c0:	60da      	str	r2, [r3, #12]
 80038c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038c4:	f107 0310 	add.w	r3, r7, #16
 80038c8:	22b8      	movs	r2, #184	@ 0xb8
 80038ca:	2100      	movs	r1, #0
 80038cc:	4618      	mov	r0, r3
 80038ce:	f01f ff88 	bl	80237e2 <memset>
  if(uartHandle->Instance==USART3)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a59      	ldr	r2, [pc, #356]	@ (8003a3c <HAL_UART_MspInit+0x190>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	f040 80aa 	bne.w	8003a32 <HAL_UART_MspInit+0x186>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80038de:	f04f 0202 	mov.w	r2, #2
 80038e2:	f04f 0300 	mov.w	r3, #0
 80038e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80038ea:	2300      	movs	r3, #0
 80038ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038f0:	f107 0310 	add.w	r3, r7, #16
 80038f4:	4618      	mov	r0, r3
 80038f6:	f004 fb21 	bl	8007f3c <HAL_RCCEx_PeriphCLKConfig>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8003900:	f7ff fbac 	bl	800305c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003904:	4b4e      	ldr	r3, [pc, #312]	@ (8003a40 <HAL_UART_MspInit+0x194>)
 8003906:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800390a:	4a4d      	ldr	r2, [pc, #308]	@ (8003a40 <HAL_UART_MspInit+0x194>)
 800390c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003910:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003914:	4b4a      	ldr	r3, [pc, #296]	@ (8003a40 <HAL_UART_MspInit+0x194>)
 8003916:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800391a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003922:	4b47      	ldr	r3, [pc, #284]	@ (8003a40 <HAL_UART_MspInit+0x194>)
 8003924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003928:	4a45      	ldr	r2, [pc, #276]	@ (8003a40 <HAL_UART_MspInit+0x194>)
 800392a:	f043 0308 	orr.w	r3, r3, #8
 800392e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003932:	4b43      	ldr	r3, [pc, #268]	@ (8003a40 <HAL_UART_MspInit+0x194>)
 8003934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	60bb      	str	r3, [r7, #8]
 800393e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003940:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003944:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003948:	2302      	movs	r3, #2
 800394a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394e:	2300      	movs	r3, #0
 8003950:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003954:	2300      	movs	r3, #0
 8003956:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800395a:	2307      	movs	r3, #7
 800395c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003960:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003964:	4619      	mov	r1, r3
 8003966:	4837      	ldr	r0, [pc, #220]	@ (8003a44 <HAL_UART_MspInit+0x198>)
 8003968:	f003 f954 	bl	8006c14 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream2;
 800396c:	4b36      	ldr	r3, [pc, #216]	@ (8003a48 <HAL_UART_MspInit+0x19c>)
 800396e:	4a37      	ldr	r2, [pc, #220]	@ (8003a4c <HAL_UART_MspInit+0x1a0>)
 8003970:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003972:	4b35      	ldr	r3, [pc, #212]	@ (8003a48 <HAL_UART_MspInit+0x19c>)
 8003974:	222d      	movs	r2, #45	@ 0x2d
 8003976:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003978:	4b33      	ldr	r3, [pc, #204]	@ (8003a48 <HAL_UART_MspInit+0x19c>)
 800397a:	2200      	movs	r2, #0
 800397c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800397e:	4b32      	ldr	r3, [pc, #200]	@ (8003a48 <HAL_UART_MspInit+0x19c>)
 8003980:	2200      	movs	r2, #0
 8003982:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003984:	4b30      	ldr	r3, [pc, #192]	@ (8003a48 <HAL_UART_MspInit+0x19c>)
 8003986:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800398a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800398c:	4b2e      	ldr	r3, [pc, #184]	@ (8003a48 <HAL_UART_MspInit+0x19c>)
 800398e:	2200      	movs	r2, #0
 8003990:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003992:	4b2d      	ldr	r3, [pc, #180]	@ (8003a48 <HAL_UART_MspInit+0x19c>)
 8003994:	2200      	movs	r2, #0
 8003996:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003998:	4b2b      	ldr	r3, [pc, #172]	@ (8003a48 <HAL_UART_MspInit+0x19c>)
 800399a:	2200      	movs	r2, #0
 800399c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800399e:	4b2a      	ldr	r3, [pc, #168]	@ (8003a48 <HAL_UART_MspInit+0x19c>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039a4:	4b28      	ldr	r3, [pc, #160]	@ (8003a48 <HAL_UART_MspInit+0x19c>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80039aa:	4827      	ldr	r0, [pc, #156]	@ (8003a48 <HAL_UART_MspInit+0x19c>)
 80039ac:	f000 faee 	bl	8003f8c <HAL_DMA_Init>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 80039b6:	f7ff fb51 	bl	800305c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a22      	ldr	r2, [pc, #136]	@ (8003a48 <HAL_UART_MspInit+0x19c>)
 80039be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80039c2:	4a21      	ldr	r2, [pc, #132]	@ (8003a48 <HAL_UART_MspInit+0x19c>)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80039c8:	4b21      	ldr	r3, [pc, #132]	@ (8003a50 <HAL_UART_MspInit+0x1a4>)
 80039ca:	4a22      	ldr	r2, [pc, #136]	@ (8003a54 <HAL_UART_MspInit+0x1a8>)
 80039cc:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80039ce:	4b20      	ldr	r3, [pc, #128]	@ (8003a50 <HAL_UART_MspInit+0x1a4>)
 80039d0:	222e      	movs	r2, #46	@ 0x2e
 80039d2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039d4:	4b1e      	ldr	r3, [pc, #120]	@ (8003a50 <HAL_UART_MspInit+0x1a4>)
 80039d6:	2240      	movs	r2, #64	@ 0x40
 80039d8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039da:	4b1d      	ldr	r3, [pc, #116]	@ (8003a50 <HAL_UART_MspInit+0x1a4>)
 80039dc:	2200      	movs	r2, #0
 80039de:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80039e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003a50 <HAL_UART_MspInit+0x1a4>)
 80039e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039e6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039e8:	4b19      	ldr	r3, [pc, #100]	@ (8003a50 <HAL_UART_MspInit+0x1a4>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039ee:	4b18      	ldr	r3, [pc, #96]	@ (8003a50 <HAL_UART_MspInit+0x1a4>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80039f4:	4b16      	ldr	r3, [pc, #88]	@ (8003a50 <HAL_UART_MspInit+0x1a4>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80039fa:	4b15      	ldr	r3, [pc, #84]	@ (8003a50 <HAL_UART_MspInit+0x1a4>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a00:	4b13      	ldr	r3, [pc, #76]	@ (8003a50 <HAL_UART_MspInit+0x1a4>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003a06:	4812      	ldr	r0, [pc, #72]	@ (8003a50 <HAL_UART_MspInit+0x1a4>)
 8003a08:	f000 fac0 	bl	8003f8c <HAL_DMA_Init>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8003a12:	f7ff fb23 	bl	800305c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a0d      	ldr	r2, [pc, #52]	@ (8003a50 <HAL_UART_MspInit+0x1a4>)
 8003a1a:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003a1c:	4a0c      	ldr	r2, [pc, #48]	@ (8003a50 <HAL_UART_MspInit+0x1a4>)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003a22:	2200      	movs	r2, #0
 8003a24:	2100      	movs	r1, #0
 8003a26:	2027      	movs	r0, #39	@ 0x27
 8003a28:	f000 f9f3 	bl	8003e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003a2c:	2027      	movs	r0, #39	@ 0x27
 8003a2e:	f000 fa0a 	bl	8003e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003a32:	bf00      	nop
 8003a34:	37e0      	adds	r7, #224	@ 0xe0
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40004800 	.word	0x40004800
 8003a40:	58024400 	.word	0x58024400
 8003a44:	58020c00 	.word	0x58020c00
 8003a48:	24000500 	.word	0x24000500
 8003a4c:	40020040 	.word	0x40020040
 8003a50:	24000578 	.word	0x24000578
 8003a54:	40020058 	.word	0x40020058

08003a58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003a58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003a90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a5c:	f7ff fd82 	bl	8003564 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a60:	480c      	ldr	r0, [pc, #48]	@ (8003a94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a62:	490d      	ldr	r1, [pc, #52]	@ (8003a98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a64:	4a0d      	ldr	r2, [pc, #52]	@ (8003a9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a68:	e002      	b.n	8003a70 <LoopCopyDataInit>

08003a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a6e:	3304      	adds	r3, #4

08003a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a74:	d3f9      	bcc.n	8003a6a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a76:	4a0a      	ldr	r2, [pc, #40]	@ (8003aa0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a78:	4c0a      	ldr	r4, [pc, #40]	@ (8003aa4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a7c:	e001      	b.n	8003a82 <LoopFillZerobss>

08003a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a80:	3204      	adds	r2, #4

08003a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a84:	d3fb      	bcc.n	8003a7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a86:	f01f ff15 	bl	80238b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a8a:	f7ff fa2b 	bl	8002ee4 <main>
  bx  lr
 8003a8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a90:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003a94:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003a98:	24000238 	.word	0x24000238
  ldr r2, =_sidata
 8003a9c:	0802c644 	.word	0x0802c644
  ldr r2, =_sbss
 8003aa0:	24000238 	.word	0x24000238
  ldr r4, =_ebss
 8003aa4:	24000b94 	.word	0x24000b94

08003aa8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003aa8:	e7fe      	b.n	8003aa8 <ADC3_IRQHandler>
	...

08003aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ab2:	2003      	movs	r0, #3
 8003ab4:	f000 f9a2 	bl	8003dfc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003ab8:	f004 f86a 	bl	8007b90 <HAL_RCC_GetSysClockFreq>
 8003abc:	4602      	mov	r2, r0
 8003abe:	4b15      	ldr	r3, [pc, #84]	@ (8003b14 <HAL_Init+0x68>)
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	0a1b      	lsrs	r3, r3, #8
 8003ac4:	f003 030f 	and.w	r3, r3, #15
 8003ac8:	4913      	ldr	r1, [pc, #76]	@ (8003b18 <HAL_Init+0x6c>)
 8003aca:	5ccb      	ldrb	r3, [r1, r3]
 8003acc:	f003 031f 	and.w	r3, r3, #31
 8003ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8003b14 <HAL_Init+0x68>)
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	4a0e      	ldr	r2, [pc, #56]	@ (8003b18 <HAL_Init+0x6c>)
 8003ae0:	5cd3      	ldrb	r3, [r2, r3]
 8003ae2:	f003 031f 	and.w	r3, r3, #31
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8003aec:	4a0b      	ldr	r2, [pc, #44]	@ (8003b1c <HAL_Init+0x70>)
 8003aee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003af0:	4a0b      	ldr	r2, [pc, #44]	@ (8003b20 <HAL_Init+0x74>)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003af6:	200f      	movs	r0, #15
 8003af8:	f000 f814 	bl	8003b24 <HAL_InitTick>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e002      	b.n	8003b0c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003b06:	f7ff fbef 	bl	80032e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	58024400 	.word	0x58024400
 8003b18:	08027b60 	.word	0x08027b60
 8003b1c:	24000008 	.word	0x24000008
 8003b20:	24000004 	.word	0x24000004

08003b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003b2c:	4b15      	ldr	r3, [pc, #84]	@ (8003b84 <HAL_InitTick+0x60>)
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d101      	bne.n	8003b38 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e021      	b.n	8003b7c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003b38:	4b13      	ldr	r3, [pc, #76]	@ (8003b88 <HAL_InitTick+0x64>)
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	4b11      	ldr	r3, [pc, #68]	@ (8003b84 <HAL_InitTick+0x60>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	4619      	mov	r1, r3
 8003b42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 f987 	bl	8003e62 <HAL_SYSTICK_Config>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e00e      	b.n	8003b7c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b0f      	cmp	r3, #15
 8003b62:	d80a      	bhi.n	8003b7a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b64:	2200      	movs	r2, #0
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	f04f 30ff 	mov.w	r0, #4294967295
 8003b6c:	f000 f951 	bl	8003e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b70:	4a06      	ldr	r2, [pc, #24]	@ (8003b8c <HAL_InitTick+0x68>)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
 8003b78:	e000      	b.n	8003b7c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	24000010 	.word	0x24000010
 8003b88:	24000004 	.word	0x24000004
 8003b8c:	2400000c 	.word	0x2400000c

08003b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b94:	4b06      	ldr	r3, [pc, #24]	@ (8003bb0 <HAL_IncTick+0x20>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	4b06      	ldr	r3, [pc, #24]	@ (8003bb4 <HAL_IncTick+0x24>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	4a04      	ldr	r2, [pc, #16]	@ (8003bb4 <HAL_IncTick+0x24>)
 8003ba2:	6013      	str	r3, [r2, #0]
}
 8003ba4:	bf00      	nop
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	24000010 	.word	0x24000010
 8003bb4:	240005f0 	.word	0x240005f0

08003bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  return uwTick;
 8003bbc:	4b03      	ldr	r3, [pc, #12]	@ (8003bcc <HAL_GetTick+0x14>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	240005f0 	.word	0x240005f0

08003bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bd8:	f7ff ffee 	bl	8003bb8 <HAL_GetTick>
 8003bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be8:	d005      	beq.n	8003bf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bea:	4b0a      	ldr	r3, [pc, #40]	@ (8003c14 <HAL_Delay+0x44>)
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003bf6:	bf00      	nop
 8003bf8:	f7ff ffde 	bl	8003bb8 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d8f7      	bhi.n	8003bf8 <HAL_Delay+0x28>
  {
  }
}
 8003c08:	bf00      	nop
 8003c0a:	bf00      	nop
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	24000010 	.word	0x24000010

08003c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c28:	4b0b      	ldr	r3, [pc, #44]	@ (8003c58 <__NVIC_SetPriorityGrouping+0x40>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c34:	4013      	ands	r3, r2
 8003c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003c40:	4b06      	ldr	r3, [pc, #24]	@ (8003c5c <__NVIC_SetPriorityGrouping+0x44>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c46:	4a04      	ldr	r2, [pc, #16]	@ (8003c58 <__NVIC_SetPriorityGrouping+0x40>)
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	60d3      	str	r3, [r2, #12]
}
 8003c4c:	bf00      	nop
 8003c4e:	3714      	adds	r7, #20
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	e000ed00 	.word	0xe000ed00
 8003c5c:	05fa0000 	.word	0x05fa0000

08003c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c64:	4b04      	ldr	r3, [pc, #16]	@ (8003c78 <__NVIC_GetPriorityGrouping+0x18>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	0a1b      	lsrs	r3, r3, #8
 8003c6a:	f003 0307 	and.w	r3, r3, #7
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	e000ed00 	.word	0xe000ed00

08003c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	db0b      	blt.n	8003ca6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c8e:	88fb      	ldrh	r3, [r7, #6]
 8003c90:	f003 021f 	and.w	r2, r3, #31
 8003c94:	4907      	ldr	r1, [pc, #28]	@ (8003cb4 <__NVIC_EnableIRQ+0x38>)
 8003c96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c9a:	095b      	lsrs	r3, r3, #5
 8003c9c:	2001      	movs	r0, #1
 8003c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	e000e100 	.word	0xe000e100

08003cb8 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003cc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	db0e      	blt.n	8003ce8 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8003cca:	4a0b      	ldr	r2, [pc, #44]	@ (8003cf8 <__NVIC_GetPendingIRQ+0x40>)
 8003ccc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cd0:	095b      	lsrs	r3, r3, #5
 8003cd2:	3340      	adds	r3, #64	@ 0x40
 8003cd4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003cd8:	88fb      	ldrh	r3, [r7, #6]
 8003cda:	f003 031f 	and.w	r3, r3, #31
 8003cde:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	e000      	b.n	8003cea <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8003ce8:	2300      	movs	r3, #0
  }
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	e000e100 	.word	0xe000e100

08003cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	4603      	mov	r3, r0
 8003d04:	6039      	str	r1, [r7, #0]
 8003d06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003d08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	db0a      	blt.n	8003d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	490c      	ldr	r1, [pc, #48]	@ (8003d48 <__NVIC_SetPriority+0x4c>)
 8003d16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d1a:	0112      	lsls	r2, r2, #4
 8003d1c:	b2d2      	uxtb	r2, r2
 8003d1e:	440b      	add	r3, r1
 8003d20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d24:	e00a      	b.n	8003d3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	b2da      	uxtb	r2, r3
 8003d2a:	4908      	ldr	r1, [pc, #32]	@ (8003d4c <__NVIC_SetPriority+0x50>)
 8003d2c:	88fb      	ldrh	r3, [r7, #6]
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	3b04      	subs	r3, #4
 8003d34:	0112      	lsls	r2, r2, #4
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	440b      	add	r3, r1
 8003d3a:	761a      	strb	r2, [r3, #24]
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	e000e100 	.word	0xe000e100
 8003d4c:	e000ed00 	.word	0xe000ed00

08003d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b089      	sub	sp, #36	@ 0x24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	f1c3 0307 	rsb	r3, r3, #7
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	bf28      	it	cs
 8003d6e:	2304      	movcs	r3, #4
 8003d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	3304      	adds	r3, #4
 8003d76:	2b06      	cmp	r3, #6
 8003d78:	d902      	bls.n	8003d80 <NVIC_EncodePriority+0x30>
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	3b03      	subs	r3, #3
 8003d7e:	e000      	b.n	8003d82 <NVIC_EncodePriority+0x32>
 8003d80:	2300      	movs	r3, #0
 8003d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d84:	f04f 32ff 	mov.w	r2, #4294967295
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8e:	43da      	mvns	r2, r3
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	401a      	ands	r2, r3
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d98:	f04f 31ff 	mov.w	r1, #4294967295
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003da2:	43d9      	mvns	r1, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003da8:	4313      	orrs	r3, r2
         );
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3724      	adds	r7, #36	@ 0x24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
	...

08003db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dc8:	d301      	bcc.n	8003dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e00f      	b.n	8003dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dce:	4a0a      	ldr	r2, [pc, #40]	@ (8003df8 <SysTick_Config+0x40>)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dd6:	210f      	movs	r1, #15
 8003dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ddc:	f7ff ff8e 	bl	8003cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003de0:	4b05      	ldr	r3, [pc, #20]	@ (8003df8 <SysTick_Config+0x40>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003de6:	4b04      	ldr	r3, [pc, #16]	@ (8003df8 <SysTick_Config+0x40>)
 8003de8:	2207      	movs	r2, #7
 8003dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	e000e010 	.word	0xe000e010

08003dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7ff ff07 	bl	8003c18 <__NVIC_SetPriorityGrouping>
}
 8003e0a:	bf00      	nop
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b086      	sub	sp, #24
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	4603      	mov	r3, r0
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	607a      	str	r2, [r7, #4]
 8003e1e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e20:	f7ff ff1e 	bl	8003c60 <__NVIC_GetPriorityGrouping>
 8003e24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	68b9      	ldr	r1, [r7, #8]
 8003e2a:	6978      	ldr	r0, [r7, #20]
 8003e2c:	f7ff ff90 	bl	8003d50 <NVIC_EncodePriority>
 8003e30:	4602      	mov	r2, r0
 8003e32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e36:	4611      	mov	r1, r2
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7ff ff5f 	bl	8003cfc <__NVIC_SetPriority>
}
 8003e3e:	bf00      	nop
 8003e40:	3718      	adds	r7, #24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b082      	sub	sp, #8
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff ff11 	bl	8003c7c <__NVIC_EnableIRQ>
}
 8003e5a:	bf00      	nop
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b082      	sub	sp, #8
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7ff ffa4 	bl	8003db8 <SysTick_Config>
 8003e70:	4603      	mov	r3, r0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
	...

08003e7c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003e80:	f3bf 8f5f 	dmb	sy
}
 8003e84:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003e86:	4b07      	ldr	r3, [pc, #28]	@ (8003ea4 <HAL_MPU_Disable+0x28>)
 8003e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8a:	4a06      	ldr	r2, [pc, #24]	@ (8003ea4 <HAL_MPU_Disable+0x28>)
 8003e8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e90:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003e92:	4b05      	ldr	r3, [pc, #20]	@ (8003ea8 <HAL_MPU_Disable+0x2c>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	605a      	str	r2, [r3, #4]
}
 8003e98:	bf00      	nop
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	e000ed00 	.word	0xe000ed00
 8003ea8:	e000ed90 	.word	0xe000ed90

08003eac <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003eb4:	4a0b      	ldr	r2, [pc, #44]	@ (8003ee4 <HAL_MPU_Enable+0x38>)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f043 0301 	orr.w	r3, r3, #1
 8003ebc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8003ee8 <HAL_MPU_Enable+0x3c>)
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec2:	4a09      	ldr	r2, [pc, #36]	@ (8003ee8 <HAL_MPU_Enable+0x3c>)
 8003ec4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ec8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003eca:	f3bf 8f4f 	dsb	sy
}
 8003ece:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003ed0:	f3bf 8f6f 	isb	sy
}
 8003ed4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	e000ed90 	.word	0xe000ed90
 8003ee8:	e000ed00 	.word	0xe000ed00

08003eec <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	785a      	ldrb	r2, [r3, #1]
 8003ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f68 <HAL_MPU_ConfigRegion+0x7c>)
 8003efa:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003efc:	4b1a      	ldr	r3, [pc, #104]	@ (8003f68 <HAL_MPU_ConfigRegion+0x7c>)
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	4a19      	ldr	r2, [pc, #100]	@ (8003f68 <HAL_MPU_ConfigRegion+0x7c>)
 8003f02:	f023 0301 	bic.w	r3, r3, #1
 8003f06:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003f08:	4a17      	ldr	r2, [pc, #92]	@ (8003f68 <HAL_MPU_ConfigRegion+0x7c>)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	7b1b      	ldrb	r3, [r3, #12]
 8003f14:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	7adb      	ldrb	r3, [r3, #11]
 8003f1a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003f1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	7a9b      	ldrb	r3, [r3, #10]
 8003f22:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003f24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	7b5b      	ldrb	r3, [r3, #13]
 8003f2a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003f2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	7b9b      	ldrb	r3, [r3, #14]
 8003f32:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003f34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	7bdb      	ldrb	r3, [r3, #15]
 8003f3a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003f3c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	7a5b      	ldrb	r3, [r3, #9]
 8003f42:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003f44:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	7a1b      	ldrb	r3, [r3, #8]
 8003f4a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003f4c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	7812      	ldrb	r2, [r2, #0]
 8003f52:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003f54:	4a04      	ldr	r2, [pc, #16]	@ (8003f68 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003f56:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003f58:	6113      	str	r3, [r2, #16]
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	e000ed90 	.word	0xe000ed90

08003f6c <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval status  - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	4603      	mov	r3, r0
 8003f74:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 8003f76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff fe9c 	bl	8003cb8 <__NVIC_GetPendingIRQ>
 8003f80:	4603      	mov	r3, r0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
	...

08003f8c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003f94:	f7ff fe10 	bl	8003bb8 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e312      	b.n	80045ca <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a66      	ldr	r2, [pc, #408]	@ (8004144 <HAL_DMA_Init+0x1b8>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d04a      	beq.n	8004044 <HAL_DMA_Init+0xb8>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a65      	ldr	r2, [pc, #404]	@ (8004148 <HAL_DMA_Init+0x1bc>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d045      	beq.n	8004044 <HAL_DMA_Init+0xb8>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a63      	ldr	r2, [pc, #396]	@ (800414c <HAL_DMA_Init+0x1c0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d040      	beq.n	8004044 <HAL_DMA_Init+0xb8>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a62      	ldr	r2, [pc, #392]	@ (8004150 <HAL_DMA_Init+0x1c4>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d03b      	beq.n	8004044 <HAL_DMA_Init+0xb8>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a60      	ldr	r2, [pc, #384]	@ (8004154 <HAL_DMA_Init+0x1c8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d036      	beq.n	8004044 <HAL_DMA_Init+0xb8>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a5f      	ldr	r2, [pc, #380]	@ (8004158 <HAL_DMA_Init+0x1cc>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d031      	beq.n	8004044 <HAL_DMA_Init+0xb8>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a5d      	ldr	r2, [pc, #372]	@ (800415c <HAL_DMA_Init+0x1d0>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d02c      	beq.n	8004044 <HAL_DMA_Init+0xb8>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a5c      	ldr	r2, [pc, #368]	@ (8004160 <HAL_DMA_Init+0x1d4>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d027      	beq.n	8004044 <HAL_DMA_Init+0xb8>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a5a      	ldr	r2, [pc, #360]	@ (8004164 <HAL_DMA_Init+0x1d8>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d022      	beq.n	8004044 <HAL_DMA_Init+0xb8>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a59      	ldr	r2, [pc, #356]	@ (8004168 <HAL_DMA_Init+0x1dc>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d01d      	beq.n	8004044 <HAL_DMA_Init+0xb8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a57      	ldr	r2, [pc, #348]	@ (800416c <HAL_DMA_Init+0x1e0>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d018      	beq.n	8004044 <HAL_DMA_Init+0xb8>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a56      	ldr	r2, [pc, #344]	@ (8004170 <HAL_DMA_Init+0x1e4>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d013      	beq.n	8004044 <HAL_DMA_Init+0xb8>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a54      	ldr	r2, [pc, #336]	@ (8004174 <HAL_DMA_Init+0x1e8>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d00e      	beq.n	8004044 <HAL_DMA_Init+0xb8>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a53      	ldr	r2, [pc, #332]	@ (8004178 <HAL_DMA_Init+0x1ec>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d009      	beq.n	8004044 <HAL_DMA_Init+0xb8>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a51      	ldr	r2, [pc, #324]	@ (800417c <HAL_DMA_Init+0x1f0>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d004      	beq.n	8004044 <HAL_DMA_Init+0xb8>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a50      	ldr	r2, [pc, #320]	@ (8004180 <HAL_DMA_Init+0x1f4>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d101      	bne.n	8004048 <HAL_DMA_Init+0xbc>
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <HAL_DMA_Init+0xbe>
 8004048:	2300      	movs	r3, #0
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 813c 	beq.w	80042c8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a37      	ldr	r2, [pc, #220]	@ (8004144 <HAL_DMA_Init+0x1b8>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d04a      	beq.n	8004100 <HAL_DMA_Init+0x174>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a36      	ldr	r2, [pc, #216]	@ (8004148 <HAL_DMA_Init+0x1bc>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d045      	beq.n	8004100 <HAL_DMA_Init+0x174>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a34      	ldr	r2, [pc, #208]	@ (800414c <HAL_DMA_Init+0x1c0>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d040      	beq.n	8004100 <HAL_DMA_Init+0x174>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a33      	ldr	r2, [pc, #204]	@ (8004150 <HAL_DMA_Init+0x1c4>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d03b      	beq.n	8004100 <HAL_DMA_Init+0x174>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a31      	ldr	r2, [pc, #196]	@ (8004154 <HAL_DMA_Init+0x1c8>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d036      	beq.n	8004100 <HAL_DMA_Init+0x174>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a30      	ldr	r2, [pc, #192]	@ (8004158 <HAL_DMA_Init+0x1cc>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d031      	beq.n	8004100 <HAL_DMA_Init+0x174>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a2e      	ldr	r2, [pc, #184]	@ (800415c <HAL_DMA_Init+0x1d0>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d02c      	beq.n	8004100 <HAL_DMA_Init+0x174>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a2d      	ldr	r2, [pc, #180]	@ (8004160 <HAL_DMA_Init+0x1d4>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d027      	beq.n	8004100 <HAL_DMA_Init+0x174>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a2b      	ldr	r2, [pc, #172]	@ (8004164 <HAL_DMA_Init+0x1d8>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d022      	beq.n	8004100 <HAL_DMA_Init+0x174>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a2a      	ldr	r2, [pc, #168]	@ (8004168 <HAL_DMA_Init+0x1dc>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d01d      	beq.n	8004100 <HAL_DMA_Init+0x174>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a28      	ldr	r2, [pc, #160]	@ (800416c <HAL_DMA_Init+0x1e0>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d018      	beq.n	8004100 <HAL_DMA_Init+0x174>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a27      	ldr	r2, [pc, #156]	@ (8004170 <HAL_DMA_Init+0x1e4>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d013      	beq.n	8004100 <HAL_DMA_Init+0x174>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a25      	ldr	r2, [pc, #148]	@ (8004174 <HAL_DMA_Init+0x1e8>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d00e      	beq.n	8004100 <HAL_DMA_Init+0x174>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a24      	ldr	r2, [pc, #144]	@ (8004178 <HAL_DMA_Init+0x1ec>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d009      	beq.n	8004100 <HAL_DMA_Init+0x174>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a22      	ldr	r2, [pc, #136]	@ (800417c <HAL_DMA_Init+0x1f0>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d004      	beq.n	8004100 <HAL_DMA_Init+0x174>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a21      	ldr	r2, [pc, #132]	@ (8004180 <HAL_DMA_Init+0x1f4>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d108      	bne.n	8004112 <HAL_DMA_Init+0x186>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0201 	bic.w	r2, r2, #1
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	e007      	b.n	8004122 <HAL_DMA_Init+0x196>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0201 	bic.w	r2, r2, #1
 8004120:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004122:	e02f      	b.n	8004184 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004124:	f7ff fd48 	bl	8003bb8 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b05      	cmp	r3, #5
 8004130:	d928      	bls.n	8004184 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2220      	movs	r2, #32
 8004136:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2203      	movs	r2, #3
 800413c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e242      	b.n	80045ca <HAL_DMA_Init+0x63e>
 8004144:	40020010 	.word	0x40020010
 8004148:	40020028 	.word	0x40020028
 800414c:	40020040 	.word	0x40020040
 8004150:	40020058 	.word	0x40020058
 8004154:	40020070 	.word	0x40020070
 8004158:	40020088 	.word	0x40020088
 800415c:	400200a0 	.word	0x400200a0
 8004160:	400200b8 	.word	0x400200b8
 8004164:	40020410 	.word	0x40020410
 8004168:	40020428 	.word	0x40020428
 800416c:	40020440 	.word	0x40020440
 8004170:	40020458 	.word	0x40020458
 8004174:	40020470 	.word	0x40020470
 8004178:	40020488 	.word	0x40020488
 800417c:	400204a0 	.word	0x400204a0
 8004180:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1c8      	bne.n	8004124 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4b83      	ldr	r3, [pc, #524]	@ (80043ac <HAL_DMA_Init+0x420>)
 800419e:	4013      	ands	r3, r2
 80041a0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80041aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041c2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d107      	bne.n	80041e8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e0:	4313      	orrs	r3, r2
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	2b28      	cmp	r3, #40	@ 0x28
 80041ee:	d903      	bls.n	80041f8 <HAL_DMA_Init+0x26c>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80041f6:	d91f      	bls.n	8004238 <HAL_DMA_Init+0x2ac>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80041fe:	d903      	bls.n	8004208 <HAL_DMA_Init+0x27c>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	2b42      	cmp	r3, #66	@ 0x42
 8004206:	d917      	bls.n	8004238 <HAL_DMA_Init+0x2ac>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2b46      	cmp	r3, #70	@ 0x46
 800420e:	d903      	bls.n	8004218 <HAL_DMA_Init+0x28c>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	2b48      	cmp	r3, #72	@ 0x48
 8004216:	d90f      	bls.n	8004238 <HAL_DMA_Init+0x2ac>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	2b4e      	cmp	r3, #78	@ 0x4e
 800421e:	d903      	bls.n	8004228 <HAL_DMA_Init+0x29c>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2b52      	cmp	r3, #82	@ 0x52
 8004226:	d907      	bls.n	8004238 <HAL_DMA_Init+0x2ac>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	2b73      	cmp	r3, #115	@ 0x73
 800422e:	d905      	bls.n	800423c <HAL_DMA_Init+0x2b0>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2b77      	cmp	r3, #119	@ 0x77
 8004236:	d801      	bhi.n	800423c <HAL_DMA_Init+0x2b0>
 8004238:	2301      	movs	r3, #1
 800423a:	e000      	b.n	800423e <HAL_DMA_Init+0x2b2>
 800423c:	2300      	movs	r3, #0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004248:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f023 0307 	bic.w	r3, r3, #7
 8004260:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	4313      	orrs	r3, r2
 800426a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004270:	2b04      	cmp	r3, #4
 8004272:	d117      	bne.n	80042a4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	4313      	orrs	r3, r2
 800427c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00e      	beq.n	80042a4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f002 fb3a 	bl	8006900 <DMA_CheckFifoParam>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d008      	beq.n	80042a4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2240      	movs	r2, #64	@ 0x40
 8004296:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e192      	b.n	80045ca <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f002 fa75 	bl	800679c <DMA_CalcBaseAndBitshift>
 80042b2:	4603      	mov	r3, r0
 80042b4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ba:	f003 031f 	and.w	r3, r3, #31
 80042be:	223f      	movs	r2, #63	@ 0x3f
 80042c0:	409a      	lsls	r2, r3
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	609a      	str	r2, [r3, #8]
 80042c6:	e0c8      	b.n	800445a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a38      	ldr	r2, [pc, #224]	@ (80043b0 <HAL_DMA_Init+0x424>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d022      	beq.n	8004318 <HAL_DMA_Init+0x38c>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a37      	ldr	r2, [pc, #220]	@ (80043b4 <HAL_DMA_Init+0x428>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d01d      	beq.n	8004318 <HAL_DMA_Init+0x38c>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a35      	ldr	r2, [pc, #212]	@ (80043b8 <HAL_DMA_Init+0x42c>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d018      	beq.n	8004318 <HAL_DMA_Init+0x38c>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a34      	ldr	r2, [pc, #208]	@ (80043bc <HAL_DMA_Init+0x430>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d013      	beq.n	8004318 <HAL_DMA_Init+0x38c>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a32      	ldr	r2, [pc, #200]	@ (80043c0 <HAL_DMA_Init+0x434>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00e      	beq.n	8004318 <HAL_DMA_Init+0x38c>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a31      	ldr	r2, [pc, #196]	@ (80043c4 <HAL_DMA_Init+0x438>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d009      	beq.n	8004318 <HAL_DMA_Init+0x38c>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a2f      	ldr	r2, [pc, #188]	@ (80043c8 <HAL_DMA_Init+0x43c>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d004      	beq.n	8004318 <HAL_DMA_Init+0x38c>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a2e      	ldr	r2, [pc, #184]	@ (80043cc <HAL_DMA_Init+0x440>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d101      	bne.n	800431c <HAL_DMA_Init+0x390>
 8004318:	2301      	movs	r3, #1
 800431a:	e000      	b.n	800431e <HAL_DMA_Init+0x392>
 800431c:	2300      	movs	r3, #0
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 8092 	beq.w	8004448 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a21      	ldr	r2, [pc, #132]	@ (80043b0 <HAL_DMA_Init+0x424>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d021      	beq.n	8004372 <HAL_DMA_Init+0x3e6>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a20      	ldr	r2, [pc, #128]	@ (80043b4 <HAL_DMA_Init+0x428>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d01c      	beq.n	8004372 <HAL_DMA_Init+0x3e6>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a1e      	ldr	r2, [pc, #120]	@ (80043b8 <HAL_DMA_Init+0x42c>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d017      	beq.n	8004372 <HAL_DMA_Init+0x3e6>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a1d      	ldr	r2, [pc, #116]	@ (80043bc <HAL_DMA_Init+0x430>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d012      	beq.n	8004372 <HAL_DMA_Init+0x3e6>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a1b      	ldr	r2, [pc, #108]	@ (80043c0 <HAL_DMA_Init+0x434>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d00d      	beq.n	8004372 <HAL_DMA_Init+0x3e6>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a1a      	ldr	r2, [pc, #104]	@ (80043c4 <HAL_DMA_Init+0x438>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d008      	beq.n	8004372 <HAL_DMA_Init+0x3e6>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a18      	ldr	r2, [pc, #96]	@ (80043c8 <HAL_DMA_Init+0x43c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d003      	beq.n	8004372 <HAL_DMA_Init+0x3e6>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a17      	ldr	r2, [pc, #92]	@ (80043cc <HAL_DMA_Init+0x440>)
 8004370:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2202      	movs	r2, #2
 8004376:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	4b10      	ldr	r3, [pc, #64]	@ (80043d0 <HAL_DMA_Init+0x444>)
 800438e:	4013      	ands	r3, r2
 8004390:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	2b40      	cmp	r3, #64	@ 0x40
 8004398:	d01c      	beq.n	80043d4 <HAL_DMA_Init+0x448>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	2b80      	cmp	r3, #128	@ 0x80
 80043a0:	d102      	bne.n	80043a8 <HAL_DMA_Init+0x41c>
 80043a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80043a6:	e016      	b.n	80043d6 <HAL_DMA_Init+0x44a>
 80043a8:	2300      	movs	r3, #0
 80043aa:	e014      	b.n	80043d6 <HAL_DMA_Init+0x44a>
 80043ac:	fe10803f 	.word	0xfe10803f
 80043b0:	58025408 	.word	0x58025408
 80043b4:	5802541c 	.word	0x5802541c
 80043b8:	58025430 	.word	0x58025430
 80043bc:	58025444 	.word	0x58025444
 80043c0:	58025458 	.word	0x58025458
 80043c4:	5802546c 	.word	0x5802546c
 80043c8:	58025480 	.word	0x58025480
 80043cc:	58025494 	.word	0x58025494
 80043d0:	fffe000f 	.word	0xfffe000f
 80043d4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	68d2      	ldr	r2, [r2, #12]
 80043da:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80043dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80043e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80043ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80043f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80043fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004404:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	4313      	orrs	r3, r2
 800440a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	461a      	mov	r2, r3
 800441a:	4b6e      	ldr	r3, [pc, #440]	@ (80045d4 <HAL_DMA_Init+0x648>)
 800441c:	4413      	add	r3, r2
 800441e:	4a6e      	ldr	r2, [pc, #440]	@ (80045d8 <HAL_DMA_Init+0x64c>)
 8004420:	fba2 2303 	umull	r2, r3, r2, r3
 8004424:	091b      	lsrs	r3, r3, #4
 8004426:	009a      	lsls	r2, r3, #2
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f002 f9b5 	bl	800679c <DMA_CalcBaseAndBitshift>
 8004432:	4603      	mov	r3, r0
 8004434:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800443a:	f003 031f 	and.w	r3, r3, #31
 800443e:	2201      	movs	r2, #1
 8004440:	409a      	lsls	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	605a      	str	r2, [r3, #4]
 8004446:	e008      	b.n	800445a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2240      	movs	r2, #64	@ 0x40
 800444c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2203      	movs	r2, #3
 8004452:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e0b7      	b.n	80045ca <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a5f      	ldr	r2, [pc, #380]	@ (80045dc <HAL_DMA_Init+0x650>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d072      	beq.n	800454a <HAL_DMA_Init+0x5be>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a5d      	ldr	r2, [pc, #372]	@ (80045e0 <HAL_DMA_Init+0x654>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d06d      	beq.n	800454a <HAL_DMA_Init+0x5be>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a5c      	ldr	r2, [pc, #368]	@ (80045e4 <HAL_DMA_Init+0x658>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d068      	beq.n	800454a <HAL_DMA_Init+0x5be>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a5a      	ldr	r2, [pc, #360]	@ (80045e8 <HAL_DMA_Init+0x65c>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d063      	beq.n	800454a <HAL_DMA_Init+0x5be>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a59      	ldr	r2, [pc, #356]	@ (80045ec <HAL_DMA_Init+0x660>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d05e      	beq.n	800454a <HAL_DMA_Init+0x5be>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a57      	ldr	r2, [pc, #348]	@ (80045f0 <HAL_DMA_Init+0x664>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d059      	beq.n	800454a <HAL_DMA_Init+0x5be>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a56      	ldr	r2, [pc, #344]	@ (80045f4 <HAL_DMA_Init+0x668>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d054      	beq.n	800454a <HAL_DMA_Init+0x5be>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a54      	ldr	r2, [pc, #336]	@ (80045f8 <HAL_DMA_Init+0x66c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d04f      	beq.n	800454a <HAL_DMA_Init+0x5be>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a53      	ldr	r2, [pc, #332]	@ (80045fc <HAL_DMA_Init+0x670>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d04a      	beq.n	800454a <HAL_DMA_Init+0x5be>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a51      	ldr	r2, [pc, #324]	@ (8004600 <HAL_DMA_Init+0x674>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d045      	beq.n	800454a <HAL_DMA_Init+0x5be>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a50      	ldr	r2, [pc, #320]	@ (8004604 <HAL_DMA_Init+0x678>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d040      	beq.n	800454a <HAL_DMA_Init+0x5be>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a4e      	ldr	r2, [pc, #312]	@ (8004608 <HAL_DMA_Init+0x67c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d03b      	beq.n	800454a <HAL_DMA_Init+0x5be>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a4d      	ldr	r2, [pc, #308]	@ (800460c <HAL_DMA_Init+0x680>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d036      	beq.n	800454a <HAL_DMA_Init+0x5be>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a4b      	ldr	r2, [pc, #300]	@ (8004610 <HAL_DMA_Init+0x684>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d031      	beq.n	800454a <HAL_DMA_Init+0x5be>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a4a      	ldr	r2, [pc, #296]	@ (8004614 <HAL_DMA_Init+0x688>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d02c      	beq.n	800454a <HAL_DMA_Init+0x5be>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a48      	ldr	r2, [pc, #288]	@ (8004618 <HAL_DMA_Init+0x68c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d027      	beq.n	800454a <HAL_DMA_Init+0x5be>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a47      	ldr	r2, [pc, #284]	@ (800461c <HAL_DMA_Init+0x690>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d022      	beq.n	800454a <HAL_DMA_Init+0x5be>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a45      	ldr	r2, [pc, #276]	@ (8004620 <HAL_DMA_Init+0x694>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d01d      	beq.n	800454a <HAL_DMA_Init+0x5be>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a44      	ldr	r2, [pc, #272]	@ (8004624 <HAL_DMA_Init+0x698>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d018      	beq.n	800454a <HAL_DMA_Init+0x5be>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a42      	ldr	r2, [pc, #264]	@ (8004628 <HAL_DMA_Init+0x69c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d013      	beq.n	800454a <HAL_DMA_Init+0x5be>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a41      	ldr	r2, [pc, #260]	@ (800462c <HAL_DMA_Init+0x6a0>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d00e      	beq.n	800454a <HAL_DMA_Init+0x5be>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a3f      	ldr	r2, [pc, #252]	@ (8004630 <HAL_DMA_Init+0x6a4>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d009      	beq.n	800454a <HAL_DMA_Init+0x5be>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a3e      	ldr	r2, [pc, #248]	@ (8004634 <HAL_DMA_Init+0x6a8>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d004      	beq.n	800454a <HAL_DMA_Init+0x5be>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a3c      	ldr	r2, [pc, #240]	@ (8004638 <HAL_DMA_Init+0x6ac>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d101      	bne.n	800454e <HAL_DMA_Init+0x5c2>
 800454a:	2301      	movs	r3, #1
 800454c:	e000      	b.n	8004550 <HAL_DMA_Init+0x5c4>
 800454e:	2300      	movs	r3, #0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d032      	beq.n	80045ba <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f002 fa4f 	bl	80069f8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	2b80      	cmp	r3, #128	@ 0x80
 8004560:	d102      	bne.n	8004568 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004570:	b2d2      	uxtb	r2, r2
 8004572:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800457c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d010      	beq.n	80045a8 <HAL_DMA_Init+0x61c>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b08      	cmp	r3, #8
 800458c:	d80c      	bhi.n	80045a8 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f002 facc 	bl	8006b2c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80045a4:	605a      	str	r2, [r3, #4]
 80045a6:	e008      	b.n	80045ba <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3718      	adds	r7, #24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	a7fdabf8 	.word	0xa7fdabf8
 80045d8:	cccccccd 	.word	0xcccccccd
 80045dc:	40020010 	.word	0x40020010
 80045e0:	40020028 	.word	0x40020028
 80045e4:	40020040 	.word	0x40020040
 80045e8:	40020058 	.word	0x40020058
 80045ec:	40020070 	.word	0x40020070
 80045f0:	40020088 	.word	0x40020088
 80045f4:	400200a0 	.word	0x400200a0
 80045f8:	400200b8 	.word	0x400200b8
 80045fc:	40020410 	.word	0x40020410
 8004600:	40020428 	.word	0x40020428
 8004604:	40020440 	.word	0x40020440
 8004608:	40020458 	.word	0x40020458
 800460c:	40020470 	.word	0x40020470
 8004610:	40020488 	.word	0x40020488
 8004614:	400204a0 	.word	0x400204a0
 8004618:	400204b8 	.word	0x400204b8
 800461c:	58025408 	.word	0x58025408
 8004620:	5802541c 	.word	0x5802541c
 8004624:	58025430 	.word	0x58025430
 8004628:	58025444 	.word	0x58025444
 800462c:	58025458 	.word	0x58025458
 8004630:	5802546c 	.word	0x5802546c
 8004634:	58025480 	.word	0x58025480
 8004638:	58025494 	.word	0x58025494

0800463c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
 8004648:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e226      	b.n	8004aa6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800465e:	2b01      	cmp	r3, #1
 8004660:	d101      	bne.n	8004666 <HAL_DMA_Start_IT+0x2a>
 8004662:	2302      	movs	r3, #2
 8004664:	e21f      	b.n	8004aa6 <HAL_DMA_Start_IT+0x46a>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b01      	cmp	r3, #1
 8004678:	f040 820a 	bne.w	8004a90 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a68      	ldr	r2, [pc, #416]	@ (8004830 <HAL_DMA_Start_IT+0x1f4>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d04a      	beq.n	800472a <HAL_DMA_Start_IT+0xee>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a66      	ldr	r2, [pc, #408]	@ (8004834 <HAL_DMA_Start_IT+0x1f8>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d045      	beq.n	800472a <HAL_DMA_Start_IT+0xee>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a65      	ldr	r2, [pc, #404]	@ (8004838 <HAL_DMA_Start_IT+0x1fc>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d040      	beq.n	800472a <HAL_DMA_Start_IT+0xee>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a63      	ldr	r2, [pc, #396]	@ (800483c <HAL_DMA_Start_IT+0x200>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d03b      	beq.n	800472a <HAL_DMA_Start_IT+0xee>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a62      	ldr	r2, [pc, #392]	@ (8004840 <HAL_DMA_Start_IT+0x204>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d036      	beq.n	800472a <HAL_DMA_Start_IT+0xee>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a60      	ldr	r2, [pc, #384]	@ (8004844 <HAL_DMA_Start_IT+0x208>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d031      	beq.n	800472a <HAL_DMA_Start_IT+0xee>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a5f      	ldr	r2, [pc, #380]	@ (8004848 <HAL_DMA_Start_IT+0x20c>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d02c      	beq.n	800472a <HAL_DMA_Start_IT+0xee>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a5d      	ldr	r2, [pc, #372]	@ (800484c <HAL_DMA_Start_IT+0x210>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d027      	beq.n	800472a <HAL_DMA_Start_IT+0xee>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a5c      	ldr	r2, [pc, #368]	@ (8004850 <HAL_DMA_Start_IT+0x214>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d022      	beq.n	800472a <HAL_DMA_Start_IT+0xee>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a5a      	ldr	r2, [pc, #360]	@ (8004854 <HAL_DMA_Start_IT+0x218>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d01d      	beq.n	800472a <HAL_DMA_Start_IT+0xee>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a59      	ldr	r2, [pc, #356]	@ (8004858 <HAL_DMA_Start_IT+0x21c>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d018      	beq.n	800472a <HAL_DMA_Start_IT+0xee>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a57      	ldr	r2, [pc, #348]	@ (800485c <HAL_DMA_Start_IT+0x220>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d013      	beq.n	800472a <HAL_DMA_Start_IT+0xee>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a56      	ldr	r2, [pc, #344]	@ (8004860 <HAL_DMA_Start_IT+0x224>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d00e      	beq.n	800472a <HAL_DMA_Start_IT+0xee>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a54      	ldr	r2, [pc, #336]	@ (8004864 <HAL_DMA_Start_IT+0x228>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d009      	beq.n	800472a <HAL_DMA_Start_IT+0xee>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a53      	ldr	r2, [pc, #332]	@ (8004868 <HAL_DMA_Start_IT+0x22c>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d004      	beq.n	800472a <HAL_DMA_Start_IT+0xee>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a51      	ldr	r2, [pc, #324]	@ (800486c <HAL_DMA_Start_IT+0x230>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d108      	bne.n	800473c <HAL_DMA_Start_IT+0x100>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0201 	bic.w	r2, r2, #1
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	e007      	b.n	800474c <HAL_DMA_Start_IT+0x110>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0201 	bic.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	68b9      	ldr	r1, [r7, #8]
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f001 fe76 	bl	8006444 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a34      	ldr	r2, [pc, #208]	@ (8004830 <HAL_DMA_Start_IT+0x1f4>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d04a      	beq.n	80047f8 <HAL_DMA_Start_IT+0x1bc>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a33      	ldr	r2, [pc, #204]	@ (8004834 <HAL_DMA_Start_IT+0x1f8>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d045      	beq.n	80047f8 <HAL_DMA_Start_IT+0x1bc>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a31      	ldr	r2, [pc, #196]	@ (8004838 <HAL_DMA_Start_IT+0x1fc>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d040      	beq.n	80047f8 <HAL_DMA_Start_IT+0x1bc>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a30      	ldr	r2, [pc, #192]	@ (800483c <HAL_DMA_Start_IT+0x200>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d03b      	beq.n	80047f8 <HAL_DMA_Start_IT+0x1bc>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a2e      	ldr	r2, [pc, #184]	@ (8004840 <HAL_DMA_Start_IT+0x204>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d036      	beq.n	80047f8 <HAL_DMA_Start_IT+0x1bc>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a2d      	ldr	r2, [pc, #180]	@ (8004844 <HAL_DMA_Start_IT+0x208>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d031      	beq.n	80047f8 <HAL_DMA_Start_IT+0x1bc>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a2b      	ldr	r2, [pc, #172]	@ (8004848 <HAL_DMA_Start_IT+0x20c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d02c      	beq.n	80047f8 <HAL_DMA_Start_IT+0x1bc>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a2a      	ldr	r2, [pc, #168]	@ (800484c <HAL_DMA_Start_IT+0x210>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d027      	beq.n	80047f8 <HAL_DMA_Start_IT+0x1bc>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a28      	ldr	r2, [pc, #160]	@ (8004850 <HAL_DMA_Start_IT+0x214>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d022      	beq.n	80047f8 <HAL_DMA_Start_IT+0x1bc>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a27      	ldr	r2, [pc, #156]	@ (8004854 <HAL_DMA_Start_IT+0x218>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d01d      	beq.n	80047f8 <HAL_DMA_Start_IT+0x1bc>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a25      	ldr	r2, [pc, #148]	@ (8004858 <HAL_DMA_Start_IT+0x21c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d018      	beq.n	80047f8 <HAL_DMA_Start_IT+0x1bc>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a24      	ldr	r2, [pc, #144]	@ (800485c <HAL_DMA_Start_IT+0x220>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d013      	beq.n	80047f8 <HAL_DMA_Start_IT+0x1bc>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a22      	ldr	r2, [pc, #136]	@ (8004860 <HAL_DMA_Start_IT+0x224>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00e      	beq.n	80047f8 <HAL_DMA_Start_IT+0x1bc>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a21      	ldr	r2, [pc, #132]	@ (8004864 <HAL_DMA_Start_IT+0x228>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d009      	beq.n	80047f8 <HAL_DMA_Start_IT+0x1bc>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a1f      	ldr	r2, [pc, #124]	@ (8004868 <HAL_DMA_Start_IT+0x22c>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d004      	beq.n	80047f8 <HAL_DMA_Start_IT+0x1bc>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a1e      	ldr	r2, [pc, #120]	@ (800486c <HAL_DMA_Start_IT+0x230>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d101      	bne.n	80047fc <HAL_DMA_Start_IT+0x1c0>
 80047f8:	2301      	movs	r3, #1
 80047fa:	e000      	b.n	80047fe <HAL_DMA_Start_IT+0x1c2>
 80047fc:	2300      	movs	r3, #0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d036      	beq.n	8004870 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f023 021e 	bic.w	r2, r3, #30
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f042 0216 	orr.w	r2, r2, #22
 8004814:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481a:	2b00      	cmp	r3, #0
 800481c:	d03e      	beq.n	800489c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f042 0208 	orr.w	r2, r2, #8
 800482c:	601a      	str	r2, [r3, #0]
 800482e:	e035      	b.n	800489c <HAL_DMA_Start_IT+0x260>
 8004830:	40020010 	.word	0x40020010
 8004834:	40020028 	.word	0x40020028
 8004838:	40020040 	.word	0x40020040
 800483c:	40020058 	.word	0x40020058
 8004840:	40020070 	.word	0x40020070
 8004844:	40020088 	.word	0x40020088
 8004848:	400200a0 	.word	0x400200a0
 800484c:	400200b8 	.word	0x400200b8
 8004850:	40020410 	.word	0x40020410
 8004854:	40020428 	.word	0x40020428
 8004858:	40020440 	.word	0x40020440
 800485c:	40020458 	.word	0x40020458
 8004860:	40020470 	.word	0x40020470
 8004864:	40020488 	.word	0x40020488
 8004868:	400204a0 	.word	0x400204a0
 800486c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f023 020e 	bic.w	r2, r3, #14
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 020a 	orr.w	r2, r2, #10
 8004882:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004888:	2b00      	cmp	r3, #0
 800488a:	d007      	beq.n	800489c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0204 	orr.w	r2, r2, #4
 800489a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a83      	ldr	r2, [pc, #524]	@ (8004ab0 <HAL_DMA_Start_IT+0x474>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d072      	beq.n	800498c <HAL_DMA_Start_IT+0x350>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a82      	ldr	r2, [pc, #520]	@ (8004ab4 <HAL_DMA_Start_IT+0x478>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d06d      	beq.n	800498c <HAL_DMA_Start_IT+0x350>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a80      	ldr	r2, [pc, #512]	@ (8004ab8 <HAL_DMA_Start_IT+0x47c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d068      	beq.n	800498c <HAL_DMA_Start_IT+0x350>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a7f      	ldr	r2, [pc, #508]	@ (8004abc <HAL_DMA_Start_IT+0x480>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d063      	beq.n	800498c <HAL_DMA_Start_IT+0x350>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a7d      	ldr	r2, [pc, #500]	@ (8004ac0 <HAL_DMA_Start_IT+0x484>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d05e      	beq.n	800498c <HAL_DMA_Start_IT+0x350>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a7c      	ldr	r2, [pc, #496]	@ (8004ac4 <HAL_DMA_Start_IT+0x488>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d059      	beq.n	800498c <HAL_DMA_Start_IT+0x350>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a7a      	ldr	r2, [pc, #488]	@ (8004ac8 <HAL_DMA_Start_IT+0x48c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d054      	beq.n	800498c <HAL_DMA_Start_IT+0x350>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a79      	ldr	r2, [pc, #484]	@ (8004acc <HAL_DMA_Start_IT+0x490>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d04f      	beq.n	800498c <HAL_DMA_Start_IT+0x350>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a77      	ldr	r2, [pc, #476]	@ (8004ad0 <HAL_DMA_Start_IT+0x494>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d04a      	beq.n	800498c <HAL_DMA_Start_IT+0x350>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a76      	ldr	r2, [pc, #472]	@ (8004ad4 <HAL_DMA_Start_IT+0x498>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d045      	beq.n	800498c <HAL_DMA_Start_IT+0x350>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a74      	ldr	r2, [pc, #464]	@ (8004ad8 <HAL_DMA_Start_IT+0x49c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d040      	beq.n	800498c <HAL_DMA_Start_IT+0x350>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a73      	ldr	r2, [pc, #460]	@ (8004adc <HAL_DMA_Start_IT+0x4a0>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d03b      	beq.n	800498c <HAL_DMA_Start_IT+0x350>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a71      	ldr	r2, [pc, #452]	@ (8004ae0 <HAL_DMA_Start_IT+0x4a4>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d036      	beq.n	800498c <HAL_DMA_Start_IT+0x350>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a70      	ldr	r2, [pc, #448]	@ (8004ae4 <HAL_DMA_Start_IT+0x4a8>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d031      	beq.n	800498c <HAL_DMA_Start_IT+0x350>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a6e      	ldr	r2, [pc, #440]	@ (8004ae8 <HAL_DMA_Start_IT+0x4ac>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d02c      	beq.n	800498c <HAL_DMA_Start_IT+0x350>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a6d      	ldr	r2, [pc, #436]	@ (8004aec <HAL_DMA_Start_IT+0x4b0>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d027      	beq.n	800498c <HAL_DMA_Start_IT+0x350>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a6b      	ldr	r2, [pc, #428]	@ (8004af0 <HAL_DMA_Start_IT+0x4b4>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d022      	beq.n	800498c <HAL_DMA_Start_IT+0x350>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a6a      	ldr	r2, [pc, #424]	@ (8004af4 <HAL_DMA_Start_IT+0x4b8>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d01d      	beq.n	800498c <HAL_DMA_Start_IT+0x350>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a68      	ldr	r2, [pc, #416]	@ (8004af8 <HAL_DMA_Start_IT+0x4bc>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d018      	beq.n	800498c <HAL_DMA_Start_IT+0x350>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a67      	ldr	r2, [pc, #412]	@ (8004afc <HAL_DMA_Start_IT+0x4c0>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d013      	beq.n	800498c <HAL_DMA_Start_IT+0x350>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a65      	ldr	r2, [pc, #404]	@ (8004b00 <HAL_DMA_Start_IT+0x4c4>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d00e      	beq.n	800498c <HAL_DMA_Start_IT+0x350>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a64      	ldr	r2, [pc, #400]	@ (8004b04 <HAL_DMA_Start_IT+0x4c8>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d009      	beq.n	800498c <HAL_DMA_Start_IT+0x350>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a62      	ldr	r2, [pc, #392]	@ (8004b08 <HAL_DMA_Start_IT+0x4cc>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d004      	beq.n	800498c <HAL_DMA_Start_IT+0x350>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a61      	ldr	r2, [pc, #388]	@ (8004b0c <HAL_DMA_Start_IT+0x4d0>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d101      	bne.n	8004990 <HAL_DMA_Start_IT+0x354>
 800498c:	2301      	movs	r3, #1
 800498e:	e000      	b.n	8004992 <HAL_DMA_Start_IT+0x356>
 8004990:	2300      	movs	r3, #0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d01a      	beq.n	80049cc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d007      	beq.n	80049b4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049b2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d007      	beq.n	80049cc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049ca:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a37      	ldr	r2, [pc, #220]	@ (8004ab0 <HAL_DMA_Start_IT+0x474>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d04a      	beq.n	8004a6c <HAL_DMA_Start_IT+0x430>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a36      	ldr	r2, [pc, #216]	@ (8004ab4 <HAL_DMA_Start_IT+0x478>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d045      	beq.n	8004a6c <HAL_DMA_Start_IT+0x430>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a34      	ldr	r2, [pc, #208]	@ (8004ab8 <HAL_DMA_Start_IT+0x47c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d040      	beq.n	8004a6c <HAL_DMA_Start_IT+0x430>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a33      	ldr	r2, [pc, #204]	@ (8004abc <HAL_DMA_Start_IT+0x480>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d03b      	beq.n	8004a6c <HAL_DMA_Start_IT+0x430>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a31      	ldr	r2, [pc, #196]	@ (8004ac0 <HAL_DMA_Start_IT+0x484>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d036      	beq.n	8004a6c <HAL_DMA_Start_IT+0x430>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a30      	ldr	r2, [pc, #192]	@ (8004ac4 <HAL_DMA_Start_IT+0x488>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d031      	beq.n	8004a6c <HAL_DMA_Start_IT+0x430>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a2e      	ldr	r2, [pc, #184]	@ (8004ac8 <HAL_DMA_Start_IT+0x48c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d02c      	beq.n	8004a6c <HAL_DMA_Start_IT+0x430>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a2d      	ldr	r2, [pc, #180]	@ (8004acc <HAL_DMA_Start_IT+0x490>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d027      	beq.n	8004a6c <HAL_DMA_Start_IT+0x430>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a2b      	ldr	r2, [pc, #172]	@ (8004ad0 <HAL_DMA_Start_IT+0x494>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d022      	beq.n	8004a6c <HAL_DMA_Start_IT+0x430>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a2a      	ldr	r2, [pc, #168]	@ (8004ad4 <HAL_DMA_Start_IT+0x498>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d01d      	beq.n	8004a6c <HAL_DMA_Start_IT+0x430>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a28      	ldr	r2, [pc, #160]	@ (8004ad8 <HAL_DMA_Start_IT+0x49c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d018      	beq.n	8004a6c <HAL_DMA_Start_IT+0x430>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a27      	ldr	r2, [pc, #156]	@ (8004adc <HAL_DMA_Start_IT+0x4a0>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d013      	beq.n	8004a6c <HAL_DMA_Start_IT+0x430>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a25      	ldr	r2, [pc, #148]	@ (8004ae0 <HAL_DMA_Start_IT+0x4a4>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d00e      	beq.n	8004a6c <HAL_DMA_Start_IT+0x430>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a24      	ldr	r2, [pc, #144]	@ (8004ae4 <HAL_DMA_Start_IT+0x4a8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d009      	beq.n	8004a6c <HAL_DMA_Start_IT+0x430>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a22      	ldr	r2, [pc, #136]	@ (8004ae8 <HAL_DMA_Start_IT+0x4ac>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d004      	beq.n	8004a6c <HAL_DMA_Start_IT+0x430>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a21      	ldr	r2, [pc, #132]	@ (8004aec <HAL_DMA_Start_IT+0x4b0>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d108      	bne.n	8004a7e <HAL_DMA_Start_IT+0x442>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0201 	orr.w	r2, r2, #1
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	e012      	b.n	8004aa4 <HAL_DMA_Start_IT+0x468>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f042 0201 	orr.w	r2, r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	e009      	b.n	8004aa4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a96:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	40020010 	.word	0x40020010
 8004ab4:	40020028 	.word	0x40020028
 8004ab8:	40020040 	.word	0x40020040
 8004abc:	40020058 	.word	0x40020058
 8004ac0:	40020070 	.word	0x40020070
 8004ac4:	40020088 	.word	0x40020088
 8004ac8:	400200a0 	.word	0x400200a0
 8004acc:	400200b8 	.word	0x400200b8
 8004ad0:	40020410 	.word	0x40020410
 8004ad4:	40020428 	.word	0x40020428
 8004ad8:	40020440 	.word	0x40020440
 8004adc:	40020458 	.word	0x40020458
 8004ae0:	40020470 	.word	0x40020470
 8004ae4:	40020488 	.word	0x40020488
 8004ae8:	400204a0 	.word	0x400204a0
 8004aec:	400204b8 	.word	0x400204b8
 8004af0:	58025408 	.word	0x58025408
 8004af4:	5802541c 	.word	0x5802541c
 8004af8:	58025430 	.word	0x58025430
 8004afc:	58025444 	.word	0x58025444
 8004b00:	58025458 	.word	0x58025458
 8004b04:	5802546c 	.word	0x5802546c
 8004b08:	58025480 	.word	0x58025480
 8004b0c:	58025494 	.word	0x58025494

08004b10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004b18:	f7ff f84e 	bl	8003bb8 <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e2dc      	b.n	80050e2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d008      	beq.n	8004b46 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2280      	movs	r2, #128	@ 0x80
 8004b38:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e2cd      	b.n	80050e2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a76      	ldr	r2, [pc, #472]	@ (8004d24 <HAL_DMA_Abort+0x214>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d04a      	beq.n	8004be6 <HAL_DMA_Abort+0xd6>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a74      	ldr	r2, [pc, #464]	@ (8004d28 <HAL_DMA_Abort+0x218>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d045      	beq.n	8004be6 <HAL_DMA_Abort+0xd6>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a73      	ldr	r2, [pc, #460]	@ (8004d2c <HAL_DMA_Abort+0x21c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d040      	beq.n	8004be6 <HAL_DMA_Abort+0xd6>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a71      	ldr	r2, [pc, #452]	@ (8004d30 <HAL_DMA_Abort+0x220>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d03b      	beq.n	8004be6 <HAL_DMA_Abort+0xd6>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a70      	ldr	r2, [pc, #448]	@ (8004d34 <HAL_DMA_Abort+0x224>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d036      	beq.n	8004be6 <HAL_DMA_Abort+0xd6>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a6e      	ldr	r2, [pc, #440]	@ (8004d38 <HAL_DMA_Abort+0x228>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d031      	beq.n	8004be6 <HAL_DMA_Abort+0xd6>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a6d      	ldr	r2, [pc, #436]	@ (8004d3c <HAL_DMA_Abort+0x22c>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d02c      	beq.n	8004be6 <HAL_DMA_Abort+0xd6>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a6b      	ldr	r2, [pc, #428]	@ (8004d40 <HAL_DMA_Abort+0x230>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d027      	beq.n	8004be6 <HAL_DMA_Abort+0xd6>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a6a      	ldr	r2, [pc, #424]	@ (8004d44 <HAL_DMA_Abort+0x234>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d022      	beq.n	8004be6 <HAL_DMA_Abort+0xd6>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a68      	ldr	r2, [pc, #416]	@ (8004d48 <HAL_DMA_Abort+0x238>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d01d      	beq.n	8004be6 <HAL_DMA_Abort+0xd6>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a67      	ldr	r2, [pc, #412]	@ (8004d4c <HAL_DMA_Abort+0x23c>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d018      	beq.n	8004be6 <HAL_DMA_Abort+0xd6>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a65      	ldr	r2, [pc, #404]	@ (8004d50 <HAL_DMA_Abort+0x240>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d013      	beq.n	8004be6 <HAL_DMA_Abort+0xd6>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a64      	ldr	r2, [pc, #400]	@ (8004d54 <HAL_DMA_Abort+0x244>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d00e      	beq.n	8004be6 <HAL_DMA_Abort+0xd6>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a62      	ldr	r2, [pc, #392]	@ (8004d58 <HAL_DMA_Abort+0x248>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d009      	beq.n	8004be6 <HAL_DMA_Abort+0xd6>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a61      	ldr	r2, [pc, #388]	@ (8004d5c <HAL_DMA_Abort+0x24c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d004      	beq.n	8004be6 <HAL_DMA_Abort+0xd6>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a5f      	ldr	r2, [pc, #380]	@ (8004d60 <HAL_DMA_Abort+0x250>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d101      	bne.n	8004bea <HAL_DMA_Abort+0xda>
 8004be6:	2301      	movs	r3, #1
 8004be8:	e000      	b.n	8004bec <HAL_DMA_Abort+0xdc>
 8004bea:	2300      	movs	r3, #0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d013      	beq.n	8004c18 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 021e 	bic.w	r2, r2, #30
 8004bfe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	695a      	ldr	r2, [r3, #20]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c0e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	617b      	str	r3, [r7, #20]
 8004c16:	e00a      	b.n	8004c2e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 020e 	bic.w	r2, r2, #14
 8004c26:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a3c      	ldr	r2, [pc, #240]	@ (8004d24 <HAL_DMA_Abort+0x214>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d072      	beq.n	8004d1e <HAL_DMA_Abort+0x20e>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a3a      	ldr	r2, [pc, #232]	@ (8004d28 <HAL_DMA_Abort+0x218>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d06d      	beq.n	8004d1e <HAL_DMA_Abort+0x20e>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a39      	ldr	r2, [pc, #228]	@ (8004d2c <HAL_DMA_Abort+0x21c>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d068      	beq.n	8004d1e <HAL_DMA_Abort+0x20e>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a37      	ldr	r2, [pc, #220]	@ (8004d30 <HAL_DMA_Abort+0x220>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d063      	beq.n	8004d1e <HAL_DMA_Abort+0x20e>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a36      	ldr	r2, [pc, #216]	@ (8004d34 <HAL_DMA_Abort+0x224>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d05e      	beq.n	8004d1e <HAL_DMA_Abort+0x20e>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a34      	ldr	r2, [pc, #208]	@ (8004d38 <HAL_DMA_Abort+0x228>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d059      	beq.n	8004d1e <HAL_DMA_Abort+0x20e>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a33      	ldr	r2, [pc, #204]	@ (8004d3c <HAL_DMA_Abort+0x22c>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d054      	beq.n	8004d1e <HAL_DMA_Abort+0x20e>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a31      	ldr	r2, [pc, #196]	@ (8004d40 <HAL_DMA_Abort+0x230>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d04f      	beq.n	8004d1e <HAL_DMA_Abort+0x20e>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a30      	ldr	r2, [pc, #192]	@ (8004d44 <HAL_DMA_Abort+0x234>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d04a      	beq.n	8004d1e <HAL_DMA_Abort+0x20e>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a2e      	ldr	r2, [pc, #184]	@ (8004d48 <HAL_DMA_Abort+0x238>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d045      	beq.n	8004d1e <HAL_DMA_Abort+0x20e>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a2d      	ldr	r2, [pc, #180]	@ (8004d4c <HAL_DMA_Abort+0x23c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d040      	beq.n	8004d1e <HAL_DMA_Abort+0x20e>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a2b      	ldr	r2, [pc, #172]	@ (8004d50 <HAL_DMA_Abort+0x240>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d03b      	beq.n	8004d1e <HAL_DMA_Abort+0x20e>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a2a      	ldr	r2, [pc, #168]	@ (8004d54 <HAL_DMA_Abort+0x244>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d036      	beq.n	8004d1e <HAL_DMA_Abort+0x20e>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a28      	ldr	r2, [pc, #160]	@ (8004d58 <HAL_DMA_Abort+0x248>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d031      	beq.n	8004d1e <HAL_DMA_Abort+0x20e>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a27      	ldr	r2, [pc, #156]	@ (8004d5c <HAL_DMA_Abort+0x24c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d02c      	beq.n	8004d1e <HAL_DMA_Abort+0x20e>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a25      	ldr	r2, [pc, #148]	@ (8004d60 <HAL_DMA_Abort+0x250>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d027      	beq.n	8004d1e <HAL_DMA_Abort+0x20e>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a24      	ldr	r2, [pc, #144]	@ (8004d64 <HAL_DMA_Abort+0x254>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d022      	beq.n	8004d1e <HAL_DMA_Abort+0x20e>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a22      	ldr	r2, [pc, #136]	@ (8004d68 <HAL_DMA_Abort+0x258>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d01d      	beq.n	8004d1e <HAL_DMA_Abort+0x20e>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a21      	ldr	r2, [pc, #132]	@ (8004d6c <HAL_DMA_Abort+0x25c>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d018      	beq.n	8004d1e <HAL_DMA_Abort+0x20e>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a1f      	ldr	r2, [pc, #124]	@ (8004d70 <HAL_DMA_Abort+0x260>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d013      	beq.n	8004d1e <HAL_DMA_Abort+0x20e>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8004d74 <HAL_DMA_Abort+0x264>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d00e      	beq.n	8004d1e <HAL_DMA_Abort+0x20e>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a1c      	ldr	r2, [pc, #112]	@ (8004d78 <HAL_DMA_Abort+0x268>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d009      	beq.n	8004d1e <HAL_DMA_Abort+0x20e>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a1b      	ldr	r2, [pc, #108]	@ (8004d7c <HAL_DMA_Abort+0x26c>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d004      	beq.n	8004d1e <HAL_DMA_Abort+0x20e>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a19      	ldr	r2, [pc, #100]	@ (8004d80 <HAL_DMA_Abort+0x270>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d132      	bne.n	8004d84 <HAL_DMA_Abort+0x274>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e031      	b.n	8004d86 <HAL_DMA_Abort+0x276>
 8004d22:	bf00      	nop
 8004d24:	40020010 	.word	0x40020010
 8004d28:	40020028 	.word	0x40020028
 8004d2c:	40020040 	.word	0x40020040
 8004d30:	40020058 	.word	0x40020058
 8004d34:	40020070 	.word	0x40020070
 8004d38:	40020088 	.word	0x40020088
 8004d3c:	400200a0 	.word	0x400200a0
 8004d40:	400200b8 	.word	0x400200b8
 8004d44:	40020410 	.word	0x40020410
 8004d48:	40020428 	.word	0x40020428
 8004d4c:	40020440 	.word	0x40020440
 8004d50:	40020458 	.word	0x40020458
 8004d54:	40020470 	.word	0x40020470
 8004d58:	40020488 	.word	0x40020488
 8004d5c:	400204a0 	.word	0x400204a0
 8004d60:	400204b8 	.word	0x400204b8
 8004d64:	58025408 	.word	0x58025408
 8004d68:	5802541c 	.word	0x5802541c
 8004d6c:	58025430 	.word	0x58025430
 8004d70:	58025444 	.word	0x58025444
 8004d74:	58025458 	.word	0x58025458
 8004d78:	5802546c 	.word	0x5802546c
 8004d7c:	58025480 	.word	0x58025480
 8004d80:	58025494 	.word	0x58025494
 8004d84:	2300      	movs	r3, #0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d007      	beq.n	8004d9a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d98:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a6d      	ldr	r2, [pc, #436]	@ (8004f54 <HAL_DMA_Abort+0x444>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d04a      	beq.n	8004e3a <HAL_DMA_Abort+0x32a>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a6b      	ldr	r2, [pc, #428]	@ (8004f58 <HAL_DMA_Abort+0x448>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d045      	beq.n	8004e3a <HAL_DMA_Abort+0x32a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a6a      	ldr	r2, [pc, #424]	@ (8004f5c <HAL_DMA_Abort+0x44c>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d040      	beq.n	8004e3a <HAL_DMA_Abort+0x32a>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a68      	ldr	r2, [pc, #416]	@ (8004f60 <HAL_DMA_Abort+0x450>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d03b      	beq.n	8004e3a <HAL_DMA_Abort+0x32a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a67      	ldr	r2, [pc, #412]	@ (8004f64 <HAL_DMA_Abort+0x454>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d036      	beq.n	8004e3a <HAL_DMA_Abort+0x32a>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a65      	ldr	r2, [pc, #404]	@ (8004f68 <HAL_DMA_Abort+0x458>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d031      	beq.n	8004e3a <HAL_DMA_Abort+0x32a>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a64      	ldr	r2, [pc, #400]	@ (8004f6c <HAL_DMA_Abort+0x45c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d02c      	beq.n	8004e3a <HAL_DMA_Abort+0x32a>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a62      	ldr	r2, [pc, #392]	@ (8004f70 <HAL_DMA_Abort+0x460>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d027      	beq.n	8004e3a <HAL_DMA_Abort+0x32a>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a61      	ldr	r2, [pc, #388]	@ (8004f74 <HAL_DMA_Abort+0x464>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d022      	beq.n	8004e3a <HAL_DMA_Abort+0x32a>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a5f      	ldr	r2, [pc, #380]	@ (8004f78 <HAL_DMA_Abort+0x468>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d01d      	beq.n	8004e3a <HAL_DMA_Abort+0x32a>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a5e      	ldr	r2, [pc, #376]	@ (8004f7c <HAL_DMA_Abort+0x46c>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d018      	beq.n	8004e3a <HAL_DMA_Abort+0x32a>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a5c      	ldr	r2, [pc, #368]	@ (8004f80 <HAL_DMA_Abort+0x470>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d013      	beq.n	8004e3a <HAL_DMA_Abort+0x32a>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a5b      	ldr	r2, [pc, #364]	@ (8004f84 <HAL_DMA_Abort+0x474>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d00e      	beq.n	8004e3a <HAL_DMA_Abort+0x32a>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a59      	ldr	r2, [pc, #356]	@ (8004f88 <HAL_DMA_Abort+0x478>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d009      	beq.n	8004e3a <HAL_DMA_Abort+0x32a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a58      	ldr	r2, [pc, #352]	@ (8004f8c <HAL_DMA_Abort+0x47c>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d004      	beq.n	8004e3a <HAL_DMA_Abort+0x32a>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a56      	ldr	r2, [pc, #344]	@ (8004f90 <HAL_DMA_Abort+0x480>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d108      	bne.n	8004e4c <HAL_DMA_Abort+0x33c>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 0201 	bic.w	r2, r2, #1
 8004e48:	601a      	str	r2, [r3, #0]
 8004e4a:	e007      	b.n	8004e5c <HAL_DMA_Abort+0x34c>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 0201 	bic.w	r2, r2, #1
 8004e5a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004e5c:	e013      	b.n	8004e86 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e5e:	f7fe feab 	bl	8003bb8 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b05      	cmp	r3, #5
 8004e6a:	d90c      	bls.n	8004e86 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2203      	movs	r2, #3
 8004e76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e12d      	b.n	80050e2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1e5      	bne.n	8004e5e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a2f      	ldr	r2, [pc, #188]	@ (8004f54 <HAL_DMA_Abort+0x444>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d04a      	beq.n	8004f32 <HAL_DMA_Abort+0x422>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a2d      	ldr	r2, [pc, #180]	@ (8004f58 <HAL_DMA_Abort+0x448>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d045      	beq.n	8004f32 <HAL_DMA_Abort+0x422>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a2c      	ldr	r2, [pc, #176]	@ (8004f5c <HAL_DMA_Abort+0x44c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d040      	beq.n	8004f32 <HAL_DMA_Abort+0x422>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a2a      	ldr	r2, [pc, #168]	@ (8004f60 <HAL_DMA_Abort+0x450>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d03b      	beq.n	8004f32 <HAL_DMA_Abort+0x422>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a29      	ldr	r2, [pc, #164]	@ (8004f64 <HAL_DMA_Abort+0x454>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d036      	beq.n	8004f32 <HAL_DMA_Abort+0x422>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a27      	ldr	r2, [pc, #156]	@ (8004f68 <HAL_DMA_Abort+0x458>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d031      	beq.n	8004f32 <HAL_DMA_Abort+0x422>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a26      	ldr	r2, [pc, #152]	@ (8004f6c <HAL_DMA_Abort+0x45c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d02c      	beq.n	8004f32 <HAL_DMA_Abort+0x422>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a24      	ldr	r2, [pc, #144]	@ (8004f70 <HAL_DMA_Abort+0x460>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d027      	beq.n	8004f32 <HAL_DMA_Abort+0x422>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a23      	ldr	r2, [pc, #140]	@ (8004f74 <HAL_DMA_Abort+0x464>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d022      	beq.n	8004f32 <HAL_DMA_Abort+0x422>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a21      	ldr	r2, [pc, #132]	@ (8004f78 <HAL_DMA_Abort+0x468>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d01d      	beq.n	8004f32 <HAL_DMA_Abort+0x422>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a20      	ldr	r2, [pc, #128]	@ (8004f7c <HAL_DMA_Abort+0x46c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d018      	beq.n	8004f32 <HAL_DMA_Abort+0x422>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a1e      	ldr	r2, [pc, #120]	@ (8004f80 <HAL_DMA_Abort+0x470>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d013      	beq.n	8004f32 <HAL_DMA_Abort+0x422>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a1d      	ldr	r2, [pc, #116]	@ (8004f84 <HAL_DMA_Abort+0x474>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d00e      	beq.n	8004f32 <HAL_DMA_Abort+0x422>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a1b      	ldr	r2, [pc, #108]	@ (8004f88 <HAL_DMA_Abort+0x478>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d009      	beq.n	8004f32 <HAL_DMA_Abort+0x422>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a1a      	ldr	r2, [pc, #104]	@ (8004f8c <HAL_DMA_Abort+0x47c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d004      	beq.n	8004f32 <HAL_DMA_Abort+0x422>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a18      	ldr	r2, [pc, #96]	@ (8004f90 <HAL_DMA_Abort+0x480>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d101      	bne.n	8004f36 <HAL_DMA_Abort+0x426>
 8004f32:	2301      	movs	r3, #1
 8004f34:	e000      	b.n	8004f38 <HAL_DMA_Abort+0x428>
 8004f36:	2300      	movs	r3, #0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d02b      	beq.n	8004f94 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f40:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f46:	f003 031f 	and.w	r3, r3, #31
 8004f4a:	223f      	movs	r2, #63	@ 0x3f
 8004f4c:	409a      	lsls	r2, r3
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	609a      	str	r2, [r3, #8]
 8004f52:	e02a      	b.n	8004faa <HAL_DMA_Abort+0x49a>
 8004f54:	40020010 	.word	0x40020010
 8004f58:	40020028 	.word	0x40020028
 8004f5c:	40020040 	.word	0x40020040
 8004f60:	40020058 	.word	0x40020058
 8004f64:	40020070 	.word	0x40020070
 8004f68:	40020088 	.word	0x40020088
 8004f6c:	400200a0 	.word	0x400200a0
 8004f70:	400200b8 	.word	0x400200b8
 8004f74:	40020410 	.word	0x40020410
 8004f78:	40020428 	.word	0x40020428
 8004f7c:	40020440 	.word	0x40020440
 8004f80:	40020458 	.word	0x40020458
 8004f84:	40020470 	.word	0x40020470
 8004f88:	40020488 	.word	0x40020488
 8004f8c:	400204a0 	.word	0x400204a0
 8004f90:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f98:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f9e:	f003 031f 	and.w	r3, r3, #31
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	409a      	lsls	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a4f      	ldr	r2, [pc, #316]	@ (80050ec <HAL_DMA_Abort+0x5dc>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d072      	beq.n	800509a <HAL_DMA_Abort+0x58a>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a4d      	ldr	r2, [pc, #308]	@ (80050f0 <HAL_DMA_Abort+0x5e0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d06d      	beq.n	800509a <HAL_DMA_Abort+0x58a>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a4c      	ldr	r2, [pc, #304]	@ (80050f4 <HAL_DMA_Abort+0x5e4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d068      	beq.n	800509a <HAL_DMA_Abort+0x58a>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a4a      	ldr	r2, [pc, #296]	@ (80050f8 <HAL_DMA_Abort+0x5e8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d063      	beq.n	800509a <HAL_DMA_Abort+0x58a>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a49      	ldr	r2, [pc, #292]	@ (80050fc <HAL_DMA_Abort+0x5ec>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d05e      	beq.n	800509a <HAL_DMA_Abort+0x58a>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a47      	ldr	r2, [pc, #284]	@ (8005100 <HAL_DMA_Abort+0x5f0>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d059      	beq.n	800509a <HAL_DMA_Abort+0x58a>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a46      	ldr	r2, [pc, #280]	@ (8005104 <HAL_DMA_Abort+0x5f4>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d054      	beq.n	800509a <HAL_DMA_Abort+0x58a>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a44      	ldr	r2, [pc, #272]	@ (8005108 <HAL_DMA_Abort+0x5f8>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d04f      	beq.n	800509a <HAL_DMA_Abort+0x58a>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a43      	ldr	r2, [pc, #268]	@ (800510c <HAL_DMA_Abort+0x5fc>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d04a      	beq.n	800509a <HAL_DMA_Abort+0x58a>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a41      	ldr	r2, [pc, #260]	@ (8005110 <HAL_DMA_Abort+0x600>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d045      	beq.n	800509a <HAL_DMA_Abort+0x58a>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a40      	ldr	r2, [pc, #256]	@ (8005114 <HAL_DMA_Abort+0x604>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d040      	beq.n	800509a <HAL_DMA_Abort+0x58a>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a3e      	ldr	r2, [pc, #248]	@ (8005118 <HAL_DMA_Abort+0x608>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d03b      	beq.n	800509a <HAL_DMA_Abort+0x58a>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a3d      	ldr	r2, [pc, #244]	@ (800511c <HAL_DMA_Abort+0x60c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d036      	beq.n	800509a <HAL_DMA_Abort+0x58a>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a3b      	ldr	r2, [pc, #236]	@ (8005120 <HAL_DMA_Abort+0x610>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d031      	beq.n	800509a <HAL_DMA_Abort+0x58a>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a3a      	ldr	r2, [pc, #232]	@ (8005124 <HAL_DMA_Abort+0x614>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d02c      	beq.n	800509a <HAL_DMA_Abort+0x58a>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a38      	ldr	r2, [pc, #224]	@ (8005128 <HAL_DMA_Abort+0x618>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d027      	beq.n	800509a <HAL_DMA_Abort+0x58a>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a37      	ldr	r2, [pc, #220]	@ (800512c <HAL_DMA_Abort+0x61c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d022      	beq.n	800509a <HAL_DMA_Abort+0x58a>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a35      	ldr	r2, [pc, #212]	@ (8005130 <HAL_DMA_Abort+0x620>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d01d      	beq.n	800509a <HAL_DMA_Abort+0x58a>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a34      	ldr	r2, [pc, #208]	@ (8005134 <HAL_DMA_Abort+0x624>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d018      	beq.n	800509a <HAL_DMA_Abort+0x58a>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a32      	ldr	r2, [pc, #200]	@ (8005138 <HAL_DMA_Abort+0x628>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d013      	beq.n	800509a <HAL_DMA_Abort+0x58a>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a31      	ldr	r2, [pc, #196]	@ (800513c <HAL_DMA_Abort+0x62c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d00e      	beq.n	800509a <HAL_DMA_Abort+0x58a>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a2f      	ldr	r2, [pc, #188]	@ (8005140 <HAL_DMA_Abort+0x630>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d009      	beq.n	800509a <HAL_DMA_Abort+0x58a>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a2e      	ldr	r2, [pc, #184]	@ (8005144 <HAL_DMA_Abort+0x634>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d004      	beq.n	800509a <HAL_DMA_Abort+0x58a>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a2c      	ldr	r2, [pc, #176]	@ (8005148 <HAL_DMA_Abort+0x638>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d101      	bne.n	800509e <HAL_DMA_Abort+0x58e>
 800509a:	2301      	movs	r3, #1
 800509c:	e000      	b.n	80050a0 <HAL_DMA_Abort+0x590>
 800509e:	2300      	movs	r3, #0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d015      	beq.n	80050d0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80050ac:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00c      	beq.n	80050d0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050c4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80050ce:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3718      	adds	r7, #24
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	40020010 	.word	0x40020010
 80050f0:	40020028 	.word	0x40020028
 80050f4:	40020040 	.word	0x40020040
 80050f8:	40020058 	.word	0x40020058
 80050fc:	40020070 	.word	0x40020070
 8005100:	40020088 	.word	0x40020088
 8005104:	400200a0 	.word	0x400200a0
 8005108:	400200b8 	.word	0x400200b8
 800510c:	40020410 	.word	0x40020410
 8005110:	40020428 	.word	0x40020428
 8005114:	40020440 	.word	0x40020440
 8005118:	40020458 	.word	0x40020458
 800511c:	40020470 	.word	0x40020470
 8005120:	40020488 	.word	0x40020488
 8005124:	400204a0 	.word	0x400204a0
 8005128:	400204b8 	.word	0x400204b8
 800512c:	58025408 	.word	0x58025408
 8005130:	5802541c 	.word	0x5802541c
 8005134:	58025430 	.word	0x58025430
 8005138:	58025444 	.word	0x58025444
 800513c:	58025458 	.word	0x58025458
 8005140:	5802546c 	.word	0x5802546c
 8005144:	58025480 	.word	0x58025480
 8005148:	58025494 	.word	0x58025494

0800514c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e237      	b.n	80055ce <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d004      	beq.n	8005174 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2280      	movs	r2, #128	@ 0x80
 800516e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e22c      	b.n	80055ce <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a5c      	ldr	r2, [pc, #368]	@ (80052ec <HAL_DMA_Abort_IT+0x1a0>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d04a      	beq.n	8005214 <HAL_DMA_Abort_IT+0xc8>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a5b      	ldr	r2, [pc, #364]	@ (80052f0 <HAL_DMA_Abort_IT+0x1a4>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d045      	beq.n	8005214 <HAL_DMA_Abort_IT+0xc8>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a59      	ldr	r2, [pc, #356]	@ (80052f4 <HAL_DMA_Abort_IT+0x1a8>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d040      	beq.n	8005214 <HAL_DMA_Abort_IT+0xc8>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a58      	ldr	r2, [pc, #352]	@ (80052f8 <HAL_DMA_Abort_IT+0x1ac>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d03b      	beq.n	8005214 <HAL_DMA_Abort_IT+0xc8>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a56      	ldr	r2, [pc, #344]	@ (80052fc <HAL_DMA_Abort_IT+0x1b0>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d036      	beq.n	8005214 <HAL_DMA_Abort_IT+0xc8>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a55      	ldr	r2, [pc, #340]	@ (8005300 <HAL_DMA_Abort_IT+0x1b4>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d031      	beq.n	8005214 <HAL_DMA_Abort_IT+0xc8>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a53      	ldr	r2, [pc, #332]	@ (8005304 <HAL_DMA_Abort_IT+0x1b8>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d02c      	beq.n	8005214 <HAL_DMA_Abort_IT+0xc8>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a52      	ldr	r2, [pc, #328]	@ (8005308 <HAL_DMA_Abort_IT+0x1bc>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d027      	beq.n	8005214 <HAL_DMA_Abort_IT+0xc8>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a50      	ldr	r2, [pc, #320]	@ (800530c <HAL_DMA_Abort_IT+0x1c0>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d022      	beq.n	8005214 <HAL_DMA_Abort_IT+0xc8>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a4f      	ldr	r2, [pc, #316]	@ (8005310 <HAL_DMA_Abort_IT+0x1c4>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d01d      	beq.n	8005214 <HAL_DMA_Abort_IT+0xc8>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a4d      	ldr	r2, [pc, #308]	@ (8005314 <HAL_DMA_Abort_IT+0x1c8>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d018      	beq.n	8005214 <HAL_DMA_Abort_IT+0xc8>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a4c      	ldr	r2, [pc, #304]	@ (8005318 <HAL_DMA_Abort_IT+0x1cc>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d013      	beq.n	8005214 <HAL_DMA_Abort_IT+0xc8>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a4a      	ldr	r2, [pc, #296]	@ (800531c <HAL_DMA_Abort_IT+0x1d0>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d00e      	beq.n	8005214 <HAL_DMA_Abort_IT+0xc8>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a49      	ldr	r2, [pc, #292]	@ (8005320 <HAL_DMA_Abort_IT+0x1d4>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d009      	beq.n	8005214 <HAL_DMA_Abort_IT+0xc8>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a47      	ldr	r2, [pc, #284]	@ (8005324 <HAL_DMA_Abort_IT+0x1d8>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d004      	beq.n	8005214 <HAL_DMA_Abort_IT+0xc8>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a46      	ldr	r2, [pc, #280]	@ (8005328 <HAL_DMA_Abort_IT+0x1dc>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d101      	bne.n	8005218 <HAL_DMA_Abort_IT+0xcc>
 8005214:	2301      	movs	r3, #1
 8005216:	e000      	b.n	800521a <HAL_DMA_Abort_IT+0xce>
 8005218:	2300      	movs	r3, #0
 800521a:	2b00      	cmp	r3, #0
 800521c:	f000 8086 	beq.w	800532c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2204      	movs	r2, #4
 8005224:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a2f      	ldr	r2, [pc, #188]	@ (80052ec <HAL_DMA_Abort_IT+0x1a0>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d04a      	beq.n	80052c8 <HAL_DMA_Abort_IT+0x17c>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a2e      	ldr	r2, [pc, #184]	@ (80052f0 <HAL_DMA_Abort_IT+0x1a4>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d045      	beq.n	80052c8 <HAL_DMA_Abort_IT+0x17c>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a2c      	ldr	r2, [pc, #176]	@ (80052f4 <HAL_DMA_Abort_IT+0x1a8>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d040      	beq.n	80052c8 <HAL_DMA_Abort_IT+0x17c>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a2b      	ldr	r2, [pc, #172]	@ (80052f8 <HAL_DMA_Abort_IT+0x1ac>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d03b      	beq.n	80052c8 <HAL_DMA_Abort_IT+0x17c>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a29      	ldr	r2, [pc, #164]	@ (80052fc <HAL_DMA_Abort_IT+0x1b0>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d036      	beq.n	80052c8 <HAL_DMA_Abort_IT+0x17c>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a28      	ldr	r2, [pc, #160]	@ (8005300 <HAL_DMA_Abort_IT+0x1b4>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d031      	beq.n	80052c8 <HAL_DMA_Abort_IT+0x17c>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a26      	ldr	r2, [pc, #152]	@ (8005304 <HAL_DMA_Abort_IT+0x1b8>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d02c      	beq.n	80052c8 <HAL_DMA_Abort_IT+0x17c>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a25      	ldr	r2, [pc, #148]	@ (8005308 <HAL_DMA_Abort_IT+0x1bc>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d027      	beq.n	80052c8 <HAL_DMA_Abort_IT+0x17c>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a23      	ldr	r2, [pc, #140]	@ (800530c <HAL_DMA_Abort_IT+0x1c0>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d022      	beq.n	80052c8 <HAL_DMA_Abort_IT+0x17c>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a22      	ldr	r2, [pc, #136]	@ (8005310 <HAL_DMA_Abort_IT+0x1c4>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d01d      	beq.n	80052c8 <HAL_DMA_Abort_IT+0x17c>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a20      	ldr	r2, [pc, #128]	@ (8005314 <HAL_DMA_Abort_IT+0x1c8>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d018      	beq.n	80052c8 <HAL_DMA_Abort_IT+0x17c>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a1f      	ldr	r2, [pc, #124]	@ (8005318 <HAL_DMA_Abort_IT+0x1cc>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d013      	beq.n	80052c8 <HAL_DMA_Abort_IT+0x17c>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a1d      	ldr	r2, [pc, #116]	@ (800531c <HAL_DMA_Abort_IT+0x1d0>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d00e      	beq.n	80052c8 <HAL_DMA_Abort_IT+0x17c>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a1c      	ldr	r2, [pc, #112]	@ (8005320 <HAL_DMA_Abort_IT+0x1d4>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d009      	beq.n	80052c8 <HAL_DMA_Abort_IT+0x17c>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a1a      	ldr	r2, [pc, #104]	@ (8005324 <HAL_DMA_Abort_IT+0x1d8>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d004      	beq.n	80052c8 <HAL_DMA_Abort_IT+0x17c>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a19      	ldr	r2, [pc, #100]	@ (8005328 <HAL_DMA_Abort_IT+0x1dc>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d108      	bne.n	80052da <HAL_DMA_Abort_IT+0x18e>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 0201 	bic.w	r2, r2, #1
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	e178      	b.n	80055cc <HAL_DMA_Abort_IT+0x480>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f022 0201 	bic.w	r2, r2, #1
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	e16f      	b.n	80055cc <HAL_DMA_Abort_IT+0x480>
 80052ec:	40020010 	.word	0x40020010
 80052f0:	40020028 	.word	0x40020028
 80052f4:	40020040 	.word	0x40020040
 80052f8:	40020058 	.word	0x40020058
 80052fc:	40020070 	.word	0x40020070
 8005300:	40020088 	.word	0x40020088
 8005304:	400200a0 	.word	0x400200a0
 8005308:	400200b8 	.word	0x400200b8
 800530c:	40020410 	.word	0x40020410
 8005310:	40020428 	.word	0x40020428
 8005314:	40020440 	.word	0x40020440
 8005318:	40020458 	.word	0x40020458
 800531c:	40020470 	.word	0x40020470
 8005320:	40020488 	.word	0x40020488
 8005324:	400204a0 	.word	0x400204a0
 8005328:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 020e 	bic.w	r2, r2, #14
 800533a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a6c      	ldr	r2, [pc, #432]	@ (80054f4 <HAL_DMA_Abort_IT+0x3a8>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d04a      	beq.n	80053dc <HAL_DMA_Abort_IT+0x290>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a6b      	ldr	r2, [pc, #428]	@ (80054f8 <HAL_DMA_Abort_IT+0x3ac>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d045      	beq.n	80053dc <HAL_DMA_Abort_IT+0x290>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a69      	ldr	r2, [pc, #420]	@ (80054fc <HAL_DMA_Abort_IT+0x3b0>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d040      	beq.n	80053dc <HAL_DMA_Abort_IT+0x290>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a68      	ldr	r2, [pc, #416]	@ (8005500 <HAL_DMA_Abort_IT+0x3b4>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d03b      	beq.n	80053dc <HAL_DMA_Abort_IT+0x290>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a66      	ldr	r2, [pc, #408]	@ (8005504 <HAL_DMA_Abort_IT+0x3b8>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d036      	beq.n	80053dc <HAL_DMA_Abort_IT+0x290>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a65      	ldr	r2, [pc, #404]	@ (8005508 <HAL_DMA_Abort_IT+0x3bc>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d031      	beq.n	80053dc <HAL_DMA_Abort_IT+0x290>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a63      	ldr	r2, [pc, #396]	@ (800550c <HAL_DMA_Abort_IT+0x3c0>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d02c      	beq.n	80053dc <HAL_DMA_Abort_IT+0x290>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a62      	ldr	r2, [pc, #392]	@ (8005510 <HAL_DMA_Abort_IT+0x3c4>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d027      	beq.n	80053dc <HAL_DMA_Abort_IT+0x290>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a60      	ldr	r2, [pc, #384]	@ (8005514 <HAL_DMA_Abort_IT+0x3c8>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d022      	beq.n	80053dc <HAL_DMA_Abort_IT+0x290>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a5f      	ldr	r2, [pc, #380]	@ (8005518 <HAL_DMA_Abort_IT+0x3cc>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d01d      	beq.n	80053dc <HAL_DMA_Abort_IT+0x290>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a5d      	ldr	r2, [pc, #372]	@ (800551c <HAL_DMA_Abort_IT+0x3d0>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d018      	beq.n	80053dc <HAL_DMA_Abort_IT+0x290>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a5c      	ldr	r2, [pc, #368]	@ (8005520 <HAL_DMA_Abort_IT+0x3d4>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d013      	beq.n	80053dc <HAL_DMA_Abort_IT+0x290>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a5a      	ldr	r2, [pc, #360]	@ (8005524 <HAL_DMA_Abort_IT+0x3d8>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d00e      	beq.n	80053dc <HAL_DMA_Abort_IT+0x290>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a59      	ldr	r2, [pc, #356]	@ (8005528 <HAL_DMA_Abort_IT+0x3dc>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d009      	beq.n	80053dc <HAL_DMA_Abort_IT+0x290>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a57      	ldr	r2, [pc, #348]	@ (800552c <HAL_DMA_Abort_IT+0x3e0>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d004      	beq.n	80053dc <HAL_DMA_Abort_IT+0x290>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a56      	ldr	r2, [pc, #344]	@ (8005530 <HAL_DMA_Abort_IT+0x3e4>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d108      	bne.n	80053ee <HAL_DMA_Abort_IT+0x2a2>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f022 0201 	bic.w	r2, r2, #1
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	e007      	b.n	80053fe <HAL_DMA_Abort_IT+0x2b2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0201 	bic.w	r2, r2, #1
 80053fc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a3c      	ldr	r2, [pc, #240]	@ (80054f4 <HAL_DMA_Abort_IT+0x3a8>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d072      	beq.n	80054ee <HAL_DMA_Abort_IT+0x3a2>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a3a      	ldr	r2, [pc, #232]	@ (80054f8 <HAL_DMA_Abort_IT+0x3ac>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d06d      	beq.n	80054ee <HAL_DMA_Abort_IT+0x3a2>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a39      	ldr	r2, [pc, #228]	@ (80054fc <HAL_DMA_Abort_IT+0x3b0>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d068      	beq.n	80054ee <HAL_DMA_Abort_IT+0x3a2>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a37      	ldr	r2, [pc, #220]	@ (8005500 <HAL_DMA_Abort_IT+0x3b4>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d063      	beq.n	80054ee <HAL_DMA_Abort_IT+0x3a2>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a36      	ldr	r2, [pc, #216]	@ (8005504 <HAL_DMA_Abort_IT+0x3b8>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d05e      	beq.n	80054ee <HAL_DMA_Abort_IT+0x3a2>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a34      	ldr	r2, [pc, #208]	@ (8005508 <HAL_DMA_Abort_IT+0x3bc>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d059      	beq.n	80054ee <HAL_DMA_Abort_IT+0x3a2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a33      	ldr	r2, [pc, #204]	@ (800550c <HAL_DMA_Abort_IT+0x3c0>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d054      	beq.n	80054ee <HAL_DMA_Abort_IT+0x3a2>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a31      	ldr	r2, [pc, #196]	@ (8005510 <HAL_DMA_Abort_IT+0x3c4>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d04f      	beq.n	80054ee <HAL_DMA_Abort_IT+0x3a2>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a30      	ldr	r2, [pc, #192]	@ (8005514 <HAL_DMA_Abort_IT+0x3c8>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d04a      	beq.n	80054ee <HAL_DMA_Abort_IT+0x3a2>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a2e      	ldr	r2, [pc, #184]	@ (8005518 <HAL_DMA_Abort_IT+0x3cc>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d045      	beq.n	80054ee <HAL_DMA_Abort_IT+0x3a2>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a2d      	ldr	r2, [pc, #180]	@ (800551c <HAL_DMA_Abort_IT+0x3d0>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d040      	beq.n	80054ee <HAL_DMA_Abort_IT+0x3a2>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a2b      	ldr	r2, [pc, #172]	@ (8005520 <HAL_DMA_Abort_IT+0x3d4>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d03b      	beq.n	80054ee <HAL_DMA_Abort_IT+0x3a2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a2a      	ldr	r2, [pc, #168]	@ (8005524 <HAL_DMA_Abort_IT+0x3d8>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d036      	beq.n	80054ee <HAL_DMA_Abort_IT+0x3a2>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a28      	ldr	r2, [pc, #160]	@ (8005528 <HAL_DMA_Abort_IT+0x3dc>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d031      	beq.n	80054ee <HAL_DMA_Abort_IT+0x3a2>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a27      	ldr	r2, [pc, #156]	@ (800552c <HAL_DMA_Abort_IT+0x3e0>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d02c      	beq.n	80054ee <HAL_DMA_Abort_IT+0x3a2>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a25      	ldr	r2, [pc, #148]	@ (8005530 <HAL_DMA_Abort_IT+0x3e4>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d027      	beq.n	80054ee <HAL_DMA_Abort_IT+0x3a2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a24      	ldr	r2, [pc, #144]	@ (8005534 <HAL_DMA_Abort_IT+0x3e8>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d022      	beq.n	80054ee <HAL_DMA_Abort_IT+0x3a2>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a22      	ldr	r2, [pc, #136]	@ (8005538 <HAL_DMA_Abort_IT+0x3ec>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d01d      	beq.n	80054ee <HAL_DMA_Abort_IT+0x3a2>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a21      	ldr	r2, [pc, #132]	@ (800553c <HAL_DMA_Abort_IT+0x3f0>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d018      	beq.n	80054ee <HAL_DMA_Abort_IT+0x3a2>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a1f      	ldr	r2, [pc, #124]	@ (8005540 <HAL_DMA_Abort_IT+0x3f4>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d013      	beq.n	80054ee <HAL_DMA_Abort_IT+0x3a2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a1e      	ldr	r2, [pc, #120]	@ (8005544 <HAL_DMA_Abort_IT+0x3f8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d00e      	beq.n	80054ee <HAL_DMA_Abort_IT+0x3a2>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a1c      	ldr	r2, [pc, #112]	@ (8005548 <HAL_DMA_Abort_IT+0x3fc>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d009      	beq.n	80054ee <HAL_DMA_Abort_IT+0x3a2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a1b      	ldr	r2, [pc, #108]	@ (800554c <HAL_DMA_Abort_IT+0x400>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d004      	beq.n	80054ee <HAL_DMA_Abort_IT+0x3a2>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a19      	ldr	r2, [pc, #100]	@ (8005550 <HAL_DMA_Abort_IT+0x404>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d132      	bne.n	8005554 <HAL_DMA_Abort_IT+0x408>
 80054ee:	2301      	movs	r3, #1
 80054f0:	e031      	b.n	8005556 <HAL_DMA_Abort_IT+0x40a>
 80054f2:	bf00      	nop
 80054f4:	40020010 	.word	0x40020010
 80054f8:	40020028 	.word	0x40020028
 80054fc:	40020040 	.word	0x40020040
 8005500:	40020058 	.word	0x40020058
 8005504:	40020070 	.word	0x40020070
 8005508:	40020088 	.word	0x40020088
 800550c:	400200a0 	.word	0x400200a0
 8005510:	400200b8 	.word	0x400200b8
 8005514:	40020410 	.word	0x40020410
 8005518:	40020428 	.word	0x40020428
 800551c:	40020440 	.word	0x40020440
 8005520:	40020458 	.word	0x40020458
 8005524:	40020470 	.word	0x40020470
 8005528:	40020488 	.word	0x40020488
 800552c:	400204a0 	.word	0x400204a0
 8005530:	400204b8 	.word	0x400204b8
 8005534:	58025408 	.word	0x58025408
 8005538:	5802541c 	.word	0x5802541c
 800553c:	58025430 	.word	0x58025430
 8005540:	58025444 	.word	0x58025444
 8005544:	58025458 	.word	0x58025458
 8005548:	5802546c 	.word	0x5802546c
 800554c:	58025480 	.word	0x58025480
 8005550:	58025494 	.word	0x58025494
 8005554:	2300      	movs	r3, #0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d028      	beq.n	80055ac <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005564:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005568:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800556e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005574:	f003 031f 	and.w	r3, r3, #31
 8005578:	2201      	movs	r2, #1
 800557a:	409a      	lsls	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005588:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00c      	beq.n	80055ac <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800559c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055a0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80055aa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d003      	beq.n	80055cc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop

080055d8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b08a      	sub	sp, #40	@ 0x28
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80055e4:	4b67      	ldr	r3, [pc, #412]	@ (8005784 <HAL_DMA_IRQHandler+0x1ac>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a67      	ldr	r2, [pc, #412]	@ (8005788 <HAL_DMA_IRQHandler+0x1b0>)
 80055ea:	fba2 2303 	umull	r2, r3, r2, r3
 80055ee:	0a9b      	lsrs	r3, r3, #10
 80055f0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055f6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055fc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80055fe:	6a3b      	ldr	r3, [r7, #32]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a5f      	ldr	r2, [pc, #380]	@ (800578c <HAL_DMA_IRQHandler+0x1b4>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d04a      	beq.n	80056aa <HAL_DMA_IRQHandler+0xd2>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a5d      	ldr	r2, [pc, #372]	@ (8005790 <HAL_DMA_IRQHandler+0x1b8>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d045      	beq.n	80056aa <HAL_DMA_IRQHandler+0xd2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a5c      	ldr	r2, [pc, #368]	@ (8005794 <HAL_DMA_IRQHandler+0x1bc>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d040      	beq.n	80056aa <HAL_DMA_IRQHandler+0xd2>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a5a      	ldr	r2, [pc, #360]	@ (8005798 <HAL_DMA_IRQHandler+0x1c0>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d03b      	beq.n	80056aa <HAL_DMA_IRQHandler+0xd2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a59      	ldr	r2, [pc, #356]	@ (800579c <HAL_DMA_IRQHandler+0x1c4>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d036      	beq.n	80056aa <HAL_DMA_IRQHandler+0xd2>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a57      	ldr	r2, [pc, #348]	@ (80057a0 <HAL_DMA_IRQHandler+0x1c8>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d031      	beq.n	80056aa <HAL_DMA_IRQHandler+0xd2>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a56      	ldr	r2, [pc, #344]	@ (80057a4 <HAL_DMA_IRQHandler+0x1cc>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d02c      	beq.n	80056aa <HAL_DMA_IRQHandler+0xd2>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a54      	ldr	r2, [pc, #336]	@ (80057a8 <HAL_DMA_IRQHandler+0x1d0>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d027      	beq.n	80056aa <HAL_DMA_IRQHandler+0xd2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a53      	ldr	r2, [pc, #332]	@ (80057ac <HAL_DMA_IRQHandler+0x1d4>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d022      	beq.n	80056aa <HAL_DMA_IRQHandler+0xd2>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a51      	ldr	r2, [pc, #324]	@ (80057b0 <HAL_DMA_IRQHandler+0x1d8>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d01d      	beq.n	80056aa <HAL_DMA_IRQHandler+0xd2>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a50      	ldr	r2, [pc, #320]	@ (80057b4 <HAL_DMA_IRQHandler+0x1dc>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d018      	beq.n	80056aa <HAL_DMA_IRQHandler+0xd2>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a4e      	ldr	r2, [pc, #312]	@ (80057b8 <HAL_DMA_IRQHandler+0x1e0>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d013      	beq.n	80056aa <HAL_DMA_IRQHandler+0xd2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a4d      	ldr	r2, [pc, #308]	@ (80057bc <HAL_DMA_IRQHandler+0x1e4>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d00e      	beq.n	80056aa <HAL_DMA_IRQHandler+0xd2>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a4b      	ldr	r2, [pc, #300]	@ (80057c0 <HAL_DMA_IRQHandler+0x1e8>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d009      	beq.n	80056aa <HAL_DMA_IRQHandler+0xd2>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a4a      	ldr	r2, [pc, #296]	@ (80057c4 <HAL_DMA_IRQHandler+0x1ec>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d004      	beq.n	80056aa <HAL_DMA_IRQHandler+0xd2>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a48      	ldr	r2, [pc, #288]	@ (80057c8 <HAL_DMA_IRQHandler+0x1f0>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d101      	bne.n	80056ae <HAL_DMA_IRQHandler+0xd6>
 80056aa:	2301      	movs	r3, #1
 80056ac:	e000      	b.n	80056b0 <HAL_DMA_IRQHandler+0xd8>
 80056ae:	2300      	movs	r3, #0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 842b 	beq.w	8005f0c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056ba:	f003 031f 	and.w	r3, r3, #31
 80056be:	2208      	movs	r2, #8
 80056c0:	409a      	lsls	r2, r3
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	4013      	ands	r3, r2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f000 80a2 	beq.w	8005810 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a2e      	ldr	r2, [pc, #184]	@ (800578c <HAL_DMA_IRQHandler+0x1b4>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d04a      	beq.n	800576c <HAL_DMA_IRQHandler+0x194>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a2d      	ldr	r2, [pc, #180]	@ (8005790 <HAL_DMA_IRQHandler+0x1b8>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d045      	beq.n	800576c <HAL_DMA_IRQHandler+0x194>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a2b      	ldr	r2, [pc, #172]	@ (8005794 <HAL_DMA_IRQHandler+0x1bc>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d040      	beq.n	800576c <HAL_DMA_IRQHandler+0x194>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a2a      	ldr	r2, [pc, #168]	@ (8005798 <HAL_DMA_IRQHandler+0x1c0>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d03b      	beq.n	800576c <HAL_DMA_IRQHandler+0x194>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a28      	ldr	r2, [pc, #160]	@ (800579c <HAL_DMA_IRQHandler+0x1c4>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d036      	beq.n	800576c <HAL_DMA_IRQHandler+0x194>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a27      	ldr	r2, [pc, #156]	@ (80057a0 <HAL_DMA_IRQHandler+0x1c8>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d031      	beq.n	800576c <HAL_DMA_IRQHandler+0x194>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a25      	ldr	r2, [pc, #148]	@ (80057a4 <HAL_DMA_IRQHandler+0x1cc>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d02c      	beq.n	800576c <HAL_DMA_IRQHandler+0x194>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a24      	ldr	r2, [pc, #144]	@ (80057a8 <HAL_DMA_IRQHandler+0x1d0>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d027      	beq.n	800576c <HAL_DMA_IRQHandler+0x194>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a22      	ldr	r2, [pc, #136]	@ (80057ac <HAL_DMA_IRQHandler+0x1d4>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d022      	beq.n	800576c <HAL_DMA_IRQHandler+0x194>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a21      	ldr	r2, [pc, #132]	@ (80057b0 <HAL_DMA_IRQHandler+0x1d8>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d01d      	beq.n	800576c <HAL_DMA_IRQHandler+0x194>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a1f      	ldr	r2, [pc, #124]	@ (80057b4 <HAL_DMA_IRQHandler+0x1dc>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d018      	beq.n	800576c <HAL_DMA_IRQHandler+0x194>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a1e      	ldr	r2, [pc, #120]	@ (80057b8 <HAL_DMA_IRQHandler+0x1e0>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d013      	beq.n	800576c <HAL_DMA_IRQHandler+0x194>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a1c      	ldr	r2, [pc, #112]	@ (80057bc <HAL_DMA_IRQHandler+0x1e4>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d00e      	beq.n	800576c <HAL_DMA_IRQHandler+0x194>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a1b      	ldr	r2, [pc, #108]	@ (80057c0 <HAL_DMA_IRQHandler+0x1e8>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d009      	beq.n	800576c <HAL_DMA_IRQHandler+0x194>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a19      	ldr	r2, [pc, #100]	@ (80057c4 <HAL_DMA_IRQHandler+0x1ec>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d004      	beq.n	800576c <HAL_DMA_IRQHandler+0x194>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a18      	ldr	r2, [pc, #96]	@ (80057c8 <HAL_DMA_IRQHandler+0x1f0>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d12f      	bne.n	80057cc <HAL_DMA_IRQHandler+0x1f4>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0304 	and.w	r3, r3, #4
 8005776:	2b00      	cmp	r3, #0
 8005778:	bf14      	ite	ne
 800577a:	2301      	movne	r3, #1
 800577c:	2300      	moveq	r3, #0
 800577e:	b2db      	uxtb	r3, r3
 8005780:	e02e      	b.n	80057e0 <HAL_DMA_IRQHandler+0x208>
 8005782:	bf00      	nop
 8005784:	24000004 	.word	0x24000004
 8005788:	1b4e81b5 	.word	0x1b4e81b5
 800578c:	40020010 	.word	0x40020010
 8005790:	40020028 	.word	0x40020028
 8005794:	40020040 	.word	0x40020040
 8005798:	40020058 	.word	0x40020058
 800579c:	40020070 	.word	0x40020070
 80057a0:	40020088 	.word	0x40020088
 80057a4:	400200a0 	.word	0x400200a0
 80057a8:	400200b8 	.word	0x400200b8
 80057ac:	40020410 	.word	0x40020410
 80057b0:	40020428 	.word	0x40020428
 80057b4:	40020440 	.word	0x40020440
 80057b8:	40020458 	.word	0x40020458
 80057bc:	40020470 	.word	0x40020470
 80057c0:	40020488 	.word	0x40020488
 80057c4:	400204a0 	.word	0x400204a0
 80057c8:	400204b8 	.word	0x400204b8
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0308 	and.w	r3, r3, #8
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	bf14      	ite	ne
 80057da:	2301      	movne	r3, #1
 80057dc:	2300      	moveq	r3, #0
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d015      	beq.n	8005810 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f022 0204 	bic.w	r2, r2, #4
 80057f2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057f8:	f003 031f 	and.w	r3, r3, #31
 80057fc:	2208      	movs	r2, #8
 80057fe:	409a      	lsls	r2, r3
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005808:	f043 0201 	orr.w	r2, r3, #1
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005814:	f003 031f 	and.w	r3, r3, #31
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	fa22 f303 	lsr.w	r3, r2, r3
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	d06e      	beq.n	8005904 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a69      	ldr	r2, [pc, #420]	@ (80059d0 <HAL_DMA_IRQHandler+0x3f8>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d04a      	beq.n	80058c6 <HAL_DMA_IRQHandler+0x2ee>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a67      	ldr	r2, [pc, #412]	@ (80059d4 <HAL_DMA_IRQHandler+0x3fc>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d045      	beq.n	80058c6 <HAL_DMA_IRQHandler+0x2ee>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a66      	ldr	r2, [pc, #408]	@ (80059d8 <HAL_DMA_IRQHandler+0x400>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d040      	beq.n	80058c6 <HAL_DMA_IRQHandler+0x2ee>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a64      	ldr	r2, [pc, #400]	@ (80059dc <HAL_DMA_IRQHandler+0x404>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d03b      	beq.n	80058c6 <HAL_DMA_IRQHandler+0x2ee>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a63      	ldr	r2, [pc, #396]	@ (80059e0 <HAL_DMA_IRQHandler+0x408>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d036      	beq.n	80058c6 <HAL_DMA_IRQHandler+0x2ee>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a61      	ldr	r2, [pc, #388]	@ (80059e4 <HAL_DMA_IRQHandler+0x40c>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d031      	beq.n	80058c6 <HAL_DMA_IRQHandler+0x2ee>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a60      	ldr	r2, [pc, #384]	@ (80059e8 <HAL_DMA_IRQHandler+0x410>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d02c      	beq.n	80058c6 <HAL_DMA_IRQHandler+0x2ee>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a5e      	ldr	r2, [pc, #376]	@ (80059ec <HAL_DMA_IRQHandler+0x414>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d027      	beq.n	80058c6 <HAL_DMA_IRQHandler+0x2ee>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a5d      	ldr	r2, [pc, #372]	@ (80059f0 <HAL_DMA_IRQHandler+0x418>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d022      	beq.n	80058c6 <HAL_DMA_IRQHandler+0x2ee>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a5b      	ldr	r2, [pc, #364]	@ (80059f4 <HAL_DMA_IRQHandler+0x41c>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d01d      	beq.n	80058c6 <HAL_DMA_IRQHandler+0x2ee>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a5a      	ldr	r2, [pc, #360]	@ (80059f8 <HAL_DMA_IRQHandler+0x420>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d018      	beq.n	80058c6 <HAL_DMA_IRQHandler+0x2ee>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a58      	ldr	r2, [pc, #352]	@ (80059fc <HAL_DMA_IRQHandler+0x424>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d013      	beq.n	80058c6 <HAL_DMA_IRQHandler+0x2ee>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a57      	ldr	r2, [pc, #348]	@ (8005a00 <HAL_DMA_IRQHandler+0x428>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d00e      	beq.n	80058c6 <HAL_DMA_IRQHandler+0x2ee>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a55      	ldr	r2, [pc, #340]	@ (8005a04 <HAL_DMA_IRQHandler+0x42c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d009      	beq.n	80058c6 <HAL_DMA_IRQHandler+0x2ee>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a54      	ldr	r2, [pc, #336]	@ (8005a08 <HAL_DMA_IRQHandler+0x430>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d004      	beq.n	80058c6 <HAL_DMA_IRQHandler+0x2ee>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a52      	ldr	r2, [pc, #328]	@ (8005a0c <HAL_DMA_IRQHandler+0x434>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d10a      	bne.n	80058dc <HAL_DMA_IRQHandler+0x304>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	bf14      	ite	ne
 80058d4:	2301      	movne	r3, #1
 80058d6:	2300      	moveq	r3, #0
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	e003      	b.n	80058e4 <HAL_DMA_IRQHandler+0x30c>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2300      	movs	r3, #0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00d      	beq.n	8005904 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058ec:	f003 031f 	and.w	r3, r3, #31
 80058f0:	2201      	movs	r2, #1
 80058f2:	409a      	lsls	r2, r3
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058fc:	f043 0202 	orr.w	r2, r3, #2
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005908:	f003 031f 	and.w	r3, r3, #31
 800590c:	2204      	movs	r2, #4
 800590e:	409a      	lsls	r2, r3
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	4013      	ands	r3, r2
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 808f 	beq.w	8005a38 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a2c      	ldr	r2, [pc, #176]	@ (80059d0 <HAL_DMA_IRQHandler+0x3f8>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d04a      	beq.n	80059ba <HAL_DMA_IRQHandler+0x3e2>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a2a      	ldr	r2, [pc, #168]	@ (80059d4 <HAL_DMA_IRQHandler+0x3fc>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d045      	beq.n	80059ba <HAL_DMA_IRQHandler+0x3e2>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a29      	ldr	r2, [pc, #164]	@ (80059d8 <HAL_DMA_IRQHandler+0x400>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d040      	beq.n	80059ba <HAL_DMA_IRQHandler+0x3e2>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a27      	ldr	r2, [pc, #156]	@ (80059dc <HAL_DMA_IRQHandler+0x404>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d03b      	beq.n	80059ba <HAL_DMA_IRQHandler+0x3e2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a26      	ldr	r2, [pc, #152]	@ (80059e0 <HAL_DMA_IRQHandler+0x408>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d036      	beq.n	80059ba <HAL_DMA_IRQHandler+0x3e2>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a24      	ldr	r2, [pc, #144]	@ (80059e4 <HAL_DMA_IRQHandler+0x40c>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d031      	beq.n	80059ba <HAL_DMA_IRQHandler+0x3e2>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a23      	ldr	r2, [pc, #140]	@ (80059e8 <HAL_DMA_IRQHandler+0x410>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d02c      	beq.n	80059ba <HAL_DMA_IRQHandler+0x3e2>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a21      	ldr	r2, [pc, #132]	@ (80059ec <HAL_DMA_IRQHandler+0x414>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d027      	beq.n	80059ba <HAL_DMA_IRQHandler+0x3e2>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a20      	ldr	r2, [pc, #128]	@ (80059f0 <HAL_DMA_IRQHandler+0x418>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d022      	beq.n	80059ba <HAL_DMA_IRQHandler+0x3e2>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a1e      	ldr	r2, [pc, #120]	@ (80059f4 <HAL_DMA_IRQHandler+0x41c>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d01d      	beq.n	80059ba <HAL_DMA_IRQHandler+0x3e2>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a1d      	ldr	r2, [pc, #116]	@ (80059f8 <HAL_DMA_IRQHandler+0x420>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d018      	beq.n	80059ba <HAL_DMA_IRQHandler+0x3e2>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a1b      	ldr	r2, [pc, #108]	@ (80059fc <HAL_DMA_IRQHandler+0x424>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d013      	beq.n	80059ba <HAL_DMA_IRQHandler+0x3e2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a1a      	ldr	r2, [pc, #104]	@ (8005a00 <HAL_DMA_IRQHandler+0x428>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d00e      	beq.n	80059ba <HAL_DMA_IRQHandler+0x3e2>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a18      	ldr	r2, [pc, #96]	@ (8005a04 <HAL_DMA_IRQHandler+0x42c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d009      	beq.n	80059ba <HAL_DMA_IRQHandler+0x3e2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a17      	ldr	r2, [pc, #92]	@ (8005a08 <HAL_DMA_IRQHandler+0x430>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d004      	beq.n	80059ba <HAL_DMA_IRQHandler+0x3e2>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a15      	ldr	r2, [pc, #84]	@ (8005a0c <HAL_DMA_IRQHandler+0x434>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d12a      	bne.n	8005a10 <HAL_DMA_IRQHandler+0x438>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	bf14      	ite	ne
 80059c8:	2301      	movne	r3, #1
 80059ca:	2300      	moveq	r3, #0
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	e023      	b.n	8005a18 <HAL_DMA_IRQHandler+0x440>
 80059d0:	40020010 	.word	0x40020010
 80059d4:	40020028 	.word	0x40020028
 80059d8:	40020040 	.word	0x40020040
 80059dc:	40020058 	.word	0x40020058
 80059e0:	40020070 	.word	0x40020070
 80059e4:	40020088 	.word	0x40020088
 80059e8:	400200a0 	.word	0x400200a0
 80059ec:	400200b8 	.word	0x400200b8
 80059f0:	40020410 	.word	0x40020410
 80059f4:	40020428 	.word	0x40020428
 80059f8:	40020440 	.word	0x40020440
 80059fc:	40020458 	.word	0x40020458
 8005a00:	40020470 	.word	0x40020470
 8005a04:	40020488 	.word	0x40020488
 8005a08:	400204a0 	.word	0x400204a0
 8005a0c:	400204b8 	.word	0x400204b8
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2300      	movs	r3, #0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00d      	beq.n	8005a38 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a20:	f003 031f 	and.w	r3, r3, #31
 8005a24:	2204      	movs	r2, #4
 8005a26:	409a      	lsls	r2, r3
 8005a28:	6a3b      	ldr	r3, [r7, #32]
 8005a2a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a30:	f043 0204 	orr.w	r2, r3, #4
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a3c:	f003 031f 	and.w	r3, r3, #31
 8005a40:	2210      	movs	r2, #16
 8005a42:	409a      	lsls	r2, r3
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	4013      	ands	r3, r2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 80a6 	beq.w	8005b9a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a85      	ldr	r2, [pc, #532]	@ (8005c68 <HAL_DMA_IRQHandler+0x690>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d04a      	beq.n	8005aee <HAL_DMA_IRQHandler+0x516>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a83      	ldr	r2, [pc, #524]	@ (8005c6c <HAL_DMA_IRQHandler+0x694>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d045      	beq.n	8005aee <HAL_DMA_IRQHandler+0x516>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a82      	ldr	r2, [pc, #520]	@ (8005c70 <HAL_DMA_IRQHandler+0x698>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d040      	beq.n	8005aee <HAL_DMA_IRQHandler+0x516>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a80      	ldr	r2, [pc, #512]	@ (8005c74 <HAL_DMA_IRQHandler+0x69c>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d03b      	beq.n	8005aee <HAL_DMA_IRQHandler+0x516>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a7f      	ldr	r2, [pc, #508]	@ (8005c78 <HAL_DMA_IRQHandler+0x6a0>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d036      	beq.n	8005aee <HAL_DMA_IRQHandler+0x516>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a7d      	ldr	r2, [pc, #500]	@ (8005c7c <HAL_DMA_IRQHandler+0x6a4>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d031      	beq.n	8005aee <HAL_DMA_IRQHandler+0x516>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a7c      	ldr	r2, [pc, #496]	@ (8005c80 <HAL_DMA_IRQHandler+0x6a8>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d02c      	beq.n	8005aee <HAL_DMA_IRQHandler+0x516>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a7a      	ldr	r2, [pc, #488]	@ (8005c84 <HAL_DMA_IRQHandler+0x6ac>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d027      	beq.n	8005aee <HAL_DMA_IRQHandler+0x516>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a79      	ldr	r2, [pc, #484]	@ (8005c88 <HAL_DMA_IRQHandler+0x6b0>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d022      	beq.n	8005aee <HAL_DMA_IRQHandler+0x516>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a77      	ldr	r2, [pc, #476]	@ (8005c8c <HAL_DMA_IRQHandler+0x6b4>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d01d      	beq.n	8005aee <HAL_DMA_IRQHandler+0x516>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a76      	ldr	r2, [pc, #472]	@ (8005c90 <HAL_DMA_IRQHandler+0x6b8>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d018      	beq.n	8005aee <HAL_DMA_IRQHandler+0x516>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a74      	ldr	r2, [pc, #464]	@ (8005c94 <HAL_DMA_IRQHandler+0x6bc>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d013      	beq.n	8005aee <HAL_DMA_IRQHandler+0x516>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a73      	ldr	r2, [pc, #460]	@ (8005c98 <HAL_DMA_IRQHandler+0x6c0>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d00e      	beq.n	8005aee <HAL_DMA_IRQHandler+0x516>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a71      	ldr	r2, [pc, #452]	@ (8005c9c <HAL_DMA_IRQHandler+0x6c4>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d009      	beq.n	8005aee <HAL_DMA_IRQHandler+0x516>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a70      	ldr	r2, [pc, #448]	@ (8005ca0 <HAL_DMA_IRQHandler+0x6c8>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d004      	beq.n	8005aee <HAL_DMA_IRQHandler+0x516>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a6e      	ldr	r2, [pc, #440]	@ (8005ca4 <HAL_DMA_IRQHandler+0x6cc>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d10a      	bne.n	8005b04 <HAL_DMA_IRQHandler+0x52c>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0308 	and.w	r3, r3, #8
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	bf14      	ite	ne
 8005afc:	2301      	movne	r3, #1
 8005afe:	2300      	moveq	r3, #0
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	e009      	b.n	8005b18 <HAL_DMA_IRQHandler+0x540>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0304 	and.w	r3, r3, #4
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	bf14      	ite	ne
 8005b12:	2301      	movne	r3, #1
 8005b14:	2300      	moveq	r3, #0
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d03e      	beq.n	8005b9a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b20:	f003 031f 	and.w	r3, r3, #31
 8005b24:	2210      	movs	r2, #16
 8005b26:	409a      	lsls	r2, r3
 8005b28:	6a3b      	ldr	r3, [r7, #32]
 8005b2a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d018      	beq.n	8005b6c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d108      	bne.n	8005b5a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d024      	beq.n	8005b9a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	4798      	blx	r3
 8005b58:	e01f      	b.n	8005b9a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d01b      	beq.n	8005b9a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	4798      	blx	r3
 8005b6a:	e016      	b.n	8005b9a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d107      	bne.n	8005b8a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 0208 	bic.w	r2, r2, #8
 8005b88:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b9e:	f003 031f 	and.w	r3, r3, #31
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	409a      	lsls	r2, r3
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	4013      	ands	r3, r2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 8110 	beq.w	8005dd0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a2c      	ldr	r2, [pc, #176]	@ (8005c68 <HAL_DMA_IRQHandler+0x690>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d04a      	beq.n	8005c50 <HAL_DMA_IRQHandler+0x678>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a2b      	ldr	r2, [pc, #172]	@ (8005c6c <HAL_DMA_IRQHandler+0x694>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d045      	beq.n	8005c50 <HAL_DMA_IRQHandler+0x678>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a29      	ldr	r2, [pc, #164]	@ (8005c70 <HAL_DMA_IRQHandler+0x698>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d040      	beq.n	8005c50 <HAL_DMA_IRQHandler+0x678>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a28      	ldr	r2, [pc, #160]	@ (8005c74 <HAL_DMA_IRQHandler+0x69c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d03b      	beq.n	8005c50 <HAL_DMA_IRQHandler+0x678>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a26      	ldr	r2, [pc, #152]	@ (8005c78 <HAL_DMA_IRQHandler+0x6a0>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d036      	beq.n	8005c50 <HAL_DMA_IRQHandler+0x678>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a25      	ldr	r2, [pc, #148]	@ (8005c7c <HAL_DMA_IRQHandler+0x6a4>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d031      	beq.n	8005c50 <HAL_DMA_IRQHandler+0x678>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a23      	ldr	r2, [pc, #140]	@ (8005c80 <HAL_DMA_IRQHandler+0x6a8>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d02c      	beq.n	8005c50 <HAL_DMA_IRQHandler+0x678>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a22      	ldr	r2, [pc, #136]	@ (8005c84 <HAL_DMA_IRQHandler+0x6ac>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d027      	beq.n	8005c50 <HAL_DMA_IRQHandler+0x678>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a20      	ldr	r2, [pc, #128]	@ (8005c88 <HAL_DMA_IRQHandler+0x6b0>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d022      	beq.n	8005c50 <HAL_DMA_IRQHandler+0x678>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a1f      	ldr	r2, [pc, #124]	@ (8005c8c <HAL_DMA_IRQHandler+0x6b4>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d01d      	beq.n	8005c50 <HAL_DMA_IRQHandler+0x678>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a1d      	ldr	r2, [pc, #116]	@ (8005c90 <HAL_DMA_IRQHandler+0x6b8>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d018      	beq.n	8005c50 <HAL_DMA_IRQHandler+0x678>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a1c      	ldr	r2, [pc, #112]	@ (8005c94 <HAL_DMA_IRQHandler+0x6bc>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d013      	beq.n	8005c50 <HAL_DMA_IRQHandler+0x678>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a1a      	ldr	r2, [pc, #104]	@ (8005c98 <HAL_DMA_IRQHandler+0x6c0>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d00e      	beq.n	8005c50 <HAL_DMA_IRQHandler+0x678>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a19      	ldr	r2, [pc, #100]	@ (8005c9c <HAL_DMA_IRQHandler+0x6c4>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d009      	beq.n	8005c50 <HAL_DMA_IRQHandler+0x678>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a17      	ldr	r2, [pc, #92]	@ (8005ca0 <HAL_DMA_IRQHandler+0x6c8>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d004      	beq.n	8005c50 <HAL_DMA_IRQHandler+0x678>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a16      	ldr	r2, [pc, #88]	@ (8005ca4 <HAL_DMA_IRQHandler+0x6cc>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d12b      	bne.n	8005ca8 <HAL_DMA_IRQHandler+0x6d0>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0310 	and.w	r3, r3, #16
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	bf14      	ite	ne
 8005c5e:	2301      	movne	r3, #1
 8005c60:	2300      	moveq	r3, #0
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	e02a      	b.n	8005cbc <HAL_DMA_IRQHandler+0x6e4>
 8005c66:	bf00      	nop
 8005c68:	40020010 	.word	0x40020010
 8005c6c:	40020028 	.word	0x40020028
 8005c70:	40020040 	.word	0x40020040
 8005c74:	40020058 	.word	0x40020058
 8005c78:	40020070 	.word	0x40020070
 8005c7c:	40020088 	.word	0x40020088
 8005c80:	400200a0 	.word	0x400200a0
 8005c84:	400200b8 	.word	0x400200b8
 8005c88:	40020410 	.word	0x40020410
 8005c8c:	40020428 	.word	0x40020428
 8005c90:	40020440 	.word	0x40020440
 8005c94:	40020458 	.word	0x40020458
 8005c98:	40020470 	.word	0x40020470
 8005c9c:	40020488 	.word	0x40020488
 8005ca0:	400204a0 	.word	0x400204a0
 8005ca4:	400204b8 	.word	0x400204b8
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	bf14      	ite	ne
 8005cb6:	2301      	movne	r3, #1
 8005cb8:	2300      	moveq	r3, #0
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f000 8087 	beq.w	8005dd0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cc6:	f003 031f 	and.w	r3, r3, #31
 8005cca:	2220      	movs	r2, #32
 8005ccc:	409a      	lsls	r2, r3
 8005cce:	6a3b      	ldr	r3, [r7, #32]
 8005cd0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	d139      	bne.n	8005d52 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 0216 	bic.w	r2, r2, #22
 8005cec:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	695a      	ldr	r2, [r3, #20]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005cfc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d103      	bne.n	8005d0e <HAL_DMA_IRQHandler+0x736>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d007      	beq.n	8005d1e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0208 	bic.w	r2, r2, #8
 8005d1c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d22:	f003 031f 	and.w	r3, r3, #31
 8005d26:	223f      	movs	r2, #63	@ 0x3f
 8005d28:	409a      	lsls	r2, r3
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f000 834a 	beq.w	80063dc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	4798      	blx	r3
          }
          return;
 8005d50:	e344      	b.n	80063dc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d018      	beq.n	8005d92 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d108      	bne.n	8005d80 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d02c      	beq.n	8005dd0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	4798      	blx	r3
 8005d7e:	e027      	b.n	8005dd0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d023      	beq.n	8005dd0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	4798      	blx	r3
 8005d90:	e01e      	b.n	8005dd0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10f      	bne.n	8005dc0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f022 0210 	bic.w	r2, r2, #16
 8005dae:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d003      	beq.n	8005dd0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 8306 	beq.w	80063e6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 8088 	beq.w	8005ef8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2204      	movs	r2, #4
 8005dec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a7a      	ldr	r2, [pc, #488]	@ (8005fe0 <HAL_DMA_IRQHandler+0xa08>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d04a      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x8b8>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a79      	ldr	r2, [pc, #484]	@ (8005fe4 <HAL_DMA_IRQHandler+0xa0c>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d045      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x8b8>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a77      	ldr	r2, [pc, #476]	@ (8005fe8 <HAL_DMA_IRQHandler+0xa10>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d040      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x8b8>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a76      	ldr	r2, [pc, #472]	@ (8005fec <HAL_DMA_IRQHandler+0xa14>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d03b      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x8b8>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a74      	ldr	r2, [pc, #464]	@ (8005ff0 <HAL_DMA_IRQHandler+0xa18>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d036      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x8b8>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a73      	ldr	r2, [pc, #460]	@ (8005ff4 <HAL_DMA_IRQHandler+0xa1c>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d031      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x8b8>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a71      	ldr	r2, [pc, #452]	@ (8005ff8 <HAL_DMA_IRQHandler+0xa20>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d02c      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x8b8>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a70      	ldr	r2, [pc, #448]	@ (8005ffc <HAL_DMA_IRQHandler+0xa24>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d027      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x8b8>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a6e      	ldr	r2, [pc, #440]	@ (8006000 <HAL_DMA_IRQHandler+0xa28>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d022      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x8b8>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a6d      	ldr	r2, [pc, #436]	@ (8006004 <HAL_DMA_IRQHandler+0xa2c>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d01d      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x8b8>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a6b      	ldr	r2, [pc, #428]	@ (8006008 <HAL_DMA_IRQHandler+0xa30>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d018      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x8b8>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a6a      	ldr	r2, [pc, #424]	@ (800600c <HAL_DMA_IRQHandler+0xa34>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d013      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x8b8>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a68      	ldr	r2, [pc, #416]	@ (8006010 <HAL_DMA_IRQHandler+0xa38>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d00e      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x8b8>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a67      	ldr	r2, [pc, #412]	@ (8006014 <HAL_DMA_IRQHandler+0xa3c>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d009      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x8b8>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a65      	ldr	r2, [pc, #404]	@ (8006018 <HAL_DMA_IRQHandler+0xa40>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d004      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x8b8>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a64      	ldr	r2, [pc, #400]	@ (800601c <HAL_DMA_IRQHandler+0xa44>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d108      	bne.n	8005ea2 <HAL_DMA_IRQHandler+0x8ca>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 0201 	bic.w	r2, r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]
 8005ea0:	e007      	b.n	8005eb2 <HAL_DMA_IRQHandler+0x8da>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f022 0201 	bic.w	r2, r2, #1
 8005eb0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	60fb      	str	r3, [r7, #12]
 8005eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d307      	bcc.n	8005ece <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1f2      	bne.n	8005eb2 <HAL_DMA_IRQHandler+0x8da>
 8005ecc:	e000      	b.n	8005ed0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005ece:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0301 	and.w	r3, r3, #1
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d004      	beq.n	8005ee8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2203      	movs	r2, #3
 8005ee2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005ee6:	e003      	b.n	8005ef0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 8272 	beq.w	80063e6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	4798      	blx	r3
 8005f0a:	e26c      	b.n	80063e6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a43      	ldr	r2, [pc, #268]	@ (8006020 <HAL_DMA_IRQHandler+0xa48>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d022      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x984>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a42      	ldr	r2, [pc, #264]	@ (8006024 <HAL_DMA_IRQHandler+0xa4c>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d01d      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x984>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a40      	ldr	r2, [pc, #256]	@ (8006028 <HAL_DMA_IRQHandler+0xa50>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d018      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x984>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a3f      	ldr	r2, [pc, #252]	@ (800602c <HAL_DMA_IRQHandler+0xa54>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d013      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x984>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a3d      	ldr	r2, [pc, #244]	@ (8006030 <HAL_DMA_IRQHandler+0xa58>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d00e      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x984>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a3c      	ldr	r2, [pc, #240]	@ (8006034 <HAL_DMA_IRQHandler+0xa5c>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d009      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x984>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a3a      	ldr	r2, [pc, #232]	@ (8006038 <HAL_DMA_IRQHandler+0xa60>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d004      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x984>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a39      	ldr	r2, [pc, #228]	@ (800603c <HAL_DMA_IRQHandler+0xa64>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d101      	bne.n	8005f60 <HAL_DMA_IRQHandler+0x988>
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e000      	b.n	8005f62 <HAL_DMA_IRQHandler+0x98a>
 8005f60:	2300      	movs	r3, #0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f000 823f 	beq.w	80063e6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f74:	f003 031f 	and.w	r3, r3, #31
 8005f78:	2204      	movs	r2, #4
 8005f7a:	409a      	lsls	r2, r3
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	4013      	ands	r3, r2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f000 80cd 	beq.w	8006120 <HAL_DMA_IRQHandler+0xb48>
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	f003 0304 	and.w	r3, r3, #4
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f000 80c7 	beq.w	8006120 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f96:	f003 031f 	and.w	r3, r3, #31
 8005f9a:	2204      	movs	r2, #4
 8005f9c:	409a      	lsls	r2, r3
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d049      	beq.n	8006040 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d109      	bne.n	8005fca <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 8210 	beq.w	80063e0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fc8:	e20a      	b.n	80063e0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f000 8206 	beq.w	80063e0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fdc:	e200      	b.n	80063e0 <HAL_DMA_IRQHandler+0xe08>
 8005fde:	bf00      	nop
 8005fe0:	40020010 	.word	0x40020010
 8005fe4:	40020028 	.word	0x40020028
 8005fe8:	40020040 	.word	0x40020040
 8005fec:	40020058 	.word	0x40020058
 8005ff0:	40020070 	.word	0x40020070
 8005ff4:	40020088 	.word	0x40020088
 8005ff8:	400200a0 	.word	0x400200a0
 8005ffc:	400200b8 	.word	0x400200b8
 8006000:	40020410 	.word	0x40020410
 8006004:	40020428 	.word	0x40020428
 8006008:	40020440 	.word	0x40020440
 800600c:	40020458 	.word	0x40020458
 8006010:	40020470 	.word	0x40020470
 8006014:	40020488 	.word	0x40020488
 8006018:	400204a0 	.word	0x400204a0
 800601c:	400204b8 	.word	0x400204b8
 8006020:	58025408 	.word	0x58025408
 8006024:	5802541c 	.word	0x5802541c
 8006028:	58025430 	.word	0x58025430
 800602c:	58025444 	.word	0x58025444
 8006030:	58025458 	.word	0x58025458
 8006034:	5802546c 	.word	0x5802546c
 8006038:	58025480 	.word	0x58025480
 800603c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	f003 0320 	and.w	r3, r3, #32
 8006046:	2b00      	cmp	r3, #0
 8006048:	d160      	bne.n	800610c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a7f      	ldr	r2, [pc, #508]	@ (800624c <HAL_DMA_IRQHandler+0xc74>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d04a      	beq.n	80060ea <HAL_DMA_IRQHandler+0xb12>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a7d      	ldr	r2, [pc, #500]	@ (8006250 <HAL_DMA_IRQHandler+0xc78>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d045      	beq.n	80060ea <HAL_DMA_IRQHandler+0xb12>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a7c      	ldr	r2, [pc, #496]	@ (8006254 <HAL_DMA_IRQHandler+0xc7c>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d040      	beq.n	80060ea <HAL_DMA_IRQHandler+0xb12>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a7a      	ldr	r2, [pc, #488]	@ (8006258 <HAL_DMA_IRQHandler+0xc80>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d03b      	beq.n	80060ea <HAL_DMA_IRQHandler+0xb12>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a79      	ldr	r2, [pc, #484]	@ (800625c <HAL_DMA_IRQHandler+0xc84>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d036      	beq.n	80060ea <HAL_DMA_IRQHandler+0xb12>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a77      	ldr	r2, [pc, #476]	@ (8006260 <HAL_DMA_IRQHandler+0xc88>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d031      	beq.n	80060ea <HAL_DMA_IRQHandler+0xb12>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a76      	ldr	r2, [pc, #472]	@ (8006264 <HAL_DMA_IRQHandler+0xc8c>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d02c      	beq.n	80060ea <HAL_DMA_IRQHandler+0xb12>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a74      	ldr	r2, [pc, #464]	@ (8006268 <HAL_DMA_IRQHandler+0xc90>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d027      	beq.n	80060ea <HAL_DMA_IRQHandler+0xb12>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a73      	ldr	r2, [pc, #460]	@ (800626c <HAL_DMA_IRQHandler+0xc94>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d022      	beq.n	80060ea <HAL_DMA_IRQHandler+0xb12>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a71      	ldr	r2, [pc, #452]	@ (8006270 <HAL_DMA_IRQHandler+0xc98>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d01d      	beq.n	80060ea <HAL_DMA_IRQHandler+0xb12>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a70      	ldr	r2, [pc, #448]	@ (8006274 <HAL_DMA_IRQHandler+0xc9c>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d018      	beq.n	80060ea <HAL_DMA_IRQHandler+0xb12>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a6e      	ldr	r2, [pc, #440]	@ (8006278 <HAL_DMA_IRQHandler+0xca0>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d013      	beq.n	80060ea <HAL_DMA_IRQHandler+0xb12>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a6d      	ldr	r2, [pc, #436]	@ (800627c <HAL_DMA_IRQHandler+0xca4>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d00e      	beq.n	80060ea <HAL_DMA_IRQHandler+0xb12>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a6b      	ldr	r2, [pc, #428]	@ (8006280 <HAL_DMA_IRQHandler+0xca8>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d009      	beq.n	80060ea <HAL_DMA_IRQHandler+0xb12>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a6a      	ldr	r2, [pc, #424]	@ (8006284 <HAL_DMA_IRQHandler+0xcac>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d004      	beq.n	80060ea <HAL_DMA_IRQHandler+0xb12>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a68      	ldr	r2, [pc, #416]	@ (8006288 <HAL_DMA_IRQHandler+0xcb0>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d108      	bne.n	80060fc <HAL_DMA_IRQHandler+0xb24>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 0208 	bic.w	r2, r2, #8
 80060f8:	601a      	str	r2, [r3, #0]
 80060fa:	e007      	b.n	800610c <HAL_DMA_IRQHandler+0xb34>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f022 0204 	bic.w	r2, r2, #4
 800610a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 8165 	beq.w	80063e0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800611e:	e15f      	b.n	80063e0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006124:	f003 031f 	and.w	r3, r3, #31
 8006128:	2202      	movs	r2, #2
 800612a:	409a      	lsls	r2, r3
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	4013      	ands	r3, r2
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 80c5 	beq.w	80062c0 <HAL_DMA_IRQHandler+0xce8>
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 80bf 	beq.w	80062c0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006146:	f003 031f 	and.w	r3, r3, #31
 800614a:	2202      	movs	r2, #2
 800614c:	409a      	lsls	r2, r3
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d018      	beq.n	800618e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d109      	bne.n	800617a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800616a:	2b00      	cmp	r3, #0
 800616c:	f000 813a 	beq.w	80063e4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006178:	e134      	b.n	80063e4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800617e:	2b00      	cmp	r3, #0
 8006180:	f000 8130 	beq.w	80063e4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800618c:	e12a      	b.n	80063e4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	f003 0320 	and.w	r3, r3, #32
 8006194:	2b00      	cmp	r3, #0
 8006196:	f040 8089 	bne.w	80062ac <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a2b      	ldr	r2, [pc, #172]	@ (800624c <HAL_DMA_IRQHandler+0xc74>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d04a      	beq.n	800623a <HAL_DMA_IRQHandler+0xc62>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a29      	ldr	r2, [pc, #164]	@ (8006250 <HAL_DMA_IRQHandler+0xc78>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d045      	beq.n	800623a <HAL_DMA_IRQHandler+0xc62>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a28      	ldr	r2, [pc, #160]	@ (8006254 <HAL_DMA_IRQHandler+0xc7c>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d040      	beq.n	800623a <HAL_DMA_IRQHandler+0xc62>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a26      	ldr	r2, [pc, #152]	@ (8006258 <HAL_DMA_IRQHandler+0xc80>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d03b      	beq.n	800623a <HAL_DMA_IRQHandler+0xc62>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a25      	ldr	r2, [pc, #148]	@ (800625c <HAL_DMA_IRQHandler+0xc84>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d036      	beq.n	800623a <HAL_DMA_IRQHandler+0xc62>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a23      	ldr	r2, [pc, #140]	@ (8006260 <HAL_DMA_IRQHandler+0xc88>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d031      	beq.n	800623a <HAL_DMA_IRQHandler+0xc62>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a22      	ldr	r2, [pc, #136]	@ (8006264 <HAL_DMA_IRQHandler+0xc8c>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d02c      	beq.n	800623a <HAL_DMA_IRQHandler+0xc62>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a20      	ldr	r2, [pc, #128]	@ (8006268 <HAL_DMA_IRQHandler+0xc90>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d027      	beq.n	800623a <HAL_DMA_IRQHandler+0xc62>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a1f      	ldr	r2, [pc, #124]	@ (800626c <HAL_DMA_IRQHandler+0xc94>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d022      	beq.n	800623a <HAL_DMA_IRQHandler+0xc62>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006270 <HAL_DMA_IRQHandler+0xc98>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d01d      	beq.n	800623a <HAL_DMA_IRQHandler+0xc62>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a1c      	ldr	r2, [pc, #112]	@ (8006274 <HAL_DMA_IRQHandler+0xc9c>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d018      	beq.n	800623a <HAL_DMA_IRQHandler+0xc62>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a1a      	ldr	r2, [pc, #104]	@ (8006278 <HAL_DMA_IRQHandler+0xca0>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d013      	beq.n	800623a <HAL_DMA_IRQHandler+0xc62>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a19      	ldr	r2, [pc, #100]	@ (800627c <HAL_DMA_IRQHandler+0xca4>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d00e      	beq.n	800623a <HAL_DMA_IRQHandler+0xc62>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a17      	ldr	r2, [pc, #92]	@ (8006280 <HAL_DMA_IRQHandler+0xca8>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d009      	beq.n	800623a <HAL_DMA_IRQHandler+0xc62>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a16      	ldr	r2, [pc, #88]	@ (8006284 <HAL_DMA_IRQHandler+0xcac>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d004      	beq.n	800623a <HAL_DMA_IRQHandler+0xc62>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a14      	ldr	r2, [pc, #80]	@ (8006288 <HAL_DMA_IRQHandler+0xcb0>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d128      	bne.n	800628c <HAL_DMA_IRQHandler+0xcb4>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f022 0214 	bic.w	r2, r2, #20
 8006248:	601a      	str	r2, [r3, #0]
 800624a:	e027      	b.n	800629c <HAL_DMA_IRQHandler+0xcc4>
 800624c:	40020010 	.word	0x40020010
 8006250:	40020028 	.word	0x40020028
 8006254:	40020040 	.word	0x40020040
 8006258:	40020058 	.word	0x40020058
 800625c:	40020070 	.word	0x40020070
 8006260:	40020088 	.word	0x40020088
 8006264:	400200a0 	.word	0x400200a0
 8006268:	400200b8 	.word	0x400200b8
 800626c:	40020410 	.word	0x40020410
 8006270:	40020428 	.word	0x40020428
 8006274:	40020440 	.word	0x40020440
 8006278:	40020458 	.word	0x40020458
 800627c:	40020470 	.word	0x40020470
 8006280:	40020488 	.word	0x40020488
 8006284:	400204a0 	.word	0x400204a0
 8006288:	400204b8 	.word	0x400204b8
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f022 020a 	bic.w	r2, r2, #10
 800629a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 8097 	beq.w	80063e4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062be:	e091      	b.n	80063e4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062c4:	f003 031f 	and.w	r3, r3, #31
 80062c8:	2208      	movs	r2, #8
 80062ca:	409a      	lsls	r2, r3
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	4013      	ands	r3, r2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f000 8088 	beq.w	80063e6 <HAL_DMA_IRQHandler+0xe0e>
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	f003 0308 	and.w	r3, r3, #8
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 8082 	beq.w	80063e6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a41      	ldr	r2, [pc, #260]	@ (80063ec <HAL_DMA_IRQHandler+0xe14>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d04a      	beq.n	8006382 <HAL_DMA_IRQHandler+0xdaa>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a3f      	ldr	r2, [pc, #252]	@ (80063f0 <HAL_DMA_IRQHandler+0xe18>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d045      	beq.n	8006382 <HAL_DMA_IRQHandler+0xdaa>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a3e      	ldr	r2, [pc, #248]	@ (80063f4 <HAL_DMA_IRQHandler+0xe1c>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d040      	beq.n	8006382 <HAL_DMA_IRQHandler+0xdaa>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a3c      	ldr	r2, [pc, #240]	@ (80063f8 <HAL_DMA_IRQHandler+0xe20>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d03b      	beq.n	8006382 <HAL_DMA_IRQHandler+0xdaa>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a3b      	ldr	r2, [pc, #236]	@ (80063fc <HAL_DMA_IRQHandler+0xe24>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d036      	beq.n	8006382 <HAL_DMA_IRQHandler+0xdaa>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a39      	ldr	r2, [pc, #228]	@ (8006400 <HAL_DMA_IRQHandler+0xe28>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d031      	beq.n	8006382 <HAL_DMA_IRQHandler+0xdaa>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a38      	ldr	r2, [pc, #224]	@ (8006404 <HAL_DMA_IRQHandler+0xe2c>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d02c      	beq.n	8006382 <HAL_DMA_IRQHandler+0xdaa>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a36      	ldr	r2, [pc, #216]	@ (8006408 <HAL_DMA_IRQHandler+0xe30>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d027      	beq.n	8006382 <HAL_DMA_IRQHandler+0xdaa>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a35      	ldr	r2, [pc, #212]	@ (800640c <HAL_DMA_IRQHandler+0xe34>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d022      	beq.n	8006382 <HAL_DMA_IRQHandler+0xdaa>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a33      	ldr	r2, [pc, #204]	@ (8006410 <HAL_DMA_IRQHandler+0xe38>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d01d      	beq.n	8006382 <HAL_DMA_IRQHandler+0xdaa>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a32      	ldr	r2, [pc, #200]	@ (8006414 <HAL_DMA_IRQHandler+0xe3c>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d018      	beq.n	8006382 <HAL_DMA_IRQHandler+0xdaa>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a30      	ldr	r2, [pc, #192]	@ (8006418 <HAL_DMA_IRQHandler+0xe40>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d013      	beq.n	8006382 <HAL_DMA_IRQHandler+0xdaa>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a2f      	ldr	r2, [pc, #188]	@ (800641c <HAL_DMA_IRQHandler+0xe44>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d00e      	beq.n	8006382 <HAL_DMA_IRQHandler+0xdaa>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a2d      	ldr	r2, [pc, #180]	@ (8006420 <HAL_DMA_IRQHandler+0xe48>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d009      	beq.n	8006382 <HAL_DMA_IRQHandler+0xdaa>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a2c      	ldr	r2, [pc, #176]	@ (8006424 <HAL_DMA_IRQHandler+0xe4c>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d004      	beq.n	8006382 <HAL_DMA_IRQHandler+0xdaa>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a2a      	ldr	r2, [pc, #168]	@ (8006428 <HAL_DMA_IRQHandler+0xe50>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d108      	bne.n	8006394 <HAL_DMA_IRQHandler+0xdbc>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f022 021c 	bic.w	r2, r2, #28
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	e007      	b.n	80063a4 <HAL_DMA_IRQHandler+0xdcc>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 020e 	bic.w	r2, r2, #14
 80063a2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063a8:	f003 031f 	and.w	r3, r3, #31
 80063ac:	2201      	movs	r2, #1
 80063ae:	409a      	lsls	r2, r3
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d009      	beq.n	80063e6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	4798      	blx	r3
 80063da:	e004      	b.n	80063e6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80063dc:	bf00      	nop
 80063de:	e002      	b.n	80063e6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063e0:	bf00      	nop
 80063e2:	e000      	b.n	80063e6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063e4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80063e6:	3728      	adds	r7, #40	@ 0x28
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	40020010 	.word	0x40020010
 80063f0:	40020028 	.word	0x40020028
 80063f4:	40020040 	.word	0x40020040
 80063f8:	40020058 	.word	0x40020058
 80063fc:	40020070 	.word	0x40020070
 8006400:	40020088 	.word	0x40020088
 8006404:	400200a0 	.word	0x400200a0
 8006408:	400200b8 	.word	0x400200b8
 800640c:	40020410 	.word	0x40020410
 8006410:	40020428 	.word	0x40020428
 8006414:	40020440 	.word	0x40020440
 8006418:	40020458 	.word	0x40020458
 800641c:	40020470 	.word	0x40020470
 8006420:	40020488 	.word	0x40020488
 8006424:	400204a0 	.word	0x400204a0
 8006428:	400204b8 	.word	0x400204b8

0800642c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8006438:	4618      	mov	r0, r3
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006444:	b480      	push	{r7}
 8006446:	b087      	sub	sp, #28
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
 8006450:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006456:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800645c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a7f      	ldr	r2, [pc, #508]	@ (8006660 <DMA_SetConfig+0x21c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d072      	beq.n	800654e <DMA_SetConfig+0x10a>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a7d      	ldr	r2, [pc, #500]	@ (8006664 <DMA_SetConfig+0x220>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d06d      	beq.n	800654e <DMA_SetConfig+0x10a>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a7c      	ldr	r2, [pc, #496]	@ (8006668 <DMA_SetConfig+0x224>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d068      	beq.n	800654e <DMA_SetConfig+0x10a>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a7a      	ldr	r2, [pc, #488]	@ (800666c <DMA_SetConfig+0x228>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d063      	beq.n	800654e <DMA_SetConfig+0x10a>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a79      	ldr	r2, [pc, #484]	@ (8006670 <DMA_SetConfig+0x22c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d05e      	beq.n	800654e <DMA_SetConfig+0x10a>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a77      	ldr	r2, [pc, #476]	@ (8006674 <DMA_SetConfig+0x230>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d059      	beq.n	800654e <DMA_SetConfig+0x10a>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a76      	ldr	r2, [pc, #472]	@ (8006678 <DMA_SetConfig+0x234>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d054      	beq.n	800654e <DMA_SetConfig+0x10a>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a74      	ldr	r2, [pc, #464]	@ (800667c <DMA_SetConfig+0x238>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d04f      	beq.n	800654e <DMA_SetConfig+0x10a>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a73      	ldr	r2, [pc, #460]	@ (8006680 <DMA_SetConfig+0x23c>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d04a      	beq.n	800654e <DMA_SetConfig+0x10a>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a71      	ldr	r2, [pc, #452]	@ (8006684 <DMA_SetConfig+0x240>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d045      	beq.n	800654e <DMA_SetConfig+0x10a>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a70      	ldr	r2, [pc, #448]	@ (8006688 <DMA_SetConfig+0x244>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d040      	beq.n	800654e <DMA_SetConfig+0x10a>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a6e      	ldr	r2, [pc, #440]	@ (800668c <DMA_SetConfig+0x248>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d03b      	beq.n	800654e <DMA_SetConfig+0x10a>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a6d      	ldr	r2, [pc, #436]	@ (8006690 <DMA_SetConfig+0x24c>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d036      	beq.n	800654e <DMA_SetConfig+0x10a>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a6b      	ldr	r2, [pc, #428]	@ (8006694 <DMA_SetConfig+0x250>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d031      	beq.n	800654e <DMA_SetConfig+0x10a>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a6a      	ldr	r2, [pc, #424]	@ (8006698 <DMA_SetConfig+0x254>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d02c      	beq.n	800654e <DMA_SetConfig+0x10a>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a68      	ldr	r2, [pc, #416]	@ (800669c <DMA_SetConfig+0x258>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d027      	beq.n	800654e <DMA_SetConfig+0x10a>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a67      	ldr	r2, [pc, #412]	@ (80066a0 <DMA_SetConfig+0x25c>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d022      	beq.n	800654e <DMA_SetConfig+0x10a>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a65      	ldr	r2, [pc, #404]	@ (80066a4 <DMA_SetConfig+0x260>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d01d      	beq.n	800654e <DMA_SetConfig+0x10a>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a64      	ldr	r2, [pc, #400]	@ (80066a8 <DMA_SetConfig+0x264>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d018      	beq.n	800654e <DMA_SetConfig+0x10a>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a62      	ldr	r2, [pc, #392]	@ (80066ac <DMA_SetConfig+0x268>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d013      	beq.n	800654e <DMA_SetConfig+0x10a>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a61      	ldr	r2, [pc, #388]	@ (80066b0 <DMA_SetConfig+0x26c>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d00e      	beq.n	800654e <DMA_SetConfig+0x10a>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a5f      	ldr	r2, [pc, #380]	@ (80066b4 <DMA_SetConfig+0x270>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d009      	beq.n	800654e <DMA_SetConfig+0x10a>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a5e      	ldr	r2, [pc, #376]	@ (80066b8 <DMA_SetConfig+0x274>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d004      	beq.n	800654e <DMA_SetConfig+0x10a>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a5c      	ldr	r2, [pc, #368]	@ (80066bc <DMA_SetConfig+0x278>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d101      	bne.n	8006552 <DMA_SetConfig+0x10e>
 800654e:	2301      	movs	r3, #1
 8006550:	e000      	b.n	8006554 <DMA_SetConfig+0x110>
 8006552:	2300      	movs	r3, #0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00d      	beq.n	8006574 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006560:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006566:	2b00      	cmp	r3, #0
 8006568:	d004      	beq.n	8006574 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006572:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a39      	ldr	r2, [pc, #228]	@ (8006660 <DMA_SetConfig+0x21c>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d04a      	beq.n	8006614 <DMA_SetConfig+0x1d0>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a38      	ldr	r2, [pc, #224]	@ (8006664 <DMA_SetConfig+0x220>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d045      	beq.n	8006614 <DMA_SetConfig+0x1d0>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a36      	ldr	r2, [pc, #216]	@ (8006668 <DMA_SetConfig+0x224>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d040      	beq.n	8006614 <DMA_SetConfig+0x1d0>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a35      	ldr	r2, [pc, #212]	@ (800666c <DMA_SetConfig+0x228>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d03b      	beq.n	8006614 <DMA_SetConfig+0x1d0>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a33      	ldr	r2, [pc, #204]	@ (8006670 <DMA_SetConfig+0x22c>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d036      	beq.n	8006614 <DMA_SetConfig+0x1d0>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a32      	ldr	r2, [pc, #200]	@ (8006674 <DMA_SetConfig+0x230>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d031      	beq.n	8006614 <DMA_SetConfig+0x1d0>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a30      	ldr	r2, [pc, #192]	@ (8006678 <DMA_SetConfig+0x234>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d02c      	beq.n	8006614 <DMA_SetConfig+0x1d0>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a2f      	ldr	r2, [pc, #188]	@ (800667c <DMA_SetConfig+0x238>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d027      	beq.n	8006614 <DMA_SetConfig+0x1d0>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a2d      	ldr	r2, [pc, #180]	@ (8006680 <DMA_SetConfig+0x23c>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d022      	beq.n	8006614 <DMA_SetConfig+0x1d0>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a2c      	ldr	r2, [pc, #176]	@ (8006684 <DMA_SetConfig+0x240>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d01d      	beq.n	8006614 <DMA_SetConfig+0x1d0>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a2a      	ldr	r2, [pc, #168]	@ (8006688 <DMA_SetConfig+0x244>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d018      	beq.n	8006614 <DMA_SetConfig+0x1d0>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a29      	ldr	r2, [pc, #164]	@ (800668c <DMA_SetConfig+0x248>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d013      	beq.n	8006614 <DMA_SetConfig+0x1d0>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a27      	ldr	r2, [pc, #156]	@ (8006690 <DMA_SetConfig+0x24c>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d00e      	beq.n	8006614 <DMA_SetConfig+0x1d0>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a26      	ldr	r2, [pc, #152]	@ (8006694 <DMA_SetConfig+0x250>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d009      	beq.n	8006614 <DMA_SetConfig+0x1d0>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a24      	ldr	r2, [pc, #144]	@ (8006698 <DMA_SetConfig+0x254>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d004      	beq.n	8006614 <DMA_SetConfig+0x1d0>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a23      	ldr	r2, [pc, #140]	@ (800669c <DMA_SetConfig+0x258>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d101      	bne.n	8006618 <DMA_SetConfig+0x1d4>
 8006614:	2301      	movs	r3, #1
 8006616:	e000      	b.n	800661a <DMA_SetConfig+0x1d6>
 8006618:	2300      	movs	r3, #0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d059      	beq.n	80066d2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006622:	f003 031f 	and.w	r3, r3, #31
 8006626:	223f      	movs	r2, #63	@ 0x3f
 8006628:	409a      	lsls	r2, r3
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800663c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	683a      	ldr	r2, [r7, #0]
 8006644:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	2b40      	cmp	r3, #64	@ 0x40
 800664c:	d138      	bne.n	80066c0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800665e:	e086      	b.n	800676e <DMA_SetConfig+0x32a>
 8006660:	40020010 	.word	0x40020010
 8006664:	40020028 	.word	0x40020028
 8006668:	40020040 	.word	0x40020040
 800666c:	40020058 	.word	0x40020058
 8006670:	40020070 	.word	0x40020070
 8006674:	40020088 	.word	0x40020088
 8006678:	400200a0 	.word	0x400200a0
 800667c:	400200b8 	.word	0x400200b8
 8006680:	40020410 	.word	0x40020410
 8006684:	40020428 	.word	0x40020428
 8006688:	40020440 	.word	0x40020440
 800668c:	40020458 	.word	0x40020458
 8006690:	40020470 	.word	0x40020470
 8006694:	40020488 	.word	0x40020488
 8006698:	400204a0 	.word	0x400204a0
 800669c:	400204b8 	.word	0x400204b8
 80066a0:	58025408 	.word	0x58025408
 80066a4:	5802541c 	.word	0x5802541c
 80066a8:	58025430 	.word	0x58025430
 80066ac:	58025444 	.word	0x58025444
 80066b0:	58025458 	.word	0x58025458
 80066b4:	5802546c 	.word	0x5802546c
 80066b8:	58025480 	.word	0x58025480
 80066bc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	60da      	str	r2, [r3, #12]
}
 80066d0:	e04d      	b.n	800676e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a29      	ldr	r2, [pc, #164]	@ (800677c <DMA_SetConfig+0x338>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d022      	beq.n	8006722 <DMA_SetConfig+0x2de>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a27      	ldr	r2, [pc, #156]	@ (8006780 <DMA_SetConfig+0x33c>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d01d      	beq.n	8006722 <DMA_SetConfig+0x2de>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a26      	ldr	r2, [pc, #152]	@ (8006784 <DMA_SetConfig+0x340>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d018      	beq.n	8006722 <DMA_SetConfig+0x2de>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a24      	ldr	r2, [pc, #144]	@ (8006788 <DMA_SetConfig+0x344>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d013      	beq.n	8006722 <DMA_SetConfig+0x2de>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a23      	ldr	r2, [pc, #140]	@ (800678c <DMA_SetConfig+0x348>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d00e      	beq.n	8006722 <DMA_SetConfig+0x2de>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a21      	ldr	r2, [pc, #132]	@ (8006790 <DMA_SetConfig+0x34c>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d009      	beq.n	8006722 <DMA_SetConfig+0x2de>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a20      	ldr	r2, [pc, #128]	@ (8006794 <DMA_SetConfig+0x350>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d004      	beq.n	8006722 <DMA_SetConfig+0x2de>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a1e      	ldr	r2, [pc, #120]	@ (8006798 <DMA_SetConfig+0x354>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d101      	bne.n	8006726 <DMA_SetConfig+0x2e2>
 8006722:	2301      	movs	r3, #1
 8006724:	e000      	b.n	8006728 <DMA_SetConfig+0x2e4>
 8006726:	2300      	movs	r3, #0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d020      	beq.n	800676e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006730:	f003 031f 	and.w	r3, r3, #31
 8006734:	2201      	movs	r2, #1
 8006736:	409a      	lsls	r2, r3
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	683a      	ldr	r2, [r7, #0]
 8006742:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	2b40      	cmp	r3, #64	@ 0x40
 800674a:	d108      	bne.n	800675e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	60da      	str	r2, [r3, #12]
}
 800675c:	e007      	b.n	800676e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68ba      	ldr	r2, [r7, #8]
 8006764:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	60da      	str	r2, [r3, #12]
}
 800676e:	bf00      	nop
 8006770:	371c      	adds	r7, #28
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	58025408 	.word	0x58025408
 8006780:	5802541c 	.word	0x5802541c
 8006784:	58025430 	.word	0x58025430
 8006788:	58025444 	.word	0x58025444
 800678c:	58025458 	.word	0x58025458
 8006790:	5802546c 	.word	0x5802546c
 8006794:	58025480 	.word	0x58025480
 8006798:	58025494 	.word	0x58025494

0800679c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a42      	ldr	r2, [pc, #264]	@ (80068b4 <DMA_CalcBaseAndBitshift+0x118>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d04a      	beq.n	8006844 <DMA_CalcBaseAndBitshift+0xa8>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a41      	ldr	r2, [pc, #260]	@ (80068b8 <DMA_CalcBaseAndBitshift+0x11c>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d045      	beq.n	8006844 <DMA_CalcBaseAndBitshift+0xa8>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a3f      	ldr	r2, [pc, #252]	@ (80068bc <DMA_CalcBaseAndBitshift+0x120>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d040      	beq.n	8006844 <DMA_CalcBaseAndBitshift+0xa8>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a3e      	ldr	r2, [pc, #248]	@ (80068c0 <DMA_CalcBaseAndBitshift+0x124>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d03b      	beq.n	8006844 <DMA_CalcBaseAndBitshift+0xa8>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a3c      	ldr	r2, [pc, #240]	@ (80068c4 <DMA_CalcBaseAndBitshift+0x128>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d036      	beq.n	8006844 <DMA_CalcBaseAndBitshift+0xa8>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a3b      	ldr	r2, [pc, #236]	@ (80068c8 <DMA_CalcBaseAndBitshift+0x12c>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d031      	beq.n	8006844 <DMA_CalcBaseAndBitshift+0xa8>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a39      	ldr	r2, [pc, #228]	@ (80068cc <DMA_CalcBaseAndBitshift+0x130>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d02c      	beq.n	8006844 <DMA_CalcBaseAndBitshift+0xa8>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a38      	ldr	r2, [pc, #224]	@ (80068d0 <DMA_CalcBaseAndBitshift+0x134>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d027      	beq.n	8006844 <DMA_CalcBaseAndBitshift+0xa8>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a36      	ldr	r2, [pc, #216]	@ (80068d4 <DMA_CalcBaseAndBitshift+0x138>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d022      	beq.n	8006844 <DMA_CalcBaseAndBitshift+0xa8>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a35      	ldr	r2, [pc, #212]	@ (80068d8 <DMA_CalcBaseAndBitshift+0x13c>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d01d      	beq.n	8006844 <DMA_CalcBaseAndBitshift+0xa8>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a33      	ldr	r2, [pc, #204]	@ (80068dc <DMA_CalcBaseAndBitshift+0x140>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d018      	beq.n	8006844 <DMA_CalcBaseAndBitshift+0xa8>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a32      	ldr	r2, [pc, #200]	@ (80068e0 <DMA_CalcBaseAndBitshift+0x144>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d013      	beq.n	8006844 <DMA_CalcBaseAndBitshift+0xa8>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a30      	ldr	r2, [pc, #192]	@ (80068e4 <DMA_CalcBaseAndBitshift+0x148>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d00e      	beq.n	8006844 <DMA_CalcBaseAndBitshift+0xa8>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a2f      	ldr	r2, [pc, #188]	@ (80068e8 <DMA_CalcBaseAndBitshift+0x14c>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d009      	beq.n	8006844 <DMA_CalcBaseAndBitshift+0xa8>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a2d      	ldr	r2, [pc, #180]	@ (80068ec <DMA_CalcBaseAndBitshift+0x150>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d004      	beq.n	8006844 <DMA_CalcBaseAndBitshift+0xa8>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a2c      	ldr	r2, [pc, #176]	@ (80068f0 <DMA_CalcBaseAndBitshift+0x154>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d101      	bne.n	8006848 <DMA_CalcBaseAndBitshift+0xac>
 8006844:	2301      	movs	r3, #1
 8006846:	e000      	b.n	800684a <DMA_CalcBaseAndBitshift+0xae>
 8006848:	2300      	movs	r3, #0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d024      	beq.n	8006898 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	b2db      	uxtb	r3, r3
 8006854:	3b10      	subs	r3, #16
 8006856:	4a27      	ldr	r2, [pc, #156]	@ (80068f4 <DMA_CalcBaseAndBitshift+0x158>)
 8006858:	fba2 2303 	umull	r2, r3, r2, r3
 800685c:	091b      	lsrs	r3, r3, #4
 800685e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f003 0307 	and.w	r3, r3, #7
 8006866:	4a24      	ldr	r2, [pc, #144]	@ (80068f8 <DMA_CalcBaseAndBitshift+0x15c>)
 8006868:	5cd3      	ldrb	r3, [r2, r3]
 800686a:	461a      	mov	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2b03      	cmp	r3, #3
 8006874:	d908      	bls.n	8006888 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	461a      	mov	r2, r3
 800687c:	4b1f      	ldr	r3, [pc, #124]	@ (80068fc <DMA_CalcBaseAndBitshift+0x160>)
 800687e:	4013      	ands	r3, r2
 8006880:	1d1a      	adds	r2, r3, #4
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	659a      	str	r2, [r3, #88]	@ 0x58
 8006886:	e00d      	b.n	80068a4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	461a      	mov	r2, r3
 800688e:	4b1b      	ldr	r3, [pc, #108]	@ (80068fc <DMA_CalcBaseAndBitshift+0x160>)
 8006890:	4013      	ands	r3, r2
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	6593      	str	r3, [r2, #88]	@ 0x58
 8006896:	e005      	b.n	80068a4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3714      	adds	r7, #20
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	40020010 	.word	0x40020010
 80068b8:	40020028 	.word	0x40020028
 80068bc:	40020040 	.word	0x40020040
 80068c0:	40020058 	.word	0x40020058
 80068c4:	40020070 	.word	0x40020070
 80068c8:	40020088 	.word	0x40020088
 80068cc:	400200a0 	.word	0x400200a0
 80068d0:	400200b8 	.word	0x400200b8
 80068d4:	40020410 	.word	0x40020410
 80068d8:	40020428 	.word	0x40020428
 80068dc:	40020440 	.word	0x40020440
 80068e0:	40020458 	.word	0x40020458
 80068e4:	40020470 	.word	0x40020470
 80068e8:	40020488 	.word	0x40020488
 80068ec:	400204a0 	.word	0x400204a0
 80068f0:	400204b8 	.word	0x400204b8
 80068f4:	aaaaaaab 	.word	0xaaaaaaab
 80068f8:	08027b70 	.word	0x08027b70
 80068fc:	fffffc00 	.word	0xfffffc00

08006900 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006908:	2300      	movs	r3, #0
 800690a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d120      	bne.n	8006956 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006918:	2b03      	cmp	r3, #3
 800691a:	d858      	bhi.n	80069ce <DMA_CheckFifoParam+0xce>
 800691c:	a201      	add	r2, pc, #4	@ (adr r2, 8006924 <DMA_CheckFifoParam+0x24>)
 800691e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006922:	bf00      	nop
 8006924:	08006935 	.word	0x08006935
 8006928:	08006947 	.word	0x08006947
 800692c:	08006935 	.word	0x08006935
 8006930:	080069cf 	.word	0x080069cf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006938:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d048      	beq.n	80069d2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006944:	e045      	b.n	80069d2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800694a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800694e:	d142      	bne.n	80069d6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006954:	e03f      	b.n	80069d6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800695e:	d123      	bne.n	80069a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006964:	2b03      	cmp	r3, #3
 8006966:	d838      	bhi.n	80069da <DMA_CheckFifoParam+0xda>
 8006968:	a201      	add	r2, pc, #4	@ (adr r2, 8006970 <DMA_CheckFifoParam+0x70>)
 800696a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696e:	bf00      	nop
 8006970:	08006981 	.word	0x08006981
 8006974:	08006987 	.word	0x08006987
 8006978:	08006981 	.word	0x08006981
 800697c:	08006999 	.word	0x08006999
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	73fb      	strb	r3, [r7, #15]
        break;
 8006984:	e030      	b.n	80069e8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800698a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d025      	beq.n	80069de <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006996:	e022      	b.n	80069de <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800699c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80069a0:	d11f      	bne.n	80069e2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80069a6:	e01c      	b.n	80069e2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d902      	bls.n	80069b6 <DMA_CheckFifoParam+0xb6>
 80069b0:	2b03      	cmp	r3, #3
 80069b2:	d003      	beq.n	80069bc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80069b4:	e018      	b.n	80069e8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	73fb      	strb	r3, [r7, #15]
        break;
 80069ba:	e015      	b.n	80069e8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00e      	beq.n	80069e6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	73fb      	strb	r3, [r7, #15]
    break;
 80069cc:	e00b      	b.n	80069e6 <DMA_CheckFifoParam+0xe6>
        break;
 80069ce:	bf00      	nop
 80069d0:	e00a      	b.n	80069e8 <DMA_CheckFifoParam+0xe8>
        break;
 80069d2:	bf00      	nop
 80069d4:	e008      	b.n	80069e8 <DMA_CheckFifoParam+0xe8>
        break;
 80069d6:	bf00      	nop
 80069d8:	e006      	b.n	80069e8 <DMA_CheckFifoParam+0xe8>
        break;
 80069da:	bf00      	nop
 80069dc:	e004      	b.n	80069e8 <DMA_CheckFifoParam+0xe8>
        break;
 80069de:	bf00      	nop
 80069e0:	e002      	b.n	80069e8 <DMA_CheckFifoParam+0xe8>
        break;
 80069e2:	bf00      	nop
 80069e4:	e000      	b.n	80069e8 <DMA_CheckFifoParam+0xe8>
    break;
 80069e6:	bf00      	nop
    }
  }

  return status;
 80069e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3714      	adds	r7, #20
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop

080069f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a38      	ldr	r2, [pc, #224]	@ (8006aec <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d022      	beq.n	8006a56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a36      	ldr	r2, [pc, #216]	@ (8006af0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d01d      	beq.n	8006a56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a35      	ldr	r2, [pc, #212]	@ (8006af4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d018      	beq.n	8006a56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a33      	ldr	r2, [pc, #204]	@ (8006af8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d013      	beq.n	8006a56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a32      	ldr	r2, [pc, #200]	@ (8006afc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d00e      	beq.n	8006a56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a30      	ldr	r2, [pc, #192]	@ (8006b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d009      	beq.n	8006a56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a2f      	ldr	r2, [pc, #188]	@ (8006b04 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d004      	beq.n	8006a56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a2d      	ldr	r2, [pc, #180]	@ (8006b08 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d101      	bne.n	8006a5a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006a56:	2301      	movs	r3, #1
 8006a58:	e000      	b.n	8006a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d01a      	beq.n	8006a96 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	3b08      	subs	r3, #8
 8006a68:	4a28      	ldr	r2, [pc, #160]	@ (8006b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a6e:	091b      	lsrs	r3, r3, #4
 8006a70:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	4b26      	ldr	r3, [pc, #152]	@ (8006b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006a76:	4413      	add	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a24      	ldr	r2, [pc, #144]	@ (8006b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006a84:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f003 031f 	and.w	r3, r3, #31
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	409a      	lsls	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006a94:	e024      	b.n	8006ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	3b10      	subs	r3, #16
 8006a9e:	4a1e      	ldr	r2, [pc, #120]	@ (8006b18 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa4:	091b      	lsrs	r3, r3, #4
 8006aa6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	4a1c      	ldr	r2, [pc, #112]	@ (8006b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d806      	bhi.n	8006abe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	4a1b      	ldr	r2, [pc, #108]	@ (8006b20 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d902      	bls.n	8006abe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	3308      	adds	r3, #8
 8006abc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	4b18      	ldr	r3, [pc, #96]	@ (8006b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006ac2:	4413      	add	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a16      	ldr	r2, [pc, #88]	@ (8006b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006ad0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f003 031f 	and.w	r3, r3, #31
 8006ad8:	2201      	movs	r2, #1
 8006ada:	409a      	lsls	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006ae0:	bf00      	nop
 8006ae2:	3714      	adds	r7, #20
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr
 8006aec:	58025408 	.word	0x58025408
 8006af0:	5802541c 	.word	0x5802541c
 8006af4:	58025430 	.word	0x58025430
 8006af8:	58025444 	.word	0x58025444
 8006afc:	58025458 	.word	0x58025458
 8006b00:	5802546c 	.word	0x5802546c
 8006b04:	58025480 	.word	0x58025480
 8006b08:	58025494 	.word	0x58025494
 8006b0c:	cccccccd 	.word	0xcccccccd
 8006b10:	16009600 	.word	0x16009600
 8006b14:	58025880 	.word	0x58025880
 8006b18:	aaaaaaab 	.word	0xaaaaaaab
 8006b1c:	400204b8 	.word	0x400204b8
 8006b20:	4002040f 	.word	0x4002040f
 8006b24:	10008200 	.word	0x10008200
 8006b28:	40020880 	.word	0x40020880

08006b2c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d04a      	beq.n	8006bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2b08      	cmp	r3, #8
 8006b46:	d847      	bhi.n	8006bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a25      	ldr	r2, [pc, #148]	@ (8006be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d022      	beq.n	8006b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a24      	ldr	r2, [pc, #144]	@ (8006be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d01d      	beq.n	8006b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a22      	ldr	r2, [pc, #136]	@ (8006bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d018      	beq.n	8006b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a21      	ldr	r2, [pc, #132]	@ (8006bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d013      	beq.n	8006b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a1f      	ldr	r2, [pc, #124]	@ (8006bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d00e      	beq.n	8006b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a1e      	ldr	r2, [pc, #120]	@ (8006bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d009      	beq.n	8006b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a1c      	ldr	r2, [pc, #112]	@ (8006bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d004      	beq.n	8006b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a1b      	ldr	r2, [pc, #108]	@ (8006c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d101      	bne.n	8006b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e000      	b.n	8006b9e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00a      	beq.n	8006bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	4b17      	ldr	r3, [pc, #92]	@ (8006c04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006ba6:	4413      	add	r3, r2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	461a      	mov	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a15      	ldr	r2, [pc, #84]	@ (8006c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006bb4:	671a      	str	r2, [r3, #112]	@ 0x70
 8006bb6:	e009      	b.n	8006bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	4b14      	ldr	r3, [pc, #80]	@ (8006c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006bbc:	4413      	add	r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a11      	ldr	r2, [pc, #68]	@ (8006c10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006bca:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	409a      	lsls	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006bd8:	bf00      	nop
 8006bda:	3714      	adds	r7, #20
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr
 8006be4:	58025408 	.word	0x58025408
 8006be8:	5802541c 	.word	0x5802541c
 8006bec:	58025430 	.word	0x58025430
 8006bf0:	58025444 	.word	0x58025444
 8006bf4:	58025458 	.word	0x58025458
 8006bf8:	5802546c 	.word	0x5802546c
 8006bfc:	58025480 	.word	0x58025480
 8006c00:	58025494 	.word	0x58025494
 8006c04:	1600963f 	.word	0x1600963f
 8006c08:	58025940 	.word	0x58025940
 8006c0c:	1000823f 	.word	0x1000823f
 8006c10:	40020940 	.word	0x40020940

08006c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b089      	sub	sp, #36	@ 0x24
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006c22:	4b86      	ldr	r3, [pc, #536]	@ (8006e3c <HAL_GPIO_Init+0x228>)
 8006c24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006c26:	e18c      	b.n	8006f42 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	fa01 f303 	lsl.w	r3, r1, r3
 8006c34:	4013      	ands	r3, r2
 8006c36:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f000 817e 	beq.w	8006f3c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f003 0303 	and.w	r3, r3, #3
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d005      	beq.n	8006c58 <HAL_GPIO_Init+0x44>
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	f003 0303 	and.w	r3, r3, #3
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d130      	bne.n	8006cba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	005b      	lsls	r3, r3, #1
 8006c62:	2203      	movs	r2, #3
 8006c64:	fa02 f303 	lsl.w	r3, r2, r3
 8006c68:	43db      	mvns	r3, r3
 8006c6a:	69ba      	ldr	r2, [r7, #24]
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	68da      	ldr	r2, [r3, #12]
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	005b      	lsls	r3, r3, #1
 8006c78:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7c:	69ba      	ldr	r2, [r7, #24]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	69ba      	ldr	r2, [r7, #24]
 8006c86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006c8e:	2201      	movs	r2, #1
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	fa02 f303 	lsl.w	r3, r2, r3
 8006c96:	43db      	mvns	r3, r3
 8006c98:	69ba      	ldr	r2, [r7, #24]
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	091b      	lsrs	r3, r3, #4
 8006ca4:	f003 0201 	and.w	r2, r3, #1
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	fa02 f303 	lsl.w	r3, r2, r3
 8006cae:	69ba      	ldr	r2, [r7, #24]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	69ba      	ldr	r2, [r7, #24]
 8006cb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f003 0303 	and.w	r3, r3, #3
 8006cc2:	2b03      	cmp	r3, #3
 8006cc4:	d017      	beq.n	8006cf6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	005b      	lsls	r3, r3, #1
 8006cd0:	2203      	movs	r2, #3
 8006cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd6:	43db      	mvns	r3, r3
 8006cd8:	69ba      	ldr	r2, [r7, #24]
 8006cda:	4013      	ands	r3, r2
 8006cdc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	689a      	ldr	r2, [r3, #8]
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	005b      	lsls	r3, r3, #1
 8006ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cea:	69ba      	ldr	r2, [r7, #24]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	69ba      	ldr	r2, [r7, #24]
 8006cf4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	f003 0303 	and.w	r3, r3, #3
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d123      	bne.n	8006d4a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	08da      	lsrs	r2, r3, #3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	3208      	adds	r2, #8
 8006d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	f003 0307 	and.w	r3, r3, #7
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	220f      	movs	r2, #15
 8006d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1e:	43db      	mvns	r3, r3
 8006d20:	69ba      	ldr	r2, [r7, #24]
 8006d22:	4013      	ands	r3, r2
 8006d24:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	691a      	ldr	r2, [r3, #16]
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	f003 0307 	and.w	r3, r3, #7
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	fa02 f303 	lsl.w	r3, r2, r3
 8006d36:	69ba      	ldr	r2, [r7, #24]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	08da      	lsrs	r2, r3, #3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	3208      	adds	r2, #8
 8006d44:	69b9      	ldr	r1, [r7, #24]
 8006d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	005b      	lsls	r3, r3, #1
 8006d54:	2203      	movs	r2, #3
 8006d56:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5a:	43db      	mvns	r3, r3
 8006d5c:	69ba      	ldr	r2, [r7, #24]
 8006d5e:	4013      	ands	r3, r2
 8006d60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	f003 0203 	and.w	r2, r3, #3
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	005b      	lsls	r3, r3, #1
 8006d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d72:	69ba      	ldr	r2, [r7, #24]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	69ba      	ldr	r2, [r7, #24]
 8006d7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f000 80d8 	beq.w	8006f3c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d8c:	4b2c      	ldr	r3, [pc, #176]	@ (8006e40 <HAL_GPIO_Init+0x22c>)
 8006d8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d92:	4a2b      	ldr	r2, [pc, #172]	@ (8006e40 <HAL_GPIO_Init+0x22c>)
 8006d94:	f043 0302 	orr.w	r3, r3, #2
 8006d98:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006d9c:	4b28      	ldr	r3, [pc, #160]	@ (8006e40 <HAL_GPIO_Init+0x22c>)
 8006d9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	60fb      	str	r3, [r7, #12]
 8006da8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006daa:	4a26      	ldr	r2, [pc, #152]	@ (8006e44 <HAL_GPIO_Init+0x230>)
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	089b      	lsrs	r3, r3, #2
 8006db0:	3302      	adds	r3, #2
 8006db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	f003 0303 	and.w	r3, r3, #3
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	220f      	movs	r2, #15
 8006dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc6:	43db      	mvns	r3, r3
 8006dc8:	69ba      	ldr	r2, [r7, #24]
 8006dca:	4013      	ands	r3, r2
 8006dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a1d      	ldr	r2, [pc, #116]	@ (8006e48 <HAL_GPIO_Init+0x234>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d04a      	beq.n	8006e6c <HAL_GPIO_Init+0x258>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a1c      	ldr	r2, [pc, #112]	@ (8006e4c <HAL_GPIO_Init+0x238>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d02b      	beq.n	8006e36 <HAL_GPIO_Init+0x222>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a1b      	ldr	r2, [pc, #108]	@ (8006e50 <HAL_GPIO_Init+0x23c>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d025      	beq.n	8006e32 <HAL_GPIO_Init+0x21e>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a1a      	ldr	r2, [pc, #104]	@ (8006e54 <HAL_GPIO_Init+0x240>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d01f      	beq.n	8006e2e <HAL_GPIO_Init+0x21a>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a19      	ldr	r2, [pc, #100]	@ (8006e58 <HAL_GPIO_Init+0x244>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d019      	beq.n	8006e2a <HAL_GPIO_Init+0x216>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a18      	ldr	r2, [pc, #96]	@ (8006e5c <HAL_GPIO_Init+0x248>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d013      	beq.n	8006e26 <HAL_GPIO_Init+0x212>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a17      	ldr	r2, [pc, #92]	@ (8006e60 <HAL_GPIO_Init+0x24c>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d00d      	beq.n	8006e22 <HAL_GPIO_Init+0x20e>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a16      	ldr	r2, [pc, #88]	@ (8006e64 <HAL_GPIO_Init+0x250>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d007      	beq.n	8006e1e <HAL_GPIO_Init+0x20a>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a15      	ldr	r2, [pc, #84]	@ (8006e68 <HAL_GPIO_Init+0x254>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d101      	bne.n	8006e1a <HAL_GPIO_Init+0x206>
 8006e16:	2309      	movs	r3, #9
 8006e18:	e029      	b.n	8006e6e <HAL_GPIO_Init+0x25a>
 8006e1a:	230a      	movs	r3, #10
 8006e1c:	e027      	b.n	8006e6e <HAL_GPIO_Init+0x25a>
 8006e1e:	2307      	movs	r3, #7
 8006e20:	e025      	b.n	8006e6e <HAL_GPIO_Init+0x25a>
 8006e22:	2306      	movs	r3, #6
 8006e24:	e023      	b.n	8006e6e <HAL_GPIO_Init+0x25a>
 8006e26:	2305      	movs	r3, #5
 8006e28:	e021      	b.n	8006e6e <HAL_GPIO_Init+0x25a>
 8006e2a:	2304      	movs	r3, #4
 8006e2c:	e01f      	b.n	8006e6e <HAL_GPIO_Init+0x25a>
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e01d      	b.n	8006e6e <HAL_GPIO_Init+0x25a>
 8006e32:	2302      	movs	r3, #2
 8006e34:	e01b      	b.n	8006e6e <HAL_GPIO_Init+0x25a>
 8006e36:	2301      	movs	r3, #1
 8006e38:	e019      	b.n	8006e6e <HAL_GPIO_Init+0x25a>
 8006e3a:	bf00      	nop
 8006e3c:	58000080 	.word	0x58000080
 8006e40:	58024400 	.word	0x58024400
 8006e44:	58000400 	.word	0x58000400
 8006e48:	58020000 	.word	0x58020000
 8006e4c:	58020400 	.word	0x58020400
 8006e50:	58020800 	.word	0x58020800
 8006e54:	58020c00 	.word	0x58020c00
 8006e58:	58021000 	.word	0x58021000
 8006e5c:	58021400 	.word	0x58021400
 8006e60:	58021800 	.word	0x58021800
 8006e64:	58021c00 	.word	0x58021c00
 8006e68:	58022400 	.word	0x58022400
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	69fa      	ldr	r2, [r7, #28]
 8006e70:	f002 0203 	and.w	r2, r2, #3
 8006e74:	0092      	lsls	r2, r2, #2
 8006e76:	4093      	lsls	r3, r2
 8006e78:	69ba      	ldr	r2, [r7, #24]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e7e:	4938      	ldr	r1, [pc, #224]	@ (8006f60 <HAL_GPIO_Init+0x34c>)
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	089b      	lsrs	r3, r3, #2
 8006e84:	3302      	adds	r3, #2
 8006e86:	69ba      	ldr	r2, [r7, #24]
 8006e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006e8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	43db      	mvns	r3, r3
 8006e98:	69ba      	ldr	r2, [r7, #24]
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d003      	beq.n	8006eb2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006eaa:	69ba      	ldr	r2, [r7, #24]
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006eb2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006eba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	43db      	mvns	r3, r3
 8006ec6:	69ba      	ldr	r2, [r7, #24]
 8006ec8:	4013      	ands	r3, r2
 8006eca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d003      	beq.n	8006ee0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006ed8:	69ba      	ldr	r2, [r7, #24]
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006ee0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	43db      	mvns	r3, r3
 8006ef2:	69ba      	ldr	r2, [r7, #24]
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d003      	beq.n	8006f0c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006f04:	69ba      	ldr	r2, [r7, #24]
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	69ba      	ldr	r2, [r7, #24]
 8006f10:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	43db      	mvns	r3, r3
 8006f1c:	69ba      	ldr	r2, [r7, #24]
 8006f1e:	4013      	ands	r3, r2
 8006f20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d003      	beq.n	8006f36 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006f2e:	69ba      	ldr	r2, [r7, #24]
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	69ba      	ldr	r2, [r7, #24]
 8006f3a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	fa22 f303 	lsr.w	r3, r2, r3
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f47f ae6b 	bne.w	8006c28 <HAL_GPIO_Init+0x14>
  }
}
 8006f52:	bf00      	nop
 8006f54:	bf00      	nop
 8006f56:	3724      	adds	r7, #36	@ 0x24
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr
 8006f60:	58000400 	.word	0x58000400

08006f64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	691a      	ldr	r2, [r3, #16]
 8006f74:	887b      	ldrh	r3, [r7, #2]
 8006f76:	4013      	ands	r3, r2
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d002      	beq.n	8006f82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	73fb      	strb	r3, [r7, #15]
 8006f80:	e001      	b.n	8006f86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006f82:	2300      	movs	r3, #0
 8006f84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	807b      	strh	r3, [r7, #2]
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006fa4:	787b      	ldrb	r3, [r7, #1]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d003      	beq.n	8006fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006faa:	887a      	ldrh	r2, [r7, #2]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006fb0:	e003      	b.n	8006fba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006fb2:	887b      	ldrh	r3, [r7, #2]
 8006fb4:	041a      	lsls	r2, r3, #16
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	619a      	str	r2, [r3, #24]
}
 8006fba:	bf00      	nop
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b082      	sub	sp, #8
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	4603      	mov	r3, r0
 8006fce:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006fd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fd4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006fd8:	88fb      	ldrh	r3, [r7, #6]
 8006fda:	4013      	ands	r3, r2
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d008      	beq.n	8006ff2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006fe0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006fe4:	88fb      	ldrh	r3, [r7, #6]
 8006fe6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006fea:	88fb      	ldrh	r3, [r7, #6]
 8006fec:	4618      	mov	r0, r3
 8006fee:	f006 fe6f 	bl	800dcd0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006ff2:	bf00      	nop
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
	...

08006ffc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007004:	4b19      	ldr	r3, [pc, #100]	@ (800706c <HAL_PWREx_ConfigSupply+0x70>)
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	f003 0304 	and.w	r3, r3, #4
 800700c:	2b04      	cmp	r3, #4
 800700e:	d00a      	beq.n	8007026 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007010:	4b16      	ldr	r3, [pc, #88]	@ (800706c <HAL_PWREx_ConfigSupply+0x70>)
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	f003 0307 	and.w	r3, r3, #7
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	429a      	cmp	r2, r3
 800701c:	d001      	beq.n	8007022 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e01f      	b.n	8007062 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	e01d      	b.n	8007062 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007026:	4b11      	ldr	r3, [pc, #68]	@ (800706c <HAL_PWREx_ConfigSupply+0x70>)
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	f023 0207 	bic.w	r2, r3, #7
 800702e:	490f      	ldr	r1, [pc, #60]	@ (800706c <HAL_PWREx_ConfigSupply+0x70>)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4313      	orrs	r3, r2
 8007034:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007036:	f7fc fdbf 	bl	8003bb8 <HAL_GetTick>
 800703a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800703c:	e009      	b.n	8007052 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800703e:	f7fc fdbb 	bl	8003bb8 <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800704c:	d901      	bls.n	8007052 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e007      	b.n	8007062 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007052:	4b06      	ldr	r3, [pc, #24]	@ (800706c <HAL_PWREx_ConfigSupply+0x70>)
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800705a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800705e:	d1ee      	bne.n	800703e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	58024800 	.word	0x58024800

08007070 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b08c      	sub	sp, #48	@ 0x30
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e3c8      	b.n	8007814 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	2b00      	cmp	r3, #0
 800708c:	f000 8087 	beq.w	800719e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007090:	4b88      	ldr	r3, [pc, #544]	@ (80072b4 <HAL_RCC_OscConfig+0x244>)
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007098:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800709a:	4b86      	ldr	r3, [pc, #536]	@ (80072b4 <HAL_RCC_OscConfig+0x244>)
 800709c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800709e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80070a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a2:	2b10      	cmp	r3, #16
 80070a4:	d007      	beq.n	80070b6 <HAL_RCC_OscConfig+0x46>
 80070a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a8:	2b18      	cmp	r3, #24
 80070aa:	d110      	bne.n	80070ce <HAL_RCC_OscConfig+0x5e>
 80070ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ae:	f003 0303 	and.w	r3, r3, #3
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d10b      	bne.n	80070ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070b6:	4b7f      	ldr	r3, [pc, #508]	@ (80072b4 <HAL_RCC_OscConfig+0x244>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d06c      	beq.n	800719c <HAL_RCC_OscConfig+0x12c>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d168      	bne.n	800719c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e3a2      	b.n	8007814 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070d6:	d106      	bne.n	80070e6 <HAL_RCC_OscConfig+0x76>
 80070d8:	4b76      	ldr	r3, [pc, #472]	@ (80072b4 <HAL_RCC_OscConfig+0x244>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a75      	ldr	r2, [pc, #468]	@ (80072b4 <HAL_RCC_OscConfig+0x244>)
 80070de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070e2:	6013      	str	r3, [r2, #0]
 80070e4:	e02e      	b.n	8007144 <HAL_RCC_OscConfig+0xd4>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10c      	bne.n	8007108 <HAL_RCC_OscConfig+0x98>
 80070ee:	4b71      	ldr	r3, [pc, #452]	@ (80072b4 <HAL_RCC_OscConfig+0x244>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a70      	ldr	r2, [pc, #448]	@ (80072b4 <HAL_RCC_OscConfig+0x244>)
 80070f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070f8:	6013      	str	r3, [r2, #0]
 80070fa:	4b6e      	ldr	r3, [pc, #440]	@ (80072b4 <HAL_RCC_OscConfig+0x244>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a6d      	ldr	r2, [pc, #436]	@ (80072b4 <HAL_RCC_OscConfig+0x244>)
 8007100:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007104:	6013      	str	r3, [r2, #0]
 8007106:	e01d      	b.n	8007144 <HAL_RCC_OscConfig+0xd4>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007110:	d10c      	bne.n	800712c <HAL_RCC_OscConfig+0xbc>
 8007112:	4b68      	ldr	r3, [pc, #416]	@ (80072b4 <HAL_RCC_OscConfig+0x244>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a67      	ldr	r2, [pc, #412]	@ (80072b4 <HAL_RCC_OscConfig+0x244>)
 8007118:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800711c:	6013      	str	r3, [r2, #0]
 800711e:	4b65      	ldr	r3, [pc, #404]	@ (80072b4 <HAL_RCC_OscConfig+0x244>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a64      	ldr	r2, [pc, #400]	@ (80072b4 <HAL_RCC_OscConfig+0x244>)
 8007124:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007128:	6013      	str	r3, [r2, #0]
 800712a:	e00b      	b.n	8007144 <HAL_RCC_OscConfig+0xd4>
 800712c:	4b61      	ldr	r3, [pc, #388]	@ (80072b4 <HAL_RCC_OscConfig+0x244>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a60      	ldr	r2, [pc, #384]	@ (80072b4 <HAL_RCC_OscConfig+0x244>)
 8007132:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007136:	6013      	str	r3, [r2, #0]
 8007138:	4b5e      	ldr	r3, [pc, #376]	@ (80072b4 <HAL_RCC_OscConfig+0x244>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a5d      	ldr	r2, [pc, #372]	@ (80072b4 <HAL_RCC_OscConfig+0x244>)
 800713e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d013      	beq.n	8007174 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800714c:	f7fc fd34 	bl	8003bb8 <HAL_GetTick>
 8007150:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007152:	e008      	b.n	8007166 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007154:	f7fc fd30 	bl	8003bb8 <HAL_GetTick>
 8007158:	4602      	mov	r2, r0
 800715a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	2b64      	cmp	r3, #100	@ 0x64
 8007160:	d901      	bls.n	8007166 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e356      	b.n	8007814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007166:	4b53      	ldr	r3, [pc, #332]	@ (80072b4 <HAL_RCC_OscConfig+0x244>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d0f0      	beq.n	8007154 <HAL_RCC_OscConfig+0xe4>
 8007172:	e014      	b.n	800719e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007174:	f7fc fd20 	bl	8003bb8 <HAL_GetTick>
 8007178:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800717a:	e008      	b.n	800718e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800717c:	f7fc fd1c 	bl	8003bb8 <HAL_GetTick>
 8007180:	4602      	mov	r2, r0
 8007182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	2b64      	cmp	r3, #100	@ 0x64
 8007188:	d901      	bls.n	800718e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e342      	b.n	8007814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800718e:	4b49      	ldr	r3, [pc, #292]	@ (80072b4 <HAL_RCC_OscConfig+0x244>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1f0      	bne.n	800717c <HAL_RCC_OscConfig+0x10c>
 800719a:	e000      	b.n	800719e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800719c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0302 	and.w	r3, r3, #2
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f000 808c 	beq.w	80072c4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071ac:	4b41      	ldr	r3, [pc, #260]	@ (80072b4 <HAL_RCC_OscConfig+0x244>)
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80071b4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80071b6:	4b3f      	ldr	r3, [pc, #252]	@ (80072b4 <HAL_RCC_OscConfig+0x244>)
 80071b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80071bc:	6a3b      	ldr	r3, [r7, #32]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d007      	beq.n	80071d2 <HAL_RCC_OscConfig+0x162>
 80071c2:	6a3b      	ldr	r3, [r7, #32]
 80071c4:	2b18      	cmp	r3, #24
 80071c6:	d137      	bne.n	8007238 <HAL_RCC_OscConfig+0x1c8>
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	f003 0303 	and.w	r3, r3, #3
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d132      	bne.n	8007238 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071d2:	4b38      	ldr	r3, [pc, #224]	@ (80072b4 <HAL_RCC_OscConfig+0x244>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0304 	and.w	r3, r3, #4
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d005      	beq.n	80071ea <HAL_RCC_OscConfig+0x17a>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e314      	b.n	8007814 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80071ea:	4b32      	ldr	r3, [pc, #200]	@ (80072b4 <HAL_RCC_OscConfig+0x244>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f023 0219 	bic.w	r2, r3, #25
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	492f      	ldr	r1, [pc, #188]	@ (80072b4 <HAL_RCC_OscConfig+0x244>)
 80071f8:	4313      	orrs	r3, r2
 80071fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071fc:	f7fc fcdc 	bl	8003bb8 <HAL_GetTick>
 8007200:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007202:	e008      	b.n	8007216 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007204:	f7fc fcd8 	bl	8003bb8 <HAL_GetTick>
 8007208:	4602      	mov	r2, r0
 800720a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	2b02      	cmp	r3, #2
 8007210:	d901      	bls.n	8007216 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e2fe      	b.n	8007814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007216:	4b27      	ldr	r3, [pc, #156]	@ (80072b4 <HAL_RCC_OscConfig+0x244>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0304 	and.w	r3, r3, #4
 800721e:	2b00      	cmp	r3, #0
 8007220:	d0f0      	beq.n	8007204 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007222:	4b24      	ldr	r3, [pc, #144]	@ (80072b4 <HAL_RCC_OscConfig+0x244>)
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	061b      	lsls	r3, r3, #24
 8007230:	4920      	ldr	r1, [pc, #128]	@ (80072b4 <HAL_RCC_OscConfig+0x244>)
 8007232:	4313      	orrs	r3, r2
 8007234:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007236:	e045      	b.n	80072c4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d026      	beq.n	800728e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007240:	4b1c      	ldr	r3, [pc, #112]	@ (80072b4 <HAL_RCC_OscConfig+0x244>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f023 0219 	bic.w	r2, r3, #25
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	4919      	ldr	r1, [pc, #100]	@ (80072b4 <HAL_RCC_OscConfig+0x244>)
 800724e:	4313      	orrs	r3, r2
 8007250:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007252:	f7fc fcb1 	bl	8003bb8 <HAL_GetTick>
 8007256:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007258:	e008      	b.n	800726c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800725a:	f7fc fcad 	bl	8003bb8 <HAL_GetTick>
 800725e:	4602      	mov	r2, r0
 8007260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	2b02      	cmp	r3, #2
 8007266:	d901      	bls.n	800726c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007268:	2303      	movs	r3, #3
 800726a:	e2d3      	b.n	8007814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800726c:	4b11      	ldr	r3, [pc, #68]	@ (80072b4 <HAL_RCC_OscConfig+0x244>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 0304 	and.w	r3, r3, #4
 8007274:	2b00      	cmp	r3, #0
 8007276:	d0f0      	beq.n	800725a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007278:	4b0e      	ldr	r3, [pc, #56]	@ (80072b4 <HAL_RCC_OscConfig+0x244>)
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	061b      	lsls	r3, r3, #24
 8007286:	490b      	ldr	r1, [pc, #44]	@ (80072b4 <HAL_RCC_OscConfig+0x244>)
 8007288:	4313      	orrs	r3, r2
 800728a:	604b      	str	r3, [r1, #4]
 800728c:	e01a      	b.n	80072c4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800728e:	4b09      	ldr	r3, [pc, #36]	@ (80072b4 <HAL_RCC_OscConfig+0x244>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a08      	ldr	r2, [pc, #32]	@ (80072b4 <HAL_RCC_OscConfig+0x244>)
 8007294:	f023 0301 	bic.w	r3, r3, #1
 8007298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800729a:	f7fc fc8d 	bl	8003bb8 <HAL_GetTick>
 800729e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80072a0:	e00a      	b.n	80072b8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072a2:	f7fc fc89 	bl	8003bb8 <HAL_GetTick>
 80072a6:	4602      	mov	r2, r0
 80072a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d903      	bls.n	80072b8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80072b0:	2303      	movs	r3, #3
 80072b2:	e2af      	b.n	8007814 <HAL_RCC_OscConfig+0x7a4>
 80072b4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80072b8:	4b96      	ldr	r3, [pc, #600]	@ (8007514 <HAL_RCC_OscConfig+0x4a4>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0304 	and.w	r3, r3, #4
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1ee      	bne.n	80072a2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0310 	and.w	r3, r3, #16
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d06a      	beq.n	80073a6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072d0:	4b90      	ldr	r3, [pc, #576]	@ (8007514 <HAL_RCC_OscConfig+0x4a4>)
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80072d8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80072da:	4b8e      	ldr	r3, [pc, #568]	@ (8007514 <HAL_RCC_OscConfig+0x4a4>)
 80072dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072de:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	2b08      	cmp	r3, #8
 80072e4:	d007      	beq.n	80072f6 <HAL_RCC_OscConfig+0x286>
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	2b18      	cmp	r3, #24
 80072ea:	d11b      	bne.n	8007324 <HAL_RCC_OscConfig+0x2b4>
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	f003 0303 	and.w	r3, r3, #3
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d116      	bne.n	8007324 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80072f6:	4b87      	ldr	r3, [pc, #540]	@ (8007514 <HAL_RCC_OscConfig+0x4a4>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d005      	beq.n	800730e <HAL_RCC_OscConfig+0x29e>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	2b80      	cmp	r3, #128	@ 0x80
 8007308:	d001      	beq.n	800730e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e282      	b.n	8007814 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800730e:	4b81      	ldr	r3, [pc, #516]	@ (8007514 <HAL_RCC_OscConfig+0x4a4>)
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a1b      	ldr	r3, [r3, #32]
 800731a:	061b      	lsls	r3, r3, #24
 800731c:	497d      	ldr	r1, [pc, #500]	@ (8007514 <HAL_RCC_OscConfig+0x4a4>)
 800731e:	4313      	orrs	r3, r2
 8007320:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007322:	e040      	b.n	80073a6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	69db      	ldr	r3, [r3, #28]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d023      	beq.n	8007374 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800732c:	4b79      	ldr	r3, [pc, #484]	@ (8007514 <HAL_RCC_OscConfig+0x4a4>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a78      	ldr	r2, [pc, #480]	@ (8007514 <HAL_RCC_OscConfig+0x4a4>)
 8007332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007338:	f7fc fc3e 	bl	8003bb8 <HAL_GetTick>
 800733c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800733e:	e008      	b.n	8007352 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007340:	f7fc fc3a 	bl	8003bb8 <HAL_GetTick>
 8007344:	4602      	mov	r2, r0
 8007346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	2b02      	cmp	r3, #2
 800734c:	d901      	bls.n	8007352 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800734e:	2303      	movs	r3, #3
 8007350:	e260      	b.n	8007814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007352:	4b70      	ldr	r3, [pc, #448]	@ (8007514 <HAL_RCC_OscConfig+0x4a4>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800735a:	2b00      	cmp	r3, #0
 800735c:	d0f0      	beq.n	8007340 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800735e:	4b6d      	ldr	r3, [pc, #436]	@ (8007514 <HAL_RCC_OscConfig+0x4a4>)
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	061b      	lsls	r3, r3, #24
 800736c:	4969      	ldr	r1, [pc, #420]	@ (8007514 <HAL_RCC_OscConfig+0x4a4>)
 800736e:	4313      	orrs	r3, r2
 8007370:	60cb      	str	r3, [r1, #12]
 8007372:	e018      	b.n	80073a6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007374:	4b67      	ldr	r3, [pc, #412]	@ (8007514 <HAL_RCC_OscConfig+0x4a4>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a66      	ldr	r2, [pc, #408]	@ (8007514 <HAL_RCC_OscConfig+0x4a4>)
 800737a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800737e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007380:	f7fc fc1a 	bl	8003bb8 <HAL_GetTick>
 8007384:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007386:	e008      	b.n	800739a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007388:	f7fc fc16 	bl	8003bb8 <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	2b02      	cmp	r3, #2
 8007394:	d901      	bls.n	800739a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	e23c      	b.n	8007814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800739a:	4b5e      	ldr	r3, [pc, #376]	@ (8007514 <HAL_RCC_OscConfig+0x4a4>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1f0      	bne.n	8007388 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 0308 	and.w	r3, r3, #8
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d036      	beq.n	8007420 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	695b      	ldr	r3, [r3, #20]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d019      	beq.n	80073ee <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073ba:	4b56      	ldr	r3, [pc, #344]	@ (8007514 <HAL_RCC_OscConfig+0x4a4>)
 80073bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073be:	4a55      	ldr	r2, [pc, #340]	@ (8007514 <HAL_RCC_OscConfig+0x4a4>)
 80073c0:	f043 0301 	orr.w	r3, r3, #1
 80073c4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073c6:	f7fc fbf7 	bl	8003bb8 <HAL_GetTick>
 80073ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80073cc:	e008      	b.n	80073e0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073ce:	f7fc fbf3 	bl	8003bb8 <HAL_GetTick>
 80073d2:	4602      	mov	r2, r0
 80073d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d901      	bls.n	80073e0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	e219      	b.n	8007814 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80073e0:	4b4c      	ldr	r3, [pc, #304]	@ (8007514 <HAL_RCC_OscConfig+0x4a4>)
 80073e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073e4:	f003 0302 	and.w	r3, r3, #2
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d0f0      	beq.n	80073ce <HAL_RCC_OscConfig+0x35e>
 80073ec:	e018      	b.n	8007420 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073ee:	4b49      	ldr	r3, [pc, #292]	@ (8007514 <HAL_RCC_OscConfig+0x4a4>)
 80073f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073f2:	4a48      	ldr	r2, [pc, #288]	@ (8007514 <HAL_RCC_OscConfig+0x4a4>)
 80073f4:	f023 0301 	bic.w	r3, r3, #1
 80073f8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073fa:	f7fc fbdd 	bl	8003bb8 <HAL_GetTick>
 80073fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007400:	e008      	b.n	8007414 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007402:	f7fc fbd9 	bl	8003bb8 <HAL_GetTick>
 8007406:	4602      	mov	r2, r0
 8007408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740a:	1ad3      	subs	r3, r2, r3
 800740c:	2b02      	cmp	r3, #2
 800740e:	d901      	bls.n	8007414 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	e1ff      	b.n	8007814 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007414:	4b3f      	ldr	r3, [pc, #252]	@ (8007514 <HAL_RCC_OscConfig+0x4a4>)
 8007416:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007418:	f003 0302 	and.w	r3, r3, #2
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1f0      	bne.n	8007402 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 0320 	and.w	r3, r3, #32
 8007428:	2b00      	cmp	r3, #0
 800742a:	d036      	beq.n	800749a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d019      	beq.n	8007468 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007434:	4b37      	ldr	r3, [pc, #220]	@ (8007514 <HAL_RCC_OscConfig+0x4a4>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a36      	ldr	r2, [pc, #216]	@ (8007514 <HAL_RCC_OscConfig+0x4a4>)
 800743a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800743e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007440:	f7fc fbba 	bl	8003bb8 <HAL_GetTick>
 8007444:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007446:	e008      	b.n	800745a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007448:	f7fc fbb6 	bl	8003bb8 <HAL_GetTick>
 800744c:	4602      	mov	r2, r0
 800744e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	2b02      	cmp	r3, #2
 8007454:	d901      	bls.n	800745a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	e1dc      	b.n	8007814 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800745a:	4b2e      	ldr	r3, [pc, #184]	@ (8007514 <HAL_RCC_OscConfig+0x4a4>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007462:	2b00      	cmp	r3, #0
 8007464:	d0f0      	beq.n	8007448 <HAL_RCC_OscConfig+0x3d8>
 8007466:	e018      	b.n	800749a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007468:	4b2a      	ldr	r3, [pc, #168]	@ (8007514 <HAL_RCC_OscConfig+0x4a4>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a29      	ldr	r2, [pc, #164]	@ (8007514 <HAL_RCC_OscConfig+0x4a4>)
 800746e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007472:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007474:	f7fc fba0 	bl	8003bb8 <HAL_GetTick>
 8007478:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800747a:	e008      	b.n	800748e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800747c:	f7fc fb9c 	bl	8003bb8 <HAL_GetTick>
 8007480:	4602      	mov	r2, r0
 8007482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	2b02      	cmp	r3, #2
 8007488:	d901      	bls.n	800748e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e1c2      	b.n	8007814 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800748e:	4b21      	ldr	r3, [pc, #132]	@ (8007514 <HAL_RCC_OscConfig+0x4a4>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d1f0      	bne.n	800747c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0304 	and.w	r3, r3, #4
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 8086 	beq.w	80075b4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80074a8:	4b1b      	ldr	r3, [pc, #108]	@ (8007518 <HAL_RCC_OscConfig+0x4a8>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a1a      	ldr	r2, [pc, #104]	@ (8007518 <HAL_RCC_OscConfig+0x4a8>)
 80074ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80074b4:	f7fc fb80 	bl	8003bb8 <HAL_GetTick>
 80074b8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074ba:	e008      	b.n	80074ce <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074bc:	f7fc fb7c 	bl	8003bb8 <HAL_GetTick>
 80074c0:	4602      	mov	r2, r0
 80074c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	2b64      	cmp	r3, #100	@ 0x64
 80074c8:	d901      	bls.n	80074ce <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80074ca:	2303      	movs	r3, #3
 80074cc:	e1a2      	b.n	8007814 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074ce:	4b12      	ldr	r3, [pc, #72]	@ (8007518 <HAL_RCC_OscConfig+0x4a8>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d0f0      	beq.n	80074bc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d106      	bne.n	80074f0 <HAL_RCC_OscConfig+0x480>
 80074e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007514 <HAL_RCC_OscConfig+0x4a4>)
 80074e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074e6:	4a0b      	ldr	r2, [pc, #44]	@ (8007514 <HAL_RCC_OscConfig+0x4a4>)
 80074e8:	f043 0301 	orr.w	r3, r3, #1
 80074ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80074ee:	e032      	b.n	8007556 <HAL_RCC_OscConfig+0x4e6>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d111      	bne.n	800751c <HAL_RCC_OscConfig+0x4ac>
 80074f8:	4b06      	ldr	r3, [pc, #24]	@ (8007514 <HAL_RCC_OscConfig+0x4a4>)
 80074fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074fc:	4a05      	ldr	r2, [pc, #20]	@ (8007514 <HAL_RCC_OscConfig+0x4a4>)
 80074fe:	f023 0301 	bic.w	r3, r3, #1
 8007502:	6713      	str	r3, [r2, #112]	@ 0x70
 8007504:	4b03      	ldr	r3, [pc, #12]	@ (8007514 <HAL_RCC_OscConfig+0x4a4>)
 8007506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007508:	4a02      	ldr	r2, [pc, #8]	@ (8007514 <HAL_RCC_OscConfig+0x4a4>)
 800750a:	f023 0304 	bic.w	r3, r3, #4
 800750e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007510:	e021      	b.n	8007556 <HAL_RCC_OscConfig+0x4e6>
 8007512:	bf00      	nop
 8007514:	58024400 	.word	0x58024400
 8007518:	58024800 	.word	0x58024800
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	2b05      	cmp	r3, #5
 8007522:	d10c      	bne.n	800753e <HAL_RCC_OscConfig+0x4ce>
 8007524:	4b83      	ldr	r3, [pc, #524]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 8007526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007528:	4a82      	ldr	r2, [pc, #520]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 800752a:	f043 0304 	orr.w	r3, r3, #4
 800752e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007530:	4b80      	ldr	r3, [pc, #512]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 8007532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007534:	4a7f      	ldr	r2, [pc, #508]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 8007536:	f043 0301 	orr.w	r3, r3, #1
 800753a:	6713      	str	r3, [r2, #112]	@ 0x70
 800753c:	e00b      	b.n	8007556 <HAL_RCC_OscConfig+0x4e6>
 800753e:	4b7d      	ldr	r3, [pc, #500]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 8007540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007542:	4a7c      	ldr	r2, [pc, #496]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 8007544:	f023 0301 	bic.w	r3, r3, #1
 8007548:	6713      	str	r3, [r2, #112]	@ 0x70
 800754a:	4b7a      	ldr	r3, [pc, #488]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 800754c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800754e:	4a79      	ldr	r2, [pc, #484]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 8007550:	f023 0304 	bic.w	r3, r3, #4
 8007554:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d015      	beq.n	800758a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800755e:	f7fc fb2b 	bl	8003bb8 <HAL_GetTick>
 8007562:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007564:	e00a      	b.n	800757c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007566:	f7fc fb27 	bl	8003bb8 <HAL_GetTick>
 800756a:	4602      	mov	r2, r0
 800756c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007574:	4293      	cmp	r3, r2
 8007576:	d901      	bls.n	800757c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8007578:	2303      	movs	r3, #3
 800757a:	e14b      	b.n	8007814 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800757c:	4b6d      	ldr	r3, [pc, #436]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 800757e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007580:	f003 0302 	and.w	r3, r3, #2
 8007584:	2b00      	cmp	r3, #0
 8007586:	d0ee      	beq.n	8007566 <HAL_RCC_OscConfig+0x4f6>
 8007588:	e014      	b.n	80075b4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800758a:	f7fc fb15 	bl	8003bb8 <HAL_GetTick>
 800758e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007590:	e00a      	b.n	80075a8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007592:	f7fc fb11 	bl	8003bb8 <HAL_GetTick>
 8007596:	4602      	mov	r2, r0
 8007598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d901      	bls.n	80075a8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80075a4:	2303      	movs	r3, #3
 80075a6:	e135      	b.n	8007814 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80075a8:	4b62      	ldr	r3, [pc, #392]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 80075aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075ac:	f003 0302 	and.w	r3, r3, #2
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1ee      	bne.n	8007592 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 812a 	beq.w	8007812 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80075be:	4b5d      	ldr	r3, [pc, #372]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80075c6:	2b18      	cmp	r3, #24
 80075c8:	f000 80ba 	beq.w	8007740 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	f040 8095 	bne.w	8007700 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075d6:	4b57      	ldr	r3, [pc, #348]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a56      	ldr	r2, [pc, #344]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 80075dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80075e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075e2:	f7fc fae9 	bl	8003bb8 <HAL_GetTick>
 80075e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075e8:	e008      	b.n	80075fc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075ea:	f7fc fae5 	bl	8003bb8 <HAL_GetTick>
 80075ee:	4602      	mov	r2, r0
 80075f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d901      	bls.n	80075fc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e10b      	b.n	8007814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075fc:	4b4d      	ldr	r3, [pc, #308]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1f0      	bne.n	80075ea <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007608:	4b4a      	ldr	r3, [pc, #296]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 800760a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800760c:	4b4a      	ldr	r3, [pc, #296]	@ (8007738 <HAL_RCC_OscConfig+0x6c8>)
 800760e:	4013      	ands	r3, r2
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007618:	0112      	lsls	r2, r2, #4
 800761a:	430a      	orrs	r2, r1
 800761c:	4945      	ldr	r1, [pc, #276]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 800761e:	4313      	orrs	r3, r2
 8007620:	628b      	str	r3, [r1, #40]	@ 0x28
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007626:	3b01      	subs	r3, #1
 8007628:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007630:	3b01      	subs	r3, #1
 8007632:	025b      	lsls	r3, r3, #9
 8007634:	b29b      	uxth	r3, r3
 8007636:	431a      	orrs	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800763c:	3b01      	subs	r3, #1
 800763e:	041b      	lsls	r3, r3, #16
 8007640:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007644:	431a      	orrs	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800764a:	3b01      	subs	r3, #1
 800764c:	061b      	lsls	r3, r3, #24
 800764e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007652:	4938      	ldr	r1, [pc, #224]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 8007654:	4313      	orrs	r3, r2
 8007656:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007658:	4b36      	ldr	r3, [pc, #216]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 800765a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800765c:	4a35      	ldr	r2, [pc, #212]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 800765e:	f023 0301 	bic.w	r3, r3, #1
 8007662:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007664:	4b33      	ldr	r3, [pc, #204]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 8007666:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007668:	4b34      	ldr	r3, [pc, #208]	@ (800773c <HAL_RCC_OscConfig+0x6cc>)
 800766a:	4013      	ands	r3, r2
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007670:	00d2      	lsls	r2, r2, #3
 8007672:	4930      	ldr	r1, [pc, #192]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 8007674:	4313      	orrs	r3, r2
 8007676:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007678:	4b2e      	ldr	r3, [pc, #184]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 800767a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800767c:	f023 020c 	bic.w	r2, r3, #12
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007684:	492b      	ldr	r1, [pc, #172]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 8007686:	4313      	orrs	r3, r2
 8007688:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800768a:	4b2a      	ldr	r3, [pc, #168]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 800768c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800768e:	f023 0202 	bic.w	r2, r3, #2
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007696:	4927      	ldr	r1, [pc, #156]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 8007698:	4313      	orrs	r3, r2
 800769a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800769c:	4b25      	ldr	r3, [pc, #148]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 800769e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a0:	4a24      	ldr	r2, [pc, #144]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 80076a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076a8:	4b22      	ldr	r3, [pc, #136]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 80076aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ac:	4a21      	ldr	r2, [pc, #132]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 80076ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80076b4:	4b1f      	ldr	r3, [pc, #124]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 80076b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b8:	4a1e      	ldr	r2, [pc, #120]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 80076ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80076be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80076c0:	4b1c      	ldr	r3, [pc, #112]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 80076c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c4:	4a1b      	ldr	r2, [pc, #108]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 80076c6:	f043 0301 	orr.w	r3, r3, #1
 80076ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076cc:	4b19      	ldr	r3, [pc, #100]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a18      	ldr	r2, [pc, #96]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 80076d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80076d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076d8:	f7fc fa6e 	bl	8003bb8 <HAL_GetTick>
 80076dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80076de:	e008      	b.n	80076f2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076e0:	f7fc fa6a 	bl	8003bb8 <HAL_GetTick>
 80076e4:	4602      	mov	r2, r0
 80076e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d901      	bls.n	80076f2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e090      	b.n	8007814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80076f2:	4b10      	ldr	r3, [pc, #64]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d0f0      	beq.n	80076e0 <HAL_RCC_OscConfig+0x670>
 80076fe:	e088      	b.n	8007812 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007700:	4b0c      	ldr	r3, [pc, #48]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a0b      	ldr	r2, [pc, #44]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 8007706:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800770a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800770c:	f7fc fa54 	bl	8003bb8 <HAL_GetTick>
 8007710:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007712:	e008      	b.n	8007726 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007714:	f7fc fa50 	bl	8003bb8 <HAL_GetTick>
 8007718:	4602      	mov	r2, r0
 800771a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	2b02      	cmp	r3, #2
 8007720:	d901      	bls.n	8007726 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e076      	b.n	8007814 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007726:	4b03      	ldr	r3, [pc, #12]	@ (8007734 <HAL_RCC_OscConfig+0x6c4>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1f0      	bne.n	8007714 <HAL_RCC_OscConfig+0x6a4>
 8007732:	e06e      	b.n	8007812 <HAL_RCC_OscConfig+0x7a2>
 8007734:	58024400 	.word	0x58024400
 8007738:	fffffc0c 	.word	0xfffffc0c
 800773c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007740:	4b36      	ldr	r3, [pc, #216]	@ (800781c <HAL_RCC_OscConfig+0x7ac>)
 8007742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007744:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007746:	4b35      	ldr	r3, [pc, #212]	@ (800781c <HAL_RCC_OscConfig+0x7ac>)
 8007748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800774a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007750:	2b01      	cmp	r3, #1
 8007752:	d031      	beq.n	80077b8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	f003 0203 	and.w	r2, r3, #3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800775e:	429a      	cmp	r2, r3
 8007760:	d12a      	bne.n	80077b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	091b      	lsrs	r3, r3, #4
 8007766:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800776e:	429a      	cmp	r2, r3
 8007770:	d122      	bne.n	80077b8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800777c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800777e:	429a      	cmp	r2, r3
 8007780:	d11a      	bne.n	80077b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	0a5b      	lsrs	r3, r3, #9
 8007786:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800778e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007790:	429a      	cmp	r2, r3
 8007792:	d111      	bne.n	80077b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	0c1b      	lsrs	r3, r3, #16
 8007798:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d108      	bne.n	80077b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	0e1b      	lsrs	r3, r3, #24
 80077aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d001      	beq.n	80077bc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	e02b      	b.n	8007814 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80077bc:	4b17      	ldr	r3, [pc, #92]	@ (800781c <HAL_RCC_OscConfig+0x7ac>)
 80077be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077c0:	08db      	lsrs	r3, r3, #3
 80077c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077c6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d01f      	beq.n	8007812 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80077d2:	4b12      	ldr	r3, [pc, #72]	@ (800781c <HAL_RCC_OscConfig+0x7ac>)
 80077d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d6:	4a11      	ldr	r2, [pc, #68]	@ (800781c <HAL_RCC_OscConfig+0x7ac>)
 80077d8:	f023 0301 	bic.w	r3, r3, #1
 80077dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80077de:	f7fc f9eb 	bl	8003bb8 <HAL_GetTick>
 80077e2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80077e4:	bf00      	nop
 80077e6:	f7fc f9e7 	bl	8003bb8 <HAL_GetTick>
 80077ea:	4602      	mov	r2, r0
 80077ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d0f9      	beq.n	80077e6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80077f2:	4b0a      	ldr	r3, [pc, #40]	@ (800781c <HAL_RCC_OscConfig+0x7ac>)
 80077f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077f6:	4b0a      	ldr	r3, [pc, #40]	@ (8007820 <HAL_RCC_OscConfig+0x7b0>)
 80077f8:	4013      	ands	r3, r2
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80077fe:	00d2      	lsls	r2, r2, #3
 8007800:	4906      	ldr	r1, [pc, #24]	@ (800781c <HAL_RCC_OscConfig+0x7ac>)
 8007802:	4313      	orrs	r3, r2
 8007804:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007806:	4b05      	ldr	r3, [pc, #20]	@ (800781c <HAL_RCC_OscConfig+0x7ac>)
 8007808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800780a:	4a04      	ldr	r2, [pc, #16]	@ (800781c <HAL_RCC_OscConfig+0x7ac>)
 800780c:	f043 0301 	orr.w	r3, r3, #1
 8007810:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3730      	adds	r7, #48	@ 0x30
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	58024400 	.word	0x58024400
 8007820:	ffff0007 	.word	0xffff0007

08007824 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b086      	sub	sp, #24
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d101      	bne.n	8007838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	e19c      	b.n	8007b72 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007838:	4b8a      	ldr	r3, [pc, #552]	@ (8007a64 <HAL_RCC_ClockConfig+0x240>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 030f 	and.w	r3, r3, #15
 8007840:	683a      	ldr	r2, [r7, #0]
 8007842:	429a      	cmp	r2, r3
 8007844:	d910      	bls.n	8007868 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007846:	4b87      	ldr	r3, [pc, #540]	@ (8007a64 <HAL_RCC_ClockConfig+0x240>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f023 020f 	bic.w	r2, r3, #15
 800784e:	4985      	ldr	r1, [pc, #532]	@ (8007a64 <HAL_RCC_ClockConfig+0x240>)
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	4313      	orrs	r3, r2
 8007854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007856:	4b83      	ldr	r3, [pc, #524]	@ (8007a64 <HAL_RCC_ClockConfig+0x240>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 030f 	and.w	r3, r3, #15
 800785e:	683a      	ldr	r2, [r7, #0]
 8007860:	429a      	cmp	r2, r3
 8007862:	d001      	beq.n	8007868 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e184      	b.n	8007b72 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 0304 	and.w	r3, r3, #4
 8007870:	2b00      	cmp	r3, #0
 8007872:	d010      	beq.n	8007896 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	691a      	ldr	r2, [r3, #16]
 8007878:	4b7b      	ldr	r3, [pc, #492]	@ (8007a68 <HAL_RCC_ClockConfig+0x244>)
 800787a:	699b      	ldr	r3, [r3, #24]
 800787c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007880:	429a      	cmp	r2, r3
 8007882:	d908      	bls.n	8007896 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007884:	4b78      	ldr	r3, [pc, #480]	@ (8007a68 <HAL_RCC_ClockConfig+0x244>)
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	4975      	ldr	r1, [pc, #468]	@ (8007a68 <HAL_RCC_ClockConfig+0x244>)
 8007892:	4313      	orrs	r3, r2
 8007894:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 0308 	and.w	r3, r3, #8
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d010      	beq.n	80078c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	695a      	ldr	r2, [r3, #20]
 80078a6:	4b70      	ldr	r3, [pc, #448]	@ (8007a68 <HAL_RCC_ClockConfig+0x244>)
 80078a8:	69db      	ldr	r3, [r3, #28]
 80078aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d908      	bls.n	80078c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80078b2:	4b6d      	ldr	r3, [pc, #436]	@ (8007a68 <HAL_RCC_ClockConfig+0x244>)
 80078b4:	69db      	ldr	r3, [r3, #28]
 80078b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	695b      	ldr	r3, [r3, #20]
 80078be:	496a      	ldr	r1, [pc, #424]	@ (8007a68 <HAL_RCC_ClockConfig+0x244>)
 80078c0:	4313      	orrs	r3, r2
 80078c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 0310 	and.w	r3, r3, #16
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d010      	beq.n	80078f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	699a      	ldr	r2, [r3, #24]
 80078d4:	4b64      	ldr	r3, [pc, #400]	@ (8007a68 <HAL_RCC_ClockConfig+0x244>)
 80078d6:	69db      	ldr	r3, [r3, #28]
 80078d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80078dc:	429a      	cmp	r2, r3
 80078de:	d908      	bls.n	80078f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80078e0:	4b61      	ldr	r3, [pc, #388]	@ (8007a68 <HAL_RCC_ClockConfig+0x244>)
 80078e2:	69db      	ldr	r3, [r3, #28]
 80078e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	699b      	ldr	r3, [r3, #24]
 80078ec:	495e      	ldr	r1, [pc, #376]	@ (8007a68 <HAL_RCC_ClockConfig+0x244>)
 80078ee:	4313      	orrs	r3, r2
 80078f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0320 	and.w	r3, r3, #32
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d010      	beq.n	8007920 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	69da      	ldr	r2, [r3, #28]
 8007902:	4b59      	ldr	r3, [pc, #356]	@ (8007a68 <HAL_RCC_ClockConfig+0x244>)
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800790a:	429a      	cmp	r2, r3
 800790c:	d908      	bls.n	8007920 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800790e:	4b56      	ldr	r3, [pc, #344]	@ (8007a68 <HAL_RCC_ClockConfig+0x244>)
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	69db      	ldr	r3, [r3, #28]
 800791a:	4953      	ldr	r1, [pc, #332]	@ (8007a68 <HAL_RCC_ClockConfig+0x244>)
 800791c:	4313      	orrs	r3, r2
 800791e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 0302 	and.w	r3, r3, #2
 8007928:	2b00      	cmp	r3, #0
 800792a:	d010      	beq.n	800794e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	68da      	ldr	r2, [r3, #12]
 8007930:	4b4d      	ldr	r3, [pc, #308]	@ (8007a68 <HAL_RCC_ClockConfig+0x244>)
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	f003 030f 	and.w	r3, r3, #15
 8007938:	429a      	cmp	r2, r3
 800793a:	d908      	bls.n	800794e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800793c:	4b4a      	ldr	r3, [pc, #296]	@ (8007a68 <HAL_RCC_ClockConfig+0x244>)
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	f023 020f 	bic.w	r2, r3, #15
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	4947      	ldr	r1, [pc, #284]	@ (8007a68 <HAL_RCC_ClockConfig+0x244>)
 800794a:	4313      	orrs	r3, r2
 800794c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	2b00      	cmp	r3, #0
 8007958:	d055      	beq.n	8007a06 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800795a:	4b43      	ldr	r3, [pc, #268]	@ (8007a68 <HAL_RCC_ClockConfig+0x244>)
 800795c:	699b      	ldr	r3, [r3, #24]
 800795e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	4940      	ldr	r1, [pc, #256]	@ (8007a68 <HAL_RCC_ClockConfig+0x244>)
 8007968:	4313      	orrs	r3, r2
 800796a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	2b02      	cmp	r3, #2
 8007972:	d107      	bne.n	8007984 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007974:	4b3c      	ldr	r3, [pc, #240]	@ (8007a68 <HAL_RCC_ClockConfig+0x244>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800797c:	2b00      	cmp	r3, #0
 800797e:	d121      	bne.n	80079c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e0f6      	b.n	8007b72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	2b03      	cmp	r3, #3
 800798a:	d107      	bne.n	800799c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800798c:	4b36      	ldr	r3, [pc, #216]	@ (8007a68 <HAL_RCC_ClockConfig+0x244>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007994:	2b00      	cmp	r3, #0
 8007996:	d115      	bne.n	80079c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	e0ea      	b.n	8007b72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d107      	bne.n	80079b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80079a4:	4b30      	ldr	r3, [pc, #192]	@ (8007a68 <HAL_RCC_ClockConfig+0x244>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d109      	bne.n	80079c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e0de      	b.n	8007b72 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079b4:	4b2c      	ldr	r3, [pc, #176]	@ (8007a68 <HAL_RCC_ClockConfig+0x244>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 0304 	and.w	r3, r3, #4
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d101      	bne.n	80079c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	e0d6      	b.n	8007b72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80079c4:	4b28      	ldr	r3, [pc, #160]	@ (8007a68 <HAL_RCC_ClockConfig+0x244>)
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	f023 0207 	bic.w	r2, r3, #7
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	4925      	ldr	r1, [pc, #148]	@ (8007a68 <HAL_RCC_ClockConfig+0x244>)
 80079d2:	4313      	orrs	r3, r2
 80079d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079d6:	f7fc f8ef 	bl	8003bb8 <HAL_GetTick>
 80079da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079dc:	e00a      	b.n	80079f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079de:	f7fc f8eb 	bl	8003bb8 <HAL_GetTick>
 80079e2:	4602      	mov	r2, r0
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d901      	bls.n	80079f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e0be      	b.n	8007b72 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079f4:	4b1c      	ldr	r3, [pc, #112]	@ (8007a68 <HAL_RCC_ClockConfig+0x244>)
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	00db      	lsls	r3, r3, #3
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d1eb      	bne.n	80079de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 0302 	and.w	r3, r3, #2
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d010      	beq.n	8007a34 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	68da      	ldr	r2, [r3, #12]
 8007a16:	4b14      	ldr	r3, [pc, #80]	@ (8007a68 <HAL_RCC_ClockConfig+0x244>)
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	f003 030f 	and.w	r3, r3, #15
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d208      	bcs.n	8007a34 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a22:	4b11      	ldr	r3, [pc, #68]	@ (8007a68 <HAL_RCC_ClockConfig+0x244>)
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	f023 020f 	bic.w	r2, r3, #15
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	490e      	ldr	r1, [pc, #56]	@ (8007a68 <HAL_RCC_ClockConfig+0x244>)
 8007a30:	4313      	orrs	r3, r2
 8007a32:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007a34:	4b0b      	ldr	r3, [pc, #44]	@ (8007a64 <HAL_RCC_ClockConfig+0x240>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 030f 	and.w	r3, r3, #15
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d214      	bcs.n	8007a6c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a42:	4b08      	ldr	r3, [pc, #32]	@ (8007a64 <HAL_RCC_ClockConfig+0x240>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f023 020f 	bic.w	r2, r3, #15
 8007a4a:	4906      	ldr	r1, [pc, #24]	@ (8007a64 <HAL_RCC_ClockConfig+0x240>)
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a52:	4b04      	ldr	r3, [pc, #16]	@ (8007a64 <HAL_RCC_ClockConfig+0x240>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 030f 	and.w	r3, r3, #15
 8007a5a:	683a      	ldr	r2, [r7, #0]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d005      	beq.n	8007a6c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e086      	b.n	8007b72 <HAL_RCC_ClockConfig+0x34e>
 8007a64:	52002000 	.word	0x52002000
 8007a68:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 0304 	and.w	r3, r3, #4
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d010      	beq.n	8007a9a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	691a      	ldr	r2, [r3, #16]
 8007a7c:	4b3f      	ldr	r3, [pc, #252]	@ (8007b7c <HAL_RCC_ClockConfig+0x358>)
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d208      	bcs.n	8007a9a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007a88:	4b3c      	ldr	r3, [pc, #240]	@ (8007b7c <HAL_RCC_ClockConfig+0x358>)
 8007a8a:	699b      	ldr	r3, [r3, #24]
 8007a8c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	4939      	ldr	r1, [pc, #228]	@ (8007b7c <HAL_RCC_ClockConfig+0x358>)
 8007a96:	4313      	orrs	r3, r2
 8007a98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 0308 	and.w	r3, r3, #8
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d010      	beq.n	8007ac8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	695a      	ldr	r2, [r3, #20]
 8007aaa:	4b34      	ldr	r3, [pc, #208]	@ (8007b7c <HAL_RCC_ClockConfig+0x358>)
 8007aac:	69db      	ldr	r3, [r3, #28]
 8007aae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d208      	bcs.n	8007ac8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007ab6:	4b31      	ldr	r3, [pc, #196]	@ (8007b7c <HAL_RCC_ClockConfig+0x358>)
 8007ab8:	69db      	ldr	r3, [r3, #28]
 8007aba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	492e      	ldr	r1, [pc, #184]	@ (8007b7c <HAL_RCC_ClockConfig+0x358>)
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0310 	and.w	r3, r3, #16
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d010      	beq.n	8007af6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	699a      	ldr	r2, [r3, #24]
 8007ad8:	4b28      	ldr	r3, [pc, #160]	@ (8007b7c <HAL_RCC_ClockConfig+0x358>)
 8007ada:	69db      	ldr	r3, [r3, #28]
 8007adc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d208      	bcs.n	8007af6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007ae4:	4b25      	ldr	r3, [pc, #148]	@ (8007b7c <HAL_RCC_ClockConfig+0x358>)
 8007ae6:	69db      	ldr	r3, [r3, #28]
 8007ae8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	699b      	ldr	r3, [r3, #24]
 8007af0:	4922      	ldr	r1, [pc, #136]	@ (8007b7c <HAL_RCC_ClockConfig+0x358>)
 8007af2:	4313      	orrs	r3, r2
 8007af4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 0320 	and.w	r3, r3, #32
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d010      	beq.n	8007b24 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	69da      	ldr	r2, [r3, #28]
 8007b06:	4b1d      	ldr	r3, [pc, #116]	@ (8007b7c <HAL_RCC_ClockConfig+0x358>)
 8007b08:	6a1b      	ldr	r3, [r3, #32]
 8007b0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d208      	bcs.n	8007b24 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007b12:	4b1a      	ldr	r3, [pc, #104]	@ (8007b7c <HAL_RCC_ClockConfig+0x358>)
 8007b14:	6a1b      	ldr	r3, [r3, #32]
 8007b16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	69db      	ldr	r3, [r3, #28]
 8007b1e:	4917      	ldr	r1, [pc, #92]	@ (8007b7c <HAL_RCC_ClockConfig+0x358>)
 8007b20:	4313      	orrs	r3, r2
 8007b22:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007b24:	f000 f834 	bl	8007b90 <HAL_RCC_GetSysClockFreq>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	4b14      	ldr	r3, [pc, #80]	@ (8007b7c <HAL_RCC_ClockConfig+0x358>)
 8007b2c:	699b      	ldr	r3, [r3, #24]
 8007b2e:	0a1b      	lsrs	r3, r3, #8
 8007b30:	f003 030f 	and.w	r3, r3, #15
 8007b34:	4912      	ldr	r1, [pc, #72]	@ (8007b80 <HAL_RCC_ClockConfig+0x35c>)
 8007b36:	5ccb      	ldrb	r3, [r1, r3]
 8007b38:	f003 031f 	and.w	r3, r3, #31
 8007b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b40:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007b42:	4b0e      	ldr	r3, [pc, #56]	@ (8007b7c <HAL_RCC_ClockConfig+0x358>)
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	f003 030f 	and.w	r3, r3, #15
 8007b4a:	4a0d      	ldr	r2, [pc, #52]	@ (8007b80 <HAL_RCC_ClockConfig+0x35c>)
 8007b4c:	5cd3      	ldrb	r3, [r2, r3]
 8007b4e:	f003 031f 	and.w	r3, r3, #31
 8007b52:	693a      	ldr	r2, [r7, #16]
 8007b54:	fa22 f303 	lsr.w	r3, r2, r3
 8007b58:	4a0a      	ldr	r2, [pc, #40]	@ (8007b84 <HAL_RCC_ClockConfig+0x360>)
 8007b5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8007b88 <HAL_RCC_ClockConfig+0x364>)
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007b62:	4b0a      	ldr	r3, [pc, #40]	@ (8007b8c <HAL_RCC_ClockConfig+0x368>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7fb ffdc 	bl	8003b24 <HAL_InitTick>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3718      	adds	r7, #24
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	58024400 	.word	0x58024400
 8007b80:	08027b60 	.word	0x08027b60
 8007b84:	24000008 	.word	0x24000008
 8007b88:	24000004 	.word	0x24000004
 8007b8c:	2400000c 	.word	0x2400000c

08007b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b089      	sub	sp, #36	@ 0x24
 8007b94:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b96:	4bb3      	ldr	r3, [pc, #716]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b9e:	2b18      	cmp	r3, #24
 8007ba0:	f200 8155 	bhi.w	8007e4e <HAL_RCC_GetSysClockFreq+0x2be>
 8007ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8007bac <HAL_RCC_GetSysClockFreq+0x1c>)
 8007ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007baa:	bf00      	nop
 8007bac:	08007c11 	.word	0x08007c11
 8007bb0:	08007e4f 	.word	0x08007e4f
 8007bb4:	08007e4f 	.word	0x08007e4f
 8007bb8:	08007e4f 	.word	0x08007e4f
 8007bbc:	08007e4f 	.word	0x08007e4f
 8007bc0:	08007e4f 	.word	0x08007e4f
 8007bc4:	08007e4f 	.word	0x08007e4f
 8007bc8:	08007e4f 	.word	0x08007e4f
 8007bcc:	08007c37 	.word	0x08007c37
 8007bd0:	08007e4f 	.word	0x08007e4f
 8007bd4:	08007e4f 	.word	0x08007e4f
 8007bd8:	08007e4f 	.word	0x08007e4f
 8007bdc:	08007e4f 	.word	0x08007e4f
 8007be0:	08007e4f 	.word	0x08007e4f
 8007be4:	08007e4f 	.word	0x08007e4f
 8007be8:	08007e4f 	.word	0x08007e4f
 8007bec:	08007c3d 	.word	0x08007c3d
 8007bf0:	08007e4f 	.word	0x08007e4f
 8007bf4:	08007e4f 	.word	0x08007e4f
 8007bf8:	08007e4f 	.word	0x08007e4f
 8007bfc:	08007e4f 	.word	0x08007e4f
 8007c00:	08007e4f 	.word	0x08007e4f
 8007c04:	08007e4f 	.word	0x08007e4f
 8007c08:	08007e4f 	.word	0x08007e4f
 8007c0c:	08007c43 	.word	0x08007c43
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c10:	4b94      	ldr	r3, [pc, #592]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0320 	and.w	r3, r3, #32
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d009      	beq.n	8007c30 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c1c:	4b91      	ldr	r3, [pc, #580]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	08db      	lsrs	r3, r3, #3
 8007c22:	f003 0303 	and.w	r3, r3, #3
 8007c26:	4a90      	ldr	r2, [pc, #576]	@ (8007e68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c28:	fa22 f303 	lsr.w	r3, r2, r3
 8007c2c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007c2e:	e111      	b.n	8007e54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007c30:	4b8d      	ldr	r3, [pc, #564]	@ (8007e68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c32:	61bb      	str	r3, [r7, #24]
      break;
 8007c34:	e10e      	b.n	8007e54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007c36:	4b8d      	ldr	r3, [pc, #564]	@ (8007e6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007c38:	61bb      	str	r3, [r7, #24]
      break;
 8007c3a:	e10b      	b.n	8007e54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007c3c:	4b8c      	ldr	r3, [pc, #560]	@ (8007e70 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007c3e:	61bb      	str	r3, [r7, #24]
      break;
 8007c40:	e108      	b.n	8007e54 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c42:	4b88      	ldr	r3, [pc, #544]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c46:	f003 0303 	and.w	r3, r3, #3
 8007c4a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007c4c:	4b85      	ldr	r3, [pc, #532]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c50:	091b      	lsrs	r3, r3, #4
 8007c52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c56:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007c58:	4b82      	ldr	r3, [pc, #520]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c5c:	f003 0301 	and.w	r3, r3, #1
 8007c60:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007c62:	4b80      	ldr	r3, [pc, #512]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c66:	08db      	lsrs	r3, r3, #3
 8007c68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	fb02 f303 	mul.w	r3, r2, r3
 8007c72:	ee07 3a90 	vmov	s15, r3
 8007c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c7a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 80e1 	beq.w	8007e48 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	f000 8083 	beq.w	8007d94 <HAL_RCC_GetSysClockFreq+0x204>
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	f200 80a1 	bhi.w	8007dd8 <HAL_RCC_GetSysClockFreq+0x248>
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d003      	beq.n	8007ca4 <HAL_RCC_GetSysClockFreq+0x114>
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d056      	beq.n	8007d50 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007ca2:	e099      	b.n	8007dd8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ca4:	4b6f      	ldr	r3, [pc, #444]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0320 	and.w	r3, r3, #32
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d02d      	beq.n	8007d0c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007cb0:	4b6c      	ldr	r3, [pc, #432]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	08db      	lsrs	r3, r3, #3
 8007cb6:	f003 0303 	and.w	r3, r3, #3
 8007cba:	4a6b      	ldr	r2, [pc, #428]	@ (8007e68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8007cc0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	ee07 3a90 	vmov	s15, r3
 8007cc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	ee07 3a90 	vmov	s15, r3
 8007cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cda:	4b62      	ldr	r3, [pc, #392]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ce2:	ee07 3a90 	vmov	s15, r3
 8007ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cea:	ed97 6a02 	vldr	s12, [r7, #8]
 8007cee:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007e74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d06:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007d0a:	e087      	b.n	8007e1c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	ee07 3a90 	vmov	s15, r3
 8007d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d16:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007e78 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d1e:	4b51      	ldr	r3, [pc, #324]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d26:	ee07 3a90 	vmov	s15, r3
 8007d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d32:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007e74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d4e:	e065      	b.n	8007e1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	ee07 3a90 	vmov	s15, r3
 8007d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d5a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007e7c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d62:	4b40      	ldr	r3, [pc, #256]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d6a:	ee07 3a90 	vmov	s15, r3
 8007d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d72:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d76:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007e74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d92:	e043      	b.n	8007e1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	ee07 3a90 	vmov	s15, r3
 8007d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d9e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007e80 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007da6:	4b2f      	ldr	r3, [pc, #188]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dae:	ee07 3a90 	vmov	s15, r3
 8007db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007db6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007dba:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007e74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dd2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007dd6:	e021      	b.n	8007e1c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	ee07 3a90 	vmov	s15, r3
 8007dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007de2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007e7c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dea:	4b1e      	ldr	r3, [pc, #120]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007df2:	ee07 3a90 	vmov	s15, r3
 8007df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8007dfe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007e74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007e1a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007e1c:	4b11      	ldr	r3, [pc, #68]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e20:	0a5b      	lsrs	r3, r3, #9
 8007e22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e26:	3301      	adds	r3, #1
 8007e28:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	ee07 3a90 	vmov	s15, r3
 8007e30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007e34:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e40:	ee17 3a90 	vmov	r3, s15
 8007e44:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007e46:	e005      	b.n	8007e54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	61bb      	str	r3, [r7, #24]
      break;
 8007e4c:	e002      	b.n	8007e54 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007e4e:	4b07      	ldr	r3, [pc, #28]	@ (8007e6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007e50:	61bb      	str	r3, [r7, #24]
      break;
 8007e52:	bf00      	nop
  }

  return sysclockfreq;
 8007e54:	69bb      	ldr	r3, [r7, #24]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3724      	adds	r7, #36	@ 0x24
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	58024400 	.word	0x58024400
 8007e68:	03d09000 	.word	0x03d09000
 8007e6c:	003d0900 	.word	0x003d0900
 8007e70:	017d7840 	.word	0x017d7840
 8007e74:	46000000 	.word	0x46000000
 8007e78:	4c742400 	.word	0x4c742400
 8007e7c:	4a742400 	.word	0x4a742400
 8007e80:	4bbebc20 	.word	0x4bbebc20

08007e84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007e8a:	f7ff fe81 	bl	8007b90 <HAL_RCC_GetSysClockFreq>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	4b10      	ldr	r3, [pc, #64]	@ (8007ed4 <HAL_RCC_GetHCLKFreq+0x50>)
 8007e92:	699b      	ldr	r3, [r3, #24]
 8007e94:	0a1b      	lsrs	r3, r3, #8
 8007e96:	f003 030f 	and.w	r3, r3, #15
 8007e9a:	490f      	ldr	r1, [pc, #60]	@ (8007ed8 <HAL_RCC_GetHCLKFreq+0x54>)
 8007e9c:	5ccb      	ldrb	r3, [r1, r3]
 8007e9e:	f003 031f 	and.w	r3, r3, #31
 8007ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ea6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8007ed4 <HAL_RCC_GetHCLKFreq+0x50>)
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	f003 030f 	and.w	r3, r3, #15
 8007eb0:	4a09      	ldr	r2, [pc, #36]	@ (8007ed8 <HAL_RCC_GetHCLKFreq+0x54>)
 8007eb2:	5cd3      	ldrb	r3, [r2, r3]
 8007eb4:	f003 031f 	and.w	r3, r3, #31
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	fa22 f303 	lsr.w	r3, r2, r3
 8007ebe:	4a07      	ldr	r2, [pc, #28]	@ (8007edc <HAL_RCC_GetHCLKFreq+0x58>)
 8007ec0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007ec2:	4a07      	ldr	r2, [pc, #28]	@ (8007ee0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007ec8:	4b04      	ldr	r3, [pc, #16]	@ (8007edc <HAL_RCC_GetHCLKFreq+0x58>)
 8007eca:	681b      	ldr	r3, [r3, #0]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3708      	adds	r7, #8
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	58024400 	.word	0x58024400
 8007ed8:	08027b60 	.word	0x08027b60
 8007edc:	24000008 	.word	0x24000008
 8007ee0:	24000004 	.word	0x24000004

08007ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007ee8:	f7ff ffcc 	bl	8007e84 <HAL_RCC_GetHCLKFreq>
 8007eec:	4602      	mov	r2, r0
 8007eee:	4b06      	ldr	r3, [pc, #24]	@ (8007f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ef0:	69db      	ldr	r3, [r3, #28]
 8007ef2:	091b      	lsrs	r3, r3, #4
 8007ef4:	f003 0307 	and.w	r3, r3, #7
 8007ef8:	4904      	ldr	r1, [pc, #16]	@ (8007f0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007efa:	5ccb      	ldrb	r3, [r1, r3]
 8007efc:	f003 031f 	and.w	r3, r3, #31
 8007f00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	58024400 	.word	0x58024400
 8007f0c:	08027b60 	.word	0x08027b60

08007f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007f14:	f7ff ffb6 	bl	8007e84 <HAL_RCC_GetHCLKFreq>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	4b06      	ldr	r3, [pc, #24]	@ (8007f34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f1c:	69db      	ldr	r3, [r3, #28]
 8007f1e:	0a1b      	lsrs	r3, r3, #8
 8007f20:	f003 0307 	and.w	r3, r3, #7
 8007f24:	4904      	ldr	r1, [pc, #16]	@ (8007f38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007f26:	5ccb      	ldrb	r3, [r1, r3]
 8007f28:	f003 031f 	and.w	r3, r3, #31
 8007f2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	58024400 	.word	0x58024400
 8007f38:	08027b60 	.word	0x08027b60

08007f3c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f40:	b0c6      	sub	sp, #280	@ 0x118
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f48:	2300      	movs	r3, #0
 8007f4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f4e:	2300      	movs	r3, #0
 8007f50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007f60:	2500      	movs	r5, #0
 8007f62:	ea54 0305 	orrs.w	r3, r4, r5
 8007f66:	d049      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f6e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f72:	d02f      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007f74:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f78:	d828      	bhi.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007f7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f7e:	d01a      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007f80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f84:	d822      	bhi.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d003      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007f8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f8e:	d007      	beq.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007f90:	e01c      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f92:	4bab      	ldr	r3, [pc, #684]	@ (8008240 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f96:	4aaa      	ldr	r2, [pc, #680]	@ (8008240 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007f98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007f9e:	e01a      	b.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fa4:	3308      	adds	r3, #8
 8007fa6:	2102      	movs	r1, #2
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f001 fc25 	bl	80097f8 <RCCEx_PLL2_Config>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007fb4:	e00f      	b.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fba:	3328      	adds	r3, #40	@ 0x28
 8007fbc:	2102      	movs	r1, #2
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f001 fccc 	bl	800995c <RCCEx_PLL3_Config>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007fca:	e004      	b.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007fd2:	e000      	b.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007fd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fd6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d10a      	bne.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007fde:	4b98      	ldr	r3, [pc, #608]	@ (8008240 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007fe0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fe2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fec:	4a94      	ldr	r2, [pc, #592]	@ (8008240 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007fee:	430b      	orrs	r3, r1
 8007ff0:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ff2:	e003      	b.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ff8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008004:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008008:	f04f 0900 	mov.w	r9, #0
 800800c:	ea58 0309 	orrs.w	r3, r8, r9
 8008010:	d047      	beq.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008018:	2b04      	cmp	r3, #4
 800801a:	d82a      	bhi.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800801c:	a201      	add	r2, pc, #4	@ (adr r2, 8008024 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800801e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008022:	bf00      	nop
 8008024:	08008039 	.word	0x08008039
 8008028:	08008047 	.word	0x08008047
 800802c:	0800805d 	.word	0x0800805d
 8008030:	0800807b 	.word	0x0800807b
 8008034:	0800807b 	.word	0x0800807b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008038:	4b81      	ldr	r3, [pc, #516]	@ (8008240 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800803a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800803c:	4a80      	ldr	r2, [pc, #512]	@ (8008240 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800803e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008042:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008044:	e01a      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800804a:	3308      	adds	r3, #8
 800804c:	2100      	movs	r1, #0
 800804e:	4618      	mov	r0, r3
 8008050:	f001 fbd2 	bl	80097f8 <RCCEx_PLL2_Config>
 8008054:	4603      	mov	r3, r0
 8008056:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800805a:	e00f      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800805c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008060:	3328      	adds	r3, #40	@ 0x28
 8008062:	2100      	movs	r1, #0
 8008064:	4618      	mov	r0, r3
 8008066:	f001 fc79 	bl	800995c <RCCEx_PLL3_Config>
 800806a:	4603      	mov	r3, r0
 800806c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008070:	e004      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008078:	e000      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800807a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800807c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10a      	bne.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008084:	4b6e      	ldr	r3, [pc, #440]	@ (8008240 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008088:	f023 0107 	bic.w	r1, r3, #7
 800808c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008092:	4a6b      	ldr	r2, [pc, #428]	@ (8008240 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008094:	430b      	orrs	r3, r1
 8008096:	6513      	str	r3, [r2, #80]	@ 0x50
 8008098:	e003      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800809a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800809e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80080a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080aa:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80080ae:	f04f 0b00 	mov.w	fp, #0
 80080b2:	ea5a 030b 	orrs.w	r3, sl, fp
 80080b6:	d05b      	beq.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80080b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80080c0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80080c4:	d03b      	beq.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80080c6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80080ca:	d834      	bhi.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80080cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80080d0:	d037      	beq.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80080d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80080d6:	d82e      	bhi.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80080d8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80080dc:	d033      	beq.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80080de:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80080e2:	d828      	bhi.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80080e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80080e8:	d01a      	beq.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80080ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80080ee:	d822      	bhi.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d003      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80080f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80080f8:	d007      	beq.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80080fa:	e01c      	b.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080fc:	4b50      	ldr	r3, [pc, #320]	@ (8008240 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80080fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008100:	4a4f      	ldr	r2, [pc, #316]	@ (8008240 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008102:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008106:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008108:	e01e      	b.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800810a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800810e:	3308      	adds	r3, #8
 8008110:	2100      	movs	r1, #0
 8008112:	4618      	mov	r0, r3
 8008114:	f001 fb70 	bl	80097f8 <RCCEx_PLL2_Config>
 8008118:	4603      	mov	r3, r0
 800811a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800811e:	e013      	b.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008124:	3328      	adds	r3, #40	@ 0x28
 8008126:	2100      	movs	r1, #0
 8008128:	4618      	mov	r0, r3
 800812a:	f001 fc17 	bl	800995c <RCCEx_PLL3_Config>
 800812e:	4603      	mov	r3, r0
 8008130:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008134:	e008      	b.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800813c:	e004      	b.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800813e:	bf00      	nop
 8008140:	e002      	b.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008142:	bf00      	nop
 8008144:	e000      	b.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008146:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008148:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800814c:	2b00      	cmp	r3, #0
 800814e:	d10b      	bne.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008150:	4b3b      	ldr	r3, [pc, #236]	@ (8008240 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008154:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800815c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008160:	4a37      	ldr	r2, [pc, #220]	@ (8008240 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008162:	430b      	orrs	r3, r1
 8008164:	6593      	str	r3, [r2, #88]	@ 0x58
 8008166:	e003      	b.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008168:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800816c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008178:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800817c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008180:	2300      	movs	r3, #0
 8008182:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008186:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800818a:	460b      	mov	r3, r1
 800818c:	4313      	orrs	r3, r2
 800818e:	d05d      	beq.n	800824c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008194:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008198:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800819c:	d03b      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800819e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80081a2:	d834      	bhi.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80081a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80081a8:	d037      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80081aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80081ae:	d82e      	bhi.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80081b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80081b4:	d033      	beq.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80081b6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80081ba:	d828      	bhi.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80081bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081c0:	d01a      	beq.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80081c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081c6:	d822      	bhi.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d003      	beq.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80081cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80081d0:	d007      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80081d2:	e01c      	b.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081d4:	4b1a      	ldr	r3, [pc, #104]	@ (8008240 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80081d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d8:	4a19      	ldr	r2, [pc, #100]	@ (8008240 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80081da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80081e0:	e01e      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081e6:	3308      	adds	r3, #8
 80081e8:	2100      	movs	r1, #0
 80081ea:	4618      	mov	r0, r3
 80081ec:	f001 fb04 	bl	80097f8 <RCCEx_PLL2_Config>
 80081f0:	4603      	mov	r3, r0
 80081f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80081f6:	e013      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80081f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081fc:	3328      	adds	r3, #40	@ 0x28
 80081fe:	2100      	movs	r1, #0
 8008200:	4618      	mov	r0, r3
 8008202:	f001 fbab 	bl	800995c <RCCEx_PLL3_Config>
 8008206:	4603      	mov	r3, r0
 8008208:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800820c:	e008      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008214:	e004      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008216:	bf00      	nop
 8008218:	e002      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800821a:	bf00      	nop
 800821c:	e000      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800821e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008220:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008224:	2b00      	cmp	r3, #0
 8008226:	d10d      	bne.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008228:	4b05      	ldr	r3, [pc, #20]	@ (8008240 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800822a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800822c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008230:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008234:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008238:	4a01      	ldr	r2, [pc, #4]	@ (8008240 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800823a:	430b      	orrs	r3, r1
 800823c:	6593      	str	r3, [r2, #88]	@ 0x58
 800823e:	e005      	b.n	800824c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008240:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008244:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008248:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800824c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008254:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008258:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800825c:	2300      	movs	r3, #0
 800825e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008262:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008266:	460b      	mov	r3, r1
 8008268:	4313      	orrs	r3, r2
 800826a:	d03a      	beq.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800826c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008272:	2b30      	cmp	r3, #48	@ 0x30
 8008274:	d01f      	beq.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8008276:	2b30      	cmp	r3, #48	@ 0x30
 8008278:	d819      	bhi.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x372>
 800827a:	2b20      	cmp	r3, #32
 800827c:	d00c      	beq.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800827e:	2b20      	cmp	r3, #32
 8008280:	d815      	bhi.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008282:	2b00      	cmp	r3, #0
 8008284:	d019      	beq.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008286:	2b10      	cmp	r3, #16
 8008288:	d111      	bne.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800828a:	4baa      	ldr	r3, [pc, #680]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800828c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800828e:	4aa9      	ldr	r2, [pc, #676]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008290:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008294:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008296:	e011      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800829c:	3308      	adds	r3, #8
 800829e:	2102      	movs	r1, #2
 80082a0:	4618      	mov	r0, r3
 80082a2:	f001 faa9 	bl	80097f8 <RCCEx_PLL2_Config>
 80082a6:	4603      	mov	r3, r0
 80082a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80082ac:	e006      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80082b4:	e002      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80082b6:	bf00      	nop
 80082b8:	e000      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80082ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d10a      	bne.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80082c4:	4b9b      	ldr	r3, [pc, #620]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80082c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082c8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80082cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082d2:	4a98      	ldr	r2, [pc, #608]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80082d4:	430b      	orrs	r3, r1
 80082d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80082d8:	e003      	b.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80082e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ea:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80082ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80082f2:	2300      	movs	r3, #0
 80082f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80082f8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80082fc:	460b      	mov	r3, r1
 80082fe:	4313      	orrs	r3, r2
 8008300:	d051      	beq.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008308:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800830c:	d035      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800830e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008312:	d82e      	bhi.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008314:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008318:	d031      	beq.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x442>
 800831a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800831e:	d828      	bhi.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008320:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008324:	d01a      	beq.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8008326:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800832a:	d822      	bhi.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800832c:	2b00      	cmp	r3, #0
 800832e:	d003      	beq.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8008330:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008334:	d007      	beq.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8008336:	e01c      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008338:	4b7e      	ldr	r3, [pc, #504]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800833a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800833c:	4a7d      	ldr	r2, [pc, #500]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800833e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008342:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008344:	e01c      	b.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008346:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800834a:	3308      	adds	r3, #8
 800834c:	2100      	movs	r1, #0
 800834e:	4618      	mov	r0, r3
 8008350:	f001 fa52 	bl	80097f8 <RCCEx_PLL2_Config>
 8008354:	4603      	mov	r3, r0
 8008356:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800835a:	e011      	b.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800835c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008360:	3328      	adds	r3, #40	@ 0x28
 8008362:	2100      	movs	r1, #0
 8008364:	4618      	mov	r0, r3
 8008366:	f001 faf9 	bl	800995c <RCCEx_PLL3_Config>
 800836a:	4603      	mov	r3, r0
 800836c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008370:	e006      	b.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008378:	e002      	b.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800837a:	bf00      	nop
 800837c:	e000      	b.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800837e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008380:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10a      	bne.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008388:	4b6a      	ldr	r3, [pc, #424]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800838a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800838c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008396:	4a67      	ldr	r2, [pc, #412]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008398:	430b      	orrs	r3, r1
 800839a:	6513      	str	r3, [r2, #80]	@ 0x50
 800839c:	e003      	b.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800839e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80083a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ae:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80083b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80083b6:	2300      	movs	r3, #0
 80083b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80083bc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80083c0:	460b      	mov	r3, r1
 80083c2:	4313      	orrs	r3, r2
 80083c4:	d053      	beq.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80083c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083d0:	d033      	beq.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80083d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083d6:	d82c      	bhi.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80083d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80083dc:	d02f      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x502>
 80083de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80083e2:	d826      	bhi.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80083e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80083e8:	d02b      	beq.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80083ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80083ee:	d820      	bhi.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80083f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083f4:	d012      	beq.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80083f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083fa:	d81a      	bhi.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d022      	beq.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8008400:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008404:	d115      	bne.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800840a:	3308      	adds	r3, #8
 800840c:	2101      	movs	r1, #1
 800840e:	4618      	mov	r0, r3
 8008410:	f001 f9f2 	bl	80097f8 <RCCEx_PLL2_Config>
 8008414:	4603      	mov	r3, r0
 8008416:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800841a:	e015      	b.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800841c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008420:	3328      	adds	r3, #40	@ 0x28
 8008422:	2101      	movs	r1, #1
 8008424:	4618      	mov	r0, r3
 8008426:	f001 fa99 	bl	800995c <RCCEx_PLL3_Config>
 800842a:	4603      	mov	r3, r0
 800842c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008430:	e00a      	b.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008438:	e006      	b.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800843a:	bf00      	nop
 800843c:	e004      	b.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800843e:	bf00      	nop
 8008440:	e002      	b.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008442:	bf00      	nop
 8008444:	e000      	b.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008446:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008448:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800844c:	2b00      	cmp	r3, #0
 800844e:	d10a      	bne.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008450:	4b38      	ldr	r3, [pc, #224]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008454:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800845c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800845e:	4a35      	ldr	r2, [pc, #212]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008460:	430b      	orrs	r3, r1
 8008462:	6513      	str	r3, [r2, #80]	@ 0x50
 8008464:	e003      	b.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008466:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800846a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800846e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008476:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800847a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800847e:	2300      	movs	r3, #0
 8008480:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008484:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008488:	460b      	mov	r3, r1
 800848a:	4313      	orrs	r3, r2
 800848c:	d058      	beq.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800848e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008492:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008496:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800849a:	d033      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800849c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80084a0:	d82c      	bhi.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80084a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084a6:	d02f      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80084a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084ac:	d826      	bhi.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80084ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80084b2:	d02b      	beq.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80084b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80084b8:	d820      	bhi.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80084ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084be:	d012      	beq.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80084c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084c4:	d81a      	bhi.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d022      	beq.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80084ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084ce:	d115      	bne.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80084d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084d4:	3308      	adds	r3, #8
 80084d6:	2101      	movs	r1, #1
 80084d8:	4618      	mov	r0, r3
 80084da:	f001 f98d 	bl	80097f8 <RCCEx_PLL2_Config>
 80084de:	4603      	mov	r3, r0
 80084e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80084e4:	e015      	b.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084ea:	3328      	adds	r3, #40	@ 0x28
 80084ec:	2101      	movs	r1, #1
 80084ee:	4618      	mov	r0, r3
 80084f0:	f001 fa34 	bl	800995c <RCCEx_PLL3_Config>
 80084f4:	4603      	mov	r3, r0
 80084f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80084fa:	e00a      	b.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008502:	e006      	b.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008504:	bf00      	nop
 8008506:	e004      	b.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008508:	bf00      	nop
 800850a:	e002      	b.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800850c:	bf00      	nop
 800850e:	e000      	b.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008510:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008512:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008516:	2b00      	cmp	r3, #0
 8008518:	d10e      	bne.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800851a:	4b06      	ldr	r3, [pc, #24]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800851c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800851e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008526:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800852a:	4a02      	ldr	r2, [pc, #8]	@ (8008534 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800852c:	430b      	orrs	r3, r1
 800852e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008530:	e006      	b.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008532:	bf00      	nop
 8008534:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008538:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800853c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008548:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800854c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008550:	2300      	movs	r3, #0
 8008552:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008556:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800855a:	460b      	mov	r3, r1
 800855c:	4313      	orrs	r3, r2
 800855e:	d037      	beq.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008564:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008566:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800856a:	d00e      	beq.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800856c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008570:	d816      	bhi.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008572:	2b00      	cmp	r3, #0
 8008574:	d018      	beq.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008576:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800857a:	d111      	bne.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800857c:	4bc4      	ldr	r3, [pc, #784]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800857e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008580:	4ac3      	ldr	r2, [pc, #780]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008582:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008586:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008588:	e00f      	b.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800858a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800858e:	3308      	adds	r3, #8
 8008590:	2101      	movs	r1, #1
 8008592:	4618      	mov	r0, r3
 8008594:	f001 f930 	bl	80097f8 <RCCEx_PLL2_Config>
 8008598:	4603      	mov	r3, r0
 800859a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800859e:	e004      	b.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80085a6:	e000      	b.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80085a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d10a      	bne.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80085b2:	4bb7      	ldr	r3, [pc, #732]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085b6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80085ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085c0:	4ab3      	ldr	r2, [pc, #716]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085c2:	430b      	orrs	r3, r1
 80085c4:	6513      	str	r3, [r2, #80]	@ 0x50
 80085c6:	e003      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80085d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80085dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80085e0:	2300      	movs	r3, #0
 80085e2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80085e6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80085ea:	460b      	mov	r3, r1
 80085ec:	4313      	orrs	r3, r2
 80085ee:	d039      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80085f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085f6:	2b03      	cmp	r3, #3
 80085f8:	d81c      	bhi.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80085fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008600 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80085fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008600:	0800863d 	.word	0x0800863d
 8008604:	08008611 	.word	0x08008611
 8008608:	0800861f 	.word	0x0800861f
 800860c:	0800863d 	.word	0x0800863d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008610:	4b9f      	ldr	r3, [pc, #636]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008614:	4a9e      	ldr	r2, [pc, #632]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008616:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800861a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800861c:	e00f      	b.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800861e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008622:	3308      	adds	r3, #8
 8008624:	2102      	movs	r1, #2
 8008626:	4618      	mov	r0, r3
 8008628:	f001 f8e6 	bl	80097f8 <RCCEx_PLL2_Config>
 800862c:	4603      	mov	r3, r0
 800862e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008632:	e004      	b.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800863a:	e000      	b.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800863c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800863e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008642:	2b00      	cmp	r3, #0
 8008644:	d10a      	bne.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008646:	4b92      	ldr	r3, [pc, #584]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800864a:	f023 0103 	bic.w	r1, r3, #3
 800864e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008652:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008654:	4a8e      	ldr	r2, [pc, #568]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008656:	430b      	orrs	r3, r1
 8008658:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800865a:	e003      	b.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800865c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008660:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008670:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008674:	2300      	movs	r3, #0
 8008676:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800867a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800867e:	460b      	mov	r3, r1
 8008680:	4313      	orrs	r3, r2
 8008682:	f000 8099 	beq.w	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008686:	4b83      	ldr	r3, [pc, #524]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a82      	ldr	r2, [pc, #520]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800868c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008690:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008692:	f7fb fa91 	bl	8003bb8 <HAL_GetTick>
 8008696:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800869a:	e00b      	b.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800869c:	f7fb fa8c 	bl	8003bb8 <HAL_GetTick>
 80086a0:	4602      	mov	r2, r0
 80086a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80086a6:	1ad3      	subs	r3, r2, r3
 80086a8:	2b64      	cmp	r3, #100	@ 0x64
 80086aa:	d903      	bls.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80086ac:	2303      	movs	r3, #3
 80086ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80086b2:	e005      	b.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086b4:	4b77      	ldr	r3, [pc, #476]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d0ed      	beq.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80086c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d173      	bne.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80086c8:	4b71      	ldr	r3, [pc, #452]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086ca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80086cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80086d4:	4053      	eors	r3, r2
 80086d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d015      	beq.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80086de:	4b6c      	ldr	r3, [pc, #432]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086e6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80086ea:	4b69      	ldr	r3, [pc, #420]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086ee:	4a68      	ldr	r2, [pc, #416]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086f4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80086f6:	4b66      	ldr	r3, [pc, #408]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086fa:	4a65      	ldr	r2, [pc, #404]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008700:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008702:	4a63      	ldr	r2, [pc, #396]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008704:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008708:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800870a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800870e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008712:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008716:	d118      	bne.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008718:	f7fb fa4e 	bl	8003bb8 <HAL_GetTick>
 800871c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008720:	e00d      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008722:	f7fb fa49 	bl	8003bb8 <HAL_GetTick>
 8008726:	4602      	mov	r2, r0
 8008728:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800872c:	1ad2      	subs	r2, r2, r3
 800872e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008732:	429a      	cmp	r2, r3
 8008734:	d903      	bls.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8008736:	2303      	movs	r3, #3
 8008738:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800873c:	e005      	b.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800873e:	4b54      	ldr	r3, [pc, #336]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008742:	f003 0302 	and.w	r3, r3, #2
 8008746:	2b00      	cmp	r3, #0
 8008748:	d0eb      	beq.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800874a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800874e:	2b00      	cmp	r3, #0
 8008750:	d129      	bne.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008756:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800875a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800875e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008762:	d10e      	bne.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008764:	4b4a      	ldr	r3, [pc, #296]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800876c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008770:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008774:	091a      	lsrs	r2, r3, #4
 8008776:	4b48      	ldr	r3, [pc, #288]	@ (8008898 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008778:	4013      	ands	r3, r2
 800877a:	4a45      	ldr	r2, [pc, #276]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800877c:	430b      	orrs	r3, r1
 800877e:	6113      	str	r3, [r2, #16]
 8008780:	e005      	b.n	800878e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008782:	4b43      	ldr	r3, [pc, #268]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	4a42      	ldr	r2, [pc, #264]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008788:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800878c:	6113      	str	r3, [r2, #16]
 800878e:	4b40      	ldr	r3, [pc, #256]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008790:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008796:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800879a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800879e:	4a3c      	ldr	r2, [pc, #240]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80087a0:	430b      	orrs	r3, r1
 80087a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80087a4:	e008      	b.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80087a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80087ae:	e003      	b.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80087b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c0:	f002 0301 	and.w	r3, r2, #1
 80087c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80087c8:	2300      	movs	r3, #0
 80087ca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80087ce:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80087d2:	460b      	mov	r3, r1
 80087d4:	4313      	orrs	r3, r2
 80087d6:	f000 808f 	beq.w	80088f8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80087da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80087e0:	2b28      	cmp	r3, #40	@ 0x28
 80087e2:	d871      	bhi.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80087e4:	a201      	add	r2, pc, #4	@ (adr r2, 80087ec <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80087e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ea:	bf00      	nop
 80087ec:	080088d1 	.word	0x080088d1
 80087f0:	080088c9 	.word	0x080088c9
 80087f4:	080088c9 	.word	0x080088c9
 80087f8:	080088c9 	.word	0x080088c9
 80087fc:	080088c9 	.word	0x080088c9
 8008800:	080088c9 	.word	0x080088c9
 8008804:	080088c9 	.word	0x080088c9
 8008808:	080088c9 	.word	0x080088c9
 800880c:	0800889d 	.word	0x0800889d
 8008810:	080088c9 	.word	0x080088c9
 8008814:	080088c9 	.word	0x080088c9
 8008818:	080088c9 	.word	0x080088c9
 800881c:	080088c9 	.word	0x080088c9
 8008820:	080088c9 	.word	0x080088c9
 8008824:	080088c9 	.word	0x080088c9
 8008828:	080088c9 	.word	0x080088c9
 800882c:	080088b3 	.word	0x080088b3
 8008830:	080088c9 	.word	0x080088c9
 8008834:	080088c9 	.word	0x080088c9
 8008838:	080088c9 	.word	0x080088c9
 800883c:	080088c9 	.word	0x080088c9
 8008840:	080088c9 	.word	0x080088c9
 8008844:	080088c9 	.word	0x080088c9
 8008848:	080088c9 	.word	0x080088c9
 800884c:	080088d1 	.word	0x080088d1
 8008850:	080088c9 	.word	0x080088c9
 8008854:	080088c9 	.word	0x080088c9
 8008858:	080088c9 	.word	0x080088c9
 800885c:	080088c9 	.word	0x080088c9
 8008860:	080088c9 	.word	0x080088c9
 8008864:	080088c9 	.word	0x080088c9
 8008868:	080088c9 	.word	0x080088c9
 800886c:	080088d1 	.word	0x080088d1
 8008870:	080088c9 	.word	0x080088c9
 8008874:	080088c9 	.word	0x080088c9
 8008878:	080088c9 	.word	0x080088c9
 800887c:	080088c9 	.word	0x080088c9
 8008880:	080088c9 	.word	0x080088c9
 8008884:	080088c9 	.word	0x080088c9
 8008888:	080088c9 	.word	0x080088c9
 800888c:	080088d1 	.word	0x080088d1
 8008890:	58024400 	.word	0x58024400
 8008894:	58024800 	.word	0x58024800
 8008898:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800889c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088a0:	3308      	adds	r3, #8
 80088a2:	2101      	movs	r1, #1
 80088a4:	4618      	mov	r0, r3
 80088a6:	f000 ffa7 	bl	80097f8 <RCCEx_PLL2_Config>
 80088aa:	4603      	mov	r3, r0
 80088ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80088b0:	e00f      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80088b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088b6:	3328      	adds	r3, #40	@ 0x28
 80088b8:	2101      	movs	r1, #1
 80088ba:	4618      	mov	r0, r3
 80088bc:	f001 f84e 	bl	800995c <RCCEx_PLL3_Config>
 80088c0:	4603      	mov	r3, r0
 80088c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80088c6:	e004      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80088ce:	e000      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80088d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10a      	bne.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80088da:	4bbf      	ldr	r3, [pc, #764]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80088dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088de:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80088e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088e8:	4abb      	ldr	r2, [pc, #748]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80088ea:	430b      	orrs	r3, r1
 80088ec:	6553      	str	r3, [r2, #84]	@ 0x54
 80088ee:	e003      	b.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80088f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80088f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008900:	f002 0302 	and.w	r3, r2, #2
 8008904:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008908:	2300      	movs	r3, #0
 800890a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800890e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008912:	460b      	mov	r3, r1
 8008914:	4313      	orrs	r3, r2
 8008916:	d041      	beq.n	800899c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800891c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800891e:	2b05      	cmp	r3, #5
 8008920:	d824      	bhi.n	800896c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8008922:	a201      	add	r2, pc, #4	@ (adr r2, 8008928 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8008924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008928:	08008975 	.word	0x08008975
 800892c:	08008941 	.word	0x08008941
 8008930:	08008957 	.word	0x08008957
 8008934:	08008975 	.word	0x08008975
 8008938:	08008975 	.word	0x08008975
 800893c:	08008975 	.word	0x08008975
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008944:	3308      	adds	r3, #8
 8008946:	2101      	movs	r1, #1
 8008948:	4618      	mov	r0, r3
 800894a:	f000 ff55 	bl	80097f8 <RCCEx_PLL2_Config>
 800894e:	4603      	mov	r3, r0
 8008950:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008954:	e00f      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800895a:	3328      	adds	r3, #40	@ 0x28
 800895c:	2101      	movs	r1, #1
 800895e:	4618      	mov	r0, r3
 8008960:	f000 fffc 	bl	800995c <RCCEx_PLL3_Config>
 8008964:	4603      	mov	r3, r0
 8008966:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800896a:	e004      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008972:	e000      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8008974:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008976:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800897a:	2b00      	cmp	r3, #0
 800897c:	d10a      	bne.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800897e:	4b96      	ldr	r3, [pc, #600]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008982:	f023 0107 	bic.w	r1, r3, #7
 8008986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800898a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800898c:	4a92      	ldr	r2, [pc, #584]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800898e:	430b      	orrs	r3, r1
 8008990:	6553      	str	r3, [r2, #84]	@ 0x54
 8008992:	e003      	b.n	800899c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008994:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008998:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800899c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a4:	f002 0304 	and.w	r3, r2, #4
 80089a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80089ac:	2300      	movs	r3, #0
 80089ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80089b2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80089b6:	460b      	mov	r3, r1
 80089b8:	4313      	orrs	r3, r2
 80089ba:	d044      	beq.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80089bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089c4:	2b05      	cmp	r3, #5
 80089c6:	d825      	bhi.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80089c8:	a201      	add	r2, pc, #4	@ (adr r2, 80089d0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80089ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ce:	bf00      	nop
 80089d0:	08008a1d 	.word	0x08008a1d
 80089d4:	080089e9 	.word	0x080089e9
 80089d8:	080089ff 	.word	0x080089ff
 80089dc:	08008a1d 	.word	0x08008a1d
 80089e0:	08008a1d 	.word	0x08008a1d
 80089e4:	08008a1d 	.word	0x08008a1d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80089e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089ec:	3308      	adds	r3, #8
 80089ee:	2101      	movs	r1, #1
 80089f0:	4618      	mov	r0, r3
 80089f2:	f000 ff01 	bl	80097f8 <RCCEx_PLL2_Config>
 80089f6:	4603      	mov	r3, r0
 80089f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80089fc:	e00f      	b.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80089fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a02:	3328      	adds	r3, #40	@ 0x28
 8008a04:	2101      	movs	r1, #1
 8008a06:	4618      	mov	r0, r3
 8008a08:	f000 ffa8 	bl	800995c <RCCEx_PLL3_Config>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008a12:	e004      	b.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008a1a:	e000      	b.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8008a1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d10b      	bne.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008a26:	4b6c      	ldr	r3, [pc, #432]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a2a:	f023 0107 	bic.w	r1, r3, #7
 8008a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a36:	4a68      	ldr	r2, [pc, #416]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008a38:	430b      	orrs	r3, r1
 8008a3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a3c:	e003      	b.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a42:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4e:	f002 0320 	and.w	r3, r2, #32
 8008a52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008a56:	2300      	movs	r3, #0
 8008a58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008a5c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008a60:	460b      	mov	r3, r1
 8008a62:	4313      	orrs	r3, r2
 8008a64:	d055      	beq.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a72:	d033      	beq.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8008a74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a78:	d82c      	bhi.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a7e:	d02f      	beq.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008a80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a84:	d826      	bhi.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008a86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008a8a:	d02b      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008a8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008a90:	d820      	bhi.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008a92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a96:	d012      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8008a98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a9c:	d81a      	bhi.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d022      	beq.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008aa2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008aa6:	d115      	bne.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008aac:	3308      	adds	r3, #8
 8008aae:	2100      	movs	r1, #0
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f000 fea1 	bl	80097f8 <RCCEx_PLL2_Config>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008abc:	e015      	b.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ac2:	3328      	adds	r3, #40	@ 0x28
 8008ac4:	2102      	movs	r1, #2
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f000 ff48 	bl	800995c <RCCEx_PLL3_Config>
 8008acc:	4603      	mov	r3, r0
 8008ace:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008ad2:	e00a      	b.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008ada:	e006      	b.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008adc:	bf00      	nop
 8008ade:	e004      	b.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008ae0:	bf00      	nop
 8008ae2:	e002      	b.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008ae4:	bf00      	nop
 8008ae6:	e000      	b.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008ae8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008aea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d10b      	bne.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008af2:	4b39      	ldr	r3, [pc, #228]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008af6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b02:	4a35      	ldr	r2, [pc, #212]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008b04:	430b      	orrs	r3, r1
 8008b06:	6553      	str	r3, [r2, #84]	@ 0x54
 8008b08:	e003      	b.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b0e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008b1e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008b22:	2300      	movs	r3, #0
 8008b24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008b28:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	d058      	beq.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008b3a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008b3e:	d033      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8008b40:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008b44:	d82c      	bhi.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008b46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b4a:	d02f      	beq.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008b4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b50:	d826      	bhi.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008b52:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b56:	d02b      	beq.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008b58:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b5c:	d820      	bhi.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008b5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b62:	d012      	beq.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8008b64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b68:	d81a      	bhi.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d022      	beq.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008b6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b72:	d115      	bne.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b78:	3308      	adds	r3, #8
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f000 fe3b 	bl	80097f8 <RCCEx_PLL2_Config>
 8008b82:	4603      	mov	r3, r0
 8008b84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008b88:	e015      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b8e:	3328      	adds	r3, #40	@ 0x28
 8008b90:	2102      	movs	r1, #2
 8008b92:	4618      	mov	r0, r3
 8008b94:	f000 fee2 	bl	800995c <RCCEx_PLL3_Config>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008b9e:	e00a      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008ba6:	e006      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008ba8:	bf00      	nop
 8008baa:	e004      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008bac:	bf00      	nop
 8008bae:	e002      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008bb0:	bf00      	nop
 8008bb2:	e000      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008bb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bb6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d10e      	bne.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008bbe:	4b06      	ldr	r3, [pc, #24]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bc2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008bce:	4a02      	ldr	r2, [pc, #8]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008bd0:	430b      	orrs	r3, r1
 8008bd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8008bd4:	e006      	b.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8008bd6:	bf00      	nop
 8008bd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bdc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008be0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bec:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008bf0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008bfa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008bfe:	460b      	mov	r3, r1
 8008c00:	4313      	orrs	r3, r2
 8008c02:	d055      	beq.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c0c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008c10:	d033      	beq.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8008c12:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008c16:	d82c      	bhi.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008c18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c1c:	d02f      	beq.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008c1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c22:	d826      	bhi.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008c24:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008c28:	d02b      	beq.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008c2a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008c2e:	d820      	bhi.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008c30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c34:	d012      	beq.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8008c36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c3a:	d81a      	bhi.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d022      	beq.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008c40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c44:	d115      	bne.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c4a:	3308      	adds	r3, #8
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f000 fdd2 	bl	80097f8 <RCCEx_PLL2_Config>
 8008c54:	4603      	mov	r3, r0
 8008c56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008c5a:	e015      	b.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c60:	3328      	adds	r3, #40	@ 0x28
 8008c62:	2102      	movs	r1, #2
 8008c64:	4618      	mov	r0, r3
 8008c66:	f000 fe79 	bl	800995c <RCCEx_PLL3_Config>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008c70:	e00a      	b.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008c78:	e006      	b.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008c7a:	bf00      	nop
 8008c7c:	e004      	b.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008c7e:	bf00      	nop
 8008c80:	e002      	b.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008c82:	bf00      	nop
 8008c84:	e000      	b.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008c86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d10b      	bne.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008c90:	4ba0      	ldr	r3, [pc, #640]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c94:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008ca0:	4a9c      	ldr	r2, [pc, #624]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008ca2:	430b      	orrs	r3, r1
 8008ca4:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ca6:	e003      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ca8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008cac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb8:	f002 0308 	and.w	r3, r2, #8
 8008cbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008cc6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008cca:	460b      	mov	r3, r1
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	d01e      	beq.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8008cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cdc:	d10c      	bne.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ce2:	3328      	adds	r3, #40	@ 0x28
 8008ce4:	2102      	movs	r1, #2
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f000 fe38 	bl	800995c <RCCEx_PLL3_Config>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d002      	beq.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008cf8:	4b86      	ldr	r3, [pc, #536]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cfc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d08:	4a82      	ldr	r2, [pc, #520]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008d0a:	430b      	orrs	r3, r1
 8008d0c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d16:	f002 0310 	and.w	r3, r2, #16
 8008d1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008d1e:	2300      	movs	r3, #0
 8008d20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008d24:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008d28:	460b      	mov	r3, r1
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	d01e      	beq.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d3a:	d10c      	bne.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d40:	3328      	adds	r3, #40	@ 0x28
 8008d42:	2102      	movs	r1, #2
 8008d44:	4618      	mov	r0, r3
 8008d46:	f000 fe09 	bl	800995c <RCCEx_PLL3_Config>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d002      	beq.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008d56:	4b6f      	ldr	r3, [pc, #444]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d5a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d66:	4a6b      	ldr	r2, [pc, #428]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008d68:	430b      	orrs	r3, r1
 8008d6a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d74:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008d78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008d7e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008d82:	460b      	mov	r3, r1
 8008d84:	4313      	orrs	r3, r2
 8008d86:	d03e      	beq.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008d90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d94:	d022      	beq.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008d96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d9a:	d81b      	bhi.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d003      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8008da0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008da4:	d00b      	beq.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8008da6:	e015      	b.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dac:	3308      	adds	r3, #8
 8008dae:	2100      	movs	r1, #0
 8008db0:	4618      	mov	r0, r3
 8008db2:	f000 fd21 	bl	80097f8 <RCCEx_PLL2_Config>
 8008db6:	4603      	mov	r3, r0
 8008db8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008dbc:	e00f      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dc2:	3328      	adds	r3, #40	@ 0x28
 8008dc4:	2102      	movs	r1, #2
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f000 fdc8 	bl	800995c <RCCEx_PLL3_Config>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008dd2:	e004      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008dda:	e000      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8008ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d10b      	bne.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008de6:	4b4b      	ldr	r3, [pc, #300]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dea:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008df2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008df6:	4a47      	ldr	r2, [pc, #284]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008df8:	430b      	orrs	r3, r1
 8008dfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8008dfc:	e003      	b.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dfe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008e12:	673b      	str	r3, [r7, #112]	@ 0x70
 8008e14:	2300      	movs	r3, #0
 8008e16:	677b      	str	r3, [r7, #116]	@ 0x74
 8008e18:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	d03b      	beq.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e2a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e2e:	d01f      	beq.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008e30:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e34:	d818      	bhi.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8008e36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e3a:	d003      	beq.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8008e3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e40:	d007      	beq.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8008e42:	e011      	b.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e44:	4b33      	ldr	r3, [pc, #204]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e48:	4a32      	ldr	r2, [pc, #200]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008e4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008e50:	e00f      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e56:	3328      	adds	r3, #40	@ 0x28
 8008e58:	2101      	movs	r1, #1
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f000 fd7e 	bl	800995c <RCCEx_PLL3_Config>
 8008e60:	4603      	mov	r3, r0
 8008e62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8008e66:	e004      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008e6e:	e000      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8008e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10b      	bne.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008e7a:	4b26      	ldr	r3, [pc, #152]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e7e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e8a:	4a22      	ldr	r2, [pc, #136]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008e8c:	430b      	orrs	r3, r1
 8008e8e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008e90:	e003      	b.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e96:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008ea6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008eac:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	d034      	beq.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008eba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d003      	beq.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8008ec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ec4:	d007      	beq.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8008ec6:	e011      	b.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ec8:	4b12      	ldr	r3, [pc, #72]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ecc:	4a11      	ldr	r2, [pc, #68]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008ece:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ed2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008ed4:	e00e      	b.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008eda:	3308      	adds	r3, #8
 8008edc:	2102      	movs	r1, #2
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f000 fc8a 	bl	80097f8 <RCCEx_PLL2_Config>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008eea:	e003      	b.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008ef2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ef4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d10d      	bne.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008efc:	4b05      	ldr	r3, [pc, #20]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f00:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f0a:	4a02      	ldr	r2, [pc, #8]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008f0c:	430b      	orrs	r3, r1
 8008f0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008f10:	e006      	b.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8008f12:	bf00      	nop
 8008f14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f28:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008f2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f2e:	2300      	movs	r3, #0
 8008f30:	667b      	str	r3, [r7, #100]	@ 0x64
 8008f32:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008f36:	460b      	mov	r3, r1
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	d00c      	beq.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f40:	3328      	adds	r3, #40	@ 0x28
 8008f42:	2102      	movs	r1, #2
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 fd09 	bl	800995c <RCCEx_PLL3_Config>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d002      	beq.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008f62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f64:	2300      	movs	r3, #0
 8008f66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f68:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	d036      	beq.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f7c:	d018      	beq.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8008f7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f82:	d811      	bhi.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008f84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f88:	d014      	beq.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8008f8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f8e:	d80b      	bhi.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d011      	beq.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8008f94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f98:	d106      	bne.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f9a:	4bb7      	ldr	r3, [pc, #732]	@ (8009278 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f9e:	4ab6      	ldr	r2, [pc, #728]	@ (8009278 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008fa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fa4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008fa6:	e008      	b.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008fae:	e004      	b.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008fb0:	bf00      	nop
 8008fb2:	e002      	b.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008fb4:	bf00      	nop
 8008fb6:	e000      	b.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008fb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d10a      	bne.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008fc2:	4bad      	ldr	r3, [pc, #692]	@ (8009278 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fc6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008fd0:	4aa9      	ldr	r2, [pc, #676]	@ (8009278 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008fd2:	430b      	orrs	r3, r1
 8008fd4:	6553      	str	r3, [r2, #84]	@ 0x54
 8008fd6:	e003      	b.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008fdc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008fec:	653b      	str	r3, [r7, #80]	@ 0x50
 8008fee:	2300      	movs	r3, #0
 8008ff0:	657b      	str	r3, [r7, #84]	@ 0x54
 8008ff2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	d009      	beq.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008ffc:	4b9e      	ldr	r3, [pc, #632]	@ (8009278 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008ffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009000:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800900a:	4a9b      	ldr	r2, [pc, #620]	@ (8009278 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800900c:	430b      	orrs	r3, r1
 800900e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009018:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800901c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800901e:	2300      	movs	r3, #0
 8009020:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009022:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009026:	460b      	mov	r3, r1
 8009028:	4313      	orrs	r3, r2
 800902a:	d009      	beq.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800902c:	4b92      	ldr	r3, [pc, #584]	@ (8009278 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800902e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009030:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009038:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800903a:	4a8f      	ldr	r2, [pc, #572]	@ (8009278 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800903c:	430b      	orrs	r3, r1
 800903e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009048:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800904c:	643b      	str	r3, [r7, #64]	@ 0x40
 800904e:	2300      	movs	r3, #0
 8009050:	647b      	str	r3, [r7, #68]	@ 0x44
 8009052:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009056:	460b      	mov	r3, r1
 8009058:	4313      	orrs	r3, r2
 800905a:	d00e      	beq.n	800907a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800905c:	4b86      	ldr	r3, [pc, #536]	@ (8009278 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800905e:	691b      	ldr	r3, [r3, #16]
 8009060:	4a85      	ldr	r2, [pc, #532]	@ (8009278 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009062:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009066:	6113      	str	r3, [r2, #16]
 8009068:	4b83      	ldr	r3, [pc, #524]	@ (8009278 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800906a:	6919      	ldr	r1, [r3, #16]
 800906c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009070:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009074:	4a80      	ldr	r2, [pc, #512]	@ (8009278 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009076:	430b      	orrs	r3, r1
 8009078:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800907a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800907e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009082:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009086:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009088:	2300      	movs	r3, #0
 800908a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800908c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009090:	460b      	mov	r3, r1
 8009092:	4313      	orrs	r3, r2
 8009094:	d009      	beq.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009096:	4b78      	ldr	r3, [pc, #480]	@ (8009278 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800909a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800909e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090a4:	4a74      	ldr	r2, [pc, #464]	@ (8009278 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80090a6:	430b      	orrs	r3, r1
 80090a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80090aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80090b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80090b8:	2300      	movs	r3, #0
 80090ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80090bc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80090c0:	460b      	mov	r3, r1
 80090c2:	4313      	orrs	r3, r2
 80090c4:	d00a      	beq.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80090c6:	4b6c      	ldr	r3, [pc, #432]	@ (8009278 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80090c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090ca:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80090ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090d6:	4a68      	ldr	r2, [pc, #416]	@ (8009278 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80090d8:	430b      	orrs	r3, r1
 80090da:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80090dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e4:	2100      	movs	r1, #0
 80090e6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80090e8:	f003 0301 	and.w	r3, r3, #1
 80090ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80090ee:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80090f2:	460b      	mov	r3, r1
 80090f4:	4313      	orrs	r3, r2
 80090f6:	d011      	beq.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090fc:	3308      	adds	r3, #8
 80090fe:	2100      	movs	r1, #0
 8009100:	4618      	mov	r0, r3
 8009102:	f000 fb79 	bl	80097f8 <RCCEx_PLL2_Config>
 8009106:	4603      	mov	r3, r0
 8009108:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800910c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009110:	2b00      	cmp	r3, #0
 8009112:	d003      	beq.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009114:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009118:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800911c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009124:	2100      	movs	r1, #0
 8009126:	6239      	str	r1, [r7, #32]
 8009128:	f003 0302 	and.w	r3, r3, #2
 800912c:	627b      	str	r3, [r7, #36]	@ 0x24
 800912e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009132:	460b      	mov	r3, r1
 8009134:	4313      	orrs	r3, r2
 8009136:	d011      	beq.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800913c:	3308      	adds	r3, #8
 800913e:	2101      	movs	r1, #1
 8009140:	4618      	mov	r0, r3
 8009142:	f000 fb59 	bl	80097f8 <RCCEx_PLL2_Config>
 8009146:	4603      	mov	r3, r0
 8009148:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800914c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009150:	2b00      	cmp	r3, #0
 8009152:	d003      	beq.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009154:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009158:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800915c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009164:	2100      	movs	r1, #0
 8009166:	61b9      	str	r1, [r7, #24]
 8009168:	f003 0304 	and.w	r3, r3, #4
 800916c:	61fb      	str	r3, [r7, #28]
 800916e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009172:	460b      	mov	r3, r1
 8009174:	4313      	orrs	r3, r2
 8009176:	d011      	beq.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800917c:	3308      	adds	r3, #8
 800917e:	2102      	movs	r1, #2
 8009180:	4618      	mov	r0, r3
 8009182:	f000 fb39 	bl	80097f8 <RCCEx_PLL2_Config>
 8009186:	4603      	mov	r3, r0
 8009188:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800918c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009190:	2b00      	cmp	r3, #0
 8009192:	d003      	beq.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009194:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009198:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800919c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a4:	2100      	movs	r1, #0
 80091a6:	6139      	str	r1, [r7, #16]
 80091a8:	f003 0308 	and.w	r3, r3, #8
 80091ac:	617b      	str	r3, [r7, #20]
 80091ae:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80091b2:	460b      	mov	r3, r1
 80091b4:	4313      	orrs	r3, r2
 80091b6:	d011      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80091b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091bc:	3328      	adds	r3, #40	@ 0x28
 80091be:	2100      	movs	r1, #0
 80091c0:	4618      	mov	r0, r3
 80091c2:	f000 fbcb 	bl	800995c <RCCEx_PLL3_Config>
 80091c6:	4603      	mov	r3, r0
 80091c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80091cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d003      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80091dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e4:	2100      	movs	r1, #0
 80091e6:	60b9      	str	r1, [r7, #8]
 80091e8:	f003 0310 	and.w	r3, r3, #16
 80091ec:	60fb      	str	r3, [r7, #12]
 80091ee:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80091f2:	460b      	mov	r3, r1
 80091f4:	4313      	orrs	r3, r2
 80091f6:	d011      	beq.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80091f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091fc:	3328      	adds	r3, #40	@ 0x28
 80091fe:	2101      	movs	r1, #1
 8009200:	4618      	mov	r0, r3
 8009202:	f000 fbab 	bl	800995c <RCCEx_PLL3_Config>
 8009206:	4603      	mov	r3, r0
 8009208:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800920c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009210:	2b00      	cmp	r3, #0
 8009212:	d003      	beq.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009214:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009218:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800921c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009224:	2100      	movs	r1, #0
 8009226:	6039      	str	r1, [r7, #0]
 8009228:	f003 0320 	and.w	r3, r3, #32
 800922c:	607b      	str	r3, [r7, #4]
 800922e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009232:	460b      	mov	r3, r1
 8009234:	4313      	orrs	r3, r2
 8009236:	d011      	beq.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800923c:	3328      	adds	r3, #40	@ 0x28
 800923e:	2102      	movs	r1, #2
 8009240:	4618      	mov	r0, r3
 8009242:	f000 fb8b 	bl	800995c <RCCEx_PLL3_Config>
 8009246:	4603      	mov	r3, r0
 8009248:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800924c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009250:	2b00      	cmp	r3, #0
 8009252:	d003      	beq.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009254:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009258:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800925c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8009260:	2b00      	cmp	r3, #0
 8009262:	d101      	bne.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8009264:	2300      	movs	r3, #0
 8009266:	e000      	b.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8009268:	2301      	movs	r3, #1
}
 800926a:	4618      	mov	r0, r3
 800926c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8009270:	46bd      	mov	sp, r7
 8009272:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009276:	bf00      	nop
 8009278:	58024400 	.word	0x58024400

0800927c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009280:	f7fe fe00 	bl	8007e84 <HAL_RCC_GetHCLKFreq>
 8009284:	4602      	mov	r2, r0
 8009286:	4b06      	ldr	r3, [pc, #24]	@ (80092a0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009288:	6a1b      	ldr	r3, [r3, #32]
 800928a:	091b      	lsrs	r3, r3, #4
 800928c:	f003 0307 	and.w	r3, r3, #7
 8009290:	4904      	ldr	r1, [pc, #16]	@ (80092a4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009292:	5ccb      	ldrb	r3, [r1, r3]
 8009294:	f003 031f 	and.w	r3, r3, #31
 8009298:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800929c:	4618      	mov	r0, r3
 800929e:	bd80      	pop	{r7, pc}
 80092a0:	58024400 	.word	0x58024400
 80092a4:	08027b60 	.word	0x08027b60

080092a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b089      	sub	sp, #36	@ 0x24
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80092b0:	4ba1      	ldr	r3, [pc, #644]	@ (8009538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092b4:	f003 0303 	and.w	r3, r3, #3
 80092b8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80092ba:	4b9f      	ldr	r3, [pc, #636]	@ (8009538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092be:	0b1b      	lsrs	r3, r3, #12
 80092c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80092c4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80092c6:	4b9c      	ldr	r3, [pc, #624]	@ (8009538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ca:	091b      	lsrs	r3, r3, #4
 80092cc:	f003 0301 	and.w	r3, r3, #1
 80092d0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80092d2:	4b99      	ldr	r3, [pc, #612]	@ (8009538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092d6:	08db      	lsrs	r3, r3, #3
 80092d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092dc:	693a      	ldr	r2, [r7, #16]
 80092de:	fb02 f303 	mul.w	r3, r2, r3
 80092e2:	ee07 3a90 	vmov	s15, r3
 80092e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	f000 8111 	beq.w	8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80092f6:	69bb      	ldr	r3, [r7, #24]
 80092f8:	2b02      	cmp	r3, #2
 80092fa:	f000 8083 	beq.w	8009404 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80092fe:	69bb      	ldr	r3, [r7, #24]
 8009300:	2b02      	cmp	r3, #2
 8009302:	f200 80a1 	bhi.w	8009448 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009306:	69bb      	ldr	r3, [r7, #24]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d003      	beq.n	8009314 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800930c:	69bb      	ldr	r3, [r7, #24]
 800930e:	2b01      	cmp	r3, #1
 8009310:	d056      	beq.n	80093c0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009312:	e099      	b.n	8009448 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009314:	4b88      	ldr	r3, [pc, #544]	@ (8009538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f003 0320 	and.w	r3, r3, #32
 800931c:	2b00      	cmp	r3, #0
 800931e:	d02d      	beq.n	800937c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009320:	4b85      	ldr	r3, [pc, #532]	@ (8009538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	08db      	lsrs	r3, r3, #3
 8009326:	f003 0303 	and.w	r3, r3, #3
 800932a:	4a84      	ldr	r2, [pc, #528]	@ (800953c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800932c:	fa22 f303 	lsr.w	r3, r2, r3
 8009330:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	ee07 3a90 	vmov	s15, r3
 8009338:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	ee07 3a90 	vmov	s15, r3
 8009342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800934a:	4b7b      	ldr	r3, [pc, #492]	@ (8009538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800934c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800934e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009352:	ee07 3a90 	vmov	s15, r3
 8009356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800935a:	ed97 6a03 	vldr	s12, [r7, #12]
 800935e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009540 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800936a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800936e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009376:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800937a:	e087      	b.n	800948c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	ee07 3a90 	vmov	s15, r3
 8009382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009386:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009544 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800938a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800938e:	4b6a      	ldr	r3, [pc, #424]	@ (8009538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009396:	ee07 3a90 	vmov	s15, r3
 800939a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800939e:	ed97 6a03 	vldr	s12, [r7, #12]
 80093a2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009540 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093be:	e065      	b.n	800948c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	ee07 3a90 	vmov	s15, r3
 80093c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009548 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80093ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093d2:	4b59      	ldr	r3, [pc, #356]	@ (8009538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093da:	ee07 3a90 	vmov	s15, r3
 80093de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80093e6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009540 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009402:	e043      	b.n	800948c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	ee07 3a90 	vmov	s15, r3
 800940a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800940e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800954c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009416:	4b48      	ldr	r3, [pc, #288]	@ (8009538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800941a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800941e:	ee07 3a90 	vmov	s15, r3
 8009422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009426:	ed97 6a03 	vldr	s12, [r7, #12]
 800942a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009540 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800942e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009436:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800943a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800943e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009442:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009446:	e021      	b.n	800948c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	ee07 3a90 	vmov	s15, r3
 800944e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009452:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009548 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800945a:	4b37      	ldr	r3, [pc, #220]	@ (8009538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800945c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800945e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009462:	ee07 3a90 	vmov	s15, r3
 8009466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800946a:	ed97 6a03 	vldr	s12, [r7, #12]
 800946e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009540 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800947a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800947e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009486:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800948a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800948c:	4b2a      	ldr	r3, [pc, #168]	@ (8009538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800948e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009490:	0a5b      	lsrs	r3, r3, #9
 8009492:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009496:	ee07 3a90 	vmov	s15, r3
 800949a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800949e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80094aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094b2:	ee17 2a90 	vmov	r2, s15
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80094ba:	4b1f      	ldr	r3, [pc, #124]	@ (8009538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094be:	0c1b      	lsrs	r3, r3, #16
 80094c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094c4:	ee07 3a90 	vmov	s15, r3
 80094c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80094d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094e0:	ee17 2a90 	vmov	r2, s15
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80094e8:	4b13      	ldr	r3, [pc, #76]	@ (8009538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094ec:	0e1b      	lsrs	r3, r3, #24
 80094ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094f2:	ee07 3a90 	vmov	s15, r3
 80094f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009502:	edd7 6a07 	vldr	s13, [r7, #28]
 8009506:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800950a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800950e:	ee17 2a90 	vmov	r2, s15
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009516:	e008      	b.n	800952a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	609a      	str	r2, [r3, #8]
}
 800952a:	bf00      	nop
 800952c:	3724      	adds	r7, #36	@ 0x24
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop
 8009538:	58024400 	.word	0x58024400
 800953c:	03d09000 	.word	0x03d09000
 8009540:	46000000 	.word	0x46000000
 8009544:	4c742400 	.word	0x4c742400
 8009548:	4a742400 	.word	0x4a742400
 800954c:	4bbebc20 	.word	0x4bbebc20

08009550 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009550:	b480      	push	{r7}
 8009552:	b089      	sub	sp, #36	@ 0x24
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009558:	4ba1      	ldr	r3, [pc, #644]	@ (80097e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800955a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800955c:	f003 0303 	and.w	r3, r3, #3
 8009560:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009562:	4b9f      	ldr	r3, [pc, #636]	@ (80097e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009566:	0d1b      	lsrs	r3, r3, #20
 8009568:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800956c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800956e:	4b9c      	ldr	r3, [pc, #624]	@ (80097e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009572:	0a1b      	lsrs	r3, r3, #8
 8009574:	f003 0301 	and.w	r3, r3, #1
 8009578:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800957a:	4b99      	ldr	r3, [pc, #612]	@ (80097e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800957c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800957e:	08db      	lsrs	r3, r3, #3
 8009580:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009584:	693a      	ldr	r2, [r7, #16]
 8009586:	fb02 f303 	mul.w	r3, r2, r3
 800958a:	ee07 3a90 	vmov	s15, r3
 800958e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009592:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	2b00      	cmp	r3, #0
 800959a:	f000 8111 	beq.w	80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	2b02      	cmp	r3, #2
 80095a2:	f000 8083 	beq.w	80096ac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	2b02      	cmp	r3, #2
 80095aa:	f200 80a1 	bhi.w	80096f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d003      	beq.n	80095bc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d056      	beq.n	8009668 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80095ba:	e099      	b.n	80096f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095bc:	4b88      	ldr	r3, [pc, #544]	@ (80097e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f003 0320 	and.w	r3, r3, #32
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d02d      	beq.n	8009624 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095c8:	4b85      	ldr	r3, [pc, #532]	@ (80097e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	08db      	lsrs	r3, r3, #3
 80095ce:	f003 0303 	and.w	r3, r3, #3
 80095d2:	4a84      	ldr	r2, [pc, #528]	@ (80097e4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80095d4:	fa22 f303 	lsr.w	r3, r2, r3
 80095d8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	ee07 3a90 	vmov	s15, r3
 80095e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	ee07 3a90 	vmov	s15, r3
 80095ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095f2:	4b7b      	ldr	r3, [pc, #492]	@ (80097e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095fa:	ee07 3a90 	vmov	s15, r3
 80095fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009602:	ed97 6a03 	vldr	s12, [r7, #12]
 8009606:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80097e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800960a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800960e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009612:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800961a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800961e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009622:	e087      	b.n	8009734 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	ee07 3a90 	vmov	s15, r3
 800962a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800962e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80097ec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009636:	4b6a      	ldr	r3, [pc, #424]	@ (80097e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800963a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800963e:	ee07 3a90 	vmov	s15, r3
 8009642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009646:	ed97 6a03 	vldr	s12, [r7, #12]
 800964a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80097e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800964e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009656:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800965a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800965e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009662:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009666:	e065      	b.n	8009734 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	ee07 3a90 	vmov	s15, r3
 800966e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009672:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80097f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800967a:	4b59      	ldr	r3, [pc, #356]	@ (80097e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800967c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800967e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009682:	ee07 3a90 	vmov	s15, r3
 8009686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800968a:	ed97 6a03 	vldr	s12, [r7, #12]
 800968e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80097e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800969a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800969e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096aa:	e043      	b.n	8009734 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	ee07 3a90 	vmov	s15, r3
 80096b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096b6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80097f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80096ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096be:	4b48      	ldr	r3, [pc, #288]	@ (80097e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096c6:	ee07 3a90 	vmov	s15, r3
 80096ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80096d2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80097e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096ee:	e021      	b.n	8009734 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	ee07 3a90 	vmov	s15, r3
 80096f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096fa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80097f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80096fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009702:	4b37      	ldr	r3, [pc, #220]	@ (80097e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800970a:	ee07 3a90 	vmov	s15, r3
 800970e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009712:	ed97 6a03 	vldr	s12, [r7, #12]
 8009716:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80097e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800971a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800971e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009722:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800972a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800972e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009732:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009734:	4b2a      	ldr	r3, [pc, #168]	@ (80097e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009738:	0a5b      	lsrs	r3, r3, #9
 800973a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800973e:	ee07 3a90 	vmov	s15, r3
 8009742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009746:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800974a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800974e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800975a:	ee17 2a90 	vmov	r2, s15
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009762:	4b1f      	ldr	r3, [pc, #124]	@ (80097e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009766:	0c1b      	lsrs	r3, r3, #16
 8009768:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800976c:	ee07 3a90 	vmov	s15, r3
 8009770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009774:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009778:	ee37 7a87 	vadd.f32	s14, s15, s14
 800977c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009780:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009784:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009788:	ee17 2a90 	vmov	r2, s15
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009790:	4b13      	ldr	r3, [pc, #76]	@ (80097e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009794:	0e1b      	lsrs	r3, r3, #24
 8009796:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800979a:	ee07 3a90 	vmov	s15, r3
 800979e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80097ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097b6:	ee17 2a90 	vmov	r2, s15
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80097be:	e008      	b.n	80097d2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	609a      	str	r2, [r3, #8]
}
 80097d2:	bf00      	nop
 80097d4:	3724      	adds	r7, #36	@ 0x24
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr
 80097de:	bf00      	nop
 80097e0:	58024400 	.word	0x58024400
 80097e4:	03d09000 	.word	0x03d09000
 80097e8:	46000000 	.word	0x46000000
 80097ec:	4c742400 	.word	0x4c742400
 80097f0:	4a742400 	.word	0x4a742400
 80097f4:	4bbebc20 	.word	0x4bbebc20

080097f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009802:	2300      	movs	r3, #0
 8009804:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009806:	4b53      	ldr	r3, [pc, #332]	@ (8009954 <RCCEx_PLL2_Config+0x15c>)
 8009808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800980a:	f003 0303 	and.w	r3, r3, #3
 800980e:	2b03      	cmp	r3, #3
 8009810:	d101      	bne.n	8009816 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	e099      	b.n	800994a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009816:	4b4f      	ldr	r3, [pc, #316]	@ (8009954 <RCCEx_PLL2_Config+0x15c>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a4e      	ldr	r2, [pc, #312]	@ (8009954 <RCCEx_PLL2_Config+0x15c>)
 800981c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009820:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009822:	f7fa f9c9 	bl	8003bb8 <HAL_GetTick>
 8009826:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009828:	e008      	b.n	800983c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800982a:	f7fa f9c5 	bl	8003bb8 <HAL_GetTick>
 800982e:	4602      	mov	r2, r0
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	1ad3      	subs	r3, r2, r3
 8009834:	2b02      	cmp	r3, #2
 8009836:	d901      	bls.n	800983c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009838:	2303      	movs	r3, #3
 800983a:	e086      	b.n	800994a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800983c:	4b45      	ldr	r3, [pc, #276]	@ (8009954 <RCCEx_PLL2_Config+0x15c>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009844:	2b00      	cmp	r3, #0
 8009846:	d1f0      	bne.n	800982a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009848:	4b42      	ldr	r3, [pc, #264]	@ (8009954 <RCCEx_PLL2_Config+0x15c>)
 800984a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800984c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	031b      	lsls	r3, r3, #12
 8009856:	493f      	ldr	r1, [pc, #252]	@ (8009954 <RCCEx_PLL2_Config+0x15c>)
 8009858:	4313      	orrs	r3, r2
 800985a:	628b      	str	r3, [r1, #40]	@ 0x28
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	3b01      	subs	r3, #1
 8009862:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	3b01      	subs	r3, #1
 800986c:	025b      	lsls	r3, r3, #9
 800986e:	b29b      	uxth	r3, r3
 8009870:	431a      	orrs	r2, r3
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	3b01      	subs	r3, #1
 8009878:	041b      	lsls	r3, r3, #16
 800987a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800987e:	431a      	orrs	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	691b      	ldr	r3, [r3, #16]
 8009884:	3b01      	subs	r3, #1
 8009886:	061b      	lsls	r3, r3, #24
 8009888:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800988c:	4931      	ldr	r1, [pc, #196]	@ (8009954 <RCCEx_PLL2_Config+0x15c>)
 800988e:	4313      	orrs	r3, r2
 8009890:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009892:	4b30      	ldr	r3, [pc, #192]	@ (8009954 <RCCEx_PLL2_Config+0x15c>)
 8009894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009896:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	695b      	ldr	r3, [r3, #20]
 800989e:	492d      	ldr	r1, [pc, #180]	@ (8009954 <RCCEx_PLL2_Config+0x15c>)
 80098a0:	4313      	orrs	r3, r2
 80098a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80098a4:	4b2b      	ldr	r3, [pc, #172]	@ (8009954 <RCCEx_PLL2_Config+0x15c>)
 80098a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098a8:	f023 0220 	bic.w	r2, r3, #32
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	699b      	ldr	r3, [r3, #24]
 80098b0:	4928      	ldr	r1, [pc, #160]	@ (8009954 <RCCEx_PLL2_Config+0x15c>)
 80098b2:	4313      	orrs	r3, r2
 80098b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80098b6:	4b27      	ldr	r3, [pc, #156]	@ (8009954 <RCCEx_PLL2_Config+0x15c>)
 80098b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ba:	4a26      	ldr	r2, [pc, #152]	@ (8009954 <RCCEx_PLL2_Config+0x15c>)
 80098bc:	f023 0310 	bic.w	r3, r3, #16
 80098c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80098c2:	4b24      	ldr	r3, [pc, #144]	@ (8009954 <RCCEx_PLL2_Config+0x15c>)
 80098c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098c6:	4b24      	ldr	r3, [pc, #144]	@ (8009958 <RCCEx_PLL2_Config+0x160>)
 80098c8:	4013      	ands	r3, r2
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	69d2      	ldr	r2, [r2, #28]
 80098ce:	00d2      	lsls	r2, r2, #3
 80098d0:	4920      	ldr	r1, [pc, #128]	@ (8009954 <RCCEx_PLL2_Config+0x15c>)
 80098d2:	4313      	orrs	r3, r2
 80098d4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80098d6:	4b1f      	ldr	r3, [pc, #124]	@ (8009954 <RCCEx_PLL2_Config+0x15c>)
 80098d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098da:	4a1e      	ldr	r2, [pc, #120]	@ (8009954 <RCCEx_PLL2_Config+0x15c>)
 80098dc:	f043 0310 	orr.w	r3, r3, #16
 80098e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d106      	bne.n	80098f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80098e8:	4b1a      	ldr	r3, [pc, #104]	@ (8009954 <RCCEx_PLL2_Config+0x15c>)
 80098ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ec:	4a19      	ldr	r2, [pc, #100]	@ (8009954 <RCCEx_PLL2_Config+0x15c>)
 80098ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80098f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80098f4:	e00f      	b.n	8009916 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d106      	bne.n	800990a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80098fc:	4b15      	ldr	r3, [pc, #84]	@ (8009954 <RCCEx_PLL2_Config+0x15c>)
 80098fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009900:	4a14      	ldr	r2, [pc, #80]	@ (8009954 <RCCEx_PLL2_Config+0x15c>)
 8009902:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009906:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009908:	e005      	b.n	8009916 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800990a:	4b12      	ldr	r3, [pc, #72]	@ (8009954 <RCCEx_PLL2_Config+0x15c>)
 800990c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800990e:	4a11      	ldr	r2, [pc, #68]	@ (8009954 <RCCEx_PLL2_Config+0x15c>)
 8009910:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009914:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009916:	4b0f      	ldr	r3, [pc, #60]	@ (8009954 <RCCEx_PLL2_Config+0x15c>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a0e      	ldr	r2, [pc, #56]	@ (8009954 <RCCEx_PLL2_Config+0x15c>)
 800991c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009920:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009922:	f7fa f949 	bl	8003bb8 <HAL_GetTick>
 8009926:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009928:	e008      	b.n	800993c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800992a:	f7fa f945 	bl	8003bb8 <HAL_GetTick>
 800992e:	4602      	mov	r2, r0
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	1ad3      	subs	r3, r2, r3
 8009934:	2b02      	cmp	r3, #2
 8009936:	d901      	bls.n	800993c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009938:	2303      	movs	r3, #3
 800993a:	e006      	b.n	800994a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800993c:	4b05      	ldr	r3, [pc, #20]	@ (8009954 <RCCEx_PLL2_Config+0x15c>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009944:	2b00      	cmp	r3, #0
 8009946:	d0f0      	beq.n	800992a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009948:	7bfb      	ldrb	r3, [r7, #15]
}
 800994a:	4618      	mov	r0, r3
 800994c:	3710      	adds	r7, #16
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	58024400 	.word	0x58024400
 8009958:	ffff0007 	.word	0xffff0007

0800995c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009966:	2300      	movs	r3, #0
 8009968:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800996a:	4b53      	ldr	r3, [pc, #332]	@ (8009ab8 <RCCEx_PLL3_Config+0x15c>)
 800996c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800996e:	f003 0303 	and.w	r3, r3, #3
 8009972:	2b03      	cmp	r3, #3
 8009974:	d101      	bne.n	800997a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	e099      	b.n	8009aae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800997a:	4b4f      	ldr	r3, [pc, #316]	@ (8009ab8 <RCCEx_PLL3_Config+0x15c>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a4e      	ldr	r2, [pc, #312]	@ (8009ab8 <RCCEx_PLL3_Config+0x15c>)
 8009980:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009984:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009986:	f7fa f917 	bl	8003bb8 <HAL_GetTick>
 800998a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800998c:	e008      	b.n	80099a0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800998e:	f7fa f913 	bl	8003bb8 <HAL_GetTick>
 8009992:	4602      	mov	r2, r0
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	1ad3      	subs	r3, r2, r3
 8009998:	2b02      	cmp	r3, #2
 800999a:	d901      	bls.n	80099a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800999c:	2303      	movs	r3, #3
 800999e:	e086      	b.n	8009aae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80099a0:	4b45      	ldr	r3, [pc, #276]	@ (8009ab8 <RCCEx_PLL3_Config+0x15c>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1f0      	bne.n	800998e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80099ac:	4b42      	ldr	r3, [pc, #264]	@ (8009ab8 <RCCEx_PLL3_Config+0x15c>)
 80099ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099b0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	051b      	lsls	r3, r3, #20
 80099ba:	493f      	ldr	r1, [pc, #252]	@ (8009ab8 <RCCEx_PLL3_Config+0x15c>)
 80099bc:	4313      	orrs	r3, r2
 80099be:	628b      	str	r3, [r1, #40]	@ 0x28
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	3b01      	subs	r3, #1
 80099c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	3b01      	subs	r3, #1
 80099d0:	025b      	lsls	r3, r3, #9
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	431a      	orrs	r2, r3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	3b01      	subs	r3, #1
 80099dc:	041b      	lsls	r3, r3, #16
 80099de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80099e2:	431a      	orrs	r2, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	3b01      	subs	r3, #1
 80099ea:	061b      	lsls	r3, r3, #24
 80099ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80099f0:	4931      	ldr	r1, [pc, #196]	@ (8009ab8 <RCCEx_PLL3_Config+0x15c>)
 80099f2:	4313      	orrs	r3, r2
 80099f4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80099f6:	4b30      	ldr	r3, [pc, #192]	@ (8009ab8 <RCCEx_PLL3_Config+0x15c>)
 80099f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	695b      	ldr	r3, [r3, #20]
 8009a02:	492d      	ldr	r1, [pc, #180]	@ (8009ab8 <RCCEx_PLL3_Config+0x15c>)
 8009a04:	4313      	orrs	r3, r2
 8009a06:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009a08:	4b2b      	ldr	r3, [pc, #172]	@ (8009ab8 <RCCEx_PLL3_Config+0x15c>)
 8009a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a0c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	699b      	ldr	r3, [r3, #24]
 8009a14:	4928      	ldr	r1, [pc, #160]	@ (8009ab8 <RCCEx_PLL3_Config+0x15c>)
 8009a16:	4313      	orrs	r3, r2
 8009a18:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009a1a:	4b27      	ldr	r3, [pc, #156]	@ (8009ab8 <RCCEx_PLL3_Config+0x15c>)
 8009a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a1e:	4a26      	ldr	r2, [pc, #152]	@ (8009ab8 <RCCEx_PLL3_Config+0x15c>)
 8009a20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009a26:	4b24      	ldr	r3, [pc, #144]	@ (8009ab8 <RCCEx_PLL3_Config+0x15c>)
 8009a28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a2a:	4b24      	ldr	r3, [pc, #144]	@ (8009abc <RCCEx_PLL3_Config+0x160>)
 8009a2c:	4013      	ands	r3, r2
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	69d2      	ldr	r2, [r2, #28]
 8009a32:	00d2      	lsls	r2, r2, #3
 8009a34:	4920      	ldr	r1, [pc, #128]	@ (8009ab8 <RCCEx_PLL3_Config+0x15c>)
 8009a36:	4313      	orrs	r3, r2
 8009a38:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8009ab8 <RCCEx_PLL3_Config+0x15c>)
 8009a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8009ab8 <RCCEx_PLL3_Config+0x15c>)
 8009a40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d106      	bne.n	8009a5a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8009ab8 <RCCEx_PLL3_Config+0x15c>)
 8009a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a50:	4a19      	ldr	r2, [pc, #100]	@ (8009ab8 <RCCEx_PLL3_Config+0x15c>)
 8009a52:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009a56:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a58:	e00f      	b.n	8009a7a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d106      	bne.n	8009a6e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009a60:	4b15      	ldr	r3, [pc, #84]	@ (8009ab8 <RCCEx_PLL3_Config+0x15c>)
 8009a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a64:	4a14      	ldr	r2, [pc, #80]	@ (8009ab8 <RCCEx_PLL3_Config+0x15c>)
 8009a66:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009a6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a6c:	e005      	b.n	8009a7a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009a6e:	4b12      	ldr	r3, [pc, #72]	@ (8009ab8 <RCCEx_PLL3_Config+0x15c>)
 8009a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a72:	4a11      	ldr	r2, [pc, #68]	@ (8009ab8 <RCCEx_PLL3_Config+0x15c>)
 8009a74:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009a78:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8009ab8 <RCCEx_PLL3_Config+0x15c>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8009ab8 <RCCEx_PLL3_Config+0x15c>)
 8009a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a86:	f7fa f897 	bl	8003bb8 <HAL_GetTick>
 8009a8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a8c:	e008      	b.n	8009aa0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009a8e:	f7fa f893 	bl	8003bb8 <HAL_GetTick>
 8009a92:	4602      	mov	r2, r0
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	1ad3      	subs	r3, r2, r3
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	d901      	bls.n	8009aa0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009a9c:	2303      	movs	r3, #3
 8009a9e:	e006      	b.n	8009aae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009aa0:	4b05      	ldr	r3, [pc, #20]	@ (8009ab8 <RCCEx_PLL3_Config+0x15c>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d0f0      	beq.n	8009a8e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3710      	adds	r7, #16
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	58024400 	.word	0x58024400
 8009abc:	ffff0007 	.word	0xffff0007

08009ac0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d101      	bne.n	8009ad2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e10f      	b.n	8009cf2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a87      	ldr	r2, [pc, #540]	@ (8009cfc <HAL_SPI_Init+0x23c>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d00f      	beq.n	8009b02 <HAL_SPI_Init+0x42>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a86      	ldr	r2, [pc, #536]	@ (8009d00 <HAL_SPI_Init+0x240>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d00a      	beq.n	8009b02 <HAL_SPI_Init+0x42>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a84      	ldr	r2, [pc, #528]	@ (8009d04 <HAL_SPI_Init+0x244>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d005      	beq.n	8009b02 <HAL_SPI_Init+0x42>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	2b0f      	cmp	r3, #15
 8009afc:	d901      	bls.n	8009b02 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009afe:	2301      	movs	r3, #1
 8009b00:	e0f7      	b.n	8009cf2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f001 f870 	bl	800abe8 <SPI_GetPacketSize>
 8009b08:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a7b      	ldr	r2, [pc, #492]	@ (8009cfc <HAL_SPI_Init+0x23c>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d00c      	beq.n	8009b2e <HAL_SPI_Init+0x6e>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a79      	ldr	r2, [pc, #484]	@ (8009d00 <HAL_SPI_Init+0x240>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d007      	beq.n	8009b2e <HAL_SPI_Init+0x6e>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a78      	ldr	r2, [pc, #480]	@ (8009d04 <HAL_SPI_Init+0x244>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d002      	beq.n	8009b2e <HAL_SPI_Init+0x6e>
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2b08      	cmp	r3, #8
 8009b2c:	d811      	bhi.n	8009b52 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009b32:	4a72      	ldr	r2, [pc, #456]	@ (8009cfc <HAL_SPI_Init+0x23c>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d009      	beq.n	8009b4c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a70      	ldr	r2, [pc, #448]	@ (8009d00 <HAL_SPI_Init+0x240>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d004      	beq.n	8009b4c <HAL_SPI_Init+0x8c>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a6f      	ldr	r2, [pc, #444]	@ (8009d04 <HAL_SPI_Init+0x244>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d104      	bne.n	8009b56 <HAL_SPI_Init+0x96>
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2b10      	cmp	r3, #16
 8009b50:	d901      	bls.n	8009b56 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	e0cd      	b.n	8009cf2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d106      	bne.n	8009b70 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f7f9 fad6 	bl	800311c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2202      	movs	r2, #2
 8009b74:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f022 0201 	bic.w	r2, r2, #1
 8009b86:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	689b      	ldr	r3, [r3, #8]
 8009b8e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009b92:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	699b      	ldr	r3, [r3, #24]
 8009b98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009b9c:	d119      	bne.n	8009bd2 <HAL_SPI_Init+0x112>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009ba6:	d103      	bne.n	8009bb0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d008      	beq.n	8009bc2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d10c      	bne.n	8009bd2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009bbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009bc0:	d107      	bne.n	8009bd2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009bd0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d00f      	beq.n	8009bfe <HAL_SPI_Init+0x13e>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	68db      	ldr	r3, [r3, #12]
 8009be2:	2b06      	cmp	r3, #6
 8009be4:	d90b      	bls.n	8009bfe <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	430a      	orrs	r2, r1
 8009bfa:	601a      	str	r2, [r3, #0]
 8009bfc:	e007      	b.n	8009c0e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009c0c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	69da      	ldr	r2, [r3, #28]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c16:	431a      	orrs	r2, r3
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	431a      	orrs	r2, r3
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c20:	ea42 0103 	orr.w	r1, r2, r3
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	68da      	ldr	r2, [r3, #12]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	430a      	orrs	r2, r1
 8009c2e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c38:	431a      	orrs	r2, r3
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c3e:	431a      	orrs	r2, r3
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	699b      	ldr	r3, [r3, #24]
 8009c44:	431a      	orrs	r2, r3
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	431a      	orrs	r2, r3
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	695b      	ldr	r3, [r3, #20]
 8009c50:	431a      	orrs	r2, r3
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6a1b      	ldr	r3, [r3, #32]
 8009c56:	431a      	orrs	r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	431a      	orrs	r2, r3
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c62:	431a      	orrs	r2, r3
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	431a      	orrs	r2, r3
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c6e:	ea42 0103 	orr.w	r1, r2, r3
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	430a      	orrs	r2, r1
 8009c7c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d113      	bne.n	8009cae <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	689b      	ldr	r3, [r3, #8]
 8009c8c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009c98:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009cac:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f022 0201 	bic.w	r2, r2, #1
 8009cbc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00a      	beq.n	8009ce0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	430a      	orrs	r2, r1
 8009cde:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2201      	movs	r2, #1
 8009cec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009cf0:	2300      	movs	r3, #0
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	40013000 	.word	0x40013000
 8009d00:	40003800 	.word	0x40003800
 8009d04:	40003c00 	.word	0x40003c00

08009d08 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	4613      	mov	r3, r2
 8009d14:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d001      	beq.n	8009d26 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8009d22:	2302      	movs	r3, #2
 8009d24:	e126      	b.n	8009f74 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d002      	beq.n	8009d32 <HAL_SPI_Transmit_DMA+0x2a>
 8009d2c:	88fb      	ldrh	r3, [r7, #6]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d101      	bne.n	8009d36 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8009d32:	2301      	movs	r3, #1
 8009d34:	e11e      	b.n	8009f74 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d101      	bne.n	8009d44 <HAL_SPI_Transmit_DMA+0x3c>
 8009d40:	2302      	movs	r3, #2
 8009d42:	e117      	b.n	8009f74 <HAL_SPI_Transmit_DMA+0x26c>
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2201      	movs	r2, #1
 8009d48:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2203      	movs	r2, #3
 8009d50:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2200      	movs	r2, #0
 8009d58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	88fa      	ldrh	r2, [r7, #6]
 8009d66:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	88fa      	ldrh	r2, [r7, #6]
 8009d6e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2200      	movs	r2, #0
 8009d76:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2200      	movs	r2, #0
 8009d82:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009d9c:	d108      	bne.n	8009db0 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009dac:	601a      	str	r2, [r3, #0]
 8009dae:	e009      	b.n	8009dc4 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009dc2:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	2b0f      	cmp	r3, #15
 8009dca:	d905      	bls.n	8009dd8 <HAL_SPI_Transmit_DMA+0xd0>
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009dd0:	699b      	ldr	r3, [r3, #24]
 8009dd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009dd6:	d10f      	bne.n	8009df8 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8009ddc:	2b07      	cmp	r3, #7
 8009dde:	d911      	bls.n	8009e04 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009de4:	699b      	ldr	r3, [r3, #24]
 8009de6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009dea:	d00b      	beq.n	8009e04 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009df0:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009df2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009df6:	d005      	beq.n	8009e04 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8009e00:	2301      	movs	r3, #1
 8009e02:	e0b7      	b.n	8009f74 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	2b07      	cmp	r3, #7
 8009e0a:	d820      	bhi.n	8009e4e <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e10:	699b      	ldr	r3, [r3, #24]
 8009e12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e16:	d109      	bne.n	8009e2c <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	3301      	adds	r3, #1
 8009e22:	105b      	asrs	r3, r3, #1
 8009e24:	b29a      	uxth	r2, r3
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e30:	699b      	ldr	r3, [r3, #24]
 8009e32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e36:	d11e      	bne.n	8009e76 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	3303      	adds	r3, #3
 8009e42:	109b      	asrs	r3, r3, #2
 8009e44:	b29a      	uxth	r2, r3
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009e4c:	e013      	b.n	8009e76 <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	2b0f      	cmp	r3, #15
 8009e54:	d80f      	bhi.n	8009e76 <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e5a:	699b      	ldr	r3, [r3, #24]
 8009e5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e60:	d109      	bne.n	8009e76 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	105b      	asrs	r3, r3, #1
 8009e6e:	b29a      	uxth	r2, r3
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e7a:	4a40      	ldr	r2, [pc, #256]	@ (8009f7c <HAL_SPI_Transmit_DMA+0x274>)
 8009e7c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e82:	4a3f      	ldr	r2, [pc, #252]	@ (8009f80 <HAL_SPI_Transmit_DMA+0x278>)
 8009e84:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e8a:	4a3e      	ldr	r2, [pc, #248]	@ (8009f84 <HAL_SPI_Transmit_DMA+0x27c>)
 8009e8c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e92:	2200      	movs	r2, #0
 8009e94:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	689a      	ldr	r2, [r3, #8]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009ea4:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009eae:	4619      	mov	r1, r3
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	3320      	adds	r3, #32
 8009eb6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009ebe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8009ec0:	f7fa fbbc 	bl	800463c <HAL_DMA_Start_IT>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d011      	beq.n	8009eee <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ed0:	f043 0210 	orr.w	r2, r3, #16
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2201      	movs	r2, #1
 8009ede:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8009eea:	2301      	movs	r3, #1
 8009eec:	e042      	b.n	8009f74 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ef2:	69db      	ldr	r3, [r3, #28]
 8009ef4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ef8:	d108      	bne.n	8009f0c <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	6859      	ldr	r1, [r3, #4]
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	4b20      	ldr	r3, [pc, #128]	@ (8009f88 <HAL_SPI_Transmit_DMA+0x280>)
 8009f06:	400b      	ands	r3, r1
 8009f08:	6053      	str	r3, [r2, #4]
 8009f0a:	e009      	b.n	8009f20 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	685a      	ldr	r2, [r3, #4]
 8009f12:	4b1d      	ldr	r3, [pc, #116]	@ (8009f88 <HAL_SPI_Transmit_DMA+0x280>)
 8009f14:	4013      	ands	r3, r2
 8009f16:	88f9      	ldrh	r1, [r7, #6]
 8009f18:	68fa      	ldr	r2, [r7, #12]
 8009f1a:	6812      	ldr	r2, [r2, #0]
 8009f1c:	430b      	orrs	r3, r1
 8009f1e:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	689a      	ldr	r2, [r3, #8]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009f2e:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	691a      	ldr	r2, [r3, #16]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8009f3e:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f042 0201 	orr.w	r2, r2, #1
 8009f4e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f58:	d107      	bne.n	8009f6a <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009f68:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009f72:	2300      	movs	r3, #0
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3710      	adds	r7, #16
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	0800a92d 	.word	0x0800a92d
 8009f80:	0800a8a1 	.word	0x0800a8a1
 8009f84:	0800a965 	.word	0x0800a965
 8009f88:	ffff0000 	.word	0xffff0000

08009f8c <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	607a      	str	r2, [r7, #4]
 8009f98:	807b      	strh	r3, [r7, #2]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009fa0:	b2db      	uxtb	r3, r3
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d001      	beq.n	8009faa <HAL_SPI_TransmitReceive_DMA+0x1e>
  {
    return HAL_BUSY;
 8009fa6:	2302      	movs	r3, #2
 8009fa8:	e18a      	b.n	800a2c0 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d005      	beq.n	8009fbc <HAL_SPI_TransmitReceive_DMA+0x30>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d002      	beq.n	8009fbc <HAL_SPI_TransmitReceive_DMA+0x30>
 8009fb6:	887b      	ldrh	r3, [r7, #2]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d101      	bne.n	8009fc0 <HAL_SPI_TransmitReceive_DMA+0x34>
  {
    return HAL_ERROR;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	e17f      	b.n	800a2c0 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	d101      	bne.n	8009fce <HAL_SPI_TransmitReceive_DMA+0x42>
 8009fca:	2302      	movs	r3, #2
 8009fcc:	e178      	b.n	800a2c0 <HAL_SPI_TransmitReceive_DMA+0x334>
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2205      	movs	r2, #5
 8009fda:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	68ba      	ldr	r2, [r7, #8]
 8009fea:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	887a      	ldrh	r2, [r7, #2]
 8009ff0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	887a      	ldrh	r2, [r7, #2]
 8009ff8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	887a      	ldrh	r2, [r7, #2]
 800a006:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	887a      	ldrh	r2, [r7, #2]
 800a00e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2200      	movs	r2, #0
 800a016:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2200      	movs	r2, #0
 800a01c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	68da      	ldr	r2, [r3, #12]
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800a02c:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	689a      	ldr	r2, [r3, #8]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a03c:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	2b0f      	cmp	r3, #15
 800a044:	d905      	bls.n	800a052 <HAL_SPI_TransmitReceive_DMA+0xc6>
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a04a:	699b      	ldr	r3, [r3, #24]
 800a04c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a050:	d10f      	bne.n	800a072 <HAL_SPI_TransmitReceive_DMA+0xe6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a056:	2b07      	cmp	r3, #7
 800a058:	d911      	bls.n	800a07e <HAL_SPI_TransmitReceive_DMA+0xf2>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a05e:	699b      	ldr	r3, [r3, #24]
 800a060:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a064:	d00b      	beq.n	800a07e <HAL_SPI_TransmitReceive_DMA+0xf2>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a06a:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a06c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a070:	d005      	beq.n	800a07e <HAL_SPI_TransmitReceive_DMA+0xf2>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2200      	movs	r2, #0
 800a076:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800a07a:	2301      	movs	r3, #1
 800a07c:	e120      	b.n	800a2c0 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	2b07      	cmp	r3, #7
 800a084:	d840      	bhi.n	800a108 <HAL_SPI_TransmitReceive_DMA+0x17c>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a08a:	699b      	ldr	r3, [r3, #24]
 800a08c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a090:	d109      	bne.n	800a0a6 <HAL_SPI_TransmitReceive_DMA+0x11a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a098:	b29b      	uxth	r3, r3
 800a09a:	3301      	adds	r3, #1
 800a09c:	105b      	asrs	r3, r3, #1
 800a09e:	b29a      	uxth	r2, r3
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0aa:	699b      	ldr	r3, [r3, #24]
 800a0ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0b0:	d109      	bne.n	800a0c6 <HAL_SPI_TransmitReceive_DMA+0x13a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	3303      	adds	r3, #3
 800a0bc:	109b      	asrs	r3, r3, #2
 800a0be:	b29a      	uxth	r2, r3
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a0ca:	699b      	ldr	r3, [r3, #24]
 800a0cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a0d0:	d109      	bne.n	800a0e6 <HAL_SPI_TransmitReceive_DMA+0x15a>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	3301      	adds	r3, #1
 800a0dc:	105b      	asrs	r3, r3, #1
 800a0de:	b29a      	uxth	r2, r3
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a0ea:	699b      	ldr	r3, [r3, #24]
 800a0ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0f0:	d12e      	bne.n	800a150 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	3303      	adds	r3, #3
 800a0fc:	109b      	asrs	r3, r3, #2
 800a0fe:	b29a      	uxth	r2, r3
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a106:	e023      	b.n	800a150 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	68db      	ldr	r3, [r3, #12]
 800a10c:	2b0f      	cmp	r3, #15
 800a10e:	d81f      	bhi.n	800a150 <HAL_SPI_TransmitReceive_DMA+0x1c4>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a114:	699b      	ldr	r3, [r3, #24]
 800a116:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a11a:	d109      	bne.n	800a130 <HAL_SPI_TransmitReceive_DMA+0x1a4>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a122:	b29b      	uxth	r3, r3
 800a124:	3301      	adds	r3, #1
 800a126:	105b      	asrs	r3, r3, #1
 800a128:	b29a      	uxth	r2, r3
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a134:	699b      	ldr	r3, [r3, #24]
 800a136:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a13a:	d109      	bne.n	800a150 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a142:	b29b      	uxth	r3, r3
 800a144:	3301      	adds	r3, #1
 800a146:	105b      	asrs	r3, r3, #1
 800a148:	b29a      	uxth	r2, r3
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a154:	4a5c      	ldr	r2, [pc, #368]	@ (800a2c8 <HAL_SPI_TransmitReceive_DMA+0x33c>)
 800a156:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a15c:	4a5b      	ldr	r2, [pc, #364]	@ (800a2cc <HAL_SPI_TransmitReceive_DMA+0x340>)
 800a15e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a164:	4a5a      	ldr	r2, [pc, #360]	@ (800a2d0 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800a166:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a16c:	2200      	movs	r2, #0
 800a16e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	3330      	adds	r3, #48	@ 0x30
 800a17a:	4619      	mov	r1, r3
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a180:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a188:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800a18a:	f7fa fa57 	bl	800463c <HAL_DMA_Start_IT>
 800a18e:	4603      	mov	r3, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d011      	beq.n	800a1b8 <HAL_SPI_TransmitReceive_DMA+0x22c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a19a:	f043 0210 	orr.w	r2, r3, #16
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	e083      	b.n	800a2c0 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	689a      	ldr	r2, [r3, #8]
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a1c6:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a1dc:	2200      	movs	r2, #0
 800a1de:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a1e4:	4a3a      	ldr	r2, [pc, #232]	@ (800a2d0 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800a1e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	3320      	adds	r3, #32
 800a1f8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a200:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a202:	f7fa fa1b 	bl	800463c <HAL_DMA_Start_IT>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d016      	beq.n	800a23a <HAL_SPI_TransmitReceive_DMA+0x2ae>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a210:	4618      	mov	r0, r3
 800a212:	f7fa fc7d 	bl	8004b10 <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a21c:	f043 0210 	orr.w	r2, r3, #16
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2201      	movs	r2, #1
 800a22a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2200      	movs	r2, #0
 800a232:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800a236:	2301      	movs	r3, #1
 800a238:	e042      	b.n	800a2c0 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a23e:	69db      	ldr	r3, [r3, #28]
 800a240:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a244:	d108      	bne.n	800a258 <HAL_SPI_TransmitReceive_DMA+0x2cc>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	6859      	ldr	r1, [r3, #4]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	4b20      	ldr	r3, [pc, #128]	@ (800a2d4 <HAL_SPI_TransmitReceive_DMA+0x348>)
 800a252:	400b      	ands	r3, r1
 800a254:	6053      	str	r3, [r2, #4]
 800a256:	e009      	b.n	800a26c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	685a      	ldr	r2, [r3, #4]
 800a25e:	4b1d      	ldr	r3, [pc, #116]	@ (800a2d4 <HAL_SPI_TransmitReceive_DMA+0x348>)
 800a260:	4013      	ands	r3, r2
 800a262:	8879      	ldrh	r1, [r7, #2]
 800a264:	68fa      	ldr	r2, [r7, #12]
 800a266:	6812      	ldr	r2, [r2, #0]
 800a268:	430b      	orrs	r3, r1
 800a26a:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	689a      	ldr	r2, [r3, #8]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a27a:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	691a      	ldr	r2, [r3, #16]
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 800a28a:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f042 0201 	orr.w	r2, r2, #1
 800a29a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a2a4:	d107      	bne.n	800a2b6 <HAL_SPI_TransmitReceive_DMA+0x32a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a2b4:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a2be:	2300      	movs	r3, #0
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3710      	adds	r7, #16
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}
 800a2c8:	0800a949 	.word	0x0800a949
 800a2cc:	0800a8e7 	.word	0x0800a8e7
 800a2d0:	0800a965 	.word	0x0800a965
 800a2d4:	ffff0000 	.word	0xffff0000

0800a2d8 <HAL_SPI_Abort>:
  *          + Set handle State to READY.
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;

  __IO uint32_t count;

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d101      	bne.n	800a2ee <HAL_SPI_Abort+0x16>
 800a2ea:	2302      	movs	r3, #2
 800a2ec:	e0d9      	b.n	800a4a2 <HAL_SPI_Abort+0x1ca>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2201      	movs	r2, #1
 800a2f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set hspi->state to aborting to avoid any interaction */
  hspi->State = HAL_SPI_STATE_ABORT;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2207      	movs	r2, #7
 800a2fa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Initialized local variable  */
  errorcode = HAL_OK;
 800a2fe:	2300      	movs	r3, #0
 800a300:	73fb      	strb	r3, [r7, #15]
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800a302:	4b6a      	ldr	r3, [pc, #424]	@ (800a4ac <HAL_SPI_Abort+0x1d4>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a6a      	ldr	r2, [pc, #424]	@ (800a4b0 <HAL_SPI_Abort+0x1d8>)
 800a308:	fba2 2303 	umull	r2, r3, r2, r3
 800a30c:	0a5b      	lsrs	r3, r3, #9
 800a30e:	2264      	movs	r2, #100	@ 0x64
 800a310:	fb02 f303 	mul.w	r3, r2, r3
 800a314:	60bb      	str	r3, [r7, #8]

  /* If master communication on going, make sure current frame is done before closing the connection */
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a320:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a324:	d15b      	bne.n	800a3de <HAL_SPI_Abort+0x106>
  {
    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	691a      	ldr	r2, [r3, #16]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f022 0208 	bic.w	r2, r2, #8
 800a334:	611a      	str	r2, [r3, #16]
    do
    {
      count--;
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	3b01      	subs	r3, #1
 800a33a:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d108      	bne.n	800a354 <HAL_SPI_Abort+0x7c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a348:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800a352:	e006      	b.n	800a362 <HAL_SPI_Abort+0x8a>
      }
    } while (HAL_IS_BIT_SET(hspi->Instance->IER, SPI_IT_EOT));
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	691b      	ldr	r3, [r3, #16]
 800a35a:	f003 0308 	and.w	r3, r3, #8
 800a35e:	2b08      	cmp	r3, #8
 800a360:	d0e9      	beq.n	800a336 <HAL_SPI_Abort+0x5e>

    /* Request a Suspend transfer */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSUSP);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a370:	601a      	str	r2, [r3, #0]
    do
    {
      count--;
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	3b01      	subs	r3, #1
 800a376:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d108      	bne.n	800a390 <HAL_SPI_Abort+0xb8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a384:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800a38e:	e007      	b.n	800a3a0 <HAL_SPI_Abort+0xc8>
      }
    } while (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART));
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a39a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a39e:	d0e8      	beq.n	800a372 <HAL_SPI_Abort+0x9a>

    /* Clear SUSP flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	699a      	ldr	r2, [r3, #24]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a3ae:	619a      	str	r2, [r3, #24]
    do
    {
      count--;
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	3b01      	subs	r3, #1
 800a3b4:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d108      	bne.n	800a3ce <HAL_SPI_Abort+0xf6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a3c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800a3cc:	e007      	b.n	800a3de <HAL_SPI_Abort+0x106>
      }
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_SUSP));
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	695b      	ldr	r3, [r3, #20]
 800a3d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a3d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3dc:	d0e8      	beq.n	800a3b0 <HAL_SPI_Abort+0xd8>
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN))
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	689b      	ldr	r3, [r3, #8]
 800a3e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a3e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a3ec:	d11b      	bne.n	800a426 <HAL_SPI_Abort+0x14e>
  {
    if (hspi->hdmatx != NULL)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d017      	beq.n	800a426 <HAL_SPI_Abort+0x14e>
    {
      /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
      hspi->hdmatx->XferAbortCallback = NULL;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a402:	4618      	mov	r0, r3
 800a404:	f7fa fb84 	bl	8004b10 <HAL_DMA_Abort>
 800a408:	4603      	mov	r3, r0
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d00b      	beq.n	800a426 <HAL_SPI_Abort+0x14e>
      {
        if (HAL_DMA_GetError(hspi->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a412:	4618      	mov	r0, r3
 800a414:	f7fc f80a 	bl	800642c <HAL_DMA_GetError>
 800a418:	4603      	mov	r3, r0
 800a41a:	2b20      	cmp	r3, #32
 800a41c:	d103      	bne.n	800a426 <HAL_SPI_Abort+0x14e>
        {
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2240      	movs	r2, #64	@ 0x40
 800a422:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a430:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a434:	d11b      	bne.n	800a46e <HAL_SPI_Abort+0x196>
  {
    if (hspi->hdmarx != NULL)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d017      	beq.n	800a46e <HAL_SPI_Abort+0x196>
    {
      /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
      hspi->hdmarx->XferAbortCallback = NULL;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a442:	2200      	movs	r2, #0
 800a444:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7fa fb60 	bl	8004b10 <HAL_DMA_Abort>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00b      	beq.n	800a46e <HAL_SPI_Abort+0x196>
      {
        if (HAL_DMA_GetError(hspi->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a45a:	4618      	mov	r0, r3
 800a45c:	f7fb ffe6 	bl	800642c <HAL_DMA_GetError>
 800a460:	4603      	mov	r3, r0
 800a462:	2b20      	cmp	r3, #32
 800a464:	d103      	bne.n	800a46e <HAL_SPI_Abort+0x196>
        {
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2240      	movs	r2, #64	@ 0x40
 800a46a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
  }

  /* Proceed with abort procedure */
  SPI_AbortTransfer(hspi);
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 fab6 	bl	800a9e0 <SPI_AbortTransfer>

  /* Check error during Abort procedure */
  if (HAL_IS_BIT_SET(hspi->ErrorCode, HAL_SPI_ERROR_ABORT))
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a47a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a47e:	2b40      	cmp	r3, #64	@ 0x40
 800a480:	d102      	bne.n	800a488 <HAL_SPI_Abort+0x1b0>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 800a482:	2301      	movs	r3, #1
 800a484:	73fb      	strb	r3, [r7, #15]
 800a486:	e003      	b.n	800a490 <HAL_SPI_Abort+0x1b8>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2201      	movs	r2, #1
 800a494:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2200      	movs	r2, #0
 800a49c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return errorcode;
 800a4a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop
 800a4ac:	24000004 	.word	0x24000004
 800a4b0:	057619f1 	.word	0x057619f1

0800a4b4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b08a      	sub	sp, #40	@ 0x28
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	691b      	ldr	r3, [r3, #16]
 800a4c2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	695b      	ldr	r3, [r3, #20]
 800a4ca:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800a4cc:	6a3a      	ldr	r2, [r7, #32]
 800a4ce:	69fb      	ldr	r3, [r7, #28]
 800a4d0:	4013      	ands	r3, r2
 800a4d2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a4e6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	3330      	adds	r3, #48	@ 0x30
 800a4ee:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d010      	beq.n	800a51c <HAL_SPI_IRQHandler+0x68>
 800a4fa:	6a3b      	ldr	r3, [r7, #32]
 800a4fc:	f003 0308 	and.w	r3, r3, #8
 800a500:	2b00      	cmp	r3, #0
 800a502:	d00b      	beq.n	800a51c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	699a      	ldr	r2, [r3, #24]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a512:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 f9b9 	bl	800a88c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800a51a:	e192      	b.n	800a842 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a522:	2b00      	cmp	r3, #0
 800a524:	d113      	bne.n	800a54e <HAL_SPI_IRQHandler+0x9a>
 800a526:	69bb      	ldr	r3, [r7, #24]
 800a528:	f003 0320 	and.w	r3, r3, #32
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d10e      	bne.n	800a54e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800a530:	69bb      	ldr	r3, [r7, #24]
 800a532:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a536:	2b00      	cmp	r3, #0
 800a538:	d009      	beq.n	800a54e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	4798      	blx	r3
    hspi->RxISR(hspi);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	4798      	blx	r3
    handled = 1UL;
 800a54a:	2301      	movs	r3, #1
 800a54c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a54e:	69bb      	ldr	r3, [r7, #24]
 800a550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a554:	2b00      	cmp	r3, #0
 800a556:	d10f      	bne.n	800a578 <HAL_SPI_IRQHandler+0xc4>
 800a558:	69bb      	ldr	r3, [r7, #24]
 800a55a:	f003 0301 	and.w	r3, r3, #1
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d00a      	beq.n	800a578 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d105      	bne.n	800a578 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	4798      	blx	r3
    handled = 1UL;
 800a574:	2301      	movs	r3, #1
 800a576:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a578:	69bb      	ldr	r3, [r7, #24]
 800a57a:	f003 0320 	and.w	r3, r3, #32
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d10f      	bne.n	800a5a2 <HAL_SPI_IRQHandler+0xee>
 800a582:	69bb      	ldr	r3, [r7, #24]
 800a584:	f003 0302 	and.w	r3, r3, #2
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d00a      	beq.n	800a5a2 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a58c:	69bb      	ldr	r3, [r7, #24]
 800a58e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a592:	2b00      	cmp	r3, #0
 800a594:	d105      	bne.n	800a5a2 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	4798      	blx	r3
    handled = 1UL;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800a5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	f040 8147 	bne.w	800a838 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	f003 0308 	and.w	r3, r3, #8
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	f000 808b 	beq.w	800a6cc <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	699a      	ldr	r2, [r3, #24]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f042 0208 	orr.w	r2, r2, #8
 800a5c4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	699a      	ldr	r2, [r3, #24]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f042 0210 	orr.w	r2, r2, #16
 800a5d4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	699a      	ldr	r2, [r3, #24]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a5e4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	691a      	ldr	r2, [r3, #16]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f022 0208 	bic.w	r2, r2, #8
 800a5f4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a600:	2b00      	cmp	r3, #0
 800a602:	d13d      	bne.n	800a680 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800a604:	e036      	b.n	800a674 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	2b0f      	cmp	r3, #15
 800a60c:	d90b      	bls.n	800a626 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a616:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a618:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a61e:	1d1a      	adds	r2, r3, #4
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	665a      	str	r2, [r3, #100]	@ 0x64
 800a624:	e01d      	b.n	800a662 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	2b07      	cmp	r3, #7
 800a62c:	d90b      	bls.n	800a646 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a632:	68fa      	ldr	r2, [r7, #12]
 800a634:	8812      	ldrh	r2, [r2, #0]
 800a636:	b292      	uxth	r2, r2
 800a638:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a63e:	1c9a      	adds	r2, r3, #2
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	665a      	str	r2, [r3, #100]	@ 0x64
 800a644:	e00d      	b.n	800a662 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a652:	7812      	ldrb	r2, [r2, #0]
 800a654:	b2d2      	uxtb	r2, r2
 800a656:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a65c:	1c5a      	adds	r2, r3, #1
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a668:	b29b      	uxth	r3, r3
 800a66a:	3b01      	subs	r3, #1
 800a66c:	b29a      	uxth	r2, r3
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d1c2      	bne.n	800a606 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 fa11 	bl	800aaa8 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2201      	movs	r2, #1
 800a68a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a694:	2b00      	cmp	r3, #0
 800a696:	d003      	beq.n	800a6a0 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f003 facb 	bl	800dc34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a69e:	e0d0      	b.n	800a842 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a6a0:	7cfb      	ldrb	r3, [r7, #19]
 800a6a2:	2b05      	cmp	r3, #5
 800a6a4:	d103      	bne.n	800a6ae <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f003 fa50 	bl	800db4c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800a6ac:	e0c6      	b.n	800a83c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a6ae:	7cfb      	ldrb	r3, [r7, #19]
 800a6b0:	2b04      	cmp	r3, #4
 800a6b2:	d103      	bne.n	800a6bc <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 f8cb 	bl	800a850 <HAL_SPI_RxCpltCallback>
    return;
 800a6ba:	e0bf      	b.n	800a83c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a6bc:	7cfb      	ldrb	r3, [r7, #19]
 800a6be:	2b03      	cmp	r3, #3
 800a6c0:	f040 80bc 	bne.w	800a83c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f003 fa27 	bl	800db18 <HAL_SPI_TxCpltCallback>
    return;
 800a6ca:	e0b7      	b.n	800a83c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a6cc:	69bb      	ldr	r3, [r7, #24]
 800a6ce:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	f000 80b5 	beq.w	800a842 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a6d8:	69bb      	ldr	r3, [r7, #24]
 800a6da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00f      	beq.n	800a702 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6e8:	f043 0204 	orr.w	r2, r3, #4
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	699a      	ldr	r2, [r3, #24]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a700:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a702:	69bb      	ldr	r3, [r7, #24]
 800a704:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d00f      	beq.n	800a72c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a712:	f043 0201 	orr.w	r2, r3, #1
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	699a      	ldr	r2, [r3, #24]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a72a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a72c:	69bb      	ldr	r3, [r7, #24]
 800a72e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a732:	2b00      	cmp	r3, #0
 800a734:	d00f      	beq.n	800a756 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a73c:	f043 0208 	orr.w	r2, r3, #8
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	699a      	ldr	r2, [r3, #24]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a754:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a756:	69bb      	ldr	r3, [r7, #24]
 800a758:	f003 0320 	and.w	r3, r3, #32
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d00f      	beq.n	800a780 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a766:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	699a      	ldr	r2, [r3, #24]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f042 0220 	orr.w	r2, r2, #32
 800a77e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a786:	2b00      	cmp	r3, #0
 800a788:	d05a      	beq.n	800a840 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f022 0201 	bic.w	r2, r2, #1
 800a798:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	6919      	ldr	r1, [r3, #16]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	4b28      	ldr	r3, [pc, #160]	@ (800a848 <HAL_SPI_IRQHandler+0x394>)
 800a7a6:	400b      	ands	r3, r1
 800a7a8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a7b0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a7b4:	d138      	bne.n	800a828 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	689a      	ldr	r2, [r3, #8]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a7c4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d013      	beq.n	800a7f6 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a7d2:	4a1e      	ldr	r2, [pc, #120]	@ (800a84c <HAL_SPI_IRQHandler+0x398>)
 800a7d4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7fa fcb6 	bl	800514c <HAL_DMA_Abort_IT>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d007      	beq.n	800a7f6 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a7ec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d020      	beq.n	800a840 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a802:	4a12      	ldr	r2, [pc, #72]	@ (800a84c <HAL_SPI_IRQHandler+0x398>)
 800a804:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a80a:	4618      	mov	r0, r3
 800a80c:	f7fa fc9e 	bl	800514c <HAL_DMA_Abort_IT>
 800a810:	4603      	mov	r3, r0
 800a812:	2b00      	cmp	r3, #0
 800a814:	d014      	beq.n	800a840 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a81c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a826:	e00b      	b.n	800a840 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2201      	movs	r2, #1
 800a82c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f003 f9ff 	bl	800dc34 <HAL_SPI_ErrorCallback>
    return;
 800a836:	e003      	b.n	800a840 <HAL_SPI_IRQHandler+0x38c>
    return;
 800a838:	bf00      	nop
 800a83a:	e002      	b.n	800a842 <HAL_SPI_IRQHandler+0x38e>
    return;
 800a83c:	bf00      	nop
 800a83e:	e000      	b.n	800a842 <HAL_SPI_IRQHandler+0x38e>
    return;
 800a840:	bf00      	nop
  }
}
 800a842:	3728      	adds	r7, #40	@ 0x28
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	fffffc94 	.word	0xfffffc94
 800a84c:	0800a9ab 	.word	0x0800a9ab

0800a850 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a850:	b480      	push	{r7}
 800a852:	b083      	sub	sp, #12
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a858:	bf00      	nop
 800a85a:	370c      	adds	r7, #12
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a86c:	bf00      	nop
 800a86e:	370c      	adds	r7, #12
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800a880:	bf00      	nop
 800a882:	370c      	adds	r7, #12
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a88c:	b480      	push	{r7}
 800a88e:	b083      	sub	sp, #12
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800a894:	bf00      	nop
 800a896:	370c      	adds	r7, #12
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8ac:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	2b07      	cmp	r3, #7
 800a8b8:	d011      	beq.n	800a8de <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a8be:	69db      	ldr	r3, [r3, #28]
 800a8c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8c4:	d103      	bne.n	800a8ce <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 800a8c6:	68f8      	ldr	r0, [r7, #12]
 800a8c8:	f003 f926 	bl	800db18 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800a8cc:	e007      	b.n	800a8de <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	691a      	ldr	r2, [r3, #16]
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f042 0208 	orr.w	r2, r2, #8
 800a8dc:	611a      	str	r2, [r3, #16]
}
 800a8de:	bf00      	nop
 800a8e0:	3710      	adds	r7, #16
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b084      	sub	sp, #16
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8f2:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a8fa:	b2db      	uxtb	r3, r3
 800a8fc:	2b07      	cmp	r3, #7
 800a8fe:	d011      	beq.n	800a924 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a904:	69db      	ldr	r3, [r3, #28]
 800a906:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a90a:	d103      	bne.n	800a914 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f003 f91d 	bl	800db4c <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800a912:	e007      	b.n	800a924 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	691a      	ldr	r2, [r3, #16]
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f042 0208 	orr.w	r2, r2, #8
 800a922:	611a      	str	r2, [r3, #16]
}
 800a924:	bf00      	nop
 800a926:	3710      	adds	r7, #16
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a938:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800a93a:	68f8      	ldr	r0, [r7, #12]
 800a93c:	f7ff ff92 	bl	800a864 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a940:	bf00      	nop
 800a942:	3710      	adds	r7, #16
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b084      	sub	sp, #16
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a954:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800a956:	68f8      	ldr	r0, [r7, #12]
 800a958:	f7ff ff8e 	bl	800a878 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a95c:	bf00      	nop
 800a95e:	3710      	adds	r7, #16
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a970:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f7fb fd5a 	bl	800642c <HAL_DMA_GetError>
 800a978:	4603      	mov	r3, r0
 800a97a:	2b02      	cmp	r3, #2
 800a97c:	d011      	beq.n	800a9a2 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800a97e:	68f8      	ldr	r0, [r7, #12]
 800a980:	f000 f892 	bl	800aaa8 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a98a:	f043 0210 	orr.w	r2, r3, #16
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2201      	movs	r2, #1
 800a998:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f003 f949 	bl	800dc34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800a9a2:	bf00      	nop
 800a9a4:	3710      	adds	r7, #16
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b084      	sub	sp, #16
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9b6:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a9d0:	68f8      	ldr	r0, [r7, #12]
 800a9d2:	f003 f92f 	bl	800dc34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a9d6:	bf00      	nop
 800a9d8:	3710      	adds	r7, #16
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}
	...

0800a9e0 <SPI_AbortTransfer>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTransfer(SPI_HandleTypeDef *hspi)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f022 0201 	bic.w	r2, r2, #1
 800a9f6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	6919      	ldr	r1, [r3, #16]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	4b28      	ldr	r3, [pc, #160]	@ (800aaa4 <SPI_AbortTransfer+0xc4>)
 800aa04:	400b      	ands	r3, r1
 800aa06:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Clear the Status flags in the SR register */
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	699a      	ldr	r2, [r3, #24]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f042 0208 	orr.w	r2, r2, #8
 800aa16:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	699a      	ldr	r2, [r3, #24]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f042 0210 	orr.w	r2, r2, #16
 800aa26:	619a      	str	r2, [r3, #24]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	689a      	ldr	r2, [r3, #8]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800aa36:	609a      	str	r2, [r3, #8]

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	699a      	ldr	r2, [r3, #24]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aa46:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	699a      	ldr	r2, [r3, #24]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f042 0220 	orr.w	r2, r2, #32
 800aa56:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	699a      	ldr	r2, [r3, #24]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aa66:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	699a      	ldr	r2, [r3, #24]
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa76:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	699a      	ldr	r2, [r3, #24]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aa86:	619a      	str	r2, [r3, #24]

#if (USE_SPI_CRC != 0U)
  __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
#endif /* USE_SPI_CRC */

  hspi->TxXferCount = (uint16_t)0UL;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2200      	movs	r2, #0
 800aa94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800aa98:	bf00      	nop
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr
 800aaa4:	fffffc90 	.word	0xfffffc90

0800aaa8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b085      	sub	sp, #20
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	695b      	ldr	r3, [r3, #20]
 800aab6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	699a      	ldr	r2, [r3, #24]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f042 0208 	orr.w	r2, r2, #8
 800aac6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	699a      	ldr	r2, [r3, #24]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f042 0210 	orr.w	r2, r2, #16
 800aad6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	681a      	ldr	r2, [r3, #0]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f022 0201 	bic.w	r2, r2, #1
 800aae6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	6919      	ldr	r1, [r3, #16]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	4b3c      	ldr	r3, [pc, #240]	@ (800abe4 <SPI_CloseTransfer+0x13c>)
 800aaf4:	400b      	ands	r3, r1
 800aaf6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	689a      	ldr	r2, [r3, #8]
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800ab06:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	2b04      	cmp	r3, #4
 800ab12:	d014      	beq.n	800ab3e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f003 0320 	and.w	r3, r3, #32
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d00f      	beq.n	800ab3e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab24:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	699a      	ldr	r2, [r3, #24]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f042 0220 	orr.w	r2, r2, #32
 800ab3c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ab44:	b2db      	uxtb	r3, r3
 800ab46:	2b03      	cmp	r3, #3
 800ab48:	d014      	beq.n	800ab74 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00f      	beq.n	800ab74 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab5a:	f043 0204 	orr.w	r2, r3, #4
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	699a      	ldr	r2, [r3, #24]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ab72:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d00f      	beq.n	800ab9e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab84:	f043 0201 	orr.w	r2, r3, #1
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	699a      	ldr	r2, [r3, #24]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ab9c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d00f      	beq.n	800abc8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800abae:	f043 0208 	orr.w	r2, r3, #8
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	699a      	ldr	r2, [r3, #24]
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800abc6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2200      	movs	r2, #0
 800abcc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2200      	movs	r2, #0
 800abd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800abd8:	bf00      	nop
 800abda:	3714      	adds	r7, #20
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr
 800abe4:	fffffc90 	.word	0xfffffc90

0800abe8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800abe8:	b480      	push	{r7}
 800abea:	b085      	sub	sp, #20
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abf4:	095b      	lsrs	r3, r3, #5
 800abf6:	3301      	adds	r3, #1
 800abf8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	68db      	ldr	r3, [r3, #12]
 800abfe:	3301      	adds	r3, #1
 800ac00:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	3307      	adds	r3, #7
 800ac06:	08db      	lsrs	r3, r3, #3
 800ac08:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	fb02 f303 	mul.w	r3, r2, r3
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3714      	adds	r7, #20
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr

0800ac1e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ac1e:	b580      	push	{r7, lr}
 800ac20:	b082      	sub	sp, #8
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d101      	bne.n	800ac30 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	e049      	b.n	800acc4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d106      	bne.n	800ac4a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f7f8 fd9d 	bl	8003784 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2202      	movs	r2, #2
 800ac4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681a      	ldr	r2, [r3, #0]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	3304      	adds	r3, #4
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	4610      	mov	r0, r2
 800ac5e:	f000 fbb7 	bl	800b3d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2201      	movs	r2, #1
 800ac66:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2201      	movs	r2, #1
 800ac76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2201      	movs	r2, #1
 800ac86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2201      	movs	r2, #1
 800ac96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2201      	movs	r2, #1
 800aca6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2201      	movs	r2, #1
 800acae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2201      	movs	r2, #1
 800acb6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2201      	movs	r2, #1
 800acbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800acc2:	2300      	movs	r3, #0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3708      	adds	r7, #8
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800accc:	b480      	push	{r7}
 800acce:	b085      	sub	sp, #20
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800acda:	b2db      	uxtb	r3, r3
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d001      	beq.n	800ace4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ace0:	2301      	movs	r3, #1
 800ace2:	e056      	b.n	800ad92 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2202      	movs	r2, #2
 800ace8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a2b      	ldr	r2, [pc, #172]	@ (800ada0 <HAL_TIM_Base_Start+0xd4>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d02c      	beq.n	800ad50 <HAL_TIM_Base_Start+0x84>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acfe:	d027      	beq.n	800ad50 <HAL_TIM_Base_Start+0x84>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4a27      	ldr	r2, [pc, #156]	@ (800ada4 <HAL_TIM_Base_Start+0xd8>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d022      	beq.n	800ad50 <HAL_TIM_Base_Start+0x84>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	4a26      	ldr	r2, [pc, #152]	@ (800ada8 <HAL_TIM_Base_Start+0xdc>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d01d      	beq.n	800ad50 <HAL_TIM_Base_Start+0x84>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4a24      	ldr	r2, [pc, #144]	@ (800adac <HAL_TIM_Base_Start+0xe0>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d018      	beq.n	800ad50 <HAL_TIM_Base_Start+0x84>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4a23      	ldr	r2, [pc, #140]	@ (800adb0 <HAL_TIM_Base_Start+0xe4>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d013      	beq.n	800ad50 <HAL_TIM_Base_Start+0x84>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4a21      	ldr	r2, [pc, #132]	@ (800adb4 <HAL_TIM_Base_Start+0xe8>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d00e      	beq.n	800ad50 <HAL_TIM_Base_Start+0x84>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4a20      	ldr	r2, [pc, #128]	@ (800adb8 <HAL_TIM_Base_Start+0xec>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d009      	beq.n	800ad50 <HAL_TIM_Base_Start+0x84>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a1e      	ldr	r2, [pc, #120]	@ (800adbc <HAL_TIM_Base_Start+0xf0>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d004      	beq.n	800ad50 <HAL_TIM_Base_Start+0x84>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4a1d      	ldr	r2, [pc, #116]	@ (800adc0 <HAL_TIM_Base_Start+0xf4>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d115      	bne.n	800ad7c <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	689a      	ldr	r2, [r3, #8]
 800ad56:	4b1b      	ldr	r3, [pc, #108]	@ (800adc4 <HAL_TIM_Base_Start+0xf8>)
 800ad58:	4013      	ands	r3, r2
 800ad5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2b06      	cmp	r3, #6
 800ad60:	d015      	beq.n	800ad8e <HAL_TIM_Base_Start+0xc2>
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad68:	d011      	beq.n	800ad8e <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	681a      	ldr	r2, [r3, #0]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f042 0201 	orr.w	r2, r2, #1
 800ad78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad7a:	e008      	b.n	800ad8e <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f042 0201 	orr.w	r2, r2, #1
 800ad8a:	601a      	str	r2, [r3, #0]
 800ad8c:	e000      	b.n	800ad90 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ad90:	2300      	movs	r3, #0
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3714      	adds	r7, #20
 800ad96:	46bd      	mov	sp, r7
 800ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9c:	4770      	bx	lr
 800ad9e:	bf00      	nop
 800ada0:	40010000 	.word	0x40010000
 800ada4:	40000400 	.word	0x40000400
 800ada8:	40000800 	.word	0x40000800
 800adac:	40000c00 	.word	0x40000c00
 800adb0:	40010400 	.word	0x40010400
 800adb4:	40001800 	.word	0x40001800
 800adb8:	40014000 	.word	0x40014000
 800adbc:	4000e000 	.word	0x4000e000
 800adc0:	4000e400 	.word	0x4000e400
 800adc4:	00010007 	.word	0x00010007

0800adc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800adc8:	b480      	push	{r7}
 800adca:	b085      	sub	sp, #20
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800add6:	b2db      	uxtb	r3, r3
 800add8:	2b01      	cmp	r3, #1
 800adda:	d001      	beq.n	800ade0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800addc:	2301      	movs	r3, #1
 800adde:	e05e      	b.n	800ae9e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2202      	movs	r2, #2
 800ade4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	68da      	ldr	r2, [r3, #12]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f042 0201 	orr.w	r2, r2, #1
 800adf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a2b      	ldr	r2, [pc, #172]	@ (800aeac <HAL_TIM_Base_Start_IT+0xe4>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d02c      	beq.n	800ae5c <HAL_TIM_Base_Start_IT+0x94>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae0a:	d027      	beq.n	800ae5c <HAL_TIM_Base_Start_IT+0x94>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4a27      	ldr	r2, [pc, #156]	@ (800aeb0 <HAL_TIM_Base_Start_IT+0xe8>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d022      	beq.n	800ae5c <HAL_TIM_Base_Start_IT+0x94>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4a26      	ldr	r2, [pc, #152]	@ (800aeb4 <HAL_TIM_Base_Start_IT+0xec>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d01d      	beq.n	800ae5c <HAL_TIM_Base_Start_IT+0x94>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a24      	ldr	r2, [pc, #144]	@ (800aeb8 <HAL_TIM_Base_Start_IT+0xf0>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d018      	beq.n	800ae5c <HAL_TIM_Base_Start_IT+0x94>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4a23      	ldr	r2, [pc, #140]	@ (800aebc <HAL_TIM_Base_Start_IT+0xf4>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d013      	beq.n	800ae5c <HAL_TIM_Base_Start_IT+0x94>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4a21      	ldr	r2, [pc, #132]	@ (800aec0 <HAL_TIM_Base_Start_IT+0xf8>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d00e      	beq.n	800ae5c <HAL_TIM_Base_Start_IT+0x94>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	4a20      	ldr	r2, [pc, #128]	@ (800aec4 <HAL_TIM_Base_Start_IT+0xfc>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d009      	beq.n	800ae5c <HAL_TIM_Base_Start_IT+0x94>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4a1e      	ldr	r2, [pc, #120]	@ (800aec8 <HAL_TIM_Base_Start_IT+0x100>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d004      	beq.n	800ae5c <HAL_TIM_Base_Start_IT+0x94>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	4a1d      	ldr	r2, [pc, #116]	@ (800aecc <HAL_TIM_Base_Start_IT+0x104>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d115      	bne.n	800ae88 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	689a      	ldr	r2, [r3, #8]
 800ae62:	4b1b      	ldr	r3, [pc, #108]	@ (800aed0 <HAL_TIM_Base_Start_IT+0x108>)
 800ae64:	4013      	ands	r3, r2
 800ae66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	2b06      	cmp	r3, #6
 800ae6c:	d015      	beq.n	800ae9a <HAL_TIM_Base_Start_IT+0xd2>
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae74:	d011      	beq.n	800ae9a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f042 0201 	orr.w	r2, r2, #1
 800ae84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae86:	e008      	b.n	800ae9a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	681a      	ldr	r2, [r3, #0]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f042 0201 	orr.w	r2, r2, #1
 800ae96:	601a      	str	r2, [r3, #0]
 800ae98:	e000      	b.n	800ae9c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ae9c:	2300      	movs	r3, #0
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3714      	adds	r7, #20
 800aea2:	46bd      	mov	sp, r7
 800aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea8:	4770      	bx	lr
 800aeaa:	bf00      	nop
 800aeac:	40010000 	.word	0x40010000
 800aeb0:	40000400 	.word	0x40000400
 800aeb4:	40000800 	.word	0x40000800
 800aeb8:	40000c00 	.word	0x40000c00
 800aebc:	40010400 	.word	0x40010400
 800aec0:	40001800 	.word	0x40001800
 800aec4:	40014000 	.word	0x40014000
 800aec8:	4000e000 	.word	0x4000e000
 800aecc:	4000e400 	.word	0x4000e400
 800aed0:	00010007 	.word	0x00010007

0800aed4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b083      	sub	sp, #12
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	68da      	ldr	r2, [r3, #12]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f022 0201 	bic.w	r2, r2, #1
 800aeea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	6a1a      	ldr	r2, [r3, #32]
 800aef2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800aef6:	4013      	ands	r3, r2
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d10f      	bne.n	800af1c <HAL_TIM_Base_Stop_IT+0x48>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	6a1a      	ldr	r2, [r3, #32]
 800af02:	f240 4344 	movw	r3, #1092	@ 0x444
 800af06:	4013      	ands	r3, r2
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d107      	bne.n	800af1c <HAL_TIM_Base_Stop_IT+0x48>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	681a      	ldr	r2, [r3, #0]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f022 0201 	bic.w	r2, r2, #1
 800af1a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2201      	movs	r2, #1
 800af20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800af24:	2300      	movs	r3, #0
}
 800af26:	4618      	mov	r0, r3
 800af28:	370c      	adds	r7, #12
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr

0800af32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800af32:	b580      	push	{r7, lr}
 800af34:	b084      	sub	sp, #16
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	68db      	ldr	r3, [r3, #12]
 800af40:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	691b      	ldr	r3, [r3, #16]
 800af48:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	f003 0302 	and.w	r3, r3, #2
 800af50:	2b00      	cmp	r3, #0
 800af52:	d020      	beq.n	800af96 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f003 0302 	and.w	r3, r3, #2
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d01b      	beq.n	800af96 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f06f 0202 	mvn.w	r2, #2
 800af66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2201      	movs	r2, #1
 800af6c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	699b      	ldr	r3, [r3, #24]
 800af74:	f003 0303 	and.w	r3, r3, #3
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d003      	beq.n	800af84 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f000 fa09 	bl	800b394 <HAL_TIM_IC_CaptureCallback>
 800af82:	e005      	b.n	800af90 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f000 f9fb 	bl	800b380 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 fa0c 	bl	800b3a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2200      	movs	r2, #0
 800af94:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	f003 0304 	and.w	r3, r3, #4
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d020      	beq.n	800afe2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f003 0304 	and.w	r3, r3, #4
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d01b      	beq.n	800afe2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f06f 0204 	mvn.w	r2, #4
 800afb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2202      	movs	r2, #2
 800afb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	699b      	ldr	r3, [r3, #24]
 800afc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d003      	beq.n	800afd0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f000 f9e3 	bl	800b394 <HAL_TIM_IC_CaptureCallback>
 800afce:	e005      	b.n	800afdc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 f9d5 	bl	800b380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 f9e6 	bl	800b3a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2200      	movs	r2, #0
 800afe0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	f003 0308 	and.w	r3, r3, #8
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d020      	beq.n	800b02e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f003 0308 	and.w	r3, r3, #8
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d01b      	beq.n	800b02e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f06f 0208 	mvn.w	r2, #8
 800affe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2204      	movs	r2, #4
 800b004:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	69db      	ldr	r3, [r3, #28]
 800b00c:	f003 0303 	and.w	r3, r3, #3
 800b010:	2b00      	cmp	r3, #0
 800b012:	d003      	beq.n	800b01c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f000 f9bd 	bl	800b394 <HAL_TIM_IC_CaptureCallback>
 800b01a:	e005      	b.n	800b028 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f000 f9af 	bl	800b380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 f9c0 	bl	800b3a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2200      	movs	r2, #0
 800b02c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	f003 0310 	and.w	r3, r3, #16
 800b034:	2b00      	cmp	r3, #0
 800b036:	d020      	beq.n	800b07a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f003 0310 	and.w	r3, r3, #16
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d01b      	beq.n	800b07a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f06f 0210 	mvn.w	r2, #16
 800b04a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2208      	movs	r2, #8
 800b050:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	69db      	ldr	r3, [r3, #28]
 800b058:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d003      	beq.n	800b068 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 f997 	bl	800b394 <HAL_TIM_IC_CaptureCallback>
 800b066:	e005      	b.n	800b074 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f000 f989 	bl	800b380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 f99a 	bl	800b3a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2200      	movs	r2, #0
 800b078:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	f003 0301 	and.w	r3, r3, #1
 800b080:	2b00      	cmp	r3, #0
 800b082:	d00c      	beq.n	800b09e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f003 0301 	and.w	r3, r3, #1
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d007      	beq.n	800b09e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f06f 0201 	mvn.w	r2, #1
 800b096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f002 ff0d 	bl	800deb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d104      	bne.n	800b0b2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d00c      	beq.n	800b0cc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d007      	beq.n	800b0cc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b0c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 fb78 	bl	800b7bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d00c      	beq.n	800b0f0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d007      	beq.n	800b0f0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b0e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f000 fb70 	bl	800b7d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d00c      	beq.n	800b114 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b100:	2b00      	cmp	r3, #0
 800b102:	d007      	beq.n	800b114 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b10c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f000 f954 	bl	800b3bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	f003 0320 	and.w	r3, r3, #32
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d00c      	beq.n	800b138 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f003 0320 	and.w	r3, r3, #32
 800b124:	2b00      	cmp	r3, #0
 800b126:	d007      	beq.n	800b138 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f06f 0220 	mvn.w	r2, #32
 800b130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f000 fb38 	bl	800b7a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b138:	bf00      	nop
 800b13a:	3710      	adds	r7, #16
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800b140:	b480      	push	{r7}
 800b142:	b083      	sub	sp, #12
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b150:	2b01      	cmp	r3, #1
 800b152:	d101      	bne.n	800b158 <HAL_TIM_GenerateEvent+0x18>
 800b154:	2302      	movs	r3, #2
 800b156:	e014      	b.n	800b182 <HAL_TIM_GenerateEvent+0x42>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2201      	movs	r2, #1
 800b15c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2202      	movs	r2, #2
 800b164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	683a      	ldr	r2, [r7, #0]
 800b16e:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2201      	movs	r2, #1
 800b174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2200      	movs	r2, #0
 800b17c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800b180:	2300      	movs	r3, #0
}
 800b182:	4618      	mov	r0, r3
 800b184:	370c      	adds	r7, #12
 800b186:	46bd      	mov	sp, r7
 800b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18c:	4770      	bx	lr
	...

0800b190 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b084      	sub	sp, #16
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b19a:	2300      	movs	r3, #0
 800b19c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d101      	bne.n	800b1ac <HAL_TIM_ConfigClockSource+0x1c>
 800b1a8:	2302      	movs	r3, #2
 800b1aa:	e0dc      	b.n	800b366 <HAL_TIM_ConfigClockSource+0x1d6>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2202      	movs	r2, #2
 800b1b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b1c4:	68ba      	ldr	r2, [r7, #8]
 800b1c6:	4b6a      	ldr	r3, [pc, #424]	@ (800b370 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b1c8:	4013      	ands	r3, r2
 800b1ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b1d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	68ba      	ldr	r2, [r7, #8]
 800b1da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4a64      	ldr	r2, [pc, #400]	@ (800b374 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	f000 80a9 	beq.w	800b33a <HAL_TIM_ConfigClockSource+0x1aa>
 800b1e8:	4a62      	ldr	r2, [pc, #392]	@ (800b374 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	f200 80ae 	bhi.w	800b34c <HAL_TIM_ConfigClockSource+0x1bc>
 800b1f0:	4a61      	ldr	r2, [pc, #388]	@ (800b378 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	f000 80a1 	beq.w	800b33a <HAL_TIM_ConfigClockSource+0x1aa>
 800b1f8:	4a5f      	ldr	r2, [pc, #380]	@ (800b378 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	f200 80a6 	bhi.w	800b34c <HAL_TIM_ConfigClockSource+0x1bc>
 800b200:	4a5e      	ldr	r2, [pc, #376]	@ (800b37c <HAL_TIM_ConfigClockSource+0x1ec>)
 800b202:	4293      	cmp	r3, r2
 800b204:	f000 8099 	beq.w	800b33a <HAL_TIM_ConfigClockSource+0x1aa>
 800b208:	4a5c      	ldr	r2, [pc, #368]	@ (800b37c <HAL_TIM_ConfigClockSource+0x1ec>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	f200 809e 	bhi.w	800b34c <HAL_TIM_ConfigClockSource+0x1bc>
 800b210:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b214:	f000 8091 	beq.w	800b33a <HAL_TIM_ConfigClockSource+0x1aa>
 800b218:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b21c:	f200 8096 	bhi.w	800b34c <HAL_TIM_ConfigClockSource+0x1bc>
 800b220:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b224:	f000 8089 	beq.w	800b33a <HAL_TIM_ConfigClockSource+0x1aa>
 800b228:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b22c:	f200 808e 	bhi.w	800b34c <HAL_TIM_ConfigClockSource+0x1bc>
 800b230:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b234:	d03e      	beq.n	800b2b4 <HAL_TIM_ConfigClockSource+0x124>
 800b236:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b23a:	f200 8087 	bhi.w	800b34c <HAL_TIM_ConfigClockSource+0x1bc>
 800b23e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b242:	f000 8086 	beq.w	800b352 <HAL_TIM_ConfigClockSource+0x1c2>
 800b246:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b24a:	d87f      	bhi.n	800b34c <HAL_TIM_ConfigClockSource+0x1bc>
 800b24c:	2b70      	cmp	r3, #112	@ 0x70
 800b24e:	d01a      	beq.n	800b286 <HAL_TIM_ConfigClockSource+0xf6>
 800b250:	2b70      	cmp	r3, #112	@ 0x70
 800b252:	d87b      	bhi.n	800b34c <HAL_TIM_ConfigClockSource+0x1bc>
 800b254:	2b60      	cmp	r3, #96	@ 0x60
 800b256:	d050      	beq.n	800b2fa <HAL_TIM_ConfigClockSource+0x16a>
 800b258:	2b60      	cmp	r3, #96	@ 0x60
 800b25a:	d877      	bhi.n	800b34c <HAL_TIM_ConfigClockSource+0x1bc>
 800b25c:	2b50      	cmp	r3, #80	@ 0x50
 800b25e:	d03c      	beq.n	800b2da <HAL_TIM_ConfigClockSource+0x14a>
 800b260:	2b50      	cmp	r3, #80	@ 0x50
 800b262:	d873      	bhi.n	800b34c <HAL_TIM_ConfigClockSource+0x1bc>
 800b264:	2b40      	cmp	r3, #64	@ 0x40
 800b266:	d058      	beq.n	800b31a <HAL_TIM_ConfigClockSource+0x18a>
 800b268:	2b40      	cmp	r3, #64	@ 0x40
 800b26a:	d86f      	bhi.n	800b34c <HAL_TIM_ConfigClockSource+0x1bc>
 800b26c:	2b30      	cmp	r3, #48	@ 0x30
 800b26e:	d064      	beq.n	800b33a <HAL_TIM_ConfigClockSource+0x1aa>
 800b270:	2b30      	cmp	r3, #48	@ 0x30
 800b272:	d86b      	bhi.n	800b34c <HAL_TIM_ConfigClockSource+0x1bc>
 800b274:	2b20      	cmp	r3, #32
 800b276:	d060      	beq.n	800b33a <HAL_TIM_ConfigClockSource+0x1aa>
 800b278:	2b20      	cmp	r3, #32
 800b27a:	d867      	bhi.n	800b34c <HAL_TIM_ConfigClockSource+0x1bc>
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d05c      	beq.n	800b33a <HAL_TIM_ConfigClockSource+0x1aa>
 800b280:	2b10      	cmp	r3, #16
 800b282:	d05a      	beq.n	800b33a <HAL_TIM_ConfigClockSource+0x1aa>
 800b284:	e062      	b.n	800b34c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b296:	f000 f9cb 	bl	800b630 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b2a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	68ba      	ldr	r2, [r7, #8]
 800b2b0:	609a      	str	r2, [r3, #8]
      break;
 800b2b2:	e04f      	b.n	800b354 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b2c4:	f000 f9b4 	bl	800b630 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	689a      	ldr	r2, [r3, #8]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b2d6:	609a      	str	r2, [r3, #8]
      break;
 800b2d8:	e03c      	b.n	800b354 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2e6:	461a      	mov	r2, r3
 800b2e8:	f000 f924 	bl	800b534 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	2150      	movs	r1, #80	@ 0x50
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f000 f97e 	bl	800b5f4 <TIM_ITRx_SetConfig>
      break;
 800b2f8:	e02c      	b.n	800b354 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b306:	461a      	mov	r2, r3
 800b308:	f000 f943 	bl	800b592 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	2160      	movs	r1, #96	@ 0x60
 800b312:	4618      	mov	r0, r3
 800b314:	f000 f96e 	bl	800b5f4 <TIM_ITRx_SetConfig>
      break;
 800b318:	e01c      	b.n	800b354 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b326:	461a      	mov	r2, r3
 800b328:	f000 f904 	bl	800b534 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	2140      	movs	r1, #64	@ 0x40
 800b332:	4618      	mov	r0, r3
 800b334:	f000 f95e 	bl	800b5f4 <TIM_ITRx_SetConfig>
      break;
 800b338:	e00c      	b.n	800b354 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681a      	ldr	r2, [r3, #0]
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	4619      	mov	r1, r3
 800b344:	4610      	mov	r0, r2
 800b346:	f000 f955 	bl	800b5f4 <TIM_ITRx_SetConfig>
      break;
 800b34a:	e003      	b.n	800b354 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b34c:	2301      	movs	r3, #1
 800b34e:	73fb      	strb	r3, [r7, #15]
      break;
 800b350:	e000      	b.n	800b354 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b352:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2201      	movs	r2, #1
 800b358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2200      	movs	r2, #0
 800b360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b364:	7bfb      	ldrb	r3, [r7, #15]
}
 800b366:	4618      	mov	r0, r3
 800b368:	3710      	adds	r7, #16
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	ffceff88 	.word	0xffceff88
 800b374:	00100040 	.word	0x00100040
 800b378:	00100030 	.word	0x00100030
 800b37c:	00100020 	.word	0x00100020

0800b380 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b380:	b480      	push	{r7}
 800b382:	b083      	sub	sp, #12
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b388:	bf00      	nop
 800b38a:	370c      	adds	r7, #12
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b39c:	bf00      	nop
 800b39e:	370c      	adds	r7, #12
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b083      	sub	sp, #12
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b3b0:	bf00      	nop
 800b3b2:	370c      	adds	r7, #12
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr

0800b3bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b3c4:	bf00      	nop
 800b3c6:	370c      	adds	r7, #12
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b085      	sub	sp, #20
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	4a4a      	ldr	r2, [pc, #296]	@ (800b50c <TIM_Base_SetConfig+0x13c>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d013      	beq.n	800b410 <TIM_Base_SetConfig+0x40>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3ee:	d00f      	beq.n	800b410 <TIM_Base_SetConfig+0x40>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	4a47      	ldr	r2, [pc, #284]	@ (800b510 <TIM_Base_SetConfig+0x140>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d00b      	beq.n	800b410 <TIM_Base_SetConfig+0x40>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	4a46      	ldr	r2, [pc, #280]	@ (800b514 <TIM_Base_SetConfig+0x144>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d007      	beq.n	800b410 <TIM_Base_SetConfig+0x40>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	4a45      	ldr	r2, [pc, #276]	@ (800b518 <TIM_Base_SetConfig+0x148>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d003      	beq.n	800b410 <TIM_Base_SetConfig+0x40>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	4a44      	ldr	r2, [pc, #272]	@ (800b51c <TIM_Base_SetConfig+0x14c>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d108      	bne.n	800b422 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	68fa      	ldr	r2, [r7, #12]
 800b41e:	4313      	orrs	r3, r2
 800b420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	4a39      	ldr	r2, [pc, #228]	@ (800b50c <TIM_Base_SetConfig+0x13c>)
 800b426:	4293      	cmp	r3, r2
 800b428:	d027      	beq.n	800b47a <TIM_Base_SetConfig+0xaa>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b430:	d023      	beq.n	800b47a <TIM_Base_SetConfig+0xaa>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	4a36      	ldr	r2, [pc, #216]	@ (800b510 <TIM_Base_SetConfig+0x140>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d01f      	beq.n	800b47a <TIM_Base_SetConfig+0xaa>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	4a35      	ldr	r2, [pc, #212]	@ (800b514 <TIM_Base_SetConfig+0x144>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d01b      	beq.n	800b47a <TIM_Base_SetConfig+0xaa>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	4a34      	ldr	r2, [pc, #208]	@ (800b518 <TIM_Base_SetConfig+0x148>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d017      	beq.n	800b47a <TIM_Base_SetConfig+0xaa>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	4a33      	ldr	r2, [pc, #204]	@ (800b51c <TIM_Base_SetConfig+0x14c>)
 800b44e:	4293      	cmp	r3, r2
 800b450:	d013      	beq.n	800b47a <TIM_Base_SetConfig+0xaa>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	4a32      	ldr	r2, [pc, #200]	@ (800b520 <TIM_Base_SetConfig+0x150>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d00f      	beq.n	800b47a <TIM_Base_SetConfig+0xaa>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	4a31      	ldr	r2, [pc, #196]	@ (800b524 <TIM_Base_SetConfig+0x154>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d00b      	beq.n	800b47a <TIM_Base_SetConfig+0xaa>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	4a30      	ldr	r2, [pc, #192]	@ (800b528 <TIM_Base_SetConfig+0x158>)
 800b466:	4293      	cmp	r3, r2
 800b468:	d007      	beq.n	800b47a <TIM_Base_SetConfig+0xaa>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	4a2f      	ldr	r2, [pc, #188]	@ (800b52c <TIM_Base_SetConfig+0x15c>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d003      	beq.n	800b47a <TIM_Base_SetConfig+0xaa>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	4a2e      	ldr	r2, [pc, #184]	@ (800b530 <TIM_Base_SetConfig+0x160>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d108      	bne.n	800b48c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	68db      	ldr	r3, [r3, #12]
 800b486:	68fa      	ldr	r2, [r7, #12]
 800b488:	4313      	orrs	r3, r2
 800b48a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	695b      	ldr	r3, [r3, #20]
 800b496:	4313      	orrs	r3, r2
 800b498:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	68fa      	ldr	r2, [r7, #12]
 800b49e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	689a      	ldr	r2, [r3, #8]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	681a      	ldr	r2, [r3, #0]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	4a16      	ldr	r2, [pc, #88]	@ (800b50c <TIM_Base_SetConfig+0x13c>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d00f      	beq.n	800b4d8 <TIM_Base_SetConfig+0x108>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	4a18      	ldr	r2, [pc, #96]	@ (800b51c <TIM_Base_SetConfig+0x14c>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d00b      	beq.n	800b4d8 <TIM_Base_SetConfig+0x108>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	4a17      	ldr	r2, [pc, #92]	@ (800b520 <TIM_Base_SetConfig+0x150>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d007      	beq.n	800b4d8 <TIM_Base_SetConfig+0x108>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	4a16      	ldr	r2, [pc, #88]	@ (800b524 <TIM_Base_SetConfig+0x154>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d003      	beq.n	800b4d8 <TIM_Base_SetConfig+0x108>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	4a15      	ldr	r2, [pc, #84]	@ (800b528 <TIM_Base_SetConfig+0x158>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d103      	bne.n	800b4e0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	691a      	ldr	r2, [r3, #16]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	691b      	ldr	r3, [r3, #16]
 800b4ea:	f003 0301 	and.w	r3, r3, #1
 800b4ee:	2b01      	cmp	r3, #1
 800b4f0:	d105      	bne.n	800b4fe <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	691b      	ldr	r3, [r3, #16]
 800b4f6:	f023 0201 	bic.w	r2, r3, #1
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	611a      	str	r2, [r3, #16]
  }
}
 800b4fe:	bf00      	nop
 800b500:	3714      	adds	r7, #20
 800b502:	46bd      	mov	sp, r7
 800b504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b508:	4770      	bx	lr
 800b50a:	bf00      	nop
 800b50c:	40010000 	.word	0x40010000
 800b510:	40000400 	.word	0x40000400
 800b514:	40000800 	.word	0x40000800
 800b518:	40000c00 	.word	0x40000c00
 800b51c:	40010400 	.word	0x40010400
 800b520:	40014000 	.word	0x40014000
 800b524:	40014400 	.word	0x40014400
 800b528:	40014800 	.word	0x40014800
 800b52c:	4000e000 	.word	0x4000e000
 800b530:	4000e400 	.word	0x4000e400

0800b534 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b534:	b480      	push	{r7}
 800b536:	b087      	sub	sp, #28
 800b538:	af00      	add	r7, sp, #0
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	60b9      	str	r1, [r7, #8]
 800b53e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	6a1b      	ldr	r3, [r3, #32]
 800b544:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	6a1b      	ldr	r3, [r3, #32]
 800b54a:	f023 0201 	bic.w	r2, r3, #1
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	699b      	ldr	r3, [r3, #24]
 800b556:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b55e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	011b      	lsls	r3, r3, #4
 800b564:	693a      	ldr	r2, [r7, #16]
 800b566:	4313      	orrs	r3, r2
 800b568:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	f023 030a 	bic.w	r3, r3, #10
 800b570:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b572:	697a      	ldr	r2, [r7, #20]
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	4313      	orrs	r3, r2
 800b578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	693a      	ldr	r2, [r7, #16]
 800b57e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	697a      	ldr	r2, [r7, #20]
 800b584:	621a      	str	r2, [r3, #32]
}
 800b586:	bf00      	nop
 800b588:	371c      	adds	r7, #28
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr

0800b592 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b592:	b480      	push	{r7}
 800b594:	b087      	sub	sp, #28
 800b596:	af00      	add	r7, sp, #0
 800b598:	60f8      	str	r0, [r7, #12]
 800b59a:	60b9      	str	r1, [r7, #8]
 800b59c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	6a1b      	ldr	r3, [r3, #32]
 800b5a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	6a1b      	ldr	r3, [r3, #32]
 800b5a8:	f023 0210 	bic.w	r2, r3, #16
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	699b      	ldr	r3, [r3, #24]
 800b5b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b5bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	031b      	lsls	r3, r3, #12
 800b5c2:	693a      	ldr	r2, [r7, #16]
 800b5c4:	4313      	orrs	r3, r2
 800b5c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b5ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	011b      	lsls	r3, r3, #4
 800b5d4:	697a      	ldr	r2, [r7, #20]
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	693a      	ldr	r2, [r7, #16]
 800b5de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	697a      	ldr	r2, [r7, #20]
 800b5e4:	621a      	str	r2, [r3, #32]
}
 800b5e6:	bf00      	nop
 800b5e8:	371c      	adds	r7, #28
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr
	...

0800b5f4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b085      	sub	sp, #20
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	689b      	ldr	r3, [r3, #8]
 800b602:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b604:	68fa      	ldr	r2, [r7, #12]
 800b606:	4b09      	ldr	r3, [pc, #36]	@ (800b62c <TIM_ITRx_SetConfig+0x38>)
 800b608:	4013      	ands	r3, r2
 800b60a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b60c:	683a      	ldr	r2, [r7, #0]
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	4313      	orrs	r3, r2
 800b612:	f043 0307 	orr.w	r3, r3, #7
 800b616:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	68fa      	ldr	r2, [r7, #12]
 800b61c:	609a      	str	r2, [r3, #8]
}
 800b61e:	bf00      	nop
 800b620:	3714      	adds	r7, #20
 800b622:	46bd      	mov	sp, r7
 800b624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b628:	4770      	bx	lr
 800b62a:	bf00      	nop
 800b62c:	ffcfff8f 	.word	0xffcfff8f

0800b630 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b630:	b480      	push	{r7}
 800b632:	b087      	sub	sp, #28
 800b634:	af00      	add	r7, sp, #0
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	60b9      	str	r1, [r7, #8]
 800b63a:	607a      	str	r2, [r7, #4]
 800b63c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	689b      	ldr	r3, [r3, #8]
 800b642:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b64a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	021a      	lsls	r2, r3, #8
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	431a      	orrs	r2, r3
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	4313      	orrs	r3, r2
 800b658:	697a      	ldr	r2, [r7, #20]
 800b65a:	4313      	orrs	r3, r2
 800b65c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	697a      	ldr	r2, [r7, #20]
 800b662:	609a      	str	r2, [r3, #8]
}
 800b664:	bf00      	nop
 800b666:	371c      	adds	r7, #28
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr

0800b670 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b670:	b480      	push	{r7}
 800b672:	b085      	sub	sp, #20
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b680:	2b01      	cmp	r3, #1
 800b682:	d101      	bne.n	800b688 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b684:	2302      	movs	r3, #2
 800b686:	e077      	b.n	800b778 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2201      	movs	r2, #1
 800b68c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2202      	movs	r2, #2
 800b694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	689b      	ldr	r3, [r3, #8]
 800b6a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4a35      	ldr	r2, [pc, #212]	@ (800b784 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d004      	beq.n	800b6bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	4a34      	ldr	r2, [pc, #208]	@ (800b788 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d108      	bne.n	800b6ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b6c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	68fa      	ldr	r2, [r7, #12]
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	68fa      	ldr	r2, [r7, #12]
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	68fa      	ldr	r2, [r7, #12]
 800b6e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4a25      	ldr	r2, [pc, #148]	@ (800b784 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d02c      	beq.n	800b74c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6fa:	d027      	beq.n	800b74c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4a22      	ldr	r2, [pc, #136]	@ (800b78c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d022      	beq.n	800b74c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4a21      	ldr	r2, [pc, #132]	@ (800b790 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d01d      	beq.n	800b74c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	4a1f      	ldr	r2, [pc, #124]	@ (800b794 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d018      	beq.n	800b74c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4a1a      	ldr	r2, [pc, #104]	@ (800b788 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d013      	beq.n	800b74c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	4a1b      	ldr	r2, [pc, #108]	@ (800b798 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d00e      	beq.n	800b74c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	4a1a      	ldr	r2, [pc, #104]	@ (800b79c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800b734:	4293      	cmp	r3, r2
 800b736:	d009      	beq.n	800b74c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4a18      	ldr	r2, [pc, #96]	@ (800b7a0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d004      	beq.n	800b74c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	4a17      	ldr	r2, [pc, #92]	@ (800b7a4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d10c      	bne.n	800b766 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b752:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	689b      	ldr	r3, [r3, #8]
 800b758:	68ba      	ldr	r2, [r7, #8]
 800b75a:	4313      	orrs	r3, r2
 800b75c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	68ba      	ldr	r2, [r7, #8]
 800b764:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2201      	movs	r2, #1
 800b76a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2200      	movs	r2, #0
 800b772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b776:	2300      	movs	r3, #0
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3714      	adds	r7, #20
 800b77c:	46bd      	mov	sp, r7
 800b77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b782:	4770      	bx	lr
 800b784:	40010000 	.word	0x40010000
 800b788:	40010400 	.word	0x40010400
 800b78c:	40000400 	.word	0x40000400
 800b790:	40000800 	.word	0x40000800
 800b794:	40000c00 	.word	0x40000c00
 800b798:	40001800 	.word	0x40001800
 800b79c:	40014000 	.word	0x40014000
 800b7a0:	4000e000 	.word	0x4000e000
 800b7a4:	4000e400 	.word	0x4000e400

0800b7a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b7b0:	bf00      	nop
 800b7b2:	370c      	adds	r7, #12
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr

0800b7bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b083      	sub	sp, #12
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b7c4:	bf00      	nop
 800b7c6:	370c      	adds	r7, #12
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr

0800b7d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b083      	sub	sp, #12
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b7d8:	bf00      	nop
 800b7da:	370c      	adds	r7, #12
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr

0800b7e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b082      	sub	sp, #8
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d101      	bne.n	800b7f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	e042      	b.n	800b87c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d106      	bne.n	800b80e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2200      	movs	r2, #0
 800b804:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f7f8 f84f 	bl	80038ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2224      	movs	r2, #36	@ 0x24
 800b812:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	681a      	ldr	r2, [r3, #0]
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f022 0201 	bic.w	r2, r2, #1
 800b824:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d002      	beq.n	800b834 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f001 fafc 	bl	800ce2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f000 fc8d 	bl	800c154 <UART_SetConfig>
 800b83a:	4603      	mov	r3, r0
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d101      	bne.n	800b844 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b840:	2301      	movs	r3, #1
 800b842:	e01b      	b.n	800b87c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	685a      	ldr	r2, [r3, #4]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b852:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	689a      	ldr	r2, [r3, #8]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b862:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	681a      	ldr	r2, [r3, #0]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f042 0201 	orr.w	r2, r2, #1
 800b872:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f001 fb7b 	bl	800cf70 <UART_CheckIdleState>
 800b87a:	4603      	mov	r3, r0
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3708      	adds	r7, #8
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b08a      	sub	sp, #40	@ 0x28
 800b888:	af02      	add	r7, sp, #8
 800b88a:	60f8      	str	r0, [r7, #12]
 800b88c:	60b9      	str	r1, [r7, #8]
 800b88e:	603b      	str	r3, [r7, #0]
 800b890:	4613      	mov	r3, r2
 800b892:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b89a:	2b20      	cmp	r3, #32
 800b89c:	d17b      	bne.n	800b996 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d002      	beq.n	800b8aa <HAL_UART_Transmit+0x26>
 800b8a4:	88fb      	ldrh	r3, [r7, #6]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d101      	bne.n	800b8ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	e074      	b.n	800b998 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	2221      	movs	r2, #33	@ 0x21
 800b8ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b8be:	f7f8 f97b 	bl	8003bb8 <HAL_GetTick>
 800b8c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	88fa      	ldrh	r2, [r7, #6]
 800b8c8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	88fa      	ldrh	r2, [r7, #6]
 800b8d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	689b      	ldr	r3, [r3, #8]
 800b8d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b8dc:	d108      	bne.n	800b8f0 <HAL_UART_Transmit+0x6c>
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	691b      	ldr	r3, [r3, #16]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d104      	bne.n	800b8f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	61bb      	str	r3, [r7, #24]
 800b8ee:	e003      	b.n	800b8f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b8f8:	e030      	b.n	800b95c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	9300      	str	r3, [sp, #0]
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	2200      	movs	r2, #0
 800b902:	2180      	movs	r1, #128	@ 0x80
 800b904:	68f8      	ldr	r0, [r7, #12]
 800b906:	f001 fbdd 	bl	800d0c4 <UART_WaitOnFlagUntilTimeout>
 800b90a:	4603      	mov	r3, r0
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d005      	beq.n	800b91c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2220      	movs	r2, #32
 800b914:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b918:	2303      	movs	r3, #3
 800b91a:	e03d      	b.n	800b998 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b91c:	69fb      	ldr	r3, [r7, #28]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d10b      	bne.n	800b93a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b922:	69bb      	ldr	r3, [r7, #24]
 800b924:	881b      	ldrh	r3, [r3, #0]
 800b926:	461a      	mov	r2, r3
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b930:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b932:	69bb      	ldr	r3, [r7, #24]
 800b934:	3302      	adds	r3, #2
 800b936:	61bb      	str	r3, [r7, #24]
 800b938:	e007      	b.n	800b94a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b93a:	69fb      	ldr	r3, [r7, #28]
 800b93c:	781a      	ldrb	r2, [r3, #0]
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b944:	69fb      	ldr	r3, [r7, #28]
 800b946:	3301      	adds	r3, #1
 800b948:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b950:	b29b      	uxth	r3, r3
 800b952:	3b01      	subs	r3, #1
 800b954:	b29a      	uxth	r2, r3
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b962:	b29b      	uxth	r3, r3
 800b964:	2b00      	cmp	r3, #0
 800b966:	d1c8      	bne.n	800b8fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	9300      	str	r3, [sp, #0]
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	2200      	movs	r2, #0
 800b970:	2140      	movs	r1, #64	@ 0x40
 800b972:	68f8      	ldr	r0, [r7, #12]
 800b974:	f001 fba6 	bl	800d0c4 <UART_WaitOnFlagUntilTimeout>
 800b978:	4603      	mov	r3, r0
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d005      	beq.n	800b98a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2220      	movs	r2, #32
 800b982:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b986:	2303      	movs	r3, #3
 800b988:	e006      	b.n	800b998 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2220      	movs	r2, #32
 800b98e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b992:	2300      	movs	r3, #0
 800b994:	e000      	b.n	800b998 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b996:	2302      	movs	r3, #2
  }
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3720      	adds	r7, #32
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b0ba      	sub	sp, #232	@ 0xe8
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	69db      	ldr	r3, [r3, #28]
 800b9ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	689b      	ldr	r3, [r3, #8]
 800b9c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b9c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b9ca:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b9ce:	4013      	ands	r3, r2
 800b9d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b9d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d11b      	bne.n	800ba14 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b9dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9e0:	f003 0320 	and.w	r3, r3, #32
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d015      	beq.n	800ba14 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b9e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b9ec:	f003 0320 	and.w	r3, r3, #32
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d105      	bne.n	800ba00 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b9f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b9f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d009      	beq.n	800ba14 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	f000 8377 	beq.w	800c0f8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	4798      	blx	r3
      }
      return;
 800ba12:	e371      	b.n	800c0f8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ba14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	f000 8123 	beq.w	800bc64 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ba1e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ba22:	4b8d      	ldr	r3, [pc, #564]	@ (800bc58 <HAL_UART_IRQHandler+0x2b8>)
 800ba24:	4013      	ands	r3, r2
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d106      	bne.n	800ba38 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ba2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ba2e:	4b8b      	ldr	r3, [pc, #556]	@ (800bc5c <HAL_UART_IRQHandler+0x2bc>)
 800ba30:	4013      	ands	r3, r2
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	f000 8116 	beq.w	800bc64 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ba38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba3c:	f003 0301 	and.w	r3, r3, #1
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d011      	beq.n	800ba68 <HAL_UART_IRQHandler+0xc8>
 800ba44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d00b      	beq.n	800ba68 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	2201      	movs	r2, #1
 800ba56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba5e:	f043 0201 	orr.w	r2, r3, #1
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ba68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba6c:	f003 0302 	and.w	r3, r3, #2
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d011      	beq.n	800ba98 <HAL_UART_IRQHandler+0xf8>
 800ba74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba78:	f003 0301 	and.w	r3, r3, #1
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d00b      	beq.n	800ba98 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	2202      	movs	r2, #2
 800ba86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba8e:	f043 0204 	orr.w	r2, r3, #4
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ba98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba9c:	f003 0304 	and.w	r3, r3, #4
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d011      	beq.n	800bac8 <HAL_UART_IRQHandler+0x128>
 800baa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800baa8:	f003 0301 	and.w	r3, r3, #1
 800baac:	2b00      	cmp	r3, #0
 800baae:	d00b      	beq.n	800bac8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	2204      	movs	r2, #4
 800bab6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800babe:	f043 0202 	orr.w	r2, r3, #2
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bacc:	f003 0308 	and.w	r3, r3, #8
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d017      	beq.n	800bb04 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bad8:	f003 0320 	and.w	r3, r3, #32
 800badc:	2b00      	cmp	r3, #0
 800bade:	d105      	bne.n	800baec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bae0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bae4:	4b5c      	ldr	r3, [pc, #368]	@ (800bc58 <HAL_UART_IRQHandler+0x2b8>)
 800bae6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d00b      	beq.n	800bb04 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	2208      	movs	r2, #8
 800baf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bafa:	f043 0208 	orr.w	r2, r3, #8
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bb04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d012      	beq.n	800bb36 <HAL_UART_IRQHandler+0x196>
 800bb10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d00c      	beq.n	800bb36 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bb24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb2c:	f043 0220 	orr.w	r2, r3, #32
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	f000 82dd 	beq.w	800c0fc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bb42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb46:	f003 0320 	and.w	r3, r3, #32
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d013      	beq.n	800bb76 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bb4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb52:	f003 0320 	and.w	r3, r3, #32
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d105      	bne.n	800bb66 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bb5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bb5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d007      	beq.n	800bb76 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d003      	beq.n	800bb76 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	689b      	ldr	r3, [r3, #8]
 800bb86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb8a:	2b40      	cmp	r3, #64	@ 0x40
 800bb8c:	d005      	beq.n	800bb9a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bb8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bb92:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d054      	beq.n	800bc44 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f001 fb00 	bl	800d1a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	689b      	ldr	r3, [r3, #8]
 800bba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbaa:	2b40      	cmp	r3, #64	@ 0x40
 800bbac:	d146      	bne.n	800bc3c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	3308      	adds	r3, #8
 800bbb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bbbc:	e853 3f00 	ldrex	r3, [r3]
 800bbc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bbc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bbc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bbcc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	3308      	adds	r3, #8
 800bbd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bbda:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bbde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbe2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bbe6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bbea:	e841 2300 	strex	r3, r2, [r1]
 800bbee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bbf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d1d9      	bne.n	800bbae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d017      	beq.n	800bc34 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc0a:	4a15      	ldr	r2, [pc, #84]	@ (800bc60 <HAL_UART_IRQHandler+0x2c0>)
 800bc0c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7f9 fa99 	bl	800514c <HAL_DMA_Abort_IT>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d019      	beq.n	800bc54 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc28:	687a      	ldr	r2, [r7, #4]
 800bc2a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800bc2e:	4610      	mov	r0, r2
 800bc30:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc32:	e00f      	b.n	800bc54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f000 fa77 	bl	800c128 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc3a:	e00b      	b.n	800bc54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f000 fa73 	bl	800c128 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc42:	e007      	b.n	800bc54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f000 fa6f 	bl	800c128 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800bc52:	e253      	b.n	800c0fc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc54:	bf00      	nop
    return;
 800bc56:	e251      	b.n	800c0fc <HAL_UART_IRQHandler+0x75c>
 800bc58:	10000001 	.word	0x10000001
 800bc5c:	04000120 	.word	0x04000120
 800bc60:	0800d26d 	.word	0x0800d26d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	f040 81e7 	bne.w	800c03c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bc6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc72:	f003 0310 	and.w	r3, r3, #16
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	f000 81e0 	beq.w	800c03c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bc7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bc80:	f003 0310 	and.w	r3, r3, #16
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	f000 81d9 	beq.w	800c03c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	2210      	movs	r2, #16
 800bc90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	689b      	ldr	r3, [r3, #8]
 800bc98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc9c:	2b40      	cmp	r3, #64	@ 0x40
 800bc9e:	f040 8151 	bne.w	800bf44 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	4a96      	ldr	r2, [pc, #600]	@ (800bf04 <HAL_UART_IRQHandler+0x564>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d068      	beq.n	800bd82 <HAL_UART_IRQHandler+0x3e2>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4a93      	ldr	r2, [pc, #588]	@ (800bf08 <HAL_UART_IRQHandler+0x568>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d061      	beq.n	800bd82 <HAL_UART_IRQHandler+0x3e2>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4a91      	ldr	r2, [pc, #580]	@ (800bf0c <HAL_UART_IRQHandler+0x56c>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d05a      	beq.n	800bd82 <HAL_UART_IRQHandler+0x3e2>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	4a8e      	ldr	r2, [pc, #568]	@ (800bf10 <HAL_UART_IRQHandler+0x570>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d053      	beq.n	800bd82 <HAL_UART_IRQHandler+0x3e2>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4a8c      	ldr	r2, [pc, #560]	@ (800bf14 <HAL_UART_IRQHandler+0x574>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d04c      	beq.n	800bd82 <HAL_UART_IRQHandler+0x3e2>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4a89      	ldr	r2, [pc, #548]	@ (800bf18 <HAL_UART_IRQHandler+0x578>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d045      	beq.n	800bd82 <HAL_UART_IRQHandler+0x3e2>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	4a87      	ldr	r2, [pc, #540]	@ (800bf1c <HAL_UART_IRQHandler+0x57c>)
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d03e      	beq.n	800bd82 <HAL_UART_IRQHandler+0x3e2>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4a84      	ldr	r2, [pc, #528]	@ (800bf20 <HAL_UART_IRQHandler+0x580>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d037      	beq.n	800bd82 <HAL_UART_IRQHandler+0x3e2>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	4a82      	ldr	r2, [pc, #520]	@ (800bf24 <HAL_UART_IRQHandler+0x584>)
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d030      	beq.n	800bd82 <HAL_UART_IRQHandler+0x3e2>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	4a7f      	ldr	r2, [pc, #508]	@ (800bf28 <HAL_UART_IRQHandler+0x588>)
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d029      	beq.n	800bd82 <HAL_UART_IRQHandler+0x3e2>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4a7d      	ldr	r2, [pc, #500]	@ (800bf2c <HAL_UART_IRQHandler+0x58c>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d022      	beq.n	800bd82 <HAL_UART_IRQHandler+0x3e2>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	4a7a      	ldr	r2, [pc, #488]	@ (800bf30 <HAL_UART_IRQHandler+0x590>)
 800bd46:	4293      	cmp	r3, r2
 800bd48:	d01b      	beq.n	800bd82 <HAL_UART_IRQHandler+0x3e2>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	4a78      	ldr	r2, [pc, #480]	@ (800bf34 <HAL_UART_IRQHandler+0x594>)
 800bd54:	4293      	cmp	r3, r2
 800bd56:	d014      	beq.n	800bd82 <HAL_UART_IRQHandler+0x3e2>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4a75      	ldr	r2, [pc, #468]	@ (800bf38 <HAL_UART_IRQHandler+0x598>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d00d      	beq.n	800bd82 <HAL_UART_IRQHandler+0x3e2>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	4a73      	ldr	r2, [pc, #460]	@ (800bf3c <HAL_UART_IRQHandler+0x59c>)
 800bd70:	4293      	cmp	r3, r2
 800bd72:	d006      	beq.n	800bd82 <HAL_UART_IRQHandler+0x3e2>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	4a70      	ldr	r2, [pc, #448]	@ (800bf40 <HAL_UART_IRQHandler+0x5a0>)
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	d106      	bne.n	800bd90 <HAL_UART_IRQHandler+0x3f0>
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	685b      	ldr	r3, [r3, #4]
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	e005      	b.n	800bd9c <HAL_UART_IRQHandler+0x3fc>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	b29b      	uxth	r3, r3
 800bd9c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bda0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	f000 81ab 	beq.w	800c100 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bdb0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	f080 81a3 	bcs.w	800c100 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bdc0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdca:	69db      	ldr	r3, [r3, #28]
 800bdcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bdd0:	f000 8087 	beq.w	800bee2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bddc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bde0:	e853 3f00 	ldrex	r3, [r3]
 800bde4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bde8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bdec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bdf0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	461a      	mov	r2, r3
 800bdfa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bdfe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800be02:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be06:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800be0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800be0e:	e841 2300 	strex	r3, r2, [r1]
 800be12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800be16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d1da      	bne.n	800bdd4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	3308      	adds	r3, #8
 800be24:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800be28:	e853 3f00 	ldrex	r3, [r3]
 800be2c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800be2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800be30:	f023 0301 	bic.w	r3, r3, #1
 800be34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	3308      	adds	r3, #8
 800be3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800be42:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800be46:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be48:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800be4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800be4e:	e841 2300 	strex	r3, r2, [r1]
 800be52:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800be54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800be56:	2b00      	cmp	r3, #0
 800be58:	d1e1      	bne.n	800be1e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	3308      	adds	r3, #8
 800be60:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800be64:	e853 3f00 	ldrex	r3, [r3]
 800be68:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800be6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	3308      	adds	r3, #8
 800be7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800be7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800be80:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be82:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800be84:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800be86:	e841 2300 	strex	r3, r2, [r1]
 800be8a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800be8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d1e3      	bne.n	800be5a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2220      	movs	r2, #32
 800be96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2200      	movs	r2, #0
 800be9e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bea8:	e853 3f00 	ldrex	r3, [r3]
 800beac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800beae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800beb0:	f023 0310 	bic.w	r3, r3, #16
 800beb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	461a      	mov	r2, r3
 800bebe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bec2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bec4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bec6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bec8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800beca:	e841 2300 	strex	r3, r2, [r1]
 800bece:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bed0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d1e4      	bne.n	800bea0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bedc:	4618      	mov	r0, r3
 800bede:	f7f8 fe17 	bl	8004b10 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2202      	movs	r2, #2
 800bee6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bef4:	b29b      	uxth	r3, r3
 800bef6:	1ad3      	subs	r3, r2, r3
 800bef8:	b29b      	uxth	r3, r3
 800befa:	4619      	mov	r1, r3
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f000 f91d 	bl	800c13c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bf02:	e0fd      	b.n	800c100 <HAL_UART_IRQHandler+0x760>
 800bf04:	40020010 	.word	0x40020010
 800bf08:	40020028 	.word	0x40020028
 800bf0c:	40020040 	.word	0x40020040
 800bf10:	40020058 	.word	0x40020058
 800bf14:	40020070 	.word	0x40020070
 800bf18:	40020088 	.word	0x40020088
 800bf1c:	400200a0 	.word	0x400200a0
 800bf20:	400200b8 	.word	0x400200b8
 800bf24:	40020410 	.word	0x40020410
 800bf28:	40020428 	.word	0x40020428
 800bf2c:	40020440 	.word	0x40020440
 800bf30:	40020458 	.word	0x40020458
 800bf34:	40020470 	.word	0x40020470
 800bf38:	40020488 	.word	0x40020488
 800bf3c:	400204a0 	.word	0x400204a0
 800bf40:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bf50:	b29b      	uxth	r3, r3
 800bf52:	1ad3      	subs	r3, r2, r3
 800bf54:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bf5e:	b29b      	uxth	r3, r3
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	f000 80cf 	beq.w	800c104 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800bf66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	f000 80ca 	beq.w	800c104 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf78:	e853 3f00 	ldrex	r3, [r3]
 800bf7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bf7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bf84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bf92:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf94:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bf98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf9a:	e841 2300 	strex	r3, r2, [r1]
 800bf9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bfa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d1e4      	bne.n	800bf70 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	3308      	adds	r3, #8
 800bfac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfb0:	e853 3f00 	ldrex	r3, [r3]
 800bfb4:	623b      	str	r3, [r7, #32]
   return(result);
 800bfb6:	6a3a      	ldr	r2, [r7, #32]
 800bfb8:	4b55      	ldr	r3, [pc, #340]	@ (800c110 <HAL_UART_IRQHandler+0x770>)
 800bfba:	4013      	ands	r3, r2
 800bfbc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	3308      	adds	r3, #8
 800bfc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800bfca:	633a      	str	r2, [r7, #48]	@ 0x30
 800bfcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bfd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bfd2:	e841 2300 	strex	r3, r2, [r1]
 800bfd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bfd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d1e3      	bne.n	800bfa6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2220      	movs	r2, #32
 800bfe2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2200      	movs	r2, #0
 800bff0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bff8:	693b      	ldr	r3, [r7, #16]
 800bffa:	e853 3f00 	ldrex	r3, [r3]
 800bffe:	60fb      	str	r3, [r7, #12]
   return(result);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	f023 0310 	bic.w	r3, r3, #16
 800c006:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	461a      	mov	r2, r3
 800c010:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c014:	61fb      	str	r3, [r7, #28]
 800c016:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c018:	69b9      	ldr	r1, [r7, #24]
 800c01a:	69fa      	ldr	r2, [r7, #28]
 800c01c:	e841 2300 	strex	r3, r2, [r1]
 800c020:	617b      	str	r3, [r7, #20]
   return(result);
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d1e4      	bne.n	800bff2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2202      	movs	r2, #2
 800c02c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c02e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c032:	4619      	mov	r1, r3
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f000 f881 	bl	800c13c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c03a:	e063      	b.n	800c104 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c03c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c040:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c044:	2b00      	cmp	r3, #0
 800c046:	d00e      	beq.n	800c066 <HAL_UART_IRQHandler+0x6c6>
 800c048:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c04c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c050:	2b00      	cmp	r3, #0
 800c052:	d008      	beq.n	800c066 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c05c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f001 f945 	bl	800d2ee <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c064:	e051      	b.n	800c10a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c06a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d014      	beq.n	800c09c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d105      	bne.n	800c08a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c07e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c082:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c086:	2b00      	cmp	r3, #0
 800c088:	d008      	beq.n	800c09c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d03a      	beq.n	800c108 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	4798      	blx	r3
    }
    return;
 800c09a:	e035      	b.n	800c108 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c09c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d009      	beq.n	800c0bc <HAL_UART_IRQHandler+0x71c>
 800c0a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c0ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d003      	beq.n	800c0bc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f001 f8ef 	bl	800d298 <UART_EndTransmit_IT>
    return;
 800c0ba:	e026      	b.n	800c10a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c0bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d009      	beq.n	800c0dc <HAL_UART_IRQHandler+0x73c>
 800c0c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c0cc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d003      	beq.n	800c0dc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f001 f91e 	bl	800d316 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c0da:	e016      	b.n	800c10a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c0dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d010      	beq.n	800c10a <HAL_UART_IRQHandler+0x76a>
 800c0e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	da0c      	bge.n	800c10a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f001 f906 	bl	800d302 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c0f6:	e008      	b.n	800c10a <HAL_UART_IRQHandler+0x76a>
      return;
 800c0f8:	bf00      	nop
 800c0fa:	e006      	b.n	800c10a <HAL_UART_IRQHandler+0x76a>
    return;
 800c0fc:	bf00      	nop
 800c0fe:	e004      	b.n	800c10a <HAL_UART_IRQHandler+0x76a>
      return;
 800c100:	bf00      	nop
 800c102:	e002      	b.n	800c10a <HAL_UART_IRQHandler+0x76a>
      return;
 800c104:	bf00      	nop
 800c106:	e000      	b.n	800c10a <HAL_UART_IRQHandler+0x76a>
    return;
 800c108:	bf00      	nop
  }
}
 800c10a:	37e8      	adds	r7, #232	@ 0xe8
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	effffffe 	.word	0xeffffffe

0800c114 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c114:	b480      	push	{r7}
 800c116:	b083      	sub	sp, #12
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c11c:	bf00      	nop
 800c11e:	370c      	adds	r7, #12
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr

0800c128 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c128:	b480      	push	{r7}
 800c12a:	b083      	sub	sp, #12
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c130:	bf00      	nop
 800c132:	370c      	adds	r7, #12
 800c134:	46bd      	mov	sp, r7
 800c136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13a:	4770      	bx	lr

0800c13c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c13c:	b480      	push	{r7}
 800c13e:	b083      	sub	sp, #12
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	460b      	mov	r3, r1
 800c146:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c148:	bf00      	nop
 800c14a:	370c      	adds	r7, #12
 800c14c:	46bd      	mov	sp, r7
 800c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c152:	4770      	bx	lr

0800c154 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c158:	b092      	sub	sp, #72	@ 0x48
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c15e:	2300      	movs	r3, #0
 800c160:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	689a      	ldr	r2, [r3, #8]
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	691b      	ldr	r3, [r3, #16]
 800c16c:	431a      	orrs	r2, r3
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	695b      	ldr	r3, [r3, #20]
 800c172:	431a      	orrs	r2, r3
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	69db      	ldr	r3, [r3, #28]
 800c178:	4313      	orrs	r3, r2
 800c17a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	681a      	ldr	r2, [r3, #0]
 800c182:	4bbe      	ldr	r3, [pc, #760]	@ (800c47c <UART_SetConfig+0x328>)
 800c184:	4013      	ands	r3, r2
 800c186:	697a      	ldr	r2, [r7, #20]
 800c188:	6812      	ldr	r2, [r2, #0]
 800c18a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c18c:	430b      	orrs	r3, r1
 800c18e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	685b      	ldr	r3, [r3, #4]
 800c196:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	68da      	ldr	r2, [r3, #12]
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	430a      	orrs	r2, r1
 800c1a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c1a6:	697b      	ldr	r3, [r7, #20]
 800c1a8:	699b      	ldr	r3, [r3, #24]
 800c1aa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4ab3      	ldr	r2, [pc, #716]	@ (800c480 <UART_SetConfig+0x32c>)
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d004      	beq.n	800c1c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	6a1b      	ldr	r3, [r3, #32]
 800c1ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c1bc:	4313      	orrs	r3, r2
 800c1be:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	689a      	ldr	r2, [r3, #8]
 800c1c6:	4baf      	ldr	r3, [pc, #700]	@ (800c484 <UART_SetConfig+0x330>)
 800c1c8:	4013      	ands	r3, r2
 800c1ca:	697a      	ldr	r2, [r7, #20]
 800c1cc:	6812      	ldr	r2, [r2, #0]
 800c1ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c1d0:	430b      	orrs	r3, r1
 800c1d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1da:	f023 010f 	bic.w	r1, r3, #15
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	430a      	orrs	r2, r1
 800c1e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	4aa6      	ldr	r2, [pc, #664]	@ (800c488 <UART_SetConfig+0x334>)
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	d177      	bne.n	800c2e4 <UART_SetConfig+0x190>
 800c1f4:	4ba5      	ldr	r3, [pc, #660]	@ (800c48c <UART_SetConfig+0x338>)
 800c1f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c1fc:	2b28      	cmp	r3, #40	@ 0x28
 800c1fe:	d86d      	bhi.n	800c2dc <UART_SetConfig+0x188>
 800c200:	a201      	add	r2, pc, #4	@ (adr r2, 800c208 <UART_SetConfig+0xb4>)
 800c202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c206:	bf00      	nop
 800c208:	0800c2ad 	.word	0x0800c2ad
 800c20c:	0800c2dd 	.word	0x0800c2dd
 800c210:	0800c2dd 	.word	0x0800c2dd
 800c214:	0800c2dd 	.word	0x0800c2dd
 800c218:	0800c2dd 	.word	0x0800c2dd
 800c21c:	0800c2dd 	.word	0x0800c2dd
 800c220:	0800c2dd 	.word	0x0800c2dd
 800c224:	0800c2dd 	.word	0x0800c2dd
 800c228:	0800c2b5 	.word	0x0800c2b5
 800c22c:	0800c2dd 	.word	0x0800c2dd
 800c230:	0800c2dd 	.word	0x0800c2dd
 800c234:	0800c2dd 	.word	0x0800c2dd
 800c238:	0800c2dd 	.word	0x0800c2dd
 800c23c:	0800c2dd 	.word	0x0800c2dd
 800c240:	0800c2dd 	.word	0x0800c2dd
 800c244:	0800c2dd 	.word	0x0800c2dd
 800c248:	0800c2bd 	.word	0x0800c2bd
 800c24c:	0800c2dd 	.word	0x0800c2dd
 800c250:	0800c2dd 	.word	0x0800c2dd
 800c254:	0800c2dd 	.word	0x0800c2dd
 800c258:	0800c2dd 	.word	0x0800c2dd
 800c25c:	0800c2dd 	.word	0x0800c2dd
 800c260:	0800c2dd 	.word	0x0800c2dd
 800c264:	0800c2dd 	.word	0x0800c2dd
 800c268:	0800c2c5 	.word	0x0800c2c5
 800c26c:	0800c2dd 	.word	0x0800c2dd
 800c270:	0800c2dd 	.word	0x0800c2dd
 800c274:	0800c2dd 	.word	0x0800c2dd
 800c278:	0800c2dd 	.word	0x0800c2dd
 800c27c:	0800c2dd 	.word	0x0800c2dd
 800c280:	0800c2dd 	.word	0x0800c2dd
 800c284:	0800c2dd 	.word	0x0800c2dd
 800c288:	0800c2cd 	.word	0x0800c2cd
 800c28c:	0800c2dd 	.word	0x0800c2dd
 800c290:	0800c2dd 	.word	0x0800c2dd
 800c294:	0800c2dd 	.word	0x0800c2dd
 800c298:	0800c2dd 	.word	0x0800c2dd
 800c29c:	0800c2dd 	.word	0x0800c2dd
 800c2a0:	0800c2dd 	.word	0x0800c2dd
 800c2a4:	0800c2dd 	.word	0x0800c2dd
 800c2a8:	0800c2d5 	.word	0x0800c2d5
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2b2:	e326      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c2b4:	2304      	movs	r3, #4
 800c2b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ba:	e322      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c2bc:	2308      	movs	r3, #8
 800c2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2c2:	e31e      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c2c4:	2310      	movs	r3, #16
 800c2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ca:	e31a      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c2cc:	2320      	movs	r3, #32
 800c2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2d2:	e316      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c2d4:	2340      	movs	r3, #64	@ 0x40
 800c2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2da:	e312      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c2dc:	2380      	movs	r3, #128	@ 0x80
 800c2de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2e2:	e30e      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4a69      	ldr	r2, [pc, #420]	@ (800c490 <UART_SetConfig+0x33c>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d130      	bne.n	800c350 <UART_SetConfig+0x1fc>
 800c2ee:	4b67      	ldr	r3, [pc, #412]	@ (800c48c <UART_SetConfig+0x338>)
 800c2f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2f2:	f003 0307 	and.w	r3, r3, #7
 800c2f6:	2b05      	cmp	r3, #5
 800c2f8:	d826      	bhi.n	800c348 <UART_SetConfig+0x1f4>
 800c2fa:	a201      	add	r2, pc, #4	@ (adr r2, 800c300 <UART_SetConfig+0x1ac>)
 800c2fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c300:	0800c319 	.word	0x0800c319
 800c304:	0800c321 	.word	0x0800c321
 800c308:	0800c329 	.word	0x0800c329
 800c30c:	0800c331 	.word	0x0800c331
 800c310:	0800c339 	.word	0x0800c339
 800c314:	0800c341 	.word	0x0800c341
 800c318:	2300      	movs	r3, #0
 800c31a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c31e:	e2f0      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c320:	2304      	movs	r3, #4
 800c322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c326:	e2ec      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c328:	2308      	movs	r3, #8
 800c32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c32e:	e2e8      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c330:	2310      	movs	r3, #16
 800c332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c336:	e2e4      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c338:	2320      	movs	r3, #32
 800c33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c33e:	e2e0      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c340:	2340      	movs	r3, #64	@ 0x40
 800c342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c346:	e2dc      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c348:	2380      	movs	r3, #128	@ 0x80
 800c34a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c34e:	e2d8      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	4a4f      	ldr	r2, [pc, #316]	@ (800c494 <UART_SetConfig+0x340>)
 800c356:	4293      	cmp	r3, r2
 800c358:	d130      	bne.n	800c3bc <UART_SetConfig+0x268>
 800c35a:	4b4c      	ldr	r3, [pc, #304]	@ (800c48c <UART_SetConfig+0x338>)
 800c35c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c35e:	f003 0307 	and.w	r3, r3, #7
 800c362:	2b05      	cmp	r3, #5
 800c364:	d826      	bhi.n	800c3b4 <UART_SetConfig+0x260>
 800c366:	a201      	add	r2, pc, #4	@ (adr r2, 800c36c <UART_SetConfig+0x218>)
 800c368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c36c:	0800c385 	.word	0x0800c385
 800c370:	0800c38d 	.word	0x0800c38d
 800c374:	0800c395 	.word	0x0800c395
 800c378:	0800c39d 	.word	0x0800c39d
 800c37c:	0800c3a5 	.word	0x0800c3a5
 800c380:	0800c3ad 	.word	0x0800c3ad
 800c384:	2300      	movs	r3, #0
 800c386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c38a:	e2ba      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c38c:	2304      	movs	r3, #4
 800c38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c392:	e2b6      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c394:	2308      	movs	r3, #8
 800c396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c39a:	e2b2      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c39c:	2310      	movs	r3, #16
 800c39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3a2:	e2ae      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c3a4:	2320      	movs	r3, #32
 800c3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3aa:	e2aa      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c3ac:	2340      	movs	r3, #64	@ 0x40
 800c3ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3b2:	e2a6      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c3b4:	2380      	movs	r3, #128	@ 0x80
 800c3b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ba:	e2a2      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	4a35      	ldr	r2, [pc, #212]	@ (800c498 <UART_SetConfig+0x344>)
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d130      	bne.n	800c428 <UART_SetConfig+0x2d4>
 800c3c6:	4b31      	ldr	r3, [pc, #196]	@ (800c48c <UART_SetConfig+0x338>)
 800c3c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3ca:	f003 0307 	and.w	r3, r3, #7
 800c3ce:	2b05      	cmp	r3, #5
 800c3d0:	d826      	bhi.n	800c420 <UART_SetConfig+0x2cc>
 800c3d2:	a201      	add	r2, pc, #4	@ (adr r2, 800c3d8 <UART_SetConfig+0x284>)
 800c3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3d8:	0800c3f1 	.word	0x0800c3f1
 800c3dc:	0800c3f9 	.word	0x0800c3f9
 800c3e0:	0800c401 	.word	0x0800c401
 800c3e4:	0800c409 	.word	0x0800c409
 800c3e8:	0800c411 	.word	0x0800c411
 800c3ec:	0800c419 	.word	0x0800c419
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3f6:	e284      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c3f8:	2304      	movs	r3, #4
 800c3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3fe:	e280      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c400:	2308      	movs	r3, #8
 800c402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c406:	e27c      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c408:	2310      	movs	r3, #16
 800c40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c40e:	e278      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c410:	2320      	movs	r3, #32
 800c412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c416:	e274      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c418:	2340      	movs	r3, #64	@ 0x40
 800c41a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c41e:	e270      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c420:	2380      	movs	r3, #128	@ 0x80
 800c422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c426:	e26c      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c428:	697b      	ldr	r3, [r7, #20]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4a1b      	ldr	r2, [pc, #108]	@ (800c49c <UART_SetConfig+0x348>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d142      	bne.n	800c4b8 <UART_SetConfig+0x364>
 800c432:	4b16      	ldr	r3, [pc, #88]	@ (800c48c <UART_SetConfig+0x338>)
 800c434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c436:	f003 0307 	and.w	r3, r3, #7
 800c43a:	2b05      	cmp	r3, #5
 800c43c:	d838      	bhi.n	800c4b0 <UART_SetConfig+0x35c>
 800c43e:	a201      	add	r2, pc, #4	@ (adr r2, 800c444 <UART_SetConfig+0x2f0>)
 800c440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c444:	0800c45d 	.word	0x0800c45d
 800c448:	0800c465 	.word	0x0800c465
 800c44c:	0800c46d 	.word	0x0800c46d
 800c450:	0800c475 	.word	0x0800c475
 800c454:	0800c4a1 	.word	0x0800c4a1
 800c458:	0800c4a9 	.word	0x0800c4a9
 800c45c:	2300      	movs	r3, #0
 800c45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c462:	e24e      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c464:	2304      	movs	r3, #4
 800c466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c46a:	e24a      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c46c:	2308      	movs	r3, #8
 800c46e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c472:	e246      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c474:	2310      	movs	r3, #16
 800c476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c47a:	e242      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c47c:	cfff69f3 	.word	0xcfff69f3
 800c480:	58000c00 	.word	0x58000c00
 800c484:	11fff4ff 	.word	0x11fff4ff
 800c488:	40011000 	.word	0x40011000
 800c48c:	58024400 	.word	0x58024400
 800c490:	40004400 	.word	0x40004400
 800c494:	40004800 	.word	0x40004800
 800c498:	40004c00 	.word	0x40004c00
 800c49c:	40005000 	.word	0x40005000
 800c4a0:	2320      	movs	r3, #32
 800c4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4a6:	e22c      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c4a8:	2340      	movs	r3, #64	@ 0x40
 800c4aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4ae:	e228      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c4b0:	2380      	movs	r3, #128	@ 0x80
 800c4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4b6:	e224      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4ab1      	ldr	r2, [pc, #708]	@ (800c784 <UART_SetConfig+0x630>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d176      	bne.n	800c5b0 <UART_SetConfig+0x45c>
 800c4c2:	4bb1      	ldr	r3, [pc, #708]	@ (800c788 <UART_SetConfig+0x634>)
 800c4c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c4ca:	2b28      	cmp	r3, #40	@ 0x28
 800c4cc:	d86c      	bhi.n	800c5a8 <UART_SetConfig+0x454>
 800c4ce:	a201      	add	r2, pc, #4	@ (adr r2, 800c4d4 <UART_SetConfig+0x380>)
 800c4d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4d4:	0800c579 	.word	0x0800c579
 800c4d8:	0800c5a9 	.word	0x0800c5a9
 800c4dc:	0800c5a9 	.word	0x0800c5a9
 800c4e0:	0800c5a9 	.word	0x0800c5a9
 800c4e4:	0800c5a9 	.word	0x0800c5a9
 800c4e8:	0800c5a9 	.word	0x0800c5a9
 800c4ec:	0800c5a9 	.word	0x0800c5a9
 800c4f0:	0800c5a9 	.word	0x0800c5a9
 800c4f4:	0800c581 	.word	0x0800c581
 800c4f8:	0800c5a9 	.word	0x0800c5a9
 800c4fc:	0800c5a9 	.word	0x0800c5a9
 800c500:	0800c5a9 	.word	0x0800c5a9
 800c504:	0800c5a9 	.word	0x0800c5a9
 800c508:	0800c5a9 	.word	0x0800c5a9
 800c50c:	0800c5a9 	.word	0x0800c5a9
 800c510:	0800c5a9 	.word	0x0800c5a9
 800c514:	0800c589 	.word	0x0800c589
 800c518:	0800c5a9 	.word	0x0800c5a9
 800c51c:	0800c5a9 	.word	0x0800c5a9
 800c520:	0800c5a9 	.word	0x0800c5a9
 800c524:	0800c5a9 	.word	0x0800c5a9
 800c528:	0800c5a9 	.word	0x0800c5a9
 800c52c:	0800c5a9 	.word	0x0800c5a9
 800c530:	0800c5a9 	.word	0x0800c5a9
 800c534:	0800c591 	.word	0x0800c591
 800c538:	0800c5a9 	.word	0x0800c5a9
 800c53c:	0800c5a9 	.word	0x0800c5a9
 800c540:	0800c5a9 	.word	0x0800c5a9
 800c544:	0800c5a9 	.word	0x0800c5a9
 800c548:	0800c5a9 	.word	0x0800c5a9
 800c54c:	0800c5a9 	.word	0x0800c5a9
 800c550:	0800c5a9 	.word	0x0800c5a9
 800c554:	0800c599 	.word	0x0800c599
 800c558:	0800c5a9 	.word	0x0800c5a9
 800c55c:	0800c5a9 	.word	0x0800c5a9
 800c560:	0800c5a9 	.word	0x0800c5a9
 800c564:	0800c5a9 	.word	0x0800c5a9
 800c568:	0800c5a9 	.word	0x0800c5a9
 800c56c:	0800c5a9 	.word	0x0800c5a9
 800c570:	0800c5a9 	.word	0x0800c5a9
 800c574:	0800c5a1 	.word	0x0800c5a1
 800c578:	2301      	movs	r3, #1
 800c57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c57e:	e1c0      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c580:	2304      	movs	r3, #4
 800c582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c586:	e1bc      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c588:	2308      	movs	r3, #8
 800c58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c58e:	e1b8      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c590:	2310      	movs	r3, #16
 800c592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c596:	e1b4      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c598:	2320      	movs	r3, #32
 800c59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c59e:	e1b0      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c5a0:	2340      	movs	r3, #64	@ 0x40
 800c5a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5a6:	e1ac      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c5a8:	2380      	movs	r3, #128	@ 0x80
 800c5aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5ae:	e1a8      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4a75      	ldr	r2, [pc, #468]	@ (800c78c <UART_SetConfig+0x638>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d130      	bne.n	800c61c <UART_SetConfig+0x4c8>
 800c5ba:	4b73      	ldr	r3, [pc, #460]	@ (800c788 <UART_SetConfig+0x634>)
 800c5bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5be:	f003 0307 	and.w	r3, r3, #7
 800c5c2:	2b05      	cmp	r3, #5
 800c5c4:	d826      	bhi.n	800c614 <UART_SetConfig+0x4c0>
 800c5c6:	a201      	add	r2, pc, #4	@ (adr r2, 800c5cc <UART_SetConfig+0x478>)
 800c5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5cc:	0800c5e5 	.word	0x0800c5e5
 800c5d0:	0800c5ed 	.word	0x0800c5ed
 800c5d4:	0800c5f5 	.word	0x0800c5f5
 800c5d8:	0800c5fd 	.word	0x0800c5fd
 800c5dc:	0800c605 	.word	0x0800c605
 800c5e0:	0800c60d 	.word	0x0800c60d
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5ea:	e18a      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c5ec:	2304      	movs	r3, #4
 800c5ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5f2:	e186      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c5f4:	2308      	movs	r3, #8
 800c5f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5fa:	e182      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c5fc:	2310      	movs	r3, #16
 800c5fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c602:	e17e      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c604:	2320      	movs	r3, #32
 800c606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c60a:	e17a      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c60c:	2340      	movs	r3, #64	@ 0x40
 800c60e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c612:	e176      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c614:	2380      	movs	r3, #128	@ 0x80
 800c616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c61a:	e172      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	4a5b      	ldr	r2, [pc, #364]	@ (800c790 <UART_SetConfig+0x63c>)
 800c622:	4293      	cmp	r3, r2
 800c624:	d130      	bne.n	800c688 <UART_SetConfig+0x534>
 800c626:	4b58      	ldr	r3, [pc, #352]	@ (800c788 <UART_SetConfig+0x634>)
 800c628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c62a:	f003 0307 	and.w	r3, r3, #7
 800c62e:	2b05      	cmp	r3, #5
 800c630:	d826      	bhi.n	800c680 <UART_SetConfig+0x52c>
 800c632:	a201      	add	r2, pc, #4	@ (adr r2, 800c638 <UART_SetConfig+0x4e4>)
 800c634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c638:	0800c651 	.word	0x0800c651
 800c63c:	0800c659 	.word	0x0800c659
 800c640:	0800c661 	.word	0x0800c661
 800c644:	0800c669 	.word	0x0800c669
 800c648:	0800c671 	.word	0x0800c671
 800c64c:	0800c679 	.word	0x0800c679
 800c650:	2300      	movs	r3, #0
 800c652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c656:	e154      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c658:	2304      	movs	r3, #4
 800c65a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c65e:	e150      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c660:	2308      	movs	r3, #8
 800c662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c666:	e14c      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c668:	2310      	movs	r3, #16
 800c66a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c66e:	e148      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c670:	2320      	movs	r3, #32
 800c672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c676:	e144      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c678:	2340      	movs	r3, #64	@ 0x40
 800c67a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c67e:	e140      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c680:	2380      	movs	r3, #128	@ 0x80
 800c682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c686:	e13c      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	4a41      	ldr	r2, [pc, #260]	@ (800c794 <UART_SetConfig+0x640>)
 800c68e:	4293      	cmp	r3, r2
 800c690:	f040 8082 	bne.w	800c798 <UART_SetConfig+0x644>
 800c694:	4b3c      	ldr	r3, [pc, #240]	@ (800c788 <UART_SetConfig+0x634>)
 800c696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c698:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c69c:	2b28      	cmp	r3, #40	@ 0x28
 800c69e:	d86d      	bhi.n	800c77c <UART_SetConfig+0x628>
 800c6a0:	a201      	add	r2, pc, #4	@ (adr r2, 800c6a8 <UART_SetConfig+0x554>)
 800c6a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6a6:	bf00      	nop
 800c6a8:	0800c74d 	.word	0x0800c74d
 800c6ac:	0800c77d 	.word	0x0800c77d
 800c6b0:	0800c77d 	.word	0x0800c77d
 800c6b4:	0800c77d 	.word	0x0800c77d
 800c6b8:	0800c77d 	.word	0x0800c77d
 800c6bc:	0800c77d 	.word	0x0800c77d
 800c6c0:	0800c77d 	.word	0x0800c77d
 800c6c4:	0800c77d 	.word	0x0800c77d
 800c6c8:	0800c755 	.word	0x0800c755
 800c6cc:	0800c77d 	.word	0x0800c77d
 800c6d0:	0800c77d 	.word	0x0800c77d
 800c6d4:	0800c77d 	.word	0x0800c77d
 800c6d8:	0800c77d 	.word	0x0800c77d
 800c6dc:	0800c77d 	.word	0x0800c77d
 800c6e0:	0800c77d 	.word	0x0800c77d
 800c6e4:	0800c77d 	.word	0x0800c77d
 800c6e8:	0800c75d 	.word	0x0800c75d
 800c6ec:	0800c77d 	.word	0x0800c77d
 800c6f0:	0800c77d 	.word	0x0800c77d
 800c6f4:	0800c77d 	.word	0x0800c77d
 800c6f8:	0800c77d 	.word	0x0800c77d
 800c6fc:	0800c77d 	.word	0x0800c77d
 800c700:	0800c77d 	.word	0x0800c77d
 800c704:	0800c77d 	.word	0x0800c77d
 800c708:	0800c765 	.word	0x0800c765
 800c70c:	0800c77d 	.word	0x0800c77d
 800c710:	0800c77d 	.word	0x0800c77d
 800c714:	0800c77d 	.word	0x0800c77d
 800c718:	0800c77d 	.word	0x0800c77d
 800c71c:	0800c77d 	.word	0x0800c77d
 800c720:	0800c77d 	.word	0x0800c77d
 800c724:	0800c77d 	.word	0x0800c77d
 800c728:	0800c76d 	.word	0x0800c76d
 800c72c:	0800c77d 	.word	0x0800c77d
 800c730:	0800c77d 	.word	0x0800c77d
 800c734:	0800c77d 	.word	0x0800c77d
 800c738:	0800c77d 	.word	0x0800c77d
 800c73c:	0800c77d 	.word	0x0800c77d
 800c740:	0800c77d 	.word	0x0800c77d
 800c744:	0800c77d 	.word	0x0800c77d
 800c748:	0800c775 	.word	0x0800c775
 800c74c:	2301      	movs	r3, #1
 800c74e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c752:	e0d6      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c754:	2304      	movs	r3, #4
 800c756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c75a:	e0d2      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c75c:	2308      	movs	r3, #8
 800c75e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c762:	e0ce      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c764:	2310      	movs	r3, #16
 800c766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c76a:	e0ca      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c76c:	2320      	movs	r3, #32
 800c76e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c772:	e0c6      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c774:	2340      	movs	r3, #64	@ 0x40
 800c776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c77a:	e0c2      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c77c:	2380      	movs	r3, #128	@ 0x80
 800c77e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c782:	e0be      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c784:	40011400 	.word	0x40011400
 800c788:	58024400 	.word	0x58024400
 800c78c:	40007800 	.word	0x40007800
 800c790:	40007c00 	.word	0x40007c00
 800c794:	40011800 	.word	0x40011800
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	4aad      	ldr	r2, [pc, #692]	@ (800ca54 <UART_SetConfig+0x900>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d176      	bne.n	800c890 <UART_SetConfig+0x73c>
 800c7a2:	4bad      	ldr	r3, [pc, #692]	@ (800ca58 <UART_SetConfig+0x904>)
 800c7a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c7a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c7aa:	2b28      	cmp	r3, #40	@ 0x28
 800c7ac:	d86c      	bhi.n	800c888 <UART_SetConfig+0x734>
 800c7ae:	a201      	add	r2, pc, #4	@ (adr r2, 800c7b4 <UART_SetConfig+0x660>)
 800c7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7b4:	0800c859 	.word	0x0800c859
 800c7b8:	0800c889 	.word	0x0800c889
 800c7bc:	0800c889 	.word	0x0800c889
 800c7c0:	0800c889 	.word	0x0800c889
 800c7c4:	0800c889 	.word	0x0800c889
 800c7c8:	0800c889 	.word	0x0800c889
 800c7cc:	0800c889 	.word	0x0800c889
 800c7d0:	0800c889 	.word	0x0800c889
 800c7d4:	0800c861 	.word	0x0800c861
 800c7d8:	0800c889 	.word	0x0800c889
 800c7dc:	0800c889 	.word	0x0800c889
 800c7e0:	0800c889 	.word	0x0800c889
 800c7e4:	0800c889 	.word	0x0800c889
 800c7e8:	0800c889 	.word	0x0800c889
 800c7ec:	0800c889 	.word	0x0800c889
 800c7f0:	0800c889 	.word	0x0800c889
 800c7f4:	0800c869 	.word	0x0800c869
 800c7f8:	0800c889 	.word	0x0800c889
 800c7fc:	0800c889 	.word	0x0800c889
 800c800:	0800c889 	.word	0x0800c889
 800c804:	0800c889 	.word	0x0800c889
 800c808:	0800c889 	.word	0x0800c889
 800c80c:	0800c889 	.word	0x0800c889
 800c810:	0800c889 	.word	0x0800c889
 800c814:	0800c871 	.word	0x0800c871
 800c818:	0800c889 	.word	0x0800c889
 800c81c:	0800c889 	.word	0x0800c889
 800c820:	0800c889 	.word	0x0800c889
 800c824:	0800c889 	.word	0x0800c889
 800c828:	0800c889 	.word	0x0800c889
 800c82c:	0800c889 	.word	0x0800c889
 800c830:	0800c889 	.word	0x0800c889
 800c834:	0800c879 	.word	0x0800c879
 800c838:	0800c889 	.word	0x0800c889
 800c83c:	0800c889 	.word	0x0800c889
 800c840:	0800c889 	.word	0x0800c889
 800c844:	0800c889 	.word	0x0800c889
 800c848:	0800c889 	.word	0x0800c889
 800c84c:	0800c889 	.word	0x0800c889
 800c850:	0800c889 	.word	0x0800c889
 800c854:	0800c881 	.word	0x0800c881
 800c858:	2301      	movs	r3, #1
 800c85a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c85e:	e050      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c860:	2304      	movs	r3, #4
 800c862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c866:	e04c      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c868:	2308      	movs	r3, #8
 800c86a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c86e:	e048      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c870:	2310      	movs	r3, #16
 800c872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c876:	e044      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c878:	2320      	movs	r3, #32
 800c87a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c87e:	e040      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c880:	2340      	movs	r3, #64	@ 0x40
 800c882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c886:	e03c      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c888:	2380      	movs	r3, #128	@ 0x80
 800c88a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c88e:	e038      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4a71      	ldr	r2, [pc, #452]	@ (800ca5c <UART_SetConfig+0x908>)
 800c896:	4293      	cmp	r3, r2
 800c898:	d130      	bne.n	800c8fc <UART_SetConfig+0x7a8>
 800c89a:	4b6f      	ldr	r3, [pc, #444]	@ (800ca58 <UART_SetConfig+0x904>)
 800c89c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c89e:	f003 0307 	and.w	r3, r3, #7
 800c8a2:	2b05      	cmp	r3, #5
 800c8a4:	d826      	bhi.n	800c8f4 <UART_SetConfig+0x7a0>
 800c8a6:	a201      	add	r2, pc, #4	@ (adr r2, 800c8ac <UART_SetConfig+0x758>)
 800c8a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8ac:	0800c8c5 	.word	0x0800c8c5
 800c8b0:	0800c8cd 	.word	0x0800c8cd
 800c8b4:	0800c8d5 	.word	0x0800c8d5
 800c8b8:	0800c8dd 	.word	0x0800c8dd
 800c8bc:	0800c8e5 	.word	0x0800c8e5
 800c8c0:	0800c8ed 	.word	0x0800c8ed
 800c8c4:	2302      	movs	r3, #2
 800c8c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8ca:	e01a      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c8cc:	2304      	movs	r3, #4
 800c8ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8d2:	e016      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c8d4:	2308      	movs	r3, #8
 800c8d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8da:	e012      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c8dc:	2310      	movs	r3, #16
 800c8de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8e2:	e00e      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c8e4:	2320      	movs	r3, #32
 800c8e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8ea:	e00a      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c8ec:	2340      	movs	r3, #64	@ 0x40
 800c8ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8f2:	e006      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c8f4:	2380      	movs	r3, #128	@ 0x80
 800c8f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8fa:	e002      	b.n	800c902 <UART_SetConfig+0x7ae>
 800c8fc:	2380      	movs	r3, #128	@ 0x80
 800c8fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	4a55      	ldr	r2, [pc, #340]	@ (800ca5c <UART_SetConfig+0x908>)
 800c908:	4293      	cmp	r3, r2
 800c90a:	f040 80f8 	bne.w	800cafe <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c90e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c912:	2b20      	cmp	r3, #32
 800c914:	dc46      	bgt.n	800c9a4 <UART_SetConfig+0x850>
 800c916:	2b02      	cmp	r3, #2
 800c918:	db75      	blt.n	800ca06 <UART_SetConfig+0x8b2>
 800c91a:	3b02      	subs	r3, #2
 800c91c:	2b1e      	cmp	r3, #30
 800c91e:	d872      	bhi.n	800ca06 <UART_SetConfig+0x8b2>
 800c920:	a201      	add	r2, pc, #4	@ (adr r2, 800c928 <UART_SetConfig+0x7d4>)
 800c922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c926:	bf00      	nop
 800c928:	0800c9ab 	.word	0x0800c9ab
 800c92c:	0800ca07 	.word	0x0800ca07
 800c930:	0800c9b3 	.word	0x0800c9b3
 800c934:	0800ca07 	.word	0x0800ca07
 800c938:	0800ca07 	.word	0x0800ca07
 800c93c:	0800ca07 	.word	0x0800ca07
 800c940:	0800c9c3 	.word	0x0800c9c3
 800c944:	0800ca07 	.word	0x0800ca07
 800c948:	0800ca07 	.word	0x0800ca07
 800c94c:	0800ca07 	.word	0x0800ca07
 800c950:	0800ca07 	.word	0x0800ca07
 800c954:	0800ca07 	.word	0x0800ca07
 800c958:	0800ca07 	.word	0x0800ca07
 800c95c:	0800ca07 	.word	0x0800ca07
 800c960:	0800c9d3 	.word	0x0800c9d3
 800c964:	0800ca07 	.word	0x0800ca07
 800c968:	0800ca07 	.word	0x0800ca07
 800c96c:	0800ca07 	.word	0x0800ca07
 800c970:	0800ca07 	.word	0x0800ca07
 800c974:	0800ca07 	.word	0x0800ca07
 800c978:	0800ca07 	.word	0x0800ca07
 800c97c:	0800ca07 	.word	0x0800ca07
 800c980:	0800ca07 	.word	0x0800ca07
 800c984:	0800ca07 	.word	0x0800ca07
 800c988:	0800ca07 	.word	0x0800ca07
 800c98c:	0800ca07 	.word	0x0800ca07
 800c990:	0800ca07 	.word	0x0800ca07
 800c994:	0800ca07 	.word	0x0800ca07
 800c998:	0800ca07 	.word	0x0800ca07
 800c99c:	0800ca07 	.word	0x0800ca07
 800c9a0:	0800c9f9 	.word	0x0800c9f9
 800c9a4:	2b40      	cmp	r3, #64	@ 0x40
 800c9a6:	d02a      	beq.n	800c9fe <UART_SetConfig+0x8aa>
 800c9a8:	e02d      	b.n	800ca06 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c9aa:	f7fc fc67 	bl	800927c <HAL_RCCEx_GetD3PCLK1Freq>
 800c9ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c9b0:	e02f      	b.n	800ca12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f7fc fc76 	bl	80092a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c9bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9c0:	e027      	b.n	800ca12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9c2:	f107 0318 	add.w	r3, r7, #24
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f7fc fdc2 	bl	8009550 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c9cc:	69fb      	ldr	r3, [r7, #28]
 800c9ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9d0:	e01f      	b.n	800ca12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9d2:	4b21      	ldr	r3, [pc, #132]	@ (800ca58 <UART_SetConfig+0x904>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f003 0320 	and.w	r3, r3, #32
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d009      	beq.n	800c9f2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c9de:	4b1e      	ldr	r3, [pc, #120]	@ (800ca58 <UART_SetConfig+0x904>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	08db      	lsrs	r3, r3, #3
 800c9e4:	f003 0303 	and.w	r3, r3, #3
 800c9e8:	4a1d      	ldr	r2, [pc, #116]	@ (800ca60 <UART_SetConfig+0x90c>)
 800c9ea:	fa22 f303 	lsr.w	r3, r2, r3
 800c9ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c9f0:	e00f      	b.n	800ca12 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c9f2:	4b1b      	ldr	r3, [pc, #108]	@ (800ca60 <UART_SetConfig+0x90c>)
 800c9f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9f6:	e00c      	b.n	800ca12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c9f8:	4b1a      	ldr	r3, [pc, #104]	@ (800ca64 <UART_SetConfig+0x910>)
 800c9fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9fc:	e009      	b.n	800ca12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ca02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca04:	e005      	b.n	800ca12 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ca06:	2300      	movs	r3, #0
 800ca08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ca10:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ca12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	f000 81ee 	beq.w	800cdf6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca1e:	4a12      	ldr	r2, [pc, #72]	@ (800ca68 <UART_SetConfig+0x914>)
 800ca20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca24:	461a      	mov	r2, r3
 800ca26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca28:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca2c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	685a      	ldr	r2, [r3, #4]
 800ca32:	4613      	mov	r3, r2
 800ca34:	005b      	lsls	r3, r3, #1
 800ca36:	4413      	add	r3, r2
 800ca38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d305      	bcc.n	800ca4a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	685b      	ldr	r3, [r3, #4]
 800ca42:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca46:	429a      	cmp	r2, r3
 800ca48:	d910      	bls.n	800ca6c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ca50:	e1d1      	b.n	800cdf6 <UART_SetConfig+0xca2>
 800ca52:	bf00      	nop
 800ca54:	40011c00 	.word	0x40011c00
 800ca58:	58024400 	.word	0x58024400
 800ca5c:	58000c00 	.word	0x58000c00
 800ca60:	03d09000 	.word	0x03d09000
 800ca64:	003d0900 	.word	0x003d0900
 800ca68:	08027b78 	.word	0x08027b78
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca6e:	2200      	movs	r2, #0
 800ca70:	60bb      	str	r3, [r7, #8]
 800ca72:	60fa      	str	r2, [r7, #12]
 800ca74:	697b      	ldr	r3, [r7, #20]
 800ca76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca78:	4ac0      	ldr	r2, [pc, #768]	@ (800cd7c <UART_SetConfig+0xc28>)
 800ca7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca7e:	b29b      	uxth	r3, r3
 800ca80:	2200      	movs	r2, #0
 800ca82:	603b      	str	r3, [r7, #0]
 800ca84:	607a      	str	r2, [r7, #4]
 800ca86:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ca8e:	f7f3 fea3 	bl	80007d8 <__aeabi_uldivmod>
 800ca92:	4602      	mov	r2, r0
 800ca94:	460b      	mov	r3, r1
 800ca96:	4610      	mov	r0, r2
 800ca98:	4619      	mov	r1, r3
 800ca9a:	f04f 0200 	mov.w	r2, #0
 800ca9e:	f04f 0300 	mov.w	r3, #0
 800caa2:	020b      	lsls	r3, r1, #8
 800caa4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800caa8:	0202      	lsls	r2, r0, #8
 800caaa:	6979      	ldr	r1, [r7, #20]
 800caac:	6849      	ldr	r1, [r1, #4]
 800caae:	0849      	lsrs	r1, r1, #1
 800cab0:	2000      	movs	r0, #0
 800cab2:	460c      	mov	r4, r1
 800cab4:	4605      	mov	r5, r0
 800cab6:	eb12 0804 	adds.w	r8, r2, r4
 800caba:	eb43 0905 	adc.w	r9, r3, r5
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	685b      	ldr	r3, [r3, #4]
 800cac2:	2200      	movs	r2, #0
 800cac4:	469a      	mov	sl, r3
 800cac6:	4693      	mov	fp, r2
 800cac8:	4652      	mov	r2, sl
 800caca:	465b      	mov	r3, fp
 800cacc:	4640      	mov	r0, r8
 800cace:	4649      	mov	r1, r9
 800cad0:	f7f3 fe82 	bl	80007d8 <__aeabi_uldivmod>
 800cad4:	4602      	mov	r2, r0
 800cad6:	460b      	mov	r3, r1
 800cad8:	4613      	mov	r3, r2
 800cada:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cadc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cade:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cae2:	d308      	bcc.n	800caf6 <UART_SetConfig+0x9a2>
 800cae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cae6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800caea:	d204      	bcs.n	800caf6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800caf2:	60da      	str	r2, [r3, #12]
 800caf4:	e17f      	b.n	800cdf6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800caf6:	2301      	movs	r3, #1
 800caf8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cafc:	e17b      	b.n	800cdf6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	69db      	ldr	r3, [r3, #28]
 800cb02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cb06:	f040 80bd 	bne.w	800cc84 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800cb0a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cb0e:	2b20      	cmp	r3, #32
 800cb10:	dc48      	bgt.n	800cba4 <UART_SetConfig+0xa50>
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	db7b      	blt.n	800cc0e <UART_SetConfig+0xaba>
 800cb16:	2b20      	cmp	r3, #32
 800cb18:	d879      	bhi.n	800cc0e <UART_SetConfig+0xaba>
 800cb1a:	a201      	add	r2, pc, #4	@ (adr r2, 800cb20 <UART_SetConfig+0x9cc>)
 800cb1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb20:	0800cbab 	.word	0x0800cbab
 800cb24:	0800cbb3 	.word	0x0800cbb3
 800cb28:	0800cc0f 	.word	0x0800cc0f
 800cb2c:	0800cc0f 	.word	0x0800cc0f
 800cb30:	0800cbbb 	.word	0x0800cbbb
 800cb34:	0800cc0f 	.word	0x0800cc0f
 800cb38:	0800cc0f 	.word	0x0800cc0f
 800cb3c:	0800cc0f 	.word	0x0800cc0f
 800cb40:	0800cbcb 	.word	0x0800cbcb
 800cb44:	0800cc0f 	.word	0x0800cc0f
 800cb48:	0800cc0f 	.word	0x0800cc0f
 800cb4c:	0800cc0f 	.word	0x0800cc0f
 800cb50:	0800cc0f 	.word	0x0800cc0f
 800cb54:	0800cc0f 	.word	0x0800cc0f
 800cb58:	0800cc0f 	.word	0x0800cc0f
 800cb5c:	0800cc0f 	.word	0x0800cc0f
 800cb60:	0800cbdb 	.word	0x0800cbdb
 800cb64:	0800cc0f 	.word	0x0800cc0f
 800cb68:	0800cc0f 	.word	0x0800cc0f
 800cb6c:	0800cc0f 	.word	0x0800cc0f
 800cb70:	0800cc0f 	.word	0x0800cc0f
 800cb74:	0800cc0f 	.word	0x0800cc0f
 800cb78:	0800cc0f 	.word	0x0800cc0f
 800cb7c:	0800cc0f 	.word	0x0800cc0f
 800cb80:	0800cc0f 	.word	0x0800cc0f
 800cb84:	0800cc0f 	.word	0x0800cc0f
 800cb88:	0800cc0f 	.word	0x0800cc0f
 800cb8c:	0800cc0f 	.word	0x0800cc0f
 800cb90:	0800cc0f 	.word	0x0800cc0f
 800cb94:	0800cc0f 	.word	0x0800cc0f
 800cb98:	0800cc0f 	.word	0x0800cc0f
 800cb9c:	0800cc0f 	.word	0x0800cc0f
 800cba0:	0800cc01 	.word	0x0800cc01
 800cba4:	2b40      	cmp	r3, #64	@ 0x40
 800cba6:	d02e      	beq.n	800cc06 <UART_SetConfig+0xab2>
 800cba8:	e031      	b.n	800cc0e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cbaa:	f7fb f99b 	bl	8007ee4 <HAL_RCC_GetPCLK1Freq>
 800cbae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cbb0:	e033      	b.n	800cc1a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cbb2:	f7fb f9ad 	bl	8007f10 <HAL_RCC_GetPCLK2Freq>
 800cbb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cbb8:	e02f      	b.n	800cc1a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f7fc fb72 	bl	80092a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cbc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbc8:	e027      	b.n	800cc1a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbca:	f107 0318 	add.w	r3, r7, #24
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f7fc fcbe 	bl	8009550 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cbd4:	69fb      	ldr	r3, [r7, #28]
 800cbd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbd8:	e01f      	b.n	800cc1a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cbda:	4b69      	ldr	r3, [pc, #420]	@ (800cd80 <UART_SetConfig+0xc2c>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	f003 0320 	and.w	r3, r3, #32
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d009      	beq.n	800cbfa <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cbe6:	4b66      	ldr	r3, [pc, #408]	@ (800cd80 <UART_SetConfig+0xc2c>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	08db      	lsrs	r3, r3, #3
 800cbec:	f003 0303 	and.w	r3, r3, #3
 800cbf0:	4a64      	ldr	r2, [pc, #400]	@ (800cd84 <UART_SetConfig+0xc30>)
 800cbf2:	fa22 f303 	lsr.w	r3, r2, r3
 800cbf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cbf8:	e00f      	b.n	800cc1a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800cbfa:	4b62      	ldr	r3, [pc, #392]	@ (800cd84 <UART_SetConfig+0xc30>)
 800cbfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbfe:	e00c      	b.n	800cc1a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cc00:	4b61      	ldr	r3, [pc, #388]	@ (800cd88 <UART_SetConfig+0xc34>)
 800cc02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc04:	e009      	b.n	800cc1a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cc0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc0c:	e005      	b.n	800cc1a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cc12:	2301      	movs	r3, #1
 800cc14:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cc18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cc1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	f000 80ea 	beq.w	800cdf6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc26:	4a55      	ldr	r2, [pc, #340]	@ (800cd7c <UART_SetConfig+0xc28>)
 800cc28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc2c:	461a      	mov	r2, r3
 800cc2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc30:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc34:	005a      	lsls	r2, r3, #1
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	085b      	lsrs	r3, r3, #1
 800cc3c:	441a      	add	r2, r3
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc46:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc4a:	2b0f      	cmp	r3, #15
 800cc4c:	d916      	bls.n	800cc7c <UART_SetConfig+0xb28>
 800cc4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cc54:	d212      	bcs.n	800cc7c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cc56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc58:	b29b      	uxth	r3, r3
 800cc5a:	f023 030f 	bic.w	r3, r3, #15
 800cc5e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cc60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc62:	085b      	lsrs	r3, r3, #1
 800cc64:	b29b      	uxth	r3, r3
 800cc66:	f003 0307 	and.w	r3, r3, #7
 800cc6a:	b29a      	uxth	r2, r3
 800cc6c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cc6e:	4313      	orrs	r3, r2
 800cc70:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800cc78:	60da      	str	r2, [r3, #12]
 800cc7a:	e0bc      	b.n	800cdf6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cc82:	e0b8      	b.n	800cdf6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cc84:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cc88:	2b20      	cmp	r3, #32
 800cc8a:	dc4b      	bgt.n	800cd24 <UART_SetConfig+0xbd0>
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	f2c0 8087 	blt.w	800cda0 <UART_SetConfig+0xc4c>
 800cc92:	2b20      	cmp	r3, #32
 800cc94:	f200 8084 	bhi.w	800cda0 <UART_SetConfig+0xc4c>
 800cc98:	a201      	add	r2, pc, #4	@ (adr r2, 800cca0 <UART_SetConfig+0xb4c>)
 800cc9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc9e:	bf00      	nop
 800cca0:	0800cd2b 	.word	0x0800cd2b
 800cca4:	0800cd33 	.word	0x0800cd33
 800cca8:	0800cda1 	.word	0x0800cda1
 800ccac:	0800cda1 	.word	0x0800cda1
 800ccb0:	0800cd3b 	.word	0x0800cd3b
 800ccb4:	0800cda1 	.word	0x0800cda1
 800ccb8:	0800cda1 	.word	0x0800cda1
 800ccbc:	0800cda1 	.word	0x0800cda1
 800ccc0:	0800cd4b 	.word	0x0800cd4b
 800ccc4:	0800cda1 	.word	0x0800cda1
 800ccc8:	0800cda1 	.word	0x0800cda1
 800cccc:	0800cda1 	.word	0x0800cda1
 800ccd0:	0800cda1 	.word	0x0800cda1
 800ccd4:	0800cda1 	.word	0x0800cda1
 800ccd8:	0800cda1 	.word	0x0800cda1
 800ccdc:	0800cda1 	.word	0x0800cda1
 800cce0:	0800cd5b 	.word	0x0800cd5b
 800cce4:	0800cda1 	.word	0x0800cda1
 800cce8:	0800cda1 	.word	0x0800cda1
 800ccec:	0800cda1 	.word	0x0800cda1
 800ccf0:	0800cda1 	.word	0x0800cda1
 800ccf4:	0800cda1 	.word	0x0800cda1
 800ccf8:	0800cda1 	.word	0x0800cda1
 800ccfc:	0800cda1 	.word	0x0800cda1
 800cd00:	0800cda1 	.word	0x0800cda1
 800cd04:	0800cda1 	.word	0x0800cda1
 800cd08:	0800cda1 	.word	0x0800cda1
 800cd0c:	0800cda1 	.word	0x0800cda1
 800cd10:	0800cda1 	.word	0x0800cda1
 800cd14:	0800cda1 	.word	0x0800cda1
 800cd18:	0800cda1 	.word	0x0800cda1
 800cd1c:	0800cda1 	.word	0x0800cda1
 800cd20:	0800cd93 	.word	0x0800cd93
 800cd24:	2b40      	cmp	r3, #64	@ 0x40
 800cd26:	d037      	beq.n	800cd98 <UART_SetConfig+0xc44>
 800cd28:	e03a      	b.n	800cda0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd2a:	f7fb f8db 	bl	8007ee4 <HAL_RCC_GetPCLK1Freq>
 800cd2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cd30:	e03c      	b.n	800cdac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cd32:	f7fb f8ed 	bl	8007f10 <HAL_RCC_GetPCLK2Freq>
 800cd36:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cd38:	e038      	b.n	800cdac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f7fc fab2 	bl	80092a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cd44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd48:	e030      	b.n	800cdac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd4a:	f107 0318 	add.w	r3, r7, #24
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f7fc fbfe 	bl	8009550 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cd54:	69fb      	ldr	r3, [r7, #28]
 800cd56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd58:	e028      	b.n	800cdac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd5a:	4b09      	ldr	r3, [pc, #36]	@ (800cd80 <UART_SetConfig+0xc2c>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f003 0320 	and.w	r3, r3, #32
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d012      	beq.n	800cd8c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cd66:	4b06      	ldr	r3, [pc, #24]	@ (800cd80 <UART_SetConfig+0xc2c>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	08db      	lsrs	r3, r3, #3
 800cd6c:	f003 0303 	and.w	r3, r3, #3
 800cd70:	4a04      	ldr	r2, [pc, #16]	@ (800cd84 <UART_SetConfig+0xc30>)
 800cd72:	fa22 f303 	lsr.w	r3, r2, r3
 800cd76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cd78:	e018      	b.n	800cdac <UART_SetConfig+0xc58>
 800cd7a:	bf00      	nop
 800cd7c:	08027b78 	.word	0x08027b78
 800cd80:	58024400 	.word	0x58024400
 800cd84:	03d09000 	.word	0x03d09000
 800cd88:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800cd8c:	4b24      	ldr	r3, [pc, #144]	@ (800ce20 <UART_SetConfig+0xccc>)
 800cd8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd90:	e00c      	b.n	800cdac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cd92:	4b24      	ldr	r3, [pc, #144]	@ (800ce24 <UART_SetConfig+0xcd0>)
 800cd94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd96:	e009      	b.n	800cdac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cd9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd9e:	e005      	b.n	800cdac <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800cda0:	2300      	movs	r3, #0
 800cda2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cda4:	2301      	movs	r3, #1
 800cda6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cdaa:	bf00      	nop
    }

    if (pclk != 0U)
 800cdac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d021      	beq.n	800cdf6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdb6:	4a1c      	ldr	r2, [pc, #112]	@ (800ce28 <UART_SetConfig+0xcd4>)
 800cdb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cdbc:	461a      	mov	r2, r3
 800cdbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdc0:	fbb3 f2f2 	udiv	r2, r3, r2
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	685b      	ldr	r3, [r3, #4]
 800cdc8:	085b      	lsrs	r3, r3, #1
 800cdca:	441a      	add	r2, r3
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdd4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cdd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdd8:	2b0f      	cmp	r3, #15
 800cdda:	d909      	bls.n	800cdf0 <UART_SetConfig+0xc9c>
 800cddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cde2:	d205      	bcs.n	800cdf0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cde4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cde6:	b29a      	uxth	r2, r3
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	60da      	str	r2, [r3, #12]
 800cdee:	e002      	b.n	800cdf6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	2201      	movs	r2, #1
 800cdfa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	2201      	movs	r2, #1
 800ce02:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	2200      	movs	r2, #0
 800ce0a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ce12:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3748      	adds	r7, #72	@ 0x48
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ce20:	03d09000 	.word	0x03d09000
 800ce24:	003d0900 	.word	0x003d0900
 800ce28:	08027b78 	.word	0x08027b78

0800ce2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b083      	sub	sp, #12
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce38:	f003 0308 	and.w	r3, r3, #8
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d00a      	beq.n	800ce56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	430a      	orrs	r2, r1
 800ce54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce5a:	f003 0301 	and.w	r3, r3, #1
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d00a      	beq.n	800ce78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	685b      	ldr	r3, [r3, #4]
 800ce68:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	430a      	orrs	r2, r1
 800ce76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce7c:	f003 0302 	and.w	r3, r3, #2
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d00a      	beq.n	800ce9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	430a      	orrs	r2, r1
 800ce98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce9e:	f003 0304 	and.w	r3, r3, #4
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d00a      	beq.n	800cebc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	685b      	ldr	r3, [r3, #4]
 800ceac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	430a      	orrs	r2, r1
 800ceba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cec0:	f003 0310 	and.w	r3, r3, #16
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d00a      	beq.n	800cede <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	689b      	ldr	r3, [r3, #8]
 800cece:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	430a      	orrs	r2, r1
 800cedc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cee2:	f003 0320 	and.w	r3, r3, #32
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d00a      	beq.n	800cf00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	689b      	ldr	r3, [r3, #8]
 800cef0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	430a      	orrs	r2, r1
 800cefe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d01a      	beq.n	800cf42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	685b      	ldr	r3, [r3, #4]
 800cf12:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	430a      	orrs	r2, r1
 800cf20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cf2a:	d10a      	bne.n	800cf42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	685b      	ldr	r3, [r3, #4]
 800cf32:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	430a      	orrs	r2, r1
 800cf40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d00a      	beq.n	800cf64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	685b      	ldr	r3, [r3, #4]
 800cf54:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	430a      	orrs	r2, r1
 800cf62:	605a      	str	r2, [r3, #4]
  }
}
 800cf64:	bf00      	nop
 800cf66:	370c      	adds	r7, #12
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6e:	4770      	bx	lr

0800cf70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b098      	sub	sp, #96	@ 0x60
 800cf74:	af02      	add	r7, sp, #8
 800cf76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cf80:	f7f6 fe1a 	bl	8003bb8 <HAL_GetTick>
 800cf84:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	f003 0308 	and.w	r3, r3, #8
 800cf90:	2b08      	cmp	r3, #8
 800cf92:	d12f      	bne.n	800cff4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cf98:	9300      	str	r3, [sp, #0]
 800cf9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f000 f88e 	bl	800d0c4 <UART_WaitOnFlagUntilTimeout>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d022      	beq.n	800cff4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfb6:	e853 3f00 	ldrex	r3, [r3]
 800cfba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cfbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cfc2:	653b      	str	r3, [r7, #80]	@ 0x50
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	461a      	mov	r2, r3
 800cfca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfcc:	647b      	str	r3, [r7, #68]	@ 0x44
 800cfce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfd0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cfd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cfd4:	e841 2300 	strex	r3, r2, [r1]
 800cfd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cfda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d1e6      	bne.n	800cfae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2220      	movs	r2, #32
 800cfe4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2200      	movs	r2, #0
 800cfec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cff0:	2303      	movs	r3, #3
 800cff2:	e063      	b.n	800d0bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f003 0304 	and.w	r3, r3, #4
 800cffe:	2b04      	cmp	r3, #4
 800d000:	d149      	bne.n	800d096 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d002:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d006:	9300      	str	r3, [sp, #0]
 800d008:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d00a:	2200      	movs	r2, #0
 800d00c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f000 f857 	bl	800d0c4 <UART_WaitOnFlagUntilTimeout>
 800d016:	4603      	mov	r3, r0
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d03c      	beq.n	800d096 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d024:	e853 3f00 	ldrex	r3, [r3]
 800d028:	623b      	str	r3, [r7, #32]
   return(result);
 800d02a:	6a3b      	ldr	r3, [r7, #32]
 800d02c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d030:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	461a      	mov	r2, r3
 800d038:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d03a:	633b      	str	r3, [r7, #48]	@ 0x30
 800d03c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d03e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d040:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d042:	e841 2300 	strex	r3, r2, [r1]
 800d046:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d1e6      	bne.n	800d01c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	3308      	adds	r3, #8
 800d054:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	e853 3f00 	ldrex	r3, [r3]
 800d05c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	f023 0301 	bic.w	r3, r3, #1
 800d064:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	3308      	adds	r3, #8
 800d06c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d06e:	61fa      	str	r2, [r7, #28]
 800d070:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d072:	69b9      	ldr	r1, [r7, #24]
 800d074:	69fa      	ldr	r2, [r7, #28]
 800d076:	e841 2300 	strex	r3, r2, [r1]
 800d07a:	617b      	str	r3, [r7, #20]
   return(result);
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d1e5      	bne.n	800d04e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2220      	movs	r2, #32
 800d086:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2200      	movs	r2, #0
 800d08e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d092:	2303      	movs	r3, #3
 800d094:	e012      	b.n	800d0bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2220      	movs	r2, #32
 800d09a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2220      	movs	r2, #32
 800d0a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d0ba:	2300      	movs	r3, #0
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3758      	adds	r7, #88	@ 0x58
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b084      	sub	sp, #16
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	60f8      	str	r0, [r7, #12]
 800d0cc:	60b9      	str	r1, [r7, #8]
 800d0ce:	603b      	str	r3, [r7, #0]
 800d0d0:	4613      	mov	r3, r2
 800d0d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d0d4:	e04f      	b.n	800d176 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d0d6:	69bb      	ldr	r3, [r7, #24]
 800d0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0dc:	d04b      	beq.n	800d176 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d0de:	f7f6 fd6b 	bl	8003bb8 <HAL_GetTick>
 800d0e2:	4602      	mov	r2, r0
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	1ad3      	subs	r3, r2, r3
 800d0e8:	69ba      	ldr	r2, [r7, #24]
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d302      	bcc.n	800d0f4 <UART_WaitOnFlagUntilTimeout+0x30>
 800d0ee:	69bb      	ldr	r3, [r7, #24]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d101      	bne.n	800d0f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d0f4:	2303      	movs	r3, #3
 800d0f6:	e04e      	b.n	800d196 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f003 0304 	and.w	r3, r3, #4
 800d102:	2b00      	cmp	r3, #0
 800d104:	d037      	beq.n	800d176 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	2b80      	cmp	r3, #128	@ 0x80
 800d10a:	d034      	beq.n	800d176 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	2b40      	cmp	r3, #64	@ 0x40
 800d110:	d031      	beq.n	800d176 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	69db      	ldr	r3, [r3, #28]
 800d118:	f003 0308 	and.w	r3, r3, #8
 800d11c:	2b08      	cmp	r3, #8
 800d11e:	d110      	bne.n	800d142 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	2208      	movs	r2, #8
 800d126:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d128:	68f8      	ldr	r0, [r7, #12]
 800d12a:	f000 f839 	bl	800d1a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	2208      	movs	r2, #8
 800d132:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	2200      	movs	r2, #0
 800d13a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d13e:	2301      	movs	r3, #1
 800d140:	e029      	b.n	800d196 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	69db      	ldr	r3, [r3, #28]
 800d148:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d14c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d150:	d111      	bne.n	800d176 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d15a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d15c:	68f8      	ldr	r0, [r7, #12]
 800d15e:	f000 f81f 	bl	800d1a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	2220      	movs	r2, #32
 800d166:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	2200      	movs	r2, #0
 800d16e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d172:	2303      	movs	r3, #3
 800d174:	e00f      	b.n	800d196 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	69da      	ldr	r2, [r3, #28]
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	4013      	ands	r3, r2
 800d180:	68ba      	ldr	r2, [r7, #8]
 800d182:	429a      	cmp	r2, r3
 800d184:	bf0c      	ite	eq
 800d186:	2301      	moveq	r3, #1
 800d188:	2300      	movne	r3, #0
 800d18a:	b2db      	uxtb	r3, r3
 800d18c:	461a      	mov	r2, r3
 800d18e:	79fb      	ldrb	r3, [r7, #7]
 800d190:	429a      	cmp	r2, r3
 800d192:	d0a0      	beq.n	800d0d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d194:	2300      	movs	r3, #0
}
 800d196:	4618      	mov	r0, r3
 800d198:	3710      	adds	r7, #16
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}
	...

0800d1a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	b095      	sub	sp, #84	@ 0x54
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1b0:	e853 3f00 	ldrex	r3, [r3]
 800d1b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d1bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	461a      	mov	r2, r3
 800d1c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1c6:	643b      	str	r3, [r7, #64]	@ 0x40
 800d1c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d1cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d1ce:	e841 2300 	strex	r3, r2, [r1]
 800d1d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d1d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d1e6      	bne.n	800d1a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	3308      	adds	r3, #8
 800d1e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1e2:	6a3b      	ldr	r3, [r7, #32]
 800d1e4:	e853 3f00 	ldrex	r3, [r3]
 800d1e8:	61fb      	str	r3, [r7, #28]
   return(result);
 800d1ea:	69fa      	ldr	r2, [r7, #28]
 800d1ec:	4b1e      	ldr	r3, [pc, #120]	@ (800d268 <UART_EndRxTransfer+0xc8>)
 800d1ee:	4013      	ands	r3, r2
 800d1f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	3308      	adds	r3, #8
 800d1f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d1fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d1fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d200:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d202:	e841 2300 	strex	r3, r2, [r1]
 800d206:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d1e5      	bne.n	800d1da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d212:	2b01      	cmp	r3, #1
 800d214:	d118      	bne.n	800d248 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	e853 3f00 	ldrex	r3, [r3]
 800d222:	60bb      	str	r3, [r7, #8]
   return(result);
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	f023 0310 	bic.w	r3, r3, #16
 800d22a:	647b      	str	r3, [r7, #68]	@ 0x44
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	461a      	mov	r2, r3
 800d232:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d234:	61bb      	str	r3, [r7, #24]
 800d236:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d238:	6979      	ldr	r1, [r7, #20]
 800d23a:	69ba      	ldr	r2, [r7, #24]
 800d23c:	e841 2300 	strex	r3, r2, [r1]
 800d240:	613b      	str	r3, [r7, #16]
   return(result);
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d1e6      	bne.n	800d216 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2220      	movs	r2, #32
 800d24c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2200      	movs	r2, #0
 800d254:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2200      	movs	r2, #0
 800d25a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d25c:	bf00      	nop
 800d25e:	3754      	adds	r7, #84	@ 0x54
 800d260:	46bd      	mov	sp, r7
 800d262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d266:	4770      	bx	lr
 800d268:	effffffe 	.word	0xeffffffe

0800d26c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b084      	sub	sp, #16
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d278:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	2200      	movs	r2, #0
 800d27e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2200      	movs	r2, #0
 800d286:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d28a:	68f8      	ldr	r0, [r7, #12]
 800d28c:	f7fe ff4c 	bl	800c128 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d290:	bf00      	nop
 800d292:	3710      	adds	r7, #16
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}

0800d298 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b088      	sub	sp, #32
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	e853 3f00 	ldrex	r3, [r3]
 800d2ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d2b4:	61fb      	str	r3, [r7, #28]
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	461a      	mov	r2, r3
 800d2bc:	69fb      	ldr	r3, [r7, #28]
 800d2be:	61bb      	str	r3, [r7, #24]
 800d2c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2c2:	6979      	ldr	r1, [r7, #20]
 800d2c4:	69ba      	ldr	r2, [r7, #24]
 800d2c6:	e841 2300 	strex	r3, r2, [r1]
 800d2ca:	613b      	str	r3, [r7, #16]
   return(result);
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d1e6      	bne.n	800d2a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2220      	movs	r2, #32
 800d2d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f7fe ff17 	bl	800c114 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d2e6:	bf00      	nop
 800d2e8:	3720      	adds	r7, #32
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}

0800d2ee <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d2ee:	b480      	push	{r7}
 800d2f0:	b083      	sub	sp, #12
 800d2f2:	af00      	add	r7, sp, #0
 800d2f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d2f6:	bf00      	nop
 800d2f8:	370c      	adds	r7, #12
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d300:	4770      	bx	lr

0800d302 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d302:	b480      	push	{r7}
 800d304:	b083      	sub	sp, #12
 800d306:	af00      	add	r7, sp, #0
 800d308:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d30a:	bf00      	nop
 800d30c:	370c      	adds	r7, #12
 800d30e:	46bd      	mov	sp, r7
 800d310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d314:	4770      	bx	lr

0800d316 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d316:	b480      	push	{r7}
 800d318:	b083      	sub	sp, #12
 800d31a:	af00      	add	r7, sp, #0
 800d31c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d31e:	bf00      	nop
 800d320:	370c      	adds	r7, #12
 800d322:	46bd      	mov	sp, r7
 800d324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d328:	4770      	bx	lr

0800d32a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d32a:	b480      	push	{r7}
 800d32c:	b085      	sub	sp, #20
 800d32e:	af00      	add	r7, sp, #0
 800d330:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d338:	2b01      	cmp	r3, #1
 800d33a:	d101      	bne.n	800d340 <HAL_UARTEx_DisableFifoMode+0x16>
 800d33c:	2302      	movs	r3, #2
 800d33e:	e027      	b.n	800d390 <HAL_UARTEx_DisableFifoMode+0x66>
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2201      	movs	r2, #1
 800d344:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2224      	movs	r2, #36	@ 0x24
 800d34c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	681a      	ldr	r2, [r3, #0]
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	f022 0201 	bic.w	r2, r2, #1
 800d366:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d36e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2200      	movs	r2, #0
 800d374:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	68fa      	ldr	r2, [r7, #12]
 800d37c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2220      	movs	r2, #32
 800d382:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2200      	movs	r2, #0
 800d38a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d38e:	2300      	movs	r3, #0
}
 800d390:	4618      	mov	r0, r3
 800d392:	3714      	adds	r7, #20
 800d394:	46bd      	mov	sp, r7
 800d396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39a:	4770      	bx	lr

0800d39c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b084      	sub	sp, #16
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
 800d3a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d3ac:	2b01      	cmp	r3, #1
 800d3ae:	d101      	bne.n	800d3b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d3b0:	2302      	movs	r3, #2
 800d3b2:	e02d      	b.n	800d410 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2224      	movs	r2, #36	@ 0x24
 800d3c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	681a      	ldr	r2, [r3, #0]
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	f022 0201 	bic.w	r2, r2, #1
 800d3da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	689b      	ldr	r3, [r3, #8]
 800d3e2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	683a      	ldr	r2, [r7, #0]
 800d3ec:	430a      	orrs	r2, r1
 800d3ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f000 f84f 	bl	800d494 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	68fa      	ldr	r2, [r7, #12]
 800d3fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2220      	movs	r2, #32
 800d402:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2200      	movs	r2, #0
 800d40a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d40e:	2300      	movs	r3, #0
}
 800d410:	4618      	mov	r0, r3
 800d412:	3710      	adds	r7, #16
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}

0800d418 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b084      	sub	sp, #16
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
 800d420:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d428:	2b01      	cmp	r3, #1
 800d42a:	d101      	bne.n	800d430 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d42c:	2302      	movs	r3, #2
 800d42e:	e02d      	b.n	800d48c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2201      	movs	r2, #1
 800d434:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2224      	movs	r2, #36	@ 0x24
 800d43c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	681a      	ldr	r2, [r3, #0]
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	f022 0201 	bic.w	r2, r2, #1
 800d456:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	689b      	ldr	r3, [r3, #8]
 800d45e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	683a      	ldr	r2, [r7, #0]
 800d468:	430a      	orrs	r2, r1
 800d46a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f000 f811 	bl	800d494 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	68fa      	ldr	r2, [r7, #12]
 800d478:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2220      	movs	r2, #32
 800d47e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2200      	movs	r2, #0
 800d486:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d48a:	2300      	movs	r3, #0
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	3710      	adds	r7, #16
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d494:	b480      	push	{r7}
 800d496:	b085      	sub	sp, #20
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d108      	bne.n	800d4b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2201      	movs	r2, #1
 800d4b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d4b4:	e031      	b.n	800d51a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d4b6:	2310      	movs	r3, #16
 800d4b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d4ba:	2310      	movs	r3, #16
 800d4bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	689b      	ldr	r3, [r3, #8]
 800d4c4:	0e5b      	lsrs	r3, r3, #25
 800d4c6:	b2db      	uxtb	r3, r3
 800d4c8:	f003 0307 	and.w	r3, r3, #7
 800d4cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	689b      	ldr	r3, [r3, #8]
 800d4d4:	0f5b      	lsrs	r3, r3, #29
 800d4d6:	b2db      	uxtb	r3, r3
 800d4d8:	f003 0307 	and.w	r3, r3, #7
 800d4dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d4de:	7bbb      	ldrb	r3, [r7, #14]
 800d4e0:	7b3a      	ldrb	r2, [r7, #12]
 800d4e2:	4911      	ldr	r1, [pc, #68]	@ (800d528 <UARTEx_SetNbDataToProcess+0x94>)
 800d4e4:	5c8a      	ldrb	r2, [r1, r2]
 800d4e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d4ea:	7b3a      	ldrb	r2, [r7, #12]
 800d4ec:	490f      	ldr	r1, [pc, #60]	@ (800d52c <UARTEx_SetNbDataToProcess+0x98>)
 800d4ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d4f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800d4f4:	b29a      	uxth	r2, r3
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d4fc:	7bfb      	ldrb	r3, [r7, #15]
 800d4fe:	7b7a      	ldrb	r2, [r7, #13]
 800d500:	4909      	ldr	r1, [pc, #36]	@ (800d528 <UARTEx_SetNbDataToProcess+0x94>)
 800d502:	5c8a      	ldrb	r2, [r1, r2]
 800d504:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d508:	7b7a      	ldrb	r2, [r7, #13]
 800d50a:	4908      	ldr	r1, [pc, #32]	@ (800d52c <UARTEx_SetNbDataToProcess+0x98>)
 800d50c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d50e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d512:	b29a      	uxth	r2, r3
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d51a:	bf00      	nop
 800d51c:	3714      	adds	r7, #20
 800d51e:	46bd      	mov	sp, r7
 800d520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d524:	4770      	bx	lr
 800d526:	bf00      	nop
 800d528:	08027b90 	.word	0x08027b90
 800d52c:	08027b98 	.word	0x08027b98

0800d530 <__NVIC_SystemReset>:
{
 800d530:	b480      	push	{r7}
 800d532:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800d534:	f3bf 8f4f 	dsb	sy
}
 800d538:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800d53a:	4b06      	ldr	r3, [pc, #24]	@ (800d554 <__NVIC_SystemReset+0x24>)
 800d53c:	68db      	ldr	r3, [r3, #12]
 800d53e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800d542:	4904      	ldr	r1, [pc, #16]	@ (800d554 <__NVIC_SystemReset+0x24>)
 800d544:	4b04      	ldr	r3, [pc, #16]	@ (800d558 <__NVIC_SystemReset+0x28>)
 800d546:	4313      	orrs	r3, r2
 800d548:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800d54a:	f3bf 8f4f 	dsb	sy
}
 800d54e:	bf00      	nop
    __NOP();
 800d550:	bf00      	nop
 800d552:	e7fd      	b.n	800d550 <__NVIC_SystemReset+0x20>
 800d554:	e000ed00 	.word	0xe000ed00
 800d558:	05fa0004 	.word	0x05fa0004

0800d55c <Board_Init>:
#include "debug.h" // declaration of print() and error_log()


extern UART_HandleTypeDef huart3;
status_t Board_Init(void)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b082      	sub	sp, #8
 800d560:	af00      	add	r7, sp, #0
    /* Initialize timer required by the API. */
    Timer_Init();
 800d562:	f000 fbe5 	bl	800dd30 <Timer_Init>

    /* Initialize UART for print functionality. */
    status_t status = UART_Init(&huart3);
 800d566:	4810      	ldr	r0, [pc, #64]	@ (800d5a8 <Board_Init+0x4c>)
 800d568:	f000 fcc2 	bl	800def0 <UART_Init>
 800d56c:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) {
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2b00      	cmp	r3, #0
 800d572:	da05      	bge.n	800d580 <Board_Init+0x24>
        error_log("UART driver initialization failed, error code: %d", status);
 800d574:	6879      	ldr	r1, [r7, #4]
 800d576:	480d      	ldr	r0, [pc, #52]	@ (800d5ac <Board_Init+0x50>)
 800d578:	f000 fcca 	bl	800df10 <print>
        return status;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	e00e      	b.n	800d59e <Board_Init+0x42>
    }

    /* Initialize the S2PI hardware required by the API. */
    status = S2PI_Init(SPI_DEFAULT_SLAVE, SPI_BAUDRATE);
 800d580:	490b      	ldr	r1, [pc, #44]	@ (800d5b0 <Board_Init+0x54>)
 800d582:	2001      	movs	r0, #1
 800d584:	f000 f84e 	bl	800d624 <S2PI_Init>
 800d588:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) {
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	da05      	bge.n	800d59c <Board_Init+0x40>
        error_log("S2PI driver initialization failed, error code: %d", status);
 800d590:	6879      	ldr	r1, [r7, #4]
 800d592:	4808      	ldr	r0, [pc, #32]	@ (800d5b4 <Board_Init+0x58>)
 800d594:	f000 fcbc 	bl	800df10 <print>
        return status;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	e000      	b.n	800d59e <Board_Init+0x42>
//    {
//        error_log("Flash driver initialization failed, error code: %d", status);
//        return status;
//    }
//
    return STATUS_OK;
 800d59c:	2300      	movs	r3, #0
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3708      	adds	r7, #8
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}
 800d5a6:	bf00      	nop
 800d5a8:	2400046c 	.word	0x2400046c
 800d5ac:	08027944 	.word	0x08027944
 800d5b0:	01406f40 	.word	0x01406f40
 800d5b4:	08027980 	.word	0x08027980

0800d5b8 <Board_Reset>:

void Board_Reset(void)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	af00      	add	r7, sp, #0
    NVIC_SystemReset();
 800d5bc:	f7ff ffb8 	bl	800d530 <__NVIC_SystemReset>

0800d5c0 <IRQ_UNLOCK>:
 *          Can only be executed in Privileged modes.
 *
 * @return  -
 *****************************************************************************/
void IRQ_UNLOCK(void)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	af00      	add	r7, sp, #0
    assert(g_irq_lock_ct > 0);
 800d5c4:	4b0b      	ldr	r3, [pc, #44]	@ (800d5f4 <IRQ_UNLOCK+0x34>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	dc05      	bgt.n	800d5d8 <IRQ_UNLOCK+0x18>
 800d5cc:	4b0a      	ldr	r3, [pc, #40]	@ (800d5f8 <IRQ_UNLOCK+0x38>)
 800d5ce:	4a0b      	ldr	r2, [pc, #44]	@ (800d5fc <IRQ_UNLOCK+0x3c>)
 800d5d0:	2137      	movs	r1, #55	@ 0x37
 800d5d2:	480b      	ldr	r0, [pc, #44]	@ (800d600 <IRQ_UNLOCK+0x40>)
 800d5d4:	f000 ff0e 	bl	800e3f4 <__assert_func>
    if (--g_irq_lock_ct <= 0)
 800d5d8:	4b06      	ldr	r3, [pc, #24]	@ (800d5f4 <IRQ_UNLOCK+0x34>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	3b01      	subs	r3, #1
 800d5de:	4a05      	ldr	r2, [pc, #20]	@ (800d5f4 <IRQ_UNLOCK+0x34>)
 800d5e0:	6013      	str	r3, [r2, #0]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	dc04      	bgt.n	800d5f0 <IRQ_UNLOCK+0x30>
    {
        g_irq_lock_ct = 0;
 800d5e6:	4b03      	ldr	r3, [pc, #12]	@ (800d5f4 <IRQ_UNLOCK+0x34>)
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800d5ec:	b662      	cpsie	i
}
 800d5ee:	bf00      	nop
        __enable_irq();
    }
}
 800d5f0:	bf00      	nop
 800d5f2:	bd80      	pop	{r7, pc}
 800d5f4:	240005f4 	.word	0x240005f4
 800d5f8:	080279bc 	.word	0x080279bc
 800d5fc:	08027ba0 	.word	0x08027ba0
 800d600:	080279d0 	.word	0x080279d0

0800d604 <IRQ_LOCK>:
 *          Can only be executed in Privileged modes.
 *
 * @return  -
 *****************************************************************************/
void IRQ_LOCK(void)
{
 800d604:	b480      	push	{r7}
 800d606:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800d608:	b672      	cpsid	i
}
 800d60a:	bf00      	nop
    __disable_irq();
    ++g_irq_lock_ct;
 800d60c:	4b04      	ldr	r3, [pc, #16]	@ (800d620 <IRQ_LOCK+0x1c>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	3301      	adds	r3, #1
 800d612:	4a03      	ldr	r2, [pc, #12]	@ (800d620 <IRQ_LOCK+0x1c>)
 800d614:	6013      	str	r3, [r2, #0]
}
 800d616:	bf00      	nop
 800d618:	46bd      	mov	sp, r7
 800d61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61e:	4770      	bx	lr
 800d620:	240005f4 	.word	0x240005f4

0800d624 <S2PI_Init>:
 * Code
 ******************************************************************************/


status_t S2PI_Init(s2pi_slave_t defaultSlave, uint32_t baudRate_Bps)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b082      	sub	sp, #8
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	6039      	str	r1, [r7, #0]
    S2PI_InitPins();
 800d62e:	f000 f815 	bl	800d65c <S2PI_InitPins>

    if (defaultSlave < 0) {
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2b00      	cmp	r3, #0
 800d636:	da01      	bge.n	800d63c <S2PI_Init+0x18>
        defaultSlave = S2PI_SLAVE1;
 800d638:	2301      	movs	r3, #1
 800d63a:	607b      	str	r3, [r7, #4]
    }

    if (defaultSlave > S2PI_SLAVE_COUNT) {
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2b01      	cmp	r3, #1
 800d640:	dd02      	ble.n	800d648 <S2PI_Init+0x24>
        return ERROR_S2PI_INVALID_SLAVE;
 800d642:	f06f 0336 	mvn.w	r3, #54	@ 0x36
 800d646:	e004      	b.n	800d652 <S2PI_Init+0x2e>
    }

    return S2PI_SetBaudRate(defaultSlave, baudRate_Bps);
 800d648:	6839      	ldr	r1, [r7, #0]
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f000 f884 	bl	800d758 <S2PI_SetBaudRate>
 800d650:	4603      	mov	r3, r0
}
 800d652:	4618      	mov	r0, r3
 800d654:	3708      	adds	r7, #8
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}
	...

0800d65c <S2PI_InitPins>:


static inline void S2PI_InitPins()
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	af00      	add	r7, sp, #0
    /* Initializes Pins: MOSI/MISO/CLK */
    S2PI_SetGPIOMode(true);
 800d660:	2001      	movs	r0, #1
 800d662:	f000 f837 	bl	800d6d4 <S2PI_SetGPIOMode>
    S2PI_SetGPIOMode(false);
 800d666:	2000      	movs	r0, #0
 800d668:	f000 f834 	bl	800d6d4 <S2PI_SetGPIOMode>

    myS2PIHnd.SlaveIrqMapping[S2PI_SLAVE1] = S2PI_IRQ1_GPIO_PIN;
 800d66c:	4b04      	ldr	r3, [pc, #16]	@ (800d680 <S2PI_InitPins+0x24>)
 800d66e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800d672:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* S2PI_SLAVE_COUNT >= 4 */

    /* The 4X board equipped with power switches require some delay
     * until the devices have finished the power-on-reset (POR).
     * Must be >= 2ms (?) */
    Time_DelayMSec(3);
 800d674:	2003      	movs	r0, #3
 800d676:	f002 fae7 	bl	800fc48 <Time_DelayMSec>
}
 800d67a:	bf00      	nop
 800d67c:	bd80      	pop	{r7, pc}
 800d67e:	bf00      	nop
 800d680:	24000014 	.word	0x24000014

0800d684 <S2PI_SetSlaveInternal>:

static inline status_t S2PI_SetSlaveInternal(s2pi_slave_t slave)
{
 800d684:	b480      	push	{r7}
 800d686:	b083      	sub	sp, #12
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
    switch (slave)
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2b01      	cmp	r3, #1
 800d690:	d112      	bne.n	800d6b8 <S2PI_SetSlaveInternal+0x34>
    {
        case S2PI_SLAVE1:
            myS2PIHnd.GPIOs[S2PI_CS].Port = S2PI_CS1_GPIO;
 800d692:	4b0d      	ldr	r3, [pc, #52]	@ (800d6c8 <S2PI_SetSlaveInternal+0x44>)
 800d694:	4a0d      	ldr	r2, [pc, #52]	@ (800d6cc <S2PI_SetSlaveInternal+0x48>)
 800d696:	635a      	str	r2, [r3, #52]	@ 0x34
            myS2PIHnd.GPIOs[S2PI_CS].Pin = S2PI_CS1_GPIO_PIN;
 800d698:	4b0b      	ldr	r3, [pc, #44]	@ (800d6c8 <S2PI_SetSlaveInternal+0x44>)
 800d69a:	2210      	movs	r2, #16
 800d69c:	639a      	str	r2, [r3, #56]	@ 0x38
            myS2PIHnd.GPIOs[S2PI_IRQ].Port = S2PI_IRQ1_GPIO;
 800d69e:	4b0a      	ldr	r3, [pc, #40]	@ (800d6c8 <S2PI_SetSlaveInternal+0x44>)
 800d6a0:	4a0b      	ldr	r2, [pc, #44]	@ (800d6d0 <S2PI_SetSlaveInternal+0x4c>)
 800d6a2:	64da      	str	r2, [r3, #76]	@ 0x4c
            myS2PIHnd.GPIOs[S2PI_IRQ].Pin = S2PI_IRQ1_GPIO_PIN;
 800d6a4:	4b08      	ldr	r3, [pc, #32]	@ (800d6c8 <S2PI_SetSlaveInternal+0x44>)
 800d6a6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800d6aa:	651a      	str	r2, [r3, #80]	@ 0x50
            break;
 800d6ac:	bf00      	nop

        default:
            return ERROR_S2PI_INVALID_SLAVE;
    }

    myS2PIHnd.Slave = slave;
 800d6ae:	4a06      	ldr	r2, [pc, #24]	@ (800d6c8 <S2PI_SetSlaveInternal+0x44>)
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6053      	str	r3, [r2, #4]

    return STATUS_OK;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	e001      	b.n	800d6bc <S2PI_SetSlaveInternal+0x38>
            return ERROR_S2PI_INVALID_SLAVE;
 800d6b8:	f06f 0336 	mvn.w	r3, #54	@ 0x36
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	370c      	adds	r7, #12
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c6:	4770      	bx	lr
 800d6c8:	24000014 	.word	0x24000014
 800d6cc:	58020000 	.word	0x58020000
 800d6d0:	58020400 	.word	0x58020400

0800d6d4 <S2PI_SetGPIOMode>:
 * @brief   Sets the mode in which the S2PI pins operate.
 * @details This is a helper function to switch the modes between SPI and GPIO.
 * @param   gpio_mode Enables the GPIO mode: true for GPIO, false for SPI.
 *****************************************************************************/
static inline void S2PI_SetGPIOMode(bool gpio_mode)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b088      	sub	sp, #32
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	4603      	mov	r3, r0
 800d6dc:	71fb      	strb	r3, [r7, #7]
    GPIO_InitTypeDef  GPIO_InitStruct;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800d6e2:	2303      	movs	r3, #3
 800d6e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = myS2PIHnd.SpiAlternate;
 800d6e6:	4b1b      	ldr	r3, [pc, #108]	@ (800d754 <S2PI_SetGPIOMode+0x80>)
 800d6e8:	6a1b      	ldr	r3, [r3, #32]
 800d6ea:	61fb      	str	r3, [r7, #28]

    /* *** OUTPUT pins *** */
    GPIO_InitStruct.Mode      = gpio_mode ? GPIO_MODE_OUTPUT_PP : GPIO_MODE_AF_PP;
 800d6ec:	79fb      	ldrb	r3, [r7, #7]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d001      	beq.n	800d6f6 <S2PI_SetGPIOMode+0x22>
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	e000      	b.n	800d6f8 <S2PI_SetGPIOMode+0x24>
 800d6f6:	2302      	movs	r3, #2
 800d6f8:	613b      	str	r3, [r7, #16]

    /* SPI CLK */
    GPIO_InitStruct.Pin       = myS2PIHnd.GPIOs[S2PI_CLK].Pin;
 800d6fa:	4b16      	ldr	r3, [pc, #88]	@ (800d754 <S2PI_SetGPIOMode+0x80>)
 800d6fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6fe:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(myS2PIHnd.GPIOs[S2PI_CLK].Port, &GPIO_InitStruct);
 800d700:	4b14      	ldr	r3, [pc, #80]	@ (800d754 <S2PI_SetGPIOMode+0x80>)
 800d702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d704:	f107 020c 	add.w	r2, r7, #12
 800d708:	4611      	mov	r1, r2
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7f9 fa82 	bl	8006c14 <HAL_GPIO_Init>

    /* SPI MOSI */
    GPIO_InitStruct.Pin      = myS2PIHnd.GPIOs[S2PI_MOSI].Pin;
 800d710:	4b10      	ldr	r3, [pc, #64]	@ (800d754 <S2PI_SetGPIOMode+0x80>)
 800d712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d714:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(myS2PIHnd.GPIOs[S2PI_MOSI].Port, &GPIO_InitStruct);
 800d716:	4b0f      	ldr	r3, [pc, #60]	@ (800d754 <S2PI_SetGPIOMode+0x80>)
 800d718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d71a:	f107 020c 	add.w	r2, r7, #12
 800d71e:	4611      	mov	r1, r2
 800d720:	4618      	mov	r0, r3
 800d722:	f7f9 fa77 	bl	8006c14 <HAL_GPIO_Init>

    /* *** INPUT pins *** */
    GPIO_InitStruct.Mode      = gpio_mode ? GPIO_MODE_INPUT : GPIO_MODE_AF_PP;
 800d726:	79fb      	ldrb	r3, [r7, #7]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d001      	beq.n	800d730 <S2PI_SetGPIOMode+0x5c>
 800d72c:	2300      	movs	r3, #0
 800d72e:	e000      	b.n	800d732 <S2PI_SetGPIOMode+0x5e>
 800d730:	2302      	movs	r3, #2
 800d732:	613b      	str	r3, [r7, #16]

    /* SPI MISO */
    GPIO_InitStruct.Pin       = myS2PIHnd.GPIOs[S2PI_MISO].Pin;
 800d734:	4b07      	ldr	r3, [pc, #28]	@ (800d754 <S2PI_SetGPIOMode+0x80>)
 800d736:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d738:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(myS2PIHnd.GPIOs[S2PI_MISO].Port, &GPIO_InitStruct);
 800d73a:	4b06      	ldr	r3, [pc, #24]	@ (800d754 <S2PI_SetGPIOMode+0x80>)
 800d73c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d73e:	f107 020c 	add.w	r2, r7, #12
 800d742:	4611      	mov	r1, r2
 800d744:	4618      	mov	r0, r3
 800d746:	f7f9 fa65 	bl	8006c14 <HAL_GPIO_Init>
}
 800d74a:	bf00      	nop
 800d74c:	3720      	adds	r7, #32
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}
 800d752:	bf00      	nop
 800d754:	24000014 	.word	0x24000014

0800d758 <S2PI_SetBaudRate>:

status_t S2PI_SetBaudRate(s2pi_slave_t slave, uint32_t baudRate_Bps)
{
 800d758:	b480      	push	{r7}
 800d75a:	b085      	sub	sp, #20
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	6039      	str	r1, [r7, #0]
    (void) slave; // not used in this implementation

    uint32_t prescaler = 0;
 800d762:	2300      	movs	r3, #0
 800d764:	60fb      	str	r3, [r7, #12]
    /* Determine the maximum value of the prescaler */
    for (; prescaler < 8; ++prescaler) {
 800d766:	e00c      	b.n	800d782 <S2PI_SetBaudRate+0x2a>
    	const uint32_t baud = S2PI_REF_CLK >> (prescaler + 1);
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	3301      	adds	r3, #1
 800d76c:	4a10      	ldr	r2, [pc, #64]	@ (800d7b0 <S2PI_SetBaudRate+0x58>)
 800d76e:	fa22 f303 	lsr.w	r3, r2, r3
 800d772:	60bb      	str	r3, [r7, #8]
        if (baud <= baudRate_Bps) {
 800d774:	68ba      	ldr	r2, [r7, #8]
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	429a      	cmp	r2, r3
 800d77a:	d906      	bls.n	800d78a <S2PI_SetBaudRate+0x32>
    for (; prescaler < 8; ++prescaler) {
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	3301      	adds	r3, #1
 800d780:	60fb      	str	r3, [r7, #12]
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	2b07      	cmp	r3, #7
 800d786:	d9ef      	bls.n	800d768 <S2PI_SetBaudRate+0x10>
 800d788:	e000      	b.n	800d78c <S2PI_SetBaudRate+0x34>
            break;
 800d78a:	bf00      	nop
        }
    }

    S2PI_SET_PRESCALAR(prescaler);
 800d78c:	4b09      	ldr	r3, [pc, #36]	@ (800d7b4 <S2PI_SetBaudRate+0x5c>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	689b      	ldr	r3, [r3, #8]
 800d792:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	071a      	lsls	r2, r3, #28
 800d79a:	4b06      	ldr	r3, [pc, #24]	@ (800d7b4 <S2PI_SetBaudRate+0x5c>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	430a      	orrs	r2, r1
 800d7a0:	609a      	str	r2, [r3, #8]
    return STATUS_OK;
 800d7a2:	2300      	movs	r3, #0
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3714      	adds	r7, #20
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ae:	4770      	bx	lr
 800d7b0:	07b06240 	.word	0x07b06240
 800d7b4:	24000258 	.word	0x24000258

0800d7b8 <S2PI_GetStatus>:
    uint32_t prescaler = S2PI_GET_PRESCALAR();
    return S2PI_REF_CLK >> (prescaler + 1);
}

status_t S2PI_GetStatus(s2pi_slave_t slave)
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b083      	sub	sp, #12
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
    (void) slave; // not used in this implementation
    return myS2PIHnd.Status;
 800d7c0:	4b03      	ldr	r3, [pc, #12]	@ (800d7d0 <S2PI_GetStatus+0x18>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	370c      	adds	r7, #12
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ce:	4770      	bx	lr
 800d7d0:	24000014 	.word	0x24000014

0800d7d4 <S2PI_CaptureGpioControl>:

status_t S2PI_CaptureGpioControl(s2pi_slave_t slave)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b084      	sub	sp, #16
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
    (void) slave; // not used in this implementation

    /* Check if something is ongoing. */
    IRQ_LOCK();
 800d7dc:	f7ff ff12 	bl	800d604 <IRQ_LOCK>
    status_t status = myS2PIHnd.Status;
 800d7e0:	4b0f      	ldr	r3, [pc, #60]	@ (800d820 <S2PI_CaptureGpioControl+0x4c>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	60fb      	str	r3, [r7, #12]
    if (status != STATUS_IDLE) {
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d003      	beq.n	800d7f4 <S2PI_CaptureGpioControl+0x20>
        IRQ_UNLOCK();
 800d7ec:	f7ff fee8 	bl	800d5c0 <IRQ_UNLOCK>
        return status;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	e011      	b.n	800d818 <S2PI_CaptureGpioControl+0x44>
    }
    myS2PIHnd.Status = STATUS_S2PI_GPIO_MODE;
 800d7f4:	4b0a      	ldr	r3, [pc, #40]	@ (800d820 <S2PI_CaptureGpioControl+0x4c>)
 800d7f6:	2233      	movs	r2, #51	@ 0x33
 800d7f8:	601a      	str	r2, [r3, #0]
    IRQ_UNLOCK();
 800d7fa:	f7ff fee1 	bl	800d5c0 <IRQ_UNLOCK>

    /* Note: Clock must be HI after capturing */
    HAL_GPIO_WritePin(myS2PIHnd.GPIOs[S2PI_CLK].Port, myS2PIHnd.GPIOs[S2PI_CLK].Pin, GPIO_PIN_SET);
 800d7fe:	4b08      	ldr	r3, [pc, #32]	@ (800d820 <S2PI_CaptureGpioControl+0x4c>)
 800d800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d802:	4a07      	ldr	r2, [pc, #28]	@ (800d820 <S2PI_CaptureGpioControl+0x4c>)
 800d804:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d806:	b291      	uxth	r1, r2
 800d808:	2201      	movs	r2, #1
 800d80a:	4618      	mov	r0, r3
 800d80c:	f7f9 fbc2 	bl	8006f94 <HAL_GPIO_WritePin>

    S2PI_SetGPIOMode(true);
 800d810:	2001      	movs	r0, #1
 800d812:	f7ff ff5f 	bl	800d6d4 <S2PI_SetGPIOMode>

    return STATUS_OK;
 800d816:	2300      	movs	r3, #0
}
 800d818:	4618      	mov	r0, r3
 800d81a:	3710      	adds	r7, #16
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}
 800d820:	24000014 	.word	0x24000014

0800d824 <S2PI_ReleaseGpioControl>:

status_t S2PI_ReleaseGpioControl(s2pi_slave_t slave)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b084      	sub	sp, #16
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
    (void) slave; // not used in this implementation

    /* Check if something is ongoing. */
    IRQ_LOCK();
 800d82c:	f7ff feea 	bl	800d604 <IRQ_LOCK>
    status_t status = myS2PIHnd.Status;
 800d830:	4b0b      	ldr	r3, [pc, #44]	@ (800d860 <S2PI_ReleaseGpioControl+0x3c>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	60fb      	str	r3, [r7, #12]
    if (status != STATUS_S2PI_GPIO_MODE)
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	2b33      	cmp	r3, #51	@ 0x33
 800d83a:	d003      	beq.n	800d844 <S2PI_ReleaseGpioControl+0x20>
    {
        IRQ_UNLOCK();
 800d83c:	f7ff fec0 	bl	800d5c0 <IRQ_UNLOCK>
        return status;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	e008      	b.n	800d856 <S2PI_ReleaseGpioControl+0x32>
    }
    myS2PIHnd.Status = STATUS_IDLE;
 800d844:	4b06      	ldr	r3, [pc, #24]	@ (800d860 <S2PI_ReleaseGpioControl+0x3c>)
 800d846:	2200      	movs	r2, #0
 800d848:	601a      	str	r2, [r3, #0]
    IRQ_UNLOCK();
 800d84a:	f7ff feb9 	bl	800d5c0 <IRQ_UNLOCK>

    S2PI_SetGPIOMode(false);
 800d84e:	2000      	movs	r0, #0
 800d850:	f7ff ff40 	bl	800d6d4 <S2PI_SetGPIOMode>

    return STATUS_OK;
 800d854:	2300      	movs	r3, #0
}
 800d856:	4618      	mov	r0, r3
 800d858:	3710      	adds	r7, #16
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}
 800d85e:	bf00      	nop
 800d860:	24000014 	.word	0x24000014

0800d864 <S2PI_WriteGpioPin>:

status_t S2PI_WriteGpioPin(s2pi_slave_t slave, s2pi_pin_t pin, uint32_t value)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b086      	sub	sp, #24
 800d868:	af00      	add	r7, sp, #0
 800d86a:	60f8      	str	r0, [r7, #12]
 800d86c:	460b      	mov	r3, r1
 800d86e:	607a      	str	r2, [r7, #4]
 800d870:	72fb      	strb	r3, [r7, #11]
    /* Check if pin is valid. */
    if (pin > S2PI_IRQ || value > 1) {
 800d872:	7afb      	ldrb	r3, [r7, #11]
 800d874:	2b04      	cmp	r3, #4
 800d876:	d802      	bhi.n	800d87e <S2PI_WriteGpioPin+0x1a>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2b01      	cmp	r3, #1
 800d87c:	d902      	bls.n	800d884 <S2PI_WriteGpioPin+0x20>
    	return ERROR_INVALID_ARGUMENT;
 800d87e:	f06f 0304 	mvn.w	r3, #4
 800d882:	e033      	b.n	800d8ec <S2PI_WriteGpioPin+0x88>
    }

    /* Check if in GPIO mode. */
    if(myS2PIHnd.Status != STATUS_S2PI_GPIO_MODE) {
 800d884:	4b1b      	ldr	r3, [pc, #108]	@ (800d8f4 <S2PI_WriteGpioPin+0x90>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	2b33      	cmp	r3, #51	@ 0x33
 800d88a:	d002      	beq.n	800d892 <S2PI_WriteGpioPin+0x2e>
        return ERROR_S2PI_INVALID_STATE;
 800d88c:	f06f 0334 	mvn.w	r3, #52	@ 0x34
 800d890:	e02c      	b.n	800d8ec <S2PI_WriteGpioPin+0x88>
    }

    if (pin == S2PI_CS) {
 800d892:	7afb      	ldrb	r3, [r7, #11]
 800d894:	2b01      	cmp	r3, #1
 800d896:	d113      	bne.n	800d8c0 <S2PI_WriteGpioPin+0x5c>
        GPIO_PinState pinState = value ? GPIO_PIN_SET : GPIO_PIN_RESET;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	bf14      	ite	ne
 800d89e:	2301      	movne	r3, #1
 800d8a0:	2300      	moveq	r3, #0
 800d8a2:	b2db      	uxtb	r3, r3
 800d8a4:	75fb      	strb	r3, [r7, #23]
        switch (slave)
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	2b01      	cmp	r3, #1
 800d8aa:	d106      	bne.n	800d8ba <S2PI_WriteGpioPin+0x56>
        {
            case S2PI_SLAVE1:
                HAL_GPIO_WritePin(S2PI_CS1_GPIO, S2PI_CS1_GPIO_PIN, pinState);
 800d8ac:	7dfb      	ldrb	r3, [r7, #23]
 800d8ae:	461a      	mov	r2, r3
 800d8b0:	2110      	movs	r1, #16
 800d8b2:	4811      	ldr	r0, [pc, #68]	@ (800d8f8 <S2PI_WriteGpioPin+0x94>)
 800d8b4:	f7f9 fb6e 	bl	8006f94 <HAL_GPIO_WritePin>
                break;
 800d8b8:	e014      	b.n	800d8e4 <S2PI_WriteGpioPin+0x80>
                HAL_GPIO_WritePin(S2PI_CS4_GPIO, S2PI_CS4_GPIO_PIN, pinState);
                break;
#endif /* S2PI_SLAVE_COUNT >= 4 */

            default:
                return ERROR_S2PI_INVALID_SLAVE;
 800d8ba:	f06f 0336 	mvn.w	r3, #54	@ 0x36
 800d8be:	e015      	b.n	800d8ec <S2PI_WriteGpioPin+0x88>
        }
    } else {
        HAL_GPIO_WritePin(myS2PIHnd.GPIOs[pin].Port, myS2PIHnd.GPIOs[pin].Pin, value);
 800d8c0:	7afb      	ldrb	r3, [r7, #11]
 800d8c2:	4a0c      	ldr	r2, [pc, #48]	@ (800d8f4 <S2PI_WriteGpioPin+0x90>)
 800d8c4:	3305      	adds	r3, #5
 800d8c6:	00db      	lsls	r3, r3, #3
 800d8c8:	4413      	add	r3, r2
 800d8ca:	6858      	ldr	r0, [r3, #4]
 800d8cc:	7afb      	ldrb	r3, [r7, #11]
 800d8ce:	4a09      	ldr	r2, [pc, #36]	@ (800d8f4 <S2PI_WriteGpioPin+0x90>)
 800d8d0:	3305      	adds	r3, #5
 800d8d2:	00db      	lsls	r3, r3, #3
 800d8d4:	4413      	add	r3, r2
 800d8d6:	689b      	ldr	r3, [r3, #8]
 800d8d8:	b29b      	uxth	r3, r3
 800d8da:	687a      	ldr	r2, [r7, #4]
 800d8dc:	b2d2      	uxtb	r2, r2
 800d8de:	4619      	mov	r1, r3
 800d8e0:	f7f9 fb58 	bl	8006f94 <HAL_GPIO_WritePin>
    }

    S2PI_GPIO_DELAY();
 800d8e4:	200a      	movs	r0, #10
 800d8e6:	f002 f951 	bl	800fb8c <Time_DelayUSec>

    return STATUS_OK;
 800d8ea:	2300      	movs	r3, #0
}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	3718      	adds	r7, #24
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}
 800d8f4:	24000014 	.word	0x24000014
 800d8f8:	58020000 	.word	0x58020000

0800d8fc <S2PI_ReadGpioPin>:

status_t S2PI_ReadGpioPin(s2pi_slave_t slave, s2pi_pin_t pin, uint32_t * value)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b084      	sub	sp, #16
 800d900:	af00      	add	r7, sp, #0
 800d902:	60f8      	str	r0, [r7, #12]
 800d904:	460b      	mov	r3, r1
 800d906:	607a      	str	r2, [r7, #4]
 800d908:	72fb      	strb	r3, [r7, #11]
    /* Check if pin is valid. */
    if (pin > S2PI_IRQ || !value)
 800d90a:	7afb      	ldrb	r3, [r7, #11]
 800d90c:	2b04      	cmp	r3, #4
 800d90e:	d802      	bhi.n	800d916 <S2PI_ReadGpioPin+0x1a>
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d102      	bne.n	800d91c <S2PI_ReadGpioPin+0x20>
        return ERROR_INVALID_ARGUMENT;
 800d916:	f06f 0304 	mvn.w	r3, #4
 800d91a:	e031      	b.n	800d980 <S2PI_ReadGpioPin+0x84>

    /* Check if in GPIO mode. */
    if(myS2PIHnd.Status != STATUS_S2PI_GPIO_MODE)
 800d91c:	4b1a      	ldr	r3, [pc, #104]	@ (800d988 <S2PI_ReadGpioPin+0x8c>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	2b33      	cmp	r3, #51	@ 0x33
 800d922:	d002      	beq.n	800d92a <S2PI_ReadGpioPin+0x2e>
        return ERROR_S2PI_INVALID_STATE;
 800d924:	f06f 0334 	mvn.w	r3, #52	@ 0x34
 800d928:	e02a      	b.n	800d980 <S2PI_ReadGpioPin+0x84>

    if (pin == S2PI_CS) {
 800d92a:	7afb      	ldrb	r3, [r7, #11]
 800d92c:	2b01      	cmp	r3, #1
 800d92e:	d10e      	bne.n	800d94e <S2PI_ReadGpioPin+0x52>
        switch (slave)
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	2b01      	cmp	r3, #1
 800d934:	d108      	bne.n	800d948 <S2PI_ReadGpioPin+0x4c>
        {
            case S2PI_SLAVE1:
                *value = HAL_GPIO_ReadPin(S2PI_CS1_GPIO, S2PI_CS1_GPIO_PIN);
 800d936:	2110      	movs	r1, #16
 800d938:	4814      	ldr	r0, [pc, #80]	@ (800d98c <S2PI_ReadGpioPin+0x90>)
 800d93a:	f7f9 fb13 	bl	8006f64 <HAL_GPIO_ReadPin>
 800d93e:	4603      	mov	r3, r0
 800d940:	461a      	mov	r2, r3
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	601a      	str	r2, [r3, #0]
                break;
 800d946:	e017      	b.n	800d978 <S2PI_ReadGpioPin+0x7c>
                *value = HAL_GPIO_ReadPin(S2PI_CS4_GPIO, S2PI_CS4_GPIO_PIN);
                break;
#endif /* S2PI_SLAVE_COUNT >= 4 */

            default:
                return ERROR_S2PI_INVALID_SLAVE;
 800d948:	f06f 0336 	mvn.w	r3, #54	@ 0x36
 800d94c:	e018      	b.n	800d980 <S2PI_ReadGpioPin+0x84>
        }
    } else {
        *value = HAL_GPIO_ReadPin(myS2PIHnd.GPIOs[pin].Port, myS2PIHnd.GPIOs[pin].Pin);
 800d94e:	7afb      	ldrb	r3, [r7, #11]
 800d950:	4a0d      	ldr	r2, [pc, #52]	@ (800d988 <S2PI_ReadGpioPin+0x8c>)
 800d952:	3305      	adds	r3, #5
 800d954:	00db      	lsls	r3, r3, #3
 800d956:	4413      	add	r3, r2
 800d958:	685a      	ldr	r2, [r3, #4]
 800d95a:	7afb      	ldrb	r3, [r7, #11]
 800d95c:	490a      	ldr	r1, [pc, #40]	@ (800d988 <S2PI_ReadGpioPin+0x8c>)
 800d95e:	3305      	adds	r3, #5
 800d960:	00db      	lsls	r3, r3, #3
 800d962:	440b      	add	r3, r1
 800d964:	689b      	ldr	r3, [r3, #8]
 800d966:	b29b      	uxth	r3, r3
 800d968:	4619      	mov	r1, r3
 800d96a:	4610      	mov	r0, r2
 800d96c:	f7f9 fafa 	bl	8006f64 <HAL_GPIO_ReadPin>
 800d970:	4603      	mov	r3, r0
 800d972:	461a      	mov	r2, r3
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	601a      	str	r2, [r3, #0]
    }

    S2PI_GPIO_DELAY();
 800d978:	200a      	movs	r0, #10
 800d97a:	f002 f907 	bl	800fb8c <Time_DelayUSec>

    return STATUS_OK;
 800d97e:	2300      	movs	r3, #0
}
 800d980:	4618      	mov	r0, r3
 800d982:	3710      	adds	r7, #16
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}
 800d988:	24000014 	.word	0x24000014
 800d98c:	58020000 	.word	0x58020000

0800d990 <S2PI_CycleCsPin>:

status_t S2PI_CycleCsPin(s2pi_slave_t slave)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b084      	sub	sp, #16
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
    /* Check the driver status. */
    IRQ_LOCK();
 800d998:	f7ff fe34 	bl	800d604 <IRQ_LOCK>
    status_t status = myS2PIHnd.Status;
 800d99c:	4b14      	ldr	r3, [pc, #80]	@ (800d9f0 <S2PI_CycleCsPin+0x60>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	60fb      	str	r3, [r7, #12]
    if ( status != STATUS_IDLE ) {
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d003      	beq.n	800d9b0 <S2PI_CycleCsPin+0x20>
        IRQ_UNLOCK();
 800d9a8:	f7ff fe0a 	bl	800d5c0 <IRQ_UNLOCK>
        return status;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	e01b      	b.n	800d9e8 <S2PI_CycleCsPin+0x58>
    }

    myS2PIHnd.Status = STATUS_BUSY;
 800d9b0:	4b0f      	ldr	r3, [pc, #60]	@ (800d9f0 <S2PI_CycleCsPin+0x60>)
 800d9b2:	2202      	movs	r2, #2
 800d9b4:	601a      	str	r2, [r3, #0]
    IRQ_UNLOCK();
 800d9b6:	f7ff fe03 	bl	800d5c0 <IRQ_UNLOCK>

    status = STATUS_OK;
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	60fb      	str	r3, [r7, #12]
    switch (slave)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2b01      	cmp	r3, #1
 800d9c2:	d10a      	bne.n	800d9da <S2PI_CycleCsPin+0x4a>
    {
        case S2PI_SLAVE1:
            HAL_GPIO_WritePin(S2PI_CS1_GPIO, S2PI_CS1_GPIO_PIN, GPIO_PIN_RESET);
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	2110      	movs	r1, #16
 800d9c8:	480a      	ldr	r0, [pc, #40]	@ (800d9f4 <S2PI_CycleCsPin+0x64>)
 800d9ca:	f7f9 fae3 	bl	8006f94 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(S2PI_CS1_GPIO, S2PI_CS1_GPIO_PIN, GPIO_PIN_SET);
 800d9ce:	2201      	movs	r2, #1
 800d9d0:	2110      	movs	r1, #16
 800d9d2:	4808      	ldr	r0, [pc, #32]	@ (800d9f4 <S2PI_CycleCsPin+0x64>)
 800d9d4:	f7f9 fade 	bl	8006f94 <HAL_GPIO_WritePin>
            break;
 800d9d8:	e002      	b.n	800d9e0 <S2PI_CycleCsPin+0x50>
            HAL_GPIO_WritePin(S2PI_CS4_GPIO, S2PI_CS4_GPIO_PIN, GPIO_PIN_SET);
            break;
#endif /* S2PI_SLAVE_COUNT >= 4 */

        default:
            status = ERROR_S2PI_INVALID_SLAVE;
 800d9da:	f06f 0336 	mvn.w	r3, #54	@ 0x36
 800d9de:	60fb      	str	r3, [r7, #12]
    }

    myS2PIHnd.Status = STATUS_IDLE;
 800d9e0:	4b03      	ldr	r3, [pc, #12]	@ (800d9f0 <S2PI_CycleCsPin+0x60>)
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	601a      	str	r2, [r3, #0]

    return status;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3710      	adds	r7, #16
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	24000014 	.word	0x24000014
 800d9f4:	58020000 	.word	0x58020000

0800d9f8 <S2PI_TransferFrame>:
                            uint8_t const * txData,
                            uint8_t * rxData,
                            size_t frameSize,
                            s2pi_callback_t callback,
                            void * callbackData)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b086      	sub	sp, #24
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	60f8      	str	r0, [r7, #12]
 800da00:	60b9      	str	r1, [r7, #8]
 800da02:	607a      	str	r2, [r7, #4]
 800da04:	603b      	str	r3, [r7, #0]
    /* Verify arguments. */
    if (!txData || frameSize == 0 || frameSize > UINT16_MAX) {
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d006      	beq.n	800da1a <S2PI_TransferFrame+0x22>
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d003      	beq.n	800da1a <S2PI_TransferFrame+0x22>
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800da18:	d302      	bcc.n	800da20 <S2PI_TransferFrame+0x28>
        return ERROR_INVALID_ARGUMENT;
 800da1a:	f06f 0304 	mvn.w	r3, #4
 800da1e:	e048      	b.n	800dab2 <S2PI_TransferFrame+0xba>
    }

    /* Check the driver status, lock if idle. */
    IRQ_LOCK();
 800da20:	f7ff fdf0 	bl	800d604 <IRQ_LOCK>
    status_t status = myS2PIHnd.Status;
 800da24:	4b25      	ldr	r3, [pc, #148]	@ (800dabc <S2PI_TransferFrame+0xc4>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	613b      	str	r3, [r7, #16]
    if (status != STATUS_IDLE) {
 800da2a:	693b      	ldr	r3, [r7, #16]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d003      	beq.n	800da38 <S2PI_TransferFrame+0x40>
        IRQ_UNLOCK();
 800da30:	f7ff fdc6 	bl	800d5c0 <IRQ_UNLOCK>
        return status;
 800da34:	693b      	ldr	r3, [r7, #16]
 800da36:	e03c      	b.n	800dab2 <S2PI_TransferFrame+0xba>
    }

    myS2PIHnd.Status = STATUS_BUSY;
 800da38:	4b20      	ldr	r3, [pc, #128]	@ (800dabc <S2PI_TransferFrame+0xc4>)
 800da3a:	2202      	movs	r2, #2
 800da3c:	601a      	str	r2, [r3, #0]
    IRQ_UNLOCK();
 800da3e:	f7ff fdbf 	bl	800d5c0 <IRQ_UNLOCK>

    /* Set the callback information */
    myS2PIHnd.Callback = callback;
 800da42:	4a1e      	ldr	r2, [pc, #120]	@ (800dabc <S2PI_TransferFrame+0xc4>)
 800da44:	6a3b      	ldr	r3, [r7, #32]
 800da46:	6093      	str	r3, [r2, #8]
    myS2PIHnd.CallbackData = callbackData;
 800da48:	4a1c      	ldr	r2, [pc, #112]	@ (800dabc <S2PI_TransferFrame+0xc4>)
 800da4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da4c:	60d3      	str	r3, [r2, #12]

    /* Manually set the chip select (active low) */
    status = S2PI_SetSlaveInternal(slave);
 800da4e:	68f8      	ldr	r0, [r7, #12]
 800da50:	f7ff fe18 	bl	800d684 <S2PI_SetSlaveInternal>
 800da54:	6138      	str	r0, [r7, #16]
    if (status == STATUS_OK) {
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d108      	bne.n	800da6e <S2PI_TransferFrame+0x76>
        HAL_GPIO_WritePin(myS2PIHnd.GPIOs[S2PI_CS].Port, myS2PIHnd.GPIOs[S2PI_CS].Pin, GPIO_PIN_RESET);
 800da5c:	4b17      	ldr	r3, [pc, #92]	@ (800dabc <S2PI_TransferFrame+0xc4>)
 800da5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da60:	4a16      	ldr	r2, [pc, #88]	@ (800dabc <S2PI_TransferFrame+0xc4>)
 800da62:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800da64:	b291      	uxth	r1, r2
 800da66:	2200      	movs	r2, #0
 800da68:	4618      	mov	r0, r3
 800da6a:	f7f9 fa93 	bl	8006f94 <HAL_GPIO_WritePin>
    }

    HAL_StatusTypeDef hal_error;

    /* Lock interrupts to prevent completion interrupt before setup is complete */
    IRQ_LOCK();
 800da6e:	f7ff fdc9 	bl	800d604 <IRQ_LOCK>

    if (rxData) {
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d009      	beq.n	800da8c <S2PI_TransferFrame+0x94>
        hal_error = HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t *) txData, rxData, (uint16_t) frameSize);
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	b29b      	uxth	r3, r3
 800da7c:	687a      	ldr	r2, [r7, #4]
 800da7e:	68b9      	ldr	r1, [r7, #8]
 800da80:	480f      	ldr	r0, [pc, #60]	@ (800dac0 <S2PI_TransferFrame+0xc8>)
 800da82:	f7fc fa83 	bl	8009f8c <HAL_SPI_TransmitReceive_DMA>
 800da86:	4603      	mov	r3, r0
 800da88:	75fb      	strb	r3, [r7, #23]
 800da8a:	e008      	b.n	800da9e <S2PI_TransferFrame+0xa6>
    } else {
        hal_error = HAL_SPI_Transmit_DMA(&hspi1, (uint8_t *) txData, (uint16_t) frameSize);
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	b29b      	uxth	r3, r3
 800da90:	461a      	mov	r2, r3
 800da92:	68b9      	ldr	r1, [r7, #8]
 800da94:	480a      	ldr	r0, [pc, #40]	@ (800dac0 <S2PI_TransferFrame+0xc8>)
 800da96:	f7fc f937 	bl	8009d08 <HAL_SPI_Transmit_DMA>
 800da9a:	4603      	mov	r3, r0
 800da9c:	75fb      	strb	r3, [r7, #23]
    }

    IRQ_UNLOCK();
 800da9e:	f7ff fd8f 	bl	800d5c0 <IRQ_UNLOCK>

    if (hal_error != HAL_OK) {
 800daa2:	7dfb      	ldrb	r3, [r7, #23]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d003      	beq.n	800dab0 <S2PI_TransferFrame+0xb8>
        //return ERROR_FAIL;
        return -1000-hal_error;
 800daa8:	7dfa      	ldrb	r2, [r7, #23]
 800daaa:	4b06      	ldr	r3, [pc, #24]	@ (800dac4 <S2PI_TransferFrame+0xcc>)
 800daac:	1a9b      	subs	r3, r3, r2
 800daae:	e000      	b.n	800dab2 <S2PI_TransferFrame+0xba>
    }

    return status;
 800dab0:	693b      	ldr	r3, [r7, #16]
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3718      	adds	r7, #24
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}
 800daba:	bf00      	nop
 800dabc:	24000014 	.word	0x24000014
 800dac0:	24000258 	.word	0x24000258
 800dac4:	fffffc18 	.word	0xfffffc18

0800dac8 <S2PI_CompleteTransfer>:
 *          for the next transfer, if required.
 * @param   status The status to be provided to the callback funcition.
 * @return  Returns the status received from the callback function
 ****************************************************************************/
static inline status_t S2PI_CompleteTransfer(status_t status)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b084      	sub	sp, #16
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
    myS2PIHnd.Status = STATUS_IDLE;
 800dad0:	4b10      	ldr	r3, [pc, #64]	@ (800db14 <S2PI_CompleteTransfer+0x4c>)
 800dad2:	2200      	movs	r2, #0
 800dad4:	601a      	str	r2, [r3, #0]

    /* Deactivate CS (set high), as we use GPIO pin */
    HAL_GPIO_WritePin(myS2PIHnd.GPIOs[S2PI_CS].Port, myS2PIHnd.GPIOs[S2PI_CS].Pin, GPIO_PIN_SET);
 800dad6:	4b0f      	ldr	r3, [pc, #60]	@ (800db14 <S2PI_CompleteTransfer+0x4c>)
 800dad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dada:	4a0e      	ldr	r2, [pc, #56]	@ (800db14 <S2PI_CompleteTransfer+0x4c>)
 800dadc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800dade:	b291      	uxth	r1, r2
 800dae0:	2201      	movs	r2, #1
 800dae2:	4618      	mov	r0, r3
 800dae4:	f7f9 fa56 	bl	8006f94 <HAL_GPIO_WritePin>

    /* Invoke callback if there is one */
    if (myS2PIHnd.Callback != 0) {
 800dae8:	4b0a      	ldr	r3, [pc, #40]	@ (800db14 <S2PI_CompleteTransfer+0x4c>)
 800daea:	689b      	ldr	r3, [r3, #8]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d00c      	beq.n	800db0a <S2PI_CompleteTransfer+0x42>
        s2pi_callback_t callback = myS2PIHnd.Callback;
 800daf0:	4b08      	ldr	r3, [pc, #32]	@ (800db14 <S2PI_CompleteTransfer+0x4c>)
 800daf2:	689b      	ldr	r3, [r3, #8]
 800daf4:	60fb      	str	r3, [r7, #12]
        myS2PIHnd.Callback = 0;
 800daf6:	4b07      	ldr	r3, [pc, #28]	@ (800db14 <S2PI_CompleteTransfer+0x4c>)
 800daf8:	2200      	movs	r2, #0
 800dafa:	609a      	str	r2, [r3, #8]
        status = callback(status, myS2PIHnd.CallbackData);
 800dafc:	4b05      	ldr	r3, [pc, #20]	@ (800db14 <S2PI_CompleteTransfer+0x4c>)
 800dafe:	68da      	ldr	r2, [r3, #12]
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	4611      	mov	r1, r2
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	4798      	blx	r3
 800db08:	6078      	str	r0, [r7, #4]
    }

    return status;
 800db0a:	687b      	ldr	r3, [r7, #4]
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3710      	adds	r7, #16
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}
 800db14:	24000014 	.word	0x24000014

0800db18 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *         the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b082      	sub	sp, #8
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
    S2PI_CompleteTransfer(STATUS_OK);
 800db20:	2000      	movs	r0, #0
 800db22:	f7ff ffd1 	bl	800dac8 <S2PI_CompleteTransfer>
}
 800db26:	bf00      	nop
 800db28:	3708      	adds	r7, #8
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}

0800db2e <SPI_DMATransmitReceiveCpltDelayed>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
void SPI_DMATransmitReceiveCpltDelayed(DMA_HandleTypeDef *hdma)
{
 800db2e:	b580      	push	{r7, lr}
 800db30:	b084      	sub	sp, #16
 800db32:	af00      	add	r7, sp, #0
 800db34:	6078      	str	r0, [r7, #4]
    SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db3a:	60fb      	str	r3, [r7, #12]
    HAL_SPI_TxCpltCallback(hspi);
 800db3c:	68f8      	ldr	r0, [r7, #12]
 800db3e:	f7ff ffeb 	bl	800db18 <HAL_SPI_TxCpltCallback>
}
 800db42:	bf00      	nop
 800db44:	3710      	adds	r7, #16
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}
	...

0800db4c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b082      	sub	sp, #8
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
    /* The problem we have here is that the next SPI transfer is set up in the interrupt.
     * The default implementation always connects this callback with the RX DMA complete interrupt.
     * However, the order of TX and RX interrupts is not specified.
     * If we perform the callback before both interrupts are done, the next SPI transfer will fail. */
    if ( hspi->hdmatx->Lock == HAL_UNLOCKED ) { /* TX Interrupt already received */
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800db58:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d103      	bne.n	800db68 <HAL_SPI_TxRxCpltCallback+0x1c>
        HAL_SPI_TxCpltCallback(hspi);
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f7ff ffd9 	bl	800db18 <HAL_SPI_TxCpltCallback>
    } else { /* There is still the TX DMA Interrupt we have to wait for */
        hspi->hdmatx->XferCpltCallback = SPI_DMATransmitReceiveCpltDelayed;
    }
}
 800db66:	e003      	b.n	800db70 <HAL_SPI_TxRxCpltCallback+0x24>
        hspi->hdmatx->XferCpltCallback = SPI_DMATransmitReceiveCpltDelayed;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800db6c:	4a02      	ldr	r2, [pc, #8]	@ (800db78 <HAL_SPI_TxRxCpltCallback+0x2c>)
 800db6e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800db70:	bf00      	nop
 800db72:	3708      	adds	r7, #8
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}
 800db78:	0800db2f 	.word	0x0800db2f

0800db7c <S2PI_TryGetMutex>:

status_t S2PI_TryGetMutex(s2pi_slave_t slave)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b084      	sub	sp, #16
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
    (void) slave; // not used in this implementation

    status_t retVal;

    IRQ_LOCK();
 800db84:	f7ff fd3e 	bl	800d604 <IRQ_LOCK>
    if (!myS2PIHnd.SpiMutexBlocked) {
 800db88:	4b0c      	ldr	r3, [pc, #48]	@ (800dbbc <S2PI_TryGetMutex+0x40>)
 800db8a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800db8e:	b2db      	uxtb	r3, r3
 800db90:	f083 0301 	eor.w	r3, r3, #1
 800db94:	b2db      	uxtb	r3, r3
 800db96:	2b00      	cmp	r3, #0
 800db98:	d006      	beq.n	800dba8 <S2PI_TryGetMutex+0x2c>
        myS2PIHnd.SpiMutexBlocked = true;
 800db9a:	4b08      	ldr	r3, [pc, #32]	@ (800dbbc <S2PI_TryGetMutex+0x40>)
 800db9c:	2201      	movs	r2, #1
 800db9e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        retVal = STATUS_OK;
 800dba2:	2300      	movs	r3, #0
 800dba4:	60fb      	str	r3, [r7, #12]
 800dba6:	e001      	b.n	800dbac <S2PI_TryGetMutex+0x30>
    } else {
        retVal = STATUS_BUSY;
 800dba8:	2302      	movs	r3, #2
 800dbaa:	60fb      	str	r3, [r7, #12]
    }
    IRQ_UNLOCK();
 800dbac:	f7ff fd08 	bl	800d5c0 <IRQ_UNLOCK>

    return retVal;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3710      	adds	r7, #16
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}
 800dbba:	bf00      	nop
 800dbbc:	24000014 	.word	0x24000014

0800dbc0 <S2PI_ReleaseMutex>:

void S2PI_ReleaseMutex(s2pi_slave_t slave)
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	b083      	sub	sp, #12
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
    (void) slave; // not used in this implementation

    myS2PIHnd.SpiMutexBlocked = false;
 800dbc8:	4b04      	ldr	r3, [pc, #16]	@ (800dbdc <S2PI_ReleaseMutex+0x1c>)
 800dbca:	2200      	movs	r2, #0
 800dbcc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
}
 800dbd0:	bf00      	nop
 800dbd2:	370c      	adds	r7, #12
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbda:	4770      	bx	lr
 800dbdc:	24000014 	.word	0x24000014

0800dbe0 <S2PI_Abort>:

status_t S2PI_Abort(s2pi_slave_t slave)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b084      	sub	sp, #16
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
    (void) slave; // not used in this implementation

    status_t status = myS2PIHnd.Status;
 800dbe8:	4b10      	ldr	r3, [pc, #64]	@ (800dc2c <S2PI_Abort+0x4c>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	60fb      	str	r3, [r7, #12]

    /* Check if something is ongoing. */
    if(status == STATUS_IDLE) {
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d101      	bne.n	800dbf8 <S2PI_Abort+0x18>
        return STATUS_OK;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	e014      	b.n	800dc22 <S2PI_Abort+0x42>
    }

    /* Abort SPI transfer. */
    if(status == STATUS_BUSY) {
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	2b02      	cmp	r3, #2
 800dbfc:	d105      	bne.n	800dc0a <S2PI_Abort+0x2a>
        HAL_SPI_Abort(&hspi1);
 800dbfe:	480c      	ldr	r0, [pc, #48]	@ (800dc30 <S2PI_Abort+0x50>)
 800dc00:	f7fc fb6a 	bl	800a2d8 <HAL_SPI_Abort>
        myS2PIHnd.Status = STATUS_IDLE;
 800dc04:	4b09      	ldr	r3, [pc, #36]	@ (800dc2c <S2PI_Abort+0x4c>)
 800dc06:	2200      	movs	r2, #0
 800dc08:	601a      	str	r2, [r3, #0]
    }

    status = S2PI_CompleteTransfer(ERROR_ABORTED);
 800dc0a:	f06f 0001 	mvn.w	r0, #1
 800dc0e:	f7ff ff5b 	bl	800dac8 <S2PI_CompleteTransfer>
 800dc12:	60f8      	str	r0, [r7, #12]
    if(status == ERROR_ABORTED) status = STATUS_OK;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	f113 0f02 	cmn.w	r3, #2
 800dc1a:	d101      	bne.n	800dc20 <S2PI_Abort+0x40>
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	60fb      	str	r3, [r7, #12]

    return STATUS_OK;
 800dc20:	2300      	movs	r3, #0
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	3710      	adds	r7, #16
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}
 800dc2a:	bf00      	nop
 800dc2c:	24000014 	.word	0x24000014
 800dc30:	24000258 	.word	0x24000258

0800dc34 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b082      	sub	sp, #8
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
    S2PI_CompleteTransfer(ERROR_FAIL);
 800dc3c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc40:	f7ff ff42 	bl	800dac8 <S2PI_CompleteTransfer>
}
 800dc44:	bf00      	nop
 800dc46:	3708      	adds	r7, #8
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}

0800dc4c <S2PI_SetIrqCallback>:

status_t S2PI_SetIrqCallback(s2pi_slave_t slave,
                             s2pi_irq_callback_t callback,
                             void * callbackData)
{
 800dc4c:	b480      	push	{r7}
 800dc4e:	b085      	sub	sp, #20
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	60f8      	str	r0, [r7, #12]
 800dc54:	60b9      	str	r1, [r7, #8]
 800dc56:	607a      	str	r2, [r7, #4]
    if (slave > S2PI_SLAVE_COUNT) {
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2b01      	cmp	r3, #1
 800dc5c:	dd02      	ble.n	800dc64 <S2PI_SetIrqCallback+0x18>
        return ERROR_S2PI_INVALID_SLAVE;
 800dc5e:	f06f 0336 	mvn.w	r3, #54	@ 0x36
 800dc62:	e00c      	b.n	800dc7e <S2PI_SetIrqCallback+0x32>
    }

    myS2PIHnd.IrqCallback[slave] = callback;
 800dc64:	4909      	ldr	r1, [pc, #36]	@ (800dc8c <S2PI_SetIrqCallback+0x40>)
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	3304      	adds	r3, #4
 800dc6a:	68ba      	ldr	r2, [r7, #8]
 800dc6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    myS2PIHnd.IrqCallbackData[slave] = callbackData;
 800dc70:	4906      	ldr	r1, [pc, #24]	@ (800dc8c <S2PI_SetIrqCallback+0x40>)
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	3306      	adds	r3, #6
 800dc76:	687a      	ldr	r2, [r7, #4]
 800dc78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return STATUS_OK;
 800dc7c:	2300      	movs	r3, #0
}
 800dc7e:	4618      	mov	r0, r3
 800dc80:	3714      	adds	r7, #20
 800dc82:	46bd      	mov	sp, r7
 800dc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc88:	4770      	bx	lr
 800dc8a:	bf00      	nop
 800dc8c:	24000014 	.word	0x24000014

0800dc90 <S2PI_ReadIrqPin>:

uint32_t S2PI_ReadIrqPin(s2pi_slave_t slave)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
    /* NOTE: this must return 0 if an interrupt is pending, i.e. if
     * the interrupt is pending AND the pin is in low state. */
    switch (slave)
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2b01      	cmp	r3, #1
 800dc9c:	d111      	bne.n	800dcc2 <S2PI_ReadIrqPin+0x32>
    {
        case S2PI_SLAVE1:
            return !(HAL_NVIC_GetPendingIRQ(S2PI_IRQ1_EXTI)
 800dc9e:	2028      	movs	r0, #40	@ 0x28
 800dca0:	f7f6 f964 	bl	8003f6c <HAL_NVIC_GetPendingIRQ>
 800dca4:	4603      	mov	r3, r0
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d007      	beq.n	800dcba <S2PI_ReadIrqPin+0x2a>
                     && !HAL_GPIO_ReadPin(S2PI_IRQ1_GPIO, S2PI_IRQ1_GPIO_PIN));
 800dcaa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800dcae:	4807      	ldr	r0, [pc, #28]	@ (800dccc <S2PI_ReadIrqPin+0x3c>)
 800dcb0:	f7f9 f958 	bl	8006f64 <HAL_GPIO_ReadPin>
 800dcb4:	4603      	mov	r3, r0
            return !(HAL_NVIC_GetPendingIRQ(S2PI_IRQ1_EXTI)
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d001      	beq.n	800dcbe <S2PI_ReadIrqPin+0x2e>
 800dcba:	2301      	movs	r3, #1
 800dcbc:	e002      	b.n	800dcc4 <S2PI_ReadIrqPin+0x34>
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	e000      	b.n	800dcc4 <S2PI_ReadIrqPin+0x34>
            return !(HAL_NVIC_GetPendingIRQ(S2PI_IRQ4_EXTI)
                     && !HAL_GPIO_ReadPin(S2PI_IRQ4_GPIO, S2PI_IRQ4_GPIO_PIN));
#endif /* S2PI_SLAVE_COUNT >= 4 */

        default:
            return 1U;
 800dcc2:	2301      	movs	r3, #1
    }
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3708      	adds	r7, #8
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}
 800dccc:	58020400 	.word	0x58020400

0800dcd0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b086      	sub	sp, #24
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	80fb      	strh	r3, [r7, #6]
    for (uint_fast8_t slaveID = 1; slaveID <= S2PI_SLAVE_COUNT; slaveID++)
 800dcda:	2301      	movs	r3, #1
 800dcdc:	617b      	str	r3, [r7, #20]
 800dcde:	e01d      	b.n	800dd1c <HAL_GPIO_EXTI_Callback+0x4c>
    {
        if (GPIO_Pin == myS2PIHnd.SlaveIrqMapping[slaveID])
 800dce0:	88fa      	ldrh	r2, [r7, #6]
 800dce2:	4912      	ldr	r1, [pc, #72]	@ (800dd2c <HAL_GPIO_EXTI_Callback+0x5c>)
 800dce4:	697b      	ldr	r3, [r7, #20]
 800dce6:	3308      	adds	r3, #8
 800dce8:	009b      	lsls	r3, r3, #2
 800dcea:	440b      	add	r3, r1
 800dcec:	685b      	ldr	r3, [r3, #4]
 800dcee:	429a      	cmp	r2, r3
 800dcf0:	d111      	bne.n	800dd16 <HAL_GPIO_EXTI_Callback+0x46>
        {
            /* Interrupt for slaveID has been fired */
            s2pi_irq_callback_t cb = myS2PIHnd.IrqCallback[slaveID];
 800dcf2:	4a0e      	ldr	r2, [pc, #56]	@ (800dd2c <HAL_GPIO_EXTI_Callback+0x5c>)
 800dcf4:	697b      	ldr	r3, [r7, #20]
 800dcf6:	3304      	adds	r3, #4
 800dcf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dcfc:	613b      	str	r3, [r7, #16]
            void * cbParam = myS2PIHnd.IrqCallbackData[slaveID];
 800dcfe:	4a0b      	ldr	r2, [pc, #44]	@ (800dd2c <HAL_GPIO_EXTI_Callback+0x5c>)
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	3306      	adds	r3, #6
 800dd04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd08:	60fb      	str	r3, [r7, #12]

            if (cb) {
 800dd0a:	693b      	ldr	r3, [r7, #16]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d002      	beq.n	800dd16 <HAL_GPIO_EXTI_Callback+0x46>
                /* Invoke corresponding callback */
                cb(cbParam);
 800dd10:	693b      	ldr	r3, [r7, #16]
 800dd12:	68f8      	ldr	r0, [r7, #12]
 800dd14:	4798      	blx	r3
    for (uint_fast8_t slaveID = 1; slaveID <= S2PI_SLAVE_COUNT; slaveID++)
 800dd16:	697b      	ldr	r3, [r7, #20]
 800dd18:	3301      	adds	r3, #1
 800dd1a:	617b      	str	r3, [r7, #20]
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	2b01      	cmp	r3, #1
 800dd20:	d9de      	bls.n	800dce0 <HAL_GPIO_EXTI_Callback+0x10>
            }
        }
    }
}
 800dd22:	bf00      	nop
 800dd24:	bf00      	nop
 800dd26:	3718      	adds	r7, #24
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	bd80      	pop	{r7, pc}
 800dd2c:	24000014 	.word	0x24000014

0800dd30 <Timer_Init>:
/*!***************************************************************************
 * @brief   Initializes the timer hardware.
 * @return  -
 *****************************************************************************/
void Timer_Init(void)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	af00      	add	r7, sp, #0
    /* Start the timers relevant for the LTC */
    HAL_TIM_Base_Start(LTC_TIMER);
 800dd34:	4808      	ldr	r0, [pc, #32]	@ (800dd58 <Timer_Init+0x28>)
 800dd36:	f7fc ffc9 	bl	800accc <HAL_TIM_Base_Start>

    PIT_TIMER_FREEZE_ON_DEBUG();
 800dd3a:	4b08      	ldr	r3, [pc, #32]	@ (800dd5c <Timer_Init+0x2c>)
 800dd3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd3e:	4a07      	ldr	r2, [pc, #28]	@ (800dd5c <Timer_Init+0x2c>)
 800dd40:	f043 0310 	orr.w	r3, r3, #16
 800dd44:	63d3      	str	r3, [r2, #60]	@ 0x3c
	LTC_TIMER_FREEZE_ON_DEBUG();
 800dd46:	4b05      	ldr	r3, [pc, #20]	@ (800dd5c <Timer_Init+0x2c>)
 800dd48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd4a:	4a04      	ldr	r2, [pc, #16]	@ (800dd5c <Timer_Init+0x2c>)
 800dd4c:	f043 0308 	orr.w	r3, r3, #8
 800dd50:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800dd52:	bf00      	nop
 800dd54:	bd80      	pop	{r7, pc}
 800dd56:	bf00      	nop
 800dd58:	240003d4 	.word	0x240003d4
 800dd5c:	5c001000 	.word	0x5c001000

0800dd60 <Timer_GetCounterValue>:
 * @param   lct A pointer to the low counter value bits representing current
 *                time in microseconds. Range: 0, .., 999999 µsec
 * @return  -
 *****************************************************************************/
void Timer_GetCounterValue(uint32_t * hct, uint32_t * lct)
{
 800dd60:	b480      	push	{r7}
 800dd62:	b085      	sub	sp, #20
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
 800dd68:	6039      	str	r1, [r7, #0]
//    }
//    while (*lct > __HAL_TIM_GET_COUNTER(&htim2));


	// Shpegun60 optimization on one timer warning!!!!  it wraps after 4294.967296 seconds,
	const uint32_t cnt = __HAL_TIM_GET_COUNTER(LTC_TIMER);
 800dd6a:	4b0e      	ldr	r3, [pc, #56]	@ (800dda4 <Timer_GetCounterValue+0x44>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd70:	60fb      	str	r3, [r7, #12]
	*lct = cnt % 1000000U;
 800dd72:	68fa      	ldr	r2, [r7, #12]
 800dd74:	4b0c      	ldr	r3, [pc, #48]	@ (800dda8 <Timer_GetCounterValue+0x48>)
 800dd76:	fba3 1302 	umull	r1, r3, r3, r2
 800dd7a:	0c9b      	lsrs	r3, r3, #18
 800dd7c:	490b      	ldr	r1, [pc, #44]	@ (800ddac <Timer_GetCounterValue+0x4c>)
 800dd7e:	fb01 f303 	mul.w	r3, r1, r3
 800dd82:	1ad3      	subs	r3, r2, r3
 800dd84:	683a      	ldr	r2, [r7, #0]
 800dd86:	6013      	str	r3, [r2, #0]
	*hct = cnt / 1000000U;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	4a07      	ldr	r2, [pc, #28]	@ (800dda8 <Timer_GetCounterValue+0x48>)
 800dd8c:	fba2 2303 	umull	r2, r3, r2, r3
 800dd90:	0c9a      	lsrs	r2, r3, #18
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	601a      	str	r2, [r3, #0]
}
 800dd96:	bf00      	nop
 800dd98:	3714      	adds	r7, #20
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda0:	4770      	bx	lr
 800dda2:	bf00      	nop
 800dda4:	240003d4 	.word	0x240003d4
 800dda8:	431bde83 	.word	0x431bde83
 800ddac:	000f4240 	.word	0x000f4240

0800ddb0 <Timer_SetInterval>:
 * @param   param An abstract parameter to be passed to the callback. This is
 *                  also the identifier of the given interval.
 * @return  Returns the \link #status_t status\endlink (#STATUS_OK on success).
 *****************************************************************************/
status_t Timer_SetInterval(uint32_t dt_microseconds, void * param)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b084      	sub	sp, #16
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	6039      	str	r1, [r7, #0]
    assert(dt_microseconds == 0 || dt_microseconds > 100);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d008      	beq.n	800ddd2 <Timer_SetInterval+0x22>
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2b64      	cmp	r3, #100	@ 0x64
 800ddc4:	d805      	bhi.n	800ddd2 <Timer_SetInterval+0x22>
 800ddc6:	4b2d      	ldr	r3, [pc, #180]	@ (800de7c <Timer_SetInterval+0xcc>)
 800ddc8:	4a2d      	ldr	r2, [pc, #180]	@ (800de80 <Timer_SetInterval+0xd0>)
 800ddca:	2180      	movs	r1, #128	@ 0x80
 800ddcc:	482d      	ldr	r0, [pc, #180]	@ (800de84 <Timer_SetInterval+0xd4>)
 800ddce:	f000 fb11 	bl	800e3f4 <__assert_func>

    /* Disable interrupt and timer */
    callback_param_ = 0;
 800ddd2:	4b2d      	ldr	r3, [pc, #180]	@ (800de88 <Timer_SetInterval+0xd8>)
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Stop_IT(PIT_TIMER);
 800ddd8:	482c      	ldr	r0, [pc, #176]	@ (800de8c <Timer_SetInterval+0xdc>)
 800ddda:	f7fd f87b 	bl	800aed4 <HAL_TIM_Base_Stop_IT>
    __HAL_TIM_CLEAR_IT(PIT_TIMER, TIM_IT_UPDATE);
 800ddde:	4b2b      	ldr	r3, [pc, #172]	@ (800de8c <Timer_SetInterval+0xdc>)
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	f06f 0201 	mvn.w	r2, #1
 800dde6:	611a      	str	r2, [r3, #16]

    if (dt_microseconds) {
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d041      	beq.n	800de72 <Timer_SetInterval+0xc2>
        /* Determine the prescaler and counter period values such that
         * the period fits into 16-bits. */
        uint32_t prescaler = (PIT_TIMER_BUS_CLK() / 1000000U);
 800ddee:	f7fa f879 	bl	8007ee4 <HAL_RCC_GetPCLK1Freq>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	005b      	lsls	r3, r3, #1
 800ddf6:	4a26      	ldr	r2, [pc, #152]	@ (800de90 <Timer_SetInterval+0xe0>)
 800ddf8:	fba2 2303 	umull	r2, r3, r2, r3
 800ddfc:	0c9b      	lsrs	r3, r3, #18
 800ddfe:	60fb      	str	r3, [r7, #12]
        uint32_t period = dt_microseconds;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	60bb      	str	r3, [r7, #8]

        while (period > 0xFFFF) {
 800de04:	e005      	b.n	800de12 <Timer_SetInterval+0x62>
            period >>= 1U;
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	085b      	lsrs	r3, r3, #1
 800de0a:	60bb      	str	r3, [r7, #8]
            prescaler <<= 1U;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	005b      	lsls	r3, r3, #1
 800de10:	60fb      	str	r3, [r7, #12]
        while (period > 0xFFFF) {
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800de18:	d2f5      	bcs.n	800de06 <Timer_SetInterval+0x56>
        }

        assert(prescaler < 0x10000U);
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800de20:	d305      	bcc.n	800de2e <Timer_SetInterval+0x7e>
 800de22:	4b1c      	ldr	r3, [pc, #112]	@ (800de94 <Timer_SetInterval+0xe4>)
 800de24:	4a16      	ldr	r2, [pc, #88]	@ (800de80 <Timer_SetInterval+0xd0>)
 800de26:	2192      	movs	r1, #146	@ 0x92
 800de28:	4816      	ldr	r0, [pc, #88]	@ (800de84 <Timer_SetInterval+0xd4>)
 800de2a:	f000 fae3 	bl	800e3f4 <__assert_func>

        /* Set prescaler and period values and reset counter. */
        __HAL_TIM_SET_PRESCALER(PIT_TIMER, prescaler - 1);
 800de2e:	4b17      	ldr	r3, [pc, #92]	@ (800de8c <Timer_SetInterval+0xdc>)
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	68fa      	ldr	r2, [r7, #12]
 800de34:	3a01      	subs	r2, #1
 800de36:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(PIT_TIMER, period - 1);
 800de38:	4b14      	ldr	r3, [pc, #80]	@ (800de8c <Timer_SetInterval+0xdc>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	68ba      	ldr	r2, [r7, #8]
 800de3e:	3a01      	subs	r2, #1
 800de40:	62da      	str	r2, [r3, #44]	@ 0x2c
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	3b01      	subs	r3, #1
 800de46:	4a11      	ldr	r2, [pc, #68]	@ (800de8c <Timer_SetInterval+0xdc>)
 800de48:	60d3      	str	r3, [r2, #12]
        __HAL_TIM_SET_COUNTER(PIT_TIMER, period - 1);
 800de4a:	4b10      	ldr	r3, [pc, #64]	@ (800de8c <Timer_SetInterval+0xdc>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	68ba      	ldr	r2, [r7, #8]
 800de50:	3a01      	subs	r2, #1
 800de52:	625a      	str	r2, [r3, #36]	@ 0x24
        /* The following generates an update event that triggers and update
         * of the auto-reload into the internal shadow registers. This is
         * required to update the timer configuration before the next update
         * event (i.e. under/overflow). Unfortunately this also generates
         * and immediate interrupt which is cleared in the next statement. */
        HAL_TIM_GenerateEvent(PIT_TIMER, TIM_EVENTSOURCE_UPDATE);
 800de54:	2101      	movs	r1, #1
 800de56:	480d      	ldr	r0, [pc, #52]	@ (800de8c <Timer_SetInterval+0xdc>)
 800de58:	f7fd f972 	bl	800b140 <HAL_TIM_GenerateEvent>
        __HAL_TIM_CLEAR_IT(PIT_TIMER, TIM_IT_UPDATE); // clear interrupt
 800de5c:	4b0b      	ldr	r3, [pc, #44]	@ (800de8c <Timer_SetInterval+0xdc>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	f06f 0201 	mvn.w	r2, #1
 800de64:	611a      	str	r2, [r3, #16]

        /* Enable interrupt and timer */
        callback_param_ = param;
 800de66:	4a08      	ldr	r2, [pc, #32]	@ (800de88 <Timer_SetInterval+0xd8>)
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	6013      	str	r3, [r2, #0]
        HAL_TIM_Base_Start_IT(PIT_TIMER);
 800de6c:	4807      	ldr	r0, [pc, #28]	@ (800de8c <Timer_SetInterval+0xdc>)
 800de6e:	f7fc ffab 	bl	800adc8 <HAL_TIM_Base_Start_IT>
    }

    return STATUS_OK;
 800de72:	2300      	movs	r3, #0
}
 800de74:	4618      	mov	r0, r3
 800de76:	3710      	adds	r7, #16
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}
 800de7c:	080279e4 	.word	0x080279e4
 800de80:	08027bac 	.word	0x08027bac
 800de84:	08027a14 	.word	0x08027a14
 800de88:	240005f8 	.word	0x240005f8
 800de8c:	24000420 	.word	0x24000420
 800de90:	431bde83 	.word	0x431bde83
 800de94:	08027a28 	.word	0x08027a28

0800de98 <Timer_SetCallback>:
 *          Passing a zero-pointer removes and disables the callback.
 * @param   f The timer callback function.
 * @return  Returns the \link #status_t status\endlink (#STATUS_OK on success).
 *****************************************************************************/
status_t Timer_SetCallback(timer_cb_t f)
{
 800de98:	b480      	push	{r7}
 800de9a:	b083      	sub	sp, #12
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
    timer_callback_ = f;
 800dea0:	4a04      	ldr	r2, [pc, #16]	@ (800deb4 <Timer_SetCallback+0x1c>)
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6013      	str	r3, [r2, #0]
    return STATUS_OK;
 800dea6:	2300      	movs	r3, #0
}
 800dea8:	4618      	mov	r0, r3
 800deaa:	370c      	adds	r7, #12
 800deac:	46bd      	mov	sp, r7
 800deae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb2:	4770      	bx	lr
 800deb4:	240005fc 	.word	0x240005fc

0800deb8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b082      	sub	sp, #8
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
    /* Trigger callback if the interrupt belongs to TIM4 and there is a callback */
    if ((htim == PIT_TIMER) && timer_callback_)
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	4a08      	ldr	r2, [pc, #32]	@ (800dee4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800dec4:	4293      	cmp	r3, r2
 800dec6:	d109      	bne.n	800dedc <HAL_TIM_PeriodElapsedCallback+0x24>
 800dec8:	4b07      	ldr	r3, [pc, #28]	@ (800dee8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d005      	beq.n	800dedc <HAL_TIM_PeriodElapsedCallback+0x24>
    {
        timer_callback_(callback_param_);
 800ded0:	4b05      	ldr	r3, [pc, #20]	@ (800dee8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	4a05      	ldr	r2, [pc, #20]	@ (800deec <HAL_TIM_PeriodElapsedCallback+0x34>)
 800ded6:	6812      	ldr	r2, [r2, #0]
 800ded8:	4610      	mov	r0, r2
 800deda:	4798      	blx	r3
    }
}
 800dedc:	bf00      	nop
 800dede:	3708      	adds	r7, #8
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}
 800dee4:	24000420 	.word	0x24000420
 800dee8:	240005fc 	.word	0x240005fc
 800deec:	240005f8 	.word	0x240005f8

0800def0 <UART_Init>:
 *          (UART or LPSCI) bus and DMA module
 * @param   -
 * @return  Returns the \link #status_t status\endlink (#STATUS_OK on success).
 *****************************************************************************/
status_t UART_Init(UART_HandleTypeDef* const m_huart)
{
 800def0:	b480      	push	{r7}
 800def2:	b083      	sub	sp, #12
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
	huart = m_huart;
 800def8:	4a04      	ldr	r2, [pc, #16]	@ (800df0c <UART_Init+0x1c>)
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6013      	str	r3, [r2, #0]
    return STATUS_OK;
 800defe:	2300      	movs	r3, #0
}
 800df00:	4618      	mov	r0, r3
 800df02:	370c      	adds	r7, #12
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr
 800df0c:	24000600 	.word	0x24000600

0800df10 <print>:
 * @param   fmt_s The usual printf parameters.
 *
 * @return  Returns the \link #status_t status\endlink (#STATUS_OK on success).
 *****************************************************************************/
status_t UART_Print(const char *fmt_s, ...)
{
 800df10:	b40f      	push	{r0, r1, r2, r3}
 800df12:	b580      	push	{r7, lr}
 800df14:	b084      	sub	sp, #16
 800df16:	af00      	add	r7, sp, #0
    va_list ap;
    va_start(ap, fmt_s);
 800df18:	f107 031c 	add.w	r3, r7, #28
 800df1c:	607b      	str	r3, [r7, #4]
    int len = vsnprintf_((char *) buffer_, sizeof(buffer_), fmt_s, ap);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	69ba      	ldr	r2, [r7, #24]
 800df22:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800df26:	480e      	ldr	r0, [pc, #56]	@ (800df60 <print+0x50>)
 800df28:	f001 fc32 	bl	800f790 <vsnprintf_>
 800df2c:	60f8      	str	r0, [r7, #12]
    va_end(ap);

    if (len < 0) return ERROR_FAIL;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	2b00      	cmp	r3, #0
 800df32:	da02      	bge.n	800df3a <print+0x2a>
 800df34:	f04f 33ff 	mov.w	r3, #4294967295
 800df38:	e00b      	b.n	800df52 <print+0x42>

    status_t status = STATUS_BUSY;
 800df3a:	2302      	movs	r3, #2
 800df3c:	60bb      	str	r3, [r7, #8]
    do {
        status = UART_SendBuffer(buffer_, len);
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	4619      	mov	r1, r3
 800df42:	4807      	ldr	r0, [pc, #28]	@ (800df60 <print+0x50>)
 800df44:	f000 f80e 	bl	800df64 <UART_SendBuffer>
 800df48:	60b8      	str	r0, [r7, #8]
    } while (status == STATUS_BUSY);
 800df4a:	68bb      	ldr	r3, [r7, #8]
 800df4c:	2b02      	cmp	r3, #2
 800df4e:	d0f6      	beq.n	800df3e <print+0x2e>

    return status;
 800df50:	68bb      	ldr	r3, [r7, #8]
}
 800df52:	4618      	mov	r0, r3
 800df54:	3710      	adds	r7, #16
 800df56:	46bd      	mov	sp, r7
 800df58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800df5c:	b004      	add	sp, #16
 800df5e:	4770      	bx	lr
 800df60:	24000604 	.word	0x24000604

0800df64 <UART_SendBuffer>:
 *           - #STATUS_BUSY on Tx line busy
 *           - #ERROR_NOT_INITIALIZED
 *           - #ERROR_INVALID_ARGUMENT
 *****************************************************************************/
status_t UART_SendBuffer(uint8_t const *txBuff, size_t txSize)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b084      	sub	sp, #16
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	6039      	str	r1, [r7, #0]
    /* Verify arguments. */
    if (!txBuff || txSize == 0) {
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d002      	beq.n	800df7a <UART_SendBuffer+0x16>
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d102      	bne.n	800df80 <UART_SendBuffer+0x1c>
        return ERROR_INVALID_ARGUMENT;
 800df7a:	f06f 0304 	mvn.w	r3, #4
 800df7e:	e012      	b.n	800dfa6 <UART_SendBuffer+0x42>
    }


    /* Set Tx Busy Status. */
    HAL_StatusTypeDef hal_error = HAL_UART_Transmit(huart, (uint8_t*) txBuff, txSize, 1000);
 800df80:	4b0b      	ldr	r3, [pc, #44]	@ (800dfb0 <UART_SendBuffer+0x4c>)
 800df82:	6818      	ldr	r0, [r3, #0]
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	b29a      	uxth	r2, r3
 800df88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800df8c:	6879      	ldr	r1, [r7, #4]
 800df8e:	f7fd fc79 	bl	800b884 <HAL_UART_Transmit>
 800df92:	4603      	mov	r3, r0
 800df94:	73fb      	strb	r3, [r7, #15]

    if (hal_error != HAL_OK) {
 800df96:	7bfb      	ldrb	r3, [r7, #15]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d003      	beq.n	800dfa4 <UART_SendBuffer+0x40>
        //return ERROR_FAIL;
        return -1000 - hal_error;
 800df9c:	7bfa      	ldrb	r2, [r7, #15]
 800df9e:	4b05      	ldr	r3, [pc, #20]	@ (800dfb4 <UART_SendBuffer+0x50>)
 800dfa0:	1a9b      	subs	r3, r3, r2
 800dfa2:	e000      	b.n	800dfa6 <UART_SendBuffer+0x42>
    }

    return STATUS_OK;
 800dfa4:	2300      	movs	r3, #0
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3710      	adds	r7, #16
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}
 800dfae:	bf00      	nop
 800dfb0:	24000600 	.word	0x24000600
 800dfb4:	fffffc18 	.word	0xfffffc18

0800dfb8 <HandleError>:
 *
 * @return  Never returns anything...
 *****************************************************************************/

void HandleError(status_t status, bool stop, char const * msg)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b084      	sub	sp, #16
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	60f8      	str	r0, [r7, #12]
 800dfc0:	460b      	mov	r3, r1
 800dfc2:	607a      	str	r2, [r7, #4]
 800dfc4:	72fb      	strb	r3, [r7, #11]
    /* Check for status < 0 and print message and halt the program execution. */
    if (status < STATUS_OK)
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	da0c      	bge.n	800dfe6 <HandleError+0x2e>
    {
        print("ERROR (%d): %s\n", status, msg);
 800dfcc:	687a      	ldr	r2, [r7, #4]
 800dfce:	68f9      	ldr	r1, [r7, #12]
 800dfd0:	4807      	ldr	r0, [pc, #28]	@ (800dff0 <HandleError+0x38>)
 800dfd2:	f7ff ff9d 	bl	800df10 <print>
        if (stop)
 800dfd6:	7afb      	ldrb	r3, [r7, #11]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d004      	beq.n	800dfe6 <HandleError+0x2e>
        {
            print(" --> Stopped execution due to a critical issue!\n"
 800dfdc:	4805      	ldr	r0, [pc, #20]	@ (800dff4 <HandleError+0x3c>)
 800dfde:	f7ff ff97 	bl	800df10 <print>
                  "     Check the hardware end reset the board!\n");
            while (1) __asm("nop"); // stop!
 800dfe2:	bf00      	nop
 800dfe4:	e7fd      	b.n	800dfe2 <HandleError+0x2a>
        }
    }
}
 800dfe6:	bf00      	nop
 800dfe8:	3710      	adds	r7, #16
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}
 800dfee:	bf00      	nop
 800dff0:	08027a40 	.word	0x08027a40
 800dff4:	08027a50 	.word	0x08027a50

0800dff8 <app_main>:

void app_main(void)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b082      	sub	sp, #8
 800dffc:	af00      	add	r7, sp, #0
    /* Initialize the platform hardware including the required peripherals
     * for the API. */
    status_t status = Board_Init();
 800dffe:	f7ff faad 	bl	800d55c <Board_Init>
 800e002:	6078      	str	r0, [r7, #4]
//    	                  "     Check the hardware end reset the board!\n");
//    	HAL_Delay(1000);
//    }


    HandleError(status, true, "Board initialization failed!");
 800e004:	4a04      	ldr	r2, [pc, #16]	@ (800e018 <app_main+0x20>)
 800e006:	2101      	movs	r1, #1
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f7ff ffd5 	bl	800dfb8 <HandleError>

    /* Pass control to the example code. */
    ExampleMain();
 800e00e:	f7f4 fe71 	bl	8002cf4 <ExampleMain>

    /* The examples should never return... */
    for (;;);
 800e012:	bf00      	nop
 800e014:	e7fd      	b.n	800e012 <app_main+0x1a>
 800e016:	bf00      	nop
 800e018:	08027ab0 	.word	0x08027ab0

0800e01c <_ZN13TimingManager7proceedEv>:
public:
	TimingManager();
	TimingManager(const uint32_t delay);
	~TimingManager();

    static inline void proceed() {
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b084      	sub	sp, #16
 800e020:	af00      	add	r7, sp, #0
        for (TimingManager* const timer : m_timers) {
 800e022:	4b17      	ldr	r3, [pc, #92]	@ (800e080 <_ZN13TimingManager7proceedEv+0x64>)
 800e024:	60fb      	str	r3, [r7, #12]
 800e026:	68f8      	ldr	r0, [r7, #12]
 800e028:	f000 f858 	bl	800e0dc <_ZNSt6vectorIP13TimingManagerSaIS1_EE5beginEv>
 800e02c:	4603      	mov	r3, r0
 800e02e:	607b      	str	r3, [r7, #4]
 800e030:	68f8      	ldr	r0, [r7, #12]
 800e032:	f000 f863 	bl	800e0fc <_ZNSt6vectorIP13TimingManagerSaIS1_EE3endEv>
 800e036:	4603      	mov	r3, r0
 800e038:	603b      	str	r3, [r7, #0]
 800e03a:	e013      	b.n	800e064 <_ZN13TimingManager7proceedEv+0x48>
 800e03c:	1d3b      	adds	r3, r7, #4
 800e03e:	4618      	mov	r0, r3
 800e040:	f000 f895 	bl	800e16e <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEdeEv>
 800e044:	4603      	mov	r3, r0
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	60bb      	str	r3, [r7, #8]
            if (timer->m_counter) {
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d004      	beq.n	800e05c <_ZN13TimingManager7proceedEv+0x40>
                --timer->m_counter;
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	1e5a      	subs	r2, r3, #1
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	601a      	str	r2, [r3, #0]
        for (TimingManager* const timer : m_timers) {
 800e05c:	1d3b      	adds	r3, r7, #4
 800e05e:	4618      	mov	r0, r3
 800e060:	f000 f875 	bl	800e14e <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEppEv>
 800e064:	463a      	mov	r2, r7
 800e066:	1d3b      	adds	r3, r7, #4
 800e068:	4611      	mov	r1, r2
 800e06a:	4618      	mov	r0, r3
 800e06c:	f000 f857 	bl	800e11e <_ZN9__gnu_cxxneIPP13TimingManagerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800e070:	4603      	mov	r3, r0
 800e072:	2b00      	cmp	r3, #0
 800e074:	d1e2      	bne.n	800e03c <_ZN13TimingManager7proceedEv+0x20>
            }
        }
    }
 800e076:	bf00      	nop
 800e078:	bf00      	nop
 800e07a:	3710      	adds	r7, #16
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}
 800e080:	24000a04 	.word	0x24000a04

0800e084 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 800e084:	b580      	push	{r7, lr}
 800e086:	b082      	sub	sp, #8
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f000 f88a 	bl	800e1a6 <_ZNSaIP13TimingManagerED1Ev>
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	4618      	mov	r0, r3
 800e096:	3708      	adds	r7, #8
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}

0800e09c <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b082      	sub	sp, #8
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f000 f86d 	bl	800e186 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE12_Vector_implC1Ev>
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3708      	adds	r7, #8
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}

0800e0b6 <_ZNSt6vectorIP13TimingManagerSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800e0b6:	b580      	push	{r7, lr}
 800e0b8:	b082      	sub	sp, #8
 800e0ba:	af00      	add	r7, sp, #0
 800e0bc:	6078      	str	r0, [r7, #4]
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f7ff ffeb 	bl	800e09c <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EEC1Ev>
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	3708      	adds	r7, #8
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}

0800e0d0 <HAL_SYSTICK_Callback>:



//----------------------------------------------------------------------------------------------------------
void HAL_SYSTICK_Callback(void)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	af00      	add	r7, sp, #0
	TimingManager::proceed();
 800e0d4:	f7ff ffa2 	bl	800e01c <_ZN13TimingManager7proceedEv>
}
 800e0d8:	bf00      	nop
 800e0da:	bd80      	pop	{r7, pc}

0800e0dc <_ZNSt6vectorIP13TimingManagerSaIS1_EE5beginEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      begin() _GLIBCXX_NOEXCEPT
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b084      	sub	sp, #16
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800e0e4:	687a      	ldr	r2, [r7, #4]
 800e0e6:	f107 030c 	add.w	r3, r7, #12
 800e0ea:	4611      	mov	r1, r2
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f000 f87f 	bl	800e1f0 <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3710      	adds	r7, #16
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <_ZNSt6vectorIP13TimingManagerSaIS1_EE3endEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      end() _GLIBCXX_NOEXCEPT
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	1d1a      	adds	r2, r3, #4
 800e108:	f107 030c 	add.w	r3, r7, #12
 800e10c:	4611      	mov	r1, r2
 800e10e:	4618      	mov	r0, r3
 800e110:	f000 f86e 	bl	800e1f0 <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	4618      	mov	r0, r3
 800e118:	3710      	adds	r7, #16
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}

0800e11e <_ZN9__gnu_cxxneIPP13TimingManagerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800e11e:	b590      	push	{r4, r7, lr}
 800e120:	b083      	sub	sp, #12
 800e122:	af00      	add	r7, sp, #0
 800e124:	6078      	str	r0, [r7, #4]
 800e126:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f000 f871 	bl	800e210 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 800e12e:	4603      	mov	r3, r0
 800e130:	681c      	ldr	r4, [r3, #0]
 800e132:	6838      	ldr	r0, [r7, #0]
 800e134:	f000 f86c 	bl	800e210 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 800e138:	4603      	mov	r3, r0
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	429c      	cmp	r4, r3
 800e13e:	bf14      	ite	ne
 800e140:	2301      	movne	r3, #1
 800e142:	2300      	moveq	r3, #0
 800e144:	b2db      	uxtb	r3, r3
 800e146:	4618      	mov	r0, r3
 800e148:	370c      	adds	r7, #12
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd90      	pop	{r4, r7, pc}

0800e14e <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800e14e:	b480      	push	{r7}
 800e150:	b083      	sub	sp, #12
 800e152:	af00      	add	r7, sp, #0
 800e154:	6078      	str	r0, [r7, #4]
	++_M_current;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	1d1a      	adds	r2, r3, #4
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	601a      	str	r2, [r3, #0]
	return *this;
 800e160:	687b      	ldr	r3, [r7, #4]
      }
 800e162:	4618      	mov	r0, r3
 800e164:	370c      	adds	r7, #12
 800e166:	46bd      	mov	sp, r7
 800e168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16c:	4770      	bx	lr

0800e16e <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800e16e:	b480      	push	{r7}
 800e170:	b083      	sub	sp, #12
 800e172:	af00      	add	r7, sp, #0
 800e174:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	4618      	mov	r0, r3
 800e17c:	370c      	adds	r7, #12
 800e17e:	46bd      	mov	sp, r7
 800e180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e184:	4770      	bx	lr

0800e186 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800e186:	b580      	push	{r7, lr}
 800e188:	b082      	sub	sp, #8
 800e18a:	af00      	add	r7, sp, #0
 800e18c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	f000 f849 	bl	800e226 <_ZNSaIP13TimingManagerEC1Ev>
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	4618      	mov	r0, r3
 800e198:	f000 f851 	bl	800e23e <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3708      	adds	r7, #8
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}

0800e1a6 <_ZNSaIP13TimingManagerED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800e1a6:	b580      	push	{r7, lr}
 800e1a8:	b082      	sub	sp, #8
 800e1aa:	af00      	add	r7, sp, #0
 800e1ac:	6078      	str	r0, [r7, #4]
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f000 f859 	bl	800e266 <_ZNSt15__new_allocatorIP13TimingManagerED1Ev>
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	3708      	adds	r7, #8
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}

0800e1be <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800e1be:	b580      	push	{r7, lr}
 800e1c0:	b082      	sub	sp, #8
 800e1c2:	af00      	add	r7, sp, #0
 800e1c4:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	689a      	ldr	r2, [r3, #8]
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	1ad3      	subs	r3, r2, r3
 800e1d4:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800e1d6:	461a      	mov	r2, r3
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f000 f84f 	bl	800e27c <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE13_M_deallocateEPS1_j>
      }
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f7ff ff4f 	bl	800e084 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE12_Vector_implD1Ev>
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	3708      	adds	r7, #8
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}

0800e1f0 <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800e1f0:	b480      	push	{r7}
 800e1f2:	b083      	sub	sp, #12
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
 800e1f8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	681a      	ldr	r2, [r3, #0]
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	601a      	str	r2, [r3, #0]
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	4618      	mov	r0, r3
 800e206:	370c      	adds	r7, #12
 800e208:	46bd      	mov	sp, r7
 800e20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20e:	4770      	bx	lr

0800e210 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800e210:	b480      	push	{r7}
 800e212:	b083      	sub	sp, #12
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	4618      	mov	r0, r3
 800e21c:	370c      	adds	r7, #12
 800e21e:	46bd      	mov	sp, r7
 800e220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e224:	4770      	bx	lr

0800e226 <_ZNSaIP13TimingManagerEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800e226:	b580      	push	{r7, lr}
 800e228:	b082      	sub	sp, #8
 800e22a:	af00      	add	r7, sp, #0
 800e22c:	6078      	str	r0, [r7, #4]
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f000 f837 	bl	800e2a2 <_ZNSt15__new_allocatorIP13TimingManagerEC1Ev>
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	4618      	mov	r0, r3
 800e238:	3708      	adds	r7, #8
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd80      	pop	{r7, pc}

0800e23e <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800e23e:	b480      	push	{r7}
 800e240:	b083      	sub	sp, #12
 800e242:	af00      	add	r7, sp, #0
 800e244:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2200      	movs	r2, #0
 800e24a:	601a      	str	r2, [r3, #0]
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2200      	movs	r2, #0
 800e250:	605a      	str	r2, [r3, #4]
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2200      	movs	r2, #0
 800e256:	609a      	str	r2, [r3, #8]
	{ }
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	4618      	mov	r0, r3
 800e25c:	370c      	adds	r7, #12
 800e25e:	46bd      	mov	sp, r7
 800e260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e264:	4770      	bx	lr

0800e266 <_ZNSt15__new_allocatorIP13TimingManagerED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e266:	b480      	push	{r7}
 800e268:	b083      	sub	sp, #12
 800e26a:	af00      	add	r7, sp, #0
 800e26c:	6078      	str	r0, [r7, #4]
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	4618      	mov	r0, r3
 800e272:	370c      	adds	r7, #12
 800e274:	46bd      	mov	sp, r7
 800e276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27a:	4770      	bx	lr

0800e27c <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b084      	sub	sp, #16
 800e280:	af00      	add	r7, sp, #0
 800e282:	60f8      	str	r0, [r7, #12]
 800e284:	60b9      	str	r1, [r7, #8]
 800e286:	607a      	str	r2, [r7, #4]
	if (__p)
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d005      	beq.n	800e29a <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	687a      	ldr	r2, [r7, #4]
 800e292:	68b9      	ldr	r1, [r7, #8]
 800e294:	4618      	mov	r0, r3
 800e296:	f000 f80f 	bl	800e2b8 <_ZNSt16allocator_traitsISaIP13TimingManagerEE10deallocateERS2_PS1_j>
      }
 800e29a:	bf00      	nop
 800e29c:	3710      	adds	r7, #16
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}

0800e2a2 <_ZNSt15__new_allocatorIP13TimingManagerEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e2a2:	b480      	push	{r7}
 800e2a4:	b083      	sub	sp, #12
 800e2a6:	af00      	add	r7, sp, #0
 800e2a8:	6078      	str	r0, [r7, #4]
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	370c      	adds	r7, #12
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b6:	4770      	bx	lr

0800e2b8 <_ZNSt16allocator_traitsISaIP13TimingManagerEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b084      	sub	sp, #16
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	60f8      	str	r0, [r7, #12]
 800e2c0:	60b9      	str	r1, [r7, #8]
 800e2c2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800e2c4:	687a      	ldr	r2, [r7, #4]
 800e2c6:	68b9      	ldr	r1, [r7, #8]
 800e2c8:	68f8      	ldr	r0, [r7, #12]
 800e2ca:	f000 f804 	bl	800e2d6 <_ZNSt15__new_allocatorIP13TimingManagerE10deallocateEPS1_j>
 800e2ce:	bf00      	nop
 800e2d0:	3710      	adds	r7, #16
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}

0800e2d6 <_ZNSt15__new_allocatorIP13TimingManagerE10deallocateEPS1_j>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800e2d6:	b580      	push	{r7, lr}
 800e2d8:	b084      	sub	sp, #16
 800e2da:	af00      	add	r7, sp, #0
 800e2dc:	60f8      	str	r0, [r7, #12]
 800e2de:	60b9      	str	r1, [r7, #8]
 800e2e0:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	009b      	lsls	r3, r3, #2
 800e2e6:	4619      	mov	r1, r3
 800e2e8:	68b8      	ldr	r0, [r7, #8]
 800e2ea:	f014 fc3f 	bl	8022b6c <_ZdlPvj>
      }
 800e2ee:	bf00      	nop
 800e2f0:	3710      	adds	r7, #16
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}

0800e2f6 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800e2f6:	b480      	push	{r7}
 800e2f8:	b083      	sub	sp, #12
 800e2fa:	af00      	add	r7, sp, #0
 800e2fc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	4618      	mov	r0, r3
 800e302:	370c      	adds	r7, #12
 800e304:	46bd      	mov	sp, r7
 800e306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30a:	4770      	bx	lr

0800e30c <_ZSt8_DestroyIPP13TimingManagerS1_EvT_S3_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b084      	sub	sp, #16
 800e310:	af00      	add	r7, sp, #0
 800e312:	60f8      	str	r0, [r7, #12]
 800e314:	60b9      	str	r1, [r7, #8]
 800e316:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800e318:	68b9      	ldr	r1, [r7, #8]
 800e31a:	68f8      	ldr	r0, [r7, #12]
 800e31c:	f000 f804 	bl	800e328 <_ZSt8_DestroyIPP13TimingManagerEvT_S3_>
    }
 800e320:	bf00      	nop
 800e322:	3710      	adds	r7, #16
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}

0800e328 <_ZSt8_DestroyIPP13TimingManagerEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800e328:	b580      	push	{r7, lr}
 800e32a:	b082      	sub	sp, #8
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 800e332:	6839      	ldr	r1, [r7, #0]
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f000 f804 	bl	800e342 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP13TimingManagerEEvT_S5_>
    }
 800e33a:	bf00      	nop
 800e33c:	3708      	adds	r7, #8
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}

0800e342 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP13TimingManagerEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800e342:	b480      	push	{r7}
 800e344:	b083      	sub	sp, #12
 800e346:	af00      	add	r7, sp, #0
 800e348:	6078      	str	r0, [r7, #4]
 800e34a:	6039      	str	r1, [r7, #0]
 800e34c:	bf00      	nop
 800e34e:	370c      	adds	r7, #12
 800e350:	46bd      	mov	sp, r7
 800e352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e356:	4770      	bx	lr

0800e358 <_Z41__static_initialization_and_destruction_0ii>:
 800e358:	b580      	push	{r7, lr}
 800e35a:	b082      	sub	sp, #8
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
 800e360:	6039      	str	r1, [r7, #0]
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	2b01      	cmp	r3, #1
 800e366:	d107      	bne.n	800e378 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e36e:	4293      	cmp	r3, r2
 800e370:	d102      	bne.n	800e378 <_Z41__static_initialization_and_destruction_0ii+0x20>
std::vector<TimingManager*> TimingManager::m_timers;
 800e372:	4809      	ldr	r0, [pc, #36]	@ (800e398 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800e374:	f7ff fe9f 	bl	800e0b6 <_ZNSt6vectorIP13TimingManagerSaIS1_EEC1Ev>
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d107      	bne.n	800e38e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e384:	4293      	cmp	r3, r2
 800e386:	d102      	bne.n	800e38e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800e388:	4803      	ldr	r0, [pc, #12]	@ (800e398 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800e38a:	f000 f807 	bl	800e39c <_ZNSt6vectorIP13TimingManagerSaIS1_EED1Ev>
}
 800e38e:	bf00      	nop
 800e390:	3708      	adds	r7, #8
 800e392:	46bd      	mov	sp, r7
 800e394:	bd80      	pop	{r7, pc}
 800e396:	bf00      	nop
 800e398:	24000a04 	.word	0x24000a04

0800e39c <_ZNSt6vectorIP13TimingManagerSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800e39c:	b5b0      	push	{r4, r5, r7, lr}
 800e39e:	b082      	sub	sp, #8
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681c      	ldr	r4, [r3, #0]
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f7ff ffa1 	bl	800e2f6 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>
 800e3b4:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800e3b6:	461a      	mov	r2, r3
 800e3b8:	4629      	mov	r1, r5
 800e3ba:	4620      	mov	r0, r4
 800e3bc:	f7ff ffa6 	bl	800e30c <_ZSt8_DestroyIPP13TimingManagerS1_EvT_S3_RSaIT0_E>
      }
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f7ff fefb 	bl	800e1be <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EED1Ev>
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	3708      	adds	r7, #8
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bdb0      	pop	{r4, r5, r7, pc}

0800e3d2 <_GLOBAL__sub_I__ZN13TimingManager8m_timersE>:
 800e3d2:	b580      	push	{r7, lr}
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800e3da:	2001      	movs	r0, #1
 800e3dc:	f7ff ffbc 	bl	800e358 <_Z41__static_initialization_and_destruction_0ii>
 800e3e0:	bd80      	pop	{r7, pc}

0800e3e2 <_GLOBAL__sub_D__ZN13TimingManager8m_timersE>:
 800e3e2:	b580      	push	{r7, lr}
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800e3ea:	2000      	movs	r0, #0
 800e3ec:	f7ff ffb4 	bl	800e358 <_Z41__static_initialization_and_destruction_0ii>
 800e3f0:	bd80      	pop	{r7, pc}
	...

0800e3f4 <__assert_func>:
    }
}

__attribute__((naked)) // avoid stack usage (no return from assert!)
void __assert_func(const char *file, int line, const char *func, const char *failedExpr)
{
 800e3f4:	460c      	mov	r4, r1
 800e3f6:	4619      	mov	r1, r3
    static bool is_asserting = false;
    if (!is_asserting)
 800e3f8:	4b12      	ldr	r3, [pc, #72]	@ (800e444 <__assert_func+0x50>)
 800e3fa:	781b      	ldrb	r3, [r3, #0]
 800e3fc:	f083 0301 	eor.w	r3, r3, #1
 800e400:	b2db      	uxtb	r3, r3
 800e402:	2b00      	cmp	r3, #0
 800e404:	d018      	beq.n	800e438 <__assert_func+0x44>
    {
        BREAKPOINT();
 800e406:	be00      	bkpt	0x0000
        is_asserting = true;
 800e408:	4b0e      	ldr	r3, [pc, #56]	@ (800e444 <__assert_func+0x50>)
 800e40a:	2501      	movs	r5, #1
 800e40c:	701d      	strb	r5, [r3, #0]
#endif

        /* Try to send message to master.
         * Note that sending via USB fails if the assert is called e.g. from
         * the HardFault handler. */
        print("ASSERT: expression \"%s\" failed;\n"
 800e40e:	9200      	str	r2, [sp, #0]
 800e410:	4623      	mov	r3, r4
 800e412:	4602      	mov	r2, r0
 800e414:	480c      	ldr	r0, [pc, #48]	@ (800e448 <__assert_func+0x54>)
 800e416:	f7ff fd7b 	bl	800df10 <print>
              "function \"%s\";\n",
              failedExpr, file, line, func);

        /* Wait for sending print statement */
        static volatile uint32_t i = 0;
        for (i = 0; i < 1000000; i++) __asm("nop");
 800e41a:	4b0c      	ldr	r3, [pc, #48]	@ (800e44c <__assert_func+0x58>)
 800e41c:	2200      	movs	r2, #0
 800e41e:	601a      	str	r2, [r3, #0]
 800e420:	e005      	b.n	800e42e <__assert_func+0x3a>
 800e422:	bf00      	nop
 800e424:	4b09      	ldr	r3, [pc, #36]	@ (800e44c <__assert_func+0x58>)
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	3301      	adds	r3, #1
 800e42a:	4a08      	ldr	r2, [pc, #32]	@ (800e44c <__assert_func+0x58>)
 800e42c:	6013      	str	r3, [r2, #0]
 800e42e:	4b07      	ldr	r3, [pc, #28]	@ (800e44c <__assert_func+0x58>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	4a07      	ldr	r2, [pc, #28]	@ (800e450 <__assert_func+0x5c>)
 800e434:	4293      	cmp	r3, r2
 800e436:	d9f4      	bls.n	800e422 <__assert_func+0x2e>
    }

    /* Stop or Reset. */
    BREAKPOINT();
 800e438:	be00      	bkpt	0x0000
    Board_Reset();
 800e43a:	f7ff f8bd 	bl	800d5b8 <Board_Reset>
    for (;;) __asm("nop");
 800e43e:	bf00      	nop
 800e440:	e7fd      	b.n	800e43e <__assert_func+0x4a>
 800e442:	bf00      	nop
 800e444:	24000a10 	.word	0x24000a10
 800e448:	08027ad0 	.word	0x08027ad0
 800e44c:	24000a14 	.word	0x24000a14
 800e450:	000f423f 	.word	0x000f423f

0800e454 <get_bit_access>:

// This is unnecessary in C99, since compound initializers can be used,
// but: 1. Some compilers are finicky about this; 2. Some people may want to convert this to C89;
// 3. If you try to use it as C++, only C++20 supports compound literals
static inline double_with_bit_access get_bit_access(double x)
{
 800e454:	b480      	push	{r7}
 800e456:	b087      	sub	sp, #28
 800e458:	af00      	add	r7, sp, #0
 800e45a:	60f8      	str	r0, [r7, #12]
 800e45c:	ed87 0b00 	vstr	d0, [r7]
  double_with_bit_access dwba;
  dwba.F = x;
 800e460:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e464:	e9c7 2304 	strd	r2, r3, [r7, #16]
  return dwba;
 800e468:	68f9      	ldr	r1, [r7, #12]
 800e46a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e46e:	e9c1 2300 	strd	r2, r3, [r1]
}
 800e472:	68f8      	ldr	r0, [r7, #12]
 800e474:	371c      	adds	r7, #28
 800e476:	46bd      	mov	sp, r7
 800e478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47c:	4770      	bx	lr

0800e47e <get_sign>:

static inline int get_sign(double x)
{
 800e47e:	b580      	push	{r7, lr}
 800e480:	b084      	sub	sp, #16
 800e482:	af00      	add	r7, sp, #0
 800e484:	ed87 0b00 	vstr	d0, [r7]
  // The sign is stored in the highest bit
  return get_bit_access(x).U >> (DOUBLE_SIZE_IN_BITS - 1);
 800e488:	f107 0308 	add.w	r3, r7, #8
 800e48c:	ed97 0b00 	vldr	d0, [r7]
 800e490:	4618      	mov	r0, r3
 800e492:	f7ff ffdf 	bl	800e454 <get_bit_access>
 800e496:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e49a:	f04f 0200 	mov.w	r2, #0
 800e49e:	f04f 0300 	mov.w	r3, #0
 800e4a2:	0fca      	lsrs	r2, r1, #31
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	4613      	mov	r3, r2
}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	3710      	adds	r7, #16
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}

0800e4b0 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 800e4b0:	b480      	push	{r7}
 800e4b2:	b085      	sub	sp, #20
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	60b9      	str	r1, [r7, #8]
 800e4b8:	607a      	str	r2, [r7, #4]
 800e4ba:	603b      	str	r3, [r7, #0]
 800e4bc:	4603      	mov	r3, r0
 800e4be:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 800e4c0:	687a      	ldr	r2, [r7, #4]
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d204      	bcs.n	800e4d2 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 800e4c8:	68ba      	ldr	r2, [r7, #8]
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	4413      	add	r3, r2
 800e4ce:	7bfa      	ldrb	r2, [r7, #15]
 800e4d0:	701a      	strb	r2, [r3, #0]
  }
}
 800e4d2:	bf00      	nop
 800e4d4:	3714      	adds	r7, #20
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4dc:	4770      	bx	lr

0800e4de <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800e4de:	b480      	push	{r7}
 800e4e0:	b085      	sub	sp, #20
 800e4e2:	af00      	add	r7, sp, #0
 800e4e4:	60b9      	str	r1, [r7, #8]
 800e4e6:	607a      	str	r2, [r7, #4]
 800e4e8:	603b      	str	r3, [r7, #0]
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800e4ee:	bf00      	nop
 800e4f0:	3714      	adds	r7, #20
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f8:	4770      	bx	lr

0800e4fa <_strnlen_s>:


// internal secure strlen
// @return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800e4fa:	b480      	push	{r7}
 800e4fc:	b085      	sub	sp, #20
 800e4fe:	af00      	add	r7, sp, #0
 800e500:	6078      	str	r0, [r7, #4]
 800e502:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	60fb      	str	r3, [r7, #12]
 800e508:	e002      	b.n	800e510 <_strnlen_s+0x16>
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	3301      	adds	r3, #1
 800e50e:	60fb      	str	r3, [r7, #12]
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	781b      	ldrb	r3, [r3, #0]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d004      	beq.n	800e522 <_strnlen_s+0x28>
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	1e5a      	subs	r2, r3, #1
 800e51c:	603a      	str	r2, [r7, #0]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d1f3      	bne.n	800e50a <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 800e522:	68fa      	ldr	r2, [r7, #12]
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	1ad3      	subs	r3, r2, r3
}
 800e528:	4618      	mov	r0, r3
 800e52a:	3714      	adds	r7, #20
 800e52c:	46bd      	mov	sp, r7
 800e52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e532:	4770      	bx	lr

0800e534 <_is_digit>:


// internal test if char is a digit (0-9)
// @return true if char is a digit
static inline bool _is_digit(char ch)
{
 800e534:	b480      	push	{r7}
 800e536:	b083      	sub	sp, #12
 800e538:	af00      	add	r7, sp, #0
 800e53a:	4603      	mov	r3, r0
 800e53c:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800e53e:	79fb      	ldrb	r3, [r7, #7]
 800e540:	2b2f      	cmp	r3, #47	@ 0x2f
 800e542:	d904      	bls.n	800e54e <_is_digit+0x1a>
 800e544:	79fb      	ldrb	r3, [r7, #7]
 800e546:	2b39      	cmp	r3, #57	@ 0x39
 800e548:	d801      	bhi.n	800e54e <_is_digit+0x1a>
 800e54a:	2301      	movs	r3, #1
 800e54c:	e000      	b.n	800e550 <_is_digit+0x1c>
 800e54e:	2300      	movs	r3, #0
 800e550:	f003 0301 	and.w	r3, r3, #1
 800e554:	b2db      	uxtb	r3, r3
}
 800e556:	4618      	mov	r0, r3
 800e558:	370c      	adds	r7, #12
 800e55a:	46bd      	mov	sp, r7
 800e55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e560:	4770      	bx	lr

0800e562 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800e562:	b580      	push	{r7, lr}
 800e564:	b084      	sub	sp, #16
 800e566:	af00      	add	r7, sp, #0
 800e568:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800e56a:	2300      	movs	r3, #0
 800e56c:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800e56e:	e00e      	b.n	800e58e <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800e570:	68fa      	ldr	r2, [r7, #12]
 800e572:	4613      	mov	r3, r2
 800e574:	009b      	lsls	r3, r3, #2
 800e576:	4413      	add	r3, r2
 800e578:	005b      	lsls	r3, r3, #1
 800e57a:	4618      	mov	r0, r3
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	1c59      	adds	r1, r3, #1
 800e582:	687a      	ldr	r2, [r7, #4]
 800e584:	6011      	str	r1, [r2, #0]
 800e586:	781b      	ldrb	r3, [r3, #0]
 800e588:	4403      	add	r3, r0
 800e58a:	3b30      	subs	r3, #48	@ 0x30
 800e58c:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	781b      	ldrb	r3, [r3, #0]
 800e594:	4618      	mov	r0, r3
 800e596:	f7ff ffcd 	bl	800e534 <_is_digit>
 800e59a:	4603      	mov	r3, r0
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d1e7      	bne.n	800e570 <_atoi+0xe>
  }
  return i;
 800e5a0:	68fb      	ldr	r3, [r7, #12]
}
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	3710      	adds	r7, #16
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bd80      	pop	{r7, pc}

0800e5aa <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800e5aa:	b590      	push	{r4, r7, lr}
 800e5ac:	b087      	sub	sp, #28
 800e5ae:	af00      	add	r7, sp, #0
 800e5b0:	60f8      	str	r0, [r7, #12]
 800e5b2:	60b9      	str	r1, [r7, #8]
 800e5b4:	607a      	str	r2, [r7, #4]
 800e5b6:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800e5bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5be:	f003 0302 	and.w	r3, r3, #2
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d125      	bne.n	800e612 <_out_rev+0x68>
 800e5c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5c8:	f003 0301 	and.w	r3, r3, #1
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d120      	bne.n	800e612 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 800e5d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5d2:	617b      	str	r3, [r7, #20]
 800e5d4:	e00a      	b.n	800e5ec <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 800e5d6:	687a      	ldr	r2, [r7, #4]
 800e5d8:	1c53      	adds	r3, r2, #1
 800e5da:	607b      	str	r3, [r7, #4]
 800e5dc:	68fc      	ldr	r4, [r7, #12]
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	68b9      	ldr	r1, [r7, #8]
 800e5e2:	2020      	movs	r0, #32
 800e5e4:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800e5e6:	697b      	ldr	r3, [r7, #20]
 800e5e8:	3301      	adds	r3, #1
 800e5ea:	617b      	str	r3, [r7, #20]
 800e5ec:	697a      	ldr	r2, [r7, #20]
 800e5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5f0:	429a      	cmp	r2, r3
 800e5f2:	d3f0      	bcc.n	800e5d6 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 800e5f4:	e00d      	b.n	800e612 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 800e5f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5f8:	3b01      	subs	r3, #1
 800e5fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e5fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e5fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e600:	4413      	add	r3, r2
 800e602:	7818      	ldrb	r0, [r3, #0]
 800e604:	687a      	ldr	r2, [r7, #4]
 800e606:	1c53      	adds	r3, r2, #1
 800e608:	607b      	str	r3, [r7, #4]
 800e60a:	68fc      	ldr	r4, [r7, #12]
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	68b9      	ldr	r1, [r7, #8]
 800e610:	47a0      	blx	r4
  while (len) {
 800e612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e614:	2b00      	cmp	r3, #0
 800e616:	d1ee      	bne.n	800e5f6 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800e618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e61a:	f003 0302 	and.w	r3, r3, #2
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d00e      	beq.n	800e640 <_out_rev+0x96>
    while (idx - start_idx < width) {
 800e622:	e007      	b.n	800e634 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 800e624:	687a      	ldr	r2, [r7, #4]
 800e626:	1c53      	adds	r3, r2, #1
 800e628:	607b      	str	r3, [r7, #4]
 800e62a:	68fc      	ldr	r4, [r7, #12]
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	68b9      	ldr	r1, [r7, #8]
 800e630:	2020      	movs	r0, #32
 800e632:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800e634:	687a      	ldr	r2, [r7, #4]
 800e636:	693b      	ldr	r3, [r7, #16]
 800e638:	1ad3      	subs	r3, r2, r3
 800e63a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e63c:	429a      	cmp	r2, r3
 800e63e:	d8f1      	bhi.n	800e624 <_out_rev+0x7a>
    }
  }

  return idx;
 800e640:	687b      	ldr	r3, [r7, #4]
}
 800e642:	4618      	mov	r0, r3
 800e644:	371c      	adds	r7, #28
 800e646:	46bd      	mov	sp, r7
 800e648:	bd90      	pop	{r4, r7, pc}

0800e64a <print_integer_finalization>:


// Invoked by print_integer after the actual number has been printed, performing necessary
// work on the number's prefix (as the number is initially printed in reverse order)
static size_t print_integer_finalization(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, numeric_base_t base, unsigned int precision, unsigned int width, unsigned int flags)
{
 800e64a:	b580      	push	{r7, lr}
 800e64c:	b08a      	sub	sp, #40	@ 0x28
 800e64e:	af04      	add	r7, sp, #16
 800e650:	60f8      	str	r0, [r7, #12]
 800e652:	60b9      	str	r1, [r7, #8]
 800e654:	607a      	str	r2, [r7, #4]
 800e656:	603b      	str	r3, [r7, #0]
  size_t unpadded_len = len;
 800e658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e65a:	617b      	str	r3, [r7, #20]

  // pad with leading zeros
  {
    if (!(flags & FLAGS_LEFT)) {
 800e65c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e65e:	f003 0302 	and.w	r3, r3, #2
 800e662:	2b00      	cmp	r3, #0
 800e664:	d12f      	bne.n	800e6c6 <print_integer_finalization+0x7c>
      if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800e666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d018      	beq.n	800e69e <print_integer_finalization+0x54>
 800e66c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e66e:	f003 0301 	and.w	r3, r3, #1
 800e672:	2b00      	cmp	r3, #0
 800e674:	d013      	beq.n	800e69e <print_integer_finalization+0x54>
 800e676:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d104      	bne.n	800e688 <print_integer_finalization+0x3e>
 800e67e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e680:	f003 030c 	and.w	r3, r3, #12
 800e684:	2b00      	cmp	r3, #0
 800e686:	d00a      	beq.n	800e69e <print_integer_finalization+0x54>
        width--;
 800e688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e68a:	3b01      	subs	r3, #1
 800e68c:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINT_INTEGER_BUFFER_SIZE)) {
 800e68e:	e006      	b.n	800e69e <print_integer_finalization+0x54>
        buf[len++] = '0';
 800e690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e692:	1c5a      	adds	r2, r3, #1
 800e694:	627a      	str	r2, [r7, #36]	@ 0x24
 800e696:	6a3a      	ldr	r2, [r7, #32]
 800e698:	4413      	add	r3, r2
 800e69a:	2230      	movs	r2, #48	@ 0x30
 800e69c:	701a      	strb	r2, [r3, #0]
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINT_INTEGER_BUFFER_SIZE)) {
 800e69e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6a0:	f003 0301 	and.w	r3, r3, #1
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d00e      	beq.n	800e6c6 <print_integer_finalization+0x7c>
 800e6a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e6aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	d20a      	bcs.n	800e6c6 <print_integer_finalization+0x7c>
 800e6b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6b2:	2b1f      	cmp	r3, #31
 800e6b4:	d9ec      	bls.n	800e690 <print_integer_finalization+0x46>
      }
    }

    while ((len < precision) && (len < PRINT_INTEGER_BUFFER_SIZE)) {
 800e6b6:	e006      	b.n	800e6c6 <print_integer_finalization+0x7c>
      buf[len++] = '0';
 800e6b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6ba:	1c5a      	adds	r2, r3, #1
 800e6bc:	627a      	str	r2, [r7, #36]	@ 0x24
 800e6be:	6a3a      	ldr	r2, [r7, #32]
 800e6c0:	4413      	add	r3, r2
 800e6c2:	2230      	movs	r2, #48	@ 0x30
 800e6c4:	701a      	strb	r2, [r3, #0]
    while ((len < precision) && (len < PRINT_INTEGER_BUFFER_SIZE)) {
 800e6c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e6c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	d202      	bcs.n	800e6d4 <print_integer_finalization+0x8a>
 800e6ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6d0:	2b1f      	cmp	r3, #31
 800e6d2:	d9f1      	bls.n	800e6b8 <print_integer_finalization+0x6e>
    }

    if (base == BASE_OCTAL && (len > unpadded_len)) {
 800e6d4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e6d8:	2b08      	cmp	r3, #8
 800e6da:	d107      	bne.n	800e6ec <print_integer_finalization+0xa2>
 800e6dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d903      	bls.n	800e6ec <print_integer_finalization+0xa2>
      // Since we've written some zeros, we've satisfied the alternative format leading space requirement
      flags &= ~FLAGS_HASH;
 800e6e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6e6:	f023 0310 	bic.w	r3, r3, #16
 800e6ea:	63bb      	str	r3, [r7, #56]	@ 0x38
    }
  }

  // handle hash
  if (flags & (FLAGS_HASH | FLAGS_POINTER)) {
 800e6ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e6ee:	f241 0310 	movw	r3, #4112	@ 0x1010
 800e6f2:	4013      	ands	r3, r2
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d064      	beq.n	800e7c2 <print_integer_finalization+0x178>
    if (!(flags & FLAGS_PRECISION) && len && ((len == precision) || (len == width))) {
 800e6f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d11f      	bne.n	800e742 <print_integer_finalization+0xf8>
 800e702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e704:	2b00      	cmp	r3, #0
 800e706:	d01c      	beq.n	800e742 <print_integer_finalization+0xf8>
 800e708:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e70c:	429a      	cmp	r2, r3
 800e70e:	d003      	beq.n	800e718 <print_integer_finalization+0xce>
 800e710:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e714:	429a      	cmp	r2, r3
 800e716:	d114      	bne.n	800e742 <print_integer_finalization+0xf8>
      // Let's take back some padding digits to fit in what will eventually
      // be the format-specific prefix
      if (unpadded_len < len) {
 800e718:	697a      	ldr	r2, [r7, #20]
 800e71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e71c:	429a      	cmp	r2, r3
 800e71e:	d202      	bcs.n	800e726 <print_integer_finalization+0xdc>
        len--;
 800e720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e722:	3b01      	subs	r3, #1
 800e724:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (len && (base == BASE_HEX)) {
 800e726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d00a      	beq.n	800e742 <print_integer_finalization+0xf8>
 800e72c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e730:	2b10      	cmp	r3, #16
 800e732:	d106      	bne.n	800e742 <print_integer_finalization+0xf8>
        if (unpadded_len < len) {
 800e734:	697a      	ldr	r2, [r7, #20]
 800e736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e738:	429a      	cmp	r2, r3
 800e73a:	d202      	bcs.n	800e742 <print_integer_finalization+0xf8>
          len--;
 800e73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e73e:	3b01      	subs	r3, #1
 800e740:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINT_INTEGER_BUFFER_SIZE)) {
 800e742:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e746:	2b10      	cmp	r3, #16
 800e748:	d10f      	bne.n	800e76a <print_integer_finalization+0x120>
 800e74a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e74c:	f003 0320 	and.w	r3, r3, #32
 800e750:	2b00      	cmp	r3, #0
 800e752:	d10a      	bne.n	800e76a <print_integer_finalization+0x120>
 800e754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e756:	2b1f      	cmp	r3, #31
 800e758:	d807      	bhi.n	800e76a <print_integer_finalization+0x120>
      buf[len++] = 'x';
 800e75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e75c:	1c5a      	adds	r2, r3, #1
 800e75e:	627a      	str	r2, [r7, #36]	@ 0x24
 800e760:	6a3a      	ldr	r2, [r7, #32]
 800e762:	4413      	add	r3, r2
 800e764:	2278      	movs	r2, #120	@ 0x78
 800e766:	701a      	strb	r2, [r3, #0]
 800e768:	e021      	b.n	800e7ae <print_integer_finalization+0x164>
    }
    else if ((base == BASE_HEX) && (flags & FLAGS_UPPERCASE) && (len < PRINT_INTEGER_BUFFER_SIZE)) {
 800e76a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e76e:	2b10      	cmp	r3, #16
 800e770:	d10f      	bne.n	800e792 <print_integer_finalization+0x148>
 800e772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e774:	f003 0320 	and.w	r3, r3, #32
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d00a      	beq.n	800e792 <print_integer_finalization+0x148>
 800e77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e77e:	2b1f      	cmp	r3, #31
 800e780:	d807      	bhi.n	800e792 <print_integer_finalization+0x148>
      buf[len++] = 'X';
 800e782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e784:	1c5a      	adds	r2, r3, #1
 800e786:	627a      	str	r2, [r7, #36]	@ 0x24
 800e788:	6a3a      	ldr	r2, [r7, #32]
 800e78a:	4413      	add	r3, r2
 800e78c:	2258      	movs	r2, #88	@ 0x58
 800e78e:	701a      	strb	r2, [r3, #0]
 800e790:	e00d      	b.n	800e7ae <print_integer_finalization+0x164>
    }
    else if ((base == BASE_BINARY) && (len < PRINT_INTEGER_BUFFER_SIZE)) {
 800e792:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e796:	2b02      	cmp	r3, #2
 800e798:	d109      	bne.n	800e7ae <print_integer_finalization+0x164>
 800e79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e79c:	2b1f      	cmp	r3, #31
 800e79e:	d806      	bhi.n	800e7ae <print_integer_finalization+0x164>
      buf[len++] = 'b';
 800e7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7a2:	1c5a      	adds	r2, r3, #1
 800e7a4:	627a      	str	r2, [r7, #36]	@ 0x24
 800e7a6:	6a3a      	ldr	r2, [r7, #32]
 800e7a8:	4413      	add	r3, r2
 800e7aa:	2262      	movs	r2, #98	@ 0x62
 800e7ac:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINT_INTEGER_BUFFER_SIZE) {
 800e7ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7b0:	2b1f      	cmp	r3, #31
 800e7b2:	d806      	bhi.n	800e7c2 <print_integer_finalization+0x178>
      buf[len++] = '0';
 800e7b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7b6:	1c5a      	adds	r2, r3, #1
 800e7b8:	627a      	str	r2, [r7, #36]	@ 0x24
 800e7ba:	6a3a      	ldr	r2, [r7, #32]
 800e7bc:	4413      	add	r3, r2
 800e7be:	2230      	movs	r2, #48	@ 0x30
 800e7c0:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINT_INTEGER_BUFFER_SIZE) {
 800e7c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7c4:	2b1f      	cmp	r3, #31
 800e7c6:	d824      	bhi.n	800e812 <print_integer_finalization+0x1c8>
    if (negative) {
 800e7c8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d007      	beq.n	800e7e0 <print_integer_finalization+0x196>
      buf[len++] = '-';
 800e7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7d2:	1c5a      	adds	r2, r3, #1
 800e7d4:	627a      	str	r2, [r7, #36]	@ 0x24
 800e7d6:	6a3a      	ldr	r2, [r7, #32]
 800e7d8:	4413      	add	r3, r2
 800e7da:	222d      	movs	r2, #45	@ 0x2d
 800e7dc:	701a      	strb	r2, [r3, #0]
 800e7de:	e018      	b.n	800e812 <print_integer_finalization+0x1c8>
    }
    else if (flags & FLAGS_PLUS) {
 800e7e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7e2:	f003 0304 	and.w	r3, r3, #4
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d007      	beq.n	800e7fa <print_integer_finalization+0x1b0>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800e7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7ec:	1c5a      	adds	r2, r3, #1
 800e7ee:	627a      	str	r2, [r7, #36]	@ 0x24
 800e7f0:	6a3a      	ldr	r2, [r7, #32]
 800e7f2:	4413      	add	r3, r2
 800e7f4:	222b      	movs	r2, #43	@ 0x2b
 800e7f6:	701a      	strb	r2, [r3, #0]
 800e7f8:	e00b      	b.n	800e812 <print_integer_finalization+0x1c8>
    }
    else if (flags & FLAGS_SPACE) {
 800e7fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7fc:	f003 0308 	and.w	r3, r3, #8
 800e800:	2b00      	cmp	r3, #0
 800e802:	d006      	beq.n	800e812 <print_integer_finalization+0x1c8>
      buf[len++] = ' ';
 800e804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e806:	1c5a      	adds	r2, r3, #1
 800e808:	627a      	str	r2, [r7, #36]	@ 0x24
 800e80a:	6a3a      	ldr	r2, [r7, #32]
 800e80c:	4413      	add	r3, r2
 800e80e:	2220      	movs	r2, #32
 800e810:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800e812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e814:	9303      	str	r3, [sp, #12]
 800e816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e818:	9302      	str	r3, [sp, #8]
 800e81a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e81c:	9301      	str	r3, [sp, #4]
 800e81e:	6a3b      	ldr	r3, [r7, #32]
 800e820:	9300      	str	r3, [sp, #0]
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	687a      	ldr	r2, [r7, #4]
 800e826:	68b9      	ldr	r1, [r7, #8]
 800e828:	68f8      	ldr	r0, [r7, #12]
 800e82a:	f7ff febe 	bl	800e5aa <_out_rev>
 800e82e:	4603      	mov	r3, r0
}
 800e830:	4618      	mov	r0, r3
 800e832:	3718      	adds	r7, #24
 800e834:	46bd      	mov	sp, r7
 800e836:	bd80      	pop	{r7, pc}

0800e838 <print_integer>:

// An internal itoa-like function
static size_t print_integer(out_fct_type out, char* buffer, size_t idx, size_t maxlen, printf_unsigned_value_t value, bool negative, numeric_base_t base, unsigned int precision, unsigned int width, unsigned int flags)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b096      	sub	sp, #88	@ 0x58
 800e83c:	af08      	add	r7, sp, #32
 800e83e:	60f8      	str	r0, [r7, #12]
 800e840:	60b9      	str	r1, [r7, #8]
 800e842:	607a      	str	r2, [r7, #4]
 800e844:	603b      	str	r3, [r7, #0]
  char buf[PRINT_INTEGER_BUFFER_SIZE];
  size_t len = 0U;
 800e846:	2300      	movs	r3, #0
 800e848:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!value) {
 800e84a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d11a      	bne.n	800e886 <print_integer+0x4e>
    if ( !(flags & FLAGS_PRECISION) ) {
 800e850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e852:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e856:	2b00      	cmp	r3, #0
 800e858:	d10c      	bne.n	800e874 <print_integer+0x3c>
      buf[len++] = '0';
 800e85a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e85c:	1c5a      	adds	r2, r3, #1
 800e85e:	637a      	str	r2, [r7, #52]	@ 0x34
 800e860:	3338      	adds	r3, #56	@ 0x38
 800e862:	443b      	add	r3, r7
 800e864:	2230      	movs	r2, #48	@ 0x30
 800e866:	f803 2c28 	strb.w	r2, [r3, #-40]
      flags &= ~FLAGS_HASH;
 800e86a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e86c:	f023 0310 	bic.w	r3, r3, #16
 800e870:	657b      	str	r3, [r7, #84]	@ 0x54
 800e872:	e03c      	b.n	800e8ee <print_integer+0xb6>
      // We drop this flag this since either the alternative and regular modes of the specifier
      // don't differ on 0 values, or (in the case of octal) we've already provided the special
      // handling for this mode.
    }
    else if (base == BASE_HEX) {
 800e874:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800e878:	2b10      	cmp	r3, #16
 800e87a:	d138      	bne.n	800e8ee <print_integer+0xb6>
      flags &= ~FLAGS_HASH;
 800e87c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e87e:	f023 0310 	bic.w	r3, r3, #16
 800e882:	657b      	str	r3, [r7, #84]	@ 0x54
 800e884:	e033      	b.n	800e8ee <print_integer+0xb6>
      // don't differ on 0 values
    }
  }
  else {
    do {
      const char digit = (char)(value % base);
 800e886:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800e88a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e88c:	fbb3 f1f2 	udiv	r1, r3, r2
 800e890:	fb01 f202 	mul.w	r2, r1, r2
 800e894:	1a9b      	subs	r3, r3, r2
 800e896:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
 800e89a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e89e:	2b09      	cmp	r3, #9
 800e8a0:	d804      	bhi.n	800e8ac <print_integer+0x74>
 800e8a2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e8a6:	3330      	adds	r3, #48	@ 0x30
 800e8a8:	b2da      	uxtb	r2, r3
 800e8aa:	e00d      	b.n	800e8c8 <print_integer+0x90>
 800e8ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8ae:	f003 0320 	and.w	r3, r3, #32
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d001      	beq.n	800e8ba <print_integer+0x82>
 800e8b6:	2241      	movs	r2, #65	@ 0x41
 800e8b8:	e000      	b.n	800e8bc <print_integer+0x84>
 800e8ba:	2261      	movs	r2, #97	@ 0x61
 800e8bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e8c0:	4413      	add	r3, r2
 800e8c2:	b2db      	uxtb	r3, r3
 800e8c4:	3b0a      	subs	r3, #10
 800e8c6:	b2da      	uxtb	r2, r3
 800e8c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8ca:	1c59      	adds	r1, r3, #1
 800e8cc:	6379      	str	r1, [r7, #52]	@ 0x34
 800e8ce:	3338      	adds	r3, #56	@ 0x38
 800e8d0:	443b      	add	r3, r7
 800e8d2:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800e8d6:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800e8da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e8dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8e0:	643b      	str	r3, [r7, #64]	@ 0x40
    } while (value && (len < PRINT_INTEGER_BUFFER_SIZE));
 800e8e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d002      	beq.n	800e8ee <print_integer+0xb6>
 800e8e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8ea:	2b1f      	cmp	r3, #31
 800e8ec:	d9cb      	bls.n	800e886 <print_integer+0x4e>
  }

  return print_integer_finalization(out, buffer, idx, maxlen, buf, len, negative, base, precision, width, flags);
 800e8ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8f0:	9306      	str	r3, [sp, #24]
 800e8f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e8f4:	9305      	str	r3, [sp, #20]
 800e8f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e8f8:	9304      	str	r3, [sp, #16]
 800e8fa:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800e8fe:	9303      	str	r3, [sp, #12]
 800e900:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800e904:	9302      	str	r3, [sp, #8]
 800e906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e908:	9301      	str	r3, [sp, #4]
 800e90a:	f107 0310 	add.w	r3, r7, #16
 800e90e:	9300      	str	r3, [sp, #0]
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	687a      	ldr	r2, [r7, #4]
 800e914:	68b9      	ldr	r1, [r7, #8]
 800e916:	68f8      	ldr	r0, [r7, #12]
 800e918:	f7ff fe97 	bl	800e64a <print_integer_finalization>
 800e91c:	4603      	mov	r3, r0
}
 800e91e:	4618      	mov	r0, r3
 800e920:	3738      	adds	r7, #56	@ 0x38
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}
	...

0800e928 <get_components>:

// Break up a double number - which is known to be a finite non-negative number -
// into its base-10 parts: integral - before the decimal point, and fractional - after it.
// Taken the precision into account, but does not change it even internally.
static struct double_components get_components(double number, unsigned int precision)
{
 800e928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e92c:	b094      	sub	sp, #80	@ 0x50
 800e92e:	af00      	add	r7, sp, #0
 800e930:	6278      	str	r0, [r7, #36]	@ 0x24
 800e932:	ed87 0b06 	vstr	d0, [r7, #24]
 800e936:	6239      	str	r1, [r7, #32]
  struct double_components number_;
  number_.is_negative = get_sign(number);
 800e938:	ed97 0b06 	vldr	d0, [r7, #24]
 800e93c:	f7ff fd9f 	bl	800e47e <get_sign>
 800e940:	4603      	mov	r3, r0
 800e942:	2b00      	cmp	r3, #0
 800e944:	bf14      	ite	ne
 800e946:	2301      	movne	r3, #1
 800e948:	2300      	moveq	r3, #0
 800e94a:	b2db      	uxtb	r3, r3
 800e94c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  double abs_number = (number_.is_negative) ? -number : number;
 800e950:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800e954:	2b00      	cmp	r3, #0
 800e956:	d004      	beq.n	800e962 <get_components+0x3a>
 800e958:	ed97 7b06 	vldr	d7, [r7, #24]
 800e95c:	eeb1 7b47 	vneg.f64	d7, d7
 800e960:	e001      	b.n	800e966 <get_components+0x3e>
 800e962:	ed97 7b06 	vldr	d7, [r7, #24]
 800e966:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
  number_.integral = (int_fast64_t)abs_number;
 800e96a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800e96e:	f7f1 ff4b 	bl	8000808 <__aeabi_d2lz>
 800e972:	4602      	mov	r2, r0
 800e974:	460b      	mov	r3, r1
 800e976:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  double remainder = (abs_number - number_.integral) * powers_of_10[precision];
 800e97a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e97e:	4610      	mov	r0, r2
 800e980:	4619      	mov	r1, r3
 800e982:	f7f1 feab 	bl	80006dc <__aeabi_l2d>
 800e986:	ec41 0b16 	vmov	d6, r0, r1
 800e98a:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 800e98e:	ee37 6b46 	vsub.f64	d6, d7, d6
 800e992:	4a62      	ldr	r2, [pc, #392]	@ (800eb1c <get_components+0x1f4>)
 800e994:	6a3b      	ldr	r3, [r7, #32]
 800e996:	00db      	lsls	r3, r3, #3
 800e998:	4413      	add	r3, r2
 800e99a:	ed93 7b00 	vldr	d7, [r3]
 800e99e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e9a2:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
  number_.fractional = (int_fast64_t)remainder;
 800e9a6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800e9aa:	f7f1 ff2d 	bl	8000808 <__aeabi_d2lz>
 800e9ae:	4602      	mov	r2, r0
 800e9b0:	460b      	mov	r3, r1
 800e9b2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

  remainder -= (double) number_.fractional;
 800e9b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800e9ba:	4610      	mov	r0, r2
 800e9bc:	4619      	mov	r1, r3
 800e9be:	f7f1 fe8d 	bl	80006dc <__aeabi_l2d>
 800e9c2:	ec41 0b16 	vmov	d6, r0, r1
 800e9c6:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 800e9ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e9ce:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40

  if (remainder > 0.5) {
 800e9d2:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 800e9d6:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 800e9da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e9de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9e2:	dd2f      	ble.n	800ea44 <get_components+0x11c>
    ++number_.fractional;
 800e9e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800e9e8:	1c51      	adds	r1, r2, #1
 800e9ea:	6139      	str	r1, [r7, #16]
 800e9ec:	f143 0300 	adc.w	r3, r3, #0
 800e9f0:	617b      	str	r3, [r7, #20]
 800e9f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e9f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    // handle rollover, e.g. case 0.99 with precision 1 is 1.0
    if ((double) number_.fractional >= powers_of_10[precision]) {
 800e9fa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800e9fe:	4610      	mov	r0, r2
 800ea00:	4619      	mov	r1, r3
 800ea02:	f7f1 fe6b 	bl	80006dc <__aeabi_l2d>
 800ea06:	ec41 0b16 	vmov	d6, r0, r1
 800ea0a:	4a44      	ldr	r2, [pc, #272]	@ (800eb1c <get_components+0x1f4>)
 800ea0c:	6a3b      	ldr	r3, [r7, #32]
 800ea0e:	00db      	lsls	r3, r3, #3
 800ea10:	4413      	add	r3, r2
 800ea12:	ed93 7b00 	vldr	d7, [r3]
 800ea16:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ea1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea1e:	db32      	blt.n	800ea86 <get_components+0x15e>
      number_.fractional = 0;
 800ea20:	f04f 0200 	mov.w	r2, #0
 800ea24:	f04f 0300 	mov.w	r3, #0
 800ea28:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
      ++number_.integral;
 800ea2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ea30:	1c51      	adds	r1, r2, #1
 800ea32:	60b9      	str	r1, [r7, #8]
 800ea34:	f143 0300 	adc.w	r3, r3, #0
 800ea38:	60fb      	str	r3, [r7, #12]
 800ea3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ea3e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800ea42:	e020      	b.n	800ea86 <get_components+0x15e>
    }
  }
  else if (remainder == 0.5) {
 800ea44:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 800ea48:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 800ea4c:	eeb4 7b46 	vcmp.f64	d7, d6
 800ea50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea54:	d117      	bne.n	800ea86 <get_components+0x15e>
    if ((number_.fractional == 0U) || (number_.fractional & 1U)) {
 800ea56:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800ea5a:	4313      	orrs	r3, r2
 800ea5c:	d008      	beq.n	800ea70 <get_components+0x148>
 800ea5e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800ea62:	f002 0801 	and.w	r8, r2, #1
 800ea66:	f04f 0900 	mov.w	r9, #0
 800ea6a:	ea58 0309 	orrs.w	r3, r8, r9
 800ea6e:	d00a      	beq.n	800ea86 <get_components+0x15e>
      // if halfway, round up if odd OR if last digit is 0
      ++number_.fractional;
 800ea70:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800ea74:	1c51      	adds	r1, r2, #1
 800ea76:	6039      	str	r1, [r7, #0]
 800ea78:	f143 0300 	adc.w	r3, r3, #0
 800ea7c:	607b      	str	r3, [r7, #4]
 800ea7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea82:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    }
  }

  if (precision == 0U) {
 800ea86:	6a3b      	ldr	r3, [r7, #32]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d137      	bne.n	800eafc <get_components+0x1d4>
    remainder = abs_number - (double) number_.integral;
 800ea8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ea90:	4610      	mov	r0, r2
 800ea92:	4619      	mov	r1, r3
 800ea94:	f7f1 fe22 	bl	80006dc <__aeabi_l2d>
 800ea98:	ec41 0b16 	vmov	d6, r0, r1
 800ea9c:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 800eaa0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800eaa4:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
    if ((!(remainder < 0.5) || (remainder > 0.5)) && (number_.integral & 1)) {
 800eaa8:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 800eaac:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 800eab0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800eab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eab8:	bf4c      	ite	mi
 800eaba:	2301      	movmi	r3, #1
 800eabc:	2300      	movpl	r3, #0
 800eabe:	b2db      	uxtb	r3, r3
 800eac0:	f083 0301 	eor.w	r3, r3, #1
 800eac4:	b2db      	uxtb	r3, r3
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d108      	bne.n	800eadc <get_components+0x1b4>
 800eaca:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 800eace:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 800ead2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ead6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eada:	dd0f      	ble.n	800eafc <get_components+0x1d4>
 800eadc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800eae0:	f002 0401 	and.w	r4, r2, #1
 800eae4:	2500      	movs	r5, #0
 800eae6:	ea54 0305 	orrs.w	r3, r4, r5
 800eaea:	d007      	beq.n	800eafc <get_components+0x1d4>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++number_.integral;
 800eaec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800eaf0:	f112 0a01 	adds.w	sl, r2, #1
 800eaf4:	f143 0b00 	adc.w	fp, r3, #0
 800eaf8:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	@ 0x28
    }
  }
  return number_;
 800eafc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eafe:	461d      	mov	r5, r3
 800eb00:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800eb04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eb06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800eb08:	e894 0003 	ldmia.w	r4, {r0, r1}
 800eb0c:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800eb10:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eb12:	3750      	adds	r7, #80	@ 0x50
 800eb14:	46bd      	mov	sp, r7
 800eb16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eb1a:	bf00      	nop
 800eb1c:	08027bc0 	.word	0x08027bc0

0800eb20 <sprint_broken_up_decimal>:
#endif

static size_t sprint_broken_up_decimal(
  struct double_components number_, out_fct_type out, char *buffer, size_t idx, size_t maxlen, unsigned int precision,
  unsigned int width, unsigned int flags, char *buf, size_t len)
{
 800eb20:	b084      	sub	sp, #16
 800eb22:	b580      	push	{r7, lr}
 800eb24:	b088      	sub	sp, #32
 800eb26:	af04      	add	r7, sp, #16
 800eb28:	f107 0c18 	add.w	ip, r7, #24
 800eb2c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  if (precision != 0U) {
 800eb30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	f000 8086 	beq.w	800ec44 <sprint_broken_up_decimal+0x124>
    // do fractional part, as an unsigned number

    unsigned int count = precision;
 800eb38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eb3a:	60fb      	str	r3, [r7, #12]

    if ((flags & FLAGS_ADAPT_EXP) && !(flags & FLAGS_HASH)) {
 800eb3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eb3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d029      	beq.n	800eb9a <sprint_broken_up_decimal+0x7a>
 800eb46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eb48:	f003 0310 	and.w	r3, r3, #16
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d124      	bne.n	800eb9a <sprint_broken_up_decimal+0x7a>
      // %g/%G mandates we skip the trailing 0 digits...
      if (number_.fractional > 0) {
 800eb50:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800eb54:	2a01      	cmp	r2, #1
 800eb56:	f173 0300 	sbcs.w	r3, r3, #0
 800eb5a:	db1e      	blt.n	800eb9a <sprint_broken_up_decimal+0x7a>
        while(true) {
          int_fast64_t digit = number_.fractional % 10U;
 800eb5c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800eb60:	f04f 020a 	mov.w	r2, #10
 800eb64:	f04f 0300 	mov.w	r3, #0
 800eb68:	f7f1 fde6 	bl	8000738 <__aeabi_ldivmod>
 800eb6c:	e9c7 2300 	strd	r2, r3, [r7]
          if (digit != 0) {
 800eb70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb74:	4313      	orrs	r3, r2
 800eb76:	d10f      	bne.n	800eb98 <sprint_broken_up_decimal+0x78>
            break;
          }
          --count;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	3b01      	subs	r3, #1
 800eb7c:	60fb      	str	r3, [r7, #12]
          number_.fractional /= 10U;
 800eb7e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800eb82:	f04f 020a 	mov.w	r2, #10
 800eb86:	f04f 0300 	mov.w	r3, #0
 800eb8a:	f7f1 fdd5 	bl	8000738 <__aeabi_ldivmod>
 800eb8e:	4602      	mov	r2, r0
 800eb90:	460b      	mov	r3, r1
 800eb92:	e9c7 2308 	strd	r2, r3, [r7, #32]
        while(true) {
 800eb96:	e7e1      	b.n	800eb5c <sprint_broken_up_decimal+0x3c>
            break;
 800eb98:	bf00      	nop
      }
      // ... and even the decimal point if there are no
      // non-zero fractional part digits (see below)
    }

    if (number_.fractional > 0 || !(flags & FLAGS_ADAPT_EXP) || (flags & FLAGS_HASH) ) {
 800eb9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800eb9e:	2a01      	cmp	r2, #1
 800eba0:	f173 0300 	sbcs.w	r3, r3, #0
 800eba4:	da2e      	bge.n	800ec04 <sprint_broken_up_decimal+0xe4>
 800eba6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eba8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d029      	beq.n	800ec04 <sprint_broken_up_decimal+0xe4>
 800ebb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ebb2:	f003 0310 	and.w	r3, r3, #16
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d075      	beq.n	800eca6 <sprint_broken_up_decimal+0x186>
      while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800ebba:	e023      	b.n	800ec04 <sprint_broken_up_decimal+0xe4>
        --count;
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	3b01      	subs	r3, #1
 800ebc0:	60fb      	str	r3, [r7, #12]
        buf[len++] = (char)('0' + number_.fractional % 10U);
 800ebc2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ebc6:	f04f 020a 	mov.w	r2, #10
 800ebca:	f04f 0300 	mov.w	r3, #0
 800ebce:	f7f1 fdb3 	bl	8000738 <__aeabi_ldivmod>
 800ebd2:	b2d2      	uxtb	r2, r2
 800ebd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ebd6:	1c59      	adds	r1, r3, #1
 800ebd8:	6539      	str	r1, [r7, #80]	@ 0x50
 800ebda:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800ebdc:	440b      	add	r3, r1
 800ebde:	3230      	adds	r2, #48	@ 0x30
 800ebe0:	b2d2      	uxtb	r2, r2
 800ebe2:	701a      	strb	r2, [r3, #0]
        if (!(number_.fractional /= 10U)) {
 800ebe4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ebe8:	f04f 020a 	mov.w	r2, #10
 800ebec:	f04f 0300 	mov.w	r3, #0
 800ebf0:	f7f1 fda2 	bl	8000738 <__aeabi_ldivmod>
 800ebf4:	4602      	mov	r2, r0
 800ebf6:	460b      	mov	r3, r1
 800ebf8:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800ebfc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ec00:	4313      	orrs	r3, r2
 800ec02:	d003      	beq.n	800ec0c <sprint_broken_up_decimal+0xec>
      while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800ec04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec06:	2b1f      	cmp	r3, #31
 800ec08:	d9d8      	bls.n	800ebbc <sprint_broken_up_decimal+0x9c>
 800ec0a:	e008      	b.n	800ec1e <sprint_broken_up_decimal+0xfe>
          break;
 800ec0c:	bf00      	nop
        }
      }
      // add extra 0s
      while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800ec0e:	e006      	b.n	800ec1e <sprint_broken_up_decimal+0xfe>
        buf[len++] = '0';
 800ec10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec12:	1c5a      	adds	r2, r3, #1
 800ec14:	653a      	str	r2, [r7, #80]	@ 0x50
 800ec16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ec18:	4413      	add	r3, r2
 800ec1a:	2230      	movs	r2, #48	@ 0x30
 800ec1c:	701a      	strb	r2, [r3, #0]
      while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800ec1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec20:	2b1f      	cmp	r3, #31
 800ec22:	d804      	bhi.n	800ec2e <sprint_broken_up_decimal+0x10e>
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	1e5a      	subs	r2, r3, #1
 800ec28:	60fa      	str	r2, [r7, #12]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d1f0      	bne.n	800ec10 <sprint_broken_up_decimal+0xf0>
      }
      if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800ec2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec30:	2b1f      	cmp	r3, #31
 800ec32:	d838      	bhi.n	800eca6 <sprint_broken_up_decimal+0x186>
        buf[len++] = '.';
 800ec34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec36:	1c5a      	adds	r2, r3, #1
 800ec38:	653a      	str	r2, [r7, #80]	@ 0x50
 800ec3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ec3c:	4413      	add	r3, r2
 800ec3e:	222e      	movs	r2, #46	@ 0x2e
 800ec40:	701a      	strb	r2, [r3, #0]
 800ec42:	e030      	b.n	800eca6 <sprint_broken_up_decimal+0x186>
      }
    }
  }
  else {
    if (flags & FLAGS_HASH) {
 800ec44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ec46:	f003 0310 	and.w	r3, r3, #16
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d02b      	beq.n	800eca6 <sprint_broken_up_decimal+0x186>
      if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800ec4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec50:	2b1f      	cmp	r3, #31
 800ec52:	d828      	bhi.n	800eca6 <sprint_broken_up_decimal+0x186>
        buf[len++] = '.';
 800ec54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec56:	1c5a      	adds	r2, r3, #1
 800ec58:	653a      	str	r2, [r7, #80]	@ 0x50
 800ec5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ec5c:	4413      	add	r3, r2
 800ec5e:	222e      	movs	r2, #46	@ 0x2e
 800ec60:	701a      	strb	r2, [r3, #0]
    }
  }

  // Write the integer part of the number (it comes after the fractional
  // since the character order is reversed)
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800ec62:	e020      	b.n	800eca6 <sprint_broken_up_decimal+0x186>
    buf[len++] = (char)('0' + (number_.integral % 10));
 800ec64:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ec68:	f04f 020a 	mov.w	r2, #10
 800ec6c:	f04f 0300 	mov.w	r3, #0
 800ec70:	f7f1 fd62 	bl	8000738 <__aeabi_ldivmod>
 800ec74:	b2d2      	uxtb	r2, r2
 800ec76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec78:	1c59      	adds	r1, r3, #1
 800ec7a:	6539      	str	r1, [r7, #80]	@ 0x50
 800ec7c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800ec7e:	440b      	add	r3, r1
 800ec80:	3230      	adds	r2, #48	@ 0x30
 800ec82:	b2d2      	uxtb	r2, r2
 800ec84:	701a      	strb	r2, [r3, #0]
    if (!(number_.integral /= 10)) {
 800ec86:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ec8a:	f04f 020a 	mov.w	r2, #10
 800ec8e:	f04f 0300 	mov.w	r3, #0
 800ec92:	f7f1 fd51 	bl	8000738 <__aeabi_ldivmod>
 800ec96:	4602      	mov	r2, r0
 800ec98:	460b      	mov	r3, r1
 800ec9a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800ec9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800eca2:	4313      	orrs	r3, r2
 800eca4:	d003      	beq.n	800ecae <sprint_broken_up_decimal+0x18e>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800eca6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eca8:	2b1f      	cmp	r3, #31
 800ecaa:	d9db      	bls.n	800ec64 <sprint_broken_up_decimal+0x144>
 800ecac:	e000      	b.n	800ecb0 <sprint_broken_up_decimal+0x190>
      break;
 800ecae:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800ecb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ecb2:	f003 0302 	and.w	r3, r3, #2
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d122      	bne.n	800ed00 <sprint_broken_up_decimal+0x1e0>
 800ecba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ecbc:	f003 0301 	and.w	r3, r3, #1
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d01d      	beq.n	800ed00 <sprint_broken_up_decimal+0x1e0>
    if (width && (number_.is_negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800ecc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d013      	beq.n	800ecf2 <sprint_broken_up_decimal+0x1d2>
 800ecca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d104      	bne.n	800ecdc <sprint_broken_up_decimal+0x1bc>
 800ecd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ecd4:	f003 030c 	and.w	r3, r3, #12
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d00a      	beq.n	800ecf2 <sprint_broken_up_decimal+0x1d2>
      width--;
 800ecdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecde:	3b01      	subs	r3, #1
 800ece0:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800ece2:	e006      	b.n	800ecf2 <sprint_broken_up_decimal+0x1d2>
      buf[len++] = '0';
 800ece4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ece6:	1c5a      	adds	r2, r3, #1
 800ece8:	653a      	str	r2, [r7, #80]	@ 0x50
 800ecea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ecec:	4413      	add	r3, r2
 800ecee:	2230      	movs	r2, #48	@ 0x30
 800ecf0:	701a      	strb	r2, [r3, #0]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800ecf2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ecf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecf6:	429a      	cmp	r2, r3
 800ecf8:	d202      	bcs.n	800ed00 <sprint_broken_up_decimal+0x1e0>
 800ecfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ecfc:	2b1f      	cmp	r3, #31
 800ecfe:	d9f1      	bls.n	800ece4 <sprint_broken_up_decimal+0x1c4>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800ed00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ed02:	2b1f      	cmp	r3, #31
 800ed04:	d824      	bhi.n	800ed50 <sprint_broken_up_decimal+0x230>
    if (number_.is_negative) {
 800ed06:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d007      	beq.n	800ed1e <sprint_broken_up_decimal+0x1fe>
      buf[len++] = '-';
 800ed0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ed10:	1c5a      	adds	r2, r3, #1
 800ed12:	653a      	str	r2, [r7, #80]	@ 0x50
 800ed14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ed16:	4413      	add	r3, r2
 800ed18:	222d      	movs	r2, #45	@ 0x2d
 800ed1a:	701a      	strb	r2, [r3, #0]
 800ed1c:	e018      	b.n	800ed50 <sprint_broken_up_decimal+0x230>
    }
    else if (flags & FLAGS_PLUS) {
 800ed1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ed20:	f003 0304 	and.w	r3, r3, #4
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d007      	beq.n	800ed38 <sprint_broken_up_decimal+0x218>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800ed28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ed2a:	1c5a      	adds	r2, r3, #1
 800ed2c:	653a      	str	r2, [r7, #80]	@ 0x50
 800ed2e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ed30:	4413      	add	r3, r2
 800ed32:	222b      	movs	r2, #43	@ 0x2b
 800ed34:	701a      	strb	r2, [r3, #0]
 800ed36:	e00b      	b.n	800ed50 <sprint_broken_up_decimal+0x230>
    }
    else if (flags & FLAGS_SPACE) {
 800ed38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ed3a:	f003 0308 	and.w	r3, r3, #8
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d006      	beq.n	800ed50 <sprint_broken_up_decimal+0x230>
      buf[len++] = ' ';
 800ed42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ed44:	1c5a      	adds	r2, r3, #1
 800ed46:	653a      	str	r2, [r7, #80]	@ 0x50
 800ed48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ed4a:	4413      	add	r3, r2
 800ed4c:	2220      	movs	r2, #32
 800ed4e:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800ed50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ed52:	9303      	str	r3, [sp, #12]
 800ed54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed56:	9302      	str	r3, [sp, #8]
 800ed58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ed5a:	9301      	str	r3, [sp, #4]
 800ed5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed5e:	9300      	str	r3, [sp, #0]
 800ed60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ed64:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ed66:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ed68:	f7ff fc1f 	bl	800e5aa <_out_rev>
 800ed6c:	4603      	mov	r3, r0
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	3710      	adds	r7, #16
 800ed72:	46bd      	mov	sp, r7
 800ed74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ed78:	b004      	add	sp, #16
 800ed7a:	4770      	bx	lr

0800ed7c <sprint_decimal_number>:

      // internal ftoa for fixed decimal floating point
static size_t sprint_decimal_number(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double number, unsigned int precision, unsigned int width, unsigned int flags, char* buf, size_t len)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b098      	sub	sp, #96	@ 0x60
 800ed80:	af0c      	add	r7, sp, #48	@ 0x30
 800ed82:	6178      	str	r0, [r7, #20]
 800ed84:	6139      	str	r1, [r7, #16]
 800ed86:	60fa      	str	r2, [r7, #12]
 800ed88:	60bb      	str	r3, [r7, #8]
 800ed8a:	ed87 0b00 	vstr	d0, [r7]
  struct double_components value_ = get_components(number, precision);
 800ed8e:	f107 0318 	add.w	r3, r7, #24
 800ed92:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ed94:	ed97 0b00 	vldr	d0, [r7]
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f7ff fdc5 	bl	800e928 <get_components>
  return sprint_broken_up_decimal(value_, out, buffer, idx, maxlen, precision, width, flags, buf, len);
 800ed9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eda0:	930a      	str	r3, [sp, #40]	@ 0x28
 800eda2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eda4:	9309      	str	r3, [sp, #36]	@ 0x24
 800eda6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eda8:	9308      	str	r3, [sp, #32]
 800edaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800edac:	9307      	str	r3, [sp, #28]
 800edae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edb0:	9306      	str	r3, [sp, #24]
 800edb2:	68bb      	ldr	r3, [r7, #8]
 800edb4:	9305      	str	r3, [sp, #20]
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	9304      	str	r3, [sp, #16]
 800edba:	693b      	ldr	r3, [r7, #16]
 800edbc:	9303      	str	r3, [sp, #12]
 800edbe:	697b      	ldr	r3, [r7, #20]
 800edc0:	9302      	str	r3, [sp, #8]
 800edc2:	466a      	mov	r2, sp
 800edc4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800edc8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800edcc:	e882 0003 	stmia.w	r2, {r0, r1}
 800edd0:	f107 0318 	add.w	r3, r7, #24
 800edd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800edd6:	f7ff fea3 	bl	800eb20 <sprint_broken_up_decimal>
 800edda:	4603      	mov	r3, r0
}
 800eddc:	4618      	mov	r0, r3
 800edde:	3730      	adds	r7, #48	@ 0x30
 800ede0:	46bd      	mov	sp, r7
 800ede2:	bd80      	pop	{r7, pc}
 800ede4:	0000      	movs	r0, r0
	...

0800ede8 <sprint_floating_point>:
}
#endif  // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS


static size_t sprint_floating_point(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int precision, unsigned int width, unsigned int flags, bool prefer_exponential)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b096      	sub	sp, #88	@ 0x58
 800edec:	af06      	add	r7, sp, #24
 800edee:	6178      	str	r0, [r7, #20]
 800edf0:	6139      	str	r1, [r7, #16]
 800edf2:	60fa      	str	r2, [r7, #12]
 800edf4:	60bb      	str	r3, [r7, #8]
 800edf6:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800edfa:	2300      	movs	r3, #0
 800edfc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // test for special values
  if (value != value)
 800edfe:	ed97 6b00 	vldr	d6, [r7]
 800ee02:	ed97 7b00 	vldr	d7, [r7]
 800ee06:	eeb4 6b47 	vcmp.f64	d6, d7
 800ee0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee0e:	d00f      	beq.n	800ee30 <sprint_floating_point+0x48>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800ee10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee12:	9303      	str	r3, [sp, #12]
 800ee14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ee16:	9302      	str	r3, [sp, #8]
 800ee18:	2303      	movs	r3, #3
 800ee1a:	9301      	str	r3, [sp, #4]
 800ee1c:	4b52      	ldr	r3, [pc, #328]	@ (800ef68 <sprint_floating_point+0x180>)
 800ee1e:	9300      	str	r3, [sp, #0]
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	68fa      	ldr	r2, [r7, #12]
 800ee24:	6939      	ldr	r1, [r7, #16]
 800ee26:	6978      	ldr	r0, [r7, #20]
 800ee28:	f7ff fbbf 	bl	800e5aa <_out_rev>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	e087      	b.n	800ef40 <sprint_floating_point+0x158>
  if (value < -DBL_MAX)
 800ee30:	ed97 7b00 	vldr	d7, [r7]
 800ee34:	ed9f 6b44 	vldr	d6, [pc, #272]	@ 800ef48 <sprint_floating_point+0x160>
 800ee38:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ee3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee40:	d50f      	bpl.n	800ee62 <sprint_floating_point+0x7a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800ee42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee44:	9303      	str	r3, [sp, #12]
 800ee46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ee48:	9302      	str	r3, [sp, #8]
 800ee4a:	2304      	movs	r3, #4
 800ee4c:	9301      	str	r3, [sp, #4]
 800ee4e:	4b47      	ldr	r3, [pc, #284]	@ (800ef6c <sprint_floating_point+0x184>)
 800ee50:	9300      	str	r3, [sp, #0]
 800ee52:	68bb      	ldr	r3, [r7, #8]
 800ee54:	68fa      	ldr	r2, [r7, #12]
 800ee56:	6939      	ldr	r1, [r7, #16]
 800ee58:	6978      	ldr	r0, [r7, #20]
 800ee5a:	f7ff fba6 	bl	800e5aa <_out_rev>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	e06e      	b.n	800ef40 <sprint_floating_point+0x158>
  if (value > DBL_MAX)
 800ee62:	ed97 7b00 	vldr	d7, [r7]
 800ee66:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 800ef50 <sprint_floating_point+0x168>
 800ee6a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ee6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee72:	dd1d      	ble.n	800eeb0 <sprint_floating_point+0xc8>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800ee74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee76:	f003 0304 	and.w	r3, r3, #4
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d001      	beq.n	800ee82 <sprint_floating_point+0x9a>
 800ee7e:	4b3c      	ldr	r3, [pc, #240]	@ (800ef70 <sprint_floating_point+0x188>)
 800ee80:	e000      	b.n	800ee84 <sprint_floating_point+0x9c>
 800ee82:	4b3c      	ldr	r3, [pc, #240]	@ (800ef74 <sprint_floating_point+0x18c>)
 800ee84:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ee86:	f002 0204 	and.w	r2, r2, #4
 800ee8a:	2a00      	cmp	r2, #0
 800ee8c:	d001      	beq.n	800ee92 <sprint_floating_point+0xaa>
 800ee8e:	2204      	movs	r2, #4
 800ee90:	e000      	b.n	800ee94 <sprint_floating_point+0xac>
 800ee92:	2203      	movs	r2, #3
 800ee94:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ee96:	9103      	str	r1, [sp, #12]
 800ee98:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800ee9a:	9102      	str	r1, [sp, #8]
 800ee9c:	9201      	str	r2, [sp, #4]
 800ee9e:	9300      	str	r3, [sp, #0]
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	68fa      	ldr	r2, [r7, #12]
 800eea4:	6939      	ldr	r1, [r7, #16]
 800eea6:	6978      	ldr	r0, [r7, #20]
 800eea8:	f7ff fb7f 	bl	800e5aa <_out_rev>
 800eeac:	4603      	mov	r3, r0
 800eeae:	e047      	b.n	800ef40 <sprint_floating_point+0x158>

  if (!prefer_exponential && ((value > PRINTF_FLOAT_NOTATION_THRESHOLD) || (value < -PRINTF_FLOAT_NOTATION_THRESHOLD))) {
 800eeb0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800eeb4:	f083 0301 	eor.w	r3, r3, #1
 800eeb8:	b2db      	uxtb	r3, r3
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d013      	beq.n	800eee6 <sprint_floating_point+0xfe>
 800eebe:	ed97 7b00 	vldr	d7, [r7]
 800eec2:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 800ef58 <sprint_floating_point+0x170>
 800eec6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800eeca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eece:	dc08      	bgt.n	800eee2 <sprint_floating_point+0xfa>
 800eed0:	ed97 7b00 	vldr	d7, [r7]
 800eed4:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 800ef60 <sprint_floating_point+0x178>
 800eed8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800eedc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eee0:	d501      	bpl.n	800eee6 <sprint_floating_point+0xfe>
    // printing hundreds of characters, overflowing any fixed internal buffer and necessitating a more complicated
    // implementation.
#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
    return sprint_exponential_number(out, buffer, idx, maxlen, value, precision, width, flags, buf, len);
#else
    return 0U;
 800eee2:	2300      	movs	r3, #0
 800eee4:	e02c      	b.n	800ef40 <sprint_floating_point+0x158>
#endif
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800eee6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eee8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d10d      	bne.n	800ef0c <sprint_floating_point+0x124>
    precision = PRINTF_DEFAULT_FLOAT_PRECISION;
 800eef0:	2306      	movs	r3, #6
 800eef2:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

  // limit precision so that our integer holding the fractional part does not overflow
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (precision > PRINTF_MAX_SUPPORTED_PRECISION)) {
 800eef4:	e00a      	b.n	800ef0c <sprint_floating_point+0x124>
    buf[len++] = '0'; // This respects the precision in terms of result length only
 800eef6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eef8:	1c5a      	adds	r2, r3, #1
 800eefa:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800eefc:	3340      	adds	r3, #64	@ 0x40
 800eefe:	443b      	add	r3, r7
 800ef00:	2230      	movs	r2, #48	@ 0x30
 800ef02:	f803 2c24 	strb.w	r2, [r3, #-36]
    precision--;
 800ef06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ef08:	3b01      	subs	r3, #1
 800ef0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (precision > PRINTF_MAX_SUPPORTED_PRECISION)) {
 800ef0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef0e:	2b1f      	cmp	r3, #31
 800ef10:	d802      	bhi.n	800ef18 <sprint_floating_point+0x130>
 800ef12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ef14:	2b11      	cmp	r3, #17
 800ef16:	d8ee      	bhi.n	800eef6 <sprint_floating_point+0x10e>
  return
#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
    prefer_exponential ?
      sprint_exponential_number(out, buffer, idx, maxlen, value, precision, width, flags, buf, len) :
#endif
      sprint_decimal_number(out, buffer, idx, maxlen, value, precision, width, flags, buf, len);
 800ef18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef1a:	9304      	str	r3, [sp, #16]
 800ef1c:	f107 031c 	add.w	r3, r7, #28
 800ef20:	9303      	str	r3, [sp, #12]
 800ef22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef24:	9302      	str	r3, [sp, #8]
 800ef26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ef28:	9301      	str	r3, [sp, #4]
 800ef2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ef2c:	9300      	str	r3, [sp, #0]
 800ef2e:	ed97 0b00 	vldr	d0, [r7]
 800ef32:	68bb      	ldr	r3, [r7, #8]
 800ef34:	68fa      	ldr	r2, [r7, #12]
 800ef36:	6939      	ldr	r1, [r7, #16]
 800ef38:	6978      	ldr	r0, [r7, #20]
 800ef3a:	f7ff ff1f 	bl	800ed7c <sprint_decimal_number>
 800ef3e:	4603      	mov	r3, r0
}
 800ef40:	4618      	mov	r0, r3
 800ef42:	3740      	adds	r7, #64	@ 0x40
 800ef44:	46bd      	mov	sp, r7
 800ef46:	bd80      	pop	{r7, pc}
 800ef48:	ffffffff 	.word	0xffffffff
 800ef4c:	ffefffff 	.word	0xffefffff
 800ef50:	ffffffff 	.word	0xffffffff
 800ef54:	7fefffff 	.word	0x7fefffff
 800ef58:	00000000 	.word	0x00000000
 800ef5c:	41cdcd65 	.word	0x41cdcd65
 800ef60:	00000000 	.word	0x00000000
 800ef64:	c1cdcd65 	.word	0xc1cdcd65
 800ef68:	08027b18 	.word	0x08027b18
 800ef6c:	08027b1c 	.word	0x08027b1c
 800ef70:	08027b24 	.word	0x08027b24
 800ef74:	08027b2c 	.word	0x08027b2c

0800ef78 <_vsnprintf>:

#endif  // (PRINTF_SUPPORT_DECIMAL_SPECIFIERS || PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS)

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 800ef78:	b590      	push	{r4, r7, lr}
 800ef7a:	b09b      	sub	sp, #108	@ 0x6c
 800ef7c:	af06      	add	r7, sp, #24
 800ef7e:	60f8      	str	r0, [r7, #12]
 800ef80:	60b9      	str	r1, [r7, #8]
 800ef82:	607a      	str	r2, [r7, #4]
 800ef84:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 800ef86:	2300      	movs	r3, #0
 800ef88:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!buffer) {
 800ef8a:	68bb      	ldr	r3, [r7, #8]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	f040 83e4 	bne.w	800f75a <_vsnprintf+0x7e2>
    // use null output function
    out = _out_null;
 800ef92:	4b9f      	ldr	r3, [pc, #636]	@ (800f210 <_vsnprintf+0x298>)
 800ef94:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 800ef96:	e3e0      	b.n	800f75a <_vsnprintf+0x7e2>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	781b      	ldrb	r3, [r3, #0]
 800ef9c:	2b25      	cmp	r3, #37	@ 0x25
 800ef9e:	d00c      	beq.n	800efba <_vsnprintf+0x42>
      // no
      out(*format, buffer, idx++, maxlen);
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	7818      	ldrb	r0, [r3, #0]
 800efa4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800efa6:	1c53      	adds	r3, r2, #1
 800efa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800efaa:	68fc      	ldr	r4, [r7, #12]
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	68b9      	ldr	r1, [r7, #8]
 800efb0:	47a0      	blx	r4
      format++;
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	3301      	adds	r3, #1
 800efb6:	603b      	str	r3, [r7, #0]
      continue;
 800efb8:	e3cf      	b.n	800f75a <_vsnprintf+0x7e2>
    }
    else {
      // yes, evaluate it
      format++;
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	3301      	adds	r3, #1
 800efbe:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 800efc0:	2300      	movs	r3, #0
 800efc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    do {
      switch (*format) {
 800efc4:	683b      	ldr	r3, [r7, #0]
 800efc6:	781b      	ldrb	r3, [r3, #0]
 800efc8:	3b20      	subs	r3, #32
 800efca:	2b10      	cmp	r3, #16
 800efcc:	d856      	bhi.n	800f07c <_vsnprintf+0x104>
 800efce:	a201      	add	r2, pc, #4	@ (adr r2, 800efd4 <_vsnprintf+0x5c>)
 800efd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efd4:	0800f055 	.word	0x0800f055
 800efd8:	0800f07d 	.word	0x0800f07d
 800efdc:	0800f07d 	.word	0x0800f07d
 800efe0:	0800f069 	.word	0x0800f069
 800efe4:	0800f07d 	.word	0x0800f07d
 800efe8:	0800f07d 	.word	0x0800f07d
 800efec:	0800f07d 	.word	0x0800f07d
 800eff0:	0800f07d 	.word	0x0800f07d
 800eff4:	0800f07d 	.word	0x0800f07d
 800eff8:	0800f07d 	.word	0x0800f07d
 800effc:	0800f07d 	.word	0x0800f07d
 800f000:	0800f041 	.word	0x0800f041
 800f004:	0800f07d 	.word	0x0800f07d
 800f008:	0800f02d 	.word	0x0800f02d
 800f00c:	0800f07d 	.word	0x0800f07d
 800f010:	0800f07d 	.word	0x0800f07d
 800f014:	0800f019 	.word	0x0800f019
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800f018:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f01a:	f043 0301 	orr.w	r3, r3, #1
 800f01e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f020:	683b      	ldr	r3, [r7, #0]
 800f022:	3301      	adds	r3, #1
 800f024:	603b      	str	r3, [r7, #0]
 800f026:	2301      	movs	r3, #1
 800f028:	643b      	str	r3, [r7, #64]	@ 0x40
 800f02a:	e02a      	b.n	800f082 <_vsnprintf+0x10a>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800f02c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f02e:	f043 0302 	orr.w	r3, r3, #2
 800f032:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	3301      	adds	r3, #1
 800f038:	603b      	str	r3, [r7, #0]
 800f03a:	2301      	movs	r3, #1
 800f03c:	643b      	str	r3, [r7, #64]	@ 0x40
 800f03e:	e020      	b.n	800f082 <_vsnprintf+0x10a>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800f040:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f042:	f043 0304 	orr.w	r3, r3, #4
 800f046:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	3301      	adds	r3, #1
 800f04c:	603b      	str	r3, [r7, #0]
 800f04e:	2301      	movs	r3, #1
 800f050:	643b      	str	r3, [r7, #64]	@ 0x40
 800f052:	e016      	b.n	800f082 <_vsnprintf+0x10a>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800f054:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f056:	f043 0308 	orr.w	r3, r3, #8
 800f05a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	3301      	adds	r3, #1
 800f060:	603b      	str	r3, [r7, #0]
 800f062:	2301      	movs	r3, #1
 800f064:	643b      	str	r3, [r7, #64]	@ 0x40
 800f066:	e00c      	b.n	800f082 <_vsnprintf+0x10a>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800f068:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f06a:	f043 0310 	orr.w	r3, r3, #16
 800f06e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	3301      	adds	r3, #1
 800f074:	603b      	str	r3, [r7, #0]
 800f076:	2301      	movs	r3, #1
 800f078:	643b      	str	r3, [r7, #64]	@ 0x40
 800f07a:	e002      	b.n	800f082 <_vsnprintf+0x10a>
        default :                                   n = 0U; break;
 800f07c:	2300      	movs	r3, #0
 800f07e:	643b      	str	r3, [r7, #64]	@ 0x40
 800f080:	bf00      	nop
      }
    } while (n);
 800f082:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f084:	2b00      	cmp	r3, #0
 800f086:	d19d      	bne.n	800efc4 <_vsnprintf+0x4c>

    // evaluate width field
    width = 0U;
 800f088:	2300      	movs	r3, #0
 800f08a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (_is_digit(*format)) {
 800f08c:	683b      	ldr	r3, [r7, #0]
 800f08e:	781b      	ldrb	r3, [r3, #0]
 800f090:	4618      	mov	r0, r3
 800f092:	f7ff fa4f 	bl	800e534 <_is_digit>
 800f096:	4603      	mov	r3, r0
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d005      	beq.n	800f0a8 <_vsnprintf+0x130>
      width = _atoi(&format);
 800f09c:	463b      	mov	r3, r7
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f7ff fa5f 	bl	800e562 <_atoi>
 800f0a4:	64b8      	str	r0, [r7, #72]	@ 0x48
 800f0a6:	e018      	b.n	800f0da <_vsnprintf+0x162>
    }
    else if (*format == '*') {
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	2b2a      	cmp	r3, #42	@ 0x2a
 800f0ae:	d114      	bne.n	800f0da <_vsnprintf+0x162>
      const int w = va_arg(va, int);
 800f0b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f0b2:	1d1a      	adds	r2, r3, #4
 800f0b4:	663a      	str	r2, [r7, #96]	@ 0x60
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      if (w < 0) {
 800f0ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	da07      	bge.n	800f0d0 <_vsnprintf+0x158>
        flags |= FLAGS_LEFT;    // reverse padding
 800f0c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f0c2:	f043 0302 	orr.w	r3, r3, #2
 800f0c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
        width = (unsigned int)-w;
 800f0c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0ca:	425b      	negs	r3, r3
 800f0cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f0ce:	e001      	b.n	800f0d4 <_vsnprintf+0x15c>
      }
      else {
        width = (unsigned int)w;
 800f0d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      }
      format++;
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	3301      	adds	r3, #1
 800f0d8:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	647b      	str	r3, [r7, #68]	@ 0x44
    if (*format == '.') {
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	781b      	ldrb	r3, [r3, #0]
 800f0e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800f0e4:	d124      	bne.n	800f130 <_vsnprintf+0x1b8>
      flags |= FLAGS_PRECISION;
 800f0e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f0e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800f0ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
      format++;
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	3301      	adds	r3, #1
 800f0f2:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	781b      	ldrb	r3, [r3, #0]
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	f7ff fa1b 	bl	800e534 <_is_digit>
 800f0fe:	4603      	mov	r3, r0
 800f100:	2b00      	cmp	r3, #0
 800f102:	d005      	beq.n	800f110 <_vsnprintf+0x198>
        precision = _atoi(&format);
 800f104:	463b      	mov	r3, r7
 800f106:	4618      	mov	r0, r3
 800f108:	f7ff fa2b 	bl	800e562 <_atoi>
 800f10c:	6478      	str	r0, [r7, #68]	@ 0x44
 800f10e:	e00f      	b.n	800f130 <_vsnprintf+0x1b8>
      }
      else if (*format == '*') {
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	781b      	ldrb	r3, [r3, #0]
 800f114:	2b2a      	cmp	r3, #42	@ 0x2a
 800f116:	d10b      	bne.n	800f130 <_vsnprintf+0x1b8>
        const int precision_ = (int)va_arg(va, int);
 800f118:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f11a:	1d1a      	adds	r2, r3, #4
 800f11c:	663a      	str	r2, [r7, #96]	@ 0x60
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	627b      	str	r3, [r7, #36]	@ 0x24
        precision = precision_ > 0 ? (unsigned int)precision_ : 0U;
 800f122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f124:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f128:	647b      	str	r3, [r7, #68]	@ 0x44
        format++;
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	3301      	adds	r3, #1
 800f12e:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 800f130:	683b      	ldr	r3, [r7, #0]
 800f132:	781b      	ldrb	r3, [r3, #0]
 800f134:	3b68      	subs	r3, #104	@ 0x68
 800f136:	2b12      	cmp	r3, #18
 800f138:	d866      	bhi.n	800f208 <_vsnprintf+0x290>
 800f13a:	a201      	add	r2, pc, #4	@ (adr r2, 800f140 <_vsnprintf+0x1c8>)
 800f13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f140:	0800f1b3 	.word	0x0800f1b3
 800f144:	0800f209 	.word	0x0800f209
 800f148:	0800f1e9 	.word	0x0800f1e9
 800f14c:	0800f209 	.word	0x0800f209
 800f150:	0800f18d 	.word	0x0800f18d
 800f154:	0800f209 	.word	0x0800f209
 800f158:	0800f209 	.word	0x0800f209
 800f15c:	0800f209 	.word	0x0800f209
 800f160:	0800f209 	.word	0x0800f209
 800f164:	0800f209 	.word	0x0800f209
 800f168:	0800f209 	.word	0x0800f209
 800f16c:	0800f209 	.word	0x0800f209
 800f170:	0800f1d9 	.word	0x0800f1d9
 800f174:	0800f209 	.word	0x0800f209
 800f178:	0800f209 	.word	0x0800f209
 800f17c:	0800f209 	.word	0x0800f209
 800f180:	0800f209 	.word	0x0800f209
 800f184:	0800f209 	.word	0x0800f209
 800f188:	0800f1f9 	.word	0x0800f1f9
      case 'l' :
        flags |= FLAGS_LONG;
 800f18c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f18e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f192:	64fb      	str	r3, [r7, #76]	@ 0x4c
        format++;
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	3301      	adds	r3, #1
 800f198:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	781b      	ldrb	r3, [r3, #0]
 800f19e:	2b6c      	cmp	r3, #108	@ 0x6c
 800f1a0:	d134      	bne.n	800f20c <_vsnprintf+0x294>
          flags |= FLAGS_LONG_LONG;
 800f1a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f1a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800f1a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
          format++;
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	3301      	adds	r3, #1
 800f1ae:	603b      	str	r3, [r7, #0]
        }
        break;
 800f1b0:	e02c      	b.n	800f20c <_vsnprintf+0x294>
      case 'h' :
        flags |= FLAGS_SHORT;
 800f1b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f1b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f1b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
        format++;
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	3301      	adds	r3, #1
 800f1be:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	781b      	ldrb	r3, [r3, #0]
 800f1c4:	2b68      	cmp	r3, #104	@ 0x68
 800f1c6:	d125      	bne.n	800f214 <_vsnprintf+0x29c>
          flags |= FLAGS_CHAR;
 800f1c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f1ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f1ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
          format++;
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	3301      	adds	r3, #1
 800f1d4:	603b      	str	r3, [r7, #0]
        }
        break;
 800f1d6:	e01d      	b.n	800f214 <_vsnprintf+0x29c>
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800f1d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f1da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f1de:	64fb      	str	r3, [r7, #76]	@ 0x4c
        format++;
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	3301      	adds	r3, #1
 800f1e4:	603b      	str	r3, [r7, #0]
        break;
 800f1e6:	e016      	b.n	800f216 <_vsnprintf+0x29e>
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800f1e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f1ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800f1ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
        format++;
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	3301      	adds	r3, #1
 800f1f4:	603b      	str	r3, [r7, #0]
        break;
 800f1f6:	e00e      	b.n	800f216 <_vsnprintf+0x29e>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800f1f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f1fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f1fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
        format++;
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	3301      	adds	r3, #1
 800f204:	603b      	str	r3, [r7, #0]
        break;
 800f206:	e006      	b.n	800f216 <_vsnprintf+0x29e>
      default:
        break;
 800f208:	bf00      	nop
 800f20a:	e004      	b.n	800f216 <_vsnprintf+0x29e>
        break;
 800f20c:	bf00      	nop
 800f20e:	e002      	b.n	800f216 <_vsnprintf+0x29e>
 800f210:	0800e4df 	.word	0x0800e4df
        break;
 800f214:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800f216:	683b      	ldr	r3, [r7, #0]
 800f218:	781b      	ldrb	r3, [r3, #0]
 800f21a:	2b78      	cmp	r3, #120	@ 0x78
 800f21c:	f300 8290 	bgt.w	800f740 <_vsnprintf+0x7c8>
 800f220:	2b69      	cmp	r3, #105	@ 0x69
 800f222:	da0b      	bge.n	800f23c <_vsnprintf+0x2c4>
 800f224:	2b25      	cmp	r3, #37	@ 0x25
 800f226:	f000 827f 	beq.w	800f728 <_vsnprintf+0x7b0>
 800f22a:	2b25      	cmp	r3, #37	@ 0x25
 800f22c:	f2c0 8288 	blt.w	800f740 <_vsnprintf+0x7c8>
 800f230:	2b66      	cmp	r3, #102	@ 0x66
 800f232:	f300 8285 	bgt.w	800f740 <_vsnprintf+0x7c8>
 800f236:	2b46      	cmp	r3, #70	@ 0x46
 800f238:	da23      	bge.n	800f282 <_vsnprintf+0x30a>
 800f23a:	e281      	b.n	800f740 <_vsnprintf+0x7c8>
 800f23c:	3b69      	subs	r3, #105	@ 0x69
 800f23e:	2201      	movs	r2, #1
 800f240:	fa02 f303 	lsl.w	r3, r2, r3
 800f244:	f249 0241 	movw	r2, #36929	@ 0x9041
 800f248:	401a      	ands	r2, r3
 800f24a:	2a00      	cmp	r2, #0
 800f24c:	bf14      	ite	ne
 800f24e:	2201      	movne	r2, #1
 800f250:	2200      	moveq	r2, #0
 800f252:	b2d2      	uxtb	r2, r2
 800f254:	2a00      	cmp	r2, #0
 800f256:	d15d      	bne.n	800f314 <_vsnprintf+0x39c>
 800f258:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 800f25c:	2a00      	cmp	r2, #0
 800f25e:	bf14      	ite	ne
 800f260:	2201      	movne	r2, #1
 800f262:	2200      	moveq	r2, #0
 800f264:	b2d2      	uxtb	r2, r2
 800f266:	2a00      	cmp	r2, #0
 800f268:	f040 8227 	bne.w	800f6ba <_vsnprintf+0x742>
 800f26c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f270:	2b00      	cmp	r3, #0
 800f272:	bf14      	ite	ne
 800f274:	2301      	movne	r3, #1
 800f276:	2300      	moveq	r3, #0
 800f278:	b2db      	uxtb	r3, r3
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	f040 81a8 	bne.w	800f5d0 <_vsnprintf+0x658>
 800f280:	e25e      	b.n	800f740 <_vsnprintf+0x7c8>
 800f282:	3b46      	subs	r3, #70	@ 0x46
 800f284:	2b20      	cmp	r3, #32
 800f286:	f200 825b 	bhi.w	800f740 <_vsnprintf+0x7c8>
 800f28a:	a201      	add	r2, pc, #4	@ (adr r2, 800f290 <_vsnprintf+0x318>)
 800f28c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f290:	0800f511 	.word	0x0800f511
 800f294:	0800f741 	.word	0x0800f741
 800f298:	0800f741 	.word	0x0800f741
 800f29c:	0800f741 	.word	0x0800f741
 800f2a0:	0800f741 	.word	0x0800f741
 800f2a4:	0800f741 	.word	0x0800f741
 800f2a8:	0800f741 	.word	0x0800f741
 800f2ac:	0800f741 	.word	0x0800f741
 800f2b0:	0800f741 	.word	0x0800f741
 800f2b4:	0800f741 	.word	0x0800f741
 800f2b8:	0800f741 	.word	0x0800f741
 800f2bc:	0800f741 	.word	0x0800f741
 800f2c0:	0800f741 	.word	0x0800f741
 800f2c4:	0800f741 	.word	0x0800f741
 800f2c8:	0800f741 	.word	0x0800f741
 800f2cc:	0800f741 	.word	0x0800f741
 800f2d0:	0800f741 	.word	0x0800f741
 800f2d4:	0800f741 	.word	0x0800f741
 800f2d8:	0800f315 	.word	0x0800f315
 800f2dc:	0800f741 	.word	0x0800f741
 800f2e0:	0800f741 	.word	0x0800f741
 800f2e4:	0800f741 	.word	0x0800f741
 800f2e8:	0800f741 	.word	0x0800f741
 800f2ec:	0800f741 	.word	0x0800f741
 800f2f0:	0800f741 	.word	0x0800f741
 800f2f4:	0800f741 	.word	0x0800f741
 800f2f8:	0800f741 	.word	0x0800f741
 800f2fc:	0800f741 	.word	0x0800f741
 800f300:	0800f315 	.word	0x0800f315
 800f304:	0800f55d 	.word	0x0800f55d
 800f308:	0800f315 	.word	0x0800f315
 800f30c:	0800f741 	.word	0x0800f741
 800f310:	0800f511 	.word	0x0800f511
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        numeric_base_t base;
        if (*format == 'x' || *format == 'X') {
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	781b      	ldrb	r3, [r3, #0]
 800f318:	2b78      	cmp	r3, #120	@ 0x78
 800f31a:	d003      	beq.n	800f324 <_vsnprintf+0x3ac>
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	781b      	ldrb	r3, [r3, #0]
 800f320:	2b58      	cmp	r3, #88	@ 0x58
 800f322:	d103      	bne.n	800f32c <_vsnprintf+0x3b4>
          base = BASE_HEX;
 800f324:	2310      	movs	r3, #16
 800f326:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800f32a:	e016      	b.n	800f35a <_vsnprintf+0x3e2>
        }
        else if (*format == 'o') {
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	781b      	ldrb	r3, [r3, #0]
 800f330:	2b6f      	cmp	r3, #111	@ 0x6f
 800f332:	d103      	bne.n	800f33c <_vsnprintf+0x3c4>
          base =  BASE_OCTAL;
 800f334:	2308      	movs	r3, #8
 800f336:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800f33a:	e00e      	b.n	800f35a <_vsnprintf+0x3e2>
        }
        else if (*format == 'b') {
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	781b      	ldrb	r3, [r3, #0]
 800f340:	2b62      	cmp	r3, #98	@ 0x62
 800f342:	d103      	bne.n	800f34c <_vsnprintf+0x3d4>
          base =  BASE_BINARY;
 800f344:	2302      	movs	r3, #2
 800f346:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800f34a:	e006      	b.n	800f35a <_vsnprintf+0x3e2>
        }
        else {
          base = BASE_DECIMAL;
 800f34c:	230a      	movs	r3, #10
 800f34e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800f352:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f354:	f023 0310 	bic.w	r3, r3, #16
 800f358:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }
        // uppercase
        if (*format == 'X') {
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	781b      	ldrb	r3, [r3, #0]
 800f35e:	2b58      	cmp	r3, #88	@ 0x58
 800f360:	d103      	bne.n	800f36a <_vsnprintf+0x3f2>
          flags |= FLAGS_UPPERCASE;
 800f362:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f364:	f043 0320 	orr.w	r3, r3, #32
 800f368:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	781b      	ldrb	r3, [r3, #0]
 800f36e:	2b69      	cmp	r3, #105	@ 0x69
 800f370:	d007      	beq.n	800f382 <_vsnprintf+0x40a>
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	781b      	ldrb	r3, [r3, #0]
 800f376:	2b64      	cmp	r3, #100	@ 0x64
 800f378:	d003      	beq.n	800f382 <_vsnprintf+0x40a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800f37a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f37c:	f023 030c 	bic.w	r3, r3, #12
 800f380:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800f382:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f384:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d003      	beq.n	800f394 <_vsnprintf+0x41c>
          flags &= ~FLAGS_ZEROPAD;
 800f38c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f38e:	f023 0301 	bic.w	r3, r3, #1
 800f392:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	781b      	ldrb	r3, [r3, #0]
 800f398:	2b69      	cmp	r3, #105	@ 0x69
 800f39a:	d003      	beq.n	800f3a4 <_vsnprintf+0x42c>
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	781b      	ldrb	r3, [r3, #0]
 800f3a0:	2b64      	cmp	r3, #100	@ 0x64
 800f3a2:	d160      	bne.n	800f466 <_vsnprintf+0x4ee>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800f3a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f3a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	f040 80ac 	bne.w	800f508 <_vsnprintf+0x590>
#if PRINTF_SUPPORT_LONG_LONG
            const long long value = va_arg(va, long long);
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
#endif
          }
          else if (flags & FLAGS_LONG) {
 800f3b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f3b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d01f      	beq.n	800f3fa <_vsnprintf+0x482>
            const long value = va_arg(va, long);
 800f3ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f3bc:	1d1a      	adds	r2, r3, #4
 800f3be:	663a      	str	r2, [r7, #96]	@ 0x60
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	617b      	str	r3, [r7, #20]
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 800f3c4:	697b      	ldr	r3, [r7, #20]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	bfb8      	it	lt
 800f3ca:	425b      	neglt	r3, r3
 800f3cc:	4619      	mov	r1, r3
 800f3ce:	697b      	ldr	r3, [r7, #20]
 800f3d0:	0fdb      	lsrs	r3, r3, #31
 800f3d2:	b2db      	uxtb	r3, r3
 800f3d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f3d6:	9205      	str	r2, [sp, #20]
 800f3d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f3da:	9204      	str	r2, [sp, #16]
 800f3dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f3de:	9203      	str	r2, [sp, #12]
 800f3e0:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800f3e4:	9202      	str	r2, [sp, #8]
 800f3e6:	9301      	str	r3, [sp, #4]
 800f3e8:	9100      	str	r1, [sp, #0]
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f3ee:	68b9      	ldr	r1, [r7, #8]
 800f3f0:	68f8      	ldr	r0, [r7, #12]
 800f3f2:	f7ff fa21 	bl	800e838 <print_integer>
 800f3f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
          if (flags & FLAGS_LONG_LONG) {
 800f3f8:	e086      	b.n	800f508 <_vsnprintf+0x590>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (signed char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800f3fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f3fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f400:	2b00      	cmp	r3, #0
 800f402:	d005      	beq.n	800f410 <_vsnprintf+0x498>
 800f404:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f406:	1d1a      	adds	r2, r3, #4
 800f408:	663a      	str	r2, [r7, #96]	@ 0x60
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	b25b      	sxtb	r3, r3
 800f40e:	e00e      	b.n	800f42e <_vsnprintf+0x4b6>
 800f410:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f416:	2b00      	cmp	r3, #0
 800f418:	d005      	beq.n	800f426 <_vsnprintf+0x4ae>
 800f41a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f41c:	1d1a      	adds	r2, r3, #4
 800f41e:	663a      	str	r2, [r7, #96]	@ 0x60
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	b21b      	sxth	r3, r3
 800f424:	e003      	b.n	800f42e <_vsnprintf+0x4b6>
 800f426:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f428:	1d1a      	adds	r2, r3, #4
 800f42a:	663a      	str	r2, [r7, #96]	@ 0x60
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	61bb      	str	r3, [r7, #24]
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 800f430:	69bb      	ldr	r3, [r7, #24]
 800f432:	2b00      	cmp	r3, #0
 800f434:	bfb8      	it	lt
 800f436:	425b      	neglt	r3, r3
 800f438:	4619      	mov	r1, r3
 800f43a:	69bb      	ldr	r3, [r7, #24]
 800f43c:	0fdb      	lsrs	r3, r3, #31
 800f43e:	b2db      	uxtb	r3, r3
 800f440:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f442:	9205      	str	r2, [sp, #20]
 800f444:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f446:	9204      	str	r2, [sp, #16]
 800f448:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f44a:	9203      	str	r2, [sp, #12]
 800f44c:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800f450:	9202      	str	r2, [sp, #8]
 800f452:	9301      	str	r3, [sp, #4]
 800f454:	9100      	str	r1, [sp, #0]
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f45a:	68b9      	ldr	r1, [r7, #8]
 800f45c:	68f8      	ldr	r0, [r7, #12]
 800f45e:	f7ff f9eb 	bl	800e838 <print_integer>
 800f462:	63f8      	str	r0, [r7, #60]	@ 0x3c
          if (flags & FLAGS_LONG_LONG) {
 800f464:	e050      	b.n	800f508 <_vsnprintf+0x590>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 800f466:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f468:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d14b      	bne.n	800f508 <_vsnprintf+0x590>
#if PRINTF_SUPPORT_LONG_LONG
            idx = print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) va_arg(va, unsigned long long), false, base, precision, width, flags);
#endif
          }
          else if (flags & FLAGS_LONG) {
 800f470:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f476:	2b00      	cmp	r3, #0
 800f478:	d017      	beq.n	800f4aa <_vsnprintf+0x532>
            idx = print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) va_arg(va, unsigned long), false, base, precision, width, flags);
 800f47a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f47c:	1d1a      	adds	r2, r3, #4
 800f47e:	663a      	str	r2, [r7, #96]	@ 0x60
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f484:	9205      	str	r2, [sp, #20]
 800f486:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f488:	9204      	str	r2, [sp, #16]
 800f48a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f48c:	9203      	str	r2, [sp, #12]
 800f48e:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800f492:	9202      	str	r2, [sp, #8]
 800f494:	2200      	movs	r2, #0
 800f496:	9201      	str	r2, [sp, #4]
 800f498:	9300      	str	r3, [sp, #0]
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f49e:	68b9      	ldr	r1, [r7, #8]
 800f4a0:	68f8      	ldr	r0, [r7, #12]
 800f4a2:	f7ff f9c9 	bl	800e838 <print_integer>
 800f4a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800f4a8:	e02e      	b.n	800f508 <_vsnprintf+0x590>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800f4aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f4ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d005      	beq.n	800f4c0 <_vsnprintf+0x548>
 800f4b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f4b6:	1d1a      	adds	r2, r3, #4
 800f4b8:	663a      	str	r2, [r7, #96]	@ 0x60
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	b2db      	uxtb	r3, r3
 800f4be:	e00e      	b.n	800f4de <_vsnprintf+0x566>
 800f4c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f4c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d005      	beq.n	800f4d6 <_vsnprintf+0x55e>
 800f4ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f4cc:	1d1a      	adds	r2, r3, #4
 800f4ce:	663a      	str	r2, [r7, #96]	@ 0x60
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	b29b      	uxth	r3, r3
 800f4d4:	e003      	b.n	800f4de <_vsnprintf+0x566>
 800f4d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f4d8:	1d1a      	adds	r2, r3, #4
 800f4da:	663a      	str	r2, [r7, #96]	@ 0x60
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	61fb      	str	r3, [r7, #28]
            idx = print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) value, false, base, precision, width, flags);
 800f4e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f4e2:	9305      	str	r3, [sp, #20]
 800f4e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f4e6:	9304      	str	r3, [sp, #16]
 800f4e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f4ea:	9303      	str	r3, [sp, #12]
 800f4ec:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800f4f0:	9302      	str	r3, [sp, #8]
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	9301      	str	r3, [sp, #4]
 800f4f6:	69fb      	ldr	r3, [r7, #28]
 800f4f8:	9300      	str	r3, [sp, #0]
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f4fe:	68b9      	ldr	r1, [r7, #8]
 800f500:	68f8      	ldr	r0, [r7, #12]
 800f502:	f7ff f999 	bl	800e838 <print_integer>
 800f506:	63f8      	str	r0, [r7, #60]	@ 0x3c
          }
        }
        format++;
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	3301      	adds	r3, #1
 800f50c:	603b      	str	r3, [r7, #0]
        break;
 800f50e:	e124      	b.n	800f75a <_vsnprintf+0x7e2>
      }
#if PRINTF_SUPPORT_DECIMAL_SPECIFIERS
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	781b      	ldrb	r3, [r3, #0]
 800f514:	2b46      	cmp	r3, #70	@ 0x46
 800f516:	d103      	bne.n	800f520 <_vsnprintf+0x5a8>
 800f518:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f51a:	f043 0320 	orr.w	r3, r3, #32
 800f51e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        idx = sprint_floating_point(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags, PRINTF_PREFER_DECIMAL);
 800f520:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f522:	3307      	adds	r3, #7
 800f524:	f023 0307 	bic.w	r3, r3, #7
 800f528:	f103 0208 	add.w	r2, r3, #8
 800f52c:	663a      	str	r2, [r7, #96]	@ 0x60
 800f52e:	ed93 7b00 	vldr	d7, [r3]
 800f532:	2300      	movs	r3, #0
 800f534:	9303      	str	r3, [sp, #12]
 800f536:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f538:	9302      	str	r3, [sp, #8]
 800f53a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f53c:	9301      	str	r3, [sp, #4]
 800f53e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f540:	9300      	str	r3, [sp, #0]
 800f542:	eeb0 0b47 	vmov.f64	d0, d7
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f54a:	68b9      	ldr	r1, [r7, #8]
 800f54c:	68f8      	ldr	r0, [r7, #12]
 800f54e:	f7ff fc4b 	bl	800ede8 <sprint_floating_point>
 800f552:	63f8      	str	r0, [r7, #60]	@ 0x3c
        format++;
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	3301      	adds	r3, #1
 800f558:	603b      	str	r3, [r7, #0]
        break;
 800f55a:	e0fe      	b.n	800f75a <_vsnprintf+0x7e2>
        idx = sprint_floating_point(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags, PRINTF_PREFER_EXPONENTIAL);
        format++;
        break;
#endif  // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
      case 'c' : {
        unsigned int l = 1U;
 800f55c:	2301      	movs	r3, #1
 800f55e:	637b      	str	r3, [r7, #52]	@ 0x34
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800f560:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f562:	f003 0302 	and.w	r3, r3, #2
 800f566:	2b00      	cmp	r3, #0
 800f568:	d10e      	bne.n	800f588 <_vsnprintf+0x610>
          while (l++ < width) {
 800f56a:	e007      	b.n	800f57c <_vsnprintf+0x604>
            out(' ', buffer, idx++, maxlen);
 800f56c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f56e:	1c53      	adds	r3, r2, #1
 800f570:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f572:	68fc      	ldr	r4, [r7, #12]
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	68b9      	ldr	r1, [r7, #8]
 800f578:	2020      	movs	r0, #32
 800f57a:	47a0      	blx	r4
          while (l++ < width) {
 800f57c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f57e:	1c5a      	adds	r2, r3, #1
 800f580:	637a      	str	r2, [r7, #52]	@ 0x34
 800f582:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f584:	429a      	cmp	r2, r3
 800f586:	d8f1      	bhi.n	800f56c <_vsnprintf+0x5f4>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800f588:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f58a:	1d1a      	adds	r2, r3, #4
 800f58c:	663a      	str	r2, [r7, #96]	@ 0x60
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	b2d8      	uxtb	r0, r3
 800f592:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f594:	1c53      	adds	r3, r2, #1
 800f596:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f598:	68fc      	ldr	r4, [r7, #12]
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	68b9      	ldr	r1, [r7, #8]
 800f59e:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800f5a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f5a2:	f003 0302 	and.w	r3, r3, #2
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d00e      	beq.n	800f5c8 <_vsnprintf+0x650>
          while (l++ < width) {
 800f5aa:	e007      	b.n	800f5bc <_vsnprintf+0x644>
            out(' ', buffer, idx++, maxlen);
 800f5ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f5ae:	1c53      	adds	r3, r2, #1
 800f5b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f5b2:	68fc      	ldr	r4, [r7, #12]
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	68b9      	ldr	r1, [r7, #8]
 800f5b8:	2020      	movs	r0, #32
 800f5ba:	47a0      	blx	r4
          while (l++ < width) {
 800f5bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f5be:	1c5a      	adds	r2, r3, #1
 800f5c0:	637a      	str	r2, [r7, #52]	@ 0x34
 800f5c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f5c4:	429a      	cmp	r2, r3
 800f5c6:	d8f1      	bhi.n	800f5ac <_vsnprintf+0x634>
          }
        }
        format++;
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	3301      	adds	r3, #1
 800f5cc:	603b      	str	r3, [r7, #0]
        break;
 800f5ce:	e0c4      	b.n	800f75a <_vsnprintf+0x7e2>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800f5d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f5d2:	1d1a      	adds	r2, r3, #4
 800f5d4:	663a      	str	r2, [r7, #96]	@ 0x60
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	633b      	str	r3, [r7, #48]	@ 0x30
        if (p == NULL) {
 800f5da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d10f      	bne.n	800f600 <_vsnprintf+0x688>
          idx = _out_rev(out, buffer, idx, maxlen, ")llun(", 6, width, flags);
 800f5e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f5e2:	9303      	str	r3, [sp, #12]
 800f5e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f5e6:	9302      	str	r3, [sp, #8]
 800f5e8:	2306      	movs	r3, #6
 800f5ea:	9301      	str	r3, [sp, #4]
 800f5ec:	4b66      	ldr	r3, [pc, #408]	@ (800f788 <_vsnprintf+0x810>)
 800f5ee:	9300      	str	r3, [sp, #0]
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f5f4:	68b9      	ldr	r1, [r7, #8]
 800f5f6:	68f8      	ldr	r0, [r7, #12]
 800f5f8:	f7fe ffd7 	bl	800e5aa <_out_rev>
 800f5fc:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800f5fe:	e058      	b.n	800f6b2 <_vsnprintf+0x73a>
        }
        else {
          unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800f600:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f602:	2b00      	cmp	r3, #0
 800f604:	d001      	beq.n	800f60a <_vsnprintf+0x692>
 800f606:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f608:	e001      	b.n	800f60e <_vsnprintf+0x696>
 800f60a:	f04f 33ff 	mov.w	r3, #4294967295
 800f60e:	4619      	mov	r1, r3
 800f610:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f612:	f7fe ff72 	bl	800e4fa <_strnlen_s>
 800f616:	62f8      	str	r0, [r7, #44]	@ 0x2c
          // pre padding
          if (flags & FLAGS_PRECISION) {
 800f618:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f61a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d005      	beq.n	800f62e <_vsnprintf+0x6b6>
            l = (l < precision ? l : precision);
 800f622:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f624:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f626:	4293      	cmp	r3, r2
 800f628:	bf28      	it	cs
 800f62a:	4613      	movcs	r3, r2
 800f62c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          }
          if (!(flags & FLAGS_LEFT)) {
 800f62e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f630:	f003 0302 	and.w	r3, r3, #2
 800f634:	2b00      	cmp	r3, #0
 800f636:	d11a      	bne.n	800f66e <_vsnprintf+0x6f6>
            while (l++ < width) {
 800f638:	e007      	b.n	800f64a <_vsnprintf+0x6d2>
              out(' ', buffer, idx++, maxlen);
 800f63a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f63c:	1c53      	adds	r3, r2, #1
 800f63e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f640:	68fc      	ldr	r4, [r7, #12]
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	68b9      	ldr	r1, [r7, #8]
 800f646:	2020      	movs	r0, #32
 800f648:	47a0      	blx	r4
            while (l++ < width) {
 800f64a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f64c:	1c5a      	adds	r2, r3, #1
 800f64e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f650:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f652:	429a      	cmp	r2, r3
 800f654:	d8f1      	bhi.n	800f63a <_vsnprintf+0x6c2>
            }
          }
          // string output
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800f656:	e00a      	b.n	800f66e <_vsnprintf+0x6f6>
            out(*(p++), buffer, idx++, maxlen);
 800f658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f65a:	1c5a      	adds	r2, r3, #1
 800f65c:	633a      	str	r2, [r7, #48]	@ 0x30
 800f65e:	7818      	ldrb	r0, [r3, #0]
 800f660:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f662:	1c53      	adds	r3, r2, #1
 800f664:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f666:	68fc      	ldr	r4, [r7, #12]
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	68b9      	ldr	r1, [r7, #8]
 800f66c:	47a0      	blx	r4
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800f66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f670:	781b      	ldrb	r3, [r3, #0]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d009      	beq.n	800f68a <_vsnprintf+0x712>
 800f676:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d0eb      	beq.n	800f658 <_vsnprintf+0x6e0>
 800f680:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f682:	1e5a      	subs	r2, r3, #1
 800f684:	647a      	str	r2, [r7, #68]	@ 0x44
 800f686:	2b00      	cmp	r3, #0
 800f688:	d1e6      	bne.n	800f658 <_vsnprintf+0x6e0>
          }
          // post padding
          if (flags & FLAGS_LEFT) {
 800f68a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f68c:	f003 0302 	and.w	r3, r3, #2
 800f690:	2b00      	cmp	r3, #0
 800f692:	d00e      	beq.n	800f6b2 <_vsnprintf+0x73a>
            while (l++ < width) {
 800f694:	e007      	b.n	800f6a6 <_vsnprintf+0x72e>
              out(' ', buffer, idx++, maxlen);
 800f696:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f698:	1c53      	adds	r3, r2, #1
 800f69a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f69c:	68fc      	ldr	r4, [r7, #12]
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	68b9      	ldr	r1, [r7, #8]
 800f6a2:	2020      	movs	r0, #32
 800f6a4:	47a0      	blx	r4
            while (l++ < width) {
 800f6a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6a8:	1c5a      	adds	r2, r3, #1
 800f6aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f6ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f6ae:	429a      	cmp	r2, r3
 800f6b0:	d8f1      	bhi.n	800f696 <_vsnprintf+0x71e>
            }
          }
        }
        format++;
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	3301      	adds	r3, #1
 800f6b6:	603b      	str	r3, [r7, #0]
        break;
 800f6b8:	e04f      	b.n	800f75a <_vsnprintf+0x7e2>
      }

      case 'p' : {
        width = sizeof(void*) * 2U + 2; // 2 hex chars per byte + the "0x" prefix
 800f6ba:	230a      	movs	r3, #10
 800f6bc:	64bb      	str	r3, [r7, #72]	@ 0x48
        flags |= FLAGS_ZEROPAD | FLAGS_POINTER;
 800f6be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f6c0:	f241 0301 	movw	r3, #4097	@ 0x1001
 800f6c4:	4313      	orrs	r3, r2
 800f6c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
        uintptr_t value = (uintptr_t)va_arg(va, void*);
 800f6c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f6ca:	1d1a      	adds	r2, r3, #4
 800f6cc:	663a      	str	r2, [r7, #96]	@ 0x60
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	623b      	str	r3, [r7, #32]
        idx = (value == (uintptr_t) NULL) ?
          _out_rev(out, buffer, idx, maxlen, ")lin(", 5, width, flags) :
 800f6d2:	6a3b      	ldr	r3, [r7, #32]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d10f      	bne.n	800f6f8 <_vsnprintf+0x780>
 800f6d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f6da:	9303      	str	r3, [sp, #12]
 800f6dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f6de:	9302      	str	r3, [sp, #8]
 800f6e0:	2305      	movs	r3, #5
 800f6e2:	9301      	str	r3, [sp, #4]
 800f6e4:	4b29      	ldr	r3, [pc, #164]	@ (800f78c <_vsnprintf+0x814>)
 800f6e6:	9300      	str	r3, [sp, #0]
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f6ec:	68b9      	ldr	r1, [r7, #8]
 800f6ee:	68f8      	ldr	r0, [r7, #12]
 800f6f0:	f7fe ff5b 	bl	800e5aa <_out_rev>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	e012      	b.n	800f71e <_vsnprintf+0x7a6>
          print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) value, false, BASE_HEX, precision, width, flags);
 800f6f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f6fa:	9305      	str	r3, [sp, #20]
 800f6fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f6fe:	9304      	str	r3, [sp, #16]
 800f700:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f702:	9303      	str	r3, [sp, #12]
 800f704:	2310      	movs	r3, #16
 800f706:	9302      	str	r3, [sp, #8]
 800f708:	2300      	movs	r3, #0
 800f70a:	9301      	str	r3, [sp, #4]
 800f70c:	6a3b      	ldr	r3, [r7, #32]
 800f70e:	9300      	str	r3, [sp, #0]
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f714:	68b9      	ldr	r1, [r7, #8]
 800f716:	68f8      	ldr	r0, [r7, #12]
 800f718:	f7ff f88e 	bl	800e838 <print_integer>
 800f71c:	4603      	mov	r3, r0
        idx = (value == (uintptr_t) NULL) ?
 800f71e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        format++;
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	3301      	adds	r3, #1
 800f724:	603b      	str	r3, [r7, #0]
        break;
 800f726:	e018      	b.n	800f75a <_vsnprintf+0x7e2>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800f728:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f72a:	1c53      	adds	r3, r2, #1
 800f72c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f72e:	68fc      	ldr	r4, [r7, #12]
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	68b9      	ldr	r1, [r7, #8]
 800f734:	2025      	movs	r0, #37	@ 0x25
 800f736:	47a0      	blx	r4
        format++;
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	3301      	adds	r3, #1
 800f73c:	603b      	str	r3, [r7, #0]
        break;
 800f73e:	e00c      	b.n	800f75a <_vsnprintf+0x7e2>

      default :
        out(*format, buffer, idx++, maxlen);
 800f740:	683b      	ldr	r3, [r7, #0]
 800f742:	7818      	ldrb	r0, [r3, #0]
 800f744:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f746:	1c53      	adds	r3, r2, #1
 800f748:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f74a:	68fc      	ldr	r4, [r7, #12]
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	68b9      	ldr	r1, [r7, #8]
 800f750:	47a0      	blx	r4
        format++;
 800f752:	683b      	ldr	r3, [r7, #0]
 800f754:	3301      	adds	r3, #1
 800f756:	603b      	str	r3, [r7, #0]
        break;
 800f758:	bf00      	nop
  while (*format)
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	781b      	ldrb	r3, [r3, #0]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	f47f ac1a 	bne.w	800ef98 <_vsnprintf+0x20>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800f764:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	429a      	cmp	r2, r3
 800f76a:	d302      	bcc.n	800f772 <_vsnprintf+0x7fa>
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	1e5a      	subs	r2, r3, #1
 800f770:	e000      	b.n	800f774 <_vsnprintf+0x7fc>
 800f772:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f774:	68fc      	ldr	r4, [r7, #12]
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	68b9      	ldr	r1, [r7, #8]
 800f77a:	2000      	movs	r0, #0
 800f77c:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800f77e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800f780:	4618      	mov	r0, r3
 800f782:	3754      	adds	r7, #84	@ 0x54
 800f784:	46bd      	mov	sp, r7
 800f786:	bd90      	pop	{r4, r7, pc}
 800f788:	08027b30 	.word	0x08027b30
 800f78c:	08027b38 	.word	0x08027b38

0800f790 <vsnprintf_>:
{
  return _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
}

int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b086      	sub	sp, #24
 800f794:	af02      	add	r7, sp, #8
 800f796:	60f8      	str	r0, [r7, #12]
 800f798:	60b9      	str	r1, [r7, #8]
 800f79a:	607a      	str	r2, [r7, #4]
 800f79c:	603b      	str	r3, [r7, #0]
  return _vsnprintf(_out_buffer, buffer, count, format, va);
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	9300      	str	r3, [sp, #0]
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	68ba      	ldr	r2, [r7, #8]
 800f7a6:	68f9      	ldr	r1, [r7, #12]
 800f7a8:	4803      	ldr	r0, [pc, #12]	@ (800f7b8 <vsnprintf_+0x28>)
 800f7aa:	f7ff fbe5 	bl	800ef78 <_vsnprintf>
 800f7ae:	4603      	mov	r3, r0
}
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	3710      	adds	r7, #16
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd80      	pop	{r7, pc}
 800f7b8:	0800e4b1 	.word	0x0800e4b1

0800f7bc <InsertParityBits>:
 800f7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7c0:	2700      	movs	r7, #0
 800f7c2:	f04f 0901 	mov.w	r9, #1
 800f7c6:	fa09 f407 	lsl.w	r4, r9, r7
 800f7ca:	1e66      	subs	r6, r4, #1
 800f7cc:	ea4f 08d6 	mov.w	r8, r6, lsr #3
 800f7d0:	f006 0607 	and.w	r6, r6, #7
 800f7d4:	f810 5008 	ldrb.w	r5, [r0, r8]
 800f7d8:	fa09 f206 	lsl.w	r2, r9, r6
 800f7dc:	b2e3      	uxtb	r3, r4
 800f7de:	ea25 0502 	bic.w	r5, r5, r2
 800f7e2:	f103 3cff 	add.w	ip, r3, #4294967295
 800f7e6:	f800 5008 	strb.w	r5, [r0, r8]
 800f7ea:	005b      	lsls	r3, r3, #1
 800f7ec:	fa5f fc8c 	uxtb.w	ip, ip
 800f7f0:	fa5f fe83 	uxtb.w	lr, r3
 800f7f4:	f04f 0a00 	mov.w	sl, #0
 800f7f8:	eb04 010c 	add.w	r1, r4, ip
 800f7fc:	4561      	cmp	r1, ip
 800f7fe:	46e3      	mov	fp, ip
 800f800:	bfc8      	it	gt
 800f802:	4662      	movgt	r2, ip
 800f804:	dd10      	ble.n	800f828 <InsertParityBits+0x6c>
 800f806:	f3c2 03c7 	ubfx	r3, r2, #3, #8
 800f80a:	ebab 0bc3 	sub.w	fp, fp, r3, lsl #3
 800f80e:	5cc3      	ldrb	r3, [r0, r3]
 800f810:	3201      	adds	r2, #1
 800f812:	fa43 f30b 	asr.w	r3, r3, fp
 800f816:	b2d2      	uxtb	r2, r2
 800f818:	f003 0301 	and.w	r3, r3, #1
 800f81c:	4453      	add	r3, sl
 800f81e:	428a      	cmp	r2, r1
 800f820:	fa5f fa83 	uxtb.w	sl, r3
 800f824:	4693      	mov	fp, r2
 800f826:	dbee      	blt.n	800f806 <InsertParityBits+0x4a>
 800f828:	44f4      	add	ip, lr
 800f82a:	fa5f fc8c 	uxtb.w	ip, ip
 800f82e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800f832:	d9e1      	bls.n	800f7f8 <InsertParityBits+0x3c>
 800f834:	f00a 0301 	and.w	r3, sl, #1
 800f838:	fa03 f606 	lsl.w	r6, r3, r6
 800f83c:	3701      	adds	r7, #1
 800f83e:	432e      	orrs	r6, r5
 800f840:	2f07      	cmp	r7, #7
 800f842:	f800 6008 	strb.w	r6, [r0, r8]
 800f846:	d1be      	bne.n	800f7c6 <InsertParityBits+0xa>
 800f848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f84c <hamming_decode>:
 800f84c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f850:	4605      	mov	r5, r0
 800f852:	b085      	sub	sp, #20
 800f854:	6800      	ldr	r0, [r0, #0]
 800f856:	68aa      	ldr	r2, [r5, #8]
 800f858:	68eb      	ldr	r3, [r5, #12]
 800f85a:	460c      	mov	r4, r1
 800f85c:	6869      	ldr	r1, [r5, #4]
 800f85e:	466e      	mov	r6, sp
 800f860:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f862:	4668      	mov	r0, sp
 800f864:	f7ff ffaa 	bl	800f7bc <InsertParityBits>
 800f868:	782a      	ldrb	r2, [r5, #0]
 800f86a:	f89d 3000 	ldrb.w	r3, [sp]
 800f86e:	f002 0101 	and.w	r1, r2, #1
 800f872:	f003 0001 	and.w	r0, r3, #1
 800f876:	1a40      	subs	r0, r0, r1
 800f878:	f3c2 0640 	ubfx	r6, r2, #1, #1
 800f87c:	f3c3 0140 	ubfx	r1, r3, #1, #1
 800f880:	bf18      	it	ne
 800f882:	2001      	movne	r0, #1
 800f884:	428e      	cmp	r6, r1
 800f886:	f3c2 01c0 	ubfx	r1, r2, #3, #1
 800f88a:	f3c3 06c0 	ubfx	r6, r3, #3, #1
 800f88e:	bf18      	it	ne
 800f890:	3002      	addne	r0, #2
 800f892:	42b1      	cmp	r1, r6
 800f894:	bf18      	it	ne
 800f896:	3004      	addne	r0, #4
 800f898:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 800f89c:	bf18      	it	ne
 800f89e:	b2c0      	uxtbne	r0, r0
 800f8a0:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
 800f8a4:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800f8a8:	786a      	ldrb	r2, [r5, #1]
 800f8aa:	bf18      	it	ne
 800f8ac:	3008      	addne	r0, #8
 800f8ae:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 800f8b2:	bf18      	it	ne
 800f8b4:	b2c0      	uxtbne	r0, r0
 800f8b6:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
 800f8ba:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f8be:	78ea      	ldrb	r2, [r5, #3]
 800f8c0:	bf18      	it	ne
 800f8c2:	3010      	addne	r0, #16
 800f8c4:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 800f8c8:	bf18      	it	ne
 800f8ca:	b2c0      	uxtbne	r0, r0
 800f8cc:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
 800f8d0:	d054      	beq.n	800f97c <hamming_decode+0x130>
 800f8d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f8d6:	79ea      	ldrb	r2, [r5, #7]
 800f8d8:	09db      	lsrs	r3, r3, #7
 800f8da:	3020      	adds	r0, #32
 800f8dc:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
 800f8e0:	b2c0      	uxtb	r0, r0
 800f8e2:	d001      	beq.n	800f8e8 <hamming_decode+0x9c>
 800f8e4:	3040      	adds	r0, #64	@ 0x40
 800f8e6:	b2c0      	uxtb	r0, r0
 800f8e8:	1e42      	subs	r2, r0, #1
 800f8ea:	f3c2 03c4 	ubfx	r3, r2, #3, #5
 800f8ee:	b2d1      	uxtb	r1, r2
 800f8f0:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 800f8f4:	3310      	adds	r3, #16
 800f8f6:	446b      	add	r3, sp
 800f8f8:	08d6      	lsrs	r6, r2, #3
 800f8fa:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800f8fe:	410b      	asrs	r3, r1
 800f900:	f003 0301 	and.w	r3, r3, #1
 800f904:	f81d 1006 	ldrb.w	r1, [sp, r6]
 800f908:	f002 0207 	and.w	r2, r2, #7
 800f90c:	f1c3 0301 	rsb	r3, r3, #1
 800f910:	2501      	movs	r5, #1
 800f912:	4093      	lsls	r3, r2
 800f914:	fa05 f202 	lsl.w	r2, r5, r2
 800f918:	ea21 0202 	bic.w	r2, r1, r2
 800f91c:	4313      	orrs	r3, r2
 800f91e:	f80d 3006 	strb.w	r3, [sp, r6]
 800f922:	2201      	movs	r2, #1
 800f924:	2100      	movs	r1, #0
 800f926:	4616      	mov	r6, r2
 800f928:	fa5f fc82 	uxtb.w	ip, r2
 800f92c:	ab04      	add	r3, sp, #16
 800f92e:	eb03 09dc 	add.w	r9, r3, ip, lsr #3
 800f932:	f00c 03f8 	and.w	r3, ip, #248	@ 0xf8
 800f936:	eba2 0e03 	sub.w	lr, r2, r3
 800f93a:	f10c 0301 	add.w	r3, ip, #1
 800f93e:	f001 0707 	and.w	r7, r1, #7
 800f942:	ea1c 0f03 	tst.w	ip, r3
 800f946:	ea4f 05d1 	mov.w	r5, r1, lsr #3
 800f94a:	f102 0201 	add.w	r2, r2, #1
 800f94e:	fa06 f807 	lsl.w	r8, r6, r7
 800f952:	d00e      	beq.n	800f972 <hamming_decode+0x126>
 800f954:	f819 3c10 	ldrb.w	r3, [r9, #-16]
 800f958:	f814 c005 	ldrb.w	ip, [r4, r5]
 800f95c:	fa43 f30e 	asr.w	r3, r3, lr
 800f960:	f003 0301 	and.w	r3, r3, #1
 800f964:	40bb      	lsls	r3, r7
 800f966:	ea2c 0708 	bic.w	r7, ip, r8
 800f96a:	433b      	orrs	r3, r7
 800f96c:	3101      	adds	r1, #1
 800f96e:	5563      	strb	r3, [r4, r5]
 800f970:	b2c9      	uxtb	r1, r1
 800f972:	2a7f      	cmp	r2, #127	@ 0x7f
 800f974:	d1d8      	bne.n	800f928 <hamming_decode+0xdc>
 800f976:	b005      	add	sp, #20
 800f978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f97c:	79eb      	ldrb	r3, [r5, #7]
 800f97e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f982:	09db      	lsrs	r3, r3, #7
 800f984:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
 800f988:	d1ac      	bne.n	800f8e4 <hamming_decode+0x98>
 800f98a:	2800      	cmp	r0, #0
 800f98c:	d0c9      	beq.n	800f922 <hamming_decode+0xd6>
 800f98e:	e7ab      	b.n	800f8e8 <hamming_decode+0x9c>

0800f990 <Time_GetNow>:
 800f990:	1d01      	adds	r1, r0, #4
 800f992:	f7fe b9e5 	b.w	800dd60 <Timer_GetCounterValue>
 800f996:	bf00      	nop

0800f998 <Time_DiffUSec>:
 800f998:	b410      	push	{r4}
 800f99a:	e9d1 2400 	ldrd	r2, r4, [r1]
 800f99e:	6843      	ldr	r3, [r0, #4]
 800f9a0:	42a3      	cmp	r3, r4
 800f9a2:	d818      	bhi.n	800f9d6 <Time_DiffUSec+0x3e>
 800f9a4:	6800      	ldr	r0, [r0, #0]
 800f9a6:	1ae3      	subs	r3, r4, r3
 800f9a8:	1a10      	subs	r0, r2, r0
 800f9aa:	f241 02c5 	movw	r2, #4293	@ 0x10c5
 800f9ae:	4290      	cmp	r0, r2
 800f9b0:	d90b      	bls.n	800f9ca <Time_DiffUSec+0x32>
 800f9b2:	f241 02c6 	movw	r2, #4294	@ 0x10c6
 800f9b6:	4290      	cmp	r0, r2
 800f9b8:	d004      	beq.n	800f9c4 <Time_DiffUSec+0x2c>
 800f9ba:	f04f 30ff 	mov.w	r0, #4294967295
 800f9be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f9c2:	4770      	bx	lr
 800f9c4:	4a08      	ldr	r2, [pc, #32]	@ (800f9e8 <Time_DiffUSec+0x50>)
 800f9c6:	4293      	cmp	r3, r2
 800f9c8:	d8f7      	bhi.n	800f9ba <Time_DiffUSec+0x22>
 800f9ca:	4a08      	ldr	r2, [pc, #32]	@ (800f9ec <Time_DiffUSec+0x54>)
 800f9cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f9d0:	fb02 3000 	mla	r0, r2, r0, r3
 800f9d4:	4770      	bx	lr
 800f9d6:	6801      	ldr	r1, [r0, #0]
 800f9d8:	f504 2474 	add.w	r4, r4, #999424	@ 0xf4000
 800f9dc:	1e50      	subs	r0, r2, #1
 800f9de:	f504 7410 	add.w	r4, r4, #576	@ 0x240
 800f9e2:	1a40      	subs	r0, r0, r1
 800f9e4:	1ae3      	subs	r3, r4, r3
 800f9e6:	e7e0      	b.n	800f9aa <Time_DiffUSec+0x12>
 800f9e8:	000ec27e 	.word	0x000ec27e
 800f9ec:	000f4240 	.word	0x000f4240

0800f9f0 <Time_GetElapsedUSec>:
 800f9f0:	b510      	push	{r4, lr}
 800f9f2:	4604      	mov	r4, r0
 800f9f4:	b082      	sub	sp, #8
 800f9f6:	a901      	add	r1, sp, #4
 800f9f8:	4668      	mov	r0, sp
 800f9fa:	f7fe f9b1 	bl	800dd60 <Timer_GetCounterValue>
 800f9fe:	9901      	ldr	r1, [sp, #4]
 800fa00:	6863      	ldr	r3, [r4, #4]
 800fa02:	9a00      	ldr	r2, [sp, #0]
 800fa04:	428b      	cmp	r3, r1
 800fa06:	d816      	bhi.n	800fa36 <Time_GetElapsedUSec+0x46>
 800fa08:	6820      	ldr	r0, [r4, #0]
 800fa0a:	1acb      	subs	r3, r1, r3
 800fa0c:	1a10      	subs	r0, r2, r0
 800fa0e:	f241 02c5 	movw	r2, #4293	@ 0x10c5
 800fa12:	4290      	cmp	r0, r2
 800fa14:	d90a      	bls.n	800fa2c <Time_GetElapsedUSec+0x3c>
 800fa16:	f241 02c6 	movw	r2, #4294	@ 0x10c6
 800fa1a:	4290      	cmp	r0, r2
 800fa1c:	d003      	beq.n	800fa26 <Time_GetElapsedUSec+0x36>
 800fa1e:	f04f 30ff 	mov.w	r0, #4294967295
 800fa22:	b002      	add	sp, #8
 800fa24:	bd10      	pop	{r4, pc}
 800fa26:	4a08      	ldr	r2, [pc, #32]	@ (800fa48 <Time_GetElapsedUSec+0x58>)
 800fa28:	4293      	cmp	r3, r2
 800fa2a:	d8f8      	bhi.n	800fa1e <Time_GetElapsedUSec+0x2e>
 800fa2c:	4a07      	ldr	r2, [pc, #28]	@ (800fa4c <Time_GetElapsedUSec+0x5c>)
 800fa2e:	fb02 3000 	mla	r0, r2, r0, r3
 800fa32:	b002      	add	sp, #8
 800fa34:	bd10      	pop	{r4, pc}
 800fa36:	6824      	ldr	r4, [r4, #0]
 800fa38:	f501 2174 	add.w	r1, r1, #999424	@ 0xf4000
 800fa3c:	1e50      	subs	r0, r2, #1
 800fa3e:	f501 7110 	add.w	r1, r1, #576	@ 0x240
 800fa42:	1b00      	subs	r0, r0, r4
 800fa44:	1acb      	subs	r3, r1, r3
 800fa46:	e7e2      	b.n	800fa0e <Time_GetElapsedUSec+0x1e>
 800fa48:	000ec27e 	.word	0x000ec27e
 800fa4c:	000f4240 	.word	0x000f4240

0800fa50 <Time_CheckTimeoutUSec>:
 800fa50:	b570      	push	{r4, r5, r6, lr}
 800fa52:	b082      	sub	sp, #8
 800fa54:	4605      	mov	r5, r0
 800fa56:	460c      	mov	r4, r1
 800fa58:	4668      	mov	r0, sp
 800fa5a:	a901      	add	r1, sp, #4
 800fa5c:	f7fe f980 	bl	800dd60 <Timer_GetCounterValue>
 800fa60:	4b20      	ldr	r3, [pc, #128]	@ (800fae4 <Time_CheckTimeoutUSec+0x94>)
 800fa62:	4821      	ldr	r0, [pc, #132]	@ (800fae8 <Time_CheckTimeoutUSec+0x98>)
 800fa64:	686a      	ldr	r2, [r5, #4]
 800fa66:	682e      	ldr	r6, [r5, #0]
 800fa68:	9d00      	ldr	r5, [sp, #0]
 800fa6a:	fba3 1304 	umull	r1, r3, r3, r4
 800fa6e:	0c99      	lsrs	r1, r3, #18
 800fa70:	fb00 4111 	mls	r1, r0, r1, r4
 800fa74:	4411      	add	r1, r2
 800fa76:	3801      	subs	r0, #1
 800fa78:	4281      	cmp	r1, r0
 800fa7a:	9c01      	ldr	r4, [sp, #4]
 800fa7c:	eb06 4393 	add.w	r3, r6, r3, lsr #18
 800fa80:	d904      	bls.n	800fa8c <Time_CheckTimeoutUSec+0x3c>
 800fa82:	f5a1 2174 	sub.w	r1, r1, #999424	@ 0xf4000
 800fa86:	3301      	adds	r3, #1
 800fa88:	f5a1 7110 	sub.w	r1, r1, #576	@ 0x240
 800fa8c:	429e      	cmp	r6, r3
 800fa8e:	d015      	beq.n	800fabc <Time_CheckTimeoutUSec+0x6c>
 800fa90:	bf34      	ite	cc
 800fa92:	2001      	movcc	r0, #1
 800fa94:	2000      	movcs	r0, #0
 800fa96:	b160      	cbz	r0, 800fab2 <Time_CheckTimeoutUSec+0x62>
 800fa98:	42ae      	cmp	r6, r5
 800fa9a:	d017      	beq.n	800facc <Time_CheckTimeoutUSec+0x7c>
 800fa9c:	bf34      	ite	cc
 800fa9e:	2201      	movcc	r2, #1
 800faa0:	2200      	movcs	r2, #0
 800faa2:	b122      	cbz	r2, 800faae <Time_CheckTimeoutUSec+0x5e>
 800faa4:	429d      	cmp	r5, r3
 800faa6:	d016      	beq.n	800fad6 <Time_CheckTimeoutUSec+0x86>
 800faa8:	bf8c      	ite	hi
 800faaa:	2001      	movhi	r0, #1
 800faac:	2000      	movls	r0, #0
 800faae:	b002      	add	sp, #8
 800fab0:	bd70      	pop	{r4, r5, r6, pc}
 800fab2:	42ae      	cmp	r6, r5
 800fab4:	d007      	beq.n	800fac6 <Time_CheckTimeoutUSec+0x76>
 800fab6:	d2f5      	bcs.n	800faa4 <Time_CheckTimeoutUSec+0x54>
 800fab8:	b002      	add	sp, #8
 800faba:	bd70      	pop	{r4, r5, r6, pc}
 800fabc:	428a      	cmp	r2, r1
 800fabe:	bf8c      	ite	hi
 800fac0:	2000      	movhi	r0, #0
 800fac2:	2001      	movls	r0, #1
 800fac4:	e7e7      	b.n	800fa96 <Time_CheckTimeoutUSec+0x46>
 800fac6:	42a2      	cmp	r2, r4
 800fac8:	d9f1      	bls.n	800faae <Time_CheckTimeoutUSec+0x5e>
 800faca:	e7eb      	b.n	800faa4 <Time_CheckTimeoutUSec+0x54>
 800facc:	42a2      	cmp	r2, r4
 800face:	bf8c      	ite	hi
 800fad0:	2200      	movhi	r2, #0
 800fad2:	2201      	movls	r2, #1
 800fad4:	e7e5      	b.n	800faa2 <Time_CheckTimeoutUSec+0x52>
 800fad6:	428c      	cmp	r4, r1
 800fad8:	bf34      	ite	cc
 800fada:	2000      	movcc	r0, #0
 800fadc:	2001      	movcs	r0, #1
 800fade:	b002      	add	sp, #8
 800fae0:	bd70      	pop	{r4, r5, r6, pc}
 800fae2:	bf00      	nop
 800fae4:	431bde83 	.word	0x431bde83
 800fae8:	000f4240 	.word	0x000f4240

0800faec <Time_CheckTimeoutMSec>:
 800faec:	b570      	push	{r4, r5, r6, lr}
 800faee:	b082      	sub	sp, #8
 800faf0:	4605      	mov	r5, r0
 800faf2:	460c      	mov	r4, r1
 800faf4:	4668      	mov	r0, sp
 800faf6:	a901      	add	r1, sp, #4
 800faf8:	f7fe f932 	bl	800dd60 <Timer_GetCounterValue>
 800fafc:	4b21      	ldr	r3, [pc, #132]	@ (800fb84 <Time_CheckTimeoutMSec+0x98>)
 800fafe:	686a      	ldr	r2, [r5, #4]
 800fb00:	682e      	ldr	r6, [r5, #0]
 800fb02:	9d00      	ldr	r5, [sp, #0]
 800fb04:	fba3 1304 	umull	r1, r3, r3, r4
 800fb08:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800fb0c:	0999      	lsrs	r1, r3, #6
 800fb0e:	fb00 4111 	mls	r1, r0, r1, r4
 800fb12:	fb00 2101 	mla	r1, r0, r1, r2
 800fb16:	481c      	ldr	r0, [pc, #112]	@ (800fb88 <Time_CheckTimeoutMSec+0x9c>)
 800fb18:	9c01      	ldr	r4, [sp, #4]
 800fb1a:	4281      	cmp	r1, r0
 800fb1c:	eb06 1393 	add.w	r3, r6, r3, lsr #6
 800fb20:	d904      	bls.n	800fb2c <Time_CheckTimeoutMSec+0x40>
 800fb22:	f5a1 2174 	sub.w	r1, r1, #999424	@ 0xf4000
 800fb26:	3301      	adds	r3, #1
 800fb28:	f5a1 7110 	sub.w	r1, r1, #576	@ 0x240
 800fb2c:	429e      	cmp	r6, r3
 800fb2e:	d015      	beq.n	800fb5c <Time_CheckTimeoutMSec+0x70>
 800fb30:	bf34      	ite	cc
 800fb32:	2001      	movcc	r0, #1
 800fb34:	2000      	movcs	r0, #0
 800fb36:	b160      	cbz	r0, 800fb52 <Time_CheckTimeoutMSec+0x66>
 800fb38:	42ae      	cmp	r6, r5
 800fb3a:	d017      	beq.n	800fb6c <Time_CheckTimeoutMSec+0x80>
 800fb3c:	bf34      	ite	cc
 800fb3e:	2201      	movcc	r2, #1
 800fb40:	2200      	movcs	r2, #0
 800fb42:	b122      	cbz	r2, 800fb4e <Time_CheckTimeoutMSec+0x62>
 800fb44:	429d      	cmp	r5, r3
 800fb46:	d016      	beq.n	800fb76 <Time_CheckTimeoutMSec+0x8a>
 800fb48:	bf8c      	ite	hi
 800fb4a:	2001      	movhi	r0, #1
 800fb4c:	2000      	movls	r0, #0
 800fb4e:	b002      	add	sp, #8
 800fb50:	bd70      	pop	{r4, r5, r6, pc}
 800fb52:	42ae      	cmp	r6, r5
 800fb54:	d007      	beq.n	800fb66 <Time_CheckTimeoutMSec+0x7a>
 800fb56:	d2f5      	bcs.n	800fb44 <Time_CheckTimeoutMSec+0x58>
 800fb58:	b002      	add	sp, #8
 800fb5a:	bd70      	pop	{r4, r5, r6, pc}
 800fb5c:	428a      	cmp	r2, r1
 800fb5e:	bf8c      	ite	hi
 800fb60:	2000      	movhi	r0, #0
 800fb62:	2001      	movls	r0, #1
 800fb64:	e7e7      	b.n	800fb36 <Time_CheckTimeoutMSec+0x4a>
 800fb66:	42a2      	cmp	r2, r4
 800fb68:	d9f1      	bls.n	800fb4e <Time_CheckTimeoutMSec+0x62>
 800fb6a:	e7eb      	b.n	800fb44 <Time_CheckTimeoutMSec+0x58>
 800fb6c:	42a2      	cmp	r2, r4
 800fb6e:	bf8c      	ite	hi
 800fb70:	2200      	movhi	r2, #0
 800fb72:	2201      	movls	r2, #1
 800fb74:	e7e5      	b.n	800fb42 <Time_CheckTimeoutMSec+0x56>
 800fb76:	428c      	cmp	r4, r1
 800fb78:	bf34      	ite	cc
 800fb7a:	2000      	movcc	r0, #0
 800fb7c:	2001      	movcs	r0, #1
 800fb7e:	b002      	add	sp, #8
 800fb80:	bd70      	pop	{r4, r5, r6, pc}
 800fb82:	bf00      	nop
 800fb84:	10624dd3 	.word	0x10624dd3
 800fb88:	000f423f 	.word	0x000f423f

0800fb8c <Time_DelayUSec>:
 800fb8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb8e:	b083      	sub	sp, #12
 800fb90:	4604      	mov	r4, r0
 800fb92:	a901      	add	r1, sp, #4
 800fb94:	4668      	mov	r0, sp
 800fb96:	f7fe f8e3 	bl	800dd60 <Timer_GetCounterValue>
 800fb9a:	4b28      	ldr	r3, [pc, #160]	@ (800fc3c <Time_DelayUSec+0xb0>)
 800fb9c:	9e00      	ldr	r6, [sp, #0]
 800fb9e:	9f01      	ldr	r7, [sp, #4]
 800fba0:	fba3 2304 	umull	r2, r3, r3, r4
 800fba4:	4a26      	ldr	r2, [pc, #152]	@ (800fc40 <Time_DelayUSec+0xb4>)
 800fba6:	0c98      	lsrs	r0, r3, #18
 800fba8:	fb02 4010 	mls	r0, r2, r0, r4
 800fbac:	eb06 4493 	add.w	r4, r6, r3, lsr #18
 800fbb0:	4b24      	ldr	r3, [pc, #144]	@ (800fc44 <Time_DelayUSec+0xb8>)
 800fbb2:	4438      	add	r0, r7
 800fbb4:	4298      	cmp	r0, r3
 800fbb6:	f5a0 2574 	sub.w	r5, r0, #999424	@ 0xf4000
 800fbba:	f104 0301 	add.w	r3, r4, #1
 800fbbe:	f5a5 7510 	sub.w	r5, r5, #576	@ 0x240
 800fbc2:	bf94      	ite	ls
 800fbc4:	4605      	movls	r5, r0
 800fbc6:	461c      	movhi	r4, r3
 800fbc8:	42af      	cmp	r7, r5
 800fbca:	bf8c      	ite	hi
 800fbcc:	2300      	movhi	r3, #0
 800fbce:	2301      	movls	r3, #1
 800fbd0:	42b4      	cmp	r4, r6
 800fbd2:	bf8c      	ite	hi
 800fbd4:	2201      	movhi	r2, #1
 800fbd6:	2200      	movls	r2, #0
 800fbd8:	bf18      	it	ne
 800fbda:	4613      	movne	r3, r2
 800fbdc:	b9a3      	cbnz	r3, 800fc08 <Time_DelayUSec+0x7c>
 800fbde:	a901      	add	r1, sp, #4
 800fbe0:	4668      	mov	r0, sp
 800fbe2:	f7fe f8bd 	bl	800dd60 <Timer_GetCounterValue>
 800fbe6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fbea:	42b3      	cmp	r3, r6
 800fbec:	d017      	beq.n	800fc1e <Time_DelayUSec+0x92>
 800fbee:	d8f6      	bhi.n	800fbde <Time_DelayUSec+0x52>
 800fbf0:	42a3      	cmp	r3, r4
 800fbf2:	d018      	beq.n	800fc26 <Time_DelayUSec+0x9a>
 800fbf4:	d811      	bhi.n	800fc1a <Time_DelayUSec+0x8e>
 800fbf6:	e7f2      	b.n	800fbde <Time_DelayUSec+0x52>
 800fbf8:	42bb      	cmp	r3, r7
 800fbfa:	d30e      	bcc.n	800fc1a <Time_DelayUSec+0x8e>
 800fbfc:	4294      	cmp	r4, r2
 800fbfe:	d016      	beq.n	800fc2e <Time_DelayUSec+0xa2>
 800fc00:	bf34      	ite	cc
 800fc02:	2301      	movcc	r3, #1
 800fc04:	2300      	movcs	r3, #0
 800fc06:	b943      	cbnz	r3, 800fc1a <Time_DelayUSec+0x8e>
 800fc08:	a901      	add	r1, sp, #4
 800fc0a:	4668      	mov	r0, sp
 800fc0c:	f7fe f8a8 	bl	800dd60 <Timer_GetCounterValue>
 800fc10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc14:	42b2      	cmp	r2, r6
 800fc16:	d0ef      	beq.n	800fbf8 <Time_DelayUSec+0x6c>
 800fc18:	d8f0      	bhi.n	800fbfc <Time_DelayUSec+0x70>
 800fc1a:	b003      	add	sp, #12
 800fc1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc1e:	4297      	cmp	r7, r2
 800fc20:	d9dd      	bls.n	800fbde <Time_DelayUSec+0x52>
 800fc22:	42a3      	cmp	r3, r4
 800fc24:	d1e6      	bne.n	800fbf4 <Time_DelayUSec+0x68>
 800fc26:	42aa      	cmp	r2, r5
 800fc28:	d3d9      	bcc.n	800fbde <Time_DelayUSec+0x52>
 800fc2a:	b003      	add	sp, #12
 800fc2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc2e:	42ab      	cmp	r3, r5
 800fc30:	bf34      	ite	cc
 800fc32:	2300      	movcc	r3, #0
 800fc34:	2301      	movcs	r3, #1
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d0e6      	beq.n	800fc08 <Time_DelayUSec+0x7c>
 800fc3a:	e7ee      	b.n	800fc1a <Time_DelayUSec+0x8e>
 800fc3c:	431bde83 	.word	0x431bde83
 800fc40:	000f4240 	.word	0x000f4240
 800fc44:	000f423f 	.word	0x000f423f

0800fc48 <Time_DelayMSec>:
 800fc48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc4a:	b083      	sub	sp, #12
 800fc4c:	4604      	mov	r4, r0
 800fc4e:	a901      	add	r1, sp, #4
 800fc50:	4668      	mov	r0, sp
 800fc52:	f7fe f885 	bl	800dd60 <Timer_GetCounterValue>
 800fc56:	4b29      	ldr	r3, [pc, #164]	@ (800fcfc <Time_DelayMSec+0xb4>)
 800fc58:	9e00      	ldr	r6, [sp, #0]
 800fc5a:	9f01      	ldr	r7, [sp, #4]
 800fc5c:	fba3 2304 	umull	r2, r3, r3, r4
 800fc60:	0998      	lsrs	r0, r3, #6
 800fc62:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800fc66:	fb02 4010 	mls	r0, r2, r0, r4
 800fc6a:	eb06 1493 	add.w	r4, r6, r3, lsr #6
 800fc6e:	4b24      	ldr	r3, [pc, #144]	@ (800fd00 <Time_DelayMSec+0xb8>)
 800fc70:	fb02 7000 	mla	r0, r2, r0, r7
 800fc74:	4298      	cmp	r0, r3
 800fc76:	f5a0 2574 	sub.w	r5, r0, #999424	@ 0xf4000
 800fc7a:	f104 0301 	add.w	r3, r4, #1
 800fc7e:	f5a5 7510 	sub.w	r5, r5, #576	@ 0x240
 800fc82:	bf94      	ite	ls
 800fc84:	4605      	movls	r5, r0
 800fc86:	461c      	movhi	r4, r3
 800fc88:	42af      	cmp	r7, r5
 800fc8a:	bf8c      	ite	hi
 800fc8c:	2300      	movhi	r3, #0
 800fc8e:	2301      	movls	r3, #1
 800fc90:	42b4      	cmp	r4, r6
 800fc92:	bf8c      	ite	hi
 800fc94:	2201      	movhi	r2, #1
 800fc96:	2200      	movls	r2, #0
 800fc98:	bf18      	it	ne
 800fc9a:	4613      	movne	r3, r2
 800fc9c:	b9a3      	cbnz	r3, 800fcc8 <Time_DelayMSec+0x80>
 800fc9e:	a901      	add	r1, sp, #4
 800fca0:	4668      	mov	r0, sp
 800fca2:	f7fe f85d 	bl	800dd60 <Timer_GetCounterValue>
 800fca6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fcaa:	42b3      	cmp	r3, r6
 800fcac:	d017      	beq.n	800fcde <Time_DelayMSec+0x96>
 800fcae:	d8f6      	bhi.n	800fc9e <Time_DelayMSec+0x56>
 800fcb0:	42a3      	cmp	r3, r4
 800fcb2:	d018      	beq.n	800fce6 <Time_DelayMSec+0x9e>
 800fcb4:	d811      	bhi.n	800fcda <Time_DelayMSec+0x92>
 800fcb6:	e7f2      	b.n	800fc9e <Time_DelayMSec+0x56>
 800fcb8:	42bb      	cmp	r3, r7
 800fcba:	d30e      	bcc.n	800fcda <Time_DelayMSec+0x92>
 800fcbc:	4294      	cmp	r4, r2
 800fcbe:	d016      	beq.n	800fcee <Time_DelayMSec+0xa6>
 800fcc0:	bf34      	ite	cc
 800fcc2:	2301      	movcc	r3, #1
 800fcc4:	2300      	movcs	r3, #0
 800fcc6:	b943      	cbnz	r3, 800fcda <Time_DelayMSec+0x92>
 800fcc8:	a901      	add	r1, sp, #4
 800fcca:	4668      	mov	r0, sp
 800fccc:	f7fe f848 	bl	800dd60 <Timer_GetCounterValue>
 800fcd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fcd4:	42b2      	cmp	r2, r6
 800fcd6:	d0ef      	beq.n	800fcb8 <Time_DelayMSec+0x70>
 800fcd8:	d8f0      	bhi.n	800fcbc <Time_DelayMSec+0x74>
 800fcda:	b003      	add	sp, #12
 800fcdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcde:	4297      	cmp	r7, r2
 800fce0:	d9dd      	bls.n	800fc9e <Time_DelayMSec+0x56>
 800fce2:	42a3      	cmp	r3, r4
 800fce4:	d1e6      	bne.n	800fcb4 <Time_DelayMSec+0x6c>
 800fce6:	42aa      	cmp	r2, r5
 800fce8:	d3d9      	bcc.n	800fc9e <Time_DelayMSec+0x56>
 800fcea:	b003      	add	sp, #12
 800fcec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcee:	42ab      	cmp	r3, r5
 800fcf0:	bf34      	ite	cc
 800fcf2:	2300      	movcc	r3, #0
 800fcf4:	2301      	movcs	r3, #1
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d0e6      	beq.n	800fcc8 <Time_DelayMSec+0x80>
 800fcfa:	e7ee      	b.n	800fcda <Time_DelayMSec+0x92>
 800fcfc:	10624dd3 	.word	0x10624dd3
 800fd00:	000f423f 	.word	0x000f423f

0800fd04 <eeprom_place_command>:
 800fd04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd06:	b083      	sub	sp, #12
 800fd08:	2500      	movs	r5, #0
 800fd0a:	460e      	mov	r6, r1
 800fd0c:	4617      	mov	r7, r2
 800fd0e:	2102      	movs	r1, #2
 800fd10:	2201      	movs	r2, #1
 800fd12:	4604      	mov	r4, r0
 800fd14:	9501      	str	r5, [sp, #4]
 800fd16:	f7fd fda5 	bl	800d864 <S2PI_WriteGpioPin>
 800fd1a:	2800      	cmp	r0, #0
 800fd1c:	f2c0 80f1 	blt.w	800ff02 <eeprom_place_command+0x1fe>
 800fd20:	2201      	movs	r2, #1
 800fd22:	4629      	mov	r1, r5
 800fd24:	4620      	mov	r0, r4
 800fd26:	f7fd fd9d 	bl	800d864 <S2PI_WriteGpioPin>
 800fd2a:	2800      	cmp	r0, #0
 800fd2c:	f2c0 80e9 	blt.w	800ff02 <eeprom_place_command+0x1fe>
 800fd30:	aa01      	add	r2, sp, #4
 800fd32:	2103      	movs	r1, #3
 800fd34:	4620      	mov	r0, r4
 800fd36:	f7fd fde1 	bl	800d8fc <S2PI_ReadGpioPin>
 800fd3a:	2800      	cmp	r0, #0
 800fd3c:	f2c0 80e1 	blt.w	800ff02 <eeprom_place_command+0x1fe>
 800fd40:	462a      	mov	r2, r5
 800fd42:	4629      	mov	r1, r5
 800fd44:	4620      	mov	r0, r4
 800fd46:	f7fd fd8d 	bl	800d864 <S2PI_WriteGpioPin>
 800fd4a:	2800      	cmp	r0, #0
 800fd4c:	f2c0 80d9 	blt.w	800ff02 <eeprom_place_command+0x1fe>
 800fd50:	4632      	mov	r2, r6
 800fd52:	2102      	movs	r1, #2
 800fd54:	4620      	mov	r0, r4
 800fd56:	f7fd fd85 	bl	800d864 <S2PI_WriteGpioPin>
 800fd5a:	2800      	cmp	r0, #0
 800fd5c:	f2c0 80d1 	blt.w	800ff02 <eeprom_place_command+0x1fe>
 800fd60:	2201      	movs	r2, #1
 800fd62:	4629      	mov	r1, r5
 800fd64:	4620      	mov	r0, r4
 800fd66:	f7fd fd7d 	bl	800d864 <S2PI_WriteGpioPin>
 800fd6a:	2800      	cmp	r0, #0
 800fd6c:	f2c0 80c9 	blt.w	800ff02 <eeprom_place_command+0x1fe>
 800fd70:	aa01      	add	r2, sp, #4
 800fd72:	2103      	movs	r1, #3
 800fd74:	4620      	mov	r0, r4
 800fd76:	f7fd fdc1 	bl	800d8fc <S2PI_ReadGpioPin>
 800fd7a:	2800      	cmp	r0, #0
 800fd7c:	f2c0 80c1 	blt.w	800ff02 <eeprom_place_command+0x1fe>
 800fd80:	462a      	mov	r2, r5
 800fd82:	4629      	mov	r1, r5
 800fd84:	4620      	mov	r0, r4
 800fd86:	f7fd fd6d 	bl	800d864 <S2PI_WriteGpioPin>
 800fd8a:	2800      	cmp	r0, #0
 800fd8c:	f2c0 80b9 	blt.w	800ff02 <eeprom_place_command+0x1fe>
 800fd90:	9b01      	ldr	r3, [sp, #4]
 800fd92:	2b01      	cmp	r3, #1
 800fd94:	f040 80b7 	bne.w	800ff06 <eeprom_place_command+0x202>
 800fd98:	f086 0501 	eor.w	r5, r6, #1
 800fd9c:	462a      	mov	r2, r5
 800fd9e:	2102      	movs	r1, #2
 800fda0:	4620      	mov	r0, r4
 800fda2:	f7fd fd5f 	bl	800d864 <S2PI_WriteGpioPin>
 800fda6:	2800      	cmp	r0, #0
 800fda8:	f2c0 80ab 	blt.w	800ff02 <eeprom_place_command+0x1fe>
 800fdac:	2201      	movs	r2, #1
 800fdae:	2100      	movs	r1, #0
 800fdb0:	4620      	mov	r0, r4
 800fdb2:	f7fd fd57 	bl	800d864 <S2PI_WriteGpioPin>
 800fdb6:	2800      	cmp	r0, #0
 800fdb8:	f2c0 80a3 	blt.w	800ff02 <eeprom_place_command+0x1fe>
 800fdbc:	aa01      	add	r2, sp, #4
 800fdbe:	2103      	movs	r1, #3
 800fdc0:	4620      	mov	r0, r4
 800fdc2:	f7fd fd9b 	bl	800d8fc <S2PI_ReadGpioPin>
 800fdc6:	2800      	cmp	r0, #0
 800fdc8:	f2c0 809b 	blt.w	800ff02 <eeprom_place_command+0x1fe>
 800fdcc:	2200      	movs	r2, #0
 800fdce:	4611      	mov	r1, r2
 800fdd0:	4620      	mov	r0, r4
 800fdd2:	f7fd fd47 	bl	800d864 <S2PI_WriteGpioPin>
 800fdd6:	2800      	cmp	r0, #0
 800fdd8:	f2c0 8093 	blt.w	800ff02 <eeprom_place_command+0x1fe>
 800fddc:	9b01      	ldr	r3, [sp, #4]
 800fdde:	429e      	cmp	r6, r3
 800fde0:	f040 8091 	bne.w	800ff06 <eeprom_place_command+0x202>
 800fde4:	08fe      	lsrs	r6, r7, #3
 800fde6:	4632      	mov	r2, r6
 800fde8:	2102      	movs	r1, #2
 800fdea:	4620      	mov	r0, r4
 800fdec:	f7fd fd3a 	bl	800d864 <S2PI_WriteGpioPin>
 800fdf0:	2800      	cmp	r0, #0
 800fdf2:	f2c0 8086 	blt.w	800ff02 <eeprom_place_command+0x1fe>
 800fdf6:	2201      	movs	r2, #1
 800fdf8:	2100      	movs	r1, #0
 800fdfa:	4620      	mov	r0, r4
 800fdfc:	f7fd fd32 	bl	800d864 <S2PI_WriteGpioPin>
 800fe00:	2800      	cmp	r0, #0
 800fe02:	db7e      	blt.n	800ff02 <eeprom_place_command+0x1fe>
 800fe04:	aa01      	add	r2, sp, #4
 800fe06:	2103      	movs	r1, #3
 800fe08:	4620      	mov	r0, r4
 800fe0a:	f7fd fd77 	bl	800d8fc <S2PI_ReadGpioPin>
 800fe0e:	2800      	cmp	r0, #0
 800fe10:	db77      	blt.n	800ff02 <eeprom_place_command+0x1fe>
 800fe12:	2200      	movs	r2, #0
 800fe14:	4611      	mov	r1, r2
 800fe16:	4620      	mov	r0, r4
 800fe18:	f7fd fd24 	bl	800d864 <S2PI_WriteGpioPin>
 800fe1c:	2800      	cmp	r0, #0
 800fe1e:	db70      	blt.n	800ff02 <eeprom_place_command+0x1fe>
 800fe20:	9b01      	ldr	r3, [sp, #4]
 800fe22:	429d      	cmp	r5, r3
 800fe24:	d16f      	bne.n	800ff06 <eeprom_place_command+0x202>
 800fe26:	f3c7 0580 	ubfx	r5, r7, #2, #1
 800fe2a:	462a      	mov	r2, r5
 800fe2c:	2102      	movs	r1, #2
 800fe2e:	4620      	mov	r0, r4
 800fe30:	f7fd fd18 	bl	800d864 <S2PI_WriteGpioPin>
 800fe34:	2800      	cmp	r0, #0
 800fe36:	db64      	blt.n	800ff02 <eeprom_place_command+0x1fe>
 800fe38:	2201      	movs	r2, #1
 800fe3a:	2100      	movs	r1, #0
 800fe3c:	4620      	mov	r0, r4
 800fe3e:	f7fd fd11 	bl	800d864 <S2PI_WriteGpioPin>
 800fe42:	2800      	cmp	r0, #0
 800fe44:	db5d      	blt.n	800ff02 <eeprom_place_command+0x1fe>
 800fe46:	aa01      	add	r2, sp, #4
 800fe48:	2103      	movs	r1, #3
 800fe4a:	4620      	mov	r0, r4
 800fe4c:	f7fd fd56 	bl	800d8fc <S2PI_ReadGpioPin>
 800fe50:	2800      	cmp	r0, #0
 800fe52:	db56      	blt.n	800ff02 <eeprom_place_command+0x1fe>
 800fe54:	2200      	movs	r2, #0
 800fe56:	4611      	mov	r1, r2
 800fe58:	4620      	mov	r0, r4
 800fe5a:	f7fd fd03 	bl	800d864 <S2PI_WriteGpioPin>
 800fe5e:	2800      	cmp	r0, #0
 800fe60:	db4f      	blt.n	800ff02 <eeprom_place_command+0x1fe>
 800fe62:	9b01      	ldr	r3, [sp, #4]
 800fe64:	429e      	cmp	r6, r3
 800fe66:	d14e      	bne.n	800ff06 <eeprom_place_command+0x202>
 800fe68:	f3c7 0640 	ubfx	r6, r7, #1, #1
 800fe6c:	4632      	mov	r2, r6
 800fe6e:	2102      	movs	r1, #2
 800fe70:	4620      	mov	r0, r4
 800fe72:	f7fd fcf7 	bl	800d864 <S2PI_WriteGpioPin>
 800fe76:	2800      	cmp	r0, #0
 800fe78:	db43      	blt.n	800ff02 <eeprom_place_command+0x1fe>
 800fe7a:	2201      	movs	r2, #1
 800fe7c:	2100      	movs	r1, #0
 800fe7e:	4620      	mov	r0, r4
 800fe80:	f7fd fcf0 	bl	800d864 <S2PI_WriteGpioPin>
 800fe84:	2800      	cmp	r0, #0
 800fe86:	db3c      	blt.n	800ff02 <eeprom_place_command+0x1fe>
 800fe88:	aa01      	add	r2, sp, #4
 800fe8a:	2103      	movs	r1, #3
 800fe8c:	4620      	mov	r0, r4
 800fe8e:	f7fd fd35 	bl	800d8fc <S2PI_ReadGpioPin>
 800fe92:	2800      	cmp	r0, #0
 800fe94:	db35      	blt.n	800ff02 <eeprom_place_command+0x1fe>
 800fe96:	2200      	movs	r2, #0
 800fe98:	4611      	mov	r1, r2
 800fe9a:	4620      	mov	r0, r4
 800fe9c:	f7fd fce2 	bl	800d864 <S2PI_WriteGpioPin>
 800fea0:	2800      	cmp	r0, #0
 800fea2:	db2e      	blt.n	800ff02 <eeprom_place_command+0x1fe>
 800fea4:	9b01      	ldr	r3, [sp, #4]
 800fea6:	429d      	cmp	r5, r3
 800fea8:	d12d      	bne.n	800ff06 <eeprom_place_command+0x202>
 800feaa:	f007 0201 	and.w	r2, r7, #1
 800feae:	2102      	movs	r1, #2
 800feb0:	4620      	mov	r0, r4
 800feb2:	f7fd fcd7 	bl	800d864 <S2PI_WriteGpioPin>
 800feb6:	2800      	cmp	r0, #0
 800feb8:	db23      	blt.n	800ff02 <eeprom_place_command+0x1fe>
 800feba:	2201      	movs	r2, #1
 800febc:	2100      	movs	r1, #0
 800febe:	4620      	mov	r0, r4
 800fec0:	f7fd fcd0 	bl	800d864 <S2PI_WriteGpioPin>
 800fec4:	2800      	cmp	r0, #0
 800fec6:	db1c      	blt.n	800ff02 <eeprom_place_command+0x1fe>
 800fec8:	aa01      	add	r2, sp, #4
 800feca:	2103      	movs	r1, #3
 800fecc:	4620      	mov	r0, r4
 800fece:	f7fd fd15 	bl	800d8fc <S2PI_ReadGpioPin>
 800fed2:	2800      	cmp	r0, #0
 800fed4:	db15      	blt.n	800ff02 <eeprom_place_command+0x1fe>
 800fed6:	2200      	movs	r2, #0
 800fed8:	4611      	mov	r1, r2
 800feda:	4620      	mov	r0, r4
 800fedc:	f7fd fcc2 	bl	800d864 <S2PI_WriteGpioPin>
 800fee0:	2800      	cmp	r0, #0
 800fee2:	db0e      	blt.n	800ff02 <eeprom_place_command+0x1fe>
 800fee4:	9b01      	ldr	r3, [sp, #4]
 800fee6:	429e      	cmp	r6, r3
 800fee8:	d10d      	bne.n	800ff06 <eeprom_place_command+0x202>
 800feea:	2201      	movs	r2, #1
 800feec:	4611      	mov	r1, r2
 800feee:	4620      	mov	r0, r4
 800fef0:	f7fd fcb8 	bl	800d864 <S2PI_WriteGpioPin>
 800fef4:	2800      	cmp	r0, #0
 800fef6:	db04      	blt.n	800ff02 <eeprom_place_command+0x1fe>
 800fef8:	2201      	movs	r2, #1
 800fefa:	2100      	movs	r1, #0
 800fefc:	4620      	mov	r0, r4
 800fefe:	f7fd fcb1 	bl	800d864 <S2PI_WriteGpioPin>
 800ff02:	b003      	add	sp, #12
 800ff04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff06:	f06f 006c 	mvn.w	r0, #108	@ 0x6c
 800ff0a:	e7fa      	b.n	800ff02 <eeprom_place_command+0x1fe>

0800ff0c <eeprom_write_ce>:
 800ff0c:	b570      	push	{r4, r5, r6, lr}
 800ff0e:	4616      	mov	r6, r2
 800ff10:	460d      	mov	r5, r1
 800ff12:	2200      	movs	r2, #0
 800ff14:	2101      	movs	r1, #1
 800ff16:	4604      	mov	r4, r0
 800ff18:	f7fd fca4 	bl	800d864 <S2PI_WriteGpioPin>
 800ff1c:	2800      	cmp	r0, #0
 800ff1e:	f2c0 80be 	blt.w	801009e <eeprom_write_ce+0x192>
 800ff22:	2200      	movs	r2, #0
 800ff24:	2102      	movs	r1, #2
 800ff26:	4620      	mov	r0, r4
 800ff28:	f7fd fc9c 	bl	800d864 <S2PI_WriteGpioPin>
 800ff2c:	2800      	cmp	r0, #0
 800ff2e:	f2c0 80b6 	blt.w	801009e <eeprom_write_ce+0x192>
 800ff32:	2200      	movs	r2, #0
 800ff34:	4611      	mov	r1, r2
 800ff36:	4620      	mov	r0, r4
 800ff38:	f7fd fc94 	bl	800d864 <S2PI_WriteGpioPin>
 800ff3c:	2800      	cmp	r0, #0
 800ff3e:	f2c0 80ae 	blt.w	801009e <eeprom_write_ce+0x192>
 800ff42:	2201      	movs	r2, #1
 800ff44:	2100      	movs	r1, #0
 800ff46:	4620      	mov	r0, r4
 800ff48:	f7fd fc8c 	bl	800d864 <S2PI_WriteGpioPin>
 800ff4c:	2800      	cmp	r0, #0
 800ff4e:	f2c0 80a6 	blt.w	801009e <eeprom_write_ce+0x192>
 800ff52:	2200      	movs	r2, #0
 800ff54:	2102      	movs	r1, #2
 800ff56:	4620      	mov	r0, r4
 800ff58:	f7fd fc84 	bl	800d864 <S2PI_WriteGpioPin>
 800ff5c:	2800      	cmp	r0, #0
 800ff5e:	f2c0 809e 	blt.w	801009e <eeprom_write_ce+0x192>
 800ff62:	2200      	movs	r2, #0
 800ff64:	4611      	mov	r1, r2
 800ff66:	4620      	mov	r0, r4
 800ff68:	f7fd fc7c 	bl	800d864 <S2PI_WriteGpioPin>
 800ff6c:	2800      	cmp	r0, #0
 800ff6e:	f2c0 8096 	blt.w	801009e <eeprom_write_ce+0x192>
 800ff72:	2201      	movs	r2, #1
 800ff74:	2100      	movs	r1, #0
 800ff76:	4620      	mov	r0, r4
 800ff78:	f7fd fc74 	bl	800d864 <S2PI_WriteGpioPin>
 800ff7c:	2800      	cmp	r0, #0
 800ff7e:	f2c0 808e 	blt.w	801009e <eeprom_write_ce+0x192>
 800ff82:	2201      	movs	r2, #1
 800ff84:	2102      	movs	r1, #2
 800ff86:	4620      	mov	r0, r4
 800ff88:	f7fd fc6c 	bl	800d864 <S2PI_WriteGpioPin>
 800ff8c:	2800      	cmp	r0, #0
 800ff8e:	f2c0 8086 	blt.w	801009e <eeprom_write_ce+0x192>
 800ff92:	2200      	movs	r2, #0
 800ff94:	4611      	mov	r1, r2
 800ff96:	4620      	mov	r0, r4
 800ff98:	f7fd fc64 	bl	800d864 <S2PI_WriteGpioPin>
 800ff9c:	2800      	cmp	r0, #0
 800ff9e:	db7e      	blt.n	801009e <eeprom_write_ce+0x192>
 800ffa0:	2201      	movs	r2, #1
 800ffa2:	2100      	movs	r1, #0
 800ffa4:	4620      	mov	r0, r4
 800ffa6:	f7fd fc5d 	bl	800d864 <S2PI_WriteGpioPin>
 800ffaa:	2800      	cmp	r0, #0
 800ffac:	db77      	blt.n	801009e <eeprom_write_ce+0x192>
 800ffae:	2200      	movs	r2, #0
 800ffb0:	2102      	movs	r1, #2
 800ffb2:	4620      	mov	r0, r4
 800ffb4:	f7fd fc56 	bl	800d864 <S2PI_WriteGpioPin>
 800ffb8:	2800      	cmp	r0, #0
 800ffba:	db70      	blt.n	801009e <eeprom_write_ce+0x192>
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	4611      	mov	r1, r2
 800ffc0:	4620      	mov	r0, r4
 800ffc2:	f7fd fc4f 	bl	800d864 <S2PI_WriteGpioPin>
 800ffc6:	2800      	cmp	r0, #0
 800ffc8:	db69      	blt.n	801009e <eeprom_write_ce+0x192>
 800ffca:	2201      	movs	r2, #1
 800ffcc:	2100      	movs	r1, #0
 800ffce:	4620      	mov	r0, r4
 800ffd0:	f7fd fc48 	bl	800d864 <S2PI_WriteGpioPin>
 800ffd4:	2800      	cmp	r0, #0
 800ffd6:	db62      	blt.n	801009e <eeprom_write_ce+0x192>
 800ffd8:	2201      	movs	r2, #1
 800ffda:	2102      	movs	r1, #2
 800ffdc:	4620      	mov	r0, r4
 800ffde:	f7fd fc41 	bl	800d864 <S2PI_WriteGpioPin>
 800ffe2:	2800      	cmp	r0, #0
 800ffe4:	db5b      	blt.n	801009e <eeprom_write_ce+0x192>
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	4611      	mov	r1, r2
 800ffea:	4620      	mov	r0, r4
 800ffec:	f7fd fc3a 	bl	800d864 <S2PI_WriteGpioPin>
 800fff0:	2800      	cmp	r0, #0
 800fff2:	db54      	blt.n	801009e <eeprom_write_ce+0x192>
 800fff4:	2201      	movs	r2, #1
 800fff6:	2100      	movs	r1, #0
 800fff8:	4620      	mov	r0, r4
 800fffa:	f7fd fc33 	bl	800d864 <S2PI_WriteGpioPin>
 800fffe:	2800      	cmp	r0, #0
 8010000:	db4d      	blt.n	801009e <eeprom_write_ce+0x192>
 8010002:	2201      	movs	r2, #1
 8010004:	2102      	movs	r1, #2
 8010006:	4620      	mov	r0, r4
 8010008:	f7fd fc2c 	bl	800d864 <S2PI_WriteGpioPin>
 801000c:	2800      	cmp	r0, #0
 801000e:	db46      	blt.n	801009e <eeprom_write_ce+0x192>
 8010010:	2200      	movs	r2, #0
 8010012:	4611      	mov	r1, r2
 8010014:	4620      	mov	r0, r4
 8010016:	f7fd fc25 	bl	800d864 <S2PI_WriteGpioPin>
 801001a:	2800      	cmp	r0, #0
 801001c:	db3f      	blt.n	801009e <eeprom_write_ce+0x192>
 801001e:	2201      	movs	r2, #1
 8010020:	2100      	movs	r1, #0
 8010022:	4620      	mov	r0, r4
 8010024:	f7fd fc1e 	bl	800d864 <S2PI_WriteGpioPin>
 8010028:	2800      	cmp	r0, #0
 801002a:	db38      	blt.n	801009e <eeprom_write_ce+0x192>
 801002c:	f085 0201 	eor.w	r2, r5, #1
 8010030:	2102      	movs	r1, #2
 8010032:	4620      	mov	r0, r4
 8010034:	f7fd fc16 	bl	800d864 <S2PI_WriteGpioPin>
 8010038:	2800      	cmp	r0, #0
 801003a:	db30      	blt.n	801009e <eeprom_write_ce+0x192>
 801003c:	2200      	movs	r2, #0
 801003e:	4611      	mov	r1, r2
 8010040:	4620      	mov	r0, r4
 8010042:	f7fd fc0f 	bl	800d864 <S2PI_WriteGpioPin>
 8010046:	2800      	cmp	r0, #0
 8010048:	db29      	blt.n	801009e <eeprom_write_ce+0x192>
 801004a:	2201      	movs	r2, #1
 801004c:	2100      	movs	r1, #0
 801004e:	4620      	mov	r0, r4
 8010050:	f7fd fc08 	bl	800d864 <S2PI_WriteGpioPin>
 8010054:	2800      	cmp	r0, #0
 8010056:	db22      	blt.n	801009e <eeprom_write_ce+0x192>
 8010058:	4632      	mov	r2, r6
 801005a:	2102      	movs	r1, #2
 801005c:	4620      	mov	r0, r4
 801005e:	f7fd fc01 	bl	800d864 <S2PI_WriteGpioPin>
 8010062:	2800      	cmp	r0, #0
 8010064:	db1b      	blt.n	801009e <eeprom_write_ce+0x192>
 8010066:	2200      	movs	r2, #0
 8010068:	4611      	mov	r1, r2
 801006a:	4620      	mov	r0, r4
 801006c:	f7fd fbfa 	bl	800d864 <S2PI_WriteGpioPin>
 8010070:	2800      	cmp	r0, #0
 8010072:	db14      	blt.n	801009e <eeprom_write_ce+0x192>
 8010074:	2201      	movs	r2, #1
 8010076:	2100      	movs	r1, #0
 8010078:	4620      	mov	r0, r4
 801007a:	f7fd fbf3 	bl	800d864 <S2PI_WriteGpioPin>
 801007e:	2800      	cmp	r0, #0
 8010080:	db0d      	blt.n	801009e <eeprom_write_ce+0x192>
 8010082:	2200      	movs	r2, #0
 8010084:	2102      	movs	r1, #2
 8010086:	4620      	mov	r0, r4
 8010088:	f7fd fbec 	bl	800d864 <S2PI_WriteGpioPin>
 801008c:	2800      	cmp	r0, #0
 801008e:	db06      	blt.n	801009e <eeprom_write_ce+0x192>
 8010090:	2200      	movs	r2, #0
 8010092:	4620      	mov	r0, r4
 8010094:	4611      	mov	r1, r2
 8010096:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801009a:	f7fd bbe3 	b.w	800d864 <S2PI_WriteGpioPin>
 801009e:	bd70      	pop	{r4, r5, r6, pc}

080100a0 <EEPROM_Read>:
 80100a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100a2:	b083      	sub	sp, #12
 80100a4:	4605      	mov	r5, r0
 80100a6:	460e      	mov	r6, r1
 80100a8:	4617      	mov	r7, r2
 80100aa:	f7fd fb93 	bl	800d7d4 <S2PI_CaptureGpioControl>
 80100ae:	1e04      	subs	r4, r0, #0
 80100b0:	db70      	blt.n	8010194 <EEPROM_Read+0xf4>
 80100b2:	2201      	movs	r2, #1
 80100b4:	4611      	mov	r1, r2
 80100b6:	4628      	mov	r0, r5
 80100b8:	f7fd fbd4 	bl	800d864 <S2PI_WriteGpioPin>
 80100bc:	1e04      	subs	r4, r0, #0
 80100be:	db66      	blt.n	801018e <EEPROM_Read+0xee>
 80100c0:	2201      	movs	r2, #1
 80100c2:	2102      	movs	r1, #2
 80100c4:	4628      	mov	r0, r5
 80100c6:	f7fd fbcd 	bl	800d864 <S2PI_WriteGpioPin>
 80100ca:	1e04      	subs	r4, r0, #0
 80100cc:	db5f      	blt.n	801018e <EEPROM_Read+0xee>
 80100ce:	2201      	movs	r2, #1
 80100d0:	2100      	movs	r1, #0
 80100d2:	4628      	mov	r0, r5
 80100d4:	f7fd fbc6 	bl	800d864 <S2PI_WriteGpioPin>
 80100d8:	1e04      	subs	r4, r0, #0
 80100da:	db58      	blt.n	801018e <EEPROM_Read+0xee>
 80100dc:	2200      	movs	r2, #0
 80100de:	2101      	movs	r1, #1
 80100e0:	4628      	mov	r0, r5
 80100e2:	f7ff ff13 	bl	800ff0c <eeprom_write_ce>
 80100e6:	1e04      	subs	r4, r0, #0
 80100e8:	db51      	blt.n	801018e <EEPROM_Read+0xee>
 80100ea:	f006 020f 	and.w	r2, r6, #15
 80100ee:	2101      	movs	r1, #1
 80100f0:	4628      	mov	r0, r5
 80100f2:	f7ff fe07 	bl	800fd04 <eeprom_place_command>
 80100f6:	1e04      	subs	r4, r0, #0
 80100f8:	db49      	blt.n	801018e <EEPROM_Read+0xee>
 80100fa:	2200      	movs	r2, #0
 80100fc:	2101      	movs	r1, #1
 80100fe:	4628      	mov	r0, r5
 8010100:	f7ff ff04 	bl	800ff0c <eeprom_write_ce>
 8010104:	1e04      	subs	r4, r0, #0
 8010106:	db42      	blt.n	801018e <EEPROM_Read+0xee>
 8010108:	2201      	movs	r2, #1
 801010a:	4611      	mov	r1, r2
 801010c:	4628      	mov	r0, r5
 801010e:	f7fd fba9 	bl	800d864 <S2PI_WriteGpioPin>
 8010112:	1e04      	subs	r4, r0, #0
 8010114:	db3b      	blt.n	801018e <EEPROM_Read+0xee>
 8010116:	2201      	movs	r2, #1
 8010118:	2100      	movs	r1, #0
 801011a:	4628      	mov	r0, r5
 801011c:	f7fd fba2 	bl	800d864 <S2PI_WriteGpioPin>
 8010120:	1e04      	subs	r4, r0, #0
 8010122:	db34      	blt.n	801018e <EEPROM_Read+0xee>
 8010124:	2201      	movs	r2, #1
 8010126:	2100      	movs	r1, #0
 8010128:	4628      	mov	r0, r5
 801012a:	f7ff feef 	bl	800ff0c <eeprom_write_ce>
 801012e:	1e04      	subs	r4, r0, #0
 8010130:	db2d      	blt.n	801018e <EEPROM_Read+0xee>
 8010132:	2300      	movs	r3, #0
 8010134:	9301      	str	r3, [sp, #4]
 8010136:	703b      	strb	r3, [r7, #0]
 8010138:	2607      	movs	r6, #7
 801013a:	e01d      	b.n	8010178 <EEPROM_Read+0xd8>
 801013c:	4628      	mov	r0, r5
 801013e:	f7fd fb91 	bl	800d864 <S2PI_WriteGpioPin>
 8010142:	1e04      	subs	r4, r0, #0
 8010144:	aa01      	add	r2, sp, #4
 8010146:	db22      	blt.n	801018e <EEPROM_Read+0xee>
 8010148:	2103      	movs	r1, #3
 801014a:	4628      	mov	r0, r5
 801014c:	f7fd fbd6 	bl	800d8fc <S2PI_ReadGpioPin>
 8010150:	1e04      	subs	r4, r0, #0
 8010152:	f04f 0200 	mov.w	r2, #0
 8010156:	db1a      	blt.n	801018e <EEPROM_Read+0xee>
 8010158:	4611      	mov	r1, r2
 801015a:	4628      	mov	r0, r5
 801015c:	f7fd fb82 	bl	800d864 <S2PI_WriteGpioPin>
 8010160:	1e04      	subs	r4, r0, #0
 8010162:	db14      	blt.n	801018e <EEPROM_Read+0xee>
 8010164:	9b01      	ldr	r3, [sp, #4]
 8010166:	783a      	ldrb	r2, [r7, #0]
 8010168:	f003 0301 	and.w	r3, r3, #1
 801016c:	40b3      	lsls	r3, r6
 801016e:	4313      	orrs	r3, r2
 8010170:	3e01      	subs	r6, #1
 8010172:	703b      	strb	r3, [r7, #0]
 8010174:	1c73      	adds	r3, r6, #1
 8010176:	d010      	beq.n	801019a <EEPROM_Read+0xfa>
 8010178:	2200      	movs	r2, #0
 801017a:	2102      	movs	r1, #2
 801017c:	4628      	mov	r0, r5
 801017e:	f7fd fb71 	bl	800d864 <S2PI_WriteGpioPin>
 8010182:	1e04      	subs	r4, r0, #0
 8010184:	f04f 0201 	mov.w	r2, #1
 8010188:	f04f 0100 	mov.w	r1, #0
 801018c:	dad6      	bge.n	801013c <EEPROM_Read+0x9c>
 801018e:	4628      	mov	r0, r5
 8010190:	f7fd fb48 	bl	800d824 <S2PI_ReleaseGpioControl>
 8010194:	4620      	mov	r0, r4
 8010196:	b003      	add	sp, #12
 8010198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801019a:	2201      	movs	r2, #1
 801019c:	4611      	mov	r1, r2
 801019e:	4628      	mov	r0, r5
 80101a0:	f7fd fb60 	bl	800d864 <S2PI_WriteGpioPin>
 80101a4:	1e04      	subs	r4, r0, #0
 80101a6:	dbf2      	blt.n	801018e <EEPROM_Read+0xee>
 80101a8:	2201      	movs	r2, #1
 80101aa:	2100      	movs	r1, #0
 80101ac:	4628      	mov	r0, r5
 80101ae:	f7fd fb59 	bl	800d864 <S2PI_WriteGpioPin>
 80101b2:	1e04      	subs	r4, r0, #0
 80101b4:	dbeb      	blt.n	801018e <EEPROM_Read+0xee>
 80101b6:	2200      	movs	r2, #0
 80101b8:	2101      	movs	r1, #1
 80101ba:	4628      	mov	r0, r5
 80101bc:	f7ff fea6 	bl	800ff0c <eeprom_write_ce>
 80101c0:	1e04      	subs	r4, r0, #0
 80101c2:	dbe4      	blt.n	801018e <EEPROM_Read+0xee>
 80101c4:	2201      	movs	r2, #1
 80101c6:	4611      	mov	r1, r2
 80101c8:	4628      	mov	r0, r5
 80101ca:	f7fd fb4b 	bl	800d864 <S2PI_WriteGpioPin>
 80101ce:	1e04      	subs	r4, r0, #0
 80101d0:	dbdd      	blt.n	801018e <EEPROM_Read+0xee>
 80101d2:	2201      	movs	r2, #1
 80101d4:	2102      	movs	r1, #2
 80101d6:	4628      	mov	r0, r5
 80101d8:	f7fd fb44 	bl	800d864 <S2PI_WriteGpioPin>
 80101dc:	1e04      	subs	r4, r0, #0
 80101de:	dbd6      	blt.n	801018e <EEPROM_Read+0xee>
 80101e0:	2201      	movs	r2, #1
 80101e2:	2100      	movs	r1, #0
 80101e4:	4628      	mov	r0, r5
 80101e6:	f7fd fb3d 	bl	800d864 <S2PI_WriteGpioPin>
 80101ea:	4603      	mov	r3, r0
 80101ec:	4628      	mov	r0, r5
 80101ee:	461d      	mov	r5, r3
 80101f0:	f7fd fb18 	bl	800d824 <S2PI_ReleaseGpioControl>
 80101f4:	ea15 0425 	ands.w	r4, r5, r5, asr #32
 80101f8:	bf38      	it	cc
 80101fa:	4604      	movcc	r4, r0
 80101fc:	4620      	mov	r0, r4
 80101fe:	b003      	add	sp, #12
 8010200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010202:	bf00      	nop

08010204 <EEPROM_ReadChipId>:
 8010204:	7b43      	ldrb	r3, [r0, #13]
 8010206:	7b01      	ldrb	r1, [r0, #12]
 8010208:	7b82      	ldrb	r2, [r0, #14]
 801020a:	7bc0      	ldrb	r0, [r0, #15]
 801020c:	021b      	lsls	r3, r3, #8
 801020e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010212:	4313      	orrs	r3, r2
 8010214:	f3c3 0314 	ubfx	r3, r3, #0, #21
 8010218:	09c0      	lsrs	r0, r0, #7
 801021a:	ea43 5040 	orr.w	r0, r3, r0, lsl #21
 801021e:	4770      	bx	lr

08010220 <EEPROM_ReadModule>:
 8010220:	b500      	push	{lr}
 8010222:	f8b0 200b 	ldrh.w	r2, [r0, #11]
 8010226:	f890 e00c 	ldrb.w	lr, [r0, #12]
 801022a:	7bc1      	ldrb	r1, [r0, #15]
 801022c:	7b43      	ldrb	r3, [r0, #13]
 801022e:	f890 c00e 	ldrb.w	ip, [r0, #14]
 8010232:	ba52      	rev16	r2, r2
 8010234:	f412 6ffc 	tst.w	r2, #2016	@ 0x7e0
 8010238:	f3c2 1045 	ubfx	r0, r2, #5, #6
 801023c:	d002      	beq.n	8010244 <EEPROM_ReadModule+0x24>
 801023e:	b2c0      	uxtb	r0, r0
 8010240:	f85d fb04 	ldr.w	pc, [sp], #4
 8010244:	021b      	lsls	r3, r3, #8
 8010246:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 801024a:	ea40 000c 	orr.w	r0, r0, ip
 801024e:	09c9      	lsrs	r1, r1, #7
 8010250:	f3c0 0014 	ubfx	r0, r0, #0, #21
 8010254:	ea40 5041 	orr.w	r0, r0, r1, lsl #21
 8010258:	f2a0 3003 	subw	r0, r0, #771	@ 0x303
 801025c:	f5b0 7fe3 	cmp.w	r0, #454	@ 0x1c6
 8010260:	bf8c      	ite	hi
 8010262:	2000      	movhi	r0, #0
 8010264:	2001      	movls	r0, #1
 8010266:	f85d fb04 	ldr.w	pc, [sp], #4
 801026a:	bf00      	nop

0801026c <EEPROM_Decode>:
 801026c:	2300      	movs	r3, #0
 801026e:	6003      	str	r3, [r0, #0]
 8010270:	6043      	str	r3, [r0, #4]
 8010272:	6083      	str	r3, [r0, #8]
 8010274:	60c3      	str	r3, [r0, #12]
 8010276:	6103      	str	r3, [r0, #16]
 8010278:	8283      	strh	r3, [r0, #20]
 801027a:	f8b1 300b 	ldrh.w	r3, [r1, #11]
 801027e:	ba5b      	rev16	r3, r3
 8010280:	f413 6ffc 	tst.w	r3, #2016	@ 0x7e0
 8010284:	f3c3 1245 	ubfx	r2, r3, #5, #6
 8010288:	f040 808d 	bne.w	80103a6 <EEPROM_Decode+0x13a>
 801028c:	7b4b      	ldrb	r3, [r1, #13]
 801028e:	f891 c00c 	ldrb.w	ip, [r1, #12]
 8010292:	021b      	lsls	r3, r3, #8
 8010294:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8010298:	f891 c00e 	ldrb.w	ip, [r1, #14]
 801029c:	ea43 030c 	orr.w	r3, r3, ip
 80102a0:	f891 c00f 	ldrb.w	ip, [r1, #15]
 80102a4:	f3c3 0314 	ubfx	r3, r3, #0, #21
 80102a8:	ea4f 1cdc 	mov.w	ip, ip, lsr #7
 80102ac:	ea43 534c 	orr.w	r3, r3, ip, lsl #21
 80102b0:	f2a3 3303 	subw	r3, r3, #771	@ 0x303
 80102b4:	f5b3 7fe3 	cmp.w	r3, #454	@ 0x1c6
 80102b8:	f200 8129 	bhi.w	801050e <EEPROM_Decode+0x2a2>
 80102bc:	2301      	movs	r3, #1
 80102be:	7003      	strb	r3, [r0, #0]
 80102c0:	780a      	ldrb	r2, [r1, #0]
 80102c2:	08d3      	lsrs	r3, r2, #3
 80102c4:	09d2      	lsrs	r2, r2, #7
 80102c6:	bf18      	it	ne
 80102c8:	f043 03e0 	orrne.w	r3, r3, #224	@ 0xe0
 80102cc:	7043      	strb	r3, [r0, #1]
 80102ce:	880b      	ldrh	r3, [r1, #0]
 80102d0:	ba5b      	rev16	r3, r3
 80102d2:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80102d6:	bf14      	ite	ne
 80102d8:	22f0      	movne	r2, #240	@ 0xf0
 80102da:	2200      	moveq	r2, #0
 80102dc:	f3c3 13c3 	ubfx	r3, r3, #7, #4
 80102e0:	4313      	orrs	r3, r2
 80102e2:	7083      	strb	r3, [r0, #2]
 80102e4:	784b      	ldrb	r3, [r1, #1]
 80102e6:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80102ea:	bf14      	ite	ne
 80102ec:	22e0      	movne	r2, #224	@ 0xe0
 80102ee:	2200      	moveq	r2, #0
 80102f0:	f3c3 0384 	ubfx	r3, r3, #2, #5
 80102f4:	4313      	orrs	r3, r2
 80102f6:	70c3      	strb	r3, [r0, #3]
 80102f8:	f8b1 3001 	ldrh.w	r3, [r1, #1]
 80102fc:	ba5b      	rev16	r3, r3
 80102fe:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8010302:	bf14      	ite	ne
 8010304:	f44f 427e 	movne.w	r2, #65024	@ 0xfe00
 8010308:	2200      	moveq	r2, #0
 801030a:	f3c3 0348 	ubfx	r3, r3, #1, #9
 801030e:	4313      	orrs	r3, r2
 8010310:	8083      	strh	r3, [r0, #4]
 8010312:	884b      	ldrh	r3, [r1, #2]
 8010314:	ba5b      	rev16	r3, r3
 8010316:	f3c3 1382 	ubfx	r3, r3, #6, #3
 801031a:	7183      	strb	r3, [r0, #6]
 801031c:	f8b1 3003 	ldrh.w	r3, [r1, #3]
 8010320:	ba5b      	rev16	r3, r3
 8010322:	f3c3 1389 	ubfx	r3, r3, #6, #10
 8010326:	71c3      	strb	r3, [r0, #7]
 8010328:	794b      	ldrb	r3, [r1, #5]
 801032a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 801032e:	bf14      	ite	ne
 8010330:	22f8      	movne	r2, #248	@ 0xf8
 8010332:	2200      	moveq	r2, #0
 8010334:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8010338:	4313      	orrs	r3, r2
 801033a:	7243      	strb	r3, [r0, #9]
 801033c:	f8b1 3005 	ldrh.w	r3, [r1, #5]
 8010340:	ba5b      	rev16	r3, r3
 8010342:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8010346:	bf14      	ite	ne
 8010348:	22e0      	movne	r2, #224	@ 0xe0
 801034a:	2200      	moveq	r2, #0
 801034c:	f3c3 13c4 	ubfx	r3, r3, #7, #5
 8010350:	4313      	orrs	r3, r2
 8010352:	7283      	strb	r3, [r0, #10]
 8010354:	798b      	ldrb	r3, [r1, #6]
 8010356:	f013 0f40 	tst.w	r3, #64	@ 0x40
 801035a:	bf14      	ite	ne
 801035c:	22f0      	movne	r2, #240	@ 0xf0
 801035e:	2200      	moveq	r2, #0
 8010360:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8010364:	4313      	orrs	r3, r2
 8010366:	72c3      	strb	r3, [r0, #11]
 8010368:	88cb      	ldrh	r3, [r1, #6]
 801036a:	ba5b      	rev16	r3, r3
 801036c:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8010370:	7303      	strb	r3, [r0, #12]
 8010372:	f8b1 3007 	ldrh.w	r3, [r1, #7]
 8010376:	ba5b      	rev16	r3, r3
 8010378:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 801037c:	bf14      	ite	ne
 801037e:	22e0      	movne	r2, #224	@ 0xe0
 8010380:	2200      	moveq	r2, #0
 8010382:	f3c3 1384 	ubfx	r3, r3, #6, #5
 8010386:	4313      	orrs	r3, r2
 8010388:	7343      	strb	r3, [r0, #13]
 801038a:	890a      	ldrh	r2, [r1, #8]
 801038c:	ba52      	rev16	r2, r2
 801038e:	f3c2 12c7 	ubfx	r2, r2, #7, #8
 8010392:	0051      	lsls	r1, r2, #1
 8010394:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 8010398:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801039c:	2300      	movs	r3, #0
 801039e:	430a      	orrs	r2, r1
 80103a0:	7402      	strb	r2, [r0, #16]
 80103a2:	4618      	mov	r0, r3
 80103a4:	4770      	bx	lr
 80103a6:	b2d3      	uxtb	r3, r2
 80103a8:	2a02      	cmp	r2, #2
 80103aa:	7003      	strb	r3, [r0, #0]
 80103ac:	f000 80b8 	beq.w	8010520 <EEPROM_Decode+0x2b4>
 80103b0:	2b02      	cmp	r3, #2
 80103b2:	f240 80af 	bls.w	8010514 <EEPROM_Decode+0x2a8>
 80103b6:	3b03      	subs	r3, #3
 80103b8:	2b04      	cmp	r3, #4
 80103ba:	f200 80ae 	bhi.w	801051a <EEPROM_Decode+0x2ae>
 80103be:	780a      	ldrb	r2, [r1, #0]
 80103c0:	08d3      	lsrs	r3, r2, #3
 80103c2:	09d2      	lsrs	r2, r2, #7
 80103c4:	bf18      	it	ne
 80103c6:	f043 03e0 	orrne.w	r3, r3, #224	@ 0xe0
 80103ca:	7043      	strb	r3, [r0, #1]
 80103cc:	880b      	ldrh	r3, [r1, #0]
 80103ce:	ba5b      	rev16	r3, r3
 80103d0:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80103d4:	bf14      	ite	ne
 80103d6:	22f0      	movne	r2, #240	@ 0xf0
 80103d8:	2200      	moveq	r2, #0
 80103da:	f3c3 13c3 	ubfx	r3, r3, #7, #4
 80103de:	4313      	orrs	r3, r2
 80103e0:	7083      	strb	r3, [r0, #2]
 80103e2:	784b      	ldrb	r3, [r1, #1]
 80103e4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80103e8:	bf14      	ite	ne
 80103ea:	22e0      	movne	r2, #224	@ 0xe0
 80103ec:	2200      	moveq	r2, #0
 80103ee:	f3c3 0384 	ubfx	r3, r3, #2, #5
 80103f2:	4313      	orrs	r3, r2
 80103f4:	70c3      	strb	r3, [r0, #3]
 80103f6:	f8b1 3001 	ldrh.w	r3, [r1, #1]
 80103fa:	ba5b      	rev16	r3, r3
 80103fc:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8010400:	bf14      	ite	ne
 8010402:	f44f 427e 	movne.w	r2, #65024	@ 0xfe00
 8010406:	2200      	moveq	r2, #0
 8010408:	f3c3 0348 	ubfx	r3, r3, #1, #9
 801040c:	4313      	orrs	r3, r2
 801040e:	8083      	strh	r3, [r0, #4]
 8010410:	884b      	ldrh	r3, [r1, #2]
 8010412:	ba5b      	rev16	r3, r3
 8010414:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8010418:	7183      	strb	r3, [r0, #6]
 801041a:	f8b1 3003 	ldrh.w	r3, [r1, #3]
 801041e:	ba5b      	rev16	r3, r3
 8010420:	f3c3 1389 	ubfx	r3, r3, #6, #10
 8010424:	71c3      	strb	r3, [r0, #7]
 8010426:	790b      	ldrb	r3, [r1, #4]
 8010428:	f013 0f20 	tst.w	r3, #32
 801042c:	bf14      	ite	ne
 801042e:	22f8      	movne	r2, #248	@ 0xf8
 8010430:	2200      	moveq	r2, #0
 8010432:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8010436:	4313      	orrs	r3, r2
 8010438:	7203      	strb	r3, [r0, #8]
 801043a:	888b      	ldrh	r3, [r1, #4]
 801043c:	ba5b      	rev16	r3, r3
 801043e:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8010442:	bf14      	ite	ne
 8010444:	22e0      	movne	r2, #224	@ 0xe0
 8010446:	2200      	moveq	r2, #0
 8010448:	f3c3 1384 	ubfx	r3, r3, #6, #5
 801044c:	4313      	orrs	r3, r2
 801044e:	73c3      	strb	r3, [r0, #15]
 8010450:	794b      	ldrb	r3, [r1, #5]
 8010452:	f013 0f20 	tst.w	r3, #32
 8010456:	bf14      	ite	ne
 8010458:	22f8      	movne	r2, #248	@ 0xf8
 801045a:	2200      	moveq	r2, #0
 801045c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8010460:	4313      	orrs	r3, r2
 8010462:	7243      	strb	r3, [r0, #9]
 8010464:	f8b1 3005 	ldrh.w	r3, [r1, #5]
 8010468:	ba5b      	rev16	r3, r3
 801046a:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 801046e:	bf14      	ite	ne
 8010470:	22e0      	movne	r2, #224	@ 0xe0
 8010472:	2200      	moveq	r2, #0
 8010474:	f3c3 1384 	ubfx	r3, r3, #6, #5
 8010478:	4313      	orrs	r3, r2
 801047a:	7283      	strb	r3, [r0, #10]
 801047c:	798b      	ldrb	r3, [r1, #6]
 801047e:	f013 0f20 	tst.w	r3, #32
 8010482:	bf14      	ite	ne
 8010484:	22f0      	movne	r2, #240	@ 0xf0
 8010486:	2200      	moveq	r2, #0
 8010488:	f3c3 0383 	ubfx	r3, r3, #2, #4
 801048c:	4313      	orrs	r3, r2
 801048e:	72c3      	strb	r3, [r0, #11]
 8010490:	88cb      	ldrh	r3, [r1, #6]
 8010492:	ba5b      	rev16	r3, r3
 8010494:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8010498:	bf14      	ite	ne
 801049a:	22c0      	movne	r2, #192	@ 0xc0
 801049c:	2200      	moveq	r2, #0
 801049e:	f3c3 1305 	ubfx	r3, r3, #4, #6
 80104a2:	4313      	orrs	r3, r2
 80104a4:	7303      	strb	r3, [r0, #12]
 80104a6:	f8b1 3007 	ldrh.w	r3, [r1, #7]
 80104aa:	ba5b      	rev16	r3, r3
 80104ac:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80104b0:	bf14      	ite	ne
 80104b2:	22c0      	movne	r2, #192	@ 0xc0
 80104b4:	2200      	moveq	r2, #0
 80104b6:	f3c3 1385 	ubfx	r3, r3, #6, #6
 80104ba:	4313      	orrs	r3, r2
 80104bc:	7343      	strb	r3, [r0, #13]
 80104be:	890b      	ldrh	r3, [r1, #8]
 80104c0:	ba5b      	rev16	r3, r3
 80104c2:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 80104c6:	005a      	lsls	r2, r3, #1
 80104c8:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 80104cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80104d0:	4313      	orrs	r3, r2
 80104d2:	7403      	strb	r3, [r0, #16]
 80104d4:	f8b1 3009 	ldrh.w	r3, [r1, #9]
 80104d8:	ba5b      	rev16	r3, r3
 80104da:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 80104de:	7383      	strb	r3, [r0, #14]
 80104e0:	7a8a      	ldrb	r2, [r1, #10]
 80104e2:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80104e6:	bf14      	ite	ne
 80104e8:	23c0      	movne	r3, #192	@ 0xc0
 80104ea:	2300      	moveq	r3, #0
 80104ec:	f3c2 0245 	ubfx	r2, r2, #1, #6
 80104f0:	4313      	orrs	r3, r2
 80104f2:	b25b      	sxtb	r3, r3
 80104f4:	8243      	strh	r3, [r0, #18]
 80104f6:	894b      	ldrh	r3, [r1, #10]
 80104f8:	ba5b      	rev16	r3, r3
 80104fa:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80104fe:	f64f 72c0 	movw	r2, #65472	@ 0xffc0
 8010502:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8010506:	bf08      	it	eq
 8010508:	2200      	moveq	r2, #0
 801050a:	4313      	orrs	r3, r2
 801050c:	8283      	strh	r3, [r0, #20]
 801050e:	2300      	movs	r3, #0
 8010510:	4618      	mov	r0, r3
 8010512:	4770      	bx	lr
 8010514:	2b01      	cmp	r3, #1
 8010516:	f43f aed3 	beq.w	80102c0 <EEPROM_Decode+0x54>
 801051a:	236e      	movs	r3, #110	@ 0x6e
 801051c:	4618      	mov	r0, r3
 801051e:	4770      	bx	lr
 8010520:	780a      	ldrb	r2, [r1, #0]
 8010522:	08d3      	lsrs	r3, r2, #3
 8010524:	09d2      	lsrs	r2, r2, #7
 8010526:	bf18      	it	ne
 8010528:	f043 03e0 	orrne.w	r3, r3, #224	@ 0xe0
 801052c:	7043      	strb	r3, [r0, #1]
 801052e:	880b      	ldrh	r3, [r1, #0]
 8010530:	ba5b      	rev16	r3, r3
 8010532:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8010536:	bf14      	ite	ne
 8010538:	22f0      	movne	r2, #240	@ 0xf0
 801053a:	2200      	moveq	r2, #0
 801053c:	f3c3 13c3 	ubfx	r3, r3, #7, #4
 8010540:	4313      	orrs	r3, r2
 8010542:	7083      	strb	r3, [r0, #2]
 8010544:	784b      	ldrb	r3, [r1, #1]
 8010546:	f013 0f40 	tst.w	r3, #64	@ 0x40
 801054a:	bf14      	ite	ne
 801054c:	22e0      	movne	r2, #224	@ 0xe0
 801054e:	2200      	moveq	r2, #0
 8010550:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8010554:	4313      	orrs	r3, r2
 8010556:	70c3      	strb	r3, [r0, #3]
 8010558:	f8b1 3001 	ldrh.w	r3, [r1, #1]
 801055c:	ba5b      	rev16	r3, r3
 801055e:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8010562:	bf14      	ite	ne
 8010564:	f44f 427e 	movne.w	r2, #65024	@ 0xfe00
 8010568:	2200      	moveq	r2, #0
 801056a:	f3c3 0348 	ubfx	r3, r3, #1, #9
 801056e:	4313      	orrs	r3, r2
 8010570:	8083      	strh	r3, [r0, #4]
 8010572:	884b      	ldrh	r3, [r1, #2]
 8010574:	ba5b      	rev16	r3, r3
 8010576:	f3c3 1382 	ubfx	r3, r3, #6, #3
 801057a:	7183      	strb	r3, [r0, #6]
 801057c:	f8b1 3003 	ldrh.w	r3, [r1, #3]
 8010580:	ba5b      	rev16	r3, r3
 8010582:	f3c3 1389 	ubfx	r3, r3, #6, #10
 8010586:	71c3      	strb	r3, [r0, #7]
 8010588:	888b      	ldrh	r3, [r1, #4]
 801058a:	ba5b      	rev16	r3, r3
 801058c:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8010590:	bf14      	ite	ne
 8010592:	22e0      	movne	r2, #224	@ 0xe0
 8010594:	2200      	moveq	r2, #0
 8010596:	f3c3 1384 	ubfx	r3, r3, #6, #5
 801059a:	4313      	orrs	r3, r2
 801059c:	73c3      	strb	r3, [r0, #15]
 801059e:	794b      	ldrb	r3, [r1, #5]
 80105a0:	f013 0f20 	tst.w	r3, #32
 80105a4:	bf14      	ite	ne
 80105a6:	22f8      	movne	r2, #248	@ 0xf8
 80105a8:	2200      	moveq	r2, #0
 80105aa:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 80105ae:	4313      	orrs	r3, r2
 80105b0:	7243      	strb	r3, [r0, #9]
 80105b2:	f8b1 3005 	ldrh.w	r3, [r1, #5]
 80105b6:	ba5b      	rev16	r3, r3
 80105b8:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80105bc:	bf14      	ite	ne
 80105be:	22e0      	movne	r2, #224	@ 0xe0
 80105c0:	2200      	moveq	r2, #0
 80105c2:	f3c3 1384 	ubfx	r3, r3, #6, #5
 80105c6:	4313      	orrs	r3, r2
 80105c8:	7283      	strb	r3, [r0, #10]
 80105ca:	798b      	ldrb	r3, [r1, #6]
 80105cc:	f013 0f20 	tst.w	r3, #32
 80105d0:	bf14      	ite	ne
 80105d2:	22f0      	movne	r2, #240	@ 0xf0
 80105d4:	2200      	moveq	r2, #0
 80105d6:	f3c3 0383 	ubfx	r3, r3, #2, #4
 80105da:	4313      	orrs	r3, r2
 80105dc:	72c3      	strb	r3, [r0, #11]
 80105de:	88cb      	ldrh	r3, [r1, #6]
 80105e0:	ba5b      	rev16	r3, r3
 80105e2:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80105e6:	bf14      	ite	ne
 80105e8:	22c0      	movne	r2, #192	@ 0xc0
 80105ea:	2200      	moveq	r2, #0
 80105ec:	f3c3 1305 	ubfx	r3, r3, #4, #6
 80105f0:	4313      	orrs	r3, r2
 80105f2:	7303      	strb	r3, [r0, #12]
 80105f4:	f8b1 3007 	ldrh.w	r3, [r1, #7]
 80105f8:	ba5b      	rev16	r3, r3
 80105fa:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80105fe:	bf14      	ite	ne
 8010600:	22c0      	movne	r2, #192	@ 0xc0
 8010602:	2200      	moveq	r2, #0
 8010604:	f3c3 1385 	ubfx	r3, r3, #6, #6
 8010608:	4313      	orrs	r3, r2
 801060a:	7343      	strb	r3, [r0, #13]
 801060c:	890b      	ldrh	r3, [r1, #8]
 801060e:	ba5b      	rev16	r3, r3
 8010610:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 8010614:	005a      	lsls	r2, r3, #1
 8010616:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 801061a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801061e:	4313      	orrs	r3, r2
 8010620:	7403      	strb	r3, [r0, #16]
 8010622:	f8b1 2009 	ldrh.w	r2, [r1, #9]
 8010626:	ba52      	rev16	r2, r2
 8010628:	2300      	movs	r3, #0
 801062a:	f3c2 12c8 	ubfx	r2, r2, #7, #9
 801062e:	7382      	strb	r2, [r0, #14]
 8010630:	4618      	mov	r0, r3
 8010632:	4770      	bx	lr

08010634 <CheckStateAndRecoverError>:
 8010634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010638:	2800      	cmp	r0, #0
 801063a:	d04f      	beq.n	80106dc <CheckStateAndRecoverError+0xa8>
 801063c:	4b2e      	ldr	r3, [pc, #184]	@ (80106f8 <CheckStateAndRecoverError+0xc4>)
 801063e:	4617      	mov	r7, r2
 8010640:	6802      	ldr	r2, [r0, #0]
 8010642:	429a      	cmp	r2, r3
 8010644:	4604      	mov	r4, r0
 8010646:	d143      	bne.n	80106d0 <CheckStateAndRecoverError+0x9c>
 8010648:	1d05      	adds	r5, r0, #4
 801064a:	4628      	mov	r0, r5
 801064c:	4688      	mov	r8, r1
 801064e:	f009 f8b1 	bl	80197b4 <Argus_Dev_GetStatus>
 8010652:	1e06      	subs	r6, r0, #0
 8010654:	db0f      	blt.n	8010676 <CheckStateAndRecoverError+0x42>
 8010656:	f204 79cc 	addw	r9, r4, #1996	@ 0x7cc
 801065a:	4648      	mov	r0, r9
 801065c:	f000 ffa8 	bl	80115b0 <Argus_Measurement_CheckTimeout>
 8010660:	2800      	cmp	r0, #0
 8010662:	db1f      	blt.n	80106a4 <CheckStateAndRecoverError+0x70>
 8010664:	f1b8 0f00 	cmp.w	r8, #0
 8010668:	d000      	beq.n	801066c <CheckStateAndRecoverError+0x38>
 801066a:	bb2e      	cbnz	r6, 80106b8 <CheckStateAndRecoverError+0x84>
 801066c:	b977      	cbnz	r7, 801068c <CheckStateAndRecoverError+0x58>
 801066e:	2500      	movs	r5, #0
 8010670:	4628      	mov	r0, r5
 8010672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010676:	4628      	mov	r0, r5
 8010678:	f00a f8f2 	bl	801a860 <Argus_Dev_RecoverFromError>
 801067c:	1e05      	subs	r5, r0, #0
 801067e:	daf5      	bge.n	801066c <CheckStateAndRecoverError+0x38>
 8010680:	462a      	mov	r2, r5
 8010682:	4631      	mov	r1, r6
 8010684:	481d      	ldr	r0, [pc, #116]	@ (80106fc <CheckStateAndRecoverError+0xc8>)
 8010686:	f7fd fc43 	bl	800df10 <print>
 801068a:	e7f1      	b.n	8010670 <CheckStateAndRecoverError+0x3c>
 801068c:	f204 70cc 	addw	r0, r4, #1996	@ 0x7cc
 8010690:	f000 ff80 	bl	8011594 <Argus_Measurement_IsActive>
 8010694:	2800      	cmp	r0, #0
 8010696:	d0ea      	beq.n	801066e <CheckStateAndRecoverError+0x3a>
 8010698:	4819      	ldr	r0, [pc, #100]	@ (8010700 <CheckStateAndRecoverError+0xcc>)
 801069a:	f7fd fc39 	bl	800df10 <print>
 801069e:	f06f 05be 	mvn.w	r5, #190	@ 0xbe
 80106a2:	e7e5      	b.n	8010670 <CheckStateAndRecoverError+0x3c>
 80106a4:	4648      	mov	r0, r9
 80106a6:	f000 ff61 	bl	801156c <Argus_Measurement_Abort>
 80106aa:	1e05      	subs	r5, r0, #0
 80106ac:	dade      	bge.n	801066c <CheckStateAndRecoverError+0x38>
 80106ae:	4629      	mov	r1, r5
 80106b0:	4814      	ldr	r0, [pc, #80]	@ (8010704 <CheckStateAndRecoverError+0xd0>)
 80106b2:	f7fd fc2d 	bl	800df10 <print>
 80106b6:	e7db      	b.n	8010670 <CheckStateAndRecoverError+0x3c>
 80106b8:	b9b7      	cbnz	r7, 80106e8 <CheckStateAndRecoverError+0xb4>
 80106ba:	4628      	mov	r0, r5
 80106bc:	4639      	mov	r1, r7
 80106be:	f008 feeb 	bl	8019498 <Argus_Dev_AwaitStatus>
 80106c2:	1e05      	subs	r5, r0, #0
 80106c4:	dad3      	bge.n	801066e <CheckStateAndRecoverError+0x3a>
 80106c6:	4629      	mov	r1, r5
 80106c8:	480f      	ldr	r0, [pc, #60]	@ (8010708 <CheckStateAndRecoverError+0xd4>)
 80106ca:	f7fd fc21 	bl	800df10 <print>
 80106ce:	e7cf      	b.n	8010670 <CheckStateAndRecoverError+0x3c>
 80106d0:	480e      	ldr	r0, [pc, #56]	@ (801070c <CheckStateAndRecoverError+0xd8>)
 80106d2:	f7fd fc1d 	bl	800df10 <print>
 80106d6:	f06f 0506 	mvn.w	r5, #6
 80106da:	e7c9      	b.n	8010670 <CheckStateAndRecoverError+0x3c>
 80106dc:	480c      	ldr	r0, [pc, #48]	@ (8010710 <CheckStateAndRecoverError+0xdc>)
 80106de:	f7fd fc17 	bl	800df10 <print>
 80106e2:	f06f 0504 	mvn.w	r5, #4
 80106e6:	e7c3      	b.n	8010670 <CheckStateAndRecoverError+0x3c>
 80106e8:	480a      	ldr	r0, [pc, #40]	@ (8010714 <CheckStateAndRecoverError+0xe0>)
 80106ea:	4631      	mov	r1, r6
 80106ec:	f7fd fc10 	bl	800df10 <print>
 80106f0:	f06f 05be 	mvn.w	r5, #190	@ 0xbe
 80106f4:	e7bc      	b.n	8010670 <CheckStateAndRecoverError+0x3c>
 80106f6:	bf00      	nop
 80106f8:	0afb8550 	.word	0x0afb8550
 80106fc:	08027ca0 	.word	0x08027ca0
 8010700:	08027d7c 	.word	0x08027d7c
 8010704:	08027cdc 	.word	0x08027cdc
 8010708:	08027d3c 	.word	0x08027d3c
 801070c:	08027c78 	.word	0x08027c78
 8010710:	08027c50 	.word	0x08027c50
 8010714:	08027d14 	.word	0x08027d14

08010718 <Argus_InitMode>:
 8010718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801071c:	f5ad 7d7f 	sub.w	sp, sp, #1020	@ 0x3fc
 8010720:	9203      	str	r2, [sp, #12]
 8010722:	2800      	cmp	r0, #0
 8010724:	f000 8114 	beq.w	8010950 <Argus_InitMode+0x238>
 8010728:	4b8c      	ldr	r3, [pc, #560]	@ (801095c <Argus_InitMode+0x244>)
 801072a:	6802      	ldr	r2, [r0, #0]
 801072c:	429a      	cmp	r2, r3
 801072e:	4604      	mov	r4, r0
 8010730:	f000 8108 	beq.w	8010944 <Argus_InitMode+0x22c>
 8010734:	1d05      	adds	r5, r0, #4
 8010736:	f640 62ec 	movw	r2, #3820	@ 0xeec
 801073a:	4688      	mov	r8, r1
 801073c:	f06f 0a06 	mvn.w	sl, #6
 8010740:	2100      	movs	r1, #0
 8010742:	f204 79cc 	addw	r9, r4, #1996	@ 0x7cc
 8010746:	f013 f84c 	bl	80237e2 <memset>
 801074a:	4629      	mov	r1, r5
 801074c:	4648      	mov	r0, r9
 801074e:	f8c4 a004 	str.w	sl, [r4, #4]
 8010752:	f000 fef9 	bl	8011548 <Argus_Measurement_Init>
 8010756:	f504 7742 	add.w	r7, r4, #776	@ 0x308
 801075a:	f604 367c 	addw	r6, r4, #2940	@ 0xb7c
 801075e:	f504 723a 	add.w	r2, r4, #744	@ 0x2e8
 8010762:	f504 73f0 	add.w	r3, r4, #480	@ 0x1e0
 8010766:	4630      	mov	r0, r6
 8010768:	9200      	str	r2, [sp, #0]
 801076a:	f504 71b6 	add.w	r1, r4, #364	@ 0x16c
 801076e:	463a      	mov	r2, r7
 8010770:	f504 7bee 	add.w	fp, r4, #476	@ 0x1dc
 8010774:	9302      	str	r3, [sp, #8]
 8010776:	f001 ffd7 	bl	8012728 <Argus_Eval_Init>
 801077a:	4629      	mov	r1, r5
 801077c:	4658      	mov	r0, fp
 801077e:	f00b f99f 	bl	801bac0 <Argus_Cfg_Init>
 8010782:	4629      	mov	r1, r5
 8010784:	4638      	mov	r0, r7
 8010786:	f00c fc31 	bl	801cfec <Argus_Cal_Init>
 801078a:	f504 7134 	add.w	r1, r4, #720	@ 0x2d0
 801078e:	4632      	mov	r2, r6
 8010790:	9100      	str	r1, [sp, #0]
 8010792:	9b02      	ldr	r3, [sp, #8]
 8010794:	f8cd 8004 	str.w	r8, [sp, #4]
 8010798:	4639      	mov	r1, r7
 801079a:	4628      	mov	r0, r5
 801079c:	f008 fd3a 	bl	8019214 <Argus_Dev_Init>
 80107a0:	1e06      	subs	r6, r0, #0
 80107a2:	db63      	blt.n	801086c <Argus_InitMode+0x154>
 80107a4:	f04f 0800 	mov.w	r8, #0
 80107a8:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 80107ac:	4641      	mov	r1, r8
 80107ae:	a84f      	add	r0, sp, #316	@ 0x13c
 80107b0:	f013 f817 	bl	80237e2 <memset>
 80107b4:	f8cd 8000 	str.w	r8, [sp]
 80107b8:	4643      	mov	r3, r8
 80107ba:	4642      	mov	r2, r8
 80107bc:	2101      	movs	r1, #1
 80107be:	a84f      	add	r0, sp, #316	@ 0x13c
 80107c0:	f00f f80c 	bl	801f7dc <Argus_Cal_GetDefaultCalibration>
 80107c4:	1e06      	subs	r6, r0, #0
 80107c6:	f2c0 8088 	blt.w	80108da <Argus_InitMode+0x1c2>
 80107ca:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80107ce:	4641      	mov	r1, r8
 80107d0:	a805      	add	r0, sp, #20
 80107d2:	f013 f806 	bl	80237e2 <memset>
 80107d6:	f8cd 8000 	str.w	r8, [sp]
 80107da:	4643      	mov	r3, r8
 80107dc:	4642      	mov	r2, r8
 80107de:	2101      	movs	r1, #1
 80107e0:	a805      	add	r0, sp, #20
 80107e2:	f00c fa1b 	bl	801cc1c <Argus_Cfg_GetDefaultConfiguration>
 80107e6:	1e06      	subs	r6, r0, #0
 80107e8:	db54      	blt.n	8010894 <Argus_InitMode+0x17c>
 80107ea:	aa4f      	add	r2, sp, #316	@ 0x13c
 80107ec:	a905      	add	r1, sp, #20
 80107ee:	4620      	mov	r0, r4
 80107f0:	f000 fab2 	bl	8010d58 <Argus_Core_SetSettingsSync>
 80107f4:	1e06      	subs	r6, r0, #0
 80107f6:	db73      	blt.n	80108e0 <Argus_InitMode+0x1c8>
 80107f8:	4638      	mov	r0, r7
 80107fa:	f00c fc05 	bl	801d008 <Argus_Cal_ReadEEPROMData>
 80107fe:	1e06      	subs	r6, r0, #0
 8010800:	f2c0 8093 	blt.w	801092a <Argus_InitMode+0x212>
 8010804:	9b03      	ldr	r3, [sp, #12]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d047      	beq.n	801089a <Argus_InitMode+0x182>
 801080a:	9a03      	ldr	r2, [sp, #12]
 801080c:	4658      	mov	r0, fp
 801080e:	a905      	add	r1, sp, #20
 8010810:	f00c fa7c 	bl	801cd0c <Argus_Cfg_GetCurrentDefaultConfiguration>
 8010814:	1e06      	subs	r6, r0, #0
 8010816:	db4b      	blt.n	80108b0 <Argus_InitMode+0x198>
 8010818:	9a03      	ldr	r2, [sp, #12]
 801081a:	a94f      	add	r1, sp, #316	@ 0x13c
 801081c:	4638      	mov	r0, r7
 801081e:	f010 fda1 	bl	8021364 <Argus_Cal_GetCurrentDefaultCalibration>
 8010822:	1e06      	subs	r6, r0, #0
 8010824:	db7c      	blt.n	8010920 <Argus_InitMode+0x208>
 8010826:	a94f      	add	r1, sp, #316	@ 0x13c
 8010828:	4638      	mov	r0, r7
 801082a:	f00c fbf3 	bl	801d014 <Argus_Cal_ReadNVMData>
 801082e:	1e06      	subs	r6, r0, #0
 8010830:	db7e      	blt.n	8010930 <Argus_InitMode+0x218>
 8010832:	aa4f      	add	r2, sp, #316	@ 0x13c
 8010834:	a905      	add	r1, sp, #20
 8010836:	4620      	mov	r0, r4
 8010838:	f000 fa8e 	bl	8010d58 <Argus_Core_SetSettingsSync>
 801083c:	1e06      	subs	r6, r0, #0
 801083e:	db7c      	blt.n	801093a <Argus_InitMode+0x222>
 8010840:	21c0      	movs	r1, #192	@ 0xc0
 8010842:	4628      	mov	r0, r5
 8010844:	f008 ffa2 	bl	801978c <Argus_Dev_ClearStatus>
 8010848:	4628      	mov	r0, r5
 801084a:	f009 fe95 	bl	801a578 <Argus_Dev_GetModule>
 801084e:	2800      	cmp	r0, #0
 8010850:	d049      	beq.n	80108e6 <Argus_InitMode+0x1ce>
 8010852:	2801      	cmp	r0, #1
 8010854:	d04a      	beq.n	80108ec <Argus_InitMode+0x1d4>
 8010856:	2600      	movs	r6, #0
 8010858:	4628      	mov	r0, r5
 801085a:	f009 fe8d 	bl	801a578 <Argus_Dev_GetModule>
 801085e:	4b3f      	ldr	r3, [pc, #252]	@ (801095c <Argus_InitMode+0x244>)
 8010860:	6023      	str	r3, [r4, #0]
 8010862:	2800      	cmp	r0, #0
 8010864:	bf08      	it	eq
 8010866:	f06f 06c6 	mvneq.w	r6, #198	@ 0xc6
 801086a:	e00e      	b.n	801088a <Argus_InitMode+0x172>
 801086c:	483c      	ldr	r0, [pc, #240]	@ (8010960 <Argus_InitMode+0x248>)
 801086e:	4631      	mov	r1, r6
 8010870:	f7fd fb4e 	bl	800df10 <print>
 8010874:	4648      	mov	r0, r9
 8010876:	f000 fe77 	bl	8011568 <Argus_Measurement_Deinit>
 801087a:	f640 62ec 	movw	r2, #3820	@ 0xeec
 801087e:	2100      	movs	r1, #0
 8010880:	4620      	mov	r0, r4
 8010882:	f012 ffae 	bl	80237e2 <memset>
 8010886:	f8c4 a004 	str.w	sl, [r4, #4]
 801088a:	4630      	mov	r0, r6
 801088c:	f50d 7d7f 	add.w	sp, sp, #1020	@ 0x3fc
 8010890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010894:	4833      	ldr	r0, [pc, #204]	@ (8010964 <Argus_InitMode+0x24c>)
 8010896:	4631      	mov	r1, r6
 8010898:	e7ea      	b.n	8010870 <Argus_InitMode+0x158>
 801089a:	4628      	mov	r0, r5
 801089c:	f009 fe6c 	bl	801a578 <Argus_Dev_GetModule>
 80108a0:	f000 00bf 	and.w	r0, r0, #191	@ 0xbf
 80108a4:	2803      	cmp	r0, #3
 80108a6:	bf14      	ite	ne
 80108a8:	2301      	movne	r3, #1
 80108aa:	2302      	moveq	r3, #2
 80108ac:	9303      	str	r3, [sp, #12]
 80108ae:	e7ac      	b.n	801080a <Argus_InitMode+0xf2>
 80108b0:	482d      	ldr	r0, [pc, #180]	@ (8010968 <Argus_InitMode+0x250>)
 80108b2:	4631      	mov	r1, r6
 80108b4:	f7fd fb2c 	bl	800df10 <print>
 80108b8:	4648      	mov	r0, r9
 80108ba:	f000 fe55 	bl	8011568 <Argus_Measurement_Deinit>
 80108be:	f640 62ec 	movw	r2, #3820	@ 0xeec
 80108c2:	2100      	movs	r1, #0
 80108c4:	4620      	mov	r0, r4
 80108c6:	f012 ff8c 	bl	80237e2 <memset>
 80108ca:	f06f 0306 	mvn.w	r3, #6
 80108ce:	4630      	mov	r0, r6
 80108d0:	6063      	str	r3, [r4, #4]
 80108d2:	f50d 7d7f 	add.w	sp, sp, #1020	@ 0x3fc
 80108d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108da:	4824      	ldr	r0, [pc, #144]	@ (801096c <Argus_InitMode+0x254>)
 80108dc:	4631      	mov	r1, r6
 80108de:	e7c7      	b.n	8010870 <Argus_InitMode+0x158>
 80108e0:	4823      	ldr	r0, [pc, #140]	@ (8010970 <Argus_InitMode+0x258>)
 80108e2:	4631      	mov	r1, r6
 80108e4:	e7c4      	b.n	8010870 <Argus_InitMode+0x158>
 80108e6:	4823      	ldr	r0, [pc, #140]	@ (8010974 <Argus_InitMode+0x25c>)
 80108e8:	f7fd fb12 	bl	800df10 <print>
 80108ec:	4638      	mov	r0, r7
 80108ee:	f00c fbaf 	bl	801d050 <Argus_Cal_GetCalibrationPtr>
 80108f2:	f8d0 3288 	ldr.w	r3, [r0, #648]	@ 0x288
 80108f6:	f003 0303 	and.w	r3, r3, #3
 80108fa:	2b03      	cmp	r3, #3
 80108fc:	d0ab      	beq.n	8010856 <Argus_InitMode+0x13e>
 80108fe:	4620      	mov	r0, r4
 8010900:	f000 fc16 	bl	8011130 <Argus_Core_ExecuteVsubCalibrationSequence>
 8010904:	2800      	cmp	r0, #0
 8010906:	ea00 76e0 	and.w	r6, r0, r0, asr #31
 801090a:	daa4      	bge.n	8010856 <Argus_InitMode+0x13e>
 801090c:	481a      	ldr	r0, [pc, #104]	@ (8010978 <Argus_InitMode+0x260>)
 801090e:	4631      	mov	r1, r6
 8010910:	f7fd fafe 	bl	800df10 <print>
 8010914:	4628      	mov	r0, r5
 8010916:	f009 fe2f 	bl	801a578 <Argus_Dev_GetModule>
 801091a:	2800      	cmp	r0, #0
 801091c:	d09c      	beq.n	8010858 <Argus_InitMode+0x140>
 801091e:	e7cb      	b.n	80108b8 <Argus_InitMode+0x1a0>
 8010920:	4631      	mov	r1, r6
 8010922:	4816      	ldr	r0, [pc, #88]	@ (801097c <Argus_InitMode+0x264>)
 8010924:	f7fd faf4 	bl	800df10 <print>
 8010928:	e7c6      	b.n	80108b8 <Argus_InitMode+0x1a0>
 801092a:	4815      	ldr	r0, [pc, #84]	@ (8010980 <Argus_InitMode+0x268>)
 801092c:	4631      	mov	r1, r6
 801092e:	e79f      	b.n	8010870 <Argus_InitMode+0x158>
 8010930:	4631      	mov	r1, r6
 8010932:	4814      	ldr	r0, [pc, #80]	@ (8010984 <Argus_InitMode+0x26c>)
 8010934:	f7fd faec 	bl	800df10 <print>
 8010938:	e7be      	b.n	80108b8 <Argus_InitMode+0x1a0>
 801093a:	4631      	mov	r1, r6
 801093c:	4812      	ldr	r0, [pc, #72]	@ (8010988 <Argus_InitMode+0x270>)
 801093e:	f7fd fae7 	bl	800df10 <print>
 8010942:	e7b9      	b.n	80108b8 <Argus_InitMode+0x1a0>
 8010944:	4811      	ldr	r0, [pc, #68]	@ (801098c <Argus_InitMode+0x274>)
 8010946:	f7fd fae3 	bl	800df10 <print>
 801094a:	f06f 0604 	mvn.w	r6, #4
 801094e:	e79c      	b.n	801088a <Argus_InitMode+0x172>
 8010950:	480f      	ldr	r0, [pc, #60]	@ (8010990 <Argus_InitMode+0x278>)
 8010952:	f7fd fadd 	bl	800df10 <print>
 8010956:	f06f 0604 	mvn.w	r6, #4
 801095a:	e796      	b.n	801088a <Argus_InitMode+0x172>
 801095c:	0afb8550 	.word	0x0afb8550
 8010960:	08027df0 	.word	0x08027df0
 8010964:	08027e64 	.word	0x08027e64
 8010968:	08027f18 	.word	0x08027f18
 801096c:	08027e2c 	.word	0x08027e2c
 8010970:	08027ea0 	.word	0x08027ea0
 8010974:	08028010 	.word	0x08028010
 8010978:	08028094 	.word	0x08028094
 801097c:	08027f5c 	.word	0x08027f5c
 8010980:	08027ee4 	.word	0x08027ee4
 8010984:	08027f9c 	.word	0x08027f9c
 8010988:	08027fcc 	.word	0x08027fcc
 801098c:	08027dc4 	.word	0x08027dc4
 8010990:	08027c50 	.word	0x08027c50

08010994 <Argus_Init>:
 8010994:	2200      	movs	r2, #0
 8010996:	f7ff bebf 	b.w	8010718 <Argus_InitMode>
 801099a:	bf00      	nop

0801099c <Argus_Malloc>:
 801099c:	f012 b8ea 	b.w	8022b74 <malloc>

080109a0 <Argus_CreateHandle>:
 80109a0:	b510      	push	{r4, lr}
 80109a2:	f640 60ec 	movw	r0, #3820	@ 0xeec
 80109a6:	f7ff fff9 	bl	801099c <Argus_Malloc>
 80109aa:	4604      	mov	r4, r0
 80109ac:	b138      	cbz	r0, 80109be <Argus_CreateHandle+0x1e>
 80109ae:	f640 62ec 	movw	r2, #3820	@ 0xeec
 80109b2:	2100      	movs	r1, #0
 80109b4:	f012 ff15 	bl	80237e2 <memset>
 80109b8:	f06f 0306 	mvn.w	r3, #6
 80109bc:	6063      	str	r3, [r4, #4]
 80109be:	4620      	mov	r0, r4
 80109c0:	bd10      	pop	{r4, pc}
 80109c2:	bf00      	nop

080109c4 <Argus_StartMeasurementTimer>:
 80109c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109c6:	b3d0      	cbz	r0, 8010a3e <Argus_StartMeasurementTimer+0x7a>
 80109c8:	4b20      	ldr	r3, [pc, #128]	@ (8010a4c <Argus_StartMeasurementTimer+0x88>)
 80109ca:	6802      	ldr	r2, [r0, #0]
 80109cc:	429a      	cmp	r2, r3
 80109ce:	4604      	mov	r4, r0
 80109d0:	d12c      	bne.n	8010a2c <Argus_StartMeasurementTimer+0x68>
 80109d2:	1d07      	adds	r7, r0, #4
 80109d4:	4638      	mov	r0, r7
 80109d6:	460d      	mov	r5, r1
 80109d8:	f008 feec 	bl	80197b4 <Argus_Dev_GetStatus>
 80109dc:	1e06      	subs	r6, r0, #0
 80109de:	db0f      	blt.n	8010a00 <Argus_StartMeasurementTimer+0x3c>
 80109e0:	f204 76cc 	addw	r6, r4, #1996	@ 0x7cc
 80109e4:	4630      	mov	r0, r6
 80109e6:	f000 fde3 	bl	80115b0 <Argus_Measurement_CheckTimeout>
 80109ea:	2800      	cmp	r0, #0
 80109ec:	db14      	blt.n	8010a18 <Argus_StartMeasurementTimer+0x54>
 80109ee:	b31d      	cbz	r5, 8010a38 <Argus_StartMeasurementTimer+0x74>
 80109f0:	4622      	mov	r2, r4
 80109f2:	4629      	mov	r1, r5
 80109f4:	f204 70cc 	addw	r0, r4, #1996	@ 0x7cc
 80109f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80109fc:	f000 be56 	b.w	80116ac <Argus_Measurement_StartTimer>
 8010a00:	4638      	mov	r0, r7
 8010a02:	f009 ff2d 	bl	801a860 <Argus_Dev_RecoverFromError>
 8010a06:	1e07      	subs	r7, r0, #0
 8010a08:	daf1      	bge.n	80109ee <Argus_StartMeasurementTimer+0x2a>
 8010a0a:	4811      	ldr	r0, [pc, #68]	@ (8010a50 <Argus_StartMeasurementTimer+0x8c>)
 8010a0c:	463a      	mov	r2, r7
 8010a0e:	4631      	mov	r1, r6
 8010a10:	f7fd fa7e 	bl	800df10 <print>
 8010a14:	4638      	mov	r0, r7
 8010a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a18:	4630      	mov	r0, r6
 8010a1a:	f000 fda7 	bl	801156c <Argus_Measurement_Abort>
 8010a1e:	1e07      	subs	r7, r0, #0
 8010a20:	dae5      	bge.n	80109ee <Argus_StartMeasurementTimer+0x2a>
 8010a22:	4639      	mov	r1, r7
 8010a24:	480b      	ldr	r0, [pc, #44]	@ (8010a54 <Argus_StartMeasurementTimer+0x90>)
 8010a26:	f7fd fa73 	bl	800df10 <print>
 8010a2a:	e7f3      	b.n	8010a14 <Argus_StartMeasurementTimer+0x50>
 8010a2c:	480a      	ldr	r0, [pc, #40]	@ (8010a58 <Argus_StartMeasurementTimer+0x94>)
 8010a2e:	f7fd fa6f 	bl	800df10 <print>
 8010a32:	f06f 0706 	mvn.w	r7, #6
 8010a36:	e7ed      	b.n	8010a14 <Argus_StartMeasurementTimer+0x50>
 8010a38:	f06f 0704 	mvn.w	r7, #4
 8010a3c:	e7ea      	b.n	8010a14 <Argus_StartMeasurementTimer+0x50>
 8010a3e:	4807      	ldr	r0, [pc, #28]	@ (8010a5c <Argus_StartMeasurementTimer+0x98>)
 8010a40:	f7fd fa66 	bl	800df10 <print>
 8010a44:	f06f 0704 	mvn.w	r7, #4
 8010a48:	e7e4      	b.n	8010a14 <Argus_StartMeasurementTimer+0x50>
 8010a4a:	bf00      	nop
 8010a4c:	0afb8550 	.word	0x0afb8550
 8010a50:	08027ca0 	.word	0x08027ca0
 8010a54:	08027cdc 	.word	0x08027cdc
 8010a58:	08027c78 	.word	0x08027c78
 8010a5c:	08027c50 	.word	0x08027c50

08010a60 <Argus_EvaluateData>:
 8010a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a62:	b348      	cbz	r0, 8010ab8 <Argus_EvaluateData+0x58>
 8010a64:	4b17      	ldr	r3, [pc, #92]	@ (8010ac4 <Argus_EvaluateData+0x64>)
 8010a66:	6802      	ldr	r2, [r0, #0]
 8010a68:	429a      	cmp	r2, r3
 8010a6a:	4604      	mov	r4, r0
 8010a6c:	d117      	bne.n	8010a9e <Argus_EvaluateData+0x3e>
 8010a6e:	460e      	mov	r6, r1
 8010a70:	b1d9      	cbz	r1, 8010aaa <Argus_EvaluateData+0x4a>
 8010a72:	f200 77cc 	addw	r7, r0, #1996	@ 0x7cc
 8010a76:	4638      	mov	r0, r7
 8010a78:	f000 fe58 	bl	801172c <Argus_Measurement_GetRawDataBuffer>
 8010a7c:	4605      	mov	r5, r0
 8010a7e:	b1b8      	cbz	r0, 8010ab0 <Argus_EvaluateData+0x50>
 8010a80:	2300      	movs	r3, #0
 8010a82:	4632      	mov	r2, r6
 8010a84:	f604 307c 	addw	r0, r4, #2940	@ 0xb7c
 8010a88:	4629      	mov	r1, r5
 8010a8a:	2400      	movs	r4, #0
 8010a8c:	f002 fc6a 	bl	8013364 <Argus_Eval_Apply>
 8010a90:	f885 41c5 	strb.w	r4, [r5, #453]	@ 0x1c5
 8010a94:	4638      	mov	r0, r7
 8010a96:	f000 fe73 	bl	8011780 <Argus_Measurement_Start>
 8010a9a:	4620      	mov	r0, r4
 8010a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a9e:	480a      	ldr	r0, [pc, #40]	@ (8010ac8 <Argus_EvaluateData+0x68>)
 8010aa0:	f7fd fa36 	bl	800df10 <print>
 8010aa4:	f06f 0006 	mvn.w	r0, #6
 8010aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010aaa:	f06f 0004 	mvn.w	r0, #4
 8010aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ab0:	f06f 0066 	mvn.w	r0, #102	@ 0x66
 8010ab4:	6030      	str	r0, [r6, #0]
 8010ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ab8:	4804      	ldr	r0, [pc, #16]	@ (8010acc <Argus_EvaluateData+0x6c>)
 8010aba:	f7fd fa29 	bl	800df10 <print>
 8010abe:	f06f 0004 	mvn.w	r0, #4
 8010ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ac4:	0afb8550 	.word	0x0afb8550
 8010ac8:	08027c78 	.word	0x08027c78
 8010acc:	08027c50 	.word	0x08027c50

08010ad0 <Argus_GetAPIVersion>:
 8010ad0:	4800      	ldr	r0, [pc, #0]	@ (8010ad4 <Argus_GetAPIVersion+0x4>)
 8010ad2:	4770      	bx	lr
 8010ad4:	01050006 	.word	0x01050006

08010ad8 <Argus_GetModuleName>:
 8010ad8:	b300      	cbz	r0, 8010b1c <Argus_GetModuleName+0x44>
 8010ada:	4b11      	ldr	r3, [pc, #68]	@ (8010b20 <Argus_GetModuleName+0x48>)
 8010adc:	6802      	ldr	r2, [r0, #0]
 8010ade:	429a      	cmp	r2, r3
 8010ae0:	b510      	push	{r4, lr}
 8010ae2:	4604      	mov	r4, r0
 8010ae4:	d001      	beq.n	8010aea <Argus_GetModuleName+0x12>
 8010ae6:	480f      	ldr	r0, [pc, #60]	@ (8010b24 <Argus_GetModuleName+0x4c>)
 8010ae8:	bd10      	pop	{r4, pc}
 8010aea:	f200 70cc 	addw	r0, r0, #1996	@ 0x7cc
 8010aee:	f000 fd5f 	bl	80115b0 <Argus_Measurement_CheckTimeout>
 8010af2:	2800      	cmp	r0, #0
 8010af4:	db02      	blt.n	8010afc <Argus_GetModuleName+0x24>
 8010af6:	1d20      	adds	r0, r4, #4
 8010af8:	f008 fe5c 	bl	80197b4 <Argus_Dev_GetStatus>
 8010afc:	f110 0f65 	cmn.w	r0, #101	@ 0x65
 8010b00:	d0f1      	beq.n	8010ae6 <Argus_GetModuleName+0xe>
 8010b02:	3007      	adds	r0, #7
 8010b04:	d0ef      	beq.n	8010ae6 <Argus_GetModuleName+0xe>
 8010b06:	1d20      	adds	r0, r4, #4
 8010b08:	f009 fd36 	bl	801a578 <Argus_Dev_GetModule>
 8010b0c:	3801      	subs	r0, #1
 8010b0e:	b2c0      	uxtb	r0, r0
 8010b10:	2846      	cmp	r0, #70	@ 0x46
 8010b12:	d8e8      	bhi.n	8010ae6 <Argus_GetModuleName+0xe>
 8010b14:	4b04      	ldr	r3, [pc, #16]	@ (8010b28 <Argus_GetModuleName+0x50>)
 8010b16:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8010b1a:	bd10      	pop	{r4, pc}
 8010b1c:	4801      	ldr	r0, [pc, #4]	@ (8010b24 <Argus_GetModuleName+0x4c>)
 8010b1e:	4770      	bx	lr
 8010b20:	0afb8550 	.word	0x0afb8550
 8010b24:	080280cc 	.word	0x080280cc
 8010b28:	080281c4 	.word	0x080281c4

08010b2c <Argus_GetChipID>:
 8010b2c:	b1d0      	cbz	r0, 8010b64 <Argus_GetChipID+0x38>
 8010b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8010b68 <Argus_GetChipID+0x3c>)
 8010b30:	6802      	ldr	r2, [r0, #0]
 8010b32:	429a      	cmp	r2, r3
 8010b34:	b510      	push	{r4, lr}
 8010b36:	4604      	mov	r4, r0
 8010b38:	d001      	beq.n	8010b3e <Argus_GetChipID+0x12>
 8010b3a:	2000      	movs	r0, #0
 8010b3c:	bd10      	pop	{r4, pc}
 8010b3e:	f200 70cc 	addw	r0, r0, #1996	@ 0x7cc
 8010b42:	f000 fd35 	bl	80115b0 <Argus_Measurement_CheckTimeout>
 8010b46:	2800      	cmp	r0, #0
 8010b48:	db02      	blt.n	8010b50 <Argus_GetChipID+0x24>
 8010b4a:	1d20      	adds	r0, r4, #4
 8010b4c:	f008 fe32 	bl	80197b4 <Argus_Dev_GetStatus>
 8010b50:	f110 0f65 	cmn.w	r0, #101	@ 0x65
 8010b54:	d0f1      	beq.n	8010b3a <Argus_GetChipID+0xe>
 8010b56:	3007      	adds	r0, #7
 8010b58:	d0ef      	beq.n	8010b3a <Argus_GetChipID+0xe>
 8010b5a:	1d20      	adds	r0, r4, #4
 8010b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b60:	f009 bd0c 	b.w	801a57c <Argus_Dev_GetChipID>
 8010b64:	2000      	movs	r0, #0
 8010b66:	4770      	bx	lr
 8010b68:	0afb8550 	.word	0x0afb8550

08010b6c <Argus_SetConfigurationFrameTime>:
 8010b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b6e:	b0cb      	sub	sp, #300	@ 0x12c
 8010b70:	b3c0      	cbz	r0, 8010be4 <Argus_SetConfigurationFrameTime+0x78>
 8010b72:	4b1f      	ldr	r3, [pc, #124]	@ (8010bf0 <Argus_SetConfigurationFrameTime+0x84>)
 8010b74:	6802      	ldr	r2, [r0, #0]
 8010b76:	429a      	cmp	r2, r3
 8010b78:	4604      	mov	r4, r0
 8010b7a:	d12d      	bne.n	8010bd8 <Argus_SetConfigurationFrameTime+0x6c>
 8010b7c:	460d      	mov	r5, r1
 8010b7e:	f500 70ee 	add.w	r0, r0, #476	@ 0x1dc
 8010b82:	4669      	mov	r1, sp
 8010b84:	f00a ffa8 	bl	801bad8 <Argus_Cfg_GetConfiguration>
 8010b88:	2201      	movs	r2, #1
 8010b8a:	4611      	mov	r1, r2
 8010b8c:	4620      	mov	r0, r4
 8010b8e:	9501      	str	r5, [sp, #4]
 8010b90:	f7ff fd50 	bl	8010634 <CheckStateAndRecoverError>
 8010b94:	4605      	mov	r5, r0
 8010b96:	b960      	cbnz	r0, 8010bb2 <Argus_SetConfigurationFrameTime+0x46>
 8010b98:	f504 7042 	add.w	r0, r4, #776	@ 0x308
 8010b9c:	f00c fa58 	bl	801d050 <Argus_Cal_GetCalibrationPtr>
 8010ba0:	4606      	mov	r6, r0
 8010ba2:	b1b0      	cbz	r0, 8010bd2 <Argus_SetConfigurationFrameTime+0x66>
 8010ba4:	1d27      	adds	r7, r4, #4
 8010ba6:	21c0      	movs	r1, #192	@ 0xc0
 8010ba8:	4638      	mov	r0, r7
 8010baa:	f008 fd1d 	bl	80195e8 <Argus_Dev_SetStatusSync>
 8010bae:	4605      	mov	r5, r0
 8010bb0:	b110      	cbz	r0, 8010bb8 <Argus_SetConfigurationFrameTime+0x4c>
 8010bb2:	4628      	mov	r0, r5
 8010bb4:	b04b      	add	sp, #300	@ 0x12c
 8010bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bb8:	4669      	mov	r1, sp
 8010bba:	4632      	mov	r2, r6
 8010bbc:	4620      	mov	r0, r4
 8010bbe:	f000 f8cb 	bl	8010d58 <Argus_Core_SetSettingsSync>
 8010bc2:	21c0      	movs	r1, #192	@ 0xc0
 8010bc4:	4605      	mov	r5, r0
 8010bc6:	4638      	mov	r0, r7
 8010bc8:	f008 fde0 	bl	801978c <Argus_Dev_ClearStatus>
 8010bcc:	4628      	mov	r0, r5
 8010bce:	b04b      	add	sp, #300	@ 0x12c
 8010bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bd2:	f06f 0504 	mvn.w	r5, #4
 8010bd6:	e7ec      	b.n	8010bb2 <Argus_SetConfigurationFrameTime+0x46>
 8010bd8:	4806      	ldr	r0, [pc, #24]	@ (8010bf4 <Argus_SetConfigurationFrameTime+0x88>)
 8010bda:	f7fd f999 	bl	800df10 <print>
 8010bde:	f06f 0506 	mvn.w	r5, #6
 8010be2:	e7e6      	b.n	8010bb2 <Argus_SetConfigurationFrameTime+0x46>
 8010be4:	4804      	ldr	r0, [pc, #16]	@ (8010bf8 <Argus_SetConfigurationFrameTime+0x8c>)
 8010be6:	f7fd f993 	bl	800df10 <print>
 8010bea:	f06f 0504 	mvn.w	r5, #4
 8010bee:	e7e0      	b.n	8010bb2 <Argus_SetConfigurationFrameTime+0x46>
 8010bf0:	0afb8550 	.word	0x0afb8550
 8010bf4:	08027c78 	.word	0x08027c78
 8010bf8:	08027c50 	.word	0x08027c50

08010bfc <ClearStatusCallback>:
 8010bfc:	1d08      	adds	r0, r1, #4
 8010bfe:	21c0      	movs	r1, #192	@ 0xc0
 8010c00:	f008 bdc4 	b.w	801978c <Argus_Dev_ClearStatus>

08010c04 <SetSettings>:
 8010c04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c08:	4606      	mov	r6, r0
 8010c0a:	f5ad 7d33 	sub.w	sp, sp, #716	@ 0x2cc
 8010c0e:	460f      	mov	r7, r1
 8010c10:	a803      	add	r0, sp, #12
 8010c12:	4611      	mov	r1, r2
 8010c14:	f506 7842 	add.w	r8, r6, #776	@ 0x308
 8010c18:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8010c1c:	461d      	mov	r5, r3
 8010c1e:	f012 fe70 	bl	8023902 <memcpy>
 8010c22:	a903      	add	r1, sp, #12
 8010c24:	4640      	mov	r0, r8
 8010c26:	f00c fa17 	bl	801d058 <Argus_Cal_ComposeCalibrationData>
 8010c2a:	4604      	mov	r4, r0
 8010c2c:	b120      	cbz	r0, 8010c38 <SetSettings+0x34>
 8010c2e:	4620      	mov	r0, r4
 8010c30:	f50d 7d33 	add.w	sp, sp, #716	@ 0x2cc
 8010c34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c38:	4638      	mov	r0, r7
 8010c3a:	f00a ff55 	bl	801bae8 <Argus_Cfg_CheckConfiguration>
 8010c3e:	4604      	mov	r4, r0
 8010c40:	2800      	cmp	r0, #0
 8010c42:	d1f4      	bne.n	8010c2e <SetSettings+0x2a>
 8010c44:	a803      	add	r0, sp, #12
 8010c46:	f00c fb1f 	bl	801d288 <Argus_Cal_CheckCalibration>
 8010c4a:	4604      	mov	r4, r0
 8010c4c:	2800      	cmp	r0, #0
 8010c4e:	d1ee      	bne.n	8010c2e <SetSettings+0x2a>
 8010c50:	2d00      	cmp	r5, #0
 8010c52:	d143      	bne.n	8010cdc <SetSettings+0xd8>
 8010c54:	1d35      	adds	r5, r6, #4
 8010c56:	21c0      	movs	r1, #192	@ 0xc0
 8010c58:	4628      	mov	r0, r5
 8010c5a:	f008 fcc5 	bl	80195e8 <Argus_Dev_SetStatusSync>
 8010c5e:	4604      	mov	r4, r0
 8010c60:	2800      	cmp	r0, #0
 8010c62:	d1e4      	bne.n	8010c2e <SetSettings+0x2a>
 8010c64:	4639      	mov	r1, r7
 8010c66:	f506 70ee 	add.w	r0, r6, #476	@ 0x1dc
 8010c6a:	f00a ff73 	bl	801bb54 <Argus_Cfg_CopyConfiguration>
 8010c6e:	a903      	add	r1, sp, #12
 8010c70:	4681      	mov	r9, r0
 8010c72:	4640      	mov	r0, r8
 8010c74:	f00c fbc8 	bl	801d408 <Argus_Cal_CopyCalibration>
 8010c78:	4649      	mov	r1, r9
 8010c7a:	4602      	mov	r2, r0
 8010c7c:	4640      	mov	r0, r8
 8010c7e:	9201      	str	r2, [sp, #4]
 8010c80:	f00c fef2 	bl	801da68 <Argus_Cal_Update>
 8010c84:	1e07      	subs	r7, r0, #0
 8010c86:	db5e      	blt.n	8010d46 <SetSettings+0x142>
 8010c88:	9a01      	ldr	r2, [sp, #4]
 8010c8a:	4649      	mov	r1, r9
 8010c8c:	4628      	mov	r0, r5
 8010c8e:	f009 f821 	bl	8019cd4 <Argus_Dev_Update>
 8010c92:	1e07      	subs	r7, r0, #0
 8010c94:	9a01      	ldr	r2, [sp, #4]
 8010c96:	db56      	blt.n	8010d46 <SetSettings+0x142>
 8010c98:	4649      	mov	r1, r9
 8010c9a:	f606 307c 	addw	r0, r6, #2940	@ 0xb7c
 8010c9e:	9201      	str	r2, [sp, #4]
 8010ca0:	f001 fd66 	bl	8012770 <Argus_Eval_Update>
 8010ca4:	4628      	mov	r0, r5
 8010ca6:	f009 fc67 	bl	801a578 <Argus_Dev_GetModule>
 8010caa:	4607      	mov	r7, r0
 8010cac:	4628      	mov	r0, r5
 8010cae:	f009 fc65 	bl	801a57c <Argus_Dev_GetChipID>
 8010cb2:	9a01      	ldr	r2, [sp, #4]
 8010cb4:	4601      	mov	r1, r0
 8010cb6:	4638      	mov	r0, r7
 8010cb8:	f010 fbee 	bl	8021498 <Argus_Cal_WriteCalibrationToNVM>
 8010cbc:	1e07      	subs	r7, r0, #0
 8010cbe:	db42      	blt.n	8010d46 <SetSettings+0x142>
 8010cc0:	4633      	mov	r3, r6
 8010cc2:	4a24      	ldr	r2, [pc, #144]	@ (8010d54 <SetSettings+0x150>)
 8010cc4:	2101      	movs	r1, #1
 8010cc6:	4628      	mov	r0, r5
 8010cc8:	f009 fc5e 	bl	801a588 <Argus_Dev_Apply>
 8010ccc:	1e06      	subs	r6, r0, #0
 8010cce:	daae      	bge.n	8010c2e <SetSettings+0x2a>
 8010cd0:	21c0      	movs	r1, #192	@ 0xc0
 8010cd2:	4628      	mov	r0, r5
 8010cd4:	f008 fd5a 	bl	801978c <Argus_Dev_ClearStatus>
 8010cd8:	4634      	mov	r4, r6
 8010cda:	e7a8      	b.n	8010c2e <SetSettings+0x2a>
 8010cdc:	4639      	mov	r1, r7
 8010cde:	f506 70ee 	add.w	r0, r6, #476	@ 0x1dc
 8010ce2:	f00a ff37 	bl	801bb54 <Argus_Cfg_CopyConfiguration>
 8010ce6:	a903      	add	r1, sp, #12
 8010ce8:	4681      	mov	r9, r0
 8010cea:	4640      	mov	r0, r8
 8010cec:	f00c fb8c 	bl	801d408 <Argus_Cal_CopyCalibration>
 8010cf0:	4649      	mov	r1, r9
 8010cf2:	4602      	mov	r2, r0
 8010cf4:	4607      	mov	r7, r0
 8010cf6:	4640      	mov	r0, r8
 8010cf8:	f00c feb6 	bl	801da68 <Argus_Cal_Update>
 8010cfc:	1e04      	subs	r4, r0, #0
 8010cfe:	db96      	blt.n	8010c2e <SetSettings+0x2a>
 8010d00:	1d35      	adds	r5, r6, #4
 8010d02:	463a      	mov	r2, r7
 8010d04:	4649      	mov	r1, r9
 8010d06:	4628      	mov	r0, r5
 8010d08:	f008 ffe4 	bl	8019cd4 <Argus_Dev_Update>
 8010d0c:	1e04      	subs	r4, r0, #0
 8010d0e:	db8e      	blt.n	8010c2e <SetSettings+0x2a>
 8010d10:	463a      	mov	r2, r7
 8010d12:	4649      	mov	r1, r9
 8010d14:	f606 307c 	addw	r0, r6, #2940	@ 0xb7c
 8010d18:	f001 fd2a 	bl	8012770 <Argus_Eval_Update>
 8010d1c:	4628      	mov	r0, r5
 8010d1e:	f009 fc2b 	bl	801a578 <Argus_Dev_GetModule>
 8010d22:	4604      	mov	r4, r0
 8010d24:	4628      	mov	r0, r5
 8010d26:	f009 fc29 	bl	801a57c <Argus_Dev_GetChipID>
 8010d2a:	463a      	mov	r2, r7
 8010d2c:	4601      	mov	r1, r0
 8010d2e:	4620      	mov	r0, r4
 8010d30:	f010 fbb2 	bl	8021498 <Argus_Cal_WriteCalibrationToNVM>
 8010d34:	1e07      	subs	r7, r0, #0
 8010d36:	db06      	blt.n	8010d46 <SetSettings+0x142>
 8010d38:	2101      	movs	r1, #1
 8010d3a:	4628      	mov	r0, r5
 8010d3c:	f009 fd24 	bl	801a788 <Argus_Dev_ApplySync>
 8010d40:	ea00 74e0 	and.w	r4, r0, r0, asr #31
 8010d44:	e773      	b.n	8010c2e <SetSettings+0x2a>
 8010d46:	21c0      	movs	r1, #192	@ 0xc0
 8010d48:	4628      	mov	r0, r5
 8010d4a:	f008 fd1f 	bl	801978c <Argus_Dev_ClearStatus>
 8010d4e:	463c      	mov	r4, r7
 8010d50:	e76d      	b.n	8010c2e <SetSettings+0x2a>
 8010d52:	bf00      	nop
 8010d54:	08010bfd 	.word	0x08010bfd

08010d58 <Argus_Core_SetSettingsSync>:
 8010d58:	2301      	movs	r3, #1
 8010d5a:	f7ff bf53 	b.w	8010c04 <SetSettings>
 8010d5e:	bf00      	nop

08010d60 <RunSequence>:
 8010d60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010d64:	1d07      	adds	r7, r0, #4
 8010d66:	f5ad 7d7b 	sub.w	sp, sp, #1004	@ 0x3ec
 8010d6a:	4604      	mov	r4, r0
 8010d6c:	4688      	mov	r8, r1
 8010d6e:	4638      	mov	r0, r7
 8010d70:	21c3      	movs	r1, #195	@ 0xc3
 8010d72:	4616      	mov	r6, r2
 8010d74:	4699      	mov	r9, r3
 8010d76:	f008 fc37 	bl	80195e8 <Argus_Dev_SetStatusSync>
 8010d7a:	bb18      	cbnz	r0, 8010dc4 <RunSequence+0x64>
 8010d7c:	a901      	add	r1, sp, #4
 8010d7e:	f504 70ee 	add.w	r0, r4, #476	@ 0x1dc
 8010d82:	f00a fea9 	bl	801bad8 <Argus_Cfg_GetConfiguration>
 8010d86:	a94b      	add	r1, sp, #300	@ 0x12c
 8010d88:	f504 7042 	add.w	r0, r4, #776	@ 0x308
 8010d8c:	f00c f958 	bl	801d040 <Argus_Cal_GetCalibration>
 8010d90:	464b      	mov	r3, r9
 8010d92:	aa4b      	add	r2, sp, #300	@ 0x12c
 8010d94:	a901      	add	r1, sp, #4
 8010d96:	4620      	mov	r0, r4
 8010d98:	47c0      	blx	r8
 8010d9a:	1e05      	subs	r5, r0, #0
 8010d9c:	db23      	blt.n	8010de6 <RunSequence+0x86>
 8010d9e:	4620      	mov	r0, r4
 8010da0:	aa4b      	add	r2, sp, #300	@ 0x12c
 8010da2:	a901      	add	r1, sp, #4
 8010da4:	f7ff ffd8 	bl	8010d58 <Argus_Core_SetSettingsSync>
 8010da8:	1e04      	subs	r4, r0, #0
 8010daa:	db16      	blt.n	8010dda <RunSequence+0x7a>
 8010dac:	21c3      	movs	r1, #195	@ 0xc3
 8010dae:	4638      	mov	r0, r7
 8010db0:	f008 fcec 	bl	801978c <Argus_Dev_ClearStatus>
 8010db4:	2d00      	cmp	r5, #0
 8010db6:	bf08      	it	eq
 8010db8:	4625      	moveq	r5, r4
 8010dba:	4628      	mov	r0, r5
 8010dbc:	f50d 7d7b 	add.w	sp, sp, #1004	@ 0x3ec
 8010dc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010dc4:	4602      	mov	r2, r0
 8010dc6:	4631      	mov	r1, r6
 8010dc8:	4811      	ldr	r0, [pc, #68]	@ (8010e10 <RunSequence+0xb0>)
 8010dca:	f7fd f8a1 	bl	800df10 <print>
 8010dce:	2502      	movs	r5, #2
 8010dd0:	4628      	mov	r0, r5
 8010dd2:	f50d 7d7b 	add.w	sp, sp, #1004	@ 0x3ec
 8010dd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010dda:	4622      	mov	r2, r4
 8010ddc:	4631      	mov	r1, r6
 8010dde:	480d      	ldr	r0, [pc, #52]	@ (8010e14 <RunSequence+0xb4>)
 8010de0:	f7fd f896 	bl	800df10 <print>
 8010de4:	e7e2      	b.n	8010dac <RunSequence+0x4c>
 8010de6:	462a      	mov	r2, r5
 8010de8:	4631      	mov	r1, r6
 8010dea:	480b      	ldr	r0, [pc, #44]	@ (8010e18 <RunSequence+0xb8>)
 8010dec:	f7fd f890 	bl	800df10 <print>
 8010df0:	4620      	mov	r0, r4
 8010df2:	aa4b      	add	r2, sp, #300	@ 0x12c
 8010df4:	a901      	add	r1, sp, #4
 8010df6:	f7ff ffaf 	bl	8010d58 <Argus_Core_SetSettingsSync>
 8010dfa:	1e04      	subs	r4, r0, #0
 8010dfc:	dbed      	blt.n	8010dda <RunSequence+0x7a>
 8010dfe:	21c3      	movs	r1, #195	@ 0xc3
 8010e00:	4638      	mov	r0, r7
 8010e02:	f008 fcc3 	bl	801978c <Argus_Dev_ClearStatus>
 8010e06:	4628      	mov	r0, r5
 8010e08:	f50d 7d7b 	add.w	sp, sp, #1004	@ 0x3ec
 8010e0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e10:	080282e0 	.word	0x080282e0
 8010e14:	08028338 	.word	0x08028338
 8010e18:	08028314 	.word	0x08028314

08010e1c <VsubCal_Sequence>:
 8010e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e20:	4680      	mov	r8, r0
 8010e22:	b0cc      	sub	sp, #304	@ 0x130
 8010e24:	4615      	mov	r5, r2
 8010e26:	a802      	add	r0, sp, #8
 8010e28:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8010e2c:	f012 fd69 	bl	8023902 <memcpy>
 8010e30:	f8d8 307c 	ldr.w	r3, [r8, #124]	@ 0x7c
 8010e34:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8010e38:	2600      	movs	r6, #0
 8010e3a:	f8c8 307c 	str.w	r3, [r8, #124]	@ 0x7c
 8010e3e:	462a      	mov	r2, r5
 8010e40:	a902      	add	r1, sp, #8
 8010e42:	4640      	mov	r0, r8
 8010e44:	f88d 60b4 	strb.w	r6, [sp, #180]	@ 0xb4
 8010e48:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8010e4c:	f7ff ff84 	bl	8010d58 <Argus_Core_SetSettingsSync>
 8010e50:	1e04      	subs	r4, r0, #0
 8010e52:	db60      	blt.n	8010f16 <VsubCal_Sequence+0xfa>
 8010e54:	f9b8 3330 	ldrsh.w	r3, [r8, #816]	@ 0x330
 8010e58:	f8ad 6002 	strh.w	r6, [sp, #2]
 8010e5c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8010e60:	4293      	cmp	r3, r2
 8010e62:	f8ad 6004 	strh.w	r6, [sp, #4]
 8010e66:	f8ad 6006 	strh.w	r6, [sp, #6]
 8010e6a:	d058      	beq.n	8010f1e <VsubCal_Sequence+0x102>
 8010e6c:	111f      	asrs	r7, r3, #4
 8010e6e:	f895 3267 	ldrb.w	r3, [r5, #615]	@ 0x267
 8010e72:	f895 6290 	ldrb.w	r6, [r5, #656]	@ 0x290
 8010e76:	fb13 f307 	smulbb	r3, r3, r7
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	f895 7291 	ldrb.w	r7, [r5, #657]	@ 0x291
 8010e80:	f280 8126 	bge.w	80110d0 <VsubCal_Sequence+0x2b4>
 8010e84:	425b      	negs	r3, r3
 8010e86:	f3c3 2280 	ubfx	r2, r3, #10, #1
 8010e8a:	eb02 23d3 	add.w	r3, r2, r3, lsr #11
 8010e8e:	1aff      	subs	r7, r7, r3
 8010e90:	b2ff      	uxtb	r7, r7
 8010e92:	42b7      	cmp	r7, r6
 8010e94:	f895 3266 	ldrb.w	r3, [r5, #614]	@ 0x266
 8010e98:	bf38      	it	cc
 8010e9a:	4637      	movcc	r7, r6
 8010e9c:	429f      	cmp	r7, r3
 8010e9e:	bf28      	it	cs
 8010ea0:	461f      	movcs	r7, r3
 8010ea2:	42b7      	cmp	r7, r6
 8010ea4:	f240 80e1 	bls.w	801106a <VsubCal_Sequence+0x24e>
 8010ea8:	f108 0804 	add.w	r8, r8, #4
 8010eac:	f10d 0102 	add.w	r1, sp, #2
 8010eb0:	4640      	mov	r0, r8
 8010eb2:	f00a f985 	bl	801b1c0 <Argus_Dev_BglMeasurement>
 8010eb6:	1e04      	subs	r4, r0, #0
 8010eb8:	f2c0 8111 	blt.w	80110de <VsubCal_Sequence+0x2c2>
 8010ebc:	f8b5 22b6 	ldrh.w	r2, [r5, #694]	@ 0x2b6
 8010ec0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010ec4:	429a      	cmp	r2, r3
 8010ec6:	f0c0 80d7 	bcc.w	8011078 <VsubCal_Sequence+0x25c>
 8010eca:	f8b5 32b4 	ldrh.w	r3, [r5, #692]	@ 0x2b4
 8010ece:	4632      	mov	r2, r6
 8010ed0:	a901      	add	r1, sp, #4
 8010ed2:	4640      	mov	r0, r8
 8010ed4:	f00a fade 	bl	801b494 <Argus_Dev_VsubMeasurement>
 8010ed8:	1e04      	subs	r4, r0, #0
 8010eda:	f2c0 80d9 	blt.w	8011090 <VsubCal_Sequence+0x274>
 8010ede:	42b7      	cmp	r7, r6
 8010ee0:	d809      	bhi.n	8010ef6 <VsubCal_Sequence+0xda>
 8010ee2:	e02c      	b.n	8010f3e <VsubCal_Sequence+0x122>
 8010ee4:	f8b5 1262 	ldrh.w	r1, [r5, #610]	@ 0x262
 8010ee8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010eec:	4291      	cmp	r1, r2
 8010eee:	d21b      	bcs.n	8010f28 <VsubCal_Sequence+0x10c>
 8010ef0:	b2df      	uxtb	r7, r3
 8010ef2:	42b7      	cmp	r7, r6
 8010ef4:	d923      	bls.n	8010f3e <VsubCal_Sequence+0x122>
 8010ef6:	2301      	movs	r3, #1
 8010ef8:	463a      	mov	r2, r7
 8010efa:	f10d 0106 	add.w	r1, sp, #6
 8010efe:	4640      	mov	r0, r8
 8010f00:	f00a fac8 	bl	801b494 <Argus_Dev_VsubMeasurement>
 8010f04:	1e04      	subs	r4, r0, #0
 8010f06:	f107 33ff 	add.w	r3, r7, #4294967295
 8010f0a:	daeb      	bge.n	8010ee4 <VsubCal_Sequence+0xc8>
 8010f0c:	4881      	ldr	r0, [pc, #516]	@ (8011114 <VsubCal_Sequence+0x2f8>)
 8010f0e:	4622      	mov	r2, r4
 8010f10:	4631      	mov	r1, r6
 8010f12:	f7fc fffd 	bl	800df10 <print>
 8010f16:	4620      	mov	r0, r4
 8010f18:	b04c      	add	sp, #304	@ 0x130
 8010f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f1e:	f895 6290 	ldrb.w	r6, [r5, #656]	@ 0x290
 8010f22:	f895 7291 	ldrb.w	r7, [r5, #657]	@ 0x291
 8010f26:	e7b4      	b.n	8010e92 <VsubCal_Sequence+0x76>
 8010f28:	f8b5 32b4 	ldrh.w	r3, [r5, #692]	@ 0x2b4
 8010f2c:	4640      	mov	r0, r8
 8010f2e:	463a      	mov	r2, r7
 8010f30:	f10d 0106 	add.w	r1, sp, #6
 8010f34:	f00a faae 	bl	801b494 <Argus_Dev_VsubMeasurement>
 8010f38:	1e04      	subs	r4, r0, #0
 8010f3a:	f2c0 80dc 	blt.w	80110f6 <VsubCal_Sequence+0x2da>
 8010f3e:	2f00      	cmp	r7, #0
 8010f40:	f000 80ac 	beq.w	801109c <VsubCal_Sequence+0x280>
 8010f44:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8010f48:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010f4c:	1bbe      	subs	r6, r7, r6
 8010f4e:	2e00      	cmp	r6, #0
 8010f50:	eba3 0002 	sub.w	r0, r3, r2
 8010f54:	f340 80d8 	ble.w	8011108 <VsubCal_Sequence+0x2ec>
 8010f58:	2800      	cmp	r0, #0
 8010f5a:	f340 80d5 	ble.w	8011108 <VsubCal_Sequence+0x2ec>
 8010f5e:	0043      	lsls	r3, r0, #1
 8010f60:	ebb3 4f06 	cmp.w	r3, r6, lsl #16
 8010f64:	ea4f 4106 	mov.w	r1, r6, lsl #16
 8010f68:	f0c0 80cb 	bcc.w	8011102 <VsubCal_Sequence+0x2e6>
 8010f6c:	1a5b      	subs	r3, r3, r1
 8010f6e:	005b      	lsls	r3, r3, #1
 8010f70:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8010f74:	d06a      	beq.n	801104c <VsubCal_Sequence+0x230>
 8010f76:	4299      	cmp	r1, r3
 8010f78:	bf9c      	itt	ls
 8010f7a:	1a5b      	subls	r3, r3, r1
 8010f7c:	f440 4080 	orrls.w	r0, r0, #16384	@ 0x4000
 8010f80:	005b      	lsls	r3, r3, #1
 8010f82:	d063      	beq.n	801104c <VsubCal_Sequence+0x230>
 8010f84:	4299      	cmp	r1, r3
 8010f86:	bf9c      	itt	ls
 8010f88:	1a5b      	subls	r3, r3, r1
 8010f8a:	f440 5000 	orrls.w	r0, r0, #8192	@ 0x2000
 8010f8e:	005b      	lsls	r3, r3, #1
 8010f90:	d05c      	beq.n	801104c <VsubCal_Sequence+0x230>
 8010f92:	4299      	cmp	r1, r3
 8010f94:	bf9c      	itt	ls
 8010f96:	1a5b      	subls	r3, r3, r1
 8010f98:	f440 5080 	orrls.w	r0, r0, #4096	@ 0x1000
 8010f9c:	005b      	lsls	r3, r3, #1
 8010f9e:	d055      	beq.n	801104c <VsubCal_Sequence+0x230>
 8010fa0:	4299      	cmp	r1, r3
 8010fa2:	bf9c      	itt	ls
 8010fa4:	1a5b      	subls	r3, r3, r1
 8010fa6:	f440 6000 	orrls.w	r0, r0, #2048	@ 0x800
 8010faa:	005b      	lsls	r3, r3, #1
 8010fac:	d04e      	beq.n	801104c <VsubCal_Sequence+0x230>
 8010fae:	4299      	cmp	r1, r3
 8010fb0:	bf9c      	itt	ls
 8010fb2:	1a5b      	subls	r3, r3, r1
 8010fb4:	f440 6080 	orrls.w	r0, r0, #1024	@ 0x400
 8010fb8:	005b      	lsls	r3, r3, #1
 8010fba:	d047      	beq.n	801104c <VsubCal_Sequence+0x230>
 8010fbc:	428b      	cmp	r3, r1
 8010fbe:	bf24      	itt	cs
 8010fc0:	1a5b      	subcs	r3, r3, r1
 8010fc2:	f440 7000 	orrcs.w	r0, r0, #512	@ 0x200
 8010fc6:	005b      	lsls	r3, r3, #1
 8010fc8:	d040      	beq.n	801104c <VsubCal_Sequence+0x230>
 8010fca:	4299      	cmp	r1, r3
 8010fcc:	bf9c      	itt	ls
 8010fce:	1a5b      	subls	r3, r3, r1
 8010fd0:	f440 7080 	orrls.w	r0, r0, #256	@ 0x100
 8010fd4:	005b      	lsls	r3, r3, #1
 8010fd6:	d039      	beq.n	801104c <VsubCal_Sequence+0x230>
 8010fd8:	428b      	cmp	r3, r1
 8010fda:	bf24      	itt	cs
 8010fdc:	1a5b      	subcs	r3, r3, r1
 8010fde:	f040 0080 	orrcs.w	r0, r0, #128	@ 0x80
 8010fe2:	005b      	lsls	r3, r3, #1
 8010fe4:	d032      	beq.n	801104c <VsubCal_Sequence+0x230>
 8010fe6:	4299      	cmp	r1, r3
 8010fe8:	bf9c      	itt	ls
 8010fea:	1a5b      	subls	r3, r3, r1
 8010fec:	f040 0040 	orrls.w	r0, r0, #64	@ 0x40
 8010ff0:	005b      	lsls	r3, r3, #1
 8010ff2:	d02b      	beq.n	801104c <VsubCal_Sequence+0x230>
 8010ff4:	4299      	cmp	r1, r3
 8010ff6:	bf9c      	itt	ls
 8010ff8:	1a5b      	subls	r3, r3, r1
 8010ffa:	f040 0020 	orrls.w	r0, r0, #32
 8010ffe:	005b      	lsls	r3, r3, #1
 8011000:	d024      	beq.n	801104c <VsubCal_Sequence+0x230>
 8011002:	4299      	cmp	r1, r3
 8011004:	bf9c      	itt	ls
 8011006:	1a5b      	subls	r3, r3, r1
 8011008:	f040 0010 	orrls.w	r0, r0, #16
 801100c:	005b      	lsls	r3, r3, #1
 801100e:	d01d      	beq.n	801104c <VsubCal_Sequence+0x230>
 8011010:	4299      	cmp	r1, r3
 8011012:	bf9c      	itt	ls
 8011014:	1a5b      	subls	r3, r3, r1
 8011016:	f040 0008 	orrls.w	r0, r0, #8
 801101a:	005b      	lsls	r3, r3, #1
 801101c:	d016      	beq.n	801104c <VsubCal_Sequence+0x230>
 801101e:	4299      	cmp	r1, r3
 8011020:	bf9c      	itt	ls
 8011022:	1a5b      	subls	r3, r3, r1
 8011024:	f040 0004 	orrls.w	r0, r0, #4
 8011028:	005b      	lsls	r3, r3, #1
 801102a:	d00f      	beq.n	801104c <VsubCal_Sequence+0x230>
 801102c:	4299      	cmp	r1, r3
 801102e:	bf9c      	itt	ls
 8011030:	1a5b      	subls	r3, r3, r1
 8011032:	f040 0002 	orrls.w	r0, r0, #2
 8011036:	005b      	lsls	r3, r3, #1
 8011038:	d008      	beq.n	801104c <VsubCal_Sequence+0x230>
 801103a:	4299      	cmp	r1, r3
 801103c:	bf9c      	itt	ls
 801103e:	1a5b      	subls	r3, r3, r1
 8011040:	f040 0001 	orrls.w	r0, r0, #1
 8011044:	ebb1 0f43 	cmp.w	r1, r3, lsl #1
 8011048:	bf98      	it	ls
 801104a:	3001      	addls	r0, #1
 801104c:	f8d5 3288 	ldr.w	r3, [r5, #648]	@ 0x288
 8011050:	f8a5 028e 	strh.w	r0, [r5, #654]	@ 0x28e
 8011054:	2400      	movs	r4, #0
 8011056:	f043 0303 	orr.w	r3, r3, #3
 801105a:	4620      	mov	r0, r4
 801105c:	f8a5 228c 	strh.w	r2, [r5, #652]	@ 0x28c
 8011060:	f8c5 3288 	str.w	r3, [r5, #648]	@ 0x288
 8011064:	b04c      	add	sp, #304	@ 0x130
 8011066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801106a:	4639      	mov	r1, r7
 801106c:	482a      	ldr	r0, [pc, #168]	@ (8011118 <VsubCal_Sequence+0x2fc>)
 801106e:	4632      	mov	r2, r6
 8011070:	f7fc ff4e 	bl	800df10 <print>
 8011074:	2700      	movs	r7, #0
 8011076:	e717      	b.n	8010ea8 <VsubCal_Sequence+0x8c>
 8011078:	4828      	ldr	r0, [pc, #160]	@ (801111c <VsubCal_Sequence+0x300>)
 801107a:	f7fc ff49 	bl	800df10 <print>
 801107e:	f8b5 32b4 	ldrh.w	r3, [r5, #692]	@ 0x2b4
 8011082:	4640      	mov	r0, r8
 8011084:	4632      	mov	r2, r6
 8011086:	a901      	add	r1, sp, #4
 8011088:	f00a fa04 	bl	801b494 <Argus_Dev_VsubMeasurement>
 801108c:	1e04      	subs	r4, r0, #0
 801108e:	da05      	bge.n	801109c <VsubCal_Sequence+0x280>
 8011090:	4622      	mov	r2, r4
 8011092:	4631      	mov	r1, r6
 8011094:	4822      	ldr	r0, [pc, #136]	@ (8011120 <VsubCal_Sequence+0x304>)
 8011096:	f7fc ff3b 	bl	800df10 <print>
 801109a:	e73c      	b.n	8010f16 <VsubCal_Sequence+0xfa>
 801109c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80110a0:	f895 22b8 	ldrb.w	r2, [r5, #696]	@ 0x2b8
 80110a4:	f8d5 1288 	ldr.w	r1, [r5, #648]	@ 0x288
 80110a8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80110ac:	fb03 f202 	mul.w	r2, r3, r2
 80110b0:	f3c2 13c0 	ubfx	r3, r2, #7, #1
 80110b4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80110b8:	2400      	movs	r4, #0
 80110ba:	4403      	add	r3, r0
 80110bc:	f041 0101 	orr.w	r1, r1, #1
 80110c0:	4620      	mov	r0, r4
 80110c2:	f8a5 328c 	strh.w	r3, [r5, #652]	@ 0x28c
 80110c6:	f8c5 1288 	str.w	r1, [r5, #648]	@ 0x288
 80110ca:	b04c      	add	sp, #304	@ 0x130
 80110cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110d0:	f3c3 2280 	ubfx	r2, r3, #10, #1
 80110d4:	eb02 23d3 	add.w	r3, r2, r3, lsr #11
 80110d8:	441f      	add	r7, r3
 80110da:	b2ff      	uxtb	r7, r7
 80110dc:	e6d9      	b.n	8010e92 <VsubCal_Sequence+0x76>
 80110de:	4621      	mov	r1, r4
 80110e0:	4810      	ldr	r0, [pc, #64]	@ (8011124 <VsubCal_Sequence+0x308>)
 80110e2:	f7fc ff15 	bl	800df10 <print>
 80110e6:	21c3      	movs	r1, #195	@ 0xc3
 80110e8:	4640      	mov	r0, r8
 80110ea:	f008 fb4f 	bl	801978c <Argus_Dev_ClearStatus>
 80110ee:	4620      	mov	r0, r4
 80110f0:	b04c      	add	sp, #304	@ 0x130
 80110f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110f6:	4622      	mov	r2, r4
 80110f8:	4639      	mov	r1, r7
 80110fa:	480b      	ldr	r0, [pc, #44]	@ (8011128 <VsubCal_Sequence+0x30c>)
 80110fc:	f7fc ff08 	bl	800df10 <print>
 8011100:	e709      	b.n	8010f16 <VsubCal_Sequence+0xfa>
 8011102:	0083      	lsls	r3, r0, #2
 8011104:	2000      	movs	r0, #0
 8011106:	e736      	b.n	8010f76 <VsubCal_Sequence+0x15a>
 8011108:	4808      	ldr	r0, [pc, #32]	@ (801112c <VsubCal_Sequence+0x310>)
 801110a:	f7fc ff01 	bl	800df10 <print>
 801110e:	f06f 0473 	mvn.w	r4, #115	@ 0x73
 8011112:	e700      	b.n	8010f16 <VsubCal_Sequence+0xfa>
 8011114:	080284e4 	.word	0x080284e4
 8011118:	08028374 	.word	0x08028374
 801111c:	0802843c 	.word	0x0802843c
 8011120:	08028490 	.word	0x08028490
 8011124:	080283f0 	.word	0x080283f0
 8011128:	08028540 	.word	0x08028540
 801112c:	08028594 	.word	0x08028594

08011130 <Argus_Core_ExecuteVsubCalibrationSequence>:
 8011130:	f8d0 3120 	ldr.w	r3, [r0, #288]	@ 0x120
 8011134:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8011138:	b123      	cbz	r3, 8011144 <Argus_Core_ExecuteVsubCalibrationSequence+0x14>
 801113a:	4a06      	ldr	r2, [pc, #24]	@ (8011154 <Argus_Core_ExecuteVsubCalibrationSequence+0x24>)
 801113c:	4906      	ldr	r1, [pc, #24]	@ (8011158 <Argus_Core_ExecuteVsubCalibrationSequence+0x28>)
 801113e:	2300      	movs	r3, #0
 8011140:	f7ff be0e 	b.w	8010d60 <RunSequence>
 8011144:	b510      	push	{r4, lr}
 8011146:	4805      	ldr	r0, [pc, #20]	@ (801115c <Argus_Core_ExecuteVsubCalibrationSequence+0x2c>)
 8011148:	f7fc fee2 	bl	800df10 <print>
 801114c:	f06f 0004 	mvn.w	r0, #4
 8011150:	bd10      	pop	{r4, pc}
 8011152:	bf00      	nop
 8011154:	08028620 	.word	0x08028620
 8011158:	08010e1d 	.word	0x08010e1d
 801115c:	080285e4 	.word	0x080285e4

08011160 <MeasurementFinish>:
 8011160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011164:	2300      	movs	r3, #0
 8011166:	f8d1 8010 	ldr.w	r8, [r1, #16]
 801116a:	610b      	str	r3, [r1, #16]
 801116c:	460c      	mov	r4, r1
 801116e:	4605      	mov	r5, r0
 8011170:	b082      	sub	sp, #8
 8011172:	f8d1 03ac 	ldr.w	r0, [r1, #940]	@ 0x3ac
 8011176:	21c4      	movs	r1, #196	@ 0xc4
 8011178:	e9d4 67e9 	ldrd	r6, r7, [r4, #932]	@ 0x3a4
 801117c:	f008 fb06 	bl	801978c <Argus_Dev_ClearStatus>
 8011180:	2302      	movs	r3, #2
 8011182:	f115 0f72 	cmn.w	r5, #114	@ 0x72
 8011186:	f888 31c5 	strb.w	r3, [r8, #453]	@ 0x1c5
 801118a:	d04c      	beq.n	8011226 <MeasurementFinish+0xc6>
 801118c:	f025 0304 	bic.w	r3, r5, #4
 8011190:	3306      	adds	r3, #6
 8011192:	d048      	beq.n	8011226 <MeasurementFinish+0xc6>
 8011194:	2d00      	cmp	r5, #0
 8011196:	db56      	blt.n	8011246 <MeasurementFinish+0xe6>
 8011198:	a901      	add	r1, sp, #4
 801119a:	4668      	mov	r0, sp
 801119c:	e9d8 a901 	ldrd	sl, r9, [r8, #4]
 80111a0:	f7fc fdde 	bl	800dd60 <Timer_GetCounterValue>
 80111a4:	e9dd 1300 	ldrd	r1, r3, [sp]
 80111a8:	4599      	cmp	r9, r3
 80111aa:	d85d      	bhi.n	8011268 <MeasurementFinish+0x108>
 80111ac:	eba1 010a 	sub.w	r1, r1, sl
 80111b0:	eba3 0909 	sub.w	r9, r3, r9
 80111b4:	f241 03c5 	movw	r3, #4293	@ 0x10c5
 80111b8:	4299      	cmp	r1, r3
 80111ba:	d951      	bls.n	8011260 <MeasurementFinish+0x100>
 80111bc:	f241 03c6 	movw	r3, #4294	@ 0x10c6
 80111c0:	4299      	cmp	r1, r3
 80111c2:	d04a      	beq.n	801125a <MeasurementFinish+0xfa>
 80111c4:	f04f 39ff 	mov.w	r9, #4294967295
 80111c8:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80111cc:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 80111d0:	eba9 0101 	sub.w	r1, r9, r1
 80111d4:	f500 70b4 	add.w	r0, r0, #360	@ 0x168
 80111d8:	f005 fc38 	bl	8016a4c <Argus_Dca_UpdateTimings>
 80111dc:	b9dd      	cbnz	r5, 8011216 <MeasurementFinish+0xb6>
 80111de:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 80111e2:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 80111e6:	f010 feeb 	bl	8021fc0 <ADS_CheckTimeout>
 80111ea:	f7fc fa0b 	bl	800d604 <IRQ_LOCK>
 80111ee:	7923      	ldrb	r3, [r4, #4]
 80111f0:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 80111f4:	b373      	cbz	r3, 8011254 <MeasurementFinish+0xf4>
 80111f6:	f04f 0800 	mov.w	r8, #0
 80111fa:	f884 8004 	strb.w	r8, [r4, #4]
 80111fe:	f7fc f9df 	bl	800d5c0 <IRQ_UNLOCK>
 8011202:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 8011206:	21c4      	movs	r1, #196	@ 0xc4
 8011208:	f008 fa8a 	bl	8019720 <Argus_Dev_SetStatus>
 801120c:	4605      	mov	r5, r0
 801120e:	b188      	cbz	r0, 8011234 <MeasurementFinish+0xd4>
 8011210:	2301      	movs	r3, #1
 8011212:	7123      	strb	r3, [r4, #4]
 8011214:	4645      	mov	r5, r8
 8011216:	b196      	cbz	r6, 801123e <MeasurementFinish+0xde>
 8011218:	4639      	mov	r1, r7
 801121a:	4628      	mov	r0, r5
 801121c:	4633      	mov	r3, r6
 801121e:	b002      	add	sp, #8
 8011220:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011224:	4718      	bx	r3
 8011226:	f8d8 3000 	ldr.w	r3, [r8]
 801122a:	2b00      	cmp	r3, #0
 801122c:	dbd7      	blt.n	80111de <MeasurementFinish+0x7e>
 801122e:	f8c8 5000 	str.w	r5, [r8]
 8011232:	e7d4      	b.n	80111de <MeasurementFinish+0x7e>
 8011234:	4620      	mov	r0, r4
 8011236:	f000 f921 	bl	801147c <Argus_Measurement_Start.part.0>
 801123a:	2e00      	cmp	r6, #0
 801123c:	d1ec      	bne.n	8011218 <MeasurementFinish+0xb8>
 801123e:	4628      	mov	r0, r5
 8011240:	b002      	add	sp, #8
 8011242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011246:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 801124a:	f8c8 5000 	str.w	r5, [r8]
 801124e:	f008 fad1 	bl	80197f4 <Argus_Dev_Abort>
 8011252:	e7e0      	b.n	8011216 <MeasurementFinish+0xb6>
 8011254:	f7fc f9b4 	bl	800d5c0 <IRQ_UNLOCK>
 8011258:	e7dd      	b.n	8011216 <MeasurementFinish+0xb6>
 801125a:	4b08      	ldr	r3, [pc, #32]	@ (801127c <MeasurementFinish+0x11c>)
 801125c:	4599      	cmp	r9, r3
 801125e:	d8b1      	bhi.n	80111c4 <MeasurementFinish+0x64>
 8011260:	4b07      	ldr	r3, [pc, #28]	@ (8011280 <MeasurementFinish+0x120>)
 8011262:	fb03 9901 	mla	r9, r3, r1, r9
 8011266:	e7af      	b.n	80111c8 <MeasurementFinish+0x68>
 8011268:	f503 2374 	add.w	r3, r3, #999424	@ 0xf4000
 801126c:	3901      	subs	r1, #1
 801126e:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8011272:	eba1 010a 	sub.w	r1, r1, sl
 8011276:	eba3 0909 	sub.w	r9, r3, r9
 801127a:	e79b      	b.n	80111b4 <MeasurementFinish+0x54>
 801127c:	000ec27e 	.word	0x000ec27e
 8011280:	000f4240 	.word	0x000f4240

08011284 <MeasurementStartIntegration>:
 8011284:	2800      	cmp	r0, #0
 8011286:	b510      	push	{r4, lr}
 8011288:	460c      	mov	r4, r1
 801128a:	da04      	bge.n	8011296 <MeasurementStartIntegration+0x12>
 801128c:	4621      	mov	r1, r4
 801128e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011292:	f7ff bf65 	b.w	8011160 <MeasurementFinish>
 8011296:	4905      	ldr	r1, [pc, #20]	@ (80112ac <MeasurementStartIntegration+0x28>)
 8011298:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 801129c:	4622      	mov	r2, r4
 801129e:	f009 fc17 	bl	801aad0 <Argus_Dev_StartIntegration>
 80112a2:	1e03      	subs	r3, r0, #0
 80112a4:	db00      	blt.n	80112a8 <MeasurementStartIntegration+0x24>
 80112a6:	bd10      	pop	{r4, pc}
 80112a8:	4618      	mov	r0, r3
 80112aa:	e7ef      	b.n	801128c <MeasurementStartIntegration+0x8>
 80112ac:	080113b1 	.word	0x080113b1

080112b0 <MeasurementReadDataFinished>:
 80112b0:	b510      	push	{r4, lr}
 80112b2:	460c      	mov	r4, r1
 80112b4:	b950      	cbnz	r0, 80112cc <MeasurementReadDataFinished+0x1c>
 80112b6:	690a      	ldr	r2, [r1, #16]
 80112b8:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 80112bc:	6993      	ldr	r3, [r2, #24]
 80112be:	4907      	ldr	r1, [pc, #28]	@ (80112dc <MeasurementReadDataFinished+0x2c>)
 80112c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80112c4:	6193      	str	r3, [r2, #24]
 80112c6:	4622      	mov	r2, r4
 80112c8:	f00a faf8 	bl	801b8bc <Argus_Dev_StartAuxMeasurement>
 80112cc:	2800      	cmp	r0, #0
 80112ce:	db00      	blt.n	80112d2 <MeasurementReadDataFinished+0x22>
 80112d0:	bd10      	pop	{r4, pc}
 80112d2:	4621      	mov	r1, r4
 80112d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80112d8:	f7ff bf42 	b.w	8011160 <MeasurementFinish>
 80112dc:	08011341 	.word	0x08011341

080112e0 <MeasurementReadAuxChannelsFinished>:
 80112e0:	b510      	push	{r4, lr}
 80112e2:	460c      	mov	r4, r1
 80112e4:	b950      	cbnz	r0, 80112fc <MeasurementReadAuxChannelsFinished+0x1c>
 80112e6:	690a      	ldr	r2, [r1, #16]
 80112e8:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 80112ec:	6993      	ldr	r3, [r2, #24]
 80112ee:	4907      	ldr	r1, [pc, #28]	@ (801130c <MeasurementReadAuxChannelsFinished+0x2c>)
 80112f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80112f4:	6193      	str	r3, [r2, #24]
 80112f6:	4622      	mov	r2, r4
 80112f8:	f009 fca6 	bl	801ac48 <Argus_Dev_DetuneClock>
 80112fc:	2800      	cmp	r0, #0
 80112fe:	db00      	blt.n	8011302 <MeasurementReadAuxChannelsFinished+0x22>
 8011300:	bd10      	pop	{r4, pc}
 8011302:	4621      	mov	r1, r4
 8011304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011308:	f7ff bf2a 	b.w	8011160 <MeasurementFinish>
 801130c:	08011311 	.word	0x08011311

08011310 <MeasurementUpdateConfig>:
 8011310:	2800      	cmp	r0, #0
 8011312:	b510      	push	{r4, lr}
 8011314:	460c      	mov	r4, r1
 8011316:	da04      	bge.n	8011322 <MeasurementUpdateConfig+0x12>
 8011318:	4621      	mov	r1, r4
 801131a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801131e:	f7ff bf1f 	b.w	8011160 <MeasurementFinish>
 8011322:	4a06      	ldr	r2, [pc, #24]	@ (801133c <MeasurementUpdateConfig+0x2c>)
 8011324:	f8d1 03ac 	ldr.w	r0, [r1, #940]	@ 0x3ac
 8011328:	460b      	mov	r3, r1
 801132a:	2101      	movs	r1, #1
 801132c:	f009 f92c 	bl	801a588 <Argus_Dev_Apply>
 8011330:	1e02      	subs	r2, r0, #0
 8011332:	db00      	blt.n	8011336 <MeasurementUpdateConfig+0x26>
 8011334:	bd10      	pop	{r4, pc}
 8011336:	4610      	mov	r0, r2
 8011338:	e7ee      	b.n	8011318 <MeasurementUpdateConfig+0x8>
 801133a:	bf00      	nop
 801133c:	08011161 	.word	0x08011161

08011340 <MeasurementReadAuxChannels>:
 8011340:	b510      	push	{r4, lr}
 8011342:	460c      	mov	r4, r1
 8011344:	b082      	sub	sp, #8
 8011346:	b1d0      	cbz	r0, 801137e <MeasurementReadAuxChannels+0x3e>
 8011348:	f110 0f72 	cmn.w	r0, #114	@ 0x72
 801134c:	d007      	beq.n	801135e <MeasurementReadAuxChannels+0x1e>
 801134e:	1d83      	adds	r3, r0, #6
 8011350:	d005      	beq.n	801135e <MeasurementReadAuxChannels+0x1e>
 8011352:	4602      	mov	r2, r0
 8011354:	2a00      	cmp	r2, #0
 8011356:	db1f      	blt.n	8011398 <MeasurementReadAuxChannels+0x58>
 8011358:	4610      	mov	r0, r2
 801135a:	b002      	add	sp, #8
 801135c:	bd10      	pop	{r4, pc}
 801135e:	6923      	ldr	r3, [r4, #16]
 8011360:	4a11      	ldr	r2, [pc, #68]	@ (80113a8 <MeasurementReadAuxChannels+0x68>)
 8011362:	6018      	str	r0, [r3, #0]
 8011364:	2101      	movs	r1, #1
 8011366:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 801136a:	4623      	mov	r3, r4
 801136c:	f009 f90c 	bl	801a588 <Argus_Dev_Apply>
 8011370:	1e02      	subs	r2, r0, #0
 8011372:	daf1      	bge.n	8011358 <MeasurementReadAuxChannels+0x18>
 8011374:	4621      	mov	r1, r4
 8011376:	f7ff fef3 	bl	8011160 <MeasurementFinish>
 801137a:	4602      	mov	r2, r0
 801137c:	e7ea      	b.n	8011354 <MeasurementReadAuxChannels+0x14>
 801137e:	6909      	ldr	r1, [r1, #16]
 8011380:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 8011384:	4b09      	ldr	r3, [pc, #36]	@ (80113ac <MeasurementReadAuxChannels+0x6c>)
 8011386:	9400      	str	r4, [sp, #0]
 8011388:	2205      	movs	r2, #5
 801138a:	f201 11b5 	addw	r1, r1, #437	@ 0x1b5
 801138e:	f008 fa37 	bl	8019800 <Argus_Dev_ReadData>
 8011392:	4602      	mov	r2, r0
 8011394:	2a00      	cmp	r2, #0
 8011396:	dadf      	bge.n	8011358 <MeasurementReadAuxChannels+0x18>
 8011398:	4621      	mov	r1, r4
 801139a:	4610      	mov	r0, r2
 801139c:	b002      	add	sp, #8
 801139e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113a2:	f7ff bedd 	b.w	8011160 <MeasurementFinish>
 80113a6:	bf00      	nop
 80113a8:	08011161 	.word	0x08011161
 80113ac:	080112e1 	.word	0x080112e1

080113b0 <MeasurementReadData>:
 80113b0:	b530      	push	{r4, r5, lr}
 80113b2:	460d      	mov	r5, r1
 80113b4:	6909      	ldr	r1, [r1, #16]
 80113b6:	4604      	mov	r4, r0
 80113b8:	b083      	sub	sp, #12
 80113ba:	f8d5 03ac 	ldr.w	r0, [r5, #940]	@ 0x3ac
 80113be:	310c      	adds	r1, #12
 80113c0:	f008 fff2 	bl	801a3a8 <Argus_Dev_GetFrameConfig>
 80113c4:	b1cc      	cbz	r4, 80113fa <MeasurementReadData+0x4a>
 80113c6:	f114 0f72 	cmn.w	r4, #114	@ 0x72
 80113ca:	d006      	beq.n	80113da <MeasurementReadData+0x2a>
 80113cc:	1da3      	adds	r3, r4, #6
 80113ce:	d004      	beq.n	80113da <MeasurementReadData+0x2a>
 80113d0:	2c00      	cmp	r4, #0
 80113d2:	db47      	blt.n	8011464 <MeasurementReadData+0xb4>
 80113d4:	4620      	mov	r0, r4
 80113d6:	b003      	add	sp, #12
 80113d8:	bd30      	pop	{r4, r5, pc}
 80113da:	692b      	ldr	r3, [r5, #16]
 80113dc:	4a25      	ldr	r2, [pc, #148]	@ (8011474 <MeasurementReadData+0xc4>)
 80113de:	601c      	str	r4, [r3, #0]
 80113e0:	f8d5 03ac 	ldr.w	r0, [r5, #940]	@ 0x3ac
 80113e4:	462b      	mov	r3, r5
 80113e6:	2101      	movs	r1, #1
 80113e8:	f009 f8ce 	bl	801a588 <Argus_Dev_Apply>
 80113ec:	1e04      	subs	r4, r0, #0
 80113ee:	daf1      	bge.n	80113d4 <MeasurementReadData+0x24>
 80113f0:	4629      	mov	r1, r5
 80113f2:	f7ff feb5 	bl	8011160 <MeasurementFinish>
 80113f6:	4604      	mov	r4, r0
 80113f8:	e7ea      	b.n	80113d0 <MeasurementReadData+0x20>
 80113fa:	6929      	ldr	r1, [r5, #16]
 80113fc:	690a      	ldr	r2, [r1, #16]
 80113fe:	0853      	lsrs	r3, r2, #1
 8011400:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8011404:	1ad2      	subs	r2, r2, r3
 8011406:	0890      	lsrs	r0, r2, #2
 8011408:	694b      	ldr	r3, [r1, #20]
 801140a:	9500      	str	r5, [sp, #0]
 801140c:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 8011410:	f002 3233 	and.w	r2, r2, #858993459	@ 0x33333333
 8011414:	4402      	add	r2, r0
 8011416:	0858      	lsrs	r0, r3, #1
 8011418:	f000 3055 	and.w	r0, r0, #1431655765	@ 0x55555555
 801141c:	1a18      	subs	r0, r3, r0
 801141e:	f000 3333 	and.w	r3, r0, #858993459	@ 0x33333333
 8011422:	0880      	lsrs	r0, r0, #2
 8011424:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 8011428:	4403      	add	r3, r0
 801142a:	eb02 1212 	add.w	r2, r2, r2, lsr #4
 801142e:	f002 320f 	and.w	r2, r2, #252645135	@ 0xf0f0f0f
 8011432:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 8011436:	eb02 2202 	add.w	r2, r2, r2, lsl #8
 801143a:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 801143e:	eb02 4202 	add.w	r2, r2, r2, lsl #16
 8011442:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 8011446:	eb03 4303 	add.w	r3, r3, r3, lsl #16
 801144a:	0e12      	lsrs	r2, r2, #24
 801144c:	eb02 6213 	add.w	r2, r2, r3, lsr #24
 8011450:	f8d5 03ac 	ldr.w	r0, [r5, #940]	@ 0x3ac
 8011454:	4b08      	ldr	r3, [pc, #32]	@ (8011478 <MeasurementReadData+0xc8>)
 8011456:	3128      	adds	r1, #40	@ 0x28
 8011458:	0092      	lsls	r2, r2, #2
 801145a:	f008 f9d1 	bl	8019800 <Argus_Dev_ReadData>
 801145e:	4604      	mov	r4, r0
 8011460:	2c00      	cmp	r4, #0
 8011462:	dab7      	bge.n	80113d4 <MeasurementReadData+0x24>
 8011464:	4629      	mov	r1, r5
 8011466:	4620      	mov	r0, r4
 8011468:	b003      	add	sp, #12
 801146a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801146e:	f7ff be77 	b.w	8011160 <MeasurementFinish>
 8011472:	bf00      	nop
 8011474:	08011161 	.word	0x08011161
 8011478:	080112b1 	.word	0x080112b1

0801147c <Argus_Measurement_Start.part.0>:
 801147c:	b530      	push	{r4, r5, lr}
 801147e:	6903      	ldr	r3, [r0, #16]
 8011480:	b083      	sub	sp, #12
 8011482:	4604      	mov	r4, r0
 8011484:	2b00      	cmp	r3, #0
 8011486:	d143      	bne.n	8011510 <Argus_Measurement_Start.part.0+0x94>
 8011488:	f890 31d9 	ldrb.w	r3, [r0, #473]	@ 0x1d9
 801148c:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8011490:	b36b      	cbz	r3, 80114ee <Argus_Measurement_Start.part.0+0x72>
 8011492:	f890 33a1 	ldrb.w	r3, [r0, #929]	@ 0x3a1
 8011496:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 801149a:	2b00      	cmp	r3, #0
 801149c:	d143      	bne.n	8011526 <Argus_Measurement_Start.part.0+0xaa>
 801149e:	f500 70f0 	add.w	r0, r0, #480	@ 0x1e0
 80114a2:	f504 71f2 	add.w	r1, r4, #484	@ 0x1e4
 80114a6:	e9cd 0100 	strd	r0, r1, [sp]
 80114aa:	f7fc fc59 	bl	800dd60 <Timer_GetCounterValue>
 80114ae:	f504 73ee 	add.w	r3, r4, #476	@ 0x1dc
 80114b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80114b6:	6123      	str	r3, [r4, #16]
 80114b8:	2301      	movs	r3, #1
 80114ba:	f8c4 51dc 	str.w	r5, [r4, #476]	@ 0x1dc
 80114be:	f884 33a1 	strb.w	r3, [r4, #929]	@ 0x3a1
 80114c2:	f7fc fc4d 	bl	800dd60 <Timer_GetCounterValue>
 80114c6:	6923      	ldr	r3, [r4, #16]
 80114c8:	4a1d      	ldr	r2, [pc, #116]	@ (8011540 <Argus_Measurement_Start.part.0+0xc4>)
 80114ca:	3304      	adds	r3, #4
 80114cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80114d0:	f104 0508 	add.w	r5, r4, #8
 80114d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80114d8:	4623      	mov	r3, r4
 80114da:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 80114de:	2100      	movs	r1, #0
 80114e0:	f009 f852 	bl	801a588 <Argus_Dev_Apply>
 80114e4:	1e05      	subs	r5, r0, #0
 80114e6:	db20      	blt.n	801152a <Argus_Measurement_Start.part.0+0xae>
 80114e8:	4628      	mov	r0, r5
 80114ea:	b003      	add	sp, #12
 80114ec:	bd30      	pop	{r4, r5, pc}
 80114ee:	3018      	adds	r0, #24
 80114f0:	f104 011c 	add.w	r1, r4, #28
 80114f4:	e9cd 0100 	strd	r0, r1, [sp]
 80114f8:	f7fc fc32 	bl	800dd60 <Timer_GetCounterValue>
 80114fc:	f104 0314 	add.w	r3, r4, #20
 8011500:	6123      	str	r3, [r4, #16]
 8011502:	2301      	movs	r3, #1
 8011504:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011508:	6165      	str	r5, [r4, #20]
 801150a:	f884 31d9 	strb.w	r3, [r4, #473]	@ 0x1d9
 801150e:	e7d8      	b.n	80114c2 <Argus_Measurement_Start.part.0+0x46>
 8011510:	2502      	movs	r5, #2
 8011512:	2301      	movs	r3, #1
 8011514:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 8011518:	7123      	strb	r3, [r4, #4]
 801151a:	21c4      	movs	r1, #196	@ 0xc4
 801151c:	f008 f936 	bl	801978c <Argus_Dev_ClearStatus>
 8011520:	4628      	mov	r0, r5
 8011522:	b003      	add	sp, #12
 8011524:	bd30      	pop	{r4, r5, pc}
 8011526:	2568      	movs	r5, #104	@ 0x68
 8011528:	e7f3      	b.n	8011512 <Argus_Measurement_Start.part.0+0x96>
 801152a:	4629      	mov	r1, r5
 801152c:	4805      	ldr	r0, [pc, #20]	@ (8011544 <Argus_Measurement_Start.part.0+0xc8>)
 801152e:	f7fc fcef 	bl	800df10 <print>
 8011532:	4621      	mov	r1, r4
 8011534:	4628      	mov	r0, r5
 8011536:	b003      	add	sp, #12
 8011538:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801153c:	f7ff be10 	b.w	8011160 <MeasurementFinish>
 8011540:	08011285 	.word	0x08011285
 8011544:	08028640 	.word	0x08028640

08011548 <Argus_Measurement_Init>:
 8011548:	b538      	push	{r3, r4, r5, lr}
 801154a:	4604      	mov	r4, r0
 801154c:	460d      	mov	r5, r1
 801154e:	f44f 726c 	mov.w	r2, #944	@ 0x3b0
 8011552:	2100      	movs	r1, #0
 8011554:	f012 f945 	bl	80237e2 <memset>
 8011558:	f8c4 53ac 	str.w	r5, [r4, #940]	@ 0x3ac
 801155c:	4620      	mov	r0, r4
 801155e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011562:	f000 b9b5 	b.w	80118d0 <TimerMngr_subscribeArgus>
 8011566:	bf00      	nop

08011568 <Argus_Measurement_Deinit>:
 8011568:	f000 b9d6 	b.w	8011918 <TimerMngr_unsubscribeArgus>

0801156c <Argus_Measurement_Abort>:
 801156c:	b538      	push	{r3, r4, r5, lr}
 801156e:	4604      	mov	r4, r0
 8011570:	2500      	movs	r5, #0
 8011572:	f8c0 53a4 	str.w	r5, [r0, #932]	@ 0x3a4
 8011576:	6005      	str	r5, [r0, #0]
 8011578:	f000 f93c 	bl	80117f4 <TimerMngr_UpdateTimings>
 801157c:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 8011580:	7125      	strb	r5, [r4, #4]
 8011582:	f008 f937 	bl	80197f4 <Argus_Dev_Abort>
 8011586:	f884 51d9 	strb.w	r5, [r4, #473]	@ 0x1d9
 801158a:	f884 53a1 	strb.w	r5, [r4, #929]	@ 0x3a1
 801158e:	bd38      	pop	{r3, r4, r5, pc}

08011590 <Argus_Measurement_GetTimerInterval>:
 8011590:	6800      	ldr	r0, [r0, #0]
 8011592:	4770      	bx	lr

08011594 <Argus_Measurement_IsActive>:
 8011594:	6803      	ldr	r3, [r0, #0]
 8011596:	b913      	cbnz	r3, 801159e <Argus_Measurement_IsActive+0xa>
 8011598:	f890 31d9 	ldrb.w	r3, [r0, #473]	@ 0x1d9
 801159c:	b10b      	cbz	r3, 80115a2 <Argus_Measurement_IsActive+0xe>
 801159e:	2001      	movs	r0, #1
 80115a0:	4770      	bx	lr
 80115a2:	f890 03a1 	ldrb.w	r0, [r0, #929]	@ 0x3a1
 80115a6:	3800      	subs	r0, #0
 80115a8:	bf18      	it	ne
 80115aa:	2001      	movne	r0, #1
 80115ac:	4770      	bx	lr
 80115ae:	bf00      	nop

080115b0 <Argus_Measurement_CheckTimeout>:
 80115b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115b2:	6905      	ldr	r5, [r0, #16]
 80115b4:	b083      	sub	sp, #12
 80115b6:	b11d      	cbz	r5, 80115c0 <Argus_Measurement_CheckTimeout+0x10>
 80115b8:	f895 31c5 	ldrb.w	r3, [r5, #453]	@ 0x1c5
 80115bc:	2b01      	cmp	r3, #1
 80115be:	d003      	beq.n	80115c8 <Argus_Measurement_CheckTimeout+0x18>
 80115c0:	2400      	movs	r4, #0
 80115c2:	4620      	mov	r0, r4
 80115c4:	b003      	add	sp, #12
 80115c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115c8:	f8d0 33ac 	ldr.w	r3, [r0, #940]	@ 0x3ac
 80115cc:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80115d0:	681e      	ldr	r6, [r3, #0]
 80115d2:	a901      	add	r1, sp, #4
 80115d4:	4604      	mov	r4, r0
 80115d6:	0076      	lsls	r6, r6, #1
 80115d8:	4668      	mov	r0, sp
 80115da:	f7fc fbc1 	bl	800dd60 <Timer_GetCounterValue>
 80115de:	f506 36c3 	add.w	r6, r6, #99840	@ 0x18600
 80115e2:	4a2e      	ldr	r2, [pc, #184]	@ (801169c <Argus_Measurement_CheckTimeout+0xec>)
 80115e4:	492e      	ldr	r1, [pc, #184]	@ (80116a0 <Argus_Measurement_CheckTimeout+0xf0>)
 80115e6:	68a8      	ldr	r0, [r5, #8]
 80115e8:	f8d5 e004 	ldr.w	lr, [r5, #4]
 80115ec:	36a0      	adds	r6, #160	@ 0xa0
 80115ee:	fba2 3206 	umull	r3, r2, r2, r6
 80115f2:	0c93      	lsrs	r3, r2, #18
 80115f4:	fb01 6313 	mls	r3, r1, r3, r6
 80115f8:	4403      	add	r3, r0
 80115fa:	3901      	subs	r1, #1
 80115fc:	428b      	cmp	r3, r1
 80115fe:	e9dd 7c00 	ldrd	r7, ip, [sp]
 8011602:	eb0e 4292 	add.w	r2, lr, r2, lsr #18
 8011606:	d904      	bls.n	8011612 <Argus_Measurement_CheckTimeout+0x62>
 8011608:	f5a3 2374 	sub.w	r3, r3, #999424	@ 0xf4000
 801160c:	3201      	adds	r2, #1
 801160e:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8011612:	4596      	cmp	lr, r2
 8011614:	d022      	beq.n	801165c <Argus_Measurement_CheckTimeout+0xac>
 8011616:	bf34      	ite	cc
 8011618:	2101      	movcc	r1, #1
 801161a:	2100      	movcs	r1, #0
 801161c:	b319      	cbz	r1, 8011666 <Argus_Measurement_CheckTimeout+0xb6>
 801161e:	45be      	cmp	lr, r7
 8011620:	d035      	beq.n	801168e <Argus_Measurement_CheckTimeout+0xde>
 8011622:	bf34      	ite	cc
 8011624:	2001      	movcc	r0, #1
 8011626:	2000      	movcs	r0, #0
 8011628:	b130      	cbz	r0, 8011638 <Argus_Measurement_CheckTimeout+0x88>
 801162a:	42ba      	cmp	r2, r7
 801162c:	d022      	beq.n	8011674 <Argus_Measurement_CheckTimeout+0xc4>
 801162e:	bf34      	ite	cc
 8011630:	2301      	movcc	r3, #1
 8011632:	2300      	movcs	r3, #0
 8011634:	2b00      	cmp	r3, #0
 8011636:	d0c3      	beq.n	80115c0 <Argus_Measurement_CheckTimeout+0x10>
 8011638:	f06f 0705 	mvn.w	r7, #5
 801163c:	4631      	mov	r1, r6
 801163e:	4819      	ldr	r0, [pc, #100]	@ (80116a4 <Argus_Measurement_CheckTimeout+0xf4>)
 8011640:	602f      	str	r7, [r5, #0]
 8011642:	f7fc fc65 	bl	800df10 <print>
 8011646:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 801164a:	f008 f8d3 	bl	80197f4 <Argus_Dev_Abort>
 801164e:	1e04      	subs	r4, r0, #0
 8011650:	da22      	bge.n	8011698 <Argus_Measurement_CheckTimeout+0xe8>
 8011652:	4621      	mov	r1, r4
 8011654:	4814      	ldr	r0, [pc, #80]	@ (80116a8 <Argus_Measurement_CheckTimeout+0xf8>)
 8011656:	f7fc fc5b 	bl	800df10 <print>
 801165a:	e7b2      	b.n	80115c2 <Argus_Measurement_CheckTimeout+0x12>
 801165c:	4298      	cmp	r0, r3
 801165e:	bf8c      	ite	hi
 8011660:	2100      	movhi	r1, #0
 8011662:	2101      	movls	r1, #1
 8011664:	e7da      	b.n	801161c <Argus_Measurement_CheckTimeout+0x6c>
 8011666:	45be      	cmp	lr, r7
 8011668:	d00e      	beq.n	8011688 <Argus_Measurement_CheckTimeout+0xd8>
 801166a:	d3a9      	bcc.n	80115c0 <Argus_Measurement_CheckTimeout+0x10>
 801166c:	42ba      	cmp	r2, r7
 801166e:	d008      	beq.n	8011682 <Argus_Measurement_CheckTimeout+0xd2>
 8011670:	d2a6      	bcs.n	80115c0 <Argus_Measurement_CheckTimeout+0x10>
 8011672:	e7e1      	b.n	8011638 <Argus_Measurement_CheckTimeout+0x88>
 8011674:	459c      	cmp	ip, r3
 8011676:	bf34      	ite	cc
 8011678:	2300      	movcc	r3, #0
 801167a:	2301      	movcs	r3, #1
 801167c:	2b00      	cmp	r3, #0
 801167e:	d09f      	beq.n	80115c0 <Argus_Measurement_CheckTimeout+0x10>
 8011680:	e7da      	b.n	8011638 <Argus_Measurement_CheckTimeout+0x88>
 8011682:	459c      	cmp	ip, r3
 8011684:	d2d8      	bcs.n	8011638 <Argus_Measurement_CheckTimeout+0x88>
 8011686:	e79b      	b.n	80115c0 <Argus_Measurement_CheckTimeout+0x10>
 8011688:	4560      	cmp	r0, ip
 801168a:	d999      	bls.n	80115c0 <Argus_Measurement_CheckTimeout+0x10>
 801168c:	e7ee      	b.n	801166c <Argus_Measurement_CheckTimeout+0xbc>
 801168e:	4560      	cmp	r0, ip
 8011690:	bf8c      	ite	hi
 8011692:	2000      	movhi	r0, #0
 8011694:	2001      	movls	r0, #1
 8011696:	e7c7      	b.n	8011628 <Argus_Measurement_CheckTimeout+0x78>
 8011698:	463c      	mov	r4, r7
 801169a:	e792      	b.n	80115c2 <Argus_Measurement_CheckTimeout+0x12>
 801169c:	431bde83 	.word	0x431bde83
 80116a0:	000f4240 	.word	0x000f4240
 80116a4:	08028688 	.word	0x08028688
 80116a8:	080286b0 	.word	0x080286b0

080116ac <Argus_Measurement_StartTimer>:
 80116ac:	b510      	push	{r4, lr}
 80116ae:	4604      	mov	r4, r0
 80116b0:	f8d0 03ac 	ldr.w	r0, [r0, #940]	@ 0x3ac
 80116b4:	e9c4 12e9 	strd	r1, r2, [r4, #932]	@ 0x3a4
 80116b8:	f008 f87c 	bl	80197b4 <Argus_Dev_GetStatus>
 80116bc:	2800      	cmp	r0, #0
 80116be:	db09      	blt.n	80116d4 <Argus_Measurement_StartTimer+0x28>
 80116c0:	f8d4 33ac 	ldr.w	r3, [r4, #940]	@ 0x3ac
 80116c4:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	6023      	str	r3, [r4, #0]
 80116cc:	f000 f892 	bl	80117f4 <TimerMngr_UpdateTimings>
 80116d0:	2800      	cmp	r0, #0
 80116d2:	db00      	blt.n	80116d6 <Argus_Measurement_StartTimer+0x2a>
 80116d4:	bd10      	pop	{r4, pc}
 80116d6:	2300      	movs	r3, #0
 80116d8:	e9c4 33e9 	strd	r3, r3, [r4, #932]	@ 0x3a4
 80116dc:	6023      	str	r3, [r4, #0]
 80116de:	bd10      	pop	{r4, pc}

080116e0 <Argus_Measurement_TimerTick>:
 80116e0:	b538      	push	{r3, r4, r5, lr}
 80116e2:	6803      	ldr	r3, [r0, #0]
 80116e4:	b903      	cbnz	r3, 80116e8 <Argus_Measurement_TimerTick+0x8>
 80116e6:	bd38      	pop	{r3, r4, r5, pc}
 80116e8:	4604      	mov	r4, r0
 80116ea:	f8d0 03ac 	ldr.w	r0, [r0, #940]	@ 0x3ac
 80116ee:	2501      	movs	r5, #1
 80116f0:	7125      	strb	r5, [r4, #4]
 80116f2:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 80116f6:	f010 fc63 	bl	8021fc0 <ADS_CheckTimeout>
 80116fa:	f7fb ff83 	bl	800d604 <IRQ_LOCK>
 80116fe:	7923      	ldrb	r3, [r4, #4]
 8011700:	b183      	cbz	r3, 8011724 <Argus_Measurement_TimerTick+0x44>
 8011702:	2300      	movs	r3, #0
 8011704:	7123      	strb	r3, [r4, #4]
 8011706:	f7fb ff5b 	bl	800d5c0 <IRQ_UNLOCK>
 801170a:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 801170e:	21c4      	movs	r1, #196	@ 0xc4
 8011710:	f008 f806 	bl	8019720 <Argus_Dev_SetStatus>
 8011714:	b108      	cbz	r0, 801171a <Argus_Measurement_TimerTick+0x3a>
 8011716:	7125      	strb	r5, [r4, #4]
 8011718:	bd38      	pop	{r3, r4, r5, pc}
 801171a:	4620      	mov	r0, r4
 801171c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011720:	f7ff beac 	b.w	801147c <Argus_Measurement_Start.part.0>
 8011724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011728:	f7fb bf4a 	b.w	800d5c0 <IRQ_UNLOCK>

0801172c <Argus_Measurement_GetRawDataBuffer>:
 801172c:	f890 31d9 	ldrb.w	r3, [r0, #473]	@ 0x1d9
 8011730:	2b02      	cmp	r3, #2
 8011732:	d00d      	beq.n	8011750 <Argus_Measurement_GetRawDataBuffer+0x24>
 8011734:	f890 31d9 	ldrb.w	r3, [r0, #473]	@ 0x1d9
 8011738:	2b02      	cmp	r3, #2
 801173a:	d013      	beq.n	8011764 <Argus_Measurement_GetRawDataBuffer+0x38>
 801173c:	f890 33a1 	ldrb.w	r3, [r0, #929]	@ 0x3a1
 8011740:	2b02      	cmp	r3, #2
 8011742:	d114      	bne.n	801176e <Argus_Measurement_GetRawDataBuffer+0x42>
 8011744:	f500 70ee 	add.w	r0, r0, #476	@ 0x1dc
 8011748:	2301      	movs	r3, #1
 801174a:	f880 31c5 	strb.w	r3, [r0, #453]	@ 0x1c5
 801174e:	4770      	bx	lr
 8011750:	f890 33a1 	ldrb.w	r3, [r0, #929]	@ 0x3a1
 8011754:	2b02      	cmp	r3, #2
 8011756:	d1ed      	bne.n	8011734 <Argus_Measurement_GetRawDataBuffer+0x8>
 8011758:	6982      	ldr	r2, [r0, #24]
 801175a:	f8d0 31e0 	ldr.w	r3, [r0, #480]	@ 0x1e0
 801175e:	429a      	cmp	r2, r3
 8011760:	d007      	beq.n	8011772 <Argus_Measurement_GetRawDataBuffer+0x46>
 8011762:	d8ef      	bhi.n	8011744 <Argus_Measurement_GetRawDataBuffer+0x18>
 8011764:	3014      	adds	r0, #20
 8011766:	2301      	movs	r3, #1
 8011768:	f880 31c5 	strb.w	r3, [r0, #453]	@ 0x1c5
 801176c:	4770      	bx	lr
 801176e:	2000      	movs	r0, #0
 8011770:	4770      	bx	lr
 8011772:	69c2      	ldr	r2, [r0, #28]
 8011774:	f8d0 31e4 	ldr.w	r3, [r0, #484]	@ 0x1e4
 8011778:	429a      	cmp	r2, r3
 801177a:	d2e3      	bcs.n	8011744 <Argus_Measurement_GetRawDataBuffer+0x18>
 801177c:	e7f2      	b.n	8011764 <Argus_Measurement_GetRawDataBuffer+0x38>
 801177e:	bf00      	nop

08011780 <Argus_Measurement_Start>:
 8011780:	b510      	push	{r4, lr}
 8011782:	4604      	mov	r4, r0
 8011784:	f8d0 03ac 	ldr.w	r0, [r0, #940]	@ 0x3ac
 8011788:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 801178c:	f010 fc18 	bl	8021fc0 <ADS_CheckTimeout>
 8011790:	f7fb ff38 	bl	800d604 <IRQ_LOCK>
 8011794:	7923      	ldrb	r3, [r4, #4]
 8011796:	b18b      	cbz	r3, 80117bc <Argus_Measurement_Start+0x3c>
 8011798:	2300      	movs	r3, #0
 801179a:	7123      	strb	r3, [r4, #4]
 801179c:	f7fb ff10 	bl	800d5c0 <IRQ_UNLOCK>
 80117a0:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 80117a4:	21c4      	movs	r1, #196	@ 0xc4
 80117a6:	f007 ffbb 	bl	8019720 <Argus_Dev_SetStatus>
 80117aa:	b110      	cbz	r0, 80117b2 <Argus_Measurement_Start+0x32>
 80117ac:	2301      	movs	r3, #1
 80117ae:	7123      	strb	r3, [r4, #4]
 80117b0:	bd10      	pop	{r4, pc}
 80117b2:	4620      	mov	r0, r4
 80117b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117b8:	f7ff be60 	b.w	801147c <Argus_Measurement_Start.part.0>
 80117bc:	f7fb ff00 	bl	800d5c0 <IRQ_UNLOCK>
 80117c0:	2069      	movs	r0, #105	@ 0x69
 80117c2:	bd10      	pop	{r4, pc}

080117c4 <TimerCallback>:
 80117c4:	4b08      	ldr	r3, [pc, #32]	@ (80117e8 <TimerCallback+0x24>)
 80117c6:	4a09      	ldr	r2, [pc, #36]	@ (80117ec <TimerCallback+0x28>)
 80117c8:	6819      	ldr	r1, [r3, #0]
 80117ca:	4809      	ldr	r0, [pc, #36]	@ (80117f0 <TimerCallback+0x2c>)
 80117cc:	b410      	push	{r4}
 80117ce:	6814      	ldr	r4, [r2, #0]
 80117d0:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80117d4:	1c4a      	adds	r2, r1, #1
 80117d6:	42a2      	cmp	r2, r4
 80117d8:	601a      	str	r2, [r3, #0]
 80117da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80117de:	bf24      	itt	cs
 80117e0:	2200      	movcs	r2, #0
 80117e2:	601a      	strcs	r2, [r3, #0]
 80117e4:	f7ff bf7c 	b.w	80116e0 <Argus_Measurement_TimerTick>
 80117e8:	24000a2c 	.word	0x24000a2c
 80117ec:	24000a28 	.word	0x24000a28
 80117f0:	24000a18 	.word	0x24000a18

080117f4 <TimerMngr_UpdateTimings>:
 80117f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117f8:	f8df a0cc 	ldr.w	sl, [pc, #204]	@ 80118c8 <TimerMngr_UpdateTimings+0xd4>
 80117fc:	4e2d      	ldr	r6, [pc, #180]	@ (80118b4 <TimerMngr_UpdateTimings+0xc0>)
 80117fe:	f8da 3000 	ldr.w	r3, [sl]
 8011802:	2400      	movs	r4, #0
 8011804:	6034      	str	r4, [r6, #0]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d046      	beq.n	8011898 <TimerMngr_UpdateTimings+0xa4>
 801180a:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 80118cc <TimerMngr_UpdateTimings+0xd8>
 801180e:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 80118b8 <TimerMngr_UpdateTimings+0xc4>
 8011812:	4627      	mov	r7, r4
 8011814:	f858 5b04 	ldr.w	r5, [r8], #4
 8011818:	4628      	mov	r0, r5
 801181a:	f7ff feb9 	bl	8011590 <Argus_Measurement_GetTimerInterval>
 801181e:	b188      	cbz	r0, 8011844 <TimerMngr_UpdateTimings+0x50>
 8011820:	6833      	ldr	r3, [r6, #0]
 8011822:	1c5a      	adds	r2, r3, #1
 8011824:	f849 5023 	str.w	r5, [r9, r3, lsl #2]
 8011828:	f8da 3000 	ldr.w	r3, [sl]
 801182c:	6032      	str	r2, [r6, #0]
 801182e:	3401      	adds	r4, #1
 8011830:	429c      	cmp	r4, r3
 8011832:	d23b      	bcs.n	80118ac <TimerMngr_UpdateTimings+0xb8>
 8011834:	f858 5b04 	ldr.w	r5, [r8], #4
 8011838:	4607      	mov	r7, r0
 801183a:	4628      	mov	r0, r5
 801183c:	f7ff fea8 	bl	8011590 <Argus_Measurement_GetTimerInterval>
 8011840:	2800      	cmp	r0, #0
 8011842:	d1ed      	bne.n	8011820 <TimerMngr_UpdateTimings+0x2c>
 8011844:	f8da 3000 	ldr.w	r3, [sl]
 8011848:	3401      	adds	r4, #1
 801184a:	42a3      	cmp	r3, r4
 801184c:	d8e2      	bhi.n	8011814 <TimerMngr_UpdateTimings+0x20>
 801184e:	6833      	ldr	r3, [r6, #0]
 8011850:	b1a3      	cbz	r3, 801187c <TimerMngr_UpdateTimings+0x88>
 8011852:	4d19      	ldr	r5, [pc, #100]	@ (80118b8 <TimerMngr_UpdateTimings+0xc4>)
 8011854:	2400      	movs	r4, #0
 8011856:	e002      	b.n	801185e <TimerMngr_UpdateTimings+0x6a>
 8011858:	6833      	ldr	r3, [r6, #0]
 801185a:	42a3      	cmp	r3, r4
 801185c:	d90e      	bls.n	801187c <TimerMngr_UpdateTimings+0x88>
 801185e:	f855 0b04 	ldr.w	r0, [r5], #4
 8011862:	f7ff fe95 	bl	8011590 <Argus_Measurement_GetTimerInterval>
 8011866:	42b8      	cmp	r0, r7
 8011868:	f104 0401 	add.w	r4, r4, #1
 801186c:	d0f4      	beq.n	8011858 <TimerMngr_UpdateTimings+0x64>
 801186e:	4813      	ldr	r0, [pc, #76]	@ (80118bc <TimerMngr_UpdateTimings+0xc8>)
 8011870:	f7fc fb4e 	bl	800df10 <print>
 8011874:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8011878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801187c:	b167      	cbz	r7, 8011898 <TimerMngr_UpdateTimings+0xa4>
 801187e:	4810      	ldr	r0, [pc, #64]	@ (80118c0 <TimerMngr_UpdateTimings+0xcc>)
 8011880:	f7fc fb0a 	bl	800de98 <Timer_SetCallback>
 8011884:	2800      	cmp	r0, #0
 8011886:	d1f7      	bne.n	8011878 <TimerMngr_UpdateTimings+0x84>
 8011888:	6833      	ldr	r3, [r6, #0]
 801188a:	4601      	mov	r1, r0
 801188c:	fbb7 f0f3 	udiv	r0, r7, r3
 8011890:	f7fc fa8e 	bl	800ddb0 <Timer_SetInterval>
 8011894:	b128      	cbz	r0, 80118a2 <TimerMngr_UpdateTimings+0xae>
 8011896:	e7ef      	b.n	8011878 <TimerMngr_UpdateTimings+0x84>
 8011898:	2000      	movs	r0, #0
 801189a:	f7fc fafd 	bl	800de98 <Timer_SetCallback>
 801189e:	2800      	cmp	r0, #0
 80118a0:	d1ea      	bne.n	8011878 <TimerMngr_UpdateTimings+0x84>
 80118a2:	4b08      	ldr	r3, [pc, #32]	@ (80118c4 <TimerMngr_UpdateTimings+0xd0>)
 80118a4:	2000      	movs	r0, #0
 80118a6:	6018      	str	r0, [r3, #0]
 80118a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118ac:	4607      	mov	r7, r0
 80118ae:	2a00      	cmp	r2, #0
 80118b0:	d1cf      	bne.n	8011852 <TimerMngr_UpdateTimings+0x5e>
 80118b2:	e7e4      	b.n	801187e <TimerMngr_UpdateTimings+0x8a>
 80118b4:	24000a28 	.word	0x24000a28
 80118b8:	24000a18 	.word	0x24000a18
 80118bc:	080286dc 	.word	0x080286dc
 80118c0:	080117c5 	.word	0x080117c5
 80118c4:	24000a2c 	.word	0x24000a2c
 80118c8:	24000a40 	.word	0x24000a40
 80118cc:	24000a30 	.word	0x24000a30

080118d0 <TimerMngr_subscribeArgus>:
 80118d0:	490f      	ldr	r1, [pc, #60]	@ (8011910 <TimerMngr_subscribeArgus+0x40>)
 80118d2:	4a10      	ldr	r2, [pc, #64]	@ (8011914 <TimerMngr_subscribeArgus+0x44>)
 80118d4:	680b      	ldr	r3, [r1, #0]
 80118d6:	b410      	push	{r4}
 80118d8:	b1c3      	cbz	r3, 801190c <TimerMngr_subscribeArgus+0x3c>
 80118da:	6814      	ldr	r4, [r2, #0]
 80118dc:	4284      	cmp	r4, r0
 80118de:	d012      	beq.n	8011906 <TimerMngr_subscribeArgus+0x36>
 80118e0:	2b01      	cmp	r3, #1
 80118e2:	d00c      	beq.n	80118fe <TimerMngr_subscribeArgus+0x2e>
 80118e4:	6854      	ldr	r4, [r2, #4]
 80118e6:	42a0      	cmp	r0, r4
 80118e8:	d00d      	beq.n	8011906 <TimerMngr_subscribeArgus+0x36>
 80118ea:	2b02      	cmp	r3, #2
 80118ec:	d007      	beq.n	80118fe <TimerMngr_subscribeArgus+0x2e>
 80118ee:	6894      	ldr	r4, [r2, #8]
 80118f0:	42a0      	cmp	r0, r4
 80118f2:	d008      	beq.n	8011906 <TimerMngr_subscribeArgus+0x36>
 80118f4:	2b03      	cmp	r3, #3
 80118f6:	d002      	beq.n	80118fe <TimerMngr_subscribeArgus+0x2e>
 80118f8:	68d4      	ldr	r4, [r2, #12]
 80118fa:	4284      	cmp	r4, r0
 80118fc:	d003      	beq.n	8011906 <TimerMngr_subscribeArgus+0x36>
 80118fe:	1c5c      	adds	r4, r3, #1
 8011900:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8011904:	600c      	str	r4, [r1, #0]
 8011906:	f85d 4b04 	ldr.w	r4, [sp], #4
 801190a:	4770      	bx	lr
 801190c:	2401      	movs	r4, #1
 801190e:	e7f7      	b.n	8011900 <TimerMngr_subscribeArgus+0x30>
 8011910:	24000a40 	.word	0x24000a40
 8011914:	24000a30 	.word	0x24000a30

08011918 <TimerMngr_unsubscribeArgus>:
 8011918:	b538      	push	{r3, r4, r5, lr}
 801191a:	4d19      	ldr	r5, [pc, #100]	@ (8011980 <TimerMngr_unsubscribeArgus+0x68>)
 801191c:	682c      	ldr	r4, [r5, #0]
 801191e:	b1ac      	cbz	r4, 801194c <TimerMngr_unsubscribeArgus+0x34>
 8011920:	4a18      	ldr	r2, [pc, #96]	@ (8011984 <TimerMngr_unsubscribeArgus+0x6c>)
 8011922:	6811      	ldr	r1, [r2, #0]
 8011924:	4288      	cmp	r0, r1
 8011926:	d012      	beq.n	801194e <TimerMngr_unsubscribeArgus+0x36>
 8011928:	2c01      	cmp	r4, #1
 801192a:	d00f      	beq.n	801194c <TimerMngr_unsubscribeArgus+0x34>
 801192c:	6851      	ldr	r1, [r2, #4]
 801192e:	4288      	cmp	r0, r1
 8011930:	d020      	beq.n	8011974 <TimerMngr_unsubscribeArgus+0x5c>
 8011932:	2c02      	cmp	r4, #2
 8011934:	d00a      	beq.n	801194c <TimerMngr_unsubscribeArgus+0x34>
 8011936:	6891      	ldr	r1, [r2, #8]
 8011938:	4288      	cmp	r0, r1
 801193a:	d01e      	beq.n	801197a <TimerMngr_unsubscribeArgus+0x62>
 801193c:	2c03      	cmp	r4, #3
 801193e:	d005      	beq.n	801194c <TimerMngr_unsubscribeArgus+0x34>
 8011940:	68d1      	ldr	r1, [r2, #12]
 8011942:	4281      	cmp	r1, r0
 8011944:	bf08      	it	eq
 8011946:	f04f 0c03 	moveq.w	ip, #3
 801194a:	d002      	beq.n	8011952 <TimerMngr_unsubscribeArgus+0x3a>
 801194c:	bd38      	pop	{r3, r4, r5, pc}
 801194e:	f04f 0c00 	mov.w	ip, #0
 8011952:	f10c 0101 	add.w	r1, ip, #1
 8011956:	42a1      	cmp	r1, r4
 8011958:	f104 34ff 	add.w	r4, r4, #4294967295
 801195c:	d208      	bcs.n	8011970 <TimerMngr_unsubscribeArgus+0x58>
 801195e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8011962:	eb02 008c 	add.w	r0, r2, ip, lsl #2
 8011966:	eba4 020c 	sub.w	r2, r4, ip
 801196a:	0092      	lsls	r2, r2, #2
 801196c:	f011 ff1f 	bl	80237ae <memmove>
 8011970:	602c      	str	r4, [r5, #0]
 8011972:	bd38      	pop	{r3, r4, r5, pc}
 8011974:	f04f 0c01 	mov.w	ip, #1
 8011978:	e7eb      	b.n	8011952 <TimerMngr_unsubscribeArgus+0x3a>
 801197a:	f04f 0c02 	mov.w	ip, #2
 801197e:	e7e8      	b.n	8011952 <TimerMngr_unsubscribeArgus+0x3a>
 8011980:	24000a40 	.word	0x24000a40
 8011984:	24000a30 	.word	0x24000a30

08011988 <ApplyPhaseEvaluation>:
 8011988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801198c:	460c      	mov	r4, r1
 801198e:	f5ad 7d15 	sub.w	sp, sp, #596	@ 0x254
 8011992:	f8d0 3354 	ldr.w	r3, [r0, #852]	@ 0x354
 8011996:	920d      	str	r2, [sp, #52]	@ 0x34
 8011998:	8ba2      	ldrh	r2, [r4, #28]
 801199a:	9005      	str	r0, [sp, #20]
 801199c:	0992      	lsrs	r2, r2, #6
 801199e:	2a01      	cmp	r2, #1
 80119a0:	f8d0 036c 	ldr.w	r0, [r0, #876]	@ 0x36c
 80119a4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80119a6:	bf38      	it	cc
 80119a8:	2201      	movcc	r2, #1
 80119aa:	2a20      	cmp	r2, #32
 80119ac:	bf94      	ite	ls
 80119ae:	1880      	addls	r0, r0, r2
 80119b0:	3020      	addhi	r0, #32
 80119b2:	7b1b      	ldrb	r3, [r3, #12]
 80119b4:	910c      	str	r1, [sp, #48]	@ 0x30
 80119b6:	8bc9      	ldrh	r1, [r1, #30]
 80119b8:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 80119bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80119be:	fb01 f303 	mul.w	r3, r1, r3
 80119c2:	030a      	lsls	r2, r1, #12
 80119c4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80119c8:	00db      	lsls	r3, r3, #3
 80119ca:	f8d4 01cc 	ldr.w	r0, [r4, #460]	@ 0x1cc
 80119ce:	9304      	str	r3, [sp, #16]
 80119d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80119d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80119d8:	3301      	adds	r3, #1
 80119da:	085b      	lsrs	r3, r3, #1
 80119dc:	9006      	str	r0, [sp, #24]
 80119de:	920a      	str	r2, [sp, #40]	@ 0x28
 80119e0:	9308      	str	r3, [sp, #32]
 80119e2:	2800      	cmp	r0, #0
 80119e4:	f000 863a 	beq.w	801265c <ApplyPhaseEvaluation+0xcd4>
 80119e8:	ab12      	add	r3, sp, #72	@ 0x48
 80119ea:	1d05      	adds	r5, r0, #4
 80119ec:	930e      	str	r3, [sp, #56]	@ 0x38
 80119ee:	4620      	mov	r0, r4
 80119f0:	e9d0 b204 	ldrd	fp, r2, [r0, #16]
 80119f4:	0853      	lsrs	r3, r2, #1
 80119f6:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 80119fa:	1ad3      	subs	r3, r2, r3
 80119fc:	0899      	lsrs	r1, r3, #2
 80119fe:	f001 3133 	and.w	r1, r1, #858993459	@ 0x33333333
 8011a02:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8011a06:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8011a0a:	440b      	add	r3, r1
 8011a0c:	f002 3255 	and.w	r2, r2, #1431655765	@ 0x55555555
 8011a10:	ebab 0202 	sub.w	r2, fp, r2
 8011a14:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 8011a18:	f003 340f 	and.w	r4, r3, #252645135	@ 0xf0f0f0f
 8011a1c:	0893      	lsrs	r3, r2, #2
 8011a1e:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8011a22:	f002 3233 	and.w	r2, r2, #858993459	@ 0x33333333
 8011a26:	4413      	add	r3, r2
 8011a28:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 8011a2c:	eb04 2404 	add.w	r4, r4, r4, lsl #8
 8011a30:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8011a34:	eb04 4404 	add.w	r4, r4, r4, lsl #16
 8011a38:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 8011a3c:	eb03 4303 	add.w	r3, r3, r3, lsl #16
 8011a40:	0e24      	lsrs	r4, r4, #24
 8011a42:	eb04 6413 	add.w	r4, r4, r3, lsr #24
 8011a46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011a48:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8011a4c:	691a      	ldr	r2, [r3, #16]
 8011a4e:	9207      	str	r2, [sp, #28]
 8011a50:	3028      	adds	r0, #40	@ 0x28
 8011a52:	3329      	adds	r3, #41	@ 0x29
 8011a54:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 8011a58:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 8011a70 <ApplyPhaseEvaluation+0xe8>
 8011a5c:	9010      	str	r0, [sp, #64]	@ 0x40
 8011a5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011a60:	aa54      	add	r2, sp, #336	@ 0x150
 8011a62:	f50d 7a14 	add.w	sl, sp, #592	@ 0x250
 8011a66:	2100      	movs	r1, #0
 8011a68:	9403      	str	r4, [sp, #12]
 8011a6a:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
 8011a6e:	e010      	b.n	8011a92 <ApplyPhaseEvaluation+0x10a>
	...
 8011a78:	ed02 7b02 	vstr	d7, [r2, #-8]
 8011a7c:	3208      	adds	r2, #8
 8011a7e:	f04f 0301 	mov.w	r3, #1
 8011a82:	4592      	cmp	sl, r2
 8011a84:	7203      	strb	r3, [r0, #8]
 8011a86:	f101 0101 	add.w	r1, r1, #1
 8011a8a:	f100 000c 	add.w	r0, r0, #12
 8011a8e:	f000 80cc 	beq.w	8011c2a <ApplyPhaseEvaluation+0x2a2>
 8011a92:	fa2b f301 	lsr.w	r3, fp, r1
 8011a96:	07dc      	lsls	r4, r3, #31
 8011a98:	d5ee      	bpl.n	8011a78 <ApplyPhaseEvaluation+0xf0>
 8011a9a:	ea6f 0351 	mvn.w	r3, r1, lsr #1
 8011a9e:	f003 060e 	and.w	r6, r3, #14
 8011aa2:	00cb      	lsls	r3, r1, #3
 8011aa4:	f003 0310 	and.w	r3, r3, #16
 8011aa8:	4333      	orrs	r3, r6
 8011aaa:	f001 0601 	and.w	r6, r1, #1
 8011aae:	4333      	orrs	r3, r6
 8011ab0:	f04f 34ff 	mov.w	r4, #4294967295
 8011ab4:	9e07      	ldr	r6, [sp, #28]
 8011ab6:	fa04 f303 	lsl.w	r3, r4, r3
 8011aba:	ea26 0603 	bic.w	r6, r6, r3
 8011abe:	0873      	lsrs	r3, r6, #1
 8011ac0:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8011ac4:	1af3      	subs	r3, r6, r3
 8011ac6:	089e      	lsrs	r6, r3, #2
 8011ac8:	f006 3633 	and.w	r6, r6, #858993459	@ 0x33333333
 8011acc:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8011ad0:	4433      	add	r3, r6
 8011ad2:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 8011ad6:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8011ada:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 8011ade:	eb03 4303 	add.w	r3, r3, r3, lsl #16
 8011ae2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8011ae4:	9c03      	ldr	r4, [sp, #12]
 8011ae6:	0e1b      	lsrs	r3, r3, #24
 8011ae8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011aec:	18f7      	adds	r7, r6, r3
 8011aee:	5cf6      	ldrb	r6, [r6, r3]
 8011af0:	787b      	ldrb	r3, [r7, #1]
 8011af2:	021b      	lsls	r3, r3, #8
 8011af4:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8011af8:	78be      	ldrb	r6, [r7, #2]
 8011afa:	4333      	orrs	r3, r6
 8011afc:	f413 0f40 	tst.w	r3, #12582912	@ 0xc00000
 8011b00:	eb07 0e04 	add.w	lr, r7, r4
 8011b04:	f3c3 0915 	ubfx	r9, r3, #0, #22
 8011b08:	f040 8210 	bne.w	8011f2c <ApplyPhaseEvaluation+0x5a4>
 8011b0c:	9e04      	ldr	r6, [sp, #16]
 8011b0e:	454e      	cmp	r6, r9
 8011b10:	f200 820c 	bhi.w	8011f2c <ApplyPhaseEvaluation+0x5a4>
 8011b14:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011b16:	454c      	cmp	r4, r9
 8011b18:	bf34      	ite	cc
 8011b1a:	f04f 0c02 	movcc.w	ip, #2
 8011b1e:	f04f 0c00 	movcs.w	ip, #0
 8011b22:	9c03      	ldr	r4, [sp, #12]
 8011b24:	602b      	str	r3, [r5, #0]
 8011b26:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8011b2a:	5d3b      	ldrb	r3, [r7, r4]
 8011b2c:	f89e 8002 	ldrb.w	r8, [lr, #2]
 8011b30:	0236      	lsls	r6, r6, #8
 8011b32:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8011b36:	f416 0f40 	tst.w	r6, #12582912	@ 0xc00000
 8011b3a:	ea46 0808 	orr.w	r8, r6, r8
 8011b3e:	eb0e 0304 	add.w	r3, lr, r4
 8011b42:	f040 81f0 	bne.w	8011f26 <ApplyPhaseEvaluation+0x59e>
 8011b46:	9c04      	ldr	r4, [sp, #16]
 8011b48:	f3c8 0615 	ubfx	r6, r8, #0, #22
 8011b4c:	42b4      	cmp	r4, r6
 8011b4e:	f200 81ea 	bhi.w	8011f26 <ApplyPhaseEvaluation+0x59e>
 8011b52:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011b54:	42b4      	cmp	r4, r6
 8011b56:	bf38      	it	cc
 8011b58:	f04f 0c02 	movcc.w	ip, #2
 8011b5c:	9c03      	ldr	r4, [sp, #12]
 8011b5e:	f8c5 8004 	str.w	r8, [r5, #4]
 8011b62:	f817 6014 	ldrb.w	r6, [r7, r4, lsl #1]
 8011b66:	785f      	ldrb	r7, [r3, #1]
 8011b68:	023f      	lsls	r7, r7, #8
 8011b6a:	ea47 4706 	orr.w	r7, r7, r6, lsl #16
 8011b6e:	789e      	ldrb	r6, [r3, #2]
 8011b70:	4337      	orrs	r7, r6
 8011b72:	f417 0f40 	tst.w	r7, #12582912	@ 0xc00000
 8011b76:	4423      	add	r3, r4
 8011b78:	f3c7 0615 	ubfx	r6, r7, #0, #22
 8011b7c:	f040 81d0 	bne.w	8011f20 <ApplyPhaseEvaluation+0x598>
 8011b80:	9c04      	ldr	r4, [sp, #16]
 8011b82:	42b4      	cmp	r4, r6
 8011b84:	f200 81cc 	bhi.w	8011f20 <ApplyPhaseEvaluation+0x598>
 8011b88:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011b8a:	42b4      	cmp	r4, r6
 8011b8c:	bf38      	it	cc
 8011b8e:	f04f 0c02 	movcc.w	ip, #2
 8011b92:	60af      	str	r7, [r5, #8]
 8011b94:	9c03      	ldr	r4, [sp, #12]
 8011b96:	785f      	ldrb	r7, [r3, #1]
 8011b98:	f81e e014 	ldrb.w	lr, [lr, r4, lsl #1]
 8011b9c:	789b      	ldrb	r3, [r3, #2]
 8011b9e:	023f      	lsls	r7, r7, #8
 8011ba0:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 8011ba4:	f417 0f40 	tst.w	r7, #12582912	@ 0xc00000
 8011ba8:	ea43 0307 	orr.w	r3, r3, r7
 8011bac:	f040 81b5 	bne.w	8011f1a <ApplyPhaseEvaluation+0x592>
 8011bb0:	9c04      	ldr	r4, [sp, #16]
 8011bb2:	f3c3 0715 	ubfx	r7, r3, #0, #22
 8011bb6:	42bc      	cmp	r4, r7
 8011bb8:	f200 81af 	bhi.w	8011f1a <ApplyPhaseEvaluation+0x592>
 8011bbc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011bbe:	42bc      	cmp	r4, r7
 8011bc0:	bf38      	it	cc
 8011bc2:	f04f 0c02 	movcc.w	ip, #2
 8011bc6:	9c08      	ldr	r4, [sp, #32]
 8011bc8:	60eb      	str	r3, [r5, #12]
 8011bca:	eba6 0609 	sub.w	r6, r6, r9
 8011bce:	fb04 f606 	mul.w	r6, r4, r6
 8011bd2:	f842 6c08 	str.w	r6, [r2, #-8]
 8011bd6:	68eb      	ldr	r3, [r5, #12]
 8011bd8:	686f      	ldr	r7, [r5, #4]
 8011bda:	f880 c008 	strb.w	ip, [r0, #8]
 8011bde:	f3c7 0715 	ubfx	r7, r7, #0, #22
 8011be2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011be6:	1bdb      	subs	r3, r3, r7
 8011be8:	9f06      	ldr	r7, [sp, #24]
 8011bea:	fb04 f303 	mul.w	r3, r4, r3
 8011bee:	b107      	cbz	r7, 8011bf2 <ApplyPhaseEvaluation+0x26a>
 8011bf0:	3510      	adds	r5, #16
 8011bf2:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8011bf4:	11b6      	asrs	r6, r6, #6
 8011bf6:	fb07 f606 	mul.w	r6, r7, r6
 8011bfa:	119b      	asrs	r3, r3, #6
 8011bfc:	fb07 f303 	mul.w	r3, r7, r3
 8011c00:	2e00      	cmp	r6, #0
 8011c02:	f842 6c08 	str.w	r6, [r2, #-8]
 8011c06:	bfb8      	it	lt
 8011c08:	4276      	neglt	r6, r6
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	f842 3c04 	str.w	r3, [r2, #-4]
 8011c10:	bfb8      	it	lt
 8011c12:	425b      	neglt	r3, r3
 8011c14:	4433      	add	r3, r6
 8011c16:	3208      	adds	r2, #8
 8011c18:	0b5b      	lsrs	r3, r3, #13
 8011c1a:	4592      	cmp	sl, r2
 8011c1c:	8143      	strh	r3, [r0, #10]
 8011c1e:	f101 0101 	add.w	r1, r1, #1
 8011c22:	f100 000c 	add.w	r0, r0, #12
 8011c26:	f47f af34 	bne.w	8011a92 <ApplyPhaseEvaluation+0x10a>
 8011c2a:	9a07      	ldr	r2, [sp, #28]
 8011c2c:	9c03      	ldr	r4, [sp, #12]
 8011c2e:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 8011c32:	0853      	lsrs	r3, r2, #1
 8011c34:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8011c38:	1ad3      	subs	r3, r2, r3
 8011c3a:	089a      	lsrs	r2, r3, #2
 8011c3c:	f002 3233 	and.w	r2, r2, #858993459	@ 0x33333333
 8011c40:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8011c44:	4413      	add	r3, r2
 8011c46:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 8011c4a:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8011c4e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011c50:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 8011c54:	eb03 4303 	add.w	r3, r3, r3, lsl #16
 8011c58:	6957      	ldr	r7, [r2, #20]
 8011c5a:	0e1b      	lsrs	r3, r3, #24
 8011c5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011c60:	3301      	adds	r3, #1
 8011c62:	f102 0128 	add.w	r1, r2, #40	@ 0x28
 8011c66:	07f8      	lsls	r0, r7, #31
 8011c68:	eb01 0203 	add.w	r2, r1, r3
 8011c6c:	f100 8402 	bmi.w	8012474 <ApplyPhaseEvaluation+0xaec>
 8011c70:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011c72:	2301      	movs	r3, #1
 8011c74:	f881 31b0 	strb.w	r3, [r1, #432]	@ 0x1b0
 8011c78:	2000      	movs	r0, #0
 8011c7a:	2100      	movs	r1, #0
 8011c7c:	e9cd 0192 	strd	r0, r1, [sp, #584]	@ 0x248
 8011c80:	9b06      	ldr	r3, [sp, #24]
 8011c82:	b373      	cbz	r3, 8011ce2 <ApplyPhaseEvaluation+0x35a>
 8011c84:	087f      	lsrs	r7, r7, #1
 8011c86:	d02c      	beq.n	8011ce2 <ApplyPhaseEvaluation+0x35a>
 8011c88:	07f9      	lsls	r1, r7, #31
 8011c8a:	d5fb      	bpl.n	8011c84 <ApplyPhaseEvaluation+0x2fc>
 8011c8c:	7813      	ldrb	r3, [r2, #0]
 8011c8e:	7851      	ldrb	r1, [r2, #1]
 8011c90:	7890      	ldrb	r0, [r2, #2]
 8011c92:	041b      	lsls	r3, r3, #16
 8011c94:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8011c98:	4303      	orrs	r3, r0
 8011c9a:	1911      	adds	r1, r2, r4
 8011c9c:	602b      	str	r3, [r5, #0]
 8011c9e:	784b      	ldrb	r3, [r1, #1]
 8011ca0:	5d10      	ldrb	r0, [r2, r4]
 8011ca2:	788e      	ldrb	r6, [r1, #2]
 8011ca4:	021b      	lsls	r3, r3, #8
 8011ca6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011caa:	4333      	orrs	r3, r6
 8011cac:	1908      	adds	r0, r1, r4
 8011cae:	606b      	str	r3, [r5, #4]
 8011cb0:	7843      	ldrb	r3, [r0, #1]
 8011cb2:	f812 c014 	ldrb.w	ip, [r2, r4, lsl #1]
 8011cb6:	7886      	ldrb	r6, [r0, #2]
 8011cb8:	021b      	lsls	r3, r3, #8
 8011cba:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8011cbe:	4333      	orrs	r3, r6
 8011cc0:	4420      	add	r0, r4
 8011cc2:	60ab      	str	r3, [r5, #8]
 8011cc4:	7843      	ldrb	r3, [r0, #1]
 8011cc6:	f811 6014 	ldrb.w	r6, [r1, r4, lsl #1]
 8011cca:	7881      	ldrb	r1, [r0, #2]
 8011ccc:	021b      	lsls	r3, r3, #8
 8011cce:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8011cd2:	430b      	orrs	r3, r1
 8011cd4:	087f      	lsrs	r7, r7, #1
 8011cd6:	60eb      	str	r3, [r5, #12]
 8011cd8:	f102 0203 	add.w	r2, r2, #3
 8011cdc:	f105 0510 	add.w	r5, r5, #16
 8011ce0:	d1d2      	bne.n	8011c88 <ApplyPhaseEvaluation+0x300>
 8011ce2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8011ce4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8011ce6:	aa52      	add	r2, sp, #328	@ 0x148
 8011ce8:	4629      	mov	r1, r5
 8011cea:	f00c fe99 	bl	801ea20 <Argus_Cal_UpdateLddXtalkVectors>
 8011cee:	9b05      	ldr	r3, [sp, #20]
 8011cf0:	8baa      	ldrh	r2, [r5, #28]
 8011cf2:	f8d3 3368 	ldr.w	r3, [r3, #872]	@ 0x368
 8011cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011cf8:	8a1c      	ldrh	r4, [r3, #16]
 8011cfa:	69ab      	ldr	r3, [r5, #24]
 8011cfc:	f003 0106 	and.w	r1, r3, #6
 8011d00:	f1a1 0106 	sub.w	r1, r1, #6
 8011d04:	fab1 f181 	clz	r1, r1
 8011d08:	0949      	lsrs	r1, r1, #5
 8011d0a:	f403 5000 	and.w	r0, r3, #8192	@ 0x2000
 8011d0e:	f3c3 3340 	ubfx	r3, r3, #13, #1
 8011d12:	930a      	str	r3, [sp, #40]	@ 0x28
 8011d14:	9109      	str	r1, [sp, #36]	@ 0x24
 8011d16:	0293      	lsls	r3, r2, #10
 8011d18:	b17a      	cbz	r2, 8011d3a <ApplyPhaseEvaluation+0x3b2>
 8011d1a:	ebb3 2f84 	cmp.w	r3, r4, lsl #10
 8011d1e:	ea4f 2184 	mov.w	r1, r4, lsl #10
 8011d22:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8011d26:	f080 8335 	bcs.w	8012394 <ApplyPhaseEvaluation+0xa0c>
 8011d2a:	005b      	lsls	r3, r3, #1
 8011d2c:	4299      	cmp	r1, r3
 8011d2e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8011d32:	d8fa      	bhi.n	8011d2a <ApplyPhaseEvaluation+0x3a2>
 8011d34:	2a00      	cmp	r2, #0
 8011d36:	f040 832d 	bne.w	8012394 <ApplyPhaseEvaluation+0xa0c>
 8011d3a:	221f      	movs	r2, #31
 8011d3c:	fab0 f380 	clz	r3, r0
 8011d40:	095b      	lsrs	r3, r3, #5
 8011d42:	3b10      	subs	r3, #16
 8011d44:	4413      	add	r3, r2
 8011d46:	b2dc      	uxtb	r4, r3
 8011d48:	9b05      	ldr	r3, [sp, #20]
 8011d4a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8011d4c:	f8d3 136c 	ldr.w	r1, [r3, #876]	@ 0x36c
 8011d50:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8011d52:	940f      	str	r4, [sp, #60]	@ 0x3c
 8011d54:	eb06 1846 	add.w	r8, r6, r6, lsl #5
 8011d58:	eb01 0888 	add.w	r8, r1, r8, lsl #2
 8011d5c:	aa53      	add	r2, sp, #332	@ 0x14c
 8011d5e:	00b6      	lsls	r6, r6, #2
 8011d60:	e9cd 9203 	strd	r9, r2, [sp, #12]
 8011d64:	f108 0a32 	add.w	sl, r8, #50	@ 0x32
 8011d68:	9107      	str	r1, [sp, #28]
 8011d6a:	f108 0834 	add.w	r8, r8, #52	@ 0x34
 8011d6e:	4615      	mov	r5, r2
 8011d70:	2300      	movs	r3, #0
 8011d72:	f1c4 0e0c 	rsb	lr, r4, #12
 8011d76:	468c      	mov	ip, r1
 8011d78:	46b1      	mov	r9, r6
 8011d7a:	e004      	b.n	8011d86 <ApplyPhaseEvaluation+0x3fe>
 8011d7c:	3301      	adds	r3, #1
 8011d7e:	2b21      	cmp	r3, #33	@ 0x21
 8011d80:	f105 0508 	add.w	r5, r5, #8
 8011d84:	d032      	beq.n	8011dec <ApplyPhaseEvaluation+0x464>
 8011d86:	f890 2030 	ldrb.w	r2, [r0, #48]	@ 0x30
 8011d8a:	07d2      	lsls	r2, r2, #31
 8011d8c:	f100 000c 	add.w	r0, r0, #12
 8011d90:	d4f4      	bmi.n	8011d7c <ApplyPhaseEvaluation+0x3f4>
 8011d92:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8011d96:	f003 0103 	and.w	r1, r3, #3
 8011d9a:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 8011d9e:	4449      	add	r1, r9
 8011da0:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 8011da4:	f93a 6023 	ldrsh.w	r6, [sl, r3, lsl #2]
 8011da8:	f9b2 413a 	ldrsh.w	r4, [r2, #314]	@ 0x13a
 8011dac:	f9b1 7142 	ldrsh.w	r7, [r1, #322]	@ 0x142
 8011db0:	f938 b023 	ldrsh.w	fp, [r8, r3, lsl #2]
 8011db4:	f9b2 213c 	ldrsh.w	r2, [r2, #316]	@ 0x13c
 8011db8:	4434      	add	r4, r6
 8011dba:	443c      	add	r4, r7
 8011dbc:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8011dc0:	fa04 f40e 	lsl.w	r4, r4, lr
 8011dc4:	af52      	add	r7, sp, #328	@ 0x148
 8011dc6:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
 8011dca:	445a      	add	r2, fp
 8011dcc:	4434      	add	r4, r6
 8011dce:	f9b1 b144 	ldrsh.w	fp, [r1, #324]	@ 0x144
 8011dd2:	f845 4c04 	str.w	r4, [r5, #-4]
 8011dd6:	6879      	ldr	r1, [r7, #4]
 8011dd8:	4493      	add	fp, r2
 8011dda:	fa0b fb0e 	lsl.w	fp, fp, lr
 8011dde:	3301      	adds	r3, #1
 8011de0:	4459      	add	r1, fp
 8011de2:	2b21      	cmp	r3, #33	@ 0x21
 8011de4:	6079      	str	r1, [r7, #4]
 8011de6:	f105 0508 	add.w	r5, r5, #8
 8011dea:	d1cc      	bne.n	8011d86 <ApplyPhaseEvaluation+0x3fe>
 8011dec:	9b07      	ldr	r3, [sp, #28]
 8011dee:	f893 345c 	ldrb.w	r3, [r3, #1116]	@ 0x45c
 8011df2:	e9dd 9203 	ldrd	r9, r2, [sp, #12]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	f000 81b2 	beq.w	8012160 <ApplyPhaseEvaluation+0x7d8>
 8011dfc:	9b05      	ldr	r3, [sp, #20]
 8011dfe:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 8011e02:	f8d3 1348 	ldr.w	r1, [r3, #840]	@ 0x348
 8011e06:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8011e0a:	9103      	str	r1, [sp, #12]
 8011e0c:	ea81 70e1 	eor.w	r0, r1, r1, asr #31
 8011e10:	eba0 70e1 	sub.w	r0, r0, r1, asr #31
 8011e14:	4601      	mov	r1, r0
 8011e16:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 8011e1a:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8011e1e:	f04f 0a00 	mov.w	sl, #0
 8011e22:	9006      	str	r0, [sp, #24]
 8011e24:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8011e26:	f8dd b030 	ldr.w	fp, [sp, #48]	@ 0x30
 8011e2a:	9304      	str	r3, [sp, #16]
 8011e2c:	ac13      	add	r4, sp, #76	@ 0x4c
 8011e2e:	4650      	mov	r0, sl
 8011e30:	4689      	mov	r9, r1
 8011e32:	9211      	str	r2, [sp, #68]	@ 0x44
 8011e34:	e009      	b.n	8011e4a <ApplyPhaseEvaluation+0x4c2>
 8011e36:	3001      	adds	r0, #1
 8011e38:	2820      	cmp	r0, #32
 8011e3a:	f105 0508 	add.w	r5, r5, #8
 8011e3e:	f10b 0b0c 	add.w	fp, fp, #12
 8011e42:	f104 0408 	add.w	r4, r4, #8
 8011e46:	f000 8188 	beq.w	801215a <ApplyPhaseEvaluation+0x7d2>
 8011e4a:	f89b 3030 	ldrb.w	r3, [fp, #48]	@ 0x30
 8011e4e:	f844 ac04 	str.w	sl, [r4, #-4]
 8011e52:	07db      	lsls	r3, r3, #31
 8011e54:	f8c5 a004 	str.w	sl, [r5, #4]
 8011e58:	d4ed      	bmi.n	8011e36 <ApplyPhaseEvaluation+0x4ae>
 8011e5a:	07c7      	lsls	r7, r0, #31
 8011e5c:	ea4f 0190 	mov.w	r1, r0, lsr #2
 8011e60:	f000 0603 	and.w	r6, r0, #3
 8011e64:	f100 80c8 	bmi.w	8011ff8 <ApplyPhaseEvaluation+0x670>
 8011e68:	2e00      	cmp	r6, #0
 8011e6a:	d062      	beq.n	8011f32 <ApplyPhaseEvaluation+0x5aa>
 8011e6c:	f020 0e03 	bic.w	lr, r0, #3
 8011e70:	f106 3cff 	add.w	ip, r6, #4294967295
 8011e74:	ea4e 030c 	orr.w	r3, lr, ip
 8011e78:	aa52      	add	r2, sp, #328	@ 0x148
 8011e7a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011e7e:	af52      	add	r7, sp, #328	@ 0x148
 8011e80:	6852      	ldr	r2, [r2, #4]
 8011e82:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
 8011e86:	f844 3c04 	str.w	r3, [r4, #-4]
 8011e8a:	2907      	cmp	r1, #7
 8011e8c:	606a      	str	r2, [r5, #4]
 8011e8e:	f000 82e7 	beq.w	8012460 <ApplyPhaseEvaluation+0xad8>
 8011e92:	1c4f      	adds	r7, r1, #1
 8011e94:	ea4c 0c87 	orr.w	ip, ip, r7, lsl #2
 8011e98:	ea46 0887 	orr.w	r8, r6, r7, lsl #2
 8011e9c:	00bf      	lsls	r7, r7, #2
 8011e9e:	9708      	str	r7, [sp, #32]
 8011ea0:	af52      	add	r7, sp, #328	@ 0x148
 8011ea2:	eb07 07cc 	add.w	r7, r7, ip, lsl #3
 8011ea6:	970b      	str	r7, [sp, #44]	@ 0x2c
 8011ea8:	af52      	add	r7, sp, #328	@ 0x148
 8011eaa:	2e03      	cmp	r6, #3
 8011eac:	f857 c03c 	ldr.w	ip, [r7, ip, lsl #3]
 8011eb0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8011eb2:	4463      	add	r3, ip
 8011eb4:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8011eb8:	af52      	add	r7, sp, #328	@ 0x148
 8011eba:	4462      	add	r2, ip
 8011ebc:	eb07 0cc8 	add.w	ip, r7, r8, lsl #3
 8011ec0:	f857 8038 	ldr.w	r8, [r7, r8, lsl #3]
 8011ec4:	f8dc c004 	ldr.w	ip, [ip, #4]
 8011ec8:	4443      	add	r3, r8
 8011eca:	4462      	add	r2, ip
 8011ecc:	f844 3c04 	str.w	r3, [r4, #-4]
 8011ed0:	606a      	str	r2, [r5, #4]
 8011ed2:	d13c      	bne.n	8011f4e <ApplyPhaseEvaluation+0x5c6>
 8011ed4:	2900      	cmp	r1, #0
 8011ed6:	d15d      	bne.n	8011f94 <ApplyPhaseEvaluation+0x60c>
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	db69      	blt.n	8011fb0 <ApplyPhaseEvaluation+0x628>
 8011edc:	9903      	ldr	r1, [sp, #12]
 8011ede:	2900      	cmp	r1, #0
 8011ee0:	f2c0 8108 	blt.w	80120f4 <ApplyPhaseEvaluation+0x76c>
 8011ee4:	fba9 3603 	umull	r3, r6, r9, r3
 8011ee8:	0c19      	lsrs	r1, r3, #16
 8011eea:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 8011eee:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8011ef2:	4419      	add	r1, r3
 8011ef4:	2a00      	cmp	r2, #0
 8011ef6:	f844 1c04 	str.w	r1, [r4, #-4]
 8011efa:	db6c      	blt.n	8011fd6 <ApplyPhaseEvaluation+0x64e>
 8011efc:	9b04      	ldr	r3, [sp, #16]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	f2c0 8104 	blt.w	801210c <ApplyPhaseEvaluation+0x784>
 8011f04:	9b06      	ldr	r3, [sp, #24]
 8011f06:	fba3 2102 	umull	r2, r1, r3, r2
 8011f0a:	0c13      	lsrs	r3, r2, #16
 8011f0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8011f10:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8011f14:	4413      	add	r3, r2
 8011f16:	606b      	str	r3, [r5, #4]
 8011f18:	e78d      	b.n	8011e36 <ApplyPhaseEvaluation+0x4ae>
 8011f1a:	f04f 0c02 	mov.w	ip, #2
 8011f1e:	e652      	b.n	8011bc6 <ApplyPhaseEvaluation+0x23e>
 8011f20:	f04f 0c02 	mov.w	ip, #2
 8011f24:	e635      	b.n	8011b92 <ApplyPhaseEvaluation+0x20a>
 8011f26:	f04f 0c02 	mov.w	ip, #2
 8011f2a:	e617      	b.n	8011b5c <ApplyPhaseEvaluation+0x1d4>
 8011f2c:	f04f 0c02 	mov.w	ip, #2
 8011f30:	e5f8      	b.n	8011b24 <ApplyPhaseEvaluation+0x19c>
 8011f32:	2907      	cmp	r1, #7
 8011f34:	f000 828d 	beq.w	8012452 <ApplyPhaseEvaluation+0xaca>
 8011f38:	1c4f      	adds	r7, r1, #1
 8011f3a:	017b      	lsls	r3, r7, #5
 8011f3c:	aa52      	add	r2, sp, #328	@ 0x148
 8011f3e:	f020 0e03 	bic.w	lr, r0, #3
 8011f42:	58d3      	ldr	r3, [r2, r3]
 8011f44:	eb02 1247 	add.w	r2, r2, r7, lsl #5
 8011f48:	00bf      	lsls	r7, r7, #2
 8011f4a:	6852      	ldr	r2, [r2, #4]
 8011f4c:	9708      	str	r7, [sp, #32]
 8011f4e:	9f08      	ldr	r7, [sp, #32]
 8011f50:	f106 0c01 	add.w	ip, r6, #1
 8011f54:	ea47 070c 	orr.w	r7, r7, ip
 8011f58:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 8011f5c:	9708      	str	r7, [sp, #32]
 8011f5e:	eb08 07c7 	add.w	r7, r8, r7, lsl #3
 8011f62:	970b      	str	r7, [sp, #44]	@ 0x2c
 8011f64:	9f08      	ldr	r7, [sp, #32]
 8011f66:	f858 7037 	ldr.w	r7, [r8, r7, lsl #3]
 8011f6a:	443b      	add	r3, r7
 8011f6c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8011f6e:	687f      	ldr	r7, [r7, #4]
 8011f70:	443a      	add	r2, r7
 8011f72:	ea4e 0c0c 	orr.w	ip, lr, ip
 8011f76:	af52      	add	r7, sp, #328	@ 0x148
 8011f78:	eb07 07cc 	add.w	r7, r7, ip, lsl #3
 8011f7c:	f50d 7ea4 	add.w	lr, sp, #328	@ 0x148
 8011f80:	687f      	ldr	r7, [r7, #4]
 8011f82:	f85e c03c 	ldr.w	ip, [lr, ip, lsl #3]
 8011f86:	443a      	add	r2, r7
 8011f88:	4463      	add	r3, ip
 8011f8a:	f844 3c04 	str.w	r3, [r4, #-4]
 8011f8e:	606a      	str	r2, [r5, #4]
 8011f90:	2900      	cmp	r1, #0
 8011f92:	d0a1      	beq.n	8011ed8 <ApplyPhaseEvaluation+0x550>
 8011f94:	3901      	subs	r1, #1
 8011f96:	ea46 0681 	orr.w	r6, r6, r1, lsl #2
 8011f9a:	af52      	add	r7, sp, #328	@ 0x148
 8011f9c:	a952      	add	r1, sp, #328	@ 0x148
 8011f9e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8011fa2:	f857 6036 	ldr.w	r6, [r7, r6, lsl #3]
 8011fa6:	6849      	ldr	r1, [r1, #4]
 8011fa8:	4433      	add	r3, r6
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	440a      	add	r2, r1
 8011fae:	da95      	bge.n	8011edc <ApplyPhaseEvaluation+0x554>
 8011fb0:	9903      	ldr	r1, [sp, #12]
 8011fb2:	2900      	cmp	r1, #0
 8011fb4:	f1c3 0300 	rsb	r3, r3, #0
 8011fb8:	f2c0 81d6 	blt.w	8012368 <ApplyPhaseEvaluation+0x9e0>
 8011fbc:	fba9 3603 	umull	r3, r6, r9, r3
 8011fc0:	0c19      	lsrs	r1, r3, #16
 8011fc2:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 8011fc6:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8011fca:	4419      	add	r1, r3
 8011fcc:	4249      	negs	r1, r1
 8011fce:	2a00      	cmp	r2, #0
 8011fd0:	f844 1c04 	str.w	r1, [r4, #-4]
 8011fd4:	da92      	bge.n	8011efc <ApplyPhaseEvaluation+0x574>
 8011fd6:	9b04      	ldr	r3, [sp, #16]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	f1c2 0200 	rsb	r2, r2, #0
 8011fde:	f2c0 81b6 	blt.w	801234e <ApplyPhaseEvaluation+0x9c6>
 8011fe2:	9b06      	ldr	r3, [sp, #24]
 8011fe4:	fba2 2103 	umull	r2, r1, r2, r3
 8011fe8:	0c13      	lsrs	r3, r2, #16
 8011fea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8011fee:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8011ff2:	4413      	add	r3, r2
 8011ff4:	425b      	negs	r3, r3
 8011ff6:	e78e      	b.n	8011f16 <ApplyPhaseEvaluation+0x58e>
 8011ff8:	2900      	cmp	r1, #0
 8011ffa:	d053      	beq.n	80120a4 <ApplyPhaseEvaluation+0x71c>
 8011ffc:	b326      	cbz	r6, 8012048 <ApplyPhaseEvaluation+0x6c0>
 8011ffe:	f106 3eff 	add.w	lr, r6, #4294967295
 8012002:	1e4f      	subs	r7, r1, #1
 8012004:	ea4e 0387 	orr.w	r3, lr, r7, lsl #2
 8012008:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 801200c:	aa52      	add	r2, sp, #328	@ 0x148
 801200e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8012012:	f020 0c03 	bic.w	ip, r0, #3
 8012016:	f858 3033 	ldr.w	r3, [r8, r3, lsl #3]
 801201a:	9308      	str	r3, [sp, #32]
 801201c:	ea4c 0e0e 	orr.w	lr, ip, lr
 8012020:	ab52      	add	r3, sp, #328	@ 0x148
 8012022:	eb08 08ce 	add.w	r8, r8, lr, lsl #3
 8012026:	f853 e03e 	ldr.w	lr, [r3, lr, lsl #3]
 801202a:	9b08      	ldr	r3, [sp, #32]
 801202c:	6852      	ldr	r2, [r2, #4]
 801202e:	4473      	add	r3, lr
 8012030:	f8d8 e004 	ldr.w	lr, [r8, #4]
 8012034:	f844 3c04 	str.w	r3, [r4, #-4]
 8012038:	4472      	add	r2, lr
 801203a:	2907      	cmp	r1, #7
 801203c:	606a      	str	r2, [r5, #4]
 801203e:	d13f      	bne.n	80120c0 <ApplyPhaseEvaluation+0x738>
 8012040:	2e03      	cmp	r6, #3
 8012042:	d107      	bne.n	8012054 <ApplyPhaseEvaluation+0x6cc>
 8012044:	00bf      	lsls	r7, r7, #2
 8012046:	e022      	b.n	801208e <ApplyPhaseEvaluation+0x706>
 8012048:	2907      	cmp	r1, #7
 801204a:	f040 8199 	bne.w	8012380 <ApplyPhaseEvaluation+0x9f8>
 801204e:	4633      	mov	r3, r6
 8012050:	4632      	mov	r2, r6
 8012052:	2706      	movs	r7, #6
 8012054:	f106 0e01 	add.w	lr, r6, #1
 8012058:	f04e 011c 	orr.w	r1, lr, #28
 801205c:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 8012060:	f50d 7ca4 	add.w	ip, sp, #328	@ 0x148
 8012064:	eb0c 0cc1 	add.w	ip, ip, r1, lsl #3
 8012068:	f858 1031 	ldr.w	r1, [r8, r1, lsl #3]
 801206c:	440b      	add	r3, r1
 801206e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8012072:	440a      	add	r2, r1
 8012074:	ea4e 0e87 	orr.w	lr, lr, r7, lsl #2
 8012078:	a952      	add	r1, sp, #328	@ 0x148
 801207a:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 801207e:	f50d 7ca4 	add.w	ip, sp, #328	@ 0x148
 8012082:	6849      	ldr	r1, [r1, #4]
 8012084:	f85c c03e 	ldr.w	ip, [ip, lr, lsl #3]
 8012088:	00bf      	lsls	r7, r7, #2
 801208a:	4463      	add	r3, ip
 801208c:	440a      	add	r2, r1
 801208e:	4337      	orrs	r7, r6
 8012090:	a952      	add	r1, sp, #328	@ 0x148
 8012092:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8012096:	ae52      	add	r6, sp, #328	@ 0x148
 8012098:	6849      	ldr	r1, [r1, #4]
 801209a:	f856 6037 	ldr.w	r6, [r6, r7, lsl #3]
 801209e:	440a      	add	r2, r1
 80120a0:	4433      	add	r3, r6
 80120a2:	e719      	b.n	8011ed8 <ApplyPhaseEvaluation+0x550>
 80120a4:	2e00      	cmp	r6, #0
 80120a6:	d03e      	beq.n	8012126 <ApplyPhaseEvaluation+0x79e>
 80120a8:	f020 0c03 	bic.w	ip, r0, #3
 80120ac:	1e73      	subs	r3, r6, #1
 80120ae:	ea4c 0303 	orr.w	r3, ip, r3
 80120b2:	aa52      	add	r2, sp, #328	@ 0x148
 80120b4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80120b8:	af52      	add	r7, sp, #328	@ 0x148
 80120ba:	6852      	ldr	r2, [r2, #4]
 80120bc:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
 80120c0:	1c4f      	adds	r7, r1, #1
 80120c2:	ea46 0787 	orr.w	r7, r6, r7, lsl #2
 80120c6:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 80120ca:	f50d 7ea4 	add.w	lr, sp, #328	@ 0x148
 80120ce:	eb0e 0ec7 	add.w	lr, lr, r7, lsl #3
 80120d2:	f858 7037 	ldr.w	r7, [r8, r7, lsl #3]
 80120d6:	443b      	add	r3, r7
 80120d8:	f8de 7004 	ldr.w	r7, [lr, #4]
 80120dc:	f844 3c04 	str.w	r3, [r4, #-4]
 80120e0:	443a      	add	r2, r7
 80120e2:	2e03      	cmp	r6, #3
 80120e4:	606a      	str	r2, [r5, #4]
 80120e6:	d122      	bne.n	801212e <ApplyPhaseEvaluation+0x7a6>
 80120e8:	2900      	cmp	r1, #0
 80120ea:	f43f aef5 	beq.w	8011ed8 <ApplyPhaseEvaluation+0x550>
 80120ee:	1e4f      	subs	r7, r1, #1
 80120f0:	00bf      	lsls	r7, r7, #2
 80120f2:	e7cc      	b.n	801208e <ApplyPhaseEvaluation+0x706>
 80120f4:	17d9      	asrs	r1, r3, #31
 80120f6:	fba3 3609 	umull	r3, r6, r3, r9
 80120fa:	fb09 6601 	mla	r6, r9, r1, r6
 80120fe:	0c19      	lsrs	r1, r3, #16
 8012100:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 8012104:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8012108:	4419      	add	r1, r3
 801210a:	e75f      	b.n	8011fcc <ApplyPhaseEvaluation+0x644>
 801210c:	9e06      	ldr	r6, [sp, #24]
 801210e:	17d3      	asrs	r3, r2, #31
 8012110:	fba2 2106 	umull	r2, r1, r2, r6
 8012114:	fb06 1103 	mla	r1, r6, r3, r1
 8012118:	0c13      	lsrs	r3, r2, #16
 801211a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801211e:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8012122:	4413      	add	r3, r2
 8012124:	e766      	b.n	8011ff4 <ApplyPhaseEvaluation+0x66c>
 8012126:	e9dd 325a 	ldrd	r3, r2, [sp, #360]	@ 0x168
 801212a:	f020 0c03 	bic.w	ip, r0, #3
 801212e:	f106 0e01 	add.w	lr, r6, #1
 8012132:	ea4c 0c0e 	orr.w	ip, ip, lr
 8012136:	af52      	add	r7, sp, #328	@ 0x148
 8012138:	eb07 07cc 	add.w	r7, r7, ip, lsl #3
 801213c:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 8012140:	687f      	ldr	r7, [r7, #4]
 8012142:	f858 c03c 	ldr.w	ip, [r8, ip, lsl #3]
 8012146:	443a      	add	r2, r7
 8012148:	4463      	add	r3, ip
 801214a:	f844 3c04 	str.w	r3, [r4, #-4]
 801214e:	606a      	str	r2, [r5, #4]
 8012150:	2900      	cmp	r1, #0
 8012152:	f43f aec1 	beq.w	8011ed8 <ApplyPhaseEvaluation+0x550>
 8012156:	1e4f      	subs	r7, r1, #1
 8012158:	e78c      	b.n	8012074 <ApplyPhaseEvaluation+0x6ec>
 801215a:	f8dd 9034 	ldr.w	r9, [sp, #52]	@ 0x34
 801215e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012160:	9b07      	ldr	r3, [sp, #28]
 8012162:	f8b3 4204 	ldrh.w	r4, [r3, #516]	@ 0x204
 8012166:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 801216a:	d02c      	beq.n	80121c6 <ApplyPhaseEvaluation+0x83e>
 801216c:	b35c      	cbz	r4, 80121c6 <ApplyPhaseEvaluation+0x83e>
 801216e:	f04f 0800 	mov.w	r8, #0
 8012172:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8012174:	ae95      	add	r6, sp, #596	@ 0x254
 8012176:	46c2      	mov	sl, r8
 8012178:	e011      	b.n	801219e <ApplyPhaseEvaluation+0x816>
 801217a:	0bcb      	lsrs	r3, r1, #15
 801217c:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
 8012180:	f3c1 3180 	ubfx	r1, r1, #14, #1
 8012184:	440b      	add	r3, r1
 8012186:	6811      	ldr	r1, [r2, #0]
 8012188:	f842 3c04 	str.w	r3, [r2, #-4]
 801218c:	eb0a 0a63 	add.w	sl, sl, r3, asr #1
 8012190:	eb08 0861 	add.w	r8, r8, r1, asr #1
 8012194:	3208      	adds	r2, #8
 8012196:	4296      	cmp	r6, r2
 8012198:	f100 000c 	add.w	r0, r0, #12
 801219c:	d027      	beq.n	80121ee <ApplyPhaseEvaluation+0x866>
 801219e:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80121a2:	07dd      	lsls	r5, r3, #31
 80121a4:	d4f6      	bmi.n	8012194 <ApplyPhaseEvaluation+0x80c>
 80121a6:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80121aa:	424b      	negs	r3, r1
 80121ac:	fb83 3c04 	smull	r3, ip, r3, r4
 80121b0:	0bdd      	lsrs	r5, r3, #15
 80121b2:	2900      	cmp	r1, #0
 80121b4:	ea45 454c 	orr.w	r5, r5, ip, lsl #17
 80121b8:	fb84 1701 	smull	r1, r7, r4, r1
 80121bc:	f343 3380 	sbfx	r3, r3, #14, #1
 80121c0:	dadb      	bge.n	801217a <ApplyPhaseEvaluation+0x7f2>
 80121c2:	1b5b      	subs	r3, r3, r5
 80121c4:	e7df      	b.n	8012186 <ApplyPhaseEvaluation+0x7fe>
 80121c6:	f04f 0800 	mov.w	r8, #0
 80121ca:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80121cc:	ac95      	add	r4, sp, #596	@ 0x254
 80121ce:	46c2      	mov	sl, r8
 80121d0:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80121d4:	07de      	lsls	r6, r3, #31
 80121d6:	f100 000c 	add.w	r0, r0, #12
 80121da:	d405      	bmi.n	80121e8 <ApplyPhaseEvaluation+0x860>
 80121dc:	e952 1301 	ldrd	r1, r3, [r2, #-4]
 80121e0:	eb0a 0a61 	add.w	sl, sl, r1, asr #1
 80121e4:	eb08 0863 	add.w	r8, r8, r3, asr #1
 80121e8:	3208      	adds	r2, #8
 80121ea:	4294      	cmp	r4, r2
 80121ec:	d1f0      	bne.n	80121d0 <ApplyPhaseEvaluation+0x848>
 80121ee:	9807      	ldr	r0, [sp, #28]
 80121f0:	f00a ff2e 	bl	801d050 <Argus_Cal_GetCalibrationPtr>
 80121f4:	f890 324c 	ldrb.w	r3, [r0, #588]	@ 0x24c
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	f040 81d1 	bne.w	80125a0 <ApplyPhaseEvaluation+0xc18>
 80121fe:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8012202:	461d      	mov	r5, r3
 8012204:	9a05      	ldr	r2, [sp, #20]
 8012206:	4e99      	ldr	r6, [pc, #612]	@ (801246c <ApplyPhaseEvaluation+0xae4>)
 8012208:	f8d2 3354 	ldr.w	r3, [r2, #852]	@ 0x354
 801220c:	f8d2 036c 	ldr.w	r0, [r2, #876]	@ 0x36c
 8012210:	7b5a      	ldrb	r2, [r3, #13]
 8012212:	89db      	ldrh	r3, [r3, #14]
 8012214:	9306      	str	r3, [sp, #24]
 8012216:	4b96      	ldr	r3, [pc, #600]	@ (8012470 <ApplyPhaseEvaluation+0xae8>)
 8012218:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 801221c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801221e:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 8012222:	2a02      	cmp	r2, #2
 8012224:	bf18      	it	ne
 8012226:	461e      	movne	r6, r3
 8012228:	f890 345c 	ldrb.w	r3, [r0, #1116]	@ 0x45c
 801222c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801222e:	9303      	str	r3, [sp, #12]
 8012230:	f8b0 3208 	ldrh.w	r3, [r0, #520]	@ 0x208
 8012234:	9304      	str	r3, [sp, #16]
 8012236:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012238:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 801223c:	0152      	lsls	r2, r2, #5
 801223e:	f503 77d4 	add.w	r7, r3, #424	@ 0x1a8
 8012242:	469a      	mov	sl, r3
 8012244:	4690      	mov	r8, r2
 8012246:	f89b 3008 	ldrb.w	r3, [fp, #8]
 801224a:	07d9      	lsls	r1, r3, #31
 801224c:	d43c      	bmi.n	80122c8 <ApplyPhaseEvaluation+0x940>
 801224e:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 8012252:	42ab      	cmp	r3, r5
 8012254:	d20e      	bcs.n	8012274 <ApplyPhaseEvaluation+0x8ec>
 8012256:	9a06      	ldr	r2, [sp, #24]
 8012258:	429a      	cmp	r2, r3
 801225a:	d80b      	bhi.n	8012274 <ApplyPhaseEvaluation+0x8ec>
 801225c:	f8d9 3000 	ldr.w	r3, [r9]
 8012260:	9a08      	ldr	r2, [sp, #32]
 8012262:	4413      	add	r3, r2
 8012264:	f8c9 3000 	str.w	r3, [r9]
 8012268:	9a07      	ldr	r2, [sp, #28]
 801226a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801226e:	4413      	add	r3, r2
 8012270:	f8c9 3004 	str.w	r3, [r9, #4]
 8012274:	9b03      	ldr	r3, [sp, #12]
 8012276:	4649      	mov	r1, r9
 8012278:	b14b      	cbz	r3, 801228e <ApplyPhaseEvaluation+0x906>
 801227a:	e9d9 3000 	ldrd	r3, r0, [r9]
 801227e:	6822      	ldr	r2, [r4, #0]
 8012280:	4413      	add	r3, r2
 8012282:	f8c9 3000 	str.w	r3, [r9]
 8012286:	6863      	ldr	r3, [r4, #4]
 8012288:	4403      	add	r3, r0
 801228a:	f8c9 3004 	str.w	r3, [r9, #4]
 801228e:	4658      	mov	r0, fp
 8012290:	47b0      	blx	r6
 8012292:	f89b 3008 	ldrb.w	r3, [fp, #8]
 8012296:	079a      	lsls	r2, r3, #30
 8012298:	d505      	bpl.n	80122a6 <ApplyPhaseEvaluation+0x91e>
 801229a:	f8da 3018 	ldr.w	r3, [sl, #24]
 801229e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80122a2:	f8ca 3018 	str.w	r3, [sl, #24]
 80122a6:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 80122aa:	9a05      	ldr	r2, [sp, #20]
 80122ac:	9904      	ldr	r1, [sp, #16]
 80122ae:	f8d2 036c 	ldr.w	r0, [r2, #876]	@ 0x36c
 80122b2:	f3c3 2244 	ubfx	r2, r3, #9, #5
 80122b6:	4442      	add	r2, r8
 80122b8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80122bc:	1a5b      	subs	r3, r3, r1
 80122be:	f8b2 22a6 	ldrh.w	r2, [r2, #678]	@ 0x2a6
 80122c2:	1a9b      	subs	r3, r3, r2
 80122c4:	f8ab 3004 	strh.w	r3, [fp, #4]
 80122c8:	f10b 0b0c 	add.w	fp, fp, #12
 80122cc:	455f      	cmp	r7, fp
 80122ce:	f109 0908 	add.w	r9, r9, #8
 80122d2:	f104 0408 	add.w	r4, r4, #8
 80122d6:	d1b6      	bne.n	8012246 <ApplyPhaseEvaluation+0x8be>
 80122d8:	e9dd 2a0c 	ldrd	r2, sl, [sp, #48]	@ 0x30
 80122dc:	f892 31b0 	ldrb.w	r3, [r2, #432]	@ 0x1b0
 80122e0:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 80122e4:	07db      	lsls	r3, r3, #31
 80122e6:	d421      	bmi.n	801232c <ApplyPhaseEvaluation+0x9a4>
 80122e8:	f8b2 31b2 	ldrh.w	r3, [r2, #434]	@ 0x1b2
 80122ec:	42ab      	cmp	r3, r5
 80122ee:	d36d      	bcc.n	80123cc <ApplyPhaseEvaluation+0xa44>
 80122f0:	4638      	mov	r0, r7
 80122f2:	a992      	add	r1, sp, #584	@ 0x248
 80122f4:	47b0      	blx	r6
 80122f6:	9b05      	ldr	r3, [sp, #20]
 80122f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80122fa:	f8d3 036c 	ldr.w	r0, [r3, #876]	@ 0x36c
 80122fe:	f8b1 31ac 	ldrh.w	r3, [r1, #428]	@ 0x1ac
 8012302:	f8b0 220a 	ldrh.w	r2, [r0, #522]	@ 0x20a
 8012306:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012308:	1a9a      	subs	r2, r3, r2
 801230a:	f3c3 2344 	ubfx	r3, r3, #9, #5
 801230e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8012312:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8012316:	f8b3 32a6 	ldrh.w	r3, [r3, #678]	@ 0x2a6
 801231a:	1ad3      	subs	r3, r2, r3
 801231c:	f8a1 31ac 	strh.w	r3, [r1, #428]	@ 0x1ac
 8012320:	f891 31b0 	ldrb.w	r3, [r1, #432]	@ 0x1b0
 8012324:	f043 0304 	orr.w	r3, r3, #4
 8012328:	f881 31b0 	strb.w	r3, [r1, #432]	@ 0x1b0
 801232c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801232e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 8012332:	b143      	cbz	r3, 8012346 <ApplyPhaseEvaluation+0x9be>
 8012334:	f503 7207 	add.w	r2, r3, #540	@ 0x21c
 8012338:	9200      	str	r2, [sp, #0]
 801233a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801233c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801233e:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8012342:	f00c fe0d 	bl	801ef60 <Argus_Cal_GetXtalkVectors>
 8012346:	f50d 7d15 	add.w	sp, sp, #596	@ 0x254
 801234a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801234e:	9e06      	ldr	r6, [sp, #24]
 8012350:	17d3      	asrs	r3, r2, #31
 8012352:	fba2 1206 	umull	r1, r2, r2, r6
 8012356:	fb06 2203 	mla	r2, r6, r3, r2
 801235a:	0c0b      	lsrs	r3, r1, #16
 801235c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012360:	f3c1 32c0 	ubfx	r2, r1, #15, #1
 8012364:	4413      	add	r3, r2
 8012366:	e5d6      	b.n	8011f16 <ApplyPhaseEvaluation+0x58e>
 8012368:	17d9      	asrs	r1, r3, #31
 801236a:	fba3 3609 	umull	r3, r6, r3, r9
 801236e:	fb09 6601 	mla	r6, r9, r1, r6
 8012372:	0c19      	lsrs	r1, r3, #16
 8012374:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 8012378:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 801237c:	4419      	add	r1, r3
 801237e:	e5b9      	b.n	8011ef4 <ApplyPhaseEvaluation+0x56c>
 8012380:	1c4a      	adds	r2, r1, #1
 8012382:	af52      	add	r7, sp, #328	@ 0x148
 8012384:	0153      	lsls	r3, r2, #5
 8012386:	eb07 1242 	add.w	r2, r7, r2, lsl #5
 801238a:	58fb      	ldr	r3, [r7, r3]
 801238c:	6852      	ldr	r2, [r2, #4]
 801238e:	f020 0c03 	bic.w	ip, r0, #3
 8012392:	e6cc      	b.n	801212e <ApplyPhaseEvaluation+0x7a6>
 8012394:	2400      	movs	r4, #0
 8012396:	1acd      	subs	r5, r1, r3
 8012398:	b149      	cbz	r1, 80123ae <ApplyPhaseEvaluation+0xa26>
 801239a:	428b      	cmp	r3, r1
 801239c:	d854      	bhi.n	8012448 <ApplyPhaseEvaluation+0xac0>
 801239e:	4314      	orrs	r4, r2
 80123a0:	0852      	lsrs	r2, r2, #1
 80123a2:	ea4f 0145 	mov.w	r1, r5, lsl #1
 80123a6:	d1f6      	bne.n	8012396 <ApplyPhaseEvaluation+0xa0e>
 80123a8:	428b      	cmp	r3, r1
 80123aa:	d800      	bhi.n	80123ae <ApplyPhaseEvaluation+0xa26>
 80123ac:	3401      	adds	r4, #1
 80123ae:	2c00      	cmp	r4, #0
 80123b0:	f6ff acc3 	blt.w	8011d3a <ApplyPhaseEvaluation+0x3b2>
 80123b4:	fab4 f384 	clz	r3, r4
 80123b8:	f1c3 021e 	rsb	r2, r3, #30
 80123bc:	40d4      	lsrs	r4, r2
 80123be:	f1c3 031f 	rsb	r3, r3, #31
 80123c2:	2c03      	cmp	r4, #3
 80123c4:	bf08      	it	eq
 80123c6:	3301      	addeq	r3, #1
 80123c8:	b2da      	uxtb	r2, r3
 80123ca:	e4b7      	b.n	8011d3c <ApplyPhaseEvaluation+0x3b4>
 80123cc:	9a06      	ldr	r2, [sp, #24]
 80123ce:	429a      	cmp	r2, r3
 80123d0:	d88e      	bhi.n	80122f0 <ApplyPhaseEvaluation+0x968>
 80123d2:	9b05      	ldr	r3, [sp, #20]
 80123d4:	f1ba 0f00 	cmp.w	sl, #0
 80123d8:	e9d3 10d0 	ldrd	r1, r0, [r3, #832]	@ 0x340
 80123dc:	f2c0 8181 	blt.w	80126e2 <ApplyPhaseEvaluation+0xd5a>
 80123e0:	4653      	mov	r3, sl
 80123e2:	f04f 34ff 	mov.w	r4, #4294967295
 80123e6:	2201      	movs	r2, #1
 80123e8:	2900      	cmp	r1, #0
 80123ea:	bfb8      	it	lt
 80123ec:	4249      	neglt	r1, r1
 80123ee:	fba3 3101 	umull	r3, r1, r3, r1
 80123f2:	bfb8      	it	lt
 80123f4:	4622      	movlt	r2, r4
 80123f6:	0bdc      	lsrs	r4, r3, #15
 80123f8:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
 80123fc:	f3c3 3180 	ubfx	r1, r3, #14, #1
 8012400:	2a01      	cmp	r2, #1
 8012402:	4421      	add	r1, r4
 8012404:	bf18      	it	ne
 8012406:	4249      	negne	r1, r1
 8012408:	f1b8 0f00 	cmp.w	r8, #0
 801240c:	f2c0 8186 	blt.w	801271c <ApplyPhaseEvaluation+0xd94>
 8012410:	4643      	mov	r3, r8
 8012412:	f04f 34ff 	mov.w	r4, #4294967295
 8012416:	2201      	movs	r2, #1
 8012418:	2800      	cmp	r0, #0
 801241a:	bfbc      	itt	lt
 801241c:	4622      	movlt	r2, r4
 801241e:	4240      	neglt	r0, r0
 8012420:	fba3 3000 	umull	r3, r0, r3, r0
 8012424:	2a01      	cmp	r2, #1
 8012426:	9a92      	ldr	r2, [sp, #584]	@ 0x248
 8012428:	ea4f 34d3 	mov.w	r4, r3, lsr #15
 801242c:	eba2 0201 	sub.w	r2, r2, r1
 8012430:	ea44 4440 	orr.w	r4, r4, r0, lsl #17
 8012434:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8012438:	4423      	add	r3, r4
 801243a:	9292      	str	r2, [sp, #584]	@ 0x248
 801243c:	9a93      	ldr	r2, [sp, #588]	@ 0x24c
 801243e:	bf18      	it	ne
 8012440:	425b      	negne	r3, r3
 8012442:	1ad3      	subs	r3, r2, r3
 8012444:	9393      	str	r3, [sp, #588]	@ 0x24c
 8012446:	e753      	b.n	80122f0 <ApplyPhaseEvaluation+0x968>
 8012448:	0852      	lsrs	r2, r2, #1
 801244a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801244e:	d1a2      	bne.n	8012396 <ApplyPhaseEvaluation+0xa0e>
 8012450:	e7aa      	b.n	80123a8 <ApplyPhaseEvaluation+0xa20>
 8012452:	f04f 0c01 	mov.w	ip, #1
 8012456:	f04f 0e1c 	mov.w	lr, #28
 801245a:	4632      	mov	r2, r6
 801245c:	4633      	mov	r3, r6
 801245e:	e588      	b.n	8011f72 <ApplyPhaseEvaluation+0x5ea>
 8012460:	2e03      	cmp	r6, #3
 8012462:	f43f ad97 	beq.w	8011f94 <ApplyPhaseEvaluation+0x60c>
 8012466:	f106 0c01 	add.w	ip, r6, #1
 801246a:	e582      	b.n	8011f72 <ApplyPhaseEvaluation+0x5ea>
 801246c:	08014cbd 	.word	0x08014cbd
 8012470:	08014b51 	.word	0x08014b51
 8012474:	5cc9      	ldrb	r1, [r1, r3]
 8012476:	7853      	ldrb	r3, [r2, #1]
 8012478:	021b      	lsls	r3, r3, #8
 801247a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801247e:	7891      	ldrb	r1, [r2, #2]
 8012480:	f413 0f40 	tst.w	r3, #12582912	@ 0xc00000
 8012484:	ea41 0103 	orr.w	r1, r1, r3
 8012488:	eb02 0604 	add.w	r6, r2, r4
 801248c:	f040 80ec 	bne.w	8012668 <ApplyPhaseEvaluation+0xce0>
 8012490:	9b04      	ldr	r3, [sp, #16]
 8012492:	f3c1 0815 	ubfx	r8, r1, #0, #22
 8012496:	4543      	cmp	r3, r8
 8012498:	f200 810f 	bhi.w	80126ba <ApplyPhaseEvaluation+0xd32>
 801249c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801249e:	4543      	cmp	r3, r8
 80124a0:	bf34      	ite	cc
 80124a2:	f04f 0e02 	movcc.w	lr, #2
 80124a6:	f04f 0e00 	movcs.w	lr, #0
 80124aa:	6029      	str	r1, [r5, #0]
 80124ac:	7873      	ldrb	r3, [r6, #1]
 80124ae:	7831      	ldrb	r1, [r6, #0]
 80124b0:	78b0      	ldrb	r0, [r6, #2]
 80124b2:	021b      	lsls	r3, r3, #8
 80124b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80124b8:	f413 0f40 	tst.w	r3, #12582912	@ 0xc00000
 80124bc:	ea40 0c03 	orr.w	ip, r0, r3
 80124c0:	eb06 0104 	add.w	r1, r6, r4
 80124c4:	f040 80de 	bne.w	8012684 <ApplyPhaseEvaluation+0xcfc>
 80124c8:	9804      	ldr	r0, [sp, #16]
 80124ca:	f3cc 0315 	ubfx	r3, ip, #0, #22
 80124ce:	4298      	cmp	r0, r3
 80124d0:	f200 80d8 	bhi.w	8012684 <ApplyPhaseEvaluation+0xcfc>
 80124d4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80124d6:	4298      	cmp	r0, r3
 80124d8:	bf38      	it	cc
 80124da:	f04f 0e02 	movcc.w	lr, #2
 80124de:	f8c5 c004 	str.w	ip, [r5, #4]
 80124e2:	784b      	ldrb	r3, [r1, #1]
 80124e4:	5d30      	ldrb	r0, [r6, r4]
 80124e6:	021b      	lsls	r3, r3, #8
 80124e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80124ec:	7888      	ldrb	r0, [r1, #2]
 80124ee:	f413 0f40 	tst.w	r3, #12582912	@ 0xc00000
 80124f2:	4421      	add	r1, r4
 80124f4:	ea40 0003 	orr.w	r0, r0, r3
 80124f8:	f040 80c7 	bne.w	801268a <ApplyPhaseEvaluation+0xd02>
 80124fc:	9b04      	ldr	r3, [sp, #16]
 80124fe:	f3c0 0c15 	ubfx	ip, r0, #0, #22
 8012502:	4563      	cmp	r3, ip
 8012504:	f200 80d6 	bhi.w	80126b4 <ApplyPhaseEvaluation+0xd2c>
 8012508:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801250a:	4563      	cmp	r3, ip
 801250c:	bf38      	it	cc
 801250e:	f04f 0e02 	movcc.w	lr, #2
 8012512:	60a8      	str	r0, [r5, #8]
 8012514:	f816 3014 	ldrb.w	r3, [r6, r4, lsl #1]
 8012518:	7848      	ldrb	r0, [r1, #1]
 801251a:	7889      	ldrb	r1, [r1, #2]
 801251c:	041b      	lsls	r3, r3, #16
 801251e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8012522:	f413 0f40 	tst.w	r3, #12582912	@ 0xc00000
 8012526:	ea41 0103 	orr.w	r1, r1, r3
 801252a:	f040 80a8 	bne.w	801267e <ApplyPhaseEvaluation+0xcf6>
 801252e:	9804      	ldr	r0, [sp, #16]
 8012530:	f3c1 0315 	ubfx	r3, r1, #0, #22
 8012534:	4298      	cmp	r0, r3
 8012536:	f200 80a2 	bhi.w	801267e <ApplyPhaseEvaluation+0xcf6>
 801253a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801253c:	4298      	cmp	r0, r3
 801253e:	bf38      	it	cc
 8012540:	f04f 0e02 	movcc.w	lr, #2
 8012544:	9e08      	ldr	r6, [sp, #32]
 8012546:	60e9      	str	r1, [r5, #12]
 8012548:	ebac 0c08 	sub.w	ip, ip, r8
 801254c:	fb06 f10c 	mul.w	r1, r6, ip
 8012550:	9192      	str	r1, [sp, #584]	@ 0x248
 8012552:	68eb      	ldr	r3, [r5, #12]
 8012554:	6868      	ldr	r0, [r5, #4]
 8012556:	f3c3 0c15 	ubfx	ip, r3, #0, #22
 801255a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801255c:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8012560:	f883 e1b0 	strb.w	lr, [r3, #432]	@ 0x1b0
 8012564:	ebac 0300 	sub.w	r3, ip, r0
 8012568:	9806      	ldr	r0, [sp, #24]
 801256a:	3203      	adds	r2, #3
 801256c:	fb06 f303 	mul.w	r3, r6, r3
 8012570:	b100      	cbz	r0, 8012574 <ApplyPhaseEvaluation+0xbec>
 8012572:	3510      	adds	r5, #16
 8012574:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012576:	1189      	asrs	r1, r1, #6
 8012578:	fb00 f101 	mul.w	r1, r0, r1
 801257c:	119b      	asrs	r3, r3, #6
 801257e:	fb00 f303 	mul.w	r3, r0, r3
 8012582:	2900      	cmp	r1, #0
 8012584:	9192      	str	r1, [sp, #584]	@ 0x248
 8012586:	bfb8      	it	lt
 8012588:	4249      	neglt	r1, r1
 801258a:	2b00      	cmp	r3, #0
 801258c:	9393      	str	r3, [sp, #588]	@ 0x24c
 801258e:	bfb8      	it	lt
 8012590:	425b      	neglt	r3, r3
 8012592:	440b      	add	r3, r1
 8012594:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012596:	0b5b      	lsrs	r3, r3, #13
 8012598:	f8a1 31b2 	strh.w	r3, [r1, #434]	@ 0x1b2
 801259c:	f7ff bb70 	b.w	8011c80 <ApplyPhaseEvaluation+0x2f8>
 80125a0:	9b05      	ldr	r3, [sp, #20]
 80125a2:	f8b0 724e 	ldrh.w	r7, [r0, #590]	@ 0x24e
 80125a6:	f890 c24d 	ldrb.w	ip, [r0, #589]	@ 0x24d
 80125aa:	f1ba 0f00 	cmp.w	sl, #0
 80125ae:	e9d3 62cd 	ldrd	r6, r2, [r3, #820]	@ 0x334
 80125b2:	ea4f 3747 	mov.w	r7, r7, lsl #13
 80125b6:	f8d3 333c 	ldr.w	r3, [r3, #828]	@ 0x33c
 80125ba:	db5a      	blt.n	8012672 <ApplyPhaseEvaluation+0xcea>
 80125bc:	4650      	mov	r0, sl
 80125be:	f04f 34ff 	mov.w	r4, #4294967295
 80125c2:	2101      	movs	r1, #1
 80125c4:	2a00      	cmp	r2, #0
 80125c6:	bfb8      	it	lt
 80125c8:	4252      	neglt	r2, r2
 80125ca:	fba0 2002 	umull	r2, r0, r0, r2
 80125ce:	bfb8      	it	lt
 80125d0:	4621      	movlt	r1, r4
 80125d2:	0bd4      	lsrs	r4, r2, #15
 80125d4:	ea44 4440 	orr.w	r4, r4, r0, lsl #17
 80125d8:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80125dc:	2901      	cmp	r1, #1
 80125de:	4422      	add	r2, r4
 80125e0:	d060      	beq.n	80126a4 <ApplyPhaseEvaluation+0xd1c>
 80125e2:	9208      	str	r2, [sp, #32]
 80125e4:	4250      	negs	r0, r2
 80125e6:	f1b8 0f00 	cmp.w	r8, #0
 80125ea:	db55      	blt.n	8012698 <ApplyPhaseEvaluation+0xd10>
 80125ec:	4641      	mov	r1, r8
 80125ee:	f04f 35ff 	mov.w	r5, #4294967295
 80125f2:	2401      	movs	r4, #1
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	bfb8      	it	lt
 80125f8:	425b      	neglt	r3, r3
 80125fa:	fba1 3103 	umull	r3, r1, r1, r3
 80125fe:	bfb8      	it	lt
 8012600:	462c      	movlt	r4, r5
 8012602:	0bdd      	lsrs	r5, r3, #15
 8012604:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
 8012608:	f3c3 3380 	ubfx	r3, r3, #14, #1
 801260c:	2c01      	cmp	r4, #1
 801260e:	442b      	add	r3, r5
 8012610:	d04c      	beq.n	80126ac <ApplyPhaseEvaluation+0xd24>
 8012612:	9307      	str	r3, [sp, #28]
 8012614:	4259      	negs	r1, r3
 8012616:	2800      	cmp	r0, #0
 8012618:	bfc8      	it	gt
 801261a:	4602      	movgt	r2, r0
 801261c:	2900      	cmp	r1, #0
 801261e:	bfc8      	it	gt
 8012620:	460b      	movgt	r3, r1
 8012622:	4413      	add	r3, r2
 8012624:	429f      	cmp	r7, r3
 8012626:	d235      	bcs.n	8012694 <ApplyPhaseEvaluation+0xd0c>
 8012628:	ea8a 73ea 	eor.w	r3, sl, sl, asr #31
 801262c:	ea88 72e8 	eor.w	r2, r8, r8, asr #31
 8012630:	eba3 73ea 	sub.w	r3, r3, sl, asr #31
 8012634:	eba2 72e8 	sub.w	r2, r2, r8, asr #31
 8012638:	18d2      	adds	r2, r2, r3
 801263a:	d441      	bmi.n	80126c0 <ApplyPhaseEvaluation+0xd38>
 801263c:	2e00      	cmp	r6, #0
 801263e:	db60      	blt.n	8012702 <ApplyPhaseEvaluation+0xd7a>
 8012640:	fba6 6202 	umull	r6, r2, r6, r2
 8012644:	0bf3      	lsrs	r3, r6, #15
 8012646:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 801264a:	f3c6 3580 	ubfx	r5, r6, #14, #1
 801264e:	441d      	add	r5, r3
 8012650:	122d      	asrs	r5, r5, #8
 8012652:	fb0c f505 	mul.w	r5, ip, r5
 8012656:	f3c5 354f 	ubfx	r5, r5, #13, #16
 801265a:	e5d3      	b.n	8012204 <ApplyPhaseEvaluation+0x87c>
 801265c:	ab12      	add	r3, sp, #72	@ 0x48
 801265e:	930e      	str	r3, [sp, #56]	@ 0x38
 8012660:	461d      	mov	r5, r3
 8012662:	4620      	mov	r0, r4
 8012664:	f7ff b9c4 	b.w	80119f0 <ApplyPhaseEvaluation+0x68>
 8012668:	f04f 0e02 	mov.w	lr, #2
 801266c:	f3c1 0815 	ubfx	r8, r1, #0, #22
 8012670:	e71b      	b.n	80124aa <ApplyPhaseEvaluation+0xb22>
 8012672:	f1ca 0000 	rsb	r0, sl, #0
 8012676:	2401      	movs	r4, #1
 8012678:	f04f 31ff 	mov.w	r1, #4294967295
 801267c:	e7a2      	b.n	80125c4 <ApplyPhaseEvaluation+0xc3c>
 801267e:	f04f 0e02 	mov.w	lr, #2
 8012682:	e75f      	b.n	8012544 <ApplyPhaseEvaluation+0xbbc>
 8012684:	f04f 0e02 	mov.w	lr, #2
 8012688:	e729      	b.n	80124de <ApplyPhaseEvaluation+0xb56>
 801268a:	f04f 0e02 	mov.w	lr, #2
 801268e:	f3c0 0c15 	ubfx	ip, r0, #0, #22
 8012692:	e73e      	b.n	8012512 <ApplyPhaseEvaluation+0xb8a>
 8012694:	2500      	movs	r5, #0
 8012696:	e5b5      	b.n	8012204 <ApplyPhaseEvaluation+0x87c>
 8012698:	f1c8 0100 	rsb	r1, r8, #0
 801269c:	2501      	movs	r5, #1
 801269e:	f04f 34ff 	mov.w	r4, #4294967295
 80126a2:	e7a7      	b.n	80125f4 <ApplyPhaseEvaluation+0xc6c>
 80126a4:	4610      	mov	r0, r2
 80126a6:	4252      	negs	r2, r2
 80126a8:	9208      	str	r2, [sp, #32]
 80126aa:	e79c      	b.n	80125e6 <ApplyPhaseEvaluation+0xc5e>
 80126ac:	4619      	mov	r1, r3
 80126ae:	425b      	negs	r3, r3
 80126b0:	9307      	str	r3, [sp, #28]
 80126b2:	e7b0      	b.n	8012616 <ApplyPhaseEvaluation+0xc8e>
 80126b4:	f04f 0e02 	mov.w	lr, #2
 80126b8:	e72b      	b.n	8012512 <ApplyPhaseEvaluation+0xb8a>
 80126ba:	f04f 0e02 	mov.w	lr, #2
 80126be:	e6f4      	b.n	80124aa <ApplyPhaseEvaluation+0xb22>
 80126c0:	2e00      	cmp	r6, #0
 80126c2:	f1c2 0200 	rsb	r2, r2, #0
 80126c6:	db12      	blt.n	80126ee <ApplyPhaseEvaluation+0xd66>
 80126c8:	17d1      	asrs	r1, r2, #31
 80126ca:	fba6 3202 	umull	r3, r2, r6, r2
 80126ce:	fb06 2201 	mla	r2, r6, r1, r2
 80126d2:	0bd9      	lsrs	r1, r3, #15
 80126d4:	ea41 4142 	orr.w	r1, r1, r2, lsl #17
 80126d8:	f3c3 3580 	ubfx	r5, r3, #14, #1
 80126dc:	440d      	add	r5, r1
 80126de:	426d      	negs	r5, r5
 80126e0:	e7b6      	b.n	8012650 <ApplyPhaseEvaluation+0xcc8>
 80126e2:	f1ca 0300 	rsb	r3, sl, #0
 80126e6:	2401      	movs	r4, #1
 80126e8:	f04f 32ff 	mov.w	r2, #4294967295
 80126ec:	e67c      	b.n	80123e8 <ApplyPhaseEvaluation+0xa60>
 80126ee:	4273      	negs	r3, r6
 80126f0:	fb83 3202 	smull	r3, r2, r3, r2
 80126f4:	0bd9      	lsrs	r1, r3, #15
 80126f6:	ea41 4142 	orr.w	r1, r1, r2, lsl #17
 80126fa:	f3c3 3580 	ubfx	r5, r3, #14, #1
 80126fe:	440d      	add	r5, r1
 8012700:	e7a6      	b.n	8012650 <ApplyPhaseEvaluation+0xcc8>
 8012702:	4273      	negs	r3, r6
 8012704:	17d8      	asrs	r0, r3, #31
 8012706:	fba3 3102 	umull	r3, r1, r3, r2
 801270a:	fb02 1100 	mla	r1, r2, r0, r1
 801270e:	0bda      	lsrs	r2, r3, #15
 8012710:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8012714:	f3c3 3580 	ubfx	r5, r3, #14, #1
 8012718:	4415      	add	r5, r2
 801271a:	e7e0      	b.n	80126de <ApplyPhaseEvaluation+0xd56>
 801271c:	f1c8 0300 	rsb	r3, r8, #0
 8012720:	2401      	movs	r4, #1
 8012722:	f04f 32ff 	mov.w	r2, #4294967295
 8012726:	e677      	b.n	8012418 <ApplyPhaseEvaluation+0xa90>

08012728 <Argus_Eval_Init>:
 8012728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801272a:	4604      	mov	r4, r0
 801272c:	461d      	mov	r5, r3
 801272e:	460e      	mov	r6, r1
 8012730:	4617      	mov	r7, r2
 8012732:	2100      	movs	r1, #0
 8012734:	f44f 725c 	mov.w	r2, #880	@ 0x370
 8012738:	f011 f853 	bl	80237e2 <memset>
 801273c:	9906      	ldr	r1, [sp, #24]
 801273e:	f8c4 5354 	str.w	r5, [r4, #852]	@ 0x354
 8012742:	f504 7056 	add.w	r0, r4, #856	@ 0x358
 8012746:	e9c4 67da 	strd	r6, r7, [r4, #872]	@ 0x368
 801274a:	f001 fb63 	bl	8013e14 <Argus_Pba_Init>
 801274e:	4620      	mov	r0, r4
 8012750:	f504 71c6 	add.w	r1, r4, #396	@ 0x18c
 8012754:	7a02      	ldrb	r2, [r0, #8]
 8012756:	f890 319c 	ldrb.w	r3, [r0, #412]	@ 0x19c
 801275a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 801275e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8012762:	7202      	strb	r2, [r0, #8]
 8012764:	f880 319c 	strb.w	r3, [r0, #412]	@ 0x19c
 8012768:	300c      	adds	r0, #12
 801276a:	4288      	cmp	r0, r1
 801276c:	d1f2      	bne.n	8012754 <Argus_Eval_Init+0x2c>
 801276e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012770 <Argus_Eval_Update>:
 8012770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012774:	f891 30ac 	ldrb.w	r3, [r1, #172]	@ 0xac
 8012778:	f992 4297 	ldrsb.w	r4, [r2, #663]	@ 0x297
 801277c:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8012780:	460f      	mov	r7, r1
 8012782:	4690      	mov	r8, r2
 8012784:	4606      	mov	r6, r0
 8012786:	2b00      	cmp	r3, #0
 8012788:	f000 81dd 	beq.w	8012b46 <Argus_Eval_Update+0x3d6>
 801278c:	3b01      	subs	r3, #1
 801278e:	b2db      	uxtb	r3, r3
 8012790:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012794:	2c00      	cmp	r4, #0
 8012796:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801279a:	eb0c 0053 	add.w	r0, ip, r3, lsr #1
 801279e:	ebac 0c53 	sub.w	ip, ip, r3, lsr #1
 80127a2:	f2c0 81d4 	blt.w	8012b4e <Argus_Eval_Update+0x3de>
 80127a6:	f1bc 0f00 	cmp.w	ip, #0
 80127aa:	4621      	mov	r1, r4
 80127ac:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80127b0:	f2c0 81df 	blt.w	8012b72 <Argus_Eval_Update+0x402>
 80127b4:	fbac 3204 	umull	r3, r2, ip, r4
 80127b8:	fb0c 2205 	mla	r2, ip, r5, r2
 80127bc:	ea4f 2e93 	mov.w	lr, r3, lsr #10
 80127c0:	ea4e 5e82 	orr.w	lr, lr, r2, lsl #22
 80127c4:	f3c3 2240 	ubfx	r2, r3, #9, #1
 80127c8:	4472      	add	r2, lr
 80127ca:	2800      	cmp	r0, #0
 80127cc:	4462      	add	r2, ip
 80127ce:	f2c0 81df 	blt.w	8012b90 <Argus_Eval_Update+0x420>
 80127d2:	2c00      	cmp	r4, #0
 80127d4:	f2c0 83e1 	blt.w	8012f9a <Argus_Eval_Update+0x82a>
 80127d8:	fba0 3101 	umull	r3, r1, r0, r1
 80127dc:	0a9c      	lsrs	r4, r3, #10
 80127de:	fb00 1505 	mla	r5, r0, r5, r1
 80127e2:	ea44 5485 	orr.w	r4, r4, r5, lsl #22
 80127e6:	f3c3 2340 	ubfx	r3, r3, #9, #1
 80127ea:	4423      	add	r3, r4
 80127ec:	f897 e07b 	ldrb.w	lr, [r7, #123]	@ 0x7b
 80127f0:	ea4f 1e9e 	mov.w	lr, lr, lsr #6
 80127f4:	4418      	add	r0, r3
 80127f6:	f1ce 0e04 	rsb	lr, lr, #4
 80127fa:	7bbb      	ldrb	r3, [r7, #14]
 80127fc:	fa02 f20e 	lsl.w	r2, r2, lr
 8012800:	4692      	mov	sl, r2
 8012802:	041d      	lsls	r5, r3, #16
 8012804:	2b00      	cmp	r3, #0
 8012806:	f000 81d8 	beq.w	8012bba <Argus_Eval_Update+0x44a>
 801280a:	2a00      	cmp	r2, #0
 801280c:	bfb8      	it	lt
 801280e:	4252      	neglt	r2, r2
 8012810:	4295      	cmp	r5, r2
 8012812:	4629      	mov	r1, r5
 8012814:	f080 84a5 	bcs.w	8013162 <Argus_Eval_Update+0x9f2>
 8012818:	462b      	mov	r3, r5
 801281a:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 801281e:	4699      	mov	r9, r3
 8012820:	005b      	lsls	r3, r3, #1
 8012822:	4293      	cmp	r3, r2
 8012824:	46a4      	mov	ip, r4
 8012826:	ea4f 0444 	mov.w	r4, r4, lsl #1
 801282a:	d3f8      	bcc.n	801281e <Argus_Eval_Update+0xae>
 801282c:	2c00      	cmp	r4, #0
 801282e:	f040 838d 	bne.w	8012f4c <Argus_Eval_Update+0x7dc>
 8012832:	ea9a 0f05 	teq	sl, r5
 8012836:	f100 84cf 	bmi.w	80131d8 <Argus_Eval_Update+0xa68>
 801283a:	f06f 0401 	mvn.w	r4, #1
 801283e:	46a4      	mov	ip, r4
 8012840:	fa00 f20e 	lsl.w	r2, r0, lr
 8012844:	2a00      	cmp	r2, #0
 8012846:	4691      	mov	r9, r2
 8012848:	bfb8      	it	lt
 801284a:	4252      	neglt	r2, r2
 801284c:	4295      	cmp	r5, r2
 801284e:	bf38      	it	cc
 8012850:	f44f 3380 	movcc.w	r3, #65536	@ 0x10000
 8012854:	f080 8451 	bcs.w	80130fa <Argus_Eval_Update+0x98a>
 8012858:	468e      	mov	lr, r1
 801285a:	0049      	lsls	r1, r1, #1
 801285c:	4291      	cmp	r1, r2
 801285e:	4618      	mov	r0, r3
 8012860:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012864:	d3f8      	bcc.n	8012858 <Argus_Eval_Update+0xe8>
 8012866:	2b00      	cmp	r3, #0
 8012868:	f040 834a 	bne.w	8012f00 <Argus_Eval_Update+0x790>
 801286c:	ea95 0f09 	teq	r5, r9
 8012870:	f100 8498 	bmi.w	80131a4 <Argus_Eval_Update+0xa34>
 8012874:	f1bc 0f00 	cmp.w	ip, #0
 8012878:	f000 83ff 	beq.w	801307a <Argus_Eval_Update+0x90a>
 801287c:	f06f 0501 	mvn.w	r5, #1
 8012880:	4629      	mov	r1, r5
 8012882:	f1bc 0f00 	cmp.w	ip, #0
 8012886:	f2c0 8471 	blt.w	801316c <Argus_Eval_Update+0x9fc>
 801288a:	4bd3      	ldr	r3, [pc, #844]	@ (8012bd8 <Argus_Eval_Update+0x468>)
 801288c:	429c      	cmp	r4, r3
 801288e:	f200 847d 	bhi.w	801318c <Argus_Eval_Update+0xa1c>
 8012892:	48d1      	ldr	r0, [pc, #836]	@ (8012bd8 <Argus_Eval_Update+0x468>)
 8012894:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8012898:	46a6      	mov	lr, r4
 801289a:	0064      	lsls	r4, r4, #1
 801289c:	4284      	cmp	r4, r0
 801289e:	461a      	mov	r2, r3
 80128a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80128a4:	d9f8      	bls.n	8012898 <Argus_Eval_Update+0x128>
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	f040 8308 	bne.w	8012ebc <Argus_Eval_Update+0x74c>
 80128ac:	f1bc 0f00 	cmp.w	ip, #0
 80128b0:	f2c0 849e 	blt.w	80131f0 <Argus_Eval_Update+0xa80>
 80128b4:	f06f 0307 	mvn.w	r3, #7
 80128b8:	f8c6 3328 	str.w	r3, [r6, #808]	@ 0x328
 80128bc:	2d00      	cmp	r5, #0
 80128be:	f000 837e 	beq.w	8012fbe <Argus_Eval_Update+0x84e>
 80128c2:	f06f 0307 	mvn.w	r3, #7
 80128c6:	2d00      	cmp	r5, #0
 80128c8:	f2c0 83f0 	blt.w	80130ac <Argus_Eval_Update+0x93c>
 80128cc:	4ac2      	ldr	r2, [pc, #776]	@ (8012bd8 <Argus_Eval_Update+0x468>)
 80128ce:	f8df e30c 	ldr.w	lr, [pc, #780]	@ 8012bdc <Argus_Eval_Update+0x46c>
 80128d2:	4291      	cmp	r1, r2
 80128d4:	ea85 0e0e 	eor.w	lr, r5, lr
 80128d8:	f200 845b 	bhi.w	8013192 <Argus_Eval_Update+0xa22>
 80128dc:	48be      	ldr	r0, [pc, #760]	@ (8012bd8 <Argus_Eval_Update+0x468>)
 80128de:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 80128e2:	460a      	mov	r2, r1
 80128e4:	ebb0 0f42 	cmp.w	r0, r2, lsl #1
 80128e8:	46a4      	mov	ip, r4
 80128ea:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80128ee:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80128f2:	d2f6      	bcs.n	80128e2 <Argus_Eval_Update+0x172>
 80128f4:	2c00      	cmp	r4, #0
 80128f6:	f040 826b 	bne.w	8012dd0 <Argus_Eval_Update+0x660>
 80128fa:	f1be 0f00 	cmp.w	lr, #0
 80128fe:	f2c0 846e 	blt.w	80131de <Argus_Eval_Update+0xa6e>
 8012902:	f06f 0207 	mvn.w	r2, #7
 8012906:	f9b8 52a8 	ldrsh.w	r5, [r8, #680]	@ 0x2a8
 801290a:	f8c6 232c 	str.w	r2, [r6, #812]	@ 0x32c
 801290e:	4293      	cmp	r3, r2
 8012910:	ea4f 1585 	mov.w	r5, r5, lsl #6
 8012914:	d049      	beq.n	80129aa <Argus_Eval_Update+0x23a>
 8012916:	f8df c2c8 	ldr.w	ip, [pc, #712]	@ 8012be0 <Argus_Eval_Update+0x470>
 801291a:	2408      	movs	r4, #8
 801291c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8012920:	0064      	lsls	r4, r4, #1
 8012922:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 8012926:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801292a:	d3f9      	bcc.n	8012920 <Argus_Eval_Update+0x1b0>
 801292c:	2a00      	cmp	r2, #0
 801292e:	f040 8282 	bne.w	8012e36 <Argus_Eval_Update+0x6c6>
 8012932:	f1bc 0f00 	cmp.w	ip, #0
 8012936:	f2c0 8474 	blt.w	8013222 <Argus_Eval_Update+0xab2>
 801293a:	469c      	mov	ip, r3
 801293c:	b39b      	cbz	r3, 80129a6 <Argus_Eval_Update+0x236>
 801293e:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8012942:	2b00      	cmp	r3, #0
 8012944:	f2c0 8295 	blt.w	8012e72 <Argus_Eval_Update+0x702>
 8012948:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801294c:	f080 8432 	bcs.w	80131b4 <Argus_Eval_Update+0xa44>
 8012950:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8012954:	005b      	lsls	r3, r3, #1
 8012956:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801295a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801295e:	d3f9      	bcc.n	8012954 <Argus_Eval_Update+0x1e4>
 8012960:	2a00      	cmp	r2, #0
 8012962:	f040 8292 	bne.w	8012e8a <Argus_Eval_Update+0x71a>
 8012966:	f1bc 0f00 	cmp.w	ip, #0
 801296a:	f2c0 8454 	blt.w	8013216 <Argus_Eval_Update+0xaa6>
 801296e:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8012972:	1b00      	subs	r0, r0, r4
 8012974:	2800      	cmp	r0, #0
 8012976:	d016      	beq.n	80129a6 <Argus_Eval_Update+0x236>
 8012978:	f2c0 8377 	blt.w	801306a <Argus_Eval_Update+0x8fa>
 801297c:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 8012980:	4602      	mov	r2, r0
 8012982:	f080 5480 	eor.w	r4, r0, #268435456	@ 0x10000000
 8012986:	f280 8325 	bge.w	8012fd4 <Argus_Eval_Update+0x864>
 801298a:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 801298e:	0052      	lsls	r2, r2, #1
 8012990:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 8012994:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012998:	d3f9      	bcc.n	801298e <Argus_Eval_Update+0x21e>
 801299a:	2900      	cmp	r1, #0
 801299c:	f040 831c 	bne.w	8012fd8 <Argus_Eval_Update+0x868>
 80129a0:	2c00      	cmp	r4, #0
 80129a2:	f2c0 8433 	blt.w	801320c <Argus_Eval_Update+0xa9c>
 80129a6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80129aa:	4618      	mov	r0, r3
 80129ac:	ea85 71e5 	eor.w	r1, r5, r5, asr #31
 80129b0:	2800      	cmp	r0, #0
 80129b2:	eba1 71e5 	sub.w	r1, r1, r5, asr #31
 80129b6:	f2c0 81e7 	blt.w	8012d88 <Argus_Eval_Update+0x618>
 80129ba:	428b      	cmp	r3, r1
 80129bc:	bf28      	it	cs
 80129be:	f44f 3280 	movcs.w	r2, #65536	@ 0x10000
 80129c2:	f080 8134 	bcs.w	8012c2e <Argus_Eval_Update+0x4be>
 80129c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80129ca:	005b      	lsls	r3, r3, #1
 80129cc:	428b      	cmp	r3, r1
 80129ce:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80129d2:	d3fa      	bcc.n	80129ca <Argus_Eval_Update+0x25a>
 80129d4:	2a00      	cmp	r2, #0
 80129d6:	f040 812a 	bne.w	8012c2e <Argus_Eval_Update+0x4be>
 80129da:	ea85 0100 	eor.w	r1, r5, r0
 80129de:	43c9      	mvns	r1, r1
 80129e0:	0fc9      	lsrs	r1, r1, #31
 80129e2:	4249      	negs	r1, r1
 80129e4:	b289      	uxth	r1, r1
 80129e6:	f8a6 1350 	strh.w	r1, [r6, #848]	@ 0x350
 80129ea:	4638      	mov	r0, r7
 80129ec:	f007 fcb4 	bl	801a358 <Argus_Dev_GetPixelCount>
 80129f0:	f9b8 c250 	ldrsh.w	ip, [r8, #592]	@ 0x250
 80129f4:	0402      	lsls	r2, r0, #16
 80129f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80129fa:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80129fe:	fbb3 f0f0 	udiv	r0, r3, r0
 8012a02:	4614      	mov	r4, r2
 8012a04:	f8c6 0334 	str.w	r0, [r6, #820]	@ 0x334
 8012a08:	2a00      	cmp	r2, #0
 8012a0a:	f000 80eb 	beq.w	8012be4 <Argus_Eval_Update+0x474>
 8012a0e:	ea8c 70ec 	eor.w	r0, ip, ip, asr #31
 8012a12:	2a00      	cmp	r2, #0
 8012a14:	eba0 70ec 	sub.w	r0, r0, ip, asr #31
 8012a18:	f2c0 81a7 	blt.w	8012d6a <Argus_Eval_Update+0x5fa>
 8012a1c:	4282      	cmp	r2, r0
 8012a1e:	4611      	mov	r1, r2
 8012a20:	f080 813c 	bcs.w	8012c9c <Argus_Eval_Update+0x52c>
 8012a24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8012a28:	0049      	lsls	r1, r1, #1
 8012a2a:	4281      	cmp	r1, r0
 8012a2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012a30:	d3fa      	bcc.n	8012a28 <Argus_Eval_Update+0x2b8>
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	f040 8132 	bne.w	8012c9c <Argus_Eval_Update+0x52c>
 8012a38:	ea9c 0f02 	teq	ip, r2
 8012a3c:	bf4c      	ite	mi
 8012a3e:	f04f 4500 	movmi.w	r5, #2147483648	@ 0x80000000
 8012a42:	f06f 4500 	mvnpl.w	r5, #2147483648	@ 0x80000000
 8012a46:	f9b8 c252 	ldrsh.w	ip, [r8, #594]	@ 0x252
 8012a4a:	f8c6 5338 	str.w	r5, [r6, #824]	@ 0x338
 8012a4e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8012a52:	ea8c 70ec 	eor.w	r0, ip, ip, asr #31
 8012a56:	2a00      	cmp	r2, #0
 8012a58:	eba0 70ec 	sub.w	r0, r0, ip, asr #31
 8012a5c:	f2c0 8176 	blt.w	8012d4c <Argus_Eval_Update+0x5dc>
 8012a60:	4282      	cmp	r2, r0
 8012a62:	4611      	mov	r1, r2
 8012a64:	bf28      	it	cs
 8012a66:	f44f 3380 	movcs.w	r3, #65536	@ 0x10000
 8012a6a:	f080 80fe 	bcs.w	8012c6a <Argus_Eval_Update+0x4fa>
 8012a6e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8012a72:	0049      	lsls	r1, r1, #1
 8012a74:	4281      	cmp	r1, r0
 8012a76:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012a7a:	d3fa      	bcc.n	8012a72 <Argus_Eval_Update+0x302>
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	f040 80f4 	bne.w	8012c6a <Argus_Eval_Update+0x4fa>
 8012a82:	ea92 0f0c 	teq	r2, ip
 8012a86:	bf4c      	ite	mi
 8012a88:	f04f 4500 	movmi.w	r5, #2147483648	@ 0x80000000
 8012a8c:	f06f 4500 	mvnpl.w	r5, #2147483648	@ 0x80000000
 8012a90:	f9b8 c254 	ldrsh.w	ip, [r8, #596]	@ 0x254
 8012a94:	f8c6 533c 	str.w	r5, [r6, #828]	@ 0x33c
 8012a98:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8012a9c:	ea8c 70ec 	eor.w	r0, ip, ip, asr #31
 8012aa0:	2a00      	cmp	r2, #0
 8012aa2:	eba0 70ec 	sub.w	r0, r0, ip, asr #31
 8012aa6:	f2c0 8142 	blt.w	8012d2e <Argus_Eval_Update+0x5be>
 8012aaa:	4282      	cmp	r2, r0
 8012aac:	4611      	mov	r1, r2
 8012aae:	bf28      	it	cs
 8012ab0:	f44f 3380 	movcs.w	r3, #65536	@ 0x10000
 8012ab4:	f080 8122 	bcs.w	8012cfc <Argus_Eval_Update+0x58c>
 8012ab8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8012abc:	0049      	lsls	r1, r1, #1
 8012abe:	4281      	cmp	r1, r0
 8012ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012ac4:	d3fa      	bcc.n	8012abc <Argus_Eval_Update+0x34c>
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	f040 8118 	bne.w	8012cfc <Argus_Eval_Update+0x58c>
 8012acc:	ea92 0f0c 	teq	r2, ip
 8012ad0:	bf4c      	ite	mi
 8012ad2:	f04f 4500 	movmi.w	r5, #2147483648	@ 0x80000000
 8012ad6:	f06f 4500 	mvnpl.w	r5, #2147483648	@ 0x80000000
 8012ada:	f8c6 5340 	str.w	r5, [r6, #832]	@ 0x340
 8012ade:	f9b8 5256 	ldrsh.w	r5, [r8, #598]	@ 0x256
 8012ae2:	012d      	lsls	r5, r5, #4
 8012ae4:	ea85 71e5 	eor.w	r1, r5, r5, asr #31
 8012ae8:	2a00      	cmp	r2, #0
 8012aea:	eba1 71e5 	sub.w	r1, r1, r5, asr #31
 8012aee:	f2c0 815b 	blt.w	8012da8 <Argus_Eval_Update+0x638>
 8012af2:	428a      	cmp	r2, r1
 8012af4:	bf28      	it	cs
 8012af6:	f44f 3380 	movcs.w	r3, #65536	@ 0x10000
 8012afa:	f080 80e8 	bcs.w	8012cce <Argus_Eval_Update+0x55e>
 8012afe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8012b02:	0052      	lsls	r2, r2, #1
 8012b04:	428a      	cmp	r2, r1
 8012b06:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012b0a:	d3fa      	bcc.n	8012b02 <Argus_Eval_Update+0x392>
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	f040 80de 	bne.w	8012cce <Argus_Eval_Update+0x55e>
 8012b12:	ea94 0f05 	teq	r4, r5
 8012b16:	f100 8087 	bmi.w	8012c28 <Argus_Eval_Update+0x4b8>
 8012b1a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8012b1e:	f9b8 325a 	ldrsh.w	r3, [r8, #602]	@ 0x25a
 8012b22:	f8c6 0344 	str.w	r0, [r6, #836]	@ 0x344
 8012b26:	011b      	lsls	r3, r3, #4
 8012b28:	f8c6 3348 	str.w	r3, [r6, #840]	@ 0x348
 8012b2c:	f9b8 325c 	ldrsh.w	r3, [r8, #604]	@ 0x25c
 8012b30:	011b      	lsls	r3, r3, #4
 8012b32:	4642      	mov	r2, r8
 8012b34:	f8c6 334c 	str.w	r3, [r6, #844]	@ 0x34c
 8012b38:	4639      	mov	r1, r7
 8012b3a:	f506 7056 	add.w	r0, r6, #856	@ 0x358
 8012b3e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b42:	f001 b9d3 	b.w	8013eec <Argus_Pba_UpdateConfig>
 8012b46:	2c00      	cmp	r4, #0
 8012b48:	4660      	mov	r0, ip
 8012b4a:	f6bf ae2c 	bge.w	80127a6 <Argus_Eval_Update+0x36>
 8012b4e:	4261      	negs	r1, r4
 8012b50:	f1bc 0f00 	cmp.w	ip, #0
 8012b54:	ea4f 75e1 	mov.w	r5, r1, asr #31
 8012b58:	f2c0 8297 	blt.w	801308a <Argus_Eval_Update+0x91a>
 8012b5c:	fbac 3e01 	umull	r3, lr, ip, r1
 8012b60:	0a9a      	lsrs	r2, r3, #10
 8012b62:	fb0c ee05 	mla	lr, ip, r5, lr
 8012b66:	ea42 528e 	orr.w	r2, r2, lr, lsl #22
 8012b6a:	f3c3 2340 	ubfx	r3, r3, #9, #1
 8012b6e:	4413      	add	r3, r2
 8012b70:	e009      	b.n	8012b86 <Argus_Eval_Update+0x416>
 8012b72:	f1cc 0300 	rsb	r3, ip, #0
 8012b76:	fb83 3e04 	smull	r3, lr, r3, r4
 8012b7a:	0a9a      	lsrs	r2, r3, #10
 8012b7c:	ea42 528e 	orr.w	r2, r2, lr, lsl #22
 8012b80:	f3c3 2340 	ubfx	r3, r3, #9, #1
 8012b84:	4413      	add	r3, r2
 8012b86:	425a      	negs	r2, r3
 8012b88:	2800      	cmp	r0, #0
 8012b8a:	4462      	add	r2, ip
 8012b8c:	f6bf ae21 	bge.w	80127d2 <Argus_Eval_Update+0x62>
 8012b90:	2c00      	cmp	r4, #0
 8012b92:	f1c0 0300 	rsb	r3, r0, #0
 8012b96:	f2c0 8351 	blt.w	801323c <Argus_Eval_Update+0xacc>
 8012b9a:	17dc      	asrs	r4, r3, #31
 8012b9c:	fb03 f505 	mul.w	r5, r3, r5
 8012ba0:	fb01 5504 	mla	r5, r1, r4, r5
 8012ba4:	fba3 3101 	umull	r3, r1, r3, r1
 8012ba8:	0a9c      	lsrs	r4, r3, #10
 8012baa:	4429      	add	r1, r5
 8012bac:	ea44 5481 	orr.w	r4, r4, r1, lsl #22
 8012bb0:	f3c3 2340 	ubfx	r3, r3, #9, #1
 8012bb4:	4423      	add	r3, r4
 8012bb6:	425b      	negs	r3, r3
 8012bb8:	e618      	b.n	80127ec <Argus_Eval_Update+0x7c>
 8012bba:	2a00      	cmp	r2, #0
 8012bbc:	f2c0 81f8 	blt.w	8012fb0 <Argus_Eval_Update+0x840>
 8012bc0:	fa10 f30e 	lsls.w	r3, r0, lr
 8012bc4:	f100 8237 	bmi.w	8013036 <Argus_Eval_Update+0x8c6>
 8012bc8:	f06f 0501 	mvn.w	r5, #1
 8012bcc:	4629      	mov	r1, r5
 8012bce:	f06f 0c01 	mvn.w	ip, #1
 8012bd2:	2402      	movs	r4, #2
 8012bd4:	e65d      	b.n	8012892 <Argus_Eval_Update+0x122>
 8012bd6:	bf00      	nop
 8012bd8:	4779e127 	.word	0x4779e127
 8012bdc:	4779e128 	.word	0x4779e128
 8012be0:	effffff8 	.word	0xeffffff8
 8012be4:	f9b8 3252 	ldrsh.w	r3, [r8, #594]	@ 0x252
 8012be8:	f1bc 0f00 	cmp.w	ip, #0
 8012bec:	bfb4      	ite	lt
 8012bee:	f04f 4200 	movlt.w	r2, #2147483648	@ 0x80000000
 8012bf2:	f06f 4200 	mvnge.w	r2, #2147483648	@ 0x80000000
 8012bf6:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8012bfa:	bf14      	ite	ne
 8012bfc:	f04f 4300 	movne.w	r3, #2147483648	@ 0x80000000
 8012c00:	f06f 4300 	mvneq.w	r3, #2147483648	@ 0x80000000
 8012c04:	e9c6 23ce 	strd	r2, r3, [r6, #824]	@ 0x338
 8012c08:	f9b8 2254 	ldrsh.w	r2, [r8, #596]	@ 0x254
 8012c0c:	f9b8 3256 	ldrsh.w	r3, [r8, #598]	@ 0x256
 8012c10:	f012 6f00 	tst.w	r2, #134217728	@ 0x8000000
 8012c14:	bf14      	ite	ne
 8012c16:	f04f 4200 	movne.w	r2, #2147483648	@ 0x80000000
 8012c1a:	f06f 4200 	mvneq.w	r2, #2147483648	@ 0x80000000
 8012c1e:	011b      	lsls	r3, r3, #4
 8012c20:	f8c6 2340 	str.w	r2, [r6, #832]	@ 0x340
 8012c24:	f57f af79 	bpl.w	8012b1a <Argus_Eval_Update+0x3aa>
 8012c28:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8012c2c:	e777      	b.n	8012b1e <Argus_Eval_Update+0x3ae>
 8012c2e:	460c      	mov	r4, r1
 8012c30:	b151      	cbz	r1, 8012c48 <Argus_Eval_Update+0x4d8>
 8012c32:	2400      	movs	r4, #0
 8012c34:	e000      	b.n	8012c38 <Argus_Eval_Update+0x4c8>
 8012c36:	b139      	cbz	r1, 8012c48 <Argus_Eval_Update+0x4d8>
 8012c38:	428b      	cmp	r3, r1
 8012c3a:	bf9c      	itt	ls
 8012c3c:	1ac9      	subls	r1, r1, r3
 8012c3e:	4314      	orrls	r4, r2
 8012c40:	0852      	lsrs	r2, r2, #1
 8012c42:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012c46:	d1f6      	bne.n	8012c36 <Argus_Eval_Update+0x4c6>
 8012c48:	428b      	cmp	r3, r1
 8012c4a:	bf98      	it	ls
 8012c4c:	3401      	addls	r4, #1
 8012c4e:	ea95 0f00 	teq	r5, r0
 8012c52:	f100 826e 	bmi.w	8013132 <Argus_Eval_Update+0x9c2>
 8012c56:	2c00      	cmp	r4, #0
 8012c58:	db04      	blt.n	8012c64 <Argus_Eval_Update+0x4f4>
 8012c5a:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8012c5e:	429c      	cmp	r4, r3
 8012c60:	f340 81d8 	ble.w	8013014 <Argus_Eval_Update+0x8a4>
 8012c64:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8012c68:	e6bd      	b.n	80129e6 <Argus_Eval_Update+0x276>
 8012c6a:	4605      	mov	r5, r0
 8012c6c:	b150      	cbz	r0, 8012c84 <Argus_Eval_Update+0x514>
 8012c6e:	2500      	movs	r5, #0
 8012c70:	e000      	b.n	8012c74 <Argus_Eval_Update+0x504>
 8012c72:	b138      	cbz	r0, 8012c84 <Argus_Eval_Update+0x514>
 8012c74:	4281      	cmp	r1, r0
 8012c76:	bf9c      	itt	ls
 8012c78:	1a40      	subls	r0, r0, r1
 8012c7a:	431d      	orrls	r5, r3
 8012c7c:	085b      	lsrs	r3, r3, #1
 8012c7e:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8012c82:	d1f6      	bne.n	8012c72 <Argus_Eval_Update+0x502>
 8012c84:	4281      	cmp	r1, r0
 8012c86:	bf98      	it	ls
 8012c88:	3501      	addls	r5, #1
 8012c8a:	ea92 0f0c 	teq	r2, ip
 8012c8e:	f100 8266 	bmi.w	801315e <Argus_Eval_Update+0x9ee>
 8012c92:	2d00      	cmp	r5, #0
 8012c94:	bfb8      	it	lt
 8012c96:	f06f 4500 	mvnlt.w	r5, #2147483648	@ 0x80000000
 8012c9a:	e6f9      	b.n	8012a90 <Argus_Eval_Update+0x320>
 8012c9c:	4605      	mov	r5, r0
 8012c9e:	b150      	cbz	r0, 8012cb6 <Argus_Eval_Update+0x546>
 8012ca0:	2500      	movs	r5, #0
 8012ca2:	e000      	b.n	8012ca6 <Argus_Eval_Update+0x536>
 8012ca4:	b138      	cbz	r0, 8012cb6 <Argus_Eval_Update+0x546>
 8012ca6:	4281      	cmp	r1, r0
 8012ca8:	bf9c      	itt	ls
 8012caa:	1a40      	subls	r0, r0, r1
 8012cac:	431d      	orrls	r5, r3
 8012cae:	085b      	lsrs	r3, r3, #1
 8012cb0:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8012cb4:	d1f6      	bne.n	8012ca4 <Argus_Eval_Update+0x534>
 8012cb6:	4281      	cmp	r1, r0
 8012cb8:	bf98      	it	ls
 8012cba:	3501      	addls	r5, #1
 8012cbc:	ea9c 0f02 	teq	ip, r2
 8012cc0:	f100 8241 	bmi.w	8013146 <Argus_Eval_Update+0x9d6>
 8012cc4:	2d00      	cmp	r5, #0
 8012cc6:	bfb8      	it	lt
 8012cc8:	f06f 4500 	mvnlt.w	r5, #2147483648	@ 0x80000000
 8012ccc:	e6bb      	b.n	8012a46 <Argus_Eval_Update+0x2d6>
 8012cce:	4608      	mov	r0, r1
 8012cd0:	b151      	cbz	r1, 8012ce8 <Argus_Eval_Update+0x578>
 8012cd2:	2000      	movs	r0, #0
 8012cd4:	e000      	b.n	8012cd8 <Argus_Eval_Update+0x568>
 8012cd6:	b139      	cbz	r1, 8012ce8 <Argus_Eval_Update+0x578>
 8012cd8:	428a      	cmp	r2, r1
 8012cda:	bf9c      	itt	ls
 8012cdc:	1a89      	subls	r1, r1, r2
 8012cde:	4318      	orrls	r0, r3
 8012ce0:	085b      	lsrs	r3, r3, #1
 8012ce2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012ce6:	d1f6      	bne.n	8012cd6 <Argus_Eval_Update+0x566>
 8012ce8:	428a      	cmp	r2, r1
 8012cea:	bf98      	it	ls
 8012cec:	3001      	addls	r0, #1
 8012cee:	ea94 0f05 	teq	r4, r5
 8012cf2:	d46b      	bmi.n	8012dcc <Argus_Eval_Update+0x65c>
 8012cf4:	2800      	cmp	r0, #0
 8012cf6:	f6bf af12 	bge.w	8012b1e <Argus_Eval_Update+0x3ae>
 8012cfa:	e70e      	b.n	8012b1a <Argus_Eval_Update+0x3aa>
 8012cfc:	4605      	mov	r5, r0
 8012cfe:	b150      	cbz	r0, 8012d16 <Argus_Eval_Update+0x5a6>
 8012d00:	2500      	movs	r5, #0
 8012d02:	e000      	b.n	8012d06 <Argus_Eval_Update+0x596>
 8012d04:	b138      	cbz	r0, 8012d16 <Argus_Eval_Update+0x5a6>
 8012d06:	4281      	cmp	r1, r0
 8012d08:	bf9c      	itt	ls
 8012d0a:	1a40      	subls	r0, r0, r1
 8012d0c:	431d      	orrls	r5, r3
 8012d0e:	085b      	lsrs	r3, r3, #1
 8012d10:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8012d14:	d1f6      	bne.n	8012d04 <Argus_Eval_Update+0x594>
 8012d16:	4281      	cmp	r1, r0
 8012d18:	bf98      	it	ls
 8012d1a:	3501      	addls	r5, #1
 8012d1c:	ea92 0f0c 	teq	r2, ip
 8012d20:	f100 81e9 	bmi.w	80130f6 <Argus_Eval_Update+0x986>
 8012d24:	2d00      	cmp	r5, #0
 8012d26:	bfb8      	it	lt
 8012d28:	f06f 4500 	mvnlt.w	r5, #2147483648	@ 0x80000000
 8012d2c:	e6d5      	b.n	8012ada <Argus_Eval_Update+0x36a>
 8012d2e:	4251      	negs	r1, r2
 8012d30:	4281      	cmp	r1, r0
 8012d32:	f4ff aec1 	bcc.w	8012ab8 <Argus_Eval_Update+0x348>
 8012d36:	2900      	cmp	r1, #0
 8012d38:	f280 81d3 	bge.w	80130e2 <Argus_Eval_Update+0x972>
 8012d3c:	4605      	mov	r5, r0
 8012d3e:	2800      	cmp	r0, #0
 8012d40:	d0ec      	beq.n	8012d1c <Argus_Eval_Update+0x5ac>
 8012d42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012d46:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8012d4a:	e7d9      	b.n	8012d00 <Argus_Eval_Update+0x590>
 8012d4c:	4251      	negs	r1, r2
 8012d4e:	4281      	cmp	r1, r0
 8012d50:	f4ff ae8d 	bcc.w	8012a6e <Argus_Eval_Update+0x2fe>
 8012d54:	2900      	cmp	r1, #0
 8012d56:	f280 81f8 	bge.w	801314a <Argus_Eval_Update+0x9da>
 8012d5a:	4605      	mov	r5, r0
 8012d5c:	2800      	cmp	r0, #0
 8012d5e:	d094      	beq.n	8012c8a <Argus_Eval_Update+0x51a>
 8012d60:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8012d64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012d68:	e781      	b.n	8012c6e <Argus_Eval_Update+0x4fe>
 8012d6a:	4251      	negs	r1, r2
 8012d6c:	4281      	cmp	r1, r0
 8012d6e:	f4ff ae59 	bcc.w	8012a24 <Argus_Eval_Update+0x2b4>
 8012d72:	2900      	cmp	r1, #0
 8012d74:	f280 81df 	bge.w	8013136 <Argus_Eval_Update+0x9c6>
 8012d78:	4605      	mov	r5, r0
 8012d7a:	2800      	cmp	r0, #0
 8012d7c:	d09e      	beq.n	8012cbc <Argus_Eval_Update+0x54c>
 8012d7e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8012d82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012d86:	e78b      	b.n	8012ca0 <Argus_Eval_Update+0x530>
 8012d88:	425b      	negs	r3, r3
 8012d8a:	428b      	cmp	r3, r1
 8012d8c:	f4ff ae1b 	bcc.w	80129c6 <Argus_Eval_Update+0x256>
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	f280 81c4 	bge.w	801311e <Argus_Eval_Update+0x9ae>
 8012d96:	460c      	mov	r4, r1
 8012d98:	2900      	cmp	r1, #0
 8012d9a:	f43f af58 	beq.w	8012c4e <Argus_Eval_Update+0x4de>
 8012d9e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012da2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8012da6:	e744      	b.n	8012c32 <Argus_Eval_Update+0x4c2>
 8012da8:	4252      	negs	r2, r2
 8012daa:	428a      	cmp	r2, r1
 8012dac:	f4ff aea7 	bcc.w	8012afe <Argus_Eval_Update+0x38e>
 8012db0:	2a00      	cmp	r2, #0
 8012db2:	f280 8240 	bge.w	8013236 <Argus_Eval_Update+0xac6>
 8012db6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012dba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8012dbe:	2900      	cmp	r1, #0
 8012dc0:	d187      	bne.n	8012cd2 <Argus_Eval_Update+0x562>
 8012dc2:	ea94 0f05 	teq	r4, r5
 8012dc6:	4608      	mov	r0, r1
 8012dc8:	f57f aea9 	bpl.w	8012b1e <Argus_Eval_Update+0x3ae>
 8012dcc:	4240      	negs	r0, r0
 8012dce:	e6a6      	b.n	8012b1e <Argus_Eval_Update+0x3ae>
 8012dd0:	2900      	cmp	r1, #0
 8012dd2:	f02c 4500 	bic.w	r5, ip, #2147483648	@ 0x80000000
 8012dd6:	f2c0 8122 	blt.w	801301e <Argus_Eval_Update+0x8ae>
 8012dda:	4ab2      	ldr	r2, [pc, #712]	@ (80130a4 <Argus_Eval_Update+0x934>)
 8012ddc:	2500      	movs	r5, #0
 8012dde:	e000      	b.n	8012de2 <Argus_Eval_Update+0x672>
 8012de0:	b152      	cbz	r2, 8012df8 <Argus_Eval_Update+0x688>
 8012de2:	428a      	cmp	r2, r1
 8012de4:	bf24      	itt	cs
 8012de6:	1a52      	subcs	r2, r2, r1
 8012de8:	4325      	orrcs	r5, r4
 8012dea:	0864      	lsrs	r4, r4, #1
 8012dec:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8012df0:	d1f6      	bne.n	8012de0 <Argus_Eval_Update+0x670>
 8012df2:	428a      	cmp	r2, r1
 8012df4:	d300      	bcc.n	8012df8 <Argus_Eval_Update+0x688>
 8012df6:	3501      	adds	r5, #1
 8012df8:	f1be 0f00 	cmp.w	lr, #0
 8012dfc:	f2c0 816c 	blt.w	80130d8 <Argus_Eval_Update+0x968>
 8012e00:	2d00      	cmp	r5, #0
 8012e02:	f6ff ad7e 	blt.w	8012902 <Argus_Eval_Update+0x192>
 8012e06:	00ec      	lsls	r4, r5, #3
 8012e08:	f9b8 52a8 	ldrsh.w	r5, [r8, #680]	@ 0x2a8
 8012e0c:	f8c6 432c 	str.w	r4, [r6, #812]	@ 0x32c
 8012e10:	429c      	cmp	r4, r3
 8012e12:	ea4f 1585 	mov.w	r5, r5, lsl #6
 8012e16:	f000 8126 	beq.w	8013066 <Argus_Eval_Update+0x8f6>
 8012e1a:	2c00      	cmp	r4, #0
 8012e1c:	46a4      	mov	ip, r4
 8012e1e:	f43f ad8c 	beq.w	801293a <Argus_Eval_Update+0x1ca>
 8012e22:	f2c0 821b 	blt.w	801325c <Argus_Eval_Update+0xaec>
 8012e26:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 8012e2a:	f084 5c80 	eor.w	ip, r4, #268435456	@ 0x10000000
 8012e2e:	f4ff ad75 	bcc.w	801291c <Argus_Eval_Update+0x1ac>
 8012e32:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8012e36:	2000      	movs	r0, #0
 8012e38:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 8012e3c:	e000      	b.n	8012e40 <Argus_Eval_Update+0x6d0>
 8012e3e:	b151      	cbz	r1, 8012e56 <Argus_Eval_Update+0x6e6>
 8012e40:	42a1      	cmp	r1, r4
 8012e42:	bf24      	itt	cs
 8012e44:	1b09      	subcs	r1, r1, r4
 8012e46:	4310      	orrcs	r0, r2
 8012e48:	0852      	lsrs	r2, r2, #1
 8012e4a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012e4e:	d1f6      	bne.n	8012e3e <Argus_Eval_Update+0x6ce>
 8012e50:	42a1      	cmp	r1, r4
 8012e52:	bf28      	it	cs
 8012e54:	3001      	addcs	r0, #1
 8012e56:	f1bc 0f00 	cmp.w	ip, #0
 8012e5a:	f2c0 80ff 	blt.w	801305c <Argus_Eval_Update+0x8ec>
 8012e5e:	2800      	cmp	r0, #0
 8012e60:	f6ff ad6b 	blt.w	801293a <Argus_Eval_Update+0x1ca>
 8012e64:	469c      	mov	ip, r3
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	f43f ad81 	beq.w	801296e <Argus_Eval_Update+0x1fe>
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	f6bf ad6b 	bge.w	8012948 <Argus_Eval_Update+0x1d8>
 8012e72:	425b      	negs	r3, r3
 8012e74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012e78:	f4ff ad6a 	bcc.w	8012950 <Argus_Eval_Update+0x1e0>
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	f280 8199 	bge.w	80131b4 <Argus_Eval_Update+0xa44>
 8012e82:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012e86:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8012e8a:	2400      	movs	r4, #0
 8012e8c:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 8012e90:	e000      	b.n	8012e94 <Argus_Eval_Update+0x724>
 8012e92:	b151      	cbz	r1, 8012eaa <Argus_Eval_Update+0x73a>
 8012e94:	428b      	cmp	r3, r1
 8012e96:	bf9c      	itt	ls
 8012e98:	1ac9      	subls	r1, r1, r3
 8012e9a:	4314      	orrls	r4, r2
 8012e9c:	0852      	lsrs	r2, r2, #1
 8012e9e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012ea2:	d1f6      	bne.n	8012e92 <Argus_Eval_Update+0x722>
 8012ea4:	428b      	cmp	r3, r1
 8012ea6:	bf98      	it	ls
 8012ea8:	3401      	addls	r4, #1
 8012eaa:	f1bc 0f00 	cmp.w	ip, #0
 8012eae:	f2c0 80d7 	blt.w	8013060 <Argus_Eval_Update+0x8f0>
 8012eb2:	2c00      	cmp	r4, #0
 8012eb4:	bfb8      	it	lt
 8012eb6:	f06f 4400 	mvnlt.w	r4, #2147483648	@ 0x80000000
 8012eba:	e55a      	b.n	8012972 <Argus_Eval_Update+0x202>
 8012ebc:	2c00      	cmp	r4, #0
 8012ebe:	f022 4000 	bic.w	r0, r2, #2147483648	@ 0x80000000
 8012ec2:	f2c0 80b2 	blt.w	801302a <Argus_Eval_Update+0x8ba>
 8012ec6:	4a77      	ldr	r2, [pc, #476]	@ (80130a4 <Argus_Eval_Update+0x934>)
 8012ec8:	2000      	movs	r0, #0
 8012eca:	e000      	b.n	8012ece <Argus_Eval_Update+0x75e>
 8012ecc:	b152      	cbz	r2, 8012ee4 <Argus_Eval_Update+0x774>
 8012ece:	42a2      	cmp	r2, r4
 8012ed0:	bf24      	itt	cs
 8012ed2:	1b12      	subcs	r2, r2, r4
 8012ed4:	4318      	orrcs	r0, r3
 8012ed6:	085b      	lsrs	r3, r3, #1
 8012ed8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8012edc:	d1f6      	bne.n	8012ecc <Argus_Eval_Update+0x75c>
 8012ede:	42a2      	cmp	r2, r4
 8012ee0:	d300      	bcc.n	8012ee4 <Argus_Eval_Update+0x774>
 8012ee2:	3001      	adds	r0, #1
 8012ee4:	f1bc 0f00 	cmp.w	ip, #0
 8012ee8:	f2c0 80f8 	blt.w	80130dc <Argus_Eval_Update+0x96c>
 8012eec:	2800      	cmp	r0, #0
 8012eee:	f6ff ace1 	blt.w	80128b4 <Argus_Eval_Update+0x144>
 8012ef2:	00c3      	lsls	r3, r0, #3
 8012ef4:	f8c6 3328 	str.w	r3, [r6, #808]	@ 0x328
 8012ef8:	2d00      	cmp	r5, #0
 8012efa:	f47f ace4 	bne.w	80128c6 <Argus_Eval_Update+0x156>
 8012efe:	e500      	b.n	8012902 <Argus_Eval_Update+0x192>
 8012f00:	2900      	cmp	r1, #0
 8012f02:	da08      	bge.n	8012f16 <Argus_Eval_Update+0x7a6>
 8012f04:	4291      	cmp	r1, r2
 8012f06:	f000 813f 	beq.w	8013188 <Argus_Eval_Update+0xa18>
 8012f0a:	f030 4300 	bics.w	r3, r0, #2147483648	@ 0x80000000
 8012f0e:	f02e 4100 	bic.w	r1, lr, #2147483648	@ 0x80000000
 8012f12:	f000 8145 	beq.w	80131a0 <Argus_Eval_Update+0xa30>
 8012f16:	2000      	movs	r0, #0
 8012f18:	e000      	b.n	8012f1c <Argus_Eval_Update+0x7ac>
 8012f1a:	b152      	cbz	r2, 8012f32 <Argus_Eval_Update+0x7c2>
 8012f1c:	428a      	cmp	r2, r1
 8012f1e:	bf24      	itt	cs
 8012f20:	1a52      	subcs	r2, r2, r1
 8012f22:	4318      	orrcs	r0, r3
 8012f24:	085b      	lsrs	r3, r3, #1
 8012f26:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8012f2a:	d1f6      	bne.n	8012f1a <Argus_Eval_Update+0x7aa>
 8012f2c:	4291      	cmp	r1, r2
 8012f2e:	d800      	bhi.n	8012f32 <Argus_Eval_Update+0x7c2>
 8012f30:	3001      	adds	r0, #1
 8012f32:	ea95 0f09 	teq	r5, r9
 8012f36:	f100 80e9 	bmi.w	801310c <Argus_Eval_Update+0x99c>
 8012f3a:	2800      	cmp	r0, #0
 8012f3c:	db7d      	blt.n	801303a <Argus_Eval_Update+0x8ca>
 8012f3e:	0045      	lsls	r5, r0, #1
 8012f40:	4629      	mov	r1, r5
 8012f42:	f1bc 0f00 	cmp.w	ip, #0
 8012f46:	f47f ac9c 	bne.w	8012882 <Argus_Eval_Update+0x112>
 8012f4a:	e4b3      	b.n	80128b4 <Argus_Eval_Update+0x144>
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	da08      	bge.n	8012f62 <Argus_Eval_Update+0x7f2>
 8012f50:	4293      	cmp	r3, r2
 8012f52:	f000 8117 	beq.w	8013184 <Argus_Eval_Update+0xa14>
 8012f56:	f03c 4400 	bics.w	r4, ip, #2147483648	@ 0x80000000
 8012f5a:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8012f5e:	f000 811d 	beq.w	801319c <Argus_Eval_Update+0xa2c>
 8012f62:	f04f 0c00 	mov.w	ip, #0
 8012f66:	e000      	b.n	8012f6a <Argus_Eval_Update+0x7fa>
 8012f68:	b162      	cbz	r2, 8012f84 <Argus_Eval_Update+0x814>
 8012f6a:	4293      	cmp	r3, r2
 8012f6c:	bf9c      	itt	ls
 8012f6e:	1ad2      	subls	r2, r2, r3
 8012f70:	ea4c 0c04 	orrls.w	ip, ip, r4
 8012f74:	0864      	lsrs	r4, r4, #1
 8012f76:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8012f7a:	d1f5      	bne.n	8012f68 <Argus_Eval_Update+0x7f8>
 8012f7c:	4293      	cmp	r3, r2
 8012f7e:	d801      	bhi.n	8012f84 <Argus_Eval_Update+0x814>
 8012f80:	f10c 0c01 	add.w	ip, ip, #1
 8012f84:	ea9a 0f05 	teq	sl, r5
 8012f88:	f100 80a0 	bmi.w	80130cc <Argus_Eval_Update+0x95c>
 8012f8c:	f1bc 0f00 	cmp.w	ip, #0
 8012f90:	db5f      	blt.n	8013052 <Argus_Eval_Update+0x8e2>
 8012f92:	ea4f 044c 	mov.w	r4, ip, lsl #1
 8012f96:	46a4      	mov	ip, r4
 8012f98:	e452      	b.n	8012840 <Argus_Eval_Update+0xd0>
 8012f9a:	fba0 3101 	umull	r3, r1, r0, r1
 8012f9e:	0a9c      	lsrs	r4, r3, #10
 8012fa0:	fb00 1505 	mla	r5, r0, r5, r1
 8012fa4:	ea44 5485 	orr.w	r4, r4, r5, lsl #22
 8012fa8:	f3c3 2340 	ubfx	r3, r3, #9, #1
 8012fac:	4423      	add	r3, r4
 8012fae:	e602      	b.n	8012bb6 <Argus_Eval_Update+0x446>
 8012fb0:	fa10 f30e 	lsls.w	r3, r0, lr
 8012fb4:	d561      	bpl.n	801307a <Argus_Eval_Update+0x90a>
 8012fb6:	f06f 0307 	mvn.w	r3, #7
 8012fba:	f8c6 3328 	str.w	r3, [r6, #808]	@ 0x328
 8012fbe:	f9b8 52a8 	ldrsh.w	r5, [r8, #680]	@ 0x2a8
 8012fc2:	f06f 0307 	mvn.w	r3, #7
 8012fc6:	f8c6 332c 	str.w	r3, [r6, #812]	@ 0x32c
 8012fca:	01ad      	lsls	r5, r5, #6
 8012fcc:	4618      	mov	r0, r3
 8012fce:	e4ed      	b.n	80129ac <Argus_Eval_Update+0x23c>
 8012fd0:	f080 5480 	eor.w	r4, r0, #268435456	@ 0x10000000
 8012fd4:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8012fd8:	2300      	movs	r3, #0
 8012fda:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8012fde:	e000      	b.n	8012fe2 <Argus_Eval_Update+0x872>
 8012fe0:	b150      	cbz	r0, 8012ff8 <Argus_Eval_Update+0x888>
 8012fe2:	4282      	cmp	r2, r0
 8012fe4:	bf9c      	itt	ls
 8012fe6:	1a80      	subls	r0, r0, r2
 8012fe8:	430b      	orrls	r3, r1
 8012fea:	0849      	lsrs	r1, r1, #1
 8012fec:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8012ff0:	d1f6      	bne.n	8012fe0 <Argus_Eval_Update+0x870>
 8012ff2:	4282      	cmp	r2, r0
 8012ff4:	bf98      	it	ls
 8012ff6:	3301      	addls	r3, #1
 8012ff8:	2c00      	cmp	r4, #0
 8012ffa:	db33      	blt.n	8013064 <Argus_Eval_Update+0x8f4>
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	4618      	mov	r0, r3
 8013000:	f6ff acd1 	blt.w	80129a6 <Argus_Eval_Update+0x236>
 8013004:	2b00      	cmp	r3, #0
 8013006:	f47f acd1 	bne.w	80129ac <Argus_Eval_Update+0x23c>
 801300a:	43e9      	mvns	r1, r5
 801300c:	0fc9      	lsrs	r1, r1, #31
 801300e:	4249      	negs	r1, r1
 8013010:	b289      	uxth	r1, r1
 8013012:	e4e8      	b.n	80129e6 <Argus_Eval_Update+0x276>
 8013014:	2c00      	cmp	r4, #0
 8013016:	f340 80bf 	ble.w	8013198 <Argus_Eval_Update+0xa28>
 801301a:	b2a1      	uxth	r1, r4
 801301c:	e4e3      	b.n	80129e6 <Argus_Eval_Update+0x276>
 801301e:	2d00      	cmp	r5, #0
 8013020:	f43f aee9 	beq.w	8012df6 <Argus_Eval_Update+0x686>
 8013024:	4611      	mov	r1, r2
 8013026:	462c      	mov	r4, r5
 8013028:	e6d7      	b.n	8012dda <Argus_Eval_Update+0x66a>
 801302a:	2800      	cmp	r0, #0
 801302c:	f43f af59 	beq.w	8012ee2 <Argus_Eval_Update+0x772>
 8013030:	4674      	mov	r4, lr
 8013032:	4603      	mov	r3, r0
 8013034:	e747      	b.n	8012ec6 <Argus_Eval_Update+0x756>
 8013036:	4629      	mov	r1, r5
 8013038:	e5c9      	b.n	8012bce <Argus_Eval_Update+0x45e>
 801303a:	f1bc 0f00 	cmp.w	ip, #0
 801303e:	f47f ac1d 	bne.w	801287c <Argus_Eval_Update+0x10c>
 8013042:	f06f 0307 	mvn.w	r3, #7
 8013046:	f06f 0501 	mvn.w	r5, #1
 801304a:	f8c6 3328 	str.w	r3, [r6, #808]	@ 0x328
 801304e:	4629      	mov	r1, r5
 8013050:	e437      	b.n	80128c2 <Argus_Eval_Update+0x152>
 8013052:	f06f 0c01 	mvn.w	ip, #1
 8013056:	4664      	mov	r4, ip
 8013058:	f7ff bbf2 	b.w	8012840 <Argus_Eval_Update+0xd0>
 801305c:	4240      	negs	r0, r0
 801305e:	e701      	b.n	8012e64 <Argus_Eval_Update+0x6f4>
 8013060:	4264      	negs	r4, r4
 8013062:	e486      	b.n	8012972 <Argus_Eval_Update+0x202>
 8013064:	425b      	negs	r3, r3
 8013066:	4618      	mov	r0, r3
 8013068:	e7cc      	b.n	8013004 <Argus_Eval_Update+0x894>
 801306a:	4242      	negs	r2, r0
 801306c:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 8013070:	f080 80a3 	bcs.w	80131ba <Argus_Eval_Update+0xa4a>
 8013074:	f080 5480 	eor.w	r4, r0, #268435456	@ 0x10000000
 8013078:	e487      	b.n	801298a <Argus_Eval_Update+0x21a>
 801307a:	f06f 0307 	mvn.w	r3, #7
 801307e:	f8df e028 	ldr.w	lr, [pc, #40]	@ 80130a8 <Argus_Eval_Update+0x938>
 8013082:	f8c6 3328 	str.w	r3, [r6, #808]	@ 0x328
 8013086:	2102      	movs	r1, #2
 8013088:	e428      	b.n	80128dc <Argus_Eval_Update+0x16c>
 801308a:	f1cc 0300 	rsb	r3, ip, #0
 801308e:	fb83 3201 	smull	r3, r2, r3, r1
 8013092:	ea4f 2e93 	mov.w	lr, r3, lsr #10
 8013096:	ea4e 5e82 	orr.w	lr, lr, r2, lsl #22
 801309a:	f3c3 2240 	ubfx	r2, r3, #9, #1
 801309e:	4472      	add	r2, lr
 80130a0:	f7ff bb93 	b.w	80127ca <Argus_Eval_Update+0x5a>
 80130a4:	4779e128 	.word	0x4779e128
 80130a8:	b8861ed6 	.word	0xb8861ed6
 80130ac:	4a73      	ldr	r2, [pc, #460]	@ (801327c <Argus_Eval_Update+0xb0c>)
 80130ae:	f8df e1d4 	ldr.w	lr, [pc, #468]	@ 8013284 <Argus_Eval_Update+0xb14>
 80130b2:	4249      	negs	r1, r1
 80130b4:	4291      	cmp	r1, r2
 80130b6:	ea85 0e0e 	eor.w	lr, r5, lr
 80130ba:	f67f ac0f 	bls.w	80128dc <Argus_Eval_Update+0x16c>
 80130be:	2900      	cmp	r1, #0
 80130c0:	da67      	bge.n	8013192 <Argus_Eval_Update+0xa22>
 80130c2:	084a      	lsrs	r2, r1, #1
 80130c4:	f44f 4500 	mov.w	r5, #32768	@ 0x8000
 80130c8:	e7ac      	b.n	8013024 <Argus_Eval_Update+0x8b4>
 80130ca:	4694      	mov	ip, r2
 80130cc:	f1cc 0400 	rsb	r4, ip, #0
 80130d0:	0064      	lsls	r4, r4, #1
 80130d2:	46a4      	mov	ip, r4
 80130d4:	f7ff bbb4 	b.w	8012840 <Argus_Eval_Update+0xd0>
 80130d8:	426d      	negs	r5, r5
 80130da:	e694      	b.n	8012e06 <Argus_Eval_Update+0x696>
 80130dc:	4243      	negs	r3, r0
 80130de:	00db      	lsls	r3, r3, #3
 80130e0:	e708      	b.n	8012ef4 <Argus_Eval_Update+0x784>
 80130e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80130e6:	2800      	cmp	r0, #0
 80130e8:	f47f ae0a 	bne.w	8012d00 <Argus_Eval_Update+0x590>
 80130ec:	ea92 0f0c 	teq	r2, ip
 80130f0:	4605      	mov	r5, r0
 80130f2:	f57f acf2 	bpl.w	8012ada <Argus_Eval_Update+0x36a>
 80130f6:	426d      	negs	r5, r5
 80130f8:	e4ef      	b.n	8012ada <Argus_Eval_Update+0x36a>
 80130fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80130fe:	2a00      	cmp	r2, #0
 8013100:	f47f af09 	bne.w	8012f16 <Argus_Eval_Update+0x7a6>
 8013104:	ea95 0f09 	teq	r5, r9
 8013108:	d54c      	bpl.n	80131a4 <Argus_Eval_Update+0xa34>
 801310a:	4610      	mov	r0, r2
 801310c:	4241      	negs	r1, r0
 801310e:	0049      	lsls	r1, r1, #1
 8013110:	460d      	mov	r5, r1
 8013112:	f1bc 0f00 	cmp.w	ip, #0
 8013116:	f47f abb4 	bne.w	8012882 <Argus_Eval_Update+0x112>
 801311a:	f7ff bbcb 	b.w	80128b4 <Argus_Eval_Update+0x144>
 801311e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8013122:	2900      	cmp	r1, #0
 8013124:	f47f ad85 	bne.w	8012c32 <Argus_Eval_Update+0x4c2>
 8013128:	ea95 0f00 	teq	r5, r0
 801312c:	460c      	mov	r4, r1
 801312e:	f57f ad94 	bpl.w	8012c5a <Argus_Eval_Update+0x4ea>
 8013132:	4264      	negs	r4, r4
 8013134:	e591      	b.n	8012c5a <Argus_Eval_Update+0x4ea>
 8013136:	2800      	cmp	r0, #0
 8013138:	f47f adb2 	bne.w	8012ca0 <Argus_Eval_Update+0x530>
 801313c:	ea9c 0f02 	teq	ip, r2
 8013140:	4605      	mov	r5, r0
 8013142:	f57f ac80 	bpl.w	8012a46 <Argus_Eval_Update+0x2d6>
 8013146:	426d      	negs	r5, r5
 8013148:	e47d      	b.n	8012a46 <Argus_Eval_Update+0x2d6>
 801314a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801314e:	2800      	cmp	r0, #0
 8013150:	f47f ad8d 	bne.w	8012c6e <Argus_Eval_Update+0x4fe>
 8013154:	ea92 0f0c 	teq	r2, ip
 8013158:	4605      	mov	r5, r0
 801315a:	f57f ac99 	bpl.w	8012a90 <Argus_Eval_Update+0x320>
 801315e:	426d      	negs	r5, r5
 8013160:	e496      	b.n	8012a90 <Argus_Eval_Update+0x320>
 8013162:	b3a2      	cbz	r2, 80131ce <Argus_Eval_Update+0xa5e>
 8013164:	462b      	mov	r3, r5
 8013166:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 801316a:	e6fa      	b.n	8012f62 <Argus_Eval_Update+0x7f2>
 801316c:	4b43      	ldr	r3, [pc, #268]	@ (801327c <Argus_Eval_Update+0xb0c>)
 801316e:	4264      	negs	r4, r4
 8013170:	429c      	cmp	r4, r3
 8013172:	f67f ab8e 	bls.w	8012892 <Argus_Eval_Update+0x122>
 8013176:	2c00      	cmp	r4, #0
 8013178:	da08      	bge.n	801318c <Argus_Eval_Update+0xa1c>
 801317a:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 801317e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013182:	e6a0      	b.n	8012ec6 <Argus_Eval_Update+0x756>
 8013184:	46a4      	mov	ip, r4
 8013186:	e6fd      	b.n	8012f84 <Argus_Eval_Update+0x814>
 8013188:	4618      	mov	r0, r3
 801318a:	e6d2      	b.n	8012f32 <Argus_Eval_Update+0x7c2>
 801318c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8013190:	e699      	b.n	8012ec6 <Argus_Eval_Update+0x756>
 8013192:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8013196:	e620      	b.n	8012dda <Argus_Eval_Update+0x66a>
 8013198:	2100      	movs	r1, #0
 801319a:	e424      	b.n	80129e6 <Argus_Eval_Update+0x276>
 801319c:	46a4      	mov	ip, r4
 801319e:	e6ed      	b.n	8012f7c <Argus_Eval_Update+0x80c>
 80131a0:	4618      	mov	r0, r3
 80131a2:	e6c3      	b.n	8012f2c <Argus_Eval_Update+0x7bc>
 80131a4:	f1bc 0f00 	cmp.w	ip, #0
 80131a8:	f43f af05 	beq.w	8012fb6 <Argus_Eval_Update+0x846>
 80131ac:	2500      	movs	r5, #0
 80131ae:	4629      	mov	r1, r5
 80131b0:	f7ff bb67 	b.w	8012882 <Argus_Eval_Update+0x112>
 80131b4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80131b8:	e667      	b.n	8012e8a <Argus_Eval_Update+0x71a>
 80131ba:	2a00      	cmp	r2, #0
 80131bc:	f6bf af08 	bge.w	8012fd0 <Argus_Eval_Update+0x860>
 80131c0:	f080 5480 	eor.w	r4, r0, #268435456	@ 0x10000000
 80131c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80131c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80131cc:	e704      	b.n	8012fd8 <Argus_Eval_Update+0x868>
 80131ce:	ea9a 0f05 	teq	sl, r5
 80131d2:	f53f af7a 	bmi.w	80130ca <Argus_Eval_Update+0x95a>
 80131d6:	4614      	mov	r4, r2
 80131d8:	46a4      	mov	ip, r4
 80131da:	f7ff bb31 	b.w	8012840 <Argus_Eval_Update+0xd0>
 80131de:	f9b8 52a8 	ldrsh.w	r5, [r8, #680]	@ 0x2a8
 80131e2:	f8c6 432c 	str.w	r4, [r6, #812]	@ 0x32c
 80131e6:	01ad      	lsls	r5, r5, #6
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	f47f aba6 	bne.w	801293a <Argus_Eval_Update+0x1ca>
 80131ee:	e70c      	b.n	801300a <Argus_Eval_Update+0x89a>
 80131f0:	f8c6 3328 	str.w	r3, [r6, #808]	@ 0x328
 80131f4:	2d00      	cmp	r5, #0
 80131f6:	f47f ab66 	bne.w	80128c6 <Argus_Eval_Update+0x156>
 80131fa:	f9b8 52a8 	ldrsh.w	r5, [r8, #680]	@ 0x2a8
 80131fe:	f06f 0207 	mvn.w	r2, #7
 8013202:	f8c6 232c 	str.w	r2, [r6, #812]	@ 0x32c
 8013206:	01ad      	lsls	r5, r5, #6
 8013208:	f7ff bb85 	b.w	8012916 <Argus_Eval_Update+0x1a6>
 801320c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8013210:	4618      	mov	r0, r3
 8013212:	f7ff bbcb 	b.w	80129ac <Argus_Eval_Update+0x23c>
 8013216:	f1b0 4000 	subs.w	r0, r0, #2147483648	@ 0x80000000
 801321a:	f47f abaf 	bne.w	801297c <Argus_Eval_Update+0x20c>
 801321e:	f7ff bbc2 	b.w	80129a6 <Argus_Eval_Update+0x236>
 8013222:	469c      	mov	ip, r3
 8013224:	b11b      	cbz	r3, 801322e <Argus_Eval_Update+0xabe>
 8013226:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 801322a:	f7ff bb8a 	b.w	8012942 <Argus_Eval_Update+0x1d2>
 801322e:	4c14      	ldr	r4, [pc, #80]	@ (8013280 <Argus_Eval_Update+0xb10>)
 8013230:	2201      	movs	r2, #1
 8013232:	f7ff bbaa 	b.w	801298a <Argus_Eval_Update+0x21a>
 8013236:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801323a:	e5c0      	b.n	8012dbe <Argus_Eval_Update+0x64e>
 801323c:	fb03 f405 	mul.w	r4, r3, r5
 8013240:	17dd      	asrs	r5, r3, #31
 8013242:	fb01 4405 	mla	r4, r1, r5, r4
 8013246:	fba3 3101 	umull	r3, r1, r3, r1
 801324a:	4421      	add	r1, r4
 801324c:	0a9c      	lsrs	r4, r3, #10
 801324e:	ea44 5481 	orr.w	r4, r4, r1, lsl #22
 8013252:	f3c3 2340 	ubfx	r3, r3, #9, #1
 8013256:	4423      	add	r3, r4
 8013258:	f7ff bac8 	b.w	80127ec <Argus_Eval_Update+0x7c>
 801325c:	4264      	negs	r4, r4
 801325e:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 8013262:	f08c 5c80 	eor.w	ip, ip, #268435456	@ 0x10000000
 8013266:	f4ff ab59 	bcc.w	801291c <Argus_Eval_Update+0x1ac>
 801326a:	2c00      	cmp	r4, #0
 801326c:	f6bf ade1 	bge.w	8012e32 <Argus_Eval_Update+0x6c2>
 8013270:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 8013274:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8013278:	e5dd      	b.n	8012e36 <Argus_Eval_Update+0x6c6>
 801327a:	bf00      	nop
 801327c:	4779e127 	.word	0x4779e127
 8013280:	10000001 	.word	0x10000001
 8013284:	4779e128 	.word	0x4779e128

08013288 <Argus_Eval_ApplyAuxEvaluation>:
 8013288:	2a00      	cmp	r2, #0
 801328a:	d05c      	beq.n	8013346 <Argus_Eval_ApplyAuxEvaluation+0xbe>
 801328c:	b500      	push	{lr}
 801328e:	788b      	ldrb	r3, [r1, #2]
 8013290:	f891 c001 	ldrb.w	ip, [r1, #1]
 8013294:	f891 e003 	ldrb.w	lr, [r1, #3]
 8013298:	021b      	lsls	r3, r3, #8
 801329a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 801329e:	ea43 030e 	orr.w	r3, r3, lr
 80132a2:	f44f 3c00 	mov.w	ip, #131072	@ 0x20000
 80132a6:	fbbc f2f2 	udiv	r2, ip, r2
 80132aa:	3201      	adds	r2, #1
 80132ac:	1052      	asrs	r2, r2, #1
 80132ae:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80132b2:	fb02 f303 	mul.w	r3, r2, r3
 80132b6:	0b1b      	lsrs	r3, r3, #12
 80132b8:	8003      	strh	r3, [r0, #0]
 80132ba:	794b      	ldrb	r3, [r1, #5]
 80132bc:	f891 c004 	ldrb.w	ip, [r1, #4]
 80132c0:	021b      	lsls	r3, r3, #8
 80132c2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80132c6:	f891 c006 	ldrb.w	ip, [r1, #6]
 80132ca:	ea43 030c 	orr.w	r3, r3, ip
 80132ce:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80132d2:	fb02 f303 	mul.w	r3, r2, r3
 80132d6:	0b1b      	lsrs	r3, r3, #12
 80132d8:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80132dc:	8043      	strh	r3, [r0, #2]
 80132de:	7a0b      	ldrb	r3, [r1, #8]
 80132e0:	f891 c007 	ldrb.w	ip, [r1, #7]
 80132e4:	021b      	lsls	r3, r3, #8
 80132e6:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80132ea:	f891 c009 	ldrb.w	ip, [r1, #9]
 80132ee:	ea43 030c 	orr.w	r3, r3, ip
 80132f2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80132f6:	fb02 f303 	mul.w	r3, r2, r3
 80132fa:	0b1b      	lsrs	r3, r3, #12
 80132fc:	8083      	strh	r3, [r0, #4]
 80132fe:	7acb      	ldrb	r3, [r1, #11]
 8013300:	f891 c00a 	ldrb.w	ip, [r1, #10]
 8013304:	021b      	lsls	r3, r3, #8
 8013306:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 801330a:	f891 c00c 	ldrb.w	ip, [r1, #12]
 801330e:	ea43 030c 	orr.w	r3, r3, ip
 8013312:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013316:	fb02 f303 	mul.w	r3, r2, r3
 801331a:	0b1b      	lsrs	r3, r3, #12
 801331c:	80c3      	strh	r3, [r0, #6]
 801331e:	7b8b      	ldrb	r3, [r1, #14]
 8013320:	f891 c00d 	ldrb.w	ip, [r1, #13]
 8013324:	7bc9      	ldrb	r1, [r1, #15]
 8013326:	021b      	lsls	r3, r3, #8
 8013328:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 801332c:	430b      	orrs	r3, r1
 801332e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013332:	fb02 f303 	mul.w	r3, r2, r3
 8013336:	0b1b      	lsrs	r3, r3, #12
 8013338:	8103      	strh	r3, [r0, #8]
 801333a:	f04f 33ff 	mov.w	r3, #4294967295
 801333e:	f8c0 300a 	str.w	r3, [r0, #10]
 8013342:	f85d fb04 	ldr.w	pc, [sp], #4
 8013346:	f04f 33ff 	mov.w	r3, #4294967295
 801334a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801334e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8013352:	6043      	str	r3, [r0, #4]
 8013354:	8103      	strh	r3, [r0, #8]
 8013356:	f04f 33ff 	mov.w	r3, #4294967295
 801335a:	8001      	strh	r1, [r0, #0]
 801335c:	8042      	strh	r2, [r0, #2]
 801335e:	f8c0 300a 	str.w	r3, [r0, #10]
 8013362:	4770      	bx	lr

08013364 <Argus_Eval_Apply>:
 8013364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013368:	f8c2 31cc 	str.w	r3, [r2, #460]	@ 0x1cc
 801336c:	690b      	ldr	r3, [r1, #16]
 801336e:	4617      	mov	r7, r2
 8013370:	f3c3 3e81 	ubfx	lr, r3, #14, #2
 8013374:	f102 050c 	add.w	r5, r2, #12
 8013378:	0f9a      	lsrs	r2, r3, #30
 801337a:	ea4e 0282 	orr.w	r2, lr, r2, lsl #2
 801337e:	ea4f 2e13 	mov.w	lr, r3, lsr #8
 8013382:	f00e 0e30 	and.w	lr, lr, #48	@ 0x30
 8013386:	ea4e 0e02 	orr.w	lr, lr, r2
 801338a:	0d9a      	lsrs	r2, r3, #22
 801338c:	f002 02c0 	and.w	r2, r2, #192	@ 0xc0
 8013390:	ea42 0e0e 	orr.w	lr, r2, lr
 8013394:	089a      	lsrs	r2, r3, #2
 8013396:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 801339a:	ea42 020e 	orr.w	r2, r2, lr
 801339e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80133a2:	f40e 6e40 	and.w	lr, lr, #3072	@ 0xc00
 80133a6:	ea4e 0202 	orr.w	r2, lr, r2
 80133aa:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 80133ae:	f40e 5e40 	and.w	lr, lr, #12288	@ 0x3000
 80133b2:	ea4e 0e02 	orr.w	lr, lr, r2
 80133b6:	0a9a      	lsrs	r2, r3, #10
 80133b8:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 80133bc:	ea42 0e0e 	orr.w	lr, r2, lr
 80133c0:	029a      	lsls	r2, r3, #10
 80133c2:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
 80133c6:	ea42 020e 	orr.w	r2, r2, lr
 80133ca:	ea4f 1e13 	mov.w	lr, r3, lsr #4
 80133ce:	f40e 2e40 	and.w	lr, lr, #786432	@ 0xc0000
 80133d2:	ea4e 0202 	orr.w	r2, lr, r2
 80133d6:	ea4f 4e03 	mov.w	lr, r3, lsl #16
 80133da:	f40e 1e40 	and.w	lr, lr, #3145728	@ 0x300000
 80133de:	ea4e 0e02 	orr.w	lr, lr, r2
 80133e2:	009a      	lsls	r2, r3, #2
 80133e4:	f402 0240 	and.w	r2, r2, #12582912	@ 0xc00000
 80133e8:	ea42 0e0e 	orr.w	lr, r2, lr
 80133ec:	059a      	lsls	r2, r3, #22
 80133ee:	f002 7240 	and.w	r2, r2, #50331648	@ 0x3000000
 80133f2:	ea42 020e 	orr.w	r2, r2, lr
 80133f6:	ea4f 2e03 	mov.w	lr, r3, lsl #8
 80133fa:	f00e 6e40 	and.w	lr, lr, #201326592	@ 0xc000000
 80133fe:	ea4e 0202 	orr.w	r2, lr, r2
 8013402:	ea4f 7e03 	mov.w	lr, r3, lsl #28
 8013406:	f00e 5e40 	and.w	lr, lr, #805306368	@ 0x30000000
 801340a:	ea4e 0e02 	orr.w	lr, lr, r2
 801340e:	0c1b      	lsrs	r3, r3, #16
 8013410:	ea4e 7e83 	orr.w	lr, lr, r3, lsl #30
 8013414:	680b      	ldr	r3, [r1, #0]
 8013416:	f101 0c0c 	add.w	ip, r1, #12
 801341a:	4604      	mov	r4, r0
 801341c:	4688      	mov	r8, r1
 801341e:	f101 0904 	add.w	r9, r1, #4
 8013422:	ea03 7ae3 	and.w	sl, r3, r3, asr #31
 8013426:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801342a:	462e      	mov	r6, r5
 801342c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801342e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8013432:	69bb      	ldr	r3, [r7, #24]
 8013434:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8013438:	f413 6200 	ands.w	r2, r3, #2048	@ 0x800
 801343c:	e899 0003 	ldmia.w	r9, {r0, r1}
 8013440:	bf18      	it	ne
 8013442:	f8d4 3354 	ldrne.w	r3, [r4, #852]	@ 0x354
 8013446:	f107 0b04 	add.w	fp, r7, #4
 801344a:	e88b 0003 	stmia.w	fp, {r0, r1}
 801344e:	bf18      	it	ne
 8013450:	f8b3 20a0 	ldrhne.w	r2, [r3, #160]	@ 0xa0
 8013454:	f8c7 e010 	str.w	lr, [r7, #16]
 8013458:	b08f      	sub	sp, #60	@ 0x3c
 801345a:	f507 70de 	add.w	r0, r7, #444	@ 0x1bc
 801345e:	f208 11b5 	addw	r1, r8, #437	@ 0x1b5
 8013462:	f8c7 a000 	str.w	sl, [r7]
 8013466:	f7ff ff0f 	bl	8013288 <Argus_Eval_ApplyAuxEvaluation>
 801346a:	4601      	mov	r1, r0
 801346c:	69ba      	ldr	r2, [r7, #24]
 801346e:	f8d4 036c 	ldr.w	r0, [r4, #876]	@ 0x36c
 8013472:	f00b f9a7 	bl	801e7c4 <Argus_Cal_ApplyAuxCalibration>
 8013476:	f8d4 036c 	ldr.w	r0, [r4, #876]	@ 0x36c
 801347a:	f00b f955 	bl	801e728 <Argus_Cal_ApplyTempCalibration>
 801347e:	69b9      	ldr	r1, [r7, #24]
 8013480:	f411 6180 	ands.w	r1, r1, #1024	@ 0x400
 8013484:	d14a      	bne.n	801351c <Argus_Eval_Apply+0x1b8>
 8013486:	f8d7 01cc 	ldr.w	r0, [r7, #460]	@ 0x1cc
 801348a:	b120      	cbz	r0, 8013496 <Argus_Eval_Apply+0x132>
 801348c:	f44f 7204 	mov.w	r2, #528	@ 0x210
 8013490:	3004      	adds	r0, #4
 8013492:	f010 f9a6 	bl	80237e2 <memset>
 8013496:	f8d4 0368 	ldr.w	r0, [r4, #872]	@ 0x368
 801349a:	4639      	mov	r1, r7
 801349c:	f003 fafc 	bl	8016a98 <Argus_Dca_Evaluate>
 80134a0:	6838      	ldr	r0, [r7, #0]
 80134a2:	1d81      	adds	r1, r0, #6
 80134a4:	d019      	beq.n	80134da <Argus_Eval_Apply+0x176>
 80134a6:	f110 0f6b 	cmn.w	r0, #107	@ 0x6b
 80134aa:	d016      	beq.n	80134da <Argus_Eval_Apply+0x176>
 80134ac:	f100 0372 	add.w	r3, r0, #114	@ 0x72
 80134b0:	2b01      	cmp	r3, #1
 80134b2:	d912      	bls.n	80134da <Argus_Eval_Apply+0x176>
 80134b4:	2800      	cmp	r0, #0
 80134b6:	db05      	blt.n	80134c4 <Argus_Eval_Apply+0x160>
 80134b8:	d02b      	beq.n	8013512 <Argus_Eval_Apply+0x1ae>
 80134ba:	2332      	movs	r3, #50	@ 0x32
 80134bc:	286c      	cmp	r0, #108	@ 0x6c
 80134be:	f887 31ba 	strb.w	r3, [r7, #442]	@ 0x1ba
 80134c2:	d102      	bne.n	80134ca <Argus_Eval_Apply+0x166>
 80134c4:	2301      	movs	r3, #1
 80134c6:	f887 31ba 	strb.w	r3, [r7, #442]	@ 0x1ba
 80134ca:	69ba      	ldr	r2, [r7, #24]
 80134cc:	06d2      	lsls	r2, r2, #27
 80134ce:	d501      	bpl.n	80134d4 <Argus_Eval_Apply+0x170>
 80134d0:	f887 31ba 	strb.w	r3, [r7, #442]	@ 0x1ba
 80134d4:	b00f      	add	sp, #60	@ 0x3c
 80134d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80134de:	f507 71da 	add.w	r1, r7, #436	@ 0x1b4
 80134e2:	7a1a      	ldrb	r2, [r3, #8]
 80134e4:	330c      	adds	r3, #12
 80134e6:	f062 021b 	orn	r2, r2, #27
 80134ea:	428b      	cmp	r3, r1
 80134ec:	f803 2c04 	strb.w	r2, [r3, #-4]
 80134f0:	d1f7      	bne.n	80134e2 <Argus_Eval_Apply+0x17e>
 80134f2:	f504 71c6 	add.w	r1, r4, #396	@ 0x18c
 80134f6:	7a22      	ldrb	r2, [r4, #8]
 80134f8:	f894 319c 	ldrb.w	r3, [r4, #412]	@ 0x19c
 80134fc:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8013500:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8013504:	7222      	strb	r2, [r4, #8]
 8013506:	f884 319c 	strb.w	r3, [r4, #412]	@ 0x19c
 801350a:	340c      	adds	r4, #12
 801350c:	428c      	cmp	r4, r1
 801350e:	d1f2      	bne.n	80134f6 <Argus_Eval_Apply+0x192>
 8013510:	e7d0      	b.n	80134b4 <Argus_Eval_Apply+0x150>
 8013512:	2364      	movs	r3, #100	@ 0x64
 8013514:	f887 31ba 	strb.w	r3, [r7, #442]	@ 0x1ba
 8013518:	2332      	movs	r3, #50	@ 0x32
 801351a:	e7d6      	b.n	80134ca <Argus_Eval_Apply+0x166>
 801351c:	4642      	mov	r2, r8
 801351e:	4639      	mov	r1, r7
 8013520:	4620      	mov	r0, r4
 8013522:	f7fe fa31 	bl	8011988 <ApplyPhaseEvaluation>
 8013526:	f8d4 c354 	ldr.w	ip, [r4, #852]	@ 0x354
 801352a:	f89c 30d4 	ldrb.w	r3, [ip, #212]	@ 0xd4
 801352e:	2b02      	cmp	r3, #2
 8013530:	f000 81f0 	beq.w	8013914 <Argus_Eval_Apply+0x5b0>
 8013534:	2300      	movs	r3, #0
 8013536:	f8c4 3330 	str.w	r3, [r4, #816]	@ 0x330
 801353a:	69bb      	ldr	r3, [r7, #24]
 801353c:	f8b7 801c 	ldrh.w	r8, [r7, #28]
 8013540:	f003 0202 	and.w	r2, r3, #2
 8013544:	9201      	str	r2, [sp, #4]
 8013546:	f107 0a28 	add.w	sl, r7, #40	@ 0x28
 801354a:	f8b4 2190 	ldrh.w	r2, [r4, #400]	@ 0x190
 801354e:	f8a4 2324 	strh.w	r2, [r4, #804]	@ 0x324
 8013552:	f8d4 218c 	ldr.w	r2, [r4, #396]	@ 0x18c
 8013556:	f8c4 318c 	str.w	r3, [r4, #396]	@ 0x18c
 801355a:	f013 0304 	ands.w	r3, r3, #4
 801355e:	f8a4 8190 	strh.w	r8, [r4, #400]	@ 0x190
 8013562:	f8c4 2320 	str.w	r2, [r4, #800]	@ 0x320
 8013566:	930c      	str	r3, [sp, #48]	@ 0x30
 8013568:	f040 8156 	bne.w	8013818 <Argus_Eval_Apply+0x4b4>
 801356c:	9b01      	ldr	r3, [sp, #4]
 801356e:	f8d4 2328 	ldr.w	r2, [r4, #808]	@ 0x328
 8013572:	2b00      	cmp	r3, #0
 8013574:	f000 81c6 	beq.w	8013904 <Argus_Eval_Apply+0x5a0>
 8013578:	f8d4 332c 	ldr.w	r3, [r4, #812]	@ 0x32c
 801357c:	4610      	mov	r0, r2
 801357e:	461e      	mov	r6, r3
 8013580:	1b81      	subs	r1, r0, r6
 8013582:	469e      	mov	lr, r3
 8013584:	4688      	mov	r8, r1
 8013586:	2900      	cmp	r1, #0
 8013588:	f000 81ee 	beq.w	8013968 <Argus_Eval_Apply+0x604>
 801358c:	2b00      	cmp	r3, #0
 801358e:	bfb8      	it	lt
 8013590:	425b      	neglt	r3, r3
 8013592:	2900      	cmp	r1, #0
 8013594:	f2c0 82c1 	blt.w	8013b1a <Argus_Eval_Apply+0x7b6>
 8013598:	4299      	cmp	r1, r3
 801359a:	f080 838d 	bcs.w	8013cb8 <Argus_Eval_Apply+0x954>
 801359e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80135a2:	0049      	lsls	r1, r1, #1
 80135a4:	4299      	cmp	r1, r3
 80135a6:	ea4f 0040 	mov.w	r0, r0, lsl #1
 80135aa:	d3fa      	bcc.n	80135a2 <Argus_Eval_Apply+0x23e>
 80135ac:	2800      	cmp	r0, #0
 80135ae:	f040 82bb 	bne.w	8013b28 <Argus_Eval_Apply+0x7c4>
 80135b2:	ea9e 0f08 	teq	lr, r8
 80135b6:	4bc8      	ldr	r3, [pc, #800]	@ (80138d8 <Argus_Eval_Apply+0x574>)
 80135b8:	bf58      	it	pl
 80135ba:	f44f 0300 	movpl.w	r3, #8388608	@ 0x800000
 80135be:	9301      	str	r3, [sp, #4]
 80135c0:	f89c 30a9 	ldrb.w	r3, [ip, #169]	@ 0xa9
 80135c4:	f89c 10aa 	ldrb.w	r1, [ip, #170]	@ 0xaa
 80135c8:	f89c 00ac 	ldrb.w	r0, [ip, #172]	@ 0xac
 80135cc:	019b      	lsls	r3, r3, #6
 80135ce:	9308      	str	r3, [sp, #32]
 80135d0:	f89c 30ad 	ldrb.w	r3, [ip, #173]	@ 0xad
 80135d4:	03db      	lsls	r3, r3, #15
 80135d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80135d8:	0a13      	lsrs	r3, r2, #8
 80135da:	fb01 f303 	mul.w	r3, r1, r3
 80135de:	03c0      	lsls	r0, r0, #15
 80135e0:	9305      	str	r3, [sp, #20]
 80135e2:	f8b4 3350 	ldrh.w	r3, [r4, #848]	@ 0x350
 80135e6:	900a      	str	r0, [sp, #40]	@ 0x28
 80135e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80135ea:	4629      	mov	r1, r5
 80135ec:	f8d4 036c 	ldr.w	r0, [r4, #876]	@ 0x36c
 80135f0:	f00a ff4a 	bl	801e488 <Argus_Cal_ApplyFrequencyTemperatureCompensation>
 80135f4:	f8b7 21c0 	ldrh.w	r2, [r7, #448]	@ 0x1c0
 80135f8:	69b9      	ldr	r1, [r7, #24]
 80135fa:	4605      	mov	r5, r0
 80135fc:	f8d4 036c 	ldr.w	r0, [r4, #876]	@ 0x36c
 8013600:	f00a ffee 	bl	801e5e0 <Argus_Cal_GetGlobalRangeOffset>
 8013604:	69ba      	ldr	r2, [r7, #24]
 8013606:	970d      	str	r7, [sp, #52]	@ 0x34
 8013608:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 801360c:	f002 0208 	and.w	r2, r2, #8
 8013610:	9204      	str	r2, [sp, #16]
 8013612:	ea4f 32d5 	mov.w	r2, r5, lsr #15
 8013616:	9202      	str	r2, [sp, #8]
 8013618:	bf0c      	ite	eq
 801361a:	2228      	moveq	r2, #40	@ 0x28
 801361c:	222a      	movne	r2, #42	@ 0x2a
 801361e:	9207      	str	r2, [sp, #28]
 8013620:	006a      	lsls	r2, r5, #1
 8013622:	9206      	str	r2, [sp, #24]
 8013624:	f3c5 020e 	ubfx	r2, r5, #0, #15
 8013628:	f10a 030c 	add.w	r3, sl, #12
 801362c:	f04f 0e00 	mov.w	lr, #0
 8013630:	9203      	str	r2, [sp, #12]
 8013632:	f104 0c0c 	add.w	ip, r4, #12
 8013636:	4682      	mov	sl, r0
 8013638:	46a3      	mov	fp, r4
 801363a:	e020      	b.n	801367e <Argus_Eval_Apply+0x31a>
 801363c:	f042 0220 	orr.w	r2, r2, #32
 8013640:	f803 2c04 	strb.w	r2, [r3, #-4]
 8013644:	f81c 2c04 	ldrb.w	r2, [ip, #-4]
 8013648:	f042 0220 	orr.w	r2, r2, #32
 801364c:	f80c 2c04 	strb.w	r2, [ip, #-4]
 8013650:	f89c 2190 	ldrb.w	r2, [ip, #400]	@ 0x190
 8013654:	f012 0f20 	tst.w	r2, #32
 8013658:	9a04      	ldr	r2, [sp, #16]
 801365a:	f000 8118 	beq.w	801388e <Argus_Eval_Apply+0x52a>
 801365e:	2a00      	cmp	r2, #0
 8013660:	bf08      	it	eq
 8013662:	f06f 4500 	mvneq.w	r5, #2147483648	@ 0x80000000
 8013666:	f843 5c0c 	str.w	r5, [r3, #-12]
 801366a:	f10e 0e01 	add.w	lr, lr, #1
 801366e:	f1be 0f21 	cmp.w	lr, #33	@ 0x21
 8013672:	f103 030c 	add.w	r3, r3, #12
 8013676:	f10c 0c0c 	add.w	ip, ip, #12
 801367a:	f000 8116 	beq.w	80138aa <Argus_Eval_Apply+0x546>
 801367e:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8013682:	07d4      	lsls	r4, r2, #31
 8013684:	f100 80e3 	bmi.w	801384e <Argus_Eval_Apply+0x4ea>
 8013688:	f833 1c08 	ldrh.w	r1, [r3, #-8]
 801368c:	9803      	ldr	r0, [sp, #12]
 801368e:	9c02      	ldr	r4, [sp, #8]
 8013690:	fb01 f000 	mul.w	r0, r1, r0
 8013694:	0bc5      	lsrs	r5, r0, #15
 8013696:	fb01 5504 	mla	r5, r1, r4, r5
 801369a:	f3c0 3080 	ubfx	r0, r0, #14, #1
 801369e:	4405      	add	r5, r0
 80136a0:	9801      	ldr	r0, [sp, #4]
 80136a2:	eba5 050a 	sub.w	r5, r5, sl
 80136a6:	2800      	cmp	r0, #0
 80136a8:	f000 80c0 	beq.w	801382c <Argus_Eval_Apply+0x4c8>
 80136ac:	f1be 0f20 	cmp.w	lr, #32
 80136b0:	f000 80f9 	beq.w	80138a6 <Argus_Eval_Apply+0x542>
 80136b4:	f91c 0c03 	ldrsb.w	r0, [ip, #-3]
 80136b8:	f803 0c03 	strb.w	r0, [r3, #-3]
 80136bc:	f81c 4c04 	ldrb.w	r4, [ip, #-4]
 80136c0:	4314      	orrs	r4, r2
 80136c2:	f014 0f2a 	tst.w	r4, #42	@ 0x2a
 80136c6:	f040 80d9 	bne.w	801387c <Argus_Eval_Apply+0x518>
 80136ca:	f89c 6190 	ldrb.w	r6, [ip, #400]	@ 0x190
 80136ce:	9c07      	ldr	r4, [sp, #28]
 80136d0:	4034      	ands	r4, r6
 80136d2:	f040 80d3 	bne.w	801387c <Argus_Eval_Apply+0x518>
 80136d6:	f016 0f2a 	tst.w	r6, #42	@ 0x2a
 80136da:	f000 80c2 	beq.w	8013862 <Argus_Eval_Apply+0x4fe>
 80136de:	9e08      	ldr	r6, [sp, #32]
 80136e0:	2e00      	cmp	r6, #0
 80136e2:	f040 80fb 	bne.w	80138dc <Argus_Eval_Apply+0x578>
 80136e6:	4634      	mov	r4, r6
 80136e8:	f83c 6c08 	ldrh.w	r6, [ip, #-8]
 80136ec:	4434      	add	r4, r6
 80136ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80136f0:	b2a4      	uxth	r4, r4
 80136f2:	2e00      	cmp	r6, #0
 80136f4:	f000 80fc 	beq.w	80138f0 <Argus_Eval_Apply+0x58c>
 80136f8:	1b0c      	subs	r4, r1, r4
 80136fa:	b2a4      	uxth	r4, r4
 80136fc:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80136fe:	4434      	add	r4, r6
 8013700:	b2a4      	uxth	r4, r4
 8013702:	1ba4      	subs	r4, r4, r6
 8013704:	9e01      	ldr	r6, [sp, #4]
 8013706:	fb06 f404 	mul.w	r4, r6, r4
 801370a:	ebb4 2101 	subs.w	r1, r4, r1, lsl #8
 801370e:	f100 80f2 	bmi.w	80138f6 <Argus_Eval_Apply+0x592>
 8013712:	f3c1 54c0 	ubfx	r4, r1, #23, #1
 8013716:	eb04 6411 	add.w	r4, r4, r1, lsr #24
 801371a:	9f01      	ldr	r7, [sp, #4]
 801371c:	b264      	sxtb	r4, r4
 801371e:	1c66      	adds	r6, r4, #1
 8013720:	ebb7 2f06 	cmp.w	r7, r6, lsl #8
 8013724:	e9dd 760a 	ldrd	r7, r6, [sp, #40]	@ 0x28
 8013728:	bf88      	it	hi
 801372a:	463e      	movhi	r6, r7
 801372c:	4627      	mov	r7, r4
 801372e:	b13e      	cbz	r6, 8013740 <Argus_Eval_Apply+0x3dc>
 8013730:	eba1 6104 	sub.w	r1, r1, r4, lsl #24
 8013734:	2900      	cmp	r1, #0
 8013736:	bfb8      	it	lt
 8013738:	4249      	neglt	r1, r1
 801373a:	428e      	cmp	r6, r1
 801373c:	f0c0 809e 	bcc.w	801387c <Argus_Eval_Apply+0x518>
 8013740:	f803 7c03 	strb.w	r7, [r3, #-3]
 8013744:	9906      	ldr	r1, [sp, #24]
 8013746:	fb04 5401 	mla	r4, r4, r1, r5
 801374a:	f012 0f6a 	tst.w	r2, #106	@ 0x6a
 801374e:	f040 8086 	bne.w	801385e <Argus_Eval_Apply+0x4fa>
 8013752:	9905      	ldr	r1, [sp, #20]
 8013754:	2900      	cmp	r1, #0
 8013756:	f000 8082 	beq.w	801385e <Argus_Eval_Apply+0x4fa>
 801375a:	f89c 1190 	ldrb.w	r1, [ip, #400]	@ 0x190
 801375e:	f85c 5c0c 	ldr.w	r5, [ip, #-12]
 8013762:	9805      	ldr	r0, [sp, #20]
 8013764:	f011 0f2a 	tst.w	r1, #42	@ 0x2a
 8013768:	bf03      	ittte	eq
 801376a:	f8dc 1188 	ldreq.w	r1, [ip, #392]	@ 0x188
 801376e:	1909      	addeq	r1, r1, r4
 8013770:	1049      	asreq	r1, r1, #1
 8013772:	4621      	movne	r1, r4
 8013774:	1a6d      	subs	r5, r5, r1
 8013776:	ea85 71e5 	eor.w	r1, r5, r5, asr #31
 801377a:	eba1 71e5 	sub.w	r1, r1, r5, asr #31
 801377e:	4281      	cmp	r1, r0
 8013780:	bf83      	ittte	hi
 8013782:	f042 0240 	orrhi.w	r2, r2, #64	@ 0x40
 8013786:	f803 2c04 	strbhi.w	r2, [r3, #-4]
 801378a:	4625      	movhi	r5, r4
 801378c:	eb04 0565 	addls.w	r5, r4, r5, asr #1
 8013790:	f833 2c06 	ldrh.w	r2, [r3, #-6]
 8013794:	f83c 0c06 	ldrh.w	r0, [ip, #-6]
 8013798:	f8db 8354 	ldr.w	r8, [fp, #852]	@ 0x354
 801379c:	4282      	cmp	r2, r0
 801379e:	f898 10ab 	ldrb.w	r1, [r8, #171]	@ 0xab
 80137a2:	eba2 0900 	sub.w	r9, r2, r0
 80137a6:	bf38      	it	cc
 80137a8:	4602      	movcc	r2, r0
 80137aa:	fb01 f202 	mul.w	r2, r1, r2
 80137ae:	ea89 71e9 	eor.w	r1, r9, r9, asr #31
 80137b2:	eba1 71e9 	sub.w	r1, r1, r9, asr #31
 80137b6:	f1ac 060c 	sub.w	r6, ip, #12
 80137ba:	ebb1 2f12 	cmp.w	r1, r2, lsr #8
 80137be:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80137c2:	f50c 77c4 	add.w	r7, ip, #392	@ 0x188
 80137c6:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 80137ca:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80137ce:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80137d2:	f833 2c06 	ldrh.w	r2, [r3, #-6]
 80137d6:	f84c 4c0c 	str.w	r4, [ip, #-12]
 80137da:	bf94      	ite	ls
 80137dc:	f3c9 094f 	ubfxls	r9, r9, #1, #16
 80137e0:	f04f 0900 	movhi.w	r9, #0
 80137e4:	eba2 0909 	sub.w	r9, r2, r9
 80137e8:	fa1f f989 	uxth.w	r9, r9
 80137ec:	f823 9c06 	strh.w	r9, [r3, #-6]
 80137f0:	f8b8 200e 	ldrh.w	r2, [r8, #14]
 80137f4:	454a      	cmp	r2, r9
 80137f6:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80137fa:	f63f af1f 	bhi.w	801363c <Argus_Eval_Apply+0x2d8>
 80137fe:	0650      	lsls	r0, r2, #25
 8013800:	d542      	bpl.n	8013888 <Argus_Eval_Apply+0x524>
 8013802:	9904      	ldr	r1, [sp, #16]
 8013804:	b909      	cbnz	r1, 801380a <Argus_Eval_Apply+0x4a6>
 8013806:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 801380a:	f843 5c0c 	str.w	r5, [r3, #-12]
 801380e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8013812:	f803 2c04 	strb.w	r2, [r3, #-4]
 8013816:	e728      	b.n	801366a <Argus_Eval_Apply+0x306>
 8013818:	9b01      	ldr	r3, [sp, #4]
 801381a:	f8d4 232c 	ldr.w	r2, [r4, #812]	@ 0x32c
 801381e:	2b00      	cmp	r3, #0
 8013820:	d070      	beq.n	8013904 <Argus_Eval_Apply+0x5a0>
 8013822:	f8d4 3328 	ldr.w	r3, [r4, #808]	@ 0x328
 8013826:	4616      	mov	r6, r2
 8013828:	4618      	mov	r0, r3
 801382a:	e6a9      	b.n	8013580 <Argus_Eval_Apply+0x21c>
 801382c:	f1ac 040c 	sub.w	r4, ip, #12
 8013830:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8013834:	f50c 76c4 	add.w	r6, ip, #392	@ 0x188
 8013838:	f8db 8354 	ldr.w	r8, [fp, #852]	@ 0x354
 801383c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8013840:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8013844:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013848:	f833 9c06 	ldrh.w	r9, [r3, #-6]
 801384c:	e7d0      	b.n	80137f0 <Argus_Eval_Apply+0x48c>
 801384e:	f04f 0200 	mov.w	r2, #0
 8013852:	f823 2c08 	strh.w	r2, [r3, #-8]
 8013856:	2200      	movs	r2, #0
 8013858:	f843 2c0c 	str.w	r2, [r3, #-12]
 801385c:	e705      	b.n	801366a <Argus_Eval_Apply+0x306>
 801385e:	4625      	mov	r5, r4
 8013860:	e796      	b.n	8013790 <Argus_Eval_Apply+0x42c>
 8013862:	f8bc 418c 	ldrh.w	r4, [ip, #396]	@ 0x18c
 8013866:	9e08      	ldr	r6, [sp, #32]
 8013868:	1b0c      	subs	r4, r1, r4
 801386a:	b224      	sxth	r4, r4
 801386c:	b3b6      	cbz	r6, 80138dc <Argus_Eval_Apply+0x578>
 801386e:	4637      	mov	r7, r6
 8013870:	ea84 76e4 	eor.w	r6, r4, r4, asr #31
 8013874:	eba6 76e4 	sub.w	r6, r6, r4, asr #31
 8013878:	42b7      	cmp	r7, r6
 801387a:	d22f      	bcs.n	80138dc <Argus_Eval_Apply+0x578>
 801387c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013880:	f803 2c04 	strb.w	r2, [r3, #-4]
 8013884:	4604      	mov	r4, r0
 8013886:	e75d      	b.n	8013744 <Argus_Eval_Apply+0x3e0>
 8013888:	f843 5c0c 	str.w	r5, [r3, #-12]
 801388c:	e6ed      	b.n	801366a <Argus_Eval_Apply+0x306>
 801388e:	b90a      	cbnz	r2, 8013894 <Argus_Eval_Apply+0x530>
 8013890:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8013894:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8013898:	f843 5c0c 	str.w	r5, [r3, #-12]
 801389c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80138a0:	f803 2c04 	strb.w	r2, [r3, #-4]
 80138a4:	e6e1      	b.n	801366a <Argus_Eval_Apply+0x306>
 80138a6:	462c      	mov	r4, r5
 80138a8:	e74f      	b.n	801374a <Argus_Eval_Apply+0x3e6>
 80138aa:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80138ac:	f8db 036c 	ldr.w	r0, [fp, #876]	@ 0x36c
 80138b0:	4639      	mov	r1, r7
 80138b2:	f50b 7556 	add.w	r5, fp, #856	@ 0x358
 80138b6:	f00a feff 	bl	801e6b8 <Argus_Cal_ApplyPixelOffsetCompensation>
 80138ba:	4628      	mov	r0, r5
 80138bc:	4639      	mov	r1, r7
 80138be:	f001 f929 	bl	8014b14 <Argus_Pba_ApplyPreFilter>
 80138c2:	f8db 0368 	ldr.w	r0, [fp, #872]	@ 0x368
 80138c6:	4639      	mov	r1, r7
 80138c8:	f003 f8e6 	bl	8016a98 <Argus_Dca_Evaluate>
 80138cc:	4639      	mov	r1, r7
 80138ce:	4628      	mov	r0, r5
 80138d0:	465c      	mov	r4, fp
 80138d2:	f000 fb0f 	bl	8013ef4 <Argus_Pba_Apply>
 80138d6:	e5e3      	b.n	80134a0 <Argus_Eval_Apply+0x13c>
 80138d8:	ff800000 	.word	0xff800000
 80138dc:	f83c 6c08 	ldrh.w	r6, [ip, #-8]
 80138e0:	f3c4 044f 	ubfx	r4, r4, #1, #16
 80138e4:	4434      	add	r4, r6
 80138e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80138e8:	b2a4      	uxth	r4, r4
 80138ea:	2e00      	cmp	r6, #0
 80138ec:	f47f af04 	bne.w	80136f8 <Argus_Eval_Apply+0x394>
 80138f0:	1a64      	subs	r4, r4, r1
 80138f2:	b2a4      	uxth	r4, r4
 80138f4:	e702      	b.n	80136fc <Argus_Eval_Apply+0x398>
 80138f6:	424e      	negs	r6, r1
 80138f8:	f3c6 54c0 	ubfx	r4, r6, #23, #1
 80138fc:	eb04 6416 	add.w	r4, r4, r6, lsr #24
 8013900:	4264      	negs	r4, r4
 8013902:	e70a      	b.n	801371a <Argus_Eval_Apply+0x3b6>
 8013904:	2300      	movs	r3, #0
 8013906:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801390a:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 801390e:	9305      	str	r3, [sp, #20]
 8013910:	9301      	str	r3, [sp, #4]
 8013912:	e66a      	b.n	80135ea <Argus_Eval_Apply+0x286>
 8013914:	69bb      	ldr	r3, [r7, #24]
 8013916:	f8b7 801c 	ldrh.w	r8, [r7, #28]
 801391a:	f44f 72ca 	mov.w	r2, #404	@ 0x194
 801391e:	f3c3 0140 	ubfx	r1, r3, #1, #1
 8013922:	fb02 4101 	mla	r1, r2, r1, r4
 8013926:	f242 0003 	movw	r0, #8195	@ 0x2003
 801392a:	f8d1 218c 	ldr.w	r2, [r1, #396]	@ 0x18c
 801392e:	405a      	eors	r2, r3
 8013930:	f003 0602 	and.w	r6, r3, #2
 8013934:	4002      	ands	r2, r0
 8013936:	9601      	str	r6, [sp, #4]
 8013938:	d103      	bne.n	8013942 <Argus_Eval_Apply+0x5de>
 801393a:	f8b1 e190 	ldrh.w	lr, [r1, #400]	@ 0x190
 801393e:	45f0      	cmp	r8, lr
 8013940:	d01e      	beq.n	8013980 <Argus_Eval_Apply+0x61c>
 8013942:	f8d4 2330 	ldr.w	r2, [r4, #816]	@ 0x330
 8013946:	f107 0a28 	add.w	sl, r7, #40	@ 0x28
 801394a:	2a00      	cmp	r2, #0
 801394c:	f2c0 80e3 	blt.w	8013b16 <Argus_Eval_Apply+0x7b2>
 8013950:	f3c2 21c0 	ubfx	r1, r2, #11, #1
 8013954:	eb01 3212 	add.w	r2, r1, r2, lsr #12
 8013958:	f64f 71fd 	movw	r1, #65533	@ 0xfffd
 801395c:	428a      	cmp	r2, r1
 801395e:	d80c      	bhi.n	801397a <Argus_Eval_Apply+0x616>
 8013960:	b292      	uxth	r2, r2
 8013962:	f8a7 21c8 	strh.w	r2, [r7, #456]	@ 0x1c8
 8013966:	e5f0      	b.n	801354a <Argus_Eval_Apply+0x1e6>
 8013968:	2b00      	cmp	r3, #0
 801396a:	4b8d      	ldr	r3, [pc, #564]	@ (8013ba0 <Argus_Eval_Apply+0x83c>)
 801396c:	bfa8      	it	ge
 801396e:	f44f 0300 	movge.w	r3, #8388608	@ 0x800000
 8013972:	9301      	str	r3, [sp, #4]
 8013974:	e624      	b.n	80135c0 <Argus_Eval_Apply+0x25c>
 8013976:	f8c4 2330 	str.w	r2, [r4, #816]	@ 0x330
 801397a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801397e:	e7f0      	b.n	8013962 <Argus_Eval_Apply+0x5fe>
 8013980:	f107 0a28 	add.w	sl, r7, #40	@ 0x28
 8013984:	ea4f 2688 	mov.w	r6, r8, lsl #10
 8013988:	f1b8 0f00 	cmp.w	r8, #0
 801398c:	f000 81c9 	beq.w	8013d22 <Argus_Eval_Apply+0x9be>
 8013990:	2eff      	cmp	r6, #255	@ 0xff
 8013992:	dc00      	bgt.n	8013996 <Argus_Eval_Apply+0x632>
 8013994:	e7fe      	b.n	8013994 <Argus_Eval_Apply+0x630>
 8013996:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 801399a:	f240 8224 	bls.w	8013de6 <Argus_Eval_Apply+0xa82>
 801399e:	4610      	mov	r0, r2
 80139a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80139a4:	4296      	cmp	r6, r2
 80139a6:	bf9c      	itt	ls
 80139a8:	1b92      	subls	r2, r2, r6
 80139aa:	f440 4080 	orrls.w	r0, r0, #16384	@ 0x4000
 80139ae:	0052      	lsls	r2, r2, #1
 80139b0:	d063      	beq.n	8013a7a <Argus_Eval_Apply+0x716>
 80139b2:	42b2      	cmp	r2, r6
 80139b4:	bf24      	itt	cs
 80139b6:	1b92      	subcs	r2, r2, r6
 80139b8:	f440 5000 	orrcs.w	r0, r0, #8192	@ 0x2000
 80139bc:	0052      	lsls	r2, r2, #1
 80139be:	d05c      	beq.n	8013a7a <Argus_Eval_Apply+0x716>
 80139c0:	42b2      	cmp	r2, r6
 80139c2:	bf24      	itt	cs
 80139c4:	1b92      	subcs	r2, r2, r6
 80139c6:	f440 5080 	orrcs.w	r0, r0, #4096	@ 0x1000
 80139ca:	0052      	lsls	r2, r2, #1
 80139cc:	d055      	beq.n	8013a7a <Argus_Eval_Apply+0x716>
 80139ce:	4296      	cmp	r6, r2
 80139d0:	bf9c      	itt	ls
 80139d2:	1b92      	subls	r2, r2, r6
 80139d4:	f440 6000 	orrls.w	r0, r0, #2048	@ 0x800
 80139d8:	0052      	lsls	r2, r2, #1
 80139da:	d04e      	beq.n	8013a7a <Argus_Eval_Apply+0x716>
 80139dc:	4296      	cmp	r6, r2
 80139de:	bf9c      	itt	ls
 80139e0:	1b92      	subls	r2, r2, r6
 80139e2:	f440 6080 	orrls.w	r0, r0, #1024	@ 0x400
 80139e6:	0052      	lsls	r2, r2, #1
 80139e8:	d047      	beq.n	8013a7a <Argus_Eval_Apply+0x716>
 80139ea:	4296      	cmp	r6, r2
 80139ec:	bf9c      	itt	ls
 80139ee:	1b92      	subls	r2, r2, r6
 80139f0:	f440 7000 	orrls.w	r0, r0, #512	@ 0x200
 80139f4:	0052      	lsls	r2, r2, #1
 80139f6:	d040      	beq.n	8013a7a <Argus_Eval_Apply+0x716>
 80139f8:	42b2      	cmp	r2, r6
 80139fa:	bf24      	itt	cs
 80139fc:	1b92      	subcs	r2, r2, r6
 80139fe:	f440 7080 	orrcs.w	r0, r0, #256	@ 0x100
 8013a02:	0052      	lsls	r2, r2, #1
 8013a04:	d039      	beq.n	8013a7a <Argus_Eval_Apply+0x716>
 8013a06:	4296      	cmp	r6, r2
 8013a08:	bf9c      	itt	ls
 8013a0a:	1b92      	subls	r2, r2, r6
 8013a0c:	f040 0080 	orrls.w	r0, r0, #128	@ 0x80
 8013a10:	0052      	lsls	r2, r2, #1
 8013a12:	d032      	beq.n	8013a7a <Argus_Eval_Apply+0x716>
 8013a14:	42b2      	cmp	r2, r6
 8013a16:	bf24      	itt	cs
 8013a18:	1b92      	subcs	r2, r2, r6
 8013a1a:	f040 0040 	orrcs.w	r0, r0, #64	@ 0x40
 8013a1e:	0052      	lsls	r2, r2, #1
 8013a20:	d02b      	beq.n	8013a7a <Argus_Eval_Apply+0x716>
 8013a22:	42b2      	cmp	r2, r6
 8013a24:	bf24      	itt	cs
 8013a26:	1b92      	subcs	r2, r2, r6
 8013a28:	f040 0020 	orrcs.w	r0, r0, #32
 8013a2c:	0052      	lsls	r2, r2, #1
 8013a2e:	d024      	beq.n	8013a7a <Argus_Eval_Apply+0x716>
 8013a30:	4296      	cmp	r6, r2
 8013a32:	bf9c      	itt	ls
 8013a34:	1b92      	subls	r2, r2, r6
 8013a36:	f040 0010 	orrls.w	r0, r0, #16
 8013a3a:	0052      	lsls	r2, r2, #1
 8013a3c:	d01d      	beq.n	8013a7a <Argus_Eval_Apply+0x716>
 8013a3e:	4296      	cmp	r6, r2
 8013a40:	bf9c      	itt	ls
 8013a42:	1b92      	subls	r2, r2, r6
 8013a44:	f040 0008 	orrls.w	r0, r0, #8
 8013a48:	0052      	lsls	r2, r2, #1
 8013a4a:	d016      	beq.n	8013a7a <Argus_Eval_Apply+0x716>
 8013a4c:	4296      	cmp	r6, r2
 8013a4e:	bf9c      	itt	ls
 8013a50:	1b92      	subls	r2, r2, r6
 8013a52:	f040 0004 	orrls.w	r0, r0, #4
 8013a56:	0052      	lsls	r2, r2, #1
 8013a58:	d00f      	beq.n	8013a7a <Argus_Eval_Apply+0x716>
 8013a5a:	4296      	cmp	r6, r2
 8013a5c:	bf9c      	itt	ls
 8013a5e:	1b92      	subls	r2, r2, r6
 8013a60:	f040 0002 	orrls.w	r0, r0, #2
 8013a64:	0052      	lsls	r2, r2, #1
 8013a66:	d008      	beq.n	8013a7a <Argus_Eval_Apply+0x716>
 8013a68:	4296      	cmp	r6, r2
 8013a6a:	bf9c      	itt	ls
 8013a6c:	1b92      	subls	r2, r2, r6
 8013a6e:	f040 0001 	orrls.w	r0, r0, #1
 8013a72:	ebb6 0f42 	cmp.w	r6, r2, lsl #1
 8013a76:	d800      	bhi.n	8013a7a <Argus_Eval_Apply+0x716>
 8013a78:	3001      	adds	r0, #1
 8013a7a:	ea4f 268e 	mov.w	r6, lr, lsl #10
 8013a7e:	f1be 0f00 	cmp.w	lr, #0
 8013a82:	f040 808a 	bne.w	8013b9a <Argus_Eval_Apply+0x836>
 8013a86:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 8013a8a:	f8dc 60dc 	ldr.w	r6, [ip, #220]	@ 0xdc
 8013a8e:	9603      	str	r6, [sp, #12]
 8013a90:	2200      	movs	r2, #0
 8013a92:	e9cd c304 	strd	ip, r3, [sp, #16]
 8013a96:	9202      	str	r2, [sp, #8]
 8013a98:	9b03      	ldr	r3, [sp, #12]
 8013a9a:	9406      	str	r4, [sp, #24]
 8013a9c:	4693      	mov	fp, r2
 8013a9e:	4656      	mov	r6, sl
 8013aa0:	f8cd a00c 	str.w	sl, [sp, #12]
 8013aa4:	fa23 fc02 	lsr.w	ip, r3, r2
 8013aa8:	f01c 0f01 	tst.w	ip, #1
 8013aac:	f102 0201 	add.w	r2, r2, #1
 8013ab0:	d01b      	beq.n	8013aea <Argus_Eval_Apply+0x786>
 8013ab2:	f896 c008 	ldrb.w	ip, [r6, #8]
 8013ab6:	f01c 0f03 	tst.w	ip, #3
 8013aba:	d116      	bne.n	8013aea <Argus_Eval_Apply+0x786>
 8013abc:	f891 c008 	ldrb.w	ip, [r1, #8]
 8013ac0:	f01c 0f03 	tst.w	ip, #3
 8013ac4:	d111      	bne.n	8013aea <Argus_Eval_Apply+0x786>
 8013ac6:	f8b6 c00a 	ldrh.w	ip, [r6, #10]
 8013aca:	f8b1 900a 	ldrh.w	r9, [r1, #10]
 8013ace:	9c02      	ldr	r4, [sp, #8]
 8013ad0:	fb00 fc0c 	mul.w	ip, r0, ip
 8013ad4:	fb0e f909 	mul.w	r9, lr, r9
 8013ad8:	ebbc 0a09 	subs.w	sl, ip, r9
 8013adc:	f104 0401 	add.w	r4, r4, #1
 8013ae0:	bf48      	it	mi
 8013ae2:	eba9 0a0c 	submi.w	sl, r9, ip
 8013ae6:	9402      	str	r4, [sp, #8]
 8013ae8:	44d3      	add	fp, sl
 8013aea:	2a20      	cmp	r2, #32
 8013aec:	f106 060c 	add.w	r6, r6, #12
 8013af0:	f101 010c 	add.w	r1, r1, #12
 8013af4:	d1d6      	bne.n	8013aa4 <Argus_Eval_Apply+0x740>
 8013af6:	9a02      	ldr	r2, [sp, #8]
 8013af8:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8013afc:	9c06      	ldr	r4, [sp, #24]
 8013afe:	e9dd c304 	ldrd	ip, r3, [sp, #16]
 8013b02:	2a00      	cmp	r2, #0
 8013b04:	f040 80db 	bne.w	8013cbe <Argus_Eval_Apply+0x95a>
 8013b08:	f8d4 2330 	ldr.w	r2, [r4, #816]	@ 0x330
 8013b0c:	e71d      	b.n	801394a <Argus_Eval_Apply+0x5e6>
 8013b0e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8013b12:	f8c4 2330 	str.w	r2, [r4, #816]	@ 0x330
 8013b16:	2200      	movs	r2, #0
 8013b18:	e723      	b.n	8013962 <Argus_Eval_Apply+0x5fe>
 8013b1a:	1a31      	subs	r1, r6, r0
 8013b1c:	4299      	cmp	r1, r3
 8013b1e:	bf28      	it	cs
 8013b20:	f44f 3080 	movcs.w	r0, #65536	@ 0x10000
 8013b24:	f4ff ad3b 	bcc.w	801359e <Argus_Eval_Apply+0x23a>
 8013b28:	2900      	cmp	r1, #0
 8013b2a:	db26      	blt.n	8013b7a <Argus_Eval_Apply+0x816>
 8013b2c:	461e      	mov	r6, r3
 8013b2e:	b153      	cbz	r3, 8013b46 <Argus_Eval_Apply+0x7e2>
 8013b30:	2600      	movs	r6, #0
 8013b32:	e000      	b.n	8013b36 <Argus_Eval_Apply+0x7d2>
 8013b34:	b13b      	cbz	r3, 8013b46 <Argus_Eval_Apply+0x7e2>
 8013b36:	428b      	cmp	r3, r1
 8013b38:	bf24      	itt	cs
 8013b3a:	1a5b      	subcs	r3, r3, r1
 8013b3c:	4306      	orrcs	r6, r0
 8013b3e:	0840      	lsrs	r0, r0, #1
 8013b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013b44:	d1f6      	bne.n	8013b34 <Argus_Eval_Apply+0x7d0>
 8013b46:	4299      	cmp	r1, r3
 8013b48:	d800      	bhi.n	8013b4c <Argus_Eval_Apply+0x7e8>
 8013b4a:	3601      	adds	r6, #1
 8013b4c:	ea9e 0f08 	teq	lr, r8
 8013b50:	d408      	bmi.n	8013b64 <Argus_Eval_Apply+0x800>
 8013b52:	2e00      	cmp	r6, #0
 8013b54:	f2c0 80aa 	blt.w	8013cac <Argus_Eval_Apply+0x948>
 8013b58:	f3c6 13c0 	ubfx	r3, r6, #7, #1
 8013b5c:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8013b60:	9301      	str	r3, [sp, #4]
 8013b62:	e52d      	b.n	80135c0 <Argus_Eval_Apply+0x25c>
 8013b64:	4273      	negs	r3, r6
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	f280 8120 	bge.w	8013dac <Argus_Eval_Apply+0xa48>
 8013b6c:	f3c6 13c0 	ubfx	r3, r6, #7, #1
 8013b70:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8013b74:	4273      	negs	r3, r6
 8013b76:	9301      	str	r3, [sp, #4]
 8013b78:	e522      	b.n	80135c0 <Argus_Eval_Apply+0x25c>
 8013b7a:	428b      	cmp	r3, r1
 8013b7c:	f080 809a 	bcs.w	8013cb4 <Argus_Eval_Apply+0x950>
 8013b80:	0840      	lsrs	r0, r0, #1
 8013b82:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8013b86:	f000 80cf 	beq.w	8013d28 <Argus_Eval_Apply+0x9c4>
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d1d0      	bne.n	8013b30 <Argus_Eval_Apply+0x7cc>
 8013b8e:	ea9e 0f08 	teq	lr, r8
 8013b92:	f100 810b 	bmi.w	8013dac <Argus_Eval_Apply+0xa48>
 8013b96:	461e      	mov	r6, r3
 8013b98:	e7de      	b.n	8013b58 <Argus_Eval_Apply+0x7f4>
 8013b9a:	2eff      	cmp	r6, #255	@ 0xff
 8013b9c:	dc02      	bgt.n	8013ba4 <Argus_Eval_Apply+0x840>
 8013b9e:	e7fe      	b.n	8013b9e <Argus_Eval_Apply+0x83a>
 8013ba0:	ff800000 	.word	0xff800000
 8013ba4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8013ba8:	f240 8125 	bls.w	8013df6 <Argus_Eval_Apply+0xa92>
 8013bac:	f04f 0e00 	mov.w	lr, #0
 8013bb0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8013bb4:	4296      	cmp	r6, r2
 8013bb6:	bf9c      	itt	ls
 8013bb8:	1b92      	subls	r2, r2, r6
 8013bba:	f44e 4e80 	orrls.w	lr, lr, #16384	@ 0x4000
 8013bbe:	0052      	lsls	r2, r2, #1
 8013bc0:	f43f af63 	beq.w	8013a8a <Argus_Eval_Apply+0x726>
 8013bc4:	4296      	cmp	r6, r2
 8013bc6:	bf9c      	itt	ls
 8013bc8:	1b92      	subls	r2, r2, r6
 8013bca:	f44e 5e00 	orrls.w	lr, lr, #8192	@ 0x2000
 8013bce:	0052      	lsls	r2, r2, #1
 8013bd0:	f43f af5b 	beq.w	8013a8a <Argus_Eval_Apply+0x726>
 8013bd4:	4296      	cmp	r6, r2
 8013bd6:	bf9c      	itt	ls
 8013bd8:	1b92      	subls	r2, r2, r6
 8013bda:	f44e 5e80 	orrls.w	lr, lr, #4096	@ 0x1000
 8013bde:	0052      	lsls	r2, r2, #1
 8013be0:	f43f af53 	beq.w	8013a8a <Argus_Eval_Apply+0x726>
 8013be4:	4296      	cmp	r6, r2
 8013be6:	bf9c      	itt	ls
 8013be8:	1b92      	subls	r2, r2, r6
 8013bea:	f44e 6e00 	orrls.w	lr, lr, #2048	@ 0x800
 8013bee:	0052      	lsls	r2, r2, #1
 8013bf0:	f43f af4b 	beq.w	8013a8a <Argus_Eval_Apply+0x726>
 8013bf4:	4296      	cmp	r6, r2
 8013bf6:	bf9c      	itt	ls
 8013bf8:	1b92      	subls	r2, r2, r6
 8013bfa:	f44e 6e80 	orrls.w	lr, lr, #1024	@ 0x400
 8013bfe:	0052      	lsls	r2, r2, #1
 8013c00:	f43f af43 	beq.w	8013a8a <Argus_Eval_Apply+0x726>
 8013c04:	4296      	cmp	r6, r2
 8013c06:	bf9c      	itt	ls
 8013c08:	1b92      	subls	r2, r2, r6
 8013c0a:	f44e 7e00 	orrls.w	lr, lr, #512	@ 0x200
 8013c0e:	0052      	lsls	r2, r2, #1
 8013c10:	f43f af3b 	beq.w	8013a8a <Argus_Eval_Apply+0x726>
 8013c14:	4296      	cmp	r6, r2
 8013c16:	bf9c      	itt	ls
 8013c18:	1b92      	subls	r2, r2, r6
 8013c1a:	f44e 7e80 	orrls.w	lr, lr, #256	@ 0x100
 8013c1e:	0052      	lsls	r2, r2, #1
 8013c20:	f43f af33 	beq.w	8013a8a <Argus_Eval_Apply+0x726>
 8013c24:	4296      	cmp	r6, r2
 8013c26:	bf9c      	itt	ls
 8013c28:	1b92      	subls	r2, r2, r6
 8013c2a:	f04e 0e80 	orrls.w	lr, lr, #128	@ 0x80
 8013c2e:	0052      	lsls	r2, r2, #1
 8013c30:	f43f af2b 	beq.w	8013a8a <Argus_Eval_Apply+0x726>
 8013c34:	4296      	cmp	r6, r2
 8013c36:	bf9c      	itt	ls
 8013c38:	1b92      	subls	r2, r2, r6
 8013c3a:	f04e 0e40 	orrls.w	lr, lr, #64	@ 0x40
 8013c3e:	0052      	lsls	r2, r2, #1
 8013c40:	f43f af23 	beq.w	8013a8a <Argus_Eval_Apply+0x726>
 8013c44:	4296      	cmp	r6, r2
 8013c46:	bf9c      	itt	ls
 8013c48:	1b92      	subls	r2, r2, r6
 8013c4a:	f04e 0e20 	orrls.w	lr, lr, #32
 8013c4e:	0052      	lsls	r2, r2, #1
 8013c50:	f43f af1b 	beq.w	8013a8a <Argus_Eval_Apply+0x726>
 8013c54:	4296      	cmp	r6, r2
 8013c56:	bf9c      	itt	ls
 8013c58:	1b92      	subls	r2, r2, r6
 8013c5a:	f04e 0e10 	orrls.w	lr, lr, #16
 8013c5e:	0052      	lsls	r2, r2, #1
 8013c60:	f43f af13 	beq.w	8013a8a <Argus_Eval_Apply+0x726>
 8013c64:	4296      	cmp	r6, r2
 8013c66:	bf9c      	itt	ls
 8013c68:	1b92      	subls	r2, r2, r6
 8013c6a:	f04e 0e08 	orrls.w	lr, lr, #8
 8013c6e:	0052      	lsls	r2, r2, #1
 8013c70:	f43f af0b 	beq.w	8013a8a <Argus_Eval_Apply+0x726>
 8013c74:	4296      	cmp	r6, r2
 8013c76:	bf9c      	itt	ls
 8013c78:	1b92      	subls	r2, r2, r6
 8013c7a:	f04e 0e04 	orrls.w	lr, lr, #4
 8013c7e:	0052      	lsls	r2, r2, #1
 8013c80:	f43f af03 	beq.w	8013a8a <Argus_Eval_Apply+0x726>
 8013c84:	4296      	cmp	r6, r2
 8013c86:	bf9c      	itt	ls
 8013c88:	1b92      	subls	r2, r2, r6
 8013c8a:	f04e 0e02 	orrls.w	lr, lr, #2
 8013c8e:	0052      	lsls	r2, r2, #1
 8013c90:	f43f aefb 	beq.w	8013a8a <Argus_Eval_Apply+0x726>
 8013c94:	4296      	cmp	r6, r2
 8013c96:	bf9c      	itt	ls
 8013c98:	1b92      	subls	r2, r2, r6
 8013c9a:	f04e 0e01 	orrls.w	lr, lr, #1
 8013c9e:	ebb6 0f42 	cmp.w	r6, r2, lsl #1
 8013ca2:	f63f aef2 	bhi.w	8013a8a <Argus_Eval_Apply+0x726>
 8013ca6:	f10e 0e01 	add.w	lr, lr, #1
 8013caa:	e6ee      	b.n	8013a8a <Argus_Eval_Apply+0x726>
 8013cac:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8013cb0:	9301      	str	r3, [sp, #4]
 8013cb2:	e485      	b.n	80135c0 <Argus_Eval_Apply+0x25c>
 8013cb4:	4606      	mov	r6, r0
 8013cb6:	e749      	b.n	8013b4c <Argus_Eval_Apply+0x7e8>
 8013cb8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8013cbc:	e736      	b.n	8013b2c <Argus_Eval_Apply+0x7c8>
 8013cbe:	0211      	lsls	r1, r2, #8
 8013cc0:	465e      	mov	r6, fp
 8013cc2:	468e      	mov	lr, r1
 8013cc4:	b391      	cbz	r1, 8013d2c <Argus_Eval_Apply+0x9c8>
 8013cc6:	f1bb 0f00 	cmp.w	fp, #0
 8013cca:	bfb8      	it	lt
 8013ccc:	f1cb 0b00 	rsblt	fp, fp, #0
 8013cd0:	2900      	cmp	r1, #0
 8013cd2:	db44      	blt.n	8013d5e <Argus_Eval_Apply+0x9fa>
 8013cd4:	4559      	cmp	r1, fp
 8013cd6:	d271      	bcs.n	8013dbc <Argus_Eval_Apply+0xa58>
 8013cd8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8013cdc:	0049      	lsls	r1, r1, #1
 8013cde:	4559      	cmp	r1, fp
 8013ce0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8013ce4:	d3fa      	bcc.n	8013cdc <Argus_Eval_Apply+0x978>
 8013ce6:	2a00      	cmp	r2, #0
 8013ce8:	d13f      	bne.n	8013d6a <Argus_Eval_Apply+0xa06>
 8013cea:	ea96 0f0e 	teq	r6, lr
 8013cee:	f8d4 1330 	ldr.w	r1, [r4, #816]	@ 0x330
 8013cf2:	d420      	bmi.n	8013d36 <Argus_Eval_Apply+0x9d2>
 8013cf4:	2900      	cmp	r1, #0
 8013cf6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8013cfa:	f6ff ae3c 	blt.w	8013976 <Argus_Eval_Apply+0x612>
 8013cfe:	f89c 00d5 	ldrb.w	r0, [ip, #213]	@ 0xd5
 8013d02:	b158      	cbz	r0, 8013d1c <Argus_Eval_Apply+0x9b8>
 8013d04:	4291      	cmp	r1, r2
 8013d06:	da1f      	bge.n	8013d48 <Argus_Eval_Apply+0x9e4>
 8013d08:	1a52      	subs	r2, r2, r1
 8013d0a:	fb82 2000 	smull	r2, r0, r2, r0
 8013d0e:	0a16      	lsrs	r6, r2, #8
 8013d10:	ea46 6600 	orr.w	r6, r6, r0, lsl #24
 8013d14:	4431      	add	r1, r6
 8013d16:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8013d1a:	440a      	add	r2, r1
 8013d1c:	f8c4 2330 	str.w	r2, [r4, #816]	@ 0x330
 8013d20:	e613      	b.n	801394a <Argus_Eval_Apply+0x5e6>
 8013d22:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8013d26:	e6a8      	b.n	8013a7a <Argus_Eval_Apply+0x716>
 8013d28:	4606      	mov	r6, r0
 8013d2a:	e70c      	b.n	8013b46 <Argus_Eval_Apply+0x7e2>
 8013d2c:	f1bb 0f00 	cmp.w	fp, #0
 8013d30:	f8d4 1330 	ldr.w	r1, [r4, #816]	@ 0x330
 8013d34:	dade      	bge.n	8013cf4 <Argus_Eval_Apply+0x990>
 8013d36:	2900      	cmp	r1, #0
 8013d38:	f6ff aee9 	blt.w	8013b0e <Argus_Eval_Apply+0x7aa>
 8013d3c:	f89c 00d5 	ldrb.w	r0, [ip, #213]	@ 0xd5
 8013d40:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8013d44:	2800      	cmp	r0, #0
 8013d46:	d0e9      	beq.n	8013d1c <Argus_Eval_Apply+0x9b8>
 8013d48:	1a8a      	subs	r2, r1, r2
 8013d4a:	fb82 2000 	smull	r2, r0, r2, r0
 8013d4e:	0a16      	lsrs	r6, r2, #8
 8013d50:	ea46 6600 	orr.w	r6, r6, r0, lsl #24
 8013d54:	1b89      	subs	r1, r1, r6
 8013d56:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8013d5a:	1a8a      	subs	r2, r1, r2
 8013d5c:	e7de      	b.n	8013d1c <Argus_Eval_Apply+0x9b8>
 8013d5e:	4249      	negs	r1, r1
 8013d60:	4559      	cmp	r1, fp
 8013d62:	bf28      	it	cs
 8013d64:	f44f 3280 	movcs.w	r2, #65536	@ 0x10000
 8013d68:	d3b6      	bcc.n	8013cd8 <Argus_Eval_Apply+0x974>
 8013d6a:	2900      	cmp	r1, #0
 8013d6c:	db2c      	blt.n	8013dc8 <Argus_Eval_Apply+0xa64>
 8013d6e:	f1bb 0f00 	cmp.w	fp, #0
 8013d72:	d021      	beq.n	8013db8 <Argus_Eval_Apply+0xa54>
 8013d74:	4610      	mov	r0, r2
 8013d76:	2200      	movs	r2, #0
 8013d78:	e002      	b.n	8013d80 <Argus_Eval_Apply+0xa1c>
 8013d7a:	f1bb 0f00 	cmp.w	fp, #0
 8013d7e:	d008      	beq.n	8013d92 <Argus_Eval_Apply+0xa2e>
 8013d80:	458b      	cmp	fp, r1
 8013d82:	bf24      	itt	cs
 8013d84:	ebab 0b01 	subcs.w	fp, fp, r1
 8013d88:	4302      	orrcs	r2, r0
 8013d8a:	0840      	lsrs	r0, r0, #1
 8013d8c:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8013d90:	d1f3      	bne.n	8013d7a <Argus_Eval_Apply+0xa16>
 8013d92:	4559      	cmp	r1, fp
 8013d94:	bf98      	it	ls
 8013d96:	3201      	addls	r2, #1
 8013d98:	ea96 0f0e 	teq	r6, lr
 8013d9c:	d421      	bmi.n	8013de2 <Argus_Eval_Apply+0xa7e>
 8013d9e:	2a00      	cmp	r2, #0
 8013da0:	db0f      	blt.n	8013dc2 <Argus_Eval_Apply+0xa5e>
 8013da2:	f8d4 1330 	ldr.w	r1, [r4, #816]	@ 0x330
 8013da6:	2900      	cmp	r1, #0
 8013da8:	daa9      	bge.n	8013cfe <Argus_Eval_Apply+0x99a>
 8013daa:	e7b7      	b.n	8013d1c <Argus_Eval_Apply+0x9b8>
 8013dac:	f3c3 11c0 	ubfx	r1, r3, #7, #1
 8013db0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8013db4:	9301      	str	r3, [sp, #4]
 8013db6:	e403      	b.n	80135c0 <Argus_Eval_Apply+0x25c>
 8013db8:	465a      	mov	r2, fp
 8013dba:	e7ea      	b.n	8013d92 <Argus_Eval_Apply+0xa2e>
 8013dbc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8013dc0:	e7d5      	b.n	8013d6e <Argus_Eval_Apply+0xa0a>
 8013dc2:	f8d4 1330 	ldr.w	r1, [r4, #816]	@ 0x330
 8013dc6:	e795      	b.n	8013cf4 <Argus_Eval_Apply+0x990>
 8013dc8:	4559      	cmp	r1, fp
 8013dca:	d9e5      	bls.n	8013d98 <Argus_Eval_Apply+0xa34>
 8013dcc:	0852      	lsrs	r2, r2, #1
 8013dce:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8013dd2:	d0de      	beq.n	8013d92 <Argus_Eval_Apply+0xa2e>
 8013dd4:	f1bb 0f00 	cmp.w	fp, #0
 8013dd8:	d1cc      	bne.n	8013d74 <Argus_Eval_Apply+0xa10>
 8013dda:	ea96 0f0e 	teq	r6, lr
 8013dde:	465a      	mov	r2, fp
 8013de0:	d5df      	bpl.n	8013da2 <Argus_Eval_Apply+0xa3e>
 8013de2:	4252      	negs	r2, r2
 8013de4:	e7dd      	b.n	8013da2 <Argus_Eval_Apply+0xa3e>
 8013de6:	f5c6 7200 	rsb	r2, r6, #512	@ 0x200
 8013dea:	0052      	lsls	r2, r2, #1
 8013dec:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8013df0:	f47f add8 	bne.w	80139a4 <Argus_Eval_Apply+0x640>
 8013df4:	e641      	b.n	8013a7a <Argus_Eval_Apply+0x716>
 8013df6:	f5c6 7200 	rsb	r2, r6, #512	@ 0x200
 8013dfa:	0052      	lsls	r2, r2, #1
 8013dfc:	f44f 4e00 	mov.w	lr, #32768	@ 0x8000
 8013e00:	f47f aed8 	bne.w	8013bb4 <Argus_Eval_Apply+0x850>
 8013e04:	e641      	b.n	8013a8a <Argus_Eval_Apply+0x726>
 8013e06:	bf00      	nop

08013e08 <Argus_Eval_ResetShotNoiseAmplitude>:
 8013e08:	f04f 33ff 	mov.w	r3, #4294967295
 8013e0c:	f8c0 3330 	str.w	r3, [r0, #816]	@ 0x330
 8013e10:	4770      	bx	lr
 8013e12:	bf00      	nop

08013e14 <Argus_Pba_Init>:
 8013e14:	2300      	movs	r3, #0
 8013e16:	6003      	str	r3, [r0, #0]
 8013e18:	6043      	str	r3, [r0, #4]
 8013e1a:	6083      	str	r3, [r0, #8]
 8013e1c:	60c1      	str	r1, [r0, #12]
 8013e1e:	4770      	bx	lr

08013e20 <Argus_Pba_CheckCfg>:
 8013e20:	b508      	push	{r3, lr}
 8013e22:	7802      	ldrb	r2, [r0, #0]
 8013e24:	4603      	mov	r3, r0
 8013e26:	f012 0001 	ands.w	r0, r2, #1
 8013e2a:	d01d      	beq.n	8013e68 <Argus_Pba_CheckCfg+0x48>
 8013e2c:	f032 0071 	bics.w	r0, r2, #113	@ 0x71
 8013e30:	d11b      	bne.n	8013e6a <Argus_Pba_CheckCfg+0x4a>
 8013e32:	7859      	ldrb	r1, [r3, #1]
 8013e34:	1e4a      	subs	r2, r1, #1
 8013e36:	2a01      	cmp	r2, #1
 8013e38:	d823      	bhi.n	8013e82 <Argus_Pba_CheckCfg+0x62>
 8013e3a:	78d9      	ldrb	r1, [r3, #3]
 8013e3c:	789a      	ldrb	r2, [r3, #2]
 8013e3e:	4291      	cmp	r1, r2
 8013e40:	d82b      	bhi.n	8013e9a <Argus_Pba_CheckCfg+0x7a>
 8013e42:	88d9      	ldrh	r1, [r3, #6]
 8013e44:	889a      	ldrh	r2, [r3, #4]
 8013e46:	4291      	cmp	r1, r2
 8013e48:	d821      	bhi.n	8013e8e <Argus_Pba_CheckCfg+0x6e>
 8013e4a:	8959      	ldrh	r1, [r3, #10]
 8013e4c:	891a      	ldrh	r2, [r3, #8]
 8013e4e:	4291      	cmp	r1, r2
 8013e50:	d835      	bhi.n	8013ebe <Argus_Pba_CheckCfg+0x9e>
 8013e52:	7b5a      	ldrb	r2, [r3, #13]
 8013e54:	7b19      	ldrb	r1, [r3, #12]
 8013e56:	428a      	cmp	r2, r1
 8013e58:	d325      	bcc.n	8013ea6 <Argus_Pba_CheckCfg+0x86>
 8013e5a:	8a1a      	ldrh	r2, [r3, #16]
 8013e5c:	89d9      	ldrh	r1, [r3, #14]
 8013e5e:	428a      	cmp	r2, r1
 8013e60:	d327      	bcc.n	8013eb2 <Argus_Pba_CheckCfg+0x92>
 8013e62:	699b      	ldr	r3, [r3, #24]
 8013e64:	3301      	adds	r3, #1
 8013e66:	d006      	beq.n	8013e76 <Argus_Pba_CheckCfg+0x56>
 8013e68:	bd08      	pop	{r3, pc}
 8013e6a:	4818      	ldr	r0, [pc, #96]	@ (8013ecc <Argus_Pba_CheckCfg+0xac>)
 8013e6c:	f7fa f850 	bl	800df10 <print>
 8013e70:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8013e74:	bd08      	pop	{r3, pc}
 8013e76:	4816      	ldr	r0, [pc, #88]	@ (8013ed0 <Argus_Pba_CheckCfg+0xb0>)
 8013e78:	f7fa f84a 	bl	800df10 <print>
 8013e7c:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8013e80:	bd08      	pop	{r3, pc}
 8013e82:	4814      	ldr	r0, [pc, #80]	@ (8013ed4 <Argus_Pba_CheckCfg+0xb4>)
 8013e84:	f7fa f844 	bl	800df10 <print>
 8013e88:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8013e8c:	bd08      	pop	{r3, pc}
 8013e8e:	4812      	ldr	r0, [pc, #72]	@ (8013ed8 <Argus_Pba_CheckCfg+0xb8>)
 8013e90:	f7fa f83e 	bl	800df10 <print>
 8013e94:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8013e98:	bd08      	pop	{r3, pc}
 8013e9a:	4810      	ldr	r0, [pc, #64]	@ (8013edc <Argus_Pba_CheckCfg+0xbc>)
 8013e9c:	f7fa f838 	bl	800df10 <print>
 8013ea0:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8013ea4:	bd08      	pop	{r3, pc}
 8013ea6:	480e      	ldr	r0, [pc, #56]	@ (8013ee0 <Argus_Pba_CheckCfg+0xc0>)
 8013ea8:	f7fa f832 	bl	800df10 <print>
 8013eac:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8013eb0:	bd08      	pop	{r3, pc}
 8013eb2:	480c      	ldr	r0, [pc, #48]	@ (8013ee4 <Argus_Pba_CheckCfg+0xc4>)
 8013eb4:	f7fa f82c 	bl	800df10 <print>
 8013eb8:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8013ebc:	bd08      	pop	{r3, pc}
 8013ebe:	480a      	ldr	r0, [pc, #40]	@ (8013ee8 <Argus_Pba_CheckCfg+0xc8>)
 8013ec0:	f7fa f826 	bl	800df10 <print>
 8013ec4:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8013ec8:	bd08      	pop	{r3, pc}
 8013eca:	bf00      	nop
 8013ecc:	08028724 	.word	0x08028724
 8013ed0:	08028948 	.word	0x08028948
 8013ed4:	08028758 	.word	0x08028758
 8013ed8:	080287e4 	.word	0x080287e4
 8013edc:	08028790 	.word	0x08028790
 8013ee0:	08028898 	.word	0x08028898
 8013ee4:	080288f0 	.word	0x080288f0
 8013ee8:	08028838 	.word	0x08028838

08013eec <Argus_Pba_UpdateConfig>:
 8013eec:	f8b2 329d 	ldrh.w	r3, [r2, #669]	@ 0x29d
 8013ef0:	8143      	strh	r3, [r0, #10]
 8013ef2:	4770      	bx	lr

08013ef4 <Argus_Pba_Apply>:
 8013ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ef8:	68c7      	ldr	r7, [r0, #12]
 8013efa:	783b      	ldrb	r3, [r7, #0]
 8013efc:	b09b      	sub	sp, #108	@ 0x6c
 8013efe:	f013 0301 	ands.w	r3, r3, #1
 8013f02:	4683      	mov	fp, r0
 8013f04:	9301      	str	r3, [sp, #4]
 8013f06:	f000 8201 	beq.w	801430c <Argus_Pba_Apply+0x418>
 8013f0a:	680b      	ldr	r3, [r1, #0]
 8013f0c:	9308      	str	r3, [sp, #32]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	f2c0 8204 	blt.w	801431c <Argus_Pba_Apply+0x428>
 8013f14:	698b      	ldr	r3, [r1, #24]
 8013f16:	7a82      	ldrb	r2, [r0, #10]
 8013f18:	9203      	str	r2, [sp, #12]
 8013f1a:	f101 0e34 	add.w	lr, r1, #52	@ 0x34
 8013f1e:	7ac2      	ldrb	r2, [r0, #11]
 8013f20:	697e      	ldr	r6, [r7, #20]
 8013f22:	9306      	str	r3, [sp, #24]
 8013f24:	9202      	str	r2, [sp, #8]
 8013f26:	f403 3880 	and.w	r8, r3, #65536	@ 0x10000
 8013f2a:	f403 2980 	and.w	r9, r3, #262144	@ 0x40000
 8013f2e:	f501 72d4 	add.w	r2, r1, #424	@ 0x1a8
 8013f32:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 8013f36:	f501 7cda 	add.w	ip, r1, #436	@ 0x1b4
 8013f3a:	4674      	mov	r4, lr
 8013f3c:	f814 0c04 	ldrb.w	r0, [r4, #-4]
 8013f40:	f010 0ffb 	tst.w	r0, #251	@ 0xfb
 8013f44:	d107      	bne.n	8013f56 <Argus_Pba_Apply+0x62>
 8013f46:	f854 5c0c 	ldr.w	r5, [r4, #-12]
 8013f4a:	f040 0008 	orr.w	r0, r0, #8
 8013f4e:	42ae      	cmp	r6, r5
 8013f50:	bfc8      	it	gt
 8013f52:	f804 0c04 	strbgt.w	r0, [r4, #-4]
 8013f56:	340c      	adds	r4, #12
 8013f58:	45a4      	cmp	ip, r4
 8013f5a:	d1ef      	bne.n	8013f3c <Argus_Pba_Apply+0x48>
 8013f5c:	7838      	ldrb	r0, [r7, #0]
 8013f5e:	9004      	str	r0, [sp, #16]
 8013f60:	f010 0f30 	tst.w	r0, #48	@ 0x30
 8013f64:	d01d      	beq.n	8013fa2 <Argus_Pba_Apply+0xae>
 8013f66:	7cbd      	ldrb	r5, [r7, #18]
 8013f68:	b1dd      	cbz	r5, 8013fa2 <Argus_Pba_Apply+0xae>
 8013f6a:	9802      	ldr	r0, [sp, #8]
 8013f6c:	9e03      	ldr	r6, [sp, #12]
 8013f6e:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8013f72:	00a4      	lsls	r4, r4, #2
 8013f74:	2030      	movs	r0, #48	@ 0x30
 8013f76:	fb10 4606 	smlabb	r6, r0, r6, r4
 8013f7a:	3628      	adds	r6, #40	@ 0x28
 8013f7c:	440e      	add	r6, r1
 8013f7e:	4618      	mov	r0, r3
 8013f80:	7a04      	ldrb	r4, [r0, #8]
 8013f82:	f014 0f10 	tst.w	r4, #16
 8013f86:	d109      	bne.n	8013f9c <Argus_Pba_Apply+0xa8>
 8013f88:	07a4      	lsls	r4, r4, #30
 8013f8a:	d507      	bpl.n	8013f9c <Argus_Pba_Apply+0xa8>
 8013f8c:	4286      	cmp	r6, r0
 8013f8e:	f105 34ff 	add.w	r4, r5, #4294967295
 8013f92:	d003      	beq.n	8013f9c <Argus_Pba_Apply+0xa8>
 8013f94:	f014 05ff 	ands.w	r5, r4, #255	@ 0xff
 8013f98:	f000 8275 	beq.w	8014486 <Argus_Pba_Apply+0x592>
 8013f9c:	300c      	adds	r0, #12
 8013f9e:	4290      	cmp	r0, r2
 8013fa0:	d9ee      	bls.n	8013f80 <Argus_Pba_Apply+0x8c>
 8013fa2:	7cfc      	ldrb	r4, [r7, #19]
 8013fa4:	b18c      	cbz	r4, 8013fca <Argus_Pba_Apply+0xd6>
 8013fa6:	9803      	ldr	r0, [sp, #12]
 8013fa8:	9d02      	ldr	r5, [sp, #8]
 8013faa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8013fae:	0100      	lsls	r0, r0, #4
 8013fb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013fb4:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8013fb8:	4408      	add	r0, r1
 8013fba:	f890 0030 	ldrb.w	r0, [r0, #48]	@ 0x30
 8013fbe:	f010 0040 	ands.w	r0, r0, #64	@ 0x40
 8013fc2:	f040 81ca 	bne.w	801435a <Argus_Pba_Apply+0x466>
 8013fc6:	f88b 0009 	strb.w	r0, [fp, #9]
 8013fca:	f1b8 0f00 	cmp.w	r8, #0
 8013fce:	bf14      	ite	ne
 8013fd0:	26df      	movne	r6, #223	@ 0xdf
 8013fd2:	2610      	moveq	r6, #16
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	2500      	movs	r5, #0
 8013fd8:	7a04      	ldrb	r4, [r0, #8]
 8013fda:	4226      	tst	r6, r4
 8013fdc:	d103      	bne.n	8013fe6 <Argus_Pba_Apply+0xf2>
 8013fde:	88c4      	ldrh	r4, [r0, #6]
 8013fe0:	42a5      	cmp	r5, r4
 8013fe2:	bf38      	it	cc
 8013fe4:	4625      	movcc	r5, r4
 8013fe6:	300c      	adds	r0, #12
 8013fe8:	4282      	cmp	r2, r0
 8013fea:	d1f5      	bne.n	8013fd8 <Argus_Pba_Apply+0xe4>
 8013fec:	9804      	ldr	r0, [sp, #16]
 8013fee:	f8a1 51b8 	strh.w	r5, [r1, #440]	@ 0x1b8
 8013ff2:	f010 0010 	ands.w	r0, r0, #16
 8013ff6:	9007      	str	r0, [sp, #28]
 8013ff8:	f000 81dd 	beq.w	80143b6 <Argus_Pba_Apply+0x4c2>
 8013ffc:	9e03      	ldr	r6, [sp, #12]
 8013ffe:	9c02      	ldr	r4, [sp, #8]
 8014000:	f8b7 a00a 	ldrh.w	sl, [r7, #10]
 8014004:	f8cd a01c 	str.w	sl, [sp, #28]
 8014008:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 801400c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014010:	0100      	lsls	r0, r0, #4
 8014012:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8014016:	4408      	add	r0, r1
 8014018:	9c02      	ldr	r4, [sp, #8]
 801401a:	f890 a030 	ldrb.w	sl, [r0, #48]	@ 0x30
 801401e:	8dc0      	ldrh	r0, [r0, #46]	@ 0x2e
 8014020:	9005      	str	r0, [sp, #20]
 8014022:	8938      	ldrh	r0, [r7, #8]
 8014024:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014026:	0060      	lsls	r0, r4, #1
 8014028:	900a      	str	r0, [sp, #40]	@ 0x28
 801402a:	0070      	lsls	r0, r6, #1
 801402c:	9009      	str	r0, [sp, #36]	@ 0x24
 801402e:	2600      	movs	r6, #0
 8014030:	4618      	mov	r0, r3
 8014032:	7a04      	ldrb	r4, [r0, #8]
 8014034:	300c      	adds	r0, #12
 8014036:	07a4      	lsls	r4, r4, #30
 8014038:	bf48      	it	mi
 801403a:	3601      	addmi	r6, #1
 801403c:	4282      	cmp	r2, r0
 801403e:	d1f8      	bne.n	8014032 <Argus_Pba_Apply+0x13e>
 8014040:	f1b8 0f00 	cmp.w	r8, #0
 8014044:	f000 8124 	beq.w	8014290 <Argus_Pba_Apply+0x39c>
 8014048:	2e00      	cmp	r6, #0
 801404a:	f000 8121 	beq.w	8014290 <Argus_Pba_Apply+0x39c>
 801404e:	2000      	movs	r0, #0
 8014050:	9007      	str	r0, [sp, #28]
 8014052:	4618      	mov	r0, r3
 8014054:	266c      	movs	r6, #108	@ 0x6c
 8014056:	e009      	b.n	801406c <Argus_Pba_Apply+0x178>
 8014058:	2e6c      	cmp	r6, #108	@ 0x6c
 801405a:	d104      	bne.n	8014066 <Argus_Pba_Apply+0x172>
 801405c:	f014 0fdf 	tst.w	r4, #223	@ 0xdf
 8014060:	bf18      	it	ne
 8014062:	f06f 066d 	mvnne.w	r6, #109	@ 0x6d
 8014066:	4290      	cmp	r0, r2
 8014068:	f080 81ae 	bcs.w	80143c8 <Argus_Pba_Apply+0x4d4>
 801406c:	7a04      	ldrb	r4, [r0, #8]
 801406e:	f014 0f15 	tst.w	r4, #21
 8014072:	f100 000c 	add.w	r0, r0, #12
 8014076:	d1f6      	bne.n	8014066 <Argus_Pba_Apply+0x172>
 8014078:	2c00      	cmp	r4, #0
 801407a:	d1ed      	bne.n	8014058 <Argus_Pba_Apply+0x164>
 801407c:	f8db 0004 	ldr.w	r0, [fp, #4]
 8014080:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014082:	4604      	mov	r4, r0
 8014084:	69b8      	ldr	r0, [r7, #24]
 8014086:	4320      	orrs	r0, r4
 8014088:	43c4      	mvns	r4, r0
 801408a:	4618      	mov	r0, r3
 801408c:	f014 0f01 	tst.w	r4, #1
 8014090:	7a06      	ldrb	r6, [r0, #8]
 8014092:	f100 000c 	add.w	r0, r0, #12
 8014096:	f000 817b 	beq.w	8014390 <Argus_Pba_Apply+0x49c>
 801409a:	f046 0604 	orr.w	r6, r6, #4
 801409e:	4282      	cmp	r2, r0
 80140a0:	f800 6c04 	strb.w	r6, [r0, #-4]
 80140a4:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80140a8:	d1f0      	bne.n	801408c <Argus_Pba_Apply+0x198>
 80140aa:	78bc      	ldrb	r4, [r7, #2]
 80140ac:	78f8      	ldrb	r0, [r7, #3]
 80140ae:	fb05 f404 	mul.w	r4, r5, r4
 80140b2:	fb05 f000 	mul.w	r0, r5, r0
 80140b6:	f3c4 16c0 	ubfx	r6, r4, #7, #1
 80140ba:	eb06 2a14 	add.w	sl, r6, r4, lsr #8
 80140be:	f3c0 14c0 	ubfx	r4, r0, #7, #1
 80140c2:	eb04 2910 	add.w	r9, r4, r0, lsr #8
 80140c6:	88b8      	ldrh	r0, [r7, #4]
 80140c8:	fa1f fa8a 	uxth.w	sl, sl
 80140cc:	4582      	cmp	sl, r0
 80140ce:	bf38      	it	cc
 80140d0:	4682      	movcc	sl, r0
 80140d2:	88f8      	ldrh	r0, [r7, #6]
 80140d4:	9005      	str	r0, [sp, #20]
 80140d6:	fa1f f989 	uxth.w	r9, r9
 80140da:	4581      	cmp	r9, r0
 80140dc:	bf38      	it	cc
 80140de:	4681      	movcc	r9, r0
 80140e0:	461c      	mov	r4, r3
 80140e2:	e009      	b.n	80140f8 <Argus_Pba_Apply+0x204>
 80140e4:	f8b4 8006 	ldrh.w	r8, [r4, #6]
 80140e8:	45c8      	cmp	r8, r9
 80140ea:	d30b      	bcc.n	8014104 <Argus_Pba_Apply+0x210>
 80140ec:	45d0      	cmp	r8, sl
 80140ee:	bf28      	it	cs
 80140f0:	7226      	strbcs	r6, [r4, #8]
 80140f2:	340c      	adds	r4, #12
 80140f4:	4294      	cmp	r4, r2
 80140f6:	d009      	beq.n	801410c <Argus_Pba_Apply+0x218>
 80140f8:	7a20      	ldrb	r0, [r4, #8]
 80140fa:	f030 0604 	bics.w	r6, r0, #4
 80140fe:	f040 0004 	orr.w	r0, r0, #4
 8014102:	d0ef      	beq.n	80140e4 <Argus_Pba_Apply+0x1f0>
 8014104:	7220      	strb	r0, [r4, #8]
 8014106:	340c      	adds	r4, #12
 8014108:	4294      	cmp	r4, r2
 801410a:	d1f5      	bne.n	80140f8 <Argus_Pba_Apply+0x204>
 801410c:	9807      	ldr	r0, [sp, #28]
 801410e:	2801      	cmp	r0, #1
 8014110:	f000 8314 	beq.w	801473c <Argus_Pba_Apply+0x848>
 8014114:	9804      	ldr	r0, [sp, #16]
 8014116:	0640      	lsls	r0, r0, #25
 8014118:	d560      	bpl.n	80141dc <Argus_Pba_Apply+0x2e8>
 801411a:	4674      	mov	r4, lr
 801411c:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 8014120:	f814 0c04 	ldrb.w	r0, [r4, #-4]
 8014124:	0740      	lsls	r0, r0, #29
 8014126:	d404      	bmi.n	8014132 <Argus_Pba_Apply+0x23e>
 8014128:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 801412c:	4286      	cmp	r6, r0
 801412e:	bfa8      	it	ge
 8014130:	4606      	movge	r6, r0
 8014132:	340c      	adds	r4, #12
 8014134:	4564      	cmp	r4, ip
 8014136:	d1f3      	bne.n	8014120 <Argus_Pba_Apply+0x22c>
 8014138:	2e00      	cmp	r6, #0
 801413a:	f897 a00c 	ldrb.w	sl, [r7, #12]
 801413e:	f897 900d 	ldrb.w	r9, [r7, #13]
 8014142:	f2c0 8214 	blt.w	801456e <Argus_Pba_Apply+0x67a>
 8014146:	f8b7 800e 	ldrh.w	r8, [r7, #14]
 801414a:	b2f4      	uxtb	r4, r6
 801414c:	fb04 f00a 	mul.w	r0, r4, sl
 8014150:	9007      	str	r0, [sp, #28]
 8014152:	ea4f 10c8 	mov.w	r0, r8, lsl #7
 8014156:	900c      	str	r0, [sp, #48]	@ 0x30
 8014158:	9807      	ldr	r0, [sp, #28]
 801415a:	fb09 f404 	mul.w	r4, r9, r4
 801415e:	9409      	str	r4, [sp, #36]	@ 0x24
 8014160:	ea4f 2810 	mov.w	r8, r0, lsr #8
 8014164:	0a34      	lsrs	r4, r6, #8
 8014166:	940a      	str	r4, [sp, #40]	@ 0x28
 8014168:	fb0a 8804 	mla	r8, sl, r4, r8
 801416c:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8014170:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8014172:	4440      	add	r0, r8
 8014174:	42a0      	cmp	r0, r4
 8014176:	bfac      	ite	ge
 8014178:	1830      	addge	r0, r6, r0
 801417a:	1930      	addlt	r0, r6, r4
 801417c:	9007      	str	r0, [sp, #28]
 801417e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014180:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8014182:	0a00      	lsrs	r0, r0, #8
 8014184:	fb09 0004 	mla	r0, r9, r4, r0
 8014188:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801418a:	f3c4 14c0 	ubfx	r4, r4, #7, #1
 801418e:	4420      	add	r0, r4
 8014190:	8a3c      	ldrh	r4, [r7, #16]
 8014192:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 8014196:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801419a:	e9cd 7309 	strd	r7, r3, [sp, #36]	@ 0x24
 801419e:	01e4      	lsls	r4, r4, #7
 80141a0:	4284      	cmp	r4, r0
 80141a2:	bfac      	ite	ge
 80141a4:	1936      	addge	r6, r6, r4
 80141a6:	1836      	addlt	r6, r6, r0
 80141a8:	f04f 0a04 	mov.w	sl, #4
 80141ac:	4670      	mov	r0, lr
 80141ae:	2400      	movs	r4, #0
 80141b0:	f810 3c04 	ldrb.w	r3, [r0, #-4]
 80141b4:	b95b      	cbnz	r3, 80141ce <Argus_Pba_Apply+0x2da>
 80141b6:	f850 3c0c 	ldr.w	r3, [r0, #-12]
 80141ba:	42b3      	cmp	r3, r6
 80141bc:	dc05      	bgt.n	80141ca <Argus_Pba_Apply+0x2d6>
 80141be:	454b      	cmp	r3, r9
 80141c0:	fa28 f704 	lsr.w	r7, r8, r4
 80141c4:	dd03      	ble.n	80141ce <Argus_Pba_Apply+0x2da>
 80141c6:	07ff      	lsls	r7, r7, #31
 80141c8:	d401      	bmi.n	80141ce <Argus_Pba_Apply+0x2da>
 80141ca:	f800 ac04 	strb.w	sl, [r0, #-4]
 80141ce:	300c      	adds	r0, #12
 80141d0:	4560      	cmp	r0, ip
 80141d2:	f104 0401 	add.w	r4, r4, #1
 80141d6:	d1eb      	bne.n	80141b0 <Argus_Pba_Apply+0x2bc>
 80141d8:	e9dd 7309 	ldrd	r7, r3, [sp, #36]	@ 0x24
 80141dc:	7878      	ldrb	r0, [r7, #1]
 80141de:	2802      	cmp	r0, #2
 80141e0:	f000 820a 	beq.w	80145f8 <Argus_Pba_Apply+0x704>
 80141e4:	2600      	movs	r6, #0
 80141e6:	4637      	mov	r7, r6
 80141e8:	f81e 0c04 	ldrb.w	r0, [lr, #-4]
 80141ec:	b978      	cbnz	r0, 801420e <Argus_Pba_Apply+0x31a>
 80141ee:	f85e 4c0c 	ldr.w	r4, [lr, #-12]
 80141f2:	4265      	negs	r5, r4
 80141f4:	2c00      	cmp	r4, #0
 80141f6:	f3c5 1040 	ubfx	r0, r5, #5, #1
 80141fa:	eb00 1095 	add.w	r0, r0, r5, lsr #6
 80141fe:	bfaa      	itet	ge
 8014200:	f3c4 1040 	ubfxge	r0, r4, #5, #1
 8014204:	4240      	neglt	r0, r0
 8014206:	eb00 1094 	addge.w	r0, r0, r4, lsr #6
 801420a:	4407      	add	r7, r0
 801420c:	3601      	adds	r6, #1
 801420e:	f10e 0e0c 	add.w	lr, lr, #12
 8014212:	45e6      	cmp	lr, ip
 8014214:	d1e8      	bne.n	80141e8 <Argus_Pba_Apply+0x2f4>
 8014216:	02b6      	lsls	r6, r6, #10
 8014218:	f000 8289 	beq.w	801472e <Argus_Pba_Apply+0x83a>
 801421c:	ea87 70e7 	eor.w	r0, r7, r7, asr #31
 8014220:	2e00      	cmp	r6, #0
 8014222:	eba0 70e7 	sub.w	r0, r0, r7, asr #31
 8014226:	f2c0 81b6 	blt.w	8014596 <Argus_Pba_Apply+0x6a2>
 801422a:	4286      	cmp	r6, r0
 801422c:	4635      	mov	r5, r6
 801422e:	f080 8442 	bcs.w	8014ab6 <Argus_Pba_Apply+0xbc2>
 8014232:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8014236:	006d      	lsls	r5, r5, #1
 8014238:	4285      	cmp	r5, r0
 801423a:	ea4f 0444 	mov.w	r4, r4, lsl #1
 801423e:	d3fa      	bcc.n	8014236 <Argus_Pba_Apply+0x342>
 8014240:	2c00      	cmp	r4, #0
 8014242:	f040 81af 	bne.w	80145a4 <Argus_Pba_Apply+0x6b0>
 8014246:	ea97 0f06 	teq	r7, r6
 801424a:	bf54      	ite	pl
 801424c:	f06f 4c00 	mvnpl.w	ip, #2147483648	@ 0x80000000
 8014250:	f04f 4c00 	movmi.w	ip, #2147483648	@ 0x80000000
 8014254:	2000      	movs	r0, #0
 8014256:	f8c1 c1b4 	str.w	ip, [r1, #436]	@ 0x1b4
 801425a:	461c      	mov	r4, r3
 801425c:	4606      	mov	r6, r0
 801425e:	2701      	movs	r7, #1
 8014260:	7a25      	ldrb	r5, [r4, #8]
 8014262:	076d      	lsls	r5, r5, #29
 8014264:	bf48      	it	mi
 8014266:	fa07 f500 	lslmi.w	r5, r7, r0
 801426a:	f100 0001 	add.w	r0, r0, #1
 801426e:	bf48      	it	mi
 8014270:	432e      	orrmi	r6, r5
 8014272:	2820      	cmp	r0, #32
 8014274:	f104 040c 	add.w	r4, r4, #12
 8014278:	d1f2      	bne.n	8014260 <Argus_Pba_Apply+0x36c>
 801427a:	43f6      	mvns	r6, r6
 801427c:	f8cb 6004 	str.w	r6, [fp, #4]
 8014280:	2e00      	cmp	r6, #0
 8014282:	f000 81ae 	beq.w	80145e2 <Argus_Pba_Apply+0x6ee>
 8014286:	2300      	movs	r3, #0
 8014288:	f8b1 21b8 	ldrh.w	r2, [r1, #440]	@ 0x1b8
 801428c:	9301      	str	r3, [sp, #4]
 801428e:	e02e      	b.n	80142ee <Argus_Pba_Apply+0x3fa>
 8014290:	9807      	ldr	r0, [sp, #28]
 8014292:	9c05      	ldr	r4, [sp, #20]
 8014294:	42a0      	cmp	r0, r4
 8014296:	d867      	bhi.n	8014368 <Argus_Pba_Apply+0x474>
 8014298:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801429a:	42a0      	cmp	r0, r4
 801429c:	d803      	bhi.n	80142a6 <Argus_Pba_Apply+0x3b2>
 801429e:	f01a 0ffb 	tst.w	sl, #251	@ 0xfb
 80142a2:	f000 8154 	beq.w	801454e <Argus_Pba_Apply+0x65a>
 80142a6:	f1b9 0f00 	cmp.w	r9, #0
 80142aa:	d065      	beq.n	8014378 <Argus_Pba_Apply+0x484>
 80142ac:	f1b8 0f00 	cmp.w	r8, #0
 80142b0:	d162      	bne.n	8014378 <Argus_Pba_Apply+0x484>
 80142b2:	f04f 30ff 	mov.w	r0, #4294967295
 80142b6:	07c5      	lsls	r5, r0, #31
 80142b8:	7a1c      	ldrb	r4, [r3, #8]
 80142ba:	f103 030c 	add.w	r3, r3, #12
 80142be:	d471      	bmi.n	80143a4 <Argus_Pba_Apply+0x4b0>
 80142c0:	f024 0404 	bic.w	r4, r4, #4
 80142c4:	429a      	cmp	r2, r3
 80142c6:	f803 4c04 	strb.w	r4, [r3, #-4]
 80142ca:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80142ce:	d8f2      	bhi.n	80142b6 <Argus_Pba_Apply+0x3c2>
 80142d0:	88fa      	ldrh	r2, [r7, #6]
 80142d2:	9205      	str	r2, [sp, #20]
 80142d4:	2300      	movs	r3, #0
 80142d6:	f8db c000 	ldr.w	ip, [fp]
 80142da:	f8b1 21b8 	ldrh.w	r2, [r1, #440]	@ 0x1b8
 80142de:	f8cb 3004 	str.w	r3, [fp, #4]
 80142e2:	9301      	str	r3, [sp, #4]
 80142e4:	f06f 036d 	mvn.w	r3, #109	@ 0x6d
 80142e8:	f8c1 c1b4 	str.w	ip, [r1, #436]	@ 0x1b4
 80142ec:	600b      	str	r3, [r1, #0]
 80142ee:	9b05      	ldr	r3, [sp, #20]
 80142f0:	429a      	cmp	r2, r3
 80142f2:	d203      	bcs.n	80142fc <Argus_Pba_Apply+0x408>
 80142f4:	9b06      	ldr	r3, [sp, #24]
 80142f6:	f043 0310 	orr.w	r3, r3, #16
 80142fa:	618b      	str	r3, [r1, #24]
 80142fc:	9b01      	ldr	r3, [sp, #4]
 80142fe:	f88b 3008 	strb.w	r3, [fp, #8]
 8014302:	f8cb c000 	str.w	ip, [fp]
 8014306:	b01b      	add	sp, #108	@ 0x6c
 8014308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801430c:	f8a1 31b8 	strh.w	r3, [r1, #440]	@ 0x1b8
 8014310:	f8c1 31b4 	str.w	r3, [r1, #436]	@ 0x1b4
 8014314:	6043      	str	r3, [r0, #4]
 8014316:	b01b      	add	sp, #108	@ 0x6c
 8014318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801431c:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 8014320:	f501 74d4 	add.w	r4, r1, #424	@ 0x1a8
 8014324:	f04f 32ff 	mov.w	r2, #4294967295
 8014328:	07d5      	lsls	r5, r2, #31
 801432a:	7a18      	ldrb	r0, [r3, #8]
 801432c:	f103 030c 	add.w	r3, r3, #12
 8014330:	d525      	bpl.n	801437e <Argus_Pba_Apply+0x48a>
 8014332:	f040 0004 	orr.w	r0, r0, #4
 8014336:	429c      	cmp	r4, r3
 8014338:	f803 0c04 	strb.w	r0, [r3, #-4]
 801433c:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8014340:	d1f2      	bne.n	8014328 <Argus_Pba_Apply+0x434>
 8014342:	f8db 2000 	ldr.w	r2, [fp]
 8014346:	2300      	movs	r3, #0
 8014348:	f8cb 3004 	str.w	r3, [fp, #4]
 801434c:	f8a1 31b8 	strh.w	r3, [r1, #440]	@ 0x1b8
 8014350:	f8c1 21b4 	str.w	r2, [r1, #436]	@ 0x1b4
 8014354:	b01b      	add	sp, #108	@ 0x6c
 8014356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801435a:	f89b 0009 	ldrb.w	r0, [fp, #9]
 801435e:	4284      	cmp	r4, r0
 8014360:	f67f ae33 	bls.w	8013fca <Argus_Pba_Apply+0xd6>
 8014364:	3001      	adds	r0, #1
 8014366:	e62e      	b.n	8013fc6 <Argus_Pba_Apply+0xd2>
 8014368:	f1b9 0f00 	cmp.w	r9, #0
 801436c:	f000 80ec 	beq.w	8014548 <Argus_Pba_Apply+0x654>
 8014370:	f1b8 0f00 	cmp.w	r8, #0
 8014374:	d09d      	beq.n	80142b2 <Argus_Pba_Apply+0x3be>
 8014376:	e66a      	b.n	801404e <Argus_Pba_Apply+0x15a>
 8014378:	9801      	ldr	r0, [sp, #4]
 801437a:	9007      	str	r0, [sp, #28]
 801437c:	e669      	b.n	8014052 <Argus_Pba_Apply+0x15e>
 801437e:	f020 0004 	bic.w	r0, r0, #4
 8014382:	42a3      	cmp	r3, r4
 8014384:	f803 0c04 	strb.w	r0, [r3, #-4]
 8014388:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801438c:	d1cc      	bne.n	8014328 <Argus_Pba_Apply+0x434>
 801438e:	e7d8      	b.n	8014342 <Argus_Pba_Apply+0x44e>
 8014390:	f026 0604 	bic.w	r6, r6, #4
 8014394:	4290      	cmp	r0, r2
 8014396:	f800 6c04 	strb.w	r6, [r0, #-4]
 801439a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801439e:	f47f ae75 	bne.w	801408c <Argus_Pba_Apply+0x198>
 80143a2:	e682      	b.n	80140aa <Argus_Pba_Apply+0x1b6>
 80143a4:	f044 0404 	orr.w	r4, r4, #4
 80143a8:	429a      	cmp	r2, r3
 80143aa:	f803 4c04 	strb.w	r4, [r3, #-4]
 80143ae:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80143b2:	d880      	bhi.n	80142b6 <Argus_Pba_Apply+0x3c2>
 80143b4:	e78c      	b.n	80142d0 <Argus_Pba_Apply+0x3dc>
 80143b6:	f1b9 0f00 	cmp.w	r9, #0
 80143ba:	f43f ae4a 	beq.w	8014052 <Argus_Pba_Apply+0x15e>
 80143be:	f1b8 0f00 	cmp.w	r8, #0
 80143c2:	f43f af76 	beq.w	80142b2 <Argus_Pba_Apply+0x3be>
 80143c6:	e644      	b.n	8014052 <Argus_Pba_Apply+0x15e>
 80143c8:	2e00      	cmp	r6, #0
 80143ca:	f43f ae57 	beq.w	801407c <Argus_Pba_Apply+0x188>
 80143ce:	9804      	ldr	r0, [sp, #16]
 80143d0:	f010 0020 	ands.w	r0, r0, #32
 80143d4:	d068      	beq.n	80144a8 <Argus_Pba_Apply+0x5b4>
 80143d6:	88f8      	ldrh	r0, [r7, #6]
 80143d8:	9005      	str	r0, [sp, #20]
 80143da:	9d03      	ldr	r5, [sp, #12]
 80143dc:	9e02      	ldr	r6, [sp, #8]
 80143de:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 80143e2:	0100      	lsls	r0, r0, #4
 80143e4:	eb06 0446 	add.w	r4, r6, r6, lsl #1
 80143e8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80143ec:	4408      	add	r0, r1
 80143ee:	f890 a030 	ldrb.w	sl, [r0, #48]	@ 0x30
 80143f2:	0070      	lsls	r0, r6, #1
 80143f4:	900a      	str	r0, [sp, #40]	@ 0x28
 80143f6:	0068      	lsls	r0, r5, #1
 80143f8:	9009      	str	r0, [sp, #36]	@ 0x24
 80143fa:	f02a 0004 	bic.w	r0, sl, #4
 80143fe:	900c      	str	r0, [sp, #48]	@ 0x30
 8014400:	2003      	movs	r0, #3
 8014402:	f01a 0720 	ands.w	r7, sl, #32
 8014406:	f040 8091 	bne.w	801452c <Argus_Pba_Apply+0x638>
 801440a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801440c:	2c00      	cmp	r4, #0
 801440e:	f040 834d 	bne.w	8014aac <Argus_Pba_Apply+0xbb8>
 8014412:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8014416:	2701      	movs	r7, #1
 8014418:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 801441c:	40a7      	lsls	r7, r4
 801441e:	43fc      	mvns	r4, r7
 8014420:	2600      	movs	r6, #0
 8014422:	f014 0f01 	tst.w	r4, #1
 8014426:	7a1d      	ldrb	r5, [r3, #8]
 8014428:	f103 030c 	add.w	r3, r3, #12
 801442c:	d022      	beq.n	8014474 <Argus_Pba_Apply+0x580>
 801442e:	f045 0504 	orr.w	r5, r5, #4
 8014432:	4293      	cmp	r3, r2
 8014434:	f803 5c04 	strb.w	r5, [r3, #-4]
 8014438:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801443c:	d1f1      	bne.n	8014422 <Argus_Pba_Apply+0x52e>
 801443e:	9a03      	ldr	r2, [sp, #12]
 8014440:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014442:	9c02      	ldr	r4, [sp, #8]
 8014444:	f8cb 7004 	str.w	r7, [fp, #4]
 8014448:	4413      	add	r3, r2
 801444a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801444c:	011b      	lsls	r3, r3, #4
 801444e:	4422      	add	r2, r4
 8014450:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8014454:	440b      	add	r3, r1
 8014456:	2e6c      	cmp	r6, #108	@ 0x6c
 8014458:	8dda      	ldrh	r2, [r3, #46]	@ 0x2e
 801445a:	f8a1 21b8 	strh.w	r2, [r1, #440]	@ 0x1b8
 801445e:	f8d3 c028 	ldr.w	ip, [r3, #40]	@ 0x28
 8014462:	f8c1 c1b4 	str.w	ip, [r1, #436]	@ 0x1b4
 8014466:	d066      	beq.n	8014536 <Argus_Pba_Apply+0x642>
 8014468:	366e      	adds	r6, #110	@ 0x6e
 801446a:	f040 824f 	bne.w	801490c <Argus_Pba_Apply+0xa18>
 801446e:	f8db c000 	ldr.w	ip, [fp]
 8014472:	e737      	b.n	80142e4 <Argus_Pba_Apply+0x3f0>
 8014474:	f025 0504 	bic.w	r5, r5, #4
 8014478:	4293      	cmp	r3, r2
 801447a:	f803 5c04 	strb.w	r5, [r3, #-4]
 801447e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8014482:	d1ce      	bne.n	8014422 <Argus_Pba_Apply+0x52e>
 8014484:	e7db      	b.n	801443e <Argus_Pba_Apply+0x54a>
 8014486:	9803      	ldr	r0, [sp, #12]
 8014488:	9c02      	ldr	r4, [sp, #8]
 801448a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801448e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014492:	0100      	lsls	r0, r0, #4
 8014494:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8014498:	4408      	add	r0, r1
 801449a:	f890 4030 	ldrb.w	r4, [r0, #48]	@ 0x30
 801449e:	f044 0408 	orr.w	r4, r4, #8
 80144a2:	f880 4030 	strb.w	r4, [r0, #48]	@ 0x30
 80144a6:	e57c      	b.n	8013fa2 <Argus_Pba_Apply+0xae>
 80144a8:	f04f 34ff 	mov.w	r4, #4294967295
 80144ac:	f014 0f01 	tst.w	r4, #1
 80144b0:	7a1d      	ldrb	r5, [r3, #8]
 80144b2:	f103 030c 	add.w	r3, r3, #12
 80144b6:	d028      	beq.n	801450a <Argus_Pba_Apply+0x616>
 80144b8:	f045 0504 	orr.w	r5, r5, #4
 80144bc:	429a      	cmp	r2, r3
 80144be:	f803 5c04 	strb.w	r5, [r3, #-4]
 80144c2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80144c6:	d1f1      	bne.n	80144ac <Argus_Pba_Apply+0x5b8>
 80144c8:	9a06      	ldr	r2, [sp, #24]
 80144ca:	f8db c000 	ldr.w	ip, [fp]
 80144ce:	2300      	movs	r3, #0
 80144d0:	f116 0f6e 	cmn.w	r6, #110	@ 0x6e
 80144d4:	f8cb 3004 	str.w	r3, [fp, #4]
 80144d8:	f402 3400 	and.w	r4, r2, #131072	@ 0x20000
 80144dc:	f000 8311 	beq.w	8014b02 <Argus_Pba_Apply+0xc0e>
 80144e0:	2e6c      	cmp	r6, #108	@ 0x6c
 80144e2:	f040 820d 	bne.w	8014900 <Argus_Pba_Apply+0xa0c>
 80144e6:	88fa      	ldrh	r2, [r7, #6]
 80144e8:	9205      	str	r2, [sp, #20]
 80144ea:	f8b1 21b8 	ldrh.w	r2, [r1, #440]	@ 0x1b8
 80144ee:	9301      	str	r3, [sp, #4]
 80144f0:	2c00      	cmp	r4, #0
 80144f2:	f43f aef7 	beq.w	80142e4 <Argus_Pba_Apply+0x3f0>
 80144f6:	9b08      	ldr	r3, [sp, #32]
 80144f8:	b90b      	cbnz	r3, 80144fe <Argus_Pba_Apply+0x60a>
 80144fa:	236c      	movs	r3, #108	@ 0x6c
 80144fc:	600b      	str	r3, [r1, #0]
 80144fe:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8014502:	f8c1 31b4 	str.w	r3, [r1, #436]	@ 0x1b4
 8014506:	469c      	mov	ip, r3
 8014508:	e6f1      	b.n	80142ee <Argus_Pba_Apply+0x3fa>
 801450a:	f025 0504 	bic.w	r5, r5, #4
 801450e:	4293      	cmp	r3, r2
 8014510:	f803 5c04 	strb.w	r5, [r3, #-4]
 8014514:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8014518:	d1c8      	bne.n	80144ac <Argus_Pba_Apply+0x5b8>
 801451a:	e7d5      	b.n	80144c8 <Argus_Pba_Apply+0x5d4>
 801451c:	88f8      	ldrh	r0, [r7, #6]
 801451e:	9005      	str	r0, [sp, #20]
 8014520:	f01a 0f20 	tst.w	sl, #32
 8014524:	f04f 0002 	mov.w	r0, #2
 8014528:	f43f af73 	beq.w	8014412 <Argus_Pba_Apply+0x51e>
 801452c:	266c      	movs	r6, #108	@ 0x6c
 801452e:	f04f 34ff 	mov.w	r4, #4294967295
 8014532:	2700      	movs	r7, #0
 8014534:	e775      	b.n	8014422 <Argus_Pba_Apply+0x52e>
 8014536:	2802      	cmp	r0, #2
 8014538:	f8db c000 	ldr.w	ip, [fp]
 801453c:	f43f aed2 	beq.w	80142e4 <Argus_Pba_Apply+0x3f0>
 8014540:	9b06      	ldr	r3, [sp, #24]
 8014542:	f403 3400 	and.w	r4, r3, #131072	@ 0x20000
 8014546:	e7d3      	b.n	80144f0 <Argus_Pba_Apply+0x5fc>
 8014548:	f8cd 901c 	str.w	r9, [sp, #28]
 801454c:	e581      	b.n	8014052 <Argus_Pba_Apply+0x15e>
 801454e:	f1b9 0f00 	cmp.w	r9, #0
 8014552:	d0e3      	beq.n	801451c <Argus_Pba_Apply+0x628>
 8014554:	f1b8 0f00 	cmp.w	r8, #0
 8014558:	f43f aeab 	beq.w	80142b2 <Argus_Pba_Apply+0x3be>
 801455c:	88f8      	ldrh	r0, [r7, #6]
 801455e:	9005      	str	r0, [sp, #20]
 8014560:	f01a 0f20 	tst.w	sl, #32
 8014564:	f04f 0002 	mov.w	r0, #2
 8014568:	f43f af53 	beq.w	8014412 <Argus_Pba_Apply+0x51e>
 801456c:	e7de      	b.n	801452c <Argus_Pba_Apply+0x638>
 801456e:	f1c6 0800 	rsb	r8, r6, #0
 8014572:	fa5f f488 	uxtb.w	r4, r8
 8014576:	fb09 f404 	mul.w	r4, r9, r4
 801457a:	0a20      	lsrs	r0, r4, #8
 801457c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8014580:	f3c4 14c0 	ubfx	r4, r4, #7, #1
 8014584:	fb09 0008 	mla	r0, r9, r8, r0
 8014588:	4420      	add	r0, r4
 801458a:	89fc      	ldrh	r4, [r7, #14]
 801458c:	eb06 14c4 	add.w	r4, r6, r4, lsl #7
 8014590:	4240      	negs	r0, r0
 8014592:	9407      	str	r4, [sp, #28]
 8014594:	e5fc      	b.n	8014190 <Argus_Pba_Apply+0x29c>
 8014596:	4275      	negs	r5, r6
 8014598:	4285      	cmp	r5, r0
 801459a:	bf28      	it	cs
 801459c:	f44f 3480 	movcs.w	r4, #65536	@ 0x10000
 80145a0:	f4ff ae47 	bcc.w	8014232 <Argus_Pba_Apply+0x33e>
 80145a4:	2d00      	cmp	r5, #0
 80145a6:	f2c0 81ff 	blt.w	80149a8 <Argus_Pba_Apply+0xab4>
 80145aa:	f04f 0c00 	mov.w	ip, #0
 80145ae:	b908      	cbnz	r0, 80145b4 <Argus_Pba_Apply+0x6c0>
 80145b0:	e228      	b.n	8014a04 <Argus_Pba_Apply+0xb10>
 80145b2:	b160      	cbz	r0, 80145ce <Argus_Pba_Apply+0x6da>
 80145b4:	4285      	cmp	r5, r0
 80145b6:	bf9c      	itt	ls
 80145b8:	1b40      	subls	r0, r0, r5
 80145ba:	ea4c 0c04 	orrls.w	ip, ip, r4
 80145be:	0864      	lsrs	r4, r4, #1
 80145c0:	ea4f 0040 	mov.w	r0, r0, lsl #1
 80145c4:	d1f5      	bne.n	80145b2 <Argus_Pba_Apply+0x6be>
 80145c6:	42a8      	cmp	r0, r5
 80145c8:	d301      	bcc.n	80145ce <Argus_Pba_Apply+0x6da>
 80145ca:	f10c 0c01 	add.w	ip, ip, #1
 80145ce:	ea97 0f06 	teq	r7, r6
 80145d2:	f100 821c 	bmi.w	8014a0e <Argus_Pba_Apply+0xb1a>
 80145d6:	f1bc 0f00 	cmp.w	ip, #0
 80145da:	bfb8      	it	lt
 80145dc:	f06f 4c00 	mvnlt.w	ip, #2147483648	@ 0x80000000
 80145e0:	e638      	b.n	8014254 <Argus_Pba_Apply+0x360>
 80145e2:	9804      	ldr	r0, [sp, #16]
 80145e4:	f010 0020 	ands.w	r0, r0, #32
 80145e8:	f47f aef7 	bne.w	80143da <Argus_Pba_Apply+0x4e6>
 80145ec:	f8db c000 	ldr.w	ip, [fp]
 80145f0:	f8b1 21b8 	ldrh.w	r2, [r1, #440]	@ 0x1b8
 80145f4:	9001      	str	r0, [sp, #4]
 80145f6:	e675      	b.n	80142e4 <Argus_Pba_Apply+0x3f0>
 80145f8:	fab5 f485 	clz	r4, r5
 80145fc:	f1c4 0726 	rsb	r7, r4, #38	@ 0x26
 8014600:	f04f 30ff 	mov.w	r0, #4294967295
 8014604:	40b8      	lsls	r0, r7
 8014606:	43c0      	mvns	r0, r0
 8014608:	9009      	str	r0, [sp, #36]	@ 0x24
 801460a:	2600      	movs	r6, #0
 801460c:	f1c4 0015 	rsb	r0, r4, #21
 8014610:	9407      	str	r4, [sp, #28]
 8014612:	f1c4 0825 	rsb	r8, r4, #37	@ 0x25
 8014616:	4635      	mov	r5, r6
 8014618:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801461a:	930a      	str	r3, [sp, #40]	@ 0x28
 801461c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8014620:	4681      	mov	r9, r0
 8014622:	e01b      	b.n	801465c <Argus_Pba_Apply+0x768>
 8014624:	2f10      	cmp	r7, #16
 8014626:	dd3d      	ble.n	80146a4 <Argus_Pba_Apply+0x7b0>
 8014628:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801462c:	fb00 fa0a 	mul.w	sl, r0, sl
 8014630:	fa2a fa09 	lsr.w	sl, sl, r9
 8014634:	b29b      	uxth	r3, r3
 8014636:	fb00 f303 	mul.w	r3, r0, r3
 801463a:	f00a 0b01 	and.w	fp, sl, #1
 801463e:	fa23 f308 	lsr.w	r3, r3, r8
 8014642:	eb0b 0a5a 	add.w	sl, fp, sl, lsr #1
 8014646:	eb0a 0a53 	add.w	sl, sl, r3, lsr #1
 801464a:	f003 0301 	and.w	r3, r3, #1
 801464e:	4453      	add	r3, sl
 8014650:	441d      	add	r5, r3
 8014652:	4406      	add	r6, r0
 8014654:	f10e 0e0c 	add.w	lr, lr, #12
 8014658:	45e6      	cmp	lr, ip
 801465a:	d03f      	beq.n	80146dc <Argus_Pba_Apply+0x7e8>
 801465c:	f81e 3c04 	ldrb.w	r3, [lr, #-4]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d1f7      	bne.n	8014654 <Argus_Pba_Apply+0x760>
 8014664:	f85e 3c0c 	ldr.w	r3, [lr, #-12]
 8014668:	f83e 0c06 	ldrh.w	r0, [lr, #-6]
 801466c:	2b00      	cmp	r3, #0
 801466e:	dad9      	bge.n	8014624 <Argus_Pba_Apply+0x730>
 8014670:	2f10      	cmp	r7, #16
 8014672:	f1c3 0300 	rsb	r3, r3, #0
 8014676:	dd23      	ble.n	80146c0 <Argus_Pba_Apply+0x7cc>
 8014678:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801467c:	fb00 fa0a 	mul.w	sl, r0, sl
 8014680:	fa2a fa09 	lsr.w	sl, sl, r9
 8014684:	b29b      	uxth	r3, r3
 8014686:	fb00 f303 	mul.w	r3, r0, r3
 801468a:	f00a 0b01 	and.w	fp, sl, #1
 801468e:	fa23 f308 	lsr.w	r3, r3, r8
 8014692:	eb0b 0a5a 	add.w	sl, fp, sl, lsr #1
 8014696:	eb0a 0a53 	add.w	sl, sl, r3, lsr #1
 801469a:	f003 0301 	and.w	r3, r3, #1
 801469e:	4453      	add	r3, sl
 80146a0:	425b      	negs	r3, r3
 80146a2:	e7d5      	b.n	8014650 <Argus_Pba_Apply+0x75c>
 80146a4:	ea03 0a04 	and.w	sl, r3, r4
 80146a8:	fb00 fa0a 	mul.w	sl, r0, sl
 80146ac:	fa2a fa08 	lsr.w	sl, sl, r8
 80146b0:	f00a 0b01 	and.w	fp, sl, #1
 80146b4:	40fb      	lsrs	r3, r7
 80146b6:	eb0b 0a5a 	add.w	sl, fp, sl, lsr #1
 80146ba:	fb00 a303 	mla	r3, r0, r3, sl
 80146be:	e7c7      	b.n	8014650 <Argus_Pba_Apply+0x75c>
 80146c0:	ea03 0a04 	and.w	sl, r3, r4
 80146c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80146c8:	fa2a fa08 	lsr.w	sl, sl, r8
 80146cc:	f00a 0b01 	and.w	fp, sl, #1
 80146d0:	40fb      	lsrs	r3, r7
 80146d2:	eb0b 0a5a 	add.w	sl, fp, sl, lsr #1
 80146d6:	fb00 a303 	mla	r3, r0, r3, sl
 80146da:	e7e1      	b.n	80146a0 <Argus_Pba_Apply+0x7ac>
 80146dc:	2f0f      	cmp	r7, #15
 80146de:	e9dd b309 	ldrd	fp, r3, [sp, #36]	@ 0x24
 80146e2:	f340 8118 	ble.w	8014916 <Argus_Pba_Apply+0xa22>
 80146e6:	2e00      	cmp	r6, #0
 80146e8:	f000 8185 	beq.w	80149f6 <Argus_Pba_Apply+0xb02>
 80146ec:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 80146f0:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 80146f4:	42b7      	cmp	r7, r6
 80146f6:	4630      	mov	r0, r6
 80146f8:	f240 81ed 	bls.w	8014ad6 <Argus_Pba_Apply+0xbe2>
 80146fc:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8014700:	4686      	mov	lr, r0
 8014702:	0040      	lsls	r0, r0, #1
 8014704:	4287      	cmp	r7, r0
 8014706:	46a4      	mov	ip, r4
 8014708:	ea4f 0444 	mov.w	r4, r4, lsl #1
 801470c:	d8f8      	bhi.n	8014700 <Argus_Pba_Apply+0x80c>
 801470e:	2c00      	cmp	r4, #0
 8014710:	f040 81a9 	bne.w	8014a66 <Argus_Pba_Apply+0xb72>
 8014714:	ea96 0f05 	teq	r6, r5
 8014718:	bf54      	ite	pl
 801471a:	f06f 4c00 	mvnpl.w	ip, #2147483648	@ 0x80000000
 801471e:	f04f 4c00 	movmi.w	ip, #2147483648	@ 0x80000000
 8014722:	9807      	ldr	r0, [sp, #28]
 8014724:	f1c0 0516 	rsb	r5, r0, #22
 8014728:	fa0c fc05 	lsl.w	ip, ip, r5
 801472c:	e592      	b.n	8014254 <Argus_Pba_Apply+0x360>
 801472e:	2f00      	cmp	r7, #0
 8014730:	bfac      	ite	ge
 8014732:	f06f 4c00 	mvnge.w	ip, #2147483648	@ 0x80000000
 8014736:	f04f 4c00 	movlt.w	ip, #2147483648	@ 0x80000000
 801473a:	e58b      	b.n	8014254 <Argus_Pba_Apply+0x360>
 801473c:	9803      	ldr	r0, [sp, #12]
 801473e:	9e02      	ldr	r6, [sp, #8]
 8014740:	f89b 8008 	ldrb.w	r8, [fp, #8]
 8014744:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
 8014748:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801474c:	eb06 0446 	add.w	r4, r6, r6, lsl #1
 8014750:	0100      	lsls	r0, r0, #4
 8014752:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8014756:	f89b 4009 	ldrb.w	r4, [fp, #9]
 801475a:	940f      	str	r4, [sp, #60]	@ 0x3c
 801475c:	9c02      	ldr	r4, [sp, #8]
 801475e:	f897 800c 	ldrb.w	r8, [r7, #12]
 8014762:	f8cd 804c 	str.w	r8, [sp, #76]	@ 0x4c
 8014766:	0064      	lsls	r4, r4, #1
 8014768:	940a      	str	r4, [sp, #40]	@ 0x28
 801476a:	9c03      	ldr	r4, [sp, #12]
 801476c:	f897 800d 	ldrb.w	r8, [r7, #13]
 8014770:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 8014774:	4408      	add	r0, r1
 8014776:	0064      	lsls	r4, r4, #1
 8014778:	f890 a030 	ldrb.w	sl, [r0, #48]	@ 0x30
 801477c:	9409      	str	r4, [sp, #36]	@ 0x24
 801477e:	7cf8      	ldrb	r0, [r7, #19]
 8014780:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8014782:	f8b7 8010 	ldrh.w	r8, [r7, #16]
 8014786:	f8b7 900e 	ldrh.w	r9, [r7, #14]
 801478a:	f8cd 805c 	str.w	r8, [sp, #92]	@ 0x5c
 801478e:	f02a 0604 	bic.w	r6, sl, #4
 8014792:	4284      	cmp	r4, r0
 8014794:	960d      	str	r6, [sp, #52]	@ 0x34
 8014796:	960c      	str	r6, [sp, #48]	@ 0x30
 8014798:	f0c0 80df 	bcc.w	801495a <Argus_Pba_Apply+0xa66>
 801479c:	2e00      	cmp	r6, #0
 801479e:	f040 810f 	bne.w	80149c0 <Argus_Pba_Apply+0xacc>
 80147a2:	9607      	str	r6, [sp, #28]
 80147a4:	9c03      	ldr	r4, [sp, #12]
 80147a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80147a8:	9e02      	ldr	r6, [sp, #8]
 80147aa:	4420      	add	r0, r4
 80147ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80147ae:	0100      	lsls	r0, r0, #4
 80147b0:	4434      	add	r4, r6
 80147b2:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80147b6:	4408      	add	r0, r1
 80147b8:	f06f 4800 	mvn.w	r8, #2147483648	@ 0x80000000
 80147bc:	6a86      	ldr	r6, [r0, #40]	@ 0x28
 80147be:	9615      	str	r6, [sp, #84]	@ 0x54
 80147c0:	f00a 0404 	and.w	r4, sl, #4
 80147c4:	4546      	cmp	r6, r8
 80147c6:	9411      	str	r4, [sp, #68]	@ 0x44
 80147c8:	f000 8149 	beq.w	8014a5e <Argus_Pba_Apply+0xb6a>
 80147cc:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80147ce:	f880 4030 	strb.w	r4, [r0, #48]	@ 0x30
 80147d2:	2000      	movs	r0, #0
 80147d4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80147d6:	2001      	movs	r0, #1
 80147d8:	9012      	str	r0, [sp, #72]	@ 0x48
 80147da:	4618      	mov	r0, r3
 80147dc:	2600      	movs	r6, #0
 80147de:	7a04      	ldrb	r4, [r0, #8]
 80147e0:	300c      	adds	r0, #12
 80147e2:	0764      	lsls	r4, r4, #29
 80147e4:	bf48      	it	mi
 80147e6:	3601      	addmi	r6, #1
 80147e8:	4282      	cmp	r2, r0
 80147ea:	d1f8      	bne.n	80147de <Argus_Pba_Apply+0x8ea>
 80147ec:	f1c6 0620 	rsb	r6, r6, #32
 80147f0:	b2f0      	uxtb	r0, r6
 80147f2:	9018      	str	r0, [sp, #96]	@ 0x60
 80147f4:	4676      	mov	r6, lr
 80147f6:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 80147fa:	f816 0c04 	ldrb.w	r0, [r6, #-4]
 80147fe:	0740      	lsls	r0, r0, #29
 8014800:	d404      	bmi.n	801480c <Argus_Pba_Apply+0x918>
 8014802:	f856 0c0c 	ldr.w	r0, [r6, #-12]
 8014806:	4284      	cmp	r4, r0
 8014808:	bfa8      	it	ge
 801480a:	4604      	movge	r4, r0
 801480c:	360c      	adds	r6, #12
 801480e:	45b4      	cmp	ip, r6
 8014810:	d1f3      	bne.n	80147fa <Argus_Pba_Apply+0x906>
 8014812:	46f0      	mov	r8, lr
 8014814:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 8014818:	f818 0c04 	ldrb.w	r0, [r8, #-4]
 801481c:	0740      	lsls	r0, r0, #29
 801481e:	d404      	bmi.n	801482a <Argus_Pba_Apply+0x936>
 8014820:	f858 0c0c 	ldr.w	r0, [r8, #-12]
 8014824:	4286      	cmp	r6, r0
 8014826:	bfb8      	it	lt
 8014828:	4606      	movlt	r6, r0
 801482a:	f108 080c 	add.w	r8, r8, #12
 801482e:	45e0      	cmp	r8, ip
 8014830:	d1f2      	bne.n	8014818 <Argus_Pba_Apply+0x924>
 8014832:	2c00      	cmp	r4, #0
 8014834:	9610      	str	r6, [sp, #64]	@ 0x40
 8014836:	f2c0 80a1 	blt.w	801497c <Argus_Pba_Apply+0xa88>
 801483a:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801483c:	ea4f 10c9 	mov.w	r0, r9, lsl #7
 8014840:	9019      	str	r0, [sp, #100]	@ 0x64
 8014842:	b2e0      	uxtb	r0, r4
 8014844:	fb00 f906 	mul.w	r9, r0, r6
 8014848:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801484a:	fb06 f800 	mul.w	r8, r6, r0
 801484e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8014850:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8014854:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8014858:	ea4f 2814 	mov.w	r8, r4, lsr #8
 801485c:	fb06 0008 	mla	r0, r6, r8, r0
 8014860:	f3c9 19c0 	ubfx	r9, r9, #7, #1
 8014864:	4481      	add	r9, r0
 8014866:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8014868:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801486a:	4581      	cmp	r9, r0
 801486c:	bfac      	ite	ge
 801486e:	44a1      	addge	r9, r4
 8014870:	eb04 0900 	addlt.w	r9, r4, r0
 8014874:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8014876:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 801487a:	0a00      	lsrs	r0, r0, #8
 801487c:	fb06 0808 	mla	r8, r6, r8, r0
 8014880:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8014882:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8014886:	eb08 0900 	add.w	r9, r8, r0
 801488a:	9e03      	ldr	r6, [sp, #12]
 801488c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801488e:	4430      	add	r0, r6
 8014890:	0100      	lsls	r0, r0, #4
 8014892:	900e      	str	r0, [sp, #56]	@ 0x38
 8014894:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8014896:	9802      	ldr	r0, [sp, #8]
 8014898:	eb06 0800 	add.w	r8, r6, r0
 801489c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801489e:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 80148a2:	4408      	add	r0, r1
 80148a4:	f880 a030 	strb.w	sl, [r0, #48]	@ 0x30
 80148a8:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80148aa:	2801      	cmp	r0, #1
 80148ac:	d95d      	bls.n	801496a <Argus_Pba_Apply+0xa76>
 80148ae:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80148b0:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80148b2:	4286      	cmp	r6, r0
 80148b4:	dc07      	bgt.n	80148c6 <Argus_Pba_Apply+0x9d2>
 80148b6:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80148b8:	2800      	cmp	r0, #0
 80148ba:	f47f ac2b 	bne.w	8014114 <Argus_Pba_Apply+0x220>
 80148be:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80148c0:	2800      	cmp	r0, #0
 80148c2:	f43f ac27 	beq.w	8014114 <Argus_Pba_Apply+0x220>
 80148c6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80148c8:	2800      	cmp	r0, #0
 80148ca:	f43f ac23 	beq.w	8014114 <Argus_Pba_Apply+0x220>
 80148ce:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80148d0:	01c0      	lsls	r0, r0, #7
 80148d2:	4548      	cmp	r0, r9
 80148d4:	bfac      	ite	ge
 80148d6:	1824      	addge	r4, r4, r0
 80148d8:	444c      	addlt	r4, r9
 80148da:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80148dc:	4284      	cmp	r4, r0
 80148de:	da01      	bge.n	80148e4 <Argus_Pba_Apply+0x9f0>
 80148e0:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80148e2:	b158      	cbz	r0, 80148fc <Argus_Pba_Apply+0xa08>
 80148e4:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80148e6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80148e8:	4284      	cmp	r4, r0
 80148ea:	d003      	beq.n	80148f4 <Argus_Pba_Apply+0xa00>
 80148ec:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80148ee:	2800      	cmp	r0, #0
 80148f0:	f43f ac10 	beq.w	8014114 <Argus_Pba_Apply+0x220>
 80148f4:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80148f6:	2800      	cmp	r0, #0
 80148f8:	f43f ac0c 	beq.w	8014114 <Argus_Pba_Apply+0x220>
 80148fc:	2002      	movs	r0, #2
 80148fe:	e580      	b.n	8014402 <Argus_Pba_Apply+0x50e>
 8014900:	88fb      	ldrh	r3, [r7, #6]
 8014902:	f8b1 21b8 	ldrh.w	r2, [r1, #440]	@ 0x1b8
 8014906:	f8d1 c1b4 	ldr.w	ip, [r1, #436]	@ 0x1b4
 801490a:	9305      	str	r3, [sp, #20]
 801490c:	1e03      	subs	r3, r0, #0
 801490e:	bf18      	it	ne
 8014910:	2301      	movne	r3, #1
 8014912:	9301      	str	r3, [sp, #4]
 8014914:	e4eb      	b.n	80142ee <Argus_Pba_Apply+0x3fa>
 8014916:	0277      	lsls	r7, r6, #9
 8014918:	d066      	beq.n	80149e8 <Argus_Pba_Apply+0xaf4>
 801491a:	ea85 76e5 	eor.w	r6, r5, r5, asr #31
 801491e:	2f00      	cmp	r7, #0
 8014920:	eba6 76e5 	sub.w	r6, r6, r5, asr #31
 8014924:	db76      	blt.n	8014a14 <Argus_Pba_Apply+0xb20>
 8014926:	42b7      	cmp	r7, r6
 8014928:	4638      	mov	r0, r7
 801492a:	f080 80cf 	bcs.w	8014acc <Argus_Pba_Apply+0xbd8>
 801492e:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8014932:	0040      	lsls	r0, r0, #1
 8014934:	42b0      	cmp	r0, r6
 8014936:	ea4f 0444 	mov.w	r4, r4, lsl #1
 801493a:	d3fa      	bcc.n	8014932 <Argus_Pba_Apply+0xa3e>
 801493c:	2c00      	cmp	r4, #0
 801493e:	d16f      	bne.n	8014a20 <Argus_Pba_Apply+0xb2c>
 8014940:	ea97 0f05 	teq	r7, r5
 8014944:	bf54      	ite	pl
 8014946:	f06f 4c00 	mvnpl.w	ip, #2147483648	@ 0x80000000
 801494a:	f04f 4c00 	movmi.w	ip, #2147483648	@ 0x80000000
 801494e:	9807      	ldr	r0, [sp, #28]
 8014950:	f1c0 051f 	rsb	r5, r0, #31
 8014954:	fa0c fc05 	lsl.w	ip, ip, r5
 8014958:	e47c      	b.n	8014254 <Argus_Pba_Apply+0x360>
 801495a:	f00a 0040 	and.w	r0, sl, #64	@ 0x40
 801495e:	bb66      	cbnz	r6, 80149ba <Argus_Pba_Apply+0xac6>
 8014960:	3800      	subs	r0, #0
 8014962:	bf18      	it	ne
 8014964:	2001      	movne	r0, #1
 8014966:	9007      	str	r0, [sp, #28]
 8014968:	e71c      	b.n	80147a4 <Argus_Pba_Apply+0x8b0>
 801496a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801496c:	2800      	cmp	r0, #0
 801496e:	f43f add7 	beq.w	8014520 <Argus_Pba_Apply+0x62c>
 8014972:	9807      	ldr	r0, [sp, #28]
 8014974:	2800      	cmp	r0, #0
 8014976:	d1bd      	bne.n	80148f4 <Argus_Pba_Apply+0xa00>
 8014978:	f7ff bbcc 	b.w	8014114 <Argus_Pba_Apply+0x220>
 801497c:	eb04 10c9 	add.w	r0, r4, r9, lsl #7
 8014980:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8014982:	9013      	str	r0, [sp, #76]	@ 0x4c
 8014984:	f1c4 0900 	rsb	r9, r4, #0
 8014988:	fa5f f089 	uxtb.w	r0, r9
 801498c:	fb06 f000 	mul.w	r0, r6, r0
 8014990:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8014994:	ea4f 2810 	mov.w	r8, r0, lsr #8
 8014998:	fb06 8809 	mla	r8, r6, r9, r8
 801499c:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 80149a0:	4440      	add	r0, r8
 80149a2:	f1c0 0900 	rsb	r9, r0, #0
 80149a6:	e770      	b.n	801488a <Argus_Pba_Apply+0x996>
 80149a8:	4285      	cmp	r5, r0
 80149aa:	d956      	bls.n	8014a5a <Argus_Pba_Apply+0xb66>
 80149ac:	0864      	lsrs	r4, r4, #1
 80149ae:	ea4f 0555 	mov.w	r5, r5, lsr #1
 80149b2:	f47f adfa 	bne.w	80145aa <Argus_Pba_Apply+0x6b6>
 80149b6:	46a4      	mov	ip, r4
 80149b8:	e605      	b.n	80145c6 <Argus_Pba_Apply+0x6d2>
 80149ba:	2800      	cmp	r0, #0
 80149bc:	f47f aef2 	bne.w	80147a4 <Argus_Pba_Apply+0x8b0>
 80149c0:	9c03      	ldr	r4, [sp, #12]
 80149c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80149c4:	9e02      	ldr	r6, [sp, #8]
 80149c6:	4420      	add	r0, r4
 80149c8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80149ca:	0100      	lsls	r0, r0, #4
 80149cc:	4434      	add	r4, r6
 80149ce:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80149d2:	4408      	add	r0, r1
 80149d4:	2400      	movs	r4, #0
 80149d6:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80149d8:	9015      	str	r0, [sp, #84]	@ 0x54
 80149da:	f00a 0004 	and.w	r0, sl, #4
 80149de:	9011      	str	r0, [sp, #68]	@ 0x44
 80149e0:	9407      	str	r4, [sp, #28]
 80149e2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80149e4:	9412      	str	r4, [sp, #72]	@ 0x48
 80149e6:	e6f8      	b.n	80147da <Argus_Pba_Apply+0x8e6>
 80149e8:	2d00      	cmp	r5, #0
 80149ea:	bfac      	ite	ge
 80149ec:	f06f 4c00 	mvnge.w	ip, #2147483648	@ 0x80000000
 80149f0:	f04f 4c00 	movlt.w	ip, #2147483648	@ 0x80000000
 80149f4:	e7ab      	b.n	801494e <Argus_Pba_Apply+0xa5a>
 80149f6:	2d00      	cmp	r5, #0
 80149f8:	bfac      	ite	ge
 80149fa:	f06f 4c00 	mvnge.w	ip, #2147483648	@ 0x80000000
 80149fe:	f04f 4c00 	movlt.w	ip, #2147483648	@ 0x80000000
 8014a02:	e68e      	b.n	8014722 <Argus_Pba_Apply+0x82e>
 8014a04:	ea97 0f06 	teq	r7, r6
 8014a08:	4684      	mov	ip, r0
 8014a0a:	f57f ac23 	bpl.w	8014254 <Argus_Pba_Apply+0x360>
 8014a0e:	f1cc 0c00 	rsb	ip, ip, #0
 8014a12:	e41f      	b.n	8014254 <Argus_Pba_Apply+0x360>
 8014a14:	4278      	negs	r0, r7
 8014a16:	42b0      	cmp	r0, r6
 8014a18:	bf28      	it	cs
 8014a1a:	f44f 3480 	movcs.w	r4, #65536	@ 0x10000
 8014a1e:	d386      	bcc.n	801492e <Argus_Pba_Apply+0xa3a>
 8014a20:	2800      	cmp	r0, #0
 8014a22:	db4b      	blt.n	8014abc <Argus_Pba_Apply+0xbc8>
 8014a24:	f04f 0c00 	mov.w	ip, #0
 8014a28:	b90e      	cbnz	r6, 8014a2e <Argus_Pba_Apply+0xb3a>
 8014a2a:	e060      	b.n	8014aee <Argus_Pba_Apply+0xbfa>
 8014a2c:	b166      	cbz	r6, 8014a48 <Argus_Pba_Apply+0xb54>
 8014a2e:	4286      	cmp	r6, r0
 8014a30:	bf24      	itt	cs
 8014a32:	1a36      	subcs	r6, r6, r0
 8014a34:	ea4c 0c04 	orrcs.w	ip, ip, r4
 8014a38:	0864      	lsrs	r4, r4, #1
 8014a3a:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8014a3e:	d1f5      	bne.n	8014a2c <Argus_Pba_Apply+0xb38>
 8014a40:	42b0      	cmp	r0, r6
 8014a42:	d801      	bhi.n	8014a48 <Argus_Pba_Apply+0xb54>
 8014a44:	f10c 0c01 	add.w	ip, ip, #1
 8014a48:	ea97 0f05 	teq	r7, r5
 8014a4c:	d454      	bmi.n	8014af8 <Argus_Pba_Apply+0xc04>
 8014a4e:	f1bc 0f00 	cmp.w	ip, #0
 8014a52:	bfb8      	it	lt
 8014a54:	f06f 4c00 	mvnlt.w	ip, #2147483648	@ 0x80000000
 8014a58:	e779      	b.n	801494e <Argus_Pba_Apply+0xa5a>
 8014a5a:	46a4      	mov	ip, r4
 8014a5c:	e5b7      	b.n	80145ce <Argus_Pba_Apply+0x6da>
 8014a5e:	2001      	movs	r0, #1
 8014a60:	940f      	str	r4, [sp, #60]	@ 0x3c
 8014a62:	9012      	str	r0, [sp, #72]	@ 0x48
 8014a64:	e6b9      	b.n	80147da <Argus_Pba_Apply+0x8e6>
 8014a66:	2800      	cmp	r0, #0
 8014a68:	da06      	bge.n	8014a78 <Argus_Pba_Apply+0xb84>
 8014a6a:	4287      	cmp	r7, r0
 8014a6c:	d031      	beq.n	8014ad2 <Argus_Pba_Apply+0xbde>
 8014a6e:	f03c 4400 	bics.w	r4, ip, #2147483648	@ 0x80000000
 8014a72:	f02e 4000 	bic.w	r0, lr, #2147483648	@ 0x80000000
 8014a76:	d04b      	beq.n	8014b10 <Argus_Pba_Apply+0xc1c>
 8014a78:	f04f 0c00 	mov.w	ip, #0
 8014a7c:	e000      	b.n	8014a80 <Argus_Pba_Apply+0xb8c>
 8014a7e:	b167      	cbz	r7, 8014a9a <Argus_Pba_Apply+0xba6>
 8014a80:	4287      	cmp	r7, r0
 8014a82:	bf24      	itt	cs
 8014a84:	1a3f      	subcs	r7, r7, r0
 8014a86:	ea4c 0c04 	orrcs.w	ip, ip, r4
 8014a8a:	0864      	lsrs	r4, r4, #1
 8014a8c:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8014a90:	d1f5      	bne.n	8014a7e <Argus_Pba_Apply+0xb8a>
 8014a92:	42b8      	cmp	r0, r7
 8014a94:	d801      	bhi.n	8014a9a <Argus_Pba_Apply+0xba6>
 8014a96:	f10c 0c01 	add.w	ip, ip, #1
 8014a9a:	ea96 0f05 	teq	r6, r5
 8014a9e:	d423      	bmi.n	8014ae8 <Argus_Pba_Apply+0xbf4>
 8014aa0:	f1bc 0f00 	cmp.w	ip, #0
 8014aa4:	bfb8      	it	lt
 8014aa6:	f06f 4c00 	mvnlt.w	ip, #2147483648	@ 0x80000000
 8014aaa:	e63a      	b.n	8014722 <Argus_Pba_Apply+0x82e>
 8014aac:	f04f 34ff 	mov.w	r4, #4294967295
 8014ab0:	f06f 066d 	mvn.w	r6, #109	@ 0x6d
 8014ab4:	e4b5      	b.n	8014422 <Argus_Pba_Apply+0x52e>
 8014ab6:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8014aba:	e576      	b.n	80145aa <Argus_Pba_Apply+0x6b6>
 8014abc:	42b0      	cmp	r0, r6
 8014abe:	d91e      	bls.n	8014afe <Argus_Pba_Apply+0xc0a>
 8014ac0:	0864      	lsrs	r4, r4, #1
 8014ac2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8014ac6:	d1ad      	bne.n	8014a24 <Argus_Pba_Apply+0xb30>
 8014ac8:	46a4      	mov	ip, r4
 8014aca:	e7b9      	b.n	8014a40 <Argus_Pba_Apply+0xb4c>
 8014acc:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8014ad0:	e7a8      	b.n	8014a24 <Argus_Pba_Apply+0xb30>
 8014ad2:	46a4      	mov	ip, r4
 8014ad4:	e7e1      	b.n	8014a9a <Argus_Pba_Apply+0xba6>
 8014ad6:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8014ada:	2f00      	cmp	r7, #0
 8014adc:	d1cc      	bne.n	8014a78 <Argus_Pba_Apply+0xb84>
 8014ade:	ea96 0f05 	teq	r6, r5
 8014ae2:	46bc      	mov	ip, r7
 8014ae4:	f57f ae1d 	bpl.w	8014722 <Argus_Pba_Apply+0x82e>
 8014ae8:	f1cc 0c00 	rsb	ip, ip, #0
 8014aec:	e619      	b.n	8014722 <Argus_Pba_Apply+0x82e>
 8014aee:	ea97 0f05 	teq	r7, r5
 8014af2:	46b4      	mov	ip, r6
 8014af4:	f57f af2b 	bpl.w	801494e <Argus_Pba_Apply+0xa5a>
 8014af8:	f1cc 0c00 	rsb	ip, ip, #0
 8014afc:	e727      	b.n	801494e <Argus_Pba_Apply+0xa5a>
 8014afe:	46a4      	mov	ip, r4
 8014b00:	e7a2      	b.n	8014a48 <Argus_Pba_Apply+0xb54>
 8014b02:	88fa      	ldrh	r2, [r7, #6]
 8014b04:	9205      	str	r2, [sp, #20]
 8014b06:	9301      	str	r3, [sp, #4]
 8014b08:	f8b1 21b8 	ldrh.w	r2, [r1, #440]	@ 0x1b8
 8014b0c:	f7ff bbea 	b.w	80142e4 <Argus_Pba_Apply+0x3f0>
 8014b10:	46a4      	mov	ip, r4
 8014b12:	e7be      	b.n	8014a92 <Argus_Pba_Apply+0xb9e>

08014b14 <Argus_Pba_ApplyPreFilter>:
 8014b14:	68c3      	ldr	r3, [r0, #12]
 8014b16:	f501 70d4 	add.w	r0, r1, #424	@ 0x1a8
 8014b1a:	699a      	ldr	r2, [r3, #24]
 8014b1c:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 8014b20:	f012 0f01 	tst.w	r2, #1
 8014b24:	7a19      	ldrb	r1, [r3, #8]
 8014b26:	f103 030c 	add.w	r3, r3, #12
 8014b2a:	d008      	beq.n	8014b3e <Argus_Pba_ApplyPreFilter+0x2a>
 8014b2c:	f041 0110 	orr.w	r1, r1, #16
 8014b30:	4283      	cmp	r3, r0
 8014b32:	f803 1c04 	strb.w	r1, [r3, #-4]
 8014b36:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8014b3a:	d1f1      	bne.n	8014b20 <Argus_Pba_ApplyPreFilter+0xc>
 8014b3c:	4770      	bx	lr
 8014b3e:	f021 0110 	bic.w	r1, r1, #16
 8014b42:	4283      	cmp	r3, r0
 8014b44:	f803 1c04 	strb.w	r1, [r3, #-4]
 8014b48:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8014b4c:	d1e8      	bne.n	8014b20 <Argus_Pba_ApplyPreFilter+0xc>
 8014b4e:	4770      	bx	lr

08014b50 <Argus_Eval_Trapezoidal>:
 8014b50:	684a      	ldr	r2, [r1, #4]
 8014b52:	2a00      	cmp	r2, #0
 8014b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b56:	dd41      	ble.n	8014bdc <Argus_Eval_Trapezoidal+0x8c>
 8014b58:	680c      	ldr	r4, [r1, #0]
 8014b5a:	2c00      	cmp	r4, #0
 8014b5c:	db2a      	blt.n	8014bb4 <Argus_Eval_Trapezoidal+0x64>
 8014b5e:	42a2      	cmp	r2, r4
 8014b60:	4616      	mov	r6, r2
 8014b62:	bfb8      	it	lt
 8014b64:	4626      	movlt	r6, r4
 8014b66:	4635      	mov	r5, r6
 8014b68:	1aa4      	subs	r4, r4, r2
 8014b6a:	f44f 3740 	mov.w	r7, #196608	@ 0x30000
 8014b6e:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
 8014b72:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 8014b76:	428d      	cmp	r5, r1
 8014b78:	f080 8087 	bcs.w	8014c8a <Argus_Eval_Trapezoidal+0x13a>
 8014b7c:	462a      	mov	r2, r5
 8014b7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8014b82:	4696      	mov	lr, r2
 8014b84:	0052      	lsls	r2, r2, #1
 8014b86:	428a      	cmp	r2, r1
 8014b88:	469c      	mov	ip, r3
 8014b8a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014b8e:	d3f8      	bcc.n	8014b82 <Argus_Eval_Trapezoidal+0x32>
 8014b90:	bb8b      	cbnz	r3, 8014bf6 <Argus_Eval_Trapezoidal+0xa6>
 8014b92:	ea94 0f06 	teq	r4, r6
 8014b96:	f100 8082 	bmi.w	8014c9e <Argus_Eval_Trapezoidal+0x14e>
 8014b9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014b9e:	f3c5 23c0 	ubfx	r3, r5, #11, #1
 8014ba2:	eb13 3315 	adds.w	r3, r3, r5, lsr #12
 8014ba6:	d10e      	bne.n	8014bc6 <Argus_Eval_Trapezoidal+0x76>
 8014ba8:	7a02      	ldrb	r2, [r0, #8]
 8014baa:	6043      	str	r3, [r0, #4]
 8014bac:	f042 0308 	orr.w	r3, r2, #8
 8014bb0:	7203      	strb	r3, [r0, #8]
 8014bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014bb4:	4266      	negs	r6, r4
 8014bb6:	4296      	cmp	r6, r2
 8014bb8:	bfb8      	it	lt
 8014bba:	4616      	movlt	r6, r2
 8014bbc:	4635      	mov	r5, r6
 8014bbe:	4414      	add	r4, r2
 8014bc0:	f44f 3780 	mov.w	r7, #65536	@ 0x10000
 8014bc4:	e7d3      	b.n	8014b6e <Argus_Eval_Trapezoidal+0x1e>
 8014bc6:	f64f 71f0 	movw	r1, #65520	@ 0xfff0
 8014bca:	428b      	cmp	r3, r1
 8014bcc:	d946      	bls.n	8014c5c <Argus_Eval_Trapezoidal+0x10c>
 8014bce:	7a03      	ldrb	r3, [r0, #8]
 8014bd0:	8082      	strh	r2, [r0, #4]
 8014bd2:	f043 0302 	orr.w	r3, r3, #2
 8014bd6:	80c1      	strh	r1, [r0, #6]
 8014bd8:	7203      	strb	r3, [r0, #8]
 8014bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014bdc:	680b      	ldr	r3, [r1, #0]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	dd3f      	ble.n	8014c62 <Argus_Eval_Trapezoidal+0x112>
 8014be2:	4252      	negs	r2, r2
 8014be4:	4293      	cmp	r3, r2
 8014be6:	461e      	mov	r6, r3
 8014be8:	bfb8      	it	lt
 8014bea:	4616      	movlt	r6, r2
 8014bec:	4635      	mov	r5, r6
 8014bee:	1ad4      	subs	r4, r2, r3
 8014bf0:	f44f 27a0 	mov.w	r7, #327680	@ 0x50000
 8014bf4:	e7bb      	b.n	8014b6e <Argus_Eval_Trapezoidal+0x1e>
 8014bf6:	2a00      	cmp	r2, #0
 8014bf8:	da05      	bge.n	8014c06 <Argus_Eval_Trapezoidal+0xb6>
 8014bfa:	428a      	cmp	r2, r1
 8014bfc:	d04b      	beq.n	8014c96 <Argus_Eval_Trapezoidal+0x146>
 8014bfe:	f03c 4300 	bics.w	r3, ip, #2147483648	@ 0x80000000
 8014c02:	4672      	mov	r2, lr
 8014c04:	d049      	beq.n	8014c9a <Argus_Eval_Trapezoidal+0x14a>
 8014c06:	f04f 0c00 	mov.w	ip, #0
 8014c0a:	e000      	b.n	8014c0e <Argus_Eval_Trapezoidal+0xbe>
 8014c0c:	b161      	cbz	r1, 8014c28 <Argus_Eval_Trapezoidal+0xd8>
 8014c0e:	4291      	cmp	r1, r2
 8014c10:	bf24      	itt	cs
 8014c12:	1a89      	subcs	r1, r1, r2
 8014c14:	ea4c 0c03 	orrcs.w	ip, ip, r3
 8014c18:	085b      	lsrs	r3, r3, #1
 8014c1a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014c1e:	d1f5      	bne.n	8014c0c <Argus_Eval_Trapezoidal+0xbc>
 8014c20:	428a      	cmp	r2, r1
 8014c22:	d801      	bhi.n	8014c28 <Argus_Eval_Trapezoidal+0xd8>
 8014c24:	f10c 0c01 	add.w	ip, ip, #1
 8014c28:	ea94 0f06 	teq	r4, r6
 8014c2c:	d40c      	bmi.n	8014c48 <Argus_Eval_Trapezoidal+0xf8>
 8014c2e:	f1bc 0f00 	cmp.w	ip, #0
 8014c32:	dbb2      	blt.n	8014b9a <Argus_Eval_Trapezoidal+0x4a>
 8014c34:	4467      	add	r7, ip
 8014c36:	f3c7 0380 	ubfx	r3, r7, #2, #1
 8014c3a:	eb03 02d7 	add.w	r2, r3, r7, lsr #3
 8014c3e:	e7ae      	b.n	8014b9e <Argus_Eval_Trapezoidal+0x4e>
 8014c40:	ea94 0f06 	teq	r4, r6
 8014c44:	d5f7      	bpl.n	8014c36 <Argus_Eval_Trapezoidal+0xe6>
 8014c46:	468c      	mov	ip, r1
 8014c48:	ebb7 070c 	subs.w	r7, r7, ip
 8014c4c:	d5f3      	bpl.n	8014c36 <Argus_Eval_Trapezoidal+0xe6>
 8014c4e:	427f      	negs	r7, r7
 8014c50:	f3c7 0280 	ubfx	r2, r7, #2, #1
 8014c54:	eb02 02d7 	add.w	r2, r2, r7, lsr #3
 8014c58:	4252      	negs	r2, r2
 8014c5a:	e7a0      	b.n	8014b9e <Argus_Eval_Trapezoidal+0x4e>
 8014c5c:	8082      	strh	r2, [r0, #4]
 8014c5e:	80c3      	strh	r3, [r0, #6]
 8014c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c62:	429a      	cmp	r2, r3
 8014c64:	da05      	bge.n	8014c72 <Argus_Eval_Trapezoidal+0x122>
 8014c66:	4256      	negs	r6, r2
 8014c68:	4635      	mov	r5, r6
 8014c6a:	1ad4      	subs	r4, r2, r3
 8014c6c:	f44f 27e0 	mov.w	r7, #458752	@ 0x70000
 8014c70:	e77d      	b.n	8014b6e <Argus_Eval_Trapezoidal+0x1e>
 8014c72:	425d      	negs	r5, r3
 8014c74:	462e      	mov	r6, r5
 8014c76:	1ad4      	subs	r4, r2, r3
 8014c78:	b9cb      	cbnz	r3, 8014cae <Argus_Eval_Trapezoidal+0x15e>
 8014c7a:	4a0e      	ldr	r2, [pc, #56]	@ (8014cb4 <Argus_Eval_Trapezoidal+0x164>)
 8014c7c:	490e      	ldr	r1, [pc, #56]	@ (8014cb8 <Argus_Eval_Trapezoidal+0x168>)
 8014c7e:	461d      	mov	r5, r3
 8014c80:	ea12 0224 	ands.w	r2, r2, r4, asr #32
 8014c84:	bf38      	it	cc
 8014c86:	460a      	movcc	r2, r1
 8014c88:	e789      	b.n	8014b9e <Argus_Eval_Trapezoidal+0x4e>
 8014c8a:	2900      	cmp	r1, #0
 8014c8c:	d0d8      	beq.n	8014c40 <Argus_Eval_Trapezoidal+0xf0>
 8014c8e:	462a      	mov	r2, r5
 8014c90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8014c94:	e7b7      	b.n	8014c06 <Argus_Eval_Trapezoidal+0xb6>
 8014c96:	469c      	mov	ip, r3
 8014c98:	e7c6      	b.n	8014c28 <Argus_Eval_Trapezoidal+0xd8>
 8014c9a:	469c      	mov	ip, r3
 8014c9c:	e7c0      	b.n	8014c20 <Argus_Eval_Trapezoidal+0xd0>
 8014c9e:	f1c7 4700 	rsb	r7, r7, #2147483648	@ 0x80000000
 8014ca2:	f3c7 0280 	ubfx	r2, r7, #2, #1
 8014ca6:	eb02 02d7 	add.w	r2, r2, r7, lsr #3
 8014caa:	4252      	negs	r2, r2
 8014cac:	e777      	b.n	8014b9e <Argus_Eval_Trapezoidal+0x4e>
 8014cae:	f44f 27e0 	mov.w	r7, #458752	@ 0x70000
 8014cb2:	e75c      	b.n	8014b6e <Argus_Eval_Trapezoidal+0x1e>
 8014cb4:	f000e000 	.word	0xf000e000
 8014cb8:	1000e000 	.word	0x1000e000

08014cbc <Argus_Eval_Triangular>:
 8014cbc:	e9d1 2300 	ldrd	r2, r3, [r1]
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	b530      	push	{r4, r5, lr}
 8014cc4:	dd6f      	ble.n	8014da6 <Argus_Eval_Triangular+0xea>
 8014cc6:	2a00      	cmp	r2, #0
 8014cc8:	db29      	blt.n	8014d1e <Argus_Eval_Triangular+0x62>
 8014cca:	eb02 0c03 	add.w	ip, r2, r3
 8014cce:	eba2 0e03 	sub.w	lr, r2, r3
 8014cd2:	f44f 3540 	mov.w	r5, #196608	@ 0x30000
 8014cd6:	ea8e 71ee 	eor.w	r1, lr, lr, asr #31
 8014cda:	f1bc 0f00 	cmp.w	ip, #0
 8014cde:	eba1 71ee 	sub.w	r1, r1, lr, asr #31
 8014ce2:	db29      	blt.n	8014d38 <Argus_Eval_Triangular+0x7c>
 8014ce4:	4561      	cmp	r1, ip
 8014ce6:	4663      	mov	r3, ip
 8014ce8:	f240 808b 	bls.w	8014e02 <Argus_Eval_Triangular+0x146>
 8014cec:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8014cf0:	005b      	lsls	r3, r3, #1
 8014cf2:	428b      	cmp	r3, r1
 8014cf4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8014cf8:	d3fa      	bcc.n	8014cf0 <Argus_Eval_Triangular+0x34>
 8014cfa:	bb22      	cbnz	r2, 8014d46 <Argus_Eval_Triangular+0x8a>
 8014cfc:	ea9e 0f0c 	teq	lr, ip
 8014d00:	f100 8082 	bmi.w	8014e08 <Argus_Eval_Triangular+0x14c>
 8014d04:	f04f 5480 	mov.w	r4, #268435456	@ 0x10000000
 8014d08:	f3cc 3300 	ubfx	r3, ip, #12, #1
 8014d0c:	eb13 335c 	adds.w	r3, r3, ip, lsr #13
 8014d10:	d13e      	bne.n	8014d90 <Argus_Eval_Triangular+0xd4>
 8014d12:	7a02      	ldrb	r2, [r0, #8]
 8014d14:	6043      	str	r3, [r0, #4]
 8014d16:	f042 0308 	orr.w	r3, r2, #8
 8014d1a:	7203      	strb	r3, [r0, #8]
 8014d1c:	bd30      	pop	{r4, r5, pc}
 8014d1e:	eb03 0e02 	add.w	lr, r3, r2
 8014d22:	eba3 0c02 	sub.w	ip, r3, r2
 8014d26:	ea8e 71ee 	eor.w	r1, lr, lr, asr #31
 8014d2a:	f1bc 0f00 	cmp.w	ip, #0
 8014d2e:	f44f 3580 	mov.w	r5, #65536	@ 0x10000
 8014d32:	eba1 71ee 	sub.w	r1, r1, lr, asr #31
 8014d36:	dad5      	bge.n	8014ce4 <Argus_Eval_Triangular+0x28>
 8014d38:	f1cc 0300 	rsb	r3, ip, #0
 8014d3c:	428b      	cmp	r3, r1
 8014d3e:	bf28      	it	cs
 8014d40:	f44f 3280 	movcs.w	r2, #65536	@ 0x10000
 8014d44:	d3d2      	bcc.n	8014cec <Argus_Eval_Triangular+0x30>
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	db49      	blt.n	8014dde <Argus_Eval_Triangular+0x122>
 8014d4a:	460c      	mov	r4, r1
 8014d4c:	b151      	cbz	r1, 8014d64 <Argus_Eval_Triangular+0xa8>
 8014d4e:	2400      	movs	r4, #0
 8014d50:	e000      	b.n	8014d54 <Argus_Eval_Triangular+0x98>
 8014d52:	b139      	cbz	r1, 8014d64 <Argus_Eval_Triangular+0xa8>
 8014d54:	4299      	cmp	r1, r3
 8014d56:	bf24      	itt	cs
 8014d58:	1ac9      	subcs	r1, r1, r3
 8014d5a:	4314      	orrcs	r4, r2
 8014d5c:	0852      	lsrs	r2, r2, #1
 8014d5e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014d62:	d1f6      	bne.n	8014d52 <Argus_Eval_Triangular+0x96>
 8014d64:	4299      	cmp	r1, r3
 8014d66:	d300      	bcc.n	8014d6a <Argus_Eval_Triangular+0xae>
 8014d68:	3401      	adds	r4, #1
 8014d6a:	ea9e 0f0c 	teq	lr, ip
 8014d6e:	d442      	bmi.n	8014df6 <Argus_Eval_Triangular+0x13a>
 8014d70:	2c00      	cmp	r4, #0
 8014d72:	dbc7      	blt.n	8014d04 <Argus_Eval_Triangular+0x48>
 8014d74:	1964      	adds	r4, r4, r5
 8014d76:	d54c      	bpl.n	8014e12 <Argus_Eval_Triangular+0x156>
 8014d78:	4264      	negs	r4, r4
 8014d7a:	f3c4 0380 	ubfx	r3, r4, #2, #1
 8014d7e:	eb03 04d4 	add.w	r4, r3, r4, lsr #3
 8014d82:	f3cc 3300 	ubfx	r3, ip, #12, #1
 8014d86:	eb13 335c 	adds.w	r3, r3, ip, lsr #13
 8014d8a:	f1c4 0400 	rsb	r4, r4, #0
 8014d8e:	d0c0      	beq.n	8014d12 <Argus_Eval_Triangular+0x56>
 8014d90:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8014d94:	4293      	cmp	r3, r2
 8014d96:	d91f      	bls.n	8014dd8 <Argus_Eval_Triangular+0x11c>
 8014d98:	7a03      	ldrb	r3, [r0, #8]
 8014d9a:	8084      	strh	r4, [r0, #4]
 8014d9c:	f043 0302 	orr.w	r3, r3, #2
 8014da0:	80c2      	strh	r2, [r0, #6]
 8014da2:	7203      	strb	r3, [r0, #8]
 8014da4:	bd30      	pop	{r4, r5, pc}
 8014da6:	2a00      	cmp	r2, #0
 8014da8:	dd08      	ble.n	8014dbc <Argus_Eval_Triangular+0x100>
 8014daa:	f1c3 0e00 	rsb	lr, r3, #0
 8014dae:	eba2 0c03 	sub.w	ip, r2, r3
 8014db2:	ebae 0e02 	sub.w	lr, lr, r2
 8014db6:	f44f 25a0 	mov.w	r5, #327680	@ 0x50000
 8014dba:	e78c      	b.n	8014cd6 <Argus_Eval_Triangular+0x1a>
 8014dbc:	f1c3 0c00 	rsb	ip, r3, #0
 8014dc0:	ebbc 0c02 	subs.w	ip, ip, r2
 8014dc4:	eba3 0e02 	sub.w	lr, r3, r2
 8014dc8:	d128      	bne.n	8014e1c <Argus_Eval_Triangular+0x160>
 8014dca:	4c16      	ldr	r4, [pc, #88]	@ (8014e24 <Argus_Eval_Triangular+0x168>)
 8014dcc:	4b16      	ldr	r3, [pc, #88]	@ (8014e28 <Argus_Eval_Triangular+0x16c>)
 8014dce:	ea14 042e 	ands.w	r4, r4, lr, asr #32
 8014dd2:	bf38      	it	cc
 8014dd4:	461c      	movcc	r4, r3
 8014dd6:	e797      	b.n	8014d08 <Argus_Eval_Triangular+0x4c>
 8014dd8:	8084      	strh	r4, [r0, #4]
 8014dda:	80c3      	strh	r3, [r0, #6]
 8014ddc:	bd30      	pop	{r4, r5, pc}
 8014dde:	4299      	cmp	r1, r3
 8014de0:	d20b      	bcs.n	8014dfa <Argus_Eval_Triangular+0x13e>
 8014de2:	0852      	lsrs	r2, r2, #1
 8014de4:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8014de8:	d009      	beq.n	8014dfe <Argus_Eval_Triangular+0x142>
 8014dea:	2900      	cmp	r1, #0
 8014dec:	d1af      	bne.n	8014d4e <Argus_Eval_Triangular+0x92>
 8014dee:	ea9e 0f0c 	teq	lr, ip
 8014df2:	460c      	mov	r4, r1
 8014df4:	d5be      	bpl.n	8014d74 <Argus_Eval_Triangular+0xb8>
 8014df6:	4264      	negs	r4, r4
 8014df8:	e7bc      	b.n	8014d74 <Argus_Eval_Triangular+0xb8>
 8014dfa:	4614      	mov	r4, r2
 8014dfc:	e7b5      	b.n	8014d6a <Argus_Eval_Triangular+0xae>
 8014dfe:	4614      	mov	r4, r2
 8014e00:	e7b0      	b.n	8014d64 <Argus_Eval_Triangular+0xa8>
 8014e02:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8014e06:	e7a0      	b.n	8014d4a <Argus_Eval_Triangular+0x8e>
 8014e08:	f1c5 4400 	rsb	r4, r5, #2147483648	@ 0x80000000
 8014e0c:	08e4      	lsrs	r4, r4, #3
 8014e0e:	4264      	negs	r4, r4
 8014e10:	e77a      	b.n	8014d08 <Argus_Eval_Triangular+0x4c>
 8014e12:	f3c4 0380 	ubfx	r3, r4, #2, #1
 8014e16:	eb03 04d4 	add.w	r4, r3, r4, lsr #3
 8014e1a:	e775      	b.n	8014d08 <Argus_Eval_Triangular+0x4c>
 8014e1c:	f44f 25e0 	mov.w	r5, #458752	@ 0x70000
 8014e20:	e759      	b.n	8014cd6 <Argus_Eval_Triangular+0x1a>
 8014e22:	bf00      	nop
 8014e24:	f000e000 	.word	0xf000e000
 8014e28:	1000e000 	.word	0x1000e000

08014e2c <fp_div16.part.0>:
 8014e2c:	b410      	push	{r4}
 8014e2e:	2900      	cmp	r1, #0
 8014e30:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
 8014e34:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
 8014e38:	db14      	blt.n	8014e64 <fp_div16.part.0+0x38>
 8014e3a:	42a1      	cmp	r1, r4
 8014e3c:	460a      	mov	r2, r1
 8014e3e:	d248      	bcs.n	8014ed2 <fp_div16.part.0+0xa6>
 8014e40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8014e44:	0052      	lsls	r2, r2, #1
 8014e46:	42a2      	cmp	r2, r4
 8014e48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014e4c:	d3fa      	bcc.n	8014e44 <fp_div16.part.0+0x18>
 8014e4e:	b97b      	cbnz	r3, 8014e70 <fp_div16.part.0+0x44>
 8014e50:	ea90 0f01 	teq	r0, r1
 8014e54:	bf54      	ite	pl
 8014e56:	f06f 4000 	mvnpl.w	r0, #2147483648	@ 0x80000000
 8014e5a:	f04f 4000 	movmi.w	r0, #2147483648	@ 0x80000000
 8014e5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e62:	4770      	bx	lr
 8014e64:	424a      	negs	r2, r1
 8014e66:	42a2      	cmp	r2, r4
 8014e68:	bf28      	it	cs
 8014e6a:	f44f 3380 	movcs.w	r3, #65536	@ 0x10000
 8014e6e:	d3e7      	bcc.n	8014e40 <fp_div16.part.0+0x14>
 8014e70:	2a00      	cmp	r2, #0
 8014e72:	db1d      	blt.n	8014eb0 <fp_div16.part.0+0x84>
 8014e74:	f04f 0c00 	mov.w	ip, #0
 8014e78:	b90c      	cbnz	r4, 8014e7e <fp_div16.part.0+0x52>
 8014e7a:	e02d      	b.n	8014ed8 <fp_div16.part.0+0xac>
 8014e7c:	b164      	cbz	r4, 8014e98 <fp_div16.part.0+0x6c>
 8014e7e:	4294      	cmp	r4, r2
 8014e80:	bf24      	itt	cs
 8014e82:	1aa4      	subcs	r4, r4, r2
 8014e84:	ea4c 0c03 	orrcs.w	ip, ip, r3
 8014e88:	085b      	lsrs	r3, r3, #1
 8014e8a:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8014e8e:	d1f5      	bne.n	8014e7c <fp_div16.part.0+0x50>
 8014e90:	42a2      	cmp	r2, r4
 8014e92:	d801      	bhi.n	8014e98 <fp_div16.part.0+0x6c>
 8014e94:	f10c 0c01 	add.w	ip, ip, #1
 8014e98:	ea90 0f01 	teq	r0, r1
 8014e9c:	d40e      	bmi.n	8014ebc <fp_div16.part.0+0x90>
 8014e9e:	f1bc 0f00 	cmp.w	ip, #0
 8014ea2:	bfac      	ite	ge
 8014ea4:	4660      	movge	r0, ip
 8014ea6:	f06f 4000 	mvnlt.w	r0, #2147483648	@ 0x80000000
 8014eaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014eae:	4770      	bx	lr
 8014eb0:	4294      	cmp	r4, r2
 8014eb2:	d308      	bcc.n	8014ec6 <fp_div16.part.0+0x9a>
 8014eb4:	ea90 0f01 	teq	r0, r1
 8014eb8:	469c      	mov	ip, r3
 8014eba:	d5f0      	bpl.n	8014e9e <fp_div16.part.0+0x72>
 8014ebc:	f1cc 0000 	rsb	r0, ip, #0
 8014ec0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ec4:	4770      	bx	lr
 8014ec6:	085b      	lsrs	r3, r3, #1
 8014ec8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8014ecc:	d1d2      	bne.n	8014e74 <fp_div16.part.0+0x48>
 8014ece:	469c      	mov	ip, r3
 8014ed0:	e7de      	b.n	8014e90 <fp_div16.part.0+0x64>
 8014ed2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8014ed6:	e7cd      	b.n	8014e74 <fp_div16.part.0+0x48>
 8014ed8:	4620      	mov	r0, r4
 8014eda:	e7c0      	b.n	8014e5e <fp_div16.part.0+0x32>
 8014edc:	0000      	movs	r0, r0
	...

08014ee0 <Argus_Dca_Init>:
 8014ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ee2:	460f      	mov	r7, r1
 8014ee4:	b083      	sub	sp, #12
 8014ee6:	4616      	mov	r6, r2
 8014ee8:	2100      	movs	r1, #0
 8014eea:	226c      	movs	r2, #108	@ 0x6c
 8014eec:	4604      	mov	r4, r0
 8014eee:	461d      	mov	r5, r3
 8014ef0:	f00e fc77 	bl	80237e2 <memset>
 8014ef4:	a10e      	add	r1, pc, #56	@ (adr r1, 8014f30 <Argus_Dca_Init+0x50>)
 8014ef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014efa:	e9cd 0100 	strd	r0, r1, [sp]
 8014efe:	4b0a      	ldr	r3, [pc, #40]	@ (8014f28 <Argus_Dca_Init+0x48>)
 8014f00:	f8c4 303f 	str.w	r3, [r4, #63]	@ 0x3f
 8014f04:	46ec      	mov	ip, sp
 8014f06:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8014f0a:	9b08      	ldr	r3, [sp, #32]
 8014f0c:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8014f0e:	4b07      	ldr	r3, [pc, #28]	@ (8014f2c <Argus_Dca_Init+0x4c>)
 8014f10:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014f12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014f16:	6667      	str	r7, [r4, #100]	@ 0x64
 8014f18:	66a6      	str	r6, [r4, #104]	@ 0x68
 8014f1a:	6625      	str	r5, [r4, #96]	@ 0x60
 8014f1c:	83a3      	strh	r3, [r4, #28]
 8014f1e:	6460      	str	r0, [r4, #68]	@ 0x44
 8014f20:	64a1      	str	r1, [r4, #72]	@ 0x48
 8014f22:	b003      	add	sp, #12
 8014f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f26:	bf00      	nop
 8014f28:	28221c0e 	.word	0x28221c0e
 8014f2c:	0001ffff 	.word	0x0001ffff
 8014f30:	d2a0b860 	.word	0xd2a0b860
 8014f34:	e920dde0 	.word	0xe920dde0

08014f38 <Argus_Dca_CheckCfg>:
 8014f38:	b508      	push	{r3, lr}
 8014f3a:	f990 2000 	ldrsb.w	r2, [r0]
 8014f3e:	1c53      	adds	r3, r2, #1
 8014f40:	b2db      	uxtb	r3, r3
 8014f42:	2b02      	cmp	r3, #2
 8014f44:	f200 8107 	bhi.w	8015156 <Argus_Dca_CheckCfg+0x21e>
 8014f48:	f891 c00a 	ldrb.w	ip, [r1, #10]
 8014f4c:	7a0b      	ldrb	r3, [r1, #8]
 8014f4e:	f1ac 0e02 	sub.w	lr, ip, #2
 8014f52:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8014f56:	f200 80f7 	bhi.w	8015148 <Argus_Dca_CheckCfg+0x210>
 8014f5a:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8014f5e:	029b      	lsls	r3, r3, #10
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d006      	beq.n	8014f72 <Argus_Dca_CheckCfg+0x3a>
 8014f64:	db02      	blt.n	8014f6c <Argus_Dca_CheckCfg+0x34>
 8014f66:	459c      	cmp	ip, r3
 8014f68:	d903      	bls.n	8014f72 <Argus_Dca_CheckCfg+0x3a>
 8014f6a:	e7fe      	b.n	8014f6a <Argus_Dca_CheckCfg+0x32>
 8014f6c:	425b      	negs	r3, r3
 8014f6e:	459c      	cmp	ip, r3
 8014f70:	d8fb      	bhi.n	8014f6a <Argus_Dca_CheckCfg+0x32>
 8014f72:	2a01      	cmp	r2, #1
 8014f74:	d026      	beq.n	8014fc4 <Argus_Dca_CheckCfg+0x8c>
 8014f76:	3201      	adds	r2, #1
 8014f78:	d001      	beq.n	8014f7e <Argus_Dca_CheckCfg+0x46>
 8014f7a:	2000      	movs	r0, #0
 8014f7c:	bd08      	pop	{r3, pc}
 8014f7e:	8983      	ldrh	r3, [r0, #12]
 8014f80:	2b40      	cmp	r3, #64	@ 0x40
 8014f82:	f200 808a 	bhi.w	801509a <Argus_Dca_CheckCfg+0x162>
 8014f86:	3b01      	subs	r3, #1
 8014f88:	b29b      	uxth	r3, r3
 8014f8a:	f64f 72bf 	movw	r2, #65471	@ 0xffbf
 8014f8e:	4293      	cmp	r3, r2
 8014f90:	f200 8110 	bhi.w	80151b4 <Argus_Dca_CheckCfg+0x27c>
 8014f94:	7ac3      	ldrb	r3, [r0, #11]
 8014f96:	2b02      	cmp	r3, #2
 8014f98:	f200 80b7 	bhi.w	801510a <Argus_Dca_CheckCfg+0x1d2>
 8014f9c:	7d03      	ldrb	r3, [r0, #20]
 8014f9e:	2b03      	cmp	r3, #3
 8014fa0:	f200 8120 	bhi.w	80151e4 <Argus_Dca_CheckCfg+0x2ac>
 8014fa4:	f891 308e 	ldrb.w	r3, [r1, #142]	@ 0x8e
 8014fa8:	2b02      	cmp	r3, #2
 8014faa:	f000 80a9 	beq.w	8015100 <Argus_Dca_CheckCfg+0x1c8>
 8014fae:	2b03      	cmp	r3, #3
 8014fb0:	f000 8094 	beq.w	80150dc <Argus_Dca_CheckCfg+0x1a4>
 8014fb4:	2b01      	cmp	r3, #1
 8014fb6:	d073      	beq.n	80150a0 <Argus_Dca_CheckCfg+0x168>
 8014fb8:	4894      	ldr	r0, [pc, #592]	@ (801520c <Argus_Dca_CheckCfg+0x2d4>)
 8014fba:	f7f8 ffa9 	bl	800df10 <print>
 8014fbe:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8014fc2:	bd08      	pop	{r3, pc}
 8014fc4:	7843      	ldrb	r3, [r0, #1]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	f000 80b2 	beq.w	8015130 <Argus_Dca_CheckCfg+0x1f8>
 8014fcc:	7882      	ldrb	r2, [r0, #2]
 8014fce:	4293      	cmp	r3, r2
 8014fd0:	f200 80ae 	bhi.w	8015130 <Argus_Dca_CheckCfg+0x1f8>
 8014fd4:	78c3      	ldrb	r3, [r0, #3]
 8014fd6:	429a      	cmp	r2, r3
 8014fd8:	f200 80aa 	bhi.w	8015130 <Argus_Dca_CheckCfg+0x1f8>
 8014fdc:	2b21      	cmp	r3, #33	@ 0x21
 8014fde:	f200 80a7 	bhi.w	8015130 <Argus_Dca_CheckCfg+0x1f8>
 8014fe2:	7a83      	ldrb	r3, [r0, #10]
 8014fe4:	1e5a      	subs	r2, r3, #1
 8014fe6:	2a01      	cmp	r2, #1
 8014fe8:	f200 80c2 	bhi.w	8015170 <Argus_Dca_CheckCfg+0x238>
 8014fec:	88c3      	ldrh	r3, [r0, #6]
 8014fee:	2b3f      	cmp	r3, #63	@ 0x3f
 8014ff0:	f240 80ff 	bls.w	80151f2 <Argus_Dca_CheckCfg+0x2ba>
 8014ff4:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014ff8:	4563      	cmp	r3, ip
 8014ffa:	f200 80ed 	bhi.w	80151d8 <Argus_Dca_CheckCfg+0x2a0>
 8014ffe:	8882      	ldrh	r2, [r0, #4]
 8015000:	4293      	cmp	r3, r2
 8015002:	f200 809b 	bhi.w	801513c <Argus_Dca_CheckCfg+0x204>
 8015006:	4594      	cmp	ip, r2
 8015008:	f0c0 8098 	bcc.w	801513c <Argus_Dca_CheckCfg+0x204>
 801500c:	89c3      	ldrh	r3, [r0, #14]
 801500e:	2b40      	cmp	r3, #64	@ 0x40
 8015010:	d902      	bls.n	8015018 <Argus_Dca_CheckCfg+0xe0>
 8015012:	069a      	lsls	r2, r3, #26
 8015014:	f040 8086 	bne.w	8015124 <Argus_Dca_CheckCfg+0x1ec>
 8015018:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 801501c:	f1bc 0f40 	cmp.w	ip, #64	@ 0x40
 8015020:	d902      	bls.n	8015028 <Argus_Dca_CheckCfg+0xf0>
 8015022:	f01c 0f3f 	tst.w	ip, #63	@ 0x3f
 8015026:	d177      	bne.n	8015118 <Argus_Dca_CheckCfg+0x1e0>
 8015028:	8a02      	ldrh	r2, [r0, #16]
 801502a:	2a40      	cmp	r2, #64	@ 0x40
 801502c:	d82c      	bhi.n	8015088 <Argus_Dca_CheckCfg+0x150>
 801502e:	2b00      	cmp	r3, #0
 8015030:	f000 80c6 	beq.w	80151c0 <Argus_Dca_CheckCfg+0x288>
 8015034:	f64f 7ec0 	movw	lr, #65472	@ 0xffc0
 8015038:	4572      	cmp	r2, lr
 801503a:	f200 80c7 	bhi.w	80151cc <Argus_Dca_CheckCfg+0x294>
 801503e:	4293      	cmp	r3, r2
 8015040:	f200 80de 	bhi.w	8015200 <Argus_Dca_CheckCfg+0x2c8>
 8015044:	4563      	cmp	r3, ip
 8015046:	f200 808d 	bhi.w	8015164 <Argus_Dca_CheckCfg+0x22c>
 801504a:	4594      	cmp	ip, r2
 801504c:	f200 808a 	bhi.w	8015164 <Argus_Dca_CheckCfg+0x22c>
 8015050:	7ac3      	ldrb	r3, [r0, #11]
 8015052:	2b02      	cmp	r3, #2
 8015054:	d859      	bhi.n	801510a <Argus_Dca_CheckCfg+0x1d2>
 8015056:	f890 c013 	ldrb.w	ip, [r0, #19]
 801505a:	f1bc 0f03 	cmp.w	ip, #3
 801505e:	f200 8094 	bhi.w	801518a <Argus_Dca_CheckCfg+0x252>
 8015062:	7c82      	ldrb	r2, [r0, #18]
 8015064:	2a03      	cmp	r2, #3
 8015066:	f200 8097 	bhi.w	8015198 <Argus_Dca_CheckCfg+0x260>
 801506a:	7d03      	ldrb	r3, [r0, #20]
 801506c:	2b03      	cmp	r3, #3
 801506e:	f200 809a 	bhi.w	80151a6 <Argus_Dca_CheckCfg+0x26e>
 8015072:	429a      	cmp	r2, r3
 8015074:	d801      	bhi.n	801507a <Argus_Dca_CheckCfg+0x142>
 8015076:	4594      	cmp	ip, r2
 8015078:	d994      	bls.n	8014fa4 <Argus_Dca_CheckCfg+0x6c>
 801507a:	4661      	mov	r1, ip
 801507c:	4864      	ldr	r0, [pc, #400]	@ (8015210 <Argus_Dca_CheckCfg+0x2d8>)
 801507e:	f7f8 ff47 	bl	800df10 <print>
 8015082:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8015086:	bd08      	pop	{r3, pc}
 8015088:	f012 0f3f 	tst.w	r2, #63	@ 0x3f
 801508c:	d0cf      	beq.n	801502e <Argus_Dca_CheckCfg+0xf6>
 801508e:	4861      	ldr	r0, [pc, #388]	@ (8015214 <Argus_Dca_CheckCfg+0x2dc>)
 8015090:	f7f8 ff3e 	bl	800df10 <print>
 8015094:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8015098:	bd08      	pop	{r3, pc}
 801509a:	069a      	lsls	r2, r3, #26
 801509c:	d1f7      	bne.n	801508e <Argus_Dca_CheckCfg+0x156>
 801509e:	e772      	b.n	8014f86 <Argus_Dca_CheckCfg+0x4e>
 80150a0:	f891 2067 	ldrb.w	r2, [r1, #103]	@ 0x67
 80150a4:	08d2      	lsrs	r2, r2, #3
 80150a6:	f8b1 305f 	ldrh.w	r3, [r1, #95]	@ 0x5f
 80150aa:	f8b1 0080 	ldrh.w	r0, [r1, #128]	@ 0x80
 80150ae:	ba59      	rev16	r1, r3
 80150b0:	ba40      	rev16	r0, r0
 80150b2:	f3c0 1049 	ubfx	r0, r0, #5, #10
 80150b6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80150ba:	1c43      	adds	r3, r0, #1
 80150bc:	fb00 1001 	mla	r0, r0, r1, r1
 80150c0:	fb02 f000 	mul.w	r0, r2, r0
 80150c4:	2800      	cmp	r0, #0
 80150c6:	d05a      	beq.n	801517e <Argus_Dca_CheckCfg+0x246>
 80150c8:	f5b0 0ffa 	cmp.w	r0, #8192000	@ 0x7d0000
 80150cc:	f67f af55 	bls.w	8014f7a <Argus_Dca_CheckCfg+0x42>
 80150d0:	4851      	ldr	r0, [pc, #324]	@ (8015218 <Argus_Dca_CheckCfg+0x2e0>)
 80150d2:	f7f8 ff1d 	bl	800df10 <print>
 80150d6:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 80150da:	bd08      	pop	{r3, pc}
 80150dc:	f891 3068 	ldrb.w	r3, [r1, #104]	@ 0x68
 80150e0:	f891 0067 	ldrb.w	r0, [r1, #103]	@ 0x67
 80150e4:	f3c3 0344 	ubfx	r3, r3, #1, #5
 80150e8:	08c2      	lsrs	r2, r0, #3
 80150ea:	ebb3 0fd0 	cmp.w	r3, r0, lsr #3
 80150ee:	bf08      	it	eq
 80150f0:	0052      	lsleq	r2, r2, #1
 80150f2:	d0d8      	beq.n	80150a6 <Argus_Dca_CheckCfg+0x16e>
 80150f4:	4849      	ldr	r0, [pc, #292]	@ (801521c <Argus_Dca_CheckCfg+0x2e4>)
 80150f6:	f7f8 ff0b 	bl	800df10 <print>
 80150fa:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 80150fe:	bd08      	pop	{r3, pc}
 8015100:	f891 2068 	ldrb.w	r2, [r1, #104]	@ 0x68
 8015104:	f3c2 0244 	ubfx	r2, r2, #1, #5
 8015108:	e7cd      	b.n	80150a6 <Argus_Dca_CheckCfg+0x16e>
 801510a:	4619      	mov	r1, r3
 801510c:	4844      	ldr	r0, [pc, #272]	@ (8015220 <Argus_Dca_CheckCfg+0x2e8>)
 801510e:	f7f8 feff 	bl	800df10 <print>
 8015112:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8015116:	bd08      	pop	{r3, pc}
 8015118:	4842      	ldr	r0, [pc, #264]	@ (8015224 <Argus_Dca_CheckCfg+0x2ec>)
 801511a:	f7f8 fef9 	bl	800df10 <print>
 801511e:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8015122:	bd08      	pop	{r3, pc}
 8015124:	4840      	ldr	r0, [pc, #256]	@ (8015228 <Argus_Dca_CheckCfg+0x2f0>)
 8015126:	f7f8 fef3 	bl	800df10 <print>
 801512a:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801512e:	bd08      	pop	{r3, pc}
 8015130:	483e      	ldr	r0, [pc, #248]	@ (801522c <Argus_Dca_CheckCfg+0x2f4>)
 8015132:	f7f8 feed 	bl	800df10 <print>
 8015136:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801513a:	bd08      	pop	{r3, pc}
 801513c:	483c      	ldr	r0, [pc, #240]	@ (8015230 <Argus_Dca_CheckCfg+0x2f8>)
 801513e:	f7f8 fee7 	bl	800df10 <print>
 8015142:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8015146:	bd08      	pop	{r3, pc}
 8015148:	4661      	mov	r1, ip
 801514a:	483a      	ldr	r0, [pc, #232]	@ (8015234 <Argus_Dca_CheckCfg+0x2fc>)
 801514c:	f7f8 fee0 	bl	800df10 <print>
 8015150:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8015154:	bd08      	pop	{r3, pc}
 8015156:	4611      	mov	r1, r2
 8015158:	4837      	ldr	r0, [pc, #220]	@ (8015238 <Argus_Dca_CheckCfg+0x300>)
 801515a:	f7f8 fed9 	bl	800df10 <print>
 801515e:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8015162:	bd08      	pop	{r3, pc}
 8015164:	4835      	ldr	r0, [pc, #212]	@ (801523c <Argus_Dca_CheckCfg+0x304>)
 8015166:	f7f8 fed3 	bl	800df10 <print>
 801516a:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801516e:	bd08      	pop	{r3, pc}
 8015170:	4619      	mov	r1, r3
 8015172:	4833      	ldr	r0, [pc, #204]	@ (8015240 <Argus_Dca_CheckCfg+0x308>)
 8015174:	f7f8 fecc 	bl	800df10 <print>
 8015178:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801517c:	bd08      	pop	{r3, pc}
 801517e:	4831      	ldr	r0, [pc, #196]	@ (8015244 <Argus_Dca_CheckCfg+0x30c>)
 8015180:	f7f8 fec6 	bl	800df10 <print>
 8015184:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8015188:	bd08      	pop	{r3, pc}
 801518a:	4661      	mov	r1, ip
 801518c:	482e      	ldr	r0, [pc, #184]	@ (8015248 <Argus_Dca_CheckCfg+0x310>)
 801518e:	f7f8 febf 	bl	800df10 <print>
 8015192:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8015196:	bd08      	pop	{r3, pc}
 8015198:	4611      	mov	r1, r2
 801519a:	482c      	ldr	r0, [pc, #176]	@ (801524c <Argus_Dca_CheckCfg+0x314>)
 801519c:	f7f8 feb8 	bl	800df10 <print>
 80151a0:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 80151a4:	bd08      	pop	{r3, pc}
 80151a6:	4619      	mov	r1, r3
 80151a8:	4829      	ldr	r0, [pc, #164]	@ (8015250 <Argus_Dca_CheckCfg+0x318>)
 80151aa:	f7f8 feb1 	bl	800df10 <print>
 80151ae:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 80151b2:	bd08      	pop	{r3, pc}
 80151b4:	4827      	ldr	r0, [pc, #156]	@ (8015254 <Argus_Dca_CheckCfg+0x31c>)
 80151b6:	f7f8 feab 	bl	800df10 <print>
 80151ba:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 80151be:	bd08      	pop	{r3, pc}
 80151c0:	4825      	ldr	r0, [pc, #148]	@ (8015258 <Argus_Dca_CheckCfg+0x320>)
 80151c2:	f7f8 fea5 	bl	800df10 <print>
 80151c6:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 80151ca:	bd08      	pop	{r3, pc}
 80151cc:	4823      	ldr	r0, [pc, #140]	@ (801525c <Argus_Dca_CheckCfg+0x324>)
 80151ce:	f7f8 fe9f 	bl	800df10 <print>
 80151d2:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 80151d6:	bd08      	pop	{r3, pc}
 80151d8:	4821      	ldr	r0, [pc, #132]	@ (8015260 <Argus_Dca_CheckCfg+0x328>)
 80151da:	f7f8 fe99 	bl	800df10 <print>
 80151de:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 80151e2:	bd08      	pop	{r3, pc}
 80151e4:	7c81      	ldrb	r1, [r0, #18]
 80151e6:	481f      	ldr	r0, [pc, #124]	@ (8015264 <Argus_Dca_CheckCfg+0x32c>)
 80151e8:	f7f8 fe92 	bl	800df10 <print>
 80151ec:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 80151f0:	bd08      	pop	{r3, pc}
 80151f2:	2104      	movs	r1, #4
 80151f4:	481c      	ldr	r0, [pc, #112]	@ (8015268 <Argus_Dca_CheckCfg+0x330>)
 80151f6:	f7f8 fe8b 	bl	800df10 <print>
 80151fa:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 80151fe:	bd08      	pop	{r3, pc}
 8015200:	481a      	ldr	r0, [pc, #104]	@ (801526c <Argus_Dca_CheckCfg+0x334>)
 8015202:	f7f8 fe85 	bl	800df10 <print>
 8015206:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801520a:	bd08      	pop	{r3, pc}
 801520c:	08028fbc 	.word	0x08028fbc
 8015210:	08028ed0 	.word	0x08028ed0
 8015214:	08028c58 	.word	0x08028c58
 8015218:	08029060 	.word	0x08029060
 801521c:	08028f54 	.word	0x08028f54
 8015220:	08028e14 	.word	0x08028e14
 8015224:	08028c04 	.word	0x08028c04
 8015228:	08028bb0 	.word	0x08028bb0
 801522c:	08028a04 	.word	0x08028a04
 8015230:	08028b4c 	.word	0x08028b4c
 8015234:	080289c0 	.word	0x080289c0
 8015238:	08028990 	.word	0x08028990
 801523c:	08028d60 	.word	0x08028d60
 8015240:	08028a8c 	.word	0x08028a8c
 8015244:	08028fe0 	.word	0x08028fe0
 8015248:	08028e40 	.word	0x08028e40
 801524c:	08028e70 	.word	0x08028e70
 8015250:	08028ea0 	.word	0x08028ea0
 8015254:	08028db8 	.word	0x08028db8
 8015258:	08028cac 	.word	0x08028cac
 801525c:	08028cdc 	.word	0x08028cdc
 8015260:	08028af4 	.word	0x08028af4
 8015264:	08028f28 	.word	0x08028f28
 8015268:	08028ab8 	.word	0x08028ab8
 801526c:	08028d0c 	.word	0x08028d0c

08015270 <Argus_Dca_PrepareCfg>:
 8015270:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 8015274:	f890 1050 	ldrb.w	r1, [r0, #80]	@ 0x50
 8015278:	f890 2060 	ldrb.w	r2, [r0, #96]	@ 0x60
 801527c:	400b      	ands	r3, r1
 801527e:	4013      	ands	r3, r2
 8015280:	2bff      	cmp	r3, #255	@ 0xff
 8015282:	b500      	push	{lr}
 8015284:	7b82      	ldrb	r2, [r0, #14]
 8015286:	f040 80ea 	bne.w	801545e <Argus_Dca_PrepareCfg+0x1ee>
 801528a:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 801528e:	f890 c04f 	ldrb.w	ip, [r0, #79]	@ 0x4f
 8015292:	f890 105f 	ldrb.w	r1, [r0, #95]	@ 0x5f
 8015296:	ea03 030c 	and.w	r3, r3, ip
 801529a:	400b      	ands	r3, r1
 801529c:	2bff      	cmp	r3, #255	@ 0xff
 801529e:	f040 8123 	bne.w	80154e8 <Argus_Dca_PrepareCfg+0x278>
 80152a2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80152a6:	f890 c04e 	ldrb.w	ip, [r0, #78]	@ 0x4e
 80152aa:	f890 105e 	ldrb.w	r1, [r0, #94]	@ 0x5e
 80152ae:	ea03 030c 	and.w	r3, r3, ip
 80152b2:	400b      	ands	r3, r1
 80152b4:	2bff      	cmp	r3, #255	@ 0xff
 80152b6:	f040 811b 	bne.w	80154f0 <Argus_Dca_PrepareCfg+0x280>
 80152ba:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80152be:	f890 c04d 	ldrb.w	ip, [r0, #77]	@ 0x4d
 80152c2:	f890 105d 	ldrb.w	r1, [r0, #93]	@ 0x5d
 80152c6:	ea03 030c 	and.w	r3, r3, ip
 80152ca:	400b      	ands	r3, r1
 80152cc:	2bff      	cmp	r3, #255	@ 0xff
 80152ce:	f040 8111 	bne.w	80154f4 <Argus_Dca_PrepareCfg+0x284>
 80152d2:	f890 303b 	ldrb.w	r3, [r0, #59]	@ 0x3b
 80152d6:	f890 c04c 	ldrb.w	ip, [r0, #76]	@ 0x4c
 80152da:	f890 105c 	ldrb.w	r1, [r0, #92]	@ 0x5c
 80152de:	ea03 030c 	and.w	r3, r3, ip
 80152e2:	400b      	ands	r3, r1
 80152e4:	2bff      	cmp	r3, #255	@ 0xff
 80152e6:	f040 8107 	bne.w	80154f8 <Argus_Dca_PrepareCfg+0x288>
 80152ea:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 80152ee:	f890 c04b 	ldrb.w	ip, [r0, #75]	@ 0x4b
 80152f2:	f890 105b 	ldrb.w	r1, [r0, #91]	@ 0x5b
 80152f6:	ea03 030c 	and.w	r3, r3, ip
 80152fa:	400b      	ands	r3, r1
 80152fc:	2bff      	cmp	r3, #255	@ 0xff
 80152fe:	f040 80fd 	bne.w	80154fc <Argus_Dca_PrepareCfg+0x28c>
 8015302:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8015306:	f890 c04a 	ldrb.w	ip, [r0, #74]	@ 0x4a
 801530a:	f890 105a 	ldrb.w	r1, [r0, #90]	@ 0x5a
 801530e:	ea03 030c 	and.w	r3, r3, ip
 8015312:	400b      	ands	r3, r1
 8015314:	2bff      	cmp	r3, #255	@ 0xff
 8015316:	f040 80f3 	bne.w	8015500 <Argus_Dca_PrepareCfg+0x290>
 801531a:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 801531e:	f890 c049 	ldrb.w	ip, [r0, #73]	@ 0x49
 8015322:	f890 1059 	ldrb.w	r1, [r0, #89]	@ 0x59
 8015326:	ea03 030c 	and.w	r3, r3, ip
 801532a:	400b      	ands	r3, r1
 801532c:	2bff      	cmp	r3, #255	@ 0xff
 801532e:	f040 80e9 	bne.w	8015504 <Argus_Dca_PrepareCfg+0x294>
 8015332:	f890 3037 	ldrb.w	r3, [r0, #55]	@ 0x37
 8015336:	f890 c048 	ldrb.w	ip, [r0, #72]	@ 0x48
 801533a:	f890 1058 	ldrb.w	r1, [r0, #88]	@ 0x58
 801533e:	ea03 030c 	and.w	r3, r3, ip
 8015342:	400b      	ands	r3, r1
 8015344:	2bff      	cmp	r3, #255	@ 0xff
 8015346:	f040 80f4 	bne.w	8015532 <Argus_Dca_PrepareCfg+0x2c2>
 801534a:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 801534e:	f890 c047 	ldrb.w	ip, [r0, #71]	@ 0x47
 8015352:	f890 1057 	ldrb.w	r1, [r0, #87]	@ 0x57
 8015356:	ea03 030c 	and.w	r3, r3, ip
 801535a:	400b      	ands	r3, r1
 801535c:	2bff      	cmp	r3, #255	@ 0xff
 801535e:	f040 8292 	bne.w	8015886 <Argus_Dca_PrepareCfg+0x616>
 8015362:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8015366:	f890 c046 	ldrb.w	ip, [r0, #70]	@ 0x46
 801536a:	f890 1056 	ldrb.w	r1, [r0, #86]	@ 0x56
 801536e:	ea03 030c 	and.w	r3, r3, ip
 8015372:	400b      	ands	r3, r1
 8015374:	2bff      	cmp	r3, #255	@ 0xff
 8015376:	f040 8288 	bne.w	801588a <Argus_Dca_PrepareCfg+0x61a>
 801537a:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 801537e:	f890 c045 	ldrb.w	ip, [r0, #69]	@ 0x45
 8015382:	f890 1055 	ldrb.w	r1, [r0, #85]	@ 0x55
 8015386:	ea03 030c 	and.w	r3, r3, ip
 801538a:	400b      	ands	r3, r1
 801538c:	2bff      	cmp	r3, #255	@ 0xff
 801538e:	f040 827e 	bne.w	801588e <Argus_Dca_PrepareCfg+0x61e>
 8015392:	f890 3033 	ldrb.w	r3, [r0, #51]	@ 0x33
 8015396:	f890 c044 	ldrb.w	ip, [r0, #68]	@ 0x44
 801539a:	f890 1054 	ldrb.w	r1, [r0, #84]	@ 0x54
 801539e:	ea03 030c 	and.w	r3, r3, ip
 80153a2:	400b      	ands	r3, r1
 80153a4:	2bff      	cmp	r3, #255	@ 0xff
 80153a6:	f040 80a1 	bne.w	80154ec <Argus_Dca_PrepareCfg+0x27c>
 80153aa:	f890 3032 	ldrb.w	r3, [r0, #50]	@ 0x32
 80153ae:	f890 c043 	ldrb.w	ip, [r0, #67]	@ 0x43
 80153b2:	f890 1053 	ldrb.w	r1, [r0, #83]	@ 0x53
 80153b6:	ea03 030c 	and.w	r3, r3, ip
 80153ba:	400b      	ands	r3, r1
 80153bc:	2bff      	cmp	r3, #255	@ 0xff
 80153be:	f040 8268 	bne.w	8015892 <Argus_Dca_PrepareCfg+0x622>
 80153c2:	f890 3031 	ldrb.w	r3, [r0, #49]	@ 0x31
 80153c6:	f890 c042 	ldrb.w	ip, [r0, #66]	@ 0x42
 80153ca:	f890 1052 	ldrb.w	r1, [r0, #82]	@ 0x52
 80153ce:	ea03 030c 	and.w	r3, r3, ip
 80153d2:	400b      	ands	r3, r1
 80153d4:	2bff      	cmp	r3, #255	@ 0xff
 80153d6:	f040 825e 	bne.w	8015896 <Argus_Dca_PrepareCfg+0x626>
 80153da:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80153de:	f890 c041 	ldrb.w	ip, [r0, #65]	@ 0x41
 80153e2:	f890 1051 	ldrb.w	r1, [r0, #81]	@ 0x51
 80153e6:	ea03 030c 	and.w	r3, r3, ip
 80153ea:	400b      	ands	r3, r1
 80153ec:	2bff      	cmp	r3, #255	@ 0xff
 80153ee:	bf18      	it	ne
 80153f0:	2178      	movne	r1, #120	@ 0x78
 80153f2:	d135      	bne.n	8015460 <Argus_Dca_PrepareCfg+0x1f0>
 80153f4:	2180      	movs	r1, #128	@ 0x80
 80153f6:	7b03      	ldrb	r3, [r0, #12]
 80153f8:	f8b0 c102 	ldrh.w	ip, [r0, #258]	@ 0x102
 80153fc:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8015400:	1a59      	subs	r1, r3, r1
 8015402:	b2c9      	uxtb	r1, r1
 8015404:	fbb1 f2f2 	udiv	r2, r1, r2
 8015408:	f02c 013f 	bic.w	r1, ip, #63	@ 0x3f
 801540c:	fa1f fe81 	uxth.w	lr, r1
 8015410:	2900      	cmp	r1, #0
 8015412:	d04d      	beq.n	80154b0 <Argus_Dca_PrepareCfg+0x240>
 8015414:	f10c 0320 	add.w	r3, ip, #32
 8015418:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 801541c:	b29b      	uxth	r3, r3
 801541e:	f8b0 1104 	ldrh.w	r1, [r0, #260]	@ 0x104
 8015422:	f8a0 3102 	strh.w	r3, [r0, #258]	@ 0x102
 8015426:	f021 033f 	bic.w	r3, r1, #63	@ 0x3f
 801542a:	fa1f fe83 	uxth.w	lr, r3
 801542e:	b383      	cbz	r3, 8015492 <Argus_Dca_PrepareCfg+0x222>
 8015430:	f101 0320 	add.w	r3, r1, #32
 8015434:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8015438:	b29b      	uxth	r3, r3
 801543a:	f8b0 1100 	ldrh.w	r1, [r0, #256]	@ 0x100
 801543e:	f8a0 3104 	strh.w	r3, [r0, #260]	@ 0x104
 8015442:	f021 033f 	bic.w	r3, r1, #63	@ 0x3f
 8015446:	fa1f fe83 	uxth.w	lr, r3
 801544a:	b19b      	cbz	r3, 8015474 <Argus_Dca_PrepareCfg+0x204>
 801544c:	f101 0320 	add.w	r3, r1, #32
 8015450:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8015454:	b29b      	uxth	r3, r3
 8015456:	f8a0 3100 	strh.w	r3, [r0, #256]	@ 0x100
 801545a:	f85d fb04 	ldr.w	pc, [sp], #4
 801545e:	2100      	movs	r1, #0
 8015460:	085b      	lsrs	r3, r3, #1
 8015462:	d0c8      	beq.n	80153f6 <Argus_Dca_PrepareCfg+0x186>
 8015464:	f013 0f01 	tst.w	r3, #1
 8015468:	d0fa      	beq.n	8015460 <Argus_Dca_PrepareCfg+0x1f0>
 801546a:	3101      	adds	r1, #1
 801546c:	085b      	lsrs	r3, r3, #1
 801546e:	b2c9      	uxtb	r1, r1
 8015470:	d1f8      	bne.n	8015464 <Argus_Dca_PrepareCfg+0x1f4>
 8015472:	e7c0      	b.n	80153f6 <Argus_Dca_PrepareCfg+0x186>
 8015474:	ea4f 2c82 	mov.w	ip, r2, lsl #10
 8015478:	b382      	cbz	r2, 80154dc <Argus_Dca_PrepareCfg+0x26c>
 801547a:	fb01 f202 	mul.w	r2, r1, r2
 801547e:	f3c2 1140 	ubfx	r1, r2, #5, #1
 8015482:	eb01 1292 	add.w	r2, r1, r2, lsr #6
 8015486:	2a01      	cmp	r2, #1
 8015488:	bf38      	it	cc
 801548a:	2201      	movcc	r2, #1
 801548c:	4562      	cmp	r2, ip
 801548e:	d941      	bls.n	8015514 <Argus_Dca_PrepareCfg+0x2a4>
 8015490:	e7fe      	b.n	8015490 <Argus_Dca_PrepareCfg+0x220>
 8015492:	ea4f 2c82 	mov.w	ip, r2, lsl #10
 8015496:	b1f2      	cbz	r2, 80154d6 <Argus_Dca_PrepareCfg+0x266>
 8015498:	fb02 f101 	mul.w	r1, r2, r1
 801549c:	f3c1 1340 	ubfx	r3, r1, #5, #1
 80154a0:	eb03 1191 	add.w	r1, r3, r1, lsr #6
 80154a4:	2901      	cmp	r1, #1
 80154a6:	bf38      	it	cc
 80154a8:	2101      	movcc	r1, #1
 80154aa:	4561      	cmp	r1, ip
 80154ac:	d93b      	bls.n	8015526 <Argus_Dca_PrepareCfg+0x2b6>
 80154ae:	e7fe      	b.n	80154ae <Argus_Dca_PrepareCfg+0x23e>
 80154b0:	0291      	lsls	r1, r2, #10
 80154b2:	b16a      	cbz	r2, 80154d0 <Argus_Dca_PrepareCfg+0x260>
 80154b4:	fb02 fc0c 	mul.w	ip, r2, ip
 80154b8:	f3cc 1340 	ubfx	r3, ip, #5, #1
 80154bc:	eb03 1c9c 	add.w	ip, r3, ip, lsr #6
 80154c0:	f1bc 0f01 	cmp.w	ip, #1
 80154c4:	bf38      	it	cc
 80154c6:	f04f 0c01 	movcc.w	ip, #1
 80154ca:	458c      	cmp	ip, r1
 80154cc:	d91c      	bls.n	8015508 <Argus_Dca_PrepareCfg+0x298>
 80154ce:	e7fe      	b.n	80154ce <Argus_Dca_PrepareCfg+0x25e>
 80154d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80154d4:	e7a3      	b.n	801541e <Argus_Dca_PrepareCfg+0x1ae>
 80154d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80154da:	e7ae      	b.n	801543a <Argus_Dca_PrepareCfg+0x1ca>
 80154dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80154e0:	f8a0 3100 	strh.w	r3, [r0, #256]	@ 0x100
 80154e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80154e8:	2108      	movs	r1, #8
 80154ea:	e7b9      	b.n	8015460 <Argus_Dca_PrepareCfg+0x1f0>
 80154ec:	2160      	movs	r1, #96	@ 0x60
 80154ee:	e7b7      	b.n	8015460 <Argus_Dca_PrepareCfg+0x1f0>
 80154f0:	2110      	movs	r1, #16
 80154f2:	e7b5      	b.n	8015460 <Argus_Dca_PrepareCfg+0x1f0>
 80154f4:	2118      	movs	r1, #24
 80154f6:	e7b3      	b.n	8015460 <Argus_Dca_PrepareCfg+0x1f0>
 80154f8:	2120      	movs	r1, #32
 80154fa:	e7b1      	b.n	8015460 <Argus_Dca_PrepareCfg+0x1f0>
 80154fc:	2128      	movs	r1, #40	@ 0x28
 80154fe:	e7af      	b.n	8015460 <Argus_Dca_PrepareCfg+0x1f0>
 8015500:	2130      	movs	r1, #48	@ 0x30
 8015502:	e7ad      	b.n	8015460 <Argus_Dca_PrepareCfg+0x1f0>
 8015504:	2138      	movs	r1, #56	@ 0x38
 8015506:	e7ab      	b.n	8015460 <Argus_Dca_PrepareCfg+0x1f0>
 8015508:	d115      	bne.n	8015536 <Argus_Dca_PrepareCfg+0x2c6>
 801550a:	f44f 3c80 	mov.w	ip, #65536	@ 0x10000
 801550e:	fa1f f38c 	uxth.w	r3, ip
 8015512:	e784      	b.n	801541e <Argus_Dca_PrepareCfg+0x1ae>
 8015514:	f040 8089 	bne.w	801562a <Argus_Dca_PrepareCfg+0x3ba>
 8015518:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801551c:	b293      	uxth	r3, r2
 801551e:	f8a0 3100 	strh.w	r3, [r0, #256]	@ 0x100
 8015522:	f85d fb04 	ldr.w	pc, [sp], #4
 8015526:	f040 8117 	bne.w	8015758 <Argus_Dca_PrepareCfg+0x4e8>
 801552a:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 801552e:	b28b      	uxth	r3, r1
 8015530:	e783      	b.n	801543a <Argus_Dca_PrepareCfg+0x1ca>
 8015532:	2140      	movs	r1, #64	@ 0x40
 8015534:	e794      	b.n	8015460 <Argus_Dca_PrepareCfg+0x1f0>
 8015536:	ebb1 0f4c 	cmp.w	r1, ip, lsl #1
 801553a:	ea4f 034c 	mov.w	r3, ip, lsl #1
 801553e:	f200 81af 	bhi.w	80158a0 <Argus_Dca_PrepareCfg+0x630>
 8015542:	1a5b      	subs	r3, r3, r1
 8015544:	005b      	lsls	r3, r3, #1
 8015546:	f44f 4c00 	mov.w	ip, #32768	@ 0x8000
 801554a:	d0e0      	beq.n	801550e <Argus_Dca_PrepareCfg+0x29e>
 801554c:	4299      	cmp	r1, r3
 801554e:	bf9c      	itt	ls
 8015550:	1a5b      	subls	r3, r3, r1
 8015552:	f44c 4c80 	orrls.w	ip, ip, #16384	@ 0x4000
 8015556:	005b      	lsls	r3, r3, #1
 8015558:	d0d9      	beq.n	801550e <Argus_Dca_PrepareCfg+0x29e>
 801555a:	4299      	cmp	r1, r3
 801555c:	bf9c      	itt	ls
 801555e:	1a5b      	subls	r3, r3, r1
 8015560:	f44c 5c00 	orrls.w	ip, ip, #8192	@ 0x2000
 8015564:	005b      	lsls	r3, r3, #1
 8015566:	d0d2      	beq.n	801550e <Argus_Dca_PrepareCfg+0x29e>
 8015568:	4299      	cmp	r1, r3
 801556a:	bf9c      	itt	ls
 801556c:	1a5b      	subls	r3, r3, r1
 801556e:	f44c 5c80 	orrls.w	ip, ip, #4096	@ 0x1000
 8015572:	005b      	lsls	r3, r3, #1
 8015574:	d0cb      	beq.n	801550e <Argus_Dca_PrepareCfg+0x29e>
 8015576:	4299      	cmp	r1, r3
 8015578:	bf9c      	itt	ls
 801557a:	1a5b      	subls	r3, r3, r1
 801557c:	f44c 6c00 	orrls.w	ip, ip, #2048	@ 0x800
 8015580:	005b      	lsls	r3, r3, #1
 8015582:	d0c4      	beq.n	801550e <Argus_Dca_PrepareCfg+0x29e>
 8015584:	4299      	cmp	r1, r3
 8015586:	bf9c      	itt	ls
 8015588:	1a5b      	subls	r3, r3, r1
 801558a:	f44c 6c80 	orrls.w	ip, ip, #1024	@ 0x400
 801558e:	005b      	lsls	r3, r3, #1
 8015590:	d0bd      	beq.n	801550e <Argus_Dca_PrepareCfg+0x29e>
 8015592:	4299      	cmp	r1, r3
 8015594:	bf9c      	itt	ls
 8015596:	1a5b      	subls	r3, r3, r1
 8015598:	f44c 7c00 	orrls.w	ip, ip, #512	@ 0x200
 801559c:	005b      	lsls	r3, r3, #1
 801559e:	d0b6      	beq.n	801550e <Argus_Dca_PrepareCfg+0x29e>
 80155a0:	4299      	cmp	r1, r3
 80155a2:	bf9c      	itt	ls
 80155a4:	1a5b      	subls	r3, r3, r1
 80155a6:	f44c 7c80 	orrls.w	ip, ip, #256	@ 0x100
 80155aa:	005b      	lsls	r3, r3, #1
 80155ac:	d0af      	beq.n	801550e <Argus_Dca_PrepareCfg+0x29e>
 80155ae:	4299      	cmp	r1, r3
 80155b0:	bf9c      	itt	ls
 80155b2:	1a5b      	subls	r3, r3, r1
 80155b4:	f04c 0c80 	orrls.w	ip, ip, #128	@ 0x80
 80155b8:	005b      	lsls	r3, r3, #1
 80155ba:	d0a8      	beq.n	801550e <Argus_Dca_PrepareCfg+0x29e>
 80155bc:	4299      	cmp	r1, r3
 80155be:	bf9c      	itt	ls
 80155c0:	1a5b      	subls	r3, r3, r1
 80155c2:	f04c 0c40 	orrls.w	ip, ip, #64	@ 0x40
 80155c6:	005b      	lsls	r3, r3, #1
 80155c8:	d0a1      	beq.n	801550e <Argus_Dca_PrepareCfg+0x29e>
 80155ca:	4299      	cmp	r1, r3
 80155cc:	bf9c      	itt	ls
 80155ce:	1a5b      	subls	r3, r3, r1
 80155d0:	f04c 0c20 	orrls.w	ip, ip, #32
 80155d4:	005b      	lsls	r3, r3, #1
 80155d6:	d09a      	beq.n	801550e <Argus_Dca_PrepareCfg+0x29e>
 80155d8:	4299      	cmp	r1, r3
 80155da:	bf9c      	itt	ls
 80155dc:	1a5b      	subls	r3, r3, r1
 80155de:	f04c 0c10 	orrls.w	ip, ip, #16
 80155e2:	005b      	lsls	r3, r3, #1
 80155e4:	d093      	beq.n	801550e <Argus_Dca_PrepareCfg+0x29e>
 80155e6:	4299      	cmp	r1, r3
 80155e8:	bf9c      	itt	ls
 80155ea:	1a5b      	subls	r3, r3, r1
 80155ec:	f04c 0c08 	orrls.w	ip, ip, #8
 80155f0:	005b      	lsls	r3, r3, #1
 80155f2:	d08c      	beq.n	801550e <Argus_Dca_PrepareCfg+0x29e>
 80155f4:	4299      	cmp	r1, r3
 80155f6:	bf9c      	itt	ls
 80155f8:	1a5b      	subls	r3, r3, r1
 80155fa:	f04c 0c04 	orrls.w	ip, ip, #4
 80155fe:	005b      	lsls	r3, r3, #1
 8015600:	d085      	beq.n	801550e <Argus_Dca_PrepareCfg+0x29e>
 8015602:	4299      	cmp	r1, r3
 8015604:	bf9c      	itt	ls
 8015606:	1a5b      	subls	r3, r3, r1
 8015608:	f04c 0c02 	orrls.w	ip, ip, #2
 801560c:	005b      	lsls	r3, r3, #1
 801560e:	f43f af7e 	beq.w	801550e <Argus_Dca_PrepareCfg+0x29e>
 8015612:	4299      	cmp	r1, r3
 8015614:	bf9c      	itt	ls
 8015616:	1a5b      	subls	r3, r3, r1
 8015618:	f04c 0c01 	orrls.w	ip, ip, #1
 801561c:	ebb1 0f43 	cmp.w	r1, r3, lsl #1
 8015620:	f63f af75 	bhi.w	801550e <Argus_Dca_PrepareCfg+0x29e>
 8015624:	f10c 0c01 	add.w	ip, ip, #1
 8015628:	e771      	b.n	801550e <Argus_Dca_PrepareCfg+0x29e>
 801562a:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 801562e:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8015632:	f200 8139 	bhi.w	80158a8 <Argus_Dca_PrepareCfg+0x638>
 8015636:	eba3 030c 	sub.w	r3, r3, ip
 801563a:	005b      	lsls	r3, r3, #1
 801563c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8015640:	f43f af6c 	beq.w	801551c <Argus_Dca_PrepareCfg+0x2ac>
 8015644:	459c      	cmp	ip, r3
 8015646:	bf9c      	itt	ls
 8015648:	eba3 030c 	subls.w	r3, r3, ip
 801564c:	f442 4280 	orrls.w	r2, r2, #16384	@ 0x4000
 8015650:	005b      	lsls	r3, r3, #1
 8015652:	f43f af63 	beq.w	801551c <Argus_Dca_PrepareCfg+0x2ac>
 8015656:	4563      	cmp	r3, ip
 8015658:	bf24      	itt	cs
 801565a:	eba3 030c 	subcs.w	r3, r3, ip
 801565e:	f442 5200 	orrcs.w	r2, r2, #8192	@ 0x2000
 8015662:	005b      	lsls	r3, r3, #1
 8015664:	f43f af5a 	beq.w	801551c <Argus_Dca_PrepareCfg+0x2ac>
 8015668:	459c      	cmp	ip, r3
 801566a:	bf9c      	itt	ls
 801566c:	eba3 030c 	subls.w	r3, r3, ip
 8015670:	f442 5280 	orrls.w	r2, r2, #4096	@ 0x1000
 8015674:	005b      	lsls	r3, r3, #1
 8015676:	f43f af51 	beq.w	801551c <Argus_Dca_PrepareCfg+0x2ac>
 801567a:	4563      	cmp	r3, ip
 801567c:	bf24      	itt	cs
 801567e:	eba3 030c 	subcs.w	r3, r3, ip
 8015682:	f442 6200 	orrcs.w	r2, r2, #2048	@ 0x800
 8015686:	005b      	lsls	r3, r3, #1
 8015688:	f43f af48 	beq.w	801551c <Argus_Dca_PrepareCfg+0x2ac>
 801568c:	459c      	cmp	ip, r3
 801568e:	bf9c      	itt	ls
 8015690:	eba3 030c 	subls.w	r3, r3, ip
 8015694:	f442 6280 	orrls.w	r2, r2, #1024	@ 0x400
 8015698:	005b      	lsls	r3, r3, #1
 801569a:	f43f af3f 	beq.w	801551c <Argus_Dca_PrepareCfg+0x2ac>
 801569e:	459c      	cmp	ip, r3
 80156a0:	bf9c      	itt	ls
 80156a2:	eba3 030c 	subls.w	r3, r3, ip
 80156a6:	f442 7200 	orrls.w	r2, r2, #512	@ 0x200
 80156aa:	005b      	lsls	r3, r3, #1
 80156ac:	f43f af36 	beq.w	801551c <Argus_Dca_PrepareCfg+0x2ac>
 80156b0:	4563      	cmp	r3, ip
 80156b2:	bf24      	itt	cs
 80156b4:	eba3 030c 	subcs.w	r3, r3, ip
 80156b8:	f442 7280 	orrcs.w	r2, r2, #256	@ 0x100
 80156bc:	005b      	lsls	r3, r3, #1
 80156be:	f43f af2d 	beq.w	801551c <Argus_Dca_PrepareCfg+0x2ac>
 80156c2:	4563      	cmp	r3, ip
 80156c4:	bf24      	itt	cs
 80156c6:	eba3 030c 	subcs.w	r3, r3, ip
 80156ca:	f042 0280 	orrcs.w	r2, r2, #128	@ 0x80
 80156ce:	005b      	lsls	r3, r3, #1
 80156d0:	f43f af24 	beq.w	801551c <Argus_Dca_PrepareCfg+0x2ac>
 80156d4:	459c      	cmp	ip, r3
 80156d6:	bf9c      	itt	ls
 80156d8:	eba3 030c 	subls.w	r3, r3, ip
 80156dc:	f042 0240 	orrls.w	r2, r2, #64	@ 0x40
 80156e0:	005b      	lsls	r3, r3, #1
 80156e2:	f43f af1b 	beq.w	801551c <Argus_Dca_PrepareCfg+0x2ac>
 80156e6:	459c      	cmp	ip, r3
 80156e8:	bf9c      	itt	ls
 80156ea:	eba3 030c 	subls.w	r3, r3, ip
 80156ee:	f042 0220 	orrls.w	r2, r2, #32
 80156f2:	005b      	lsls	r3, r3, #1
 80156f4:	f43f af12 	beq.w	801551c <Argus_Dca_PrepareCfg+0x2ac>
 80156f8:	459c      	cmp	ip, r3
 80156fa:	bf9c      	itt	ls
 80156fc:	eba3 030c 	subls.w	r3, r3, ip
 8015700:	f042 0210 	orrls.w	r2, r2, #16
 8015704:	005b      	lsls	r3, r3, #1
 8015706:	f43f af09 	beq.w	801551c <Argus_Dca_PrepareCfg+0x2ac>
 801570a:	459c      	cmp	ip, r3
 801570c:	bf9c      	itt	ls
 801570e:	eba3 030c 	subls.w	r3, r3, ip
 8015712:	f042 0208 	orrls.w	r2, r2, #8
 8015716:	005b      	lsls	r3, r3, #1
 8015718:	f43f af00 	beq.w	801551c <Argus_Dca_PrepareCfg+0x2ac>
 801571c:	459c      	cmp	ip, r3
 801571e:	bf9c      	itt	ls
 8015720:	eba3 030c 	subls.w	r3, r3, ip
 8015724:	f042 0204 	orrls.w	r2, r2, #4
 8015728:	005b      	lsls	r3, r3, #1
 801572a:	f43f aef7 	beq.w	801551c <Argus_Dca_PrepareCfg+0x2ac>
 801572e:	459c      	cmp	ip, r3
 8015730:	bf9c      	itt	ls
 8015732:	eba3 030c 	subls.w	r3, r3, ip
 8015736:	f042 0202 	orrls.w	r2, r2, #2
 801573a:	005b      	lsls	r3, r3, #1
 801573c:	f43f aeee 	beq.w	801551c <Argus_Dca_PrepareCfg+0x2ac>
 8015740:	4563      	cmp	r3, ip
 8015742:	bf24      	itt	cs
 8015744:	eba3 030c 	subcs.w	r3, r3, ip
 8015748:	f042 0201 	orrcs.w	r2, r2, #1
 801574c:	ebbc 0f43 	cmp.w	ip, r3, lsl #1
 8015750:	f63f aee4 	bhi.w	801551c <Argus_Dca_PrepareCfg+0x2ac>
 8015754:	3201      	adds	r2, #1
 8015756:	e6e1      	b.n	801551c <Argus_Dca_PrepareCfg+0x2ac>
 8015758:	ebbc 0f41 	cmp.w	ip, r1, lsl #1
 801575c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8015760:	f200 809b 	bhi.w	801589a <Argus_Dca_PrepareCfg+0x62a>
 8015764:	eba3 030c 	sub.w	r3, r3, ip
 8015768:	005b      	lsls	r3, r3, #1
 801576a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801576e:	f43f aede 	beq.w	801552e <Argus_Dca_PrepareCfg+0x2be>
 8015772:	459c      	cmp	ip, r3
 8015774:	bf9c      	itt	ls
 8015776:	eba3 030c 	subls.w	r3, r3, ip
 801577a:	f441 4180 	orrls.w	r1, r1, #16384	@ 0x4000
 801577e:	005b      	lsls	r3, r3, #1
 8015780:	f43f aed5 	beq.w	801552e <Argus_Dca_PrepareCfg+0x2be>
 8015784:	459c      	cmp	ip, r3
 8015786:	bf9c      	itt	ls
 8015788:	eba3 030c 	subls.w	r3, r3, ip
 801578c:	f441 5100 	orrls.w	r1, r1, #8192	@ 0x2000
 8015790:	005b      	lsls	r3, r3, #1
 8015792:	f43f aecc 	beq.w	801552e <Argus_Dca_PrepareCfg+0x2be>
 8015796:	459c      	cmp	ip, r3
 8015798:	bf9c      	itt	ls
 801579a:	eba3 030c 	subls.w	r3, r3, ip
 801579e:	f441 5180 	orrls.w	r1, r1, #4096	@ 0x1000
 80157a2:	005b      	lsls	r3, r3, #1
 80157a4:	f43f aec3 	beq.w	801552e <Argus_Dca_PrepareCfg+0x2be>
 80157a8:	459c      	cmp	ip, r3
 80157aa:	bf9c      	itt	ls
 80157ac:	eba3 030c 	subls.w	r3, r3, ip
 80157b0:	f441 6100 	orrls.w	r1, r1, #2048	@ 0x800
 80157b4:	005b      	lsls	r3, r3, #1
 80157b6:	f43f aeba 	beq.w	801552e <Argus_Dca_PrepareCfg+0x2be>
 80157ba:	459c      	cmp	ip, r3
 80157bc:	bf9c      	itt	ls
 80157be:	eba3 030c 	subls.w	r3, r3, ip
 80157c2:	f441 6180 	orrls.w	r1, r1, #1024	@ 0x400
 80157c6:	005b      	lsls	r3, r3, #1
 80157c8:	f43f aeb1 	beq.w	801552e <Argus_Dca_PrepareCfg+0x2be>
 80157cc:	459c      	cmp	ip, r3
 80157ce:	bf9c      	itt	ls
 80157d0:	eba3 030c 	subls.w	r3, r3, ip
 80157d4:	f441 7100 	orrls.w	r1, r1, #512	@ 0x200
 80157d8:	005b      	lsls	r3, r3, #1
 80157da:	f43f aea8 	beq.w	801552e <Argus_Dca_PrepareCfg+0x2be>
 80157de:	459c      	cmp	ip, r3
 80157e0:	bf9c      	itt	ls
 80157e2:	eba3 030c 	subls.w	r3, r3, ip
 80157e6:	f441 7180 	orrls.w	r1, r1, #256	@ 0x100
 80157ea:	005b      	lsls	r3, r3, #1
 80157ec:	f43f ae9f 	beq.w	801552e <Argus_Dca_PrepareCfg+0x2be>
 80157f0:	459c      	cmp	ip, r3
 80157f2:	bf9c      	itt	ls
 80157f4:	eba3 030c 	subls.w	r3, r3, ip
 80157f8:	f041 0180 	orrls.w	r1, r1, #128	@ 0x80
 80157fc:	005b      	lsls	r3, r3, #1
 80157fe:	f43f ae96 	beq.w	801552e <Argus_Dca_PrepareCfg+0x2be>
 8015802:	459c      	cmp	ip, r3
 8015804:	bf9c      	itt	ls
 8015806:	eba3 030c 	subls.w	r3, r3, ip
 801580a:	f041 0140 	orrls.w	r1, r1, #64	@ 0x40
 801580e:	005b      	lsls	r3, r3, #1
 8015810:	f43f ae8d 	beq.w	801552e <Argus_Dca_PrepareCfg+0x2be>
 8015814:	459c      	cmp	ip, r3
 8015816:	bf9c      	itt	ls
 8015818:	eba3 030c 	subls.w	r3, r3, ip
 801581c:	f041 0120 	orrls.w	r1, r1, #32
 8015820:	005b      	lsls	r3, r3, #1
 8015822:	f43f ae84 	beq.w	801552e <Argus_Dca_PrepareCfg+0x2be>
 8015826:	459c      	cmp	ip, r3
 8015828:	bf9c      	itt	ls
 801582a:	eba3 030c 	subls.w	r3, r3, ip
 801582e:	f041 0110 	orrls.w	r1, r1, #16
 8015832:	005b      	lsls	r3, r3, #1
 8015834:	f43f ae7b 	beq.w	801552e <Argus_Dca_PrepareCfg+0x2be>
 8015838:	459c      	cmp	ip, r3
 801583a:	bf9c      	itt	ls
 801583c:	eba3 030c 	subls.w	r3, r3, ip
 8015840:	f041 0108 	orrls.w	r1, r1, #8
 8015844:	005b      	lsls	r3, r3, #1
 8015846:	f43f ae72 	beq.w	801552e <Argus_Dca_PrepareCfg+0x2be>
 801584a:	459c      	cmp	ip, r3
 801584c:	bf9c      	itt	ls
 801584e:	eba3 030c 	subls.w	r3, r3, ip
 8015852:	f041 0104 	orrls.w	r1, r1, #4
 8015856:	005b      	lsls	r3, r3, #1
 8015858:	f43f ae69 	beq.w	801552e <Argus_Dca_PrepareCfg+0x2be>
 801585c:	459c      	cmp	ip, r3
 801585e:	bf9c      	itt	ls
 8015860:	eba3 030c 	subls.w	r3, r3, ip
 8015864:	f041 0102 	orrls.w	r1, r1, #2
 8015868:	005b      	lsls	r3, r3, #1
 801586a:	f43f ae60 	beq.w	801552e <Argus_Dca_PrepareCfg+0x2be>
 801586e:	459c      	cmp	ip, r3
 8015870:	bf9c      	itt	ls
 8015872:	eba3 030c 	subls.w	r3, r3, ip
 8015876:	f041 0101 	orrls.w	r1, r1, #1
 801587a:	ebbc 0f43 	cmp.w	ip, r3, lsl #1
 801587e:	f63f ae56 	bhi.w	801552e <Argus_Dca_PrepareCfg+0x2be>
 8015882:	3101      	adds	r1, #1
 8015884:	e653      	b.n	801552e <Argus_Dca_PrepareCfg+0x2be>
 8015886:	2148      	movs	r1, #72	@ 0x48
 8015888:	e5ea      	b.n	8015460 <Argus_Dca_PrepareCfg+0x1f0>
 801588a:	2150      	movs	r1, #80	@ 0x50
 801588c:	e5e8      	b.n	8015460 <Argus_Dca_PrepareCfg+0x1f0>
 801588e:	2158      	movs	r1, #88	@ 0x58
 8015890:	e5e6      	b.n	8015460 <Argus_Dca_PrepareCfg+0x1f0>
 8015892:	2168      	movs	r1, #104	@ 0x68
 8015894:	e5e4      	b.n	8015460 <Argus_Dca_PrepareCfg+0x1f0>
 8015896:	2170      	movs	r1, #112	@ 0x70
 8015898:	e5e2      	b.n	8015460 <Argus_Dca_PrepareCfg+0x1f0>
 801589a:	008b      	lsls	r3, r1, #2
 801589c:	4671      	mov	r1, lr
 801589e:	e768      	b.n	8015772 <Argus_Dca_PrepareCfg+0x502>
 80158a0:	ea4f 038c 	mov.w	r3, ip, lsl #2
 80158a4:	46f4      	mov	ip, lr
 80158a6:	e651      	b.n	801554c <Argus_Dca_PrepareCfg+0x2dc>
 80158a8:	0093      	lsls	r3, r2, #2
 80158aa:	4672      	mov	r2, lr
 80158ac:	e6ca      	b.n	8015644 <Argus_Dca_PrepareCfg+0x3d4>
 80158ae:	bf00      	nop

080158b0 <Argus_Dca_Update>:
 80158b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158b4:	460e      	mov	r6, r1
 80158b6:	f891 1050 	ldrb.w	r1, [r1, #80]	@ 0x50
 80158ba:	f896 303f 	ldrb.w	r3, [r6, #63]	@ 0x3f
 80158be:	7bb4      	ldrb	r4, [r6, #14]
 80158c0:	4019      	ands	r1, r3
 80158c2:	f896 3060 	ldrb.w	r3, [r6, #96]	@ 0x60
 80158c6:	4019      	ands	r1, r3
 80158c8:	29ff      	cmp	r1, #255	@ 0xff
 80158ca:	b085      	sub	sp, #20
 80158cc:	4607      	mov	r7, r0
 80158ce:	4615      	mov	r5, r2
 80158d0:	f040 8527 	bne.w	8016322 <Argus_Dca_Update+0xa72>
 80158d4:	f896 203e 	ldrb.w	r2, [r6, #62]	@ 0x3e
 80158d8:	f896 304f 	ldrb.w	r3, [r6, #79]	@ 0x4f
 80158dc:	4013      	ands	r3, r2
 80158de:	f896 205f 	ldrb.w	r2, [r6, #95]	@ 0x5f
 80158e2:	4013      	ands	r3, r2
 80158e4:	2bff      	cmp	r3, #255	@ 0xff
 80158e6:	f040 8155 	bne.w	8015b94 <Argus_Dca_Update+0x2e4>
 80158ea:	f896 203d 	ldrb.w	r2, [r6, #61]	@ 0x3d
 80158ee:	f896 304e 	ldrb.w	r3, [r6, #78]	@ 0x4e
 80158f2:	4013      	ands	r3, r2
 80158f4:	f896 205e 	ldrb.w	r2, [r6, #94]	@ 0x5e
 80158f8:	4013      	ands	r3, r2
 80158fa:	2bff      	cmp	r3, #255	@ 0xff
 80158fc:	f040 8548 	bne.w	8016390 <Argus_Dca_Update+0xae0>
 8015900:	f896 203c 	ldrb.w	r2, [r6, #60]	@ 0x3c
 8015904:	f896 304d 	ldrb.w	r3, [r6, #77]	@ 0x4d
 8015908:	4013      	ands	r3, r2
 801590a:	f896 205d 	ldrb.w	r2, [r6, #93]	@ 0x5d
 801590e:	4013      	ands	r3, r2
 8015910:	2bff      	cmp	r3, #255	@ 0xff
 8015912:	f040 853f 	bne.w	8016394 <Argus_Dca_Update+0xae4>
 8015916:	f896 203b 	ldrb.w	r2, [r6, #59]	@ 0x3b
 801591a:	f896 304c 	ldrb.w	r3, [r6, #76]	@ 0x4c
 801591e:	4013      	ands	r3, r2
 8015920:	f896 205c 	ldrb.w	r2, [r6, #92]	@ 0x5c
 8015924:	4013      	ands	r3, r2
 8015926:	2bff      	cmp	r3, #255	@ 0xff
 8015928:	f040 853a 	bne.w	80163a0 <Argus_Dca_Update+0xaf0>
 801592c:	f896 203a 	ldrb.w	r2, [r6, #58]	@ 0x3a
 8015930:	f896 304b 	ldrb.w	r3, [r6, #75]	@ 0x4b
 8015934:	4013      	ands	r3, r2
 8015936:	f896 205b 	ldrb.w	r2, [r6, #91]	@ 0x5b
 801593a:	4013      	ands	r3, r2
 801593c:	2bff      	cmp	r3, #255	@ 0xff
 801593e:	f040 8538 	bne.w	80163b2 <Argus_Dca_Update+0xb02>
 8015942:	f896 2039 	ldrb.w	r2, [r6, #57]	@ 0x39
 8015946:	f896 304a 	ldrb.w	r3, [r6, #74]	@ 0x4a
 801594a:	4013      	ands	r3, r2
 801594c:	f896 205a 	ldrb.w	r2, [r6, #90]	@ 0x5a
 8015950:	4013      	ands	r3, r2
 8015952:	2bff      	cmp	r3, #255	@ 0xff
 8015954:	f040 8533 	bne.w	80163be <Argus_Dca_Update+0xb0e>
 8015958:	f896 2038 	ldrb.w	r2, [r6, #56]	@ 0x38
 801595c:	f896 3049 	ldrb.w	r3, [r6, #73]	@ 0x49
 8015960:	4013      	ands	r3, r2
 8015962:	f896 2059 	ldrb.w	r2, [r6, #89]	@ 0x59
 8015966:	4013      	ands	r3, r2
 8015968:	2bff      	cmp	r3, #255	@ 0xff
 801596a:	f040 8532 	bne.w	80163d2 <Argus_Dca_Update+0xb22>
 801596e:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 8015972:	f896 3037 	ldrb.w	r3, [r6, #55]	@ 0x37
 8015976:	4013      	ands	r3, r2
 8015978:	f896 2058 	ldrb.w	r2, [r6, #88]	@ 0x58
 801597c:	4013      	ands	r3, r2
 801597e:	2bff      	cmp	r3, #255	@ 0xff
 8015980:	f040 8524 	bne.w	80163cc <Argus_Dca_Update+0xb1c>
 8015984:	f896 2047 	ldrb.w	r2, [r6, #71]	@ 0x47
 8015988:	f896 3036 	ldrb.w	r3, [r6, #54]	@ 0x36
 801598c:	4013      	ands	r3, r2
 801598e:	f896 2057 	ldrb.w	r2, [r6, #87]	@ 0x57
 8015992:	4013      	ands	r3, r2
 8015994:	2bff      	cmp	r3, #255	@ 0xff
 8015996:	f040 8527 	bne.w	80163e8 <Argus_Dca_Update+0xb38>
 801599a:	f896 2046 	ldrb.w	r2, [r6, #70]	@ 0x46
 801599e:	f896 3035 	ldrb.w	r3, [r6, #53]	@ 0x35
 80159a2:	4013      	ands	r3, r2
 80159a4:	f896 2056 	ldrb.w	r2, [r6, #86]	@ 0x56
 80159a8:	4013      	ands	r3, r2
 80159aa:	2bff      	cmp	r3, #255	@ 0xff
 80159ac:	f040 8527 	bne.w	80163fe <Argus_Dca_Update+0xb4e>
 80159b0:	f896 2045 	ldrb.w	r2, [r6, #69]	@ 0x45
 80159b4:	f896 3034 	ldrb.w	r3, [r6, #52]	@ 0x34
 80159b8:	4013      	ands	r3, r2
 80159ba:	f896 2055 	ldrb.w	r2, [r6, #85]	@ 0x55
 80159be:	4013      	ands	r3, r2
 80159c0:	2bff      	cmp	r3, #255	@ 0xff
 80159c2:	f040 8527 	bne.w	8016414 <Argus_Dca_Update+0xb64>
 80159c6:	f896 2044 	ldrb.w	r2, [r6, #68]	@ 0x44
 80159ca:	f896 3033 	ldrb.w	r3, [r6, #51]	@ 0x33
 80159ce:	4013      	ands	r3, r2
 80159d0:	f896 2054 	ldrb.w	r2, [r6, #84]	@ 0x54
 80159d4:	4013      	ands	r3, r2
 80159d6:	2bff      	cmp	r3, #255	@ 0xff
 80159d8:	f040 84b6 	bne.w	8016348 <Argus_Dca_Update+0xa98>
 80159dc:	f896 2043 	ldrb.w	r2, [r6, #67]	@ 0x43
 80159e0:	f896 3032 	ldrb.w	r3, [r6, #50]	@ 0x32
 80159e4:	4013      	ands	r3, r2
 80159e6:	f896 2053 	ldrb.w	r2, [r6, #83]	@ 0x53
 80159ea:	4013      	ands	r3, r2
 80159ec:	2bff      	cmp	r3, #255	@ 0xff
 80159ee:	f040 8514 	bne.w	801641a <Argus_Dca_Update+0xb6a>
 80159f2:	f896 2042 	ldrb.w	r2, [r6, #66]	@ 0x42
 80159f6:	f896 3031 	ldrb.w	r3, [r6, #49]	@ 0x31
 80159fa:	4013      	ands	r3, r2
 80159fc:	f896 2052 	ldrb.w	r2, [r6, #82]	@ 0x52
 8015a00:	4013      	ands	r3, r2
 8015a02:	2bff      	cmp	r3, #255	@ 0xff
 8015a04:	f040 852d 	bne.w	8016462 <Argus_Dca_Update+0xbb2>
 8015a08:	f896 2041 	ldrb.w	r2, [r6, #65]	@ 0x41
 8015a0c:	f896 3030 	ldrb.w	r3, [r6, #48]	@ 0x30
 8015a10:	4013      	ands	r3, r2
 8015a12:	f896 2051 	ldrb.w	r2, [r6, #81]	@ 0x51
 8015a16:	4013      	ands	r3, r2
 8015a18:	2bff      	cmp	r3, #255	@ 0xff
 8015a1a:	bf18      	it	ne
 8015a1c:	2278      	movne	r2, #120	@ 0x78
 8015a1e:	f040 80ba 	bne.w	8015b96 <Argus_Dca_Update+0x2e6>
 8015a22:	7b33      	ldrb	r3, [r6, #12]
 8015a24:	f1c3 0080 	rsb	r0, r3, #128	@ 0x80
 8015a28:	425b      	negs	r3, r3
 8015a2a:	b2db      	uxtb	r3, r3
 8015a2c:	b2c0      	uxtb	r0, r0
 8015a2e:	fbb3 f3f4 	udiv	r3, r3, r4
 8015a32:	f887 3020 	strb.w	r3, [r7, #32]
 8015a36:	f896 303e 	ldrb.w	r3, [r6, #62]	@ 0x3e
 8015a3a:	f896 104f 	ldrb.w	r1, [r6, #79]	@ 0x4f
 8015a3e:	4019      	ands	r1, r3
 8015a40:	f896 305f 	ldrb.w	r3, [r6, #95]	@ 0x5f
 8015a44:	4019      	ands	r1, r3
 8015a46:	29ff      	cmp	r1, #255	@ 0xff
 8015a48:	f040 847b 	bne.w	8016342 <Argus_Dca_Update+0xa92>
 8015a4c:	f896 303d 	ldrb.w	r3, [r6, #61]	@ 0x3d
 8015a50:	f896 104e 	ldrb.w	r1, [r6, #78]	@ 0x4e
 8015a54:	4019      	ands	r1, r3
 8015a56:	f896 305e 	ldrb.w	r3, [r6, #94]	@ 0x5e
 8015a5a:	4019      	ands	r1, r3
 8015a5c:	29ff      	cmp	r1, #255	@ 0xff
 8015a5e:	f040 8488 	bne.w	8016372 <Argus_Dca_Update+0xac2>
 8015a62:	f896 303c 	ldrb.w	r3, [r6, #60]	@ 0x3c
 8015a66:	f896 104d 	ldrb.w	r1, [r6, #77]	@ 0x4d
 8015a6a:	4019      	ands	r1, r3
 8015a6c:	f896 305d 	ldrb.w	r3, [r6, #93]	@ 0x5d
 8015a70:	4019      	ands	r1, r3
 8015a72:	29ff      	cmp	r1, #255	@ 0xff
 8015a74:	f040 8491 	bne.w	801639a <Argus_Dca_Update+0xaea>
 8015a78:	f896 303b 	ldrb.w	r3, [r6, #59]	@ 0x3b
 8015a7c:	f896 104c 	ldrb.w	r1, [r6, #76]	@ 0x4c
 8015a80:	4019      	ands	r1, r3
 8015a82:	f896 305c 	ldrb.w	r3, [r6, #92]	@ 0x5c
 8015a86:	4019      	ands	r1, r3
 8015a88:	29ff      	cmp	r1, #255	@ 0xff
 8015a8a:	f040 848c 	bne.w	80163a6 <Argus_Dca_Update+0xaf6>
 8015a8e:	f896 303a 	ldrb.w	r3, [r6, #58]	@ 0x3a
 8015a92:	f896 104b 	ldrb.w	r1, [r6, #75]	@ 0x4b
 8015a96:	4019      	ands	r1, r3
 8015a98:	f896 305b 	ldrb.w	r3, [r6, #91]	@ 0x5b
 8015a9c:	4019      	ands	r1, r3
 8015a9e:	29ff      	cmp	r1, #255	@ 0xff
 8015aa0:	f040 8484 	bne.w	80163ac <Argus_Dca_Update+0xafc>
 8015aa4:	f896 3039 	ldrb.w	r3, [r6, #57]	@ 0x39
 8015aa8:	f896 104a 	ldrb.w	r1, [r6, #74]	@ 0x4a
 8015aac:	4019      	ands	r1, r3
 8015aae:	f896 305a 	ldrb.w	r3, [r6, #90]	@ 0x5a
 8015ab2:	4019      	ands	r1, r3
 8015ab4:	29ff      	cmp	r1, #255	@ 0xff
 8015ab6:	f040 847f 	bne.w	80163b8 <Argus_Dca_Update+0xb08>
 8015aba:	f896 3038 	ldrb.w	r3, [r6, #56]	@ 0x38
 8015abe:	f896 1049 	ldrb.w	r1, [r6, #73]	@ 0x49
 8015ac2:	4019      	ands	r1, r3
 8015ac4:	f896 3059 	ldrb.w	r3, [r6, #89]	@ 0x59
 8015ac8:	4019      	ands	r1, r3
 8015aca:	29ff      	cmp	r1, #255	@ 0xff
 8015acc:	f040 847a 	bne.w	80163c4 <Argus_Dca_Update+0xb14>
 8015ad0:	f896 3037 	ldrb.w	r3, [r6, #55]	@ 0x37
 8015ad4:	f896 1048 	ldrb.w	r1, [r6, #72]	@ 0x48
 8015ad8:	4019      	ands	r1, r3
 8015ada:	f896 3058 	ldrb.w	r3, [r6, #88]	@ 0x58
 8015ade:	4019      	ands	r1, r3
 8015ae0:	29ff      	cmp	r1, #255	@ 0xff
 8015ae2:	f040 8479 	bne.w	80163d8 <Argus_Dca_Update+0xb28>
 8015ae6:	f896 3036 	ldrb.w	r3, [r6, #54]	@ 0x36
 8015aea:	f896 1047 	ldrb.w	r1, [r6, #71]	@ 0x47
 8015aee:	4019      	ands	r1, r3
 8015af0:	f896 3057 	ldrb.w	r3, [r6, #87]	@ 0x57
 8015af4:	4019      	ands	r1, r3
 8015af6:	29ff      	cmp	r1, #255	@ 0xff
 8015af8:	f040 8472 	bne.w	80163e0 <Argus_Dca_Update+0xb30>
 8015afc:	f896 3035 	ldrb.w	r3, [r6, #53]	@ 0x35
 8015b00:	f896 1046 	ldrb.w	r1, [r6, #70]	@ 0x46
 8015b04:	4019      	ands	r1, r3
 8015b06:	f896 3056 	ldrb.w	r3, [r6, #86]	@ 0x56
 8015b0a:	4019      	ands	r1, r3
 8015b0c:	29ff      	cmp	r1, #255	@ 0xff
 8015b0e:	f040 8472 	bne.w	80163f6 <Argus_Dca_Update+0xb46>
 8015b12:	f896 3034 	ldrb.w	r3, [r6, #52]	@ 0x34
 8015b16:	f896 1045 	ldrb.w	r1, [r6, #69]	@ 0x45
 8015b1a:	4019      	ands	r1, r3
 8015b1c:	f896 3055 	ldrb.w	r3, [r6, #85]	@ 0x55
 8015b20:	4019      	ands	r1, r3
 8015b22:	29ff      	cmp	r1, #255	@ 0xff
 8015b24:	f040 846e 	bne.w	8016404 <Argus_Dca_Update+0xb54>
 8015b28:	f896 3033 	ldrb.w	r3, [r6, #51]	@ 0x33
 8015b2c:	f896 1044 	ldrb.w	r1, [r6, #68]	@ 0x44
 8015b30:	4019      	ands	r1, r3
 8015b32:	f896 3054 	ldrb.w	r3, [r6, #84]	@ 0x54
 8015b36:	4019      	ands	r1, r3
 8015b38:	29ff      	cmp	r1, #255	@ 0xff
 8015b3a:	f040 8467 	bne.w	801640c <Argus_Dca_Update+0xb5c>
 8015b3e:	f896 3032 	ldrb.w	r3, [r6, #50]	@ 0x32
 8015b42:	f896 1043 	ldrb.w	r1, [r6, #67]	@ 0x43
 8015b46:	4019      	ands	r1, r3
 8015b48:	f896 3053 	ldrb.w	r3, [r6, #83]	@ 0x53
 8015b4c:	4019      	ands	r1, r3
 8015b4e:	29ff      	cmp	r1, #255	@ 0xff
 8015b50:	f040 8466 	bne.w	8016420 <Argus_Dca_Update+0xb70>
 8015b54:	f896 3031 	ldrb.w	r3, [r6, #49]	@ 0x31
 8015b58:	f896 1042 	ldrb.w	r1, [r6, #66]	@ 0x42
 8015b5c:	4019      	ands	r1, r3
 8015b5e:	f896 3052 	ldrb.w	r3, [r6, #82]	@ 0x52
 8015b62:	4019      	ands	r1, r3
 8015b64:	29ff      	cmp	r1, #255	@ 0xff
 8015b66:	f040 8478 	bne.w	801645a <Argus_Dca_Update+0xbaa>
 8015b6a:	f896 3041 	ldrb.w	r3, [r6, #65]	@ 0x41
 8015b6e:	f896 1030 	ldrb.w	r1, [r6, #48]	@ 0x30
 8015b72:	4019      	ands	r1, r3
 8015b74:	f896 3051 	ldrb.w	r3, [r6, #81]	@ 0x51
 8015b78:	4019      	ands	r1, r3
 8015b7a:	29ff      	cmp	r1, #255	@ 0xff
 8015b7c:	bf08      	it	eq
 8015b7e:	2380      	moveq	r3, #128	@ 0x80
 8015b80:	f040 8467 	bne.w	8016452 <Argus_Dca_Update+0xba2>
 8015b84:	1ac3      	subs	r3, r0, r3
 8015b86:	b2db      	uxtb	r3, r3
 8015b88:	029a      	lsls	r2, r3, #10
 8015b8a:	b353      	cbz	r3, 8015be2 <Argus_Dca_Update+0x332>
 8015b8c:	4294      	cmp	r4, r2
 8015b8e:	f240 8313 	bls.w	80161b8 <Argus_Dca_Update+0x908>
 8015b92:	e7fe      	b.n	8015b92 <Argus_Dca_Update+0x2e2>
 8015b94:	2208      	movs	r2, #8
 8015b96:	085b      	lsrs	r3, r3, #1
 8015b98:	f000 83ee 	beq.w	8016378 <Argus_Dca_Update+0xac8>
 8015b9c:	07d8      	lsls	r0, r3, #31
 8015b9e:	bf44      	itt	mi
 8015ba0:	3201      	addmi	r2, #1
 8015ba2:	b2d2      	uxtbmi	r2, r2
 8015ba4:	085b      	lsrs	r3, r3, #1
 8015ba6:	d1f9      	bne.n	8015b9c <Argus_Dca_Update+0x2ec>
 8015ba8:	7b30      	ldrb	r0, [r6, #12]
 8015baa:	f1c0 0080 	rsb	r0, r0, #128	@ 0x80
 8015bae:	b2c0      	uxtb	r0, r0
 8015bb0:	1a82      	subs	r2, r0, r2
 8015bb2:	29ff      	cmp	r1, #255	@ 0xff
 8015bb4:	b2d2      	uxtb	r2, r2
 8015bb6:	fbb2 f2f4 	udiv	r2, r2, r4
 8015bba:	f887 2020 	strb.w	r2, [r7, #32]
 8015bbe:	bf18      	it	ne
 8015bc0:	084a      	lsrne	r2, r1, #1
 8015bc2:	f43f af38 	beq.w	8015a36 <Argus_Dca_Update+0x186>
 8015bc6:	f012 02ff 	ands.w	r2, r2, #255	@ 0xff
 8015bca:	d0db      	beq.n	8015b84 <Argus_Dca_Update+0x2d4>
 8015bcc:	07d1      	lsls	r1, r2, #31
 8015bce:	bf44      	itt	mi
 8015bd0:	3301      	addmi	r3, #1
 8015bd2:	b2db      	uxtbmi	r3, r3
 8015bd4:	0852      	lsrs	r2, r2, #1
 8015bd6:	d1f9      	bne.n	8015bcc <Argus_Dca_Update+0x31c>
 8015bd8:	1ac3      	subs	r3, r0, r3
 8015bda:	b2db      	uxtb	r3, r3
 8015bdc:	029a      	lsls	r2, r3, #10
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d1d4      	bne.n	8015b8c <Argus_Dca_Update+0x2dc>
 8015be2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8015be6:	f8b6 2100 	ldrh.w	r2, [r6, #256]	@ 0x100
 8015bea:	f8b6 c104 	ldrh.w	ip, [r6, #260]	@ 0x104
 8015bee:	83f9      	strh	r1, [r7, #30]
 8015bf0:	0293      	lsls	r3, r2, #10
 8015bf2:	b17a      	cbz	r2, 8015c14 <Argus_Dca_Update+0x364>
 8015bf4:	ebb3 2f8c 	cmp.w	r3, ip, lsl #10
 8015bf8:	ea4f 218c 	mov.w	r1, ip, lsl #10
 8015bfc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8015c00:	f080 8237 	bcs.w	8016072 <Argus_Dca_Update+0x7c2>
 8015c04:	005b      	lsls	r3, r3, #1
 8015c06:	4299      	cmp	r1, r3
 8015c08:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8015c0c:	d8fa      	bhi.n	8015c04 <Argus_Dca_Update+0x354>
 8015c0e:	2a00      	cmp	r2, #0
 8015c10:	f040 822f 	bne.w	8016072 <Argus_Dca_Update+0x7c2>
 8015c14:	230f      	movs	r3, #15
 8015c16:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8015c1a:	6873      	ldr	r3, [r6, #4]
 8015c1c:	2200      	movs	r2, #0
 8015c1e:	f36c 020f 	bfi	r2, ip, #0, #16
 8015c22:	f36c 421f 	bfi	r2, ip, #16, #16
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	f8c7 2022 	str.w	r2, [r7, #34]	@ 0x22
 8015c2c:	461c      	mov	r4, r3
 8015c2e:	f000 81f7 	beq.w	8016020 <Argus_Dca_Update+0x770>
 8015c32:	f2c0 8261 	blt.w	80160f8 <Argus_Dca_Update+0x848>
 8015c36:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8015c3a:	4293      	cmp	r3, r2
 8015c3c:	f200 823b 	bhi.w	80160b6 <Argus_Dca_Update+0x806>
 8015c40:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8015c44:	f649 413f 	movw	r1, #39999	@ 0x9c3f
 8015c48:	005b      	lsls	r3, r3, #1
 8015c4a:	428b      	cmp	r3, r1
 8015c4c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8015c50:	d9fa      	bls.n	8015c48 <Argus_Dca_Update+0x398>
 8015c52:	2a00      	cmp	r2, #0
 8015c54:	f040 8231 	bne.w	80160ba <Argus_Dca_Update+0x80a>
 8015c58:	2c00      	cmp	r4, #0
 8015c5a:	bfac      	ite	ge
 8015c5c:	f06f 4000 	mvnge.w	r0, #2147483648	@ 0x80000000
 8015c60:	f04f 4000 	movlt.w	r0, #2147483648	@ 0x80000000
 8015c64:	f00c fec8 	bl	80229f8 <fp_log16>
 8015c68:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
 8015c6c:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
 8015c70:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8015c74:	f240 81a9 	bls.w	8015fca <Argus_Dca_Update+0x71a>
 8015c78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8015c7c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8015c80:	4694      	mov	ip, r2
 8015c82:	0052      	lsls	r2, r2, #1
 8015c84:	428a      	cmp	r2, r1
 8015c86:	461c      	mov	r4, r3
 8015c88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015c8c:	d3f8      	bcc.n	8015c80 <Argus_Dca_Update+0x3d0>
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	f040 8191 	bne.w	8015fb6 <Argus_Dca_Update+0x706>
 8015c94:	2800      	cmp	r0, #0
 8015c96:	bfac      	ite	ge
 8015c98:	f06f 4000 	mvnge.w	r0, #2147483648	@ 0x80000000
 8015c9c:	f04f 4000 	movlt.w	r0, #2147483648	@ 0x80000000
 8015ca0:	f00c fdf8 	bl	8022894 <fp_exp16>
 8015ca4:	f8b6 30de 	ldrh.w	r3, [r6, #222]	@ 0xde
 8015ca8:	f8b6 20dc 	ldrh.w	r2, [r6, #220]	@ 0xdc
 8015cac:	fba3 3400 	umull	r3, r4, r3, r0
 8015cb0:	fba2 1000 	umull	r1, r0, r2, r0
 8015cb4:	0c1a      	lsrs	r2, r3, #16
 8015cb6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015cba:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8015cbe:	4413      	add	r3, r2
 8015cc0:	2b01      	cmp	r3, #1
 8015cc2:	bf38      	it	cc
 8015cc4:	2301      	movcc	r3, #1
 8015cc6:	0c0c      	lsrs	r4, r1, #16
 8015cc8:	f3c1 32c0 	ubfx	r2, r1, #15, #1
 8015ccc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8015cd0:	428b      	cmp	r3, r1
 8015cd2:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 8015cd6:	4422      	add	r2, r4
 8015cd8:	bf28      	it	cs
 8015cda:	460b      	movcs	r3, r1
 8015cdc:	429a      	cmp	r2, r3
 8015cde:	bf38      	it	cc
 8015ce0:	461a      	movcc	r2, r3
 8015ce2:	428a      	cmp	r2, r1
 8015ce4:	bf28      	it	cs
 8015ce6:	460a      	movcs	r2, r1
 8015ce8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8015cea:	853a      	strh	r2, [r7, #40]	@ 0x28
 8015cec:	f896 3092 	ldrb.w	r3, [r6, #146]	@ 0x92
 8015cf0:	2b02      	cmp	r3, #2
 8015cf2:	f000 821f 	beq.w	8016134 <Argus_Dca_Update+0x884>
 8015cf6:	2b03      	cmp	r3, #3
 8015cf8:	f000 8211 	beq.w	801611e <Argus_Dca_Update+0x86e>
 8015cfc:	2b01      	cmp	r3, #1
 8015cfe:	f000 8208 	beq.w	8016112 <Argus_Dca_Update+0x862>
 8015d02:	f8b5 228e 	ldrh.w	r2, [r5, #654]	@ 0x28e
 8015d06:	877a      	strh	r2, [r7, #58]	@ 0x3a
 8015d08:	f896 30c5 	ldrb.w	r3, [r6, #197]	@ 0xc5
 8015d0c:	fb02 f303 	mul.w	r3, r2, r3
 8015d10:	f3c3 11c0 	ubfx	r1, r3, #7, #1
 8015d14:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8015d18:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8015d1a:	0313      	lsls	r3, r2, #12
 8015d1c:	b172      	cbz	r2, 8015d3c <Argus_Dca_Update+0x48c>
 8015d1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015d22:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8015d26:	f280 818f 	bge.w	8016048 <Argus_Dca_Update+0x798>
 8015d2a:	005b      	lsls	r3, r3, #1
 8015d2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015d30:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8015d34:	d3f9      	bcc.n	8015d2a <Argus_Dca_Update+0x47a>
 8015d36:	2a00      	cmp	r2, #0
 8015d38:	f040 8186 	bne.w	8016048 <Argus_Dca_Update+0x798>
 8015d3c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8015d40:	8738      	strh	r0, [r7, #56]	@ 0x38
 8015d42:	f895 1292 	ldrb.w	r1, [r5, #658]	@ 0x292
 8015d46:	4668      	mov	r0, sp
 8015d48:	0389      	lsls	r1, r1, #14
 8015d4a:	f007 fb67 	bl	801d41c <Argus_Cal_GetGainValues>
 8015d4e:	f107 0854 	add.w	r8, r7, #84	@ 0x54
 8015d52:	46ee      	mov	lr, sp
 8015d54:	f107 0c4c 	add.w	ip, r7, #76	@ 0x4c
 8015d58:	f85e 3b04 	ldr.w	r3, [lr], #4
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	4619      	mov	r1, r3
 8015d60:	f000 80f3 	beq.w	8015f4a <Argus_Dca_Update+0x69a>
 8015d64:	f2c0 810c 	blt.w	8015f80 <Argus_Dca_Update+0x6d0>
 8015d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015d6c:	f080 80f0 	bcs.w	8015f50 <Argus_Dca_Update+0x6a0>
 8015d70:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8015d74:	005b      	lsls	r3, r3, #1
 8015d76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015d7a:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8015d7e:	d3f9      	bcc.n	8015d74 <Argus_Dca_Update+0x4c4>
 8015d80:	2c00      	cmp	r4, #0
 8015d82:	f040 80e7 	bne.w	8015f54 <Argus_Dca_Update+0x6a4>
 8015d86:	43cb      	mvns	r3, r1
 8015d88:	0fdb      	lsrs	r3, r3, #31
 8015d8a:	425b      	negs	r3, r3
 8015d8c:	b29b      	uxth	r3, r3
 8015d8e:	f82c 3b02 	strh.w	r3, [ip], #2
 8015d92:	45c4      	cmp	ip, r8
 8015d94:	d1e0      	bne.n	8015d58 <Argus_Dca_Update+0x4a8>
 8015d96:	f996 40f4 	ldrsb.w	r4, [r6, #244]	@ 0xf4
 8015d9a:	2c00      	cmp	r4, #0
 8015d9c:	f040 8143 	bne.w	8016026 <Argus_Dca_Update+0x776>
 8015da0:	f04f 33ff 	mov.w	r3, #4294967295
 8015da4:	61bb      	str	r3, [r7, #24]
 8015da6:	e9d7 1017 	ldrd	r1, r0, [r7, #92]	@ 0x5c
 8015daa:	7d4b      	ldrb	r3, [r1, #21]
 8015dac:	6805      	ldr	r5, [r0, #0]
 8015dae:	f8b0 2098 	ldrh.w	r2, [r0, #152]	@ 0x98
 8015db2:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8015db6:	b29b      	uxth	r3, r3
 8015db8:	fba3 3605 	umull	r3, r6, r3, r5
 8015dbc:	1aaa      	subs	r2, r5, r2
 8015dbe:	633a      	str	r2, [r7, #48]	@ 0x30
 8015dc0:	0a1a      	lsrs	r2, r3, #8
 8015dc2:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
 8015dc6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8015dca:	189e      	adds	r6, r3, r2
 8015dcc:	62fe      	str	r6, [r7, #44]	@ 0x2c
 8015dce:	f890 30a8 	ldrb.w	r3, [r0, #168]	@ 0xa8
 8015dd2:	b3b3      	cbz	r3, 8015e42 <Argus_Dca_Update+0x592>
 8015dd4:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8015dd8:	f8b0 80ae 	ldrh.w	r8, [r0, #174]	@ 0xae
 8015ddc:	332d      	adds	r3, #45	@ 0x2d
 8015dde:	f1b9 0f00 	cmp.w	r9, #0
 8015de2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8015de6:	464a      	mov	r2, r9
 8015de8:	f000 81ff 	beq.w	80161ea <Argus_Dca_Update+0x93a>
 8015dec:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8015df0:	46e2      	mov	sl, ip
 8015df2:	f2c0 81ae 	blt.w	8016152 <Argus_Dca_Update+0x8a2>
 8015df6:	45cc      	cmp	ip, r9
 8015df8:	f240 8336 	bls.w	8016468 <Argus_Dca_Update+0xbb8>
 8015dfc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8015e00:	4696      	mov	lr, r2
 8015e02:	0052      	lsls	r2, r2, #1
 8015e04:	4594      	cmp	ip, r2
 8015e06:	469b      	mov	fp, r3
 8015e08:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015e0c:	d8f8      	bhi.n	8015e00 <Argus_Dca_Update+0x550>
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	f040 81ed 	bne.w	80161ee <Argus_Dca_Update+0x93e>
 8015e14:	ea9c 0f09 	teq	ip, r9
 8015e18:	4699      	mov	r9, r3
 8015e1a:	4baa      	ldr	r3, [pc, #680]	@ (80160c4 <Argus_Dca_Update+0x814>)
 8015e1c:	4aaa      	ldr	r2, [pc, #680]	@ (80160c8 <Argus_Dca_Update+0x818>)
 8015e1e:	bf48      	it	mi
 8015e20:	461a      	movmi	r2, r3
 8015e22:	eba5 0808 	sub.w	r8, r5, r8
 8015e26:	fba8 2502 	umull	r2, r5, r8, r2
 8015e2a:	0c13      	lsrs	r3, r2, #16
 8015e2c:	fb08 5509 	mla	r5, r8, r9, r5
 8015e30:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8015e34:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8015e38:	4413      	add	r3, r2
 8015e3a:	42b3      	cmp	r3, r6
 8015e3c:	bf28      	it	cs
 8015e3e:	4633      	movcs	r3, r6
 8015e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015e42:	7d0b      	ldrb	r3, [r1, #20]
 8015e44:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8015e48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015e4c:	803b      	strh	r3, [r7, #0]
 8015e4e:	713b      	strb	r3, [r7, #4]
 8015e50:	898d      	ldrh	r5, [r1, #12]
 8015e52:	813d      	strh	r5, [r7, #8]
 8015e54:	2200      	movs	r2, #0
 8015e56:	807a      	strh	r2, [r7, #2]
 8015e58:	7acb      	ldrb	r3, [r1, #11]
 8015e5a:	1a9b      	subs	r3, r3, r2
 8015e5c:	bf18      	it	ne
 8015e5e:	2301      	movne	r3, #1
 8015e60:	733b      	strb	r3, [r7, #12]
 8015e62:	7c8b      	ldrb	r3, [r1, #18]
 8015e64:	737b      	strb	r3, [r7, #13]
 8015e66:	73ba      	strb	r2, [r7, #14]
 8015e68:	f991 3000 	ldrsb.w	r3, [r1]
 8015e6c:	4293      	cmp	r3, r2
 8015e6e:	dd07      	ble.n	8015e80 <Argus_Dca_Update+0x5d0>
 8015e70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015e72:	737a      	strb	r2, [r7, #13]
 8015e74:	f890 20c0 	ldrb.w	r2, [r0, #192]	@ 0xc0
 8015e78:	73ba      	strb	r2, [r7, #14]
 8015e7a:	429d      	cmp	r5, r3
 8015e7c:	bf88      	it	hi
 8015e7e:	813b      	strhhi	r3, [r7, #8]
 8015e80:	2500      	movs	r5, #0
 8015e82:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8015e84:	84fd      	strh	r5, [r7, #38]	@ 0x26
 8015e86:	f7fd ffbf 	bl	8013e08 <Argus_Eval_ResetShotNoiseAmplitude>
 8015e8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015e8c:	893e      	ldrh	r6, [r7, #8]
 8015e8e:	f887 5035 	strb.w	r5, [r7, #53]	@ 0x35
 8015e92:	e9d3 2124 	ldrd	r2, r1, [r3, #144]	@ 0x90
 8015e96:	09b0      	lsrs	r0, r6, #6
 8015e98:	2801      	cmp	r0, #1
 8015e9a:	bf38      	it	cc
 8015e9c:	2001      	movcc	r0, #1
 8015e9e:	fb01 2200 	mla	r2, r1, r0, r2
 8015ea2:	e9d7 130b 	ldrd	r1, r3, [r7, #44]	@ 0x2c
 8015ea6:	428b      	cmp	r3, r1
 8015ea8:	bf28      	it	cs
 8015eaa:	460b      	movcs	r3, r1
 8015eac:	f3c2 3140 	ubfx	r1, r2, #13, #1
 8015eb0:	eb01 3292 	add.w	r2, r1, r2, lsr #14
 8015eb4:	fbb3 f1f2 	udiv	r1, r3, r2
 8015eb8:	2901      	cmp	r1, #1
 8015eba:	bf38      	it	cc
 8015ebc:	2101      	movcc	r1, #1
 8015ebe:	86fd      	strh	r5, [r7, #54]	@ 0x36
 8015ec0:	69bd      	ldr	r5, [r7, #24]
 8015ec2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8015ec6:	bf28      	it	cs
 8015ec8:	f44f 6180 	movcs.w	r1, #1024	@ 0x400
 8015ecc:	1c6b      	adds	r3, r5, #1
 8015ece:	8179      	strh	r1, [r7, #10]
 8015ed0:	d024      	beq.n	8015f1c <Argus_Dca_Update+0x66c>
 8015ed2:	7b3b      	ldrb	r3, [r7, #12]
 8015ed4:	2b01      	cmp	r3, #1
 8015ed6:	d15f      	bne.n	8015f98 <Argus_Dca_Update+0x6e8>
 8015ed8:	f897 c03e 	ldrb.w	ip, [r7, #62]	@ 0x3e
 8015edc:	f1bc 0f01 	cmp.w	ip, #1
 8015ee0:	bf38      	it	cc
 8015ee2:	f04f 0c01 	movcc.w	ip, #1
 8015ee6:	8bbb      	ldrh	r3, [r7, #28]
 8015ee8:	fb00 fe0c 	mul.w	lr, r0, ip
 8015eec:	f3c5 000e 	ubfx	r0, r5, #0, #15
 8015ef0:	fb03 f000 	mul.w	r0, r3, r0
 8015ef4:	0bc2      	lsrs	r2, r0, #15
 8015ef6:	0bed      	lsrs	r5, r5, #15
 8015ef8:	fb03 2205 	mla	r2, r3, r5, r2
 8015efc:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8015f00:	1813      	adds	r3, r2, r0
 8015f02:	4573      	cmp	r3, lr
 8015f04:	d34b      	bcc.n	8015f9e <Argus_Dca_Update+0x6ee>
 8015f06:	fbb3 f3fe 	udiv	r3, r3, lr
 8015f0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8015f0e:	bf28      	it	cs
 8015f10:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 8015f14:	428b      	cmp	r3, r1
 8015f16:	bf28      	it	cs
 8015f18:	460b      	movcs	r3, r1
 8015f1a:	817b      	strh	r3, [r7, #10]
 8015f1c:	7b7b      	ldrb	r3, [r7, #13]
 8015f1e:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8015f22:	2100      	movs	r1, #0
 8015f24:	429a      	cmp	r2, r3
 8015f26:	73f9      	strb	r1, [r7, #15]
 8015f28:	d06f      	beq.n	801600a <Argus_Dca_Update+0x75a>
 8015f2a:	2001      	movs	r0, #1
 8015f2c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8015f2e:	7cd1      	ldrb	r1, [r2, #19]
 8015f30:	4299      	cmp	r1, r3
 8015f32:	d306      	bcc.n	8015f42 <Argus_Dca_Update+0x692>
 8015f34:	8939      	ldrh	r1, [r7, #8]
 8015f36:	89d3      	ldrh	r3, [r2, #14]
 8015f38:	4299      	cmp	r1, r3
 8015f3a:	d802      	bhi.n	8015f42 <Argus_Dca_Update+0x692>
 8015f3c:	7b3b      	ldrb	r3, [r7, #12]
 8015f3e:	b903      	cbnz	r3, 8015f42 <Argus_Dca_Update+0x692>
 8015f40:	73f8      	strb	r0, [r7, #15]
 8015f42:	4620      	mov	r0, r4
 8015f44:	b005      	add	sp, #20
 8015f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015f4e:	e71e      	b.n	8015d8e <Argus_Dca_Update+0x4de>
 8015f50:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8015f54:	2000      	movs	r0, #0
 8015f56:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8015f5a:	e000      	b.n	8015f5e <Argus_Dca_Update+0x6ae>
 8015f5c:	b152      	cbz	r2, 8015f74 <Argus_Dca_Update+0x6c4>
 8015f5e:	4293      	cmp	r3, r2
 8015f60:	bf9c      	itt	ls
 8015f62:	1ad2      	subls	r2, r2, r3
 8015f64:	4320      	orrls	r0, r4
 8015f66:	0864      	lsrs	r4, r4, #1
 8015f68:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8015f6c:	d1f6      	bne.n	8015f5c <Argus_Dca_Update+0x6ac>
 8015f6e:	4293      	cmp	r3, r2
 8015f70:	bf98      	it	ls
 8015f72:	3001      	addls	r0, #1
 8015f74:	2900      	cmp	r1, #0
 8015f76:	db45      	blt.n	8016004 <Argus_Dca_Update+0x754>
 8015f78:	2800      	cmp	r0, #0
 8015f7a:	dbe6      	blt.n	8015f4a <Argus_Dca_Update+0x69a>
 8015f7c:	b283      	uxth	r3, r0
 8015f7e:	e706      	b.n	8015d8e <Argus_Dca_Update+0x4de>
 8015f80:	425b      	negs	r3, r3
 8015f82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015f86:	f4ff aef3 	bcc.w	8015d70 <Argus_Dca_Update+0x4c0>
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	dae0      	bge.n	8015f50 <Argus_Dca_Update+0x6a0>
 8015f8e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8015f92:	f44f 4400 	mov.w	r4, #32768	@ 0x8000
 8015f96:	e7dd      	b.n	8015f54 <Argus_Dca_Update+0x6a4>
 8015f98:	f04f 0c04 	mov.w	ip, #4
 8015f9c:	e7a3      	b.n	8015ee6 <Argus_Dca_Update+0x636>
 8015f9e:	459c      	cmp	ip, r3
 8015fa0:	f200 80cf 	bhi.w	8016142 <Argus_Dca_Update+0x892>
 8015fa4:	fbb3 f2fc 	udiv	r2, r3, ip
 8015fa8:	0192      	lsls	r2, r2, #6
 8015faa:	42b2      	cmp	r2, r6
 8015fac:	bf28      	it	cs
 8015fae:	4632      	movcs	r2, r6
 8015fb0:	813a      	strh	r2, [r7, #8]
 8015fb2:	2301      	movs	r3, #1
 8015fb4:	e7ae      	b.n	8015f14 <Argus_Dca_Update+0x664>
 8015fb6:	2a00      	cmp	r2, #0
 8015fb8:	da0e      	bge.n	8015fd8 <Argus_Dca_Update+0x728>
 8015fba:	428a      	cmp	r2, r1
 8015fbc:	f040 80f4 	bne.w	80161a8 <Argus_Dca_Update+0x8f8>
 8015fc0:	2800      	cmp	r0, #0
 8015fc2:	461c      	mov	r4, r3
 8015fc4:	da18      	bge.n	8015ff8 <Argus_Dca_Update+0x748>
 8015fc6:	4260      	negs	r0, r4
 8015fc8:	e66a      	b.n	8015ca0 <Argus_Dca_Update+0x3f0>
 8015fca:	2900      	cmp	r1, #0
 8015fcc:	f000 8259 	beq.w	8016482 <Argus_Dca_Update+0xbd2>
 8015fd0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8015fd4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8015fd8:	2400      	movs	r4, #0
 8015fda:	e000      	b.n	8015fde <Argus_Dca_Update+0x72e>
 8015fdc:	b151      	cbz	r1, 8015ff4 <Argus_Dca_Update+0x744>
 8015fde:	428a      	cmp	r2, r1
 8015fe0:	bf9c      	itt	ls
 8015fe2:	1a89      	subls	r1, r1, r2
 8015fe4:	431c      	orrls	r4, r3
 8015fe6:	085b      	lsrs	r3, r3, #1
 8015fe8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015fec:	d1f6      	bne.n	8015fdc <Argus_Dca_Update+0x72c>
 8015fee:	4291      	cmp	r1, r2
 8015ff0:	d300      	bcc.n	8015ff4 <Argus_Dca_Update+0x744>
 8015ff2:	3401      	adds	r4, #1
 8015ff4:	2800      	cmp	r0, #0
 8015ff6:	dbe6      	blt.n	8015fc6 <Argus_Dca_Update+0x716>
 8015ff8:	2c00      	cmp	r4, #0
 8015ffa:	bfac      	ite	ge
 8015ffc:	4620      	movge	r0, r4
 8015ffe:	f06f 4000 	mvnlt.w	r0, #2147483648	@ 0x80000000
 8016002:	e64d      	b.n	8015ca0 <Argus_Dca_Update+0x3f0>
 8016004:	4243      	negs	r3, r0
 8016006:	b29b      	uxth	r3, r3
 8016008:	e6c1      	b.n	8015d8e <Argus_Dca_Update+0x4de>
 801600a:	8939      	ldrh	r1, [r7, #8]
 801600c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801600e:	4291      	cmp	r1, r2
 8016010:	d18b      	bne.n	8015f2a <Argus_Dca_Update+0x67a>
 8016012:	7b3a      	ldrb	r2, [r7, #12]
 8016014:	2a01      	cmp	r2, #1
 8016016:	d188      	bne.n	8015f2a <Argus_Dca_Update+0x67a>
 8016018:	2202      	movs	r2, #2
 801601a:	73fa      	strb	r2, [r7, #15]
 801601c:	2003      	movs	r0, #3
 801601e:	e785      	b.n	8015f2c <Argus_Dca_Update+0x67c>
 8016020:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8016024:	e61e      	b.n	8015c64 <Argus_Dca_Update+0x3b4>
 8016026:	f896 3092 	ldrb.w	r3, [r6, #146]	@ 0x92
 801602a:	2b02      	cmp	r3, #2
 801602c:	f000 8174 	beq.w	8016318 <Argus_Dca_Update+0xa68>
 8016030:	2b03      	cmp	r3, #3
 8016032:	f000 8168 	beq.w	8016306 <Argus_Dca_Update+0xa56>
 8016036:	2b01      	cmp	r3, #1
 8016038:	f000 80ed 	beq.w	8016216 <Argus_Dca_Update+0x966>
 801603c:	4823      	ldr	r0, [pc, #140]	@ (80160cc <Argus_Dca_Update+0x81c>)
 801603e:	f7f7 ff67 	bl	800df10 <print>
 8016042:	2300      	movs	r3, #0
 8016044:	61bb      	str	r3, [r7, #24]
 8016046:	e158      	b.n	80162fa <Argus_Dca_Update+0xa4a>
 8016048:	2000      	movs	r0, #0
 801604a:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 801604e:	e000      	b.n	8016052 <Argus_Dca_Update+0x7a2>
 8016050:	b151      	cbz	r1, 8016068 <Argus_Dca_Update+0x7b8>
 8016052:	4299      	cmp	r1, r3
 8016054:	bf24      	itt	cs
 8016056:	1ac9      	subcs	r1, r1, r3
 8016058:	4310      	orrcs	r0, r2
 801605a:	0852      	lsrs	r2, r2, #1
 801605c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016060:	d1f6      	bne.n	8016050 <Argus_Dca_Update+0x7a0>
 8016062:	4299      	cmp	r1, r3
 8016064:	d300      	bcc.n	8016068 <Argus_Dca_Update+0x7b8>
 8016066:	3001      	adds	r0, #1
 8016068:	2800      	cmp	r0, #0
 801606a:	f6ff ae67 	blt.w	8015d3c <Argus_Dca_Update+0x48c>
 801606e:	b280      	uxth	r0, r0
 8016070:	e666      	b.n	8015d40 <Argus_Dca_Update+0x490>
 8016072:	2400      	movs	r4, #0
 8016074:	1ac8      	subs	r0, r1, r3
 8016076:	b149      	cbz	r1, 801608c <Argus_Dca_Update+0x7dc>
 8016078:	428b      	cmp	r3, r1
 801607a:	d817      	bhi.n	80160ac <Argus_Dca_Update+0x7fc>
 801607c:	4314      	orrs	r4, r2
 801607e:	0852      	lsrs	r2, r2, #1
 8016080:	ea4f 0140 	mov.w	r1, r0, lsl #1
 8016084:	d1f6      	bne.n	8016074 <Argus_Dca_Update+0x7c4>
 8016086:	428b      	cmp	r3, r1
 8016088:	d800      	bhi.n	801608c <Argus_Dca_Update+0x7dc>
 801608a:	3401      	adds	r4, #1
 801608c:	2c00      	cmp	r4, #0
 801608e:	f6ff adc1 	blt.w	8015c14 <Argus_Dca_Update+0x364>
 8016092:	fab4 f384 	clz	r3, r4
 8016096:	f1c3 021e 	rsb	r2, r3, #30
 801609a:	40d4      	lsrs	r4, r2
 801609c:	f1c3 031f 	rsb	r3, r3, #31
 80160a0:	2c03      	cmp	r4, #3
 80160a2:	bf08      	it	eq
 80160a4:	3301      	addeq	r3, #1
 80160a6:	3b10      	subs	r3, #16
 80160a8:	b2db      	uxtb	r3, r3
 80160aa:	e5b4      	b.n	8015c16 <Argus_Dca_Update+0x366>
 80160ac:	0852      	lsrs	r2, r2, #1
 80160ae:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80160b2:	d1df      	bne.n	8016074 <Argus_Dca_Update+0x7c4>
 80160b4:	e7e7      	b.n	8016086 <Argus_Dca_Update+0x7d6>
 80160b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80160ba:	2000      	movs	r0, #0
 80160bc:	f649 4140 	movw	r1, #40000	@ 0x9c40
 80160c0:	e007      	b.n	80160d2 <Argus_Dca_Update+0x822>
 80160c2:	bf00      	nop
 80160c4:	80010000 	.word	0x80010000
 80160c8:	80010001 	.word	0x80010001
 80160cc:	080290e0 	.word	0x080290e0
 80160d0:	b151      	cbz	r1, 80160e8 <Argus_Dca_Update+0x838>
 80160d2:	428b      	cmp	r3, r1
 80160d4:	bf9c      	itt	ls
 80160d6:	1ac9      	subls	r1, r1, r3
 80160d8:	4310      	orrls	r0, r2
 80160da:	0852      	lsrs	r2, r2, #1
 80160dc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80160e0:	d1f6      	bne.n	80160d0 <Argus_Dca_Update+0x820>
 80160e2:	4299      	cmp	r1, r3
 80160e4:	bf28      	it	cs
 80160e6:	3001      	addcs	r0, #1
 80160e8:	2c00      	cmp	r4, #0
 80160ea:	f2c0 8092 	blt.w	8016212 <Argus_Dca_Update+0x962>
 80160ee:	2800      	cmp	r0, #0
 80160f0:	bfb8      	it	lt
 80160f2:	f06f 4000 	mvnlt.w	r0, #2147483648	@ 0x80000000
 80160f6:	e5b5      	b.n	8015c64 <Argus_Dca_Update+0x3b4>
 80160f8:	425b      	negs	r3, r3
 80160fa:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80160fe:	4293      	cmp	r3, r2
 8016100:	f67f ad9e 	bls.w	8015c40 <Argus_Dca_Update+0x390>
 8016104:	2b00      	cmp	r3, #0
 8016106:	dad6      	bge.n	80160b6 <Argus_Dca_Update+0x806>
 8016108:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801610c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8016110:	e7d3      	b.n	80160ba <Argus_Dca_Update+0x80a>
 8016112:	f896 306b 	ldrb.w	r3, [r6, #107]	@ 0x6b
 8016116:	08db      	lsrs	r3, r3, #3
 8016118:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 801611c:	e5f1      	b.n	8015d02 <Argus_Dca_Update+0x452>
 801611e:	f896 306c 	ldrb.w	r3, [r6, #108]	@ 0x6c
 8016122:	f896 206b 	ldrb.w	r2, [r6, #107]	@ 0x6b
 8016126:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801612a:	eb03 03d2 	add.w	r3, r3, r2, lsr #3
 801612e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8016132:	e5e6      	b.n	8015d02 <Argus_Dca_Update+0x452>
 8016134:	f896 306c 	ldrb.w	r3, [r6, #108]	@ 0x6c
 8016138:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801613c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8016140:	e5df      	b.n	8015d02 <Argus_Dca_Update+0x452>
 8016142:	2200      	movs	r2, #0
 8016144:	2b03      	cmp	r3, #3
 8016146:	733a      	strb	r2, [r7, #12]
 8016148:	bf86      	itte	hi
 801614a:	089a      	lsrhi	r2, r3, #2
 801614c:	0192      	lslhi	r2, r2, #6
 801614e:	2240      	movls	r2, #64	@ 0x40
 8016150:	e72b      	b.n	8015faa <Argus_Dca_Update+0x6fa>
 8016152:	f1c9 0200 	rsb	r2, r9, #0
 8016156:	4594      	cmp	ip, r2
 8016158:	f63f ae50 	bhi.w	8015dfc <Argus_Dca_Update+0x54c>
 801615c:	2a00      	cmp	r2, #0
 801615e:	f2c0 8187 	blt.w	8016470 <Argus_Dca_Update+0xbc0>
 8016162:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8016166:	4696      	mov	lr, r2
 8016168:	4662      	mov	r2, ip
 801616a:	f1bc 0f00 	cmp.w	ip, #0
 801616e:	d00d      	beq.n	801618c <Argus_Dca_Update+0x8dc>
 8016170:	2200      	movs	r2, #0
 8016172:	e002      	b.n	801617a <Argus_Dca_Update+0x8ca>
 8016174:	f1bc 0f00 	cmp.w	ip, #0
 8016178:	d008      	beq.n	801618c <Argus_Dca_Update+0x8dc>
 801617a:	45e6      	cmp	lr, ip
 801617c:	bf9c      	itt	ls
 801617e:	ebac 0c0e 	subls.w	ip, ip, lr
 8016182:	431a      	orrls	r2, r3
 8016184:	085b      	lsrs	r3, r3, #1
 8016186:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 801618a:	d1f3      	bne.n	8016174 <Argus_Dca_Update+0x8c4>
 801618c:	45e6      	cmp	lr, ip
 801618e:	bf98      	it	ls
 8016190:	3201      	addls	r2, #1
 8016192:	ea9a 0f09 	teq	sl, r9
 8016196:	d437      	bmi.n	8016208 <Argus_Dca_Update+0x958>
 8016198:	2a00      	cmp	r2, #0
 801619a:	f2c0 8128 	blt.w	80163ee <Argus_Dca_Update+0xb3e>
 801619e:	f5c2 3280 	rsb	r2, r2, #65536	@ 0x10000
 80161a2:	f04f 0900 	mov.w	r9, #0
 80161a6:	e63c      	b.n	8015e22 <Argus_Dca_Update+0x572>
 80161a8:	f034 4300 	bics.w	r3, r4, #2147483648	@ 0x80000000
 80161ac:	f02c 4200 	bic.w	r2, ip, #2147483648	@ 0x80000000
 80161b0:	f47f af12 	bne.w	8015fd8 <Argus_Dca_Update+0x728>
 80161b4:	461c      	mov	r4, r3
 80161b6:	e71a      	b.n	8015fee <Argus_Dca_Update+0x73e>
 80161b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80161bc:	2100      	movs	r1, #0
 80161be:	1aa0      	subs	r0, r4, r2
 80161c0:	b14c      	cbz	r4, 80161d6 <Argus_Dca_Update+0x926>
 80161c2:	42a2      	cmp	r2, r4
 80161c4:	d80c      	bhi.n	80161e0 <Argus_Dca_Update+0x930>
 80161c6:	4319      	orrs	r1, r3
 80161c8:	085b      	lsrs	r3, r3, #1
 80161ca:	ea4f 0440 	mov.w	r4, r0, lsl #1
 80161ce:	d1f6      	bne.n	80161be <Argus_Dca_Update+0x90e>
 80161d0:	42a2      	cmp	r2, r4
 80161d2:	d800      	bhi.n	80161d6 <Argus_Dca_Update+0x926>
 80161d4:	3101      	adds	r1, #1
 80161d6:	2900      	cmp	r1, #0
 80161d8:	f6ff ad03 	blt.w	8015be2 <Argus_Dca_Update+0x332>
 80161dc:	b289      	uxth	r1, r1
 80161de:	e502      	b.n	8015be6 <Argus_Dca_Update+0x336>
 80161e0:	085b      	lsrs	r3, r3, #1
 80161e2:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80161e6:	d1ea      	bne.n	80161be <Argus_Dca_Update+0x90e>
 80161e8:	e7f2      	b.n	80161d0 <Argus_Dca_Update+0x920>
 80161ea:	4aac      	ldr	r2, [pc, #688]	@ (801649c <Argus_Dca_Update+0xbec>)
 80161ec:	e619      	b.n	8015e22 <Argus_Dca_Update+0x572>
 80161ee:	2a00      	cmp	r2, #0
 80161f0:	dab9      	bge.n	8016166 <Argus_Dca_Update+0x8b6>
 80161f2:	f03b 4300 	bics.w	r3, fp, #2147483648	@ 0x80000000
 80161f6:	f000 80a9 	beq.w	801634c <Argus_Dca_Update+0xa9c>
 80161fa:	f1bc 0f00 	cmp.w	ip, #0
 80161fe:	d1b7      	bne.n	8016170 <Argus_Dca_Update+0x8c0>
 8016200:	f1b9 0f00 	cmp.w	r9, #0
 8016204:	4662      	mov	r2, ip
 8016206:	daca      	bge.n	801619e <Argus_Dca_Update+0x8ee>
 8016208:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 801620c:	f04f 0900 	mov.w	r9, #0
 8016210:	e607      	b.n	8015e22 <Argus_Dca_Update+0x572>
 8016212:	4240      	negs	r0, r0
 8016214:	e526      	b.n	8015c64 <Argus_Dca_Update+0x3b4>
 8016216:	f896 306b 	ldrb.w	r3, [r6, #107]	@ 0x6b
 801621a:	08d9      	lsrs	r1, r3, #3
 801621c:	6972      	ldr	r2, [r6, #20]
 801621e:	4ba0      	ldr	r3, [pc, #640]	@ (80164a0 <Argus_Dca_Update+0xbf0>)
 8016220:	f1a2 00fa 	sub.w	r0, r2, #250	@ 0xfa
 8016224:	4298      	cmp	r0, r3
 8016226:	d866      	bhi.n	80162f6 <Argus_Dca_Update+0xa46>
 8016228:	6874      	ldr	r4, [r6, #4]
 801622a:	2cf9      	cmp	r4, #249	@ 0xf9
 801622c:	d963      	bls.n	80162f6 <Argus_Dca_Update+0xa46>
 801622e:	f8b6 3084 	ldrh.w	r3, [r6, #132]	@ 0x84
 8016232:	ba5b      	rev16	r3, r3
 8016234:	f3c3 1049 	ubfx	r0, r3, #5, #10
 8016238:	f8b6 3063 	ldrh.w	r3, [r6, #99]	@ 0x63
 801623c:	ba5b      	rev16	r3, r3
 801623e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8016242:	fb00 3303 	mla	r3, r0, r3, r3
 8016246:	fb01 f303 	mul.w	r3, r1, r3
 801624a:	f5b3 0ffa 	cmp.w	r3, #8192000	@ 0x7d0000
 801624e:	d852      	bhi.n	80162f6 <Argus_Dca_Update+0xa46>
 8016250:	429a      	cmp	r2, r3
 8016252:	d27d      	bcs.n	8016350 <Argus_Dca_Update+0xaa0>
 8016254:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8016258:	0052      	lsls	r2, r2, #1
 801625a:	4293      	cmp	r3, r2
 801625c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016260:	d8fa      	bhi.n	8016258 <Argus_Dca_Update+0x9a8>
 8016262:	2900      	cmp	r1, #0
 8016264:	f040 80e2 	bne.w	801642c <Argus_Dca_Update+0xb7c>
 8016268:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801626c:	f8b5 0298 	ldrh.w	r0, [r5, #664]	@ 0x298
 8016270:	fba0 3203 	umull	r3, r2, r0, r3
 8016274:	fb00 2101 	mla	r1, r0, r1, r2
 8016278:	0bda      	lsrs	r2, r3, #15
 801627a:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 801627e:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8016282:	4413      	add	r3, r2
 8016284:	0c1a      	lsrs	r2, r3, #16
 8016286:	fba4 1202 	umull	r1, r2, r4, r2
 801628a:	2a00      	cmp	r2, #0
 801628c:	f040 80ff 	bne.w	801648e <Argus_Dca_Update+0xbde>
 8016290:	fba3 3404 	umull	r3, r4, r3, r4
 8016294:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8016298:	0c1b      	lsrs	r3, r3, #16
 801629a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801629e:	4413      	add	r3, r2
 80162a0:	f06f 0201 	mvn.w	r2, #1
 80162a4:	429a      	cmp	r2, r3
 80162a6:	bf28      	it	cs
 80162a8:	461a      	movcs	r2, r3
 80162aa:	61ba      	str	r2, [r7, #24]
 80162ac:	b32b      	cbz	r3, 80162fa <Argus_Dca_Update+0xa4a>
 80162ae:	0bd5      	lsrs	r5, r2, #15
 80162b0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80162b4:	8bbc      	ldrh	r4, [r7, #28]
 80162b6:	f897 003e 	ldrb.w	r0, [r7, #62]	@ 0x3e
 80162ba:	f8b6 1104 	ldrh.w	r1, [r6, #260]	@ 0x104
 80162be:	fb04 f202 	mul.w	r2, r4, r2
 80162c2:	0bd3      	lsrs	r3, r2, #15
 80162c4:	fb04 3305 	mla	r3, r4, r5, r3
 80162c8:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80162cc:	2801      	cmp	r0, #1
 80162ce:	4413      	add	r3, r2
 80162d0:	ea4f 1291 	mov.w	r2, r1, lsr #6
 80162d4:	bf38      	it	cc
 80162d6:	2001      	movcc	r0, #1
 80162d8:	2a01      	cmp	r2, #1
 80162da:	bf38      	it	cc
 80162dc:	2201      	movcc	r2, #1
 80162de:	fb00 f202 	mul.w	r2, r0, r2
 80162e2:	4293      	cmp	r3, r2
 80162e4:	d242      	bcs.n	801636c <Argus_Dca_Update+0xabc>
 80162e6:	4298      	cmp	r0, r3
 80162e8:	d936      	bls.n	8016358 <Argus_Dca_Update+0xaa8>
 80162ea:	486e      	ldr	r0, [pc, #440]	@ (80164a4 <Argus_Dca_Update+0xbf4>)
 80162ec:	f7f7 fe10 	bl	800df10 <print>
 80162f0:	f06f 0465 	mvn.w	r4, #101	@ 0x65
 80162f4:	e557      	b.n	8015da6 <Argus_Dca_Update+0x4f6>
 80162f6:	2300      	movs	r3, #0
 80162f8:	61bb      	str	r3, [r7, #24]
 80162fa:	486b      	ldr	r0, [pc, #428]	@ (80164a8 <Argus_Dca_Update+0xbf8>)
 80162fc:	f7f7 fe08 	bl	800df10 <print>
 8016300:	f06f 0465 	mvn.w	r4, #101	@ 0x65
 8016304:	e54f      	b.n	8015da6 <Argus_Dca_Update+0x4f6>
 8016306:	f896 306c 	ldrb.w	r3, [r6, #108]	@ 0x6c
 801630a:	f896 106b 	ldrb.w	r1, [r6, #107]	@ 0x6b
 801630e:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8016312:	eb03 01d1 	add.w	r1, r3, r1, lsr #3
 8016316:	e781      	b.n	801621c <Argus_Dca_Update+0x96c>
 8016318:	f896 306c 	ldrb.w	r3, [r6, #108]	@ 0x6c
 801631c:	f3c3 0144 	ubfx	r1, r3, #1, #5
 8016320:	e77c      	b.n	801621c <Argus_Dca_Update+0x96c>
 8016322:	084b      	lsrs	r3, r1, #1
 8016324:	ea4f 0251 	mov.w	r2, r1, lsr #1
 8016328:	bf18      	it	ne
 801632a:	2200      	movne	r2, #0
 801632c:	f47f ac36 	bne.w	8015b9c <Argus_Dca_Update+0x2ec>
 8016330:	7b30      	ldrb	r0, [r6, #12]
 8016332:	f1c0 0080 	rsb	r0, r0, #128	@ 0x80
 8016336:	b2c0      	uxtb	r0, r0
 8016338:	fbb0 f1f4 	udiv	r1, r0, r4
 801633c:	f887 1020 	strb.w	r1, [r7, #32]
 8016340:	e441      	b.n	8015bc6 <Argus_Dca_Update+0x316>
 8016342:	084a      	lsrs	r2, r1, #1
 8016344:	2308      	movs	r3, #8
 8016346:	e43e      	b.n	8015bc6 <Argus_Dca_Update+0x316>
 8016348:	2260      	movs	r2, #96	@ 0x60
 801634a:	e424      	b.n	8015b96 <Argus_Dca_Update+0x2e6>
 801634c:	461a      	mov	r2, r3
 801634e:	e71d      	b.n	801618c <Argus_Dca_Update+0x8dc>
 8016350:	2b00      	cmp	r3, #0
 8016352:	d169      	bne.n	8016428 <Argus_Dca_Update+0xb78>
 8016354:	61bb      	str	r3, [r7, #24]
 8016356:	e7d0      	b.n	80162fa <Argus_Dca_Update+0xa4a>
 8016358:	fbb3 f3f0 	udiv	r3, r3, r0
 801635c:	019b      	lsls	r3, r3, #6
 801635e:	428b      	cmp	r3, r1
 8016360:	bf28      	it	cs
 8016362:	460b      	movcs	r3, r1
 8016364:	b29b      	uxth	r3, r3
 8016366:	4299      	cmp	r1, r3
 8016368:	bf28      	it	cs
 801636a:	4619      	movcs	r1, r3
 801636c:	84b9      	strh	r1, [r7, #36]	@ 0x24
 801636e:	2400      	movs	r4, #0
 8016370:	e519      	b.n	8015da6 <Argus_Dca_Update+0x4f6>
 8016372:	084a      	lsrs	r2, r1, #1
 8016374:	2310      	movs	r3, #16
 8016376:	e426      	b.n	8015bc6 <Argus_Dca_Update+0x316>
 8016378:	7b30      	ldrb	r0, [r6, #12]
 801637a:	f1c0 0080 	rsb	r0, r0, #128	@ 0x80
 801637e:	b2c0      	uxtb	r0, r0
 8016380:	1a83      	subs	r3, r0, r2
 8016382:	b2db      	uxtb	r3, r3
 8016384:	fbb3 f3f4 	udiv	r3, r3, r4
 8016388:	f887 3020 	strb.w	r3, [r7, #32]
 801638c:	f7ff bb53 	b.w	8015a36 <Argus_Dca_Update+0x186>
 8016390:	2210      	movs	r2, #16
 8016392:	e400      	b.n	8015b96 <Argus_Dca_Update+0x2e6>
 8016394:	2218      	movs	r2, #24
 8016396:	f7ff bbfe 	b.w	8015b96 <Argus_Dca_Update+0x2e6>
 801639a:	084a      	lsrs	r2, r1, #1
 801639c:	2318      	movs	r3, #24
 801639e:	e412      	b.n	8015bc6 <Argus_Dca_Update+0x316>
 80163a0:	2220      	movs	r2, #32
 80163a2:	f7ff bbf8 	b.w	8015b96 <Argus_Dca_Update+0x2e6>
 80163a6:	084a      	lsrs	r2, r1, #1
 80163a8:	2320      	movs	r3, #32
 80163aa:	e40c      	b.n	8015bc6 <Argus_Dca_Update+0x316>
 80163ac:	084a      	lsrs	r2, r1, #1
 80163ae:	2328      	movs	r3, #40	@ 0x28
 80163b0:	e409      	b.n	8015bc6 <Argus_Dca_Update+0x316>
 80163b2:	2228      	movs	r2, #40	@ 0x28
 80163b4:	f7ff bbef 	b.w	8015b96 <Argus_Dca_Update+0x2e6>
 80163b8:	084a      	lsrs	r2, r1, #1
 80163ba:	2330      	movs	r3, #48	@ 0x30
 80163bc:	e403      	b.n	8015bc6 <Argus_Dca_Update+0x316>
 80163be:	2230      	movs	r2, #48	@ 0x30
 80163c0:	f7ff bbe9 	b.w	8015b96 <Argus_Dca_Update+0x2e6>
 80163c4:	084a      	lsrs	r2, r1, #1
 80163c6:	2338      	movs	r3, #56	@ 0x38
 80163c8:	f7ff bbfd 	b.w	8015bc6 <Argus_Dca_Update+0x316>
 80163cc:	2240      	movs	r2, #64	@ 0x40
 80163ce:	f7ff bbe2 	b.w	8015b96 <Argus_Dca_Update+0x2e6>
 80163d2:	2238      	movs	r2, #56	@ 0x38
 80163d4:	f7ff bbdf 	b.w	8015b96 <Argus_Dca_Update+0x2e6>
 80163d8:	084a      	lsrs	r2, r1, #1
 80163da:	2340      	movs	r3, #64	@ 0x40
 80163dc:	f7ff bbf3 	b.w	8015bc6 <Argus_Dca_Update+0x316>
 80163e0:	084a      	lsrs	r2, r1, #1
 80163e2:	2348      	movs	r3, #72	@ 0x48
 80163e4:	f7ff bbef 	b.w	8015bc6 <Argus_Dca_Update+0x316>
 80163e8:	2248      	movs	r2, #72	@ 0x48
 80163ea:	f7ff bbd4 	b.w	8015b96 <Argus_Dca_Update+0x2e6>
 80163ee:	4a2b      	ldr	r2, [pc, #172]	@ (801649c <Argus_Dca_Update+0xbec>)
 80163f0:	f04f 0900 	mov.w	r9, #0
 80163f4:	e515      	b.n	8015e22 <Argus_Dca_Update+0x572>
 80163f6:	084a      	lsrs	r2, r1, #1
 80163f8:	2350      	movs	r3, #80	@ 0x50
 80163fa:	f7ff bbe4 	b.w	8015bc6 <Argus_Dca_Update+0x316>
 80163fe:	2250      	movs	r2, #80	@ 0x50
 8016400:	f7ff bbc9 	b.w	8015b96 <Argus_Dca_Update+0x2e6>
 8016404:	084a      	lsrs	r2, r1, #1
 8016406:	2358      	movs	r3, #88	@ 0x58
 8016408:	f7ff bbdd 	b.w	8015bc6 <Argus_Dca_Update+0x316>
 801640c:	084a      	lsrs	r2, r1, #1
 801640e:	2360      	movs	r3, #96	@ 0x60
 8016410:	f7ff bbd9 	b.w	8015bc6 <Argus_Dca_Update+0x316>
 8016414:	2258      	movs	r2, #88	@ 0x58
 8016416:	f7ff bbbe 	b.w	8015b96 <Argus_Dca_Update+0x2e6>
 801641a:	2268      	movs	r2, #104	@ 0x68
 801641c:	f7ff bbbb 	b.w	8015b96 <Argus_Dca_Update+0x2e6>
 8016420:	084a      	lsrs	r2, r1, #1
 8016422:	2368      	movs	r3, #104	@ 0x68
 8016424:	f7ff bbcf 	b.w	8015bc6 <Argus_Dca_Update+0x316>
 8016428:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 801642c:	2000      	movs	r0, #0
 801642e:	e000      	b.n	8016432 <Argus_Dca_Update+0xb82>
 8016430:	b153      	cbz	r3, 8016448 <Argus_Dca_Update+0xb98>
 8016432:	4293      	cmp	r3, r2
 8016434:	bf24      	itt	cs
 8016436:	1a9b      	subcs	r3, r3, r2
 8016438:	4308      	orrcs	r0, r1
 801643a:	0849      	lsrs	r1, r1, #1
 801643c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016440:	d1f6      	bne.n	8016430 <Argus_Dca_Update+0xb80>
 8016442:	429a      	cmp	r2, r3
 8016444:	d800      	bhi.n	8016448 <Argus_Dca_Update+0xb98>
 8016446:	3001      	adds	r0, #1
 8016448:	2800      	cmp	r0, #0
 801644a:	db1c      	blt.n	8016486 <Argus_Dca_Update+0xbd6>
 801644c:	4603      	mov	r3, r0
 801644e:	17c1      	asrs	r1, r0, #31
 8016450:	e70c      	b.n	801626c <Argus_Dca_Update+0x9bc>
 8016452:	084a      	lsrs	r2, r1, #1
 8016454:	2378      	movs	r3, #120	@ 0x78
 8016456:	f7ff bbb6 	b.w	8015bc6 <Argus_Dca_Update+0x316>
 801645a:	084a      	lsrs	r2, r1, #1
 801645c:	2370      	movs	r3, #112	@ 0x70
 801645e:	f7ff bbb2 	b.w	8015bc6 <Argus_Dca_Update+0x316>
 8016462:	2270      	movs	r2, #112	@ 0x70
 8016464:	f7ff bb97 	b.w	8015b96 <Argus_Dca_Update+0x2e6>
 8016468:	46ce      	mov	lr, r9
 801646a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801646e:	e67b      	b.n	8016168 <Argus_Dca_Update+0x8b8>
 8016470:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 8016474:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016478:	f1bc 0f00 	cmp.w	ip, #0
 801647c:	f47f ae78 	bne.w	8016170 <Argus_Dca_Update+0x8c0>
 8016480:	e6be      	b.n	8016200 <Argus_Dca_Update+0x950>
 8016482:	4608      	mov	r0, r1
 8016484:	e40c      	b.n	8015ca0 <Argus_Dca_Update+0x3f0>
 8016486:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801648a:	2100      	movs	r1, #0
 801648c:	e6ee      	b.n	801626c <Argus_Dca_Update+0x9bc>
 801648e:	f06f 0301 	mvn.w	r3, #1
 8016492:	4d06      	ldr	r5, [pc, #24]	@ (80164ac <Argus_Dca_Update+0xbfc>)
 8016494:	61bb      	str	r3, [r7, #24]
 8016496:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801649a:	e70b      	b.n	80162b4 <Argus_Dca_Update+0xa04>
 801649c:	80010001 	.word	0x80010001
 80164a0:	000185a6 	.word	0x000185a6
 80164a4:	08029134 	.word	0x08029134
 80164a8:	08029104 	.word	0x08029104
 80164ac:	0001ffff 	.word	0x0001ffff

080164b0 <Argus_Dca_Apply>:
 80164b0:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80164b2:	f993 3000 	ldrsb.w	r3, [r3]
 80164b6:	b903      	cbnz	r3, 80164ba <Argus_Dca_Apply+0xa>
 80164b8:	4770      	bx	lr
 80164ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164be:	8803      	ldrh	r3, [r0, #0]
 80164c0:	460d      	mov	r5, r1
 80164c2:	8901      	ldrh	r1, [r0, #8]
 80164c4:	b29b      	uxth	r3, r3
 80164c6:	428b      	cmp	r3, r1
 80164c8:	b083      	sub	sp, #12
 80164ca:	4604      	mov	r4, r0
 80164cc:	d05e      	beq.n	801658c <Argus_Dca_Apply+0xdc>
 80164ce:	8803      	ldrh	r3, [r0, #0]
 80164d0:	8802      	ldrh	r2, [r0, #0]
 80164d2:	8826      	ldrh	r6, [r4, #0]
 80164d4:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 80164d8:	b2b6      	uxth	r6, r6
 80164da:	b290      	uxth	r0, r2
 80164dc:	42be      	cmp	r6, r7
 80164de:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80164e2:	b29b      	uxth	r3, r3
 80164e4:	f002 027e 	and.w	r2, r2, #126	@ 0x7e
 80164e8:	ea4f 1191 	mov.w	r1, r1, lsr #6
 80164ec:	f000 80c8 	beq.w	8016680 <Argus_Dca_Apply+0x1d0>
 80164f0:	005b      	lsls	r3, r3, #1
 80164f2:	f013 037e 	ands.w	r3, r3, #126	@ 0x7e
 80164f6:	f000 80b5 	beq.w	8016664 <Argus_Dca_Apply+0x1b4>
 80164fa:	2a00      	cmp	r2, #0
 80164fc:	f040 819a 	bne.w	8016834 <Argus_Dca_Apply+0x384>
 8016500:	2001      	movs	r0, #1
 8016502:	4281      	cmp	r1, r0
 8016504:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8016508:	d00e      	beq.n	8016528 <Argus_Dca_Apply+0x78>
 801650a:	f895 003d 	ldrb.w	r0, [r5, #61]	@ 0x3d
 801650e:	f885 103e 	strb.w	r1, [r5, #62]	@ 0x3e
 8016512:	f020 0003 	bic.w	r0, r0, #3
 8016516:	ea40 2111 	orr.w	r1, r0, r1, lsr #8
 801651a:	f885 103d 	strb.w	r1, [r5, #61]	@ 0x3d
 801651e:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8016520:	6f81      	ldr	r1, [r0, #120]	@ 0x78
 8016522:	f041 0110 	orr.w	r1, r1, #16
 8016526:	6781      	str	r1, [r0, #120]	@ 0x78
 8016528:	429a      	cmp	r2, r3
 801652a:	d02f      	beq.n	801658c <Argus_Dca_Apply+0xdc>
 801652c:	2a80      	cmp	r2, #128	@ 0x80
 801652e:	6e26      	ldr	r6, [r4, #96]	@ 0x60
 8016530:	f000 818b 	beq.w	801684a <Argus_Dca_Apply+0x39a>
 8016534:	f896 800a 	ldrb.w	r8, [r6, #10]
 8016538:	f894 7020 	ldrb.w	r7, [r4, #32]
 801653c:	fb17 f708 	smulbb	r7, r7, r8
 8016540:	b2ff      	uxtb	r7, r7
 8016542:	ea4f 51c8 	mov.w	r1, r8, lsl #23
 8016546:	f1b8 0f00 	cmp.w	r8, #0
 801654a:	f000 80a4 	beq.w	8016696 <Argus_Dca_Apply+0x1e6>
 801654e:	fb02 f307 	mul.w	r3, r2, r7
 8016552:	428b      	cmp	r3, r1
 8016554:	f240 81e8 	bls.w	8016928 <Argus_Dca_Apply+0x478>
 8016558:	e7fe      	b.n	8016558 <Argus_Dca_Apply+0xa8>
 801655a:	f8d6 104d 	ldr.w	r1, [r6, #77]	@ 0x4d
 801655e:	f8d6 2051 	ldr.w	r2, [r6, #81]	@ 0x51
 8016562:	f8d6 3055 	ldr.w	r3, [r6, #85]	@ 0x55
 8016566:	f8d6 0059 	ldr.w	r0, [r6, #89]	@ 0x59
 801656a:	f8c5 0037 	str.w	r0, [r5, #55]	@ 0x37
 801656e:	f8c5 102b 	str.w	r1, [r5, #43]	@ 0x2b
 8016572:	f8c5 202f 	str.w	r2, [r5, #47]	@ 0x2f
 8016576:	f8c5 3033 	str.w	r3, [r5, #51]	@ 0x33
 801657a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801657c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 801657e:	f042 0204 	orr.w	r2, r2, #4
 8016582:	679a      	str	r2, [r3, #120]	@ 0x78
 8016584:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8016586:	f042 0208 	orr.w	r2, r2, #8
 801658a:	679a      	str	r2, [r3, #120]	@ 0x78
 801658c:	7923      	ldrb	r3, [r4, #4]
 801658e:	7b21      	ldrb	r1, [r4, #12]
 8016590:	428b      	cmp	r3, r1
 8016592:	d025      	beq.n	80165e0 <Argus_Dca_Apply+0x130>
 8016594:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8016596:	2901      	cmp	r1, #1
 8016598:	bf08      	it	eq
 801659a:	f894 303e 	ldrbeq.w	r3, [r4, #62]	@ 0x3e
 801659e:	f892 208e 	ldrb.w	r2, [r2, #142]	@ 0x8e
 80165a2:	bf16      	itet	ne
 80165a4:	2004      	movne	r0, #4
 80165a6:	4618      	moveq	r0, r3
 80165a8:	4603      	movne	r3, r0
 80165aa:	2a02      	cmp	r2, #2
 80165ac:	d063      	beq.n	8016676 <Argus_Dca_Apply+0x1c6>
 80165ae:	2a03      	cmp	r2, #3
 80165b0:	d05e      	beq.n	8016670 <Argus_Dca_Apply+0x1c0>
 80165b2:	2a01      	cmp	r2, #1
 80165b4:	d06b      	beq.n	801668e <Argus_Dca_Apply+0x1de>
 80165b6:	2300      	movs	r3, #0
 80165b8:	461a      	mov	r2, r3
 80165ba:	f895 1045 	ldrb.w	r1, [r5, #69]	@ 0x45
 80165be:	f001 0107 	and.w	r1, r1, #7
 80165c2:	430a      	orrs	r2, r1
 80165c4:	f895 1046 	ldrb.w	r1, [r5, #70]	@ 0x46
 80165c8:	f885 2045 	strb.w	r2, [r5, #69]	@ 0x45
 80165cc:	f021 023e 	bic.w	r2, r1, #62	@ 0x3e
 80165d0:	4313      	orrs	r3, r2
 80165d2:	f885 3046 	strb.w	r3, [r5, #70]	@ 0x46
 80165d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80165d8:	6f93      	ldr	r3, [r2, #120]	@ 0x78
 80165da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80165de:	6793      	str	r3, [r2, #120]	@ 0x78
 80165e0:	7b61      	ldrb	r1, [r4, #13]
 80165e2:	7ba0      	ldrb	r0, [r4, #14]
 80165e4:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
 80165e8:	4421      	add	r1, r4
 80165ea:	f891 303f 	ldrb.w	r3, [r1, #63]	@ 0x3f
 80165ee:	4403      	add	r3, r0
 80165f0:	b2db      	uxtb	r3, r3
 80165f2:	f002 013f 	and.w	r1, r2, #63	@ 0x3f
 80165f6:	428b      	cmp	r3, r1
 80165f8:	d00b      	beq.n	8016612 <Argus_Dca_Apply+0x162>
 80165fa:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80165fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016602:	4313      	orrs	r3, r2
 8016604:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
 8016608:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801660a:	6f93      	ldr	r3, [r2, #120]	@ 0x78
 801660c:	f043 0320 	orr.w	r3, r3, #32
 8016610:	6793      	str	r3, [r2, #120]	@ 0x78
 8016612:	8862      	ldrh	r2, [r4, #2]
 8016614:	8963      	ldrh	r3, [r4, #10]
 8016616:	b292      	uxth	r2, r2
 8016618:	429a      	cmp	r2, r3
 801661a:	d016      	beq.n	801664a <Argus_Dca_Apply+0x19a>
 801661c:	f895 005e 	ldrb.w	r0, [r5, #94]	@ 0x5e
 8016620:	f895 205f 	ldrb.w	r2, [r5, #95]	@ 0x5f
 8016624:	3b01      	subs	r3, #1
 8016626:	f3c3 01c6 	ubfx	r1, r3, #3, #7
 801662a:	f002 021f 	and.w	r2, r2, #31
 801662e:	f020 007f 	bic.w	r0, r0, #127	@ 0x7f
 8016632:	ea42 1343 	orr.w	r3, r2, r3, lsl #5
 8016636:	4301      	orrs	r1, r0
 8016638:	f885 105e 	strb.w	r1, [r5, #94]	@ 0x5e
 801663c:	f885 305f 	strb.w	r3, [r5, #95]	@ 0x5f
 8016640:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016642:	6f93      	ldr	r3, [r2, #120]	@ 0x78
 8016644:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8016648:	6793      	str	r3, [r2, #120]	@ 0x78
 801664a:	f7f6 ffdb 	bl	800d604 <IRQ_LOCK>
 801664e:	f104 0308 	add.w	r3, r4, #8
 8016652:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016656:	e884 0003 	stmia.w	r4, {r0, r1}
 801665a:	b003      	add	sp, #12
 801665c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016660:	f7f6 bfae 	b.w	800d5c0 <IRQ_UNLOCK>
 8016664:	0980      	lsrs	r0, r0, #6
 8016666:	2a00      	cmp	r2, #0
 8016668:	f040 80e9 	bne.w	801683e <Argus_Dca_Apply+0x38e>
 801666c:	2380      	movs	r3, #128	@ 0x80
 801666e:	e748      	b.n	8016502 <Argus_Dca_Apply+0x52>
 8016670:	2901      	cmp	r1, #1
 8016672:	f000 8152 	beq.w	801691a <Argus_Dca_Apply+0x46a>
 8016676:	005b      	lsls	r3, r3, #1
 8016678:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801667c:	2200      	movs	r2, #0
 801667e:	e79c      	b.n	80165ba <Argus_Dca_Apply+0x10a>
 8016680:	2a00      	cmp	r2, #0
 8016682:	f040 80d3 	bne.w	801682c <Argus_Dca_Apply+0x37c>
 8016686:	2280      	movs	r2, #128	@ 0x80
 8016688:	f04f 33ff 	mov.w	r3, #4294967295
 801668c:	e73d      	b.n	801650a <Argus_Dca_Apply+0x5a>
 801668e:	00db      	lsls	r3, r3, #3
 8016690:	b25a      	sxtb	r2, r3
 8016692:	2300      	movs	r3, #0
 8016694:	e791      	b.n	80165ba <Argus_Dca_Apply+0x10a>
 8016696:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 801669a:	f896 b008 	ldrb.w	fp, [r6, #8]
 801669e:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 80166a0:	6af1      	ldr	r1, [r6, #44]	@ 0x2c
 80166a2:	6b32      	ldr	r2, [r6, #48]	@ 0x30
 80166a4:	6bb0      	ldr	r0, [r6, #56]	@ 0x38
 80166a6:	f8c5 0016 	str.w	r0, [r5, #22]
 80166aa:	fb0a 7718 	mls	r7, sl, r8, r7
 80166ae:	44bb      	add	fp, r7
 80166b0:	fa4f f98b 	sxtb.w	r9, fp
 80166b4:	f1b9 0f00 	cmp.w	r9, #0
 80166b8:	f8c5 3012 	str.w	r3, [r5, #18]
 80166bc:	f8c5 100a 	str.w	r1, [r5, #10]
 80166c0:	f8c5 200e 	str.w	r2, [r5, #14]
 80166c4:	f105 030a 	add.w	r3, r5, #10
 80166c8:	dc6c      	bgt.n	80167a4 <Argus_Dca_Apply+0x2f4>
 80166ca:	d00e      	beq.n	80166ea <Argus_Dca_Apply+0x23a>
 80166cc:	f109 0087 	add.w	r0, r9, #135	@ 0x87
 80166d0:	10c2      	asrs	r2, r0, #3
 80166d2:	f1c2 0210 	rsb	r2, r2, #16
 80166d6:	eb03 00e0 	add.w	r0, r3, r0, asr #3
 80166da:	21ff      	movs	r1, #255	@ 0xff
 80166dc:	9301      	str	r3, [sp, #4]
 80166de:	f00d f880 	bl	80237e2 <memset>
 80166e2:	f01b 0f07 	tst.w	fp, #7
 80166e6:	f040 8108 	bne.w	80168fa <Argus_Dca_Apply+0x44a>
 80166ea:	f996 2009 	ldrsb.w	r2, [r6, #9]
 80166ee:	7af3      	ldrb	r3, [r6, #11]
 80166f0:	eb07 0902 	add.w	r9, r7, r2
 80166f4:	b11b      	cbz	r3, 80166fe <Argus_Dca_Apply+0x24e>
 80166f6:	f1ba 0f01 	cmp.w	sl, #1
 80166fa:	f000 8130 	beq.w	801695e <Argus_Dca_Apply+0x4ae>
 80166fe:	f8d6 2041 	ldr.w	r2, [r6, #65]	@ 0x41
 8016702:	f8d6 103d 	ldr.w	r1, [r6, #61]	@ 0x3d
 8016706:	f8d6 3045 	ldr.w	r3, [r6, #69]	@ 0x45
 801670a:	f8d6 0049 	ldr.w	r0, [r6, #73]	@ 0x49
 801670e:	f8c5 201f 	str.w	r2, [r5, #31]
 8016712:	fa4f f289 	sxtb.w	r2, r9
 8016716:	2a00      	cmp	r2, #0
 8016718:	f105 081b 	add.w	r8, r5, #27
 801671c:	f8c5 0027 	str.w	r0, [r5, #39]	@ 0x27
 8016720:	f8c5 101b 	str.w	r1, [r5, #27]
 8016724:	f8c5 3023 	str.w	r3, [r5, #35]	@ 0x23
 8016728:	dc50      	bgt.n	80167cc <Argus_Dca_Apply+0x31c>
 801672a:	f43f af16 	beq.w	801655a <Argus_Dca_Apply+0xaa>
 801672e:	f102 0a87 	add.w	sl, r2, #135	@ 0x87
 8016732:	ea4f 0aea 	mov.w	sl, sl, asr #3
 8016736:	f102 0780 	add.w	r7, r2, #128	@ 0x80
 801673a:	21ff      	movs	r1, #255	@ 0xff
 801673c:	f1ca 0210 	rsb	r2, sl, #16
 8016740:	eb08 000a 	add.w	r0, r8, sl
 8016744:	9201      	str	r2, [sp, #4]
 8016746:	f00d f84c 	bl	80237e2 <memset>
 801674a:	f019 0f07 	tst.w	r9, #7
 801674e:	9a01      	ldr	r2, [sp, #4]
 8016750:	f000 80bc 	beq.w	80168cc <Argus_Dca_Apply+0x41c>
 8016754:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8016758:	21ff      	movs	r1, #255	@ 0xff
 801675a:	f818 3009 	ldrb.w	r3, [r8, r9]
 801675e:	f007 0707 	and.w	r7, r7, #7
 8016762:	fa21 f707 	lsr.w	r7, r1, r7
 8016766:	433b      	orrs	r3, r7
 8016768:	f808 3009 	strb.w	r3, [r8, r9]
 801676c:	f8d6 0051 	ldr.w	r0, [r6, #81]	@ 0x51
 8016770:	f8d6 3055 	ldr.w	r3, [r6, #85]	@ 0x55
 8016774:	f8d6 c04d 	ldr.w	ip, [r6, #77]	@ 0x4d
 8016778:	f8d6 6059 	ldr.w	r6, [r6, #89]	@ 0x59
 801677c:	f8c5 6037 	str.w	r6, [r5, #55]	@ 0x37
 8016780:	f105 062b 	add.w	r6, r5, #43	@ 0x2b
 8016784:	f8c5 002f 	str.w	r0, [r5, #47]	@ 0x2f
 8016788:	f8c5 3033 	str.w	r3, [r5, #51]	@ 0x33
 801678c:	f8c5 c02b 	str.w	ip, [r5, #43]	@ 0x2b
 8016790:	eb06 000a 	add.w	r0, r6, sl
 8016794:	f00d f825 	bl	80237e2 <memset>
 8016798:	f816 3009 	ldrb.w	r3, [r6, r9]
 801679c:	431f      	orrs	r7, r3
 801679e:	f806 7009 	strb.w	r7, [r6, r9]
 80167a2:	e6ea      	b.n	801657a <Argus_Dca_Apply+0xca>
 80167a4:	ea4f 09e9 	mov.w	r9, r9, asr #3
 80167a8:	464a      	mov	r2, r9
 80167aa:	21ff      	movs	r1, #255	@ 0xff
 80167ac:	4618      	mov	r0, r3
 80167ae:	f00d f818 	bl	80237e2 <memset>
 80167b2:	f01b 0b07 	ands.w	fp, fp, #7
 80167b6:	d098      	beq.n	80166ea <Argus_Dca_Apply+0x23a>
 80167b8:	f810 2009 	ldrb.w	r2, [r0, r9]
 80167bc:	21ff      	movs	r1, #255	@ 0xff
 80167be:	fa21 fb0b 	lsr.w	fp, r1, fp
 80167c2:	ea62 020b 	orn	r2, r2, fp
 80167c6:	f800 2009 	strb.w	r2, [r0, r9]
 80167ca:	e78e      	b.n	80166ea <Argus_Dca_Apply+0x23a>
 80167cc:	10d7      	asrs	r7, r2, #3
 80167ce:	463a      	mov	r2, r7
 80167d0:	21ff      	movs	r1, #255	@ 0xff
 80167d2:	4640      	mov	r0, r8
 80167d4:	f00d f805 	bl	80237e2 <memset>
 80167d8:	f019 0907 	ands.w	r9, r9, #7
 80167dc:	d05f      	beq.n	801689e <Argus_Dca_Apply+0x3ee>
 80167de:	f818 3007 	ldrb.w	r3, [r8, r7]
 80167e2:	21ff      	movs	r1, #255	@ 0xff
 80167e4:	fa21 f909 	lsr.w	r9, r1, r9
 80167e8:	ea63 0309 	orn	r3, r3, r9
 80167ec:	f808 3007 	strb.w	r3, [r8, r7]
 80167f0:	f8d6 3055 	ldr.w	r3, [r6, #85]	@ 0x55
 80167f4:	f8d6 004d 	ldr.w	r0, [r6, #77]	@ 0x4d
 80167f8:	f8d6 2051 	ldr.w	r2, [r6, #81]	@ 0x51
 80167fc:	f8d6 6059 	ldr.w	r6, [r6, #89]	@ 0x59
 8016800:	f8c5 3033 	str.w	r3, [r5, #51]	@ 0x33
 8016804:	f105 032b 	add.w	r3, r5, #43	@ 0x2b
 8016808:	f8c5 002b 	str.w	r0, [r5, #43]	@ 0x2b
 801680c:	f8c5 202f 	str.w	r2, [r5, #47]	@ 0x2f
 8016810:	f8c5 6037 	str.w	r6, [r5, #55]	@ 0x37
 8016814:	463a      	mov	r2, r7
 8016816:	4618      	mov	r0, r3
 8016818:	f00c ffe3 	bl	80237e2 <memset>
 801681c:	5dc2      	ldrb	r2, [r0, r7]
 801681e:	ea6f 0909 	mvn.w	r9, r9
 8016822:	ea49 0902 	orr.w	r9, r9, r2
 8016826:	f800 9007 	strb.w	r9, [r0, r7]
 801682a:	e6a6      	b.n	801657a <Argus_Dca_Apply+0xca>
 801682c:	f04f 33ff 	mov.w	r3, #4294967295
 8016830:	2101      	movs	r1, #1
 8016832:	e66a      	b.n	801650a <Argus_Dca_Apply+0x5a>
 8016834:	4293      	cmp	r3, r2
 8016836:	f43f aea9 	beq.w	801658c <Argus_Dca_Apply+0xdc>
 801683a:	6e26      	ldr	r6, [r4, #96]	@ 0x60
 801683c:	e67a      	b.n	8016534 <Argus_Dca_Apply+0x84>
 801683e:	2801      	cmp	r0, #1
 8016840:	f43f ae74 	beq.w	801652c <Argus_Dca_Apply+0x7c>
 8016844:	2380      	movs	r3, #128	@ 0x80
 8016846:	2101      	movs	r1, #1
 8016848:	e65f      	b.n	801650a <Argus_Dca_Apply+0x5a>
 801684a:	f8d6 202f 	ldr.w	r2, [r6, #47]	@ 0x2f
 801684e:	f8d6 3033 	ldr.w	r3, [r6, #51]	@ 0x33
 8016852:	f8d6 102b 	ldr.w	r1, [r6, #43]	@ 0x2b
 8016856:	f8d6 0037 	ldr.w	r0, [r6, #55]	@ 0x37
 801685a:	f8c5 0015 	str.w	r0, [r5, #21]
 801685e:	f8c5 200d 	str.w	r2, [r5, #13]
 8016862:	f8c5 1009 	str.w	r1, [r5, #9]
 8016866:	f8c5 3011 	str.w	r3, [r5, #17]
 801686a:	f896 303b 	ldrb.w	r3, [r6, #59]	@ 0x3b
 801686e:	766b      	strb	r3, [r5, #25]
 8016870:	f105 021a 	add.w	r2, r5, #26
 8016874:	f106 033c 	add.w	r3, r6, #60	@ 0x3c
 8016878:	365c      	adds	r6, #92	@ 0x5c
 801687a:	681f      	ldr	r7, [r3, #0]
 801687c:	6858      	ldr	r0, [r3, #4]
 801687e:	6899      	ldr	r1, [r3, #8]
 8016880:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8016884:	f8c2 c00c 	str.w	ip, [r2, #12]
 8016888:	3310      	adds	r3, #16
 801688a:	42b3      	cmp	r3, r6
 801688c:	6017      	str	r7, [r2, #0]
 801688e:	6050      	str	r0, [r2, #4]
 8016890:	6091      	str	r1, [r2, #8]
 8016892:	f102 0210 	add.w	r2, r2, #16
 8016896:	d1f0      	bne.n	801687a <Argus_Dca_Apply+0x3ca>
 8016898:	781b      	ldrb	r3, [r3, #0]
 801689a:	7013      	strb	r3, [r2, #0]
 801689c:	e66d      	b.n	801657a <Argus_Dca_Apply+0xca>
 801689e:	f8d6 004d 	ldr.w	r0, [r6, #77]	@ 0x4d
 80168a2:	f8d6 1051 	ldr.w	r1, [r6, #81]	@ 0x51
 80168a6:	f8d6 3055 	ldr.w	r3, [r6, #85]	@ 0x55
 80168aa:	f8d6 6059 	ldr.w	r6, [r6, #89]	@ 0x59
 80168ae:	f8c5 6037 	str.w	r6, [r5, #55]	@ 0x37
 80168b2:	f8c5 002b 	str.w	r0, [r5, #43]	@ 0x2b
 80168b6:	f8c5 102f 	str.w	r1, [r5, #47]	@ 0x2f
 80168ba:	463a      	mov	r2, r7
 80168bc:	f8c5 3033 	str.w	r3, [r5, #51]	@ 0x33
 80168c0:	21ff      	movs	r1, #255	@ 0xff
 80168c2:	f105 002b 	add.w	r0, r5, #43	@ 0x2b
 80168c6:	f00c ff8c 	bl	80237e2 <memset>
 80168ca:	e656      	b.n	801657a <Argus_Dca_Apply+0xca>
 80168cc:	f8d6 004d 	ldr.w	r0, [r6, #77]	@ 0x4d
 80168d0:	f8d6 1051 	ldr.w	r1, [r6, #81]	@ 0x51
 80168d4:	f8d6 3055 	ldr.w	r3, [r6, #85]	@ 0x55
 80168d8:	f8d6 6059 	ldr.w	r6, [r6, #89]	@ 0x59
 80168dc:	f8c5 002b 	str.w	r0, [r5, #43]	@ 0x2b
 80168e0:	f105 002b 	add.w	r0, r5, #43	@ 0x2b
 80168e4:	f8c5 102f 	str.w	r1, [r5, #47]	@ 0x2f
 80168e8:	f8c5 6037 	str.w	r6, [r5, #55]	@ 0x37
 80168ec:	f8c5 3033 	str.w	r3, [r5, #51]	@ 0x33
 80168f0:	21ff      	movs	r1, #255	@ 0xff
 80168f2:	4450      	add	r0, sl
 80168f4:	f00c ff75 	bl	80237e2 <memset>
 80168f8:	e63f      	b.n	801657a <Argus_Dca_Apply+0xca>
 80168fa:	f109 0980 	add.w	r9, r9, #128	@ 0x80
 80168fe:	ea4f 01e9 	mov.w	r1, r9, asr #3
 8016902:	9b01      	ldr	r3, [sp, #4]
 8016904:	f009 0907 	and.w	r9, r9, #7
 8016908:	5c58      	ldrb	r0, [r3, r1]
 801690a:	22ff      	movs	r2, #255	@ 0xff
 801690c:	fa22 f909 	lsr.w	r9, r2, r9
 8016910:	ea49 0900 	orr.w	r9, r9, r0
 8016914:	f803 9001 	strb.w	r9, [r3, r1]
 8016918:	e6e7      	b.n	80166ea <Argus_Dca_Apply+0x23a>
 801691a:	0840      	lsrs	r0, r0, #1
 801691c:	00c3      	lsls	r3, r0, #3
 801691e:	0040      	lsls	r0, r0, #1
 8016920:	b25a      	sxtb	r2, r3
 8016922:	f000 033e 	and.w	r3, r0, #62	@ 0x3e
 8016926:	e648      	b.n	80165ba <Argus_Dca_Apply+0x10a>
 8016928:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801692c:	2000      	movs	r0, #0
 801692e:	eba3 0c01 	sub.w	ip, r3, r1
 8016932:	b14b      	cbz	r3, 8016948 <Argus_Dca_Apply+0x498>
 8016934:	4299      	cmp	r1, r3
 8016936:	d80d      	bhi.n	8016954 <Argus_Dca_Apply+0x4a4>
 8016938:	4310      	orrs	r0, r2
 801693a:	0852      	lsrs	r2, r2, #1
 801693c:	ea4f 034c 	mov.w	r3, ip, lsl #1
 8016940:	d1f5      	bne.n	801692e <Argus_Dca_Apply+0x47e>
 8016942:	428b      	cmp	r3, r1
 8016944:	d300      	bcc.n	8016948 <Argus_Dca_Apply+0x498>
 8016946:	3001      	adds	r0, #1
 8016948:	2800      	cmp	r0, #0
 801694a:	bfac      	ite	ge
 801694c:	4682      	movge	sl, r0
 801694e:	f06f 4a00 	mvnlt.w	sl, #2147483648	@ 0x80000000
 8016952:	e6a2      	b.n	801669a <Argus_Dca_Apply+0x1ea>
 8016954:	0852      	lsrs	r2, r2, #1
 8016956:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801695a:	d1e8      	bne.n	801692e <Argus_Dca_Apply+0x47e>
 801695c:	e7f1      	b.n	8016942 <Argus_Dca_Apply+0x492>
 801695e:	7a33      	ldrb	r3, [r6, #8]
 8016960:	1a9a      	subs	r2, r3, r2
 8016962:	4590      	cmp	r8, r2
 8016964:	443b      	add	r3, r7
 8016966:	f73f aeca 	bgt.w	80166fe <Argus_Dca_Apply+0x24e>
 801696a:	eb08 0209 	add.w	r2, r8, r9
 801696e:	1a9b      	subs	r3, r3, r2
 8016970:	e000      	b.n	8016974 <Argus_Dca_Apply+0x4c4>
 8016972:	4442      	add	r2, r8
 8016974:	ebb3 0308 	subs.w	r3, r3, r8
 8016978:	4691      	mov	r9, r2
 801697a:	dafa      	bge.n	8016972 <Argus_Dca_Apply+0x4c2>
 801697c:	e6bf      	b.n	80166fe <Argus_Dca_Apply+0x24e>
 801697e:	bf00      	nop

08016980 <Argus_Dca_RecoverLaserFailure>:
 8016980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016982:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8016984:	8b5c      	ldrh	r4, [r3, #26]
 8016986:	b083      	sub	sp, #12
 8016988:	b914      	cbnz	r4, 8016990 <Argus_Dca_RecoverLaserFailure+0x10>
 801698a:	2000      	movs	r0, #0
 801698c:	b003      	add	sp, #12
 801698e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016990:	4605      	mov	r5, r0
 8016992:	a901      	add	r1, sp, #4
 8016994:	4668      	mov	r0, sp
 8016996:	f7f7 f9e3 	bl	800dd60 <Timer_GetCounterValue>
 801699a:	4b2a      	ldr	r3, [pc, #168]	@ (8016a44 <Argus_Dca_RecoverLaserFailure+0xc4>)
 801699c:	6928      	ldr	r0, [r5, #16]
 801699e:	9e00      	ldr	r6, [sp, #0]
 80169a0:	fba3 2304 	umull	r2, r3, r3, r4
 80169a4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80169a8:	099f      	lsrs	r7, r3, #6
 80169aa:	696a      	ldr	r2, [r5, #20]
 80169ac:	fb01 4417 	mls	r4, r1, r7, r4
 80169b0:	fb01 2404 	mla	r4, r1, r4, r2
 80169b4:	4924      	ldr	r1, [pc, #144]	@ (8016a48 <Argus_Dca_RecoverLaserFailure+0xc8>)
 80169b6:	9f01      	ldr	r7, [sp, #4]
 80169b8:	428c      	cmp	r4, r1
 80169ba:	eb00 1393 	add.w	r3, r0, r3, lsr #6
 80169be:	d813      	bhi.n	80169e8 <Argus_Dca_RecoverLaserFailure+0x68>
 80169c0:	4298      	cmp	r0, r3
 80169c2:	d018      	beq.n	80169f6 <Argus_Dca_RecoverLaserFailure+0x76>
 80169c4:	bf34      	ite	cc
 80169c6:	2101      	movcc	r1, #1
 80169c8:	2100      	movcs	r1, #0
 80169ca:	b1f1      	cbz	r1, 8016a0a <Argus_Dca_RecoverLaserFailure+0x8a>
 80169cc:	42b0      	cmp	r0, r6
 80169ce:	d017      	beq.n	8016a00 <Argus_Dca_RecoverLaserFailure+0x80>
 80169d0:	bf34      	ite	cc
 80169d2:	2201      	movcc	r2, #1
 80169d4:	2200      	movcs	r2, #0
 80169d6:	b9fa      	cbnz	r2, 8016a18 <Argus_Dca_RecoverLaserFailure+0x98>
 80169d8:	f105 0010 	add.w	r0, r5, #16
 80169dc:	f105 0114 	add.w	r1, r5, #20
 80169e0:	f7f7 f9be 	bl	800dd60 <Timer_GetCounterValue>
 80169e4:	2001      	movs	r0, #1
 80169e6:	e7d1      	b.n	801698c <Argus_Dca_RecoverLaserFailure+0xc>
 80169e8:	3301      	adds	r3, #1
 80169ea:	f5a4 2474 	sub.w	r4, r4, #999424	@ 0xf4000
 80169ee:	4298      	cmp	r0, r3
 80169f0:	f5a4 7410 	sub.w	r4, r4, #576	@ 0x240
 80169f4:	d1e6      	bne.n	80169c4 <Argus_Dca_RecoverLaserFailure+0x44>
 80169f6:	42a2      	cmp	r2, r4
 80169f8:	bf8c      	ite	hi
 80169fa:	2100      	movhi	r1, #0
 80169fc:	2101      	movls	r1, #1
 80169fe:	e7e4      	b.n	80169ca <Argus_Dca_RecoverLaserFailure+0x4a>
 8016a00:	42ba      	cmp	r2, r7
 8016a02:	bf8c      	ite	hi
 8016a04:	2200      	movhi	r2, #0
 8016a06:	2201      	movls	r2, #1
 8016a08:	e7e5      	b.n	80169d6 <Argus_Dca_RecoverLaserFailure+0x56>
 8016a0a:	42b0      	cmp	r0, r6
 8016a0c:	d00c      	beq.n	8016a28 <Argus_Dca_RecoverLaserFailure+0xa8>
 8016a0e:	d3bc      	bcc.n	801698a <Argus_Dca_RecoverLaserFailure+0xa>
 8016a10:	42b3      	cmp	r3, r6
 8016a12:	d00c      	beq.n	8016a2e <Argus_Dca_RecoverLaserFailure+0xae>
 8016a14:	d2b9      	bcs.n	801698a <Argus_Dca_RecoverLaserFailure+0xa>
 8016a16:	e7df      	b.n	80169d8 <Argus_Dca_RecoverLaserFailure+0x58>
 8016a18:	42b3      	cmp	r3, r6
 8016a1a:	d00b      	beq.n	8016a34 <Argus_Dca_RecoverLaserFailure+0xb4>
 8016a1c:	bf34      	ite	cc
 8016a1e:	2401      	movcc	r4, #1
 8016a20:	2400      	movcs	r4, #0
 8016a22:	2c00      	cmp	r4, #0
 8016a24:	d0b1      	beq.n	801698a <Argus_Dca_RecoverLaserFailure+0xa>
 8016a26:	e7d7      	b.n	80169d8 <Argus_Dca_RecoverLaserFailure+0x58>
 8016a28:	42ba      	cmp	r2, r7
 8016a2a:	d9ae      	bls.n	801698a <Argus_Dca_RecoverLaserFailure+0xa>
 8016a2c:	e7f0      	b.n	8016a10 <Argus_Dca_RecoverLaserFailure+0x90>
 8016a2e:	42a7      	cmp	r7, r4
 8016a30:	d2d2      	bcs.n	80169d8 <Argus_Dca_RecoverLaserFailure+0x58>
 8016a32:	e7aa      	b.n	801698a <Argus_Dca_RecoverLaserFailure+0xa>
 8016a34:	42a7      	cmp	r7, r4
 8016a36:	bf34      	ite	cc
 8016a38:	2400      	movcc	r4, #0
 8016a3a:	2401      	movcs	r4, #1
 8016a3c:	2c00      	cmp	r4, #0
 8016a3e:	d0a4      	beq.n	801698a <Argus_Dca_RecoverLaserFailure+0xa>
 8016a40:	e7ca      	b.n	80169d8 <Argus_Dca_RecoverLaserFailure+0x58>
 8016a42:	bf00      	nop
 8016a44:	10624dd3 	.word	0x10624dd3
 8016a48:	000f423f 	.word	0x000f423f

08016a4c <Argus_Dca_UpdateTimings>:
 8016a4c:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8016a4e:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	1a59      	subs	r1, r3, r1
 8016a54:	428a      	cmp	r2, r1
 8016a56:	da0e      	bge.n	8016a76 <Argus_Dca_UpdateTimings+0x2a>
 8016a58:	1a89      	subs	r1, r1, r2
 8016a5a:	17cb      	asrs	r3, r1, #31
 8016a5c:	019b      	lsls	r3, r3, #6
 8016a5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8016a62:	f3c1 0c40 	ubfx	ip, r1, #1, #1
 8016a66:	f3c1 0197 	ubfx	r1, r1, #2, #24
 8016a6a:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
 8016a6e:	4411      	add	r1, r2
 8016a70:	4461      	add	r1, ip
 8016a72:	6301      	str	r1, [r0, #48]	@ 0x30
 8016a74:	4770      	bx	lr
 8016a76:	1a51      	subs	r1, r2, r1
 8016a78:	17cb      	asrs	r3, r1, #31
 8016a7a:	019b      	lsls	r3, r3, #6
 8016a7c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8016a80:	f3c1 0c97 	ubfx	ip, r1, #2, #24
 8016a84:	ea4c 6c03 	orr.w	ip, ip, r3, lsl #24
 8016a88:	eba2 020c 	sub.w	r2, r2, ip
 8016a8c:	f3c1 0140 	ubfx	r1, r1, #1, #1
 8016a90:	1a51      	subs	r1, r2, r1
 8016a92:	6301      	str	r1, [r0, #48]	@ 0x30
 8016a94:	4770      	bx	lr
 8016a96:	bf00      	nop

08016a98 <Argus_Dca_Evaluate>:
 8016a98:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8016a9a:	f993 3000 	ldrsb.w	r3, [r3]
 8016a9e:	b903      	cbnz	r3, 8016aa2 <Argus_Dca_Evaluate+0xa>
 8016aa0:	4770      	bx	lr
 8016aa2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016aa6:	4604      	mov	r4, r0
 8016aa8:	b08f      	sub	sp, #60	@ 0x3c
 8016aaa:	460d      	mov	r5, r1
 8016aac:	f7f6 fdaa 	bl	800d604 <IRQ_LOCK>
 8016ab0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8016ab4:	ab0a      	add	r3, sp, #40	@ 0x28
 8016ab6:	e883 0003 	stmia.w	r3, {r0, r1}
 8016aba:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8016abe:	9303      	str	r3, [sp, #12]
 8016ac0:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8016ac4:	9306      	str	r3, [sp, #24]
 8016ac6:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8016aca:	9305      	str	r3, [sp, #20]
 8016acc:	f99d 302e 	ldrsb.w	r3, [sp, #46]	@ 0x2e
 8016ad0:	9304      	str	r3, [sp, #16]
 8016ad2:	8923      	ldrh	r3, [r4, #8]
 8016ad4:	9300      	str	r3, [sp, #0]
 8016ad6:	7b23      	ldrb	r3, [r4, #12]
 8016ad8:	9301      	str	r3, [sp, #4]
 8016ada:	7be3      	ldrb	r3, [r4, #15]
 8016adc:	9302      	str	r3, [sp, #8]
 8016ade:	f89d 802d 	ldrb.w	r8, [sp, #45]	@ 0x2d
 8016ae2:	8967      	ldrh	r7, [r4, #10]
 8016ae4:	f894 b00d 	ldrb.w	fp, [r4, #13]
 8016ae8:	f994 600e 	ldrsb.w	r6, [r4, #14]
 8016aec:	f7f6 fd68 	bl	800d5c0 <IRQ_UNLOCK>
 8016af0:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8016af2:	f990 3000 	ldrsb.w	r3, [r0]
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	dd7e      	ble.n	8016bf8 <Argus_Dca_Evaluate+0x160>
 8016afa:	f895 31b0 	ldrb.w	r3, [r5, #432]	@ 0x1b0
 8016afe:	9307      	str	r3, [sp, #28]
 8016b00:	07db      	lsls	r3, r3, #31
 8016b02:	f140 80d0 	bpl.w	8016ca6 <Argus_Dca_Evaluate+0x20e>
 8016b06:	f8b5 c01c 	ldrh.w	ip, [r5, #28]
 8016b0a:	69aa      	ldr	r2, [r5, #24]
 8016b0c:	f8d4 e060 	ldr.w	lr, [r4, #96]	@ 0x60
 8016b10:	f1bc 0f40 	cmp.w	ip, #64	@ 0x40
 8016b14:	bf38      	it	cc
 8016b16:	f04f 0c40 	movcc.w	ip, #64	@ 0x40
 8016b1a:	f402 5900 	and.w	r9, r2, #8192	@ 0x2000
 8016b1e:	2300      	movs	r3, #0
 8016b20:	f8be 1014 	ldrh.w	r1, [lr, #20]
 8016b24:	fb0c fc01 	mul.w	ip, ip, r1
 8016b28:	ea4f 2cac 	mov.w	ip, ip, asr #10
 8016b2c:	f1b9 0f00 	cmp.w	r9, #0
 8016b30:	d107      	bne.n	8016b42 <Argus_Dca_Evaluate+0xaa>
 8016b32:	fa1f fc8c 	uxth.w	ip, ip
 8016b36:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8016b3a:	f894 c03e 	ldrb.w	ip, [r4, #62]	@ 0x3e
 8016b3e:	fbb1 fcfc 	udiv	ip, r1, ip
 8016b42:	fa1f fc8c 	uxth.w	ip, ip
 8016b46:	f105 0128 	add.w	r1, r5, #40	@ 0x28
 8016b4a:	f505 7ad4 	add.w	sl, r5, #424	@ 0x1a8
 8016b4e:	e007      	b.n	8016b60 <Argus_Dca_Evaluate+0xc8>
 8016b50:	f010 0f02 	tst.w	r0, #2
 8016b54:	bf18      	it	ne
 8016b56:	2301      	movne	r3, #1
 8016b58:	310c      	adds	r1, #12
 8016b5a:	4551      	cmp	r1, sl
 8016b5c:	f000 80c6 	beq.w	8016cec <Argus_Dca_Evaluate+0x254>
 8016b60:	7a08      	ldrb	r0, [r1, #8]
 8016b62:	f010 0f01 	tst.w	r0, #1
 8016b66:	d1f7      	bne.n	8016b58 <Argus_Dca_Evaluate+0xc0>
 8016b68:	f8b1 9006 	ldrh.w	r9, [r1, #6]
 8016b6c:	45e1      	cmp	r9, ip
 8016b6e:	d9ef      	bls.n	8016b50 <Argus_Dca_Evaluate+0xb8>
 8016b70:	6963      	ldr	r3, [r4, #20]
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	f000 8198 	beq.w	8016ea8 <Argus_Dca_Evaluate+0x410>
 8016b78:	a90d      	add	r1, sp, #52	@ 0x34
 8016b7a:	a80c      	add	r0, sp, #48	@ 0x30
 8016b7c:	f8be 9018 	ldrh.w	r9, [lr, #24]
 8016b80:	f7f7 f8ee 	bl	800dd60 <Timer_GetCounterValue>
 8016b84:	4b85      	ldr	r3, [pc, #532]	@ (8016d9c <Argus_Dca_Evaluate+0x304>)
 8016b86:	4986      	ldr	r1, [pc, #536]	@ (8016da0 <Argus_Dca_Evaluate+0x308>)
 8016b88:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8016b8c:	fba3 3c09 	umull	r3, ip, r3, r9
 8016b90:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016b94:	ea4f 109c 	mov.w	r0, ip, lsr #6
 8016b98:	6963      	ldr	r3, [r4, #20]
 8016b9a:	fb02 9010 	mls	r0, r2, r0, r9
 8016b9e:	fb02 3000 	mla	r0, r2, r0, r3
 8016ba2:	4288      	cmp	r0, r1
 8016ba4:	e9dd 920c 	ldrd	r9, r2, [sp, #48]	@ 0x30
 8016ba8:	eb0e 1c9c 	add.w	ip, lr, ip, lsr #6
 8016bac:	d905      	bls.n	8016bba <Argus_Dca_Evaluate+0x122>
 8016bae:	f5a0 2074 	sub.w	r0, r0, #999424	@ 0xf4000
 8016bb2:	f10c 0c01 	add.w	ip, ip, #1
 8016bb6:	f5a0 7010 	sub.w	r0, r0, #576	@ 0x240
 8016bba:	45e6      	cmp	lr, ip
 8016bbc:	f000 8179 	beq.w	8016eb2 <Argus_Dca_Evaluate+0x41a>
 8016bc0:	bf34      	ite	cc
 8016bc2:	2101      	movcc	r1, #1
 8016bc4:	2100      	movcs	r1, #0
 8016bc6:	2900      	cmp	r1, #0
 8016bc8:	f000 81b0 	beq.w	8016f2c <Argus_Dca_Evaluate+0x494>
 8016bcc:	45ce      	cmp	lr, r9
 8016bce:	f000 820e 	beq.w	8016fee <Argus_Dca_Evaluate+0x556>
 8016bd2:	bf34      	ite	cc
 8016bd4:	2301      	movcc	r3, #1
 8016bd6:	2300      	movcs	r3, #0
 8016bd8:	b153      	cbz	r3, 8016bf0 <Argus_Dca_Evaluate+0x158>
 8016bda:	45cc      	cmp	ip, r9
 8016bdc:	f000 820c 	beq.w	8016ff8 <Argus_Dca_Evaluate+0x560>
 8016be0:	bf34      	ite	cc
 8016be2:	2201      	movcc	r2, #1
 8016be4:	2200      	movcs	r2, #0
 8016be6:	f082 0201 	eor.w	r2, r2, #1
 8016bea:	2a00      	cmp	r2, #0
 8016bec:	f040 80c0 	bne.w	8016d70 <Argus_Dca_Evaluate+0x2d8>
 8016bf0:	69aa      	ldr	r2, [r5, #24]
 8016bf2:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8016bf6:	e000      	b.n	8016bfa <Argus_Dca_Evaluate+0x162>
 8016bf8:	69aa      	ldr	r2, [r5, #24]
 8016bfa:	f8b5 31c4 	ldrh.w	r3, [r5, #452]	@ 0x1c4
 8016bfe:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8016c02:	428b      	cmp	r3, r1
 8016c04:	d005      	beq.n	8016c12 <Argus_Dca_Evaluate+0x17a>
 8016c06:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8016c08:	f8b1 00c2 	ldrh.w	r0, [r1, #194]	@ 0xc2
 8016c0c:	4298      	cmp	r0, r3
 8016c0e:	f0c0 816b 	bcc.w	8016ee8 <Argus_Dca_Evaluate+0x450>
 8016c12:	0593      	lsls	r3, r2, #22
 8016c14:	61aa      	str	r2, [r5, #24]
 8016c16:	f100 80af 	bmi.w	8016d78 <Argus_Dca_Evaluate+0x2e0>
 8016c1a:	f012 0240 	ands.w	r2, r2, #64	@ 0x40
 8016c1e:	f040 8214 	bne.w	801704a <Argus_Dca_Evaluate+0x5b2>
 8016c22:	682b      	ldr	r3, [r5, #0]
 8016c24:	1d99      	adds	r1, r3, #6
 8016c26:	d02a      	beq.n	8016c7e <Argus_Dca_Evaluate+0x1e6>
 8016c28:	3372      	adds	r3, #114	@ 0x72
 8016c2a:	f000 8174 	beq.w	8016f16 <Argus_Dca_Evaluate+0x47e>
 8016c2e:	f8b5 31c0 	ldrh.w	r3, [r5, #448]	@ 0x1c0
 8016c32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016c36:	4293      	cmp	r3, r2
 8016c38:	f000 8169 	beq.w	8016f0e <Argus_Dca_Evaluate+0x476>
 8016c3c:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
 8016c3e:	9804      	ldr	r0, [sp, #16]
 8016c40:	eb04 0148 	add.w	r1, r4, r8, lsl #1
 8016c44:	fb00 f002 	mul.w	r0, r0, r2
 8016c48:	f8b1 2044 	ldrh.w	r2, [r1, #68]	@ 0x44
 8016c4c:	1ad2      	subs	r2, r2, r3
 8016c4e:	fa00 f282 	sxtah	r2, r0, r2
 8016c52:	2a00      	cmp	r2, #0
 8016c54:	f340 811e 	ble.w	8016e94 <Argus_Dca_Evaluate+0x3fc>
 8016c58:	f8b1 e04c 	ldrh.w	lr, [r1, #76]	@ 0x4c
 8016c5c:	b292      	uxth	r2, r2
 8016c5e:	fb0e f202 	mul.w	r2, lr, r2
 8016c62:	f3c2 3ec0 	ubfx	lr, r2, #15, #1
 8016c66:	eb0e 4212 	add.w	r2, lr, r2, lsr #16
 8016c6a:	fa1f fe82 	uxth.w	lr, r2
 8016c6e:	f8a5 e1c6 	strh.w	lr, [r5, #454]	@ 0x1c6
 8016c72:	f8b5 c01c 	ldrh.w	ip, [r5, #28]
 8016c76:	9a03      	ldr	r2, [sp, #12]
 8016c78:	4594      	cmp	ip, r2
 8016c7a:	f000 8097 	beq.w	8016dac <Argus_Dca_Evaluate+0x314>
 8016c7e:	f7f6 fcc1 	bl	800d604 <IRQ_LOCK>
 8016c82:	8863      	ldrh	r3, [r4, #2]
 8016c84:	b29b      	uxth	r3, r3
 8016c86:	b14b      	cbz	r3, 8016c9c <Argus_Dca_Evaluate+0x204>
 8016c88:	9b00      	ldr	r3, [sp, #0]
 8016c8a:	8123      	strh	r3, [r4, #8]
 8016c8c:	9b01      	ldr	r3, [sp, #4]
 8016c8e:	7323      	strb	r3, [r4, #12]
 8016c90:	9b02      	ldr	r3, [sp, #8]
 8016c92:	8167      	strh	r7, [r4, #10]
 8016c94:	f884 b00d 	strb.w	fp, [r4, #13]
 8016c98:	73a6      	strb	r6, [r4, #14]
 8016c9a:	73e3      	strb	r3, [r4, #15]
 8016c9c:	b00f      	add	sp, #60	@ 0x3c
 8016c9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ca2:	f7f6 bc8d 	b.w	800d5c0 <IRQ_UNLOCK>
 8016ca6:	f8b5 a01c 	ldrh.w	sl, [r5, #28]
 8016caa:	f8d4 e060 	ldr.w	lr, [r4, #96]	@ 0x60
 8016cae:	69aa      	ldr	r2, [r5, #24]
 8016cb0:	f8be 1016 	ldrh.w	r1, [lr, #22]
 8016cb4:	f1ba 0f40 	cmp.w	sl, #64	@ 0x40
 8016cb8:	46d4      	mov	ip, sl
 8016cba:	bf38      	it	cc
 8016cbc:	f04f 0c40 	movcc.w	ip, #64	@ 0x40
 8016cc0:	fb0c f101 	mul.w	r1, ip, r1
 8016cc4:	f412 5900 	ands.w	r9, r2, #8192	@ 0x2000
 8016cc8:	ea4f 21a1 	mov.w	r1, r1, asr #10
 8016ccc:	f000 80e5 	beq.w	8016e9a <Argus_Dca_Evaluate+0x402>
 8016cd0:	f8b5 31ae 	ldrh.w	r3, [r5, #430]	@ 0x1ae
 8016cd4:	b289      	uxth	r1, r1
 8016cd6:	428b      	cmp	r3, r1
 8016cd8:	f200 8177 	bhi.w	8016fca <Argus_Dca_Evaluate+0x532>
 8016cdc:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 8016cde:	4551      	cmp	r1, sl
 8016ce0:	f000 812d 	beq.w	8016f3e <Argus_Dca_Evaluate+0x4a6>
 8016ce4:	9b07      	ldr	r3, [sp, #28]
 8016ce6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8016cea:	e719      	b.n	8016b20 <Argus_Dca_Evaluate+0x88>
 8016cec:	6961      	ldr	r1, [r4, #20]
 8016cee:	b969      	cbnz	r1, 8016d0c <Argus_Dca_Evaluate+0x274>
 8016cf0:	6921      	ldr	r1, [r4, #16]
 8016cf2:	b959      	cbnz	r1, 8016d0c <Argus_Dca_Evaluate+0x274>
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d080      	beq.n	8016bfa <Argus_Dca_Evaluate+0x162>
 8016cf8:	f104 0114 	add.w	r1, r4, #20
 8016cfc:	f104 0010 	add.w	r0, r4, #16
 8016d00:	f7f7 f82e 	bl	800dd60 <Timer_GetCounterValue>
 8016d04:	69aa      	ldr	r2, [r5, #24]
 8016d06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8016d0a:	e776      	b.n	8016bfa <Argus_Dca_Evaluate+0x162>
 8016d0c:	a90d      	add	r1, sp, #52	@ 0x34
 8016d0e:	a80c      	add	r0, sp, #48	@ 0x30
 8016d10:	f8be 9018 	ldrh.w	r9, [lr, #24]
 8016d14:	f7f7 f824 	bl	800dd60 <Timer_GetCounterValue>
 8016d18:	4920      	ldr	r1, [pc, #128]	@ (8016d9c <Argus_Dca_Evaluate+0x304>)
 8016d1a:	fba1 3109 	umull	r3, r1, r1, r9
 8016d1e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8016d22:	098a      	lsrs	r2, r1, #6
 8016d24:	6963      	ldr	r3, [r4, #20]
 8016d26:	fb00 9212 	mls	r2, r0, r2, r9
 8016d2a:	f8df 9074 	ldr.w	r9, [pc, #116]	@ 8016da0 <Argus_Dca_Evaluate+0x308>
 8016d2e:	fb00 3202 	mla	r2, r0, r2, r3
 8016d32:	6920      	ldr	r0, [r4, #16]
 8016d34:	454a      	cmp	r2, r9
 8016d36:	e9dd ce0c 	ldrd	ip, lr, [sp, #48]	@ 0x30
 8016d3a:	eb00 1191 	add.w	r1, r0, r1, lsr #6
 8016d3e:	d904      	bls.n	8016d4a <Argus_Dca_Evaluate+0x2b2>
 8016d40:	f5a2 2274 	sub.w	r2, r2, #999424	@ 0xf4000
 8016d44:	3101      	adds	r1, #1
 8016d46:	f5a2 7210 	sub.w	r2, r2, #576	@ 0x240
 8016d4a:	4288      	cmp	r0, r1
 8016d4c:	f000 80b6 	beq.w	8016ebc <Argus_Dca_Evaluate+0x424>
 8016d50:	f080 80b7 	bcs.w	8016ec2 <Argus_Dca_Evaluate+0x42a>
 8016d54:	4560      	cmp	r0, ip
 8016d56:	f000 8154 	beq.w	8017002 <Argus_Dca_Evaluate+0x56a>
 8016d5a:	bf34      	ite	cc
 8016d5c:	2301      	movcc	r3, #1
 8016d5e:	2300      	movcs	r3, #0
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	f43f af45 	beq.w	8016bf0 <Argus_Dca_Evaluate+0x158>
 8016d66:	458c      	cmp	ip, r1
 8016d68:	f000 815d 	beq.w	8017026 <Argus_Dca_Evaluate+0x58e>
 8016d6c:	f63f af40 	bhi.w	8016bf0 <Argus_Dca_Evaluate+0x158>
 8016d70:	69aa      	ldr	r2, [r5, #24]
 8016d72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8016d76:	e740      	b.n	8016bfa <Argus_Dca_Evaluate+0x162>
 8016d78:	f06f 0170 	mvn.w	r1, #112	@ 0x70
 8016d7c:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8016d7e:	6029      	str	r1, [r5, #0]
 8016d80:	f002 fcfe 	bl	8019780 <Argus_Dev_SetError>
 8016d84:	69ab      	ldr	r3, [r5, #24]
 8016d86:	0658      	lsls	r0, r3, #25
 8016d88:	bf4c      	ite	mi
 8016d8a:	4806      	ldrmi	r0, [pc, #24]	@ (8016da4 <Argus_Dca_Evaluate+0x30c>)
 8016d8c:	4806      	ldrpl	r0, [pc, #24]	@ (8016da8 <Argus_Dca_Evaluate+0x310>)
 8016d8e:	f7f7 f8bf 	bl	800df10 <print>
 8016d92:	682b      	ldr	r3, [r5, #0]
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	f47f af72 	bne.w	8016c7e <Argus_Dca_Evaluate+0x1e6>
 8016d9a:	e748      	b.n	8016c2e <Argus_Dca_Evaluate+0x196>
 8016d9c:	10624dd3 	.word	0x10624dd3
 8016da0:	000f423f 	.word	0x000f423f
 8016da4:	08029170 	.word	0x08029170
 8016da8:	08029204 	.word	0x08029204
 8016dac:	69aa      	ldr	r2, [r5, #24]
 8016dae:	f3c2 3181 	ubfx	r1, r2, #14, #2
 8016db2:	4588      	cmp	r8, r1
 8016db4:	f47f af63 	bne.w	8016c7e <Argus_Dca_Evaluate+0x1e6>
 8016db8:	9805      	ldr	r0, [sp, #20]
 8016dba:	f3c2 3140 	ubfx	r1, r2, #13, #1
 8016dbe:	4281      	cmp	r1, r0
 8016dc0:	f47f af5d 	bne.w	8016c7e <Argus_Dca_Evaluate+0x1e6>
 8016dc4:	8be9      	ldrh	r1, [r5, #30]
 8016dc6:	9806      	ldr	r0, [sp, #24]
 8016dc8:	4281      	cmp	r1, r0
 8016dca:	f47f af58 	bne.w	8016c7e <Argus_Dca_Evaluate+0x1e6>
 8016dce:	eb04 0108 	add.w	r1, r4, r8
 8016dd2:	f895 9023 	ldrb.w	r9, [r5, #35]	@ 0x23
 8016dd6:	f891 103f 	ldrb.w	r1, [r1, #63]	@ 0x3f
 8016dda:	9108      	str	r1, [sp, #32]
 8016ddc:	4608      	mov	r0, r1
 8016dde:	9904      	ldr	r1, [sp, #16]
 8016de0:	1808      	adds	r0, r1, r0
 8016de2:	4548      	cmp	r0, r9
 8016de4:	f47f af4b 	bne.w	8016c7e <Argus_Dca_Evaluate+0x1e6>
 8016de8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8016dec:	428b      	cmp	r3, r1
 8016dee:	e9d4 a717 	ldrd	sl, r7, [r4, #92]	@ 0x5c
 8016df2:	f000 83e6 	beq.w	80175c2 <Argus_Dca_Evaluate+0xb2a>
 8016df6:	eb04 0148 	add.w	r1, r4, r8, lsl #1
 8016dfa:	9e04      	ldr	r6, [sp, #16]
 8016dfc:	f8b1 1044 	ldrh.w	r1, [r1, #68]	@ 0x44
 8016e00:	9808      	ldr	r0, [sp, #32]
 8016e02:	1a59      	subs	r1, r3, r1
 8016e04:	b209      	sxth	r1, r1
 8016e06:	9107      	str	r1, [sp, #28]
 8016e08:	eb07 0148 	add.w	r1, r7, r8, lsl #1
 8016e0c:	fa50 f086 	uxtab	r0, r0, r6
 8016e10:	f8b1 10ca 	ldrh.w	r1, [r1, #202]	@ 0xca
 8016e14:	9106      	str	r1, [sp, #24]
 8016e16:	f99a 1000 	ldrsb.w	r1, [sl]
 8016e1a:	fa4f f980 	sxtb.w	r9, r0
 8016e1e:	2900      	cmp	r1, #0
 8016e20:	b2f0      	uxtb	r0, r6
 8016e22:	9002      	str	r0, [sp, #8]
 8016e24:	f340 8127 	ble.w	8017076 <Argus_Dca_Evaluate+0x5de>
 8016e28:	f994 0035 	ldrsb.w	r0, [r4, #53]	@ 0x35
 8016e2c:	eba0 0109 	sub.w	r1, r0, r9
 8016e30:	2901      	cmp	r1, #1
 8016e32:	9109      	str	r1, [sp, #36]	@ 0x24
 8016e34:	f340 841e 	ble.w	8017674 <Argus_Dca_Evaluate+0xbdc>
 8016e38:	4581      	cmp	r9, r0
 8016e3a:	f340 83f7 	ble.w	801762c <Argus_Dca_Evaluate+0xb94>
 8016e3e:	eba9 0100 	sub.w	r1, r9, r0
 8016e42:	8fa6      	ldrh	r6, [r4, #60]	@ 0x3c
 8016e44:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8016e46:	fb06 f101 	mul.w	r1, r6, r1
 8016e4a:	1a18      	subs	r0, r3, r0
 8016e4c:	4288      	cmp	r0, r1
 8016e4e:	f2c0 83f8 	blt.w	8017642 <Argus_Dca_Evaluate+0xbaa>
 8016e52:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8016e56:	428a      	cmp	r2, r1
 8016e58:	f340 839c 	ble.w	8017594 <Argus_Dca_Evaluate+0xafc>
 8016e5c:	f1b8 0f02 	cmp.w	r8, #2
 8016e60:	f200 838f 	bhi.w	8017582 <Argus_Dca_Evaluate+0xaea>
 8016e64:	eb07 0208 	add.w	r2, r7, r8
 8016e68:	9904      	ldr	r1, [sp, #16]
 8016e6a:	f892 20c6 	ldrb.w	r2, [r2, #198]	@ 0xc6
 8016e6e:	4291      	cmp	r1, r2
 8016e70:	f280 8387 	bge.w	8017582 <Argus_Dca_Evaluate+0xaea>
 8016e74:	f89a 2014 	ldrb.w	r2, [sl, #20]
 8016e78:	4542      	cmp	r2, r8
 8016e7a:	bf84      	itt	hi
 8016e7c:	f108 0201 	addhi.w	r2, r8, #1
 8016e80:	b2d2      	uxtbhi	r2, r2
 8016e82:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
 8016e86:	9a02      	ldr	r2, [sp, #8]
 8016e88:	1e51      	subs	r1, r2, #1
 8016e8a:	b24a      	sxtb	r2, r1
 8016e8c:	9204      	str	r2, [sp, #16]
 8016e8e:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8016e92:	e100      	b.n	8017096 <Argus_Dca_Evaluate+0x5fe>
 8016e94:	f04f 0e00 	mov.w	lr, #0
 8016e98:	e6e9      	b.n	8016c6e <Argus_Dca_Evaluate+0x1d6>
 8016e9a:	b289      	uxth	r1, r1
 8016e9c:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8016ea0:	0089      	lsls	r1, r1, #2
 8016ea2:	fbb1 f1f3 	udiv	r1, r1, r3
 8016ea6:	e713      	b.n	8016cd0 <Argus_Dca_Evaluate+0x238>
 8016ea8:	6923      	ldr	r3, [r4, #16]
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	f43f aea5 	beq.w	8016bfa <Argus_Dca_Evaluate+0x162>
 8016eb0:	e662      	b.n	8016b78 <Argus_Dca_Evaluate+0xe0>
 8016eb2:	4283      	cmp	r3, r0
 8016eb4:	bf8c      	ite	hi
 8016eb6:	2100      	movhi	r1, #0
 8016eb8:	2101      	movls	r1, #1
 8016eba:	e684      	b.n	8016bc6 <Argus_Dca_Evaluate+0x12e>
 8016ebc:	4293      	cmp	r3, r2
 8016ebe:	f67f af49 	bls.w	8016d54 <Argus_Dca_Evaluate+0x2bc>
 8016ec2:	4560      	cmp	r0, ip
 8016ec4:	f000 80a2 	beq.w	801700c <Argus_Dca_Evaluate+0x574>
 8016ec8:	bf34      	ite	cc
 8016eca:	2301      	movcc	r3, #1
 8016ecc:	2300      	movcs	r3, #0
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	f47f af4e 	bne.w	8016d70 <Argus_Dca_Evaluate+0x2d8>
 8016ed4:	458c      	cmp	ip, r1
 8016ed6:	f000 809e 	beq.w	8017016 <Argus_Dca_Evaluate+0x57e>
 8016eda:	bf8c      	ite	hi
 8016edc:	2201      	movhi	r2, #1
 8016ede:	2200      	movls	r2, #0
 8016ee0:	2a00      	cmp	r2, #0
 8016ee2:	f47f ae85 	bne.w	8016bf0 <Argus_Dca_Evaluate+0x158>
 8016ee6:	e743      	b.n	8016d70 <Argus_Dca_Evaluate+0x2d8>
 8016ee8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8016eea:	f993 3000 	ldrsb.w	r3, [r3]
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	bfc8      	it	gt
 8016ef2:	f991 60c0 	ldrsbgt.w	r6, [r1, #192]	@ 0xc0
 8016ef6:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8016ef8:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8016efa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8016efe:	bfcc      	ite	gt
 8016f00:	f04f 0b00 	movgt.w	fp, #0
 8016f04:	2600      	movle	r6, #0
 8016f06:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8016f0a:	678b      	str	r3, [r1, #120]	@ 0x78
 8016f0c:	e681      	b.n	8016c12 <Argus_Dca_Evaluate+0x17a>
 8016f0e:	f8a5 31c6 	strh.w	r3, [r5, #454]	@ 0x1c6
 8016f12:	469e      	mov	lr, r3
 8016f14:	e6ad      	b.n	8016c72 <Argus_Dca_Evaluate+0x1da>
 8016f16:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8016f18:	f993 3000 	ldrsb.w	r3, [r3]
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	f77f aeae 	ble.w	8016c7e <Argus_Dca_Evaluate+0x1e6>
 8016f22:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8016f24:	4693      	mov	fp, r2
 8016f26:	f993 60c0 	ldrsb.w	r6, [r3, #192]	@ 0xc0
 8016f2a:	e6a8      	b.n	8016c7e <Argus_Dca_Evaluate+0x1e6>
 8016f2c:	45ce      	cmp	lr, r9
 8016f2e:	d056      	beq.n	8016fde <Argus_Dca_Evaluate+0x546>
 8016f30:	bf34      	ite	cc
 8016f32:	2301      	movcc	r3, #1
 8016f34:	2300      	movcs	r3, #0
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	f47f af1a 	bne.w	8016d70 <Argus_Dca_Evaluate+0x2d8>
 8016f3c:	e64d      	b.n	8016bda <Argus_Dca_Evaluate+0x142>
 8016f3e:	f1b9 0f00 	cmp.w	r9, #0
 8016f42:	d103      	bne.n	8016f4c <Argus_Dca_Evaluate+0x4b4>
 8016f44:	7ac1      	ldrb	r1, [r0, #11]
 8016f46:	2900      	cmp	r1, #0
 8016f48:	f47f aecc 	bne.w	8016ce4 <Argus_Dca_Evaluate+0x24c>
 8016f4c:	6963      	ldr	r3, [r4, #20]
 8016f4e:	b91b      	cbnz	r3, 8016f58 <Argus_Dca_Evaluate+0x4c0>
 8016f50:	6923      	ldr	r3, [r4, #16]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	f43f aed0 	beq.w	8016cf8 <Argus_Dca_Evaluate+0x260>
 8016f58:	a90d      	add	r1, sp, #52	@ 0x34
 8016f5a:	a80c      	add	r0, sp, #48	@ 0x30
 8016f5c:	f8be 9018 	ldrh.w	r9, [lr, #24]
 8016f60:	f7f6 fefe 	bl	800dd60 <Timer_GetCounterValue>
 8016f64:	49a7      	ldr	r1, [pc, #668]	@ (8017204 <Argus_Dca_Evaluate+0x76c>)
 8016f66:	f8d4 c014 	ldr.w	ip, [r4, #20]
 8016f6a:	6920      	ldr	r0, [r4, #16]
 8016f6c:	fba1 3109 	umull	r3, r1, r1, r9
 8016f70:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016f74:	098b      	lsrs	r3, r1, #6
 8016f76:	fb02 9313 	mls	r3, r2, r3, r9
 8016f7a:	fb02 c303 	mla	r3, r2, r3, ip
 8016f7e:	4aa2      	ldr	r2, [pc, #648]	@ (8017208 <Argus_Dca_Evaluate+0x770>)
 8016f80:	4293      	cmp	r3, r2
 8016f82:	e9dd 9e0c 	ldrd	r9, lr, [sp, #48]	@ 0x30
 8016f86:	eb00 1191 	add.w	r1, r0, r1, lsr #6
 8016f8a:	d904      	bls.n	8016f96 <Argus_Dca_Evaluate+0x4fe>
 8016f8c:	f5a3 2374 	sub.w	r3, r3, #999424	@ 0xf4000
 8016f90:	3101      	adds	r1, #1
 8016f92:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8016f96:	4288      	cmp	r0, r1
 8016f98:	d052      	beq.n	8017040 <Argus_Dca_Evaluate+0x5a8>
 8016f9a:	bf34      	ite	cc
 8016f9c:	2201      	movcc	r2, #1
 8016f9e:	2200      	movcs	r2, #0
 8016fa0:	2a00      	cmp	r2, #0
 8016fa2:	d044      	beq.n	801702e <Argus_Dca_Evaluate+0x596>
 8016fa4:	4548      	cmp	r0, r9
 8016fa6:	d054      	beq.n	8017052 <Argus_Dca_Evaluate+0x5ba>
 8016fa8:	bf34      	ite	cc
 8016faa:	2201      	movcc	r2, #1
 8016fac:	2200      	movcs	r2, #0
 8016fae:	2a00      	cmp	r2, #0
 8016fb0:	f43f ae1e 	beq.w	8016bf0 <Argus_Dca_Evaluate+0x158>
 8016fb4:	4589      	cmp	r9, r1
 8016fb6:	d059      	beq.n	801706c <Argus_Dca_Evaluate+0x5d4>
 8016fb8:	bf8c      	ite	hi
 8016fba:	2301      	movhi	r3, #1
 8016fbc:	2300      	movls	r3, #0
 8016fbe:	f083 0301 	eor.w	r3, r3, #1
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	f43f ae14 	beq.w	8016bf0 <Argus_Dca_Evaluate+0x158>
 8016fc8:	e6d2      	b.n	8016d70 <Argus_Dca_Evaluate+0x2d8>
 8016fca:	6963      	ldr	r3, [r4, #20]
 8016fcc:	b91b      	cbnz	r3, 8016fd6 <Argus_Dca_Evaluate+0x53e>
 8016fce:	6923      	ldr	r3, [r4, #16]
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	f43f ae12 	beq.w	8016bfa <Argus_Dca_Evaluate+0x162>
 8016fd6:	2300      	movs	r3, #0
 8016fd8:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8016fdc:	e60d      	b.n	8016bfa <Argus_Dca_Evaluate+0x162>
 8016fde:	4293      	cmp	r3, r2
 8016fe0:	bf8c      	ite	hi
 8016fe2:	2300      	movhi	r3, #0
 8016fe4:	2301      	movls	r3, #1
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	f47f aec2 	bne.w	8016d70 <Argus_Dca_Evaluate+0x2d8>
 8016fec:	e5f5      	b.n	8016bda <Argus_Dca_Evaluate+0x142>
 8016fee:	4293      	cmp	r3, r2
 8016ff0:	bf8c      	ite	hi
 8016ff2:	2300      	movhi	r3, #0
 8016ff4:	2301      	movls	r3, #1
 8016ff6:	e5ef      	b.n	8016bd8 <Argus_Dca_Evaluate+0x140>
 8016ff8:	4282      	cmp	r2, r0
 8016ffa:	bf34      	ite	cc
 8016ffc:	2200      	movcc	r2, #0
 8016ffe:	2201      	movcs	r2, #1
 8017000:	e5f1      	b.n	8016be6 <Argus_Dca_Evaluate+0x14e>
 8017002:	4573      	cmp	r3, lr
 8017004:	bf8c      	ite	hi
 8017006:	2300      	movhi	r3, #0
 8017008:	2301      	movls	r3, #1
 801700a:	e6a9      	b.n	8016d60 <Argus_Dca_Evaluate+0x2c8>
 801700c:	4573      	cmp	r3, lr
 801700e:	bf8c      	ite	hi
 8017010:	2300      	movhi	r3, #0
 8017012:	2301      	movls	r3, #1
 8017014:	e75b      	b.n	8016ece <Argus_Dca_Evaluate+0x436>
 8017016:	4596      	cmp	lr, r2
 8017018:	bf34      	ite	cc
 801701a:	2200      	movcc	r2, #0
 801701c:	2201      	movcs	r2, #1
 801701e:	2a00      	cmp	r2, #0
 8017020:	f47f ade6 	bne.w	8016bf0 <Argus_Dca_Evaluate+0x158>
 8017024:	e6a4      	b.n	8016d70 <Argus_Dca_Evaluate+0x2d8>
 8017026:	4596      	cmp	lr, r2
 8017028:	f4bf ade2 	bcs.w	8016bf0 <Argus_Dca_Evaluate+0x158>
 801702c:	e6a0      	b.n	8016d70 <Argus_Dca_Evaluate+0x2d8>
 801702e:	4548      	cmp	r0, r9
 8017030:	d014      	beq.n	801705c <Argus_Dca_Evaluate+0x5c4>
 8017032:	bf34      	ite	cc
 8017034:	2201      	movcc	r2, #1
 8017036:	2200      	movcs	r2, #0
 8017038:	2a00      	cmp	r2, #0
 801703a:	f47f ae99 	bne.w	8016d70 <Argus_Dca_Evaluate+0x2d8>
 801703e:	e7b9      	b.n	8016fb4 <Argus_Dca_Evaluate+0x51c>
 8017040:	459c      	cmp	ip, r3
 8017042:	bf8c      	ite	hi
 8017044:	2200      	movhi	r2, #0
 8017046:	2201      	movls	r2, #1
 8017048:	e7aa      	b.n	8016fa0 <Argus_Dca_Evaluate+0x508>
 801704a:	f06f 036a 	mvn.w	r3, #106	@ 0x6a
 801704e:	602b      	str	r3, [r5, #0]
 8017050:	e615      	b.n	8016c7e <Argus_Dca_Evaluate+0x1e6>
 8017052:	45f4      	cmp	ip, lr
 8017054:	bf8c      	ite	hi
 8017056:	2200      	movhi	r2, #0
 8017058:	2201      	movls	r2, #1
 801705a:	e7a8      	b.n	8016fae <Argus_Dca_Evaluate+0x516>
 801705c:	45f4      	cmp	ip, lr
 801705e:	bf8c      	ite	hi
 8017060:	2200      	movhi	r2, #0
 8017062:	2201      	movls	r2, #1
 8017064:	2a00      	cmp	r2, #0
 8017066:	f47f ae83 	bne.w	8016d70 <Argus_Dca_Evaluate+0x2d8>
 801706a:	e7a3      	b.n	8016fb4 <Argus_Dca_Evaluate+0x51c>
 801706c:	4573      	cmp	r3, lr
 801706e:	bf8c      	ite	hi
 8017070:	2300      	movhi	r3, #0
 8017072:	2301      	movls	r3, #1
 8017074:	e7a3      	b.n	8016fbe <Argus_Dca_Evaluate+0x526>
 8017076:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801707a:	428a      	cmp	r2, r1
 801707c:	f73f af03 	bgt.w	8016e86 <Argus_Dca_Evaluate+0x3ee>
 8017080:	9a06      	ldr	r2, [sp, #24]
 8017082:	9907      	ldr	r1, [sp, #28]
 8017084:	4252      	negs	r2, r2
 8017086:	4291      	cmp	r1, r2
 8017088:	da03      	bge.n	8017092 <Argus_Dca_Evaluate+0x5fa>
 801708a:	9902      	ldr	r1, [sp, #8]
 801708c:	3101      	adds	r1, #1
 801708e:	b24a      	sxtb	r2, r1
 8017090:	9204      	str	r2, [sp, #16]
 8017092:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8017096:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8017098:	9b08      	ldr	r3, [sp, #32]
 801709a:	9904      	ldr	r1, [sp, #16]
 801709c:	f884 9035 	strb.w	r9, [r4, #53]	@ 0x35
 80170a0:	1ad2      	subs	r2, r2, r3
 80170a2:	f1c3 0301 	rsb	r3, r3, #1
 80170a6:	428b      	cmp	r3, r1
 80170a8:	bfb8      	it	lt
 80170aa:	460b      	movlt	r3, r1
 80170ac:	429a      	cmp	r2, r3
 80170ae:	bfa8      	it	ge
 80170b0:	461a      	movge	r2, r3
 80170b2:	b256      	sxtb	r6, r2
 80170b4:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 80170b6:	8460      	strh	r0, [r4, #34]	@ 0x22
 80170b8:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 80170bc:	2b02      	cmp	r3, #2
 80170be:	f000 814e 	beq.w	801735e <Argus_Dca_Evaluate+0x8c6>
 80170c2:	2b01      	cmp	r3, #1
 80170c4:	d104      	bne.n	80170d0 <Argus_Dca_Evaluate+0x638>
 80170c6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80170ca:	4298      	cmp	r0, r3
 80170cc:	bf88      	it	hi
 80170ce:	8463      	strhhi	r3, [r4, #34]	@ 0x22
 80170d0:	f99a 3000 	ldrsb.w	r3, [sl]
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	dc62      	bgt.n	801719e <Argus_Dca_Evaluate+0x706>
 80170d8:	f89a 1013 	ldrb.w	r1, [sl, #19]
 80170dc:	f894 5034 	ldrb.w	r5, [r4, #52]	@ 0x34
 80170e0:	9a00      	ldr	r2, [sp, #0]
 80170e2:	e9d7 0324 	ldrd	r0, r3, [r7, #144]	@ 0x90
 80170e6:	f3c2 128f 	ubfx	r2, r2, #6, #16
 80170ea:	2a01      	cmp	r2, #1
 80170ec:	bf38      	it	cc
 80170ee:	2201      	movcc	r2, #1
 80170f0:	fb03 0002 	mla	r0, r3, r2, r0
 80170f4:	4694      	mov	ip, r2
 80170f6:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	@ 0x2c
 80170fa:	4293      	cmp	r3, r2
 80170fc:	bf28      	it	cs
 80170fe:	4613      	movcs	r3, r2
 8017100:	f3c0 3240 	ubfx	r2, r0, #13, #1
 8017104:	eb02 3090 	add.w	r0, r2, r0, lsr #14
 8017108:	fbb3 f7f0 	udiv	r7, r3, r0
 801710c:	2f01      	cmp	r7, #1
 801710e:	69a3      	ldr	r3, [r4, #24]
 8017110:	bf38      	it	cc
 8017112:	2701      	movcc	r7, #1
 8017114:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 8017118:	bf28      	it	cs
 801711a:	f44f 6780 	movcs.w	r7, #1024	@ 0x400
 801711e:	1c5a      	adds	r2, r3, #1
 8017120:	d026      	beq.n	8017170 <Argus_Dca_Evaluate+0x6d8>
 8017122:	9a01      	ldr	r2, [sp, #4]
 8017124:	f8b4 801c 	ldrh.w	r8, [r4, #28]
 8017128:	2a01      	cmp	r2, #1
 801712a:	bf0c      	ite	eq
 801712c:	f894 003e 	ldrbeq.w	r0, [r4, #62]	@ 0x3e
 8017130:	2004      	movne	r0, #4
 8017132:	2801      	cmp	r0, #1
 8017134:	bf38      	it	cc
 8017136:	2001      	movcc	r0, #1
 8017138:	fb0c f200 	mul.w	r2, ip, r0
 801713c:	f3c3 0c0e 	ubfx	ip, r3, #0, #15
 8017140:	fb08 fc0c 	mul.w	ip, r8, ip
 8017144:	ea4f 3ed3 	mov.w	lr, r3, lsr #15
 8017148:	ea4f 33dc 	mov.w	r3, ip, lsr #15
 801714c:	fb08 330e 	mla	r3, r8, lr, r3
 8017150:	f3cc 3c80 	ubfx	ip, ip, #14, #1
 8017154:	4463      	add	r3, ip
 8017156:	4293      	cmp	r3, r2
 8017158:	f0c0 8159 	bcc.w	801740e <Argus_Dca_Evaluate+0x976>
 801715c:	fbb3 f3f2 	udiv	r3, r3, r2
 8017160:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017164:	bf28      	it	cs
 8017166:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 801716a:	429f      	cmp	r7, r3
 801716c:	bf28      	it	cs
 801716e:	461f      	movcs	r7, r3
 8017170:	455d      	cmp	r5, fp
 8017172:	b2bf      	uxth	r7, r7
 8017174:	d03b      	beq.n	80171ee <Argus_Dca_Evaluate+0x756>
 8017176:	2300      	movs	r3, #0
 8017178:	9302      	str	r3, [sp, #8]
 801717a:	4559      	cmp	r1, fp
 801717c:	f4ff ad7f 	bcc.w	8016c7e <Argus_Dca_Evaluate+0x1e6>
 8017180:	f8ba 300e 	ldrh.w	r3, [sl, #14]
 8017184:	9a00      	ldr	r2, [sp, #0]
 8017186:	4293      	cmp	r3, r2
 8017188:	f4ff ad79 	bcc.w	8016c7e <Argus_Dca_Evaluate+0x1e6>
 801718c:	9b01      	ldr	r3, [sp, #4]
 801718e:	2b00      	cmp	r3, #0
 8017190:	f47f ad75 	bne.w	8016c7e <Argus_Dca_Evaluate+0x1e6>
 8017194:	9b02      	ldr	r3, [sp, #8]
 8017196:	f043 0301 	orr.w	r3, r3, #1
 801719a:	9302      	str	r3, [sp, #8]
 801719c:	e56f      	b.n	8016c7e <Argus_Dca_Evaluate+0x1e6>
 801719e:	7b39      	ldrb	r1, [r7, #12]
 80171a0:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80171a4:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80171a8:	fb03 f101 	mul.w	r1, r3, r1
 80171ac:	f89a 300a 	ldrb.w	r3, [sl, #10]
 80171b0:	2b02      	cmp	r3, #2
 80171b2:	ea4f 2111 	mov.w	r1, r1, lsr #8
 80171b6:	f105 0228 	add.w	r2, r5, #40	@ 0x28
 80171ba:	f04f 0b00 	mov.w	fp, #0
 80171be:	d025      	beq.n	801720c <Argus_Dca_Evaluate+0x774>
 80171c0:	f505 70d4 	add.w	r0, r5, #424	@ 0x1a8
 80171c4:	465b      	mov	r3, fp
 80171c6:	e006      	b.n	80171d6 <Argus_Dca_Evaluate+0x73e>
 80171c8:	88d1      	ldrh	r1, [r2, #6]
 80171ca:	428b      	cmp	r3, r1
 80171cc:	bf38      	it	cc
 80171ce:	460b      	movcc	r3, r1
 80171d0:	320c      	adds	r2, #12
 80171d2:	4290      	cmp	r0, r2
 80171d4:	d032      	beq.n	801723c <Argus_Dca_Evaluate+0x7a4>
 80171d6:	7a11      	ldrb	r1, [r2, #8]
 80171d8:	f011 0f11 	tst.w	r1, #17
 80171dc:	d1f8      	bne.n	80171d0 <Argus_Dca_Evaluate+0x738>
 80171de:	f011 0f02 	tst.w	r1, #2
 80171e2:	f10b 0101 	add.w	r1, fp, #1
 80171e6:	d0ef      	beq.n	80171c8 <Argus_Dca_Evaluate+0x730>
 80171e8:	fa5f fb81 	uxtb.w	fp, r1
 80171ec:	e7f0      	b.n	80171d0 <Argus_Dca_Evaluate+0x738>
 80171ee:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 80171f0:	9a00      	ldr	r2, [sp, #0]
 80171f2:	4293      	cmp	r3, r2
 80171f4:	d1bf      	bne.n	8017176 <Argus_Dca_Evaluate+0x6de>
 80171f6:	9b01      	ldr	r3, [sp, #4]
 80171f8:	2b01      	cmp	r3, #1
 80171fa:	bf0c      	ite	eq
 80171fc:	2302      	moveq	r3, #2
 80171fe:	2300      	movne	r3, #0
 8017200:	9302      	str	r3, [sp, #8]
 8017202:	e7ba      	b.n	801717a <Argus_Dca_Evaluate+0x6e2>
 8017204:	10624dd3 	.word	0x10624dd3
 8017208:	000f423f 	.word	0x000f423f
 801720c:	f505 7cd4 	add.w	ip, r5, #424	@ 0x1a8
 8017210:	4658      	mov	r0, fp
 8017212:	465b      	mov	r3, fp
 8017214:	7a17      	ldrb	r7, [r2, #8]
 8017216:	f017 0f11 	tst.w	r7, #17
 801721a:	d10a      	bne.n	8017232 <Argus_Dca_Evaluate+0x79a>
 801721c:	f017 0f02 	tst.w	r7, #2
 8017220:	f10b 0701 	add.w	r7, fp, #1
 8017224:	bf0d      	iteet	eq
 8017226:	88d7      	ldrheq	r7, [r2, #6]
 8017228:	fa5f fb87 	uxtbne.w	fp, r7
 801722c:	185b      	addne	r3, r3, r1
 801722e:	19db      	addeq	r3, r3, r7
 8017230:	3001      	adds	r0, #1
 8017232:	320c      	adds	r2, #12
 8017234:	4594      	cmp	ip, r2
 8017236:	d1ed      	bne.n	8017214 <Argus_Dca_Evaluate+0x77c>
 8017238:	fbb3 f3f0 	udiv	r3, r3, r0
 801723c:	f8d5 21cc 	ldr.w	r2, [r5, #460]	@ 0x1cc
 8017240:	b29b      	uxth	r3, r3
 8017242:	b102      	cbz	r2, 8017246 <Argus_Dca_Evaluate+0x7ae>
 8017244:	8013      	strh	r3, [r2, #0]
 8017246:	9a05      	ldr	r2, [sp, #20]
 8017248:	f89a 9003 	ldrb.w	r9, [sl, #3]
 801724c:	2a01      	cmp	r2, #1
 801724e:	bf08      	it	eq
 8017250:	f894 c03e 	ldrbeq.w	ip, [r4, #62]	@ 0x3e
 8017254:	9a03      	ldr	r2, [sp, #12]
 8017256:	bf18      	it	ne
 8017258:	f04f 0c04 	movne.w	ip, #4
 801725c:	fb0c f702 	mul.w	r7, ip, r2
 8017260:	45cb      	cmp	fp, r9
 8017262:	fa07 f708 	lsl.w	r7, r7, r8
 8017266:	f0c0 810e 	bcc.w	8017486 <Argus_Dca_Evaluate+0x9ee>
 801726a:	f8ba 200e 	ldrh.w	r2, [sl, #14]
 801726e:	f89a 1012 	ldrb.w	r1, [sl, #18]
 8017272:	0093      	lsls	r3, r2, #2
 8017274:	408b      	lsls	r3, r1
 8017276:	429f      	cmp	r7, r3
 8017278:	f200 8214 	bhi.w	80176a4 <Argus_Dca_Evaluate+0xc0c>
 801727c:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 801727e:	8be0      	ldrh	r0, [r4, #30]
 8017280:	2701      	movs	r7, #1
 8017282:	45d9      	cmp	r9, fp
 8017284:	d803      	bhi.n	801728e <Argus_Dca_Evaluate+0x7f6>
 8017286:	69ab      	ldr	r3, [r5, #24]
 8017288:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801728c:	61ab      	str	r3, [r5, #24]
 801728e:	0043      	lsls	r3, r0, #1
 8017290:	4293      	cmp	r3, r2
 8017292:	f89a 0012 	ldrb.w	r0, [sl, #18]
 8017296:	f894 5034 	ldrb.w	r5, [r4, #52]	@ 0x34
 801729a:	f89a e00b 	ldrb.w	lr, [sl, #11]
 801729e:	bfb8      	it	lt
 80172a0:	4613      	movlt	r3, r2
 80172a2:	428b      	cmp	r3, r1
 80172a4:	bfa8      	it	ge
 80172a6:	460b      	movge	r3, r1
 80172a8:	42a8      	cmp	r0, r5
 80172aa:	bf28      	it	cs
 80172ac:	4628      	movcs	r0, r5
 80172ae:	f10e 3cff 	add.w	ip, lr, #4294967295
 80172b2:	f1be 0800 	subs.w	r8, lr, #0
 80172b6:	4683      	mov	fp, r0
 80172b8:	bf18      	it	ne
 80172ba:	f04f 0801 	movne.w	r8, #1
 80172be:	f1dc 0000 	rsbs	r0, ip, #0
 80172c2:	eb40 000c 	adc.w	r0, r0, ip
 80172c6:	9001      	str	r0, [sp, #4]
 80172c8:	f1be 0f00 	cmp.w	lr, #0
 80172cc:	f000 81fb 	beq.w	80176c6 <Argus_Dca_Evaluate+0xc2e>
 80172d0:	f894 003e 	ldrb.w	r0, [r4, #62]	@ 0x3e
 80172d4:	fb00 f903 	mul.w	r9, r0, r3
 80172d8:	fa09 f90b 	lsl.w	r9, r9, fp
 80172dc:	454f      	cmp	r7, r9
 80172de:	4684      	mov	ip, r0
 80172e0:	f080 81f9 	bcs.w	80176d6 <Argus_Dca_Evaluate+0xc3e>
 80172e4:	428a      	cmp	r2, r1
 80172e6:	4613      	mov	r3, r2
 80172e8:	bf28      	it	cs
 80172ea:	460b      	movcs	r3, r1
 80172ec:	f1be 0f01 	cmp.w	lr, #1
 80172f0:	9300      	str	r3, [sp, #0]
 80172f2:	bf18      	it	ne
 80172f4:	2004      	movne	r0, #4
 80172f6:	9b00      	ldr	r3, [sp, #0]
 80172f8:	fb00 f303 	mul.w	r3, r0, r3
 80172fc:	fa03 f20b 	lsl.w	r2, r3, fp
 8017300:	4297      	cmp	r7, r2
 8017302:	f080 8242 	bcs.w	801778a <Argus_Dca_Evaluate+0xcf2>
 8017306:	fbb7 f3f3 	udiv	r3, r7, r3
 801730a:	2b01      	cmp	r3, #1
 801730c:	bf38      	it	cc
 801730e:	2301      	movcc	r3, #1
 8017310:	461a      	mov	r2, r3
 8017312:	fab3 f383 	clz	r3, r3
 8017316:	f1c3 011e 	rsb	r1, r3, #30
 801731a:	40ca      	lsrs	r2, r1
 801731c:	f1c3 031f 	rsb	r3, r3, #31
 8017320:	f89a 1013 	ldrb.w	r1, [sl, #19]
 8017324:	2a03      	cmp	r2, #3
 8017326:	bf08      	it	eq
 8017328:	3301      	addeq	r3, #1
 801732a:	428b      	cmp	r3, r1
 801732c:	bf38      	it	cc
 801732e:	460b      	movcc	r3, r1
 8017330:	455b      	cmp	r3, fp
 8017332:	bf28      	it	cs
 8017334:	465b      	movcs	r3, fp
 8017336:	fa5f fb83 	uxtb.w	fp, r3
 801733a:	eb04 030b 	add.w	r3, r4, fp
 801733e:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8017342:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8017346:	6e27      	ldr	r7, [r4, #96]	@ 0x60
 8017348:	1ad2      	subs	r2, r2, r3
 801734a:	f1c3 0301 	rsb	r3, r3, #1
 801734e:	429e      	cmp	r6, r3
 8017350:	bfb8      	it	lt
 8017352:	461e      	movlt	r6, r3
 8017354:	4296      	cmp	r6, r2
 8017356:	bfa8      	it	ge
 8017358:	4616      	movge	r6, r2
 801735a:	b276      	sxtb	r6, r6
 801735c:	e6c0      	b.n	80170e0 <Argus_Dca_Evaluate+0x648>
 801735e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8017362:	2b00      	cmp	r3, #0
 8017364:	f000 81a4 	beq.w	80176b0 <Argus_Dca_Evaluate+0xc18>
 8017368:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801736c:	4596      	cmp	lr, r2
 801736e:	f000 819f 	beq.w	80176b0 <Argus_Dca_Evaluate+0xc18>
 8017372:	fb03 f20e 	mul.w	r2, r3, lr
 8017376:	0192      	lsls	r2, r2, #6
 8017378:	f5c2 3280 	rsb	r2, r2, #65536	@ 0x10000
 801737c:	2a01      	cmp	r2, #1
 801737e:	bfb8      	it	lt
 8017380:	2201      	movlt	r2, #1
 8017382:	fab2 f382 	clz	r3, r2
 8017386:	f1c3 011e 	rsb	r1, r3, #30
 801738a:	40ca      	lsrs	r2, r1
 801738c:	f1c3 031f 	rsb	r3, r3, #31
 8017390:	2a03      	cmp	r2, #3
 8017392:	bf08      	it	eq
 8017394:	3301      	addeq	r3, #1
 8017396:	f1c3 0310 	rsb	r3, r3, #16
 801739a:	b25b      	sxtb	r3, r3
 801739c:	f8ba 2010 	ldrh.w	r2, [sl, #16]
 80173a0:	b14b      	cbz	r3, 80173b6 <Argus_Dca_Evaluate+0x91e>
 80173a2:	2b20      	cmp	r3, #32
 80173a4:	f200 8182 	bhi.w	80176ac <Argus_Dca_Evaluate+0xc14>
 80173a8:	3b01      	subs	r3, #1
 80173aa:	fa22 f303 	lsr.w	r3, r2, r3
 80173ae:	f003 0201 	and.w	r2, r3, #1
 80173b2:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 80173b6:	f8ba 100c 	ldrh.w	r1, [sl, #12]
 80173ba:	b293      	uxth	r3, r2
 80173bc:	428b      	cmp	r3, r1
 80173be:	bf38      	it	cc
 80173c0:	460b      	movcc	r3, r1
 80173c2:	4298      	cmp	r0, r3
 80173c4:	bf88      	it	hi
 80173c6:	8463      	strhhi	r3, [r4, #34]	@ 0x22
 80173c8:	4561      	cmp	r1, ip
 80173ca:	d838      	bhi.n	801743e <Argus_Dca_Evaluate+0x9a6>
 80173cc:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
 80173d0:	b353      	cbz	r3, 8017428 <Argus_Dca_Evaluate+0x990>
 80173d2:	3b01      	subs	r3, #1
 80173d4:	f884 3027 	strb.w	r3, [r4, #39]	@ 0x27
 80173d8:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 80173dc:	f8ba 2010 	ldrh.w	r2, [sl, #16]
 80173e0:	b14b      	cbz	r3, 80173f6 <Argus_Dca_Evaluate+0x95e>
 80173e2:	2b20      	cmp	r3, #32
 80173e4:	f200 8167 	bhi.w	80176b6 <Argus_Dca_Evaluate+0xc1e>
 80173e8:	3b01      	subs	r3, #1
 80173ea:	fa22 f303 	lsr.w	r3, r2, r3
 80173ee:	f003 0201 	and.w	r2, r3, #1
 80173f2:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 80173f6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80173fa:	b292      	uxth	r2, r2
 80173fc:	429a      	cmp	r2, r3
 80173fe:	f240 815c 	bls.w	80176ba <Argus_Dca_Evaluate+0xc22>
 8017402:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 8017404:	4291      	cmp	r1, r2
 8017406:	f67f ae63 	bls.w	80170d0 <Argus_Dca_Evaluate+0x638>
 801740a:	8462      	strh	r2, [r4, #34]	@ 0x22
 801740c:	e660      	b.n	80170d0 <Argus_Dca_Evaluate+0x638>
 801740e:	4298      	cmp	r0, r3
 8017410:	d824      	bhi.n	801745c <Argus_Dca_Evaluate+0x9c4>
 8017412:	fbb3 f3f0 	udiv	r3, r3, r0
 8017416:	9a00      	ldr	r2, [sp, #0]
 8017418:	019b      	lsls	r3, r3, #6
 801741a:	4293      	cmp	r3, r2
 801741c:	bf28      	it	cs
 801741e:	4613      	movcs	r3, r2
 8017420:	b29b      	uxth	r3, r3
 8017422:	9300      	str	r3, [sp, #0]
 8017424:	2301      	movs	r3, #1
 8017426:	e6a0      	b.n	801716a <Argus_Dca_Evaluate+0x6d2>
 8017428:	f8b5 21c8 	ldrh.w	r2, [r5, #456]	@ 0x1c8
 801742c:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 801742e:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8017432:	4291      	cmp	r1, r2
 8017434:	d91a      	bls.n	801746c <Argus_Dca_Evaluate+0x9d4>
 8017436:	b9bb      	cbnz	r3, 8017468 <Argus_Dca_Evaluate+0x9d0>
 8017438:	f8ba 2010 	ldrh.w	r2, [sl, #16]
 801743c:	e7db      	b.n	80173f6 <Argus_Dca_Evaluate+0x95e>
 801743e:	2300      	movs	r3, #0
 8017440:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
 8017444:	f897 30d6 	ldrb.w	r3, [r7, #214]	@ 0xd6
 8017448:	f884 3027 	strb.w	r3, [r4, #39]	@ 0x27
 801744c:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801744e:	f7fc fcdb 	bl	8013e08 <Argus_Eval_ResetShotNoiseAmplitude>
 8017452:	e9d4 a717 	ldrd	sl, r7, [r4, #92]	@ 0x5c
 8017456:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 801745a:	e7bf      	b.n	80173dc <Argus_Dca_Evaluate+0x944>
 801745c:	2b03      	cmp	r3, #3
 801745e:	d90e      	bls.n	801747e <Argus_Dca_Evaluate+0x9e6>
 8017460:	2200      	movs	r2, #0
 8017462:	089b      	lsrs	r3, r3, #2
 8017464:	9201      	str	r2, [sp, #4]
 8017466:	e7d6      	b.n	8017416 <Argus_Dca_Evaluate+0x97e>
 8017468:	3b01      	subs	r3, #1
 801746a:	e7e9      	b.n	8017440 <Argus_Dca_Evaluate+0x9a8>
 801746c:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 801746e:	4291      	cmp	r1, r2
 8017470:	d2b4      	bcs.n	80173dc <Argus_Dca_Evaluate+0x944>
 8017472:	f894 2021 	ldrb.w	r2, [r4, #33]	@ 0x21
 8017476:	429a      	cmp	r2, r3
 8017478:	d9b0      	bls.n	80173dc <Argus_Dca_Evaluate+0x944>
 801747a:	3301      	adds	r3, #1
 801747c:	e7e0      	b.n	8017440 <Argus_Dca_Evaluate+0x9a8>
 801747e:	2300      	movs	r3, #0
 8017480:	9301      	str	r3, [sp, #4]
 8017482:	2301      	movs	r3, #1
 8017484:	e7c7      	b.n	8017416 <Argus_Dca_Evaluate+0x97e>
 8017486:	f89a 2002 	ldrb.w	r2, [sl, #2]
 801748a:	4593      	cmp	fp, r2
 801748c:	d305      	bcc.n	801749a <Argus_Dca_Evaluate+0xa02>
 801748e:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 8017490:	f8ba 200e 	ldrh.w	r2, [sl, #14]
 8017494:	8be0      	ldrh	r0, [r4, #30]
 8017496:	08bf      	lsrs	r7, r7, #2
 8017498:	e6f3      	b.n	8017282 <Argus_Dca_Evaluate+0x7ea>
 801749a:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801749e:	4593      	cmp	fp, r2
 80174a0:	d240      	bcs.n	8017524 <Argus_Dca_Evaluate+0xa8c>
 80174a2:	f8ba 0008 	ldrh.w	r0, [sl, #8]
 80174a6:	4283      	cmp	r3, r0
 80174a8:	d83c      	bhi.n	8017524 <Argus_Dca_Evaluate+0xa8c>
 80174aa:	f1bb 0f00 	cmp.w	fp, #0
 80174ae:	d134      	bne.n	801751a <Argus_Dca_Evaluate+0xa82>
 80174b0:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80174b4:	4293      	cmp	r3, r2
 80174b6:	d830      	bhi.n	801751a <Argus_Dca_Evaluate+0xa82>
 80174b8:	f8ba 1006 	ldrh.w	r1, [sl, #6]
 80174bc:	4299      	cmp	r1, r3
 80174be:	d920      	bls.n	8017502 <Argus_Dca_Evaluate+0xa6a>
 80174c0:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 80174c2:	9a03      	ldr	r2, [sp, #12]
 80174c4:	4291      	cmp	r1, r2
 80174c6:	d808      	bhi.n	80174da <Argus_Dca_Evaluate+0xa42>
 80174c8:	9a05      	ldr	r2, [sp, #20]
 80174ca:	2a00      	cmp	r2, #0
 80174cc:	f040 80c8 	bne.w	8017660 <Argus_Dca_Evaluate+0xbc8>
 80174d0:	f89a 200b 	ldrb.w	r2, [sl, #11]
 80174d4:	2a00      	cmp	r2, #0
 80174d6:	f000 80c3 	beq.w	8017660 <Argus_Dca_Evaluate+0xbc8>
 80174da:	2b02      	cmp	r3, #2
 80174dc:	bf38      	it	cc
 80174de:	2302      	movcc	r3, #2
 80174e0:	0319      	lsls	r1, r3, #12
 80174e2:	0300      	lsls	r0, r0, #12
 80174e4:	f7fd fca2 	bl	8014e2c <fp_div16.part.0>
 80174e8:	fba0 3007 	umull	r3, r0, r0, r7
 80174ec:	0c1a      	lsrs	r2, r3, #16
 80174ee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80174f2:	f3c3 37c0 	ubfx	r7, r3, #15, #1
 80174f6:	4417      	add	r7, r2
 80174f8:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 80174fa:	f8ba 200e 	ldrh.w	r2, [sl, #14]
 80174fe:	8be0      	ldrh	r0, [r4, #30]
 8017500:	e6bf      	b.n	8017282 <Argus_Dca_Evaluate+0x7ea>
 8017502:	4293      	cmp	r3, r2
 8017504:	d209      	bcs.n	801751a <Argus_Dca_Evaluate+0xa82>
 8017506:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 801750a:	f89a 2012 	ldrb.w	r2, [sl, #18]
 801750e:	4293      	cmp	r3, r2
 8017510:	bf28      	it	cs
 8017512:	4613      	movcs	r3, r2
 8017514:	4543      	cmp	r3, r8
 8017516:	d90f      	bls.n	8017538 <Argus_Dca_Evaluate+0xaa0>
 8017518:	007f      	lsls	r7, r7, #1
 801751a:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 801751c:	f8ba 200e 	ldrh.w	r2, [sl, #14]
 8017520:	8be0      	ldrh	r0, [r4, #30]
 8017522:	e6ae      	b.n	8017282 <Argus_Dca_Evaluate+0x7ea>
 8017524:	f89a 3012 	ldrb.w	r3, [sl, #18]
 8017528:	4543      	cmp	r3, r8
 801752a:	d217      	bcs.n	801755c <Argus_Dca_Evaluate+0xac4>
 801752c:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 801752e:	f8ba 200e 	ldrh.w	r2, [sl, #14]
 8017532:	8be0      	ldrh	r0, [r4, #30]
 8017534:	087f      	lsrs	r7, r7, #1
 8017536:	e6a4      	b.n	8017282 <Argus_Dca_Evaluate+0x7ea>
 8017538:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 801753a:	9b03      	ldr	r3, [sp, #12]
 801753c:	4299      	cmp	r1, r3
 801753e:	d9ed      	bls.n	801751c <Argus_Dca_Evaluate+0xa84>
 8017540:	9b03      	ldr	r3, [sp, #12]
 8017542:	8be0      	ldrh	r0, [r4, #30]
 8017544:	f8ba 200e 	ldrh.w	r2, [sl, #14]
 8017548:	2b3f      	cmp	r3, #63	@ 0x3f
 801754a:	bf94      	ite	ls
 801754c:	4603      	movls	r3, r0
 801754e:	2340      	movhi	r3, #64	@ 0x40
 8017550:	fb0c f303 	mul.w	r3, ip, r3
 8017554:	fa03 f308 	lsl.w	r3, r3, r8
 8017558:	441f      	add	r7, r3
 801755a:	e692      	b.n	8017282 <Argus_Dca_Evaluate+0x7ea>
 801755c:	f8ba 200e 	ldrh.w	r2, [sl, #14]
 8017560:	9b03      	ldr	r3, [sp, #12]
 8017562:	429a      	cmp	r2, r3
 8017564:	f0c0 8132 	bcc.w	80177cc <Argus_Dca_Evaluate+0xd34>
 8017568:	9b05      	ldr	r3, [sp, #20]
 801756a:	2b01      	cmp	r3, #1
 801756c:	f000 8129 	beq.w	80177c2 <Argus_Dca_Evaluate+0xd2a>
 8017570:	f89a 1013 	ldrb.w	r1, [sl, #19]
 8017574:	4541      	cmp	r1, r8
 8017576:	f080 8096 	bcs.w	80176a6 <Argus_Dca_Evaluate+0xc0e>
 801757a:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 801757c:	8be0      	ldrh	r0, [r4, #30]
 801757e:	087f      	lsrs	r7, r7, #1
 8017580:	e67f      	b.n	8017282 <Argus_Dca_Evaluate+0x7ea>
 8017582:	9a02      	ldr	r2, [sp, #8]
 8017584:	f884 8034 	strb.w	r8, [r4, #52]	@ 0x34
 8017588:	1e51      	subs	r1, r2, #1
 801758a:	b24a      	sxtb	r2, r1
 801758c:	9204      	str	r2, [sp, #16]
 801758e:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8017592:	e580      	b.n	8017096 <Argus_Dca_Evaluate+0x5fe>
 8017594:	9a06      	ldr	r2, [sp, #24]
 8017596:	9907      	ldr	r1, [sp, #28]
 8017598:	4252      	negs	r2, r2
 801759a:	4291      	cmp	r1, r2
 801759c:	da30      	bge.n	8017600 <Argus_Dca_Evaluate+0xb68>
 801759e:	f1b8 0f02 	cmp.w	r8, #2
 80175a2:	d81b      	bhi.n	80175dc <Argus_Dca_Evaluate+0xb44>
 80175a4:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 80175a8:	f897 10c8 	ldrb.w	r1, [r7, #200]	@ 0xc8
 80175ac:	4411      	add	r1, r2
 80175ae:	b249      	sxtb	r1, r1
 80175b0:	4589      	cmp	r9, r1
 80175b2:	da08      	bge.n	80175c6 <Argus_Dca_Evaluate+0xb2e>
 80175b4:	9902      	ldr	r1, [sp, #8]
 80175b6:	f884 8034 	strb.w	r8, [r4, #52]	@ 0x34
 80175ba:	3101      	adds	r1, #1
 80175bc:	b249      	sxtb	r1, r1
 80175be:	9104      	str	r1, [sp, #16]
 80175c0:	e569      	b.n	8017096 <Argus_Dca_Evaluate+0x5fe>
 80175c2:	2600      	movs	r6, #0
 80175c4:	e576      	b.n	80170b4 <Argus_Dca_Evaluate+0x61c>
 80175c6:	f89a 1013 	ldrb.w	r1, [sl, #19]
 80175ca:	4588      	cmp	r8, r1
 80175cc:	d10c      	bne.n	80175e8 <Argus_Dca_Evaluate+0xb50>
 80175ce:	9902      	ldr	r1, [sp, #8]
 80175d0:	f884 8034 	strb.w	r8, [r4, #52]	@ 0x34
 80175d4:	3901      	subs	r1, #1
 80175d6:	b249      	sxtb	r1, r1
 80175d8:	9104      	str	r1, [sp, #16]
 80175da:	e55c      	b.n	8017096 <Argus_Dca_Evaluate+0x5fe>
 80175dc:	f89a 1013 	ldrb.w	r1, [sl, #19]
 80175e0:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 80175e4:	4588      	cmp	r8, r1
 80175e6:	d004      	beq.n	80175f2 <Argus_Dca_Evaluate+0xb5a>
 80175e8:	4588      	cmp	r8, r1
 80175ea:	bf84      	itt	hi
 80175ec:	f108 31ff 	addhi.w	r1, r8, #4294967295
 80175f0:	b2c9      	uxtbhi	r1, r1
 80175f2:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
 80175f6:	9902      	ldr	r1, [sp, #8]
 80175f8:	3101      	adds	r1, #1
 80175fa:	b249      	sxtb	r1, r1
 80175fc:	9104      	str	r1, [sp, #16]
 80175fe:	e54a      	b.n	8017096 <Argus_Dca_Evaluate+0x5fe>
 8017600:	f1b8 0f02 	cmp.w	r8, #2
 8017604:	d849      	bhi.n	801769a <Argus_Dca_Evaluate+0xc02>
 8017606:	eb07 0208 	add.w	r2, r7, r8
 801760a:	9904      	ldr	r1, [sp, #16]
 801760c:	f892 20c6 	ldrb.w	r2, [r2, #198]	@ 0xc6
 8017610:	4291      	cmp	r1, r2
 8017612:	da42      	bge.n	801769a <Argus_Dca_Evaluate+0xc02>
 8017614:	f89a 2014 	ldrb.w	r2, [sl, #20]
 8017618:	4542      	cmp	r2, r8
 801761a:	bf84      	itt	hi
 801761c:	f108 0201 	addhi.w	r2, r8, #1
 8017620:	b2d2      	uxtbhi	r2, r2
 8017622:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
 8017626:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 801762a:	e534      	b.n	8017096 <Argus_Dca_Evaluate+0x5fe>
 801762c:	f6bf ac11 	bge.w	8016e52 <Argus_Dca_Evaluate+0x3ba>
 8017630:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8017632:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 8017634:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8017636:	1ac0      	subs	r0, r0, r3
 8017638:	fb06 f101 	mul.w	r1, r6, r1
 801763c:	4288      	cmp	r0, r1
 801763e:	f6bf ac08 	bge.w	8016e52 <Argus_Dca_Evaluate+0x3ba>
 8017642:	f1b8 0f00 	cmp.w	r8, #0
 8017646:	f040 8082 	bne.w	801774e <Argus_Dca_Evaluate+0xcb6>
 801764a:	f884 8034 	strb.w	r8, [r4, #52]	@ 0x34
 801764e:	f042 0220 	orr.w	r2, r2, #32
 8017652:	f997 10c0 	ldrsb.w	r1, [r7, #192]	@ 0xc0
 8017656:	61aa      	str	r2, [r5, #24]
 8017658:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 801765c:	9104      	str	r1, [sp, #16]
 801765e:	e51a      	b.n	8017096 <Argus_Dca_Evaluate+0x5fe>
 8017660:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 8017664:	4543      	cmp	r3, r8
 8017666:	f67f af59 	bls.w	801751c <Argus_Dca_Evaluate+0xa84>
 801766a:	f8ba 200e 	ldrh.w	r2, [sl, #14]
 801766e:	8be0      	ldrh	r0, [r4, #30]
 8017670:	007f      	lsls	r7, r7, #1
 8017672:	e606      	b.n	8017282 <Argus_Dca_Evaluate+0x7ea>
 8017674:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8017676:	f8b7 60c4 	ldrh.w	r6, [r7, #196]	@ 0xc4
 801767a:	1ac9      	subs	r1, r1, r3
 801767c:	42b1      	cmp	r1, r6
 801767e:	f77f abdb 	ble.w	8016e38 <Argus_Dca_Evaluate+0x3a0>
 8017682:	2100      	movs	r1, #0
 8017684:	f042 0220 	orr.w	r2, r2, #32
 8017688:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
 801768c:	f997 10c0 	ldrsb.w	r1, [r7, #192]	@ 0xc0
 8017690:	61aa      	str	r2, [r5, #24]
 8017692:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8017696:	9104      	str	r1, [sp, #16]
 8017698:	e4fd      	b.n	8017096 <Argus_Dca_Evaluate+0x5fe>
 801769a:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 801769e:	f884 8034 	strb.w	r8, [r4, #52]	@ 0x34
 80176a2:	e4f8      	b.n	8017096 <Argus_Dca_Evaluate+0x5fe>
 80176a4:	461f      	mov	r7, r3
 80176a6:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 80176a8:	8be0      	ldrh	r0, [r4, #30]
 80176aa:	e5ea      	b.n	8017282 <Argus_Dca_Evaluate+0x7ea>
 80176ac:	2200      	movs	r2, #0
 80176ae:	e682      	b.n	80173b6 <Argus_Dca_Evaluate+0x91e>
 80176b0:	f8ba 100c 	ldrh.w	r1, [sl, #12]
 80176b4:	e688      	b.n	80173c8 <Argus_Dca_Evaluate+0x930>
 80176b6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80176ba:	461a      	mov	r2, r3
 80176bc:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 80176c0:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
 80176c4:	e69d      	b.n	8017402 <Argus_Dca_Evaluate+0x96a>
 80176c6:	0098      	lsls	r0, r3, #2
 80176c8:	fa00 f00b 	lsl.w	r0, r0, fp
 80176cc:	4287      	cmp	r7, r0
 80176ce:	f0c0 80a5 	bcc.w	801781c <Argus_Dca_Evaluate+0xd84>
 80176d2:	f04f 0c04 	mov.w	ip, #4
 80176d6:	fb0c f201 	mul.w	r2, ip, r1
 80176da:	fa02 f00b 	lsl.w	r0, r2, fp
 80176de:	4287      	cmp	r7, r0
 80176e0:	d918      	bls.n	8017714 <Argus_Dca_Evaluate+0xc7c>
 80176e2:	fbb7 f7f2 	udiv	r7, r7, r2
 80176e6:	fab7 f387 	clz	r3, r7
 80176ea:	f1c3 021e 	rsb	r2, r3, #30
 80176ee:	40d7      	lsrs	r7, r2
 80176f0:	f1c3 031f 	rsb	r3, r3, #31
 80176f4:	2f03      	cmp	r7, #3
 80176f6:	bf08      	it	eq
 80176f8:	3301      	addeq	r3, #1
 80176fa:	455b      	cmp	r3, fp
 80176fc:	bf38      	it	cc
 80176fe:	465b      	movcc	r3, fp
 8017700:	42ab      	cmp	r3, r5
 8017702:	bf28      	it	cs
 8017704:	462b      	movcs	r3, r5
 8017706:	e9cd 1800 	strd	r1, r8, [sp]
 801770a:	fa5f fb83 	uxtb.w	fp, r3
 801770e:	f89a 1013 	ldrb.w	r1, [sl, #19]
 8017712:	e612      	b.n	801733a <Argus_Dca_Evaluate+0x8a2>
 8017714:	fa0c fc0b 	lsl.w	ip, ip, fp
 8017718:	eb07 025c 	add.w	r2, r7, ip, lsr #1
 801771c:	fbb2 f2fc 	udiv	r2, r2, ip
 8017720:	4293      	cmp	r3, r2
 8017722:	bf38      	it	cc
 8017724:	4613      	movcc	r3, r2
 8017726:	428b      	cmp	r3, r1
 8017728:	bf28      	it	cs
 801772a:	460b      	movcs	r3, r1
 801772c:	b29a      	uxth	r2, r3
 801772e:	f022 013f 	bic.w	r1, r2, #63	@ 0x3f
 8017732:	f894 0020 	ldrb.w	r0, [r4, #32]
 8017736:	b1a1      	cbz	r1, 8017762 <Argus_Dca_Evaluate+0xcca>
 8017738:	f102 0320 	add.w	r3, r2, #32
 801773c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8017740:	b29b      	uxth	r3, r3
 8017742:	9300      	str	r3, [sp, #0]
 8017744:	f89a 1013 	ldrb.w	r1, [sl, #19]
 8017748:	f8cd 8004 	str.w	r8, [sp, #4]
 801774c:	e5f5      	b.n	801733a <Argus_Dca_Evaluate+0x8a2>
 801774e:	f89a 2013 	ldrb.w	r2, [sl, #19]
 8017752:	4542      	cmp	r2, r8
 8017754:	bf3c      	itt	cc
 8017756:	f108 32ff 	addcc.w	r2, r8, #4294967295
 801775a:	b2d2      	uxtbcc	r2, r2
 801775c:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
 8017760:	e493      	b.n	801708a <Argus_Dca_Evaluate+0x5f2>
 8017762:	0281      	lsls	r1, r0, #10
 8017764:	2800      	cmp	r0, #0
 8017766:	d053      	beq.n	8017810 <Argus_Dca_Evaluate+0xd78>
 8017768:	fb00 f303 	mul.w	r3, r0, r3
 801776c:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8017770:	eb02 1393 	add.w	r3, r2, r3, lsr #6
 8017774:	2b01      	cmp	r3, #1
 8017776:	bf38      	it	cc
 8017778:	2301      	movcc	r3, #1
 801777a:	4618      	mov	r0, r3
 801777c:	f7fd fb56 	bl	8014e2c <fp_div16.part.0>
 8017780:	f894 5034 	ldrb.w	r5, [r4, #52]	@ 0x34
 8017784:	b283      	uxth	r3, r0
 8017786:	9300      	str	r3, [sp, #0]
 8017788:	e7dc      	b.n	8017744 <Argus_Dca_Evaluate+0xcac>
 801778a:	9a00      	ldr	r2, [sp, #0]
 801778c:	fa00 f00b 	lsl.w	r0, r0, fp
 8017790:	eb07 0350 	add.w	r3, r7, r0, lsr #1
 8017794:	fbb3 f3f0 	udiv	r3, r3, r0
 8017798:	4293      	cmp	r3, r2
 801779a:	bf38      	it	cc
 801779c:	4613      	movcc	r3, r2
 801779e:	428b      	cmp	r3, r1
 80177a0:	bf28      	it	cs
 80177a2:	460b      	movcs	r3, r1
 80177a4:	b29a      	uxth	r2, r3
 80177a6:	f022 013f 	bic.w	r1, r2, #63	@ 0x3f
 80177aa:	f894 0020 	ldrb.w	r0, [r4, #32]
 80177ae:	b1d1      	cbz	r1, 80177e6 <Argus_Dca_Evaluate+0xd4e>
 80177b0:	f102 0320 	add.w	r3, r2, #32
 80177b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80177b8:	b29b      	uxth	r3, r3
 80177ba:	f89a 1013 	ldrb.w	r1, [sl, #19]
 80177be:	9300      	str	r3, [sp, #0]
 80177c0:	e5bb      	b.n	801733a <Argus_Dca_Evaluate+0x8a2>
 80177c2:	f89a 300b 	ldrb.w	r3, [sl, #11]
 80177c6:	2b01      	cmp	r3, #1
 80177c8:	f43f aed2 	beq.w	8017570 <Argus_Dca_Evaluate+0xad8>
 80177cc:	9b03      	ldr	r3, [sp, #12]
 80177ce:	8be0      	ldrh	r0, [r4, #30]
 80177d0:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 80177d2:	2b40      	cmp	r3, #64	@ 0x40
 80177d4:	bf94      	ite	ls
 80177d6:	4603      	movls	r3, r0
 80177d8:	2340      	movhi	r3, #64	@ 0x40
 80177da:	fb0c f303 	mul.w	r3, ip, r3
 80177de:	fa03 f308 	lsl.w	r3, r3, r8
 80177e2:	1aff      	subs	r7, r7, r3
 80177e4:	e54d      	b.n	8017282 <Argus_Dca_Evaluate+0x7ea>
 80177e6:	0281      	lsls	r1, r0, #10
 80177e8:	b1a8      	cbz	r0, 8017816 <Argus_Dca_Evaluate+0xd7e>
 80177ea:	fb00 f303 	mul.w	r3, r0, r3
 80177ee:	f3c3 1240 	ubfx	r2, r3, #5, #1
 80177f2:	eb02 1393 	add.w	r3, r2, r3, lsr #6
 80177f6:	2b01      	cmp	r3, #1
 80177f8:	bf38      	it	cc
 80177fa:	2301      	movcc	r3, #1
 80177fc:	4618      	mov	r0, r3
 80177fe:	f7fd fb15 	bl	8014e2c <fp_div16.part.0>
 8017802:	f894 5034 	ldrb.w	r5, [r4, #52]	@ 0x34
 8017806:	f89a 1013 	ldrb.w	r1, [sl, #19]
 801780a:	b283      	uxth	r3, r0
 801780c:	9300      	str	r3, [sp, #0]
 801780e:	e594      	b.n	801733a <Argus_Dca_Evaluate+0x8a2>
 8017810:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8017814:	e7b6      	b.n	8017784 <Argus_Dca_Evaluate+0xcec>
 8017816:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801781a:	e7f4      	b.n	8017806 <Argus_Dca_Evaluate+0xd6e>
 801781c:	428a      	cmp	r2, r1
 801781e:	4613      	mov	r3, r2
 8017820:	bf28      	it	cs
 8017822:	460b      	movcs	r3, r1
 8017824:	9300      	str	r3, [sp, #0]
 8017826:	2004      	movs	r0, #4
 8017828:	e565      	b.n	80172f6 <Argus_Dca_Evaluate+0x85e>
 801782a:	bf00      	nop

0801782c <GetStatusCallback>:
 801782c:	6008      	str	r0, [r1, #0]
 801782e:	4770      	bx	lr

08017830 <FinishDetuneClock>:
 8017830:	2800      	cmp	r0, #0
 8017832:	db06      	blt.n	8017842 <FinishDetuneClock+0x12>
 8017834:	f8d1 3104 	ldr.w	r3, [r1, #260]	@ 0x104
 8017838:	b113      	cbz	r3, 8017840 <FinishDetuneClock+0x10>
 801783a:	f8d1 1108 	ldr.w	r1, [r1, #264]	@ 0x108
 801783e:	4718      	bx	r3
 8017840:	4770      	bx	lr
 8017842:	b410      	push	{r4}
 8017844:	f891 30fd 	ldrb.w	r3, [r1, #253]	@ 0xfd
 8017848:	6f8c      	ldr	r4, [r1, #120]	@ 0x78
 801784a:	4a09      	ldr	r2, [pc, #36]	@ (8017870 <FinishDetuneClock+0x40>)
 801784c:	f043 0302 	orr.w	r3, r3, #2
 8017850:	f881 30fd 	strb.w	r3, [r1, #253]	@ 0xfd
 8017854:	f8d1 3104 	ldr.w	r3, [r1, #260]	@ 0x104
 8017858:	4322      	orrs	r2, r4
 801785a:	678a      	str	r2, [r1, #120]	@ 0x78
 801785c:	b123      	cbz	r3, 8017868 <FinishDetuneClock+0x38>
 801785e:	f8d1 1108 	ldr.w	r1, [r1, #264]	@ 0x108
 8017862:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017866:	4718      	bx	r3
 8017868:	f85d 4b04 	ldr.w	r4, [sp], #4
 801786c:	4770      	bx	lr
 801786e:	bf00      	nop
 8017870:	0003dffe 	.word	0x0003dffe

08017874 <ChargePumpRamp>:
 8017874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017878:	1e06      	subs	r6, r0, #0
 801787a:	b084      	sub	sp, #16
 801787c:	460c      	mov	r4, r1
 801787e:	db07      	blt.n	8017890 <ChargePumpRamp+0x1c>
 8017880:	6f8f      	ldr	r7, [r1, #120]	@ 0x78
 8017882:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8017884:	f007 7700 	and.w	r7, r7, #33554432	@ 0x2000000
 8017888:	f003 0320 	and.w	r3, r3, #32
 801788c:	433b      	orrs	r3, r7
 801788e:	d105      	bne.n	801789c <ChargePumpRamp+0x28>
 8017890:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 8017894:	b004      	add	sp, #16
 8017896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801789a:	4718      	bx	r3
 801789c:	f891 80fb 	ldrb.w	r8, [r1, #251]	@ 0xfb
 80178a0:	f8d1 311c 	ldr.w	r3, [r1, #284]	@ 0x11c
 80178a4:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 80178a8:	f1b8 0f09 	cmp.w	r8, #9
 80178ac:	a903      	add	r1, sp, #12
 80178ae:	a802      	add	r0, sp, #8
 80178b0:	bf94      	ite	ls
 80178b2:	8bdd      	ldrhls	r5, [r3, #30]
 80178b4:	8c1d      	ldrhhi	r5, [r3, #32]
 80178b6:	f7f6 fa53 	bl	800dd60 <Timer_GetCounterValue>
 80178ba:	f8d4 2118 	ldr.w	r2, [r4, #280]	@ 0x118
 80178be:	f8df c138 	ldr.w	ip, [pc, #312]	@ 80179f8 <ChargePumpRamp+0x184>
 80178c2:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
 80178c6:	18ab      	adds	r3, r5, r2
 80178c8:	bf2c      	ite	cs
 80178ca:	2101      	movcs	r1, #1
 80178cc:	2100      	movcc	r1, #0
 80178ce:	4563      	cmp	r3, ip
 80178d0:	e9dd 5e02 	ldrd	r5, lr, [sp, #8]
 80178d4:	d94b      	bls.n	801796e <ChargePumpRamp+0xfa>
 80178d6:	f100 0c01 	add.w	ip, r0, #1
 80178da:	4560      	cmp	r0, ip
 80178dc:	f5a3 2374 	sub.w	r3, r3, #999424	@ 0xf4000
 80178e0:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80178e4:	bf2c      	ite	cs
 80178e6:	2100      	movcs	r1, #0
 80178e8:	2101      	movcc	r1, #1
 80178ea:	2900      	cmp	r1, #0
 80178ec:	d043      	beq.n	8017976 <ChargePumpRamp+0x102>
 80178ee:	42a8      	cmp	r0, r5
 80178f0:	d06d      	beq.n	80179ce <ChargePumpRamp+0x15a>
 80178f2:	bf34      	ite	cc
 80178f4:	2201      	movcc	r2, #1
 80178f6:	2200      	movcs	r2, #0
 80178f8:	b12a      	cbz	r2, 8017906 <ChargePumpRamp+0x92>
 80178fa:	45ac      	cmp	ip, r5
 80178fc:	d05d      	beq.n	80179ba <ChargePumpRamp+0x146>
 80178fe:	bf34      	ite	cc
 8017900:	2301      	movcc	r3, #1
 8017902:	2300      	movcs	r3, #0
 8017904:	b30b      	cbz	r3, 801794a <ChargePumpRamp+0xd6>
 8017906:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	@ 0xfa
 801790a:	f894 10fa 	ldrb.w	r1, [r4, #250]	@ 0xfa
 801790e:	ba5b      	rev16	r3, r3
 8017910:	f3c3 1383 	ubfx	r3, r3, #6, #4
 8017914:	b3b7      	cbz	r7, 8017984 <ChargePumpRamp+0x110>
 8017916:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8017918:	f042 0220 	orr.w	r2, r2, #32
 801791c:	67a2      	str	r2, [r4, #120]	@ 0x78
 801791e:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8017920:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8017924:	2700      	movs	r7, #0
 8017926:	67a2      	str	r2, [r4, #120]	@ 0x78
 8017928:	f3c3 0297 	ubfx	r2, r3, #2, #24
 801792c:	f021 0103 	bic.w	r1, r1, #3
 8017930:	4311      	orrs	r1, r2
 8017932:	ea47 1383 	orr.w	r3, r7, r3, lsl #6
 8017936:	f884 10fa 	strb.w	r1, [r4, #250]	@ 0xfa
 801793a:	f884 30fb 	strb.w	r3, [r4, #251]	@ 0xfb
 801793e:	f504 718c 	add.w	r1, r4, #280	@ 0x118
 8017942:	f504 708a 	add.w	r0, r4, #276	@ 0x114
 8017946:	f7f6 fa0b 	bl	800dd60 <Timer_GetCounterValue>
 801794a:	4621      	mov	r1, r4
 801794c:	230a      	movs	r3, #10
 801794e:	f801 3ff8 	strb.w	r3, [r1, #248]!
 8017952:	4b28      	ldr	r3, [pc, #160]	@ (80179f4 <ChargePumpRamp+0x180>)
 8017954:	2200      	movs	r2, #0
 8017956:	e9cd 3400 	strd	r3, r4, [sp]
 801795a:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801795e:	2305      	movs	r3, #5
 8017960:	f00a fcb4 	bl	80222cc <ADS_Transfer>
 8017964:	2800      	cmp	r0, #0
 8017966:	db93      	blt.n	8017890 <ChargePumpRamp+0x1c>
 8017968:	b004      	add	sp, #16
 801796a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801796e:	f081 0101 	eor.w	r1, r1, #1
 8017972:	4684      	mov	ip, r0
 8017974:	e7b9      	b.n	80178ea <ChargePumpRamp+0x76>
 8017976:	42a8      	cmp	r0, r5
 8017978:	d026      	beq.n	80179c8 <ChargePumpRamp+0x154>
 801797a:	d3e6      	bcc.n	801794a <ChargePumpRamp+0xd6>
 801797c:	45ac      	cmp	ip, r5
 801797e:	d02b      	beq.n	80179d8 <ChargePumpRamp+0x164>
 8017980:	d2e3      	bcs.n	801794a <ChargePumpRamp+0xd6>
 8017982:	e7c0      	b.n	8017906 <ChargePumpRamp+0x92>
 8017984:	f8b4 204d 	ldrh.w	r2, [r4, #77]	@ 0x4d
 8017988:	ba52      	rev16	r2, r2
 801798a:	f3c2 1283 	ubfx	r2, r2, #6, #4
 801798e:	4293      	cmp	r3, r2
 8017990:	d004      	beq.n	801799c <ChargePumpRamp+0x128>
 8017992:	f1b8 0f00 	cmp.w	r8, #0
 8017996:	bf08      	it	eq
 8017998:	4613      	moveq	r3, r2
 801799a:	e7c5      	b.n	8017928 <ChargePumpRamp+0xb4>
 801799c:	f894 204e 	ldrb.w	r2, [r4, #78]	@ 0x4e
 80179a0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80179a4:	4590      	cmp	r8, r2
 80179a6:	d020      	beq.n	80179ea <ChargePumpRamp+0x176>
 80179a8:	db19      	blt.n	80179de <ChargePumpRamp+0x16a>
 80179aa:	b10a      	cbz	r2, 80179b0 <ChargePumpRamp+0x13c>
 80179ac:	f108 37ff 	add.w	r7, r8, #4294967295
 80179b0:	42ba      	cmp	r2, r7
 80179b2:	bfb8      	it	lt
 80179b4:	463a      	movlt	r2, r7
 80179b6:	b257      	sxtb	r7, r2
 80179b8:	e7b6      	b.n	8017928 <ChargePumpRamp+0xb4>
 80179ba:	4573      	cmp	r3, lr
 80179bc:	bf8c      	ite	hi
 80179be:	2300      	movhi	r3, #0
 80179c0:	2301      	movls	r3, #1
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d0c1      	beq.n	801794a <ChargePumpRamp+0xd6>
 80179c6:	e79e      	b.n	8017906 <ChargePumpRamp+0x92>
 80179c8:	4572      	cmp	r2, lr
 80179ca:	d9be      	bls.n	801794a <ChargePumpRamp+0xd6>
 80179cc:	e7d6      	b.n	801797c <ChargePumpRamp+0x108>
 80179ce:	4572      	cmp	r2, lr
 80179d0:	bf8c      	ite	hi
 80179d2:	2200      	movhi	r2, #0
 80179d4:	2201      	movls	r2, #1
 80179d6:	e78f      	b.n	80178f8 <ChargePumpRamp+0x84>
 80179d8:	4573      	cmp	r3, lr
 80179da:	d994      	bls.n	8017906 <ChargePumpRamp+0x92>
 80179dc:	e7b5      	b.n	801794a <ChargePumpRamp+0xd6>
 80179de:	f108 0701 	add.w	r7, r8, #1
 80179e2:	42ba      	cmp	r2, r7
 80179e4:	bfa8      	it	ge
 80179e6:	463a      	movge	r2, r7
 80179e8:	e7e5      	b.n	80179b6 <ChargePumpRamp+0x142>
 80179ea:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 80179ee:	4630      	mov	r0, r6
 80179f0:	e750      	b.n	8017894 <ChargePumpRamp+0x20>
 80179f2:	bf00      	nop
 80179f4:	08017875 	.word	0x08017875
 80179f8:	000f423f 	.word	0x000f423f

080179fc <FinishIntegration>:
 80179fc:	1d83      	adds	r3, r0, #6
 80179fe:	b510      	push	{r4, lr}
 8017a00:	4614      	mov	r4, r2
 8017a02:	d10d      	bne.n	8017a20 <FinishIntegration+0x24>
 8017a04:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8017a06:	4b1f      	ldr	r3, [pc, #124]	@ (8017a84 <FinishIntegration+0x88>)
 8017a08:	4313      	orrs	r3, r2
 8017a0a:	67a3      	str	r3, [r4, #120]	@ 0x78
 8017a0c:	f894 20fd 	ldrb.w	r2, [r4, #253]	@ 0xfd
 8017a10:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8017a12:	f042 0202 	orr.w	r2, r2, #2
 8017a16:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8017a1a:	f884 20fd 	strb.w	r2, [r4, #253]	@ 0xfd
 8017a1e:	67a3      	str	r3, [r4, #120]	@ 0x78
 8017a20:	22ab      	movs	r2, #171	@ 0xab
 8017a22:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 8017a26:	f884 2088 	strb.w	r2, [r4, #136]	@ 0x88
 8017a2a:	0c0a      	lsrs	r2, r1, #16
 8017a2c:	ba49      	rev16	r1, r1
 8017a2e:	f884 2089 	strb.w	r2, [r4, #137]	@ 0x89
 8017a32:	f8a4 108a 	strh.w	r1, [r4, #138]	@ 0x8a
 8017a36:	b12b      	cbz	r3, 8017a44 <FinishIntegration+0x48>
 8017a38:	2200      	movs	r2, #0
 8017a3a:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 8017a3e:	f8c4 2104 	str.w	r2, [r4, #260]	@ 0x104
 8017a42:	4798      	blx	r3
 8017a44:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
 8017a48:	f003 0382 	and.w	r3, r3, #130	@ 0x82
 8017a4c:	2b02      	cmp	r3, #2
 8017a4e:	d000      	beq.n	8017a52 <FinishIntegration+0x56>
 8017a50:	bd10      	pop	{r4, pc}
 8017a52:	f894 3064 	ldrb.w	r3, [r4, #100]	@ 0x64
 8017a56:	f894 10fd 	ldrb.w	r1, [r4, #253]	@ 0xfd
 8017a5a:	f003 0203 	and.w	r2, r3, #3
 8017a5e:	3201      	adds	r2, #1
 8017a60:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 8017a64:	f023 0303 	bic.w	r3, r3, #3
 8017a68:	f002 0203 	and.w	r2, r2, #3
 8017a6c:	4313      	orrs	r3, r2
 8017a6e:	f021 010c 	bic.w	r1, r1, #12
 8017a72:	f00c 020c 	and.w	r2, ip, #12
 8017a76:	430a      	orrs	r2, r1
 8017a78:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 8017a7c:	f884 20fd 	strb.w	r2, [r4, #253]	@ 0xfd
 8017a80:	bd10      	pop	{r4, pc}
 8017a82:	bf00      	nop
 8017a84:	0003dffe 	.word	0x0003dffe

08017a88 <FinishStartIntegration>:
 8017a88:	b508      	push	{r3, lr}
 8017a8a:	460b      	mov	r3, r1
 8017a8c:	1e01      	subs	r1, r0, #0
 8017a8e:	db10      	blt.n	8017ab2 <FinishStartIntegration+0x2a>
 8017a90:	f893 108a 	ldrb.w	r1, [r3, #138]	@ 0x8a
 8017a94:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8017a98:	0648      	lsls	r0, r1, #25
 8017a9a:	bf4c      	ite	mi
 8017a9c:	f042 0280 	orrmi.w	r2, r2, #128	@ 0x80
 8017aa0:	f022 0280 	bicpl.w	r2, r2, #128	@ 0x80
 8017aa4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8017aa8:	068a      	lsls	r2, r1, #26
 8017aaa:	bf48      	it	mi
 8017aac:	2000      	movmi	r0, #0
 8017aae:	d510      	bpl.n	8017ad2 <FinishStartIntegration+0x4a>
 8017ab0:	bd08      	pop	{r3, pc}
 8017ab2:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8017ab4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8017ab8:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 8017abc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8017ac0:	6798      	str	r0, [r3, #120]	@ 0x78
 8017ac2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8017ac6:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8017aca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017ace:	f00a ba5f 	b.w	8021f90 <ADS_Abort>
 8017ad2:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8017ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8017b00 <FinishStartIntegration+0x78>)
 8017ad6:	f893 10fd 	ldrb.w	r1, [r3, #253]	@ 0xfd
 8017ada:	4302      	orrs	r2, r0
 8017adc:	679a      	str	r2, [r3, #120]	@ 0x78
 8017ade:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8017ae0:	f041 0102 	orr.w	r1, r1, #2
 8017ae4:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8017ae8:	f883 10fd 	strb.w	r1, [r3, #253]	@ 0xfd
 8017aec:	679a      	str	r2, [r3, #120]	@ 0x78
 8017aee:	f06f 0171 	mvn.w	r1, #113	@ 0x71
 8017af2:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8017af6:	f00a fa4b 	bl	8021f90 <ADS_Abort>
 8017afa:	f06f 0071 	mvn.w	r0, #113	@ 0x71
 8017afe:	bd08      	pop	{r3, pc}
 8017b00:	0003dffe 	.word	0x0003dffe

08017b04 <DisableClock2>:
 8017b04:	b510      	push	{r4, lr}
 8017b06:	2800      	cmp	r0, #0
 8017b08:	b082      	sub	sp, #8
 8017b0a:	460c      	mov	r4, r1
 8017b0c:	db17      	blt.n	8017b3e <DisableClock2+0x3a>
 8017b0e:	f891 3058 	ldrb.w	r3, [r1, #88]	@ 0x58
 8017b12:	4a13      	ldr	r2, [pc, #76]	@ (8017b60 <DisableClock2+0x5c>)
 8017b14:	f023 0311 	bic.w	r3, r3, #17
 8017b18:	2110      	movs	r1, #16
 8017b1a:	f884 1088 	strb.w	r1, [r4, #136]	@ 0x88
 8017b1e:	f884 3089 	strb.w	r3, [r4, #137]	@ 0x89
 8017b22:	f104 0188 	add.w	r1, r4, #136	@ 0x88
 8017b26:	e9cd 2400 	strd	r2, r4, [sp]
 8017b2a:	2302      	movs	r3, #2
 8017b2c:	2200      	movs	r2, #0
 8017b2e:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 8017b32:	f00a fbcb 	bl	80222cc <ADS_Transfer>
 8017b36:	2800      	cmp	r0, #0
 8017b38:	db01      	blt.n	8017b3e <DisableClock2+0x3a>
 8017b3a:	b002      	add	sp, #8
 8017b3c:	bd10      	pop	{r4, pc}
 8017b3e:	6823      	ldr	r3, [r4, #0]
 8017b40:	3371      	adds	r3, #113	@ 0x71
 8017b42:	bf1c      	itt	ne
 8017b44:	f06f 0371 	mvnne.w	r3, #113	@ 0x71
 8017b48:	6023      	strne	r3, [r4, #0]
 8017b4a:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	d0f3      	beq.n	8017b3a <DisableClock2+0x36>
 8017b52:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 8017b56:	b002      	add	sp, #8
 8017b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b5c:	4718      	bx	r3
 8017b5e:	bf00      	nop
 8017b60:	08017be5 	.word	0x08017be5

08017b64 <WriteBlockEnable2>:
 8017b64:	b510      	push	{r4, lr}
 8017b66:	2800      	cmp	r0, #0
 8017b68:	b082      	sub	sp, #8
 8017b6a:	460c      	mov	r4, r1
 8017b6c:	db27      	blt.n	8017bbe <WriteBlockEnable2+0x5a>
 8017b6e:	f891 3089 	ldrb.w	r3, [r1, #137]	@ 0x89
 8017b72:	06da      	lsls	r2, r3, #27
 8017b74:	d41c      	bmi.n	8017bb0 <WriteBlockEnable2+0x4c>
 8017b76:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 8017b7a:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 8017b7e:	4918      	ldr	r1, [pc, #96]	@ (8017be0 <WriteBlockEnable2+0x7c>)
 8017b80:	f894 0058 	ldrb.w	r0, [r4, #88]	@ 0x58
 8017b84:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 8017b88:	f104 0288 	add.w	r2, r4, #136	@ 0x88
 8017b8c:	f04f 0c10 	mov.w	ip, #16
 8017b90:	f884 0089 	strb.w	r0, [r4, #137]	@ 0x89
 8017b94:	f884 c088 	strb.w	ip, [r4, #136]	@ 0x88
 8017b98:	2302      	movs	r3, #2
 8017b9a:	e9cd 1400 	strd	r1, r4, [sp]
 8017b9e:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 8017ba2:	4611      	mov	r1, r2
 8017ba4:	f00a fb92 	bl	80222cc <ADS_Transfer>
 8017ba8:	2800      	cmp	r0, #0
 8017baa:	db08      	blt.n	8017bbe <WriteBlockEnable2+0x5a>
 8017bac:	b002      	add	sp, #8
 8017bae:	bd10      	pop	{r4, pc}
 8017bb0:	07db      	lsls	r3, r3, #31
 8017bb2:	d4e0      	bmi.n	8017b76 <WriteBlockEnable2+0x12>
 8017bb4:	f891 30fd 	ldrb.w	r3, [r1, #253]	@ 0xfd
 8017bb8:	f043 0310 	orr.w	r3, r3, #16
 8017bbc:	e7df      	b.n	8017b7e <WriteBlockEnable2+0x1a>
 8017bbe:	6823      	ldr	r3, [r4, #0]
 8017bc0:	3371      	adds	r3, #113	@ 0x71
 8017bc2:	bf1c      	itt	ne
 8017bc4:	f06f 0371 	mvnne.w	r3, #113	@ 0x71
 8017bc8:	6023      	strne	r3, [r4, #0]
 8017bca:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d0ec      	beq.n	8017bac <WriteBlockEnable2+0x48>
 8017bd2:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 8017bd6:	b002      	add	sp, #8
 8017bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017bdc:	4718      	bx	r3
 8017bde:	bf00      	nop
 8017be0:	08018c7d 	.word	0x08018c7d

08017be4 <ResetInternalClockDivider>:
 8017be4:	b510      	push	{r4, lr}
 8017be6:	2800      	cmp	r0, #0
 8017be8:	b082      	sub	sp, #8
 8017bea:	460c      	mov	r4, r1
 8017bec:	db20      	blt.n	8017c30 <ResetInternalClockDivider+0x4c>
 8017bee:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8017bf0:	f891 205b 	ldrb.w	r2, [r1, #91]	@ 0x5b
 8017bf4:	f891 005a 	ldrb.w	r0, [r1, #90]	@ 0x5a
 8017bf8:	4915      	ldr	r1, [pc, #84]	@ (8017c50 <ResetInternalClockDivider+0x6c>)
 8017bfa:	f884 0089 	strb.w	r0, [r4, #137]	@ 0x89
 8017bfe:	f022 0218 	bic.w	r2, r2, #24
 8017c02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8017c06:	f04f 0c12 	mov.w	ip, #18
 8017c0a:	f884 208a 	strb.w	r2, [r4, #138]	@ 0x8a
 8017c0e:	67a3      	str	r3, [r4, #120]	@ 0x78
 8017c10:	f884 c088 	strb.w	ip, [r4, #136]	@ 0x88
 8017c14:	2303      	movs	r3, #3
 8017c16:	e9cd 1400 	strd	r1, r4, [sp]
 8017c1a:	2200      	movs	r2, #0
 8017c1c:	f104 0188 	add.w	r1, r4, #136	@ 0x88
 8017c20:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 8017c24:	f00a fb52 	bl	80222cc <ADS_Transfer>
 8017c28:	2800      	cmp	r0, #0
 8017c2a:	db01      	blt.n	8017c30 <ResetInternalClockDivider+0x4c>
 8017c2c:	b002      	add	sp, #8
 8017c2e:	bd10      	pop	{r4, pc}
 8017c30:	6823      	ldr	r3, [r4, #0]
 8017c32:	3371      	adds	r3, #113	@ 0x71
 8017c34:	bf1c      	itt	ne
 8017c36:	f06f 0371 	mvnne.w	r3, #113	@ 0x71
 8017c3a:	6023      	strne	r3, [r4, #0]
 8017c3c:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	d0f3      	beq.n	8017c2c <ResetInternalClockDivider+0x48>
 8017c44:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 8017c48:	b002      	add	sp, #8
 8017c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017c4e:	4718      	bx	r3
 8017c50:	080184a9 	.word	0x080184a9

08017c54 <WriteRegisterConfiguration>:
 8017c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017c56:	2800      	cmp	r0, #0
 8017c58:	b083      	sub	sp, #12
 8017c5a:	460c      	mov	r4, r1
 8017c5c:	f2c0 82dc 	blt.w	8018218 <WriteRegisterConfiguration+0x5c4>
 8017c60:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8017c62:	f413 7300 	ands.w	r3, r3, #512	@ 0x200
 8017c66:	f040 824e 	bne.w	8018106 <WriteRegisterConfiguration+0x4b2>
 8017c6a:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8017c6c:	4d75      	ldr	r5, [pc, #468]	@ (8017e44 <WriteRegisterConfiguration+0x1f0>)
 8017c6e:	0796      	lsls	r6, r2, #30
 8017c70:	f04f 0188 	mov.w	r1, #136	@ 0x88
 8017c74:	f04f 0c09 	mov.w	ip, #9
 8017c78:	f100 825b 	bmi.w	8018132 <WriteRegisterConfiguration+0x4de>
 8017c7c:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8017c7e:	0691      	lsls	r1, r2, #26
 8017c80:	f100 826d 	bmi.w	801815e <WriteRegisterConfiguration+0x50a>
 8017c84:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8017c86:	0652      	lsls	r2, r2, #25
 8017c88:	f100 8200 	bmi.w	801808c <WriteRegisterConfiguration+0x438>
 8017c8c:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8017c8e:	0617      	lsls	r7, r2, #24
 8017c90:	f100 820d 	bmi.w	80180ae <WriteRegisterConfiguration+0x45a>
 8017c94:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8017c96:	0456      	lsls	r6, r2, #17
 8017c98:	f100 8221 	bmi.w	80180de <WriteRegisterConfiguration+0x48a>
 8017c9c:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8017c9e:	0411      	lsls	r1, r2, #16
 8017ca0:	d50b      	bpl.n	8017cba <WriteRegisterConfiguration+0x66>
 8017ca2:	18e2      	adds	r2, r4, r3
 8017ca4:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8017ca6:	f8c2 1088 	str.w	r1, [r2, #136]	@ 0x88
 8017caa:	211e      	movs	r1, #30
 8017cac:	f882 1088 	strb.w	r1, [r2, #136]	@ 0x88
 8017cb0:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8017cb2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8017cb6:	3304      	adds	r3, #4
 8017cb8:	67a2      	str	r2, [r4, #120]	@ 0x78
 8017cba:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8017cbc:	03d2      	lsls	r2, r2, #15
 8017cbe:	d50b      	bpl.n	8017cd8 <WriteRegisterConfiguration+0x84>
 8017cc0:	18e2      	adds	r2, r4, r3
 8017cc2:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8017cc4:	f8c2 1088 	str.w	r1, [r2, #136]	@ 0x88
 8017cc8:	2120      	movs	r1, #32
 8017cca:	f882 1088 	strb.w	r1, [r2, #136]	@ 0x88
 8017cce:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8017cd0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8017cd4:	3304      	adds	r3, #4
 8017cd6:	67a2      	str	r2, [r4, #120]	@ 0x78
 8017cd8:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8017cda:	0397      	lsls	r7, r2, #14
 8017cdc:	d50b      	bpl.n	8017cf6 <WriteRegisterConfiguration+0xa2>
 8017cde:	18e2      	adds	r2, r4, r3
 8017ce0:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8017ce2:	f8c2 1088 	str.w	r1, [r2, #136]	@ 0x88
 8017ce6:	2122      	movs	r1, #34	@ 0x22
 8017ce8:	f882 1088 	strb.w	r1, [r2, #136]	@ 0x88
 8017cec:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8017cee:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8017cf2:	3304      	adds	r3, #4
 8017cf4:	67a2      	str	r2, [r4, #120]	@ 0x78
 8017cf6:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8017cf8:	0756      	lsls	r6, r2, #29
 8017cfa:	f140 8094 	bpl.w	8017e26 <WriteRegisterConfiguration+0x1d2>
 8017cfe:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8017d00:	0711      	lsls	r1, r2, #28
 8017d02:	d403      	bmi.n	8017d0c <WriteRegisterConfiguration+0xb8>
 8017d04:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8017d06:	06d2      	lsls	r2, r2, #27
 8017d08:	f140 8244 	bpl.w	8018194 <WriteRegisterConfiguration+0x540>
 8017d0c:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
 8017d10:	f011 0203 	ands.w	r2, r1, #3
 8017d14:	f040 8236 	bne.w	8018184 <WriteRegisterConfiguration+0x530>
 8017d18:	f894 c016 	ldrb.w	ip, [r4, #22]
 8017d1c:	7d66      	ldrb	r6, [r4, #21]
 8017d1e:	18e2      	adds	r2, r4, r3
 8017d20:	ea4f 0e5c 	mov.w	lr, ip, lsr #1
 8017d24:	ea4e 1ec6 	orr.w	lr, lr, r6, lsl #7
 8017d28:	f882 e089 	strb.w	lr, [r2, #137]	@ 0x89
 8017d2c:	ea4f 1ecc 	mov.w	lr, ip, lsl #7
 8017d30:	f894 c017 	ldrb.w	ip, [r4, #23]
 8017d34:	ea4e 0e5c 	orr.w	lr, lr, ip, lsr #1
 8017d38:	f882 e08a 	strb.w	lr, [r2, #138]	@ 0x8a
 8017d3c:	ea4f 1ecc 	mov.w	lr, ip, lsl #7
 8017d40:	f894 c018 	ldrb.w	ip, [r4, #24]
 8017d44:	ea4e 0e5c 	orr.w	lr, lr, ip, lsr #1
 8017d48:	f882 e08b 	strb.w	lr, [r2, #139]	@ 0x8b
 8017d4c:	ea4f 1ecc 	mov.w	lr, ip, lsl #7
 8017d50:	f894 c019 	ldrb.w	ip, [r4, #25]
 8017d54:	ea4e 0e5c 	orr.w	lr, lr, ip, lsr #1
 8017d58:	f882 e08c 	strb.w	lr, [r2, #140]	@ 0x8c
 8017d5c:	ea4f 1ecc 	mov.w	lr, ip, lsl #7
 8017d60:	f894 c01a 	ldrb.w	ip, [r4, #26]
 8017d64:	ea4e 0e5c 	orr.w	lr, lr, ip, lsr #1
 8017d68:	f882 e08d 	strb.w	lr, [r2, #141]	@ 0x8d
 8017d6c:	ea4f 1ecc 	mov.w	lr, ip, lsl #7
 8017d70:	f894 c01b 	ldrb.w	ip, [r4, #27]
 8017d74:	ea4e 0e5c 	orr.w	lr, lr, ip, lsr #1
 8017d78:	f882 e08e 	strb.w	lr, [r2, #142]	@ 0x8e
 8017d7c:	ea4f 1ecc 	mov.w	lr, ip, lsl #7
 8017d80:	f894 c01c 	ldrb.w	ip, [r4, #28]
 8017d84:	ea4e 0e5c 	orr.w	lr, lr, ip, lsr #1
 8017d88:	f882 e08f 	strb.w	lr, [r2, #143]	@ 0x8f
 8017d8c:	ea4f 1ecc 	mov.w	lr, ip, lsl #7
 8017d90:	f894 c01d 	ldrb.w	ip, [r4, #29]
 8017d94:	ea4e 0e5c 	orr.w	lr, lr, ip, lsr #1
 8017d98:	f882 e090 	strb.w	lr, [r2, #144]	@ 0x90
 8017d9c:	ea4f 1ecc 	mov.w	lr, ip, lsl #7
 8017da0:	f894 c01e 	ldrb.w	ip, [r4, #30]
 8017da4:	ea4e 0e5c 	orr.w	lr, lr, ip, lsr #1
 8017da8:	f882 e091 	strb.w	lr, [r2, #145]	@ 0x91
 8017dac:	ea4f 1ecc 	mov.w	lr, ip, lsl #7
 8017db0:	f894 c01f 	ldrb.w	ip, [r4, #31]
 8017db4:	ea4e 0e5c 	orr.w	lr, lr, ip, lsr #1
 8017db8:	f882 e092 	strb.w	lr, [r2, #146]	@ 0x92
 8017dbc:	ea4f 1ecc 	mov.w	lr, ip, lsl #7
 8017dc0:	f894 c020 	ldrb.w	ip, [r4, #32]
 8017dc4:	ea4e 0e5c 	orr.w	lr, lr, ip, lsr #1
 8017dc8:	f882 e093 	strb.w	lr, [r2, #147]	@ 0x93
 8017dcc:	ea4f 1ecc 	mov.w	lr, ip, lsl #7
 8017dd0:	f894 c021 	ldrb.w	ip, [r4, #33]	@ 0x21
 8017dd4:	ea4e 0e5c 	orr.w	lr, lr, ip, lsr #1
 8017dd8:	f882 e094 	strb.w	lr, [r2, #148]	@ 0x94
 8017ddc:	f894 6022 	ldrb.w	r6, [r4, #34]	@ 0x22
 8017de0:	ea4f 1ccc 	mov.w	ip, ip, lsl #7
 8017de4:	ea4c 0c56 	orr.w	ip, ip, r6, lsr #1
 8017de8:	f882 c095 	strb.w	ip, [r2, #149]	@ 0x95
 8017dec:	f894 c023 	ldrb.w	ip, [r4, #35]	@ 0x23
 8017df0:	ea4f 0e5c 	mov.w	lr, ip, lsr #1
 8017df4:	ea4e 1ec6 	orr.w	lr, lr, r6, lsl #7
 8017df8:	f882 e096 	strb.w	lr, [r2, #150]	@ 0x96
 8017dfc:	f894 6024 	ldrb.w	r6, [r4, #36]	@ 0x24
 8017e00:	0849      	lsrs	r1, r1, #1
 8017e02:	ea4f 1ccc 	mov.w	ip, ip, lsl #7
 8017e06:	2704      	movs	r7, #4
 8017e08:	ea4c 0c56 	orr.w	ip, ip, r6, lsr #1
 8017e0c:	ea41 11c6 	orr.w	r1, r1, r6, lsl #7
 8017e10:	f882 c097 	strb.w	ip, [r2, #151]	@ 0x97
 8017e14:	f882 1098 	strb.w	r1, [r2, #152]	@ 0x98
 8017e18:	f882 7088 	strb.w	r7, [r2, #136]	@ 0x88
 8017e1c:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8017e1e:	f022 0204 	bic.w	r2, r2, #4
 8017e22:	3311      	adds	r3, #17
 8017e24:	67a2      	str	r2, [r4, #120]	@ 0x78
 8017e26:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8017e28:	0717      	lsls	r7, r2, #28
 8017e2a:	f140 8118 	bpl.w	801805e <WriteRegisterConfiguration+0x40a>
 8017e2e:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8017e30:	06d6      	lsls	r6, r2, #27
 8017e32:	f140 81cd 	bpl.w	80181d0 <WriteRegisterConfiguration+0x57c>
 8017e36:	f894 e046 	ldrb.w	lr, [r4, #70]	@ 0x46
 8017e3a:	f01e 0203 	ands.w	r2, lr, #3
 8017e3e:	f040 810b 	bne.w	8018058 <WriteRegisterConfiguration+0x404>
 8017e42:	e001      	b.n	8017e48 <WriteRegisterConfiguration+0x1f4>
 8017e44:	08017c55 	.word	0x08017c55
 8017e48:	f894 1027 	ldrb.w	r1, [r4, #39]	@ 0x27
 8017e4c:	f894 6026 	ldrb.w	r6, [r4, #38]	@ 0x26
 8017e50:	18e2      	adds	r2, r4, r3
 8017e52:	0848      	lsrs	r0, r1, #1
 8017e54:	ea40 10c6 	orr.w	r0, r0, r6, lsl #7
 8017e58:	f882 0089 	strb.w	r0, [r2, #137]	@ 0x89
 8017e5c:	01c8      	lsls	r0, r1, #7
 8017e5e:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8017e62:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 8017e66:	f882 008a 	strb.w	r0, [r2, #138]	@ 0x8a
 8017e6a:	01c8      	lsls	r0, r1, #7
 8017e6c:	f894 1029 	ldrb.w	r1, [r4, #41]	@ 0x29
 8017e70:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 8017e74:	f882 008b 	strb.w	r0, [r2, #139]	@ 0x8b
 8017e78:	01c8      	lsls	r0, r1, #7
 8017e7a:	f894 102a 	ldrb.w	r1, [r4, #42]	@ 0x2a
 8017e7e:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 8017e82:	f882 008c 	strb.w	r0, [r2, #140]	@ 0x8c
 8017e86:	01c8      	lsls	r0, r1, #7
 8017e88:	f894 102b 	ldrb.w	r1, [r4, #43]	@ 0x2b
 8017e8c:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 8017e90:	f882 008d 	strb.w	r0, [r2, #141]	@ 0x8d
 8017e94:	01c8      	lsls	r0, r1, #7
 8017e96:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017e9a:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 8017e9e:	f882 008e 	strb.w	r0, [r2, #142]	@ 0x8e
 8017ea2:	01c8      	lsls	r0, r1, #7
 8017ea4:	f894 102d 	ldrb.w	r1, [r4, #45]	@ 0x2d
 8017ea8:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 8017eac:	f882 008f 	strb.w	r0, [r2, #143]	@ 0x8f
 8017eb0:	01c8      	lsls	r0, r1, #7
 8017eb2:	f894 102e 	ldrb.w	r1, [r4, #46]	@ 0x2e
 8017eb6:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 8017eba:	f882 0090 	strb.w	r0, [r2, #144]	@ 0x90
 8017ebe:	01c8      	lsls	r0, r1, #7
 8017ec0:	f894 102f 	ldrb.w	r1, [r4, #47]	@ 0x2f
 8017ec4:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 8017ec8:	f882 0091 	strb.w	r0, [r2, #145]	@ 0x91
 8017ecc:	01c8      	lsls	r0, r1, #7
 8017ece:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 8017ed2:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 8017ed6:	f882 0092 	strb.w	r0, [r2, #146]	@ 0x92
 8017eda:	01c8      	lsls	r0, r1, #7
 8017edc:	f894 1031 	ldrb.w	r1, [r4, #49]	@ 0x31
 8017ee0:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 8017ee4:	f882 0093 	strb.w	r0, [r2, #147]	@ 0x93
 8017ee8:	01c8      	lsls	r0, r1, #7
 8017eea:	f894 1032 	ldrb.w	r1, [r4, #50]	@ 0x32
 8017eee:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 8017ef2:	f882 0094 	strb.w	r0, [r2, #148]	@ 0x94
 8017ef6:	01c8      	lsls	r0, r1, #7
 8017ef8:	f894 1033 	ldrb.w	r1, [r4, #51]	@ 0x33
 8017efc:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 8017f00:	f882 0095 	strb.w	r0, [r2, #149]	@ 0x95
 8017f04:	01c8      	lsls	r0, r1, #7
 8017f06:	f894 1034 	ldrb.w	r1, [r4, #52]	@ 0x34
 8017f0a:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 8017f0e:	f882 0096 	strb.w	r0, [r2, #150]	@ 0x96
 8017f12:	01c8      	lsls	r0, r1, #7
 8017f14:	f894 1035 	ldrb.w	r1, [r4, #53]	@ 0x35
 8017f18:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 8017f1c:	f882 0097 	strb.w	r0, [r2, #151]	@ 0x97
 8017f20:	01c8      	lsls	r0, r1, #7
 8017f22:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
 8017f26:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 8017f2a:	f882 0098 	strb.w	r0, [r2, #152]	@ 0x98
 8017f2e:	01c8      	lsls	r0, r1, #7
 8017f30:	f894 1037 	ldrb.w	r1, [r4, #55]	@ 0x37
 8017f34:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 8017f38:	f882 0099 	strb.w	r0, [r2, #153]	@ 0x99
 8017f3c:	01c8      	lsls	r0, r1, #7
 8017f3e:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8017f42:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 8017f46:	f882 009a 	strb.w	r0, [r2, #154]	@ 0x9a
 8017f4a:	01c8      	lsls	r0, r1, #7
 8017f4c:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 8017f50:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 8017f54:	f882 009b 	strb.w	r0, [r2, #155]	@ 0x9b
 8017f58:	01c8      	lsls	r0, r1, #7
 8017f5a:	f894 103a 	ldrb.w	r1, [r4, #58]	@ 0x3a
 8017f5e:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 8017f62:	f882 009c 	strb.w	r0, [r2, #156]	@ 0x9c
 8017f66:	01c8      	lsls	r0, r1, #7
 8017f68:	f894 103b 	ldrb.w	r1, [r4, #59]	@ 0x3b
 8017f6c:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 8017f70:	f882 009d 	strb.w	r0, [r2, #157]	@ 0x9d
 8017f74:	01c8      	lsls	r0, r1, #7
 8017f76:	f894 103c 	ldrb.w	r1, [r4, #60]	@ 0x3c
 8017f7a:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 8017f7e:	f882 009e 	strb.w	r0, [r2, #158]	@ 0x9e
 8017f82:	01c8      	lsls	r0, r1, #7
 8017f84:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
 8017f88:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 8017f8c:	f882 009f 	strb.w	r0, [r2, #159]	@ 0x9f
 8017f90:	01c8      	lsls	r0, r1, #7
 8017f92:	f894 103e 	ldrb.w	r1, [r4, #62]	@ 0x3e
 8017f96:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 8017f9a:	f882 00a0 	strb.w	r0, [r2, #160]	@ 0xa0
 8017f9e:	01c8      	lsls	r0, r1, #7
 8017fa0:	f894 103f 	ldrb.w	r1, [r4, #63]	@ 0x3f
 8017fa4:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 8017fa8:	f882 00a1 	strb.w	r0, [r2, #161]	@ 0xa1
 8017fac:	01c8      	lsls	r0, r1, #7
 8017fae:	f894 1040 	ldrb.w	r1, [r4, #64]	@ 0x40
 8017fb2:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 8017fb6:	f882 00a2 	strb.w	r0, [r2, #162]	@ 0xa2
 8017fba:	01c8      	lsls	r0, r1, #7
 8017fbc:	f894 1041 	ldrb.w	r1, [r4, #65]	@ 0x41
 8017fc0:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 8017fc4:	f882 00a3 	strb.w	r0, [r2, #163]	@ 0xa3
 8017fc8:	01c8      	lsls	r0, r1, #7
 8017fca:	f894 1042 	ldrb.w	r1, [r4, #66]	@ 0x42
 8017fce:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 8017fd2:	f882 00a4 	strb.w	r0, [r2, #164]	@ 0xa4
 8017fd6:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8017fda:	01c9      	lsls	r1, r1, #7
 8017fdc:	ea41 0150 	orr.w	r1, r1, r0, lsr #1
 8017fe0:	f882 10a5 	strb.w	r1, [r2, #165]	@ 0xa5
 8017fe4:	ea4f 1cc0 	mov.w	ip, r0, lsl #7
 8017fe8:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8017fec:	ea4c 0c50 	orr.w	ip, ip, r0, lsr #1
 8017ff0:	f882 c0a6 	strb.w	ip, [r2, #166]	@ 0xa6
 8017ff4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017ff8:	01c0      	lsls	r0, r0, #7
 8017ffa:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 8017ffe:	01c9      	lsls	r1, r1, #7
 8018000:	ea41 015e 	orr.w	r1, r1, lr, lsr #1
 8018004:	f882 10a8 	strb.w	r1, [r2, #168]	@ 0xa8
 8018008:	2106      	movs	r1, #6
 801800a:	f882 00a7 	strb.w	r0, [r2, #167]	@ 0xa7
 801800e:	f882 1088 	strb.w	r1, [r2, #136]	@ 0x88
 8018012:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8018014:	f022 0208 	bic.w	r2, r2, #8
 8018018:	3321      	adds	r3, #33	@ 0x21
 801801a:	67a2      	str	r2, [r4, #120]	@ 0x78
 801801c:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801801e:	06d2      	lsls	r2, r2, #27
 8018020:	d50c      	bpl.n	801803c <WriteRegisterConfiguration+0x3e8>
 8018022:	18e2      	adds	r2, r4, r3
 8018024:	f8d4 1047 	ldr.w	r1, [r4, #71]	@ 0x47
 8018028:	f8c2 1088 	str.w	r1, [r2, #136]	@ 0x88
 801802c:	2108      	movs	r1, #8
 801802e:	f882 1088 	strb.w	r1, [r2, #136]	@ 0x88
 8018032:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8018034:	f022 0210 	bic.w	r2, r2, #16
 8018038:	3304      	adds	r3, #4
 801803a:	67a2      	str	r2, [r4, #120]	@ 0x78
 801803c:	f104 0288 	add.w	r2, r4, #136	@ 0x88
 8018040:	e9cd 5400 	strd	r5, r4, [sp]
 8018044:	4611      	mov	r1, r2
 8018046:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801804a:	f00a f93f 	bl	80222cc <ADS_Transfer>
 801804e:	2800      	cmp	r0, #0
 8018050:	f2c0 80e2 	blt.w	8018218 <WriteRegisterConfiguration+0x5c4>
 8018054:	b003      	add	sp, #12
 8018056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018058:	2a03      	cmp	r2, #3
 801805a:	f43f aef5 	beq.w	8017e48 <WriteRegisterConfiguration+0x1f4>
 801805e:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8018060:	06d1      	lsls	r1, r2, #27
 8018062:	d4de      	bmi.n	8018022 <WriteRegisterConfiguration+0x3ce>
 8018064:	2b00      	cmp	r3, #0
 8018066:	d1e9      	bne.n	801803c <WriteRegisterConfiguration+0x3e8>
 8018068:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 801806c:	f8d4 104b 	ldr.w	r1, [r4, #75]	@ 0x4b
 8018070:	f894 204f 	ldrb.w	r2, [r4, #79]	@ 0x4f
 8018074:	f8c4 10f8 	str.w	r1, [r4, #248]	@ 0xf8
 8018078:	f884 20fc 	strb.w	r2, [r4, #252]	@ 0xfc
 801807c:	2b00      	cmp	r3, #0
 801807e:	d0e9      	beq.n	8018054 <WriteRegisterConfiguration+0x400>
 8018080:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 8018084:	b003      	add	sp, #12
 8018086:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801808a:	4718      	bx	r3
 801808c:	18e2      	adds	r2, r4, r3
 801808e:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8018090:	f8c2 1088 	str.w	r1, [r2, #136]	@ 0x88
 8018094:	210c      	movs	r1, #12
 8018096:	f882 1088 	strb.w	r1, [r2, #136]	@ 0x88
 801809a:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801809c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80180a0:	67a2      	str	r2, [r4, #120]	@ 0x78
 80180a2:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80180a4:	0617      	lsls	r7, r2, #24
 80180a6:	f103 0304 	add.w	r3, r3, #4
 80180aa:	f57f adf3 	bpl.w	8017c94 <WriteRegisterConfiguration+0x40>
 80180ae:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 80180b2:	18a6      	adds	r6, r4, r2
 80180b4:	f8b4 c054 	ldrh.w	ip, [r4, #84]	@ 0x54
 80180b8:	f894 7056 	ldrb.w	r7, [r4, #86]	@ 0x56
 80180bc:	f824 c002 	strh.w	ip, [r4, r2]
 80180c0:	18e1      	adds	r1, r4, r3
 80180c2:	70b7      	strb	r7, [r6, #2]
 80180c4:	260e      	movs	r6, #14
 80180c6:	f881 6088 	strb.w	r6, [r1, #136]	@ 0x88
 80180ca:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80180cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80180d0:	67a2      	str	r2, [r4, #120]	@ 0x78
 80180d2:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80180d4:	0456      	lsls	r6, r2, #17
 80180d6:	f103 0303 	add.w	r3, r3, #3
 80180da:	f57f addf 	bpl.w	8017c9c <WriteRegisterConfiguration+0x48>
 80180de:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 80180e2:	18a6      	adds	r6, r4, r2
 80180e4:	f8b4 c069 	ldrh.w	ip, [r4, #105]	@ 0x69
 80180e8:	f894 706b 	ldrb.w	r7, [r4, #107]	@ 0x6b
 80180ec:	f824 c002 	strh.w	ip, [r4, r2]
 80180f0:	18e1      	adds	r1, r4, r3
 80180f2:	70b7      	strb	r7, [r6, #2]
 80180f4:	261c      	movs	r6, #28
 80180f6:	f881 6088 	strb.w	r6, [r1, #136]	@ 0x88
 80180fa:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80180fc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8018100:	3303      	adds	r3, #3
 8018102:	67a2      	str	r2, [r4, #120]	@ 0x78
 8018104:	e5ca      	b.n	8017c9c <WriteRegisterConfiguration+0x48>
 8018106:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8018108:	f8b1 105a 	ldrh.w	r1, [r1, #90]	@ 0x5a
 801810c:	f8a4 1089 	strh.w	r1, [r4, #137]	@ 0x89
 8018110:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8018114:	2212      	movs	r2, #18
 8018116:	67a3      	str	r3, [r4, #120]	@ 0x78
 8018118:	f884 2088 	strb.w	r2, [r4, #136]	@ 0x88
 801811c:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801811e:	4d44      	ldr	r5, [pc, #272]	@ (8018230 <WriteRegisterConfiguration+0x5dc>)
 8018120:	0796      	lsls	r6, r2, #30
 8018122:	f04f 018b 	mov.w	r1, #139	@ 0x8b
 8018126:	f04f 0c0c 	mov.w	ip, #12
 801812a:	f04f 0303 	mov.w	r3, #3
 801812e:	f57f ada5 	bpl.w	8017c7c <WriteRegisterConfiguration+0x28>
 8018132:	1862      	adds	r2, r4, r1
 8018134:	18e6      	adds	r6, r4, r3
 8018136:	4663      	mov	r3, ip
 8018138:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801813c:	6927      	ldr	r7, [r4, #16]
 801813e:	f844 c001 	str.w	ip, [r4, r1]
 8018142:	6057      	str	r7, [r2, #4]
 8018144:	7d21      	ldrb	r1, [r4, #20]
 8018146:	7211      	strb	r1, [r2, #8]
 8018148:	2202      	movs	r2, #2
 801814a:	f886 2088 	strb.w	r2, [r6, #136]	@ 0x88
 801814e:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8018150:	f022 0202 	bic.w	r2, r2, #2
 8018154:	67a2      	str	r2, [r4, #120]	@ 0x78
 8018156:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8018158:	0691      	lsls	r1, r2, #26
 801815a:	f57f ad93 	bpl.w	8017c84 <WriteRegisterConfiguration+0x30>
 801815e:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 8018162:	f8d4 104b 	ldr.w	r1, [r4, #75]	@ 0x4b
 8018166:	50a1      	str	r1, [r4, r2]
 8018168:	4422      	add	r2, r4
 801816a:	f894 604f 	ldrb.w	r6, [r4, #79]	@ 0x4f
 801816e:	7116      	strb	r6, [r2, #4]
 8018170:	18e1      	adds	r1, r4, r3
 8018172:	260a      	movs	r6, #10
 8018174:	f881 6088 	strb.w	r6, [r1, #136]	@ 0x88
 8018178:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801817a:	f022 0220 	bic.w	r2, r2, #32
 801817e:	3305      	adds	r3, #5
 8018180:	67a2      	str	r2, [r4, #120]	@ 0x78
 8018182:	e57f      	b.n	8017c84 <WriteRegisterConfiguration+0x30>
 8018184:	2a03      	cmp	r2, #3
 8018186:	f43f adc7 	beq.w	8017d18 <WriteRegisterConfiguration+0xc4>
 801818a:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801818c:	0717      	lsls	r7, r2, #28
 801818e:	f57f af66 	bpl.w	801805e <WriteRegisterConfiguration+0x40a>
 8018192:	e64c      	b.n	8017e2e <WriteRegisterConfiguration+0x1da>
 8018194:	f103 0188 	add.w	r1, r3, #136	@ 0x88
 8018198:	f8d4 e015 	ldr.w	lr, [r4, #21]
 801819c:	f8d4 6021 	ldr.w	r6, [r4, #33]	@ 0x21
 80181a0:	f8d4 c019 	ldr.w	ip, [r4, #25]
 80181a4:	f8d4 701d 	ldr.w	r7, [r4, #29]
 80181a8:	f844 e001 	str.w	lr, [r4, r1]
 80181ac:	1862      	adds	r2, r4, r1
 80181ae:	18e1      	adds	r1, r4, r3
 80181b0:	f8c2 c004 	str.w	ip, [r2, #4]
 80181b4:	6097      	str	r7, [r2, #8]
 80181b6:	60d6      	str	r6, [r2, #12]
 80181b8:	f894 6025 	ldrb.w	r6, [r4, #37]	@ 0x25
 80181bc:	7416      	strb	r6, [r2, #16]
 80181be:	2604      	movs	r6, #4
 80181c0:	f881 6088 	strb.w	r6, [r1, #136]	@ 0x88
 80181c4:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80181c6:	f022 0204 	bic.w	r2, r2, #4
 80181ca:	3311      	adds	r3, #17
 80181cc:	67a2      	str	r2, [r4, #120]	@ 0x78
 80181ce:	e62a      	b.n	8017e26 <WriteRegisterConfiguration+0x1d2>
 80181d0:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 80181d4:	f104 0126 	add.w	r1, r4, #38	@ 0x26
 80181d8:	4422      	add	r2, r4
 80181da:	f104 0746 	add.w	r7, r4, #70	@ 0x46
 80181de:	f8d1 e000 	ldr.w	lr, [r1]
 80181e2:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80181e6:	6888      	ldr	r0, [r1, #8]
 80181e8:	68ce      	ldr	r6, [r1, #12]
 80181ea:	60d6      	str	r6, [r2, #12]
 80181ec:	3110      	adds	r1, #16
 80181ee:	42b9      	cmp	r1, r7
 80181f0:	f8c2 e000 	str.w	lr, [r2]
 80181f4:	f8c2 c004 	str.w	ip, [r2, #4]
 80181f8:	6090      	str	r0, [r2, #8]
 80181fa:	f102 0210 	add.w	r2, r2, #16
 80181fe:	d1ee      	bne.n	80181de <WriteRegisterConfiguration+0x58a>
 8018200:	7809      	ldrb	r1, [r1, #0]
 8018202:	7011      	strb	r1, [r2, #0]
 8018204:	18e2      	adds	r2, r4, r3
 8018206:	2106      	movs	r1, #6
 8018208:	f882 1088 	strb.w	r1, [r2, #136]	@ 0x88
 801820c:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801820e:	f022 0208 	bic.w	r2, r2, #8
 8018212:	3321      	adds	r3, #33	@ 0x21
 8018214:	67a2      	str	r2, [r4, #120]	@ 0x78
 8018216:	e701      	b.n	801801c <WriteRegisterConfiguration+0x3c8>
 8018218:	6823      	ldr	r3, [r4, #0]
 801821a:	3371      	adds	r3, #113	@ 0x71
 801821c:	bf1c      	itt	ne
 801821e:	f06f 0371 	mvnne.w	r3, #113	@ 0x71
 8018222:	6023      	strne	r3, [r4, #0]
 8018224:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 8018228:	2b00      	cmp	r3, #0
 801822a:	f47f af29 	bne.w	8018080 <WriteRegisterConfiguration+0x42c>
 801822e:	e711      	b.n	8018054 <WriteRegisterConfiguration+0x400>
 8018230:	08018235 	.word	0x08018235

08018234 <WriteRegisterConfigurationCheckDeviceConfig>:
 8018234:	2800      	cmp	r0, #0
 8018236:	db11      	blt.n	801825c <WriteRegisterConfigurationCheckDeviceConfig+0x28>
 8018238:	f891 208a 	ldrb.w	r2, [r1, #138]	@ 0x8a
 801823c:	f8d1 3100 	ldr.w	r3, [r1, #256]	@ 0x100
 8018240:	0650      	lsls	r0, r2, #25
 8018242:	bf4c      	ite	mi
 8018244:	f043 0380 	orrmi.w	r3, r3, #128	@ 0x80
 8018248:	f023 0380 	bicpl.w	r3, r3, #128	@ 0x80
 801824c:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
 8018250:	0693      	lsls	r3, r2, #26
 8018252:	bf48      	it	mi
 8018254:	2000      	movmi	r0, #0
 8018256:	d50e      	bpl.n	8018276 <WriteRegisterConfigurationCheckDeviceConfig+0x42>
 8018258:	f7ff bcfc 	b.w	8017c54 <WriteRegisterConfiguration>
 801825c:	680b      	ldr	r3, [r1, #0]
 801825e:	3371      	adds	r3, #113	@ 0x71
 8018260:	bf1c      	itt	ne
 8018262:	f06f 0371 	mvnne.w	r3, #113	@ 0x71
 8018266:	600b      	strne	r3, [r1, #0]
 8018268:	f8d1 3104 	ldr.w	r3, [r1, #260]	@ 0x104
 801826c:	b113      	cbz	r3, 8018274 <WriteRegisterConfigurationCheckDeviceConfig+0x40>
 801826e:	f8d1 1108 	ldr.w	r1, [r1, #264]	@ 0x108
 8018272:	4718      	bx	r3
 8018274:	4770      	bx	lr
 8018276:	6f88      	ldr	r0, [r1, #120]	@ 0x78
 8018278:	4b07      	ldr	r3, [pc, #28]	@ (8018298 <WriteRegisterConfigurationCheckDeviceConfig+0x64>)
 801827a:	f891 20fd 	ldrb.w	r2, [r1, #253]	@ 0xfd
 801827e:	4303      	orrs	r3, r0
 8018280:	678b      	str	r3, [r1, #120]	@ 0x78
 8018282:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8018284:	f042 0202 	orr.w	r2, r2, #2
 8018288:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801828c:	f881 20fd 	strb.w	r2, [r1, #253]	@ 0xfd
 8018290:	678b      	str	r3, [r1, #120]	@ 0x78
 8018292:	f06f 0071 	mvn.w	r0, #113	@ 0x71
 8018296:	e7df      	b.n	8018258 <WriteRegisterConfigurationCheckDeviceConfig+0x24>
 8018298:	0003dffe 	.word	0x0003dffe

0801829c <WriteBlockEnable>:
 801829c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801829e:	2800      	cmp	r0, #0
 80182a0:	b085      	sub	sp, #20
 80182a2:	460c      	mov	r4, r1
 80182a4:	f2c0 809f 	blt.w	80183e6 <WriteBlockEnable+0x14a>
 80182a8:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80182aa:	05db      	lsls	r3, r3, #23
 80182ac:	d517      	bpl.n	80182de <WriteBlockEnable+0x42>
 80182ae:	4b7a      	ldr	r3, [pc, #488]	@ (8018498 <WriteBlockEnable+0x1fc>)
 80182b0:	f891 1058 	ldrb.w	r1, [r1, #88]	@ 0x58
 80182b4:	f884 1089 	strb.w	r1, [r4, #137]	@ 0x89
 80182b8:	f104 0288 	add.w	r2, r4, #136	@ 0x88
 80182bc:	2010      	movs	r0, #16
 80182be:	f884 0088 	strb.w	r0, [r4, #136]	@ 0x88
 80182c2:	4611      	mov	r1, r2
 80182c4:	e9cd 3400 	strd	r3, r4, [sp]
 80182c8:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 80182cc:	2302      	movs	r3, #2
 80182ce:	f009 fffd 	bl	80222cc <ADS_Transfer>
 80182d2:	1e03      	subs	r3, r0, #0
 80182d4:	f2c0 80a5 	blt.w	8018422 <WriteBlockEnable+0x186>
 80182d8:	4618      	mov	r0, r3
 80182da:	b005      	add	sp, #20
 80182dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80182de:	6f8e      	ldr	r6, [r1, #120]	@ 0x78
 80182e0:	6f88      	ldr	r0, [r1, #120]	@ 0x78
 80182e2:	4b6e      	ldr	r3, [pc, #440]	@ (801849c <WriteBlockEnable+0x200>)
 80182e4:	f006 7600 	and.w	r6, r6, #33554432	@ 0x2000000
 80182e8:	f000 0020 	and.w	r0, r0, #32
 80182ec:	4330      	orrs	r0, r6
 80182ee:	e9c1 3143 	strd	r3, r1, [r1, #268]	@ 0x10c
 80182f2:	f000 8091 	beq.w	8018418 <WriteBlockEnable+0x17c>
 80182f6:	f891 70fb 	ldrb.w	r7, [r1, #251]	@ 0xfb
 80182fa:	f8d1 311c 	ldr.w	r3, [r1, #284]	@ 0x11c
 80182fe:	f007 073f 	and.w	r7, r7, #63	@ 0x3f
 8018302:	2f09      	cmp	r7, #9
 8018304:	a903      	add	r1, sp, #12
 8018306:	a802      	add	r0, sp, #8
 8018308:	bf94      	ite	ls
 801830a:	8bdd      	ldrhls	r5, [r3, #30]
 801830c:	8c1d      	ldrhhi	r5, [r3, #32]
 801830e:	f7f5 fd27 	bl	800dd60 <Timer_GetCounterValue>
 8018312:	f8d4 2118 	ldr.w	r2, [r4, #280]	@ 0x118
 8018316:	f8dd c008 	ldr.w	ip, [sp, #8]
 801831a:	f8dd e00c 	ldr.w	lr, [sp, #12]
 801831e:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
 8018322:	18ab      	adds	r3, r5, r2
 8018324:	4d5e      	ldr	r5, [pc, #376]	@ (80184a0 <WriteBlockEnable+0x204>)
 8018326:	bf2c      	ite	cs
 8018328:	2101      	movcs	r1, #1
 801832a:	2100      	movcc	r1, #0
 801832c:	42ab      	cmp	r3, r5
 801832e:	d94f      	bls.n	80183d0 <WriteBlockEnable+0x134>
 8018330:	1c45      	adds	r5, r0, #1
 8018332:	42a8      	cmp	r0, r5
 8018334:	f5a3 2374 	sub.w	r3, r3, #999424	@ 0xf4000
 8018338:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 801833c:	bf2c      	ite	cs
 801833e:	2100      	movcs	r1, #0
 8018340:	2101      	movcc	r1, #1
 8018342:	2900      	cmp	r1, #0
 8018344:	d048      	beq.n	80183d8 <WriteBlockEnable+0x13c>
 8018346:	4560      	cmp	r0, ip
 8018348:	f000 808a 	beq.w	8018460 <WriteBlockEnable+0x1c4>
 801834c:	bf34      	ite	cc
 801834e:	2201      	movcc	r2, #1
 8018350:	2200      	movcs	r2, #0
 8018352:	b12a      	cbz	r2, 8018360 <WriteBlockEnable+0xc4>
 8018354:	4565      	cmp	r5, ip
 8018356:	d076      	beq.n	8018446 <WriteBlockEnable+0x1aa>
 8018358:	bf34      	ite	cc
 801835a:	2301      	movcc	r3, #1
 801835c:	2300      	movcs	r3, #0
 801835e:	b313      	cbz	r3, 80183a6 <WriteBlockEnable+0x10a>
 8018360:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	@ 0xfa
 8018364:	f894 10fa 	ldrb.w	r1, [r4, #250]	@ 0xfa
 8018368:	ba5b      	rev16	r3, r3
 801836a:	f3c3 1383 	ubfx	r3, r3, #6, #4
 801836e:	2e00      	cmp	r6, #0
 8018370:	d047      	beq.n	8018402 <WriteBlockEnable+0x166>
 8018372:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8018374:	f042 0220 	orr.w	r2, r2, #32
 8018378:	67a2      	str	r2, [r4, #120]	@ 0x78
 801837a:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801837c:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8018380:	2600      	movs	r6, #0
 8018382:	67a2      	str	r2, [r4, #120]	@ 0x78
 8018384:	f3c3 0297 	ubfx	r2, r3, #2, #24
 8018388:	f021 0103 	bic.w	r1, r1, #3
 801838c:	4311      	orrs	r1, r2
 801838e:	ea46 1383 	orr.w	r3, r6, r3, lsl #6
 8018392:	f884 10fa 	strb.w	r1, [r4, #250]	@ 0xfa
 8018396:	f884 30fb 	strb.w	r3, [r4, #251]	@ 0xfb
 801839a:	f504 718c 	add.w	r1, r4, #280	@ 0x118
 801839e:	f504 708a 	add.w	r0, r4, #276	@ 0x114
 80183a2:	f7f5 fcdd 	bl	800dd60 <Timer_GetCounterValue>
 80183a6:	4621      	mov	r1, r4
 80183a8:	230a      	movs	r3, #10
 80183aa:	f801 3ff8 	strb.w	r3, [r1, #248]!
 80183ae:	4b3d      	ldr	r3, [pc, #244]	@ (80184a4 <WriteBlockEnable+0x208>)
 80183b0:	2200      	movs	r2, #0
 80183b2:	e9cd 3400 	strd	r3, r4, [sp]
 80183b6:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 80183ba:	2305      	movs	r3, #5
 80183bc:	f009 ff86 	bl	80222cc <ADS_Transfer>
 80183c0:	1e03      	subs	r3, r0, #0
 80183c2:	da89      	bge.n	80182d8 <WriteBlockEnable+0x3c>
 80183c4:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 80183c8:	b005      	add	sp, #20
 80183ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80183ce:	4718      	bx	r3
 80183d0:	f081 0101 	eor.w	r1, r1, #1
 80183d4:	4605      	mov	r5, r0
 80183d6:	e7b4      	b.n	8018342 <WriteBlockEnable+0xa6>
 80183d8:	4560      	cmp	r0, ip
 80183da:	d03e      	beq.n	801845a <WriteBlockEnable+0x1be>
 80183dc:	d3e3      	bcc.n	80183a6 <WriteBlockEnable+0x10a>
 80183de:	4565      	cmp	r5, ip
 80183e0:	d038      	beq.n	8018454 <WriteBlockEnable+0x1b8>
 80183e2:	d3bd      	bcc.n	8018360 <WriteBlockEnable+0xc4>
 80183e4:	e7df      	b.n	80183a6 <WriteBlockEnable+0x10a>
 80183e6:	680b      	ldr	r3, [r1, #0]
 80183e8:	3371      	adds	r3, #113	@ 0x71
 80183ea:	bf1c      	itt	ne
 80183ec:	f06f 0371 	mvnne.w	r3, #113	@ 0x71
 80183f0:	600b      	strne	r3, [r1, #0]
 80183f2:	f8d1 3104 	ldr.w	r3, [r1, #260]	@ 0x104
 80183f6:	b113      	cbz	r3, 80183fe <WriteBlockEnable+0x162>
 80183f8:	f8d1 1108 	ldr.w	r1, [r1, #264]	@ 0x108
 80183fc:	e7e4      	b.n	80183c8 <WriteBlockEnable+0x12c>
 80183fe:	4603      	mov	r3, r0
 8018400:	e76a      	b.n	80182d8 <WriteBlockEnable+0x3c>
 8018402:	f8b4 204d 	ldrh.w	r2, [r4, #77]	@ 0x4d
 8018406:	ba52      	rev16	r2, r2
 8018408:	f3c2 1283 	ubfx	r2, r2, #6, #4
 801840c:	4293      	cmp	r3, r2
 801840e:	d02c      	beq.n	801846a <WriteBlockEnable+0x1ce>
 8018410:	2f00      	cmp	r7, #0
 8018412:	bf08      	it	eq
 8018414:	4613      	moveq	r3, r2
 8018416:	e7b5      	b.n	8018384 <WriteBlockEnable+0xe8>
 8018418:	b005      	add	sp, #20
 801841a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801841e:	f7ff bc19 	b.w	8017c54 <WriteRegisterConfiguration>
 8018422:	6822      	ldr	r2, [r4, #0]
 8018424:	3271      	adds	r2, #113	@ 0x71
 8018426:	bf1c      	itt	ne
 8018428:	f06f 0271 	mvnne.w	r2, #113	@ 0x71
 801842c:	6022      	strne	r2, [r4, #0]
 801842e:	f8d4 2104 	ldr.w	r2, [r4, #260]	@ 0x104
 8018432:	2a00      	cmp	r2, #0
 8018434:	f43f af50 	beq.w	80182d8 <WriteBlockEnable+0x3c>
 8018438:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 801843c:	4618      	mov	r0, r3
 801843e:	b005      	add	sp, #20
 8018440:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018444:	4710      	bx	r2
 8018446:	4573      	cmp	r3, lr
 8018448:	bf8c      	ite	hi
 801844a:	2300      	movhi	r3, #0
 801844c:	2301      	movls	r3, #1
 801844e:	2b00      	cmp	r3, #0
 8018450:	d0a9      	beq.n	80183a6 <WriteBlockEnable+0x10a>
 8018452:	e785      	b.n	8018360 <WriteBlockEnable+0xc4>
 8018454:	4573      	cmp	r3, lr
 8018456:	d983      	bls.n	8018360 <WriteBlockEnable+0xc4>
 8018458:	e7a5      	b.n	80183a6 <WriteBlockEnable+0x10a>
 801845a:	4572      	cmp	r2, lr
 801845c:	d9a3      	bls.n	80183a6 <WriteBlockEnable+0x10a>
 801845e:	e7be      	b.n	80183de <WriteBlockEnable+0x142>
 8018460:	4572      	cmp	r2, lr
 8018462:	bf8c      	ite	hi
 8018464:	2200      	movhi	r2, #0
 8018466:	2201      	movls	r2, #1
 8018468:	e773      	b.n	8018352 <WriteBlockEnable+0xb6>
 801846a:	f894 204e 	ldrb.w	r2, [r4, #78]	@ 0x4e
 801846e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8018472:	4297      	cmp	r7, r2
 8018474:	d00c      	beq.n	8018490 <WriteBlockEnable+0x1f4>
 8018476:	da05      	bge.n	8018484 <WriteBlockEnable+0x1e8>
 8018478:	1c7e      	adds	r6, r7, #1
 801847a:	42b2      	cmp	r2, r6
 801847c:	bfa8      	it	ge
 801847e:	4632      	movge	r2, r6
 8018480:	b256      	sxtb	r6, r2
 8018482:	e77f      	b.n	8018384 <WriteBlockEnable+0xe8>
 8018484:	b102      	cbz	r2, 8018488 <WriteBlockEnable+0x1ec>
 8018486:	1e7e      	subs	r6, r7, #1
 8018488:	42b2      	cmp	r2, r6
 801848a:	bfb8      	it	lt
 801848c:	4632      	movlt	r2, r6
 801848e:	e7f7      	b.n	8018480 <WriteBlockEnable+0x1e4>
 8018490:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 8018494:	4630      	mov	r0, r6
 8018496:	e797      	b.n	80183c8 <WriteBlockEnable+0x12c>
 8018498:	08017b65 	.word	0x08017b65
 801849c:	08017c55 	.word	0x08017c55
 80184a0:	000f423f 	.word	0x000f423f
 80184a4:	08017875 	.word	0x08017875

080184a8 <WriteClockConfiguration>:
 80184a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80184aa:	2800      	cmp	r0, #0
 80184ac:	b085      	sub	sp, #20
 80184ae:	460c      	mov	r4, r1
 80184b0:	f2c0 80da 	blt.w	8018668 <WriteClockConfiguration+0x1c0>
 80184b4:	6f88      	ldr	r0, [r1, #120]	@ 0x78
 80184b6:	f410 6080 	ands.w	r0, r0, #1024	@ 0x400
 80184ba:	d13a      	bne.n	8018532 <WriteClockConfiguration+0x8a>
 80184bc:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 80184be:	0509      	lsls	r1, r1, #20
 80184c0:	f04f 0609 	mov.w	r6, #9
 80184c4:	f04f 078d 	mov.w	r7, #141	@ 0x8d
 80184c8:	f04f 0304 	mov.w	r3, #4
 80184cc:	f04f 0288 	mov.w	r2, #136	@ 0x88
 80184d0:	f04f 0505 	mov.w	r5, #5
 80184d4:	d446      	bmi.n	8018564 <WriteClockConfiguration+0xbc>
 80184d6:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 80184d8:	04c9      	lsls	r1, r1, #19
 80184da:	d457      	bmi.n	801858c <WriteClockConfiguration+0xe4>
 80184dc:	2800      	cmp	r0, #0
 80184de:	f040 8139 	bne.w	8018754 <WriteClockConfiguration+0x2ac>
 80184e2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80184e4:	05db      	lsls	r3, r3, #23
 80184e6:	d56d      	bpl.n	80185c4 <WriteClockConfiguration+0x11c>
 80184e8:	4b9b      	ldr	r3, [pc, #620]	@ (8018758 <WriteClockConfiguration+0x2b0>)
 80184ea:	f894 1058 	ldrb.w	r1, [r4, #88]	@ 0x58
 80184ee:	f884 1089 	strb.w	r1, [r4, #137]	@ 0x89
 80184f2:	f104 0288 	add.w	r2, r4, #136	@ 0x88
 80184f6:	2010      	movs	r0, #16
 80184f8:	f884 0088 	strb.w	r0, [r4, #136]	@ 0x88
 80184fc:	4611      	mov	r1, r2
 80184fe:	e9cd 3400 	strd	r3, r4, [sp]
 8018502:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 8018506:	2302      	movs	r3, #2
 8018508:	f009 fee0 	bl	80222cc <ADS_Transfer>
 801850c:	1e03      	subs	r3, r0, #0
 801850e:	da54      	bge.n	80185ba <WriteClockConfiguration+0x112>
 8018510:	6822      	ldr	r2, [r4, #0]
 8018512:	3271      	adds	r2, #113	@ 0x71
 8018514:	bf1c      	itt	ne
 8018516:	f06f 0271 	mvnne.w	r2, #113	@ 0x71
 801851a:	6022      	strne	r2, [r4, #0]
 801851c:	f8d4 2104 	ldr.w	r2, [r4, #260]	@ 0x104
 8018520:	2a00      	cmp	r2, #0
 8018522:	d04a      	beq.n	80185ba <WriteClockConfiguration+0x112>
 8018524:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 8018528:	4618      	mov	r0, r3
 801852a:	b005      	add	sp, #20
 801852c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018530:	4710      	bx	r2
 8018532:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8018534:	6dc9      	ldr	r1, [r1, #92]	@ 0x5c
 8018536:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88
 801853a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801853e:	67a3      	str	r3, [r4, #120]	@ 0x78
 8018540:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8018542:	2214      	movs	r2, #20
 8018544:	0509      	lsls	r1, r1, #20
 8018546:	f884 2088 	strb.w	r2, [r4, #136]	@ 0x88
 801854a:	f04f 060d 	mov.w	r6, #13
 801854e:	f04f 0791 	mov.w	r7, #145	@ 0x91
 8018552:	f04f 0308 	mov.w	r3, #8
 8018556:	f04f 028c 	mov.w	r2, #140	@ 0x8c
 801855a:	f04f 0509 	mov.w	r5, #9
 801855e:	f04f 0004 	mov.w	r0, #4
 8018562:	d5b8      	bpl.n	80184d6 <WriteClockConfiguration+0x2e>
 8018564:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8018566:	50a3      	str	r3, [r4, r2]
 8018568:	4422      	add	r2, r4
 801856a:	f894 3064 	ldrb.w	r3, [r4, #100]	@ 0x64
 801856e:	7113      	strb	r3, [r2, #4]
 8018570:	4420      	add	r0, r4
 8018572:	2316      	movs	r3, #22
 8018574:	f880 3088 	strb.w	r3, [r0, #136]	@ 0x88
 8018578:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801857a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801857e:	67a3      	str	r3, [r4, #120]	@ 0x78
 8018580:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8018582:	04d8      	lsls	r0, r3, #19
 8018584:	d51c      	bpl.n	80185c0 <WriteClockConfiguration+0x118>
 8018586:	463a      	mov	r2, r7
 8018588:	4633      	mov	r3, r6
 801858a:	4628      	mov	r0, r5
 801858c:	f8d4 1065 	ldr.w	r1, [r4, #101]	@ 0x65
 8018590:	50a1      	str	r1, [r4, r2]
 8018592:	4420      	add	r0, r4
 8018594:	2218      	movs	r2, #24
 8018596:	f880 2088 	strb.w	r2, [r0, #136]	@ 0x88
 801859a:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801859c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80185a0:	67a2      	str	r2, [r4, #120]	@ 0x78
 80185a2:	496e      	ldr	r1, [pc, #440]	@ (801875c <WriteClockConfiguration+0x2b4>)
 80185a4:	f104 0288 	add.w	r2, r4, #136	@ 0x88
 80185a8:	e9cd 1400 	strd	r1, r4, [sp]
 80185ac:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 80185b0:	4611      	mov	r1, r2
 80185b2:	f009 fe8b 	bl	80222cc <ADS_Transfer>
 80185b6:	1e03      	subs	r3, r0, #0
 80185b8:	dbaa      	blt.n	8018510 <WriteClockConfiguration+0x68>
 80185ba:	4618      	mov	r0, r3
 80185bc:	b005      	add	sp, #20
 80185be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80185c0:	462b      	mov	r3, r5
 80185c2:	e7ee      	b.n	80185a2 <WriteClockConfiguration+0xfa>
 80185c4:	6fa6      	ldr	r6, [r4, #120]	@ 0x78
 80185c6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80185c8:	4a65      	ldr	r2, [pc, #404]	@ (8018760 <WriteClockConfiguration+0x2b8>)
 80185ca:	f006 7600 	and.w	r6, r6, #33554432	@ 0x2000000
 80185ce:	f003 0320 	and.w	r3, r3, #32
 80185d2:	4333      	orrs	r3, r6
 80185d4:	e9c4 2443 	strd	r2, r4, [r4, #268]	@ 0x10c
 80185d8:	d057      	beq.n	801868a <WriteClockConfiguration+0x1e2>
 80185da:	f894 70fb 	ldrb.w	r7, [r4, #251]	@ 0xfb
 80185de:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
 80185e2:	f007 073f 	and.w	r7, r7, #63	@ 0x3f
 80185e6:	2f09      	cmp	r7, #9
 80185e8:	a903      	add	r1, sp, #12
 80185ea:	a802      	add	r0, sp, #8
 80185ec:	bf94      	ite	ls
 80185ee:	8bdd      	ldrhls	r5, [r3, #30]
 80185f0:	8c1d      	ldrhhi	r5, [r3, #32]
 80185f2:	f7f5 fbb5 	bl	800dd60 <Timer_GetCounterValue>
 80185f6:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
 80185fa:	f8dd c008 	ldr.w	ip, [sp, #8]
 80185fe:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8018602:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
 8018606:	18e9      	adds	r1, r5, r3
 8018608:	4d56      	ldr	r5, [pc, #344]	@ (8018764 <WriteClockConfiguration+0x2bc>)
 801860a:	bf2c      	ite	cs
 801860c:	2201      	movcs	r2, #1
 801860e:	2200      	movcc	r2, #0
 8018610:	42a9      	cmp	r1, r5
 8018612:	d940      	bls.n	8018696 <WriteClockConfiguration+0x1ee>
 8018614:	1c45      	adds	r5, r0, #1
 8018616:	42a8      	cmp	r0, r5
 8018618:	f5a1 2174 	sub.w	r1, r1, #999424	@ 0xf4000
 801861c:	f5a1 7110 	sub.w	r1, r1, #576	@ 0x240
 8018620:	bf2c      	ite	cs
 8018622:	2200      	movcs	r2, #0
 8018624:	2201      	movcc	r2, #1
 8018626:	2a00      	cmp	r2, #0
 8018628:	d039      	beq.n	801869e <WriteClockConfiguration+0x1f6>
 801862a:	4584      	cmp	ip, r0
 801862c:	d06b      	beq.n	8018706 <WriteClockConfiguration+0x25e>
 801862e:	bf8c      	ite	hi
 8018630:	2301      	movhi	r3, #1
 8018632:	2300      	movls	r3, #0
 8018634:	2b00      	cmp	r3, #0
 8018636:	d038      	beq.n	80186aa <WriteClockConfiguration+0x202>
 8018638:	45ac      	cmp	ip, r5
 801863a:	d07c      	beq.n	8018736 <WriteClockConfiguration+0x28e>
 801863c:	bf8c      	ite	hi
 801863e:	2101      	movhi	r1, #1
 8018640:	2100      	movls	r1, #0
 8018642:	bb91      	cbnz	r1, 80186aa <WriteClockConfiguration+0x202>
 8018644:	4621      	mov	r1, r4
 8018646:	230a      	movs	r3, #10
 8018648:	f801 3ff8 	strb.w	r3, [r1, #248]!
 801864c:	4b46      	ldr	r3, [pc, #280]	@ (8018768 <WriteClockConfiguration+0x2c0>)
 801864e:	2200      	movs	r2, #0
 8018650:	e9cd 3400 	strd	r3, r4, [sp]
 8018654:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 8018658:	2305      	movs	r3, #5
 801865a:	f009 fe37 	bl	80222cc <ADS_Transfer>
 801865e:	1e03      	subs	r3, r0, #0
 8018660:	daab      	bge.n	80185ba <WriteClockConfiguration+0x112>
 8018662:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 8018666:	e00a      	b.n	801867e <WriteClockConfiguration+0x1d6>
 8018668:	680b      	ldr	r3, [r1, #0]
 801866a:	3371      	adds	r3, #113	@ 0x71
 801866c:	bf1c      	itt	ne
 801866e:	f06f 0371 	mvnne.w	r3, #113	@ 0x71
 8018672:	600b      	strne	r3, [r1, #0]
 8018674:	f8d1 3104 	ldr.w	r3, [r1, #260]	@ 0x104
 8018678:	b12b      	cbz	r3, 8018686 <WriteClockConfiguration+0x1de>
 801867a:	f8d1 1108 	ldr.w	r1, [r1, #264]	@ 0x108
 801867e:	b005      	add	sp, #20
 8018680:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018684:	4718      	bx	r3
 8018686:	4603      	mov	r3, r0
 8018688:	e797      	b.n	80185ba <WriteClockConfiguration+0x112>
 801868a:	4621      	mov	r1, r4
 801868c:	b005      	add	sp, #20
 801868e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018692:	f7ff badf 	b.w	8017c54 <WriteRegisterConfiguration>
 8018696:	f082 0201 	eor.w	r2, r2, #1
 801869a:	4605      	mov	r5, r0
 801869c:	e7c3      	b.n	8018626 <WriteClockConfiguration+0x17e>
 801869e:	4584      	cmp	ip, r0
 80186a0:	d036      	beq.n	8018710 <WriteClockConfiguration+0x268>
 80186a2:	d8cf      	bhi.n	8018644 <WriteClockConfiguration+0x19c>
 80186a4:	45ac      	cmp	ip, r5
 80186a6:	d043      	beq.n	8018730 <WriteClockConfiguration+0x288>
 80186a8:	d9cc      	bls.n	8018644 <WriteClockConfiguration+0x19c>
 80186aa:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	@ 0xfa
 80186ae:	f894 10fa 	ldrb.w	r1, [r4, #250]	@ 0xfa
 80186b2:	ba5b      	rev16	r3, r3
 80186b4:	f3c3 1383 	ubfx	r3, r3, #6, #4
 80186b8:	b1d6      	cbz	r6, 80186f0 <WriteClockConfiguration+0x248>
 80186ba:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80186bc:	f042 0220 	orr.w	r2, r2, #32
 80186c0:	67a2      	str	r2, [r4, #120]	@ 0x78
 80186c2:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80186c4:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80186c8:	2600      	movs	r6, #0
 80186ca:	67a2      	str	r2, [r4, #120]	@ 0x78
 80186cc:	f3c3 0297 	ubfx	r2, r3, #2, #24
 80186d0:	f021 0103 	bic.w	r1, r1, #3
 80186d4:	4311      	orrs	r1, r2
 80186d6:	ea46 1383 	orr.w	r3, r6, r3, lsl #6
 80186da:	f884 10fa 	strb.w	r1, [r4, #250]	@ 0xfa
 80186de:	f884 30fb 	strb.w	r3, [r4, #251]	@ 0xfb
 80186e2:	f504 718c 	add.w	r1, r4, #280	@ 0x118
 80186e6:	f504 708a 	add.w	r0, r4, #276	@ 0x114
 80186ea:	f7f5 fb39 	bl	800dd60 <Timer_GetCounterValue>
 80186ee:	e7a9      	b.n	8018644 <WriteClockConfiguration+0x19c>
 80186f0:	f8b4 204d 	ldrh.w	r2, [r4, #77]	@ 0x4d
 80186f4:	ba52      	rev16	r2, r2
 80186f6:	f3c2 1283 	ubfx	r2, r2, #6, #4
 80186fa:	4293      	cmp	r3, r2
 80186fc:	d00b      	beq.n	8018716 <WriteClockConfiguration+0x26e>
 80186fe:	2f00      	cmp	r7, #0
 8018700:	bf08      	it	eq
 8018702:	4613      	moveq	r3, r2
 8018704:	e7e2      	b.n	80186cc <WriteClockConfiguration+0x224>
 8018706:	459e      	cmp	lr, r3
 8018708:	bf34      	ite	cc
 801870a:	2300      	movcc	r3, #0
 801870c:	2301      	movcs	r3, #1
 801870e:	e791      	b.n	8018634 <WriteClockConfiguration+0x18c>
 8018710:	459e      	cmp	lr, r3
 8018712:	d297      	bcs.n	8018644 <WriteClockConfiguration+0x19c>
 8018714:	e7c6      	b.n	80186a4 <WriteClockConfiguration+0x1fc>
 8018716:	f894 204e 	ldrb.w	r2, [r4, #78]	@ 0x4e
 801871a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801871e:	4297      	cmp	r7, r2
 8018720:	d014      	beq.n	801874c <WriteClockConfiguration+0x2a4>
 8018722:	da0d      	bge.n	8018740 <WriteClockConfiguration+0x298>
 8018724:	1c7e      	adds	r6, r7, #1
 8018726:	42b2      	cmp	r2, r6
 8018728:	bfa8      	it	ge
 801872a:	4632      	movge	r2, r6
 801872c:	b256      	sxtb	r6, r2
 801872e:	e7cd      	b.n	80186cc <WriteClockConfiguration+0x224>
 8018730:	4571      	cmp	r1, lr
 8018732:	d9ba      	bls.n	80186aa <WriteClockConfiguration+0x202>
 8018734:	e786      	b.n	8018644 <WriteClockConfiguration+0x19c>
 8018736:	4571      	cmp	r1, lr
 8018738:	bf8c      	ite	hi
 801873a:	2100      	movhi	r1, #0
 801873c:	2101      	movls	r1, #1
 801873e:	e780      	b.n	8018642 <WriteClockConfiguration+0x19a>
 8018740:	b102      	cbz	r2, 8018744 <WriteClockConfiguration+0x29c>
 8018742:	1e7e      	subs	r6, r7, #1
 8018744:	42b2      	cmp	r2, r6
 8018746:	bfb8      	it	lt
 8018748:	4632      	movlt	r2, r6
 801874a:	e7ef      	b.n	801872c <WriteClockConfiguration+0x284>
 801874c:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 8018750:	4630      	mov	r0, r6
 8018752:	e794      	b.n	801867e <WriteClockConfiguration+0x1d6>
 8018754:	4603      	mov	r3, r0
 8018756:	e724      	b.n	80185a2 <WriteClockConfiguration+0xfa>
 8018758:	08017b65 	.word	0x08017b65
 801875c:	0801829d 	.word	0x0801829d
 8018760:	08017c55 	.word	0x08017c55
 8018764:	000f423f 	.word	0x000f423f
 8018768:	08017875 	.word	0x08017875

0801876c <DisableClock.constprop.0>:
 801876c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801876e:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8018770:	4604      	mov	r4, r0
 8018772:	0558      	lsls	r0, r3, #21
 8018774:	b085      	sub	sp, #20
 8018776:	d402      	bmi.n	801877e <DisableClock.constprop.0+0x12>
 8018778:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801877a:	0519      	lsls	r1, r3, #20
 801877c:	d520      	bpl.n	80187c0 <DisableClock.constprop.0+0x54>
 801877e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8018780:	f894 2058 	ldrb.w	r2, [r4, #88]	@ 0x58
 8018784:	4980      	ldr	r1, [pc, #512]	@ (8018988 <DisableClock.constprop.0+0x21c>)
 8018786:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801878a:	67a3      	str	r3, [r4, #120]	@ 0x78
 801878c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801878e:	f022 0201 	bic.w	r2, r2, #1
 8018792:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8018796:	2010      	movs	r0, #16
 8018798:	f884 0088 	strb.w	r0, [r4, #136]	@ 0x88
 801879c:	f884 2089 	strb.w	r2, [r4, #137]	@ 0x89
 80187a0:	67a3      	str	r3, [r4, #120]	@ 0x78
 80187a2:	2200      	movs	r2, #0
 80187a4:	e9cd 1400 	strd	r1, r4, [sp]
 80187a8:	2302      	movs	r3, #2
 80187aa:	f104 0188 	add.w	r1, r4, #136	@ 0x88
 80187ae:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 80187b2:	f009 fd8b 	bl	80222cc <ADS_Transfer>
 80187b6:	1e03      	subs	r3, r0, #0
 80187b8:	db1c      	blt.n	80187f4 <DisableClock.constprop.0+0x88>
 80187ba:	4618      	mov	r0, r3
 80187bc:	b005      	add	sp, #20
 80187be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80187c0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80187c2:	04da      	lsls	r2, r3, #19
 80187c4:	d4db      	bmi.n	801877e <DisableClock.constprop.0+0x12>
 80187c6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80187c8:	05db      	lsls	r3, r3, #23
 80187ca:	d524      	bpl.n	8018816 <DisableClock.constprop.0+0xaa>
 80187cc:	4b6f      	ldr	r3, [pc, #444]	@ (801898c <DisableClock.constprop.0+0x220>)
 80187ce:	f894 1058 	ldrb.w	r1, [r4, #88]	@ 0x58
 80187d2:	f884 1089 	strb.w	r1, [r4, #137]	@ 0x89
 80187d6:	f104 0288 	add.w	r2, r4, #136	@ 0x88
 80187da:	2010      	movs	r0, #16
 80187dc:	f884 0088 	strb.w	r0, [r4, #136]	@ 0x88
 80187e0:	4611      	mov	r1, r2
 80187e2:	e9cd 3400 	strd	r3, r4, [sp]
 80187e6:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 80187ea:	2302      	movs	r3, #2
 80187ec:	f009 fd6e 	bl	80222cc <ADS_Transfer>
 80187f0:	1e03      	subs	r3, r0, #0
 80187f2:	dae2      	bge.n	80187ba <DisableClock.constprop.0+0x4e>
 80187f4:	6822      	ldr	r2, [r4, #0]
 80187f6:	3271      	adds	r2, #113	@ 0x71
 80187f8:	bf1c      	itt	ne
 80187fa:	f06f 0271 	mvnne.w	r2, #113	@ 0x71
 80187fe:	6022      	strne	r2, [r4, #0]
 8018800:	f8d4 2104 	ldr.w	r2, [r4, #260]	@ 0x104
 8018804:	2a00      	cmp	r2, #0
 8018806:	d0d8      	beq.n	80187ba <DisableClock.constprop.0+0x4e>
 8018808:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 801880c:	4618      	mov	r0, r3
 801880e:	b005      	add	sp, #20
 8018810:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018814:	4710      	bx	r2
 8018816:	6fa6      	ldr	r6, [r4, #120]	@ 0x78
 8018818:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 801881a:	4b5d      	ldr	r3, [pc, #372]	@ (8018990 <DisableClock.constprop.0+0x224>)
 801881c:	f006 7600 	and.w	r6, r6, #33554432	@ 0x2000000
 8018820:	f000 0020 	and.w	r0, r0, #32
 8018824:	4330      	orrs	r0, r6
 8018826:	e9c4 3443 	strd	r3, r4, [r4, #268]	@ 0x10c
 801882a:	d105      	bne.n	8018838 <DisableClock.constprop.0+0xcc>
 801882c:	4621      	mov	r1, r4
 801882e:	b005      	add	sp, #20
 8018830:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018834:	f7ff ba0e 	b.w	8017c54 <WriteRegisterConfiguration>
 8018838:	f894 70fb 	ldrb.w	r7, [r4, #251]	@ 0xfb
 801883c:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
 8018840:	f007 073f 	and.w	r7, r7, #63	@ 0x3f
 8018844:	2f09      	cmp	r7, #9
 8018846:	a903      	add	r1, sp, #12
 8018848:	a802      	add	r0, sp, #8
 801884a:	bf94      	ite	ls
 801884c:	8bdd      	ldrhls	r5, [r3, #30]
 801884e:	8c1d      	ldrhhi	r5, [r3, #32]
 8018850:	f7f5 fa86 	bl	800dd60 <Timer_GetCounterValue>
 8018854:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
 8018858:	f8dd c008 	ldr.w	ip, [sp, #8]
 801885c:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8018860:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
 8018864:	18e9      	adds	r1, r5, r3
 8018866:	4d4b      	ldr	r5, [pc, #300]	@ (8018994 <DisableClock.constprop.0+0x228>)
 8018868:	bf2c      	ite	cs
 801886a:	2201      	movcs	r2, #1
 801886c:	2200      	movcc	r2, #0
 801886e:	42a9      	cmp	r1, r5
 8018870:	d84d      	bhi.n	801890e <DisableClock.constprop.0+0x1a2>
 8018872:	f082 0201 	eor.w	r2, r2, #1
 8018876:	4605      	mov	r5, r0
 8018878:	b302      	cbz	r2, 80188bc <DisableClock.constprop.0+0x150>
 801887a:	4560      	cmp	r0, ip
 801887c:	d05f      	beq.n	801893e <DisableClock.constprop.0+0x1d2>
 801887e:	bf34      	ite	cc
 8018880:	2301      	movcc	r3, #1
 8018882:	2300      	movcs	r3, #0
 8018884:	b303      	cbz	r3, 80188c8 <DisableClock.constprop.0+0x15c>
 8018886:	4565      	cmp	r5, ip
 8018888:	d06b      	beq.n	8018962 <DisableClock.constprop.0+0x1f6>
 801888a:	bf34      	ite	cc
 801888c:	2101      	movcc	r1, #1
 801888e:	2100      	movcs	r1, #0
 8018890:	b9d1      	cbnz	r1, 80188c8 <DisableClock.constprop.0+0x15c>
 8018892:	4621      	mov	r1, r4
 8018894:	230a      	movs	r3, #10
 8018896:	f801 3ff8 	strb.w	r3, [r1, #248]!
 801889a:	4b3f      	ldr	r3, [pc, #252]	@ (8018998 <DisableClock.constprop.0+0x22c>)
 801889c:	2200      	movs	r2, #0
 801889e:	e9cd 3400 	strd	r3, r4, [sp]
 80188a2:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 80188a6:	2305      	movs	r3, #5
 80188a8:	f009 fd10 	bl	80222cc <ADS_Transfer>
 80188ac:	1e03      	subs	r3, r0, #0
 80188ae:	da84      	bge.n	80187ba <DisableClock.constprop.0+0x4e>
 80188b0:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 80188b4:	b005      	add	sp, #20
 80188b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80188ba:	4718      	bx	r3
 80188bc:	4560      	cmp	r0, ip
 80188be:	d03b      	beq.n	8018938 <DisableClock.constprop.0+0x1cc>
 80188c0:	d3e7      	bcc.n	8018892 <DisableClock.constprop.0+0x126>
 80188c2:	4565      	cmp	r5, ip
 80188c4:	d052      	beq.n	801896c <DisableClock.constprop.0+0x200>
 80188c6:	d2e4      	bcs.n	8018892 <DisableClock.constprop.0+0x126>
 80188c8:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	@ 0xfa
 80188cc:	f894 10fa 	ldrb.w	r1, [r4, #250]	@ 0xfa
 80188d0:	ba5b      	rev16	r3, r3
 80188d2:	f3c3 1383 	ubfx	r3, r3, #6, #4
 80188d6:	b326      	cbz	r6, 8018922 <DisableClock.constprop.0+0x1b6>
 80188d8:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80188da:	f042 0220 	orr.w	r2, r2, #32
 80188de:	67a2      	str	r2, [r4, #120]	@ 0x78
 80188e0:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80188e2:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80188e6:	2600      	movs	r6, #0
 80188e8:	67a2      	str	r2, [r4, #120]	@ 0x78
 80188ea:	f3c3 0297 	ubfx	r2, r3, #2, #24
 80188ee:	f021 0103 	bic.w	r1, r1, #3
 80188f2:	430a      	orrs	r2, r1
 80188f4:	ea46 1383 	orr.w	r3, r6, r3, lsl #6
 80188f8:	f884 20fa 	strb.w	r2, [r4, #250]	@ 0xfa
 80188fc:	f884 30fb 	strb.w	r3, [r4, #251]	@ 0xfb
 8018900:	f504 718c 	add.w	r1, r4, #280	@ 0x118
 8018904:	f504 708a 	add.w	r0, r4, #276	@ 0x114
 8018908:	f7f5 fa2a 	bl	800dd60 <Timer_GetCounterValue>
 801890c:	e7c1      	b.n	8018892 <DisableClock.constprop.0+0x126>
 801890e:	1c45      	adds	r5, r0, #1
 8018910:	42a8      	cmp	r0, r5
 8018912:	f5a1 2174 	sub.w	r1, r1, #999424	@ 0xf4000
 8018916:	f5a1 7110 	sub.w	r1, r1, #576	@ 0x240
 801891a:	bf2c      	ite	cs
 801891c:	2200      	movcs	r2, #0
 801891e:	2201      	movcc	r2, #1
 8018920:	e7aa      	b.n	8018878 <DisableClock.constprop.0+0x10c>
 8018922:	f8b4 204d 	ldrh.w	r2, [r4, #77]	@ 0x4d
 8018926:	ba52      	rev16	r2, r2
 8018928:	f3c2 1283 	ubfx	r2, r2, #6, #4
 801892c:	4293      	cmp	r3, r2
 801892e:	d00b      	beq.n	8018948 <DisableClock.constprop.0+0x1dc>
 8018930:	2f00      	cmp	r7, #0
 8018932:	bf08      	it	eq
 8018934:	4613      	moveq	r3, r2
 8018936:	e7d8      	b.n	80188ea <DisableClock.constprop.0+0x17e>
 8018938:	4573      	cmp	r3, lr
 801893a:	d9aa      	bls.n	8018892 <DisableClock.constprop.0+0x126>
 801893c:	e7c1      	b.n	80188c2 <DisableClock.constprop.0+0x156>
 801893e:	4573      	cmp	r3, lr
 8018940:	bf8c      	ite	hi
 8018942:	2300      	movhi	r3, #0
 8018944:	2301      	movls	r3, #1
 8018946:	e79d      	b.n	8018884 <DisableClock.constprop.0+0x118>
 8018948:	f894 204e 	ldrb.w	r2, [r4, #78]	@ 0x4e
 801894c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8018950:	4297      	cmp	r7, r2
 8018952:	d014      	beq.n	801897e <DisableClock.constprop.0+0x212>
 8018954:	da0d      	bge.n	8018972 <DisableClock.constprop.0+0x206>
 8018956:	1c7e      	adds	r6, r7, #1
 8018958:	4296      	cmp	r6, r2
 801895a:	bfa8      	it	ge
 801895c:	4616      	movge	r6, r2
 801895e:	b276      	sxtb	r6, r6
 8018960:	e7c3      	b.n	80188ea <DisableClock.constprop.0+0x17e>
 8018962:	4571      	cmp	r1, lr
 8018964:	bf8c      	ite	hi
 8018966:	2100      	movhi	r1, #0
 8018968:	2101      	movls	r1, #1
 801896a:	e791      	b.n	8018890 <DisableClock.constprop.0+0x124>
 801896c:	4571      	cmp	r1, lr
 801896e:	d9ab      	bls.n	80188c8 <DisableClock.constprop.0+0x15c>
 8018970:	e78f      	b.n	8018892 <DisableClock.constprop.0+0x126>
 8018972:	b102      	cbz	r2, 8018976 <DisableClock.constprop.0+0x20a>
 8018974:	1e7e      	subs	r6, r7, #1
 8018976:	4296      	cmp	r6, r2
 8018978:	bfb8      	it	lt
 801897a:	4616      	movlt	r6, r2
 801897c:	e7ef      	b.n	801895e <DisableClock.constprop.0+0x1f2>
 801897e:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 8018982:	4630      	mov	r0, r6
 8018984:	e796      	b.n	80188b4 <DisableClock.constprop.0+0x148>
 8018986:	bf00      	nop
 8018988:	08017b05 	.word	0x08017b05
 801898c:	08017b65 	.word	0x08017b65
 8018990:	08017c55 	.word	0x08017c55
 8018994:	000f423f 	.word	0x000f423f
 8018998:	08017875 	.word	0x08017875

0801899c <PollPllLocked>:
 801899c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801899e:	4604      	mov	r4, r0
 80189a0:	b085      	sub	sp, #20
 80189a2:	a903      	add	r1, sp, #12
 80189a4:	a802      	add	r0, sp, #8
 80189a6:	f7f5 f9db 	bl	800dd60 <Timer_GetCounterValue>
 80189aa:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 80189ae:	4fae      	ldr	r7, [pc, #696]	@ (8018c68 <PollPllLocked+0x2cc>)
 80189b0:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 80189b4:	f242 7310 	movw	r3, #10000	@ 0x2710
 80189b8:	18d3      	adds	r3, r2, r3
 80189ba:	bf2c      	ite	cs
 80189bc:	2501      	movcs	r5, #1
 80189be:	2500      	movcc	r5, #0
 80189c0:	42bb      	cmp	r3, r7
 80189c2:	e9dd 6102 	ldrd	r6, r1, [sp, #8]
 80189c6:	d831      	bhi.n	8018a2c <PollPllLocked+0x90>
 80189c8:	f085 0501 	eor.w	r5, r5, #1
 80189cc:	4684      	mov	ip, r0
 80189ce:	2d00      	cmp	r5, #0
 80189d0:	d053      	beq.n	8018a7a <PollPllLocked+0xde>
 80189d2:	42b0      	cmp	r0, r6
 80189d4:	d035      	beq.n	8018a42 <PollPllLocked+0xa6>
 80189d6:	d236      	bcs.n	8018a46 <PollPllLocked+0xaa>
 80189d8:	4566      	cmp	r6, ip
 80189da:	d058      	beq.n	8018a8e <PollPllLocked+0xf2>
 80189dc:	bf8c      	ite	hi
 80189de:	2301      	movhi	r3, #1
 80189e0:	2300      	movls	r3, #0
 80189e2:	f083 0301 	eor.w	r3, r3, #1
 80189e6:	b373      	cbz	r3, 8018a46 <PollPllLocked+0xaa>
 80189e8:	f894 105b 	ldrb.w	r1, [r4, #91]	@ 0x5b
 80189ec:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80189ee:	f8b4 0059 	ldrh.w	r0, [r4, #89]	@ 0x59
 80189f2:	f8a4 0088 	strh.w	r0, [r4, #136]	@ 0x88
 80189f6:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 80189fa:	f884 108a 	strb.w	r1, [r4, #138]	@ 0x8a
 80189fe:	499b      	ldr	r1, [pc, #620]	@ (8018c6c <PollPllLocked+0x2d0>)
 8018a00:	f104 0288 	add.w	r2, r4, #136	@ 0x88
 8018a04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8018a08:	2012      	movs	r0, #18
 8018a0a:	f884 0088 	strb.w	r0, [r4, #136]	@ 0x88
 8018a0e:	67a3      	str	r3, [r4, #120]	@ 0x78
 8018a10:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 8018a14:	e9cd 1400 	strd	r1, r4, [sp]
 8018a18:	2303      	movs	r3, #3
 8018a1a:	4611      	mov	r1, r2
 8018a1c:	f009 fc56 	bl	80222cc <ADS_Transfer>
 8018a20:	1e03      	subs	r3, r0, #0
 8018a22:	f2c0 80fb 	blt.w	8018c1c <PollPllLocked+0x280>
 8018a26:	4618      	mov	r0, r3
 8018a28:	b005      	add	sp, #20
 8018a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a2c:	f100 0c01 	add.w	ip, r0, #1
 8018a30:	4560      	cmp	r0, ip
 8018a32:	f5a2 2371 	sub.w	r3, r2, #987136	@ 0xf1000
 8018a36:	f5a3 6333 	sub.w	r3, r3, #2864	@ 0xb30
 8018a3a:	bf2c      	ite	cs
 8018a3c:	2500      	movcs	r5, #0
 8018a3e:	2501      	movcc	r5, #1
 8018a40:	e7c5      	b.n	80189ce <PollPllLocked+0x32>
 8018a42:	428a      	cmp	r2, r1
 8018a44:	d9c8      	bls.n	80189d8 <PollPllLocked+0x3c>
 8018a46:	f894 3064 	ldrb.w	r3, [r4, #100]	@ 0x64
 8018a4a:	f894 10fd 	ldrb.w	r1, [r4, #253]	@ 0xfd
 8018a4e:	1c5a      	adds	r2, r3, #1
 8018a50:	f002 0203 	and.w	r2, r2, #3
 8018a54:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8018a58:	4291      	cmp	r1, r2
 8018a5a:	d01d      	beq.n	8018a98 <PollPllLocked+0xfc>
 8018a5c:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8018a5e:	f023 0303 	bic.w	r3, r3, #3
 8018a62:	4313      	orrs	r3, r2
 8018a64:	f441 6100 	orr.w	r1, r1, #2048	@ 0x800
 8018a68:	4620      	mov	r0, r4
 8018a6a:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 8018a6e:	67a1      	str	r1, [r4, #120]	@ 0x78
 8018a70:	b005      	add	sp, #20
 8018a72:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018a76:	f7ff be79 	b.w	801876c <DisableClock.constprop.0>
 8018a7a:	42b0      	cmp	r0, r6
 8018a7c:	f000 809e 	beq.w	8018bbc <PollPllLocked+0x220>
 8018a80:	bf34      	ite	cc
 8018a82:	2201      	movcc	r2, #1
 8018a84:	2200      	movcs	r2, #0
 8018a86:	2a00      	cmp	r2, #0
 8018a88:	d1ae      	bne.n	80189e8 <PollPllLocked+0x4c>
 8018a8a:	4566      	cmp	r6, ip
 8018a8c:	d1a6      	bne.n	80189dc <PollPllLocked+0x40>
 8018a8e:	4299      	cmp	r1, r3
 8018a90:	bf34      	ite	cc
 8018a92:	2300      	movcc	r3, #0
 8018a94:	2301      	movcs	r3, #1
 8018a96:	e7a4      	b.n	80189e2 <PollPllLocked+0x46>
 8018a98:	4875      	ldr	r0, [pc, #468]	@ (8018c70 <PollPllLocked+0x2d4>)
 8018a9a:	f242 7110 	movw	r1, #10000	@ 0x2710
 8018a9e:	f7f5 fa37 	bl	800df10 <print>
 8018aa2:	6fa5      	ldr	r5, [r4, #120]	@ 0x78
 8018aa4:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8018aa6:	4b73      	ldr	r3, [pc, #460]	@ (8018c74 <PollPllLocked+0x2d8>)
 8018aa8:	f8c4 310c 	str.w	r3, [r4, #268]	@ 0x10c
 8018aac:	f005 7500 	and.w	r5, r5, #33554432	@ 0x2000000
 8018ab0:	f000 0020 	and.w	r0, r0, #32
 8018ab4:	4328      	orrs	r0, r5
 8018ab6:	f8c4 4110 	str.w	r4, [r4, #272]	@ 0x110
 8018aba:	f000 8092 	beq.w	8018be2 <PollPllLocked+0x246>
 8018abe:	f894 60fb 	ldrb.w	r6, [r4, #251]	@ 0xfb
 8018ac2:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
 8018ac6:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 8018aca:	2e09      	cmp	r6, #9
 8018acc:	a903      	add	r1, sp, #12
 8018ace:	a802      	add	r0, sp, #8
 8018ad0:	bf94      	ite	ls
 8018ad2:	8bdf      	ldrhls	r7, [r3, #30]
 8018ad4:	8c1f      	ldrhhi	r7, [r3, #32]
 8018ad6:	f7f5 f943 	bl	800dd60 <Timer_GetCounterValue>
 8018ada:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
 8018ade:	f8dd c008 	ldr.w	ip, [sp, #8]
 8018ae2:	9a03      	ldr	r2, [sp, #12]
 8018ae4:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
 8018ae8:	18f9      	adds	r1, r7, r3
 8018aea:	4f5f      	ldr	r7, [pc, #380]	@ (8018c68 <PollPllLocked+0x2cc>)
 8018aec:	bf2c      	ite	cs
 8018aee:	f04f 0e01 	movcs.w	lr, #1
 8018af2:	f04f 0e00 	movcc.w	lr, #0
 8018af6:	42b9      	cmp	r1, r7
 8018af8:	d84b      	bhi.n	8018b92 <PollPllLocked+0x1f6>
 8018afa:	4607      	mov	r7, r0
 8018afc:	f1be 0f00 	cmp.w	lr, #0
 8018b00:	d14f      	bne.n	8018ba2 <PollPllLocked+0x206>
 8018b02:	4560      	cmp	r0, ip
 8018b04:	f000 80a1 	beq.w	8018c4a <PollPllLocked+0x2ae>
 8018b08:	bf34      	ite	cc
 8018b0a:	2301      	movcc	r3, #1
 8018b0c:	2300      	movcs	r3, #0
 8018b0e:	b13b      	cbz	r3, 8018b20 <PollPllLocked+0x184>
 8018b10:	4567      	cmp	r7, ip
 8018b12:	d079      	beq.n	8018c08 <PollPllLocked+0x26c>
 8018b14:	bf34      	ite	cc
 8018b16:	2301      	movcc	r3, #1
 8018b18:	2300      	movcs	r3, #0
 8018b1a:	f083 0301 	eor.w	r3, r3, #1
 8018b1e:	bb13      	cbnz	r3, 8018b66 <PollPllLocked+0x1ca>
 8018b20:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	@ 0xfa
 8018b24:	f894 10fa 	ldrb.w	r1, [r4, #250]	@ 0xfa
 8018b28:	ba5b      	rev16	r3, r3
 8018b2a:	f3c3 1383 	ubfx	r3, r3, #6, #4
 8018b2e:	2d00      	cmp	r5, #0
 8018b30:	d04c      	beq.n	8018bcc <PollPllLocked+0x230>
 8018b32:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8018b34:	f042 0220 	orr.w	r2, r2, #32
 8018b38:	67a2      	str	r2, [r4, #120]	@ 0x78
 8018b3a:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8018b3c:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8018b40:	2500      	movs	r5, #0
 8018b42:	67a2      	str	r2, [r4, #120]	@ 0x78
 8018b44:	f3c3 0297 	ubfx	r2, r3, #2, #24
 8018b48:	f021 0103 	bic.w	r1, r1, #3
 8018b4c:	4311      	orrs	r1, r2
 8018b4e:	ea45 1383 	orr.w	r3, r5, r3, lsl #6
 8018b52:	f884 10fa 	strb.w	r1, [r4, #250]	@ 0xfa
 8018b56:	f884 30fb 	strb.w	r3, [r4, #251]	@ 0xfb
 8018b5a:	f504 718c 	add.w	r1, r4, #280	@ 0x118
 8018b5e:	f504 708a 	add.w	r0, r4, #276	@ 0x114
 8018b62:	f7f5 f8fd 	bl	800dd60 <Timer_GetCounterValue>
 8018b66:	4621      	mov	r1, r4
 8018b68:	230a      	movs	r3, #10
 8018b6a:	f801 3ff8 	strb.w	r3, [r1, #248]!
 8018b6e:	4b42      	ldr	r3, [pc, #264]	@ (8018c78 <PollPllLocked+0x2dc>)
 8018b70:	2200      	movs	r2, #0
 8018b72:	e9cd 3400 	strd	r3, r4, [sp]
 8018b76:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 8018b7a:	2305      	movs	r3, #5
 8018b7c:	f009 fba6 	bl	80222cc <ADS_Transfer>
 8018b80:	1e03      	subs	r3, r0, #0
 8018b82:	f6bf af50 	bge.w	8018a26 <PollPllLocked+0x8a>
 8018b86:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 8018b8a:	b005      	add	sp, #20
 8018b8c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018b90:	4718      	bx	r3
 8018b92:	1c47      	adds	r7, r0, #1
 8018b94:	f5a1 2174 	sub.w	r1, r1, #999424	@ 0xf4000
 8018b98:	42b8      	cmp	r0, r7
 8018b9a:	f5a1 7110 	sub.w	r1, r1, #576	@ 0x240
 8018b9e:	d3b0      	bcc.n	8018b02 <PollPllLocked+0x166>
 8018ba0:	2700      	movs	r7, #0
 8018ba2:	4560      	cmp	r0, ip
 8018ba4:	d04c      	beq.n	8018c40 <PollPllLocked+0x2a4>
 8018ba6:	bf34      	ite	cc
 8018ba8:	2301      	movcc	r3, #1
 8018baa:	2300      	movcs	r3, #0
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	d1da      	bne.n	8018b66 <PollPllLocked+0x1ca>
 8018bb0:	45bc      	cmp	ip, r7
 8018bb2:	d02e      	beq.n	8018c12 <PollPllLocked+0x276>
 8018bb4:	bf8c      	ite	hi
 8018bb6:	2301      	movhi	r3, #1
 8018bb8:	2300      	movls	r3, #0
 8018bba:	e7ae      	b.n	8018b1a <PollPllLocked+0x17e>
 8018bbc:	428a      	cmp	r2, r1
 8018bbe:	bf8c      	ite	hi
 8018bc0:	2200      	movhi	r2, #0
 8018bc2:	2201      	movls	r2, #1
 8018bc4:	2a00      	cmp	r2, #0
 8018bc6:	f47f af0f 	bne.w	80189e8 <PollPllLocked+0x4c>
 8018bca:	e75e      	b.n	8018a8a <PollPllLocked+0xee>
 8018bcc:	f8b4 204d 	ldrh.w	r2, [r4, #77]	@ 0x4d
 8018bd0:	ba52      	rev16	r2, r2
 8018bd2:	f3c2 1283 	ubfx	r2, r2, #6, #4
 8018bd6:	4293      	cmp	r3, r2
 8018bd8:	d009      	beq.n	8018bee <PollPllLocked+0x252>
 8018bda:	2e00      	cmp	r6, #0
 8018bdc:	bf08      	it	eq
 8018bde:	4613      	moveq	r3, r2
 8018be0:	e7b0      	b.n	8018b44 <PollPllLocked+0x1a8>
 8018be2:	4621      	mov	r1, r4
 8018be4:	b005      	add	sp, #20
 8018be6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018bea:	f7ff b833 	b.w	8017c54 <WriteRegisterConfiguration>
 8018bee:	f894 204e 	ldrb.w	r2, [r4, #78]	@ 0x4e
 8018bf2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8018bf6:	4296      	cmp	r6, r2
 8018bf8:	d032      	beq.n	8018c60 <PollPllLocked+0x2c4>
 8018bfa:	da2b      	bge.n	8018c54 <PollPllLocked+0x2b8>
 8018bfc:	1c75      	adds	r5, r6, #1
 8018bfe:	42aa      	cmp	r2, r5
 8018c00:	bfa8      	it	ge
 8018c02:	462a      	movge	r2, r5
 8018c04:	b255      	sxtb	r5, r2
 8018c06:	e79d      	b.n	8018b44 <PollPllLocked+0x1a8>
 8018c08:	4291      	cmp	r1, r2
 8018c0a:	bf8c      	ite	hi
 8018c0c:	2300      	movhi	r3, #0
 8018c0e:	2301      	movls	r3, #1
 8018c10:	e783      	b.n	8018b1a <PollPllLocked+0x17e>
 8018c12:	428a      	cmp	r2, r1
 8018c14:	bf34      	ite	cc
 8018c16:	2300      	movcc	r3, #0
 8018c18:	2301      	movcs	r3, #1
 8018c1a:	e77e      	b.n	8018b1a <PollPllLocked+0x17e>
 8018c1c:	6822      	ldr	r2, [r4, #0]
 8018c1e:	3271      	adds	r2, #113	@ 0x71
 8018c20:	bf1c      	itt	ne
 8018c22:	f06f 0271 	mvnne.w	r2, #113	@ 0x71
 8018c26:	6022      	strne	r2, [r4, #0]
 8018c28:	f8d4 2104 	ldr.w	r2, [r4, #260]	@ 0x104
 8018c2c:	2a00      	cmp	r2, #0
 8018c2e:	f43f aefa 	beq.w	8018a26 <PollPllLocked+0x8a>
 8018c32:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 8018c36:	4618      	mov	r0, r3
 8018c38:	b005      	add	sp, #20
 8018c3a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018c3e:	4710      	bx	r2
 8018c40:	4293      	cmp	r3, r2
 8018c42:	bf8c      	ite	hi
 8018c44:	2300      	movhi	r3, #0
 8018c46:	2301      	movls	r3, #1
 8018c48:	e7b0      	b.n	8018bac <PollPllLocked+0x210>
 8018c4a:	4293      	cmp	r3, r2
 8018c4c:	bf8c      	ite	hi
 8018c4e:	2300      	movhi	r3, #0
 8018c50:	2301      	movls	r3, #1
 8018c52:	e75c      	b.n	8018b0e <PollPllLocked+0x172>
 8018c54:	b102      	cbz	r2, 8018c58 <PollPllLocked+0x2bc>
 8018c56:	1e75      	subs	r5, r6, #1
 8018c58:	42aa      	cmp	r2, r5
 8018c5a:	bfb8      	it	lt
 8018c5c:	462a      	movlt	r2, r5
 8018c5e:	e7d1      	b.n	8018c04 <PollPllLocked+0x268>
 8018c60:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 8018c64:	4628      	mov	r0, r5
 8018c66:	e790      	b.n	8018b8a <PollPllLocked+0x1ee>
 8018c68:	000f423f 	.word	0x000f423f
 8018c6c:	08018ef1 	.word	0x08018ef1
 8018c70:	08029264 	.word	0x08029264
 8018c74:	08017c55 	.word	0x08017c55
 8018c78:	08017875 	.word	0x08017875

08018c7c <VerifyBlockEnable>:
 8018c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c7e:	2800      	cmp	r0, #0
 8018c80:	b085      	sub	sp, #20
 8018c82:	460c      	mov	r4, r1
 8018c84:	f2c0 80f7 	blt.w	8018e76 <VerifyBlockEnable+0x1fa>
 8018c88:	f891 2089 	ldrb.w	r2, [r1, #137]	@ 0x89
 8018c8c:	f891 3058 	ldrb.w	r3, [r1, #88]	@ 0x58
 8018c90:	f012 0001 	ands.w	r0, r2, #1
 8018c94:	d058      	beq.n	8018d48 <VerifyBlockEnable+0xcc>
 8018c96:	07d9      	lsls	r1, r3, #31
 8018c98:	d556      	bpl.n	8018d48 <VerifyBlockEnable+0xcc>
 8018c9a:	4053      	eors	r3, r2
 8018c9c:	f013 0fef 	tst.w	r3, #239	@ 0xef
 8018ca0:	bf0c      	ite	eq
 8018ca2:	2301      	moveq	r3, #1
 8018ca4:	2300      	movne	r3, #0
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	f000 80bb 	beq.w	8018e22 <VerifyBlockEnable+0x1a6>
 8018cac:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8018cae:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 8018cb2:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8018cb6:	06d2      	lsls	r2, r2, #27
 8018cb8:	67a1      	str	r1, [r4, #120]	@ 0x78
 8018cba:	f003 0110 	and.w	r1, r3, #16
 8018cbe:	d448      	bmi.n	8018d52 <VerifyBlockEnable+0xd6>
 8018cc0:	f023 0310 	bic.w	r3, r3, #16
 8018cc4:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8018cc6:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 8018cca:	6fa6      	ldr	r6, [r4, #120]	@ 0x78
 8018ccc:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8018cce:	4b84      	ldr	r3, [pc, #528]	@ (8018ee0 <VerifyBlockEnable+0x264>)
 8018cd0:	f006 7600 	and.w	r6, r6, #33554432	@ 0x2000000
 8018cd4:	f000 0020 	and.w	r0, r0, #32
 8018cd8:	4330      	orrs	r0, r6
 8018cda:	e9c4 3443 	strd	r3, r4, [r4, #268]	@ 0x10c
 8018cde:	d052      	beq.n	8018d86 <VerifyBlockEnable+0x10a>
 8018ce0:	f894 70fb 	ldrb.w	r7, [r4, #251]	@ 0xfb
 8018ce4:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
 8018ce8:	f007 073f 	and.w	r7, r7, #63	@ 0x3f
 8018cec:	2f09      	cmp	r7, #9
 8018cee:	a903      	add	r1, sp, #12
 8018cf0:	a802      	add	r0, sp, #8
 8018cf2:	bf94      	ite	ls
 8018cf4:	8bdd      	ldrhls	r5, [r3, #30]
 8018cf6:	8c1d      	ldrhhi	r5, [r3, #32]
 8018cf8:	f7f5 f832 	bl	800dd60 <Timer_GetCounterValue>
 8018cfc:	f8d4 1118 	ldr.w	r1, [r4, #280]	@ 0x118
 8018d00:	f8dd c008 	ldr.w	ip, [sp, #8]
 8018d04:	9a03      	ldr	r2, [sp, #12]
 8018d06:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
 8018d0a:	186b      	adds	r3, r5, r1
 8018d0c:	4d75      	ldr	r5, [pc, #468]	@ (8018ee4 <VerifyBlockEnable+0x268>)
 8018d0e:	bf2c      	ite	cs
 8018d10:	f04f 0e01 	movcs.w	lr, #1
 8018d14:	f04f 0e00 	movcc.w	lr, #0
 8018d18:	42ab      	cmp	r3, r5
 8018d1a:	d93a      	bls.n	8018d92 <VerifyBlockEnable+0x116>
 8018d1c:	1c45      	adds	r5, r0, #1
 8018d1e:	f5a3 2374 	sub.w	r3, r3, #999424	@ 0xf4000
 8018d22:	42a8      	cmp	r0, r5
 8018d24:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8018d28:	d237      	bcs.n	8018d9a <VerifyBlockEnable+0x11e>
 8018d2a:	4560      	cmp	r0, ip
 8018d2c:	f000 80bc 	beq.w	8018ea8 <VerifyBlockEnable+0x22c>
 8018d30:	bf34      	ite	cc
 8018d32:	2101      	movcc	r1, #1
 8018d34:	2100      	movcs	r1, #0
 8018d36:	2900      	cmp	r1, #0
 8018d38:	d04f      	beq.n	8018dda <VerifyBlockEnable+0x15e>
 8018d3a:	4565      	cmp	r5, ip
 8018d3c:	f000 80af 	beq.w	8018e9e <VerifyBlockEnable+0x222>
 8018d40:	bf34      	ite	cc
 8018d42:	2301      	movcc	r3, #1
 8018d44:	2300      	movcs	r3, #0
 8018d46:	e044      	b.n	8018dd2 <VerifyBlockEnable+0x156>
 8018d48:	1ad3      	subs	r3, r2, r3
 8018d4a:	fab3 f383 	clz	r3, r3
 8018d4e:	095b      	lsrs	r3, r3, #5
 8018d50:	e7a9      	b.n	8018ca6 <VerifyBlockEnable+0x2a>
 8018d52:	2800      	cmp	r0, #0
 8018d54:	d1b4      	bne.n	8018cc0 <VerifyBlockEnable+0x44>
 8018d56:	f043 0310 	orr.w	r3, r3, #16
 8018d5a:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8018d5c:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 8018d60:	b109      	cbz	r1, 8018d66 <VerifyBlockEnable+0xea>
 8018d62:	0153      	lsls	r3, r2, #5
 8018d64:	d5b1      	bpl.n	8018cca <VerifyBlockEnable+0x4e>
 8018d66:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8018d68:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8018d6c:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 8018d70:	f104 0184 	add.w	r1, r4, #132	@ 0x84
 8018d74:	67a3      	str	r3, [r4, #120]	@ 0x78
 8018d76:	f7f4 fff3 	bl	800dd60 <Timer_GetCounterValue>
 8018d7a:	4620      	mov	r0, r4
 8018d7c:	b005      	add	sp, #20
 8018d7e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018d82:	f7ff be0b 	b.w	801899c <PollPllLocked>
 8018d86:	4621      	mov	r1, r4
 8018d88:	b005      	add	sp, #20
 8018d8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018d8e:	f7fe bf61 	b.w	8017c54 <WriteRegisterConfiguration>
 8018d92:	4605      	mov	r5, r0
 8018d94:	f1be 0f00 	cmp.w	lr, #0
 8018d98:	d0c7      	beq.n	8018d2a <VerifyBlockEnable+0xae>
 8018d9a:	4560      	cmp	r0, ip
 8018d9c:	d012      	beq.n	8018dc4 <VerifyBlockEnable+0x148>
 8018d9e:	d213      	bcs.n	8018dc8 <VerifyBlockEnable+0x14c>
 8018da0:	4621      	mov	r1, r4
 8018da2:	230a      	movs	r3, #10
 8018da4:	f801 3ff8 	strb.w	r3, [r1, #248]!
 8018da8:	4b4f      	ldr	r3, [pc, #316]	@ (8018ee8 <VerifyBlockEnable+0x26c>)
 8018daa:	2200      	movs	r2, #0
 8018dac:	e9cd 3400 	strd	r3, r4, [sp]
 8018db0:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 8018db4:	2305      	movs	r3, #5
 8018db6:	f009 fa89 	bl	80222cc <ADS_Transfer>
 8018dba:	1e03      	subs	r3, r0, #0
 8018dbc:	db6c      	blt.n	8018e98 <VerifyBlockEnable+0x21c>
 8018dbe:	4618      	mov	r0, r3
 8018dc0:	b005      	add	sp, #20
 8018dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018dc4:	428a      	cmp	r2, r1
 8018dc6:	d2eb      	bcs.n	8018da0 <VerifyBlockEnable+0x124>
 8018dc8:	45ac      	cmp	ip, r5
 8018dca:	d068      	beq.n	8018e9e <VerifyBlockEnable+0x222>
 8018dcc:	bf8c      	ite	hi
 8018dce:	2301      	movhi	r3, #1
 8018dd0:	2300      	movls	r3, #0
 8018dd2:	f083 0301 	eor.w	r3, r3, #1
 8018dd6:	2b00      	cmp	r3, #0
 8018dd8:	d1e2      	bne.n	8018da0 <VerifyBlockEnable+0x124>
 8018dda:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	@ 0xfa
 8018dde:	f894 10fa 	ldrb.w	r1, [r4, #250]	@ 0xfa
 8018de2:	ba5b      	rev16	r3, r3
 8018de4:	f3c3 1383 	ubfx	r3, r3, #6, #4
 8018de8:	2e00      	cmp	r6, #0
 8018dea:	d039      	beq.n	8018e60 <VerifyBlockEnable+0x1e4>
 8018dec:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8018dee:	f042 0220 	orr.w	r2, r2, #32
 8018df2:	67a2      	str	r2, [r4, #120]	@ 0x78
 8018df4:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8018df6:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8018dfa:	2600      	movs	r6, #0
 8018dfc:	67a2      	str	r2, [r4, #120]	@ 0x78
 8018dfe:	f3c3 0297 	ubfx	r2, r3, #2, #24
 8018e02:	f021 0103 	bic.w	r1, r1, #3
 8018e06:	4311      	orrs	r1, r2
 8018e08:	ea46 1383 	orr.w	r3, r6, r3, lsl #6
 8018e0c:	f884 10fa 	strb.w	r1, [r4, #250]	@ 0xfa
 8018e10:	f884 30fb 	strb.w	r3, [r4, #251]	@ 0xfb
 8018e14:	f504 718c 	add.w	r1, r4, #280	@ 0x118
 8018e18:	f504 708a 	add.w	r0, r4, #276	@ 0x114
 8018e1c:	f7f4 ffa0 	bl	800dd60 <Timer_GetCounterValue>
 8018e20:	e7be      	b.n	8018da0 <VerifyBlockEnable+0x124>
 8018e22:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8018e24:	4a31      	ldr	r2, [pc, #196]	@ (8018eec <VerifyBlockEnable+0x270>)
 8018e26:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 8018e2a:	430a      	orrs	r2, r1
 8018e2c:	67a2      	str	r2, [r4, #120]	@ 0x78
 8018e2e:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8018e30:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8018e34:	67a2      	str	r2, [r4, #120]	@ 0x78
 8018e36:	6822      	ldr	r2, [r4, #0]
 8018e38:	f043 0302 	orr.w	r3, r3, #2
 8018e3c:	3271      	adds	r2, #113	@ 0x71
 8018e3e:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 8018e42:	bf1c      	itt	ne
 8018e44:	f06f 0371 	mvnne.w	r3, #113	@ 0x71
 8018e48:	6023      	strne	r3, [r4, #0]
 8018e4a:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 8018e4e:	b303      	cbz	r3, 8018e92 <VerifyBlockEnable+0x216>
 8018e50:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 8018e54:	f06f 0071 	mvn.w	r0, #113	@ 0x71
 8018e58:	b005      	add	sp, #20
 8018e5a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018e5e:	4718      	bx	r3
 8018e60:	f8b4 204d 	ldrh.w	r2, [r4, #77]	@ 0x4d
 8018e64:	ba52      	rev16	r2, r2
 8018e66:	f3c2 1283 	ubfx	r2, r2, #6, #4
 8018e6a:	4293      	cmp	r3, r2
 8018e6c:	d021      	beq.n	8018eb2 <VerifyBlockEnable+0x236>
 8018e6e:	2f00      	cmp	r7, #0
 8018e70:	bf08      	it	eq
 8018e72:	4613      	moveq	r3, r2
 8018e74:	e7c3      	b.n	8018dfe <VerifyBlockEnable+0x182>
 8018e76:	680b      	ldr	r3, [r1, #0]
 8018e78:	3371      	adds	r3, #113	@ 0x71
 8018e7a:	bf1c      	itt	ne
 8018e7c:	f06f 0371 	mvnne.w	r3, #113	@ 0x71
 8018e80:	600b      	strne	r3, [r1, #0]
 8018e82:	f8d1 3104 	ldr.w	r3, [r1, #260]	@ 0x104
 8018e86:	b113      	cbz	r3, 8018e8e <VerifyBlockEnable+0x212>
 8018e88:	f8d1 1108 	ldr.w	r1, [r1, #264]	@ 0x108
 8018e8c:	e7e4      	b.n	8018e58 <VerifyBlockEnable+0x1dc>
 8018e8e:	4603      	mov	r3, r0
 8018e90:	e795      	b.n	8018dbe <VerifyBlockEnable+0x142>
 8018e92:	f06f 0371 	mvn.w	r3, #113	@ 0x71
 8018e96:	e792      	b.n	8018dbe <VerifyBlockEnable+0x142>
 8018e98:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 8018e9c:	e7dc      	b.n	8018e58 <VerifyBlockEnable+0x1dc>
 8018e9e:	429a      	cmp	r2, r3
 8018ea0:	bf34      	ite	cc
 8018ea2:	2300      	movcc	r3, #0
 8018ea4:	2301      	movcs	r3, #1
 8018ea6:	e794      	b.n	8018dd2 <VerifyBlockEnable+0x156>
 8018ea8:	428a      	cmp	r2, r1
 8018eaa:	bf34      	ite	cc
 8018eac:	2100      	movcc	r1, #0
 8018eae:	2101      	movcs	r1, #1
 8018eb0:	e741      	b.n	8018d36 <VerifyBlockEnable+0xba>
 8018eb2:	f894 204e 	ldrb.w	r2, [r4, #78]	@ 0x4e
 8018eb6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8018eba:	4297      	cmp	r7, r2
 8018ebc:	d00c      	beq.n	8018ed8 <VerifyBlockEnable+0x25c>
 8018ebe:	da05      	bge.n	8018ecc <VerifyBlockEnable+0x250>
 8018ec0:	1c7e      	adds	r6, r7, #1
 8018ec2:	42b2      	cmp	r2, r6
 8018ec4:	bfa8      	it	ge
 8018ec6:	4632      	movge	r2, r6
 8018ec8:	b256      	sxtb	r6, r2
 8018eca:	e798      	b.n	8018dfe <VerifyBlockEnable+0x182>
 8018ecc:	b102      	cbz	r2, 8018ed0 <VerifyBlockEnable+0x254>
 8018ece:	1e7e      	subs	r6, r7, #1
 8018ed0:	42b2      	cmp	r2, r6
 8018ed2:	bfb8      	it	lt
 8018ed4:	4632      	movlt	r2, r6
 8018ed6:	e7f7      	b.n	8018ec8 <VerifyBlockEnable+0x24c>
 8018ed8:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 8018edc:	4630      	mov	r0, r6
 8018ede:	e7bb      	b.n	8018e58 <VerifyBlockEnable+0x1dc>
 8018ee0:	08017c55 	.word	0x08017c55
 8018ee4:	000f423f 	.word	0x000f423f
 8018ee8:	08017875 	.word	0x08017875
 8018eec:	0003dffe 	.word	0x0003dffe

08018ef0 <CheckPllLocked>:
 8018ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018ef2:	2800      	cmp	r0, #0
 8018ef4:	b085      	sub	sp, #20
 8018ef6:	460c      	mov	r4, r1
 8018ef8:	f2c0 8099 	blt.w	801902e <CheckPllLocked+0x13e>
 8018efc:	f891 308a 	ldrb.w	r3, [r1, #138]	@ 0x8a
 8018f00:	f8d1 2100 	ldr.w	r2, [r1, #256]	@ 0x100
 8018f04:	0658      	lsls	r0, r3, #25
 8018f06:	f140 8086 	bpl.w	8019016 <CheckPllLocked+0x126>
 8018f0a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8018f0e:	f8c1 2100 	str.w	r2, [r1, #256]	@ 0x100
 8018f12:	069a      	lsls	r2, r3, #26
 8018f14:	f140 80af 	bpl.w	8019076 <CheckPllLocked+0x186>
 8018f18:	4886      	ldr	r0, [pc, #536]	@ (8019134 <CheckPllLocked+0x244>)
 8018f1a:	f891 30fd 	ldrb.w	r3, [r1, #253]	@ 0xfd
 8018f1e:	6f8e      	ldr	r6, [r1, #120]	@ 0x78
 8018f20:	f891 2064 	ldrb.w	r2, [r1, #100]	@ 0x64
 8018f24:	f8c1 010c 	str.w	r0, [r1, #268]	@ 0x10c
 8018f28:	6f88      	ldr	r0, [r1, #120]	@ 0x78
 8018f2a:	f002 0203 	and.w	r2, r2, #3
 8018f2e:	f023 030c 	bic.w	r3, r3, #12
 8018f32:	f006 7600 	and.w	r6, r6, #33554432	@ 0x2000000
 8018f36:	f000 0020 	and.w	r0, r0, #32
 8018f3a:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8018f3e:	4330      	orrs	r0, r6
 8018f40:	f881 30fd 	strb.w	r3, [r1, #253]	@ 0xfd
 8018f44:	f8c4 1110 	str.w	r1, [r4, #272]	@ 0x110
 8018f48:	f000 80bc 	beq.w	80190c4 <CheckPllLocked+0x1d4>
 8018f4c:	f891 70fb 	ldrb.w	r7, [r1, #251]	@ 0xfb
 8018f50:	f8d1 311c 	ldr.w	r3, [r1, #284]	@ 0x11c
 8018f54:	f007 073f 	and.w	r7, r7, #63	@ 0x3f
 8018f58:	2f09      	cmp	r7, #9
 8018f5a:	a903      	add	r1, sp, #12
 8018f5c:	a802      	add	r0, sp, #8
 8018f5e:	bf94      	ite	ls
 8018f60:	8bdd      	ldrhls	r5, [r3, #30]
 8018f62:	8c1d      	ldrhhi	r5, [r3, #32]
 8018f64:	f7f4 fefc 	bl	800dd60 <Timer_GetCounterValue>
 8018f68:	f8d4 2118 	ldr.w	r2, [r4, #280]	@ 0x118
 8018f6c:	f8dd c008 	ldr.w	ip, [sp, #8]
 8018f70:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8018f74:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
 8018f78:	18ab      	adds	r3, r5, r2
 8018f7a:	4d6f      	ldr	r5, [pc, #444]	@ (8019138 <CheckPllLocked+0x248>)
 8018f7c:	bf2c      	ite	cs
 8018f7e:	2101      	movcs	r1, #1
 8018f80:	2100      	movcc	r1, #0
 8018f82:	42ab      	cmp	r3, r5
 8018f84:	d862      	bhi.n	801904c <CheckPllLocked+0x15c>
 8018f86:	f081 0101 	eor.w	r1, r1, #1
 8018f8a:	4605      	mov	r5, r0
 8018f8c:	2900      	cmp	r1, #0
 8018f8e:	d06b      	beq.n	8019068 <CheckPllLocked+0x178>
 8018f90:	4560      	cmp	r0, ip
 8018f92:	f000 80bb 	beq.w	801910c <CheckPllLocked+0x21c>
 8018f96:	bf34      	ite	cc
 8018f98:	2201      	movcc	r2, #1
 8018f9a:	2200      	movcs	r2, #0
 8018f9c:	b132      	cbz	r2, 8018fac <CheckPllLocked+0xbc>
 8018f9e:	4565      	cmp	r5, ip
 8018fa0:	f000 80a5 	beq.w	80190ee <CheckPllLocked+0x1fe>
 8018fa4:	bf34      	ite	cc
 8018fa6:	2301      	movcc	r3, #1
 8018fa8:	2300      	movcs	r3, #0
 8018faa:	b313      	cbz	r3, 8018ff2 <CheckPllLocked+0x102>
 8018fac:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	@ 0xfa
 8018fb0:	f894 10fa 	ldrb.w	r1, [r4, #250]	@ 0xfa
 8018fb4:	ba5b      	rev16	r3, r3
 8018fb6:	f3c3 1383 	ubfx	r3, r3, #6, #4
 8018fba:	2e00      	cmp	r6, #0
 8018fbc:	d077      	beq.n	80190ae <CheckPllLocked+0x1be>
 8018fbe:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8018fc0:	f042 0220 	orr.w	r2, r2, #32
 8018fc4:	67a2      	str	r2, [r4, #120]	@ 0x78
 8018fc6:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8018fc8:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8018fcc:	2600      	movs	r6, #0
 8018fce:	67a2      	str	r2, [r4, #120]	@ 0x78
 8018fd0:	f3c3 0297 	ubfx	r2, r3, #2, #24
 8018fd4:	f021 0103 	bic.w	r1, r1, #3
 8018fd8:	4311      	orrs	r1, r2
 8018fda:	ea46 1383 	orr.w	r3, r6, r3, lsl #6
 8018fde:	f884 10fa 	strb.w	r1, [r4, #250]	@ 0xfa
 8018fe2:	f884 30fb 	strb.w	r3, [r4, #251]	@ 0xfb
 8018fe6:	f504 718c 	add.w	r1, r4, #280	@ 0x118
 8018fea:	f504 708a 	add.w	r0, r4, #276	@ 0x114
 8018fee:	f7f4 feb7 	bl	800dd60 <Timer_GetCounterValue>
 8018ff2:	4621      	mov	r1, r4
 8018ff4:	230a      	movs	r3, #10
 8018ff6:	f801 3ff8 	strb.w	r3, [r1, #248]!
 8018ffa:	4b50      	ldr	r3, [pc, #320]	@ (801913c <CheckPllLocked+0x24c>)
 8018ffc:	2200      	movs	r2, #0
 8018ffe:	e9cd 3400 	strd	r3, r4, [sp]
 8019002:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 8019006:	2305      	movs	r3, #5
 8019008:	f009 f960 	bl	80222cc <ADS_Transfer>
 801900c:	1e03      	subs	r3, r0, #0
 801900e:	db76      	blt.n	80190fe <CheckPllLocked+0x20e>
 8019010:	4618      	mov	r0, r3
 8019012:	b005      	add	sp, #20
 8019014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019016:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801901a:	069b      	lsls	r3, r3, #26
 801901c:	f8c1 2100 	str.w	r2, [r1, #256]	@ 0x100
 8019020:	d529      	bpl.n	8019076 <CheckPllLocked+0x186>
 8019022:	4608      	mov	r0, r1
 8019024:	b005      	add	sp, #20
 8019026:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801902a:	f7ff bcb7 	b.w	801899c <PollPllLocked>
 801902e:	680b      	ldr	r3, [r1, #0]
 8019030:	3371      	adds	r3, #113	@ 0x71
 8019032:	bf1c      	itt	ne
 8019034:	f06f 0371 	mvnne.w	r3, #113	@ 0x71
 8019038:	600b      	strne	r3, [r1, #0]
 801903a:	f8d1 3104 	ldr.w	r3, [r1, #260]	@ 0x104
 801903e:	b17b      	cbz	r3, 8019060 <CheckPllLocked+0x170>
 8019040:	f8d1 1108 	ldr.w	r1, [r1, #264]	@ 0x108
 8019044:	b005      	add	sp, #20
 8019046:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801904a:	4718      	bx	r3
 801904c:	1c45      	adds	r5, r0, #1
 801904e:	42a8      	cmp	r0, r5
 8019050:	f5a3 2374 	sub.w	r3, r3, #999424	@ 0xf4000
 8019054:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8019058:	bf2c      	ite	cs
 801905a:	2100      	movcs	r1, #0
 801905c:	2101      	movcc	r1, #1
 801905e:	e795      	b.n	8018f8c <CheckPllLocked+0x9c>
 8019060:	4603      	mov	r3, r0
 8019062:	4618      	mov	r0, r3
 8019064:	b005      	add	sp, #20
 8019066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019068:	4560      	cmp	r0, ip
 801906a:	d04b      	beq.n	8019104 <CheckPllLocked+0x214>
 801906c:	d3c1      	bcc.n	8018ff2 <CheckPllLocked+0x102>
 801906e:	4565      	cmp	r5, ip
 8019070:	d051      	beq.n	8019116 <CheckPllLocked+0x226>
 8019072:	d2be      	bcs.n	8018ff2 <CheckPllLocked+0x102>
 8019074:	e79a      	b.n	8018fac <CheckPllLocked+0xbc>
 8019076:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8019078:	4a31      	ldr	r2, [pc, #196]	@ (8019140 <CheckPllLocked+0x250>)
 801907a:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 801907e:	430a      	orrs	r2, r1
 8019080:	67a2      	str	r2, [r4, #120]	@ 0x78
 8019082:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8019084:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8019088:	67a2      	str	r2, [r4, #120]	@ 0x78
 801908a:	6822      	ldr	r2, [r4, #0]
 801908c:	f043 0302 	orr.w	r3, r3, #2
 8019090:	3271      	adds	r2, #113	@ 0x71
 8019092:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 8019096:	bf1c      	itt	ne
 8019098:	f06f 0371 	mvnne.w	r3, #113	@ 0x71
 801909c:	6023      	strne	r3, [r4, #0]
 801909e:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 80190a2:	b1a3      	cbz	r3, 80190ce <CheckPllLocked+0x1de>
 80190a4:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 80190a8:	f06f 0071 	mvn.w	r0, #113	@ 0x71
 80190ac:	e7ca      	b.n	8019044 <CheckPllLocked+0x154>
 80190ae:	f8b4 204d 	ldrh.w	r2, [r4, #77]	@ 0x4d
 80190b2:	ba52      	rev16	r2, r2
 80190b4:	f3c2 1283 	ubfx	r2, r2, #6, #4
 80190b8:	4293      	cmp	r3, r2
 80190ba:	d00b      	beq.n	80190d4 <CheckPllLocked+0x1e4>
 80190bc:	2f00      	cmp	r7, #0
 80190be:	bf08      	it	eq
 80190c0:	4613      	moveq	r3, r2
 80190c2:	e785      	b.n	8018fd0 <CheckPllLocked+0xe0>
 80190c4:	b005      	add	sp, #20
 80190c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80190ca:	f7fe bdc3 	b.w	8017c54 <WriteRegisterConfiguration>
 80190ce:	f06f 0371 	mvn.w	r3, #113	@ 0x71
 80190d2:	e79d      	b.n	8019010 <CheckPllLocked+0x120>
 80190d4:	f894 204e 	ldrb.w	r2, [r4, #78]	@ 0x4e
 80190d8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80190dc:	4297      	cmp	r7, r2
 80190de:	d024      	beq.n	801912a <CheckPllLocked+0x23a>
 80190e0:	da1d      	bge.n	801911e <CheckPllLocked+0x22e>
 80190e2:	1c7e      	adds	r6, r7, #1
 80190e4:	42b2      	cmp	r2, r6
 80190e6:	bfa8      	it	ge
 80190e8:	4632      	movge	r2, r6
 80190ea:	b256      	sxtb	r6, r2
 80190ec:	e770      	b.n	8018fd0 <CheckPllLocked+0xe0>
 80190ee:	4573      	cmp	r3, lr
 80190f0:	bf8c      	ite	hi
 80190f2:	2300      	movhi	r3, #0
 80190f4:	2301      	movls	r3, #1
 80190f6:	2b00      	cmp	r3, #0
 80190f8:	f47f af58 	bne.w	8018fac <CheckPllLocked+0xbc>
 80190fc:	e779      	b.n	8018ff2 <CheckPllLocked+0x102>
 80190fe:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 8019102:	e79f      	b.n	8019044 <CheckPllLocked+0x154>
 8019104:	4572      	cmp	r2, lr
 8019106:	f67f af74 	bls.w	8018ff2 <CheckPllLocked+0x102>
 801910a:	e7b0      	b.n	801906e <CheckPllLocked+0x17e>
 801910c:	4572      	cmp	r2, lr
 801910e:	bf8c      	ite	hi
 8019110:	2200      	movhi	r2, #0
 8019112:	2201      	movls	r2, #1
 8019114:	e742      	b.n	8018f9c <CheckPllLocked+0xac>
 8019116:	4573      	cmp	r3, lr
 8019118:	f67f af48 	bls.w	8018fac <CheckPllLocked+0xbc>
 801911c:	e769      	b.n	8018ff2 <CheckPllLocked+0x102>
 801911e:	b102      	cbz	r2, 8019122 <CheckPllLocked+0x232>
 8019120:	1e7e      	subs	r6, r7, #1
 8019122:	42b2      	cmp	r2, r6
 8019124:	bfb8      	it	lt
 8019126:	4632      	movlt	r2, r6
 8019128:	e7df      	b.n	80190ea <CheckPllLocked+0x1fa>
 801912a:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 801912e:	4630      	mov	r0, r6
 8019130:	e788      	b.n	8019044 <CheckPllLocked+0x154>
 8019132:	bf00      	nop
 8019134:	08017c55 	.word	0x08017c55
 8019138:	000f423f 	.word	0x000f423f
 801913c:	08017875 	.word	0x08017875
 8019140:	0003dffe 	.word	0x0003dffe

08019144 <Argus_Dev_TestConnection>:
 8019144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019148:	2300      	movs	r3, #0
 801914a:	f8b0 1055 	ldrh.w	r1, [r0, #85]	@ 0x55
 801914e:	f8a0 1089 	strh.w	r1, [r0, #137]	@ 0x89
 8019152:	f100 0588 	add.w	r5, r0, #136	@ 0x88
 8019156:	b082      	sub	sp, #8
 8019158:	220e      	movs	r2, #14
 801915a:	f500 7690 	add.w	r6, r0, #288	@ 0x120
 801915e:	f880 2088 	strb.w	r2, [r0, #136]	@ 0x88
 8019162:	4604      	mov	r4, r0
 8019164:	e9cd 3300 	strd	r3, r3, [sp]
 8019168:	462a      	mov	r2, r5
 801916a:	2303      	movs	r3, #3
 801916c:	4629      	mov	r1, r5
 801916e:	4630      	mov	r0, r6
 8019170:	f009 f8ac 	bl	80222cc <ADS_Transfer>
 8019174:	2800      	cmp	r0, #0
 8019176:	db3c      	blt.n	80191f2 <Argus_Dev_TestConnection+0xae>
 8019178:	2164      	movs	r1, #100	@ 0x64
 801917a:	4630      	mov	r0, r6
 801917c:	f008 ff8a 	bl	8022094 <ADS_AwaitIdle>
 8019180:	2800      	cmp	r0, #0
 8019182:	db36      	blt.n	80191f2 <Argus_Dev_TestConnection+0xae>
 8019184:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 8019188:	f894 2089 	ldrb.w	r2, [r4, #137]	@ 0x89
 801918c:	f003 031f 	and.w	r3, r3, #31
 8019190:	f022 011f 	bic.w	r1, r2, #31
 8019194:	430b      	orrs	r3, r1
 8019196:	429a      	cmp	r2, r3
 8019198:	f104 0789 	add.w	r7, r4, #137	@ 0x89
 801919c:	f104 0855 	add.w	r8, r4, #85	@ 0x55
 80191a0:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 80191a4:	d028      	beq.n	80191f8 <Argus_Dev_TestConnection+0xb4>
 80191a6:	2300      	movs	r3, #0
 80191a8:	e9cd 3300 	strd	r3, r3, [sp]
 80191ac:	230e      	movs	r3, #14
 80191ae:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
 80191b2:	462a      	mov	r2, r5
 80191b4:	2303      	movs	r3, #3
 80191b6:	4629      	mov	r1, r5
 80191b8:	4630      	mov	r0, r6
 80191ba:	f009 f887 	bl	80222cc <ADS_Transfer>
 80191be:	2800      	cmp	r0, #0
 80191c0:	db17      	blt.n	80191f2 <Argus_Dev_TestConnection+0xae>
 80191c2:	2164      	movs	r1, #100	@ 0x64
 80191c4:	4630      	mov	r0, r6
 80191c6:	f008 ff65 	bl	8022094 <ADS_AwaitIdle>
 80191ca:	2800      	cmp	r0, #0
 80191cc:	db11      	blt.n	80191f2 <Argus_Dev_TestConnection+0xae>
 80191ce:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 80191d2:	f894 2089 	ldrb.w	r2, [r4, #137]	@ 0x89
 80191d6:	f003 031f 	and.w	r3, r3, #31
 80191da:	f022 011f 	bic.w	r1, r2, #31
 80191de:	430b      	orrs	r3, r1
 80191e0:	429a      	cmp	r2, r3
 80191e2:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 80191e6:	d00d      	beq.n	8019204 <Argus_Dev_TestConnection+0xc0>
 80191e8:	4809      	ldr	r0, [pc, #36]	@ (8019210 <Argus_Dev_TestConnection+0xcc>)
 80191ea:	f7f4 fe91 	bl	800df10 <print>
 80191ee:	f06f 0064 	mvn.w	r0, #100	@ 0x64
 80191f2:	b002      	add	sp, #8
 80191f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80191f8:	787a      	ldrb	r2, [r7, #1]
 80191fa:	f898 3001 	ldrb.w	r3, [r8, #1]
 80191fe:	429a      	cmp	r2, r3
 8019200:	d1d1      	bne.n	80191a6 <Argus_Dev_TestConnection+0x62>
 8019202:	e7f6      	b.n	80191f2 <Argus_Dev_TestConnection+0xae>
 8019204:	787a      	ldrb	r2, [r7, #1]
 8019206:	f898 3001 	ldrb.w	r3, [r8, #1]
 801920a:	429a      	cmp	r2, r3
 801920c:	d1ec      	bne.n	80191e8 <Argus_Dev_TestConnection+0xa4>
 801920e:	e7f0      	b.n	80191f2 <Argus_Dev_TestConnection+0xae>
 8019210:	080292b4 	.word	0x080292b4

08019214 <Argus_Dev_Init>:
 8019214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019218:	4604      	mov	r4, r0
 801921a:	b084      	sub	sp, #16
 801921c:	460d      	mov	r5, r1
 801921e:	4616      	mov	r6, r2
 8019220:	2100      	movs	r1, #0
 8019222:	f44f 72ec 	mov.w	r2, #472	@ 0x1d8
 8019226:	461f      	mov	r7, r3
 8019228:	f504 7890 	add.w	r8, r4, #288	@ 0x120
 801922c:	f00a fad9 	bl	80237e2 <memset>
 8019230:	2303      	movs	r3, #3
 8019232:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8019234:	6023      	str	r3, [r4, #0]
 8019236:	f8c4 51d4 	str.w	r5, [r4, #468]	@ 0x1d4
 801923a:	f8c4 711c 	str.w	r7, [r4, #284]	@ 0x11c
 801923e:	4640      	mov	r0, r8
 8019240:	f008 fc3c 	bl	8021abc <ADS_Init>
 8019244:	2800      	cmp	r0, #0
 8019246:	db3e      	blt.n	80192c6 <Argus_Dev_Init+0xb2>
 8019248:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801924a:	9000      	str	r0, [sp, #0]
 801924c:	463b      	mov	r3, r7
 801924e:	4632      	mov	r2, r6
 8019250:	4621      	mov	r1, r4
 8019252:	f504 70b4 	add.w	r0, r4, #360	@ 0x168
 8019256:	f7fb fe43 	bl	8014ee0 <Argus_Dca_Init>
 801925a:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 801925c:	4a89      	ldr	r2, [pc, #548]	@ (8019484 <Argus_Dev_Init+0x270>)
 801925e:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 8019262:	430a      	orrs	r2, r1
 8019264:	67a2      	str	r2, [r4, #120]	@ 0x78
 8019266:	f043 0302 	orr.w	r3, r3, #2
 801926a:	22bf      	movs	r2, #191	@ 0xbf
 801926c:	6825      	ldr	r5, [r4, #0]
 801926e:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 8019272:	6022      	str	r2, [r4, #0]
 8019274:	4620      	mov	r0, r4
 8019276:	f7ff ff65 	bl	8019144 <Argus_Dev_TestConnection>
 801927a:	2800      	cmp	r0, #0
 801927c:	6025      	str	r5, [r4, #0]
 801927e:	f000 80a5 	beq.w	80193cc <Argus_Dev_Init+0x1b8>
 8019282:	da0e      	bge.n	80192a2 <Argus_Dev_Init+0x8e>
 8019284:	f06f 0364 	mvn.w	r3, #100	@ 0x64
 8019288:	6023      	str	r3, [r4, #0]
 801928a:	b004      	add	sp, #16
 801928c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019290:	7aa3      	ldrb	r3, [r4, #10]
 8019292:	2202      	movs	r2, #2
 8019294:	2b07      	cmp	r3, #7
 8019296:	7222      	strb	r2, [r4, #8]
 8019298:	f200 80aa 	bhi.w	80193f0 <Argus_Dev_Init+0x1dc>
 801929c:	2b01      	cmp	r3, #1
 801929e:	f200 80ab 	bhi.w	80193f8 <Argus_Dev_Init+0x1e4>
 80192a2:	4b79      	ldr	r3, [pc, #484]	@ (8019488 <Argus_Dev_Init+0x274>)
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	f8ad 3008 	strh.w	r3, [sp, #8]
 80192aa:	0c1a      	lsrs	r2, r3, #16
 80192ac:	f88d 200a 	strb.w	r2, [sp, #10]
 80192b0:	2500      	movs	r5, #0
 80192b2:	aa02      	add	r2, sp, #8
 80192b4:	e9cd 5500 	strd	r5, r5, [sp]
 80192b8:	2303      	movs	r3, #3
 80192ba:	4611      	mov	r1, r2
 80192bc:	4640      	mov	r0, r8
 80192be:	f009 f805 	bl	80222cc <ADS_Transfer>
 80192c2:	2800      	cmp	r0, #0
 80192c4:	da05      	bge.n	80192d2 <Argus_Dev_Init+0xbe>
 80192c6:	f06f 0306 	mvn.w	r3, #6
 80192ca:	6023      	str	r3, [r4, #0]
 80192cc:	b004      	add	sp, #16
 80192ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192d2:	2164      	movs	r1, #100	@ 0x64
 80192d4:	4640      	mov	r0, r8
 80192d6:	f008 fedd 	bl	8022094 <ADS_AwaitIdle>
 80192da:	2800      	cmp	r0, #0
 80192dc:	dbf3      	blt.n	80192c6 <Argus_Dev_Init+0xb2>
 80192de:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80192e2:	9501      	str	r5, [sp, #4]
 80192e4:	f043 0320 	orr.w	r3, r3, #32
 80192e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80192ec:	f88d 300a 	strb.w	r3, [sp, #10]
 80192f0:	aa02      	add	r2, sp, #8
 80192f2:	2312      	movs	r3, #18
 80192f4:	f88d 3008 	strb.w	r3, [sp, #8]
 80192f8:	9500      	str	r5, [sp, #0]
 80192fa:	2303      	movs	r3, #3
 80192fc:	4611      	mov	r1, r2
 80192fe:	4640      	mov	r0, r8
 8019300:	f008 ffe4 	bl	80222cc <ADS_Transfer>
 8019304:	2800      	cmp	r0, #0
 8019306:	dbde      	blt.n	80192c6 <Argus_Dev_Init+0xb2>
 8019308:	2164      	movs	r1, #100	@ 0x64
 801930a:	4640      	mov	r0, r8
 801930c:	f008 fec2 	bl	8022094 <ADS_AwaitIdle>
 8019310:	2800      	cmp	r0, #0
 8019312:	dbd8      	blt.n	80192c6 <Argus_Dev_Init+0xb2>
 8019314:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8019318:	0698      	lsls	r0, r3, #26
 801931a:	f140 80a9 	bpl.w	8019470 <Argus_Dev_Init+0x25c>
 801931e:	f240 7301 	movw	r3, #1793	@ 0x701
 8019322:	aa02      	add	r2, sp, #8
 8019324:	9502      	str	r5, [sp, #8]
 8019326:	e9cd 5500 	strd	r5, r5, [sp]
 801932a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801932e:	260a      	movs	r6, #10
 8019330:	2305      	movs	r3, #5
 8019332:	4611      	mov	r1, r2
 8019334:	4640      	mov	r0, r8
 8019336:	f88d 500c 	strb.w	r5, [sp, #12]
 801933a:	f88d 6008 	strb.w	r6, [sp, #8]
 801933e:	f008 ffc5 	bl	80222cc <ADS_Transfer>
 8019342:	2800      	cmp	r0, #0
 8019344:	dbbf      	blt.n	80192c6 <Argus_Dev_Init+0xb2>
 8019346:	2164      	movs	r1, #100	@ 0x64
 8019348:	4640      	mov	r0, r8
 801934a:	f008 fea3 	bl	8022094 <ADS_AwaitIdle>
 801934e:	2800      	cmp	r0, #0
 8019350:	dbb9      	blt.n	80192c6 <Argus_Dev_Init+0xb2>
 8019352:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8019356:	f88d 6008 	strb.w	r6, [sp, #8]
 801935a:	f022 0203 	bic.w	r2, r2, #3
 801935e:	f88d 200a 	strb.w	r2, [sp, #10]
 8019362:	aa02      	add	r2, sp, #8
 8019364:	e9cd 5500 	strd	r5, r5, [sp]
 8019368:	2305      	movs	r3, #5
 801936a:	4611      	mov	r1, r2
 801936c:	4640      	mov	r0, r8
 801936e:	f88d 500b 	strb.w	r5, [sp, #11]
 8019372:	f008 ffab 	bl	80222cc <ADS_Transfer>
 8019376:	2800      	cmp	r0, #0
 8019378:	dba5      	blt.n	80192c6 <Argus_Dev_Init+0xb2>
 801937a:	2164      	movs	r1, #100	@ 0x64
 801937c:	4640      	mov	r0, r8
 801937e:	f008 fe89 	bl	8022094 <ADS_AwaitIdle>
 8019382:	2800      	cmp	r0, #0
 8019384:	db9f      	blt.n	80192c6 <Argus_Dev_Init+0xb2>
 8019386:	f104 0688 	add.w	r6, r4, #136	@ 0x88
 801938a:	f64c 7310 	movw	r3, #53008	@ 0xcf10
 801938e:	f8a4 3088 	strh.w	r3, [r4, #136]	@ 0x88
 8019392:	4632      	mov	r2, r6
 8019394:	e9cd 5500 	strd	r5, r5, [sp]
 8019398:	2302      	movs	r3, #2
 801939a:	4631      	mov	r1, r6
 801939c:	4640      	mov	r0, r8
 801939e:	f008 ff95 	bl	80222cc <ADS_Transfer>
 80193a2:	2800      	cmp	r0, #0
 80193a4:	db8f      	blt.n	80192c6 <Argus_Dev_Init+0xb2>
 80193a6:	2164      	movs	r1, #100	@ 0x64
 80193a8:	4640      	mov	r0, r8
 80193aa:	f008 fe73 	bl	8022094 <ADS_AwaitIdle>
 80193ae:	2800      	cmp	r0, #0
 80193b0:	db89      	blt.n	80192c6 <Argus_Dev_Init+0xb2>
 80193b2:	f894 3089 	ldrb.w	r3, [r4, #137]	@ 0x89
 80193b6:	07d9      	lsls	r1, r3, #31
 80193b8:	bf48      	it	mi
 80193ba:	f023 0310 	bicmi.w	r3, r3, #16
 80193be:	3bcf      	subs	r3, #207	@ 0xcf
 80193c0:	bf18      	it	ne
 80193c2:	2301      	movne	r3, #1
 80193c4:	bb63      	cbnz	r3, 8019420 <Argus_Dev_Init+0x20c>
 80193c6:	23c0      	movs	r3, #192	@ 0xc0
 80193c8:	6023      	str	r3, [r4, #0]
 80193ca:	e77f      	b.n	80192cc <Argus_Dev_Init+0xb8>
 80193cc:	f894 3089 	ldrb.w	r3, [r4, #137]	@ 0x89
 80193d0:	095b      	lsrs	r3, r3, #5
 80193d2:	2b04      	cmp	r3, #4
 80193d4:	d852      	bhi.n	801947c <Argus_Dev_Init+0x268>
 80193d6:	a201      	add	r2, pc, #4	@ (adr r2, 80193dc <Argus_Dev_Init+0x1c8>)
 80193d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80193dc:	0801941b 	.word	0x0801941b
 80193e0:	08019291 	.word	0x08019291
 80193e4:	08019415 	.word	0x08019415
 80193e8:	0801940f 	.word	0x0801940f
 80193ec:	08019409 	.word	0x08019409
 80193f0:	3b43      	subs	r3, #67	@ 0x43
 80193f2:	2b04      	cmp	r3, #4
 80193f4:	f63f af55 	bhi.w	80192a2 <Argus_Dev_Init+0x8e>
 80193f8:	4a24      	ldr	r2, [pc, #144]	@ (801948c <Argus_Dev_Init+0x278>)
 80193fa:	6863      	ldr	r3, [r4, #4]
 80193fc:	4293      	cmp	r3, r2
 80193fe:	bf8c      	ite	hi
 8019400:	2305      	movhi	r3, #5
 8019402:	2303      	movls	r3, #3
 8019404:	7223      	strb	r3, [r4, #8]
 8019406:	e74c      	b.n	80192a2 <Argus_Dev_Init+0x8e>
 8019408:	2305      	movs	r3, #5
 801940a:	7223      	strb	r3, [r4, #8]
 801940c:	e749      	b.n	80192a2 <Argus_Dev_Init+0x8e>
 801940e:	2304      	movs	r3, #4
 8019410:	7223      	strb	r3, [r4, #8]
 8019412:	e746      	b.n	80192a2 <Argus_Dev_Init+0x8e>
 8019414:	2303      	movs	r3, #3
 8019416:	7223      	strb	r3, [r4, #8]
 8019418:	e743      	b.n	80192a2 <Argus_Dev_Init+0x8e>
 801941a:	2301      	movs	r3, #1
 801941c:	7223      	strb	r3, [r4, #8]
 801941e:	e740      	b.n	80192a2 <Argus_Dev_Init+0x8e>
 8019420:	2300      	movs	r3, #0
 8019422:	f64c 7210 	movw	r2, #53008	@ 0xcf10
 8019426:	f8a4 2088 	strh.w	r2, [r4, #136]	@ 0x88
 801942a:	4631      	mov	r1, r6
 801942c:	e9cd 3300 	strd	r3, r3, [sp]
 8019430:	4632      	mov	r2, r6
 8019432:	2302      	movs	r3, #2
 8019434:	4640      	mov	r0, r8
 8019436:	f008 ff49 	bl	80222cc <ADS_Transfer>
 801943a:	2800      	cmp	r0, #0
 801943c:	f6ff af43 	blt.w	80192c6 <Argus_Dev_Init+0xb2>
 8019440:	2164      	movs	r1, #100	@ 0x64
 8019442:	4640      	mov	r0, r8
 8019444:	f008 fe26 	bl	8022094 <ADS_AwaitIdle>
 8019448:	2800      	cmp	r0, #0
 801944a:	f6ff af3c 	blt.w	80192c6 <Argus_Dev_Init+0xb2>
 801944e:	f894 3089 	ldrb.w	r3, [r4, #137]	@ 0x89
 8019452:	07da      	lsls	r2, r3, #31
 8019454:	bf48      	it	mi
 8019456:	f023 0310 	bicmi.w	r3, r3, #16
 801945a:	3bcf      	subs	r3, #207	@ 0xcf
 801945c:	bf18      	it	ne
 801945e:	2301      	movne	r3, #1
 8019460:	2b00      	cmp	r3, #0
 8019462:	d0b0      	beq.n	80193c6 <Argus_Dev_Init+0x1b2>
 8019464:	480a      	ldr	r0, [pc, #40]	@ (8019490 <Argus_Dev_Init+0x27c>)
 8019466:	f7f4 fd53 	bl	800df10 <print>
 801946a:	f06f 0064 	mvn.w	r0, #100	@ 0x64
 801946e:	e72a      	b.n	80192c6 <Argus_Dev_Init+0xb2>
 8019470:	4808      	ldr	r0, [pc, #32]	@ (8019494 <Argus_Dev_Init+0x280>)
 8019472:	f7f4 fd4d 	bl	800df10 <print>
 8019476:	f06f 0071 	mvn.w	r0, #113	@ 0x71
 801947a:	e724      	b.n	80192c6 <Argus_Dev_Init+0xb2>
 801947c:	2300      	movs	r3, #0
 801947e:	7223      	strb	r3, [r4, #8]
 8019480:	e70f      	b.n	80192a2 <Argus_Dev_Init+0x8e>
 8019482:	bf00      	nop
 8019484:	0003dffe 	.word	0x0003dffe
 8019488:	08027b40 	.word	0x08027b40
 801948c:	000493e0 	.word	0x000493e0
 8019490:	08029330 	.word	0x08029330
 8019494:	080292f0 	.word	0x080292f0

08019498 <Argus_Dev_AwaitStatus>:
 8019498:	6803      	ldr	r3, [r0, #0]
 801949a:	428b      	cmp	r3, r1
 801949c:	f000 809b 	beq.w	80195d6 <Argus_Dev_AwaitStatus+0x13e>
 80194a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194a4:	f8d0 311c 	ldr.w	r3, [r0, #284]	@ 0x11c
 80194a8:	4e4c      	ldr	r6, [pc, #304]	@ (80195dc <Argus_Dev_AwaitStatus+0x144>)
 80194aa:	681b      	ldr	r3, [r3, #0]
 80194ac:	f8df 9134 	ldr.w	r9, [pc, #308]	@ 80195e4 <Argus_Dev_AwaitStatus+0x14c>
 80194b0:	ea4f 2a53 	mov.w	sl, r3, lsr #9
 80194b4:	b085      	sub	sp, #20
 80194b6:	f50a 7a96 	add.w	sl, sl, #300	@ 0x12c
 80194ba:	4604      	mov	r4, r0
 80194bc:	460d      	mov	r5, r1
 80194be:	4668      	mov	r0, sp
 80194c0:	a901      	add	r1, sp, #4
 80194c2:	fba6 260a 	umull	r2, r6, r6, sl
 80194c6:	f7f4 fc4b 	bl	800dd60 <Timer_GetCounterValue>
 80194ca:	09b6      	lsrs	r6, r6, #6
 80194cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80194d0:	fb03 a816 	mls	r8, r3, r6, sl
 80194d4:	fb03 f808 	mul.w	r8, r3, r8
 80194d8:	f504 7790 	add.w	r7, r4, #288	@ 0x120
 80194dc:	4638      	mov	r0, r7
 80194de:	f008 fd6f 	bl	8021fc0 <ADS_CheckTimeout>
 80194e2:	2800      	cmp	r0, #0
 80194e4:	db39      	blt.n	801955a <Argus_Dev_AwaitStatus+0xc2>
 80194e6:	6823      	ldr	r3, [r4, #0]
 80194e8:	2b64      	cmp	r3, #100	@ 0x64
 80194ea:	d007      	beq.n	80194fc <Argus_Dev_AwaitStatus+0x64>
 80194ec:	dc38      	bgt.n	8019560 <Argus_Dev_AwaitStatus+0xc8>
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	d13c      	bne.n	801956c <Argus_Dev_AwaitStatus+0xd4>
 80194f2:	4638      	mov	r0, r7
 80194f4:	f008 fd54 	bl	8021fa0 <ADS_GetStatus>
 80194f8:	2800      	cmp	r0, #0
 80194fa:	db2e      	blt.n	801955a <Argus_Dev_AwaitStatus+0xc2>
 80194fc:	6823      	ldr	r3, [r4, #0]
 80194fe:	42ab      	cmp	r3, r5
 8019500:	d03c      	beq.n	801957c <Argus_Dev_AwaitStatus+0xe4>
 8019502:	a903      	add	r1, sp, #12
 8019504:	a802      	add	r0, sp, #8
 8019506:	f7f4 fc2b 	bl	800dd60 <Timer_GetCounterValue>
 801950a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801950e:	eb08 0302 	add.w	r3, r8, r2
 8019512:	454b      	cmp	r3, r9
 8019514:	f8dd c008 	ldr.w	ip, [sp, #8]
 8019518:	f8dd e00c 	ldr.w	lr, [sp, #12]
 801951c:	eb06 0001 	add.w	r0, r6, r1
 8019520:	d904      	bls.n	801952c <Argus_Dev_AwaitStatus+0x94>
 8019522:	f5a3 2374 	sub.w	r3, r3, #999424	@ 0xf4000
 8019526:	3001      	adds	r0, #1
 8019528:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 801952c:	4281      	cmp	r1, r0
 801952e:	d030      	beq.n	8019592 <Argus_Dev_AwaitStatus+0xfa>
 8019530:	bf34      	ite	cc
 8019532:	f04f 0b01 	movcc.w	fp, #1
 8019536:	f04f 0b00 	movcs.w	fp, #0
 801953a:	f1bb 0f00 	cmp.w	fp, #0
 801953e:	d021      	beq.n	8019584 <Argus_Dev_AwaitStatus+0xec>
 8019540:	4561      	cmp	r1, ip
 8019542:	d035      	beq.n	80195b0 <Argus_Dev_AwaitStatus+0x118>
 8019544:	bf34      	ite	cc
 8019546:	2201      	movcc	r2, #1
 8019548:	2200      	movcs	r2, #0
 801954a:	bb4a      	cbnz	r2, 80195a0 <Argus_Dev_AwaitStatus+0x108>
 801954c:	4824      	ldr	r0, [pc, #144]	@ (80195e0 <Argus_Dev_AwaitStatus+0x148>)
 801954e:	4652      	mov	r2, sl
 8019550:	4629      	mov	r1, r5
 8019552:	f7f4 fcdd 	bl	800df10 <print>
 8019556:	f06f 0005 	mvn.w	r0, #5
 801955a:	b005      	add	sp, #20
 801955c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019560:	2bc0      	cmp	r3, #192	@ 0xc0
 8019562:	dc05      	bgt.n	8019570 <Argus_Dev_AwaitStatus+0xd8>
 8019564:	2bbe      	cmp	r3, #190	@ 0xbe
 8019566:	dcc9      	bgt.n	80194fc <Argus_Dev_AwaitStatus+0x64>
 8019568:	2b67      	cmp	r3, #103	@ 0x67
 801956a:	d0c7      	beq.n	80194fc <Argus_Dev_AwaitStatus+0x64>
 801956c:	6820      	ldr	r0, [r4, #0]
 801956e:	e7c3      	b.n	80194f8 <Argus_Dev_AwaitStatus+0x60>
 8019570:	3bc3      	subs	r3, #195	@ 0xc3
 8019572:	2b01      	cmp	r3, #1
 8019574:	d8fa      	bhi.n	801956c <Argus_Dev_AwaitStatus+0xd4>
 8019576:	6823      	ldr	r3, [r4, #0]
 8019578:	42ab      	cmp	r3, r5
 801957a:	d1c2      	bne.n	8019502 <Argus_Dev_AwaitStatus+0x6a>
 801957c:	2000      	movs	r0, #0
 801957e:	b005      	add	sp, #20
 8019580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019584:	4561      	cmp	r1, ip
 8019586:	d018      	beq.n	80195ba <Argus_Dev_AwaitStatus+0x122>
 8019588:	d3a8      	bcc.n	80194dc <Argus_Dev_AwaitStatus+0x44>
 801958a:	4584      	cmp	ip, r0
 801958c:	d019      	beq.n	80195c2 <Argus_Dev_AwaitStatus+0x12a>
 801958e:	d9a5      	bls.n	80194dc <Argus_Dev_AwaitStatus+0x44>
 8019590:	e7dc      	b.n	801954c <Argus_Dev_AwaitStatus+0xb4>
 8019592:	429a      	cmp	r2, r3
 8019594:	bf8c      	ite	hi
 8019596:	f04f 0b00 	movhi.w	fp, #0
 801959a:	f04f 0b01 	movls.w	fp, #1
 801959e:	e7cc      	b.n	801953a <Argus_Dev_AwaitStatus+0xa2>
 80195a0:	4584      	cmp	ip, r0
 80195a2:	d011      	beq.n	80195c8 <Argus_Dev_AwaitStatus+0x130>
 80195a4:	bf8c      	ite	hi
 80195a6:	2301      	movhi	r3, #1
 80195a8:	2300      	movls	r3, #0
 80195aa:	2b00      	cmp	r3, #0
 80195ac:	d096      	beq.n	80194dc <Argus_Dev_AwaitStatus+0x44>
 80195ae:	e7cd      	b.n	801954c <Argus_Dev_AwaitStatus+0xb4>
 80195b0:	4596      	cmp	lr, r2
 80195b2:	bf34      	ite	cc
 80195b4:	2200      	movcc	r2, #0
 80195b6:	2201      	movcs	r2, #1
 80195b8:	e7c7      	b.n	801954a <Argus_Dev_AwaitStatus+0xb2>
 80195ba:	4596      	cmp	lr, r2
 80195bc:	d28e      	bcs.n	80194dc <Argus_Dev_AwaitStatus+0x44>
 80195be:	4584      	cmp	ip, r0
 80195c0:	d1e5      	bne.n	801958e <Argus_Dev_AwaitStatus+0xf6>
 80195c2:	459e      	cmp	lr, r3
 80195c4:	d2c2      	bcs.n	801954c <Argus_Dev_AwaitStatus+0xb4>
 80195c6:	e789      	b.n	80194dc <Argus_Dev_AwaitStatus+0x44>
 80195c8:	459e      	cmp	lr, r3
 80195ca:	bf34      	ite	cc
 80195cc:	2300      	movcc	r3, #0
 80195ce:	2301      	movcs	r3, #1
 80195d0:	2b00      	cmp	r3, #0
 80195d2:	d083      	beq.n	80194dc <Argus_Dev_AwaitStatus+0x44>
 80195d4:	e7ba      	b.n	801954c <Argus_Dev_AwaitStatus+0xb4>
 80195d6:	2000      	movs	r0, #0
 80195d8:	4770      	bx	lr
 80195da:	bf00      	nop
 80195dc:	10624dd3 	.word	0x10624dd3
 80195e0:	08029364 	.word	0x08029364
 80195e4:	000f423f 	.word	0x000f423f

080195e8 <Argus_Dev_SetStatusSync>:
 80195e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195ec:	f8d0 311c 	ldr.w	r3, [r0, #284]	@ 0x11c
 80195f0:	4e48      	ldr	r6, [pc, #288]	@ (8019714 <Argus_Dev_SetStatusSync+0x12c>)
 80195f2:	681b      	ldr	r3, [r3, #0]
 80195f4:	f8df 9124 	ldr.w	r9, [pc, #292]	@ 801971c <Argus_Dev_SetStatusSync+0x134>
 80195f8:	ea4f 2a53 	mov.w	sl, r3, lsr #9
 80195fc:	b085      	sub	sp, #20
 80195fe:	f50a 7a96 	add.w	sl, sl, #300	@ 0x12c
 8019602:	4605      	mov	r5, r0
 8019604:	468b      	mov	fp, r1
 8019606:	4668      	mov	r0, sp
 8019608:	a901      	add	r1, sp, #4
 801960a:	fba6 260a 	umull	r2, r6, r6, sl
 801960e:	f7f4 fba7 	bl	800dd60 <Timer_GetCounterValue>
 8019612:	09b6      	lsrs	r6, r6, #6
 8019614:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8019618:	fb03 a716 	mls	r7, r3, r6, sl
 801961c:	fb03 f707 	mul.w	r7, r3, r7
 8019620:	f505 7890 	add.w	r8, r5, #288	@ 0x120
 8019624:	f7f3 ffee 	bl	800d604 <IRQ_LOCK>
 8019628:	682c      	ldr	r4, [r5, #0]
 801962a:	2c00      	cmp	r4, #0
 801962c:	d041      	beq.n	80196b2 <Argus_Dev_SetStatusSync+0xca>
 801962e:	682b      	ldr	r3, [r5, #0]
 8019630:	2b00      	cmp	r3, #0
 8019632:	db68      	blt.n	8019706 <Argus_Dev_SetStatusSync+0x11e>
 8019634:	f7f3 ffc4 	bl	800d5c0 <IRQ_UNLOCK>
 8019638:	4640      	mov	r0, r8
 801963a:	f008 fcc1 	bl	8021fc0 <ADS_CheckTimeout>
 801963e:	1e04      	subs	r4, r0, #0
 8019640:	db28      	blt.n	8019694 <Argus_Dev_SetStatusSync+0xac>
 8019642:	a903      	add	r1, sp, #12
 8019644:	a802      	add	r0, sp, #8
 8019646:	f7f4 fb8b 	bl	800dd60 <Timer_GetCounterValue>
 801964a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801964e:	18bb      	adds	r3, r7, r2
 8019650:	454b      	cmp	r3, r9
 8019652:	e9dd 4c02 	ldrd	r4, ip, [sp, #8]
 8019656:	eb06 0001 	add.w	r0, r6, r1
 801965a:	d904      	bls.n	8019666 <Argus_Dev_SetStatusSync+0x7e>
 801965c:	f5a3 2374 	sub.w	r3, r3, #999424	@ 0xf4000
 8019660:	3001      	adds	r0, #1
 8019662:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8019666:	4281      	cmp	r1, r0
 8019668:	d02b      	beq.n	80196c2 <Argus_Dev_SetStatusSync+0xda>
 801966a:	bf34      	ite	cc
 801966c:	f04f 0e01 	movcc.w	lr, #1
 8019670:	f04f 0e00 	movcs.w	lr, #0
 8019674:	f1be 0f00 	cmp.w	lr, #0
 8019678:	d010      	beq.n	801969c <Argus_Dev_SetStatusSync+0xb4>
 801967a:	42a1      	cmp	r1, r4
 801967c:	d030      	beq.n	80196e0 <Argus_Dev_SetStatusSync+0xf8>
 801967e:	bf34      	ite	cc
 8019680:	2201      	movcc	r2, #1
 8019682:	2200      	movcs	r2, #0
 8019684:	bb22      	cbnz	r2, 80196d0 <Argus_Dev_SetStatusSync+0xe8>
 8019686:	4824      	ldr	r0, [pc, #144]	@ (8019718 <Argus_Dev_SetStatusSync+0x130>)
 8019688:	4652      	mov	r2, sl
 801968a:	4659      	mov	r1, fp
 801968c:	f7f4 fc40 	bl	800df10 <print>
 8019690:	f06f 0405 	mvn.w	r4, #5
 8019694:	4620      	mov	r0, r4
 8019696:	b005      	add	sp, #20
 8019698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801969c:	42a1      	cmp	r1, r4
 801969e:	d024      	beq.n	80196ea <Argus_Dev_SetStatusSync+0x102>
 80196a0:	d3c0      	bcc.n	8019624 <Argus_Dev_SetStatusSync+0x3c>
 80196a2:	42a0      	cmp	r0, r4
 80196a4:	d025      	beq.n	80196f2 <Argus_Dev_SetStatusSync+0x10a>
 80196a6:	d3ee      	bcc.n	8019686 <Argus_Dev_SetStatusSync+0x9e>
 80196a8:	f7f3 ffac 	bl	800d604 <IRQ_LOCK>
 80196ac:	682c      	ldr	r4, [r5, #0]
 80196ae:	2c00      	cmp	r4, #0
 80196b0:	d1bd      	bne.n	801962e <Argus_Dev_SetStatusSync+0x46>
 80196b2:	f8c5 b000 	str.w	fp, [r5]
 80196b6:	f7f3 ff83 	bl	800d5c0 <IRQ_UNLOCK>
 80196ba:	4620      	mov	r0, r4
 80196bc:	b005      	add	sp, #20
 80196be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196c2:	429a      	cmp	r2, r3
 80196c4:	bf8c      	ite	hi
 80196c6:	f04f 0e00 	movhi.w	lr, #0
 80196ca:	f04f 0e01 	movls.w	lr, #1
 80196ce:	e7d1      	b.n	8019674 <Argus_Dev_SetStatusSync+0x8c>
 80196d0:	42a0      	cmp	r0, r4
 80196d2:	d011      	beq.n	80196f8 <Argus_Dev_SetStatusSync+0x110>
 80196d4:	bf34      	ite	cc
 80196d6:	2301      	movcc	r3, #1
 80196d8:	2300      	movcs	r3, #0
 80196da:	2b00      	cmp	r3, #0
 80196dc:	d0a2      	beq.n	8019624 <Argus_Dev_SetStatusSync+0x3c>
 80196de:	e7d2      	b.n	8019686 <Argus_Dev_SetStatusSync+0x9e>
 80196e0:	4562      	cmp	r2, ip
 80196e2:	bf8c      	ite	hi
 80196e4:	2200      	movhi	r2, #0
 80196e6:	2201      	movls	r2, #1
 80196e8:	e7cc      	b.n	8019684 <Argus_Dev_SetStatusSync+0x9c>
 80196ea:	4562      	cmp	r2, ip
 80196ec:	d99a      	bls.n	8019624 <Argus_Dev_SetStatusSync+0x3c>
 80196ee:	42a0      	cmp	r0, r4
 80196f0:	d1d9      	bne.n	80196a6 <Argus_Dev_SetStatusSync+0xbe>
 80196f2:	459c      	cmp	ip, r3
 80196f4:	d2c7      	bcs.n	8019686 <Argus_Dev_SetStatusSync+0x9e>
 80196f6:	e795      	b.n	8019624 <Argus_Dev_SetStatusSync+0x3c>
 80196f8:	459c      	cmp	ip, r3
 80196fa:	bf34      	ite	cc
 80196fc:	2300      	movcc	r3, #0
 80196fe:	2301      	movcs	r3, #1
 8019700:	2b00      	cmp	r3, #0
 8019702:	d08f      	beq.n	8019624 <Argus_Dev_SetStatusSync+0x3c>
 8019704:	e7bf      	b.n	8019686 <Argus_Dev_SetStatusSync+0x9e>
 8019706:	682c      	ldr	r4, [r5, #0]
 8019708:	f7f3 ff5a 	bl	800d5c0 <IRQ_UNLOCK>
 801970c:	4620      	mov	r0, r4
 801970e:	b005      	add	sp, #20
 8019710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019714:	10624dd3 	.word	0x10624dd3
 8019718:	080293bc 	.word	0x080293bc
 801971c:	000f423f 	.word	0x000f423f

08019720 <Argus_Dev_SetStatus>:
 8019720:	b570      	push	{r4, r5, r6, lr}
 8019722:	4604      	mov	r4, r0
 8019724:	460e      	mov	r6, r1
 8019726:	f7f3 ff6d 	bl	800d604 <IRQ_LOCK>
 801972a:	6825      	ldr	r5, [r4, #0]
 801972c:	b925      	cbnz	r5, 8019738 <Argus_Dev_SetStatus+0x18>
 801972e:	6026      	str	r6, [r4, #0]
 8019730:	f7f3 ff46 	bl	800d5c0 <IRQ_UNLOCK>
 8019734:	4628      	mov	r0, r5
 8019736:	bd70      	pop	{r4, r5, r6, pc}
 8019738:	6823      	ldr	r3, [r4, #0]
 801973a:	3371      	adds	r3, #113	@ 0x71
 801973c:	d007      	beq.n	801974e <Argus_Dev_SetStatus+0x2e>
 801973e:	6823      	ldr	r3, [r4, #0]
 8019740:	3372      	adds	r3, #114	@ 0x72
 8019742:	d00a      	beq.n	801975a <Argus_Dev_SetStatus+0x3a>
 8019744:	6825      	ldr	r5, [r4, #0]
 8019746:	f7f3 ff3b 	bl	800d5c0 <IRQ_UNLOCK>
 801974a:	4628      	mov	r0, r5
 801974c:	bd70      	pop	{r4, r5, r6, pc}
 801974e:	f504 70b4 	add.w	r0, r4, #360	@ 0x168
 8019752:	f7fd f915 	bl	8016980 <Argus_Dca_RecoverLaserFailure>
 8019756:	2800      	cmp	r0, #0
 8019758:	d0f1      	beq.n	801973e <Argus_Dev_SetStatus+0x1e>
 801975a:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 801975c:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 8019760:	4a06      	ldr	r2, [pc, #24]	@ (801977c <Argus_Dev_SetStatus+0x5c>)
 8019762:	f043 0302 	orr.w	r3, r3, #2
 8019766:	430a      	orrs	r2, r1
 8019768:	67a2      	str	r2, [r4, #120]	@ 0x78
 801976a:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 801976e:	6026      	str	r6, [r4, #0]
 8019770:	2500      	movs	r5, #0
 8019772:	f7f3 ff25 	bl	800d5c0 <IRQ_UNLOCK>
 8019776:	4628      	mov	r0, r5
 8019778:	bd70      	pop	{r4, r5, r6, pc}
 801977a:	bf00      	nop
 801977c:	0003dffe 	.word	0x0003dffe

08019780 <Argus_Dev_SetError>:
 8019780:	6803      	ldr	r3, [r0, #0]
 8019782:	3371      	adds	r3, #113	@ 0x71
 8019784:	bf18      	it	ne
 8019786:	6001      	strne	r1, [r0, #0]
 8019788:	4770      	bx	lr
 801978a:	bf00      	nop

0801978c <Argus_Dev_ClearStatus>:
 801978c:	b538      	push	{r3, r4, r5, lr}
 801978e:	4604      	mov	r4, r0
 8019790:	460d      	mov	r5, r1
 8019792:	f7f3 ff37 	bl	800d604 <IRQ_LOCK>
 8019796:	6823      	ldr	r3, [r4, #0]
 8019798:	42ab      	cmp	r3, r5
 801979a:	d105      	bne.n	80197a8 <Argus_Dev_ClearStatus+0x1c>
 801979c:	2500      	movs	r5, #0
 801979e:	6025      	str	r5, [r4, #0]
 80197a0:	f7f3 ff0e 	bl	800d5c0 <IRQ_UNLOCK>
 80197a4:	4628      	mov	r0, r5
 80197a6:	bd38      	pop	{r3, r4, r5, pc}
 80197a8:	f7f3 ff0a 	bl	800d5c0 <IRQ_UNLOCK>
 80197ac:	f04f 30ff 	mov.w	r0, #4294967295
 80197b0:	bd38      	pop	{r3, r4, r5, pc}
 80197b2:	bf00      	nop

080197b4 <Argus_Dev_GetStatus>:
 80197b4:	b538      	push	{r3, r4, r5, lr}
 80197b6:	f500 7590 	add.w	r5, r0, #288	@ 0x120
 80197ba:	4604      	mov	r4, r0
 80197bc:	4628      	mov	r0, r5
 80197be:	f008 fbff 	bl	8021fc0 <ADS_CheckTimeout>
 80197c2:	2800      	cmp	r0, #0
 80197c4:	db10      	blt.n	80197e8 <Argus_Dev_GetStatus+0x34>
 80197c6:	6823      	ldr	r3, [r4, #0]
 80197c8:	2b64      	cmp	r3, #100	@ 0x64
 80197ca:	d011      	beq.n	80197f0 <Argus_Dev_GetStatus+0x3c>
 80197cc:	dc05      	bgt.n	80197da <Argus_Dev_GetStatus+0x26>
 80197ce:	b953      	cbnz	r3, 80197e6 <Argus_Dev_GetStatus+0x32>
 80197d0:	4628      	mov	r0, r5
 80197d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80197d6:	f008 bbe3 	b.w	8021fa0 <ADS_GetStatus>
 80197da:	2bc0      	cmp	r3, #192	@ 0xc0
 80197dc:	dc05      	bgt.n	80197ea <Argus_Dev_GetStatus+0x36>
 80197de:	2bbe      	cmp	r3, #190	@ 0xbe
 80197e0:	dc06      	bgt.n	80197f0 <Argus_Dev_GetStatus+0x3c>
 80197e2:	2b67      	cmp	r3, #103	@ 0x67
 80197e4:	d004      	beq.n	80197f0 <Argus_Dev_GetStatus+0x3c>
 80197e6:	6820      	ldr	r0, [r4, #0]
 80197e8:	bd38      	pop	{r3, r4, r5, pc}
 80197ea:	3bc3      	subs	r3, #195	@ 0xc3
 80197ec:	2b01      	cmp	r3, #1
 80197ee:	d8fa      	bhi.n	80197e6 <Argus_Dev_GetStatus+0x32>
 80197f0:	2002      	movs	r0, #2
 80197f2:	bd38      	pop	{r3, r4, r5, pc}

080197f4 <Argus_Dev_Abort>:
 80197f4:	f06f 0101 	mvn.w	r1, #1
 80197f8:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 80197fc:	f008 bbc8 	b.w	8021f90 <ADS_Abort>

08019800 <Argus_Dev_ReadData>:
 8019800:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 8019804:	f008 be48 	b.w	8022498 <ADS_ReadData>

08019808 <Argus_Dev_CheckCfg>:
 8019808:	b510      	push	{r4, lr}
 801980a:	7b41      	ldrb	r1, [r0, #13]
 801980c:	1e4b      	subs	r3, r1, #1
 801980e:	2b01      	cmp	r3, #1
 8019810:	f200 815e 	bhi.w	8019ad0 <Argus_Dev_CheckCfg+0x2c8>
 8019814:	6801      	ldr	r1, [r0, #0]
 8019816:	4bce      	ldr	r3, [pc, #824]	@ (8019b50 <Argus_Dev_CheckCfg+0x348>)
 8019818:	f1a1 02fa 	sub.w	r2, r1, #250	@ 0xfa
 801981c:	429a      	cmp	r2, r3
 801981e:	f200 815d 	bhi.w	8019adc <Argus_Dev_CheckCfg+0x2d4>
 8019822:	6901      	ldr	r1, [r0, #16]
 8019824:	4bcb      	ldr	r3, [pc, #812]	@ (8019b54 <Argus_Dev_CheckCfg+0x34c>)
 8019826:	f1a1 02fa 	sub.w	r2, r1, #250	@ 0xfa
 801982a:	429a      	cmp	r2, r3
 801982c:	f200 815e 	bhi.w	8019aec <Argus_Dev_CheckCfg+0x2e4>
 8019830:	7a81      	ldrb	r1, [r0, #10]
 8019832:	1e8b      	subs	r3, r1, #2
 8019834:	2b7e      	cmp	r3, #126	@ 0x7e
 8019836:	f200 8173 	bhi.w	8019b20 <Argus_Dev_CheckCfg+0x318>
 801983a:	7a01      	ldrb	r1, [r0, #8]
 801983c:	2980      	cmp	r1, #128	@ 0x80
 801983e:	f200 81b5 	bhi.w	8019bac <Argus_Dev_CheckCfg+0x3a4>
 8019842:	6844      	ldr	r4, [r0, #4]
 8019844:	4bc4      	ldr	r3, [pc, #784]	@ (8019b58 <Argus_Dev_CheckCfg+0x350>)
 8019846:	4ac5      	ldr	r2, [pc, #788]	@ (8019b5c <Argus_Dev_CheckCfg+0x354>)
 8019848:	4423      	add	r3, r4
 801984a:	4293      	cmp	r3, r2
 801984c:	f200 8176 	bhi.w	8019b3c <Argus_Dev_CheckCfg+0x334>
 8019850:	f890 3071 	ldrb.w	r3, [r0, #113]	@ 0x71
 8019854:	065a      	lsls	r2, r3, #25
 8019856:	f100 816b 	bmi.w	8019b30 <Argus_Dev_CheckCfg+0x328>
 801985a:	f990 2080 	ldrsb.w	r2, [r0, #128]	@ 0x80
 801985e:	2a00      	cmp	r2, #0
 8019860:	f2c0 81e8 	blt.w	8019c34 <Argus_Dev_CheckCfg+0x42c>
 8019864:	069b      	lsls	r3, r3, #26
 8019866:	f140 8155 	bpl.w	8019b14 <Argus_Dev_CheckCfg+0x30c>
 801986a:	f890 308e 	ldrb.w	r3, [r0, #142]	@ 0x8e
 801986e:	3b01      	subs	r3, #1
 8019870:	2b02      	cmp	r3, #2
 8019872:	f200 8149 	bhi.w	8019b08 <Argus_Dev_CheckCfg+0x300>
 8019876:	f8b0 305f 	ldrh.w	r3, [r0, #95]	@ 0x5f
 801987a:	ba5b      	rev16	r3, r3
 801987c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8019880:	2b00      	cmp	r3, #0
 8019882:	f000 813b 	beq.w	8019afc <Argus_Dev_CheckCfg+0x2f4>
 8019886:	f890 3081 	ldrb.w	r3, [r0, #129]	@ 0x81
 801988a:	f3c3 0343 	ubfx	r3, r3, #1, #4
 801988e:	2b03      	cmp	r3, #3
 8019890:	f040 8117 	bne.w	8019ac2 <Argus_Dev_CheckCfg+0x2ba>
 8019894:	f8b0 208b 	ldrh.w	r2, [r0, #139]	@ 0x8b
 8019898:	f890 c087 	ldrb.w	ip, [r0, #135]	@ 0x87
 801989c:	ba52      	rev16	r2, r2
 801989e:	f3c2 034e 	ubfx	r3, r2, #1, #15
 80198a2:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 80198a6:	b292      	uxth	r2, r2
 80198a8:	1ad2      	subs	r2, r2, r3
 80198aa:	0891      	lsrs	r1, r2, #2
 80198ac:	f890 3088 	ldrb.w	r3, [r0, #136]	@ 0x88
 80198b0:	f001 3133 	and.w	r1, r1, #858993459	@ 0x33333333
 80198b4:	f002 3233 	and.w	r2, r2, #858993459	@ 0x33333333
 80198b8:	440a      	add	r2, r1
 80198ba:	021b      	lsls	r3, r3, #8
 80198bc:	f890 1089 	ldrb.w	r1, [r0, #137]	@ 0x89
 80198c0:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80198c4:	430b      	orrs	r3, r1
 80198c6:	0859      	lsrs	r1, r3, #1
 80198c8:	f001 3155 	and.w	r1, r1, #1431655765	@ 0x55555555
 80198cc:	1a5b      	subs	r3, r3, r1
 80198ce:	f003 3133 	and.w	r1, r3, #858993459	@ 0x33333333
 80198d2:	089b      	lsrs	r3, r3, #2
 80198d4:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 80198d8:	4419      	add	r1, r3
 80198da:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 80198de:	f890 c083 	ldrb.w	ip, [r0, #131]	@ 0x83
 80198e2:	021b      	lsls	r3, r3, #8
 80198e4:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80198e8:	f890 c085 	ldrb.w	ip, [r0, #133]	@ 0x85
 80198ec:	ea43 030c 	orr.w	r3, r3, ip
 80198f0:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80198f4:	f00c 3c55 	and.w	ip, ip, #1431655765	@ 0x55555555
 80198f8:	eba3 030c 	sub.w	r3, r3, ip
 80198fc:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8019900:	f00c 3c33 	and.w	ip, ip, #858993459	@ 0x33333333
 8019904:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8019908:	eb01 1111 	add.w	r1, r1, r1, lsr #4
 801990c:	4463      	add	r3, ip
 801990e:	f001 310f 	and.w	r1, r1, #252645135	@ 0xf0f0f0f
 8019912:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 8019916:	eb02 1212 	add.w	r2, r2, r2, lsr #4
 801991a:	eb01 2101 	add.w	r1, r1, r1, lsl #8
 801991e:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8019922:	f002 320f 	and.w	r2, r2, #252645135	@ 0xf0f0f0f
 8019926:	eb01 4101 	add.w	r1, r1, r1, lsl #16
 801992a:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 801992e:	eb02 2202 	add.w	r2, r2, r2, lsl #8
 8019932:	0e09      	lsrs	r1, r1, #24
 8019934:	eb03 4303 	add.w	r3, r3, r3, lsl #16
 8019938:	eb02 4202 	add.w	r2, r2, r2, lsl #16
 801993c:	eb01 6313 	add.w	r3, r1, r3, lsr #24
 8019940:	eb03 6212 	add.w	r2, r3, r2, lsr #24
 8019944:	0092      	lsls	r2, r2, #2
 8019946:	2a84      	cmp	r2, #132	@ 0x84
 8019948:	f200 814a 	bhi.w	8019be0 <Argus_Dev_CheckCfg+0x3d8>
 801994c:	f8d0 1094 	ldr.w	r1, [r0, #148]	@ 0x94
 8019950:	2963      	cmp	r1, #99	@ 0x63
 8019952:	f240 813f 	bls.w	8019bd4 <Argus_Dev_CheckCfg+0x3cc>
 8019956:	f8d0 1090 	ldr.w	r1, [r0, #144]	@ 0x90
 801995a:	2900      	cmp	r1, #0
 801995c:	f000 8158 	beq.w	8019c10 <Argus_Dev_CheckCfg+0x408>
 8019960:	f8b0 1098 	ldrh.w	r1, [r0, #152]	@ 0x98
 8019964:	2900      	cmp	r1, #0
 8019966:	f000 814d 	beq.w	8019c04 <Argus_Dev_CheckCfg+0x3fc>
 801996a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 801996e:	2b00      	cmp	r3, #0
 8019970:	f000 812a 	beq.w	8019bc8 <Argus_Dev_CheckCfg+0x3c0>
 8019974:	f890 109d 	ldrb.w	r1, [r0, #157]	@ 0x9d
 8019978:	2907      	cmp	r1, #7
 801997a:	f200 811f 	bhi.w	8019bbc <Argus_Dev_CheckCfg+0x3b4>
 801997e:	f890 109e 	ldrb.w	r1, [r0, #158]	@ 0x9e
 8019982:	2907      	cmp	r1, #7
 8019984:	f200 8138 	bhi.w	8019bf8 <Argus_Dev_CheckCfg+0x3f0>
 8019988:	f890 109f 	ldrb.w	r1, [r0, #159]	@ 0x9f
 801998c:	2903      	cmp	r1, #3
 801998e:	f200 812d 	bhi.w	8019bec <Argus_Dev_CheckCfg+0x3e4>
 8019992:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	@ 0xa0
 8019996:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801999a:	4299      	cmp	r1, r3
 801999c:	f200 8144 	bhi.w	8019c28 <Argus_Dev_CheckCfg+0x420>
 80199a0:	f890 10a8 	ldrb.w	r1, [r0, #168]	@ 0xa8
 80199a4:	2902      	cmp	r1, #2
 80199a6:	f200 8139 	bhi.w	8019c1c <Argus_Dev_CheckCfg+0x414>
 80199aa:	f3c4 1380 	ubfx	r3, r4, #6, #1
 80199ae:	f8d0 20b8 	ldr.w	r2, [r0, #184]	@ 0xb8
 80199b2:	eb03 13d4 	add.w	r3, r3, r4, lsr #7
 80199b6:	f004 0101 	and.w	r1, r4, #1
 80199ba:	429a      	cmp	r2, r3
 80199bc:	eb01 0454 	add.w	r4, r1, r4, lsr #1
 80199c0:	d360      	bcc.n	8019a84 <Argus_Dev_CheckCfg+0x27c>
 80199c2:	42a2      	cmp	r2, r4
 80199c4:	d85e      	bhi.n	8019a84 <Argus_Dev_CheckCfg+0x27c>
 80199c6:	f8b0 20b0 	ldrh.w	r2, [r0, #176]	@ 0xb0
 80199ca:	f102 3cff 	add.w	ip, r2, #4294967295
 80199ce:	fa1f fc8c 	uxth.w	ip, ip
 80199d2:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80199d6:	458c      	cmp	ip, r1
 80199d8:	d85d      	bhi.n	8019a96 <Argus_Dev_CheckCfg+0x28e>
 80199da:	f8b0 20b4 	ldrh.w	r2, [r0, #180]	@ 0xb4
 80199de:	f102 3cff 	add.w	ip, r2, #4294967295
 80199e2:	fa1f fc8c 	uxth.w	ip, ip
 80199e6:	458c      	cmp	ip, r1
 80199e8:	d85e      	bhi.n	8019aa8 <Argus_Dev_CheckCfg+0x2a0>
 80199ea:	f8d0 20bc 	ldr.w	r2, [r0, #188]	@ 0xbc
 80199ee:	429a      	cmp	r2, r3
 80199f0:	d34f      	bcc.n	8019a92 <Argus_Dev_CheckCfg+0x28a>
 80199f2:	42a2      	cmp	r2, r4
 80199f4:	d84d      	bhi.n	8019a92 <Argus_Dev_CheckCfg+0x28a>
 80199f6:	f8b0 20b2 	ldrh.w	r2, [r0, #178]	@ 0xb2
 80199fa:	1e53      	subs	r3, r2, #1
 80199fc:	b29b      	uxth	r3, r3
 80199fe:	428b      	cmp	r3, r1
 8019a00:	d85b      	bhi.n	8019aba <Argus_Dev_CheckCfg+0x2b2>
 8019a02:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	@ 0xb6
 8019a06:	1e53      	subs	r3, r2, #1
 8019a08:	b29b      	uxth	r3, r3
 8019a0a:	428b      	cmp	r3, r1
 8019a0c:	d857      	bhi.n	8019abe <Argus_Dev_CheckCfg+0x2b6>
 8019a0e:	f890 30d4 	ldrb.w	r3, [r0, #212]	@ 0xd4
 8019a12:	2b02      	cmp	r3, #2
 8019a14:	d01c      	beq.n	8019a50 <Argus_Dev_CheckCfg+0x248>
 8019a16:	f890 30e0 	ldrb.w	r3, [r0, #224]	@ 0xe0
 8019a1a:	b1bb      	cbz	r3, 8019a4c <Argus_Dev_CheckCfg+0x244>
 8019a1c:	f8d0 30ec 	ldr.w	r3, [r0, #236]	@ 0xec
 8019a20:	2b00      	cmp	r3, #0
 8019a22:	f000 810d 	beq.w	8019c40 <Argus_Dev_CheckCfg+0x438>
 8019a26:	f990 30e2 	ldrsb.w	r3, [r0, #226]	@ 0xe2
 8019a2a:	2b00      	cmp	r3, #0
 8019a2c:	f2c0 8126 	blt.w	8019c7c <Argus_Dev_CheckCfg+0x474>
 8019a30:	f8b0 30e8 	ldrh.w	r3, [r0, #232]	@ 0xe8
 8019a34:	2b00      	cmp	r3, #0
 8019a36:	f000 8109 	beq.w	8019c4c <Argus_Dev_CheckCfg+0x444>
 8019a3a:	f8b0 20e6 	ldrh.w	r2, [r0, #230]	@ 0xe6
 8019a3e:	4293      	cmp	r3, r2
 8019a40:	f200 810a 	bhi.w	8019c58 <Argus_Dev_CheckCfg+0x450>
 8019a44:	f8b0 30e4 	ldrh.w	r3, [r0, #228]	@ 0xe4
 8019a48:	4293      	cmp	r3, r2
 8019a4a:	d315      	bcc.n	8019a78 <Argus_Dev_CheckCfg+0x270>
 8019a4c:	2000      	movs	r0, #0
 8019a4e:	bd10      	pop	{r4, pc}
 8019a50:	f8d0 30dc 	ldr.w	r3, [r0, #220]	@ 0xdc
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	f000 8105 	beq.w	8019c64 <Argus_Dev_CheckCfg+0x45c>
 8019a5a:	f8b0 30da 	ldrh.w	r3, [r0, #218]	@ 0xda
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	f000 8106 	beq.w	8019c70 <Argus_Dev_CheckCfg+0x468>
 8019a64:	f8b0 20d8 	ldrh.w	r2, [r0, #216]	@ 0xd8
 8019a68:	429a      	cmp	r2, r3
 8019a6a:	d2d4      	bcs.n	8019a16 <Argus_Dev_CheckCfg+0x20e>
 8019a6c:	483c      	ldr	r0, [pc, #240]	@ (8019b60 <Argus_Dev_CheckCfg+0x358>)
 8019a6e:	f7f4 fa4f 	bl	800df10 <print>
 8019a72:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019a76:	bd10      	pop	{r4, pc}
 8019a78:	483a      	ldr	r0, [pc, #232]	@ (8019b64 <Argus_Dev_CheckCfg+0x35c>)
 8019a7a:	f7f4 fa49 	bl	800df10 <print>
 8019a7e:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019a82:	bd10      	pop	{r4, pc}
 8019a84:	4938      	ldr	r1, [pc, #224]	@ (8019b68 <Argus_Dev_CheckCfg+0x360>)
 8019a86:	4839      	ldr	r0, [pc, #228]	@ (8019b6c <Argus_Dev_CheckCfg+0x364>)
 8019a88:	f7f4 fa42 	bl	800df10 <print>
 8019a8c:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019a90:	bd10      	pop	{r4, pc}
 8019a92:	4937      	ldr	r1, [pc, #220]	@ (8019b70 <Argus_Dev_CheckCfg+0x368>)
 8019a94:	e7f7      	b.n	8019a86 <Argus_Dev_CheckCfg+0x27e>
 8019a96:	4934      	ldr	r1, [pc, #208]	@ (8019b68 <Argus_Dev_CheckCfg+0x360>)
 8019a98:	4836      	ldr	r0, [pc, #216]	@ (8019b74 <Argus_Dev_CheckCfg+0x36c>)
 8019a9a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8019a9e:	f7f4 fa37 	bl	800df10 <print>
 8019aa2:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019aa6:	bd10      	pop	{r4, pc}
 8019aa8:	492f      	ldr	r1, [pc, #188]	@ (8019b68 <Argus_Dev_CheckCfg+0x360>)
 8019aaa:	4833      	ldr	r0, [pc, #204]	@ (8019b78 <Argus_Dev_CheckCfg+0x370>)
 8019aac:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8019ab0:	f7f4 fa2e 	bl	800df10 <print>
 8019ab4:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019ab8:	bd10      	pop	{r4, pc}
 8019aba:	492d      	ldr	r1, [pc, #180]	@ (8019b70 <Argus_Dev_CheckCfg+0x368>)
 8019abc:	e7ec      	b.n	8019a98 <Argus_Dev_CheckCfg+0x290>
 8019abe:	492c      	ldr	r1, [pc, #176]	@ (8019b70 <Argus_Dev_CheckCfg+0x368>)
 8019ac0:	e7f3      	b.n	8019aaa <Argus_Dev_CheckCfg+0x2a2>
 8019ac2:	2104      	movs	r1, #4
 8019ac4:	482d      	ldr	r0, [pc, #180]	@ (8019b7c <Argus_Dev_CheckCfg+0x374>)
 8019ac6:	f7f4 fa23 	bl	800df10 <print>
 8019aca:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019ace:	bd10      	pop	{r4, pc}
 8019ad0:	482b      	ldr	r0, [pc, #172]	@ (8019b80 <Argus_Dev_CheckCfg+0x378>)
 8019ad2:	f7f4 fa1d 	bl	800df10 <print>
 8019ad6:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019ada:	bd10      	pop	{r4, pc}
 8019adc:	33fa      	adds	r3, #250	@ 0xfa
 8019ade:	22fa      	movs	r2, #250	@ 0xfa
 8019ae0:	4828      	ldr	r0, [pc, #160]	@ (8019b84 <Argus_Dev_CheckCfg+0x37c>)
 8019ae2:	f7f4 fa15 	bl	800df10 <print>
 8019ae6:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019aea:	bd10      	pop	{r4, pc}
 8019aec:	33fa      	adds	r3, #250	@ 0xfa
 8019aee:	22fa      	movs	r2, #250	@ 0xfa
 8019af0:	4825      	ldr	r0, [pc, #148]	@ (8019b88 <Argus_Dev_CheckCfg+0x380>)
 8019af2:	f7f4 fa0d 	bl	800df10 <print>
 8019af6:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019afa:	bd10      	pop	{r4, pc}
 8019afc:	4823      	ldr	r0, [pc, #140]	@ (8019b8c <Argus_Dev_CheckCfg+0x384>)
 8019afe:	f7f4 fa07 	bl	800df10 <print>
 8019b02:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019b06:	bd10      	pop	{r4, pc}
 8019b08:	4821      	ldr	r0, [pc, #132]	@ (8019b90 <Argus_Dev_CheckCfg+0x388>)
 8019b0a:	f7f4 fa01 	bl	800df10 <print>
 8019b0e:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019b12:	bd10      	pop	{r4, pc}
 8019b14:	481f      	ldr	r0, [pc, #124]	@ (8019b94 <Argus_Dev_CheckCfg+0x38c>)
 8019b16:	f7f4 f9fb 	bl	800df10 <print>
 8019b1a:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019b1e:	bd10      	pop	{r4, pc}
 8019b20:	2380      	movs	r3, #128	@ 0x80
 8019b22:	2202      	movs	r2, #2
 8019b24:	481c      	ldr	r0, [pc, #112]	@ (8019b98 <Argus_Dev_CheckCfg+0x390>)
 8019b26:	f7f4 f9f3 	bl	800df10 <print>
 8019b2a:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019b2e:	bd10      	pop	{r4, pc}
 8019b30:	481a      	ldr	r0, [pc, #104]	@ (8019b9c <Argus_Dev_CheckCfg+0x394>)
 8019b32:	f7f4 f9ed 	bl	800df10 <print>
 8019b36:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019b3a:	bd10      	pop	{r4, pc}
 8019b3c:	4b18      	ldr	r3, [pc, #96]	@ (8019ba0 <Argus_Dev_CheckCfg+0x398>)
 8019b3e:	4a19      	ldr	r2, [pc, #100]	@ (8019ba4 <Argus_Dev_CheckCfg+0x39c>)
 8019b40:	4819      	ldr	r0, [pc, #100]	@ (8019ba8 <Argus_Dev_CheckCfg+0x3a0>)
 8019b42:	4621      	mov	r1, r4
 8019b44:	f7f4 f9e4 	bl	800df10 <print>
 8019b48:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019b4c:	bd10      	pop	{r4, pc}
 8019b4e:	bf00      	nop
 8019b50:	00030c46 	.word	0x00030c46
 8019b54:	000185a6 	.word	0x000185a6
 8019b58:	feced300 	.word	0xfeced300
 8019b5c:	00989680 	.word	0x00989680
 8019b60:	08029b08 	.word	0x08029b08
 8019b64:	08029cac 	.word	0x08029cac
 8019b68:	0802941c 	.word	0x0802941c
 8019b6c:	08029960 	.word	0x08029960
 8019b70:	08029418 	.word	0x08029418
 8019b74:	080299c0 	.word	0x080299c0
 8019b78:	08029a20 	.word	0x08029a20
 8019b7c:	080296b0 	.word	0x080296b0
 8019b80:	08029420 	.word	0x08029420
 8019b84:	0802944c 	.word	0x0802944c
 8019b88:	0802948c 	.word	0x0802948c
 8019b8c:	08029670 	.word	0x08029670
 8019b90:	0802964c 	.word	0x0802964c
 8019b94:	08029618 	.word	0x08029618
 8019b98:	080294d0 	.word	0x080294d0
 8019b9c:	080295b4 	.word	0x080295b4
 8019ba0:	01c9c380 	.word	0x01c9c380
 8019ba4:	01312d00 	.word	0x01312d00
 8019ba8:	08029558 	.word	0x08029558
 8019bac:	2380      	movs	r3, #128	@ 0x80
 8019bae:	2200      	movs	r2, #0
 8019bb0:	4835      	ldr	r0, [pc, #212]	@ (8019c88 <Argus_Dev_CheckCfg+0x480>)
 8019bb2:	f7f4 f9ad 	bl	800df10 <print>
 8019bb6:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019bba:	bd10      	pop	{r4, pc}
 8019bbc:	4833      	ldr	r0, [pc, #204]	@ (8019c8c <Argus_Dev_CheckCfg+0x484>)
 8019bbe:	f7f4 f9a7 	bl	800df10 <print>
 8019bc2:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019bc6:	bd10      	pop	{r4, pc}
 8019bc8:	4831      	ldr	r0, [pc, #196]	@ (8019c90 <Argus_Dev_CheckCfg+0x488>)
 8019bca:	f7f4 f9a1 	bl	800df10 <print>
 8019bce:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019bd2:	bd10      	pop	{r4, pc}
 8019bd4:	482f      	ldr	r0, [pc, #188]	@ (8019c94 <Argus_Dev_CheckCfg+0x48c>)
 8019bd6:	f7f4 f99b 	bl	800df10 <print>
 8019bda:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019bde:	bd10      	pop	{r4, pc}
 8019be0:	482d      	ldr	r0, [pc, #180]	@ (8019c98 <Argus_Dev_CheckCfg+0x490>)
 8019be2:	f7f4 f995 	bl	800df10 <print>
 8019be6:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019bea:	bd10      	pop	{r4, pc}
 8019bec:	482b      	ldr	r0, [pc, #172]	@ (8019c9c <Argus_Dev_CheckCfg+0x494>)
 8019bee:	f7f4 f98f 	bl	800df10 <print>
 8019bf2:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019bf6:	bd10      	pop	{r4, pc}
 8019bf8:	4829      	ldr	r0, [pc, #164]	@ (8019ca0 <Argus_Dev_CheckCfg+0x498>)
 8019bfa:	f7f4 f989 	bl	800df10 <print>
 8019bfe:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019c02:	bd10      	pop	{r4, pc}
 8019c04:	4827      	ldr	r0, [pc, #156]	@ (8019ca4 <Argus_Dev_CheckCfg+0x49c>)
 8019c06:	f7f4 f983 	bl	800df10 <print>
 8019c0a:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019c0e:	bd10      	pop	{r4, pc}
 8019c10:	4825      	ldr	r0, [pc, #148]	@ (8019ca8 <Argus_Dev_CheckCfg+0x4a0>)
 8019c12:	f7f4 f97d 	bl	800df10 <print>
 8019c16:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019c1a:	bd10      	pop	{r4, pc}
 8019c1c:	4823      	ldr	r0, [pc, #140]	@ (8019cac <Argus_Dev_CheckCfg+0x4a4>)
 8019c1e:	f7f4 f977 	bl	800df10 <print>
 8019c22:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019c26:	bd10      	pop	{r4, pc}
 8019c28:	4821      	ldr	r0, [pc, #132]	@ (8019cb0 <Argus_Dev_CheckCfg+0x4a8>)
 8019c2a:	f7f4 f971 	bl	800df10 <print>
 8019c2e:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019c32:	bd10      	pop	{r4, pc}
 8019c34:	481f      	ldr	r0, [pc, #124]	@ (8019cb4 <Argus_Dev_CheckCfg+0x4ac>)
 8019c36:	f7f4 f96b 	bl	800df10 <print>
 8019c3a:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019c3e:	bd10      	pop	{r4, pc}
 8019c40:	481d      	ldr	r0, [pc, #116]	@ (8019cb8 <Argus_Dev_CheckCfg+0x4b0>)
 8019c42:	f7f4 f965 	bl	800df10 <print>
 8019c46:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019c4a:	bd10      	pop	{r4, pc}
 8019c4c:	481b      	ldr	r0, [pc, #108]	@ (8019cbc <Argus_Dev_CheckCfg+0x4b4>)
 8019c4e:	f7f4 f95f 	bl	800df10 <print>
 8019c52:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019c56:	bd10      	pop	{r4, pc}
 8019c58:	4819      	ldr	r0, [pc, #100]	@ (8019cc0 <Argus_Dev_CheckCfg+0x4b8>)
 8019c5a:	f7f4 f959 	bl	800df10 <print>
 8019c5e:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019c62:	bd10      	pop	{r4, pc}
 8019c64:	4817      	ldr	r0, [pc, #92]	@ (8019cc4 <Argus_Dev_CheckCfg+0x4bc>)
 8019c66:	f7f4 f953 	bl	800df10 <print>
 8019c6a:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019c6e:	bd10      	pop	{r4, pc}
 8019c70:	4815      	ldr	r0, [pc, #84]	@ (8019cc8 <Argus_Dev_CheckCfg+0x4c0>)
 8019c72:	f7f4 f94d 	bl	800df10 <print>
 8019c76:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019c7a:	bd10      	pop	{r4, pc}
 8019c7c:	4813      	ldr	r0, [pc, #76]	@ (8019ccc <Argus_Dev_CheckCfg+0x4c4>)
 8019c7e:	f7f4 f947 	bl	800df10 <print>
 8019c82:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019c86:	bd10      	pop	{r4, pc}
 8019c88:	08029514 	.word	0x08029514
 8019c8c:	08029818 	.word	0x08029818
 8019c90:	080297d8 	.word	0x080297d8
 8019c94:	08029708 	.word	0x08029708
 8019c98:	080296d8 	.word	0x080296d8
 8019c9c:	080298a0 	.word	0x080298a0
 8019ca0:	08029858 	.word	0x08029858
 8019ca4:	0802978c 	.word	0x0802978c
 8019ca8:	08029748 	.word	0x08029748
 8019cac:	08029930 	.word	0x08029930
 8019cb0:	080298e8 	.word	0x080298e8
 8019cb4:	080295e8 	.word	0x080295e8
 8019cb8:	08029b5c 	.word	0x08029b5c
 8019cbc:	08029bf4 	.word	0x08029bf4
 8019cc0:	08029c40 	.word	0x08029c40
 8019cc4:	08029a80 	.word	0x08029a80
 8019cc8:	08029ac8 	.word	0x08029ac8
 8019ccc:	08029ba0 	.word	0x08029ba0

08019cd0 <Argus_Dev_PrepareCfg>:
 8019cd0:	f7fb bace 	b.w	8015270 <Argus_Dca_PrepareCfg>

08019cd4 <Argus_Dev_Update>:
 8019cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cd8:	4683      	mov	fp, r0
 8019cda:	4608      	mov	r0, r1
 8019cdc:	f8db 111c 	ldr.w	r1, [fp, #284]	@ 0x11c
 8019ce0:	4613      	mov	r3, r2
 8019ce2:	b091      	sub	sp, #68	@ 0x44
 8019ce4:	e9cd 3002 	strd	r3, r0, [sp, #8]
 8019ce8:	3122      	adds	r1, #34	@ 0x22
 8019cea:	226c      	movs	r2, #108	@ 0x6c
 8019cec:	4604      	mov	r4, r0
 8019cee:	f10b 000c 	add.w	r0, fp, #12
 8019cf2:	f009 fe06 	bl	8023902 <memcpy>
 8019cf6:	f8db 2078 	ldr.w	r2, [fp, #120]	@ 0x78
 8019cfa:	4bbc      	ldr	r3, [pc, #752]	@ (8019fec <Argus_Dev_Update+0x318>)
 8019cfc:	f89b 10fd 	ldrb.w	r1, [fp, #253]	@ 0xfd
 8019d00:	4313      	orrs	r3, r2
 8019d02:	f8cb 3078 	str.w	r3, [fp, #120]	@ 0x78
 8019d06:	f8db 2078 	ldr.w	r2, [fp, #120]	@ 0x78
 8019d0a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8019d0e:	f8cb 2078 	str.w	r2, [fp, #120]	@ 0x78
 8019d12:	f894 2021 	ldrb.w	r2, [r4, #33]	@ 0x21
 8019d16:	2a00      	cmp	r2, #0
 8019d18:	f000 81df 	beq.w	801a0da <Argus_Dev_Update+0x406>
 8019d1c:	f021 0301 	bic.w	r3, r1, #1
 8019d20:	f043 0302 	orr.w	r3, r3, #2
 8019d24:	f89b 2064 	ldrb.w	r2, [fp, #100]	@ 0x64
 8019d28:	9802      	ldr	r0, [sp, #8]
 8019d2a:	f023 030c 	bic.w	r3, r3, #12
 8019d2e:	f002 0203 	and.w	r2, r2, #3
 8019d32:	ea43 0282 	orr.w	r2, r3, r2, lsl #2
 8019d36:	f8bb 305d 	ldrh.w	r3, [fp, #93]	@ 0x5d
 8019d3a:	f88b 20fd 	strb.w	r2, [fp, #253]	@ 0xfd
 8019d3e:	f990 1296 	ldrsb.w	r1, [r0, #662]	@ 0x296
 8019d42:	f89b 205e 	ldrb.w	r2, [fp, #94]	@ 0x5e
 8019d46:	ba5b      	rev16	r3, r3
 8019d48:	f3c3 1385 	ubfx	r3, r3, #6, #6
 8019d4c:	440b      	add	r3, r1
 8019d4e:	f383 0306 	usat	r3, #6, r3
 8019d52:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8019d56:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 8019d5a:	f88b 205e 	strb.w	r2, [fp, #94]	@ 0x5e
 8019d5e:	f89b 205d 	ldrb.w	r2, [fp, #93]	@ 0x5d
 8019d62:	f3c3 0397 	ubfx	r3, r3, #2, #24
 8019d66:	f022 020f 	bic.w	r2, r2, #15
 8019d6a:	4313      	orrs	r3, r2
 8019d6c:	f88b 305d 	strb.w	r3, [fp, #93]	@ 0x5d
 8019d70:	f990 129c 	ldrsb.w	r1, [r0, #668]	@ 0x29c
 8019d74:	f89b 204f 	ldrb.w	r2, [fp, #79]	@ 0x4f
 8019d78:	1d0e      	adds	r6, r1, #4
 8019d7a:	f000 8272 	beq.w	801a262 <Argus_Dev_Update+0x58e>
 8019d7e:	f3c2 0343 	ubfx	r3, r2, #1, #4
 8019d82:	440b      	add	r3, r1
 8019d84:	2b0e      	cmp	r3, #14
 8019d86:	bfdd      	ittte	le
 8019d88:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8019d8c:	005b      	lslle	r3, r3, #1
 8019d8e:	b25b      	sxtble	r3, r3
 8019d90:	231e      	movgt	r3, #30
 8019d92:	f022 021e 	bic.w	r2, r2, #30
 8019d96:	4313      	orrs	r3, r2
 8019d98:	f88b 304f 	strb.w	r3, [fp, #79]	@ 0x4f
 8019d9c:	9b03      	ldr	r3, [sp, #12]
 8019d9e:	781b      	ldrb	r3, [r3, #0]
 8019da0:	075d      	lsls	r5, r3, #29
 8019da2:	f140 8191 	bpl.w	801a0c8 <Argus_Dev_Update+0x3f4>
 8019da6:	f89b 3072 	ldrb.w	r3, [fp, #114]	@ 0x72
 8019daa:	f89b 2071 	ldrb.w	r2, [fp, #113]	@ 0x71
 8019dae:	9802      	ldr	r0, [sp, #8]
 8019db0:	021b      	lsls	r3, r3, #8
 8019db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019db6:	f89b 2073 	ldrb.w	r2, [fp, #115]	@ 0x73
 8019dba:	f890 429e 	ldrb.w	r4, [r0, #670]	@ 0x29e
 8019dbe:	f890 e01b 	ldrb.w	lr, [r0, #27]
 8019dc2:	f890 529d 	ldrb.w	r5, [r0, #669]	@ 0x29d
 8019dc6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8019dc8:	4313      	orrs	r3, r2
 8019dca:	f8bb 2075 	ldrh.w	r2, [fp, #117]	@ 0x75
 8019dce:	9309      	str	r3, [sp, #36]	@ 0x24
 8019dd0:	ba52      	rev16	r2, r2
 8019dd2:	b292      	uxth	r2, r2
 8019dd4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8019dd8:	0a13      	lsrs	r3, r2, #8
 8019dda:	0f91      	lsrs	r1, r2, #30
 8019ddc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8019de0:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8019de4:	0d91      	lsrs	r1, r2, #22
 8019de6:	f001 01c0 	and.w	r1, r1, #192	@ 0xc0
 8019dea:	430b      	orrs	r3, r1
 8019dec:	0891      	lsrs	r1, r2, #2
 8019dee:	f401 7140 	and.w	r1, r1, #768	@ 0x300
 8019df2:	430b      	orrs	r3, r1
 8019df4:	0c11      	lsrs	r1, r2, #16
 8019df6:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 8019dfa:	430b      	orrs	r3, r1
 8019dfc:	0111      	lsls	r1, r2, #4
 8019dfe:	f401 5140 	and.w	r1, r1, #12288	@ 0x3000
 8019e02:	430b      	orrs	r3, r1
 8019e04:	0a91      	lsrs	r1, r2, #10
 8019e06:	f401 4140 	and.w	r1, r1, #49152	@ 0xc000
 8019e0a:	430b      	orrs	r3, r1
 8019e0c:	0291      	lsls	r1, r2, #10
 8019e0e:	f401 3140 	and.w	r1, r1, #196608	@ 0x30000
 8019e12:	430b      	orrs	r3, r1
 8019e14:	0911      	lsrs	r1, r2, #4
 8019e16:	f401 2140 	and.w	r1, r1, #786432	@ 0xc0000
 8019e1a:	430b      	orrs	r3, r1
 8019e1c:	0411      	lsls	r1, r2, #16
 8019e1e:	f401 1140 	and.w	r1, r1, #3145728	@ 0x300000
 8019e22:	430b      	orrs	r3, r1
 8019e24:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 8019e28:	f3c2 3181 	ubfx	r1, r2, #14, #2
 8019e2c:	430b      	orrs	r3, r1
 8019e2e:	f40a 0a40 	and.w	sl, sl, #12582912	@ 0xc00000
 8019e32:	ea4a 0a03 	orr.w	sl, sl, r3
 8019e36:	0593      	lsls	r3, r2, #22
 8019e38:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8019e3c:	ea43 0a0a 	orr.w	sl, r3, sl
 8019e40:	0213      	lsls	r3, r2, #8
 8019e42:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8019e46:	ea43 030a 	orr.w	r3, r3, sl
 8019e4a:	7e81      	ldrb	r1, [r0, #26]
 8019e4c:	950a      	str	r5, [sp, #40]	@ 0x28
 8019e4e:	ea4f 7a02 	mov.w	sl, r2, lsl #28
 8019e52:	eba4 070e 	sub.w	r7, r4, lr
 8019e56:	f00a 5a40 	and.w	sl, sl, #805306368	@ 0x30000000
 8019e5a:	ea4a 0a03 	orr.w	sl, sl, r3
 8019e5e:	b2ff      	uxtb	r7, r7
 8019e60:	1a6b      	subs	r3, r5, r1
 8019e62:	433b      	orrs	r3, r7
 8019e64:	0c10      	lsrs	r0, r2, #16
 8019e66:	b2db      	uxtb	r3, r3
 8019e68:	ea4a 7a80 	orr.w	sl, sl, r0, lsl #30
 8019e6c:	2b00      	cmp	r3, #0
 8019e6e:	f000 81fa 	beq.w	801a266 <Argus_Dev_Update+0x592>
 8019e72:	1b4b      	subs	r3, r1, r5
 8019e74:	ebae 0104 	sub.w	r1, lr, r4
 8019e78:	b2c8      	uxtb	r0, r1
 8019e7a:	b2db      	uxtb	r3, r3
 8019e7c:	f100 0901 	add.w	r9, r0, #1
 8019e80:	f100 0c02 	add.w	ip, r0, #2
 8019e84:	1cc4      	adds	r4, r0, #3
 8019e86:	b249      	sxtb	r1, r1
 8019e88:	9004      	str	r0, [sp, #16]
 8019e8a:	1e58      	subs	r0, r3, #1
 8019e8c:	9108      	str	r1, [sp, #32]
 8019e8e:	b2c1      	uxtb	r1, r0
 8019e90:	fa5f f089 	uxtb.w	r0, r9
 8019e94:	900c      	str	r0, [sp, #48]	@ 0x30
 8019e96:	fa4f f089 	sxtb.w	r0, r9
 8019e9a:	9005      	str	r0, [sp, #20]
 8019e9c:	fa5f f08c 	uxtb.w	r0, ip
 8019ea0:	9001      	str	r0, [sp, #4]
 8019ea2:	fa4f f08c 	sxtb.w	r0, ip
 8019ea6:	9006      	str	r0, [sp, #24]
 8019ea8:	b2e0      	uxtb	r0, r4
 8019eaa:	f00e 0e01 	and.w	lr, lr, #1
 8019eae:	9100      	str	r1, [sp, #0]
 8019eb0:	900d      	str	r0, [sp, #52]	@ 0x34
 8019eb2:	f103 0801 	add.w	r8, r3, #1
 8019eb6:	2600      	movs	r6, #0
 8019eb8:	b264      	sxtb	r4, r4
 8019eba:	f007 0701 	and.w	r7, r7, #1
 8019ebe:	9800      	ldr	r0, [sp, #0]
 8019ec0:	920e      	str	r2, [sp, #56]	@ 0x38
 8019ec2:	f8cd e000 	str.w	lr, [sp]
 8019ec6:	fa5f f588 	uxtb.w	r5, r8
 8019eca:	e9dd e90c 	ldrd	lr, r9, [sp, #48]	@ 0x30
 8019ece:	9407      	str	r4, [sp, #28]
 8019ed0:	46b4      	mov	ip, r6
 8019ed2:	f8cd b03c 	str.w	fp, [sp, #60]	@ 0x3c
 8019ed6:	b25a      	sxtb	r2, r3
 8019ed8:	2f00      	cmp	r7, #0
 8019eda:	d073      	beq.n	8019fc4 <Argus_Dev_Update+0x2f0>
 8019edc:	9900      	ldr	r1, [sp, #0]
 8019ede:	2900      	cmp	r1, #0
 8019ee0:	f040 810d 	bne.w	801a0fe <Argus_Dev_Update+0x42a>
 8019ee4:	b26c      	sxtb	r4, r5
 8019ee6:	46ab      	mov	fp, r5
 8019ee8:	f1bb 0f07 	cmp.w	fp, #7
 8019eec:	d80d      	bhi.n	8019f0a <Argus_Dev_Update+0x236>
 8019eee:	9904      	ldr	r1, [sp, #16]
 8019ef0:	2903      	cmp	r1, #3
 8019ef2:	d80a      	bhi.n	8019f0a <Argus_Dev_Update+0x236>
 8019ef4:	9908      	ldr	r1, [sp, #32]
 8019ef6:	ea41 0484 	orr.w	r4, r1, r4, lsl #2
 8019efa:	fa2a f404 	lsr.w	r4, sl, r4
 8019efe:	07e1      	lsls	r1, r4, #31
 8019f00:	d503      	bpl.n	8019f0a <Argus_Dev_Update+0x236>
 8019f02:	2401      	movs	r4, #1
 8019f04:	40b4      	lsls	r4, r6
 8019f06:	ea4c 0c04 	orr.w	ip, ip, r4
 8019f0a:	9900      	ldr	r1, [sp, #0]
 8019f0c:	2900      	cmp	r1, #0
 8019f0e:	f000 80f0 	beq.w	801a0f2 <Argus_Dev_Update+0x41e>
 8019f12:	b244      	sxtb	r4, r0
 8019f14:	4683      	mov	fp, r0
 8019f16:	f1bb 0f07 	cmp.w	fp, #7
 8019f1a:	d813      	bhi.n	8019f44 <Argus_Dev_Update+0x270>
 8019f1c:	f1be 0f03 	cmp.w	lr, #3
 8019f20:	d80d      	bhi.n	8019f3e <Argus_Dev_Update+0x26a>
 8019f22:	9905      	ldr	r1, [sp, #20]
 8019f24:	ea41 0484 	orr.w	r4, r1, r4, lsl #2
 8019f28:	fa2a f404 	lsr.w	r4, sl, r4
 8019f2c:	07e4      	lsls	r4, r4, #31
 8019f2e:	d506      	bpl.n	8019f3e <Argus_Dev_Update+0x26a>
 8019f30:	f046 0b01 	orr.w	fp, r6, #1
 8019f34:	2401      	movs	r4, #1
 8019f36:	fa04 f40b 	lsl.w	r4, r4, fp
 8019f3a:	ea4c 0c04 	orr.w	ip, ip, r4
 8019f3e:	2f00      	cmp	r7, #0
 8019f40:	f000 80ce 	beq.w	801a0e0 <Argus_Dev_Update+0x40c>
 8019f44:	9900      	ldr	r1, [sp, #0]
 8019f46:	2900      	cmp	r1, #0
 8019f48:	f040 80d6 	bne.w	801a0f8 <Argus_Dev_Update+0x424>
 8019f4c:	b26c      	sxtb	r4, r5
 8019f4e:	46ab      	mov	fp, r5
 8019f50:	f1bb 0f07 	cmp.w	fp, #7
 8019f54:	d811      	bhi.n	8019f7a <Argus_Dev_Update+0x2a6>
 8019f56:	9901      	ldr	r1, [sp, #4]
 8019f58:	2903      	cmp	r1, #3
 8019f5a:	d80d      	bhi.n	8019f78 <Argus_Dev_Update+0x2a4>
 8019f5c:	9906      	ldr	r1, [sp, #24]
 8019f5e:	ea41 0484 	orr.w	r4, r1, r4, lsl #2
 8019f62:	fa2a f404 	lsr.w	r4, sl, r4
 8019f66:	07e1      	lsls	r1, r4, #31
 8019f68:	d506      	bpl.n	8019f78 <Argus_Dev_Update+0x2a4>
 8019f6a:	f046 0b02 	orr.w	fp, r6, #2
 8019f6e:	2401      	movs	r4, #1
 8019f70:	fa04 f40b 	lsl.w	r4, r4, fp
 8019f74:	ea4c 0c04 	orr.w	ip, ip, r4
 8019f78:	b11f      	cbz	r7, 8019f82 <Argus_Dev_Update+0x2ae>
 8019f7a:	9900      	ldr	r1, [sp, #0]
 8019f7c:	b109      	cbz	r1, 8019f82 <Argus_Dev_Update+0x2ae>
 8019f7e:	b242      	sxtb	r2, r0
 8019f80:	4603      	mov	r3, r0
 8019f82:	2b07      	cmp	r3, #7
 8019f84:	d80f      	bhi.n	8019fa6 <Argus_Dev_Update+0x2d2>
 8019f86:	f1b9 0f03 	cmp.w	r9, #3
 8019f8a:	d80c      	bhi.n	8019fa6 <Argus_Dev_Update+0x2d2>
 8019f8c:	9b07      	ldr	r3, [sp, #28]
 8019f8e:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8019f92:	fa2a f303 	lsr.w	r3, sl, r3
 8019f96:	07db      	lsls	r3, r3, #31
 8019f98:	d505      	bpl.n	8019fa6 <Argus_Dev_Update+0x2d2>
 8019f9a:	f046 0203 	orr.w	r2, r6, #3
 8019f9e:	2301      	movs	r3, #1
 8019fa0:	4093      	lsls	r3, r2
 8019fa2:	ea4c 0c03 	orr.w	ip, ip, r3
 8019fa6:	3604      	adds	r6, #4
 8019fa8:	3001      	adds	r0, #1
 8019faa:	3501      	adds	r5, #1
 8019fac:	2e20      	cmp	r6, #32
 8019fae:	fa5f f388 	uxtb.w	r3, r8
 8019fb2:	b2c0      	uxtb	r0, r0
 8019fb4:	b2ed      	uxtb	r5, r5
 8019fb6:	f000 80a5 	beq.w	801a104 <Argus_Dev_Update+0x430>
 8019fba:	f103 0801 	add.w	r8, r3, #1
 8019fbe:	b25a      	sxtb	r2, r3
 8019fc0:	2f00      	cmp	r7, #0
 8019fc2:	d18b      	bne.n	8019edc <Argus_Dev_Update+0x208>
 8019fc4:	2b07      	cmp	r3, #7
 8019fc6:	d8ee      	bhi.n	8019fa6 <Argus_Dev_Update+0x2d2>
 8019fc8:	9904      	ldr	r1, [sp, #16]
 8019fca:	2903      	cmp	r1, #3
 8019fcc:	f200 8143 	bhi.w	801a256 <Argus_Dev_Update+0x582>
 8019fd0:	9908      	ldr	r1, [sp, #32]
 8019fd2:	ea41 0482 	orr.w	r4, r1, r2, lsl #2
 8019fd6:	fa2a f404 	lsr.w	r4, sl, r4
 8019fda:	07e4      	lsls	r4, r4, #31
 8019fdc:	d503      	bpl.n	8019fe6 <Argus_Dev_Update+0x312>
 8019fde:	2401      	movs	r4, #1
 8019fe0:	40b4      	lsls	r4, r6
 8019fe2:	ea4c 0c04 	orr.w	ip, ip, r4
 8019fe6:	4614      	mov	r4, r2
 8019fe8:	e798      	b.n	8019f1c <Argus_Dev_Update+0x248>
 8019fea:	bf00      	nop
 8019fec:	0003dffe 	.word	0x0003dffe
 8019ff0:	2301      	movs	r3, #1
 8019ff2:	ea4c 0c8e 	orr.w	ip, ip, lr, lsl #2
 8019ff6:	fa03 fc0c 	lsl.w	ip, r3, ip
 8019ffa:	ea41 010c 	orr.w	r1, r1, ip
 8019ffe:	fa21 f203 	lsr.w	r2, r1, r3
 801a002:	f002 3255 	and.w	r2, r2, #1431655765	@ 0x55555555
 801a006:	1a8a      	subs	r2, r1, r2
 801a008:	0893      	lsrs	r3, r2, #2
 801a00a:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 801a00e:	f002 3233 	and.w	r2, r2, #858993459	@ 0x33333333
 801a012:	4413      	add	r3, r2
 801a014:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 801a018:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 801a01c:	9a00      	ldr	r2, [sp, #0]
 801a01e:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 801a022:	eb03 4303 	add.w	r3, r3, r3, lsl #16
 801a026:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
 801a02a:	f200 80bc 	bhi.w	801a1a6 <Argus_Dev_Update+0x4d2>
 801a02e:	f8dd b010 	ldr.w	fp, [sp, #16]
 801a032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a034:	0c1b      	lsrs	r3, r3, #16
 801a036:	f88b 3071 	strb.w	r3, [fp, #113]	@ 0x71
 801a03a:	0c0a      	lsrs	r2, r1, #16
 801a03c:	0d8b      	lsrs	r3, r1, #22
 801a03e:	f003 030c 	and.w	r3, r3, #12
 801a042:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 801a046:	431a      	orrs	r2, r3
 801a048:	0a8b      	lsrs	r3, r1, #10
 801a04a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801a04e:	431a      	orrs	r2, r3
 801a050:	090b      	lsrs	r3, r1, #4
 801a052:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801a056:	431a      	orrs	r2, r3
 801a058:	008b      	lsls	r3, r1, #2
 801a05a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 801a05e:	431a      	orrs	r2, r3
 801a060:	020b      	lsls	r3, r1, #8
 801a062:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 801a066:	431a      	orrs	r2, r3
 801a068:	038b      	lsls	r3, r1, #14
 801a06a:	b29b      	uxth	r3, r3
 801a06c:	431a      	orrs	r2, r3
 801a06e:	0f8b      	lsrs	r3, r1, #30
 801a070:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801a074:	0a0b      	lsrs	r3, r1, #8
 801a076:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 801a07a:	431a      	orrs	r2, r3
 801a07c:	088b      	lsrs	r3, r1, #2
 801a07e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 801a082:	431a      	orrs	r2, r3
 801a084:	010b      	lsls	r3, r1, #4
 801a086:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 801a08a:	431a      	orrs	r2, r3
 801a08c:	028b      	lsls	r3, r1, #10
 801a08e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 801a092:	431a      	orrs	r2, r3
 801a094:	040b      	lsls	r3, r1, #16
 801a096:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 801a09a:	431a      	orrs	r2, r3
 801a09c:	058b      	lsls	r3, r1, #22
 801a09e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801a0a2:	431a      	orrs	r2, r3
 801a0a4:	088b      	lsrs	r3, r1, #2
 801a0a6:	ea42 7283 	orr.w	r2, r2, r3, lsl #30
 801a0aa:	f3c1 7301 	ubfx	r3, r1, #28, #2
 801a0ae:	4313      	orrs	r3, r2
 801a0b0:	0a12      	lsrs	r2, r2, #8
 801a0b2:	f88b 2075 	strb.w	r2, [fp, #117]	@ 0x75
 801a0b6:	f88b 3076 	strb.w	r3, [fp, #118]	@ 0x76
 801a0ba:	0c1a      	lsrs	r2, r3, #16
 801a0bc:	f3c3 6307 	ubfx	r3, r3, #24, #8
 801a0c0:	f88b 2073 	strb.w	r2, [fp, #115]	@ 0x73
 801a0c4:	f88b 3072 	strb.w	r3, [fp, #114]	@ 0x72
 801a0c8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801a0cc:	f50b 70b4 	add.w	r0, fp, #360	@ 0x168
 801a0d0:	b011      	add	sp, #68	@ 0x44
 801a0d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0d6:	f7fb bbeb 	b.w	80158b0 <Argus_Dca_Update>
 801a0da:	f041 0302 	orr.w	r3, r1, #2
 801a0de:	e621      	b.n	8019d24 <Argus_Dev_Update+0x50>
 801a0e0:	2b07      	cmp	r3, #7
 801a0e2:	f63f af60 	bhi.w	8019fa6 <Argus_Dev_Update+0x2d2>
 801a0e6:	9901      	ldr	r1, [sp, #4]
 801a0e8:	2903      	cmp	r1, #3
 801a0ea:	f63f af4c 	bhi.w	8019f86 <Argus_Dev_Update+0x2b2>
 801a0ee:	4614      	mov	r4, r2
 801a0f0:	e734      	b.n	8019f5c <Argus_Dev_Update+0x288>
 801a0f2:	469b      	mov	fp, r3
 801a0f4:	4614      	mov	r4, r2
 801a0f6:	e70e      	b.n	8019f16 <Argus_Dev_Update+0x242>
 801a0f8:	469b      	mov	fp, r3
 801a0fa:	4614      	mov	r4, r2
 801a0fc:	e728      	b.n	8019f50 <Argus_Dev_Update+0x27c>
 801a0fe:	469b      	mov	fp, r3
 801a100:	4614      	mov	r4, r2
 801a102:	e6f1      	b.n	8019ee8 <Argus_Dev_Update+0x214>
 801a104:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a106:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 801a10a:	4661      	mov	r1, ip
 801a10c:	0853      	lsrs	r3, r2, #1
 801a10e:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 801a112:	1ad2      	subs	r2, r2, r3
 801a114:	0893      	lsrs	r3, r2, #2
 801a116:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 801a11a:	f002 3233 	and.w	r2, r2, #858993459	@ 0x33333333
 801a11e:	4413      	add	r3, r2
 801a120:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 801a124:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 801a128:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 801a12c:	eb03 4303 	add.w	r3, r3, r3, lsl #16
 801a130:	0e18      	lsrs	r0, r3, #24
 801a132:	2820      	cmp	r0, #32
 801a134:	9000      	str	r0, [sp, #0]
 801a136:	f000 8098 	beq.w	801a26a <Argus_Dev_Update+0x596>
 801a13a:	084b      	lsrs	r3, r1, #1
 801a13c:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 801a140:	1acb      	subs	r3, r1, r3
 801a142:	089a      	lsrs	r2, r3, #2
 801a144:	f002 3233 	and.w	r2, r2, #858993459	@ 0x33333333
 801a148:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 801a14c:	4413      	add	r3, r2
 801a14e:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 801a152:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 801a156:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 801a15a:	eb03 4303 	add.w	r3, r3, r3, lsl #16
 801a15e:	ebb0 6f13 	cmp.w	r0, r3, lsr #24
 801a162:	f67f af66 	bls.w	801a032 <Argus_Dev_Update+0x35e>
 801a166:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a168:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801a16a:	f8cd b010 	str.w	fp, [sp, #16]
 801a16e:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
 801a172:	005b      	lsls	r3, r3, #1
 801a174:	9301      	str	r3, [sp, #4]
 801a176:	f1c2 0a01 	rsb	sl, r2, #1
 801a17a:	f1c2 0902 	rsb	r9, r2, #2
 801a17e:	f1c2 0803 	rsb	r8, r2, #3
 801a182:	0053      	lsls	r3, r2, #1
 801a184:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 801a188:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801a18c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801a190:	fb03 f303 	mul.w	r3, r3, r3
 801a194:	fb0a fa0a 	mul.w	sl, sl, sl
 801a198:	fb09 f909 	mul.w	r9, r9, r9
 801a19c:	fb08 f808 	mul.w	r8, r8, r8
 801a1a0:	f002 0401 	and.w	r4, r2, #1
 801a1a4:	469b      	mov	fp, r3
 801a1a6:	f04f 3cff 	mov.w	ip, #4294967295
 801a1aa:	9801      	ldr	r0, [sp, #4]
 801a1ac:	2200      	movs	r2, #0
 801a1ae:	46e6      	mov	lr, ip
 801a1b0:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 801a1b4:	e03f      	b.n	801a236 <Argus_Dev_Update+0x562>
 801a1b6:	1c47      	adds	r7, r0, #1
 801a1b8:	fb07 b707 	mla	r7, r7, r7, fp
 801a1bc:	42b7      	cmp	r7, r6
 801a1be:	da03      	bge.n	801a1c8 <Argus_Dev_Update+0x4f4>
 801a1c0:	463e      	mov	r6, r7
 801a1c2:	46ae      	mov	lr, r5
 801a1c4:	f04f 0c00 	mov.w	ip, #0
 801a1c8:	f043 0701 	orr.w	r7, r3, #1
 801a1cc:	fa21 f707 	lsr.w	r7, r1, r7
 801a1d0:	07ff      	lsls	r7, r7, #31
 801a1d2:	d40a      	bmi.n	801a1ea <Argus_Dev_Update+0x516>
 801a1d4:	2c00      	cmp	r4, #0
 801a1d6:	d13a      	bne.n	801a24e <Argus_Dev_Update+0x57a>
 801a1d8:	1e47      	subs	r7, r0, #1
 801a1da:	fb07 a707 	mla	r7, r7, r7, sl
 801a1de:	42b7      	cmp	r7, r6
 801a1e0:	da03      	bge.n	801a1ea <Argus_Dev_Update+0x516>
 801a1e2:	463e      	mov	r6, r7
 801a1e4:	46ae      	mov	lr, r5
 801a1e6:	f04f 0c01 	mov.w	ip, #1
 801a1ea:	f043 0702 	orr.w	r7, r3, #2
 801a1ee:	fa21 f707 	lsr.w	r7, r1, r7
 801a1f2:	07ff      	lsls	r7, r7, #31
 801a1f4:	d409      	bmi.n	801a20a <Argus_Dev_Update+0x536>
 801a1f6:	b364      	cbz	r4, 801a252 <Argus_Dev_Update+0x57e>
 801a1f8:	1c47      	adds	r7, r0, #1
 801a1fa:	fb07 9707 	mla	r7, r7, r7, r9
 801a1fe:	42b7      	cmp	r7, r6
 801a200:	da03      	bge.n	801a20a <Argus_Dev_Update+0x536>
 801a202:	463e      	mov	r6, r7
 801a204:	46ae      	mov	lr, r5
 801a206:	f04f 0c02 	mov.w	ip, #2
 801a20a:	f043 0303 	orr.w	r3, r3, #3
 801a20e:	fa21 f303 	lsr.w	r3, r1, r3
 801a212:	07df      	lsls	r7, r3, #31
 801a214:	d409      	bmi.n	801a22a <Argus_Dev_Update+0x556>
 801a216:	b9c4      	cbnz	r4, 801a24a <Argus_Dev_Update+0x576>
 801a218:	1e43      	subs	r3, r0, #1
 801a21a:	fb03 8303 	mla	r3, r3, r3, r8
 801a21e:	42b3      	cmp	r3, r6
 801a220:	da03      	bge.n	801a22a <Argus_Dev_Update+0x556>
 801a222:	46ae      	mov	lr, r5
 801a224:	461e      	mov	r6, r3
 801a226:	f04f 0c03 	mov.w	ip, #3
 801a22a:	3201      	adds	r2, #1
 801a22c:	2a08      	cmp	r2, #8
 801a22e:	f100 0002 	add.w	r0, r0, #2
 801a232:	f43f aedd 	beq.w	8019ff0 <Argus_Dev_Update+0x31c>
 801a236:	0093      	lsls	r3, r2, #2
 801a238:	fa21 f703 	lsr.w	r7, r1, r3
 801a23c:	07ff      	lsls	r7, r7, #31
 801a23e:	b255      	sxtb	r5, r2
 801a240:	d4c2      	bmi.n	801a1c8 <Argus_Dev_Update+0x4f4>
 801a242:	2c00      	cmp	r4, #0
 801a244:	d1b7      	bne.n	801a1b6 <Argus_Dev_Update+0x4e2>
 801a246:	4607      	mov	r7, r0
 801a248:	e7b6      	b.n	801a1b8 <Argus_Dev_Update+0x4e4>
 801a24a:	4603      	mov	r3, r0
 801a24c:	e7e5      	b.n	801a21a <Argus_Dev_Update+0x546>
 801a24e:	4607      	mov	r7, r0
 801a250:	e7c3      	b.n	801a1da <Argus_Dev_Update+0x506>
 801a252:	4607      	mov	r7, r0
 801a254:	e7d1      	b.n	801a1fa <Argus_Dev_Update+0x526>
 801a256:	f1be 0f03 	cmp.w	lr, #3
 801a25a:	f63f af41 	bhi.w	801a0e0 <Argus_Dev_Update+0x40c>
 801a25e:	4614      	mov	r4, r2
 801a260:	e65f      	b.n	8019f22 <Argus_Dev_Update+0x24e>
 801a262:	2300      	movs	r3, #0
 801a264:	e595      	b.n	8019d92 <Argus_Dev_Update+0xbe>
 801a266:	4651      	mov	r1, sl
 801a268:	e750      	b.n	801a10c <Argus_Dev_Update+0x438>
 801a26a:	f04f 31ff 	mov.w	r1, #4294967295
 801a26e:	e6e0      	b.n	801a032 <Argus_Dev_Update+0x35e>

0801a270 <Argus_Dev_UpdateLaserTemperatureCompensation>:
 801a270:	b530      	push	{r4, r5, lr}
 801a272:	f8d0 411c 	ldr.w	r4, [r0, #284]	@ 0x11c
 801a276:	f8b4 c067 	ldrh.w	ip, [r4, #103]	@ 0x67
 801a27a:	f894 e068 	ldrb.w	lr, [r4, #104]	@ 0x68
 801a27e:	fa9c fc9c 	rev16.w	ip, ip
 801a282:	f41c 6ff8 	tst.w	ip, #1984	@ 0x7c0
 801a286:	f3cc 1384 	ubfx	r3, ip, #6, #5
 801a28a:	d028      	beq.n	801a2de <Argus_Dev_UpdateLaserTemperatureCompensation+0x6e>
 801a28c:	fb01 f503 	mul.w	r5, r1, r3
 801a290:	f3c5 33c0 	ubfx	r3, r5, #15, #1
 801a294:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 801a298:	2b01      	cmp	r3, #1
 801a29a:	f8b0 c051 	ldrh.w	ip, [r0, #81]	@ 0x51
 801a29e:	bf38      	it	cc
 801a2a0:	2301      	movcc	r3, #1
 801a2a2:	2b1f      	cmp	r3, #31
 801a2a4:	fa9c fc9c 	rev16.w	ip, ip
 801a2a8:	f3cc 1c84 	ubfx	ip, ip, #6, #5
 801a2ac:	bf28      	it	cs
 801a2ae:	231f      	movcs	r3, #31
 801a2b0:	4563      	cmp	r3, ip
 801a2b2:	d014      	beq.n	801a2de <Argus_Dev_UpdateLaserTemperatureCompensation+0x6e>
 801a2b4:	f890 5052 	ldrb.w	r5, [r0, #82]	@ 0x52
 801a2b8:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 801a2bc:	ea45 1583 	orr.w	r5, r5, r3, lsl #6
 801a2c0:	f880 5052 	strb.w	r5, [r0, #82]	@ 0x52
 801a2c4:	f890 5051 	ldrb.w	r5, [r0, #81]	@ 0x51
 801a2c8:	f3c3 0397 	ubfx	r3, r3, #2, #24
 801a2cc:	f025 0507 	bic.w	r5, r5, #7
 801a2d0:	432b      	orrs	r3, r5
 801a2d2:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
 801a2d6:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 801a2d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a2dc:	6783      	str	r3, [r0, #120]	@ 0x78
 801a2de:	f894 3069 	ldrb.w	r3, [r4, #105]	@ 0x69
 801a2e2:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 801a2e6:	f413 7ff8 	tst.w	r3, #496	@ 0x1f0
 801a2ea:	f3c3 1404 	ubfx	r4, r3, #4, #5
 801a2ee:	d027      	beq.n	801a340 <Argus_Dev_UpdateLaserTemperatureCompensation+0xd0>
 801a2f0:	fb01 f404 	mul.w	r4, r1, r4
 801a2f4:	f3c4 31c0 	ubfx	r1, r4, #15, #1
 801a2f8:	eb01 4114 	add.w	r1, r1, r4, lsr #16
 801a2fc:	2901      	cmp	r1, #1
 801a2fe:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
 801a302:	bf38      	it	cc
 801a304:	2101      	movcc	r1, #1
 801a306:	291f      	cmp	r1, #31
 801a308:	ba5b      	rev16	r3, r3
 801a30a:	bf28      	it	cs
 801a30c:	211f      	movcs	r1, #31
 801a30e:	f3c3 1304 	ubfx	r3, r3, #4, #5
 801a312:	4299      	cmp	r1, r3
 801a314:	d014      	beq.n	801a340 <Argus_Dev_UpdateLaserTemperatureCompensation+0xd0>
 801a316:	f890 4053 	ldrb.w	r4, [r0, #83]	@ 0x53
 801a31a:	f890 3052 	ldrb.w	r3, [r0, #82]	@ 0x52
 801a31e:	f004 040f 	and.w	r4, r4, #15
 801a322:	ea44 1401 	orr.w	r4, r4, r1, lsl #4
 801a326:	f880 4053 	strb.w	r4, [r0, #83]	@ 0x53
 801a32a:	6f84      	ldr	r4, [r0, #120]	@ 0x78
 801a32c:	f023 0301 	bic.w	r3, r3, #1
 801a330:	f3c1 1117 	ubfx	r1, r1, #4, #24
 801a334:	4319      	orrs	r1, r3
 801a336:	f044 0440 	orr.w	r4, r4, #64	@ 0x40
 801a33a:	f880 1052 	strb.w	r1, [r0, #82]	@ 0x52
 801a33e:	6784      	str	r4, [r0, #120]	@ 0x78
 801a340:	0852      	lsrs	r2, r2, #1
 801a342:	2a01      	cmp	r2, #1
 801a344:	bf38      	it	cc
 801a346:	2201      	movcc	r2, #1
 801a348:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a34c:	429a      	cmp	r2, r3
 801a34e:	bf28      	it	cs
 801a350:	461a      	movcs	r2, r3
 801a352:	f8a0 2184 	strh.w	r2, [r0, #388]	@ 0x184
 801a356:	bd30      	pop	{r4, r5, pc}

0801a358 <Argus_Dev_GetPixelCount>:
 801a358:	f890 208c 	ldrb.w	r2, [r0, #140]	@ 0x8c
 801a35c:	f890 c08b 	ldrb.w	ip, [r0, #139]	@ 0x8b
 801a360:	f8b0 308f 	ldrh.w	r3, [r0, #143]	@ 0x8f
 801a364:	f890 108d 	ldrb.w	r1, [r0, #141]	@ 0x8d
 801a368:	0210      	lsls	r0, r2, #8
 801a36a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 801a36e:	ba5b      	rev16	r3, r3
 801a370:	4308      	orrs	r0, r1
 801a372:	b29b      	uxth	r3, r3
 801a374:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801a378:	085a      	lsrs	r2, r3, #1
 801a37a:	f002 3255 	and.w	r2, r2, #1431655765	@ 0x55555555
 801a37e:	1a9b      	subs	r3, r3, r2
 801a380:	089a      	lsrs	r2, r3, #2
 801a382:	f002 3233 	and.w	r2, r2, #858993459	@ 0x33333333
 801a386:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 801a38a:	4413      	add	r3, r2
 801a38c:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 801a390:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 801a394:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 801a398:	eb03 4303 	add.w	r3, r3, r3, lsl #16
 801a39c:	f3c0 4000 	ubfx	r0, r0, #16, #1
 801a3a0:	eb00 6013 	add.w	r0, r0, r3, lsr #24
 801a3a4:	4770      	bx	lr
 801a3a6:	bf00      	nop

0801a3a8 <Argus_Dev_GetFrameConfig>:
 801a3a8:	f890 3072 	ldrb.w	r3, [r0, #114]	@ 0x72
 801a3ac:	f890 c071 	ldrb.w	ip, [r0, #113]	@ 0x71
 801a3b0:	f8b0 2075 	ldrh.w	r2, [r0, #117]	@ 0x75
 801a3b4:	b570      	push	{r4, r5, r6, lr}
 801a3b6:	021b      	lsls	r3, r3, #8
 801a3b8:	f890 4073 	ldrb.w	r4, [r0, #115]	@ 0x73
 801a3bc:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 801a3c0:	ba52      	rev16	r2, r2
 801a3c2:	4323      	orrs	r3, r4
 801a3c4:	b292      	uxth	r2, r2
 801a3c6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801a3ca:	f8d0 41c4 	ldr.w	r4, [r0, #452]	@ 0x1c4
 801a3ce:	604a      	str	r2, [r1, #4]
 801a3d0:	f890 206e 	ldrb.w	r2, [r0, #110]	@ 0x6e
 801a3d4:	f890 c06d 	ldrb.w	ip, [r0, #109]	@ 0x6d
 801a3d8:	0212      	lsls	r2, r2, #8
 801a3da:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 801a3de:	f890 c06f 	ldrb.w	ip, [r0, #111]	@ 0x6f
 801a3e2:	0c1b      	lsrs	r3, r3, #16
 801a3e4:	ea42 020c 	orr.w	r2, r2, ip
 801a3e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801a3ec:	608b      	str	r3, [r1, #8]
 801a3ee:	f8b0 306a 	ldrh.w	r3, [r0, #106]	@ 0x6a
 801a3f2:	ba5b      	rev16	r3, r3
 801a3f4:	f3c3 1349 	ubfx	r3, r3, #5, #10
 801a3f8:	3301      	adds	r3, #1
 801a3fa:	824b      	strh	r3, [r1, #18]
 801a3fc:	f994 4000 	ldrsb.w	r4, [r4]
 801a400:	2c00      	cmp	r4, #0
 801a402:	d05b      	beq.n	801a4bc <Argus_Dev_GetFrameConfig+0x114>
 801a404:	f8b0 3168 	ldrh.w	r3, [r0, #360]	@ 0x168
 801a408:	b29b      	uxth	r3, r3
 801a40a:	820b      	strh	r3, [r1, #16]
 801a40c:	f890 304e 	ldrb.w	r3, [r0, #78]	@ 0x4e
 801a410:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a414:	75cb      	strb	r3, [r1, #23]
 801a416:	f8d0 211c 	ldr.w	r2, [r0, #284]	@ 0x11c
 801a41a:	f892 308e 	ldrb.w	r3, [r2, #142]	@ 0x8e
 801a41e:	2b02      	cmp	r3, #2
 801a420:	f000 8093 	beq.w	801a54a <Argus_Dev_GetFrameConfig+0x1a2>
 801a424:	2b03      	cmp	r3, #3
 801a426:	d071      	beq.n	801a50c <Argus_Dev_GetFrameConfig+0x164>
 801a428:	2b01      	cmp	r3, #1
 801a42a:	d05a      	beq.n	801a4e2 <Argus_Dev_GetFrameConfig+0x13a>
 801a42c:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 801a430:	079e      	lsls	r6, r3, #30
 801a432:	d53d      	bpl.n	801a4b0 <Argus_Dev_GetFrameConfig+0x108>
 801a434:	f892 c0a8 	ldrb.w	ip, [r2, #168]	@ 0xa8
 801a438:	075d      	lsls	r5, r3, #29
 801a43a:	bf4b      	itete	mi
 801a43c:	eb02 024c 	addmi.w	r2, r2, ip, lsl #1
 801a440:	f10c 0c57 	addpl.w	ip, ip, #87	@ 0x57
 801a444:	f8b2 c0b2 	ldrhmi.w	ip, [r2, #178]	@ 0xb2
 801a448:	f832 c01c 	ldrhpl.w	ip, [r2, ip, lsl #1]
 801a44c:	f8b0 2063 	ldrh.w	r2, [r0, #99]	@ 0x63
 801a450:	ba52      	rev16	r2, r2
 801a452:	f3c2 124a 	ubfx	r2, r2, #5, #11
 801a456:	eba2 020c 	sub.w	r2, r2, ip
 801a45a:	f890 c064 	ldrb.w	ip, [r0, #100]	@ 0x64
 801a45e:	760a      	strb	r2, [r1, #24]
 801a460:	f00c 0203 	and.w	r2, ip, #3
 801a464:	764a      	strb	r2, [r1, #25]
 801a466:	60cb      	str	r3, [r1, #12]
 801a468:	b1ec      	cbz	r4, 801a4a6 <Argus_Dev_GetFrameConfig+0xfe>
 801a46a:	f890 216f 	ldrb.w	r2, [r0, #367]	@ 0x16f
 801a46e:	07d4      	lsls	r4, r2, #31
 801a470:	f890 216f 	ldrb.w	r2, [r0, #367]	@ 0x16f
 801a474:	f890 416d 	ldrb.w	r4, [r0, #365]	@ 0x16d
 801a478:	bf4c      	ite	mi
 801a47a:	f443 3380 	orrmi.w	r3, r3, #65536	@ 0x10000
 801a47e:	f423 3380 	bicpl.w	r3, r3, #65536	@ 0x10000
 801a482:	0792      	lsls	r2, r2, #30
 801a484:	f890 216c 	ldrb.w	r2, [r0, #364]	@ 0x16c
 801a488:	bf4c      	ite	mi
 801a48a:	f443 3300 	orrmi.w	r3, r3, #131072	@ 0x20000
 801a48e:	f423 3300 	bicpl.w	r3, r3, #131072	@ 0x20000
 801a492:	03a4      	lsls	r4, r4, #14
 801a494:	b2a4      	uxth	r4, r4
 801a496:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 801a49a:	0352      	lsls	r2, r2, #13
 801a49c:	4323      	orrs	r3, r4
 801a49e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 801a4a2:	4313      	orrs	r3, r2
 801a4a4:	60cb      	str	r3, [r1, #12]
 801a4a6:	f890 3088 	ldrb.w	r3, [r0, #136]	@ 0x88
 801a4aa:	2bab      	cmp	r3, #171	@ 0xab
 801a4ac:	d00d      	beq.n	801a4ca <Argus_Dev_GetFrameConfig+0x122>
 801a4ae:	bd70      	pop	{r4, r5, r6, pc}
 801a4b0:	f8b2 2079 	ldrh.w	r2, [r2, #121]	@ 0x79
 801a4b4:	ba52      	rev16	r2, r2
 801a4b6:	f3c2 1c4a 	ubfx	ip, r2, #5, #11
 801a4ba:	e7c7      	b.n	801a44c <Argus_Dev_GetFrameConfig+0xa4>
 801a4bc:	f8b0 3049 	ldrh.w	r3, [r0, #73]	@ 0x49
 801a4c0:	ba5b      	rev16	r3, r3
 801a4c2:	b29b      	uxth	r3, r3
 801a4c4:	019b      	lsls	r3, r3, #6
 801a4c6:	b29b      	uxth	r3, r3
 801a4c8:	e79f      	b.n	801a40a <Argus_Dev_GetFrameConfig+0x62>
 801a4ca:	f890 308a 	ldrb.w	r3, [r0, #138]	@ 0x8a
 801a4ce:	f890 4089 	ldrb.w	r4, [r0, #137]	@ 0x89
 801a4d2:	f890 208b 	ldrb.w	r2, [r0, #139]	@ 0x8b
 801a4d6:	021b      	lsls	r3, r3, #8
 801a4d8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801a4dc:	4313      	orrs	r3, r2
 801a4de:	600b      	str	r3, [r1, #0]
 801a4e0:	bd70      	pop	{r4, r5, r6, pc}
 801a4e2:	f890 6051 	ldrb.w	r6, [r0, #81]	@ 0x51
 801a4e6:	4b23      	ldr	r3, [pc, #140]	@ (801a574 <Argus_Dev_GetFrameConfig+0x1cc>)
 801a4e8:	ea4f 0cd6 	mov.w	ip, r6, lsr #3
 801a4ec:	fb03 fc0c 	mul.w	ip, r3, ip
 801a4f0:	f3cc 25c0 	ubfx	r5, ip, #11, #1
 801a4f4:	eb05 3c1c 	add.w	ip, r5, ip, lsr #12
 801a4f8:	f8a1 c014 	strh.w	ip, [r1, #20]
 801a4fc:	f890 3052 	ldrb.w	r3, [r0, #82]	@ 0x52
 801a500:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 801a504:	f3c3 1384 	ubfx	r3, r3, #6, #5
 801a508:	758b      	strb	r3, [r1, #22]
 801a50a:	e78f      	b.n	801a42c <Argus_Dev_GetFrameConfig+0x84>
 801a50c:	f8b0 3051 	ldrh.w	r3, [r0, #81]	@ 0x51
 801a510:	f890 6052 	ldrb.w	r6, [r0, #82]	@ 0x52
 801a514:	f890 5051 	ldrb.w	r5, [r0, #81]	@ 0x51
 801a518:	ba5b      	rev16	r3, r3
 801a51a:	f3c3 1e84 	ubfx	lr, r3, #6, #5
 801a51e:	f3c6 0c44 	ubfx	ip, r6, #1, #5
 801a522:	4b14      	ldr	r3, [pc, #80]	@ (801a574 <Argus_Dev_GetFrameConfig+0x1cc>)
 801a524:	eb0c 0cd5 	add.w	ip, ip, r5, lsr #3
 801a528:	fb03 fc0c 	mul.w	ip, r3, ip
 801a52c:	f3cc 25c0 	ubfx	r5, ip, #11, #1
 801a530:	eb05 3c1c 	add.w	ip, r5, ip, lsr #12
 801a534:	f8a1 c014 	strh.w	ip, [r1, #20]
 801a538:	f890 3053 	ldrb.w	r3, [r0, #83]	@ 0x53
 801a53c:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 801a540:	f3c3 1304 	ubfx	r3, r3, #4, #5
 801a544:	4473      	add	r3, lr
 801a546:	758b      	strb	r3, [r1, #22]
 801a548:	e770      	b.n	801a42c <Argus_Dev_GetFrameConfig+0x84>
 801a54a:	f890 6052 	ldrb.w	r6, [r0, #82]	@ 0x52
 801a54e:	4b09      	ldr	r3, [pc, #36]	@ (801a574 <Argus_Dev_GetFrameConfig+0x1cc>)
 801a550:	f3c6 0c44 	ubfx	ip, r6, #1, #5
 801a554:	fb03 fc0c 	mul.w	ip, r3, ip
 801a558:	f3cc 25c0 	ubfx	r5, ip, #11, #1
 801a55c:	eb05 3c1c 	add.w	ip, r5, ip, lsr #12
 801a560:	f8a1 c014 	strh.w	ip, [r1, #20]
 801a564:	f890 3053 	ldrb.w	r3, [r0, #83]	@ 0x53
 801a568:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 801a56c:	f3c3 1304 	ubfx	r3, r3, #4, #5
 801a570:	758b      	strb	r3, [r1, #22]
 801a572:	e75b      	b.n	801a42c <Argus_Dev_GetFrameConfig+0x84>
 801a574:	0001c28f 	.word	0x0001c28f

0801a578 <Argus_Dev_GetModule>:
 801a578:	7a80      	ldrb	r0, [r0, #10]
 801a57a:	4770      	bx	lr

0801a57c <Argus_Dev_GetChipID>:
 801a57c:	6840      	ldr	r0, [r0, #4]
 801a57e:	4770      	bx	lr

0801a580 <Argus_Dev_GetChipVersion>:
 801a580:	7a00      	ldrb	r0, [r0, #8]
 801a582:	4770      	bx	lr

0801a584 <Argus_Dev_GetLaserType>:
 801a584:	7a40      	ldrb	r0, [r0, #9]
 801a586:	4770      	bx	lr

0801a588 <Argus_Dev_Apply>:
 801a588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a58c:	4604      	mov	r4, r0
 801a58e:	f8d0 011c 	ldr.w	r0, [r0, #284]	@ 0x11c
 801a592:	e9c4 2341 	strd	r2, r3, [r4, #260]	@ 0x104
 801a596:	7f43      	ldrb	r3, [r0, #29]
 801a598:	b1a3      	cbz	r3, 801a5c4 <Argus_Dev_Apply+0x3c>
 801a59a:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 801a59e:	f003 0201 	and.w	r2, r3, #1
 801a5a2:	4291      	cmp	r1, r2
 801a5a4:	d025      	beq.n	801a5f2 <Argus_Dev_Apply+0x6a>
 801a5a6:	f890 206e 	ldrb.w	r2, [r0, #110]	@ 0x6e
 801a5aa:	b9d9      	cbnz	r1, 801a5e4 <Argus_Dev_Apply+0x5c>
 801a5ac:	f884 2058 	strb.w	r2, [r4, #88]	@ 0x58
 801a5b0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 801a5b4:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801a5b6:	f023 0302 	bic.w	r3, r3, #2
 801a5ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801a5be:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 801a5c2:	67a2      	str	r2, [r4, #120]	@ 0x78
 801a5c4:	f504 70b4 	add.w	r0, r4, #360	@ 0x168
 801a5c8:	f104 010c 	add.w	r1, r4, #12
 801a5cc:	f7fb ff70 	bl	80164b0 <Argus_Dca_Apply>
 801a5d0:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 801a5d2:	b9a8      	cbnz	r0, 801a600 <Argus_Dev_Apply+0x78>
 801a5d4:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 801a5d8:	b1d3      	cbz	r3, 801a610 <Argus_Dev_Apply+0x88>
 801a5da:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 801a5de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a5e2:	4718      	bx	r3
 801a5e4:	f062 0277 	orn	r2, r2, #119	@ 0x77
 801a5e8:	f884 2058 	strb.w	r2, [r4, #88]	@ 0x58
 801a5ec:	f043 0301 	orr.w	r3, r3, #1
 801a5f0:	e7e0      	b.n	801a5b4 <Argus_Dev_Apply+0x2c>
 801a5f2:	079d      	lsls	r5, r3, #30
 801a5f4:	d5e6      	bpl.n	801a5c4 <Argus_Dev_Apply+0x3c>
 801a5f6:	f890 206e 	ldrb.w	r2, [r0, #110]	@ 0x6e
 801a5fa:	2900      	cmp	r1, #0
 801a5fc:	d0d6      	beq.n	801a5ac <Argus_Dev_Apply+0x24>
 801a5fe:	e7f1      	b.n	801a5e4 <Argus_Dev_Apply+0x5c>
 801a600:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801a602:	01da      	lsls	r2, r3, #7
 801a604:	d407      	bmi.n	801a616 <Argus_Dev_Apply+0x8e>
 801a606:	4620      	mov	r0, r4
 801a608:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a60c:	f7fe b8ae 	b.w	801876c <DisableClock.constprop.0>
 801a610:	4618      	mov	r0, r3
 801a612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a616:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801a618:	f8d4 511c 	ldr.w	r5, [r4, #284]	@ 0x11c
 801a61c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801a620:	67a3      	str	r3, [r4, #120]	@ 0x78
 801a622:	f895 30a8 	ldrb.w	r3, [r5, #168]	@ 0xa8
 801a626:	2b00      	cmp	r3, #0
 801a628:	d060      	beq.n	801a6ec <Argus_Dev_Apply+0x164>
 801a62a:	f8d4 7100 	ldr.w	r7, [r4, #256]	@ 0x100
 801a62e:	686e      	ldr	r6, [r5, #4]
 801a630:	f103 3eff 	add.w	lr, r3, #4294967295
 801a634:	332d      	adds	r3, #45	@ 0x2d
 801a636:	f047 0202 	orr.w	r2, r7, #2
 801a63a:	2e00      	cmp	r6, #0
 801a63c:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
 801a640:	4631      	mov	r1, r6
 801a642:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 801a646:	d059      	beq.n	801a6fc <Argus_Dev_Apply+0x174>
 801a648:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801a64c:	4690      	mov	r8, r2
 801a64e:	db5d      	blt.n	801a70c <Argus_Dev_Apply+0x184>
 801a650:	42b2      	cmp	r2, r6
 801a652:	f240 8091 	bls.w	801a778 <Argus_Dev_Apply+0x1f0>
 801a656:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801a65a:	4608      	mov	r0, r1
 801a65c:	0049      	lsls	r1, r1, #1
 801a65e:	428a      	cmp	r2, r1
 801a660:	469c      	mov	ip, r3
 801a662:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a666:	d8f8      	bhi.n	801a65a <Argus_Dev_Apply+0xd2>
 801a668:	2b00      	cmp	r3, #0
 801a66a:	d16f      	bne.n	801a74c <Argus_Dev_Apply+0x1c4>
 801a66c:	ea92 0f06 	teq	r2, r6
 801a670:	bf54      	ite	pl
 801a672:	f06f 4100 	mvnpl.w	r1, #2147483648	@ 0x80000000
 801a676:	f04f 4100 	movmi.w	r1, #2147483648	@ 0x80000000
 801a67a:	f8d4 01d4 	ldr.w	r0, [r4, #468]	@ 0x1d4
 801a67e:	67e1      	str	r1, [r4, #124]	@ 0x7c
 801a680:	077b      	lsls	r3, r7, #29
 801a682:	bf4c      	ite	mi
 801a684:	eb05 054e 	addmi.w	r5, r5, lr, lsl #1
 801a688:	f10e 0e58 	addpl.w	lr, lr, #88	@ 0x58
 801a68c:	f9b0 6028 	ldrsh.w	r6, [r0, #40]	@ 0x28
 801a690:	bf4c      	ite	mi
 801a692:	f8b5 50b4 	ldrhmi.w	r5, [r5, #180]	@ 0xb4
 801a696:	f835 501e 	ldrhpl.w	r5, [r5, lr, lsl #1]
 801a69a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801a69e:	429e      	cmp	r6, r3
 801a6a0:	d02f      	beq.n	801a702 <Argus_Dev_Apply+0x17a>
 801a6a2:	f002 fcd5 	bl	801d050 <Argus_Cal_GetCalibrationPtr>
 801a6a6:	7e02      	ldrb	r2, [r0, #24]
 801a6a8:	fb12 f206 	smulbb	r2, r2, r6
 801a6ac:	10d2      	asrs	r2, r2, #3
 801a6ae:	fb05 f102 	mul.w	r1, r5, r2
 801a6b2:	2900      	cmp	r1, #0
 801a6b4:	da58      	bge.n	801a768 <Argus_Dev_Apply+0x1e0>
 801a6b6:	4249      	negs	r1, r1
 801a6b8:	f3c1 5280 	ubfx	r2, r1, #22, #1
 801a6bc:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 801a6c0:	4252      	negs	r2, r2
 801a6c2:	b251      	sxtb	r1, r2
 801a6c4:	1a69      	subs	r1, r5, r1
 801a6c6:	b2d3      	uxtb	r3, r2
 801a6c8:	f894 2064 	ldrb.w	r2, [r4, #100]	@ 0x64
 801a6cc:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 801a6ce:	1aeb      	subs	r3, r5, r3
 801a6d0:	f002 021f 	and.w	r2, r2, #31
 801a6d4:	f3c1 01d7 	ubfx	r1, r1, #3, #24
 801a6d8:	ea42 1343 	orr.w	r3, r2, r3, lsl #5
 801a6dc:	f440 6000 	orr.w	r0, r0, #2048	@ 0x800
 801a6e0:	f884 1063 	strb.w	r1, [r4, #99]	@ 0x63
 801a6e4:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 801a6e8:	67a0      	str	r0, [r4, #120]	@ 0x78
 801a6ea:	e78c      	b.n	801a606 <Argus_Dev_Apply+0x7e>
 801a6ec:	f8d4 2100 	ldr.w	r2, [r4, #256]	@ 0x100
 801a6f0:	67e3      	str	r3, [r4, #124]	@ 0x7c
 801a6f2:	f022 0206 	bic.w	r2, r2, #6
 801a6f6:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
 801a6fa:	e784      	b.n	801a606 <Argus_Dev_Apply+0x7e>
 801a6fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801a700:	e7bb      	b.n	801a67a <Argus_Dev_Apply+0xf2>
 801a702:	f002 fca5 	bl	801d050 <Argus_Cal_GetCalibrationPtr>
 801a706:	4629      	mov	r1, r5
 801a708:	2300      	movs	r3, #0
 801a70a:	e7dd      	b.n	801a6c8 <Argus_Dev_Apply+0x140>
 801a70c:	4271      	negs	r1, r6
 801a70e:	428a      	cmp	r2, r1
 801a710:	d8a1      	bhi.n	801a656 <Argus_Dev_Apply+0xce>
 801a712:	2900      	cmp	r1, #0
 801a714:	db34      	blt.n	801a780 <Argus_Dev_Apply+0x1f8>
 801a716:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801a71a:	4608      	mov	r0, r1
 801a71c:	4611      	mov	r1, r2
 801a71e:	b152      	cbz	r2, 801a736 <Argus_Dev_Apply+0x1ae>
 801a720:	2100      	movs	r1, #0
 801a722:	e000      	b.n	801a726 <Argus_Dev_Apply+0x19e>
 801a724:	b13a      	cbz	r2, 801a736 <Argus_Dev_Apply+0x1ae>
 801a726:	4282      	cmp	r2, r0
 801a728:	bf24      	itt	cs
 801a72a:	1a12      	subcs	r2, r2, r0
 801a72c:	4319      	orrcs	r1, r3
 801a72e:	085b      	lsrs	r3, r3, #1
 801a730:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801a734:	d1f6      	bne.n	801a724 <Argus_Dev_Apply+0x19c>
 801a736:	4282      	cmp	r2, r0
 801a738:	bf28      	it	cs
 801a73a:	3101      	addcs	r1, #1
 801a73c:	ea98 0f06 	teq	r8, r6
 801a740:	d40e      	bmi.n	801a760 <Argus_Dev_Apply+0x1d8>
 801a742:	2900      	cmp	r1, #0
 801a744:	bfb8      	it	lt
 801a746:	f06f 4100 	mvnlt.w	r1, #2147483648	@ 0x80000000
 801a74a:	e796      	b.n	801a67a <Argus_Dev_Apply+0xf2>
 801a74c:	2900      	cmp	r1, #0
 801a74e:	dae4      	bge.n	801a71a <Argus_Dev_Apply+0x192>
 801a750:	f03c 4300 	bics.w	r3, ip, #2147483648	@ 0x80000000
 801a754:	d006      	beq.n	801a764 <Argus_Dev_Apply+0x1dc>
 801a756:	2a00      	cmp	r2, #0
 801a758:	d1e2      	bne.n	801a720 <Argus_Dev_Apply+0x198>
 801a75a:	2e00      	cmp	r6, #0
 801a75c:	4611      	mov	r1, r2
 801a75e:	da8c      	bge.n	801a67a <Argus_Dev_Apply+0xf2>
 801a760:	4249      	negs	r1, r1
 801a762:	e78a      	b.n	801a67a <Argus_Dev_Apply+0xf2>
 801a764:	4619      	mov	r1, r3
 801a766:	e7e6      	b.n	801a736 <Argus_Dev_Apply+0x1ae>
 801a768:	f3c1 5280 	ubfx	r2, r1, #22, #1
 801a76c:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 801a770:	b251      	sxtb	r1, r2
 801a772:	1a69      	subs	r1, r5, r1
 801a774:	b2d3      	uxtb	r3, r2
 801a776:	e7a7      	b.n	801a6c8 <Argus_Dev_Apply+0x140>
 801a778:	4630      	mov	r0, r6
 801a77a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801a77e:	e7cd      	b.n	801a71c <Argus_Dev_Apply+0x194>
 801a780:	0848      	lsrs	r0, r1, #1
 801a782:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801a786:	e7e6      	b.n	801a756 <Argus_Dev_Apply+0x1ce>

0801a788 <Argus_Dev_ApplySync>:
 801a788:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a78a:	b087      	sub	sp, #28
 801a78c:	2302      	movs	r3, #2
 801a78e:	4604      	mov	r4, r0
 801a790:	460d      	mov	r5, r1
 801a792:	a802      	add	r0, sp, #8
 801a794:	a903      	add	r1, sp, #12
 801a796:	9301      	str	r3, [sp, #4]
 801a798:	f7f3 fae2 	bl	800dd60 <Timer_GetCounterValue>
 801a79c:	4a2d      	ldr	r2, [pc, #180]	@ (801a854 <Argus_Dev_ApplySync+0xcc>)
 801a79e:	ab01      	add	r3, sp, #4
 801a7a0:	4629      	mov	r1, r5
 801a7a2:	4620      	mov	r0, r4
 801a7a4:	f7ff fef0 	bl	801a588 <Argus_Dev_Apply>
 801a7a8:	2800      	cmp	r0, #0
 801a7aa:	db1f      	blt.n	801a7ec <Argus_Dev_ApplySync+0x64>
 801a7ac:	4d2a      	ldr	r5, [pc, #168]	@ (801a858 <Argus_Dev_ApplySync+0xd0>)
 801a7ae:	a905      	add	r1, sp, #20
 801a7b0:	a804      	add	r0, sp, #16
 801a7b2:	f7f3 fad5 	bl	800dd60 <Timer_GetCounterValue>
 801a7b6:	e9dd 3403 	ldrd	r3, r4, [sp, #12]
 801a7ba:	42ab      	cmp	r3, r5
 801a7bc:	9e05      	ldr	r6, [sp, #20]
 801a7be:	9a02      	ldr	r2, [sp, #8]
 801a7c0:	d820      	bhi.n	801a804 <Argus_Dev_ApplySync+0x7c>
 801a7c2:	1c50      	adds	r0, r2, #1
 801a7c4:	4282      	cmp	r2, r0
 801a7c6:	4619      	mov	r1, r3
 801a7c8:	d023      	beq.n	801a812 <Argus_Dev_ApplySync+0x8a>
 801a7ca:	bf34      	ite	cc
 801a7cc:	2701      	movcc	r7, #1
 801a7ce:	2700      	movcs	r7, #0
 801a7d0:	b177      	cbz	r7, 801a7f0 <Argus_Dev_ApplySync+0x68>
 801a7d2:	42a2      	cmp	r2, r4
 801a7d4:	d02a      	beq.n	801a82c <Argus_Dev_ApplySync+0xa4>
 801a7d6:	bf34      	ite	cc
 801a7d8:	2301      	movcc	r3, #1
 801a7da:	2300      	movcs	r3, #0
 801a7dc:	b9f3      	cbnz	r3, 801a81c <Argus_Dev_ApplySync+0x94>
 801a7de:	481f      	ldr	r0, [pc, #124]	@ (801a85c <Argus_Dev_ApplySync+0xd4>)
 801a7e0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801a7e4:	f7f3 fb94 	bl	800df10 <print>
 801a7e8:	f06f 0005 	mvn.w	r0, #5
 801a7ec:	b007      	add	sp, #28
 801a7ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a7f0:	42a2      	cmp	r2, r4
 801a7f2:	d020      	beq.n	801a836 <Argus_Dev_ApplySync+0xae>
 801a7f4:	d302      	bcc.n	801a7fc <Argus_Dev_ApplySync+0x74>
 801a7f6:	42a0      	cmp	r0, r4
 801a7f8:	d021      	beq.n	801a83e <Argus_Dev_ApplySync+0xb6>
 801a7fa:	d3f0      	bcc.n	801a7de <Argus_Dev_ApplySync+0x56>
 801a7fc:	9801      	ldr	r0, [sp, #4]
 801a7fe:	2802      	cmp	r0, #2
 801a800:	d0d5      	beq.n	801a7ae <Argus_Dev_ApplySync+0x26>
 801a802:	e7f3      	b.n	801a7ec <Argus_Dev_ApplySync+0x64>
 801a804:	1c90      	adds	r0, r2, #2
 801a806:	f5a3 2174 	sub.w	r1, r3, #999424	@ 0xf4000
 801a80a:	4282      	cmp	r2, r0
 801a80c:	f5a1 7110 	sub.w	r1, r1, #576	@ 0x240
 801a810:	d1db      	bne.n	801a7ca <Argus_Dev_ApplySync+0x42>
 801a812:	428b      	cmp	r3, r1
 801a814:	bf8c      	ite	hi
 801a816:	2700      	movhi	r7, #0
 801a818:	2701      	movls	r7, #1
 801a81a:	e7d9      	b.n	801a7d0 <Argus_Dev_ApplySync+0x48>
 801a81c:	42a0      	cmp	r0, r4
 801a81e:	d011      	beq.n	801a844 <Argus_Dev_ApplySync+0xbc>
 801a820:	bf34      	ite	cc
 801a822:	2101      	movcc	r1, #1
 801a824:	2100      	movcs	r1, #0
 801a826:	2900      	cmp	r1, #0
 801a828:	d0e8      	beq.n	801a7fc <Argus_Dev_ApplySync+0x74>
 801a82a:	e7d8      	b.n	801a7de <Argus_Dev_ApplySync+0x56>
 801a82c:	42b3      	cmp	r3, r6
 801a82e:	bf8c      	ite	hi
 801a830:	2300      	movhi	r3, #0
 801a832:	2301      	movls	r3, #1
 801a834:	e7d2      	b.n	801a7dc <Argus_Dev_ApplySync+0x54>
 801a836:	42b3      	cmp	r3, r6
 801a838:	d9e0      	bls.n	801a7fc <Argus_Dev_ApplySync+0x74>
 801a83a:	42a0      	cmp	r0, r4
 801a83c:	d1dd      	bne.n	801a7fa <Argus_Dev_ApplySync+0x72>
 801a83e:	428e      	cmp	r6, r1
 801a840:	d2cd      	bcs.n	801a7de <Argus_Dev_ApplySync+0x56>
 801a842:	e7db      	b.n	801a7fc <Argus_Dev_ApplySync+0x74>
 801a844:	428e      	cmp	r6, r1
 801a846:	bf34      	ite	cc
 801a848:	2100      	movcc	r1, #0
 801a84a:	2101      	movcs	r1, #1
 801a84c:	2900      	cmp	r1, #0
 801a84e:	d0d5      	beq.n	801a7fc <Argus_Dev_ApplySync+0x74>
 801a850:	e7c5      	b.n	801a7de <Argus_Dev_ApplySync+0x56>
 801a852:	bf00      	nop
 801a854:	0801782d 	.word	0x0801782d
 801a858:	000f423f 	.word	0x000f423f
 801a85c:	08029d18 	.word	0x08029d18

0801a860 <Argus_Dev_RecoverFromError>:
 801a860:	b570      	push	{r4, r5, r6, lr}
 801a862:	f500 7690 	add.w	r6, r0, #288	@ 0x120
 801a866:	4604      	mov	r4, r0
 801a868:	f7f2 fecc 	bl	800d604 <IRQ_LOCK>
 801a86c:	4630      	mov	r0, r6
 801a86e:	f007 fba7 	bl	8021fc0 <ADS_CheckTimeout>
 801a872:	1e05      	subs	r5, r0, #0
 801a874:	db08      	blt.n	801a888 <Argus_Dev_RecoverFromError+0x28>
 801a876:	6823      	ldr	r3, [r4, #0]
 801a878:	2b64      	cmp	r3, #100	@ 0x64
 801a87a:	d042      	beq.n	801a902 <Argus_Dev_RecoverFromError+0xa2>
 801a87c:	dc31      	bgt.n	801a8e2 <Argus_Dev_RecoverFromError+0x82>
 801a87e:	bbb3      	cbnz	r3, 801a8ee <Argus_Dev_RecoverFromError+0x8e>
 801a880:	4630      	mov	r0, r6
 801a882:	f007 fb8d 	bl	8021fa0 <ADS_GetStatus>
 801a886:	4605      	mov	r5, r0
 801a888:	1deb      	adds	r3, r5, #7
 801a88a:	d033      	beq.n	801a8f4 <Argus_Dev_RecoverFromError+0x94>
 801a88c:	f115 0f65 	cmn.w	r5, #101	@ 0x65
 801a890:	d030      	beq.n	801a8f4 <Argus_Dev_RecoverFromError+0x94>
 801a892:	2d00      	cmp	r5, #0
 801a894:	da35      	bge.n	801a902 <Argus_Dev_RecoverFromError+0xa2>
 801a896:	2300      	movs	r3, #0
 801a898:	6023      	str	r3, [r4, #0]
 801a89a:	f7f2 feb3 	bl	800d604 <IRQ_LOCK>
 801a89e:	6823      	ldr	r3, [r4, #0]
 801a8a0:	bba3      	cbnz	r3, 801a90c <Argus_Dev_RecoverFromError+0xac>
 801a8a2:	23c0      	movs	r3, #192	@ 0xc0
 801a8a4:	6023      	str	r3, [r4, #0]
 801a8a6:	f7f2 fe8b 	bl	800d5c0 <IRQ_UNLOCK>
 801a8aa:	f7f2 fe89 	bl	800d5c0 <IRQ_UNLOCK>
 801a8ae:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 801a8b0:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 801a8b4:	4a23      	ldr	r2, [pc, #140]	@ (801a944 <Argus_Dev_RecoverFromError+0xe4>)
 801a8b6:	f043 0302 	orr.w	r3, r3, #2
 801a8ba:	430a      	orrs	r2, r1
 801a8bc:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 801a8c0:	2101      	movs	r1, #1
 801a8c2:	67a2      	str	r2, [r4, #120]	@ 0x78
 801a8c4:	4620      	mov	r0, r4
 801a8c6:	f7ff ff5f 	bl	801a788 <Argus_Dev_ApplySync>
 801a8ca:	4605      	mov	r5, r0
 801a8cc:	f7f2 fe9a 	bl	800d604 <IRQ_LOCK>
 801a8d0:	6823      	ldr	r3, [r4, #0]
 801a8d2:	2bc0      	cmp	r3, #192	@ 0xc0
 801a8d4:	d10e      	bne.n	801a8f4 <Argus_Dev_RecoverFromError+0x94>
 801a8d6:	2300      	movs	r3, #0
 801a8d8:	6023      	str	r3, [r4, #0]
 801a8da:	f7f2 fe71 	bl	800d5c0 <IRQ_UNLOCK>
 801a8de:	4628      	mov	r0, r5
 801a8e0:	bd70      	pop	{r4, r5, r6, pc}
 801a8e2:	2bc0      	cmp	r3, #192	@ 0xc0
 801a8e4:	dc0a      	bgt.n	801a8fc <Argus_Dev_RecoverFromError+0x9c>
 801a8e6:	2bbe      	cmp	r3, #190	@ 0xbe
 801a8e8:	dc0b      	bgt.n	801a902 <Argus_Dev_RecoverFromError+0xa2>
 801a8ea:	2b67      	cmp	r3, #103	@ 0x67
 801a8ec:	d009      	beq.n	801a902 <Argus_Dev_RecoverFromError+0xa2>
 801a8ee:	6825      	ldr	r5, [r4, #0]
 801a8f0:	1deb      	adds	r3, r5, #7
 801a8f2:	d1cb      	bne.n	801a88c <Argus_Dev_RecoverFromError+0x2c>
 801a8f4:	f7f2 fe64 	bl	800d5c0 <IRQ_UNLOCK>
 801a8f8:	4628      	mov	r0, r5
 801a8fa:	bd70      	pop	{r4, r5, r6, pc}
 801a8fc:	3bc3      	subs	r3, #195	@ 0xc3
 801a8fe:	2b01      	cmp	r3, #1
 801a900:	d8f5      	bhi.n	801a8ee <Argus_Dev_RecoverFromError+0x8e>
 801a902:	2500      	movs	r5, #0
 801a904:	f7f2 fe5c 	bl	800d5c0 <IRQ_UNLOCK>
 801a908:	4628      	mov	r0, r5
 801a90a:	bd70      	pop	{r4, r5, r6, pc}
 801a90c:	6823      	ldr	r3, [r4, #0]
 801a90e:	3371      	adds	r3, #113	@ 0x71
 801a910:	d004      	beq.n	801a91c <Argus_Dev_RecoverFromError+0xbc>
 801a912:	6823      	ldr	r3, [r4, #0]
 801a914:	3372      	adds	r3, #114	@ 0x72
 801a916:	d007      	beq.n	801a928 <Argus_Dev_RecoverFromError+0xc8>
 801a918:	6823      	ldr	r3, [r4, #0]
 801a91a:	e7c4      	b.n	801a8a6 <Argus_Dev_RecoverFromError+0x46>
 801a91c:	f504 70b4 	add.w	r0, r4, #360	@ 0x168
 801a920:	f7fc f82e 	bl	8016980 <Argus_Dca_RecoverLaserFailure>
 801a924:	2800      	cmp	r0, #0
 801a926:	d0f4      	beq.n	801a912 <Argus_Dev_RecoverFromError+0xb2>
 801a928:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 801a92a:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 801a92e:	4a05      	ldr	r2, [pc, #20]	@ (801a944 <Argus_Dev_RecoverFromError+0xe4>)
 801a930:	f043 0302 	orr.w	r3, r3, #2
 801a934:	430a      	orrs	r2, r1
 801a936:	21c0      	movs	r1, #192	@ 0xc0
 801a938:	67a2      	str	r2, [r4, #120]	@ 0x78
 801a93a:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 801a93e:	6021      	str	r1, [r4, #0]
 801a940:	e7b1      	b.n	801a8a6 <Argus_Dev_RecoverFromError+0x46>
 801a942:	bf00      	nop
 801a944:	0003dffe 	.word	0x0003dffe

0801a948 <Argus_Dev_ChargePumpRamp>:
 801a948:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a94a:	6f86      	ldr	r6, [r0, #120]	@ 0x78
 801a94c:	4604      	mov	r4, r0
 801a94e:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 801a950:	f006 7600 	and.w	r6, r6, #33554432	@ 0x2000000
 801a954:	f000 0020 	and.w	r0, r0, #32
 801a958:	4330      	orrs	r0, r6
 801a95a:	e9c4 1243 	strd	r1, r2, [r4, #268]	@ 0x10c
 801a95e:	b085      	sub	sp, #20
 801a960:	d105      	bne.n	801a96e <Argus_Dev_ChargePumpRamp+0x26>
 801a962:	460b      	mov	r3, r1
 801a964:	4611      	mov	r1, r2
 801a966:	b005      	add	sp, #20
 801a968:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a96c:	4718      	bx	r3
 801a96e:	f894 70fb 	ldrb.w	r7, [r4, #251]	@ 0xfb
 801a972:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
 801a976:	f007 073f 	and.w	r7, r7, #63	@ 0x3f
 801a97a:	2f09      	cmp	r7, #9
 801a97c:	a802      	add	r0, sp, #8
 801a97e:	a903      	add	r1, sp, #12
 801a980:	bf94      	ite	ls
 801a982:	8bdd      	ldrhls	r5, [r3, #30]
 801a984:	8c1d      	ldrhhi	r5, [r3, #32]
 801a986:	f7f3 f9eb 	bl	800dd60 <Timer_GetCounterValue>
 801a98a:	f8d4 2118 	ldr.w	r2, [r4, #280]	@ 0x118
 801a98e:	f8dd c008 	ldr.w	ip, [sp, #8]
 801a992:	f8dd e00c 	ldr.w	lr, [sp, #12]
 801a996:	f8d4 1114 	ldr.w	r1, [r4, #276]	@ 0x114
 801a99a:	18ab      	adds	r3, r5, r2
 801a99c:	4d4a      	ldr	r5, [pc, #296]	@ (801aac8 <Argus_Dev_ChargePumpRamp+0x180>)
 801a99e:	bf2c      	ite	cs
 801a9a0:	2001      	movcs	r0, #1
 801a9a2:	2000      	movcc	r0, #0
 801a9a4:	42ab      	cmp	r3, r5
 801a9a6:	d949      	bls.n	801aa3c <Argus_Dev_ChargePumpRamp+0xf4>
 801a9a8:	1c4d      	adds	r5, r1, #1
 801a9aa:	42a9      	cmp	r1, r5
 801a9ac:	f5a3 2374 	sub.w	r3, r3, #999424	@ 0xf4000
 801a9b0:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 801a9b4:	bf2c      	ite	cs
 801a9b6:	2000      	movcs	r0, #0
 801a9b8:	2001      	movcc	r0, #1
 801a9ba:	2800      	cmp	r0, #0
 801a9bc:	d042      	beq.n	801aa44 <Argus_Dev_ChargePumpRamp+0xfc>
 801a9be:	4561      	cmp	r1, ip
 801a9c0:	d058      	beq.n	801aa74 <Argus_Dev_ChargePumpRamp+0x12c>
 801a9c2:	bf34      	ite	cc
 801a9c4:	2201      	movcc	r2, #1
 801a9c6:	2200      	movcs	r2, #0
 801a9c8:	b12a      	cbz	r2, 801a9d6 <Argus_Dev_ChargePumpRamp+0x8e>
 801a9ca:	4565      	cmp	r5, ip
 801a9cc:	d065      	beq.n	801aa9a <Argus_Dev_ChargePumpRamp+0x152>
 801a9ce:	bf34      	ite	cc
 801a9d0:	2301      	movcc	r3, #1
 801a9d2:	2300      	movcs	r3, #0
 801a9d4:	b30b      	cbz	r3, 801aa1a <Argus_Dev_ChargePumpRamp+0xd2>
 801a9d6:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	@ 0xfa
 801a9da:	f894 10fa 	ldrb.w	r1, [r4, #250]	@ 0xfa
 801a9de:	ba5b      	rev16	r3, r3
 801a9e0:	f3c3 1383 	ubfx	r3, r3, #6, #4
 801a9e4:	b3ae      	cbz	r6, 801aa52 <Argus_Dev_ChargePumpRamp+0x10a>
 801a9e6:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801a9e8:	f042 0220 	orr.w	r2, r2, #32
 801a9ec:	67a2      	str	r2, [r4, #120]	@ 0x78
 801a9ee:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801a9f0:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 801a9f4:	2600      	movs	r6, #0
 801a9f6:	67a2      	str	r2, [r4, #120]	@ 0x78
 801a9f8:	f3c3 0297 	ubfx	r2, r3, #2, #24
 801a9fc:	f021 0103 	bic.w	r1, r1, #3
 801aa00:	4311      	orrs	r1, r2
 801aa02:	ea46 1383 	orr.w	r3, r6, r3, lsl #6
 801aa06:	f884 10fa 	strb.w	r1, [r4, #250]	@ 0xfa
 801aa0a:	f884 30fb 	strb.w	r3, [r4, #251]	@ 0xfb
 801aa0e:	f504 718c 	add.w	r1, r4, #280	@ 0x118
 801aa12:	f504 708a 	add.w	r0, r4, #276	@ 0x114
 801aa16:	f7f3 f9a3 	bl	800dd60 <Timer_GetCounterValue>
 801aa1a:	4621      	mov	r1, r4
 801aa1c:	230a      	movs	r3, #10
 801aa1e:	f801 3ff8 	strb.w	r3, [r1, #248]!
 801aa22:	4b2a      	ldr	r3, [pc, #168]	@ (801aacc <Argus_Dev_ChargePumpRamp+0x184>)
 801aa24:	2200      	movs	r2, #0
 801aa26:	e9cd 3400 	strd	r3, r4, [sp]
 801aa2a:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801aa2e:	2305      	movs	r3, #5
 801aa30:	f007 fc4c 	bl	80222cc <ADS_Transfer>
 801aa34:	2800      	cmp	r0, #0
 801aa36:	db17      	blt.n	801aa68 <Argus_Dev_ChargePumpRamp+0x120>
 801aa38:	b005      	add	sp, #20
 801aa3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aa3c:	f080 0001 	eor.w	r0, r0, #1
 801aa40:	460d      	mov	r5, r1
 801aa42:	e7ba      	b.n	801a9ba <Argus_Dev_ChargePumpRamp+0x72>
 801aa44:	4561      	cmp	r1, ip
 801aa46:	d032      	beq.n	801aaae <Argus_Dev_ChargePumpRamp+0x166>
 801aa48:	d3e7      	bcc.n	801aa1a <Argus_Dev_ChargePumpRamp+0xd2>
 801aa4a:	4565      	cmp	r5, ip
 801aa4c:	d02c      	beq.n	801aaa8 <Argus_Dev_ChargePumpRamp+0x160>
 801aa4e:	d2e4      	bcs.n	801aa1a <Argus_Dev_ChargePumpRamp+0xd2>
 801aa50:	e7c1      	b.n	801a9d6 <Argus_Dev_ChargePumpRamp+0x8e>
 801aa52:	f8b4 204d 	ldrh.w	r2, [r4, #77]	@ 0x4d
 801aa56:	ba52      	rev16	r2, r2
 801aa58:	f3c2 1283 	ubfx	r2, r2, #6, #4
 801aa5c:	4293      	cmp	r3, r2
 801aa5e:	d00e      	beq.n	801aa7e <Argus_Dev_ChargePumpRamp+0x136>
 801aa60:	2f00      	cmp	r7, #0
 801aa62:	bf08      	it	eq
 801aa64:	4613      	moveq	r3, r2
 801aa66:	e7c7      	b.n	801a9f8 <Argus_Dev_ChargePumpRamp+0xb0>
 801aa68:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 801aa6c:	b005      	add	sp, #20
 801aa6e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801aa72:	4718      	bx	r3
 801aa74:	4572      	cmp	r2, lr
 801aa76:	bf8c      	ite	hi
 801aa78:	2200      	movhi	r2, #0
 801aa7a:	2201      	movls	r2, #1
 801aa7c:	e7a4      	b.n	801a9c8 <Argus_Dev_ChargePumpRamp+0x80>
 801aa7e:	f894 204e 	ldrb.w	r2, [r4, #78]	@ 0x4e
 801aa82:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801aa86:	4297      	cmp	r7, r2
 801aa88:	d019      	beq.n	801aabe <Argus_Dev_ChargePumpRamp+0x176>
 801aa8a:	db13      	blt.n	801aab4 <Argus_Dev_ChargePumpRamp+0x16c>
 801aa8c:	b102      	cbz	r2, 801aa90 <Argus_Dev_ChargePumpRamp+0x148>
 801aa8e:	1e7e      	subs	r6, r7, #1
 801aa90:	42b2      	cmp	r2, r6
 801aa92:	bfb8      	it	lt
 801aa94:	4632      	movlt	r2, r6
 801aa96:	b256      	sxtb	r6, r2
 801aa98:	e7ae      	b.n	801a9f8 <Argus_Dev_ChargePumpRamp+0xb0>
 801aa9a:	4573      	cmp	r3, lr
 801aa9c:	bf8c      	ite	hi
 801aa9e:	2300      	movhi	r3, #0
 801aaa0:	2301      	movls	r3, #1
 801aaa2:	2b00      	cmp	r3, #0
 801aaa4:	d197      	bne.n	801a9d6 <Argus_Dev_ChargePumpRamp+0x8e>
 801aaa6:	e7b8      	b.n	801aa1a <Argus_Dev_ChargePumpRamp+0xd2>
 801aaa8:	4573      	cmp	r3, lr
 801aaaa:	d994      	bls.n	801a9d6 <Argus_Dev_ChargePumpRamp+0x8e>
 801aaac:	e7b5      	b.n	801aa1a <Argus_Dev_ChargePumpRamp+0xd2>
 801aaae:	4572      	cmp	r2, lr
 801aab0:	d9b3      	bls.n	801aa1a <Argus_Dev_ChargePumpRamp+0xd2>
 801aab2:	e7ca      	b.n	801aa4a <Argus_Dev_ChargePumpRamp+0x102>
 801aab4:	1c7e      	adds	r6, r7, #1
 801aab6:	42b2      	cmp	r2, r6
 801aab8:	bfa8      	it	ge
 801aaba:	4632      	movge	r2, r6
 801aabc:	e7eb      	b.n	801aa96 <Argus_Dev_ChargePumpRamp+0x14e>
 801aabe:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 801aac2:	4630      	mov	r0, r6
 801aac4:	e74f      	b.n	801a966 <Argus_Dev_ChargePumpRamp+0x1e>
 801aac6:	bf00      	nop
 801aac8:	000f423f 	.word	0x000f423f
 801aacc:	08017875 	.word	0x08017875

0801aad0 <Argus_Dev_StartIntegration>:
 801aad0:	b530      	push	{r4, r5, lr}
 801aad2:	e9c0 1241 	strd	r1, r2, [r0, #260]	@ 0x104
 801aad6:	f8d0 511c 	ldr.w	r5, [r0, #284]	@ 0x11c
 801aada:	7f2b      	ldrb	r3, [r5, #28]
 801aadc:	b085      	sub	sp, #20
 801aade:	4604      	mov	r4, r0
 801aae0:	2b00      	cmp	r3, #0
 801aae2:	d04a      	beq.n	801ab7a <Argus_Dev_StartIntegration+0xaa>
 801aae4:	f8b0 006a 	ldrh.w	r0, [r0, #106]	@ 0x6a
 801aae8:	f8b4 2049 	ldrh.w	r2, [r4, #73]	@ 0x49
 801aaec:	ba40      	rev16	r0, r0
 801aaee:	ba52      	rev16	r2, r2
 801aaf0:	f3c0 1049 	ubfx	r0, r0, #5, #10
 801aaf4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 801aaf8:	f3c2 0109 	ubfx	r1, r2, #0, #10
 801aafc:	fb00 3303 	mla	r3, r0, r3, r3
 801ab00:	e9d5 2024 	ldrd	r2, r0, [r5, #144]	@ 0x90
 801ab04:	fb00 2201 	mla	r2, r0, r1, r2
 801ab08:	fba3 3202 	umull	r3, r2, r3, r2
 801ab0c:	f8d4 0100 	ldr.w	r0, [r4, #256]	@ 0x100
 801ab10:	0d99      	lsrs	r1, r3, #22
 801ab12:	ea41 2182 	orr.w	r1, r1, r2, lsl #10
 801ab16:	f3c3 5340 	ubfx	r3, r3, #21, #1
 801ab1a:	0785      	lsls	r5, r0, #30
 801ab1c:	440b      	add	r3, r1
 801ab1e:	d41c      	bmi.n	801ab5a <Argus_Dev_StartIntegration+0x8a>
 801ab20:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 801ab22:	f8b4 005a 	ldrh.w	r0, [r4, #90]	@ 0x5a
 801ab26:	f8a4 0089 	strh.w	r0, [r4, #137]	@ 0x89
 801ab2a:	f421 7100 	bic.w	r1, r1, #512	@ 0x200
 801ab2e:	67a1      	str	r1, [r4, #120]	@ 0x78
 801ab30:	4830      	ldr	r0, [pc, #192]	@ (801abf4 <Argus_Dev_StartIntegration+0x124>)
 801ab32:	4931      	ldr	r1, [pc, #196]	@ (801abf8 <Argus_Dev_StartIntegration+0x128>)
 801ab34:	f104 0288 	add.w	r2, r4, #136	@ 0x88
 801ab38:	2513      	movs	r5, #19
 801ab3a:	f884 5088 	strb.w	r5, [r4, #136]	@ 0x88
 801ab3e:	e9cd 3100 	strd	r3, r1, [sp]
 801ab42:	e9cd 0402 	strd	r0, r4, [sp, #8]
 801ab46:	2303      	movs	r3, #3
 801ab48:	4611      	mov	r1, r2
 801ab4a:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801ab4e:	f007 fb3d 	bl	80221cc <ADS_TransferWithStart>
 801ab52:	2800      	cmp	r0, #0
 801ab54:	db14      	blt.n	801ab80 <Argus_Dev_StartIntegration+0xb0>
 801ab56:	b005      	add	sp, #20
 801ab58:	bd30      	pop	{r4, r5, pc}
 801ab5a:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801ab5c:	0741      	lsls	r1, r0, #29
 801ab5e:	bf4c      	ite	mi
 801ab60:	f5c2 3280 	rsbmi	r2, r2, #65536	@ 0x10000
 801ab64:	f502 3280 	addpl.w	r2, r2, #65536	@ 0x10000
 801ab68:	fba2 3203 	umull	r3, r2, r2, r3
 801ab6c:	0c19      	lsrs	r1, r3, #16
 801ab6e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801ab72:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 801ab76:	440b      	add	r3, r1
 801ab78:	e7d2      	b.n	801ab20 <Argus_Dev_StartIntegration+0x50>
 801ab7a:	f04f 33ff 	mov.w	r3, #4294967295
 801ab7e:	e7cf      	b.n	801ab20 <Argus_Dev_StartIntegration+0x50>
 801ab80:	1d83      	adds	r3, r0, #6
 801ab82:	d10d      	bne.n	801aba0 <Argus_Dev_StartIntegration+0xd0>
 801ab84:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 801ab86:	4b1d      	ldr	r3, [pc, #116]	@ (801abfc <Argus_Dev_StartIntegration+0x12c>)
 801ab88:	f894 20fd 	ldrb.w	r2, [r4, #253]	@ 0xfd
 801ab8c:	430b      	orrs	r3, r1
 801ab8e:	67a3      	str	r3, [r4, #120]	@ 0x78
 801ab90:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801ab92:	f042 0202 	orr.w	r2, r2, #2
 801ab96:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801ab9a:	f884 20fd 	strb.w	r2, [r4, #253]	@ 0xfd
 801ab9e:	67a3      	str	r3, [r4, #120]	@ 0x78
 801aba0:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 801aba4:	22ab      	movs	r2, #171	@ 0xab
 801aba6:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
 801abaa:	b12b      	cbz	r3, 801abb8 <Argus_Dev_StartIntegration+0xe8>
 801abac:	2200      	movs	r2, #0
 801abae:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 801abb2:	f8c4 2104 	str.w	r2, [r4, #260]	@ 0x104
 801abb6:	4798      	blx	r3
 801abb8:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
 801abbc:	f003 0382 	and.w	r3, r3, #130	@ 0x82
 801abc0:	2b02      	cmp	r3, #2
 801abc2:	d1c8      	bne.n	801ab56 <Argus_Dev_StartIntegration+0x86>
 801abc4:	f894 3064 	ldrb.w	r3, [r4, #100]	@ 0x64
 801abc8:	f894 10fd 	ldrb.w	r1, [r4, #253]	@ 0xfd
 801abcc:	f003 0203 	and.w	r2, r3, #3
 801abd0:	3201      	adds	r2, #1
 801abd2:	0095      	lsls	r5, r2, #2
 801abd4:	f023 0303 	bic.w	r3, r3, #3
 801abd8:	f002 0203 	and.w	r2, r2, #3
 801abdc:	4313      	orrs	r3, r2
 801abde:	f021 010c 	bic.w	r1, r1, #12
 801abe2:	f005 020c 	and.w	r2, r5, #12
 801abe6:	430a      	orrs	r2, r1
 801abe8:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 801abec:	f884 20fd 	strb.w	r2, [r4, #253]	@ 0xfd
 801abf0:	e7b1      	b.n	801ab56 <Argus_Dev_StartIntegration+0x86>
 801abf2:	bf00      	nop
 801abf4:	080179fd 	.word	0x080179fd
 801abf8:	08017a89 	.word	0x08017a89
 801abfc:	0003dffe 	.word	0x0003dffe

0801ac00 <Argus_Dev_CheckDeviceConfigRegister>:
 801ac00:	788b      	ldrb	r3, [r1, #2]
 801ac02:	f013 0f40 	tst.w	r3, #64	@ 0x40
 801ac06:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 801ac0a:	bf14      	ite	ne
 801ac0c:	f043 0380 	orrne.w	r3, r3, #128	@ 0x80
 801ac10:	f023 0380 	biceq.w	r3, r3, #128	@ 0x80
 801ac14:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 801ac18:	788b      	ldrb	r3, [r1, #2]
 801ac1a:	069b      	lsls	r3, r3, #26
 801ac1c:	d501      	bpl.n	801ac22 <Argus_Dev_CheckDeviceConfigRegister+0x22>
 801ac1e:	2000      	movs	r0, #0
 801ac20:	4770      	bx	lr
 801ac22:	6f81      	ldr	r1, [r0, #120]	@ 0x78
 801ac24:	4b07      	ldr	r3, [pc, #28]	@ (801ac44 <Argus_Dev_CheckDeviceConfigRegister+0x44>)
 801ac26:	f890 20fd 	ldrb.w	r2, [r0, #253]	@ 0xfd
 801ac2a:	430b      	orrs	r3, r1
 801ac2c:	6783      	str	r3, [r0, #120]	@ 0x78
 801ac2e:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 801ac30:	f042 0202 	orr.w	r2, r2, #2
 801ac34:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801ac38:	f880 20fd 	strb.w	r2, [r0, #253]	@ 0xfd
 801ac3c:	6783      	str	r3, [r0, #120]	@ 0x78
 801ac3e:	f06f 0071 	mvn.w	r0, #113	@ 0x71
 801ac42:	4770      	bx	lr
 801ac44:	0003dffe 	.word	0x0003dffe

0801ac48 <Argus_Dev_DetuneClock>:
 801ac48:	b570      	push	{r4, r5, r6, lr}
 801ac4a:	f8d0 5100 	ldr.w	r5, [r0, #256]	@ 0x100
 801ac4e:	f8c0 1104 	str.w	r1, [r0, #260]	@ 0x104
 801ac52:	4604      	mov	r4, r0
 801ac54:	f8c0 2108 	str.w	r2, [r0, #264]	@ 0x108
 801ac58:	f015 0002 	ands.w	r0, r5, #2
 801ac5c:	b082      	sub	sp, #8
 801ac5e:	d107      	bne.n	801ac70 <Argus_Dev_DetuneClock+0x28>
 801ac60:	460b      	mov	r3, r1
 801ac62:	2900      	cmp	r1, #0
 801ac64:	d071      	beq.n	801ad4a <Argus_Dev_DetuneClock+0x102>
 801ac66:	4611      	mov	r1, r2
 801ac68:	b002      	add	sp, #8
 801ac6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ac6e:	4718      	bx	r3
 801ac70:	f085 0504 	eor.w	r5, r5, #4
 801ac74:	07a8      	lsls	r0, r5, #30
 801ac76:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
 801ac7a:	f8c4 5100 	str.w	r5, [r4, #256]	@ 0x100
 801ac7e:	d567      	bpl.n	801ad50 <Argus_Dev_DetuneClock+0x108>
 801ac80:	f893 20a8 	ldrb.w	r2, [r3, #168]	@ 0xa8
 801ac84:	f8d4 01d4 	ldr.w	r0, [r4, #468]	@ 0x1d4
 801ac88:	0769      	lsls	r1, r5, #29
 801ac8a:	bf4c      	ite	mi
 801ac8c:	eb03 0342 	addmi.w	r3, r3, r2, lsl #1
 801ac90:	3257      	addpl	r2, #87	@ 0x57
 801ac92:	f9b0 6028 	ldrsh.w	r6, [r0, #40]	@ 0x28
 801ac96:	bf4c      	ite	mi
 801ac98:	f8b3 50b2 	ldrhmi.w	r5, [r3, #178]	@ 0xb2
 801ac9c:	f833 5012 	ldrhpl.w	r5, [r3, r2, lsl #1]
 801aca0:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801aca4:	429e      	cmp	r6, r3
 801aca6:	d060      	beq.n	801ad6a <Argus_Dev_DetuneClock+0x122>
 801aca8:	f002 f9d2 	bl	801d050 <Argus_Cal_GetCalibrationPtr>
 801acac:	7e02      	ldrb	r2, [r0, #24]
 801acae:	fb12 f206 	smulbb	r2, r2, r6
 801acb2:	10d2      	asrs	r2, r2, #3
 801acb4:	fb05 f202 	mul.w	r2, r5, r2
 801acb8:	2a00      	cmp	r2, #0
 801acba:	da61      	bge.n	801ad80 <Argus_Dev_DetuneClock+0x138>
 801acbc:	4253      	negs	r3, r2
 801acbe:	f3c3 5280 	ubfx	r2, r3, #22, #1
 801acc2:	eb02 52d3 	add.w	r2, r2, r3, lsr #23
 801acc6:	4252      	negs	r2, r2
 801acc8:	b251      	sxtb	r1, r2
 801acca:	1a69      	subs	r1, r5, r1
 801accc:	b2d3      	uxtb	r3, r2
 801acce:	f894 2064 	ldrb.w	r2, [r4, #100]	@ 0x64
 801acd2:	f3c1 01d7 	ubfx	r1, r1, #3, #24
 801acd6:	f884 1063 	strb.w	r1, [r4, #99]	@ 0x63
 801acda:	f8b4 1057 	ldrh.w	r1, [r4, #87]	@ 0x57
 801acde:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 801ace0:	f8c4 008a 	str.w	r0, [r4, #138]	@ 0x8a
 801ace4:	f002 021f 	and.w	r2, r2, #31
 801ace8:	1aeb      	subs	r3, r5, r3
 801acea:	ea42 1343 	orr.w	r3, r2, r3, lsl #5
 801acee:	4828      	ldr	r0, [pc, #160]	@ (801ad90 <Argus_Dev_DetuneClock+0x148>)
 801acf0:	f8a4 108f 	strh.w	r1, [r4, #143]	@ 0x8f
 801acf4:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801acf8:	f022 0210 	bic.w	r2, r2, #16
 801acfc:	2110      	movs	r1, #16
 801acfe:	2516      	movs	r5, #22
 801ad00:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 801ad04:	f884 308e 	strb.w	r3, [r4, #142]	@ 0x8e
 801ad08:	f884 2089 	strb.w	r2, [r4, #137]	@ 0x89
 801ad0c:	f884 1088 	strb.w	r1, [r4, #136]	@ 0x88
 801ad10:	f884 108f 	strb.w	r1, [r4, #143]	@ 0x8f
 801ad14:	f884 508a 	strb.w	r5, [r4, #138]	@ 0x8a
 801ad18:	2309      	movs	r3, #9
 801ad1a:	e9cd 0400 	strd	r0, r4, [sp]
 801ad1e:	2200      	movs	r2, #0
 801ad20:	f104 0188 	add.w	r1, r4, #136	@ 0x88
 801ad24:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801ad28:	f007 fad0 	bl	80222cc <ADS_Transfer>
 801ad2c:	1e03      	subs	r3, r0, #0
 801ad2e:	da0c      	bge.n	801ad4a <Argus_Dev_DetuneClock+0x102>
 801ad30:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801ad32:	4918      	ldr	r1, [pc, #96]	@ (801ad94 <Argus_Dev_DetuneClock+0x14c>)
 801ad34:	4311      	orrs	r1, r2
 801ad36:	f894 20fd 	ldrb.w	r2, [r4, #253]	@ 0xfd
 801ad3a:	67a1      	str	r1, [r4, #120]	@ 0x78
 801ad3c:	f042 0202 	orr.w	r2, r2, #2
 801ad40:	f884 20fd 	strb.w	r2, [r4, #253]	@ 0xfd
 801ad44:	f8d4 2104 	ldr.w	r2, [r4, #260]	@ 0x104
 801ad48:	b9a2      	cbnz	r2, 801ad74 <Argus_Dev_DetuneClock+0x12c>
 801ad4a:	4618      	mov	r0, r3
 801ad4c:	b002      	add	sp, #8
 801ad4e:	bd70      	pop	{r4, r5, r6, pc}
 801ad50:	f8b3 3079 	ldrh.w	r3, [r3, #121]	@ 0x79
 801ad54:	f8d4 01d4 	ldr.w	r0, [r4, #468]	@ 0x1d4
 801ad58:	ba5b      	rev16	r3, r3
 801ad5a:	f9b0 6028 	ldrsh.w	r6, [r0, #40]	@ 0x28
 801ad5e:	f3c3 154a 	ubfx	r5, r3, #5, #11
 801ad62:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801ad66:	429e      	cmp	r6, r3
 801ad68:	d19e      	bne.n	801aca8 <Argus_Dev_DetuneClock+0x60>
 801ad6a:	f002 f971 	bl	801d050 <Argus_Cal_GetCalibrationPtr>
 801ad6e:	4629      	mov	r1, r5
 801ad70:	2300      	movs	r3, #0
 801ad72:	e7ac      	b.n	801acce <Argus_Dev_DetuneClock+0x86>
 801ad74:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 801ad78:	b002      	add	sp, #8
 801ad7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ad7e:	4710      	bx	r2
 801ad80:	f3c2 5180 	ubfx	r1, r2, #22, #1
 801ad84:	eb01 52d2 	add.w	r2, r1, r2, lsr #23
 801ad88:	b251      	sxtb	r1, r2
 801ad8a:	1a69      	subs	r1, r5, r1
 801ad8c:	b2d3      	uxtb	r3, r2
 801ad8e:	e79e      	b.n	801acce <Argus_Dev_DetuneClock+0x86>
 801ad90:	08017831 	.word	0x08017831
 801ad94:	0003dffe 	.word	0x0003dffe

0801ad98 <Argus_Dev_ReadEEPROM>:
 801ad98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad9c:	2300      	movs	r3, #0
 801ad9e:	b095      	sub	sp, #84	@ 0x54
 801ada0:	600b      	str	r3, [r1, #0]
 801ada2:	604b      	str	r3, [r1, #4]
 801ada4:	608b      	str	r3, [r1, #8]
 801ada6:	60cb      	str	r3, [r1, #12]
 801ada8:	e9cd 3300 	strd	r3, r3, [sp]
 801adac:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801adb0:	e9cd 3306 	strd	r3, r3, [sp, #24]
 801adb4:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 801adb8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801adbc:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801adc0:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
 801adc4:	f890 305b 	ldrb.w	r3, [r0, #91]	@ 0x5b
 801adc8:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 801adca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801adce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801add2:	f023 0320 	bic.w	r3, r3, #32
 801add6:	6782      	str	r2, [r0, #120]	@ 0x78
 801add8:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 801addc:	aa0e      	add	r2, sp, #56	@ 0x38
 801adde:	2312      	movs	r3, #18
 801ade0:	460e      	mov	r6, r1
 801ade2:	f500 7790 	add.w	r7, r0, #288	@ 0x120
 801ade6:	f8b0 1059 	ldrh.w	r1, [r0, #89]	@ 0x59
 801adea:	f8ad 1038 	strh.w	r1, [sp, #56]	@ 0x38
 801adee:	4604      	mov	r4, r0
 801adf0:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
 801adf4:	f100 0b59 	add.w	fp, r0, #89	@ 0x59
 801adf8:	2303      	movs	r3, #3
 801adfa:	4611      	mov	r1, r2
 801adfc:	4638      	mov	r0, r7
 801adfe:	f007 fa65 	bl	80222cc <ADS_Transfer>
 801ae02:	1e05      	subs	r5, r0, #0
 801ae04:	db4d      	blt.n	801aea2 <Argus_Dev_ReadEEPROM+0x10a>
 801ae06:	2164      	movs	r1, #100	@ 0x64
 801ae08:	4638      	mov	r0, r7
 801ae0a:	f007 f943 	bl	8022094 <ADS_AwaitIdle>
 801ae0e:	1e05      	subs	r5, r0, #0
 801ae10:	db4b      	blt.n	801aeaa <Argus_Dev_ReadEEPROM+0x112>
 801ae12:	f89d 203a 	ldrb.w	r2, [sp, #58]	@ 0x3a
 801ae16:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
 801ae1a:	0651      	lsls	r1, r2, #25
 801ae1c:	bf4c      	ite	mi
 801ae1e:	f043 0380 	orrmi.w	r3, r3, #128	@ 0x80
 801ae22:	f023 0380 	bicpl.w	r3, r3, #128	@ 0x80
 801ae26:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
 801ae2a:	0693      	lsls	r3, r2, #26
 801ae2c:	f140 8119 	bpl.w	801b062 <Argus_Dev_ReadEEPROM+0x2ca>
 801ae30:	a902      	add	r1, sp, #8
 801ae32:	4638      	mov	r0, r7
 801ae34:	f007 fba4 	bl	8022580 <ADS_ReadEEPROM>
 801ae38:	a906      	add	r1, sp, #24
 801ae3a:	4682      	mov	sl, r0
 801ae3c:	4638      	mov	r0, r7
 801ae3e:	f007 fb9f 	bl	8022580 <ADS_ReadEEPROM>
 801ae42:	a90a      	add	r1, sp, #40	@ 0x28
 801ae44:	4680      	mov	r8, r0
 801ae46:	4638      	mov	r0, r7
 801ae48:	f007 fb9a 	bl	8022580 <ADS_ReadEEPROM>
 801ae4c:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801ae50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801ae54:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 801ae58:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801ae5a:	2200      	movs	r2, #0
 801ae5c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801ae60:	67a3      	str	r3, [r4, #120]	@ 0x78
 801ae62:	e9cd 2200 	strd	r2, r2, [sp]
 801ae66:	f8b4 3059 	ldrh.w	r3, [r4, #89]	@ 0x59
 801ae6a:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801ae6e:	2312      	movs	r3, #18
 801ae70:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
 801ae74:	4681      	mov	r9, r0
 801ae76:	2303      	movs	r3, #3
 801ae78:	a90e      	add	r1, sp, #56	@ 0x38
 801ae7a:	4638      	mov	r0, r7
 801ae7c:	f007 fa26 	bl	80222cc <ADS_Transfer>
 801ae80:	1e05      	subs	r5, r0, #0
 801ae82:	db05      	blt.n	801ae90 <Argus_Dev_ReadEEPROM+0xf8>
 801ae84:	4638      	mov	r0, r7
 801ae86:	2164      	movs	r1, #100	@ 0x64
 801ae88:	f007 f904 	bl	8022094 <ADS_AwaitIdle>
 801ae8c:	1e05      	subs	r5, r0, #0
 801ae8e:	db61      	blt.n	801af54 <Argus_Dev_ReadEEPROM+0x1bc>
 801ae90:	9b02      	ldr	r3, [sp, #8]
 801ae92:	9a06      	ldr	r2, [sp, #24]
 801ae94:	4293      	cmp	r3, r2
 801ae96:	d010      	beq.n	801aeba <Argus_Dev_ReadEEPROM+0x122>
 801ae98:	487a      	ldr	r0, [pc, #488]	@ (801b084 <Argus_Dev_ReadEEPROM+0x2ec>)
 801ae9a:	f7f3 f839 	bl	800df10 <print>
 801ae9e:	f06f 056c 	mvn.w	r5, #108	@ 0x6c
 801aea2:	4628      	mov	r0, r5
 801aea4:	b015      	add	sp, #84	@ 0x54
 801aea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aeaa:	4629      	mov	r1, r5
 801aeac:	4876      	ldr	r0, [pc, #472]	@ (801b088 <Argus_Dev_ReadEEPROM+0x2f0>)
 801aeae:	f7f3 f82f 	bl	800df10 <print>
 801aeb2:	4628      	mov	r0, r5
 801aeb4:	b015      	add	sp, #84	@ 0x54
 801aeb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aeba:	9a03      	ldr	r2, [sp, #12]
 801aebc:	9907      	ldr	r1, [sp, #28]
 801aebe:	428a      	cmp	r2, r1
 801aec0:	d1ea      	bne.n	801ae98 <Argus_Dev_ReadEEPROM+0x100>
 801aec2:	9904      	ldr	r1, [sp, #16]
 801aec4:	9808      	ldr	r0, [sp, #32]
 801aec6:	4281      	cmp	r1, r0
 801aec8:	d1e6      	bne.n	801ae98 <Argus_Dev_ReadEEPROM+0x100>
 801aeca:	9f05      	ldr	r7, [sp, #20]
 801aecc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801aece:	4287      	cmp	r7, r0
 801aed0:	d1e2      	bne.n	801ae98 <Argus_Dev_ReadEEPROM+0x100>
 801aed2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801aed4:	4283      	cmp	r3, r0
 801aed6:	d1df      	bne.n	801ae98 <Argus_Dev_ReadEEPROM+0x100>
 801aed8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801aeda:	429a      	cmp	r2, r3
 801aedc:	d1dc      	bne.n	801ae98 <Argus_Dev_ReadEEPROM+0x100>
 801aede:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aee0:	4299      	cmp	r1, r3
 801aee2:	d1d9      	bne.n	801ae98 <Argus_Dev_ReadEEPROM+0x100>
 801aee4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801aee6:	429f      	cmp	r7, r3
 801aee8:	d1d6      	bne.n	801ae98 <Argus_Dev_ReadEEPROM+0x100>
 801aeea:	f1ba 0f6d 	cmp.w	sl, #109	@ 0x6d
 801aeee:	f04f 0300 	mov.w	r3, #0
 801aef2:	d04c      	beq.n	801af8e <Argus_Dev_ReadEEPROM+0x1f6>
 801aef4:	f1b8 0f6d 	cmp.w	r8, #109	@ 0x6d
 801aef8:	d049      	beq.n	801af8e <Argus_Dev_ReadEEPROM+0x1f6>
 801aefa:	f1b9 0f6d 	cmp.w	r9, #109	@ 0x6d
 801aefe:	d046      	beq.n	801af8e <Argus_Dev_ReadEEPROM+0x1f6>
 801af00:	af02      	add	r7, sp, #8
 801af02:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
 801af06:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
 801af0a:	9312      	str	r3, [sp, #72]	@ 0x48
 801af0c:	f8ad 304c 	strh.w	r3, [sp, #76]	@ 0x4c
 801af10:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801af12:	6030      	str	r0, [r6, #0]
 801af14:	6071      	str	r1, [r6, #4]
 801af16:	60f3      	str	r3, [r6, #12]
 801af18:	60b2      	str	r2, [r6, #8]
 801af1a:	4631      	mov	r1, r6
 801af1c:	a80e      	add	r0, sp, #56	@ 0x38
 801af1e:	f7f5 f9a5 	bl	801026c <EEPROM_Decode>
 801af22:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	@ 0x4a
 801af26:	2b01      	cmp	r3, #1
 801af28:	d059      	beq.n	801afde <Argus_Dev_ReadEEPROM+0x246>
 801af2a:	2b00      	cmp	r3, #0
 801af2c:	d137      	bne.n	801af9e <Argus_Dev_ReadEEPROM+0x206>
 801af2e:	4630      	mov	r0, r6
 801af30:	f9bd 704c 	ldrsh.w	r7, [sp, #76]	@ 0x4c
 801af34:	f7f5 f966 	bl	8010204 <EEPROM_ReadChipId>
 801af38:	6060      	str	r0, [r4, #4]
 801af3a:	4630      	mov	r0, r6
 801af3c:	f7f5 f970 	bl	8010220 <EEPROM_ReadModule>
 801af40:	1e43      	subs	r3, r0, #1
 801af42:	72a0      	strb	r0, [r4, #10]
 801af44:	2b06      	cmp	r3, #6
 801af46:	d80e      	bhi.n	801af66 <Argus_Dev_ReadEEPROM+0x1ce>
 801af48:	e8df f003 	tbb	[pc, r3]
 801af4c:	1709090b 	.word	0x1709090b
 801af50:	0909      	.short	0x0909
 801af52:	09          	.byte	0x09
 801af53:	00          	.byte	0x00
 801af54:	4629      	mov	r1, r5
 801af56:	484d      	ldr	r0, [pc, #308]	@ (801b08c <Argus_Dev_ReadEEPROM+0x2f4>)
 801af58:	f7f2 ffda 	bl	800df10 <print>
 801af5c:	e798      	b.n	801ae90 <Argus_Dev_ReadEEPROM+0xf8>
 801af5e:	2f00      	cmp	r7, #0
 801af60:	d13a      	bne.n	801afd8 <Argus_Dev_ReadEEPROM+0x240>
 801af62:	2301      	movs	r3, #1
 801af64:	7263      	strb	r3, [r4, #9]
 801af66:	7a23      	ldrb	r3, [r4, #8]
 801af68:	2b02      	cmp	r3, #2
 801af6a:	d073      	beq.n	801b054 <Argus_Dev_ReadEEPROM+0x2bc>
 801af6c:	2b02      	cmp	r3, #2
 801af6e:	d807      	bhi.n	801af80 <Argus_Dev_ReadEEPROM+0x1e8>
 801af70:	2b01      	cmp	r3, #1
 801af72:	d096      	beq.n	801aea2 <Argus_Dev_ReadEEPROM+0x10a>
 801af74:	2300      	movs	r3, #0
 801af76:	7223      	strb	r3, [r4, #8]
 801af78:	e793      	b.n	801aea2 <Argus_Dev_ReadEEPROM+0x10a>
 801af7a:	2303      	movs	r3, #3
 801af7c:	7263      	strb	r3, [r4, #9]
 801af7e:	e7f2      	b.n	801af66 <Argus_Dev_ReadEEPROM+0x1ce>
 801af80:	3b03      	subs	r3, #3
 801af82:	2b02      	cmp	r3, #2
 801af84:	d8f6      	bhi.n	801af74 <Argus_Dev_ReadEEPROM+0x1dc>
 801af86:	4628      	mov	r0, r5
 801af88:	b015      	add	sp, #84	@ 0x54
 801af8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af8e:	4840      	ldr	r0, [pc, #256]	@ (801b090 <Argus_Dev_ReadEEPROM+0x2f8>)
 801af90:	f7f2 ffbe 	bl	800df10 <print>
 801af94:	256d      	movs	r5, #109	@ 0x6d
 801af96:	4628      	mov	r0, r5
 801af98:	b015      	add	sp, #84	@ 0x54
 801af9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af9e:	4630      	mov	r0, r6
 801afa0:	f7f5 f930 	bl	8010204 <EEPROM_ReadChipId>
 801afa4:	6060      	str	r0, [r4, #4]
 801afa6:	4630      	mov	r0, r6
 801afa8:	f7f5 f93a 	bl	8010220 <EEPROM_ReadModule>
 801afac:	1e43      	subs	r3, r0, #1
 801afae:	72a0      	strb	r0, [r4, #10]
 801afb0:	2b06      	cmp	r3, #6
 801afb2:	d8d8      	bhi.n	801af66 <Argus_Dev_ReadEEPROM+0x1ce>
 801afb4:	a201      	add	r2, pc, #4	@ (adr r2, 801afbc <Argus_Dev_ReadEEPROM+0x224>)
 801afb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801afba:	bf00      	nop
 801afbc:	0801af63 	.word	0x0801af63
 801afc0:	0801afd9 	.word	0x0801afd9
 801afc4:	0801afd9 	.word	0x0801afd9
 801afc8:	0801af7b 	.word	0x0801af7b
 801afcc:	0801afd9 	.word	0x0801afd9
 801afd0:	0801afd9 	.word	0x0801afd9
 801afd4:	0801afd9 	.word	0x0801afd9
 801afd8:	2302      	movs	r3, #2
 801afda:	7263      	strb	r3, [r4, #9]
 801afdc:	e7c3      	b.n	801af66 <Argus_Dev_ReadEEPROM+0x1ce>
 801afde:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	@ 0x4c
 801afe2:	2b03      	cmp	r3, #3
 801afe4:	d1db      	bne.n	801af9e <Argus_Dev_ReadEEPROM+0x206>
 801afe6:	4630      	mov	r0, r6
 801afe8:	f7f5 f90c 	bl	8010204 <EEPROM_ReadChipId>
 801afec:	6060      	str	r0, [r4, #4]
 801afee:	4630      	mov	r0, r6
 801aff0:	f7f5 f916 	bl	8010220 <EEPROM_ReadModule>
 801aff4:	1e43      	subs	r3, r0, #1
 801aff6:	72a0      	strb	r0, [r4, #10]
 801aff8:	2b06      	cmp	r3, #6
 801affa:	d8b4      	bhi.n	801af66 <Argus_Dev_ReadEEPROM+0x1ce>
 801affc:	a201      	add	r2, pc, #4	@ (adr r2, 801b004 <Argus_Dev_ReadEEPROM+0x26c>)
 801affe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b002:	bf00      	nop
 801b004:	0801af63 	.word	0x0801af63
 801b008:	0801b021 	.word	0x0801b021
 801b00c:	0801b021 	.word	0x0801b021
 801b010:	0801b04b 	.word	0x0801b04b
 801b014:	0801b021 	.word	0x0801b021
 801b018:	0801b021 	.word	0x0801b021
 801b01c:	0801b021 	.word	0x0801b021
 801b020:	7a23      	ldrb	r3, [r4, #8]
 801b022:	2204      	movs	r2, #4
 801b024:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 801b028:	2b02      	cmp	r3, #2
 801b02a:	7262      	strb	r2, [r4, #9]
 801b02c:	72a0      	strb	r0, [r4, #10]
 801b02e:	d19d      	bne.n	801af6c <Argus_Dev_ReadEEPROM+0x1d4>
 801b030:	7aa3      	ldrb	r3, [r4, #10]
 801b032:	3b43      	subs	r3, #67	@ 0x43
 801b034:	2b04      	cmp	r3, #4
 801b036:	f63f af34 	bhi.w	801aea2 <Argus_Dev_ReadEEPROM+0x10a>
 801b03a:	4a16      	ldr	r2, [pc, #88]	@ (801b094 <Argus_Dev_ReadEEPROM+0x2fc>)
 801b03c:	6863      	ldr	r3, [r4, #4]
 801b03e:	4293      	cmp	r3, r2
 801b040:	bf8c      	ite	hi
 801b042:	2305      	movhi	r3, #5
 801b044:	2303      	movls	r3, #3
 801b046:	7223      	strb	r3, [r4, #8]
 801b048:	e72b      	b.n	801aea2 <Argus_Dev_ReadEEPROM+0x10a>
 801b04a:	f244 4305 	movw	r3, #17413	@ 0x4405
 801b04e:	f8a4 3009 	strh.w	r3, [r4, #9]
 801b052:	e788      	b.n	801af66 <Argus_Dev_ReadEEPROM+0x1ce>
 801b054:	7aa3      	ldrb	r3, [r4, #10]
 801b056:	2b07      	cmp	r3, #7
 801b058:	d8eb      	bhi.n	801b032 <Argus_Dev_ReadEEPROM+0x29a>
 801b05a:	2b01      	cmp	r3, #1
 801b05c:	f67f af21 	bls.w	801aea2 <Argus_Dev_ReadEEPROM+0x10a>
 801b060:	e7eb      	b.n	801b03a <Argus_Dev_ReadEEPROM+0x2a2>
 801b062:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 801b064:	4b0c      	ldr	r3, [pc, #48]	@ (801b098 <Argus_Dev_ReadEEPROM+0x300>)
 801b066:	f894 20fd 	ldrb.w	r2, [r4, #253]	@ 0xfd
 801b06a:	430b      	orrs	r3, r1
 801b06c:	67a3      	str	r3, [r4, #120]	@ 0x78
 801b06e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801b070:	f042 0202 	orr.w	r2, r2, #2
 801b074:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801b078:	f884 20fd 	strb.w	r2, [r4, #253]	@ 0xfd
 801b07c:	67a3      	str	r3, [r4, #120]	@ 0x78
 801b07e:	f06f 0571 	mvn.w	r5, #113	@ 0x71
 801b082:	e70e      	b.n	801aea2 <Argus_Dev_ReadEEPROM+0x10a>
 801b084:	08029dcc 	.word	0x08029dcc
 801b088:	08029d58 	.word	0x08029d58
 801b08c:	08029d90 	.word	0x08029d90
 801b090:	08029ea8 	.word	0x08029ea8
 801b094:	000493e0 	.word	0x000493e0
 801b098:	0003dffe 	.word	0x0003dffe

0801b09c <GetStatusCallback>:
 801b09c:	6008      	str	r0, [r1, #0]
 801b09e:	4770      	bx	lr

0801b0a0 <AuxMeasurementFinish>:
 801b0a0:	f8d2 3104 	ldr.w	r3, [r2, #260]	@ 0x104
 801b0a4:	b143      	cbz	r3, 801b0b8 <AuxMeasurementFinish+0x18>
 801b0a6:	b410      	push	{r4}
 801b0a8:	2400      	movs	r4, #0
 801b0aa:	f8c2 4104 	str.w	r4, [r2, #260]	@ 0x104
 801b0ae:	f8d2 1108 	ldr.w	r1, [r2, #264]	@ 0x108
 801b0b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b0b6:	4718      	bx	r3
 801b0b8:	4770      	bx	lr
 801b0ba:	bf00      	nop

0801b0bc <AuxMeasurementStarted>:
 801b0bc:	2800      	cmp	r0, #0
 801b0be:	b508      	push	{r3, lr}
 801b0c0:	460b      	mov	r3, r1
 801b0c2:	da09      	bge.n	801b0d8 <AuxMeasurementStarted+0x1c>
 801b0c4:	6f88      	ldr	r0, [r1, #120]	@ 0x78
 801b0c6:	f891 20fd 	ldrb.w	r2, [r1, #253]	@ 0xfd
 801b0ca:	4909      	ldr	r1, [pc, #36]	@ (801b0f0 <AuxMeasurementStarted+0x34>)
 801b0cc:	f042 0202 	orr.w	r2, r2, #2
 801b0d0:	4301      	orrs	r1, r0
 801b0d2:	6799      	str	r1, [r3, #120]	@ 0x78
 801b0d4:	f883 20fd 	strb.w	r2, [r3, #253]	@ 0xfd
 801b0d8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 801b0da:	0592      	lsls	r2, r2, #22
 801b0dc:	d401      	bmi.n	801b0e2 <AuxMeasurementStarted+0x26>
 801b0de:	2000      	movs	r0, #0
 801b0e0:	bd08      	pop	{r3, pc}
 801b0e2:	f103 0188 	add.w	r1, r3, #136	@ 0x88
 801b0e6:	4618      	mov	r0, r3
 801b0e8:	f7ff fd8a 	bl	801ac00 <Argus_Dev_CheckDeviceConfigRegister>
 801b0ec:	2000      	movs	r0, #0
 801b0ee:	bd08      	pop	{r3, pc}
 801b0f0:	0003dffe 	.word	0x0003dffe

0801b0f4 <ChargePumpRampSync.constprop.0>:
 801b0f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b0f6:	b087      	sub	sp, #28
 801b0f8:	2300      	movs	r3, #0
 801b0fa:	2202      	movs	r2, #2
 801b0fc:	4604      	mov	r4, r0
 801b0fe:	a903      	add	r1, sp, #12
 801b100:	a802      	add	r0, sp, #8
 801b102:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b106:	9201      	str	r2, [sp, #4]
 801b108:	f7f2 fe2a 	bl	800dd60 <Timer_GetCounterValue>
 801b10c:	4929      	ldr	r1, [pc, #164]	@ (801b1b4 <ChargePumpRampSync.constprop.0+0xc0>)
 801b10e:	aa01      	add	r2, sp, #4
 801b110:	4620      	mov	r0, r4
 801b112:	f7ff fc19 	bl	801a948 <Argus_Dev_ChargePumpRamp>
 801b116:	2800      	cmp	r0, #0
 801b118:	db22      	blt.n	801b160 <ChargePumpRampSync.constprop.0+0x6c>
 801b11a:	4c27      	ldr	r4, [pc, #156]	@ (801b1b8 <ChargePumpRampSync.constprop.0+0xc4>)
 801b11c:	4d27      	ldr	r5, [pc, #156]	@ (801b1bc <ChargePumpRampSync.constprop.0+0xc8>)
 801b11e:	a804      	add	r0, sp, #16
 801b120:	a905      	add	r1, sp, #20
 801b122:	f7f2 fe1d 	bl	800dd60 <Timer_GetCounterValue>
 801b126:	e9dd 2603 	ldrd	r2, r6, [sp, #12]
 801b12a:	1913      	adds	r3, r2, r4
 801b12c:	bf2c      	ite	cs
 801b12e:	2001      	movcs	r0, #1
 801b130:	2000      	movcc	r0, #0
 801b132:	42ab      	cmp	r3, r5
 801b134:	9f05      	ldr	r7, [sp, #20]
 801b136:	9902      	ldr	r1, [sp, #8]
 801b138:	d814      	bhi.n	801b164 <ChargePumpRampSync.constprop.0+0x70>
 801b13a:	f080 0001 	eor.w	r0, r0, #1
 801b13e:	468c      	mov	ip, r1
 801b140:	b1d8      	cbz	r0, 801b17a <ChargePumpRampSync.constprop.0+0x86>
 801b142:	42b1      	cmp	r1, r6
 801b144:	d023      	beq.n	801b18e <ChargePumpRampSync.constprop.0+0x9a>
 801b146:	bf34      	ite	cc
 801b148:	2201      	movcc	r2, #1
 801b14a:	2200      	movcs	r2, #0
 801b14c:	b1da      	cbz	r2, 801b186 <ChargePumpRampSync.constprop.0+0x92>
 801b14e:	45b4      	cmp	ip, r6
 801b150:	d02b      	beq.n	801b1aa <ChargePumpRampSync.constprop.0+0xb6>
 801b152:	bf34      	ite	cc
 801b154:	2301      	movcc	r3, #1
 801b156:	2300      	movcs	r3, #0
 801b158:	b9ab      	cbnz	r3, 801b186 <ChargePumpRampSync.constprop.0+0x92>
 801b15a:	9801      	ldr	r0, [sp, #4]
 801b15c:	2802      	cmp	r0, #2
 801b15e:	d0de      	beq.n	801b11e <ChargePumpRampSync.constprop.0+0x2a>
 801b160:	b007      	add	sp, #28
 801b162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b164:	f101 0c01 	add.w	ip, r1, #1
 801b168:	4561      	cmp	r1, ip
 801b16a:	f5a2 235b 	sub.w	r3, r2, #897024	@ 0xdb000
 801b16e:	f5a3 633a 	sub.w	r3, r3, #2976	@ 0xba0
 801b172:	bf2c      	ite	cs
 801b174:	2000      	movcs	r0, #0
 801b176:	2001      	movcc	r0, #1
 801b178:	e7e2      	b.n	801b140 <ChargePumpRampSync.constprop.0+0x4c>
 801b17a:	42b1      	cmp	r1, r6
 801b17c:	d00c      	beq.n	801b198 <ChargePumpRampSync.constprop.0+0xa4>
 801b17e:	d3ec      	bcc.n	801b15a <ChargePumpRampSync.constprop.0+0x66>
 801b180:	45b4      	cmp	ip, r6
 801b182:	d00d      	beq.n	801b1a0 <ChargePumpRampSync.constprop.0+0xac>
 801b184:	d2e9      	bcs.n	801b15a <ChargePumpRampSync.constprop.0+0x66>
 801b186:	f06f 0005 	mvn.w	r0, #5
 801b18a:	b007      	add	sp, #28
 801b18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b18e:	42ba      	cmp	r2, r7
 801b190:	bf8c      	ite	hi
 801b192:	2200      	movhi	r2, #0
 801b194:	2201      	movls	r2, #1
 801b196:	e7d9      	b.n	801b14c <ChargePumpRampSync.constprop.0+0x58>
 801b198:	42ba      	cmp	r2, r7
 801b19a:	d9de      	bls.n	801b15a <ChargePumpRampSync.constprop.0+0x66>
 801b19c:	45b4      	cmp	ip, r6
 801b19e:	d1f1      	bne.n	801b184 <ChargePumpRampSync.constprop.0+0x90>
 801b1a0:	42bb      	cmp	r3, r7
 801b1a2:	d8da      	bhi.n	801b15a <ChargePumpRampSync.constprop.0+0x66>
 801b1a4:	f06f 0005 	mvn.w	r0, #5
 801b1a8:	e7ef      	b.n	801b18a <ChargePumpRampSync.constprop.0+0x96>
 801b1aa:	42bb      	cmp	r3, r7
 801b1ac:	bf8c      	ite	hi
 801b1ae:	2300      	movhi	r3, #0
 801b1b0:	2301      	movls	r3, #1
 801b1b2:	e7d1      	b.n	801b158 <ChargePumpRampSync.constprop.0+0x64>
 801b1b4:	0801b09d 	.word	0x0801b09d
 801b1b8:	000186a0 	.word	0x000186a0
 801b1bc:	000f423f 	.word	0x000f423f

0801b1c0 <Argus_Dev_BglMeasurement>:
 801b1c0:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 801b1c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1c6:	f043 0310 	orr.w	r3, r3, #16
 801b1ca:	2500      	movs	r5, #0
 801b1cc:	800d      	strh	r5, [r1, #0]
 801b1ce:	6783      	str	r3, [r0, #120]	@ 0x78
 801b1d0:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 801b1d2:	f890 904e 	ldrb.w	r9, [r0, #78]	@ 0x4e
 801b1d6:	f880 509c 	strb.w	r5, [r0, #156]	@ 0x9c
 801b1da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801b1de:	6783      	str	r3, [r0, #120]	@ 0x78
 801b1e0:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 801b1e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801b1e6:	6783      	str	r3, [r0, #120]	@ 0x78
 801b1e8:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 801b1ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801b1ee:	6783      	str	r3, [r0, #120]	@ 0x78
 801b1f0:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 801b1f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b1f6:	6783      	str	r3, [r0, #120]	@ 0x78
 801b1f8:	f8d0 3047 	ldr.w	r3, [r0, #71]	@ 0x47
 801b1fc:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
 801b200:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801b204:	f023 0303 	bic.w	r3, r3, #3
 801b208:	f880 308a 	strb.w	r3, [r0, #138]	@ 0x8a
 801b20c:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 801b20e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b212:	6783      	str	r3, [r0, #120]	@ 0x78
 801b214:	f890 3056 	ldrb.w	r3, [r0, #86]	@ 0x56
 801b218:	f023 0301 	bic.w	r3, r3, #1
 801b21c:	f880 309a 	strb.w	r3, [r0, #154]	@ 0x9a
 801b220:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 801b222:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
 801b226:	f8b0 3054 	ldrh.w	r3, [r0, #84]	@ 0x54
 801b22a:	f8a0 3098 	strh.w	r3, [r0, #152]	@ 0x98
 801b22e:	4b96      	ldr	r3, [pc, #600]	@ (801b488 <Argus_Dev_BglMeasurement+0x2c8>)
 801b230:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
 801b234:	2301      	movs	r3, #1
 801b236:	f880 308b 	strb.w	r3, [r0, #139]	@ 0x8b
 801b23a:	2308      	movs	r3, #8
 801b23c:	f880 3088 	strb.w	r3, [r0, #136]	@ 0x88
 801b240:	231e      	movs	r3, #30
 801b242:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
 801b246:	f64f 7322 	movw	r3, #65314	@ 0xff22
 801b24a:	f8a0 3094 	strh.w	r3, [r0, #148]	@ 0x94
 801b24e:	460e      	mov	r6, r1
 801b250:	230e      	movs	r3, #14
 801b252:	21ff      	movs	r1, #255	@ 0xff
 801b254:	f880 1096 	strb.w	r1, [r0, #150]	@ 0x96
 801b258:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
 801b25c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801b25e:	f880 509d 	strb.w	r5, [r0, #157]	@ 0x9d
 801b262:	f3c3 6303 	ubfx	r3, r3, #24, #4
 801b266:	f880 309e 	strb.w	r3, [r0, #158]	@ 0x9e
 801b26a:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 801b26c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801b270:	6783      	str	r3, [r0, #120]	@ 0x78
 801b272:	f8b0 3069 	ldrh.w	r3, [r0, #105]	@ 0x69
 801b276:	f8a0 309f 	strh.w	r3, [r0, #159]	@ 0x9f
 801b27a:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 801b27e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801b282:	f043 0301 	orr.w	r3, r3, #1
 801b286:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 801b28a:	f890 306b 	ldrb.w	r3, [r0, #107]	@ 0x6b
 801b28e:	f003 03e1 	and.w	r3, r3, #225	@ 0xe1
 801b292:	f063 031f 	orn	r3, r3, #31
 801b296:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
 801b29a:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 801b29c:	f043 0308 	orr.w	r3, r3, #8
 801b2a0:	6783      	str	r3, [r0, #120]	@ 0x78
 801b2a2:	230c      	movs	r3, #12
 801b2a4:	f880 309b 	strb.w	r3, [r0, #155]	@ 0x9b
 801b2a8:	231c      	movs	r3, #28
 801b2aa:	4604      	mov	r4, r0
 801b2ac:	b083      	sub	sp, #12
 801b2ae:	f100 0788 	add.w	r7, r0, #136	@ 0x88
 801b2b2:	f880 309f 	strb.w	r3, [r0, #159]	@ 0x9f
 801b2b6:	2221      	movs	r2, #33	@ 0x21
 801b2b8:	30a2      	adds	r0, #162	@ 0xa2
 801b2ba:	f008 fa92 	bl	80237e2 <memset>
 801b2be:	e9cd 5500 	strd	r5, r5, [sp]
 801b2c2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801b2c4:	f043 0320 	orr.w	r3, r3, #32
 801b2c8:	67a3      	str	r3, [r4, #120]	@ 0x78
 801b2ca:	f029 033f 	bic.w	r3, r9, #63	@ 0x3f
 801b2ce:	f043 030f 	orr.w	r3, r3, #15
 801b2d2:	f884 304e 	strb.w	r3, [r4, #78]	@ 0x4e
 801b2d6:	2306      	movs	r3, #6
 801b2d8:	f884 30a2 	strb.w	r3, [r4, #162]	@ 0xa2
 801b2dc:	f504 7890 	add.w	r8, r4, #288	@ 0x120
 801b2e0:	f104 03c3 	add.w	r3, r4, #195	@ 0xc3
 801b2e4:	1bdb      	subs	r3, r3, r7
 801b2e6:	462a      	mov	r2, r5
 801b2e8:	4639      	mov	r1, r7
 801b2ea:	4640      	mov	r0, r8
 801b2ec:	f006 ffee 	bl	80222cc <ADS_Transfer>
 801b2f0:	2800      	cmp	r0, #0
 801b2f2:	f2c0 80ba 	blt.w	801b46a <Argus_Dev_BglMeasurement+0x2aa>
 801b2f6:	2164      	movs	r1, #100	@ 0x64
 801b2f8:	4640      	mov	r0, r8
 801b2fa:	f006 fecb 	bl	8022094 <ADS_AwaitIdle>
 801b2fe:	2800      	cmp	r0, #0
 801b300:	f2c0 80b3 	blt.w	801b46a <Argus_Dev_BglMeasurement+0x2aa>
 801b304:	4620      	mov	r0, r4
 801b306:	f7ff fef5 	bl	801b0f4 <ChargePumpRampSync.constprop.0>
 801b30a:	2800      	cmp	r0, #0
 801b30c:	f2c0 80ad 	blt.w	801b46a <Argus_Dev_BglMeasurement+0x2aa>
 801b310:	495e      	ldr	r1, [pc, #376]	@ (801b48c <Argus_Dev_BglMeasurement+0x2cc>)
 801b312:	9500      	str	r5, [sp, #0]
 801b314:	462b      	mov	r3, r5
 801b316:	462a      	mov	r2, r5
 801b318:	4640      	mov	r0, r8
 801b31a:	f007 f841 	bl	80223a0 <ADS_Start>
 801b31e:	2800      	cmp	r0, #0
 801b320:	f2c0 80a3 	blt.w	801b46a <Argus_Dev_BglMeasurement+0x2aa>
 801b324:	2164      	movs	r1, #100	@ 0x64
 801b326:	4640      	mov	r0, r8
 801b328:	f006 feb4 	bl	8022094 <ADS_AwaitIdle>
 801b32c:	2800      	cmp	r0, #0
 801b32e:	f2c0 809c 	blt.w	801b46a <Argus_Dev_BglMeasurement+0x2aa>
 801b332:	9500      	str	r5, [sp, #0]
 801b334:	462b      	mov	r3, r5
 801b336:	2221      	movs	r2, #33	@ 0x21
 801b338:	4639      	mov	r1, r7
 801b33a:	4640      	mov	r0, r8
 801b33c:	f007 f8ac 	bl	8022498 <ADS_ReadData>
 801b340:	2800      	cmp	r0, #0
 801b342:	f2c0 8092 	blt.w	801b46a <Argus_Dev_BglMeasurement+0x2aa>
 801b346:	2164      	movs	r1, #100	@ 0x64
 801b348:	4640      	mov	r0, r8
 801b34a:	f006 fea3 	bl	8022094 <ADS_AwaitIdle>
 801b34e:	2800      	cmp	r0, #0
 801b350:	f2c0 808b 	blt.w	801b46a <Argus_Dev_BglMeasurement+0x2aa>
 801b354:	46a3      	mov	fp, r4
 801b356:	f104 0a63 	add.w	sl, r4, #99	@ 0x63
 801b35a:	4622      	mov	r2, r4
 801b35c:	f892 308a 	ldrb.w	r3, [r2, #138]	@ 0x8a
 801b360:	f892 1089 	ldrb.w	r1, [r2, #137]	@ 0x89
 801b364:	021b      	lsls	r3, r3, #8
 801b366:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801b36a:	f892 108b 	ldrb.w	r1, [r2, #139]	@ 0x8b
 801b36e:	3203      	adds	r2, #3
 801b370:	430b      	orrs	r3, r1
 801b372:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801b376:	4552      	cmp	r2, sl
 801b378:	eba5 0503 	sub.w	r5, r5, r3
 801b37c:	d1ee      	bne.n	801b35c <Argus_Dev_BglMeasurement+0x19c>
 801b37e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801b380:	f043 0308 	orr.w	r3, r3, #8
 801b384:	2200      	movs	r2, #0
 801b386:	67a3      	str	r3, [r4, #120]	@ 0x78
 801b388:	f04f 33ff 	mov.w	r3, #4294967295
 801b38c:	f8c4 2099 	str.w	r2, [r4, #153]	@ 0x99
 801b390:	f8c4 209d 	str.w	r2, [r4, #157]	@ 0x9d
 801b394:	f8c4 20a1 	str.w	r2, [r4, #161]	@ 0xa1
 801b398:	f8c4 20a5 	str.w	r2, [r4, #165]	@ 0xa5
 801b39c:	e9cd 2200 	strd	r2, r2, [sp]
 801b3a0:	f8c4 3089 	str.w	r3, [r4, #137]	@ 0x89
 801b3a4:	f8c4 308d 	str.w	r3, [r4, #141]	@ 0x8d
 801b3a8:	f8c4 3091 	str.w	r3, [r4, #145]	@ 0x91
 801b3ac:	f8c4 3095 	str.w	r3, [r4, #149]	@ 0x95
 801b3b0:	2306      	movs	r3, #6
 801b3b2:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
 801b3b6:	f104 03a9 	add.w	r3, r4, #169	@ 0xa9
 801b3ba:	1bdb      	subs	r3, r3, r7
 801b3bc:	4639      	mov	r1, r7
 801b3be:	4640      	mov	r0, r8
 801b3c0:	f006 ff84 	bl	80222cc <ADS_Transfer>
 801b3c4:	2800      	cmp	r0, #0
 801b3c6:	db50      	blt.n	801b46a <Argus_Dev_BglMeasurement+0x2aa>
 801b3c8:	2164      	movs	r1, #100	@ 0x64
 801b3ca:	4640      	mov	r0, r8
 801b3cc:	f006 fe62 	bl	8022094 <ADS_AwaitIdle>
 801b3d0:	2800      	cmp	r0, #0
 801b3d2:	f04f 0200 	mov.w	r2, #0
 801b3d6:	db48      	blt.n	801b46a <Argus_Dev_BglMeasurement+0x2aa>
 801b3d8:	492c      	ldr	r1, [pc, #176]	@ (801b48c <Argus_Dev_BglMeasurement+0x2cc>)
 801b3da:	9200      	str	r2, [sp, #0]
 801b3dc:	4613      	mov	r3, r2
 801b3de:	4640      	mov	r0, r8
 801b3e0:	f006 ffde 	bl	80223a0 <ADS_Start>
 801b3e4:	2800      	cmp	r0, #0
 801b3e6:	db40      	blt.n	801b46a <Argus_Dev_BglMeasurement+0x2aa>
 801b3e8:	2164      	movs	r1, #100	@ 0x64
 801b3ea:	4640      	mov	r0, r8
 801b3ec:	f006 fe52 	bl	8022094 <ADS_AwaitIdle>
 801b3f0:	2800      	cmp	r0, #0
 801b3f2:	f04f 0200 	mov.w	r2, #0
 801b3f6:	db38      	blt.n	801b46a <Argus_Dev_BglMeasurement+0x2aa>
 801b3f8:	9200      	str	r2, [sp, #0]
 801b3fa:	4613      	mov	r3, r2
 801b3fc:	4639      	mov	r1, r7
 801b3fe:	2221      	movs	r2, #33	@ 0x21
 801b400:	4640      	mov	r0, r8
 801b402:	f007 f849 	bl	8022498 <ADS_ReadData>
 801b406:	2800      	cmp	r0, #0
 801b408:	db2f      	blt.n	801b46a <Argus_Dev_BglMeasurement+0x2aa>
 801b40a:	4640      	mov	r0, r8
 801b40c:	2164      	movs	r1, #100	@ 0x64
 801b40e:	f006 fe41 	bl	8022094 <ADS_AwaitIdle>
 801b412:	2800      	cmp	r0, #0
 801b414:	db29      	blt.n	801b46a <Argus_Dev_BglMeasurement+0x2aa>
 801b416:	f89b 308a 	ldrb.w	r3, [fp, #138]	@ 0x8a
 801b41a:	f89b 2089 	ldrb.w	r2, [fp, #137]	@ 0x89
 801b41e:	021b      	lsls	r3, r3, #8
 801b420:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b424:	f89b 208b 	ldrb.w	r2, [fp, #139]	@ 0x8b
 801b428:	f10b 0b03 	add.w	fp, fp, #3
 801b42c:	4313      	orrs	r3, r2
 801b42e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801b432:	45d3      	cmp	fp, sl
 801b434:	441d      	add	r5, r3
 801b436:	d1ee      	bne.n	801b416 <Argus_Dev_BglMeasurement+0x256>
 801b438:	2d00      	cmp	r5, #0
 801b43a:	db23      	blt.n	801b484 <Argus_Dev_BglMeasurement+0x2c4>
 801b43c:	012b      	lsls	r3, r5, #4
 801b43e:	f44f 7204 	mov.w	r2, #528	@ 0x210
 801b442:	fbb3 f3f2 	udiv	r3, r3, r2
 801b446:	b29b      	uxth	r3, r3
 801b448:	8033      	strh	r3, [r6, #0]
 801b44a:	f894 304e 	ldrb.w	r3, [r4, #78]	@ 0x4e
 801b44e:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801b450:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 801b454:	f009 093f 	and.w	r9, r9, #63	@ 0x3f
 801b458:	f042 0220 	orr.w	r2, r2, #32
 801b45c:	ea43 0909 	orr.w	r9, r3, r9
 801b460:	67a2      	str	r2, [r4, #120]	@ 0x78
 801b462:	f884 904e 	strb.w	r9, [r4, #78]	@ 0x4e
 801b466:	2000      	movs	r0, #0
 801b468:	e009      	b.n	801b47e <Argus_Dev_BglMeasurement+0x2be>
 801b46a:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 801b46c:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 801b470:	4a07      	ldr	r2, [pc, #28]	@ (801b490 <Argus_Dev_BglMeasurement+0x2d0>)
 801b472:	f043 0302 	orr.w	r3, r3, #2
 801b476:	430a      	orrs	r2, r1
 801b478:	67a2      	str	r2, [r4, #120]	@ 0x78
 801b47a:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 801b47e:	b003      	add	sp, #12
 801b480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b484:	2300      	movs	r3, #0
 801b486:	e7df      	b.n	801b448 <Argus_Dev_BglMeasurement+0x288>
 801b488:	ffff0120 	.word	0xffff0120
 801b48c:	000186a0 	.word	0x000186a0
 801b490:	0003dffe 	.word	0x0003dffe

0801b494 <Argus_Dev_VsubMeasurement>:
 801b494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b498:	b08b      	sub	sp, #44	@ 0x2c
 801b49a:	460d      	mov	r5, r1
 801b49c:	9105      	str	r1, [sp, #20]
 801b49e:	2100      	movs	r1, #0
 801b4a0:	8029      	strh	r1, [r5, #0]
 801b4a2:	f890 104e 	ldrb.w	r1, [r0, #78]	@ 0x4e
 801b4a6:	4699      	mov	r9, r3
 801b4a8:	f001 033f 	and.w	r3, r1, #63	@ 0x3f
 801b4ac:	4293      	cmp	r3, r2
 801b4ae:	4604      	mov	r4, r0
 801b4b0:	9304      	str	r3, [sp, #16]
 801b4b2:	d00a      	beq.n	801b4ca <Argus_Dev_VsubMeasurement+0x36>
 801b4b4:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 801b4b6:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 801b4ba:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801b4be:	430a      	orrs	r2, r1
 801b4c0:	f043 0320 	orr.w	r3, r3, #32
 801b4c4:	f880 204e 	strb.w	r2, [r0, #78]	@ 0x4e
 801b4c8:	6783      	str	r3, [r0, #120]	@ 0x78
 801b4ca:	4620      	mov	r0, r4
 801b4cc:	f7ff fe12 	bl	801b0f4 <ChargePumpRampSync.constprop.0>
 801b4d0:	2800      	cmp	r0, #0
 801b4d2:	f2c0 8181 	blt.w	801b7d8 <Argus_Dev_VsubMeasurement+0x344>
 801b4d6:	f1b9 0f00 	cmp.w	r9, #0
 801b4da:	f000 809b 	beq.w	801b614 <Argus_Dev_VsubMeasurement+0x180>
 801b4de:	2700      	movs	r7, #0
 801b4e0:	f8d4 211c 	ldr.w	r2, [r4, #284]	@ 0x11c
 801b4e4:	f8df b3d0 	ldr.w	fp, [pc, #976]	@ 801b8b8 <Argus_Dev_VsubMeasurement+0x424>
 801b4e8:	46b8      	mov	r8, r7
 801b4ea:	f104 0588 	add.w	r5, r4, #136	@ 0x88
 801b4ee:	f104 0a59 	add.w	sl, r4, #89	@ 0x59
 801b4f2:	f8b2 00a0 	ldrh.w	r0, [r2, #160]	@ 0xa0
 801b4f6:	2800      	cmp	r0, #0
 801b4f8:	f040 80a0 	bne.w	801b63c <Argus_Dev_VsubMeasurement+0x1a8>
 801b4fc:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 801b500:	b13b      	cbz	r3, 801b512 <Argus_Dev_VsubMeasurement+0x7e>
 801b502:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 801b506:	f8c4 0104 	str.w	r0, [r4, #260]	@ 0x104
 801b50a:	4798      	blx	r3
 801b50c:	2800      	cmp	r0, #0
 801b50e:	f2c0 8163 	blt.w	801b7d8 <Argus_Dev_VsubMeasurement+0x344>
 801b512:	f504 7690 	add.w	r6, r4, #288	@ 0x120
 801b516:	2164      	movs	r1, #100	@ 0x64
 801b518:	4630      	mov	r0, r6
 801b51a:	f006 fdbb 	bl	8022094 <ADS_AwaitIdle>
 801b51e:	2800      	cmp	r0, #0
 801b520:	f2c0 815a 	blt.w	801b7d8 <Argus_Dev_VsubMeasurement+0x344>
 801b524:	2300      	movs	r3, #0
 801b526:	9300      	str	r3, [sp, #0]
 801b528:	2205      	movs	r2, #5
 801b52a:	4629      	mov	r1, r5
 801b52c:	4630      	mov	r0, r6
 801b52e:	f006 ffb3 	bl	8022498 <ADS_ReadData>
 801b532:	2800      	cmp	r0, #0
 801b534:	f2c0 8150 	blt.w	801b7d8 <Argus_Dev_VsubMeasurement+0x344>
 801b538:	2164      	movs	r1, #100	@ 0x64
 801b53a:	4630      	mov	r0, r6
 801b53c:	f006 fdaa 	bl	8022094 <ADS_AwaitIdle>
 801b540:	2800      	cmp	r0, #0
 801b542:	f2c0 8149 	blt.w	801b7d8 <Argus_Dev_VsubMeasurement+0x344>
 801b546:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
 801b54a:	4629      	mov	r1, r5
 801b54c:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	@ 0xa0
 801b550:	a806      	add	r0, sp, #24
 801b552:	f7f7 fe99 	bl	8013288 <Argus_Eval_ApplyAuxEvaluation>
 801b556:	f8d4 31c4 	ldr.w	r3, [r4, #452]	@ 0x1c4
 801b55a:	f993 2000 	ldrsb.w	r2, [r3]
 801b55e:	b302      	cbz	r2, 801b5a2 <Argus_Dev_VsubMeasurement+0x10e>
 801b560:	f894 316f 	ldrb.w	r3, [r4, #367]	@ 0x16f
 801b564:	f894 016f 	ldrb.w	r0, [r4, #367]	@ 0x16f
 801b568:	f894 216d 	ldrb.w	r2, [r4, #365]	@ 0x16d
 801b56c:	f003 0301 	and.w	r3, r3, #1
 801b570:	2b00      	cmp	r3, #0
 801b572:	f894 316c 	ldrb.w	r3, [r4, #364]	@ 0x16c
 801b576:	ea4f 3282 	mov.w	r2, r2, lsl #14
 801b57a:	ea4f 3343 	mov.w	r3, r3, lsl #13
 801b57e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801b582:	b292      	uxth	r2, r2
 801b584:	ea42 0203 	orr.w	r2, r2, r3
 801b588:	bf19      	ittee	ne
 801b58a:	f44f 3140 	movne.w	r1, #196608	@ 0x30000
 801b58e:	f44f 3380 	movne.w	r3, #65536	@ 0x10000
 801b592:	2300      	moveq	r3, #0
 801b594:	f44f 3100 	moveq.w	r1, #131072	@ 0x20000
 801b598:	f010 0f02 	tst.w	r0, #2
 801b59c:	bf18      	it	ne
 801b59e:	460b      	movne	r3, r1
 801b5a0:	431a      	orrs	r2, r3
 801b5a2:	a906      	add	r1, sp, #24
 801b5a4:	f8d4 01d4 	ldr.w	r0, [r4, #468]	@ 0x1d4
 801b5a8:	f003 f90c 	bl	801e7c4 <Argus_Cal_ApplyAuxCalibration>
 801b5ac:	f8d4 211c 	ldr.w	r2, [r4, #284]	@ 0x11c
 801b5b0:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801b5b4:	f8b2 30c2 	ldrh.w	r3, [r2, #194]	@ 0xc2
 801b5b8:	4299      	cmp	r1, r3
 801b5ba:	f200 8129 	bhi.w	801b810 <Argus_Dev_VsubMeasurement+0x37c>
 801b5be:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801b5c2:	2f00      	cmp	r7, #0
 801b5c4:	f040 8115 	bne.w	801b7f2 <Argus_Dev_VsubMeasurement+0x35e>
 801b5c8:	eba3 0108 	sub.w	r1, r3, r8
 801b5cc:	2920      	cmp	r1, #32
 801b5ce:	f300 8113 	bgt.w	801b7f8 <Argus_Dev_VsubMeasurement+0x364>
 801b5d2:	eba8 0703 	sub.w	r7, r8, r3
 801b5d6:	2f20      	cmp	r7, #32
 801b5d8:	bfcc      	ite	gt
 801b5da:	2700      	movgt	r7, #0
 801b5dc:	2701      	movle	r7, #1
 801b5de:	4698      	mov	r8, r3
 801b5e0:	454f      	cmp	r7, r9
 801b5e2:	d386      	bcc.n	801b4f2 <Argus_Dev_VsubMeasurement+0x5e>
 801b5e4:	ea5f 4909 	movs.w	r9, r9, lsl #16
 801b5e8:	4641      	mov	r1, r8
 801b5ea:	f100 814a 	bmi.w	801b882 <Argus_Dev_VsubMeasurement+0x3ee>
 801b5ee:	45c8      	cmp	r8, r9
 801b5f0:	464a      	mov	r2, r9
 801b5f2:	f240 813d 	bls.w	801b870 <Argus_Dev_VsubMeasurement+0x3dc>
 801b5f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801b5fa:	4610      	mov	r0, r2
 801b5fc:	0052      	lsls	r2, r2, #1
 801b5fe:	4590      	cmp	r8, r2
 801b600:	461d      	mov	r5, r3
 801b602:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b606:	d8f8      	bhi.n	801b5fa <Argus_Dev_VsubMeasurement+0x166>
 801b608:	2b00      	cmp	r3, #0
 801b60a:	f040 8109 	bne.w	801b820 <Argus_Dev_VsubMeasurement+0x38c>
 801b60e:	ea98 0f09 	teq	r8, r9
 801b612:	d401      	bmi.n	801b618 <Argus_Dev_VsubMeasurement+0x184>
 801b614:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b618:	9a05      	ldr	r2, [sp, #20]
 801b61a:	9904      	ldr	r1, [sp, #16]
 801b61c:	8013      	strh	r3, [r2, #0]
 801b61e:	f894 304e 	ldrb.w	r3, [r4, #78]	@ 0x4e
 801b622:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801b624:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 801b628:	f042 0220 	orr.w	r2, r2, #32
 801b62c:	430b      	orrs	r3, r1
 801b62e:	2000      	movs	r0, #0
 801b630:	67a2      	str	r2, [r4, #120]	@ 0x78
 801b632:	f884 304e 	strb.w	r3, [r4, #78]	@ 0x4e
 801b636:	b00b      	add	sp, #44	@ 0x2c
 801b638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b63c:	f8ba 3000 	ldrh.w	r3, [sl]
 801b640:	f89a 1002 	ldrb.w	r1, [sl, #2]
 801b644:	802b      	strh	r3, [r5, #0]
 801b646:	2312      	movs	r3, #18
 801b648:	70a9      	strb	r1, [r5, #2]
 801b64a:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
 801b64e:	f892 109e 	ldrb.w	r1, [r2, #158]	@ 0x9e
 801b652:	f894 308a 	ldrb.w	r3, [r4, #138]	@ 0x8a
 801b656:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 801b658:	f001 0107 	and.w	r1, r1, #7
 801b65c:	f023 0307 	bic.w	r3, r3, #7
 801b660:	430b      	orrs	r3, r1
 801b662:	b25b      	sxtb	r3, r3
 801b664:	f884 308a 	strb.w	r3, [r4, #138]	@ 0x8a
 801b668:	f892 109f 	ldrb.w	r1, [r2, #159]	@ 0x9f
 801b66c:	00c9      	lsls	r1, r1, #3
 801b66e:	f023 0318 	bic.w	r3, r3, #24
 801b672:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 801b676:	f001 0118 	and.w	r1, r1, #24
 801b67a:	430b      	orrs	r3, r1
 801b67c:	67a0      	str	r0, [r4, #120]	@ 0x78
 801b67e:	f884 308a 	strb.w	r3, [r4, #138]	@ 0x8a
 801b682:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801b684:	069e      	lsls	r6, r3, #26
 801b686:	d404      	bmi.n	801b692 <Argus_Dev_VsubMeasurement+0x1fe>
 801b688:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 801b68c:	09d9      	lsrs	r1, r3, #7
 801b68e:	f040 80b5 	bne.w	801b7fc <Argus_Dev_VsubMeasurement+0x368>
 801b692:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801b694:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 801b698:	210a      	movs	r1, #10
 801b69a:	f884 108b 	strb.w	r1, [r4, #139]	@ 0x8b
 801b69e:	f892 109c 	ldrb.w	r1, [r2, #156]	@ 0x9c
 801b6a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801b6a6:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 801b6aa:	b25b      	sxtb	r3, r3
 801b6ac:	f884 308c 	strb.w	r3, [r4, #140]	@ 0x8c
 801b6b0:	f892 209d 	ldrb.w	r2, [r2, #157]	@ 0x9d
 801b6b4:	0112      	lsls	r2, r2, #4
 801b6b6:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 801b6ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801b6be:	4313      	orrs	r3, r2
 801b6c0:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801b6c2:	f884 308c 	strb.w	r3, [r4, #140]	@ 0x8c
 801b6c6:	f042 0220 	orr.w	r2, r2, #32
 801b6ca:	67a2      	str	r2, [r4, #120]	@ 0x78
 801b6cc:	f104 0390 	add.w	r3, r4, #144	@ 0x90
 801b6d0:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801b6d2:	0410      	lsls	r0, r2, #16
 801b6d4:	d40a      	bmi.n	801b6ec <Argus_Dev_VsubMeasurement+0x258>
 801b6d6:	f894 206e 	ldrb.w	r2, [r4, #110]	@ 0x6e
 801b6da:	f894 106d 	ldrb.w	r1, [r4, #109]	@ 0x6d
 801b6de:	0212      	lsls	r2, r2, #8
 801b6e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801b6e4:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 801b6e8:	430a      	orrs	r2, r1
 801b6ea:	d006      	beq.n	801b6fa <Argus_Dev_VsubMeasurement+0x266>
 801b6ec:	221e      	movs	r2, #30
 801b6ee:	f843 2b04 	str.w	r2, [r3], #4
 801b6f2:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801b6f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801b6f8:	67a2      	str	r2, [r4, #120]	@ 0x78
 801b6fa:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801b6fc:	03d1      	lsls	r1, r2, #15
 801b6fe:	d40c      	bmi.n	801b71a <Argus_Dev_VsubMeasurement+0x286>
 801b700:	f894 2072 	ldrb.w	r2, [r4, #114]	@ 0x72
 801b704:	f894 1071 	ldrb.w	r1, [r4, #113]	@ 0x71
 801b708:	0212      	lsls	r2, r2, #8
 801b70a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801b70e:	f894 1073 	ldrb.w	r1, [r4, #115]	@ 0x73
 801b712:	430a      	orrs	r2, r1
 801b714:	f5b2 0f66 	cmp.w	r2, #15073280	@ 0xe60000
 801b718:	d007      	beq.n	801b72a <Argus_Dev_VsubMeasurement+0x296>
 801b71a:	f24e 6220 	movw	r2, #58912	@ 0xe620
 801b71e:	f843 2b04 	str.w	r2, [r3], #4
 801b722:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801b724:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 801b728:	67a2      	str	r2, [r4, #120]	@ 0x78
 801b72a:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801b72c:	0392      	lsls	r2, r2, #14
 801b72e:	d402      	bmi.n	801b736 <Argus_Dev_VsubMeasurement+0x2a2>
 801b730:	f8b4 2075 	ldrh.w	r2, [r4, #117]	@ 0x75
 801b734:	b152      	cbz	r2, 801b74c <Argus_Dev_VsubMeasurement+0x2b8>
 801b736:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 801b738:	601a      	str	r2, [r3, #0]
 801b73a:	2222      	movs	r2, #34	@ 0x22
 801b73c:	801a      	strh	r2, [r3, #0]
 801b73e:	2200      	movs	r2, #0
 801b740:	709a      	strb	r2, [r3, #2]
 801b742:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801b744:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 801b748:	3304      	adds	r3, #4
 801b74a:	67a2      	str	r2, [r4, #120]	@ 0x78
 801b74c:	2600      	movs	r6, #0
 801b74e:	2208      	movs	r2, #8
 801b750:	f8a3 6001 	strh.w	r6, [r3, #1]
 801b754:	70de      	strb	r6, [r3, #3]
 801b756:	701a      	strb	r2, [r3, #0]
 801b758:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801b75a:	f894 106b 	ldrb.w	r1, [r4, #107]	@ 0x6b
 801b75e:	f042 0210 	orr.w	r2, r2, #16
 801b762:	67a2      	str	r2, [r4, #120]	@ 0x78
 801b764:	f8b4 2069 	ldrh.w	r2, [r4, #105]	@ 0x69
 801b768:	809a      	strh	r2, [r3, #4]
 801b76a:	f001 01e1 	and.w	r1, r1, #225	@ 0xe1
 801b76e:	221c      	movs	r2, #28
 801b770:	7199      	strb	r1, [r3, #6]
 801b772:	711a      	strb	r2, [r3, #4]
 801b774:	f8d4 211c 	ldr.w	r2, [r4, #284]	@ 0x11c
 801b778:	7958      	ldrb	r0, [r3, #5]
 801b77a:	f8b2 20a0 	ldrh.w	r2, [r2, #160]	@ 0xa0
 801b77e:	3a01      	subs	r2, #1
 801b780:	f020 007f 	bic.w	r0, r0, #127	@ 0x7f
 801b784:	f3c2 02c6 	ubfx	r2, r2, #3, #7
 801b788:	4302      	orrs	r2, r0
 801b78a:	b252      	sxtb	r2, r2
 801b78c:	715a      	strb	r2, [r3, #5]
 801b78e:	f8d4 011c 	ldr.w	r0, [r4, #284]	@ 0x11c
 801b792:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	@ 0xa0
 801b796:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 801b79a:	715a      	strb	r2, [r3, #5]
 801b79c:	f001 011f 	and.w	r1, r1, #31
 801b7a0:	1e42      	subs	r2, r0, #1
 801b7a2:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
 801b7a6:	9602      	str	r6, [sp, #8]
 801b7a8:	7199      	strb	r1, [r3, #6]
 801b7aa:	9403      	str	r4, [sp, #12]
 801b7ac:	f8cd b004 	str.w	fp, [sp, #4]
 801b7b0:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801b7b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801b7b6:	67a2      	str	r2, [r4, #120]	@ 0x78
 801b7b8:	f8d4 211c 	ldr.w	r2, [r4, #284]	@ 0x11c
 801b7bc:	3307      	adds	r3, #7
 801b7be:	f8d2 20a4 	ldr.w	r2, [r2, #164]	@ 0xa4
 801b7c2:	9200      	str	r2, [sp, #0]
 801b7c4:	1b5b      	subs	r3, r3, r5
 801b7c6:	462a      	mov	r2, r5
 801b7c8:	4629      	mov	r1, r5
 801b7ca:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801b7ce:	f006 fcfd 	bl	80221cc <ADS_TransferWithStart>
 801b7d2:	2800      	cmp	r0, #0
 801b7d4:	f6bf ae9d 	bge.w	801b512 <Argus_Dev_VsubMeasurement+0x7e>
 801b7d8:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 801b7da:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 801b7de:	4a34      	ldr	r2, [pc, #208]	@ (801b8b0 <Argus_Dev_VsubMeasurement+0x41c>)
 801b7e0:	f043 0302 	orr.w	r3, r3, #2
 801b7e4:	430a      	orrs	r2, r1
 801b7e6:	67a2      	str	r2, [r4, #120]	@ 0x78
 801b7e8:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 801b7ec:	b00b      	add	sp, #44	@ 0x2c
 801b7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7f2:	3701      	adds	r7, #1
 801b7f4:	4498      	add	r8, r3
 801b7f6:	e6f3      	b.n	801b5e0 <Argus_Dev_VsubMeasurement+0x14c>
 801b7f8:	4698      	mov	r8, r3
 801b7fa:	e67a      	b.n	801b4f2 <Argus_Dev_VsubMeasurement+0x5e>
 801b7fc:	f892 109d 	ldrb.w	r1, [r2, #157]	@ 0x9d
 801b800:	f3c3 1302 	ubfx	r3, r3, #4, #3
 801b804:	4299      	cmp	r1, r3
 801b806:	f47f af44 	bne.w	801b692 <Argus_Dev_VsubMeasurement+0x1fe>
 801b80a:	f104 038b 	add.w	r3, r4, #139	@ 0x8b
 801b80e:	e75f      	b.n	801b6d0 <Argus_Dev_VsubMeasurement+0x23c>
 801b810:	4828      	ldr	r0, [pc, #160]	@ (801b8b4 <Argus_Dev_VsubMeasurement+0x420>)
 801b812:	f7f2 fb7d 	bl	800df10 <print>
 801b816:	f06f 006e 	mvn.w	r0, #110	@ 0x6e
 801b81a:	b00b      	add	sp, #44	@ 0x2c
 801b81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b820:	2a00      	cmp	r2, #0
 801b822:	db20      	blt.n	801b866 <Argus_Dev_VsubMeasurement+0x3d2>
 801b824:	f1b8 0f00 	cmp.w	r8, #0
 801b828:	d035      	beq.n	801b896 <Argus_Dev_VsubMeasurement+0x402>
 801b82a:	2000      	movs	r0, #0
 801b82c:	e000      	b.n	801b830 <Argus_Dev_VsubMeasurement+0x39c>
 801b82e:	b151      	cbz	r1, 801b846 <Argus_Dev_VsubMeasurement+0x3b2>
 801b830:	428a      	cmp	r2, r1
 801b832:	bf9c      	itt	ls
 801b834:	1a89      	subls	r1, r1, r2
 801b836:	4318      	orrls	r0, r3
 801b838:	085b      	lsrs	r3, r3, #1
 801b83a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801b83e:	d1f6      	bne.n	801b82e <Argus_Dev_VsubMeasurement+0x39a>
 801b840:	4291      	cmp	r1, r2
 801b842:	bf28      	it	cs
 801b844:	3001      	addcs	r0, #1
 801b846:	ea98 0f09 	teq	r8, r9
 801b84a:	d428      	bmi.n	801b89e <Argus_Dev_VsubMeasurement+0x40a>
 801b84c:	f1b0 0800 	subs.w	r8, r0, #0
 801b850:	f6ff aee0 	blt.w	801b614 <Argus_Dev_VsubMeasurement+0x180>
 801b854:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 801b858:	4598      	cmp	r8, r3
 801b85a:	f73f aedb 	bgt.w	801b614 <Argus_Dev_VsubMeasurement+0x180>
 801b85e:	ea28 73e8 	bic.w	r3, r8, r8, asr #31
 801b862:	b29b      	uxth	r3, r3
 801b864:	e6d8      	b.n	801b618 <Argus_Dev_VsubMeasurement+0x184>
 801b866:	f035 4300 	bics.w	r3, r5, #2147483648	@ 0x80000000
 801b86a:	d007      	beq.n	801b87c <Argus_Dev_VsubMeasurement+0x3e8>
 801b86c:	4602      	mov	r2, r0
 801b86e:	e7d9      	b.n	801b824 <Argus_Dev_VsubMeasurement+0x390>
 801b870:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801b874:	f1b8 0f00 	cmp.w	r8, #0
 801b878:	d1d7      	bne.n	801b82a <Argus_Dev_VsubMeasurement+0x396>
 801b87a:	e7f0      	b.n	801b85e <Argus_Dev_VsubMeasurement+0x3ca>
 801b87c:	4602      	mov	r2, r0
 801b87e:	4618      	mov	r0, r3
 801b880:	e7de      	b.n	801b840 <Argus_Dev_VsubMeasurement+0x3ac>
 801b882:	f1c9 0200 	rsb	r2, r9, #0
 801b886:	4590      	cmp	r8, r2
 801b888:	f63f aeb5 	bhi.w	801b5f6 <Argus_Dev_VsubMeasurement+0x162>
 801b88c:	2a00      	cmp	r2, #0
 801b88e:	db09      	blt.n	801b8a4 <Argus_Dev_VsubMeasurement+0x410>
 801b890:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801b894:	e7c6      	b.n	801b824 <Argus_Dev_VsubMeasurement+0x390>
 801b896:	f1b9 0f00 	cmp.w	r9, #0
 801b89a:	dae0      	bge.n	801b85e <Argus_Dev_VsubMeasurement+0x3ca>
 801b89c:	4640      	mov	r0, r8
 801b89e:	f1c0 0800 	rsb	r8, r0, #0
 801b8a2:	e7d7      	b.n	801b854 <Argus_Dev_VsubMeasurement+0x3c0>
 801b8a4:	0850      	lsrs	r0, r2, #1
 801b8a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801b8aa:	4602      	mov	r2, r0
 801b8ac:	e7ba      	b.n	801b824 <Argus_Dev_VsubMeasurement+0x390>
 801b8ae:	bf00      	nop
 801b8b0:	0003dffe 	.word	0x0003dffe
 801b8b4:	08029f40 	.word	0x08029f40
 801b8b8:	0801b0bd 	.word	0x0801b0bd

0801b8bc <Argus_Dev_StartAuxMeasurement>:
 801b8bc:	b570      	push	{r4, r5, r6, lr}
 801b8be:	f8d0 511c 	ldr.w	r5, [r0, #284]	@ 0x11c
 801b8c2:	4604      	mov	r4, r0
 801b8c4:	f8b5 00a0 	ldrh.w	r0, [r5, #160]	@ 0xa0
 801b8c8:	b084      	sub	sp, #16
 801b8ca:	e9c4 1241 	strd	r1, r2, [r4, #260]	@ 0x104
 801b8ce:	b950      	cbnz	r0, 801b8e6 <Argus_Dev_StartAuxMeasurement+0x2a>
 801b8d0:	460b      	mov	r3, r1
 801b8d2:	2900      	cmp	r1, #0
 801b8d4:	f000 80db 	beq.w	801ba8e <Argus_Dev_StartAuxMeasurement+0x1d2>
 801b8d8:	4611      	mov	r1, r2
 801b8da:	f8c4 0104 	str.w	r0, [r4, #260]	@ 0x104
 801b8de:	b004      	add	sp, #16
 801b8e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b8e4:	4718      	bx	r3
 801b8e6:	f8b4 1059 	ldrh.w	r1, [r4, #89]	@ 0x59
 801b8ea:	f8a4 1088 	strh.w	r1, [r4, #136]	@ 0x88
 801b8ee:	f104 0288 	add.w	r2, r4, #136	@ 0x88
 801b8f2:	f894 305b 	ldrb.w	r3, [r4, #91]	@ 0x5b
 801b8f6:	7093      	strb	r3, [r2, #2]
 801b8f8:	2112      	movs	r1, #18
 801b8fa:	f884 1088 	strb.w	r1, [r4, #136]	@ 0x88
 801b8fe:	f895 109e 	ldrb.w	r1, [r5, #158]	@ 0x9e
 801b902:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801b906:	f001 0107 	and.w	r1, r1, #7
 801b90a:	430b      	orrs	r3, r1
 801b90c:	b25b      	sxtb	r3, r3
 801b90e:	f884 308a 	strb.w	r3, [r4, #138]	@ 0x8a
 801b912:	f895 109f 	ldrb.w	r1, [r5, #159]	@ 0x9f
 801b916:	00c9      	lsls	r1, r1, #3
 801b918:	f001 0118 	and.w	r1, r1, #24
 801b91c:	f023 0318 	bic.w	r3, r3, #24
 801b920:	430b      	orrs	r3, r1
 801b922:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 801b924:	f884 308a 	strb.w	r3, [r4, #138]	@ 0x8a
 801b928:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 801b92c:	67a1      	str	r1, [r4, #120]	@ 0x78
 801b92e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801b930:	069e      	lsls	r6, r3, #26
 801b932:	d404      	bmi.n	801b93e <Argus_Dev_StartAuxMeasurement+0x82>
 801b934:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 801b938:	09d9      	lsrs	r1, r3, #7
 801b93a:	f040 80b3 	bne.w	801baa4 <Argus_Dev_StartAuxMeasurement+0x1e8>
 801b93e:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 801b940:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
 801b944:	230a      	movs	r3, #10
 801b946:	f884 308b 	strb.w	r3, [r4, #139]	@ 0x8b
 801b94a:	f895 009c 	ldrb.w	r0, [r5, #156]	@ 0x9c
 801b94e:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 801b952:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
 801b956:	b25b      	sxtb	r3, r3
 801b958:	f884 308c 	strb.w	r3, [r4, #140]	@ 0x8c
 801b95c:	f895 109d 	ldrb.w	r1, [r5, #157]	@ 0x9d
 801b960:	0109      	lsls	r1, r1, #4
 801b962:	f001 0170 	and.w	r1, r1, #112	@ 0x70
 801b966:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801b96a:	430b      	orrs	r3, r1
 801b96c:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 801b96e:	f884 308c 	strb.w	r3, [r4, #140]	@ 0x8c
 801b972:	f041 0120 	orr.w	r1, r1, #32
 801b976:	67a1      	str	r1, [r4, #120]	@ 0x78
 801b978:	f104 0390 	add.w	r3, r4, #144	@ 0x90
 801b97c:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 801b97e:	040d      	lsls	r5, r1, #16
 801b980:	d40a      	bmi.n	801b998 <Argus_Dev_StartAuxMeasurement+0xdc>
 801b982:	f894 106e 	ldrb.w	r1, [r4, #110]	@ 0x6e
 801b986:	f894 006d 	ldrb.w	r0, [r4, #109]	@ 0x6d
 801b98a:	0209      	lsls	r1, r1, #8
 801b98c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801b990:	f894 006f 	ldrb.w	r0, [r4, #111]	@ 0x6f
 801b994:	4301      	orrs	r1, r0
 801b996:	d006      	beq.n	801b9a6 <Argus_Dev_StartAuxMeasurement+0xea>
 801b998:	211e      	movs	r1, #30
 801b99a:	f843 1b04 	str.w	r1, [r3], #4
 801b99e:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 801b9a0:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 801b9a4:	67a1      	str	r1, [r4, #120]	@ 0x78
 801b9a6:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 801b9a8:	03c8      	lsls	r0, r1, #15
 801b9aa:	d40c      	bmi.n	801b9c6 <Argus_Dev_StartAuxMeasurement+0x10a>
 801b9ac:	f894 1072 	ldrb.w	r1, [r4, #114]	@ 0x72
 801b9b0:	f894 0071 	ldrb.w	r0, [r4, #113]	@ 0x71
 801b9b4:	0209      	lsls	r1, r1, #8
 801b9b6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801b9ba:	f894 0073 	ldrb.w	r0, [r4, #115]	@ 0x73
 801b9be:	4301      	orrs	r1, r0
 801b9c0:	f5b1 0f66 	cmp.w	r1, #15073280	@ 0xe60000
 801b9c4:	d007      	beq.n	801b9d6 <Argus_Dev_StartAuxMeasurement+0x11a>
 801b9c6:	f24e 6120 	movw	r1, #58912	@ 0xe620
 801b9ca:	f843 1b04 	str.w	r1, [r3], #4
 801b9ce:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 801b9d0:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 801b9d4:	67a1      	str	r1, [r4, #120]	@ 0x78
 801b9d6:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 801b9d8:	0389      	lsls	r1, r1, #14
 801b9da:	d402      	bmi.n	801b9e2 <Argus_Dev_StartAuxMeasurement+0x126>
 801b9dc:	f8b4 1075 	ldrh.w	r1, [r4, #117]	@ 0x75
 801b9e0:	b151      	cbz	r1, 801b9f8 <Argus_Dev_StartAuxMeasurement+0x13c>
 801b9e2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801b9e4:	6018      	str	r0, [r3, #0]
 801b9e6:	2122      	movs	r1, #34	@ 0x22
 801b9e8:	8019      	strh	r1, [r3, #0]
 801b9ea:	2100      	movs	r1, #0
 801b9ec:	7099      	strb	r1, [r3, #2]
 801b9ee:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 801b9f0:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 801b9f4:	3304      	adds	r3, #4
 801b9f6:	67a1      	str	r1, [r4, #120]	@ 0x78
 801b9f8:	2500      	movs	r5, #0
 801b9fa:	2108      	movs	r1, #8
 801b9fc:	f8a3 5001 	strh.w	r5, [r3, #1]
 801ba00:	70dd      	strb	r5, [r3, #3]
 801ba02:	7019      	strb	r1, [r3, #0]
 801ba04:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 801ba06:	f8b4 0069 	ldrh.w	r0, [r4, #105]	@ 0x69
 801ba0a:	f041 0110 	orr.w	r1, r1, #16
 801ba0e:	67a1      	str	r1, [r4, #120]	@ 0x78
 801ba10:	f894 106b 	ldrb.w	r1, [r4, #107]	@ 0x6b
 801ba14:	8098      	strh	r0, [r3, #4]
 801ba16:	f001 01e1 	and.w	r1, r1, #225	@ 0xe1
 801ba1a:	7199      	strb	r1, [r3, #6]
 801ba1c:	f001 001f 	and.w	r0, r1, #31
 801ba20:	211c      	movs	r1, #28
 801ba22:	7119      	strb	r1, [r3, #4]
 801ba24:	f8d4 111c 	ldr.w	r1, [r4, #284]	@ 0x11c
 801ba28:	f893 c005 	ldrb.w	ip, [r3, #5]
 801ba2c:	f8b1 10a0 	ldrh.w	r1, [r1, #160]	@ 0xa0
 801ba30:	3901      	subs	r1, #1
 801ba32:	f02c 0c7f 	bic.w	ip, ip, #127	@ 0x7f
 801ba36:	f3c1 01c6 	ubfx	r1, r1, #3, #7
 801ba3a:	ea41 010c 	orr.w	r1, r1, ip
 801ba3e:	b249      	sxtb	r1, r1
 801ba40:	7159      	strb	r1, [r3, #5]
 801ba42:	f8d4 611c 	ldr.w	r6, [r4, #284]	@ 0x11c
 801ba46:	f8b6 c0a0 	ldrh.w	ip, [r6, #160]	@ 0xa0
 801ba4a:	f061 017f 	orn	r1, r1, #127	@ 0x7f
 801ba4e:	7159      	strb	r1, [r3, #5]
 801ba50:	f10c 31ff 	add.w	r1, ip, #4294967295
 801ba54:	ea40 1141 	orr.w	r1, r0, r1, lsl #5
 801ba58:	7199      	strb	r1, [r3, #6]
 801ba5a:	9403      	str	r4, [sp, #12]
 801ba5c:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 801ba5e:	4816      	ldr	r0, [pc, #88]	@ (801bab8 <Argus_Dev_StartAuxMeasurement+0x1fc>)
 801ba60:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 801ba64:	67a1      	str	r1, [r4, #120]	@ 0x78
 801ba66:	f8d4 111c 	ldr.w	r1, [r4, #284]	@ 0x11c
 801ba6a:	9002      	str	r0, [sp, #8]
 801ba6c:	4813      	ldr	r0, [pc, #76]	@ (801babc <Argus_Dev_StartAuxMeasurement+0x200>)
 801ba6e:	9001      	str	r0, [sp, #4]
 801ba70:	f8d1 10a4 	ldr.w	r1, [r1, #164]	@ 0xa4
 801ba74:	9100      	str	r1, [sp, #0]
 801ba76:	3307      	adds	r3, #7
 801ba78:	1a9b      	subs	r3, r3, r2
 801ba7a:	4611      	mov	r1, r2
 801ba7c:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801ba80:	f006 fba4 	bl	80221cc <ADS_TransferWithStart>
 801ba84:	1e03      	subs	r3, r0, #0
 801ba86:	da02      	bge.n	801ba8e <Argus_Dev_StartAuxMeasurement+0x1d2>
 801ba88:	f8d4 2104 	ldr.w	r2, [r4, #260]	@ 0x104
 801ba8c:	b912      	cbnz	r2, 801ba94 <Argus_Dev_StartAuxMeasurement+0x1d8>
 801ba8e:	4618      	mov	r0, r3
 801ba90:	b004      	add	sp, #16
 801ba92:	bd70      	pop	{r4, r5, r6, pc}
 801ba94:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 801ba98:	f8c4 5104 	str.w	r5, [r4, #260]	@ 0x104
 801ba9c:	b004      	add	sp, #16
 801ba9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801baa2:	4710      	bx	r2
 801baa4:	f895 109d 	ldrb.w	r1, [r5, #157]	@ 0x9d
 801baa8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 801baac:	4299      	cmp	r1, r3
 801baae:	f47f af46 	bne.w	801b93e <Argus_Dev_StartAuxMeasurement+0x82>
 801bab2:	f104 038b 	add.w	r3, r4, #139	@ 0x8b
 801bab6:	e761      	b.n	801b97c <Argus_Dev_StartAuxMeasurement+0xc0>
 801bab8:	0801b0a1 	.word	0x0801b0a1
 801babc:	0801b0bd 	.word	0x0801b0bd

0801bac0 <Argus_Cfg_Init>:
 801bac0:	b538      	push	{r3, r4, r5, lr}
 801bac2:	4604      	mov	r4, r0
 801bac4:	460d      	mov	r5, r1
 801bac6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 801baca:	2100      	movs	r1, #0
 801bacc:	f007 fe89 	bl	80237e2 <memset>
 801bad0:	f8c4 5128 	str.w	r5, [r4, #296]	@ 0x128
 801bad4:	bd38      	pop	{r3, r4, r5, pc}
 801bad6:	bf00      	nop

0801bad8 <Argus_Cfg_GetConfiguration>:
 801bad8:	460b      	mov	r3, r1
 801bada:	f44f 7294 	mov.w	r2, #296	@ 0x128
 801bade:	4601      	mov	r1, r0
 801bae0:	4618      	mov	r0, r3
 801bae2:	f007 bf0e 	b.w	8023902 <memcpy>
 801bae6:	bf00      	nop

0801bae8 <Argus_Cfg_CheckConfiguration>:
 801bae8:	b538      	push	{r3, r4, r5, lr}
 801baea:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 801baee:	4604      	mov	r4, r0
 801baf0:	b1b3      	cbz	r3, 801bb20 <Argus_Cfg_CheckConfiguration+0x38>
 801baf2:	f8b0 1104 	ldrh.w	r1, [r0, #260]	@ 0x104
 801baf6:	f8b0 509c 	ldrh.w	r5, [r0, #156]	@ 0x9c
 801bafa:	e9d0 2325 	ldrd	r2, r3, [r0, #148]	@ 0x94
 801bafe:	0989      	lsrs	r1, r1, #6
 801bb00:	2901      	cmp	r1, #1
 801bb02:	bf38      	it	cc
 801bb04:	2101      	movcc	r1, #1
 801bb06:	fb03 2101 	mla	r1, r3, r1, r2
 801bb0a:	6843      	ldr	r3, [r0, #4]
 801bb0c:	1b5a      	subs	r2, r3, r5
 801bb0e:	f3c1 3040 	ubfx	r0, r1, #13, #1
 801bb12:	eba2 3291 	sub.w	r2, r2, r1, lsr #14
 801bb16:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 801bb1a:	1a12      	subs	r2, r2, r0
 801bb1c:	4291      	cmp	r1, r2
 801bb1e:	dc13      	bgt.n	801bb48 <Argus_Cfg_CheckConfiguration+0x60>
 801bb20:	1d25      	adds	r5, r4, #4
 801bb22:	4628      	mov	r0, r5
 801bb24:	f7fd fe70 	bl	8019808 <Argus_Dev_CheckCfg>
 801bb28:	2800      	cmp	r0, #0
 801bb2a:	db0c      	blt.n	801bb46 <Argus_Cfg_CheckConfiguration+0x5e>
 801bb2c:	4629      	mov	r1, r5
 801bb2e:	f104 00f4 	add.w	r0, r4, #244	@ 0xf4
 801bb32:	f7f9 fa01 	bl	8014f38 <Argus_Dca_CheckCfg>
 801bb36:	2800      	cmp	r0, #0
 801bb38:	db05      	blt.n	801bb46 <Argus_Cfg_CheckConfiguration+0x5e>
 801bb3a:	f504 7086 	add.w	r0, r4, #268	@ 0x10c
 801bb3e:	f7f8 f96f 	bl	8013e20 <Argus_Pba_CheckCfg>
 801bb42:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 801bb46:	bd38      	pop	{r3, r4, r5, pc}
 801bb48:	4801      	ldr	r0, [pc, #4]	@ (801bb50 <Argus_Cfg_CheckConfiguration+0x68>)
 801bb4a:	f7f2 f9e1 	bl	800df10 <print>
 801bb4e:	e7e7      	b.n	801bb20 <Argus_Cfg_CheckConfiguration+0x38>
 801bb50:	08029f88 	.word	0x08029f88

0801bb54 <Argus_Cfg_CopyConfiguration>:
 801bb54:	b510      	push	{r4, lr}
 801bb56:	f44f 7294 	mov.w	r2, #296	@ 0x128
 801bb5a:	4604      	mov	r4, r0
 801bb5c:	f007 fed1 	bl	8023902 <memcpy>
 801bb60:	4620      	mov	r0, r4
 801bb62:	f7fe f8b5 	bl	8019cd0 <Argus_Dev_PrepareCfg>
 801bb66:	4620      	mov	r0, r4
 801bb68:	bd10      	pop	{r4, pc}
 801bb6a:	bf00      	nop

0801bb6c <Argus_GetDefaultCfg>:
 801bb6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb70:	f649 4440 	movw	r4, #40000	@ 0x9c40
 801bb74:	f890 e10c 	ldrb.w	lr, [r0, #268]	@ 0x10c
 801bb78:	6044      	str	r4, [r0, #4]
 801bb7a:	2a05      	cmp	r2, #5
 801bb7c:	f04f 0402 	mov.w	r4, #2
 801bb80:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 801bb84:	f880 410d 	strb.w	r4, [r0, #269]	@ 0x10d
 801bb88:	f04e 0e01 	orr.w	lr, lr, #1
 801bb8c:	f000 8457 	beq.w	801c43e <Argus_GetDefaultCfg+0x8d2>
 801bb90:	2a04      	cmp	r2, #4
 801bb92:	f000 8250 	beq.w	801c036 <Argus_GetDefaultCfg+0x4ca>
 801bb96:	4cd6      	ldr	r4, [pc, #856]	@ (801bef0 <Argus_GetDefaultCfg+0x384>)
 801bb98:	4dd6      	ldr	r5, [pc, #856]	@ (801bef4 <Argus_GetDefaultCfg+0x388>)
 801bb9a:	2a03      	cmp	r2, #3
 801bb9c:	bf18      	it	ne
 801bb9e:	462c      	movne	r4, r5
 801bba0:	f8c0 4124 	str.w	r4, [r0, #292]	@ 0x124
 801bba4:	f011 0401 	ands.w	r4, r1, #1
 801bba8:	f000 8565 	beq.w	801c676 <Argus_GetDefaultCfg+0xb0a>
 801bbac:	2580      	movs	r5, #128	@ 0x80
 801bbae:	f8a0 5110 	strh.w	r5, [r0, #272]	@ 0x110
 801bbb2:	2a03      	cmp	r2, #3
 801bbb4:	f04f 0550 	mov.w	r5, #80	@ 0x50
 801bbb8:	f8a0 5112 	strh.w	r5, [r0, #274]	@ 0x112
 801bbbc:	f000 8565 	beq.w	801c68a <Argus_GetDefaultCfg+0xb1e>
 801bbc0:	f243 353d 	movw	r5, #13117	@ 0x333d
 801bbc4:	fa4f fe8e 	sxtb.w	lr, lr
 801bbc8:	f8a0 510e 	strh.w	r5, [r0, #270]	@ 0x10e
 801bbcc:	2c00      	cmp	r4, #0
 801bbce:	f000 8249 	beq.w	801c064 <Argus_GetDefaultCfg+0x4f8>
 801bbd2:	4dc9      	ldr	r5, [pc, #804]	@ (801bef8 <Argus_GetDefaultCfg+0x38c>)
 801bbd4:	f8c0 511a 	str.w	r5, [r0, #282]	@ 0x11a
 801bbd8:	2514      	movs	r5, #20
 801bbda:	f880 5118 	strb.w	r5, [r0, #280]	@ 0x118
 801bbde:	251f      	movs	r5, #31
 801bbe0:	f880 5119 	strb.w	r5, [r0, #281]	@ 0x119
 801bbe4:	4dc5      	ldr	r5, [pc, #788]	@ (801befc <Argus_GetDefaultCfg+0x390>)
 801bbe6:	f8c0 5120 	str.w	r5, [r0, #288]	@ 0x120
 801bbea:	2a05      	cmp	r2, #5
 801bbec:	f04f 0503 	mov.w	r5, #3
 801bbf0:	f880 511f 	strb.w	r5, [r0, #287]	@ 0x11f
 801bbf4:	f000 83e4 	beq.w	801c3c0 <Argus_GetDefaultCfg+0x854>
 801bbf8:	2502      	movs	r5, #2
 801bbfa:	2a04      	cmp	r2, #4
 801bbfc:	f880 511e 	strb.w	r5, [r0, #286]	@ 0x11e
 801bc00:	f000 844d 	beq.w	801c49e <Argus_GetDefaultCfg+0x932>
 801bc04:	2a03      	cmp	r2, #3
 801bc06:	f040 86cc 	bne.w	801c9a2 <Argus_GetDefaultCfg+0xe36>
 801bc0a:	f04e 0e30 	orr.w	lr, lr, #48	@ 0x30
 801bc0e:	f44f 557a 	mov.w	r5, #16000	@ 0x3e80
 801bc12:	f880 e10c 	strb.w	lr, [r0, #268]	@ 0x10c
 801bc16:	f8a0 5114 	strh.w	r5, [r0, #276]	@ 0x114
 801bc1a:	2c00      	cmp	r4, #0
 801bc1c:	f040 87d6 	bne.w	801cbcc <Argus_GetDefaultCfg+0x1060>
 801bc20:	2560      	movs	r5, #96	@ 0x60
 801bc22:	f8a0 5116 	strh.w	r5, [r0, #278]	@ 0x116
 801bc26:	2a00      	cmp	r2, #0
 801bc28:	f040 8447 	bne.w	801c4ba <Argus_GetDefaultCfg+0x94e>
 801bc2c:	f240 15ff 	movw	r5, #511	@ 0x1ff
 801bc30:	f8a0 50f4 	strh.w	r5, [r0, #244]	@ 0xf4
 801bc34:	2503      	movs	r5, #3
 801bc36:	f880 50f6 	strb.w	r5, [r0, #246]	@ 0xf6
 801bc3a:	2510      	movs	r5, #16
 801bc3c:	f880 50f7 	strb.w	r5, [r0, #247]	@ 0xf7
 801bc40:	4daf      	ldr	r5, [pc, #700]	@ (801bf00 <Argus_GetDefaultCfg+0x394>)
 801bc42:	f8c0 50f8 	str.w	r5, [r0, #248]	@ 0xf8
 801bc46:	f44f 5548 	mov.w	r5, #12800	@ 0x3200
 801bc4a:	f8a0 50fc 	strh.w	r5, [r0, #252]	@ 0xfc
 801bc4e:	f44f 7680 	mov.w	r6, #256	@ 0x100
 801bc52:	2501      	movs	r5, #1
 801bc54:	f880 50fe 	strb.w	r5, [r0, #254]	@ 0xfe
 801bc58:	f8a0 6100 	strh.w	r6, [r0, #256]	@ 0x100
 801bc5c:	2c00      	cmp	r4, #0
 801bc5e:	f000 84a2 	beq.w	801c5a6 <Argus_GetDefaultCfg+0xa3a>
 801bc62:	260d      	movs	r6, #13
 801bc64:	f8a0 6102 	strh.w	r6, [r0, #258]	@ 0x102
 801bc68:	f44f 6680 	mov.w	r6, #1024	@ 0x400
 801bc6c:	f8a0 6104 	strh.w	r6, [r0, #260]	@ 0x104
 801bc70:	2602      	movs	r6, #2
 801bc72:	f880 60ff 	strb.w	r6, [r0, #255]	@ 0xff
 801bc76:	2a00      	cmp	r2, #0
 801bc78:	f040 8463 	bne.w	801c542 <Argus_GetDefaultCfg+0x9d6>
 801bc7c:	f880 5021 	strb.w	r5, [r0, #33]	@ 0x21
 801bc80:	2508      	movs	r5, #8
 801bc82:	7305      	strb	r5, [r0, #12]
 801bc84:	81c5      	strh	r5, [r0, #14]
 801bc86:	4d9f      	ldr	r5, [pc, #636]	@ (801bf04 <Argus_GetDefaultCfg+0x398>)
 801bc88:	6085      	str	r5, [r0, #8]
 801bc8a:	4d9f      	ldr	r5, [pc, #636]	@ (801bf08 <Argus_GetDefaultCfg+0x39c>)
 801bc8c:	f8c0 5022 	str.w	r5, [r0, #34]	@ 0x22
 801bc90:	f04f 554c 	mov.w	r5, #855638016	@ 0x33000000
 801bc94:	f8c0 5106 	str.w	r5, [r0, #262]	@ 0x106
 801bc98:	f240 2566 	movw	r5, #614	@ 0x266
 801bc9c:	8205      	strh	r5, [r0, #16]
 801bc9e:	2550      	movs	r5, #80	@ 0x50
 801bca0:	f880 6092 	strb.w	r6, [r0, #146]	@ 0x92
 801bca4:	8245      	strh	r5, [r0, #18]
 801bca6:	f04f 0c02 	mov.w	ip, #2
 801bcaa:	4d98      	ldr	r5, [pc, #608]	@ (801bf0c <Argus_GetDefaultCfg+0x3a0>)
 801bcac:	f8df a278 	ldr.w	sl, [pc, #632]	@ 801bf28 <Argus_GetDefaultCfg+0x3bc>
 801bcb0:	e9c0 a506 	strd	sl, r5, [r0, #24]
 801bcb4:	2500      	movs	r5, #0
 801bcb6:	7345      	strb	r5, [r0, #13]
 801bcb8:	f649 4540 	movw	r5, #40000	@ 0x9c40
 801bcbc:	6145      	str	r5, [r0, #20]
 801bcbe:	2540      	movs	r5, #64	@ 0x40
 801bcc0:	f880 5020 	strb.w	r5, [r0, #32]
 801bcc4:	4e92      	ldr	r6, [pc, #584]	@ (801bf10 <Argus_GetDefaultCfg+0x3a4>)
 801bcc6:	4d93      	ldr	r5, [pc, #588]	@ (801bf14 <Argus_GetDefaultCfg+0x3a8>)
 801bcc8:	e9c0 6525 	strd	r6, r5, [r0, #148]	@ 0x94
 801bccc:	f44f 7616 	mov.w	r6, #600	@ 0x258
 801bcd0:	f8a0 609c 	strh.w	r6, [r0, #156]	@ 0x9c
 801bcd4:	f240 7601 	movw	r6, #1793	@ 0x701
 801bcd8:	f8a0 60a0 	strh.w	r6, [r0, #160]	@ 0xa0
 801bcdc:	2603      	movs	r6, #3
 801bcde:	f880 60a2 	strb.w	r6, [r0, #162]	@ 0xa2
 801bce2:	4e8d      	ldr	r6, [pc, #564]	@ (801bf18 <Argus_GetDefaultCfg+0x3ac>)
 801bce4:	f880 c0d8 	strb.w	ip, [r0, #216]	@ 0xd8
 801bce8:	f8c0 60d0 	str.w	r6, [r0, #208]	@ 0xd0
 801bcec:	f8df c23c 	ldr.w	ip, [pc, #572]	@ 801bf2c <Argus_GetDefaultCfg+0x3c0>
 801bcf0:	4e8a      	ldr	r6, [pc, #552]	@ (801bf1c <Argus_GetDefaultCfg+0x3b0>)
 801bcf2:	f880 40a3 	strb.w	r4, [r0, #163]	@ 0xa3
 801bcf6:	e9c0 c631 	strd	ip, r6, [r0, #196]	@ 0xc4
 801bcfa:	f44f 7c96 	mov.w	ip, #300	@ 0x12c
 801bcfe:	f8c0 c0a8 	str.w	ip, [r0, #168]	@ 0xa8
 801bd02:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 801bd06:	f8a0 c0ce 	strh.w	ip, [r0, #206]	@ 0xce
 801bd0a:	f44f 6c16 	mov.w	ip, #2400	@ 0x960
 801bd0e:	f8a0 c0d4 	strh.w	ip, [r0, #212]	@ 0xd4
 801bd12:	f04f 0c03 	mov.w	ip, #3
 801bd16:	f880 c0cc 	strb.w	ip, [r0, #204]	@ 0xcc
 801bd1a:	f04f 0c33 	mov.w	ip, #51	@ 0x33
 801bd1e:	2c00      	cmp	r4, #0
 801bd20:	f880 c0d9 	strb.w	ip, [r0, #217]	@ 0xd9
 801bd24:	f04f 0c05 	mov.w	ip, #5
 801bd28:	f880 c0da 	strb.w	ip, [r0, #218]	@ 0xda
 801bd2c:	bf14      	ite	ne
 801bd2e:	f04f 0c18 	movne.w	ip, #24
 801bd32:	f04f 0c20 	moveq.w	ip, #32
 801bd36:	f8a0 c0de 	strh.w	ip, [r0, #222]	@ 0xde
 801bd3a:	f04f 0604 	mov.w	r6, #4
 801bd3e:	bf14      	ite	ne
 801bd40:	f04f 0c30 	movne.w	ip, #48	@ 0x30
 801bd44:	f04f 0c40 	moveq.w	ip, #64	@ 0x40
 801bd48:	2a05      	cmp	r2, #5
 801bd4a:	f8a0 60a4 	strh.w	r6, [r0, #164]	@ 0xa4
 801bd4e:	f8a0 c0dc 	strh.w	ip, [r0, #220]	@ 0xdc
 801bd52:	f000 838a 	beq.w	801c46a <Argus_GetDefaultCfg+0x8fe>
 801bd56:	2a04      	cmp	r2, #4
 801bd58:	f880 60db 	strb.w	r6, [r0, #219]	@ 0xdb
 801bd5c:	f000 8613 	beq.w	801c986 <Argus_GetDefaultCfg+0xe1a>
 801bd60:	2a03      	cmp	r2, #3
 801bd62:	f000 8512 	beq.w	801c78a <Argus_GetDefaultCfg+0xc1e>
 801bd66:	4e6e      	ldr	r6, [pc, #440]	@ (801bf20 <Argus_GetDefaultCfg+0x3b4>)
 801bd68:	f8c0 60e0 	str.w	r6, [r0, #224]	@ 0xe0
 801bd6c:	f8c0 60f0 	str.w	r6, [r0, #240]	@ 0xf0
 801bd70:	4e6c      	ldr	r6, [pc, #432]	@ (801bf24 <Argus_GetDefaultCfg+0x3b8>)
 801bd72:	f8c0 60e8 	str.w	r6, [r0, #232]	@ 0xe8
 801bd76:	f44f 7ca0 	mov.w	ip, #320	@ 0x140
 801bd7a:	2601      	movs	r6, #1
 801bd7c:	f8a0 c0ec 	strh.w	ip, [r0, #236]	@ 0xec
 801bd80:	42b2      	cmp	r2, r6
 801bd82:	f241 4c0d 	movw	ip, #5133	@ 0x140d
 801bd86:	f880 60e4 	strb.w	r6, [r0, #228]	@ 0xe4
 801bd8a:	f8a0 c0e5 	strh.w	ip, [r0, #229]	@ 0xe5
 801bd8e:	f040 8721 	bne.w	801cbd4 <Argus_GetDefaultCfg+0x1068>
 801bd92:	4616      	mov	r6, r2
 801bd94:	46a4      	mov	ip, r4
 801bd96:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 801bf30 <Argus_GetDefaultCfg+0x3c4>
 801bd9a:	f880 c0ac 	strb.w	ip, [r0, #172]	@ 0xac
 801bd9e:	f8df c194 	ldr.w	ip, [pc, #404]	@ 801bf34 <Argus_GetDefaultCfg+0x3c8>
 801bda2:	f8df 9194 	ldr.w	r9, [pc, #404]	@ 801bf38 <Argus_GetDefaultCfg+0x3cc>
 801bda6:	e9c0 8c2c 	strd	r8, ip, [r0, #176]	@ 0xb0
 801bdaa:	f5ac 0c00 	sub.w	ip, ip, #8388608	@ 0x800000
 801bdae:	f5ac 7c82 	sub.w	ip, ip, #260	@ 0x104
 801bdb2:	f8c0 c0b8 	str.w	ip, [r0, #184]	@ 0xb8
 801bdb6:	f8df c184 	ldr.w	ip, [pc, #388]	@ 801bf3c <Argus_GetDefaultCfg+0x3d0>
 801bdba:	e9c0 9c2f 	strd	r9, ip, [r0, #188]	@ 0xbc
 801bdbe:	f8df c180 	ldr.w	ip, [pc, #384]	@ 801bf40 <Argus_GetDefaultCfg+0x3d4>
 801bdc2:	f8c0 c02b 	str.w	ip, [r0, #43]	@ 0x2b
 801bdc6:	f04f 0c55 	mov.w	ip, #85	@ 0x55
 801bdca:	f880 c0ad 	strb.w	ip, [r0, #173]	@ 0xad
 801bdce:	f64a 2c55 	movw	ip, #43605	@ 0xaa55
 801bdd2:	f8a0 c0ae 	strh.w	ip, [r0, #174]	@ 0xae
 801bdd6:	f04f 0c00 	mov.w	ip, #0
 801bdda:	f8c0 c027 	str.w	ip, [r0, #39]	@ 0x27
 801bdde:	2a01      	cmp	r2, #1
 801bde0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 801bde4:	f880 c030 	strb.w	ip, [r0, #48]	@ 0x30
 801bde8:	f000 81ca 	beq.w	801c180 <Argus_GetDefaultCfg+0x614>
 801bdec:	2c00      	cmp	r4, #0
 801bdee:	bf18      	it	ne
 801bdf0:	f04f 0cf0 	movne.w	ip, #240	@ 0xf0
 801bdf4:	f04f 38f0 	mov.w	r8, #4042322160	@ 0xf0f0f0f0
 801bdf8:	2a03      	cmp	r2, #3
 801bdfa:	e9c0 880d 	strd	r8, r8, [r0, #52]	@ 0x34
 801bdfe:	f880 c031 	strb.w	ip, [r0, #49]	@ 0x31
 801be02:	f880 c032 	strb.w	ip, [r0, #50]	@ 0x32
 801be06:	f880 c033 	strb.w	ip, [r0, #51]	@ 0x33
 801be0a:	f8c0 803c 	str.w	r8, [r0, #60]	@ 0x3c
 801be0e:	f000 81ba 	beq.w	801c186 <Argus_GetDefaultCfg+0x61a>
 801be12:	2a01      	cmp	r2, #1
 801be14:	f000 81ad 	beq.w	801c172 <Argus_GetDefaultCfg+0x606>
 801be18:	2c00      	cmp	r4, #0
 801be1a:	f040 81aa 	bne.w	801c172 <Argus_GetDefaultCfg+0x606>
 801be1e:	f64f 78ff 	movw	r8, #65535	@ 0xffff
 801be22:	f8a0 8041 	strh.w	r8, [r0, #65]	@ 0x41
 801be26:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 801be2a:	f880 c051 	strb.w	ip, [r0, #81]	@ 0x51
 801be2e:	f880 c052 	strb.w	ip, [r0, #82]	@ 0x52
 801be32:	f880 c053 	strb.w	ip, [r0, #83]	@ 0x53
 801be36:	f04f 3c0f 	mov.w	ip, #252645135	@ 0xf0f0f0f
 801be3a:	e9c0 cc11 	strd	ip, ip, [r0, #68]	@ 0x44
 801be3e:	f8c0 c04c 	str.w	ip, [r0, #76]	@ 0x4c
 801be42:	f04f 3cf0 	mov.w	ip, #4042322160	@ 0xf0f0f0f0
 801be46:	e9c0 cc15 	strd	ip, ip, [r0, #84]	@ 0x54
 801be4a:	f880 8043 	strb.w	r8, [r0, #67]	@ 0x43
 801be4e:	f8c0 c05c 	str.w	ip, [r0, #92]	@ 0x5c
 801be52:	f04f 08f0 	mov.w	r8, #240	@ 0xf0
 801be56:	f04f 0c0f 	mov.w	ip, #15
 801be5a:	2a01      	cmp	r2, #1
 801be5c:	f880 c050 	strb.w	ip, [r0, #80]	@ 0x50
 801be60:	f880 8060 	strb.w	r8, [r0, #96]	@ 0x60
 801be64:	f040 815c 	bne.w	801c120 <Argus_GetDefaultCfg+0x5b4>
 801be68:	fa4f f981 	sxtb.w	r9, r1
 801be6c:	f880 c068 	strb.w	ip, [r0, #104]	@ 0x68
 801be70:	ea4f 0c49 	mov.w	ip, r9, lsl #1
 801be74:	f00c 0c02 	and.w	ip, ip, #2
 801be78:	f04c 0c01 	orr.w	ip, ip, #1
 801be7c:	f880 c069 	strb.w	ip, [r0, #105]	@ 0x69
 801be80:	ea4f 1cc9 	mov.w	ip, r9, lsl #7
 801be84:	2c00      	cmp	r4, #0
 801be86:	f04c 0c04 	orr.w	ip, ip, #4
 801be8a:	f880 c063 	strb.w	ip, [r0, #99]	@ 0x63
 801be8e:	bf14      	ite	ne
 801be90:	f06f 0c07 	mvnne.w	ip, #7
 801be94:	f06f 0c7f 	mvneq.w	ip, #127	@ 0x7f
 801be98:	f04c 0c02 	orr.w	ip, ip, #2
 801be9c:	f880 c06b 	strb.w	ip, [r0, #107]	@ 0x6b
 801bea0:	bf14      	ite	ne
 801bea2:	f04f 0c04 	movne.w	ip, #4
 801bea6:	f04f 0c02 	moveq.w	ip, #2
 801beaa:	f890 806d 	ldrb.w	r8, [r0, #109]	@ 0x6d
 801beae:	f880 c062 	strb.w	ip, [r0, #98]	@ 0x62
 801beb2:	f04f 0c10 	mov.w	ip, #16
 801beb6:	f04f 0b00 	mov.w	fp, #0
 801beba:	f880 c064 	strb.w	ip, [r0, #100]	@ 0x64
 801bebe:	f245 1cfe 	movw	ip, #20990	@ 0x51fe
 801bec2:	f008 080f 	and.w	r8, r8, #15
 801bec6:	f880 b06c 	strb.w	fp, [r0, #108]	@ 0x6c
 801beca:	f8a0 c066 	strh.w	ip, [r0, #102]	@ 0x66
 801bece:	f04f 0a02 	mov.w	sl, #2
 801bed2:	fa5f fc88 	uxtb.w	ip, r8
 801bed6:	2f01      	cmp	r7, #1
 801bed8:	f880 c06d 	strb.w	ip, [r0, #109]	@ 0x6d
 801bedc:	d132      	bne.n	801bf44 <Argus_GetDefaultCfg+0x3d8>
 801bede:	f02b 0b01 	bic.w	fp, fp, #1
 801bee2:	f008 080f 	and.w	r8, r8, #15
 801bee6:	f880 b06c 	strb.w	fp, [r0, #108]	@ 0x6c
 801beea:	f048 0ca0 	orr.w	ip, r8, #160	@ 0xa0
 801beee:	e029      	b.n	801bf44 <Argus_GetDefaultCfg+0x3d8>
 801bef0:	f000999f 	.word	0xf000999f
 801bef4:	50009999 	.word	0x50009999
 801bef8:	20000ccd 	.word	0x20000ccd
 801befc:	fffccccd 	.word	0xfffccccd
 801bf00:	12c01680 	.word	0x12c01680
 801bf04:	016e3600 	.word	0x016e3600
 801bf08:	003201f4 	.word	0x003201f4
 801bf0c:	13880064 	.word	0x13880064
 801bf10:	0043199a 	.word	0x0043199a
 801bf14:	00022b85 	.word	0x00022b85
 801bf18:	06400190 	.word	0x06400190
 801bf1c:	04060c80 	.word	0x04060c80
 801bf20:	50009fff 	.word	0x50009fff
 801bf24:	10e014a0 	.word	0x10e014a0
 801bf28:	00800140 	.word	0x00800140
 801bf2c:	dac0b305 	.word	0xdac0b305
 801bf30:	0fa080c0 	.word	0x0fa080c0
 801bf34:	04430491 	.word	0x04430491
 801bf38:	005b8d80 	.word	0x005b8d80
 801bf3c:	002dc6c0 	.word	0x002dc6c0
 801bf40:	20640000 	.word	0x20640000
 801bf44:	f890 806f 	ldrb.w	r8, [r0, #111]	@ 0x6f
 801bf48:	f048 081e 	orr.w	r8, r8, #30
 801bf4c:	f028 0801 	bic.w	r8, r8, #1
 801bf50:	2c00      	cmp	r4, #0
 801bf52:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801bf56:	f880 806f 	strb.w	r8, [r0, #111]	@ 0x6f
 801bf5a:	f009 0908 	and.w	r9, r9, #8
 801bf5e:	bf14      	ite	ne
 801bf60:	f04f 0803 	movne.w	r8, #3
 801bf64:	f04f 0806 	moveq.w	r8, #6
 801bf68:	ea49 0908 	orr.w	r9, r9, r8
 801bf6c:	f02c 0c0a 	bic.w	ip, ip, #10
 801bf70:	f04f 080f 	mov.w	r8, #15
 801bf74:	ea4a 0c0c 	orr.w	ip, sl, ip
 801bf78:	f880 8070 	strb.w	r8, [r0, #112]	@ 0x70
 801bf7c:	f890 a078 	ldrb.w	sl, [r0, #120]	@ 0x78
 801bf80:	f04f 0812 	mov.w	r8, #18
 801bf84:	f880 8072 	strb.w	r8, [r0, #114]	@ 0x72
 801bf88:	f084 0801 	eor.w	r8, r4, #1
 801bf8c:	f04c 0c04 	orr.w	ip, ip, #4
 801bf90:	f00a 0a3f 	and.w	sl, sl, #63	@ 0x3f
 801bf94:	f880 8074 	strb.w	r8, [r0, #116]	@ 0x74
 801bf98:	f04f 0808 	mov.w	r8, #8
 801bf9c:	f00c 0cf6 	and.w	ip, ip, #246	@ 0xf6
 801bfa0:	f049 0920 	orr.w	r9, r9, #32
 801bfa4:	f880 8077 	strb.w	r8, [r0, #119]	@ 0x77
 801bfa8:	2b01      	cmp	r3, #1
 801bfaa:	f04a 0880 	orr.w	r8, sl, #128	@ 0x80
 801bfae:	f880 c06d 	strb.w	ip, [r0, #109]	@ 0x6d
 801bfb2:	f880 9075 	strb.w	r9, [r0, #117]	@ 0x75
 801bfb6:	f880 8078 	strb.w	r8, [r0, #120]	@ 0x78
 801bfba:	d104      	bne.n	801bfc6 <Argus_GetDefaultCfg+0x45a>
 801bfbc:	230c      	movs	r3, #12
 801bfbe:	f04a 08c0 	orr.w	r8, sl, #192	@ 0xc0
 801bfc2:	f880 3077 	strb.w	r3, [r0, #119]	@ 0x77
 801bfc6:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 801bfca:	2c00      	cmp	r4, #0
 801bfcc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 801bfd0:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
 801bfd4:	bf14      	ite	ne
 801bfd6:	2340      	movne	r3, #64	@ 0x40
 801bfd8:	f06f 037f 	mvneq.w	r3, #127	@ 0x7f
 801bfdc:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 801bfe0:	f880 307b 	strb.w	r3, [r0, #123]	@ 0x7b
 801bfe4:	2321      	movs	r3, #33	@ 0x21
 801bfe6:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
 801bfea:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801bfee:	f8a0 307c 	strh.w	r3, [r0, #124]	@ 0x7c
 801bff2:	23e9      	movs	r3, #233	@ 0xe9
 801bff4:	f008 08d0 	and.w	r8, r8, #208	@ 0xd0
 801bff8:	f880 307e 	strb.w	r3, [r0, #126]	@ 0x7e
 801bffc:	2300      	movs	r3, #0
 801bffe:	f048 0810 	orr.w	r8, r8, #16
 801c002:	f880 3081 	strb.w	r3, [r0, #129]	@ 0x81
 801c006:	2a04      	cmp	r2, #4
 801c008:	f04f 0303 	mov.w	r3, #3
 801c00c:	f880 8078 	strb.w	r8, [r0, #120]	@ 0x78
 801c010:	f880 3082 	strb.w	r3, [r0, #130]	@ 0x82
 801c014:	d02e      	beq.n	801c074 <Argus_GetDefaultCfg+0x508>
 801c016:	2a01      	cmp	r2, #1
 801c018:	f000 830c 	beq.w	801c634 <Argus_GetDefaultCfg+0xac8>
 801c01c:	b352      	cbz	r2, 801c074 <Argus_GetDefaultCfg+0x508>
 801c01e:	2c00      	cmp	r4, #0
 801c020:	f000 8362 	beq.w	801c6e8 <Argus_GetDefaultCfg+0xb7c>
 801c024:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
 801c028:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 801c02c:	f003 031f 	and.w	r3, r3, #31
 801c030:	f043 0320 	orr.w	r3, r3, #32
 801c034:	e029      	b.n	801c08a <Argus_GetDefaultCfg+0x51e>
 801c036:	4cd8      	ldr	r4, [pc, #864]	@ (801c398 <Argus_GetDefaultCfg+0x82c>)
 801c038:	f8c0 4124 	str.w	r4, [r0, #292]	@ 0x124
 801c03c:	4cd7      	ldr	r4, [pc, #860]	@ (801c39c <Argus_GetDefaultCfg+0x830>)
 801c03e:	f8c0 4110 	str.w	r4, [r0, #272]	@ 0x110
 801c042:	f011 0401 	ands.w	r4, r1, #1
 801c046:	f040 834a 	bne.w	801c6de <Argus_GetDefaultCfg+0xb72>
 801c04a:	2580      	movs	r5, #128	@ 0x80
 801c04c:	f880 510e 	strb.w	r5, [r0, #270]	@ 0x10e
 801c050:	2566      	movs	r5, #102	@ 0x66
 801c052:	f04e 0e40 	orr.w	lr, lr, #64	@ 0x40
 801c056:	f880 510f 	strb.w	r5, [r0, #271]	@ 0x10f
 801c05a:	fa4f fe8e 	sxtb.w	lr, lr
 801c05e:	2c00      	cmp	r4, #0
 801c060:	f47f adb7 	bne.w	801bbd2 <Argus_GetDefaultCfg+0x66>
 801c064:	4dce      	ldr	r5, [pc, #824]	@ (801c3a0 <Argus_GetDefaultCfg+0x834>)
 801c066:	f8c0 511a 	str.w	r5, [r0, #282]	@ 0x11a
 801c06a:	251f      	movs	r5, #31
 801c06c:	f880 5118 	strb.w	r5, [r0, #280]	@ 0x118
 801c070:	2529      	movs	r5, #41	@ 0x29
 801c072:	e5b5      	b.n	801bbe0 <Argus_GetDefaultCfg+0x74>
 801c074:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 801c078:	f04f 0802 	mov.w	r8, #2
 801c07c:	f003 031f 	and.w	r3, r3, #31
 801c080:	f880 8084 	strb.w	r8, [r0, #132]	@ 0x84
 801c084:	b10c      	cbz	r4, 801c08a <Argus_GetDefaultCfg+0x51e>
 801c086:	f063 031f 	orn	r3, r3, #31
 801c08a:	f04f 0800 	mov.w	r8, #0
 801c08e:	f023 031e 	bic.w	r3, r3, #30
 801c092:	f8a0 8087 	strh.w	r8, [r0, #135]	@ 0x87
 801c096:	f880 8089 	strb.w	r8, [r0, #137]	@ 0x89
 801c09a:	f043 0806 	orr.w	r8, r3, #6
 801c09e:	f880 8085 	strb.w	r8, [r0, #133]	@ 0x85
 801c0a2:	f64f 7801 	movw	r8, #65281	@ 0xff01
 801c0a6:	f8a0 808b 	strh.w	r8, [r0, #139]	@ 0x8b
 801c0aa:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 801c0ae:	f880 808d 	strb.w	r8, [r0, #141]	@ 0x8d
 801c0b2:	f64f 78ff 	movw	r8, #65535	@ 0xffff
 801c0b6:	f8a0 808f 	strh.w	r8, [r0, #143]	@ 0x8f
 801c0ba:	f04f 0804 	mov.w	r8, #4
 801c0be:	4547      	cmp	r7, r8
 801c0c0:	f880 8091 	strb.w	r8, [r0, #145]	@ 0x91
 801c0c4:	f000 80ab 	beq.w	801c21e <Argus_GetDefaultCfg+0x6b2>
 801c0c8:	074b      	lsls	r3, r1, #29
 801c0ca:	d527      	bpl.n	801c11c <Argus_GetDefaultCfg+0x5b0>
 801c0cc:	2300      	movs	r3, #0
 801c0ce:	f880 3109 	strb.w	r3, [r0, #265]	@ 0x109
 801c0d2:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 801c0d6:	f880 30e4 	strb.w	r3, [r0, #228]	@ 0xe4
 801c0da:	f880 30ac 	strb.w	r3, [r0, #172]	@ 0xac
 801c0de:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 801c0e2:	4ab0      	ldr	r2, [pc, #704]	@ (801c3a4 <Argus_GetDefaultCfg+0x838>)
 801c0e4:	f8a0 308f 	strh.w	r3, [r0, #143]	@ 0x8f
 801c0e8:	f240 114d 	movw	r1, #333	@ 0x14d
 801c0ec:	4bae      	ldr	r3, [pc, #696]	@ (801c3a8 <Argus_GetDefaultCfg+0x83c>)
 801c0ee:	6041      	str	r1, [r0, #4]
 801c0f0:	f44f 41f8 	mov.w	r1, #31744	@ 0x7c00
 801c0f4:	2c00      	cmp	r4, #0
 801c0f6:	bf18      	it	ne
 801c0f8:	4613      	movne	r3, r2
 801c0fa:	f8c0 5098 	str.w	r5, [r0, #152]	@ 0x98
 801c0fe:	f8a0 108c 	strh.w	r1, [r0, #140]	@ 0x8c
 801c102:	2501      	movs	r5, #1
 801c104:	21fa      	movs	r1, #250	@ 0xfa
 801c106:	2202      	movs	r2, #2
 801c108:	f880 60d8 	strb.w	r6, [r0, #216]	@ 0xd8
 801c10c:	f880 510d 	strb.w	r5, [r0, #269]	@ 0x10d
 801c110:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
 801c114:	f8a0 109c 	strh.w	r1, [r0, #156]	@ 0x9c
 801c118:	f8a0 20a4 	strh.w	r2, [r0, #164]	@ 0xa4
 801c11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c120:	f8df c298 	ldr.w	ip, [pc, #664]	@ 801c3bc <Argus_GetDefaultCfg+0x850>
 801c124:	f8c0 c066 	str.w	ip, [r0, #102]	@ 0x66
 801c128:	f104 0c03 	add.w	ip, r4, #3
 801c12c:	f880 c062 	strb.w	ip, [r0, #98]	@ 0x62
 801c130:	f04f 0c84 	mov.w	ip, #132	@ 0x84
 801c134:	f880 c063 	strb.w	ip, [r0, #99]	@ 0x63
 801c138:	f04f 0c10 	mov.w	ip, #16
 801c13c:	f880 c064 	strb.w	ip, [r0, #100]	@ 0x64
 801c140:	2a04      	cmp	r2, #4
 801c142:	f04f 0c00 	mov.w	ip, #0
 801c146:	f880 c06b 	strb.w	ip, [r0, #107]	@ 0x6b
 801c14a:	f040 827f 	bne.w	801c64c <Argus_GetDefaultCfg+0xae0>
 801c14e:	f890 806d 	ldrb.w	r8, [r0, #109]	@ 0x6d
 801c152:	4564      	cmp	r4, ip
 801c154:	f008 080f 	and.w	r8, r8, #15
 801c158:	bf14      	ite	ne
 801c15a:	f04f 0b20 	movne.w	fp, #32
 801c15e:	f04f 0b1c 	moveq.w	fp, #28
 801c162:	46e2      	mov	sl, ip
 801c164:	f048 0850 	orr.w	r8, r8, #80	@ 0x50
 801c168:	f880 b06c 	strb.w	fp, [r0, #108]	@ 0x6c
 801c16c:	fa4f f981 	sxtb.w	r9, r1
 801c170:	e6af      	b.n	801bed2 <Argus_GetDefaultCfg+0x366>
 801c172:	f640 780f 	movw	r8, #3855	@ 0xf0f
 801c176:	f8a0 8041 	strh.w	r8, [r0, #65]	@ 0x41
 801c17a:	f04f 080f 	mov.w	r8, #15
 801c17e:	e654      	b.n	801be2a <Argus_GetDefaultCfg+0x2be>
 801c180:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 801c184:	e636      	b.n	801bdf4 <Argus_GetDefaultCfg+0x288>
 801c186:	f04f 3c0f 	mov.w	ip, #252645135	@ 0xf0f0f0f
 801c18a:	2c00      	cmp	r4, #0
 801c18c:	e9c0 cc11 	strd	ip, ip, [r0, #68]	@ 0x44
 801c190:	f8c0 c04c 	str.w	ip, [r0, #76]	@ 0x4c
 801c194:	bf14      	ite	ne
 801c196:	f04f 0c0f 	movne.w	ip, #15
 801c19a:	f04f 0cff 	moveq.w	ip, #255	@ 0xff
 801c19e:	f880 c041 	strb.w	ip, [r0, #65]	@ 0x41
 801c1a2:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
 801c1a6:	f04f 0c0f 	mov.w	ip, #15
 801c1aa:	f880 c043 	strb.w	ip, [r0, #67]	@ 0x43
 801c1ae:	f880 c050 	strb.w	ip, [r0, #80]	@ 0x50
 801c1b2:	bf14      	ite	ne
 801c1b4:	f04f 0cf0 	movne.w	ip, #240	@ 0xf0
 801c1b8:	f04f 0cff 	moveq.w	ip, #255	@ 0xff
 801c1bc:	f880 c051 	strb.w	ip, [r0, #81]	@ 0x51
 801c1c0:	f880 c052 	strb.w	ip, [r0, #82]	@ 0x52
 801c1c4:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 801c1c8:	f880 c053 	strb.w	ip, [r0, #83]	@ 0x53
 801c1cc:	f880 c060 	strb.w	ip, [r0, #96]	@ 0x60
 801c1d0:	f8df c1e8 	ldr.w	ip, [pc, #488]	@ 801c3bc <Argus_GetDefaultCfg+0x850>
 801c1d4:	f8c0 c066 	str.w	ip, [r0, #102]	@ 0x66
 801c1d8:	f104 0c03 	add.w	ip, r4, #3
 801c1dc:	f880 c062 	strb.w	ip, [r0, #98]	@ 0x62
 801c1e0:	f04f 0c84 	mov.w	ip, #132	@ 0x84
 801c1e4:	f880 c063 	strb.w	ip, [r0, #99]	@ 0x63
 801c1e8:	e9c0 8815 	strd	r8, r8, [r0, #84]	@ 0x54
 801c1ec:	f04f 0c10 	mov.w	ip, #16
 801c1f0:	f880 c064 	strb.w	ip, [r0, #100]	@ 0x64
 801c1f4:	f04f 0c00 	mov.w	ip, #0
 801c1f8:	f8c0 805c 	str.w	r8, [r0, #92]	@ 0x5c
 801c1fc:	f880 c06b 	strb.w	ip, [r0, #107]	@ 0x6b
 801c200:	fa4f f981 	sxtb.w	r9, r1
 801c204:	f890 806d 	ldrb.w	r8, [r0, #109]	@ 0x6d
 801c208:	f04f 0b3f 	mov.w	fp, #63	@ 0x3f
 801c20c:	f008 080f 	and.w	r8, r8, #15
 801c210:	f048 0840 	orr.w	r8, r8, #64	@ 0x40
 801c214:	f880 b06c 	strb.w	fp, [r0, #108]	@ 0x6c
 801c218:	f04f 0a00 	mov.w	sl, #0
 801c21c:	e659      	b.n	801bed2 <Argus_GetDefaultCfg+0x366>
 801c21e:	2a05      	cmp	r2, #5
 801c220:	f000 82cb 	beq.w	801c7ba <Argus_GetDefaultCfg+0xc4e>
 801c224:	2a04      	cmp	r2, #4
 801c226:	f000 8289 	beq.w	801c73c <Argus_GetDefaultCfg+0xbd0>
 801c22a:	2a03      	cmp	r2, #3
 801c22c:	f000 83e7 	beq.w	801c9fe <Argus_GetDefaultCfg+0xe92>
 801c230:	2c00      	cmp	r4, #0
 801c232:	f000 8405 	beq.w	801ca40 <Argus_GetDefaultCfg+0xed4>
 801c236:	4f5d      	ldr	r7, [pc, #372]	@ (801c3ac <Argus_GetDefaultCfg+0x840>)
 801c238:	f8c0 7110 	str.w	r7, [r0, #272]	@ 0x110
 801c23c:	f507 4795 	add.w	r7, r7, #19072	@ 0x4a80
 801c240:	f8c0 7114 	str.w	r7, [r0, #276]	@ 0x114
 801c244:	2702      	movs	r7, #2
 801c246:	7447      	strb	r7, [r0, #17]
 801c248:	2a01      	cmp	r2, #1
 801c24a:	f04f 0703 	mov.w	r7, #3
 801c24e:	f880 e10c 	strb.w	lr, [r0, #268]	@ 0x10c
 801c252:	f880 7092 	strb.w	r7, [r0, #146]	@ 0x92
 801c256:	f000 827f 	beq.w	801c758 <Argus_GetDefaultCfg+0xbec>
 801c25a:	2750      	movs	r7, #80	@ 0x50
 801c25c:	2a03      	cmp	r2, #3
 801c25e:	8247      	strh	r7, [r0, #18]
 801c260:	f040 82bb 	bne.w	801c7da <Argus_GetDefaultCfg+0xc6e>
 801c264:	010a      	lsls	r2, r1, #4
 801c266:	f002 0210 	and.w	r2, r2, #16
 801c26a:	7342      	strb	r2, [r0, #13]
 801c26c:	2208      	movs	r2, #8
 801c26e:	7382      	strb	r2, [r0, #14]
 801c270:	2220      	movs	r2, #32
 801c272:	7302      	strb	r2, [r0, #12]
 801c274:	4a4e      	ldr	r2, [pc, #312]	@ (801c3b0 <Argus_GetDefaultCfg+0x844>)
 801c276:	f8c0 2098 	str.w	r2, [r0, #152]	@ 0x98
 801c27a:	4a4e      	ldr	r2, [pc, #312]	@ (801c3b4 <Argus_GetDefaultCfg+0x848>)
 801c27c:	6182      	str	r2, [r0, #24]
 801c27e:	2720      	movs	r7, #32
 801c280:	2240      	movs	r2, #64	@ 0x40
 801c282:	f8a0 20dc 	strh.w	r2, [r0, #220]	@ 0xdc
 801c286:	2202      	movs	r2, #2
 801c288:	f8a0 70de 	strh.w	r7, [r0, #222]	@ 0xde
 801c28c:	f880 20ac 	strb.w	r2, [r0, #172]	@ 0xac
 801c290:	2c00      	cmp	r4, #0
 801c292:	f000 8468 	beq.w	801cb66 <Argus_GetDefaultCfg+0xffa>
 801c296:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c29a:	f8a0 2031 	strh.w	r2, [r0, #49]	@ 0x31
 801c29e:	f880 2033 	strb.w	r2, [r0, #51]	@ 0x33
 801c2a2:	4a45      	ldr	r2, [pc, #276]	@ (801c3b8 <Argus_GetDefaultCfg+0x84c>)
 801c2a4:	f8c0 20f8 	str.w	r2, [r0, #248]	@ 0xf8
 801c2a8:	f44f 5261 	mov.w	r2, #14400	@ 0x3840
 801c2ac:	f8a0 20fc 	strh.w	r2, [r0, #252]	@ 0xfc
 801c2b0:	2210      	movs	r2, #16
 801c2b2:	f8a0 2102 	strh.w	r2, [r0, #258]	@ 0x102
 801c2b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801c2ba:	f8a0 2104 	strh.w	r2, [r0, #260]	@ 0x104
 801c2be:	f242 0264 	movw	r2, #8292	@ 0x2064
 801c2c2:	f8a0 202d 	strh.w	r2, [r0, #45]	@ 0x2d
 801c2c6:	f04f 0ef0 	mov.w	lr, #240	@ 0xf0
 801c2ca:	4267      	negs	r7, r4
 801c2cc:	22f0      	movs	r2, #240	@ 0xf0
 801c2ce:	b2ff      	uxtb	r7, r7
 801c2d0:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 801c2d4:	f880 e034 	strb.w	lr, [r0, #52]	@ 0x34
 801c2d8:	f880 e036 	strb.w	lr, [r0, #54]	@ 0x36
 801c2dc:	f880 e038 	strb.w	lr, [r0, #56]	@ 0x38
 801c2e0:	f880 e03a 	strb.w	lr, [r0, #58]	@ 0x3a
 801c2e4:	f880 e03c 	strb.w	lr, [r0, #60]	@ 0x3c
 801c2e8:	f880 e03e 	strb.w	lr, [r0, #62]	@ 0x3e
 801c2ec:	f880 7041 	strb.w	r7, [r0, #65]	@ 0x41
 801c2f0:	f880 2035 	strb.w	r2, [r0, #53]	@ 0x35
 801c2f4:	f880 2037 	strb.w	r2, [r0, #55]	@ 0x37
 801c2f8:	f880 2039 	strb.w	r2, [r0, #57]	@ 0x39
 801c2fc:	f880 8042 	strb.w	r8, [r0, #66]	@ 0x42
 801c300:	2c00      	cmp	r4, #0
 801c302:	f000 8407 	beq.w	801cb14 <Argus_GetDefaultCfg+0xfa8>
 801c306:	f880 7052 	strb.w	r7, [r0, #82]	@ 0x52
 801c30a:	f640 770f 	movw	r7, #3855	@ 0xf0f
 801c30e:	f8a0 7043 	strh.w	r7, [r0, #67]	@ 0x43
 801c312:	f8a0 704a 	strh.w	r7, [r0, #74]	@ 0x4a
 801c316:	f04f 370f 	mov.w	r7, #252645135	@ 0xf0f0f0f
 801c31a:	f8c0 7045 	str.w	r7, [r0, #69]	@ 0x45
 801c31e:	64c7      	str	r7, [r0, #76]	@ 0x4c
 801c320:	270f      	movs	r7, #15
 801c322:	f880 7049 	strb.w	r7, [r0, #73]	@ 0x49
 801c326:	f64f 770f 	movw	r7, #65295	@ 0xff0f
 801c32a:	f880 e053 	strb.w	lr, [r0, #83]	@ 0x53
 801c32e:	f880 2054 	strb.w	r2, [r0, #84]	@ 0x54
 801c332:	f880 e055 	strb.w	lr, [r0, #85]	@ 0x55
 801c336:	f880 2056 	strb.w	r2, [r0, #86]	@ 0x56
 801c33a:	f880 e057 	strb.w	lr, [r0, #87]	@ 0x57
 801c33e:	f880 2058 	strb.w	r2, [r0, #88]	@ 0x58
 801c342:	f880 e059 	strb.w	lr, [r0, #89]	@ 0x59
 801c346:	f8a0 7050 	strh.w	r7, [r0, #80]	@ 0x50
 801c34a:	f880 205a 	strb.w	r2, [r0, #90]	@ 0x5a
 801c34e:	f880 205c 	strb.w	r2, [r0, #92]	@ 0x5c
 801c352:	f880 205e 	strb.w	r2, [r0, #94]	@ 0x5e
 801c356:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
 801c35a:	f1c4 0206 	rsb	r2, r4, #6
 801c35e:	f880 2062 	strb.w	r2, [r0, #98]	@ 0x62
 801c362:	2284      	movs	r2, #132	@ 0x84
 801c364:	f00c 0c0f 	and.w	ip, ip, #15
 801c368:	f880 2063 	strb.w	r2, [r0, #99]	@ 0x63
 801c36c:	22fa      	movs	r2, #250	@ 0xfa
 801c36e:	2c00      	cmp	r4, #0
 801c370:	f06c 0c5f 	orn	ip, ip, #95	@ 0x5f
 801c374:	f880 206b 	strb.w	r2, [r0, #107]	@ 0x6b
 801c378:	f04f 02be 	mov.w	r2, #190	@ 0xbe
 801c37c:	f880 206c 	strb.w	r2, [r0, #108]	@ 0x6c
 801c380:	f880 c06d 	strb.w	ip, [r0, #109]	@ 0x6d
 801c384:	f880 e05b 	strb.w	lr, [r0, #91]	@ 0x5b
 801c388:	f880 e05d 	strb.w	lr, [r0, #93]	@ 0x5d
 801c38c:	f880 e05f 	strb.w	lr, [r0, #95]	@ 0x5f
 801c390:	bf14      	ite	ne
 801c392:	220f      	movne	r2, #15
 801c394:	2215      	moveq	r2, #21
 801c396:	e2eb      	b.n	801c970 <Argus_GetDefaultCfg+0xe04>
 801c398:	f0009999 	.word	0xf0009999
 801c39c:	01e00280 	.word	0x01e00280
 801c3a0:	20000f5c 	.word	0x20000f5c
 801c3a4:	0016e666 	.word	0x0016e666
 801c3a8:	001c4ccd 	.word	0x001c4ccd
 801c3ac:	00500080 	.word	0x00500080
 801c3b0:	0002828f 	.word	0x0002828f
 801c3b4:	00c001e0 	.word	0x00c001e0
 801c3b8:	12c01680 	.word	0x12c01680
 801c3bc:	010f51fe 	.word	0x010f51fe
 801c3c0:	2500      	movs	r5, #0
 801c3c2:	f880 511e 	strb.w	r5, [r0, #286]	@ 0x11e
 801c3c6:	46ac      	mov	ip, r5
 801c3c8:	2502      	movs	r5, #2
 801c3ca:	f880 50ff 	strb.w	r5, [r0, #255]	@ 0xff
 801c3ce:	f880 5092 	strb.w	r5, [r0, #146]	@ 0x92
 801c3d2:	4dcf      	ldr	r5, [pc, #828]	@ (801c710 <Argus_GetDefaultCfg+0xba4>)
 801c3d4:	f8df 8358 	ldr.w	r8, [pc, #856]	@ 801c730 <Argus_GetDefaultCfg+0xbc4>
 801c3d8:	f8c0 5114 	str.w	r5, [r0, #276]	@ 0x114
 801c3dc:	4dcd      	ldr	r5, [pc, #820]	@ (801c714 <Argus_GetDefaultCfg+0xba8>)
 801c3de:	f880 e10c 	strb.w	lr, [r0, #268]	@ 0x10c
 801c3e2:	e9c0 853d 	strd	r8, r5, [r0, #244]	@ 0xf4
 801c3e6:	4dcc      	ldr	r5, [pc, #816]	@ (801c718 <Argus_GetDefaultCfg+0xbac>)
 801c3e8:	f8c0 5106 	str.w	r5, [r0, #262]	@ 0x106
 801c3ec:	4dcb      	ldr	r5, [pc, #812]	@ (801c71c <Argus_GetDefaultCfg+0xbb0>)
 801c3ee:	6085      	str	r5, [r0, #8]
 801c3f0:	f44f 5548 	mov.w	r5, #12800	@ 0x3200
 801c3f4:	f8a0 50fc 	strh.w	r5, [r0, #252]	@ 0xfc
 801c3f8:	2501      	movs	r5, #1
 801c3fa:	2c00      	cmp	r4, #0
 801c3fc:	f880 50fe 	strb.w	r5, [r0, #254]	@ 0xfe
 801c400:	f44f 7580 	mov.w	r5, #256	@ 0x100
 801c404:	f8a0 5100 	strh.w	r5, [r0, #256]	@ 0x100
 801c408:	bf14      	ite	ne
 801c40a:	2509      	movne	r5, #9
 801c40c:	250b      	moveq	r5, #11
 801c40e:	f8a0 5102 	strh.w	r5, [r0, #258]	@ 0x102
 801c412:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 801c416:	f8a0 5104 	strh.w	r5, [r0, #260]	@ 0x104
 801c41a:	f240 2566 	movw	r5, #614	@ 0x266
 801c41e:	8205      	strh	r5, [r0, #16]
 801c420:	2c00      	cmp	r4, #0
 801c422:	f000 8141 	beq.w	801c6a8 <Argus_GetDefaultCfg+0xb3c>
 801c426:	2508      	movs	r5, #8
 801c428:	7305      	strb	r5, [r0, #12]
 801c42a:	81c5      	strh	r5, [r0, #14]
 801c42c:	4dbc      	ldr	r5, [pc, #752]	@ (801c720 <Argus_GetDefaultCfg+0xbb4>)
 801c42e:	f8c0 5022 	str.w	r5, [r0, #34]	@ 0x22
 801c432:	2540      	movs	r5, #64	@ 0x40
 801c434:	8245      	strh	r5, [r0, #18]
 801c436:	2501      	movs	r5, #1
 801c438:	f880 5021 	strb.w	r5, [r0, #33]	@ 0x21
 801c43c:	e435      	b.n	801bcaa <Argus_GetDefaultCfg+0x13e>
 801c43e:	2400      	movs	r4, #0
 801c440:	f8c0 4124 	str.w	r4, [r0, #292]	@ 0x124
 801c444:	f011 0401 	ands.w	r4, r1, #1
 801c448:	f040 8129 	bne.w	801c69e <Argus_GetDefaultCfg+0xb32>
 801c44c:	2580      	movs	r5, #128	@ 0x80
 801c44e:	f8a0 5110 	strh.w	r5, [r0, #272]	@ 0x110
 801c452:	2560      	movs	r5, #96	@ 0x60
 801c454:	f8a0 5112 	strh.w	r5, [r0, #274]	@ 0x112
 801c458:	f04e 0e40 	orr.w	lr, lr, #64	@ 0x40
 801c45c:	2500      	movs	r5, #0
 801c45e:	fa4f fe8e 	sxtb.w	lr, lr
 801c462:	f8a0 510e 	strh.w	r5, [r0, #270]	@ 0x10e
 801c466:	f7ff bbb1 	b.w	801bbcc <Argus_GetDefaultCfg+0x60>
 801c46a:	f8df c2c8 	ldr.w	ip, [pc, #712]	@ 801c734 <Argus_GetDefaultCfg+0xbc8>
 801c46e:	f8c0 c0e8 	str.w	ip, [r0, #232]	@ 0xe8
 801c472:	2600      	movs	r6, #0
 801c474:	f04f 0c06 	mov.w	ip, #6
 801c478:	f8c0 60e0 	str.w	r6, [r0, #224]	@ 0xe0
 801c47c:	f880 60e4 	strb.w	r6, [r0, #228]	@ 0xe4
 801c480:	f8c0 60f0 	str.w	r6, [r0, #240]	@ 0xf0
 801c484:	f880 c0db 	strb.w	ip, [r0, #219]	@ 0xdb
 801c488:	f44f 7ca0 	mov.w	ip, #320	@ 0x140
 801c48c:	f8a0 c0ec 	strh.w	ip, [r0, #236]	@ 0xec
 801c490:	f241 4c0d 	movw	ip, #5133	@ 0x140d
 801c494:	f8a0 c0e5 	strh.w	ip, [r0, #229]	@ 0xe5
 801c498:	f04f 0c01 	mov.w	ip, #1
 801c49c:	e47b      	b.n	801bd96 <Argus_GetDefaultCfg+0x22a>
 801c49e:	f04e 0e30 	orr.w	lr, lr, #48	@ 0x30
 801c4a2:	f44f 557a 	mov.w	r5, #16000	@ 0x3e80
 801c4a6:	f880 e10c 	strb.w	lr, [r0, #268]	@ 0x10c
 801c4aa:	f8a0 5114 	strh.w	r5, [r0, #276]	@ 0x114
 801c4ae:	2c00      	cmp	r4, #0
 801c4b0:	f040 8108 	bne.w	801c6c4 <Argus_GetDefaultCfg+0xb58>
 801c4b4:	2560      	movs	r5, #96	@ 0x60
 801c4b6:	f8a0 5116 	strh.w	r5, [r0, #278]	@ 0x116
 801c4ba:	f240 1501 	movw	r5, #257	@ 0x101
 801c4be:	2a04      	cmp	r2, #4
 801c4c0:	f8a0 50f4 	strh.w	r5, [r0, #244]	@ 0xf4
 801c4c4:	f000 8105 	beq.w	801c6d2 <Argus_GetDefaultCfg+0xb66>
 801c4c8:	2a03      	cmp	r2, #3
 801c4ca:	f040 8389 	bne.w	801cbe0 <Argus_GetDefaultCfg+0x1074>
 801c4ce:	4d91      	ldr	r5, [pc, #580]	@ (801c714 <Argus_GetDefaultCfg+0xba8>)
 801c4d0:	f8c0 50f8 	str.w	r5, [r0, #248]	@ 0xf8
 801c4d4:	f240 3501 	movw	r5, #769	@ 0x301
 801c4d8:	f8a0 50f6 	strh.w	r5, [r0, #246]	@ 0xf6
 801c4dc:	f44f 5548 	mov.w	r5, #12800	@ 0x3200
 801c4e0:	f8a0 50fc 	strh.w	r5, [r0, #252]	@ 0xfc
 801c4e4:	2501      	movs	r5, #1
 801c4e6:	f880 50fe 	strb.w	r5, [r0, #254]	@ 0xfe
 801c4ea:	f44f 7580 	mov.w	r5, #256	@ 0x100
 801c4ee:	f8a0 5100 	strh.w	r5, [r0, #256]	@ 0x100
 801c4f2:	2c00      	cmp	r4, #0
 801c4f4:	f000 8263 	beq.w	801c9be <Argus_GetDefaultCfg+0xe52>
 801c4f8:	2502      	movs	r5, #2
 801c4fa:	f880 50ff 	strb.w	r5, [r0, #255]	@ 0xff
 801c4fe:	f880 5092 	strb.w	r5, [r0, #146]	@ 0x92
 801c502:	4d88      	ldr	r5, [pc, #544]	@ (801c724 <Argus_GetDefaultCfg+0xbb8>)
 801c504:	f8c0 5102 	str.w	r5, [r0, #258]	@ 0x102
 801c508:	4d83      	ldr	r5, [pc, #524]	@ (801c718 <Argus_GetDefaultCfg+0xbac>)
 801c50a:	f8c0 5106 	str.w	r5, [r0, #262]	@ 0x106
 801c50e:	4d83      	ldr	r5, [pc, #524]	@ (801c71c <Argus_GetDefaultCfg+0xbb0>)
 801c510:	6085      	str	r5, [r0, #8]
 801c512:	f240 2566 	movw	r5, #614	@ 0x266
 801c516:	8205      	strh	r5, [r0, #16]
 801c518:	2c00      	cmp	r4, #0
 801c51a:	f000 8367 	beq.w	801cbec <Argus_GetDefaultCfg+0x1080>
 801c51e:	4d80      	ldr	r5, [pc, #512]	@ (801c720 <Argus_GetDefaultCfg+0xbb4>)
 801c520:	f8c0 5022 	str.w	r5, [r0, #34]	@ 0x22
 801c524:	2550      	movs	r5, #80	@ 0x50
 801c526:	8245      	strh	r5, [r0, #18]
 801c528:	2501      	movs	r5, #1
 801c52a:	f880 5021 	strb.w	r5, [r0, #33]	@ 0x21
 801c52e:	2a01      	cmp	r2, #1
 801c530:	f04f 0508 	mov.w	r5, #8
 801c534:	7385      	strb	r5, [r0, #14]
 801c536:	d020      	beq.n	801c57a <Argus_GetDefaultCfg+0xa0e>
 801c538:	7305      	strb	r5, [r0, #12]
 801c53a:	2500      	movs	r5, #0
 801c53c:	73c5      	strb	r5, [r0, #15]
 801c53e:	f7ff bbb2 	b.w	801bca6 <Argus_GetDefaultCfg+0x13a>
 801c542:	4d75      	ldr	r5, [pc, #468]	@ (801c718 <Argus_GetDefaultCfg+0xbac>)
 801c544:	f8c0 5106 	str.w	r5, [r0, #262]	@ 0x106
 801c548:	2a01      	cmp	r2, #1
 801c54a:	f04f 0502 	mov.w	r5, #2
 801c54e:	7445      	strb	r5, [r0, #17]
 801c550:	f040 8246 	bne.w	801c9e0 <Argus_GetDefaultCfg+0xe74>
 801c554:	4d71      	ldr	r5, [pc, #452]	@ (801c71c <Argus_GetDefaultCfg+0xbb0>)
 801c556:	6085      	str	r5, [r0, #8]
 801c558:	2566      	movs	r5, #102	@ 0x66
 801c55a:	f880 2092 	strb.w	r2, [r0, #146]	@ 0x92
 801c55e:	7405      	strb	r5, [r0, #16]
 801c560:	2c00      	cmp	r4, #0
 801c562:	f000 80ca 	beq.w	801c6fa <Argus_GetDefaultCfg+0xb8e>
 801c566:	4d6e      	ldr	r5, [pc, #440]	@ (801c720 <Argus_GetDefaultCfg+0xbb4>)
 801c568:	f8c0 5022 	str.w	r5, [r0, #34]	@ 0x22
 801c56c:	2550      	movs	r5, #80	@ 0x50
 801c56e:	8245      	strh	r5, [r0, #18]
 801c570:	2508      	movs	r5, #8
 801c572:	f880 2021 	strb.w	r2, [r0, #33]	@ 0x21
 801c576:	7385      	strb	r5, [r0, #14]
 801c578:	2508      	movs	r5, #8
 801c57a:	7305      	strb	r5, [r0, #12]
 801c57c:	2500      	movs	r5, #0
 801c57e:	f8df 81b8 	ldr.w	r8, [pc, #440]	@ 801c738 <Argus_GetDefaultCfg+0xbcc>
 801c582:	73c5      	strb	r5, [r0, #15]
 801c584:	4d68      	ldr	r5, [pc, #416]	@ (801c728 <Argus_GetDefaultCfg+0xbbc>)
 801c586:	e9c0 8506 	strd	r8, r5, [r0, #24]
 801c58a:	2500      	movs	r5, #0
 801c58c:	7345      	strb	r5, [r0, #13]
 801c58e:	f649 4540 	movw	r5, #40000	@ 0x9c40
 801c592:	6145      	str	r5, [r0, #20]
 801c594:	2540      	movs	r5, #64	@ 0x40
 801c596:	f880 5020 	strb.w	r5, [r0, #32]
 801c59a:	f04f 0c02 	mov.w	ip, #2
 801c59e:	2c00      	cmp	r4, #0
 801c5a0:	d038      	beq.n	801c614 <Argus_GetDefaultCfg+0xaa8>
 801c5a2:	f7ff bb8f 	b.w	801bcc4 <Argus_GetDefaultCfg+0x158>
 801c5a6:	260b      	movs	r6, #11
 801c5a8:	f8a0 6102 	strh.w	r6, [r0, #258]	@ 0x102
 801c5ac:	f44f 6680 	mov.w	r6, #1024	@ 0x400
 801c5b0:	f8a0 6104 	strh.w	r6, [r0, #260]	@ 0x104
 801c5b4:	2602      	movs	r6, #2
 801c5b6:	f880 60ff 	strb.w	r6, [r0, #255]	@ 0xff
 801c5ba:	2a00      	cmp	r2, #0
 801c5bc:	d1c1      	bne.n	801c542 <Argus_GetDefaultCfg+0x9d6>
 801c5be:	f880 5021 	strb.w	r5, [r0, #33]	@ 0x21
 801c5c2:	4d56      	ldr	r5, [pc, #344]	@ (801c71c <Argus_GetDefaultCfg+0xbb0>)
 801c5c4:	6085      	str	r5, [r0, #8]
 801c5c6:	4d56      	ldr	r5, [pc, #344]	@ (801c720 <Argus_GetDefaultCfg+0xbb4>)
 801c5c8:	f8c0 5022 	str.w	r5, [r0, #34]	@ 0x22
 801c5cc:	f04f 554c 	mov.w	r5, #855638016	@ 0x33000000
 801c5d0:	f8c0 5106 	str.w	r5, [r0, #262]	@ 0x106
 801c5d4:	f240 2566 	movw	r5, #614	@ 0x266
 801c5d8:	8205      	strh	r5, [r0, #16]
 801c5da:	2560      	movs	r5, #96	@ 0x60
 801c5dc:	8245      	strh	r5, [r0, #18]
 801c5de:	2508      	movs	r5, #8
 801c5e0:	f880 6092 	strb.w	r6, [r0, #146]	@ 0x92
 801c5e4:	7385      	strb	r5, [r0, #14]
 801c5e6:	2520      	movs	r5, #32
 801c5e8:	2a03      	cmp	r2, #3
 801c5ea:	7305      	strb	r5, [r0, #12]
 801c5ec:	f04f 0500 	mov.w	r5, #0
 801c5f0:	73c5      	strb	r5, [r0, #15]
 801c5f2:	f04f 0c02 	mov.w	ip, #2
 801c5f6:	bf0c      	ite	eq
 801c5f8:	2510      	moveq	r5, #16
 801c5fa:	2518      	movne	r5, #24
 801c5fc:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 801c738 <Argus_GetDefaultCfg+0xbcc>
 801c600:	7345      	strb	r5, [r0, #13]
 801c602:	4d49      	ldr	r5, [pc, #292]	@ (801c728 <Argus_GetDefaultCfg+0xbbc>)
 801c604:	e9c0 9506 	strd	r9, r5, [r0, #24]
 801c608:	f649 4540 	movw	r5, #40000	@ 0x9c40
 801c60c:	6145      	str	r5, [r0, #20]
 801c60e:	2540      	movs	r5, #64	@ 0x40
 801c610:	f880 5020 	strb.w	r5, [r0, #32]
 801c614:	4d45      	ldr	r5, [pc, #276]	@ (801c72c <Argus_GetDefaultCfg+0xbc0>)
 801c616:	f44f 06a6 	mov.w	r6, #5439488	@ 0x530000
 801c61a:	e9c0 6525 	strd	r6, r5, [r0, #148]	@ 0x94
 801c61e:	f44f 7616 	mov.w	r6, #600	@ 0x258
 801c622:	f8a0 609c 	strh.w	r6, [r0, #156]	@ 0x9c
 801c626:	f240 7601 	movw	r6, #1793	@ 0x701
 801c62a:	f8a0 60a0 	strh.w	r6, [r0, #160]	@ 0xa0
 801c62e:	2606      	movs	r6, #6
 801c630:	f7ff bb55 	b.w	801bcde <Argus_GetDefaultCfg+0x172>
 801c634:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
 801c638:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 801c63c:	f003 031f 	and.w	r3, r3, #31
 801c640:	2c00      	cmp	r4, #0
 801c642:	f47f acf5 	bne.w	801c030 <Argus_GetDefaultCfg+0x4c4>
 801c646:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801c64a:	e51e      	b.n	801c08a <Argus_GetDefaultCfg+0x51e>
 801c64c:	2a00      	cmp	r2, #0
 801c64e:	f040 82a6 	bne.w	801cb9e <Argus_GetDefaultCfg+0x1032>
 801c652:	2c00      	cmp	r4, #0
 801c654:	f890 806d 	ldrb.w	r8, [r0, #109]	@ 0x6d
 801c658:	bf14      	ite	ne
 801c65a:	f04f 0b20 	movne.w	fp, #32
 801c65e:	f04f 0b1c 	moveq.w	fp, #28
 801c662:	f008 080f 	and.w	r8, r8, #15
 801c666:	f880 b06c 	strb.w	fp, [r0, #108]	@ 0x6c
 801c66a:	fa4f f981 	sxtb.w	r9, r1
 801c66e:	4692      	mov	sl, r2
 801c670:	f048 0850 	orr.w	r8, r8, #80	@ 0x50
 801c674:	e42d      	b.n	801bed2 <Argus_GetDefaultCfg+0x366>
 801c676:	25a0      	movs	r5, #160	@ 0xa0
 801c678:	f8a0 5110 	strh.w	r5, [r0, #272]	@ 0x110
 801c67c:	2a03      	cmp	r2, #3
 801c67e:	f04f 0560 	mov.w	r5, #96	@ 0x60
 801c682:	f8a0 5112 	strh.w	r5, [r0, #274]	@ 0x112
 801c686:	f47f aa9b 	bne.w	801bbc0 <Argus_GetDefaultCfg+0x54>
 801c68a:	f04e 0e40 	orr.w	lr, lr, #64	@ 0x40
 801c68e:	f44f 45cd 	mov.w	r5, #26240	@ 0x6680
 801c692:	fa4f fe8e 	sxtb.w	lr, lr
 801c696:	f8a0 510e 	strh.w	r5, [r0, #270]	@ 0x10e
 801c69a:	f7ff ba97 	b.w	801bbcc <Argus_GetDefaultCfg+0x60>
 801c69e:	2560      	movs	r5, #96	@ 0x60
 801c6a0:	f8a0 5110 	strh.w	r5, [r0, #272]	@ 0x110
 801c6a4:	2540      	movs	r5, #64	@ 0x40
 801c6a6:	e6d5      	b.n	801c454 <Argus_GetDefaultCfg+0x8e8>
 801c6a8:	4d1d      	ldr	r5, [pc, #116]	@ (801c720 <Argus_GetDefaultCfg+0xbb4>)
 801c6aa:	f8c0 5022 	str.w	r5, [r0, #34]	@ 0x22
 801c6ae:	2560      	movs	r5, #96	@ 0x60
 801c6b0:	8245      	strh	r5, [r0, #18]
 801c6b2:	2501      	movs	r5, #1
 801c6b4:	f880 5021 	strb.w	r5, [r0, #33]	@ 0x21
 801c6b8:	2520      	movs	r5, #32
 801c6ba:	7305      	strb	r5, [r0, #12]
 801c6bc:	2508      	movs	r5, #8
 801c6be:	81c5      	strh	r5, [r0, #14]
 801c6c0:	2518      	movs	r5, #24
 801c6c2:	e79b      	b.n	801c5fc <Argus_GetDefaultCfg+0xa90>
 801c6c4:	2550      	movs	r5, #80	@ 0x50
 801c6c6:	f8a0 5116 	strh.w	r5, [r0, #278]	@ 0x116
 801c6ca:	f240 1501 	movw	r5, #257	@ 0x101
 801c6ce:	f8a0 50f4 	strh.w	r5, [r0, #244]	@ 0xf4
 801c6d2:	2501      	movs	r5, #1
 801c6d4:	f880 50f6 	strb.w	r5, [r0, #246]	@ 0xf6
 801c6d8:	2503      	movs	r5, #3
 801c6da:	f7ff baaf 	b.w	801bc3c <Argus_GetDefaultCfg+0xd0>
 801c6de:	253d      	movs	r5, #61	@ 0x3d
 801c6e0:	f880 510e 	strb.w	r5, [r0, #270]	@ 0x10e
 801c6e4:	2533      	movs	r5, #51	@ 0x33
 801c6e6:	e4b4      	b.n	801c052 <Argus_GetDefaultCfg+0x4e6>
 801c6e8:	f990 3085 	ldrsb.w	r3, [r0, #133]	@ 0x85
 801c6ec:	f04f 0801 	mov.w	r8, #1
 801c6f0:	f063 031f 	orn	r3, r3, #31
 801c6f4:	f880 8084 	strb.w	r8, [r0, #132]	@ 0x84
 801c6f8:	e4c7      	b.n	801c08a <Argus_GetDefaultCfg+0x51e>
 801c6fa:	4d09      	ldr	r5, [pc, #36]	@ (801c720 <Argus_GetDefaultCfg+0xbb4>)
 801c6fc:	f8c0 5022 	str.w	r5, [r0, #34]	@ 0x22
 801c700:	2560      	movs	r5, #96	@ 0x60
 801c702:	8245      	strh	r5, [r0, #18]
 801c704:	2508      	movs	r5, #8
 801c706:	f880 2021 	strb.w	r2, [r0, #33]	@ 0x21
 801c70a:	7385      	strb	r5, [r0, #14]
 801c70c:	e734      	b.n	801c578 <Argus_GetDefaultCfg+0xa0c>
 801c70e:	bf00      	nop
 801c710:	00503e80 	.word	0x00503e80
 801c714:	12c01680 	.word	0x12c01680
 801c718:	33030002 	.word	0x33030002
 801c71c:	016e3600 	.word	0x016e3600
 801c720:	003201f4 	.word	0x003201f4
 801c724:	0400000d 	.word	0x0400000d
 801c728:	13880064 	.word	0x13880064
 801c72c:	0002828f 	.word	0x0002828f
 801c730:	1f030101 	.word	0x1f030101
 801c734:	10e014a0 	.word	0x10e014a0
 801c738:	00800140 	.word	0x00800140
 801c73c:	4fd0      	ldr	r7, [pc, #832]	@ (801ca80 <Argus_GetDefaultCfg+0xf14>)
 801c73e:	f8c0 7110 	str.w	r7, [r0, #272]	@ 0x110
 801c742:	f507 4795 	add.w	r7, r7, #19072	@ 0x4a80
 801c746:	f8c0 7114 	str.w	r7, [r0, #276]	@ 0x114
 801c74a:	2702      	movs	r7, #2
 801c74c:	7447      	strb	r7, [r0, #17]
 801c74e:	2703      	movs	r7, #3
 801c750:	f880 e10c 	strb.w	lr, [r0, #268]	@ 0x10c
 801c754:	f880 7092 	strb.w	r7, [r0, #146]	@ 0x92
 801c758:	2750      	movs	r7, #80	@ 0x50
 801c75a:	8247      	strh	r7, [r0, #18]
 801c75c:	2708      	movs	r7, #8
 801c75e:	7387      	strb	r7, [r0, #14]
 801c760:	2c00      	cmp	r4, #0
 801c762:	f000 808d 	beq.w	801c880 <Argus_GetDefaultCfg+0xd14>
 801c766:	4fc7      	ldr	r7, [pc, #796]	@ (801ca84 <Argus_GetDefaultCfg+0xf18>)
 801c768:	f8c0 7098 	str.w	r7, [r0, #152]	@ 0x98
 801c76c:	4fc6      	ldr	r7, [pc, #792]	@ (801ca88 <Argus_GetDefaultCfg+0xf1c>)
 801c76e:	6187      	str	r7, [r0, #24]
 801c770:	4fc6      	ldr	r7, [pc, #792]	@ (801ca8c <Argus_GetDefaultCfg+0xf20>)
 801c772:	f8c0 70dc 	str.w	r7, [r0, #220]	@ 0xdc
 801c776:	2a03      	cmp	r2, #3
 801c778:	f44f 57c1 	mov.w	r7, #6176	@ 0x1820
 801c77c:	8187      	strh	r7, [r0, #12]
 801c77e:	f040 8173 	bne.w	801ca68 <Argus_GetDefaultCfg+0xefc>
 801c782:	2202      	movs	r2, #2
 801c784:	f880 20ac 	strb.w	r2, [r0, #172]	@ 0xac
 801c788:	e585      	b.n	801c296 <Argus_GetDefaultCfg+0x72a>
 801c78a:	f8df c330 	ldr.w	ip, [pc, #816]	@ 801cabc <Argus_GetDefaultCfg+0xf50>
 801c78e:	4ec0      	ldr	r6, [pc, #768]	@ (801ca90 <Argus_GetDefaultCfg+0xf24>)
 801c790:	f8c0 c0e8 	str.w	ip, [r0, #232]	@ 0xe8
 801c794:	f44f 7ca0 	mov.w	ip, #320	@ 0x140
 801c798:	f8c0 60e0 	str.w	r6, [r0, #224]	@ 0xe0
 801c79c:	f8c0 60f0 	str.w	r6, [r0, #240]	@ 0xf0
 801c7a0:	f8a0 c0ec 	strh.w	ip, [r0, #236]	@ 0xec
 801c7a4:	2601      	movs	r6, #1
 801c7a6:	f241 4c0d 	movw	ip, #5133	@ 0x140d
 801c7aa:	f8a0 c0e5 	strh.w	ip, [r0, #229]	@ 0xe5
 801c7ae:	f880 60e4 	strb.w	r6, [r0, #228]	@ 0xe4
 801c7b2:	f04f 0c02 	mov.w	ip, #2
 801c7b6:	f7ff baee 	b.w	801bd96 <Argus_GetDefaultCfg+0x22a>
 801c7ba:	2c00      	cmp	r4, #0
 801c7bc:	d04b      	beq.n	801c856 <Argus_GetDefaultCfg+0xcea>
 801c7be:	4ab5      	ldr	r2, [pc, #724]	@ (801ca94 <Argus_GetDefaultCfg+0xf28>)
 801c7c0:	f8df 82fc 	ldr.w	r8, [pc, #764]	@ 801cac0 <Argus_GetDefaultCfg+0xf54>
 801c7c4:	f880 e10c 	strb.w	lr, [r0, #268]	@ 0x10c
 801c7c8:	e9c0 8244 	strd	r8, r2, [r0, #272]	@ 0x110
 801c7cc:	2202      	movs	r2, #2
 801c7ce:	7442      	strb	r2, [r0, #17]
 801c7d0:	2203      	movs	r2, #3
 801c7d2:	f880 2092 	strb.w	r2, [r0, #146]	@ 0x92
 801c7d6:	2250      	movs	r2, #80	@ 0x50
 801c7d8:	8242      	strh	r2, [r0, #18]
 801c7da:	4aaa      	ldr	r2, [pc, #680]	@ (801ca84 <Argus_GetDefaultCfg+0xf18>)
 801c7dc:	f8c0 2098 	str.w	r2, [r0, #152]	@ 0x98
 801c7e0:	4aa9      	ldr	r2, [pc, #676]	@ (801ca88 <Argus_GetDefaultCfg+0xf1c>)
 801c7e2:	6182      	str	r2, [r0, #24]
 801c7e4:	4aa9      	ldr	r2, [pc, #676]	@ (801ca8c <Argus_GetDefaultCfg+0xf20>)
 801c7e6:	f8c0 20dc 	str.w	r2, [r0, #220]	@ 0xdc
 801c7ea:	4aab      	ldr	r2, [pc, #684]	@ (801ca98 <Argus_GetDefaultCfg+0xf2c>)
 801c7ec:	f8c0 20f8 	str.w	r2, [r0, #248]	@ 0xf8
 801c7f0:	f44f 52c1 	mov.w	r2, #6176	@ 0x1820
 801c7f4:	8182      	strh	r2, [r0, #12]
 801c7f6:	2208      	movs	r2, #8
 801c7f8:	7382      	strb	r2, [r0, #14]
 801c7fa:	2201      	movs	r2, #1
 801c7fc:	f880 20ac 	strb.w	r2, [r0, #172]	@ 0xac
 801c800:	f44f 5261 	mov.w	r2, #14400	@ 0x3840
 801c804:	f8a0 20fc 	strh.w	r2, [r0, #252]	@ 0xfc
 801c808:	2c00      	cmp	r4, #0
 801c80a:	d051      	beq.n	801c8b0 <Argus_GetDefaultCfg+0xd44>
 801c80c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c810:	f8a0 2031 	strh.w	r2, [r0, #49]	@ 0x31
 801c814:	f880 2033 	strb.w	r2, [r0, #51]	@ 0x33
 801c818:	f8a0 2041 	strh.w	r2, [r0, #65]	@ 0x41
 801c81c:	f880 2043 	strb.w	r2, [r0, #67]	@ 0x43
 801c820:	22f0      	movs	r2, #240	@ 0xf0
 801c822:	270f      	movs	r7, #15
 801c824:	f880 203a 	strb.w	r2, [r0, #58]	@ 0x3a
 801c828:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
 801c82c:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
 801c830:	4696      	mov	lr, r2
 801c832:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 801c836:	6342      	str	r2, [r0, #52]	@ 0x34
 801c838:	4690      	mov	r8, r2
 801c83a:	f880 7044 	strb.w	r7, [r0, #68]	@ 0x44
 801c83e:	463a      	mov	r2, r7
 801c840:	4f96      	ldr	r7, [pc, #600]	@ (801ca9c <Argus_GetDefaultCfg+0xf30>)
 801c842:	f8c0 7102 	str.w	r7, [r0, #258]	@ 0x102
 801c846:	f242 0764 	movw	r7, #8292	@ 0x2064
 801c84a:	f8a0 702d 	strh.w	r7, [r0, #45]	@ 0x2d
 801c84e:	f24f 07f0 	movw	r7, #61680	@ 0xf0f0
 801c852:	8707      	strh	r7, [r0, #56]	@ 0x38
 801c854:	e04e      	b.n	801c8f4 <Argus_GetDefaultCfg+0xd88>
 801c856:	4f92      	ldr	r7, [pc, #584]	@ (801caa0 <Argus_GetDefaultCfg+0xf34>)
 801c858:	f8c0 7110 	str.w	r7, [r0, #272]	@ 0x110
 801c85c:	f507 4795 	add.w	r7, r7, #19072	@ 0x4a80
 801c860:	f8c0 7114 	str.w	r7, [r0, #276]	@ 0x114
 801c864:	2702      	movs	r7, #2
 801c866:	7447      	strb	r7, [r0, #17]
 801c868:	2703      	movs	r7, #3
 801c86a:	f880 e10c 	strb.w	lr, [r0, #268]	@ 0x10c
 801c86e:	f880 7092 	strb.w	r7, [r0, #146]	@ 0x92
 801c872:	2760      	movs	r7, #96	@ 0x60
 801c874:	2a03      	cmp	r2, #3
 801c876:	8247      	strh	r7, [r0, #18]
 801c878:	f000 8143 	beq.w	801cb02 <Argus_GetDefaultCfg+0xf96>
 801c87c:	2708      	movs	r7, #8
 801c87e:	7387      	strb	r7, [r0, #14]
 801c880:	4f80      	ldr	r7, [pc, #512]	@ (801ca84 <Argus_GetDefaultCfg+0xf18>)
 801c882:	f8c0 7098 	str.w	r7, [r0, #152]	@ 0x98
 801c886:	4f80      	ldr	r7, [pc, #512]	@ (801ca88 <Argus_GetDefaultCfg+0xf1c>)
 801c888:	6187      	str	r7, [r0, #24]
 801c88a:	4f86      	ldr	r7, [pc, #536]	@ (801caa4 <Argus_GetDefaultCfg+0xf38>)
 801c88c:	f8c0 70dc 	str.w	r7, [r0, #220]	@ 0xdc
 801c890:	2a03      	cmp	r2, #3
 801c892:	f644 0750 	movw	r7, #18512	@ 0x4850
 801c896:	8187      	strh	r7, [r0, #12]
 801c898:	f000 8162 	beq.w	801cb60 <Argus_GetDefaultCfg+0xff4>
 801c89c:	4a7e      	ldr	r2, [pc, #504]	@ (801ca98 <Argus_GetDefaultCfg+0xf2c>)
 801c89e:	f8c0 20f8 	str.w	r2, [r0, #248]	@ 0xf8
 801c8a2:	2201      	movs	r2, #1
 801c8a4:	f880 20ac 	strb.w	r2, [r0, #172]	@ 0xac
 801c8a8:	f44f 5261 	mov.w	r2, #14400	@ 0x3840
 801c8ac:	f8a0 20fc 	strh.w	r2, [r0, #252]	@ 0xfc
 801c8b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c8b4:	f8a0 2031 	strh.w	r2, [r0, #49]	@ 0x31
 801c8b8:	f880 2033 	strb.w	r2, [r0, #51]	@ 0x33
 801c8bc:	8702      	strh	r2, [r0, #56]	@ 0x38
 801c8be:	f8a0 2041 	strh.w	r2, [r0, #65]	@ 0x41
 801c8c2:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 801c8c6:	f04f 32ff 	mov.w	r2, #4294967295
 801c8ca:	6342      	str	r2, [r0, #52]	@ 0x34
 801c8cc:	f880 2043 	strb.w	r2, [r0, #67]	@ 0x43
 801c8d0:	4690      	mov	r8, r2
 801c8d2:	22f0      	movs	r2, #240	@ 0xf0
 801c8d4:	f880 203a 	strb.w	r2, [r0, #58]	@ 0x3a
 801c8d8:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
 801c8dc:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
 801c8e0:	4a71      	ldr	r2, [pc, #452]	@ (801caa8 <Argus_GetDefaultCfg+0xf3c>)
 801c8e2:	f8c0 2102 	str.w	r2, [r0, #258]	@ 0x102
 801c8e6:	f04f 0eff 	mov.w	lr, #255	@ 0xff
 801c8ea:	f242 0264 	movw	r2, #8292	@ 0x2064
 801c8ee:	f8a0 202d 	strh.w	r2, [r0, #45]	@ 0x2d
 801c8f2:	4672      	mov	r2, lr
 801c8f4:	2700      	movs	r7, #0
 801c8f6:	f362 0707 	bfi	r7, r2, #0, #8
 801c8fa:	f362 270f 	bfi	r7, r2, #8, #8
 801c8fe:	f362 4717 	bfi	r7, r2, #16, #8
 801c902:	f362 671f 	bfi	r7, r2, #24, #8
 801c906:	f880 2049 	strb.w	r2, [r0, #73]	@ 0x49
 801c90a:	f640 720f 	movw	r2, #3855	@ 0xf0f
 801c90e:	f8c0 7045 	str.w	r7, [r0, #69]	@ 0x45
 801c912:	f8a0 204a 	strh.w	r2, [r0, #74]	@ 0x4a
 801c916:	f04f 370f 	mov.w	r7, #252645135	@ 0xf0f0f0f
 801c91a:	f06f 02f0 	mvn.w	r2, #240	@ 0xf0
 801c91e:	e9c0 7213 	strd	r7, r2, [r0, #76]	@ 0x4c
 801c922:	f24f 02f0 	movw	r2, #61680	@ 0xf0f0
 801c926:	f8a0 205a 	strh.w	r2, [r0, #90]	@ 0x5a
 801c92a:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 801c92e:	2c00      	cmp	r4, #0
 801c930:	65c2      	str	r2, [r0, #92]	@ 0x5c
 801c932:	f04f 02f0 	mov.w	r2, #240	@ 0xf0
 801c936:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
 801c93a:	bf14      	ite	ne
 801c93c:	2205      	movne	r2, #5
 801c93e:	2203      	moveq	r2, #3
 801c940:	f880 2062 	strb.w	r2, [r0, #98]	@ 0x62
 801c944:	2284      	movs	r2, #132	@ 0x84
 801c946:	f00c 0c0f 	and.w	ip, ip, #15
 801c94a:	f880 2063 	strb.w	r2, [r0, #99]	@ 0x63
 801c94e:	22fa      	movs	r2, #250	@ 0xfa
 801c950:	f06c 0c5f 	orn	ip, ip, #95	@ 0x5f
 801c954:	f880 206b 	strb.w	r2, [r0, #107]	@ 0x6b
 801c958:	22be      	movs	r2, #190	@ 0xbe
 801c95a:	f880 206c 	strb.w	r2, [r0, #108]	@ 0x6c
 801c95e:	f8c0 8055 	str.w	r8, [r0, #85]	@ 0x55
 801c962:	f880 c06d 	strb.w	ip, [r0, #109]	@ 0x6d
 801c966:	f880 e054 	strb.w	lr, [r0, #84]	@ 0x54
 801c96a:	f880 e059 	strb.w	lr, [r0, #89]	@ 0x59
 801c96e:	220f      	movs	r2, #15
 801c970:	f063 0319 	orn	r3, r3, #25
 801c974:	f880 3085 	strb.w	r3, [r0, #133]	@ 0x85
 801c978:	2301      	movs	r3, #1
 801c97a:	f880 2070 	strb.w	r2, [r0, #112]	@ 0x70
 801c97e:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
 801c982:	f7ff bba1 	b.w	801c0c8 <Argus_GetDefaultCfg+0x55c>
 801c986:	f8df c108 	ldr.w	ip, [pc, #264]	@ 801ca90 <Argus_GetDefaultCfg+0xf24>
 801c98a:	f8c0 c0e0 	str.w	ip, [r0, #224]	@ 0xe0
 801c98e:	2601      	movs	r6, #1
 801c990:	f8c0 c0f0 	str.w	ip, [r0, #240]	@ 0xf0
 801c994:	f8df c124 	ldr.w	ip, [pc, #292]	@ 801cabc <Argus_GetDefaultCfg+0xf50>
 801c998:	f880 60e4 	strb.w	r6, [r0, #228]	@ 0xe4
 801c99c:	f8c0 c0e8 	str.w	ip, [r0, #232]	@ 0xe8
 801c9a0:	e572      	b.n	801c488 <Argus_GetDefaultCfg+0x91c>
 801c9a2:	f44f 557a 	mov.w	r5, #16000	@ 0x3e80
 801c9a6:	f04e 0e20 	orr.w	lr, lr, #32
 801c9aa:	f8a0 5114 	strh.w	r5, [r0, #276]	@ 0x114
 801c9ae:	f880 e10c 	strb.w	lr, [r0, #268]	@ 0x10c
 801c9b2:	2550      	movs	r5, #80	@ 0x50
 801c9b4:	2c00      	cmp	r4, #0
 801c9b6:	f47f a934 	bne.w	801bc22 <Argus_GetDefaultCfg+0xb6>
 801c9ba:	f7ff b931 	b.w	801bc20 <Argus_GetDefaultCfg+0xb4>
 801c9be:	2502      	movs	r5, #2
 801c9c0:	f880 50ff 	strb.w	r5, [r0, #255]	@ 0xff
 801c9c4:	7445      	strb	r5, [r0, #17]
 801c9c6:	f105 554c 	add.w	r5, r5, #855638016	@ 0x33000000
 801c9ca:	f505 3540 	add.w	r5, r5, #196608	@ 0x30000
 801c9ce:	f8c0 5106 	str.w	r5, [r0, #262]	@ 0x106
 801c9d2:	250b      	movs	r5, #11
 801c9d4:	f8a0 5102 	strh.w	r5, [r0, #258]	@ 0x102
 801c9d8:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 801c9dc:	f8a0 5104 	strh.w	r5, [r0, #260]	@ 0x104
 801c9e0:	4d32      	ldr	r5, [pc, #200]	@ (801caac <Argus_GetDefaultCfg+0xf40>)
 801c9e2:	6085      	str	r5, [r0, #8]
 801c9e4:	2666      	movs	r6, #102	@ 0x66
 801c9e6:	2502      	movs	r5, #2
 801c9e8:	2a05      	cmp	r2, #5
 801c9ea:	f880 5092 	strb.w	r5, [r0, #146]	@ 0x92
 801c9ee:	7406      	strb	r6, [r0, #16]
 801c9f0:	f47f ad92 	bne.w	801c518 <Argus_GetDefaultCfg+0x9ac>
 801c9f4:	46ac      	mov	ip, r5
 801c9f6:	2c00      	cmp	r4, #0
 801c9f8:	f47f ad15 	bne.w	801c426 <Argus_GetDefaultCfg+0x8ba>
 801c9fc:	e654      	b.n	801c6a8 <Argus_GetDefaultCfg+0xb3c>
 801c9fe:	2c00      	cmp	r4, #0
 801ca00:	d164      	bne.n	801cacc <Argus_GetDefaultCfg+0xf60>
 801ca02:	f880 2092 	strb.w	r2, [r0, #146]	@ 0x92
 801ca06:	010a      	lsls	r2, r1, #4
 801ca08:	f002 0210 	and.w	r2, r2, #16
 801ca0c:	ea42 0e0e 	orr.w	lr, r2, lr
 801ca10:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 801cac4 <Argus_GetDefaultCfg+0xf58>
 801ca14:	7342      	strb	r2, [r0, #13]
 801ca16:	4a26      	ldr	r2, [pc, #152]	@ (801cab0 <Argus_GetDefaultCfg+0xf44>)
 801ca18:	f880 e10c 	strb.w	lr, [r0, #268]	@ 0x10c
 801ca1c:	e9c0 8244 	strd	r8, r2, [r0, #272]	@ 0x110
 801ca20:	2201      	movs	r2, #1
 801ca22:	7442      	strb	r2, [r0, #17]
 801ca24:	2280      	movs	r2, #128	@ 0x80
 801ca26:	8242      	strh	r2, [r0, #18]
 801ca28:	2210      	movs	r2, #16
 801ca2a:	7382      	strb	r2, [r0, #14]
 801ca2c:	2220      	movs	r2, #32
 801ca2e:	7302      	strb	r2, [r0, #12]
 801ca30:	4a20      	ldr	r2, [pc, #128]	@ (801cab4 <Argus_GetDefaultCfg+0xf48>)
 801ca32:	f8c0 2098 	str.w	r2, [r0, #152]	@ 0x98
 801ca36:	4a14      	ldr	r2, [pc, #80]	@ (801ca88 <Argus_GetDefaultCfg+0xf1c>)
 801ca38:	6182      	str	r2, [r0, #24]
 801ca3a:	2730      	movs	r7, #48	@ 0x30
 801ca3c:	2260      	movs	r2, #96	@ 0x60
 801ca3e:	e420      	b.n	801c282 <Argus_GetDefaultCfg+0x716>
 801ca40:	4f1d      	ldr	r7, [pc, #116]	@ (801cab8 <Argus_GetDefaultCfg+0xf4c>)
 801ca42:	f880 e10c 	strb.w	lr, [r0, #268]	@ 0x10c
 801ca46:	f8df e080 	ldr.w	lr, [pc, #128]	@ 801cac8 <Argus_GetDefaultCfg+0xf5c>
 801ca4a:	e9c0 e744 	strd	lr, r7, [r0, #272]	@ 0x110
 801ca4e:	2702      	movs	r7, #2
 801ca50:	7447      	strb	r7, [r0, #17]
 801ca52:	2a04      	cmp	r2, #4
 801ca54:	f04f 0703 	mov.w	r7, #3
 801ca58:	f880 7092 	strb.w	r7, [r0, #146]	@ 0x92
 801ca5c:	f000 80bd 	beq.w	801cbda <Argus_GetDefaultCfg+0x106e>
 801ca60:	2a01      	cmp	r2, #1
 801ca62:	f47f af06 	bne.w	801c872 <Argus_GetDefaultCfg+0xd06>
 801ca66:	e677      	b.n	801c758 <Argus_GetDefaultCfg+0xbec>
 801ca68:	4a0b      	ldr	r2, [pc, #44]	@ (801ca98 <Argus_GetDefaultCfg+0xf2c>)
 801ca6a:	f8c0 20f8 	str.w	r2, [r0, #248]	@ 0xf8
 801ca6e:	2201      	movs	r2, #1
 801ca70:	f880 20ac 	strb.w	r2, [r0, #172]	@ 0xac
 801ca74:	f44f 5261 	mov.w	r2, #14400	@ 0x3840
 801ca78:	f8a0 20fc 	strh.w	r2, [r0, #252]	@ 0xfc
 801ca7c:	e6c6      	b.n	801c80c <Argus_GetDefaultCfg+0xca0>
 801ca7e:	bf00      	nop
 801ca80:	00500080 	.word	0x00500080
 801ca84:	0002828f 	.word	0x0002828f
 801ca88:	00c001e0 	.word	0x00c001e0
 801ca8c:	00200040 	.word	0x00200040
 801ca90:	f000ffff 	.word	0xf000ffff
 801ca94:	00504b00 	.word	0x00504b00
 801ca98:	12c01680 	.word	0x12c01680
 801ca9c:	04000010 	.word	0x04000010
 801caa0:	00600080 	.word	0x00600080
 801caa4:	00300060 	.word	0x00300060
 801caa8:	0800000b 	.word	0x0800000b
 801caac:	016e3600 	.word	0x016e3600
 801cab0:	00804b00 	.word	0x00804b00
 801cab4:	0003828f 	.word	0x0003828f
 801cab8:	00604b00 	.word	0x00604b00
 801cabc:	10e014a0 	.word	0x10e014a0
 801cac0:	00500070 	.word	0x00500070
 801cac4:	008000c0 	.word	0x008000c0
 801cac8:	006000a0 	.word	0x006000a0
 801cacc:	f880 2092 	strb.w	r2, [r0, #146]	@ 0x92
 801cad0:	010a      	lsls	r2, r1, #4
 801cad2:	f002 0210 	and.w	r2, r2, #16
 801cad6:	ea42 0e0e 	orr.w	lr, r2, lr
 801cada:	7342      	strb	r2, [r0, #13]
 801cadc:	4a4b      	ldr	r2, [pc, #300]	@ (801cc0c <Argus_GetDefaultCfg+0x10a0>)
 801cade:	f8c0 2110 	str.w	r2, [r0, #272]	@ 0x110
 801cae2:	f502 4295 	add.w	r2, r2, #19072	@ 0x4a80
 801cae6:	f8c0 2114 	str.w	r2, [r0, #276]	@ 0x114
 801caea:	2202      	movs	r2, #2
 801caec:	7442      	strb	r2, [r0, #17]
 801caee:	2250      	movs	r2, #80	@ 0x50
 801caf0:	8242      	strh	r2, [r0, #18]
 801caf2:	2208      	movs	r2, #8
 801caf4:	7382      	strb	r2, [r0, #14]
 801caf6:	2220      	movs	r2, #32
 801caf8:	f880 e10c 	strb.w	lr, [r0, #268]	@ 0x10c
 801cafc:	7302      	strb	r2, [r0, #12]
 801cafe:	f7ff bbb9 	b.w	801c274 <Argus_GetDefaultCfg+0x708>
 801cb02:	010a      	lsls	r2, r1, #4
 801cb04:	f002 0210 	and.w	r2, r2, #16
 801cb08:	7342      	strb	r2, [r0, #13]
 801cb0a:	2210      	movs	r2, #16
 801cb0c:	7382      	strb	r2, [r0, #14]
 801cb0e:	2220      	movs	r2, #32
 801cb10:	7302      	strb	r2, [r0, #12]
 801cb12:	e78d      	b.n	801ca30 <Argus_GetDefaultCfg+0xec4>
 801cb14:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 801cb18:	f8a0 2043 	strh.w	r2, [r0, #67]	@ 0x43
 801cb1c:	f04f 22ff 	mov.w	r2, #4278255360	@ 0xff00ff00
 801cb20:	f8c0 2045 	str.w	r2, [r0, #69]	@ 0x45
 801cb24:	f04f 12ff 	mov.w	r2, #16711935	@ 0xff00ff
 801cb28:	64c2      	str	r2, [r0, #76]	@ 0x4c
 801cb2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801cb2e:	f8a0 2050 	strh.w	r2, [r0, #80]	@ 0x50
 801cb32:	f8a0 804a 	strh.w	r8, [r0, #74]	@ 0x4a
 801cb36:	f880 7052 	strb.w	r7, [r0, #82]	@ 0x52
 801cb3a:	f880 4049 	strb.w	r4, [r0, #73]	@ 0x49
 801cb3e:	f880 e053 	strb.w	lr, [r0, #83]	@ 0x53
 801cb42:	f880 4054 	strb.w	r4, [r0, #84]	@ 0x54
 801cb46:	f880 e055 	strb.w	lr, [r0, #85]	@ 0x55
 801cb4a:	f880 4056 	strb.w	r4, [r0, #86]	@ 0x56
 801cb4e:	f880 e057 	strb.w	lr, [r0, #87]	@ 0x57
 801cb52:	f880 4058 	strb.w	r4, [r0, #88]	@ 0x58
 801cb56:	f880 e059 	strb.w	lr, [r0, #89]	@ 0x59
 801cb5a:	4622      	mov	r2, r4
 801cb5c:	f7ff bbf5 	b.w	801c34a <Argus_GetDefaultCfg+0x7de>
 801cb60:	2202      	movs	r2, #2
 801cb62:	f880 20ac 	strb.w	r2, [r0, #172]	@ 0xac
 801cb66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801cb6a:	f8a0 2031 	strh.w	r2, [r0, #49]	@ 0x31
 801cb6e:	f880 2033 	strb.w	r2, [r0, #51]	@ 0x33
 801cb72:	4a27      	ldr	r2, [pc, #156]	@ (801cc10 <Argus_GetDefaultCfg+0x10a4>)
 801cb74:	f8c0 20f8 	str.w	r2, [r0, #248]	@ 0xf8
 801cb78:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 801cb7c:	f8a0 20fc 	strh.w	r2, [r0, #252]	@ 0xfc
 801cb80:	220b      	movs	r2, #11
 801cb82:	f8a0 2102 	strh.w	r2, [r0, #258]	@ 0x102
 801cb86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801cb8a:	f8a0 2104 	strh.w	r2, [r0, #260]	@ 0x104
 801cb8e:	f244 02c8 	movw	r2, #16584	@ 0x40c8
 801cb92:	f8a0 202d 	strh.w	r2, [r0, #45]	@ 0x2d
 801cb96:	f04f 0eff 	mov.w	lr, #255	@ 0xff
 801cb9a:	f7ff bb96 	b.w	801c2ca <Argus_GetDefaultCfg+0x75e>
 801cb9e:	2a01      	cmp	r2, #1
 801cba0:	fa4f f981 	sxtb.w	r9, r1
 801cba4:	f63f ab2e 	bhi.w	801c204 <Argus_GetDefaultCfg+0x698>
 801cba8:	f890 806d 	ldrb.w	r8, [r0, #109]	@ 0x6d
 801cbac:	f04f 0b3e 	mov.w	fp, #62	@ 0x3e
 801cbb0:	46e2      	mov	sl, ip
 801cbb2:	f008 080f 	and.w	r8, r8, #15
 801cbb6:	f880 b06c 	strb.w	fp, [r0, #108]	@ 0x6c
 801cbba:	f43f a98a 	beq.w	801bed2 <Argus_GetDefaultCfg+0x366>
 801cbbe:	2a00      	cmp	r2, #0
 801cbc0:	f43f ad56 	beq.w	801c670 <Argus_GetDefaultCfg+0xb04>
 801cbc4:	f048 0840 	orr.w	r8, r8, #64	@ 0x40
 801cbc8:	f7ff b983 	b.w	801bed2 <Argus_GetDefaultCfg+0x366>
 801cbcc:	2550      	movs	r5, #80	@ 0x50
 801cbce:	f8a0 5116 	strh.w	r5, [r0, #278]	@ 0x116
 801cbd2:	e472      	b.n	801c4ba <Argus_GetDefaultCfg+0x94e>
 801cbd4:	46b4      	mov	ip, r6
 801cbd6:	f7ff b8de 	b.w	801bd96 <Argus_GetDefaultCfg+0x22a>
 801cbda:	2750      	movs	r7, #80	@ 0x50
 801cbdc:	8247      	strh	r7, [r0, #18]
 801cbde:	e64d      	b.n	801c87c <Argus_GetDefaultCfg+0xd10>
 801cbe0:	2503      	movs	r5, #3
 801cbe2:	f880 50f6 	strb.w	r5, [r0, #246]	@ 0xf6
 801cbe6:	2510      	movs	r5, #16
 801cbe8:	f7ff b828 	b.w	801bc3c <Argus_GetDefaultCfg+0xd0>
 801cbec:	4d09      	ldr	r5, [pc, #36]	@ (801cc14 <Argus_GetDefaultCfg+0x10a8>)
 801cbee:	f8c0 5022 	str.w	r5, [r0, #34]	@ 0x22
 801cbf2:	2560      	movs	r5, #96	@ 0x60
 801cbf4:	8245      	strh	r5, [r0, #18]
 801cbf6:	2501      	movs	r5, #1
 801cbf8:	f880 5021 	strb.w	r5, [r0, #33]	@ 0x21
 801cbfc:	2a01      	cmp	r2, #1
 801cbfe:	f04f 0508 	mov.w	r5, #8
 801cc02:	7385      	strb	r5, [r0, #14]
 801cc04:	f47f acef 	bne.w	801c5e6 <Argus_GetDefaultCfg+0xa7a>
 801cc08:	e4b6      	b.n	801c578 <Argus_GetDefaultCfg+0xa0c>
 801cc0a:	bf00      	nop
 801cc0c:	00500080 	.word	0x00500080
 801cc10:	1c2021c0 	.word	0x1c2021c0
 801cc14:	003201f4 	.word	0x003201f4

0801cc18 <Argus_OnGetDefaultConfiguration>:
 801cc18:	4770      	bx	lr
 801cc1a:	bf00      	nop

0801cc1c <Argus_Cfg_GetDefaultConfiguration>:
 801cc1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc20:	b082      	sub	sp, #8
 801cc22:	2902      	cmp	r1, #2
 801cc24:	f89d 8020 	ldrb.w	r8, [sp, #32]
 801cc28:	460c      	mov	r4, r1
 801cc2a:	4607      	mov	r7, r0
 801cc2c:	4615      	mov	r5, r2
 801cc2e:	461e      	mov	r6, r3
 801cc30:	d92f      	bls.n	801cc92 <Argus_Cfg_GetDefaultConfiguration+0x76>
 801cc32:	1f4b      	subs	r3, r1, #5
 801cc34:	2b01      	cmp	r3, #1
 801cc36:	d82e      	bhi.n	801cc96 <Argus_Cfg_GetDefaultConfiguration+0x7a>
 801cc38:	2d07      	cmp	r5, #7
 801cc3a:	d903      	bls.n	801cc44 <Argus_Cfg_GetDefaultConfiguration+0x28>
 801cc3c:	f1a5 0343 	sub.w	r3, r5, #67	@ 0x43
 801cc40:	2b04      	cmp	r3, #4
 801cc42:	d860      	bhi.n	801cd06 <Argus_Cfg_GetDefaultConfiguration+0xea>
 801cc44:	2e00      	cmp	r6, #0
 801cc46:	d053      	beq.n	801ccf0 <Argus_Cfg_GetDefaultConfiguration+0xd4>
 801cc48:	1e73      	subs	r3, r6, #1
 801cc4a:	2b04      	cmp	r3, #4
 801cc4c:	d828      	bhi.n	801cca0 <Argus_Cfg_GetDefaultConfiguration+0x84>
 801cc4e:	f1b8 0f00 	cmp.w	r8, #0
 801cc52:	d02a      	beq.n	801ccaa <Argus_Cfg_GetDefaultConfiguration+0x8e>
 801cc54:	f108 33ff 	add.w	r3, r8, #4294967295
 801cc58:	2b04      	cmp	r3, #4
 801cc5a:	d832      	bhi.n	801ccc2 <Argus_Cfg_GetDefaultConfiguration+0xa6>
 801cc5c:	f44f 7294 	mov.w	r2, #296	@ 0x128
 801cc60:	2100      	movs	r1, #0
 801cc62:	4638      	mov	r0, r7
 801cc64:	f006 fdbd 	bl	80237e2 <memset>
 801cc68:	4638      	mov	r0, r7
 801cc6a:	703c      	strb	r4, [r7, #0]
 801cc6c:	4633      	mov	r3, r6
 801cc6e:	f005 023f 	and.w	r2, r5, #63	@ 0x3f
 801cc72:	4621      	mov	r1, r4
 801cc74:	f8cd 8000 	str.w	r8, [sp]
 801cc78:	f7fe ff78 	bl	801bb6c <Argus_GetDefaultCfg>
 801cc7c:	f8cd 8000 	str.w	r8, [sp]
 801cc80:	4633      	mov	r3, r6
 801cc82:	462a      	mov	r2, r5
 801cc84:	4621      	mov	r1, r4
 801cc86:	f7ff ffc7 	bl	801cc18 <Argus_OnGetDefaultConfiguration>
 801cc8a:	2000      	movs	r0, #0
 801cc8c:	b002      	add	sp, #8
 801cc8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc92:	2900      	cmp	r1, #0
 801cc94:	d1d0      	bne.n	801cc38 <Argus_Cfg_GetDefaultConfiguration+0x1c>
 801cc96:	f06f 0068 	mvn.w	r0, #104	@ 0x68
 801cc9a:	b002      	add	sp, #8
 801cc9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cca0:	f06f 00c5 	mvn.w	r0, #197	@ 0xc5
 801cca4:	b002      	add	sp, #8
 801cca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ccaa:	2d43      	cmp	r5, #67	@ 0x43
 801ccac:	d028      	beq.n	801cd00 <Argus_Cfg_GetDefaultConfiguration+0xe4>
 801ccae:	d814      	bhi.n	801ccda <Argus_Cfg_GetDefaultConfiguration+0xbe>
 801ccb0:	2d02      	cmp	r5, #2
 801ccb2:	d90b      	bls.n	801cccc <Argus_Cfg_GetDefaultConfiguration+0xb0>
 801ccb4:	2d04      	cmp	r5, #4
 801ccb6:	bf0c      	ite	eq
 801ccb8:	f04f 0803 	moveq.w	r8, #3
 801ccbc:	f04f 0802 	movne.w	r8, #2
 801ccc0:	e7cc      	b.n	801cc5c <Argus_Cfg_GetDefaultConfiguration+0x40>
 801ccc2:	f06f 00c4 	mvn.w	r0, #196	@ 0xc4
 801ccc6:	b002      	add	sp, #8
 801ccc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cccc:	2d00      	cmp	r5, #0
 801ccce:	bf14      	ite	ne
 801ccd0:	f04f 0801 	movne.w	r8, #1
 801ccd4:	f04f 0802 	moveq.w	r8, #2
 801ccd8:	e7c0      	b.n	801cc5c <Argus_Cfg_GetDefaultConfiguration+0x40>
 801ccda:	2d44      	cmp	r5, #68	@ 0x44
 801ccdc:	d00d      	beq.n	801ccfa <Argus_Cfg_GetDefaultConfiguration+0xde>
 801ccde:	f1a5 0345 	sub.w	r3, r5, #69	@ 0x45
 801cce2:	2b02      	cmp	r3, #2
 801cce4:	bf94      	ite	ls
 801cce6:	f04f 0804 	movls.w	r8, #4
 801ccea:	f04f 0802 	movhi.w	r8, #2
 801ccee:	e7b5      	b.n	801cc5c <Argus_Cfg_GetDefaultConfiguration+0x40>
 801ccf0:	2603      	movs	r6, #3
 801ccf2:	f1b8 0f00 	cmp.w	r8, #0
 801ccf6:	d1ad      	bne.n	801cc54 <Argus_Cfg_GetDefaultConfiguration+0x38>
 801ccf8:	e7d7      	b.n	801ccaa <Argus_Cfg_GetDefaultConfiguration+0x8e>
 801ccfa:	f04f 0805 	mov.w	r8, #5
 801ccfe:	e7ad      	b.n	801cc5c <Argus_Cfg_GetDefaultConfiguration+0x40>
 801cd00:	f04f 0804 	mov.w	r8, #4
 801cd04:	e7aa      	b.n	801cc5c <Argus_Cfg_GetDefaultConfiguration+0x40>
 801cd06:	f06f 00c6 	mvn.w	r0, #198	@ 0xc6
 801cd0a:	e7c6      	b.n	801cc9a <Argus_Cfg_GetDefaultConfiguration+0x7e>

0801cd0c <Argus_Cfg_GetCurrentDefaultConfiguration>:
 801cd0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cd10:	4605      	mov	r5, r0
 801cd12:	b083      	sub	sp, #12
 801cd14:	f8d0 0128 	ldr.w	r0, [r0, #296]	@ 0x128
 801cd18:	4688      	mov	r8, r1
 801cd1a:	4616      	mov	r6, r2
 801cd1c:	f7fd fc30 	bl	801a580 <Argus_Dev_GetChipVersion>
 801cd20:	2800      	cmp	r0, #0
 801cd22:	d072      	beq.n	801ce0a <Argus_Cfg_GetCurrentDefaultConfiguration+0xfe>
 801cd24:	4607      	mov	r7, r0
 801cd26:	f8d5 0128 	ldr.w	r0, [r5, #296]	@ 0x128
 801cd2a:	f7fd fc2b 	bl	801a584 <Argus_Dev_GetLaserType>
 801cd2e:	4604      	mov	r4, r0
 801cd30:	f8d5 0128 	ldr.w	r0, [r5, #296]	@ 0x128
 801cd34:	f7fd fc20 	bl	801a578 <Argus_Dev_GetModule>
 801cd38:	2e02      	cmp	r6, #2
 801cd3a:	4605      	mov	r5, r0
 801cd3c:	46a1      	mov	r9, r4
 801cd3e:	d912      	bls.n	801cd66 <Argus_Cfg_GetCurrentDefaultConfiguration+0x5a>
 801cd40:	1f73      	subs	r3, r6, #5
 801cd42:	2b01      	cmp	r3, #1
 801cd44:	d811      	bhi.n	801cd6a <Argus_Cfg_GetCurrentDefaultConfiguration+0x5e>
 801cd46:	2d07      	cmp	r5, #7
 801cd48:	d904      	bls.n	801cd54 <Argus_Cfg_GetCurrentDefaultConfiguration+0x48>
 801cd4a:	f1a5 0343 	sub.w	r3, r5, #67	@ 0x43
 801cd4e:	b2db      	uxtb	r3, r3
 801cd50:	2b04      	cmp	r3, #4
 801cd52:	d85d      	bhi.n	801ce10 <Argus_Cfg_GetCurrentDefaultConfiguration+0x104>
 801cd54:	1e7b      	subs	r3, r7, #1
 801cd56:	b2db      	uxtb	r3, r3
 801cd58:	2b04      	cmp	r3, #4
 801cd5a:	d90b      	bls.n	801cd74 <Argus_Cfg_GetCurrentDefaultConfiguration+0x68>
 801cd5c:	f06f 00c5 	mvn.w	r0, #197	@ 0xc5
 801cd60:	b003      	add	sp, #12
 801cd62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cd66:	2e00      	cmp	r6, #0
 801cd68:	d1ed      	bne.n	801cd46 <Argus_Cfg_GetCurrentDefaultConfiguration+0x3a>
 801cd6a:	f06f 0068 	mvn.w	r0, #104	@ 0x68
 801cd6e:	b003      	add	sp, #12
 801cd70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cd74:	b1fc      	cbz	r4, 801cdb6 <Argus_Cfg_GetCurrentDefaultConfiguration+0xaa>
 801cd76:	3c01      	subs	r4, #1
 801cd78:	b2e4      	uxtb	r4, r4
 801cd7a:	2c04      	cmp	r4, #4
 801cd7c:	d827      	bhi.n	801cdce <Argus_Cfg_GetCurrentDefaultConfiguration+0xc2>
 801cd7e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 801cd82:	2100      	movs	r1, #0
 801cd84:	4640      	mov	r0, r8
 801cd86:	f006 fd2c 	bl	80237e2 <memset>
 801cd8a:	4640      	mov	r0, r8
 801cd8c:	f888 6000 	strb.w	r6, [r8]
 801cd90:	463b      	mov	r3, r7
 801cd92:	f005 023f 	and.w	r2, r5, #63	@ 0x3f
 801cd96:	4631      	mov	r1, r6
 801cd98:	f8cd 9000 	str.w	r9, [sp]
 801cd9c:	f7fe fee6 	bl	801bb6c <Argus_GetDefaultCfg>
 801cda0:	f8cd 9000 	str.w	r9, [sp]
 801cda4:	463b      	mov	r3, r7
 801cda6:	462a      	mov	r2, r5
 801cda8:	4631      	mov	r1, r6
 801cdaa:	f7ff ff35 	bl	801cc18 <Argus_OnGetDefaultConfiguration>
 801cdae:	2000      	movs	r0, #0
 801cdb0:	b003      	add	sp, #12
 801cdb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cdb6:	2d43      	cmp	r5, #67	@ 0x43
 801cdb8:	d024      	beq.n	801ce04 <Argus_Cfg_GetCurrentDefaultConfiguration+0xf8>
 801cdba:	d814      	bhi.n	801cde6 <Argus_Cfg_GetCurrentDefaultConfiguration+0xda>
 801cdbc:	2d02      	cmp	r5, #2
 801cdbe:	d90b      	bls.n	801cdd8 <Argus_Cfg_GetCurrentDefaultConfiguration+0xcc>
 801cdc0:	2d04      	cmp	r5, #4
 801cdc2:	bf0c      	ite	eq
 801cdc4:	f04f 0903 	moveq.w	r9, #3
 801cdc8:	f04f 0902 	movne.w	r9, #2
 801cdcc:	e7d7      	b.n	801cd7e <Argus_Cfg_GetCurrentDefaultConfiguration+0x72>
 801cdce:	f06f 00c4 	mvn.w	r0, #196	@ 0xc4
 801cdd2:	b003      	add	sp, #12
 801cdd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cdd8:	2d00      	cmp	r5, #0
 801cdda:	bf14      	ite	ne
 801cddc:	f04f 0901 	movne.w	r9, #1
 801cde0:	f04f 0902 	moveq.w	r9, #2
 801cde4:	e7cb      	b.n	801cd7e <Argus_Cfg_GetCurrentDefaultConfiguration+0x72>
 801cde6:	2d44      	cmp	r5, #68	@ 0x44
 801cde8:	d009      	beq.n	801cdfe <Argus_Cfg_GetCurrentDefaultConfiguration+0xf2>
 801cdea:	f1a5 0345 	sub.w	r3, r5, #69	@ 0x45
 801cdee:	b2db      	uxtb	r3, r3
 801cdf0:	2b03      	cmp	r3, #3
 801cdf2:	bf34      	ite	cc
 801cdf4:	f04f 0904 	movcc.w	r9, #4
 801cdf8:	f04f 0902 	movcs.w	r9, #2
 801cdfc:	e7bf      	b.n	801cd7e <Argus_Cfg_GetCurrentDefaultConfiguration+0x72>
 801cdfe:	f04f 0905 	mov.w	r9, #5
 801ce02:	e7bc      	b.n	801cd7e <Argus_Cfg_GetCurrentDefaultConfiguration+0x72>
 801ce04:	f04f 0904 	mov.w	r9, #4
 801ce08:	e7b9      	b.n	801cd7e <Argus_Cfg_GetCurrentDefaultConfiguration+0x72>
 801ce0a:	f06f 0064 	mvn.w	r0, #100	@ 0x64
 801ce0e:	e7ae      	b.n	801cd6e <Argus_Cfg_GetCurrentDefaultConfiguration+0x62>
 801ce10:	f06f 00c6 	mvn.w	r0, #198	@ 0xc6
 801ce14:	e7ab      	b.n	801cd6e <Argus_Cfg_GetCurrentDefaultConfiguration+0x62>
 801ce16:	bf00      	nop

0801ce18 <UpdateAPDVoltage>:
 801ce18:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ce1a:	f9b0 2028 	ldrsh.w	r2, [r0, #40]	@ 0x28
 801ce1e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801ce22:	429a      	cmp	r2, r3
 801ce24:	b085      	sub	sp, #20
 801ce26:	4684      	mov	ip, r0
 801ce28:	f000 80a3 	beq.w	801cf72 <UpdateAPDVoltage+0x15a>
 801ce2c:	1110      	asrs	r0, r2, #4
 801ce2e:	f891 2267 	ldrb.w	r2, [r1, #615]	@ 0x267
 801ce32:	f891 e290 	ldrb.w	lr, [r1, #656]	@ 0x290
 801ce36:	f891 3291 	ldrb.w	r3, [r1, #657]	@ 0x291
 801ce3a:	fb12 f200 	smulbb	r2, r2, r0
 801ce3e:	2a00      	cmp	r2, #0
 801ce40:	f280 8090 	bge.w	801cf64 <UpdateAPDVoltage+0x14c>
 801ce44:	4252      	negs	r2, r2
 801ce46:	f3c2 2080 	ubfx	r0, r2, #10, #1
 801ce4a:	eb00 22d2 	add.w	r2, r0, r2, lsr #11
 801ce4e:	1a9b      	subs	r3, r3, r2
 801ce50:	b2db      	uxtb	r3, r3
 801ce52:	4573      	cmp	r3, lr
 801ce54:	f89c 202b 	ldrb.w	r2, [ip, #43]	@ 0x2b
 801ce58:	bf38      	it	cc
 801ce5a:	4673      	movcc	r3, lr
 801ce5c:	429a      	cmp	r2, r3
 801ce5e:	d07f      	beq.n	801cf60 <UpdateAPDVoltage+0x148>
 801ce60:	f8dc 2020 	ldr.w	r2, [ip, #32]
 801ce64:	f88c 302b 	strb.w	r3, [ip, #43]	@ 0x2b
 801ce68:	ebae 0003 	sub.w	r0, lr, r3
 801ce6c:	fb02 f400 	mul.w	r4, r2, r0
 801ce70:	2c00      	cmp	r4, #0
 801ce72:	f8b1 628e 	ldrh.w	r6, [r1, #654]	@ 0x28e
 801ce76:	f88d e004 	strb.w	lr, [sp, #4]
 801ce7a:	f88d 3007 	strb.w	r3, [sp, #7]
 801ce7e:	f2c0 8084 	blt.w	801cf8a <UpdateAPDVoltage+0x172>
 801ce82:	f3c4 32c0 	ubfx	r2, r4, #15, #1
 801ce86:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 801ce8a:	f8dc 4024 	ldr.w	r4, [ip, #36]	@ 0x24
 801ce8e:	441a      	add	r2, r3
 801ce90:	fb00 f404 	mul.w	r4, r0, r4
 801ce94:	b2d2      	uxtb	r2, r2
 801ce96:	2c00      	cmp	r4, #0
 801ce98:	f88d 2005 	strb.w	r2, [sp, #5]
 801ce9c:	db6e      	blt.n	801cf7c <UpdateAPDVoltage+0x164>
 801ce9e:	f3c4 30c0 	ubfx	r0, r4, #15, #1
 801cea2:	eb00 4014 	add.w	r0, r0, r4, lsr #16
 801cea6:	f8b1 428c 	ldrh.w	r4, [r1, #652]	@ 0x28c
 801ceaa:	f8b1 5262 	ldrh.w	r5, [r1, #610]	@ 0x262
 801ceae:	f891 7266 	ldrb.w	r7, [r1, #614]	@ 0x266
 801ceb2:	f8ad 4008 	strh.w	r4, [sp, #8]
 801ceb6:	1b2d      	subs	r5, r5, r4
 801ceb8:	fb95 f5f6 	sdiv	r5, r5, r6
 801cebc:	4475      	add	r5, lr
 801cebe:	42bd      	cmp	r5, r7
 801cec0:	bfa8      	it	ge
 801cec2:	463d      	movge	r5, r7
 801cec4:	4418      	add	r0, r3
 801cec6:	b2c0      	uxtb	r0, r0
 801cec8:	42ab      	cmp	r3, r5
 801ceca:	bfc8      	it	gt
 801cecc:	f88d 5007 	strbgt.w	r5, [sp, #7]
 801ced0:	42a8      	cmp	r0, r5
 801ced2:	f88d 0006 	strb.w	r0, [sp, #6]
 801ced6:	bfc8      	it	gt
 801ced8:	f88d 5006 	strbgt.w	r5, [sp, #6]
 801cedc:	42aa      	cmp	r2, r5
 801cede:	bfc8      	it	gt
 801cee0:	f88d 5005 	strbgt.w	r5, [sp, #5]
 801cee4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801cee8:	f891 0293 	ldrb.w	r0, [r1, #659]	@ 0x293
 801ceec:	eba3 030e 	sub.w	r3, r3, lr
 801cef0:	fb06 4303 	mla	r3, r6, r3, r4
 801cef4:	f8ad 300a 	strh.w	r3, [sp, #10]
 801cef8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801cefc:	eba3 030e 	sub.w	r3, r3, lr
 801cf00:	fb06 4303 	mla	r3, r6, r3, r4
 801cf04:	f8ad 300c 	strh.w	r3, [sp, #12]
 801cf08:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801cf0c:	fb06 f000 	mul.w	r0, r6, r0
 801cf10:	0280      	lsls	r0, r0, #10
 801cf12:	eba3 0e0e 	sub.w	lr, r3, lr
 801cf16:	fb06 440e 	mla	r4, r6, lr, r4
 801cf1a:	2800      	cmp	r0, #0
 801cf1c:	f8ad 400e 	strh.w	r4, [sp, #14]
 801cf20:	d03a      	beq.n	801cf98 <UpdateAPDVoltage+0x180>
 801cf22:	db54      	blt.n	801cfce <UpdateAPDVoltage+0x1b6>
 801cf24:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801cf28:	4602      	mov	r2, r0
 801cf2a:	da38      	bge.n	801cf9e <UpdateAPDVoltage+0x186>
 801cf2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801cf30:	0052      	lsls	r2, r2, #1
 801cf32:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 801cf36:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801cf3a:	d3f9      	bcc.n	801cf30 <UpdateAPDVoltage+0x118>
 801cf3c:	bb8b      	cbnz	r3, 801cfa2 <UpdateAPDVoltage+0x18a>
 801cf3e:	43c4      	mvns	r4, r0
 801cf40:	0fe4      	lsrs	r4, r4, #31
 801cf42:	4264      	negs	r4, r4
 801cf44:	b2a4      	uxth	r4, r4
 801cf46:	ab02      	add	r3, sp, #8
 801cf48:	cb03      	ldmia	r3!, {r0, r1}
 801cf4a:	f8dc 34c0 	ldr.w	r3, [ip, #1216]	@ 0x4c0
 801cf4e:	9a01      	ldr	r2, [sp, #4]
 801cf50:	f8ac 402c 	strh.w	r4, [ip, #44]	@ 0x2c
 801cf54:	f8c3 21a7 	str.w	r2, [r3, #423]	@ 0x1a7
 801cf58:	f8c3 01ac 	str.w	r0, [r3, #428]	@ 0x1ac
 801cf5c:	f8c3 11b0 	str.w	r1, [r3, #432]	@ 0x1b0
 801cf60:	b005      	add	sp, #20
 801cf62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cf64:	f3c2 2080 	ubfx	r0, r2, #10, #1
 801cf68:	eb00 22d2 	add.w	r2, r0, r2, lsr #11
 801cf6c:	4413      	add	r3, r2
 801cf6e:	b2db      	uxtb	r3, r3
 801cf70:	e76f      	b.n	801ce52 <UpdateAPDVoltage+0x3a>
 801cf72:	f891 e290 	ldrb.w	lr, [r1, #656]	@ 0x290
 801cf76:	f891 3291 	ldrb.w	r3, [r1, #657]	@ 0x291
 801cf7a:	e76a      	b.n	801ce52 <UpdateAPDVoltage+0x3a>
 801cf7c:	4264      	negs	r4, r4
 801cf7e:	f3c4 30c0 	ubfx	r0, r4, #15, #1
 801cf82:	eb00 4014 	add.w	r0, r0, r4, lsr #16
 801cf86:	4240      	negs	r0, r0
 801cf88:	e78d      	b.n	801cea6 <UpdateAPDVoltage+0x8e>
 801cf8a:	4264      	negs	r4, r4
 801cf8c:	f3c4 32c0 	ubfx	r2, r4, #15, #1
 801cf90:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 801cf94:	4252      	negs	r2, r2
 801cf96:	e778      	b.n	801ce8a <UpdateAPDVoltage+0x72>
 801cf98:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 801cf9c:	e7d3      	b.n	801cf46 <UpdateAPDVoltage+0x12e>
 801cf9e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801cfa2:	2400      	movs	r4, #0
 801cfa4:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 801cfa8:	e000      	b.n	801cfac <UpdateAPDVoltage+0x194>
 801cfaa:	b151      	cbz	r1, 801cfc2 <UpdateAPDVoltage+0x1aa>
 801cfac:	4291      	cmp	r1, r2
 801cfae:	bf24      	itt	cs
 801cfb0:	1a89      	subcs	r1, r1, r2
 801cfb2:	431c      	orrcs	r4, r3
 801cfb4:	085b      	lsrs	r3, r3, #1
 801cfb6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801cfba:	d1f6      	bne.n	801cfaa <UpdateAPDVoltage+0x192>
 801cfbc:	428a      	cmp	r2, r1
 801cfbe:	bf98      	it	ls
 801cfc0:	3401      	addls	r4, #1
 801cfc2:	2800      	cmp	r0, #0
 801cfc4:	db0e      	blt.n	801cfe4 <UpdateAPDVoltage+0x1cc>
 801cfc6:	2c00      	cmp	r4, #0
 801cfc8:	dbe6      	blt.n	801cf98 <UpdateAPDVoltage+0x180>
 801cfca:	b2a4      	uxth	r4, r4
 801cfcc:	e7bb      	b.n	801cf46 <UpdateAPDVoltage+0x12e>
 801cfce:	4242      	negs	r2, r0
 801cfd0:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 801cfd4:	d3aa      	bcc.n	801cf2c <UpdateAPDVoltage+0x114>
 801cfd6:	2a00      	cmp	r2, #0
 801cfd8:	dae1      	bge.n	801cf9e <UpdateAPDVoltage+0x186>
 801cfda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 801cfde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801cfe2:	e7de      	b.n	801cfa2 <UpdateAPDVoltage+0x18a>
 801cfe4:	4264      	negs	r4, r4
 801cfe6:	b2a4      	uxth	r4, r4
 801cfe8:	e7ad      	b.n	801cf46 <UpdateAPDVoltage+0x12e>
 801cfea:	bf00      	nop

0801cfec <Argus_Cal_Init>:
 801cfec:	b538      	push	{r3, r4, r5, lr}
 801cfee:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 801cff2:	4604      	mov	r4, r0
 801cff4:	460d      	mov	r5, r1
 801cff6:	2100      	movs	r1, #0
 801cff8:	f006 fbf3 	bl	80237e2 <memset>
 801cffc:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801d000:	f8c4 54c0 	str.w	r5, [r4, #1216]	@ 0x4c0
 801d004:	8523      	strh	r3, [r4, #40]	@ 0x28
 801d006:	bd38      	pop	{r3, r4, r5, pc}

0801d008 <Argus_Cal_ReadEEPROMData>:
 801d008:	f500 71fa 	add.w	r1, r0, #500	@ 0x1f4
 801d00c:	f8d0 04c0 	ldr.w	r0, [r0, #1216]	@ 0x4c0
 801d010:	f7fd bec2 	b.w	801ad98 <Argus_Dev_ReadEEPROM>

0801d014 <Argus_Cal_ReadNVMData>:
 801d014:	b530      	push	{r4, r5, lr}
 801d016:	b083      	sub	sp, #12
 801d018:	4604      	mov	r4, r0
 801d01a:	f8d0 04c0 	ldr.w	r0, [r0, #1216]	@ 0x4c0
 801d01e:	9101      	str	r1, [sp, #4]
 801d020:	f7fd faaa 	bl	801a578 <Argus_Dev_GetModule>
 801d024:	4605      	mov	r5, r0
 801d026:	f8d4 04c0 	ldr.w	r0, [r4, #1216]	@ 0x4c0
 801d02a:	f7fd faa7 	bl	801a57c <Argus_Dev_GetChipID>
 801d02e:	9a01      	ldr	r2, [sp, #4]
 801d030:	4601      	mov	r1, r0
 801d032:	4628      	mov	r0, r5
 801d034:	b003      	add	sp, #12
 801d036:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d03a:	f004 b9b5 	b.w	80213a8 <Argus_Cal_ReadCalibrationFromNVM>
 801d03e:	bf00      	nop

0801d040 <Argus_Cal_GetCalibration>:
 801d040:	460b      	mov	r3, r1
 801d042:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 801d046:	f500 7101 	add.w	r1, r0, #516	@ 0x204
 801d04a:	4618      	mov	r0, r3
 801d04c:	f006 bc59 	b.w	8023902 <memcpy>

0801d050 <Argus_Cal_GetCalibrationPtr>:
 801d050:	f500 7001 	add.w	r0, r0, #516	@ 0x204
 801d054:	4770      	bx	lr
 801d056:	bf00      	nop

0801d058 <Argus_Cal_ComposeCalibrationData>:
 801d058:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d05a:	4603      	mov	r3, r0
 801d05c:	b087      	sub	sp, #28
 801d05e:	460c      	mov	r4, r1
 801d060:	4668      	mov	r0, sp
 801d062:	f503 71fa 	add.w	r1, r3, #500	@ 0x1f4
 801d066:	f7f3 f901 	bl	801026c <EEPROM_Decode>
 801d06a:	2800      	cmp	r0, #0
 801d06c:	f2c0 80c8 	blt.w	801d200 <Argus_Cal_ComposeCalibrationData+0x1a8>
 801d070:	f8d4 3288 	ldr.w	r3, [r4, #648]	@ 0x288
 801d074:	07de      	lsls	r6, r3, #31
 801d076:	d407      	bmi.n	801d088 <Argus_Cal_ComposeCalibrationData+0x30>
 801d078:	f99d 100e 	ldrsb.w	r1, [sp, #14]
 801d07c:	f8b4 225e 	ldrh.w	r2, [r4, #606]	@ 0x25e
 801d080:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 801d084:	f8a4 228c 	strh.w	r2, [r4, #652]	@ 0x28c
 801d088:	079d      	lsls	r5, r3, #30
 801d08a:	d407      	bmi.n	801d09c <Argus_Cal_ComposeCalibrationData+0x44>
 801d08c:	f99d 100f 	ldrsb.w	r1, [sp, #15]
 801d090:	f8b4 2260 	ldrh.w	r2, [r4, #608]	@ 0x260
 801d094:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801d098:	f8a4 228e 	strh.w	r2, [r4, #654]	@ 0x28e
 801d09c:	0759      	lsls	r1, r3, #29
 801d09e:	d406      	bmi.n	801d0ae <Argus_Cal_ComposeCalibrationData+0x56>
 801d0a0:	f894 2264 	ldrb.w	r2, [r4, #612]	@ 0x264
 801d0a4:	f89d 1009 	ldrb.w	r1, [sp, #9]
 801d0a8:	440a      	add	r2, r1
 801d0aa:	f884 2290 	strb.w	r2, [r4, #656]	@ 0x290
 801d0ae:	071a      	lsls	r2, r3, #28
 801d0b0:	d406      	bmi.n	801d0c0 <Argus_Cal_ComposeCalibrationData+0x68>
 801d0b2:	f894 2265 	ldrb.w	r2, [r4, #613]	@ 0x265
 801d0b6:	f89d 100a 	ldrb.w	r1, [sp, #10]
 801d0ba:	440a      	add	r2, r1
 801d0bc:	f884 2291 	strb.w	r2, [r4, #657]	@ 0x291
 801d0c0:	06df      	lsls	r7, r3, #27
 801d0c2:	d40b      	bmi.n	801d0dc <Argus_Cal_ComposeCalibrationData+0x84>
 801d0c4:	f89d 2000 	ldrb.w	r2, [sp]
 801d0c8:	2a01      	cmp	r2, #1
 801d0ca:	f000 809b 	beq.w	801d204 <Argus_Cal_ComposeCalibrationData+0x1ac>
 801d0ce:	f894 2268 	ldrb.w	r2, [r4, #616]	@ 0x268
 801d0d2:	f89d 100b 	ldrb.w	r1, [sp, #11]
 801d0d6:	440a      	add	r2, r1
 801d0d8:	f884 2292 	strb.w	r2, [r4, #658]	@ 0x292
 801d0dc:	069e      	lsls	r6, r3, #26
 801d0de:	d406      	bmi.n	801d0ee <Argus_Cal_ComposeCalibrationData+0x96>
 801d0e0:	f894 2269 	ldrb.w	r2, [r4, #617]	@ 0x269
 801d0e4:	f89d 100d 	ldrb.w	r1, [sp, #13]
 801d0e8:	440a      	add	r2, r1
 801d0ea:	f884 2293 	strb.w	r2, [r4, #659]	@ 0x293
 801d0ee:	065d      	lsls	r5, r3, #25
 801d0f0:	d408      	bmi.n	801d104 <Argus_Cal_ComposeCalibrationData+0xac>
 801d0f2:	f99d 200c 	ldrsb.w	r2, [sp, #12]
 801d0f6:	f8b4 126a 	ldrh.w	r1, [r4, #618]	@ 0x26a
 801d0fa:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 801d0fe:	440a      	add	r2, r1
 801d100:	f8a4 2294 	strh.w	r2, [r4, #660]	@ 0x294
 801d104:	0559      	lsls	r1, r3, #21
 801d106:	d420      	bmi.n	801d14a <Argus_Cal_ComposeCalibrationData+0xf2>
 801d108:	f99d 1010 	ldrsb.w	r1, [sp, #16]
 801d10c:	f504 721d 	add.w	r2, r4, #628	@ 0x274
 801d110:	4322      	orrs	r2, r4
 801d112:	eb01 1141 	add.w	r1, r1, r1, lsl #5
 801d116:	f012 0207 	ands.w	r2, r2, #7
 801d11a:	b289      	uxth	r1, r1
 801d11c:	d17e      	bne.n	801d21c <Argus_Cal_ComposeCalibrationData+0x1c4>
 801d11e:	e9d4 659d 	ldrd	r6, r5, [r4, #628]	@ 0x274
 801d122:	eb01 0c06 	add.w	ip, r1, r6
 801d126:	4617      	mov	r7, r2
 801d128:	eb01 4616 	add.w	r6, r1, r6, lsr #16
 801d12c:	f36c 020f 	bfi	r2, ip, #0, #16
 801d130:	f366 421f 	bfi	r2, r6, #16, #16
 801d134:	f8c4 22a0 	str.w	r2, [r4, #672]	@ 0x2a0
 801d138:	194a      	adds	r2, r1, r5
 801d13a:	f362 070f 	bfi	r7, r2, #0, #16
 801d13e:	eb01 4115 	add.w	r1, r1, r5, lsr #16
 801d142:	f361 471f 	bfi	r7, r1, #16, #16
 801d146:	f8c4 72a4 	str.w	r7, [r4, #676]	@ 0x2a4
 801d14a:	041a      	lsls	r2, r3, #16
 801d14c:	d407      	bmi.n	801d15e <Argus_Cal_ComposeCalibrationData+0x106>
 801d14e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801d152:	f8b4 227c 	ldrh.w	r2, [r4, #636]	@ 0x27c
 801d156:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 801d15a:	f8a4 229a 	strh.w	r2, [r4, #666]	@ 0x29a
 801d15e:	051f      	lsls	r7, r3, #20
 801d160:	bf5c      	itt	pl
 801d162:	f89d 2001 	ldrbpl.w	r2, [sp, #1]
 801d166:	f884 2296 	strbpl.w	r2, [r4, #662]	@ 0x296
 801d16a:	04de      	lsls	r6, r3, #19
 801d16c:	bf5c      	itt	pl
 801d16e:	f89d 2002 	ldrbpl.w	r2, [sp, #2]
 801d172:	f884 2297 	strbpl.w	r2, [r4, #663]	@ 0x297
 801d176:	049d      	lsls	r5, r3, #18
 801d178:	d40b      	bmi.n	801d192 <Argus_Cal_ComposeCalibrationData+0x13a>
 801d17a:	f99d 2003 	ldrsb.w	r2, [sp, #3]
 801d17e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801d182:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801d186:	ebc2 1282 	rsb	r2, r2, r2, lsl #6
 801d18a:	f5a2 4200 	sub.w	r2, r2, #32768	@ 0x8000
 801d18e:	f8a4 2298 	strh.w	r2, [r4, #664]	@ 0x298
 801d192:	2b00      	cmp	r3, #0
 801d194:	db07      	blt.n	801d1a6 <Argus_Cal_ComposeCalibrationData+0x14e>
 801d196:	f99d 2007 	ldrsb.w	r2, [sp, #7]
 801d19a:	8861      	ldrh	r1, [r4, #2]
 801d19c:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 801d1a0:	440a      	add	r2, r1
 801d1a2:	f8a4 22a8 	strh.w	r2, [r4, #680]	@ 0x2a8
 801d1a6:	03d9      	lsls	r1, r3, #15
 801d1a8:	bf5c      	itt	pl
 801d1aa:	f89d 2008 	ldrbpl.w	r2, [sp, #8]
 801d1ae:	f884 229c 	strbpl.w	r2, [r4, #668]	@ 0x29c
 801d1b2:	045a      	lsls	r2, r3, #17
 801d1b4:	d412      	bmi.n	801d1dc <Argus_Cal_ComposeCalibrationData+0x184>
 801d1b6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801d1ba:	8b66      	ldrh	r6, [r4, #26]
 801d1bc:	7ea1      	ldrb	r1, [r4, #26]
 801d1be:	7ee5      	ldrb	r5, [r4, #27]
 801d1c0:	f8a4 629d 	strh.w	r6, [r4, #669]	@ 0x29d
 801d1c4:	3a01      	subs	r2, #1
 801d1c6:	2a06      	cmp	r2, #6
 801d1c8:	d808      	bhi.n	801d1dc <Argus_Cal_ComposeCalibrationData+0x184>
 801d1ca:	e8df f002 	tbb	[pc, r2]
 801d1ce:	4004      	.short	0x4004
 801d1d0:	564f4b44 	.word	0x564f4b44
 801d1d4:	3c          	.byte	0x3c
 801d1d5:	00          	.byte	0x00
 801d1d6:	3d01      	subs	r5, #1
 801d1d8:	f884 529e 	strb.w	r5, [r4, #670]	@ 0x29e
 801d1dc:	039b      	lsls	r3, r3, #14
 801d1de:	d40f      	bmi.n	801d200 <Argus_Cal_ComposeCalibrationData+0x1a8>
 801d1e0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801d1e4:	f8b4 2226 	ldrh.w	r2, [r4, #550]	@ 0x226
 801d1e8:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801d1ec:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801d1f0:	f8b4 3228 	ldrh.w	r3, [r4, #552]	@ 0x228
 801d1f4:	f8a4 22aa 	strh.w	r2, [r4, #682]	@ 0x2aa
 801d1f8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801d1fc:	f8a4 32ac 	strh.w	r3, [r4, #684]	@ 0x2ac
 801d200:	b007      	add	sp, #28
 801d202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d204:	f89d 100b 	ldrb.w	r1, [sp, #11]
 801d208:	f894 2268 	ldrb.w	r2, [r4, #616]	@ 0x268
 801d20c:	069e      	lsls	r6, r3, #26
 801d20e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 801d212:	f884 2292 	strb.w	r2, [r4, #658]	@ 0x292
 801d216:	f53f af6a 	bmi.w	801d0ee <Argus_Cal_ComposeCalibrationData+0x96>
 801d21a:	e761      	b.n	801d0e0 <Argus_Cal_ComposeCalibrationData+0x88>
 801d21c:	f8b4 2274 	ldrh.w	r2, [r4, #628]	@ 0x274
 801d220:	440a      	add	r2, r1
 801d222:	f8a4 22a0 	strh.w	r2, [r4, #672]	@ 0x2a0
 801d226:	f8b4 2276 	ldrh.w	r2, [r4, #630]	@ 0x276
 801d22a:	440a      	add	r2, r1
 801d22c:	f8a4 22a2 	strh.w	r2, [r4, #674]	@ 0x2a2
 801d230:	f8b4 2278 	ldrh.w	r2, [r4, #632]	@ 0x278
 801d234:	440a      	add	r2, r1
 801d236:	f8a4 22a4 	strh.w	r2, [r4, #676]	@ 0x2a4
 801d23a:	f8b4 227a 	ldrh.w	r2, [r4, #634]	@ 0x27a
 801d23e:	4411      	add	r1, r2
 801d240:	f8a4 12a6 	strh.w	r1, [r4, #678]	@ 0x2a6
 801d244:	e781      	b.n	801d14a <Argus_Cal_ComposeCalibrationData+0xf2>
 801d246:	3901      	subs	r1, #1
 801d248:	f884 129d 	strb.w	r1, [r4, #669]	@ 0x29d
 801d24c:	e7c6      	b.n	801d1dc <Argus_Cal_ComposeCalibrationData+0x184>
 801d24e:	3501      	adds	r5, #1
 801d250:	f884 529e 	strb.w	r5, [r4, #670]	@ 0x29e
 801d254:	e7c2      	b.n	801d1dc <Argus_Cal_ComposeCalibrationData+0x184>
 801d256:	3101      	adds	r1, #1
 801d258:	3d01      	subs	r5, #1
 801d25a:	f884 129d 	strb.w	r1, [r4, #669]	@ 0x29d
 801d25e:	f884 529e 	strb.w	r5, [r4, #670]	@ 0x29e
 801d262:	e7bb      	b.n	801d1dc <Argus_Cal_ComposeCalibrationData+0x184>
 801d264:	3101      	adds	r1, #1
 801d266:	f884 129d 	strb.w	r1, [r4, #669]	@ 0x29d
 801d26a:	e7b7      	b.n	801d1dc <Argus_Cal_ComposeCalibrationData+0x184>
 801d26c:	3101      	adds	r1, #1
 801d26e:	3501      	adds	r5, #1
 801d270:	f884 129d 	strb.w	r1, [r4, #669]	@ 0x29d
 801d274:	f884 529e 	strb.w	r5, [r4, #670]	@ 0x29e
 801d278:	e7b0      	b.n	801d1dc <Argus_Cal_ComposeCalibrationData+0x184>
 801d27a:	3901      	subs	r1, #1
 801d27c:	3d01      	subs	r5, #1
 801d27e:	f884 129d 	strb.w	r1, [r4, #669]	@ 0x29d
 801d282:	f884 529e 	strb.w	r5, [r4, #670]	@ 0x29e
 801d286:	e7a9      	b.n	801d1dc <Argus_Cal_ComposeCalibrationData+0x184>

0801d288 <Argus_Cal_CheckCalibration>:
 801d288:	b508      	push	{r3, lr}
 801d28a:	f890 129d 	ldrb.w	r1, [r0, #669]	@ 0x29d
 801d28e:	2907      	cmp	r1, #7
 801d290:	d857      	bhi.n	801d342 <Argus_Cal_CheckCalibration+0xba>
 801d292:	f890 129e 	ldrb.w	r1, [r0, #670]	@ 0x29e
 801d296:	2903      	cmp	r1, #3
 801d298:	d84d      	bhi.n	801d336 <Argus_Cal_CheckCalibration+0xae>
 801d29a:	f890 3292 	ldrb.w	r3, [r0, #658]	@ 0x292
 801d29e:	2b00      	cmp	r3, #0
 801d2a0:	d05b      	beq.n	801d35a <Argus_Cal_CheckCalibration+0xd2>
 801d2a2:	f890 3293 	ldrb.w	r3, [r0, #659]	@ 0x293
 801d2a6:	2b00      	cmp	r3, #0
 801d2a8:	d051      	beq.n	801d34e <Argus_Cal_CheckCalibration+0xc6>
 801d2aa:	f890 1266 	ldrb.w	r1, [r0, #614]	@ 0x266
 801d2ae:	293f      	cmp	r1, #63	@ 0x3f
 801d2b0:	d85f      	bhi.n	801d372 <Argus_Cal_CheckCalibration+0xea>
 801d2b2:	f990 1272 	ldrsb.w	r1, [r0, #626]	@ 0x272
 801d2b6:	f990 2273 	ldrsb.w	r2, [r0, #627]	@ 0x273
 801d2ba:	4291      	cmp	r1, r2
 801d2bc:	da53      	bge.n	801d366 <Argus_Cal_CheckCalibration+0xde>
 801d2be:	f890 2265 	ldrb.w	r2, [r0, #613]	@ 0x265
 801d2c2:	2a3f      	cmp	r2, #63	@ 0x3f
 801d2c4:	d861      	bhi.n	801d38a <Argus_Cal_CheckCalibration+0x102>
 801d2c6:	f890 1264 	ldrb.w	r1, [r0, #612]	@ 0x264
 801d2ca:	428a      	cmp	r2, r1
 801d2cc:	d957      	bls.n	801d37e <Argus_Cal_CheckCalibration+0xf6>
 801d2ce:	f9b0 325e 	ldrsh.w	r3, [r0, #606]	@ 0x25e
 801d2d2:	f8b0 125e 	ldrh.w	r1, [r0, #606]	@ 0x25e
 801d2d6:	2b00      	cmp	r3, #0
 801d2d8:	da1f      	bge.n	801d31a <Argus_Cal_CheckCalibration+0x92>
 801d2da:	f890 2291 	ldrb.w	r2, [r0, #657]	@ 0x291
 801d2de:	2a3f      	cmp	r2, #63	@ 0x3f
 801d2e0:	d85a      	bhi.n	801d398 <Argus_Cal_CheckCalibration+0x110>
 801d2e2:	f890 1290 	ldrb.w	r1, [r0, #656]	@ 0x290
 801d2e6:	428a      	cmp	r2, r1
 801d2e8:	d95d      	bls.n	801d3a6 <Argus_Cal_CheckCalibration+0x11e>
 801d2ea:	f9b0 328c 	ldrsh.w	r3, [r0, #652]	@ 0x28c
 801d2ee:	f8b0 128c 	ldrh.w	r1, [r0, #652]	@ 0x28c
 801d2f2:	2b00      	cmp	r3, #0
 801d2f4:	da18      	bge.n	801d328 <Argus_Cal_CheckCalibration+0xa0>
 801d2f6:	f8b0 328e 	ldrh.w	r3, [r0, #654]	@ 0x28e
 801d2fa:	2b00      	cmp	r3, #0
 801d2fc:	d059      	beq.n	801d3b2 <Argus_Cal_CheckCalibration+0x12a>
 801d2fe:	f8b0 3282 	ldrh.w	r3, [r0, #642]	@ 0x282
 801d302:	2b00      	cmp	r3, #0
 801d304:	d05b      	beq.n	801d3be <Argus_Cal_CheckCalibration+0x136>
 801d306:	7e43      	ldrb	r3, [r0, #25]
 801d308:	2000      	movs	r0, #0
 801d30a:	b103      	cbz	r3, 801d30e <Argus_Cal_CheckCalibration+0x86>
 801d30c:	bd08      	pop	{r3, pc}
 801d30e:	482f      	ldr	r0, [pc, #188]	@ (801d3cc <Argus_Cal_CheckCalibration+0x144>)
 801d310:	f7f0 fdfe 	bl	800df10 <print>
 801d314:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801d318:	bd08      	pop	{r3, pc}
 801d31a:	0909      	lsrs	r1, r1, #4
 801d31c:	482c      	ldr	r0, [pc, #176]	@ (801d3d0 <Argus_Cal_CheckCalibration+0x148>)
 801d31e:	f7f0 fdf7 	bl	800df10 <print>
 801d322:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801d326:	bd08      	pop	{r3, pc}
 801d328:	0909      	lsrs	r1, r1, #4
 801d32a:	482a      	ldr	r0, [pc, #168]	@ (801d3d4 <Argus_Cal_CheckCalibration+0x14c>)
 801d32c:	f7f0 fdf0 	bl	800df10 <print>
 801d330:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801d334:	bd08      	pop	{r3, pc}
 801d336:	4828      	ldr	r0, [pc, #160]	@ (801d3d8 <Argus_Cal_CheckCalibration+0x150>)
 801d338:	f7f0 fdea 	bl	800df10 <print>
 801d33c:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801d340:	bd08      	pop	{r3, pc}
 801d342:	4826      	ldr	r0, [pc, #152]	@ (801d3dc <Argus_Cal_CheckCalibration+0x154>)
 801d344:	f7f0 fde4 	bl	800df10 <print>
 801d348:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801d34c:	bd08      	pop	{r3, pc}
 801d34e:	4824      	ldr	r0, [pc, #144]	@ (801d3e0 <Argus_Cal_CheckCalibration+0x158>)
 801d350:	f7f0 fdde 	bl	800df10 <print>
 801d354:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801d358:	bd08      	pop	{r3, pc}
 801d35a:	4822      	ldr	r0, [pc, #136]	@ (801d3e4 <Argus_Cal_CheckCalibration+0x15c>)
 801d35c:	f7f0 fdd8 	bl	800df10 <print>
 801d360:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801d364:	bd08      	pop	{r3, pc}
 801d366:	4820      	ldr	r0, [pc, #128]	@ (801d3e8 <Argus_Cal_CheckCalibration+0x160>)
 801d368:	f7f0 fdd2 	bl	800df10 <print>
 801d36c:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801d370:	bd08      	pop	{r3, pc}
 801d372:	481e      	ldr	r0, [pc, #120]	@ (801d3ec <Argus_Cal_CheckCalibration+0x164>)
 801d374:	f7f0 fdcc 	bl	800df10 <print>
 801d378:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801d37c:	bd08      	pop	{r3, pc}
 801d37e:	481c      	ldr	r0, [pc, #112]	@ (801d3f0 <Argus_Cal_CheckCalibration+0x168>)
 801d380:	f7f0 fdc6 	bl	800df10 <print>
 801d384:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801d388:	bd08      	pop	{r3, pc}
 801d38a:	4611      	mov	r1, r2
 801d38c:	4819      	ldr	r0, [pc, #100]	@ (801d3f4 <Argus_Cal_CheckCalibration+0x16c>)
 801d38e:	f7f0 fdbf 	bl	800df10 <print>
 801d392:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801d396:	bd08      	pop	{r3, pc}
 801d398:	4611      	mov	r1, r2
 801d39a:	4817      	ldr	r0, [pc, #92]	@ (801d3f8 <Argus_Cal_CheckCalibration+0x170>)
 801d39c:	f7f0 fdb8 	bl	800df10 <print>
 801d3a0:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801d3a4:	bd08      	pop	{r3, pc}
 801d3a6:	4815      	ldr	r0, [pc, #84]	@ (801d3fc <Argus_Cal_CheckCalibration+0x174>)
 801d3a8:	f7f0 fdb2 	bl	800df10 <print>
 801d3ac:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801d3b0:	bd08      	pop	{r3, pc}
 801d3b2:	4813      	ldr	r0, [pc, #76]	@ (801d400 <Argus_Cal_CheckCalibration+0x178>)
 801d3b4:	f7f0 fdac 	bl	800df10 <print>
 801d3b8:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801d3bc:	bd08      	pop	{r3, pc}
 801d3be:	4811      	ldr	r0, [pc, #68]	@ (801d404 <Argus_Cal_CheckCalibration+0x17c>)
 801d3c0:	f7f0 fda6 	bl	800df10 <print>
 801d3c4:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801d3c8:	bd08      	pop	{r3, pc}
 801d3ca:	bf00      	nop
 801d3cc:	0802a3c0 	.word	0x0802a3c0
 801d3d0:	0802a27c 	.word	0x0802a27c
 801d3d4:	0802a324 	.word	0x0802a324
 801d3d8:	0802a0e0 	.word	0x0802a0e0
 801d3dc:	0802a0b0 	.word	0x0802a0b0
 801d3e0:	0802a140 	.word	0x0802a140
 801d3e4:	0802a110 	.word	0x0802a110
 801d3e8:	0802a1a4 	.word	0x0802a1a4
 801d3ec:	0802a170 	.word	0x0802a170
 801d3f0:	0802a244 	.word	0x0802a244
 801d3f4:	0802a20c 	.word	0x0802a20c
 801d3f8:	0802a2b4 	.word	0x0802a2b4
 801d3fc:	0802a2ec 	.word	0x0802a2ec
 801d400:	0802a35c 	.word	0x0802a35c
 801d404:	0802a390 	.word	0x0802a390

0801d408 <Argus_Cal_CopyCalibration>:
 801d408:	b508      	push	{r3, lr}
 801d40a:	f500 7301 	add.w	r3, r0, #516	@ 0x204
 801d40e:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 801d412:	4618      	mov	r0, r3
 801d414:	f006 fa75 	bl	8023902 <memcpy>
 801d418:	bd08      	pop	{r3, pc}
 801d41a:	bf00      	nop

0801d41c <Argus_Cal_GetGainValues>:
 801d41c:	b570      	push	{r4, r5, r6, lr}
 801d41e:	4605      	mov	r5, r0
 801d420:	4608      	mov	r0, r1
 801d422:	f005 fae9 	bl	80229f8 <fp_log16>
 801d426:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
 801d42a:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
 801d42e:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 801d432:	f240 8093 	bls.w	801d55c <Argus_Cal_GetGainValues+0x140>
 801d436:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801d43a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 801d43e:	4694      	mov	ip, r2
 801d440:	0052      	lsls	r2, r2, #1
 801d442:	428a      	cmp	r2, r1
 801d444:	461c      	mov	r4, r3
 801d446:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d44a:	d3f8      	bcc.n	801d43e <Argus_Cal_GetGainValues+0x22>
 801d44c:	2b00      	cmp	r3, #0
 801d44e:	d17b      	bne.n	801d548 <Argus_Cal_GetGainValues+0x12c>
 801d450:	2800      	cmp	r0, #0
 801d452:	bfac      	ite	ge
 801d454:	f06f 4000 	mvnge.w	r0, #2147483648	@ 0x80000000
 801d458:	f04f 4000 	movlt.w	r0, #2147483648	@ 0x80000000
 801d45c:	f005 fa1a 	bl	8022894 <fp_exp16>
 801d460:	f44f 03c8 	mov.w	r3, #6553600	@ 0x640000
 801d464:	2800      	cmp	r0, #0
 801d466:	60eb      	str	r3, [r5, #12]
 801d468:	4684      	mov	ip, r0
 801d46a:	f000 8094 	beq.w	801d596 <Argus_Cal_GetGainValues+0x17a>
 801d46e:	db48      	blt.n	801d502 <Argus_Cal_GetGainValues+0xe6>
 801d470:	f5b0 0fc8 	cmp.w	r0, #6553600	@ 0x640000
 801d474:	4601      	mov	r1, r0
 801d476:	f080 8114 	bcs.w	801d6a2 <Argus_Cal_GetGainValues+0x286>
 801d47a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801d47e:	0049      	lsls	r1, r1, #1
 801d480:	f5b1 0fc8 	cmp.w	r1, #6553600	@ 0x640000
 801d484:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801d488:	d3f9      	bcc.n	801d47e <Argus_Cal_GetGainValues+0x62>
 801d48a:	2a00      	cmp	r2, #0
 801d48c:	d144      	bne.n	801d518 <Argus_Cal_GetGainValues+0xfc>
 801d48e:	2800      	cmp	r0, #0
 801d490:	f2c0 810f 	blt.w	801d6b2 <Argus_Cal_GetGainValues+0x296>
 801d494:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801d498:	461e      	mov	r6, r3
 801d49a:	60ab      	str	r3, [r5, #8]
 801d49c:	2800      	cmp	r0, #0
 801d49e:	f280 80eb 	bge.w	801d678 <Argus_Cal_GetGainValues+0x25c>
 801d4a2:	4241      	negs	r1, r0
 801d4a4:	4299      	cmp	r1, r3
 801d4a6:	bf28      	it	cs
 801d4a8:	f44f 3480 	movcs.w	r4, #65536	@ 0x10000
 801d4ac:	d279      	bcs.n	801d5a2 <Argus_Cal_GetGainValues+0x186>
 801d4ae:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 801d4b2:	0049      	lsls	r1, r1, #1
 801d4b4:	4299      	cmp	r1, r3
 801d4b6:	ea4f 0444 	mov.w	r4, r4, lsl #1
 801d4ba:	d3fa      	bcc.n	801d4b2 <Argus_Cal_GetGainValues+0x96>
 801d4bc:	2c00      	cmp	r4, #0
 801d4be:	d170      	bne.n	801d5a2 <Argus_Cal_GetGainValues+0x186>
 801d4c0:	ea90 0f06 	teq	r0, r6
 801d4c4:	f100 80fb 	bmi.w	801d6be <Argus_Cal_GetGainValues+0x2a2>
 801d4c8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801d4cc:	461c      	mov	r4, r3
 801d4ce:	606b      	str	r3, [r5, #4]
 801d4d0:	461a      	mov	r2, r3
 801d4d2:	2800      	cmp	r0, #0
 801d4d4:	f2c0 8082 	blt.w	801d5dc <Argus_Cal_GetGainValues+0x1c0>
 801d4d8:	4290      	cmp	r0, r2
 801d4da:	f080 80e5 	bcs.w	801d6a8 <Argus_Cal_GetGainValues+0x28c>
 801d4de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801d4e2:	0040      	lsls	r0, r0, #1
 801d4e4:	4290      	cmp	r0, r2
 801d4e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d4ea:	d3fa      	bcc.n	801d4e2 <Argus_Cal_GetGainValues+0xc6>
 801d4ec:	2b00      	cmp	r3, #0
 801d4ee:	d17c      	bne.n	801d5ea <Argus_Cal_GetGainValues+0x1ce>
 801d4f0:	ea9c 0f04 	teq	ip, r4
 801d4f4:	bf54      	ite	pl
 801d4f6:	f06f 4100 	mvnpl.w	r1, #2147483648	@ 0x80000000
 801d4fa:	f04f 4100 	movmi.w	r1, #2147483648	@ 0x80000000
 801d4fe:	6029      	str	r1, [r5, #0]
 801d500:	bd70      	pop	{r4, r5, r6, pc}
 801d502:	4241      	negs	r1, r0
 801d504:	f5b1 0fc8 	cmp.w	r1, #6553600	@ 0x640000
 801d508:	d3b7      	bcc.n	801d47a <Argus_Cal_GetGainValues+0x5e>
 801d50a:	2900      	cmp	r1, #0
 801d50c:	f280 80c9 	bge.w	801d6a2 <Argus_Cal_GetGainValues+0x286>
 801d510:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 801d514:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 801d518:	2300      	movs	r3, #0
 801d51a:	f44f 04c8 	mov.w	r4, #6553600	@ 0x640000
 801d51e:	e000      	b.n	801d522 <Argus_Cal_GetGainValues+0x106>
 801d520:	b154      	cbz	r4, 801d538 <Argus_Cal_GetGainValues+0x11c>
 801d522:	428c      	cmp	r4, r1
 801d524:	bf24      	itt	cs
 801d526:	1a64      	subcs	r4, r4, r1
 801d528:	4313      	orrcs	r3, r2
 801d52a:	0852      	lsrs	r2, r2, #1
 801d52c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 801d530:	d1f6      	bne.n	801d520 <Argus_Cal_GetGainValues+0x104>
 801d532:	428c      	cmp	r4, r1
 801d534:	bf28      	it	cs
 801d536:	3301      	addcs	r3, #1
 801d538:	2800      	cmp	r0, #0
 801d53a:	f2c0 8094 	blt.w	801d666 <Argus_Cal_GetGainValues+0x24a>
 801d53e:	2b00      	cmp	r3, #0
 801d540:	461e      	mov	r6, r3
 801d542:	dba7      	blt.n	801d494 <Argus_Cal_GetGainValues+0x78>
 801d544:	60ab      	str	r3, [r5, #8]
 801d546:	e7a9      	b.n	801d49c <Argus_Cal_GetGainValues+0x80>
 801d548:	2a00      	cmp	r2, #0
 801d54a:	da0e      	bge.n	801d56a <Argus_Cal_GetGainValues+0x14e>
 801d54c:	428a      	cmp	r2, r1
 801d54e:	f040 8083 	bne.w	801d658 <Argus_Cal_GetGainValues+0x23c>
 801d552:	2800      	cmp	r0, #0
 801d554:	461c      	mov	r4, r3
 801d556:	da18      	bge.n	801d58a <Argus_Cal_GetGainValues+0x16e>
 801d558:	4260      	negs	r0, r4
 801d55a:	e77f      	b.n	801d45c <Argus_Cal_GetGainValues+0x40>
 801d55c:	2900      	cmp	r1, #0
 801d55e:	f000 80b4 	beq.w	801d6ca <Argus_Cal_GetGainValues+0x2ae>
 801d562:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 801d566:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801d56a:	2400      	movs	r4, #0
 801d56c:	e000      	b.n	801d570 <Argus_Cal_GetGainValues+0x154>
 801d56e:	b151      	cbz	r1, 801d586 <Argus_Cal_GetGainValues+0x16a>
 801d570:	428a      	cmp	r2, r1
 801d572:	bf9c      	itt	ls
 801d574:	1a89      	subls	r1, r1, r2
 801d576:	431c      	orrls	r4, r3
 801d578:	085b      	lsrs	r3, r3, #1
 801d57a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801d57e:	d1f6      	bne.n	801d56e <Argus_Cal_GetGainValues+0x152>
 801d580:	428a      	cmp	r2, r1
 801d582:	d800      	bhi.n	801d586 <Argus_Cal_GetGainValues+0x16a>
 801d584:	3401      	adds	r4, #1
 801d586:	2800      	cmp	r0, #0
 801d588:	dbe6      	blt.n	801d558 <Argus_Cal_GetGainValues+0x13c>
 801d58a:	2c00      	cmp	r4, #0
 801d58c:	bfac      	ite	ge
 801d58e:	4620      	movge	r0, r4
 801d590:	f06f 4000 	mvnlt.w	r0, #2147483648	@ 0x80000000
 801d594:	e762      	b.n	801d45c <Argus_Cal_GetGainValues+0x40>
 801d596:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801d59a:	e9c5 1101 	strd	r1, r1, [r5, #4]
 801d59e:	6029      	str	r1, [r5, #0]
 801d5a0:	bd70      	pop	{r4, r5, r6, pc}
 801d5a2:	2900      	cmp	r1, #0
 801d5a4:	db3c      	blt.n	801d620 <Argus_Cal_GetGainValues+0x204>
 801d5a6:	461a      	mov	r2, r3
 801d5a8:	b153      	cbz	r3, 801d5c0 <Argus_Cal_GetGainValues+0x1a4>
 801d5aa:	2200      	movs	r2, #0
 801d5ac:	e000      	b.n	801d5b0 <Argus_Cal_GetGainValues+0x194>
 801d5ae:	b13b      	cbz	r3, 801d5c0 <Argus_Cal_GetGainValues+0x1a4>
 801d5b0:	4299      	cmp	r1, r3
 801d5b2:	bf9c      	itt	ls
 801d5b4:	1a5b      	subls	r3, r3, r1
 801d5b6:	4322      	orrls	r2, r4
 801d5b8:	0864      	lsrs	r4, r4, #1
 801d5ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d5be:	d1f6      	bne.n	801d5ae <Argus_Cal_GetGainValues+0x192>
 801d5c0:	428b      	cmp	r3, r1
 801d5c2:	d300      	bcc.n	801d5c6 <Argus_Cal_GetGainValues+0x1aa>
 801d5c4:	3201      	adds	r2, #1
 801d5c6:	ea90 0f06 	teq	r0, r6
 801d5ca:	d45c      	bmi.n	801d686 <Argus_Cal_GetGainValues+0x26a>
 801d5cc:	2a00      	cmp	r2, #0
 801d5ce:	4614      	mov	r4, r2
 801d5d0:	f6ff af7a 	blt.w	801d4c8 <Argus_Cal_GetGainValues+0xac>
 801d5d4:	2800      	cmp	r0, #0
 801d5d6:	606a      	str	r2, [r5, #4]
 801d5d8:	f6bf af7e 	bge.w	801d4d8 <Argus_Cal_GetGainValues+0xbc>
 801d5dc:	4240      	negs	r0, r0
 801d5de:	4290      	cmp	r0, r2
 801d5e0:	bf28      	it	cs
 801d5e2:	f44f 3380 	movcs.w	r3, #65536	@ 0x10000
 801d5e6:	f4ff af7a 	bcc.w	801d4de <Argus_Cal_GetGainValues+0xc2>
 801d5ea:	2800      	cmp	r0, #0
 801d5ec:	db25      	blt.n	801d63a <Argus_Cal_GetGainValues+0x21e>
 801d5ee:	4611      	mov	r1, r2
 801d5f0:	b152      	cbz	r2, 801d608 <Argus_Cal_GetGainValues+0x1ec>
 801d5f2:	2100      	movs	r1, #0
 801d5f4:	e000      	b.n	801d5f8 <Argus_Cal_GetGainValues+0x1dc>
 801d5f6:	b13a      	cbz	r2, 801d608 <Argus_Cal_GetGainValues+0x1ec>
 801d5f8:	4290      	cmp	r0, r2
 801d5fa:	bf9c      	itt	ls
 801d5fc:	1a12      	subls	r2, r2, r0
 801d5fe:	4319      	orrls	r1, r3
 801d600:	085b      	lsrs	r3, r3, #1
 801d602:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801d606:	d1f6      	bne.n	801d5f6 <Argus_Cal_GetGainValues+0x1da>
 801d608:	4282      	cmp	r2, r0
 801d60a:	d300      	bcc.n	801d60e <Argus_Cal_GetGainValues+0x1f2>
 801d60c:	3101      	adds	r1, #1
 801d60e:	ea9c 0f04 	teq	ip, r4
 801d612:	d41f      	bmi.n	801d654 <Argus_Cal_GetGainValues+0x238>
 801d614:	2900      	cmp	r1, #0
 801d616:	bfb8      	it	lt
 801d618:	f06f 4100 	mvnlt.w	r1, #2147483648	@ 0x80000000
 801d61c:	6029      	str	r1, [r5, #0]
 801d61e:	bd70      	pop	{r4, r5, r6, pc}
 801d620:	428b      	cmp	r3, r1
 801d622:	d23a      	bcs.n	801d69a <Argus_Cal_GetGainValues+0x27e>
 801d624:	0864      	lsrs	r4, r4, #1
 801d626:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801d62a:	d040      	beq.n	801d6ae <Argus_Cal_GetGainValues+0x292>
 801d62c:	2b00      	cmp	r3, #0
 801d62e:	d1bc      	bne.n	801d5aa <Argus_Cal_GetGainValues+0x18e>
 801d630:	ea90 0f06 	teq	r0, r6
 801d634:	d44b      	bmi.n	801d6ce <Argus_Cal_GetGainValues+0x2b2>
 801d636:	461a      	mov	r2, r3
 801d638:	e7c8      	b.n	801d5cc <Argus_Cal_GetGainValues+0x1b0>
 801d63a:	4290      	cmp	r0, r2
 801d63c:	d92b      	bls.n	801d696 <Argus_Cal_GetGainValues+0x27a>
 801d63e:	085b      	lsrs	r3, r3, #1
 801d640:	ea4f 0050 	mov.w	r0, r0, lsr #1
 801d644:	d02b      	beq.n	801d69e <Argus_Cal_GetGainValues+0x282>
 801d646:	2a00      	cmp	r2, #0
 801d648:	d1d3      	bne.n	801d5f2 <Argus_Cal_GetGainValues+0x1d6>
 801d64a:	ea9c 0f04 	teq	ip, r4
 801d64e:	4611      	mov	r1, r2
 801d650:	f57f af55 	bpl.w	801d4fe <Argus_Cal_GetGainValues+0xe2>
 801d654:	4249      	negs	r1, r1
 801d656:	e752      	b.n	801d4fe <Argus_Cal_GetGainValues+0xe2>
 801d658:	f034 4300 	bics.w	r3, r4, #2147483648	@ 0x80000000
 801d65c:	f02c 4200 	bic.w	r2, ip, #2147483648	@ 0x80000000
 801d660:	d183      	bne.n	801d56a <Argus_Cal_GetGainValues+0x14e>
 801d662:	461c      	mov	r4, r3
 801d664:	e78c      	b.n	801d580 <Argus_Cal_GetGainValues+0x164>
 801d666:	425e      	negs	r6, r3
 801d668:	ea13 0326 	ands.w	r3, r3, r6, asr #32
 801d66c:	bf38      	it	cc
 801d66e:	4633      	movcc	r3, r6
 801d670:	2800      	cmp	r0, #0
 801d672:	60ae      	str	r6, [r5, #8]
 801d674:	f6ff af15 	blt.w	801d4a2 <Argus_Cal_GetGainValues+0x86>
 801d678:	4298      	cmp	r0, r3
 801d67a:	4601      	mov	r1, r0
 801d67c:	f4ff af17 	bcc.w	801d4ae <Argus_Cal_GetGainValues+0x92>
 801d680:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 801d684:	e78f      	b.n	801d5a6 <Argus_Cal_GetGainValues+0x18a>
 801d686:	4253      	negs	r3, r2
 801d688:	2b00      	cmp	r3, #0
 801d68a:	606b      	str	r3, [r5, #4]
 801d68c:	461c      	mov	r4, r3
 801d68e:	f6ff af20 	blt.w	801d4d2 <Argus_Cal_GetGainValues+0xb6>
 801d692:	461a      	mov	r2, r3
 801d694:	e71d      	b.n	801d4d2 <Argus_Cal_GetGainValues+0xb6>
 801d696:	4619      	mov	r1, r3
 801d698:	e7b9      	b.n	801d60e <Argus_Cal_GetGainValues+0x1f2>
 801d69a:	4622      	mov	r2, r4
 801d69c:	e793      	b.n	801d5c6 <Argus_Cal_GetGainValues+0x1aa>
 801d69e:	4619      	mov	r1, r3
 801d6a0:	e7b2      	b.n	801d608 <Argus_Cal_GetGainValues+0x1ec>
 801d6a2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801d6a6:	e737      	b.n	801d518 <Argus_Cal_GetGainValues+0xfc>
 801d6a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801d6ac:	e79f      	b.n	801d5ee <Argus_Cal_GetGainValues+0x1d2>
 801d6ae:	4622      	mov	r2, r4
 801d6b0:	e786      	b.n	801d5c0 <Argus_Cal_GetGainValues+0x1a4>
 801d6b2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801d6b6:	4613      	mov	r3, r2
 801d6b8:	60aa      	str	r2, [r5, #8]
 801d6ba:	4616      	mov	r6, r2
 801d6bc:	e6ee      	b.n	801d49c <Argus_Cal_GetGainValues+0x80>
 801d6be:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801d6c2:	461a      	mov	r2, r3
 801d6c4:	606b      	str	r3, [r5, #4]
 801d6c6:	461c      	mov	r4, r3
 801d6c8:	e703      	b.n	801d4d2 <Argus_Cal_GetGainValues+0xb6>
 801d6ca:	4608      	mov	r0, r1
 801d6cc:	e6c6      	b.n	801d45c <Argus_Cal_GetGainValues+0x40>
 801d6ce:	606b      	str	r3, [r5, #4]
 801d6d0:	461c      	mov	r4, r3
 801d6d2:	461a      	mov	r2, r3
 801d6d4:	e6fd      	b.n	801d4d2 <Argus_Cal_GetGainValues+0xb6>
 801d6d6:	bf00      	nop

0801d6d8 <Argus_Cal_GetTotalXtalkVectorTable>:
 801d6d8:	b538      	push	{r3, r4, r5, lr}
 801d6da:	4605      	mov	r5, r0
 801d6dc:	4614      	mov	r4, r2
 801d6de:	f001 ffb5 	bl	801f64c <Argus_Cal_GetInternalXtalkVectorTable>
 801d6e2:	2800      	cmp	r0, #0
 801d6e4:	f2c0 81be 	blt.w	801da64 <Argus_Cal_GetTotalXtalkVectorTable+0x38c>
 801d6e8:	462b      	mov	r3, r5
 801d6ea:	4622      	mov	r2, r4
 801d6ec:	f505 7e80 	add.w	lr, r5, #256	@ 0x100
 801d6f0:	8819      	ldrh	r1, [r3, #0]
 801d6f2:	f8b2 4122 	ldrh.w	r4, [r2, #290]	@ 0x122
 801d6f6:	f8b3 c002 	ldrh.w	ip, [r3, #2]
 801d6fa:	4421      	add	r1, r4
 801d6fc:	8019      	strh	r1, [r3, #0]
 801d6fe:	f8b2 4124 	ldrh.w	r4, [r2, #292]	@ 0x124
 801d702:	8899      	ldrh	r1, [r3, #4]
 801d704:	44a4      	add	ip, r4
 801d706:	f8a3 c002 	strh.w	ip, [r3, #2]
 801d70a:	f8b2 4126 	ldrh.w	r4, [r2, #294]	@ 0x126
 801d70e:	f8b3 c006 	ldrh.w	ip, [r3, #6]
 801d712:	4421      	add	r1, r4
 801d714:	8099      	strh	r1, [r3, #4]
 801d716:	f8b2 4128 	ldrh.w	r4, [r2, #296]	@ 0x128
 801d71a:	8919      	ldrh	r1, [r3, #8]
 801d71c:	44a4      	add	ip, r4
 801d71e:	f8a3 c006 	strh.w	ip, [r3, #6]
 801d722:	f8b2 412a 	ldrh.w	r4, [r2, #298]	@ 0x12a
 801d726:	f8b3 c00a 	ldrh.w	ip, [r3, #10]
 801d72a:	4421      	add	r1, r4
 801d72c:	8119      	strh	r1, [r3, #8]
 801d72e:	f8b2 412c 	ldrh.w	r4, [r2, #300]	@ 0x12c
 801d732:	8999      	ldrh	r1, [r3, #12]
 801d734:	44a4      	add	ip, r4
 801d736:	f8a3 c00a 	strh.w	ip, [r3, #10]
 801d73a:	f8b2 412e 	ldrh.w	r4, [r2, #302]	@ 0x12e
 801d73e:	f8b3 c00e 	ldrh.w	ip, [r3, #14]
 801d742:	4421      	add	r1, r4
 801d744:	8199      	strh	r1, [r3, #12]
 801d746:	f8b2 4130 	ldrh.w	r4, [r2, #304]	@ 0x130
 801d74a:	8a19      	ldrh	r1, [r3, #16]
 801d74c:	44a4      	add	ip, r4
 801d74e:	f8a3 c00e 	strh.w	ip, [r3, #14]
 801d752:	f8b2 4132 	ldrh.w	r4, [r2, #306]	@ 0x132
 801d756:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 801d75a:	4421      	add	r1, r4
 801d75c:	8219      	strh	r1, [r3, #16]
 801d75e:	f8b2 4134 	ldrh.w	r4, [r2, #308]	@ 0x134
 801d762:	8a99      	ldrh	r1, [r3, #20]
 801d764:	44a4      	add	ip, r4
 801d766:	f8a3 c012 	strh.w	ip, [r3, #18]
 801d76a:	f8b2 4136 	ldrh.w	r4, [r2, #310]	@ 0x136
 801d76e:	3380      	adds	r3, #128	@ 0x80
 801d770:	4421      	add	r1, r4
 801d772:	f823 1c6c 	strh.w	r1, [r3, #-108]
 801d776:	f8b2 4138 	ldrh.w	r4, [r2, #312]	@ 0x138
 801d77a:	f833 1c6a 	ldrh.w	r1, [r3, #-106]
 801d77e:	f833 cc68 	ldrh.w	ip, [r3, #-104]
 801d782:	4421      	add	r1, r4
 801d784:	f823 1c6a 	strh.w	r1, [r3, #-106]
 801d788:	f8b2 413a 	ldrh.w	r4, [r2, #314]	@ 0x13a
 801d78c:	f833 1c66 	ldrh.w	r1, [r3, #-102]
 801d790:	44a4      	add	ip, r4
 801d792:	f823 cc68 	strh.w	ip, [r3, #-104]
 801d796:	f8b2 413c 	ldrh.w	r4, [r2, #316]	@ 0x13c
 801d79a:	f833 cc64 	ldrh.w	ip, [r3, #-100]
 801d79e:	4421      	add	r1, r4
 801d7a0:	f823 1c66 	strh.w	r1, [r3, #-102]
 801d7a4:	f8b2 413e 	ldrh.w	r4, [r2, #318]	@ 0x13e
 801d7a8:	f833 1c62 	ldrh.w	r1, [r3, #-98]
 801d7ac:	44a4      	add	ip, r4
 801d7ae:	f823 cc64 	strh.w	ip, [r3, #-100]
 801d7b2:	f8b2 4140 	ldrh.w	r4, [r2, #320]	@ 0x140
 801d7b6:	f833 cc60 	ldrh.w	ip, [r3, #-96]
 801d7ba:	4421      	add	r1, r4
 801d7bc:	f823 1c62 	strh.w	r1, [r3, #-98]
 801d7c0:	f8b2 4142 	ldrh.w	r4, [r2, #322]	@ 0x142
 801d7c4:	f833 1c5e 	ldrh.w	r1, [r3, #-94]
 801d7c8:	44a4      	add	ip, r4
 801d7ca:	f823 cc60 	strh.w	ip, [r3, #-96]
 801d7ce:	f8b2 4144 	ldrh.w	r4, [r2, #324]	@ 0x144
 801d7d2:	f833 cc5c 	ldrh.w	ip, [r3, #-92]
 801d7d6:	4421      	add	r1, r4
 801d7d8:	f823 1c5e 	strh.w	r1, [r3, #-94]
 801d7dc:	f8b2 4146 	ldrh.w	r4, [r2, #326]	@ 0x146
 801d7e0:	f833 1c5a 	ldrh.w	r1, [r3, #-90]
 801d7e4:	44a4      	add	ip, r4
 801d7e6:	f823 cc5c 	strh.w	ip, [r3, #-92]
 801d7ea:	f8b2 4148 	ldrh.w	r4, [r2, #328]	@ 0x148
 801d7ee:	f833 cc58 	ldrh.w	ip, [r3, #-88]
 801d7f2:	4421      	add	r1, r4
 801d7f4:	f823 1c5a 	strh.w	r1, [r3, #-90]
 801d7f8:	f8b2 414a 	ldrh.w	r4, [r2, #330]	@ 0x14a
 801d7fc:	f833 1c56 	ldrh.w	r1, [r3, #-86]
 801d800:	44a4      	add	ip, r4
 801d802:	f823 cc58 	strh.w	ip, [r3, #-88]
 801d806:	f8b2 414c 	ldrh.w	r4, [r2, #332]	@ 0x14c
 801d80a:	3280      	adds	r2, #128	@ 0x80
 801d80c:	4421      	add	r1, r4
 801d80e:	f823 1c56 	strh.w	r1, [r3, #-86]
 801d812:	f8b2 40ce 	ldrh.w	r4, [r2, #206]	@ 0xce
 801d816:	f833 1c54 	ldrh.w	r1, [r3, #-84]
 801d81a:	f833 cc52 	ldrh.w	ip, [r3, #-82]
 801d81e:	4421      	add	r1, r4
 801d820:	f823 1c54 	strh.w	r1, [r3, #-84]
 801d824:	f8b2 40d0 	ldrh.w	r4, [r2, #208]	@ 0xd0
 801d828:	f833 1c50 	ldrh.w	r1, [r3, #-80]
 801d82c:	44a4      	add	ip, r4
 801d82e:	f823 cc52 	strh.w	ip, [r3, #-82]
 801d832:	f8b2 40d2 	ldrh.w	r4, [r2, #210]	@ 0xd2
 801d836:	f833 cc4e 	ldrh.w	ip, [r3, #-78]
 801d83a:	4421      	add	r1, r4
 801d83c:	f823 1c50 	strh.w	r1, [r3, #-80]
 801d840:	f8b2 40d4 	ldrh.w	r4, [r2, #212]	@ 0xd4
 801d844:	f833 1c4c 	ldrh.w	r1, [r3, #-76]
 801d848:	44a4      	add	ip, r4
 801d84a:	f823 cc4e 	strh.w	ip, [r3, #-78]
 801d84e:	f8b2 40d6 	ldrh.w	r4, [r2, #214]	@ 0xd6
 801d852:	f833 cc4a 	ldrh.w	ip, [r3, #-74]
 801d856:	4421      	add	r1, r4
 801d858:	f823 1c4c 	strh.w	r1, [r3, #-76]
 801d85c:	f8b2 40d8 	ldrh.w	r4, [r2, #216]	@ 0xd8
 801d860:	f833 1c48 	ldrh.w	r1, [r3, #-72]
 801d864:	44a4      	add	ip, r4
 801d866:	f823 cc4a 	strh.w	ip, [r3, #-74]
 801d86a:	f8b2 40da 	ldrh.w	r4, [r2, #218]	@ 0xda
 801d86e:	f833 cc46 	ldrh.w	ip, [r3, #-70]
 801d872:	4421      	add	r1, r4
 801d874:	f823 1c48 	strh.w	r1, [r3, #-72]
 801d878:	f8b2 40dc 	ldrh.w	r4, [r2, #220]	@ 0xdc
 801d87c:	f833 1c44 	ldrh.w	r1, [r3, #-68]
 801d880:	44a4      	add	ip, r4
 801d882:	f823 cc46 	strh.w	ip, [r3, #-70]
 801d886:	f8b2 40de 	ldrh.w	r4, [r2, #222]	@ 0xde
 801d88a:	f833 cc42 	ldrh.w	ip, [r3, #-66]
 801d88e:	4421      	add	r1, r4
 801d890:	f823 1c44 	strh.w	r1, [r3, #-68]
 801d894:	f8b2 40e0 	ldrh.w	r4, [r2, #224]	@ 0xe0
 801d898:	f833 1c40 	ldrh.w	r1, [r3, #-64]
 801d89c:	44a4      	add	ip, r4
 801d89e:	f823 cc42 	strh.w	ip, [r3, #-66]
 801d8a2:	f8b2 40e2 	ldrh.w	r4, [r2, #226]	@ 0xe2
 801d8a6:	4421      	add	r1, r4
 801d8a8:	f823 1c40 	strh.w	r1, [r3, #-64]
 801d8ac:	f8b2 40e4 	ldrh.w	r4, [r2, #228]	@ 0xe4
 801d8b0:	f833 1c3e 	ldrh.w	r1, [r3, #-62]
 801d8b4:	f833 cc3c 	ldrh.w	ip, [r3, #-60]
 801d8b8:	4421      	add	r1, r4
 801d8ba:	f823 1c3e 	strh.w	r1, [r3, #-62]
 801d8be:	f8b2 40e6 	ldrh.w	r4, [r2, #230]	@ 0xe6
 801d8c2:	f833 1c3a 	ldrh.w	r1, [r3, #-58]
 801d8c6:	44a4      	add	ip, r4
 801d8c8:	f823 cc3c 	strh.w	ip, [r3, #-60]
 801d8cc:	f8b2 40e8 	ldrh.w	r4, [r2, #232]	@ 0xe8
 801d8d0:	f833 cc38 	ldrh.w	ip, [r3, #-56]
 801d8d4:	4421      	add	r1, r4
 801d8d6:	f823 1c3a 	strh.w	r1, [r3, #-58]
 801d8da:	f8b2 40ea 	ldrh.w	r4, [r2, #234]	@ 0xea
 801d8de:	f833 1c36 	ldrh.w	r1, [r3, #-54]
 801d8e2:	44a4      	add	ip, r4
 801d8e4:	f823 cc38 	strh.w	ip, [r3, #-56]
 801d8e8:	f8b2 40ec 	ldrh.w	r4, [r2, #236]	@ 0xec
 801d8ec:	f833 cc34 	ldrh.w	ip, [r3, #-52]
 801d8f0:	4421      	add	r1, r4
 801d8f2:	f823 1c36 	strh.w	r1, [r3, #-54]
 801d8f6:	f8b2 40ee 	ldrh.w	r4, [r2, #238]	@ 0xee
 801d8fa:	f833 1c32 	ldrh.w	r1, [r3, #-50]
 801d8fe:	44a4      	add	ip, r4
 801d900:	f823 cc34 	strh.w	ip, [r3, #-52]
 801d904:	f8b2 40f0 	ldrh.w	r4, [r2, #240]	@ 0xf0
 801d908:	f833 cc30 	ldrh.w	ip, [r3, #-48]
 801d90c:	4421      	add	r1, r4
 801d90e:	f823 1c32 	strh.w	r1, [r3, #-50]
 801d912:	f8b2 40f2 	ldrh.w	r4, [r2, #242]	@ 0xf2
 801d916:	f833 1c2e 	ldrh.w	r1, [r3, #-46]
 801d91a:	44a4      	add	ip, r4
 801d91c:	f823 cc30 	strh.w	ip, [r3, #-48]
 801d920:	f8b2 40f4 	ldrh.w	r4, [r2, #244]	@ 0xf4
 801d924:	f833 cc2c 	ldrh.w	ip, [r3, #-44]
 801d928:	4421      	add	r1, r4
 801d92a:	f823 1c2e 	strh.w	r1, [r3, #-46]
 801d92e:	f8b2 40f6 	ldrh.w	r4, [r2, #246]	@ 0xf6
 801d932:	f833 1c2a 	ldrh.w	r1, [r3, #-42]
 801d936:	44a4      	add	ip, r4
 801d938:	f823 cc2c 	strh.w	ip, [r3, #-44]
 801d93c:	f8b2 40f8 	ldrh.w	r4, [r2, #248]	@ 0xf8
 801d940:	4421      	add	r1, r4
 801d942:	f823 1c2a 	strh.w	r1, [r3, #-42]
 801d946:	f8b2 40fa 	ldrh.w	r4, [r2, #250]	@ 0xfa
 801d94a:	f833 1c28 	ldrh.w	r1, [r3, #-40]
 801d94e:	f833 cc26 	ldrh.w	ip, [r3, #-38]
 801d952:	4421      	add	r1, r4
 801d954:	f823 1c28 	strh.w	r1, [r3, #-40]
 801d958:	f8b2 40fc 	ldrh.w	r4, [r2, #252]	@ 0xfc
 801d95c:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 801d960:	44a4      	add	ip, r4
 801d962:	f823 cc26 	strh.w	ip, [r3, #-38]
 801d966:	f8b2 40fe 	ldrh.w	r4, [r2, #254]	@ 0xfe
 801d96a:	f833 cc22 	ldrh.w	ip, [r3, #-34]
 801d96e:	4421      	add	r1, r4
 801d970:	f823 1c24 	strh.w	r1, [r3, #-36]
 801d974:	f8b2 4100 	ldrh.w	r4, [r2, #256]	@ 0x100
 801d978:	f833 1c20 	ldrh.w	r1, [r3, #-32]
 801d97c:	44a4      	add	ip, r4
 801d97e:	f823 cc22 	strh.w	ip, [r3, #-34]
 801d982:	f8b2 4102 	ldrh.w	r4, [r2, #258]	@ 0x102
 801d986:	f833 cc1e 	ldrh.w	ip, [r3, #-30]
 801d98a:	4421      	add	r1, r4
 801d98c:	f823 1c20 	strh.w	r1, [r3, #-32]
 801d990:	f8b2 4104 	ldrh.w	r4, [r2, #260]	@ 0x104
 801d994:	f833 1c1c 	ldrh.w	r1, [r3, #-28]
 801d998:	44a4      	add	ip, r4
 801d99a:	f823 cc1e 	strh.w	ip, [r3, #-30]
 801d99e:	f8b2 4106 	ldrh.w	r4, [r2, #262]	@ 0x106
 801d9a2:	f833 cc1a 	ldrh.w	ip, [r3, #-26]
 801d9a6:	4421      	add	r1, r4
 801d9a8:	f823 1c1c 	strh.w	r1, [r3, #-28]
 801d9ac:	f8b2 4108 	ldrh.w	r4, [r2, #264]	@ 0x108
 801d9b0:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 801d9b4:	44a4      	add	ip, r4
 801d9b6:	f823 cc1a 	strh.w	ip, [r3, #-26]
 801d9ba:	f8b2 410a 	ldrh.w	r4, [r2, #266]	@ 0x10a
 801d9be:	f833 cc16 	ldrh.w	ip, [r3, #-22]
 801d9c2:	4421      	add	r1, r4
 801d9c4:	f823 1c18 	strh.w	r1, [r3, #-24]
 801d9c8:	f8b2 410c 	ldrh.w	r4, [r2, #268]	@ 0x10c
 801d9cc:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 801d9d0:	44a4      	add	ip, r4
 801d9d2:	f823 cc16 	strh.w	ip, [r3, #-22]
 801d9d6:	f8b2 410e 	ldrh.w	r4, [r2, #270]	@ 0x10e
 801d9da:	4421      	add	r1, r4
 801d9dc:	f823 1c14 	strh.w	r1, [r3, #-20]
 801d9e0:	f8b2 4110 	ldrh.w	r4, [r2, #272]	@ 0x110
 801d9e4:	f833 1c12 	ldrh.w	r1, [r3, #-18]
 801d9e8:	f833 cc10 	ldrh.w	ip, [r3, #-16]
 801d9ec:	4421      	add	r1, r4
 801d9ee:	f823 1c12 	strh.w	r1, [r3, #-18]
 801d9f2:	f8b2 4112 	ldrh.w	r4, [r2, #274]	@ 0x112
 801d9f6:	f833 1c0e 	ldrh.w	r1, [r3, #-14]
 801d9fa:	44a4      	add	ip, r4
 801d9fc:	f823 cc10 	strh.w	ip, [r3, #-16]
 801da00:	f8b2 4114 	ldrh.w	r4, [r2, #276]	@ 0x114
 801da04:	f833 cc0c 	ldrh.w	ip, [r3, #-12]
 801da08:	4421      	add	r1, r4
 801da0a:	f823 1c0e 	strh.w	r1, [r3, #-14]
 801da0e:	f8b2 4116 	ldrh.w	r4, [r2, #278]	@ 0x116
 801da12:	f833 1c0a 	ldrh.w	r1, [r3, #-10]
 801da16:	44a4      	add	ip, r4
 801da18:	f823 cc0c 	strh.w	ip, [r3, #-12]
 801da1c:	f8b2 4118 	ldrh.w	r4, [r2, #280]	@ 0x118
 801da20:	f833 cc08 	ldrh.w	ip, [r3, #-8]
 801da24:	4421      	add	r1, r4
 801da26:	f823 1c0a 	strh.w	r1, [r3, #-10]
 801da2a:	f8b2 411a 	ldrh.w	r4, [r2, #282]	@ 0x11a
 801da2e:	f833 1c06 	ldrh.w	r1, [r3, #-6]
 801da32:	44a4      	add	ip, r4
 801da34:	f823 cc08 	strh.w	ip, [r3, #-8]
 801da38:	f8b2 411c 	ldrh.w	r4, [r2, #284]	@ 0x11c
 801da3c:	f833 cc04 	ldrh.w	ip, [r3, #-4]
 801da40:	4421      	add	r1, r4
 801da42:	f823 1c06 	strh.w	r1, [r3, #-6]
 801da46:	f8b2 411e 	ldrh.w	r4, [r2, #286]	@ 0x11e
 801da4a:	f833 1c02 	ldrh.w	r1, [r3, #-2]
 801da4e:	44a4      	add	ip, r4
 801da50:	f823 cc04 	strh.w	ip, [r3, #-4]
 801da54:	f8b2 4120 	ldrh.w	r4, [r2, #288]	@ 0x120
 801da58:	4573      	cmp	r3, lr
 801da5a:	4421      	add	r1, r4
 801da5c:	f823 1c02 	strh.w	r1, [r3, #-2]
 801da60:	f47f ae46 	bne.w	801d6f0 <Argus_Cal_GetTotalXtalkVectorTable+0x18>
 801da64:	bd38      	pop	{r3, r4, r5, pc}
 801da66:	bf00      	nop

0801da68 <Argus_Cal_Update>:
 801da68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da6c:	b0c7      	sub	sp, #284	@ 0x11c
 801da6e:	4607      	mov	r7, r0
 801da70:	f8d0 04c0 	ldr.w	r0, [r0, #1216]	@ 0x4c0
 801da74:	9100      	str	r1, [sp, #0]
 801da76:	4688      	mov	r8, r1
 801da78:	4616      	mov	r6, r2
 801da7a:	f7fc fd83 	bl	801a584 <Argus_Dev_GetLaserType>
 801da7e:	ac06      	add	r4, sp, #24
 801da80:	4603      	mov	r3, r0
 801da82:	4632      	mov	r2, r6
 801da84:	4641      	mov	r1, r8
 801da86:	4620      	mov	r0, r4
 801da88:	f7ff fe26 	bl	801d6d8 <Argus_Cal_GetTotalXtalkVectorTable>
 801da8c:	4605      	mov	r5, r0
 801da8e:	2800      	cmp	r0, #0
 801da90:	f040 834a 	bne.w	801e128 <Argus_Cal_Update+0x6c0>
 801da94:	f8b8 0104 	ldrh.w	r0, [r8, #260]	@ 0x104
 801da98:	4639      	mov	r1, r7
 801da9a:	e039      	b.n	801db10 <Argus_Cal_Update+0xa8>
 801da9c:	f3c2 2e40 	ubfx	lr, r2, #9, #1
 801daa0:	eb0e 2292 	add.w	r2, lr, r2, lsr #10
 801daa4:	eb03 0e0c 	add.w	lr, r3, ip
 801daa8:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 801daac:	864a      	strh	r2, [r1, #50]	@ 0x32
 801daae:	f9be 2002 	ldrsh.w	r2, [lr, #2]
 801dab2:	fb00 f202 	mul.w	r2, r0, r2
 801dab6:	2a00      	cmp	r2, #0
 801dab8:	f2c0 8341 	blt.w	801e13e <Argus_Cal_Update+0x6d6>
 801dabc:	f3c2 2e40 	ubfx	lr, r2, #9, #1
 801dac0:	eb0e 2292 	add.w	r2, lr, r2, lsr #10
 801dac4:	eb03 0e0c 	add.w	lr, r3, ip
 801dac8:	f10e 0e20 	add.w	lr, lr, #32
 801dacc:	868a      	strh	r2, [r1, #52]	@ 0x34
 801dace:	f934 202e 	ldrsh.w	r2, [r4, lr, lsl #2]
 801dad2:	fb00 f202 	mul.w	r2, r0, r2
 801dad6:	2a00      	cmp	r2, #0
 801dad8:	f2c0 832a 	blt.w	801e130 <Argus_Cal_Update+0x6c8>
 801dadc:	f3c2 2e40 	ubfx	lr, r2, #9, #1
 801dae0:	eb0e 2292 	add.w	r2, lr, r2, lsr #10
 801dae4:	4463      	add	r3, ip
 801dae6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801daea:	f8a1 20b6 	strh.w	r2, [r1, #182]	@ 0xb6
 801daee:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	@ 0x82
 801daf2:	fb00 f303 	mul.w	r3, r0, r3
 801daf6:	2b00      	cmp	r3, #0
 801daf8:	db1d      	blt.n	801db36 <Argus_Cal_Update+0xce>
 801dafa:	f3c3 2240 	ubfx	r2, r3, #9, #1
 801dafe:	3501      	adds	r5, #1
 801db00:	eb02 2393 	add.w	r3, r2, r3, lsr #10
 801db04:	2d20      	cmp	r5, #32
 801db06:	f8a1 30b8 	strh.w	r3, [r1, #184]	@ 0xb8
 801db0a:	f101 0104 	add.w	r1, r1, #4
 801db0e:	d01f      	beq.n	801db50 <Argus_Cal_Update+0xe8>
 801db10:	f005 0c03 	and.w	ip, r5, #3
 801db14:	f025 0303 	bic.w	r3, r5, #3
 801db18:	eb03 020c 	add.w	r2, r3, ip
 801db1c:	f934 2022 	ldrsh.w	r2, [r4, r2, lsl #2]
 801db20:	fb00 f202 	mul.w	r2, r0, r2
 801db24:	2a00      	cmp	r2, #0
 801db26:	dab9      	bge.n	801da9c <Argus_Cal_Update+0x34>
 801db28:	4252      	negs	r2, r2
 801db2a:	f3c2 2e40 	ubfx	lr, r2, #9, #1
 801db2e:	eb0e 2292 	add.w	r2, lr, r2, lsr #10
 801db32:	4252      	negs	r2, r2
 801db34:	e7b6      	b.n	801daa4 <Argus_Cal_Update+0x3c>
 801db36:	425b      	negs	r3, r3
 801db38:	f3c3 2240 	ubfx	r2, r3, #9, #1
 801db3c:	eb02 2393 	add.w	r3, r2, r3, lsr #10
 801db40:	3501      	adds	r5, #1
 801db42:	425b      	negs	r3, r3
 801db44:	2d20      	cmp	r5, #32
 801db46:	f8a1 30b8 	strh.w	r3, [r1, #184]	@ 0xb8
 801db4a:	f101 0104 	add.w	r1, r1, #4
 801db4e:	d1df      	bne.n	801db10 <Argus_Cal_Update+0xa8>
 801db50:	f9b6 2222 	ldrsh.w	r2, [r6, #546]	@ 0x222
 801db54:	fb00 f302 	mul.w	r3, r0, r2
 801db58:	2b00      	cmp	r3, #0
 801db5a:	f2c0 82f7 	blt.w	801e14c <Argus_Cal_Update+0x6e4>
 801db5e:	f3c3 2240 	ubfx	r2, r3, #9, #1
 801db62:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 801db66:	f9b6 3224 	ldrsh.w	r3, [r6, #548]	@ 0x224
 801db6a:	fb03 f000 	mul.w	r0, r3, r0
 801db6e:	b212      	sxth	r2, r2
 801db70:	2800      	cmp	r0, #0
 801db72:	f8a7 20b2 	strh.w	r2, [r7, #178]	@ 0xb2
 801db76:	f2c0 82f0 	blt.w	801e15a <Argus_Cal_Update+0x6f2>
 801db7a:	f3c0 2340 	ubfx	r3, r0, #9, #1
 801db7e:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 801db82:	b21b      	sxth	r3, r3
 801db84:	2100      	movs	r1, #0
 801db86:	f8a7 2136 	strh.w	r2, [r7, #310]	@ 0x136
 801db8a:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
 801db8e:	2220      	movs	r2, #32
 801db90:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
 801db94:	f507 70a1 	add.w	r0, r7, #322	@ 0x142
 801db98:	f005 fe23 	bl	80237e2 <memset>
 801db9c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 801dba0:	f8a7 3162 	strh.w	r3, [r7, #354]	@ 0x162
 801dba4:	2300      	movs	r3, #0
 801dba6:	f887 3164 	strb.w	r3, [r7, #356]	@ 0x164
 801dbaa:	f8d7 04c0 	ldr.w	r0, [r7, #1216]	@ 0x4c0
 801dbae:	f7fc fce3 	bl	801a578 <Argus_Dev_GetModule>
 801dbb2:	9900      	ldr	r1, [sp, #0]
 801dbb4:	4603      	mov	r3, r0
 801dbb6:	4632      	mov	r2, r6
 801dbb8:	4620      	mov	r0, r4
 801dbba:	f001 fbc9 	bl	801f350 <Argus_Cal_GetInternalPixelRangeOffsets>
 801dbbe:	1e05      	subs	r5, r0, #0
 801dbc0:	f2c0 82b2 	blt.w	801e128 <Argus_Cal_Update+0x6c0>
 801dbc4:	f8b4 a012 	ldrh.w	sl, [r4, #18]
 801dbc8:	f8b4 e000 	ldrh.w	lr, [r4]
 801dbcc:	f8ad a004 	strh.w	sl, [sp, #4]
 801dbd0:	f8b6 a01c 	ldrh.w	sl, [r6, #28]
 801dbd4:	f8b4 c002 	ldrh.w	ip, [r4, #2]
 801dbd8:	88a0      	ldrh	r0, [r4, #4]
 801dbda:	f8b4 9006 	ldrh.w	r9, [r4, #6]
 801dbde:	8921      	ldrh	r1, [r4, #8]
 801dbe0:	8962      	ldrh	r2, [r4, #10]
 801dbe2:	89a3      	ldrh	r3, [r4, #12]
 801dbe4:	f8b4 800e 	ldrh.w	r8, [r4, #14]
 801dbe8:	f8b4 b010 	ldrh.w	fp, [r4, #16]
 801dbec:	44d6      	add	lr, sl
 801dbee:	f8a4 e000 	strh.w	lr, [r4]
 801dbf2:	f8b6 e01e 	ldrh.w	lr, [r6, #30]
 801dbf6:	44f4      	add	ip, lr
 801dbf8:	f8a4 c002 	strh.w	ip, [r4, #2]
 801dbfc:	f8b6 c020 	ldrh.w	ip, [r6, #32]
 801dc00:	4460      	add	r0, ip
 801dc02:	80a0      	strh	r0, [r4, #4]
 801dc04:	8c70      	ldrh	r0, [r6, #34]	@ 0x22
 801dc06:	4481      	add	r9, r0
 801dc08:	8cb0      	ldrh	r0, [r6, #36]	@ 0x24
 801dc0a:	f8a4 9006 	strh.w	r9, [r4, #6]
 801dc0e:	4401      	add	r1, r0
 801dc10:	8121      	strh	r1, [r4, #8]
 801dc12:	8cf1      	ldrh	r1, [r6, #38]	@ 0x26
 801dc14:	440a      	add	r2, r1
 801dc16:	8162      	strh	r2, [r4, #10]
 801dc18:	8d32      	ldrh	r2, [r6, #40]	@ 0x28
 801dc1a:	4413      	add	r3, r2
 801dc1c:	81a3      	strh	r3, [r4, #12]
 801dc1e:	8d73      	ldrh	r3, [r6, #42]	@ 0x2a
 801dc20:	9a01      	ldr	r2, [sp, #4]
 801dc22:	4498      	add	r8, r3
 801dc24:	8db3      	ldrh	r3, [r6, #44]	@ 0x2c
 801dc26:	f8a4 800e 	strh.w	r8, [r4, #14]
 801dc2a:	449b      	add	fp, r3
 801dc2c:	8df3      	ldrh	r3, [r6, #46]	@ 0x2e
 801dc2e:	f8a4 b010 	strh.w	fp, [r4, #16]
 801dc32:	4413      	add	r3, r2
 801dc34:	8263      	strh	r3, [r4, #18]
 801dc36:	8e33      	ldrh	r3, [r6, #48]	@ 0x30
 801dc38:	8aa2      	ldrh	r2, [r4, #20]
 801dc3a:	f8b4 a016 	ldrh.w	sl, [r4, #22]
 801dc3e:	f8b4 9018 	ldrh.w	r9, [r4, #24]
 801dc42:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801dc46:	f8b4 e01c 	ldrh.w	lr, [r4, #28]
 801dc4a:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
 801dc4e:	8c20      	ldrh	r0, [r4, #32]
 801dc50:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 801dc52:	f8b4 b026 	ldrh.w	fp, [r4, #38]	@ 0x26
 801dc56:	4413      	add	r3, r2
 801dc58:	82a3      	strh	r3, [r4, #20]
 801dc5a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 801dc5c:	f8ad 3004 	strh.w	r3, [sp, #4]
 801dc60:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 801dc62:	8ca2      	ldrh	r2, [r4, #36]	@ 0x24
 801dc64:	4453      	add	r3, sl
 801dc66:	82e3      	strh	r3, [r4, #22]
 801dc68:	8eb3      	ldrh	r3, [r6, #52]	@ 0x34
 801dc6a:	444b      	add	r3, r9
 801dc6c:	8323      	strh	r3, [r4, #24]
 801dc6e:	8ef3      	ldrh	r3, [r6, #54]	@ 0x36
 801dc70:	4498      	add	r8, r3
 801dc72:	8f33      	ldrh	r3, [r6, #56]	@ 0x38
 801dc74:	f8a4 801a 	strh.w	r8, [r4, #26]
 801dc78:	449e      	add	lr, r3
 801dc7a:	8f73      	ldrh	r3, [r6, #58]	@ 0x3a
 801dc7c:	f8a4 e01c 	strh.w	lr, [r4, #28]
 801dc80:	449c      	add	ip, r3
 801dc82:	8fb3      	ldrh	r3, [r6, #60]	@ 0x3c
 801dc84:	f8a4 c01e 	strh.w	ip, [r4, #30]
 801dc88:	4418      	add	r0, r3
 801dc8a:	8ff3      	ldrh	r3, [r6, #62]	@ 0x3e
 801dc8c:	8420      	strh	r0, [r4, #32]
 801dc8e:	4419      	add	r1, r3
 801dc90:	f8b6 3040 	ldrh.w	r3, [r6, #64]	@ 0x40
 801dc94:	8461      	strh	r1, [r4, #34]	@ 0x22
 801dc96:	441a      	add	r2, r3
 801dc98:	f8b6 3042 	ldrh.w	r3, [r6, #66]	@ 0x42
 801dc9c:	84a2      	strh	r2, [r4, #36]	@ 0x24
 801dc9e:	449b      	add	fp, r3
 801dca0:	f8a4 b026 	strh.w	fp, [r4, #38]	@ 0x26
 801dca4:	f8b6 3044 	ldrh.w	r3, [r6, #68]	@ 0x44
 801dca8:	9a01      	ldr	r2, [sp, #4]
 801dcaa:	f8b4 a02c 	ldrh.w	sl, [r4, #44]	@ 0x2c
 801dcae:	f8b4 902e 	ldrh.w	r9, [r4, #46]	@ 0x2e
 801dcb2:	f8b4 8030 	ldrh.w	r8, [r4, #48]	@ 0x30
 801dcb6:	f8b4 e032 	ldrh.w	lr, [r4, #50]	@ 0x32
 801dcba:	f8b4 c034 	ldrh.w	ip, [r4, #52]	@ 0x34
 801dcbe:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 801dcc0:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 801dcc2:	f8b4 b03c 	ldrh.w	fp, [r4, #60]	@ 0x3c
 801dcc6:	4413      	add	r3, r2
 801dcc8:	8523      	strh	r3, [r4, #40]	@ 0x28
 801dcca:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 801dccc:	f8b6 3046 	ldrh.w	r3, [r6, #70]	@ 0x46
 801dcd0:	4413      	add	r3, r2
 801dcd2:	8563      	strh	r3, [r4, #42]	@ 0x2a
 801dcd4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 801dcd6:	f8ad 3004 	strh.w	r3, [sp, #4]
 801dcda:	f8b6 3048 	ldrh.w	r3, [r6, #72]	@ 0x48
 801dcde:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
 801dce0:	4453      	add	r3, sl
 801dce2:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 801dce4:	f8b6 304a 	ldrh.w	r3, [r6, #74]	@ 0x4a
 801dce8:	444b      	add	r3, r9
 801dcea:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 801dcec:	f8b6 304c 	ldrh.w	r3, [r6, #76]	@ 0x4c
 801dcf0:	4498      	add	r8, r3
 801dcf2:	f8b6 304e 	ldrh.w	r3, [r6, #78]	@ 0x4e
 801dcf6:	f8a4 8030 	strh.w	r8, [r4, #48]	@ 0x30
 801dcfa:	449e      	add	lr, r3
 801dcfc:	f8b6 3050 	ldrh.w	r3, [r6, #80]	@ 0x50
 801dd00:	f8a4 e032 	strh.w	lr, [r4, #50]	@ 0x32
 801dd04:	449c      	add	ip, r3
 801dd06:	f8b6 3052 	ldrh.w	r3, [r6, #82]	@ 0x52
 801dd0a:	f8a4 c034 	strh.w	ip, [r4, #52]	@ 0x34
 801dd0e:	4418      	add	r0, r3
 801dd10:	f8b6 3054 	ldrh.w	r3, [r6, #84]	@ 0x54
 801dd14:	86e0      	strh	r0, [r4, #54]	@ 0x36
 801dd16:	4419      	add	r1, r3
 801dd18:	f8b6 3056 	ldrh.w	r3, [r6, #86]	@ 0x56
 801dd1c:	8721      	strh	r1, [r4, #56]	@ 0x38
 801dd1e:	441a      	add	r2, r3
 801dd20:	8762      	strh	r2, [r4, #58]	@ 0x3a
 801dd22:	f8b4 8054 	ldrh.w	r8, [r4, #84]	@ 0x54
 801dd26:	9a01      	ldr	r2, [sp, #4]
 801dd28:	f8b4 a042 	ldrh.w	sl, [r4, #66]	@ 0x42
 801dd2c:	f8ad 8004 	strh.w	r8, [sp, #4]
 801dd30:	f8b6 805e 	ldrh.w	r8, [r6, #94]	@ 0x5e
 801dd34:	f8b4 9044 	ldrh.w	r9, [r4, #68]	@ 0x44
 801dd38:	f8b4 e046 	ldrh.w	lr, [r4, #70]	@ 0x46
 801dd3c:	f8b4 c048 	ldrh.w	ip, [r4, #72]	@ 0x48
 801dd40:	f8b6 3058 	ldrh.w	r3, [r6, #88]	@ 0x58
 801dd44:	f8b4 004a 	ldrh.w	r0, [r4, #74]	@ 0x4a
 801dd48:	f8b4 104c 	ldrh.w	r1, [r4, #76]	@ 0x4c
 801dd4c:	44d0      	add	r8, sl
 801dd4e:	f8a4 8042 	strh.w	r8, [r4, #66]	@ 0x42
 801dd52:	f8b6 8060 	ldrh.w	r8, [r6, #96]	@ 0x60
 801dd56:	44c8      	add	r8, r9
 801dd58:	f8a4 8044 	strh.w	r8, [r4, #68]	@ 0x44
 801dd5c:	f8b6 8062 	ldrh.w	r8, [r6, #98]	@ 0x62
 801dd60:	44c6      	add	lr, r8
 801dd62:	f8a4 e046 	strh.w	lr, [r4, #70]	@ 0x46
 801dd66:	f8b6 e064 	ldrh.w	lr, [r6, #100]	@ 0x64
 801dd6a:	44f4      	add	ip, lr
 801dd6c:	f8a4 c048 	strh.w	ip, [r4, #72]	@ 0x48
 801dd70:	f8b6 c066 	ldrh.w	ip, [r6, #102]	@ 0x66
 801dd74:	449b      	add	fp, r3
 801dd76:	f8b6 305a 	ldrh.w	r3, [r6, #90]	@ 0x5a
 801dd7a:	f8a4 b03c 	strh.w	fp, [r4, #60]	@ 0x3c
 801dd7e:	4460      	add	r0, ip
 801dd80:	4413      	add	r3, r2
 801dd82:	f8a4 004a 	strh.w	r0, [r4, #74]	@ 0x4a
 801dd86:	f8b6 0068 	ldrh.w	r0, [r6, #104]	@ 0x68
 801dd8a:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 801dd8e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 801dd90:	f8b6 305c 	ldrh.w	r3, [r6, #92]	@ 0x5c
 801dd94:	f8b4 b052 	ldrh.w	fp, [r4, #82]	@ 0x52
 801dd98:	4401      	add	r1, r0
 801dd9a:	4413      	add	r3, r2
 801dd9c:	f8a4 104c 	strh.w	r1, [r4, #76]	@ 0x4c
 801dda0:	f8b4 204e 	ldrh.w	r2, [r4, #78]	@ 0x4e
 801dda4:	f8b6 106a 	ldrh.w	r1, [r6, #106]	@ 0x6a
 801dda8:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
 801ddac:	440a      	add	r2, r1
 801ddae:	f8b4 3050 	ldrh.w	r3, [r4, #80]	@ 0x50
 801ddb2:	f8a4 204e 	strh.w	r2, [r4, #78]	@ 0x4e
 801ddb6:	f8b6 206c 	ldrh.w	r2, [r6, #108]	@ 0x6c
 801ddba:	f8b4 a06a 	ldrh.w	sl, [r4, #106]	@ 0x6a
 801ddbe:	f8b4 9058 	ldrh.w	r9, [r4, #88]	@ 0x58
 801ddc2:	f8b4 805a 	ldrh.w	r8, [r4, #90]	@ 0x5a
 801ddc6:	f8b4 e05c 	ldrh.w	lr, [r4, #92]	@ 0x5c
 801ddca:	f8b4 c05e 	ldrh.w	ip, [r4, #94]	@ 0x5e
 801ddce:	f8b4 0060 	ldrh.w	r0, [r4, #96]	@ 0x60
 801ddd2:	f8b4 1062 	ldrh.w	r1, [r4, #98]	@ 0x62
 801ddd6:	4413      	add	r3, r2
 801ddd8:	9a01      	ldr	r2, [sp, #4]
 801ddda:	f8ad a004 	strh.w	sl, [sp, #4]
 801ddde:	f8b6 a074 	ldrh.w	sl, [r6, #116]	@ 0x74
 801dde2:	f8a4 3050 	strh.w	r3, [r4, #80]	@ 0x50
 801dde6:	44d1      	add	r9, sl
 801dde8:	f8a4 9058 	strh.w	r9, [r4, #88]	@ 0x58
 801ddec:	f8b6 9076 	ldrh.w	r9, [r6, #118]	@ 0x76
 801ddf0:	f8b6 306e 	ldrh.w	r3, [r6, #110]	@ 0x6e
 801ddf4:	44c8      	add	r8, r9
 801ddf6:	f8a4 805a 	strh.w	r8, [r4, #90]	@ 0x5a
 801ddfa:	f8b6 8078 	ldrh.w	r8, [r6, #120]	@ 0x78
 801ddfe:	44c6      	add	lr, r8
 801de00:	f8a4 e05c 	strh.w	lr, [r4, #92]	@ 0x5c
 801de04:	f8b6 e07a 	ldrh.w	lr, [r6, #122]	@ 0x7a
 801de08:	44f4      	add	ip, lr
 801de0a:	449b      	add	fp, r3
 801de0c:	f8a4 c05e 	strh.w	ip, [r4, #94]	@ 0x5e
 801de10:	f8b6 3070 	ldrh.w	r3, [r6, #112]	@ 0x70
 801de14:	f8b6 c07c 	ldrh.w	ip, [r6, #124]	@ 0x7c
 801de18:	f8a4 b052 	strh.w	fp, [r4, #82]	@ 0x52
 801de1c:	4413      	add	r3, r2
 801de1e:	4460      	add	r0, ip
 801de20:	f8b6 2072 	ldrh.w	r2, [r6, #114]	@ 0x72
 801de24:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 801de28:	f8a4 0060 	strh.w	r0, [r4, #96]	@ 0x60
 801de2c:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 801de30:	f8b6 007e 	ldrh.w	r0, [r6, #126]	@ 0x7e
 801de34:	f8b4 b068 	ldrh.w	fp, [r4, #104]	@ 0x68
 801de38:	4413      	add	r3, r2
 801de3a:	4401      	add	r1, r0
 801de3c:	f8b4 2064 	ldrh.w	r2, [r4, #100]	@ 0x64
 801de40:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
 801de44:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 801de48:	f8a4 1062 	strh.w	r1, [r4, #98]	@ 0x62
 801de4c:	f8b6 1080 	ldrh.w	r1, [r6, #128]	@ 0x80
 801de50:	f8b4 a06e 	ldrh.w	sl, [r4, #110]	@ 0x6e
 801de54:	f8b4 9070 	ldrh.w	r9, [r4, #112]	@ 0x70
 801de58:	f8b4 8072 	ldrh.w	r8, [r4, #114]	@ 0x72
 801de5c:	f8b4 e074 	ldrh.w	lr, [r4, #116]	@ 0x74
 801de60:	f8b4 c076 	ldrh.w	ip, [r4, #118]	@ 0x76
 801de64:	f8b4 0078 	ldrh.w	r0, [r4, #120]	@ 0x78
 801de68:	440a      	add	r2, r1
 801de6a:	f8a4 2064 	strh.w	r2, [r4, #100]	@ 0x64
 801de6e:	f8b6 2082 	ldrh.w	r2, [r6, #130]	@ 0x82
 801de72:	f8b4 107a 	ldrh.w	r1, [r4, #122]	@ 0x7a
 801de76:	4413      	add	r3, r2
 801de78:	f8a4 3066 	strh.w	r3, [r4, #102]	@ 0x66
 801de7c:	f8b6 3084 	ldrh.w	r3, [r6, #132]	@ 0x84
 801de80:	9a01      	ldr	r2, [sp, #4]
 801de82:	449b      	add	fp, r3
 801de84:	f8a4 b068 	strh.w	fp, [r4, #104]	@ 0x68
 801de88:	f8b6 b08a 	ldrh.w	fp, [r6, #138]	@ 0x8a
 801de8c:	f8b6 3086 	ldrh.w	r3, [r6, #134]	@ 0x86
 801de90:	44da      	add	sl, fp
 801de92:	f8a4 a06e 	strh.w	sl, [r4, #110]	@ 0x6e
 801de96:	f8b6 a08c 	ldrh.w	sl, [r6, #140]	@ 0x8c
 801de9a:	44d1      	add	r9, sl
 801de9c:	f8a4 9070 	strh.w	r9, [r4, #112]	@ 0x70
 801dea0:	f8b6 908e 	ldrh.w	r9, [r6, #142]	@ 0x8e
 801dea4:	44c8      	add	r8, r9
 801dea6:	f8a4 8072 	strh.w	r8, [r4, #114]	@ 0x72
 801deaa:	f8b6 8090 	ldrh.w	r8, [r6, #144]	@ 0x90
 801deae:	44c6      	add	lr, r8
 801deb0:	f8a4 e074 	strh.w	lr, [r4, #116]	@ 0x74
 801deb4:	f8b6 e092 	ldrh.w	lr, [r6, #146]	@ 0x92
 801deb8:	4413      	add	r3, r2
 801deba:	44f4      	add	ip, lr
 801debc:	f8b6 2088 	ldrh.w	r2, [r6, #136]	@ 0x88
 801dec0:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
 801dec4:	f8a4 c076 	strh.w	ip, [r4, #118]	@ 0x76
 801dec8:	f8b4 306c 	ldrh.w	r3, [r4, #108]	@ 0x6c
 801decc:	f8b6 c094 	ldrh.w	ip, [r6, #148]	@ 0x94
 801ded0:	4413      	add	r3, r2
 801ded2:	4460      	add	r0, ip
 801ded4:	f8b4 207c 	ldrh.w	r2, [r4, #124]	@ 0x7c
 801ded8:	f8a4 306c 	strh.w	r3, [r4, #108]	@ 0x6c
 801dedc:	f8b4 307e 	ldrh.w	r3, [r4, #126]	@ 0x7e
 801dee0:	f8a4 0078 	strh.w	r0, [r4, #120]	@ 0x78
 801dee4:	f8b6 0096 	ldrh.w	r0, [r6, #150]	@ 0x96
 801dee8:	4401      	add	r1, r0
 801deea:	f8a4 107a 	strh.w	r1, [r4, #122]	@ 0x7a
 801deee:	f8b6 1098 	ldrh.w	r1, [r6, #152]	@ 0x98
 801def2:	440a      	add	r2, r1
 801def4:	f8a4 207c 	strh.w	r2, [r4, #124]	@ 0x7c
 801def8:	f8b6 209a 	ldrh.w	r2, [r6, #154]	@ 0x9a
 801defc:	4413      	add	r3, r2
 801defe:	f8a4 307e 	strh.w	r3, [r4, #126]	@ 0x7e
 801df02:	f040 8111 	bne.w	801e128 <Argus_Cal_Update+0x6c0>
 801df06:	f507 72b2 	add.w	r2, r7, #356	@ 0x164
 801df0a:	462b      	mov	r3, r5
 801df0c:	f834 1013 	ldrh.w	r1, [r4, r3, lsl #1]
 801df10:	f822 1f02 	strh.w	r1, [r2, #2]!
 801df14:	3301      	adds	r3, #1
 801df16:	2b20      	cmp	r3, #32
 801df18:	d1f8      	bne.n	801df0c <Argus_Cal_Update+0x4a4>
 801df1a:	f9b7 02a0 	ldrsh.w	r0, [r7, #672]	@ 0x2a0
 801df1e:	f8a7 01a6 	strh.w	r0, [r7, #422]	@ 0x1a6
 801df22:	f507 72d3 	add.w	r2, r7, #422	@ 0x1a6
 801df26:	2300      	movs	r3, #0
 801df28:	f103 0120 	add.w	r1, r3, #32
 801df2c:	3301      	adds	r3, #1
 801df2e:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 801df32:	f822 1f02 	strh.w	r1, [r2, #2]!
 801df36:	2b20      	cmp	r3, #32
 801df38:	d1f6      	bne.n	801df28 <Argus_Cal_Update+0x4c0>
 801df3a:	f8a7 01e8 	strh.w	r0, [r7, #488]	@ 0x1e8
 801df3e:	f896 1292 	ldrb.w	r1, [r6, #658]	@ 0x292
 801df42:	a802      	add	r0, sp, #8
 801df44:	0389      	lsls	r1, r1, #14
 801df46:	f7ff fa69 	bl	801d41c <Argus_Cal_GetGainValues>
 801df4a:	f10d 0808 	add.w	r8, sp, #8
 801df4e:	46a1      	mov	r9, r4
 801df50:	9802      	ldr	r0, [sp, #8]
 801df52:	f858 3b04 	ldr.w	r3, [r8], #4
 801df56:	f5c0 3040 	rsb	r0, r0, #196608	@ 0x30000
 801df5a:	4418      	add	r0, r3
 801df5c:	f004 fd4c 	bl	80229f8 <fp_log16>
 801df60:	4544      	cmp	r4, r8
 801df62:	f849 0b04 	str.w	r0, [r9], #4
 801df66:	d1f3      	bne.n	801df50 <Argus_Cal_Update+0x4e8>
 801df68:	e9d4 9100 	ldrd	r9, r1, [r4]
 801df6c:	f8d4 800c 	ldr.w	r8, [r4, #12]
 801df70:	eba1 0208 	sub.w	r2, r1, r8
 801df74:	eba9 0308 	sub.w	r3, r9, r8
 801df78:	4692      	mov	sl, r2
 801df7a:	469e      	mov	lr, r3
 801df7c:	2b00      	cmp	r3, #0
 801df7e:	f000 80f3 	beq.w	801e168 <Argus_Cal_Update+0x700>
 801df82:	2a00      	cmp	r2, #0
 801df84:	bfb8      	it	lt
 801df86:	eba8 0201 	sublt.w	r2, r8, r1
 801df8a:	2b00      	cmp	r3, #0
 801df8c:	f2c0 816d 	blt.w	801e26a <Argus_Cal_Update+0x802>
 801df90:	4293      	cmp	r3, r2
 801df92:	4618      	mov	r0, r3
 801df94:	bf28      	it	cs
 801df96:	f44f 3180 	movcs.w	r1, #65536	@ 0x10000
 801df9a:	f080 816f 	bcs.w	801e27c <Argus_Cal_Update+0x814>
 801df9e:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 801dfa2:	0040      	lsls	r0, r0, #1
 801dfa4:	4290      	cmp	r0, r2
 801dfa6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801dfaa:	d3fa      	bcc.n	801dfa2 <Argus_Cal_Update+0x53a>
 801dfac:	2900      	cmp	r1, #0
 801dfae:	f040 8163 	bne.w	801e278 <Argus_Cal_Update+0x810>
 801dfb2:	ea9a 0f03 	teq	sl, r3
 801dfb6:	bf4c      	ite	mi
 801dfb8:	f04f 4c00 	movmi.w	ip, #2147483648	@ 0x80000000
 801dfbc:	f06f 4c00 	mvnpl.w	ip, #2147483648	@ 0x80000000
 801dfc0:	68a1      	ldr	r1, [r4, #8]
 801dfc2:	f8c7 c020 	str.w	ip, [r7, #32]
 801dfc6:	eba1 0208 	sub.w	r2, r1, r8
 801dfca:	2a00      	cmp	r2, #0
 801dfcc:	4614      	mov	r4, r2
 801dfce:	da01      	bge.n	801dfd4 <Argus_Cal_Update+0x56c>
 801dfd0:	eba8 0201 	sub.w	r2, r8, r1
 801dfd4:	2b00      	cmp	r3, #0
 801dfd6:	f2c0 8127 	blt.w	801e228 <Argus_Cal_Update+0x7c0>
 801dfda:	4293      	cmp	r3, r2
 801dfdc:	f080 820b 	bcs.w	801e3f6 <Argus_Cal_Update+0x98e>
 801dfe0:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 801dfe4:	005b      	lsls	r3, r3, #1
 801dfe6:	4293      	cmp	r3, r2
 801dfe8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801dfec:	d3fa      	bcc.n	801dfe4 <Argus_Cal_Update+0x57c>
 801dfee:	2900      	cmp	r1, #0
 801dff0:	f040 8122 	bne.w	801e238 <Argus_Cal_Update+0x7d0>
 801dff4:	ea9e 0f04 	teq	lr, r4
 801dff8:	f100 80c4 	bmi.w	801e184 <Argus_Cal_Update+0x71c>
 801dffc:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801e000:	9b00      	ldr	r3, [sp, #0]
 801e002:	6278      	str	r0, [r7, #36]	@ 0x24
 801e004:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801e008:	2b00      	cmp	r3, #0
 801e00a:	f040 80c6 	bne.w	801e19a <Argus_Cal_Update+0x732>
 801e00e:	f8c7 302e 	str.w	r3, [r7, #46]	@ 0x2e
 801e012:	4631      	mov	r1, r6
 801e014:	4638      	mov	r0, r7
 801e016:	f7fe feff 	bl	801ce18 <UpdateAPDVoltage>
 801e01a:	f9b7 e028 	ldrsh.w	lr, [r7, #40]	@ 0x28
 801e01e:	f996 3272 	ldrsb.w	r3, [r6, #626]	@ 0x272
 801e022:	f996 8273 	ldrsb.w	r8, [r6, #627]	@ 0x273
 801e026:	f896 426e 	ldrb.w	r4, [r6, #622]	@ 0x26e
 801e02a:	f896 c271 	ldrb.w	ip, [r6, #625]	@ 0x271
 801e02e:	f896 226c 	ldrb.w	r2, [r6, #620]	@ 0x26c
 801e032:	f896 126f 	ldrb.w	r1, [r6, #623]	@ 0x26f
 801e036:	f896 926d 	ldrb.w	r9, [r6, #621]	@ 0x26d
 801e03a:	f896 a270 	ldrb.w	sl, [r6, #624]	@ 0x270
 801e03e:	f8d7 04c0 	ldr.w	r0, [r7, #1216]	@ 0x4c0
 801e042:	f647 7bff 	movw	fp, #32767	@ 0x7fff
 801e046:	45de      	cmp	lr, fp
 801e048:	f1a3 031e 	sub.w	r3, r3, #30
 801e04c:	bf14      	ite	ne
 801e04e:	ea4f 2e2e 	movne.w	lr, lr, asr #8
 801e052:	46ae      	moveq	lr, r5
 801e054:	4573      	cmp	r3, lr
 801e056:	f1a8 081e 	sub.w	r8, r8, #30
 801e05a:	bfb8      	it	lt
 801e05c:	4673      	movlt	r3, lr
 801e05e:	4598      	cmp	r8, r3
 801e060:	bfa8      	it	ge
 801e062:	4698      	movge	r8, r3
 801e064:	fb08 f30c 	mul.w	r3, r8, ip
 801e068:	fb08 f404 	mul.w	r4, r8, r4
 801e06c:	eb03 1aca 	add.w	sl, r3, sl, lsl #7
 801e070:	eb04 19c9 	add.w	r9, r4, r9, lsl #7
 801e074:	02cb      	lsls	r3, r1, #11
 801e076:	02d1      	lsls	r1, r2, #11
 801e078:	fb08 330a 	mla	r3, r8, sl, r3
 801e07c:	fb08 1109 	mla	r1, r8, r9, r1
 801e080:	fb08 f203 	mul.w	r2, r8, r3
 801e084:	fb08 f101 	mul.w	r1, r8, r1
 801e088:	f102 7280 	add.w	r2, r2, #16777216	@ 0x1000000
 801e08c:	f101 7180 	add.w	r1, r1, #16777216	@ 0x1000000
 801e090:	1212      	asrs	r2, r2, #8
 801e092:	1209      	asrs	r1, r1, #8
 801e094:	f7fc f8ec 	bl	801a270 <Argus_Dev_UpdateLaserTemperatureCompensation>
 801e098:	9b00      	ldr	r3, [sp, #0]
 801e09a:	4ab5      	ldr	r2, [pc, #724]	@ (801e370 <Argus_Cal_Update+0x908>)
 801e09c:	685b      	ldr	r3, [r3, #4]
 801e09e:	08db      	lsrs	r3, r3, #3
 801e0a0:	fba2 2303 	umull	r2, r3, r2, r3
 801e0a4:	f3c3 1387 	ubfx	r3, r3, #6, #8
 801e0a8:	2b01      	cmp	r3, #1
 801e0aa:	bf98      	it	ls
 801e0ac:	2303      	movls	r3, #3
 801e0ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 801e0b2:	7e71      	ldrb	r1, [r6, #25]
 801e0b4:	2940      	cmp	r1, #64	@ 0x40
 801e0b6:	d068      	beq.n	801e18a <Argus_Cal_Update+0x722>
 801e0b8:	0288      	lsls	r0, r1, #10
 801e0ba:	f004 fc9d 	bl	80229f8 <fp_log16>
 801e0be:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
 801e0c2:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
 801e0c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 801e0ca:	f240 8176 	bls.w	801e3ba <Argus_Cal_Update+0x952>
 801e0ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801e0d2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 801e0d6:	4616      	mov	r6, r2
 801e0d8:	0052      	lsls	r2, r2, #1
 801e0da:	428a      	cmp	r2, r1
 801e0dc:	461c      	mov	r4, r3
 801e0de:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801e0e2:	d3f8      	bcc.n	801e0d6 <Argus_Cal_Update+0x66e>
 801e0e4:	2b00      	cmp	r3, #0
 801e0e6:	f040 8135 	bne.w	801e354 <Argus_Cal_Update+0x8ec>
 801e0ea:	2800      	cmp	r0, #0
 801e0ec:	bfac      	ite	ge
 801e0ee:	f06f 4800 	mvnge.w	r8, #2147483648	@ 0x80000000
 801e0f2:	f04f 4800 	movlt.w	r8, #2147483648	@ 0x80000000
 801e0f6:	1e7e      	subs	r6, r7, #1
 801e0f8:	f107 091f 	add.w	r9, r7, #31
 801e0fc:	2400      	movs	r4, #0
 801e0fe:	4620      	mov	r0, r4
 801e100:	f004 fbc8 	bl	8022894 <fp_exp16>
 801e104:	f3c0 2340 	ubfx	r3, r0, #9, #1
 801e108:	eb03 2090 	add.w	r0, r3, r0, lsr #10
 801e10c:	2801      	cmp	r0, #1
 801e10e:	bf38      	it	cc
 801e110:	2001      	movcc	r0, #1
 801e112:	28ff      	cmp	r0, #255	@ 0xff
 801e114:	bf28      	it	cs
 801e116:	20ff      	movcs	r0, #255	@ 0xff
 801e118:	f806 0f01 	strb.w	r0, [r6, #1]!
 801e11c:	45b1      	cmp	r9, r6
 801e11e:	4444      	add	r4, r8
 801e120:	d1ed      	bne.n	801e0fe <Argus_Cal_Update+0x696>
 801e122:	2300      	movs	r3, #0
 801e124:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801e128:	4628      	mov	r0, r5
 801e12a:	b047      	add	sp, #284	@ 0x11c
 801e12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e130:	4252      	negs	r2, r2
 801e132:	f3c2 2e40 	ubfx	lr, r2, #9, #1
 801e136:	eb0e 2292 	add.w	r2, lr, r2, lsr #10
 801e13a:	4252      	negs	r2, r2
 801e13c:	e4d2      	b.n	801dae4 <Argus_Cal_Update+0x7c>
 801e13e:	4252      	negs	r2, r2
 801e140:	f3c2 2e40 	ubfx	lr, r2, #9, #1
 801e144:	eb0e 2292 	add.w	r2, lr, r2, lsr #10
 801e148:	4252      	negs	r2, r2
 801e14a:	e4bb      	b.n	801dac4 <Argus_Cal_Update+0x5c>
 801e14c:	425b      	negs	r3, r3
 801e14e:	f3c3 2240 	ubfx	r2, r3, #9, #1
 801e152:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 801e156:	4252      	negs	r2, r2
 801e158:	e505      	b.n	801db66 <Argus_Cal_Update+0xfe>
 801e15a:	4240      	negs	r0, r0
 801e15c:	f3c0 2340 	ubfx	r3, r0, #9, #1
 801e160:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 801e164:	425b      	negs	r3, r3
 801e166:	e50c      	b.n	801db82 <Argus_Cal_Update+0x11a>
 801e168:	68a3      	ldr	r3, [r4, #8]
 801e16a:	2a00      	cmp	r2, #0
 801e16c:	eba3 0808 	sub.w	r8, r3, r8
 801e170:	bfb4      	ite	lt
 801e172:	f04f 4300 	movlt.w	r3, #2147483648	@ 0x80000000
 801e176:	f06f 4300 	mvnge.w	r3, #2147483648	@ 0x80000000
 801e17a:	f1b8 0f00 	cmp.w	r8, #0
 801e17e:	623b      	str	r3, [r7, #32]
 801e180:	f6bf af3c 	bge.w	801dffc <Argus_Cal_Update+0x594>
 801e184:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 801e188:	e73a      	b.n	801e000 <Argus_Cal_Update+0x598>
 801e18a:	2220      	movs	r2, #32
 801e18c:	4638      	mov	r0, r7
 801e18e:	f005 fb28 	bl	80237e2 <memset>
 801e192:	2300      	movs	r3, #0
 801e194:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801e198:	e7c6      	b.n	801e128 <Argus_Cal_Update+0x6c0>
 801e19a:	9a00      	ldr	r2, [sp, #0]
 801e19c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e1a0:	f8d3 10b8 	ldr.w	r1, [r3, #184]	@ 0xb8
 801e1a4:	4b73      	ldr	r3, [pc, #460]	@ (801e374 <Argus_Cal_Update+0x90c>)
 801e1a6:	2900      	cmp	r1, #0
 801e1a8:	468c      	mov	ip, r1
 801e1aa:	bfb8      	it	lt
 801e1ac:	4249      	neglt	r1, r1
 801e1ae:	4299      	cmp	r1, r3
 801e1b0:	f240 8131 	bls.w	801e416 <Argus_Cal_Update+0x9ae>
 801e1b4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801e1b8:	461c      	mov	r4, r3
 801e1ba:	005b      	lsls	r3, r3, #1
 801e1bc:	428b      	cmp	r3, r1
 801e1be:	4610      	mov	r0, r2
 801e1c0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801e1c4:	d3f8      	bcc.n	801e1b8 <Argus_Cal_Update+0x750>
 801e1c6:	2a00      	cmp	r2, #0
 801e1c8:	f040 8095 	bne.w	801e2f6 <Argus_Cal_Update+0x88e>
 801e1cc:	f1bc 0f00 	cmp.w	ip, #0
 801e1d0:	f2c0 8155 	blt.w	801e47e <Argus_Cal_Update+0xa16>
 801e1d4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801e1d8:	4618      	mov	r0, r3
 801e1da:	469c      	mov	ip, r3
 801e1dc:	f8b6 2280 	ldrh.w	r2, [r6, #640]	@ 0x280
 801e1e0:	f8b6 4282 	ldrh.w	r4, [r6, #642]	@ 0x282
 801e1e4:	fba2 2303 	umull	r2, r3, r2, r3
 801e1e8:	f3c2 33c0 	ubfx	r3, r2, #15, #1
 801e1ec:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801e1f0:	f1bc 0f00 	cmp.w	ip, #0
 801e1f4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801e1f6:	4623      	mov	r3, r4
 801e1f8:	f280 812e 	bge.w	801e458 <Argus_Cal_Update+0x9f0>
 801e1fc:	4240      	negs	r0, r0
 801e1fe:	4298      	cmp	r0, r3
 801e200:	f080 8115 	bcs.w	801e42e <Argus_Cal_Update+0x9c6>
 801e204:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801e208:	0040      	lsls	r0, r0, #1
 801e20a:	4298      	cmp	r0, r3
 801e20c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801e210:	d3fa      	bcc.n	801e208 <Argus_Cal_Update+0x7a0>
 801e212:	2a00      	cmp	r2, #0
 801e214:	f040 80d8 	bne.w	801e3c8 <Argus_Cal_Update+0x960>
 801e218:	ea84 030c 	eor.w	r3, r4, ip
 801e21c:	43db      	mvns	r3, r3
 801e21e:	0fdb      	lsrs	r3, r3, #31
 801e220:	425b      	negs	r3, r3
 801e222:	b29b      	uxth	r3, r3
 801e224:	863b      	strh	r3, [r7, #48]	@ 0x30
 801e226:	e6f4      	b.n	801e012 <Argus_Cal_Update+0x5aa>
 801e228:	eba8 0309 	sub.w	r3, r8, r9
 801e22c:	4293      	cmp	r3, r2
 801e22e:	bf28      	it	cs
 801e230:	f44f 3180 	movcs.w	r1, #65536	@ 0x10000
 801e234:	f4ff aed4 	bcc.w	801dfe0 <Argus_Cal_Update+0x578>
 801e238:	2b00      	cmp	r3, #0
 801e23a:	db3b      	blt.n	801e2b4 <Argus_Cal_Update+0x84c>
 801e23c:	4610      	mov	r0, r2
 801e23e:	b152      	cbz	r2, 801e256 <Argus_Cal_Update+0x7ee>
 801e240:	2000      	movs	r0, #0
 801e242:	e000      	b.n	801e246 <Argus_Cal_Update+0x7de>
 801e244:	b13a      	cbz	r2, 801e256 <Argus_Cal_Update+0x7ee>
 801e246:	4293      	cmp	r3, r2
 801e248:	bf9c      	itt	ls
 801e24a:	1ad2      	subls	r2, r2, r3
 801e24c:	4308      	orrls	r0, r1
 801e24e:	0849      	lsrs	r1, r1, #1
 801e250:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801e254:	d1f6      	bne.n	801e244 <Argus_Cal_Update+0x7dc>
 801e256:	4293      	cmp	r3, r2
 801e258:	d800      	bhi.n	801e25c <Argus_Cal_Update+0x7f4>
 801e25a:	3001      	adds	r0, #1
 801e25c:	ea9e 0f04 	teq	lr, r4
 801e260:	d436      	bmi.n	801e2d0 <Argus_Cal_Update+0x868>
 801e262:	2800      	cmp	r0, #0
 801e264:	f6bf aecc 	bge.w	801e000 <Argus_Cal_Update+0x598>
 801e268:	e6c8      	b.n	801dffc <Argus_Cal_Update+0x594>
 801e26a:	eba8 0009 	sub.w	r0, r8, r9
 801e26e:	4290      	cmp	r0, r2
 801e270:	f4ff ae95 	bcc.w	801df9e <Argus_Cal_Update+0x536>
 801e274:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 801e278:	2800      	cmp	r0, #0
 801e27a:	db2b      	blt.n	801e2d4 <Argus_Cal_Update+0x86c>
 801e27c:	4694      	mov	ip, r2
 801e27e:	b162      	cbz	r2, 801e29a <Argus_Cal_Update+0x832>
 801e280:	f04f 0c00 	mov.w	ip, #0
 801e284:	e000      	b.n	801e288 <Argus_Cal_Update+0x820>
 801e286:	b142      	cbz	r2, 801e29a <Argus_Cal_Update+0x832>
 801e288:	4290      	cmp	r0, r2
 801e28a:	bf9c      	itt	ls
 801e28c:	1a12      	subls	r2, r2, r0
 801e28e:	ea4c 0c01 	orrls.w	ip, ip, r1
 801e292:	0849      	lsrs	r1, r1, #1
 801e294:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801e298:	d1f5      	bne.n	801e286 <Argus_Cal_Update+0x81e>
 801e29a:	4282      	cmp	r2, r0
 801e29c:	d301      	bcc.n	801e2a2 <Argus_Cal_Update+0x83a>
 801e29e:	f10c 0c01 	add.w	ip, ip, #1
 801e2a2:	ea9a 0f03 	teq	sl, r3
 801e2a6:	d423      	bmi.n	801e2f0 <Argus_Cal_Update+0x888>
 801e2a8:	f1bc 0f00 	cmp.w	ip, #0
 801e2ac:	bfb8      	it	lt
 801e2ae:	f06f 4c00 	mvnlt.w	ip, #2147483648	@ 0x80000000
 801e2b2:	e685      	b.n	801dfc0 <Argus_Cal_Update+0x558>
 801e2b4:	4293      	cmp	r3, r2
 801e2b6:	d977      	bls.n	801e3a8 <Argus_Cal_Update+0x940>
 801e2b8:	0849      	lsrs	r1, r1, #1
 801e2ba:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801e2be:	f000 80d0 	beq.w	801e462 <Argus_Cal_Update+0x9fa>
 801e2c2:	2a00      	cmp	r2, #0
 801e2c4:	d1bc      	bne.n	801e240 <Argus_Cal_Update+0x7d8>
 801e2c6:	ea9e 0f04 	teq	lr, r4
 801e2ca:	4610      	mov	r0, r2
 801e2cc:	f57f ae98 	bpl.w	801e000 <Argus_Cal_Update+0x598>
 801e2d0:	4240      	negs	r0, r0
 801e2d2:	e695      	b.n	801e000 <Argus_Cal_Update+0x598>
 801e2d4:	4282      	cmp	r2, r0
 801e2d6:	d265      	bcs.n	801e3a4 <Argus_Cal_Update+0x93c>
 801e2d8:	0849      	lsrs	r1, r1, #1
 801e2da:	ea4f 0050 	mov.w	r0, r0, lsr #1
 801e2de:	f000 80c2 	beq.w	801e466 <Argus_Cal_Update+0x9fe>
 801e2e2:	2a00      	cmp	r2, #0
 801e2e4:	d1cc      	bne.n	801e280 <Argus_Cal_Update+0x818>
 801e2e6:	ea9a 0f03 	teq	sl, r3
 801e2ea:	4694      	mov	ip, r2
 801e2ec:	f57f ae68 	bpl.w	801dfc0 <Argus_Cal_Update+0x558>
 801e2f0:	f1cc 0c00 	rsb	ip, ip, #0
 801e2f4:	e664      	b.n	801dfc0 <Argus_Cal_Update+0x558>
 801e2f6:	2b00      	cmp	r3, #0
 801e2f8:	da08      	bge.n	801e30c <Argus_Cal_Update+0x8a4>
 801e2fa:	428b      	cmp	r3, r1
 801e2fc:	f000 8084 	beq.w	801e408 <Argus_Cal_Update+0x9a0>
 801e300:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 801e304:	f024 4300 	bic.w	r3, r4, #2147483648	@ 0x80000000
 801e308:	f000 80af 	beq.w	801e46a <Argus_Cal_Update+0xa02>
 801e30c:	2000      	movs	r0, #0
 801e30e:	e000      	b.n	801e312 <Argus_Cal_Update+0x8aa>
 801e310:	b151      	cbz	r1, 801e328 <Argus_Cal_Update+0x8c0>
 801e312:	4299      	cmp	r1, r3
 801e314:	bf24      	itt	cs
 801e316:	1ac9      	subcs	r1, r1, r3
 801e318:	4310      	orrcs	r0, r2
 801e31a:	0852      	lsrs	r2, r2, #1
 801e31c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801e320:	d1f6      	bne.n	801e310 <Argus_Cal_Update+0x8a8>
 801e322:	4299      	cmp	r1, r3
 801e324:	d300      	bcc.n	801e328 <Argus_Cal_Update+0x8c0>
 801e326:	3001      	adds	r0, #1
 801e328:	f1bc 0f00 	cmp.w	ip, #0
 801e32c:	db67      	blt.n	801e3fe <Argus_Cal_Update+0x996>
 801e32e:	2800      	cmp	r0, #0
 801e330:	4684      	mov	ip, r0
 801e332:	db6b      	blt.n	801e40c <Argus_Cal_Update+0x9a4>
 801e334:	f8b6 3280 	ldrh.w	r3, [r6, #640]	@ 0x280
 801e338:	f8b6 4282 	ldrh.w	r4, [r6, #642]	@ 0x282
 801e33c:	fba3 3200 	umull	r3, r2, r3, r0
 801e340:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 801e344:	eb02 4313 	add.w	r3, r2, r3, lsr #16
 801e348:	2800      	cmp	r0, #0
 801e34a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801e34c:	d17e      	bne.n	801e44c <Argus_Cal_Update+0x9e4>
 801e34e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801e352:	e767      	b.n	801e224 <Argus_Cal_Update+0x7bc>
 801e354:	2a00      	cmp	r2, #0
 801e356:	da07      	bge.n	801e368 <Argus_Cal_Update+0x900>
 801e358:	428a      	cmp	r2, r1
 801e35a:	d053      	beq.n	801e404 <Argus_Cal_Update+0x99c>
 801e35c:	f034 4300 	bics.w	r3, r4, #2147483648	@ 0x80000000
 801e360:	f026 4200 	bic.w	r2, r6, #2147483648	@ 0x80000000
 801e364:	f000 8083 	beq.w	801e46e <Argus_Cal_Update+0xa06>
 801e368:	f04f 0800 	mov.w	r8, #0
 801e36c:	e005      	b.n	801e37a <Argus_Cal_Update+0x912>
 801e36e:	bf00      	nop
 801e370:	192add01 	.word	0x192add01
 801e374:	002dc6c0 	.word	0x002dc6c0
 801e378:	b161      	cbz	r1, 801e394 <Argus_Cal_Update+0x92c>
 801e37a:	4291      	cmp	r1, r2
 801e37c:	bf24      	itt	cs
 801e37e:	1a89      	subcs	r1, r1, r2
 801e380:	ea48 0803 	orrcs.w	r8, r8, r3
 801e384:	085b      	lsrs	r3, r3, #1
 801e386:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801e38a:	d1f5      	bne.n	801e378 <Argus_Cal_Update+0x910>
 801e38c:	4291      	cmp	r1, r2
 801e38e:	d301      	bcc.n	801e394 <Argus_Cal_Update+0x92c>
 801e390:	f108 0801 	add.w	r8, r8, #1
 801e394:	2800      	cmp	r0, #0
 801e396:	db0d      	blt.n	801e3b4 <Argus_Cal_Update+0x94c>
 801e398:	f1b8 0f00 	cmp.w	r8, #0
 801e39c:	bfb8      	it	lt
 801e39e:	f06f 4800 	mvnlt.w	r8, #2147483648	@ 0x80000000
 801e3a2:	e6a8      	b.n	801e0f6 <Argus_Cal_Update+0x68e>
 801e3a4:	468c      	mov	ip, r1
 801e3a6:	e77c      	b.n	801e2a2 <Argus_Cal_Update+0x83a>
 801e3a8:	4608      	mov	r0, r1
 801e3aa:	e757      	b.n	801e25c <Argus_Cal_Update+0x7f4>
 801e3ac:	2800      	cmp	r0, #0
 801e3ae:	4688      	mov	r8, r1
 801e3b0:	f6bf aea1 	bge.w	801e0f6 <Argus_Cal_Update+0x68e>
 801e3b4:	f1c8 0800 	rsb	r8, r8, #0
 801e3b8:	e69d      	b.n	801e0f6 <Argus_Cal_Update+0x68e>
 801e3ba:	2900      	cmp	r1, #0
 801e3bc:	d0f6      	beq.n	801e3ac <Argus_Cal_Update+0x944>
 801e3be:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 801e3c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801e3c6:	e7cf      	b.n	801e368 <Argus_Cal_Update+0x900>
 801e3c8:	2b00      	cmp	r3, #0
 801e3ca:	d052      	beq.n	801e472 <Argus_Cal_Update+0xa0a>
 801e3cc:	2100      	movs	r1, #0
 801e3ce:	e000      	b.n	801e3d2 <Argus_Cal_Update+0x96a>
 801e3d0:	b153      	cbz	r3, 801e3e8 <Argus_Cal_Update+0x980>
 801e3d2:	4283      	cmp	r3, r0
 801e3d4:	bf24      	itt	cs
 801e3d6:	1a1b      	subcs	r3, r3, r0
 801e3d8:	4311      	orrcs	r1, r2
 801e3da:	0852      	lsrs	r2, r2, #1
 801e3dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801e3e0:	d1f6      	bne.n	801e3d0 <Argus_Cal_Update+0x968>
 801e3e2:	4283      	cmp	r3, r0
 801e3e4:	bf28      	it	cs
 801e3e6:	3101      	addcs	r1, #1
 801e3e8:	ea94 0f0c 	teq	r4, ip
 801e3ec:	d42b      	bmi.n	801e446 <Argus_Cal_Update+0x9de>
 801e3ee:	2900      	cmp	r1, #0
 801e3f0:	dbad      	blt.n	801e34e <Argus_Cal_Update+0x8e6>
 801e3f2:	b28b      	uxth	r3, r1
 801e3f4:	e716      	b.n	801e224 <Argus_Cal_Update+0x7bc>
 801e3f6:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 801e3fa:	e71f      	b.n	801e23c <Argus_Cal_Update+0x7d4>
 801e3fc:	4608      	mov	r0, r1
 801e3fe:	4240      	negs	r0, r0
 801e400:	4684      	mov	ip, r0
 801e402:	e797      	b.n	801e334 <Argus_Cal_Update+0x8cc>
 801e404:	4698      	mov	r8, r3
 801e406:	e7c5      	b.n	801e394 <Argus_Cal_Update+0x92c>
 801e408:	4610      	mov	r0, r2
 801e40a:	e78d      	b.n	801e328 <Argus_Cal_Update+0x8c0>
 801e40c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801e410:	4618      	mov	r0, r3
 801e412:	469c      	mov	ip, r3
 801e414:	e6e2      	b.n	801e1dc <Argus_Cal_Update+0x774>
 801e416:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801e41a:	2900      	cmp	r1, #0
 801e41c:	f47f af76 	bne.w	801e30c <Argus_Cal_Update+0x8a4>
 801e420:	ea9c 0f03 	teq	ip, r3
 801e424:	d4ea      	bmi.n	801e3fc <Argus_Cal_Update+0x994>
 801e426:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 801e428:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801e42c:	e6fa      	b.n	801e224 <Argus_Cal_Update+0x7bc>
 801e42e:	2800      	cmp	r0, #0
 801e430:	bfa8      	it	ge
 801e432:	f44f 3280 	movge.w	r2, #65536	@ 0x10000
 801e436:	da03      	bge.n	801e440 <Argus_Cal_Update+0x9d8>
 801e438:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 801e43c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 801e440:	2b00      	cmp	r3, #0
 801e442:	d1c3      	bne.n	801e3cc <Argus_Cal_Update+0x964>
 801e444:	4619      	mov	r1, r3
 801e446:	424b      	negs	r3, r1
 801e448:	b29b      	uxth	r3, r3
 801e44a:	e6eb      	b.n	801e224 <Argus_Cal_Update+0x7bc>
 801e44c:	4623      	mov	r3, r4
 801e44e:	f6ff aed5 	blt.w	801e1fc <Argus_Cal_Update+0x794>
 801e452:	4284      	cmp	r4, r0
 801e454:	f63f aed6 	bhi.w	801e204 <Argus_Cal_Update+0x79c>
 801e458:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801e45c:	2b00      	cmp	r3, #0
 801e45e:	d1b5      	bne.n	801e3cc <Argus_Cal_Update+0x964>
 801e460:	e6e0      	b.n	801e224 <Argus_Cal_Update+0x7bc>
 801e462:	4608      	mov	r0, r1
 801e464:	e6f7      	b.n	801e256 <Argus_Cal_Update+0x7ee>
 801e466:	468c      	mov	ip, r1
 801e468:	e717      	b.n	801e29a <Argus_Cal_Update+0x832>
 801e46a:	4610      	mov	r0, r2
 801e46c:	e759      	b.n	801e322 <Argus_Cal_Update+0x8ba>
 801e46e:	4698      	mov	r8, r3
 801e470:	e78c      	b.n	801e38c <Argus_Cal_Update+0x924>
 801e472:	f1bc 0f00 	cmp.w	ip, #0
 801e476:	f6bf aed5 	bge.w	801e224 <Argus_Cal_Update+0x7bc>
 801e47a:	4619      	mov	r1, r3
 801e47c:	e7e3      	b.n	801e446 <Argus_Cal_Update+0x9de>
 801e47e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801e482:	4618      	mov	r0, r3
 801e484:	469c      	mov	ip, r3
 801e486:	e6a9      	b.n	801e1dc <Argus_Cal_Update+0x774>

0801e488 <Argus_Cal_ApplyFrequencyTemperatureCompensation>:
 801e488:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	@ 0x28
 801e48c:	b530      	push	{r4, r5, lr}
 801e48e:	f647 74ff 	movw	r4, #32767	@ 0x7fff
 801e492:	42a3      	cmp	r3, r4
 801e494:	d05c      	beq.n	801e550 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0xc8>
 801e496:	f890 421c 	ldrb.w	r4, [r0, #540]	@ 0x21c
 801e49a:	2c00      	cmp	r4, #0
 801e49c:	d058      	beq.n	801e550 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0xc8>
 801e49e:	f8d0 54c0 	ldr.w	r5, [r0, #1216]	@ 0x4c0
 801e4a2:	68c8      	ldr	r0, [r1, #12]
 801e4a4:	f010 0f02 	tst.w	r0, #2
 801e4a8:	d138      	bne.n	801e51c <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x94>
 801e4aa:	f8d5 011c 	ldr.w	r0, [r5, #284]	@ 0x11c
 801e4ae:	f8b0 0079 	ldrh.w	r0, [r0, #121]	@ 0x79
 801e4b2:	fb14 f303 	smulbb	r3, r4, r3
 801e4b6:	ba40      	rev16	r0, r0
 801e4b8:	2b00      	cmp	r3, #0
 801e4ba:	f3c0 104a 	ubfx	r0, r0, #5, #11
 801e4be:	db40      	blt.n	801e542 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0xba>
 801e4c0:	f3c3 2440 	ubfx	r4, r3, #9, #1
 801e4c4:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 801e4c8:	f991 c018 	ldrsb.w	ip, [r1, #24]
 801e4cc:	f5c4 3480 	rsb	r4, r4, #65536	@ 0x10000
 801e4d0:	4484      	add	ip, r0
 801e4d2:	fb00 f404 	mul.w	r4, r0, r4
 801e4d6:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 801e4da:	2c00      	cmp	r4, #0
 801e4dc:	d057      	beq.n	801e58e <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x106>
 801e4de:	ea8c 70ec 	eor.w	r0, ip, ip, asr #31
 801e4e2:	eba0 70ec 	sub.w	r0, r0, ip, asr #31
 801e4e6:	4284      	cmp	r4, r0
 801e4e8:	4621      	mov	r1, r4
 801e4ea:	d266      	bcs.n	801e5ba <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x132>
 801e4ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801e4f0:	460d      	mov	r5, r1
 801e4f2:	0049      	lsls	r1, r1, #1
 801e4f4:	4281      	cmp	r1, r0
 801e4f6:	469e      	mov	lr, r3
 801e4f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801e4fc:	d3f8      	bcc.n	801e4f0 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x68>
 801e4fe:	bb4b      	cbnz	r3, 801e554 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0xcc>
 801e500:	ea9c 0f04 	teq	ip, r4
 801e504:	d446      	bmi.n	801e594 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x10c>
 801e506:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801e50a:	fba2 2303 	umull	r2, r3, r2, r3
 801e50e:	0c11      	lsrs	r1, r2, #16
 801e510:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 801e514:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801e518:	4408      	add	r0, r1
 801e51a:	bd30      	pop	{r4, r5, pc}
 801e51c:	f8d5 511c 	ldr.w	r5, [r5, #284]	@ 0x11c
 801e520:	f895 c0a8 	ldrb.w	ip, [r5, #168]	@ 0xa8
 801e524:	0740      	lsls	r0, r0, #29
 801e526:	bf4c      	ite	mi
 801e528:	eb05 054c 	addmi.w	r5, r5, ip, lsl #1
 801e52c:	f10c 0c57 	addpl.w	ip, ip, #87	@ 0x57
 801e530:	fb14 f303 	smulbb	r3, r4, r3
 801e534:	bf4c      	ite	mi
 801e536:	f8b5 00b2 	ldrhmi.w	r0, [r5, #178]	@ 0xb2
 801e53a:	f835 001c 	ldrhpl.w	r0, [r5, ip, lsl #1]
 801e53e:	2b00      	cmp	r3, #0
 801e540:	dabe      	bge.n	801e4c0 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x38>
 801e542:	425b      	negs	r3, r3
 801e544:	f3c3 2440 	ubfx	r4, r3, #9, #1
 801e548:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 801e54c:	4264      	negs	r4, r4
 801e54e:	e7bb      	b.n	801e4c8 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x40>
 801e550:	4610      	mov	r0, r2
 801e552:	bd30      	pop	{r4, r5, pc}
 801e554:	2900      	cmp	r1, #0
 801e556:	da1f      	bge.n	801e598 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x110>
 801e558:	4281      	cmp	r1, r0
 801e55a:	d02c      	beq.n	801e5b6 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x12e>
 801e55c:	f03e 4300 	bics.w	r3, lr, #2147483648	@ 0x80000000
 801e560:	4629      	mov	r1, r5
 801e562:	d119      	bne.n	801e598 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x110>
 801e564:	469e      	mov	lr, r3
 801e566:	4281      	cmp	r1, r0
 801e568:	d801      	bhi.n	801e56e <Argus_Cal_ApplyFrequencyTemperatureCompensation+0xe6>
 801e56a:	f10e 0e01 	add.w	lr, lr, #1
 801e56e:	ea9c 0f04 	teq	ip, r4
 801e572:	d42a      	bmi.n	801e5ca <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x142>
 801e574:	f1be 0f00 	cmp.w	lr, #0
 801e578:	dbc5      	blt.n	801e506 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x7e>
 801e57a:	fba2 e20e 	umull	lr, r2, r2, lr
 801e57e:	ea4f 401e 	mov.w	r0, lr, lsr #16
 801e582:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801e586:	f3ce 3ec0 	ubfx	lr, lr, #15, #1
 801e58a:	4470      	add	r0, lr
 801e58c:	bd30      	pop	{r4, r5, pc}
 801e58e:	f1bc 0f00 	cmp.w	ip, #0
 801e592:	dab8      	bge.n	801e506 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x7e>
 801e594:	03d0      	lsls	r0, r2, #15
 801e596:	bd30      	pop	{r4, r5, pc}
 801e598:	f04f 0e00 	mov.w	lr, #0
 801e59c:	e001      	b.n	801e5a2 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x11a>
 801e59e:	2800      	cmp	r0, #0
 801e5a0:	d0e5      	beq.n	801e56e <Argus_Cal_ApplyFrequencyTemperatureCompensation+0xe6>
 801e5a2:	4288      	cmp	r0, r1
 801e5a4:	bf24      	itt	cs
 801e5a6:	1a40      	subcs	r0, r0, r1
 801e5a8:	ea4e 0e03 	orrcs.w	lr, lr, r3
 801e5ac:	085b      	lsrs	r3, r3, #1
 801e5ae:	ea4f 0040 	mov.w	r0, r0, lsl #1
 801e5b2:	d1f4      	bne.n	801e59e <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x116>
 801e5b4:	e7d7      	b.n	801e566 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0xde>
 801e5b6:	469e      	mov	lr, r3
 801e5b8:	e7d9      	b.n	801e56e <Argus_Cal_ApplyFrequencyTemperatureCompensation+0xe6>
 801e5ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801e5be:	2800      	cmp	r0, #0
 801e5c0:	d1ea      	bne.n	801e598 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x110>
 801e5c2:	ea9c 0f04 	teq	ip, r4
 801e5c6:	d5a8      	bpl.n	801e51a <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x92>
 801e5c8:	4686      	mov	lr, r0
 801e5ca:	f1ce 0300 	rsb	r3, lr, #0
 801e5ce:	fba3 3202 	umull	r3, r2, r3, r2
 801e5d2:	0c18      	lsrs	r0, r3, #16
 801e5d4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801e5d8:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 801e5dc:	4418      	add	r0, r3
 801e5de:	bd30      	pop	{r4, r5, pc}

0801e5e0 <Argus_Cal_GetGlobalRangeOffset>:
 801e5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e5e2:	f9b0 7028 	ldrsh.w	r7, [r0, #40]	@ 0x28
 801e5e6:	f9b0 54ac 	ldrsh.w	r5, [r0, #1196]	@ 0x4ac
 801e5ea:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801e5ee:	429f      	cmp	r7, r3
 801e5f0:	4604      	mov	r4, r0
 801e5f2:	460e      	mov	r6, r1
 801e5f4:	d05d      	beq.n	801e6b2 <Argus_Cal_GetGlobalRangeOffset+0xd2>
 801e5f6:	f3c1 3142 	ubfx	r1, r1, #13, #3
 801e5fa:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801e5fe:	2f00      	cmp	r7, #0
 801e600:	bfc8      	it	gt
 801e602:	3101      	addgt	r1, #1
 801e604:	f991 320c 	ldrsb.w	r3, [r1, #524]	@ 0x20c
 801e608:	fb13 f307 	smulbb	r3, r3, r7
 801e60c:	2b00      	cmp	r3, #0
 801e60e:	ea4f 3796 	mov.w	r7, r6, lsr #14
 801e612:	da2f      	bge.n	801e674 <Argus_Cal_GetGlobalRangeOffset+0x94>
 801e614:	425b      	negs	r3, r3
 801e616:	f3c3 2100 	ubfx	r1, r3, #8, #1
 801e61a:	eb01 2353 	add.w	r3, r1, r3, lsr #9
 801e61e:	1aed      	subs	r5, r5, r3
 801e620:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801e624:	429a      	cmp	r2, r3
 801e626:	d01e      	beq.n	801e666 <Argus_Cal_GetGlobalRangeOffset+0x86>
 801e628:	f8b4 0490 	ldrh.w	r0, [r4, #1168]	@ 0x490
 801e62c:	1a82      	subs	r2, r0, r2
 801e62e:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
 801e630:	fb02 f000 	mul.w	r0, r2, r0
 801e634:	1100      	asrs	r0, r0, #4
 801e636:	f004 f92d 	bl	8022894 <fp_exp16>
 801e63a:	f9b4 3498 	ldrsh.w	r3, [r4, #1176]	@ 0x498
 801e63e:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 801e642:	bf28      	it	cs
 801e644:	f44f 3000 	movcs.w	r0, #131072	@ 0x20000
 801e648:	2b00      	cmp	r3, #0
 801e64a:	db25      	blt.n	801e698 <Argus_Cal_GetGlobalRangeOffset+0xb8>
 801e64c:	17d9      	asrs	r1, r3, #31
 801e64e:	fba3 3200 	umull	r3, r2, r3, r0
 801e652:	fb00 2001 	mla	r0, r0, r1, r2
 801e656:	0c1a      	lsrs	r2, r3, #16
 801e658:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 801e65c:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 801e660:	4413      	add	r3, r2
 801e662:	fa05 f583 	sxtah	r5, r5, r3
 801e666:	04b3      	lsls	r3, r6, #18
 801e668:	d50a      	bpl.n	801e680 <Argus_Cal_GetGlobalRangeOffset+0xa0>
 801e66a:	f9b4 02a4 	ldrsh.w	r0, [r4, #676]	@ 0x2a4
 801e66e:	4428      	add	r0, r5
 801e670:	01c0      	lsls	r0, r0, #7
 801e672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e674:	f3c3 2100 	ubfx	r1, r3, #8, #1
 801e678:	eb01 2353 	add.w	r3, r1, r3, lsr #9
 801e67c:	441d      	add	r5, r3
 801e67e:	e7cf      	b.n	801e620 <Argus_Cal_GetGlobalRangeOffset+0x40>
 801e680:	f007 0703 	and.w	r7, r7, #3
 801e684:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 801e688:	f9b4 32a2 	ldrsh.w	r3, [r4, #674]	@ 0x2a2
 801e68c:	f9b7 04a4 	ldrsh.w	r0, [r7, #1188]	@ 0x4a4
 801e690:	441d      	add	r5, r3
 801e692:	4428      	add	r0, r5
 801e694:	01c0      	lsls	r0, r0, #7
 801e696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e698:	425b      	negs	r3, r3
 801e69a:	17d9      	asrs	r1, r3, #31
 801e69c:	fba3 3200 	umull	r3, r2, r3, r0
 801e6a0:	fb00 2001 	mla	r0, r0, r1, r2
 801e6a4:	0c1a      	lsrs	r2, r3, #16
 801e6a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 801e6aa:	f343 33c0 	sbfx	r3, r3, #15, #1
 801e6ae:	1a9b      	subs	r3, r3, r2
 801e6b0:	e7d7      	b.n	801e662 <Argus_Cal_GetGlobalRangeOffset+0x82>
 801e6b2:	0b8f      	lsrs	r7, r1, #14
 801e6b4:	e7b4      	b.n	801e620 <Argus_Cal_GetGlobalRangeOffset+0x40>
 801e6b6:	bf00      	nop

0801e6b8 <Argus_Cal_ApplyPixelOffsetCompensation>:
 801e6b8:	698b      	ldr	r3, [r1, #24]
 801e6ba:	f013 0f08 	tst.w	r3, #8
 801e6be:	bf14      	ite	ne
 801e6c0:	f04f 0c09 	movne.w	ip, #9
 801e6c4:	f04f 0ca1 	moveq.w	ip, #161	@ 0xa1
 801e6c8:	049b      	lsls	r3, r3, #18
 801e6ca:	bf4c      	ite	mi
 801e6cc:	f500 72d4 	addmi.w	r2, r0, #424	@ 0x1a8
 801e6d0:	f500 72b3 	addpl.w	r2, r0, #358	@ 0x166
 801e6d4:	f101 0334 	add.w	r3, r1, #52	@ 0x34
 801e6d8:	f501 70e0 	add.w	r0, r1, #448	@ 0x1c0
 801e6dc:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 801e6e0:	ea1c 0f01 	tst.w	ip, r1
 801e6e4:	d119      	bne.n	801e71a <Argus_Cal_ApplyPixelOffsetCompensation+0x62>
 801e6e6:	b500      	push	{lr}
 801e6e8:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 801e6ec:	f9b2 e000 	ldrsh.w	lr, [r2]
 801e6f0:	eba1 11ce 	sub.w	r1, r1, lr, lsl #7
 801e6f4:	f843 1c0c 	str.w	r1, [r3, #-12]
 801e6f8:	330c      	adds	r3, #12
 801e6fa:	4283      	cmp	r3, r0
 801e6fc:	f102 0202 	add.w	r2, r2, #2
 801e700:	d009      	beq.n	801e716 <Argus_Cal_ApplyPixelOffsetCompensation+0x5e>
 801e702:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 801e706:	ea1c 0f01 	tst.w	ip, r1
 801e70a:	d0ed      	beq.n	801e6e8 <Argus_Cal_ApplyPixelOffsetCompensation+0x30>
 801e70c:	330c      	adds	r3, #12
 801e70e:	4283      	cmp	r3, r0
 801e710:	f102 0202 	add.w	r2, r2, #2
 801e714:	d1f5      	bne.n	801e702 <Argus_Cal_ApplyPixelOffsetCompensation+0x4a>
 801e716:	f85d fb04 	ldr.w	pc, [sp], #4
 801e71a:	330c      	adds	r3, #12
 801e71c:	4283      	cmp	r3, r0
 801e71e:	f102 0202 	add.w	r2, r2, #2
 801e722:	d1db      	bne.n	801e6dc <Argus_Cal_ApplyPixelOffsetCompensation+0x24>
 801e724:	4770      	bx	lr
 801e726:	bf00      	nop

0801e728 <Argus_Cal_ApplyTempCalibration>:
 801e728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e72c:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	@ 0x28
 801e730:	f647 77ff 	movw	r7, #32767	@ 0x7fff
 801e734:	42bb      	cmp	r3, r7
 801e736:	d042      	beq.n	801e7be <Argus_Cal_ApplyTempCalibration+0x96>
 801e738:	4604      	mov	r4, r0
 801e73a:	f500 7101 	add.w	r1, r0, #516	@ 0x204
 801e73e:	f7fe fb6b 	bl	801ce18 <UpdateAPDVoltage>
 801e742:	f9b4 1028 	ldrsh.w	r1, [r4, #40]	@ 0x28
 801e746:	f994 5476 	ldrsb.w	r5, [r4, #1142]	@ 0x476
 801e74a:	f894 6471 	ldrb.w	r6, [r4, #1137]	@ 0x471
 801e74e:	f894 8474 	ldrb.w	r8, [r4, #1140]	@ 0x474
 801e752:	f894 3470 	ldrb.w	r3, [r4, #1136]	@ 0x470
 801e756:	f894 c472 	ldrb.w	ip, [r4, #1138]	@ 0x472
 801e75a:	f894 2473 	ldrb.w	r2, [r4, #1139]	@ 0x473
 801e75e:	f894 e475 	ldrb.w	lr, [r4, #1141]	@ 0x475
 801e762:	f994 9477 	ldrsb.w	r9, [r4, #1143]	@ 0x477
 801e766:	f8d4 04c0 	ldr.w	r0, [r4, #1216]	@ 0x4c0
 801e76a:	42b9      	cmp	r1, r7
 801e76c:	bf14      	ite	ne
 801e76e:	120c      	asrne	r4, r1, #8
 801e770:	2400      	moveq	r4, #0
 801e772:	f1a5 011e 	sub.w	r1, r5, #30
 801e776:	42a1      	cmp	r1, r4
 801e778:	bfb8      	it	lt
 801e77a:	4621      	movlt	r1, r4
 801e77c:	f1a9 041e 	sub.w	r4, r9, #30
 801e780:	42a1      	cmp	r1, r4
 801e782:	bfa8      	it	ge
 801e784:	4621      	movge	r1, r4
 801e786:	fb01 fe0e 	mul.w	lr, r1, lr
 801e78a:	fb01 f40c 	mul.w	r4, r1, ip
 801e78e:	eb0e 1ec8 	add.w	lr, lr, r8, lsl #7
 801e792:	eb04 14c6 	add.w	r4, r4, r6, lsl #7
 801e796:	02d2      	lsls	r2, r2, #11
 801e798:	02db      	lsls	r3, r3, #11
 801e79a:	fb01 220e 	mla	r2, r1, lr, r2
 801e79e:	fb01 3304 	mla	r3, r1, r4, r3
 801e7a2:	fb01 f202 	mul.w	r2, r1, r2
 801e7a6:	fb03 f101 	mul.w	r1, r3, r1
 801e7aa:	f102 7280 	add.w	r2, r2, #16777216	@ 0x1000000
 801e7ae:	f101 7180 	add.w	r1, r1, #16777216	@ 0x1000000
 801e7b2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e7b6:	1212      	asrs	r2, r2, #8
 801e7b8:	1209      	asrs	r1, r1, #8
 801e7ba:	f7fb bd59 	b.w	801a270 <Argus_Dev_UpdateLaserTemperatureCompensation>
 801e7be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e7c2:	bf00      	nop

0801e7c4 <Argus_Cal_ApplyAuxCalibration>:
 801e7c4:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801e7c8:	b570      	push	{r4, r5, r6, lr}
 801e7ca:	f647 74ff 	movw	r4, #32767	@ 0x7fff
 801e7ce:	42a3      	cmp	r3, r4
 801e7d0:	f000 80d1 	beq.w	801e976 <Argus_Cal_ApplyAuxCalibration+0x1b2>
 801e7d4:	f8b0 c49e 	ldrh.w	ip, [r0, #1182]	@ 0x49e
 801e7d8:	f8b0 4482 	ldrh.w	r4, [r0, #1154]	@ 0x482
 801e7dc:	f5ac 4c00 	sub.w	ip, ip, #32768	@ 0x8000
 801e7e0:	eba3 030c 	sub.w	r3, r3, ip
 801e7e4:	fb04 f303 	mul.w	r3, r4, r3
 801e7e8:	2b00      	cmp	r3, #0
 801e7ea:	f2c0 80bd 	blt.w	801e968 <Argus_Cal_ApplyAuxCalibration+0x1a4>
 801e7ee:	f3c3 2c80 	ubfx	ip, r3, #10, #1
 801e7f2:	eb0c 23d3 	add.w	r3, ip, r3, lsr #11
 801e7f6:	4c89      	ldr	r4, [pc, #548]	@ (801ea1c <Argus_Cal_ApplyAuxCalibration+0x258>)
 801e7f8:	42a3      	cmp	r3, r4
 801e7fa:	f647 75ff 	movw	r5, #32767	@ 0x7fff
 801e7fe:	bfb8      	it	lt
 801e800:	4623      	movlt	r3, r4
 801e802:	f9b0 4028 	ldrsh.w	r4, [r0, #40]	@ 0x28
 801e806:	42ab      	cmp	r3, r5
 801e808:	bfa8      	it	ge
 801e80a:	462b      	movge	r3, r5
 801e80c:	42ac      	cmp	r4, r5
 801e80e:	d00d      	beq.n	801e82c <Argus_Cal_ApplyAuxCalibration+0x68>
 801e810:	f890 502a 	ldrb.w	r5, [r0, #42]	@ 0x2a
 801e814:	b155      	cbz	r5, 801e82c <Argus_Cal_ApplyAuxCalibration+0x68>
 801e816:	1b1b      	subs	r3, r3, r4
 801e818:	0224      	lsls	r4, r4, #8
 801e81a:	fb05 4303 	mla	r3, r5, r3, r4
 801e81e:	2b00      	cmp	r3, #0
 801e820:	f2c0 80e6 	blt.w	801e9f0 <Argus_Cal_ApplyAuxCalibration+0x22c>
 801e824:	f3c3 14c0 	ubfx	r4, r3, #7, #1
 801e828:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801e82c:	b21b      	sxth	r3, r3
 801e82e:	111c      	asrs	r4, r3, #4
 801e830:	f504 74f0 	add.w	r4, r4, #480	@ 0x1e0
 801e834:	8503      	strh	r3, [r0, #40]	@ 0x28
 801e836:	804c      	strh	r4, [r1, #2]
 801e838:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 801e83c:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 801e840:	45a6      	cmp	lr, r4
 801e842:	d043      	beq.n	801e8cc <Argus_Cal_ApplyAuxCalibration+0x108>
 801e844:	f5ae 4c00 	sub.w	ip, lr, #32768	@ 0x8000
 801e848:	fb03 fc0c 	mul.w	ip, r3, ip
 801e84c:	f1bc 0f00 	cmp.w	ip, #0
 801e850:	f890 4488 	ldrb.w	r4, [r0, #1160]	@ 0x488
 801e854:	f2c0 8091 	blt.w	801e97a <Argus_Cal_ApplyAuxCalibration+0x1b6>
 801e858:	fa1f f58c 	uxth.w	r5, ip
 801e85c:	fb04 f505 	mul.w	r5, r4, r5
 801e860:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801e864:	fb04 fc0c 	mul.w	ip, r4, ip
 801e868:	0d2c      	lsrs	r4, r5, #20
 801e86a:	eb04 141c 	add.w	r4, r4, ip, lsr #4
 801e86e:	f3cc 0cc0 	ubfx	ip, ip, #3, #1
 801e872:	44a4      	add	ip, r4
 801e874:	f3c5 45c0 	ubfx	r5, r5, #19, #1
 801e878:	44ac      	add	ip, r5
 801e87a:	44f4      	add	ip, lr
 801e87c:	ea2c 7eec 	bic.w	lr, ip, ip, asr #31
 801e880:	f64f 74fe 	movw	r4, #65534	@ 0xfffe
 801e884:	45a6      	cmp	lr, r4
 801e886:	8dc6      	ldrh	r6, [r0, #46]	@ 0x2e
 801e888:	bfa8      	it	ge
 801e88a:	46a6      	movge	lr, r4
 801e88c:	f8a1 e004 	strh.w	lr, [r1, #4]
 801e890:	b1e6      	cbz	r6, 801e8cc <Argus_Cal_ApplyAuxCalibration+0x108>
 801e892:	f64f 74fd 	movw	r4, #65533	@ 0xfffd
 801e896:	45a4      	cmp	ip, r4
 801e898:	dc18      	bgt.n	801e8cc <Argus_Cal_ApplyAuxCalibration+0x108>
 801e89a:	0752      	lsls	r2, r2, #29
 801e89c:	f8b0 c490 	ldrh.w	ip, [r0, #1168]	@ 0x490
 801e8a0:	8e05      	ldrh	r5, [r0, #48]	@ 0x30
 801e8a2:	f100 80ac 	bmi.w	801e9fe <Argus_Cal_ApplyAuxCalibration+0x23a>
 801e8a6:	f1a5 0210 	sub.w	r2, r5, #16
 801e8aa:	fb0e f202 	mul.w	r2, lr, r2
 801e8ae:	f105 0410 	add.w	r4, r5, #16
 801e8b2:	fb06 2214 	mls	r2, r6, r4, r2
 801e8b6:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 801e8ba:	fb92 f2f5 	sdiv	r2, r2, r5
 801e8be:	b292      	uxth	r2, r2
 801e8c0:	f64f 74fe 	movw	r4, #65534	@ 0xfffe
 801e8c4:	42a2      	cmp	r2, r4
 801e8c6:	bf28      	it	cs
 801e8c8:	4622      	movcs	r2, r4
 801e8ca:	808a      	strh	r2, [r1, #4]
 801e8cc:	f8b1 c000 	ldrh.w	ip, [r1]
 801e8d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801e8d4:	4594      	cmp	ip, r2
 801e8d6:	d020      	beq.n	801e91a <Argus_Cal_ApplyAuxCalibration+0x156>
 801e8d8:	f5ac 4200 	sub.w	r2, ip, #32768	@ 0x8000
 801e8dc:	fb03 f202 	mul.w	r2, r3, r2
 801e8e0:	2a00      	cmp	r2, #0
 801e8e2:	f890 5488 	ldrb.w	r5, [r0, #1160]	@ 0x488
 801e8e6:	db5e      	blt.n	801e9a6 <Argus_Cal_ApplyAuxCalibration+0x1e2>
 801e8e8:	b294      	uxth	r4, r2
 801e8ea:	fb05 f404 	mul.w	r4, r5, r4
 801e8ee:	0c12      	lsrs	r2, r2, #16
 801e8f0:	fb05 f202 	mul.w	r2, r5, r2
 801e8f4:	ea4f 5e14 	mov.w	lr, r4, lsr #20
 801e8f8:	eb0e 1e12 	add.w	lr, lr, r2, lsr #4
 801e8fc:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 801e900:	4472      	add	r2, lr
 801e902:	f3c4 44c0 	ubfx	r4, r4, #19, #1
 801e906:	4422      	add	r2, r4
 801e908:	4462      	add	r2, ip
 801e90a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801e90e:	f64f 74fe 	movw	r4, #65534	@ 0xfffe
 801e912:	42a2      	cmp	r2, r4
 801e914:	bfa8      	it	ge
 801e916:	4622      	movge	r2, r4
 801e918:	800a      	strh	r2, [r1, #0]
 801e91a:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 801e91e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801e922:	4594      	cmp	ip, r2
 801e924:	d01f      	beq.n	801e966 <Argus_Cal_ApplyAuxCalibration+0x1a2>
 801e926:	f5ac 4200 	sub.w	r2, ip, #32768	@ 0x8000
 801e92a:	fb02 f303 	mul.w	r3, r2, r3
 801e92e:	2b00      	cmp	r3, #0
 801e930:	f890 2488 	ldrb.w	r2, [r0, #1160]	@ 0x488
 801e934:	db4a      	blt.n	801e9cc <Argus_Cal_ApplyAuxCalibration+0x208>
 801e936:	0c18      	lsrs	r0, r3, #16
 801e938:	b29b      	uxth	r3, r3
 801e93a:	fb02 f303 	mul.w	r3, r2, r3
 801e93e:	fb02 f000 	mul.w	r0, r2, r0
 801e942:	0d1a      	lsrs	r2, r3, #20
 801e944:	eb02 1210 	add.w	r2, r2, r0, lsr #4
 801e948:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 801e94c:	4402      	add	r2, r0
 801e94e:	f3c3 43c0 	ubfx	r3, r3, #19, #1
 801e952:	4413      	add	r3, r2
 801e954:	4463      	add	r3, ip
 801e956:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e95a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801e95e:	4293      	cmp	r3, r2
 801e960:	bfa8      	it	ge
 801e962:	4613      	movge	r3, r2
 801e964:	80cb      	strh	r3, [r1, #6]
 801e966:	bd70      	pop	{r4, r5, r6, pc}
 801e968:	425b      	negs	r3, r3
 801e96a:	f3c3 2c80 	ubfx	ip, r3, #10, #1
 801e96e:	eb0c 23d3 	add.w	r3, ip, r3, lsr #11
 801e972:	425b      	negs	r3, r3
 801e974:	e73f      	b.n	801e7f6 <Argus_Cal_ApplyAuxCalibration+0x32>
 801e976:	8503      	strh	r3, [r0, #40]	@ 0x28
 801e978:	e75e      	b.n	801e838 <Argus_Cal_ApplyAuxCalibration+0x74>
 801e97a:	f1cc 0c00 	rsb	ip, ip, #0
 801e97e:	fa1f f58c 	uxth.w	r5, ip
 801e982:	fb04 f505 	mul.w	r5, r4, r5
 801e986:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801e98a:	fb04 fc0c 	mul.w	ip, r4, ip
 801e98e:	0d2c      	lsrs	r4, r5, #20
 801e990:	eb04 141c 	add.w	r4, r4, ip, lsr #4
 801e994:	f3cc 0cc0 	ubfx	ip, ip, #3, #1
 801e998:	44a4      	add	ip, r4
 801e99a:	f3c5 45c0 	ubfx	r5, r5, #19, #1
 801e99e:	44ac      	add	ip, r5
 801e9a0:	f1cc 0c00 	rsb	ip, ip, #0
 801e9a4:	e769      	b.n	801e87a <Argus_Cal_ApplyAuxCalibration+0xb6>
 801e9a6:	4252      	negs	r2, r2
 801e9a8:	b294      	uxth	r4, r2
 801e9aa:	fb05 f404 	mul.w	r4, r5, r4
 801e9ae:	0c12      	lsrs	r2, r2, #16
 801e9b0:	fb05 f202 	mul.w	r2, r5, r2
 801e9b4:	ea4f 5e14 	mov.w	lr, r4, lsr #20
 801e9b8:	eb0e 1e12 	add.w	lr, lr, r2, lsr #4
 801e9bc:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 801e9c0:	4472      	add	r2, lr
 801e9c2:	f3c4 44c0 	ubfx	r4, r4, #19, #1
 801e9c6:	4422      	add	r2, r4
 801e9c8:	4252      	negs	r2, r2
 801e9ca:	e79d      	b.n	801e908 <Argus_Cal_ApplyAuxCalibration+0x144>
 801e9cc:	425b      	negs	r3, r3
 801e9ce:	0c18      	lsrs	r0, r3, #16
 801e9d0:	b29b      	uxth	r3, r3
 801e9d2:	fb02 f303 	mul.w	r3, r2, r3
 801e9d6:	fb02 f000 	mul.w	r0, r2, r0
 801e9da:	0d1a      	lsrs	r2, r3, #20
 801e9dc:	eb02 1210 	add.w	r2, r2, r0, lsr #4
 801e9e0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 801e9e4:	4402      	add	r2, r0
 801e9e6:	f3c3 43c0 	ubfx	r3, r3, #19, #1
 801e9ea:	4413      	add	r3, r2
 801e9ec:	425b      	negs	r3, r3
 801e9ee:	e7b1      	b.n	801e954 <Argus_Cal_ApplyAuxCalibration+0x190>
 801e9f0:	425b      	negs	r3, r3
 801e9f2:	f3c3 14c0 	ubfx	r4, r3, #7, #1
 801e9f6:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801e9fa:	425b      	negs	r3, r3
 801e9fc:	e716      	b.n	801e82c <Argus_Cal_ApplyAuxCalibration+0x68>
 801e9fe:	f1a5 0410 	sub.w	r4, r5, #16
 801ea02:	fb06 f404 	mul.w	r4, r6, r4
 801ea06:	f105 0210 	add.w	r2, r5, #16
 801ea0a:	fb0e 4202 	mla	r2, lr, r2, r4
 801ea0e:	eba2 120c 	sub.w	r2, r2, ip, lsl #4
 801ea12:	fb92 f2f5 	sdiv	r2, r2, r5
 801ea16:	b292      	uxth	r2, r2
 801ea18:	e752      	b.n	801e8c0 <Argus_Cal_ApplyAuxCalibration+0xfc>
 801ea1a:	bf00      	nop
 801ea1c:	ffff8000 	.word	0xffff8000

0801ea20 <Argus_Cal_UpdateLddXtalkVectors>:
 801ea20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea24:	b089      	sub	sp, #36	@ 0x24
 801ea26:	460c      	mov	r4, r1
 801ea28:	9105      	str	r1, [sp, #20]
 801ea2a:	f9b0 1028 	ldrsh.w	r1, [r0, #40]	@ 0x28
 801ea2e:	69a4      	ldr	r4, [r4, #24]
 801ea30:	9107      	str	r1, [sp, #28]
 801ea32:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801ea36:	4299      	cmp	r1, r3
 801ea38:	9404      	str	r4, [sp, #16]
 801ea3a:	4691      	mov	r9, r2
 801ea3c:	f000 813f 	beq.w	801ecbe <Argus_Cal_UpdateLddXtalkVectors+0x29e>
 801ea40:	f8d0 54c0 	ldr.w	r5, [r0, #1216]	@ 0x4c0
 801ea44:	f8d5 21c4 	ldr.w	r2, [r5, #452]	@ 0x1c4
 801ea48:	f3c4 0380 	ubfx	r3, r4, #2, #1
 801ea4c:	8a14      	ldrh	r4, [r2, #16]
 801ea4e:	2900      	cmp	r1, #0
 801ea50:	fb04 f201 	mul.w	r2, r4, r1
 801ea54:	bfd4      	ite	le
 801ea56:	2600      	movle	r6, #0
 801ea58:	2601      	movgt	r6, #1
 801ea5a:	2a00      	cmp	r2, #0
 801ea5c:	f280 8129 	bge.w	801ecb2 <Argus_Cal_UpdateLddXtalkVectors+0x292>
 801ea60:	4252      	negs	r2, r2
 801ea62:	f3c2 2140 	ubfx	r1, r2, #9, #1
 801ea66:	eb01 2292 	add.w	r2, r1, r2, lsr #10
 801ea6a:	4252      	negs	r2, r2
 801ea6c:	b212      	sxth	r2, r2
 801ea6e:	eb06 0743 	add.w	r7, r6, r3, lsl #1
 801ea72:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 801ea76:	005b      	lsls	r3, r3, #1
 801ea78:	f9b7 1430 	ldrsh.w	r1, [r7, #1072]	@ 0x430
 801ea7c:	fb02 fc01 	mul.w	ip, r2, r1
 801ea80:	f1bc 0f00 	cmp.w	ip, #0
 801ea84:	f280 8128 	bge.w	801ecd8 <Argus_Cal_UpdateLddXtalkVectors+0x2b8>
 801ea88:	f1cc 0c00 	rsb	ip, ip, #0
 801ea8c:	f3cc 4180 	ubfx	r1, ip, #18, #1
 801ea90:	eb01 41dc 	add.w	r1, r1, ip, lsr #19
 801ea94:	4249      	negs	r1, r1
 801ea96:	4249      	negs	r1, r1
 801ea98:	f8a0 113a 	strh.w	r1, [r0, #314]	@ 0x13a
 801ea9c:	f9b7 1432 	ldrsh.w	r1, [r7, #1074]	@ 0x432
 801eaa0:	fb02 f101 	mul.w	r1, r2, r1
 801eaa4:	2900      	cmp	r1, #0
 801eaa6:	f2c0 812a 	blt.w	801ecfe <Argus_Cal_UpdateLddXtalkVectors+0x2de>
 801eaaa:	f3c1 4780 	ubfx	r7, r1, #18, #1
 801eaae:	eb07 41d1 	add.w	r1, r7, r1, lsr #19
 801eab2:	4249      	negs	r1, r1
 801eab4:	f8a0 113c 	strh.w	r1, [r0, #316]	@ 0x13c
 801eab8:	1999      	adds	r1, r3, r6
 801eaba:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801eabe:	f9b1 1434 	ldrsh.w	r1, [r1, #1076]	@ 0x434
 801eac2:	fb02 f101 	mul.w	r1, r2, r1
 801eac6:	2900      	cmp	r1, #0
 801eac8:	f2c0 8112 	blt.w	801ecf0 <Argus_Cal_UpdateLddXtalkVectors+0x2d0>
 801eacc:	f3c1 4780 	ubfx	r7, r1, #18, #1
 801ead0:	eb07 41d1 	add.w	r1, r7, r1, lsr #19
 801ead4:	4433      	add	r3, r6
 801ead6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801eada:	4249      	negs	r1, r1
 801eadc:	f9b3 3436 	ldrsh.w	r3, [r3, #1078]	@ 0x436
 801eae0:	f8a0 113e 	strh.w	r1, [r0, #318]	@ 0x13e
 801eae4:	fb03 f202 	mul.w	r2, r3, r2
 801eae8:	2a00      	cmp	r2, #0
 801eaea:	f2c0 80fa 	blt.w	801ece2 <Argus_Cal_UpdateLddXtalkVectors+0x2c2>
 801eaee:	f3c2 4380 	ubfx	r3, r2, #18, #1
 801eaf2:	eb03 42d2 	add.w	r2, r3, r2, lsr #19
 801eaf6:	f8d5 511c 	ldr.w	r5, [r5, #284]	@ 0x11c
 801eafa:	f895 30e0 	ldrb.w	r3, [r5, #224]	@ 0xe0
 801eafe:	4252      	negs	r2, r2
 801eb00:	f8a0 2140 	strh.w	r2, [r0, #320]	@ 0x140
 801eb04:	2b00      	cmp	r3, #0
 801eb06:	f000 8101 	beq.w	801ed0c <Argus_Cal_UpdateLddXtalkVectors+0x2ec>
 801eb0a:	2700      	movs	r7, #0
 801eb0c:	9b05      	ldr	r3, [sp, #20]
 801eb0e:	463e      	mov	r6, r7
 801eb10:	463a      	mov	r2, r7
 801eb12:	f893 1030 	ldrb.w	r1, [r3, #48]	@ 0x30
 801eb16:	f011 0f01 	tst.w	r1, #1
 801eb1a:	d110      	bne.n	801eb3e <Argus_Cal_UpdateLddXtalkVectors+0x11e>
 801eb1c:	0789      	lsls	r1, r1, #30
 801eb1e:	f100 8191 	bmi.w	801ee44 <Argus_Cal_UpdateLddXtalkVectors+0x424>
 801eb22:	f8b3 c032 	ldrh.w	ip, [r3, #50]	@ 0x32
 801eb26:	f8d5 10ec 	ldr.w	r1, [r5, #236]	@ 0xec
 801eb2a:	4566      	cmp	r6, ip
 801eb2c:	fa21 f102 	lsr.w	r1, r1, r2
 801eb30:	bf38      	it	cc
 801eb32:	4666      	movcc	r6, ip
 801eb34:	07c9      	lsls	r1, r1, #31
 801eb36:	d502      	bpl.n	801eb3e <Argus_Cal_UpdateLddXtalkVectors+0x11e>
 801eb38:	4567      	cmp	r7, ip
 801eb3a:	bf38      	it	cc
 801eb3c:	4667      	movcc	r7, ip
 801eb3e:	3201      	adds	r2, #1
 801eb40:	2a20      	cmp	r2, #32
 801eb42:	f103 030c 	add.w	r3, r3, #12
 801eb46:	d1e4      	bne.n	801eb12 <Argus_Cal_UpdateLddXtalkVectors+0xf2>
 801eb48:	9b05      	ldr	r3, [sp, #20]
 801eb4a:	8b9a      	ldrh	r2, [r3, #28]
 801eb4c:	0293      	lsls	r3, r2, #10
 801eb4e:	b16a      	cbz	r2, 801eb6c <Argus_Cal_UpdateLddXtalkVectors+0x14c>
 801eb50:	429c      	cmp	r4, r3
 801eb52:	4621      	mov	r1, r4
 801eb54:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801eb58:	f240 8177 	bls.w	801ee4a <Argus_Cal_UpdateLddXtalkVectors+0x42a>
 801eb5c:	005b      	lsls	r3, r3, #1
 801eb5e:	429c      	cmp	r4, r3
 801eb60:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801eb64:	d8fa      	bhi.n	801eb5c <Argus_Cal_UpdateLddXtalkVectors+0x13c>
 801eb66:	2a00      	cmp	r2, #0
 801eb68:	f040 816f 	bne.w	801ee4a <Argus_Cal_UpdateLddXtalkVectors+0x42a>
 801eb6c:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 801eb70:	f890 3164 	ldrb.w	r3, [r0, #356]	@ 0x164
 801eb74:	fb04 f606 	mul.w	r6, r4, r6
 801eb78:	09b6      	lsrs	r6, r6, #6
 801eb7a:	2b00      	cmp	r3, #0
 801eb7c:	f000 80d2 	beq.w	801ed24 <Argus_Cal_UpdateLddXtalkVectors+0x304>
 801eb80:	9b04      	ldr	r3, [sp, #16]
 801eb82:	039a      	lsls	r2, r3, #14
 801eb84:	f100 8179 	bmi.w	801ee7a <Argus_Cal_UpdateLddXtalkVectors+0x45a>
 801eb88:	2300      	movs	r3, #0
 801eb8a:	f880 3164 	strb.w	r3, [r0, #356]	@ 0x164
 801eb8e:	9b07      	ldr	r3, [sp, #28]
 801eb90:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801eb94:	4293      	cmp	r3, r2
 801eb96:	f000 8089 	beq.w	801ecac <Argus_Cal_UpdateLddXtalkVectors+0x28c>
 801eb9a:	f9b0 3162 	ldrsh.w	r3, [r0, #354]	@ 0x162
 801eb9e:	4293      	cmp	r3, r2
 801eba0:	f000 8084 	beq.w	801ecac <Argus_Cal_UpdateLddXtalkVectors+0x28c>
 801eba4:	9a07      	ldr	r2, [sp, #28]
 801eba6:	1ad3      	subs	r3, r2, r3
 801eba8:	2b00      	cmp	r3, #0
 801ebaa:	bfb8      	it	lt
 801ebac:	425b      	neglt	r3, r3
 801ebae:	f995 20e2 	ldrsb.w	r2, [r5, #226]	@ 0xe2
 801ebb2:	b21b      	sxth	r3, r3
 801ebb4:	ebb3 2f02 	cmp.w	r3, r2, lsl #8
 801ebb8:	dd78      	ble.n	801ecac <Argus_Cal_UpdateLddXtalkVectors+0x28c>
 801ebba:	9b04      	ldr	r3, [sp, #16]
 801ebbc:	f895 20e1 	ldrb.w	r2, [r5, #225]	@ 0xe1
 801ebc0:	f003 0306 	and.w	r3, r3, #6
 801ebc4:	f1a3 0306 	sub.w	r3, r3, #6
 801ebc8:	fab3 f383 	clz	r3, r3
 801ebcc:	095b      	lsrs	r3, r3, #5
 801ebce:	eb00 1403 	add.w	r4, r0, r3, lsl #4
 801ebd2:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801ebd6:	f9b4 1142 	ldrsh.w	r1, [r4, #322]	@ 0x142
 801ebda:	b292      	uxth	r2, r2
 801ebdc:	fb02 f101 	mul.w	r1, r2, r1
 801ebe0:	2900      	cmp	r1, #0
 801ebe2:	bfbb      	ittet	lt
 801ebe4:	4249      	neglt	r1, r1
 801ebe6:	0a09      	lsrlt	r1, r1, #8
 801ebe8:	0a09      	lsrge	r1, r1, #8
 801ebea:	4249      	neglt	r1, r1
 801ebec:	f8a4 1142 	strh.w	r1, [r4, #322]	@ 0x142
 801ebf0:	f9b4 1144 	ldrsh.w	r1, [r4, #324]	@ 0x144
 801ebf4:	fb02 f101 	mul.w	r1, r2, r1
 801ebf8:	2900      	cmp	r1, #0
 801ebfa:	bfbb      	ittet	lt
 801ebfc:	4249      	neglt	r1, r1
 801ebfe:	0a09      	lsrlt	r1, r1, #8
 801ec00:	0a09      	lsrge	r1, r1, #8
 801ec02:	4249      	neglt	r1, r1
 801ec04:	009b      	lsls	r3, r3, #2
 801ec06:	f8a4 1144 	strh.w	r1, [r4, #324]	@ 0x144
 801ec0a:	1c5c      	adds	r4, r3, #1
 801ec0c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 801ec10:	f9b4 1142 	ldrsh.w	r1, [r4, #322]	@ 0x142
 801ec14:	fb02 f101 	mul.w	r1, r2, r1
 801ec18:	2900      	cmp	r1, #0
 801ec1a:	bfbb      	ittet	lt
 801ec1c:	4249      	neglt	r1, r1
 801ec1e:	0a09      	lsrlt	r1, r1, #8
 801ec20:	0a09      	lsrge	r1, r1, #8
 801ec22:	4249      	neglt	r1, r1
 801ec24:	f8a4 1142 	strh.w	r1, [r4, #322]	@ 0x142
 801ec28:	f9b4 1144 	ldrsh.w	r1, [r4, #324]	@ 0x144
 801ec2c:	fb02 f101 	mul.w	r1, r2, r1
 801ec30:	2900      	cmp	r1, #0
 801ec32:	bfbb      	ittet	lt
 801ec34:	4249      	neglt	r1, r1
 801ec36:	0a09      	lsrlt	r1, r1, #8
 801ec38:	0a09      	lsrge	r1, r1, #8
 801ec3a:	4249      	neglt	r1, r1
 801ec3c:	f8a4 1144 	strh.w	r1, [r4, #324]	@ 0x144
 801ec40:	1c9c      	adds	r4, r3, #2
 801ec42:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 801ec46:	3303      	adds	r3, #3
 801ec48:	f9b4 1142 	ldrsh.w	r1, [r4, #322]	@ 0x142
 801ec4c:	fb02 f101 	mul.w	r1, r2, r1
 801ec50:	2900      	cmp	r1, #0
 801ec52:	bfbb      	ittet	lt
 801ec54:	4249      	neglt	r1, r1
 801ec56:	0a09      	lsrlt	r1, r1, #8
 801ec58:	0a09      	lsrge	r1, r1, #8
 801ec5a:	4249      	neglt	r1, r1
 801ec5c:	f8a4 1142 	strh.w	r1, [r4, #322]	@ 0x142
 801ec60:	f9b4 1144 	ldrsh.w	r1, [r4, #324]	@ 0x144
 801ec64:	fb02 f101 	mul.w	r1, r2, r1
 801ec68:	2900      	cmp	r1, #0
 801ec6a:	bfbb      	ittet	lt
 801ec6c:	4249      	neglt	r1, r1
 801ec6e:	0a09      	lsrlt	r1, r1, #8
 801ec70:	0a09      	lsrge	r1, r1, #8
 801ec72:	4249      	neglt	r1, r1
 801ec74:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801ec78:	f8a4 1144 	strh.w	r1, [r4, #324]	@ 0x144
 801ec7c:	f9b0 3142 	ldrsh.w	r3, [r0, #322]	@ 0x142
 801ec80:	fb02 f303 	mul.w	r3, r2, r3
 801ec84:	2b00      	cmp	r3, #0
 801ec86:	bfbd      	ittte	lt
 801ec88:	425b      	neglt	r3, r3
 801ec8a:	0a1b      	lsrlt	r3, r3, #8
 801ec8c:	4259      	neglt	r1, r3
 801ec8e:	0a19      	lsrge	r1, r3, #8
 801ec90:	f9b0 3144 	ldrsh.w	r3, [r0, #324]	@ 0x144
 801ec94:	f8a0 1142 	strh.w	r1, [r0, #322]	@ 0x142
 801ec98:	fb03 f202 	mul.w	r2, r3, r2
 801ec9c:	2a00      	cmp	r2, #0
 801ec9e:	bfbd      	ittte	lt
 801eca0:	4252      	neglt	r2, r2
 801eca2:	0a12      	lsrlt	r2, r2, #8
 801eca4:	4252      	neglt	r2, r2
 801eca6:	0a12      	lsrge	r2, r2, #8
 801eca8:	f8a0 2144 	strh.w	r2, [r0, #324]	@ 0x144
 801ecac:	b009      	add	sp, #36	@ 0x24
 801ecae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ecb2:	f3c2 2140 	ubfx	r1, r2, #9, #1
 801ecb6:	eb01 2292 	add.w	r2, r1, r2, lsr #10
 801ecba:	b212      	sxth	r2, r2
 801ecbc:	e6d7      	b.n	801ea6e <Argus_Cal_UpdateLddXtalkVectors+0x4e>
 801ecbe:	f8d0 54c0 	ldr.w	r5, [r0, #1216]	@ 0x4c0
 801ecc2:	f8d5 21c4 	ldr.w	r2, [r5, #452]	@ 0x1c4
 801ecc6:	f3c4 0380 	ubfx	r3, r4, #2, #1
 801ecca:	8a14      	ldrh	r4, [r2, #16]
 801eccc:	2200      	movs	r2, #0
 801ecce:	eb00 1703 	add.w	r7, r0, r3, lsl #4
 801ecd2:	4616      	mov	r6, r2
 801ecd4:	005b      	lsls	r3, r3, #1
 801ecd6:	4694      	mov	ip, r2
 801ecd8:	f3cc 4180 	ubfx	r1, ip, #18, #1
 801ecdc:	eb01 41dc 	add.w	r1, r1, ip, lsr #19
 801ece0:	e6d9      	b.n	801ea96 <Argus_Cal_UpdateLddXtalkVectors+0x76>
 801ece2:	4252      	negs	r2, r2
 801ece4:	f3c2 4380 	ubfx	r3, r2, #18, #1
 801ece8:	eb03 42d2 	add.w	r2, r3, r2, lsr #19
 801ecec:	4252      	negs	r2, r2
 801ecee:	e702      	b.n	801eaf6 <Argus_Cal_UpdateLddXtalkVectors+0xd6>
 801ecf0:	4249      	negs	r1, r1
 801ecf2:	f3c1 4780 	ubfx	r7, r1, #18, #1
 801ecf6:	eb07 41d1 	add.w	r1, r7, r1, lsr #19
 801ecfa:	4249      	negs	r1, r1
 801ecfc:	e6ea      	b.n	801ead4 <Argus_Cal_UpdateLddXtalkVectors+0xb4>
 801ecfe:	4249      	negs	r1, r1
 801ed00:	f3c1 4780 	ubfx	r7, r1, #18, #1
 801ed04:	eb07 41d1 	add.w	r1, r7, r1, lsr #19
 801ed08:	4249      	negs	r1, r1
 801ed0a:	e6d2      	b.n	801eab2 <Argus_Cal_UpdateLddXtalkVectors+0x92>
 801ed0c:	f890 3164 	ldrb.w	r3, [r0, #356]	@ 0x164
 801ed10:	2b00      	cmp	r3, #0
 801ed12:	d0cb      	beq.n	801ecac <Argus_Cal_UpdateLddXtalkVectors+0x28c>
 801ed14:	9b04      	ldr	r3, [sp, #16]
 801ed16:	9a05      	ldr	r2, [sp, #20]
 801ed18:	f043 0301 	orr.w	r3, r3, #1
 801ed1c:	6193      	str	r3, [r2, #24]
 801ed1e:	b009      	add	sp, #36	@ 0x24
 801ed20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed24:	9b04      	ldr	r3, [sp, #16]
 801ed26:	039b      	lsls	r3, r3, #14
 801ed28:	f57f af31 	bpl.w	801eb8e <Argus_Cal_UpdateLddXtalkVectors+0x16e>
 801ed2c:	f8b5 30e6 	ldrh.w	r3, [r5, #230]	@ 0xe6
 801ed30:	429e      	cmp	r6, r3
 801ed32:	f4bf af2c 	bcs.w	801eb8e <Argus_Cal_UpdateLddXtalkVectors+0x16e>
 801ed36:	f8b5 30e8 	ldrh.w	r3, [r5, #232]	@ 0xe8
 801ed3a:	429f      	cmp	r7, r3
 801ed3c:	f4bf af27 	bcs.w	801eb8e <Argus_Cal_UpdateLddXtalkVectors+0x16e>
 801ed40:	2301      	movs	r3, #1
 801ed42:	f880 3164 	strb.w	r3, [r0, #356]	@ 0x164
 801ed46:	9b04      	ldr	r3, [sp, #16]
 801ed48:	f003 0306 	and.w	r3, r3, #6
 801ed4c:	f1a3 0306 	sub.w	r3, r3, #6
 801ed50:	fab3 f383 	clz	r3, r3
 801ed54:	095b      	lsrs	r3, r3, #5
 801ed56:	eb03 1243 	add.w	r2, r3, r3, lsl #5
 801ed5a:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 801ed5e:	0092      	lsls	r2, r2, #2
 801ed60:	9303      	str	r3, [sp, #12]
 801ed62:	f8d5 30ec 	ldr.w	r3, [r5, #236]	@ 0xec
 801ed66:	9300      	str	r3, [sp, #0]
 801ed68:	3232      	adds	r2, #50	@ 0x32
 801ed6a:	f895 30e1 	ldrb.w	r3, [r5, #225]	@ 0xe1
 801ed6e:	9202      	str	r2, [sp, #8]
 801ed70:	9306      	str	r3, [sp, #24]
 801ed72:	f04f 0b00 	mov.w	fp, #0
 801ed76:	4682      	mov	sl, r0
 801ed78:	f00b 0301 	and.w	r3, fp, #1
 801ed7c:	2100      	movs	r1, #0
 801ed7e:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801ed82:	9301      	str	r3, [sp, #4]
 801ed84:	4688      	mov	r8, r1
 801ed86:	468e      	mov	lr, r1
 801ed88:	468c      	mov	ip, r1
 801ed8a:	e035      	b.n	801edf8 <Argus_Cal_UpdateLddXtalkVectors+0x3d8>
 801ed8c:	0cbd      	lsrs	r5, r7, #18
 801ed8e:	eb05 0590 	add.w	r5, r5, r0, lsr #2
 801ed92:	f3c0 0040 	ubfx	r0, r0, #1, #1
 801ed96:	4428      	add	r0, r5
 801ed98:	f3c7 4340 	ubfx	r3, r7, #17, #1
 801ed9c:	4403      	add	r3, r0
 801ed9e:	6877      	ldr	r7, [r6, #4]
 801eda0:	b2be      	uxth	r6, r7
 801eda2:	0c38      	lsrs	r0, r7, #16
 801eda4:	2f00      	cmp	r7, #0
 801eda6:	f1c7 0500 	rsb	r5, r7, #0
 801edaa:	fb04 f606 	mul.w	r6, r4, r6
 801edae:	fb04 f000 	mul.w	r0, r4, r0
 801edb2:	db6d      	blt.n	801ee90 <Argus_Cal_UpdateLddXtalkVectors+0x470>
 801edb4:	0cb5      	lsrs	r5, r6, #18
 801edb6:	eb05 0590 	add.w	r5, r5, r0, lsr #2
 801edba:	f3c0 0040 	ubfx	r0, r0, #1, #1
 801edbe:	4428      	add	r0, r5
 801edc0:	f3c6 4640 	ubfx	r6, r6, #17, #1
 801edc4:	4406      	add	r6, r0
 801edc6:	9802      	ldr	r0, [sp, #8]
 801edc8:	9f01      	ldr	r7, [sp, #4]
 801edca:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801edce:	eb0a 0502 	add.w	r5, sl, r2
 801edd2:	f93a 0002 	ldrsh.w	r0, [sl, r2]
 801edd6:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801edda:	f9b7 513a 	ldrsh.w	r5, [r7, #314]	@ 0x13a
 801edde:	4428      	add	r0, r5
 801ede0:	4418      	add	r0, r3
 801ede2:	f9b7 313c 	ldrsh.w	r3, [r7, #316]	@ 0x13c
 801ede6:	441a      	add	r2, r3
 801ede8:	4416      	add	r6, r2
 801edea:	f10c 0c01 	add.w	ip, ip, #1
 801edee:	4486      	add	lr, r0
 801edf0:	44b0      	add	r8, r6
 801edf2:	3104      	adds	r1, #4
 801edf4:	2920      	cmp	r1, #32
 801edf6:	d05c      	beq.n	801eeb2 <Argus_Cal_UpdateLddXtalkVectors+0x492>
 801edf8:	9b00      	ldr	r3, [sp, #0]
 801edfa:	ea4b 0201 	orr.w	r2, fp, r1
 801edfe:	40d3      	lsrs	r3, r2
 801ee00:	f013 0f01 	tst.w	r3, #1
 801ee04:	eb09 06c2 	add.w	r6, r9, r2, lsl #3
 801ee08:	d0f3      	beq.n	801edf2 <Argus_Cal_UpdateLddXtalkVectors+0x3d2>
 801ee0a:	f859 0032 	ldr.w	r0, [r9, r2, lsl #3]
 801ee0e:	b287      	uxth	r7, r0
 801ee10:	4245      	negs	r5, r0
 801ee12:	2800      	cmp	r0, #0
 801ee14:	ea4f 4010 	mov.w	r0, r0, lsr #16
 801ee18:	fb04 f707 	mul.w	r7, r4, r7
 801ee1c:	fb04 f000 	mul.w	r0, r4, r0
 801ee20:	dab4      	bge.n	801ed8c <Argus_Cal_UpdateLddXtalkVectors+0x36c>
 801ee22:	b2a8      	uxth	r0, r5
 801ee24:	fb04 f000 	mul.w	r0, r4, r0
 801ee28:	0c2d      	lsrs	r5, r5, #16
 801ee2a:	fb04 f505 	mul.w	r5, r4, r5
 801ee2e:	0c83      	lsrs	r3, r0, #18
 801ee30:	eb03 0395 	add.w	r3, r3, r5, lsr #2
 801ee34:	f3c5 0540 	ubfx	r5, r5, #1, #1
 801ee38:	441d      	add	r5, r3
 801ee3a:	f3c0 4040 	ubfx	r0, r0, #17, #1
 801ee3e:	4405      	add	r5, r0
 801ee40:	426b      	negs	r3, r5
 801ee42:	e7ac      	b.n	801ed9e <Argus_Cal_UpdateLddXtalkVectors+0x37e>
 801ee44:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 801ee48:	e67e      	b.n	801eb48 <Argus_Cal_UpdateLddXtalkVectors+0x128>
 801ee4a:	2400      	movs	r4, #0
 801ee4c:	eba1 0c03 	sub.w	ip, r1, r3
 801ee50:	b149      	cbz	r1, 801ee66 <Argus_Cal_UpdateLddXtalkVectors+0x446>
 801ee52:	428b      	cmp	r3, r1
 801ee54:	d80c      	bhi.n	801ee70 <Argus_Cal_UpdateLddXtalkVectors+0x450>
 801ee56:	4314      	orrs	r4, r2
 801ee58:	0852      	lsrs	r2, r2, #1
 801ee5a:	ea4f 014c 	mov.w	r1, ip, lsl #1
 801ee5e:	d1f5      	bne.n	801ee4c <Argus_Cal_UpdateLddXtalkVectors+0x42c>
 801ee60:	428b      	cmp	r3, r1
 801ee62:	d800      	bhi.n	801ee66 <Argus_Cal_UpdateLddXtalkVectors+0x446>
 801ee64:	3401      	adds	r4, #1
 801ee66:	2c00      	cmp	r4, #0
 801ee68:	f6ff ae80 	blt.w	801eb6c <Argus_Cal_UpdateLddXtalkVectors+0x14c>
 801ee6c:	b2a4      	uxth	r4, r4
 801ee6e:	e67f      	b.n	801eb70 <Argus_Cal_UpdateLddXtalkVectors+0x150>
 801ee70:	0852      	lsrs	r2, r2, #1
 801ee72:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801ee76:	d1e9      	bne.n	801ee4c <Argus_Cal_UpdateLddXtalkVectors+0x42c>
 801ee78:	e7f2      	b.n	801ee60 <Argus_Cal_UpdateLddXtalkVectors+0x440>
 801ee7a:	f8b5 30e4 	ldrh.w	r3, [r5, #228]	@ 0xe4
 801ee7e:	429e      	cmp	r6, r3
 801ee80:	f63f ae82 	bhi.w	801eb88 <Argus_Cal_UpdateLddXtalkVectors+0x168>
 801ee84:	f8b5 30e8 	ldrh.w	r3, [r5, #232]	@ 0xe8
 801ee88:	429f      	cmp	r7, r3
 801ee8a:	f67f af5c 	bls.w	801ed46 <Argus_Cal_UpdateLddXtalkVectors+0x326>
 801ee8e:	e67b      	b.n	801eb88 <Argus_Cal_UpdateLddXtalkVectors+0x168>
 801ee90:	b2a8      	uxth	r0, r5
 801ee92:	fb04 f000 	mul.w	r0, r4, r0
 801ee96:	0c2d      	lsrs	r5, r5, #16
 801ee98:	fb04 f505 	mul.w	r5, r4, r5
 801ee9c:	0c86      	lsrs	r6, r0, #18
 801ee9e:	eb06 0695 	add.w	r6, r6, r5, lsr #2
 801eea2:	f3c5 0540 	ubfx	r5, r5, #1, #1
 801eea6:	4435      	add	r5, r6
 801eea8:	f3c0 4040 	ubfx	r0, r0, #17, #1
 801eeac:	182e      	adds	r6, r5, r0
 801eeae:	4276      	negs	r6, r6
 801eeb0:	e789      	b.n	801edc6 <Argus_Cal_UpdateLddXtalkVectors+0x3a6>
 801eeb2:	9a06      	ldr	r2, [sp, #24]
 801eeb4:	fb9e fefc 	sdiv	lr, lr, ip
 801eeb8:	f1ce 0e00 	rsb	lr, lr, #0
 801eebc:	9b03      	ldr	r3, [sp, #12]
 801eebe:	fb98 f7fc 	sdiv	r7, r8, ip
 801eec2:	fa0f fe8e 	sxth.w	lr, lr
 801eec6:	b3aa      	cbz	r2, 801ef34 <Argus_Cal_UpdateLddXtalkVectors+0x514>
 801eec8:	f9b3 3142 	ldrsh.w	r3, [r3, #322]	@ 0x142
 801eecc:	ebae 0e03 	sub.w	lr, lr, r3
 801eed0:	021b      	lsls	r3, r3, #8
 801eed2:	fb02 3e0e 	mla	lr, r2, lr, r3
 801eed6:	f1be 0f00 	cmp.w	lr, #0
 801eeda:	db37      	blt.n	801ef4c <Argus_Cal_UpdateLddXtalkVectors+0x52c>
 801eedc:	f3ce 13c0 	ubfx	r3, lr, #7, #1
 801eee0:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801eee4:	9b03      	ldr	r3, [sp, #12]
 801eee6:	427a      	negs	r2, r7
 801eee8:	f9b3 1144 	ldrsh.w	r1, [r3, #324]	@ 0x144
 801eeec:	f8a3 e142 	strh.w	lr, [r3, #322]	@ 0x142
 801eef0:	b212      	sxth	r2, r2
 801eef2:	1a52      	subs	r2, r2, r1
 801eef4:	020b      	lsls	r3, r1, #8
 801eef6:	9906      	ldr	r1, [sp, #24]
 801eef8:	fb01 3202 	mla	r2, r1, r2, r3
 801eefc:	2a00      	cmp	r2, #0
 801eefe:	db1e      	blt.n	801ef3e <Argus_Cal_UpdateLddXtalkVectors+0x51e>
 801ef00:	f3c2 13c0 	ubfx	r3, r2, #7, #1
 801ef04:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ef08:	b21b      	sxth	r3, r3
 801ef0a:	9a03      	ldr	r2, [sp, #12]
 801ef0c:	f10b 0b01 	add.w	fp, fp, #1
 801ef10:	f8a2 3144 	strh.w	r3, [r2, #324]	@ 0x144
 801ef14:	f1bb 0f04 	cmp.w	fp, #4
 801ef18:	f102 0304 	add.w	r3, r2, #4
 801ef1c:	9303      	str	r3, [sp, #12]
 801ef1e:	f47f af2b 	bne.w	801ed78 <Argus_Cal_UpdateLddXtalkVectors+0x358>
 801ef22:	9b07      	ldr	r3, [sp, #28]
 801ef24:	f8aa 3162 	strh.w	r3, [sl, #354]	@ 0x162
 801ef28:	9b04      	ldr	r3, [sp, #16]
 801ef2a:	9a05      	ldr	r2, [sp, #20]
 801ef2c:	f043 0301 	orr.w	r3, r3, #1
 801ef30:	6193      	str	r3, [r2, #24]
 801ef32:	e6f4      	b.n	801ed1e <Argus_Cal_UpdateLddXtalkVectors+0x2fe>
 801ef34:	427f      	negs	r7, r7
 801ef36:	f8a3 e142 	strh.w	lr, [r3, #322]	@ 0x142
 801ef3a:	b23b      	sxth	r3, r7
 801ef3c:	e7e5      	b.n	801ef0a <Argus_Cal_UpdateLddXtalkVectors+0x4ea>
 801ef3e:	4252      	negs	r2, r2
 801ef40:	f3c2 13c0 	ubfx	r3, r2, #7, #1
 801ef44:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ef48:	425b      	negs	r3, r3
 801ef4a:	e7dd      	b.n	801ef08 <Argus_Cal_UpdateLddXtalkVectors+0x4e8>
 801ef4c:	f1ce 0e00 	rsb	lr, lr, #0
 801ef50:	f3ce 13c0 	ubfx	r3, lr, #7, #1
 801ef54:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801ef58:	f1ce 0e00 	rsb	lr, lr, #0
 801ef5c:	e7c2      	b.n	801eee4 <Argus_Cal_UpdateLddXtalkVectors+0x4c4>
 801ef5e:	bf00      	nop

0801ef60 <Argus_Cal_GetXtalkVectors>:
 801ef60:	f9b0 c13a 	ldrsh.w	ip, [r0, #314]	@ 0x13a
 801ef64:	b510      	push	{r4, lr}
 801ef66:	f1bc 0f00 	cmp.w	ip, #0
 801ef6a:	9c02      	ldr	r4, [sp, #8]
 801ef6c:	f2c0 81d3 	blt.w	801f316 <Argus_Cal_GetXtalkVectors+0x3b6>
 801ef70:	b161      	cbz	r1, 801ef8c <Argus_Cal_GetXtalkVectors+0x2c>
 801ef72:	2920      	cmp	r1, #32
 801ef74:	f200 81e3 	bhi.w	801f33e <Argus_Cal_GetXtalkVectors+0x3de>
 801ef78:	f101 3eff 	add.w	lr, r1, #4294967295
 801ef7c:	fa2c fc0e 	lsr.w	ip, ip, lr
 801ef80:	f00c 0e01 	and.w	lr, ip, #1
 801ef84:	eb0e 0c5c 	add.w	ip, lr, ip, lsr #1
 801ef88:	fa0f fc8c 	sxth.w	ip, ip
 801ef8c:	f8a3 c000 	strh.w	ip, [r3]
 801ef90:	f9b0 c13c 	ldrsh.w	ip, [r0, #316]	@ 0x13c
 801ef94:	f1bc 0f00 	cmp.w	ip, #0
 801ef98:	f2c0 81a6 	blt.w	801f2e8 <Argus_Cal_GetXtalkVectors+0x388>
 801ef9c:	b161      	cbz	r1, 801efb8 <Argus_Cal_GetXtalkVectors+0x58>
 801ef9e:	2920      	cmp	r1, #32
 801efa0:	f200 81b6 	bhi.w	801f310 <Argus_Cal_GetXtalkVectors+0x3b0>
 801efa4:	f101 3eff 	add.w	lr, r1, #4294967295
 801efa8:	fa2c fc0e 	lsr.w	ip, ip, lr
 801efac:	f00c 0e01 	and.w	lr, ip, #1
 801efb0:	eb0e 0c5c 	add.w	ip, lr, ip, lsr #1
 801efb4:	fa0f fc8c 	sxth.w	ip, ip
 801efb8:	f8a3 c002 	strh.w	ip, [r3, #2]
 801efbc:	f9b0 c13e 	ldrsh.w	ip, [r0, #318]	@ 0x13e
 801efc0:	f1bc 0f00 	cmp.w	ip, #0
 801efc4:	f2c0 8175 	blt.w	801f2b2 <Argus_Cal_GetXtalkVectors+0x352>
 801efc8:	b161      	cbz	r1, 801efe4 <Argus_Cal_GetXtalkVectors+0x84>
 801efca:	2920      	cmp	r1, #32
 801efcc:	f200 8185 	bhi.w	801f2da <Argus_Cal_GetXtalkVectors+0x37a>
 801efd0:	f101 3eff 	add.w	lr, r1, #4294967295
 801efd4:	fa2c fc0e 	lsr.w	ip, ip, lr
 801efd8:	f00c 0e01 	and.w	lr, ip, #1
 801efdc:	eb0e 0c5c 	add.w	ip, lr, ip, lsr #1
 801efe0:	fa0f fc8c 	sxth.w	ip, ip
 801efe4:	f8a3 c004 	strh.w	ip, [r3, #4]
 801efe8:	f9b0 c140 	ldrsh.w	ip, [r0, #320]	@ 0x140
 801efec:	f1bc 0f00 	cmp.w	ip, #0
 801eff0:	f2c0 8119 	blt.w	801f226 <Argus_Cal_GetXtalkVectors+0x2c6>
 801eff4:	b161      	cbz	r1, 801f010 <Argus_Cal_GetXtalkVectors+0xb0>
 801eff6:	2920      	cmp	r1, #32
 801eff8:	f200 8158 	bhi.w	801f2ac <Argus_Cal_GetXtalkVectors+0x34c>
 801effc:	f101 3eff 	add.w	lr, r1, #4294967295
 801f000:	fa2c fc0e 	lsr.w	ip, ip, lr
 801f004:	f00c 0e01 	and.w	lr, ip, #1
 801f008:	eb0e 0c5c 	add.w	ip, lr, ip, lsr #1
 801f00c:	fa0f fc8c 	sxth.w	ip, ip
 801f010:	f8a3 c006 	strh.w	ip, [r3, #6]
 801f014:	eb00 1c02 	add.w	ip, r0, r2, lsl #4
 801f018:	f9bc 3142 	ldrsh.w	r3, [ip, #322]	@ 0x142
 801f01c:	2b00      	cmp	r3, #0
 801f01e:	f2c0 811e 	blt.w	801f25e <Argus_Cal_GetXtalkVectors+0x2fe>
 801f022:	b159      	cbz	r1, 801f03c <Argus_Cal_GetXtalkVectors+0xdc>
 801f024:	2920      	cmp	r1, #32
 801f026:	f200 815d 	bhi.w	801f2e4 <Argus_Cal_GetXtalkVectors+0x384>
 801f02a:	f101 3eff 	add.w	lr, r1, #4294967295
 801f02e:	fa23 f30e 	lsr.w	r3, r3, lr
 801f032:	f003 0e01 	and.w	lr, r3, #1
 801f036:	eb0e 0353 	add.w	r3, lr, r3, lsr #1
 801f03a:	b21b      	sxth	r3, r3
 801f03c:	8023      	strh	r3, [r4, #0]
 801f03e:	f9bc 3144 	ldrsh.w	r3, [ip, #324]	@ 0x144
 801f042:	2b00      	cmp	r3, #0
 801f044:	f2c0 8121 	blt.w	801f28a <Argus_Cal_GetXtalkVectors+0x32a>
 801f048:	b159      	cbz	r1, 801f062 <Argus_Cal_GetXtalkVectors+0x102>
 801f04a:	2920      	cmp	r1, #32
 801f04c:	f200 8148 	bhi.w	801f2e0 <Argus_Cal_GetXtalkVectors+0x380>
 801f050:	f101 3cff 	add.w	ip, r1, #4294967295
 801f054:	fa23 f30c 	lsr.w	r3, r3, ip
 801f058:	f003 0c01 	and.w	ip, r3, #1
 801f05c:	eb0c 0353 	add.w	r3, ip, r3, lsr #1
 801f060:	b21b      	sxth	r3, r3
 801f062:	0092      	lsls	r2, r2, #2
 801f064:	f102 0c01 	add.w	ip, r2, #1
 801f068:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 801f06c:	8063      	strh	r3, [r4, #2]
 801f06e:	f9bc 3142 	ldrsh.w	r3, [ip, #322]	@ 0x142
 801f072:	2b00      	cmp	r3, #0
 801f074:	f2c0 80c4 	blt.w	801f200 <Argus_Cal_GetXtalkVectors+0x2a0>
 801f078:	b159      	cbz	r1, 801f092 <Argus_Cal_GetXtalkVectors+0x132>
 801f07a:	2920      	cmp	r1, #32
 801f07c:	f200 80d1 	bhi.w	801f222 <Argus_Cal_GetXtalkVectors+0x2c2>
 801f080:	f101 3eff 	add.w	lr, r1, #4294967295
 801f084:	fa23 f30e 	lsr.w	r3, r3, lr
 801f088:	f003 0e01 	and.w	lr, r3, #1
 801f08c:	eb0e 0353 	add.w	r3, lr, r3, lsr #1
 801f090:	b21b      	sxth	r3, r3
 801f092:	80a3      	strh	r3, [r4, #4]
 801f094:	f9bc 3144 	ldrsh.w	r3, [ip, #324]	@ 0x144
 801f098:	2b00      	cmp	r3, #0
 801f09a:	f2c0 809e 	blt.w	801f1da <Argus_Cal_GetXtalkVectors+0x27a>
 801f09e:	b159      	cbz	r1, 801f0b8 <Argus_Cal_GetXtalkVectors+0x158>
 801f0a0:	2920      	cmp	r1, #32
 801f0a2:	f200 80ab 	bhi.w	801f1fc <Argus_Cal_GetXtalkVectors+0x29c>
 801f0a6:	f101 3cff 	add.w	ip, r1, #4294967295
 801f0aa:	fa23 f30c 	lsr.w	r3, r3, ip
 801f0ae:	f003 0c01 	and.w	ip, r3, #1
 801f0b2:	eb0c 0353 	add.w	r3, ip, r3, lsr #1
 801f0b6:	b21b      	sxth	r3, r3
 801f0b8:	f102 0c02 	add.w	ip, r2, #2
 801f0bc:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 801f0c0:	80e3      	strh	r3, [r4, #6]
 801f0c2:	f9bc 3142 	ldrsh.w	r3, [ip, #322]	@ 0x142
 801f0c6:	2b00      	cmp	r3, #0
 801f0c8:	db75      	blt.n	801f1b6 <Argus_Cal_GetXtalkVectors+0x256>
 801f0ca:	b159      	cbz	r1, 801f0e4 <Argus_Cal_GetXtalkVectors+0x184>
 801f0cc:	2920      	cmp	r1, #32
 801f0ce:	f200 8082 	bhi.w	801f1d6 <Argus_Cal_GetXtalkVectors+0x276>
 801f0d2:	f101 3eff 	add.w	lr, r1, #4294967295
 801f0d6:	fa23 f30e 	lsr.w	r3, r3, lr
 801f0da:	f003 0e01 	and.w	lr, r3, #1
 801f0de:	eb0e 0353 	add.w	r3, lr, r3, lsr #1
 801f0e2:	b21b      	sxth	r3, r3
 801f0e4:	8123      	strh	r3, [r4, #8]
 801f0e6:	f9bc 3144 	ldrsh.w	r3, [ip, #324]	@ 0x144
 801f0ea:	2b00      	cmp	r3, #0
 801f0ec:	db51      	blt.n	801f192 <Argus_Cal_GetXtalkVectors+0x232>
 801f0ee:	b151      	cbz	r1, 801f106 <Argus_Cal_GetXtalkVectors+0x1a6>
 801f0f0:	2920      	cmp	r1, #32
 801f0f2:	d85e      	bhi.n	801f1b2 <Argus_Cal_GetXtalkVectors+0x252>
 801f0f4:	f101 3cff 	add.w	ip, r1, #4294967295
 801f0f8:	fa23 f30c 	lsr.w	r3, r3, ip
 801f0fc:	f003 0c01 	and.w	ip, r3, #1
 801f100:	eb0c 0353 	add.w	r3, ip, r3, lsr #1
 801f104:	b21b      	sxth	r3, r3
 801f106:	3203      	adds	r2, #3
 801f108:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801f10c:	8163      	strh	r3, [r4, #10]
 801f10e:	f9b2 3142 	ldrsh.w	r3, [r2, #322]	@ 0x142
 801f112:	2b00      	cmp	r3, #0
 801f114:	db2d      	blt.n	801f172 <Argus_Cal_GetXtalkVectors+0x212>
 801f116:	b141      	cbz	r1, 801f12a <Argus_Cal_GetXtalkVectors+0x1ca>
 801f118:	2920      	cmp	r1, #32
 801f11a:	d838      	bhi.n	801f18e <Argus_Cal_GetXtalkVectors+0x22e>
 801f11c:	1e48      	subs	r0, r1, #1
 801f11e:	40c3      	lsrs	r3, r0
 801f120:	f003 0001 	and.w	r0, r3, #1
 801f124:	eb00 0353 	add.w	r3, r0, r3, lsr #1
 801f128:	b21b      	sxth	r3, r3
 801f12a:	81a3      	strh	r3, [r4, #12]
 801f12c:	f9b2 3144 	ldrsh.w	r3, [r2, #324]	@ 0x144
 801f130:	2b00      	cmp	r3, #0
 801f132:	db0c      	blt.n	801f14e <Argus_Cal_GetXtalkVectors+0x1ee>
 801f134:	b149      	cbz	r1, 801f14a <Argus_Cal_GetXtalkVectors+0x1ea>
 801f136:	2920      	cmp	r1, #32
 801f138:	d818      	bhi.n	801f16c <Argus_Cal_GetXtalkVectors+0x20c>
 801f13a:	3901      	subs	r1, #1
 801f13c:	fa23 f101 	lsr.w	r1, r3, r1
 801f140:	f001 0301 	and.w	r3, r1, #1
 801f144:	eb03 0151 	add.w	r1, r3, r1, lsr #1
 801f148:	b20b      	sxth	r3, r1
 801f14a:	81e3      	strh	r3, [r4, #14]
 801f14c:	bd10      	pop	{r4, pc}
 801f14e:	425a      	negs	r2, r3
 801f150:	2900      	cmp	r1, #0
 801f152:	d0fa      	beq.n	801f14a <Argus_Cal_GetXtalkVectors+0x1ea>
 801f154:	2920      	cmp	r1, #32
 801f156:	d809      	bhi.n	801f16c <Argus_Cal_GetXtalkVectors+0x20c>
 801f158:	1e4b      	subs	r3, r1, #1
 801f15a:	40da      	lsrs	r2, r3
 801f15c:	f002 0301 	and.w	r3, r2, #1
 801f160:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 801f164:	425b      	negs	r3, r3
 801f166:	b21b      	sxth	r3, r3
 801f168:	81e3      	strh	r3, [r4, #14]
 801f16a:	bd10      	pop	{r4, pc}
 801f16c:	2300      	movs	r3, #0
 801f16e:	81e3      	strh	r3, [r4, #14]
 801f170:	bd10      	pop	{r4, pc}
 801f172:	4258      	negs	r0, r3
 801f174:	2900      	cmp	r1, #0
 801f176:	d0d8      	beq.n	801f12a <Argus_Cal_GetXtalkVectors+0x1ca>
 801f178:	2920      	cmp	r1, #32
 801f17a:	d808      	bhi.n	801f18e <Argus_Cal_GetXtalkVectors+0x22e>
 801f17c:	1e4b      	subs	r3, r1, #1
 801f17e:	40d8      	lsrs	r0, r3
 801f180:	f000 0301 	and.w	r3, r0, #1
 801f184:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 801f188:	425b      	negs	r3, r3
 801f18a:	b21b      	sxth	r3, r3
 801f18c:	e7cd      	b.n	801f12a <Argus_Cal_GetXtalkVectors+0x1ca>
 801f18e:	2300      	movs	r3, #0
 801f190:	e7cb      	b.n	801f12a <Argus_Cal_GetXtalkVectors+0x1ca>
 801f192:	f1c3 0c00 	rsb	ip, r3, #0
 801f196:	2900      	cmp	r1, #0
 801f198:	d0b5      	beq.n	801f106 <Argus_Cal_GetXtalkVectors+0x1a6>
 801f19a:	2920      	cmp	r1, #32
 801f19c:	d809      	bhi.n	801f1b2 <Argus_Cal_GetXtalkVectors+0x252>
 801f19e:	1e4b      	subs	r3, r1, #1
 801f1a0:	fa2c fc03 	lsr.w	ip, ip, r3
 801f1a4:	f00c 0301 	and.w	r3, ip, #1
 801f1a8:	eb03 035c 	add.w	r3, r3, ip, lsr #1
 801f1ac:	425b      	negs	r3, r3
 801f1ae:	b21b      	sxth	r3, r3
 801f1b0:	e7a9      	b.n	801f106 <Argus_Cal_GetXtalkVectors+0x1a6>
 801f1b2:	2300      	movs	r3, #0
 801f1b4:	e7a7      	b.n	801f106 <Argus_Cal_GetXtalkVectors+0x1a6>
 801f1b6:	f1c3 0e00 	rsb	lr, r3, #0
 801f1ba:	2900      	cmp	r1, #0
 801f1bc:	d092      	beq.n	801f0e4 <Argus_Cal_GetXtalkVectors+0x184>
 801f1be:	2920      	cmp	r1, #32
 801f1c0:	d809      	bhi.n	801f1d6 <Argus_Cal_GetXtalkVectors+0x276>
 801f1c2:	1e4b      	subs	r3, r1, #1
 801f1c4:	fa2e fe03 	lsr.w	lr, lr, r3
 801f1c8:	f00e 0301 	and.w	r3, lr, #1
 801f1cc:	eb03 035e 	add.w	r3, r3, lr, lsr #1
 801f1d0:	425b      	negs	r3, r3
 801f1d2:	b21b      	sxth	r3, r3
 801f1d4:	e786      	b.n	801f0e4 <Argus_Cal_GetXtalkVectors+0x184>
 801f1d6:	2300      	movs	r3, #0
 801f1d8:	e784      	b.n	801f0e4 <Argus_Cal_GetXtalkVectors+0x184>
 801f1da:	f1c3 0c00 	rsb	ip, r3, #0
 801f1de:	2900      	cmp	r1, #0
 801f1e0:	f43f af6a 	beq.w	801f0b8 <Argus_Cal_GetXtalkVectors+0x158>
 801f1e4:	2920      	cmp	r1, #32
 801f1e6:	d809      	bhi.n	801f1fc <Argus_Cal_GetXtalkVectors+0x29c>
 801f1e8:	1e4b      	subs	r3, r1, #1
 801f1ea:	fa2c fc03 	lsr.w	ip, ip, r3
 801f1ee:	f00c 0301 	and.w	r3, ip, #1
 801f1f2:	eb03 035c 	add.w	r3, r3, ip, lsr #1
 801f1f6:	425b      	negs	r3, r3
 801f1f8:	b21b      	sxth	r3, r3
 801f1fa:	e75d      	b.n	801f0b8 <Argus_Cal_GetXtalkVectors+0x158>
 801f1fc:	2300      	movs	r3, #0
 801f1fe:	e75b      	b.n	801f0b8 <Argus_Cal_GetXtalkVectors+0x158>
 801f200:	f1c3 0e00 	rsb	lr, r3, #0
 801f204:	2900      	cmp	r1, #0
 801f206:	f43f af44 	beq.w	801f092 <Argus_Cal_GetXtalkVectors+0x132>
 801f20a:	2920      	cmp	r1, #32
 801f20c:	d809      	bhi.n	801f222 <Argus_Cal_GetXtalkVectors+0x2c2>
 801f20e:	1e4b      	subs	r3, r1, #1
 801f210:	fa2e fe03 	lsr.w	lr, lr, r3
 801f214:	f00e 0301 	and.w	r3, lr, #1
 801f218:	eb03 035e 	add.w	r3, r3, lr, lsr #1
 801f21c:	425b      	negs	r3, r3
 801f21e:	b21b      	sxth	r3, r3
 801f220:	e737      	b.n	801f092 <Argus_Cal_GetXtalkVectors+0x132>
 801f222:	2300      	movs	r3, #0
 801f224:	e735      	b.n	801f092 <Argus_Cal_GetXtalkVectors+0x132>
 801f226:	f1cc 0e00 	rsb	lr, ip, #0
 801f22a:	2900      	cmp	r1, #0
 801f22c:	f43f aef0 	beq.w	801f010 <Argus_Cal_GetXtalkVectors+0xb0>
 801f230:	2920      	cmp	r1, #32
 801f232:	d83b      	bhi.n	801f2ac <Argus_Cal_GetXtalkVectors+0x34c>
 801f234:	f101 3cff 	add.w	ip, r1, #4294967295
 801f238:	fa2e fe0c 	lsr.w	lr, lr, ip
 801f23c:	f00e 0c01 	and.w	ip, lr, #1
 801f240:	eb0c 0c5e 	add.w	ip, ip, lr, lsr #1
 801f244:	f1cc 0c00 	rsb	ip, ip, #0
 801f248:	fa0f fc8c 	sxth.w	ip, ip
 801f24c:	f8a3 c006 	strh.w	ip, [r3, #6]
 801f250:	eb00 1c02 	add.w	ip, r0, r2, lsl #4
 801f254:	f9bc 3142 	ldrsh.w	r3, [ip, #322]	@ 0x142
 801f258:	2b00      	cmp	r3, #0
 801f25a:	f6bf aee2 	bge.w	801f022 <Argus_Cal_GetXtalkVectors+0xc2>
 801f25e:	f1c3 0e00 	rsb	lr, r3, #0
 801f262:	2900      	cmp	r1, #0
 801f264:	f43f aeea 	beq.w	801f03c <Argus_Cal_GetXtalkVectors+0xdc>
 801f268:	2920      	cmp	r1, #32
 801f26a:	d83b      	bhi.n	801f2e4 <Argus_Cal_GetXtalkVectors+0x384>
 801f26c:	1e4b      	subs	r3, r1, #1
 801f26e:	fa2e fe03 	lsr.w	lr, lr, r3
 801f272:	f00e 0301 	and.w	r3, lr, #1
 801f276:	eb03 035e 	add.w	r3, r3, lr, lsr #1
 801f27a:	425b      	negs	r3, r3
 801f27c:	b21b      	sxth	r3, r3
 801f27e:	8023      	strh	r3, [r4, #0]
 801f280:	f9bc 3144 	ldrsh.w	r3, [ip, #324]	@ 0x144
 801f284:	2b00      	cmp	r3, #0
 801f286:	f6bf aedf 	bge.w	801f048 <Argus_Cal_GetXtalkVectors+0xe8>
 801f28a:	f1c3 0c00 	rsb	ip, r3, #0
 801f28e:	2900      	cmp	r1, #0
 801f290:	f43f aee7 	beq.w	801f062 <Argus_Cal_GetXtalkVectors+0x102>
 801f294:	2920      	cmp	r1, #32
 801f296:	d823      	bhi.n	801f2e0 <Argus_Cal_GetXtalkVectors+0x380>
 801f298:	1e4b      	subs	r3, r1, #1
 801f29a:	fa2c fc03 	lsr.w	ip, ip, r3
 801f29e:	f00c 0301 	and.w	r3, ip, #1
 801f2a2:	eb03 035c 	add.w	r3, r3, ip, lsr #1
 801f2a6:	425b      	negs	r3, r3
 801f2a8:	b21b      	sxth	r3, r3
 801f2aa:	e6da      	b.n	801f062 <Argus_Cal_GetXtalkVectors+0x102>
 801f2ac:	f04f 0c00 	mov.w	ip, #0
 801f2b0:	e6ae      	b.n	801f010 <Argus_Cal_GetXtalkVectors+0xb0>
 801f2b2:	f1cc 0e00 	rsb	lr, ip, #0
 801f2b6:	2900      	cmp	r1, #0
 801f2b8:	f43f ae94 	beq.w	801efe4 <Argus_Cal_GetXtalkVectors+0x84>
 801f2bc:	2920      	cmp	r1, #32
 801f2be:	d80c      	bhi.n	801f2da <Argus_Cal_GetXtalkVectors+0x37a>
 801f2c0:	f101 3cff 	add.w	ip, r1, #4294967295
 801f2c4:	fa2e fe0c 	lsr.w	lr, lr, ip
 801f2c8:	f00e 0c01 	and.w	ip, lr, #1
 801f2cc:	eb0c 0c5e 	add.w	ip, ip, lr, lsr #1
 801f2d0:	f1cc 0c00 	rsb	ip, ip, #0
 801f2d4:	fa0f fc8c 	sxth.w	ip, ip
 801f2d8:	e684      	b.n	801efe4 <Argus_Cal_GetXtalkVectors+0x84>
 801f2da:	f04f 0c00 	mov.w	ip, #0
 801f2de:	e681      	b.n	801efe4 <Argus_Cal_GetXtalkVectors+0x84>
 801f2e0:	2300      	movs	r3, #0
 801f2e2:	e6be      	b.n	801f062 <Argus_Cal_GetXtalkVectors+0x102>
 801f2e4:	2300      	movs	r3, #0
 801f2e6:	e6a9      	b.n	801f03c <Argus_Cal_GetXtalkVectors+0xdc>
 801f2e8:	f1cc 0e00 	rsb	lr, ip, #0
 801f2ec:	2900      	cmp	r1, #0
 801f2ee:	f43f ae63 	beq.w	801efb8 <Argus_Cal_GetXtalkVectors+0x58>
 801f2f2:	2920      	cmp	r1, #32
 801f2f4:	d80c      	bhi.n	801f310 <Argus_Cal_GetXtalkVectors+0x3b0>
 801f2f6:	f101 3cff 	add.w	ip, r1, #4294967295
 801f2fa:	fa2e fe0c 	lsr.w	lr, lr, ip
 801f2fe:	f00e 0c01 	and.w	ip, lr, #1
 801f302:	eb0c 0c5e 	add.w	ip, ip, lr, lsr #1
 801f306:	f1cc 0c00 	rsb	ip, ip, #0
 801f30a:	fa0f fc8c 	sxth.w	ip, ip
 801f30e:	e653      	b.n	801efb8 <Argus_Cal_GetXtalkVectors+0x58>
 801f310:	f04f 0c00 	mov.w	ip, #0
 801f314:	e650      	b.n	801efb8 <Argus_Cal_GetXtalkVectors+0x58>
 801f316:	f1cc 0e00 	rsb	lr, ip, #0
 801f31a:	2900      	cmp	r1, #0
 801f31c:	f43f ae36 	beq.w	801ef8c <Argus_Cal_GetXtalkVectors+0x2c>
 801f320:	2920      	cmp	r1, #32
 801f322:	d80c      	bhi.n	801f33e <Argus_Cal_GetXtalkVectors+0x3de>
 801f324:	f101 3cff 	add.w	ip, r1, #4294967295
 801f328:	fa2e fe0c 	lsr.w	lr, lr, ip
 801f32c:	f00e 0c01 	and.w	ip, lr, #1
 801f330:	eb0c 0c5e 	add.w	ip, ip, lr, lsr #1
 801f334:	f1cc 0c00 	rsb	ip, ip, #0
 801f338:	fa0f fc8c 	sxth.w	ip, ip
 801f33c:	e626      	b.n	801ef8c <Argus_Cal_GetXtalkVectors+0x2c>
 801f33e:	f04f 0c00 	mov.w	ip, #0
 801f342:	e623      	b.n	801ef8c <Argus_Cal_GetXtalkVectors+0x2c>

0801f344 <Argus_OnGetDefaultCalibration>:
 801f344:	4770      	bx	lr
 801f346:	bf00      	nop

0801f348 <Argus_GetPixelRangeOffsets_Callback>:
 801f348:	2280      	movs	r2, #128	@ 0x80
 801f34a:	2100      	movs	r1, #0
 801f34c:	f004 ba49 	b.w	80237e2 <memset>

0801f350 <Argus_Cal_GetInternalPixelRangeOffsets>:
 801f350:	b570      	push	{r4, r5, r6, lr}
 801f352:	4604      	mov	r4, r0
 801f354:	2b47      	cmp	r3, #71	@ 0x47
 801f356:	d849      	bhi.n	801f3ec <Argus_Cal_GetInternalPixelRangeOffsets+0x9c>
 801f358:	e8df f013 	tbh	[pc, r3, lsl #1]
 801f35c:	004b0151 	.word	0x004b0151
 801f360:	004b004b 	.word	0x004b004b
 801f364:	004b0148 	.word	0x004b0148
 801f368:	004b004b 	.word	0x004b004b
 801f36c:	00480048 	.word	0x00480048
 801f370:	00480048 	.word	0x00480048
 801f374:	00480048 	.word	0x00480048
 801f378:	00480048 	.word	0x00480048
 801f37c:	00480048 	.word	0x00480048
 801f380:	00480048 	.word	0x00480048
 801f384:	00480048 	.word	0x00480048
 801f388:	00480048 	.word	0x00480048
 801f38c:	00480048 	.word	0x00480048
 801f390:	00480048 	.word	0x00480048
 801f394:	00480048 	.word	0x00480048
 801f398:	00480048 	.word	0x00480048
 801f39c:	00480048 	.word	0x00480048
 801f3a0:	00480048 	.word	0x00480048
 801f3a4:	00480048 	.word	0x00480048
 801f3a8:	00480048 	.word	0x00480048
 801f3ac:	00480048 	.word	0x00480048
 801f3b0:	00480048 	.word	0x00480048
 801f3b4:	00480048 	.word	0x00480048
 801f3b8:	00480048 	.word	0x00480048
 801f3bc:	00480048 	.word	0x00480048
 801f3c0:	00480048 	.word	0x00480048
 801f3c4:	00480048 	.word	0x00480048
 801f3c8:	00480048 	.word	0x00480048
 801f3cc:	00480048 	.word	0x00480048
 801f3d0:	00480048 	.word	0x00480048
 801f3d4:	00480048 	.word	0x00480048
 801f3d8:	00480048 	.word	0x00480048
 801f3dc:	00480048 	.word	0x00480048
 801f3e0:	004b0048 	.word	0x004b0048
 801f3e4:	004b0148 	.word	0x004b0148
 801f3e8:	004b004b 	.word	0x004b004b
 801f3ec:	f06f 00c6 	mvn.w	r0, #198	@ 0xc6
 801f3f0:	bd70      	pop	{r4, r5, r6, pc}
 801f3f2:	f891 107b 	ldrb.w	r1, [r1, #123]	@ 0x7b
 801f3f6:	0989      	lsrs	r1, r1, #6
 801f3f8:	2902      	cmp	r1, #2
 801f3fa:	f000 8110 	beq.w	801f61e <Argus_Cal_GetInternalPixelRangeOffsets+0x2ce>
 801f3fe:	4e8e      	ldr	r6, [pc, #568]	@ (801f638 <Argus_Cal_GetInternalPixelRangeOffsets+0x2e8>)
 801f400:	2903      	cmp	r1, #3
 801f402:	f000 8106 	beq.w	801f612 <Argus_Cal_GetInternalPixelRangeOffsets+0x2c2>
 801f406:	2900      	cmp	r1, #0
 801f408:	f000 8111 	beq.w	801f62e <Argus_Cal_GetInternalPixelRangeOffsets+0x2de>
 801f40c:	2500      	movs	r5, #0
 801f40e:	2280      	movs	r2, #128	@ 0x80
 801f410:	2100      	movs	r1, #0
 801f412:	4620      	mov	r0, r4
 801f414:	f004 f9e5 	bl	80237e2 <memset>
 801f418:	2e00      	cmp	r6, #0
 801f41a:	f000 80e5 	beq.w	801f5e8 <Argus_Cal_GetInternalPixelRangeOffsets+0x298>
 801f41e:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 801f422:	f936 3015 	ldrsh.w	r3, [r6, r5, lsl #1]
 801f426:	8023      	strh	r3, [r4, #0]
 801f428:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801f42c:	8063      	strh	r3, [r4, #2]
 801f42e:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 801f432:	80a3      	strh	r3, [r4, #4]
 801f434:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 801f438:	80e3      	strh	r3, [r4, #6]
 801f43a:	f9b2 3010 	ldrsh.w	r3, [r2, #16]
 801f43e:	8123      	strh	r3, [r4, #8]
 801f440:	f9b2 3014 	ldrsh.w	r3, [r2, #20]
 801f444:	8163      	strh	r3, [r4, #10]
 801f446:	f9b2 3018 	ldrsh.w	r3, [r2, #24]
 801f44a:	81a3      	strh	r3, [r4, #12]
 801f44c:	f9b2 301c 	ldrsh.w	r3, [r2, #28]
 801f450:	81e3      	strh	r3, [r4, #14]
 801f452:	f9b2 3020 	ldrsh.w	r3, [r2, #32]
 801f456:	8223      	strh	r3, [r4, #16]
 801f458:	f9b2 3024 	ldrsh.w	r3, [r2, #36]	@ 0x24
 801f45c:	8263      	strh	r3, [r4, #18]
 801f45e:	f9b2 3028 	ldrsh.w	r3, [r2, #40]	@ 0x28
 801f462:	82a3      	strh	r3, [r4, #20]
 801f464:	f9b2 302c 	ldrsh.w	r3, [r2, #44]	@ 0x2c
 801f468:	82e3      	strh	r3, [r4, #22]
 801f46a:	f9b2 3030 	ldrsh.w	r3, [r2, #48]	@ 0x30
 801f46e:	8323      	strh	r3, [r4, #24]
 801f470:	f9b2 3034 	ldrsh.w	r3, [r2, #52]	@ 0x34
 801f474:	8363      	strh	r3, [r4, #26]
 801f476:	f9b2 3038 	ldrsh.w	r3, [r2, #56]	@ 0x38
 801f47a:	83a3      	strh	r3, [r4, #28]
 801f47c:	f9b2 303c 	ldrsh.w	r3, [r2, #60]	@ 0x3c
 801f480:	83e3      	strh	r3, [r4, #30]
 801f482:	f9b2 3040 	ldrsh.w	r3, [r2, #64]	@ 0x40
 801f486:	8423      	strh	r3, [r4, #32]
 801f488:	f9b2 3044 	ldrsh.w	r3, [r2, #68]	@ 0x44
 801f48c:	8463      	strh	r3, [r4, #34]	@ 0x22
 801f48e:	f9b2 3048 	ldrsh.w	r3, [r2, #72]	@ 0x48
 801f492:	84a3      	strh	r3, [r4, #36]	@ 0x24
 801f494:	f9b2 304c 	ldrsh.w	r3, [r2, #76]	@ 0x4c
 801f498:	84e3      	strh	r3, [r4, #38]	@ 0x26
 801f49a:	f9b2 3050 	ldrsh.w	r3, [r2, #80]	@ 0x50
 801f49e:	8523      	strh	r3, [r4, #40]	@ 0x28
 801f4a0:	f9b2 3054 	ldrsh.w	r3, [r2, #84]	@ 0x54
 801f4a4:	8563      	strh	r3, [r4, #42]	@ 0x2a
 801f4a6:	f9b2 3058 	ldrsh.w	r3, [r2, #88]	@ 0x58
 801f4aa:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 801f4ac:	f9b2 305c 	ldrsh.w	r3, [r2, #92]	@ 0x5c
 801f4b0:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 801f4b2:	f9b2 3060 	ldrsh.w	r3, [r2, #96]	@ 0x60
 801f4b6:	8623      	strh	r3, [r4, #48]	@ 0x30
 801f4b8:	f9b2 3064 	ldrsh.w	r3, [r2, #100]	@ 0x64
 801f4bc:	8663      	strh	r3, [r4, #50]	@ 0x32
 801f4be:	f9b2 3068 	ldrsh.w	r3, [r2, #104]	@ 0x68
 801f4c2:	86a3      	strh	r3, [r4, #52]	@ 0x34
 801f4c4:	f9b2 306c 	ldrsh.w	r3, [r2, #108]	@ 0x6c
 801f4c8:	86e3      	strh	r3, [r4, #54]	@ 0x36
 801f4ca:	f9b2 3070 	ldrsh.w	r3, [r2, #112]	@ 0x70
 801f4ce:	8723      	strh	r3, [r4, #56]	@ 0x38
 801f4d0:	f9b2 3074 	ldrsh.w	r3, [r2, #116]	@ 0x74
 801f4d4:	8763      	strh	r3, [r4, #58]	@ 0x3a
 801f4d6:	f9b2 3078 	ldrsh.w	r3, [r2, #120]	@ 0x78
 801f4da:	87a3      	strh	r3, [r4, #60]	@ 0x3c
 801f4dc:	f9b2 307c 	ldrsh.w	r3, [r2, #124]	@ 0x7c
 801f4e0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 801f4e2:	3540      	adds	r5, #64	@ 0x40
 801f4e4:	eb06 0345 	add.w	r3, r6, r5, lsl #1
 801f4e8:	f936 2015 	ldrsh.w	r2, [r6, r5, lsl #1]
 801f4ec:	f8a4 2040 	strh.w	r2, [r4, #64]	@ 0x40
 801f4f0:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801f4f4:	f8a4 2042 	strh.w	r2, [r4, #66]	@ 0x42
 801f4f8:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801f4fc:	f8a4 2044 	strh.w	r2, [r4, #68]	@ 0x44
 801f500:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f504:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 801f508:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 801f50c:	f8a4 2048 	strh.w	r2, [r4, #72]	@ 0x48
 801f510:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 801f514:	f8a4 204a 	strh.w	r2, [r4, #74]	@ 0x4a
 801f518:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 801f51c:	f8a4 204c 	strh.w	r2, [r4, #76]	@ 0x4c
 801f520:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 801f524:	f8a4 204e 	strh.w	r2, [r4, #78]	@ 0x4e
 801f528:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 801f52c:	f8a4 2050 	strh.w	r2, [r4, #80]	@ 0x50
 801f530:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 801f534:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
 801f538:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	@ 0x28
 801f53c:	f8a4 2054 	strh.w	r2, [r4, #84]	@ 0x54
 801f540:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	@ 0x2c
 801f544:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
 801f548:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 801f54c:	f8a4 2058 	strh.w	r2, [r4, #88]	@ 0x58
 801f550:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	@ 0x34
 801f554:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801f558:	f9b3 2038 	ldrsh.w	r2, [r3, #56]	@ 0x38
 801f55c:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 801f560:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	@ 0x3c
 801f564:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 801f568:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	@ 0x40
 801f56c:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
 801f570:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	@ 0x44
 801f574:	f8a4 2062 	strh.w	r2, [r4, #98]	@ 0x62
 801f578:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	@ 0x48
 801f57c:	f8a4 2064 	strh.w	r2, [r4, #100]	@ 0x64
 801f580:	f9b3 204c 	ldrsh.w	r2, [r3, #76]	@ 0x4c
 801f584:	f8a4 2066 	strh.w	r2, [r4, #102]	@ 0x66
 801f588:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	@ 0x50
 801f58c:	f8a4 2068 	strh.w	r2, [r4, #104]	@ 0x68
 801f590:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	@ 0x54
 801f594:	f8a4 206a 	strh.w	r2, [r4, #106]	@ 0x6a
 801f598:	f9b3 2058 	ldrsh.w	r2, [r3, #88]	@ 0x58
 801f59c:	f8a4 206c 	strh.w	r2, [r4, #108]	@ 0x6c
 801f5a0:	f9b3 205c 	ldrsh.w	r2, [r3, #92]	@ 0x5c
 801f5a4:	f8a4 206e 	strh.w	r2, [r4, #110]	@ 0x6e
 801f5a8:	f9b3 2060 	ldrsh.w	r2, [r3, #96]	@ 0x60
 801f5ac:	f8a4 2070 	strh.w	r2, [r4, #112]	@ 0x70
 801f5b0:	f9b3 2064 	ldrsh.w	r2, [r3, #100]	@ 0x64
 801f5b4:	f8a4 2072 	strh.w	r2, [r4, #114]	@ 0x72
 801f5b8:	f9b3 2068 	ldrsh.w	r2, [r3, #104]	@ 0x68
 801f5bc:	f8a4 2074 	strh.w	r2, [r4, #116]	@ 0x74
 801f5c0:	f9b3 206c 	ldrsh.w	r2, [r3, #108]	@ 0x6c
 801f5c4:	f8a4 2076 	strh.w	r2, [r4, #118]	@ 0x76
 801f5c8:	f9b3 2070 	ldrsh.w	r2, [r3, #112]	@ 0x70
 801f5cc:	f8a4 2078 	strh.w	r2, [r4, #120]	@ 0x78
 801f5d0:	f9b3 2074 	ldrsh.w	r2, [r3, #116]	@ 0x74
 801f5d4:	f8a4 207a 	strh.w	r2, [r4, #122]	@ 0x7a
 801f5d8:	f9b3 2078 	ldrsh.w	r2, [r3, #120]	@ 0x78
 801f5dc:	f8a4 207c 	strh.w	r2, [r4, #124]	@ 0x7c
 801f5e0:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	@ 0x7c
 801f5e4:	f8a4 307e 	strh.w	r3, [r4, #126]	@ 0x7e
 801f5e8:	2000      	movs	r0, #0
 801f5ea:	bd70      	pop	{r4, r5, r6, pc}
 801f5ec:	f891 107b 	ldrb.w	r1, [r1, #123]	@ 0x7b
 801f5f0:	4e12      	ldr	r6, [pc, #72]	@ (801f63c <Argus_Cal_GetInternalPixelRangeOffsets+0x2ec>)
 801f5f2:	0989      	lsrs	r1, r1, #6
 801f5f4:	2902      	cmp	r1, #2
 801f5f6:	f47f af03 	bne.w	801f400 <Argus_Cal_GetInternalPixelRangeOffsets+0xb0>
 801f5fa:	2501      	movs	r5, #1
 801f5fc:	e707      	b.n	801f40e <Argus_Cal_GetInternalPixelRangeOffsets+0xbe>
 801f5fe:	f891 107b 	ldrb.w	r1, [r1, #123]	@ 0x7b
 801f602:	0989      	lsrs	r1, r1, #6
 801f604:	2902      	cmp	r1, #2
 801f606:	d004      	beq.n	801f612 <Argus_Cal_GetInternalPixelRangeOffsets+0x2c2>
 801f608:	2903      	cmp	r1, #3
 801f60a:	f04f 0600 	mov.w	r6, #0
 801f60e:	f47f aefa 	bne.w	801f406 <Argus_Cal_GetInternalPixelRangeOffsets+0xb6>
 801f612:	2280      	movs	r2, #128	@ 0x80
 801f614:	2100      	movs	r1, #0
 801f616:	4620      	mov	r0, r4
 801f618:	f004 f8e3 	bl	80237e2 <memset>
 801f61c:	e7e4      	b.n	801f5e8 <Argus_Cal_GetInternalPixelRangeOffsets+0x298>
 801f61e:	2280      	movs	r2, #128	@ 0x80
 801f620:	2100      	movs	r1, #0
 801f622:	4620      	mov	r0, r4
 801f624:	f004 f8dd 	bl	80237e2 <memset>
 801f628:	4e03      	ldr	r6, [pc, #12]	@ (801f638 <Argus_Cal_GetInternalPixelRangeOffsets+0x2e8>)
 801f62a:	2501      	movs	r5, #1
 801f62c:	e6f7      	b.n	801f41e <Argus_Cal_GetInternalPixelRangeOffsets+0xce>
 801f62e:	2280      	movs	r2, #128	@ 0x80
 801f630:	4620      	mov	r0, r4
 801f632:	f004 f8d6 	bl	80237e2 <memset>
 801f636:	e7d7      	b.n	801f5e8 <Argus_Cal_GetInternalPixelRangeOffsets+0x298>
 801f638:	0802a418 	.word	0x0802a418
 801f63c:	0802a518 	.word	0x0802a518

0801f640 <Argus_GetCrosstalkVectorTable_Callback>:
 801f640:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801f644:	2100      	movs	r1, #0
 801f646:	f004 b8cc 	b.w	80237e2 <memset>
 801f64a:	bf00      	nop

0801f64c <Argus_Cal_GetInternalXtalkVectorTable>:
 801f64c:	2b05      	cmp	r3, #5
 801f64e:	f200 80c0 	bhi.w	801f7d2 <Argus_Cal_GetInternalXtalkVectorTable+0x186>
 801f652:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f656:	4615      	mov	r5, r2
 801f658:	4a5f      	ldr	r2, [pc, #380]	@ (801f7d8 <Argus_Cal_GetInternalXtalkVectorTable+0x18c>)
 801f65a:	f891 80ac 	ldrb.w	r8, [r1, #172]	@ 0xac
 801f65e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801f662:	f891 307b 	ldrb.w	r3, [r1, #123]	@ 0x7b
 801f666:	099e      	lsrs	r6, r3, #6
 801f668:	2e02      	cmp	r6, #2
 801f66a:	b083      	sub	sp, #12
 801f66c:	4607      	mov	r7, r0
 801f66e:	f000 80ae 	beq.w	801f7ce <Argus_Cal_GetInternalXtalkVectorTable+0x182>
 801f672:	2e03      	cmp	r6, #3
 801f674:	f000 80a8 	beq.w	801f7c8 <Argus_Cal_GetInternalXtalkVectorTable+0x17c>
 801f678:	2e00      	cmp	r6, #0
 801f67a:	f000 80a6 	beq.w	801f7ca <Argus_Cal_GetInternalXtalkVectorTable+0x17e>
 801f67e:	2600      	movs	r6, #0
 801f680:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801f684:	2100      	movs	r1, #0
 801f686:	4638      	mov	r0, r7
 801f688:	f004 f8ab 	bl	80237e2 <memset>
 801f68c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 801f690:	eb03 0c08 	add.w	ip, r3, r8
 801f694:	f9b5 62ac 	ldrsh.w	r6, [r5, #684]	@ 0x2ac
 801f698:	f895 222a 	ldrb.w	r2, [r5, #554]	@ 0x22a
 801f69c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 801f6a0:	f507 79c0 	add.w	r9, r7, #384	@ 0x180
 801f6a4:	f9b5 72aa 	ldrsh.w	r7, [r5, #682]	@ 0x2aa
 801f6a8:	9300      	str	r3, [sp, #0]
 801f6aa:	f895 322b 	ldrb.w	r3, [r5, #555]	@ 0x22b
 801f6ae:	4279      	negs	r1, r7
 801f6b0:	f1c6 0e00 	rsb	lr, r6, #0
 801f6b4:	fb8e e003 	smull	lr, r0, lr, r3
 801f6b8:	fb81 1a02 	smull	r1, sl, r1, r2
 801f6bc:	fb86 3803 	smull	r3, r8, r6, r3
 801f6c0:	fb87 2b02 	smull	r2, fp, r7, r2
 801f6c4:	9001      	str	r0, [sp, #4]
 801f6c6:	4640      	mov	r0, r8
 801f6c8:	ea4f 18d2 	mov.w	r8, r2, lsr #7
 801f6cc:	ea48 684b 	orr.w	r8, r8, fp, lsl #25
 801f6d0:	f3c2 1280 	ubfx	r2, r2, #6, #1
 801f6d4:	4490      	add	r8, r2
 801f6d6:	09ca      	lsrs	r2, r1, #7
 801f6d8:	ea42 624a 	orr.w	r2, r2, sl, lsl #25
 801f6dc:	f341 1180 	sbfx	r1, r1, #6, #1
 801f6e0:	1a8a      	subs	r2, r1, r2
 801f6e2:	ea38 0827 	bics.w	r8, r8, r7, asr #32
 801f6e6:	bf28      	it	cs
 801f6e8:	4690      	movcs	r8, r2
 801f6ea:	09da      	lsrs	r2, r3, #7
 801f6ec:	ea42 6240 	orr.w	r2, r2, r0, lsl #25
 801f6f0:	f3c3 1780 	ubfx	r7, r3, #6, #1
 801f6f4:	9801      	ldr	r0, [sp, #4]
 801f6f6:	4417      	add	r7, r2
 801f6f8:	ea4f 12de 	mov.w	r2, lr, lsr #7
 801f6fc:	ea42 6240 	orr.w	r2, r2, r0, lsl #25
 801f700:	f34e 1380 	sbfx	r3, lr, #6, #1
 801f704:	1a9b      	subs	r3, r3, r2
 801f706:	ea37 0726 	bics.w	r7, r7, r6, asr #32
 801f70a:	bf28      	it	cs
 801f70c:	461f      	movcs	r7, r3
 801f70e:	9800      	ldr	r0, [sp, #0]
 801f710:	b239      	sxth	r1, r7
 801f712:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 801f716:	fa0f f688 	sxth.w	r6, r8
 801f71a:	fa1f fe88 	uxth.w	lr, r8
 801f71e:	b2bf      	uxth	r7, r7
 801f720:	f1a0 0380 	sub.w	r3, r0, #128	@ 0x80
 801f724:	4662      	mov	r2, ip
 801f726:	e037      	b.n	801f798 <Argus_Cal_GetInternalXtalkVectorTable+0x14c>
 801f728:	f995 829c 	ldrsb.w	r8, [r5, #668]	@ 0x29c
 801f72c:	f118 0f04 	cmn.w	r8, #4
 801f730:	d036      	beq.n	801f7a0 <Argus_Cal_GetInternalXtalkVectorTable+0x154>
 801f732:	f8b2 8000 	ldrh.w	r8, [r2]
 801f736:	44f0      	add	r8, lr
 801f738:	f8a3 8000 	strh.w	r8, [r3]
 801f73c:	f8b2 8002 	ldrh.w	r8, [r2, #2]
 801f740:	809e      	strh	r6, [r3, #4]
 801f742:	44b8      	add	r8, r7
 801f744:	80d9      	strh	r1, [r3, #6]
 801f746:	f8a3 8002 	strh.w	r8, [r3, #2]
 801f74a:	f8b2 8018 	ldrh.w	r8, [r2, #24]
 801f74e:	44f0      	add	r8, lr
 801f750:	f8a3 8004 	strh.w	r8, [r3, #4]
 801f754:	f8b2 801a 	ldrh.w	r8, [r2, #26]
 801f758:	811e      	strh	r6, [r3, #8]
 801f75a:	44b8      	add	r8, r7
 801f75c:	8159      	strh	r1, [r3, #10]
 801f75e:	f8a3 8006 	strh.w	r8, [r3, #6]
 801f762:	f8b2 8030 	ldrh.w	r8, [r2, #48]	@ 0x30
 801f766:	44f0      	add	r8, lr
 801f768:	f8a3 8008 	strh.w	r8, [r3, #8]
 801f76c:	f8b2 8032 	ldrh.w	r8, [r2, #50]	@ 0x32
 801f770:	819e      	strh	r6, [r3, #12]
 801f772:	44b8      	add	r8, r7
 801f774:	81d9      	strh	r1, [r3, #14]
 801f776:	f8a3 800a 	strh.w	r8, [r3, #10]
 801f77a:	f8b2 8048 	ldrh.w	r8, [r2, #72]	@ 0x48
 801f77e:	44f0      	add	r8, lr
 801f780:	f8a3 800c 	strh.w	r8, [r3, #12]
 801f784:	f8b2 804a 	ldrh.w	r8, [r2, #74]	@ 0x4a
 801f788:	44b8      	add	r8, r7
 801f78a:	f8a3 800e 	strh.w	r8, [r3, #14]
 801f78e:	3310      	adds	r3, #16
 801f790:	4298      	cmp	r0, r3
 801f792:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 801f796:	d00e      	beq.n	801f7b6 <Argus_Cal_GetInternalXtalkVectorTable+0x16a>
 801f798:	801e      	strh	r6, [r3, #0]
 801f79a:	8059      	strh	r1, [r3, #2]
 801f79c:	2c00      	cmp	r4, #0
 801f79e:	d1c3      	bne.n	801f728 <Argus_Cal_GetInternalXtalkVectorTable+0xdc>
 801f7a0:	809e      	strh	r6, [r3, #4]
 801f7a2:	80d9      	strh	r1, [r3, #6]
 801f7a4:	811e      	strh	r6, [r3, #8]
 801f7a6:	8159      	strh	r1, [r3, #10]
 801f7a8:	819e      	strh	r6, [r3, #12]
 801f7aa:	81d9      	strh	r1, [r3, #14]
 801f7ac:	3310      	adds	r3, #16
 801f7ae:	4298      	cmp	r0, r3
 801f7b0:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 801f7b4:	d1f0      	bne.n	801f798 <Argus_Cal_GetInternalXtalkVectorTable+0x14c>
 801f7b6:	3080      	adds	r0, #128	@ 0x80
 801f7b8:	4581      	cmp	r9, r0
 801f7ba:	f50c 7c40 	add.w	ip, ip, #768	@ 0x300
 801f7be:	d1af      	bne.n	801f720 <Argus_Cal_GetInternalXtalkVectorTable+0xd4>
 801f7c0:	2000      	movs	r0, #0
 801f7c2:	b003      	add	sp, #12
 801f7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f7c8:	2600      	movs	r6, #0
 801f7ca:	4634      	mov	r4, r6
 801f7cc:	e758      	b.n	801f680 <Argus_Cal_GetInternalXtalkVectorTable+0x34>
 801f7ce:	2601      	movs	r6, #1
 801f7d0:	e756      	b.n	801f680 <Argus_Cal_GetInternalXtalkVectorTable+0x34>
 801f7d2:	f06f 00c6 	mvn.w	r0, #198	@ 0xc6
 801f7d6:	4770      	bx	lr
 801f7d8:	0802a400 	.word	0x0802a400

0801f7dc <Argus_Cal_GetDefaultCalibration>:
 801f7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f7e0:	b082      	sub	sp, #8
 801f7e2:	2902      	cmp	r1, #2
 801f7e4:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 801f7e8:	460e      	mov	r6, r1
 801f7ea:	4604      	mov	r4, r0
 801f7ec:	4617      	mov	r7, r2
 801f7ee:	4698      	mov	r8, r3
 801f7f0:	d96c      	bls.n	801f8cc <Argus_Cal_GetDefaultCalibration+0xf0>
 801f7f2:	1f4b      	subs	r3, r1, #5
 801f7f4:	2b01      	cmp	r3, #1
 801f7f6:	d86b      	bhi.n	801f8d0 <Argus_Cal_GetDefaultCalibration+0xf4>
 801f7f8:	2f07      	cmp	r7, #7
 801f7fa:	d904      	bls.n	801f806 <Argus_Cal_GetDefaultCalibration+0x2a>
 801f7fc:	f1a7 0343 	sub.w	r3, r7, #67	@ 0x43
 801f800:	2b04      	cmp	r3, #4
 801f802:	f200 83ac 	bhi.w	801ff5e <Argus_Cal_GetDefaultCalibration+0x782>
 801f806:	f1b8 0f00 	cmp.w	r8, #0
 801f80a:	f000 83a2 	beq.w	801ff52 <Argus_Cal_GetDefaultCalibration+0x776>
 801f80e:	f108 33ff 	add.w	r3, r8, #4294967295
 801f812:	2b04      	cmp	r3, #4
 801f814:	d861      	bhi.n	801f8da <Argus_Cal_GetDefaultCalibration+0xfe>
 801f816:	2d00      	cmp	r5, #0
 801f818:	d064      	beq.n	801f8e4 <Argus_Cal_GetDefaultCalibration+0x108>
 801f81a:	1e6b      	subs	r3, r5, #1
 801f81c:	2b04      	cmp	r3, #4
 801f81e:	f200 82e7 	bhi.w	801fdf0 <Argus_Cal_GetDefaultCalibration+0x614>
 801f822:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 801f826:	2100      	movs	r1, #0
 801f828:	4620      	mov	r0, r4
 801f82a:	f003 ffda 	bl	80237e2 <memset>
 801f82e:	f104 00a2 	add.w	r0, r4, #162	@ 0xa2
 801f832:	2f47      	cmp	r7, #71	@ 0x47
 801f834:	f200 8393 	bhi.w	801ff5e <Argus_Cal_GetDefaultCalibration+0x782>
 801f838:	e8df f017 	tbh	[pc, r7, lsl #1]
 801f83c:	03a502eb 	.word	0x03a502eb
 801f840:	03a503a5 	.word	0x03a503a5
 801f844:	03a50068 	.word	0x03a50068
 801f848:	03a503a5 	.word	0x03a503a5
 801f84c:	03910391 	.word	0x03910391
 801f850:	03910391 	.word	0x03910391
 801f854:	03910391 	.word	0x03910391
 801f858:	03910391 	.word	0x03910391
 801f85c:	03910391 	.word	0x03910391
 801f860:	03910391 	.word	0x03910391
 801f864:	03910391 	.word	0x03910391
 801f868:	03910391 	.word	0x03910391
 801f86c:	03910391 	.word	0x03910391
 801f870:	03910391 	.word	0x03910391
 801f874:	03910391 	.word	0x03910391
 801f878:	03910391 	.word	0x03910391
 801f87c:	03910391 	.word	0x03910391
 801f880:	03910391 	.word	0x03910391
 801f884:	03910391 	.word	0x03910391
 801f888:	03910391 	.word	0x03910391
 801f88c:	03910391 	.word	0x03910391
 801f890:	03910391 	.word	0x03910391
 801f894:	03910391 	.word	0x03910391
 801f898:	03910391 	.word	0x03910391
 801f89c:	03910391 	.word	0x03910391
 801f8a0:	03910391 	.word	0x03910391
 801f8a4:	03910391 	.word	0x03910391
 801f8a8:	03910391 	.word	0x03910391
 801f8ac:	03910391 	.word	0x03910391
 801f8b0:	03910391 	.word	0x03910391
 801f8b4:	03910391 	.word	0x03910391
 801f8b8:	03910391 	.word	0x03910391
 801f8bc:	03910391 	.word	0x03910391
 801f8c0:	03a50391 	.word	0x03a50391
 801f8c4:	03a50068 	.word	0x03a50068
 801f8c8:	03a503a5 	.word	0x03a503a5
 801f8cc:	2900      	cmp	r1, #0
 801f8ce:	d193      	bne.n	801f7f8 <Argus_Cal_GetDefaultCalibration+0x1c>
 801f8d0:	f06f 0068 	mvn.w	r0, #104	@ 0x68
 801f8d4:	b002      	add	sp, #8
 801f8d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f8da:	f06f 00c5 	mvn.w	r0, #197	@ 0xc5
 801f8de:	b002      	add	sp, #8
 801f8e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f8e4:	2f43      	cmp	r7, #67	@ 0x43
 801f8e6:	f000 8343 	beq.w	801ff70 <Argus_Cal_GetDefaultCalibration+0x794>
 801f8ea:	f200 8329 	bhi.w	801ff40 <Argus_Cal_GetDefaultCalibration+0x764>
 801f8ee:	2f02      	cmp	r7, #2
 801f8f0:	f240 8283 	bls.w	801fdfa <Argus_Cal_GetDefaultCalibration+0x61e>
 801f8f4:	2f04      	cmp	r7, #4
 801f8f6:	f040 834e 	bne.w	801ff96 <Argus_Cal_GetDefaultCalibration+0x7ba>
 801f8fa:	2503      	movs	r5, #3
 801f8fc:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 801f900:	2100      	movs	r1, #0
 801f902:	4620      	mov	r0, r4
 801f904:	f003 ff6d 	bl	80237e2 <memset>
 801f908:	f104 00a2 	add.w	r0, r4, #162	@ 0xa2
 801f90c:	2100      	movs	r1, #0
 801f90e:	2280      	movs	r2, #128	@ 0x80
 801f910:	f003 ff67 	bl	80237e2 <memset>
 801f914:	48c1      	ldr	r0, [pc, #772]	@ (801fc1c <Argus_Cal_GetDefaultCalibration+0x440>)
 801f916:	f3c6 0140 	ubfx	r1, r6, #1, #1
 801f91a:	ea4f 0e41 	mov.w	lr, r1, lsl #1
 801f91e:	f104 03a0 	add.w	r3, r4, #160	@ 0xa0
 801f922:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801f926:	f04f 0c00 	mov.w	ip, #0
 801f92a:	f931 203c 	ldrsh.w	r2, [r1, ip, lsl #3]
 801f92e:	f823 2f02 	strh.w	r2, [r3, #2]!
 801f932:	f10c 0c01 	add.w	ip, ip, #1
 801f936:	f1bc 0f20 	cmp.w	ip, #32
 801f93a:	d1f6      	bne.n	801f92a <Argus_Cal_GetDefaultCalibration+0x14e>
 801f93c:	4470      	add	r0, lr
 801f93e:	f104 0ce0 	add.w	ip, r4, #224	@ 0xe0
 801f942:	f504 7290 	add.w	r2, r4, #288	@ 0x120
 801f946:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801f94a:	f82c 3f02 	strh.w	r3, [ip, #2]!
 801f94e:	4562      	cmp	r2, ip
 801f950:	f100 0008 	add.w	r0, r0, #8
 801f954:	d1f7      	bne.n	801f946 <Argus_Cal_GetDefaultCalibration+0x16a>
 801f956:	f016 0201 	ands.w	r2, r6, #1
 801f95a:	f007 033f 	and.w	r3, r7, #63	@ 0x3f
 801f95e:	f000 8262 	beq.w	801fe26 <Argus_Cal_GetDefaultCalibration+0x64a>
 801f962:	f44f 4060 	mov.w	r0, #57344	@ 0xe000
 801f966:	2b05      	cmp	r3, #5
 801f968:	80e0      	strh	r0, [r4, #6]
 801f96a:	f000 879b 	beq.w	80208a4 <Argus_Cal_GetDefaultCalibration+0x10c8>
 801f96e:	2b04      	cmp	r3, #4
 801f970:	f000 83be 	beq.w	80200f0 <Argus_Cal_GetDefaultCalibration+0x914>
 801f974:	2b03      	cmp	r3, #3
 801f976:	f001 80a3 	beq.w	8020ac0 <Argus_Cal_GetDefaultCalibration+0x12e4>
 801f97a:	2a00      	cmp	r2, #0
 801f97c:	f000 831c 	beq.w	801ffb8 <Argus_Cal_GetDefaultCalibration+0x7dc>
 801f980:	f244 610b 	movw	r1, #17931	@ 0x460b
 801f984:	2d01      	cmp	r5, #1
 801f986:	8061      	strh	r1, [r4, #2]
 801f988:	f040 831c 	bne.w	801ffc4 <Argus_Cal_GetDefaultCalibration+0x7e8>
 801f98c:	f244 6176 	movw	r1, #18038	@ 0x4676
 801f990:	2b05      	cmp	r3, #5
 801f992:	8061      	strh	r1, [r4, #2]
 801f994:	f040 8316 	bne.w	801ffc4 <Argus_Cal_GetDefaultCalibration+0x7e8>
 801f998:	2a00      	cmp	r2, #0
 801f99a:	bf14      	ite	ne
 801f99c:	2133      	movne	r1, #51	@ 0x33
 801f99e:	2138      	moveq	r1, #56	@ 0x38
 801f9a0:	2d01      	cmp	r5, #1
 801f9a2:	7221      	strb	r1, [r4, #8]
 801f9a4:	f000 8479 	beq.w	802029a <Argus_Cal_GetDefaultCalibration+0xabe>
 801f9a8:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 801f9ac:	7261      	strb	r1, [r4, #9]
 801f9ae:	2a00      	cmp	r2, #0
 801f9b0:	bf14      	ite	ne
 801f9b2:	2135      	movne	r1, #53	@ 0x35
 801f9b4:	213d      	moveq	r1, #61	@ 0x3d
 801f9b6:	2d01      	cmp	r5, #1
 801f9b8:	72a1      	strb	r1, [r4, #10]
 801f9ba:	d101      	bne.n	801f9c0 <Argus_Cal_GetDefaultCalibration+0x1e4>
 801f9bc:	212e      	movs	r1, #46	@ 0x2e
 801f9be:	72a1      	strb	r1, [r4, #10]
 801f9c0:	2a00      	cmp	r2, #0
 801f9c2:	bf14      	ite	ne
 801f9c4:	2158      	movne	r1, #88	@ 0x58
 801f9c6:	2152      	moveq	r1, #82	@ 0x52
 801f9c8:	2d01      	cmp	r5, #1
 801f9ca:	72e1      	strb	r1, [r4, #11]
 801f9cc:	f001 801b 	beq.w	8020a06 <Argus_Cal_GetDefaultCalibration+0x122a>
 801f9d0:	2a00      	cmp	r2, #0
 801f9d2:	bf14      	ite	ne
 801f9d4:	2121      	movne	r1, #33	@ 0x21
 801f9d6:	2129      	moveq	r1, #41	@ 0x29
 801f9d8:	2d01      	cmp	r5, #1
 801f9da:	7321      	strb	r1, [r4, #12]
 801f9dc:	f001 8023 	beq.w	8020a26 <Argus_Cal_GetDefaultCalibration+0x124a>
 801f9e0:	f102 014f 	add.w	r1, r2, #79	@ 0x4f
 801f9e4:	7361      	strb	r1, [r4, #13]
 801f9e6:	2a00      	cmp	r2, #0
 801f9e8:	bf14      	ite	ne
 801f9ea:	2122      	movne	r1, #34	@ 0x22
 801f9ec:	2129      	moveq	r1, #41	@ 0x29
 801f9ee:	2d01      	cmp	r5, #1
 801f9f0:	73a1      	strb	r1, [r4, #14]
 801f9f2:	d101      	bne.n	801f9f8 <Argus_Cal_GetDefaultCalibration+0x21c>
 801f9f4:	2118      	movs	r1, #24
 801f9f6:	73a1      	strb	r1, [r4, #14]
 801f9f8:	2a00      	cmp	r2, #0
 801f9fa:	bf14      	ite	ne
 801f9fc:	2127      	movne	r1, #39	@ 0x27
 801f9fe:	212b      	moveq	r1, #43	@ 0x2b
 801fa00:	2d01      	cmp	r5, #1
 801fa02:	73e1      	strb	r1, [r4, #15]
 801fa04:	d101      	bne.n	801fa0a <Argus_Cal_GetDefaultCalibration+0x22e>
 801fa06:	211d      	movs	r1, #29
 801fa08:	73e1      	strb	r1, [r4, #15]
 801fa0a:	2a00      	cmp	r2, #0
 801fa0c:	bf14      	ite	ne
 801fa0e:	2115      	movne	r1, #21
 801fa10:	2120      	moveq	r1, #32
 801fa12:	2d01      	cmp	r5, #1
 801fa14:	7421      	strb	r1, [r4, #16]
 801fa16:	f000 87c8 	beq.w	80209aa <Argus_Cal_GetDefaultCalibration+0x11ce>
 801fa1a:	2a00      	cmp	r2, #0
 801fa1c:	bf14      	ite	ne
 801fa1e:	2151      	movne	r1, #81	@ 0x51
 801fa20:	2149      	moveq	r1, #73	@ 0x49
 801fa22:	2d01      	cmp	r5, #1
 801fa24:	7461      	strb	r1, [r4, #17]
 801fa26:	f000 87d0 	beq.w	80209ca <Argus_Cal_GetDefaultCalibration+0x11ee>
 801fa2a:	2a00      	cmp	r2, #0
 801fa2c:	bf14      	ite	ne
 801fa2e:	2117      	movne	r1, #23
 801fa30:	2120      	moveq	r1, #32
 801fa32:	2d01      	cmp	r5, #1
 801fa34:	74a1      	strb	r1, [r4, #18]
 801fa36:	f000 8789 	beq.w	802094c <Argus_Cal_GetDefaultCalibration+0x1170>
 801fa3a:	2a00      	cmp	r2, #0
 801fa3c:	bf14      	ite	ne
 801fa3e:	2126      	movne	r1, #38	@ 0x26
 801fa40:	212b      	moveq	r1, #43	@ 0x2b
 801fa42:	2d01      	cmp	r5, #1
 801fa44:	74e1      	strb	r1, [r4, #19]
 801fa46:	f000 8791 	beq.w	802096c <Argus_Cal_GetDefaultCalibration+0x1190>
 801fa4a:	2a00      	cmp	r2, #0
 801fa4c:	bf14      	ite	ne
 801fa4e:	2114      	movne	r1, #20
 801fa50:	211f      	moveq	r1, #31
 801fa52:	2d01      	cmp	r5, #1
 801fa54:	7521      	strb	r1, [r4, #20]
 801fa56:	f000 876a 	beq.w	802092e <Argus_Cal_GetDefaultCalibration+0x1152>
 801fa5a:	2a00      	cmp	r2, #0
 801fa5c:	f001 8052 	beq.w	8020b04 <Argus_Cal_GetDefaultCalibration+0x1328>
 801fa60:	2151      	movs	r1, #81	@ 0x51
 801fa62:	7561      	strb	r1, [r4, #21]
 801fa64:	2115      	movs	r1, #21
 801fa66:	2d01      	cmp	r5, #1
 801fa68:	75a1      	strb	r1, [r4, #22]
 801fa6a:	f001 8282 	beq.w	8020f72 <Argus_Cal_GetDefaultCalibration+0x1796>
 801fa6e:	2a00      	cmp	r2, #0
 801fa70:	f001 8259 	beq.w	8020f26 <Argus_Cal_GetDefaultCalibration+0x174a>
 801fa74:	496a      	ldr	r1, [pc, #424]	@ (801fc20 <Argus_Cal_GetDefaultCalibration+0x444>)
 801fa76:	61a1      	str	r1, [r4, #24]
 801fa78:	2128      	movs	r1, #40	@ 0x28
 801fa7a:	75e1      	strb	r1, [r4, #23]
 801fa7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801fa80:	8021      	strh	r1, [r4, #0]
 801fa82:	1e19      	subs	r1, r3, #0
 801fa84:	bf18      	it	ne
 801fa86:	2101      	movne	r1, #1
 801fa88:	f884 124c 	strb.w	r1, [r4, #588]	@ 0x24c
 801fa8c:	f884 1258 	strb.w	r1, [r4, #600]	@ 0x258
 801fa90:	4964      	ldr	r1, [pc, #400]	@ (801fc24 <Argus_Cal_GetDefaultCalibration+0x448>)
 801fa92:	e9c4 1194 	strd	r1, r1, [r4, #592]	@ 0x250
 801fa96:	2110      	movs	r1, #16
 801fa98:	f8a4 124e 	strh.w	r1, [r4, #590]	@ 0x24e
 801fa9c:	219a      	movs	r1, #154	@ 0x9a
 801fa9e:	f884 124d 	strb.w	r1, [r4, #589]	@ 0x24d
 801faa2:	f06f 113c 	mvn.w	r1, #3932220	@ 0x3c003c
 801faa6:	f8c4 125a 	str.w	r1, [r4, #602]	@ 0x25a
 801faaa:	f644 41cd 	movw	r1, #19661	@ 0x4ccd
 801faae:	f8a4 109c 	strh.w	r1, [r4, #156]	@ 0x9c
 801fab2:	2b05      	cmp	r3, #5
 801fab4:	f248 0180 	movw	r1, #32896	@ 0x8080
 801fab8:	f8a4 122a 	strh.w	r1, [r4, #554]	@ 0x22a
 801fabc:	f000 83a7 	beq.w	802020e <Argus_Cal_GetDefaultCalibration+0xa32>
 801fac0:	f06f 09a3 	mvn.w	r9, #163	@ 0xa3
 801fac4:	f06f 0ef5 	mvn.w	lr, #245	@ 0xf5
 801fac8:	2b04      	cmp	r3, #4
 801faca:	f000 8586 	beq.w	80205da <Argus_Cal_GetDefaultCalibration+0xdfe>
 801face:	2a00      	cmp	r2, #0
 801fad0:	f000 85c9 	beq.w	8020666 <Argus_Cal_GetDefaultCalibration+0xe8a>
 801fad4:	f44f 7135 	mov.w	r1, #724	@ 0x2d4
 801fad8:	2d01      	cmp	r5, #1
 801fada:	f8a4 1234 	strh.w	r1, [r4, #564]	@ 0x234
 801fade:	f001 819a 	beq.w	8020e16 <Argus_Cal_GetDefaultCalibration+0x163a>
 801fae2:	2b04      	cmp	r3, #4
 801fae4:	f001 8122 	beq.w	8020d2c <Argus_Cal_GetDefaultCalibration+0x1550>
 801fae8:	2a00      	cmp	r2, #0
 801faea:	f040 85da 	bne.w	80206a2 <Argus_Cal_GetDefaultCalibration+0xec6>
 801faee:	f240 2189 	movw	r1, #649	@ 0x289
 801faf2:	2d01      	cmp	r5, #1
 801faf4:	f8a4 1236 	strh.w	r1, [r4, #566]	@ 0x236
 801faf8:	f001 8103 	beq.w	8020d02 <Argus_Cal_GetDefaultCalibration+0x1526>
 801fafc:	2b05      	cmp	r3, #5
 801fafe:	f000 8398 	beq.w	8020232 <Argus_Cal_GetDefaultCalibration+0xa56>
 801fb02:	2b04      	cmp	r3, #4
 801fb04:	f001 811d 	beq.w	8020d42 <Argus_Cal_GetDefaultCalibration+0x1566>
 801fb08:	2a00      	cmp	r2, #0
 801fb0a:	f040 85cd 	bne.w	80206a8 <Argus_Cal_GetDefaultCalibration+0xecc>
 801fb0e:	f240 115b 	movw	r1, #347	@ 0x15b
 801fb12:	2d01      	cmp	r5, #1
 801fb14:	f8a4 1238 	strh.w	r1, [r4, #568]	@ 0x238
 801fb18:	f001 8227 	beq.w	8020f6a <Argus_Cal_GetDefaultCalibration+0x178e>
 801fb1c:	2b05      	cmp	r3, #5
 801fb1e:	f000 8370 	beq.w	8020202 <Argus_Cal_GetDefaultCalibration+0xa26>
 801fb22:	2b04      	cmp	r3, #4
 801fb24:	f001 8151 	beq.w	8020dca <Argus_Cal_GetDefaultCalibration+0x15ee>
 801fb28:	2a00      	cmp	r2, #0
 801fb2a:	f040 853c 	bne.w	80205a6 <Argus_Cal_GetDefaultCalibration+0xdca>
 801fb2e:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 801fb32:	2d01      	cmp	r5, #1
 801fb34:	f8a4 123a 	strh.w	r1, [r4, #570]	@ 0x23a
 801fb38:	f001 80e0 	beq.w	8020cfc <Argus_Cal_GetDefaultCalibration+0x1520>
 801fb3c:	2b05      	cmp	r3, #5
 801fb3e:	f000 838f 	beq.w	8020260 <Argus_Cal_GetDefaultCalibration+0xa84>
 801fb42:	2b04      	cmp	r3, #4
 801fb44:	f001 80c9 	beq.w	8020cda <Argus_Cal_GetDefaultCalibration+0x14fe>
 801fb48:	2a00      	cmp	r2, #0
 801fb4a:	f000 8348 	beq.w	80201de <Argus_Cal_GetDefaultCalibration+0xa02>
 801fb4e:	f240 31a6 	movw	r1, #934	@ 0x3a6
 801fb52:	2d01      	cmp	r5, #1
 801fb54:	f8a4 122c 	strh.w	r1, [r4, #556]	@ 0x22c
 801fb58:	f001 8212 	beq.w	8020f80 <Argus_Cal_GetDefaultCalibration+0x17a4>
 801fb5c:	2b05      	cmp	r3, #5
 801fb5e:	f000 8390 	beq.w	8020282 <Argus_Cal_GetDefaultCalibration+0xaa6>
 801fb62:	2b04      	cmp	r3, #4
 801fb64:	f001 81bb 	beq.w	8020ede <Argus_Cal_GetDefaultCalibration+0x1702>
 801fb68:	2a00      	cmp	r2, #0
 801fb6a:	f040 85de 	bne.w	802072a <Argus_Cal_GetDefaultCalibration+0xf4e>
 801fb6e:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 801fb72:	2d01      	cmp	r5, #1
 801fb74:	f8a4 122e 	strh.w	r1, [r4, #558]	@ 0x22e
 801fb78:	f001 8096 	beq.w	8020ca8 <Argus_Cal_GetDefaultCalibration+0x14cc>
 801fb7c:	2b05      	cmp	r3, #5
 801fb7e:	f000 8364 	beq.w	802024a <Argus_Cal_GetDefaultCalibration+0xa6e>
 801fb82:	2b04      	cmp	r3, #4
 801fb84:	f001 809e 	beq.w	8020cc4 <Argus_Cal_GetDefaultCalibration+0x14e8>
 801fb88:	2a00      	cmp	r2, #0
 801fb8a:	f040 85c1 	bne.w	8020710 <Argus_Cal_GetDefaultCalibration+0xf34>
 801fb8e:	f240 51a5 	movw	r1, #1445	@ 0x5a5
 801fb92:	2d01      	cmp	r5, #1
 801fb94:	f8a4 1230 	strh.w	r1, [r4, #560]	@ 0x230
 801fb98:	f001 819b 	beq.w	8020ed2 <Argus_Cal_GetDefaultCalibration+0x16f6>
 801fb9c:	2b05      	cmp	r3, #5
 801fb9e:	f000 836a 	beq.w	8020276 <Argus_Cal_GetDefaultCalibration+0xa9a>
 801fba2:	2b04      	cmp	r3, #4
 801fba4:	f001 81b3 	beq.w	8020f0e <Argus_Cal_GetDefaultCalibration+0x1732>
 801fba8:	2a00      	cmp	r2, #0
 801fbaa:	f040 85d8 	bne.w	802075e <Argus_Cal_GetDefaultCalibration+0xf82>
 801fbae:	f240 3196 	movw	r1, #918	@ 0x396
 801fbb2:	2d01      	cmp	r5, #1
 801fbb4:	f8a4 1232 	strh.w	r1, [r4, #562]	@ 0x232
 801fbb8:	f001 818e 	beq.w	8020ed8 <Argus_Cal_GetDefaultCalibration+0x16fc>
 801fbbc:	2b05      	cmp	r3, #5
 801fbbe:	f000 834a 	beq.w	8020256 <Argus_Cal_GetDefaultCalibration+0xa7a>
 801fbc2:	2b04      	cmp	r3, #4
 801fbc4:	f001 8197 	beq.w	8020ef6 <Argus_Cal_GetDefaultCalibration+0x171a>
 801fbc8:	2a00      	cmp	r2, #0
 801fbca:	f040 85bb 	bne.w	8020744 <Argus_Cal_GetDefaultCalibration+0xf68>
 801fbce:	2145      	movs	r1, #69	@ 0x45
 801fbd0:	2d01      	cmp	r5, #1
 801fbd2:	f8a4 1244 	strh.w	r1, [r4, #580]	@ 0x244
 801fbd6:	f001 80c8 	beq.w	8020d6a <Argus_Cal_GetDefaultCalibration+0x158e>
 801fbda:	2b05      	cmp	r3, #5
 801fbdc:	f000 8345 	beq.w	802026a <Argus_Cal_GetDefaultCalibration+0xa8e>
 801fbe0:	2b04      	cmp	r3, #4
 801fbe2:	f001 80d1 	beq.w	8020d88 <Argus_Cal_GetDefaultCalibration+0x15ac>
 801fbe6:	2a00      	cmp	r2, #0
 801fbe8:	f040 84c3 	bne.w	8020572 <Argus_Cal_GetDefaultCalibration+0xd96>
 801fbec:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 801fbf0:	2d01      	cmp	r5, #1
 801fbf2:	f8a4 1246 	strh.w	r1, [r4, #582]	@ 0x246
 801fbf6:	f001 81a8 	beq.w	8020f4a <Argus_Cal_GetDefaultCalibration+0x176e>
 801fbfa:	2b05      	cmp	r3, #5
 801fbfc:	f000 831f 	beq.w	802023e <Argus_Cal_GetDefaultCalibration+0xa62>
 801fc00:	2b04      	cmp	r3, #4
 801fc02:	f001 81a6 	beq.w	8020f52 <Argus_Cal_GetDefaultCalibration+0x1776>
 801fc06:	2a00      	cmp	r2, #0
 801fc08:	f040 85b6 	bne.w	8020778 <Argus_Cal_GetDefaultCalibration+0xf9c>
 801fc0c:	f240 2147 	movw	r1, #583	@ 0x247
 801fc10:	2d01      	cmp	r5, #1
 801fc12:	f8a4 1248 	strh.w	r1, [r4, #584]	@ 0x248
 801fc16:	f001 8044 	beq.w	8020ca2 <Argus_Cal_GetDefaultCalibration+0x14c6>
 801fc1a:	e005      	b.n	801fc28 <Argus_Cal_GetDefaultCalibration+0x44c>
 801fc1c:	0802bf18 	.word	0x0802bf18
 801fc20:	0205711a 	.word	0x0205711a
 801fc24:	ff5cff0a 	.word	0xff5cff0a
 801fc28:	2b05      	cmp	r3, #5
 801fc2a:	f000 8341 	beq.w	80202b0 <Argus_Cal_GetDefaultCalibration+0xad4>
 801fc2e:	2b04      	cmp	r3, #4
 801fc30:	f001 80d6 	beq.w	8020de0 <Argus_Cal_GetDefaultCalibration+0x1604>
 801fc34:	2a00      	cmp	r2, #0
 801fc36:	f040 8551 	bne.w	80206dc <Argus_Cal_GetDefaultCalibration+0xf00>
 801fc3a:	f240 51d3 	movw	r1, #1491	@ 0x5d3
 801fc3e:	2d01      	cmp	r5, #1
 801fc40:	f8a4 124a 	strh.w	r1, [r4, #586]	@ 0x24a
 801fc44:	f001 8097 	beq.w	8020d76 <Argus_Cal_GetDefaultCalibration+0x159a>
 801fc48:	2b05      	cmp	r3, #5
 801fc4a:	f000 832b 	beq.w	80202a4 <Argus_Cal_GetDefaultCalibration+0xac8>
 801fc4e:	2b04      	cmp	r3, #4
 801fc50:	f001 80b0 	beq.w	8020db4 <Argus_Cal_GetDefaultCalibration+0x15d8>
 801fc54:	2a00      	cmp	r2, #0
 801fc56:	f040 8534 	bne.w	80206c2 <Argus_Cal_GetDefaultCalibration+0xee6>
 801fc5a:	f240 4171 	movw	r1, #1137	@ 0x471
 801fc5e:	2d01      	cmp	r5, #1
 801fc60:	f8a4 123c 	strh.w	r1, [r4, #572]	@ 0x23c
 801fc64:	f001 8084 	beq.w	8020d70 <Argus_Cal_GetDefaultCalibration+0x1594>
 801fc68:	2b05      	cmp	r3, #5
 801fc6a:	f000 838e 	beq.w	802038a <Argus_Cal_GetDefaultCalibration+0xbae>
 801fc6e:	2b04      	cmp	r3, #4
 801fc70:	f001 801d 	beq.w	8020cae <Argus_Cal_GetDefaultCalibration+0x14d2>
 801fc74:	2a00      	cmp	r2, #0
 801fc76:	f040 853e 	bne.w	80206f6 <Argus_Cal_GetDefaultCalibration+0xf1a>
 801fc7a:	f240 3151 	movw	r1, #849	@ 0x351
 801fc7e:	2d01      	cmp	r5, #1
 801fc80:	f8a4 123e 	strh.w	r1, [r4, #574]	@ 0x23e
 801fc84:	f001 807d 	beq.w	8020d82 <Argus_Cal_GetDefaultCalibration+0x15a6>
 801fc88:	2b05      	cmp	r3, #5
 801fc8a:	f000 8300 	beq.w	802028e <Argus_Cal_GetDefaultCalibration+0xab2>
 801fc8e:	2b04      	cmp	r3, #4
 801fc90:	f001 8085 	beq.w	8020d9e <Argus_Cal_GetDefaultCalibration+0x15c2>
 801fc94:	2a00      	cmp	r2, #0
 801fc96:	f040 8479 	bne.w	802058c <Argus_Cal_GetDefaultCalibration+0xdb0>
 801fc9a:	f240 511f 	movw	r1, #1311	@ 0x51f
 801fc9e:	2d01      	cmp	r5, #1
 801fca0:	f8a4 1240 	strh.w	r1, [r4, #576]	@ 0x240
 801fca4:	f001 806a 	beq.w	8020d7c <Argus_Cal_GetDefaultCalibration+0x15a0>
 801fca8:	2b05      	cmp	r3, #5
 801fcaa:	f000 82a4 	beq.w	80201f6 <Argus_Cal_GetDefaultCalibration+0xa1a>
 801fcae:	2b04      	cmp	r3, #4
 801fcb0:	f001 80a1 	beq.w	8020df6 <Argus_Cal_GetDefaultCalibration+0x161a>
 801fcb4:	2a00      	cmp	r2, #0
 801fcb6:	f040 8483 	bne.w	80205c0 <Argus_Cal_GetDefaultCalibration+0xde4>
 801fcba:	f240 31f1 	movw	r1, #1009	@ 0x3f1
 801fcbe:	2d01      	cmp	r5, #1
 801fcc0:	f8a4 1242 	strh.w	r1, [r4, #578]	@ 0x242
 801fcc4:	f001 813d 	beq.w	8020f42 <Argus_Cal_GetDefaultCalibration+0x1766>
 801fcc8:	2b04      	cmp	r3, #4
 801fcca:	f000 83e7 	beq.w	802049c <Argus_Cal_GetDefaultCalibration+0xcc0>
 801fcce:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 801fcd2:	2b01      	cmp	r3, #1
 801fcd4:	f8c4 1222 	str.w	r1, [r4, #546]	@ 0x222
 801fcd8:	f040 8370 	bne.w	80203bc <Argus_Cal_GetDefaultCalibration+0xbe0>
 801fcdc:	f640 4ccd 	movw	ip, #3277	@ 0xccd
 801fce0:	f1a8 0104 	sub.w	r1, r8, #4
 801fce4:	f8a4 c26a 	strh.w	ip, [r4, #618]	@ 0x26a
 801fce8:	f04f 0c18 	mov.w	ip, #24
 801fcec:	b2c9      	uxtb	r1, r1
 801fcee:	f884 c269 	strb.w	ip, [r4, #617]	@ 0x269
 801fcf2:	f44f 5cc2 	mov.w	ip, #6208	@ 0x1840
 801fcf6:	f8a4 c267 	strh.w	ip, [r4, #615]	@ 0x267
 801fcfa:	2901      	cmp	r1, #1
 801fcfc:	f04f 0c0d 	mov.w	ip, #13
 801fd00:	f884 c264 	strb.w	ip, [r4, #612]	@ 0x264
 801fd04:	f240 8236 	bls.w	8020174 <Argus_Cal_GetDefaultCalibration+0x998>
 801fd08:	f8df c29c 	ldr.w	ip, [pc, #668]	@ 801ffa8 <Argus_Cal_GetDefaultCalibration+0x7cc>
 801fd0c:	f8c4 c25e 	str.w	ip, [r4, #606]	@ 0x25e
 801fd10:	f243 0c28 	movw	ip, #12328	@ 0x3028
 801fd14:	f8a4 c265 	strh.w	ip, [r4, #613]	@ 0x265
 801fd18:	f44f 4c7a 	mov.w	ip, #64000	@ 0xfa00
 801fd1c:	f8a4 c262 	strh.w	ip, [r4, #610]	@ 0x262
 801fd20:	2a00      	cmp	r2, #0
 801fd22:	f000 873b 	beq.w	8020b9c <Argus_Cal_GetDefaultCalibration+0x13c0>
 801fd26:	f241 3c0c 	movw	ip, #4876	@ 0x130c
 801fd2a:	2d01      	cmp	r5, #1
 801fd2c:	f8a4 c274 	strh.w	ip, [r4, #628]	@ 0x274
 801fd30:	f001 82e5 	beq.w	80212fe <Argus_Cal_GetDefaultCalibration+0x1b22>
 801fd34:	2b04      	cmp	r3, #4
 801fd36:	f000 83e8 	beq.w	802050a <Argus_Cal_GetDefaultCalibration+0xd2e>
 801fd3a:	2b03      	cmp	r3, #3
 801fd3c:	f000 8372 	beq.w	8020424 <Argus_Cal_GetDefaultCalibration+0xc48>
 801fd40:	2a00      	cmp	r2, #0
 801fd42:	f000 8755 	beq.w	8020bf0 <Argus_Cal_GetDefaultCalibration+0x1414>
 801fd46:	f241 2cca 	movw	ip, #4810	@ 0x12ca
 801fd4a:	2d01      	cmp	r5, #1
 801fd4c:	f8a4 c276 	strh.w	ip, [r4, #630]	@ 0x276
 801fd50:	f000 8732 	beq.w	8020bb8 <Argus_Cal_GetDefaultCalibration+0x13dc>
 801fd54:	f241 2c43 	movw	ip, #4675	@ 0x1243
 801fd58:	f8a4 c278 	strh.w	ip, [r4, #632]	@ 0x278
 801fd5c:	f241 1c65 	movw	ip, #4453	@ 0x1165
 801fd60:	f8a4 c27a 	strh.w	ip, [r4, #634]	@ 0x27a
 801fd64:	f8df c244 	ldr.w	ip, [pc, #580]	@ 801ffac <Argus_Cal_GetDefaultCalibration+0x7d0>
 801fd68:	f8c4 c26c 	str.w	ip, [r4, #620]	@ 0x26c
 801fd6c:	f04f 0c04 	mov.w	ip, #4
 801fd70:	f884 c270 	strb.w	ip, [r4, #624]	@ 0x270
 801fd74:	f04f 0c02 	mov.w	ip, #2
 801fd78:	2901      	cmp	r1, #1
 801fd7a:	bf8c      	ite	hi
 801fd7c:	2109      	movhi	r1, #9
 801fd7e:	2100      	movls	r1, #0
 801fd80:	f884 1284 	strb.w	r1, [r4, #644]	@ 0x284
 801fd84:	4985      	ldr	r1, [pc, #532]	@ (801ff9c <Argus_Cal_GetDefaultCalibration+0x7c0>)
 801fd86:	f8df a228 	ldr.w	sl, [pc, #552]	@ 801ffb0 <Argus_Cal_GetDefaultCalibration+0x7d4>
 801fd8a:	f8c4 1280 	str.w	r1, [r4, #640]	@ 0x280
 801fd8e:	4984      	ldr	r1, [pc, #528]	@ (801ffa0 <Argus_Cal_GetDefaultCalibration+0x7c4>)
 801fd90:	f884 c271 	strb.w	ip, [r4, #625]	@ 0x271
 801fd94:	e9c4 a1ac 	strd	sl, r1, [r4, #688]	@ 0x2b0
 801fd98:	f8df c218 	ldr.w	ip, [pc, #536]	@ 801ffb4 <Argus_Cal_GetDefaultCalibration+0x7d8>
 801fd9c:	f8c4 c27c 	str.w	ip, [r4, #636]	@ 0x27c
 801fda0:	2125      	movs	r1, #37	@ 0x25
 801fda2:	f244 1cf1 	movw	ip, #16881	@ 0x41f1
 801fda6:	f884 12b8 	strb.w	r1, [r4, #696]	@ 0x2b8
 801fdaa:	2d04      	cmp	r5, #4
 801fdac:	f241 3188 	movw	r1, #5000	@ 0x1388
 801fdb0:	f8a4 c272 	strh.w	ip, [r4, #626]	@ 0x272
 801fdb4:	f8a4 12ba 	strh.w	r1, [r4, #698]	@ 0x2ba
 801fdb8:	f000 8280 	beq.w	80202bc <Argus_Cal_GetDefaultCalibration+0xae0>
 801fdbc:	0773      	lsls	r3, r6, #29
 801fdbe:	bf44      	itt	mi
 801fdc0:	2300      	movmi	r3, #0
 801fdc2:	f884 3258 	strbmi.w	r3, [r4, #600]	@ 0x258
 801fdc6:	f104 001c 	add.w	r0, r4, #28
 801fdca:	4631      	mov	r1, r6
 801fdcc:	f7ff fabc 	bl	801f348 <Argus_GetPixelRangeOffsets_Callback>
 801fdd0:	4631      	mov	r1, r6
 801fdd2:	f504 7091 	add.w	r0, r4, #290	@ 0x122
 801fdd6:	f7ff fc33 	bl	801f640 <Argus_GetCrosstalkVectorTable_Callback>
 801fdda:	4620      	mov	r0, r4
 801fddc:	9500      	str	r5, [sp, #0]
 801fdde:	4643      	mov	r3, r8
 801fde0:	463a      	mov	r2, r7
 801fde2:	4631      	mov	r1, r6
 801fde4:	f7ff faae 	bl	801f344 <Argus_OnGetDefaultCalibration>
 801fde8:	2000      	movs	r0, #0
 801fdea:	b002      	add	sp, #8
 801fdec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fdf0:	f06f 00c4 	mvn.w	r0, #196	@ 0xc4
 801fdf4:	b002      	add	sp, #8
 801fdf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fdfa:	2f00      	cmp	r7, #0
 801fdfc:	f040 80b6 	bne.w	801ff6c <Argus_Cal_GetDefaultCalibration+0x790>
 801fe00:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 801fe04:	4639      	mov	r1, r7
 801fe06:	4620      	mov	r0, r4
 801fe08:	f003 fceb 	bl	80237e2 <memset>
 801fe0c:	2502      	movs	r5, #2
 801fe0e:	f104 00a2 	add.w	r0, r4, #162	@ 0xa2
 801fe12:	2280      	movs	r2, #128	@ 0x80
 801fe14:	2100      	movs	r1, #0
 801fe16:	f003 fce4 	bl	80237e2 <memset>
 801fe1a:	f016 0201 	ands.w	r2, r6, #1
 801fe1e:	f007 033f 	and.w	r3, r7, #63	@ 0x3f
 801fe22:	f47f ad9e 	bne.w	801f962 <Argus_Cal_GetDefaultCalibration+0x186>
 801fe26:	f64e 40cd 	movw	r0, #60621	@ 0xeccd
 801fe2a:	2b05      	cmp	r3, #5
 801fe2c:	80e0      	strh	r0, [r4, #6]
 801fe2e:	f000 8557 	beq.w	80208e0 <Argus_Cal_GetDefaultCalibration+0x1104>
 801fe32:	2b04      	cmp	r3, #4
 801fe34:	f47f ad9e 	bne.w	801f974 <Argus_Cal_GetDefaultCalibration+0x198>
 801fe38:	f644 41d8 	movw	r1, #19672	@ 0x4cd8
 801fe3c:	2d01      	cmp	r5, #1
 801fe3e:	8061      	strh	r1, [r4, #2]
 801fe40:	f43f ada4 	beq.w	801f98c <Argus_Cal_GetDefaultCalibration+0x1b0>
 801fe44:	2113      	movs	r1, #19
 801fe46:	7221      	strb	r1, [r4, #8]
 801fe48:	2a00      	cmp	r2, #0
 801fe4a:	f000 8766 	beq.w	8020d1a <Argus_Cal_GetDefaultCalibration+0x153e>
 801fe4e:	2137      	movs	r1, #55	@ 0x37
 801fe50:	2d01      	cmp	r5, #1
 801fe52:	7261      	strb	r1, [r4, #9]
 801fe54:	f000 8223 	beq.w	802029e <Argus_Cal_GetDefaultCalibration+0xac2>
 801fe58:	210c      	movs	r1, #12
 801fe5a:	72a1      	strb	r1, [r4, #10]
 801fe5c:	2a00      	cmp	r2, #0
 801fe5e:	bf14      	ite	ne
 801fe60:	212e      	movne	r1, #46	@ 0x2e
 801fe62:	f06f 0107 	mvneq.w	r1, #7
 801fe66:	2d01      	cmp	r5, #1
 801fe68:	72e1      	strb	r1, [r4, #11]
 801fe6a:	f000 8648 	beq.w	8020afe <Argus_Cal_GetDefaultCalibration+0x1322>
 801fe6e:	2a00      	cmp	r2, #0
 801fe70:	bf14      	ite	ne
 801fe72:	f06f 010b 	mvnne.w	r1, #11
 801fe76:	f06f 010f 	mvneq.w	r1, #15
 801fe7a:	2d01      	cmp	r5, #1
 801fe7c:	7321      	strb	r1, [r4, #12]
 801fe7e:	f000 8144 	beq.w	802010a <Argus_Cal_GetDefaultCalibration+0x92e>
 801fe82:	2a00      	cmp	r2, #0
 801fe84:	f000 8768 	beq.w	8020d58 <Argus_Cal_GetDefaultCalibration+0x157c>
 801fe88:	2104      	movs	r1, #4
 801fe8a:	2d01      	cmp	r5, #1
 801fe8c:	7361      	strb	r1, [r4, #13]
 801fe8e:	f000 86d9 	beq.w	8020c44 <Argus_Cal_GetDefaultCalibration+0x1468>
 801fe92:	f06f 0115 	mvn.w	r1, #21
 801fe96:	73a1      	strb	r1, [r4, #14]
 801fe98:	2a00      	cmp	r2, #0
 801fe9a:	bf14      	ite	ne
 801fe9c:	f06f 0107 	mvnne.w	r1, #7
 801fea0:	f06f 0128 	mvneq.w	r1, #40	@ 0x28
 801fea4:	2d01      	cmp	r5, #1
 801fea6:	73e1      	strb	r1, [r4, #15]
 801fea8:	f000 86bf 	beq.w	8020c2a <Argus_Cal_GetDefaultCalibration+0x144e>
 801feac:	2a00      	cmp	r2, #0
 801feae:	bf14      	ite	ne
 801feb0:	f06f 011f 	mvnne.w	r1, #31
 801feb4:	f06f 012c 	mvneq.w	r1, #44	@ 0x2c
 801feb8:	2d01      	cmp	r5, #1
 801feba:	7421      	strb	r1, [r4, #16]
 801febc:	f000 86b2 	beq.w	8020c24 <Argus_Cal_GetDefaultCalibration+0x1448>
 801fec0:	2a00      	cmp	r2, #0
 801fec2:	bf14      	ite	ne
 801fec4:	f06f 0103 	mvnne.w	r1, #3
 801fec8:	f06f 0110 	mvneq.w	r1, #16
 801fecc:	2d01      	cmp	r5, #1
 801fece:	7461      	strb	r1, [r4, #17]
 801fed0:	f000 86d9 	beq.w	8020c86 <Argus_Cal_GetDefaultCalibration+0x14aa>
 801fed4:	2a00      	cmp	r2, #0
 801fed6:	bf14      	ite	ne
 801fed8:	f06f 0130 	mvnne.w	r1, #48	@ 0x30
 801fedc:	f06f 0145 	mvneq.w	r1, #69	@ 0x45
 801fee0:	2d01      	cmp	r5, #1
 801fee2:	74a1      	strb	r1, [r4, #18]
 801fee4:	f000 85e9 	beq.w	8020aba <Argus_Cal_GetDefaultCalibration+0x12de>
 801fee8:	2a00      	cmp	r2, #0
 801feea:	bf14      	ite	ne
 801feec:	f06f 0106 	mvnne.w	r1, #6
 801fef0:	f06f 0134 	mvneq.w	r1, #52	@ 0x34
 801fef4:	2d01      	cmp	r5, #1
 801fef6:	74e1      	strb	r1, [r4, #19]
 801fef8:	f000 8691 	beq.w	8020c1e <Argus_Cal_GetDefaultCalibration+0x1442>
 801fefc:	2a00      	cmp	r2, #0
 801fefe:	bf14      	ite	ne
 801ff00:	f06f 0125 	mvnne.w	r1, #37	@ 0x25
 801ff04:	f06f 012c 	mvneq.w	r1, #44	@ 0x2c
 801ff08:	2d01      	cmp	r5, #1
 801ff0a:	7521      	strb	r1, [r4, #20]
 801ff0c:	f000 8112 	beq.w	8020134 <Argus_Cal_GetDefaultCalibration+0x958>
 801ff10:	2a00      	cmp	r2, #0
 801ff12:	f000 86f9 	beq.w	8020d08 <Argus_Cal_GetDefaultCalibration+0x152c>
 801ff16:	21f7      	movs	r1, #247	@ 0xf7
 801ff18:	2d01      	cmp	r5, #1
 801ff1a:	7561      	strb	r1, [r4, #21]
 801ff1c:	f000 8114 	beq.w	8020148 <Argus_Cal_GetDefaultCalibration+0x96c>
 801ff20:	f06f 0130 	mvn.w	r1, #48	@ 0x30
 801ff24:	75a1      	strb	r1, [r4, #22]
 801ff26:	2a00      	cmp	r2, #0
 801ff28:	bf14      	ite	ne
 801ff2a:	f06f 010f 	mvnne.w	r1, #15
 801ff2e:	f06f 0140 	mvneq.w	r1, #64	@ 0x40
 801ff32:	2d01      	cmp	r5, #1
 801ff34:	75e1      	strb	r1, [r4, #23]
 801ff36:	f040 80af 	bne.w	8020098 <Argus_Cal_GetDefaultCalibration+0x8bc>
 801ff3a:	2122      	movs	r1, #34	@ 0x22
 801ff3c:	75e1      	strb	r1, [r4, #23]
 801ff3e:	e0ab      	b.n	8020098 <Argus_Cal_GetDefaultCalibration+0x8bc>
 801ff40:	2f44      	cmp	r7, #68	@ 0x44
 801ff42:	d011      	beq.n	801ff68 <Argus_Cal_GetDefaultCalibration+0x78c>
 801ff44:	f1a7 0345 	sub.w	r3, r7, #69	@ 0x45
 801ff48:	2b02      	cmp	r3, #2
 801ff4a:	bf94      	ite	ls
 801ff4c:	2504      	movls	r5, #4
 801ff4e:	2502      	movhi	r5, #2
 801ff50:	e467      	b.n	801f822 <Argus_Cal_GetDefaultCalibration+0x46>
 801ff52:	f04f 0803 	mov.w	r8, #3
 801ff56:	2d00      	cmp	r5, #0
 801ff58:	f47f ac5f 	bne.w	801f81a <Argus_Cal_GetDefaultCalibration+0x3e>
 801ff5c:	e4c2      	b.n	801f8e4 <Argus_Cal_GetDefaultCalibration+0x108>
 801ff5e:	f06f 00c6 	mvn.w	r0, #198	@ 0xc6
 801ff62:	b002      	add	sp, #8
 801ff64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ff68:	2505      	movs	r5, #5
 801ff6a:	e4c7      	b.n	801f8fc <Argus_Cal_GetDefaultCalibration+0x120>
 801ff6c:	2501      	movs	r5, #1
 801ff6e:	e458      	b.n	801f822 <Argus_Cal_GetDefaultCalibration+0x46>
 801ff70:	4629      	mov	r1, r5
 801ff72:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 801ff76:	4620      	mov	r0, r4
 801ff78:	f003 fc33 	bl	80237e2 <memset>
 801ff7c:	2504      	movs	r5, #4
 801ff7e:	4809      	ldr	r0, [pc, #36]	@ (801ffa4 <Argus_Cal_GetDefaultCalibration+0x7c8>)
 801ff80:	f3c6 0140 	ubfx	r1, r6, #1, #1
 801ff84:	e4c9      	b.n	801f91a <Argus_Cal_GetDefaultCalibration+0x13e>
 801ff86:	2100      	movs	r1, #0
 801ff88:	2280      	movs	r2, #128	@ 0x80
 801ff8a:	f003 fc2a 	bl	80237e2 <memset>
 801ff8e:	4805      	ldr	r0, [pc, #20]	@ (801ffa4 <Argus_Cal_GetDefaultCalibration+0x7c8>)
 801ff90:	f3c6 0140 	ubfx	r1, r6, #1, #1
 801ff94:	e4c1      	b.n	801f91a <Argus_Cal_GetDefaultCalibration+0x13e>
 801ff96:	2502      	movs	r5, #2
 801ff98:	e443      	b.n	801f822 <Argus_Cal_GetDefaultCalibration+0x46>
 801ff9a:	bf00      	nop
 801ff9c:	06400040 	.word	0x06400040
 801ffa0:	02300100 	.word	0x02300100
 801ffa4:	0802be18 	.word	0x0802be18
 801ffa8:	01e0b860 	.word	0x01e0b860
 801ffac:	11030c30 	.word	0x11030c30
 801ffb0:	01401388 	.word	0x01401388
 801ffb4:	60009560 	.word	0x60009560
 801ffb8:	f244 71e5 	movw	r1, #18405	@ 0x47e5
 801ffbc:	2d01      	cmp	r5, #1
 801ffbe:	8061      	strh	r1, [r4, #2]
 801ffc0:	f001 818d 	beq.w	80212de <Argus_Cal_GetDefaultCalibration+0x1b02>
 801ffc4:	2b04      	cmp	r3, #4
 801ffc6:	f000 8478 	beq.w	80208ba <Argus_Cal_GetDefaultCalibration+0x10de>
 801ffca:	2b03      	cmp	r3, #3
 801ffcc:	f001 8180 	beq.w	80212d0 <Argus_Cal_GetDefaultCalibration+0x1af4>
 801ffd0:	2a00      	cmp	r2, #0
 801ffd2:	f000 861c 	beq.w	8020c0e <Argus_Cal_GetDefaultCalibration+0x1432>
 801ffd6:	212d      	movs	r1, #45	@ 0x2d
 801ffd8:	2d01      	cmp	r5, #1
 801ffda:	7221      	strb	r1, [r4, #8]
 801ffdc:	f000 8472 	beq.w	80208c4 <Argus_Cal_GetDefaultCalibration+0x10e8>
 801ffe0:	216c      	movs	r1, #108	@ 0x6c
 801ffe2:	7261      	strb	r1, [r4, #9]
 801ffe4:	2b05      	cmp	r3, #5
 801ffe6:	f43f ace2 	beq.w	801f9ae <Argus_Cal_GetDefaultCalibration+0x1d2>
 801ffea:	2b04      	cmp	r3, #4
 801ffec:	f000 87d1 	beq.w	8020f92 <Argus_Cal_GetDefaultCalibration+0x17b6>
 801fff0:	2b03      	cmp	r3, #3
 801fff2:	f001 8160 	beq.w	80212b6 <Argus_Cal_GetDefaultCalibration+0x1ada>
 801fff6:	2a00      	cmp	r2, #0
 801fff8:	bf14      	ite	ne
 801fffa:	213e      	movne	r1, #62	@ 0x3e
 801fffc:	213b      	moveq	r1, #59	@ 0x3b
 801fffe:	2d01      	cmp	r5, #1
 8020000:	72a1      	strb	r1, [r4, #10]
 8020002:	f000 84f3 	beq.w	80209ec <Argus_Cal_GetDefaultCalibration+0x1210>
 8020006:	2a00      	cmp	r2, #0
 8020008:	f000 85a1 	beq.w	8020b4e <Argus_Cal_GetDefaultCalibration+0x1372>
 802000c:	2166      	movs	r1, #102	@ 0x66
 802000e:	72e1      	strb	r1, [r4, #11]
 8020010:	211b      	movs	r1, #27
 8020012:	7321      	strb	r1, [r4, #12]
 8020014:	2b04      	cmp	r3, #4
 8020016:	f43f af34 	beq.w	801fe82 <Argus_Cal_GetDefaultCalibration+0x6a6>
 802001a:	2b03      	cmp	r3, #3
 802001c:	f000 8520 	beq.w	8020a60 <Argus_Cal_GetDefaultCalibration+0x1284>
 8020020:	2a00      	cmp	r2, #0
 8020022:	bf14      	ite	ne
 8020024:	2147      	movne	r1, #71	@ 0x47
 8020026:	2149      	moveq	r1, #73	@ 0x49
 8020028:	2d01      	cmp	r5, #1
 802002a:	7361      	strb	r1, [r4, #13]
 802002c:	f000 861f 	beq.w	8020c6e <Argus_Cal_GetDefaultCalibration+0x1492>
 8020030:	f1c2 0127 	rsb	r1, r2, #39	@ 0x27
 8020034:	73a1      	strb	r1, [r4, #14]
 8020036:	2b03      	cmp	r3, #3
 8020038:	f000 851c 	beq.w	8020a74 <Argus_Cal_GetDefaultCalibration+0x1298>
 802003c:	2a00      	cmp	r2, #0
 802003e:	bf14      	ite	ne
 8020040:	2133      	movne	r1, #51	@ 0x33
 8020042:	2135      	moveq	r1, #53	@ 0x35
 8020044:	2d01      	cmp	r5, #1
 8020046:	73e1      	strb	r1, [r4, #15]
 8020048:	f000 84a6 	beq.w	8020998 <Argus_Cal_GetDefaultCalibration+0x11bc>
 802004c:	2a00      	cmp	r2, #0
 802004e:	f000 8595 	beq.w	8020b7c <Argus_Cal_GetDefaultCalibration+0x13a0>
 8020052:	210e      	movs	r1, #14
 8020054:	7421      	strb	r1, [r4, #16]
 8020056:	2146      	movs	r1, #70	@ 0x46
 8020058:	7461      	strb	r1, [r4, #17]
 802005a:	f1c2 0116 	rsb	r1, r2, #22
 802005e:	74a1      	strb	r1, [r4, #18]
 8020060:	2a00      	cmp	r2, #0
 8020062:	f000 8594 	beq.w	8020b8e <Argus_Cal_GetDefaultCalibration+0x13b2>
 8020066:	2133      	movs	r1, #51	@ 0x33
 8020068:	74e1      	strb	r1, [r4, #19]
 802006a:	210e      	movs	r1, #14
 802006c:	7521      	strb	r1, [r4, #20]
 802006e:	2148      	movs	r1, #72	@ 0x48
 8020070:	7561      	strb	r1, [r4, #21]
 8020072:	2a00      	cmp	r2, #0
 8020074:	f000 8574 	beq.w	8020b60 <Argus_Cal_GetDefaultCalibration+0x1384>
 8020078:	2114      	movs	r1, #20
 802007a:	75a1      	strb	r1, [r4, #22]
 802007c:	2b04      	cmp	r3, #4
 802007e:	f43f af52 	beq.w	801ff26 <Argus_Cal_GetDefaultCalibration+0x74a>
 8020082:	2b03      	cmp	r3, #3
 8020084:	f000 84e2 	beq.w	8020a4c <Argus_Cal_GetDefaultCalibration+0x1270>
 8020088:	2a00      	cmp	r2, #0
 802008a:	bf14      	ite	ne
 802008c:	2133      	movne	r1, #51	@ 0x33
 802008e:	2138      	moveq	r1, #56	@ 0x38
 8020090:	2d01      	cmp	r5, #1
 8020092:	75e1      	strb	r1, [r4, #23]
 8020094:	f000 8778 	beq.w	8020f88 <Argus_Cal_GetDefaultCalibration+0x17ac>
 8020098:	49bf      	ldr	r1, [pc, #764]	@ (8020398 <Argus_Cal_GetDefaultCalibration+0xbbc>)
 802009a:	61a1      	str	r1, [r4, #24]
 802009c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80200a0:	8021      	strh	r1, [r4, #0]
 80200a2:	1e19      	subs	r1, r3, #0
 80200a4:	bf18      	it	ne
 80200a6:	2101      	movne	r1, #1
 80200a8:	f884 124c 	strb.w	r1, [r4, #588]	@ 0x24c
 80200ac:	2a00      	cmp	r2, #0
 80200ae:	f47f aced 	bne.w	801fa8c <Argus_Cal_GetDefaultCalibration+0x2b0>
 80200b2:	f884 1258 	strb.w	r1, [r4, #600]	@ 0x258
 80200b6:	49b9      	ldr	r1, [pc, #740]	@ (802039c <Argus_Cal_GetDefaultCalibration+0xbc0>)
 80200b8:	e9c4 1194 	strd	r1, r1, [r4, #592]	@ 0x250
 80200bc:	2110      	movs	r1, #16
 80200be:	f8a4 124e 	strh.w	r1, [r4, #590]	@ 0x24e
 80200c2:	219a      	movs	r1, #154	@ 0x9a
 80200c4:	f884 124d 	strb.w	r1, [r4, #589]	@ 0x24d
 80200c8:	f06f 1128 	mvn.w	r1, #2621480	@ 0x280028
 80200cc:	f8c4 125a 	str.w	r1, [r4, #602]	@ 0x25a
 80200d0:	f246 6166 	movw	r1, #26214	@ 0x6666
 80200d4:	f8a4 109c 	strh.w	r1, [r4, #156]	@ 0x9c
 80200d8:	2b05      	cmp	r3, #5
 80200da:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 80200de:	f8a4 122a 	strh.w	r1, [r4, #554]	@ 0x22a
 80200e2:	f000 8403 	beq.w	80208ec <Argus_Cal_GetDefaultCalibration+0x1110>
 80200e6:	f06f 0938 	mvn.w	r9, #56	@ 0x38
 80200ea:	f06f 0ecc 	mvn.w	lr, #204	@ 0xcc
 80200ee:	e4eb      	b.n	801fac8 <Argus_Cal_GetDefaultCalibration+0x2ec>
 80200f0:	f644 118a 	movw	r1, #18826	@ 0x498a
 80200f4:	e6a2      	b.n	801fe3c <Argus_Cal_GetDefaultCalibration+0x660>
 80200f6:	2a00      	cmp	r2, #0
 80200f8:	bf14      	ite	ne
 80200fa:	f06f 0115 	mvnne.w	r1, #21
 80200fe:	f06f 011e 	mvneq.w	r1, #30
 8020102:	2d01      	cmp	r5, #1
 8020104:	7321      	strb	r1, [r4, #12]
 8020106:	f040 84ab 	bne.w	8020a60 <Argus_Cal_GetDefaultCalibration+0x1284>
 802010a:	21fe      	movs	r1, #254	@ 0xfe
 802010c:	7321      	strb	r1, [r4, #12]
 802010e:	e781      	b.n	8020014 <Argus_Cal_GetDefaultCalibration+0x838>
 8020110:	2a00      	cmp	r2, #0
 8020112:	bf14      	ite	ne
 8020114:	212d      	movne	r1, #45	@ 0x2d
 8020116:	2130      	moveq	r1, #48	@ 0x30
 8020118:	2d01      	cmp	r5, #1
 802011a:	74e1      	strb	r1, [r4, #19]
 802011c:	f000 857f 	beq.w	8020c1e <Argus_Cal_GetDefaultCalibration+0x1442>
 8020120:	2a00      	cmp	r2, #0
 8020122:	bf14      	ite	ne
 8020124:	f06f 0125 	mvnne.w	r1, #37	@ 0x25
 8020128:	f06f 0130 	mvneq.w	r1, #48	@ 0x30
 802012c:	2d01      	cmp	r5, #1
 802012e:	7521      	strb	r1, [r4, #20]
 8020130:	f040 8482 	bne.w	8020a38 <Argus_Cal_GetDefaultCalibration+0x125c>
 8020134:	21f2      	movs	r1, #242	@ 0xf2
 8020136:	7521      	strb	r1, [r4, #20]
 8020138:	2b04      	cmp	r3, #4
 802013a:	f43f aee9 	beq.w	801ff10 <Argus_Cal_GetDefaultCalibration+0x734>
 802013e:	2b03      	cmp	r3, #3
 8020140:	f000 847a 	beq.w	8020a38 <Argus_Cal_GetDefaultCalibration+0x125c>
 8020144:	2148      	movs	r1, #72	@ 0x48
 8020146:	7561      	strb	r1, [r4, #21]
 8020148:	211f      	movs	r1, #31
 802014a:	2b05      	cmp	r3, #5
 802014c:	7561      	strb	r1, [r4, #21]
 802014e:	d104      	bne.n	802015a <Argus_Cal_GetDefaultCalibration+0x97e>
 8020150:	2a00      	cmp	r2, #0
 8020152:	f47f ac87 	bne.w	801fa64 <Argus_Cal_GetDefaultCalibration+0x288>
 8020156:	211e      	movs	r1, #30
 8020158:	e485      	b.n	801fa66 <Argus_Cal_GetDefaultCalibration+0x28a>
 802015a:	2b04      	cmp	r3, #4
 802015c:	f000 8725 	beq.w	8020faa <Argus_Cal_GetDefaultCalibration+0x17ce>
 8020160:	2b03      	cmp	r3, #3
 8020162:	f001 80c0 	beq.w	80212e6 <Argus_Cal_GetDefaultCalibration+0x1b0a>
 8020166:	2a00      	cmp	r2, #0
 8020168:	f000 84fa 	beq.w	8020b60 <Argus_Cal_GetDefaultCalibration+0x1384>
 802016c:	f1c2 010e 	rsb	r1, r2, #14
 8020170:	75a1      	strb	r1, [r4, #22]
 8020172:	e783      	b.n	802007c <Argus_Cal_GetDefaultCalibration+0x8a0>
 8020174:	f8df c23c 	ldr.w	ip, [pc, #572]	@ 80203b4 <Argus_Cal_GetDefaultCalibration+0xbd8>
 8020178:	f8c4 c25e 	str.w	ip, [r4, #606]	@ 0x25e
 802017c:	f04f 0c07 	mov.w	ip, #7
 8020180:	f884 c264 	strb.w	ip, [r4, #612]	@ 0x264
 8020184:	f243 0c28 	movw	ip, #12328	@ 0x3028
 8020188:	f8a4 c265 	strh.w	ip, [r4, #613]	@ 0x265
 802018c:	2b05      	cmp	r3, #5
 802018e:	f44f 4c7a 	mov.w	ip, #64000	@ 0xfa00
 8020192:	f8a4 c262 	strh.w	ip, [r4, #610]	@ 0x262
 8020196:	f040 832a 	bne.w	80207ee <Argus_Cal_GetDefaultCalibration+0x1012>
 802019a:	f241 3c5e 	movw	ip, #4958	@ 0x135e
 802019e:	f241 2aa3 	movw	sl, #4771	@ 0x12a3
 80201a2:	2a00      	cmp	r2, #0
 80201a4:	bf08      	it	eq
 80201a6:	46d4      	moveq	ip, sl
 80201a8:	2d01      	cmp	r5, #1
 80201aa:	f8a4 c274 	strh.w	ip, [r4, #628]	@ 0x274
 80201ae:	f000 830a 	beq.w	80207c6 <Argus_Cal_GetDefaultCalibration+0xfea>
 80201b2:	2a00      	cmp	r2, #0
 80201b4:	f000 830e 	beq.w	80207d4 <Argus_Cal_GetDefaultCalibration+0xff8>
 80201b8:	f241 3c3b 	movw	ip, #4923	@ 0x133b
 80201bc:	f8a4 c276 	strh.w	ip, [r4, #630]	@ 0x276
 80201c0:	f241 3c4d 	movw	ip, #4941	@ 0x134d
 80201c4:	2d01      	cmp	r5, #1
 80201c6:	f8a4 c278 	strh.w	ip, [r4, #632]	@ 0x278
 80201ca:	f000 82e9 	beq.w	80207a0 <Argus_Cal_GetDefaultCalibration+0xfc4>
 80201ce:	2a00      	cmp	r2, #0
 80201d0:	f000 858e 	beq.w	8020cf0 <Argus_Cal_GetDefaultCalibration+0x1514>
 80201d4:	f241 3c44 	movw	ip, #4932	@ 0x1344
 80201d8:	f8a4 c27a 	strh.w	ip, [r4, #634]	@ 0x27a
 80201dc:	e5c2      	b.n	801fd64 <Argus_Cal_GetDefaultCalibration+0x588>
 80201de:	f240 4133 	movw	r1, #1075	@ 0x433
 80201e2:	2d01      	cmp	r5, #1
 80201e4:	f8a4 122c 	strh.w	r1, [r4, #556]	@ 0x22c
 80201e8:	f47f acb8 	bne.w	801fb5c <Argus_Cal_GetDefaultCalibration+0x380>
 80201ec:	f44f 7150 	mov.w	r1, #832	@ 0x340
 80201f0:	f8a4 122c 	strh.w	r1, [r4, #556]	@ 0x22c
 80201f4:	e4b2      	b.n	801fb5c <Argus_Cal_GetDefaultCalibration+0x380>
 80201f6:	2a00      	cmp	r2, #0
 80201f8:	f040 838d 	bne.w	8020916 <Argus_Cal_GetDefaultCalibration+0x113a>
 80201fc:	f44f 7162 	mov.w	r1, #904	@ 0x388
 8020200:	e55d      	b.n	801fcbe <Argus_Cal_GetDefaultCalibration+0x4e2>
 8020202:	2a00      	cmp	r2, #0
 8020204:	f040 8381 	bne.w	802090a <Argus_Cal_GetDefaultCalibration+0x112e>
 8020208:	f240 31a9 	movw	r1, #937	@ 0x3a9
 802020c:	e491      	b.n	801fb32 <Argus_Cal_GetDefaultCalibration+0x356>
 802020e:	f240 21a3 	movw	r1, #675	@ 0x2a3
 8020212:	2d01      	cmp	r5, #1
 8020214:	f8a4 1234 	strh.w	r1, [r4, #564]	@ 0x234
 8020218:	f000 85f9 	beq.w	8020e0e <Argus_Cal_GetDefaultCalibration+0x1632>
 802021c:	f06f 0ef5 	mvn.w	lr, #245	@ 0xf5
 8020220:	f06f 09a3 	mvn.w	r9, #163	@ 0xa3
 8020224:	2a00      	cmp	r2, #0
 8020226:	f000 836c 	beq.w	8020902 <Argus_Cal_GetDefaultCalibration+0x1126>
 802022a:	f640 0138 	movw	r1, #2104	@ 0x838
 802022e:	f8a4 1236 	strh.w	r1, [r4, #566]	@ 0x236
 8020232:	2a00      	cmp	r2, #0
 8020234:	f040 836c 	bne.w	8020910 <Argus_Cal_GetDefaultCalibration+0x1134>
 8020238:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 802023c:	e469      	b.n	801fb12 <Argus_Cal_GetDefaultCalibration+0x336>
 802023e:	2a00      	cmp	r2, #0
 8020240:	f040 82df 	bne.w	8020802 <Argus_Cal_GetDefaultCalibration+0x1026>
 8020244:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8020248:	e4e2      	b.n	801fc10 <Argus_Cal_GetDefaultCalibration+0x434>
 802024a:	2a00      	cmp	r2, #0
 802024c:	f040 836c 	bne.w	8020928 <Argus_Cal_GetDefaultCalibration+0x114c>
 8020250:	f240 5125 	movw	r1, #1317	@ 0x525
 8020254:	e49d      	b.n	801fb92 <Argus_Cal_GetDefaultCalibration+0x3b6>
 8020256:	2a00      	cmp	r2, #0
 8020258:	f040 82cd 	bne.w	80207f6 <Argus_Cal_GetDefaultCalibration+0x101a>
 802025c:	21a7      	movs	r1, #167	@ 0xa7
 802025e:	e4b7      	b.n	801fbd0 <Argus_Cal_GetDefaultCalibration+0x3f4>
 8020260:	2a00      	cmp	r2, #0
 8020262:	d0bc      	beq.n	80201de <Argus_Cal_GetDefaultCalibration+0xa02>
 8020264:	f240 314a 	movw	r1, #842	@ 0x34a
 8020268:	e473      	b.n	801fb52 <Argus_Cal_GetDefaultCalibration+0x376>
 802026a:	2a00      	cmp	r2, #0
 802026c:	f040 8359 	bne.w	8020922 <Argus_Cal_GetDefaultCalibration+0x1146>
 8020270:	f240 31b3 	movw	r1, #947	@ 0x3b3
 8020274:	e4bc      	b.n	801fbf0 <Argus_Cal_GetDefaultCalibration+0x414>
 8020276:	2a00      	cmp	r2, #0
 8020278:	f040 8350 	bne.w	802091c <Argus_Cal_GetDefaultCalibration+0x1140>
 802027c:	f240 21c7 	movw	r1, #711	@ 0x2c7
 8020280:	e497      	b.n	801fbb2 <Argus_Cal_GetDefaultCalibration+0x3d6>
 8020282:	2a00      	cmp	r2, #0
 8020284:	f040 82c3 	bne.w	802080e <Argus_Cal_GetDefaultCalibration+0x1032>
 8020288:	f44f 7127 	mov.w	r1, #668	@ 0x29c
 802028c:	e471      	b.n	801fb72 <Argus_Cal_GetDefaultCalibration+0x396>
 802028e:	2a00      	cmp	r2, #0
 8020290:	f040 8329 	bne.w	80208e6 <Argus_Cal_GetDefaultCalibration+0x110a>
 8020294:	f240 4192 	movw	r1, #1170	@ 0x492
 8020298:	e501      	b.n	801fc9e <Argus_Cal_GetDefaultCalibration+0x4c2>
 802029a:	2117      	movs	r1, #23
 802029c:	7221      	strb	r1, [r4, #8]
 802029e:	214a      	movs	r1, #74	@ 0x4a
 80202a0:	7261      	strb	r1, [r4, #9]
 80202a2:	e69f      	b.n	801ffe4 <Argus_Cal_GetDefaultCalibration+0x808>
 80202a4:	2a00      	cmp	r2, #0
 80202a6:	f040 82a9 	bne.w	80207fc <Argus_Cal_GetDefaultCalibration+0x1020>
 80202aa:	f240 31de 	movw	r1, #990	@ 0x3de
 80202ae:	e4d6      	b.n	801fc5e <Argus_Cal_GetDefaultCalibration+0x482>
 80202b0:	2a00      	cmp	r2, #0
 80202b2:	f040 82ff 	bne.w	80208b4 <Argus_Cal_GetDefaultCalibration+0x10d8>
 80202b6:	f240 5181 	movw	r1, #1409	@ 0x581
 80202ba:	e4c0      	b.n	801fc3e <Argus_Cal_GetDefaultCalibration+0x462>
 80202bc:	2b03      	cmp	r3, #3
 80202be:	f000 85bd 	beq.w	8020e3c <Argus_Cal_GetDefaultCalibration+0x1660>
 80202c2:	2100      	movs	r1, #0
 80202c4:	2b05      	cmp	r3, #5
 80202c6:	80e0      	strh	r0, [r4, #6]
 80202c8:	80a1      	strh	r1, [r4, #4]
 80202ca:	f040 841d 	bne.w	8020b08 <Argus_Cal_GetDefaultCalibration+0x132c>
 80202ce:	2a00      	cmp	r2, #0
 80202d0:	f000 8743 	beq.w	802115a <Argus_Cal_GetDefaultCalibration+0x197e>
 80202d4:	4932      	ldr	r1, [pc, #200]	@ (80203a0 <Argus_Cal_GetDefaultCalibration+0xbc4>)
 80202d6:	f8df c0e0 	ldr.w	ip, [pc, #224]	@ 80203b8 <Argus_Cal_GetDefaultCalibration+0xbdc>
 80202da:	75a3      	strb	r3, [r4, #22]
 80202dc:	e9c4 c102 	strd	ip, r1, [r4, #8]
 80202e0:	4930      	ldr	r1, [pc, #192]	@ (80203a4 <Argus_Cal_GetDefaultCalibration+0xbc8>)
 80202e2:	6121      	str	r1, [r4, #16]
 80202e4:	f244 1141 	movw	r1, #16705	@ 0x4141
 80202e8:	8061      	strh	r1, [r4, #2]
 80202ea:	f645 41f2 	movw	r1, #23794	@ 0x5cf2
 80202ee:	82a1      	strh	r1, [r4, #20]
 80202f0:	2120      	movs	r1, #32
 80202f2:	75e1      	strb	r1, [r4, #23]
 80202f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80202f8:	8021      	strh	r1, [r4, #0]
 80202fa:	f8a4 e250 	strh.w	lr, [r4, #592]	@ 0x250
 80202fe:	f8a4 e254 	strh.w	lr, [r4, #596]	@ 0x254
 8020302:	f8a4 9252 	strh.w	r9, [r4, #594]	@ 0x252
 8020306:	f8a4 9256 	strh.w	r9, [r4, #598]	@ 0x256
 802030a:	2a00      	cmp	r2, #0
 802030c:	f000 8664 	beq.w	8020fd8 <Argus_Cal_GetDefaultCalibration+0x17fc>
 8020310:	f243 3233 	movw	r2, #13107	@ 0x3333
 8020314:	2b05      	cmp	r3, #5
 8020316:	f8a4 209c 	strh.w	r2, [r4, #156]	@ 0x9c
 802031a:	f040 8412 	bne.w	8020b42 <Argus_Cal_GetDefaultCalibration+0x1366>
 802031e:	4b22      	ldr	r3, [pc, #136]	@ (80203a8 <Argus_Cal_GetDefaultCalibration+0xbcc>)
 8020320:	f8c4 3274 	str.w	r3, [r4, #628]	@ 0x274
 8020324:	f46f 71a0 	mvn.w	r1, #320	@ 0x140
 8020328:	f5a3 0326 	sub.w	r3, r3, #10878976	@ 0xa60000
 802032c:	440b      	add	r3, r1
 802032e:	f8c4 3278 	str.w	r3, [r4, #632]	@ 0x278
 8020332:	4b1e      	ldr	r3, [pc, #120]	@ (80203ac <Argus_Cal_GetDefaultCalibration+0xbd0>)
 8020334:	491e      	ldr	r1, [pc, #120]	@ (80203b0 <Argus_Cal_GetDefaultCalibration+0xbd4>)
 8020336:	f46f 7096 	mvn.w	r0, #300	@ 0x12c
 802033a:	e9c4 1391 	strd	r1, r3, [r4, #580]	@ 0x244
 802033e:	f5a3 13b8 	sub.w	r3, r3, #1507328	@ 0x170000
 8020342:	4403      	add	r3, r0
 8020344:	f8c4 322c 	str.w	r3, [r4, #556]	@ 0x22c
 8020348:	f503 03f8 	add.w	r3, r3, #8126464	@ 0x7c0000
 802034c:	f503 73f1 	add.w	r3, r3, #482	@ 0x1e2
 8020350:	f8c4 3230 	str.w	r3, [r4, #560]	@ 0x230
 8020354:	f46f 7c34 	mvn.w	ip, #720	@ 0x2d0
 8020358:	f1a3 732c 	sub.w	r3, r3, #45088768	@ 0x2b00000
 802035c:	4463      	add	r3, ip
 802035e:	f8c4 3234 	str.w	r3, [r4, #564]	@ 0x234
 8020362:	f103 73d5 	add.w	r3, r3, #27918336	@ 0x1aa0000
 8020366:	f203 139d 	addw	r3, r3, #413	@ 0x19d
 802036a:	f8c4 3238 	str.w	r3, [r4, #568]	@ 0x238
 802036e:	f103 63de 	add.w	r3, r3, #116391936	@ 0x6f00000
 8020372:	3358      	adds	r3, #88	@ 0x58
 8020374:	f8c4 323c 	str.w	r3, [r4, #572]	@ 0x23c
 8020378:	f240 73ae 	movw	r3, #1966	@ 0x7ae
 802037c:	f8a4 3240 	strh.w	r3, [r4, #576]	@ 0x240
 8020380:	f241 637d 	movw	r3, #5757	@ 0x167d
 8020384:	f8a4 3242 	strh.w	r3, [r4, #578]	@ 0x242
 8020388:	e518      	b.n	801fdbc <Argus_Cal_GetDefaultCalibration+0x5e0>
 802038a:	2a00      	cmp	r2, #0
 802038c:	f040 823c 	bne.w	8020808 <Argus_Cal_GetDefaultCalibration+0x102c>
 8020390:	f240 21c1 	movw	r1, #705	@ 0x2c1
 8020394:	e473      	b.n	801fc7e <Argus_Cal_GetDefaultCalibration+0x4a2>
 8020396:	bf00      	nop
 8020398:	0205711a 	.word	0x0205711a
 802039c:	ffc7ff33 	.word	0xffc7ff33
 80203a0:	1d114f06 	.word	0x1d114f06
 80203a4:	21065ef4 	.word	0x21065ef4
 80203a8:	08ae0997 	.word	0x08ae0997
 80203ac:	0fe306e9 	.word	0x0fe306e9
 80203b0:	10620635 	.word	0x10620635
 80203b4:	01e0b860 	.word	0x01e0b860
 80203b8:	5c39992e 	.word	0x5c39992e
 80203bc:	f240 4c19 	movw	ip, #1049	@ 0x419
 80203c0:	f1a8 0104 	sub.w	r1, r8, #4
 80203c4:	f8a4 c26a 	strh.w	ip, [r4, #618]	@ 0x26a
 80203c8:	f04f 0c28 	mov.w	ip, #40	@ 0x28
 80203cc:	b2c9      	uxtb	r1, r1
 80203ce:	f884 c269 	strb.w	ip, [r4, #617]	@ 0x269
 80203d2:	f44f 5caa 	mov.w	ip, #5440	@ 0x1540
 80203d6:	f8a4 c267 	strh.w	ip, [r4, #615]	@ 0x267
 80203da:	2901      	cmp	r1, #1
 80203dc:	f04f 0c0e 	mov.w	ip, #14
 80203e0:	f884 c264 	strb.w	ip, [r4, #612]	@ 0x264
 80203e4:	f67f aec6 	bls.w	8020174 <Argus_Cal_GetDefaultCalibration+0x998>
 80203e8:	f8df ca44 	ldr.w	ip, [pc, #2628]	@ 8020e30 <Argus_Cal_GetDefaultCalibration+0x1654>
 80203ec:	f8c4 c25e 	str.w	ip, [r4, #606]	@ 0x25e
 80203f0:	f243 0c28 	movw	ip, #12328	@ 0x3028
 80203f4:	f8a4 c265 	strh.w	ip, [r4, #613]	@ 0x265
 80203f8:	2b05      	cmp	r3, #5
 80203fa:	f44f 4c7a 	mov.w	ip, #64000	@ 0xfa00
 80203fe:	f8a4 c262 	strh.w	ip, [r4, #610]	@ 0x262
 8020402:	f43f aeca 	beq.w	802019a <Argus_Cal_GetDefaultCalibration+0x9be>
 8020406:	2b03      	cmp	r3, #3
 8020408:	f47f ac8a 	bne.w	801fd20 <Argus_Cal_GetDefaultCalibration+0x544>
 802040c:	f241 6cb5 	movw	ip, #5813	@ 0x16b5
 8020410:	f641 2a5a 	movw	sl, #6746	@ 0x1a5a
 8020414:	2a00      	cmp	r2, #0
 8020416:	bf08      	it	eq
 8020418:	46d4      	moveq	ip, sl
 802041a:	2d01      	cmp	r5, #1
 802041c:	f8a4 c274 	strh.w	ip, [r4, #628]	@ 0x274
 8020420:	f000 8439 	beq.w	8020c96 <Argus_Cal_GetDefaultCalibration+0x14ba>
 8020424:	f241 6cba 	movw	ip, #5818	@ 0x16ba
 8020428:	f641 2a56 	movw	sl, #6742	@ 0x1a56
 802042c:	2a00      	cmp	r2, #0
 802042e:	bf08      	it	eq
 8020430:	46d4      	moveq	ip, sl
 8020432:	2d01      	cmp	r5, #1
 8020434:	f8a4 c276 	strh.w	ip, [r4, #630]	@ 0x276
 8020438:	f000 8428 	beq.w	8020c8c <Argus_Cal_GetDefaultCalibration+0x14b0>
 802043c:	2a00      	cmp	r2, #0
 802043e:	f000 85bf 	beq.w	8020fc0 <Argus_Cal_GetDefaultCalibration+0x17e4>
 8020442:	f241 6c6b 	movw	ip, #5739	@ 0x166b
 8020446:	f8a4 c278 	strh.w	ip, [r4, #632]	@ 0x278
 802044a:	f241 6c5f 	movw	ip, #5727	@ 0x165f
 802044e:	f641 1aed 	movw	sl, #6637	@ 0x19ed
 8020452:	2a00      	cmp	r2, #0
 8020454:	bf08      	it	eq
 8020456:	46d4      	moveq	ip, sl
 8020458:	2d01      	cmp	r5, #1
 802045a:	f8a4 c27a 	strh.w	ip, [r4, #634]	@ 0x27a
 802045e:	f47f ac81 	bne.w	801fd64 <Argus_Cal_GetDefaultCalibration+0x588>
 8020462:	f1a3 0c03 	sub.w	ip, r3, #3
 8020466:	f1bc 0f01 	cmp.w	ip, #1
 802046a:	f240 8775 	bls.w	8021358 <Argus_Cal_GetDefaultCalibration+0x1b7c>
 802046e:	f241 0c85 	movw	ip, #4229	@ 0x1085
 8020472:	f640 7aff 	movw	sl, #4095	@ 0xfff
 8020476:	2a00      	cmp	r2, #0
 8020478:	bf08      	it	eq
 802047a:	46d4      	moveq	ip, sl
 802047c:	2b04      	cmp	r3, #4
 802047e:	f8a4 c27a 	strh.w	ip, [r4, #634]	@ 0x27a
 8020482:	f47f ac6f 	bne.w	801fd64 <Argus_Cal_GetDefaultCalibration+0x588>
 8020486:	f8df c9ac 	ldr.w	ip, [pc, #2476]	@ 8020e34 <Argus_Cal_GetDefaultCalibration+0x1658>
 802048a:	f8c4 c26c 	str.w	ip, [r4, #620]	@ 0x26c
 802048e:	f04f 0c1d 	mov.w	ip, #29
 8020492:	f884 c270 	strb.w	ip, [r4, #624]	@ 0x270
 8020496:	f04f 0c2f 	mov.w	ip, #47	@ 0x2f
 802049a:	e46d      	b.n	801fd78 <Argus_Cal_GetDefaultCalibration+0x59c>
 802049c:	2a00      	cmp	r2, #0
 802049e:	f000 81fc 	beq.w	802089a <Argus_Cal_GetDefaultCalibration+0x10be>
 80204a2:	2118      	movs	r1, #24
 80204a4:	f8a4 1222 	strh.w	r1, [r4, #546]	@ 0x222
 80204a8:	2168      	movs	r1, #104	@ 0x68
 80204aa:	f240 4c19 	movw	ip, #1049	@ 0x419
 80204ae:	f8a4 1224 	strh.w	r1, [r4, #548]	@ 0x224
 80204b2:	f8a4 c26a 	strh.w	ip, [r4, #618]	@ 0x26a
 80204b6:	f1a8 0104 	sub.w	r1, r8, #4
 80204ba:	f04f 0c28 	mov.w	ip, #40	@ 0x28
 80204be:	b2c9      	uxtb	r1, r1
 80204c0:	f884 c269 	strb.w	ip, [r4, #617]	@ 0x269
 80204c4:	f44f 5caa 	mov.w	ip, #5440	@ 0x1540
 80204c8:	f8a4 c267 	strh.w	ip, [r4, #615]	@ 0x267
 80204cc:	2901      	cmp	r1, #1
 80204ce:	f04f 0c0e 	mov.w	ip, #14
 80204d2:	f884 c264 	strb.w	ip, [r4, #612]	@ 0x264
 80204d6:	f67f ae4d 	bls.w	8020174 <Argus_Cal_GetDefaultCalibration+0x998>
 80204da:	f8df c954 	ldr.w	ip, [pc, #2388]	@ 8020e30 <Argus_Cal_GetDefaultCalibration+0x1654>
 80204de:	f8c4 c25e 	str.w	ip, [r4, #606]	@ 0x25e
 80204e2:	f243 0c28 	movw	ip, #12328	@ 0x3028
 80204e6:	f8a4 c265 	strh.w	ip, [r4, #613]	@ 0x265
 80204ea:	f44f 4c7a 	mov.w	ip, #64000	@ 0xfa00
 80204ee:	f8a4 c262 	strh.w	ip, [r4, #610]	@ 0x262
 80204f2:	f640 7cfb 	movw	ip, #4091	@ 0xffb
 80204f6:	f640 7a41 	movw	sl, #3905	@ 0xf41
 80204fa:	2a00      	cmp	r2, #0
 80204fc:	bf08      	it	eq
 80204fe:	46d4      	moveq	ip, sl
 8020500:	2d01      	cmp	r5, #1
 8020502:	f8a4 c274 	strh.w	ip, [r4, #628]	@ 0x274
 8020506:	f000 83c6 	beq.w	8020c96 <Argus_Cal_GetDefaultCalibration+0x14ba>
 802050a:	f241 0c79 	movw	ip, #4217	@ 0x1079
 802050e:	f640 6adf 	movw	sl, #3807	@ 0xedf
 8020512:	2a00      	cmp	r2, #0
 8020514:	bf08      	it	eq
 8020516:	46d4      	moveq	ip, sl
 8020518:	2d01      	cmp	r5, #1
 802051a:	f8a4 c276 	strh.w	ip, [r4, #630]	@ 0x276
 802051e:	f000 83b5 	beq.w	8020c8c <Argus_Cal_GetDefaultCalibration+0x14b0>
 8020522:	f640 7cdd 	movw	ip, #4061	@ 0xfdd
 8020526:	f640 6a66 	movw	sl, #3686	@ 0xe66
 802052a:	2a00      	cmp	r2, #0
 802052c:	bf08      	it	eq
 802052e:	46d4      	moveq	ip, sl
 8020530:	2d01      	cmp	r5, #1
 8020532:	f8a4 c278 	strh.w	ip, [r4, #632]	@ 0x278
 8020536:	f000 8133 	beq.w	80207a0 <Argus_Cal_GetDefaultCalibration+0xfc4>
 802053a:	2b04      	cmp	r3, #4
 802053c:	d10e      	bne.n	802055c <Argus_Cal_GetDefaultCalibration+0xd80>
 802053e:	2a00      	cmp	r2, #0
 8020540:	f640 6c07 	movw	ip, #3591	@ 0xe07
 8020544:	bf18      	it	ne
 8020546:	f44f 6c75 	movne.w	ip, #3920	@ 0xf50
 802054a:	2d01      	cmp	r5, #1
 802054c:	f8a4 c27a 	strh.w	ip, [r4, #634]	@ 0x27a
 8020550:	d199      	bne.n	8020486 <Argus_Cal_GetDefaultCalibration+0xcaa>
 8020552:	f241 0c85 	movw	ip, #4229	@ 0x1085
 8020556:	f8a4 c27a 	strh.w	ip, [r4, #634]	@ 0x27a
 802055a:	e794      	b.n	8020486 <Argus_Cal_GetDefaultCalibration+0xcaa>
 802055c:	2b03      	cmp	r3, #3
 802055e:	f43f af74 	beq.w	802044a <Argus_Cal_GetDefaultCalibration+0xc6e>
 8020562:	f241 1c65 	movw	ip, #4453	@ 0x1165
 8020566:	f241 2a7b 	movw	sl, #4731	@ 0x127b
 802056a:	2a00      	cmp	r2, #0
 802056c:	bf08      	it	eq
 802056e:	46d4      	moveq	ip, sl
 8020570:	e772      	b.n	8020458 <Argus_Cal_GetDefaultCalibration+0xc7c>
 8020572:	f640 21eb 	movw	r1, #2795	@ 0xaeb
 8020576:	2d01      	cmp	r5, #1
 8020578:	f8a4 1246 	strh.w	r1, [r4, #582]	@ 0x246
 802057c:	f47f ab3d 	bne.w	801fbfa <Argus_Cal_GetDefaultCalibration+0x41e>
 8020580:	f640 3185 	movw	r1, #2949	@ 0xb85
 8020584:	f8a4 1246 	strh.w	r1, [r4, #582]	@ 0x246
 8020588:	f7ff bb37 	b.w	801fbfa <Argus_Cal_GetDefaultCalibration+0x41e>
 802058c:	f240 513f 	movw	r1, #1343	@ 0x53f
 8020590:	2d01      	cmp	r5, #1
 8020592:	f8a4 1240 	strh.w	r1, [r4, #576]	@ 0x240
 8020596:	f47f ab87 	bne.w	801fca8 <Argus_Cal_GetDefaultCalibration+0x4cc>
 802059a:	f44f 61fe 	mov.w	r1, #2032	@ 0x7f0
 802059e:	f8a4 1240 	strh.w	r1, [r4, #576]	@ 0x240
 80205a2:	f7ff bb81 	b.w	801fca8 <Argus_Cal_GetDefaultCalibration+0x4cc>
 80205a6:	f640 3154 	movw	r1, #2900	@ 0xb54
 80205aa:	2d01      	cmp	r5, #1
 80205ac:	f8a4 123a 	strh.w	r1, [r4, #570]	@ 0x23a
 80205b0:	f47f aac4 	bne.w	801fb3c <Argus_Cal_GetDefaultCalibration+0x360>
 80205b4:	f44f 6144 	mov.w	r1, #3136	@ 0xc40
 80205b8:	f8a4 123a 	strh.w	r1, [r4, #570]	@ 0x23a
 80205bc:	f7ff babe 	b.w	801fb3c <Argus_Cal_GetDefaultCalibration+0x360>
 80205c0:	f44f 6112 	mov.w	r1, #2336	@ 0x920
 80205c4:	2d01      	cmp	r5, #1
 80205c6:	f8a4 1242 	strh.w	r1, [r4, #578]	@ 0x242
 80205ca:	f47f ab7d 	bne.w	801fcc8 <Argus_Cal_GetDefaultCalibration+0x4ec>
 80205ce:	f44f 6144 	mov.w	r1, #3136	@ 0xc40
 80205d2:	f8a4 1242 	strh.w	r1, [r4, #578]	@ 0x242
 80205d6:	f7ff bb77 	b.w	801fcc8 <Argus_Cal_GetDefaultCalibration+0x4ec>
 80205da:	2a00      	cmp	r2, #0
 80205dc:	f000 811a 	beq.w	8020814 <Argus_Cal_GetDefaultCalibration+0x1038>
 80205e0:	f640 01b4 	movw	r1, #2228	@ 0x8b4
 80205e4:	2d01      	cmp	r5, #1
 80205e6:	f8a4 1234 	strh.w	r1, [r4, #564]	@ 0x234
 80205ea:	d045      	beq.n	8020678 <Argus_Cal_GetDefaultCalibration+0xe9c>
 80205ec:	f640 717d 	movw	r1, #3965	@ 0xf7d
 80205f0:	f8a4 1236 	strh.w	r1, [r4, #566]	@ 0x236
 80205f4:	f640 113b 	movw	r1, #2363	@ 0x93b
 80205f8:	f8a4 1238 	strh.w	r1, [r4, #568]	@ 0x238
 80205fc:	f640 6107 	movw	r1, #3591	@ 0xe07
 8020600:	f8a4 123a 	strh.w	r1, [r4, #570]	@ 0x23a
 8020604:	f240 2172 	movw	r1, #626	@ 0x272
 8020608:	f8a4 122c 	strh.w	r1, [r4, #556]	@ 0x22c
 802060c:	f44f 61d7 	mov.w	r1, #1720	@ 0x6b8
 8020610:	f8a4 122e 	strh.w	r1, [r4, #558]	@ 0x22e
 8020614:	f240 317f 	movw	r1, #895	@ 0x37f
 8020618:	f8a4 1230 	strh.w	r1, [r4, #560]	@ 0x230
 802061c:	f240 61ed 	movw	r1, #1773	@ 0x6ed
 8020620:	f8a4 1232 	strh.w	r1, [r4, #562]	@ 0x232
 8020624:	f640 217f 	movw	r1, #2687	@ 0xa7f
 8020628:	f8a4 1244 	strh.w	r1, [r4, #580]	@ 0x244
 802062c:	f241 419c 	movw	r1, #5276	@ 0x149c
 8020630:	f8a4 1246 	strh.w	r1, [r4, #582]	@ 0x246
 8020634:	f44f 612a 	mov.w	r1, #2720	@ 0xaa0
 8020638:	f8a4 1248 	strh.w	r1, [r4, #584]	@ 0x248
 802063c:	f640 51a8 	movw	r1, #3496	@ 0xda8
 8020640:	f8a4 124a 	strh.w	r1, [r4, #586]	@ 0x24a
 8020644:	f240 4171 	movw	r1, #1137	@ 0x471
 8020648:	f8a4 123c 	strh.w	r1, [r4, #572]	@ 0x23c
 802064c:	f640 2196 	movw	r1, #2710	@ 0xa96
 8020650:	f8a4 123e 	strh.w	r1, [r4, #574]	@ 0x23e
 8020654:	f240 31fb 	movw	r1, #1019	@ 0x3fb
 8020658:	f8a4 1240 	strh.w	r1, [r4, #576]	@ 0x240
 802065c:	f640 11ff 	movw	r1, #2559	@ 0x9ff
 8020660:	f8a4 1242 	strh.w	r1, [r4, #578]	@ 0x242
 8020664:	e71d      	b.n	80204a2 <Argus_Cal_GetDefaultCalibration+0xcc6>
 8020666:	f64f 712e 	movw	r1, #65326	@ 0xff2e
 802066a:	2d01      	cmp	r5, #1
 802066c:	f8a4 1234 	strh.w	r1, [r4, #564]	@ 0x234
 8020670:	f47f aa37 	bne.w	801fae2 <Argus_Cal_GetDefaultCalibration+0x306>
 8020674:	f44f 7150 	mov.w	r1, #832	@ 0x340
 8020678:	2b05      	cmp	r3, #5
 802067a:	f8a4 1234 	strh.w	r1, [r4, #564]	@ 0x234
 802067e:	f47f aa30 	bne.w	801fae2 <Argus_Cal_GetDefaultCalibration+0x306>
 8020682:	2a00      	cmp	r2, #0
 8020684:	f000 813d 	beq.w	8020902 <Argus_Cal_GetDefaultCalibration+0x1126>
 8020688:	f640 0138 	movw	r1, #2104	@ 0x838
 802068c:	2d01      	cmp	r5, #1
 802068e:	f8a4 1236 	strh.w	r1, [r4, #566]	@ 0x236
 8020692:	f47f aa33 	bne.w	801fafc <Argus_Cal_GetDefaultCalibration+0x320>
 8020696:	f640 3185 	movw	r1, #2949	@ 0xb85
 802069a:	f8a4 1236 	strh.w	r1, [r4, #566]	@ 0x236
 802069e:	f7ff ba2d 	b.w	801fafc <Argus_Cal_GetDefaultCalibration+0x320>
 80206a2:	f640 016f 	movw	r1, #2159	@ 0x86f
 80206a6:	e7f1      	b.n	802068c <Argus_Cal_GetDefaultCalibration+0xeb0>
 80206a8:	f44f 61ac 	mov.w	r1, #1376	@ 0x560
 80206ac:	2d01      	cmp	r5, #1
 80206ae:	f8a4 1238 	strh.w	r1, [r4, #568]	@ 0x238
 80206b2:	f47f aa33 	bne.w	801fb1c <Argus_Cal_GetDefaultCalibration+0x340>
 80206b6:	f44f 61fe 	mov.w	r1, #2032	@ 0x7f0
 80206ba:	f8a4 1238 	strh.w	r1, [r4, #568]	@ 0x238
 80206be:	f7ff ba2d 	b.w	801fb1c <Argus_Cal_GetDefaultCalibration+0x340>
 80206c2:	f44f 7174 	mov.w	r1, #976	@ 0x3d0
 80206c6:	2d01      	cmp	r5, #1
 80206c8:	f8a4 123c 	strh.w	r1, [r4, #572]	@ 0x23c
 80206cc:	f47f aacc 	bne.w	801fc68 <Argus_Cal_GetDefaultCalibration+0x48c>
 80206d0:	f240 5143 	movw	r1, #1347	@ 0x543
 80206d4:	f8a4 123c 	strh.w	r1, [r4, #572]	@ 0x23c
 80206d8:	f7ff bac6 	b.w	801fc68 <Argus_Cal_GetDefaultCalibration+0x48c>
 80206dc:	f640 1152 	movw	r1, #2386	@ 0x952
 80206e0:	2d01      	cmp	r5, #1
 80206e2:	f8a4 124a 	strh.w	r1, [r4, #586]	@ 0x24a
 80206e6:	f47f aaaf 	bne.w	801fc48 <Argus_Cal_GetDefaultCalibration+0x46c>
 80206ea:	f44f 6144 	mov.w	r1, #3136	@ 0xc40
 80206ee:	f8a4 124a 	strh.w	r1, [r4, #586]	@ 0x24a
 80206f2:	f7ff baa9 	b.w	801fc48 <Argus_Cal_GetDefaultCalibration+0x46c>
 80206f6:	f640 31de 	movw	r1, #3038	@ 0xbde
 80206fa:	2d01      	cmp	r5, #1
 80206fc:	f8a4 123e 	strh.w	r1, [r4, #574]	@ 0x23e
 8020700:	f47f aac2 	bne.w	801fc88 <Argus_Cal_GetDefaultCalibration+0x4ac>
 8020704:	f640 3185 	movw	r1, #2949	@ 0xb85
 8020708:	f8a4 123e 	strh.w	r1, [r4, #574]	@ 0x23e
 802070c:	f7ff babc 	b.w	801fc88 <Argus_Cal_GetDefaultCalibration+0x4ac>
 8020710:	f240 416a 	movw	r1, #1130	@ 0x46a
 8020714:	2d01      	cmp	r5, #1
 8020716:	f8a4 1230 	strh.w	r1, [r4, #560]	@ 0x230
 802071a:	f47f aa3f 	bne.w	801fb9c <Argus_Cal_GetDefaultCalibration+0x3c0>
 802071e:	f44f 61fe 	mov.w	r1, #2032	@ 0x7f0
 8020722:	f8a4 1230 	strh.w	r1, [r4, #560]	@ 0x230
 8020726:	f7ff ba39 	b.w	801fb9c <Argus_Cal_GetDefaultCalibration+0x3c0>
 802072a:	f44f 61f5 	mov.w	r1, #1960	@ 0x7a8
 802072e:	2d01      	cmp	r5, #1
 8020730:	f8a4 122e 	strh.w	r1, [r4, #558]	@ 0x22e
 8020734:	f47f aa22 	bne.w	801fb7c <Argus_Cal_GetDefaultCalibration+0x3a0>
 8020738:	f640 3185 	movw	r1, #2949	@ 0xb85
 802073c:	f8a4 122e 	strh.w	r1, [r4, #558]	@ 0x22e
 8020740:	f7ff ba1c 	b.w	801fb7c <Argus_Cal_GetDefaultCalibration+0x3a0>
 8020744:	f44f 7174 	mov.w	r1, #976	@ 0x3d0
 8020748:	2d01      	cmp	r5, #1
 802074a:	f8a4 1244 	strh.w	r1, [r4, #580]	@ 0x244
 802074e:	f47f aa44 	bne.w	801fbda <Argus_Cal_GetDefaultCalibration+0x3fe>
 8020752:	f240 5143 	movw	r1, #1347	@ 0x543
 8020756:	f8a4 1244 	strh.w	r1, [r4, #580]	@ 0x244
 802075a:	f7ff ba3e 	b.w	801fbda <Argus_Cal_GetDefaultCalibration+0x3fe>
 802075e:	f640 11e2 	movw	r1, #2530	@ 0x9e2
 8020762:	2d01      	cmp	r5, #1
 8020764:	f8a4 1232 	strh.w	r1, [r4, #562]	@ 0x232
 8020768:	f47f aa28 	bne.w	801fbbc <Argus_Cal_GetDefaultCalibration+0x3e0>
 802076c:	f44f 6144 	mov.w	r1, #3136	@ 0xc40
 8020770:	f8a4 1232 	strh.w	r1, [r4, #562]	@ 0x232
 8020774:	f7ff ba22 	b.w	801fbbc <Argus_Cal_GetDefaultCalibration+0x3e0>
 8020778:	f240 711e 	movw	r1, #1822	@ 0x71e
 802077c:	2d01      	cmp	r5, #1
 802077e:	f8a4 1248 	strh.w	r1, [r4, #584]	@ 0x248
 8020782:	f47f aa51 	bne.w	801fc28 <Argus_Cal_GetDefaultCalibration+0x44c>
 8020786:	f44f 61fe 	mov.w	r1, #2032	@ 0x7f0
 802078a:	f8a4 1248 	strh.w	r1, [r4, #584]	@ 0x248
 802078e:	f7ff ba4b 	b.w	801fc28 <Argus_Cal_GetDefaultCalibration+0x44c>
 8020792:	f241 0c0f 	movw	ip, #4111	@ 0x100f
 8020796:	2b05      	cmp	r3, #5
 8020798:	f8a4 c276 	strh.w	ip, [r4, #630]	@ 0x276
 802079c:	f040 8215 	bne.w	8020bca <Argus_Cal_GetDefaultCalibration+0x13ee>
 80207a0:	f241 0c78 	movw	ip, #4216	@ 0x1078
 80207a4:	2b05      	cmp	r3, #5
 80207a6:	f8a4 c278 	strh.w	ip, [r4, #632]	@ 0x278
 80207aa:	f47f aec6 	bne.w	802053a <Argus_Cal_GetDefaultCalibration+0xd5e>
 80207ae:	f241 3c44 	movw	ip, #4932	@ 0x1344
 80207b2:	f241 3af9 	movw	sl, #5113	@ 0x13f9
 80207b6:	2a00      	cmp	r2, #0
 80207b8:	bf08      	it	eq
 80207ba:	46d4      	moveq	ip, sl
 80207bc:	f8a4 c27a 	strh.w	ip, [r4, #634]	@ 0x27a
 80207c0:	f241 0c85 	movw	ip, #4229	@ 0x1085
 80207c4:	e65a      	b.n	802047c <Argus_Cal_GetDefaultCalibration+0xca0>
 80207c6:	f241 0ce6 	movw	ip, #4326	@ 0x10e6
 80207ca:	f8a4 c274 	strh.w	ip, [r4, #628]	@ 0x274
 80207ce:	2a00      	cmp	r2, #0
 80207d0:	f040 81f2 	bne.w	8020bb8 <Argus_Cal_GetDefaultCalibration+0x13dc>
 80207d4:	f241 2c79 	movw	ip, #4729	@ 0x1279
 80207d8:	2d01      	cmp	r5, #1
 80207da:	f8a4 c276 	strh.w	ip, [r4, #630]	@ 0x276
 80207de:	d103      	bne.n	80207e8 <Argus_Cal_GetDefaultCalibration+0x100c>
 80207e0:	f241 0cb9 	movw	ip, #4281	@ 0x10b9
 80207e4:	f8a4 c276 	strh.w	ip, [r4, #630]	@ 0x276
 80207e8:	f241 3c11 	movw	ip, #4881	@ 0x1311
 80207ec:	e4ea      	b.n	80201c4 <Argus_Cal_GetDefaultCalibration+0x9e8>
 80207ee:	2b04      	cmp	r3, #4
 80207f0:	f47f ae09 	bne.w	8020406 <Argus_Cal_GetDefaultCalibration+0xc2a>
 80207f4:	e67d      	b.n	80204f2 <Argus_Cal_GetDefaultCalibration+0xd16>
 80207f6:	f240 31ca 	movw	r1, #970	@ 0x3ca
 80207fa:	e7a5      	b.n	8020748 <Argus_Cal_GetDefaultCalibration+0xf6c>
 80207fc:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8020800:	e761      	b.n	80206c6 <Argus_Cal_GetDefaultCalibration+0xeea>
 8020802:	f240 6166 	movw	r1, #1638	@ 0x666
 8020806:	e7b9      	b.n	802077c <Argus_Cal_GetDefaultCalibration+0xfa0>
 8020808:	f640 317b 	movw	r1, #2939	@ 0xb7b
 802080c:	e775      	b.n	80206fa <Argus_Cal_GetDefaultCalibration+0xf1e>
 802080e:	f240 718a 	movw	r1, #1930	@ 0x78a
 8020812:	e78c      	b.n	802072e <Argus_Cal_GetDefaultCalibration+0xf52>
 8020814:	f240 51c3 	movw	r1, #1475	@ 0x5c3
 8020818:	2d01      	cmp	r5, #1
 802081a:	f8a4 1234 	strh.w	r1, [r4, #564]	@ 0x234
 802081e:	f43f af2b 	beq.w	8020678 <Argus_Cal_GetDefaultCalibration+0xe9c>
 8020822:	f640 112a 	movw	r1, #2346	@ 0x92a
 8020826:	f8a4 1236 	strh.w	r1, [r4, #566]	@ 0x236
 802082a:	f240 6139 	movw	r1, #1593	@ 0x639
 802082e:	f8a4 1238 	strh.w	r1, [r4, #568]	@ 0x238
 8020832:	f240 61fd 	movw	r1, #1789	@ 0x6fd
 8020836:	f8a4 123a 	strh.w	r1, [r4, #570]	@ 0x23a
 802083a:	f240 4161 	movw	r1, #1121	@ 0x461
 802083e:	f8a4 122c 	strh.w	r1, [r4, #556]	@ 0x22c
 8020842:	f240 1193 	movw	r1, #403	@ 0x193
 8020846:	f8a4 122e 	strh.w	r1, [r4, #558]	@ 0x22e
 802084a:	f240 7117 	movw	r1, #1815	@ 0x717
 802084e:	f8a4 1230 	strh.w	r1, [r4, #560]	@ 0x230
 8020852:	f240 414a 	movw	r1, #1098	@ 0x44a
 8020856:	f8a4 1232 	strh.w	r1, [r4, #562]	@ 0x232
 802085a:	f240 713b 	movw	r1, #1851	@ 0x73b
 802085e:	f8a4 1244 	strh.w	r1, [r4, #580]	@ 0x244
 8020862:	f640 3154 	movw	r1, #2900	@ 0xb54
 8020866:	f8a4 1246 	strh.w	r1, [r4, #582]	@ 0x246
 802086a:	f640 212d 	movw	r1, #2605	@ 0xa2d
 802086e:	f8a4 1248 	strh.w	r1, [r4, #584]	@ 0x248
 8020872:	f640 416e 	movw	r1, #3182	@ 0xc6e
 8020876:	f8a4 124a 	strh.w	r1, [r4, #586]	@ 0x24a
 802087a:	f240 4119 	movw	r1, #1049	@ 0x419
 802087e:	f8a4 123c 	strh.w	r1, [r4, #572]	@ 0x23c
 8020882:	f240 2127 	movw	r1, #551	@ 0x227
 8020886:	f8a4 123e 	strh.w	r1, [r4, #574]	@ 0x23e
 802088a:	f240 51a5 	movw	r1, #1445	@ 0x5a5
 802088e:	f8a4 1240 	strh.w	r1, [r4, #576]	@ 0x240
 8020892:	f240 3129 	movw	r1, #809	@ 0x329
 8020896:	f8a4 1242 	strh.w	r1, [r4, #578]	@ 0x242
 802089a:	2100      	movs	r1, #0
 802089c:	f8a4 1222 	strh.w	r1, [r4, #546]	@ 0x222
 80208a0:	2140      	movs	r1, #64	@ 0x40
 80208a2:	e602      	b.n	80204aa <Argus_Cal_GetDefaultCalibration+0xcce>
 80208a4:	f244 515d 	movw	r1, #17757	@ 0x455d
 80208a8:	2d01      	cmp	r5, #1
 80208aa:	8061      	strh	r1, [r4, #2]
 80208ac:	f47f a874 	bne.w	801f998 <Argus_Cal_GetDefaultCalibration+0x1bc>
 80208b0:	f7ff b86c 	b.w	801f98c <Argus_Cal_GetDefaultCalibration+0x1b0>
 80208b4:	f640 01c1 	movw	r1, #2241	@ 0x8c1
 80208b8:	e712      	b.n	80206e0 <Argus_Cal_GetDefaultCalibration+0xf04>
 80208ba:	2113      	movs	r1, #19
 80208bc:	2d01      	cmp	r5, #1
 80208be:	7221      	strb	r1, [r4, #8]
 80208c0:	f47f aac2 	bne.w	801fe48 <Argus_Cal_GetDefaultCalibration+0x66c>
 80208c4:	2117      	movs	r1, #23
 80208c6:	7221      	strb	r1, [r4, #8]
 80208c8:	2b04      	cmp	r3, #4
 80208ca:	f43f aabd 	beq.w	801fe48 <Argus_Cal_GetDefaultCalibration+0x66c>
 80208ce:	2b03      	cmp	r3, #3
 80208d0:	f000 8103 	beq.w	8020ada <Argus_Cal_GetDefaultCalibration+0x12fe>
 80208d4:	2a00      	cmp	r2, #0
 80208d6:	bf14      	ite	ne
 80208d8:	216c      	movne	r1, #108	@ 0x6c
 80208da:	2172      	moveq	r1, #114	@ 0x72
 80208dc:	7261      	strb	r1, [r4, #9]
 80208de:	e4de      	b.n	802029e <Argus_Cal_GetDefaultCalibration+0xac2>
 80208e0:	f644 11b8 	movw	r1, #18872	@ 0x49b8
 80208e4:	e7e0      	b.n	80208a8 <Argus_Cal_GetDefaultCalibration+0x10cc>
 80208e6:	f240 41b6 	movw	r1, #1206	@ 0x4b6
 80208ea:	e651      	b.n	8020590 <Argus_Cal_GetDefaultCalibration+0xdb4>
 80208ec:	f64f 7124 	movw	r1, #65316	@ 0xff24
 80208f0:	2d01      	cmp	r5, #1
 80208f2:	f8a4 1234 	strh.w	r1, [r4, #564]	@ 0x234
 80208f6:	f000 8510 	beq.w	802131a <Argus_Cal_GetDefaultCalibration+0x1b3e>
 80208fa:	f06f 0ecc 	mvn.w	lr, #204	@ 0xcc
 80208fe:	f06f 0938 	mvn.w	r9, #56	@ 0x38
 8020902:	f44f 7115 	mov.w	r1, #596	@ 0x254
 8020906:	f7ff b8f4 	b.w	801faf2 <Argus_Cal_GetDefaultCalibration+0x316>
 802090a:	f640 21eb 	movw	r1, #2795	@ 0xaeb
 802090e:	e64c      	b.n	80205aa <Argus_Cal_GetDefaultCalibration+0xdce>
 8020910:	f240 41d7 	movw	r1, #1239	@ 0x4d7
 8020914:	e6ca      	b.n	80206ac <Argus_Cal_GetDefaultCalibration+0xed0>
 8020916:	f640 01a1 	movw	r1, #2209	@ 0x8a1
 802091a:	e653      	b.n	80205c4 <Argus_Cal_GetDefaultCalibration+0xde8>
 802091c:	f640 01f6 	movw	r1, #2294	@ 0x8f6
 8020920:	e71f      	b.n	8020762 <Argus_Cal_GetDefaultCalibration+0xf86>
 8020922:	f640 2189 	movw	r1, #2697	@ 0xa89
 8020926:	e626      	b.n	8020576 <Argus_Cal_GetDefaultCalibration+0xd9a>
 8020928:	f240 31ee 	movw	r1, #1006	@ 0x3ee
 802092c:	e6f2      	b.n	8020714 <Argus_Cal_GetDefaultCalibration+0xf38>
 802092e:	21f2      	movs	r1, #242	@ 0xf2
 8020930:	2b05      	cmp	r3, #5
 8020932:	7521      	strb	r1, [r4, #20]
 8020934:	f47f ac00 	bne.w	8020138 <Argus_Cal_GetDefaultCalibration+0x95c>
 8020938:	2a00      	cmp	r2, #0
 802093a:	f000 80e3 	beq.w	8020b04 <Argus_Cal_GetDefaultCalibration+0x1328>
 802093e:	2151      	movs	r1, #81	@ 0x51
 8020940:	2d01      	cmp	r5, #1
 8020942:	7561      	strb	r1, [r4, #21]
 8020944:	f47f ac04 	bne.w	8020150 <Argus_Cal_GetDefaultCalibration+0x974>
 8020948:	f7ff bbfe 	b.w	8020148 <Argus_Cal_GetDefaultCalibration+0x96c>
 802094c:	2110      	movs	r1, #16
 802094e:	2b05      	cmp	r3, #5
 8020950:	74a1      	strb	r1, [r4, #18]
 8020952:	f43f a872 	beq.w	801fa3a <Argus_Cal_GetDefaultCalibration+0x25e>
 8020956:	2b04      	cmp	r3, #4
 8020958:	f43f aac6 	beq.w	801fee8 <Argus_Cal_GetDefaultCalibration+0x70c>
 802095c:	2b03      	cmp	r3, #3
 802095e:	f43f abd7 	beq.w	8020110 <Argus_Cal_GetDefaultCalibration+0x934>
 8020962:	2a00      	cmp	r2, #0
 8020964:	f000 8113 	beq.w	8020b8e <Argus_Cal_GetDefaultCalibration+0x13b2>
 8020968:	2133      	movs	r1, #51	@ 0x33
 802096a:	74e1      	strb	r1, [r4, #19]
 802096c:	2122      	movs	r1, #34	@ 0x22
 802096e:	2b05      	cmp	r3, #5
 8020970:	74e1      	strb	r1, [r4, #19]
 8020972:	f43f a86a 	beq.w	801fa4a <Argus_Cal_GetDefaultCalibration+0x26e>
 8020976:	2b04      	cmp	r3, #4
 8020978:	f43f aac0 	beq.w	801fefc <Argus_Cal_GetDefaultCalibration+0x720>
 802097c:	2b03      	cmp	r3, #3
 802097e:	f43f abcf 	beq.w	8020120 <Argus_Cal_GetDefaultCalibration+0x944>
 8020982:	210e      	movs	r1, #14
 8020984:	7521      	strb	r1, [r4, #20]
 8020986:	2a00      	cmp	r2, #0
 8020988:	d1d1      	bne.n	802092e <Argus_Cal_GetDefaultCalibration+0x1152>
 802098a:	21f6      	movs	r1, #246	@ 0xf6
 802098c:	2b05      	cmp	r3, #5
 802098e:	7521      	strb	r1, [r4, #20]
 8020990:	f47f abd2 	bne.w	8020138 <Argus_Cal_GetDefaultCalibration+0x95c>
 8020994:	f7ff bbd8 	b.w	8020148 <Argus_Cal_GetDefaultCalibration+0x96c>
 8020998:	f102 011c 	add.w	r1, r2, #28
 802099c:	2b05      	cmp	r3, #5
 802099e:	73e1      	strb	r1, [r4, #15]
 80209a0:	f43f a833 	beq.w	801fa0a <Argus_Cal_GetDefaultCalibration+0x22e>
 80209a4:	2a00      	cmp	r2, #0
 80209a6:	f000 80e9 	beq.w	8020b7c <Argus_Cal_GetDefaultCalibration+0x13a0>
 80209aa:	f06f 010b 	mvn.w	r1, #11
 80209ae:	2b05      	cmp	r3, #5
 80209b0:	7421      	strb	r1, [r4, #16]
 80209b2:	f43f a832 	beq.w	801fa1a <Argus_Cal_GetDefaultCalibration+0x23e>
 80209b6:	2b04      	cmp	r3, #4
 80209b8:	f43f aa82 	beq.w	801fec0 <Argus_Cal_GetDefaultCalibration+0x6e4>
 80209bc:	2b03      	cmp	r3, #3
 80209be:	d06b      	beq.n	8020a98 <Argus_Cal_GetDefaultCalibration+0x12bc>
 80209c0:	2a00      	cmp	r2, #0
 80209c2:	f000 8497 	beq.w	80212f4 <Argus_Cal_GetDefaultCalibration+0x1b18>
 80209c6:	2146      	movs	r1, #70	@ 0x46
 80209c8:	7461      	strb	r1, [r4, #17]
 80209ca:	211d      	movs	r1, #29
 80209cc:	2b05      	cmp	r3, #5
 80209ce:	7461      	strb	r1, [r4, #17]
 80209d0:	f43f a82b 	beq.w	801fa2a <Argus_Cal_GetDefaultCalibration+0x24e>
 80209d4:	2b04      	cmp	r3, #4
 80209d6:	f43f aa7d 	beq.w	801fed4 <Argus_Cal_GetDefaultCalibration+0x6f8>
 80209da:	2b03      	cmp	r3, #3
 80209dc:	d064      	beq.n	8020aa8 <Argus_Cal_GetDefaultCalibration+0x12cc>
 80209de:	f1c2 0116 	rsb	r1, r2, #22
 80209e2:	74a1      	strb	r1, [r4, #18]
 80209e4:	2a00      	cmp	r2, #0
 80209e6:	d1b1      	bne.n	802094c <Argus_Cal_GetDefaultCalibration+0x1170>
 80209e8:	210e      	movs	r1, #14
 80209ea:	e7b0      	b.n	802094e <Argus_Cal_GetDefaultCalibration+0x1172>
 80209ec:	f102 012d 	add.w	r1, r2, #45	@ 0x2d
 80209f0:	72a1      	strb	r1, [r4, #10]
 80209f2:	2b04      	cmp	r3, #4
 80209f4:	f43f aa32 	beq.w	801fe5c <Argus_Cal_GetDefaultCalibration+0x680>
 80209f8:	2b03      	cmp	r3, #3
 80209fa:	d078      	beq.n	8020aee <Argus_Cal_GetDefaultCalibration+0x1312>
 80209fc:	2a00      	cmp	r2, #0
 80209fe:	f000 80a6 	beq.w	8020b4e <Argus_Cal_GetDefaultCalibration+0x1372>
 8020a02:	2166      	movs	r1, #102	@ 0x66
 8020a04:	72e1      	strb	r1, [r4, #11]
 8020a06:	214f      	movs	r1, #79	@ 0x4f
 8020a08:	2b05      	cmp	r3, #5
 8020a0a:	72e1      	strb	r1, [r4, #11]
 8020a0c:	f43e afe0 	beq.w	801f9d0 <Argus_Cal_GetDefaultCalibration+0x1f4>
 8020a10:	2b04      	cmp	r3, #4
 8020a12:	f43f aa2c 	beq.w	801fe6e <Argus_Cal_GetDefaultCalibration+0x692>
 8020a16:	2b03      	cmp	r3, #3
 8020a18:	f43f ab6d 	beq.w	80200f6 <Argus_Cal_GetDefaultCalibration+0x91a>
 8020a1c:	2a00      	cmp	r2, #0
 8020a1e:	f000 8476 	beq.w	802130e <Argus_Cal_GetDefaultCalibration+0x1b32>
 8020a22:	211b      	movs	r1, #27
 8020a24:	7321      	strb	r1, [r4, #12]
 8020a26:	21fe      	movs	r1, #254	@ 0xfe
 8020a28:	2b05      	cmp	r3, #5
 8020a2a:	7321      	strb	r1, [r4, #12]
 8020a2c:	f47f aaf2 	bne.w	8020014 <Argus_Cal_GetDefaultCalibration+0x838>
 8020a30:	211b      	movs	r1, #27
 8020a32:	7361      	strb	r1, [r4, #13]
 8020a34:	f7fe bfd7 	b.w	801f9e6 <Argus_Cal_GetDefaultCalibration+0x20a>
 8020a38:	2a00      	cmp	r2, #0
 8020a3a:	f000 82c5 	beq.w	8020fc8 <Argus_Cal_GetDefaultCalibration+0x17ec>
 8020a3e:	2130      	movs	r1, #48	@ 0x30
 8020a40:	2d01      	cmp	r5, #1
 8020a42:	7561      	strb	r1, [r4, #21]
 8020a44:	f43f ab80 	beq.w	8020148 <Argus_Cal_GetDefaultCalibration+0x96c>
 8020a48:	2100      	movs	r1, #0
 8020a4a:	75a1      	strb	r1, [r4, #22]
 8020a4c:	2a00      	cmp	r2, #0
 8020a4e:	bf14      	ite	ne
 8020a50:	212d      	movne	r1, #45	@ 0x2d
 8020a52:	2130      	moveq	r1, #48	@ 0x30
 8020a54:	2d01      	cmp	r5, #1
 8020a56:	75e1      	strb	r1, [r4, #23]
 8020a58:	f47f ab1e 	bne.w	8020098 <Argus_Cal_GetDefaultCalibration+0x8bc>
 8020a5c:	f7ff ba6d 	b.w	801ff3a <Argus_Cal_GetDefaultCalibration+0x75e>
 8020a60:	2a00      	cmp	r2, #0
 8020a62:	f000 82f0 	beq.w	8021046 <Argus_Cal_GetDefaultCalibration+0x186a>
 8020a66:	212c      	movs	r1, #44	@ 0x2c
 8020a68:	2d01      	cmp	r5, #1
 8020a6a:	7361      	strb	r1, [r4, #13]
 8020a6c:	f000 80ea 	beq.w	8020c44 <Argus_Cal_GetDefaultCalibration+0x1468>
 8020a70:	2114      	movs	r1, #20
 8020a72:	73a1      	strb	r1, [r4, #14]
 8020a74:	2a00      	cmp	r2, #0
 8020a76:	bf14      	ite	ne
 8020a78:	2129      	movne	r1, #41	@ 0x29
 8020a7a:	212b      	moveq	r1, #43	@ 0x2b
 8020a7c:	2d01      	cmp	r5, #1
 8020a7e:	73e1      	strb	r1, [r4, #15]
 8020a80:	f000 80d3 	beq.w	8020c2a <Argus_Cal_GetDefaultCalibration+0x144e>
 8020a84:	2a00      	cmp	r2, #0
 8020a86:	bf14      	ite	ne
 8020a88:	f06f 0124 	mvnne.w	r1, #36	@ 0x24
 8020a8c:	f06f 012b 	mvneq.w	r1, #43	@ 0x2b
 8020a90:	2d01      	cmp	r5, #1
 8020a92:	7421      	strb	r1, [r4, #16]
 8020a94:	f000 80c6 	beq.w	8020c24 <Argus_Cal_GetDefaultCalibration+0x1448>
 8020a98:	2a00      	cmp	r2, #0
 8020a9a:	bf14      	ite	ne
 8020a9c:	212f      	movne	r1, #47	@ 0x2f
 8020a9e:	2136      	moveq	r1, #54	@ 0x36
 8020aa0:	2d01      	cmp	r5, #1
 8020aa2:	7461      	strb	r1, [r4, #17]
 8020aa4:	f000 80ef 	beq.w	8020c86 <Argus_Cal_GetDefaultCalibration+0x14aa>
 8020aa8:	2a00      	cmp	r2, #0
 8020aaa:	bf14      	ite	ne
 8020aac:	2103      	movne	r1, #3
 8020aae:	f06f 0101 	mvneq.w	r1, #1
 8020ab2:	2d01      	cmp	r5, #1
 8020ab4:	74a1      	strb	r1, [r4, #18]
 8020ab6:	f47f ab2b 	bne.w	8020110 <Argus_Cal_GetDefaultCalibration+0x934>
 8020aba:	2110      	movs	r1, #16
 8020abc:	74a1      	strb	r1, [r4, #18]
 8020abe:	e74a      	b.n	8020956 <Argus_Cal_GetDefaultCalibration+0x117a>
 8020ac0:	f244 5170 	movw	r1, #17776	@ 0x4570
 8020ac4:	f244 6c65 	movw	ip, #18021	@ 0x4665
 8020ac8:	2a00      	cmp	r2, #0
 8020aca:	bf08      	it	eq
 8020acc:	4661      	moveq	r1, ip
 8020ace:	2d01      	cmp	r5, #1
 8020ad0:	8061      	strh	r1, [r4, #2]
 8020ad2:	f43e af5b 	beq.w	801f98c <Argus_Cal_GetDefaultCalibration+0x1b0>
 8020ad6:	1f51      	subs	r1, r2, #5
 8020ad8:	7221      	strb	r1, [r4, #8]
 8020ada:	2a00      	cmp	r2, #0
 8020adc:	f000 82ba 	beq.w	8021054 <Argus_Cal_GetDefaultCalibration+0x1878>
 8020ae0:	2154      	movs	r1, #84	@ 0x54
 8020ae2:	2d01      	cmp	r5, #1
 8020ae4:	7261      	strb	r1, [r4, #9]
 8020ae6:	f43f abda 	beq.w	802029e <Argus_Cal_GetDefaultCalibration+0xac2>
 8020aea:	212c      	movs	r1, #44	@ 0x2c
 8020aec:	72a1      	strb	r1, [r4, #10]
 8020aee:	2a00      	cmp	r2, #0
 8020af0:	bf14      	ite	ne
 8020af2:	2153      	movne	r1, #83	@ 0x53
 8020af4:	2156      	moveq	r1, #86	@ 0x56
 8020af6:	2d01      	cmp	r5, #1
 8020af8:	72e1      	strb	r1, [r4, #11]
 8020afa:	f47f aafc 	bne.w	80200f6 <Argus_Cal_GetDefaultCalibration+0x91a>
 8020afe:	214f      	movs	r1, #79	@ 0x4f
 8020b00:	72e1      	strb	r1, [r4, #11]
 8020b02:	e785      	b.n	8020a10 <Argus_Cal_GetDefaultCalibration+0x1234>
 8020b04:	214a      	movs	r1, #74	@ 0x4a
 8020b06:	e71b      	b.n	8020940 <Argus_Cal_GetDefaultCalibration+0x1164>
 8020b08:	49c4      	ldr	r1, [pc, #784]	@ (8020e1c <Argus_Cal_GetDefaultCalibration+0x1640>)
 8020b0a:	f8df c32c 	ldr.w	ip, [pc, #812]	@ 8020e38 <Argus_Cal_GetDefaultCalibration+0x165c>
 8020b0e:	f46f 7a86 	mvn.w	sl, #268	@ 0x10c
 8020b12:	e9c4 c102 	strd	ip, r1, [r4, #8]
 8020b16:	f5a1 1188 	sub.w	r1, r1, #1114112	@ 0x110000
 8020b1a:	4451      	add	r1, sl
 8020b1c:	6121      	str	r1, [r4, #16]
 8020b1e:	f5a1 417e 	sub.w	r1, r1, #65024	@ 0xfe00
 8020b22:	6161      	str	r1, [r4, #20]
 8020b24:	2b04      	cmp	r3, #4
 8020b26:	49be      	ldr	r1, [pc, #760]	@ (8020e20 <Argus_Cal_GetDefaultCalibration+0x1644>)
 8020b28:	6021      	str	r1, [r4, #0]
 8020b2a:	f47f abe6 	bne.w	80202fa <Argus_Cal_GetDefaultCalibration+0xb1e>
 8020b2e:	4bbd      	ldr	r3, [pc, #756]	@ (8020e24 <Argus_Cal_GetDefaultCalibration+0x1648>)
 8020b30:	e9c4 3394 	strd	r3, r3, [r4, #592]	@ 0x250
 8020b34:	f243 3333 	movw	r3, #13107	@ 0x3333
 8020b38:	f8a4 309c 	strh.w	r3, [r4, #156]	@ 0x9c
 8020b3c:	2a00      	cmp	r2, #0
 8020b3e:	f000 8278 	beq.w	8021032 <Argus_Cal_GetDefaultCalibration+0x1856>
 8020b42:	4ab9      	ldr	r2, [pc, #740]	@ (8020e28 <Argus_Cal_GetDefaultCalibration+0x164c>)
 8020b44:	4bb9      	ldr	r3, [pc, #740]	@ (8020e2c <Argus_Cal_GetDefaultCalibration+0x1650>)
 8020b46:	e9c4 239d 	strd	r2, r3, [r4, #628]	@ 0x274
 8020b4a:	f7ff bbf2 	b.w	8020332 <Argus_Cal_GetDefaultCalibration+0xb56>
 8020b4e:	2161      	movs	r1, #97	@ 0x61
 8020b50:	2d01      	cmp	r5, #1
 8020b52:	72e1      	strb	r1, [r4, #11]
 8020b54:	f000 83e7 	beq.w	8021326 <Argus_Cal_GetDefaultCalibration+0x1b4a>
 8020b58:	211d      	movs	r1, #29
 8020b5a:	7321      	strb	r1, [r4, #12]
 8020b5c:	f7ff ba5a 	b.w	8020014 <Argus_Cal_GetDefaultCalibration+0x838>
 8020b60:	2112      	movs	r1, #18
 8020b62:	2d01      	cmp	r5, #1
 8020b64:	75a1      	strb	r1, [r4, #22]
 8020b66:	f47f aa89 	bne.w	802007c <Argus_Cal_GetDefaultCalibration+0x8a0>
 8020b6a:	210e      	movs	r1, #14
 8020b6c:	2b05      	cmp	r3, #5
 8020b6e:	75a1      	strb	r1, [r4, #22]
 8020b70:	f47f aa84 	bne.w	802007c <Argus_Cal_GetDefaultCalibration+0x8a0>
 8020b74:	212c      	movs	r1, #44	@ 0x2c
 8020b76:	75e1      	strb	r1, [r4, #23]
 8020b78:	f7ff b9df 	b.w	801ff3a <Argus_Cal_GetDefaultCalibration+0x75e>
 8020b7c:	2110      	movs	r1, #16
 8020b7e:	2d01      	cmp	r5, #1
 8020b80:	7421      	strb	r1, [r4, #16]
 8020b82:	f000 83d3 	beq.w	802132c <Argus_Cal_GetDefaultCalibration+0x1b50>
 8020b86:	2148      	movs	r1, #72	@ 0x48
 8020b88:	7461      	strb	r1, [r4, #17]
 8020b8a:	f7ff ba66 	b.w	802005a <Argus_Cal_GetDefaultCalibration+0x87e>
 8020b8e:	2136      	movs	r1, #54	@ 0x36
 8020b90:	2d01      	cmp	r5, #1
 8020b92:	74e1      	strb	r1, [r4, #19]
 8020b94:	f47f aa69 	bne.w	802006a <Argus_Cal_GetDefaultCalibration+0x88e>
 8020b98:	211f      	movs	r1, #31
 8020b9a:	e6e8      	b.n	802096e <Argus_Cal_GetDefaultCalibration+0x1192>
 8020b9c:	f241 2c59 	movw	ip, #4697	@ 0x1259
 8020ba0:	2d01      	cmp	r5, #1
 8020ba2:	f8a4 c274 	strh.w	ip, [r4, #628]	@ 0x274
 8020ba6:	f47f a8c5 	bne.w	801fd34 <Argus_Cal_GetDefaultCalibration+0x558>
 8020baa:	f640 7ce5 	movw	ip, #4069	@ 0xfe5
 8020bae:	2b05      	cmp	r3, #5
 8020bb0:	f8a4 c274 	strh.w	ip, [r4, #628]	@ 0x274
 8020bb4:	f47f a8be 	bne.w	801fd34 <Argus_Cal_GetDefaultCalibration+0x558>
 8020bb8:	f241 0cb9 	movw	ip, #4281	@ 0x10b9
 8020bbc:	2b05      	cmp	r3, #5
 8020bbe:	f8a4 c276 	strh.w	ip, [r4, #630]	@ 0x276
 8020bc2:	d010      	beq.n	8020be6 <Argus_Cal_GetDefaultCalibration+0x140a>
 8020bc4:	2b04      	cmp	r3, #4
 8020bc6:	f43f acac 	beq.w	8020522 <Argus_Cal_GetDefaultCalibration+0xd46>
 8020bca:	2b03      	cmp	r3, #3
 8020bcc:	f000 83bb 	beq.w	8021346 <Argus_Cal_GetDefaultCalibration+0x1b6a>
 8020bd0:	2a00      	cmp	r2, #0
 8020bd2:	f000 83af 	beq.w	8021334 <Argus_Cal_GetDefaultCalibration+0x1b58>
 8020bd6:	f241 0c78 	movw	ip, #4216	@ 0x1078
 8020bda:	2b05      	cmp	r3, #5
 8020bdc:	f8a4 c278 	strh.w	ip, [r4, #632]	@ 0x278
 8020be0:	f47f acab 	bne.w	802053a <Argus_Cal_GetDefaultCalibration+0xd5e>
 8020be4:	e5ec      	b.n	80207c0 <Argus_Cal_GetDefaultCalibration+0xfe4>
 8020be6:	2a00      	cmp	r2, #0
 8020be8:	f43f adfe 	beq.w	80207e8 <Argus_Cal_GetDefaultCalibration+0x100c>
 8020bec:	f7ff bae8 	b.w	80201c0 <Argus_Cal_GetDefaultCalibration+0x9e4>
 8020bf0:	f241 2c8a 	movw	ip, #4746	@ 0x128a
 8020bf4:	2d01      	cmp	r5, #1
 8020bf6:	f8a4 c276 	strh.w	ip, [r4, #630]	@ 0x276
 8020bfa:	f43f adca 	beq.w	8020792 <Argus_Cal_GetDefaultCalibration+0xfb6>
 8020bfe:	f241 2c7e 	movw	ip, #4734	@ 0x127e
 8020c02:	f8a4 c278 	strh.w	ip, [r4, #632]	@ 0x278
 8020c06:	f241 2c7b 	movw	ip, #4731	@ 0x127b
 8020c0a:	f7ff b8a9 	b.w	801fd60 <Argus_Cal_GetDefaultCalibration+0x584>
 8020c0e:	212f      	movs	r1, #47	@ 0x2f
 8020c10:	2d01      	cmp	r5, #1
 8020c12:	7221      	strb	r1, [r4, #8]
 8020c14:	f000 8358 	beq.w	80212c8 <Argus_Cal_GetDefaultCalibration+0x1aec>
 8020c18:	2172      	movs	r1, #114	@ 0x72
 8020c1a:	f7ff b9e2 	b.w	801ffe2 <Argus_Cal_GetDefaultCalibration+0x806>
 8020c1e:	2122      	movs	r1, #34	@ 0x22
 8020c20:	74e1      	strb	r1, [r4, #19]
 8020c22:	e6a8      	b.n	8020976 <Argus_Cal_GetDefaultCalibration+0x119a>
 8020c24:	21f4      	movs	r1, #244	@ 0xf4
 8020c26:	7421      	strb	r1, [r4, #16]
 8020c28:	e6c5      	b.n	80209b6 <Argus_Cal_GetDefaultCalibration+0x11da>
 8020c2a:	211d      	movs	r1, #29
 8020c2c:	2b04      	cmp	r3, #4
 8020c2e:	73e1      	strb	r1, [r4, #15]
 8020c30:	f43f a93c 	beq.w	801feac <Argus_Cal_GetDefaultCalibration+0x6d0>
 8020c34:	2b03      	cmp	r3, #3
 8020c36:	f43f af25 	beq.w	8020a84 <Argus_Cal_GetDefaultCalibration+0x12a8>
 8020c3a:	2a00      	cmp	r2, #0
 8020c3c:	d09e      	beq.n	8020b7c <Argus_Cal_GetDefaultCalibration+0x13a0>
 8020c3e:	210e      	movs	r1, #14
 8020c40:	7421      	strb	r1, [r4, #16]
 8020c42:	e6b2      	b.n	80209aa <Argus_Cal_GetDefaultCalibration+0x11ce>
 8020c44:	211b      	movs	r1, #27
 8020c46:	2b05      	cmp	r3, #5
 8020c48:	7361      	strb	r1, [r4, #13]
 8020c4a:	f43e aecc 	beq.w	801f9e6 <Argus_Cal_GetDefaultCalibration+0x20a>
 8020c4e:	2b04      	cmp	r3, #4
 8020c50:	d112      	bne.n	8020c78 <Argus_Cal_GetDefaultCalibration+0x149c>
 8020c52:	2a00      	cmp	r2, #0
 8020c54:	bf14      	ite	ne
 8020c56:	f06f 0115 	mvnne.w	r1, #21
 8020c5a:	f06f 013e 	mvneq.w	r1, #62	@ 0x3e
 8020c5e:	73a1      	strb	r1, [r4, #14]
 8020c60:	2118      	movs	r1, #24
 8020c62:	73a1      	strb	r1, [r4, #14]
 8020c64:	2b04      	cmp	r3, #4
 8020c66:	f47f a9e6 	bne.w	8020036 <Argus_Cal_GetDefaultCalibration+0x85a>
 8020c6a:	f7ff b915 	b.w	801fe98 <Argus_Cal_GetDefaultCalibration+0x6bc>
 8020c6e:	211b      	movs	r1, #27
 8020c70:	2b05      	cmp	r3, #5
 8020c72:	7361      	strb	r1, [r4, #13]
 8020c74:	f43e aeb7 	beq.w	801f9e6 <Argus_Cal_GetDefaultCalibration+0x20a>
 8020c78:	2b03      	cmp	r3, #3
 8020c7a:	f000 8316 	beq.w	80212aa <Argus_Cal_GetDefaultCalibration+0x1ace>
 8020c7e:	f1c2 0119 	rsb	r1, r2, #25
 8020c82:	73a1      	strb	r1, [r4, #14]
 8020c84:	e7ee      	b.n	8020c64 <Argus_Cal_GetDefaultCalibration+0x1488>
 8020c86:	211d      	movs	r1, #29
 8020c88:	7461      	strb	r1, [r4, #17]
 8020c8a:	e6a3      	b.n	80209d4 <Argus_Cal_GetDefaultCalibration+0x11f8>
 8020c8c:	f241 0cb9 	movw	ip, #4281	@ 0x10b9
 8020c90:	f8a4 c276 	strh.w	ip, [r4, #630]	@ 0x276
 8020c94:	e796      	b.n	8020bc4 <Argus_Cal_GetDefaultCalibration+0x13e8>
 8020c96:	f241 0ce6 	movw	ip, #4326	@ 0x10e6
 8020c9a:	f8a4 c274 	strh.w	ip, [r4, #628]	@ 0x274
 8020c9e:	f7ff b849 	b.w	801fd34 <Argus_Cal_GetDefaultCalibration+0x558>
 8020ca2:	f240 6153 	movw	r1, #1619	@ 0x653
 8020ca6:	e570      	b.n	802078a <Argus_Cal_GetDefaultCalibration+0xfae>
 8020ca8:	f240 41c3 	movw	r1, #1219	@ 0x4c3
 8020cac:	e546      	b.n	802073c <Argus_Cal_GetDefaultCalibration+0xf60>
 8020cae:	2a00      	cmp	r2, #0
 8020cb0:	f000 82f2 	beq.w	8021298 <Argus_Cal_GetDefaultCalibration+0x1abc>
 8020cb4:	f640 2196 	movw	r1, #2710	@ 0xa96
 8020cb8:	2d01      	cmp	r5, #1
 8020cba:	f8a4 123e 	strh.w	r1, [r4, #574]	@ 0x23e
 8020cbe:	f43f ad23 	beq.w	8020708 <Argus_Cal_GetDefaultCalibration+0xf2c>
 8020cc2:	e4c7      	b.n	8020654 <Argus_Cal_GetDefaultCalibration+0xe78>
 8020cc4:	2a00      	cmp	r2, #0
 8020cc6:	f000 82de 	beq.w	8021286 <Argus_Cal_GetDefaultCalibration+0x1aaa>
 8020cca:	f240 317f 	movw	r1, #895	@ 0x37f
 8020cce:	2d01      	cmp	r5, #1
 8020cd0:	f8a4 1230 	strh.w	r1, [r4, #560]	@ 0x230
 8020cd4:	f43f ad25 	beq.w	8020722 <Argus_Cal_GetDefaultCalibration+0xf46>
 8020cd8:	e4a0      	b.n	802061c <Argus_Cal_GetDefaultCalibration+0xe40>
 8020cda:	2a00      	cmp	r2, #0
 8020cdc:	f000 82ca 	beq.w	8021274 <Argus_Cal_GetDefaultCalibration+0x1a98>
 8020ce0:	f240 2172 	movw	r1, #626	@ 0x272
 8020ce4:	2d01      	cmp	r5, #1
 8020ce6:	f8a4 122c 	strh.w	r1, [r4, #556]	@ 0x22c
 8020cea:	f43f aa81 	beq.w	80201f0 <Argus_Cal_GetDefaultCalibration+0xa14>
 8020cee:	e48d      	b.n	802060c <Argus_Cal_GetDefaultCalibration+0xe30>
 8020cf0:	f241 3cf9 	movw	ip, #5113	@ 0x13f9
 8020cf4:	f8a4 c27a 	strh.w	ip, [r4, #634]	@ 0x27a
 8020cf8:	f7ff b834 	b.w	801fd64 <Argus_Cal_GetDefaultCalibration+0x588>
 8020cfc:	f240 6125 	movw	r1, #1573	@ 0x625
 8020d00:	e45a      	b.n	80205b8 <Argus_Cal_GetDefaultCalibration+0xddc>
 8020d02:	f240 41c3 	movw	r1, #1219	@ 0x4c3
 8020d06:	e4c8      	b.n	802069a <Argus_Cal_GetDefaultCalibration+0xebe>
 8020d08:	21ed      	movs	r1, #237	@ 0xed
 8020d0a:	2d01      	cmp	r5, #1
 8020d0c:	7561      	strb	r1, [r4, #21]
 8020d0e:	f43f aa1b 	beq.w	8020148 <Argus_Cal_GetDefaultCalibration+0x96c>
 8020d12:	f06f 0149 	mvn.w	r1, #73	@ 0x49
 8020d16:	f7ff b905 	b.w	801ff24 <Argus_Cal_GetDefaultCalibration+0x748>
 8020d1a:	212a      	movs	r1, #42	@ 0x2a
 8020d1c:	2d01      	cmp	r5, #1
 8020d1e:	7261      	strb	r1, [r4, #9]
 8020d20:	f43f aabd 	beq.w	802029e <Argus_Cal_GetDefaultCalibration+0xac2>
 8020d24:	f06f 010d 	mvn.w	r1, #13
 8020d28:	f7ff b897 	b.w	801fe5a <Argus_Cal_GetDefaultCalibration+0x67e>
 8020d2c:	2a00      	cmp	r2, #0
 8020d2e:	f000 828c 	beq.w	802124a <Argus_Cal_GetDefaultCalibration+0x1a6e>
 8020d32:	f640 717d 	movw	r1, #3965	@ 0xf7d
 8020d36:	2d01      	cmp	r5, #1
 8020d38:	f8a4 1236 	strh.w	r1, [r4, #566]	@ 0x236
 8020d3c:	f43f acad 	beq.w	802069a <Argus_Cal_GetDefaultCalibration+0xebe>
 8020d40:	e458      	b.n	80205f4 <Argus_Cal_GetDefaultCalibration+0xe18>
 8020d42:	2a00      	cmp	r2, #0
 8020d44:	f000 8266 	beq.w	8021214 <Argus_Cal_GetDefaultCalibration+0x1a38>
 8020d48:	f640 113b 	movw	r1, #2363	@ 0x93b
 8020d4c:	2d01      	cmp	r5, #1
 8020d4e:	f8a4 1238 	strh.w	r1, [r4, #568]	@ 0x238
 8020d52:	f43f acb2 	beq.w	80206ba <Argus_Cal_GetDefaultCalibration+0xede>
 8020d56:	e451      	b.n	80205fc <Argus_Cal_GetDefaultCalibration+0xe20>
 8020d58:	21f8      	movs	r1, #248	@ 0xf8
 8020d5a:	2d01      	cmp	r5, #1
 8020d5c:	7361      	strb	r1, [r4, #13]
 8020d5e:	f43f af71 	beq.w	8020c44 <Argus_Cal_GetDefaultCalibration+0x1468>
 8020d62:	f06f 013e 	mvn.w	r1, #62	@ 0x3e
 8020d66:	f7ff b896 	b.w	801fe96 <Argus_Cal_GetDefaultCalibration+0x6ba>
 8020d6a:	f44f 7150 	mov.w	r1, #832	@ 0x340
 8020d6e:	e4f2      	b.n	8020756 <Argus_Cal_GetDefaultCalibration+0xf7a>
 8020d70:	f44f 7150 	mov.w	r1, #832	@ 0x340
 8020d74:	e4ae      	b.n	80206d4 <Argus_Cal_GetDefaultCalibration+0xef8>
 8020d76:	f240 6125 	movw	r1, #1573	@ 0x625
 8020d7a:	e4b8      	b.n	80206ee <Argus_Cal_GetDefaultCalibration+0xf12>
 8020d7c:	f240 6153 	movw	r1, #1619	@ 0x653
 8020d80:	e40d      	b.n	802059e <Argus_Cal_GetDefaultCalibration+0xdc2>
 8020d82:	f240 41c3 	movw	r1, #1219	@ 0x4c3
 8020d86:	e4bf      	b.n	8020708 <Argus_Cal_GetDefaultCalibration+0xf2c>
 8020d88:	2a00      	cmp	r2, #0
 8020d8a:	f000 81b9 	beq.w	8021100 <Argus_Cal_GetDefaultCalibration+0x1924>
 8020d8e:	f241 419c 	movw	r1, #5276	@ 0x149c
 8020d92:	2d01      	cmp	r5, #1
 8020d94:	f8a4 1246 	strh.w	r1, [r4, #582]	@ 0x246
 8020d98:	f43f abf4 	beq.w	8020584 <Argus_Cal_GetDefaultCalibration+0xda8>
 8020d9c:	e44a      	b.n	8020634 <Argus_Cal_GetDefaultCalibration+0xe58>
 8020d9e:	2a00      	cmp	r2, #0
 8020da0:	f000 81b7 	beq.w	8021112 <Argus_Cal_GetDefaultCalibration+0x1936>
 8020da4:	f240 31fb 	movw	r1, #1019	@ 0x3fb
 8020da8:	2d01      	cmp	r5, #1
 8020daa:	f8a4 1240 	strh.w	r1, [r4, #576]	@ 0x240
 8020dae:	f43f abf6 	beq.w	802059e <Argus_Cal_GetDefaultCalibration+0xdc2>
 8020db2:	e453      	b.n	802065c <Argus_Cal_GetDefaultCalibration+0xe80>
 8020db4:	2a00      	cmp	r2, #0
 8020db6:	f000 81be 	beq.w	8021136 <Argus_Cal_GetDefaultCalibration+0x195a>
 8020dba:	f240 4171 	movw	r1, #1137	@ 0x471
 8020dbe:	2d01      	cmp	r5, #1
 8020dc0:	f8a4 123c 	strh.w	r1, [r4, #572]	@ 0x23c
 8020dc4:	f43f ac86 	beq.w	80206d4 <Argus_Cal_GetDefaultCalibration+0xef8>
 8020dc8:	e440      	b.n	802064c <Argus_Cal_GetDefaultCalibration+0xe70>
 8020dca:	2a00      	cmp	r2, #0
 8020dcc:	f000 81aa 	beq.w	8021124 <Argus_Cal_GetDefaultCalibration+0x1948>
 8020dd0:	f640 6107 	movw	r1, #3591	@ 0xe07
 8020dd4:	2d01      	cmp	r5, #1
 8020dd6:	f8a4 123a 	strh.w	r1, [r4, #570]	@ 0x23a
 8020dda:	f43f abed 	beq.w	80205b8 <Argus_Cal_GetDefaultCalibration+0xddc>
 8020dde:	e411      	b.n	8020604 <Argus_Cal_GetDefaultCalibration+0xe28>
 8020de0:	2a00      	cmp	r2, #0
 8020de2:	f000 81b1 	beq.w	8021148 <Argus_Cal_GetDefaultCalibration+0x196c>
 8020de6:	f640 51a8 	movw	r1, #3496	@ 0xda8
 8020dea:	2d01      	cmp	r5, #1
 8020dec:	f8a4 124a 	strh.w	r1, [r4, #586]	@ 0x24a
 8020df0:	f43f ac7d 	beq.w	80206ee <Argus_Cal_GetDefaultCalibration+0xf12>
 8020df4:	e426      	b.n	8020644 <Argus_Cal_GetDefaultCalibration+0xe68>
 8020df6:	2a00      	cmp	r2, #0
 8020df8:	f000 8230 	beq.w	802125c <Argus_Cal_GetDefaultCalibration+0x1a80>
 8020dfc:	f640 11ff 	movw	r1, #2559	@ 0x9ff
 8020e00:	2d01      	cmp	r5, #1
 8020e02:	f8a4 1242 	strh.w	r1, [r4, #578]	@ 0x242
 8020e06:	f43f abe4 	beq.w	80205d2 <Argus_Cal_GetDefaultCalibration+0xdf6>
 8020e0a:	f7ff bb4a 	b.w	80204a2 <Argus_Cal_GetDefaultCalibration+0xcc6>
 8020e0e:	f06f 09a3 	mvn.w	r9, #163	@ 0xa3
 8020e12:	f06f 0ef5 	mvn.w	lr, #245	@ 0xf5
 8020e16:	f240 5143 	movw	r1, #1347	@ 0x543
 8020e1a:	e42d      	b.n	8020678 <Argus_Cal_GetDefaultCalibration+0xe9c>
 8020e1c:	3326471b 	.word	0x3326471b
 8020e20:	460b8000 	.word	0x460b8000
 8020e24:	ff5cff0a 	.word	0xff5cff0a
 8020e28:	12ca130c 	.word	0x12ca130c
 8020e2c:	11651243 	.word	0x11651243
 8020e30:	01e0b860 	.word	0x01e0b860
 8020e34:	42433062 	.word	0x42433062
 8020e38:	663e6c2d 	.word	0x663e6c2d
 8020e3c:	2a00      	cmp	r2, #0
 8020e3e:	f000 8110 	beq.w	8021062 <Argus_Cal_GetDefaultCalibration+0x1886>
 8020e42:	4bd5      	ldr	r3, [pc, #852]	@ (8021198 <Argus_Cal_GetDefaultCalibration+0x19bc>)
 8020e44:	6023      	str	r3, [r4, #0]
 8020e46:	f103 53d9 	add.w	r3, r3, #455081984	@ 0x1b200000
 8020e4a:	f503 13d7 	add.w	r3, r3, #1761280	@ 0x1ae000
 8020e4e:	f603 3318 	addw	r3, r3, #2840	@ 0xb18
 8020e52:	4ad2      	ldr	r2, [pc, #840]	@ (802119c <Argus_Cal_GetDefaultCalibration+0x19c0>)
 8020e54:	60a3      	str	r3, [r4, #8]
 8020e56:	4bd2      	ldr	r3, [pc, #840]	@ (80211a0 <Argus_Cal_GetDefaultCalibration+0x19c4>)
 8020e58:	48d2      	ldr	r0, [pc, #840]	@ (80211a4 <Argus_Cal_GetDefaultCalibration+0x19c8>)
 8020e5a:	f8a4 e250 	strh.w	lr, [r4, #592]	@ 0x250
 8020e5e:	e9c4 2303 	strd	r2, r3, [r4, #12]
 8020e62:	4bd1      	ldr	r3, [pc, #836]	@ (80211a8 <Argus_Cal_GetDefaultCalibration+0x19cc>)
 8020e64:	6163      	str	r3, [r4, #20]
 8020e66:	4bd1      	ldr	r3, [pc, #836]	@ (80211ac <Argus_Cal_GetDefaultCalibration+0x19d0>)
 8020e68:	f8c4 3274 	str.w	r3, [r4, #628]	@ 0x274
 8020e6c:	f5a3 0315 	sub.w	r3, r3, #9764864	@ 0x950000
 8020e70:	3b1c      	subs	r3, #28
 8020e72:	f8c4 3278 	str.w	r3, [r4, #632]	@ 0x278
 8020e76:	4bce      	ldr	r3, [pc, #824]	@ (80211b0 <Argus_Cal_GetDefaultCalibration+0x19d4>)
 8020e78:	f8c4 322c 	str.w	r3, [r4, #556]	@ 0x22c
 8020e7c:	f503 136c 	add.w	r3, r3, #3866624	@ 0x3b0000
 8020e80:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8020e84:	f8c4 3230 	str.w	r3, [r4, #560]	@ 0x230
 8020e88:	4bca      	ldr	r3, [pc, #808]	@ (80211b4 <Argus_Cal_GetDefaultCalibration+0x19d8>)
 8020e8a:	f8a4 e254 	strh.w	lr, [r4, #596]	@ 0x254
 8020e8e:	e9c4 0391 	strd	r0, r3, [r4, #580]	@ 0x244
 8020e92:	4bc9      	ldr	r3, [pc, #804]	@ (80211b8 <Argus_Cal_GetDefaultCalibration+0x19dc>)
 8020e94:	f8c4 3236 	str.w	r3, [r4, #566]	@ 0x236
 8020e98:	f503 03d2 	add.w	r3, r3, #6881280	@ 0x690000
 8020e9c:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8020ea0:	f8c4 323a 	str.w	r3, [r4, #570]	@ 0x23a
 8020ea4:	f103 73cf 	add.w	r3, r3, #27131904	@ 0x19e0000
 8020ea8:	330f      	adds	r3, #15
 8020eaa:	f8c4 323e 	str.w	r3, [r4, #574]	@ 0x23e
 8020eae:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8020eb2:	6063      	str	r3, [r4, #4]
 8020eb4:	f243 3333 	movw	r3, #13107	@ 0x3333
 8020eb8:	f8a4 309c 	strh.w	r3, [r4, #156]	@ 0x9c
 8020ebc:	2361      	movs	r3, #97	@ 0x61
 8020ebe:	f8a4 3234 	strh.w	r3, [r4, #564]	@ 0x234
 8020ec2:	f8a4 9252 	strh.w	r9, [r4, #594]	@ 0x252
 8020ec6:	f8a4 9256 	strh.w	r9, [r4, #598]	@ 0x256
 8020eca:	f640 73f3 	movw	r3, #4083	@ 0xff3
 8020ece:	f7ff ba59 	b.w	8020384 <Argus_Cal_GetDefaultCalibration+0xba8>
 8020ed2:	f240 6153 	movw	r1, #1619	@ 0x653
 8020ed6:	e424      	b.n	8020722 <Argus_Cal_GetDefaultCalibration+0xf46>
 8020ed8:	f240 6125 	movw	r1, #1573	@ 0x625
 8020edc:	e448      	b.n	8020770 <Argus_Cal_GetDefaultCalibration+0xf94>
 8020ede:	2a00      	cmp	r2, #0
 8020ee0:	f000 8150 	beq.w	8021184 <Argus_Cal_GetDefaultCalibration+0x19a8>
 8020ee4:	f44f 61d7 	mov.w	r1, #1720	@ 0x6b8
 8020ee8:	2d01      	cmp	r5, #1
 8020eea:	f8a4 122e 	strh.w	r1, [r4, #558]	@ 0x22e
 8020eee:	f43f ac25 	beq.w	802073c <Argus_Cal_GetDefaultCalibration+0xf60>
 8020ef2:	f7ff bb8f 	b.w	8020614 <Argus_Cal_GetDefaultCalibration+0xe38>
 8020ef6:	2a00      	cmp	r2, #0
 8020ef8:	f000 8195 	beq.w	8021226 <Argus_Cal_GetDefaultCalibration+0x1a4a>
 8020efc:	f640 217f 	movw	r1, #2687	@ 0xa7f
 8020f00:	2d01      	cmp	r5, #1
 8020f02:	f8a4 1244 	strh.w	r1, [r4, #580]	@ 0x244
 8020f06:	f43f ac26 	beq.w	8020756 <Argus_Cal_GetDefaultCalibration+0xf7a>
 8020f0a:	f7ff bb8f 	b.w	802062c <Argus_Cal_GetDefaultCalibration+0xe50>
 8020f0e:	2a00      	cmp	r2, #0
 8020f10:	f000 8192 	beq.w	8021238 <Argus_Cal_GetDefaultCalibration+0x1a5c>
 8020f14:	f240 61ed 	movw	r1, #1773	@ 0x6ed
 8020f18:	2d01      	cmp	r5, #1
 8020f1a:	f8a4 1232 	strh.w	r1, [r4, #562]	@ 0x232
 8020f1e:	f43f ac27 	beq.w	8020770 <Argus_Cal_GetDefaultCalibration+0xf94>
 8020f22:	f7ff bb7f 	b.w	8020624 <Argus_Cal_GetDefaultCalibration+0xe48>
 8020f26:	49a5      	ldr	r1, [pc, #660]	@ (80211bc <Argus_Cal_GetDefaultCalibration+0x19e0>)
 8020f28:	61a1      	str	r1, [r4, #24]
 8020f2a:	212c      	movs	r1, #44	@ 0x2c
 8020f2c:	75e1      	strb	r1, [r4, #23]
 8020f2e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8020f32:	8021      	strh	r1, [r4, #0]
 8020f34:	1e19      	subs	r1, r3, #0
 8020f36:	bf18      	it	ne
 8020f38:	2101      	movne	r1, #1
 8020f3a:	f884 124c 	strb.w	r1, [r4, #588]	@ 0x24c
 8020f3e:	f7ff b8b8 	b.w	80200b2 <Argus_Cal_GetDefaultCalibration+0x8d6>
 8020f42:	f240 6125 	movw	r1, #1573	@ 0x625
 8020f46:	f7ff bb44 	b.w	80205d2 <Argus_Cal_GetDefaultCalibration+0xdf6>
 8020f4a:	f240 41c3 	movw	r1, #1219	@ 0x4c3
 8020f4e:	f7ff bb19 	b.w	8020584 <Argus_Cal_GetDefaultCalibration+0xda8>
 8020f52:	2a00      	cmp	r2, #0
 8020f54:	f000 80cb 	beq.w	80210ee <Argus_Cal_GetDefaultCalibration+0x1912>
 8020f58:	f44f 612a 	mov.w	r1, #2720	@ 0xaa0
 8020f5c:	2d01      	cmp	r5, #1
 8020f5e:	f8a4 1248 	strh.w	r1, [r4, #584]	@ 0x248
 8020f62:	f43f ac12 	beq.w	802078a <Argus_Cal_GetDefaultCalibration+0xfae>
 8020f66:	f7ff bb69 	b.w	802063c <Argus_Cal_GetDefaultCalibration+0xe60>
 8020f6a:	f240 6153 	movw	r1, #1619	@ 0x653
 8020f6e:	f7ff bba4 	b.w	80206ba <Argus_Cal_GetDefaultCalibration+0xede>
 8020f72:	210d      	movs	r1, #13
 8020f74:	75a1      	strb	r1, [r4, #22]
 8020f76:	2a00      	cmp	r2, #0
 8020f78:	f43f adfc 	beq.w	8020b74 <Argus_Cal_GetDefaultCalibration+0x1398>
 8020f7c:	f7fe bfdd 	b.w	801ff3a <Argus_Cal_GetDefaultCalibration+0x75e>
 8020f80:	f240 5143 	movw	r1, #1347	@ 0x543
 8020f84:	f7ff b934 	b.w	80201f0 <Argus_Cal_GetDefaultCalibration+0xa14>
 8020f88:	f102 0121 	add.w	r1, r2, #33	@ 0x21
 8020f8c:	75e1      	strb	r1, [r4, #23]
 8020f8e:	f7ff b883 	b.w	8020098 <Argus_Cal_GetDefaultCalibration+0x8bc>
 8020f92:	2a00      	cmp	r2, #0
 8020f94:	bf14      	ite	ne
 8020f96:	210c      	movne	r1, #12
 8020f98:	f06f 010d 	mvneq.w	r1, #13
 8020f9c:	2d01      	cmp	r5, #1
 8020f9e:	72a1      	strb	r1, [r4, #10]
 8020fa0:	f47e af5c 	bne.w	801fe5c <Argus_Cal_GetDefaultCalibration+0x680>
 8020fa4:	212e      	movs	r1, #46	@ 0x2e
 8020fa6:	72a1      	strb	r1, [r4, #10]
 8020fa8:	e523      	b.n	80209f2 <Argus_Cal_GetDefaultCalibration+0x1216>
 8020faa:	2a00      	cmp	r2, #0
 8020fac:	bf14      	ite	ne
 8020fae:	f06f 0130 	mvnne.w	r1, #48	@ 0x30
 8020fb2:	f06f 0149 	mvneq.w	r1, #73	@ 0x49
 8020fb6:	75a1      	strb	r1, [r4, #22]
 8020fb8:	210d      	movs	r1, #13
 8020fba:	75a1      	strb	r1, [r4, #22]
 8020fbc:	f7ff b85e 	b.w	802007c <Argus_Cal_GetDefaultCalibration+0x8a0>
 8020fc0:	f641 2c0a 	movw	ip, #6666	@ 0x1a0a
 8020fc4:	f7ff bab4 	b.w	8020530 <Argus_Cal_GetDefaultCalibration+0xd54>
 8020fc8:	2136      	movs	r1, #54	@ 0x36
 8020fca:	2d01      	cmp	r5, #1
 8020fcc:	7561      	strb	r1, [r4, #21]
 8020fce:	f43f a8bb 	beq.w	8020148 <Argus_Cal_GetDefaultCalibration+0x96c>
 8020fd2:	f06f 0103 	mvn.w	r1, #3
 8020fd6:	e538      	b.n	8020a4a <Argus_Cal_GetDefaultCalibration+0x126e>
 8020fd8:	f644 42cd 	movw	r2, #19661	@ 0x4ccd
 8020fdc:	2b05      	cmp	r3, #5
 8020fde:	f8a4 209c 	strh.w	r2, [r4, #156]	@ 0x9c
 8020fe2:	d126      	bne.n	8021032 <Argus_Cal_GetDefaultCalibration+0x1856>
 8020fe4:	4b76      	ldr	r3, [pc, #472]	@ (80211c0 <Argus_Cal_GetDefaultCalibration+0x19e4>)
 8020fe6:	f8c4 3274 	str.w	r3, [r4, #628]	@ 0x274
 8020fea:	f46f 7298 	mvn.w	r2, #304	@ 0x130
 8020fee:	f1a3 73a4 	sub.w	r3, r3, #21495808	@ 0x1480000
 8020ff2:	4413      	add	r3, r2
 8020ff4:	f8c4 3278 	str.w	r3, [r4, #632]	@ 0x278
 8020ff8:	4b72      	ldr	r3, [pc, #456]	@ (80211c4 <Argus_Cal_GetDefaultCalibration+0x19e8>)
 8020ffa:	f8c4 3244 	str.w	r3, [r4, #580]	@ 0x244
 8020ffe:	f503 033a 	add.w	r3, r3, #12189696	@ 0xba0000
 8021002:	33cb      	adds	r3, #203	@ 0xcb
 8021004:	f8df e1f8 	ldr.w	lr, [pc, #504]	@ 8021200 <Argus_Cal_GetDefaultCalibration+0x1a24>
 8021008:	f8c4 3248 	str.w	r3, [r4, #584]	@ 0x248
 802100c:	4b6e      	ldr	r3, [pc, #440]	@ (80211c8 <Argus_Cal_GetDefaultCalibration+0x19ec>)
 802100e:	f8df 91f4 	ldr.w	r9, [pc, #500]	@ 8021204 <Argus_Cal_GetDefaultCalibration+0x1a28>
 8021012:	e9c4 e38b 	strd	lr, r3, [r4, #556]	@ 0x22c
 8021016:	4b6d      	ldr	r3, [pc, #436]	@ (80211cc <Argus_Cal_GetDefaultCalibration+0x19f0>)
 8021018:	e9c4 938d 	strd	r9, r3, [r4, #564]	@ 0x234
 802101c:	4b6c      	ldr	r3, [pc, #432]	@ (80211d0 <Argus_Cal_GetDefaultCalibration+0x19f4>)
 802101e:	f8c4 323c 	str.w	r3, [r4, #572]	@ 0x23c
 8021022:	f240 13b7 	movw	r3, #439	@ 0x1b7
 8021026:	f8a4 3240 	strh.w	r3, [r4, #576]	@ 0x240
 802102a:	f240 73ec 	movw	r3, #2028	@ 0x7ec
 802102e:	f7ff b9a9 	b.w	8020384 <Argus_Cal_GetDefaultCalibration+0xba8>
 8021032:	4b68      	ldr	r3, [pc, #416]	@ (80211d4 <Argus_Cal_GetDefaultCalibration+0x19f8>)
 8021034:	f8c4 3274 	str.w	r3, [r4, #628]	@ 0x274
 8021038:	f5a3 236f 	sub.w	r3, r3, #978944	@ 0xef000
 802103c:	f6a3 73db 	subw	r3, r3, #4059	@ 0xfdb
 8021040:	f8c4 3278 	str.w	r3, [r4, #632]	@ 0x278
 8021044:	e7d8      	b.n	8020ff8 <Argus_Cal_GetDefaultCalibration+0x181c>
 8021046:	2133      	movs	r1, #51	@ 0x33
 8021048:	2d01      	cmp	r5, #1
 802104a:	7361      	strb	r1, [r4, #13]
 802104c:	f43f adfa 	beq.w	8020c44 <Argus_Cal_GetDefaultCalibration+0x1468>
 8021050:	2111      	movs	r1, #17
 8021052:	e50e      	b.n	8020a72 <Argus_Cal_GetDefaultCalibration+0x1296>
 8021054:	215e      	movs	r1, #94	@ 0x5e
 8021056:	2d01      	cmp	r5, #1
 8021058:	7261      	strb	r1, [r4, #9]
 802105a:	f43f a920 	beq.w	802029e <Argus_Cal_GetDefaultCalibration+0xac2>
 802105e:	212a      	movs	r1, #42	@ 0x2a
 8021060:	e544      	b.n	8020aec <Argus_Cal_GetDefaultCalibration+0x1310>
 8021062:	4b5d      	ldr	r3, [pc, #372]	@ (80211d8 <Argus_Cal_GetDefaultCalibration+0x19fc>)
 8021064:	f8a4 e250 	strh.w	lr, [r4, #592]	@ 0x250
 8021068:	f8a4 e254 	strh.w	lr, [r4, #596]	@ 0x254
 802106c:	f8df e198 	ldr.w	lr, [pc, #408]	@ 8021208 <Argus_Cal_GetDefaultCalibration+0x1a2c>
 8021070:	f8a4 9252 	strh.w	r9, [r4, #594]	@ 0x252
 8021074:	e9c4 e300 	strd	lr, r3, [r4]
 8021078:	f1a3 43d1 	sub.w	r3, r3, #1753219072	@ 0x68800000
 802107c:	f5a3 33b5 	sub.w	r3, r3, #92672	@ 0x16a00
 8021080:	3bda      	subs	r3, #218	@ 0xda
 8021082:	60a3      	str	r3, [r4, #8]
 8021084:	4b55      	ldr	r3, [pc, #340]	@ (80211dc <Argus_Cal_GetDefaultCalibration+0x1a00>)
 8021086:	60e3      	str	r3, [r4, #12]
 8021088:	f103 2306 	add.w	r3, r3, #100664832	@ 0x6000600
 802108c:	f503 0376 	add.w	r3, r3, #16121856	@ 0xf60000
 8021090:	33fa      	adds	r3, #250	@ 0xfa
 8021092:	6123      	str	r3, [r4, #16]
 8021094:	f1a3 7382 	sub.w	r3, r3, #17039360	@ 0x1040000
 8021098:	3b01      	subs	r3, #1
 802109a:	6163      	str	r3, [r4, #20]
 802109c:	4b50      	ldr	r3, [pc, #320]	@ (80211e0 <Argus_Cal_GetDefaultCalibration+0x1a04>)
 802109e:	f8c4 3274 	str.w	r3, [r4, #628]	@ 0x274
 80210a2:	f5a3 03d2 	sub.w	r3, r3, #6881280	@ 0x690000
 80210a6:	3b43      	subs	r3, #67	@ 0x43
 80210a8:	f8a4 9256 	strh.w	r9, [r4, #598]	@ 0x256
 80210ac:	f8c4 3278 	str.w	r3, [r4, #632]	@ 0x278
 80210b0:	f8df 9158 	ldr.w	r9, [pc, #344]	@ 802120c <Argus_Cal_GetDefaultCalibration+0x1a30>
 80210b4:	4b4b      	ldr	r3, [pc, #300]	@ (80211e4 <Argus_Cal_GetDefaultCalibration+0x1a08>)
 80210b6:	f8df a158 	ldr.w	sl, [pc, #344]	@ 8021210 <Argus_Cal_GetDefaultCalibration+0x1a34>
 80210ba:	e9c4 938b 	strd	r9, r3, [r4, #556]	@ 0x22c
 80210be:	4b4a      	ldr	r3, [pc, #296]	@ (80211e8 <Argus_Cal_GetDefaultCalibration+0x1a0c>)
 80210c0:	e9c4 a391 	strd	sl, r3, [r4, #580]	@ 0x244
 80210c4:	4b49      	ldr	r3, [pc, #292]	@ (80211ec <Argus_Cal_GetDefaultCalibration+0x1a10>)
 80210c6:	f8c4 3236 	str.w	r3, [r4, #566]	@ 0x236
 80210ca:	4b49      	ldr	r3, [pc, #292]	@ (80211f0 <Argus_Cal_GetDefaultCalibration+0x1a14>)
 80210cc:	f8c4 323a 	str.w	r3, [r4, #570]	@ 0x23a
 80210d0:	4b48      	ldr	r3, [pc, #288]	@ (80211f4 <Argus_Cal_GetDefaultCalibration+0x1a18>)
 80210d2:	f8c4 323e 	str.w	r3, [r4, #574]	@ 0x23e
 80210d6:	f246 6366 	movw	r3, #26214	@ 0x6666
 80210da:	f8a4 309c 	strh.w	r3, [r4, #156]	@ 0x9c
 80210de:	f64f 63fc 	movw	r3, #65276	@ 0xfefc
 80210e2:	f8a4 3234 	strh.w	r3, [r4, #564]	@ 0x234
 80210e6:	f240 63f6 	movw	r3, #1782	@ 0x6f6
 80210ea:	f7ff b94b 	b.w	8020384 <Argus_Cal_GetDefaultCalibration+0xba8>
 80210ee:	f640 212d 	movw	r1, #2605	@ 0xa2d
 80210f2:	2d01      	cmp	r5, #1
 80210f4:	f8a4 1248 	strh.w	r1, [r4, #584]	@ 0x248
 80210f8:	f43f ab47 	beq.w	802078a <Argus_Cal_GetDefaultCalibration+0xfae>
 80210fc:	f7ff bbb9 	b.w	8020872 <Argus_Cal_GetDefaultCalibration+0x1096>
 8021100:	f640 3154 	movw	r1, #2900	@ 0xb54
 8021104:	2d01      	cmp	r5, #1
 8021106:	f8a4 1246 	strh.w	r1, [r4, #582]	@ 0x246
 802110a:	f43f aa3b 	beq.w	8020584 <Argus_Cal_GetDefaultCalibration+0xda8>
 802110e:	f7ff bbac 	b.w	802086a <Argus_Cal_GetDefaultCalibration+0x108e>
 8021112:	f240 51a5 	movw	r1, #1445	@ 0x5a5
 8021116:	2d01      	cmp	r5, #1
 8021118:	f8a4 1240 	strh.w	r1, [r4, #576]	@ 0x240
 802111c:	f43f aa3f 	beq.w	802059e <Argus_Cal_GetDefaultCalibration+0xdc2>
 8021120:	f7ff bbb7 	b.w	8020892 <Argus_Cal_GetDefaultCalibration+0x10b6>
 8021124:	f240 61fd 	movw	r1, #1789	@ 0x6fd
 8021128:	2d01      	cmp	r5, #1
 802112a:	f8a4 123a 	strh.w	r1, [r4, #570]	@ 0x23a
 802112e:	f43f aa43 	beq.w	80205b8 <Argus_Cal_GetDefaultCalibration+0xddc>
 8021132:	f7ff bb82 	b.w	802083a <Argus_Cal_GetDefaultCalibration+0x105e>
 8021136:	f240 4119 	movw	r1, #1049	@ 0x419
 802113a:	2d01      	cmp	r5, #1
 802113c:	f8a4 123c 	strh.w	r1, [r4, #572]	@ 0x23c
 8021140:	f43f aac8 	beq.w	80206d4 <Argus_Cal_GetDefaultCalibration+0xef8>
 8021144:	f7ff bb9d 	b.w	8020882 <Argus_Cal_GetDefaultCalibration+0x10a6>
 8021148:	f640 416e 	movw	r1, #3182	@ 0xc6e
 802114c:	2d01      	cmp	r5, #1
 802114e:	f8a4 124a 	strh.w	r1, [r4, #586]	@ 0x24a
 8021152:	f43f aacc 	beq.w	80206ee <Argus_Cal_GetDefaultCalibration+0xf12>
 8021156:	f7ff bb90 	b.w	802087a <Argus_Cal_GetDefaultCalibration+0x109e>
 802115a:	4927      	ldr	r1, [pc, #156]	@ (80211f8 <Argus_Cal_GetDefaultCalibration+0x1a1c>)
 802115c:	4827      	ldr	r0, [pc, #156]	@ (80211fc <Argus_Cal_GetDefaultCalibration+0x1a20>)
 802115e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8021162:	f501 0176 	add.w	r1, r1, #16121856	@ 0xf60000
 8021166:	f501 417b 	add.w	r1, r1, #64256	@ 0xfb00
 802116a:	31f9      	adds	r1, #249	@ 0xf9
 802116c:	6121      	str	r1, [r4, #16]
 802116e:	f244 4175 	movw	r1, #17525	@ 0x4475
 8021172:	8061      	strh	r1, [r4, #2]
 8021174:	f644 6105 	movw	r1, #19973	@ 0x4e05
 8021178:	82a1      	strh	r1, [r4, #20]
 802117a:	2118      	movs	r1, #24
 802117c:	75a1      	strb	r1, [r4, #22]
 802117e:	211d      	movs	r1, #29
 8021180:	f7ff b8b7 	b.w	80202f2 <Argus_Cal_GetDefaultCalibration+0xb16>
 8021184:	f240 1193 	movw	r1, #403	@ 0x193
 8021188:	2d01      	cmp	r5, #1
 802118a:	f8a4 122e 	strh.w	r1, [r4, #558]	@ 0x22e
 802118e:	f43f aad5 	beq.w	802073c <Argus_Cal_GetDefaultCalibration+0xf60>
 8021192:	f7ff bb5a 	b.w	802084a <Argus_Cal_GetDefaultCalibration+0x106e>
 8021196:	bf00      	nop
 8021198:	44fa8000 	.word	0x44fa8000
 802119c:	32204308 	.word	0x32204308
 80211a0:	30114200 	.word	0x30114200
 80211a4:	0c600178 	.word	0x0c600178
 80211a8:	2f1044fd 	.word	0x2f1044fd
 80211ac:	0f970f79 	.word	0x0f970f79
 80211b0:	09300652 	.word	0x09300652
 80211b4:	0c0f05c9 	.word	0x0c0f05c9
 80211b8:	0432096e 	.word	0x0432096e
 80211bc:	0205711a 	.word	0x0205711a
 80211c0:	077e07ff 	.word	0x077e07ff
 80211c4:	0382ff91 	.word	0x0382ff91
 80211c8:	090d017c 	.word	0x090d017c
 80211cc:	018c00e9 	.word	0x018c00e9
 80211d0:	09db01aa 	.word	0x09db01aa
 80211d4:	128a1259 	.word	0x128a1259
 80211d8:	d5c3e000 	.word	0xd5c3e000
 80211dc:	3d2d5712 	.word	0x3d2d5712
 80211e0:	13db13b7 	.word	0x13db13b7
 80211e4:	065bff1b 	.word	0x065bff1b
 80211e8:	02faff92 	.word	0x02faff92
 80211ec:	ffac009c 	.word	0xffac009c
 80211f0:	00120129 	.word	0x00120129
 80211f4:	ffd60891 	.word	0xffd60891
 80211f8:	1e205508 	.word	0x1e205508
 80211fc:	533c900d 	.word	0x533c900d
 8021200:	059ffcea 	.word	0x059ffcea
 8021204:	ffaefe60 	.word	0xffaefe60
 8021208:	447e8148 	.word	0x447e8148
 802120c:	06fcfdb4 	.word	0x06fcfdb4
 8021210:	025100be 	.word	0x025100be
 8021214:	f240 6139 	movw	r1, #1593	@ 0x639
 8021218:	2d01      	cmp	r5, #1
 802121a:	f8a4 1238 	strh.w	r1, [r4, #568]	@ 0x238
 802121e:	f43f aa4c 	beq.w	80206ba <Argus_Cal_GetDefaultCalibration+0xede>
 8021222:	f7ff bb06 	b.w	8020832 <Argus_Cal_GetDefaultCalibration+0x1056>
 8021226:	f240 713b 	movw	r1, #1851	@ 0x73b
 802122a:	2d01      	cmp	r5, #1
 802122c:	f8a4 1244 	strh.w	r1, [r4, #580]	@ 0x244
 8021230:	f43f aa91 	beq.w	8020756 <Argus_Cal_GetDefaultCalibration+0xf7a>
 8021234:	f7ff bb15 	b.w	8020862 <Argus_Cal_GetDefaultCalibration+0x1086>
 8021238:	f240 414a 	movw	r1, #1098	@ 0x44a
 802123c:	2d01      	cmp	r5, #1
 802123e:	f8a4 1232 	strh.w	r1, [r4, #562]	@ 0x232
 8021242:	f43f aa95 	beq.w	8020770 <Argus_Cal_GetDefaultCalibration+0xf94>
 8021246:	f7ff bb08 	b.w	802085a <Argus_Cal_GetDefaultCalibration+0x107e>
 802124a:	f640 112a 	movw	r1, #2346	@ 0x92a
 802124e:	2d01      	cmp	r5, #1
 8021250:	f8a4 1236 	strh.w	r1, [r4, #566]	@ 0x236
 8021254:	f43f aa21 	beq.w	802069a <Argus_Cal_GetDefaultCalibration+0xebe>
 8021258:	f7ff bae7 	b.w	802082a <Argus_Cal_GetDefaultCalibration+0x104e>
 802125c:	f240 3129 	movw	r1, #809	@ 0x329
 8021260:	2d01      	cmp	r5, #1
 8021262:	f8a4 1242 	strh.w	r1, [r4, #578]	@ 0x242
 8021266:	bf08      	it	eq
 8021268:	f240 3126 	movweq	r1, #806	@ 0x326
 802126c:	f43f a9b1 	beq.w	80205d2 <Argus_Cal_GetDefaultCalibration+0xdf6>
 8021270:	f7ff bb13 	b.w	802089a <Argus_Cal_GetDefaultCalibration+0x10be>
 8021274:	f240 4161 	movw	r1, #1121	@ 0x461
 8021278:	2d01      	cmp	r5, #1
 802127a:	f8a4 122c 	strh.w	r1, [r4, #556]	@ 0x22c
 802127e:	f43e afb7 	beq.w	80201f0 <Argus_Cal_GetDefaultCalibration+0xa14>
 8021282:	f7ff bade 	b.w	8020842 <Argus_Cal_GetDefaultCalibration+0x1066>
 8021286:	f240 7117 	movw	r1, #1815	@ 0x717
 802128a:	2d01      	cmp	r5, #1
 802128c:	f8a4 1230 	strh.w	r1, [r4, #560]	@ 0x230
 8021290:	f43f aa47 	beq.w	8020722 <Argus_Cal_GetDefaultCalibration+0xf46>
 8021294:	f7ff badd 	b.w	8020852 <Argus_Cal_GetDefaultCalibration+0x1076>
 8021298:	f240 2127 	movw	r1, #551	@ 0x227
 802129c:	2d01      	cmp	r5, #1
 802129e:	f8a4 123e 	strh.w	r1, [r4, #574]	@ 0x23e
 80212a2:	f43f aa31 	beq.w	8020708 <Argus_Cal_GetDefaultCalibration+0xf2c>
 80212a6:	f7ff baf0 	b.w	802088a <Argus_Cal_GetDefaultCalibration+0x10ae>
 80212aa:	2a00      	cmp	r2, #0
 80212ac:	bf14      	ite	ne
 80212ae:	2114      	movne	r1, #20
 80212b0:	2111      	moveq	r1, #17
 80212b2:	73a1      	strb	r1, [r4, #14]
 80212b4:	e4d4      	b.n	8020c60 <Argus_Cal_GetDefaultCalibration+0x1484>
 80212b6:	2a00      	cmp	r2, #0
 80212b8:	bf14      	ite	ne
 80212ba:	212c      	movne	r1, #44	@ 0x2c
 80212bc:	212a      	moveq	r1, #42	@ 0x2a
 80212be:	2d01      	cmp	r5, #1
 80212c0:	72a1      	strb	r1, [r4, #10]
 80212c2:	f43f ae6f 	beq.w	8020fa4 <Argus_Cal_GetDefaultCalibration+0x17c8>
 80212c6:	e412      	b.n	8020aee <Argus_Cal_GetDefaultCalibration+0x1312>
 80212c8:	210f      	movs	r1, #15
 80212ca:	7221      	strb	r1, [r4, #8]
 80212cc:	f7ff bafc 	b.w	80208c8 <Argus_Cal_GetDefaultCalibration+0x10ec>
 80212d0:	1f51      	subs	r1, r2, #5
 80212d2:	2d01      	cmp	r5, #1
 80212d4:	7221      	strb	r1, [r4, #8]
 80212d6:	f43f aaf5 	beq.w	80208c4 <Argus_Cal_GetDefaultCalibration+0x10e8>
 80212da:	f7ff bbfe 	b.w	8020ada <Argus_Cal_GetDefaultCalibration+0x12fe>
 80212de:	f644 01bb 	movw	r1, #18619	@ 0x48bb
 80212e2:	f7fe bb55 	b.w	801f990 <Argus_Cal_GetDefaultCalibration+0x1b4>
 80212e6:	2a00      	cmp	r2, #0
 80212e8:	bf14      	ite	ne
 80212ea:	2100      	movne	r1, #0
 80212ec:	f06f 0103 	mvneq.w	r1, #3
 80212f0:	75a1      	strb	r1, [r4, #22]
 80212f2:	e661      	b.n	8020fb8 <Argus_Cal_GetDefaultCalibration+0x17dc>
 80212f4:	2148      	movs	r1, #72	@ 0x48
 80212f6:	7461      	strb	r1, [r4, #17]
 80212f8:	211b      	movs	r1, #27
 80212fa:	f7ff bb67 	b.w	80209cc <Argus_Cal_GetDefaultCalibration+0x11f0>
 80212fe:	f241 0ce6 	movw	ip, #4326	@ 0x10e6
 8021302:	2b05      	cmp	r3, #5
 8021304:	f8a4 c274 	strh.w	ip, [r4, #628]	@ 0x274
 8021308:	f47e ad14 	bne.w	801fd34 <Argus_Cal_GetDefaultCalibration+0x558>
 802130c:	e454      	b.n	8020bb8 <Argus_Cal_GetDefaultCalibration+0x13dc>
 802130e:	2b05      	cmp	r3, #5
 8021310:	7325      	strb	r5, [r4, #12]
 8021312:	f47e ae7f 	bne.w	8020014 <Argus_Cal_GetDefaultCalibration+0x838>
 8021316:	f7ff bb8b 	b.w	8020a30 <Argus_Cal_GetDefaultCalibration+0x1254>
 802131a:	f06f 0938 	mvn.w	r9, #56	@ 0x38
 802131e:	f06f 0ecc 	mvn.w	lr, #204	@ 0xcc
 8021322:	f7ff b9a7 	b.w	8020674 <Argus_Cal_GetDefaultCalibration+0xe98>
 8021326:	2143      	movs	r1, #67	@ 0x43
 8021328:	f7ff bb6e 	b.w	8020a08 <Argus_Cal_GetDefaultCalibration+0x122c>
 802132c:	f06f 0106 	mvn.w	r1, #6
 8021330:	f7ff bb3d 	b.w	80209ae <Argus_Cal_GetDefaultCalibration+0x11d2>
 8021334:	f241 0c1b 	movw	ip, #4123	@ 0x101b
 8021338:	2b05      	cmp	r3, #5
 802133a:	f8a4 c278 	strh.w	ip, [r4, #632]	@ 0x278
 802133e:	f47f a8fc 	bne.w	802053a <Argus_Cal_GetDefaultCalibration+0xd5e>
 8021342:	f7ff ba3d 	b.w	80207c0 <Argus_Cal_GetDefaultCalibration+0xfe4>
 8021346:	2a00      	cmp	r2, #0
 8021348:	f43f ae3a 	beq.w	8020fc0 <Argus_Cal_GetDefaultCalibration+0x17e4>
 802134c:	f241 0c78 	movw	ip, #4216	@ 0x1078
 8021350:	f8a4 c278 	strh.w	ip, [r4, #632]	@ 0x278
 8021354:	f7ff b879 	b.w	802044a <Argus_Cal_GetDefaultCalibration+0xc6e>
 8021358:	f241 0c85 	movw	ip, #4229	@ 0x1085
 802135c:	f8a4 c27a 	strh.w	ip, [r4, #634]	@ 0x27a
 8021360:	f7fe bd00 	b.w	801fd64 <Argus_Cal_GetDefaultCalibration+0x588>

08021364 <Argus_Cal_GetCurrentDefaultCalibration>:
 8021364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021366:	4604      	mov	r4, r0
 8021368:	b083      	sub	sp, #12
 802136a:	f8d0 04c0 	ldr.w	r0, [r0, #1216]	@ 0x4c0
 802136e:	460f      	mov	r7, r1
 8021370:	4616      	mov	r6, r2
 8021372:	f7f9 f905 	bl	801a580 <Argus_Dev_GetChipVersion>
 8021376:	b198      	cbz	r0, 80213a0 <Argus_Cal_GetCurrentDefaultCalibration+0x3c>
 8021378:	4605      	mov	r5, r0
 802137a:	f8d4 04c0 	ldr.w	r0, [r4, #1216]	@ 0x4c0
 802137e:	f7f9 f901 	bl	801a584 <Argus_Dev_GetLaserType>
 8021382:	4603      	mov	r3, r0
 8021384:	f8d4 04c0 	ldr.w	r0, [r4, #1216]	@ 0x4c0
 8021388:	461c      	mov	r4, r3
 802138a:	f7f9 f8f5 	bl	801a578 <Argus_Dev_GetModule>
 802138e:	9400      	str	r4, [sp, #0]
 8021390:	4602      	mov	r2, r0
 8021392:	462b      	mov	r3, r5
 8021394:	4631      	mov	r1, r6
 8021396:	4638      	mov	r0, r7
 8021398:	f7fe fa20 	bl	801f7dc <Argus_Cal_GetDefaultCalibration>
 802139c:	b003      	add	sp, #12
 802139e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80213a0:	f06f 0064 	mvn.w	r0, #100	@ 0x64
 80213a4:	e7fa      	b.n	802139c <Argus_Cal_GetCurrentDefaultCalibration+0x38>
 80213a6:	bf00      	nop

080213a8 <Argus_Cal_ReadCalibrationFromNVM>:
 80213a8:	2300      	movs	r3, #0
 80213aa:	f8c2 3288 	str.w	r3, [r2, #648]	@ 0x288
 80213ae:	b338      	cbz	r0, 8021400 <Argus_Cal_ReadCalibrationFromNVM+0x58>
 80213b0:	b331      	cbz	r1, 8021400 <Argus_Cal_ReadCalibrationFromNVM+0x58>
 80213b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80213b6:	f5ad 7d41 	sub.w	sp, sp, #772	@ 0x304
 80213ba:	ea41 6480 	orr.w	r4, r1, r0, lsl #26
 80213be:	4615      	mov	r5, r2
 80213c0:	4619      	mov	r1, r3
 80213c2:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80213c6:	a801      	add	r0, sp, #4
 80213c8:	9300      	str	r3, [sp, #0]
 80213ca:	f002 fa0a 	bl	80237e2 <memset>
 80213ce:	466a      	mov	r2, sp
 80213d0:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80213d4:	4620      	mov	r0, r4
 80213d6:	f001 fbc5 	bl	8022b64 <NVM_ReadBlock>
 80213da:	f110 0f09 	cmn.w	r0, #9
 80213de:	d00a      	beq.n	80213f6 <Argus_Cal_ReadCalibrationFromNVM+0x4e>
 80213e0:	2800      	cmp	r0, #0
 80213e2:	db54      	blt.n	802148e <Argus_Cal_ReadCalibrationFromNVM+0xe6>
 80213e4:	9b00      	ldr	r3, [sp, #0]
 80213e6:	ba1e      	rev	r6, r3
 80213e8:	f7ef fb72 	bl	8010ad0 <Argus_GetAPIVersion>
 80213ec:	42b0      	cmp	r0, r6
 80213ee:	d009      	beq.n	8021404 <Argus_Cal_ReadCalibrationFromNVM+0x5c>
 80213f0:	2600      	movs	r6, #0
 80213f2:	f8c5 6288 	str.w	r6, [r5, #648]	@ 0x288
 80213f6:	2000      	movs	r0, #0
 80213f8:	f50d 7d41 	add.w	sp, sp, #772	@ 0x304
 80213fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021400:	2000      	movs	r0, #0
 8021402:	4770      	bx	lr
 8021404:	9b01      	ldr	r3, [sp, #4]
 8021406:	ba1b      	rev	r3, r3
 8021408:	429c      	cmp	r4, r3
 802140a:	d1f1      	bne.n	80213f0 <Argus_Cal_ReadCalibrationFromNVM+0x48>
 802140c:	9e02      	ldr	r6, [sp, #8]
 802140e:	f026 4380 	bic.w	r3, r6, #1073741824	@ 0x40000000
 8021412:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8021416:	f006 4980 	and.w	r9, r6, #1073741824	@ 0x40000000
 802141a:	f406 2880 	and.w	r8, r6, #262144	@ 0x40000
 802141e:	b1c3      	cbz	r3, 8021452 <Argus_Cal_ReadCalibrationFromNVM+0xaa>
 8021420:	f10d 0e0c 	add.w	lr, sp, #12
 8021424:	f505 7c23 	add.w	ip, r5, #652	@ 0x28c
 8021428:	af0b      	add	r7, sp, #44	@ 0x2c
 802142a:	4674      	mov	r4, lr
 802142c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802142e:	42bc      	cmp	r4, r7
 8021430:	f10c 0c10 	add.w	ip, ip, #16
 8021434:	f10e 0e10 	add.w	lr, lr, #16
 8021438:	f84c 0c10 	str.w	r0, [ip, #-16]
 802143c:	f84c 1c0c 	str.w	r1, [ip, #-12]
 8021440:	f84c 2c08 	str.w	r2, [ip, #-8]
 8021444:	f84c 3c04 	str.w	r3, [ip, #-4]
 8021448:	d1ef      	bne.n	802142a <Argus_Cal_ReadCalibrationFromNVM+0x82>
 802144a:	f8de 0000 	ldr.w	r0, [lr]
 802144e:	f8cc 0000 	str.w	r0, [ip]
 8021452:	f1b9 0f00 	cmp.w	r9, #0
 8021456:	d00a      	beq.n	802146e <Argus_Cal_ReadCalibrationFromNVM+0xc6>
 8021458:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 802145c:	f8a5 309e 	strh.w	r3, [r5, #158]	@ 0x9e
 8021460:	2280      	movs	r2, #128	@ 0x80
 8021462:	f10d 0132 	add.w	r1, sp, #50	@ 0x32
 8021466:	f105 001c 	add.w	r0, r5, #28
 802146a:	f002 fa4a 	bl	8023902 <memcpy>
 802146e:	f1b8 0f00 	cmp.w	r8, #0
 8021472:	d0be      	beq.n	80213f2 <Argus_Cal_ReadCalibrationFromNVM+0x4a>
 8021474:	f8dd 30b2 	ldr.w	r3, [sp, #178]	@ 0xb2
 8021478:	f8c5 3222 	str.w	r3, [r5, #546]	@ 0x222
 802147c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8021480:	f10d 01b6 	add.w	r1, sp, #182	@ 0xb6
 8021484:	f505 7091 	add.w	r0, r5, #290	@ 0x122
 8021488:	f002 fa3b 	bl	8023902 <memcpy>
 802148c:	e7b1      	b.n	80213f2 <Argus_Cal_ReadCalibrationFromNVM+0x4a>
 802148e:	f110 0f62 	cmn.w	r0, #98	@ 0x62
 8021492:	d1b1      	bne.n	80213f8 <Argus_Cal_ReadCalibrationFromNVM+0x50>
 8021494:	e7ac      	b.n	80213f0 <Argus_Cal_ReadCalibrationFromNVM+0x48>
 8021496:	bf00      	nop

08021498 <Argus_Cal_WriteCalibrationToNVM>:
 8021498:	2800      	cmp	r0, #0
 802149a:	f000 80a0 	beq.w	80215de <Argus_Cal_WriteCalibrationToNVM+0x146>
 802149e:	b570      	push	{r4, r5, r6, lr}
 80214a0:	460d      	mov	r5, r1
 80214a2:	f5ad 7d40 	sub.w	sp, sp, #768	@ 0x300
 80214a6:	2900      	cmp	r1, #0
 80214a8:	f000 8095 	beq.w	80215d6 <Argus_Cal_WriteCalibrationToNVM+0x13e>
 80214ac:	2100      	movs	r1, #0
 80214ae:	ea45 6580 	orr.w	r5, r5, r0, lsl #26
 80214b2:	4614      	mov	r4, r2
 80214b4:	a801      	add	r0, sp, #4
 80214b6:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80214ba:	9100      	str	r1, [sp, #0]
 80214bc:	f002 f991 	bl	80237e2 <memset>
 80214c0:	466a      	mov	r2, sp
 80214c2:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80214c6:	4628      	mov	r0, r5
 80214c8:	f001 fb4c 	bl	8022b64 <NVM_ReadBlock>
 80214cc:	f110 0f09 	cmn.w	r0, #9
 80214d0:	f000 8081 	beq.w	80215d6 <Argus_Cal_WriteCalibrationToNVM+0x13e>
 80214d4:	2800      	cmp	r0, #0
 80214d6:	f2c0 80da 	blt.w	802168e <Argus_Cal_WriteCalibrationToNVM+0x1f6>
 80214da:	9b00      	ldr	r3, [sp, #0]
 80214dc:	ba1e      	rev	r6, r3
 80214de:	f7ef faf7 	bl	8010ad0 <Argus_GetAPIVersion>
 80214e2:	42b0      	cmp	r0, r6
 80214e4:	f000 80c9 	beq.w	802167a <Argus_Cal_WriteCalibrationToNVM+0x1e2>
 80214e8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80214ec:	2100      	movs	r1, #0
 80214ee:	4668      	mov	r0, sp
 80214f0:	f002 f977 	bl	80237e2 <memset>
 80214f4:	f8d4 3288 	ldr.w	r3, [r4, #648]	@ 0x288
 80214f8:	2b00      	cmp	r3, #0
 80214fa:	d06c      	beq.n	80215d6 <Argus_Cal_WriteCalibrationToNVM+0x13e>
 80214fc:	f10d 0307 	add.w	r3, sp, #7
 8021500:	f204 2187 	addw	r1, r4, #647	@ 0x287
 8021504:	f10d 0c2f 	add.w	ip, sp, #47	@ 0x2f
 8021508:	2600      	movs	r6, #0
 802150a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 802150e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8021512:	4290      	cmp	r0, r2
 8021514:	bf1c      	itt	ne
 8021516:	701a      	strbne	r2, [r3, #0]
 8021518:	2601      	movne	r6, #1
 802151a:	4563      	cmp	r3, ip
 802151c:	d1f5      	bne.n	802150a <Argus_Cal_WriteCalibrationToNVM+0x72>
 802151e:	f894 309e 	ldrb.w	r3, [r4, #158]	@ 0x9e
 8021522:	f89d 2030 	ldrb.w	r2, [sp, #48]	@ 0x30
 8021526:	429a      	cmp	r2, r3
 8021528:	bf18      	it	ne
 802152a:	f88d 3030 	strbne.w	r3, [sp, #48]	@ 0x30
 802152e:	f89d 2031 	ldrb.w	r2, [sp, #49]	@ 0x31
 8021532:	f894 309f 	ldrb.w	r3, [r4, #159]	@ 0x9f
 8021536:	bf18      	it	ne
 8021538:	2601      	movne	r6, #1
 802153a:	429a      	cmp	r2, r3
 802153c:	bf1c      	itt	ne
 802153e:	f88d 3031 	strbne.w	r3, [sp, #49]	@ 0x31
 8021542:	2601      	movne	r6, #1
 8021544:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 8021548:	f104 021b 	add.w	r2, r4, #27
 802154c:	f10d 0cb1 	add.w	ip, sp, #177	@ 0xb1
 8021550:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8021554:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8021558:	4288      	cmp	r0, r1
 802155a:	bf1c      	itt	ne
 802155c:	7019      	strbne	r1, [r3, #0]
 802155e:	2601      	movne	r6, #1
 8021560:	4563      	cmp	r3, ip
 8021562:	d1f5      	bne.n	8021550 <Argus_Cal_WriteCalibrationToNVM+0xb8>
 8021564:	f894 3222 	ldrb.w	r3, [r4, #546]	@ 0x222
 8021568:	f89d 20b2 	ldrb.w	r2, [sp, #178]	@ 0xb2
 802156c:	429a      	cmp	r2, r3
 802156e:	bf18      	it	ne
 8021570:	f88d 30b2 	strbne.w	r3, [sp, #178]	@ 0xb2
 8021574:	f89d 20b3 	ldrb.w	r2, [sp, #179]	@ 0xb3
 8021578:	f894 3223 	ldrb.w	r3, [r4, #547]	@ 0x223
 802157c:	bf18      	it	ne
 802157e:	2601      	movne	r6, #1
 8021580:	429a      	cmp	r2, r3
 8021582:	bf18      	it	ne
 8021584:	f88d 30b3 	strbne.w	r3, [sp, #179]	@ 0xb3
 8021588:	f89d 20b4 	ldrb.w	r2, [sp, #180]	@ 0xb4
 802158c:	f894 3224 	ldrb.w	r3, [r4, #548]	@ 0x224
 8021590:	bf18      	it	ne
 8021592:	2601      	movne	r6, #1
 8021594:	429a      	cmp	r2, r3
 8021596:	bf18      	it	ne
 8021598:	f88d 30b4 	strbne.w	r3, [sp, #180]	@ 0xb4
 802159c:	f89d 20b5 	ldrb.w	r2, [sp, #181]	@ 0xb5
 80215a0:	f894 3225 	ldrb.w	r3, [r4, #549]	@ 0x225
 80215a4:	bf18      	it	ne
 80215a6:	2601      	movne	r6, #1
 80215a8:	429a      	cmp	r2, r3
 80215aa:	bf18      	it	ne
 80215ac:	f88d 30b5 	strbne.w	r3, [sp, #181]	@ 0xb5
 80215b0:	f204 1121 	addw	r1, r4, #289	@ 0x121
 80215b4:	bf18      	it	ne
 80215b6:	2601      	movne	r6, #1
 80215b8:	f10d 03b5 	add.w	r3, sp, #181	@ 0xb5
 80215bc:	f20d 14b5 	addw	r4, sp, #437	@ 0x1b5
 80215c0:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80215c4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80215c8:	4290      	cmp	r0, r2
 80215ca:	bf1c      	itt	ne
 80215cc:	701a      	strbne	r2, [r3, #0]
 80215ce:	2601      	movne	r6, #1
 80215d0:	429c      	cmp	r4, r3
 80215d2:	d1f5      	bne.n	80215c0 <Argus_Cal_WriteCalibrationToNVM+0x128>
 80215d4:	b92e      	cbnz	r6, 80215e2 <Argus_Cal_WriteCalibrationToNVM+0x14a>
 80215d6:	2000      	movs	r0, #0
 80215d8:	f50d 7d40 	add.w	sp, sp, #768	@ 0x300
 80215dc:	bd70      	pop	{r4, r5, r6, pc}
 80215de:	2000      	movs	r0, #0
 80215e0:	4770      	bx	lr
 80215e2:	f7ef fa75 	bl	8010ad0 <Argus_GetAPIVersion>
 80215e6:	f89d 3000 	ldrb.w	r3, [sp]
 80215ea:	0e02      	lsrs	r2, r0, #24
 80215ec:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
 80215f0:	bf18      	it	ne
 80215f2:	f88d 2000 	strbne.w	r2, [sp]
 80215f6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80215fa:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80215fe:	429a      	cmp	r2, r3
 8021600:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8021604:	bf18      	it	ne
 8021606:	f88d 3001 	strbne.w	r3, [sp, #1]
 802160a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 802160e:	429a      	cmp	r2, r3
 8021610:	bf18      	it	ne
 8021612:	f88d 3002 	strbne.w	r3, [sp, #2]
 8021616:	f89d 3003 	ldrb.w	r3, [sp, #3]
 802161a:	b2c0      	uxtb	r0, r0
 802161c:	4283      	cmp	r3, r0
 802161e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8021622:	bf18      	it	ne
 8021624:	f88d 0003 	strbne.w	r0, [sp, #3]
 8021628:	0e2a      	lsrs	r2, r5, #24
 802162a:	ebb3 6f15 	cmp.w	r3, r5, lsr #24
 802162e:	bf18      	it	ne
 8021630:	f88d 2004 	strbne.w	r2, [sp, #4]
 8021634:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8021638:	f3c5 4307 	ubfx	r3, r5, #16, #8
 802163c:	429a      	cmp	r2, r3
 802163e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8021642:	bf18      	it	ne
 8021644:	f88d 3005 	strbne.w	r3, [sp, #5]
 8021648:	f3c5 2307 	ubfx	r3, r5, #8, #8
 802164c:	429a      	cmp	r2, r3
 802164e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8021652:	bf18      	it	ne
 8021654:	f88d 3006 	strbne.w	r3, [sp, #6]
 8021658:	b2eb      	uxtb	r3, r5
 802165a:	429a      	cmp	r2, r3
 802165c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8021660:	466a      	mov	r2, sp
 8021662:	4628      	mov	r0, r5
 8021664:	bf18      	it	ne
 8021666:	f88d 3007 	strbne.w	r3, [sp, #7]
 802166a:	f001 fa77 	bl	8022b5c <NVM_WriteBlock>
 802166e:	f110 0f09 	cmn.w	r0, #9
 8021672:	d0b0      	beq.n	80215d6 <Argus_Cal_WriteCalibrationToNVM+0x13e>
 8021674:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 8021678:	e7ae      	b.n	80215d8 <Argus_Cal_WriteCalibrationToNVM+0x140>
 802167a:	9b01      	ldr	r3, [sp, #4]
 802167c:	ba1b      	rev	r3, r3
 802167e:	429d      	cmp	r5, r3
 8021680:	f47f af32 	bne.w	80214e8 <Argus_Cal_WriteCalibrationToNVM+0x50>
 8021684:	9b02      	ldr	r3, [sp, #8]
 8021686:	2b00      	cmp	r3, #0
 8021688:	f47f af38 	bne.w	80214fc <Argus_Cal_WriteCalibrationToNVM+0x64>
 802168c:	e732      	b.n	80214f4 <Argus_Cal_WriteCalibrationToNVM+0x5c>
 802168e:	f110 0f62 	cmn.w	r0, #98	@ 0x62
 8021692:	d1a1      	bne.n	80215d8 <Argus_Cal_WriteCalibrationToNVM+0x140>
 8021694:	e728      	b.n	80214e8 <Argus_Cal_WriteCalibrationToNVM+0x50>
 8021696:	bf00      	nop

08021698 <ADS_TriggerNextTransfer.part.0>:
 8021698:	b5f0      	push	{r4, r5, r6, r7, lr}
 802169a:	b083      	sub	sp, #12
 802169c:	f7eb ffb2 	bl	800d604 <IRQ_LOCK>
 80216a0:	4b17      	ldr	r3, [pc, #92]	@ (8021700 <ADS_TriggerNextTransfer.part.0+0x68>)
 80216a2:	681c      	ldr	r4, [r3, #0]
 80216a4:	69a2      	ldr	r2, [r4, #24]
 80216a6:	601a      	str	r2, [r3, #0]
 80216a8:	f7eb ff8a 	bl	800d5c0 <IRQ_UNLOCK>
 80216ac:	e9d4 6303 	ldrd	r6, r3, [r4, #12]
 80216b0:	e9d4 0500 	ldrd	r0, r5, [r4]
 80216b4:	4913      	ldr	r1, [pc, #76]	@ (8021704 <ADS_TriggerNextTransfer.part.0+0x6c>)
 80216b6:	68a2      	ldr	r2, [r4, #8]
 80216b8:	6967      	ldr	r7, [r4, #20]
 80216ba:	9100      	str	r1, [sp, #0]
 80216bc:	9501      	str	r5, [sp, #4]
 80216be:	4631      	mov	r1, r6
 80216c0:	f7ec f99a 	bl	800d9f8 <S2PI_TransferFrame>
 80216c4:	b958      	cbnz	r0, 80216de <ADS_TriggerNextTransfer.part.0+0x46>
 80216c6:	b90f      	cbnz	r7, 80216cc <ADS_TriggerNextTransfer.part.0+0x34>
 80216c8:	b003      	add	sp, #12
 80216ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80216cc:	f105 010c 	add.w	r1, r5, #12
 80216d0:	f105 0008 	add.w	r0, r5, #8
 80216d4:	f7ec fb44 	bl	800dd60 <Timer_GetCounterValue>
 80216d8:	606f      	str	r7, [r5, #4]
 80216da:	b003      	add	sp, #12
 80216dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80216de:	4604      	mov	r4, r0
 80216e0:	7831      	ldrb	r1, [r6, #0]
 80216e2:	4809      	ldr	r0, [pc, #36]	@ (8021708 <ADS_TriggerNextTransfer.part.0+0x70>)
 80216e4:	4622      	mov	r2, r4
 80216e6:	f7ec fc13 	bl	800df10 <print>
 80216ea:	2200      	movs	r2, #0
 80216ec:	2302      	movs	r3, #2
 80216ee:	4629      	mov	r1, r5
 80216f0:	4620      	mov	r0, r4
 80216f2:	642a      	str	r2, [r5, #64]	@ 0x40
 80216f4:	602b      	str	r3, [r5, #0]
 80216f6:	b003      	add	sp, #12
 80216f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80216fc:	f000 b806 	b.w	802170c <ADS_SPI_Callback>
 8021700:	24000a44 	.word	0x24000a44
 8021704:	0802170d 	.word	0x0802170d
 8021708:	0802c018 	.word	0x0802c018

0802170c <ADS_SPI_Callback>:
 802170c:	b570      	push	{r4, r5, r6, lr}
 802170e:	460c      	mov	r4, r1
 8021710:	4605      	mov	r5, r0
 8021712:	f7eb ff77 	bl	800d604 <IRQ_LOCK>
 8021716:	6823      	ldr	r3, [r4, #0]
 8021718:	2b02      	cmp	r3, #2
 802171a:	d02f      	beq.n	802177c <ADS_SPI_Callback+0x70>
 802171c:	6823      	ldr	r3, [r4, #0]
 802171e:	2b64      	cmp	r3, #100	@ 0x64
 8021720:	bf04      	itt	eq
 8021722:	2367      	moveq	r3, #103	@ 0x67
 8021724:	6023      	streq	r3, [r4, #0]
 8021726:	1cab      	adds	r3, r5, #2
 8021728:	bf1d      	ittte	ne
 802172a:	2300      	movne	r3, #0
 802172c:	6be6      	ldrne	r6, [r4, #60]	@ 0x3c
 802172e:	63e3      	strne	r3, [r4, #60]	@ 0x3c
 8021730:	2600      	moveq	r6, #0
 8021732:	f7eb ff45 	bl	800d5c0 <IRQ_UNLOCK>
 8021736:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8021738:	b18b      	cbz	r3, 802175e <ADS_SPI_Callback+0x52>
 802173a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 802173c:	1e51      	subs	r1, r2, #1
 802173e:	6361      	str	r1, [r4, #52]	@ 0x34
 8021740:	b152      	cbz	r2, 8021758 <ADS_SPI_Callback+0x4c>
 8021742:	781a      	ldrb	r2, [r3, #0]
 8021744:	43d2      	mvns	r2, r2
 8021746:	701a      	strb	r2, [r3, #0]
 8021748:	e9d4 230d 	ldrd	r2, r3, [r4, #52]	@ 0x34
 802174c:	3301      	adds	r3, #1
 802174e:	1e51      	subs	r1, r2, #1
 8021750:	e9c4 130d 	strd	r1, r3, [r4, #52]	@ 0x34
 8021754:	2a00      	cmp	r2, #0
 8021756:	d1f4      	bne.n	8021742 <ADS_SPI_Callback+0x36>
 8021758:	2300      	movs	r3, #0
 802175a:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 802175e:	f7eb ff51 	bl	800d604 <IRQ_LOCK>
 8021762:	4b0a      	ldr	r3, [pc, #40]	@ (802178c <ADS_SPI_Callback+0x80>)
 8021764:	681b      	ldr	r3, [r3, #0]
 8021766:	b163      	cbz	r3, 8021782 <ADS_SPI_Callback+0x76>
 8021768:	f7ff ff96 	bl	8021698 <ADS_TriggerNextTransfer.part.0>
 802176c:	f7eb ff28 	bl	800d5c0 <IRQ_UNLOCK>
 8021770:	b116      	cbz	r6, 8021778 <ADS_SPI_Callback+0x6c>
 8021772:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8021774:	4628      	mov	r0, r5
 8021776:	47b0      	blx	r6
 8021778:	4628      	mov	r0, r5
 802177a:	bd70      	pop	{r4, r5, r6, pc}
 802177c:	2300      	movs	r3, #0
 802177e:	6023      	str	r3, [r4, #0]
 8021780:	e7d1      	b.n	8021726 <ADS_SPI_Callback+0x1a>
 8021782:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8021784:	f7ec fa1c 	bl	800dbc0 <S2PI_ReleaseMutex>
 8021788:	e7f0      	b.n	802176c <ADS_SPI_Callback+0x60>
 802178a:	bf00      	nop
 802178c:	24000a44 	.word	0x24000a44

08021790 <ADS_Abort.part.0>:
 8021790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021794:	4605      	mov	r5, r0
 8021796:	f06f 0201 	mvn.w	r2, #1
 802179a:	2300      	movs	r3, #0
 802179c:	6002      	str	r2, [r0, #0]
 802179e:	b082      	sub	sp, #8
 80217a0:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 80217a2:	606b      	str	r3, [r5, #4]
 80217a4:	4689      	mov	r9, r1
 80217a6:	f7ec fa1b 	bl	800dbe0 <S2PI_Abort>
 80217aa:	1e04      	subs	r4, r0, #0
 80217ac:	f2c0 80a7 	blt.w	80218fe <ADS_Abort.part.0+0x16e>
 80217b0:	a901      	add	r1, sp, #4
 80217b2:	4668      	mov	r0, sp
 80217b4:	f7ec fad4 	bl	800dd60 <Timer_GetCounterValue>
 80217b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80217bc:	4b54      	ldr	r3, [pc, #336]	@ (8021910 <ADS_Abort.part.0+0x180>)
 80217be:	eb17 0803 	adds.w	r8, r7, r3
 80217c2:	4b54      	ldr	r3, [pc, #336]	@ (8021914 <ADS_Abort.part.0+0x184>)
 80217c4:	bf2c      	ite	cs
 80217c6:	f04f 0a01 	movcs.w	sl, #1
 80217ca:	f04f 0a00 	movcc.w	sl, #0
 80217ce:	4598      	cmp	r8, r3
 80217d0:	d934      	bls.n	802183c <ADS_Abort.part.0+0xac>
 80217d2:	f5a7 2a5b 	sub.w	sl, r7, #897024	@ 0xdb000
 80217d6:	f5aa 6a3a 	sub.w	sl, sl, #2976	@ 0xba0
 80217da:	f106 0801 	add.w	r8, r6, #1
 80217de:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80217e0:	f7ec f8d6 	bl	800d990 <S2PI_CycleCsPin>
 80217e4:	a901      	add	r1, sp, #4
 80217e6:	4604      	mov	r4, r0
 80217e8:	4668      	mov	r0, sp
 80217ea:	f7ec fab9 	bl	800dd60 <Timer_GetCounterValue>
 80217ee:	45b0      	cmp	r8, r6
 80217f0:	e9dd 3100 	ldrd	r3, r1, [sp]
 80217f4:	d948      	bls.n	8021888 <ADS_Abort.part.0+0xf8>
 80217f6:	42b3      	cmp	r3, r6
 80217f8:	d052      	beq.n	80218a0 <ADS_Abort.part.0+0x110>
 80217fa:	d853      	bhi.n	80218a4 <ADS_Abort.part.0+0x114>
 80217fc:	2c00      	cmp	r4, #0
 80217fe:	db3a      	blt.n	8021876 <ADS_Abort.part.0+0xe6>
 8021800:	682b      	ldr	r3, [r5, #0]
 8021802:	3302      	adds	r3, #2
 8021804:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8021806:	bf18      	it	ne
 8021808:	682c      	ldrne	r4, [r5, #0]
 802180a:	f04f 0100 	mov.w	r1, #0
 802180e:	bf08      	it	eq
 8021810:	2400      	moveq	r4, #0
 8021812:	6029      	str	r1, [r5, #0]
 8021814:	6429      	str	r1, [r5, #64]	@ 0x40
 8021816:	b113      	cbz	r3, 802181e <ADS_Abort.part.0+0x8e>
 8021818:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 802181a:	4648      	mov	r0, r9
 802181c:	4798      	blx	r3
 802181e:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8021820:	2200      	movs	r2, #0
 8021822:	63ea      	str	r2, [r5, #60]	@ 0x3c
 8021824:	b113      	cbz	r3, 802182c <ADS_Abort.part.0+0x9c>
 8021826:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 8021828:	4648      	mov	r0, r9
 802182a:	4798      	blx	r3
 802182c:	4620      	mov	r0, r4
 802182e:	b002      	add	sp, #8
 8021830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021834:	42b1      	cmp	r1, r6
 8021836:	d049      	beq.n	80218cc <ADS_Abort.part.0+0x13c>
 8021838:	2c02      	cmp	r4, #2
 802183a:	d1df      	bne.n	80217fc <ADS_Abort.part.0+0x6c>
 802183c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 802183e:	f7ec f8a7 	bl	800d990 <S2PI_CycleCsPin>
 8021842:	a901      	add	r1, sp, #4
 8021844:	4604      	mov	r4, r0
 8021846:	4668      	mov	r0, sp
 8021848:	f7ec fa8a 	bl	800dd60 <Timer_GetCounterValue>
 802184c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8021850:	f1ba 0f00 	cmp.w	sl, #0
 8021854:	d1ee      	bne.n	8021834 <ADS_Abort.part.0+0xa4>
 8021856:	42b1      	cmp	r1, r6
 8021858:	d033      	beq.n	80218c2 <ADS_Abort.part.0+0x132>
 802185a:	bf8c      	ite	hi
 802185c:	2301      	movhi	r3, #1
 802185e:	2300      	movls	r3, #0
 8021860:	2b00      	cmp	r3, #0
 8021862:	d0cb      	beq.n	80217fc <ADS_Abort.part.0+0x6c>
 8021864:	42b1      	cmp	r1, r6
 8021866:	d043      	beq.n	80218f0 <ADS_Abort.part.0+0x160>
 8021868:	bf8c      	ite	hi
 802186a:	2201      	movhi	r2, #1
 802186c:	2200      	movls	r2, #0
 802186e:	2a00      	cmp	r2, #0
 8021870:	d0e2      	beq.n	8021838 <ADS_Abort.part.0+0xa8>
 8021872:	2c00      	cmp	r4, #0
 8021874:	dac4      	bge.n	8021800 <ADS_Abort.part.0+0x70>
 8021876:	4828      	ldr	r0, [pc, #160]	@ (8021918 <ADS_Abort.part.0+0x188>)
 8021878:	4621      	mov	r1, r4
 802187a:	f7ec fb49 	bl	800df10 <print>
 802187e:	682b      	ldr	r3, [r5, #0]
 8021880:	3302      	adds	r3, #2
 8021882:	bf08      	it	eq
 8021884:	602c      	streq	r4, [r5, #0]
 8021886:	e7bb      	b.n	8021800 <ADS_Abort.part.0+0x70>
 8021888:	42b3      	cmp	r3, r6
 802188a:	d015      	beq.n	80218b8 <ADS_Abort.part.0+0x128>
 802188c:	bf8c      	ite	hi
 802188e:	2201      	movhi	r2, #1
 8021890:	2200      	movls	r2, #0
 8021892:	b912      	cbnz	r2, 802189a <ADS_Abort.part.0+0x10a>
 8021894:	4598      	cmp	r8, r3
 8021896:	d025      	beq.n	80218e4 <ADS_Abort.part.0+0x154>
 8021898:	d3b0      	bcc.n	80217fc <ADS_Abort.part.0+0x6c>
 802189a:	2c02      	cmp	r4, #2
 802189c:	d09f      	beq.n	80217de <ADS_Abort.part.0+0x4e>
 802189e:	e7ad      	b.n	80217fc <ADS_Abort.part.0+0x6c>
 80218a0:	42b9      	cmp	r1, r7
 80218a2:	d3ab      	bcc.n	80217fc <ADS_Abort.part.0+0x6c>
 80218a4:	4598      	cmp	r8, r3
 80218a6:	d016      	beq.n	80218d6 <ADS_Abort.part.0+0x146>
 80218a8:	bf34      	ite	cc
 80218aa:	2101      	movcc	r1, #1
 80218ac:	2100      	movcs	r1, #0
 80218ae:	2900      	cmp	r1, #0
 80218b0:	d1a4      	bne.n	80217fc <ADS_Abort.part.0+0x6c>
 80218b2:	2c02      	cmp	r4, #2
 80218b4:	d093      	beq.n	80217de <ADS_Abort.part.0+0x4e>
 80218b6:	e7a1      	b.n	80217fc <ADS_Abort.part.0+0x6c>
 80218b8:	42b9      	cmp	r1, r7
 80218ba:	bf34      	ite	cc
 80218bc:	2200      	movcc	r2, #0
 80218be:	2201      	movcs	r2, #1
 80218c0:	e7e7      	b.n	8021892 <ADS_Abort.part.0+0x102>
 80218c2:	42ba      	cmp	r2, r7
 80218c4:	bf34      	ite	cc
 80218c6:	2300      	movcc	r3, #0
 80218c8:	2301      	movcs	r3, #1
 80218ca:	e7c9      	b.n	8021860 <ADS_Abort.part.0+0xd0>
 80218cc:	42ba      	cmp	r2, r7
 80218ce:	d2b3      	bcs.n	8021838 <ADS_Abort.part.0+0xa8>
 80218d0:	4590      	cmp	r8, r2
 80218d2:	d993      	bls.n	80217fc <ADS_Abort.part.0+0x6c>
 80218d4:	e7b0      	b.n	8021838 <ADS_Abort.part.0+0xa8>
 80218d6:	458a      	cmp	sl, r1
 80218d8:	bf8c      	ite	hi
 80218da:	2100      	movhi	r1, #0
 80218dc:	2101      	movls	r1, #1
 80218de:	2900      	cmp	r1, #0
 80218e0:	d0e7      	beq.n	80218b2 <ADS_Abort.part.0+0x122>
 80218e2:	e78b      	b.n	80217fc <ADS_Abort.part.0+0x6c>
 80218e4:	458a      	cmp	sl, r1
 80218e6:	d989      	bls.n	80217fc <ADS_Abort.part.0+0x6c>
 80218e8:	2c02      	cmp	r4, #2
 80218ea:	f43f af78 	beq.w	80217de <ADS_Abort.part.0+0x4e>
 80218ee:	e785      	b.n	80217fc <ADS_Abort.part.0+0x6c>
 80218f0:	4590      	cmp	r8, r2
 80218f2:	bf8c      	ite	hi
 80218f4:	2200      	movhi	r2, #0
 80218f6:	2201      	movls	r2, #1
 80218f8:	2a00      	cmp	r2, #0
 80218fa:	d09d      	beq.n	8021838 <ADS_Abort.part.0+0xa8>
 80218fc:	e7b9      	b.n	8021872 <ADS_Abort.part.0+0xe2>
 80218fe:	4807      	ldr	r0, [pc, #28]	@ (802191c <ADS_Abort.part.0+0x18c>)
 8021900:	4621      	mov	r1, r4
 8021902:	f7ec fb05 	bl	800df10 <print>
 8021906:	682b      	ldr	r3, [r5, #0]
 8021908:	3302      	adds	r3, #2
 802190a:	bf08      	it	eq
 802190c:	602c      	streq	r4, [r5, #0]
 802190e:	e74f      	b.n	80217b0 <ADS_Abort.part.0+0x20>
 8021910:	000186a0 	.word	0x000186a0
 8021914:	000f423f 	.word	0x000f423f
 8021918:	0802c098 	.word	0x0802c098
 802191c:	0802c060 	.word	0x0802c060

08021920 <ADS_AwaitIdle.constprop.0>:
 8021920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021924:	4606      	mov	r6, r0
 8021926:	b084      	sub	sp, #16
 8021928:	a901      	add	r1, sp, #4
 802192a:	4668      	mov	r0, sp
 802192c:	f7ec fa18 	bl	800dd60 <Timer_GetCounterValue>
 8021930:	6833      	ldr	r3, [r6, #0]
 8021932:	4c3a      	ldr	r4, [pc, #232]	@ (8021a1c <ADS_AwaitIdle.constprop.0+0xfc>)
 8021934:	4d3a      	ldr	r5, [pc, #232]	@ (8021a20 <ADS_AwaitIdle.constprop.0+0x100>)
 8021936:	2b00      	cmp	r3, #0
 8021938:	d047      	beq.n	80219ca <ADS_AwaitIdle.constprop.0+0xaa>
 802193a:	6833      	ldr	r3, [r6, #0]
 802193c:	2b67      	cmp	r3, #103	@ 0x67
 802193e:	d049      	beq.n	80219d4 <ADS_AwaitIdle.constprop.0+0xb4>
 8021940:	6833      	ldr	r3, [r6, #0]
 8021942:	2b64      	cmp	r3, #100	@ 0x64
 8021944:	d046      	beq.n	80219d4 <ADS_AwaitIdle.constprop.0+0xb4>
 8021946:	6837      	ldr	r7, [r6, #0]
 8021948:	a802      	add	r0, sp, #8
 802194a:	a903      	add	r1, sp, #12
 802194c:	f7ec fa08 	bl	800dd60 <Timer_GetCounterValue>
 8021950:	e9dd 2c01 	ldrd	r2, ip, [sp, #4]
 8021954:	1913      	adds	r3, r2, r4
 8021956:	bf2c      	ite	cs
 8021958:	2001      	movcs	r0, #1
 802195a:	2000      	movcc	r0, #0
 802195c:	42ab      	cmp	r3, r5
 802195e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8021962:	9900      	ldr	r1, [sp, #0]
 8021964:	d81b      	bhi.n	802199e <ADS_AwaitIdle.constprop.0+0x7e>
 8021966:	f080 0001 	eor.w	r0, r0, #1
 802196a:	468e      	mov	lr, r1
 802196c:	b310      	cbz	r0, 80219b4 <ADS_AwaitIdle.constprop.0+0x94>
 802196e:	4561      	cmp	r1, ip
 8021970:	d03a      	beq.n	80219e8 <ADS_AwaitIdle.constprop.0+0xc8>
 8021972:	bf34      	ite	cc
 8021974:	2201      	movcc	r2, #1
 8021976:	2200      	movcs	r2, #0
 8021978:	bb72      	cbnz	r2, 80219d8 <ADS_AwaitIdle.constprop.0+0xb8>
 802197a:	482a      	ldr	r0, [pc, #168]	@ (8021a24 <ADS_AwaitIdle.constprop.0+0x104>)
 802197c:	2164      	movs	r1, #100	@ 0x64
 802197e:	f7ec fac7 	bl	800df10 <print>
 8021982:	6833      	ldr	r3, [r6, #0]
 8021984:	3302      	adds	r3, #2
 8021986:	d042      	beq.n	8021a0e <ADS_AwaitIdle.constprop.0+0xee>
 8021988:	f06f 0105 	mvn.w	r1, #5
 802198c:	4630      	mov	r0, r6
 802198e:	f7ff feff 	bl	8021790 <ADS_Abort.part.0>
 8021992:	f06f 0705 	mvn.w	r7, #5
 8021996:	4638      	mov	r0, r7
 8021998:	b004      	add	sp, #16
 802199a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802199e:	f101 0e01 	add.w	lr, r1, #1
 80219a2:	4571      	cmp	r1, lr
 80219a4:	f5a2 235b 	sub.w	r3, r2, #897024	@ 0xdb000
 80219a8:	f5a3 633a 	sub.w	r3, r3, #2976	@ 0xba0
 80219ac:	bf2c      	ite	cs
 80219ae:	2000      	movcs	r0, #0
 80219b0:	2001      	movcc	r0, #1
 80219b2:	e7db      	b.n	802196c <ADS_AwaitIdle.constprop.0+0x4c>
 80219b4:	4561      	cmp	r1, ip
 80219b6:	d01c      	beq.n	80219f2 <ADS_AwaitIdle.constprop.0+0xd2>
 80219b8:	d302      	bcc.n	80219c0 <ADS_AwaitIdle.constprop.0+0xa0>
 80219ba:	45e6      	cmp	lr, ip
 80219bc:	d01d      	beq.n	80219fa <ADS_AwaitIdle.constprop.0+0xda>
 80219be:	d3dc      	bcc.n	802197a <ADS_AwaitIdle.constprop.0+0x5a>
 80219c0:	2f02      	cmp	r7, #2
 80219c2:	d1e8      	bne.n	8021996 <ADS_AwaitIdle.constprop.0+0x76>
 80219c4:	6833      	ldr	r3, [r6, #0]
 80219c6:	2b00      	cmp	r3, #0
 80219c8:	d1b7      	bne.n	802193a <ADS_AwaitIdle.constprop.0+0x1a>
 80219ca:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 80219cc:	f7eb fef4 	bl	800d7b8 <S2PI_GetStatus>
 80219d0:	4607      	mov	r7, r0
 80219d2:	e7b9      	b.n	8021948 <ADS_AwaitIdle.constprop.0+0x28>
 80219d4:	2702      	movs	r7, #2
 80219d6:	e7b7      	b.n	8021948 <ADS_AwaitIdle.constprop.0+0x28>
 80219d8:	45e6      	cmp	lr, ip
 80219da:	d011      	beq.n	8021a00 <ADS_AwaitIdle.constprop.0+0xe0>
 80219dc:	bf34      	ite	cc
 80219de:	2301      	movcc	r3, #1
 80219e0:	2300      	movcs	r3, #0
 80219e2:	2b00      	cmp	r3, #0
 80219e4:	d0ec      	beq.n	80219c0 <ADS_AwaitIdle.constprop.0+0xa0>
 80219e6:	e7c8      	b.n	802197a <ADS_AwaitIdle.constprop.0+0x5a>
 80219e8:	4542      	cmp	r2, r8
 80219ea:	bf8c      	ite	hi
 80219ec:	2200      	movhi	r2, #0
 80219ee:	2201      	movls	r2, #1
 80219f0:	e7c2      	b.n	8021978 <ADS_AwaitIdle.constprop.0+0x58>
 80219f2:	4542      	cmp	r2, r8
 80219f4:	d9e4      	bls.n	80219c0 <ADS_AwaitIdle.constprop.0+0xa0>
 80219f6:	45e6      	cmp	lr, ip
 80219f8:	d1e1      	bne.n	80219be <ADS_AwaitIdle.constprop.0+0x9e>
 80219fa:	4543      	cmp	r3, r8
 80219fc:	d9bd      	bls.n	802197a <ADS_AwaitIdle.constprop.0+0x5a>
 80219fe:	e7df      	b.n	80219c0 <ADS_AwaitIdle.constprop.0+0xa0>
 8021a00:	4543      	cmp	r3, r8
 8021a02:	bf8c      	ite	hi
 8021a04:	2300      	movhi	r3, #0
 8021a06:	2301      	movls	r3, #1
 8021a08:	2b00      	cmp	r3, #0
 8021a0a:	d0d9      	beq.n	80219c0 <ADS_AwaitIdle.constprop.0+0xa0>
 8021a0c:	e7b5      	b.n	802197a <ADS_AwaitIdle.constprop.0+0x5a>
 8021a0e:	f06f 0705 	mvn.w	r7, #5
 8021a12:	4638      	mov	r0, r7
 8021a14:	b004      	add	sp, #16
 8021a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021a1a:	bf00      	nop
 8021a1c:	000186a0 	.word	0x000186a0
 8021a20:	000f423f 	.word	0x000f423f
 8021a24:	0802c0cc 	.word	0x0802c0cc

08021a28 <ADS_IRQ_Callback>:
 8021a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021a2a:	4604      	mov	r4, r0
 8021a2c:	b083      	sub	sp, #12
 8021a2e:	f7eb fde9 	bl	800d604 <IRQ_LOCK>
 8021a32:	6823      	ldr	r3, [r4, #0]
 8021a34:	2b67      	cmp	r3, #103	@ 0x67
 8021a36:	d004      	beq.n	8021a42 <ADS_IRQ_Callback+0x1a>
 8021a38:	b003      	add	sp, #12
 8021a3a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8021a3e:	f7eb bdbf 	b.w	800d5c0 <IRQ_UNLOCK>
 8021a42:	2300      	movs	r3, #0
 8021a44:	6023      	str	r3, [r4, #0]
 8021a46:	a901      	add	r1, sp, #4
 8021a48:	4668      	mov	r0, sp
 8021a4a:	f7ec f989 	bl	800dd60 <Timer_GetCounterValue>
 8021a4e:	9901      	ldr	r1, [sp, #4]
 8021a50:	68e3      	ldr	r3, [r4, #12]
 8021a52:	9a00      	ldr	r2, [sp, #0]
 8021a54:	68a5      	ldr	r5, [r4, #8]
 8021a56:	4299      	cmp	r1, r3
 8021a58:	bf3c      	itt	cc
 8021a5a:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8021a5e:	f501 2174 	addcc.w	r1, r1, #999424	@ 0xf4000
 8021a62:	eba2 0505 	sub.w	r5, r2, r5
 8021a66:	f241 02c5 	movw	r2, #4293	@ 0x10c5
 8021a6a:	bf38      	it	cc
 8021a6c:	f501 7110 	addcc.w	r1, r1, #576	@ 0x240
 8021a70:	4295      	cmp	r5, r2
 8021a72:	eba1 0303 	sub.w	r3, r1, r3
 8021a76:	d811      	bhi.n	8021a9c <ADS_IRQ_Callback+0x74>
 8021a78:	490e      	ldr	r1, [pc, #56]	@ (8021ab4 <ADS_IRQ_Callback+0x8c>)
 8021a7a:	fb01 3505 	mla	r5, r1, r5, r3
 8021a7e:	6c27      	ldr	r7, [r4, #64]	@ 0x40
 8021a80:	2600      	movs	r6, #0
 8021a82:	6426      	str	r6, [r4, #64]	@ 0x40
 8021a84:	6066      	str	r6, [r4, #4]
 8021a86:	f7eb fd9b 	bl	800d5c0 <IRQ_UNLOCK>
 8021a8a:	b18f      	cbz	r7, 8021ab0 <ADS_IRQ_Callback+0x88>
 8021a8c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8021a8e:	4629      	mov	r1, r5
 8021a90:	4630      	mov	r0, r6
 8021a92:	463b      	mov	r3, r7
 8021a94:	b003      	add	sp, #12
 8021a96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8021a9a:	4718      	bx	r3
 8021a9c:	f241 02c6 	movw	r2, #4294	@ 0x10c6
 8021aa0:	4295      	cmp	r5, r2
 8021aa2:	d102      	bne.n	8021aaa <ADS_IRQ_Callback+0x82>
 8021aa4:	4a04      	ldr	r2, [pc, #16]	@ (8021ab8 <ADS_IRQ_Callback+0x90>)
 8021aa6:	4293      	cmp	r3, r2
 8021aa8:	d9e6      	bls.n	8021a78 <ADS_IRQ_Callback+0x50>
 8021aaa:	f04f 35ff 	mov.w	r5, #4294967295
 8021aae:	e7e6      	b.n	8021a7e <ADS_IRQ_Callback+0x56>
 8021ab0:	b003      	add	sp, #12
 8021ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021ab4:	000f4240 	.word	0x000f4240
 8021ab8:	000ec27e 	.word	0x000ec27e

08021abc <ADS_Init>:
 8021abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021abe:	2303      	movs	r3, #3
 8021ac0:	b08b      	sub	sp, #44	@ 0x2c
 8021ac2:	4604      	mov	r4, r0
 8021ac4:	6003      	str	r3, [r0, #0]
 8021ac6:	2900      	cmp	r1, #0
 8021ac8:	f000 822d 	beq.w	8021f26 <ADS_Init+0x46a>
 8021acc:	460b      	mov	r3, r1
 8021ace:	4602      	mov	r2, r0
 8021ad0:	4906      	ldr	r1, [pc, #24]	@ (8021aec <ADS_Init+0x30>)
 8021ad2:	9303      	str	r3, [sp, #12]
 8021ad4:	4618      	mov	r0, r3
 8021ad6:	f7ec f8b9 	bl	800dc4c <S2PI_SetIrqCallback>
 8021ada:	9b03      	ldr	r3, [sp, #12]
 8021adc:	4605      	mov	r5, r0
 8021ade:	b138      	cbz	r0, 8021af0 <ADS_Init+0x34>
 8021ae0:	f06f 0306 	mvn.w	r3, #6
 8021ae4:	6023      	str	r3, [r4, #0]
 8021ae6:	4628      	mov	r0, r5
 8021ae8:	b00b      	add	sp, #44	@ 0x2c
 8021aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021aec:	08021a29 	.word	0x08021a29
 8021af0:	48b1      	ldr	r0, [pc, #708]	@ (8021db8 <ADS_Init+0x2fc>)
 8021af2:	4ab2      	ldr	r2, [pc, #712]	@ (8021dbc <ADS_Init+0x300>)
 8021af4:	4fb2      	ldr	r7, [pc, #712]	@ (8021dc0 <ADS_Init+0x304>)
 8021af6:	4eb3      	ldr	r6, [pc, #716]	@ (8021dc4 <ADS_Init+0x308>)
 8021af8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8021afa:	6025      	str	r5, [r4, #0]
 8021afc:	2310      	movs	r3, #16
 8021afe:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
 8021b02:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8021b06:	e9cd 7605 	strd	r7, r6, [sp, #20]
 8021b0a:	e9cd 0207 	strd	r0, r2, [sp, #28]
 8021b0e:	f7eb fd79 	bl	800d604 <IRQ_LOCK>
 8021b12:	6823      	ldr	r3, [r4, #0]
 8021b14:	2b00      	cmp	r3, #0
 8021b16:	f040 8188 	bne.w	8021e2a <ADS_Init+0x36e>
 8021b1a:	2302      	movs	r3, #2
 8021b1c:	6023      	str	r3, [r4, #0]
 8021b1e:	f7eb fd4f 	bl	800d5c0 <IRQ_UNLOCK>
 8021b22:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8021b26:	6465      	str	r5, [r4, #68]	@ 0x44
 8021b28:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 8021b2c:	2b00      	cmp	r3, #0
 8021b2e:	f040 814f 	bne.w	8021dd0 <ADS_Init+0x314>
 8021b32:	f7eb fd67 	bl	800d604 <IRQ_LOCK>
 8021b36:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8021b38:	f7ec f820 	bl	800db7c <S2PI_TryGetMutex>
 8021b3c:	4606      	mov	r6, r0
 8021b3e:	2800      	cmp	r0, #0
 8021b40:	f000 8152 	beq.w	8021de8 <ADS_Init+0x32c>
 8021b44:	2200      	movs	r2, #0
 8021b46:	ab05      	add	r3, sp, #20
 8021b48:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8021b4c:	499e      	ldr	r1, [pc, #632]	@ (8021dc8 <ADS_Init+0x30c>)
 8021b4e:	6262      	str	r2, [r4, #36]	@ 0x24
 8021b50:	2311      	movs	r3, #17
 8021b52:	6223      	str	r3, [r4, #32]
 8021b54:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8021b56:	6123      	str	r3, [r4, #16]
 8021b58:	680b      	ldr	r3, [r1, #0]
 8021b5a:	6164      	str	r4, [r4, #20]
 8021b5c:	62a2      	str	r2, [r4, #40]	@ 0x28
 8021b5e:	2b00      	cmp	r3, #0
 8021b60:	f000 815f 	beq.w	8021e22 <ADS_Init+0x366>
 8021b64:	461a      	mov	r2, r3
 8021b66:	699b      	ldr	r3, [r3, #24]
 8021b68:	2b00      	cmp	r3, #0
 8021b6a:	d1fb      	bne.n	8021b64 <ADS_Init+0xa8>
 8021b6c:	f104 0310 	add.w	r3, r4, #16
 8021b70:	6193      	str	r3, [r2, #24]
 8021b72:	f7eb fd25 	bl	800d5c0 <IRQ_UNLOCK>
 8021b76:	4620      	mov	r0, r4
 8021b78:	f7ff fed2 	bl	8021920 <ADS_AwaitIdle.constprop.0>
 8021b7c:	2800      	cmp	r0, #0
 8021b7e:	f2c0 815a 	blt.w	8021e36 <ADS_Init+0x37a>
 8021b82:	2300      	movs	r3, #0
 8021b84:	2204      	movs	r2, #4
 8021b86:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8021b8a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8021b8e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8021b92:	f88d 2014 	strb.w	r2, [sp, #20]
 8021b96:	f7eb fd35 	bl	800d604 <IRQ_LOCK>
 8021b9a:	6826      	ldr	r6, [r4, #0]
 8021b9c:	2e00      	cmp	r6, #0
 8021b9e:	f040 8150 	bne.w	8021e42 <ADS_Init+0x386>
 8021ba2:	2302      	movs	r3, #2
 8021ba4:	6023      	str	r3, [r4, #0]
 8021ba6:	f7eb fd0b 	bl	800d5c0 <IRQ_UNLOCK>
 8021baa:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8021bae:	6466      	str	r6, [r4, #68]	@ 0x44
 8021bb0:	e9c4 660f 	strd	r6, r6, [r4, #60]	@ 0x3c
 8021bb4:	b11b      	cbz	r3, 8021bbe <ADS_Init+0x102>
 8021bb6:	2311      	movs	r3, #17
 8021bb8:	aa05      	add	r2, sp, #20
 8021bba:	e9c4 320d 	strd	r3, r2, [r4, #52]	@ 0x34
 8021bbe:	f7eb fd21 	bl	800d604 <IRQ_LOCK>
 8021bc2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8021bc4:	f7eb ffda 	bl	800db7c <S2PI_TryGetMutex>
 8021bc8:	4606      	mov	r6, r0
 8021bca:	2800      	cmp	r0, #0
 8021bcc:	f000 8183 	beq.w	8021ed6 <ADS_Init+0x41a>
 8021bd0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8021bd2:	6122      	str	r2, [r4, #16]
 8021bd4:	4a7c      	ldr	r2, [pc, #496]	@ (8021dc8 <ADS_Init+0x30c>)
 8021bd6:	6164      	str	r4, [r4, #20]
 8021bd8:	2300      	movs	r3, #0
 8021bda:	2111      	movs	r1, #17
 8021bdc:	6263      	str	r3, [r4, #36]	@ 0x24
 8021bde:	62a3      	str	r3, [r4, #40]	@ 0x28
 8021be0:	6813      	ldr	r3, [r2, #0]
 8021be2:	6221      	str	r1, [r4, #32]
 8021be4:	a905      	add	r1, sp, #20
 8021be6:	e9c4 1106 	strd	r1, r1, [r4, #24]
 8021bea:	2b00      	cmp	r3, #0
 8021bec:	f000 8190 	beq.w	8021f10 <ADS_Init+0x454>
 8021bf0:	461a      	mov	r2, r3
 8021bf2:	699b      	ldr	r3, [r3, #24]
 8021bf4:	2b00      	cmp	r3, #0
 8021bf6:	d1fb      	bne.n	8021bf0 <ADS_Init+0x134>
 8021bf8:	f104 0310 	add.w	r3, r4, #16
 8021bfc:	6193      	str	r3, [r2, #24]
 8021bfe:	f7eb fcdf 	bl	800d5c0 <IRQ_UNLOCK>
 8021c02:	4620      	mov	r0, r4
 8021c04:	f7ff fe8c 	bl	8021920 <ADS_AwaitIdle.constprop.0>
 8021c08:	2800      	cmp	r0, #0
 8021c0a:	f2c0 8114 	blt.w	8021e36 <ADS_Init+0x37a>
 8021c0e:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8021c12:	2bfe      	cmp	r3, #254	@ 0xfe
 8021c14:	bf0c      	ite	eq
 8021c16:	2201      	moveq	r2, #1
 8021c18:	2200      	movne	r2, #0
 8021c1a:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 8021c1e:	f000 8117 	beq.w	8021e50 <ADS_Init+0x394>
 8021c22:	2b01      	cmp	r3, #1
 8021c24:	f040 8151 	bne.w	8021eca <ADS_Init+0x40e>
 8021c28:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8021c2c:	2b02      	cmp	r3, #2
 8021c2e:	f040 814c 	bne.w	8021eca <ADS_Init+0x40e>
 8021c32:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8021c36:	2b03      	cmp	r3, #3
 8021c38:	f040 8147 	bne.w	8021eca <ADS_Init+0x40e>
 8021c3c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8021c40:	2b04      	cmp	r3, #4
 8021c42:	f040 8142 	bne.w	8021eca <ADS_Init+0x40e>
 8021c46:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8021c4a:	2b05      	cmp	r3, #5
 8021c4c:	f040 813d 	bne.w	8021eca <ADS_Init+0x40e>
 8021c50:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8021c54:	2b06      	cmp	r3, #6
 8021c56:	f040 8138 	bne.w	8021eca <ADS_Init+0x40e>
 8021c5a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8021c5e:	2b07      	cmp	r3, #7
 8021c60:	f040 8133 	bne.w	8021eca <ADS_Init+0x40e>
 8021c64:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8021c68:	2b08      	cmp	r3, #8
 8021c6a:	f040 812e 	bne.w	8021eca <ADS_Init+0x40e>
 8021c6e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8021c72:	2b09      	cmp	r3, #9
 8021c74:	f040 8129 	bne.w	8021eca <ADS_Init+0x40e>
 8021c78:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8021c7c:	2b0a      	cmp	r3, #10
 8021c7e:	f040 8124 	bne.w	8021eca <ADS_Init+0x40e>
 8021c82:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8021c86:	2b0b      	cmp	r3, #11
 8021c88:	f040 811f 	bne.w	8021eca <ADS_Init+0x40e>
 8021c8c:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8021c90:	2b0c      	cmp	r3, #12
 8021c92:	f040 811a 	bne.w	8021eca <ADS_Init+0x40e>
 8021c96:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8021c9a:	2b0d      	cmp	r3, #13
 8021c9c:	f040 8115 	bne.w	8021eca <ADS_Init+0x40e>
 8021ca0:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 8021ca4:	2b0e      	cmp	r3, #14
 8021ca6:	f040 8110 	bne.w	8021eca <ADS_Init+0x40e>
 8021caa:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8021cae:	2b0f      	cmp	r3, #15
 8021cb0:	f040 810b 	bne.w	8021eca <ADS_Init+0x40e>
 8021cb4:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8021cb8:	2b10      	cmp	r3, #16
 8021cba:	f040 8106 	bne.w	8021eca <ADS_Init+0x40e>
 8021cbe:	2300      	movs	r3, #0
 8021cc0:	2204      	movs	r2, #4
 8021cc2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8021cc6:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8021cca:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8021cce:	f88d 2014 	strb.w	r2, [sp, #20]
 8021cd2:	f7eb fc97 	bl	800d604 <IRQ_LOCK>
 8021cd6:	6826      	ldr	r6, [r4, #0]
 8021cd8:	2e00      	cmp	r6, #0
 8021cda:	f040 811d 	bne.w	8021f18 <ADS_Init+0x45c>
 8021cde:	2302      	movs	r3, #2
 8021ce0:	6023      	str	r3, [r4, #0]
 8021ce2:	f7eb fc6d 	bl	800d5c0 <IRQ_UNLOCK>
 8021ce6:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8021cea:	6466      	str	r6, [r4, #68]	@ 0x44
 8021cec:	e9c4 660f 	strd	r6, r6, [r4, #60]	@ 0x3c
 8021cf0:	b11b      	cbz	r3, 8021cfa <ADS_Init+0x23e>
 8021cf2:	2311      	movs	r3, #17
 8021cf4:	aa05      	add	r2, sp, #20
 8021cf6:	e9c4 320d 	strd	r3, r2, [r4, #52]	@ 0x34
 8021cfa:	f7eb fc83 	bl	800d604 <IRQ_LOCK>
 8021cfe:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8021d00:	f7eb ff3c 	bl	800db7c <S2PI_TryGetMutex>
 8021d04:	4606      	mov	r6, r0
 8021d06:	2800      	cmp	r0, #0
 8021d08:	f000 8116 	beq.w	8021f38 <ADS_Init+0x47c>
 8021d0c:	2111      	movs	r1, #17
 8021d0e:	6221      	str	r1, [r4, #32]
 8021d10:	a905      	add	r1, sp, #20
 8021d12:	e9c4 1106 	strd	r1, r1, [r4, #24]
 8021d16:	492c      	ldr	r1, [pc, #176]	@ (8021dc8 <ADS_Init+0x30c>)
 8021d18:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8021d1a:	6123      	str	r3, [r4, #16]
 8021d1c:	680b      	ldr	r3, [r1, #0]
 8021d1e:	6164      	str	r4, [r4, #20]
 8021d20:	2200      	movs	r2, #0
 8021d22:	6262      	str	r2, [r4, #36]	@ 0x24
 8021d24:	62a2      	str	r2, [r4, #40]	@ 0x28
 8021d26:	2b00      	cmp	r3, #0
 8021d28:	f000 8123 	beq.w	8021f72 <ADS_Init+0x4b6>
 8021d2c:	461a      	mov	r2, r3
 8021d2e:	699b      	ldr	r3, [r3, #24]
 8021d30:	2b00      	cmp	r3, #0
 8021d32:	d1fb      	bne.n	8021d2c <ADS_Init+0x270>
 8021d34:	f104 0310 	add.w	r3, r4, #16
 8021d38:	6193      	str	r3, [r2, #24]
 8021d3a:	f7eb fc41 	bl	800d5c0 <IRQ_UNLOCK>
 8021d3e:	4620      	mov	r0, r4
 8021d40:	f7ff fdee 	bl	8021920 <ADS_AwaitIdle.constprop.0>
 8021d44:	2800      	cmp	r0, #0
 8021d46:	db76      	blt.n	8021e36 <ADS_Init+0x37a>
 8021d48:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8021d4c:	bb73      	cbnz	r3, 8021dac <ADS_Init+0x2f0>
 8021d4e:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8021d52:	bb5b      	cbnz	r3, 8021dac <ADS_Init+0x2f0>
 8021d54:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8021d58:	bb43      	cbnz	r3, 8021dac <ADS_Init+0x2f0>
 8021d5a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8021d5e:	bb2b      	cbnz	r3, 8021dac <ADS_Init+0x2f0>
 8021d60:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8021d64:	bb13      	cbnz	r3, 8021dac <ADS_Init+0x2f0>
 8021d66:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8021d6a:	b9fb      	cbnz	r3, 8021dac <ADS_Init+0x2f0>
 8021d6c:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8021d70:	b9e3      	cbnz	r3, 8021dac <ADS_Init+0x2f0>
 8021d72:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8021d76:	b9cb      	cbnz	r3, 8021dac <ADS_Init+0x2f0>
 8021d78:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8021d7c:	b9b3      	cbnz	r3, 8021dac <ADS_Init+0x2f0>
 8021d7e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8021d82:	b99b      	cbnz	r3, 8021dac <ADS_Init+0x2f0>
 8021d84:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8021d88:	b983      	cbnz	r3, 8021dac <ADS_Init+0x2f0>
 8021d8a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8021d8e:	b96b      	cbnz	r3, 8021dac <ADS_Init+0x2f0>
 8021d90:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8021d94:	b953      	cbnz	r3, 8021dac <ADS_Init+0x2f0>
 8021d96:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 8021d9a:	b93b      	cbnz	r3, 8021dac <ADS_Init+0x2f0>
 8021d9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8021da0:	b923      	cbnz	r3, 8021dac <ADS_Init+0x2f0>
 8021da2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8021da6:	2b00      	cmp	r3, #0
 8021da8:	f43f ae9d 	beq.w	8021ae6 <ADS_Init+0x2a>
 8021dac:	4807      	ldr	r0, [pc, #28]	@ (8021dcc <ADS_Init+0x310>)
 8021dae:	f7ec f8af 	bl	800df10 <print>
 8021db2:	f06f 0564 	mvn.w	r5, #100	@ 0x64
 8021db6:	e03f      	b.n	8021e38 <ADS_Init+0x37c>
 8021db8:	0b0a0908 	.word	0x0b0a0908
 8021dbc:	0f0e0d0c 	.word	0x0f0e0d0c
 8021dc0:	03020104 	.word	0x03020104
 8021dc4:	07060504 	.word	0x07060504
 8021dc8:	24000a44 	.word	0x24000a44
 8021dcc:	0802c1b8 	.word	0x0802c1b8
 8021dd0:	2311      	movs	r3, #17
 8021dd2:	e9c4 350d 	strd	r3, r5, [r4, #52]	@ 0x34
 8021dd6:	f7eb fc15 	bl	800d604 <IRQ_LOCK>
 8021dda:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8021ddc:	f7eb fece 	bl	800db7c <S2PI_TryGetMutex>
 8021de0:	4606      	mov	r6, r0
 8021de2:	2800      	cmp	r0, #0
 8021de4:	f47f aeae 	bne.w	8021b44 <ADS_Init+0x88>
 8021de8:	f7eb fbea 	bl	800d5c0 <IRQ_UNLOCK>
 8021dec:	4b63      	ldr	r3, [pc, #396]	@ (8021f7c <ADS_Init+0x4c0>)
 8021dee:	e9cd 3400 	strd	r3, r4, [sp]
 8021df2:	4632      	mov	r2, r6
 8021df4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8021df6:	2311      	movs	r3, #17
 8021df8:	a905      	add	r1, sp, #20
 8021dfa:	f7eb fdfd 	bl	800d9f8 <S2PI_TransferFrame>
 8021dfe:	4607      	mov	r7, r0
 8021e00:	2800      	cmp	r0, #0
 8021e02:	f43f aeb8 	beq.w	8021b76 <ADS_Init+0xba>
 8021e06:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8021e0a:	4602      	mov	r2, r0
 8021e0c:	485c      	ldr	r0, [pc, #368]	@ (8021f80 <ADS_Init+0x4c4>)
 8021e0e:	f7ec f87f 	bl	800df10 <print>
 8021e12:	2302      	movs	r3, #2
 8021e14:	6426      	str	r6, [r4, #64]	@ 0x40
 8021e16:	6023      	str	r3, [r4, #0]
 8021e18:	4621      	mov	r1, r4
 8021e1a:	4638      	mov	r0, r7
 8021e1c:	f7ff fc76 	bl	802170c <ADS_SPI_Callback>
 8021e20:	e006      	b.n	8021e30 <ADS_Init+0x374>
 8021e22:	f104 0310 	add.w	r3, r4, #16
 8021e26:	600b      	str	r3, [r1, #0]
 8021e28:	e6a3      	b.n	8021b72 <ADS_Init+0xb6>
 8021e2a:	f7eb fbc9 	bl	800d5c0 <IRQ_UNLOCK>
 8021e2e:	6820      	ldr	r0, [r4, #0]
 8021e30:	2800      	cmp	r0, #0
 8021e32:	f6bf aea0 	bge.w	8021b76 <ADS_Init+0xba>
 8021e36:	4605      	mov	r5, r0
 8021e38:	4629      	mov	r1, r5
 8021e3a:	4852      	ldr	r0, [pc, #328]	@ (8021f84 <ADS_Init+0x4c8>)
 8021e3c:	f7ec f868 	bl	800df10 <print>
 8021e40:	e64e      	b.n	8021ae0 <ADS_Init+0x24>
 8021e42:	f7eb fbbd 	bl	800d5c0 <IRQ_UNLOCK>
 8021e46:	6820      	ldr	r0, [r4, #0]
 8021e48:	2800      	cmp	r0, #0
 8021e4a:	f6bf aeda 	bge.w	8021c02 <ADS_Init+0x146>
 8021e4e:	e7f2      	b.n	8021e36 <ADS_Init+0x37a>
 8021e50:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8021e54:	2bfd      	cmp	r3, #253	@ 0xfd
 8021e56:	d138      	bne.n	8021eca <ADS_Init+0x40e>
 8021e58:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8021e5c:	2bfc      	cmp	r3, #252	@ 0xfc
 8021e5e:	d134      	bne.n	8021eca <ADS_Init+0x40e>
 8021e60:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8021e64:	2bfb      	cmp	r3, #251	@ 0xfb
 8021e66:	d130      	bne.n	8021eca <ADS_Init+0x40e>
 8021e68:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8021e6c:	2bfa      	cmp	r3, #250	@ 0xfa
 8021e6e:	d12c      	bne.n	8021eca <ADS_Init+0x40e>
 8021e70:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8021e74:	2bf9      	cmp	r3, #249	@ 0xf9
 8021e76:	d128      	bne.n	8021eca <ADS_Init+0x40e>
 8021e78:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8021e7c:	2bf8      	cmp	r3, #248	@ 0xf8
 8021e7e:	d124      	bne.n	8021eca <ADS_Init+0x40e>
 8021e80:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8021e84:	2bf7      	cmp	r3, #247	@ 0xf7
 8021e86:	d120      	bne.n	8021eca <ADS_Init+0x40e>
 8021e88:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8021e8c:	2bf6      	cmp	r3, #246	@ 0xf6
 8021e8e:	d11c      	bne.n	8021eca <ADS_Init+0x40e>
 8021e90:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8021e94:	2bf5      	cmp	r3, #245	@ 0xf5
 8021e96:	d118      	bne.n	8021eca <ADS_Init+0x40e>
 8021e98:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8021e9c:	2bf4      	cmp	r3, #244	@ 0xf4
 8021e9e:	d114      	bne.n	8021eca <ADS_Init+0x40e>
 8021ea0:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8021ea4:	2bf3      	cmp	r3, #243	@ 0xf3
 8021ea6:	d110      	bne.n	8021eca <ADS_Init+0x40e>
 8021ea8:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8021eac:	2bf2      	cmp	r3, #242	@ 0xf2
 8021eae:	d10c      	bne.n	8021eca <ADS_Init+0x40e>
 8021eb0:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 8021eb4:	2bf1      	cmp	r3, #241	@ 0xf1
 8021eb6:	d108      	bne.n	8021eca <ADS_Init+0x40e>
 8021eb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8021ebc:	2bf0      	cmp	r3, #240	@ 0xf0
 8021ebe:	d104      	bne.n	8021eca <ADS_Init+0x40e>
 8021ec0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8021ec4:	2bef      	cmp	r3, #239	@ 0xef
 8021ec6:	f43f aefa 	beq.w	8021cbe <ADS_Init+0x202>
 8021eca:	482f      	ldr	r0, [pc, #188]	@ (8021f88 <ADS_Init+0x4cc>)
 8021ecc:	f7ec f820 	bl	800df10 <print>
 8021ed0:	f06f 0564 	mvn.w	r5, #100	@ 0x64
 8021ed4:	e7b0      	b.n	8021e38 <ADS_Init+0x37c>
 8021ed6:	f7eb fb73 	bl	800d5c0 <IRQ_UNLOCK>
 8021eda:	4b28      	ldr	r3, [pc, #160]	@ (8021f7c <ADS_Init+0x4c0>)
 8021edc:	e9cd 3400 	strd	r3, r4, [sp]
 8021ee0:	aa05      	add	r2, sp, #20
 8021ee2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8021ee4:	2311      	movs	r3, #17
 8021ee6:	4611      	mov	r1, r2
 8021ee8:	f7eb fd86 	bl	800d9f8 <S2PI_TransferFrame>
 8021eec:	4607      	mov	r7, r0
 8021eee:	2800      	cmp	r0, #0
 8021ef0:	f43f ae87 	beq.w	8021c02 <ADS_Init+0x146>
 8021ef4:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8021ef8:	4602      	mov	r2, r0
 8021efa:	4821      	ldr	r0, [pc, #132]	@ (8021f80 <ADS_Init+0x4c4>)
 8021efc:	f7ec f808 	bl	800df10 <print>
 8021f00:	2302      	movs	r3, #2
 8021f02:	6426      	str	r6, [r4, #64]	@ 0x40
 8021f04:	6023      	str	r3, [r4, #0]
 8021f06:	4621      	mov	r1, r4
 8021f08:	4638      	mov	r0, r7
 8021f0a:	f7ff fbff 	bl	802170c <ADS_SPI_Callback>
 8021f0e:	e79b      	b.n	8021e48 <ADS_Init+0x38c>
 8021f10:	f104 0310 	add.w	r3, r4, #16
 8021f14:	6013      	str	r3, [r2, #0]
 8021f16:	e672      	b.n	8021bfe <ADS_Init+0x142>
 8021f18:	f7eb fb52 	bl	800d5c0 <IRQ_UNLOCK>
 8021f1c:	6820      	ldr	r0, [r4, #0]
 8021f1e:	2800      	cmp	r0, #0
 8021f20:	f6bf af0d 	bge.w	8021d3e <ADS_Init+0x282>
 8021f24:	e787      	b.n	8021e36 <ADS_Init+0x37a>
 8021f26:	4819      	ldr	r0, [pc, #100]	@ (8021f8c <ADS_Init+0x4d0>)
 8021f28:	f7eb fff2 	bl	800df10 <print>
 8021f2c:	f06f 0306 	mvn.w	r3, #6
 8021f30:	6023      	str	r3, [r4, #0]
 8021f32:	f06f 0567 	mvn.w	r5, #103	@ 0x67
 8021f36:	e5d6      	b.n	8021ae6 <ADS_Init+0x2a>
 8021f38:	f7eb fb42 	bl	800d5c0 <IRQ_UNLOCK>
 8021f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8021f7c <ADS_Init+0x4c0>)
 8021f3e:	e9cd 3400 	strd	r3, r4, [sp]
 8021f42:	aa05      	add	r2, sp, #20
 8021f44:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8021f46:	2311      	movs	r3, #17
 8021f48:	4611      	mov	r1, r2
 8021f4a:	f7eb fd55 	bl	800d9f8 <S2PI_TransferFrame>
 8021f4e:	4607      	mov	r7, r0
 8021f50:	2800      	cmp	r0, #0
 8021f52:	f43f aef4 	beq.w	8021d3e <ADS_Init+0x282>
 8021f56:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8021f5a:	4602      	mov	r2, r0
 8021f5c:	4808      	ldr	r0, [pc, #32]	@ (8021f80 <ADS_Init+0x4c4>)
 8021f5e:	f7eb ffd7 	bl	800df10 <print>
 8021f62:	2302      	movs	r3, #2
 8021f64:	6426      	str	r6, [r4, #64]	@ 0x40
 8021f66:	6023      	str	r3, [r4, #0]
 8021f68:	4621      	mov	r1, r4
 8021f6a:	4638      	mov	r0, r7
 8021f6c:	f7ff fbce 	bl	802170c <ADS_SPI_Callback>
 8021f70:	e7d5      	b.n	8021f1e <ADS_Init+0x462>
 8021f72:	f104 0310 	add.w	r3, r4, #16
 8021f76:	600b      	str	r3, [r1, #0]
 8021f78:	e6df      	b.n	8021d3a <ADS_Init+0x27e>
 8021f7a:	bf00      	nop
 8021f7c:	0802170d 	.word	0x0802170d
 8021f80:	0802c018 	.word	0x0802c018
 8021f84:	0802c23c 	.word	0x0802c23c
 8021f88:	0802c13c 	.word	0x0802c13c
 8021f8c:	0802c114 	.word	0x0802c114

08021f90 <ADS_Abort>:
 8021f90:	6803      	ldr	r3, [r0, #0]
 8021f92:	3302      	adds	r3, #2
 8021f94:	d001      	beq.n	8021f9a <ADS_Abort+0xa>
 8021f96:	f7ff bbfb 	b.w	8021790 <ADS_Abort.part.0>
 8021f9a:	2000      	movs	r0, #0
 8021f9c:	4770      	bx	lr
 8021f9e:	bf00      	nop

08021fa0 <ADS_GetStatus>:
 8021fa0:	6803      	ldr	r3, [r0, #0]
 8021fa2:	b14b      	cbz	r3, 8021fb8 <ADS_GetStatus+0x18>
 8021fa4:	6803      	ldr	r3, [r0, #0]
 8021fa6:	2b67      	cmp	r3, #103	@ 0x67
 8021fa8:	d004      	beq.n	8021fb4 <ADS_GetStatus+0x14>
 8021faa:	6803      	ldr	r3, [r0, #0]
 8021fac:	2b64      	cmp	r3, #100	@ 0x64
 8021fae:	d001      	beq.n	8021fb4 <ADS_GetStatus+0x14>
 8021fb0:	6800      	ldr	r0, [r0, #0]
 8021fb2:	4770      	bx	lr
 8021fb4:	2002      	movs	r0, #2
 8021fb6:	4770      	bx	lr
 8021fb8:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8021fba:	f7eb bbfd 	b.w	800d7b8 <S2PI_GetStatus>
 8021fbe:	bf00      	nop

08021fc0 <ADS_CheckTimeout>:
 8021fc0:	b570      	push	{r4, r5, r6, lr}
 8021fc2:	4604      	mov	r4, r0
 8021fc4:	b084      	sub	sp, #16
 8021fc6:	f7eb fb1d 	bl	800d604 <IRQ_LOCK>
 8021fca:	6863      	ldr	r3, [r4, #4]
 8021fcc:	b31b      	cbz	r3, 8022016 <ADS_CheckTimeout+0x56>
 8021fce:	a903      	add	r1, sp, #12
 8021fd0:	a802      	add	r0, sp, #8
 8021fd2:	e9d4 6502 	ldrd	r6, r5, [r4, #8]
 8021fd6:	f7eb fec3 	bl	800dd60 <Timer_GetCounterValue>
 8021fda:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8021fde:	4295      	cmp	r5, r2
 8021fe0:	bf82      	ittt	hi
 8021fe2:	f502 2274 	addhi.w	r2, r2, #999424	@ 0xf4000
 8021fe6:	f502 7210 	addhi.w	r2, r2, #576	@ 0x240
 8021fea:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8021fee:	1b9b      	subs	r3, r3, r6
 8021ff0:	1b55      	subs	r5, r2, r5
 8021ff2:	f241 02c5 	movw	r2, #4293	@ 0x10c5
 8021ff6:	4293      	cmp	r3, r2
 8021ff8:	d812      	bhi.n	8022020 <ADS_CheckTimeout+0x60>
 8021ffa:	4923      	ldr	r1, [pc, #140]	@ (8022088 <ADS_CheckTimeout+0xc8>)
 8021ffc:	6862      	ldr	r2, [r4, #4]
 8021ffe:	fb01 5503 	mla	r5, r1, r3, r5
 8022002:	42aa      	cmp	r2, r5
 8022004:	d807      	bhi.n	8022016 <ADS_CheckTimeout+0x56>
 8022006:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8022008:	f7eb fe42 	bl	800dc90 <S2PI_ReadIrqPin>
 802200c:	b118      	cbz	r0, 8022016 <ADS_CheckTimeout+0x56>
 802200e:	6863      	ldr	r3, [r4, #4]
 8022010:	ebb5 0f43 	cmp.w	r5, r3, lsl #1
 8022014:	d211      	bcs.n	802203a <ADS_CheckTimeout+0x7a>
 8022016:	f7eb fad3 	bl	800d5c0 <IRQ_UNLOCK>
 802201a:	2000      	movs	r0, #0
 802201c:	b004      	add	sp, #16
 802201e:	bd70      	pop	{r4, r5, r6, pc}
 8022020:	f241 02c6 	movw	r2, #4294	@ 0x10c6
 8022024:	4293      	cmp	r3, r2
 8022026:	d027      	beq.n	8022078 <ADS_CheckTimeout+0xb8>
 8022028:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 802202a:	6863      	ldr	r3, [r4, #4]
 802202c:	f7eb fe30 	bl	800dc90 <S2PI_ReadIrqPin>
 8022030:	2800      	cmp	r0, #0
 8022032:	d0f0      	beq.n	8022016 <ADS_CheckTimeout+0x56>
 8022034:	6863      	ldr	r3, [r4, #4]
 8022036:	f04f 35ff 	mov.w	r5, #4294967295
 802203a:	2300      	movs	r3, #0
 802203c:	6862      	ldr	r2, [r4, #4]
 802203e:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 8022040:	6063      	str	r3, [r4, #4]
 8022042:	6423      	str	r3, [r4, #64]	@ 0x40
 8022044:	9201      	str	r2, [sp, #4]
 8022046:	f7eb fabb 	bl	800d5c0 <IRQ_UNLOCK>
 802204a:	9a01      	ldr	r2, [sp, #4]
 802204c:	480f      	ldr	r0, [pc, #60]	@ (802208c <ADS_CheckTimeout+0xcc>)
 802204e:	4629      	mov	r1, r5
 8022050:	f7eb ff5e 	bl	800df10 <print>
 8022054:	6823      	ldr	r3, [r4, #0]
 8022056:	3302      	adds	r3, #2
 8022058:	d004      	beq.n	8022064 <ADS_CheckTimeout+0xa4>
 802205a:	f06f 0105 	mvn.w	r1, #5
 802205e:	4620      	mov	r0, r4
 8022060:	f7ff fb96 	bl	8021790 <ADS_Abort.part.0>
 8022064:	b166      	cbz	r6, 8022080 <ADS_CheckTimeout+0xc0>
 8022066:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8022068:	4629      	mov	r1, r5
 802206a:	f06f 0005 	mvn.w	r0, #5
 802206e:	47b0      	blx	r6
 8022070:	f06f 0005 	mvn.w	r0, #5
 8022074:	b004      	add	sp, #16
 8022076:	bd70      	pop	{r4, r5, r6, pc}
 8022078:	4a05      	ldr	r2, [pc, #20]	@ (8022090 <ADS_CheckTimeout+0xd0>)
 802207a:	4295      	cmp	r5, r2
 802207c:	d9bd      	bls.n	8021ffa <ADS_CheckTimeout+0x3a>
 802207e:	e7d3      	b.n	8022028 <ADS_CheckTimeout+0x68>
 8022080:	f06f 0005 	mvn.w	r0, #5
 8022084:	e7ca      	b.n	802201c <ADS_CheckTimeout+0x5c>
 8022086:	bf00      	nop
 8022088:	000f4240 	.word	0x000f4240
 802208c:	0802c274 	.word	0x0802c274
 8022090:	000ec27e 	.word	0x000ec27e

08022094 <ADS_AwaitIdle>:
 8022094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022098:	4d49      	ldr	r5, [pc, #292]	@ (80221c0 <ADS_AwaitIdle+0x12c>)
 802209a:	4f4a      	ldr	r7, [pc, #296]	@ (80221c4 <ADS_AwaitIdle+0x130>)
 802209c:	b084      	sub	sp, #16
 802209e:	4688      	mov	r8, r1
 80220a0:	4681      	mov	r9, r0
 80220a2:	a901      	add	r1, sp, #4
 80220a4:	4668      	mov	r0, sp
 80220a6:	fba5 2508 	umull	r2, r5, r5, r8
 80220aa:	f7eb fe59 	bl	800dd60 <Timer_GetCounterValue>
 80220ae:	09ad      	lsrs	r5, r5, #6
 80220b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80220b4:	fb03 8615 	mls	r6, r3, r5, r8
 80220b8:	fb03 f606 	mul.w	r6, r3, r6
 80220bc:	f8d9 3000 	ldr.w	r3, [r9]
 80220c0:	2b00      	cmp	r3, #0
 80220c2:	d04b      	beq.n	802215c <ADS_AwaitIdle+0xc8>
 80220c4:	f8d9 3000 	ldr.w	r3, [r9]
 80220c8:	2b67      	cmp	r3, #103	@ 0x67
 80220ca:	d054      	beq.n	8022176 <ADS_AwaitIdle+0xe2>
 80220cc:	f8d9 3000 	ldr.w	r3, [r9]
 80220d0:	2b64      	cmp	r3, #100	@ 0x64
 80220d2:	d050      	beq.n	8022176 <ADS_AwaitIdle+0xe2>
 80220d4:	f8d9 a000 	ldr.w	sl, [r9]
 80220d8:	a903      	add	r1, sp, #12
 80220da:	a802      	add	r0, sp, #8
 80220dc:	f7eb fe40 	bl	800dd60 <Timer_GetCounterValue>
 80220e0:	e9dd 4200 	ldrd	r4, r2, [sp]
 80220e4:	18b3      	adds	r3, r6, r2
 80220e6:	42bb      	cmp	r3, r7
 80220e8:	e9dd 0c02 	ldrd	r0, ip, [sp, #8]
 80220ec:	eb05 0104 	add.w	r1, r5, r4
 80220f0:	d904      	bls.n	80220fc <ADS_AwaitIdle+0x68>
 80220f2:	f5a3 2374 	sub.w	r3, r3, #999424	@ 0xf4000
 80220f6:	3101      	adds	r1, #1
 80220f8:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80220fc:	428c      	cmp	r4, r1
 80220fe:	d033      	beq.n	8022168 <ADS_AwaitIdle+0xd4>
 8022100:	bf34      	ite	cc
 8022102:	f04f 0e01 	movcc.w	lr, #1
 8022106:	f04f 0e00 	movcs.w	lr, #0
 802210a:	f1be 0f00 	cmp.w	lr, #0
 802210e:	d018      	beq.n	8022142 <ADS_AwaitIdle+0xae>
 8022110:	42a0      	cmp	r0, r4
 8022112:	d042      	beq.n	802219a <ADS_AwaitIdle+0x106>
 8022114:	bf8c      	ite	hi
 8022116:	2201      	movhi	r2, #1
 8022118:	2200      	movls	r2, #0
 802211a:	bb7a      	cbnz	r2, 802217c <ADS_AwaitIdle+0xe8>
 802211c:	482a      	ldr	r0, [pc, #168]	@ (80221c8 <ADS_AwaitIdle+0x134>)
 802211e:	4641      	mov	r1, r8
 8022120:	f7eb fef6 	bl	800df10 <print>
 8022124:	f8d9 3000 	ldr.w	r3, [r9]
 8022128:	3302      	adds	r3, #2
 802212a:	d042      	beq.n	80221b2 <ADS_AwaitIdle+0x11e>
 802212c:	f06f 0105 	mvn.w	r1, #5
 8022130:	4648      	mov	r0, r9
 8022132:	f7ff fb2d 	bl	8021790 <ADS_Abort.part.0>
 8022136:	f06f 0a05 	mvn.w	sl, #5
 802213a:	4650      	mov	r0, sl
 802213c:	b004      	add	sp, #16
 802213e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022142:	42a0      	cmp	r0, r4
 8022144:	d022      	beq.n	802218c <ADS_AwaitIdle+0xf8>
 8022146:	d802      	bhi.n	802214e <ADS_AwaitIdle+0xba>
 8022148:	4288      	cmp	r0, r1
 802214a:	d023      	beq.n	8022194 <ADS_AwaitIdle+0x100>
 802214c:	d8e6      	bhi.n	802211c <ADS_AwaitIdle+0x88>
 802214e:	f1ba 0f02 	cmp.w	sl, #2
 8022152:	d1f2      	bne.n	802213a <ADS_AwaitIdle+0xa6>
 8022154:	f8d9 3000 	ldr.w	r3, [r9]
 8022158:	2b00      	cmp	r3, #0
 802215a:	d1b3      	bne.n	80220c4 <ADS_AwaitIdle+0x30>
 802215c:	f8d9 002c 	ldr.w	r0, [r9, #44]	@ 0x2c
 8022160:	f7eb fb2a 	bl	800d7b8 <S2PI_GetStatus>
 8022164:	4682      	mov	sl, r0
 8022166:	e7b7      	b.n	80220d8 <ADS_AwaitIdle+0x44>
 8022168:	429a      	cmp	r2, r3
 802216a:	bf8c      	ite	hi
 802216c:	f04f 0e00 	movhi.w	lr, #0
 8022170:	f04f 0e01 	movls.w	lr, #1
 8022174:	e7c9      	b.n	802210a <ADS_AwaitIdle+0x76>
 8022176:	f04f 0a02 	mov.w	sl, #2
 802217a:	e7ad      	b.n	80220d8 <ADS_AwaitIdle+0x44>
 802217c:	4288      	cmp	r0, r1
 802217e:	d011      	beq.n	80221a4 <ADS_AwaitIdle+0x110>
 8022180:	bf8c      	ite	hi
 8022182:	2301      	movhi	r3, #1
 8022184:	2300      	movls	r3, #0
 8022186:	2b00      	cmp	r3, #0
 8022188:	d0e1      	beq.n	802214e <ADS_AwaitIdle+0xba>
 802218a:	e7c7      	b.n	802211c <ADS_AwaitIdle+0x88>
 802218c:	4562      	cmp	r2, ip
 802218e:	d9de      	bls.n	802214e <ADS_AwaitIdle+0xba>
 8022190:	4288      	cmp	r0, r1
 8022192:	d1db      	bne.n	802214c <ADS_AwaitIdle+0xb8>
 8022194:	459c      	cmp	ip, r3
 8022196:	d2c1      	bcs.n	802211c <ADS_AwaitIdle+0x88>
 8022198:	e7d9      	b.n	802214e <ADS_AwaitIdle+0xba>
 802219a:	4562      	cmp	r2, ip
 802219c:	bf8c      	ite	hi
 802219e:	2200      	movhi	r2, #0
 80221a0:	2201      	movls	r2, #1
 80221a2:	e7ba      	b.n	802211a <ADS_AwaitIdle+0x86>
 80221a4:	459c      	cmp	ip, r3
 80221a6:	bf34      	ite	cc
 80221a8:	2300      	movcc	r3, #0
 80221aa:	2301      	movcs	r3, #1
 80221ac:	2b00      	cmp	r3, #0
 80221ae:	d0ce      	beq.n	802214e <ADS_AwaitIdle+0xba>
 80221b0:	e7b4      	b.n	802211c <ADS_AwaitIdle+0x88>
 80221b2:	f06f 0a05 	mvn.w	sl, #5
 80221b6:	4650      	mov	r0, sl
 80221b8:	b004      	add	sp, #16
 80221ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80221be:	bf00      	nop
 80221c0:	10624dd3 	.word	0x10624dd3
 80221c4:	000f423f 	.word	0x000f423f
 80221c8:	0802c0cc 	.word	0x0802c0cc

080221cc <ADS_TransferWithStart>:
 80221cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80221d0:	b085      	sub	sp, #20
 80221d2:	4604      	mov	r4, r0
 80221d4:	461d      	mov	r5, r3
 80221d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80221d8:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 80221dc:	9303      	str	r3, [sp, #12]
 80221de:	e9dd b910 	ldrd	fp, r9, [sp, #64]	@ 0x40
 80221e2:	468a      	mov	sl, r1
 80221e4:	4616      	mov	r6, r2
 80221e6:	f7eb fa0d 	bl	800d604 <IRQ_LOCK>
 80221ea:	6827      	ldr	r7, [r4, #0]
 80221ec:	2f00      	cmp	r7, #0
 80221ee:	d14b      	bne.n	8022288 <ADS_TransferWithStart+0xbc>
 80221f0:	2302      	movs	r3, #2
 80221f2:	6023      	str	r3, [r4, #0]
 80221f4:	f7eb f9e4 	bl	800d5c0 <IRQ_UNLOCK>
 80221f8:	9b03      	ldr	r3, [sp, #12]
 80221fa:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80221fc:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8022200:	f8c4 b040 	str.w	fp, [r4, #64]	@ 0x40
 8022204:	f8c4 9044 	str.w	r9, [r4, #68]	@ 0x44
 8022208:	b10b      	cbz	r3, 802220e <ADS_TransferWithStart+0x42>
 802220a:	e9c4 560d 	strd	r5, r6, [r4, #52]	@ 0x34
 802220e:	f1b8 0f00 	cmp.w	r8, #0
 8022212:	d001      	beq.n	8022218 <ADS_TransferWithStart+0x4c>
 8022214:	2364      	movs	r3, #100	@ 0x64
 8022216:	6023      	str	r3, [r4, #0]
 8022218:	f7eb f9f4 	bl	800d604 <IRQ_LOCK>
 802221c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 802221e:	f7eb fcad 	bl	800db7c <S2PI_TryGetMutex>
 8022222:	4681      	mov	r9, r0
 8022224:	b1b8      	cbz	r0, 8022256 <ADS_TransferWithStart+0x8a>
 8022226:	4926      	ldr	r1, [pc, #152]	@ (80222c0 <ADS_TransferWithStart+0xf4>)
 8022228:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 802222a:	6123      	str	r3, [r4, #16]
 802222c:	680b      	ldr	r3, [r1, #0]
 802222e:	6164      	str	r4, [r4, #20]
 8022230:	2000      	movs	r0, #0
 8022232:	e9c4 6a06 	strd	r6, sl, [r4, #24]
 8022236:	e9c4 5808 	strd	r5, r8, [r4, #32]
 802223a:	62a0      	str	r0, [r4, #40]	@ 0x28
 802223c:	b35b      	cbz	r3, 8022296 <ADS_TransferWithStart+0xca>
 802223e:	4619      	mov	r1, r3
 8022240:	699b      	ldr	r3, [r3, #24]
 8022242:	2b00      	cmp	r3, #0
 8022244:	d1fb      	bne.n	802223e <ADS_TransferWithStart+0x72>
 8022246:	3410      	adds	r4, #16
 8022248:	618c      	str	r4, [r1, #24]
 802224a:	f7eb f9b9 	bl	800d5c0 <IRQ_UNLOCK>
 802224e:	4638      	mov	r0, r7
 8022250:	b005      	add	sp, #20
 8022252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022256:	f7eb f9b3 	bl	800d5c0 <IRQ_UNLOCK>
 802225a:	491a      	ldr	r1, [pc, #104]	@ (80222c4 <ADS_TransferWithStart+0xf8>)
 802225c:	9100      	str	r1, [sp, #0]
 802225e:	9401      	str	r4, [sp, #4]
 8022260:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8022262:	462b      	mov	r3, r5
 8022264:	4632      	mov	r2, r6
 8022266:	4651      	mov	r1, sl
 8022268:	f7eb fbc6 	bl	800d9f8 <S2PI_TransferFrame>
 802226c:	4607      	mov	r7, r0
 802226e:	b9a8      	cbnz	r0, 802229c <ADS_TransferWithStart+0xd0>
 8022270:	f1b8 0f00 	cmp.w	r8, #0
 8022274:	d0eb      	beq.n	802224e <ADS_TransferWithStart+0x82>
 8022276:	f104 010c 	add.w	r1, r4, #12
 802227a:	f104 0008 	add.w	r0, r4, #8
 802227e:	f7eb fd6f 	bl	800dd60 <Timer_GetCounterValue>
 8022282:	f8c4 8004 	str.w	r8, [r4, #4]
 8022286:	e7e2      	b.n	802224e <ADS_TransferWithStart+0x82>
 8022288:	f7eb f99a 	bl	800d5c0 <IRQ_UNLOCK>
 802228c:	6827      	ldr	r7, [r4, #0]
 802228e:	4638      	mov	r0, r7
 8022290:	b005      	add	sp, #20
 8022292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022296:	3410      	adds	r4, #16
 8022298:	600c      	str	r4, [r1, #0]
 802229a:	e7d6      	b.n	802224a <ADS_TransferWithStart+0x7e>
 802229c:	f89a 1000 	ldrb.w	r1, [sl]
 80222a0:	4602      	mov	r2, r0
 80222a2:	4809      	ldr	r0, [pc, #36]	@ (80222c8 <ADS_TransferWithStart+0xfc>)
 80222a4:	f7eb fe34 	bl	800df10 <print>
 80222a8:	2302      	movs	r3, #2
 80222aa:	4621      	mov	r1, r4
 80222ac:	4638      	mov	r0, r7
 80222ae:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
 80222b2:	6023      	str	r3, [r4, #0]
 80222b4:	b005      	add	sp, #20
 80222b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80222ba:	f7ff ba27 	b.w	802170c <ADS_SPI_Callback>
 80222be:	bf00      	nop
 80222c0:	24000a44 	.word	0x24000a44
 80222c4:	0802170d 	.word	0x0802170d
 80222c8:	0802c018 	.word	0x0802c018

080222cc <ADS_Transfer>:
 80222cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80222d0:	4604      	mov	r4, r0
 80222d2:	b082      	sub	sp, #8
 80222d4:	4689      	mov	r9, r1
 80222d6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80222d8:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 80222dc:	4690      	mov	r8, r2
 80222de:	461f      	mov	r7, r3
 80222e0:	f7eb f990 	bl	800d604 <IRQ_LOCK>
 80222e4:	6825      	ldr	r5, [r4, #0]
 80222e6:	2d00      	cmp	r5, #0
 80222e8:	d14a      	bne.n	8022380 <ADS_Transfer+0xb4>
 80222ea:	2302      	movs	r3, #2
 80222ec:	6023      	str	r3, [r4, #0]
 80222ee:	f7eb f967 	bl	800d5c0 <IRQ_UNLOCK>
 80222f2:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80222f6:	63e6      	str	r6, [r4, #60]	@ 0x3c
 80222f8:	e9c4 5a10 	strd	r5, sl, [r4, #64]	@ 0x40
 80222fc:	b10b      	cbz	r3, 8022302 <ADS_Transfer+0x36>
 80222fe:	e9c4 780d 	strd	r7, r8, [r4, #52]	@ 0x34
 8022302:	f7eb f97f 	bl	800d604 <IRQ_LOCK>
 8022306:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8022308:	f7eb fc38 	bl	800db7c <S2PI_TryGetMutex>
 802230c:	4606      	mov	r6, r0
 802230e:	b1c8      	cbz	r0, 8022344 <ADS_Transfer+0x78>
 8022310:	4920      	ldr	r1, [pc, #128]	@ (8022394 <ADS_Transfer+0xc8>)
 8022312:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8022314:	6123      	str	r3, [r4, #16]
 8022316:	680b      	ldr	r3, [r1, #0]
 8022318:	f8c4 8018 	str.w	r8, [r4, #24]
 802231c:	2200      	movs	r2, #0
 802231e:	e9c4 9707 	strd	r9, r7, [r4, #28]
 8022322:	6262      	str	r2, [r4, #36]	@ 0x24
 8022324:	6164      	str	r4, [r4, #20]
 8022326:	62a2      	str	r2, [r4, #40]	@ 0x28
 8022328:	2b00      	cmp	r3, #0
 802232a:	d030      	beq.n	802238e <ADS_Transfer+0xc2>
 802232c:	461a      	mov	r2, r3
 802232e:	699b      	ldr	r3, [r3, #24]
 8022330:	2b00      	cmp	r3, #0
 8022332:	d1fb      	bne.n	802232c <ADS_Transfer+0x60>
 8022334:	3410      	adds	r4, #16
 8022336:	6194      	str	r4, [r2, #24]
 8022338:	f7eb f942 	bl	800d5c0 <IRQ_UNLOCK>
 802233c:	4628      	mov	r0, r5
 802233e:	b002      	add	sp, #8
 8022340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022344:	f7eb f93c 	bl	800d5c0 <IRQ_UNLOCK>
 8022348:	4913      	ldr	r1, [pc, #76]	@ (8022398 <ADS_Transfer+0xcc>)
 802234a:	9100      	str	r1, [sp, #0]
 802234c:	9401      	str	r4, [sp, #4]
 802234e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8022350:	463b      	mov	r3, r7
 8022352:	4642      	mov	r2, r8
 8022354:	4649      	mov	r1, r9
 8022356:	f7eb fb4f 	bl	800d9f8 <S2PI_TransferFrame>
 802235a:	4605      	mov	r5, r0
 802235c:	2800      	cmp	r0, #0
 802235e:	d0ed      	beq.n	802233c <ADS_Transfer+0x70>
 8022360:	f899 1000 	ldrb.w	r1, [r9]
 8022364:	4602      	mov	r2, r0
 8022366:	480d      	ldr	r0, [pc, #52]	@ (802239c <ADS_Transfer+0xd0>)
 8022368:	f7eb fdd2 	bl	800df10 <print>
 802236c:	2302      	movs	r3, #2
 802236e:	4621      	mov	r1, r4
 8022370:	4628      	mov	r0, r5
 8022372:	6426      	str	r6, [r4, #64]	@ 0x40
 8022374:	6023      	str	r3, [r4, #0]
 8022376:	b002      	add	sp, #8
 8022378:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802237c:	f7ff b9c6 	b.w	802170c <ADS_SPI_Callback>
 8022380:	f7eb f91e 	bl	800d5c0 <IRQ_UNLOCK>
 8022384:	6825      	ldr	r5, [r4, #0]
 8022386:	4628      	mov	r0, r5
 8022388:	b002      	add	sp, #8
 802238a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802238e:	3410      	adds	r4, #16
 8022390:	600c      	str	r4, [r1, #0]
 8022392:	e7d1      	b.n	8022338 <ADS_Transfer+0x6c>
 8022394:	24000a44 	.word	0x24000a44
 8022398:	0802170d 	.word	0x0802170d
 802239c:	0802c018 	.word	0x0802c018

080223a0 <ADS_Start>:
 80223a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80223a4:	4604      	mov	r4, r0
 80223a6:	b082      	sub	sp, #8
 80223a8:	460e      	mov	r6, r1
 80223aa:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80223ae:	4617      	mov	r7, r2
 80223b0:	4698      	mov	r8, r3
 80223b2:	f7eb f927 	bl	800d604 <IRQ_LOCK>
 80223b6:	6825      	ldr	r5, [r4, #0]
 80223b8:	2d00      	cmp	r5, #0
 80223ba:	d14b      	bne.n	8022454 <ADS_Start+0xb4>
 80223bc:	f04f 0a02 	mov.w	sl, #2
 80223c0:	f8c4 a000 	str.w	sl, [r4]
 80223c4:	f7eb f8fc 	bl	800d5c0 <IRQ_UNLOCK>
 80223c8:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80223cc:	f8c4 9044 	str.w	r9, [r4, #68]	@ 0x44
 80223d0:	e9c4 780f 	strd	r7, r8, [r4, #60]	@ 0x3c
 80223d4:	b10b      	cbz	r3, 80223da <ADS_Start+0x3a>
 80223d6:	e9c4 a50d 	strd	sl, r5, [r4, #52]	@ 0x34
 80223da:	b10e      	cbz	r6, 80223e0 <ADS_Start+0x40>
 80223dc:	2364      	movs	r3, #100	@ 0x64
 80223de:	6023      	str	r3, [r4, #0]
 80223e0:	f7eb f910 	bl	800d604 <IRQ_LOCK>
 80223e4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80223e6:	f7eb fbc9 	bl	800db7c <S2PI_TryGetMutex>
 80223ea:	4607      	mov	r7, r0
 80223ec:	b1c8      	cbz	r0, 8022422 <ADS_Start+0x82>
 80223ee:	4a26      	ldr	r2, [pc, #152]	@ (8022488 <ADS_Start+0xe8>)
 80223f0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80223f2:	6121      	str	r1, [r4, #16]
 80223f4:	2300      	movs	r3, #0
 80223f6:	e9c4 3206 	strd	r3, r2, [r4, #24]
 80223fa:	2202      	movs	r2, #2
 80223fc:	6222      	str	r2, [r4, #32]
 80223fe:	4a23      	ldr	r2, [pc, #140]	@ (802248c <ADS_Start+0xec>)
 8022400:	62a3      	str	r3, [r4, #40]	@ 0x28
 8022402:	6813      	ldr	r3, [r2, #0]
 8022404:	6266      	str	r6, [r4, #36]	@ 0x24
 8022406:	6164      	str	r4, [r4, #20]
 8022408:	b35b      	cbz	r3, 8022462 <ADS_Start+0xc2>
 802240a:	461a      	mov	r2, r3
 802240c:	699b      	ldr	r3, [r3, #24]
 802240e:	2b00      	cmp	r3, #0
 8022410:	d1fb      	bne.n	802240a <ADS_Start+0x6a>
 8022412:	3410      	adds	r4, #16
 8022414:	6194      	str	r4, [r2, #24]
 8022416:	f7eb f8d3 	bl	800d5c0 <IRQ_UNLOCK>
 802241a:	4628      	mov	r0, r5
 802241c:	b002      	add	sp, #8
 802241e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022422:	f7eb f8cd 	bl	800d5c0 <IRQ_UNLOCK>
 8022426:	4b1a      	ldr	r3, [pc, #104]	@ (8022490 <ADS_Start+0xf0>)
 8022428:	f8df 805c 	ldr.w	r8, [pc, #92]	@ 8022488 <ADS_Start+0xe8>
 802242c:	e9cd 3400 	strd	r3, r4, [sp]
 8022430:	463a      	mov	r2, r7
 8022432:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8022434:	2302      	movs	r3, #2
 8022436:	4641      	mov	r1, r8
 8022438:	f7eb fade 	bl	800d9f8 <S2PI_TransferFrame>
 802243c:	4605      	mov	r5, r0
 802243e:	b998      	cbnz	r0, 8022468 <ADS_Start+0xc8>
 8022440:	2e00      	cmp	r6, #0
 8022442:	d0ea      	beq.n	802241a <ADS_Start+0x7a>
 8022444:	f104 010c 	add.w	r1, r4, #12
 8022448:	f104 0008 	add.w	r0, r4, #8
 802244c:	f7eb fc88 	bl	800dd60 <Timer_GetCounterValue>
 8022450:	6066      	str	r6, [r4, #4]
 8022452:	e7e2      	b.n	802241a <ADS_Start+0x7a>
 8022454:	f7eb f8b4 	bl	800d5c0 <IRQ_UNLOCK>
 8022458:	6825      	ldr	r5, [r4, #0]
 802245a:	4628      	mov	r0, r5
 802245c:	b002      	add	sp, #8
 802245e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022462:	3410      	adds	r4, #16
 8022464:	6014      	str	r4, [r2, #0]
 8022466:	e7d6      	b.n	8022416 <ADS_Start+0x76>
 8022468:	f898 1000 	ldrb.w	r1, [r8]
 802246c:	4602      	mov	r2, r0
 802246e:	4809      	ldr	r0, [pc, #36]	@ (8022494 <ADS_Start+0xf4>)
 8022470:	f7eb fd4e 	bl	800df10 <print>
 8022474:	2302      	movs	r3, #2
 8022476:	4621      	mov	r1, r4
 8022478:	4628      	mov	r0, r5
 802247a:	6427      	str	r7, [r4, #64]	@ 0x40
 802247c:	6023      	str	r3, [r4, #0]
 802247e:	b002      	add	sp, #8
 8022480:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022484:	f7ff b942 	b.w	802170c <ADS_SPI_Callback>
 8022488:	2400006c 	.word	0x2400006c
 802248c:	24000a44 	.word	0x24000a44
 8022490:	0802170d 	.word	0x0802170d
 8022494:	0802c018 	.word	0x0802c018

08022498 <ADS_ReadData>:
 8022498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802249c:	4698      	mov	r8, r3
 802249e:	b083      	sub	sp, #12
 80224a0:	1e53      	subs	r3, r2, #1
 80224a2:	2b83      	cmp	r3, #131	@ 0x83
 80224a4:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80224a8:	d860      	bhi.n	802256c <ADS_ReadData+0xd4>
 80224aa:	4604      	mov	r4, r0
 80224ac:	2324      	movs	r3, #36	@ 0x24
 80224ae:	700b      	strb	r3, [r1, #0]
 80224b0:	4615      	mov	r5, r2
 80224b2:	460e      	mov	r6, r1
 80224b4:	f7eb f8a6 	bl	800d604 <IRQ_LOCK>
 80224b8:	6827      	ldr	r7, [r4, #0]
 80224ba:	2f00      	cmp	r7, #0
 80224bc:	d14c      	bne.n	8022558 <ADS_ReadData+0xc0>
 80224be:	2302      	movs	r3, #2
 80224c0:	6023      	str	r3, [r4, #0]
 80224c2:	f7eb f87d 	bl	800d5c0 <IRQ_UNLOCK>
 80224c6:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80224ca:	f8c4 9044 	str.w	r9, [r4, #68]	@ 0x44
 80224ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80224d2:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 80224d6:	3501      	adds	r5, #1
 80224d8:	b10b      	cbz	r3, 80224de <ADS_ReadData+0x46>
 80224da:	e9c4 560d 	strd	r5, r6, [r4, #52]	@ 0x34
 80224de:	f7eb f891 	bl	800d604 <IRQ_LOCK>
 80224e2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80224e4:	f7eb fb4a 	bl	800db7c <S2PI_TryGetMutex>
 80224e8:	4680      	mov	r8, r0
 80224ea:	b1b8      	cbz	r0, 802251c <ADS_ReadData+0x84>
 80224ec:	4921      	ldr	r1, [pc, #132]	@ (8022574 <ADS_ReadData+0xdc>)
 80224ee:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80224f0:	6123      	str	r3, [r4, #16]
 80224f2:	680b      	ldr	r3, [r1, #0]
 80224f4:	6225      	str	r5, [r4, #32]
 80224f6:	2200      	movs	r2, #0
 80224f8:	e9c4 6606 	strd	r6, r6, [r4, #24]
 80224fc:	6262      	str	r2, [r4, #36]	@ 0x24
 80224fe:	6164      	str	r4, [r4, #20]
 8022500:	62a2      	str	r2, [r4, #40]	@ 0x28
 8022502:	b383      	cbz	r3, 8022566 <ADS_ReadData+0xce>
 8022504:	461a      	mov	r2, r3
 8022506:	699b      	ldr	r3, [r3, #24]
 8022508:	2b00      	cmp	r3, #0
 802250a:	d1fb      	bne.n	8022504 <ADS_ReadData+0x6c>
 802250c:	3410      	adds	r4, #16
 802250e:	6194      	str	r4, [r2, #24]
 8022510:	f7eb f856 	bl	800d5c0 <IRQ_UNLOCK>
 8022514:	4638      	mov	r0, r7
 8022516:	b003      	add	sp, #12
 8022518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802251c:	f7eb f850 	bl	800d5c0 <IRQ_UNLOCK>
 8022520:	4b15      	ldr	r3, [pc, #84]	@ (8022578 <ADS_ReadData+0xe0>)
 8022522:	e9cd 3400 	strd	r3, r4, [sp]
 8022526:	4632      	mov	r2, r6
 8022528:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 802252a:	462b      	mov	r3, r5
 802252c:	4631      	mov	r1, r6
 802252e:	f7eb fa63 	bl	800d9f8 <S2PI_TransferFrame>
 8022532:	4607      	mov	r7, r0
 8022534:	2800      	cmp	r0, #0
 8022536:	d0ed      	beq.n	8022514 <ADS_ReadData+0x7c>
 8022538:	7831      	ldrb	r1, [r6, #0]
 802253a:	4602      	mov	r2, r0
 802253c:	480f      	ldr	r0, [pc, #60]	@ (802257c <ADS_ReadData+0xe4>)
 802253e:	f7eb fce7 	bl	800df10 <print>
 8022542:	2302      	movs	r3, #2
 8022544:	4621      	mov	r1, r4
 8022546:	4638      	mov	r0, r7
 8022548:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
 802254c:	6023      	str	r3, [r4, #0]
 802254e:	b003      	add	sp, #12
 8022550:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022554:	f7ff b8da 	b.w	802170c <ADS_SPI_Callback>
 8022558:	f7eb f832 	bl	800d5c0 <IRQ_UNLOCK>
 802255c:	6827      	ldr	r7, [r4, #0]
 802255e:	4638      	mov	r0, r7
 8022560:	b003      	add	sp, #12
 8022562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022566:	3410      	adds	r4, #16
 8022568:	600c      	str	r4, [r1, #0]
 802256a:	e7d1      	b.n	8022510 <ADS_ReadData+0x78>
 802256c:	f06f 0704 	mvn.w	r7, #4
 8022570:	e7d0      	b.n	8022514 <ADS_ReadData+0x7c>
 8022572:	bf00      	nop
 8022574:	24000a44 	.word	0x24000a44
 8022578:	0802170d 	.word	0x0802170d
 802257c:	0802c018 	.word	0x0802c018

08022580 <ADS_ReadEEPROM>:
 8022580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022584:	4604      	mov	r4, r0
 8022586:	b087      	sub	sp, #28
 8022588:	4668      	mov	r0, sp
 802258a:	4688      	mov	r8, r1
 802258c:	a901      	add	r1, sp, #4
 802258e:	f7eb fbe7 	bl	800dd60 <Timer_GetCounterValue>
 8022592:	f7eb f837 	bl	800d604 <IRQ_LOCK>
 8022596:	6823      	ldr	r3, [r4, #0]
 8022598:	f8df 9150 	ldr.w	r9, [pc, #336]	@ 80226ec <ADS_ReadEEPROM+0x16c>
 802259c:	4f52      	ldr	r7, [pc, #328]	@ (80226e8 <ADS_ReadEEPROM+0x168>)
 802259e:	f241 06c5 	movw	r6, #4293	@ 0x10c5
 80225a2:	b35b      	cbz	r3, 80225fc <ADS_ReadEEPROM+0x7c>
 80225a4:	6825      	ldr	r5, [r4, #0]
 80225a6:	f7eb f80b 	bl	800d5c0 <IRQ_UNLOCK>
 80225aa:	a903      	add	r1, sp, #12
 80225ac:	a802      	add	r0, sp, #8
 80225ae:	f7eb fbd7 	bl	800dd60 <Timer_GetCounterValue>
 80225b2:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 80225b6:	9903      	ldr	r1, [sp, #12]
 80225b8:	9b00      	ldr	r3, [sp, #0]
 80225ba:	428a      	cmp	r2, r1
 80225bc:	bf82      	ittt	hi
 80225be:	f501 2174 	addhi.w	r1, r1, #999424	@ 0xf4000
 80225c2:	f100 30ff 	addhi.w	r0, r0, #4294967295
 80225c6:	f501 7110 	addhi.w	r1, r1, #576	@ 0x240
 80225ca:	1ac3      	subs	r3, r0, r3
 80225cc:	1a8a      	subs	r2, r1, r2
 80225ce:	42b3      	cmp	r3, r6
 80225d0:	f242 710f 	movw	r1, #9999	@ 0x270f
 80225d4:	f241 0cc6 	movw	ip, #4294	@ 0x10c6
 80225d8:	fb07 2003 	mla	r0, r7, r3, r2
 80225dc:	d907      	bls.n	80225ee <ADS_ReadEEPROM+0x6e>
 80225de:	4563      	cmp	r3, ip
 80225e0:	d003      	beq.n	80225ea <ADS_ReadEEPROM+0x6a>
 80225e2:	4628      	mov	r0, r5
 80225e4:	b007      	add	sp, #28
 80225e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80225ea:	454a      	cmp	r2, r9
 80225ec:	d8f9      	bhi.n	80225e2 <ADS_ReadEEPROM+0x62>
 80225ee:	4288      	cmp	r0, r1
 80225f0:	d8f7      	bhi.n	80225e2 <ADS_ReadEEPROM+0x62>
 80225f2:	f7eb f807 	bl	800d604 <IRQ_LOCK>
 80225f6:	6823      	ldr	r3, [r4, #0]
 80225f8:	2b00      	cmp	r3, #0
 80225fa:	d1d3      	bne.n	80225a4 <ADS_ReadEEPROM+0x24>
 80225fc:	2302      	movs	r3, #2
 80225fe:	6023      	str	r3, [r4, #0]
 8022600:	f7ea ffde 	bl	800d5c0 <IRQ_UNLOCK>
 8022604:	a901      	add	r1, sp, #4
 8022606:	4668      	mov	r0, sp
 8022608:	f7eb fbaa 	bl	800dd60 <Timer_GetCounterValue>
 802260c:	4f37      	ldr	r7, [pc, #220]	@ (80226ec <ADS_ReadEEPROM+0x16c>)
 802260e:	4d36      	ldr	r5, [pc, #216]	@ (80226e8 <ADS_ReadEEPROM+0x168>)
 8022610:	f241 06c5 	movw	r6, #4293	@ 0x10c5
 8022614:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8022616:	f7eb fab1 	bl	800db7c <S2PI_TryGetMutex>
 802261a:	4603      	mov	r3, r0
 802261c:	a903      	add	r1, sp, #12
 802261e:	a802      	add	r0, sp, #8
 8022620:	b313      	cbz	r3, 8022668 <ADS_ReadEEPROM+0xe8>
 8022622:	f7eb fb9d 	bl	800dd60 <Timer_GetCounterValue>
 8022626:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 802262a:	9903      	ldr	r1, [sp, #12]
 802262c:	9b00      	ldr	r3, [sp, #0]
 802262e:	4291      	cmp	r1, r2
 8022630:	bf3e      	ittt	cc
 8022632:	f501 2174 	addcc.w	r1, r1, #999424	@ 0xf4000
 8022636:	f100 30ff 	addcc.w	r0, r0, #4294967295
 802263a:	f501 7110 	addcc.w	r1, r1, #576	@ 0x240
 802263e:	1ac3      	subs	r3, r0, r3
 8022640:	1a8a      	subs	r2, r1, r2
 8022642:	42b3      	cmp	r3, r6
 8022644:	f242 710f 	movw	r1, #9999	@ 0x270f
 8022648:	f241 0cc6 	movw	ip, #4294	@ 0x10c6
 802264c:	fb05 2003 	mla	r0, r5, r3, r2
 8022650:	d903      	bls.n	802265a <ADS_ReadEEPROM+0xda>
 8022652:	4563      	cmp	r3, ip
 8022654:	d103      	bne.n	802265e <ADS_ReadEEPROM+0xde>
 8022656:	42ba      	cmp	r2, r7
 8022658:	d801      	bhi.n	802265e <ADS_ReadEEPROM+0xde>
 802265a:	4288      	cmp	r0, r1
 802265c:	d9da      	bls.n	8022614 <ADS_ReadEEPROM+0x94>
 802265e:	2502      	movs	r5, #2
 8022660:	4628      	mov	r0, r5
 8022662:	b007      	add	sp, #28
 8022664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022668:	e9cd 3302 	strd	r3, r3, [sp, #8]
 802266c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8022670:	af02      	add	r7, sp, #8
 8022672:	461e      	mov	r6, r3
 8022674:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8022676:	463a      	mov	r2, r7
 8022678:	b2f1      	uxtb	r1, r6
 802267a:	f7ed fd11 	bl	80100a0 <EEPROM_Read>
 802267e:	4605      	mov	r5, r0
 8022680:	bb18      	cbnz	r0, 80226ca <ADS_ReadEEPROM+0x14a>
 8022682:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8022686:	3601      	adds	r6, #1
 8022688:	b113      	cbz	r3, 8022690 <ADS_ReadEEPROM+0x110>
 802268a:	783b      	ldrb	r3, [r7, #0]
 802268c:	43db      	mvns	r3, r3
 802268e:	703b      	strb	r3, [r7, #0]
 8022690:	2e10      	cmp	r6, #16
 8022692:	f107 0701 	add.w	r7, r7, #1
 8022696:	d1ed      	bne.n	8022674 <ADS_ReadEEPROM+0xf4>
 8022698:	4641      	mov	r1, r8
 802269a:	a802      	add	r0, sp, #8
 802269c:	f7ed f8d6 	bl	800f84c <hamming_decode>
 80226a0:	2800      	cmp	r0, #0
 80226a2:	bf18      	it	ne
 80226a4:	256d      	movne	r5, #109	@ 0x6d
 80226a6:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80226aa:	2200      	movs	r2, #0
 80226ac:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80226b0:	f888 300f 	strb.w	r3, [r8, #15]
 80226b4:	6022      	str	r2, [r4, #0]
 80226b6:	f7ea ffa5 	bl	800d604 <IRQ_LOCK>
 80226ba:	4b0d      	ldr	r3, [pc, #52]	@ (80226f0 <ADS_ReadEEPROM+0x170>)
 80226bc:	681b      	ldr	r3, [r3, #0]
 80226be:	b173      	cbz	r3, 80226de <ADS_ReadEEPROM+0x15e>
 80226c0:	f7fe ffea 	bl	8021698 <ADS_TriggerNextTransfer.part.0>
 80226c4:	f7ea ff7c 	bl	800d5c0 <IRQ_UNLOCK>
 80226c8:	e78b      	b.n	80225e2 <ADS_ReadEEPROM+0x62>
 80226ca:	4631      	mov	r1, r6
 80226cc:	4602      	mov	r2, r0
 80226ce:	4809      	ldr	r0, [pc, #36]	@ (80226f4 <ADS_ReadEEPROM+0x174>)
 80226d0:	f7eb fc1e 	bl	800df10 <print>
 80226d4:	4641      	mov	r1, r8
 80226d6:	a802      	add	r0, sp, #8
 80226d8:	f7ed f8b8 	bl	800f84c <hamming_decode>
 80226dc:	e7e3      	b.n	80226a6 <ADS_ReadEEPROM+0x126>
 80226de:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80226e0:	f7eb fa6e 	bl	800dbc0 <S2PI_ReleaseMutex>
 80226e4:	e7ee      	b.n	80226c4 <ADS_ReadEEPROM+0x144>
 80226e6:	bf00      	nop
 80226e8:	000f4240 	.word	0x000f4240
 80226ec:	000ec27e 	.word	0x000ec27e
 80226f0:	24000a44 	.word	0x24000a44
 80226f4:	0802c2b8 	.word	0x0802c2b8

080226f8 <fp_exp24>:
 80226f8:	4b60      	ldr	r3, [pc, #384]	@ (802287c <fp_exp24+0x184>)
 80226fa:	4403      	add	r3, r0
 80226fc:	2b00      	cmp	r3, #0
 80226fe:	4602      	mov	r2, r0
 8022700:	f2c0 80b6 	blt.w	8022870 <fp_exp24+0x178>
 8022704:	2000      	movs	r0, #0
 8022706:	461a      	mov	r2, r3
 8022708:	4601      	mov	r1, r0
 802270a:	4b5d      	ldr	r3, [pc, #372]	@ (8022880 <fp_exp24+0x188>)
 802270c:	4413      	add	r3, r2
 802270e:	2b00      	cmp	r3, #0
 8022710:	bfb8      	it	lt
 8022712:	4613      	movlt	r3, r2
 8022714:	4a5b      	ldr	r2, [pc, #364]	@ (8022884 <fp_exp24+0x18c>)
 8022716:	441a      	add	r2, r3
 8022718:	bfb8      	it	lt
 802271a:	4608      	movlt	r0, r1
 802271c:	2a00      	cmp	r2, #0
 802271e:	bfa8      	it	ge
 8022720:	4613      	movge	r3, r2
 8022722:	4a59      	ldr	r2, [pc, #356]	@ (8022888 <fp_exp24+0x190>)
 8022724:	441a      	add	r2, r3
 8022726:	bfa8      	it	ge
 8022728:	0080      	lslge	r0, r0, #2
 802272a:	2a00      	cmp	r2, #0
 802272c:	bfa8      	it	ge
 802272e:	4613      	movge	r3, r2
 8022730:	4a56      	ldr	r2, [pc, #344]	@ (802288c <fp_exp24+0x194>)
 8022732:	441a      	add	r2, r3
 8022734:	bfa8      	it	ge
 8022736:	0040      	lslge	r0, r0, #1
 8022738:	2a00      	cmp	r2, #0
 802273a:	bfa8      	it	ge
 802273c:	4613      	movge	r3, r2
 802273e:	4a54      	ldr	r2, [pc, #336]	@ (8022890 <fp_exp24+0x198>)
 8022740:	441a      	add	r2, r3
 8022742:	bfa8      	it	ge
 8022744:	eb00 0050 	addge.w	r0, r0, r0, lsr #1
 8022748:	2a00      	cmp	r2, #0
 802274a:	bfa8      	it	ge
 802274c:	4613      	movge	r3, r2
 802274e:	f5a3 12f1 	sub.w	r2, r3, #1974272	@ 0x1e2000
 8022752:	f2a2 7207 	subw	r2, r2, #1799	@ 0x707
 8022756:	bfa8      	it	ge
 8022758:	eb00 0090 	addge.w	r0, r0, r0, lsr #2
 802275c:	2a00      	cmp	r2, #0
 802275e:	bfa8      	it	ge
 8022760:	4613      	movge	r3, r2
 8022762:	f5a3 2278 	sub.w	r2, r3, #1015808	@ 0xf8000
 8022766:	f5a2 62a3 	sub.w	r2, r2, #1304	@ 0x518
 802276a:	bfa8      	it	ge
 802276c:	eb00 00d0 	addge.w	r0, r0, r0, lsr #3
 8022770:	2a00      	cmp	r2, #0
 8022772:	bfa8      	it	ge
 8022774:	4613      	movge	r3, r2
 8022776:	f5a3 22fc 	sub.w	r2, r3, #516096	@ 0x7e000
 802277a:	f1a2 02a7 	sub.w	r2, r2, #167	@ 0xa7
 802277e:	bfa8      	it	ge
 8022780:	eb00 1010 	addge.w	r0, r0, r0, lsr #4
 8022784:	2a00      	cmp	r2, #0
 8022786:	bfa8      	it	ge
 8022788:	4613      	movge	r3, r2
 802278a:	f5a3 327e 	sub.w	r2, r3, #260096	@ 0x3f800
 802278e:	f1a2 0215 	sub.w	r2, r2, #21
 8022792:	bfa8      	it	ge
 8022794:	eb00 1050 	addge.w	r0, r0, r0, lsr #5
 8022798:	2a00      	cmp	r2, #0
 802279a:	bfa8      	it	ge
 802279c:	4613      	movge	r3, r2
 802279e:	f5a3 32ff 	sub.w	r2, r3, #130560	@ 0x1fe00
 80227a2:	f1a2 0203 	sub.w	r2, r2, #3
 80227a6:	bfa8      	it	ge
 80227a8:	eb00 1090 	addge.w	r0, r0, r0, lsr #6
 80227ac:	2a00      	cmp	r2, #0
 80227ae:	bfa8      	it	ge
 80227b0:	4613      	movge	r3, r2
 80227b2:	f5a3 427f 	sub.w	r2, r3, #65280	@ 0xff00
 80227b6:	f1a2 0280 	sub.w	r2, r2, #128	@ 0x80
 80227ba:	bfa8      	it	ge
 80227bc:	eb00 10d0 	addge.w	r0, r0, r0, lsr #7
 80227c0:	2a00      	cmp	r2, #0
 80227c2:	bfa8      	it	ge
 80227c4:	4613      	movge	r3, r2
 80227c6:	f5a3 42ff 	sub.w	r2, r3, #32640	@ 0x7f80
 80227ca:	f1a2 0260 	sub.w	r2, r2, #96	@ 0x60
 80227ce:	bfa8      	it	ge
 80227d0:	eb00 2010 	addge.w	r0, r0, r0, lsr #8
 80227d4:	2a00      	cmp	r2, #0
 80227d6:	bfa8      	it	ge
 80227d8:	4613      	movge	r3, r2
 80227da:	f5a3 527f 	sub.w	r2, r3, #16320	@ 0x3fc0
 80227de:	f1a2 0238 	sub.w	r2, r2, #56	@ 0x38
 80227e2:	bfa8      	it	ge
 80227e4:	eb00 2050 	addge.w	r0, r0, r0, lsr #9
 80227e8:	2a00      	cmp	r2, #0
 80227ea:	bfa8      	it	ge
 80227ec:	4613      	movge	r3, r2
 80227ee:	f5a3 52ff 	sub.w	r2, r3, #8160	@ 0x1fe0
 80227f2:	f1a2 021e 	sub.w	r2, r2, #30
 80227f6:	bfa8      	it	ge
 80227f8:	eb00 2090 	addge.w	r0, r0, r0, lsr #10
 80227fc:	2a00      	cmp	r2, #0
 80227fe:	bfa4      	itt	ge
 8022800:	4613      	movge	r3, r2
 8022802:	eb00 20d0 	addge.w	r0, r0, r0, lsr #11
 8022806:	04d9      	lsls	r1, r3, #19
 8022808:	bf48      	it	mi
 802280a:	eb00 3010 	addmi.w	r0, r0, r0, lsr #12
 802280e:	051a      	lsls	r2, r3, #20
 8022810:	bf48      	it	mi
 8022812:	eb00 3050 	addmi.w	r0, r0, r0, lsr #13
 8022816:	0559      	lsls	r1, r3, #21
 8022818:	bf48      	it	mi
 802281a:	eb00 3090 	addmi.w	r0, r0, r0, lsr #14
 802281e:	059a      	lsls	r2, r3, #22
 8022820:	bf48      	it	mi
 8022822:	eb00 30d0 	addmi.w	r0, r0, r0, lsr #15
 8022826:	05d9      	lsls	r1, r3, #23
 8022828:	bf48      	it	mi
 802282a:	eb00 4010 	addmi.w	r0, r0, r0, lsr #16
 802282e:	061a      	lsls	r2, r3, #24
 8022830:	bf48      	it	mi
 8022832:	eb00 4050 	addmi.w	r0, r0, r0, lsr #17
 8022836:	0659      	lsls	r1, r3, #25
 8022838:	bf48      	it	mi
 802283a:	eb00 4090 	addmi.w	r0, r0, r0, lsr #18
 802283e:	069a      	lsls	r2, r3, #26
 8022840:	bf48      	it	mi
 8022842:	eb00 40d0 	addmi.w	r0, r0, r0, lsr #19
 8022846:	06d9      	lsls	r1, r3, #27
 8022848:	bf48      	it	mi
 802284a:	eb00 5010 	addmi.w	r0, r0, r0, lsr #20
 802284e:	071a      	lsls	r2, r3, #28
 8022850:	bf48      	it	mi
 8022852:	eb00 5050 	addmi.w	r0, r0, r0, lsr #21
 8022856:	0759      	lsls	r1, r3, #29
 8022858:	bf48      	it	mi
 802285a:	eb00 5090 	addmi.w	r0, r0, r0, lsr #22
 802285e:	079a      	lsls	r2, r3, #30
 8022860:	bf48      	it	mi
 8022862:	eb00 50d0 	addmi.w	r0, r0, r0, lsr #23
 8022866:	07db      	lsls	r3, r3, #31
 8022868:	bf48      	it	mi
 802286a:	eb00 6010 	addmi.w	r0, r0, r0, lsr #24
 802286e:	4770      	bx	lr
 8022870:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8022874:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8022878:	e747      	b.n	802270a <fp_exp24+0x12>
 802287a:	bf00      	nop
 802287c:	fa746f40 	.word	0xfa746f40
 8022880:	fd3a37a0 	.word	0xfd3a37a0
 8022884:	fe9d1bd0 	.word	0xfe9d1bd0
 8022888:	ff4e8de8 	.word	0xff4e8de8
 802288c:	ff983370 	.word	0xff983370
 8022890:	ffc6e010 	.word	0xffc6e010

08022894 <fp_exp16>:
 8022894:	b1c8      	cbz	r0, 80228ca <fp_exp16+0x36>
 8022896:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 802289a:	d046      	beq.n	802292a <fp_exp16+0x96>
 802289c:	b508      	push	{r3, lr}
 802289e:	4b51      	ldr	r3, [pc, #324]	@ (80229e4 <fp_exp16+0x150>)
 80228a0:	4298      	cmp	r0, r3
 80228a2:	dc1f      	bgt.n	80228e4 <fp_exp16+0x50>
 80228a4:	4b50      	ldr	r3, [pc, #320]	@ (80229e8 <fp_exp16+0x154>)
 80228a6:	4298      	cmp	r0, r3
 80228a8:	db12      	blt.n	80228d0 <fp_exp16+0x3c>
 80228aa:	2800      	cmp	r0, #0
 80228ac:	dd1d      	ble.n	80228ea <fp_exp16+0x56>
 80228ae:	4b4f      	ldr	r3, [pc, #316]	@ (80229ec <fp_exp16+0x158>)
 80228b0:	ebb3 2f00 	cmp.w	r3, r0, lsl #8
 80228b4:	ea4f 2200 	mov.w	r2, r0, lsl #8
 80228b8:	db0c      	blt.n	80228d4 <fp_exp16+0x40>
 80228ba:	4610      	mov	r0, r2
 80228bc:	f7ff ff1c 	bl	80226f8 <fp_exp24>
 80228c0:	f3c0 13c0 	ubfx	r3, r0, #7, #1
 80228c4:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80228c8:	bd08      	pop	{r3, pc}
 80228ca:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80228ce:	4770      	bx	lr
 80228d0:	2000      	movs	r0, #0
 80228d2:	bd08      	pop	{r3, pc}
 80228d4:	01c0      	lsls	r0, r0, #7
 80228d6:	f7ff ff0f 	bl	80226f8 <fp_exp24>
 80228da:	fba0 3000 	umull	r3, r0, r0, r0
 80228de:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80228e2:	bd08      	pop	{r3, pc}
 80228e4:	f04f 30ff 	mov.w	r0, #4294967295
 80228e8:	bd08      	pop	{r3, pc}
 80228ea:	4a40      	ldr	r2, [pc, #256]	@ (80229ec <fp_exp16+0x158>)
 80228ec:	4243      	negs	r3, r0
 80228ee:	ebb2 2f03 	cmp.w	r2, r3, lsl #8
 80228f2:	ea4f 2003 	mov.w	r0, r3, lsl #8
 80228f6:	db1a      	blt.n	802292e <fp_exp16+0x9a>
 80228f8:	f7ff fefe 	bl	80226f8 <fp_exp24>
 80228fc:	f000 0201 	and.w	r2, r0, #1
 8022900:	eb02 0350 	add.w	r3, r2, r0, lsr #1
 8022904:	2b00      	cmp	r3, #0
 8022906:	469c      	mov	ip, r3
 8022908:	d00c      	beq.n	8022924 <fp_exp16+0x90>
 802290a:	db29      	blt.n	8022960 <fp_exp16+0xcc>
 802290c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8022910:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8022914:	d228      	bcs.n	8022968 <fp_exp16+0xd4>
 8022916:	005b      	lsls	r3, r3, #1
 8022918:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 802291c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8022920:	d3f9      	bcc.n	8022916 <fp_exp16+0x82>
 8022922:	bb0a      	cbnz	r2, 8022968 <fp_exp16+0xd4>
 8022924:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8022928:	bd08      	pop	{r3, pc}
 802292a:	4831      	ldr	r0, [pc, #196]	@ (80229f0 <fp_exp16+0x15c>)
 802292c:	4770      	bx	lr
 802292e:	01d8      	lsls	r0, r3, #7
 8022930:	f7ff fee2 	bl	80226f8 <fp_exp24>
 8022934:	f000 0301 	and.w	r3, r0, #1
 8022938:	eb03 0050 	add.w	r0, r3, r0, lsr #1
 802293c:	2800      	cmp	r0, #0
 802293e:	4684      	mov	ip, r0
 8022940:	d00c      	beq.n	802295c <fp_exp16+0xc8>
 8022942:	db29      	blt.n	8022998 <fp_exp16+0x104>
 8022944:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8022948:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 802294c:	d228      	bcs.n	80229a0 <fp_exp16+0x10c>
 802294e:	0040      	lsls	r0, r0, #1
 8022950:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8022954:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8022958:	d3f9      	bcc.n	802294e <fp_exp16+0xba>
 802295a:	bb0a      	cbnz	r2, 80229a0 <fp_exp16+0x10c>
 802295c:	4825      	ldr	r0, [pc, #148]	@ (80229f4 <fp_exp16+0x160>)
 802295e:	bd08      	pop	{r3, pc}
 8022960:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8022964:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8022968:	2000      	movs	r0, #0
 802296a:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
 802296e:	e000      	b.n	8022972 <fp_exp16+0xde>
 8022970:	b151      	cbz	r1, 8022988 <fp_exp16+0xf4>
 8022972:	428b      	cmp	r3, r1
 8022974:	bf9c      	itt	ls
 8022976:	1ac9      	subls	r1, r1, r3
 8022978:	4310      	orrls	r0, r2
 802297a:	0852      	lsrs	r2, r2, #1
 802297c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8022980:	d1f6      	bne.n	8022970 <fp_exp16+0xdc>
 8022982:	4299      	cmp	r1, r3
 8022984:	bf28      	it	cs
 8022986:	3001      	addcs	r0, #1
 8022988:	f1bc 0f00 	cmp.w	ip, #0
 802298c:	db28      	blt.n	80229e0 <fp_exp16+0x14c>
 802298e:	2800      	cmp	r0, #0
 8022990:	bfb8      	it	lt
 8022992:	f06f 4000 	mvnlt.w	r0, #2147483648	@ 0x80000000
 8022996:	bd08      	pop	{r3, pc}
 8022998:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 802299c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80229a0:	2300      	movs	r3, #0
 80229a2:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
 80229a6:	e000      	b.n	80229aa <fp_exp16+0x116>
 80229a8:	b151      	cbz	r1, 80229c0 <fp_exp16+0x12c>
 80229aa:	4281      	cmp	r1, r0
 80229ac:	bf24      	itt	cs
 80229ae:	1a09      	subcs	r1, r1, r0
 80229b0:	4313      	orrcs	r3, r2
 80229b2:	0852      	lsrs	r2, r2, #1
 80229b4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80229b8:	d1f6      	bne.n	80229a8 <fp_exp16+0x114>
 80229ba:	4281      	cmp	r1, r0
 80229bc:	bf28      	it	cs
 80229be:	3301      	addcs	r3, #1
 80229c0:	f1bc 0f00 	cmp.w	ip, #0
 80229c4:	db0a      	blt.n	80229dc <fp_exp16+0x148>
 80229c6:	2b00      	cmp	r3, #0
 80229c8:	dbc8      	blt.n	802295c <fp_exp16+0xc8>
 80229ca:	fba3 3203 	umull	r3, r2, r3, r3
 80229ce:	0c18      	lsrs	r0, r3, #16
 80229d0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80229d4:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 80229d8:	4418      	add	r0, r3
 80229da:	bd08      	pop	{r3, pc}
 80229dc:	425b      	negs	r3, r3
 80229de:	e7f4      	b.n	80229ca <fp_exp16+0x136>
 80229e0:	4240      	negs	r0, r0
 80229e2:	bd08      	pop	{r3, pc}
 80229e4:	000b1721 	.word	0x000b1721
 80229e8:	fff4e8df 	.word	0xfff4e8df
 80229ec:	058b90be 	.word	0x058b90be
 80229f0:	0002b7e1 	.word	0x0002b7e1
 80229f4:	ffff0000 	.word	0xffff0000

080229f8 <fp_log16>:
 80229f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80229fc:	f000 809a 	beq.w	8022b34 <fp_log16+0x13c>
 8022a00:	4b50      	ldr	r3, [pc, #320]	@ (8022b44 <fp_log16+0x14c>)
 8022a02:	4298      	cmp	r0, r3
 8022a04:	f000 8098 	beq.w	8022b38 <fp_log16+0x140>
 8022a08:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8022a0c:	f200 8085 	bhi.w	8022b1a <fp_log16+0x122>
 8022a10:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8022a14:	f080 8093 	bcs.w	8022b3e <fp_log16+0x146>
 8022a18:	4b4b      	ldr	r3, [pc, #300]	@ (8022b48 <fp_log16+0x150>)
 8022a1a:	4a4c      	ldr	r2, [pc, #304]	@ (8022b4c <fp_log16+0x154>)
 8022a1c:	0400      	lsls	r0, r0, #16
 8022a1e:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8022a22:	bf34      	ite	cc
 8022a24:	0200      	lslcc	r0, r0, #8
 8022a26:	4613      	movcs	r3, r2
 8022a28:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
 8022a2c:	d205      	bcs.n	8022a3a <fp_log16+0x42>
 8022a2e:	f1a3 7331 	sub.w	r3, r3, #46399488	@ 0x2c40000
 8022a32:	f5a3 33e4 	sub.w	r3, r3, #116736	@ 0x1c800
 8022a36:	0100      	lsls	r0, r0, #4
 8022a38:	3b60      	subs	r3, #96	@ 0x60
 8022a3a:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8022a3e:	d205      	bcs.n	8022a4c <fp_log16+0x54>
 8022a40:	f1a3 73b1 	sub.w	r3, r3, #23199744	@ 0x1620000
 8022a44:	f5a3 4364 	sub.w	r3, r3, #58368	@ 0xe400
 8022a48:	0080      	lsls	r0, r0, #2
 8022a4a:	3b30      	subs	r3, #48	@ 0x30
 8022a4c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8022a50:	d206      	bcs.n	8022a60 <fp_log16+0x68>
 8022a52:	f103 437f 	add.w	r3, r3, #4278190080	@ 0xff000000
 8022a56:	f503 039d 	add.w	r3, r3, #5144576	@ 0x4e8000
 8022a5a:	0040      	lsls	r0, r0, #1
 8022a5c:	f603 53e8 	addw	r3, r3, #3560	@ 0xde8
 8022a60:	eb10 0250 	adds.w	r2, r0, r0, lsr #1
 8022a64:	d405      	bmi.n	8022a72 <fp_log16+0x7a>
 8022a66:	f5a3 03cf 	sub.w	r3, r3, #6782976	@ 0x678000
 8022a6a:	f5a3 4399 	sub.w	r3, r3, #19584	@ 0x4c80
 8022a6e:	3b10      	subs	r3, #16
 8022a70:	4610      	mov	r0, r2
 8022a72:	eb10 0290 	adds.w	r2, r0, r0, lsr #2
 8022a76:	d405      	bmi.n	8022a84 <fp_log16+0x8c>
 8022a78:	f5a3 1364 	sub.w	r3, r3, #3735552	@ 0x390000
 8022a7c:	f5a3 53ff 	sub.w	r3, r3, #8160	@ 0x1fe0
 8022a80:	3b10      	subs	r3, #16
 8022a82:	4610      	mov	r0, r2
 8022a84:	eb10 02d0 	adds.w	r2, r0, r0, lsr #3
 8022a88:	d404      	bmi.n	8022a94 <fp_log16+0x9c>
 8022a8a:	f5a3 13f1 	sub.w	r3, r3, #1974272	@ 0x1e2000
 8022a8e:	f2a3 7307 	subw	r3, r3, #1799	@ 0x707
 8022a92:	4610      	mov	r0, r2
 8022a94:	eb10 1210 	adds.w	r2, r0, r0, lsr #4
 8022a98:	d404      	bmi.n	8022aa4 <fp_log16+0xac>
 8022a9a:	f5a3 2378 	sub.w	r3, r3, #1015808	@ 0xf8000
 8022a9e:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8022aa2:	4610      	mov	r0, r2
 8022aa4:	eb10 1250 	adds.w	r2, r0, r0, lsr #5
 8022aa8:	d403      	bmi.n	8022ab2 <fp_log16+0xba>
 8022aaa:	f5a3 23fc 	sub.w	r3, r3, #516096	@ 0x7e000
 8022aae:	3ba7      	subs	r3, #167	@ 0xa7
 8022ab0:	4610      	mov	r0, r2
 8022ab2:	eb10 1290 	adds.w	r2, r0, r0, lsr #6
 8022ab6:	d403      	bmi.n	8022ac0 <fp_log16+0xc8>
 8022ab8:	f5a3 337e 	sub.w	r3, r3, #260096	@ 0x3f800
 8022abc:	3b15      	subs	r3, #21
 8022abe:	4610      	mov	r0, r2
 8022ac0:	eb10 12d0 	adds.w	r2, r0, r0, lsr #7
 8022ac4:	d403      	bmi.n	8022ace <fp_log16+0xd6>
 8022ac6:	f5a3 33ff 	sub.w	r3, r3, #130560	@ 0x1fe00
 8022aca:	3b03      	subs	r3, #3
 8022acc:	4610      	mov	r0, r2
 8022ace:	eb10 2210 	adds.w	r2, r0, r0, lsr #8
 8022ad2:	d403      	bmi.n	8022adc <fp_log16+0xe4>
 8022ad4:	f5a3 437f 	sub.w	r3, r3, #65280	@ 0xff00
 8022ad8:	3b80      	subs	r3, #128	@ 0x80
 8022ada:	4610      	mov	r0, r2
 8022adc:	eb10 2250 	adds.w	r2, r0, r0, lsr #9
 8022ae0:	d403      	bmi.n	8022aea <fp_log16+0xf2>
 8022ae2:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 8022ae6:	3b60      	subs	r3, #96	@ 0x60
 8022ae8:	4610      	mov	r0, r2
 8022aea:	eb10 2290 	adds.w	r2, r0, r0, lsr #10
 8022aee:	d403      	bmi.n	8022af8 <fp_log16+0x100>
 8022af0:	f5a3 537f 	sub.w	r3, r3, #16320	@ 0x3fc0
 8022af4:	3b38      	subs	r3, #56	@ 0x38
 8022af6:	4610      	mov	r0, r2
 8022af8:	eb10 22d0 	adds.w	r2, r0, r0, lsr #11
 8022afc:	d403      	bmi.n	8022b06 <fp_log16+0x10e>
 8022afe:	f5a3 53ff 	sub.w	r3, r3, #8160	@ 0x1fe0
 8022b02:	3b1e      	subs	r3, #30
 8022b04:	4610      	mov	r0, r2
 8022b06:	f1c0 4000 	rsb	r0, r0, #2147483648	@ 0x80000000
 8022b0a:	ebb3 10d0 	subs.w	r0, r3, r0, lsr #7
 8022b0e:	d40a      	bmi.n	8022b26 <fp_log16+0x12e>
 8022b10:	f3c0 13c0 	ubfx	r3, r0, #7, #1
 8022b14:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8022b18:	4770      	bx	lr
 8022b1a:	f000 0201 	and.w	r2, r0, #1
 8022b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8022b50 <fp_log16+0x158>)
 8022b20:	eb02 0050 	add.w	r0, r2, r0, lsr #1
 8022b24:	e792      	b.n	8022a4c <fp_log16+0x54>
 8022b26:	4240      	negs	r0, r0
 8022b28:	f3c0 13c0 	ubfx	r3, r0, #7, #1
 8022b2c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8022b30:	4240      	negs	r0, r0
 8022b32:	4770      	bx	lr
 8022b34:	2000      	movs	r0, #0
 8022b36:	4770      	bx	lr
 8022b38:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8022b3c:	4770      	bx	lr
 8022b3e:	4b05      	ldr	r3, [pc, #20]	@ (8022b54 <fp_log16+0x15c>)
 8022b40:	4a05      	ldr	r2, [pc, #20]	@ (8022b58 <fp_log16+0x160>)
 8022b42:	e76c      	b.n	8022a1e <fp_log16+0x26>
 8022b44:	0002b7e1 	.word	0x0002b7e1
 8022b48:	f9c2fd29 	.word	0xf9c2fd29
 8022b4c:	ff4e8de9 	.word	0xff4e8de9
 8022b50:	0b172180 	.word	0x0b172180
 8022b54:	04da1ea8 	.word	0x04da1ea8
 8022b58:	0a65af68 	.word	0x0a65af68

08022b5c <NVM_WriteBlock>:
 8022b5c:	f06f 0008 	mvn.w	r0, #8
 8022b60:	4770      	bx	lr
 8022b62:	bf00      	nop

08022b64 <NVM_ReadBlock>:
 8022b64:	f06f 0008 	mvn.w	r0, #8
 8022b68:	4770      	bx	lr
 8022b6a:	bf00      	nop

08022b6c <_ZdlPvj>:
 8022b6c:	f000 b800 	b.w	8022b70 <_ZdlPv>

08022b70 <_ZdlPv>:
 8022b70:	f000 b808 	b.w	8022b84 <free>

08022b74 <malloc>:
 8022b74:	4b02      	ldr	r3, [pc, #8]	@ (8022b80 <malloc+0xc>)
 8022b76:	4601      	mov	r1, r0
 8022b78:	6818      	ldr	r0, [r3, #0]
 8022b7a:	f000 b82d 	b.w	8022bd8 <_malloc_r>
 8022b7e:	bf00      	nop
 8022b80:	2400007c 	.word	0x2400007c

08022b84 <free>:
 8022b84:	4b02      	ldr	r3, [pc, #8]	@ (8022b90 <free+0xc>)
 8022b86:	4601      	mov	r1, r0
 8022b88:	6818      	ldr	r0, [r3, #0]
 8022b8a:	f001 bca7 	b.w	80244dc <_free_r>
 8022b8e:	bf00      	nop
 8022b90:	2400007c 	.word	0x2400007c

08022b94 <sbrk_aligned>:
 8022b94:	b570      	push	{r4, r5, r6, lr}
 8022b96:	4e0f      	ldr	r6, [pc, #60]	@ (8022bd4 <sbrk_aligned+0x40>)
 8022b98:	460c      	mov	r4, r1
 8022b9a:	6831      	ldr	r1, [r6, #0]
 8022b9c:	4605      	mov	r5, r0
 8022b9e:	b911      	cbnz	r1, 8022ba6 <sbrk_aligned+0x12>
 8022ba0:	f000 fe60 	bl	8023864 <_sbrk_r>
 8022ba4:	6030      	str	r0, [r6, #0]
 8022ba6:	4621      	mov	r1, r4
 8022ba8:	4628      	mov	r0, r5
 8022baa:	f000 fe5b 	bl	8023864 <_sbrk_r>
 8022bae:	1c43      	adds	r3, r0, #1
 8022bb0:	d103      	bne.n	8022bba <sbrk_aligned+0x26>
 8022bb2:	f04f 34ff 	mov.w	r4, #4294967295
 8022bb6:	4620      	mov	r0, r4
 8022bb8:	bd70      	pop	{r4, r5, r6, pc}
 8022bba:	1cc4      	adds	r4, r0, #3
 8022bbc:	f024 0403 	bic.w	r4, r4, #3
 8022bc0:	42a0      	cmp	r0, r4
 8022bc2:	d0f8      	beq.n	8022bb6 <sbrk_aligned+0x22>
 8022bc4:	1a21      	subs	r1, r4, r0
 8022bc6:	4628      	mov	r0, r5
 8022bc8:	f000 fe4c 	bl	8023864 <_sbrk_r>
 8022bcc:	3001      	adds	r0, #1
 8022bce:	d1f2      	bne.n	8022bb6 <sbrk_aligned+0x22>
 8022bd0:	e7ef      	b.n	8022bb2 <sbrk_aligned+0x1e>
 8022bd2:	bf00      	nop
 8022bd4:	24000a48 	.word	0x24000a48

08022bd8 <_malloc_r>:
 8022bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022bdc:	1ccd      	adds	r5, r1, #3
 8022bde:	f025 0503 	bic.w	r5, r5, #3
 8022be2:	3508      	adds	r5, #8
 8022be4:	2d0c      	cmp	r5, #12
 8022be6:	bf38      	it	cc
 8022be8:	250c      	movcc	r5, #12
 8022bea:	2d00      	cmp	r5, #0
 8022bec:	4606      	mov	r6, r0
 8022bee:	db01      	blt.n	8022bf4 <_malloc_r+0x1c>
 8022bf0:	42a9      	cmp	r1, r5
 8022bf2:	d904      	bls.n	8022bfe <_malloc_r+0x26>
 8022bf4:	230c      	movs	r3, #12
 8022bf6:	6033      	str	r3, [r6, #0]
 8022bf8:	2000      	movs	r0, #0
 8022bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022bfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8022cd4 <_malloc_r+0xfc>
 8022c02:	f000 f869 	bl	8022cd8 <__malloc_lock>
 8022c06:	f8d8 3000 	ldr.w	r3, [r8]
 8022c0a:	461c      	mov	r4, r3
 8022c0c:	bb44      	cbnz	r4, 8022c60 <_malloc_r+0x88>
 8022c0e:	4629      	mov	r1, r5
 8022c10:	4630      	mov	r0, r6
 8022c12:	f7ff ffbf 	bl	8022b94 <sbrk_aligned>
 8022c16:	1c43      	adds	r3, r0, #1
 8022c18:	4604      	mov	r4, r0
 8022c1a:	d158      	bne.n	8022cce <_malloc_r+0xf6>
 8022c1c:	f8d8 4000 	ldr.w	r4, [r8]
 8022c20:	4627      	mov	r7, r4
 8022c22:	2f00      	cmp	r7, #0
 8022c24:	d143      	bne.n	8022cae <_malloc_r+0xd6>
 8022c26:	2c00      	cmp	r4, #0
 8022c28:	d04b      	beq.n	8022cc2 <_malloc_r+0xea>
 8022c2a:	6823      	ldr	r3, [r4, #0]
 8022c2c:	4639      	mov	r1, r7
 8022c2e:	4630      	mov	r0, r6
 8022c30:	eb04 0903 	add.w	r9, r4, r3
 8022c34:	f000 fe16 	bl	8023864 <_sbrk_r>
 8022c38:	4581      	cmp	r9, r0
 8022c3a:	d142      	bne.n	8022cc2 <_malloc_r+0xea>
 8022c3c:	6821      	ldr	r1, [r4, #0]
 8022c3e:	1a6d      	subs	r5, r5, r1
 8022c40:	4629      	mov	r1, r5
 8022c42:	4630      	mov	r0, r6
 8022c44:	f7ff ffa6 	bl	8022b94 <sbrk_aligned>
 8022c48:	3001      	adds	r0, #1
 8022c4a:	d03a      	beq.n	8022cc2 <_malloc_r+0xea>
 8022c4c:	6823      	ldr	r3, [r4, #0]
 8022c4e:	442b      	add	r3, r5
 8022c50:	6023      	str	r3, [r4, #0]
 8022c52:	f8d8 3000 	ldr.w	r3, [r8]
 8022c56:	685a      	ldr	r2, [r3, #4]
 8022c58:	bb62      	cbnz	r2, 8022cb4 <_malloc_r+0xdc>
 8022c5a:	f8c8 7000 	str.w	r7, [r8]
 8022c5e:	e00f      	b.n	8022c80 <_malloc_r+0xa8>
 8022c60:	6822      	ldr	r2, [r4, #0]
 8022c62:	1b52      	subs	r2, r2, r5
 8022c64:	d420      	bmi.n	8022ca8 <_malloc_r+0xd0>
 8022c66:	2a0b      	cmp	r2, #11
 8022c68:	d917      	bls.n	8022c9a <_malloc_r+0xc2>
 8022c6a:	1961      	adds	r1, r4, r5
 8022c6c:	42a3      	cmp	r3, r4
 8022c6e:	6025      	str	r5, [r4, #0]
 8022c70:	bf18      	it	ne
 8022c72:	6059      	strne	r1, [r3, #4]
 8022c74:	6863      	ldr	r3, [r4, #4]
 8022c76:	bf08      	it	eq
 8022c78:	f8c8 1000 	streq.w	r1, [r8]
 8022c7c:	5162      	str	r2, [r4, r5]
 8022c7e:	604b      	str	r3, [r1, #4]
 8022c80:	4630      	mov	r0, r6
 8022c82:	f000 f82f 	bl	8022ce4 <__malloc_unlock>
 8022c86:	f104 000b 	add.w	r0, r4, #11
 8022c8a:	1d23      	adds	r3, r4, #4
 8022c8c:	f020 0007 	bic.w	r0, r0, #7
 8022c90:	1ac2      	subs	r2, r0, r3
 8022c92:	bf1c      	itt	ne
 8022c94:	1a1b      	subne	r3, r3, r0
 8022c96:	50a3      	strne	r3, [r4, r2]
 8022c98:	e7af      	b.n	8022bfa <_malloc_r+0x22>
 8022c9a:	6862      	ldr	r2, [r4, #4]
 8022c9c:	42a3      	cmp	r3, r4
 8022c9e:	bf0c      	ite	eq
 8022ca0:	f8c8 2000 	streq.w	r2, [r8]
 8022ca4:	605a      	strne	r2, [r3, #4]
 8022ca6:	e7eb      	b.n	8022c80 <_malloc_r+0xa8>
 8022ca8:	4623      	mov	r3, r4
 8022caa:	6864      	ldr	r4, [r4, #4]
 8022cac:	e7ae      	b.n	8022c0c <_malloc_r+0x34>
 8022cae:	463c      	mov	r4, r7
 8022cb0:	687f      	ldr	r7, [r7, #4]
 8022cb2:	e7b6      	b.n	8022c22 <_malloc_r+0x4a>
 8022cb4:	461a      	mov	r2, r3
 8022cb6:	685b      	ldr	r3, [r3, #4]
 8022cb8:	42a3      	cmp	r3, r4
 8022cba:	d1fb      	bne.n	8022cb4 <_malloc_r+0xdc>
 8022cbc:	2300      	movs	r3, #0
 8022cbe:	6053      	str	r3, [r2, #4]
 8022cc0:	e7de      	b.n	8022c80 <_malloc_r+0xa8>
 8022cc2:	230c      	movs	r3, #12
 8022cc4:	6033      	str	r3, [r6, #0]
 8022cc6:	4630      	mov	r0, r6
 8022cc8:	f000 f80c 	bl	8022ce4 <__malloc_unlock>
 8022ccc:	e794      	b.n	8022bf8 <_malloc_r+0x20>
 8022cce:	6005      	str	r5, [r0, #0]
 8022cd0:	e7d6      	b.n	8022c80 <_malloc_r+0xa8>
 8022cd2:	bf00      	nop
 8022cd4:	24000a4c 	.word	0x24000a4c

08022cd8 <__malloc_lock>:
 8022cd8:	4801      	ldr	r0, [pc, #4]	@ (8022ce0 <__malloc_lock+0x8>)
 8022cda:	f000 be10 	b.w	80238fe <__retarget_lock_acquire_recursive>
 8022cde:	bf00      	nop
 8022ce0:	24000b90 	.word	0x24000b90

08022ce4 <__malloc_unlock>:
 8022ce4:	4801      	ldr	r0, [pc, #4]	@ (8022cec <__malloc_unlock+0x8>)
 8022ce6:	f000 be0b 	b.w	8023900 <__retarget_lock_release_recursive>
 8022cea:	bf00      	nop
 8022cec:	24000b90 	.word	0x24000b90

08022cf0 <__cvt>:
 8022cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022cf2:	ed2d 8b02 	vpush	{d8}
 8022cf6:	eeb0 8b40 	vmov.f64	d8, d0
 8022cfa:	b085      	sub	sp, #20
 8022cfc:	4617      	mov	r7, r2
 8022cfe:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8022d00:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8022d02:	ee18 2a90 	vmov	r2, s17
 8022d06:	f025 0520 	bic.w	r5, r5, #32
 8022d0a:	2a00      	cmp	r2, #0
 8022d0c:	bfb6      	itet	lt
 8022d0e:	222d      	movlt	r2, #45	@ 0x2d
 8022d10:	2200      	movge	r2, #0
 8022d12:	eeb1 8b40 	vneglt.f64	d8, d0
 8022d16:	2d46      	cmp	r5, #70	@ 0x46
 8022d18:	460c      	mov	r4, r1
 8022d1a:	701a      	strb	r2, [r3, #0]
 8022d1c:	d004      	beq.n	8022d28 <__cvt+0x38>
 8022d1e:	2d45      	cmp	r5, #69	@ 0x45
 8022d20:	d100      	bne.n	8022d24 <__cvt+0x34>
 8022d22:	3401      	adds	r4, #1
 8022d24:	2102      	movs	r1, #2
 8022d26:	e000      	b.n	8022d2a <__cvt+0x3a>
 8022d28:	2103      	movs	r1, #3
 8022d2a:	ab03      	add	r3, sp, #12
 8022d2c:	9301      	str	r3, [sp, #4]
 8022d2e:	ab02      	add	r3, sp, #8
 8022d30:	9300      	str	r3, [sp, #0]
 8022d32:	4622      	mov	r2, r4
 8022d34:	4633      	mov	r3, r6
 8022d36:	eeb0 0b48 	vmov.f64	d0, d8
 8022d3a:	f000 fe79 	bl	8023a30 <_dtoa_r>
 8022d3e:	2d47      	cmp	r5, #71	@ 0x47
 8022d40:	d114      	bne.n	8022d6c <__cvt+0x7c>
 8022d42:	07fb      	lsls	r3, r7, #31
 8022d44:	d50a      	bpl.n	8022d5c <__cvt+0x6c>
 8022d46:	1902      	adds	r2, r0, r4
 8022d48:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8022d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022d50:	bf08      	it	eq
 8022d52:	9203      	streq	r2, [sp, #12]
 8022d54:	2130      	movs	r1, #48	@ 0x30
 8022d56:	9b03      	ldr	r3, [sp, #12]
 8022d58:	4293      	cmp	r3, r2
 8022d5a:	d319      	bcc.n	8022d90 <__cvt+0xa0>
 8022d5c:	9b03      	ldr	r3, [sp, #12]
 8022d5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022d60:	1a1b      	subs	r3, r3, r0
 8022d62:	6013      	str	r3, [r2, #0]
 8022d64:	b005      	add	sp, #20
 8022d66:	ecbd 8b02 	vpop	{d8}
 8022d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022d6c:	2d46      	cmp	r5, #70	@ 0x46
 8022d6e:	eb00 0204 	add.w	r2, r0, r4
 8022d72:	d1e9      	bne.n	8022d48 <__cvt+0x58>
 8022d74:	7803      	ldrb	r3, [r0, #0]
 8022d76:	2b30      	cmp	r3, #48	@ 0x30
 8022d78:	d107      	bne.n	8022d8a <__cvt+0x9a>
 8022d7a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8022d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022d82:	bf1c      	itt	ne
 8022d84:	f1c4 0401 	rsbne	r4, r4, #1
 8022d88:	6034      	strne	r4, [r6, #0]
 8022d8a:	6833      	ldr	r3, [r6, #0]
 8022d8c:	441a      	add	r2, r3
 8022d8e:	e7db      	b.n	8022d48 <__cvt+0x58>
 8022d90:	1c5c      	adds	r4, r3, #1
 8022d92:	9403      	str	r4, [sp, #12]
 8022d94:	7019      	strb	r1, [r3, #0]
 8022d96:	e7de      	b.n	8022d56 <__cvt+0x66>

08022d98 <__exponent>:
 8022d98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022d9a:	2900      	cmp	r1, #0
 8022d9c:	bfba      	itte	lt
 8022d9e:	4249      	neglt	r1, r1
 8022da0:	232d      	movlt	r3, #45	@ 0x2d
 8022da2:	232b      	movge	r3, #43	@ 0x2b
 8022da4:	2909      	cmp	r1, #9
 8022da6:	7002      	strb	r2, [r0, #0]
 8022da8:	7043      	strb	r3, [r0, #1]
 8022daa:	dd29      	ble.n	8022e00 <__exponent+0x68>
 8022dac:	f10d 0307 	add.w	r3, sp, #7
 8022db0:	461d      	mov	r5, r3
 8022db2:	270a      	movs	r7, #10
 8022db4:	461a      	mov	r2, r3
 8022db6:	fbb1 f6f7 	udiv	r6, r1, r7
 8022dba:	fb07 1416 	mls	r4, r7, r6, r1
 8022dbe:	3430      	adds	r4, #48	@ 0x30
 8022dc0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8022dc4:	460c      	mov	r4, r1
 8022dc6:	2c63      	cmp	r4, #99	@ 0x63
 8022dc8:	f103 33ff 	add.w	r3, r3, #4294967295
 8022dcc:	4631      	mov	r1, r6
 8022dce:	dcf1      	bgt.n	8022db4 <__exponent+0x1c>
 8022dd0:	3130      	adds	r1, #48	@ 0x30
 8022dd2:	1e94      	subs	r4, r2, #2
 8022dd4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8022dd8:	1c41      	adds	r1, r0, #1
 8022dda:	4623      	mov	r3, r4
 8022ddc:	42ab      	cmp	r3, r5
 8022dde:	d30a      	bcc.n	8022df6 <__exponent+0x5e>
 8022de0:	f10d 0309 	add.w	r3, sp, #9
 8022de4:	1a9b      	subs	r3, r3, r2
 8022de6:	42ac      	cmp	r4, r5
 8022de8:	bf88      	it	hi
 8022dea:	2300      	movhi	r3, #0
 8022dec:	3302      	adds	r3, #2
 8022dee:	4403      	add	r3, r0
 8022df0:	1a18      	subs	r0, r3, r0
 8022df2:	b003      	add	sp, #12
 8022df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022df6:	f813 6b01 	ldrb.w	r6, [r3], #1
 8022dfa:	f801 6f01 	strb.w	r6, [r1, #1]!
 8022dfe:	e7ed      	b.n	8022ddc <__exponent+0x44>
 8022e00:	2330      	movs	r3, #48	@ 0x30
 8022e02:	3130      	adds	r1, #48	@ 0x30
 8022e04:	7083      	strb	r3, [r0, #2]
 8022e06:	70c1      	strb	r1, [r0, #3]
 8022e08:	1d03      	adds	r3, r0, #4
 8022e0a:	e7f1      	b.n	8022df0 <__exponent+0x58>
 8022e0c:	0000      	movs	r0, r0
	...

08022e10 <_printf_float>:
 8022e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e14:	b08d      	sub	sp, #52	@ 0x34
 8022e16:	460c      	mov	r4, r1
 8022e18:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8022e1c:	4616      	mov	r6, r2
 8022e1e:	461f      	mov	r7, r3
 8022e20:	4605      	mov	r5, r0
 8022e22:	f000 fce7 	bl	80237f4 <_localeconv_r>
 8022e26:	f8d0 b000 	ldr.w	fp, [r0]
 8022e2a:	4658      	mov	r0, fp
 8022e2c:	f7dd fac0 	bl	80003b0 <strlen>
 8022e30:	2300      	movs	r3, #0
 8022e32:	930a      	str	r3, [sp, #40]	@ 0x28
 8022e34:	f8d8 3000 	ldr.w	r3, [r8]
 8022e38:	f894 9018 	ldrb.w	r9, [r4, #24]
 8022e3c:	6822      	ldr	r2, [r4, #0]
 8022e3e:	9005      	str	r0, [sp, #20]
 8022e40:	3307      	adds	r3, #7
 8022e42:	f023 0307 	bic.w	r3, r3, #7
 8022e46:	f103 0108 	add.w	r1, r3, #8
 8022e4a:	f8c8 1000 	str.w	r1, [r8]
 8022e4e:	ed93 0b00 	vldr	d0, [r3]
 8022e52:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80230b0 <_printf_float+0x2a0>
 8022e56:	eeb0 7bc0 	vabs.f64	d7, d0
 8022e5a:	eeb4 7b46 	vcmp.f64	d7, d6
 8022e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022e62:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8022e66:	dd24      	ble.n	8022eb2 <_printf_float+0xa2>
 8022e68:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8022e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022e70:	d502      	bpl.n	8022e78 <_printf_float+0x68>
 8022e72:	232d      	movs	r3, #45	@ 0x2d
 8022e74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022e78:	498f      	ldr	r1, [pc, #572]	@ (80230b8 <_printf_float+0x2a8>)
 8022e7a:	4b90      	ldr	r3, [pc, #576]	@ (80230bc <_printf_float+0x2ac>)
 8022e7c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8022e80:	bf94      	ite	ls
 8022e82:	4688      	movls	r8, r1
 8022e84:	4698      	movhi	r8, r3
 8022e86:	f022 0204 	bic.w	r2, r2, #4
 8022e8a:	2303      	movs	r3, #3
 8022e8c:	6123      	str	r3, [r4, #16]
 8022e8e:	6022      	str	r2, [r4, #0]
 8022e90:	f04f 0a00 	mov.w	sl, #0
 8022e94:	9700      	str	r7, [sp, #0]
 8022e96:	4633      	mov	r3, r6
 8022e98:	aa0b      	add	r2, sp, #44	@ 0x2c
 8022e9a:	4621      	mov	r1, r4
 8022e9c:	4628      	mov	r0, r5
 8022e9e:	f000 f9d1 	bl	8023244 <_printf_common>
 8022ea2:	3001      	adds	r0, #1
 8022ea4:	f040 8089 	bne.w	8022fba <_printf_float+0x1aa>
 8022ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8022eac:	b00d      	add	sp, #52	@ 0x34
 8022eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022eb2:	eeb4 0b40 	vcmp.f64	d0, d0
 8022eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022eba:	d709      	bvc.n	8022ed0 <_printf_float+0xc0>
 8022ebc:	ee10 3a90 	vmov	r3, s1
 8022ec0:	2b00      	cmp	r3, #0
 8022ec2:	bfbc      	itt	lt
 8022ec4:	232d      	movlt	r3, #45	@ 0x2d
 8022ec6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8022eca:	497d      	ldr	r1, [pc, #500]	@ (80230c0 <_printf_float+0x2b0>)
 8022ecc:	4b7d      	ldr	r3, [pc, #500]	@ (80230c4 <_printf_float+0x2b4>)
 8022ece:	e7d5      	b.n	8022e7c <_printf_float+0x6c>
 8022ed0:	6863      	ldr	r3, [r4, #4]
 8022ed2:	1c59      	adds	r1, r3, #1
 8022ed4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8022ed8:	d139      	bne.n	8022f4e <_printf_float+0x13e>
 8022eda:	2306      	movs	r3, #6
 8022edc:	6063      	str	r3, [r4, #4]
 8022ede:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8022ee2:	2300      	movs	r3, #0
 8022ee4:	6022      	str	r2, [r4, #0]
 8022ee6:	9303      	str	r3, [sp, #12]
 8022ee8:	ab0a      	add	r3, sp, #40	@ 0x28
 8022eea:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8022eee:	ab09      	add	r3, sp, #36	@ 0x24
 8022ef0:	9300      	str	r3, [sp, #0]
 8022ef2:	6861      	ldr	r1, [r4, #4]
 8022ef4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8022ef8:	4628      	mov	r0, r5
 8022efa:	f7ff fef9 	bl	8022cf0 <__cvt>
 8022efe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8022f02:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8022f04:	4680      	mov	r8, r0
 8022f06:	d129      	bne.n	8022f5c <_printf_float+0x14c>
 8022f08:	1cc8      	adds	r0, r1, #3
 8022f0a:	db02      	blt.n	8022f12 <_printf_float+0x102>
 8022f0c:	6863      	ldr	r3, [r4, #4]
 8022f0e:	4299      	cmp	r1, r3
 8022f10:	dd41      	ble.n	8022f96 <_printf_float+0x186>
 8022f12:	f1a9 0902 	sub.w	r9, r9, #2
 8022f16:	fa5f f989 	uxtb.w	r9, r9
 8022f1a:	3901      	subs	r1, #1
 8022f1c:	464a      	mov	r2, r9
 8022f1e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8022f22:	9109      	str	r1, [sp, #36]	@ 0x24
 8022f24:	f7ff ff38 	bl	8022d98 <__exponent>
 8022f28:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022f2a:	1813      	adds	r3, r2, r0
 8022f2c:	2a01      	cmp	r2, #1
 8022f2e:	4682      	mov	sl, r0
 8022f30:	6123      	str	r3, [r4, #16]
 8022f32:	dc02      	bgt.n	8022f3a <_printf_float+0x12a>
 8022f34:	6822      	ldr	r2, [r4, #0]
 8022f36:	07d2      	lsls	r2, r2, #31
 8022f38:	d501      	bpl.n	8022f3e <_printf_float+0x12e>
 8022f3a:	3301      	adds	r3, #1
 8022f3c:	6123      	str	r3, [r4, #16]
 8022f3e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8022f42:	2b00      	cmp	r3, #0
 8022f44:	d0a6      	beq.n	8022e94 <_printf_float+0x84>
 8022f46:	232d      	movs	r3, #45	@ 0x2d
 8022f48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022f4c:	e7a2      	b.n	8022e94 <_printf_float+0x84>
 8022f4e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8022f52:	d1c4      	bne.n	8022ede <_printf_float+0xce>
 8022f54:	2b00      	cmp	r3, #0
 8022f56:	d1c2      	bne.n	8022ede <_printf_float+0xce>
 8022f58:	2301      	movs	r3, #1
 8022f5a:	e7bf      	b.n	8022edc <_printf_float+0xcc>
 8022f5c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8022f60:	d9db      	bls.n	8022f1a <_printf_float+0x10a>
 8022f62:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8022f66:	d118      	bne.n	8022f9a <_printf_float+0x18a>
 8022f68:	2900      	cmp	r1, #0
 8022f6a:	6863      	ldr	r3, [r4, #4]
 8022f6c:	dd0b      	ble.n	8022f86 <_printf_float+0x176>
 8022f6e:	6121      	str	r1, [r4, #16]
 8022f70:	b913      	cbnz	r3, 8022f78 <_printf_float+0x168>
 8022f72:	6822      	ldr	r2, [r4, #0]
 8022f74:	07d0      	lsls	r0, r2, #31
 8022f76:	d502      	bpl.n	8022f7e <_printf_float+0x16e>
 8022f78:	3301      	adds	r3, #1
 8022f7a:	440b      	add	r3, r1
 8022f7c:	6123      	str	r3, [r4, #16]
 8022f7e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8022f80:	f04f 0a00 	mov.w	sl, #0
 8022f84:	e7db      	b.n	8022f3e <_printf_float+0x12e>
 8022f86:	b913      	cbnz	r3, 8022f8e <_printf_float+0x17e>
 8022f88:	6822      	ldr	r2, [r4, #0]
 8022f8a:	07d2      	lsls	r2, r2, #31
 8022f8c:	d501      	bpl.n	8022f92 <_printf_float+0x182>
 8022f8e:	3302      	adds	r3, #2
 8022f90:	e7f4      	b.n	8022f7c <_printf_float+0x16c>
 8022f92:	2301      	movs	r3, #1
 8022f94:	e7f2      	b.n	8022f7c <_printf_float+0x16c>
 8022f96:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8022f9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022f9c:	4299      	cmp	r1, r3
 8022f9e:	db05      	blt.n	8022fac <_printf_float+0x19c>
 8022fa0:	6823      	ldr	r3, [r4, #0]
 8022fa2:	6121      	str	r1, [r4, #16]
 8022fa4:	07d8      	lsls	r0, r3, #31
 8022fa6:	d5ea      	bpl.n	8022f7e <_printf_float+0x16e>
 8022fa8:	1c4b      	adds	r3, r1, #1
 8022faa:	e7e7      	b.n	8022f7c <_printf_float+0x16c>
 8022fac:	2900      	cmp	r1, #0
 8022fae:	bfd4      	ite	le
 8022fb0:	f1c1 0202 	rsble	r2, r1, #2
 8022fb4:	2201      	movgt	r2, #1
 8022fb6:	4413      	add	r3, r2
 8022fb8:	e7e0      	b.n	8022f7c <_printf_float+0x16c>
 8022fba:	6823      	ldr	r3, [r4, #0]
 8022fbc:	055a      	lsls	r2, r3, #21
 8022fbe:	d407      	bmi.n	8022fd0 <_printf_float+0x1c0>
 8022fc0:	6923      	ldr	r3, [r4, #16]
 8022fc2:	4642      	mov	r2, r8
 8022fc4:	4631      	mov	r1, r6
 8022fc6:	4628      	mov	r0, r5
 8022fc8:	47b8      	blx	r7
 8022fca:	3001      	adds	r0, #1
 8022fcc:	d12a      	bne.n	8023024 <_printf_float+0x214>
 8022fce:	e76b      	b.n	8022ea8 <_printf_float+0x98>
 8022fd0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8022fd4:	f240 80e0 	bls.w	8023198 <_printf_float+0x388>
 8022fd8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8022fdc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8022fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022fe4:	d133      	bne.n	802304e <_printf_float+0x23e>
 8022fe6:	4a38      	ldr	r2, [pc, #224]	@ (80230c8 <_printf_float+0x2b8>)
 8022fe8:	2301      	movs	r3, #1
 8022fea:	4631      	mov	r1, r6
 8022fec:	4628      	mov	r0, r5
 8022fee:	47b8      	blx	r7
 8022ff0:	3001      	adds	r0, #1
 8022ff2:	f43f af59 	beq.w	8022ea8 <_printf_float+0x98>
 8022ff6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8022ffa:	4543      	cmp	r3, r8
 8022ffc:	db02      	blt.n	8023004 <_printf_float+0x1f4>
 8022ffe:	6823      	ldr	r3, [r4, #0]
 8023000:	07d8      	lsls	r0, r3, #31
 8023002:	d50f      	bpl.n	8023024 <_printf_float+0x214>
 8023004:	9b05      	ldr	r3, [sp, #20]
 8023006:	465a      	mov	r2, fp
 8023008:	4631      	mov	r1, r6
 802300a:	4628      	mov	r0, r5
 802300c:	47b8      	blx	r7
 802300e:	3001      	adds	r0, #1
 8023010:	f43f af4a 	beq.w	8022ea8 <_printf_float+0x98>
 8023014:	f04f 0900 	mov.w	r9, #0
 8023018:	f108 38ff 	add.w	r8, r8, #4294967295
 802301c:	f104 0a1a 	add.w	sl, r4, #26
 8023020:	45c8      	cmp	r8, r9
 8023022:	dc09      	bgt.n	8023038 <_printf_float+0x228>
 8023024:	6823      	ldr	r3, [r4, #0]
 8023026:	079b      	lsls	r3, r3, #30
 8023028:	f100 8107 	bmi.w	802323a <_printf_float+0x42a>
 802302c:	68e0      	ldr	r0, [r4, #12]
 802302e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023030:	4298      	cmp	r0, r3
 8023032:	bfb8      	it	lt
 8023034:	4618      	movlt	r0, r3
 8023036:	e739      	b.n	8022eac <_printf_float+0x9c>
 8023038:	2301      	movs	r3, #1
 802303a:	4652      	mov	r2, sl
 802303c:	4631      	mov	r1, r6
 802303e:	4628      	mov	r0, r5
 8023040:	47b8      	blx	r7
 8023042:	3001      	adds	r0, #1
 8023044:	f43f af30 	beq.w	8022ea8 <_printf_float+0x98>
 8023048:	f109 0901 	add.w	r9, r9, #1
 802304c:	e7e8      	b.n	8023020 <_printf_float+0x210>
 802304e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023050:	2b00      	cmp	r3, #0
 8023052:	dc3b      	bgt.n	80230cc <_printf_float+0x2bc>
 8023054:	4a1c      	ldr	r2, [pc, #112]	@ (80230c8 <_printf_float+0x2b8>)
 8023056:	2301      	movs	r3, #1
 8023058:	4631      	mov	r1, r6
 802305a:	4628      	mov	r0, r5
 802305c:	47b8      	blx	r7
 802305e:	3001      	adds	r0, #1
 8023060:	f43f af22 	beq.w	8022ea8 <_printf_float+0x98>
 8023064:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8023068:	ea59 0303 	orrs.w	r3, r9, r3
 802306c:	d102      	bne.n	8023074 <_printf_float+0x264>
 802306e:	6823      	ldr	r3, [r4, #0]
 8023070:	07d9      	lsls	r1, r3, #31
 8023072:	d5d7      	bpl.n	8023024 <_printf_float+0x214>
 8023074:	9b05      	ldr	r3, [sp, #20]
 8023076:	465a      	mov	r2, fp
 8023078:	4631      	mov	r1, r6
 802307a:	4628      	mov	r0, r5
 802307c:	47b8      	blx	r7
 802307e:	3001      	adds	r0, #1
 8023080:	f43f af12 	beq.w	8022ea8 <_printf_float+0x98>
 8023084:	f04f 0a00 	mov.w	sl, #0
 8023088:	f104 0b1a 	add.w	fp, r4, #26
 802308c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802308e:	425b      	negs	r3, r3
 8023090:	4553      	cmp	r3, sl
 8023092:	dc01      	bgt.n	8023098 <_printf_float+0x288>
 8023094:	464b      	mov	r3, r9
 8023096:	e794      	b.n	8022fc2 <_printf_float+0x1b2>
 8023098:	2301      	movs	r3, #1
 802309a:	465a      	mov	r2, fp
 802309c:	4631      	mov	r1, r6
 802309e:	4628      	mov	r0, r5
 80230a0:	47b8      	blx	r7
 80230a2:	3001      	adds	r0, #1
 80230a4:	f43f af00 	beq.w	8022ea8 <_printf_float+0x98>
 80230a8:	f10a 0a01 	add.w	sl, sl, #1
 80230ac:	e7ee      	b.n	802308c <_printf_float+0x27c>
 80230ae:	bf00      	nop
 80230b0:	ffffffff 	.word	0xffffffff
 80230b4:	7fefffff 	.word	0x7fefffff
 80230b8:	0802c2f9 	.word	0x0802c2f9
 80230bc:	0802c2fd 	.word	0x0802c2fd
 80230c0:	0802c301 	.word	0x0802c301
 80230c4:	0802c305 	.word	0x0802c305
 80230c8:	0802c309 	.word	0x0802c309
 80230cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80230ce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80230d2:	4553      	cmp	r3, sl
 80230d4:	bfa8      	it	ge
 80230d6:	4653      	movge	r3, sl
 80230d8:	2b00      	cmp	r3, #0
 80230da:	4699      	mov	r9, r3
 80230dc:	dc37      	bgt.n	802314e <_printf_float+0x33e>
 80230de:	2300      	movs	r3, #0
 80230e0:	9307      	str	r3, [sp, #28]
 80230e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80230e6:	f104 021a 	add.w	r2, r4, #26
 80230ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80230ec:	9907      	ldr	r1, [sp, #28]
 80230ee:	9306      	str	r3, [sp, #24]
 80230f0:	eba3 0309 	sub.w	r3, r3, r9
 80230f4:	428b      	cmp	r3, r1
 80230f6:	dc31      	bgt.n	802315c <_printf_float+0x34c>
 80230f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80230fa:	459a      	cmp	sl, r3
 80230fc:	dc3b      	bgt.n	8023176 <_printf_float+0x366>
 80230fe:	6823      	ldr	r3, [r4, #0]
 8023100:	07da      	lsls	r2, r3, #31
 8023102:	d438      	bmi.n	8023176 <_printf_float+0x366>
 8023104:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023106:	ebaa 0903 	sub.w	r9, sl, r3
 802310a:	9b06      	ldr	r3, [sp, #24]
 802310c:	ebaa 0303 	sub.w	r3, sl, r3
 8023110:	4599      	cmp	r9, r3
 8023112:	bfa8      	it	ge
 8023114:	4699      	movge	r9, r3
 8023116:	f1b9 0f00 	cmp.w	r9, #0
 802311a:	dc34      	bgt.n	8023186 <_printf_float+0x376>
 802311c:	f04f 0800 	mov.w	r8, #0
 8023120:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8023124:	f104 0b1a 	add.w	fp, r4, #26
 8023128:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802312a:	ebaa 0303 	sub.w	r3, sl, r3
 802312e:	eba3 0309 	sub.w	r3, r3, r9
 8023132:	4543      	cmp	r3, r8
 8023134:	f77f af76 	ble.w	8023024 <_printf_float+0x214>
 8023138:	2301      	movs	r3, #1
 802313a:	465a      	mov	r2, fp
 802313c:	4631      	mov	r1, r6
 802313e:	4628      	mov	r0, r5
 8023140:	47b8      	blx	r7
 8023142:	3001      	adds	r0, #1
 8023144:	f43f aeb0 	beq.w	8022ea8 <_printf_float+0x98>
 8023148:	f108 0801 	add.w	r8, r8, #1
 802314c:	e7ec      	b.n	8023128 <_printf_float+0x318>
 802314e:	4642      	mov	r2, r8
 8023150:	4631      	mov	r1, r6
 8023152:	4628      	mov	r0, r5
 8023154:	47b8      	blx	r7
 8023156:	3001      	adds	r0, #1
 8023158:	d1c1      	bne.n	80230de <_printf_float+0x2ce>
 802315a:	e6a5      	b.n	8022ea8 <_printf_float+0x98>
 802315c:	2301      	movs	r3, #1
 802315e:	4631      	mov	r1, r6
 8023160:	4628      	mov	r0, r5
 8023162:	9206      	str	r2, [sp, #24]
 8023164:	47b8      	blx	r7
 8023166:	3001      	adds	r0, #1
 8023168:	f43f ae9e 	beq.w	8022ea8 <_printf_float+0x98>
 802316c:	9b07      	ldr	r3, [sp, #28]
 802316e:	9a06      	ldr	r2, [sp, #24]
 8023170:	3301      	adds	r3, #1
 8023172:	9307      	str	r3, [sp, #28]
 8023174:	e7b9      	b.n	80230ea <_printf_float+0x2da>
 8023176:	9b05      	ldr	r3, [sp, #20]
 8023178:	465a      	mov	r2, fp
 802317a:	4631      	mov	r1, r6
 802317c:	4628      	mov	r0, r5
 802317e:	47b8      	blx	r7
 8023180:	3001      	adds	r0, #1
 8023182:	d1bf      	bne.n	8023104 <_printf_float+0x2f4>
 8023184:	e690      	b.n	8022ea8 <_printf_float+0x98>
 8023186:	9a06      	ldr	r2, [sp, #24]
 8023188:	464b      	mov	r3, r9
 802318a:	4442      	add	r2, r8
 802318c:	4631      	mov	r1, r6
 802318e:	4628      	mov	r0, r5
 8023190:	47b8      	blx	r7
 8023192:	3001      	adds	r0, #1
 8023194:	d1c2      	bne.n	802311c <_printf_float+0x30c>
 8023196:	e687      	b.n	8022ea8 <_printf_float+0x98>
 8023198:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 802319c:	f1b9 0f01 	cmp.w	r9, #1
 80231a0:	dc01      	bgt.n	80231a6 <_printf_float+0x396>
 80231a2:	07db      	lsls	r3, r3, #31
 80231a4:	d536      	bpl.n	8023214 <_printf_float+0x404>
 80231a6:	2301      	movs	r3, #1
 80231a8:	4642      	mov	r2, r8
 80231aa:	4631      	mov	r1, r6
 80231ac:	4628      	mov	r0, r5
 80231ae:	47b8      	blx	r7
 80231b0:	3001      	adds	r0, #1
 80231b2:	f43f ae79 	beq.w	8022ea8 <_printf_float+0x98>
 80231b6:	9b05      	ldr	r3, [sp, #20]
 80231b8:	465a      	mov	r2, fp
 80231ba:	4631      	mov	r1, r6
 80231bc:	4628      	mov	r0, r5
 80231be:	47b8      	blx	r7
 80231c0:	3001      	adds	r0, #1
 80231c2:	f43f ae71 	beq.w	8022ea8 <_printf_float+0x98>
 80231c6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80231ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80231ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80231d2:	f109 39ff 	add.w	r9, r9, #4294967295
 80231d6:	d018      	beq.n	802320a <_printf_float+0x3fa>
 80231d8:	464b      	mov	r3, r9
 80231da:	f108 0201 	add.w	r2, r8, #1
 80231de:	4631      	mov	r1, r6
 80231e0:	4628      	mov	r0, r5
 80231e2:	47b8      	blx	r7
 80231e4:	3001      	adds	r0, #1
 80231e6:	d10c      	bne.n	8023202 <_printf_float+0x3f2>
 80231e8:	e65e      	b.n	8022ea8 <_printf_float+0x98>
 80231ea:	2301      	movs	r3, #1
 80231ec:	465a      	mov	r2, fp
 80231ee:	4631      	mov	r1, r6
 80231f0:	4628      	mov	r0, r5
 80231f2:	47b8      	blx	r7
 80231f4:	3001      	adds	r0, #1
 80231f6:	f43f ae57 	beq.w	8022ea8 <_printf_float+0x98>
 80231fa:	f108 0801 	add.w	r8, r8, #1
 80231fe:	45c8      	cmp	r8, r9
 8023200:	dbf3      	blt.n	80231ea <_printf_float+0x3da>
 8023202:	4653      	mov	r3, sl
 8023204:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8023208:	e6dc      	b.n	8022fc4 <_printf_float+0x1b4>
 802320a:	f04f 0800 	mov.w	r8, #0
 802320e:	f104 0b1a 	add.w	fp, r4, #26
 8023212:	e7f4      	b.n	80231fe <_printf_float+0x3ee>
 8023214:	2301      	movs	r3, #1
 8023216:	4642      	mov	r2, r8
 8023218:	e7e1      	b.n	80231de <_printf_float+0x3ce>
 802321a:	2301      	movs	r3, #1
 802321c:	464a      	mov	r2, r9
 802321e:	4631      	mov	r1, r6
 8023220:	4628      	mov	r0, r5
 8023222:	47b8      	blx	r7
 8023224:	3001      	adds	r0, #1
 8023226:	f43f ae3f 	beq.w	8022ea8 <_printf_float+0x98>
 802322a:	f108 0801 	add.w	r8, r8, #1
 802322e:	68e3      	ldr	r3, [r4, #12]
 8023230:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8023232:	1a5b      	subs	r3, r3, r1
 8023234:	4543      	cmp	r3, r8
 8023236:	dcf0      	bgt.n	802321a <_printf_float+0x40a>
 8023238:	e6f8      	b.n	802302c <_printf_float+0x21c>
 802323a:	f04f 0800 	mov.w	r8, #0
 802323e:	f104 0919 	add.w	r9, r4, #25
 8023242:	e7f4      	b.n	802322e <_printf_float+0x41e>

08023244 <_printf_common>:
 8023244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023248:	4616      	mov	r6, r2
 802324a:	4698      	mov	r8, r3
 802324c:	688a      	ldr	r2, [r1, #8]
 802324e:	690b      	ldr	r3, [r1, #16]
 8023250:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8023254:	4293      	cmp	r3, r2
 8023256:	bfb8      	it	lt
 8023258:	4613      	movlt	r3, r2
 802325a:	6033      	str	r3, [r6, #0]
 802325c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8023260:	4607      	mov	r7, r0
 8023262:	460c      	mov	r4, r1
 8023264:	b10a      	cbz	r2, 802326a <_printf_common+0x26>
 8023266:	3301      	adds	r3, #1
 8023268:	6033      	str	r3, [r6, #0]
 802326a:	6823      	ldr	r3, [r4, #0]
 802326c:	0699      	lsls	r1, r3, #26
 802326e:	bf42      	ittt	mi
 8023270:	6833      	ldrmi	r3, [r6, #0]
 8023272:	3302      	addmi	r3, #2
 8023274:	6033      	strmi	r3, [r6, #0]
 8023276:	6825      	ldr	r5, [r4, #0]
 8023278:	f015 0506 	ands.w	r5, r5, #6
 802327c:	d106      	bne.n	802328c <_printf_common+0x48>
 802327e:	f104 0a19 	add.w	sl, r4, #25
 8023282:	68e3      	ldr	r3, [r4, #12]
 8023284:	6832      	ldr	r2, [r6, #0]
 8023286:	1a9b      	subs	r3, r3, r2
 8023288:	42ab      	cmp	r3, r5
 802328a:	dc26      	bgt.n	80232da <_printf_common+0x96>
 802328c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8023290:	6822      	ldr	r2, [r4, #0]
 8023292:	3b00      	subs	r3, #0
 8023294:	bf18      	it	ne
 8023296:	2301      	movne	r3, #1
 8023298:	0692      	lsls	r2, r2, #26
 802329a:	d42b      	bmi.n	80232f4 <_printf_common+0xb0>
 802329c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80232a0:	4641      	mov	r1, r8
 80232a2:	4638      	mov	r0, r7
 80232a4:	47c8      	blx	r9
 80232a6:	3001      	adds	r0, #1
 80232a8:	d01e      	beq.n	80232e8 <_printf_common+0xa4>
 80232aa:	6823      	ldr	r3, [r4, #0]
 80232ac:	6922      	ldr	r2, [r4, #16]
 80232ae:	f003 0306 	and.w	r3, r3, #6
 80232b2:	2b04      	cmp	r3, #4
 80232b4:	bf02      	ittt	eq
 80232b6:	68e5      	ldreq	r5, [r4, #12]
 80232b8:	6833      	ldreq	r3, [r6, #0]
 80232ba:	1aed      	subeq	r5, r5, r3
 80232bc:	68a3      	ldr	r3, [r4, #8]
 80232be:	bf0c      	ite	eq
 80232c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80232c4:	2500      	movne	r5, #0
 80232c6:	4293      	cmp	r3, r2
 80232c8:	bfc4      	itt	gt
 80232ca:	1a9b      	subgt	r3, r3, r2
 80232cc:	18ed      	addgt	r5, r5, r3
 80232ce:	2600      	movs	r6, #0
 80232d0:	341a      	adds	r4, #26
 80232d2:	42b5      	cmp	r5, r6
 80232d4:	d11a      	bne.n	802330c <_printf_common+0xc8>
 80232d6:	2000      	movs	r0, #0
 80232d8:	e008      	b.n	80232ec <_printf_common+0xa8>
 80232da:	2301      	movs	r3, #1
 80232dc:	4652      	mov	r2, sl
 80232de:	4641      	mov	r1, r8
 80232e0:	4638      	mov	r0, r7
 80232e2:	47c8      	blx	r9
 80232e4:	3001      	adds	r0, #1
 80232e6:	d103      	bne.n	80232f0 <_printf_common+0xac>
 80232e8:	f04f 30ff 	mov.w	r0, #4294967295
 80232ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80232f0:	3501      	adds	r5, #1
 80232f2:	e7c6      	b.n	8023282 <_printf_common+0x3e>
 80232f4:	18e1      	adds	r1, r4, r3
 80232f6:	1c5a      	adds	r2, r3, #1
 80232f8:	2030      	movs	r0, #48	@ 0x30
 80232fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80232fe:	4422      	add	r2, r4
 8023300:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8023304:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8023308:	3302      	adds	r3, #2
 802330a:	e7c7      	b.n	802329c <_printf_common+0x58>
 802330c:	2301      	movs	r3, #1
 802330e:	4622      	mov	r2, r4
 8023310:	4641      	mov	r1, r8
 8023312:	4638      	mov	r0, r7
 8023314:	47c8      	blx	r9
 8023316:	3001      	adds	r0, #1
 8023318:	d0e6      	beq.n	80232e8 <_printf_common+0xa4>
 802331a:	3601      	adds	r6, #1
 802331c:	e7d9      	b.n	80232d2 <_printf_common+0x8e>
	...

08023320 <_printf_i>:
 8023320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023324:	7e0f      	ldrb	r7, [r1, #24]
 8023326:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8023328:	2f78      	cmp	r7, #120	@ 0x78
 802332a:	4691      	mov	r9, r2
 802332c:	4680      	mov	r8, r0
 802332e:	460c      	mov	r4, r1
 8023330:	469a      	mov	sl, r3
 8023332:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8023336:	d807      	bhi.n	8023348 <_printf_i+0x28>
 8023338:	2f62      	cmp	r7, #98	@ 0x62
 802333a:	d80a      	bhi.n	8023352 <_printf_i+0x32>
 802333c:	2f00      	cmp	r7, #0
 802333e:	f000 80d2 	beq.w	80234e6 <_printf_i+0x1c6>
 8023342:	2f58      	cmp	r7, #88	@ 0x58
 8023344:	f000 80b9 	beq.w	80234ba <_printf_i+0x19a>
 8023348:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802334c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8023350:	e03a      	b.n	80233c8 <_printf_i+0xa8>
 8023352:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8023356:	2b15      	cmp	r3, #21
 8023358:	d8f6      	bhi.n	8023348 <_printf_i+0x28>
 802335a:	a101      	add	r1, pc, #4	@ (adr r1, 8023360 <_printf_i+0x40>)
 802335c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023360:	080233b9 	.word	0x080233b9
 8023364:	080233cd 	.word	0x080233cd
 8023368:	08023349 	.word	0x08023349
 802336c:	08023349 	.word	0x08023349
 8023370:	08023349 	.word	0x08023349
 8023374:	08023349 	.word	0x08023349
 8023378:	080233cd 	.word	0x080233cd
 802337c:	08023349 	.word	0x08023349
 8023380:	08023349 	.word	0x08023349
 8023384:	08023349 	.word	0x08023349
 8023388:	08023349 	.word	0x08023349
 802338c:	080234cd 	.word	0x080234cd
 8023390:	080233f7 	.word	0x080233f7
 8023394:	08023487 	.word	0x08023487
 8023398:	08023349 	.word	0x08023349
 802339c:	08023349 	.word	0x08023349
 80233a0:	080234ef 	.word	0x080234ef
 80233a4:	08023349 	.word	0x08023349
 80233a8:	080233f7 	.word	0x080233f7
 80233ac:	08023349 	.word	0x08023349
 80233b0:	08023349 	.word	0x08023349
 80233b4:	0802348f 	.word	0x0802348f
 80233b8:	6833      	ldr	r3, [r6, #0]
 80233ba:	1d1a      	adds	r2, r3, #4
 80233bc:	681b      	ldr	r3, [r3, #0]
 80233be:	6032      	str	r2, [r6, #0]
 80233c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80233c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80233c8:	2301      	movs	r3, #1
 80233ca:	e09d      	b.n	8023508 <_printf_i+0x1e8>
 80233cc:	6833      	ldr	r3, [r6, #0]
 80233ce:	6820      	ldr	r0, [r4, #0]
 80233d0:	1d19      	adds	r1, r3, #4
 80233d2:	6031      	str	r1, [r6, #0]
 80233d4:	0606      	lsls	r6, r0, #24
 80233d6:	d501      	bpl.n	80233dc <_printf_i+0xbc>
 80233d8:	681d      	ldr	r5, [r3, #0]
 80233da:	e003      	b.n	80233e4 <_printf_i+0xc4>
 80233dc:	0645      	lsls	r5, r0, #25
 80233de:	d5fb      	bpl.n	80233d8 <_printf_i+0xb8>
 80233e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80233e4:	2d00      	cmp	r5, #0
 80233e6:	da03      	bge.n	80233f0 <_printf_i+0xd0>
 80233e8:	232d      	movs	r3, #45	@ 0x2d
 80233ea:	426d      	negs	r5, r5
 80233ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80233f0:	4859      	ldr	r0, [pc, #356]	@ (8023558 <_printf_i+0x238>)
 80233f2:	230a      	movs	r3, #10
 80233f4:	e011      	b.n	802341a <_printf_i+0xfa>
 80233f6:	6821      	ldr	r1, [r4, #0]
 80233f8:	6833      	ldr	r3, [r6, #0]
 80233fa:	0608      	lsls	r0, r1, #24
 80233fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8023400:	d402      	bmi.n	8023408 <_printf_i+0xe8>
 8023402:	0649      	lsls	r1, r1, #25
 8023404:	bf48      	it	mi
 8023406:	b2ad      	uxthmi	r5, r5
 8023408:	2f6f      	cmp	r7, #111	@ 0x6f
 802340a:	4853      	ldr	r0, [pc, #332]	@ (8023558 <_printf_i+0x238>)
 802340c:	6033      	str	r3, [r6, #0]
 802340e:	bf14      	ite	ne
 8023410:	230a      	movne	r3, #10
 8023412:	2308      	moveq	r3, #8
 8023414:	2100      	movs	r1, #0
 8023416:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802341a:	6866      	ldr	r6, [r4, #4]
 802341c:	60a6      	str	r6, [r4, #8]
 802341e:	2e00      	cmp	r6, #0
 8023420:	bfa2      	ittt	ge
 8023422:	6821      	ldrge	r1, [r4, #0]
 8023424:	f021 0104 	bicge.w	r1, r1, #4
 8023428:	6021      	strge	r1, [r4, #0]
 802342a:	b90d      	cbnz	r5, 8023430 <_printf_i+0x110>
 802342c:	2e00      	cmp	r6, #0
 802342e:	d04b      	beq.n	80234c8 <_printf_i+0x1a8>
 8023430:	4616      	mov	r6, r2
 8023432:	fbb5 f1f3 	udiv	r1, r5, r3
 8023436:	fb03 5711 	mls	r7, r3, r1, r5
 802343a:	5dc7      	ldrb	r7, [r0, r7]
 802343c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8023440:	462f      	mov	r7, r5
 8023442:	42bb      	cmp	r3, r7
 8023444:	460d      	mov	r5, r1
 8023446:	d9f4      	bls.n	8023432 <_printf_i+0x112>
 8023448:	2b08      	cmp	r3, #8
 802344a:	d10b      	bne.n	8023464 <_printf_i+0x144>
 802344c:	6823      	ldr	r3, [r4, #0]
 802344e:	07df      	lsls	r7, r3, #31
 8023450:	d508      	bpl.n	8023464 <_printf_i+0x144>
 8023452:	6923      	ldr	r3, [r4, #16]
 8023454:	6861      	ldr	r1, [r4, #4]
 8023456:	4299      	cmp	r1, r3
 8023458:	bfde      	ittt	le
 802345a:	2330      	movle	r3, #48	@ 0x30
 802345c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8023460:	f106 36ff 	addle.w	r6, r6, #4294967295
 8023464:	1b92      	subs	r2, r2, r6
 8023466:	6122      	str	r2, [r4, #16]
 8023468:	f8cd a000 	str.w	sl, [sp]
 802346c:	464b      	mov	r3, r9
 802346e:	aa03      	add	r2, sp, #12
 8023470:	4621      	mov	r1, r4
 8023472:	4640      	mov	r0, r8
 8023474:	f7ff fee6 	bl	8023244 <_printf_common>
 8023478:	3001      	adds	r0, #1
 802347a:	d14a      	bne.n	8023512 <_printf_i+0x1f2>
 802347c:	f04f 30ff 	mov.w	r0, #4294967295
 8023480:	b004      	add	sp, #16
 8023482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023486:	6823      	ldr	r3, [r4, #0]
 8023488:	f043 0320 	orr.w	r3, r3, #32
 802348c:	6023      	str	r3, [r4, #0]
 802348e:	4833      	ldr	r0, [pc, #204]	@ (802355c <_printf_i+0x23c>)
 8023490:	2778      	movs	r7, #120	@ 0x78
 8023492:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8023496:	6823      	ldr	r3, [r4, #0]
 8023498:	6831      	ldr	r1, [r6, #0]
 802349a:	061f      	lsls	r7, r3, #24
 802349c:	f851 5b04 	ldr.w	r5, [r1], #4
 80234a0:	d402      	bmi.n	80234a8 <_printf_i+0x188>
 80234a2:	065f      	lsls	r7, r3, #25
 80234a4:	bf48      	it	mi
 80234a6:	b2ad      	uxthmi	r5, r5
 80234a8:	6031      	str	r1, [r6, #0]
 80234aa:	07d9      	lsls	r1, r3, #31
 80234ac:	bf44      	itt	mi
 80234ae:	f043 0320 	orrmi.w	r3, r3, #32
 80234b2:	6023      	strmi	r3, [r4, #0]
 80234b4:	b11d      	cbz	r5, 80234be <_printf_i+0x19e>
 80234b6:	2310      	movs	r3, #16
 80234b8:	e7ac      	b.n	8023414 <_printf_i+0xf4>
 80234ba:	4827      	ldr	r0, [pc, #156]	@ (8023558 <_printf_i+0x238>)
 80234bc:	e7e9      	b.n	8023492 <_printf_i+0x172>
 80234be:	6823      	ldr	r3, [r4, #0]
 80234c0:	f023 0320 	bic.w	r3, r3, #32
 80234c4:	6023      	str	r3, [r4, #0]
 80234c6:	e7f6      	b.n	80234b6 <_printf_i+0x196>
 80234c8:	4616      	mov	r6, r2
 80234ca:	e7bd      	b.n	8023448 <_printf_i+0x128>
 80234cc:	6833      	ldr	r3, [r6, #0]
 80234ce:	6825      	ldr	r5, [r4, #0]
 80234d0:	6961      	ldr	r1, [r4, #20]
 80234d2:	1d18      	adds	r0, r3, #4
 80234d4:	6030      	str	r0, [r6, #0]
 80234d6:	062e      	lsls	r6, r5, #24
 80234d8:	681b      	ldr	r3, [r3, #0]
 80234da:	d501      	bpl.n	80234e0 <_printf_i+0x1c0>
 80234dc:	6019      	str	r1, [r3, #0]
 80234de:	e002      	b.n	80234e6 <_printf_i+0x1c6>
 80234e0:	0668      	lsls	r0, r5, #25
 80234e2:	d5fb      	bpl.n	80234dc <_printf_i+0x1bc>
 80234e4:	8019      	strh	r1, [r3, #0]
 80234e6:	2300      	movs	r3, #0
 80234e8:	6123      	str	r3, [r4, #16]
 80234ea:	4616      	mov	r6, r2
 80234ec:	e7bc      	b.n	8023468 <_printf_i+0x148>
 80234ee:	6833      	ldr	r3, [r6, #0]
 80234f0:	1d1a      	adds	r2, r3, #4
 80234f2:	6032      	str	r2, [r6, #0]
 80234f4:	681e      	ldr	r6, [r3, #0]
 80234f6:	6862      	ldr	r2, [r4, #4]
 80234f8:	2100      	movs	r1, #0
 80234fa:	4630      	mov	r0, r6
 80234fc:	f7dc ff08 	bl	8000310 <memchr>
 8023500:	b108      	cbz	r0, 8023506 <_printf_i+0x1e6>
 8023502:	1b80      	subs	r0, r0, r6
 8023504:	6060      	str	r0, [r4, #4]
 8023506:	6863      	ldr	r3, [r4, #4]
 8023508:	6123      	str	r3, [r4, #16]
 802350a:	2300      	movs	r3, #0
 802350c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023510:	e7aa      	b.n	8023468 <_printf_i+0x148>
 8023512:	6923      	ldr	r3, [r4, #16]
 8023514:	4632      	mov	r2, r6
 8023516:	4649      	mov	r1, r9
 8023518:	4640      	mov	r0, r8
 802351a:	47d0      	blx	sl
 802351c:	3001      	adds	r0, #1
 802351e:	d0ad      	beq.n	802347c <_printf_i+0x15c>
 8023520:	6823      	ldr	r3, [r4, #0]
 8023522:	079b      	lsls	r3, r3, #30
 8023524:	d413      	bmi.n	802354e <_printf_i+0x22e>
 8023526:	68e0      	ldr	r0, [r4, #12]
 8023528:	9b03      	ldr	r3, [sp, #12]
 802352a:	4298      	cmp	r0, r3
 802352c:	bfb8      	it	lt
 802352e:	4618      	movlt	r0, r3
 8023530:	e7a6      	b.n	8023480 <_printf_i+0x160>
 8023532:	2301      	movs	r3, #1
 8023534:	4632      	mov	r2, r6
 8023536:	4649      	mov	r1, r9
 8023538:	4640      	mov	r0, r8
 802353a:	47d0      	blx	sl
 802353c:	3001      	adds	r0, #1
 802353e:	d09d      	beq.n	802347c <_printf_i+0x15c>
 8023540:	3501      	adds	r5, #1
 8023542:	68e3      	ldr	r3, [r4, #12]
 8023544:	9903      	ldr	r1, [sp, #12]
 8023546:	1a5b      	subs	r3, r3, r1
 8023548:	42ab      	cmp	r3, r5
 802354a:	dcf2      	bgt.n	8023532 <_printf_i+0x212>
 802354c:	e7eb      	b.n	8023526 <_printf_i+0x206>
 802354e:	2500      	movs	r5, #0
 8023550:	f104 0619 	add.w	r6, r4, #25
 8023554:	e7f5      	b.n	8023542 <_printf_i+0x222>
 8023556:	bf00      	nop
 8023558:	0802c30b 	.word	0x0802c30b
 802355c:	0802c31c 	.word	0x0802c31c

08023560 <std>:
 8023560:	2300      	movs	r3, #0
 8023562:	b510      	push	{r4, lr}
 8023564:	4604      	mov	r4, r0
 8023566:	e9c0 3300 	strd	r3, r3, [r0]
 802356a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802356e:	6083      	str	r3, [r0, #8]
 8023570:	8181      	strh	r1, [r0, #12]
 8023572:	6643      	str	r3, [r0, #100]	@ 0x64
 8023574:	81c2      	strh	r2, [r0, #14]
 8023576:	6183      	str	r3, [r0, #24]
 8023578:	4619      	mov	r1, r3
 802357a:	2208      	movs	r2, #8
 802357c:	305c      	adds	r0, #92	@ 0x5c
 802357e:	f000 f930 	bl	80237e2 <memset>
 8023582:	4b0d      	ldr	r3, [pc, #52]	@ (80235b8 <std+0x58>)
 8023584:	6263      	str	r3, [r4, #36]	@ 0x24
 8023586:	4b0d      	ldr	r3, [pc, #52]	@ (80235bc <std+0x5c>)
 8023588:	62a3      	str	r3, [r4, #40]	@ 0x28
 802358a:	4b0d      	ldr	r3, [pc, #52]	@ (80235c0 <std+0x60>)
 802358c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802358e:	4b0d      	ldr	r3, [pc, #52]	@ (80235c4 <std+0x64>)
 8023590:	6323      	str	r3, [r4, #48]	@ 0x30
 8023592:	4b0d      	ldr	r3, [pc, #52]	@ (80235c8 <std+0x68>)
 8023594:	6224      	str	r4, [r4, #32]
 8023596:	429c      	cmp	r4, r3
 8023598:	d006      	beq.n	80235a8 <std+0x48>
 802359a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802359e:	4294      	cmp	r4, r2
 80235a0:	d002      	beq.n	80235a8 <std+0x48>
 80235a2:	33d0      	adds	r3, #208	@ 0xd0
 80235a4:	429c      	cmp	r4, r3
 80235a6:	d105      	bne.n	80235b4 <std+0x54>
 80235a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80235ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80235b0:	f000 b9a4 	b.w	80238fc <__retarget_lock_init_recursive>
 80235b4:	bd10      	pop	{r4, pc}
 80235b6:	bf00      	nop
 80235b8:	08023709 	.word	0x08023709
 80235bc:	0802372b 	.word	0x0802372b
 80235c0:	08023763 	.word	0x08023763
 80235c4:	08023787 	.word	0x08023787
 80235c8:	24000a50 	.word	0x24000a50

080235cc <stdio_exit_handler>:
 80235cc:	4a02      	ldr	r2, [pc, #8]	@ (80235d8 <stdio_exit_handler+0xc>)
 80235ce:	4903      	ldr	r1, [pc, #12]	@ (80235dc <stdio_exit_handler+0x10>)
 80235d0:	4803      	ldr	r0, [pc, #12]	@ (80235e0 <stdio_exit_handler+0x14>)
 80235d2:	f000 b869 	b.w	80236a8 <_fwalk_sglue>
 80235d6:	bf00      	nop
 80235d8:	24000070 	.word	0x24000070
 80235dc:	08025001 	.word	0x08025001
 80235e0:	24000080 	.word	0x24000080

080235e4 <cleanup_stdio>:
 80235e4:	6841      	ldr	r1, [r0, #4]
 80235e6:	4b0c      	ldr	r3, [pc, #48]	@ (8023618 <cleanup_stdio+0x34>)
 80235e8:	4299      	cmp	r1, r3
 80235ea:	b510      	push	{r4, lr}
 80235ec:	4604      	mov	r4, r0
 80235ee:	d001      	beq.n	80235f4 <cleanup_stdio+0x10>
 80235f0:	f001 fd06 	bl	8025000 <_fflush_r>
 80235f4:	68a1      	ldr	r1, [r4, #8]
 80235f6:	4b09      	ldr	r3, [pc, #36]	@ (802361c <cleanup_stdio+0x38>)
 80235f8:	4299      	cmp	r1, r3
 80235fa:	d002      	beq.n	8023602 <cleanup_stdio+0x1e>
 80235fc:	4620      	mov	r0, r4
 80235fe:	f001 fcff 	bl	8025000 <_fflush_r>
 8023602:	68e1      	ldr	r1, [r4, #12]
 8023604:	4b06      	ldr	r3, [pc, #24]	@ (8023620 <cleanup_stdio+0x3c>)
 8023606:	4299      	cmp	r1, r3
 8023608:	d004      	beq.n	8023614 <cleanup_stdio+0x30>
 802360a:	4620      	mov	r0, r4
 802360c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023610:	f001 bcf6 	b.w	8025000 <_fflush_r>
 8023614:	bd10      	pop	{r4, pc}
 8023616:	bf00      	nop
 8023618:	24000a50 	.word	0x24000a50
 802361c:	24000ab8 	.word	0x24000ab8
 8023620:	24000b20 	.word	0x24000b20

08023624 <global_stdio_init.part.0>:
 8023624:	b510      	push	{r4, lr}
 8023626:	4b0b      	ldr	r3, [pc, #44]	@ (8023654 <global_stdio_init.part.0+0x30>)
 8023628:	4c0b      	ldr	r4, [pc, #44]	@ (8023658 <global_stdio_init.part.0+0x34>)
 802362a:	4a0c      	ldr	r2, [pc, #48]	@ (802365c <global_stdio_init.part.0+0x38>)
 802362c:	601a      	str	r2, [r3, #0]
 802362e:	4620      	mov	r0, r4
 8023630:	2200      	movs	r2, #0
 8023632:	2104      	movs	r1, #4
 8023634:	f7ff ff94 	bl	8023560 <std>
 8023638:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802363c:	2201      	movs	r2, #1
 802363e:	2109      	movs	r1, #9
 8023640:	f7ff ff8e 	bl	8023560 <std>
 8023644:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8023648:	2202      	movs	r2, #2
 802364a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802364e:	2112      	movs	r1, #18
 8023650:	f7ff bf86 	b.w	8023560 <std>
 8023654:	24000b88 	.word	0x24000b88
 8023658:	24000a50 	.word	0x24000a50
 802365c:	080235cd 	.word	0x080235cd

08023660 <__sfp_lock_acquire>:
 8023660:	4801      	ldr	r0, [pc, #4]	@ (8023668 <__sfp_lock_acquire+0x8>)
 8023662:	f000 b94c 	b.w	80238fe <__retarget_lock_acquire_recursive>
 8023666:	bf00      	nop
 8023668:	24000b91 	.word	0x24000b91

0802366c <__sfp_lock_release>:
 802366c:	4801      	ldr	r0, [pc, #4]	@ (8023674 <__sfp_lock_release+0x8>)
 802366e:	f000 b947 	b.w	8023900 <__retarget_lock_release_recursive>
 8023672:	bf00      	nop
 8023674:	24000b91 	.word	0x24000b91

08023678 <__sinit>:
 8023678:	b510      	push	{r4, lr}
 802367a:	4604      	mov	r4, r0
 802367c:	f7ff fff0 	bl	8023660 <__sfp_lock_acquire>
 8023680:	6a23      	ldr	r3, [r4, #32]
 8023682:	b11b      	cbz	r3, 802368c <__sinit+0x14>
 8023684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023688:	f7ff bff0 	b.w	802366c <__sfp_lock_release>
 802368c:	4b04      	ldr	r3, [pc, #16]	@ (80236a0 <__sinit+0x28>)
 802368e:	6223      	str	r3, [r4, #32]
 8023690:	4b04      	ldr	r3, [pc, #16]	@ (80236a4 <__sinit+0x2c>)
 8023692:	681b      	ldr	r3, [r3, #0]
 8023694:	2b00      	cmp	r3, #0
 8023696:	d1f5      	bne.n	8023684 <__sinit+0xc>
 8023698:	f7ff ffc4 	bl	8023624 <global_stdio_init.part.0>
 802369c:	e7f2      	b.n	8023684 <__sinit+0xc>
 802369e:	bf00      	nop
 80236a0:	080235e5 	.word	0x080235e5
 80236a4:	24000b88 	.word	0x24000b88

080236a8 <_fwalk_sglue>:
 80236a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80236ac:	4607      	mov	r7, r0
 80236ae:	4688      	mov	r8, r1
 80236b0:	4614      	mov	r4, r2
 80236b2:	2600      	movs	r6, #0
 80236b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80236b8:	f1b9 0901 	subs.w	r9, r9, #1
 80236bc:	d505      	bpl.n	80236ca <_fwalk_sglue+0x22>
 80236be:	6824      	ldr	r4, [r4, #0]
 80236c0:	2c00      	cmp	r4, #0
 80236c2:	d1f7      	bne.n	80236b4 <_fwalk_sglue+0xc>
 80236c4:	4630      	mov	r0, r6
 80236c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80236ca:	89ab      	ldrh	r3, [r5, #12]
 80236cc:	2b01      	cmp	r3, #1
 80236ce:	d907      	bls.n	80236e0 <_fwalk_sglue+0x38>
 80236d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80236d4:	3301      	adds	r3, #1
 80236d6:	d003      	beq.n	80236e0 <_fwalk_sglue+0x38>
 80236d8:	4629      	mov	r1, r5
 80236da:	4638      	mov	r0, r7
 80236dc:	47c0      	blx	r8
 80236de:	4306      	orrs	r6, r0
 80236e0:	3568      	adds	r5, #104	@ 0x68
 80236e2:	e7e9      	b.n	80236b8 <_fwalk_sglue+0x10>

080236e4 <iprintf>:
 80236e4:	b40f      	push	{r0, r1, r2, r3}
 80236e6:	b507      	push	{r0, r1, r2, lr}
 80236e8:	4906      	ldr	r1, [pc, #24]	@ (8023704 <iprintf+0x20>)
 80236ea:	ab04      	add	r3, sp, #16
 80236ec:	6808      	ldr	r0, [r1, #0]
 80236ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80236f2:	6881      	ldr	r1, [r0, #8]
 80236f4:	9301      	str	r3, [sp, #4]
 80236f6:	f001 fae7 	bl	8024cc8 <_vfiprintf_r>
 80236fa:	b003      	add	sp, #12
 80236fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8023700:	b004      	add	sp, #16
 8023702:	4770      	bx	lr
 8023704:	2400007c 	.word	0x2400007c

08023708 <__sread>:
 8023708:	b510      	push	{r4, lr}
 802370a:	460c      	mov	r4, r1
 802370c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023710:	f000 f896 	bl	8023840 <_read_r>
 8023714:	2800      	cmp	r0, #0
 8023716:	bfab      	itete	ge
 8023718:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802371a:	89a3      	ldrhlt	r3, [r4, #12]
 802371c:	181b      	addge	r3, r3, r0
 802371e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8023722:	bfac      	ite	ge
 8023724:	6563      	strge	r3, [r4, #84]	@ 0x54
 8023726:	81a3      	strhlt	r3, [r4, #12]
 8023728:	bd10      	pop	{r4, pc}

0802372a <__swrite>:
 802372a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802372e:	461f      	mov	r7, r3
 8023730:	898b      	ldrh	r3, [r1, #12]
 8023732:	05db      	lsls	r3, r3, #23
 8023734:	4605      	mov	r5, r0
 8023736:	460c      	mov	r4, r1
 8023738:	4616      	mov	r6, r2
 802373a:	d505      	bpl.n	8023748 <__swrite+0x1e>
 802373c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023740:	2302      	movs	r3, #2
 8023742:	2200      	movs	r2, #0
 8023744:	f000 f86a 	bl	802381c <_lseek_r>
 8023748:	89a3      	ldrh	r3, [r4, #12]
 802374a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802374e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8023752:	81a3      	strh	r3, [r4, #12]
 8023754:	4632      	mov	r2, r6
 8023756:	463b      	mov	r3, r7
 8023758:	4628      	mov	r0, r5
 802375a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802375e:	f000 b891 	b.w	8023884 <_write_r>

08023762 <__sseek>:
 8023762:	b510      	push	{r4, lr}
 8023764:	460c      	mov	r4, r1
 8023766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802376a:	f000 f857 	bl	802381c <_lseek_r>
 802376e:	1c43      	adds	r3, r0, #1
 8023770:	89a3      	ldrh	r3, [r4, #12]
 8023772:	bf15      	itete	ne
 8023774:	6560      	strne	r0, [r4, #84]	@ 0x54
 8023776:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802377a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802377e:	81a3      	strheq	r3, [r4, #12]
 8023780:	bf18      	it	ne
 8023782:	81a3      	strhne	r3, [r4, #12]
 8023784:	bd10      	pop	{r4, pc}

08023786 <__sclose>:
 8023786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802378a:	f000 b837 	b.w	80237fc <_close_r>

0802378e <memcmp>:
 802378e:	b510      	push	{r4, lr}
 8023790:	3901      	subs	r1, #1
 8023792:	4402      	add	r2, r0
 8023794:	4290      	cmp	r0, r2
 8023796:	d101      	bne.n	802379c <memcmp+0xe>
 8023798:	2000      	movs	r0, #0
 802379a:	e005      	b.n	80237a8 <memcmp+0x1a>
 802379c:	7803      	ldrb	r3, [r0, #0]
 802379e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80237a2:	42a3      	cmp	r3, r4
 80237a4:	d001      	beq.n	80237aa <memcmp+0x1c>
 80237a6:	1b18      	subs	r0, r3, r4
 80237a8:	bd10      	pop	{r4, pc}
 80237aa:	3001      	adds	r0, #1
 80237ac:	e7f2      	b.n	8023794 <memcmp+0x6>

080237ae <memmove>:
 80237ae:	4288      	cmp	r0, r1
 80237b0:	b510      	push	{r4, lr}
 80237b2:	eb01 0402 	add.w	r4, r1, r2
 80237b6:	d902      	bls.n	80237be <memmove+0x10>
 80237b8:	4284      	cmp	r4, r0
 80237ba:	4623      	mov	r3, r4
 80237bc:	d807      	bhi.n	80237ce <memmove+0x20>
 80237be:	1e43      	subs	r3, r0, #1
 80237c0:	42a1      	cmp	r1, r4
 80237c2:	d008      	beq.n	80237d6 <memmove+0x28>
 80237c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80237c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80237cc:	e7f8      	b.n	80237c0 <memmove+0x12>
 80237ce:	4402      	add	r2, r0
 80237d0:	4601      	mov	r1, r0
 80237d2:	428a      	cmp	r2, r1
 80237d4:	d100      	bne.n	80237d8 <memmove+0x2a>
 80237d6:	bd10      	pop	{r4, pc}
 80237d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80237dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80237e0:	e7f7      	b.n	80237d2 <memmove+0x24>

080237e2 <memset>:
 80237e2:	4402      	add	r2, r0
 80237e4:	4603      	mov	r3, r0
 80237e6:	4293      	cmp	r3, r2
 80237e8:	d100      	bne.n	80237ec <memset+0xa>
 80237ea:	4770      	bx	lr
 80237ec:	f803 1b01 	strb.w	r1, [r3], #1
 80237f0:	e7f9      	b.n	80237e6 <memset+0x4>
	...

080237f4 <_localeconv_r>:
 80237f4:	4800      	ldr	r0, [pc, #0]	@ (80237f8 <_localeconv_r+0x4>)
 80237f6:	4770      	bx	lr
 80237f8:	240001bc 	.word	0x240001bc

080237fc <_close_r>:
 80237fc:	b538      	push	{r3, r4, r5, lr}
 80237fe:	4d06      	ldr	r5, [pc, #24]	@ (8023818 <_close_r+0x1c>)
 8023800:	2300      	movs	r3, #0
 8023802:	4604      	mov	r4, r0
 8023804:	4608      	mov	r0, r1
 8023806:	602b      	str	r3, [r5, #0]
 8023808:	f7df fe41 	bl	800348e <_close>
 802380c:	1c43      	adds	r3, r0, #1
 802380e:	d102      	bne.n	8023816 <_close_r+0x1a>
 8023810:	682b      	ldr	r3, [r5, #0]
 8023812:	b103      	cbz	r3, 8023816 <_close_r+0x1a>
 8023814:	6023      	str	r3, [r4, #0]
 8023816:	bd38      	pop	{r3, r4, r5, pc}
 8023818:	24000b8c 	.word	0x24000b8c

0802381c <_lseek_r>:
 802381c:	b538      	push	{r3, r4, r5, lr}
 802381e:	4d07      	ldr	r5, [pc, #28]	@ (802383c <_lseek_r+0x20>)
 8023820:	4604      	mov	r4, r0
 8023822:	4608      	mov	r0, r1
 8023824:	4611      	mov	r1, r2
 8023826:	2200      	movs	r2, #0
 8023828:	602a      	str	r2, [r5, #0]
 802382a:	461a      	mov	r2, r3
 802382c:	f7df fe56 	bl	80034dc <_lseek>
 8023830:	1c43      	adds	r3, r0, #1
 8023832:	d102      	bne.n	802383a <_lseek_r+0x1e>
 8023834:	682b      	ldr	r3, [r5, #0]
 8023836:	b103      	cbz	r3, 802383a <_lseek_r+0x1e>
 8023838:	6023      	str	r3, [r4, #0]
 802383a:	bd38      	pop	{r3, r4, r5, pc}
 802383c:	24000b8c 	.word	0x24000b8c

08023840 <_read_r>:
 8023840:	b538      	push	{r3, r4, r5, lr}
 8023842:	4d07      	ldr	r5, [pc, #28]	@ (8023860 <_read_r+0x20>)
 8023844:	4604      	mov	r4, r0
 8023846:	4608      	mov	r0, r1
 8023848:	4611      	mov	r1, r2
 802384a:	2200      	movs	r2, #0
 802384c:	602a      	str	r2, [r5, #0]
 802384e:	461a      	mov	r2, r3
 8023850:	f7df fde4 	bl	800341c <_read>
 8023854:	1c43      	adds	r3, r0, #1
 8023856:	d102      	bne.n	802385e <_read_r+0x1e>
 8023858:	682b      	ldr	r3, [r5, #0]
 802385a:	b103      	cbz	r3, 802385e <_read_r+0x1e>
 802385c:	6023      	str	r3, [r4, #0]
 802385e:	bd38      	pop	{r3, r4, r5, pc}
 8023860:	24000b8c 	.word	0x24000b8c

08023864 <_sbrk_r>:
 8023864:	b538      	push	{r3, r4, r5, lr}
 8023866:	4d06      	ldr	r5, [pc, #24]	@ (8023880 <_sbrk_r+0x1c>)
 8023868:	2300      	movs	r3, #0
 802386a:	4604      	mov	r4, r0
 802386c:	4608      	mov	r0, r1
 802386e:	602b      	str	r3, [r5, #0]
 8023870:	f7df fe42 	bl	80034f8 <_sbrk>
 8023874:	1c43      	adds	r3, r0, #1
 8023876:	d102      	bne.n	802387e <_sbrk_r+0x1a>
 8023878:	682b      	ldr	r3, [r5, #0]
 802387a:	b103      	cbz	r3, 802387e <_sbrk_r+0x1a>
 802387c:	6023      	str	r3, [r4, #0]
 802387e:	bd38      	pop	{r3, r4, r5, pc}
 8023880:	24000b8c 	.word	0x24000b8c

08023884 <_write_r>:
 8023884:	b538      	push	{r3, r4, r5, lr}
 8023886:	4d07      	ldr	r5, [pc, #28]	@ (80238a4 <_write_r+0x20>)
 8023888:	4604      	mov	r4, r0
 802388a:	4608      	mov	r0, r1
 802388c:	4611      	mov	r1, r2
 802388e:	2200      	movs	r2, #0
 8023890:	602a      	str	r2, [r5, #0]
 8023892:	461a      	mov	r2, r3
 8023894:	f7df fddf 	bl	8003456 <_write>
 8023898:	1c43      	adds	r3, r0, #1
 802389a:	d102      	bne.n	80238a2 <_write_r+0x1e>
 802389c:	682b      	ldr	r3, [r5, #0]
 802389e:	b103      	cbz	r3, 80238a2 <_write_r+0x1e>
 80238a0:	6023      	str	r3, [r4, #0]
 80238a2:	bd38      	pop	{r3, r4, r5, pc}
 80238a4:	24000b8c 	.word	0x24000b8c

080238a8 <__errno>:
 80238a8:	4b01      	ldr	r3, [pc, #4]	@ (80238b0 <__errno+0x8>)
 80238aa:	6818      	ldr	r0, [r3, #0]
 80238ac:	4770      	bx	lr
 80238ae:	bf00      	nop
 80238b0:	2400007c 	.word	0x2400007c

080238b4 <__libc_init_array>:
 80238b4:	b570      	push	{r4, r5, r6, lr}
 80238b6:	4d0d      	ldr	r5, [pc, #52]	@ (80238ec <__libc_init_array+0x38>)
 80238b8:	4c0d      	ldr	r4, [pc, #52]	@ (80238f0 <__libc_init_array+0x3c>)
 80238ba:	1b64      	subs	r4, r4, r5
 80238bc:	10a4      	asrs	r4, r4, #2
 80238be:	2600      	movs	r6, #0
 80238c0:	42a6      	cmp	r6, r4
 80238c2:	d109      	bne.n	80238d8 <__libc_init_array+0x24>
 80238c4:	4d0b      	ldr	r5, [pc, #44]	@ (80238f4 <__libc_init_array+0x40>)
 80238c6:	4c0c      	ldr	r4, [pc, #48]	@ (80238f8 <__libc_init_array+0x44>)
 80238c8:	f001 fd0e 	bl	80252e8 <_init>
 80238cc:	1b64      	subs	r4, r4, r5
 80238ce:	10a4      	asrs	r4, r4, #2
 80238d0:	2600      	movs	r6, #0
 80238d2:	42a6      	cmp	r6, r4
 80238d4:	d105      	bne.n	80238e2 <__libc_init_array+0x2e>
 80238d6:	bd70      	pop	{r4, r5, r6, pc}
 80238d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80238dc:	4798      	blx	r3
 80238de:	3601      	adds	r6, #1
 80238e0:	e7ee      	b.n	80238c0 <__libc_init_array+0xc>
 80238e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80238e6:	4798      	blx	r3
 80238e8:	3601      	adds	r6, #1
 80238ea:	e7f2      	b.n	80238d2 <__libc_init_array+0x1e>
 80238ec:	0802c634 	.word	0x0802c634
 80238f0:	0802c634 	.word	0x0802c634
 80238f4:	0802c634 	.word	0x0802c634
 80238f8:	0802c63c 	.word	0x0802c63c

080238fc <__retarget_lock_init_recursive>:
 80238fc:	4770      	bx	lr

080238fe <__retarget_lock_acquire_recursive>:
 80238fe:	4770      	bx	lr

08023900 <__retarget_lock_release_recursive>:
 8023900:	4770      	bx	lr

08023902 <memcpy>:
 8023902:	440a      	add	r2, r1
 8023904:	4291      	cmp	r1, r2
 8023906:	f100 33ff 	add.w	r3, r0, #4294967295
 802390a:	d100      	bne.n	802390e <memcpy+0xc>
 802390c:	4770      	bx	lr
 802390e:	b510      	push	{r4, lr}
 8023910:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023914:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023918:	4291      	cmp	r1, r2
 802391a:	d1f9      	bne.n	8023910 <memcpy+0xe>
 802391c:	bd10      	pop	{r4, pc}

0802391e <quorem>:
 802391e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023922:	6903      	ldr	r3, [r0, #16]
 8023924:	690c      	ldr	r4, [r1, #16]
 8023926:	42a3      	cmp	r3, r4
 8023928:	4607      	mov	r7, r0
 802392a:	db7e      	blt.n	8023a2a <quorem+0x10c>
 802392c:	3c01      	subs	r4, #1
 802392e:	f101 0814 	add.w	r8, r1, #20
 8023932:	00a3      	lsls	r3, r4, #2
 8023934:	f100 0514 	add.w	r5, r0, #20
 8023938:	9300      	str	r3, [sp, #0]
 802393a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802393e:	9301      	str	r3, [sp, #4]
 8023940:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8023944:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8023948:	3301      	adds	r3, #1
 802394a:	429a      	cmp	r2, r3
 802394c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8023950:	fbb2 f6f3 	udiv	r6, r2, r3
 8023954:	d32e      	bcc.n	80239b4 <quorem+0x96>
 8023956:	f04f 0a00 	mov.w	sl, #0
 802395a:	46c4      	mov	ip, r8
 802395c:	46ae      	mov	lr, r5
 802395e:	46d3      	mov	fp, sl
 8023960:	f85c 3b04 	ldr.w	r3, [ip], #4
 8023964:	b298      	uxth	r0, r3
 8023966:	fb06 a000 	mla	r0, r6, r0, sl
 802396a:	0c02      	lsrs	r2, r0, #16
 802396c:	0c1b      	lsrs	r3, r3, #16
 802396e:	fb06 2303 	mla	r3, r6, r3, r2
 8023972:	f8de 2000 	ldr.w	r2, [lr]
 8023976:	b280      	uxth	r0, r0
 8023978:	b292      	uxth	r2, r2
 802397a:	1a12      	subs	r2, r2, r0
 802397c:	445a      	add	r2, fp
 802397e:	f8de 0000 	ldr.w	r0, [lr]
 8023982:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8023986:	b29b      	uxth	r3, r3
 8023988:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 802398c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8023990:	b292      	uxth	r2, r2
 8023992:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8023996:	45e1      	cmp	r9, ip
 8023998:	f84e 2b04 	str.w	r2, [lr], #4
 802399c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80239a0:	d2de      	bcs.n	8023960 <quorem+0x42>
 80239a2:	9b00      	ldr	r3, [sp, #0]
 80239a4:	58eb      	ldr	r3, [r5, r3]
 80239a6:	b92b      	cbnz	r3, 80239b4 <quorem+0x96>
 80239a8:	9b01      	ldr	r3, [sp, #4]
 80239aa:	3b04      	subs	r3, #4
 80239ac:	429d      	cmp	r5, r3
 80239ae:	461a      	mov	r2, r3
 80239b0:	d32f      	bcc.n	8023a12 <quorem+0xf4>
 80239b2:	613c      	str	r4, [r7, #16]
 80239b4:	4638      	mov	r0, r7
 80239b6:	f001 f855 	bl	8024a64 <__mcmp>
 80239ba:	2800      	cmp	r0, #0
 80239bc:	db25      	blt.n	8023a0a <quorem+0xec>
 80239be:	4629      	mov	r1, r5
 80239c0:	2000      	movs	r0, #0
 80239c2:	f858 2b04 	ldr.w	r2, [r8], #4
 80239c6:	f8d1 c000 	ldr.w	ip, [r1]
 80239ca:	fa1f fe82 	uxth.w	lr, r2
 80239ce:	fa1f f38c 	uxth.w	r3, ip
 80239d2:	eba3 030e 	sub.w	r3, r3, lr
 80239d6:	4403      	add	r3, r0
 80239d8:	0c12      	lsrs	r2, r2, #16
 80239da:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80239de:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80239e2:	b29b      	uxth	r3, r3
 80239e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80239e8:	45c1      	cmp	r9, r8
 80239ea:	f841 3b04 	str.w	r3, [r1], #4
 80239ee:	ea4f 4022 	mov.w	r0, r2, asr #16
 80239f2:	d2e6      	bcs.n	80239c2 <quorem+0xa4>
 80239f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80239f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80239fc:	b922      	cbnz	r2, 8023a08 <quorem+0xea>
 80239fe:	3b04      	subs	r3, #4
 8023a00:	429d      	cmp	r5, r3
 8023a02:	461a      	mov	r2, r3
 8023a04:	d30b      	bcc.n	8023a1e <quorem+0x100>
 8023a06:	613c      	str	r4, [r7, #16]
 8023a08:	3601      	adds	r6, #1
 8023a0a:	4630      	mov	r0, r6
 8023a0c:	b003      	add	sp, #12
 8023a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023a12:	6812      	ldr	r2, [r2, #0]
 8023a14:	3b04      	subs	r3, #4
 8023a16:	2a00      	cmp	r2, #0
 8023a18:	d1cb      	bne.n	80239b2 <quorem+0x94>
 8023a1a:	3c01      	subs	r4, #1
 8023a1c:	e7c6      	b.n	80239ac <quorem+0x8e>
 8023a1e:	6812      	ldr	r2, [r2, #0]
 8023a20:	3b04      	subs	r3, #4
 8023a22:	2a00      	cmp	r2, #0
 8023a24:	d1ef      	bne.n	8023a06 <quorem+0xe8>
 8023a26:	3c01      	subs	r4, #1
 8023a28:	e7ea      	b.n	8023a00 <quorem+0xe2>
 8023a2a:	2000      	movs	r0, #0
 8023a2c:	e7ee      	b.n	8023a0c <quorem+0xee>
	...

08023a30 <_dtoa_r>:
 8023a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a34:	ed2d 8b02 	vpush	{d8}
 8023a38:	69c7      	ldr	r7, [r0, #28]
 8023a3a:	b091      	sub	sp, #68	@ 0x44
 8023a3c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8023a40:	ec55 4b10 	vmov	r4, r5, d0
 8023a44:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8023a46:	9107      	str	r1, [sp, #28]
 8023a48:	4681      	mov	r9, r0
 8023a4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8023a4c:	930d      	str	r3, [sp, #52]	@ 0x34
 8023a4e:	b97f      	cbnz	r7, 8023a70 <_dtoa_r+0x40>
 8023a50:	2010      	movs	r0, #16
 8023a52:	f7ff f88f 	bl	8022b74 <malloc>
 8023a56:	4602      	mov	r2, r0
 8023a58:	f8c9 001c 	str.w	r0, [r9, #28]
 8023a5c:	b920      	cbnz	r0, 8023a68 <_dtoa_r+0x38>
 8023a5e:	4ba0      	ldr	r3, [pc, #640]	@ (8023ce0 <_dtoa_r+0x2b0>)
 8023a60:	21ef      	movs	r1, #239	@ 0xef
 8023a62:	48a0      	ldr	r0, [pc, #640]	@ (8023ce4 <_dtoa_r+0x2b4>)
 8023a64:	f7ea fcc6 	bl	800e3f4 <__assert_func>
 8023a68:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8023a6c:	6007      	str	r7, [r0, #0]
 8023a6e:	60c7      	str	r7, [r0, #12]
 8023a70:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8023a74:	6819      	ldr	r1, [r3, #0]
 8023a76:	b159      	cbz	r1, 8023a90 <_dtoa_r+0x60>
 8023a78:	685a      	ldr	r2, [r3, #4]
 8023a7a:	604a      	str	r2, [r1, #4]
 8023a7c:	2301      	movs	r3, #1
 8023a7e:	4093      	lsls	r3, r2
 8023a80:	608b      	str	r3, [r1, #8]
 8023a82:	4648      	mov	r0, r9
 8023a84:	f000 fdb4 	bl	80245f0 <_Bfree>
 8023a88:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8023a8c:	2200      	movs	r2, #0
 8023a8e:	601a      	str	r2, [r3, #0]
 8023a90:	1e2b      	subs	r3, r5, #0
 8023a92:	bfbb      	ittet	lt
 8023a94:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8023a98:	9303      	strlt	r3, [sp, #12]
 8023a9a:	2300      	movge	r3, #0
 8023a9c:	2201      	movlt	r2, #1
 8023a9e:	bfac      	ite	ge
 8023aa0:	6033      	strge	r3, [r6, #0]
 8023aa2:	6032      	strlt	r2, [r6, #0]
 8023aa4:	4b90      	ldr	r3, [pc, #576]	@ (8023ce8 <_dtoa_r+0x2b8>)
 8023aa6:	9e03      	ldr	r6, [sp, #12]
 8023aa8:	43b3      	bics	r3, r6
 8023aaa:	d110      	bne.n	8023ace <_dtoa_r+0x9e>
 8023aac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8023aae:	f242 730f 	movw	r3, #9999	@ 0x270f
 8023ab2:	6013      	str	r3, [r2, #0]
 8023ab4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8023ab8:	4323      	orrs	r3, r4
 8023aba:	f000 84de 	beq.w	802447a <_dtoa_r+0xa4a>
 8023abe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023ac0:	4f8a      	ldr	r7, [pc, #552]	@ (8023cec <_dtoa_r+0x2bc>)
 8023ac2:	2b00      	cmp	r3, #0
 8023ac4:	f000 84e0 	beq.w	8024488 <_dtoa_r+0xa58>
 8023ac8:	1cfb      	adds	r3, r7, #3
 8023aca:	f000 bcdb 	b.w	8024484 <_dtoa_r+0xa54>
 8023ace:	ed9d 8b02 	vldr	d8, [sp, #8]
 8023ad2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8023ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023ada:	d10a      	bne.n	8023af2 <_dtoa_r+0xc2>
 8023adc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8023ade:	2301      	movs	r3, #1
 8023ae0:	6013      	str	r3, [r2, #0]
 8023ae2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023ae4:	b113      	cbz	r3, 8023aec <_dtoa_r+0xbc>
 8023ae6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8023ae8:	4b81      	ldr	r3, [pc, #516]	@ (8023cf0 <_dtoa_r+0x2c0>)
 8023aea:	6013      	str	r3, [r2, #0]
 8023aec:	4f81      	ldr	r7, [pc, #516]	@ (8023cf4 <_dtoa_r+0x2c4>)
 8023aee:	f000 bccb 	b.w	8024488 <_dtoa_r+0xa58>
 8023af2:	aa0e      	add	r2, sp, #56	@ 0x38
 8023af4:	a90f      	add	r1, sp, #60	@ 0x3c
 8023af6:	4648      	mov	r0, r9
 8023af8:	eeb0 0b48 	vmov.f64	d0, d8
 8023afc:	f001 f862 	bl	8024bc4 <__d2b>
 8023b00:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8023b04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023b06:	9001      	str	r0, [sp, #4]
 8023b08:	2b00      	cmp	r3, #0
 8023b0a:	d045      	beq.n	8023b98 <_dtoa_r+0x168>
 8023b0c:	eeb0 7b48 	vmov.f64	d7, d8
 8023b10:	ee18 1a90 	vmov	r1, s17
 8023b14:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8023b18:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8023b1c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8023b20:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8023b24:	2500      	movs	r5, #0
 8023b26:	ee07 1a90 	vmov	s15, r1
 8023b2a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8023b2e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8023cc8 <_dtoa_r+0x298>
 8023b32:	ee37 7b46 	vsub.f64	d7, d7, d6
 8023b36:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8023cd0 <_dtoa_r+0x2a0>
 8023b3a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8023b3e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8023cd8 <_dtoa_r+0x2a8>
 8023b42:	ee07 3a90 	vmov	s15, r3
 8023b46:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8023b4a:	eeb0 7b46 	vmov.f64	d7, d6
 8023b4e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8023b52:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8023b56:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8023b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b5e:	ee16 8a90 	vmov	r8, s13
 8023b62:	d508      	bpl.n	8023b76 <_dtoa_r+0x146>
 8023b64:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8023b68:	eeb4 6b47 	vcmp.f64	d6, d7
 8023b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b70:	bf18      	it	ne
 8023b72:	f108 38ff 	addne.w	r8, r8, #4294967295
 8023b76:	f1b8 0f16 	cmp.w	r8, #22
 8023b7a:	d82b      	bhi.n	8023bd4 <_dtoa_r+0x1a4>
 8023b7c:	495e      	ldr	r1, [pc, #376]	@ (8023cf8 <_dtoa_r+0x2c8>)
 8023b7e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8023b82:	ed91 7b00 	vldr	d7, [r1]
 8023b86:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8023b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b8e:	d501      	bpl.n	8023b94 <_dtoa_r+0x164>
 8023b90:	f108 38ff 	add.w	r8, r8, #4294967295
 8023b94:	2100      	movs	r1, #0
 8023b96:	e01e      	b.n	8023bd6 <_dtoa_r+0x1a6>
 8023b98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023b9a:	4413      	add	r3, r2
 8023b9c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8023ba0:	2920      	cmp	r1, #32
 8023ba2:	bfc1      	itttt	gt
 8023ba4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8023ba8:	408e      	lslgt	r6, r1
 8023baa:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8023bae:	fa24 f101 	lsrgt.w	r1, r4, r1
 8023bb2:	bfd6      	itet	le
 8023bb4:	f1c1 0120 	rsble	r1, r1, #32
 8023bb8:	4331      	orrgt	r1, r6
 8023bba:	fa04 f101 	lslle.w	r1, r4, r1
 8023bbe:	ee07 1a90 	vmov	s15, r1
 8023bc2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8023bc6:	3b01      	subs	r3, #1
 8023bc8:	ee17 1a90 	vmov	r1, s15
 8023bcc:	2501      	movs	r5, #1
 8023bce:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8023bd2:	e7a8      	b.n	8023b26 <_dtoa_r+0xf6>
 8023bd4:	2101      	movs	r1, #1
 8023bd6:	1ad2      	subs	r2, r2, r3
 8023bd8:	1e53      	subs	r3, r2, #1
 8023bda:	9306      	str	r3, [sp, #24]
 8023bdc:	bf45      	ittet	mi
 8023bde:	f1c2 0301 	rsbmi	r3, r2, #1
 8023be2:	9305      	strmi	r3, [sp, #20]
 8023be4:	2300      	movpl	r3, #0
 8023be6:	2300      	movmi	r3, #0
 8023be8:	bf4c      	ite	mi
 8023bea:	9306      	strmi	r3, [sp, #24]
 8023bec:	9305      	strpl	r3, [sp, #20]
 8023bee:	f1b8 0f00 	cmp.w	r8, #0
 8023bf2:	910c      	str	r1, [sp, #48]	@ 0x30
 8023bf4:	db18      	blt.n	8023c28 <_dtoa_r+0x1f8>
 8023bf6:	9b06      	ldr	r3, [sp, #24]
 8023bf8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8023bfc:	4443      	add	r3, r8
 8023bfe:	9306      	str	r3, [sp, #24]
 8023c00:	2300      	movs	r3, #0
 8023c02:	9a07      	ldr	r2, [sp, #28]
 8023c04:	2a09      	cmp	r2, #9
 8023c06:	d849      	bhi.n	8023c9c <_dtoa_r+0x26c>
 8023c08:	2a05      	cmp	r2, #5
 8023c0a:	bfc4      	itt	gt
 8023c0c:	3a04      	subgt	r2, #4
 8023c0e:	9207      	strgt	r2, [sp, #28]
 8023c10:	9a07      	ldr	r2, [sp, #28]
 8023c12:	f1a2 0202 	sub.w	r2, r2, #2
 8023c16:	bfcc      	ite	gt
 8023c18:	2400      	movgt	r4, #0
 8023c1a:	2401      	movle	r4, #1
 8023c1c:	2a03      	cmp	r2, #3
 8023c1e:	d848      	bhi.n	8023cb2 <_dtoa_r+0x282>
 8023c20:	e8df f002 	tbb	[pc, r2]
 8023c24:	3a2c2e0b 	.word	0x3a2c2e0b
 8023c28:	9b05      	ldr	r3, [sp, #20]
 8023c2a:	2200      	movs	r2, #0
 8023c2c:	eba3 0308 	sub.w	r3, r3, r8
 8023c30:	9305      	str	r3, [sp, #20]
 8023c32:	920a      	str	r2, [sp, #40]	@ 0x28
 8023c34:	f1c8 0300 	rsb	r3, r8, #0
 8023c38:	e7e3      	b.n	8023c02 <_dtoa_r+0x1d2>
 8023c3a:	2200      	movs	r2, #0
 8023c3c:	9208      	str	r2, [sp, #32]
 8023c3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023c40:	2a00      	cmp	r2, #0
 8023c42:	dc39      	bgt.n	8023cb8 <_dtoa_r+0x288>
 8023c44:	f04f 0b01 	mov.w	fp, #1
 8023c48:	46da      	mov	sl, fp
 8023c4a:	465a      	mov	r2, fp
 8023c4c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8023c50:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8023c54:	2100      	movs	r1, #0
 8023c56:	2004      	movs	r0, #4
 8023c58:	f100 0614 	add.w	r6, r0, #20
 8023c5c:	4296      	cmp	r6, r2
 8023c5e:	d930      	bls.n	8023cc2 <_dtoa_r+0x292>
 8023c60:	6079      	str	r1, [r7, #4]
 8023c62:	4648      	mov	r0, r9
 8023c64:	9304      	str	r3, [sp, #16]
 8023c66:	f000 fc83 	bl	8024570 <_Balloc>
 8023c6a:	9b04      	ldr	r3, [sp, #16]
 8023c6c:	4607      	mov	r7, r0
 8023c6e:	2800      	cmp	r0, #0
 8023c70:	d146      	bne.n	8023d00 <_dtoa_r+0x2d0>
 8023c72:	4b22      	ldr	r3, [pc, #136]	@ (8023cfc <_dtoa_r+0x2cc>)
 8023c74:	4602      	mov	r2, r0
 8023c76:	f240 11af 	movw	r1, #431	@ 0x1af
 8023c7a:	e6f2      	b.n	8023a62 <_dtoa_r+0x32>
 8023c7c:	2201      	movs	r2, #1
 8023c7e:	e7dd      	b.n	8023c3c <_dtoa_r+0x20c>
 8023c80:	2200      	movs	r2, #0
 8023c82:	9208      	str	r2, [sp, #32]
 8023c84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023c86:	eb08 0b02 	add.w	fp, r8, r2
 8023c8a:	f10b 0a01 	add.w	sl, fp, #1
 8023c8e:	4652      	mov	r2, sl
 8023c90:	2a01      	cmp	r2, #1
 8023c92:	bfb8      	it	lt
 8023c94:	2201      	movlt	r2, #1
 8023c96:	e7db      	b.n	8023c50 <_dtoa_r+0x220>
 8023c98:	2201      	movs	r2, #1
 8023c9a:	e7f2      	b.n	8023c82 <_dtoa_r+0x252>
 8023c9c:	2401      	movs	r4, #1
 8023c9e:	2200      	movs	r2, #0
 8023ca0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8023ca4:	f04f 3bff 	mov.w	fp, #4294967295
 8023ca8:	2100      	movs	r1, #0
 8023caa:	46da      	mov	sl, fp
 8023cac:	2212      	movs	r2, #18
 8023cae:	9109      	str	r1, [sp, #36]	@ 0x24
 8023cb0:	e7ce      	b.n	8023c50 <_dtoa_r+0x220>
 8023cb2:	2201      	movs	r2, #1
 8023cb4:	9208      	str	r2, [sp, #32]
 8023cb6:	e7f5      	b.n	8023ca4 <_dtoa_r+0x274>
 8023cb8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8023cbc:	46da      	mov	sl, fp
 8023cbe:	465a      	mov	r2, fp
 8023cc0:	e7c6      	b.n	8023c50 <_dtoa_r+0x220>
 8023cc2:	3101      	adds	r1, #1
 8023cc4:	0040      	lsls	r0, r0, #1
 8023cc6:	e7c7      	b.n	8023c58 <_dtoa_r+0x228>
 8023cc8:	636f4361 	.word	0x636f4361
 8023ccc:	3fd287a7 	.word	0x3fd287a7
 8023cd0:	8b60c8b3 	.word	0x8b60c8b3
 8023cd4:	3fc68a28 	.word	0x3fc68a28
 8023cd8:	509f79fb 	.word	0x509f79fb
 8023cdc:	3fd34413 	.word	0x3fd34413
 8023ce0:	0802c33a 	.word	0x0802c33a
 8023ce4:	0802c351 	.word	0x0802c351
 8023ce8:	7ff00000 	.word	0x7ff00000
 8023cec:	0802c336 	.word	0x0802c336
 8023cf0:	0802c30a 	.word	0x0802c30a
 8023cf4:	0802c309 	.word	0x0802c309
 8023cf8:	0802c448 	.word	0x0802c448
 8023cfc:	0802c3a9 	.word	0x0802c3a9
 8023d00:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8023d04:	f1ba 0f0e 	cmp.w	sl, #14
 8023d08:	6010      	str	r0, [r2, #0]
 8023d0a:	d86f      	bhi.n	8023dec <_dtoa_r+0x3bc>
 8023d0c:	2c00      	cmp	r4, #0
 8023d0e:	d06d      	beq.n	8023dec <_dtoa_r+0x3bc>
 8023d10:	f1b8 0f00 	cmp.w	r8, #0
 8023d14:	f340 80c2 	ble.w	8023e9c <_dtoa_r+0x46c>
 8023d18:	4aca      	ldr	r2, [pc, #808]	@ (8024044 <_dtoa_r+0x614>)
 8023d1a:	f008 010f 	and.w	r1, r8, #15
 8023d1e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8023d22:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8023d26:	ed92 7b00 	vldr	d7, [r2]
 8023d2a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8023d2e:	f000 80a9 	beq.w	8023e84 <_dtoa_r+0x454>
 8023d32:	4ac5      	ldr	r2, [pc, #788]	@ (8024048 <_dtoa_r+0x618>)
 8023d34:	ed92 6b08 	vldr	d6, [r2, #32]
 8023d38:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8023d3c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8023d40:	f001 010f 	and.w	r1, r1, #15
 8023d44:	2203      	movs	r2, #3
 8023d46:	48c0      	ldr	r0, [pc, #768]	@ (8024048 <_dtoa_r+0x618>)
 8023d48:	2900      	cmp	r1, #0
 8023d4a:	f040 809d 	bne.w	8023e88 <_dtoa_r+0x458>
 8023d4e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8023d52:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8023d56:	ed8d 7b02 	vstr	d7, [sp, #8]
 8023d5a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8023d5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8023d60:	2900      	cmp	r1, #0
 8023d62:	f000 80c1 	beq.w	8023ee8 <_dtoa_r+0x4b8>
 8023d66:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8023d6a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8023d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023d72:	f140 80b9 	bpl.w	8023ee8 <_dtoa_r+0x4b8>
 8023d76:	f1ba 0f00 	cmp.w	sl, #0
 8023d7a:	f000 80b5 	beq.w	8023ee8 <_dtoa_r+0x4b8>
 8023d7e:	f1bb 0f00 	cmp.w	fp, #0
 8023d82:	dd31      	ble.n	8023de8 <_dtoa_r+0x3b8>
 8023d84:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8023d88:	ee27 7b06 	vmul.f64	d7, d7, d6
 8023d8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8023d90:	f108 31ff 	add.w	r1, r8, #4294967295
 8023d94:	9104      	str	r1, [sp, #16]
 8023d96:	3201      	adds	r2, #1
 8023d98:	465c      	mov	r4, fp
 8023d9a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8023d9e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8023da2:	ee07 2a90 	vmov	s15, r2
 8023da6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8023daa:	eea7 5b06 	vfma.f64	d5, d7, d6
 8023dae:	ee15 2a90 	vmov	r2, s11
 8023db2:	ec51 0b15 	vmov	r0, r1, d5
 8023db6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8023dba:	2c00      	cmp	r4, #0
 8023dbc:	f040 8098 	bne.w	8023ef0 <_dtoa_r+0x4c0>
 8023dc0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8023dc4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8023dc8:	ec41 0b17 	vmov	d7, r0, r1
 8023dcc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8023dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023dd4:	f300 8261 	bgt.w	802429a <_dtoa_r+0x86a>
 8023dd8:	eeb1 7b47 	vneg.f64	d7, d7
 8023ddc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8023de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023de4:	f100 80f5 	bmi.w	8023fd2 <_dtoa_r+0x5a2>
 8023de8:	ed8d 8b02 	vstr	d8, [sp, #8]
 8023dec:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8023dee:	2a00      	cmp	r2, #0
 8023df0:	f2c0 812c 	blt.w	802404c <_dtoa_r+0x61c>
 8023df4:	f1b8 0f0e 	cmp.w	r8, #14
 8023df8:	f300 8128 	bgt.w	802404c <_dtoa_r+0x61c>
 8023dfc:	4b91      	ldr	r3, [pc, #580]	@ (8024044 <_dtoa_r+0x614>)
 8023dfe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8023e02:	ed93 6b00 	vldr	d6, [r3]
 8023e06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023e08:	2b00      	cmp	r3, #0
 8023e0a:	da03      	bge.n	8023e14 <_dtoa_r+0x3e4>
 8023e0c:	f1ba 0f00 	cmp.w	sl, #0
 8023e10:	f340 80d2 	ble.w	8023fb8 <_dtoa_r+0x588>
 8023e14:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8023e18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8023e1c:	463e      	mov	r6, r7
 8023e1e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8023e22:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8023e26:	ee15 3a10 	vmov	r3, s10
 8023e2a:	3330      	adds	r3, #48	@ 0x30
 8023e2c:	f806 3b01 	strb.w	r3, [r6], #1
 8023e30:	1bf3      	subs	r3, r6, r7
 8023e32:	459a      	cmp	sl, r3
 8023e34:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8023e38:	eea3 7b46 	vfms.f64	d7, d3, d6
 8023e3c:	f040 80f8 	bne.w	8024030 <_dtoa_r+0x600>
 8023e40:	ee37 7b07 	vadd.f64	d7, d7, d7
 8023e44:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8023e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023e4c:	f300 80dd 	bgt.w	802400a <_dtoa_r+0x5da>
 8023e50:	eeb4 7b46 	vcmp.f64	d7, d6
 8023e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023e58:	d104      	bne.n	8023e64 <_dtoa_r+0x434>
 8023e5a:	ee15 3a10 	vmov	r3, s10
 8023e5e:	07db      	lsls	r3, r3, #31
 8023e60:	f100 80d3 	bmi.w	802400a <_dtoa_r+0x5da>
 8023e64:	9901      	ldr	r1, [sp, #4]
 8023e66:	4648      	mov	r0, r9
 8023e68:	f000 fbc2 	bl	80245f0 <_Bfree>
 8023e6c:	2300      	movs	r3, #0
 8023e6e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8023e70:	7033      	strb	r3, [r6, #0]
 8023e72:	f108 0301 	add.w	r3, r8, #1
 8023e76:	6013      	str	r3, [r2, #0]
 8023e78:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023e7a:	2b00      	cmp	r3, #0
 8023e7c:	f000 8304 	beq.w	8024488 <_dtoa_r+0xa58>
 8023e80:	601e      	str	r6, [r3, #0]
 8023e82:	e301      	b.n	8024488 <_dtoa_r+0xa58>
 8023e84:	2202      	movs	r2, #2
 8023e86:	e75e      	b.n	8023d46 <_dtoa_r+0x316>
 8023e88:	07cc      	lsls	r4, r1, #31
 8023e8a:	d504      	bpl.n	8023e96 <_dtoa_r+0x466>
 8023e8c:	ed90 6b00 	vldr	d6, [r0]
 8023e90:	3201      	adds	r2, #1
 8023e92:	ee27 7b06 	vmul.f64	d7, d7, d6
 8023e96:	1049      	asrs	r1, r1, #1
 8023e98:	3008      	adds	r0, #8
 8023e9a:	e755      	b.n	8023d48 <_dtoa_r+0x318>
 8023e9c:	d022      	beq.n	8023ee4 <_dtoa_r+0x4b4>
 8023e9e:	f1c8 0100 	rsb	r1, r8, #0
 8023ea2:	4a68      	ldr	r2, [pc, #416]	@ (8024044 <_dtoa_r+0x614>)
 8023ea4:	f001 000f 	and.w	r0, r1, #15
 8023ea8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8023eac:	ed92 7b00 	vldr	d7, [r2]
 8023eb0:	ee28 7b07 	vmul.f64	d7, d8, d7
 8023eb4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8023eb8:	4863      	ldr	r0, [pc, #396]	@ (8024048 <_dtoa_r+0x618>)
 8023eba:	1109      	asrs	r1, r1, #4
 8023ebc:	2400      	movs	r4, #0
 8023ebe:	2202      	movs	r2, #2
 8023ec0:	b929      	cbnz	r1, 8023ece <_dtoa_r+0x49e>
 8023ec2:	2c00      	cmp	r4, #0
 8023ec4:	f43f af49 	beq.w	8023d5a <_dtoa_r+0x32a>
 8023ec8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8023ecc:	e745      	b.n	8023d5a <_dtoa_r+0x32a>
 8023ece:	07ce      	lsls	r6, r1, #31
 8023ed0:	d505      	bpl.n	8023ede <_dtoa_r+0x4ae>
 8023ed2:	ed90 6b00 	vldr	d6, [r0]
 8023ed6:	3201      	adds	r2, #1
 8023ed8:	2401      	movs	r4, #1
 8023eda:	ee27 7b06 	vmul.f64	d7, d7, d6
 8023ede:	1049      	asrs	r1, r1, #1
 8023ee0:	3008      	adds	r0, #8
 8023ee2:	e7ed      	b.n	8023ec0 <_dtoa_r+0x490>
 8023ee4:	2202      	movs	r2, #2
 8023ee6:	e738      	b.n	8023d5a <_dtoa_r+0x32a>
 8023ee8:	f8cd 8010 	str.w	r8, [sp, #16]
 8023eec:	4654      	mov	r4, sl
 8023eee:	e754      	b.n	8023d9a <_dtoa_r+0x36a>
 8023ef0:	4a54      	ldr	r2, [pc, #336]	@ (8024044 <_dtoa_r+0x614>)
 8023ef2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8023ef6:	ed12 4b02 	vldr	d4, [r2, #-8]
 8023efa:	9a08      	ldr	r2, [sp, #32]
 8023efc:	ec41 0b17 	vmov	d7, r0, r1
 8023f00:	443c      	add	r4, r7
 8023f02:	b34a      	cbz	r2, 8023f58 <_dtoa_r+0x528>
 8023f04:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8023f08:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8023f0c:	463e      	mov	r6, r7
 8023f0e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8023f12:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8023f16:	ee35 7b47 	vsub.f64	d7, d5, d7
 8023f1a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8023f1e:	ee14 2a90 	vmov	r2, s9
 8023f22:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8023f26:	3230      	adds	r2, #48	@ 0x30
 8023f28:	ee36 6b45 	vsub.f64	d6, d6, d5
 8023f2c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8023f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f34:	f806 2b01 	strb.w	r2, [r6], #1
 8023f38:	d438      	bmi.n	8023fac <_dtoa_r+0x57c>
 8023f3a:	ee32 5b46 	vsub.f64	d5, d2, d6
 8023f3e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8023f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f46:	d462      	bmi.n	802400e <_dtoa_r+0x5de>
 8023f48:	42a6      	cmp	r6, r4
 8023f4a:	f43f af4d 	beq.w	8023de8 <_dtoa_r+0x3b8>
 8023f4e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8023f52:	ee26 6b03 	vmul.f64	d6, d6, d3
 8023f56:	e7e0      	b.n	8023f1a <_dtoa_r+0x4ea>
 8023f58:	4621      	mov	r1, r4
 8023f5a:	463e      	mov	r6, r7
 8023f5c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8023f60:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8023f64:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8023f68:	ee14 2a90 	vmov	r2, s9
 8023f6c:	3230      	adds	r2, #48	@ 0x30
 8023f6e:	f806 2b01 	strb.w	r2, [r6], #1
 8023f72:	42a6      	cmp	r6, r4
 8023f74:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8023f78:	ee36 6b45 	vsub.f64	d6, d6, d5
 8023f7c:	d119      	bne.n	8023fb2 <_dtoa_r+0x582>
 8023f7e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8023f82:	ee37 4b05 	vadd.f64	d4, d7, d5
 8023f86:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8023f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f8e:	dc3e      	bgt.n	802400e <_dtoa_r+0x5de>
 8023f90:	ee35 5b47 	vsub.f64	d5, d5, d7
 8023f94:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8023f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f9c:	f57f af24 	bpl.w	8023de8 <_dtoa_r+0x3b8>
 8023fa0:	460e      	mov	r6, r1
 8023fa2:	3901      	subs	r1, #1
 8023fa4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8023fa8:	2b30      	cmp	r3, #48	@ 0x30
 8023faa:	d0f9      	beq.n	8023fa0 <_dtoa_r+0x570>
 8023fac:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8023fb0:	e758      	b.n	8023e64 <_dtoa_r+0x434>
 8023fb2:	ee26 6b03 	vmul.f64	d6, d6, d3
 8023fb6:	e7d5      	b.n	8023f64 <_dtoa_r+0x534>
 8023fb8:	d10b      	bne.n	8023fd2 <_dtoa_r+0x5a2>
 8023fba:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8023fbe:	ee26 6b07 	vmul.f64	d6, d6, d7
 8023fc2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8023fc6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8023fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023fce:	f2c0 8161 	blt.w	8024294 <_dtoa_r+0x864>
 8023fd2:	2400      	movs	r4, #0
 8023fd4:	4625      	mov	r5, r4
 8023fd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023fd8:	43db      	mvns	r3, r3
 8023fda:	9304      	str	r3, [sp, #16]
 8023fdc:	463e      	mov	r6, r7
 8023fde:	f04f 0800 	mov.w	r8, #0
 8023fe2:	4621      	mov	r1, r4
 8023fe4:	4648      	mov	r0, r9
 8023fe6:	f000 fb03 	bl	80245f0 <_Bfree>
 8023fea:	2d00      	cmp	r5, #0
 8023fec:	d0de      	beq.n	8023fac <_dtoa_r+0x57c>
 8023fee:	f1b8 0f00 	cmp.w	r8, #0
 8023ff2:	d005      	beq.n	8024000 <_dtoa_r+0x5d0>
 8023ff4:	45a8      	cmp	r8, r5
 8023ff6:	d003      	beq.n	8024000 <_dtoa_r+0x5d0>
 8023ff8:	4641      	mov	r1, r8
 8023ffa:	4648      	mov	r0, r9
 8023ffc:	f000 faf8 	bl	80245f0 <_Bfree>
 8024000:	4629      	mov	r1, r5
 8024002:	4648      	mov	r0, r9
 8024004:	f000 faf4 	bl	80245f0 <_Bfree>
 8024008:	e7d0      	b.n	8023fac <_dtoa_r+0x57c>
 802400a:	f8cd 8010 	str.w	r8, [sp, #16]
 802400e:	4633      	mov	r3, r6
 8024010:	461e      	mov	r6, r3
 8024012:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8024016:	2a39      	cmp	r2, #57	@ 0x39
 8024018:	d106      	bne.n	8024028 <_dtoa_r+0x5f8>
 802401a:	429f      	cmp	r7, r3
 802401c:	d1f8      	bne.n	8024010 <_dtoa_r+0x5e0>
 802401e:	9a04      	ldr	r2, [sp, #16]
 8024020:	3201      	adds	r2, #1
 8024022:	9204      	str	r2, [sp, #16]
 8024024:	2230      	movs	r2, #48	@ 0x30
 8024026:	703a      	strb	r2, [r7, #0]
 8024028:	781a      	ldrb	r2, [r3, #0]
 802402a:	3201      	adds	r2, #1
 802402c:	701a      	strb	r2, [r3, #0]
 802402e:	e7bd      	b.n	8023fac <_dtoa_r+0x57c>
 8024030:	ee27 7b04 	vmul.f64	d7, d7, d4
 8024034:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8024038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802403c:	f47f aeef 	bne.w	8023e1e <_dtoa_r+0x3ee>
 8024040:	e710      	b.n	8023e64 <_dtoa_r+0x434>
 8024042:	bf00      	nop
 8024044:	0802c448 	.word	0x0802c448
 8024048:	0802c420 	.word	0x0802c420
 802404c:	9908      	ldr	r1, [sp, #32]
 802404e:	2900      	cmp	r1, #0
 8024050:	f000 80e3 	beq.w	802421a <_dtoa_r+0x7ea>
 8024054:	9907      	ldr	r1, [sp, #28]
 8024056:	2901      	cmp	r1, #1
 8024058:	f300 80c8 	bgt.w	80241ec <_dtoa_r+0x7bc>
 802405c:	2d00      	cmp	r5, #0
 802405e:	f000 80c1 	beq.w	80241e4 <_dtoa_r+0x7b4>
 8024062:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8024066:	9e05      	ldr	r6, [sp, #20]
 8024068:	461c      	mov	r4, r3
 802406a:	9304      	str	r3, [sp, #16]
 802406c:	9b05      	ldr	r3, [sp, #20]
 802406e:	4413      	add	r3, r2
 8024070:	9305      	str	r3, [sp, #20]
 8024072:	9b06      	ldr	r3, [sp, #24]
 8024074:	2101      	movs	r1, #1
 8024076:	4413      	add	r3, r2
 8024078:	4648      	mov	r0, r9
 802407a:	9306      	str	r3, [sp, #24]
 802407c:	f000 fb6c 	bl	8024758 <__i2b>
 8024080:	9b04      	ldr	r3, [sp, #16]
 8024082:	4605      	mov	r5, r0
 8024084:	b166      	cbz	r6, 80240a0 <_dtoa_r+0x670>
 8024086:	9a06      	ldr	r2, [sp, #24]
 8024088:	2a00      	cmp	r2, #0
 802408a:	dd09      	ble.n	80240a0 <_dtoa_r+0x670>
 802408c:	42b2      	cmp	r2, r6
 802408e:	9905      	ldr	r1, [sp, #20]
 8024090:	bfa8      	it	ge
 8024092:	4632      	movge	r2, r6
 8024094:	1a89      	subs	r1, r1, r2
 8024096:	9105      	str	r1, [sp, #20]
 8024098:	9906      	ldr	r1, [sp, #24]
 802409a:	1ab6      	subs	r6, r6, r2
 802409c:	1a8a      	subs	r2, r1, r2
 802409e:	9206      	str	r2, [sp, #24]
 80240a0:	b1fb      	cbz	r3, 80240e2 <_dtoa_r+0x6b2>
 80240a2:	9a08      	ldr	r2, [sp, #32]
 80240a4:	2a00      	cmp	r2, #0
 80240a6:	f000 80bc 	beq.w	8024222 <_dtoa_r+0x7f2>
 80240aa:	b19c      	cbz	r4, 80240d4 <_dtoa_r+0x6a4>
 80240ac:	4629      	mov	r1, r5
 80240ae:	4622      	mov	r2, r4
 80240b0:	4648      	mov	r0, r9
 80240b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80240b4:	f000 fc10 	bl	80248d8 <__pow5mult>
 80240b8:	9a01      	ldr	r2, [sp, #4]
 80240ba:	4601      	mov	r1, r0
 80240bc:	4605      	mov	r5, r0
 80240be:	4648      	mov	r0, r9
 80240c0:	f000 fb60 	bl	8024784 <__multiply>
 80240c4:	9901      	ldr	r1, [sp, #4]
 80240c6:	9004      	str	r0, [sp, #16]
 80240c8:	4648      	mov	r0, r9
 80240ca:	f000 fa91 	bl	80245f0 <_Bfree>
 80240ce:	9a04      	ldr	r2, [sp, #16]
 80240d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80240d2:	9201      	str	r2, [sp, #4]
 80240d4:	1b1a      	subs	r2, r3, r4
 80240d6:	d004      	beq.n	80240e2 <_dtoa_r+0x6b2>
 80240d8:	9901      	ldr	r1, [sp, #4]
 80240da:	4648      	mov	r0, r9
 80240dc:	f000 fbfc 	bl	80248d8 <__pow5mult>
 80240e0:	9001      	str	r0, [sp, #4]
 80240e2:	2101      	movs	r1, #1
 80240e4:	4648      	mov	r0, r9
 80240e6:	f000 fb37 	bl	8024758 <__i2b>
 80240ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80240ec:	4604      	mov	r4, r0
 80240ee:	2b00      	cmp	r3, #0
 80240f0:	f000 81d0 	beq.w	8024494 <_dtoa_r+0xa64>
 80240f4:	461a      	mov	r2, r3
 80240f6:	4601      	mov	r1, r0
 80240f8:	4648      	mov	r0, r9
 80240fa:	f000 fbed 	bl	80248d8 <__pow5mult>
 80240fe:	9b07      	ldr	r3, [sp, #28]
 8024100:	2b01      	cmp	r3, #1
 8024102:	4604      	mov	r4, r0
 8024104:	f300 8095 	bgt.w	8024232 <_dtoa_r+0x802>
 8024108:	9b02      	ldr	r3, [sp, #8]
 802410a:	2b00      	cmp	r3, #0
 802410c:	f040 808b 	bne.w	8024226 <_dtoa_r+0x7f6>
 8024110:	9b03      	ldr	r3, [sp, #12]
 8024112:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8024116:	2a00      	cmp	r2, #0
 8024118:	f040 8087 	bne.w	802422a <_dtoa_r+0x7fa>
 802411c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8024120:	0d12      	lsrs	r2, r2, #20
 8024122:	0512      	lsls	r2, r2, #20
 8024124:	2a00      	cmp	r2, #0
 8024126:	f000 8082 	beq.w	802422e <_dtoa_r+0x7fe>
 802412a:	9b05      	ldr	r3, [sp, #20]
 802412c:	3301      	adds	r3, #1
 802412e:	9305      	str	r3, [sp, #20]
 8024130:	9b06      	ldr	r3, [sp, #24]
 8024132:	3301      	adds	r3, #1
 8024134:	9306      	str	r3, [sp, #24]
 8024136:	2301      	movs	r3, #1
 8024138:	930b      	str	r3, [sp, #44]	@ 0x2c
 802413a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802413c:	2b00      	cmp	r3, #0
 802413e:	f000 81af 	beq.w	80244a0 <_dtoa_r+0xa70>
 8024142:	6922      	ldr	r2, [r4, #16]
 8024144:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8024148:	6910      	ldr	r0, [r2, #16]
 802414a:	f000 fab9 	bl	80246c0 <__hi0bits>
 802414e:	f1c0 0020 	rsb	r0, r0, #32
 8024152:	9b06      	ldr	r3, [sp, #24]
 8024154:	4418      	add	r0, r3
 8024156:	f010 001f 	ands.w	r0, r0, #31
 802415a:	d076      	beq.n	802424a <_dtoa_r+0x81a>
 802415c:	f1c0 0220 	rsb	r2, r0, #32
 8024160:	2a04      	cmp	r2, #4
 8024162:	dd69      	ble.n	8024238 <_dtoa_r+0x808>
 8024164:	9b05      	ldr	r3, [sp, #20]
 8024166:	f1c0 001c 	rsb	r0, r0, #28
 802416a:	4403      	add	r3, r0
 802416c:	9305      	str	r3, [sp, #20]
 802416e:	9b06      	ldr	r3, [sp, #24]
 8024170:	4406      	add	r6, r0
 8024172:	4403      	add	r3, r0
 8024174:	9306      	str	r3, [sp, #24]
 8024176:	9b05      	ldr	r3, [sp, #20]
 8024178:	2b00      	cmp	r3, #0
 802417a:	dd05      	ble.n	8024188 <_dtoa_r+0x758>
 802417c:	9901      	ldr	r1, [sp, #4]
 802417e:	461a      	mov	r2, r3
 8024180:	4648      	mov	r0, r9
 8024182:	f000 fc03 	bl	802498c <__lshift>
 8024186:	9001      	str	r0, [sp, #4]
 8024188:	9b06      	ldr	r3, [sp, #24]
 802418a:	2b00      	cmp	r3, #0
 802418c:	dd05      	ble.n	802419a <_dtoa_r+0x76a>
 802418e:	4621      	mov	r1, r4
 8024190:	461a      	mov	r2, r3
 8024192:	4648      	mov	r0, r9
 8024194:	f000 fbfa 	bl	802498c <__lshift>
 8024198:	4604      	mov	r4, r0
 802419a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802419c:	2b00      	cmp	r3, #0
 802419e:	d056      	beq.n	802424e <_dtoa_r+0x81e>
 80241a0:	9801      	ldr	r0, [sp, #4]
 80241a2:	4621      	mov	r1, r4
 80241a4:	f000 fc5e 	bl	8024a64 <__mcmp>
 80241a8:	2800      	cmp	r0, #0
 80241aa:	da50      	bge.n	802424e <_dtoa_r+0x81e>
 80241ac:	f108 33ff 	add.w	r3, r8, #4294967295
 80241b0:	9304      	str	r3, [sp, #16]
 80241b2:	9901      	ldr	r1, [sp, #4]
 80241b4:	2300      	movs	r3, #0
 80241b6:	220a      	movs	r2, #10
 80241b8:	4648      	mov	r0, r9
 80241ba:	f000 fa3b 	bl	8024634 <__multadd>
 80241be:	9b08      	ldr	r3, [sp, #32]
 80241c0:	9001      	str	r0, [sp, #4]
 80241c2:	2b00      	cmp	r3, #0
 80241c4:	f000 816e 	beq.w	80244a4 <_dtoa_r+0xa74>
 80241c8:	4629      	mov	r1, r5
 80241ca:	2300      	movs	r3, #0
 80241cc:	220a      	movs	r2, #10
 80241ce:	4648      	mov	r0, r9
 80241d0:	f000 fa30 	bl	8024634 <__multadd>
 80241d4:	f1bb 0f00 	cmp.w	fp, #0
 80241d8:	4605      	mov	r5, r0
 80241da:	dc64      	bgt.n	80242a6 <_dtoa_r+0x876>
 80241dc:	9b07      	ldr	r3, [sp, #28]
 80241de:	2b02      	cmp	r3, #2
 80241e0:	dc3e      	bgt.n	8024260 <_dtoa_r+0x830>
 80241e2:	e060      	b.n	80242a6 <_dtoa_r+0x876>
 80241e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80241e6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80241ea:	e73c      	b.n	8024066 <_dtoa_r+0x636>
 80241ec:	f10a 34ff 	add.w	r4, sl, #4294967295
 80241f0:	42a3      	cmp	r3, r4
 80241f2:	bfbf      	itttt	lt
 80241f4:	1ae2      	sublt	r2, r4, r3
 80241f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80241f8:	189b      	addlt	r3, r3, r2
 80241fa:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80241fc:	bfae      	itee	ge
 80241fe:	1b1c      	subge	r4, r3, r4
 8024200:	4623      	movlt	r3, r4
 8024202:	2400      	movlt	r4, #0
 8024204:	f1ba 0f00 	cmp.w	sl, #0
 8024208:	bfb5      	itete	lt
 802420a:	9a05      	ldrlt	r2, [sp, #20]
 802420c:	9e05      	ldrge	r6, [sp, #20]
 802420e:	eba2 060a 	sublt.w	r6, r2, sl
 8024212:	4652      	movge	r2, sl
 8024214:	bfb8      	it	lt
 8024216:	2200      	movlt	r2, #0
 8024218:	e727      	b.n	802406a <_dtoa_r+0x63a>
 802421a:	9e05      	ldr	r6, [sp, #20]
 802421c:	9d08      	ldr	r5, [sp, #32]
 802421e:	461c      	mov	r4, r3
 8024220:	e730      	b.n	8024084 <_dtoa_r+0x654>
 8024222:	461a      	mov	r2, r3
 8024224:	e758      	b.n	80240d8 <_dtoa_r+0x6a8>
 8024226:	2300      	movs	r3, #0
 8024228:	e786      	b.n	8024138 <_dtoa_r+0x708>
 802422a:	9b02      	ldr	r3, [sp, #8]
 802422c:	e784      	b.n	8024138 <_dtoa_r+0x708>
 802422e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8024230:	e783      	b.n	802413a <_dtoa_r+0x70a>
 8024232:	2300      	movs	r3, #0
 8024234:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024236:	e784      	b.n	8024142 <_dtoa_r+0x712>
 8024238:	d09d      	beq.n	8024176 <_dtoa_r+0x746>
 802423a:	9b05      	ldr	r3, [sp, #20]
 802423c:	321c      	adds	r2, #28
 802423e:	4413      	add	r3, r2
 8024240:	9305      	str	r3, [sp, #20]
 8024242:	9b06      	ldr	r3, [sp, #24]
 8024244:	4416      	add	r6, r2
 8024246:	4413      	add	r3, r2
 8024248:	e794      	b.n	8024174 <_dtoa_r+0x744>
 802424a:	4602      	mov	r2, r0
 802424c:	e7f5      	b.n	802423a <_dtoa_r+0x80a>
 802424e:	f1ba 0f00 	cmp.w	sl, #0
 8024252:	f8cd 8010 	str.w	r8, [sp, #16]
 8024256:	46d3      	mov	fp, sl
 8024258:	dc21      	bgt.n	802429e <_dtoa_r+0x86e>
 802425a:	9b07      	ldr	r3, [sp, #28]
 802425c:	2b02      	cmp	r3, #2
 802425e:	dd1e      	ble.n	802429e <_dtoa_r+0x86e>
 8024260:	f1bb 0f00 	cmp.w	fp, #0
 8024264:	f47f aeb7 	bne.w	8023fd6 <_dtoa_r+0x5a6>
 8024268:	4621      	mov	r1, r4
 802426a:	465b      	mov	r3, fp
 802426c:	2205      	movs	r2, #5
 802426e:	4648      	mov	r0, r9
 8024270:	f000 f9e0 	bl	8024634 <__multadd>
 8024274:	4601      	mov	r1, r0
 8024276:	4604      	mov	r4, r0
 8024278:	9801      	ldr	r0, [sp, #4]
 802427a:	f000 fbf3 	bl	8024a64 <__mcmp>
 802427e:	2800      	cmp	r0, #0
 8024280:	f77f aea9 	ble.w	8023fd6 <_dtoa_r+0x5a6>
 8024284:	463e      	mov	r6, r7
 8024286:	2331      	movs	r3, #49	@ 0x31
 8024288:	f806 3b01 	strb.w	r3, [r6], #1
 802428c:	9b04      	ldr	r3, [sp, #16]
 802428e:	3301      	adds	r3, #1
 8024290:	9304      	str	r3, [sp, #16]
 8024292:	e6a4      	b.n	8023fde <_dtoa_r+0x5ae>
 8024294:	f8cd 8010 	str.w	r8, [sp, #16]
 8024298:	4654      	mov	r4, sl
 802429a:	4625      	mov	r5, r4
 802429c:	e7f2      	b.n	8024284 <_dtoa_r+0x854>
 802429e:	9b08      	ldr	r3, [sp, #32]
 80242a0:	2b00      	cmp	r3, #0
 80242a2:	f000 8103 	beq.w	80244ac <_dtoa_r+0xa7c>
 80242a6:	2e00      	cmp	r6, #0
 80242a8:	dd05      	ble.n	80242b6 <_dtoa_r+0x886>
 80242aa:	4629      	mov	r1, r5
 80242ac:	4632      	mov	r2, r6
 80242ae:	4648      	mov	r0, r9
 80242b0:	f000 fb6c 	bl	802498c <__lshift>
 80242b4:	4605      	mov	r5, r0
 80242b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80242b8:	2b00      	cmp	r3, #0
 80242ba:	d058      	beq.n	802436e <_dtoa_r+0x93e>
 80242bc:	6869      	ldr	r1, [r5, #4]
 80242be:	4648      	mov	r0, r9
 80242c0:	f000 f956 	bl	8024570 <_Balloc>
 80242c4:	4606      	mov	r6, r0
 80242c6:	b928      	cbnz	r0, 80242d4 <_dtoa_r+0x8a4>
 80242c8:	4b82      	ldr	r3, [pc, #520]	@ (80244d4 <_dtoa_r+0xaa4>)
 80242ca:	4602      	mov	r2, r0
 80242cc:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80242d0:	f7ff bbc7 	b.w	8023a62 <_dtoa_r+0x32>
 80242d4:	692a      	ldr	r2, [r5, #16]
 80242d6:	3202      	adds	r2, #2
 80242d8:	0092      	lsls	r2, r2, #2
 80242da:	f105 010c 	add.w	r1, r5, #12
 80242de:	300c      	adds	r0, #12
 80242e0:	f7ff fb0f 	bl	8023902 <memcpy>
 80242e4:	2201      	movs	r2, #1
 80242e6:	4631      	mov	r1, r6
 80242e8:	4648      	mov	r0, r9
 80242ea:	f000 fb4f 	bl	802498c <__lshift>
 80242ee:	1c7b      	adds	r3, r7, #1
 80242f0:	9305      	str	r3, [sp, #20]
 80242f2:	eb07 030b 	add.w	r3, r7, fp
 80242f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80242f8:	9b02      	ldr	r3, [sp, #8]
 80242fa:	f003 0301 	and.w	r3, r3, #1
 80242fe:	46a8      	mov	r8, r5
 8024300:	9308      	str	r3, [sp, #32]
 8024302:	4605      	mov	r5, r0
 8024304:	9b05      	ldr	r3, [sp, #20]
 8024306:	9801      	ldr	r0, [sp, #4]
 8024308:	4621      	mov	r1, r4
 802430a:	f103 3bff 	add.w	fp, r3, #4294967295
 802430e:	f7ff fb06 	bl	802391e <quorem>
 8024312:	4641      	mov	r1, r8
 8024314:	9002      	str	r0, [sp, #8]
 8024316:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 802431a:	9801      	ldr	r0, [sp, #4]
 802431c:	f000 fba2 	bl	8024a64 <__mcmp>
 8024320:	462a      	mov	r2, r5
 8024322:	9006      	str	r0, [sp, #24]
 8024324:	4621      	mov	r1, r4
 8024326:	4648      	mov	r0, r9
 8024328:	f000 fbb8 	bl	8024a9c <__mdiff>
 802432c:	68c2      	ldr	r2, [r0, #12]
 802432e:	4606      	mov	r6, r0
 8024330:	b9fa      	cbnz	r2, 8024372 <_dtoa_r+0x942>
 8024332:	4601      	mov	r1, r0
 8024334:	9801      	ldr	r0, [sp, #4]
 8024336:	f000 fb95 	bl	8024a64 <__mcmp>
 802433a:	4602      	mov	r2, r0
 802433c:	4631      	mov	r1, r6
 802433e:	4648      	mov	r0, r9
 8024340:	920a      	str	r2, [sp, #40]	@ 0x28
 8024342:	f000 f955 	bl	80245f0 <_Bfree>
 8024346:	9b07      	ldr	r3, [sp, #28]
 8024348:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802434a:	9e05      	ldr	r6, [sp, #20]
 802434c:	ea43 0102 	orr.w	r1, r3, r2
 8024350:	9b08      	ldr	r3, [sp, #32]
 8024352:	4319      	orrs	r1, r3
 8024354:	d10f      	bne.n	8024376 <_dtoa_r+0x946>
 8024356:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 802435a:	d028      	beq.n	80243ae <_dtoa_r+0x97e>
 802435c:	9b06      	ldr	r3, [sp, #24]
 802435e:	2b00      	cmp	r3, #0
 8024360:	dd02      	ble.n	8024368 <_dtoa_r+0x938>
 8024362:	9b02      	ldr	r3, [sp, #8]
 8024364:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8024368:	f88b a000 	strb.w	sl, [fp]
 802436c:	e639      	b.n	8023fe2 <_dtoa_r+0x5b2>
 802436e:	4628      	mov	r0, r5
 8024370:	e7bd      	b.n	80242ee <_dtoa_r+0x8be>
 8024372:	2201      	movs	r2, #1
 8024374:	e7e2      	b.n	802433c <_dtoa_r+0x90c>
 8024376:	9b06      	ldr	r3, [sp, #24]
 8024378:	2b00      	cmp	r3, #0
 802437a:	db04      	blt.n	8024386 <_dtoa_r+0x956>
 802437c:	9907      	ldr	r1, [sp, #28]
 802437e:	430b      	orrs	r3, r1
 8024380:	9908      	ldr	r1, [sp, #32]
 8024382:	430b      	orrs	r3, r1
 8024384:	d120      	bne.n	80243c8 <_dtoa_r+0x998>
 8024386:	2a00      	cmp	r2, #0
 8024388:	ddee      	ble.n	8024368 <_dtoa_r+0x938>
 802438a:	9901      	ldr	r1, [sp, #4]
 802438c:	2201      	movs	r2, #1
 802438e:	4648      	mov	r0, r9
 8024390:	f000 fafc 	bl	802498c <__lshift>
 8024394:	4621      	mov	r1, r4
 8024396:	9001      	str	r0, [sp, #4]
 8024398:	f000 fb64 	bl	8024a64 <__mcmp>
 802439c:	2800      	cmp	r0, #0
 802439e:	dc03      	bgt.n	80243a8 <_dtoa_r+0x978>
 80243a0:	d1e2      	bne.n	8024368 <_dtoa_r+0x938>
 80243a2:	f01a 0f01 	tst.w	sl, #1
 80243a6:	d0df      	beq.n	8024368 <_dtoa_r+0x938>
 80243a8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80243ac:	d1d9      	bne.n	8024362 <_dtoa_r+0x932>
 80243ae:	2339      	movs	r3, #57	@ 0x39
 80243b0:	f88b 3000 	strb.w	r3, [fp]
 80243b4:	4633      	mov	r3, r6
 80243b6:	461e      	mov	r6, r3
 80243b8:	3b01      	subs	r3, #1
 80243ba:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80243be:	2a39      	cmp	r2, #57	@ 0x39
 80243c0:	d053      	beq.n	802446a <_dtoa_r+0xa3a>
 80243c2:	3201      	adds	r2, #1
 80243c4:	701a      	strb	r2, [r3, #0]
 80243c6:	e60c      	b.n	8023fe2 <_dtoa_r+0x5b2>
 80243c8:	2a00      	cmp	r2, #0
 80243ca:	dd07      	ble.n	80243dc <_dtoa_r+0x9ac>
 80243cc:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80243d0:	d0ed      	beq.n	80243ae <_dtoa_r+0x97e>
 80243d2:	f10a 0301 	add.w	r3, sl, #1
 80243d6:	f88b 3000 	strb.w	r3, [fp]
 80243da:	e602      	b.n	8023fe2 <_dtoa_r+0x5b2>
 80243dc:	9b05      	ldr	r3, [sp, #20]
 80243de:	9a05      	ldr	r2, [sp, #20]
 80243e0:	f803 ac01 	strb.w	sl, [r3, #-1]
 80243e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80243e6:	4293      	cmp	r3, r2
 80243e8:	d029      	beq.n	802443e <_dtoa_r+0xa0e>
 80243ea:	9901      	ldr	r1, [sp, #4]
 80243ec:	2300      	movs	r3, #0
 80243ee:	220a      	movs	r2, #10
 80243f0:	4648      	mov	r0, r9
 80243f2:	f000 f91f 	bl	8024634 <__multadd>
 80243f6:	45a8      	cmp	r8, r5
 80243f8:	9001      	str	r0, [sp, #4]
 80243fa:	f04f 0300 	mov.w	r3, #0
 80243fe:	f04f 020a 	mov.w	r2, #10
 8024402:	4641      	mov	r1, r8
 8024404:	4648      	mov	r0, r9
 8024406:	d107      	bne.n	8024418 <_dtoa_r+0x9e8>
 8024408:	f000 f914 	bl	8024634 <__multadd>
 802440c:	4680      	mov	r8, r0
 802440e:	4605      	mov	r5, r0
 8024410:	9b05      	ldr	r3, [sp, #20]
 8024412:	3301      	adds	r3, #1
 8024414:	9305      	str	r3, [sp, #20]
 8024416:	e775      	b.n	8024304 <_dtoa_r+0x8d4>
 8024418:	f000 f90c 	bl	8024634 <__multadd>
 802441c:	4629      	mov	r1, r5
 802441e:	4680      	mov	r8, r0
 8024420:	2300      	movs	r3, #0
 8024422:	220a      	movs	r2, #10
 8024424:	4648      	mov	r0, r9
 8024426:	f000 f905 	bl	8024634 <__multadd>
 802442a:	4605      	mov	r5, r0
 802442c:	e7f0      	b.n	8024410 <_dtoa_r+0x9e0>
 802442e:	f1bb 0f00 	cmp.w	fp, #0
 8024432:	bfcc      	ite	gt
 8024434:	465e      	movgt	r6, fp
 8024436:	2601      	movle	r6, #1
 8024438:	443e      	add	r6, r7
 802443a:	f04f 0800 	mov.w	r8, #0
 802443e:	9901      	ldr	r1, [sp, #4]
 8024440:	2201      	movs	r2, #1
 8024442:	4648      	mov	r0, r9
 8024444:	f000 faa2 	bl	802498c <__lshift>
 8024448:	4621      	mov	r1, r4
 802444a:	9001      	str	r0, [sp, #4]
 802444c:	f000 fb0a 	bl	8024a64 <__mcmp>
 8024450:	2800      	cmp	r0, #0
 8024452:	dcaf      	bgt.n	80243b4 <_dtoa_r+0x984>
 8024454:	d102      	bne.n	802445c <_dtoa_r+0xa2c>
 8024456:	f01a 0f01 	tst.w	sl, #1
 802445a:	d1ab      	bne.n	80243b4 <_dtoa_r+0x984>
 802445c:	4633      	mov	r3, r6
 802445e:	461e      	mov	r6, r3
 8024460:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8024464:	2a30      	cmp	r2, #48	@ 0x30
 8024466:	d0fa      	beq.n	802445e <_dtoa_r+0xa2e>
 8024468:	e5bb      	b.n	8023fe2 <_dtoa_r+0x5b2>
 802446a:	429f      	cmp	r7, r3
 802446c:	d1a3      	bne.n	80243b6 <_dtoa_r+0x986>
 802446e:	9b04      	ldr	r3, [sp, #16]
 8024470:	3301      	adds	r3, #1
 8024472:	9304      	str	r3, [sp, #16]
 8024474:	2331      	movs	r3, #49	@ 0x31
 8024476:	703b      	strb	r3, [r7, #0]
 8024478:	e5b3      	b.n	8023fe2 <_dtoa_r+0x5b2>
 802447a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802447c:	4f16      	ldr	r7, [pc, #88]	@ (80244d8 <_dtoa_r+0xaa8>)
 802447e:	b11b      	cbz	r3, 8024488 <_dtoa_r+0xa58>
 8024480:	f107 0308 	add.w	r3, r7, #8
 8024484:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8024486:	6013      	str	r3, [r2, #0]
 8024488:	4638      	mov	r0, r7
 802448a:	b011      	add	sp, #68	@ 0x44
 802448c:	ecbd 8b02 	vpop	{d8}
 8024490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024494:	9b07      	ldr	r3, [sp, #28]
 8024496:	2b01      	cmp	r3, #1
 8024498:	f77f ae36 	ble.w	8024108 <_dtoa_r+0x6d8>
 802449c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802449e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80244a0:	2001      	movs	r0, #1
 80244a2:	e656      	b.n	8024152 <_dtoa_r+0x722>
 80244a4:	f1bb 0f00 	cmp.w	fp, #0
 80244a8:	f77f aed7 	ble.w	802425a <_dtoa_r+0x82a>
 80244ac:	463e      	mov	r6, r7
 80244ae:	9801      	ldr	r0, [sp, #4]
 80244b0:	4621      	mov	r1, r4
 80244b2:	f7ff fa34 	bl	802391e <quorem>
 80244b6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80244ba:	f806 ab01 	strb.w	sl, [r6], #1
 80244be:	1bf2      	subs	r2, r6, r7
 80244c0:	4593      	cmp	fp, r2
 80244c2:	ddb4      	ble.n	802442e <_dtoa_r+0x9fe>
 80244c4:	9901      	ldr	r1, [sp, #4]
 80244c6:	2300      	movs	r3, #0
 80244c8:	220a      	movs	r2, #10
 80244ca:	4648      	mov	r0, r9
 80244cc:	f000 f8b2 	bl	8024634 <__multadd>
 80244d0:	9001      	str	r0, [sp, #4]
 80244d2:	e7ec      	b.n	80244ae <_dtoa_r+0xa7e>
 80244d4:	0802c3a9 	.word	0x0802c3a9
 80244d8:	0802c32d 	.word	0x0802c32d

080244dc <_free_r>:
 80244dc:	b538      	push	{r3, r4, r5, lr}
 80244de:	4605      	mov	r5, r0
 80244e0:	2900      	cmp	r1, #0
 80244e2:	d041      	beq.n	8024568 <_free_r+0x8c>
 80244e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80244e8:	1f0c      	subs	r4, r1, #4
 80244ea:	2b00      	cmp	r3, #0
 80244ec:	bfb8      	it	lt
 80244ee:	18e4      	addlt	r4, r4, r3
 80244f0:	f7fe fbf2 	bl	8022cd8 <__malloc_lock>
 80244f4:	4a1d      	ldr	r2, [pc, #116]	@ (802456c <_free_r+0x90>)
 80244f6:	6813      	ldr	r3, [r2, #0]
 80244f8:	b933      	cbnz	r3, 8024508 <_free_r+0x2c>
 80244fa:	6063      	str	r3, [r4, #4]
 80244fc:	6014      	str	r4, [r2, #0]
 80244fe:	4628      	mov	r0, r5
 8024500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024504:	f7fe bbee 	b.w	8022ce4 <__malloc_unlock>
 8024508:	42a3      	cmp	r3, r4
 802450a:	d908      	bls.n	802451e <_free_r+0x42>
 802450c:	6820      	ldr	r0, [r4, #0]
 802450e:	1821      	adds	r1, r4, r0
 8024510:	428b      	cmp	r3, r1
 8024512:	bf01      	itttt	eq
 8024514:	6819      	ldreq	r1, [r3, #0]
 8024516:	685b      	ldreq	r3, [r3, #4]
 8024518:	1809      	addeq	r1, r1, r0
 802451a:	6021      	streq	r1, [r4, #0]
 802451c:	e7ed      	b.n	80244fa <_free_r+0x1e>
 802451e:	461a      	mov	r2, r3
 8024520:	685b      	ldr	r3, [r3, #4]
 8024522:	b10b      	cbz	r3, 8024528 <_free_r+0x4c>
 8024524:	42a3      	cmp	r3, r4
 8024526:	d9fa      	bls.n	802451e <_free_r+0x42>
 8024528:	6811      	ldr	r1, [r2, #0]
 802452a:	1850      	adds	r0, r2, r1
 802452c:	42a0      	cmp	r0, r4
 802452e:	d10b      	bne.n	8024548 <_free_r+0x6c>
 8024530:	6820      	ldr	r0, [r4, #0]
 8024532:	4401      	add	r1, r0
 8024534:	1850      	adds	r0, r2, r1
 8024536:	4283      	cmp	r3, r0
 8024538:	6011      	str	r1, [r2, #0]
 802453a:	d1e0      	bne.n	80244fe <_free_r+0x22>
 802453c:	6818      	ldr	r0, [r3, #0]
 802453e:	685b      	ldr	r3, [r3, #4]
 8024540:	6053      	str	r3, [r2, #4]
 8024542:	4408      	add	r0, r1
 8024544:	6010      	str	r0, [r2, #0]
 8024546:	e7da      	b.n	80244fe <_free_r+0x22>
 8024548:	d902      	bls.n	8024550 <_free_r+0x74>
 802454a:	230c      	movs	r3, #12
 802454c:	602b      	str	r3, [r5, #0]
 802454e:	e7d6      	b.n	80244fe <_free_r+0x22>
 8024550:	6820      	ldr	r0, [r4, #0]
 8024552:	1821      	adds	r1, r4, r0
 8024554:	428b      	cmp	r3, r1
 8024556:	bf04      	itt	eq
 8024558:	6819      	ldreq	r1, [r3, #0]
 802455a:	685b      	ldreq	r3, [r3, #4]
 802455c:	6063      	str	r3, [r4, #4]
 802455e:	bf04      	itt	eq
 8024560:	1809      	addeq	r1, r1, r0
 8024562:	6021      	streq	r1, [r4, #0]
 8024564:	6054      	str	r4, [r2, #4]
 8024566:	e7ca      	b.n	80244fe <_free_r+0x22>
 8024568:	bd38      	pop	{r3, r4, r5, pc}
 802456a:	bf00      	nop
 802456c:	24000a4c 	.word	0x24000a4c

08024570 <_Balloc>:
 8024570:	b570      	push	{r4, r5, r6, lr}
 8024572:	69c6      	ldr	r6, [r0, #28]
 8024574:	4604      	mov	r4, r0
 8024576:	460d      	mov	r5, r1
 8024578:	b976      	cbnz	r6, 8024598 <_Balloc+0x28>
 802457a:	2010      	movs	r0, #16
 802457c:	f7fe fafa 	bl	8022b74 <malloc>
 8024580:	4602      	mov	r2, r0
 8024582:	61e0      	str	r0, [r4, #28]
 8024584:	b920      	cbnz	r0, 8024590 <_Balloc+0x20>
 8024586:	4b18      	ldr	r3, [pc, #96]	@ (80245e8 <_Balloc+0x78>)
 8024588:	4818      	ldr	r0, [pc, #96]	@ (80245ec <_Balloc+0x7c>)
 802458a:	216b      	movs	r1, #107	@ 0x6b
 802458c:	f7e9 ff32 	bl	800e3f4 <__assert_func>
 8024590:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8024594:	6006      	str	r6, [r0, #0]
 8024596:	60c6      	str	r6, [r0, #12]
 8024598:	69e6      	ldr	r6, [r4, #28]
 802459a:	68f3      	ldr	r3, [r6, #12]
 802459c:	b183      	cbz	r3, 80245c0 <_Balloc+0x50>
 802459e:	69e3      	ldr	r3, [r4, #28]
 80245a0:	68db      	ldr	r3, [r3, #12]
 80245a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80245a6:	b9b8      	cbnz	r0, 80245d8 <_Balloc+0x68>
 80245a8:	2101      	movs	r1, #1
 80245aa:	fa01 f605 	lsl.w	r6, r1, r5
 80245ae:	1d72      	adds	r2, r6, #5
 80245b0:	0092      	lsls	r2, r2, #2
 80245b2:	4620      	mov	r0, r4
 80245b4:	f000 fde0 	bl	8025178 <_calloc_r>
 80245b8:	b160      	cbz	r0, 80245d4 <_Balloc+0x64>
 80245ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80245be:	e00e      	b.n	80245de <_Balloc+0x6e>
 80245c0:	2221      	movs	r2, #33	@ 0x21
 80245c2:	2104      	movs	r1, #4
 80245c4:	4620      	mov	r0, r4
 80245c6:	f000 fdd7 	bl	8025178 <_calloc_r>
 80245ca:	69e3      	ldr	r3, [r4, #28]
 80245cc:	60f0      	str	r0, [r6, #12]
 80245ce:	68db      	ldr	r3, [r3, #12]
 80245d0:	2b00      	cmp	r3, #0
 80245d2:	d1e4      	bne.n	802459e <_Balloc+0x2e>
 80245d4:	2000      	movs	r0, #0
 80245d6:	bd70      	pop	{r4, r5, r6, pc}
 80245d8:	6802      	ldr	r2, [r0, #0]
 80245da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80245de:	2300      	movs	r3, #0
 80245e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80245e4:	e7f7      	b.n	80245d6 <_Balloc+0x66>
 80245e6:	bf00      	nop
 80245e8:	0802c33a 	.word	0x0802c33a
 80245ec:	0802c3ba 	.word	0x0802c3ba

080245f0 <_Bfree>:
 80245f0:	b570      	push	{r4, r5, r6, lr}
 80245f2:	69c6      	ldr	r6, [r0, #28]
 80245f4:	4605      	mov	r5, r0
 80245f6:	460c      	mov	r4, r1
 80245f8:	b976      	cbnz	r6, 8024618 <_Bfree+0x28>
 80245fa:	2010      	movs	r0, #16
 80245fc:	f7fe faba 	bl	8022b74 <malloc>
 8024600:	4602      	mov	r2, r0
 8024602:	61e8      	str	r0, [r5, #28]
 8024604:	b920      	cbnz	r0, 8024610 <_Bfree+0x20>
 8024606:	4b09      	ldr	r3, [pc, #36]	@ (802462c <_Bfree+0x3c>)
 8024608:	4809      	ldr	r0, [pc, #36]	@ (8024630 <_Bfree+0x40>)
 802460a:	218f      	movs	r1, #143	@ 0x8f
 802460c:	f7e9 fef2 	bl	800e3f4 <__assert_func>
 8024610:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8024614:	6006      	str	r6, [r0, #0]
 8024616:	60c6      	str	r6, [r0, #12]
 8024618:	b13c      	cbz	r4, 802462a <_Bfree+0x3a>
 802461a:	69eb      	ldr	r3, [r5, #28]
 802461c:	6862      	ldr	r2, [r4, #4]
 802461e:	68db      	ldr	r3, [r3, #12]
 8024620:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8024624:	6021      	str	r1, [r4, #0]
 8024626:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802462a:	bd70      	pop	{r4, r5, r6, pc}
 802462c:	0802c33a 	.word	0x0802c33a
 8024630:	0802c3ba 	.word	0x0802c3ba

08024634 <__multadd>:
 8024634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024638:	690d      	ldr	r5, [r1, #16]
 802463a:	4607      	mov	r7, r0
 802463c:	460c      	mov	r4, r1
 802463e:	461e      	mov	r6, r3
 8024640:	f101 0c14 	add.w	ip, r1, #20
 8024644:	2000      	movs	r0, #0
 8024646:	f8dc 3000 	ldr.w	r3, [ip]
 802464a:	b299      	uxth	r1, r3
 802464c:	fb02 6101 	mla	r1, r2, r1, r6
 8024650:	0c1e      	lsrs	r6, r3, #16
 8024652:	0c0b      	lsrs	r3, r1, #16
 8024654:	fb02 3306 	mla	r3, r2, r6, r3
 8024658:	b289      	uxth	r1, r1
 802465a:	3001      	adds	r0, #1
 802465c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024660:	4285      	cmp	r5, r0
 8024662:	f84c 1b04 	str.w	r1, [ip], #4
 8024666:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802466a:	dcec      	bgt.n	8024646 <__multadd+0x12>
 802466c:	b30e      	cbz	r6, 80246b2 <__multadd+0x7e>
 802466e:	68a3      	ldr	r3, [r4, #8]
 8024670:	42ab      	cmp	r3, r5
 8024672:	dc19      	bgt.n	80246a8 <__multadd+0x74>
 8024674:	6861      	ldr	r1, [r4, #4]
 8024676:	4638      	mov	r0, r7
 8024678:	3101      	adds	r1, #1
 802467a:	f7ff ff79 	bl	8024570 <_Balloc>
 802467e:	4680      	mov	r8, r0
 8024680:	b928      	cbnz	r0, 802468e <__multadd+0x5a>
 8024682:	4602      	mov	r2, r0
 8024684:	4b0c      	ldr	r3, [pc, #48]	@ (80246b8 <__multadd+0x84>)
 8024686:	480d      	ldr	r0, [pc, #52]	@ (80246bc <__multadd+0x88>)
 8024688:	21ba      	movs	r1, #186	@ 0xba
 802468a:	f7e9 feb3 	bl	800e3f4 <__assert_func>
 802468e:	6922      	ldr	r2, [r4, #16]
 8024690:	3202      	adds	r2, #2
 8024692:	f104 010c 	add.w	r1, r4, #12
 8024696:	0092      	lsls	r2, r2, #2
 8024698:	300c      	adds	r0, #12
 802469a:	f7ff f932 	bl	8023902 <memcpy>
 802469e:	4621      	mov	r1, r4
 80246a0:	4638      	mov	r0, r7
 80246a2:	f7ff ffa5 	bl	80245f0 <_Bfree>
 80246a6:	4644      	mov	r4, r8
 80246a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80246ac:	3501      	adds	r5, #1
 80246ae:	615e      	str	r6, [r3, #20]
 80246b0:	6125      	str	r5, [r4, #16]
 80246b2:	4620      	mov	r0, r4
 80246b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80246b8:	0802c3a9 	.word	0x0802c3a9
 80246bc:	0802c3ba 	.word	0x0802c3ba

080246c0 <__hi0bits>:
 80246c0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80246c4:	4603      	mov	r3, r0
 80246c6:	bf36      	itet	cc
 80246c8:	0403      	lslcc	r3, r0, #16
 80246ca:	2000      	movcs	r0, #0
 80246cc:	2010      	movcc	r0, #16
 80246ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80246d2:	bf3c      	itt	cc
 80246d4:	021b      	lslcc	r3, r3, #8
 80246d6:	3008      	addcc	r0, #8
 80246d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80246dc:	bf3c      	itt	cc
 80246de:	011b      	lslcc	r3, r3, #4
 80246e0:	3004      	addcc	r0, #4
 80246e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80246e6:	bf3c      	itt	cc
 80246e8:	009b      	lslcc	r3, r3, #2
 80246ea:	3002      	addcc	r0, #2
 80246ec:	2b00      	cmp	r3, #0
 80246ee:	db05      	blt.n	80246fc <__hi0bits+0x3c>
 80246f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80246f4:	f100 0001 	add.w	r0, r0, #1
 80246f8:	bf08      	it	eq
 80246fa:	2020      	moveq	r0, #32
 80246fc:	4770      	bx	lr

080246fe <__lo0bits>:
 80246fe:	6803      	ldr	r3, [r0, #0]
 8024700:	4602      	mov	r2, r0
 8024702:	f013 0007 	ands.w	r0, r3, #7
 8024706:	d00b      	beq.n	8024720 <__lo0bits+0x22>
 8024708:	07d9      	lsls	r1, r3, #31
 802470a:	d421      	bmi.n	8024750 <__lo0bits+0x52>
 802470c:	0798      	lsls	r0, r3, #30
 802470e:	bf49      	itett	mi
 8024710:	085b      	lsrmi	r3, r3, #1
 8024712:	089b      	lsrpl	r3, r3, #2
 8024714:	2001      	movmi	r0, #1
 8024716:	6013      	strmi	r3, [r2, #0]
 8024718:	bf5c      	itt	pl
 802471a:	6013      	strpl	r3, [r2, #0]
 802471c:	2002      	movpl	r0, #2
 802471e:	4770      	bx	lr
 8024720:	b299      	uxth	r1, r3
 8024722:	b909      	cbnz	r1, 8024728 <__lo0bits+0x2a>
 8024724:	0c1b      	lsrs	r3, r3, #16
 8024726:	2010      	movs	r0, #16
 8024728:	b2d9      	uxtb	r1, r3
 802472a:	b909      	cbnz	r1, 8024730 <__lo0bits+0x32>
 802472c:	3008      	adds	r0, #8
 802472e:	0a1b      	lsrs	r3, r3, #8
 8024730:	0719      	lsls	r1, r3, #28
 8024732:	bf04      	itt	eq
 8024734:	091b      	lsreq	r3, r3, #4
 8024736:	3004      	addeq	r0, #4
 8024738:	0799      	lsls	r1, r3, #30
 802473a:	bf04      	itt	eq
 802473c:	089b      	lsreq	r3, r3, #2
 802473e:	3002      	addeq	r0, #2
 8024740:	07d9      	lsls	r1, r3, #31
 8024742:	d403      	bmi.n	802474c <__lo0bits+0x4e>
 8024744:	085b      	lsrs	r3, r3, #1
 8024746:	f100 0001 	add.w	r0, r0, #1
 802474a:	d003      	beq.n	8024754 <__lo0bits+0x56>
 802474c:	6013      	str	r3, [r2, #0]
 802474e:	4770      	bx	lr
 8024750:	2000      	movs	r0, #0
 8024752:	4770      	bx	lr
 8024754:	2020      	movs	r0, #32
 8024756:	4770      	bx	lr

08024758 <__i2b>:
 8024758:	b510      	push	{r4, lr}
 802475a:	460c      	mov	r4, r1
 802475c:	2101      	movs	r1, #1
 802475e:	f7ff ff07 	bl	8024570 <_Balloc>
 8024762:	4602      	mov	r2, r0
 8024764:	b928      	cbnz	r0, 8024772 <__i2b+0x1a>
 8024766:	4b05      	ldr	r3, [pc, #20]	@ (802477c <__i2b+0x24>)
 8024768:	4805      	ldr	r0, [pc, #20]	@ (8024780 <__i2b+0x28>)
 802476a:	f240 1145 	movw	r1, #325	@ 0x145
 802476e:	f7e9 fe41 	bl	800e3f4 <__assert_func>
 8024772:	2301      	movs	r3, #1
 8024774:	6144      	str	r4, [r0, #20]
 8024776:	6103      	str	r3, [r0, #16]
 8024778:	bd10      	pop	{r4, pc}
 802477a:	bf00      	nop
 802477c:	0802c3a9 	.word	0x0802c3a9
 8024780:	0802c3ba 	.word	0x0802c3ba

08024784 <__multiply>:
 8024784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024788:	4614      	mov	r4, r2
 802478a:	690a      	ldr	r2, [r1, #16]
 802478c:	6923      	ldr	r3, [r4, #16]
 802478e:	429a      	cmp	r2, r3
 8024790:	bfa8      	it	ge
 8024792:	4623      	movge	r3, r4
 8024794:	460f      	mov	r7, r1
 8024796:	bfa4      	itt	ge
 8024798:	460c      	movge	r4, r1
 802479a:	461f      	movge	r7, r3
 802479c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80247a0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80247a4:	68a3      	ldr	r3, [r4, #8]
 80247a6:	6861      	ldr	r1, [r4, #4]
 80247a8:	eb0a 0609 	add.w	r6, sl, r9
 80247ac:	42b3      	cmp	r3, r6
 80247ae:	b085      	sub	sp, #20
 80247b0:	bfb8      	it	lt
 80247b2:	3101      	addlt	r1, #1
 80247b4:	f7ff fedc 	bl	8024570 <_Balloc>
 80247b8:	b930      	cbnz	r0, 80247c8 <__multiply+0x44>
 80247ba:	4602      	mov	r2, r0
 80247bc:	4b44      	ldr	r3, [pc, #272]	@ (80248d0 <__multiply+0x14c>)
 80247be:	4845      	ldr	r0, [pc, #276]	@ (80248d4 <__multiply+0x150>)
 80247c0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80247c4:	f7e9 fe16 	bl	800e3f4 <__assert_func>
 80247c8:	f100 0514 	add.w	r5, r0, #20
 80247cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80247d0:	462b      	mov	r3, r5
 80247d2:	2200      	movs	r2, #0
 80247d4:	4543      	cmp	r3, r8
 80247d6:	d321      	bcc.n	802481c <__multiply+0x98>
 80247d8:	f107 0114 	add.w	r1, r7, #20
 80247dc:	f104 0214 	add.w	r2, r4, #20
 80247e0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80247e4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80247e8:	9302      	str	r3, [sp, #8]
 80247ea:	1b13      	subs	r3, r2, r4
 80247ec:	3b15      	subs	r3, #21
 80247ee:	f023 0303 	bic.w	r3, r3, #3
 80247f2:	3304      	adds	r3, #4
 80247f4:	f104 0715 	add.w	r7, r4, #21
 80247f8:	42ba      	cmp	r2, r7
 80247fa:	bf38      	it	cc
 80247fc:	2304      	movcc	r3, #4
 80247fe:	9301      	str	r3, [sp, #4]
 8024800:	9b02      	ldr	r3, [sp, #8]
 8024802:	9103      	str	r1, [sp, #12]
 8024804:	428b      	cmp	r3, r1
 8024806:	d80c      	bhi.n	8024822 <__multiply+0x9e>
 8024808:	2e00      	cmp	r6, #0
 802480a:	dd03      	ble.n	8024814 <__multiply+0x90>
 802480c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8024810:	2b00      	cmp	r3, #0
 8024812:	d05b      	beq.n	80248cc <__multiply+0x148>
 8024814:	6106      	str	r6, [r0, #16]
 8024816:	b005      	add	sp, #20
 8024818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802481c:	f843 2b04 	str.w	r2, [r3], #4
 8024820:	e7d8      	b.n	80247d4 <__multiply+0x50>
 8024822:	f8b1 a000 	ldrh.w	sl, [r1]
 8024826:	f1ba 0f00 	cmp.w	sl, #0
 802482a:	d024      	beq.n	8024876 <__multiply+0xf2>
 802482c:	f104 0e14 	add.w	lr, r4, #20
 8024830:	46a9      	mov	r9, r5
 8024832:	f04f 0c00 	mov.w	ip, #0
 8024836:	f85e 7b04 	ldr.w	r7, [lr], #4
 802483a:	f8d9 3000 	ldr.w	r3, [r9]
 802483e:	fa1f fb87 	uxth.w	fp, r7
 8024842:	b29b      	uxth	r3, r3
 8024844:	fb0a 330b 	mla	r3, sl, fp, r3
 8024848:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 802484c:	f8d9 7000 	ldr.w	r7, [r9]
 8024850:	4463      	add	r3, ip
 8024852:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8024856:	fb0a c70b 	mla	r7, sl, fp, ip
 802485a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 802485e:	b29b      	uxth	r3, r3
 8024860:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8024864:	4572      	cmp	r2, lr
 8024866:	f849 3b04 	str.w	r3, [r9], #4
 802486a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802486e:	d8e2      	bhi.n	8024836 <__multiply+0xb2>
 8024870:	9b01      	ldr	r3, [sp, #4]
 8024872:	f845 c003 	str.w	ip, [r5, r3]
 8024876:	9b03      	ldr	r3, [sp, #12]
 8024878:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 802487c:	3104      	adds	r1, #4
 802487e:	f1b9 0f00 	cmp.w	r9, #0
 8024882:	d021      	beq.n	80248c8 <__multiply+0x144>
 8024884:	682b      	ldr	r3, [r5, #0]
 8024886:	f104 0c14 	add.w	ip, r4, #20
 802488a:	46ae      	mov	lr, r5
 802488c:	f04f 0a00 	mov.w	sl, #0
 8024890:	f8bc b000 	ldrh.w	fp, [ip]
 8024894:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8024898:	fb09 770b 	mla	r7, r9, fp, r7
 802489c:	4457      	add	r7, sl
 802489e:	b29b      	uxth	r3, r3
 80248a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80248a4:	f84e 3b04 	str.w	r3, [lr], #4
 80248a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80248ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80248b0:	f8be 3000 	ldrh.w	r3, [lr]
 80248b4:	fb09 330a 	mla	r3, r9, sl, r3
 80248b8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80248bc:	4562      	cmp	r2, ip
 80248be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80248c2:	d8e5      	bhi.n	8024890 <__multiply+0x10c>
 80248c4:	9f01      	ldr	r7, [sp, #4]
 80248c6:	51eb      	str	r3, [r5, r7]
 80248c8:	3504      	adds	r5, #4
 80248ca:	e799      	b.n	8024800 <__multiply+0x7c>
 80248cc:	3e01      	subs	r6, #1
 80248ce:	e79b      	b.n	8024808 <__multiply+0x84>
 80248d0:	0802c3a9 	.word	0x0802c3a9
 80248d4:	0802c3ba 	.word	0x0802c3ba

080248d8 <__pow5mult>:
 80248d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80248dc:	4615      	mov	r5, r2
 80248de:	f012 0203 	ands.w	r2, r2, #3
 80248e2:	4607      	mov	r7, r0
 80248e4:	460e      	mov	r6, r1
 80248e6:	d007      	beq.n	80248f8 <__pow5mult+0x20>
 80248e8:	4c25      	ldr	r4, [pc, #148]	@ (8024980 <__pow5mult+0xa8>)
 80248ea:	3a01      	subs	r2, #1
 80248ec:	2300      	movs	r3, #0
 80248ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80248f2:	f7ff fe9f 	bl	8024634 <__multadd>
 80248f6:	4606      	mov	r6, r0
 80248f8:	10ad      	asrs	r5, r5, #2
 80248fa:	d03d      	beq.n	8024978 <__pow5mult+0xa0>
 80248fc:	69fc      	ldr	r4, [r7, #28]
 80248fe:	b97c      	cbnz	r4, 8024920 <__pow5mult+0x48>
 8024900:	2010      	movs	r0, #16
 8024902:	f7fe f937 	bl	8022b74 <malloc>
 8024906:	4602      	mov	r2, r0
 8024908:	61f8      	str	r0, [r7, #28]
 802490a:	b928      	cbnz	r0, 8024918 <__pow5mult+0x40>
 802490c:	4b1d      	ldr	r3, [pc, #116]	@ (8024984 <__pow5mult+0xac>)
 802490e:	481e      	ldr	r0, [pc, #120]	@ (8024988 <__pow5mult+0xb0>)
 8024910:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8024914:	f7e9 fd6e 	bl	800e3f4 <__assert_func>
 8024918:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802491c:	6004      	str	r4, [r0, #0]
 802491e:	60c4      	str	r4, [r0, #12]
 8024920:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8024924:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8024928:	b94c      	cbnz	r4, 802493e <__pow5mult+0x66>
 802492a:	f240 2171 	movw	r1, #625	@ 0x271
 802492e:	4638      	mov	r0, r7
 8024930:	f7ff ff12 	bl	8024758 <__i2b>
 8024934:	2300      	movs	r3, #0
 8024936:	f8c8 0008 	str.w	r0, [r8, #8]
 802493a:	4604      	mov	r4, r0
 802493c:	6003      	str	r3, [r0, #0]
 802493e:	f04f 0900 	mov.w	r9, #0
 8024942:	07eb      	lsls	r3, r5, #31
 8024944:	d50a      	bpl.n	802495c <__pow5mult+0x84>
 8024946:	4631      	mov	r1, r6
 8024948:	4622      	mov	r2, r4
 802494a:	4638      	mov	r0, r7
 802494c:	f7ff ff1a 	bl	8024784 <__multiply>
 8024950:	4631      	mov	r1, r6
 8024952:	4680      	mov	r8, r0
 8024954:	4638      	mov	r0, r7
 8024956:	f7ff fe4b 	bl	80245f0 <_Bfree>
 802495a:	4646      	mov	r6, r8
 802495c:	106d      	asrs	r5, r5, #1
 802495e:	d00b      	beq.n	8024978 <__pow5mult+0xa0>
 8024960:	6820      	ldr	r0, [r4, #0]
 8024962:	b938      	cbnz	r0, 8024974 <__pow5mult+0x9c>
 8024964:	4622      	mov	r2, r4
 8024966:	4621      	mov	r1, r4
 8024968:	4638      	mov	r0, r7
 802496a:	f7ff ff0b 	bl	8024784 <__multiply>
 802496e:	6020      	str	r0, [r4, #0]
 8024970:	f8c0 9000 	str.w	r9, [r0]
 8024974:	4604      	mov	r4, r0
 8024976:	e7e4      	b.n	8024942 <__pow5mult+0x6a>
 8024978:	4630      	mov	r0, r6
 802497a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802497e:	bf00      	nop
 8024980:	0802c414 	.word	0x0802c414
 8024984:	0802c33a 	.word	0x0802c33a
 8024988:	0802c3ba 	.word	0x0802c3ba

0802498c <__lshift>:
 802498c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024990:	460c      	mov	r4, r1
 8024992:	6849      	ldr	r1, [r1, #4]
 8024994:	6923      	ldr	r3, [r4, #16]
 8024996:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802499a:	68a3      	ldr	r3, [r4, #8]
 802499c:	4607      	mov	r7, r0
 802499e:	4691      	mov	r9, r2
 80249a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80249a4:	f108 0601 	add.w	r6, r8, #1
 80249a8:	42b3      	cmp	r3, r6
 80249aa:	db0b      	blt.n	80249c4 <__lshift+0x38>
 80249ac:	4638      	mov	r0, r7
 80249ae:	f7ff fddf 	bl	8024570 <_Balloc>
 80249b2:	4605      	mov	r5, r0
 80249b4:	b948      	cbnz	r0, 80249ca <__lshift+0x3e>
 80249b6:	4602      	mov	r2, r0
 80249b8:	4b28      	ldr	r3, [pc, #160]	@ (8024a5c <__lshift+0xd0>)
 80249ba:	4829      	ldr	r0, [pc, #164]	@ (8024a60 <__lshift+0xd4>)
 80249bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80249c0:	f7e9 fd18 	bl	800e3f4 <__assert_func>
 80249c4:	3101      	adds	r1, #1
 80249c6:	005b      	lsls	r3, r3, #1
 80249c8:	e7ee      	b.n	80249a8 <__lshift+0x1c>
 80249ca:	2300      	movs	r3, #0
 80249cc:	f100 0114 	add.w	r1, r0, #20
 80249d0:	f100 0210 	add.w	r2, r0, #16
 80249d4:	4618      	mov	r0, r3
 80249d6:	4553      	cmp	r3, sl
 80249d8:	db33      	blt.n	8024a42 <__lshift+0xb6>
 80249da:	6920      	ldr	r0, [r4, #16]
 80249dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80249e0:	f104 0314 	add.w	r3, r4, #20
 80249e4:	f019 091f 	ands.w	r9, r9, #31
 80249e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80249ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80249f0:	d02b      	beq.n	8024a4a <__lshift+0xbe>
 80249f2:	f1c9 0e20 	rsb	lr, r9, #32
 80249f6:	468a      	mov	sl, r1
 80249f8:	2200      	movs	r2, #0
 80249fa:	6818      	ldr	r0, [r3, #0]
 80249fc:	fa00 f009 	lsl.w	r0, r0, r9
 8024a00:	4310      	orrs	r0, r2
 8024a02:	f84a 0b04 	str.w	r0, [sl], #4
 8024a06:	f853 2b04 	ldr.w	r2, [r3], #4
 8024a0a:	459c      	cmp	ip, r3
 8024a0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8024a10:	d8f3      	bhi.n	80249fa <__lshift+0x6e>
 8024a12:	ebac 0304 	sub.w	r3, ip, r4
 8024a16:	3b15      	subs	r3, #21
 8024a18:	f023 0303 	bic.w	r3, r3, #3
 8024a1c:	3304      	adds	r3, #4
 8024a1e:	f104 0015 	add.w	r0, r4, #21
 8024a22:	4584      	cmp	ip, r0
 8024a24:	bf38      	it	cc
 8024a26:	2304      	movcc	r3, #4
 8024a28:	50ca      	str	r2, [r1, r3]
 8024a2a:	b10a      	cbz	r2, 8024a30 <__lshift+0xa4>
 8024a2c:	f108 0602 	add.w	r6, r8, #2
 8024a30:	3e01      	subs	r6, #1
 8024a32:	4638      	mov	r0, r7
 8024a34:	612e      	str	r6, [r5, #16]
 8024a36:	4621      	mov	r1, r4
 8024a38:	f7ff fdda 	bl	80245f0 <_Bfree>
 8024a3c:	4628      	mov	r0, r5
 8024a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024a42:	f842 0f04 	str.w	r0, [r2, #4]!
 8024a46:	3301      	adds	r3, #1
 8024a48:	e7c5      	b.n	80249d6 <__lshift+0x4a>
 8024a4a:	3904      	subs	r1, #4
 8024a4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8024a50:	f841 2f04 	str.w	r2, [r1, #4]!
 8024a54:	459c      	cmp	ip, r3
 8024a56:	d8f9      	bhi.n	8024a4c <__lshift+0xc0>
 8024a58:	e7ea      	b.n	8024a30 <__lshift+0xa4>
 8024a5a:	bf00      	nop
 8024a5c:	0802c3a9 	.word	0x0802c3a9
 8024a60:	0802c3ba 	.word	0x0802c3ba

08024a64 <__mcmp>:
 8024a64:	690a      	ldr	r2, [r1, #16]
 8024a66:	4603      	mov	r3, r0
 8024a68:	6900      	ldr	r0, [r0, #16]
 8024a6a:	1a80      	subs	r0, r0, r2
 8024a6c:	b530      	push	{r4, r5, lr}
 8024a6e:	d10e      	bne.n	8024a8e <__mcmp+0x2a>
 8024a70:	3314      	adds	r3, #20
 8024a72:	3114      	adds	r1, #20
 8024a74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8024a78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8024a7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8024a80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8024a84:	4295      	cmp	r5, r2
 8024a86:	d003      	beq.n	8024a90 <__mcmp+0x2c>
 8024a88:	d205      	bcs.n	8024a96 <__mcmp+0x32>
 8024a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8024a8e:	bd30      	pop	{r4, r5, pc}
 8024a90:	42a3      	cmp	r3, r4
 8024a92:	d3f3      	bcc.n	8024a7c <__mcmp+0x18>
 8024a94:	e7fb      	b.n	8024a8e <__mcmp+0x2a>
 8024a96:	2001      	movs	r0, #1
 8024a98:	e7f9      	b.n	8024a8e <__mcmp+0x2a>
	...

08024a9c <__mdiff>:
 8024a9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024aa0:	4689      	mov	r9, r1
 8024aa2:	4606      	mov	r6, r0
 8024aa4:	4611      	mov	r1, r2
 8024aa6:	4648      	mov	r0, r9
 8024aa8:	4614      	mov	r4, r2
 8024aaa:	f7ff ffdb 	bl	8024a64 <__mcmp>
 8024aae:	1e05      	subs	r5, r0, #0
 8024ab0:	d112      	bne.n	8024ad8 <__mdiff+0x3c>
 8024ab2:	4629      	mov	r1, r5
 8024ab4:	4630      	mov	r0, r6
 8024ab6:	f7ff fd5b 	bl	8024570 <_Balloc>
 8024aba:	4602      	mov	r2, r0
 8024abc:	b928      	cbnz	r0, 8024aca <__mdiff+0x2e>
 8024abe:	4b3f      	ldr	r3, [pc, #252]	@ (8024bbc <__mdiff+0x120>)
 8024ac0:	f240 2137 	movw	r1, #567	@ 0x237
 8024ac4:	483e      	ldr	r0, [pc, #248]	@ (8024bc0 <__mdiff+0x124>)
 8024ac6:	f7e9 fc95 	bl	800e3f4 <__assert_func>
 8024aca:	2301      	movs	r3, #1
 8024acc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8024ad0:	4610      	mov	r0, r2
 8024ad2:	b003      	add	sp, #12
 8024ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024ad8:	bfbc      	itt	lt
 8024ada:	464b      	movlt	r3, r9
 8024adc:	46a1      	movlt	r9, r4
 8024ade:	4630      	mov	r0, r6
 8024ae0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8024ae4:	bfba      	itte	lt
 8024ae6:	461c      	movlt	r4, r3
 8024ae8:	2501      	movlt	r5, #1
 8024aea:	2500      	movge	r5, #0
 8024aec:	f7ff fd40 	bl	8024570 <_Balloc>
 8024af0:	4602      	mov	r2, r0
 8024af2:	b918      	cbnz	r0, 8024afc <__mdiff+0x60>
 8024af4:	4b31      	ldr	r3, [pc, #196]	@ (8024bbc <__mdiff+0x120>)
 8024af6:	f240 2145 	movw	r1, #581	@ 0x245
 8024afa:	e7e3      	b.n	8024ac4 <__mdiff+0x28>
 8024afc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8024b00:	6926      	ldr	r6, [r4, #16]
 8024b02:	60c5      	str	r5, [r0, #12]
 8024b04:	f109 0310 	add.w	r3, r9, #16
 8024b08:	f109 0514 	add.w	r5, r9, #20
 8024b0c:	f104 0e14 	add.w	lr, r4, #20
 8024b10:	f100 0b14 	add.w	fp, r0, #20
 8024b14:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8024b18:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8024b1c:	9301      	str	r3, [sp, #4]
 8024b1e:	46d9      	mov	r9, fp
 8024b20:	f04f 0c00 	mov.w	ip, #0
 8024b24:	9b01      	ldr	r3, [sp, #4]
 8024b26:	f85e 0b04 	ldr.w	r0, [lr], #4
 8024b2a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8024b2e:	9301      	str	r3, [sp, #4]
 8024b30:	fa1f f38a 	uxth.w	r3, sl
 8024b34:	4619      	mov	r1, r3
 8024b36:	b283      	uxth	r3, r0
 8024b38:	1acb      	subs	r3, r1, r3
 8024b3a:	0c00      	lsrs	r0, r0, #16
 8024b3c:	4463      	add	r3, ip
 8024b3e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8024b42:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8024b46:	b29b      	uxth	r3, r3
 8024b48:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8024b4c:	4576      	cmp	r6, lr
 8024b4e:	f849 3b04 	str.w	r3, [r9], #4
 8024b52:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8024b56:	d8e5      	bhi.n	8024b24 <__mdiff+0x88>
 8024b58:	1b33      	subs	r3, r6, r4
 8024b5a:	3b15      	subs	r3, #21
 8024b5c:	f023 0303 	bic.w	r3, r3, #3
 8024b60:	3415      	adds	r4, #21
 8024b62:	3304      	adds	r3, #4
 8024b64:	42a6      	cmp	r6, r4
 8024b66:	bf38      	it	cc
 8024b68:	2304      	movcc	r3, #4
 8024b6a:	441d      	add	r5, r3
 8024b6c:	445b      	add	r3, fp
 8024b6e:	461e      	mov	r6, r3
 8024b70:	462c      	mov	r4, r5
 8024b72:	4544      	cmp	r4, r8
 8024b74:	d30e      	bcc.n	8024b94 <__mdiff+0xf8>
 8024b76:	f108 0103 	add.w	r1, r8, #3
 8024b7a:	1b49      	subs	r1, r1, r5
 8024b7c:	f021 0103 	bic.w	r1, r1, #3
 8024b80:	3d03      	subs	r5, #3
 8024b82:	45a8      	cmp	r8, r5
 8024b84:	bf38      	it	cc
 8024b86:	2100      	movcc	r1, #0
 8024b88:	440b      	add	r3, r1
 8024b8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8024b8e:	b191      	cbz	r1, 8024bb6 <__mdiff+0x11a>
 8024b90:	6117      	str	r7, [r2, #16]
 8024b92:	e79d      	b.n	8024ad0 <__mdiff+0x34>
 8024b94:	f854 1b04 	ldr.w	r1, [r4], #4
 8024b98:	46e6      	mov	lr, ip
 8024b9a:	0c08      	lsrs	r0, r1, #16
 8024b9c:	fa1c fc81 	uxtah	ip, ip, r1
 8024ba0:	4471      	add	r1, lr
 8024ba2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8024ba6:	b289      	uxth	r1, r1
 8024ba8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8024bac:	f846 1b04 	str.w	r1, [r6], #4
 8024bb0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8024bb4:	e7dd      	b.n	8024b72 <__mdiff+0xd6>
 8024bb6:	3f01      	subs	r7, #1
 8024bb8:	e7e7      	b.n	8024b8a <__mdiff+0xee>
 8024bba:	bf00      	nop
 8024bbc:	0802c3a9 	.word	0x0802c3a9
 8024bc0:	0802c3ba 	.word	0x0802c3ba

08024bc4 <__d2b>:
 8024bc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8024bc8:	460f      	mov	r7, r1
 8024bca:	2101      	movs	r1, #1
 8024bcc:	ec59 8b10 	vmov	r8, r9, d0
 8024bd0:	4616      	mov	r6, r2
 8024bd2:	f7ff fccd 	bl	8024570 <_Balloc>
 8024bd6:	4604      	mov	r4, r0
 8024bd8:	b930      	cbnz	r0, 8024be8 <__d2b+0x24>
 8024bda:	4602      	mov	r2, r0
 8024bdc:	4b23      	ldr	r3, [pc, #140]	@ (8024c6c <__d2b+0xa8>)
 8024bde:	4824      	ldr	r0, [pc, #144]	@ (8024c70 <__d2b+0xac>)
 8024be0:	f240 310f 	movw	r1, #783	@ 0x30f
 8024be4:	f7e9 fc06 	bl	800e3f4 <__assert_func>
 8024be8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8024bec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8024bf0:	b10d      	cbz	r5, 8024bf6 <__d2b+0x32>
 8024bf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8024bf6:	9301      	str	r3, [sp, #4]
 8024bf8:	f1b8 0300 	subs.w	r3, r8, #0
 8024bfc:	d023      	beq.n	8024c46 <__d2b+0x82>
 8024bfe:	4668      	mov	r0, sp
 8024c00:	9300      	str	r3, [sp, #0]
 8024c02:	f7ff fd7c 	bl	80246fe <__lo0bits>
 8024c06:	e9dd 1200 	ldrd	r1, r2, [sp]
 8024c0a:	b1d0      	cbz	r0, 8024c42 <__d2b+0x7e>
 8024c0c:	f1c0 0320 	rsb	r3, r0, #32
 8024c10:	fa02 f303 	lsl.w	r3, r2, r3
 8024c14:	430b      	orrs	r3, r1
 8024c16:	40c2      	lsrs	r2, r0
 8024c18:	6163      	str	r3, [r4, #20]
 8024c1a:	9201      	str	r2, [sp, #4]
 8024c1c:	9b01      	ldr	r3, [sp, #4]
 8024c1e:	61a3      	str	r3, [r4, #24]
 8024c20:	2b00      	cmp	r3, #0
 8024c22:	bf0c      	ite	eq
 8024c24:	2201      	moveq	r2, #1
 8024c26:	2202      	movne	r2, #2
 8024c28:	6122      	str	r2, [r4, #16]
 8024c2a:	b1a5      	cbz	r5, 8024c56 <__d2b+0x92>
 8024c2c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8024c30:	4405      	add	r5, r0
 8024c32:	603d      	str	r5, [r7, #0]
 8024c34:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8024c38:	6030      	str	r0, [r6, #0]
 8024c3a:	4620      	mov	r0, r4
 8024c3c:	b003      	add	sp, #12
 8024c3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024c42:	6161      	str	r1, [r4, #20]
 8024c44:	e7ea      	b.n	8024c1c <__d2b+0x58>
 8024c46:	a801      	add	r0, sp, #4
 8024c48:	f7ff fd59 	bl	80246fe <__lo0bits>
 8024c4c:	9b01      	ldr	r3, [sp, #4]
 8024c4e:	6163      	str	r3, [r4, #20]
 8024c50:	3020      	adds	r0, #32
 8024c52:	2201      	movs	r2, #1
 8024c54:	e7e8      	b.n	8024c28 <__d2b+0x64>
 8024c56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8024c5a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8024c5e:	6038      	str	r0, [r7, #0]
 8024c60:	6918      	ldr	r0, [r3, #16]
 8024c62:	f7ff fd2d 	bl	80246c0 <__hi0bits>
 8024c66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8024c6a:	e7e5      	b.n	8024c38 <__d2b+0x74>
 8024c6c:	0802c3a9 	.word	0x0802c3a9
 8024c70:	0802c3ba 	.word	0x0802c3ba

08024c74 <__sfputc_r>:
 8024c74:	6893      	ldr	r3, [r2, #8]
 8024c76:	3b01      	subs	r3, #1
 8024c78:	2b00      	cmp	r3, #0
 8024c7a:	b410      	push	{r4}
 8024c7c:	6093      	str	r3, [r2, #8]
 8024c7e:	da08      	bge.n	8024c92 <__sfputc_r+0x1e>
 8024c80:	6994      	ldr	r4, [r2, #24]
 8024c82:	42a3      	cmp	r3, r4
 8024c84:	db01      	blt.n	8024c8a <__sfputc_r+0x16>
 8024c86:	290a      	cmp	r1, #10
 8024c88:	d103      	bne.n	8024c92 <__sfputc_r+0x1e>
 8024c8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024c8e:	f000 b9df 	b.w	8025050 <__swbuf_r>
 8024c92:	6813      	ldr	r3, [r2, #0]
 8024c94:	1c58      	adds	r0, r3, #1
 8024c96:	6010      	str	r0, [r2, #0]
 8024c98:	7019      	strb	r1, [r3, #0]
 8024c9a:	4608      	mov	r0, r1
 8024c9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024ca0:	4770      	bx	lr

08024ca2 <__sfputs_r>:
 8024ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024ca4:	4606      	mov	r6, r0
 8024ca6:	460f      	mov	r7, r1
 8024ca8:	4614      	mov	r4, r2
 8024caa:	18d5      	adds	r5, r2, r3
 8024cac:	42ac      	cmp	r4, r5
 8024cae:	d101      	bne.n	8024cb4 <__sfputs_r+0x12>
 8024cb0:	2000      	movs	r0, #0
 8024cb2:	e007      	b.n	8024cc4 <__sfputs_r+0x22>
 8024cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024cb8:	463a      	mov	r2, r7
 8024cba:	4630      	mov	r0, r6
 8024cbc:	f7ff ffda 	bl	8024c74 <__sfputc_r>
 8024cc0:	1c43      	adds	r3, r0, #1
 8024cc2:	d1f3      	bne.n	8024cac <__sfputs_r+0xa>
 8024cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024cc8 <_vfiprintf_r>:
 8024cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ccc:	460d      	mov	r5, r1
 8024cce:	b09d      	sub	sp, #116	@ 0x74
 8024cd0:	4614      	mov	r4, r2
 8024cd2:	4698      	mov	r8, r3
 8024cd4:	4606      	mov	r6, r0
 8024cd6:	b118      	cbz	r0, 8024ce0 <_vfiprintf_r+0x18>
 8024cd8:	6a03      	ldr	r3, [r0, #32]
 8024cda:	b90b      	cbnz	r3, 8024ce0 <_vfiprintf_r+0x18>
 8024cdc:	f7fe fccc 	bl	8023678 <__sinit>
 8024ce0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8024ce2:	07d9      	lsls	r1, r3, #31
 8024ce4:	d405      	bmi.n	8024cf2 <_vfiprintf_r+0x2a>
 8024ce6:	89ab      	ldrh	r3, [r5, #12]
 8024ce8:	059a      	lsls	r2, r3, #22
 8024cea:	d402      	bmi.n	8024cf2 <_vfiprintf_r+0x2a>
 8024cec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8024cee:	f7fe fe06 	bl	80238fe <__retarget_lock_acquire_recursive>
 8024cf2:	89ab      	ldrh	r3, [r5, #12]
 8024cf4:	071b      	lsls	r3, r3, #28
 8024cf6:	d501      	bpl.n	8024cfc <_vfiprintf_r+0x34>
 8024cf8:	692b      	ldr	r3, [r5, #16]
 8024cfa:	b99b      	cbnz	r3, 8024d24 <_vfiprintf_r+0x5c>
 8024cfc:	4629      	mov	r1, r5
 8024cfe:	4630      	mov	r0, r6
 8024d00:	f000 f9e4 	bl	80250cc <__swsetup_r>
 8024d04:	b170      	cbz	r0, 8024d24 <_vfiprintf_r+0x5c>
 8024d06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8024d08:	07dc      	lsls	r4, r3, #31
 8024d0a:	d504      	bpl.n	8024d16 <_vfiprintf_r+0x4e>
 8024d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8024d10:	b01d      	add	sp, #116	@ 0x74
 8024d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024d16:	89ab      	ldrh	r3, [r5, #12]
 8024d18:	0598      	lsls	r0, r3, #22
 8024d1a:	d4f7      	bmi.n	8024d0c <_vfiprintf_r+0x44>
 8024d1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8024d1e:	f7fe fdef 	bl	8023900 <__retarget_lock_release_recursive>
 8024d22:	e7f3      	b.n	8024d0c <_vfiprintf_r+0x44>
 8024d24:	2300      	movs	r3, #0
 8024d26:	9309      	str	r3, [sp, #36]	@ 0x24
 8024d28:	2320      	movs	r3, #32
 8024d2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8024d2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8024d32:	2330      	movs	r3, #48	@ 0x30
 8024d34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8024ee4 <_vfiprintf_r+0x21c>
 8024d38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8024d3c:	f04f 0901 	mov.w	r9, #1
 8024d40:	4623      	mov	r3, r4
 8024d42:	469a      	mov	sl, r3
 8024d44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024d48:	b10a      	cbz	r2, 8024d4e <_vfiprintf_r+0x86>
 8024d4a:	2a25      	cmp	r2, #37	@ 0x25
 8024d4c:	d1f9      	bne.n	8024d42 <_vfiprintf_r+0x7a>
 8024d4e:	ebba 0b04 	subs.w	fp, sl, r4
 8024d52:	d00b      	beq.n	8024d6c <_vfiprintf_r+0xa4>
 8024d54:	465b      	mov	r3, fp
 8024d56:	4622      	mov	r2, r4
 8024d58:	4629      	mov	r1, r5
 8024d5a:	4630      	mov	r0, r6
 8024d5c:	f7ff ffa1 	bl	8024ca2 <__sfputs_r>
 8024d60:	3001      	adds	r0, #1
 8024d62:	f000 80a7 	beq.w	8024eb4 <_vfiprintf_r+0x1ec>
 8024d66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024d68:	445a      	add	r2, fp
 8024d6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8024d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8024d70:	2b00      	cmp	r3, #0
 8024d72:	f000 809f 	beq.w	8024eb4 <_vfiprintf_r+0x1ec>
 8024d76:	2300      	movs	r3, #0
 8024d78:	f04f 32ff 	mov.w	r2, #4294967295
 8024d7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024d80:	f10a 0a01 	add.w	sl, sl, #1
 8024d84:	9304      	str	r3, [sp, #16]
 8024d86:	9307      	str	r3, [sp, #28]
 8024d88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8024d8c:	931a      	str	r3, [sp, #104]	@ 0x68
 8024d8e:	4654      	mov	r4, sl
 8024d90:	2205      	movs	r2, #5
 8024d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024d96:	4853      	ldr	r0, [pc, #332]	@ (8024ee4 <_vfiprintf_r+0x21c>)
 8024d98:	f7db faba 	bl	8000310 <memchr>
 8024d9c:	9a04      	ldr	r2, [sp, #16]
 8024d9e:	b9d8      	cbnz	r0, 8024dd8 <_vfiprintf_r+0x110>
 8024da0:	06d1      	lsls	r1, r2, #27
 8024da2:	bf44      	itt	mi
 8024da4:	2320      	movmi	r3, #32
 8024da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8024daa:	0713      	lsls	r3, r2, #28
 8024dac:	bf44      	itt	mi
 8024dae:	232b      	movmi	r3, #43	@ 0x2b
 8024db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8024db4:	f89a 3000 	ldrb.w	r3, [sl]
 8024db8:	2b2a      	cmp	r3, #42	@ 0x2a
 8024dba:	d015      	beq.n	8024de8 <_vfiprintf_r+0x120>
 8024dbc:	9a07      	ldr	r2, [sp, #28]
 8024dbe:	4654      	mov	r4, sl
 8024dc0:	2000      	movs	r0, #0
 8024dc2:	f04f 0c0a 	mov.w	ip, #10
 8024dc6:	4621      	mov	r1, r4
 8024dc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024dcc:	3b30      	subs	r3, #48	@ 0x30
 8024dce:	2b09      	cmp	r3, #9
 8024dd0:	d94b      	bls.n	8024e6a <_vfiprintf_r+0x1a2>
 8024dd2:	b1b0      	cbz	r0, 8024e02 <_vfiprintf_r+0x13a>
 8024dd4:	9207      	str	r2, [sp, #28]
 8024dd6:	e014      	b.n	8024e02 <_vfiprintf_r+0x13a>
 8024dd8:	eba0 0308 	sub.w	r3, r0, r8
 8024ddc:	fa09 f303 	lsl.w	r3, r9, r3
 8024de0:	4313      	orrs	r3, r2
 8024de2:	9304      	str	r3, [sp, #16]
 8024de4:	46a2      	mov	sl, r4
 8024de6:	e7d2      	b.n	8024d8e <_vfiprintf_r+0xc6>
 8024de8:	9b03      	ldr	r3, [sp, #12]
 8024dea:	1d19      	adds	r1, r3, #4
 8024dec:	681b      	ldr	r3, [r3, #0]
 8024dee:	9103      	str	r1, [sp, #12]
 8024df0:	2b00      	cmp	r3, #0
 8024df2:	bfbb      	ittet	lt
 8024df4:	425b      	neglt	r3, r3
 8024df6:	f042 0202 	orrlt.w	r2, r2, #2
 8024dfa:	9307      	strge	r3, [sp, #28]
 8024dfc:	9307      	strlt	r3, [sp, #28]
 8024dfe:	bfb8      	it	lt
 8024e00:	9204      	strlt	r2, [sp, #16]
 8024e02:	7823      	ldrb	r3, [r4, #0]
 8024e04:	2b2e      	cmp	r3, #46	@ 0x2e
 8024e06:	d10a      	bne.n	8024e1e <_vfiprintf_r+0x156>
 8024e08:	7863      	ldrb	r3, [r4, #1]
 8024e0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8024e0c:	d132      	bne.n	8024e74 <_vfiprintf_r+0x1ac>
 8024e0e:	9b03      	ldr	r3, [sp, #12]
 8024e10:	1d1a      	adds	r2, r3, #4
 8024e12:	681b      	ldr	r3, [r3, #0]
 8024e14:	9203      	str	r2, [sp, #12]
 8024e16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8024e1a:	3402      	adds	r4, #2
 8024e1c:	9305      	str	r3, [sp, #20]
 8024e1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8024ef4 <_vfiprintf_r+0x22c>
 8024e22:	7821      	ldrb	r1, [r4, #0]
 8024e24:	2203      	movs	r2, #3
 8024e26:	4650      	mov	r0, sl
 8024e28:	f7db fa72 	bl	8000310 <memchr>
 8024e2c:	b138      	cbz	r0, 8024e3e <_vfiprintf_r+0x176>
 8024e2e:	9b04      	ldr	r3, [sp, #16]
 8024e30:	eba0 000a 	sub.w	r0, r0, sl
 8024e34:	2240      	movs	r2, #64	@ 0x40
 8024e36:	4082      	lsls	r2, r0
 8024e38:	4313      	orrs	r3, r2
 8024e3a:	3401      	adds	r4, #1
 8024e3c:	9304      	str	r3, [sp, #16]
 8024e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024e42:	4829      	ldr	r0, [pc, #164]	@ (8024ee8 <_vfiprintf_r+0x220>)
 8024e44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8024e48:	2206      	movs	r2, #6
 8024e4a:	f7db fa61 	bl	8000310 <memchr>
 8024e4e:	2800      	cmp	r0, #0
 8024e50:	d03f      	beq.n	8024ed2 <_vfiprintf_r+0x20a>
 8024e52:	4b26      	ldr	r3, [pc, #152]	@ (8024eec <_vfiprintf_r+0x224>)
 8024e54:	bb1b      	cbnz	r3, 8024e9e <_vfiprintf_r+0x1d6>
 8024e56:	9b03      	ldr	r3, [sp, #12]
 8024e58:	3307      	adds	r3, #7
 8024e5a:	f023 0307 	bic.w	r3, r3, #7
 8024e5e:	3308      	adds	r3, #8
 8024e60:	9303      	str	r3, [sp, #12]
 8024e62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024e64:	443b      	add	r3, r7
 8024e66:	9309      	str	r3, [sp, #36]	@ 0x24
 8024e68:	e76a      	b.n	8024d40 <_vfiprintf_r+0x78>
 8024e6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8024e6e:	460c      	mov	r4, r1
 8024e70:	2001      	movs	r0, #1
 8024e72:	e7a8      	b.n	8024dc6 <_vfiprintf_r+0xfe>
 8024e74:	2300      	movs	r3, #0
 8024e76:	3401      	adds	r4, #1
 8024e78:	9305      	str	r3, [sp, #20]
 8024e7a:	4619      	mov	r1, r3
 8024e7c:	f04f 0c0a 	mov.w	ip, #10
 8024e80:	4620      	mov	r0, r4
 8024e82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024e86:	3a30      	subs	r2, #48	@ 0x30
 8024e88:	2a09      	cmp	r2, #9
 8024e8a:	d903      	bls.n	8024e94 <_vfiprintf_r+0x1cc>
 8024e8c:	2b00      	cmp	r3, #0
 8024e8e:	d0c6      	beq.n	8024e1e <_vfiprintf_r+0x156>
 8024e90:	9105      	str	r1, [sp, #20]
 8024e92:	e7c4      	b.n	8024e1e <_vfiprintf_r+0x156>
 8024e94:	fb0c 2101 	mla	r1, ip, r1, r2
 8024e98:	4604      	mov	r4, r0
 8024e9a:	2301      	movs	r3, #1
 8024e9c:	e7f0      	b.n	8024e80 <_vfiprintf_r+0x1b8>
 8024e9e:	ab03      	add	r3, sp, #12
 8024ea0:	9300      	str	r3, [sp, #0]
 8024ea2:	462a      	mov	r2, r5
 8024ea4:	4b12      	ldr	r3, [pc, #72]	@ (8024ef0 <_vfiprintf_r+0x228>)
 8024ea6:	a904      	add	r1, sp, #16
 8024ea8:	4630      	mov	r0, r6
 8024eaa:	f7fd ffb1 	bl	8022e10 <_printf_float>
 8024eae:	4607      	mov	r7, r0
 8024eb0:	1c78      	adds	r0, r7, #1
 8024eb2:	d1d6      	bne.n	8024e62 <_vfiprintf_r+0x19a>
 8024eb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8024eb6:	07d9      	lsls	r1, r3, #31
 8024eb8:	d405      	bmi.n	8024ec6 <_vfiprintf_r+0x1fe>
 8024eba:	89ab      	ldrh	r3, [r5, #12]
 8024ebc:	059a      	lsls	r2, r3, #22
 8024ebe:	d402      	bmi.n	8024ec6 <_vfiprintf_r+0x1fe>
 8024ec0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8024ec2:	f7fe fd1d 	bl	8023900 <__retarget_lock_release_recursive>
 8024ec6:	89ab      	ldrh	r3, [r5, #12]
 8024ec8:	065b      	lsls	r3, r3, #25
 8024eca:	f53f af1f 	bmi.w	8024d0c <_vfiprintf_r+0x44>
 8024ece:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024ed0:	e71e      	b.n	8024d10 <_vfiprintf_r+0x48>
 8024ed2:	ab03      	add	r3, sp, #12
 8024ed4:	9300      	str	r3, [sp, #0]
 8024ed6:	462a      	mov	r2, r5
 8024ed8:	4b05      	ldr	r3, [pc, #20]	@ (8024ef0 <_vfiprintf_r+0x228>)
 8024eda:	a904      	add	r1, sp, #16
 8024edc:	4630      	mov	r0, r6
 8024ede:	f7fe fa1f 	bl	8023320 <_printf_i>
 8024ee2:	e7e4      	b.n	8024eae <_vfiprintf_r+0x1e6>
 8024ee4:	0802c510 	.word	0x0802c510
 8024ee8:	0802c51a 	.word	0x0802c51a
 8024eec:	08022e11 	.word	0x08022e11
 8024ef0:	08024ca3 	.word	0x08024ca3
 8024ef4:	0802c516 	.word	0x0802c516

08024ef8 <__sflush_r>:
 8024ef8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8024efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024f00:	0716      	lsls	r6, r2, #28
 8024f02:	4605      	mov	r5, r0
 8024f04:	460c      	mov	r4, r1
 8024f06:	d454      	bmi.n	8024fb2 <__sflush_r+0xba>
 8024f08:	684b      	ldr	r3, [r1, #4]
 8024f0a:	2b00      	cmp	r3, #0
 8024f0c:	dc02      	bgt.n	8024f14 <__sflush_r+0x1c>
 8024f0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8024f10:	2b00      	cmp	r3, #0
 8024f12:	dd48      	ble.n	8024fa6 <__sflush_r+0xae>
 8024f14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8024f16:	2e00      	cmp	r6, #0
 8024f18:	d045      	beq.n	8024fa6 <__sflush_r+0xae>
 8024f1a:	2300      	movs	r3, #0
 8024f1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8024f20:	682f      	ldr	r7, [r5, #0]
 8024f22:	6a21      	ldr	r1, [r4, #32]
 8024f24:	602b      	str	r3, [r5, #0]
 8024f26:	d030      	beq.n	8024f8a <__sflush_r+0x92>
 8024f28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8024f2a:	89a3      	ldrh	r3, [r4, #12]
 8024f2c:	0759      	lsls	r1, r3, #29
 8024f2e:	d505      	bpl.n	8024f3c <__sflush_r+0x44>
 8024f30:	6863      	ldr	r3, [r4, #4]
 8024f32:	1ad2      	subs	r2, r2, r3
 8024f34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8024f36:	b10b      	cbz	r3, 8024f3c <__sflush_r+0x44>
 8024f38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8024f3a:	1ad2      	subs	r2, r2, r3
 8024f3c:	2300      	movs	r3, #0
 8024f3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8024f40:	6a21      	ldr	r1, [r4, #32]
 8024f42:	4628      	mov	r0, r5
 8024f44:	47b0      	blx	r6
 8024f46:	1c43      	adds	r3, r0, #1
 8024f48:	89a3      	ldrh	r3, [r4, #12]
 8024f4a:	d106      	bne.n	8024f5a <__sflush_r+0x62>
 8024f4c:	6829      	ldr	r1, [r5, #0]
 8024f4e:	291d      	cmp	r1, #29
 8024f50:	d82b      	bhi.n	8024faa <__sflush_r+0xb2>
 8024f52:	4a2a      	ldr	r2, [pc, #168]	@ (8024ffc <__sflush_r+0x104>)
 8024f54:	410a      	asrs	r2, r1
 8024f56:	07d6      	lsls	r6, r2, #31
 8024f58:	d427      	bmi.n	8024faa <__sflush_r+0xb2>
 8024f5a:	2200      	movs	r2, #0
 8024f5c:	6062      	str	r2, [r4, #4]
 8024f5e:	04d9      	lsls	r1, r3, #19
 8024f60:	6922      	ldr	r2, [r4, #16]
 8024f62:	6022      	str	r2, [r4, #0]
 8024f64:	d504      	bpl.n	8024f70 <__sflush_r+0x78>
 8024f66:	1c42      	adds	r2, r0, #1
 8024f68:	d101      	bne.n	8024f6e <__sflush_r+0x76>
 8024f6a:	682b      	ldr	r3, [r5, #0]
 8024f6c:	b903      	cbnz	r3, 8024f70 <__sflush_r+0x78>
 8024f6e:	6560      	str	r0, [r4, #84]	@ 0x54
 8024f70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8024f72:	602f      	str	r7, [r5, #0]
 8024f74:	b1b9      	cbz	r1, 8024fa6 <__sflush_r+0xae>
 8024f76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8024f7a:	4299      	cmp	r1, r3
 8024f7c:	d002      	beq.n	8024f84 <__sflush_r+0x8c>
 8024f7e:	4628      	mov	r0, r5
 8024f80:	f7ff faac 	bl	80244dc <_free_r>
 8024f84:	2300      	movs	r3, #0
 8024f86:	6363      	str	r3, [r4, #52]	@ 0x34
 8024f88:	e00d      	b.n	8024fa6 <__sflush_r+0xae>
 8024f8a:	2301      	movs	r3, #1
 8024f8c:	4628      	mov	r0, r5
 8024f8e:	47b0      	blx	r6
 8024f90:	4602      	mov	r2, r0
 8024f92:	1c50      	adds	r0, r2, #1
 8024f94:	d1c9      	bne.n	8024f2a <__sflush_r+0x32>
 8024f96:	682b      	ldr	r3, [r5, #0]
 8024f98:	2b00      	cmp	r3, #0
 8024f9a:	d0c6      	beq.n	8024f2a <__sflush_r+0x32>
 8024f9c:	2b1d      	cmp	r3, #29
 8024f9e:	d001      	beq.n	8024fa4 <__sflush_r+0xac>
 8024fa0:	2b16      	cmp	r3, #22
 8024fa2:	d11e      	bne.n	8024fe2 <__sflush_r+0xea>
 8024fa4:	602f      	str	r7, [r5, #0]
 8024fa6:	2000      	movs	r0, #0
 8024fa8:	e022      	b.n	8024ff0 <__sflush_r+0xf8>
 8024faa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8024fae:	b21b      	sxth	r3, r3
 8024fb0:	e01b      	b.n	8024fea <__sflush_r+0xf2>
 8024fb2:	690f      	ldr	r7, [r1, #16]
 8024fb4:	2f00      	cmp	r7, #0
 8024fb6:	d0f6      	beq.n	8024fa6 <__sflush_r+0xae>
 8024fb8:	0793      	lsls	r3, r2, #30
 8024fba:	680e      	ldr	r6, [r1, #0]
 8024fbc:	bf08      	it	eq
 8024fbe:	694b      	ldreq	r3, [r1, #20]
 8024fc0:	600f      	str	r7, [r1, #0]
 8024fc2:	bf18      	it	ne
 8024fc4:	2300      	movne	r3, #0
 8024fc6:	eba6 0807 	sub.w	r8, r6, r7
 8024fca:	608b      	str	r3, [r1, #8]
 8024fcc:	f1b8 0f00 	cmp.w	r8, #0
 8024fd0:	dde9      	ble.n	8024fa6 <__sflush_r+0xae>
 8024fd2:	6a21      	ldr	r1, [r4, #32]
 8024fd4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8024fd6:	4643      	mov	r3, r8
 8024fd8:	463a      	mov	r2, r7
 8024fda:	4628      	mov	r0, r5
 8024fdc:	47b0      	blx	r6
 8024fde:	2800      	cmp	r0, #0
 8024fe0:	dc08      	bgt.n	8024ff4 <__sflush_r+0xfc>
 8024fe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024fe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8024fea:	81a3      	strh	r3, [r4, #12]
 8024fec:	f04f 30ff 	mov.w	r0, #4294967295
 8024ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024ff4:	4407      	add	r7, r0
 8024ff6:	eba8 0800 	sub.w	r8, r8, r0
 8024ffa:	e7e7      	b.n	8024fcc <__sflush_r+0xd4>
 8024ffc:	dfbffffe 	.word	0xdfbffffe

08025000 <_fflush_r>:
 8025000:	b538      	push	{r3, r4, r5, lr}
 8025002:	690b      	ldr	r3, [r1, #16]
 8025004:	4605      	mov	r5, r0
 8025006:	460c      	mov	r4, r1
 8025008:	b913      	cbnz	r3, 8025010 <_fflush_r+0x10>
 802500a:	2500      	movs	r5, #0
 802500c:	4628      	mov	r0, r5
 802500e:	bd38      	pop	{r3, r4, r5, pc}
 8025010:	b118      	cbz	r0, 802501a <_fflush_r+0x1a>
 8025012:	6a03      	ldr	r3, [r0, #32]
 8025014:	b90b      	cbnz	r3, 802501a <_fflush_r+0x1a>
 8025016:	f7fe fb2f 	bl	8023678 <__sinit>
 802501a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802501e:	2b00      	cmp	r3, #0
 8025020:	d0f3      	beq.n	802500a <_fflush_r+0xa>
 8025022:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8025024:	07d0      	lsls	r0, r2, #31
 8025026:	d404      	bmi.n	8025032 <_fflush_r+0x32>
 8025028:	0599      	lsls	r1, r3, #22
 802502a:	d402      	bmi.n	8025032 <_fflush_r+0x32>
 802502c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802502e:	f7fe fc66 	bl	80238fe <__retarget_lock_acquire_recursive>
 8025032:	4628      	mov	r0, r5
 8025034:	4621      	mov	r1, r4
 8025036:	f7ff ff5f 	bl	8024ef8 <__sflush_r>
 802503a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802503c:	07da      	lsls	r2, r3, #31
 802503e:	4605      	mov	r5, r0
 8025040:	d4e4      	bmi.n	802500c <_fflush_r+0xc>
 8025042:	89a3      	ldrh	r3, [r4, #12]
 8025044:	059b      	lsls	r3, r3, #22
 8025046:	d4e1      	bmi.n	802500c <_fflush_r+0xc>
 8025048:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802504a:	f7fe fc59 	bl	8023900 <__retarget_lock_release_recursive>
 802504e:	e7dd      	b.n	802500c <_fflush_r+0xc>

08025050 <__swbuf_r>:
 8025050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025052:	460e      	mov	r6, r1
 8025054:	4614      	mov	r4, r2
 8025056:	4605      	mov	r5, r0
 8025058:	b118      	cbz	r0, 8025062 <__swbuf_r+0x12>
 802505a:	6a03      	ldr	r3, [r0, #32]
 802505c:	b90b      	cbnz	r3, 8025062 <__swbuf_r+0x12>
 802505e:	f7fe fb0b 	bl	8023678 <__sinit>
 8025062:	69a3      	ldr	r3, [r4, #24]
 8025064:	60a3      	str	r3, [r4, #8]
 8025066:	89a3      	ldrh	r3, [r4, #12]
 8025068:	071a      	lsls	r2, r3, #28
 802506a:	d501      	bpl.n	8025070 <__swbuf_r+0x20>
 802506c:	6923      	ldr	r3, [r4, #16]
 802506e:	b943      	cbnz	r3, 8025082 <__swbuf_r+0x32>
 8025070:	4621      	mov	r1, r4
 8025072:	4628      	mov	r0, r5
 8025074:	f000 f82a 	bl	80250cc <__swsetup_r>
 8025078:	b118      	cbz	r0, 8025082 <__swbuf_r+0x32>
 802507a:	f04f 37ff 	mov.w	r7, #4294967295
 802507e:	4638      	mov	r0, r7
 8025080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025082:	6823      	ldr	r3, [r4, #0]
 8025084:	6922      	ldr	r2, [r4, #16]
 8025086:	1a98      	subs	r0, r3, r2
 8025088:	6963      	ldr	r3, [r4, #20]
 802508a:	b2f6      	uxtb	r6, r6
 802508c:	4283      	cmp	r3, r0
 802508e:	4637      	mov	r7, r6
 8025090:	dc05      	bgt.n	802509e <__swbuf_r+0x4e>
 8025092:	4621      	mov	r1, r4
 8025094:	4628      	mov	r0, r5
 8025096:	f7ff ffb3 	bl	8025000 <_fflush_r>
 802509a:	2800      	cmp	r0, #0
 802509c:	d1ed      	bne.n	802507a <__swbuf_r+0x2a>
 802509e:	68a3      	ldr	r3, [r4, #8]
 80250a0:	3b01      	subs	r3, #1
 80250a2:	60a3      	str	r3, [r4, #8]
 80250a4:	6823      	ldr	r3, [r4, #0]
 80250a6:	1c5a      	adds	r2, r3, #1
 80250a8:	6022      	str	r2, [r4, #0]
 80250aa:	701e      	strb	r6, [r3, #0]
 80250ac:	6962      	ldr	r2, [r4, #20]
 80250ae:	1c43      	adds	r3, r0, #1
 80250b0:	429a      	cmp	r2, r3
 80250b2:	d004      	beq.n	80250be <__swbuf_r+0x6e>
 80250b4:	89a3      	ldrh	r3, [r4, #12]
 80250b6:	07db      	lsls	r3, r3, #31
 80250b8:	d5e1      	bpl.n	802507e <__swbuf_r+0x2e>
 80250ba:	2e0a      	cmp	r6, #10
 80250bc:	d1df      	bne.n	802507e <__swbuf_r+0x2e>
 80250be:	4621      	mov	r1, r4
 80250c0:	4628      	mov	r0, r5
 80250c2:	f7ff ff9d 	bl	8025000 <_fflush_r>
 80250c6:	2800      	cmp	r0, #0
 80250c8:	d0d9      	beq.n	802507e <__swbuf_r+0x2e>
 80250ca:	e7d6      	b.n	802507a <__swbuf_r+0x2a>

080250cc <__swsetup_r>:
 80250cc:	b538      	push	{r3, r4, r5, lr}
 80250ce:	4b29      	ldr	r3, [pc, #164]	@ (8025174 <__swsetup_r+0xa8>)
 80250d0:	4605      	mov	r5, r0
 80250d2:	6818      	ldr	r0, [r3, #0]
 80250d4:	460c      	mov	r4, r1
 80250d6:	b118      	cbz	r0, 80250e0 <__swsetup_r+0x14>
 80250d8:	6a03      	ldr	r3, [r0, #32]
 80250da:	b90b      	cbnz	r3, 80250e0 <__swsetup_r+0x14>
 80250dc:	f7fe facc 	bl	8023678 <__sinit>
 80250e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80250e4:	0719      	lsls	r1, r3, #28
 80250e6:	d422      	bmi.n	802512e <__swsetup_r+0x62>
 80250e8:	06da      	lsls	r2, r3, #27
 80250ea:	d407      	bmi.n	80250fc <__swsetup_r+0x30>
 80250ec:	2209      	movs	r2, #9
 80250ee:	602a      	str	r2, [r5, #0]
 80250f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80250f4:	81a3      	strh	r3, [r4, #12]
 80250f6:	f04f 30ff 	mov.w	r0, #4294967295
 80250fa:	e033      	b.n	8025164 <__swsetup_r+0x98>
 80250fc:	0758      	lsls	r0, r3, #29
 80250fe:	d512      	bpl.n	8025126 <__swsetup_r+0x5a>
 8025100:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8025102:	b141      	cbz	r1, 8025116 <__swsetup_r+0x4a>
 8025104:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8025108:	4299      	cmp	r1, r3
 802510a:	d002      	beq.n	8025112 <__swsetup_r+0x46>
 802510c:	4628      	mov	r0, r5
 802510e:	f7ff f9e5 	bl	80244dc <_free_r>
 8025112:	2300      	movs	r3, #0
 8025114:	6363      	str	r3, [r4, #52]	@ 0x34
 8025116:	89a3      	ldrh	r3, [r4, #12]
 8025118:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802511c:	81a3      	strh	r3, [r4, #12]
 802511e:	2300      	movs	r3, #0
 8025120:	6063      	str	r3, [r4, #4]
 8025122:	6923      	ldr	r3, [r4, #16]
 8025124:	6023      	str	r3, [r4, #0]
 8025126:	89a3      	ldrh	r3, [r4, #12]
 8025128:	f043 0308 	orr.w	r3, r3, #8
 802512c:	81a3      	strh	r3, [r4, #12]
 802512e:	6923      	ldr	r3, [r4, #16]
 8025130:	b94b      	cbnz	r3, 8025146 <__swsetup_r+0x7a>
 8025132:	89a3      	ldrh	r3, [r4, #12]
 8025134:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8025138:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802513c:	d003      	beq.n	8025146 <__swsetup_r+0x7a>
 802513e:	4621      	mov	r1, r4
 8025140:	4628      	mov	r0, r5
 8025142:	f000 f872 	bl	802522a <__smakebuf_r>
 8025146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802514a:	f013 0201 	ands.w	r2, r3, #1
 802514e:	d00a      	beq.n	8025166 <__swsetup_r+0x9a>
 8025150:	2200      	movs	r2, #0
 8025152:	60a2      	str	r2, [r4, #8]
 8025154:	6962      	ldr	r2, [r4, #20]
 8025156:	4252      	negs	r2, r2
 8025158:	61a2      	str	r2, [r4, #24]
 802515a:	6922      	ldr	r2, [r4, #16]
 802515c:	b942      	cbnz	r2, 8025170 <__swsetup_r+0xa4>
 802515e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8025162:	d1c5      	bne.n	80250f0 <__swsetup_r+0x24>
 8025164:	bd38      	pop	{r3, r4, r5, pc}
 8025166:	0799      	lsls	r1, r3, #30
 8025168:	bf58      	it	pl
 802516a:	6962      	ldrpl	r2, [r4, #20]
 802516c:	60a2      	str	r2, [r4, #8]
 802516e:	e7f4      	b.n	802515a <__swsetup_r+0x8e>
 8025170:	2000      	movs	r0, #0
 8025172:	e7f7      	b.n	8025164 <__swsetup_r+0x98>
 8025174:	2400007c 	.word	0x2400007c

08025178 <_calloc_r>:
 8025178:	b570      	push	{r4, r5, r6, lr}
 802517a:	fba1 5402 	umull	r5, r4, r1, r2
 802517e:	b93c      	cbnz	r4, 8025190 <_calloc_r+0x18>
 8025180:	4629      	mov	r1, r5
 8025182:	f7fd fd29 	bl	8022bd8 <_malloc_r>
 8025186:	4606      	mov	r6, r0
 8025188:	b928      	cbnz	r0, 8025196 <_calloc_r+0x1e>
 802518a:	2600      	movs	r6, #0
 802518c:	4630      	mov	r0, r6
 802518e:	bd70      	pop	{r4, r5, r6, pc}
 8025190:	220c      	movs	r2, #12
 8025192:	6002      	str	r2, [r0, #0]
 8025194:	e7f9      	b.n	802518a <_calloc_r+0x12>
 8025196:	462a      	mov	r2, r5
 8025198:	4621      	mov	r1, r4
 802519a:	f7fe fb22 	bl	80237e2 <memset>
 802519e:	e7f5      	b.n	802518c <_calloc_r+0x14>

080251a0 <__ascii_mbtowc>:
 80251a0:	b082      	sub	sp, #8
 80251a2:	b901      	cbnz	r1, 80251a6 <__ascii_mbtowc+0x6>
 80251a4:	a901      	add	r1, sp, #4
 80251a6:	b142      	cbz	r2, 80251ba <__ascii_mbtowc+0x1a>
 80251a8:	b14b      	cbz	r3, 80251be <__ascii_mbtowc+0x1e>
 80251aa:	7813      	ldrb	r3, [r2, #0]
 80251ac:	600b      	str	r3, [r1, #0]
 80251ae:	7812      	ldrb	r2, [r2, #0]
 80251b0:	1e10      	subs	r0, r2, #0
 80251b2:	bf18      	it	ne
 80251b4:	2001      	movne	r0, #1
 80251b6:	b002      	add	sp, #8
 80251b8:	4770      	bx	lr
 80251ba:	4610      	mov	r0, r2
 80251bc:	e7fb      	b.n	80251b6 <__ascii_mbtowc+0x16>
 80251be:	f06f 0001 	mvn.w	r0, #1
 80251c2:	e7f8      	b.n	80251b6 <__ascii_mbtowc+0x16>

080251c4 <__ascii_wctomb>:
 80251c4:	4603      	mov	r3, r0
 80251c6:	4608      	mov	r0, r1
 80251c8:	b141      	cbz	r1, 80251dc <__ascii_wctomb+0x18>
 80251ca:	2aff      	cmp	r2, #255	@ 0xff
 80251cc:	d904      	bls.n	80251d8 <__ascii_wctomb+0x14>
 80251ce:	228a      	movs	r2, #138	@ 0x8a
 80251d0:	601a      	str	r2, [r3, #0]
 80251d2:	f04f 30ff 	mov.w	r0, #4294967295
 80251d6:	4770      	bx	lr
 80251d8:	700a      	strb	r2, [r1, #0]
 80251da:	2001      	movs	r0, #1
 80251dc:	4770      	bx	lr

080251de <__swhatbuf_r>:
 80251de:	b570      	push	{r4, r5, r6, lr}
 80251e0:	460c      	mov	r4, r1
 80251e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80251e6:	2900      	cmp	r1, #0
 80251e8:	b096      	sub	sp, #88	@ 0x58
 80251ea:	4615      	mov	r5, r2
 80251ec:	461e      	mov	r6, r3
 80251ee:	da0d      	bge.n	802520c <__swhatbuf_r+0x2e>
 80251f0:	89a3      	ldrh	r3, [r4, #12]
 80251f2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80251f6:	f04f 0100 	mov.w	r1, #0
 80251fa:	bf14      	ite	ne
 80251fc:	2340      	movne	r3, #64	@ 0x40
 80251fe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8025202:	2000      	movs	r0, #0
 8025204:	6031      	str	r1, [r6, #0]
 8025206:	602b      	str	r3, [r5, #0]
 8025208:	b016      	add	sp, #88	@ 0x58
 802520a:	bd70      	pop	{r4, r5, r6, pc}
 802520c:	466a      	mov	r2, sp
 802520e:	f000 f849 	bl	80252a4 <_fstat_r>
 8025212:	2800      	cmp	r0, #0
 8025214:	dbec      	blt.n	80251f0 <__swhatbuf_r+0x12>
 8025216:	9901      	ldr	r1, [sp, #4]
 8025218:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802521c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8025220:	4259      	negs	r1, r3
 8025222:	4159      	adcs	r1, r3
 8025224:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8025228:	e7eb      	b.n	8025202 <__swhatbuf_r+0x24>

0802522a <__smakebuf_r>:
 802522a:	898b      	ldrh	r3, [r1, #12]
 802522c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802522e:	079d      	lsls	r5, r3, #30
 8025230:	4606      	mov	r6, r0
 8025232:	460c      	mov	r4, r1
 8025234:	d507      	bpl.n	8025246 <__smakebuf_r+0x1c>
 8025236:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802523a:	6023      	str	r3, [r4, #0]
 802523c:	6123      	str	r3, [r4, #16]
 802523e:	2301      	movs	r3, #1
 8025240:	6163      	str	r3, [r4, #20]
 8025242:	b003      	add	sp, #12
 8025244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025246:	ab01      	add	r3, sp, #4
 8025248:	466a      	mov	r2, sp
 802524a:	f7ff ffc8 	bl	80251de <__swhatbuf_r>
 802524e:	9f00      	ldr	r7, [sp, #0]
 8025250:	4605      	mov	r5, r0
 8025252:	4639      	mov	r1, r7
 8025254:	4630      	mov	r0, r6
 8025256:	f7fd fcbf 	bl	8022bd8 <_malloc_r>
 802525a:	b948      	cbnz	r0, 8025270 <__smakebuf_r+0x46>
 802525c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025260:	059a      	lsls	r2, r3, #22
 8025262:	d4ee      	bmi.n	8025242 <__smakebuf_r+0x18>
 8025264:	f023 0303 	bic.w	r3, r3, #3
 8025268:	f043 0302 	orr.w	r3, r3, #2
 802526c:	81a3      	strh	r3, [r4, #12]
 802526e:	e7e2      	b.n	8025236 <__smakebuf_r+0xc>
 8025270:	89a3      	ldrh	r3, [r4, #12]
 8025272:	6020      	str	r0, [r4, #0]
 8025274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8025278:	81a3      	strh	r3, [r4, #12]
 802527a:	9b01      	ldr	r3, [sp, #4]
 802527c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8025280:	b15b      	cbz	r3, 802529a <__smakebuf_r+0x70>
 8025282:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025286:	4630      	mov	r0, r6
 8025288:	f000 f81e 	bl	80252c8 <_isatty_r>
 802528c:	b128      	cbz	r0, 802529a <__smakebuf_r+0x70>
 802528e:	89a3      	ldrh	r3, [r4, #12]
 8025290:	f023 0303 	bic.w	r3, r3, #3
 8025294:	f043 0301 	orr.w	r3, r3, #1
 8025298:	81a3      	strh	r3, [r4, #12]
 802529a:	89a3      	ldrh	r3, [r4, #12]
 802529c:	431d      	orrs	r5, r3
 802529e:	81a5      	strh	r5, [r4, #12]
 80252a0:	e7cf      	b.n	8025242 <__smakebuf_r+0x18>
	...

080252a4 <_fstat_r>:
 80252a4:	b538      	push	{r3, r4, r5, lr}
 80252a6:	4d07      	ldr	r5, [pc, #28]	@ (80252c4 <_fstat_r+0x20>)
 80252a8:	2300      	movs	r3, #0
 80252aa:	4604      	mov	r4, r0
 80252ac:	4608      	mov	r0, r1
 80252ae:	4611      	mov	r1, r2
 80252b0:	602b      	str	r3, [r5, #0]
 80252b2:	f7de f8f8 	bl	80034a6 <_fstat>
 80252b6:	1c43      	adds	r3, r0, #1
 80252b8:	d102      	bne.n	80252c0 <_fstat_r+0x1c>
 80252ba:	682b      	ldr	r3, [r5, #0]
 80252bc:	b103      	cbz	r3, 80252c0 <_fstat_r+0x1c>
 80252be:	6023      	str	r3, [r4, #0]
 80252c0:	bd38      	pop	{r3, r4, r5, pc}
 80252c2:	bf00      	nop
 80252c4:	24000b8c 	.word	0x24000b8c

080252c8 <_isatty_r>:
 80252c8:	b538      	push	{r3, r4, r5, lr}
 80252ca:	4d06      	ldr	r5, [pc, #24]	@ (80252e4 <_isatty_r+0x1c>)
 80252cc:	2300      	movs	r3, #0
 80252ce:	4604      	mov	r4, r0
 80252d0:	4608      	mov	r0, r1
 80252d2:	602b      	str	r3, [r5, #0]
 80252d4:	f7de f8f7 	bl	80034c6 <_isatty>
 80252d8:	1c43      	adds	r3, r0, #1
 80252da:	d102      	bne.n	80252e2 <_isatty_r+0x1a>
 80252dc:	682b      	ldr	r3, [r5, #0]
 80252de:	b103      	cbz	r3, 80252e2 <_isatty_r+0x1a>
 80252e0:	6023      	str	r3, [r4, #0]
 80252e2:	bd38      	pop	{r3, r4, r5, pc}
 80252e4:	24000b8c 	.word	0x24000b8c

080252e8 <_init>:
 80252e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80252ea:	bf00      	nop
 80252ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80252ee:	bc08      	pop	{r3}
 80252f0:	469e      	mov	lr, r3
 80252f2:	4770      	bx	lr

080252f4 <_fini>:
 80252f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80252f6:	bf00      	nop
 80252f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80252fa:	bc08      	pop	{r3}
 80252fc:	469e      	mov	lr, r3
 80252fe:	4770      	bx	lr
