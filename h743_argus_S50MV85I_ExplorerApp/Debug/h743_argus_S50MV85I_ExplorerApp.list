
h743_argus_S50MV85I_ExplorerApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002afb0  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000062cc  0802b280  0802b280  0002c280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0803154c  0803154c  0003254c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08031554  08031554  00032554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000008  0803155c  0803155c  0003255c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000234  24000000  08031564  00033000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000035e0  24000234  08031798  00033234  2**2
                  ALLOC
  8 ._user_heap_stack 00007004  24003814  08031798  00033814  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00033234  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002f211  00000000  00000000  00033262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006eb1  00000000  00000000  00062473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002108  00000000  00000000  00069328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001913  00000000  00000000  0006b430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000396bd  00000000  00000000  0006cd43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00033e6e  00000000  00000000  000a6400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00162b58  00000000  00000000  000da26e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      0000008c  00000000  00000000  0023cdc6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009288  00000000  00000000  0023ce54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007d  00000000  00000000  002460dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000234 	.word	0x24000234
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0802b268 	.word	0x0802b268

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000238 	.word	0x24000238
 800030c:	0802b268 	.word	0x0802b268

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <RxCmd_SoftwareInfo>:
/*******************************************************************************
 * Software Information Commands
 ******************************************************************************/

static status_t RxCmd_SoftwareInfo(sci_device_t deviceID, sci_frame_t * frame)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	6039      	str	r1, [r7, #0]
 80006ba:	71fb      	strb	r3, [r7, #7]
    (void)frame; // unused parameter
    return SCI_SendCommand(deviceID, CMD_SOFTWARE_INFO, 0, 0);
 80006bc:	79f8      	ldrb	r0, [r7, #7]
 80006be:	2300      	movs	r3, #0
 80006c0:	2200      	movs	r2, #0
 80006c2:	2105      	movs	r1, #5
 80006c4:	f004 f934 	bl	8004930 <SCI_SendCommand>
 80006c8:	4603      	mov	r3, r0
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <TxCmd_SoftwareInfo>:
static status_t TxCmd_SoftwareInfo(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param,
                                   sci_data_t data)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08c      	sub	sp, #48	@ 0x30
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60b9      	str	r1, [r7, #8]
 80006dc:	607a      	str	r2, [r7, #4]
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	4603      	mov	r3, r0
 80006e2:	73fb      	strb	r3, [r7, #15]
    (void)param;
    (void)data;

    SCI_Frame_Queue32u(frame, EXPLORER_VERSION);
 80006e4:	495e      	ldr	r1, [pc, #376]	@ (8000860 <TxCmd_SoftwareInfo+0x18c>)
 80006e6:	68b8      	ldr	r0, [r7, #8]
 80006e8:	f005 fa7a 	bl	8005be0 <SCI_Frame_Queue32u>
    SCI_Frame_Queue32u(frame, Argus_GetAPIVersion());
 80006ec:	f013 fbd6 	bl	8013e9c <Argus_GetAPIVersion>
 80006f0:	4603      	mov	r3, r0
 80006f2:	4619      	mov	r1, r3
 80006f4:	68b8      	ldr	r0, [r7, #8]
 80006f6:	f005 fa73 	bl	8005be0 <SCI_Frame_Queue32u>

    if (deviceID == 0)
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d143      	bne.n	8000788 <TxCmd_SoftwareInfo+0xb4>
    {
        const uint8_t deviceCount = ExplorerApp_GetInitializedExplorerCount();
 8000700:	f003 fc68 	bl	8003fd4 <ExplorerApp_GetInitializedExplorerCount>
 8000704:	4603      	mov	r3, r0
 8000706:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        SCI_Frame_Queue08u(frame, deviceCount);
 800070a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800070e:	4619      	mov	r1, r3
 8000710:	68b8      	ldr	r0, [r7, #8]
 8000712:	f005 f9f9 	bl	8005b08 <SCI_Frame_Queue08u>
        for (deviceID = EXPLORER_DEVICE_ID_MIN; deviceID <= EXPLORER_DEVICE_ID_MAX; deviceID++)
 8000716:	2301      	movs	r3, #1
 8000718:	73fb      	strb	r3, [r7, #15]
 800071a:	e031      	b.n	8000780 <TxCmd_SoftwareInfo+0xac>
        {

            argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	4618      	mov	r0, r3
 8000720:	f003 fbd8 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 8000724:	61f8      	str	r0, [r7, #28]
            if (argus == NULL) continue;
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d025      	beq.n	8000778 <TxCmd_SoftwareInfo+0xa4>

            SCI_Frame_Queue08u(frame, deviceID);
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	4619      	mov	r1, r3
 8000730:	68b8      	ldr	r0, [r7, #8]
 8000732:	f005 f9e9 	bl	8005b08 <SCI_Frame_Queue08u>
            SCI_Frame_Queue08u(frame, Argus_GetModuleVersion(argus));
 8000736:	69f8      	ldr	r0, [r7, #28]
 8000738:	f013 fbb8 	bl	8013eac <Argus_GetModuleVersion>
 800073c:	4603      	mov	r3, r0
 800073e:	4619      	mov	r1, r3
 8000740:	68b8      	ldr	r0, [r7, #8]
 8000742:	f005 f9e1 	bl	8005b08 <SCI_Frame_Queue08u>
            SCI_Frame_Queue08u(frame, Argus_GetChipVersion(argus));
 8000746:	69f8      	ldr	r0, [r7, #28]
 8000748:	f013 fbd0 	bl	8013eec <Argus_GetChipVersion>
 800074c:	4603      	mov	r3, r0
 800074e:	4619      	mov	r1, r3
 8000750:	68b8      	ldr	r0, [r7, #8]
 8000752:	f005 f9d9 	bl	8005b08 <SCI_Frame_Queue08u>
            SCI_Frame_Queue08u(frame, Argus_GetLaserType(argus));
 8000756:	69f8      	ldr	r0, [r7, #28]
 8000758:	f013 fbe8 	bl	8013f2c <Argus_GetLaserType>
 800075c:	4603      	mov	r3, r0
 800075e:	4619      	mov	r1, r3
 8000760:	68b8      	ldr	r0, [r7, #8]
 8000762:	f005 f9d1 	bl	8005b08 <SCI_Frame_Queue08u>
            SCI_Frame_Queue24u(frame, Argus_GetChipID(argus));
 8000766:	69f8      	ldr	r0, [r7, #28]
 8000768:	f013 fc00 	bl	8013f6c <Argus_GetChipID>
 800076c:	4603      	mov	r3, r0
 800076e:	4619      	mov	r1, r3
 8000770:	68b8      	ldr	r0, [r7, #8]
 8000772:	f005 fa07 	bl	8005b84 <SCI_Frame_Queue24u>
 8000776:	e000      	b.n	800077a <TxCmd_SoftwareInfo+0xa6>
            if (argus == NULL) continue;
 8000778:	bf00      	nop
        for (deviceID = EXPLORER_DEVICE_ID_MIN; deviceID <= EXPLORER_DEVICE_ID_MAX; deviceID++)
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	3301      	adds	r3, #1
 800077e:	73fb      	strb	r3, [r7, #15]
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	2b01      	cmp	r3, #1
 8000784:	d9ca      	bls.n	800071c <TxCmd_SoftwareInfo+0x48>
 8000786:	e041      	b.n	800080c <TxCmd_SoftwareInfo+0x138>
        }
    }
    else
    {
        SCI_Frame_Queue08u(frame, 1);
 8000788:	2101      	movs	r1, #1
 800078a:	68b8      	ldr	r0, [r7, #8]
 800078c:	f005 f9bc 	bl	8005b08 <SCI_Frame_Queue08u>
        SCI_Frame_Queue08u(frame, deviceID);
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	4619      	mov	r1, r3
 8000794:	68b8      	ldr	r0, [r7, #8]
 8000796:	f005 f9b7 	bl	8005b08 <SCI_Frame_Queue08u>
        argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	4618      	mov	r0, r3
 800079e:	f003 fb99 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 80007a2:	6278      	str	r0, [r7, #36]	@ 0x24
        if (argus != NULL)
 80007a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d020      	beq.n	80007ec <TxCmd_SoftwareInfo+0x118>
        {
            SCI_Frame_Queue08u(frame, Argus_GetModuleVersion(argus));
 80007aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80007ac:	f013 fb7e 	bl	8013eac <Argus_GetModuleVersion>
 80007b0:	4603      	mov	r3, r0
 80007b2:	4619      	mov	r1, r3
 80007b4:	68b8      	ldr	r0, [r7, #8]
 80007b6:	f005 f9a7 	bl	8005b08 <SCI_Frame_Queue08u>
            SCI_Frame_Queue08u(frame, Argus_GetChipVersion(argus));
 80007ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80007bc:	f013 fb96 	bl	8013eec <Argus_GetChipVersion>
 80007c0:	4603      	mov	r3, r0
 80007c2:	4619      	mov	r1, r3
 80007c4:	68b8      	ldr	r0, [r7, #8]
 80007c6:	f005 f99f 	bl	8005b08 <SCI_Frame_Queue08u>
            SCI_Frame_Queue08u(frame, Argus_GetLaserType(argus));
 80007ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80007cc:	f013 fbae 	bl	8013f2c <Argus_GetLaserType>
 80007d0:	4603      	mov	r3, r0
 80007d2:	4619      	mov	r1, r3
 80007d4:	68b8      	ldr	r0, [r7, #8]
 80007d6:	f005 f997 	bl	8005b08 <SCI_Frame_Queue08u>
            SCI_Frame_Queue24u(frame, Argus_GetChipID(argus));
 80007da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80007dc:	f013 fbc6 	bl	8013f6c <Argus_GetChipID>
 80007e0:	4603      	mov	r3, r0
 80007e2:	4619      	mov	r1, r3
 80007e4:	68b8      	ldr	r0, [r7, #8]
 80007e6:	f005 f9cd 	bl	8005b84 <SCI_Frame_Queue24u>
 80007ea:	e00f      	b.n	800080c <TxCmd_SoftwareInfo+0x138>
        }
        else
        {
            SCI_Frame_Queue08u(frame, 0);
 80007ec:	2100      	movs	r1, #0
 80007ee:	68b8      	ldr	r0, [r7, #8]
 80007f0:	f005 f98a 	bl	8005b08 <SCI_Frame_Queue08u>
            SCI_Frame_Queue08u(frame, 0);
 80007f4:	2100      	movs	r1, #0
 80007f6:	68b8      	ldr	r0, [r7, #8]
 80007f8:	f005 f986 	bl	8005b08 <SCI_Frame_Queue08u>
            SCI_Frame_Queue08u(frame, 0);
 80007fc:	2100      	movs	r1, #0
 80007fe:	68b8      	ldr	r0, [r7, #8]
 8000800:	f005 f982 	bl	8005b08 <SCI_Frame_Queue08u>
            SCI_Frame_Queue24u(frame, 0);
 8000804:	2100      	movs	r1, #0
 8000806:	68b8      	ldr	r0, [r7, #8]
 8000808:	f005 f9bc 	bl	8005b84 <SCI_Frame_Queue24u>
        }
    }

    char const * name = "AFBR-S50 Explorer App - ";
 800080c:	4b15      	ldr	r3, [pc, #84]	@ (8000864 <TxCmd_SoftwareInfo+0x190>)
 800080e:	61bb      	str	r3, [r7, #24]
    for (char const * c = name; *c != '\0'; c++)
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000814:	e008      	b.n	8000828 <TxCmd_SoftwareInfo+0x154>
    {
        SCI_Frame_PutChar(*c, frame);
 8000816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	68b9      	ldr	r1, [r7, #8]
 800081c:	4618      	mov	r0, r3
 800081e:	f005 fbac 	bl	8005f7a <SCI_Frame_PutChar>
    for (char const * c = name; *c != '\0'; c++)
 8000822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000824:	3301      	adds	r3, #1
 8000826:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d1f2      	bne.n	8000816 <TxCmd_SoftwareInfo+0x142>
    }
    char const * build = Argus_GetBuildNumber();
 8000830:	f013 fb38 	bl	8013ea4 <Argus_GetBuildNumber>
 8000834:	6178      	str	r0, [r7, #20]
    for (char const * c = build; *c != '\0'; c++)
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	62bb      	str	r3, [r7, #40]	@ 0x28
 800083a:	e008      	b.n	800084e <TxCmd_SoftwareInfo+0x17a>
    {
        SCI_Frame_PutChar(*c, frame);
 800083c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	68b9      	ldr	r1, [r7, #8]
 8000842:	4618      	mov	r0, r3
 8000844:	f005 fb99 	bl	8005f7a <SCI_Frame_PutChar>
    for (char const * c = build; *c != '\0'; c++)
 8000848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800084a:	3301      	adds	r3, #1
 800084c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800084e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d1f2      	bne.n	800083c <TxCmd_SoftwareInfo+0x168>
    }

    return STATUS_OK;
 8000856:	2300      	movs	r3, #0
}
 8000858:	4618      	mov	r0, r3
 800085a:	3730      	adds	r7, #48	@ 0x30
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	01050006 	.word	0x01050006
 8000864:	0802b280 	.word	0x0802b280

08000868 <RxCmd_SoftwareVersion>:

static status_t RxCmd_SoftwareVersion(sci_device_t deviceID, sci_frame_t * frame)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	6039      	str	r1, [r7, #0]
 8000872:	71fb      	strb	r3, [r7, #7]
    (void)frame; // unused parameter
    return SCI_SendCommand(deviceID, CMD_SOFTWARE_VERSION, 0, 0);
 8000874:	79f8      	ldrb	r0, [r7, #7]
 8000876:	2300      	movs	r3, #0
 8000878:	2200      	movs	r2, #0
 800087a:	210c      	movs	r1, #12
 800087c:	f004 f858 	bl	8004930 <SCI_SendCommand>
 8000880:	4603      	mov	r3, r0
}
 8000882:	4618      	mov	r0, r3
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <TxCmd_SoftwareVersion>:
static status_t TxCmd_SoftwareVersion(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b086      	sub	sp, #24
 800088e:	af00      	add	r7, sp, #0
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	4603      	mov	r3, r0
 8000898:	73fb      	strb	r3, [r7, #15]
    (void)param;
    (void)data;
    (void)deviceID;
    SCI_Frame_Queue32u(frame, Argus_GetAPIVersion());
 800089a:	f013 faff 	bl	8013e9c <Argus_GetAPIVersion>
 800089e:	4603      	mov	r3, r0
 80008a0:	4619      	mov	r1, r3
 80008a2:	68b8      	ldr	r0, [r7, #8]
 80008a4:	f005 f99c 	bl	8005be0 <SCI_Frame_Queue32u>

    char const * build = Argus_GetBuildNumber();
 80008a8:	f013 fafc 	bl	8013ea4 <Argus_GetBuildNumber>
 80008ac:	6138      	str	r0, [r7, #16]
    for(char const * c = build; *c != '\0'; c++)
 80008ae:	693b      	ldr	r3, [r7, #16]
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	e008      	b.n	80008c6 <TxCmd_SoftwareVersion+0x3c>
    {
        SCI_Frame_PutChar(*c, frame);
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	68b9      	ldr	r1, [r7, #8]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f005 fb5d 	bl	8005f7a <SCI_Frame_PutChar>
    for(char const * c = build; *c != '\0'; c++)
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	3301      	adds	r3, #1
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d1f2      	bne.n	80008b4 <TxCmd_SoftwareVersion+0x2a>
    }
    return STATUS_OK;
 80008ce:	2300      	movs	r3, #0
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3718      	adds	r7, #24
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <RxCmd_ModuleType>:

static status_t RxCmd_ModuleType(sci_device_t deviceID, sci_frame_t * frame)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	6039      	str	r1, [r7, #0]
 80008e2:	71fb      	strb	r3, [r7, #7]
    (void)frame; // unused parameter
    return SCI_SendCommand(deviceID, CMD_MODULE_TYPE, 0, 0);
 80008e4:	79f8      	ldrb	r0, [r7, #7]
 80008e6:	2300      	movs	r3, #0
 80008e8:	2200      	movs	r2, #0
 80008ea:	210e      	movs	r1, #14
 80008ec:	f004 f820 	bl	8004930 <SCI_SendCommand>
 80008f0:	4603      	mov	r3, r0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <TxCmd_ModuleType>:
static status_t TxCmd_ModuleType(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b086      	sub	sp, #24
 80008fe:	af00      	add	r7, sp, #0
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	4603      	mov	r3, r0
 8000908:	73fb      	strb	r3, [r7, #15]
    (void)param;
    (void)data;
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 800090a:	7bfb      	ldrb	r3, [r7, #15]
 800090c:	4618      	mov	r0, r3
 800090e:	f003 fae1 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 8000912:	6178      	str	r0, [r7, #20]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d102      	bne.n	8000920 <TxCmd_ModuleType+0x26>
 800091a:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 800091e:	e018      	b.n	8000952 <TxCmd_ModuleType+0x58>
    SCI_Frame_Queue08u(frame, Argus_GetModuleVersion(argus));
 8000920:	6978      	ldr	r0, [r7, #20]
 8000922:	f013 fac3 	bl	8013eac <Argus_GetModuleVersion>
 8000926:	4603      	mov	r3, r0
 8000928:	4619      	mov	r1, r3
 800092a:	68b8      	ldr	r0, [r7, #8]
 800092c:	f005 f8ec 	bl	8005b08 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, Argus_GetChipVersion(argus));
 8000930:	6978      	ldr	r0, [r7, #20]
 8000932:	f013 fadb 	bl	8013eec <Argus_GetChipVersion>
 8000936:	4603      	mov	r3, r0
 8000938:	4619      	mov	r1, r3
 800093a:	68b8      	ldr	r0, [r7, #8]
 800093c:	f005 f8e4 	bl	8005b08 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, Argus_GetLaserType(argus));
 8000940:	6978      	ldr	r0, [r7, #20]
 8000942:	f013 faf3 	bl	8013f2c <Argus_GetLaserType>
 8000946:	4603      	mov	r3, r0
 8000948:	4619      	mov	r1, r3
 800094a:	68b8      	ldr	r0, [r7, #8]
 800094c:	f005 f8dc 	bl	8005b08 <SCI_Frame_Queue08u>
    return STATUS_OK;
 8000950:	2300      	movs	r3, #0
}
 8000952:	4618      	mov	r0, r3
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <RxCmd_ModuleUID>:
static status_t RxCmd_ModuleUID(sci_device_t deviceID, sci_frame_t * frame)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b082      	sub	sp, #8
 800095e:	af00      	add	r7, sp, #0
 8000960:	4603      	mov	r3, r0
 8000962:	6039      	str	r1, [r7, #0]
 8000964:	71fb      	strb	r3, [r7, #7]
    (void)frame; // unused parameter
    return SCI_SendCommand(deviceID, CMD_MODULE_UID, 0, 0);
 8000966:	79f8      	ldrb	r0, [r7, #7]
 8000968:	2300      	movs	r3, #0
 800096a:	2200      	movs	r2, #0
 800096c:	210f      	movs	r1, #15
 800096e:	f003 ffdf 	bl	8004930 <SCI_SendCommand>
 8000972:	4603      	mov	r3, r0
}
 8000974:	4618      	mov	r0, r3
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <TxCmd_ModuleUID>:
static status_t TxCmd_ModuleUID(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
 8000982:	60b9      	str	r1, [r7, #8]
 8000984:	607a      	str	r2, [r7, #4]
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	4603      	mov	r3, r0
 800098a:	73fb      	strb	r3, [r7, #15]
    (void)param;
    (void)data;
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	4618      	mov	r0, r3
 8000990:	f003 faa0 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 8000994:	6178      	str	r0, [r7, #20]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d102      	bne.n	80009a2 <TxCmd_ModuleUID+0x26>
 800099c:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 80009a0:	e008      	b.n	80009b4 <TxCmd_ModuleUID+0x38>
    SCI_Frame_Queue24u(frame, Argus_GetChipID(argus));
 80009a2:	6978      	ldr	r0, [r7, #20]
 80009a4:	f013 fae2 	bl	8013f6c <Argus_GetChipID>
 80009a8:	4603      	mov	r3, r0
 80009aa:	4619      	mov	r1, r3
 80009ac:	68b8      	ldr	r0, [r7, #8]
 80009ae:	f005 f8e9 	bl	8005b84 <SCI_Frame_Queue24u>
    return STATUS_OK;
 80009b2:	2300      	movs	r3, #0
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3718      	adds	r7, #24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <RxCmd_MeasurementStop>:

/*******************************************************************************
 * Device Control Commands
 ******************************************************************************/
static status_t RxCmd_MeasurementStop(sci_device_t deviceID, sci_frame_t * frame)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	6039      	str	r1, [r7, #0]
 80009c6:	71fb      	strb	r3, [r7, #7]
    (void)frame; // unused parameter
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f003 fa82 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 80009d0:	60f8      	str	r0, [r7, #12]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d102      	bne.n	80009de <RxCmd_MeasurementStop+0x22>
 80009d8:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 80009dc:	e003      	b.n	80009e6 <RxCmd_MeasurementStop+0x2a>
    return ExplorerApp_StopTimerMeasurement(argus);
 80009de:	68f8      	ldr	r0, [r7, #12]
 80009e0:	f003 fd26 	bl	8004430 <ExplorerApp_StopTimerMeasurement>
 80009e4:	4603      	mov	r3, r0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <RxCmd_MeasurementSingle>:
static status_t RxCmd_MeasurementSingle(sci_device_t deviceID, sci_frame_t * frame)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b084      	sub	sp, #16
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	4603      	mov	r3, r0
 80009f6:	6039      	str	r1, [r7, #0]
 80009f8:	71fb      	strb	r3, [r7, #7]
    (void)frame; // unused parameter
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f003 fa69 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 8000a02:	60f8      	str	r0, [r7, #12]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d102      	bne.n	8000a10 <RxCmd_MeasurementSingle+0x22>
 8000a0a:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8000a0e:	e003      	b.n	8000a18 <RxCmd_MeasurementSingle+0x2a>
    return ExplorerApp_SingleMeasurement(argus);
 8000a10:	68f8      	ldr	r0, [r7, #12]
 8000a12:	f003 fd29 	bl	8004468 <ExplorerApp_SingleMeasurement>
 8000a16:	4603      	mov	r3, r0
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <RxCmd_MeasurementAuto>:
static status_t RxCmd_MeasurementAuto(sci_device_t deviceID, sci_frame_t * frame)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	6039      	str	r1, [r7, #0]
 8000a2a:	71fb      	strb	r3, [r7, #7]
    (void)frame; // unused parameter
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f003 fa50 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 8000a34:	60f8      	str	r0, [r7, #12]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d102      	bne.n	8000a42 <RxCmd_MeasurementAuto+0x22>
 8000a3c:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8000a40:	e003      	b.n	8000a4a <RxCmd_MeasurementAuto+0x2a>
    return ExplorerApp_StartTimerMeasurement(argus);
 8000a42:	68f8      	ldr	r0, [r7, #12]
 8000a44:	f003 fcd2 	bl	80043ec <ExplorerApp_StartTimerMeasurement>
 8000a48:	4603      	mov	r3, r0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <RxCmd_MeasurementCalibration>:
static status_t RxCmd_MeasurementCalibration(sci_device_t deviceID, sci_frame_t * frame)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b086      	sub	sp, #24
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	4603      	mov	r3, r0
 8000a5a:	6039      	str	r1, [r7, #0]
 8000a5c:	71fb      	strb	r3, [r7, #7]
    explorer_cal_sequence_t seq = (explorer_cal_sequence_t) SCI_Frame_Dequeue08u(frame);
 8000a5e:	6838      	ldr	r0, [r7, #0]
 8000a60:	f005 fa40 	bl	8005ee4 <SCI_Frame_Dequeue08u>
 8000a64:	4603      	mov	r3, r0
 8000a66:	74fb      	strb	r3, [r7, #19]

    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f003 fa32 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 8000a70:	60f8      	str	r0, [r7, #12]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d102      	bne.n	8000a7e <RxCmd_MeasurementCalibration+0x2c>
 8000a78:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8000a7c:	e01e      	b.n	8000abc <RxCmd_MeasurementCalibration+0x6a>

    switch (seq)
 8000a7e:	7cfb      	ldrb	r3, [r7, #19]
 8000a80:	2b02      	cmp	r3, #2
 8000a82:	d002      	beq.n	8000a8a <RxCmd_MeasurementCalibration+0x38>
 8000a84:	2b05      	cmp	r3, #5
 8000a86:	d005      	beq.n	8000a94 <RxCmd_MeasurementCalibration+0x42>
 8000a88:	e016      	b.n	8000ab8 <RxCmd_MeasurementCalibration+0x66>
    {
        case CALIBRATION_SEQUENCE_XTALK:
            return ExplorerApp_ExecuteXtalkCalibrationSequence(argus);
 8000a8a:	68f8      	ldr	r0, [r7, #12]
 8000a8c:	f002 ff2e 	bl	80038ec <ExplorerApp_ExecuteXtalkCalibrationSequence>
 8000a90:	4603      	mov	r3, r0
 8000a92:	e013      	b.n	8000abc <RxCmd_MeasurementCalibration+0x6a>

        case CALIBRATION_SEQUENCE_OFFSETS:
        {
            q9_22_t target = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
            if (SCI_Frame_BytesToRead(frame) > 1)
 8000a98:	6838      	ldr	r0, [r7, #0]
 8000a9a:	f004 ff73 	bl	8005984 <SCI_Frame_BytesToRead>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d903      	bls.n	8000aac <RxCmd_MeasurementCalibration+0x5a>
                target = SCI_Frame_Dequeue32s(frame);
 8000aa4:	6838      	ldr	r0, [r7, #0]
 8000aa6:	f005 f9f6 	bl	8005e96 <SCI_Frame_Dequeue32s>
 8000aaa:	6178      	str	r0, [r7, #20]
            return ExplorerApp_ExecuteOffsetsCalibrationSequence(argus, target);
 8000aac:	6979      	ldr	r1, [r7, #20]
 8000aae:	68f8      	ldr	r0, [r7, #12]
 8000ab0:	f002 ff50 	bl	8003954 <ExplorerApp_ExecuteOffsetsCalibrationSequence>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	e001      	b.n	8000abc <RxCmd_MeasurementCalibration+0x6a>
        }
        default:
            return ERROR_SCI_INVALID_CMD_PARAMETER;
 8000ab8:	f06f 03d5 	mvn.w	r3, #213	@ 0xd5
    }
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3718      	adds	r7, #24
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <RxCmd_DeviceReinit>:
static status_t RxCmd_DeviceReinit(sci_device_t deviceID, sci_frame_t * frame)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	6039      	str	r1, [r7, #0]
 8000ace:	71fb      	strb	r3, [r7, #7]
    explorer_t * explorer = ExplorerApp_GetExplorerPtr(deviceID);
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f003 fa22 	bl	8003f1c <ExplorerApp_GetExplorerPtr>
 8000ad8:	60b8      	str	r0, [r7, #8]
    if (explorer == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d102      	bne.n	8000ae6 <RxCmd_DeviceReinit+0x22>
 8000ae0:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8000ae4:	e012      	b.n	8000b0c <RxCmd_DeviceReinit+0x48>

    argus_mode_t mode = 0; // 0 uses current mode
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	73fb      	strb	r3, [r7, #15]
    if (SCI_Frame_BytesToRead(frame) > 1)
 8000aea:	6838      	ldr	r0, [r7, #0]
 8000aec:	f004 ff4a 	bl	8005984 <SCI_Frame_BytesToRead>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d904      	bls.n	8000b00 <RxCmd_DeviceReinit+0x3c>
        mode = SCI_Frame_Dequeue08s(frame);
 8000af6:	6838      	ldr	r0, [r7, #0]
 8000af8:	f005 f9a8 	bl	8005e4c <SCI_Frame_Dequeue08s>
 8000afc:	4603      	mov	r3, r0
 8000afe:	73fb      	strb	r3, [r7, #15]

    return ExplorerApp_DeviceReinit(explorer, mode);
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
 8000b02:	4619      	mov	r1, r3
 8000b04:	68b8      	ldr	r0, [r7, #8]
 8000b06:	f003 fb85 	bl	8004214 <ExplorerApp_DeviceReinit>
 8000b0a:	4603      	mov	r3, r0
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <RxCmd_DeviceAbort>:
static status_t RxCmd_DeviceAbort(sci_device_t deviceID, sci_frame_t * frame)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	6039      	str	r1, [r7, #0]
 8000b1e:	71fb      	strb	r3, [r7, #7]
    (void)frame; // unused parameter
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f003 f9d6 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 8000b28:	60f8      	str	r0, [r7, #12]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d102      	bne.n	8000b36 <RxCmd_DeviceAbort+0x22>
 8000b30:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8000b34:	e003      	b.n	8000b3e <RxCmd_DeviceAbort+0x2a>
    return ExplorerApp_DeviceAbort(argus);
 8000b36:	68f8      	ldr	r0, [r7, #12]
 8000b38:	f003 fcba 	bl	80044b0 <ExplorerApp_DeviceAbort>
 8000b3c:	4603      	mov	r3, r0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <ExplorerAPI_InitGeneral>:

/*******************************************************************************
 * Init Code
 ******************************************************************************/
status_t ExplorerAPI_InitGeneral()
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
    status_t status;

    status = SCI_SetRxTxCommand(CMD_SOFTWARE_INFO, RxCmd_SoftwareInfo, (sci_tx_cmd_fct_t)TxCmd_SoftwareInfo);
 8000b4e:	4a36      	ldr	r2, [pc, #216]	@ (8000c28 <ExplorerAPI_InitGeneral+0xe0>)
 8000b50:	4936      	ldr	r1, [pc, #216]	@ (8000c2c <ExplorerAPI_InitGeneral+0xe4>)
 8000b52:	2005      	movs	r0, #5
 8000b54:	f003 fd6e 	bl	8004634 <SCI_SetRxTxCommand>
 8000b58:	6078      	str	r0, [r7, #4]
    if(status < STATUS_OK) return status;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	da01      	bge.n	8000b64 <ExplorerAPI_InitGeneral+0x1c>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	e05d      	b.n	8000c20 <ExplorerAPI_InitGeneral+0xd8>
    status = SCI_SetRxTxCommand(CMD_SOFTWARE_VERSION, RxCmd_SoftwareVersion, (sci_tx_cmd_fct_t)TxCmd_SoftwareVersion);
 8000b64:	4a32      	ldr	r2, [pc, #200]	@ (8000c30 <ExplorerAPI_InitGeneral+0xe8>)
 8000b66:	4933      	ldr	r1, [pc, #204]	@ (8000c34 <ExplorerAPI_InitGeneral+0xec>)
 8000b68:	200c      	movs	r0, #12
 8000b6a:	f003 fd63 	bl	8004634 <SCI_SetRxTxCommand>
 8000b6e:	6078      	str	r0, [r7, #4]
    if(status < STATUS_OK) return status;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	da01      	bge.n	8000b7a <ExplorerAPI_InitGeneral+0x32>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	e052      	b.n	8000c20 <ExplorerAPI_InitGeneral+0xd8>
    status = SCI_SetRxTxCommand(CMD_MODULE_TYPE, RxCmd_ModuleType, (sci_tx_cmd_fct_t)TxCmd_ModuleType);
 8000b7a:	4a2f      	ldr	r2, [pc, #188]	@ (8000c38 <ExplorerAPI_InitGeneral+0xf0>)
 8000b7c:	492f      	ldr	r1, [pc, #188]	@ (8000c3c <ExplorerAPI_InitGeneral+0xf4>)
 8000b7e:	200e      	movs	r0, #14
 8000b80:	f003 fd58 	bl	8004634 <SCI_SetRxTxCommand>
 8000b84:	6078      	str	r0, [r7, #4]
    if(status < STATUS_OK) return status;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	da01      	bge.n	8000b90 <ExplorerAPI_InitGeneral+0x48>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	e047      	b.n	8000c20 <ExplorerAPI_InitGeneral+0xd8>
    status = SCI_SetRxTxCommand(CMD_MODULE_UID, RxCmd_ModuleUID, (sci_tx_cmd_fct_t)TxCmd_ModuleUID);
 8000b90:	4a2b      	ldr	r2, [pc, #172]	@ (8000c40 <ExplorerAPI_InitGeneral+0xf8>)
 8000b92:	492c      	ldr	r1, [pc, #176]	@ (8000c44 <ExplorerAPI_InitGeneral+0xfc>)
 8000b94:	200f      	movs	r0, #15
 8000b96:	f003 fd4d 	bl	8004634 <SCI_SetRxTxCommand>
 8000b9a:	6078      	str	r0, [r7, #4]
    if(status < STATUS_OK) return status;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	da01      	bge.n	8000ba6 <ExplorerAPI_InitGeneral+0x5e>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	e03c      	b.n	8000c20 <ExplorerAPI_InitGeneral+0xd8>

    status = SCI_SetRxCommand(CMD_MEASUREMENT_STOP, RxCmd_MeasurementStop);
 8000ba6:	4928      	ldr	r1, [pc, #160]	@ (8000c48 <ExplorerAPI_InitGeneral+0x100>)
 8000ba8:	2012      	movs	r0, #18
 8000baa:	f003 fd0f 	bl	80045cc <SCI_SetRxCommand>
 8000bae:	6078      	str	r0, [r7, #4]
    if(status < STATUS_OK) return status;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	da01      	bge.n	8000bba <ExplorerAPI_InitGeneral+0x72>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	e032      	b.n	8000c20 <ExplorerAPI_InitGeneral+0xd8>
    status = SCI_SetRxCommand(CMD_MEASUREMENT_SINGLE_SHOT, RxCmd_MeasurementSingle);
 8000bba:	4924      	ldr	r1, [pc, #144]	@ (8000c4c <ExplorerAPI_InitGeneral+0x104>)
 8000bbc:	2010      	movs	r0, #16
 8000bbe:	f003 fd05 	bl	80045cc <SCI_SetRxCommand>
 8000bc2:	6078      	str	r0, [r7, #4]
    if(status < STATUS_OK) return status;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	da01      	bge.n	8000bce <ExplorerAPI_InitGeneral+0x86>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	e028      	b.n	8000c20 <ExplorerAPI_InitGeneral+0xd8>
    status = SCI_SetRxCommand(CMD_MEASUREMENT_START, RxCmd_MeasurementAuto);
 8000bce:	4920      	ldr	r1, [pc, #128]	@ (8000c50 <ExplorerAPI_InitGeneral+0x108>)
 8000bd0:	2011      	movs	r0, #17
 8000bd2:	f003 fcfb 	bl	80045cc <SCI_SetRxCommand>
 8000bd6:	6078      	str	r0, [r7, #4]
    if(status < STATUS_OK) return status;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	da01      	bge.n	8000be2 <ExplorerAPI_InitGeneral+0x9a>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	e01e      	b.n	8000c20 <ExplorerAPI_InitGeneral+0xd8>
    status = SCI_SetRxCommand(CMD_MEASUREMENT_CALIBRATION, RxCmd_MeasurementCalibration);
 8000be2:	491c      	ldr	r1, [pc, #112]	@ (8000c54 <ExplorerAPI_InitGeneral+0x10c>)
 8000be4:	2018      	movs	r0, #24
 8000be6:	f003 fcf1 	bl	80045cc <SCI_SetRxCommand>
 8000bea:	6078      	str	r0, [r7, #4]
    if(status < STATUS_OK) return status;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	da01      	bge.n	8000bf6 <ExplorerAPI_InitGeneral+0xae>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	e014      	b.n	8000c20 <ExplorerAPI_InitGeneral+0xd8>
    status = SCI_SetRxCommand(CMD_DEVICE_REINIT, RxCmd_DeviceReinit);
 8000bf6:	4918      	ldr	r1, [pc, #96]	@ (8000c58 <ExplorerAPI_InitGeneral+0x110>)
 8000bf8:	2015      	movs	r0, #21
 8000bfa:	f003 fce7 	bl	80045cc <SCI_SetRxCommand>
 8000bfe:	6078      	str	r0, [r7, #4]
    if(status < STATUS_OK) return status;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	da01      	bge.n	8000c0a <ExplorerAPI_InitGeneral+0xc2>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	e00a      	b.n	8000c20 <ExplorerAPI_InitGeneral+0xd8>
    status = SCI_SetRxCommand(CMD_DEVICE_ABORT, RxCmd_DeviceAbort);
 8000c0a:	4914      	ldr	r1, [pc, #80]	@ (8000c5c <ExplorerAPI_InitGeneral+0x114>)
 8000c0c:	2013      	movs	r0, #19
 8000c0e:	f003 fcdd 	bl	80045cc <SCI_SetRxCommand>
 8000c12:	6078      	str	r0, [r7, #4]
    if(status < STATUS_OK) return status;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	da01      	bge.n	8000c1e <ExplorerAPI_InitGeneral+0xd6>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	e000      	b.n	8000c20 <ExplorerAPI_InitGeneral+0xd8>

    return status;
 8000c1e:	687b      	ldr	r3, [r7, #4]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	080006d5 	.word	0x080006d5
 8000c2c:	080006b1 	.word	0x080006b1
 8000c30:	0800088b 	.word	0x0800088b
 8000c34:	08000869 	.word	0x08000869
 8000c38:	080008fb 	.word	0x080008fb
 8000c3c:	080008d9 	.word	0x080008d9
 8000c40:	0800097d 	.word	0x0800097d
 8000c44:	0800095b 	.word	0x0800095b
 8000c48:	080009bd 	.word	0x080009bd
 8000c4c:	080009ef 	.word	0x080009ef
 8000c50:	08000a21 	.word	0x08000a21
 8000c54:	08000a53 	.word	0x08000a53
 8000c58:	08000ac5 	.word	0x08000ac5
 8000c5c:	08000b15 	.word	0x08000b15

08000c60 <Serialize_Cal_P2PXtalk>:
/*******************************************************************************
 * Parsing Functions
 ******************************************************************************/

static void Serialize_Cal_P2PXtalk(sci_frame_t * frame, argus_cal_p2pxtalk_t const * cal)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
    /* Electrical Pixel-To-Pixel Crosstalk */
    const argus_cal_electrical_p2pxtalk_t * ecal = &cal->Electrical;
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	60fb      	str	r3, [r7, #12]
    SCI_Frame_Queue08u(frame, ecal->Enabled);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	4619      	mov	r1, r3
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f004 ff47 	bl	8005b08 <SCI_Frame_Queue08u>
    SCI_Frame_Queue16s(frame, ecal->KcFactorS);
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c80:	4619      	mov	r1, r3
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f004 fff8 	bl	8005c78 <SCI_Frame_Queue16s>
    SCI_Frame_Queue16s(frame, ecal->KcFactorC);
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f004 fff1 	bl	8005c78 <SCI_Frame_Queue16s>
    SCI_Frame_Queue16s(frame, ecal->KcFactorSRefPx);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f004 ffea 	bl	8005c78 <SCI_Frame_Queue16s>
    SCI_Frame_Queue16s(frame, ecal->KcFactorCRefPx);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000caa:	4619      	mov	r1, r3
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f004 ffe3 	bl	8005c78 <SCI_Frame_Queue16s>
    SCI_Frame_Queue08u(frame, ecal->RelativeThreshold);
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	785b      	ldrb	r3, [r3, #1]
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f004 ff25 	bl	8005b08 <SCI_Frame_Queue08u>
    SCI_Frame_Queue16u(frame, ecal->AbsoluteTreshold);
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	885b      	ldrh	r3, [r3, #2]
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f004 ff44 	bl	8005b52 <SCI_Frame_Queue16u>

    /* Optical Pixel-To-Pixel Crosstalk */
    const argus_cal_optical_p2pxtalk_t * ocal = &cal->Optical;
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	330c      	adds	r3, #12
 8000cce:	60bb      	str	r3, [r7, #8]
    SCI_Frame_Queue08u(frame, ocal->Enabled);
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f004 ff16 	bl	8005b08 <SCI_Frame_Queue08u>
    SCI_Frame_Queue16s(frame, ocal->CouplingCoeffS);
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f004 ffc7 	bl	8005c78 <SCI_Frame_Queue16s>
    SCI_Frame_Queue16s(frame, ocal->CouplingCoeffC);
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f004 ffc0 	bl	8005c78 <SCI_Frame_Queue16s>
}
 8000cf8:	bf00      	nop
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <Deserialize_Cal_P2PXtalk>:
static void Deserialize_Cal_P2PXtalk(sci_frame_t * frame, argus_cal_p2pxtalk_t * cal)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
    argus_cal_electrical_p2pxtalk_t * ecal = &cal->Electrical;
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	60fb      	str	r3, [r7, #12]

    /* Electrical Pixel-To-Pixel Crosstalk */
    ecal->Enabled = SCI_Frame_Dequeue08u(frame);
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f005 f8e8 	bl	8005ee4 <SCI_Frame_Dequeue08u>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	bf14      	ite	ne
 8000d1a:	2301      	movne	r3, #1
 8000d1c:	2300      	moveq	r3, #0
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	701a      	strb	r2, [r3, #0]
    ecal->KcFactorS = SCI_Frame_Dequeue16s(frame);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f005 f89e 	bl	8005e66 <SCI_Frame_Dequeue16s>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	809a      	strh	r2, [r3, #4]
    ecal->KcFactorC = SCI_Frame_Dequeue16s(frame);
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f005 f897 	bl	8005e66 <SCI_Frame_Dequeue16s>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	80da      	strh	r2, [r3, #6]
    ecal->KcFactorSRefPx = SCI_Frame_Dequeue16s(frame);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f005 f890 	bl	8005e66 <SCI_Frame_Dequeue16s>
 8000d46:	4603      	mov	r3, r0
 8000d48:	461a      	mov	r2, r3
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	811a      	strh	r2, [r3, #8]
    ecal->KcFactorCRefPx = SCI_Frame_Dequeue16s(frame);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f005 f889 	bl	8005e66 <SCI_Frame_Dequeue16s>
 8000d54:	4603      	mov	r3, r0
 8000d56:	461a      	mov	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	815a      	strh	r2, [r3, #10]
    ecal->RelativeThreshold = SCI_Frame_Dequeue08u(frame);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f005 f8c1 	bl	8005ee4 <SCI_Frame_Dequeue08u>
 8000d62:	4603      	mov	r3, r0
 8000d64:	461a      	mov	r2, r3
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	705a      	strb	r2, [r3, #1]
    ecal->AbsoluteTreshold = SCI_Frame_Dequeue16u(frame);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f005 f8c6 	bl	8005efc <SCI_Frame_Dequeue16u>
 8000d70:	4603      	mov	r3, r0
 8000d72:	461a      	mov	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	805a      	strh	r2, [r3, #2]

    /* Optical Pixel-To-Pixel Crosstalk */
    argus_cal_optical_p2pxtalk_t * ocal = &cal->Optical;
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	330c      	adds	r3, #12
 8000d7c:	60bb      	str	r3, [r7, #8]
    ocal->Enabled = SCI_Frame_Dequeue08u(frame);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f005 f8b0 	bl	8005ee4 <SCI_Frame_Dequeue08u>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	bf14      	ite	ne
 8000d8a:	2301      	movne	r3, #1
 8000d8c:	2300      	moveq	r3, #0
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	701a      	strb	r2, [r3, #0]
    ocal->CouplingCoeffS = SCI_Frame_Dequeue16s(frame);
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f005 f866 	bl	8005e66 <SCI_Frame_Dequeue16s>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	805a      	strh	r2, [r3, #2]
    ocal->CouplingCoeffC = SCI_Frame_Dequeue16s(frame);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f005 f85f 	bl	8005e66 <SCI_Frame_Dequeue16s>
 8000da8:	4603      	mov	r3, r0
 8000daa:	461a      	mov	r2, r3
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	809a      	strh	r2, [r3, #4]
}
 8000db0:	bf00      	nop
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <RxCmd_CalGlobalRangeOffsets>:
/*******************************************************************************
 * Command Functions
 ******************************************************************************/

static status_t RxCmd_CalGlobalRangeOffsets(sci_device_t deviceID, sci_frame_t * frame)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	6039      	str	r1, [r7, #0]
 8000dc2:	71fb      	strb	r3, [r7, #7]
    if (SCI_Frame_BytesToRead(frame) > 1)
 8000dc4:	6838      	ldr	r0, [r7, #0]
 8000dc6:	f004 fddd 	bl	8005984 <SCI_Frame_BytesToRead>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d92a      	bls.n	8000e26 <RxCmd_CalGlobalRangeOffsets+0x6e>
    {
        /* Master sending data... */
        q0_15_t offset_low = SCI_Frame_Dequeue16s(frame);
 8000dd0:	6838      	ldr	r0, [r7, #0]
 8000dd2:	f005 f848 	bl	8005e66 <SCI_Frame_Dequeue16s>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	82fb      	strh	r3, [r7, #22]
        q0_15_t offset_high = SCI_Frame_Dequeue16s(frame);
 8000dda:	6838      	ldr	r0, [r7, #0]
 8000ddc:	f005 f843 	bl	8005e66 <SCI_Frame_Dequeue16s>
 8000de0:	4603      	mov	r3, r0
 8000de2:	82bb      	strh	r3, [r7, #20]
        argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f003 f874 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 8000dec:	6138      	str	r0, [r7, #16]
        if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d102      	bne.n	8000dfa <RxCmd_CalGlobalRangeOffsets+0x42>
 8000df4:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8000df8:	e01c      	b.n	8000e34 <RxCmd_CalGlobalRangeOffsets+0x7c>
        bool resume = ExplorerApp_SuspendTimerMeasurement(argus);
 8000dfa:	6938      	ldr	r0, [r7, #16]
 8000dfc:	f003 faca 	bl	8004394 <ExplorerApp_SuspendTimerMeasurement>
 8000e00:	4603      	mov	r3, r0
 8000e02:	73fb      	strb	r3, [r7, #15]
        status_t status = Argus_SetCalibrationGlobalRangeOffsets(argus, offset_low, offset_high);
 8000e04:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000e08:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	6938      	ldr	r0, [r7, #16]
 8000e10:	f013 fcba 	bl	8014788 <Argus_SetCalibrationGlobalRangeOffsets>
 8000e14:	60b8      	str	r0, [r7, #8]
        if (resume) ExplorerApp_StartTimerMeasurement(argus);
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d002      	beq.n	8000e22 <RxCmd_CalGlobalRangeOffsets+0x6a>
 8000e1c:	6938      	ldr	r0, [r7, #16]
 8000e1e:	f003 fae5 	bl	80043ec <ExplorerApp_StartTimerMeasurement>
        return status;
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	e006      	b.n	8000e34 <RxCmd_CalGlobalRangeOffsets+0x7c>
    }
    else
    {
        /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CALIBRATION_GLOBAL_RANGE_OFFSET, 0, 0);
 8000e26:	79f8      	ldrb	r0, [r7, #7]
 8000e28:	2300      	movs	r3, #0
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2161      	movs	r1, #97	@ 0x61
 8000e2e:	f003 fd7f 	bl	8004930 <SCI_SendCommand>
 8000e32:	4603      	mov	r3, r0
    }
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <TxCmd_CalGlobalRangeOffsets>:
static status_t TxCmd_CalGlobalRangeOffsets(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b088      	sub	sp, #32
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	4603      	mov	r3, r0
 8000e4a:	73fb      	strb	r3, [r7, #15]
    (void)data;
    (void)param;

    status_t status = STATUS_OK;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61fb      	str	r3, [r7, #28]
    q0_15_t offset_high, offset_low;
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f003 f83e 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 8000e58:	61b8      	str	r0, [r7, #24]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d102      	bne.n	8000e66 <TxCmd_CalGlobalRangeOffsets+0x2a>
 8000e60:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8000e64:	e015      	b.n	8000e92 <TxCmd_CalGlobalRangeOffsets+0x56>
    status = Argus_GetCalibrationGlobalRangeOffsets(argus, &offset_low, &offset_high);
 8000e66:	f107 0216 	add.w	r2, r7, #22
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	69b8      	ldr	r0, [r7, #24]
 8000e72:	f013 fcd9 	bl	8014828 <Argus_GetCalibrationGlobalRangeOffsets>
 8000e76:	61f8      	str	r0, [r7, #28]
    SCI_Frame_Queue16s(frame, offset_low);
 8000e78:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	68b8      	ldr	r0, [r7, #8]
 8000e80:	f004 fefa 	bl	8005c78 <SCI_Frame_Queue16s>
    SCI_Frame_Queue16s(frame, offset_high);
 8000e84:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	68b8      	ldr	r0, [r7, #8]
 8000e8c:	f004 fef4 	bl	8005c78 <SCI_Frame_Queue16s>
    return status;
 8000e90:	69fb      	ldr	r3, [r7, #28]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3720      	adds	r7, #32
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <RxCmd_CalPixelRangeOffsets>:

static status_t RxCmd_CalPixelRangeOffsets(sci_device_t deviceID, sci_frame_t * frame)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b0a8      	sub	sp, #160	@ 0xa0
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	6039      	str	r1, [r7, #0]
 8000ea4:	71fb      	strb	r3, [r7, #7]
    if (SCI_Frame_BytesToRead(frame) > 1)
 8000ea6:	6838      	ldr	r0, [r7, #0]
 8000ea8:	f004 fd6c 	bl	8005984 <SCI_Frame_BytesToRead>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d963      	bls.n	8000f7a <RxCmd_CalPixelRangeOffsets+0xe0>
    {
        /* Master sending data... */
        argus_cal_offset_table_t offsets;
        for (uint_fast8_t p = 0; p < ARGUS_DCA_POWER_STAGE_COUNT; ++p)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000eb8:	e033      	b.n	8000f22 <RxCmd_CalPixelRangeOffsets+0x88>
        {
            for (uint_fast8_t x = 0; x < ARGUS_PIXELS_X; ++x)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000ec0:	e026      	b.n	8000f10 <RxCmd_CalPixelRangeOffsets+0x76>
            {
                for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000ec8:	e019      	b.n	8000efe <RxCmd_CalPixelRangeOffsets+0x64>
                {
                    offsets.Table[p][x][y] = SCI_Frame_Dequeue16s(frame);
 8000eca:	6838      	ldr	r0, [r7, #0]
 8000ecc:	f004 ffcb 	bl	8005e66 <SCI_Frame_Dequeue16s>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000ed8:	00da      	lsls	r2, r3, #3
 8000eda:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000ede:	4413      	add	r3, r2
 8000ee0:	009a      	lsls	r2, r3, #2
 8000ee2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000ee6:	4413      	add	r3, r2
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	33a0      	adds	r3, #160	@ 0xa0
 8000eec:	443b      	add	r3, r7
 8000eee:	460a      	mov	r2, r1
 8000ef0:	f823 2c98 	strh.w	r2, [r3, #-152]
                for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 8000ef4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000ef8:	3301      	adds	r3, #1
 8000efa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000efe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000f02:	2b03      	cmp	r3, #3
 8000f04:	d9e1      	bls.n	8000eca <RxCmd_CalPixelRangeOffsets+0x30>
            for (uint_fast8_t x = 0; x < ARGUS_PIXELS_X; ++x)
 8000f06:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000f10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f14:	2b07      	cmp	r3, #7
 8000f16:	d9d4      	bls.n	8000ec2 <RxCmd_CalPixelRangeOffsets+0x28>
        for (uint_fast8_t p = 0; p < ARGUS_DCA_POWER_STAGE_COUNT; ++p)
 8000f18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000f22:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d9c7      	bls.n	8000eba <RxCmd_CalPixelRangeOffsets+0x20>
                }
            }
        }
        argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f002 ffd1 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 8000f32:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
        if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8000f36:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d102      	bne.n	8000f44 <RxCmd_CalPixelRangeOffsets+0xaa>
 8000f3e:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8000f42:	e021      	b.n	8000f88 <RxCmd_CalPixelRangeOffsets+0xee>
        bool resume = ExplorerApp_SuspendTimerMeasurement(argus);
 8000f44:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000f48:	f003 fa24 	bl	8004394 <ExplorerApp_SuspendTimerMeasurement>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
        status_t status = Argus_SetCalibrationPixelRangeOffsets(argus, &offsets);
 8000f52:	f107 0308 	add.w	r3, r7, #8
 8000f56:	4619      	mov	r1, r3
 8000f58:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000f5c:	f013 fc96 	bl	801488c <Argus_SetCalibrationPixelRangeOffsets>
 8000f60:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
        if (resume) ExplorerApp_StartTimerMeasurement(argus);
 8000f64:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d003      	beq.n	8000f74 <RxCmd_CalPixelRangeOffsets+0xda>
 8000f6c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000f70:	f003 fa3c 	bl	80043ec <ExplorerApp_StartTimerMeasurement>
        return status;
 8000f74:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000f78:	e006      	b.n	8000f88 <RxCmd_CalPixelRangeOffsets+0xee>

    }
    else
    {
        /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CALIBRATION_PIXEL_RANGE_OFFSETS, 0, 0);
 8000f7a:	79f8      	ldrb	r0, [r7, #7]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2167      	movs	r1, #103	@ 0x67
 8000f82:	f003 fcd5 	bl	8004930 <SCI_SendCommand>
 8000f86:	4603      	mov	r3, r0
    }
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	37a0      	adds	r7, #160	@ 0xa0
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <TxCmd_CalPixelRangeOffsets>:
static status_t TxCmd_CalPixelRangeOffsets(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b0aa      	sub	sp, #168	@ 0xa8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	607a      	str	r2, [r7, #4]
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	73fb      	strb	r3, [r7, #15]
    (void)data;
    (void)param;

    status_t status = STATUS_OK;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    argus_cal_offset_table_t offsets;
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f002 ff93 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 8000fae:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8000fb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d102      	bne.n	8000fc0 <TxCmd_CalPixelRangeOffsets+0x30>
 8000fba:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8000fbe:	e044      	b.n	800104a <TxCmd_CalPixelRangeOffsets+0xba>
    status = Argus_GetCalibrationPixelRangeOffsets(argus, &offsets);
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8000fca:	f013 fcb3 	bl	8014934 <Argus_GetCalibrationPixelRangeOffsets>
 8000fce:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
    for (uint_fast8_t p = 0; p < ARGUS_DCA_POWER_STAGE_COUNT; ++p)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000fd8:	e031      	b.n	800103e <TxCmd_CalPixelRangeOffsets+0xae>
    {
        for (uint_fast8_t x = 0; x < ARGUS_PIXELS_X; ++x)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000fe0:	e024      	b.n	800102c <TxCmd_CalPixelRangeOffsets+0x9c>
        {
            for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000fe8:	e017      	b.n	800101a <TxCmd_CalPixelRangeOffsets+0x8a>
            {
                SCI_Frame_Queue16s(frame, offsets.Table[p][x][y]);
 8000fea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000fee:	00da      	lsls	r2, r3, #3
 8000ff0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000ff4:	4413      	add	r3, r2
 8000ff6:	009a      	lsls	r2, r3, #2
 8000ff8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000ffc:	4413      	add	r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	33a8      	adds	r3, #168	@ 0xa8
 8001002:	443b      	add	r3, r7
 8001004:	f933 3c94 	ldrsh.w	r3, [r3, #-148]
 8001008:	4619      	mov	r1, r3
 800100a:	68b8      	ldr	r0, [r7, #8]
 800100c:	f004 fe34 	bl	8005c78 <SCI_Frame_Queue16s>
            for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 8001010:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001014:	3301      	adds	r3, #1
 8001016:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800101a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800101e:	2b03      	cmp	r3, #3
 8001020:	d9e3      	bls.n	8000fea <TxCmd_CalPixelRangeOffsets+0x5a>
        for (uint_fast8_t x = 0; x < ARGUS_PIXELS_X; ++x)
 8001022:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001026:	3301      	adds	r3, #1
 8001028:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800102c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001030:	2b07      	cmp	r3, #7
 8001032:	d9d6      	bls.n	8000fe2 <TxCmd_CalPixelRangeOffsets+0x52>
    for (uint_fast8_t p = 0; p < ARGUS_DCA_POWER_STAGE_COUNT; ++p)
 8001034:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001038:	3301      	adds	r3, #1
 800103a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800103e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001042:	2b01      	cmp	r3, #1
 8001044:	d9c9      	bls.n	8000fda <TxCmd_CalPixelRangeOffsets+0x4a>
            }
        }
    }
    return status;
 8001046:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
}
 800104a:	4618      	mov	r0, r3
 800104c:	37a8      	adds	r7, #168	@ 0xa8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <RxCmd_CalResetPixelRangeOffsets>:

static status_t RxCmd_CalResetPixelRangeOffsets(sci_device_t deviceID, sci_frame_t * frame)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	6039      	str	r1, [r7, #0]
 800105c:	71fb      	strb	r3, [r7, #7]
    (void)frame;
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	4618      	mov	r0, r3
 8001062:	f002 ff37 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 8001066:	60f8      	str	r0, [r7, #12]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d102      	bne.n	8001074 <RxCmd_CalResetPixelRangeOffsets+0x22>
 800106e:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8001072:	e003      	b.n	800107c <RxCmd_CalResetPixelRangeOffsets+0x2a>
    return Argus_ResetCalibrationPixelRangeOffsets(argus);
 8001074:	68f8      	ldr	r0, [r7, #12]
 8001076:	f013 fc87 	bl	8014988 <Argus_ResetCalibrationPixelRangeOffsets>
 800107a:	4603      	mov	r3, r0
}
 800107c:	4618      	mov	r0, r3
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <RxCmd_CalRangeOffsetSeqSampleTime>:

static status_t RxCmd_CalRangeOffsetSeqSampleTime(sci_device_t deviceID, sci_frame_t * frame)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	71fb      	strb	r3, [r7, #7]
    if (SCI_Frame_BytesToRead(frame) > 1)
 8001090:	6838      	ldr	r0, [r7, #0]
 8001092:	f004 fc77 	bl	8005984 <SCI_Frame_BytesToRead>
 8001096:	4603      	mov	r3, r0
 8001098:	2b01      	cmp	r3, #1
 800109a:	d922      	bls.n	80010e2 <RxCmd_CalRangeOffsetSeqSampleTime+0x5e>
    {
        /* Master sending data... */
        uint16_t time = SCI_Frame_Dequeue16u(frame);
 800109c:	6838      	ldr	r0, [r7, #0]
 800109e:	f004 ff2d 	bl	8005efc <SCI_Frame_Dequeue16u>
 80010a2:	4603      	mov	r3, r0
 80010a4:	82fb      	strh	r3, [r7, #22]
        argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f002 ff13 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 80010ae:	6138      	str	r0, [r7, #16]
        if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d102      	bne.n	80010bc <RxCmd_CalRangeOffsetSeqSampleTime+0x38>
 80010b6:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 80010ba:	e019      	b.n	80010f0 <RxCmd_CalRangeOffsetSeqSampleTime+0x6c>
        bool resume = ExplorerApp_SuspendTimerMeasurement(argus);
 80010bc:	6938      	ldr	r0, [r7, #16]
 80010be:	f003 f969 	bl	8004394 <ExplorerApp_SuspendTimerMeasurement>
 80010c2:	4603      	mov	r3, r0
 80010c4:	73fb      	strb	r3, [r7, #15]
        status_t status = Argus_SetCalibrationRangeOffsetSequenceSampleTime(argus, time);
 80010c6:	8afb      	ldrh	r3, [r7, #22]
 80010c8:	4619      	mov	r1, r3
 80010ca:	6938      	ldr	r0, [r7, #16]
 80010cc:	f013 fcb2 	bl	8014a34 <Argus_SetCalibrationRangeOffsetSequenceSampleTime>
 80010d0:	60b8      	str	r0, [r7, #8]
        if (resume) ExplorerApp_StartTimerMeasurement(argus);
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d002      	beq.n	80010de <RxCmd_CalRangeOffsetSeqSampleTime+0x5a>
 80010d8:	6938      	ldr	r0, [r7, #16]
 80010da:	f003 f987 	bl	80043ec <ExplorerApp_StartTimerMeasurement>
        return status;
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	e006      	b.n	80010f0 <RxCmd_CalRangeOffsetSeqSampleTime+0x6c>

    }
    else
    {
        /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CALIBRATION_RANGE_OFFSET_SAMPLE_TIME, 0, 0);
 80010e2:	79f8      	ldrb	r0, [r7, #7]
 80010e4:	2300      	movs	r3, #0
 80010e6:	2200      	movs	r2, #0
 80010e8:	2169      	movs	r1, #105	@ 0x69
 80010ea:	f003 fc21 	bl	8004930 <SCI_SendCommand>
 80010ee:	4603      	mov	r3, r0
    }
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <TxCmd_CalRangeOffsetSeqSampleTime>:
static status_t TxCmd_CalRangeOffsetSeqSampleTime(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	603b      	str	r3, [r7, #0]
 8001104:	4603      	mov	r3, r0
 8001106:	73fb      	strb	r3, [r7, #15]
    (void)data;
    (void)param;

    status_t status = STATUS_OK;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
    uint16_t time;
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	4618      	mov	r0, r3
 8001110:	f002 fee0 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 8001114:	61b8      	str	r0, [r7, #24]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d102      	bne.n	8001122 <TxCmd_CalRangeOffsetSeqSampleTime+0x2a>
 800111c:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8001120:	e00c      	b.n	800113c <TxCmd_CalRangeOffsetSeqSampleTime+0x44>
    status = Argus_GetCalibrationRangeOffsetSequenceSampleTime(argus, &time);
 8001122:	f107 0316 	add.w	r3, r7, #22
 8001126:	4619      	mov	r1, r3
 8001128:	69b8      	ldr	r0, [r7, #24]
 800112a:	f013 fcd1 	bl	8014ad0 <Argus_GetCalibrationRangeOffsetSequenceSampleTime>
 800112e:	61f8      	str	r0, [r7, #28]
    SCI_Frame_Queue16u(frame, time);
 8001130:	8afb      	ldrh	r3, [r7, #22]
 8001132:	4619      	mov	r1, r3
 8001134:	68b8      	ldr	r0, [r7, #8]
 8001136:	f004 fd0c 	bl	8005b52 <SCI_Frame_Queue16u>
    return status;
 800113a:	69fb      	ldr	r3, [r7, #28]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3720      	adds	r7, #32
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <RxCmd_CalXtalkPixel2Pixel>:

static status_t RxCmd_CalXtalkPixel2Pixel(sci_device_t deviceID, sci_frame_t * frame)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	@ 0x28
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	71fb      	strb	r3, [r7, #7]
    if (SCI_Frame_BytesToRead(frame) > 1)
 8001150:	6838      	ldr	r0, [r7, #0]
 8001152:	f004 fc17 	bl	8005984 <SCI_Frame_BytesToRead>
 8001156:	4603      	mov	r3, r0
 8001158:	2b01      	cmp	r3, #1
 800115a:	d92e      	bls.n	80011ba <RxCmd_CalXtalkPixel2Pixel+0x76>
    {
        /* Master sending data... */
        argus_cal_p2pxtalk_t cal = { 0 };
 800115c:	f107 0308 	add.w	r3, r7, #8
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	821a      	strh	r2, [r3, #16]
        Deserialize_Cal_P2PXtalk(frame, &cal);
 800116c:	f107 0308 	add.w	r3, r7, #8
 8001170:	4619      	mov	r1, r3
 8001172:	6838      	ldr	r0, [r7, #0]
 8001174:	f7ff fdc4 	bl	8000d00 <Deserialize_Cal_P2PXtalk>
        argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	4618      	mov	r0, r3
 800117c:	f002 feaa 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 8001180:	6278      	str	r0, [r7, #36]	@ 0x24
        if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8001182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001184:	2b00      	cmp	r3, #0
 8001186:	d102      	bne.n	800118e <RxCmd_CalXtalkPixel2Pixel+0x4a>
 8001188:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 800118c:	e01c      	b.n	80011c8 <RxCmd_CalXtalkPixel2Pixel+0x84>
        bool resume = ExplorerApp_SuspendTimerMeasurement(argus);
 800118e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001190:	f003 f900 	bl	8004394 <ExplorerApp_SuspendTimerMeasurement>
 8001194:	4603      	mov	r3, r0
 8001196:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        status_t status = Argus_SetCalibrationCrosstalkPixel2Pixel(argus, &cal);
 800119a:	f107 0308 	add.w	r3, r7, #8
 800119e:	4619      	mov	r1, r3
 80011a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80011a2:	f013 fe81 	bl	8014ea8 <Argus_SetCalibrationCrosstalkPixel2Pixel>
 80011a6:	61f8      	str	r0, [r7, #28]
        if (resume) ExplorerApp_StartTimerMeasurement(argus);
 80011a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d002      	beq.n	80011b6 <RxCmd_CalXtalkPixel2Pixel+0x72>
 80011b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80011b2:	f003 f91b 	bl	80043ec <ExplorerApp_StartTimerMeasurement>
        return status;
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	e006      	b.n	80011c8 <RxCmd_CalXtalkPixel2Pixel+0x84>
    }
    else
    {
        /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CALIBRATION_XTALK_PIXEL_2_PIXEL, 0, 0);
 80011ba:	79f8      	ldrb	r0, [r7, #7]
 80011bc:	2300      	movs	r3, #0
 80011be:	2200      	movs	r2, #0
 80011c0:	2166      	movs	r1, #102	@ 0x66
 80011c2:	f003 fbb5 	bl	8004930 <SCI_SendCommand>
 80011c6:	4603      	mov	r3, r0
    }
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3728      	adds	r7, #40	@ 0x28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <TxCmd_CalXtalkPixel2Pixel>:
static status_t TxCmd_CalXtalkPixel2Pixel(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08c      	sub	sp, #48	@ 0x30
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	4603      	mov	r3, r0
 80011de:	73fb      	strb	r3, [r7, #15]
    (void)data;
    (void)param;

    status_t status = STATUS_OK;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    argus_cal_p2pxtalk_t cal = { 0 };
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	821a      	strh	r2, [r3, #16]
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f002 fe6c 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 80011fc:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 80011fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001200:	2b00      	cmp	r3, #0
 8001202:	d102      	bne.n	800120a <TxCmd_CalXtalkPixel2Pixel+0x3a>
 8001204:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8001208:	e00d      	b.n	8001226 <TxCmd_CalXtalkPixel2Pixel+0x56>
    status = Argus_GetCalibrationCrosstalkPixel2Pixel(argus, &cal);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001212:	f013 fe9f 	bl	8014f54 <Argus_GetCalibrationCrosstalkPixel2Pixel>
 8001216:	62f8      	str	r0, [r7, #44]	@ 0x2c
    Serialize_Cal_P2PXtalk(frame, &cal);
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4619      	mov	r1, r3
 800121e:	68b8      	ldr	r0, [r7, #8]
 8001220:	f7ff fd1e 	bl	8000c60 <Serialize_Cal_P2PXtalk>
    return status;
 8001224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001226:	4618      	mov	r0, r3
 8001228:	3730      	adds	r7, #48	@ 0x30
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <RxCmd_CalXtalkVectorTable>:

static status_t RxCmd_CalXtalkVectorTable(sci_device_t deviceID, sci_frame_t * frame)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b0c8      	sub	sp, #288	@ 0x120
 8001232:	af00      	add	r7, sp, #0
 8001234:	4602      	mov	r2, r0
 8001236:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800123a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800123e:	6019      	str	r1, [r3, #0]
 8001240:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001244:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8001248:	701a      	strb	r2, [r3, #0]
    if (SCI_Frame_BytesToRead(frame) > 1)
 800124a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800124e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001252:	6818      	ldr	r0, [r3, #0]
 8001254:	f004 fb96 	bl	8005984 <SCI_Frame_BytesToRead>
 8001258:	4603      	mov	r3, r0
 800125a:	2b01      	cmp	r3, #1
 800125c:	f240 8088 	bls.w	8001370 <RxCmd_CalXtalkVectorTable+0x142>
    {
        /* Master sending data... */
        argus_cal_xtalk_table_t xtalk;
        for (uint_fast8_t f = 0; f < ARGUS_DFM_FRAME_COUNT; ++f)
 8001260:	2300      	movs	r3, #0
 8001262:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001266:	e053      	b.n	8001310 <RxCmd_CalXtalkVectorTable+0xe2>
        {
            for (uint_fast8_t x = 0; x < ARGUS_PIXELS_X; ++x)
 8001268:	2300      	movs	r3, #0
 800126a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800126e:	e046      	b.n	80012fe <RxCmd_CalXtalkVectorTable+0xd0>
            {
                for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001276:	e039      	b.n	80012ec <RxCmd_CalXtalkVectorTable+0xbe>
                {
                    xtalk.Table[f][x][y].dS = SCI_Frame_Dequeue16s(frame);
 8001278:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800127c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001280:	6818      	ldr	r0, [r3, #0]
 8001282:	f004 fdf0 	bl	8005e66 <SCI_Frame_Dequeue16s>
 8001286:	4603      	mov	r3, r0
 8001288:	4618      	mov	r0, r3
 800128a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800128e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001292:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001296:	00d1      	lsls	r1, r2, #3
 8001298:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800129c:	440a      	add	r2, r1
 800129e:	0091      	lsls	r1, r2, #2
 80012a0:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80012a4:	440a      	add	r2, r1
 80012a6:	4601      	mov	r1, r0
 80012a8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
                    xtalk.Table[f][x][y].dC = SCI_Frame_Dequeue16s(frame);
 80012ac:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80012b0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80012b4:	6818      	ldr	r0, [r3, #0]
 80012b6:	f004 fdd6 	bl	8005e66 <SCI_Frame_Dequeue16s>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4618      	mov	r0, r3
 80012be:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80012c2:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 80012c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80012ca:	00d9      	lsls	r1, r3, #3
 80012cc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80012d0:	440b      	add	r3, r1
 80012d2:	0099      	lsls	r1, r3, #2
 80012d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80012d8:	440b      	add	r3, r1
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4413      	add	r3, r2
 80012de:	4602      	mov	r2, r0
 80012e0:	805a      	strh	r2, [r3, #2]
                for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 80012e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80012e6:	3301      	adds	r3, #1
 80012e8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80012ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80012f0:	2b03      	cmp	r3, #3
 80012f2:	d9c1      	bls.n	8001278 <RxCmd_CalXtalkVectorTable+0x4a>
            for (uint_fast8_t x = 0; x < ARGUS_PIXELS_X; ++x)
 80012f4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80012f8:	3301      	adds	r3, #1
 80012fa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80012fe:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001302:	2b07      	cmp	r3, #7
 8001304:	d9b4      	bls.n	8001270 <RxCmd_CalXtalkVectorTable+0x42>
        for (uint_fast8_t f = 0; f < ARGUS_DFM_FRAME_COUNT; ++f)
 8001306:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800130a:	3301      	adds	r3, #1
 800130c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001310:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001314:	2b01      	cmp	r3, #1
 8001316:	d9a7      	bls.n	8001268 <RxCmd_CalXtalkVectorTable+0x3a>
                }
            }
        }
        argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8001318:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800131c:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f002 fdd6 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 8001328:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
        if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 800132c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001330:	2b00      	cmp	r3, #0
 8001332:	d102      	bne.n	800133a <RxCmd_CalXtalkVectorTable+0x10c>
 8001334:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8001338:	e025      	b.n	8001386 <RxCmd_CalXtalkVectorTable+0x158>
        bool resume = ExplorerApp_SuspendTimerMeasurement(argus);
 800133a:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 800133e:	f003 f829 	bl	8004394 <ExplorerApp_SuspendTimerMeasurement>
 8001342:	4603      	mov	r3, r0
 8001344:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        status_t status = Argus_SetCalibrationCrosstalkVectorTable(argus, &xtalk);
 8001348:	f107 0308 	add.w	r3, r7, #8
 800134c:	4619      	mov	r1, r3
 800134e:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8001352:	f013 fbe5 	bl	8014b20 <Argus_SetCalibrationCrosstalkVectorTable>
 8001356:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
        if (resume) ExplorerApp_StartTimerMeasurement(argus);
 800135a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <RxCmd_CalXtalkVectorTable+0x13c>
 8001362:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8001366:	f003 f841 	bl	80043ec <ExplorerApp_StartTimerMeasurement>
        return status;
 800136a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800136e:	e00a      	b.n	8001386 <RxCmd_CalXtalkVectorTable+0x158>

    }
    else
    {
        /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CALIBRATION_XTALK_VECTOR_TABLE, 0, 0);
 8001370:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001374:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8001378:	7818      	ldrb	r0, [r3, #0]
 800137a:	2300      	movs	r3, #0
 800137c:	2200      	movs	r2, #0
 800137e:	2162      	movs	r1, #98	@ 0x62
 8001380:	f003 fad6 	bl	8004930 <SCI_SendCommand>
 8001384:	4603      	mov	r3, r0
    }
}
 8001386:	4618      	mov	r0, r3
 8001388:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <TxCmd_CalXtalkVectorTable>:
static status_t TxCmd_CalXtalkVectorTable(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 8001390:	b590      	push	{r4, r7, lr}
 8001392:	b0cb      	sub	sp, #300	@ 0x12c
 8001394:	af00      	add	r7, sp, #0
 8001396:	4604      	mov	r4, r0
 8001398:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 800139c:	f5a0 7090 	sub.w	r0, r0, #288	@ 0x120
 80013a0:	6001      	str	r1, [r0, #0]
 80013a2:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 80013a6:	f5a1 7192 	sub.w	r1, r1, #292	@ 0x124
 80013aa:	600a      	str	r2, [r1, #0]
 80013ac:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80013b0:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80013ba:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80013be:	4622      	mov	r2, r4
 80013c0:	701a      	strb	r2, [r3, #0]
    (void)data;
    (void)param;

    status_t status = STATUS_OK;
 80013c2:	2300      	movs	r3, #0
 80013c4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    argus_cal_xtalk_table_t xtalk;
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 80013c8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80013cc:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f002 fd7e 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 80013d8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 80013dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d102      	bne.n	80013ea <TxCmd_CalXtalkVectorTable+0x5a>
 80013e4:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 80013e8:	e063      	b.n	80014b2 <TxCmd_CalXtalkVectorTable+0x122>
    status = Argus_GetCalibrationCrosstalkVectorTable(argus, &xtalk);
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	4619      	mov	r1, r3
 80013f0:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80013f4:	f013 fbea 	bl	8014bcc <Argus_GetCalibrationCrosstalkVectorTable>
 80013f8:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
    for (uint_fast8_t f = 0; f < ARGUS_DFM_FRAME_COUNT; ++f)
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001402:	e050      	b.n	80014a6 <TxCmd_CalXtalkVectorTable+0x116>
    {
        for (uint_fast8_t x = 0; x < ARGUS_PIXELS_X; ++x)
 8001404:	2300      	movs	r3, #0
 8001406:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800140a:	e043      	b.n	8001494 <TxCmd_CalXtalkVectorTable+0x104>
        {
            for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001412:	e036      	b.n	8001482 <TxCmd_CalXtalkVectorTable+0xf2>
            {
                SCI_Frame_Queue16s(frame, xtalk.Table[f][x][y].dS);
 8001414:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001418:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800141c:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001420:	00d1      	lsls	r1, r2, #3
 8001422:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8001426:	440a      	add	r2, r1
 8001428:	0091      	lsls	r1, r2, #2
 800142a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800142e:	440a      	add	r2, r1
 8001430:	f933 2022 	ldrsh.w	r2, [r3, r2, lsl #2]
 8001434:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001438:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800143c:	4611      	mov	r1, r2
 800143e:	6818      	ldr	r0, [r3, #0]
 8001440:	f004 fc1a 	bl	8005c78 <SCI_Frame_Queue16s>
                SCI_Frame_Queue16s(frame, xtalk.Table[f][x][y].dC);
 8001444:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001448:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800144c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001450:	00d9      	lsls	r1, r3, #3
 8001452:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001456:	440b      	add	r3, r1
 8001458:	0099      	lsls	r1, r3, #2
 800145a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800145e:	440b      	add	r3, r1
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001468:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800146c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001470:	4611      	mov	r1, r2
 8001472:	6818      	ldr	r0, [r3, #0]
 8001474:	f004 fc00 	bl	8005c78 <SCI_Frame_Queue16s>
            for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 8001478:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800147c:	3301      	adds	r3, #1
 800147e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001482:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001486:	2b03      	cmp	r3, #3
 8001488:	d9c4      	bls.n	8001414 <TxCmd_CalXtalkVectorTable+0x84>
        for (uint_fast8_t x = 0; x < ARGUS_PIXELS_X; ++x)
 800148a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800148e:	3301      	adds	r3, #1
 8001490:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001494:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001498:	2b07      	cmp	r3, #7
 800149a:	d9b7      	bls.n	800140c <TxCmd_CalXtalkVectorTable+0x7c>
    for (uint_fast8_t f = 0; f < ARGUS_DFM_FRAME_COUNT; ++f)
 800149c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80014a0:	3301      	adds	r3, #1
 80014a2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80014a6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d9aa      	bls.n	8001404 <TxCmd_CalXtalkVectorTable+0x74>
            }
        }
    }
    return status;
 80014ae:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd90      	pop	{r4, r7, pc}

080014bc <RxCmd_CalXtalkResetVectorTable>:

static status_t RxCmd_CalXtalkResetVectorTable(sci_device_t deviceID, sci_frame_t * frame)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	6039      	str	r1, [r7, #0]
 80014c6:	71fb      	strb	r3, [r7, #7]
    (void)frame;
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f002 fd02 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 80014d0:	60f8      	str	r0, [r7, #12]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d102      	bne.n	80014de <RxCmd_CalXtalkResetVectorTable+0x22>
 80014d8:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 80014dc:	e003      	b.n	80014e6 <RxCmd_CalXtalkResetVectorTable+0x2a>
    return Argus_ResetCalibrationCrosstalkVectorTable(argus);
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f013 fb9e 	bl	8014c20 <Argus_ResetCalibrationCrosstalkVectorTable>
 80014e4:	4603      	mov	r3, r0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <RxCmd_CalXtalkSeqSampleTime>:

static status_t RxCmd_CalXtalkSeqSampleTime(sci_device_t deviceID, sci_frame_t * frame)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b086      	sub	sp, #24
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	6039      	str	r1, [r7, #0]
 80014f8:	71fb      	strb	r3, [r7, #7]
    if (SCI_Frame_BytesToRead(frame) > 1)
 80014fa:	6838      	ldr	r0, [r7, #0]
 80014fc:	f004 fa42 	bl	8005984 <SCI_Frame_BytesToRead>
 8001500:	4603      	mov	r3, r0
 8001502:	2b01      	cmp	r3, #1
 8001504:	d922      	bls.n	800154c <RxCmd_CalXtalkSeqSampleTime+0x5e>
    {
        /* Master sending data... */
        uint16_t time = SCI_Frame_Dequeue16u(frame);
 8001506:	6838      	ldr	r0, [r7, #0]
 8001508:	f004 fcf8 	bl	8005efc <SCI_Frame_Dequeue16u>
 800150c:	4603      	mov	r3, r0
 800150e:	82fb      	strh	r3, [r7, #22]
        argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	4618      	mov	r0, r3
 8001514:	f002 fcde 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 8001518:	6138      	str	r0, [r7, #16]
        if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d102      	bne.n	8001526 <RxCmd_CalXtalkSeqSampleTime+0x38>
 8001520:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8001524:	e019      	b.n	800155a <RxCmd_CalXtalkSeqSampleTime+0x6c>
        bool resume = ExplorerApp_SuspendTimerMeasurement(argus);
 8001526:	6938      	ldr	r0, [r7, #16]
 8001528:	f002 ff34 	bl	8004394 <ExplorerApp_SuspendTimerMeasurement>
 800152c:	4603      	mov	r3, r0
 800152e:	73fb      	strb	r3, [r7, #15]
        status_t status = Argus_SetCalibrationCrosstalkSequenceSampleTime(argus, time);
 8001530:	8afb      	ldrh	r3, [r7, #22]
 8001532:	4619      	mov	r1, r3
 8001534:	6938      	ldr	r0, [r7, #16]
 8001536:	f013 fbcb 	bl	8014cd0 <Argus_SetCalibrationCrosstalkSequenceSampleTime>
 800153a:	60b8      	str	r0, [r7, #8]
        if (resume) ExplorerApp_StartTimerMeasurement(argus);
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d002      	beq.n	8001548 <RxCmd_CalXtalkSeqSampleTime+0x5a>
 8001542:	6938      	ldr	r0, [r7, #16]
 8001544:	f002 ff52 	bl	80043ec <ExplorerApp_StartTimerMeasurement>
        return status;
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	e006      	b.n	800155a <RxCmd_CalXtalkSeqSampleTime+0x6c>

    }
    else
    {
        /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CALIBRATION_XTALK_SAMPLE_TIME, 0, 0);
 800154c:	79f8      	ldrb	r0, [r7, #7]
 800154e:	2300      	movs	r3, #0
 8001550:	2200      	movs	r2, #0
 8001552:	2164      	movs	r1, #100	@ 0x64
 8001554:	f003 f9ec 	bl	8004930 <SCI_SendCommand>
 8001558:	4603      	mov	r3, r0
    }
}
 800155a:	4618      	mov	r0, r3
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <TxCmd_CalXtalkSeqSampleTime>:
static status_t TxCmd_CalXtalkSeqSampleTime(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b088      	sub	sp, #32
 8001566:	af00      	add	r7, sp, #0
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	603b      	str	r3, [r7, #0]
 800156e:	4603      	mov	r3, r0
 8001570:	73fb      	strb	r3, [r7, #15]
    (void)data;
    (void)param;

    status_t status = STATUS_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
    uint16_t time;
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	4618      	mov	r0, r3
 800157a:	f002 fcab 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 800157e:	61b8      	str	r0, [r7, #24]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d102      	bne.n	800158c <TxCmd_CalXtalkSeqSampleTime+0x2a>
 8001586:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 800158a:	e00c      	b.n	80015a6 <TxCmd_CalXtalkSeqSampleTime+0x44>
    status = Argus_GetCalibrationCrosstalkSequenceSampleTime(argus, &time);
 800158c:	f107 0316 	add.w	r3, r7, #22
 8001590:	4619      	mov	r1, r3
 8001592:	69b8      	ldr	r0, [r7, #24]
 8001594:	f013 fbea 	bl	8014d6c <Argus_GetCalibrationCrosstalkSequenceSampleTime>
 8001598:	61f8      	str	r0, [r7, #28]
    SCI_Frame_Queue16u(frame, time);
 800159a:	8afb      	ldrh	r3, [r7, #22]
 800159c:	4619      	mov	r1, r3
 800159e:	68b8      	ldr	r0, [r7, #8]
 80015a0:	f004 fad7 	bl	8005b52 <SCI_Frame_Queue16u>
    return status;
 80015a4:	69fb      	ldr	r3, [r7, #28]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3720      	adds	r7, #32
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <RxCmd_CalXtalkSeqMaxAmplitude>:

static status_t RxCmd_CalXtalkSeqMaxAmplitude(sci_device_t deviceID, sci_frame_t * frame)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b086      	sub	sp, #24
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	6039      	str	r1, [r7, #0]
 80015b8:	71fb      	strb	r3, [r7, #7]
    if (SCI_Frame_BytesToRead(frame) > 1)
 80015ba:	6838      	ldr	r0, [r7, #0]
 80015bc:	f004 f9e2 	bl	8005984 <SCI_Frame_BytesToRead>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d922      	bls.n	800160c <RxCmd_CalXtalkSeqMaxAmplitude+0x5e>
    {
        /* Master sending data... */
        uq12_4_t ampl = SCI_Frame_Dequeue16u(frame);
 80015c6:	6838      	ldr	r0, [r7, #0]
 80015c8:	f004 fc98 	bl	8005efc <SCI_Frame_Dequeue16u>
 80015cc:	4603      	mov	r3, r0
 80015ce:	82fb      	strh	r3, [r7, #22]
        argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f002 fc7e 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 80015d8:	6138      	str	r0, [r7, #16]
        if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d102      	bne.n	80015e6 <RxCmd_CalXtalkSeqMaxAmplitude+0x38>
 80015e0:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 80015e4:	e019      	b.n	800161a <RxCmd_CalXtalkSeqMaxAmplitude+0x6c>
        bool resume = ExplorerApp_SuspendTimerMeasurement(argus);
 80015e6:	6938      	ldr	r0, [r7, #16]
 80015e8:	f002 fed4 	bl	8004394 <ExplorerApp_SuspendTimerMeasurement>
 80015ec:	4603      	mov	r3, r0
 80015ee:	73fb      	strb	r3, [r7, #15]
        status_t status = Argus_SetCalibrationCrosstalkSequenceAmplitudeThreshold(argus, ampl);
 80015f0:	8afb      	ldrh	r3, [r7, #22]
 80015f2:	4619      	mov	r1, r3
 80015f4:	6938      	ldr	r0, [r7, #16]
 80015f6:	f013 fbe1 	bl	8014dbc <Argus_SetCalibrationCrosstalkSequenceAmplitudeThreshold>
 80015fa:	60b8      	str	r0, [r7, #8]
        if (resume) ExplorerApp_StartTimerMeasurement(argus);
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d002      	beq.n	8001608 <RxCmd_CalXtalkSeqMaxAmplitude+0x5a>
 8001602:	6938      	ldr	r0, [r7, #16]
 8001604:	f002 fef2 	bl	80043ec <ExplorerApp_StartTimerMeasurement>
        return status;
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	e006      	b.n	800161a <RxCmd_CalXtalkSeqMaxAmplitude+0x6c>
    }
    else
    {
        /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CALIBRATION_XTALK_MAX_AMPLITUDE, 0, 0);
 800160c:	79f8      	ldrb	r0, [r7, #7]
 800160e:	2300      	movs	r3, #0
 8001610:	2200      	movs	r2, #0
 8001612:	2165      	movs	r1, #101	@ 0x65
 8001614:	f003 f98c 	bl	8004930 <SCI_SendCommand>
 8001618:	4603      	mov	r3, r0
    }
}
 800161a:	4618      	mov	r0, r3
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <TxCmd_CalXtalkSeqMaxAmplitude>:
static status_t TxCmd_CalXtalkSeqMaxAmplitude(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b088      	sub	sp, #32
 8001626:	af00      	add	r7, sp, #0
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
 800162c:	603b      	str	r3, [r7, #0]
 800162e:	4603      	mov	r3, r0
 8001630:	73fb      	strb	r3, [r7, #15]
    (void)data;
    (void)param;

    status_t status = STATUS_OK;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
    uq12_4_t ampl;
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	4618      	mov	r0, r3
 800163a:	f002 fc4b 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 800163e:	61b8      	str	r0, [r7, #24]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d102      	bne.n	800164c <TxCmd_CalXtalkSeqMaxAmplitude+0x2a>
 8001646:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 800164a:	e00c      	b.n	8001666 <TxCmd_CalXtalkSeqMaxAmplitude+0x44>
    status = Argus_GetCalibrationCrosstalkSequenceAmplitudeThreshold(argus, &ampl);
 800164c:	f107 0316 	add.w	r3, r7, #22
 8001650:	4619      	mov	r1, r3
 8001652:	69b8      	ldr	r0, [r7, #24]
 8001654:	f013 fc00 	bl	8014e58 <Argus_GetCalibrationCrosstalkSequenceAmplitudeThreshold>
 8001658:	61f8      	str	r0, [r7, #28]
    SCI_Frame_Queue16u(frame, ampl);
 800165a:	8afb      	ldrh	r3, [r7, #22]
 800165c:	4619      	mov	r1, r3
 800165e:	68b8      	ldr	r0, [r7, #8]
 8001660:	f004 fa77 	bl	8005b52 <SCI_Frame_Queue16u>
    return status;
 8001664:	69fb      	ldr	r3, [r7, #28]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3720      	adds	r7, #32
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <ExplorerAPI_InitCal>:

/*******************************************************************************
 * Init Code
 ******************************************************************************/
status_t ExplorerAPI_InitCal()
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
    status_t status;
    status = SCI_SetRxTxCommand(CMD_CALIBRATION_GLOBAL_RANGE_OFFSET, RxCmd_CalGlobalRangeOffsets, TxCmd_CalGlobalRangeOffsets);
 8001676:	4a33      	ldr	r2, [pc, #204]	@ (8001744 <ExplorerAPI_InitCal+0xd4>)
 8001678:	4933      	ldr	r1, [pc, #204]	@ (8001748 <ExplorerAPI_InitCal+0xd8>)
 800167a:	2061      	movs	r0, #97	@ 0x61
 800167c:	f002 ffda 	bl	8004634 <SCI_SetRxTxCommand>
 8001680:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	da01      	bge.n	800168c <ExplorerAPI_InitCal+0x1c>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	e056      	b.n	800173a <ExplorerAPI_InitCal+0xca>
    status = SCI_SetRxTxCommand(CMD_CALIBRATION_PIXEL_RANGE_OFFSETS, RxCmd_CalPixelRangeOffsets, TxCmd_CalPixelRangeOffsets);
 800168c:	4a2f      	ldr	r2, [pc, #188]	@ (800174c <ExplorerAPI_InitCal+0xdc>)
 800168e:	4930      	ldr	r1, [pc, #192]	@ (8001750 <ExplorerAPI_InitCal+0xe0>)
 8001690:	2067      	movs	r0, #103	@ 0x67
 8001692:	f002 ffcf 	bl	8004634 <SCI_SetRxTxCommand>
 8001696:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	da01      	bge.n	80016a2 <ExplorerAPI_InitCal+0x32>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	e04b      	b.n	800173a <ExplorerAPI_InitCal+0xca>
    status = SCI_SetRxCommand(CMD_CALIBRATION_PIXEL_RANGE_OFFSETS_RESET, RxCmd_CalResetPixelRangeOffsets);
 80016a2:	492c      	ldr	r1, [pc, #176]	@ (8001754 <ExplorerAPI_InitCal+0xe4>)
 80016a4:	2068      	movs	r0, #104	@ 0x68
 80016a6:	f002 ff91 	bl	80045cc <SCI_SetRxCommand>
 80016aa:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	da01      	bge.n	80016b6 <ExplorerAPI_InitCal+0x46>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	e041      	b.n	800173a <ExplorerAPI_InitCal+0xca>
    status = SCI_SetRxTxCommand(CMD_CALIBRATION_RANGE_OFFSET_SAMPLE_TIME, RxCmd_CalRangeOffsetSeqSampleTime, TxCmd_CalRangeOffsetSeqSampleTime);
 80016b6:	4a28      	ldr	r2, [pc, #160]	@ (8001758 <ExplorerAPI_InitCal+0xe8>)
 80016b8:	4928      	ldr	r1, [pc, #160]	@ (800175c <ExplorerAPI_InitCal+0xec>)
 80016ba:	2069      	movs	r0, #105	@ 0x69
 80016bc:	f002 ffba 	bl	8004634 <SCI_SetRxTxCommand>
 80016c0:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	da01      	bge.n	80016cc <ExplorerAPI_InitCal+0x5c>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	e036      	b.n	800173a <ExplorerAPI_InitCal+0xca>
    status = SCI_SetRxTxCommand(CMD_CALIBRATION_XTALK_VECTOR_TABLE, RxCmd_CalXtalkVectorTable, TxCmd_CalXtalkVectorTable);
 80016cc:	4a24      	ldr	r2, [pc, #144]	@ (8001760 <ExplorerAPI_InitCal+0xf0>)
 80016ce:	4925      	ldr	r1, [pc, #148]	@ (8001764 <ExplorerAPI_InitCal+0xf4>)
 80016d0:	2062      	movs	r0, #98	@ 0x62
 80016d2:	f002 ffaf 	bl	8004634 <SCI_SetRxTxCommand>
 80016d6:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	da01      	bge.n	80016e2 <ExplorerAPI_InitCal+0x72>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	e02b      	b.n	800173a <ExplorerAPI_InitCal+0xca>
    status = SCI_SetRxCommand(CMD_CALIBRATION_XTALK_RESET_VECTOR_TABLE, RxCmd_CalXtalkResetVectorTable);
 80016e2:	4921      	ldr	r1, [pc, #132]	@ (8001768 <ExplorerAPI_InitCal+0xf8>)
 80016e4:	2063      	movs	r0, #99	@ 0x63
 80016e6:	f002 ff71 	bl	80045cc <SCI_SetRxCommand>
 80016ea:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	da01      	bge.n	80016f6 <ExplorerAPI_InitCal+0x86>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	e021      	b.n	800173a <ExplorerAPI_InitCal+0xca>
    status = SCI_SetRxTxCommand(CMD_CALIBRATION_XTALK_SAMPLE_TIME, RxCmd_CalXtalkSeqSampleTime, TxCmd_CalXtalkSeqSampleTime);
 80016f6:	4a1d      	ldr	r2, [pc, #116]	@ (800176c <ExplorerAPI_InitCal+0xfc>)
 80016f8:	491d      	ldr	r1, [pc, #116]	@ (8001770 <ExplorerAPI_InitCal+0x100>)
 80016fa:	2064      	movs	r0, #100	@ 0x64
 80016fc:	f002 ff9a 	bl	8004634 <SCI_SetRxTxCommand>
 8001700:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	da01      	bge.n	800170c <ExplorerAPI_InitCal+0x9c>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	e016      	b.n	800173a <ExplorerAPI_InitCal+0xca>
    status = SCI_SetRxTxCommand(CMD_CALIBRATION_XTALK_MAX_AMPLITUDE, RxCmd_CalXtalkSeqMaxAmplitude, TxCmd_CalXtalkSeqMaxAmplitude);
 800170c:	4a19      	ldr	r2, [pc, #100]	@ (8001774 <ExplorerAPI_InitCal+0x104>)
 800170e:	491a      	ldr	r1, [pc, #104]	@ (8001778 <ExplorerAPI_InitCal+0x108>)
 8001710:	2065      	movs	r0, #101	@ 0x65
 8001712:	f002 ff8f 	bl	8004634 <SCI_SetRxTxCommand>
 8001716:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	da01      	bge.n	8001722 <ExplorerAPI_InitCal+0xb2>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	e00b      	b.n	800173a <ExplorerAPI_InitCal+0xca>
    status = SCI_SetRxTxCommand(CMD_CALIBRATION_XTALK_PIXEL_2_PIXEL, RxCmd_CalXtalkPixel2Pixel, TxCmd_CalXtalkPixel2Pixel);
 8001722:	4a16      	ldr	r2, [pc, #88]	@ (800177c <ExplorerAPI_InitCal+0x10c>)
 8001724:	4916      	ldr	r1, [pc, #88]	@ (8001780 <ExplorerAPI_InitCal+0x110>)
 8001726:	2066      	movs	r0, #102	@ 0x66
 8001728:	f002 ff84 	bl	8004634 <SCI_SetRxTxCommand>
 800172c:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	da01      	bge.n	8001738 <ExplorerAPI_InitCal+0xc8>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	e000      	b.n	800173a <ExplorerAPI_InitCal+0xca>

    return status;
 8001738:	687b      	ldr	r3, [r7, #4]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	08000e3d 	.word	0x08000e3d
 8001748:	08000db9 	.word	0x08000db9
 800174c:	08000f91 	.word	0x08000f91
 8001750:	08000e9b 	.word	0x08000e9b
 8001754:	08001053 	.word	0x08001053
 8001758:	080010f9 	.word	0x080010f9
 800175c:	08001085 	.word	0x08001085
 8001760:	08001391 	.word	0x08001391
 8001764:	0800122f 	.word	0x0800122f
 8001768:	080014bd 	.word	0x080014bd
 800176c:	08001563 	.word	0x08001563
 8001770:	080014ef 	.word	0x080014ef
 8001774:	08001623 	.word	0x08001623
 8001778:	080015af 	.word	0x080015af
 800177c:	080011d1 	.word	0x080011d1
 8001780:	08001145 	.word	0x08001145

08001784 <Serialize_Cfg_DCA>:
/*******************************************************************************
 * Parsing Functions
 ******************************************************************************/

static void Serialize_Cfg_DCA(sci_frame_t * frame, argus_cfg_dca_t const * dcacfg)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
    SCI_Frame_Queue08u(frame, (uint8_t)((dcacfg->Enabled > 0 ? 1U : 0U)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	f993 3000 	ldrsb.w	r3, [r3]
 8001794:	2b00      	cmp	r3, #0
 8001796:	dd01      	ble.n	800179c <Serialize_Cfg_DCA+0x18>
 8001798:	2201      	movs	r2, #1
 800179a:	e000      	b.n	800179e <Serialize_Cfg_DCA+0x1a>
 800179c:	2200      	movs	r2, #0
                                      | (dcacfg->Enabled < 0 ? 2U : 0U)));
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	f993 3000 	ldrsb.w	r3, [r3]
    SCI_Frame_Queue08u(frame, (uint8_t)((dcacfg->Enabled > 0 ? 1U : 0U)
 80017a4:	119b      	asrs	r3, r3, #6
 80017a6:	b25b      	sxtb	r3, r3
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	4313      	orrs	r3, r2
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	4619      	mov	r1, r3
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f004 f9a6 	bl	8005b08 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, dcacfg->SatPxThLin);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	785b      	ldrb	r3, [r3, #1]
 80017c0:	4619      	mov	r1, r3
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f004 f9a0 	bl	8005b08 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, dcacfg->SatPxThExp);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	789b      	ldrb	r3, [r3, #2]
 80017cc:	4619      	mov	r1, r3
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f004 f99a 	bl	8005b08 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, dcacfg->SatPxThRst);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	78db      	ldrb	r3, [r3, #3]
 80017d8:	4619      	mov	r1, r3
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f004 f994 	bl	8005b08 <SCI_Frame_Queue08u>
    SCI_Frame_Queue16u(frame, dcacfg->Atarget);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	889b      	ldrh	r3, [r3, #4]
 80017e4:	4619      	mov	r1, r3
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f004 f9b3 	bl	8005b52 <SCI_Frame_Queue16u>
    SCI_Frame_Queue16u(frame, dcacfg->AthLow);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	88db      	ldrh	r3, [r3, #6]
 80017f0:	4619      	mov	r1, r3
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f004 f9ad 	bl	8005b52 <SCI_Frame_Queue16u>
    SCI_Frame_Queue16u(frame, dcacfg->AthHigh);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	891b      	ldrh	r3, [r3, #8]
 80017fc:	4619      	mov	r1, r3
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f004 f9a7 	bl	8005b52 <SCI_Frame_Queue16u>
    SCI_Frame_Queue08u(frame, dcacfg->AmplitudeMode);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	7a9b      	ldrb	r3, [r3, #10]
 8001808:	4619      	mov	r1, r3
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f004 f97c 	bl	8005b08 <SCI_Frame_Queue08u>
    SCI_Frame_Queue16u(frame, dcacfg->DepthNom);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	899b      	ldrh	r3, [r3, #12]
 8001814:	4619      	mov	r1, r3
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f004 f99b 	bl	8005b52 <SCI_Frame_Queue16u>
    SCI_Frame_Queue16u(frame, dcacfg->DepthMin);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	89db      	ldrh	r3, [r3, #14]
 8001820:	4619      	mov	r1, r3
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f004 f995 	bl	8005b52 <SCI_Frame_Queue16u>
    SCI_Frame_Queue16u(frame, dcacfg->DepthMax);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	8a1b      	ldrh	r3, [r3, #16]
 800182c:	4619      	mov	r1, r3
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f004 f98f 	bl	8005b52 <SCI_Frame_Queue16u>
    SCI_Frame_Queue08u(frame, dcacfg->Power);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	7adb      	ldrb	r3, [r3, #11]
 8001838:	4619      	mov	r1, r3
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f004 f964 	bl	8005b08 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, dcacfg->GainNom);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	7c9b      	ldrb	r3, [r3, #18]
 8001844:	4619      	mov	r1, r3
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f004 f95e 	bl	8005b08 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, dcacfg->GainMin);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	7cdb      	ldrb	r3, [r3, #19]
 8001850:	4619      	mov	r1, r3
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f004 f958 	bl	8005b08 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, dcacfg->GainMax);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	7d1b      	ldrb	r3, [r3, #20]
 800185c:	4619      	mov	r1, r3
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f004 f952 	bl	8005b08 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, dcacfg->PowerSavingRatio);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	7d5b      	ldrb	r3, [r3, #21]
 8001868:	4619      	mov	r1, r3
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f004 f94c 	bl	8005b08 <SCI_Frame_Queue08u>
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <Deserialize_Cfg_DCA>:
static void Deserialize_Cfg_DCA(sci_frame_t * frame, argus_cfg_dca_t * dcacfg)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
    /* Dynamic Configuration Adaption. */
    uint8_t tmp = SCI_Frame_Dequeue08u(frame);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f004 fb2e 	bl	8005ee4 <SCI_Frame_Dequeue08u>
 8001888:	4603      	mov	r3, r0
 800188a:	73fb      	strb	r3, [r7, #15]
    dcacfg->Enabled = (tmp & 1U) ? 1 : (tmp & 2U) ? -1 : 0;
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d109      	bne.n	80018aa <Deserialize_Cfg_DCA+0x32>
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d002      	beq.n	80018a6 <Deserialize_Cfg_DCA+0x2e>
 80018a0:	f04f 33ff 	mov.w	r3, #4294967295
 80018a4:	e002      	b.n	80018ac <Deserialize_Cfg_DCA+0x34>
 80018a6:	2300      	movs	r3, #0
 80018a8:	e000      	b.n	80018ac <Deserialize_Cfg_DCA+0x34>
 80018aa:	2301      	movs	r3, #1
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	7013      	strb	r3, [r2, #0]
    dcacfg->SatPxThLin = SCI_Frame_Dequeue08u(frame);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f004 fb17 	bl	8005ee4 <SCI_Frame_Dequeue08u>
 80018b6:	4603      	mov	r3, r0
 80018b8:	461a      	mov	r2, r3
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	705a      	strb	r2, [r3, #1]
    dcacfg->SatPxThExp = SCI_Frame_Dequeue08u(frame);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f004 fb10 	bl	8005ee4 <SCI_Frame_Dequeue08u>
 80018c4:	4603      	mov	r3, r0
 80018c6:	461a      	mov	r2, r3
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	709a      	strb	r2, [r3, #2]
    dcacfg->SatPxThRst = SCI_Frame_Dequeue08u(frame);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f004 fb09 	bl	8005ee4 <SCI_Frame_Dequeue08u>
 80018d2:	4603      	mov	r3, r0
 80018d4:	461a      	mov	r2, r3
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	70da      	strb	r2, [r3, #3]
    dcacfg->Atarget = SCI_Frame_Dequeue16u(frame);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f004 fb0e 	bl	8005efc <SCI_Frame_Dequeue16u>
 80018e0:	4603      	mov	r3, r0
 80018e2:	461a      	mov	r2, r3
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	809a      	strh	r2, [r3, #4]
    dcacfg->AthLow = SCI_Frame_Dequeue16u(frame);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f004 fb07 	bl	8005efc <SCI_Frame_Dequeue16u>
 80018ee:	4603      	mov	r3, r0
 80018f0:	461a      	mov	r2, r3
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	80da      	strh	r2, [r3, #6]
    dcacfg->AthHigh = SCI_Frame_Dequeue16u(frame);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f004 fb00 	bl	8005efc <SCI_Frame_Dequeue16u>
 80018fc:	4603      	mov	r3, r0
 80018fe:	461a      	mov	r2, r3
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	811a      	strh	r2, [r3, #8]
    dcacfg->AmplitudeMode = SCI_Frame_Dequeue08u(frame);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f004 faed 	bl	8005ee4 <SCI_Frame_Dequeue08u>
 800190a:	4603      	mov	r3, r0
 800190c:	461a      	mov	r2, r3
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	729a      	strb	r2, [r3, #10]
    dcacfg->DepthNom = SCI_Frame_Dequeue16u(frame);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f004 faf2 	bl	8005efc <SCI_Frame_Dequeue16u>
 8001918:	4603      	mov	r3, r0
 800191a:	461a      	mov	r2, r3
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	819a      	strh	r2, [r3, #12]
    dcacfg->DepthMin = SCI_Frame_Dequeue16u(frame);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f004 faeb 	bl	8005efc <SCI_Frame_Dequeue16u>
 8001926:	4603      	mov	r3, r0
 8001928:	461a      	mov	r2, r3
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	81da      	strh	r2, [r3, #14]
    dcacfg->DepthMax = SCI_Frame_Dequeue16u(frame);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f004 fae4 	bl	8005efc <SCI_Frame_Dequeue16u>
 8001934:	4603      	mov	r3, r0
 8001936:	461a      	mov	r2, r3
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	821a      	strh	r2, [r3, #16]
    dcacfg->Power = SCI_Frame_Dequeue08u(frame);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f004 fad1 	bl	8005ee4 <SCI_Frame_Dequeue08u>
 8001942:	4603      	mov	r3, r0
 8001944:	461a      	mov	r2, r3
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	72da      	strb	r2, [r3, #11]
    dcacfg->GainNom = SCI_Frame_Dequeue08u(frame);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f004 faca 	bl	8005ee4 <SCI_Frame_Dequeue08u>
 8001950:	4603      	mov	r3, r0
 8001952:	461a      	mov	r2, r3
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	749a      	strb	r2, [r3, #18]
    dcacfg->GainMin = SCI_Frame_Dequeue08u(frame);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f004 fac3 	bl	8005ee4 <SCI_Frame_Dequeue08u>
 800195e:	4603      	mov	r3, r0
 8001960:	461a      	mov	r2, r3
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	74da      	strb	r2, [r3, #19]
    dcacfg->GainMax = SCI_Frame_Dequeue08u(frame);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f004 fabc 	bl	8005ee4 <SCI_Frame_Dequeue08u>
 800196c:	4603      	mov	r3, r0
 800196e:	461a      	mov	r2, r3
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	751a      	strb	r2, [r3, #20]
    dcacfg->PowerSavingRatio = SCI_Frame_Dequeue08u(frame);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f004 fab5 	bl	8005ee4 <SCI_Frame_Dequeue08u>
 800197a:	4603      	mov	r3, r0
 800197c:	461a      	mov	r2, r3
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	755a      	strb	r2, [r3, #21]
}
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <Serialize_Cfg_PBA>:

static void Serialize_Cfg_PBA(sci_frame_t * frame, argus_cfg_pba_t const * pba)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
    assert(frame != 0);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d105      	bne.n	80019a8 <Serialize_Cfg_PBA+0x1c>
 800199c:	4b50      	ldr	r3, [pc, #320]	@ (8001ae0 <Serialize_Cfg_PBA+0x154>)
 800199e:	4a51      	ldr	r2, [pc, #324]	@ (8001ae4 <Serialize_Cfg_PBA+0x158>)
 80019a0:	216e      	movs	r1, #110	@ 0x6e
 80019a2:	4851      	ldr	r0, [pc, #324]	@ (8001ae8 <Serialize_Cfg_PBA+0x15c>)
 80019a4:	f005 fd0c 	bl	80073c0 <__assert_func>
    assert(pba != 0);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d105      	bne.n	80019ba <Serialize_Cfg_PBA+0x2e>
 80019ae:	4b4f      	ldr	r3, [pc, #316]	@ (8001aec <Serialize_Cfg_PBA+0x160>)
 80019b0:	4a4c      	ldr	r2, [pc, #304]	@ (8001ae4 <Serialize_Cfg_PBA+0x158>)
 80019b2:	216f      	movs	r1, #111	@ 0x6f
 80019b4:	484c      	ldr	r0, [pc, #304]	@ (8001ae8 <Serialize_Cfg_PBA+0x15c>)
 80019b6:	f005 fd03 	bl	80073c0 <__assert_func>

    SCI_Frame_Queue08u(frame, !!(pba->Enabled & PBA_ENABLE));
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	bf14      	ite	ne
 80019c6:	2301      	movne	r3, #1
 80019c8:	2300      	moveq	r3, #0
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	4619      	mov	r1, r3
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f004 f89a 	bl	8005b08 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, !!(pba->Enabled & PBA_ENABLE_GOLDPX_FALLBACK_MODE));
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	f003 0320 	and.w	r3, r3, #32
 80019dc:	2b00      	cmp	r3, #0
 80019de:	bf14      	ite	ne
 80019e0:	2301      	movne	r3, #1
 80019e2:	2300      	moveq	r3, #0
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	4619      	mov	r1, r3
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f004 f88d 	bl	8005b08 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, !!(pba->Enabled & PBA_ENABLE_GOLDPX_PRIORITY_MODE));
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	f003 0310 	and.w	r3, r3, #16
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	bf14      	ite	ne
 80019fa:	2301      	movne	r3, #1
 80019fc:	2300      	moveq	r3, #0
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	4619      	mov	r1, r3
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f004 f880 	bl	8005b08 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, !!(pba->Enabled & PBA_ENABLE_MIN_DIST_SCOPE));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	bf14      	ite	ne
 8001a14:	2301      	movne	r3, #1
 8001a16:	2300      	moveq	r3, #0
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f004 f873 	bl	8005b08 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, pba->AveragingMode);
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	785b      	ldrb	r3, [r3, #1]
 8001a26:	4619      	mov	r1, r3
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f004 f86d 	bl	8005b08 <SCI_Frame_Queue08u>
    SCI_Frame_Queue32u(frame, pba->PrefilterMask);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	4619      	mov	r1, r3
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f004 f8d3 	bl	8005be0 <SCI_Frame_Queue32u>
    SCI_Frame_Queue16u(frame, pba->AbsoluteAmplitudeExclusion);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	88db      	ldrh	r3, [r3, #6]
 8001a3e:	4619      	mov	r1, r3
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f004 f886 	bl	8005b52 <SCI_Frame_Queue16u>
    SCI_Frame_Queue16u(frame, pba->AbsoluteAmplitudeInclusion);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	889b      	ldrh	r3, [r3, #4]
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f004 f880 	bl	8005b52 <SCI_Frame_Queue16u>
    SCI_Frame_Queue08u(frame, pba->RelativeAmplitudeExclusion);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	78db      	ldrb	r3, [r3, #3]
 8001a56:	4619      	mov	r1, r3
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f004 f855 	bl	8005b08 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, pba->RelativeAmplitudeInclusion);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	789b      	ldrb	r3, [r3, #2]
 8001a62:	4619      	mov	r1, r3
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f004 f84f 	bl	8005b08 <SCI_Frame_Queue08u>
    SCI_Frame_Queue32s(frame, pba->AbsoluteMinimumDistanceThreshold);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	4619      	mov	r1, r3
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f004 f937 	bl	8005ce4 <SCI_Frame_Queue32s>
    SCI_Frame_Queue16u(frame, pba->AbsoluteDistanceScopeExclusion);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	8a1b      	ldrh	r3, [r3, #16]
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f004 f868 	bl	8005b52 <SCI_Frame_Queue16u>
    SCI_Frame_Queue16u(frame, pba->AbsoluteDistanceScopeInclusion);
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	89db      	ldrh	r3, [r3, #14]
 8001a86:	4619      	mov	r1, r3
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f004 f862 	bl	8005b52 <SCI_Frame_Queue16u>
    SCI_Frame_Queue08u(frame, pba->RelativeDistanceScopeExclusion);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	7b5b      	ldrb	r3, [r3, #13]
 8001a92:	4619      	mov	r1, r3
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f004 f837 	bl	8005b08 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, pba->RelativeDistanceScopeInclusion);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	7b1b      	ldrb	r3, [r3, #12]
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f004 f831 	bl	8005b08 <SCI_Frame_Queue08u>
    SCI_Frame_Queue16u(frame, pba->GoldenPixelPriorityAmplitudeExclusion);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	895b      	ldrh	r3, [r3, #10]
 8001aaa:	4619      	mov	r1, r3
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f004 f850 	bl	8005b52 <SCI_Frame_Queue16u>
    SCI_Frame_Queue16u(frame, pba->GoldenPixelPriorityAmplitudeInclusion);
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	891b      	ldrh	r3, [r3, #8]
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f004 f84a 	bl	8005b52 <SCI_Frame_Queue16u>
    SCI_Frame_Queue08u(frame, pba->GoldenPixelSaturationFilterPixelThreshold);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	7c9b      	ldrb	r3, [r3, #18]
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f004 f81f 	bl	8005b08 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, pba->GoldenPixelOutOfSyncAgeThreshold);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	7cdb      	ldrb	r3, [r3, #19]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f004 f819 	bl	8005b08 <SCI_Frame_Queue08u>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	0802b29c 	.word	0x0802b29c
 8001ae4:	0802c308 	.word	0x0802c308
 8001ae8:	0802b2a8 	.word	0x0802b2a8
 8001aec:	0802b2d8 	.word	0x0802b2d8

08001af0 <Deserialize_Cfg_PBA>:
static void Deserialize_Cfg_PBA(sci_frame_t * frame, argus_cfg_pba_t * pba)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
    assert(frame != 0);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d105      	bne.n	8001b0c <Deserialize_Cfg_PBA+0x1c>
 8001b00:	4b62      	ldr	r3, [pc, #392]	@ (8001c8c <Deserialize_Cfg_PBA+0x19c>)
 8001b02:	4a63      	ldr	r2, [pc, #396]	@ (8001c90 <Deserialize_Cfg_PBA+0x1a0>)
 8001b04:	2187      	movs	r1, #135	@ 0x87
 8001b06:	4863      	ldr	r0, [pc, #396]	@ (8001c94 <Deserialize_Cfg_PBA+0x1a4>)
 8001b08:	f005 fc5a 	bl	80073c0 <__assert_func>
    assert(pba != 0);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d105      	bne.n	8001b1e <Deserialize_Cfg_PBA+0x2e>
 8001b12:	4b61      	ldr	r3, [pc, #388]	@ (8001c98 <Deserialize_Cfg_PBA+0x1a8>)
 8001b14:	4a5e      	ldr	r2, [pc, #376]	@ (8001c90 <Deserialize_Cfg_PBA+0x1a0>)
 8001b16:	2188      	movs	r1, #136	@ 0x88
 8001b18:	485e      	ldr	r0, [pc, #376]	@ (8001c94 <Deserialize_Cfg_PBA+0x1a4>)
 8001b1a:	f005 fc51 	bl	80073c0 <__assert_func>

    pba->Enabled = 0;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]
    pba->Enabled |= SCI_Frame_Dequeue08u(frame) ? PBA_ENABLE : 0;
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f004 f9dd 	bl	8005ee4 <SCI_Frame_Dequeue08u>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	bf14      	ite	ne
 8001b30:	2301      	movne	r3, #1
 8001b32:	2300      	moveq	r3, #0
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	4619      	mov	r1, r3
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	b25a      	sxtb	r2, r3
 8001b3e:	b24b      	sxtb	r3, r1
 8001b40:	4313      	orrs	r3, r2
 8001b42:	b25b      	sxtb	r3, r3
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	701a      	strb	r2, [r3, #0]
    pba->Enabled |= SCI_Frame_Dequeue08u(frame) ? PBA_ENABLE_GOLDPX_FALLBACK_MODE : 0;
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f004 f9ca 	bl	8005ee4 <SCI_Frame_Dequeue08u>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <Deserialize_Cfg_PBA+0x6a>
 8001b56:	2120      	movs	r1, #32
 8001b58:	e000      	b.n	8001b5c <Deserialize_Cfg_PBA+0x6c>
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	b25a      	sxtb	r2, r3
 8001b62:	b24b      	sxtb	r3, r1
 8001b64:	4313      	orrs	r3, r2
 8001b66:	b25b      	sxtb	r3, r3
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	701a      	strb	r2, [r3, #0]
    pba->Enabled |= SCI_Frame_Dequeue08u(frame) ? PBA_ENABLE_GOLDPX_PRIORITY_MODE : 0;
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f004 f9b8 	bl	8005ee4 <SCI_Frame_Dequeue08u>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <Deserialize_Cfg_PBA+0x8e>
 8001b7a:	2110      	movs	r1, #16
 8001b7c:	e000      	b.n	8001b80 <Deserialize_Cfg_PBA+0x90>
 8001b7e:	2100      	movs	r1, #0
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	b25a      	sxtb	r2, r3
 8001b86:	b24b      	sxtb	r3, r1
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	b25b      	sxtb	r3, r3
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	701a      	strb	r2, [r3, #0]
    pba->Enabled |= SCI_Frame_Dequeue08u(frame) ? PBA_ENABLE_MIN_DIST_SCOPE : 0;
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f004 f9a6 	bl	8005ee4 <SCI_Frame_Dequeue08u>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <Deserialize_Cfg_PBA+0xb2>
 8001b9e:	2140      	movs	r1, #64	@ 0x40
 8001ba0:	e000      	b.n	8001ba4 <Deserialize_Cfg_PBA+0xb4>
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	b25a      	sxtb	r2, r3
 8001baa:	b24b      	sxtb	r3, r1
 8001bac:	4313      	orrs	r3, r2
 8001bae:	b25b      	sxtb	r3, r3
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	701a      	strb	r2, [r3, #0]
    pba->AveragingMode = SCI_Frame_Dequeue08u(frame);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f004 f994 	bl	8005ee4 <SCI_Frame_Dequeue08u>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	705a      	strb	r2, [r3, #1]
    pba->PrefilterMask = SCI_Frame_Dequeue32u(frame);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f004 f9b1 	bl	8005f2c <SCI_Frame_Dequeue32u>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	619a      	str	r2, [r3, #24]
    pba->AbsoluteAmplitudeExclusion = SCI_Frame_Dequeue16u(frame);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f004 f993 	bl	8005efc <SCI_Frame_Dequeue16u>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	461a      	mov	r2, r3
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	80da      	strh	r2, [r3, #6]
    pba->AbsoluteAmplitudeInclusion = SCI_Frame_Dequeue16u(frame);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f004 f98c 	bl	8005efc <SCI_Frame_Dequeue16u>
 8001be4:	4603      	mov	r3, r0
 8001be6:	461a      	mov	r2, r3
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	809a      	strh	r2, [r3, #4]
    pba->RelativeAmplitudeExclusion = SCI_Frame_Dequeue08u(frame);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f004 f979 	bl	8005ee4 <SCI_Frame_Dequeue08u>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	70da      	strb	r2, [r3, #3]
    pba->RelativeAmplitudeInclusion = SCI_Frame_Dequeue08u(frame);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f004 f972 	bl	8005ee4 <SCI_Frame_Dequeue08u>
 8001c00:	4603      	mov	r3, r0
 8001c02:	461a      	mov	r2, r3
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	709a      	strb	r2, [r3, #2]
    pba->AbsoluteMinimumDistanceThreshold = SCI_Frame_Dequeue32s(frame);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f004 f944 	bl	8005e96 <SCI_Frame_Dequeue32s>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	615a      	str	r2, [r3, #20]
    pba->AbsoluteDistanceScopeExclusion = SCI_Frame_Dequeue16u(frame);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f004 f971 	bl	8005efc <SCI_Frame_Dequeue16u>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	821a      	strh	r2, [r3, #16]
    pba->AbsoluteDistanceScopeInclusion = SCI_Frame_Dequeue16u(frame);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f004 f96a 	bl	8005efc <SCI_Frame_Dequeue16u>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	81da      	strh	r2, [r3, #14]
    pba->RelativeDistanceScopeExclusion = SCI_Frame_Dequeue08u(frame);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f004 f957 	bl	8005ee4 <SCI_Frame_Dequeue08u>
 8001c36:	4603      	mov	r3, r0
 8001c38:	461a      	mov	r2, r3
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	735a      	strb	r2, [r3, #13]
    pba->RelativeDistanceScopeInclusion = SCI_Frame_Dequeue08u(frame);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f004 f950 	bl	8005ee4 <SCI_Frame_Dequeue08u>
 8001c44:	4603      	mov	r3, r0
 8001c46:	461a      	mov	r2, r3
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	731a      	strb	r2, [r3, #12]
    pba->GoldenPixelPriorityAmplitudeExclusion = SCI_Frame_Dequeue16u(frame);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f004 f955 	bl	8005efc <SCI_Frame_Dequeue16u>
 8001c52:	4603      	mov	r3, r0
 8001c54:	461a      	mov	r2, r3
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	815a      	strh	r2, [r3, #10]
    pba->GoldenPixelPriorityAmplitudeInclusion = SCI_Frame_Dequeue16u(frame);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f004 f94e 	bl	8005efc <SCI_Frame_Dequeue16u>
 8001c60:	4603      	mov	r3, r0
 8001c62:	461a      	mov	r2, r3
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	811a      	strh	r2, [r3, #8]
    pba->GoldenPixelSaturationFilterPixelThreshold = SCI_Frame_Dequeue08u(frame);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f004 f93b 	bl	8005ee4 <SCI_Frame_Dequeue08u>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	461a      	mov	r2, r3
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	749a      	strb	r2, [r3, #18]
    pba->GoldenPixelOutOfSyncAgeThreshold = SCI_Frame_Dequeue08u(frame);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f004 f934 	bl	8005ee4 <SCI_Frame_Dequeue08u>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	461a      	mov	r2, r3
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	74da      	strb	r2, [r3, #19]
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	0802b29c 	.word	0x0802b29c
 8001c90:	0802c31c 	.word	0x0802c31c
 8001c94:	0802b2a8 	.word	0x0802b2a8
 8001c98:	0802b2d8 	.word	0x0802b2d8

08001c9c <RxCmd_CfgMeasurementMode>:
/*******************************************************************************
 * Command Functions
 ******************************************************************************/

static status_t RxCmd_CfgMeasurementMode(sci_device_t deviceID, sci_frame_t * frame)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	6039      	str	r1, [r7, #0]
 8001ca6:	71fb      	strb	r3, [r7, #7]
    if (SCI_Frame_BytesToRead(frame) > 1)
 8001ca8:	6838      	ldr	r0, [r7, #0]
 8001caa:	f003 fe6b 	bl	8005984 <SCI_Frame_BytesToRead>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d916      	bls.n	8001ce2 <RxCmd_CfgMeasurementMode+0x46>
    {
        /* Master sending data... */
        explorer_t * explorer = ExplorerApp_GetExplorerPtr(deviceID);
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f002 f930 	bl	8003f1c <ExplorerApp_GetExplorerPtr>
 8001cbc:	60f8      	str	r0, [r7, #12]
        if (explorer == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d102      	bne.n	8001cca <RxCmd_CfgMeasurementMode+0x2e>
 8001cc4:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8001cc8:	e012      	b.n	8001cf0 <RxCmd_CfgMeasurementMode+0x54>

        argus_mode_t mode = SCI_Frame_Dequeue08s(frame);
 8001cca:	6838      	ldr	r0, [r7, #0]
 8001ccc:	f004 f8be 	bl	8005e4c <SCI_Frame_Dequeue08s>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	72fb      	strb	r3, [r7, #11]
        return ExplorerApp_SetDeviceMeasurementMode(explorer, mode);
 8001cd4:	7afb      	ldrb	r3, [r7, #11]
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f001 ffbb 	bl	8003c54 <ExplorerApp_SetDeviceMeasurementMode>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	e006      	b.n	8001cf0 <RxCmd_CfgMeasurementMode+0x54>
    }
    else
    {
        /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CONFIGURATION_MEASUREMENT_MODE, 0, 0);
 8001ce2:	79f8      	ldrb	r0, [r7, #7]
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2142      	movs	r1, #66	@ 0x42
 8001cea:	f002 fe21 	bl	8004930 <SCI_SendCommand>
 8001cee:	4603      	mov	r3, r0
    }
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <TxCmd_CfgMeasurementMode>:
static status_t TxCmd_CfgMeasurementMode(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	4603      	mov	r3, r0
 8001d06:	73fb      	strb	r3, [r7, #15]
    (void)param;
    (void)data;

    argus_mode_t mode;
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f002 f8e2 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 8001d10:	61f8      	str	r0, [r7, #28]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d102      	bne.n	8001d1e <TxCmd_CfgMeasurementMode+0x26>
 8001d18:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8001d1c:	e00c      	b.n	8001d38 <TxCmd_CfgMeasurementMode+0x40>
    status_t status = Argus_GetMeasurementMode(argus, &mode);
 8001d1e:	f107 0317 	add.w	r3, r7, #23
 8001d22:	4619      	mov	r1, r3
 8001d24:	69f8      	ldr	r0, [r7, #28]
 8001d26:	f012 f9af 	bl	8014088 <Argus_GetMeasurementMode>
 8001d2a:	61b8      	str	r0, [r7, #24]
    SCI_Frame_Queue08u(frame, mode);
 8001d2c:	7dfb      	ldrb	r3, [r7, #23]
 8001d2e:	4619      	mov	r1, r3
 8001d30:	68b8      	ldr	r0, [r7, #8]
 8001d32:	f003 fee9 	bl	8005b08 <SCI_Frame_Queue08u>

    return status;
 8001d36:	69bb      	ldr	r3, [r7, #24]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3720      	adds	r7, #32
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <RxCmd_CfgDataOutputMode>:

static status_t RxCmd_CfgDataOutputMode(sci_device_t deviceID, sci_frame_t * frame)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	6039      	str	r1, [r7, #0]
 8001d4a:	71fb      	strb	r3, [r7, #7]
    if (SCI_Frame_BytesToRead(frame) > 1)
 8001d4c:	6838      	ldr	r0, [r7, #0]
 8001d4e:	f003 fe19 	bl	8005984 <SCI_Frame_BytesToRead>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d91d      	bls.n	8001d94 <RxCmd_CfgDataOutputMode+0x54>
    {
        /* Master sending data... */
        explorer_t * explorer = ExplorerApp_GetExplorerPtr(deviceID);
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f002 f8de 	bl	8003f1c <ExplorerApp_GetExplorerPtr>
 8001d60:	6178      	str	r0, [r7, #20]
        if (explorer == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d102      	bne.n	8001d6e <RxCmd_CfgDataOutputMode+0x2e>
 8001d68:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8001d6c:	e019      	b.n	8001da2 <RxCmd_CfgDataOutputMode+0x62>

        explorer_cfg_t cfg;
        ExplorerApp_GetConfiguration(explorer, &cfg);
 8001d6e:	f107 030c 	add.w	r3, r7, #12
 8001d72:	4619      	mov	r1, r3
 8001d74:	6978      	ldr	r0, [r7, #20]
 8001d76:	f001 fe7f 	bl	8003a78 <ExplorerApp_GetConfiguration>
        cfg.DataOutputMode = SCI_Frame_Dequeue08u(frame);
 8001d7a:	6838      	ldr	r0, [r7, #0]
 8001d7c:	f004 f8b2 	bl	8005ee4 <SCI_Frame_Dequeue08u>
 8001d80:	4603      	mov	r3, r0
 8001d82:	747b      	strb	r3, [r7, #17]
        return ExplorerApp_SetConfiguration(explorer, &cfg);
 8001d84:	f107 030c 	add.w	r3, r7, #12
 8001d88:	4619      	mov	r1, r3
 8001d8a:	6978      	ldr	r0, [r7, #20]
 8001d8c:	f001 feaa 	bl	8003ae4 <ExplorerApp_SetConfiguration>
 8001d90:	4603      	mov	r3, r0
 8001d92:	e006      	b.n	8001da2 <RxCmd_CfgDataOutputMode+0x62>
    }
    else
    {
        /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CONFIGURATION_DATA_OUTPUT_MODE, 0, 0);
 8001d94:	79f8      	ldrb	r0, [r7, #7]
 8001d96:	2300      	movs	r3, #0
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2141      	movs	r1, #65	@ 0x41
 8001d9c:	f002 fdc8 	bl	8004930 <SCI_SendCommand>
 8001da0:	4603      	mov	r3, r0
    }
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <TxCmd_CfgDataOutputMode>:
static status_t TxCmd_CfgDataOutputMode(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b088      	sub	sp, #32
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
 8001db4:	603b      	str	r3, [r7, #0]
 8001db6:	4603      	mov	r3, r0
 8001db8:	73fb      	strb	r3, [r7, #15]
    (void)param;
    (void)data;

    explorer_t * explorer = ExplorerApp_GetExplorerPtr(deviceID);
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f002 f8ad 	bl	8003f1c <ExplorerApp_GetExplorerPtr>
 8001dc2:	61f8      	str	r0, [r7, #28]
    if (explorer == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d102      	bne.n	8001dd0 <TxCmd_CfgDataOutputMode+0x26>
 8001dca:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8001dce:	e00c      	b.n	8001dea <TxCmd_CfgDataOutputMode+0x40>

    explorer_cfg_t cfg;
    ExplorerApp_GetConfiguration(explorer, &cfg);
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	69f8      	ldr	r0, [r7, #28]
 8001dd8:	f001 fe4e 	bl	8003a78 <ExplorerApp_GetConfiguration>
    SCI_Frame_Queue08u(frame, cfg.DataOutputMode);
 8001ddc:	7e7b      	ldrb	r3, [r7, #25]
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	4619      	mov	r1, r3
 8001de2:	68b8      	ldr	r0, [r7, #8]
 8001de4:	f003 fe90 	bl	8005b08 <SCI_Frame_Queue08u>
    return STATUS_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3720      	adds	r7, #32
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <RxCmd_CfgFrameTime>:

static status_t RxCmd_CfgFrameTime(sci_device_t deviceID, sci_frame_t * frame)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b086      	sub	sp, #24
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	6039      	str	r1, [r7, #0]
 8001dfc:	71fb      	strb	r3, [r7, #7]
    if (SCI_Frame_BytesToRead(frame) > 1)
 8001dfe:	6838      	ldr	r0, [r7, #0]
 8001e00:	f003 fdc0 	bl	8005984 <SCI_Frame_BytesToRead>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d920      	bls.n	8001e4c <RxCmd_CfgFrameTime+0x5a>
    {
        /* Master sending data... */
        uint32_t frameTime = SCI_Frame_Dequeue32u(frame);
 8001e0a:	6838      	ldr	r0, [r7, #0]
 8001e0c:	f004 f88e 	bl	8005f2c <SCI_Frame_Dequeue32u>
 8001e10:	6178      	str	r0, [r7, #20]
        argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f002 f85d 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 8001e1a:	6138      	str	r0, [r7, #16]
        if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d102      	bne.n	8001e28 <RxCmd_CfgFrameTime+0x36>
 8001e22:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8001e26:	e018      	b.n	8001e5a <RxCmd_CfgFrameTime+0x68>
        bool resume = ExplorerApp_SuspendTimerMeasurement(argus);
 8001e28:	6938      	ldr	r0, [r7, #16]
 8001e2a:	f002 fab3 	bl	8004394 <ExplorerApp_SuspendTimerMeasurement>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	73fb      	strb	r3, [r7, #15]
        status_t status = Argus_SetConfigurationFrameTime(argus, frameTime);
 8001e32:	6979      	ldr	r1, [r7, #20]
 8001e34:	6938      	ldr	r0, [r7, #16]
 8001e36:	f012 f94b 	bl	80140d0 <Argus_SetConfigurationFrameTime>
 8001e3a:	60b8      	str	r0, [r7, #8]
        if (resume) ExplorerApp_StartTimerMeasurement(argus);
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d002      	beq.n	8001e48 <RxCmd_CfgFrameTime+0x56>
 8001e42:	6938      	ldr	r0, [r7, #16]
 8001e44:	f002 fad2 	bl	80043ec <ExplorerApp_StartTimerMeasurement>
        return status;
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	e006      	b.n	8001e5a <RxCmd_CfgFrameTime+0x68>
    }
    else
    {
        /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CONFIGURATION_FRAME_TIME, 0, 0);
 8001e4c:	79f8      	ldrb	r0, [r7, #7]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	2200      	movs	r2, #0
 8001e52:	2143      	movs	r1, #67	@ 0x43
 8001e54:	f002 fd6c 	bl	8004930 <SCI_SendCommand>
 8001e58:	4603      	mov	r3, r0
    }
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <TxCmd_CfgFrameTime>:
static status_t TxCmd_CfgFrameTime(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b088      	sub	sp, #32
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
 8001e6c:	603b      	str	r3, [r7, #0]
 8001e6e:	4603      	mov	r3, r0
 8001e70:	73fb      	strb	r3, [r7, #15]
    (void) param;
    (void) data;

    uint32_t frameTime = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f002 f82b 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 8001e7e:	61f8      	str	r0, [r7, #28]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d102      	bne.n	8001e8c <TxCmd_CfgFrameTime+0x2a>
 8001e86:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8001e8a:	e00c      	b.n	8001ea6 <TxCmd_CfgFrameTime+0x44>
    status_t status = Argus_GetConfigurationFrameTime(argus, &frameTime);
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	4619      	mov	r1, r3
 8001e92:	69f8      	ldr	r0, [r7, #28]
 8001e94:	f012 f964 	bl	8014160 <Argus_GetConfigurationFrameTime>
 8001e98:	61b8      	str	r0, [r7, #24]
    SCI_Frame_Queue32u(frame, frameTime);
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	68b8      	ldr	r0, [r7, #8]
 8001ea0:	f003 fe9e 	bl	8005be0 <SCI_Frame_Queue32u>
    return status;
 8001ea4:	69bb      	ldr	r3, [r7, #24]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3720      	adds	r7, #32
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <RxCmd_CfgSmartPowerSaveEnabled>:

static status_t RxCmd_CfgSmartPowerSaveEnabled(sci_device_t deviceID, sci_frame_t * frame)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b086      	sub	sp, #24
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	6039      	str	r1, [r7, #0]
 8001eb8:	71fb      	strb	r3, [r7, #7]
    if (SCI_Frame_BytesToRead(frame) > 1)
 8001eba:	6838      	ldr	r0, [r7, #0]
 8001ebc:	f003 fd62 	bl	8005984 <SCI_Frame_BytesToRead>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d926      	bls.n	8001f14 <RxCmd_CfgSmartPowerSaveEnabled+0x66>
    {
        /* Master sending data... */
        bool enabled = SCI_Frame_Dequeue08u(frame) != 0;
 8001ec6:	6838      	ldr	r0, [r7, #0]
 8001ec8:	f004 f80c 	bl	8005ee4 <SCI_Frame_Dequeue08u>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	bf14      	ite	ne
 8001ed2:	2301      	movne	r3, #1
 8001ed4:	2300      	moveq	r3, #0
 8001ed6:	75fb      	strb	r3, [r7, #23]
        argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f001 fffa 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 8001ee0:	6138      	str	r0, [r7, #16]
        if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d102      	bne.n	8001eee <RxCmd_CfgSmartPowerSaveEnabled+0x40>
 8001ee8:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8001eec:	e019      	b.n	8001f22 <RxCmd_CfgSmartPowerSaveEnabled+0x74>
        bool resume = ExplorerApp_SuspendTimerMeasurement(argus);
 8001eee:	6938      	ldr	r0, [r7, #16]
 8001ef0:	f002 fa50 	bl	8004394 <ExplorerApp_SuspendTimerMeasurement>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	73fb      	strb	r3, [r7, #15]
        status_t status = Argus_SetConfigurationSmartPowerSaveEnabled(argus, enabled);
 8001ef8:	7dfb      	ldrb	r3, [r7, #23]
 8001efa:	4619      	mov	r1, r3
 8001efc:	6938      	ldr	r0, [r7, #16]
 8001efe:	f012 faab 	bl	8014458 <Argus_SetConfigurationSmartPowerSaveEnabled>
 8001f02:	60b8      	str	r0, [r7, #8]
        if (resume) ExplorerApp_StartTimerMeasurement(argus);
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d002      	beq.n	8001f10 <RxCmd_CfgSmartPowerSaveEnabled+0x62>
 8001f0a:	6938      	ldr	r0, [r7, #16]
 8001f0c:	f002 fa6e 	bl	80043ec <ExplorerApp_StartTimerMeasurement>
        return status;
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	e006      	b.n	8001f22 <RxCmd_CfgSmartPowerSaveEnabled+0x74>
    }
    else
    {
        /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CONFIGURATION_SMART_POWER_SAVE, 0, 0);
 8001f14:	79f8      	ldrb	r0, [r7, #7]
 8001f16:	2300      	movs	r3, #0
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2145      	movs	r1, #69	@ 0x45
 8001f1c:	f002 fd08 	bl	8004930 <SCI_SendCommand>
 8001f20:	4603      	mov	r3, r0
    }
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <TxCmd_CfgSmartPowerSaveEnabled>:
static status_t TxCmd_CfgSmartPowerSaveEnabled(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b088      	sub	sp, #32
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
 8001f34:	603b      	str	r3, [r7, #0]
 8001f36:	4603      	mov	r3, r0
 8001f38:	73fb      	strb	r3, [r7, #15]
    (void) data;
    (void) param;

    bool enabled = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	75fb      	strb	r3, [r7, #23]
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f001 ffc7 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 8001f46:	61f8      	str	r0, [r7, #28]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d102      	bne.n	8001f54 <TxCmd_CfgSmartPowerSaveEnabled+0x2a>
 8001f4e:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8001f52:	e00c      	b.n	8001f6e <TxCmd_CfgSmartPowerSaveEnabled+0x44>
    status_t status = Argus_GetConfigurationSmartPowerSaveEnabled(argus, &enabled);
 8001f54:	f107 0317 	add.w	r3, r7, #23
 8001f58:	4619      	mov	r1, r3
 8001f5a:	69f8      	ldr	r0, [r7, #28]
 8001f5c:	f012 fac6 	bl	80144ec <Argus_GetConfigurationSmartPowerSaveEnabled>
 8001f60:	61b8      	str	r0, [r7, #24]
    SCI_Frame_Queue08u(frame, enabled);
 8001f62:	7dfb      	ldrb	r3, [r7, #23]
 8001f64:	4619      	mov	r1, r3
 8001f66:	68b8      	ldr	r0, [r7, #8]
 8001f68:	f003 fdce 	bl	8005b08 <SCI_Frame_Queue08u>

    return status;
 8001f6c:	69bb      	ldr	r3, [r7, #24]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3720      	adds	r7, #32
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <RxCmd_CfgDualFrequencyMode>:

static status_t RxCmd_CfgDualFrequencyMode(sci_device_t deviceID, sci_frame_t * frame)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b086      	sub	sp, #24
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	6039      	str	r1, [r7, #0]
 8001f80:	71fb      	strb	r3, [r7, #7]
    if (SCI_Frame_BytesToRead(frame) > 1)
 8001f82:	6838      	ldr	r0, [r7, #0]
 8001f84:	f003 fcfe 	bl	8005984 <SCI_Frame_BytesToRead>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d925      	bls.n	8001fda <RxCmd_CfgDualFrequencyMode+0x64>
    {
        /* Master sending data... */
        argus_dfm_mode_t dfm = SCI_Frame_Dequeue08u(frame);
 8001f8e:	6838      	ldr	r0, [r7, #0]
 8001f90:	f003 ffa8 	bl	8005ee4 <SCI_Frame_Dequeue08u>
 8001f94:	4603      	mov	r3, r0
 8001f96:	75fb      	strb	r3, [r7, #23]
        argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f001 ff9a 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 8001fa0:	6138      	str	r0, [r7, #16]
        if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d102      	bne.n	8001fae <RxCmd_CfgDualFrequencyMode+0x38>
 8001fa8:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8001fac:	e01c      	b.n	8001fe8 <RxCmd_CfgDualFrequencyMode+0x72>
        bool resume = ExplorerApp_SuspendTimerMeasurement(argus);
 8001fae:	6938      	ldr	r0, [r7, #16]
 8001fb0:	f002 f9f0 	bl	8004394 <ExplorerApp_SuspendTimerMeasurement>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	73fb      	strb	r3, [r7, #15]
        status_t status = Argus_SetConfigurationDFMMode(argus, dfm);
 8001fb8:	7dfb      	ldrb	r3, [r7, #23]
 8001fba:	4619      	mov	r1, r3
 8001fbc:	6938      	ldr	r0, [r7, #16]
 8001fbe:	f012 f8f5 	bl	80141ac <Argus_SetConfigurationDFMMode>
 8001fc2:	60b8      	str	r0, [r7, #8]
        ExplorerApp_DisplayUnambiguousRange(argus);
 8001fc4:	6938      	ldr	r0, [r7, #16]
 8001fc6:	f002 fa8f 	bl	80044e8 <ExplorerApp_DisplayUnambiguousRange>
        if (resume) ExplorerApp_StartTimerMeasurement(argus);
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d002      	beq.n	8001fd6 <RxCmd_CfgDualFrequencyMode+0x60>
 8001fd0:	6938      	ldr	r0, [r7, #16]
 8001fd2:	f002 fa0b 	bl	80043ec <ExplorerApp_StartTimerMeasurement>
        return status;
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	e006      	b.n	8001fe8 <RxCmd_CfgDualFrequencyMode+0x72>
    }
    else
    {
        /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CONFIGURATION_DUAL_FREQUENCY_MODE, 0, 0);
 8001fda:	79f8      	ldrb	r0, [r7, #7]
 8001fdc:	2300      	movs	r3, #0
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2144      	movs	r1, #68	@ 0x44
 8001fe2:	f002 fca5 	bl	8004930 <SCI_SendCommand>
 8001fe6:	4603      	mov	r3, r0
    }
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <TxCmd_CfgDualFrequencyMode>:
static status_t TxCmd_CfgDualFrequencyMode(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b088      	sub	sp, #32
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	73fb      	strb	r3, [r7, #15]
    (void) data;
    (void) param;

    argus_dfm_mode_t dfm;
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8002000:	7bfb      	ldrb	r3, [r7, #15]
 8002002:	4618      	mov	r0, r3
 8002004:	f001 ff66 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 8002008:	61f8      	str	r0, [r7, #28]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d102      	bne.n	8002016 <TxCmd_CfgDualFrequencyMode+0x26>
 8002010:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8002014:	e00c      	b.n	8002030 <TxCmd_CfgDualFrequencyMode+0x40>
    status_t status = Argus_GetConfigurationDFMMode(argus, &dfm);
 8002016:	f107 0317 	add.w	r3, r7, #23
 800201a:	4619      	mov	r1, r3
 800201c:	69f8      	ldr	r0, [r7, #28]
 800201e:	f012 f90f 	bl	8014240 <Argus_GetConfigurationDFMMode>
 8002022:	61b8      	str	r0, [r7, #24]
    SCI_Frame_Queue08u(frame, dfm);
 8002024:	7dfb      	ldrb	r3, [r7, #23]
 8002026:	4619      	mov	r1, r3
 8002028:	68b8      	ldr	r0, [r7, #8]
 800202a:	f003 fd6d 	bl	8005b08 <SCI_Frame_Queue08u>

    return status;
 800202e:	69bb      	ldr	r3, [r7, #24]
}
 8002030:	4618      	mov	r0, r3
 8002032:	3720      	adds	r7, #32
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <RxCmd_CfgShotNoiseMonitor>:

static status_t RxCmd_CfgShotNoiseMonitor(sci_device_t deviceID, sci_frame_t * frame)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	6039      	str	r1, [r7, #0]
 8002042:	71fb      	strb	r3, [r7, #7]
    if (SCI_Frame_BytesToRead(frame) > 1)
 8002044:	6838      	ldr	r0, [r7, #0]
 8002046:	f003 fc9d 	bl	8005984 <SCI_Frame_BytesToRead>
 800204a:	4603      	mov	r3, r0
 800204c:	2b01      	cmp	r3, #1
 800204e:	d922      	bls.n	8002096 <RxCmd_CfgShotNoiseMonitor+0x5e>
    {
        /* Master sending data... */
        argus_snm_mode_t snm = SCI_Frame_Dequeue08u(frame);
 8002050:	6838      	ldr	r0, [r7, #0]
 8002052:	f003 ff47 	bl	8005ee4 <SCI_Frame_Dequeue08u>
 8002056:	4603      	mov	r3, r0
 8002058:	75fb      	strb	r3, [r7, #23]
        argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	4618      	mov	r0, r3
 800205e:	f001 ff39 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 8002062:	6138      	str	r0, [r7, #16]
        if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d102      	bne.n	8002070 <RxCmd_CfgShotNoiseMonitor+0x38>
 800206a:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 800206e:	e019      	b.n	80020a4 <RxCmd_CfgShotNoiseMonitor+0x6c>
        bool resume = ExplorerApp_SuspendTimerMeasurement(argus);
 8002070:	6938      	ldr	r0, [r7, #16]
 8002072:	f002 f98f 	bl	8004394 <ExplorerApp_SuspendTimerMeasurement>
 8002076:	4603      	mov	r3, r0
 8002078:	73fb      	strb	r3, [r7, #15]
        status_t status = Argus_SetConfigurationShotNoiseMonitorMode(argus, snm);
 800207a:	7dfb      	ldrb	r3, [r7, #23]
 800207c:	4619      	mov	r1, r3
 800207e:	6938      	ldr	r0, [r7, #16]
 8002080:	f012 f906 	bl	8014290 <Argus_SetConfigurationShotNoiseMonitorMode>
 8002084:	60b8      	str	r0, [r7, #8]
        if (resume) ExplorerApp_StartTimerMeasurement(argus);
 8002086:	7bfb      	ldrb	r3, [r7, #15]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d002      	beq.n	8002092 <RxCmd_CfgShotNoiseMonitor+0x5a>
 800208c:	6938      	ldr	r0, [r7, #16]
 800208e:	f002 f9ad 	bl	80043ec <ExplorerApp_StartTimerMeasurement>
        return status;
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	e006      	b.n	80020a4 <RxCmd_CfgShotNoiseMonitor+0x6c>
    }
    else
    {
        /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CONFIGURATION_SHOT_NOISE_MONITOR_MODE, 0, 0);
 8002096:	79f8      	ldrb	r0, [r7, #7]
 8002098:	2300      	movs	r3, #0
 800209a:	2200      	movs	r2, #0
 800209c:	2146      	movs	r1, #70	@ 0x46
 800209e:	f002 fc47 	bl	8004930 <SCI_SendCommand>
 80020a2:	4603      	mov	r3, r0
    }
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <TxCmd_CfgShotNoiseMonitor>:
static status_t TxCmd_CfgShotNoiseMonitor(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b088      	sub	sp, #32
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	603b      	str	r3, [r7, #0]
 80020b8:	4603      	mov	r3, r0
 80020ba:	73fb      	strb	r3, [r7, #15]
    (void) data;
    (void) param;

    argus_snm_mode_t snm;
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	4618      	mov	r0, r3
 80020c0:	f001 ff08 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 80020c4:	61f8      	str	r0, [r7, #28]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d102      	bne.n	80020d2 <TxCmd_CfgShotNoiseMonitor+0x26>
 80020cc:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 80020d0:	e00c      	b.n	80020ec <TxCmd_CfgShotNoiseMonitor+0x40>
    status_t status = Argus_GetConfigurationShotNoiseMonitorMode(argus, &snm);
 80020d2:	f107 0317 	add.w	r3, r7, #23
 80020d6:	4619      	mov	r1, r3
 80020d8:	69f8      	ldr	r0, [r7, #28]
 80020da:	f012 f923 	bl	8014324 <Argus_GetConfigurationShotNoiseMonitorMode>
 80020de:	61b8      	str	r0, [r7, #24]
    SCI_Frame_Queue08u(frame, snm);
 80020e0:	7dfb      	ldrb	r3, [r7, #23]
 80020e2:	4619      	mov	r1, r3
 80020e4:	68b8      	ldr	r0, [r7, #8]
 80020e6:	f003 fd0f 	bl	8005b08 <SCI_Frame_Queue08u>

    return status;
 80020ea:	69bb      	ldr	r3, [r7, #24]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3720      	adds	r7, #32
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <RxCmd_CfgXtalkMonitor>:

static status_t RxCmd_CfgXtalkMonitor(sci_device_t deviceID, sci_frame_t * frame)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	6039      	str	r1, [r7, #0]
 80020fe:	71fb      	strb	r3, [r7, #7]
    if (SCI_Frame_BytesToRead(frame) > 1)
 8002100:	6838      	ldr	r0, [r7, #0]
 8002102:	f003 fc3f 	bl	8005984 <SCI_Frame_BytesToRead>
 8002106:	4603      	mov	r3, r0
 8002108:	2b01      	cmp	r3, #1
 800210a:	d926      	bls.n	800215a <RxCmd_CfgXtalkMonitor+0x66>
    {
        /* Master sending data... */
        bool xtm = SCI_Frame_Dequeue08u(frame);
 800210c:	6838      	ldr	r0, [r7, #0]
 800210e:	f003 fee9 	bl	8005ee4 <SCI_Frame_Dequeue08u>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	bf14      	ite	ne
 8002118:	2301      	movne	r3, #1
 800211a:	2300      	moveq	r3, #0
 800211c:	75fb      	strb	r3, [r7, #23]
        argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	4618      	mov	r0, r3
 8002122:	f001 fed7 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 8002126:	6138      	str	r0, [r7, #16]
        if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d102      	bne.n	8002134 <RxCmd_CfgXtalkMonitor+0x40>
 800212e:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8002132:	e019      	b.n	8002168 <RxCmd_CfgXtalkMonitor+0x74>
        bool resume = ExplorerApp_SuspendTimerMeasurement(argus);
 8002134:	6938      	ldr	r0, [r7, #16]
 8002136:	f002 f92d 	bl	8004394 <ExplorerApp_SuspendTimerMeasurement>
 800213a:	4603      	mov	r3, r0
 800213c:	73fb      	strb	r3, [r7, #15]
        status_t status = Argus_SetConfigurationCrosstalkMonitorMode(argus, xtm);
 800213e:	7dfb      	ldrb	r3, [r7, #23]
 8002140:	4619      	mov	r1, r3
 8002142:	6938      	ldr	r0, [r7, #16]
 8002144:	f012 f916 	bl	8014374 <Argus_SetConfigurationCrosstalkMonitorMode>
 8002148:	60b8      	str	r0, [r7, #8]
        if (resume) ExplorerApp_StartTimerMeasurement(argus);
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d002      	beq.n	8002156 <RxCmd_CfgXtalkMonitor+0x62>
 8002150:	6938      	ldr	r0, [r7, #16]
 8002152:	f002 f94b 	bl	80043ec <ExplorerApp_StartTimerMeasurement>
        return status;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	e006      	b.n	8002168 <RxCmd_CfgXtalkMonitor+0x74>
    }
    else
    {
        /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CONFIGURATION_XTALK_MONITOR_MODE, 0, 0);
 800215a:	79f8      	ldrb	r0, [r7, #7]
 800215c:	2300      	movs	r3, #0
 800215e:	2200      	movs	r2, #0
 8002160:	2147      	movs	r1, #71	@ 0x47
 8002162:	f002 fbe5 	bl	8004930 <SCI_SendCommand>
 8002166:	4603      	mov	r3, r0
    }
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <TxCmd_CfgXtalkMonitor>:
static status_t TxCmd_CfgXtalkMonitor(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b088      	sub	sp, #32
 8002174:	af00      	add	r7, sp, #0
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	603b      	str	r3, [r7, #0]
 800217c:	4603      	mov	r3, r0
 800217e:	73fb      	strb	r3, [r7, #15]
    (void) data;
    (void) param;

    bool xtm;
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8002180:	7bfb      	ldrb	r3, [r7, #15]
 8002182:	4618      	mov	r0, r3
 8002184:	f001 fea6 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 8002188:	61f8      	str	r0, [r7, #28]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d102      	bne.n	8002196 <TxCmd_CfgXtalkMonitor+0x26>
 8002190:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8002194:	e00c      	b.n	80021b0 <TxCmd_CfgXtalkMonitor+0x40>
    status_t status = Argus_GetConfigurationCrosstalkMonitorMode(argus, &xtm);
 8002196:	f107 0317 	add.w	r3, r7, #23
 800219a:	4619      	mov	r1, r3
 800219c:	69f8      	ldr	r0, [r7, #28]
 800219e:	f012 f933 	bl	8014408 <Argus_GetConfigurationCrosstalkMonitorMode>
 80021a2:	61b8      	str	r0, [r7, #24]
    SCI_Frame_Queue08u(frame, xtm);
 80021a4:	7dfb      	ldrb	r3, [r7, #23]
 80021a6:	4619      	mov	r1, r3
 80021a8:	68b8      	ldr	r0, [r7, #8]
 80021aa:	f003 fcad 	bl	8005b08 <SCI_Frame_Queue08u>

    return status;
 80021ae:	69bb      	ldr	r3, [r7, #24]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3720      	adds	r7, #32
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <RxCmd_CfgDca>:
static status_t RxCmd_CfgDca(sci_device_t deviceID, sci_frame_t * frame)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08c      	sub	sp, #48	@ 0x30
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	6039      	str	r1, [r7, #0]
 80021c2:	71fb      	strb	r3, [r7, #7]
    if (SCI_Frame_BytesToRead(frame) > 1)
 80021c4:	6838      	ldr	r0, [r7, #0]
 80021c6:	f003 fbdd 	bl	8005984 <SCI_Frame_BytesToRead>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d92f      	bls.n	8002230 <RxCmd_CfgDca+0x78>
    {
        /* Master sending data... */
        argus_cfg_dca_t dca = { 0 };
 80021d0:	f107 030c 	add.w	r3, r7, #12
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
 80021de:	611a      	str	r2, [r3, #16]
 80021e0:	829a      	strh	r2, [r3, #20]
        Deserialize_Cfg_DCA(frame, &dca);
 80021e2:	f107 030c 	add.w	r3, r7, #12
 80021e6:	4619      	mov	r1, r3
 80021e8:	6838      	ldr	r0, [r7, #0]
 80021ea:	f7ff fb45 	bl	8001878 <Deserialize_Cfg_DCA>
        argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 80021ee:	79fb      	ldrb	r3, [r7, #7]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f001 fe6f 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 80021f6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 80021f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d102      	bne.n	8002204 <RxCmd_CfgDca+0x4c>
 80021fe:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8002202:	e01c      	b.n	800223e <RxCmd_CfgDca+0x86>
        bool resume = ExplorerApp_SuspendTimerMeasurement(argus);
 8002204:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002206:	f002 f8c5 	bl	8004394 <ExplorerApp_SuspendTimerMeasurement>
 800220a:	4603      	mov	r3, r0
 800220c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        status_t status = Argus_SetConfigurationDynamicAdaption(argus, &dca);
 8002210:	f107 030c 	add.w	r3, r7, #12
 8002214:	4619      	mov	r1, r3
 8002216:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002218:	f012 f992 	bl	8014540 <Argus_SetConfigurationDynamicAdaption>
 800221c:	6278      	str	r0, [r7, #36]	@ 0x24
        if (resume) ExplorerApp_StartTimerMeasurement(argus);
 800221e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002222:	2b00      	cmp	r3, #0
 8002224:	d002      	beq.n	800222c <RxCmd_CfgDca+0x74>
 8002226:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002228:	f002 f8e0 	bl	80043ec <ExplorerApp_StartTimerMeasurement>
        return status;
 800222c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222e:	e006      	b.n	800223e <RxCmd_CfgDca+0x86>
    }
    else
    {
        /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CONFIGURATION_DCA, 0, 0);
 8002230:	79f8      	ldrb	r0, [r7, #7]
 8002232:	2300      	movs	r3, #0
 8002234:	2200      	movs	r2, #0
 8002236:	2152      	movs	r1, #82	@ 0x52
 8002238:	f002 fb7a 	bl	8004930 <SCI_SendCommand>
 800223c:	4603      	mov	r3, r0
    }
}
 800223e:	4618      	mov	r0, r3
 8002240:	3730      	adds	r7, #48	@ 0x30
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <TxCmd_CfgDca>:
static status_t TxCmd_CfgDca(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b08c      	sub	sp, #48	@ 0x30
 800224a:	af00      	add	r7, sp, #0
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
 8002250:	603b      	str	r3, [r7, #0]
 8002252:	4603      	mov	r3, r0
 8002254:	73fb      	strb	r3, [r7, #15]
    (void) param;
    status_t status = STATUS_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (data == 0)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d121      	bne.n	80022a4 <TxCmd_CfgDca+0x5e>
    {
        argus_cfg_dca_t dca = { 0 };
 8002260:	f107 0310 	add.w	r3, r7, #16
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]
 8002270:	829a      	strh	r2, [r3, #20]
        argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8002272:	7bfb      	ldrb	r3, [r7, #15]
 8002274:	4618      	mov	r0, r3
 8002276:	f001 fe2d 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 800227a:	62b8      	str	r0, [r7, #40]	@ 0x28
        if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 800227c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800227e:	2b00      	cmp	r3, #0
 8002280:	d102      	bne.n	8002288 <TxCmd_CfgDca+0x42>
 8002282:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8002286:	e012      	b.n	80022ae <TxCmd_CfgDca+0x68>
        status = Argus_GetConfigurationDynamicAdaption(argus, &dca);
 8002288:	f107 0310 	add.w	r3, r7, #16
 800228c:	4619      	mov	r1, r3
 800228e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002290:	f012 f9b4 	bl	80145fc <Argus_GetConfigurationDynamicAdaption>
 8002294:	62f8      	str	r0, [r7, #44]	@ 0x2c
        Serialize_Cfg_DCA(frame, &dca);
 8002296:	f107 0310 	add.w	r3, r7, #16
 800229a:	4619      	mov	r1, r3
 800229c:	68b8      	ldr	r0, [r7, #8]
 800229e:	f7ff fa71 	bl	8001784 <Serialize_Cfg_DCA>
 80022a2:	e003      	b.n	80022ac <TxCmd_CfgDca+0x66>
    }
    else
    {
        Serialize_Cfg_DCA(frame, (argus_cfg_dca_t*) data);
 80022a4:	6839      	ldr	r1, [r7, #0]
 80022a6:	68b8      	ldr	r0, [r7, #8]
 80022a8:	f7ff fa6c 	bl	8001784 <Serialize_Cfg_DCA>
    }

    return status;
 80022ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3730      	adds	r7, #48	@ 0x30
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <RxCmd_CfgPba>:

static status_t RxCmd_CfgPba(sci_device_t deviceID, sci_frame_t * frame)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b08c      	sub	sp, #48	@ 0x30
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	4603      	mov	r3, r0
 80022be:	6039      	str	r1, [r7, #0]
 80022c0:	71fb      	strb	r3, [r7, #7]
    if (SCI_Frame_BytesToRead(frame) > 1)
 80022c2:	6838      	ldr	r0, [r7, #0]
 80022c4:	f003 fb5e 	bl	8005984 <SCI_Frame_BytesToRead>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d930      	bls.n	8002330 <RxCmd_CfgPba+0x7a>
    {
        /* Master sending data... */
        argus_cfg_pba_t pba = { 0 };
 80022ce:	f107 0308 	add.w	r3, r7, #8
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	609a      	str	r2, [r3, #8]
 80022da:	60da      	str	r2, [r3, #12]
 80022dc:	611a      	str	r2, [r3, #16]
 80022de:	615a      	str	r2, [r3, #20]
 80022e0:	619a      	str	r2, [r3, #24]
        Deserialize_Cfg_PBA(frame, &pba);
 80022e2:	f107 0308 	add.w	r3, r7, #8
 80022e6:	4619      	mov	r1, r3
 80022e8:	6838      	ldr	r0, [r7, #0]
 80022ea:	f7ff fc01 	bl	8001af0 <Deserialize_Cfg_PBA>
        argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f001 fdef 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 80022f6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 80022f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d102      	bne.n	8002304 <RxCmd_CfgPba+0x4e>
 80022fe:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8002302:	e01c      	b.n	800233e <RxCmd_CfgPba+0x88>
        bool resume = ExplorerApp_SuspendTimerMeasurement(argus);
 8002304:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002306:	f002 f845 	bl	8004394 <ExplorerApp_SuspendTimerMeasurement>
 800230a:	4603      	mov	r3, r0
 800230c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        status_t status = Argus_SetConfigurationPixelBinning(argus, &pba);
 8002310:	f107 0308 	add.w	r3, r7, #8
 8002314:	4619      	mov	r1, r3
 8002316:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002318:	f012 f9a6 	bl	8014668 <Argus_SetConfigurationPixelBinning>
 800231c:	6278      	str	r0, [r7, #36]	@ 0x24
        if (resume) ExplorerApp_StartTimerMeasurement(argus);
 800231e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002322:	2b00      	cmp	r3, #0
 8002324:	d002      	beq.n	800232c <RxCmd_CfgPba+0x76>
 8002326:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002328:	f002 f860 	bl	80043ec <ExplorerApp_StartTimerMeasurement>
        return status;
 800232c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232e:	e006      	b.n	800233e <RxCmd_CfgPba+0x88>

    }
    else
    {
        /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CONFIGURATION_PBA, 0, 0);
 8002330:	79f8      	ldrb	r0, [r7, #7]
 8002332:	2300      	movs	r3, #0
 8002334:	2200      	movs	r2, #0
 8002336:	2154      	movs	r1, #84	@ 0x54
 8002338:	f002 fafa 	bl	8004930 <SCI_SendCommand>
 800233c:	4603      	mov	r3, r0
    }
}
 800233e:	4618      	mov	r0, r3
 8002340:	3730      	adds	r7, #48	@ 0x30
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <TxCmd_CfgPba>:
static status_t TxCmd_CfgPba(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, void const * data)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b08e      	sub	sp, #56	@ 0x38
 800234a:	af00      	add	r7, sp, #0
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
 8002350:	603b      	str	r3, [r7, #0]
 8002352:	4603      	mov	r3, r0
 8002354:	73fb      	strb	r3, [r7, #15]
    (void) param;
    status_t status = STATUS_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	637b      	str	r3, [r7, #52]	@ 0x34
    if (data == 0)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d122      	bne.n	80023a6 <TxCmd_CfgPba+0x60>
    {
        argus_cfg_pba_t pba = { 0 };
 8002360:	f107 0314 	add.w	r3, r7, #20
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	611a      	str	r2, [r3, #16]
 8002370:	615a      	str	r2, [r3, #20]
 8002372:	619a      	str	r2, [r3, #24]
        argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	4618      	mov	r0, r3
 8002378:	f001 fdac 	bl	8003ed4 <ExplorerApp_GetArgusPtr>
 800237c:	6338      	str	r0, [r7, #48]	@ 0x30
        if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 800237e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002380:	2b00      	cmp	r3, #0
 8002382:	d102      	bne.n	800238a <TxCmd_CfgPba+0x44>
 8002384:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8002388:	e012      	b.n	80023b0 <TxCmd_CfgPba+0x6a>
        status = Argus_GetConfigurationPixelBinning(argus, &pba);
 800238a:	f107 0314 	add.w	r3, r7, #20
 800238e:	4619      	mov	r1, r3
 8002390:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002392:	f012 f9bf 	bl	8014714 <Argus_GetConfigurationPixelBinning>
 8002396:	6378      	str	r0, [r7, #52]	@ 0x34
        Serialize_Cfg_PBA(frame, &pba);
 8002398:	f107 0314 	add.w	r3, r7, #20
 800239c:	4619      	mov	r1, r3
 800239e:	68b8      	ldr	r0, [r7, #8]
 80023a0:	f7ff faf4 	bl	800198c <Serialize_Cfg_PBA>
 80023a4:	e003      	b.n	80023ae <TxCmd_CfgPba+0x68>
    }
    else
    {
        Serialize_Cfg_PBA(frame, (argus_cfg_pba_t*) data);
 80023a6:	6839      	ldr	r1, [r7, #0]
 80023a8:	68b8      	ldr	r0, [r7, #8]
 80023aa:	f7ff faef 	bl	800198c <Serialize_Cfg_PBA>
    }

    return status;
 80023ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3738      	adds	r7, #56	@ 0x38
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <RxCmd_CfgSpi>:

static status_t RxCmd_CfgSpi(sci_device_t deviceID, sci_frame_t * frame)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	6039      	str	r1, [r7, #0]
 80023c2:	71fb      	strb	r3, [r7, #7]
    if (SCI_Frame_BytesToRead(frame) > 1)
 80023c4:	6838      	ldr	r0, [r7, #0]
 80023c6:	f003 fadd 	bl	8005984 <SCI_Frame_BytesToRead>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d91d      	bls.n	800240c <RxCmd_CfgSpi+0x54>
    {
        /* Master sending data... */
        explorer_t * explorer = ExplorerApp_GetExplorerPtr(deviceID);
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f001 fda2 	bl	8003f1c <ExplorerApp_GetExplorerPtr>
 80023d8:	6178      	str	r0, [r7, #20]
        if (explorer == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d102      	bne.n	80023e6 <RxCmd_CfgSpi+0x2e>
 80023e0:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 80023e4:	e019      	b.n	800241a <RxCmd_CfgSpi+0x62>

        explorer_cfg_t cfg;
        ExplorerApp_GetConfiguration(explorer, &cfg);
 80023e6:	f107 030c 	add.w	r3, r7, #12
 80023ea:	4619      	mov	r1, r3
 80023ec:	6978      	ldr	r0, [r7, #20]
 80023ee:	f001 fb43 	bl	8003a78 <ExplorerApp_GetConfiguration>
        cfg.SPIBaudRate = SCI_Frame_Dequeue32u(frame);
 80023f2:	6838      	ldr	r0, [r7, #0]
 80023f4:	f003 fd9a 	bl	8005f2c <SCI_Frame_Dequeue32u>
 80023f8:	4603      	mov	r3, r0
 80023fa:	60fb      	str	r3, [r7, #12]
        return ExplorerApp_SetConfiguration(explorer, &cfg);
 80023fc:	f107 030c 	add.w	r3, r7, #12
 8002400:	4619      	mov	r1, r3
 8002402:	6978      	ldr	r0, [r7, #20]
 8002404:	f001 fb6e 	bl	8003ae4 <ExplorerApp_SetConfiguration>
 8002408:	4603      	mov	r3, r0
 800240a:	e006      	b.n	800241a <RxCmd_CfgSpi+0x62>
    }
    else
    {
        /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CONFIGURATION_SPI, 0, 0);
 800240c:	79f8      	ldrb	r0, [r7, #7]
 800240e:	2300      	movs	r3, #0
 8002410:	2200      	movs	r2, #0
 8002412:	2158      	movs	r1, #88	@ 0x58
 8002414:	f002 fa8c 	bl	8004930 <SCI_SendCommand>
 8002418:	4603      	mov	r3, r0
    }
}
 800241a:	4618      	mov	r0, r3
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <TxCmd_CfgSpi>:
static status_t TxCmd_CfgSpi(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b088      	sub	sp, #32
 8002426:	af00      	add	r7, sp, #0
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
 800242c:	603b      	str	r3, [r7, #0]
 800242e:	4603      	mov	r3, r0
 8002430:	73fb      	strb	r3, [r7, #15]
    (void)param;
    (void)data;

    explorer_t * explorer = ExplorerApp_GetExplorerPtr(deviceID);
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	4618      	mov	r0, r3
 8002436:	f001 fd71 	bl	8003f1c <ExplorerApp_GetExplorerPtr>
 800243a:	61f8      	str	r0, [r7, #28]
    if (explorer == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d102      	bne.n	8002448 <TxCmd_CfgSpi+0x26>
 8002442:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8002446:	e00b      	b.n	8002460 <TxCmd_CfgSpi+0x3e>

    explorer_cfg_t cfg;
    ExplorerApp_GetConfiguration(explorer, &cfg);
 8002448:	f107 0314 	add.w	r3, r7, #20
 800244c:	4619      	mov	r1, r3
 800244e:	69f8      	ldr	r0, [r7, #28]
 8002450:	f001 fb12 	bl	8003a78 <ExplorerApp_GetConfiguration>
    SCI_Frame_Queue32u(frame, cfg.SPIBaudRate);
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	4619      	mov	r1, r3
 8002458:	68b8      	ldr	r0, [r7, #8]
 800245a:	f003 fbc1 	bl	8005be0 <SCI_Frame_Queue32u>
    return STATUS_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3720      	adds	r7, #32
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <RxCmd_CfgUart>:

static status_t RxCmd_CfgUart(sci_device_t deviceID, sci_frame_t * frame)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	6039      	str	r1, [r7, #0]
 8002472:	71fb      	strb	r3, [r7, #7]
#if AFBR_SCI_USB
    (void) deviceID;
    (void) frame;
    return ERROR_NOT_SUPPORTED;
#else
    if(SCI_Frame_BytesToRead(frame) > 1)
 8002474:	6838      	ldr	r0, [r7, #0]
 8002476:	f003 fa85 	bl	8005984 <SCI_Frame_BytesToRead>
 800247a:	4603      	mov	r3, r0
 800247c:	2b01      	cmp	r3, #1
 800247e:	d908      	bls.n	8002492 <RxCmd_CfgUart+0x2a>
    {   /* Master sending data... */
        const uint32_t baudRate = SCI_Frame_Dequeue32u(frame);
 8002480:	6838      	ldr	r0, [r7, #0]
 8002482:	f003 fd53 	bl	8005f2c <SCI_Frame_Dequeue32u>
 8002486:	60f8      	str	r0, [r7, #12]
        return UART_CheckBaudRate(baudRate);
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f004 fcf7 	bl	8006e7c <UART_CheckBaudRate>
 800248e:	4603      	mov	r3, r0
 8002490:	e006      	b.n	80024a0 <RxCmd_CfgUart+0x38>
    }
    else
    {   /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CONFIGURATION_UART, 0, 0);
 8002492:	79f8      	ldrb	r0, [r7, #7]
 8002494:	2300      	movs	r3, #0
 8002496:	2200      	movs	r2, #0
 8002498:	2159      	movs	r1, #89	@ 0x59
 800249a:	f002 fa49 	bl	8004930 <SCI_SendCommand>
 800249e:	4603      	mov	r3, r0
    }
#endif
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <PrxCmd_CfgUart>:
static status_t PrxCmd_CfgUart(sci_device_t deviceID, sci_frame_t *frame)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	6039      	str	r1, [r7, #0]
 80024b2:	71fb      	strb	r3, [r7, #7]

#if AFBR_SCI_USB
    (void) frame;
    return ERROR_NOT_SUPPORTED;
#else
    if (SCI_Frame_BytesToRead(frame) > 1)
 80024b4:	6838      	ldr	r0, [r7, #0]
 80024b6:	f003 fa65 	bl	8005984 <SCI_Frame_BytesToRead>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d917      	bls.n	80024f0 <PrxCmd_CfgUart+0x48>
    { /* Master sending data... */
        const uint32_t baudRate = SCI_Frame_Dequeue32u(frame);
 80024c0:	6838      	ldr	r0, [r7, #0]
 80024c2:	f003 fd33 	bl	8005f2c <SCI_Frame_Dequeue32u>
 80024c6:	60b8      	str	r0, [r7, #8]
        status_t status = STATUS_BUSY;
 80024c8:	2302      	movs	r3, #2
 80024ca:	60fb      	str	r3, [r7, #12]
        while (status == STATUS_BUSY)
 80024cc:	e003      	b.n	80024d6 <PrxCmd_CfgUart+0x2e>
        {
            status = UART_SetBaudRate(baudRate);
 80024ce:	68b8      	ldr	r0, [r7, #8]
 80024d0:	f004 fd0a 	bl	8006ee8 <UART_SetBaudRate>
 80024d4:	60f8      	str	r0, [r7, #12]
        while (status == STATUS_BUSY)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d0f8      	beq.n	80024ce <PrxCmd_CfgUart+0x26>
        }
        assert(status == STATUS_OK);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d006      	beq.n	80024f0 <PrxCmd_CfgUart+0x48>
 80024e2:	4b06      	ldr	r3, [pc, #24]	@ (80024fc <PrxCmd_CfgUart+0x54>)
 80024e4:	4a06      	ldr	r2, [pc, #24]	@ (8002500 <PrxCmd_CfgUart+0x58>)
 80024e6:	f240 211d 	movw	r1, #541	@ 0x21d
 80024ea:	4806      	ldr	r0, [pc, #24]	@ (8002504 <PrxCmd_CfgUart+0x5c>)
 80024ec:	f004 ff68 	bl	80073c0 <__assert_func>
    }
    return STATUS_OK;
 80024f0:	2300      	movs	r3, #0
#endif
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	0802b2e4 	.word	0x0802b2e4
 8002500:	0802c330 	.word	0x0802c330
 8002504:	0802b2a8 	.word	0x0802b2a8

08002508 <TxCmd_CfgUart>:
static status_t TxCmd_CfgUart(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	607a      	str	r2, [r7, #4]
 8002512:	603b      	str	r3, [r7, #0]
 8002514:	4603      	mov	r3, r0
 8002516:	73fb      	strb	r3, [r7, #15]
    (void) data;
#if AFBR_SCI_USB
    (void) frame;
    return ERROR_NOT_SUPPORTED;
#else
    const uint32_t baudRate = UART_GetBaudRate();
 8002518:	f004 fca4 	bl	8006e64 <UART_GetBaudRate>
 800251c:	6178      	str	r0, [r7, #20]
    SCI_Frame_Queue32u(frame, baudRate);
 800251e:	6979      	ldr	r1, [r7, #20]
 8002520:	68b8      	ldr	r0, [r7, #8]
 8002522:	f003 fb5d 	bl	8005be0 <SCI_Frame_Queue32u>
    return STATUS_OK;
 8002526:	2300      	movs	r3, #0
#endif
}
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <ExplorerAPI_InitCfg>:

/*******************************************************************************
 * Init Code
 ******************************************************************************/
status_t ExplorerAPI_InitCfg(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
    status_t status;
    status = SCI_SetRxTxCommand(CMD_CONFIGURATION_DATA_OUTPUT_MODE, RxCmd_CfgDataOutputMode, TxCmd_CfgDataOutputMode);
 8002536:	4a3f      	ldr	r2, [pc, #252]	@ (8002634 <ExplorerAPI_InitCfg+0x104>)
 8002538:	493f      	ldr	r1, [pc, #252]	@ (8002638 <ExplorerAPI_InitCfg+0x108>)
 800253a:	2041      	movs	r0, #65	@ 0x41
 800253c:	f002 f87a 	bl	8004634 <SCI_SetRxTxCommand>
 8002540:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	da01      	bge.n	800254c <ExplorerAPI_InitCfg+0x1c>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	e06f      	b.n	800262c <ExplorerAPI_InitCfg+0xfc>
    status = SCI_SetRxTxCommand(CMD_CONFIGURATION_MEASUREMENT_MODE, RxCmd_CfgMeasurementMode, TxCmd_CfgMeasurementMode);
 800254c:	4a3b      	ldr	r2, [pc, #236]	@ (800263c <ExplorerAPI_InitCfg+0x10c>)
 800254e:	493c      	ldr	r1, [pc, #240]	@ (8002640 <ExplorerAPI_InitCfg+0x110>)
 8002550:	2042      	movs	r0, #66	@ 0x42
 8002552:	f002 f86f 	bl	8004634 <SCI_SetRxTxCommand>
 8002556:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	da01      	bge.n	8002562 <ExplorerAPI_InitCfg+0x32>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	e064      	b.n	800262c <ExplorerAPI_InitCfg+0xfc>
    status = SCI_SetRxTxCommand(CMD_CONFIGURATION_FRAME_TIME, RxCmd_CfgFrameTime, TxCmd_CfgFrameTime);
 8002562:	4a38      	ldr	r2, [pc, #224]	@ (8002644 <ExplorerAPI_InitCfg+0x114>)
 8002564:	4938      	ldr	r1, [pc, #224]	@ (8002648 <ExplorerAPI_InitCfg+0x118>)
 8002566:	2043      	movs	r0, #67	@ 0x43
 8002568:	f002 f864 	bl	8004634 <SCI_SetRxTxCommand>
 800256c:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	da01      	bge.n	8002578 <ExplorerAPI_InitCfg+0x48>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	e059      	b.n	800262c <ExplorerAPI_InitCfg+0xfc>
    status = SCI_SetRxTxCommand(CMD_CONFIGURATION_DUAL_FREQUENCY_MODE, RxCmd_CfgDualFrequencyMode, TxCmd_CfgDualFrequencyMode);
 8002578:	4a34      	ldr	r2, [pc, #208]	@ (800264c <ExplorerAPI_InitCfg+0x11c>)
 800257a:	4935      	ldr	r1, [pc, #212]	@ (8002650 <ExplorerAPI_InitCfg+0x120>)
 800257c:	2044      	movs	r0, #68	@ 0x44
 800257e:	f002 f859 	bl	8004634 <SCI_SetRxTxCommand>
 8002582:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	da01      	bge.n	800258e <ExplorerAPI_InitCfg+0x5e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	e04e      	b.n	800262c <ExplorerAPI_InitCfg+0xfc>
    status = SCI_SetRxTxCommand(CMD_CONFIGURATION_SHOT_NOISE_MONITOR_MODE, RxCmd_CfgShotNoiseMonitor, TxCmd_CfgShotNoiseMonitor);
 800258e:	4a31      	ldr	r2, [pc, #196]	@ (8002654 <ExplorerAPI_InitCfg+0x124>)
 8002590:	4931      	ldr	r1, [pc, #196]	@ (8002658 <ExplorerAPI_InitCfg+0x128>)
 8002592:	2046      	movs	r0, #70	@ 0x46
 8002594:	f002 f84e 	bl	8004634 <SCI_SetRxTxCommand>
 8002598:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	da01      	bge.n	80025a4 <ExplorerAPI_InitCfg+0x74>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	e043      	b.n	800262c <ExplorerAPI_InitCfg+0xfc>
    status = SCI_SetRxTxCommand(CMD_CONFIGURATION_XTALK_MONITOR_MODE, RxCmd_CfgXtalkMonitor, TxCmd_CfgXtalkMonitor);
 80025a4:	4a2d      	ldr	r2, [pc, #180]	@ (800265c <ExplorerAPI_InitCfg+0x12c>)
 80025a6:	492e      	ldr	r1, [pc, #184]	@ (8002660 <ExplorerAPI_InitCfg+0x130>)
 80025a8:	2047      	movs	r0, #71	@ 0x47
 80025aa:	f002 f843 	bl	8004634 <SCI_SetRxTxCommand>
 80025ae:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	da01      	bge.n	80025ba <ExplorerAPI_InitCfg+0x8a>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	e038      	b.n	800262c <ExplorerAPI_InitCfg+0xfc>
    status = SCI_SetRxTxCommand(CMD_CONFIGURATION_SMART_POWER_SAVE, RxCmd_CfgSmartPowerSaveEnabled, TxCmd_CfgSmartPowerSaveEnabled);
 80025ba:	4a2a      	ldr	r2, [pc, #168]	@ (8002664 <ExplorerAPI_InitCfg+0x134>)
 80025bc:	492a      	ldr	r1, [pc, #168]	@ (8002668 <ExplorerAPI_InitCfg+0x138>)
 80025be:	2045      	movs	r0, #69	@ 0x45
 80025c0:	f002 f838 	bl	8004634 <SCI_SetRxTxCommand>
 80025c4:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	da01      	bge.n	80025d0 <ExplorerAPI_InitCfg+0xa0>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	e02d      	b.n	800262c <ExplorerAPI_InitCfg+0xfc>
    status = SCI_SetRxTxCommand(CMD_CONFIGURATION_DCA, RxCmd_CfgDca, TxCmd_CfgDca);
 80025d0:	4a26      	ldr	r2, [pc, #152]	@ (800266c <ExplorerAPI_InitCfg+0x13c>)
 80025d2:	4927      	ldr	r1, [pc, #156]	@ (8002670 <ExplorerAPI_InitCfg+0x140>)
 80025d4:	2052      	movs	r0, #82	@ 0x52
 80025d6:	f002 f82d 	bl	8004634 <SCI_SetRxTxCommand>
 80025da:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	da01      	bge.n	80025e6 <ExplorerAPI_InitCfg+0xb6>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	e022      	b.n	800262c <ExplorerAPI_InitCfg+0xfc>
    status = SCI_SetRxTxCommand(CMD_CONFIGURATION_PBA, RxCmd_CfgPba, TxCmd_CfgPba);
 80025e6:	4a23      	ldr	r2, [pc, #140]	@ (8002674 <ExplorerAPI_InitCfg+0x144>)
 80025e8:	4923      	ldr	r1, [pc, #140]	@ (8002678 <ExplorerAPI_InitCfg+0x148>)
 80025ea:	2054      	movs	r0, #84	@ 0x54
 80025ec:	f002 f822 	bl	8004634 <SCI_SetRxTxCommand>
 80025f0:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	da01      	bge.n	80025fc <ExplorerAPI_InitCfg+0xcc>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	e017      	b.n	800262c <ExplorerAPI_InitCfg+0xfc>
    status = SCI_SetRxTxCommand(CMD_CONFIGURATION_SPI, RxCmd_CfgSpi, TxCmd_CfgSpi);
 80025fc:	4a1f      	ldr	r2, [pc, #124]	@ (800267c <ExplorerAPI_InitCfg+0x14c>)
 80025fe:	4920      	ldr	r1, [pc, #128]	@ (8002680 <ExplorerAPI_InitCfg+0x150>)
 8002600:	2058      	movs	r0, #88	@ 0x58
 8002602:	f002 f817 	bl	8004634 <SCI_SetRxTxCommand>
 8002606:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	da01      	bge.n	8002612 <ExplorerAPI_InitCfg+0xe2>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	e00c      	b.n	800262c <ExplorerAPI_InitCfg+0xfc>
    status = SCI_SetCommand(CMD_CONFIGURATION_UART, RxCmd_CfgUart, TxCmd_CfgUart, PrxCmd_CfgUart);
 8002612:	4b1c      	ldr	r3, [pc, #112]	@ (8002684 <ExplorerAPI_InitCfg+0x154>)
 8002614:	4a1c      	ldr	r2, [pc, #112]	@ (8002688 <ExplorerAPI_InitCfg+0x158>)
 8002616:	491d      	ldr	r1, [pc, #116]	@ (800268c <ExplorerAPI_InitCfg+0x15c>)
 8002618:	2059      	movs	r0, #89	@ 0x59
 800261a:	f002 f81d 	bl	8004658 <SCI_SetCommand>
 800261e:	6078      	str	r0, [r7, #4]
    if(status < STATUS_OK) return status;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	da01      	bge.n	800262a <ExplorerAPI_InitCfg+0xfa>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	e000      	b.n	800262c <ExplorerAPI_InitCfg+0xfc>


    return status;
 800262a:	687b      	ldr	r3, [r7, #4]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	08001dab 	.word	0x08001dab
 8002638:	08001d41 	.word	0x08001d41
 800263c:	08001cf9 	.word	0x08001cf9
 8002640:	08001c9d 	.word	0x08001c9d
 8002644:	08001e63 	.word	0x08001e63
 8002648:	08001df3 	.word	0x08001df3
 800264c:	08001ff1 	.word	0x08001ff1
 8002650:	08001f77 	.word	0x08001f77
 8002654:	080020ad 	.word	0x080020ad
 8002658:	08002039 	.word	0x08002039
 800265c:	08002171 	.word	0x08002171
 8002660:	080020f5 	.word	0x080020f5
 8002664:	08001f2b 	.word	0x08001f2b
 8002668:	08001eaf 	.word	0x08001eaf
 800266c:	08002247 	.word	0x08002247
 8002670:	080021b9 	.word	0x080021b9
 8002674:	08002347 	.word	0x08002347
 8002678:	080022b7 	.word	0x080022b7
 800267c:	08002423 	.word	0x08002423
 8002680:	080023b9 	.word	0x080023b9
 8002684:	080024a9 	.word	0x080024a9
 8002688:	08002509 	.word	0x08002509
 800268c:	08002469 	.word	0x08002469

08002690 <Serialize_MeasurementData_Generic>:

/*******************************************************************************
 * Parsing Functions
 ******************************************************************************/
static void Serialize_MeasurementData_Generic(sci_frame_t * frame, argus_results_t const * res, sci_cmd_t type)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	4613      	mov	r3, r2
 800269c:	71fb      	strb	r3, [r7, #7]
    (void) type; // unused

    assert(res->Status >= INT16_MIN && res->Status <= INT16_MAX);
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80026a6:	db04      	blt.n	80026b2 <Serialize_MeasurementData_Generic+0x22>
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026b0:	db05      	blt.n	80026be <Serialize_MeasurementData_Generic+0x2e>
 80026b2:	4b0b      	ldr	r3, [pc, #44]	@ (80026e0 <Serialize_MeasurementData_Generic+0x50>)
 80026b4:	4a0b      	ldr	r2, [pc, #44]	@ (80026e4 <Serialize_MeasurementData_Generic+0x54>)
 80026b6:	2148      	movs	r1, #72	@ 0x48
 80026b8:	480b      	ldr	r0, [pc, #44]	@ (80026e8 <Serialize_MeasurementData_Generic+0x58>)
 80026ba:	f004 fe81 	bl	80073c0 <__assert_func>

    SCI_Frame_Queue16s(frame, (int16_t)res->Status);
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	b21b      	sxth	r3, r3
 80026c4:	4619      	mov	r1, r3
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f003 fad6 	bl	8005c78 <SCI_Frame_Queue16s>
    SCI_Frame_Queue_Time(frame, &res->TimeStamp);
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	3304      	adds	r3, #4
 80026d0:	4619      	mov	r1, r3
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f003 fb2a 	bl	8005d2c <SCI_Frame_Queue_Time>
}
 80026d8:	bf00      	nop
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	0802b2f8 	.word	0x0802b2f8
 80026e4:	0802c340 	.word	0x0802c340
 80026e8:	0802b330 	.word	0x0802b330

080026ec <Serialize_MeasurementData_FrameConfig>:
static void Serialize_MeasurementData_FrameConfig(sci_frame_t * frame, argus_results_t const * res, sci_cmd_t type)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b088      	sub	sp, #32
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	4613      	mov	r3, r2
 80026f8:	71fb      	strb	r3, [r7, #7]
    SCI_Frame_Queue32u(frame, res->Frame.State);
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	4619      	mov	r1, r3
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f003 fa6d 	bl	8005be0 <SCI_Frame_Queue32u>

    if (type != CMD_MEASUREMENT_DATA_1D || res->Debug != 0)
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	2b36      	cmp	r3, #54	@ 0x36
 800270a:	d104      	bne.n	8002716 <Serialize_MeasurementData_FrameConfig+0x2a>
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 8002712:	2b00      	cmp	r3, #0
 8002714:	d01e      	beq.n	8002754 <Serialize_MeasurementData_FrameConfig+0x68>
    {
        SCI_Frame_Queue16u(frame, (uint16_t) res->Frame.DigitalIntegrationDepth);
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	8bdb      	ldrh	r3, [r3, #30]
 800271a:	4619      	mov	r1, r3
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f003 fa18 	bl	8005b52 <SCI_Frame_Queue16u>
        SCI_Frame_Queue16u(frame, (uint16_t) res->Frame.AnalogIntegrationDepth);
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	8b9b      	ldrh	r3, [r3, #28]
 8002726:	4619      	mov	r1, r3
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f003 fa12 	bl	8005b52 <SCI_Frame_Queue16u>
        SCI_Frame_Queue16u(frame, (uint16_t) res->Frame.OutputPower);
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	8c1b      	ldrh	r3, [r3, #32]
 8002732:	4619      	mov	r1, r3
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f003 fa0c 	bl	8005b52 <SCI_Frame_Queue16u>
        SCI_Frame_Queue08u(frame, (uint8_t) res->Frame.PixelGain);
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8002740:	4619      	mov	r1, r3
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f003 f9e0 	bl	8005b08 <SCI_Frame_Queue08u>
        SCI_Frame_Queue32u(frame, (uint32_t) res->Frame.PxEnMask);
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	4619      	mov	r1, r3
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f003 fa46 	bl	8005be0 <SCI_Frame_Queue32u>
    }

    if (type != CMD_MEASUREMENT_DATA_1D)
 8002754:	79fb      	ldrb	r3, [r7, #7]
 8002756:	2b36      	cmp	r3, #54	@ 0x36
 8002758:	d006      	beq.n	8002768 <Serialize_MeasurementData_FrameConfig+0x7c>
    {
        SCI_Frame_Queue32u(frame, (uint32_t) res->Frame.ChEnMask);
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	4619      	mov	r1, r3
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f003 fa3d 	bl	8005be0 <SCI_Frame_Queue32u>
            PIXELN_ENABLE(sat_msk, n);
        }
        SCI_Frame_Queue32u(frame, bin_msk);
        SCI_Frame_Queue32u(frame, sat_msk);
    }
}
 8002766:	e03e      	b.n	80027e6 <Serialize_MeasurementData_FrameConfig+0xfa>
    else if (res->Debug != 0) // 1D + Debug Mode
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 800276e:	2b00      	cmp	r3, #0
 8002770:	d039      	beq.n	80027e6 <Serialize_MeasurementData_FrameConfig+0xfa>
        uint32_t bin_msk = 0xFFFFFFFFU;
 8002772:	f04f 33ff 	mov.w	r3, #4294967295
 8002776:	61fb      	str	r3, [r7, #28]
        uint32_t sat_msk = 0x00000000U;
 8002778:	2300      	movs	r3, #0
 800277a:	61bb      	str	r3, [r7, #24]
        uint8_t n = 0;
 800277c:	2300      	movs	r3, #0
 800277e:	75fb      	strb	r3, [r7, #23]
        for (const argus_pixel_t * px = res->Pixels; px < &res->PixelRef; ++px, ++n)
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	3328      	adds	r3, #40	@ 0x28
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	e020      	b.n	80027ca <Serialize_MeasurementData_FrameConfig+0xde>
            if (!(px->Status & (PIXEL_OFF | PIXEL_BIN_EXCL)))
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	7a1b      	ldrb	r3, [r3, #8]
 800278c:	f003 0305 	and.w	r3, r3, #5
 8002790:	2b00      	cmp	r3, #0
 8002792:	d107      	bne.n	80027a4 <Serialize_MeasurementData_FrameConfig+0xb8>
            PIXELN_DISABLE(bin_msk, n);
 8002794:	7dfb      	ldrb	r3, [r7, #23]
 8002796:	2201      	movs	r2, #1
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61fb      	str	r3, [r7, #28]
            if (px->Status & PIXEL_SAT)
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	7a1b      	ldrb	r3, [r3, #8]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d006      	beq.n	80027be <Serialize_MeasurementData_FrameConfig+0xd2>
            PIXELN_ENABLE(sat_msk, n);
 80027b0:	7dfb      	ldrb	r3, [r7, #23]
 80027b2:	2201      	movs	r2, #1
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        for (const argus_pixel_t * px = res->Pixels; px < &res->PixelRef; ++px, ++n)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	330c      	adds	r3, #12
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	7dfb      	ldrb	r3, [r7, #23]
 80027c6:	3301      	adds	r3, #1
 80027c8:	75fb      	strb	r3, [r7, #23]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d3d8      	bcc.n	8002788 <Serialize_MeasurementData_FrameConfig+0x9c>
        SCI_Frame_Queue32u(frame, bin_msk);
 80027d6:	69f9      	ldr	r1, [r7, #28]
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f003 fa01 	bl	8005be0 <SCI_Frame_Queue32u>
        SCI_Frame_Queue32u(frame, sat_msk);
 80027de:	69b9      	ldr	r1, [r7, #24]
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f003 f9fd 	bl	8005be0 <SCI_Frame_Queue32u>
}
 80027e6:	bf00      	nop
 80027e8:	3720      	adds	r7, #32
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <Serialize_MeasurementData_RawData>:
static void Serialize_MeasurementData_RawData(sci_frame_t * frame, argus_results_t const * res, sci_cmd_t type)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b088      	sub	sp, #32
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	60f8      	str	r0, [r7, #12]
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	4613      	mov	r3, r2
 80027fa:	71fb      	strb	r3, [r7, #7]
    if (type != CMD_MEASUREMENT_DATA_FULL || res->Debug == 0) return;
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	2b32      	cmp	r3, #50	@ 0x32
 8002800:	d14e      	bne.n	80028a0 <Serialize_MeasurementData_RawData+0xb2>
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 8002808:	2b00      	cmp	r3, #0
 800280a:	d049      	beq.n	80028a0 <Serialize_MeasurementData_RawData+0xb2>

    SCI_Frame_Queue08u(frame, ARGUS_PHASECOUNT);
 800280c:	2104      	movs	r1, #4
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f003 f97a 	bl	8005b08 <SCI_Frame_Queue08u>

    /* Raw Samples */
    uint32_t const * data = res->Debug->Data;
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 800281a:	3304      	adds	r3, #4
 800281c:	61fb      	str	r3, [r7, #28]

    uint32_t msk = res->Frame.PxEnMask;
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	61bb      	str	r3, [r7, #24]
    while (msk)
 8002824:	e018      	b.n	8002858 <Serialize_MeasurementData_RawData+0x6a>
    {
        if (msk & 1)
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b00      	cmp	r3, #0
 800282e:	d010      	beq.n	8002852 <Serialize_MeasurementData_RawData+0x64>
        {
            for (uint_fast8_t p = 0; p < ARGUS_PHASECOUNT; ++p)
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	e00a      	b.n	800284c <Serialize_MeasurementData_RawData+0x5e>
            {
                SCI_Frame_Queue24u(frame, *(data++));
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	1d1a      	adds	r2, r3, #4
 800283a:	61fa      	str	r2, [r7, #28]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4619      	mov	r1, r3
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f003 f99f 	bl	8005b84 <SCI_Frame_Queue24u>
            for (uint_fast8_t p = 0; p < ARGUS_PHASECOUNT; ++p)
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	3301      	adds	r3, #1
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	2b03      	cmp	r3, #3
 8002850:	d9f1      	bls.n	8002836 <Serialize_MeasurementData_RawData+0x48>
            }
        }
        msk >>= 1U;
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	085b      	lsrs	r3, r3, #1
 8002856:	61bb      	str	r3, [r7, #24]
    while (msk)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1e3      	bne.n	8002826 <Serialize_MeasurementData_RawData+0x38>
    }

    msk = res->Frame.ChEnMask;
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	61bb      	str	r3, [r7, #24]
    while (msk)
 8002864:	e018      	b.n	8002898 <Serialize_MeasurementData_RawData+0xaa>
    {
        if (msk & 1)
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d010      	beq.n	8002892 <Serialize_MeasurementData_RawData+0xa4>
        {
            for (uint_fast8_t p = 0; p < ARGUS_PHASECOUNT; ++p)
 8002870:	2300      	movs	r3, #0
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	e00a      	b.n	800288c <Serialize_MeasurementData_RawData+0x9e>
            {
                SCI_Frame_Queue24u(frame, *(data++));
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	1d1a      	adds	r2, r3, #4
 800287a:	61fa      	str	r2, [r7, #28]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4619      	mov	r1, r3
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f003 f97f 	bl	8005b84 <SCI_Frame_Queue24u>
            for (uint_fast8_t p = 0; p < ARGUS_PHASECOUNT; ++p)
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	3301      	adds	r3, #1
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	2b03      	cmp	r3, #3
 8002890:	d9f1      	bls.n	8002876 <Serialize_MeasurementData_RawData+0x88>
            }
        }
        msk >>= 1U;
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	085b      	lsrs	r3, r3, #1
 8002896:	61bb      	str	r3, [r7, #24]
    while (msk)
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1e3      	bne.n	8002866 <Serialize_MeasurementData_RawData+0x78>
 800289e:	e000      	b.n	80028a2 <Serialize_MeasurementData_RawData+0xb4>
    if (type != CMD_MEASUREMENT_DATA_FULL || res->Debug == 0) return;
 80028a0:	bf00      	nop
    }
}
 80028a2:	3720      	adds	r7, #32
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <Serialize_MeasurementData_3D>:
static void Serialize_MeasurementData_3D(sci_frame_t * frame, argus_results_t const * res, sci_cmd_t type)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08c      	sub	sp, #48	@ 0x30
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	4613      	mov	r3, r2
 80028b4:	71fb      	strb	r3, [r7, #7]
    if (type == CMD_MEASUREMENT_DATA_1D) return;
 80028b6:	79fb      	ldrb	r3, [r7, #7]
 80028b8:	2b36      	cmp	r3, #54	@ 0x36
 80028ba:	f000 814f 	beq.w	8002b5c <Serialize_MeasurementData_3D+0x2b4>

    for (uint_fast8_t x = 0; x < ARGUS_PIXELS_X; ++x)
 80028be:	2300      	movs	r3, #0
 80028c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028c2:	e033      	b.n	800292c <Serialize_MeasurementData_3D+0x84>
    {
        for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 80028c4:	2300      	movs	r3, #0
 80028c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028c8:	e02a      	b.n	8002920 <Serialize_MeasurementData_3D+0x78>
        {
            if (!(res->Pixel[x][y].Status & PIXEL_OFF))
 80028ca:	68b8      	ldr	r0, [r7, #8]
 80028cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80028d0:	461a      	mov	r2, r3
 80028d2:	0052      	lsls	r2, r2, #1
 80028d4:	441a      	add	r2, r3
 80028d6:	0093      	lsls	r3, r2, #2
 80028d8:	461a      	mov	r2, r3
 80028da:	460b      	mov	r3, r1
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	440b      	add	r3, r1
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	4413      	add	r3, r2
 80028e4:	4403      	add	r3, r0
 80028e6:	3330      	adds	r3, #48	@ 0x30
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d113      	bne.n	800291a <Serialize_MeasurementData_3D+0x72>
            {
                SCI_Frame_Queue08u(frame, res->Pixel[x][y].Status);
 80028f2:	68b8      	ldr	r0, [r7, #8]
 80028f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80028f8:	461a      	mov	r2, r3
 80028fa:	0052      	lsls	r2, r2, #1
 80028fc:	441a      	add	r2, r3
 80028fe:	0093      	lsls	r3, r2, #2
 8002900:	461a      	mov	r2, r3
 8002902:	460b      	mov	r3, r1
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	440b      	add	r3, r1
 8002908:	011b      	lsls	r3, r3, #4
 800290a:	4413      	add	r3, r2
 800290c:	4403      	add	r3, r0
 800290e:	3330      	adds	r3, #48	@ 0x30
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	4619      	mov	r1, r3
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f003 f8f7 	bl	8005b08 <SCI_Frame_Queue08u>
        for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 800291a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800291c:	3301      	adds	r3, #1
 800291e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002922:	2b03      	cmp	r3, #3
 8002924:	d9d1      	bls.n	80028ca <Serialize_MeasurementData_3D+0x22>
    for (uint_fast8_t x = 0; x < ARGUS_PIXELS_X; ++x)
 8002926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002928:	3301      	adds	r3, #1
 800292a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800292c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800292e:	2b07      	cmp	r3, #7
 8002930:	d9c8      	bls.n	80028c4 <Serialize_MeasurementData_3D+0x1c>
            }
        }
    }
    if (!(res->PixelRef.Status & PIXEL_OFF))
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	f893 31b0 	ldrb.w	r3, [r3, #432]	@ 0x1b0
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b00      	cmp	r3, #0
 800293e:	d106      	bne.n	800294e <Serialize_MeasurementData_3D+0xa6>
    {
        SCI_Frame_Queue08u(frame, res->PixelRef.Status);
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f893 31b0 	ldrb.w	r3, [r3, #432]	@ 0x1b0
 8002946:	4619      	mov	r1, r3
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f003 f8dd 	bl	8005b08 <SCI_Frame_Queue08u>
    }

    for (uint_fast8_t x = 0; x < ARGUS_PIXELS_X; ++x)
 800294e:	2300      	movs	r3, #0
 8002950:	627b      	str	r3, [r7, #36]	@ 0x24
 8002952:	e04e      	b.n	80029f2 <Serialize_MeasurementData_3D+0x14a>
    {
        for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 8002954:	2300      	movs	r3, #0
 8002956:	623b      	str	r3, [r7, #32]
 8002958:	e045      	b.n	80029e6 <Serialize_MeasurementData_3D+0x13e>
        {
            if (!(res->Pixel[x][y].Status & PIXEL_OFF))
 800295a:	68b8      	ldr	r0, [r7, #8]
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002960:	461a      	mov	r2, r3
 8002962:	0052      	lsls	r2, r2, #1
 8002964:	441a      	add	r2, r3
 8002966:	0093      	lsls	r3, r2, #2
 8002968:	461a      	mov	r2, r3
 800296a:	460b      	mov	r3, r1
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	440b      	add	r3, r1
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	4413      	add	r3, r2
 8002974:	4403      	add	r3, r0
 8002976:	3330      	adds	r3, #48	@ 0x30
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d12e      	bne.n	80029e0 <Serialize_MeasurementData_3D+0x138>
            {
                SCI_Frame_Queue24s(frame, PARSE_RANGE(res->Pixel[x][y].Range));
 8002982:	68b8      	ldr	r0, [r7, #8]
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002988:	461a      	mov	r2, r3
 800298a:	0052      	lsls	r2, r2, #1
 800298c:	441a      	add	r2, r3
 800298e:	0093      	lsls	r3, r2, #2
 8002990:	461a      	mov	r2, r3
 8002992:	460b      	mov	r3, r1
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	440b      	add	r3, r1
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	4413      	add	r3, r2
 800299c:	4403      	add	r3, r0
 800299e:	3328      	adds	r3, #40	@ 0x28
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d015      	beq.n	80029d6 <Serialize_MeasurementData_3D+0x12e>
 80029aa:	68b8      	ldr	r0, [r7, #8]
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029b0:	461a      	mov	r2, r3
 80029b2:	0052      	lsls	r2, r2, #1
 80029b4:	441a      	add	r2, r3
 80029b6:	0093      	lsls	r3, r2, #2
 80029b8:	461a      	mov	r2, r3
 80029ba:	460b      	mov	r3, r1
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	440b      	add	r3, r1
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	4413      	add	r3, r2
 80029c4:	4403      	add	r3, r0
 80029c6:	3328      	adds	r3, #40	@ 0x28
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2108      	movs	r1, #8
 80029cc:	4618      	mov	r0, r3
 80029ce:	f00f fe0b 	bl	80125e8 <fp_rnds>
 80029d2:	4603      	mov	r3, r0
 80029d4:	e000      	b.n	80029d8 <Serialize_MeasurementData_3D+0x130>
 80029d6:	4b63      	ldr	r3, [pc, #396]	@ (8002b64 <Serialize_MeasurementData_3D+0x2bc>)
 80029d8:	4619      	mov	r1, r3
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f003 f965 	bl	8005caa <SCI_Frame_Queue24s>
        for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 80029e0:	6a3b      	ldr	r3, [r7, #32]
 80029e2:	3301      	adds	r3, #1
 80029e4:	623b      	str	r3, [r7, #32]
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d9b6      	bls.n	800295a <Serialize_MeasurementData_3D+0xb2>
    for (uint_fast8_t x = 0; x < ARGUS_PIXELS_X; ++x)
 80029ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ee:	3301      	adds	r3, #1
 80029f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80029f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f4:	2b07      	cmp	r3, #7
 80029f6:	d9ad      	bls.n	8002954 <Serialize_MeasurementData_3D+0xac>
            }
        }
    }
    if (!(res->PixelRef.Status & PIXEL_OFF))
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f893 31b0 	ldrb.w	r3, [r3, #432]	@ 0x1b0
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d114      	bne.n	8002a30 <Serialize_MeasurementData_3D+0x188>
    {
        SCI_Frame_Queue24s(frame, PARSE_RANGE(res->PixelRef.Range));
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 8002a0c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d008      	beq.n	8002a26 <Serialize_MeasurementData_3D+0x17e>
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 8002a1a:	2108      	movs	r1, #8
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f00f fde3 	bl	80125e8 <fp_rnds>
 8002a22:	4603      	mov	r3, r0
 8002a24:	e000      	b.n	8002a28 <Serialize_MeasurementData_3D+0x180>
 8002a26:	4b4f      	ldr	r3, [pc, #316]	@ (8002b64 <Serialize_MeasurementData_3D+0x2bc>)
 8002a28:	4619      	mov	r1, r3
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f003 f93d 	bl	8005caa <SCI_Frame_Queue24s>
    }

    for (uint_fast8_t x = 0; x < ARGUS_PIXELS_X; ++x)
 8002a30:	2300      	movs	r3, #0
 8002a32:	61fb      	str	r3, [r7, #28]
 8002a34:	e033      	b.n	8002a9e <Serialize_MeasurementData_3D+0x1f6>
    {
        for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 8002a36:	2300      	movs	r3, #0
 8002a38:	61bb      	str	r3, [r7, #24]
 8002a3a:	e02a      	b.n	8002a92 <Serialize_MeasurementData_3D+0x1ea>
        {
            if (!(res->Pixel[x][y].Status & PIXEL_OFF))
 8002a3c:	68b8      	ldr	r0, [r7, #8]
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	69f9      	ldr	r1, [r7, #28]
 8002a42:	461a      	mov	r2, r3
 8002a44:	0052      	lsls	r2, r2, #1
 8002a46:	441a      	add	r2, r3
 8002a48:	0093      	lsls	r3, r2, #2
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	440b      	add	r3, r1
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	4413      	add	r3, r2
 8002a56:	4403      	add	r3, r0
 8002a58:	3330      	adds	r3, #48	@ 0x30
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d113      	bne.n	8002a8c <Serialize_MeasurementData_3D+0x1e4>
            {
                SCI_Frame_Queue16u(frame, res->Pixel[x][y].Amplitude);
 8002a64:	68b8      	ldr	r0, [r7, #8]
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	69f9      	ldr	r1, [r7, #28]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	0052      	lsls	r2, r2, #1
 8002a6e:	441a      	add	r2, r3
 8002a70:	0093      	lsls	r3, r2, #2
 8002a72:	461a      	mov	r2, r3
 8002a74:	460b      	mov	r3, r1
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	440b      	add	r3, r1
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	4413      	add	r3, r2
 8002a7e:	4403      	add	r3, r0
 8002a80:	332e      	adds	r3, #46	@ 0x2e
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	4619      	mov	r1, r3
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f003 f863 	bl	8005b52 <SCI_Frame_Queue16u>
        for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	61bb      	str	r3, [r7, #24]
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	2b03      	cmp	r3, #3
 8002a96:	d9d1      	bls.n	8002a3c <Serialize_MeasurementData_3D+0x194>
    for (uint_fast8_t x = 0; x < ARGUS_PIXELS_X; ++x)
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	2b07      	cmp	r3, #7
 8002aa2:	d9c8      	bls.n	8002a36 <Serialize_MeasurementData_3D+0x18e>
            }
        }
    }
    if (!(res->PixelRef.Status & PIXEL_OFF))
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f893 31b0 	ldrb.w	r3, [r3, #432]	@ 0x1b0
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d106      	bne.n	8002ac0 <Serialize_MeasurementData_3D+0x218>
    {
        SCI_Frame_Queue16u(frame, res->PixelRef.Amplitude);
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	f8b3 31ae 	ldrh.w	r3, [r3, #430]	@ 0x1ae
 8002ab8:	4619      	mov	r1, r3
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f003 f849 	bl	8005b52 <SCI_Frame_Queue16u>
    }

    if (res->Debug != 0) // if debug mode is enabled
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d049      	beq.n	8002b5e <Serialize_MeasurementData_3D+0x2b6>
    {
        for (uint_fast8_t x = 0; x < ARGUS_PIXELS_X; ++x)
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	e033      	b.n	8002b38 <Serialize_MeasurementData_3D+0x290>
        {
            for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	e02a      	b.n	8002b2c <Serialize_MeasurementData_3D+0x284>
            {
                if (!(res->Pixel[x][y].Status & PIXEL_OFF))
 8002ad6:	68b8      	ldr	r0, [r7, #8]
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	6979      	ldr	r1, [r7, #20]
 8002adc:	461a      	mov	r2, r3
 8002ade:	0052      	lsls	r2, r2, #1
 8002ae0:	441a      	add	r2, r3
 8002ae2:	0093      	lsls	r3, r2, #2
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	440b      	add	r3, r1
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	4413      	add	r3, r2
 8002af0:	4403      	add	r3, r0
 8002af2:	3330      	adds	r3, #48	@ 0x30
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d113      	bne.n	8002b26 <Serialize_MeasurementData_3D+0x27e>
                {
                    SCI_Frame_Queue16u(frame, res->Pixel[x][y].Phase);
 8002afe:	68b8      	ldr	r0, [r7, #8]
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	6979      	ldr	r1, [r7, #20]
 8002b04:	461a      	mov	r2, r3
 8002b06:	0052      	lsls	r2, r2, #1
 8002b08:	441a      	add	r2, r3
 8002b0a:	0093      	lsls	r3, r2, #2
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	460b      	mov	r3, r1
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	440b      	add	r3, r1
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	4413      	add	r3, r2
 8002b18:	4403      	add	r3, r0
 8002b1a:	332c      	adds	r3, #44	@ 0x2c
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	4619      	mov	r1, r3
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f003 f816 	bl	8005b52 <SCI_Frame_Queue16u>
            for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d9d1      	bls.n	8002ad6 <Serialize_MeasurementData_3D+0x22e>
        for (uint_fast8_t x = 0; x < ARGUS_PIXELS_X; ++x)
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	3301      	adds	r3, #1
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	2b07      	cmp	r3, #7
 8002b3c:	d9c8      	bls.n	8002ad0 <Serialize_MeasurementData_3D+0x228>
                }
            }
        }
        if (!(res->PixelRef.Status & PIXEL_OFF))
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	f893 31b0 	ldrb.w	r3, [r3, #432]	@ 0x1b0
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d108      	bne.n	8002b5e <Serialize_MeasurementData_3D+0x2b6>
        {
            SCI_Frame_Queue16u(frame, res->PixelRef.Phase);
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	@ 0x1ac
 8002b52:	4619      	mov	r1, r3
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f002 fffc 	bl	8005b52 <SCI_Frame_Queue16u>
 8002b5a:	e000      	b.n	8002b5e <Serialize_MeasurementData_3D+0x2b6>
    if (type == CMD_MEASUREMENT_DATA_1D) return;
 8002b5c:	bf00      	nop
        }
    }
}
 8002b5e:	3730      	adds	r7, #48	@ 0x30
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	007fffff 	.word	0x007fffff

08002b68 <Serialize_MeasurementData_1D>:

static void Serialize_MeasurementData_1D(sci_frame_t * frame, argus_results_t const * res, sci_cmd_t type)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	4613      	mov	r3, r2
 8002b74:	71fb      	strb	r3, [r7, #7]
    if (type == CMD_MEASUREMENT_DATA_3D) return;
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	2b34      	cmp	r3, #52	@ 0x34
 8002b7a:	d023      	beq.n	8002bc4 <Serialize_MeasurementData_1D+0x5c>

    SCI_Frame_Queue24s(frame, PARSE_RANGE(res->Bin.Range));
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 8002b82:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d008      	beq.n	8002b9c <Serialize_MeasurementData_1D+0x34>
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 8002b90:	2108      	movs	r1, #8
 8002b92:	4618      	mov	r0, r3
 8002b94:	f00f fd28 	bl	80125e8 <fp_rnds>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	e000      	b.n	8002b9e <Serialize_MeasurementData_1D+0x36>
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002bcc <Serialize_MeasurementData_1D+0x64>)
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f003 f882 	bl	8005caa <SCI_Frame_Queue24s>
    SCI_Frame_Queue16u(frame, res->Bin.Amplitude);
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	f8b3 31b8 	ldrh.w	r3, [r3, #440]	@ 0x1b8
 8002bac:	4619      	mov	r1, r3
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f002 ffcf 	bl	8005b52 <SCI_Frame_Queue16u>
    SCI_Frame_Queue08u(frame, res->Bin.SignalQuality);
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f893 31ba 	ldrb.w	r3, [r3, #442]	@ 0x1ba
 8002bba:	4619      	mov	r1, r3
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f002 ffa3 	bl	8005b08 <SCI_Frame_Queue08u>
 8002bc2:	e000      	b.n	8002bc6 <Serialize_MeasurementData_1D+0x5e>
    if (type == CMD_MEASUREMENT_DATA_3D) return;
 8002bc4:	bf00      	nop
}
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	007fffff 	.word	0x007fffff

08002bd0 <Serialize_MeasurementData_Aux>:
static void Serialize_MeasurementData_Aux(sci_frame_t * frame, argus_results_t const * res, sci_cmd_t type)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	71fb      	strb	r3, [r7, #7]
    if (type != CMD_MEASUREMENT_DATA_FULL && res->Debug == 0) return;
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	2b32      	cmp	r3, #50	@ 0x32
 8002be2:	d004      	beq.n	8002bee <Serialize_MeasurementData_Aux+0x1e>
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d031      	beq.n	8002c52 <Serialize_MeasurementData_Aux+0x82>

    SCI_Frame_Queue16u(frame, res->Auxiliary.VDD);
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	f8b3 31bc 	ldrh.w	r3, [r3, #444]	@ 0x1bc
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f002 ffab 	bl	8005b52 <SCI_Frame_Queue16u>
    SCI_Frame_Queue16u(frame, res->Auxiliary.VDDL);
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	f8b3 31c2 	ldrh.w	r3, [r3, #450]	@ 0x1c2
 8002c02:	4619      	mov	r1, r3
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f002 ffa4 	bl	8005b52 <SCI_Frame_Queue16u>
    SCI_Frame_Queue16u(frame, res->Auxiliary.VSUB);
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	f8b3 31c0 	ldrh.w	r3, [r3, #448]	@ 0x1c0
 8002c10:	4619      	mov	r1, r3
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f002 ff9d 	bl	8005b52 <SCI_Frame_Queue16u>
    SCI_Frame_Queue16u(frame, res->Auxiliary.IAPD);
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f8b3 31c4 	ldrh.w	r3, [r3, #452]	@ 0x1c4
 8002c1e:	4619      	mov	r1, r3
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f002 ff96 	bl	8005b52 <SCI_Frame_Queue16u>
    SCI_Frame_Queue16s(frame, res->Auxiliary.TEMP);
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	@ 0x1be
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f003 f822 	bl	8005c78 <SCI_Frame_Queue16s>
    SCI_Frame_Queue16u(frame, res->Auxiliary.BGL);
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	@ 0x1c6
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f002 ff88 	bl	8005b52 <SCI_Frame_Queue16u>
    SCI_Frame_Queue16u(frame, res->Auxiliary.SNA);
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	f8b3 31c8 	ldrh.w	r3, [r3, #456]	@ 0x1c8
 8002c48:	4619      	mov	r1, r3
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f002 ff81 	bl	8005b52 <SCI_Frame_Queue16u>
 8002c50:	e000      	b.n	8002c54 <Serialize_MeasurementData_Aux+0x84>
    if (type != CMD_MEASUREMENT_DATA_FULL && res->Debug == 0) return;
 8002c52:	bf00      	nop
}
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <Serialize_MeasurementData_Debug>:
static void Serialize_MeasurementData_Debug(sci_frame_t * frame, argus_results_t const * res, sci_cmd_t type)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b086      	sub	sp, #24
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	60f8      	str	r0, [r7, #12]
 8002c62:	60b9      	str	r1, [r7, #8]
 8002c64:	4613      	mov	r3, r2
 8002c66:	71fb      	strb	r3, [r7, #7]
    (void) type; // unused
    if (res->Debug == 0) return;
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d069      	beq.n	8002d46 <Serialize_MeasurementData_Debug+0xec>

    SCI_Frame_Queue32u(frame, res->Frame.IntegrationTime);
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	4619      	mov	r1, r3
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f002 ffb1 	bl	8005be0 <SCI_Frame_Queue32u>
    SCI_Frame_Queue08u(frame, res->Frame.BiasCurrent);
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002c84:	4619      	mov	r1, r3
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f002 ff3e 	bl	8005b08 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08s(frame, res->Frame.PllOffset);
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f993 3024 	ldrsb.w	r3, [r3, #36]	@ 0x24
 8002c92:	4619      	mov	r1, r3
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f002 ffc7 	bl	8005c28 <SCI_Frame_Queue08s>
    SCI_Frame_Queue08u(frame, res->Frame.PllCtrlCur);
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f002 ff30 	bl	8005b08 <SCI_Frame_Queue08u>

    SCI_Frame_Queue16u(frame, res->Debug->DCAAmplitude);
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f002 ff4d 	bl	8005b52 <SCI_Frame_Queue16u>

    /* Crosstalk Values */
    for (uint_fast8_t y = 0; y < (ARGUS_PIXELS_Y >> 1); ++y)
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	e01c      	b.n	8002cf8 <Serialize_MeasurementData_Debug+0x9e>
    {
        SCI_Frame_Queue16s(frame, res->Debug->XtalkPredictor[y].dS);
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	f8d3 21cc 	ldr.w	r2, [r3, #460]	@ 0x1cc
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	3384      	adds	r3, #132	@ 0x84
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f002 ffd0 	bl	8005c78 <SCI_Frame_Queue16s>
        SCI_Frame_Queue16s(frame, res->Debug->XtalkPredictor[y].dC);
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f8d3 21cc 	ldr.w	r2, [r3, #460]	@ 0x1cc
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	3384      	adds	r3, #132	@ 0x84
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002cea:	4619      	mov	r1, r3
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f002 ffc3 	bl	8005c78 <SCI_Frame_Queue16s>
    for (uint_fast8_t y = 0; y < (ARGUS_PIXELS_Y >> 1); ++y)
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d9df      	bls.n	8002cbe <Serialize_MeasurementData_Debug+0x64>
    }
    for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 8002cfe:	2300      	movs	r3, #0
 8002d00:	613b      	str	r3, [r7, #16]
 8002d02:	e01c      	b.n	8002d3e <Serialize_MeasurementData_Debug+0xe4>
    {
        SCI_Frame_Queue16s(frame, res->Debug->XtalkMonitor[y].dS);
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f8d3 21cc 	ldr.w	r2, [r3, #460]	@ 0x1cc
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	3386      	adds	r3, #134	@ 0x86
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d16:	4619      	mov	r1, r3
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f002 ffad 	bl	8005c78 <SCI_Frame_Queue16s>
        SCI_Frame_Queue16s(frame, res->Debug->XtalkMonitor[y].dC);
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f8d3 21cc 	ldr.w	r2, [r3, #460]	@ 0x1cc
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	3386      	adds	r3, #134	@ 0x86
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002d30:	4619      	mov	r1, r3
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f002 ffa0 	bl	8005c78 <SCI_Frame_Queue16s>
    for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	d9df      	bls.n	8002d04 <Serialize_MeasurementData_Debug+0xaa>
 8002d44:	e000      	b.n	8002d48 <Serialize_MeasurementData_Debug+0xee>
    if (res->Debug == 0) return;
 8002d46:	bf00      	nop
    }
}
 8002d48:	3718      	adds	r7, #24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
	...

08002d50 <Serialize_MeasurementData>:
static void Serialize_MeasurementData(sci_frame_t * frame, argus_results_t const * res, sci_cmd_t type)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	71fb      	strb	r3, [r7, #7]
    assert((type == CMD_MEASUREMENT_DATA_FULL) ||
 8002d5e:	79fb      	ldrb	r3, [r7, #7]
 8002d60:	2b32      	cmp	r3, #50	@ 0x32
 8002d62:	d015      	beq.n	8002d90 <Serialize_MeasurementData+0x40>
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	2b31      	cmp	r3, #49	@ 0x31
 8002d68:	d012      	beq.n	8002d90 <Serialize_MeasurementData+0x40>
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	2b34      	cmp	r3, #52	@ 0x34
 8002d6e:	d00f      	beq.n	8002d90 <Serialize_MeasurementData+0x40>
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	2b33      	cmp	r3, #51	@ 0x33
 8002d74:	d00c      	beq.n	8002d90 <Serialize_MeasurementData+0x40>
 8002d76:	79fb      	ldrb	r3, [r7, #7]
 8002d78:	2b36      	cmp	r3, #54	@ 0x36
 8002d7a:	d009      	beq.n	8002d90 <Serialize_MeasurementData+0x40>
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	2b35      	cmp	r3, #53	@ 0x35
 8002d80:	d006      	beq.n	8002d90 <Serialize_MeasurementData+0x40>
 8002d82:	4b2c      	ldr	r3, [pc, #176]	@ (8002e34 <Serialize_MeasurementData+0xe4>)
 8002d84:	4a2c      	ldr	r2, [pc, #176]	@ (8002e38 <Serialize_MeasurementData+0xe8>)
 8002d86:	f240 1103 	movw	r1, #259	@ 0x103
 8002d8a:	482c      	ldr	r0, [pc, #176]	@ (8002e3c <Serialize_MeasurementData+0xec>)
 8002d8c:	f004 fb18 	bl	80073c0 <__assert_func>

    /* For message types w/ DEBUG, the res.Debug structure must be available!
     * For message types w/o DEBUG, the res.Debug structure must be null!
     * DEBUG types are odd, i.e. check for (type & 0x01).
     * Not DEBUG types are even, i.e. check for !(type & 0x01). */
    assert(((type & 0x01) && (res->Debug != 0)) || (!(type & 0x01) && (res->Debug == 0)));
 8002d90:	79fb      	ldrb	r3, [r7, #7]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d004      	beq.n	8002da4 <Serialize_MeasurementData+0x54>
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d110      	bne.n	8002dc6 <Serialize_MeasurementData+0x76>
 8002da4:	79fb      	ldrb	r3, [r7, #7]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d104      	bne.n	8002db8 <Serialize_MeasurementData+0x68>
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d006      	beq.n	8002dc6 <Serialize_MeasurementData+0x76>
 8002db8:	4b21      	ldr	r3, [pc, #132]	@ (8002e40 <Serialize_MeasurementData+0xf0>)
 8002dba:	4a1f      	ldr	r2, [pc, #124]	@ (8002e38 <Serialize_MeasurementData+0xe8>)
 8002dbc:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002dc0:	481e      	ldr	r0, [pc, #120]	@ (8002e3c <Serialize_MeasurementData+0xec>)
 8002dc2:	f004 fafd 	bl	80073c0 <__assert_func>

    /* remove _DEBUG, its determined by res.Debug */
    if (type & 0x01) type++;
 8002dc6:	79fb      	ldrb	r3, [r7, #7]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <Serialize_MeasurementData+0x86>
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	71fb      	strb	r3, [r7, #7]

    Serialize_MeasurementData_Generic(frame, res, type);
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	68b9      	ldr	r1, [r7, #8]
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f7ff fc57 	bl	8002690 <Serialize_MeasurementData_Generic>
    Serialize_MeasurementData_FrameConfig(frame, res, type);
 8002de2:	79fb      	ldrb	r3, [r7, #7]
 8002de4:	461a      	mov	r2, r3
 8002de6:	68b9      	ldr	r1, [r7, #8]
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f7ff fc7f 	bl	80026ec <Serialize_MeasurementData_FrameConfig>
    Serialize_MeasurementData_RawData(frame, res, type);
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	461a      	mov	r2, r3
 8002df2:	68b9      	ldr	r1, [r7, #8]
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f7ff fcfa 	bl	80027ee <Serialize_MeasurementData_RawData>
    Serialize_MeasurementData_3D(frame, res, type);
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	68b9      	ldr	r1, [r7, #8]
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f7ff fd51 	bl	80028a8 <Serialize_MeasurementData_3D>
    Serialize_MeasurementData_1D(frame, res, type);
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	68b9      	ldr	r1, [r7, #8]
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f7ff feab 	bl	8002b68 <Serialize_MeasurementData_1D>
    Serialize_MeasurementData_Aux(frame, res, type);
 8002e12:	79fb      	ldrb	r3, [r7, #7]
 8002e14:	461a      	mov	r2, r3
 8002e16:	68b9      	ldr	r1, [r7, #8]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f7ff fed9 	bl	8002bd0 <Serialize_MeasurementData_Aux>
    Serialize_MeasurementData_Debug(frame, res, type);
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	461a      	mov	r2, r3
 8002e22:	68b9      	ldr	r1, [r7, #8]
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f7ff ff18 	bl	8002c5a <Serialize_MeasurementData_Debug>
}
 8002e2a:	bf00      	nop
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	0802b364 	.word	0x0802b364
 8002e38:	0802c364 	.word	0x0802c364
 8002e3c:	0802b330 	.word	0x0802b330
 8002e40:	0802b458 	.word	0x0802b458

08002e44 <TxCmd_MeasurementDataFullDebug>:
/*******************************************************************************
 * Command Functions
 ******************************************************************************/

static status_t TxCmd_MeasurementDataFullDebug(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	607a      	str	r2, [r7, #4]
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	4603      	mov	r3, r0
 8002e52:	73fb      	strb	r3, [r7, #15]
    (void)param;
    (void)deviceID; /* deviceID is selected through the 'data' parameter, which corresponds to the desired device */
    assert(frame != 0);
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d106      	bne.n	8002e68 <TxCmd_MeasurementDataFullDebug+0x24>
 8002e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e88 <TxCmd_MeasurementDataFullDebug+0x44>)
 8002e5c:	4a0b      	ldr	r2, [pc, #44]	@ (8002e8c <TxCmd_MeasurementDataFullDebug+0x48>)
 8002e5e:	f240 1125 	movw	r1, #293	@ 0x125
 8002e62:	480b      	ldr	r0, [pc, #44]	@ (8002e90 <TxCmd_MeasurementDataFullDebug+0x4c>)
 8002e64:	f004 faac 	bl	80073c0 <__assert_func>
    if (data == 0) return ERROR_INVALID_ARGUMENT;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d102      	bne.n	8002e74 <TxCmd_MeasurementDataFullDebug+0x30>
 8002e6e:	f06f 0304 	mvn.w	r3, #4
 8002e72:	e005      	b.n	8002e80 <TxCmd_MeasurementDataFullDebug+0x3c>
    Serialize_MeasurementData(frame, (argus_results_t const *) data, CMD_MEASUREMENT_DATA_FULL_DEBUG);
 8002e74:	2231      	movs	r2, #49	@ 0x31
 8002e76:	6839      	ldr	r1, [r7, #0]
 8002e78:	68b8      	ldr	r0, [r7, #8]
 8002e7a:	f7ff ff69 	bl	8002d50 <Serialize_MeasurementData>
    return STATUS_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	0802b4a8 	.word	0x0802b4a8
 8002e8c:	0802c380 	.word	0x0802c380
 8002e90:	0802b330 	.word	0x0802b330

08002e94 <TxCmd_MeasurementDataFull>:

static status_t TxCmd_MeasurementDataFull(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	607a      	str	r2, [r7, #4]
 8002e9e:	603b      	str	r3, [r7, #0]
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	73fb      	strb	r3, [r7, #15]
    (void)param;
    (void)deviceID; /* deviceID is selected through the 'data' parameter, which corresponds to the desired device */
    assert(frame != 0);
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d106      	bne.n	8002eb8 <TxCmd_MeasurementDataFull+0x24>
 8002eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed8 <TxCmd_MeasurementDataFull+0x44>)
 8002eac:	4a0b      	ldr	r2, [pc, #44]	@ (8002edc <TxCmd_MeasurementDataFull+0x48>)
 8002eae:	f240 112f 	movw	r1, #303	@ 0x12f
 8002eb2:	480b      	ldr	r0, [pc, #44]	@ (8002ee0 <TxCmd_MeasurementDataFull+0x4c>)
 8002eb4:	f004 fa84 	bl	80073c0 <__assert_func>
    if (data == 0) return ERROR_INVALID_ARGUMENT;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d102      	bne.n	8002ec4 <TxCmd_MeasurementDataFull+0x30>
 8002ebe:	f06f 0304 	mvn.w	r3, #4
 8002ec2:	e005      	b.n	8002ed0 <TxCmd_MeasurementDataFull+0x3c>
    Serialize_MeasurementData(frame, (argus_results_t const *) data, CMD_MEASUREMENT_DATA_FULL);
 8002ec4:	2232      	movs	r2, #50	@ 0x32
 8002ec6:	6839      	ldr	r1, [r7, #0]
 8002ec8:	68b8      	ldr	r0, [r7, #8]
 8002eca:	f7ff ff41 	bl	8002d50 <Serialize_MeasurementData>
    return STATUS_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	0802b4a8 	.word	0x0802b4a8
 8002edc:	0802c3a0 	.word	0x0802c3a0
 8002ee0:	0802b330 	.word	0x0802b330

08002ee4 <TxCmd_MeasurementData3DDebug>:

static status_t TxCmd_MeasurementData3DDebug(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	607a      	str	r2, [r7, #4]
 8002eee:	603b      	str	r3, [r7, #0]
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	73fb      	strb	r3, [r7, #15]
    (void)param;
    (void)deviceID; /* deviceID is selected through the 'data' parameter, which corresponds to the desired device */
    assert(frame != 0);
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d106      	bne.n	8002f08 <TxCmd_MeasurementData3DDebug+0x24>
 8002efa:	4b0b      	ldr	r3, [pc, #44]	@ (8002f28 <TxCmd_MeasurementData3DDebug+0x44>)
 8002efc:	4a0b      	ldr	r2, [pc, #44]	@ (8002f2c <TxCmd_MeasurementData3DDebug+0x48>)
 8002efe:	f240 1139 	movw	r1, #313	@ 0x139
 8002f02:	480b      	ldr	r0, [pc, #44]	@ (8002f30 <TxCmd_MeasurementData3DDebug+0x4c>)
 8002f04:	f004 fa5c 	bl	80073c0 <__assert_func>
    if (data == 0) return ERROR_INVALID_ARGUMENT;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d102      	bne.n	8002f14 <TxCmd_MeasurementData3DDebug+0x30>
 8002f0e:	f06f 0304 	mvn.w	r3, #4
 8002f12:	e005      	b.n	8002f20 <TxCmd_MeasurementData3DDebug+0x3c>
    Serialize_MeasurementData(frame, (argus_results_t const *) data, CMD_MEASUREMENT_DATA_3D_DEBUG);
 8002f14:	2233      	movs	r2, #51	@ 0x33
 8002f16:	6839      	ldr	r1, [r7, #0]
 8002f18:	68b8      	ldr	r0, [r7, #8]
 8002f1a:	f7ff ff19 	bl	8002d50 <Serialize_MeasurementData>
    return STATUS_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	0802b4a8 	.word	0x0802b4a8
 8002f2c:	0802c3bc 	.word	0x0802c3bc
 8002f30:	0802b330 	.word	0x0802b330

08002f34 <TxCmd_MeasurementData3D>:

static status_t TxCmd_MeasurementData3D(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	607a      	str	r2, [r7, #4]
 8002f3e:	603b      	str	r3, [r7, #0]
 8002f40:	4603      	mov	r3, r0
 8002f42:	73fb      	strb	r3, [r7, #15]
    (void)param;
    (void)deviceID; /* deviceID is selected through the 'data' parameter, which corresponds to the desired device */
    assert(frame != 0);
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <TxCmd_MeasurementData3D+0x24>
 8002f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f78 <TxCmd_MeasurementData3D+0x44>)
 8002f4c:	4a0b      	ldr	r2, [pc, #44]	@ (8002f7c <TxCmd_MeasurementData3D+0x48>)
 8002f4e:	f240 1143 	movw	r1, #323	@ 0x143
 8002f52:	480b      	ldr	r0, [pc, #44]	@ (8002f80 <TxCmd_MeasurementData3D+0x4c>)
 8002f54:	f004 fa34 	bl	80073c0 <__assert_func>
    if (data == 0) return ERROR_INVALID_ARGUMENT;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d102      	bne.n	8002f64 <TxCmd_MeasurementData3D+0x30>
 8002f5e:	f06f 0304 	mvn.w	r3, #4
 8002f62:	e005      	b.n	8002f70 <TxCmd_MeasurementData3D+0x3c>
    Serialize_MeasurementData(frame, (argus_results_t const *) data, CMD_MEASUREMENT_DATA_3D);
 8002f64:	2234      	movs	r2, #52	@ 0x34
 8002f66:	6839      	ldr	r1, [r7, #0]
 8002f68:	68b8      	ldr	r0, [r7, #8]
 8002f6a:	f7ff fef1 	bl	8002d50 <Serialize_MeasurementData>
    return STATUS_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	0802b4a8 	.word	0x0802b4a8
 8002f7c:	0802c3dc 	.word	0x0802c3dc
 8002f80:	0802b330 	.word	0x0802b330

08002f84 <TxCmd_MeasurementData1DDebug>:

static status_t TxCmd_MeasurementData1DDebug(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	607a      	str	r2, [r7, #4]
 8002f8e:	603b      	str	r3, [r7, #0]
 8002f90:	4603      	mov	r3, r0
 8002f92:	73fb      	strb	r3, [r7, #15]
    (void)param;
    (void)deviceID; /* deviceID is selected through the 'data' parameter, which corresponds to the desired device */
    assert(frame != 0);
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d106      	bne.n	8002fa8 <TxCmd_MeasurementData1DDebug+0x24>
 8002f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc8 <TxCmd_MeasurementData1DDebug+0x44>)
 8002f9c:	4a0b      	ldr	r2, [pc, #44]	@ (8002fcc <TxCmd_MeasurementData1DDebug+0x48>)
 8002f9e:	f240 114d 	movw	r1, #333	@ 0x14d
 8002fa2:	480b      	ldr	r0, [pc, #44]	@ (8002fd0 <TxCmd_MeasurementData1DDebug+0x4c>)
 8002fa4:	f004 fa0c 	bl	80073c0 <__assert_func>
    if (data == 0) return ERROR_INVALID_ARGUMENT;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d102      	bne.n	8002fb4 <TxCmd_MeasurementData1DDebug+0x30>
 8002fae:	f06f 0304 	mvn.w	r3, #4
 8002fb2:	e005      	b.n	8002fc0 <TxCmd_MeasurementData1DDebug+0x3c>
    Serialize_MeasurementData(frame, (argus_results_t const *) data, CMD_MEASUREMENT_DATA_1D_DEBUG);
 8002fb4:	2235      	movs	r2, #53	@ 0x35
 8002fb6:	6839      	ldr	r1, [r7, #0]
 8002fb8:	68b8      	ldr	r0, [r7, #8]
 8002fba:	f7ff fec9 	bl	8002d50 <Serialize_MeasurementData>
    return STATUS_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	0802b4a8 	.word	0x0802b4a8
 8002fcc:	0802c3f4 	.word	0x0802c3f4
 8002fd0:	0802b330 	.word	0x0802b330

08002fd4 <TxCmd_MeasurementData1D>:

static status_t TxCmd_MeasurementData1D(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	607a      	str	r2, [r7, #4]
 8002fde:	603b      	str	r3, [r7, #0]
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	73fb      	strb	r3, [r7, #15]
    (void)param;
    (void)deviceID; /* deviceID is selected through the 'data' parameter, which corresponds to the desired device */
    assert(frame != 0);
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d106      	bne.n	8002ff8 <TxCmd_MeasurementData1D+0x24>
 8002fea:	4b0b      	ldr	r3, [pc, #44]	@ (8003018 <TxCmd_MeasurementData1D+0x44>)
 8002fec:	4a0b      	ldr	r2, [pc, #44]	@ (800301c <TxCmd_MeasurementData1D+0x48>)
 8002fee:	f240 1157 	movw	r1, #343	@ 0x157
 8002ff2:	480b      	ldr	r0, [pc, #44]	@ (8003020 <TxCmd_MeasurementData1D+0x4c>)
 8002ff4:	f004 f9e4 	bl	80073c0 <__assert_func>
    if (data == 0) return ERROR_INVALID_ARGUMENT;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d102      	bne.n	8003004 <TxCmd_MeasurementData1D+0x30>
 8002ffe:	f06f 0304 	mvn.w	r3, #4
 8003002:	e005      	b.n	8003010 <TxCmd_MeasurementData1D+0x3c>
    Serialize_MeasurementData(frame, (argus_results_t const *) data, CMD_MEASUREMENT_DATA_1D);
 8003004:	2236      	movs	r2, #54	@ 0x36
 8003006:	6839      	ldr	r1, [r7, #0]
 8003008:	68b8      	ldr	r0, [r7, #8]
 800300a:	f7ff fea1 	bl	8002d50 <Serialize_MeasurementData>
    return STATUS_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	0802b4a8 	.word	0x0802b4a8
 800301c:	0802c414 	.word	0x0802c414
 8003020:	0802b330 	.word	0x0802b330

08003024 <ExplorerAPI_InitData>:

/*******************************************************************************
 * Init Code
 ******************************************************************************/
status_t ExplorerAPI_InitData(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
    status_t
    status = SCI_SetTxCommand(CMD_MEASUREMENT_DATA_FULL_DEBUG, TxCmd_MeasurementDataFullDebug);
 800302a:	4920      	ldr	r1, [pc, #128]	@ (80030ac <ExplorerAPI_InitData+0x88>)
 800302c:	2031      	movs	r0, #49	@ 0x31
 800302e:	f001 faf0 	bl	8004612 <SCI_SetTxCommand>
 8003032:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	da01      	bge.n	800303e <ExplorerAPI_InitData+0x1a>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	e032      	b.n	80030a4 <ExplorerAPI_InitData+0x80>
    status = SCI_SetTxCommand(CMD_MEASUREMENT_DATA_FULL, TxCmd_MeasurementDataFull);
 800303e:	491c      	ldr	r1, [pc, #112]	@ (80030b0 <ExplorerAPI_InitData+0x8c>)
 8003040:	2032      	movs	r0, #50	@ 0x32
 8003042:	f001 fae6 	bl	8004612 <SCI_SetTxCommand>
 8003046:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	da01      	bge.n	8003052 <ExplorerAPI_InitData+0x2e>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	e028      	b.n	80030a4 <ExplorerAPI_InitData+0x80>
    status = SCI_SetTxCommand(CMD_MEASUREMENT_DATA_1D_DEBUG, TxCmd_MeasurementData1DDebug);
 8003052:	4918      	ldr	r1, [pc, #96]	@ (80030b4 <ExplorerAPI_InitData+0x90>)
 8003054:	2035      	movs	r0, #53	@ 0x35
 8003056:	f001 fadc 	bl	8004612 <SCI_SetTxCommand>
 800305a:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	da01      	bge.n	8003066 <ExplorerAPI_InitData+0x42>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	e01e      	b.n	80030a4 <ExplorerAPI_InitData+0x80>
    status = SCI_SetTxCommand(CMD_MEASUREMENT_DATA_1D, TxCmd_MeasurementData1D);
 8003066:	4914      	ldr	r1, [pc, #80]	@ (80030b8 <ExplorerAPI_InitData+0x94>)
 8003068:	2036      	movs	r0, #54	@ 0x36
 800306a:	f001 fad2 	bl	8004612 <SCI_SetTxCommand>
 800306e:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	da01      	bge.n	800307a <ExplorerAPI_InitData+0x56>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	e014      	b.n	80030a4 <ExplorerAPI_InitData+0x80>
    status = SCI_SetTxCommand(CMD_MEASUREMENT_DATA_3D_DEBUG, TxCmd_MeasurementData3DDebug);
 800307a:	4910      	ldr	r1, [pc, #64]	@ (80030bc <ExplorerAPI_InitData+0x98>)
 800307c:	2033      	movs	r0, #51	@ 0x33
 800307e:	f001 fac8 	bl	8004612 <SCI_SetTxCommand>
 8003082:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	da01      	bge.n	800308e <ExplorerAPI_InitData+0x6a>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	e00a      	b.n	80030a4 <ExplorerAPI_InitData+0x80>
    status = SCI_SetTxCommand(CMD_MEASUREMENT_DATA_3D, TxCmd_MeasurementData3D);
 800308e:	490c      	ldr	r1, [pc, #48]	@ (80030c0 <ExplorerAPI_InitData+0x9c>)
 8003090:	2034      	movs	r0, #52	@ 0x34
 8003092:	f001 fabe 	bl	8004612 <SCI_SetTxCommand>
 8003096:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	da01      	bge.n	80030a2 <ExplorerAPI_InitData+0x7e>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	e000      	b.n	80030a4 <ExplorerAPI_InitData+0x80>

    return status;
 80030a2:	687b      	ldr	r3, [r7, #4]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	08002e45 	.word	0x08002e45
 80030b0:	08002e95 	.word	0x08002e95
 80030b4:	08002f85 	.word	0x08002f85
 80030b8:	08002fd5 	.word	0x08002fd5
 80030bc:	08002ee5 	.word	0x08002ee5
 80030c0:	08002f35 	.word	0x08002f35

080030c4 <argus_explorer_app>:
 *          This function should never be exited.
 *
 * @return  Function never returns...
 *****************************************************************************/
void argus_explorer_app(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
    ExplorerApp_Init();
 80030c8:	f000 f834 	bl	8003134 <ExplorerApp_Init>
    ExplorerApp_Run();
 80030cc:	f000 f980 	bl	80033d0 <ExplorerApp_Run>
}
 80030d0:	bf00      	nop
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <ExplorerApp_InitCommands>:

/*******************************************************************************
 * Code
 ******************************************************************************/
static status_t ExplorerApp_InitCommands()
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
    status_t status = SCI_Init();
 80030da:	f001 fa1d 	bl	8004518 <SCI_Init>
 80030de:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	da01      	bge.n	80030ea <ExplorerApp_InitCommands+0x16>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	e020      	b.n	800312c <ExplorerApp_InitCommands+0x58>

    status = ExplorerAPI_InitGeneral();
 80030ea:	f7fd fd2d 	bl	8000b48 <ExplorerAPI_InitGeneral>
 80030ee:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	da01      	bge.n	80030fa <ExplorerApp_InitCommands+0x26>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	e018      	b.n	800312c <ExplorerApp_InitCommands+0x58>

    status = ExplorerAPI_InitData();
 80030fa:	f7ff ff93 	bl	8003024 <ExplorerAPI_InitData>
 80030fe:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	da01      	bge.n	800310a <ExplorerApp_InitCommands+0x36>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	e010      	b.n	800312c <ExplorerApp_InitCommands+0x58>

    status = ExplorerAPI_InitCfg();
 800310a:	f7ff fa11 	bl	8002530 <ExplorerAPI_InitCfg>
 800310e:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	da01      	bge.n	800311a <ExplorerApp_InitCommands+0x46>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	e008      	b.n	800312c <ExplorerApp_InitCommands+0x58>

    status = ExplorerAPI_InitCal();
 800311a:	f7fe faa9 	bl	8001670 <ExplorerAPI_InitCal>
 800311e:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	da01      	bge.n	800312a <ExplorerApp_InitCommands+0x56>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	e000      	b.n	800312c <ExplorerApp_InitCommands+0x58>

    return status;
 800312a:	687b      	ldr	r3, [r7, #4]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <ExplorerApp_Init>:

status_t ExplorerApp_Init()
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
    //Debug_ResetStackUsage();

    /* Initialize the board hardware /w watchdog timer disabled */
    status_t status = Board_Init();
 800313a:	f003 f975 	bl	8006428 <Board_Init>
 800313e:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	da09      	bge.n	800315a <ExplorerApp_Init+0x26>
    {
        error_log("Board initialization failed, error code: %d", status);
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4824      	ldr	r0, [pc, #144]	@ (80031dc <ExplorerApp_Init+0xa8>)
 800314a:	f00f ff23 	bl	8012f94 <print>
        assert(0);
 800314e:	4b24      	ldr	r3, [pc, #144]	@ (80031e0 <ExplorerApp_Init+0xac>)
 8003150:	4a24      	ldr	r2, [pc, #144]	@ (80031e4 <ExplorerApp_Init+0xb0>)
 8003152:	2173      	movs	r1, #115	@ 0x73
 8003154:	4824      	ldr	r0, [pc, #144]	@ (80031e8 <ExplorerApp_Init+0xb4>)
 8003156:	f004 f933 	bl	80073c0 <__assert_func>
#if defined(CPU_MKL46Z256VLH4) || defined(CPU_MKL46Z256VLL4) || defined(CPU_MKL46Z256VMC4) || defined(CPU_MKL46Z256VMP4)
    SLCD_DisplayBar();
#endif

    /* Initialize the systems communication interface. */
    status = ExplorerApp_InitCommands();
 800315a:	f7ff ffbb 	bl	80030d4 <ExplorerApp_InitCommands>
 800315e:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	da05      	bge.n	8003172 <ExplorerApp_Init+0x3e>
    {
        assert(0);
 8003166:	4b1e      	ldr	r3, [pc, #120]	@ (80031e0 <ExplorerApp_Init+0xac>)
 8003168:	4a1e      	ldr	r2, [pc, #120]	@ (80031e4 <ExplorerApp_Init+0xb0>)
 800316a:	217f      	movs	r1, #127	@ 0x7f
 800316c:	481e      	ldr	r0, [pc, #120]	@ (80031e8 <ExplorerApp_Init+0xb4>)
 800316e:	f004 f927 	bl	80073c0 <__assert_func>
        return status;
    }

    /* Initialize the AFBR-S50 Explorer task scheduler. */
    status = ExplorerApp_InitTasks();
 8003172:	f000 f87b 	bl	800326c <ExplorerApp_InitTasks>
 8003176:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	da05      	bge.n	800318a <ExplorerApp_Init+0x56>
    {
        assert(0);
 800317e:	4b18      	ldr	r3, [pc, #96]	@ (80031e0 <ExplorerApp_Init+0xac>)
 8003180:	4a18      	ldr	r2, [pc, #96]	@ (80031e4 <ExplorerApp_Init+0xb0>)
 8003182:	2187      	movs	r1, #135	@ 0x87
 8003184:	4818      	ldr	r0, [pc, #96]	@ (80031e8 <ExplorerApp_Init+0xb4>)
 8003186:	f004 f91b 	bl	80073c0 <__assert_func>
        return status;
    }

    /* Initialize Devices */
    uint8_t devicesFound = 0;
 800318a:	2300      	movs	r3, #0
 800318c:	70fb      	strb	r3, [r7, #3]
    for (uint8_t deviceID = 1; deviceID <= EXPLORER_DEVICE_ID_MAX; deviceID++)
 800318e:	2301      	movs	r3, #1
 8003190:	70bb      	strb	r3, [r7, #2]
 8003192:	e010      	b.n	80031b6 <ExplorerApp_Init+0x82>
    {
        status = ExplorerApp_InitExplorer(deviceID);
 8003194:	78bb      	ldrb	r3, [r7, #2]
 8003196:	4618      	mov	r0, r3
 8003198:	f001 f872 	bl	8004280 <ExplorerApp_InitExplorer>
 800319c:	6078      	str	r0, [r7, #4]
        if (status == STATUS_OK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d105      	bne.n	80031b0 <ExplorerApp_Init+0x7c>
        {
            devicesFound++;
 80031a4:	78fb      	ldrb	r3, [r7, #3]
 80031a6:	3301      	adds	r3, #1
 80031a8:	70fb      	strb	r3, [r7, #3]
            if (devicesFound == EXPLORER_DEVICE_COUNT) break;
 80031aa:	78fb      	ldrb	r3, [r7, #3]
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d006      	beq.n	80031be <ExplorerApp_Init+0x8a>
    for (uint8_t deviceID = 1; deviceID <= EXPLORER_DEVICE_ID_MAX; deviceID++)
 80031b0:	78bb      	ldrb	r3, [r7, #2]
 80031b2:	3301      	adds	r3, #1
 80031b4:	70bb      	strb	r3, [r7, #2]
 80031b6:	78bb      	ldrb	r3, [r7, #2]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d9eb      	bls.n	8003194 <ExplorerApp_Init+0x60>
 80031bc:	e000      	b.n	80031c0 <ExplorerApp_Init+0x8c>
            if (devicesFound == EXPLORER_DEVICE_COUNT) break;
 80031be:	bf00      	nop
        }
    }

    if (devicesFound == 0)
 80031c0:	78fb      	ldrb	r3, [r7, #3]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d105      	bne.n	80031d2 <ExplorerApp_Init+0x9e>
    {
        assert(0);
 80031c6:	4b06      	ldr	r3, [pc, #24]	@ (80031e0 <ExplorerApp_Init+0xac>)
 80031c8:	4a06      	ldr	r2, [pc, #24]	@ (80031e4 <ExplorerApp_Init+0xb0>)
 80031ca:	2199      	movs	r1, #153	@ 0x99
 80031cc:	4806      	ldr	r0, [pc, #24]	@ (80031e8 <ExplorerApp_Init+0xb4>)
 80031ce:	f004 f8f7 	bl	80073c0 <__assert_func>
        return ERROR_ARGUS_NOT_CONNECTED;
    }

    return status;
 80031d2:	687b      	ldr	r3, [r7, #4]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	0802b4b4 	.word	0x0802b4b4
 80031e0:	0802b4e8 	.word	0x0802b4e8
 80031e4:	0802c42c 	.word	0x0802c42c
 80031e8:	0802b4ec 	.word	0x0802b4ec

080031ec <GetSystemStatus>:

status_t GetSystemStatus(sci_device_t deviceID)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	71fb      	strb	r3, [r7, #7]
    explorer_t * explorer = ExplorerApp_GetExplorerPtr(deviceID);
 80031f6:	79fb      	ldrb	r3, [r7, #7]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 fe8f 	bl	8003f1c <ExplorerApp_GetExplorerPtr>
 80031fe:	60b8      	str	r0, [r7, #8]
    if (explorer == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d102      	bne.n	800320c <GetSystemStatus+0x20>
 8003206:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 800320a:	e022      	b.n	8003252 <GetSystemStatus+0x66>

    assert(explorer != NULL);
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d105      	bne.n	800321e <GetSystemStatus+0x32>
 8003212:	4b12      	ldr	r3, [pc, #72]	@ (800325c <GetSystemStatus+0x70>)
 8003214:	4a12      	ldr	r2, [pc, #72]	@ (8003260 <GetSystemStatus+0x74>)
 8003216:	21a5      	movs	r1, #165	@ 0xa5
 8003218:	4812      	ldr	r0, [pc, #72]	@ (8003264 <GetSystemStatus+0x78>)
 800321a:	f004 f8d1 	bl	80073c0 <__assert_func>
    assert(explorer->Argus != NULL);
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d105      	bne.n	8003232 <GetSystemStatus+0x46>
 8003226:	4b10      	ldr	r3, [pc, #64]	@ (8003268 <GetSystemStatus+0x7c>)
 8003228:	4a0d      	ldr	r2, [pc, #52]	@ (8003260 <GetSystemStatus+0x74>)
 800322a:	21a6      	movs	r1, #166	@ 0xa6
 800322c:	480d      	ldr	r0, [pc, #52]	@ (8003264 <GetSystemStatus+0x78>)
 800322e:	f004 f8c7 	bl	80073c0 <__assert_func>

    status_t status = Argus_GetStatus(explorer->Argus);
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	4618      	mov	r0, r3
 8003238:	f010 fb00 	bl	801383c <Argus_GetStatus>
 800323c:	60f8      	str	r0, [r7, #12]

    if (status == STATUS_IDLE)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d105      	bne.n	8003250 <GetSystemStatus+0x64>
    {
        status = Argus_Ping(explorer->Argus);
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	4618      	mov	r0, r3
 800324a:	f010 fdd1 	bl	8013df0 <Argus_Ping>
 800324e:	60f8      	str	r0, [r7, #12]
    }

    return status;
 8003250:	68fb      	ldr	r3, [r7, #12]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	0802b514 	.word	0x0802b514
 8003260:	0802c440 	.word	0x0802c440
 8003264:	0802b4ec 	.word	0x0802b4ec
 8003268:	0802b528 	.word	0x0802b528

0800326c <ExplorerApp_InitTasks>:
/*******************************************************************************
 * Code
 ******************************************************************************/

status_t ExplorerApp_InitTasks()
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af02      	add	r7, sp, #8
    /* Initialize the task scheduler module. */
    myScheduler = Scheduler_Init();
 8003272:	f002 ff0f 	bl	8006094 <Scheduler_Init>
 8003276:	4603      	mov	r3, r0
 8003278:	4a3f      	ldr	r2, [pc, #252]	@ (8003378 <ExplorerApp_InitTasks+0x10c>)
 800327a:	6013      	str	r3, [r2, #0]
    assert(myScheduler != NULL);
 800327c:	4b3e      	ldr	r3, [pc, #248]	@ (8003378 <ExplorerApp_InitTasks+0x10c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d105      	bne.n	8003290 <ExplorerApp_InitTasks+0x24>
 8003284:	4b3d      	ldr	r3, [pc, #244]	@ (800337c <ExplorerApp_InitTasks+0x110>)
 8003286:	4a3e      	ldr	r2, [pc, #248]	@ (8003380 <ExplorerApp_InitTasks+0x114>)
 8003288:	21c2      	movs	r1, #194	@ 0xc2
 800328a:	483e      	ldr	r0, [pc, #248]	@ (8003384 <ExplorerApp_InitTasks+0x118>)
 800328c:	f004 f898 	bl	80073c0 <__assert_func>
    if (myScheduler == NULL) return ERROR_FAIL;
 8003290:	4b39      	ldr	r3, [pc, #228]	@ (8003378 <ExplorerApp_InitTasks+0x10c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d102      	bne.n	800329e <ExplorerApp_InitTasks+0x32>
 8003298:	f04f 33ff 	mov.w	r3, #4294967295
 800329c:	e068      	b.n	8003370 <ExplorerApp_InitTasks+0x104>

    /* Add tasks. */
    status_t
    status = Scheduler_AddTask(myScheduler, (task_function_t)Task_Error, TASK_ERROR, EventQ_Error,
 800329e:	4b36      	ldr	r3, [pc, #216]	@ (8003378 <ExplorerApp_InitTasks+0x10c>)
 80032a0:	6818      	ldr	r0, [r3, #0]
 80032a2:	4b39      	ldr	r3, [pc, #228]	@ (8003388 <ExplorerApp_InitTasks+0x11c>)
 80032a4:	9301      	str	r3, [sp, #4]
 80032a6:	2306      	movs	r3, #6
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	4b38      	ldr	r3, [pc, #224]	@ (800338c <ExplorerApp_InitTasks+0x120>)
 80032ac:	2207      	movs	r2, #7
 80032ae:	4938      	ldr	r1, [pc, #224]	@ (8003390 <ExplorerApp_InitTasks+0x124>)
 80032b0:	f002 fefc 	bl	80060ac <Scheduler_AddTask>
 80032b4:	6078      	str	r0, [r7, #4]
                               sizeof(EventQ_Error) / sizeof(EventQ_Error[0]), "Error");
    if (status < STATUS_OK) return status;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	da01      	bge.n	80032c0 <ExplorerApp_InitTasks+0x54>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	e057      	b.n	8003370 <ExplorerApp_InitTasks+0x104>

    status = Scheduler_AddTask(myScheduler, (task_function_t)Task_EvaluateMeasurementData, TASK_EVAL_DAT, EventQ_EvalData,
 80032c0:	4b2d      	ldr	r3, [pc, #180]	@ (8003378 <ExplorerApp_InitTasks+0x10c>)
 80032c2:	6818      	ldr	r0, [r3, #0]
 80032c4:	4b33      	ldr	r3, [pc, #204]	@ (8003394 <ExplorerApp_InitTasks+0x128>)
 80032c6:	9301      	str	r3, [sp, #4]
 80032c8:	2306      	movs	r3, #6
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	4b32      	ldr	r3, [pc, #200]	@ (8003398 <ExplorerApp_InitTasks+0x12c>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	4932      	ldr	r1, [pc, #200]	@ (800339c <ExplorerApp_InitTasks+0x130>)
 80032d2:	f002 feeb 	bl	80060ac <Scheduler_AddTask>
 80032d6:	6078      	str	r0, [r7, #4]
                               sizeof(EventQ_EvalData) / sizeof(EventQ_EvalData[0]), "Evaluate");
    if (status < STATUS_OK) return status;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	da01      	bge.n	80032e2 <ExplorerApp_InitTasks+0x76>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	e046      	b.n	8003370 <ExplorerApp_InitTasks+0x104>

    status = Scheduler_AddTask(myScheduler, (task_function_t)Task_SendMeasurementData, TASK_SEND_DAT, EventQ_SendResults,
 80032e2:	4b25      	ldr	r3, [pc, #148]	@ (8003378 <ExplorerApp_InitTasks+0x10c>)
 80032e4:	6818      	ldr	r0, [r3, #0]
 80032e6:	4b2e      	ldr	r3, [pc, #184]	@ (80033a0 <ExplorerApp_InitTasks+0x134>)
 80032e8:	9301      	str	r3, [sp, #4]
 80032ea:	2306      	movs	r3, #6
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	4b2d      	ldr	r3, [pc, #180]	@ (80033a4 <ExplorerApp_InitTasks+0x138>)
 80032f0:	2202      	movs	r2, #2
 80032f2:	492d      	ldr	r1, [pc, #180]	@ (80033a8 <ExplorerApp_InitTasks+0x13c>)
 80032f4:	f002 feda 	bl	80060ac <Scheduler_AddTask>
 80032f8:	6078      	str	r0, [r7, #4]
                               sizeof(EventQ_SendResults) / sizeof(EventQ_SendResults[0]), "Data Streaming");
    if (status < STATUS_OK) return status;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	da01      	bge.n	8003304 <ExplorerApp_InitTasks+0x98>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	e035      	b.n	8003370 <ExplorerApp_InitTasks+0x104>

    status = Scheduler_AddTask(myScheduler, (task_function_t)Task_HandleCommand, TASK_HNDL_CMD, EventQ_HandleCommand,
 8003304:	4b1c      	ldr	r3, [pc, #112]	@ (8003378 <ExplorerApp_InitTasks+0x10c>)
 8003306:	6818      	ldr	r0, [r3, #0]
 8003308:	4b28      	ldr	r3, [pc, #160]	@ (80033ac <ExplorerApp_InitTasks+0x140>)
 800330a:	9301      	str	r3, [sp, #4]
 800330c:	230c      	movs	r3, #12
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	4b27      	ldr	r3, [pc, #156]	@ (80033b0 <ExplorerApp_InitTasks+0x144>)
 8003312:	2206      	movs	r2, #6
 8003314:	4927      	ldr	r1, [pc, #156]	@ (80033b4 <ExplorerApp_InitTasks+0x148>)
 8003316:	f002 fec9 	bl	80060ac <Scheduler_AddTask>
 800331a:	6078      	str	r0, [r7, #4]
                               sizeof(EventQ_HandleCommand) / sizeof(EventQ_HandleCommand[0]), "Handle SCI Command");
    if (status < STATUS_OK) return status;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	da01      	bge.n	8003326 <ExplorerApp_InitTasks+0xba>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	e024      	b.n	8003370 <ExplorerApp_InitTasks+0x104>

    status = Scheduler_AddTask(myScheduler, (task_function_t)Task_Idle, TASK_IDLE, EventQ_Idle,
 8003326:	4b14      	ldr	r3, [pc, #80]	@ (8003378 <ExplorerApp_InitTasks+0x10c>)
 8003328:	6818      	ldr	r0, [r3, #0]
 800332a:	4b23      	ldr	r3, [pc, #140]	@ (80033b8 <ExplorerApp_InitTasks+0x14c>)
 800332c:	9301      	str	r3, [sp, #4]
 800332e:	2306      	movs	r3, #6
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	4b22      	ldr	r3, [pc, #136]	@ (80033bc <ExplorerApp_InitTasks+0x150>)
 8003334:	2200      	movs	r2, #0
 8003336:	4922      	ldr	r1, [pc, #136]	@ (80033c0 <ExplorerApp_InitTasks+0x154>)
 8003338:	f002 feb8 	bl	80060ac <Scheduler_AddTask>
 800333c:	6078      	str	r0, [r7, #4]
                               sizeof(EventQ_Idle) / sizeof(EventQ_Idle[0]), "Idle");
    if (status < STATUS_OK) return status;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	da01      	bge.n	8003348 <ExplorerApp_InitTasks+0xdc>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	e013      	b.n	8003370 <ExplorerApp_InitTasks+0x104>

    /* Install SCI callbacks. */
    SCI_SetRxCommandCallback(SCI_RxCommandCallbackHandler);
 8003348:	481e      	ldr	r0, [pc, #120]	@ (80033c4 <ExplorerApp_InitTasks+0x158>)
 800334a:	f001 f91f 	bl	800458c <SCI_SetRxCommandCallback>
    SCI_SetErrorCallback(SCI_ErrorCallbackHandler);
 800334e:	481e      	ldr	r0, [pc, #120]	@ (80033c8 <ExplorerApp_InitTasks+0x15c>)
 8003350:	f001 f92c 	bl	80045ac <SCI_SetErrorCallback>

    static idle_event_t idle_event = { 0 };
    status = Scheduler_PostEvent(myScheduler, TASK_IDLE, &idle_event);
 8003354:	4b08      	ldr	r3, [pc, #32]	@ (8003378 <ExplorerApp_InitTasks+0x10c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a1c      	ldr	r2, [pc, #112]	@ (80033cc <ExplorerApp_InitTasks+0x160>)
 800335a:	2100      	movs	r1, #0
 800335c:	4618      	mov	r0, r3
 800335e:	f002 feff 	bl	8006160 <Scheduler_PostEvent>
 8003362:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	da01      	bge.n	800336e <ExplorerApp_InitTasks+0x102>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	e000      	b.n	8003370 <ExplorerApp_InitTasks+0x104>

    return status;
 800336e:	687b      	ldr	r3, [r7, #4]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	24000250 	.word	0x24000250
 800337c:	0802b540 	.word	0x0802b540
 8003380:	0802c450 	.word	0x0802c450
 8003384:	0802b554 	.word	0x0802b554
 8003388:	0802b580 	.word	0x0802b580
 800338c:	24000254 	.word	0x24000254
 8003390:	080036f1 	.word	0x080036f1
 8003394:	0802b588 	.word	0x0802b588
 8003398:	2400029c 	.word	0x2400029c
 800339c:	08003449 	.word	0x08003449
 80033a0:	0802b594 	.word	0x0802b594
 80033a4:	24000284 	.word	0x24000284
 80033a8:	08003561 	.word	0x08003561
 80033ac:	0802b5a4 	.word	0x0802b5a4
 80033b0:	240002b4 	.word	0x240002b4
 80033b4:	080036b9 	.word	0x080036b9
 80033b8:	0802b5b8 	.word	0x0802b5b8
 80033bc:	2400026c 	.word	0x2400026c
 80033c0:	08003719 	.word	0x08003719
 80033c4:	08003891 	.word	0x08003891
 80033c8:	08003875 	.word	0x08003875
 80033cc:	240002e4 	.word	0x240002e4

080033d0 <ExplorerApp_Run>:

void ExplorerApp_Run(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
//#if DEBUG
//  ExplorerApp_StartTimerMeasurement();
//#endif
    Scheduler_Run(myScheduler); // never returns
 80033d4:	4b03      	ldr	r3, [pc, #12]	@ (80033e4 <ExplorerApp_Run+0x14>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f002 ff37 	bl	800624c <Scheduler_Run>
}
 80033de:	bf00      	nop
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	24000250 	.word	0x24000250

080033e8 <ExplorerApp_SwitchContext>:

void ExplorerApp_SwitchContext(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
    Scheduler_SwitchContext(myScheduler);
 80033ec:	4b03      	ldr	r3, [pc, #12]	@ (80033fc <ExplorerApp_SwitchContext+0x14>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f002 ff43 	bl	800627c <Scheduler_SwitchContext>
}
 80033f6:	bf00      	nop
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	24000250 	.word	0x24000250

08003400 <OnError>:

static status_t OnError(status_t status, char *message)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
    static error_event_t event = { 0 };
    event.Status = status;
 800340a:	4a0b      	ldr	r2, [pc, #44]	@ (8003438 <OnError+0x38>)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6013      	str	r3, [r2, #0]
    Time_GetNow(&event.TimeStamp);
 8003410:	480a      	ldr	r0, [pc, #40]	@ (800343c <OnError+0x3c>)
 8003412:	f00f f9ef 	bl	80127f4 <Time_GetNow>
    strcpy(event.String, message);
 8003416:	6839      	ldr	r1, [r7, #0]
 8003418:	4809      	ldr	r0, [pc, #36]	@ (8003440 <OnError+0x40>)
 800341a:	f026 fa2a 	bl	8029872 <strcpy>
    Scheduler_PostEvent(myScheduler, TASK_ERROR, &event);
 800341e:	4b09      	ldr	r3, [pc, #36]	@ (8003444 <OnError+0x44>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a05      	ldr	r2, [pc, #20]	@ (8003438 <OnError+0x38>)
 8003424:	2107      	movs	r1, #7
 8003426:	4618      	mov	r0, r3
 8003428:	f002 fe9a 	bl	8006160 <Scheduler_PostEvent>
    return status;
 800342c:	687b      	ldr	r3, [r7, #4]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	240002f0 	.word	0x240002f0
 800343c:	240002f4 	.word	0x240002f4
 8003440:	240002fc 	.word	0x240002fc
 8003444:	24000250 	.word	0x24000250

08003448 <Task_EvaluateMeasurementData>:

/*******************************************************************************
 * Tasks
 ******************************************************************************/
static void Task_EvaluateMeasurementData(argus_hnd_t * argus)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08a      	sub	sp, #40	@ 0x28
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
    assert(argus != NULL);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d106      	bne.n	8003464 <Task_EvaluateMeasurementData+0x1c>
 8003456:	4b3b      	ldr	r3, [pc, #236]	@ (8003544 <Task_EvaluateMeasurementData+0xfc>)
 8003458:	4a3b      	ldr	r2, [pc, #236]	@ (8003548 <Task_EvaluateMeasurementData+0x100>)
 800345a:	f240 1103 	movw	r1, #259	@ 0x103
 800345e:	483b      	ldr	r0, [pc, #236]	@ (800354c <Task_EvaluateMeasurementData+0x104>)
 8003460:	f003 ffae 	bl	80073c0 <__assert_func>
    DEBUG_TASK_EVALUATEDATA_ENTER;

    static argus_resultsbuffer_t buffer[ARGUSRESULTBUFFER_SIZE] = {{0}};

    /* Find free data buffer. */
    argus_resultsbuffer_t * buf = 0;
 8003464:	2300      	movs	r3, #0
 8003466:	627b      	str	r3, [r7, #36]	@ 0x24
    for(uint8_t i = 0; i < ARGUSRESULTBUFFER_SIZE; ++i)
 8003468:	2300      	movs	r3, #0
 800346a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800346e:	e015      	b.n	800349c <Task_EvaluateMeasurementData+0x54>
    {
        if(buffer[i].Status == BUFFER_EMTPY)
 8003470:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003474:	4a36      	ldr	r2, [pc, #216]	@ (8003550 <Task_EvaluateMeasurementData+0x108>)
 8003476:	029b      	lsls	r3, r3, #10
 8003478:	4413      	add	r3, r2
 800347a:	3301      	adds	r3, #1
 800347c:	f993 3000 	ldrsb.w	r3, [r3]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d106      	bne.n	8003492 <Task_EvaluateMeasurementData+0x4a>
        {
            buf = &buffer[i];
 8003484:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003488:	029b      	lsls	r3, r3, #10
 800348a:	4a31      	ldr	r2, [pc, #196]	@ (8003550 <Task_EvaluateMeasurementData+0x108>)
 800348c:	4413      	add	r3, r2
 800348e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003490:	e008      	b.n	80034a4 <Task_EvaluateMeasurementData+0x5c>
    for(uint8_t i = 0; i < ARGUSRESULTBUFFER_SIZE; ++i)
 8003492:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003496:	3301      	adds	r3, #1
 8003498:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800349c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80034a0:	2b03      	cmp	r3, #3
 80034a2:	d9e5      	bls.n	8003470 <Task_EvaluateMeasurementData+0x28>
        }
    }
    assert(buf != 0); // no buffer found! should never happen
 80034a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <Task_EvaluateMeasurementData+0x70>
 80034aa:	4b2a      	ldr	r3, [pc, #168]	@ (8003554 <Task_EvaluateMeasurementData+0x10c>)
 80034ac:	4a26      	ldr	r2, [pc, #152]	@ (8003548 <Task_EvaluateMeasurementData+0x100>)
 80034ae:	f44f 7189 	mov.w	r1, #274	@ 0x112
 80034b2:	4826      	ldr	r0, [pc, #152]	@ (800354c <Task_EvaluateMeasurementData+0x104>)
 80034b4:	f003 ff84 	bl	80073c0 <__assert_func>
    buf->Status = BUFFER_BUSY;
 80034b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ba:	2201      	movs	r2, #1
 80034bc:	705a      	strb	r2, [r3, #1]

    /* Evaluate data. */
    explorer_t * explorer = ExplorerApp_GetExplorerPtrFromArgus(argus);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 fd50 	bl	8003f64 <ExplorerApp_GetExplorerPtrFromArgus>
 80034c4:	61f8      	str	r0, [r7, #28]
    buf->DataOutputMode = ExplorerApp_GetDataOutputMode(explorer);
 80034c6:	69f8      	ldr	r0, [r7, #28]
 80034c8:	f000 fc10 	bl	8003cec <ExplorerApp_GetDataOutputMode>
 80034cc:	4603      	mov	r3, r0
 80034ce:	461a      	mov	r2, r3
 80034d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d2:	709a      	strb	r2, [r3, #2]
    const bool isDebugStreamingMode = !(buf->DataOutputMode & 0x01);
 80034d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d6:	789b      	ldrb	r3, [r3, #2]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b00      	cmp	r3, #0
 80034de:	bf0c      	ite	eq
 80034e0:	2301      	moveq	r3, #1
 80034e2:	2300      	movne	r3, #0
 80034e4:	76fb      	strb	r3, [r7, #27]
    argus_results_t * res = &buf->Result;
 80034e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e8:	3304      	adds	r3, #4
 80034ea:	617b      	str	r3, [r7, #20]
    argus_results_debug_t * dbg = isDebugStreamingMode ? &buf->DebugResults : NULL;
 80034ec:	7efb      	ldrb	r3, [r7, #27]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <Task_EvaluateMeasurementData+0xb2>
 80034f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f4:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 80034f8:	e000      	b.n	80034fc <Task_EvaluateMeasurementData+0xb4>
 80034fa:	2300      	movs	r3, #0
 80034fc:	613b      	str	r3, [r7, #16]

    status_t status = Argus_EvaluateDataDebug(argus, res, dbg);
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	6979      	ldr	r1, [r7, #20]
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f010 fc38 	bl	8013d78 <Argus_EvaluateDataDebug>
 8003508:	60f8      	str	r0, [r7, #12]
    if (status < STATUS_OK) OnError(status, "Evaluation Task failed");
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2b00      	cmp	r3, #0
 800350e:	da03      	bge.n	8003518 <Task_EvaluateMeasurementData+0xd0>
 8003510:	4911      	ldr	r1, [pc, #68]	@ (8003558 <Task_EvaluateMeasurementData+0x110>)
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f7ff ff74 	bl	8003400 <OnError>

    buf->Status = BUFFER_FULL;
 8003518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351a:	2202      	movs	r2, #2
 800351c:	705a      	strb	r2, [r3, #1]
    buf->deviceID = ExplorerApp_GetDeviceID(explorer);
 800351e:	69f8      	ldr	r0, [r7, #28]
 8003520:	f000 fda0 	bl	8004064 <ExplorerApp_GetDeviceID>
 8003524:	4603      	mov	r3, r0
 8003526:	461a      	mov	r2, r3
 8003528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352a:	701a      	strb	r2, [r3, #0]

    Scheduler_PostEvent(myScheduler, TASK_SEND_DAT, buf);
 800352c:	4b0b      	ldr	r3, [pc, #44]	@ (800355c <Task_EvaluateMeasurementData+0x114>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003532:	2102      	movs	r1, #2
 8003534:	4618      	mov	r0, r3
 8003536:	f002 fe13 	bl	8006160 <Scheduler_PostEvent>

    DEBUG_TASK_EVALUATEDATA_LEAVE;
}
 800353a:	bf00      	nop
 800353c:	3728      	adds	r7, #40	@ 0x28
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	0802b5c0 	.word	0x0802b5c0
 8003548:	0802c468 	.word	0x0802c468
 800354c:	0802b554 	.word	0x0802b554
 8003550:	2400037c 	.word	0x2400037c
 8003554:	0802b5d0 	.word	0x0802b5d0
 8003558:	0802b5dc 	.word	0x0802b5dc
 800355c:	24000250 	.word	0x24000250

08003560 <Task_SendMeasurementData>:

static void Task_SendMeasurementData(argus_resultsbuffer_t * buffer)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
    DEBUG_TASK_SENDRESULTS_ENTER;
    assert(buffer != 0);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d106      	bne.n	800357c <Task_SendMeasurementData+0x1c>
 800356e:	4b4c      	ldr	r3, [pc, #304]	@ (80036a0 <Task_SendMeasurementData+0x140>)
 8003570:	4a4c      	ldr	r2, [pc, #304]	@ (80036a4 <Task_SendMeasurementData+0x144>)
 8003572:	f44f 7195 	mov.w	r1, #298	@ 0x12a
 8003576:	484c      	ldr	r0, [pc, #304]	@ (80036a8 <Task_SendMeasurementData+0x148>)
 8003578:	f003 ff22 	bl	80073c0 <__assert_func>

    assert((buffer->DataOutputMode == DATA_OUTPUT_STREAMING_FULL) ||
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	789b      	ldrb	r3, [r3, #2]
 8003580:	2b03      	cmp	r3, #3
 8003582:	d01a      	beq.n	80035ba <Task_SendMeasurementData+0x5a>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	789b      	ldrb	r3, [r3, #2]
 8003588:	2b02      	cmp	r3, #2
 800358a:	d016      	beq.n	80035ba <Task_SendMeasurementData+0x5a>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	789b      	ldrb	r3, [r3, #2]
 8003590:	2b05      	cmp	r3, #5
 8003592:	d012      	beq.n	80035ba <Task_SendMeasurementData+0x5a>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	789b      	ldrb	r3, [r3, #2]
 8003598:	2b04      	cmp	r3, #4
 800359a:	d00e      	beq.n	80035ba <Task_SendMeasurementData+0x5a>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	789b      	ldrb	r3, [r3, #2]
 80035a0:	2b07      	cmp	r3, #7
 80035a2:	d00a      	beq.n	80035ba <Task_SendMeasurementData+0x5a>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	789b      	ldrb	r3, [r3, #2]
 80035a8:	2b06      	cmp	r3, #6
 80035aa:	d006      	beq.n	80035ba <Task_SendMeasurementData+0x5a>
 80035ac:	4b3f      	ldr	r3, [pc, #252]	@ (80036ac <Task_SendMeasurementData+0x14c>)
 80035ae:	4a3d      	ldr	r2, [pc, #244]	@ (80036a4 <Task_SendMeasurementData+0x144>)
 80035b0:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80035b4:	483c      	ldr	r0, [pc, #240]	@ (80036a8 <Task_SendMeasurementData+0x148>)
 80035b6:	f003 ff03 	bl	80073c0 <__assert_func>

    /* For message modes w/ DEBUG, the Result.Debug structure pointer must be available!
     * For message modes w/o DEBUG, the Result.Debug structure pointer must be null!
     * DEBUG modes are even, i.e. check for !(mode & 0x01).
     * Not DEBUG modes are odd, i.e. check for (mode & 0x01). */
    assert((!(buffer->DataOutputMode & 0x01) && (buffer->Result.Debug != 0)) ||
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	789b      	ldrb	r3, [r3, #2]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d104      	bne.n	80035d0 <Task_SendMeasurementData+0x70>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d111      	bne.n	80035f4 <Task_SendMeasurementData+0x94>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	789b      	ldrb	r3, [r3, #2]
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d004      	beq.n	80035e6 <Task_SendMeasurementData+0x86>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d006      	beq.n	80035f4 <Task_SendMeasurementData+0x94>
 80035e6:	4b32      	ldr	r3, [pc, #200]	@ (80036b0 <Task_SendMeasurementData+0x150>)
 80035e8:	4a2e      	ldr	r2, [pc, #184]	@ (80036a4 <Task_SendMeasurementData+0x144>)
 80035ea:	f240 1137 	movw	r1, #311	@ 0x137
 80035ee:	482e      	ldr	r0, [pc, #184]	@ (80036a8 <Task_SendMeasurementData+0x148>)
 80035f0:	f003 fee6 	bl	80073c0 <__assert_func>
           ((buffer->DataOutputMode & 0x01) && (buffer->Result.Debug == 0)));

    switch (buffer->DataOutputMode)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	789b      	ldrb	r3, [r3, #2]
 80035f8:	3b02      	subs	r3, #2
 80035fa:	2b05      	cmp	r3, #5
 80035fc:	d844      	bhi.n	8003688 <Task_SendMeasurementData+0x128>
 80035fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003604 <Task_SendMeasurementData+0xa4>)
 8003600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003604:	0800362f 	.word	0x0800362f
 8003608:	0800361d 	.word	0x0800361d
 800360c:	08003653 	.word	0x08003653
 8003610:	08003641 	.word	0x08003641
 8003614:	08003677 	.word	0x08003677
 8003618:	08003665 	.word	0x08003665
    {
        case DATA_OUTPUT_STREAMING_FULL:
            SCI_SendCommand(buffer->deviceID, CMD_MEASUREMENT_DATA_FULL, 0, &(buffer->Result));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	7818      	ldrb	r0, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3304      	adds	r3, #4
 8003624:	2200      	movs	r2, #0
 8003626:	2132      	movs	r1, #50	@ 0x32
 8003628:	f001 f982 	bl	8004930 <SCI_SendCommand>
            break;
 800362c:	e031      	b.n	8003692 <Task_SendMeasurementData+0x132>
        case DATA_OUTPUT_STREAMING_FULL_DEBUG:
            SCI_SendCommand(buffer->deviceID, CMD_MEASUREMENT_DATA_FULL_DEBUG, 0, &(buffer->Result));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	7818      	ldrb	r0, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3304      	adds	r3, #4
 8003636:	2200      	movs	r2, #0
 8003638:	2131      	movs	r1, #49	@ 0x31
 800363a:	f001 f979 	bl	8004930 <SCI_SendCommand>
            break;
 800363e:	e028      	b.n	8003692 <Task_SendMeasurementData+0x132>
        case DATA_OUTPUT_STREAMING_3D:
            SCI_SendCommand(buffer->deviceID, CMD_MEASUREMENT_DATA_3D, 0, &(buffer->Result));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	7818      	ldrb	r0, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3304      	adds	r3, #4
 8003648:	2200      	movs	r2, #0
 800364a:	2134      	movs	r1, #52	@ 0x34
 800364c:	f001 f970 	bl	8004930 <SCI_SendCommand>
            break;
 8003650:	e01f      	b.n	8003692 <Task_SendMeasurementData+0x132>
        case DATA_OUTPUT_STREAMING_3D_DEBUG:
            SCI_SendCommand(buffer->deviceID, CMD_MEASUREMENT_DATA_3D_DEBUG, 0, &(buffer->Result));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	7818      	ldrb	r0, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3304      	adds	r3, #4
 800365a:	2200      	movs	r2, #0
 800365c:	2133      	movs	r1, #51	@ 0x33
 800365e:	f001 f967 	bl	8004930 <SCI_SendCommand>
            break;
 8003662:	e016      	b.n	8003692 <Task_SendMeasurementData+0x132>
        case DATA_OUTPUT_STREAMING_1D:
            SCI_SendCommand(buffer->deviceID, CMD_MEASUREMENT_DATA_1D, 0, &(buffer->Result));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	7818      	ldrb	r0, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3304      	adds	r3, #4
 800366c:	2200      	movs	r2, #0
 800366e:	2136      	movs	r1, #54	@ 0x36
 8003670:	f001 f95e 	bl	8004930 <SCI_SendCommand>
            break;
 8003674:	e00d      	b.n	8003692 <Task_SendMeasurementData+0x132>
        case DATA_OUTPUT_STREAMING_1D_DEBUG:
            SCI_SendCommand(buffer->deviceID, CMD_MEASUREMENT_DATA_1D_DEBUG, 0, &(buffer->Result));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	7818      	ldrb	r0, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3304      	adds	r3, #4
 800367e:	2200      	movs	r2, #0
 8003680:	2135      	movs	r1, #53	@ 0x35
 8003682:	f001 f955 	bl	8004930 <SCI_SendCommand>
            break;
 8003686:	e004      	b.n	8003692 <Task_SendMeasurementData+0x132>
        default:
            OnError(ERROR_FAIL, "Invalid Data Output Mode!");
 8003688:	490a      	ldr	r1, [pc, #40]	@ (80036b4 <Task_SendMeasurementData+0x154>)
 800368a:	f04f 30ff 	mov.w	r0, #4294967295
 800368e:	f7ff feb7 	bl	8003400 <OnError>
    }

    buffer->Status = BUFFER_EMTPY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	705a      	strb	r2, [r3, #1]
    DEBUG_TASK_SENDRESULTS_LEAVE;
}
 8003698:	bf00      	nop
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	0802b5f4 	.word	0x0802b5f4
 80036a4:	0802c488 	.word	0x0802c488
 80036a8:	0802b554 	.word	0x0802b554
 80036ac:	0802b600 	.word	0x0802b600
 80036b0:	0802b764 	.word	0x0802b764
 80036b4:	0802b7ec 	.word	0x0802b7ec

080036b8 <Task_HandleCommand>:

static void Task_HandleCommand(sci_frame_t * frame)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
    DEBUG_TASK_HANDLECMD_ENTER;
    assert(frame != NULL);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d106      	bne.n	80036d4 <Task_HandleCommand+0x1c>
 80036c6:	4b07      	ldr	r3, [pc, #28]	@ (80036e4 <Task_HandleCommand+0x2c>)
 80036c8:	4a07      	ldr	r2, [pc, #28]	@ (80036e8 <Task_HandleCommand+0x30>)
 80036ca:	f240 1159 	movw	r1, #345	@ 0x159
 80036ce:	4807      	ldr	r0, [pc, #28]	@ (80036ec <Task_HandleCommand+0x34>)
 80036d0:	f003 fe76 	bl	80073c0 <__assert_func>
    SCI_InvokeRxCommand(frame);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f001 f825 	bl	8004724 <SCI_InvokeRxCommand>
    DEBUG_TASK_HANDLECMD_LEAVE;
}
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	0802b808 	.word	0x0802b808
 80036e8:	0802c4a4 	.word	0x0802c4a4
 80036ec:	0802b554 	.word	0x0802b554

080036f0 <Task_Error>:

static void Task_Error(error_event_t * e)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
#if AFBR_SCI_USB
    if (e->Status == ERROR_USB_TIMEOUT) return;
#endif

    error_log("%s, error code: %d", e->String, e->Status);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f103 010c 	add.w	r1, r3, #12
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	461a      	mov	r2, r3
 8003704:	4803      	ldr	r0, [pc, #12]	@ (8003714 <Task_Error+0x24>)
 8003706:	f00f fc45 	bl	8012f94 <print>
#if defined(CPU_MKL46Z256VLH4) || defined(CPU_MKL46Z256VLL4) || defined(CPU_MKL46Z256VMC4) || defined(CPU_MKL46Z256VMP4)
    SLCD_DisplayDecimalSigned((int16_t)e->Status);
#endif
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	0802b818 	.word	0x0802b818

08003718 <Task_Idle>:

static void Task_Idle(idle_event_t * e)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
    assert(e != NULL);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d106      	bne.n	8003734 <Task_Idle+0x1c>
 8003726:	4b39      	ldr	r3, [pc, #228]	@ (800380c <Task_Idle+0xf4>)
 8003728:	4a39      	ldr	r2, [pc, #228]	@ (8003810 <Task_Idle+0xf8>)
 800372a:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 800372e:	4839      	ldr	r0, [pc, #228]	@ (8003814 <Task_Idle+0xfc>)
 8003730:	f003 fe46 	bl	80073c0 <__assert_func>
     * Called when no other events/tasks are pending.
     * Checks the device status and enables the red LED in case of any error.
     * If the device is idle for a longer period of time, a ping is sent to
     * verify if the device is still connected. */

    uint8_t devCount = ExplorerApp_GetInitializedExplorerCount();
 8003734:	f000 fc4e 	bl	8003fd4 <ExplorerApp_GetInitializedExplorerCount>
 8003738:	4603      	mov	r3, r0
 800373a:	75fb      	strb	r3, [r7, #23]
    bool foundActiveDevice = false;
 800373c:	2300      	movs	r3, #0
 800373e:	77fb      	strb	r3, [r7, #31]

    for (uint8_t i = 0; i < devCount; i++)
 8003740:	2300      	movs	r3, #0
 8003742:	77bb      	strb	r3, [r7, #30]
 8003744:	e04f      	b.n	80037e6 <Task_Idle+0xce>
    {
        explorer_t * explorer = ExplorerApp_GetInitializedExplorer(i);
 8003746:	7fbb      	ldrb	r3, [r7, #30]
 8003748:	4618      	mov	r0, r3
 800374a:	f000 fc65 	bl	8004018 <ExplorerApp_GetInitializedExplorer>
 800374e:	6138      	str	r0, [r7, #16]
        status_t status = Argus_GetStatus(explorer->Argus);
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	4618      	mov	r0, r3
 8003756:	f010 f871 	bl	801383c <Argus_GetStatus>
 800375a:	61b8      	str	r0, [r7, #24]
        if (e->Status != status)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	429a      	cmp	r2, r3
 8003764:	d002      	beq.n	800376c <Task_Idle+0x54>
        {
            e->Status = status;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	609a      	str	r2, [r3, #8]
#endif
        }

        /* Trigger a ping from time to time if the device is idle
         * Disable the ping if in DEBUG mode. */
        bool isDbgModeEnabled = ExplorerApp_GetDebugModeEnabled(explorer);
 800376c:	6938      	ldr	r0, [r7, #16]
 800376e:	f000 f931 	bl	80039d4 <ExplorerApp_GetDebugModeEnabled>
 8003772:	4603      	mov	r3, r0
 8003774:	73fb      	strb	r3, [r7, #15]
        if ((!isDbgModeEnabled) && (status == STATUS_IDLE))
 8003776:	7bfb      	ldrb	r3, [r7, #15]
 8003778:	f083 0301 	eor.w	r3, r3, #1
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d022      	beq.n	80037c8 <Task_Idle+0xb0>
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d11f      	bne.n	80037c8 <Task_Idle+0xb0>
        {
            uint32_t timeout = PING_PERIOD_MS / devCount;
 8003788:	7dfb      	ldrb	r3, [r7, #23]
 800378a:	f240 124d 	movw	r2, #333	@ 0x14d
 800378e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003792:	60bb      	str	r3, [r7, #8]
            if (Time_CheckTimeoutMSec(&e->PingTime, timeout))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68b9      	ldr	r1, [r7, #8]
 8003798:	4618      	mov	r0, r3
 800379a:	f00f f86f 	bl	801287c <Time_CheckTimeoutMSec>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d016      	beq.n	80037d2 <Task_Idle+0xba>
            {
                Time_GetNow(&e->PingTime);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f00f f824 	bl	80127f4 <Time_GetNow>

                status = Argus_Ping(explorer->Argus);
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f010 fb1d 	bl	8013df0 <Argus_Ping>
 80037b6:	61b8      	str	r0, [r7, #24]
                if (status < STATUS_OK)
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	da09      	bge.n	80037d2 <Task_Idle+0xba>
                {
                    OnError(status, "Ping failed! Device has been disconnected!");
 80037be:	4916      	ldr	r1, [pc, #88]	@ (8003818 <Task_Idle+0x100>)
 80037c0:	69b8      	ldr	r0, [r7, #24]
 80037c2:	f7ff fe1d 	bl	8003400 <OnError>
        {
 80037c6:	e004      	b.n	80037d2 <Task_Idle+0xba>
                }
            }
        }
        else
        {
            Time_GetNow(&e->PingTime);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f00f f812 	bl	80127f4 <Time_GetNow>
 80037d0:	e000      	b.n	80037d4 <Task_Idle+0xbc>
        {
 80037d2:	bf00      	nop
        }

        if (status != ERROR_NOT_INITIALIZED) foundActiveDevice = true;
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	f113 0f07 	cmn.w	r3, #7
 80037da:	d001      	beq.n	80037e0 <Task_Idle+0xc8>
 80037dc:	2301      	movs	r3, #1
 80037de:	77fb      	strb	r3, [r7, #31]
    for (uint8_t i = 0; i < devCount; i++)
 80037e0:	7fbb      	ldrb	r3, [r7, #30]
 80037e2:	3301      	adds	r3, #1
 80037e4:	77bb      	strb	r3, [r7, #30]
 80037e6:	7fba      	ldrb	r2, [r7, #30]
 80037e8:	7dfb      	ldrb	r3, [r7, #23]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d3ab      	bcc.n	8003746 <Task_Idle+0x2e>
    }

    if (foundActiveDevice)
 80037ee:	7ffb      	ldrb	r3, [r7, #31]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d006      	beq.n	8003802 <Task_Idle+0xea>
        Scheduler_PostEvent(myScheduler, TASK_IDLE, e);
 80037f4:	4b09      	ldr	r3, [pc, #36]	@ (800381c <Task_Idle+0x104>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	2100      	movs	r1, #0
 80037fc:	4618      	mov	r0, r3
 80037fe:	f002 fcaf 	bl	8006160 <Scheduler_PostEvent>

    DEBUG_TASK_IDLE_LEAVE;
}
 8003802:	bf00      	nop
 8003804:	3720      	adds	r7, #32
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	0802b834 	.word	0x0802b834
 8003810:	0802c4b8 	.word	0x0802c4b8
 8003814:	0802b554 	.word	0x0802b554
 8003818:	0802b840 	.word	0x0802b840
 800381c:	24000250 	.word	0x24000250

08003820 <ExplorerApp_MeasurementReadyCallback>:

/*******************************************************************************
 * Callback functions
 ******************************************************************************/
status_t ExplorerApp_MeasurementReadyCallback(status_t status, argus_hnd_t * argus)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
    if(status < STATUS_OK)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	da05      	bge.n	800383c <ExplorerApp_MeasurementReadyCallback+0x1c>
    {
        return OnError(status, "The measurement task execution failed");
 8003830:	490d      	ldr	r1, [pc, #52]	@ (8003868 <ExplorerApp_MeasurementReadyCallback+0x48>)
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7ff fde4 	bl	8003400 <OnError>
 8003838:	4603      	mov	r3, r0
 800383a:	e011      	b.n	8003860 <ExplorerApp_MeasurementReadyCallback+0x40>
    }

    /* post event for evaluating results */
    status = Scheduler_PostEvent(myScheduler, TASK_EVAL_DAT, argus);
 800383c:	4b0b      	ldr	r3, [pc, #44]	@ (800386c <ExplorerApp_MeasurementReadyCallback+0x4c>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	2101      	movs	r1, #1
 8003844:	4618      	mov	r0, r3
 8003846:	f002 fc8b 	bl	8006160 <Scheduler_PostEvent>
 800384a:	6078      	str	r0, [r7, #4]

    if(status < STATUS_OK)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	da05      	bge.n	800385e <ExplorerApp_MeasurementReadyCallback+0x3e>
    {
        return OnError(status, "Posting Evaluation Task Error");
 8003852:	4907      	ldr	r1, [pc, #28]	@ (8003870 <ExplorerApp_MeasurementReadyCallback+0x50>)
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7ff fdd3 	bl	8003400 <OnError>
 800385a:	4603      	mov	r3, r0
 800385c:	e000      	b.n	8003860 <ExplorerApp_MeasurementReadyCallback+0x40>
    }
    return status;
 800385e:	687b      	ldr	r3, [r7, #4]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	0802b86c 	.word	0x0802b86c
 800386c:	24000250 	.word	0x24000250
 8003870:	0802b894 	.word	0x0802b894

08003874 <SCI_ErrorCallbackHandler>:

static void SCI_ErrorCallbackHandler(status_t status)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
    OnError(status, "SCI Error");
 800387c:	4903      	ldr	r1, [pc, #12]	@ (800388c <SCI_ErrorCallbackHandler+0x18>)
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7ff fdbe 	bl	8003400 <OnError>
}
 8003884:	bf00      	nop
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	0802b8b4 	.word	0x0802b8b4

08003890 <SCI_RxCommandCallbackHandler>:

static status_t SCI_RxCommandCallbackHandler(sci_frame_t * cmd)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
    assert(cmd);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d106      	bne.n	80038ac <SCI_RxCommandCallbackHandler+0x1c>
 800389e:	4b0e      	ldr	r3, [pc, #56]	@ (80038d8 <SCI_RxCommandCallbackHandler+0x48>)
 80038a0:	4a0e      	ldr	r2, [pc, #56]	@ (80038dc <SCI_RxCommandCallbackHandler+0x4c>)
 80038a2:	f240 11c7 	movw	r1, #455	@ 0x1c7
 80038a6:	480e      	ldr	r0, [pc, #56]	@ (80038e0 <SCI_RxCommandCallbackHandler+0x50>)
 80038a8:	f003 fd8a 	bl	80073c0 <__assert_func>
    task_event_t * const event = (task_event_t * const)cmd;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	60fb      	str	r3, [r7, #12]
    status_t status = Scheduler_PostEvent(myScheduler, TASK_HNDL_CMD, event);
 80038b0:	4b0c      	ldr	r3, [pc, #48]	@ (80038e4 <SCI_RxCommandCallbackHandler+0x54>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	2106      	movs	r1, #6
 80038b8:	4618      	mov	r0, r3
 80038ba:	f002 fc51 	bl	8006160 <Scheduler_PostEvent>
 80038be:	60b8      	str	r0, [r7, #8]
    if(status < STATUS_OK)
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	da03      	bge.n	80038ce <SCI_RxCommandCallbackHandler+0x3e>
    {
        OnError(status, "Command Receive Task Error");
 80038c6:	4908      	ldr	r1, [pc, #32]	@ (80038e8 <SCI_RxCommandCallbackHandler+0x58>)
 80038c8:	68b8      	ldr	r0, [r7, #8]
 80038ca:	f7ff fd99 	bl	8003400 <OnError>
    }
    return status;
 80038ce:	68bb      	ldr	r3, [r7, #8]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	0802b8c0 	.word	0x0802b8c0
 80038dc:	0802c4c4 	.word	0x0802c4c4
 80038e0:	0802b554 	.word	0x0802b554
 80038e4:	24000250 	.word	0x24000250
 80038e8:	0802b8c4 	.word	0x0802b8c4

080038ec <ExplorerApp_ExecuteXtalkCalibrationSequence>:
/*******************************************************************************
 * Functions
 ******************************************************************************/

status_t ExplorerApp_ExecuteXtalkCalibrationSequence(argus_hnd_t * argus)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
    assert(argus != NULL);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d105      	bne.n	8003906 <ExplorerApp_ExecuteXtalkCalibrationSequence+0x1a>
 80038fa:	4b13      	ldr	r3, [pc, #76]	@ (8003948 <ExplorerApp_ExecuteXtalkCalibrationSequence+0x5c>)
 80038fc:	4a13      	ldr	r2, [pc, #76]	@ (800394c <ExplorerApp_ExecuteXtalkCalibrationSequence+0x60>)
 80038fe:	2145      	movs	r1, #69	@ 0x45
 8003900:	4813      	ldr	r0, [pc, #76]	@ (8003950 <ExplorerApp_ExecuteXtalkCalibrationSequence+0x64>)
 8003902:	f003 fd5d 	bl	80073c0 <__assert_func>

    bool resume = ExplorerApp_SuspendTimerMeasurement(argus);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 fd44 	bl	8004394 <ExplorerApp_SuspendTimerMeasurement>
 800390c:	4603      	mov	r3, r0
 800390e:	73fb      	strb	r3, [r7, #15]

    status_t status = Argus_ExecuteXtalkCalibrationSequence(argus);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f010 f8f3 	bl	8013afc <Argus_ExecuteXtalkCalibrationSequence>
 8003916:	60b8      	str	r0, [r7, #8]
    if (status < STATUS_OK) return status;
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2b00      	cmp	r3, #0
 800391c:	da01      	bge.n	8003922 <ExplorerApp_ExecuteXtalkCalibrationSequence+0x36>
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	e00d      	b.n	800393e <ExplorerApp_ExecuteXtalkCalibrationSequence+0x52>

    do
    {
        status = Argus_GetStatus(argus);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f00f ff8a 	bl	801383c <Argus_GetStatus>
 8003928:	60b8      	str	r0, [r7, #8]
    } while (status > STATUS_IDLE);
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2b00      	cmp	r3, #0
 800392e:	dcf8      	bgt.n	8003922 <ExplorerApp_ExecuteXtalkCalibrationSequence+0x36>

    if (resume) ExplorerApp_StartTimerMeasurement(argus);
 8003930:	7bfb      	ldrb	r3, [r7, #15]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d002      	beq.n	800393c <ExplorerApp_ExecuteXtalkCalibrationSequence+0x50>
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 fd58 	bl	80043ec <ExplorerApp_StartTimerMeasurement>

    return status;
 800393c:	68bb      	ldr	r3, [r7, #8]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	0802b8e0 	.word	0x0802b8e0
 800394c:	0802c4e4 	.word	0x0802c4e4
 8003950:	0802b8f0 	.word	0x0802b8f0

08003954 <ExplorerApp_ExecuteOffsetsCalibrationSequence>:

status_t ExplorerApp_ExecuteOffsetsCalibrationSequence(argus_hnd_t * argus, q9_22_t targetRange)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
    assert(argus != NULL);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d105      	bne.n	8003970 <ExplorerApp_ExecuteOffsetsCalibrationSequence+0x1c>
 8003964:	4b18      	ldr	r3, [pc, #96]	@ (80039c8 <ExplorerApp_ExecuteOffsetsCalibrationSequence+0x74>)
 8003966:	4a19      	ldr	r2, [pc, #100]	@ (80039cc <ExplorerApp_ExecuteOffsetsCalibrationSequence+0x78>)
 8003968:	2158      	movs	r1, #88	@ 0x58
 800396a:	4819      	ldr	r0, [pc, #100]	@ (80039d0 <ExplorerApp_ExecuteOffsetsCalibrationSequence+0x7c>)
 800396c:	f003 fd28 	bl	80073c0 <__assert_func>

    bool resume = ExplorerApp_SuspendTimerMeasurement(argus);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 fd0f 	bl	8004394 <ExplorerApp_SuspendTimerMeasurement>
 8003976:	4603      	mov	r3, r0
 8003978:	72fb      	strb	r3, [r7, #11]

    status_t status = STATUS_OK;
 800397a:	2300      	movs	r3, #0
 800397c:	60fb      	str	r3, [r7, #12]
    if (targetRange <= 0)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	dc04      	bgt.n	800398e <ExplorerApp_ExecuteOffsetsCalibrationSequence+0x3a>
    {
        status = Argus_ExecuteRelativeRangeOffsetCalibrationSequence(argus);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f010 f917 	bl	8013bb8 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence>
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	e004      	b.n	8003998 <ExplorerApp_ExecuteOffsetsCalibrationSequence+0x44>
    }
    else
    {
        status = Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence(argus, targetRange);
 800398e:	6839      	ldr	r1, [r7, #0]
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f010 f971 	bl	8013c78 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence>
 8003996:	60f8      	str	r0, [r7, #12]
    }
    if (status < STATUS_OK) return status;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b00      	cmp	r3, #0
 800399c:	da01      	bge.n	80039a2 <ExplorerApp_ExecuteOffsetsCalibrationSequence+0x4e>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	e00d      	b.n	80039be <ExplorerApp_ExecuteOffsetsCalibrationSequence+0x6a>

    do
    {
        status = Argus_GetStatus(argus);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f00f ff4a 	bl	801383c <Argus_GetStatus>
 80039a8:	60f8      	str	r0, [r7, #12]
    } while (status > STATUS_IDLE);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	dcf8      	bgt.n	80039a2 <ExplorerApp_ExecuteOffsetsCalibrationSequence+0x4e>

    if (resume) ExplorerApp_StartTimerMeasurement(argus);
 80039b0:	7afb      	ldrb	r3, [r7, #11]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d002      	beq.n	80039bc <ExplorerApp_ExecuteOffsetsCalibrationSequence+0x68>
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 fd18 	bl	80043ec <ExplorerApp_StartTimerMeasurement>

    return status;
 80039bc:	68fb      	ldr	r3, [r7, #12]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	0802b8e0 	.word	0x0802b8e0
 80039cc:	0802c510 	.word	0x0802c510
 80039d0:	0802b8f0 	.word	0x0802b8f0

080039d4 <ExplorerApp_GetDebugModeEnabled>:
/*******************************************************************************
 * Functions
 ******************************************************************************/

bool ExplorerApp_GetDebugModeEnabled(explorer_t * explorer)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
    return (bool)explorer->Configuration.DebugMode;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	7a1b      	ldrb	r3, [r3, #8]
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	bf14      	ite	ne
 80039e6:	2301      	movne	r3, #1
 80039e8:	2300      	moveq	r3, #0
 80039ea:	b2db      	uxtb	r3, r3
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <ExplorerApp_SetDebugMode>:

status_t ExplorerApp_SetDebugMode(explorer_t * explorer, bool debugMode)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	460b      	mov	r3, r1
 8003a02:	70fb      	strb	r3, [r7, #3]
    assert(explorer != NULL);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d105      	bne.n	8003a16 <ExplorerApp_SetDebugMode+0x1e>
 8003a0a:	4b07      	ldr	r3, [pc, #28]	@ (8003a28 <ExplorerApp_SetDebugMode+0x30>)
 8003a0c:	4a07      	ldr	r2, [pc, #28]	@ (8003a2c <ExplorerApp_SetDebugMode+0x34>)
 8003a0e:	214b      	movs	r1, #75	@ 0x4b
 8003a10:	4807      	ldr	r0, [pc, #28]	@ (8003a30 <ExplorerApp_SetDebugMode+0x38>)
 8003a12:	f003 fcd5 	bl	80073c0 <__assert_func>
    explorer->Configuration.DebugMode = debugMode;
 8003a16:	78fa      	ldrb	r2, [r7, #3]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	721a      	strb	r2, [r3, #8]

    return STATUS_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	0802b91c 	.word	0x0802b91c
 8003a2c:	0802c540 	.word	0x0802c540
 8003a30:	0802b930 	.word	0x0802b930

08003a34 <ExplorerApp_GetDefaultConfiguration>:

void ExplorerApp_GetDefaultConfiguration(explorer_cfg_t * cfg)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
    assert(cfg != 0);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d105      	bne.n	8003a4e <ExplorerApp_GetDefaultConfiguration+0x1a>
 8003a42:	4b09      	ldr	r3, [pc, #36]	@ (8003a68 <ExplorerApp_GetDefaultConfiguration+0x34>)
 8003a44:	4a09      	ldr	r2, [pc, #36]	@ (8003a6c <ExplorerApp_GetDefaultConfiguration+0x38>)
 8003a46:	2153      	movs	r1, #83	@ 0x53
 8003a48:	4809      	ldr	r0, [pc, #36]	@ (8003a70 <ExplorerApp_GetDefaultConfiguration+0x3c>)
 8003a4a:	f003 fcb9 	bl	80073c0 <__assert_func>

    cfg->SPIBaudRate = SPI_BAUDRATE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a08      	ldr	r2, [pc, #32]	@ (8003a74 <ExplorerApp_GetDefaultConfiguration+0x40>)
 8003a52:	601a      	str	r2, [r3, #0]

#if defined(DEBUG)
    cfg->DebugMode = true;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	711a      	strb	r2, [r3, #4]
#else
    cfg->DebugMode = false;
#endif
    cfg->DataOutputMode = DATA_OUTPUT_STREAMING_FULL;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2203      	movs	r2, #3
 8003a5e:	715a      	strb	r2, [r3, #5]
}
 8003a60:	bf00      	nop
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	0802b95c 	.word	0x0802b95c
 8003a6c:	0802c55c 	.word	0x0802c55c
 8003a70:	0802b930 	.word	0x0802b930
 8003a74:	01406f40 	.word	0x01406f40

08003a78 <ExplorerApp_GetConfiguration>:

void ExplorerApp_GetConfiguration(explorer_t * explorer, explorer_cfg_t * cfg)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
    assert(explorer != NULL);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d105      	bne.n	8003a94 <ExplorerApp_GetConfiguration+0x1c>
 8003a88:	4b11      	ldr	r3, [pc, #68]	@ (8003ad0 <ExplorerApp_GetConfiguration+0x58>)
 8003a8a:	4a12      	ldr	r2, [pc, #72]	@ (8003ad4 <ExplorerApp_GetConfiguration+0x5c>)
 8003a8c:	2161      	movs	r1, #97	@ 0x61
 8003a8e:	4812      	ldr	r0, [pc, #72]	@ (8003ad8 <ExplorerApp_GetConfiguration+0x60>)
 8003a90:	f003 fc96 	bl	80073c0 <__assert_func>
    assert(explorer->Argus != NULL);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d105      	bne.n	8003aa8 <ExplorerApp_GetConfiguration+0x30>
 8003a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8003adc <ExplorerApp_GetConfiguration+0x64>)
 8003a9e:	4a0d      	ldr	r2, [pc, #52]	@ (8003ad4 <ExplorerApp_GetConfiguration+0x5c>)
 8003aa0:	2162      	movs	r1, #98	@ 0x62
 8003aa2:	480d      	ldr	r0, [pc, #52]	@ (8003ad8 <ExplorerApp_GetConfiguration+0x60>)
 8003aa4:	f003 fc8c 	bl	80073c0 <__assert_func>
    assert(cfg != NULL);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d105      	bne.n	8003aba <ExplorerApp_GetConfiguration+0x42>
 8003aae:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae0 <ExplorerApp_GetConfiguration+0x68>)
 8003ab0:	4a08      	ldr	r2, [pc, #32]	@ (8003ad4 <ExplorerApp_GetConfiguration+0x5c>)
 8003ab2:	2163      	movs	r1, #99	@ 0x63
 8003ab4:	4808      	ldr	r0, [pc, #32]	@ (8003ad8 <ExplorerApp_GetConfiguration+0x60>)
 8003ab6:	f003 fc83 	bl	80073c0 <__assert_func>

    memcpy(cfg, &explorer->Configuration, sizeof(explorer_cfg_t));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3304      	adds	r3, #4
 8003abe:	2208      	movs	r2, #8
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	6838      	ldr	r0, [r7, #0]
 8003ac4:	f025 fedd 	bl	8029882 <memcpy>
}
 8003ac8:	bf00      	nop
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	0802b91c 	.word	0x0802b91c
 8003ad4:	0802c580 	.word	0x0802c580
 8003ad8:	0802b930 	.word	0x0802b930
 8003adc:	0802b968 	.word	0x0802b968
 8003ae0:	0802b980 	.word	0x0802b980

08003ae4 <ExplorerApp_SetConfiguration>:

status_t ExplorerApp_SetConfiguration(explorer_t * explorer, explorer_cfg_t * cfg)
{
 8003ae4:	b590      	push	{r4, r7, lr}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
    assert(explorer != NULL);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d105      	bne.n	8003b00 <ExplorerApp_SetConfiguration+0x1c>
 8003af4:	4b4e      	ldr	r3, [pc, #312]	@ (8003c30 <ExplorerApp_SetConfiguration+0x14c>)
 8003af6:	4a4f      	ldr	r2, [pc, #316]	@ (8003c34 <ExplorerApp_SetConfiguration+0x150>)
 8003af8:	216a      	movs	r1, #106	@ 0x6a
 8003afa:	484f      	ldr	r0, [pc, #316]	@ (8003c38 <ExplorerApp_SetConfiguration+0x154>)
 8003afc:	f003 fc60 	bl	80073c0 <__assert_func>
    assert(explorer->Argus != NULL);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d105      	bne.n	8003b14 <ExplorerApp_SetConfiguration+0x30>
 8003b08:	4b4c      	ldr	r3, [pc, #304]	@ (8003c3c <ExplorerApp_SetConfiguration+0x158>)
 8003b0a:	4a4a      	ldr	r2, [pc, #296]	@ (8003c34 <ExplorerApp_SetConfiguration+0x150>)
 8003b0c:	216b      	movs	r1, #107	@ 0x6b
 8003b0e:	484a      	ldr	r0, [pc, #296]	@ (8003c38 <ExplorerApp_SetConfiguration+0x154>)
 8003b10:	f003 fc56 	bl	80073c0 <__assert_func>

    if (cfg->DataOutputMode != DATA_OUTPUT_STREAMING_1D &&
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	795b      	ldrb	r3, [r3, #5]
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b07      	cmp	r3, #7
 8003b1c:	d022      	beq.n	8003b64 <ExplorerApp_SetConfiguration+0x80>
        cfg->DataOutputMode != DATA_OUTPUT_STREAMING_3D &&
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	795b      	ldrb	r3, [r3, #5]
 8003b22:	b2db      	uxtb	r3, r3
    if (cfg->DataOutputMode != DATA_OUTPUT_STREAMING_1D &&
 8003b24:	2b05      	cmp	r3, #5
 8003b26:	d01d      	beq.n	8003b64 <ExplorerApp_SetConfiguration+0x80>
        cfg->DataOutputMode != DATA_OUTPUT_STREAMING_FULL &&
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	795b      	ldrb	r3, [r3, #5]
 8003b2c:	b2db      	uxtb	r3, r3
        cfg->DataOutputMode != DATA_OUTPUT_STREAMING_3D &&
 8003b2e:	2b03      	cmp	r3, #3
 8003b30:	d018      	beq.n	8003b64 <ExplorerApp_SetConfiguration+0x80>
        cfg->DataOutputMode != DATA_OUTPUT_STREAMING_1D_DEBUG &&
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	795b      	ldrb	r3, [r3, #5]
 8003b36:	b2db      	uxtb	r3, r3
        cfg->DataOutputMode != DATA_OUTPUT_STREAMING_FULL &&
 8003b38:	2b06      	cmp	r3, #6
 8003b3a:	d013      	beq.n	8003b64 <ExplorerApp_SetConfiguration+0x80>
        cfg->DataOutputMode != DATA_OUTPUT_STREAMING_3D_DEBUG &&
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	795b      	ldrb	r3, [r3, #5]
 8003b40:	b2db      	uxtb	r3, r3
        cfg->DataOutputMode != DATA_OUTPUT_STREAMING_1D_DEBUG &&
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d00e      	beq.n	8003b64 <ExplorerApp_SetConfiguration+0x80>
        cfg->DataOutputMode != DATA_OUTPUT_STREAMING_FULL_DEBUG)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	795b      	ldrb	r3, [r3, #5]
 8003b4a:	b2db      	uxtb	r3, r3
        cfg->DataOutputMode != DATA_OUTPUT_STREAMING_3D_DEBUG &&
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d009      	beq.n	8003b64 <ExplorerApp_SetConfiguration+0x80>
    {
        error_log("Explorer configuration failed: the data output mode (%d) is unknown.",
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	795b      	ldrb	r3, [r3, #5]
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	4619      	mov	r1, r3
 8003b58:	4839      	ldr	r0, [pc, #228]	@ (8003c40 <ExplorerApp_SetConfiguration+0x15c>)
 8003b5a:	f00f fa1b 	bl	8012f94 <print>
                  cfg->DataOutputMode);
        return ERROR_INVALID_ARGUMENT;
 8003b5e:	f06f 0304 	mvn.w	r3, #4
 8003b62:	e060      	b.n	8003c26 <ExplorerApp_SetConfiguration+0x142>
    }

    if (cfg->SPIBaudRate > SPI_MAX_BAUDRATE)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a36      	ldr	r2, [pc, #216]	@ (8003c44 <ExplorerApp_SetConfiguration+0x160>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d909      	bls.n	8003b82 <ExplorerApp_SetConfiguration+0x9e>
    {
        error_log("Explorer configuration failed: the SPI baud rate (%d) is too large.\n"
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a34      	ldr	r2, [pc, #208]	@ (8003c44 <ExplorerApp_SetConfiguration+0x160>)
 8003b74:	4619      	mov	r1, r3
 8003b76:	4834      	ldr	r0, [pc, #208]	@ (8003c48 <ExplorerApp_SetConfiguration+0x164>)
 8003b78:	f00f fa0c 	bl	8012f94 <print>
                  "It is reset to maximum value of %d bps.",
                  cfg->SPIBaudRate, SPI_MAX_BAUDRATE);
        cfg->SPIBaudRate = SPI_MAX_BAUDRATE;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	4a31      	ldr	r2, [pc, #196]	@ (8003c44 <ExplorerApp_SetConfiguration+0x160>)
 8003b80:	601a      	str	r2, [r3, #0]
    }

    if (explorer->Configuration.SPIBaudRate != cfg->SPIBaudRate)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d031      	beq.n	8003bf2 <ExplorerApp_SetConfiguration+0x10e>
    {
        const s2pi_slave_t slave = Argus_GetSPISlave(explorer->Argus);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f010 fa0a 	bl	8013fac <Argus_GetSPISlave>
 8003b98:	6178      	str	r0, [r7, #20]

        const status_t status = S2PI_SetBaudRate(slave, cfg->SPIBaudRate);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	6978      	ldr	r0, [r7, #20]
 8003ba2:	f002 fd67 	bl	8006674 <S2PI_SetBaudRate>
 8003ba6:	6138      	str	r0, [r7, #16]
        if (status != STATUS_OK)
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d01b      	beq.n	8003be6 <ExplorerApp_SetConfiguration+0x102>
        {
            /* Check if the actual baud rate is within 10 % of the desired baud rate. */
            if (status == ERROR_S2PI_INVALID_BAUDRATE)
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	f113 0f36 	cmn.w	r3, #54	@ 0x36
 8003bb4:	d10b      	bne.n	8003bce <ExplorerApp_SetConfiguration+0xea>
                error_log("S2PI: The requested baud rate (%d bps) is not supported! "
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	681c      	ldr	r4, [r3, #0]
 8003bba:	6978      	ldr	r0, [r7, #20]
 8003bbc:	f002 fd8a 	bl	80066d4 <S2PI_GetBaudRate>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	4621      	mov	r1, r4
 8003bc6:	4821      	ldr	r0, [pc, #132]	@ (8003c4c <ExplorerApp_SetConfiguration+0x168>)
 8003bc8:	f00f f9e4 	bl	8012f94 <print>
 8003bcc:	e003      	b.n	8003bd6 <ExplorerApp_SetConfiguration+0xf2>
                          "The actual baud rate is %d bps.",
                          cfg->SPIBaudRate, S2PI_GetBaudRate(slave));
            else
                error_log("S2PI: Setting the new baud rate failed, "
 8003bce:	6939      	ldr	r1, [r7, #16]
 8003bd0:	481f      	ldr	r0, [pc, #124]	@ (8003c50 <ExplorerApp_SetConfiguration+0x16c>)
 8003bd2:	f00f f9df 	bl	8012f94 <print>
                          "error code: %d", status);

            /* Reset baud rate to last setting. */
            S2PI_SetBaudRate(slave, explorer->Configuration.SPIBaudRate);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	4619      	mov	r1, r3
 8003bdc:	6978      	ldr	r0, [r7, #20]
 8003bde:	f002 fd49 	bl	8006674 <S2PI_SetBaudRate>
            return status;
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	e01f      	b.n	8003c26 <ExplorerApp_SetConfiguration+0x142>
        }
        cfg->SPIBaudRate = S2PI_GetBaudRate(slave);
 8003be6:	6978      	ldr	r0, [r7, #20]
 8003be8:	f002 fd74 	bl	80066d4 <S2PI_GetBaudRate>
 8003bec:	4602      	mov	r2, r0
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	601a      	str	r2, [r3, #0]
        //print("S2PI: Baud Rate set to %d bps.", cfg->SPIBaudRate);
    }

    explorer_cfg_t backup_cfg;
    ExplorerApp_GetConfiguration(explorer, &backup_cfg);
 8003bf2:	f107 0308 	add.w	r3, r7, #8
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f7ff ff3d 	bl	8003a78 <ExplorerApp_GetConfiguration>
    memcpy(&explorer->Configuration, cfg, sizeof(explorer_cfg_t));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3304      	adds	r3, #4
 8003c02:	2208      	movs	r2, #8
 8003c04:	6839      	ldr	r1, [r7, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f025 fe3b 	bl	8029882 <memcpy>

    return ExplorerApp_SetDebugMode(explorer, cfg->DebugMode);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	791b      	ldrb	r3, [r3, #4]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	bf14      	ite	ne
 8003c16:	2301      	movne	r3, #1
 8003c18:	2300      	moveq	r3, #0
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7ff feea 	bl	80039f8 <ExplorerApp_SetDebugMode>
 8003c24:	4603      	mov	r3, r0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	371c      	adds	r7, #28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd90      	pop	{r4, r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	0802b91c 	.word	0x0802b91c
 8003c34:	0802c5a0 	.word	0x0802c5a0
 8003c38:	0802b930 	.word	0x0802b930
 8003c3c:	0802b968 	.word	0x0802b968
 8003c40:	0802b98c 	.word	0x0802b98c
 8003c44:	01406f40 	.word	0x01406f40
 8003c48:	0802b9dc 	.word	0x0802b9dc
 8003c4c:	0802ba50 	.word	0x0802ba50
 8003c50:	0802bab4 	.word	0x0802bab4

08003c54 <ExplorerApp_SetDeviceMeasurementMode>:

status_t ExplorerApp_SetDeviceMeasurementMode(explorer_t * explorer, argus_mode_t mode)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b088      	sub	sp, #32
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	70fb      	strb	r3, [r7, #3]
    assert(explorer != NULL);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d105      	bne.n	8003c72 <ExplorerApp_SetDeviceMeasurementMode+0x1e>
 8003c66:	4b1d      	ldr	r3, [pc, #116]	@ (8003cdc <ExplorerApp_SetDeviceMeasurementMode+0x88>)
 8003c68:	4a1d      	ldr	r2, [pc, #116]	@ (8003ce0 <ExplorerApp_SetDeviceMeasurementMode+0x8c>)
 8003c6a:	21a2      	movs	r1, #162	@ 0xa2
 8003c6c:	481d      	ldr	r0, [pc, #116]	@ (8003ce4 <ExplorerApp_SetDeviceMeasurementMode+0x90>)
 8003c6e:	f003 fba7 	bl	80073c0 <__assert_func>
    assert(explorer->Argus != NULL);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d105      	bne.n	8003c86 <ExplorerApp_SetDeviceMeasurementMode+0x32>
 8003c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ce8 <ExplorerApp_SetDeviceMeasurementMode+0x94>)
 8003c7c:	4a18      	ldr	r2, [pc, #96]	@ (8003ce0 <ExplorerApp_SetDeviceMeasurementMode+0x8c>)
 8003c7e:	21a3      	movs	r1, #163	@ 0xa3
 8003c80:	4818      	ldr	r0, [pc, #96]	@ (8003ce4 <ExplorerApp_SetDeviceMeasurementMode+0x90>)
 8003c82:	f003 fb9d 	bl	80073c0 <__assert_func>

    explorer_cfg_t ecfg = { 0 };
 8003c86:	f107 030c 	add.w	r3, r7, #12
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	605a      	str	r2, [r3, #4]
    ExplorerApp_GetConfiguration(explorer, &ecfg);
 8003c90:	f107 030c 	add.w	r3, r7, #12
 8003c94:	4619      	mov	r1, r3
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7ff feee 	bl	8003a78 <ExplorerApp_GetConfiguration>

    argus_hnd_t * argus = explorer->Argus;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	61fb      	str	r3, [r7, #28]

    bool resume = ExplorerApp_SuspendTimerMeasurement(argus);
 8003ca2:	69f8      	ldr	r0, [r7, #28]
 8003ca4:	f000 fb76 	bl	8004394 <ExplorerApp_SuspendTimerMeasurement>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	76fb      	strb	r3, [r7, #27]
    status_t status = Argus_SetMeasurementMode(argus, mode);
 8003cac:	78fb      	ldrb	r3, [r7, #3]
 8003cae:	4619      	mov	r1, r3
 8003cb0:	69f8      	ldr	r0, [r7, #28]
 8003cb2:	f010 f987 	bl	8013fc4 <Argus_SetMeasurementMode>
 8003cb6:	6178      	str	r0, [r7, #20]
    ExplorerApp_ResetDefaultDataStreamingMode(explorer);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 f831 	bl	8003d20 <ExplorerApp_ResetDefaultDataStreamingMode>
    ExplorerApp_DisplayUnambiguousRange(argus);
 8003cbe:	69f8      	ldr	r0, [r7, #28]
 8003cc0:	f000 fc12 	bl	80044e8 <ExplorerApp_DisplayUnambiguousRange>
    if (resume) ExplorerApp_StartTimerMeasurement(argus);
 8003cc4:	7efb      	ldrb	r3, [r7, #27]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <ExplorerApp_SetDeviceMeasurementMode+0x7c>
 8003cca:	69f8      	ldr	r0, [r7, #28]
 8003ccc:	f000 fb8e 	bl	80043ec <ExplorerApp_StartTimerMeasurement>
    return status;
 8003cd0:	697b      	ldr	r3, [r7, #20]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3720      	adds	r7, #32
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	0802b91c 	.word	0x0802b91c
 8003ce0:	0802c5c0 	.word	0x0802c5c0
 8003ce4:	0802b930 	.word	0x0802b930
 8003ce8:	0802b968 	.word	0x0802b968

08003cec <ExplorerApp_GetDataOutputMode>:
    if (resume) ExplorerApp_StartTimerMeasurement(argus);
    return status;
}

data_output_mode_t ExplorerApp_GetDataOutputMode(explorer_t * explorer)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
    assert(explorer != NULL);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d105      	bne.n	8003d06 <ExplorerApp_GetDataOutputMode+0x1a>
 8003cfa:	4b06      	ldr	r3, [pc, #24]	@ (8003d14 <ExplorerApp_GetDataOutputMode+0x28>)
 8003cfc:	4a06      	ldr	r2, [pc, #24]	@ (8003d18 <ExplorerApp_GetDataOutputMode+0x2c>)
 8003cfe:	21c3      	movs	r1, #195	@ 0xc3
 8003d00:	4806      	ldr	r0, [pc, #24]	@ (8003d1c <ExplorerApp_GetDataOutputMode+0x30>)
 8003d02:	f003 fb5d 	bl	80073c0 <__assert_func>
    return explorer->Configuration.DataOutputMode;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	7a5b      	ldrb	r3, [r3, #9]
 8003d0a:	b2db      	uxtb	r3, r3
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	0802b91c 	.word	0x0802b91c
 8003d18:	0802c5e8 	.word	0x0802c5e8
 8003d1c:	0802b930 	.word	0x0802b930

08003d20 <ExplorerApp_ResetDefaultDataStreamingMode>:

void ExplorerApp_ResetDefaultDataStreamingMode(explorer_t * explorer)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
    assert(explorer != NULL);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d105      	bne.n	8003d3a <ExplorerApp_ResetDefaultDataStreamingMode+0x1a>
 8003d2e:	4b15      	ldr	r3, [pc, #84]	@ (8003d84 <ExplorerApp_ResetDefaultDataStreamingMode+0x64>)
 8003d30:	4a15      	ldr	r2, [pc, #84]	@ (8003d88 <ExplorerApp_ResetDefaultDataStreamingMode+0x68>)
 8003d32:	21c9      	movs	r1, #201	@ 0xc9
 8003d34:	4815      	ldr	r0, [pc, #84]	@ (8003d8c <ExplorerApp_ResetDefaultDataStreamingMode+0x6c>)
 8003d36:	f003 fb43 	bl	80073c0 <__assert_func>
    assert(explorer->Argus != NULL);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d105      	bne.n	8003d4e <ExplorerApp_ResetDefaultDataStreamingMode+0x2e>
 8003d42:	4b13      	ldr	r3, [pc, #76]	@ (8003d90 <ExplorerApp_ResetDefaultDataStreamingMode+0x70>)
 8003d44:	4a10      	ldr	r2, [pc, #64]	@ (8003d88 <ExplorerApp_ResetDefaultDataStreamingMode+0x68>)
 8003d46:	21ca      	movs	r1, #202	@ 0xca
 8003d48:	4810      	ldr	r0, [pc, #64]	@ (8003d8c <ExplorerApp_ResetDefaultDataStreamingMode+0x6c>)
 8003d4a:	f003 fb39 	bl	80073c0 <__assert_func>

    argus_mode_t mode = ARGUS_MODE_SHORT_RANGE;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	73fb      	strb	r3, [r7, #15]
    if (Argus_GetMeasurementMode(explorer->Argus, &mode) == STATUS_OK)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f107 020f 	add.w	r2, r7, #15
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f010 f993 	bl	8014088 <Argus_GetMeasurementMode>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d109      	bne.n	8003d7c <ExplorerApp_ResetDefaultDataStreamingMode+0x5c>
    {
        explorer->Configuration.DataOutputMode = (mode & ARGUS_MODE_FLAG_HIGH_SPEED) ?
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
 8003d6a:	f003 0304 	and.w	r3, r3, #4
                DATA_OUTPUT_STREAMING_1D : DATA_OUTPUT_STREAMING_FULL;
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <ExplorerApp_ResetDefaultDataStreamingMode+0x56>
 8003d72:	2207      	movs	r2, #7
 8003d74:	e000      	b.n	8003d78 <ExplorerApp_ResetDefaultDataStreamingMode+0x58>
 8003d76:	2203      	movs	r2, #3
        explorer->Configuration.DataOutputMode = (mode & ARGUS_MODE_FLAG_HIGH_SPEED) ?
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	725a      	strb	r2, [r3, #9]
    }
}
 8003d7c:	bf00      	nop
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	0802b91c 	.word	0x0802b91c
 8003d88:	0802c608 	.word	0x0802c608
 8003d8c:	0802b930 	.word	0x0802b930
 8003d90:	0802b968 	.word	0x0802b968

08003d94 <CheckConnectedDevice>:
/*******************************************************************************
 * Local Functions
 ******************************************************************************/

static status_t CheckConnectedDevice(sci_device_t slave)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b08e      	sub	sp, #56	@ 0x38
 8003d98:	af02      	add	r7, sp, #8
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	71fb      	strb	r3, [r7, #7]
    status_t status = STATUS_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    uint8_t data[17U] = {0};
 8003da2:	2300      	movs	r3, #0
 8003da4:	617b      	str	r3, [r7, #20]
 8003da6:	f107 0318 	add.w	r3, r7, #24
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	605a      	str	r2, [r3, #4]
 8003db0:	609a      	str	r2, [r3, #8]
 8003db2:	731a      	strb	r2, [r3, #12]
    for (uint8_t i = 1; i < 17U; ++i) data[i] = i;
 8003db4:	2301      	movs	r3, #1
 8003db6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dba:	e00c      	b.n	8003dd6 <CheckConnectedDevice+0x42>
 8003dbc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003dc0:	3330      	adds	r3, #48	@ 0x30
 8003dc2:	443b      	add	r3, r7
 8003dc4:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8003dc8:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8003dcc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dd6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003dda:	2b10      	cmp	r3, #16
 8003ddc:	d9ee      	bls.n	8003dbc <CheckConnectedDevice+0x28>

    for (uint8_t n = 0; n < 2; n++)
 8003dde:	2300      	movs	r3, #0
 8003de0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003de4:	e03a      	b.n	8003e5c <CheckConnectedDevice+0xc8>
    {
        data[0] = 0x04;
 8003de6:	2304      	movs	r3, #4
 8003de8:	753b      	strb	r3, [r7, #20]
        status = S2PI_TransferFrame(slave, data, data, 17U, 0, 0);
 8003dea:	79f8      	ldrb	r0, [r7, #7]
 8003dec:	f107 0214 	add.w	r2, r7, #20
 8003df0:	f107 0114 	add.w	r1, r7, #20
 8003df4:	2300      	movs	r3, #0
 8003df6:	9301      	str	r3, [sp, #4]
 8003df8:	2300      	movs	r3, #0
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	2311      	movs	r3, #17
 8003dfe:	f002 fda3 	bl	8006948 <S2PI_TransferFrame>
 8003e02:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (status < STATUS_OK)
 8003e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	da01      	bge.n	8003e0e <CheckConnectedDevice+0x7a>
        {
            return status;
 8003e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e0c:	e05e      	b.n	8003ecc <CheckConnectedDevice+0x138>
        }

        ltc_t start;
        Time_GetNow(&start);
 8003e0e:	f107 030c 	add.w	r3, r7, #12
 8003e12:	4618      	mov	r0, r3
 8003e14:	f00e fcee 	bl	80127f4 <Time_GetNow>
        do
        {
            status = S2PI_GetStatus(slave);
 8003e18:	79fb      	ldrb	r3, [r7, #7]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f002 fc74 	bl	8006708 <S2PI_GetStatus>
 8003e20:	62f8      	str	r0, [r7, #44]	@ 0x2c
            if (Time_CheckTimeoutMSec(&start, 100))
 8003e22:	f107 030c 	add.w	r3, r7, #12
 8003e26:	2164      	movs	r1, #100	@ 0x64
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f00e fd27 	bl	801287c <Time_CheckTimeoutMSec>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <CheckConnectedDevice+0xa6>
            {
                status = ERROR_TIMEOUT;
 8003e34:	f06f 0305 	mvn.w	r3, #5
 8003e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
        }
        while (status == STATUS_BUSY);
 8003e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d0eb      	beq.n	8003e18 <CheckConnectedDevice+0x84>

        if (status < STATUS_OK)
 8003e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	da05      	bge.n	8003e52 <CheckConnectedDevice+0xbe>
        {
            S2PI_Abort(slave);
 8003e46:	79fb      	ldrb	r3, [r7, #7]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f002 fe71 	bl	8006b30 <S2PI_Abort>
            return status;
 8003e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e50:	e03c      	b.n	8003ecc <CheckConnectedDevice+0x138>
    for (uint8_t n = 0; n < 2; n++)
 8003e52:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003e56:	3301      	adds	r3, #1
 8003e58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003e5c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d9c0      	bls.n	8003de6 <CheckConnectedDevice+0x52>
        }
    }

    bool hasData = true;
 8003e64:	2301      	movs	r3, #1
 8003e66:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    for (uint8_t i = 1; i < 17U; ++i)
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8003e70:	e020      	b.n	8003eb4 <CheckConnectedDevice+0x120>
    {
        uint8_t j = ~i; // devices w/ inverted MISO
 8003e72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003e76:	43db      	mvns	r3, r3
 8003e78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if ((data[i] != i) && (data[i] != j))
 8003e7c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003e80:	3330      	adds	r3, #48	@ 0x30
 8003e82:	443b      	add	r3, r7
 8003e84:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8003e88:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d00c      	beq.n	8003eaa <CheckConnectedDevice+0x116>
 8003e90:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003e94:	3330      	adds	r3, #48	@ 0x30
 8003e96:	443b      	add	r3, r7
 8003e98:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8003e9c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d002      	beq.n	8003eaa <CheckConnectedDevice+0x116>
            hasData = false;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    for (uint8_t i = 1; i < 17U; ++i)
 8003eaa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003eae:	3301      	adds	r3, #1
 8003eb0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8003eb4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003eb8:	2b10      	cmp	r3, #16
 8003eba:	d9da      	bls.n	8003e72 <CheckConnectedDevice+0xde>
    }

    if (hasData) return STATUS_OK;
 8003ebc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <CheckConnectedDevice+0x134>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	e001      	b.n	8003ecc <CheckConnectedDevice+0x138>

    return ERROR_ARGUS_NOT_CONNECTED;
 8003ec8:	f06f 0364 	mvn.w	r3, #100	@ 0x64
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3730      	adds	r7, #48	@ 0x30
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <ExplorerApp_GetArgusPtr>:
/*******************************************************************************
 * Functions
 ******************************************************************************/

argus_hnd_t * ExplorerApp_GetArgusPtr(sci_device_t deviceID)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	71fb      	strb	r3, [r7, #7]
    assert(deviceID <= EXPLORER_DEVICE_ID_MAX);
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d905      	bls.n	8003ef0 <ExplorerApp_GetArgusPtr+0x1c>
 8003ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8003f10 <ExplorerApp_GetArgusPtr+0x3c>)
 8003ee6:	4a0b      	ldr	r2, [pc, #44]	@ (8003f14 <ExplorerApp_GetArgusPtr+0x40>)
 8003ee8:	217b      	movs	r1, #123	@ 0x7b
 8003eea:	480b      	ldr	r0, [pc, #44]	@ (8003f18 <ExplorerApp_GetArgusPtr+0x44>)
 8003eec:	f003 fa68 	bl	80073c0 <__assert_func>
    explorer_t * explorer = ExplorerApp_GetExplorerPtr(deviceID);
 8003ef0:	79fb      	ldrb	r3, [r7, #7]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 f812 	bl	8003f1c <ExplorerApp_GetExplorerPtr>
 8003ef8:	60f8      	str	r0, [r7, #12]
//    assert(explorer != NULL && explorer->Argus != NULL);
    return explorer != NULL ? explorer->Argus : NULL;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <ExplorerApp_GetArgusPtr+0x32>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	e000      	b.n	8003f08 <ExplorerApp_GetArgusPtr+0x34>
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	0802baf4 	.word	0x0802baf4
 8003f14:	0802c634 	.word	0x0802c634
 8003f18:	0802bb18 	.word	0x0802bb18

08003f1c <ExplorerApp_GetExplorerPtr>:

explorer_t * ExplorerApp_GetExplorerPtr(sci_device_t deviceID)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	71fb      	strb	r3, [r7, #7]
    assert(deviceID <= EXPLORER_DEVICE_ID_MAX);
 8003f26:	79fb      	ldrb	r3, [r7, #7]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d905      	bls.n	8003f38 <ExplorerApp_GetExplorerPtr+0x1c>
 8003f2c:	4b09      	ldr	r3, [pc, #36]	@ (8003f54 <ExplorerApp_GetExplorerPtr+0x38>)
 8003f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003f58 <ExplorerApp_GetExplorerPtr+0x3c>)
 8003f30:	2183      	movs	r1, #131	@ 0x83
 8003f32:	480a      	ldr	r0, [pc, #40]	@ (8003f5c <ExplorerApp_GetExplorerPtr+0x40>)
 8003f34:	f003 fa44 	bl	80073c0 <__assert_func>
    return (deviceID <= EXPLORER_DEVICE_ID_MAX) ? explorerIDMap[deviceID] : NULL;
 8003f38:	79fb      	ldrb	r3, [r7, #7]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d804      	bhi.n	8003f48 <ExplorerApp_GetExplorerPtr+0x2c>
 8003f3e:	79fb      	ldrb	r3, [r7, #7]
 8003f40:	4a07      	ldr	r2, [pc, #28]	@ (8003f60 <ExplorerApp_GetExplorerPtr+0x44>)
 8003f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f46:	e000      	b.n	8003f4a <ExplorerApp_GetExplorerPtr+0x2e>
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	0802baf4 	.word	0x0802baf4
 8003f58:	0802c64c 	.word	0x0802c64c
 8003f5c:	0802bb18 	.word	0x0802bb18
 8003f60:	2400139c 	.word	0x2400139c

08003f64 <ExplorerApp_GetExplorerPtrFromArgus>:

explorer_t * ExplorerApp_GetExplorerPtrFromArgus(argus_hnd_t * argus)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
    assert(argus != NULL);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d105      	bne.n	8003f7e <ExplorerApp_GetExplorerPtrFromArgus+0x1a>
 8003f72:	4b13      	ldr	r3, [pc, #76]	@ (8003fc0 <ExplorerApp_GetExplorerPtrFromArgus+0x5c>)
 8003f74:	4a13      	ldr	r2, [pc, #76]	@ (8003fc4 <ExplorerApp_GetExplorerPtrFromArgus+0x60>)
 8003f76:	2189      	movs	r1, #137	@ 0x89
 8003f78:	4813      	ldr	r0, [pc, #76]	@ (8003fc8 <ExplorerApp_GetExplorerPtrFromArgus+0x64>)
 8003f7a:	f003 fa21 	bl	80073c0 <__assert_func>

    for (uint8_t i = 0; i < EXPLORER_DEVICE_COUNT; i++)
 8003f7e:	2300      	movs	r3, #0
 8003f80:	73fb      	strb	r3, [r7, #15]
 8003f82:	e010      	b.n	8003fa6 <ExplorerApp_GetExplorerPtrFromArgus+0x42>
    {
        if (explorerArray[i].Argus == argus)
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	4a11      	ldr	r2, [pc, #68]	@ (8003fcc <ExplorerApp_GetExplorerPtrFromArgus+0x68>)
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	4413      	add	r3, r2
 8003f8c:	330c      	adds	r3, #12
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d104      	bne.n	8003fa0 <ExplorerApp_GetExplorerPtrFromArgus+0x3c>
            return &explorerArray[i];
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
 8003f98:	011b      	lsls	r3, r3, #4
 8003f9a:	4a0c      	ldr	r2, [pc, #48]	@ (8003fcc <ExplorerApp_GetExplorerPtrFromArgus+0x68>)
 8003f9c:	4413      	add	r3, r2
 8003f9e:	e00b      	b.n	8003fb8 <ExplorerApp_GetExplorerPtrFromArgus+0x54>
    for (uint8_t i = 0; i < EXPLORER_DEVICE_COUNT; i++)
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	73fb      	strb	r3, [r7, #15]
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d9eb      	bls.n	8003f84 <ExplorerApp_GetExplorerPtrFromArgus+0x20>
    }

    assert(0);
 8003fac:	4b08      	ldr	r3, [pc, #32]	@ (8003fd0 <ExplorerApp_GetExplorerPtrFromArgus+0x6c>)
 8003fae:	4a05      	ldr	r2, [pc, #20]	@ (8003fc4 <ExplorerApp_GetExplorerPtrFromArgus+0x60>)
 8003fb0:	2191      	movs	r1, #145	@ 0x91
 8003fb2:	4805      	ldr	r0, [pc, #20]	@ (8003fc8 <ExplorerApp_GetExplorerPtrFromArgus+0x64>)
 8003fb4:	f003 fa04 	bl	80073c0 <__assert_func>
    return NULL;
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	0802bb44 	.word	0x0802bb44
 8003fc4:	0802c668 	.word	0x0802c668
 8003fc8:	0802bb18 	.word	0x0802bb18
 8003fcc:	2400137c 	.word	0x2400137c
 8003fd0:	0802bb54 	.word	0x0802bb54

08003fd4 <ExplorerApp_GetInitializedExplorerCount>:

uint8_t ExplorerApp_GetInitializedExplorerCount()
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
    uint8_t count = 0;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	71fb      	strb	r3, [r7, #7]
    for (uint8_t idx = 0; idx < EXPLORER_DEVICE_COUNT; ++idx)
 8003fde:	2300      	movs	r3, #0
 8003fe0:	71bb      	strb	r3, [r7, #6]
 8003fe2:	e00d      	b.n	8004000 <ExplorerApp_GetInitializedExplorerCount+0x2c>
    {
        if (explorerArray[idx].Argus != NULL)
 8003fe4:	79bb      	ldrb	r3, [r7, #6]
 8003fe6:	4a0b      	ldr	r2, [pc, #44]	@ (8004014 <ExplorerApp_GetInitializedExplorerCount+0x40>)
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	4413      	add	r3, r2
 8003fec:	330c      	adds	r3, #12
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d002      	beq.n	8003ffa <ExplorerApp_GetInitializedExplorerCount+0x26>
            count++;
 8003ff4:	79fb      	ldrb	r3, [r7, #7]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	71fb      	strb	r3, [r7, #7]
    for (uint8_t idx = 0; idx < EXPLORER_DEVICE_COUNT; ++idx)
 8003ffa:	79bb      	ldrb	r3, [r7, #6]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	71bb      	strb	r3, [r7, #6]
 8004000:	79bb      	ldrb	r3, [r7, #6]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d9ee      	bls.n	8003fe4 <ExplorerApp_GetInitializedExplorerCount+0x10>
    }
    return count;
 8004006:	79fb      	ldrb	r3, [r7, #7]
}
 8004008:	4618      	mov	r0, r3
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	2400137c 	.word	0x2400137c

08004018 <ExplorerApp_GetInitializedExplorer>:

explorer_t * ExplorerApp_GetInitializedExplorer(uint8_t index)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	4603      	mov	r3, r0
 8004020:	71fb      	strb	r3, [r7, #7]
    assert(index < EXPLORER_DEVICE_COUNT);
 8004022:	79fb      	ldrb	r3, [r7, #7]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d905      	bls.n	8004034 <ExplorerApp_GetInitializedExplorer+0x1c>
 8004028:	4b0a      	ldr	r3, [pc, #40]	@ (8004054 <ExplorerApp_GetInitializedExplorer+0x3c>)
 800402a:	4a0b      	ldr	r2, [pc, #44]	@ (8004058 <ExplorerApp_GetInitializedExplorer+0x40>)
 800402c:	21a2      	movs	r1, #162	@ 0xa2
 800402e:	480b      	ldr	r0, [pc, #44]	@ (800405c <ExplorerApp_GetInitializedExplorer+0x44>)
 8004030:	f003 f9c6 	bl	80073c0 <__assert_func>

    explorer_t * explorer = &explorerArray[index];
 8004034:	79fb      	ldrb	r3, [r7, #7]
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	4a09      	ldr	r2, [pc, #36]	@ (8004060 <ExplorerApp_GetInitializedExplorer+0x48>)
 800403a:	4413      	add	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]
    return explorer->Argus != NULL ? explorer : NULL;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <ExplorerApp_GetInitializedExplorer+0x32>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	e000      	b.n	800404c <ExplorerApp_GetInitializedExplorer+0x34>
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	0802bb58 	.word	0x0802bb58
 8004058:	0802c68c 	.word	0x0802c68c
 800405c:	0802bb18 	.word	0x0802bb18
 8004060:	2400137c 	.word	0x2400137c

08004064 <ExplorerApp_GetDeviceID>:

sci_device_t ExplorerApp_GetDeviceID(explorer_t * explorer)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
    assert(explorer != NULL);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d105      	bne.n	800407e <ExplorerApp_GetDeviceID+0x1a>
 8004072:	4b06      	ldr	r3, [pc, #24]	@ (800408c <ExplorerApp_GetDeviceID+0x28>)
 8004074:	4a06      	ldr	r2, [pc, #24]	@ (8004090 <ExplorerApp_GetDeviceID+0x2c>)
 8004076:	21aa      	movs	r1, #170	@ 0xaa
 8004078:	4806      	ldr	r0, [pc, #24]	@ (8004094 <ExplorerApp_GetDeviceID+0x30>)
 800407a:	f003 f9a1 	bl	80073c0 <__assert_func>
    return explorer->DeviceID;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	781b      	ldrb	r3, [r3, #0]
}
 8004082:	4618      	mov	r0, r3
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	0802bb78 	.word	0x0802bb78
 8004090:	0802c6b0 	.word	0x0802c6b0
 8004094:	0802bb18 	.word	0x0802bb18

08004098 <ExplorerApp_InitDevice>:

status_t ExplorerApp_InitDevice(explorer_t * explorer, argus_mode_t mode, bool reinit)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08a      	sub	sp, #40	@ 0x28
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	460b      	mov	r3, r1
 80040a2:	70fb      	strb	r3, [r7, #3]
 80040a4:	4613      	mov	r3, r2
 80040a6:	70bb      	strb	r3, [r7, #2]
    assert(explorer != NULL);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d105      	bne.n	80040ba <ExplorerApp_InitDevice+0x22>
 80040ae:	4b50      	ldr	r3, [pc, #320]	@ (80041f0 <ExplorerApp_InitDevice+0x158>)
 80040b0:	4a50      	ldr	r2, [pc, #320]	@ (80041f4 <ExplorerApp_InitDevice+0x15c>)
 80040b2:	21b0      	movs	r1, #176	@ 0xb0
 80040b4:	4850      	ldr	r0, [pc, #320]	@ (80041f8 <ExplorerApp_InitDevice+0x160>)
 80040b6:	f003 f983 	bl	80073c0 <__assert_func>

    if (explorer->Argus == NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d111      	bne.n	80040e6 <ExplorerApp_InitDevice+0x4e>
    {
        explorer->Argus = Argus_CreateHandle();
 80040c2:	f00f fba9 	bl	8013818 <Argus_CreateHandle>
 80040c6:	4602      	mov	r2, r0
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	60da      	str	r2, [r3, #12]
        if (explorer->Argus == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d108      	bne.n	80040e6 <ExplorerApp_InitDevice+0x4e>
        {
            error_log("Failed to allocate the memory for the AFBR-S50 API handle.");
 80040d4:	4849      	ldr	r0, [pc, #292]	@ (80041fc <ExplorerApp_InitDevice+0x164>)
 80040d6:	f00e ff5d 	bl	8012f94 <print>
            assert(0);
 80040da:	4b49      	ldr	r3, [pc, #292]	@ (8004200 <ExplorerApp_InitDevice+0x168>)
 80040dc:	4a45      	ldr	r2, [pc, #276]	@ (80041f4 <ExplorerApp_InitDevice+0x15c>)
 80040de:	21b8      	movs	r1, #184	@ 0xb8
 80040e0:	4845      	ldr	r0, [pc, #276]	@ (80041f8 <ExplorerApp_InitDevice+0x160>)
 80040e2:	f003 f96d 	bl	80073c0 <__assert_func>
            return ERROR_FAIL;
        }
    }

    sci_device_t slave = S2PI_SLAVE_NONE;
 80040e6:	2300      	movs	r3, #0
 80040e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (reinit)
 80040ec:	78bb      	ldrb	r3, [r7, #2]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d016      	beq.n	8004120 <ExplorerApp_InitDevice+0x88>
    {
        slave = (sci_device_t)Argus_GetSPISlave(explorer->Argus);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f00f ff58 	bl	8013fac <Argus_GetSPISlave>
 80040fc:	4603      	mov	r3, r0
 80040fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        status_t status = Argus_Deinit(explorer->Argus);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	4618      	mov	r0, r3
 8004108:	f00f fb40 	bl	801378c <Argus_Deinit>
 800410c:	6238      	str	r0, [r7, #32]
        if (status < STATUS_OK)
 800410e:	6a3b      	ldr	r3, [r7, #32]
 8004110:	2b00      	cmp	r3, #0
 8004112:	da05      	bge.n	8004120 <ExplorerApp_InitDevice+0x88>
        {
            error_log("Failed to de-initialize the AFBR-S50 API handle, "
 8004114:	6a39      	ldr	r1, [r7, #32]
 8004116:	483b      	ldr	r0, [pc, #236]	@ (8004204 <ExplorerApp_InitDevice+0x16c>)
 8004118:	f00e ff3c 	bl	8012f94 <print>
                      "error code: %d", status);
            return status;
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	e063      	b.n	80041e8 <ExplorerApp_InitDevice+0x150>
        }
    }

    if (slave == S2PI_SLAVE_NONE)
 8004120:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004124:	2b00      	cmp	r3, #0
 8004126:	d116      	bne.n	8004156 <ExplorerApp_InitDevice+0xbe>
    {
        slave = explorer->DeviceID;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        /* Check for device connection in terms of slave and baud rate. */
        status_t status = CheckConnectedDevice(slave);
 8004130:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004134:	4618      	mov	r0, r3
 8004136:	f7ff fe2d 	bl	8003d94 <CheckConnectedDevice>
 800413a:	61f8      	str	r0, [r7, #28]
        if (status < STATUS_OK)
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	2b00      	cmp	r3, #0
 8004140:	da09      	bge.n	8004156 <ExplorerApp_InitDevice+0xbe>
        {
            Argus_DestroyHandle(explorer->Argus);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	4618      	mov	r0, r3
 8004148:	f00f fb5c 	bl	8013804 <Argus_DestroyHandle>
            explorer->Argus = NULL;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	60da      	str	r2, [r3, #12]
            /* Do not print error here as this happens upon initialization
             * while searching for devices. */
            // error_log("No suitable device connected, error code: %d", status);
            return status;
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	e048      	b.n	80041e8 <ExplorerApp_InitDevice+0x150>
        }
    }

    assert(slave != S2PI_SLAVE_NONE);
 8004156:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800415a:	2b00      	cmp	r3, #0
 800415c:	d105      	bne.n	800416a <ExplorerApp_InitDevice+0xd2>
 800415e:	4b2a      	ldr	r3, [pc, #168]	@ (8004208 <ExplorerApp_InitDevice+0x170>)
 8004160:	4a24      	ldr	r2, [pc, #144]	@ (80041f4 <ExplorerApp_InitDevice+0x15c>)
 8004162:	21db      	movs	r1, #219	@ 0xdb
 8004164:	4824      	ldr	r0, [pc, #144]	@ (80041f8 <ExplorerApp_InitDevice+0x160>)
 8004166:	f003 f92b 	bl	80073c0 <__assert_func>

    /* Device initialization */
    ltc_t start = Time_Now();
 800416a:	f107 030c 	add.w	r3, r7, #12
 800416e:	4618      	mov	r0, r3
 8004170:	f00e fb44 	bl	80127fc <Time_Now>
    status_t status = Argus_InitMode(explorer->Argus, slave, mode);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800417c:	78fa      	ldrb	r2, [r7, #3]
 800417e:	4618      	mov	r0, r3
 8004180:	f00f f9c6 	bl	8013510 <Argus_InitMode>
 8004184:	61b8      	str	r0, [r7, #24]
    uint32_t elapsed = Time_GetElapsedUSec(&start);
 8004186:	f107 030c 	add.w	r3, r7, #12
 800418a:	4618      	mov	r0, r3
 800418c:	f00e fb46 	bl	801281c <Time_GetElapsedUSec>
 8004190:	6178      	str	r0, [r7, #20]
    print("Init Time: %d us", elapsed);
 8004192:	6979      	ldr	r1, [r7, #20]
 8004194:	481d      	ldr	r0, [pc, #116]	@ (800420c <ExplorerApp_InitDevice+0x174>)
 8004196:	f00e fefd 	bl	8012f94 <print>
    if (status == ERROR_ARGUS_UNKNOWN_MODULE) status = STATUS_OK; // ignore unknown modules
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	f113 0fc7 	cmn.w	r3, #199	@ 0xc7
 80041a0:	d102      	bne.n	80041a8 <ExplorerApp_InitDevice+0x110>
 80041a2:	2300      	movs	r3, #0
 80041a4:	61bb      	str	r3, [r7, #24]
 80041a6:	e010      	b.n	80041ca <ExplorerApp_InitDevice+0x132>
    else if (status < STATUS_OK)
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	da0d      	bge.n	80041ca <ExplorerApp_InitDevice+0x132>
    {
        Argus_DestroyHandle(explorer->Argus);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f00f fb26 	bl	8013804 <Argus_DestroyHandle>
        explorer->Argus = NULL;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	60da      	str	r2, [r3, #12]
        error_log("Failed to initialize AFBR-S50 API, error code: %d", status);
 80041be:	69b9      	ldr	r1, [r7, #24]
 80041c0:	4813      	ldr	r0, [pc, #76]	@ (8004210 <ExplorerApp_InitDevice+0x178>)
 80041c2:	f00e fee7 	bl	8012f94 <print>
        return status;
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	e00e      	b.n	80041e8 <ExplorerApp_InitDevice+0x150>
    }

    /// Shpegun60 -----------------------------------------------------
    Argus_SetConfigurationDFMMode(explorer->Argus, DFM_MODE_OFF);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	2100      	movs	r1, #0
 80041d0:	4618      	mov	r0, r3
 80041d2:	f00f ffeb 	bl	80141ac <Argus_SetConfigurationDFMMode>
    //-----------------------------------------------------------------

    ExplorerApp_ResetDefaultDataStreamingMode(explorer);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7ff fda2 	bl	8003d20 <ExplorerApp_ResetDefaultDataStreamingMode>
    ExplorerApp_DisplayUnambiguousRange(explorer->Argus);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 f981 	bl	80044e8 <ExplorerApp_DisplayUnambiguousRange>

    return STATUS_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3728      	adds	r7, #40	@ 0x28
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	0802bb78 	.word	0x0802bb78
 80041f4:	0802c6c8 	.word	0x0802c6c8
 80041f8:	0802bb18 	.word	0x0802bb18
 80041fc:	0802bb8c 	.word	0x0802bb8c
 8004200:	0802bb54 	.word	0x0802bb54
 8004204:	0802bbd0 	.word	0x0802bbd0
 8004208:	0802bc18 	.word	0x0802bc18
 800420c:	0802bc34 	.word	0x0802bc34
 8004210:	0802bc48 	.word	0x0802bc48

08004214 <ExplorerApp_DeviceReinit>:

status_t ExplorerApp_DeviceReinit(explorer_t * explorer, argus_mode_t mode)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	460b      	mov	r3, r1
 800421e:	70fb      	strb	r3, [r7, #3]
    assert(explorer != NULL);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d105      	bne.n	8004232 <ExplorerApp_DeviceReinit+0x1e>
 8004226:	4b12      	ldr	r3, [pc, #72]	@ (8004270 <ExplorerApp_DeviceReinit+0x5c>)
 8004228:	4a12      	ldr	r2, [pc, #72]	@ (8004274 <ExplorerApp_DeviceReinit+0x60>)
 800422a:	21f7      	movs	r1, #247	@ 0xf7
 800422c:	4812      	ldr	r0, [pc, #72]	@ (8004278 <ExplorerApp_DeviceReinit+0x64>)
 800422e:	f003 f8c7 	bl	80073c0 <__assert_func>
    assert(explorer->Argus != NULL);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d105      	bne.n	8004246 <ExplorerApp_DeviceReinit+0x32>
 800423a:	4b10      	ldr	r3, [pc, #64]	@ (800427c <ExplorerApp_DeviceReinit+0x68>)
 800423c:	4a0d      	ldr	r2, [pc, #52]	@ (8004274 <ExplorerApp_DeviceReinit+0x60>)
 800423e:	21f8      	movs	r1, #248	@ 0xf8
 8004240:	480d      	ldr	r0, [pc, #52]	@ (8004278 <ExplorerApp_DeviceReinit+0x64>)
 8004242:	f003 f8bd 	bl	80073c0 <__assert_func>

    status_t status = ExplorerApp_InitDevice(explorer, mode, true);
 8004246:	78fb      	ldrb	r3, [r7, #3]
 8004248:	2201      	movs	r2, #1
 800424a:	4619      	mov	r1, r3
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7ff ff23 	bl	8004098 <ExplorerApp_InitDevice>
 8004252:	60f8      	str	r0, [r7, #12]
    ExplorerApp_ResetDefaultDataStreamingMode(explorer);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff fd63 	bl	8003d20 <ExplorerApp_ResetDefaultDataStreamingMode>
    ExplorerApp_DisplayUnambiguousRange(explorer->Argus);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	4618      	mov	r0, r3
 8004260:	f000 f942 	bl	80044e8 <ExplorerApp_DisplayUnambiguousRange>
    return status;
 8004264:	68fb      	ldr	r3, [r7, #12]
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	0802bb78 	.word	0x0802bb78
 8004274:	0802c6e0 	.word	0x0802c6e0
 8004278:	0802bb18 	.word	0x0802bb18
 800427c:	0802bc84 	.word	0x0802bc84

08004280 <ExplorerApp_InitExplorer>:

status_t ExplorerApp_InitExplorer(sci_device_t deviceID)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	4603      	mov	r3, r0
 8004288:	71fb      	strb	r3, [r7, #7]
    assert(deviceID > 0u);
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d106      	bne.n	800429e <ExplorerApp_InitExplorer+0x1e>
 8004290:	4b39      	ldr	r3, [pc, #228]	@ (8004378 <ExplorerApp_InitExplorer+0xf8>)
 8004292:	4a3a      	ldr	r2, [pc, #232]	@ (800437c <ExplorerApp_InitExplorer+0xfc>)
 8004294:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8004298:	4839      	ldr	r0, [pc, #228]	@ (8004380 <ExplorerApp_InitExplorer+0x100>)
 800429a:	f003 f891 	bl	80073c0 <__assert_func>
    status_t status;

    /* ensure the uninitialized device starts with a null mapping */
    assert(explorerIDMap[deviceID] == NULL);
 800429e:	79fb      	ldrb	r3, [r7, #7]
 80042a0:	4a38      	ldr	r2, [pc, #224]	@ (8004384 <ExplorerApp_InitExplorer+0x104>)
 80042a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d006      	beq.n	80042b8 <ExplorerApp_InitExplorer+0x38>
 80042aa:	4b37      	ldr	r3, [pc, #220]	@ (8004388 <ExplorerApp_InitExplorer+0x108>)
 80042ac:	4a33      	ldr	r2, [pc, #204]	@ (800437c <ExplorerApp_InitExplorer+0xfc>)
 80042ae:	f44f 7183 	mov.w	r1, #262	@ 0x106
 80042b2:	4833      	ldr	r0, [pc, #204]	@ (8004380 <ExplorerApp_InitExplorer+0x100>)
 80042b4:	f003 f884 	bl	80073c0 <__assert_func>

    /* Slaves 1,5 and 2,6 are connected to the same pins on some boards  (5 and
    * 6 are legacy boards). Thus, we do not allow slaves 5 or 6 if slaves 1 or 2
    * respectively are already initialized. */
    if (deviceID > 4)
 80042b8:	79fb      	ldrb	r3, [r7, #7]
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d909      	bls.n	80042d2 <ExplorerApp_InitExplorer+0x52>
    {
        if (explorerIDMap[deviceID - 4] != NULL)
 80042be:	79fb      	ldrb	r3, [r7, #7]
 80042c0:	3b04      	subs	r3, #4
 80042c2:	4a30      	ldr	r2, [pc, #192]	@ (8004384 <ExplorerApp_InitExplorer+0x104>)
 80042c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <ExplorerApp_InitExplorer+0x52>
            return ERROR_NOT_SUPPORTED;
 80042cc:	f06f 0307 	mvn.w	r3, #7
 80042d0:	e04d      	b.n	800436e <ExplorerApp_InitExplorer+0xee>
    }

    /* find an unused memory block and allocate it for that instance. */
    explorer_t * pExplorer = NULL;
 80042d2:	2300      	movs	r3, #0
 80042d4:	617b      	str	r3, [r7, #20]
    for (uint8_t idx = 0; idx < EXPLORER_DEVICE_COUNT; idx++)
 80042d6:	2300      	movs	r3, #0
 80042d8:	74fb      	strb	r3, [r7, #19]
 80042da:	e010      	b.n	80042fe <ExplorerApp_InitExplorer+0x7e>
    {
        if (explorerArray[idx].Argus == NULL)
 80042dc:	7cfb      	ldrb	r3, [r7, #19]
 80042de:	4a2b      	ldr	r2, [pc, #172]	@ (800438c <ExplorerApp_InitExplorer+0x10c>)
 80042e0:	011b      	lsls	r3, r3, #4
 80042e2:	4413      	add	r3, r2
 80042e4:	330c      	adds	r3, #12
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d105      	bne.n	80042f8 <ExplorerApp_InitExplorer+0x78>
        {
            pExplorer = &explorerArray[idx];
 80042ec:	7cfb      	ldrb	r3, [r7, #19]
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	4a26      	ldr	r2, [pc, #152]	@ (800438c <ExplorerApp_InitExplorer+0x10c>)
 80042f2:	4413      	add	r3, r2
 80042f4:	617b      	str	r3, [r7, #20]
            break;
 80042f6:	e005      	b.n	8004304 <ExplorerApp_InitExplorer+0x84>
    for (uint8_t idx = 0; idx < EXPLORER_DEVICE_COUNT; idx++)
 80042f8:	7cfb      	ldrb	r3, [r7, #19]
 80042fa:	3301      	adds	r3, #1
 80042fc:	74fb      	strb	r3, [r7, #19]
 80042fe:	7cfb      	ldrb	r3, [r7, #19]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d9eb      	bls.n	80042dc <ExplorerApp_InitExplorer+0x5c>
        }
    }

    /* Make sure there is an empty Explorer object available. */
    if (pExplorer == NULL)
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d105      	bne.n	8004316 <ExplorerApp_InitExplorer+0x96>
    {
        error_log("Failed to allocate an empty explorer object for the AFBR-S50 API instance.");
 800430a:	4821      	ldr	r0, [pc, #132]	@ (8004390 <ExplorerApp_InitExplorer+0x110>)
 800430c:	f00e fe42 	bl	8012f94 <print>
        return ERROR_FAIL;
 8004310:	f04f 33ff 	mov.w	r3, #4294967295
 8004314:	e02b      	b.n	800436e <ExplorerApp_InitExplorer+0xee>
    }

    pExplorer->DeviceID = deviceID;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	79fa      	ldrb	r2, [r7, #7]
 800431a:	701a      	strb	r2, [r3, #0]
    ExplorerApp_GetDefaultConfiguration(&pExplorer->Configuration);
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	3304      	adds	r3, #4
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff fb87 	bl	8003a34 <ExplorerApp_GetDefaultConfiguration>

    /* Initialize connected devices. */
    status = ExplorerApp_InitDevice(pExplorer, 0, false);
 8004326:	2200      	movs	r2, #0
 8004328:	2100      	movs	r1, #0
 800432a:	6978      	ldr	r0, [r7, #20]
 800432c:	f7ff feb4 	bl	8004098 <ExplorerApp_InitDevice>
 8004330:	60f8      	str	r0, [r7, #12]
    if (status < STATUS_OK) return status;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2b00      	cmp	r3, #0
 8004336:	da01      	bge.n	800433c <ExplorerApp_InitExplorer+0xbc>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	e018      	b.n	800436e <ExplorerApp_InitExplorer+0xee>

    status = ExplorerApp_SetConfiguration(pExplorer, &pExplorer->Configuration);
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	3304      	adds	r3, #4
 8004340:	4619      	mov	r1, r3
 8004342:	6978      	ldr	r0, [r7, #20]
 8004344:	f7ff fbce 	bl	8003ae4 <ExplorerApp_SetConfiguration>
 8004348:	60f8      	str	r0, [r7, #12]
    if (status < STATUS_OK) return status;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2b00      	cmp	r3, #0
 800434e:	da01      	bge.n	8004354 <ExplorerApp_InitExplorer+0xd4>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	e00c      	b.n	800436e <ExplorerApp_InitExplorer+0xee>

    /* Only once all checks are completed map the Explorer device to its ID for usage
     * deviceID starts with 1, so a mapping is needed.
     * deviceID 0 is reserved for default device */
    explorerIDMap[deviceID] = pExplorer;
 8004354:	79fb      	ldrb	r3, [r7, #7]
 8004356:	490b      	ldr	r1, [pc, #44]	@ (8004384 <ExplorerApp_InitExplorer+0x104>)
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if (explorerIDMap[0] == NULL)
 800435e:	4b09      	ldr	r3, [pc, #36]	@ (8004384 <ExplorerApp_InitExplorer+0x104>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d102      	bne.n	800436c <ExplorerApp_InitExplorer+0xec>
    {
        explorerIDMap[0] = pExplorer;
 8004366:	4a07      	ldr	r2, [pc, #28]	@ (8004384 <ExplorerApp_InitExplorer+0x104>)
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	6013      	str	r3, [r2, #0]
    }

    return status;
 800436c:	68fb      	ldr	r3, [r7, #12]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	0802bc9c 	.word	0x0802bc9c
 800437c:	0802c6fc 	.word	0x0802c6fc
 8004380:	0802bb18 	.word	0x0802bb18
 8004384:	2400139c 	.word	0x2400139c
 8004388:	0802bcac 	.word	0x0802bcac
 800438c:	2400137c 	.word	0x2400137c
 8004390:	0802bccc 	.word	0x0802bccc

08004394 <ExplorerApp_SuspendTimerMeasurement>:
/*******************************************************************************
 * Local functions
 ******************************************************************************/

bool ExplorerApp_SuspendTimerMeasurement(argus_hnd_t * argus)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
    assert(argus != NULL);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d105      	bne.n	80043ae <ExplorerApp_SuspendTimerMeasurement+0x1a>
 80043a2:	4b0f      	ldr	r3, [pc, #60]	@ (80043e0 <ExplorerApp_SuspendTimerMeasurement+0x4c>)
 80043a4:	4a0f      	ldr	r2, [pc, #60]	@ (80043e4 <ExplorerApp_SuspendTimerMeasurement+0x50>)
 80043a6:	2149      	movs	r1, #73	@ 0x49
 80043a8:	480f      	ldr	r0, [pc, #60]	@ (80043e8 <ExplorerApp_SuspendTimerMeasurement+0x54>)
 80043aa:	f003 f809 	bl	80073c0 <__assert_func>

    bool resume = Argus_IsTimerMeasurementActive(argus);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f00f fa90 	bl	80138d4 <Argus_IsTimerMeasurementActive>
 80043b4:	4603      	mov	r3, r0
 80043b6:	73fb      	strb	r3, [r7, #15]
    if (resume) Argus_StopMeasurementTimer(argus);
 80043b8:	7bfb      	ldrb	r3, [r7, #15]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d005      	beq.n	80043ca <ExplorerApp_SuspendTimerMeasurement+0x36>
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f00f fafe 	bl	80139c0 <Argus_StopMeasurementTimer>

    while (Argus_IsDataEvaluationPending(argus))
 80043c4:	e001      	b.n	80043ca <ExplorerApp_SuspendTimerMeasurement+0x36>
        ExplorerApp_SwitchContext(); // let evaluation task run...
 80043c6:	f7ff f80f 	bl	80033e8 <ExplorerApp_SwitchContext>
    while (Argus_IsDataEvaluationPending(argus))
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f00f fa5a 	bl	8013884 <Argus_IsDataEvaluationPending>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1f7      	bne.n	80043c6 <ExplorerApp_SuspendTimerMeasurement+0x32>

    return resume;
 80043d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	0802bd20 	.word	0x0802bd20
 80043e4:	0802c718 	.word	0x0802c718
 80043e8:	0802bd30 	.word	0x0802bd30

080043ec <ExplorerApp_StartTimerMeasurement>:

status_t ExplorerApp_StartTimerMeasurement(argus_hnd_t * argus)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
    assert(argus != NULL);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d105      	bne.n	8004406 <ExplorerApp_StartTimerMeasurement+0x1a>
 80043fa:	4b09      	ldr	r3, [pc, #36]	@ (8004420 <ExplorerApp_StartTimerMeasurement+0x34>)
 80043fc:	4a09      	ldr	r2, [pc, #36]	@ (8004424 <ExplorerApp_StartTimerMeasurement+0x38>)
 80043fe:	2156      	movs	r1, #86	@ 0x56
 8004400:	4809      	ldr	r0, [pc, #36]	@ (8004428 <ExplorerApp_StartTimerMeasurement+0x3c>)
 8004402:	f002 ffdd 	bl	80073c0 <__assert_func>

    status_t status = Argus_StartMeasurementTimer(argus, ExplorerApp_MeasurementReadyCallback);
 8004406:	4909      	ldr	r1, [pc, #36]	@ (800442c <ExplorerApp_StartTimerMeasurement+0x40>)
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f00f fa8b 	bl	8013924 <Argus_StartMeasurementTimer>
 800440e:	60f8      	str	r0, [r7, #12]
    ExplorerApp_DisplayUnambiguousRange(argus);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f869 	bl	80044e8 <ExplorerApp_DisplayUnambiguousRange>
    return status;
 8004416:	68fb      	ldr	r3, [r7, #12]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	0802bd20 	.word	0x0802bd20
 8004424:	0802c73c 	.word	0x0802c73c
 8004428:	0802bd30 	.word	0x0802bd30
 800442c:	08003821 	.word	0x08003821

08004430 <ExplorerApp_StopTimerMeasurement>:

status_t ExplorerApp_StopTimerMeasurement(argus_hnd_t * argus)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
    assert(argus != NULL);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d105      	bne.n	800444a <ExplorerApp_StopTimerMeasurement+0x1a>
 800443e:	4b07      	ldr	r3, [pc, #28]	@ (800445c <ExplorerApp_StopTimerMeasurement+0x2c>)
 8004440:	4a07      	ldr	r2, [pc, #28]	@ (8004460 <ExplorerApp_StopTimerMeasurement+0x30>)
 8004442:	215f      	movs	r1, #95	@ 0x5f
 8004444:	4807      	ldr	r0, [pc, #28]	@ (8004464 <ExplorerApp_StopTimerMeasurement+0x34>)
 8004446:	f002 ffbb 	bl	80073c0 <__assert_func>

    return Argus_StopMeasurementTimer(argus);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f00f fab8 	bl	80139c0 <Argus_StopMeasurementTimer>
 8004450:	4603      	mov	r3, r0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	0802bd20 	.word	0x0802bd20
 8004460:	0802c760 	.word	0x0802c760
 8004464:	0802bd30 	.word	0x0802bd30

08004468 <ExplorerApp_SingleMeasurement>:

status_t ExplorerApp_SingleMeasurement(argus_hnd_t * argus)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
    assert(argus != NULL);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d105      	bne.n	8004482 <ExplorerApp_SingleMeasurement+0x1a>
 8004476:	4b0a      	ldr	r3, [pc, #40]	@ (80044a0 <ExplorerApp_SingleMeasurement+0x38>)
 8004478:	4a0a      	ldr	r2, [pc, #40]	@ (80044a4 <ExplorerApp_SingleMeasurement+0x3c>)
 800447a:	2166      	movs	r1, #102	@ 0x66
 800447c:	480a      	ldr	r0, [pc, #40]	@ (80044a8 <ExplorerApp_SingleMeasurement+0x40>)
 800447e:	f002 ff9f 	bl	80073c0 <__assert_func>

    status_t status = STATUS_OK;
 8004482:	2300      	movs	r3, #0
 8004484:	60fb      	str	r3, [r7, #12]
    do
    {
        status = Argus_TriggerMeasurement(argus, ExplorerApp_MeasurementReadyCallback);
 8004486:	4909      	ldr	r1, [pc, #36]	@ (80044ac <ExplorerApp_SingleMeasurement+0x44>)
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f00f fae5 	bl	8013a58 <Argus_TriggerMeasurement>
 800448e:	60f8      	str	r0, [r7, #12]
    } while (status == STATUS_ARGUS_POWERLIMIT);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2b69      	cmp	r3, #105	@ 0x69
 8004494:	d0f7      	beq.n	8004486 <ExplorerApp_SingleMeasurement+0x1e>
    return status;
 8004496:	68fb      	ldr	r3, [r7, #12]
}
 8004498:	4618      	mov	r0, r3
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	0802bd20 	.word	0x0802bd20
 80044a4:	0802c784 	.word	0x0802c784
 80044a8:	0802bd30 	.word	0x0802bd30
 80044ac:	08003821 	.word	0x08003821

080044b0 <ExplorerApp_DeviceAbort>:

status_t ExplorerApp_DeviceAbort(argus_hnd_t * argus)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
    assert(argus != NULL);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d105      	bne.n	80044ca <ExplorerApp_DeviceAbort+0x1a>
 80044be:	4b07      	ldr	r3, [pc, #28]	@ (80044dc <ExplorerApp_DeviceAbort+0x2c>)
 80044c0:	4a07      	ldr	r2, [pc, #28]	@ (80044e0 <ExplorerApp_DeviceAbort+0x30>)
 80044c2:	2172      	movs	r1, #114	@ 0x72
 80044c4:	4807      	ldr	r0, [pc, #28]	@ (80044e4 <ExplorerApp_DeviceAbort+0x34>)
 80044c6:	f002 ff7b 	bl	80073c0 <__assert_func>

    return Argus_Abort(argus);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f00f fc36 	bl	8013d3c <Argus_Abort>
 80044d0:	4603      	mov	r3, r0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	0802bd20 	.word	0x0802bd20
 80044e0:	0802c7a4 	.word	0x0802c7a4
 80044e4:	0802bd30 	.word	0x0802bd30

080044e8 <ExplorerApp_DisplayUnambiguousRange>:

void ExplorerApp_DisplayUnambiguousRange(argus_hnd_t * argus)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
    assert(argus != NULL);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d105      	bne.n	8004502 <ExplorerApp_DisplayUnambiguousRange+0x1a>
 80044f6:	4b05      	ldr	r3, [pc, #20]	@ (800450c <ExplorerApp_DisplayUnambiguousRange+0x24>)
 80044f8:	4a05      	ldr	r2, [pc, #20]	@ (8004510 <ExplorerApp_DisplayUnambiguousRange+0x28>)
 80044fa:	2179      	movs	r1, #121	@ 0x79
 80044fc:	4805      	ldr	r0, [pc, #20]	@ (8004514 <ExplorerApp_DisplayUnambiguousRange+0x2c>)
 80044fe:	f002 ff5f 	bl	80073c0 <__assert_func>
        SLCD_SetDecimalPointPosition(decPos);
    }
#else
    (void) argus;
#endif
}
 8004502:	bf00      	nop
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	0802bd20 	.word	0x0802bd20
 8004510:	0802c7bc 	.word	0x0802c7bc
 8004514:	0802bd30 	.word	0x0802bd30

08004518 <SCI_Init>:

/*******************************************************************************
 * Code
 ******************************************************************************/
status_t SCI_Init(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
    status_t status = STATUS_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	603b      	str	r3, [r7, #0]

    for(uint_fast8_t i = 0; i < SCI_MAX_COMMANDS; ++i)
 8004522:	2300      	movs	r3, #0
 8004524:	607b      	str	r3, [r7, #4]
 8004526:	e016      	b.n	8004556 <SCI_Init+0x3e>
    {
        myCCB[i].cmd = CMD_INVALID;
 8004528:	4a17      	ldr	r2, [pc, #92]	@ (8004588 <SCI_Init+0x70>)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	011b      	lsls	r3, r3, #4
 800452e:	4413      	add	r3, r2
 8004530:	2200      	movs	r2, #0
 8004532:	701a      	strb	r2, [r3, #0]
        myCCB[i].rxfct = 0;
 8004534:	4a14      	ldr	r2, [pc, #80]	@ (8004588 <SCI_Init+0x70>)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	4413      	add	r3, r2
 800453c:	3308      	adds	r3, #8
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]
        myCCB[i].txfct = 0;
 8004542:	4a11      	ldr	r2, [pc, #68]	@ (8004588 <SCI_Init+0x70>)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	4413      	add	r3, r2
 800454a:	3304      	adds	r3, #4
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]
    for(uint_fast8_t i = 0; i < SCI_MAX_COMMANDS; ++i)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3301      	adds	r3, #1
 8004554:	607b      	str	r3, [r7, #4]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b7f      	cmp	r3, #127	@ 0x7f
 800455a:	d9e5      	bls.n	8004528 <SCI_Init+0x10>
    }

    status = SCI_DataLink_Init();
 800455c:	f000 fb8e 	bl	8004c7c <SCI_DataLink_Init>
 8004560:	6038      	str	r0, [r7, #0]
    if(status < STATUS_OK)  return status;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	da01      	bge.n	800456c <SCI_Init+0x54>
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	e008      	b.n	800457e <SCI_Init+0x66>

    status = SCI_CMD_Init();
 800456c:	f000 faec 	bl	8004b48 <SCI_CMD_Init>
 8004570:	6038      	str	r0, [r7, #0]
    if(status < STATUS_OK)  return status;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	da01      	bge.n	800457c <SCI_Init+0x64>
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	e000      	b.n	800457e <SCI_Init+0x66>

    return status;
 800457c:	683b      	ldr	r3, [r7, #0]
}
 800457e:	4618      	mov	r0, r3
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	240013a4 	.word	0x240013a4

0800458c <SCI_SetRxCommandCallback>:

void SCI_SetRxCommandCallback(sci_rx_cmd_cb_t cb)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
    SCI_RxCallback = cb;
 8004594:	4a04      	ldr	r2, [pc, #16]	@ (80045a8 <SCI_SetRxCommandCallback+0x1c>)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6013      	str	r3, [r2, #0]
}
 800459a:	bf00      	nop
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	240030c4 	.word	0x240030c4

080045ac <SCI_SetErrorCallback>:
void SCI_RemoveRxCommandCallback(void)
{
    SCI_RxCallback = 0;
}
void SCI_SetErrorCallback(sci_error_cb_t cb)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
    SCI_ErrorCallback = cb;
 80045b4:	4a04      	ldr	r2, [pc, #16]	@ (80045c8 <SCI_SetErrorCallback+0x1c>)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6013      	str	r3, [r2, #0]
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	240030c8 	.word	0x240030c8

080045cc <SCI_SetRxCommand>:
{
    SCI_ErrorCallback = 0;
}

status_t SCI_SetRxCommand(sci_cmd_t cmd, sci_rx_cmd_fct_t rxfct)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	4603      	mov	r3, r0
 80045d4:	6039      	str	r1, [r7, #0]
 80045d6:	71fb      	strb	r3, [r7, #7]
    return SCI_SetCommand(cmd, rxfct, 0, 0);
 80045d8:	79f8      	ldrb	r0, [r7, #7]
 80045da:	2300      	movs	r3, #0
 80045dc:	2200      	movs	r2, #0
 80045de:	6839      	ldr	r1, [r7, #0]
 80045e0:	f000 f83a 	bl	8004658 <SCI_SetCommand>
 80045e4:	4603      	mov	r3, r0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <SCI_SetPostRxCommand>:
status_t SCI_SetPostRxCommand(sci_cmd_t cmd, sci_rx_cmd_fct_t rxfct, sci_rx_cmd_fct_t pfct)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b084      	sub	sp, #16
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	4603      	mov	r3, r0
 80045f6:	60b9      	str	r1, [r7, #8]
 80045f8:	607a      	str	r2, [r7, #4]
 80045fa:	73fb      	strb	r3, [r7, #15]
    return SCI_SetCommand(cmd, rxfct, 0, pfct);
 80045fc:	7bf8      	ldrb	r0, [r7, #15]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	68b9      	ldr	r1, [r7, #8]
 8004604:	f000 f828 	bl	8004658 <SCI_SetCommand>
 8004608:	4603      	mov	r3, r0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <SCI_SetTxCommand>:
status_t SCI_SetTxCommand(sci_cmd_t cmd, sci_tx_cmd_fct_t txfct)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
 8004618:	4603      	mov	r3, r0
 800461a:	6039      	str	r1, [r7, #0]
 800461c:	71fb      	strb	r3, [r7, #7]
    return SCI_SetCommand(cmd, 0, txfct, 0);
 800461e:	79f8      	ldrb	r0, [r7, #7]
 8004620:	2300      	movs	r3, #0
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	2100      	movs	r1, #0
 8004626:	f000 f817 	bl	8004658 <SCI_SetCommand>
 800462a:	4603      	mov	r3, r0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <SCI_SetRxTxCommand>:
status_t SCI_SetRxTxCommand(sci_cmd_t cmd,
                            sci_rx_cmd_fct_t rxfct,
                            sci_tx_cmd_fct_t txfct)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	4603      	mov	r3, r0
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
 8004640:	73fb      	strb	r3, [r7, #15]
    return SCI_SetCommand(cmd, rxfct, txfct, 0);
 8004642:	7bf8      	ldrb	r0, [r7, #15]
 8004644:	2300      	movs	r3, #0
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	68b9      	ldr	r1, [r7, #8]
 800464a:	f000 f805 	bl	8004658 <SCI_SetCommand>
 800464e:	4603      	mov	r3, r0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <SCI_SetCommand>:
status_t SCI_SetCommand(sci_cmd_t cmd,
                        sci_rx_cmd_fct_t rxfct,
                        sci_tx_cmd_fct_t txfct,
                        sci_rx_cmd_fct_t pfct)
{
 8004658:	b480      	push	{r7}
 800465a:	b087      	sub	sp, #28
 800465c:	af00      	add	r7, sp, #0
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	607a      	str	r2, [r7, #4]
 8004662:	603b      	str	r3, [r7, #0]
 8004664:	4603      	mov	r3, r0
 8004666:	73fb      	strb	r3, [r7, #15]
    if ((cmd == CMD_INVALID) || SCI_CMD_IS_EXTENDED_CMD(cmd))
 8004668:	7bfb      	ldrb	r3, [r7, #15]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <SCI_SetCommand+0x1e>
 800466e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004672:	2b00      	cmp	r3, #0
 8004674:	da02      	bge.n	800467c <SCI_SetCommand+0x24>
        return ERROR_SCI_INVALID_CMD_CODE;
 8004676:	f06f 03d4 	mvn.w	r3, #212	@ 0xd4
 800467a:	e04b      	b.n	8004714 <SCI_SetCommand+0xbc>

    if (!rxfct && !txfct && !pfct)
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d108      	bne.n	8004694 <SCI_SetCommand+0x3c>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d105      	bne.n	8004694 <SCI_SetCommand+0x3c>
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d102      	bne.n	8004694 <SCI_SetCommand+0x3c>
        return ERROR_INVALID_ARGUMENT;
 800468e:	f06f 0304 	mvn.w	r3, #4
 8004692:	e03f      	b.n	8004714 <SCI_SetCommand+0xbc>

    for (uint_fast8_t i = 0; i < SCI_MAX_COMMANDS; ++i)
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	e037      	b.n	800470a <SCI_SetCommand+0xb2>
    {
        if (myCCB[i].cmd == CMD_INVALID ||
 800469a:	4a21      	ldr	r2, [pc, #132]	@ (8004720 <SCI_SetCommand+0xc8>)
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	4413      	add	r3, r2
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d007      	beq.n	80046b8 <SCI_SetCommand+0x60>
            myCCB[i].cmd == cmd)
 80046a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004720 <SCI_SetCommand+0xc8>)
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	011b      	lsls	r3, r3, #4
 80046ae:	4413      	add	r3, r2
 80046b0:	781b      	ldrb	r3, [r3, #0]
        if (myCCB[i].cmd == CMD_INVALID ||
 80046b2:	7bfa      	ldrb	r2, [r7, #15]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d125      	bne.n	8004704 <SCI_SetCommand+0xac>
        {
            myCCB[i].cmd = cmd;
 80046b8:	4a19      	ldr	r2, [pc, #100]	@ (8004720 <SCI_SetCommand+0xc8>)
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	011b      	lsls	r3, r3, #4
 80046be:	4413      	add	r3, r2
 80046c0:	7bfa      	ldrb	r2, [r7, #15]
 80046c2:	701a      	strb	r2, [r3, #0]
            if (rxfct != 0) myCCB[i].rxfct = rxfct;
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d006      	beq.n	80046d8 <SCI_SetCommand+0x80>
 80046ca:	4a15      	ldr	r2, [pc, #84]	@ (8004720 <SCI_SetCommand+0xc8>)
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	4413      	add	r3, r2
 80046d2:	3308      	adds	r3, #8
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	601a      	str	r2, [r3, #0]
            if (txfct != 0) myCCB[i].txfct = txfct;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d006      	beq.n	80046ec <SCI_SetCommand+0x94>
 80046de:	4a10      	ldr	r2, [pc, #64]	@ (8004720 <SCI_SetCommand+0xc8>)
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	4413      	add	r3, r2
 80046e6:	3304      	adds	r3, #4
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	601a      	str	r2, [r3, #0]
            if (pfct != 0) myCCB[i].pfct = pfct;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d006      	beq.n	8004700 <SCI_SetCommand+0xa8>
 80046f2:	4a0b      	ldr	r2, [pc, #44]	@ (8004720 <SCI_SetCommand+0xc8>)
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	4413      	add	r3, r2
 80046fa:	330c      	adds	r3, #12
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	601a      	str	r2, [r3, #0]
            return STATUS_OK;
 8004700:	2300      	movs	r3, #0
 8004702:	e007      	b.n	8004714 <SCI_SetCommand+0xbc>
    for (uint_fast8_t i = 0; i < SCI_MAX_COMMANDS; ++i)
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	3301      	adds	r3, #1
 8004708:	617b      	str	r3, [r7, #20]
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	2b7f      	cmp	r3, #127	@ 0x7f
 800470e:	d9c4      	bls.n	800469a <SCI_SetCommand+0x42>
        }
    }
    return ERROR_SCI_BUFFER_FULL;
 8004710:	f06f 03d7 	mvn.w	r3, #215	@ 0xd7
}
 8004714:	4618      	mov	r0, r3
 8004716:	371c      	adds	r7, #28
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	240013a4 	.word	0x240013a4

08004724 <SCI_InvokeRxCommand>:
        }
    }
    return ERROR_SCI_UNKNOWN_COMMAND;
}
status_t SCI_InvokeRxCommand(sci_frame_t * frame)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b08a      	sub	sp, #40	@ 0x28
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
    assert(frame != 0);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d105      	bne.n	800473e <SCI_InvokeRxCommand+0x1a>
 8004732:	4b7b      	ldr	r3, [pc, #492]	@ (8004920 <SCI_InvokeRxCommand+0x1fc>)
 8004734:	4a7b      	ldr	r2, [pc, #492]	@ (8004924 <SCI_InvokeRxCommand+0x200>)
 8004736:	21cf      	movs	r1, #207	@ 0xcf
 8004738:	487b      	ldr	r0, [pc, #492]	@ (8004928 <SCI_InvokeRxCommand+0x204>)
 800473a:	f002 fe41 	bl	80073c0 <__assert_func>

    /* Check CRC checksum. */
    status_t status = SCI_DataLink_CheckRxFrame(frame);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 fc4e 	bl	8004fe0 <SCI_DataLink_CheckRxFrame>
 8004744:	6278      	str	r0, [r7, #36]	@ 0x24

    /* Get command code. */
    sci_cmd_t cmd = (sci_cmd_t) SCI_Frame_Dequeue08u(frame);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f001 fbcc 	bl	8005ee4 <SCI_Frame_Dequeue08u>
 800474c:	4603      	mov	r3, r0
 800474e:	74fb      	strb	r3, [r7, #19]

    /* Check whether it's an extended or basic command:
     * extended = with device ID, for multi-device addressing
     * basic = simple, just consider the default device */
    sci_device_t deviceID = DEVICEID_DEFAULT;
 8004750:	2300      	movs	r3, #0
 8004752:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (SCI_CMD_IS_EXTENDED_CMD(cmd))
 8004756:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800475a:	2b00      	cmp	r3, #0
 800475c:	da0c      	bge.n	8004778 <SCI_InvokeRxCommand+0x54>
    {
        /* New Protocol Mode:
         * Determine the device that must process the command.
         * Assume the ID is valid - only app has the device count and can check if necessary */
        deviceID = SCI_Frame_Dequeue08u(frame);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f001 fbc0 	bl	8005ee4 <SCI_Frame_Dequeue08u>
 8004764:	4603      	mov	r3, r0
 8004766:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

        /* If the device ID is 0 (default), use the first available device. This is required
         * to ensure proper DeviceID in all command/response packets from this point onwards */
        if (deviceID == DEVICEID_DEFAULT)
 800476a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800476e:	2b00      	cmp	r3, #0
 8004770:	d102      	bne.n	8004778 <SCI_InvokeRxCommand+0x54>
            deviceID = DEVICEID_FIRST_VALID;
 8004772:	2301      	movs	r3, #1
 8004774:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    /* There is no validity check for the DeviceID because the SCI layer doesn't
     * have the required information on the valid Devices connected. Thus it will
     * simply forward the received DeviceID to the upper layers. */

    /* If CRC fails */
    if (status < STATUS_OK)
 8004778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477a:	2b00      	cmp	r3, #0
 800477c:	da0b      	bge.n	8004796 <SCI_InvokeRxCommand+0x72>
    {
        SCI_DataLink_ReleaseFrames(frame);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 fcde 	bl	8005140 <SCI_DataLink_ReleaseFrames>
        SCI_SendNotAcknowledge(deviceID, cmd, status);
 8004784:	7cf9      	ldrb	r1, [r7, #19]
 8004786:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800478a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800478c:	4618      	mov	r0, r3
 800478e:	f001 fc41 	bl	8006014 <SCI_SendNotAcknowledge>
        return status;
 8004792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004794:	e0c0      	b.n	8004918 <SCI_InvokeRxCommand+0x1f4>
    }

    /* If command is unknown. */
    if ((cmd & 0x7FU) == CMD_INVALID)
 8004796:	7cfb      	ldrb	r3, [r7, #19]
 8004798:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10d      	bne.n	80047bc <SCI_InvokeRxCommand+0x98>
    {
        SCI_DataLink_ReleaseFrames(frame);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 fccd 	bl	8005140 <SCI_DataLink_ReleaseFrames>
        SCI_SendNotAcknowledge(deviceID, cmd, ERROR_SCI_INVALID_CMD_CODE);
 80047a6:	7cf9      	ldrb	r1, [r7, #19]
 80047a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047ac:	f06f 02d4 	mvn.w	r2, #212	@ 0xd4
 80047b0:	4618      	mov	r0, r3
 80047b2:	f001 fc2f 	bl	8006014 <SCI_SendNotAcknowledge>
        return ERROR_SCI_INVALID_CMD_CODE;
 80047b6:	f06f 03d4 	mvn.w	r3, #212	@ 0xd4
 80047ba:	e0ad      	b.n	8004918 <SCI_InvokeRxCommand+0x1f4>
    }

    /* Find the command function. */
    sci_rx_cmd_fct_t rxfct = 0;
 80047bc:	2300      	movs	r3, #0
 80047be:	61fb      	str	r3, [r7, #28]
    sci_rx_cmd_fct_t pfct = 0;
 80047c0:	2300      	movs	r3, #0
 80047c2:	61bb      	str	r3, [r7, #24]
    for (uint_fast8_t i = 0; i < SCI_MAX_COMMANDS; ++i)
 80047c4:	2300      	movs	r3, #0
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	e01c      	b.n	8004804 <SCI_InvokeRxCommand+0xe0>
    {
        if (myCCB[i].cmd == (cmd & 0x7FU))
 80047ca:	4a58      	ldr	r2, [pc, #352]	@ (800492c <SCI_InvokeRxCommand+0x208>)
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	011b      	lsls	r3, r3, #4
 80047d0:	4413      	add	r3, r2
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	461a      	mov	r2, r3
 80047d6:	7cfb      	ldrb	r3, [r7, #19]
 80047d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047dc:	429a      	cmp	r2, r3
 80047de:	d10e      	bne.n	80047fe <SCI_InvokeRxCommand+0xda>
        {
            rxfct = myCCB[i].rxfct;
 80047e0:	4a52      	ldr	r2, [pc, #328]	@ (800492c <SCI_InvokeRxCommand+0x208>)
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	011b      	lsls	r3, r3, #4
 80047e6:	4413      	add	r3, r2
 80047e8:	3308      	adds	r3, #8
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	61fb      	str	r3, [r7, #28]
            pfct = myCCB[i].pfct;
 80047ee:	4a4f      	ldr	r2, [pc, #316]	@ (800492c <SCI_InvokeRxCommand+0x208>)
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	011b      	lsls	r3, r3, #4
 80047f4:	4413      	add	r3, r2
 80047f6:	330c      	adds	r3, #12
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	61bb      	str	r3, [r7, #24]
            break;
 80047fc:	e005      	b.n	800480a <SCI_InvokeRxCommand+0xe6>
    for (uint_fast8_t i = 0; i < SCI_MAX_COMMANDS; ++i)
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	3301      	adds	r3, #1
 8004802:	617b      	str	r3, [r7, #20]
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	2b7f      	cmp	r3, #127	@ 0x7f
 8004808:	d9df      	bls.n	80047ca <SCI_InvokeRxCommand+0xa6>
        }
    }

    /* If command function was not found. */
    if (!rxfct)
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10d      	bne.n	800482c <SCI_InvokeRxCommand+0x108>
    {
        SCI_DataLink_ReleaseFrames(frame);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 fc95 	bl	8005140 <SCI_DataLink_ReleaseFrames>
        SCI_SendNotAcknowledge(deviceID, cmd, ERROR_SCI_UNKNOWN_COMMAND);
 8004816:	7cf9      	ldrb	r1, [r7, #19]
 8004818:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800481c:	f06f 02d2 	mvn.w	r2, #210	@ 0xd2
 8004820:	4618      	mov	r0, r3
 8004822:	f001 fbf7 	bl	8006014 <SCI_SendNotAcknowledge>
        return ERROR_SCI_UNKNOWN_COMMAND;
 8004826:	f06f 03d2 	mvn.w	r3, #210	@ 0xd2
 800482a:	e075      	b.n	8004918 <SCI_InvokeRxCommand+0x1f4>
    }

    /* Invoke the RX command function. */
    status = rxfct(deviceID, frame);
 800482c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	6879      	ldr	r1, [r7, #4]
 8004834:	4610      	mov	r0, r2
 8004836:	4798      	blx	r3
 8004838:	6278      	str	r0, [r7, #36]	@ 0x24
    if (status < STATUS_OK)
 800483a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483c:	2b00      	cmp	r3, #0
 800483e:	da0b      	bge.n	8004858 <SCI_InvokeRxCommand+0x134>
    {
        SCI_DataLink_ReleaseFrames(frame);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 fc7d 	bl	8005140 <SCI_DataLink_ReleaseFrames>
        SCI_SendNotAcknowledge(deviceID, cmd, status);
 8004846:	7cf9      	ldrb	r1, [r7, #19]
 8004848:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800484c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800484e:	4618      	mov	r0, r3
 8004850:	f001 fbe0 	bl	8006014 <SCI_SendNotAcknowledge>
        return status;
 8004854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004856:	e05f      	b.n	8004918 <SCI_InvokeRxCommand+0x1f4>
    }

    /* Check if all data has been consumed. (only CRC must be left) */
    uint32_t bytesToRead = SCI_Frame_BytesToRead(frame);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f001 f893 	bl	8005984 <SCI_Frame_BytesToRead>
 800485e:	60f8      	str	r0, [r7, #12]
    if (bytesToRead < 1)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10d      	bne.n	8004882 <SCI_InvokeRxCommand+0x15e>
    {
        SCI_DataLink_ReleaseFrames(frame);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fc6a 	bl	8005140 <SCI_DataLink_ReleaseFrames>
        SCI_SendNotAcknowledge(deviceID, cmd, ERROR_SCI_FRAME_TOO_SHORT);
 800486c:	7cf9      	ldrb	r1, [r7, #19]
 800486e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004872:	f06f 02dc 	mvn.w	r2, #220	@ 0xdc
 8004876:	4618      	mov	r0, r3
 8004878:	f001 fbcc 	bl	8006014 <SCI_SendNotAcknowledge>
        return ERROR_SCI_FRAME_TOO_SHORT;
 800487c:	f06f 03dc 	mvn.w	r3, #220	@ 0xdc
 8004880:	e04a      	b.n	8004918 <SCI_InvokeRxCommand+0x1f4>
    }

    else if (bytesToRead > 1)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d90d      	bls.n	80048a4 <SCI_InvokeRxCommand+0x180>
    {
        SCI_DataLink_ReleaseFrames(frame);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 fc59 	bl	8005140 <SCI_DataLink_ReleaseFrames>
        SCI_SendNotAcknowledge(deviceID, cmd, ERROR_SCI_FRAME_TOO_LONG);
 800488e:	7cf9      	ldrb	r1, [r7, #19]
 8004890:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004894:	f06f 02dd 	mvn.w	r2, #221	@ 0xdd
 8004898:	4618      	mov	r0, r3
 800489a:	f001 fbbb 	bl	8006014 <SCI_SendNotAcknowledge>
        return ERROR_SCI_FRAME_TOO_LONG;
 800489e:	f06f 03dd 	mvn.w	r3, #221	@ 0xdd
 80048a2:	e039      	b.n	8004918 <SCI_InvokeRxCommand+0x1f4>
    }

    /* Send acknowledge. */
    status = SCI_SendAcknowledge(deviceID, cmd);
 80048a4:	7cfa      	ldrb	r2, [r7, #19]
 80048a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80048aa:	4611      	mov	r1, r2
 80048ac:	4618      	mov	r0, r3
 80048ae:	f001 fb77 	bl	8005fa0 <SCI_SendAcknowledge>
 80048b2:	6278      	str	r0, [r7, #36]	@ 0x24
    if (status < STATUS_OK)
 80048b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	da0c      	bge.n	80048d4 <SCI_InvokeRxCommand+0x1b0>
    {
        SCI_DataLink_ReleaseFrames(frame);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 fc40 	bl	8005140 <SCI_DataLink_ReleaseFrames>
        SCI_SendNotAcknowledge(deviceID, cmd, ERROR_FAIL);
 80048c0:	7cf9      	ldrb	r1, [r7, #19]
 80048c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80048c6:	f04f 32ff 	mov.w	r2, #4294967295
 80048ca:	4618      	mov	r0, r3
 80048cc:	f001 fba2 	bl	8006014 <SCI_SendNotAcknowledge>
        return status;
 80048d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d2:	e021      	b.n	8004918 <SCI_InvokeRxCommand+0x1f4>
    }

    /* Run post function if available. */
    if (pfct)
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d01a      	beq.n	8004910 <SCI_InvokeRxCommand+0x1ec>
    {
        SCI_DataLink_ResetRxFrames(frame);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 fc45 	bl	800516a <SCI_DataLink_ResetRxFrames>
        SCI_Frame_Dequeue08u(frame); // skip command
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f001 faff 	bl	8005ee4 <SCI_Frame_Dequeue08u>
        if (SCI_CMD_IS_EXTENDED_CMD(cmd))
 80048e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	da04      	bge.n	80048f8 <SCI_InvokeRxCommand+0x1d4>
            SCI_Frame_Dequeue08u(frame); // skip address
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f001 faf8 	bl	8005ee4 <SCI_Frame_Dequeue08u>
        while (SCI_DataLink_IsTxBusy()) __asm("nop");
 80048f4:	e000      	b.n	80048f8 <SCI_InvokeRxCommand+0x1d4>
 80048f6:	bf00      	nop
 80048f8:	f000 fd94 	bl	8005424 <SCI_DataLink_IsTxBusy>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1f9      	bne.n	80048f6 <SCI_InvokeRxCommand+0x1d2>
        status = pfct(deviceID, frame);
 8004902:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	6879      	ldr	r1, [r7, #4]
 800490a:	4610      	mov	r0, r2
 800490c:	4798      	blx	r3
 800490e:	6278      	str	r0, [r7, #36]	@ 0x24
    }

    /* Release frames. */
    SCI_DataLink_ReleaseFrames(frame);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 fc15 	bl	8005140 <SCI_DataLink_ReleaseFrames>

    return status;
 8004916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004918:	4618      	mov	r0, r3
 800491a:	3728      	adds	r7, #40	@ 0x28
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	0802bd5c 	.word	0x0802bd5c
 8004924:	0802c7e0 	.word	0x0802c7e0
 8004928:	0802bd68 	.word	0x0802bd68
 800492c:	240013a4 	.word	0x240013a4

08004930 <SCI_SendCommand>:

status_t SCI_SendCommand(sci_device_t deviceID, sci_cmd_t cmd, sci_param_t param, sci_data_t data)
{
 8004930:	b590      	push	{r4, r7, lr}
 8004932:	b089      	sub	sp, #36	@ 0x24
 8004934:	af00      	add	r7, sp, #0
 8004936:	60ba      	str	r2, [r7, #8]
 8004938:	607b      	str	r3, [r7, #4]
 800493a:	4603      	mov	r3, r0
 800493c:	73fb      	strb	r3, [r7, #15]
 800493e:	460b      	mov	r3, r1
 8004940:	73bb      	strb	r3, [r7, #14]
    if ((cmd == CMD_INVALID) || SCI_CMD_IS_EXTENDED_CMD(cmd))
 8004942:	7bbb      	ldrb	r3, [r7, #14]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <SCI_SendCommand+0x20>
 8004948:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800494c:	2b00      	cmp	r3, #0
 800494e:	da02      	bge.n	8004956 <SCI_SendCommand+0x26>
        return ERROR_SCI_INVALID_CMD_CODE;
 8004950:	f06f 03d4 	mvn.w	r3, #212	@ 0xd4
 8004954:	e054      	b.n	8004a00 <SCI_SendCommand+0xd0>

    /* Find the command function. */
    sci_tx_cmd_fct_t fct = 0;
 8004956:	2300      	movs	r3, #0
 8004958:	61fb      	str	r3, [r7, #28]
    for (uint_fast8_t i = 0; i < SCI_MAX_COMMANDS; ++i)
 800495a:	2300      	movs	r3, #0
 800495c:	61bb      	str	r3, [r7, #24]
 800495e:	e012      	b.n	8004986 <SCI_SendCommand+0x56>
    {
        if (myCCB[i].cmd == cmd)
 8004960:	4a29      	ldr	r2, [pc, #164]	@ (8004a08 <SCI_SendCommand+0xd8>)
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	4413      	add	r3, r2
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	7bba      	ldrb	r2, [r7, #14]
 800496c:	429a      	cmp	r2, r3
 800496e:	d107      	bne.n	8004980 <SCI_SendCommand+0x50>
        {
            fct = myCCB[i].txfct;
 8004970:	4a25      	ldr	r2, [pc, #148]	@ (8004a08 <SCI_SendCommand+0xd8>)
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	011b      	lsls	r3, r3, #4
 8004976:	4413      	add	r3, r2
 8004978:	3304      	adds	r3, #4
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	61fb      	str	r3, [r7, #28]
            break;
 800497e:	e005      	b.n	800498c <SCI_SendCommand+0x5c>
    for (uint_fast8_t i = 0; i < SCI_MAX_COMMANDS; ++i)
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	3301      	adds	r3, #1
 8004984:	61bb      	str	r3, [r7, #24]
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	2b7f      	cmp	r3, #127	@ 0x7f
 800498a:	d9e9      	bls.n	8004960 <SCI_SendCommand+0x30>
        }
    }

    /* If command function was not found. */
    if (!fct)
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d102      	bne.n	8004998 <SCI_SendCommand+0x68>
    {
        return ERROR_SCI_UNKNOWN_COMMAND;
 8004992:	f06f 03d2 	mvn.w	r3, #210	@ 0xd2
 8004996:	e033      	b.n	8004a00 <SCI_SendCommand+0xd0>
    }

    sci_frame_t * frame = SCI_DataLink_RequestTxFrame(true);
 8004998:	2001      	movs	r0, #1
 800499a:	f000 fc3f 	bl	800521c <SCI_DataLink_RequestTxFrame>
 800499e:	6178      	str	r0, [r7, #20]
    if (!frame) return ERROR_SCI_BUFFER_FULL;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d102      	bne.n	80049ac <SCI_SendCommand+0x7c>
 80049a6:	f06f 03d7 	mvn.w	r3, #215	@ 0xd7
 80049aa:	e029      	b.n	8004a00 <SCI_SendCommand+0xd0>

    if (deviceID > 0)
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00d      	beq.n	80049ce <SCI_SendCommand+0x9e>
    {
        SCI_Frame_Queue08u(frame, cmd | 0x80);
 80049b2:	7bbb      	ldrb	r3, [r7, #14]
 80049b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	4619      	mov	r1, r3
 80049bc:	6978      	ldr	r0, [r7, #20]
 80049be:	f001 f8a3 	bl	8005b08 <SCI_Frame_Queue08u>
        SCI_Frame_Queue08u(frame, deviceID);
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
 80049c4:	4619      	mov	r1, r3
 80049c6:	6978      	ldr	r0, [r7, #20]
 80049c8:	f001 f89e 	bl	8005b08 <SCI_Frame_Queue08u>
 80049cc:	e004      	b.n	80049d8 <SCI_SendCommand+0xa8>
    }
    else
    {
        SCI_Frame_Queue08u(frame, cmd);
 80049ce:	7bbb      	ldrb	r3, [r7, #14]
 80049d0:	4619      	mov	r1, r3
 80049d2:	6978      	ldr	r0, [r7, #20]
 80049d4:	f001 f898 	bl	8005b08 <SCI_Frame_Queue08u>
    }

    /* Invoke the TX command function. */
    status_t status = fct(deviceID, frame, param, data);
 80049d8:	7bf8      	ldrb	r0, [r7, #15]
 80049da:	69fc      	ldr	r4, [r7, #28]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	6979      	ldr	r1, [r7, #20]
 80049e2:	47a0      	blx	r4
 80049e4:	6138      	str	r0, [r7, #16]
    if (status < STATUS_OK)
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	da04      	bge.n	80049f6 <SCI_SendCommand+0xc6>
    {
        SCI_DataLink_ReleaseFrames(frame);
 80049ec:	6978      	ldr	r0, [r7, #20]
 80049ee:	f000 fba7 	bl	8005140 <SCI_DataLink_ReleaseFrames>
        return status;
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	e004      	b.n	8004a00 <SCI_SendCommand+0xd0>
    }

    return SCI_DataLink_SendTxFrame(frame, false);
 80049f6:	2100      	movs	r1, #0
 80049f8:	6978      	ldr	r0, [r7, #20]
 80049fa:	f000 fd29 	bl	8005450 <SCI_DataLink_SendTxFrame>
 80049fe:	4603      	mov	r3, r0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3724      	adds	r7, #36	@ 0x24
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd90      	pop	{r4, r7, pc}
 8004a08:	240013a4 	.word	0x240013a4

08004a0c <RxCmd_Ping>:

/*******************************************************************************
 * Ping Message Command
 ******************************************************************************/
static status_t RxCmd_Ping(sci_device_t deviceID, sci_frame_t * frame)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	4603      	mov	r3, r0
 8004a14:	6039      	str	r1, [r7, #0]
 8004a16:	71fb      	strb	r3, [r7, #7]
    (void) frame;
    (void)deviceID;

    return STATUS_OK; // do nothing, just send an acknowledge
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <RxCmd_StatusReport>:
status_t SCI_SendStatusReport(sci_device_t deviceID, status_t status)
{
    return SCI_SendCommand(deviceID, CMD_STATUS_REPORT, 0, &status);
}
static status_t RxCmd_StatusReport(sci_device_t deviceID, sci_frame_t * frame)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b084      	sub	sp, #16
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	6039      	str	r1, [r7, #0]
 8004a30:	71fb      	strb	r3, [r7, #7]
    (void) frame; // unused;

    status_t status = GetSystemStatus(deviceID);
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fe fbd9 	bl	80031ec <GetSystemStatus>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	60fb      	str	r3, [r7, #12]
    return SCI_SendCommand(deviceID, CMD_STATUS_REPORT, 0, &status);
 8004a3e:	f107 030c 	add.w	r3, r7, #12
 8004a42:	79f8      	ldrb	r0, [r7, #7]
 8004a44:	2200      	movs	r2, #0
 8004a46:	2107      	movs	r1, #7
 8004a48:	f7ff ff72 	bl	8004930 <SCI_SendCommand>
 8004a4c:	4603      	mov	r3, r0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <TxCmd_StatusReport>:
static status_t TxCmd_StatusReport(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, status_t const * status)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b086      	sub	sp, #24
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	603b      	str	r3, [r7, #0]
 8004a62:	4603      	mov	r3, r0
 8004a64:	73fb      	strb	r3, [r7, #15]
    (void)param;
    (void)deviceID;

    if(!status) return ERROR_INVALID_ARGUMENT;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d102      	bne.n	8004a72 <TxCmd_StatusReport+0x1c>
 8004a6c:	f06f 0304 	mvn.w	r3, #4
 8004a70:	e011      	b.n	8004a96 <TxCmd_StatusReport+0x40>
    ltc_t t_now;
    Time_GetNow(&t_now);
 8004a72:	f107 0310 	add.w	r3, r7, #16
 8004a76:	4618      	mov	r0, r3
 8004a78:	f00d febc 	bl	80127f4 <Time_GetNow>
    SCI_Frame_Queue_Time(frame, &t_now);
 8004a7c:	f107 0310 	add.w	r3, r7, #16
 8004a80:	4619      	mov	r1, r3
 8004a82:	68b8      	ldr	r0, [r7, #8]
 8004a84:	f001 f952 	bl	8005d2c <SCI_Frame_Queue_Time>
    SCI_Frame_Queue32s(frame, (int32_t)(*status));
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	68b8      	ldr	r0, [r7, #8]
 8004a90:	f001 f928 	bl	8005ce4 <SCI_Frame_Queue32s>
    return STATUS_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <RxCmd_TestMessage>:

/*******************************************************************************
 * Test Message Command
 ******************************************************************************/
static status_t RxCmd_TestMessage(sci_device_t deviceID, sci_frame_t * frame)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b082      	sub	sp, #8
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	6039      	str	r1, [r7, #0]
 8004aa8:	71fb      	strb	r3, [r7, #7]
    return SCI_SendCommand(deviceID, CMD_TEST_MESSAGE, 0, frame);
 8004aaa:	79f8      	ldrb	r0, [r7, #7]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	2104      	movs	r1, #4
 8004ab2:	f7ff ff3d 	bl	8004930 <SCI_SendCommand>
 8004ab6:	4603      	mov	r3, r0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <TxCmd_TestMessage>:
static status_t TxCmd_TestMessage(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_frame_t * msg)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60b9      	str	r1, [r7, #8]
 8004ac8:	607a      	str	r2, [r7, #4]
 8004aca:	603b      	str	r3, [r7, #0]
 8004acc:	4603      	mov	r3, r0
 8004ace:	73fb      	strb	r3, [r7, #15]
    (void)param;
    (void)deviceID;

    while (SCI_Frame_BytesToRead(msg) > 1)
 8004ad0:	e007      	b.n	8004ae2 <TxCmd_TestMessage+0x22>
        SCI_Frame_Queue08u(frame, SCI_Frame_Dequeue08u(msg));
 8004ad2:	6838      	ldr	r0, [r7, #0]
 8004ad4:	f001 fa06 	bl	8005ee4 <SCI_Frame_Dequeue08u>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	4619      	mov	r1, r3
 8004adc:	68b8      	ldr	r0, [r7, #8]
 8004ade:	f001 f813 	bl	8005b08 <SCI_Frame_Queue08u>
    while (SCI_Frame_BytesToRead(msg) > 1)
 8004ae2:	6838      	ldr	r0, [r7, #0]
 8004ae4:	f000 ff4e 	bl	8005984 <SCI_Frame_BytesToRead>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d8f1      	bhi.n	8004ad2 <TxCmd_TestMessage+0x12>

    return STATUS_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <RxCmd_SystemReset>:
/*******************************************************************************
 * Reset System Command
 ******************************************************************************/
#include "utility/time.h"
static status_t RxCmd_SystemReset(sci_device_t deviceID, sci_frame_t * frame)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	4603      	mov	r3, r0
 8004b00:	6039      	str	r1, [r7, #0]
 8004b02:	71fb      	strb	r3, [r7, #7]
    /* No need to consider device ID, this is a system-wide reset */
    (void)deviceID;

    if(0xDEADC0DE != SCI_Frame_Dequeue32u(frame))
 8004b04:	6838      	ldr	r0, [r7, #0]
 8004b06:	f001 fa11 	bl	8005f2c <SCI_Frame_Dequeue32u>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	4a05      	ldr	r2, [pc, #20]	@ (8004b24 <RxCmd_SystemReset+0x2c>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d002      	beq.n	8004b18 <RxCmd_SystemReset+0x20>
    {
        return ERROR_SCI_INVALID_CMD_PARAMETER;
 8004b12:	f06f 03d5 	mvn.w	r3, #213	@ 0xd5
 8004b16:	e000      	b.n	8004b1a <RxCmd_SystemReset+0x22>
    }
    return STATUS_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	deadc0de 	.word	0xdeadc0de

08004b28 <PrxCmd_SystemReset>:
static status_t PrxCmd_SystemReset(sci_device_t deviceID, sci_frame_t * frame)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	4603      	mov	r3, r0
 8004b30:	6039      	str	r1, [r7, #0]
 8004b32:	71fb      	strb	r3, [r7, #7]
    (void)deviceID;
    (void)frame;

    Time_DelayMSec(10);
 8004b34:	200a      	movs	r0, #10
 8004b36:	f00d ff4f 	bl	80129d8 <Time_DelayMSec>
    Board_Reset();
 8004b3a:	f001 fc9f 	bl	800647c <Board_Reset>
    return STATUS_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3708      	adds	r7, #8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <SCI_CMD_Init>:

/*******************************************************************************
 * Initialization
 ******************************************************************************/
status_t SCI_CMD_Init(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
    status_t status = STATUS_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	607b      	str	r3, [r7, #4]

    status = SCI_SetRxCommand(CMD_PING, RxCmd_Ping);
 8004b52:	4918      	ldr	r1, [pc, #96]	@ (8004bb4 <SCI_CMD_Init+0x6c>)
 8004b54:	2001      	movs	r0, #1
 8004b56:	f7ff fd39 	bl	80045cc <SCI_SetRxCommand>
 8004b5a:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	da01      	bge.n	8004b66 <SCI_CMD_Init+0x1e>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	e021      	b.n	8004baa <SCI_CMD_Init+0x62>

    status = SCI_SetRxTxCommand(CMD_TEST_MESSAGE, RxCmd_TestMessage, (sci_tx_cmd_fct_t)TxCmd_TestMessage);
 8004b66:	4a14      	ldr	r2, [pc, #80]	@ (8004bb8 <SCI_CMD_Init+0x70>)
 8004b68:	4914      	ldr	r1, [pc, #80]	@ (8004bbc <SCI_CMD_Init+0x74>)
 8004b6a:	2004      	movs	r0, #4
 8004b6c:	f7ff fd62 	bl	8004634 <SCI_SetRxTxCommand>
 8004b70:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	da01      	bge.n	8004b7c <SCI_CMD_Init+0x34>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	e016      	b.n	8004baa <SCI_CMD_Init+0x62>

    status = SCI_SetPostRxCommand(CMD_SYSTEM_RESET, RxCmd_SystemReset, PrxCmd_SystemReset);
 8004b7c:	4a10      	ldr	r2, [pc, #64]	@ (8004bc0 <SCI_CMD_Init+0x78>)
 8004b7e:	4911      	ldr	r1, [pc, #68]	@ (8004bc4 <SCI_CMD_Init+0x7c>)
 8004b80:	2008      	movs	r0, #8
 8004b82:	f7ff fd34 	bl	80045ee <SCI_SetPostRxCommand>
 8004b86:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	da01      	bge.n	8004b92 <SCI_CMD_Init+0x4a>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	e00b      	b.n	8004baa <SCI_CMD_Init+0x62>

    status = SCI_SetRxTxCommand(CMD_STATUS_REPORT, RxCmd_StatusReport, (sci_tx_cmd_fct_t)TxCmd_StatusReport);
 8004b92:	4a0d      	ldr	r2, [pc, #52]	@ (8004bc8 <SCI_CMD_Init+0x80>)
 8004b94:	490d      	ldr	r1, [pc, #52]	@ (8004bcc <SCI_CMD_Init+0x84>)
 8004b96:	2007      	movs	r0, #7
 8004b98:	f7ff fd4c 	bl	8004634 <SCI_SetRxTxCommand>
 8004b9c:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	da01      	bge.n	8004ba8 <SCI_CMD_Init+0x60>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	e000      	b.n	8004baa <SCI_CMD_Init+0x62>

    return status;
 8004ba8:	687b      	ldr	r3, [r7, #4]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	08004a0d 	.word	0x08004a0d
 8004bb8:	08004ac1 	.word	0x08004ac1
 8004bbc:	08004a9f 	.word	0x08004a9f
 8004bc0:	08004b29 	.word	0x08004b29
 8004bc4:	08004af9 	.word	0x08004af9
 8004bc8:	08004a57 	.word	0x08004a57
 8004bcc:	08004a27 	.word	0x08004a27

08004bd0 <SCI_CRC8_Init>:

/*******************************************************************************
 * Code
 ******************************************************************************/
void SCI_CRC8_Init(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
    // prepare CRC lookup table
    for (unsigned int i = 0; i < 256; i++)
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	607b      	str	r3, [r7, #4]
 8004bda:	e021      	b.n	8004c20 <SCI_CRC8_Init+0x50>
    {
        uint8_t b = (uint8_t)i;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	70fb      	strb	r3, [r7, #3]
        for (uint8_t j = 0; j < 8; j++)
 8004be0:	2300      	movs	r3, #0
 8004be2:	70bb      	strb	r3, [r7, #2]
 8004be4:	e011      	b.n	8004c0a <SCI_CRC8_Init+0x3a>
        {
            if ((b & 0x80U) != 0)
 8004be6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	da07      	bge.n	8004bfe <SCI_CRC8_Init+0x2e>
            {
                b = (uint8_t)(b << 1U);
 8004bee:	78fb      	ldrb	r3, [r7, #3]
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	70fb      	strb	r3, [r7, #3]
                b ^= CRC8GENERATOR;
 8004bf4:	78fb      	ldrb	r3, [r7, #3]
 8004bf6:	f083 031d 	eor.w	r3, r3, #29
 8004bfa:	70fb      	strb	r3, [r7, #3]
 8004bfc:	e002      	b.n	8004c04 <SCI_CRC8_Init+0x34>
            }
            else
            {
                b = (uint8_t)(b << 1U);
 8004bfe:	78fb      	ldrb	r3, [r7, #3]
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	70fb      	strb	r3, [r7, #3]
        for (uint8_t j = 0; j < 8; j++)
 8004c04:	78bb      	ldrb	r3, [r7, #2]
 8004c06:	3301      	adds	r3, #1
 8004c08:	70bb      	strb	r3, [r7, #2]
 8004c0a:	78bb      	ldrb	r3, [r7, #2]
 8004c0c:	2b07      	cmp	r3, #7
 8004c0e:	d9ea      	bls.n	8004be6 <SCI_CRC8_Init+0x16>
            }
        }
        /* store CRC value in lookup table */
        myCRC8Lookup[i] = b;
 8004c10:	4a08      	ldr	r2, [pc, #32]	@ (8004c34 <SCI_CRC8_Init+0x64>)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4413      	add	r3, r2
 8004c16:	78fa      	ldrb	r2, [r7, #3]
 8004c18:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < 256; i++)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	607b      	str	r3, [r7, #4]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2bff      	cmp	r3, #255	@ 0xff
 8004c24:	d9da      	bls.n	8004bdc <SCI_CRC8_Init+0xc>
    }
}
 8004c26:	bf00      	nop
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	24001ba4 	.word	0x24001ba4

08004c38 <SCI_CRC8_Compute>:

uint8_t SCI_CRC8_Compute(uint8_t crc, const uint8_t * data, size_t length)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	4603      	mov	r3, r0
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	73fb      	strb	r3, [r7, #15]
    // CRC8_SAE_J1850_ZERO
    while (length--)
 8004c46:	e00a      	b.n	8004c5e <SCI_CRC8_Compute+0x26>
        crc = myCRC8Lookup[crc ^ (*data++)];
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	1c5a      	adds	r2, r3, #1
 8004c4c:	60ba      	str	r2, [r7, #8]
 8004c4e:	781a      	ldrb	r2, [r3, #0]
 8004c50:	7bfb      	ldrb	r3, [r7, #15]
 8004c52:	4053      	eors	r3, r2
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	461a      	mov	r2, r3
 8004c58:	4b07      	ldr	r3, [pc, #28]	@ (8004c78 <SCI_CRC8_Compute+0x40>)
 8004c5a:	5c9b      	ldrb	r3, [r3, r2]
 8004c5c:	73fb      	strb	r3, [r7, #15]
    while (length--)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	1e5a      	subs	r2, r3, #1
 8004c62:	607a      	str	r2, [r7, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1ef      	bne.n	8004c48 <SCI_CRC8_Compute+0x10>
    return crc;
 8004c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	24001ba4 	.word	0x24001ba4

08004c7c <SCI_DataLink_Init>:

/*******************************************************************************
 * Code
 ******************************************************************************/
status_t SCI_DataLink_Init(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
    status_t status = STATUS_OK;
 8004c82:	2300      	movs	r3, #0
 8004c84:	603b      	str	r3, [r7, #0]
    SCI_CurrentTxFrame = 0;
 8004c86:	4b29      	ldr	r3, [pc, #164]	@ (8004d2c <SCI_DataLink_Init+0xb0>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	601a      	str	r2, [r3, #0]

    for (uint8_t i = 0; i < SCI_FRAME_BUF_CT; ++i)
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	71fb      	strb	r3, [r7, #7]
 8004c90:	e021      	b.n	8004cd6 <SCI_DataLink_Init+0x5a>
    {
        SCI_FrameBuffer[i].Buffer = SCI_DataBuffer + (i * SCI_FRAME_SIZE);
 8004c92:	79fb      	ldrb	r3, [r7, #7]
 8004c94:	019b      	lsls	r3, r3, #6
 8004c96:	4619      	mov	r1, r3
 8004c98:	79fb      	ldrb	r3, [r7, #7]
 8004c9a:	4a25      	ldr	r2, [pc, #148]	@ (8004d30 <SCI_DataLink_Init+0xb4>)
 8004c9c:	440a      	add	r2, r1
 8004c9e:	4925      	ldr	r1, [pc, #148]	@ (8004d34 <SCI_DataLink_Init+0xb8>)
 8004ca0:	011b      	lsls	r3, r3, #4
 8004ca2:	440b      	add	r3, r1
 8004ca4:	3308      	adds	r3, #8
 8004ca6:	601a      	str	r2, [r3, #0]
        SCI_FrameBuffer[i].RdPtr = 0;
 8004ca8:	79fb      	ldrb	r3, [r7, #7]
 8004caa:	4a22      	ldr	r2, [pc, #136]	@ (8004d34 <SCI_DataLink_Init+0xb8>)
 8004cac:	011b      	lsls	r3, r3, #4
 8004cae:	4413      	add	r3, r2
 8004cb0:	3304      	adds	r3, #4
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]
        SCI_FrameBuffer[i].WrPtr = 0;
 8004cb6:	79fb      	ldrb	r3, [r7, #7]
 8004cb8:	4a1e      	ldr	r2, [pc, #120]	@ (8004d34 <SCI_DataLink_Init+0xb8>)
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	4413      	add	r3, r2
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]
        SCI_FrameBuffer[i].Next = 0;
 8004cc2:	79fb      	ldrb	r3, [r7, #7]
 8004cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8004d34 <SCI_DataLink_Init+0xb8>)
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	4413      	add	r3, r2
 8004cca:	330c      	adds	r3, #12
 8004ccc:	2200      	movs	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < SCI_FRAME_BUF_CT; ++i)
 8004cd0:	79fb      	ldrb	r3, [r7, #7]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	71fb      	strb	r3, [r7, #7]
 8004cd6:	79fb      	ldrb	r3, [r7, #7]
 8004cd8:	2b3f      	cmp	r3, #63	@ 0x3f
 8004cda:	d9da      	bls.n	8004c92 <SCI_DataLink_Init+0x16>
    }

    SCI_RxFrameQueue.Load = 0;
 8004cdc:	4b16      	ldr	r3, [pc, #88]	@ (8004d38 <SCI_DataLink_Init+0xbc>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	609a      	str	r2, [r3, #8]
    SCI_RxFrameQueue.Head = SCI_FrameBuffer;
 8004ce2:	4b15      	ldr	r3, [pc, #84]	@ (8004d38 <SCI_DataLink_Init+0xbc>)
 8004ce4:	4a13      	ldr	r2, [pc, #76]	@ (8004d34 <SCI_DataLink_Init+0xb8>)
 8004ce6:	605a      	str	r2, [r3, #4]
    SCI_RxFrameQueue.Buff = SCI_FrameBuffer;
 8004ce8:	4b13      	ldr	r3, [pc, #76]	@ (8004d38 <SCI_DataLink_Init+0xbc>)
 8004cea:	4a12      	ldr	r2, [pc, #72]	@ (8004d34 <SCI_DataLink_Init+0xb8>)
 8004cec:	601a      	str	r2, [r3, #0]
    SCI_RxFrameQueue.Size = SCI_FRAME_BUF_RX_CT;
 8004cee:	4b12      	ldr	r3, [pc, #72]	@ (8004d38 <SCI_DataLink_Init+0xbc>)
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	60da      	str	r2, [r3, #12]

    SCI_TxFrameQueue.Load = 0;
 8004cf4:	4b11      	ldr	r3, [pc, #68]	@ (8004d3c <SCI_DataLink_Init+0xc0>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	609a      	str	r2, [r3, #8]
    SCI_TxFrameQueue.Head = SCI_FrameBuffer + SCI_FRAME_BUF_RX_CT;
 8004cfa:	4a11      	ldr	r2, [pc, #68]	@ (8004d40 <SCI_DataLink_Init+0xc4>)
 8004cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8004d3c <SCI_DataLink_Init+0xc0>)
 8004cfe:	605a      	str	r2, [r3, #4]
    SCI_TxFrameQueue.Buff = SCI_FrameBuffer + SCI_FRAME_BUF_RX_CT;
 8004d00:	4a0f      	ldr	r2, [pc, #60]	@ (8004d40 <SCI_DataLink_Init+0xc4>)
 8004d02:	4b0e      	ldr	r3, [pc, #56]	@ (8004d3c <SCI_DataLink_Init+0xc0>)
 8004d04:	601a      	str	r2, [r3, #0]
    SCI_TxFrameQueue.Size = SCI_FRAME_BUF_TX_CT;
 8004d06:	4b0d      	ldr	r3, [pc, #52]	@ (8004d3c <SCI_DataLink_Init+0xc0>)
 8004d08:	2220      	movs	r2, #32
 8004d0a:	60da      	str	r2, [r3, #12]

    SCI_CRC8_Init();
 8004d0c:	f7ff ff60 	bl	8004bd0 <SCI_CRC8_Init>
    USB_DeviceApplicationInit();
    USB_SetRxCallback(RxCallback);
    USB_SetErrorCallback(RaiseError);
    Time_DelayMSec(100);
#else
    status = UART_Init();
 8004d10:	f002 f896 	bl	8006e40 <UART_Init>
 8004d14:	6038      	str	r0, [r7, #0]
    UART_SetRxCallback(RxCallback);
 8004d16:	480b      	ldr	r0, [pc, #44]	@ (8004d44 <SCI_DataLink_Init+0xc8>)
 8004d18:	f002 f99a 	bl	8007050 <UART_SetRxCallback>
    UART_SetErrorCallback(RaiseError);
 8004d1c:	480a      	ldr	r0, [pc, #40]	@ (8004d48 <SCI_DataLink_Init+0xcc>)
 8004d1e:	f002 f9c7 	bl	80070b0 <UART_SetErrorCallback>
#endif

    return status;
 8004d22:	683b      	ldr	r3, [r7, #0]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3708      	adds	r7, #8
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	240030cc 	.word	0x240030cc
 8004d30:	24001ca4 	.word	0x24001ca4
 8004d34:	24002ca4 	.word	0x24002ca4
 8004d38:	240030a4 	.word	0x240030a4
 8004d3c:	240030b4 	.word	0x240030b4
 8004d40:	24002ea4 	.word	0x24002ea4
 8004d44:	08004d71 	.word	0x08004d71
 8004d48:	08004d4d 	.word	0x08004d4d

08004d4c <RaiseError>:

/*******************************************************************************
 * IRQ handler
 ******************************************************************************/
static inline void RaiseError(status_t error)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
    if (SCI_ErrorCallback)
 8004d54:	4b05      	ldr	r3, [pc, #20]	@ (8004d6c <RaiseError+0x20>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <RaiseError+0x18>
        SCI_ErrorCallback(error);
 8004d5c:	4b03      	ldr	r3, [pc, #12]	@ (8004d6c <RaiseError+0x20>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	4798      	blx	r3
}
 8004d64:	bf00      	nop
 8004d66:	3708      	adds	r7, #8
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	240030c8 	.word	0x240030c8

08004d70 <RxCallback>:


/* Interrupt service routine for the receiving data from the serial port; */
static void RxCallback(uint8_t const *data, uint32_t size)
{
 8004d70:	b590      	push	{r4, r7, lr}
 8004d72:	b087      	sub	sp, #28
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
    static bool escapeNextByte = false; /*!< Flag for byte stuffing */
    static sci_frame_t *f = 0; /*!< the current buffer in the queue. */
    static sci_frame_t *f0 = 0; /*!< the first buffer in the queue. */

    for (uint8_t const *d = data; d < data + size; ++d)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	617b      	str	r3, [r7, #20]
 8004d7e:	e112      	b.n	8004fa6 <RxCallback+0x236>
    {
        uint8_t rx = *d;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	74fb      	strb	r3, [r7, #19]
        if (escapeNextByte)
 8004d86:	4b8e      	ldr	r3, [pc, #568]	@ (8004fc0 <RxCallback+0x250>)
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d02c      	beq.n	8004de8 <RxCallback+0x78>
        {
            escapeNextByte = false;
 8004d8e:	4b8c      	ldr	r3, [pc, #560]	@ (8004fc0 <RxCallback+0x250>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	701a      	strb	r2, [r3, #0]

            /* Error Handling for the escape byte */
            rx = (uint8_t)(~rx);
 8004d94:	7cfb      	ldrb	r3, [r7, #19]
 8004d96:	43db      	mvns	r3, r3
 8004d98:	74fb      	strb	r3, [r7, #19]
            if (f0)
 8004d9a:	4b8a      	ldr	r3, [pc, #552]	@ (8004fc4 <RxCallback+0x254>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 80b1 	beq.w	8004f06 <RxCallback+0x196>
            {
                if ((rx != SCI_ESCAPE_BYTE) &&
 8004da4:	7cfb      	ldrb	r3, [r7, #19]
 8004da6:	2b1b      	cmp	r3, #27
 8004da8:	f000 80ad 	beq.w	8004f06 <RxCallback+0x196>
 8004dac:	7cfb      	ldrb	r3, [r7, #19]
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	f000 80a9 	beq.w	8004f06 <RxCallback+0x196>
                    (rx != SCI_START_BYTE) &&
 8004db4:	7cfb      	ldrb	r3, [r7, #19]
 8004db6:	2b03      	cmp	r3, #3
 8004db8:	f000 80a5 	beq.w	8004f06 <RxCallback+0x196>
                    (rx != SCI_STOP_BYTE))
                {
                    /* Reset f0 */
                    SCI_DataLink_ReleaseFrames(f0);
 8004dbc:	4b81      	ldr	r3, [pc, #516]	@ (8004fc4 <RxCallback+0x254>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 f9bd 	bl	8005140 <SCI_DataLink_ReleaseFrames>
                    f0 = 0;
 8004dc6:	4b7f      	ldr	r3, [pc, #508]	@ (8004fc4 <RxCallback+0x254>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]
                    f = 0;
 8004dcc:	4b7e      	ldr	r3, [pc, #504]	@ (8004fc8 <RxCallback+0x258>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	601a      	str	r2, [r3, #0]

                    /* send an NAK with error code to the host */
                    SCI_SendNotAcknowledge(0, CMD_INVALID, ERROR_SCI_INVALID_ESCAPE_BYTE);
 8004dd2:	f06f 02db 	mvn.w	r2, #219	@ 0xdb
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	2000      	movs	r0, #0
 8004dda:	f001 f91b 	bl	8006014 <SCI_SendNotAcknowledge>
                    RaiseError(ERROR_SCI_INVALID_ESCAPE_BYTE);
 8004dde:	f06f 00db 	mvn.w	r0, #219	@ 0xdb
 8004de2:	f7ff ffb3 	bl	8004d4c <RaiseError>
                    continue;
 8004de6:	e0db      	b.n	8004fa0 <RxCallback+0x230>
                }
            }
        }
        else
        {
            if (rx == SCI_ESCAPE_BYTE)
 8004de8:	7cfb      	ldrb	r3, [r7, #19]
 8004dea:	2b1b      	cmp	r3, #27
 8004dec:	d103      	bne.n	8004df6 <RxCallback+0x86>
            {
                /* Escape byte: ignore following control bytes. */
                escapeNextByte = true;
 8004dee:	4b74      	ldr	r3, [pc, #464]	@ (8004fc0 <RxCallback+0x250>)
 8004df0:	2201      	movs	r2, #1
 8004df2:	701a      	strb	r2, [r3, #0]
                continue;
 8004df4:	e0d4      	b.n	8004fa0 <RxCallback+0x230>
            }
            else if (rx == SCI_START_BYTE)
 8004df6:	7cfb      	ldrb	r3, [r7, #19]
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d132      	bne.n	8004e62 <RxCallback+0xf2>
            {
                /* Start byte: start a new command. */
                if (f0)
 8004dfc:	4b71      	ldr	r3, [pc, #452]	@ (8004fc4 <RxCallback+0x254>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d014      	beq.n	8004e2e <RxCallback+0xbe>
                {
                    /* Invalid Start Byte: already within an active frame -> reset f0 */
                    SCI_DataLink_ReleaseFrames(f0);
 8004e04:	4b6f      	ldr	r3, [pc, #444]	@ (8004fc4 <RxCallback+0x254>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f000 f999 	bl	8005140 <SCI_DataLink_ReleaseFrames>
                    f0 = 0;
 8004e0e:	4b6d      	ldr	r3, [pc, #436]	@ (8004fc4 <RxCallback+0x254>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	601a      	str	r2, [r3, #0]
                    f = 0;
 8004e14:	4b6c      	ldr	r3, [pc, #432]	@ (8004fc8 <RxCallback+0x258>)
 8004e16:	2200      	movs	r2, #0
 8004e18:	601a      	str	r2, [r3, #0]

                    /* send an NAK with error code to the host */
                    SCI_SendNotAcknowledge(0, CMD_INVALID, ERROR_SCI_INVALID_START_BYTE);
 8004e1a:	f06f 02d8 	mvn.w	r2, #216	@ 0xd8
 8004e1e:	2100      	movs	r1, #0
 8004e20:	2000      	movs	r0, #0
 8004e22:	f001 f8f7 	bl	8006014 <SCI_SendNotAcknowledge>
                    RaiseError(ERROR_SCI_INVALID_START_BYTE);
 8004e26:	f06f 00d8 	mvn.w	r0, #216	@ 0xd8
 8004e2a:	f7ff ff8f 	bl	8004d4c <RaiseError>
                }

                f0 = SCI_DataLink_RequestFrame(&SCI_RxFrameQueue);
 8004e2e:	4867      	ldr	r0, [pc, #412]	@ (8004fcc <RxCallback+0x25c>)
 8004e30:	f000 f9b1 	bl	8005196 <SCI_DataLink_RequestFrame>
 8004e34:	4603      	mov	r3, r0
 8004e36:	4a63      	ldr	r2, [pc, #396]	@ (8004fc4 <RxCallback+0x254>)
 8004e38:	6013      	str	r3, [r2, #0]

                if (!f0)
 8004e3a:	4b62      	ldr	r3, [pc, #392]	@ (8004fc4 <RxCallback+0x254>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10a      	bne.n	8004e58 <RxCallback+0xe8>
                {
                    /* send an NAK with error code to the host */
                    SCI_SendNotAcknowledge(0, CMD_INVALID, ERROR_SCI_RX_BUFFER_FULL);
 8004e42:	f06f 02da 	mvn.w	r2, #218	@ 0xda
 8004e46:	2100      	movs	r1, #0
 8004e48:	2000      	movs	r0, #0
 8004e4a:	f001 f8e3 	bl	8006014 <SCI_SendNotAcknowledge>
                    RaiseError(ERROR_SCI_RX_BUFFER_FULL);
 8004e4e:	f06f 00da 	mvn.w	r0, #218	@ 0xda
 8004e52:	f7ff ff7b 	bl	8004d4c <RaiseError>
                    continue;
 8004e56:	e0a3      	b.n	8004fa0 <RxCallback+0x230>
                }

                f = f0;
 8004e58:	4b5a      	ldr	r3, [pc, #360]	@ (8004fc4 <RxCallback+0x254>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a5a      	ldr	r2, [pc, #360]	@ (8004fc8 <RxCallback+0x258>)
 8004e5e:	6013      	str	r3, [r2, #0]
                continue;
 8004e60:	e09e      	b.n	8004fa0 <RxCallback+0x230>
            }
            else if (rx == SCI_STOP_BYTE)
 8004e62:	7cfb      	ldrb	r3, [r7, #19]
 8004e64:	2b03      	cmp	r3, #3
 8004e66:	d14e      	bne.n	8004f06 <RxCallback+0x196>
            {
                /* Stop byte: command completed. */
                if (!f0)
 8004e68:	4b56      	ldr	r3, [pc, #344]	@ (8004fc4 <RxCallback+0x254>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 8096 	beq.w	8004f9e <RxCallback+0x22e>
                    /* Invalid stop byte outside of an active frame received: ignore */
                    continue;
                }

                /* Check data length: minimal 2 bytes required (Command + CRC) */
                if (f0->WrPtr - f0->Buffer < 2)
 8004e72:	4b54      	ldr	r3, [pc, #336]	@ (8004fc4 <RxCallback+0x254>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	4b52      	ldr	r3, [pc, #328]	@ (8004fc4 <RxCallback+0x254>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	dc15      	bgt.n	8004eb0 <RxCallback+0x140>
                {
                    /* Release the frame */
                    SCI_DataLink_ReleaseFrames(f0);
 8004e84:	4b4f      	ldr	r3, [pc, #316]	@ (8004fc4 <RxCallback+0x254>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 f959 	bl	8005140 <SCI_DataLink_ReleaseFrames>
                    f0 = 0;
 8004e8e:	4b4d      	ldr	r3, [pc, #308]	@ (8004fc4 <RxCallback+0x254>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	601a      	str	r2, [r3, #0]
                    f = 0;
 8004e94:	4b4c      	ldr	r3, [pc, #304]	@ (8004fc8 <RxCallback+0x258>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	601a      	str	r2, [r3, #0]

                    /* send an NAK with error code to the host */
                    SCI_SendNotAcknowledge(0, CMD_INVALID, ERROR_SCI_FRAME_TOO_SHORT);
 8004e9a:	f06f 02dc 	mvn.w	r2, #220	@ 0xdc
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	2000      	movs	r0, #0
 8004ea2:	f001 f8b7 	bl	8006014 <SCI_SendNotAcknowledge>
                    RaiseError(ERROR_SCI_FRAME_TOO_SHORT);
 8004ea6:	f06f 00dc 	mvn.w	r0, #220	@ 0xdc
 8004eaa:	f7ff ff4f 	bl	8004d4c <RaiseError>
                    continue;
 8004eae:	e077      	b.n	8004fa0 <RxCallback+0x230>
                }

                if (SCI_RxCallback)
 8004eb0:	4b47      	ldr	r3, [pc, #284]	@ (8004fd0 <RxCallback+0x260>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00e      	beq.n	8004ed6 <RxCallback+0x166>
                {
                    /* Invoke callback. */
                    if (SCI_RxCallback(f0) != STATUS_OK)
 8004eb8:	4b45      	ldr	r3, [pc, #276]	@ (8004fd0 <RxCallback+0x260>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a41      	ldr	r2, [pc, #260]	@ (8004fc4 <RxCallback+0x254>)
 8004ebe:	6812      	ldr	r2, [r2, #0]
 8004ec0:	4610      	mov	r0, r2
 8004ec2:	4798      	blx	r3
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d016      	beq.n	8004ef8 <RxCallback+0x188>
                    {
                        SCI_DataLink_ReleaseFrames(f0);
 8004eca:	4b3e      	ldr	r3, [pc, #248]	@ (8004fc4 <RxCallback+0x254>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 f936 	bl	8005140 <SCI_DataLink_ReleaseFrames>
 8004ed4:	e010      	b.n	8004ef8 <RxCallback+0x188>
                    }
                }
                else
                {
                    /* Invoke command directly if no callback. */
                    status_t status = SCI_InvokeRxCommand(f0);
 8004ed6:	4b3b      	ldr	r3, [pc, #236]	@ (8004fc4 <RxCallback+0x254>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7ff fc22 	bl	8004724 <SCI_InvokeRxCommand>
 8004ee0:	60f8      	str	r0, [r7, #12]
                    if (status != STATUS_OK)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d007      	beq.n	8004ef8 <RxCallback+0x188>
                    {
                        SCI_DataLink_ReleaseFrames(f0);
 8004ee8:	4b36      	ldr	r3, [pc, #216]	@ (8004fc4 <RxCallback+0x254>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 f927 	bl	8005140 <SCI_DataLink_ReleaseFrames>
                        RaiseError(status);
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f7ff ff2a 	bl	8004d4c <RaiseError>
                    }
                }

                f0 = 0;
 8004ef8:	4b32      	ldr	r3, [pc, #200]	@ (8004fc4 <RxCallback+0x254>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	601a      	str	r2, [r3, #0]
                f = 0;
 8004efe:	4b32      	ldr	r3, [pc, #200]	@ (8004fc8 <RxCallback+0x258>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	601a      	str	r2, [r3, #0]
                continue;
 8004f04:	e04c      	b.n	8004fa0 <RxCallback+0x230>
            }
        }

        if (f)
 8004f06:	4b30      	ldr	r3, [pc, #192]	@ (8004fc8 <RxCallback+0x258>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d048      	beq.n	8004fa0 <RxCallback+0x230>
        {
            /* Check if frame is full and queue another frame. */
            if (f->WrPtr - f->Buffer == SCI_FRAME_SIZE)
 8004f0e:	4b2e      	ldr	r3, [pc, #184]	@ (8004fc8 <RxCallback+0x258>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	4b2c      	ldr	r3, [pc, #176]	@ (8004fc8 <RxCallback+0x258>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b40      	cmp	r3, #64	@ 0x40
 8004f1e:	d126      	bne.n	8004f6e <RxCallback+0x1fe>
            {
                f->Next = SCI_DataLink_RequestFrame(&SCI_RxFrameQueue);
 8004f20:	4b29      	ldr	r3, [pc, #164]	@ (8004fc8 <RxCallback+0x258>)
 8004f22:	681c      	ldr	r4, [r3, #0]
 8004f24:	4829      	ldr	r0, [pc, #164]	@ (8004fcc <RxCallback+0x25c>)
 8004f26:	f000 f936 	bl	8005196 <SCI_DataLink_RequestFrame>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	60e3      	str	r3, [r4, #12]

                if (!f->Next)
 8004f2e:	4b26      	ldr	r3, [pc, #152]	@ (8004fc8 <RxCallback+0x258>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d115      	bne.n	8004f64 <RxCallback+0x1f4>
                {
                    /* Reset f0 */
                    SCI_DataLink_ReleaseFrames(f0);
 8004f38:	4b22      	ldr	r3, [pc, #136]	@ (8004fc4 <RxCallback+0x254>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 f8ff 	bl	8005140 <SCI_DataLink_ReleaseFrames>
                    f0 = 0;
 8004f42:	4b20      	ldr	r3, [pc, #128]	@ (8004fc4 <RxCallback+0x254>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]
                    f = 0;
 8004f48:	4b1f      	ldr	r3, [pc, #124]	@ (8004fc8 <RxCallback+0x258>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	601a      	str	r2, [r3, #0]

                    /* send an NAK with error code to the host */
                    SCI_SendNotAcknowledge(0, CMD_INVALID, ERROR_SCI_RX_BUFFER_FULL);
 8004f4e:	f06f 02da 	mvn.w	r2, #218	@ 0xda
 8004f52:	2100      	movs	r1, #0
 8004f54:	2000      	movs	r0, #0
 8004f56:	f001 f85d 	bl	8006014 <SCI_SendNotAcknowledge>
                    RaiseError(ERROR_SCI_RX_BUFFER_FULL);
 8004f5a:	f06f 00da 	mvn.w	r0, #218	@ 0xda
 8004f5e:	f7ff fef5 	bl	8004d4c <RaiseError>
                    continue;
 8004f62:	e01d      	b.n	8004fa0 <RxCallback+0x230>
                }

                f = f->Next;
 8004f64:	4b18      	ldr	r3, [pc, #96]	@ (8004fc8 <RxCallback+0x258>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	4a17      	ldr	r2, [pc, #92]	@ (8004fc8 <RxCallback+0x258>)
 8004f6c:	6013      	str	r3, [r2, #0]
            }

            /* Save byte into command buffer. */
            assert(f->WrPtr - f->Buffer < SCI_FRAME_SIZE);
 8004f6e:	4b16      	ldr	r3, [pc, #88]	@ (8004fc8 <RxCallback+0x258>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	4b14      	ldr	r3, [pc, #80]	@ (8004fc8 <RxCallback+0x258>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b3f      	cmp	r3, #63	@ 0x3f
 8004f7e:	dd06      	ble.n	8004f8e <RxCallback+0x21e>
 8004f80:	4b14      	ldr	r3, [pc, #80]	@ (8004fd4 <RxCallback+0x264>)
 8004f82:	4a15      	ldr	r2, [pc, #84]	@ (8004fd8 <RxCallback+0x268>)
 8004f84:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8004f88:	4814      	ldr	r0, [pc, #80]	@ (8004fdc <RxCallback+0x26c>)
 8004f8a:	f002 fa19 	bl	80073c0 <__assert_func>
            *(f->WrPtr++) = rx;
 8004f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8004fc8 <RxCallback+0x258>)
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	6813      	ldr	r3, [r2, #0]
 8004f94:	1c59      	adds	r1, r3, #1
 8004f96:	6011      	str	r1, [r2, #0]
 8004f98:	7cfa      	ldrb	r2, [r7, #19]
 8004f9a:	701a      	strb	r2, [r3, #0]
 8004f9c:	e000      	b.n	8004fa0 <RxCallback+0x230>
                    continue;
 8004f9e:	bf00      	nop
    for (uint8_t const *d = data; d < data + size; ++d)
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	617b      	str	r3, [r7, #20]
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	4413      	add	r3, r2
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	f4ff aee6 	bcc.w	8004d80 <RxCallback+0x10>
        }
    }
}
 8004fb4:	bf00      	nop
 8004fb6:	bf00      	nop
 8004fb8:	371c      	adds	r7, #28
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd90      	pop	{r4, r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	240030d0 	.word	0x240030d0
 8004fc4:	240030d4 	.word	0x240030d4
 8004fc8:	240030d8 	.word	0x240030d8
 8004fcc:	240030a4 	.word	0x240030a4
 8004fd0:	240030c4 	.word	0x240030c4
 8004fd4:	0802bd8c 	.word	0x0802bd8c
 8004fd8:	0802c7f4 	.word	0x0802c7f4
 8004fdc:	0802bdb4 	.word	0x0802bdb4

08004fe0 <SCI_DataLink_CheckRxFrame>:

status_t SCI_DataLink_CheckRxFrame(sci_frame_t * frame)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
    assert(frame != 0);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d106      	bne.n	8004ffc <SCI_DataLink_CheckRxFrame+0x1c>
 8004fee:	4b22      	ldr	r3, [pc, #136]	@ (8005078 <SCI_DataLink_CheckRxFrame+0x98>)
 8004ff0:	4a22      	ldr	r2, [pc, #136]	@ (800507c <SCI_DataLink_CheckRxFrame+0x9c>)
 8004ff2:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8004ff6:	4822      	ldr	r0, [pc, #136]	@ (8005080 <SCI_DataLink_CheckRxFrame+0xa0>)
 8004ff8:	f002 f9e2 	bl	80073c0 <__assert_func>
    assert(frame->Buffer <= frame->RdPtr);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	429a      	cmp	r2, r3
 8005006:	d906      	bls.n	8005016 <SCI_DataLink_CheckRxFrame+0x36>
 8005008:	4b1e      	ldr	r3, [pc, #120]	@ (8005084 <SCI_DataLink_CheckRxFrame+0xa4>)
 800500a:	4a1c      	ldr	r2, [pc, #112]	@ (800507c <SCI_DataLink_CheckRxFrame+0x9c>)
 800500c:	f240 115d 	movw	r1, #349	@ 0x15d
 8005010:	481b      	ldr	r0, [pc, #108]	@ (8005080 <SCI_DataLink_CheckRxFrame+0xa0>)
 8005012:	f002 f9d5 	bl	80073c0 <__assert_func>
    assert(frame->RdPtr <= frame->WrPtr);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	429a      	cmp	r2, r3
 8005020:	d906      	bls.n	8005030 <SCI_DataLink_CheckRxFrame+0x50>
 8005022:	4b19      	ldr	r3, [pc, #100]	@ (8005088 <SCI_DataLink_CheckRxFrame+0xa8>)
 8005024:	4a15      	ldr	r2, [pc, #84]	@ (800507c <SCI_DataLink_CheckRxFrame+0x9c>)
 8005026:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 800502a:	4815      	ldr	r0, [pc, #84]	@ (8005080 <SCI_DataLink_CheckRxFrame+0xa0>)
 800502c:	f002 f9c8 	bl	80073c0 <__assert_func>
    assert(frame->WrPtr <= frame->Buffer + SCI_FRAME_SIZE);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	3340      	adds	r3, #64	@ 0x40
 800503a:	429a      	cmp	r2, r3
 800503c:	d906      	bls.n	800504c <SCI_DataLink_CheckRxFrame+0x6c>
 800503e:	4b13      	ldr	r3, [pc, #76]	@ (800508c <SCI_DataLink_CheckRxFrame+0xac>)
 8005040:	4a0e      	ldr	r2, [pc, #56]	@ (800507c <SCI_DataLink_CheckRxFrame+0x9c>)
 8005042:	f240 115f 	movw	r1, #351	@ 0x15f
 8005046:	480e      	ldr	r0, [pc, #56]	@ (8005080 <SCI_DataLink_CheckRxFrame+0xa0>)
 8005048:	f002 f9ba 	bl	80073c0 <__assert_func>

    const uint32_t CRC_r = SCI_DataLink_GetCRC(frame);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 fb09 	bl	8005664 <SCI_DataLink_GetCRC>
 8005052:	4603      	mov	r3, r0
 8005054:	60fb      	str	r3, [r7, #12]
    const uint32_t CRC_c = SCI_DataLink_CalcCRC(frame);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 fb38 	bl	80056cc <SCI_DataLink_CalcCRC>
 800505c:	4603      	mov	r3, r0
 800505e:	60bb      	str	r3, [r7, #8]

    if (CRC_c != CRC_r)
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	429a      	cmp	r2, r3
 8005066:	d002      	beq.n	800506e <SCI_DataLink_CheckRxFrame+0x8e>
    {
//      error_log("received command %02x, CRC failed! %08x != %08x",
//                frame->Buffer[0], CRC_r, CRC_c);
        return ERROR_SCI_CRC_FAILED;
 8005068:	f06f 03d6 	mvn.w	r3, #214	@ 0xd6
 800506c:	e000      	b.n	8005070 <SCI_DataLink_CheckRxFrame+0x90>
    }

    return STATUS_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	0802bde0 	.word	0x0802bde0
 800507c:	0802c800 	.word	0x0802c800
 8005080:	0802bdb4 	.word	0x0802bdb4
 8005084:	0802bdec 	.word	0x0802bdec
 8005088:	0802be0c 	.word	0x0802be0c
 800508c:	0802be2c 	.word	0x0802be2c

08005090 <SCI_DataLink_ReleaseFrame>:

/* Releases only the current frame and but not the next frames. */
static inline void SCI_DataLink_ReleaseFrame(sci_frame_t * frame)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
    assert(frame != 0);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d106      	bne.n	80050ac <SCI_DataLink_ReleaseFrame+0x1c>
 800509e:	4b20      	ldr	r3, [pc, #128]	@ (8005120 <SCI_DataLink_ReleaseFrame+0x90>)
 80050a0:	4a20      	ldr	r2, [pc, #128]	@ (8005124 <SCI_DataLink_ReleaseFrame+0x94>)
 80050a2:	f240 1171 	movw	r1, #369	@ 0x171
 80050a6:	4820      	ldr	r0, [pc, #128]	@ (8005128 <SCI_DataLink_ReleaseFrame+0x98>)
 80050a8:	f002 f98a 	bl	80073c0 <__assert_func>

    IRQ_LOCK();
 80050ac:	f001 fa1c 	bl	80064e8 <IRQ_LOCK>
    if (frame->WrPtr != 0)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d02d      	beq.n	8005114 <SCI_DataLink_ReleaseFrame+0x84>
    {
        frame->WrPtr = 0;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]
        frame->RdPtr = 0;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	605a      	str	r2, [r3, #4]
        frame->Next = 0;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	60da      	str	r2, [r3, #12]
        if (frame < SCI_FrameBuffer + SCI_FRAME_BUF_RX_CT)
 80050ca:	4a18      	ldr	r2, [pc, #96]	@ (800512c <SCI_DataLink_ReleaseFrame+0x9c>)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d210      	bcs.n	80050f4 <SCI_DataLink_ReleaseFrame+0x64>
        {
            assert(SCI_RxFrameQueue.Load);
 80050d2:	4b17      	ldr	r3, [pc, #92]	@ (8005130 <SCI_DataLink_ReleaseFrame+0xa0>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d106      	bne.n	80050e8 <SCI_DataLink_ReleaseFrame+0x58>
 80050da:	4b16      	ldr	r3, [pc, #88]	@ (8005134 <SCI_DataLink_ReleaseFrame+0xa4>)
 80050dc:	4a11      	ldr	r2, [pc, #68]	@ (8005124 <SCI_DataLink_ReleaseFrame+0x94>)
 80050de:	f240 117b 	movw	r1, #379	@ 0x17b
 80050e2:	4811      	ldr	r0, [pc, #68]	@ (8005128 <SCI_DataLink_ReleaseFrame+0x98>)
 80050e4:	f002 f96c 	bl	80073c0 <__assert_func>
            SCI_RxFrameQueue.Load--;
 80050e8:	4b11      	ldr	r3, [pc, #68]	@ (8005130 <SCI_DataLink_ReleaseFrame+0xa0>)
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	4a10      	ldr	r2, [pc, #64]	@ (8005130 <SCI_DataLink_ReleaseFrame+0xa0>)
 80050f0:	6093      	str	r3, [r2, #8]
 80050f2:	e00f      	b.n	8005114 <SCI_DataLink_ReleaseFrame+0x84>
        }
        else
        {
            assert(SCI_TxFrameQueue.Load);
 80050f4:	4b10      	ldr	r3, [pc, #64]	@ (8005138 <SCI_DataLink_ReleaseFrame+0xa8>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d106      	bne.n	800510a <SCI_DataLink_ReleaseFrame+0x7a>
 80050fc:	4b0f      	ldr	r3, [pc, #60]	@ (800513c <SCI_DataLink_ReleaseFrame+0xac>)
 80050fe:	4a09      	ldr	r2, [pc, #36]	@ (8005124 <SCI_DataLink_ReleaseFrame+0x94>)
 8005100:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8005104:	4808      	ldr	r0, [pc, #32]	@ (8005128 <SCI_DataLink_ReleaseFrame+0x98>)
 8005106:	f002 f95b 	bl	80073c0 <__assert_func>
            SCI_TxFrameQueue.Load--;
 800510a:	4b0b      	ldr	r3, [pc, #44]	@ (8005138 <SCI_DataLink_ReleaseFrame+0xa8>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	3b01      	subs	r3, #1
 8005110:	4a09      	ldr	r2, [pc, #36]	@ (8005138 <SCI_DataLink_ReleaseFrame+0xa8>)
 8005112:	6093      	str	r3, [r2, #8]
        }
    }
    IRQ_UNLOCK();
 8005114:	f001 f9c6 	bl	80064a4 <IRQ_UNLOCK>
}
 8005118:	bf00      	nop
 800511a:	3708      	adds	r7, #8
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	0802bde0 	.word	0x0802bde0
 8005124:	0802c81c 	.word	0x0802c81c
 8005128:	0802bdb4 	.word	0x0802bdb4
 800512c:	24002ea4 	.word	0x24002ea4
 8005130:	240030a4 	.word	0x240030a4
 8005134:	0802be5c 	.word	0x0802be5c
 8005138:	240030b4 	.word	0x240030b4
 800513c:	0802be74 	.word	0x0802be74

08005140 <SCI_DataLink_ReleaseFrames>:

void SCI_DataLink_ReleaseFrames(sci_frame_t * frame)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
    sci_frame_t * fnext;
    while (frame != 0)
 8005148:	e007      	b.n	800515a <SCI_DataLink_ReleaseFrames+0x1a>
    {
        fnext = frame->Next;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	60fb      	str	r3, [r7, #12]
        SCI_DataLink_ReleaseFrame(frame);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f7ff ff9d 	bl	8005090 <SCI_DataLink_ReleaseFrame>
        frame = fnext;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	607b      	str	r3, [r7, #4]
    while (frame != 0)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1f4      	bne.n	800514a <SCI_DataLink_ReleaseFrames+0xa>
    }
}
 8005160:	bf00      	nop
 8005162:	bf00      	nop
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <SCI_DataLink_ResetRxFrames>:

void SCI_DataLink_ResetRxFrames(sci_frame_t * frame)
{
 800516a:	b480      	push	{r7}
 800516c:	b083      	sub	sp, #12
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
    while (frame != 0)
 8005172:	e006      	b.n	8005182 <SCI_DataLink_ResetRxFrames+0x18>
    {
        frame->RdPtr = frame->Buffer;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	605a      	str	r2, [r3, #4]
        frame = frame->Next;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	607b      	str	r3, [r7, #4]
    while (frame != 0)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1f5      	bne.n	8005174 <SCI_DataLink_ResetRxFrames+0xa>
    }
}
 8005188:	bf00      	nop
 800518a:	bf00      	nop
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <SCI_DataLink_RequestFrame>:

static sci_frame_t * SCI_DataLink_RequestFrame(sci_frame_queue_t * queue)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b084      	sub	sp, #16
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
    sci_frame_t * frame = 0;
 800519e:	2300      	movs	r3, #0
 80051a0:	60fb      	str	r3, [r7, #12]

    IRQ_LOCK();
 80051a2:	f001 f9a1 	bl	80064e8 <IRQ_LOCK>
    if (!(queue->Load < queue->Size))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	689a      	ldr	r2, [r3, #8]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d303      	bcc.n	80051ba <SCI_DataLink_RequestFrame+0x24>
    {
        IRQ_UNLOCK();
 80051b2:	f001 f977 	bl	80064a4 <IRQ_UNLOCK>
        return 0; // no free buffers!!
 80051b6:	2300      	movs	r3, #0
 80051b8:	e02b      	b.n	8005212 <SCI_DataLink_RequestFrame+0x7c>
    }
    queue->Load++;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	609a      	str	r2, [r3, #8]

    /* scan for free buffer. */
    do
    {
        frame = queue->Head++;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f103 0110 	add.w	r1, r3, #16
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	6051      	str	r1, [r2, #4]
 80051d0:	60fb      	str	r3, [r7, #12]
        if (queue->Head == queue->Buff + queue->Size)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6819      	ldr	r1, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	440b      	add	r3, r1
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d103      	bne.n	80051ee <SCI_DataLink_RequestFrame+0x58>
        {
            queue->Head = queue->Buff;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	605a      	str	r2, [r3, #4]
        }
    } while (frame->WrPtr != 0);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1e6      	bne.n	80051c4 <SCI_DataLink_RequestFrame+0x2e>

    /* setup buffer */
    frame->Next = 0;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	60da      	str	r2, [r3, #12]
    frame->RdPtr = frame->Buffer; //0;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	605a      	str	r2, [r3, #4]
    frame->WrPtr = frame->Buffer;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	601a      	str	r2, [r3, #0]

    IRQ_UNLOCK();
 800520c:	f001 f94a 	bl	80064a4 <IRQ_UNLOCK>
    return frame;
 8005210:	68fb      	ldr	r3, [r7, #12]
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
	...

0800521c <SCI_DataLink_RequestTxFrame>:

sci_frame_t * SCI_DataLink_RequestTxFrame(bool queueStartByte)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af00      	add	r7, sp, #0
 8005222:	4603      	mov	r3, r0
 8005224:	71fb      	strb	r3, [r7, #7]
    sci_frame_t * frame = 0;
 8005226:	2300      	movs	r3, #0
 8005228:	617b      	str	r3, [r7, #20]
    ltc_t start = { 0 };
 800522a:	f107 030c 	add.w	r3, r7, #12
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	605a      	str	r2, [r3, #4]
    Time_GetNow(&start);
 8005234:	f107 030c 	add.w	r3, r7, #12
 8005238:	4618      	mov	r0, r3
 800523a:	f00d fadb 	bl	80127f4 <Time_GetNow>

    while ((frame = SCI_DataLink_RequestFrame(&SCI_TxFrameQueue)) == 0)
 800523e:	e019      	b.n	8005274 <SCI_DataLink_RequestTxFrame+0x58>
            /* USB send timeout occurred! */
            RaiseError(ERROR_USB_TIMEOUT);
            continue;
        }
#endif
        if (SCI_CurrentTxFrame == 0)
 8005240:	4b16      	ldr	r3, [pc, #88]	@ (800529c <SCI_DataLink_RequestTxFrame+0x80>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d105      	bne.n	8005254 <SCI_DataLink_RequestTxFrame+0x38>
        {
//          BREAKPOINT();
            /* No buffers available and not sending!!! */
            RaiseError(ERROR_SCI_TX_BUFFER_EXCEEDANCE);
 8005248:	f06f 00de 	mvn.w	r0, #222	@ 0xde
 800524c:	f7ff fd7e 	bl	8004d4c <RaiseError>
            return 0;
 8005250:	2300      	movs	r3, #0
 8005252:	e01e      	b.n	8005292 <SCI_DataLink_RequestTxFrame+0x76>
        }

        if (Time_CheckTimeoutMSec(&start, SCI_TX_TIMEOUT_MSEC))
 8005254:	f107 030c 	add.w	r3, r7, #12
 8005258:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800525c:	4618      	mov	r0, r3
 800525e:	f00d fb0d 	bl	801287c <Time_CheckTimeoutMSec>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d005      	beq.n	8005274 <SCI_DataLink_RequestTxFrame+0x58>
        {
//          BREAKPOINT();
            /* Timeout: sending but no buffers available within given time!!! */
            RaiseError(ERROR_SCI_BUFFER_FULL);
 8005268:	f06f 00d7 	mvn.w	r0, #215	@ 0xd7
 800526c:	f7ff fd6e 	bl	8004d4c <RaiseError>
            return 0;
 8005270:	2300      	movs	r3, #0
 8005272:	e00e      	b.n	8005292 <SCI_DataLink_RequestTxFrame+0x76>
    while ((frame = SCI_DataLink_RequestFrame(&SCI_TxFrameQueue)) == 0)
 8005274:	480a      	ldr	r0, [pc, #40]	@ (80052a0 <SCI_DataLink_RequestTxFrame+0x84>)
 8005276:	f7ff ff8e 	bl	8005196 <SCI_DataLink_RequestFrame>
 800527a:	6178      	str	r0, [r7, #20]
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d0de      	beq.n	8005240 <SCI_DataLink_RequestTxFrame+0x24>
        }
    }

    if (queueStartByte)
 8005282:	79fb      	ldrb	r3, [r7, #7]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d003      	beq.n	8005290 <SCI_DataLink_RequestTxFrame+0x74>
    {
        /* add start byte */
        SCI_Frame_SetByte(frame, SCI_START_BYTE);
 8005288:	2102      	movs	r1, #2
 800528a:	6978      	ldr	r0, [r7, #20]
 800528c:	f000 fbc4 	bl	8005a18 <SCI_Frame_SetByte>
    }

    return frame;
 8005290:	697b      	ldr	r3, [r7, #20]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3718      	adds	r7, #24
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	240030cc 	.word	0x240030cc
 80052a0:	240030b4 	.word	0x240030b4

080052a4 <TxCallback>:

static void TxCallback(status_t status, sci_frame_t * frame)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
    assert(frame != 0);
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d106      	bne.n	80052c2 <TxCallback+0x1e>
 80052b4:	4b2a      	ldr	r3, [pc, #168]	@ (8005360 <TxCallback+0xbc>)
 80052b6:	4a2b      	ldr	r2, [pc, #172]	@ (8005364 <TxCallback+0xc0>)
 80052b8:	f44f 71f3 	mov.w	r1, #486	@ 0x1e6
 80052bc:	482a      	ldr	r0, [pc, #168]	@ (8005368 <TxCallback+0xc4>)
 80052be:	f002 f87f 	bl	80073c0 <__assert_func>
    assert(frame->WrPtr != 0);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d106      	bne.n	80052d8 <TxCallback+0x34>
 80052ca:	4b28      	ldr	r3, [pc, #160]	@ (800536c <TxCallback+0xc8>)
 80052cc:	4a25      	ldr	r2, [pc, #148]	@ (8005364 <TxCallback+0xc0>)
 80052ce:	f240 11e7 	movw	r1, #487	@ 0x1e7
 80052d2:	4825      	ldr	r0, [pc, #148]	@ (8005368 <TxCallback+0xc4>)
 80052d4:	f002 f874 	bl	80073c0 <__assert_func>
    assert(SCI_CurrentTxFrame == frame);
 80052d8:	4b25      	ldr	r3, [pc, #148]	@ (8005370 <TxCallback+0xcc>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d006      	beq.n	80052f0 <TxCallback+0x4c>
 80052e2:	4b24      	ldr	r3, [pc, #144]	@ (8005374 <TxCallback+0xd0>)
 80052e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005364 <TxCallback+0xc0>)
 80052e6:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 80052ea:	481f      	ldr	r0, [pc, #124]	@ (8005368 <TxCallback+0xc4>)
 80052ec:	f002 f868 	bl	80073c0 <__assert_func>
    /* Release the frame at the beginning of the queue.
     * If an error has occurred, also remove the subsequent
     * frames that belong to the current message. */
    do
    {
        sci_frame_t * next_frame = frame->Next;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	60fb      	str	r3, [r7, #12]
        SCI_DataLink_ReleaseFrame(frame);
 80052f6:	6838      	ldr	r0, [r7, #0]
 80052f8:	f7ff feca 	bl	8005090 <SCI_DataLink_ReleaseFrame>
        frame = next_frame;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	603b      	str	r3, [r7, #0]
    }
    while ((status < STATUS_OK) &&
           (frame != 0) &&
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	da08      	bge.n	8005318 <TxCallback+0x74>
    while ((status < STATUS_OK) &&
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d005      	beq.n	8005318 <TxCallback+0x74>
           (!SCI_Frame_IsStartFrame(frame)));
 800530c:	6838      	ldr	r0, [r7, #0]
 800530e:	f000 fb63 	bl	80059d8 <SCI_Frame_IsStartFrame>
 8005312:	4603      	mov	r3, r0
           (frame != 0) &&
 8005314:	2b00      	cmp	r3, #0
 8005316:	d0eb      	beq.n	80052f0 <TxCallback+0x4c>

    /* Check for errors and invoke the error callback. */
    if (status < STATUS_OK && status != ERROR_ABORTED)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	da06      	bge.n	800532c <TxCallback+0x88>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f113 0f02 	cmn.w	r3, #2
 8005324:	d002      	beq.n	800532c <TxCallback+0x88>
    {
        RaiseError(status);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7ff fd10 	bl	8004d4c <RaiseError>
    }

    SCI_CurrentTxFrame = frame;
 800532c:	4a10      	ldr	r2, [pc, #64]	@ (8005370 <TxCallback+0xcc>)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	6013      	str	r3, [r2, #0]

    /* Send the next frame in the queue. */
    if (frame != 0)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00f      	beq.n	8005358 <TxCallback+0xb4>
    {
        status = SCI_DataLink_SendFrame(frame);
 8005338:	6838      	ldr	r0, [r7, #0]
 800533a:	f000 f81d 	bl	8005378 <SCI_DataLink_SendFrame>
 800533e:	6078      	str	r0, [r7, #4]
        if (status < STATUS_OK)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	da08      	bge.n	8005358 <TxCallback+0xb4>
        {
            SCI_CurrentTxFrame = 0;
 8005346:	4b0a      	ldr	r3, [pc, #40]	@ (8005370 <TxCallback+0xcc>)
 8005348:	2200      	movs	r2, #0
 800534a:	601a      	str	r2, [r3, #0]
            SCI_DataLink_ReleaseFrames(frame);
 800534c:	6838      	ldr	r0, [r7, #0]
 800534e:	f7ff fef7 	bl	8005140 <SCI_DataLink_ReleaseFrames>
            RaiseError(status);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7ff fcfa 	bl	8004d4c <RaiseError>
        }
    }
}
 8005358:	bf00      	nop
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	0802bde0 	.word	0x0802bde0
 8005364:	0802c838 	.word	0x0802c838
 8005368:	0802bdb4 	.word	0x0802bdb4
 800536c:	0802be8c 	.word	0x0802be8c
 8005370:	240030cc 	.word	0x240030cc
 8005374:	0802bea0 	.word	0x0802bea0

08005378 <SCI_DataLink_SendFrame>:

static inline status_t SCI_DataLink_SendFrame(sci_frame_t * frame)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
    assert(frame != 0);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d106      	bne.n	8005394 <SCI_DataLink_SendFrame+0x1c>
 8005386:	4b20      	ldr	r3, [pc, #128]	@ (8005408 <SCI_DataLink_SendFrame+0x90>)
 8005388:	4a20      	ldr	r2, [pc, #128]	@ (800540c <SCI_DataLink_SendFrame+0x94>)
 800538a:	f240 210e 	movw	r1, #526	@ 0x20e
 800538e:	4820      	ldr	r0, [pc, #128]	@ (8005410 <SCI_DataLink_SendFrame+0x98>)
 8005390:	f002 f816 	bl	80073c0 <__assert_func>
    assert(frame->Buffer == frame->RdPtr);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	429a      	cmp	r2, r3
 800539e:	d006      	beq.n	80053ae <SCI_DataLink_SendFrame+0x36>
 80053a0:	4b1c      	ldr	r3, [pc, #112]	@ (8005414 <SCI_DataLink_SendFrame+0x9c>)
 80053a2:	4a1a      	ldr	r2, [pc, #104]	@ (800540c <SCI_DataLink_SendFrame+0x94>)
 80053a4:	f240 210f 	movw	r1, #527	@ 0x20f
 80053a8:	4819      	ldr	r0, [pc, #100]	@ (8005410 <SCI_DataLink_SendFrame+0x98>)
 80053aa:	f002 f809 	bl	80073c0 <__assert_func>
    assert(frame->RdPtr <= frame->WrPtr);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d906      	bls.n	80053c8 <SCI_DataLink_SendFrame+0x50>
 80053ba:	4b17      	ldr	r3, [pc, #92]	@ (8005418 <SCI_DataLink_SendFrame+0xa0>)
 80053bc:	4a13      	ldr	r2, [pc, #76]	@ (800540c <SCI_DataLink_SendFrame+0x94>)
 80053be:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80053c2:	4813      	ldr	r0, [pc, #76]	@ (8005410 <SCI_DataLink_SendFrame+0x98>)
 80053c4:	f001 fffc 	bl	80073c0 <__assert_func>
    assert(frame->WrPtr <= frame->Buffer + SCI_FRAME_SIZE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	3340      	adds	r3, #64	@ 0x40
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d906      	bls.n	80053e4 <SCI_DataLink_SendFrame+0x6c>
 80053d6:	4b11      	ldr	r3, [pc, #68]	@ (800541c <SCI_DataLink_SendFrame+0xa4>)
 80053d8:	4a0c      	ldr	r2, [pc, #48]	@ (800540c <SCI_DataLink_SendFrame+0x94>)
 80053da:	f240 2111 	movw	r1, #529	@ 0x211
 80053de:	480c      	ldr	r0, [pc, #48]	@ (8005410 <SCI_DataLink_SendFrame+0x98>)
 80053e0:	f001 ffee 	bl	80073c0 <__assert_func>
    return USB_SendBuffer(frame->Buffer,
                          (size_t) (frame->WrPtr - frame->Buffer),
                          (usb_tx_callback_t) TxCallback,
                          frame);
#else
    return UART_SendBuffer(frame->Buffer,
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6898      	ldr	r0, [r3, #8]
                           (size_t) (frame->WrPtr - frame->Buffer),
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	1ad3      	subs	r3, r2, r3
    return UART_SendBuffer(frame->Buffer,
 80053f2:	4619      	mov	r1, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a0a      	ldr	r2, [pc, #40]	@ (8005420 <SCI_DataLink_SendFrame+0xa8>)
 80053f8:	f001 fdbc 	bl	8006f74 <UART_SendBuffer>
 80053fc:	4603      	mov	r3, r0
                           (uart_tx_callback_t) TxCallback,
                           frame);
#endif
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	0802bde0 	.word	0x0802bde0
 800540c:	0802c844 	.word	0x0802c844
 8005410:	0802bdb4 	.word	0x0802bdb4
 8005414:	0802bebc 	.word	0x0802bebc
 8005418:	0802be0c 	.word	0x0802be0c
 800541c:	0802be2c 	.word	0x0802be2c
 8005420:	080052a5 	.word	0x080052a5

08005424 <SCI_DataLink_IsTxBusy>:

bool SCI_DataLink_IsTxBusy(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
#if AFBR_SCI_USB
    return (SCI_CurrentTxFrame != 0) || USB_IsTxBusy();
#else
    return (SCI_CurrentTxFrame != 0) || UART_IsTxBusy();
 8005428:	4b08      	ldr	r3, [pc, #32]	@ (800544c <SCI_DataLink_IsTxBusy+0x28>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d104      	bne.n	800543a <SCI_DataLink_IsTxBusy+0x16>
 8005430:	f001 fd94 	bl	8006f5c <UART_IsTxBusy>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <SCI_DataLink_IsTxBusy+0x1a>
 800543a:	2301      	movs	r3, #1
 800543c:	e000      	b.n	8005440 <SCI_DataLink_IsTxBusy+0x1c>
 800543e:	2300      	movs	r3, #0
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	b2db      	uxtb	r3, r3
#endif
}
 8005446:	4618      	mov	r0, r3
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	240030cc 	.word	0x240030cc

08005450 <SCI_DataLink_SendTxFrame>:

status_t SCI_DataLink_SendTxFrame(sci_frame_t * frame, bool high_priority)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	460b      	mov	r3, r1
 800545a:	70fb      	strb	r3, [r7, #3]
    assert(frame != 0);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d106      	bne.n	8005470 <SCI_DataLink_SendTxFrame+0x20>
 8005462:	4b75      	ldr	r3, [pc, #468]	@ (8005638 <SCI_DataLink_SendTxFrame+0x1e8>)
 8005464:	4a75      	ldr	r2, [pc, #468]	@ (800563c <SCI_DataLink_SendTxFrame+0x1ec>)
 8005466:	f240 212a 	movw	r1, #554	@ 0x22a
 800546a:	4875      	ldr	r0, [pc, #468]	@ (8005640 <SCI_DataLink_SendTxFrame+0x1f0>)
 800546c:	f001 ffa8 	bl	80073c0 <__assert_func>
    assert(frame->Buffer == frame->RdPtr);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	429a      	cmp	r2, r3
 800547a:	d006      	beq.n	800548a <SCI_DataLink_SendTxFrame+0x3a>
 800547c:	4b71      	ldr	r3, [pc, #452]	@ (8005644 <SCI_DataLink_SendTxFrame+0x1f4>)
 800547e:	4a6f      	ldr	r2, [pc, #444]	@ (800563c <SCI_DataLink_SendTxFrame+0x1ec>)
 8005480:	f240 212b 	movw	r1, #555	@ 0x22b
 8005484:	486e      	ldr	r0, [pc, #440]	@ (8005640 <SCI_DataLink_SendTxFrame+0x1f0>)
 8005486:	f001 ff9b 	bl	80073c0 <__assert_func>
    assert(frame->RdPtr < frame->WrPtr);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	429a      	cmp	r2, r3
 8005494:	d306      	bcc.n	80054a4 <SCI_DataLink_SendTxFrame+0x54>
 8005496:	4b6c      	ldr	r3, [pc, #432]	@ (8005648 <SCI_DataLink_SendTxFrame+0x1f8>)
 8005498:	4a68      	ldr	r2, [pc, #416]	@ (800563c <SCI_DataLink_SendTxFrame+0x1ec>)
 800549a:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 800549e:	4868      	ldr	r0, [pc, #416]	@ (8005640 <SCI_DataLink_SendTxFrame+0x1f0>)
 80054a0:	f001 ff8e 	bl	80073c0 <__assert_func>
    assert(frame->WrPtr <= frame->Buffer + SCI_FRAME_SIZE);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	3340      	adds	r3, #64	@ 0x40
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d906      	bls.n	80054c0 <SCI_DataLink_SendTxFrame+0x70>
 80054b2:	4b66      	ldr	r3, [pc, #408]	@ (800564c <SCI_DataLink_SendTxFrame+0x1fc>)
 80054b4:	4a61      	ldr	r2, [pc, #388]	@ (800563c <SCI_DataLink_SendTxFrame+0x1ec>)
 80054b6:	f240 212d 	movw	r1, #557	@ 0x22d
 80054ba:	4861      	ldr	r0, [pc, #388]	@ (8005640 <SCI_DataLink_SendTxFrame+0x1f0>)
 80054bc:	f001 ff80 	bl	80073c0 <__assert_func>

    status_t status = STATUS_OK;
 80054c0:	2300      	movs	r3, #0
 80054c2:	617b      	str	r3, [r7, #20]

    /* queue CRC and stop byte */
    SCI_Frame_QueueCRC(frame);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f979 	bl	80057bc <SCI_Frame_QueueCRC>
    SCI_Frame_SetByte(frame, SCI_STOP_BYTE);
 80054ca:	2103      	movs	r1, #3
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 faa3 	bl	8005a18 <SCI_Frame_SetByte>

    /* Lock interrupts such that the current TX frame
     * does not finish while the new one is enqueued. */
    IRQ_LOCK();
 80054d2:	f001 f809 	bl	80064e8 <IRQ_LOCK>
    if (SCI_CurrentTxFrame != 0)
 80054d6:	4b5e      	ldr	r3, [pc, #376]	@ (8005650 <SCI_DataLink_SendTxFrame+0x200>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f000 8090 	beq.w	8005600 <SCI_DataLink_SendTxFrame+0x1b0>
    {
        sci_frame_t * last_frame = (sci_frame_t*) SCI_CurrentTxFrame;
 80054e0:	4b5b      	ldr	r3, [pc, #364]	@ (8005650 <SCI_DataLink_SendTxFrame+0x200>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	613b      	str	r3, [r7, #16]

        if (high_priority)
 80054e6:	78fb      	ldrb	r3, [r7, #3]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d04d      	beq.n	8005588 <SCI_DataLink_SendTxFrame+0x138>
        {
            /* find end of current frame */
            while ((last_frame->Next != 0) && !SCI_Frame_IsStartFrame(last_frame->Next))
 80054ec:	e002      	b.n	80054f4 <SCI_DataLink_SendTxFrame+0xa4>
            //while ((*(last_frame->WrPtr - 1) != SCI_STOP_BYTE) && (last_frame->Next != 0))
            {
                last_frame = last_frame->Next;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	613b      	str	r3, [r7, #16]
            while ((last_frame->Next != 0) && !SCI_Frame_IsStartFrame(last_frame->Next))
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d007      	beq.n	800550c <SCI_DataLink_SendTxFrame+0xbc>
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	4618      	mov	r0, r3
 8005502:	f000 fa69 	bl	80059d8 <SCI_Frame_IsStartFrame>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d0f0      	beq.n	80054ee <SCI_DataLink_SendTxFrame+0x9e>
            }

            assert(last_frame != 0);
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d106      	bne.n	8005520 <SCI_DataLink_SendTxFrame+0xd0>
 8005512:	4b50      	ldr	r3, [pc, #320]	@ (8005654 <SCI_DataLink_SendTxFrame+0x204>)
 8005514:	4a49      	ldr	r2, [pc, #292]	@ (800563c <SCI_DataLink_SendTxFrame+0x1ec>)
 8005516:	f240 2145 	movw	r1, #581	@ 0x245
 800551a:	4849      	ldr	r0, [pc, #292]	@ (8005640 <SCI_DataLink_SendTxFrame+0x1f0>)
 800551c:	f001 ff50 	bl	80073c0 <__assert_func>
            assert(last_frame->Buffer == last_frame->RdPtr);
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	689a      	ldr	r2, [r3, #8]
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	429a      	cmp	r2, r3
 800552a:	d006      	beq.n	800553a <SCI_DataLink_SendTxFrame+0xea>
 800552c:	4b4a      	ldr	r3, [pc, #296]	@ (8005658 <SCI_DataLink_SendTxFrame+0x208>)
 800552e:	4a43      	ldr	r2, [pc, #268]	@ (800563c <SCI_DataLink_SendTxFrame+0x1ec>)
 8005530:	f240 2146 	movw	r1, #582	@ 0x246
 8005534:	4842      	ldr	r0, [pc, #264]	@ (8005640 <SCI_DataLink_SendTxFrame+0x1f0>)
 8005536:	f001 ff43 	bl	80073c0 <__assert_func>
            assert(last_frame->RdPtr < last_frame->WrPtr);
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	429a      	cmp	r2, r3
 8005544:	d306      	bcc.n	8005554 <SCI_DataLink_SendTxFrame+0x104>
 8005546:	4b45      	ldr	r3, [pc, #276]	@ (800565c <SCI_DataLink_SendTxFrame+0x20c>)
 8005548:	4a3c      	ldr	r2, [pc, #240]	@ (800563c <SCI_DataLink_SendTxFrame+0x1ec>)
 800554a:	f240 2147 	movw	r1, #583	@ 0x247
 800554e:	483c      	ldr	r0, [pc, #240]	@ (8005640 <SCI_DataLink_SendTxFrame+0x1f0>)
 8005550:	f001 ff36 	bl	80073c0 <__assert_func>
            assert(last_frame->WrPtr <= last_frame->Buffer + SCI_FRAME_SIZE);
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	3340      	adds	r3, #64	@ 0x40
 800555e:	429a      	cmp	r2, r3
 8005560:	d906      	bls.n	8005570 <SCI_DataLink_SendTxFrame+0x120>
 8005562:	4b3f      	ldr	r3, [pc, #252]	@ (8005660 <SCI_DataLink_SendTxFrame+0x210>)
 8005564:	4a35      	ldr	r2, [pc, #212]	@ (800563c <SCI_DataLink_SendTxFrame+0x1ec>)
 8005566:	f44f 7112 	mov.w	r1, #584	@ 0x248
 800556a:	4835      	ldr	r0, [pc, #212]	@ (8005640 <SCI_DataLink_SendTxFrame+0x1f0>)
 800556c:	f001 ff28 	bl	80073c0 <__assert_func>

            sci_frame_t * next_frame = last_frame->Next;
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	60fb      	str	r3, [r7, #12]

            /* Enqueue frame to the end of the current frame. */
            last_frame->Next = frame;
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	60da      	str	r2, [r3, #12]

            /* set remaining frame to be queued. */
            frame = next_frame;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	607b      	str	r3, [r7, #4]
        }


        /* find end of queue . */
        while (last_frame->Next != 0)
 8005580:	e002      	b.n	8005588 <SCI_DataLink_SendTxFrame+0x138>
        {
            last_frame = last_frame->Next;
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	613b      	str	r3, [r7, #16]
        while (last_frame->Next != 0)
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1f8      	bne.n	8005582 <SCI_DataLink_SendTxFrame+0x132>
        }

        assert(last_frame != 0);
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d106      	bne.n	80055a4 <SCI_DataLink_SendTxFrame+0x154>
 8005596:	4b2f      	ldr	r3, [pc, #188]	@ (8005654 <SCI_DataLink_SendTxFrame+0x204>)
 8005598:	4a28      	ldr	r2, [pc, #160]	@ (800563c <SCI_DataLink_SendTxFrame+0x1ec>)
 800559a:	f240 215a 	movw	r1, #602	@ 0x25a
 800559e:	4828      	ldr	r0, [pc, #160]	@ (8005640 <SCI_DataLink_SendTxFrame+0x1f0>)
 80055a0:	f001 ff0e 	bl	80073c0 <__assert_func>
        assert(last_frame->Buffer == last_frame->RdPtr);
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d006      	beq.n	80055be <SCI_DataLink_SendTxFrame+0x16e>
 80055b0:	4b29      	ldr	r3, [pc, #164]	@ (8005658 <SCI_DataLink_SendTxFrame+0x208>)
 80055b2:	4a22      	ldr	r2, [pc, #136]	@ (800563c <SCI_DataLink_SendTxFrame+0x1ec>)
 80055b4:	f240 215b 	movw	r1, #603	@ 0x25b
 80055b8:	4821      	ldr	r0, [pc, #132]	@ (8005640 <SCI_DataLink_SendTxFrame+0x1f0>)
 80055ba:	f001 ff01 	bl	80073c0 <__assert_func>
        assert(last_frame->RdPtr < last_frame->WrPtr);
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d306      	bcc.n	80055d8 <SCI_DataLink_SendTxFrame+0x188>
 80055ca:	4b24      	ldr	r3, [pc, #144]	@ (800565c <SCI_DataLink_SendTxFrame+0x20c>)
 80055cc:	4a1b      	ldr	r2, [pc, #108]	@ (800563c <SCI_DataLink_SendTxFrame+0x1ec>)
 80055ce:	f44f 7117 	mov.w	r1, #604	@ 0x25c
 80055d2:	481b      	ldr	r0, [pc, #108]	@ (8005640 <SCI_DataLink_SendTxFrame+0x1f0>)
 80055d4:	f001 fef4 	bl	80073c0 <__assert_func>
        assert(last_frame->WrPtr <= last_frame->Buffer + SCI_FRAME_SIZE);
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	3340      	adds	r3, #64	@ 0x40
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d906      	bls.n	80055f4 <SCI_DataLink_SendTxFrame+0x1a4>
 80055e6:	4b1e      	ldr	r3, [pc, #120]	@ (8005660 <SCI_DataLink_SendTxFrame+0x210>)
 80055e8:	4a14      	ldr	r2, [pc, #80]	@ (800563c <SCI_DataLink_SendTxFrame+0x1ec>)
 80055ea:	f240 215d 	movw	r1, #605	@ 0x25d
 80055ee:	4814      	ldr	r0, [pc, #80]	@ (8005640 <SCI_DataLink_SendTxFrame+0x1f0>)
 80055f0:	f001 fee6 	bl	80073c0 <__assert_func>

        /* Enqueue frame to the queue. */
        last_frame->Next = frame;
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	60da      	str	r2, [r3, #12]

        IRQ_UNLOCK();
 80055fa:	f000 ff53 	bl	80064a4 <IRQ_UNLOCK>
 80055fe:	e015      	b.n	800562c <SCI_DataLink_SendTxFrame+0x1dc>
    }
    else
    {
        /* Send data if TX line is free. */
        SCI_CurrentTxFrame = frame;
 8005600:	4a13      	ldr	r2, [pc, #76]	@ (8005650 <SCI_DataLink_SendTxFrame+0x200>)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6013      	str	r3, [r2, #0]

        IRQ_UNLOCK();
 8005606:	f000 ff4d 	bl	80064a4 <IRQ_UNLOCK>

        status = SCI_DataLink_SendFrame(frame);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7ff feb4 	bl	8005378 <SCI_DataLink_SendFrame>
 8005610:	6178      	str	r0, [r7, #20]
        if (status < STATUS_OK)
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	2b00      	cmp	r3, #0
 8005616:	da09      	bge.n	800562c <SCI_DataLink_SendTxFrame+0x1dc>
        {
            SCI_CurrentTxFrame = 0;
 8005618:	4b0d      	ldr	r3, [pc, #52]	@ (8005650 <SCI_DataLink_SendTxFrame+0x200>)
 800561a:	2200      	movs	r2, #0
 800561c:	601a      	str	r2, [r3, #0]
            SCI_DataLink_ReleaseFrames(frame);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7ff fd8e 	bl	8005140 <SCI_DataLink_ReleaseFrames>
            BREAKPOINT();
 8005624:	be00      	bkpt	0x0000
            RaiseError(status);
 8005626:	6978      	ldr	r0, [r7, #20]
 8005628:	f7ff fb90 	bl	8004d4c <RaiseError>
        }
    }

    return status;
 800562c:	697b      	ldr	r3, [r7, #20]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3718      	adds	r7, #24
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	0802bde0 	.word	0x0802bde0
 800563c:	0802c85c 	.word	0x0802c85c
 8005640:	0802bdb4 	.word	0x0802bdb4
 8005644:	0802bebc 	.word	0x0802bebc
 8005648:	0802bedc 	.word	0x0802bedc
 800564c:	0802be2c 	.word	0x0802be2c
 8005650:	240030cc 	.word	0x240030cc
 8005654:	0802bef8 	.word	0x0802bef8
 8005658:	0802bf08 	.word	0x0802bf08
 800565c:	0802bf30 	.word	0x0802bf30
 8005660:	0802bf58 	.word	0x0802bf58

08005664 <SCI_DataLink_GetCRC>:

static uint8_t SCI_DataLink_GetCRC(sci_frame_t const * frame)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
    assert(frame != 0);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d106      	bne.n	8005680 <SCI_DataLink_GetCRC+0x1c>
 8005672:	4b13      	ldr	r3, [pc, #76]	@ (80056c0 <SCI_DataLink_GetCRC+0x5c>)
 8005674:	4a13      	ldr	r2, [pc, #76]	@ (80056c4 <SCI_DataLink_GetCRC+0x60>)
 8005676:	f240 217a 	movw	r1, #634	@ 0x27a
 800567a:	4813      	ldr	r0, [pc, #76]	@ (80056c8 <SCI_DataLink_GetCRC+0x64>)
 800567c:	f001 fea0 	bl	80073c0 <__assert_func>

    sci_frame_t const * frame2 = frame;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	60fb      	str	r3, [r7, #12]

    while (frame->Next != 0)
 8005684:	e004      	b.n	8005690 <SCI_DataLink_GetCRC+0x2c>
    {
        frame2 = frame;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	60fb      	str	r3, [r7, #12]
        frame = frame->Next;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	607b      	str	r3, [r7, #4]
    while (frame->Next != 0)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1f6      	bne.n	8005686 <SCI_DataLink_GetCRC+0x22>
    }

    if (frame->WrPtr > frame->Buffer)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d904      	bls.n	80056ae <SCI_DataLink_GetCRC+0x4a>
        return *(frame->WrPtr - 1);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80056ac:	e003      	b.n	80056b6 <SCI_DataLink_GetCRC+0x52>
    else
        return *(frame2->WrPtr - 1);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	0802bde0 	.word	0x0802bde0
 80056c4:	0802c878 	.word	0x0802c878
 80056c8:	0802bdb4 	.word	0x0802bdb4

080056cc <SCI_DataLink_CalcCRC>:

static uint8_t SCI_DataLink_CalcCRC(sci_frame_t const * frame)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
    assert(frame != 0);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d106      	bne.n	80056e8 <SCI_DataLink_CalcCRC+0x1c>
 80056da:	4b32      	ldr	r3, [pc, #200]	@ (80057a4 <SCI_DataLink_CalcCRC+0xd8>)
 80056dc:	4a32      	ldr	r2, [pc, #200]	@ (80057a8 <SCI_DataLink_CalcCRC+0xdc>)
 80056de:	f44f 7123 	mov.w	r1, #652	@ 0x28c
 80056e2:	4832      	ldr	r0, [pc, #200]	@ (80057ac <SCI_DataLink_CalcCRC+0xe0>)
 80056e4:	f001 fe6c 	bl	80073c0 <__assert_func>
    assert(frame->Buffer <= frame->RdPtr);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d906      	bls.n	8005702 <SCI_DataLink_CalcCRC+0x36>
 80056f4:	4b2e      	ldr	r3, [pc, #184]	@ (80057b0 <SCI_DataLink_CalcCRC+0xe4>)
 80056f6:	4a2c      	ldr	r2, [pc, #176]	@ (80057a8 <SCI_DataLink_CalcCRC+0xdc>)
 80056f8:	f240 218d 	movw	r1, #653	@ 0x28d
 80056fc:	482b      	ldr	r0, [pc, #172]	@ (80057ac <SCI_DataLink_CalcCRC+0xe0>)
 80056fe:	f001 fe5f 	bl	80073c0 <__assert_func>
    assert(frame->RdPtr <= frame->WrPtr);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	429a      	cmp	r2, r3
 800570c:	d906      	bls.n	800571c <SCI_DataLink_CalcCRC+0x50>
 800570e:	4b29      	ldr	r3, [pc, #164]	@ (80057b4 <SCI_DataLink_CalcCRC+0xe8>)
 8005710:	4a25      	ldr	r2, [pc, #148]	@ (80057a8 <SCI_DataLink_CalcCRC+0xdc>)
 8005712:	f240 218e 	movw	r1, #654	@ 0x28e
 8005716:	4825      	ldr	r0, [pc, #148]	@ (80057ac <SCI_DataLink_CalcCRC+0xe0>)
 8005718:	f001 fe52 	bl	80073c0 <__assert_func>
    assert(frame->WrPtr <= frame->Buffer + SCI_FRAME_SIZE);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	3340      	adds	r3, #64	@ 0x40
 8005726:	429a      	cmp	r2, r3
 8005728:	d906      	bls.n	8005738 <SCI_DataLink_CalcCRC+0x6c>
 800572a:	4b23      	ldr	r3, [pc, #140]	@ (80057b8 <SCI_DataLink_CalcCRC+0xec>)
 800572c:	4a1e      	ldr	r2, [pc, #120]	@ (80057a8 <SCI_DataLink_CalcCRC+0xdc>)
 800572e:	f240 218f 	movw	r1, #655	@ 0x28f
 8005732:	481e      	ldr	r0, [pc, #120]	@ (80057ac <SCI_DataLink_CalcCRC+0xe0>)
 8005734:	f001 fe44 	bl	80073c0 <__assert_func>

    /* Total frame length (- CRC length). */
    int32_t len_data = SCI_Frame_TotalFrameLength(frame) - 1;
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f8ed 	bl	8005918 <SCI_Frame_TotalFrameLength>
 800573e:	4603      	mov	r3, r0
 8005740:	3b01      	subs	r3, #1
 8005742:	617b      	str	r3, [r7, #20]
//      error_log("received command %#02x, data size to short! %08x != %08x",
//                frame->Buffer[0]);
//  }

    /* Calculate the CRC for all frames in the queue. */
    uint8_t crc = 0;
 8005744:	2300      	movs	r3, #0
 8005746:	74fb      	strb	r3, [r7, #19]
    while (len_data > 0)
 8005748:	e023      	b.n	8005792 <SCI_DataLink_CalcCRC+0xc6>
    {
        int32_t len_frame = frame->WrPtr - frame->Buffer;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	60fb      	str	r3, [r7, #12]
        if (len_data > len_frame)
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	429a      	cmp	r2, r3
 800575c:	dd09      	ble.n	8005772 <SCI_DataLink_CalcCRC+0xa6>
            crc = SCI_CRC8_Compute(crc, frame->Buffer, (size_t) len_frame);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6899      	ldr	r1, [r3, #8]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	7cfb      	ldrb	r3, [r7, #19]
 8005766:	4618      	mov	r0, r3
 8005768:	f7ff fa66 	bl	8004c38 <SCI_CRC8_Compute>
 800576c:	4603      	mov	r3, r0
 800576e:	74fb      	strb	r3, [r7, #19]
 8005770:	e008      	b.n	8005784 <SCI_DataLink_CalcCRC+0xb8>
        else
            crc = SCI_CRC8_Compute(crc, frame->Buffer, (size_t) len_data);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6899      	ldr	r1, [r3, #8]
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	7cfb      	ldrb	r3, [r7, #19]
 800577a:	4618      	mov	r0, r3
 800577c:	f7ff fa5c 	bl	8004c38 <SCI_CRC8_Compute>
 8005780:	4603      	mov	r3, r0
 8005782:	74fb      	strb	r3, [r7, #19]

        len_data -= len_frame;
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	617b      	str	r3, [r7, #20]
        frame = frame->Next;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	607b      	str	r3, [r7, #4]
    while (len_data > 0)
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	2b00      	cmp	r3, #0
 8005796:	dcd8      	bgt.n	800574a <SCI_DataLink_CalcCRC+0x7e>
    }
    return crc;
 8005798:	7cfb      	ldrb	r3, [r7, #19]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3718      	adds	r7, #24
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	0802bde0 	.word	0x0802bde0
 80057a8:	0802c88c 	.word	0x0802c88c
 80057ac:	0802bdb4 	.word	0x0802bdb4
 80057b0:	0802bdec 	.word	0x0802bdec
 80057b4:	0802be0c 	.word	0x0802be0c
 80057b8:	0802be2c 	.word	0x0802be2c

080057bc <SCI_Frame_QueueCRC>:

static void SCI_Frame_QueueCRC(sci_frame_t * frame)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
    assert(frame != 0);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d106      	bne.n	80057d8 <SCI_Frame_QueueCRC+0x1c>
 80057ca:	4b4c      	ldr	r3, [pc, #304]	@ (80058fc <SCI_Frame_QueueCRC+0x140>)
 80057cc:	4a4c      	ldr	r2, [pc, #304]	@ (8005900 <SCI_Frame_QueueCRC+0x144>)
 80057ce:	f240 21ad 	movw	r1, #685	@ 0x2ad
 80057d2:	484c      	ldr	r0, [pc, #304]	@ (8005904 <SCI_Frame_QueueCRC+0x148>)
 80057d4:	f001 fdf4 	bl	80073c0 <__assert_func>
    assert(frame->Buffer == frame->RdPtr);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d006      	beq.n	80057f2 <SCI_Frame_QueueCRC+0x36>
 80057e4:	4b48      	ldr	r3, [pc, #288]	@ (8005908 <SCI_Frame_QueueCRC+0x14c>)
 80057e6:	4a46      	ldr	r2, [pc, #280]	@ (8005900 <SCI_Frame_QueueCRC+0x144>)
 80057e8:	f240 21ae 	movw	r1, #686	@ 0x2ae
 80057ec:	4845      	ldr	r0, [pc, #276]	@ (8005904 <SCI_Frame_QueueCRC+0x148>)
 80057ee:	f001 fde7 	bl	80073c0 <__assert_func>
    assert(frame->RdPtr <= frame->WrPtr);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d906      	bls.n	800580c <SCI_Frame_QueueCRC+0x50>
 80057fe:	4b43      	ldr	r3, [pc, #268]	@ (800590c <SCI_Frame_QueueCRC+0x150>)
 8005800:	4a3f      	ldr	r2, [pc, #252]	@ (8005900 <SCI_Frame_QueueCRC+0x144>)
 8005802:	f240 21af 	movw	r1, #687	@ 0x2af
 8005806:	483f      	ldr	r0, [pc, #252]	@ (8005904 <SCI_Frame_QueueCRC+0x148>)
 8005808:	f001 fdda 	bl	80073c0 <__assert_func>
    assert(frame->WrPtr <= frame->Buffer + SCI_FRAME_SIZE);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	3340      	adds	r3, #64	@ 0x40
 8005816:	429a      	cmp	r2, r3
 8005818:	d906      	bls.n	8005828 <SCI_Frame_QueueCRC+0x6c>
 800581a:	4b3d      	ldr	r3, [pc, #244]	@ (8005910 <SCI_Frame_QueueCRC+0x154>)
 800581c:	4a38      	ldr	r2, [pc, #224]	@ (8005900 <SCI_Frame_QueueCRC+0x144>)
 800581e:	f44f 712c 	mov.w	r1, #688	@ 0x2b0
 8005822:	4838      	ldr	r0, [pc, #224]	@ (8005904 <SCI_Frame_QueueCRC+0x148>)
 8005824:	f001 fdcc 	bl	80073c0 <__assert_func>
    assert(frame->Buffer[0] == SCI_START_BYTE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	2b02      	cmp	r3, #2
 8005830:	d006      	beq.n	8005840 <SCI_Frame_QueueCRC+0x84>
 8005832:	4b38      	ldr	r3, [pc, #224]	@ (8005914 <SCI_Frame_QueueCRC+0x158>)
 8005834:	4a32      	ldr	r2, [pc, #200]	@ (8005900 <SCI_Frame_QueueCRC+0x144>)
 8005836:	f240 21b1 	movw	r1, #689	@ 0x2b1
 800583a:	4832      	ldr	r0, [pc, #200]	@ (8005904 <SCI_Frame_QueueCRC+0x148>)
 800583c:	f001 fdc0 	bl	80073c0 <__assert_func>

    uint8_t crc = 0;
 8005840:	2300      	movs	r3, #0
 8005842:	75fb      	strb	r3, [r7, #23]

    uint_fast8_t escape = 0;
 8005844:	2300      	movs	r3, #0
 8005846:	613b      	str	r3, [r7, #16]

    /* Ignore the start byte in the first frame. */
    frame->RdPtr = frame->Buffer + 1;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	605a      	str	r2, [r3, #4]

    while (frame != 0)
 8005852:	e04a      	b.n	80058ea <SCI_Frame_QueueCRC+0x12e>
    {
        /* Calculate byte-wise CRC and heed byte stuffing. */
        while (frame->RdPtr < frame->WrPtr)
        {
            if (!escape && *frame->RdPtr == SCI_ESCAPE_BYTE)
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d107      	bne.n	800586a <SCI_Frame_QueueCRC+0xae>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b1b      	cmp	r3, #27
 8005862:	d102      	bne.n	800586a <SCI_Frame_QueueCRC+0xae>
            {
                escape = !0;
 8005864:	2301      	movs	r3, #1
 8005866:	613b      	str	r3, [r7, #16]
 8005868:	e01d      	b.n	80058a6 <SCI_Frame_QueueCRC+0xea>
            }
            else
            {
                if (escape)
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d011      	beq.n	8005894 <SCI_Frame_QueueCRC+0xd8>
                {
                    escape = 0;
 8005870:	2300      	movs	r3, #0
 8005872:	613b      	str	r3, [r7, #16]
                    uint8_t byte = (uint8_t) (~(*frame->RdPtr));
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	43db      	mvns	r3, r3
 800587c:	b2db      	uxtb	r3, r3
 800587e:	73fb      	strb	r3, [r7, #15]
                    crc = SCI_CRC8_Compute(crc, &byte, 1);
 8005880:	f107 010f 	add.w	r1, r7, #15
 8005884:	7dfb      	ldrb	r3, [r7, #23]
 8005886:	2201      	movs	r2, #1
 8005888:	4618      	mov	r0, r3
 800588a:	f7ff f9d5 	bl	8004c38 <SCI_CRC8_Compute>
 800588e:	4603      	mov	r3, r0
 8005890:	75fb      	strb	r3, [r7, #23]
 8005892:	e008      	b.n	80058a6 <SCI_Frame_QueueCRC+0xea>
                }
                else
                {
                    crc = SCI_CRC8_Compute(crc, frame->RdPtr, 1);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6859      	ldr	r1, [r3, #4]
 8005898:	7dfb      	ldrb	r3, [r7, #23]
 800589a:	2201      	movs	r2, #1
 800589c:	4618      	mov	r0, r3
 800589e:	f7ff f9cb 	bl	8004c38 <SCI_CRC8_Compute>
 80058a2:	4603      	mov	r3, r0
 80058a4:	75fb      	strb	r3, [r7, #23]
                }
            }
            frame->RdPtr++;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	605a      	str	r2, [r3, #4]
        while (frame->RdPtr < frame->WrPtr)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d3cb      	bcc.n	8005854 <SCI_Frame_QueueCRC+0x98>
        }

        /* Iterate through queued frames and queue CRC in last frame. */
        frame->RdPtr = frame->Buffer;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689a      	ldr	r2, [r3, #8]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	605a      	str	r2, [r3, #4]
        if (frame->Next != 0)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d007      	beq.n	80058dc <SCI_Frame_QueueCRC+0x120>
        {
            frame = frame->Next;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	607b      	str	r3, [r7, #4]
            frame->RdPtr = frame->Buffer;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	689a      	ldr	r2, [r3, #8]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	605a      	str	r2, [r3, #4]
 80058da:	e006      	b.n	80058ea <SCI_Frame_QueueCRC+0x12e>
        }
        else
        {
            /* Enqueue the CRC. */
            SCI_Frame_Queue08u(frame, crc);
 80058dc:	7dfb      	ldrb	r3, [r7, #23]
 80058de:	4619      	mov	r1, r3
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f911 	bl	8005b08 <SCI_Frame_Queue08u>
            frame = 0;
 80058e6:	2300      	movs	r3, #0
 80058e8:	607b      	str	r3, [r7, #4]
    while (frame != 0)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1df      	bne.n	80058b0 <SCI_Frame_QueueCRC+0xf4>
        }
    }
}
 80058f0:	bf00      	nop
 80058f2:	bf00      	nop
 80058f4:	3718      	adds	r7, #24
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	0802bde0 	.word	0x0802bde0
 8005900:	0802c8a4 	.word	0x0802c8a4
 8005904:	0802bdb4 	.word	0x0802bdb4
 8005908:	0802bebc 	.word	0x0802bebc
 800590c:	0802be0c 	.word	0x0802be0c
 8005910:	0802be2c 	.word	0x0802be2c
 8005914:	0802bf94 	.word	0x0802bf94

08005918 <SCI_Frame_TotalFrameLength>:
#include "sci_crc8.h"
#include "sci_status.h"
#include <assert.h>

int32_t SCI_Frame_TotalFrameLength(sci_frame_t const * frame)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
    assert(frame != 0);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d105      	bne.n	8005932 <SCI_Frame_TotalFrameLength+0x1a>
 8005926:	4b13      	ldr	r3, [pc, #76]	@ (8005974 <SCI_Frame_TotalFrameLength+0x5c>)
 8005928:	4a13      	ldr	r2, [pc, #76]	@ (8005978 <SCI_Frame_TotalFrameLength+0x60>)
 800592a:	2134      	movs	r1, #52	@ 0x34
 800592c:	4813      	ldr	r0, [pc, #76]	@ (800597c <SCI_Frame_TotalFrameLength+0x64>)
 800592e:	f001 fd47 	bl	80073c0 <__assert_func>
    assert(frame->WrPtr != 0);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d105      	bne.n	8005946 <SCI_Frame_TotalFrameLength+0x2e>
 800593a:	4b11      	ldr	r3, [pc, #68]	@ (8005980 <SCI_Frame_TotalFrameLength+0x68>)
 800593c:	4a0e      	ldr	r2, [pc, #56]	@ (8005978 <SCI_Frame_TotalFrameLength+0x60>)
 800593e:	2135      	movs	r1, #53	@ 0x35
 8005940:	480e      	ldr	r0, [pc, #56]	@ (800597c <SCI_Frame_TotalFrameLength+0x64>)
 8005942:	f001 fd3d 	bl	80073c0 <__assert_func>

    /* Find total frame length. */
    int32_t len_data = 0;
 8005946:	2300      	movs	r3, #0
 8005948:	60fb      	str	r3, [r7, #12]
    while (frame != 0)
 800594a:	e00a      	b.n	8005962 <SCI_Frame_TotalFrameLength+0x4a>
    {
        len_data += frame->WrPtr - frame->Buffer;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	4413      	add	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]
        frame = frame->Next;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	607b      	str	r3, [r7, #4]
    while (frame != 0)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1f1      	bne.n	800594c <SCI_Frame_TotalFrameLength+0x34>
    }
    return len_data;
 8005968:	68fb      	ldr	r3, [r7, #12]
}
 800596a:	4618      	mov	r0, r3
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	0802bfb8 	.word	0x0802bfb8
 8005978:	0802c8b8 	.word	0x0802c8b8
 800597c:	0802bfc4 	.word	0x0802bfc4
 8005980:	0802bff0 	.word	0x0802bff0

08005984 <SCI_Frame_BytesToRead>:
uint32_t SCI_Frame_BytesToRead(sci_frame_t const * frame)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
    assert(frame != 0);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d105      	bne.n	800599e <SCI_Frame_BytesToRead+0x1a>
 8005992:	4b0e      	ldr	r3, [pc, #56]	@ (80059cc <SCI_Frame_BytesToRead+0x48>)
 8005994:	4a0e      	ldr	r2, [pc, #56]	@ (80059d0 <SCI_Frame_BytesToRead+0x4c>)
 8005996:	2142      	movs	r1, #66	@ 0x42
 8005998:	480e      	ldr	r0, [pc, #56]	@ (80059d4 <SCI_Frame_BytesToRead+0x50>)
 800599a:	f001 fd11 	bl	80073c0 <__assert_func>
    uint32_t length = 0;
 800599e:	2300      	movs	r3, #0
 80059a0:	60fb      	str	r3, [r7, #12]
    while (frame != 0)
 80059a2:	e00b      	b.n	80059bc <SCI_Frame_BytesToRead+0x38>
    {
        length += (uint32_t)(frame->WrPtr - frame->RdPtr);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	461a      	mov	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	4413      	add	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]
        frame = frame->Next;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	607b      	str	r3, [r7, #4]
    while (frame != 0)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1f0      	bne.n	80059a4 <SCI_Frame_BytesToRead+0x20>
    }
    return length;
 80059c2:	68fb      	ldr	r3, [r7, #12]
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	0802bfb8 	.word	0x0802bfb8
 80059d0:	0802c8d4 	.word	0x0802c8d4
 80059d4:	0802bfc4 	.word	0x0802bfc4

080059d8 <SCI_Frame_IsStartFrame>:
uint8_t SCI_Frame_IsStartFrame(sci_frame_t const * frame)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
    assert(frame != 0);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d105      	bne.n	80059f2 <SCI_Frame_IsStartFrame+0x1a>
 80059e6:	4b09      	ldr	r3, [pc, #36]	@ (8005a0c <SCI_Frame_IsStartFrame+0x34>)
 80059e8:	4a09      	ldr	r2, [pc, #36]	@ (8005a10 <SCI_Frame_IsStartFrame+0x38>)
 80059ea:	214d      	movs	r1, #77	@ 0x4d
 80059ec:	4809      	ldr	r0, [pc, #36]	@ (8005a14 <SCI_Frame_IsStartFrame+0x3c>)
 80059ee:	f001 fce7 	bl	80073c0 <__assert_func>
    return frame->Buffer[0] == SCI_START_BYTE;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	bf0c      	ite	eq
 80059fc:	2301      	moveq	r3, #1
 80059fe:	2300      	movne	r3, #0
 8005a00:	b2db      	uxtb	r3, r3
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3708      	adds	r7, #8
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	0802bfb8 	.word	0x0802bfb8
 8005a10:	0802c8ec 	.word	0x0802c8ec
 8005a14:	0802bfc4 	.word	0x0802bfc4

08005a18 <SCI_Frame_SetByte>:

void SCI_Frame_SetByte(sci_frame_t * frame, uint8_t byte)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	460b      	mov	r3, r1
 8005a22:	70fb      	strb	r3, [r7, #3]
    assert(frame != 0);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d108      	bne.n	8005a3c <SCI_Frame_SetByte+0x24>
 8005a2a:	4b31      	ldr	r3, [pc, #196]	@ (8005af0 <SCI_Frame_SetByte+0xd8>)
 8005a2c:	4a31      	ldr	r2, [pc, #196]	@ (8005af4 <SCI_Frame_SetByte+0xdc>)
 8005a2e:	2153      	movs	r1, #83	@ 0x53
 8005a30:	4831      	ldr	r0, [pc, #196]	@ (8005af8 <SCI_Frame_SetByte+0xe0>)
 8005a32:	f001 fcc5 	bl	80073c0 <__assert_func>

    /* Iterate to the last frame in the queue. */
    while (frame->Next != 0)
    {
        frame = frame->Next;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	607b      	str	r3, [r7, #4]
    while (frame->Next != 0)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1f8      	bne.n	8005a36 <SCI_Frame_SetByte+0x1e>
    }

    /* Check if frame is full and enqueue another one. */
    if (frame->WrPtr - frame->Buffer == SCI_FRAME_SIZE)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b40      	cmp	r3, #64	@ 0x40
 8005a50:	d114      	bne.n	8005a7c <SCI_Frame_SetByte+0x64>
    {
        frame->Next = SCI_DataLink_RequestTxFrame(false);
 8005a52:	2000      	movs	r0, #0
 8005a54:	f7ff fbe2 	bl	800521c <SCI_DataLink_RequestTxFrame>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	60da      	str	r2, [r3, #12]
        frame = frame->Next;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	607b      	str	r3, [r7, #4]
        assert(frame != 0);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d105      	bne.n	8005a76 <SCI_Frame_SetByte+0x5e>
 8005a6a:	4b21      	ldr	r3, [pc, #132]	@ (8005af0 <SCI_Frame_SetByte+0xd8>)
 8005a6c:	4a21      	ldr	r2, [pc, #132]	@ (8005af4 <SCI_Frame_SetByte+0xdc>)
 8005a6e:	2160      	movs	r1, #96	@ 0x60
 8005a70:	4821      	ldr	r0, [pc, #132]	@ (8005af8 <SCI_Frame_SetByte+0xe0>)
 8005a72:	f001 fca5 	bl	80073c0 <__assert_func>
        if (!frame) return;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d035      	beq.n	8005ae8 <SCI_Frame_SetByte+0xd0>
    }

    assert(frame != 0);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d105      	bne.n	8005a8e <SCI_Frame_SetByte+0x76>
 8005a82:	4b1b      	ldr	r3, [pc, #108]	@ (8005af0 <SCI_Frame_SetByte+0xd8>)
 8005a84:	4a1b      	ldr	r2, [pc, #108]	@ (8005af4 <SCI_Frame_SetByte+0xdc>)
 8005a86:	2164      	movs	r1, #100	@ 0x64
 8005a88:	481b      	ldr	r0, [pc, #108]	@ (8005af8 <SCI_Frame_SetByte+0xe0>)
 8005a8a:	f001 fc99 	bl	80073c0 <__assert_func>
    assert(frame->Buffer == frame->RdPtr);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689a      	ldr	r2, [r3, #8]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d005      	beq.n	8005aa6 <SCI_Frame_SetByte+0x8e>
 8005a9a:	4b18      	ldr	r3, [pc, #96]	@ (8005afc <SCI_Frame_SetByte+0xe4>)
 8005a9c:	4a15      	ldr	r2, [pc, #84]	@ (8005af4 <SCI_Frame_SetByte+0xdc>)
 8005a9e:	2165      	movs	r1, #101	@ 0x65
 8005aa0:	4815      	ldr	r0, [pc, #84]	@ (8005af8 <SCI_Frame_SetByte+0xe0>)
 8005aa2:	f001 fc8d 	bl	80073c0 <__assert_func>
    assert(frame->RdPtr <= frame->WrPtr);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d905      	bls.n	8005abe <SCI_Frame_SetByte+0xa6>
 8005ab2:	4b13      	ldr	r3, [pc, #76]	@ (8005b00 <SCI_Frame_SetByte+0xe8>)
 8005ab4:	4a0f      	ldr	r2, [pc, #60]	@ (8005af4 <SCI_Frame_SetByte+0xdc>)
 8005ab6:	2166      	movs	r1, #102	@ 0x66
 8005ab8:	480f      	ldr	r0, [pc, #60]	@ (8005af8 <SCI_Frame_SetByte+0xe0>)
 8005aba:	f001 fc81 	bl	80073c0 <__assert_func>
    assert(frame->WrPtr <= frame->Buffer + SCI_FRAME_SIZE);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	3340      	adds	r3, #64	@ 0x40
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d905      	bls.n	8005ad8 <SCI_Frame_SetByte+0xc0>
 8005acc:	4b0d      	ldr	r3, [pc, #52]	@ (8005b04 <SCI_Frame_SetByte+0xec>)
 8005ace:	4a09      	ldr	r2, [pc, #36]	@ (8005af4 <SCI_Frame_SetByte+0xdc>)
 8005ad0:	2167      	movs	r1, #103	@ 0x67
 8005ad2:	4809      	ldr	r0, [pc, #36]	@ (8005af8 <SCI_Frame_SetByte+0xe0>)
 8005ad4:	f001 fc74 	bl	80073c0 <__assert_func>

    *(frame->WrPtr++) = byte;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	1c59      	adds	r1, r3, #1
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	6011      	str	r1, [r2, #0]
 8005ae2:	78fa      	ldrb	r2, [r7, #3]
 8005ae4:	701a      	strb	r2, [r3, #0]
 8005ae6:	e000      	b.n	8005aea <SCI_Frame_SetByte+0xd2>
        if (!frame) return;
 8005ae8:	bf00      	nop
}
 8005aea:	3708      	adds	r7, #8
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	0802bfb8 	.word	0x0802bfb8
 8005af4:	0802c904 	.word	0x0802c904
 8005af8:	0802bfc4 	.word	0x0802bfc4
 8005afc:	0802c004 	.word	0x0802c004
 8005b00:	0802c024 	.word	0x0802c024
 8005b04:	0802c044 	.word	0x0802c044

08005b08 <SCI_Frame_Queue08u>:

void SCI_Frame_Queue08u(sci_frame_t * frame, uint8_t data)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	460b      	mov	r3, r1
 8005b12:	70fb      	strb	r3, [r7, #3]
    if (data == SCI_START_BYTE || data == SCI_STOP_BYTE || data == SCI_ESCAPE_BYTE)
 8005b14:	78fb      	ldrb	r3, [r7, #3]
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d005      	beq.n	8005b26 <SCI_Frame_Queue08u+0x1e>
 8005b1a:	78fb      	ldrb	r3, [r7, #3]
 8005b1c:	2b03      	cmp	r3, #3
 8005b1e:	d002      	beq.n	8005b26 <SCI_Frame_Queue08u+0x1e>
 8005b20:	78fb      	ldrb	r3, [r7, #3]
 8005b22:	2b1b      	cmp	r3, #27
 8005b24:	d10b      	bne.n	8005b3e <SCI_Frame_Queue08u+0x36>
    {
        SCI_Frame_SetByte(frame, SCI_ESCAPE_BYTE);
 8005b26:	211b      	movs	r1, #27
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f7ff ff75 	bl	8005a18 <SCI_Frame_SetByte>
        SCI_Frame_SetByte(frame, (uint8_t)(~data));
 8005b2e:	78fb      	ldrb	r3, [r7, #3]
 8005b30:	43db      	mvns	r3, r3
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	4619      	mov	r1, r3
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7ff ff6e 	bl	8005a18 <SCI_Frame_SetByte>
 8005b3c:	e005      	b.n	8005b4a <SCI_Frame_Queue08u+0x42>
    }
    else
    {
        SCI_Frame_SetByte(frame, (uint8_t)data);
 8005b3e:	78fb      	ldrb	r3, [r7, #3]
 8005b40:	4619      	mov	r1, r3
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7ff ff68 	bl	8005a18 <SCI_Frame_SetByte>
    }
}
 8005b48:	bf00      	nop
 8005b4a:	bf00      	nop
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <SCI_Frame_Queue16u>:
void SCI_Frame_Queue16u(sci_frame_t * frame, uint16_t data)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b082      	sub	sp, #8
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	807b      	strh	r3, [r7, #2]
    SCI_Frame_Queue08u(frame, (uint8_t)(data >> 8));
 8005b5e:	887b      	ldrh	r3, [r7, #2]
 8005b60:	0a1b      	lsrs	r3, r3, #8
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	4619      	mov	r1, r3
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f7ff ffcd 	bl	8005b08 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, (uint8_t)(data >> 0));
 8005b6e:	887b      	ldrh	r3, [r7, #2]
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	4619      	mov	r1, r3
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7ff ffc7 	bl	8005b08 <SCI_Frame_Queue08u>
}
 8005b7a:	bf00      	nop
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
	...

08005b84 <SCI_Frame_Queue24u>:
void SCI_Frame_Queue24u(sci_frame_t * frame, uint32_t data)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
    assert(data < 0x01000000U);
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b94:	d305      	bcc.n	8005ba2 <SCI_Frame_Queue24u+0x1e>
 8005b96:	4b0f      	ldr	r3, [pc, #60]	@ (8005bd4 <SCI_Frame_Queue24u+0x50>)
 8005b98:	4a0f      	ldr	r2, [pc, #60]	@ (8005bd8 <SCI_Frame_Queue24u+0x54>)
 8005b9a:	217f      	movs	r1, #127	@ 0x7f
 8005b9c:	480f      	ldr	r0, [pc, #60]	@ (8005bdc <SCI_Frame_Queue24u+0x58>)
 8005b9e:	f001 fc0f 	bl	80073c0 <__assert_func>
    SCI_Frame_Queue08u(frame, (uint8_t)(data >> 16));
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	0c1b      	lsrs	r3, r3, #16
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	4619      	mov	r1, r3
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f7ff ffac 	bl	8005b08 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, (uint8_t)(data >> 8));
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	0a1b      	lsrs	r3, r3, #8
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7ff ffa5 	bl	8005b08 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, (uint8_t)(data >> 0));
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f7ff ff9f 	bl	8005b08 <SCI_Frame_Queue08u>
}
 8005bca:	bf00      	nop
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	0802c074 	.word	0x0802c074
 8005bd8:	0802c918 	.word	0x0802c918
 8005bdc:	0802bfc4 	.word	0x0802bfc4

08005be0 <SCI_Frame_Queue32u>:
void SCI_Frame_Queue32u(sci_frame_t * frame, uint32_t data)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
    SCI_Frame_Queue08u(frame, (uint8_t)(data >> 24));
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	0e1b      	lsrs	r3, r3, #24
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7ff ff88 	bl	8005b08 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, (uint8_t)(data >> 16));
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	0c1b      	lsrs	r3, r3, #16
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	4619      	mov	r1, r3
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f7ff ff81 	bl	8005b08 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, (uint8_t)(data >> 8));
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	0a1b      	lsrs	r3, r3, #8
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7ff ff7a 	bl	8005b08 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, (uint8_t)(data >> 0));
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	4619      	mov	r1, r3
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7ff ff74 	bl	8005b08 <SCI_Frame_Queue08u>
}
 8005c20:	bf00      	nop
 8005c22:	3708      	adds	r7, #8
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <SCI_Frame_Queue08s>:
void SCI_Frame_Queue08s(sci_frame_t * frame, int8_t data)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	460b      	mov	r3, r1
 8005c32:	70fb      	strb	r3, [r7, #3]
    if (data == SCI_START_BYTE || data == SCI_STOP_BYTE || data == SCI_ESCAPE_BYTE)
 8005c34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d007      	beq.n	8005c4c <SCI_Frame_Queue08s+0x24>
 8005c3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d003      	beq.n	8005c4c <SCI_Frame_Queue08s+0x24>
 8005c44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c48:	2b1b      	cmp	r3, #27
 8005c4a:	d10b      	bne.n	8005c64 <SCI_Frame_Queue08s+0x3c>
    {
        SCI_Frame_SetByte(frame, SCI_ESCAPE_BYTE);
 8005c4c:	211b      	movs	r1, #27
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7ff fee2 	bl	8005a18 <SCI_Frame_SetByte>
        SCI_Frame_SetByte(frame, (uint8_t)(~data));
 8005c54:	78fb      	ldrb	r3, [r7, #3]
 8005c56:	43db      	mvns	r3, r3
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7ff fedb 	bl	8005a18 <SCI_Frame_SetByte>
 8005c62:	e005      	b.n	8005c70 <SCI_Frame_Queue08s+0x48>
    }
    else
    {
        SCI_Frame_SetByte(frame, (uint8_t)data);
 8005c64:	78fb      	ldrb	r3, [r7, #3]
 8005c66:	4619      	mov	r1, r3
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f7ff fed5 	bl	8005a18 <SCI_Frame_SetByte>
    }
}
 8005c6e:	bf00      	nop
 8005c70:	bf00      	nop
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <SCI_Frame_Queue16s>:
void SCI_Frame_Queue16s(sci_frame_t * frame, int16_t data)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	460b      	mov	r3, r1
 8005c82:	807b      	strh	r3, [r7, #2]
    SCI_Frame_Queue08s(frame, (int8_t)(data >> 8));
 8005c84:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005c88:	121b      	asrs	r3, r3, #8
 8005c8a:	b21b      	sxth	r3, r3
 8005c8c:	b25b      	sxtb	r3, r3
 8005c8e:	4619      	mov	r1, r3
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f7ff ffc9 	bl	8005c28 <SCI_Frame_Queue08s>
    SCI_Frame_Queue08s(frame, (int8_t)(data >> 0));
 8005c96:	887b      	ldrh	r3, [r7, #2]
 8005c98:	b25b      	sxtb	r3, r3
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f7ff ffc3 	bl	8005c28 <SCI_Frame_Queue08s>
}
 8005ca2:	bf00      	nop
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <SCI_Frame_Queue24s>:
void SCI_Frame_Queue24s(sci_frame_t * frame, int32_t data)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b082      	sub	sp, #8
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
 8005cb2:	6039      	str	r1, [r7, #0]
    SCI_Frame_Queue08s(frame, (int8_t)(data >> 16));
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	141b      	asrs	r3, r3, #16
 8005cb8:	b25b      	sxtb	r3, r3
 8005cba:	4619      	mov	r1, r3
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f7ff ffb3 	bl	8005c28 <SCI_Frame_Queue08s>
    SCI_Frame_Queue08s(frame, (int8_t)(data >> 8));
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	121b      	asrs	r3, r3, #8
 8005cc6:	b25b      	sxtb	r3, r3
 8005cc8:	4619      	mov	r1, r3
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7ff ffac 	bl	8005c28 <SCI_Frame_Queue08s>
    SCI_Frame_Queue08s(frame, (int8_t)(data >> 0));
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	b25b      	sxtb	r3, r3
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7ff ffa6 	bl	8005c28 <SCI_Frame_Queue08s>
}
 8005cdc:	bf00      	nop
 8005cde:	3708      	adds	r7, #8
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <SCI_Frame_Queue32s>:
void SCI_Frame_Queue32s(sci_frame_t * frame, int32_t data)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
    SCI_Frame_Queue08s(frame, (int8_t)(data >> 24));
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	161b      	asrs	r3, r3, #24
 8005cf2:	b25b      	sxtb	r3, r3
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7ff ff96 	bl	8005c28 <SCI_Frame_Queue08s>
    SCI_Frame_Queue08s(frame, (int8_t)(data >> 16));
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	141b      	asrs	r3, r3, #16
 8005d00:	b25b      	sxtb	r3, r3
 8005d02:	4619      	mov	r1, r3
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f7ff ff8f 	bl	8005c28 <SCI_Frame_Queue08s>
    SCI_Frame_Queue08s(frame, (int8_t)(data >> 8));
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	121b      	asrs	r3, r3, #8
 8005d0e:	b25b      	sxtb	r3, r3
 8005d10:	4619      	mov	r1, r3
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7ff ff88 	bl	8005c28 <SCI_Frame_Queue08s>
    SCI_Frame_Queue08s(frame, (int8_t)(data >> 0));
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	b25b      	sxtb	r3, r3
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7ff ff82 	bl	8005c28 <SCI_Frame_Queue08s>
}
 8005d24:	bf00      	nop
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <SCI_Frame_Queue_Time>:

void SCI_Frame_Queue_Time(sci_frame_t * frame, ltc_t const * t)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
    assert(frame != 0);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d105      	bne.n	8005d48 <SCI_Frame_Queue_Time+0x1c>
 8005d3c:	4b10      	ldr	r3, [pc, #64]	@ (8005d80 <SCI_Frame_Queue_Time+0x54>)
 8005d3e:	4a11      	ldr	r2, [pc, #68]	@ (8005d84 <SCI_Frame_Queue_Time+0x58>)
 8005d40:	21ac      	movs	r1, #172	@ 0xac
 8005d42:	4811      	ldr	r0, [pc, #68]	@ (8005d88 <SCI_Frame_Queue_Time+0x5c>)
 8005d44:	f001 fb3c 	bl	80073c0 <__assert_func>
    assert(t != 0);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d105      	bne.n	8005d5a <SCI_Frame_Queue_Time+0x2e>
 8005d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8005d8c <SCI_Frame_Queue_Time+0x60>)
 8005d50:	4a0c      	ldr	r2, [pc, #48]	@ (8005d84 <SCI_Frame_Queue_Time+0x58>)
 8005d52:	21ad      	movs	r1, #173	@ 0xad
 8005d54:	480c      	ldr	r0, [pc, #48]	@ (8005d88 <SCI_Frame_Queue_Time+0x5c>)
 8005d56:	f001 fb33 	bl	80073c0 <__assert_func>
    SCI_Frame_Queue32u(frame, t->sec);          // s
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4619      	mov	r1, r3
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f7ff ff3d 	bl	8005be0 <SCI_Frame_Queue32u>
    SCI_Frame_Queue16u(frame, (uint16_t)(t->usec >> 4U));   // µs / 16
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	091b      	lsrs	r3, r3, #4
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	4619      	mov	r1, r3
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f7ff feee 	bl	8005b52 <SCI_Frame_Queue16u>
}
 8005d76:	bf00      	nop
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	0802bfb8 	.word	0x0802bfb8
 8005d84:	0802c92c 	.word	0x0802c92c
 8005d88:	0802bfc4 	.word	0x0802bfc4
 8005d8c:	0802c088 	.word	0x0802c088

08005d90 <SCI_Frame_GetByte>:

static inline uint8_t SCI_Frame_GetByte(sci_frame_t * frame)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
    assert(frame != 0);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d105      	bne.n	8005daa <SCI_Frame_GetByte+0x1a>
 8005d9e:	4b24      	ldr	r3, [pc, #144]	@ (8005e30 <SCI_Frame_GetByte+0xa0>)
 8005da0:	4a24      	ldr	r2, [pc, #144]	@ (8005e34 <SCI_Frame_GetByte+0xa4>)
 8005da2:	21b4      	movs	r1, #180	@ 0xb4
 8005da4:	4824      	ldr	r0, [pc, #144]	@ (8005e38 <SCI_Frame_GetByte+0xa8>)
 8005da6:	f001 fb0b 	bl	80073c0 <__assert_func>
    assert(frame->Buffer <= frame->RdPtr);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	689a      	ldr	r2, [r3, #8]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d905      	bls.n	8005dc2 <SCI_Frame_GetByte+0x32>
 8005db6:	4b21      	ldr	r3, [pc, #132]	@ (8005e3c <SCI_Frame_GetByte+0xac>)
 8005db8:	4a1e      	ldr	r2, [pc, #120]	@ (8005e34 <SCI_Frame_GetByte+0xa4>)
 8005dba:	21b5      	movs	r1, #181	@ 0xb5
 8005dbc:	481e      	ldr	r0, [pc, #120]	@ (8005e38 <SCI_Frame_GetByte+0xa8>)
 8005dbe:	f001 faff 	bl	80073c0 <__assert_func>
    assert(frame->RdPtr <= frame->WrPtr);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d905      	bls.n	8005dda <SCI_Frame_GetByte+0x4a>
 8005dce:	4b1c      	ldr	r3, [pc, #112]	@ (8005e40 <SCI_Frame_GetByte+0xb0>)
 8005dd0:	4a18      	ldr	r2, [pc, #96]	@ (8005e34 <SCI_Frame_GetByte+0xa4>)
 8005dd2:	21b6      	movs	r1, #182	@ 0xb6
 8005dd4:	4818      	ldr	r0, [pc, #96]	@ (8005e38 <SCI_Frame_GetByte+0xa8>)
 8005dd6:	f001 faf3 	bl	80073c0 <__assert_func>
    assert(frame->WrPtr <= frame->Buffer + SCI_FRAME_SIZE);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	3340      	adds	r3, #64	@ 0x40
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d912      	bls.n	8005e0e <SCI_Frame_GetByte+0x7e>
 8005de8:	4b16      	ldr	r3, [pc, #88]	@ (8005e44 <SCI_Frame_GetByte+0xb4>)
 8005dea:	4a12      	ldr	r2, [pc, #72]	@ (8005e34 <SCI_Frame_GetByte+0xa4>)
 8005dec:	21b7      	movs	r1, #183	@ 0xb7
 8005dee:	4812      	ldr	r0, [pc, #72]	@ (8005e38 <SCI_Frame_GetByte+0xa8>)
 8005df0:	f001 fae6 	bl	80073c0 <__assert_func>

    /* Skip all completely read frames. */
    while (frame->WrPtr == frame->RdPtr)
    {
        assert(frame->Next != 0);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d105      	bne.n	8005e08 <SCI_Frame_GetByte+0x78>
 8005dfc:	4b12      	ldr	r3, [pc, #72]	@ (8005e48 <SCI_Frame_GetByte+0xb8>)
 8005dfe:	4a0d      	ldr	r2, [pc, #52]	@ (8005e34 <SCI_Frame_GetByte+0xa4>)
 8005e00:	21bc      	movs	r1, #188	@ 0xbc
 8005e02:	480d      	ldr	r0, [pc, #52]	@ (8005e38 <SCI_Frame_GetByte+0xa8>)
 8005e04:	f001 fadc 	bl	80073c0 <__assert_func>
        frame = frame->Next;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	607b      	str	r3, [r7, #4]
    while (frame->WrPtr == frame->RdPtr)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d0ec      	beq.n	8005df4 <SCI_Frame_GetByte+0x64>
    }
    return *(frame->RdPtr++);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	1c59      	adds	r1, r3, #1
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	6051      	str	r1, [r2, #4]
 8005e24:	781b      	ldrb	r3, [r3, #0]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	0802bfb8 	.word	0x0802bfb8
 8005e34:	0802c944 	.word	0x0802c944
 8005e38:	0802bfc4 	.word	0x0802bfc4
 8005e3c:	0802c090 	.word	0x0802c090
 8005e40:	0802c024 	.word	0x0802c024
 8005e44:	0802c044 	.word	0x0802c044
 8005e48:	0802c0b0 	.word	0x0802c0b0

08005e4c <SCI_Frame_Dequeue08s>:
int8_t SCI_Frame_Dequeue08s(sci_frame_t * frame)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
    return (int8_t)SCI_Frame_GetByte(frame);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f7ff ff9b 	bl	8005d90 <SCI_Frame_GetByte>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	b25b      	sxtb	r3, r3
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <SCI_Frame_Dequeue16s>:
int16_t SCI_Frame_Dequeue16s(sci_frame_t * frame)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b084      	sub	sp, #16
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
    uint_fast16_t
    val  = (uint_fast16_t)(SCI_Frame_GetByte(frame) << 8U);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7ff ff8e 	bl	8005d90 <SCI_Frame_GetByte>
 8005e74:	4603      	mov	r3, r0
 8005e76:	021b      	lsls	r3, r3, #8
 8005e78:	60fb      	str	r3, [r7, #12]
    val |= (uint_fast16_t)(SCI_Frame_GetByte(frame) << 0U);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7ff ff88 	bl	8005d90 <SCI_Frame_GetByte>
 8005e80:	4603      	mov	r3, r0
 8005e82:	461a      	mov	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]
    return (int16_t)val;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	b21b      	sxth	r3, r3
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <SCI_Frame_Dequeue32s>:
    val |= (uint32_t)(SCI_Frame_GetByte(frame) <<  8U);
    val |= (uint32_t)(SCI_Frame_GetByte(frame) <<  0U);
    return (int32_t)val;
}
int32_t SCI_Frame_Dequeue32s(sci_frame_t * frame)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b084      	sub	sp, #16
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
    uint32_t
    val  = (uint32_t)(SCI_Frame_GetByte(frame) << 24U);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7ff ff76 	bl	8005d90 <SCI_Frame_GetByte>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	061b      	lsls	r3, r3, #24
 8005ea8:	60fb      	str	r3, [r7, #12]
    val |= (uint32_t)(SCI_Frame_GetByte(frame) << 16U);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7ff ff70 	bl	8005d90 <SCI_Frame_GetByte>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	041b      	lsls	r3, r3, #16
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	60fb      	str	r3, [r7, #12]
    val |= (uint32_t)(SCI_Frame_GetByte(frame) <<  8U);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7ff ff68 	bl	8005d90 <SCI_Frame_GetByte>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	021b      	lsls	r3, r3, #8
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]
    val |= (uint32_t)(SCI_Frame_GetByte(frame) <<  0U);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f7ff ff60 	bl	8005d90 <SCI_Frame_GetByte>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]
    return (int32_t)val;
 8005eda:	68fb      	ldr	r3, [r7, #12]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <SCI_Frame_Dequeue08u>:
uint8_t SCI_Frame_Dequeue08u(sci_frame_t * frame)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
    return (uint8_t)SCI_Frame_GetByte(frame);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f7ff ff4f 	bl	8005d90 <SCI_Frame_GetByte>
 8005ef2:	4603      	mov	r3, r0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3708      	adds	r7, #8
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <SCI_Frame_Dequeue16u>:
uint16_t SCI_Frame_Dequeue16u(sci_frame_t * frame)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
    uint_fast16_t // uint16_t raises warning
    val  = (uint_fast16_t)(SCI_Frame_GetByte(frame) <<  8U);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f7ff ff43 	bl	8005d90 <SCI_Frame_GetByte>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	021b      	lsls	r3, r3, #8
 8005f0e:	60fb      	str	r3, [r7, #12]
    val |= (uint_fast16_t)(SCI_Frame_GetByte(frame) <<  0U);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7ff ff3d 	bl	8005d90 <SCI_Frame_GetByte>
 8005f16:	4603      	mov	r3, r0
 8005f18:	461a      	mov	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	60fb      	str	r3, [r7, #12]
    return (uint16_t)val;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	b29b      	uxth	r3, r3
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <SCI_Frame_Dequeue32u>:
    val |= (uint32_t)(SCI_Frame_GetByte(frame) <<  8U);
    val |= (uint32_t)(SCI_Frame_GetByte(frame) <<  0U);
    return val;
}
uint32_t SCI_Frame_Dequeue32u(sci_frame_t * frame)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
    uint32_t
    val  = (uint32_t)(SCI_Frame_GetByte(frame) << 24U);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f7ff ff2b 	bl	8005d90 <SCI_Frame_GetByte>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	061b      	lsls	r3, r3, #24
 8005f3e:	60fb      	str	r3, [r7, #12]
    val |= (uint32_t)(SCI_Frame_GetByte(frame) << 16U);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f7ff ff25 	bl	8005d90 <SCI_Frame_GetByte>
 8005f46:	4603      	mov	r3, r0
 8005f48:	041b      	lsls	r3, r3, #16
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	60fb      	str	r3, [r7, #12]
    val |= (uint32_t)(SCI_Frame_GetByte(frame) <<  8U);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7ff ff1d 	bl	8005d90 <SCI_Frame_GetByte>
 8005f56:	4603      	mov	r3, r0
 8005f58:	021b      	lsls	r3, r3, #8
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]
    val |= (uint32_t)(SCI_Frame_GetByte(frame) <<  0U);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f7ff ff15 	bl	8005d90 <SCI_Frame_GetByte>
 8005f66:	4603      	mov	r3, r0
 8005f68:	461a      	mov	r2, r3
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	60fb      	str	r3, [r7, #12]
    return val;
 8005f70:	68fb      	ldr	r3, [r7, #12]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <SCI_Frame_PutChar>:

void SCI_Frame_PutChar(char c, void * frame)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b082      	sub	sp, #8
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	4603      	mov	r3, r0
 8005f82:	6039      	str	r1, [r7, #0]
 8005f84:	71fb      	strb	r3, [r7, #7]
    if (c == '\r') return;
 8005f86:	79fb      	ldrb	r3, [r7, #7]
 8005f88:	2b0d      	cmp	r3, #13
 8005f8a:	d005      	beq.n	8005f98 <SCI_Frame_PutChar+0x1e>
    SCI_Frame_Queue08u((sci_frame_t*)frame, (uint8_t)c);
 8005f8c:	79fb      	ldrb	r3, [r7, #7]
 8005f8e:	4619      	mov	r1, r3
 8005f90:	6838      	ldr	r0, [r7, #0]
 8005f92:	f7ff fdb9 	bl	8005b08 <SCI_Frame_Queue08u>
 8005f96:	e000      	b.n	8005f9a <SCI_Frame_PutChar+0x20>
    if (c == '\r') return;
 8005f98:	bf00      	nop
}
 8005f9a:	3708      	adds	r7, #8
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <SCI_SendAcknowledge>:
/*******************************************************************************
 * Code
 ******************************************************************************/

status_t SCI_SendAcknowledge(sci_device_t deviceID, sci_cmd_t cmd)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	460a      	mov	r2, r1
 8005faa:	71fb      	strb	r3, [r7, #7]
 8005fac:	4613      	mov	r3, r2
 8005fae:	71bb      	strb	r3, [r7, #6]
    sci_frame_t * frame = SCI_DataLink_RequestTxFrame(true);
 8005fb0:	2001      	movs	r0, #1
 8005fb2:	f7ff f933 	bl	800521c <SCI_DataLink_RequestTxFrame>
 8005fb6:	60f8      	str	r0, [r7, #12]
    if (!frame) return ERROR_SCI_BUFFER_FULL;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d102      	bne.n	8005fc4 <SCI_SendAcknowledge+0x24>
 8005fbe:	f06f 03d7 	mvn.w	r3, #215	@ 0xd7
 8005fc2:	e023      	b.n	800600c <SCI_SendAcknowledge+0x6c>

    if (SCI_CMD_IS_EXTENDED_CMD(cmd))
 8005fc4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	da11      	bge.n	8005ff0 <SCI_SendAcknowledge+0x50>
    {
        SCI_Frame_Queue08u(frame, CMD_ACKNOWLEDGE | 0x80);
 8005fcc:	218a      	movs	r1, #138	@ 0x8a
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f7ff fd9a 	bl	8005b08 <SCI_Frame_Queue08u>
        SCI_Frame_Queue08u(frame, deviceID);
 8005fd4:	79fb      	ldrb	r3, [r7, #7]
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f7ff fd95 	bl	8005b08 <SCI_Frame_Queue08u>
        SCI_Frame_Queue08u(frame, cmd | 0x80);
 8005fde:	79bb      	ldrb	r3, [r7, #6]
 8005fe0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f7ff fd8d 	bl	8005b08 <SCI_Frame_Queue08u>
 8005fee:	e008      	b.n	8006002 <SCI_SendAcknowledge+0x62>
    }
    else
    {
        SCI_Frame_Queue08u(frame, CMD_ACKNOWLEDGE);
 8005ff0:	210a      	movs	r1, #10
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f7ff fd88 	bl	8005b08 <SCI_Frame_Queue08u>
        SCI_Frame_Queue08u(frame, cmd);
 8005ff8:	79bb      	ldrb	r3, [r7, #6]
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f7ff fd83 	bl	8005b08 <SCI_Frame_Queue08u>
    }
    return SCI_DataLink_SendTxFrame(frame, true);
 8006002:	2101      	movs	r1, #1
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f7ff fa23 	bl	8005450 <SCI_DataLink_SendTxFrame>
 800600a:	4603      	mov	r3, r0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <SCI_SendNotAcknowledge>:

status_t SCI_SendNotAcknowledge(sci_device_t deviceID, sci_cmd_t cmd, status_t reason)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	4603      	mov	r3, r0
 800601c:	603a      	str	r2, [r7, #0]
 800601e:	71fb      	strb	r3, [r7, #7]
 8006020:	460b      	mov	r3, r1
 8006022:	71bb      	strb	r3, [r7, #6]
    sci_frame_t * frame = SCI_DataLink_RequestTxFrame(true);
 8006024:	2001      	movs	r0, #1
 8006026:	f7ff f8f9 	bl	800521c <SCI_DataLink_RequestTxFrame>
 800602a:	60f8      	str	r0, [r7, #12]
    if (!frame) return ERROR_SCI_BUFFER_FULL;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d102      	bne.n	8006038 <SCI_SendNotAcknowledge+0x24>
 8006032:	f06f 03d7 	mvn.w	r3, #215	@ 0xd7
 8006036:	e029      	b.n	800608c <SCI_SendNotAcknowledge+0x78>

    if (SCI_CMD_IS_EXTENDED_CMD(cmd))
 8006038:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800603c:	2b00      	cmp	r3, #0
 800603e:	da11      	bge.n	8006064 <SCI_SendNotAcknowledge+0x50>
    {
        SCI_Frame_Queue08u(frame, CMD_NOT_ACKNOWLEDGE | 0x80);
 8006040:	218b      	movs	r1, #139	@ 0x8b
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f7ff fd60 	bl	8005b08 <SCI_Frame_Queue08u>
        SCI_Frame_Queue08u(frame, deviceID);
 8006048:	79fb      	ldrb	r3, [r7, #7]
 800604a:	4619      	mov	r1, r3
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f7ff fd5b 	bl	8005b08 <SCI_Frame_Queue08u>
        SCI_Frame_Queue08u(frame, cmd | 0x80);
 8006052:	79bb      	ldrb	r3, [r7, #6]
 8006054:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006058:	b2db      	uxtb	r3, r3
 800605a:	4619      	mov	r1, r3
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f7ff fd53 	bl	8005b08 <SCI_Frame_Queue08u>
 8006062:	e008      	b.n	8006076 <SCI_SendNotAcknowledge+0x62>
    }
    else
    {
        SCI_Frame_Queue08u(frame, CMD_NOT_ACKNOWLEDGE);
 8006064:	210b      	movs	r1, #11
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f7ff fd4e 	bl	8005b08 <SCI_Frame_Queue08u>
        SCI_Frame_Queue08u(frame, cmd);
 800606c:	79bb      	ldrb	r3, [r7, #6]
 800606e:	4619      	mov	r1, r3
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f7ff fd49 	bl	8005b08 <SCI_Frame_Queue08u>
    }
    SCI_Frame_Queue16s(frame, (int16_t)reason);
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	b21b      	sxth	r3, r3
 800607a:	4619      	mov	r1, r3
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f7ff fdfb 	bl	8005c78 <SCI_Frame_Queue16s>
    return SCI_DataLink_SendTxFrame(frame, true);
 8006082:	2101      	movs	r1, #1
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f7ff f9e3 	bl	8005450 <SCI_DataLink_SendTxFrame>
 800608a:	4603      	mov	r3, r0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <Scheduler_Init>:

/*******************************************************************************
 * Code
 ******************************************************************************/
scheduler_t * Scheduler_Init(void)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	af00      	add	r7, sp, #0
    // static instance of the scheduler; might be replaced by malloc.
    static scheduler_t me;
    memset(&me, 0, sizeof(scheduler_t));
 8006098:	22ec      	movs	r2, #236	@ 0xec
 800609a:	2100      	movs	r1, #0
 800609c:	4802      	ldr	r0, [pc, #8]	@ (80060a8 <Scheduler_Init+0x14>)
 800609e:	f023 fb58 	bl	8029752 <memset>
    return &me;
 80060a2:	4b01      	ldr	r3, [pc, #4]	@ (80060a8 <Scheduler_Init+0x14>)
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	240030dc 	.word	0x240030dc

080060ac <Scheduler_AddTask>:
                           task_function_t task,
                           task_prio_t priority,
                           task_event_t eventQ,
                           size_t eventQSize,
                           const char * name)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	603b      	str	r3, [r7, #0]
 80060b8:	4613      	mov	r3, r2
 80060ba:	71fb      	strb	r3, [r7, #7]
    assert(me != NULL);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d105      	bne.n	80060ce <Scheduler_AddTask+0x22>
 80060c2:	4b24      	ldr	r3, [pc, #144]	@ (8006154 <Scheduler_AddTask+0xa8>)
 80060c4:	4a24      	ldr	r2, [pc, #144]	@ (8006158 <Scheduler_AddTask+0xac>)
 80060c6:	2170      	movs	r1, #112	@ 0x70
 80060c8:	4824      	ldr	r0, [pc, #144]	@ (800615c <Scheduler_AddTask+0xb0>)
 80060ca:	f001 f979 	bl	80073c0 <__assert_func>
    if (!task) return ERROR_INVALID_ARGUMENT;
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d102      	bne.n	80060da <Scheduler_AddTask+0x2e>
 80060d4:	f06f 0304 	mvn.w	r3, #4
 80060d8:	e038      	b.n	800614c <Scheduler_AddTask+0xa0>
    if (!eventQ) return ERROR_INVALID_ARGUMENT;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d102      	bne.n	80060e6 <Scheduler_AddTask+0x3a>
 80060e0:	f06f 0304 	mvn.w	r3, #4
 80060e4:	e032      	b.n	800614c <Scheduler_AddTask+0xa0>
    if (!(eventQSize > 0)) return ERROR_INVALID_ARGUMENT;
 80060e6:	6a3b      	ldr	r3, [r7, #32]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d102      	bne.n	80060f2 <Scheduler_AddTask+0x46>
 80060ec:	f06f 0304 	mvn.w	r3, #4
 80060f0:	e02c      	b.n	800614c <Scheduler_AddTask+0xa0>
    if (!(priority < SCHEDULER_MAX_TASKS)) return ERROR_INVALID_ARGUMENT;
 80060f2:	79fb      	ldrb	r3, [r7, #7]
 80060f4:	2b07      	cmp	r3, #7
 80060f6:	d902      	bls.n	80060fe <Scheduler_AddTask+0x52>
 80060f8:	f06f 0304 	mvn.w	r3, #4
 80060fc:	e026      	b.n	800614c <Scheduler_AddTask+0xa0>

    taskcontrolblock_t * tcb = &me->TCB[priority];
 80060fe:	79fa      	ldrb	r2, [r7, #7]
 8006100:	4613      	mov	r3, r2
 8006102:	00db      	lsls	r3, r3, #3
 8006104:	1a9b      	subs	r3, r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	3308      	adds	r3, #8
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	4413      	add	r3, r2
 800610e:	3304      	adds	r3, #4
 8006110:	617b      	str	r3, [r7, #20]

    if (tcb->Task != 0) return ERROR_INVALID_ARGUMENT; // check if task isn't used right now
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d002      	beq.n	8006120 <Scheduler_AddTask+0x74>
 800611a:	f06f 0304 	mvn.w	r3, #4
 800611e:	e015      	b.n	800614c <Scheduler_AddTask+0xa0>

    tcb->Task = task;
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	601a      	str	r2, [r3, #0]
    tcb->EQ_Buff = eventQ;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	683a      	ldr	r2, [r7, #0]
 800612a:	605a      	str	r2, [r3, #4]
    tcb->EQ_Head = eventQ;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	609a      	str	r2, [r3, #8]
    tcb->EQ_Tail = eventQ;
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	683a      	ldr	r2, [r7, #0]
 8006136:	60da      	str	r2, [r3, #12]
    tcb->EQ_Size = eventQSize;
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	6a3a      	ldr	r2, [r7, #32]
 800613c:	611a      	str	r2, [r3, #16]
    tcb->EQ_Load = 0;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2200      	movs	r2, #0
 8006142:	615a      	str	r2, [r3, #20]
    tcb->Name = name;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006148:	619a      	str	r2, [r3, #24]

    return STATUS_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3718      	adds	r7, #24
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	0802c0c4 	.word	0x0802c0c4
 8006158:	0802c968 	.word	0x0802c968
 800615c:	0802c0d0 	.word	0x0802c0d0

08006160 <Scheduler_PostEvent>:

status_t Scheduler_PostEvent(scheduler_t * const me,
                             task_prio_t priority,
                             task_event_t event)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	460b      	mov	r3, r1
 800616a:	607a      	str	r2, [r7, #4]
 800616c:	72fb      	strb	r3, [r7, #11]
    assert(me != NULL);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d105      	bne.n	8006180 <Scheduler_PostEvent+0x20>
 8006174:	4b31      	ldr	r3, [pc, #196]	@ (800623c <Scheduler_PostEvent+0xdc>)
 8006176:	4a32      	ldr	r2, [pc, #200]	@ (8006240 <Scheduler_PostEvent+0xe0>)
 8006178:	2189      	movs	r1, #137	@ 0x89
 800617a:	4832      	ldr	r0, [pc, #200]	@ (8006244 <Scheduler_PostEvent+0xe4>)
 800617c:	f001 f920 	bl	80073c0 <__assert_func>
    assert(event != NULL);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d105      	bne.n	8006192 <Scheduler_PostEvent+0x32>
 8006186:	4b30      	ldr	r3, [pc, #192]	@ (8006248 <Scheduler_PostEvent+0xe8>)
 8006188:	4a2d      	ldr	r2, [pc, #180]	@ (8006240 <Scheduler_PostEvent+0xe0>)
 800618a:	218a      	movs	r1, #138	@ 0x8a
 800618c:	482d      	ldr	r0, [pc, #180]	@ (8006244 <Scheduler_PostEvent+0xe4>)
 800618e:	f001 f917 	bl	80073c0 <__assert_func>

    if (!(priority < SCHEDULER_MAX_TASKS)) return ERROR_INVALID_ARGUMENT;
 8006192:	7afb      	ldrb	r3, [r7, #11]
 8006194:	2b07      	cmp	r3, #7
 8006196:	d902      	bls.n	800619e <Scheduler_PostEvent+0x3e>
 8006198:	f06f 0304 	mvn.w	r3, #4
 800619c:	e049      	b.n	8006232 <Scheduler_PostEvent+0xd2>

    taskcontrolblock_t * tcb = &me->TCB[priority];
 800619e:	7afa      	ldrb	r2, [r7, #11]
 80061a0:	4613      	mov	r3, r2
 80061a2:	00db      	lsls	r3, r3, #3
 80061a4:	1a9b      	subs	r3, r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	3308      	adds	r3, #8
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	4413      	add	r3, r2
 80061ae:	3304      	adds	r3, #4
 80061b0:	617b      	str	r3, [r7, #20]
    if (tcb->Task == 0) return ERROR_NOT_INITIALIZED;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d102      	bne.n	80061c0 <Scheduler_PostEvent+0x60>
 80061ba:	f06f 0306 	mvn.w	r3, #6
 80061be:	e038      	b.n	8006232 <Scheduler_PostEvent+0xd2>

    IRQ_LOCK();
 80061c0:	f000 f992 	bl	80064e8 <IRQ_LOCK>
    if (tcb->EQ_Load < tcb->EQ_Size) // check if queue is not full
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	695a      	ldr	r2, [r3, #20]
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d22c      	bcs.n	800622a <Scheduler_PostEvent+0xca>
    {
        *tcb->EQ_Head = event;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	601a      	str	r2, [r3, #0]
        if ((++tcb->EQ_Head) == tcb->EQ_Buff + tcb->EQ_Size) tcb->EQ_Head = tcb->EQ_Buff;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	1d1a      	adds	r2, r3, #4
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	609a      	str	r2, [r3, #8]
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	689a      	ldr	r2, [r3, #8]
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	6859      	ldr	r1, [r3, #4]
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	440b      	add	r3, r1
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d103      	bne.n	80061fe <Scheduler_PostEvent+0x9e>
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	685a      	ldr	r2, [r3, #4]
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	609a      	str	r2, [r3, #8]
        if ((++tcb->EQ_Load) == (uint32_t)1U) me->PendingFlags |= (1U << priority);
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	1c5a      	adds	r2, r3, #1
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	615a      	str	r2, [r3, #20]
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d108      	bne.n	8006222 <Scheduler_PostEvent+0xc2>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	7afb      	ldrb	r3, [r7, #11]
 8006216:	2101      	movs	r1, #1
 8006218:	fa01 f303 	lsl.w	r3, r1, r3
 800621c:	431a      	orrs	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	601a      	str	r2, [r3, #0]
        IRQ_UNLOCK();
 8006222:	f000 f93f 	bl	80064a4 <IRQ_UNLOCK>
    {
        IRQ_UNLOCK();
        return ERROR_TASK_QUEUE_FULL;
    }

    return STATUS_OK;
 8006226:	2300      	movs	r3, #0
 8006228:	e003      	b.n	8006232 <Scheduler_PostEvent+0xd2>
        IRQ_UNLOCK();
 800622a:	f000 f93b 	bl	80064a4 <IRQ_UNLOCK>
        return ERROR_TASK_QUEUE_FULL;
 800622e:	f06f 03e6 	mvn.w	r3, #230	@ 0xe6
}
 8006232:	4618      	mov	r0, r3
 8006234:	3718      	adds	r7, #24
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	0802c0c4 	.word	0x0802c0c4
 8006240:	0802c97c 	.word	0x0802c97c
 8006244:	0802c0d0 	.word	0x0802c0d0
 8006248:	0802c100 	.word	0x0802c100

0800624c <Scheduler_Run>:
    assert(me != NULL);
    return !((me->PendingFlags & (1U << priority)) == 0);
}

void Scheduler_Run(scheduler_t * const me)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
    assert(me != NULL);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d105      	bne.n	8006266 <Scheduler_Run+0x1a>
 800625a:	4b05      	ldr	r3, [pc, #20]	@ (8006270 <Scheduler_Run+0x24>)
 800625c:	4a05      	ldr	r2, [pc, #20]	@ (8006274 <Scheduler_Run+0x28>)
 800625e:	21ae      	movs	r1, #174	@ 0xae
 8006260:	4805      	ldr	r0, [pc, #20]	@ (8006278 <Scheduler_Run+0x2c>)
 8006262:	f001 f8ad 	bl	80073c0 <__assert_func>
    for (;;)
    {
        ScheduleNext(me);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f83c 	bl	80062e4 <ScheduleNext>
 800626c:	e7fb      	b.n	8006266 <Scheduler_Run+0x1a>
 800626e:	bf00      	nop
 8006270:	0802c0c4 	.word	0x0802c0c4
 8006274:	0802c990 	.word	0x0802c990
 8006278:	0802c0d0 	.word	0x0802c0d0

0800627c <Scheduler_SwitchContext>:
    }
}

void Scheduler_SwitchContext(scheduler_t * const me)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
    assert(me != NULL);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d105      	bne.n	8006296 <Scheduler_SwitchContext+0x1a>
 800628a:	4b13      	ldr	r3, [pc, #76]	@ (80062d8 <Scheduler_SwitchContext+0x5c>)
 800628c:	4a13      	ldr	r2, [pc, #76]	@ (80062dc <Scheduler_SwitchContext+0x60>)
 800628e:	21b7      	movs	r1, #183	@ 0xb7
 8006290:	4813      	ldr	r0, [pc, #76]	@ (80062e0 <Scheduler_SwitchContext+0x64>)
 8006292:	f001 f895 	bl	80073c0 <__assert_func>
    task_prio_t prio = me->CurrentTask;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	7a1b      	ldrb	r3, [r3, #8]
 800629a:	73fb      	strb	r3, [r7, #15]
    me->MaskingFlags |= (uint32_t)(1U << prio); /* mask current task */
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
 80062a2:	2101      	movs	r1, #1
 80062a4:	fa01 f303 	lsl.w	r3, r1, r3
 80062a8:	431a      	orrs	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	605a      	str	r2, [r3, #4]
    ScheduleNext(me); /* execute pending lower priority tasks */
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f818 	bl	80062e4 <ScheduleNext>
    me->MaskingFlags &= (uint32_t)(~(1U << prio)); /* unmask current task */
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685a      	ldr	r2, [r3, #4]
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
 80062ba:	2101      	movs	r1, #1
 80062bc:	fa01 f303 	lsl.w	r3, r1, r3
 80062c0:	43db      	mvns	r3, r3
 80062c2:	401a      	ands	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	605a      	str	r2, [r3, #4]
    me->CurrentTask = prio;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	7bfa      	ldrb	r2, [r7, #15]
 80062cc:	721a      	strb	r2, [r3, #8]
}
 80062ce:	bf00      	nop
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	0802c0c4 	.word	0x0802c0c4
 80062dc:	0802c9b0 	.word	0x0802c9b0
 80062e0:	0802c0d0 	.word	0x0802c0d0

080062e4 <ScheduleNext>:

static inline void ScheduleNext(scheduler_t * const me)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
    assert(me != NULL);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d105      	bne.n	80062fe <ScheduleNext+0x1a>
 80062f2:	4b3c      	ldr	r3, [pc, #240]	@ (80063e4 <ScheduleNext+0x100>)
 80062f4:	4a3c      	ldr	r2, [pc, #240]	@ (80063e8 <ScheduleNext+0x104>)
 80062f6:	21c1      	movs	r1, #193	@ 0xc1
 80062f8:	483c      	ldr	r0, [pc, #240]	@ (80063ec <ScheduleNext+0x108>)
 80062fa:	f001 f861 	bl	80073c0 <__assert_func>
    uint32_t pending = (uint32_t)(me->PendingFlags & ~(me->MaskingFlags));
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	43db      	mvns	r3, r3
 8006308:	4013      	ands	r3, r2
 800630a:	617b      	str	r3, [r7, #20]

    if (pending)
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d064      	beq.n	80063dc <ScheduleNext+0xf8>
    {
        /* Get highest pending and not masked priority. */
        uint8_t prio = 0;
 8006312:	2300      	movs	r3, #0
 8006314:	74fb      	strb	r3, [r7, #19]
        while (pending & ~0xFU)
 8006316:	e005      	b.n	8006324 <ScheduleNext+0x40>
        {
            pending >>= 4U;
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	091b      	lsrs	r3, r3, #4
 800631c:	617b      	str	r3, [r7, #20]
            prio += 4U;
 800631e:	7cfb      	ldrb	r3, [r7, #19]
 8006320:	3304      	adds	r3, #4
 8006322:	74fb      	strb	r3, [r7, #19]
        while (pending & ~0xFU)
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	2b0f      	cmp	r3, #15
 8006328:	d8f6      	bhi.n	8006318 <ScheduleNext+0x34>
        }
        prio += myLog2Lookup[pending];
 800632a:	4a31      	ldr	r2, [pc, #196]	@ (80063f0 <ScheduleNext+0x10c>)
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	4413      	add	r3, r2
 8006330:	781a      	ldrb	r2, [r3, #0]
 8006332:	7cfb      	ldrb	r3, [r7, #19]
 8006334:	4413      	add	r3, r2
 8006336:	74fb      	strb	r3, [r7, #19]
        assert(prio < SCHEDULER_MAX_TASKS);
 8006338:	7cfb      	ldrb	r3, [r7, #19]
 800633a:	2b07      	cmp	r3, #7
 800633c:	d905      	bls.n	800634a <ScheduleNext+0x66>
 800633e:	4b2d      	ldr	r3, [pc, #180]	@ (80063f4 <ScheduleNext+0x110>)
 8006340:	4a29      	ldr	r2, [pc, #164]	@ (80063e8 <ScheduleNext+0x104>)
 8006342:	21ce      	movs	r1, #206	@ 0xce
 8006344:	4829      	ldr	r0, [pc, #164]	@ (80063ec <ScheduleNext+0x108>)
 8006346:	f001 f83b 	bl	80073c0 <__assert_func>

        taskcontrolblock_t * tcb = &me->TCB[prio];
 800634a:	7cfa      	ldrb	r2, [r7, #19]
 800634c:	4613      	mov	r3, r2
 800634e:	00db      	lsls	r3, r3, #3
 8006350:	1a9b      	subs	r3, r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	3308      	adds	r3, #8
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	4413      	add	r3, r2
 800635a:	3304      	adds	r3, #4
 800635c:	60fb      	str	r3, [r7, #12]
        assert(tcb->Task != 0);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d105      	bne.n	8006372 <ScheduleNext+0x8e>
 8006366:	4b24      	ldr	r3, [pc, #144]	@ (80063f8 <ScheduleNext+0x114>)
 8006368:	4a1f      	ldr	r2, [pc, #124]	@ (80063e8 <ScheduleNext+0x104>)
 800636a:	21d1      	movs	r1, #209	@ 0xd1
 800636c:	481f      	ldr	r0, [pc, #124]	@ (80063ec <ScheduleNext+0x108>)
 800636e:	f001 f827 	bl	80073c0 <__assert_func>

        task_event_t event = *tcb->EQ_Tail;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	60bb      	str	r3, [r7, #8]

        /* Get next event from queue. */
        if ((++tcb->EQ_Tail) == tcb->EQ_Buff + tcb->EQ_Size)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	1d1a      	adds	r2, r3, #4
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	60da      	str	r2, [r3, #12]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	68da      	ldr	r2, [r3, #12]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6859      	ldr	r1, [r3, #4]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	440b      	add	r3, r1
 8006394:	429a      	cmp	r2, r3
 8006396:	d103      	bne.n	80063a0 <ScheduleNext+0xbc>
            tcb->EQ_Tail = tcb->EQ_Buff;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	685a      	ldr	r2, [r3, #4]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	60da      	str	r2, [r3, #12]

        IRQ_LOCK();
 80063a0:	f000 f8a2 	bl	80064e8 <IRQ_LOCK>

        /* Clear pending flag if event queue is empty. */
        if ((--tcb->EQ_Load) == (size_t)0)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	1e5a      	subs	r2, r3, #1
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	615a      	str	r2, [r3, #20]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d109      	bne.n	80063ca <ScheduleNext+0xe6>
            me->PendingFlags &= (uint32_t)(~(1U << prio));
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	7cfb      	ldrb	r3, [r7, #19]
 80063bc:	2101      	movs	r1, #1
 80063be:	fa01 f303 	lsl.w	r3, r1, r3
 80063c2:	43db      	mvns	r3, r3
 80063c4:	401a      	ands	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	601a      	str	r2, [r3, #0]

        me->CurrentTask = prio;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	7cfa      	ldrb	r2, [r7, #19]
 80063ce:	721a      	strb	r2, [r3, #8]

        IRQ_UNLOCK();
 80063d0:	f000 f868 	bl	80064a4 <IRQ_UNLOCK>
#if PROFILING
        OnTaskStart(prio);
#endif

        /* Execute the task. */
        tcb->Task(event);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68b8      	ldr	r0, [r7, #8]
 80063da:	4798      	blx	r3

#if PROFILING
        OnTaskFinished(prio, status);
#endif
    }
}
 80063dc:	bf00      	nop
 80063de:	3718      	adds	r7, #24
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	0802c0c4 	.word	0x0802c0c4
 80063e8:	0802c9a0 	.word	0x0802c9a0
 80063ec:	0802c0d0 	.word	0x0802c0d0
 80063f0:	0802c958 	.word	0x0802c958
 80063f4:	0802c110 	.word	0x0802c110
 80063f8:	0802c12c 	.word	0x0802c12c

080063fc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80063fc:	b480      	push	{r7}
 80063fe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006400:	f3bf 8f4f 	dsb	sy
}
 8006404:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006406:	4b06      	ldr	r3, [pc, #24]	@ (8006420 <__NVIC_SystemReset+0x24>)
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800640e:	4904      	ldr	r1, [pc, #16]	@ (8006420 <__NVIC_SystemReset+0x24>)
 8006410:	4b04      	ldr	r3, [pc, #16]	@ (8006424 <__NVIC_SystemReset+0x28>)
 8006412:	4313      	orrs	r3, r2
 8006414:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006416:	f3bf 8f4f 	dsb	sy
}
 800641a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800641c:	bf00      	nop
 800641e:	e7fd      	b.n	800641c <__NVIC_SystemReset+0x20>
 8006420:	e000ed00 	.word	0xe000ed00
 8006424:	05fa0004 	.word	0x05fa0004

08006428 <Board_Init>:

#include "utility/debug.h" // declaration of print() and error_log()
#include "api/argus_api.h"

status_t Board_Init(void)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
	/* Initialize timer required by the API. */
	Timer_Init();
 800642e:	f000 fc27 	bl	8006c80 <Timer_Init>

	/* Initialize UART for print functionality. */
	status_t status = UART_Init();
 8006432:	f000 fd05 	bl	8006e40 <UART_Init>
 8006436:	6078      	str	r0, [r7, #4]
	if (status < STATUS_OK) {
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	da05      	bge.n	800644a <Board_Init+0x22>
		error_log("UART driver initialization failed, error code: %d", status);
 800643e:	6879      	ldr	r1, [r7, #4]
 8006440:	480b      	ldr	r0, [pc, #44]	@ (8006470 <Board_Init+0x48>)
 8006442:	f00c fda7 	bl	8012f94 <print>
		return status;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	e00e      	b.n	8006468 <Board_Init+0x40>
	}

	/* Initialize the S2PI hardware required by the API. */
	status = S2PI_Init(SPI_DEFAULT_SLAVE, SPI_BAUDRATE);
 800644a:	490a      	ldr	r1, [pc, #40]	@ (8006474 <Board_Init+0x4c>)
 800644c:	2001      	movs	r0, #1
 800644e:	f000 f877 	bl	8006540 <S2PI_Init>
 8006452:	6078      	str	r0, [r7, #4]
	if (status < STATUS_OK) {
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	da05      	bge.n	8006466 <Board_Init+0x3e>
		error_log("S2PI driver initialization failed, error code: %d", status);
 800645a:	6879      	ldr	r1, [r7, #4]
 800645c:	4806      	ldr	r0, [pc, #24]	@ (8006478 <Board_Init+0x50>)
 800645e:	f00c fd99 	bl	8012f94 <print>
		return status;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	e000      	b.n	8006468 <Board_Init+0x40>
	//        error_log("Flash driver initialization failed, error code: %d", status);
	//        return status;
	//    }
	//

	return STATUS_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3708      	adds	r7, #8
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	0802c13c 	.word	0x0802c13c
 8006474:	01406f40 	.word	0x01406f40
 8006478:	0802c178 	.word	0x0802c178

0800647c <Board_Reset>:

void Board_Reset(void)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
 8006480:	f7ff ffbc 	bl	80063fc <__NVIC_SystemReset>

08006484 <Argus_GetCrosstalkVectorTable_Callback>:
}


void Argus_GetCrosstalkVectorTable_Callback(argus_cal_xtalk_table_t * xtalk,
                                            argus_mode_t const mode)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	460b      	mov	r3, r1
 800648e:	70fb      	strb	r3, [r7, #3]
	memset(xtalk, 0, sizeof(argus_cal_xtalk_table_t));
 8006490:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006494:	2100      	movs	r1, #0
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f023 f95b 	bl	8029752 <memset>
//	xtalk->FrameB[6][3].dS = 16167.04;	xtalk->FrameB[6][3].dC = -1575.04;
//	xtalk->FrameB[7][0].dS = 16632;	xtalk->FrameB[7][0].dC = -2940.96;
//	xtalk->FrameB[7][1].dS = 15223.04;	xtalk->FrameB[7][1].dC = -2816;
//	xtalk->FrameB[7][2].dS = 15192;	xtalk->FrameB[7][2].dC = -347.04;
//	xtalk->FrameB[7][3].dS = 15680;	xtalk->FrameB[7][3].dC = -612;
}
 800649c:	bf00      	nop
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <IRQ_UNLOCK>:
 *          Can only be executed in Privileged modes.
 *
 * @return  -
 *****************************************************************************/
void IRQ_UNLOCK(void)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	af00      	add	r7, sp, #0
    assert(g_irq_lock_ct > 0);
 80064a8:	4b0b      	ldr	r3, [pc, #44]	@ (80064d8 <IRQ_UNLOCK+0x34>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	dc05      	bgt.n	80064bc <IRQ_UNLOCK+0x18>
 80064b0:	4b0a      	ldr	r3, [pc, #40]	@ (80064dc <IRQ_UNLOCK+0x38>)
 80064b2:	4a0b      	ldr	r2, [pc, #44]	@ (80064e0 <IRQ_UNLOCK+0x3c>)
 80064b4:	2137      	movs	r1, #55	@ 0x37
 80064b6:	480b      	ldr	r0, [pc, #44]	@ (80064e4 <IRQ_UNLOCK+0x40>)
 80064b8:	f000 ff82 	bl	80073c0 <__assert_func>
    if (--g_irq_lock_ct <= 0)
 80064bc:	4b06      	ldr	r3, [pc, #24]	@ (80064d8 <IRQ_UNLOCK+0x34>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3b01      	subs	r3, #1
 80064c2:	4a05      	ldr	r2, [pc, #20]	@ (80064d8 <IRQ_UNLOCK+0x34>)
 80064c4:	6013      	str	r3, [r2, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	dc04      	bgt.n	80064d4 <IRQ_UNLOCK+0x30>
    {
        g_irq_lock_ct = 0;
 80064ca:	4b03      	ldr	r3, [pc, #12]	@ (80064d8 <IRQ_UNLOCK+0x34>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80064d0:	b662      	cpsie	i
}
 80064d2:	bf00      	nop
        __enable_irq();
    }
}
 80064d4:	bf00      	nop
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	240031c8 	.word	0x240031c8
 80064dc:	0802c1b4 	.word	0x0802c1b4
 80064e0:	0802c9c8 	.word	0x0802c9c8
 80064e4:	0802c1c8 	.word	0x0802c1c8

080064e8 <IRQ_LOCK>:
 *          Can only be executed in Privileged modes.
 *
 * @return  -
 *****************************************************************************/
void IRQ_LOCK(void)
{
 80064e8:	b480      	push	{r7}
 80064ea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80064ec:	b672      	cpsid	i
}
 80064ee:	bf00      	nop
    __disable_irq();
    ++g_irq_lock_ct;
 80064f0:	4b04      	ldr	r3, [pc, #16]	@ (8006504 <IRQ_LOCK+0x1c>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3301      	adds	r3, #1
 80064f6:	4a03      	ldr	r2, [pc, #12]	@ (8006504 <IRQ_LOCK+0x1c>)
 80064f8:	6013      	str	r3, [r2, #0]
}
 80064fa:	bf00      	nop
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr
 8006504:	240031c8 	.word	0x240031c8

08006508 <NVM_WriteBlock>:
/*******************************************************************************
 * Code
 ******************************************************************************/

status_t NVM_WriteBlock(uint32_t device_id, uint32_t block_size, uint8_t const * buf)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
//    memcpy(&(data[NVM_HEADER_SIZE]), buf, block_size);
//
//    /* Write Data. */
//    return Flash_Write(FLASH_API_BLOCK_INDEX, slot_idx, data, FLASH_BLOCK_SIZE);
	/////////////////////////////////////////////////////////
	return ERROR_NOT_IMPLEMENTED;
 8006514:	f06f 0308 	mvn.w	r3, #8
}
 8006518:	4618      	mov	r0, r3
 800651a:	3714      	adds	r7, #20
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <NVM_ReadBlock>:

status_t NVM_ReadBlock(uint32_t device_id, uint32_t block_size, uint8_t * buf)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
//    /* Reset buffer in case of any error. */
//    memset(buf, 0, block_size);
//    return status;

	/////////////////////////////////////////////////////////
	return ERROR_NOT_IMPLEMENTED;
 8006530:	f06f 0308 	mvn.w	r3, #8
}
 8006534:	4618      	mov	r0, r3
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <S2PI_Init>:
 * Code
 ******************************************************************************/


status_t S2PI_Init(s2pi_slave_t defaultSlave, uint32_t baudRate_Bps)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
    S2PI_InitPins();
 800654a:	f000 f815 	bl	8006578 <S2PI_InitPins>

    if (defaultSlave < 0) {
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	da01      	bge.n	8006558 <S2PI_Init+0x18>
        defaultSlave = S2PI_SLAVE1;
 8006554:	2301      	movs	r3, #1
 8006556:	607b      	str	r3, [r7, #4]
    }

    if (defaultSlave > S2PI_SLAVE_COUNT) {
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b01      	cmp	r3, #1
 800655c:	dd02      	ble.n	8006564 <S2PI_Init+0x24>
        return ERROR_S2PI_INVALID_SLAVE;
 800655e:	f06f 0336 	mvn.w	r3, #54	@ 0x36
 8006562:	e004      	b.n	800656e <S2PI_Init+0x2e>
    }

    return S2PI_SetBaudRate(defaultSlave, baudRate_Bps);
 8006564:	6839      	ldr	r1, [r7, #0]
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f884 	bl	8006674 <S2PI_SetBaudRate>
 800656c:	4603      	mov	r3, r0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
	...

08006578 <S2PI_InitPins>:


static inline void S2PI_InitPins()
{
 8006578:	b580      	push	{r7, lr}
 800657a:	af00      	add	r7, sp, #0
    /* Initializes Pins: MOSI/MISO/CLK */
    S2PI_SetGPIOMode(true);
 800657c:	2001      	movs	r0, #1
 800657e:	f000 f837 	bl	80065f0 <S2PI_SetGPIOMode>
    S2PI_SetGPIOMode(false);
 8006582:	2000      	movs	r0, #0
 8006584:	f000 f834 	bl	80065f0 <S2PI_SetGPIOMode>

    myS2PIHnd.SlaveIrqMapping[S2PI_SLAVE1] = S2PI_IRQ1_GPIO_PIN;
 8006588:	4b04      	ldr	r3, [pc, #16]	@ (800659c <S2PI_InitPins+0x24>)
 800658a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800658e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* S2PI_SLAVE_COUNT >= 4 */

    /* The 4X board equipped with power switches require some delay
     * until the devices have finished the power-on-reset (POR).
     * Must be >= 2ms (?) */
    Time_DelayMSec(3);
 8006590:	2003      	movs	r0, #3
 8006592:	f00c fa21 	bl	80129d8 <Time_DelayMSec>
}
 8006596:	bf00      	nop
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	24000000 	.word	0x24000000

080065a0 <S2PI_SetSlaveInternal>:

static inline status_t S2PI_SetSlaveInternal(s2pi_slave_t slave)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
    switch (slave)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d112      	bne.n	80065d4 <S2PI_SetSlaveInternal+0x34>
    {
        case S2PI_SLAVE1:
            myS2PIHnd.GPIOs[S2PI_CS].Port = S2PI_CS1_GPIO;
 80065ae:	4b0d      	ldr	r3, [pc, #52]	@ (80065e4 <S2PI_SetSlaveInternal+0x44>)
 80065b0:	4a0d      	ldr	r2, [pc, #52]	@ (80065e8 <S2PI_SetSlaveInternal+0x48>)
 80065b2:	635a      	str	r2, [r3, #52]	@ 0x34
            myS2PIHnd.GPIOs[S2PI_CS].Pin = S2PI_CS1_GPIO_PIN;
 80065b4:	4b0b      	ldr	r3, [pc, #44]	@ (80065e4 <S2PI_SetSlaveInternal+0x44>)
 80065b6:	2210      	movs	r2, #16
 80065b8:	639a      	str	r2, [r3, #56]	@ 0x38
            myS2PIHnd.GPIOs[S2PI_IRQ].Port = S2PI_IRQ1_GPIO;
 80065ba:	4b0a      	ldr	r3, [pc, #40]	@ (80065e4 <S2PI_SetSlaveInternal+0x44>)
 80065bc:	4a0b      	ldr	r2, [pc, #44]	@ (80065ec <S2PI_SetSlaveInternal+0x4c>)
 80065be:	64da      	str	r2, [r3, #76]	@ 0x4c
            myS2PIHnd.GPIOs[S2PI_IRQ].Pin = S2PI_IRQ1_GPIO_PIN;
 80065c0:	4b08      	ldr	r3, [pc, #32]	@ (80065e4 <S2PI_SetSlaveInternal+0x44>)
 80065c2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80065c6:	651a      	str	r2, [r3, #80]	@ 0x50
            break;
 80065c8:	bf00      	nop

        default:
            return ERROR_S2PI_INVALID_SLAVE;
    }

    myS2PIHnd.Slave = slave;
 80065ca:	4a06      	ldr	r2, [pc, #24]	@ (80065e4 <S2PI_SetSlaveInternal+0x44>)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6053      	str	r3, [r2, #4]

    return STATUS_OK;
 80065d0:	2300      	movs	r3, #0
 80065d2:	e001      	b.n	80065d8 <S2PI_SetSlaveInternal+0x38>
            return ERROR_S2PI_INVALID_SLAVE;
 80065d4:	f06f 0336 	mvn.w	r3, #54	@ 0x36
}
 80065d8:	4618      	mov	r0, r3
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr
 80065e4:	24000000 	.word	0x24000000
 80065e8:	58020000 	.word	0x58020000
 80065ec:	58020400 	.word	0x58020400

080065f0 <S2PI_SetGPIOMode>:
 * @brief   Sets the mode in which the S2PI pins operate.
 * @details This is a helper function to switch the modes between SPI and GPIO.
 * @param   gpio_mode Enables the GPIO mode: true for GPIO, false for SPI.
 *****************************************************************************/
static inline void S2PI_SetGPIOMode(bool gpio_mode)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b088      	sub	sp, #32
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	4603      	mov	r3, r0
 80065f8:	71fb      	strb	r3, [r7, #7]
    GPIO_InitTypeDef  GPIO_InitStruct;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80065fa:	2300      	movs	r3, #0
 80065fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80065fe:	2303      	movs	r3, #3
 8006600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = myS2PIHnd.SpiAlternate;
 8006602:	4b1b      	ldr	r3, [pc, #108]	@ (8006670 <S2PI_SetGPIOMode+0x80>)
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	61fb      	str	r3, [r7, #28]

    /* *** OUTPUT pins *** */
    GPIO_InitStruct.Mode      = gpio_mode ? GPIO_MODE_OUTPUT_PP : GPIO_MODE_AF_PP;
 8006608:	79fb      	ldrb	r3, [r7, #7]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <S2PI_SetGPIOMode+0x22>
 800660e:	2301      	movs	r3, #1
 8006610:	e000      	b.n	8006614 <S2PI_SetGPIOMode+0x24>
 8006612:	2302      	movs	r3, #2
 8006614:	613b      	str	r3, [r7, #16]

    /* SPI CLK */
    GPIO_InitStruct.Pin       = myS2PIHnd.GPIOs[S2PI_CLK].Pin;
 8006616:	4b16      	ldr	r3, [pc, #88]	@ (8006670 <S2PI_SetGPIOMode+0x80>)
 8006618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800661a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(myS2PIHnd.GPIOs[S2PI_CLK].Port, &GPIO_InitStruct);
 800661c:	4b14      	ldr	r3, [pc, #80]	@ (8006670 <S2PI_SetGPIOMode+0x80>)
 800661e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006620:	f107 020c 	add.w	r2, r7, #12
 8006624:	4611      	mov	r1, r2
 8006626:	4618      	mov	r0, r3
 8006628:	f004 fe36 	bl	800b298 <HAL_GPIO_Init>

    /* SPI MOSI */
    GPIO_InitStruct.Pin      = myS2PIHnd.GPIOs[S2PI_MOSI].Pin;
 800662c:	4b10      	ldr	r3, [pc, #64]	@ (8006670 <S2PI_SetGPIOMode+0x80>)
 800662e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006630:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(myS2PIHnd.GPIOs[S2PI_MOSI].Port, &GPIO_InitStruct);
 8006632:	4b0f      	ldr	r3, [pc, #60]	@ (8006670 <S2PI_SetGPIOMode+0x80>)
 8006634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006636:	f107 020c 	add.w	r2, r7, #12
 800663a:	4611      	mov	r1, r2
 800663c:	4618      	mov	r0, r3
 800663e:	f004 fe2b 	bl	800b298 <HAL_GPIO_Init>

    /* *** INPUT pins *** */
    GPIO_InitStruct.Mode      = gpio_mode ? GPIO_MODE_INPUT : GPIO_MODE_AF_PP;
 8006642:	79fb      	ldrb	r3, [r7, #7]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d001      	beq.n	800664c <S2PI_SetGPIOMode+0x5c>
 8006648:	2300      	movs	r3, #0
 800664a:	e000      	b.n	800664e <S2PI_SetGPIOMode+0x5e>
 800664c:	2302      	movs	r3, #2
 800664e:	613b      	str	r3, [r7, #16]

    /* SPI MISO */
    GPIO_InitStruct.Pin       = myS2PIHnd.GPIOs[S2PI_MISO].Pin;
 8006650:	4b07      	ldr	r3, [pc, #28]	@ (8006670 <S2PI_SetGPIOMode+0x80>)
 8006652:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006654:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(myS2PIHnd.GPIOs[S2PI_MISO].Port, &GPIO_InitStruct);
 8006656:	4b06      	ldr	r3, [pc, #24]	@ (8006670 <S2PI_SetGPIOMode+0x80>)
 8006658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800665a:	f107 020c 	add.w	r2, r7, #12
 800665e:	4611      	mov	r1, r2
 8006660:	4618      	mov	r0, r3
 8006662:	f004 fe19 	bl	800b298 <HAL_GPIO_Init>
}
 8006666:	bf00      	nop
 8006668:	3720      	adds	r7, #32
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	24000000 	.word	0x24000000

08006674 <S2PI_SetBaudRate>:

status_t S2PI_SetBaudRate(s2pi_slave_t slave, uint32_t baudRate_Bps)
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
    (void) slave; // not used in this implementation

    uint32_t prescaler = 0;
 800667e:	2300      	movs	r3, #0
 8006680:	60fb      	str	r3, [r7, #12]
    /* Determine the maximum value of the prescaler */
    for (; prescaler < 8; ++prescaler) {
 8006682:	e00c      	b.n	800669e <S2PI_SetBaudRate+0x2a>
    	const uint32_t baud = S2PI_REF_CLK >> (prescaler + 1);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	3301      	adds	r3, #1
 8006688:	4a10      	ldr	r2, [pc, #64]	@ (80066cc <S2PI_SetBaudRate+0x58>)
 800668a:	fa22 f303 	lsr.w	r3, r2, r3
 800668e:	60bb      	str	r3, [r7, #8]
        if (baud <= baudRate_Bps) {
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	429a      	cmp	r2, r3
 8006696:	d906      	bls.n	80066a6 <S2PI_SetBaudRate+0x32>
    for (; prescaler < 8; ++prescaler) {
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	3301      	adds	r3, #1
 800669c:	60fb      	str	r3, [r7, #12]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2b07      	cmp	r3, #7
 80066a2:	d9ef      	bls.n	8006684 <S2PI_SetBaudRate+0x10>
 80066a4:	e000      	b.n	80066a8 <S2PI_SetBaudRate+0x34>
            break;
 80066a6:	bf00      	nop
        }
    }

    S2PI_SET_PRESCALAR(prescaler);
 80066a8:	4b09      	ldr	r3, [pc, #36]	@ (80066d0 <S2PI_SetBaudRate+0x5c>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	071a      	lsls	r2, r3, #28
 80066b6:	4b06      	ldr	r3, [pc, #24]	@ (80066d0 <S2PI_SetBaudRate+0x5c>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	609a      	str	r2, [r3, #8]
    return STATUS_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3714      	adds	r7, #20
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	07b06240 	.word	0x07b06240
 80066d0:	240032f0 	.word	0x240032f0

080066d4 <S2PI_GetBaudRate>:

uint32_t S2PI_GetBaudRate(s2pi_slave_t slave)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
    (void) slave; // not used in this implementation
    uint32_t prescaler = S2PI_GET_PRESCALAR();
 80066dc:	4b08      	ldr	r3, [pc, #32]	@ (8006700 <S2PI_GetBaudRate+0x2c>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	0f1b      	lsrs	r3, r3, #28
 80066e4:	f003 0307 	and.w	r3, r3, #7
 80066e8:	60fb      	str	r3, [r7, #12]
    return S2PI_REF_CLK >> (prescaler + 1);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	3301      	adds	r3, #1
 80066ee:	4a05      	ldr	r2, [pc, #20]	@ (8006704 <S2PI_GetBaudRate+0x30>)
 80066f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3714      	adds	r7, #20
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr
 8006700:	240032f0 	.word	0x240032f0
 8006704:	07b06240 	.word	0x07b06240

08006708 <S2PI_GetStatus>:

status_t S2PI_GetStatus(s2pi_slave_t slave)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
    (void) slave; // not used in this implementation
    return myS2PIHnd.Status;
 8006710:	4b03      	ldr	r3, [pc, #12]	@ (8006720 <S2PI_GetStatus+0x18>)
 8006712:	681b      	ldr	r3, [r3, #0]
}
 8006714:	4618      	mov	r0, r3
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr
 8006720:	24000000 	.word	0x24000000

08006724 <S2PI_CaptureGpioControl>:

status_t S2PI_CaptureGpioControl(s2pi_slave_t slave)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
    (void) slave; // not used in this implementation

    /* Check if something is ongoing. */
    IRQ_LOCK();
 800672c:	f7ff fedc 	bl	80064e8 <IRQ_LOCK>
    status_t status = myS2PIHnd.Status;
 8006730:	4b0f      	ldr	r3, [pc, #60]	@ (8006770 <S2PI_CaptureGpioControl+0x4c>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	60fb      	str	r3, [r7, #12]
    if (status != STATUS_IDLE) {
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d003      	beq.n	8006744 <S2PI_CaptureGpioControl+0x20>
        IRQ_UNLOCK();
 800673c:	f7ff feb2 	bl	80064a4 <IRQ_UNLOCK>
        return status;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	e011      	b.n	8006768 <S2PI_CaptureGpioControl+0x44>
    }
    myS2PIHnd.Status = STATUS_S2PI_GPIO_MODE;
 8006744:	4b0a      	ldr	r3, [pc, #40]	@ (8006770 <S2PI_CaptureGpioControl+0x4c>)
 8006746:	2233      	movs	r2, #51	@ 0x33
 8006748:	601a      	str	r2, [r3, #0]
    IRQ_UNLOCK();
 800674a:	f7ff feab 	bl	80064a4 <IRQ_UNLOCK>

    /* Note: Clock must be HI after capturing */
    HAL_GPIO_WritePin(myS2PIHnd.GPIOs[S2PI_CLK].Port, myS2PIHnd.GPIOs[S2PI_CLK].Pin, GPIO_PIN_SET);
 800674e:	4b08      	ldr	r3, [pc, #32]	@ (8006770 <S2PI_CaptureGpioControl+0x4c>)
 8006750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006752:	4a07      	ldr	r2, [pc, #28]	@ (8006770 <S2PI_CaptureGpioControl+0x4c>)
 8006754:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006756:	b291      	uxth	r1, r2
 8006758:	2201      	movs	r2, #1
 800675a:	4618      	mov	r0, r3
 800675c:	f004 ff5c 	bl	800b618 <HAL_GPIO_WritePin>

    S2PI_SetGPIOMode(true);
 8006760:	2001      	movs	r0, #1
 8006762:	f7ff ff45 	bl	80065f0 <S2PI_SetGPIOMode>

    return STATUS_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	24000000 	.word	0x24000000

08006774 <S2PI_ReleaseGpioControl>:

status_t S2PI_ReleaseGpioControl(s2pi_slave_t slave)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
    (void) slave; // not used in this implementation

    /* Check if something is ongoing. */
    IRQ_LOCK();
 800677c:	f7ff feb4 	bl	80064e8 <IRQ_LOCK>
    status_t status = myS2PIHnd.Status;
 8006780:	4b0b      	ldr	r3, [pc, #44]	@ (80067b0 <S2PI_ReleaseGpioControl+0x3c>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	60fb      	str	r3, [r7, #12]
    if (status != STATUS_S2PI_GPIO_MODE)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2b33      	cmp	r3, #51	@ 0x33
 800678a:	d003      	beq.n	8006794 <S2PI_ReleaseGpioControl+0x20>
    {
        IRQ_UNLOCK();
 800678c:	f7ff fe8a 	bl	80064a4 <IRQ_UNLOCK>
        return status;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	e008      	b.n	80067a6 <S2PI_ReleaseGpioControl+0x32>
    }
    myS2PIHnd.Status = STATUS_IDLE;
 8006794:	4b06      	ldr	r3, [pc, #24]	@ (80067b0 <S2PI_ReleaseGpioControl+0x3c>)
 8006796:	2200      	movs	r2, #0
 8006798:	601a      	str	r2, [r3, #0]
    IRQ_UNLOCK();
 800679a:	f7ff fe83 	bl	80064a4 <IRQ_UNLOCK>

    S2PI_SetGPIOMode(false);
 800679e:	2000      	movs	r0, #0
 80067a0:	f7ff ff26 	bl	80065f0 <S2PI_SetGPIOMode>

    return STATUS_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	24000000 	.word	0x24000000

080067b4 <S2PI_WriteGpioPin>:

status_t S2PI_WriteGpioPin(s2pi_slave_t slave, s2pi_pin_t pin, uint32_t value)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b086      	sub	sp, #24
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	460b      	mov	r3, r1
 80067be:	607a      	str	r2, [r7, #4]
 80067c0:	72fb      	strb	r3, [r7, #11]
    /* Check if pin is valid. */
    if (pin > S2PI_IRQ || value > 1) {
 80067c2:	7afb      	ldrb	r3, [r7, #11]
 80067c4:	2b04      	cmp	r3, #4
 80067c6:	d802      	bhi.n	80067ce <S2PI_WriteGpioPin+0x1a>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d902      	bls.n	80067d4 <S2PI_WriteGpioPin+0x20>
    	return ERROR_INVALID_ARGUMENT;
 80067ce:	f06f 0304 	mvn.w	r3, #4
 80067d2:	e033      	b.n	800683c <S2PI_WriteGpioPin+0x88>
    }

    /* Check if in GPIO mode. */
    if(myS2PIHnd.Status != STATUS_S2PI_GPIO_MODE) {
 80067d4:	4b1b      	ldr	r3, [pc, #108]	@ (8006844 <S2PI_WriteGpioPin+0x90>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b33      	cmp	r3, #51	@ 0x33
 80067da:	d002      	beq.n	80067e2 <S2PI_WriteGpioPin+0x2e>
        return ERROR_S2PI_INVALID_STATE;
 80067dc:	f06f 0334 	mvn.w	r3, #52	@ 0x34
 80067e0:	e02c      	b.n	800683c <S2PI_WriteGpioPin+0x88>
    }

    if (pin == S2PI_CS) {
 80067e2:	7afb      	ldrb	r3, [r7, #11]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d113      	bne.n	8006810 <S2PI_WriteGpioPin+0x5c>
        GPIO_PinState pinState = value ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	bf14      	ite	ne
 80067ee:	2301      	movne	r3, #1
 80067f0:	2300      	moveq	r3, #0
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	75fb      	strb	r3, [r7, #23]
        switch (slave)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d106      	bne.n	800680a <S2PI_WriteGpioPin+0x56>
        {
            case S2PI_SLAVE1:
                HAL_GPIO_WritePin(S2PI_CS1_GPIO, S2PI_CS1_GPIO_PIN, pinState);
 80067fc:	7dfb      	ldrb	r3, [r7, #23]
 80067fe:	461a      	mov	r2, r3
 8006800:	2110      	movs	r1, #16
 8006802:	4811      	ldr	r0, [pc, #68]	@ (8006848 <S2PI_WriteGpioPin+0x94>)
 8006804:	f004 ff08 	bl	800b618 <HAL_GPIO_WritePin>
                break;
 8006808:	e014      	b.n	8006834 <S2PI_WriteGpioPin+0x80>
                HAL_GPIO_WritePin(S2PI_CS4_GPIO, S2PI_CS4_GPIO_PIN, pinState);
                break;
#endif /* S2PI_SLAVE_COUNT >= 4 */

            default:
                return ERROR_S2PI_INVALID_SLAVE;
 800680a:	f06f 0336 	mvn.w	r3, #54	@ 0x36
 800680e:	e015      	b.n	800683c <S2PI_WriteGpioPin+0x88>
        }
    } else {
        HAL_GPIO_WritePin(myS2PIHnd.GPIOs[pin].Port, myS2PIHnd.GPIOs[pin].Pin, value);
 8006810:	7afb      	ldrb	r3, [r7, #11]
 8006812:	4a0c      	ldr	r2, [pc, #48]	@ (8006844 <S2PI_WriteGpioPin+0x90>)
 8006814:	3305      	adds	r3, #5
 8006816:	00db      	lsls	r3, r3, #3
 8006818:	4413      	add	r3, r2
 800681a:	6858      	ldr	r0, [r3, #4]
 800681c:	7afb      	ldrb	r3, [r7, #11]
 800681e:	4a09      	ldr	r2, [pc, #36]	@ (8006844 <S2PI_WriteGpioPin+0x90>)
 8006820:	3305      	adds	r3, #5
 8006822:	00db      	lsls	r3, r3, #3
 8006824:	4413      	add	r3, r2
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	b29b      	uxth	r3, r3
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	b2d2      	uxtb	r2, r2
 800682e:	4619      	mov	r1, r3
 8006830:	f004 fef2 	bl	800b618 <HAL_GPIO_WritePin>
    }

    S2PI_GPIO_DELAY();
 8006834:	200a      	movs	r0, #10
 8006836:	f00c f871 	bl	801291c <Time_DelayUSec>

    return STATUS_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3718      	adds	r7, #24
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	24000000 	.word	0x24000000
 8006848:	58020000 	.word	0x58020000

0800684c <S2PI_ReadGpioPin>:

status_t S2PI_ReadGpioPin(s2pi_slave_t slave, s2pi_pin_t pin, uint32_t * value)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	460b      	mov	r3, r1
 8006856:	607a      	str	r2, [r7, #4]
 8006858:	72fb      	strb	r3, [r7, #11]
    /* Check if pin is valid. */
    if (pin > S2PI_IRQ || !value)
 800685a:	7afb      	ldrb	r3, [r7, #11]
 800685c:	2b04      	cmp	r3, #4
 800685e:	d802      	bhi.n	8006866 <S2PI_ReadGpioPin+0x1a>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d102      	bne.n	800686c <S2PI_ReadGpioPin+0x20>
        return ERROR_INVALID_ARGUMENT;
 8006866:	f06f 0304 	mvn.w	r3, #4
 800686a:	e031      	b.n	80068d0 <S2PI_ReadGpioPin+0x84>

    /* Check if in GPIO mode. */
    if(myS2PIHnd.Status != STATUS_S2PI_GPIO_MODE)
 800686c:	4b1a      	ldr	r3, [pc, #104]	@ (80068d8 <S2PI_ReadGpioPin+0x8c>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2b33      	cmp	r3, #51	@ 0x33
 8006872:	d002      	beq.n	800687a <S2PI_ReadGpioPin+0x2e>
        return ERROR_S2PI_INVALID_STATE;
 8006874:	f06f 0334 	mvn.w	r3, #52	@ 0x34
 8006878:	e02a      	b.n	80068d0 <S2PI_ReadGpioPin+0x84>

    if (pin == S2PI_CS) {
 800687a:	7afb      	ldrb	r3, [r7, #11]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d10e      	bne.n	800689e <S2PI_ReadGpioPin+0x52>
        switch (slave)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d108      	bne.n	8006898 <S2PI_ReadGpioPin+0x4c>
        {
            case S2PI_SLAVE1:
                *value = HAL_GPIO_ReadPin(S2PI_CS1_GPIO, S2PI_CS1_GPIO_PIN);
 8006886:	2110      	movs	r1, #16
 8006888:	4814      	ldr	r0, [pc, #80]	@ (80068dc <S2PI_ReadGpioPin+0x90>)
 800688a:	f004 fead 	bl	800b5e8 <HAL_GPIO_ReadPin>
 800688e:	4603      	mov	r3, r0
 8006890:	461a      	mov	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	601a      	str	r2, [r3, #0]
                break;
 8006896:	e017      	b.n	80068c8 <S2PI_ReadGpioPin+0x7c>
                *value = HAL_GPIO_ReadPin(S2PI_CS4_GPIO, S2PI_CS4_GPIO_PIN);
                break;
#endif /* S2PI_SLAVE_COUNT >= 4 */

            default:
                return ERROR_S2PI_INVALID_SLAVE;
 8006898:	f06f 0336 	mvn.w	r3, #54	@ 0x36
 800689c:	e018      	b.n	80068d0 <S2PI_ReadGpioPin+0x84>
        }
    } else {
        *value = HAL_GPIO_ReadPin(myS2PIHnd.GPIOs[pin].Port, myS2PIHnd.GPIOs[pin].Pin);
 800689e:	7afb      	ldrb	r3, [r7, #11]
 80068a0:	4a0d      	ldr	r2, [pc, #52]	@ (80068d8 <S2PI_ReadGpioPin+0x8c>)
 80068a2:	3305      	adds	r3, #5
 80068a4:	00db      	lsls	r3, r3, #3
 80068a6:	4413      	add	r3, r2
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	7afb      	ldrb	r3, [r7, #11]
 80068ac:	490a      	ldr	r1, [pc, #40]	@ (80068d8 <S2PI_ReadGpioPin+0x8c>)
 80068ae:	3305      	adds	r3, #5
 80068b0:	00db      	lsls	r3, r3, #3
 80068b2:	440b      	add	r3, r1
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	4619      	mov	r1, r3
 80068ba:	4610      	mov	r0, r2
 80068bc:	f004 fe94 	bl	800b5e8 <HAL_GPIO_ReadPin>
 80068c0:	4603      	mov	r3, r0
 80068c2:	461a      	mov	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	601a      	str	r2, [r3, #0]
    }

    S2PI_GPIO_DELAY();
 80068c8:	200a      	movs	r0, #10
 80068ca:	f00c f827 	bl	801291c <Time_DelayUSec>

    return STATUS_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	24000000 	.word	0x24000000
 80068dc:	58020000 	.word	0x58020000

080068e0 <S2PI_CycleCsPin>:

status_t S2PI_CycleCsPin(s2pi_slave_t slave)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
    /* Check the driver status. */
    IRQ_LOCK();
 80068e8:	f7ff fdfe 	bl	80064e8 <IRQ_LOCK>
    status_t status = myS2PIHnd.Status;
 80068ec:	4b14      	ldr	r3, [pc, #80]	@ (8006940 <S2PI_CycleCsPin+0x60>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	60fb      	str	r3, [r7, #12]
    if ( status != STATUS_IDLE ) {
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d003      	beq.n	8006900 <S2PI_CycleCsPin+0x20>
        IRQ_UNLOCK();
 80068f8:	f7ff fdd4 	bl	80064a4 <IRQ_UNLOCK>
        return status;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	e01b      	b.n	8006938 <S2PI_CycleCsPin+0x58>
    }

    myS2PIHnd.Status = STATUS_BUSY;
 8006900:	4b0f      	ldr	r3, [pc, #60]	@ (8006940 <S2PI_CycleCsPin+0x60>)
 8006902:	2202      	movs	r2, #2
 8006904:	601a      	str	r2, [r3, #0]
    IRQ_UNLOCK();
 8006906:	f7ff fdcd 	bl	80064a4 <IRQ_UNLOCK>

    status = STATUS_OK;
 800690a:	2300      	movs	r3, #0
 800690c:	60fb      	str	r3, [r7, #12]
    switch (slave)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d10a      	bne.n	800692a <S2PI_CycleCsPin+0x4a>
    {
        case S2PI_SLAVE1:
            HAL_GPIO_WritePin(S2PI_CS1_GPIO, S2PI_CS1_GPIO_PIN, GPIO_PIN_RESET);
 8006914:	2200      	movs	r2, #0
 8006916:	2110      	movs	r1, #16
 8006918:	480a      	ldr	r0, [pc, #40]	@ (8006944 <S2PI_CycleCsPin+0x64>)
 800691a:	f004 fe7d 	bl	800b618 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(S2PI_CS1_GPIO, S2PI_CS1_GPIO_PIN, GPIO_PIN_SET);
 800691e:	2201      	movs	r2, #1
 8006920:	2110      	movs	r1, #16
 8006922:	4808      	ldr	r0, [pc, #32]	@ (8006944 <S2PI_CycleCsPin+0x64>)
 8006924:	f004 fe78 	bl	800b618 <HAL_GPIO_WritePin>
            break;
 8006928:	e002      	b.n	8006930 <S2PI_CycleCsPin+0x50>
            HAL_GPIO_WritePin(S2PI_CS4_GPIO, S2PI_CS4_GPIO_PIN, GPIO_PIN_SET);
            break;
#endif /* S2PI_SLAVE_COUNT >= 4 */

        default:
            status = ERROR_S2PI_INVALID_SLAVE;
 800692a:	f06f 0336 	mvn.w	r3, #54	@ 0x36
 800692e:	60fb      	str	r3, [r7, #12]
    }

    myS2PIHnd.Status = STATUS_IDLE;
 8006930:	4b03      	ldr	r3, [pc, #12]	@ (8006940 <S2PI_CycleCsPin+0x60>)
 8006932:	2200      	movs	r2, #0
 8006934:	601a      	str	r2, [r3, #0]

    return status;
 8006936:	68fb      	ldr	r3, [r7, #12]
}
 8006938:	4618      	mov	r0, r3
 800693a:	3710      	adds	r7, #16
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	24000000 	.word	0x24000000
 8006944:	58020000 	.word	0x58020000

08006948 <S2PI_TransferFrame>:
                            uint8_t const * txData,
                            uint8_t * rxData,
                            size_t frameSize,
                            s2pi_callback_t callback,
                            void * callbackData)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
 8006954:	603b      	str	r3, [r7, #0]
    /* Verify arguments. */
    if (!txData || frameSize == 0 || frameSize > UINT16_MAX) {
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d006      	beq.n	800696a <S2PI_TransferFrame+0x22>
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <S2PI_TransferFrame+0x22>
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006968:	d302      	bcc.n	8006970 <S2PI_TransferFrame+0x28>
        return ERROR_INVALID_ARGUMENT;
 800696a:	f06f 0304 	mvn.w	r3, #4
 800696e:	e048      	b.n	8006a02 <S2PI_TransferFrame+0xba>
    }

    /* Check the driver status, lock if idle. */
    IRQ_LOCK();
 8006970:	f7ff fdba 	bl	80064e8 <IRQ_LOCK>
    status_t status = myS2PIHnd.Status;
 8006974:	4b25      	ldr	r3, [pc, #148]	@ (8006a0c <S2PI_TransferFrame+0xc4>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	613b      	str	r3, [r7, #16]
    if (status != STATUS_IDLE) {
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d003      	beq.n	8006988 <S2PI_TransferFrame+0x40>
        IRQ_UNLOCK();
 8006980:	f7ff fd90 	bl	80064a4 <IRQ_UNLOCK>
        return status;
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	e03c      	b.n	8006a02 <S2PI_TransferFrame+0xba>
    }

    myS2PIHnd.Status = STATUS_BUSY;
 8006988:	4b20      	ldr	r3, [pc, #128]	@ (8006a0c <S2PI_TransferFrame+0xc4>)
 800698a:	2202      	movs	r2, #2
 800698c:	601a      	str	r2, [r3, #0]
    IRQ_UNLOCK();
 800698e:	f7ff fd89 	bl	80064a4 <IRQ_UNLOCK>

    /* Set the callback information */
    myS2PIHnd.Callback = callback;
 8006992:	4a1e      	ldr	r2, [pc, #120]	@ (8006a0c <S2PI_TransferFrame+0xc4>)
 8006994:	6a3b      	ldr	r3, [r7, #32]
 8006996:	6093      	str	r3, [r2, #8]
    myS2PIHnd.CallbackData = callbackData;
 8006998:	4a1c      	ldr	r2, [pc, #112]	@ (8006a0c <S2PI_TransferFrame+0xc4>)
 800699a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800699c:	60d3      	str	r3, [r2, #12]

    /* Manually set the chip select (active low) */
    status = S2PI_SetSlaveInternal(slave);
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f7ff fdfe 	bl	80065a0 <S2PI_SetSlaveInternal>
 80069a4:	6138      	str	r0, [r7, #16]
    if (status == STATUS_OK) {
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d108      	bne.n	80069be <S2PI_TransferFrame+0x76>
        HAL_GPIO_WritePin(myS2PIHnd.GPIOs[S2PI_CS].Port, myS2PIHnd.GPIOs[S2PI_CS].Pin, GPIO_PIN_RESET);
 80069ac:	4b17      	ldr	r3, [pc, #92]	@ (8006a0c <S2PI_TransferFrame+0xc4>)
 80069ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069b0:	4a16      	ldr	r2, [pc, #88]	@ (8006a0c <S2PI_TransferFrame+0xc4>)
 80069b2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80069b4:	b291      	uxth	r1, r2
 80069b6:	2200      	movs	r2, #0
 80069b8:	4618      	mov	r0, r3
 80069ba:	f004 fe2d 	bl	800b618 <HAL_GPIO_WritePin>
    }

    HAL_StatusTypeDef hal_error;

    /* Lock interrupts to prevent completion interrupt before setup is complete */
    IRQ_LOCK();
 80069be:	f7ff fd93 	bl	80064e8 <IRQ_LOCK>

    if (rxData) {
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d009      	beq.n	80069dc <S2PI_TransferFrame+0x94>
        hal_error = HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t *) txData, rxData, (uint16_t) frameSize);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	68b9      	ldr	r1, [r7, #8]
 80069d0:	480f      	ldr	r0, [pc, #60]	@ (8006a10 <S2PI_TransferFrame+0xc8>)
 80069d2:	f007 fe1d 	bl	800e610 <HAL_SPI_TransmitReceive_DMA>
 80069d6:	4603      	mov	r3, r0
 80069d8:	75fb      	strb	r3, [r7, #23]
 80069da:	e008      	b.n	80069ee <S2PI_TransferFrame+0xa6>
    } else {
        hal_error = HAL_SPI_Transmit_DMA(&hspi1, (uint8_t *) txData, (uint16_t) frameSize);
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	b29b      	uxth	r3, r3
 80069e0:	461a      	mov	r2, r3
 80069e2:	68b9      	ldr	r1, [r7, #8]
 80069e4:	480a      	ldr	r0, [pc, #40]	@ (8006a10 <S2PI_TransferFrame+0xc8>)
 80069e6:	f007 fcd1 	bl	800e38c <HAL_SPI_Transmit_DMA>
 80069ea:	4603      	mov	r3, r0
 80069ec:	75fb      	strb	r3, [r7, #23]
    }

    IRQ_UNLOCK();
 80069ee:	f7ff fd59 	bl	80064a4 <IRQ_UNLOCK>

    if (hal_error != HAL_OK) {
 80069f2:	7dfb      	ldrb	r3, [r7, #23]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d003      	beq.n	8006a00 <S2PI_TransferFrame+0xb8>
        //return ERROR_FAIL;
        return -1000-hal_error;
 80069f8:	7dfa      	ldrb	r2, [r7, #23]
 80069fa:	4b06      	ldr	r3, [pc, #24]	@ (8006a14 <S2PI_TransferFrame+0xcc>)
 80069fc:	1a9b      	subs	r3, r3, r2
 80069fe:	e000      	b.n	8006a02 <S2PI_TransferFrame+0xba>
    }

    return status;
 8006a00:	693b      	ldr	r3, [r7, #16]
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3718      	adds	r7, #24
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	24000000 	.word	0x24000000
 8006a10:	240032f0 	.word	0x240032f0
 8006a14:	fffffc18 	.word	0xfffffc18

08006a18 <S2PI_CompleteTransfer>:
 *          for the next transfer, if required.
 * @param   status The status to be provided to the callback funcition.
 * @return  Returns the status received from the callback function
 ****************************************************************************/
static inline status_t S2PI_CompleteTransfer(status_t status)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
    myS2PIHnd.Status = STATUS_IDLE;
 8006a20:	4b10      	ldr	r3, [pc, #64]	@ (8006a64 <S2PI_CompleteTransfer+0x4c>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	601a      	str	r2, [r3, #0]

    /* Deactivate CS (set high), as we use GPIO pin */
    HAL_GPIO_WritePin(myS2PIHnd.GPIOs[S2PI_CS].Port, myS2PIHnd.GPIOs[S2PI_CS].Pin, GPIO_PIN_SET);
 8006a26:	4b0f      	ldr	r3, [pc, #60]	@ (8006a64 <S2PI_CompleteTransfer+0x4c>)
 8006a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a2a:	4a0e      	ldr	r2, [pc, #56]	@ (8006a64 <S2PI_CompleteTransfer+0x4c>)
 8006a2c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006a2e:	b291      	uxth	r1, r2
 8006a30:	2201      	movs	r2, #1
 8006a32:	4618      	mov	r0, r3
 8006a34:	f004 fdf0 	bl	800b618 <HAL_GPIO_WritePin>

    /* Invoke callback if there is one */
    if (myS2PIHnd.Callback != 0) {
 8006a38:	4b0a      	ldr	r3, [pc, #40]	@ (8006a64 <S2PI_CompleteTransfer+0x4c>)
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00c      	beq.n	8006a5a <S2PI_CompleteTransfer+0x42>
        s2pi_callback_t callback = myS2PIHnd.Callback;
 8006a40:	4b08      	ldr	r3, [pc, #32]	@ (8006a64 <S2PI_CompleteTransfer+0x4c>)
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	60fb      	str	r3, [r7, #12]
        myS2PIHnd.Callback = 0;
 8006a46:	4b07      	ldr	r3, [pc, #28]	@ (8006a64 <S2PI_CompleteTransfer+0x4c>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	609a      	str	r2, [r3, #8]
        status = callback(status, myS2PIHnd.CallbackData);
 8006a4c:	4b05      	ldr	r3, [pc, #20]	@ (8006a64 <S2PI_CompleteTransfer+0x4c>)
 8006a4e:	68da      	ldr	r2, [r3, #12]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	4611      	mov	r1, r2
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	4798      	blx	r3
 8006a58:	6078      	str	r0, [r7, #4]
    }

    return status;
 8006a5a:	687b      	ldr	r3, [r7, #4]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	24000000 	.word	0x24000000

08006a68 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *         the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
    S2PI_CompleteTransfer(STATUS_OK);
 8006a70:	2000      	movs	r0, #0
 8006a72:	f7ff ffd1 	bl	8006a18 <S2PI_CompleteTransfer>
}
 8006a76:	bf00      	nop
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <SPI_DMATransmitReceiveCpltDelayed>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
void SPI_DMATransmitReceiveCpltDelayed(DMA_HandleTypeDef *hdma)
{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b084      	sub	sp, #16
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
    SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a8a:	60fb      	str	r3, [r7, #12]
    HAL_SPI_TxCpltCallback(hspi);
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f7ff ffeb 	bl	8006a68 <HAL_SPI_TxCpltCallback>
}
 8006a92:	bf00      	nop
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
	...

08006a9c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
    /* The problem we have here is that the next SPI transfer is set up in the interrupt.
     * The default implementation always connects this callback with the RX DMA complete interrupt.
     * However, the order of TX and RX interrupts is not specified.
     * If we perform the callback before both interrupts are done, the next SPI transfer will fail. */
    if ( hspi->hdmatx->Lock == HAL_UNLOCKED ) { /* TX Interrupt already received */
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006aa8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d103      	bne.n	8006ab8 <HAL_SPI_TxRxCpltCallback+0x1c>
        HAL_SPI_TxCpltCallback(hspi);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f7ff ffd9 	bl	8006a68 <HAL_SPI_TxCpltCallback>
    } else { /* There is still the TX DMA Interrupt we have to wait for */
        hspi->hdmatx->XferCpltCallback = SPI_DMATransmitReceiveCpltDelayed;
    }
}
 8006ab6:	e003      	b.n	8006ac0 <HAL_SPI_TxRxCpltCallback+0x24>
        hspi->hdmatx->XferCpltCallback = SPI_DMATransmitReceiveCpltDelayed;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006abc:	4a02      	ldr	r2, [pc, #8]	@ (8006ac8 <HAL_SPI_TxRxCpltCallback+0x2c>)
 8006abe:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8006ac0:	bf00      	nop
 8006ac2:	3708      	adds	r7, #8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	08006a7f 	.word	0x08006a7f

08006acc <S2PI_TryGetMutex>:

status_t S2PI_TryGetMutex(s2pi_slave_t slave)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
    (void) slave; // not used in this implementation

    status_t retVal;

    IRQ_LOCK();
 8006ad4:	f7ff fd08 	bl	80064e8 <IRQ_LOCK>
    if (!myS2PIHnd.SpiMutexBlocked) {
 8006ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8006b0c <S2PI_TryGetMutex+0x40>)
 8006ada:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	f083 0301 	eor.w	r3, r3, #1
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d006      	beq.n	8006af8 <S2PI_TryGetMutex+0x2c>
        myS2PIHnd.SpiMutexBlocked = true;
 8006aea:	4b08      	ldr	r3, [pc, #32]	@ (8006b0c <S2PI_TryGetMutex+0x40>)
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        retVal = STATUS_OK;
 8006af2:	2300      	movs	r3, #0
 8006af4:	60fb      	str	r3, [r7, #12]
 8006af6:	e001      	b.n	8006afc <S2PI_TryGetMutex+0x30>
    } else {
        retVal = STATUS_BUSY;
 8006af8:	2302      	movs	r3, #2
 8006afa:	60fb      	str	r3, [r7, #12]
    }
    IRQ_UNLOCK();
 8006afc:	f7ff fcd2 	bl	80064a4 <IRQ_UNLOCK>

    return retVal;
 8006b00:	68fb      	ldr	r3, [r7, #12]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	24000000 	.word	0x24000000

08006b10 <S2PI_ReleaseMutex>:

void S2PI_ReleaseMutex(s2pi_slave_t slave)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
    (void) slave; // not used in this implementation

    myS2PIHnd.SpiMutexBlocked = false;
 8006b18:	4b04      	ldr	r3, [pc, #16]	@ (8006b2c <S2PI_ReleaseMutex+0x1c>)
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	24000000 	.word	0x24000000

08006b30 <S2PI_Abort>:

status_t S2PI_Abort(s2pi_slave_t slave)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
    (void) slave; // not used in this implementation

    status_t status = myS2PIHnd.Status;
 8006b38:	4b10      	ldr	r3, [pc, #64]	@ (8006b7c <S2PI_Abort+0x4c>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	60fb      	str	r3, [r7, #12]

    /* Check if something is ongoing. */
    if(status == STATUS_IDLE) {
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d101      	bne.n	8006b48 <S2PI_Abort+0x18>
        return STATUS_OK;
 8006b44:	2300      	movs	r3, #0
 8006b46:	e014      	b.n	8006b72 <S2PI_Abort+0x42>
    }

    /* Abort SPI transfer. */
    if(status == STATUS_BUSY) {
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d105      	bne.n	8006b5a <S2PI_Abort+0x2a>
        HAL_SPI_Abort(&hspi1);
 8006b4e:	480c      	ldr	r0, [pc, #48]	@ (8006b80 <S2PI_Abort+0x50>)
 8006b50:	f007 ff04 	bl	800e95c <HAL_SPI_Abort>
        myS2PIHnd.Status = STATUS_IDLE;
 8006b54:	4b09      	ldr	r3, [pc, #36]	@ (8006b7c <S2PI_Abort+0x4c>)
 8006b56:	2200      	movs	r2, #0
 8006b58:	601a      	str	r2, [r3, #0]
    }

    status = S2PI_CompleteTransfer(ERROR_ABORTED);
 8006b5a:	f06f 0001 	mvn.w	r0, #1
 8006b5e:	f7ff ff5b 	bl	8006a18 <S2PI_CompleteTransfer>
 8006b62:	60f8      	str	r0, [r7, #12]
    if(status == ERROR_ABORTED) status = STATUS_OK;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f113 0f02 	cmn.w	r3, #2
 8006b6a:	d101      	bne.n	8006b70 <S2PI_Abort+0x40>
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	60fb      	str	r3, [r7, #12]

    return STATUS_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	24000000 	.word	0x24000000
 8006b80:	240032f0 	.word	0x240032f0

08006b84 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
    S2PI_CompleteTransfer(ERROR_FAIL);
 8006b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b90:	f7ff ff42 	bl	8006a18 <S2PI_CompleteTransfer>
}
 8006b94:	bf00      	nop
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <S2PI_SetIrqCallback>:

status_t S2PI_SetIrqCallback(s2pi_slave_t slave,
                             s2pi_irq_callback_t callback,
                             void * callbackData)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	607a      	str	r2, [r7, #4]
    if (slave > S2PI_SLAVE_COUNT) {
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	dd02      	ble.n	8006bb4 <S2PI_SetIrqCallback+0x18>
        return ERROR_S2PI_INVALID_SLAVE;
 8006bae:	f06f 0336 	mvn.w	r3, #54	@ 0x36
 8006bb2:	e00c      	b.n	8006bce <S2PI_SetIrqCallback+0x32>
    }

    myS2PIHnd.IrqCallback[slave] = callback;
 8006bb4:	4909      	ldr	r1, [pc, #36]	@ (8006bdc <S2PI_SetIrqCallback+0x40>)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	3304      	adds	r3, #4
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    myS2PIHnd.IrqCallbackData[slave] = callbackData;
 8006bc0:	4906      	ldr	r1, [pc, #24]	@ (8006bdc <S2PI_SetIrqCallback+0x40>)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	3306      	adds	r3, #6
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return STATUS_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	24000000 	.word	0x24000000

08006be0 <S2PI_ReadIrqPin>:

uint32_t S2PI_ReadIrqPin(s2pi_slave_t slave)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
    /* NOTE: this must return 0 if an interrupt is pending, i.e. if
     * the interrupt is pending AND the pin is in low state. */
    switch (slave)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d111      	bne.n	8006c12 <S2PI_ReadIrqPin+0x32>
    {
        case S2PI_SLAVE1:
            return !(HAL_NVIC_GetPendingIRQ(S2PI_IRQ1_EXTI)
 8006bee:	2028      	movs	r0, #40	@ 0x28
 8006bf0:	f001 fcfe 	bl	80085f0 <HAL_NVIC_GetPendingIRQ>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d007      	beq.n	8006c0a <S2PI_ReadIrqPin+0x2a>
                     && !HAL_GPIO_ReadPin(S2PI_IRQ1_GPIO, S2PI_IRQ1_GPIO_PIN));
 8006bfa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006bfe:	4807      	ldr	r0, [pc, #28]	@ (8006c1c <S2PI_ReadIrqPin+0x3c>)
 8006c00:	f004 fcf2 	bl	800b5e8 <HAL_GPIO_ReadPin>
 8006c04:	4603      	mov	r3, r0
            return !(HAL_NVIC_GetPendingIRQ(S2PI_IRQ1_EXTI)
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <S2PI_ReadIrqPin+0x2e>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e002      	b.n	8006c14 <S2PI_ReadIrqPin+0x34>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	e000      	b.n	8006c14 <S2PI_ReadIrqPin+0x34>
            return !(HAL_NVIC_GetPendingIRQ(S2PI_IRQ4_EXTI)
                     && !HAL_GPIO_ReadPin(S2PI_IRQ4_GPIO, S2PI_IRQ4_GPIO_PIN));
#endif /* S2PI_SLAVE_COUNT >= 4 */

        default:
            return 1U;
 8006c12:	2301      	movs	r3, #1
    }
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3708      	adds	r7, #8
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	58020400 	.word	0x58020400

08006c20 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	4603      	mov	r3, r0
 8006c28:	80fb      	strh	r3, [r7, #6]
    for (uint_fast8_t slaveID = 1; slaveID <= S2PI_SLAVE_COUNT; slaveID++)
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	617b      	str	r3, [r7, #20]
 8006c2e:	e01d      	b.n	8006c6c <HAL_GPIO_EXTI_Callback+0x4c>
    {
        if (GPIO_Pin == myS2PIHnd.SlaveIrqMapping[slaveID])
 8006c30:	88fa      	ldrh	r2, [r7, #6]
 8006c32:	4912      	ldr	r1, [pc, #72]	@ (8006c7c <HAL_GPIO_EXTI_Callback+0x5c>)
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	3308      	adds	r3, #8
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	440b      	add	r3, r1
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d111      	bne.n	8006c66 <HAL_GPIO_EXTI_Callback+0x46>
        {
            /* Interrupt for slaveID has been fired */
            s2pi_irq_callback_t cb = myS2PIHnd.IrqCallback[slaveID];
 8006c42:	4a0e      	ldr	r2, [pc, #56]	@ (8006c7c <HAL_GPIO_EXTI_Callback+0x5c>)
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	3304      	adds	r3, #4
 8006c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c4c:	613b      	str	r3, [r7, #16]
            void * cbParam = myS2PIHnd.IrqCallbackData[slaveID];
 8006c4e:	4a0b      	ldr	r2, [pc, #44]	@ (8006c7c <HAL_GPIO_EXTI_Callback+0x5c>)
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	3306      	adds	r3, #6
 8006c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c58:	60fb      	str	r3, [r7, #12]

            if (cb) {
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d002      	beq.n	8006c66 <HAL_GPIO_EXTI_Callback+0x46>
                /* Invoke corresponding callback */
                cb(cbParam);
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	4798      	blx	r3
    for (uint_fast8_t slaveID = 1; slaveID <= S2PI_SLAVE_COUNT; slaveID++)
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	617b      	str	r3, [r7, #20]
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d9de      	bls.n	8006c30 <HAL_GPIO_EXTI_Callback+0x10>
            }
        }
    }
}
 8006c72:	bf00      	nop
 8006c74:	bf00      	nop
 8006c76:	3718      	adds	r7, #24
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	24000000 	.word	0x24000000

08006c80 <Timer_Init>:
/*!***************************************************************************
 * @brief   Initializes the timer hardware.
 * @return  -
 *****************************************************************************/
void Timer_Init(void)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	af00      	add	r7, sp, #0
    /* Start the timers relevant for the LTC */
    HAL_TIM_Base_Start(LTC_TIMER);
 8006c84:	4808      	ldr	r0, [pc, #32]	@ (8006ca8 <Timer_Init+0x28>)
 8006c86:	f008 fb63 	bl	800f350 <HAL_TIM_Base_Start>

    PIT_TIMER_FREEZE_ON_DEBUG();
 8006c8a:	4b08      	ldr	r3, [pc, #32]	@ (8006cac <Timer_Init+0x2c>)
 8006c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c8e:	4a07      	ldr	r2, [pc, #28]	@ (8006cac <Timer_Init+0x2c>)
 8006c90:	f043 0310 	orr.w	r3, r3, #16
 8006c94:	63d3      	str	r3, [r2, #60]	@ 0x3c
	LTC_TIMER_FREEZE_ON_DEBUG();
 8006c96:	4b05      	ldr	r3, [pc, #20]	@ (8006cac <Timer_Init+0x2c>)
 8006c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c9a:	4a04      	ldr	r2, [pc, #16]	@ (8006cac <Timer_Init+0x2c>)
 8006c9c:	f043 0308 	orr.w	r3, r3, #8
 8006ca0:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8006ca2:	bf00      	nop
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	2400346c 	.word	0x2400346c
 8006cac:	5c001000 	.word	0x5c001000

08006cb0 <Timer_GetCounterValue>:
 * @param   lct A pointer to the low counter value bits representing current
 *                time in microseconds. Range: 0, .., 999999 µsec
 * @return  -
 *****************************************************************************/
void Timer_GetCounterValue(uint32_t * hct, uint32_t * lct)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
//    }
//    while (*lct > __HAL_TIM_GET_COUNTER(&htim2));


	// Shpegun60 optimization on one timer warning!!!!  it wraps after 4294.967296 seconds,
	const uint32_t cnt = __HAL_TIM_GET_COUNTER(LTC_TIMER);
 8006cba:	4b0e      	ldr	r3, [pc, #56]	@ (8006cf4 <Timer_GetCounterValue+0x44>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc0:	60fb      	str	r3, [r7, #12]
	*lct = cnt % 1000000U;
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8006cf8 <Timer_GetCounterValue+0x48>)
 8006cc6:	fba3 1302 	umull	r1, r3, r3, r2
 8006cca:	0c9b      	lsrs	r3, r3, #18
 8006ccc:	490b      	ldr	r1, [pc, #44]	@ (8006cfc <Timer_GetCounterValue+0x4c>)
 8006cce:	fb01 f303 	mul.w	r3, r1, r3
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	6013      	str	r3, [r2, #0]
	*hct = cnt / 1000000U;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	4a07      	ldr	r2, [pc, #28]	@ (8006cf8 <Timer_GetCounterValue+0x48>)
 8006cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce0:	0c9a      	lsrs	r2, r3, #18
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	601a      	str	r2, [r3, #0]
}
 8006ce6:	bf00      	nop
 8006ce8:	3714      	adds	r7, #20
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	2400346c 	.word	0x2400346c
 8006cf8:	431bde83 	.word	0x431bde83
 8006cfc:	000f4240 	.word	0x000f4240

08006d00 <Timer_SetInterval>:
 * @param   param An abstract parameter to be passed to the callback. This is
 *                  also the identifier of the given interval.
 * @return  Returns the \link #status_t status\endlink (#STATUS_OK on success).
 *****************************************************************************/
status_t Timer_SetInterval(uint32_t dt_microseconds, void * param)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
    assert(dt_microseconds == 0 || dt_microseconds > 100);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d008      	beq.n	8006d22 <Timer_SetInterval+0x22>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b64      	cmp	r3, #100	@ 0x64
 8006d14:	d805      	bhi.n	8006d22 <Timer_SetInterval+0x22>
 8006d16:	4b2d      	ldr	r3, [pc, #180]	@ (8006dcc <Timer_SetInterval+0xcc>)
 8006d18:	4a2d      	ldr	r2, [pc, #180]	@ (8006dd0 <Timer_SetInterval+0xd0>)
 8006d1a:	2180      	movs	r1, #128	@ 0x80
 8006d1c:	482d      	ldr	r0, [pc, #180]	@ (8006dd4 <Timer_SetInterval+0xd4>)
 8006d1e:	f000 fb4f 	bl	80073c0 <__assert_func>

    /* Disable interrupt and timer */
    callback_param_ = 0;
 8006d22:	4b2d      	ldr	r3, [pc, #180]	@ (8006dd8 <Timer_SetInterval+0xd8>)
 8006d24:	2200      	movs	r2, #0
 8006d26:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Stop_IT(PIT_TIMER);
 8006d28:	482c      	ldr	r0, [pc, #176]	@ (8006ddc <Timer_SetInterval+0xdc>)
 8006d2a:	f008 fc15 	bl	800f558 <HAL_TIM_Base_Stop_IT>
    __HAL_TIM_CLEAR_IT(PIT_TIMER, TIM_IT_UPDATE);
 8006d2e:	4b2b      	ldr	r3, [pc, #172]	@ (8006ddc <Timer_SetInterval+0xdc>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f06f 0201 	mvn.w	r2, #1
 8006d36:	611a      	str	r2, [r3, #16]

    if (dt_microseconds) {
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d041      	beq.n	8006dc2 <Timer_SetInterval+0xc2>
        /* Determine the prescaler and counter period values such that
         * the period fits into 16-bits. */
        uint32_t prescaler = (PIT_TIMER_BUS_CLK() / 1000000U);
 8006d3e:	f005 fc13 	bl	800c568 <HAL_RCC_GetPCLK1Freq>
 8006d42:	4603      	mov	r3, r0
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	4a26      	ldr	r2, [pc, #152]	@ (8006de0 <Timer_SetInterval+0xe0>)
 8006d48:	fba2 2303 	umull	r2, r3, r2, r3
 8006d4c:	0c9b      	lsrs	r3, r3, #18
 8006d4e:	60fb      	str	r3, [r7, #12]
        uint32_t period = dt_microseconds;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	60bb      	str	r3, [r7, #8]

        while (period > 0xFFFF) {
 8006d54:	e005      	b.n	8006d62 <Timer_SetInterval+0x62>
            period >>= 1U;
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	085b      	lsrs	r3, r3, #1
 8006d5a:	60bb      	str	r3, [r7, #8]
            prescaler <<= 1U;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	005b      	lsls	r3, r3, #1
 8006d60:	60fb      	str	r3, [r7, #12]
        while (period > 0xFFFF) {
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d68:	d2f5      	bcs.n	8006d56 <Timer_SetInterval+0x56>
        }

        assert(prescaler < 0x10000U);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d70:	d305      	bcc.n	8006d7e <Timer_SetInterval+0x7e>
 8006d72:	4b1c      	ldr	r3, [pc, #112]	@ (8006de4 <Timer_SetInterval+0xe4>)
 8006d74:	4a16      	ldr	r2, [pc, #88]	@ (8006dd0 <Timer_SetInterval+0xd0>)
 8006d76:	2192      	movs	r1, #146	@ 0x92
 8006d78:	4816      	ldr	r0, [pc, #88]	@ (8006dd4 <Timer_SetInterval+0xd4>)
 8006d7a:	f000 fb21 	bl	80073c0 <__assert_func>

        /* Set prescaler and period values and reset counter. */
        __HAL_TIM_SET_PRESCALER(PIT_TIMER, prescaler - 1);
 8006d7e:	4b17      	ldr	r3, [pc, #92]	@ (8006ddc <Timer_SetInterval+0xdc>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	3a01      	subs	r2, #1
 8006d86:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(PIT_TIMER, period - 1);
 8006d88:	4b14      	ldr	r3, [pc, #80]	@ (8006ddc <Timer_SetInterval+0xdc>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	3a01      	subs	r2, #1
 8006d90:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	3b01      	subs	r3, #1
 8006d96:	4a11      	ldr	r2, [pc, #68]	@ (8006ddc <Timer_SetInterval+0xdc>)
 8006d98:	60d3      	str	r3, [r2, #12]
        __HAL_TIM_SET_COUNTER(PIT_TIMER, period - 1);
 8006d9a:	4b10      	ldr	r3, [pc, #64]	@ (8006ddc <Timer_SetInterval+0xdc>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	3a01      	subs	r2, #1
 8006da2:	625a      	str	r2, [r3, #36]	@ 0x24
        /* The following generates an update event that triggers and update
         * of the auto-reload into the internal shadow registers. This is
         * required to update the timer configuration before the next update
         * event (i.e. under/overflow). Unfortunately this also generates
         * and immediate interrupt which is cleared in the next statement. */
        HAL_TIM_GenerateEvent(PIT_TIMER, TIM_EVENTSOURCE_UPDATE);
 8006da4:	2101      	movs	r1, #1
 8006da6:	480d      	ldr	r0, [pc, #52]	@ (8006ddc <Timer_SetInterval+0xdc>)
 8006da8:	f008 fd0c 	bl	800f7c4 <HAL_TIM_GenerateEvent>
        __HAL_TIM_CLEAR_IT(PIT_TIMER, TIM_IT_UPDATE); // clear interrupt
 8006dac:	4b0b      	ldr	r3, [pc, #44]	@ (8006ddc <Timer_SetInterval+0xdc>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f06f 0201 	mvn.w	r2, #1
 8006db4:	611a      	str	r2, [r3, #16]

        /* Enable interrupt and timer */
        callback_param_ = param;
 8006db6:	4a08      	ldr	r2, [pc, #32]	@ (8006dd8 <Timer_SetInterval+0xd8>)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	6013      	str	r3, [r2, #0]
        HAL_TIM_Base_Start_IT(PIT_TIMER);
 8006dbc:	4807      	ldr	r0, [pc, #28]	@ (8006ddc <Timer_SetInterval+0xdc>)
 8006dbe:	f008 fb45 	bl	800f44c <HAL_TIM_Base_Start_IT>
    }

    return STATUS_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	0802c1e4 	.word	0x0802c1e4
 8006dd0:	0802c9d4 	.word	0x0802c9d4
 8006dd4:	0802c214 	.word	0x0802c214
 8006dd8:	240031cc 	.word	0x240031cc
 8006ddc:	240034b8 	.word	0x240034b8
 8006de0:	431bde83 	.word	0x431bde83
 8006de4:	0802c230 	.word	0x0802c230

08006de8 <Timer_SetCallback>:
 *          Passing a zero-pointer removes and disables the callback.
 * @param   f The timer callback function.
 * @return  Returns the \link #status_t status\endlink (#STATUS_OK on success).
 *****************************************************************************/
status_t Timer_SetCallback(timer_cb_t f)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
    timer_callback_ = f;
 8006df0:	4a04      	ldr	r2, [pc, #16]	@ (8006e04 <Timer_SetCallback+0x1c>)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6013      	str	r3, [r2, #0]
    return STATUS_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr
 8006e04:	240031d0 	.word	0x240031d0

08006e08 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
    /* Trigger callback if the interrupt belongs to TIM4 and there is a callback */
    if ((htim == PIT_TIMER) && timer_callback_)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a08      	ldr	r2, [pc, #32]	@ (8006e34 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d109      	bne.n	8006e2c <HAL_TIM_PeriodElapsedCallback+0x24>
 8006e18:	4b07      	ldr	r3, [pc, #28]	@ (8006e38 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d005      	beq.n	8006e2c <HAL_TIM_PeriodElapsedCallback+0x24>
    {
        timer_callback_(callback_param_);
 8006e20:	4b05      	ldr	r3, [pc, #20]	@ (8006e38 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a05      	ldr	r2, [pc, #20]	@ (8006e3c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8006e26:	6812      	ldr	r2, [r2, #0]
 8006e28:	4610      	mov	r0, r2
 8006e2a:	4798      	blx	r3
    }
}
 8006e2c:	bf00      	nop
 8006e2e:	3708      	adds	r7, #8
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	240034b8 	.word	0x240034b8
 8006e38:	240031d0 	.word	0x240031d0
 8006e3c:	240031cc 	.word	0x240031cc

08006e40 <UART_Init>:
 *          (UART or LPSCI) bus and DMA module
 * @param   -
 * @return  Returns the \link #status_t status\endlink (#STATUS_OK on success).
 *****************************************************************************/
status_t UART_Init(void)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(ARGUS_UART, rxBuffer1, RX_BUFFER_SIZE);
 8006e44:	2280      	movs	r2, #128	@ 0x80
 8006e46:	4905      	ldr	r1, [pc, #20]	@ (8006e5c <UART_Init+0x1c>)
 8006e48:	4805      	ldr	r0, [pc, #20]	@ (8006e60 <UART_Init+0x20>)
 8006e4a:	f009 f8dd 	bl	8010008 <HAL_UART_Receive_DMA>
	UART_SetRxCallback(0);
 8006e4e:	2000      	movs	r0, #0
 8006e50:	f000 f8fe 	bl	8007050 <UART_SetRxCallback>

	return STATUS_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	240031e8 	.word	0x240031e8
 8006e60:	24003504 	.word	0x24003504

08006e64 <UART_GetBaudRate>:
#if !NO_DIRECT_UART_PRINT
#define UART_Print print
#endif

uart_baud_rates_t UART_GetBaudRate(void)
{
 8006e64:	b480      	push	{r7}
 8006e66:	af00      	add	r7, sp, #0
	return ARGUS_UART->Init.BaudRate;
 8006e68:	4b03      	ldr	r3, [pc, #12]	@ (8006e78 <UART_GetBaudRate+0x14>)
 8006e6a:	685b      	ldr	r3, [r3, #4]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	24003504 	.word	0x24003504

08006e7c <UART_CheckBaudRate>:
status_t UART_CheckBaudRate(uart_baud_rates_t baudRate)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
	if (!IS_UART_BAUDRATE(baudRate)) {
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a14      	ldr	r2, [pc, #80]	@ (8006ed8 <UART_CheckBaudRate+0x5c>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d902      	bls.n	8006e92 <UART_CheckBaudRate+0x16>
		return ERROR_UART_BAUDRATE_NOT_SUPPORTED;
 8006e8c:	f06f 0346 	mvn.w	r3, #70	@ 0x46
 8006e90:	e01b      	b.n	8006eca <UART_CheckBaudRate+0x4e>
	}

	switch (baudRate)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a11      	ldr	r2, [pc, #68]	@ (8006edc <UART_CheckBaudRate+0x60>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d013      	beq.n	8006ec2 <UART_CheckBaudRate+0x46>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a0f      	ldr	r2, [pc, #60]	@ (8006edc <UART_CheckBaudRate+0x60>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d811      	bhi.n	8006ec6 <UART_CheckBaudRate+0x4a>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a0e      	ldr	r2, [pc, #56]	@ (8006ee0 <UART_CheckBaudRate+0x64>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d00b      	beq.n	8006ec2 <UART_CheckBaudRate+0x46>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a0c      	ldr	r2, [pc, #48]	@ (8006ee0 <UART_CheckBaudRate+0x64>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d809      	bhi.n	8006ec6 <UART_CheckBaudRate+0x4a>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8006eb8:	d003      	beq.n	8006ec2 <UART_CheckBaudRate+0x46>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a09      	ldr	r2, [pc, #36]	@ (8006ee4 <UART_CheckBaudRate+0x68>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d101      	bne.n	8006ec6 <UART_CheckBaudRate+0x4a>
	{
	case UART_115200_BPS:
	case UART_500000_BPS:
	case UART_1000000_BPS:
	case UART_2000000_BPS:
		return STATUS_OK;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	e001      	b.n	8006eca <UART_CheckBaudRate+0x4e>

	case UART_INVALID_BPS:
	default:
		return ERROR_UART_BAUDRATE_NOT_SUPPORTED;
 8006ec6:	f06f 0346 	mvn.w	r3, #70	@ 0x46
	}
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	370c      	adds	r7, #12
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	00bebc20 	.word	0x00bebc20
 8006edc:	001e8480 	.word	0x001e8480
 8006ee0:	000f4240 	.word	0x000f4240
 8006ee4:	0007a120 	.word	0x0007a120

08006ee8 <UART_SetBaudRate>:
status_t UART_SetBaudRate(uart_baud_rates_t baudRate)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
	status_t status = UART_CheckBaudRate(baudRate);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f7ff ffc3 	bl	8006e7c <UART_CheckBaudRate>
 8006ef6:	60f8      	str	r0, [r7, #12]
	if (status != STATUS_OK) return status;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d001      	beq.n	8006f02 <UART_SetBaudRate+0x1a>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	e022      	b.n	8006f48 <UART_SetBaudRate+0x60>

	/* Check module state; TX line must be idle to rest baud rate... */
	IRQ_LOCK();
 8006f02:	f7ff faf1 	bl	80064e8 <IRQ_LOCK>
	if (isTxBusy_)
 8006f06:	4b12      	ldr	r3, [pc, #72]	@ (8006f50 <UART_SetBaudRate+0x68>)
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d003      	beq.n	8006f18 <UART_SetBaudRate+0x30>
	{
		IRQ_UNLOCK();
 8006f10:	f7ff fac8 	bl	80064a4 <IRQ_UNLOCK>
		return STATUS_BUSY;
 8006f14:	2302      	movs	r3, #2
 8006f16:	e017      	b.n	8006f48 <UART_SetBaudRate+0x60>
	}
	isTxBusy_ = true;
 8006f18:	4b0d      	ldr	r3, [pc, #52]	@ (8006f50 <UART_SetBaudRate+0x68>)
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	701a      	strb	r2, [r3, #0]
	IRQ_UNLOCK();
 8006f1e:	f7ff fac1 	bl	80064a4 <IRQ_UNLOCK>

	/* remove callback and disable RX line. */
	uart_rx_callback_t callback = rxCallback_;
 8006f22:	4b0c      	ldr	r3, [pc, #48]	@ (8006f54 <UART_SetBaudRate+0x6c>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	60bb      	str	r3, [r7, #8]
	UART_SetRxCallback(0);
 8006f28:	2000      	movs	r0, #0
 8006f2a:	f000 f891 	bl	8007050 <UART_SetRxCallback>

	/* Obtain correct baud rate setting value. */
	ARGUS_UART->Init.BaudRate = baudRate;
 8006f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8006f58 <UART_SetBaudRate+0x70>)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6053      	str	r3, [r2, #4]
	HAL_UART_Init(ARGUS_UART);
 8006f34:	4808      	ldr	r0, [pc, #32]	@ (8006f58 <UART_SetBaudRate+0x70>)
 8006f36:	f008 ff97 	bl	800fe68 <HAL_UART_Init>

	/* Add callback and enable RX line again. */
	UART_SetRxCallback(callback);
 8006f3a:	68b8      	ldr	r0, [r7, #8]
 8006f3c:	f000 f888 	bl	8007050 <UART_SetRxCallback>

	isTxBusy_ = false;
 8006f40:	4b03      	ldr	r3, [pc, #12]	@ (8006f50 <UART_SetBaudRate+0x68>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3710      	adds	r7, #16
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	240031d4 	.word	0x240031d4
 8006f54:	240031e0 	.word	0x240031e0
 8006f58:	24003504 	.word	0x24003504

08006f5c <UART_IsTxBusy>:

bool UART_IsTxBusy(void)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	af00      	add	r7, sp, #0
	return isTxBusy_;
 8006f60:	4b03      	ldr	r3, [pc, #12]	@ (8006f70 <UART_IsTxBusy+0x14>)
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	b2db      	uxtb	r3, r3
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr
 8006f70:	240031d4 	.word	0x240031d4

08006f74 <UART_SendBuffer>:
 *           - #STATUS_BUSY on Tx line busy
 *           - #ERROR_NOT_INITIALIZED
 *           - #ERROR_INVALID_ARGUMENT
 *****************************************************************************/
status_t UART_SendBuffer(uint8_t const *txBuff, size_t txSize, uart_tx_callback_t f, void *state)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b086      	sub	sp, #24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
 8006f80:	603b      	str	r3, [r7, #0]
	/* Verify arguments. */
	if (!txBuff || txSize == 0)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d002      	beq.n	8006f8e <UART_SendBuffer+0x1a>
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d102      	bne.n	8006f94 <UART_SendBuffer+0x20>
		return ERROR_INVALID_ARGUMENT;
 8006f8e:	f06f 0304 	mvn.w	r3, #4
 8006f92:	e026      	b.n	8006fe2 <UART_SendBuffer+0x6e>

	/* Lock interrupts to prevent completion interrupt before setup is complete */
	IRQ_LOCK();
 8006f94:	f7ff faa8 	bl	80064e8 <IRQ_LOCK>
	if (isTxBusy_)
 8006f98:	4b14      	ldr	r3, [pc, #80]	@ (8006fec <UART_SendBuffer+0x78>)
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d003      	beq.n	8006faa <UART_SendBuffer+0x36>
	{
		IRQ_UNLOCK();
 8006fa2:	f7ff fa7f 	bl	80064a4 <IRQ_UNLOCK>
		return STATUS_BUSY;
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	e01b      	b.n	8006fe2 <UART_SendBuffer+0x6e>
	}

	/* Set Tx Busy Status. */
	isTxBusy_ = true;
 8006faa:	4b10      	ldr	r3, [pc, #64]	@ (8006fec <UART_SendBuffer+0x78>)
 8006fac:	2201      	movs	r2, #1
 8006fae:	701a      	strb	r2, [r3, #0]
	txCallback_ = f;
 8006fb0:	4a0f      	ldr	r2, [pc, #60]	@ (8006ff0 <UART_SendBuffer+0x7c>)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6013      	str	r3, [r2, #0]
	txCallbackState_ = state;
 8006fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8006ff4 <UART_SendBuffer+0x80>)
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	6013      	str	r3, [r2, #0]

	HAL_StatusTypeDef hal_error = HAL_UART_Transmit_DMA(ARGUS_UART, (uint8_t*) txBuff, txSize);
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	68f9      	ldr	r1, [r7, #12]
 8006fc4:	480c      	ldr	r0, [pc, #48]	@ (8006ff8 <UART_SendBuffer+0x84>)
 8006fc6:	f008 ff9f 	bl	800ff08 <HAL_UART_Transmit_DMA>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	75fb      	strb	r3, [r7, #23]
	IRQ_UNLOCK(); // this must come after HAL_UART_Transmit_DMA to avoid race conditions w/ IRQs
 8006fce:	f7ff fa69 	bl	80064a4 <IRQ_UNLOCK>

	if (hal_error != HAL_OK)
 8006fd2:	7dfb      	ldrb	r3, [r7, #23]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d003      	beq.n	8006fe0 <UART_SendBuffer+0x6c>
	{
		//return ERROR_FAIL;
		return -1000 - hal_error;
 8006fd8:	7dfa      	ldrb	r2, [r7, #23]
 8006fda:	4b08      	ldr	r3, [pc, #32]	@ (8006ffc <UART_SendBuffer+0x88>)
 8006fdc:	1a9b      	subs	r3, r3, r2
 8006fde:	e000      	b.n	8006fe2 <UART_SendBuffer+0x6e>
	}

	return STATUS_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3718      	adds	r7, #24
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	240031d4 	.word	0x240031d4
 8006ff0:	240031d8 	.word	0x240031d8
 8006ff4:	240031dc 	.word	0x240031dc
 8006ff8:	24003504 	.word	0x24003504
 8006ffc:	fffffc18 	.word	0xfffffc18

08007000 <HAL_UART_TxCpltCallback>:
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
	void *state = txCallbackState_;
 8007008:	4b0e      	ldr	r3, [pc, #56]	@ (8007044 <HAL_UART_TxCpltCallback+0x44>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	617b      	str	r3, [r7, #20]
	const uart_tx_callback_t callback = txCallback_;
 800700e:	4b0e      	ldr	r3, [pc, #56]	@ (8007048 <HAL_UART_TxCpltCallback+0x48>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	613b      	str	r3, [r7, #16]
	const status_t status = huart->gState == HAL_UART_STATE_ERROR ? ERROR_FAIL : STATUS_OK;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800701a:	2be0      	cmp	r3, #224	@ 0xe0
 800701c:	d102      	bne.n	8007024 <HAL_UART_TxCpltCallback+0x24>
 800701e:	f04f 33ff 	mov.w	r3, #4294967295
 8007022:	e000      	b.n	8007026 <HAL_UART_TxCpltCallback+0x26>
 8007024:	2300      	movs	r3, #0
 8007026:	60fb      	str	r3, [r7, #12]

	isTxBusy_ = false;
 8007028:	4b08      	ldr	r3, [pc, #32]	@ (800704c <HAL_UART_TxCpltCallback+0x4c>)
 800702a:	2200      	movs	r2, #0
 800702c:	701a      	strb	r2, [r3, #0]

	if (callback) callback(status, state);
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d003      	beq.n	800703c <HAL_UART_TxCpltCallback+0x3c>
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	6979      	ldr	r1, [r7, #20]
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	4798      	blx	r3
}
 800703c:	bf00      	nop
 800703e:	3718      	adds	r7, #24
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	240031dc 	.word	0x240031dc
 8007048:	240031d8 	.word	0x240031d8
 800704c:	240031d4 	.word	0x240031d4

08007050 <UART_SetRxCallback>:

void UART_SetRxCallback(uart_rx_callback_t f)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
	rxCallback_ = f;
 8007058:	4a12      	ldr	r2, [pc, #72]	@ (80070a4 <UART_SetRxCallback+0x54>)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6013      	str	r3, [r2, #0]

	/* Start receiving */
	if (f)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00d      	beq.n	8007080 <UART_SetRxCallback+0x30>
	{
		HAL_UART_Receive_DMA(ARGUS_UART, rxBuffer1, RX_BUFFER_SIZE); // Start receiving via DMA
 8007064:	2280      	movs	r2, #128	@ 0x80
 8007066:	4910      	ldr	r1, [pc, #64]	@ (80070a8 <UART_SetRxCallback+0x58>)
 8007068:	4810      	ldr	r0, [pc, #64]	@ (80070ac <UART_SetRxCallback+0x5c>)
 800706a:	f008 ffcd 	bl	8010008 <HAL_UART_Receive_DMA>
		__HAL_UART_ENABLE_IT(ARGUS_UART, UART_IT_IDLE);  // Enable serial port idle interrupt
 800706e:	4b0f      	ldr	r3, [pc, #60]	@ (80070ac <UART_SetRxCallback+0x5c>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	4b0d      	ldr	r3, [pc, #52]	@ (80070ac <UART_SetRxCallback+0x5c>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f042 0210 	orr.w	r2, r2, #16
 800707c:	601a      	str	r2, [r3, #0]
	{
		HAL_UART_AbortReceive(ARGUS_UART);
		HAL_UART_RxCpltCallback(ARGUS_UART);
		__HAL_UART_DISABLE_IT(ARGUS_UART, UART_IT_IDLE);  // Disable serial port idle interrupt
	}
}
 800707e:	e00d      	b.n	800709c <UART_SetRxCallback+0x4c>
		HAL_UART_AbortReceive(ARGUS_UART);
 8007080:	480a      	ldr	r0, [pc, #40]	@ (80070ac <UART_SetRxCallback+0x5c>)
 8007082:	f009 f80d 	bl	80100a0 <HAL_UART_AbortReceive>
		HAL_UART_RxCpltCallback(ARGUS_UART);
 8007086:	4809      	ldr	r0, [pc, #36]	@ (80070ac <UART_SetRxCallback+0x5c>)
 8007088:	f000 f83c 	bl	8007104 <HAL_UART_RxCpltCallback>
		__HAL_UART_DISABLE_IT(ARGUS_UART, UART_IT_IDLE);  // Disable serial port idle interrupt
 800708c:	4b07      	ldr	r3, [pc, #28]	@ (80070ac <UART_SetRxCallback+0x5c>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	4b06      	ldr	r3, [pc, #24]	@ (80070ac <UART_SetRxCallback+0x5c>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f022 0210 	bic.w	r2, r2, #16
 800709a:	601a      	str	r2, [r3, #0]
}
 800709c:	bf00      	nop
 800709e:	3708      	adds	r7, #8
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	240031e0 	.word	0x240031e0
 80070a8:	240031e8 	.word	0x240031e8
 80070ac:	24003504 	.word	0x24003504

080070b0 <UART_SetErrorCallback>:

void UART_SetErrorCallback(uart_error_callback_t f)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
	errorCallback_ = f;
 80070b8:	4a04      	ldr	r2, [pc, #16]	@ (80070cc <UART_SetErrorCallback+0x1c>)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6013      	str	r3, [r2, #0]
}
 80070be:	bf00      	nop
 80070c0:	370c      	adds	r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	240031e4 	.word	0x240031e4

080070d0 <USER_UART_IRQHandler>:

void USER_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
	if (RESET != __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	69db      	ldr	r3, [r3, #28]
 80070de:	f003 0310 	and.w	r3, r3, #16
 80070e2:	2b10      	cmp	r3, #16
 80070e4:	d109      	bne.n	80070fa <USER_UART_IRQHandler+0x2a>
	{
		// On idle interruption
		__HAL_UART_CLEAR_IDLEFLAG(huart); // Clear idle interrupt sign
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2210      	movs	r2, #16
 80070ec:	621a      	str	r2, [r3, #32]
		HAL_UART_AbortReceive(huart);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f008 ffd6 	bl	80100a0 <HAL_UART_AbortReceive>
		HAL_UART_RxCpltCallback(huart);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 f805 	bl	8007104 <HAL_UART_RxCpltCallback>
	}
}
 80070fa:	bf00      	nop
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
	...

08007104 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b086      	sub	sp, #24
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
	assert(huart->pRxBuffPtr == rxBuffer1 || huart->pRxBuffPtr == rxBuffer2);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007110:	4a5c      	ldr	r2, [pc, #368]	@ (8007284 <HAL_UART_RxCpltCallback+0x180>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d00b      	beq.n	800712e <HAL_UART_RxCpltCallback+0x2a>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800711a:	4a5b      	ldr	r2, [pc, #364]	@ (8007288 <HAL_UART_RxCpltCallback+0x184>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d006      	beq.n	800712e <HAL_UART_RxCpltCallback+0x2a>
 8007120:	4b5a      	ldr	r3, [pc, #360]	@ (800728c <HAL_UART_RxCpltCallback+0x188>)
 8007122:	4a5b      	ldr	r2, [pc, #364]	@ (8007290 <HAL_UART_RxCpltCallback+0x18c>)
 8007124:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8007128:	485a      	ldr	r0, [pc, #360]	@ (8007294 <HAL_UART_RxCpltCallback+0x190>)
 800712a:	f000 f949 	bl	80073c0 <__assert_func>

	uint32_t size = RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a58      	ldr	r2, [pc, #352]	@ (8007298 <HAL_UART_RxCpltCallback+0x194>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d068      	beq.n	800720e <HAL_UART_RxCpltCallback+0x10a>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a55      	ldr	r2, [pc, #340]	@ (800729c <HAL_UART_RxCpltCallback+0x198>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d061      	beq.n	800720e <HAL_UART_RxCpltCallback+0x10a>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a53      	ldr	r2, [pc, #332]	@ (80072a0 <HAL_UART_RxCpltCallback+0x19c>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d05a      	beq.n	800720e <HAL_UART_RxCpltCallback+0x10a>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a50      	ldr	r2, [pc, #320]	@ (80072a4 <HAL_UART_RxCpltCallback+0x1a0>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d053      	beq.n	800720e <HAL_UART_RxCpltCallback+0x10a>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a4e      	ldr	r2, [pc, #312]	@ (80072a8 <HAL_UART_RxCpltCallback+0x1a4>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d04c      	beq.n	800720e <HAL_UART_RxCpltCallback+0x10a>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a4b      	ldr	r2, [pc, #300]	@ (80072ac <HAL_UART_RxCpltCallback+0x1a8>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d045      	beq.n	800720e <HAL_UART_RxCpltCallback+0x10a>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a49      	ldr	r2, [pc, #292]	@ (80072b0 <HAL_UART_RxCpltCallback+0x1ac>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d03e      	beq.n	800720e <HAL_UART_RxCpltCallback+0x10a>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a46      	ldr	r2, [pc, #280]	@ (80072b4 <HAL_UART_RxCpltCallback+0x1b0>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d037      	beq.n	800720e <HAL_UART_RxCpltCallback+0x10a>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a44      	ldr	r2, [pc, #272]	@ (80072b8 <HAL_UART_RxCpltCallback+0x1b4>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d030      	beq.n	800720e <HAL_UART_RxCpltCallback+0x10a>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a41      	ldr	r2, [pc, #260]	@ (80072bc <HAL_UART_RxCpltCallback+0x1b8>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d029      	beq.n	800720e <HAL_UART_RxCpltCallback+0x10a>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a3f      	ldr	r2, [pc, #252]	@ (80072c0 <HAL_UART_RxCpltCallback+0x1bc>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d022      	beq.n	800720e <HAL_UART_RxCpltCallback+0x10a>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a3c      	ldr	r2, [pc, #240]	@ (80072c4 <HAL_UART_RxCpltCallback+0x1c0>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d01b      	beq.n	800720e <HAL_UART_RxCpltCallback+0x10a>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a3a      	ldr	r2, [pc, #232]	@ (80072c8 <HAL_UART_RxCpltCallback+0x1c4>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d014      	beq.n	800720e <HAL_UART_RxCpltCallback+0x10a>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a37      	ldr	r2, [pc, #220]	@ (80072cc <HAL_UART_RxCpltCallback+0x1c8>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d00d      	beq.n	800720e <HAL_UART_RxCpltCallback+0x10a>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a35      	ldr	r2, [pc, #212]	@ (80072d0 <HAL_UART_RxCpltCallback+0x1cc>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d006      	beq.n	800720e <HAL_UART_RxCpltCallback+0x10a>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a32      	ldr	r2, [pc, #200]	@ (80072d4 <HAL_UART_RxCpltCallback+0x1d0>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d107      	bne.n	800721e <HAL_UART_RxCpltCallback+0x11a>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800721c:	e006      	b.n	800722c <HAL_UART_RxCpltCallback+0x128>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800722c:	617b      	str	r3, [r7, #20]
	uint8_t * curr = huart->pRxBuffPtr;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007232:	613b      	str	r3, [r7, #16]
	uint8_t * next = huart->pRxBuffPtr == rxBuffer1 ? rxBuffer2 : rxBuffer1;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007238:	4a12      	ldr	r2, [pc, #72]	@ (8007284 <HAL_UART_RxCpltCallback+0x180>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d101      	bne.n	8007242 <HAL_UART_RxCpltCallback+0x13e>
 800723e:	4b12      	ldr	r3, [pc, #72]	@ (8007288 <HAL_UART_RxCpltCallback+0x184>)
 8007240:	e000      	b.n	8007244 <HAL_UART_RxCpltCallback+0x140>
 8007242:	4b10      	ldr	r3, [pc, #64]	@ (8007284 <HAL_UART_RxCpltCallback+0x180>)
 8007244:	60fb      	str	r3, [r7, #12]

	HAL_StatusTypeDef rtn = HAL_UART_Receive_DMA(huart, next, RX_BUFFER_SIZE);
 8007246:	2280      	movs	r2, #128	@ 0x80
 8007248:	68f9      	ldr	r1, [r7, #12]
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f008 fedc 	bl	8010008 <HAL_UART_Receive_DMA>
 8007250:	4603      	mov	r3, r0
 8007252:	72fb      	strb	r3, [r7, #11]
	if (rtn != HAL_OK || huart->gState == HAL_UART_STATE_ERROR)
 8007254:	7afb      	ldrb	r3, [r7, #11]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d104      	bne.n	8007264 <HAL_UART_RxCpltCallback+0x160>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007260:	2be0      	cmp	r3, #224	@ 0xe0
 8007262:	d102      	bne.n	800726a <HAL_UART_RxCpltCallback+0x166>
	{
		HAL_UART_ErrorCallback(huart);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 f839 	bl	80072dc <HAL_UART_ErrorCallback>
	}

	if (rxCallback_)
 800726a:	4b1b      	ldr	r3, [pc, #108]	@ (80072d8 <HAL_UART_RxCpltCallback+0x1d4>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d004      	beq.n	800727c <HAL_UART_RxCpltCallback+0x178>
		rxCallback_(curr, size);
 8007272:	4b19      	ldr	r3, [pc, #100]	@ (80072d8 <HAL_UART_RxCpltCallback+0x1d4>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	6979      	ldr	r1, [r7, #20]
 8007278:	6938      	ldr	r0, [r7, #16]
 800727a:	4798      	blx	r3
}
 800727c:	bf00      	nop
 800727e:	3718      	adds	r7, #24
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	240031e8 	.word	0x240031e8
 8007288:	24003268 	.word	0x24003268
 800728c:	0802c248 	.word	0x0802c248
 8007290:	0802c9e8 	.word	0x0802c9e8
 8007294:	0802c28c 	.word	0x0802c28c
 8007298:	40020010 	.word	0x40020010
 800729c:	40020028 	.word	0x40020028
 80072a0:	40020040 	.word	0x40020040
 80072a4:	40020058 	.word	0x40020058
 80072a8:	40020070 	.word	0x40020070
 80072ac:	40020088 	.word	0x40020088
 80072b0:	400200a0 	.word	0x400200a0
 80072b4:	400200b8 	.word	0x400200b8
 80072b8:	40020410 	.word	0x40020410
 80072bc:	40020428 	.word	0x40020428
 80072c0:	40020440 	.word	0x40020440
 80072c4:	40020458 	.word	0x40020458
 80072c8:	40020470 	.word	0x40020470
 80072cc:	40020488 	.word	0x40020488
 80072d0:	400204a0 	.word	0x400204a0
 80072d4:	400204b8 	.word	0x400204b8
 80072d8:	240031e0 	.word	0x240031e0

080072dc <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
	status_t status = ERROR_FAIL;
 80072e4:	f04f 33ff 	mov.w	r3, #4294967295
 80072e8:	60fb      	str	r3, [r7, #12]

	if (huart->ErrorCode & HAL_UART_ERROR_ORE)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072f0:	f003 0308 	and.w	r3, r3, #8
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d003      	beq.n	8007300 <HAL_UART_ErrorCallback+0x24>
		status = ERROR_UART_RX_OVERRUN;
 80072f8:	f06f 0347 	mvn.w	r3, #71	@ 0x47
 80072fc:	60fb      	str	r3, [r7, #12]
 80072fe:	e051      	b.n	80073a4 <HAL_UART_ErrorCallback+0xc8>
	else if (huart->ErrorCode & HAL_UART_ERROR_FE)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007306:	f003 0304 	and.w	r3, r3, #4
 800730a:	2b00      	cmp	r3, #0
 800730c:	d003      	beq.n	8007316 <HAL_UART_ErrorCallback+0x3a>
		status = ERROR_UART_FRAMING_ERR;
 800730e:	f06f 0349 	mvn.w	r3, #73	@ 0x49
 8007312:	60fb      	str	r3, [r7, #12]
 8007314:	e046      	b.n	80073a4 <HAL_UART_ErrorCallback+0xc8>
	else if (huart->ErrorCode & HAL_UART_ERROR_NE)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800731c:	f003 0302 	and.w	r3, r3, #2
 8007320:	2b00      	cmp	r3, #0
 8007322:	d003      	beq.n	800732c <HAL_UART_ErrorCallback+0x50>
		status = ERROR_UART_RX_NOISE;
 8007324:	f06f 0348 	mvn.w	r3, #72	@ 0x48
 8007328:	60fb      	str	r3, [r7, #12]
 800732a:	e03b      	b.n	80073a4 <HAL_UART_ErrorCallback+0xc8>
	else if (huart->ErrorCode & HAL_UART_ERROR_DMA)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007332:	f003 0310 	and.w	r3, r3, #16
 8007336:	2b00      	cmp	r3, #0
 8007338:	d003      	beq.n	8007342 <HAL_UART_ErrorCallback+0x66>
		status = ERROR_UART_TX_DMA_ERR;
 800733a:	f06f 034a 	mvn.w	r3, #74	@ 0x4a
 800733e:	60fb      	str	r3, [r7, #12]
 8007340:	e030      	b.n	80073a4 <HAL_UART_ErrorCallback+0xc8>
	else if (huart->gState == HAL_UART_STATE_BUSY)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007348:	2b24      	cmp	r3, #36	@ 0x24
 800734a:	d102      	bne.n	8007352 <HAL_UART_ErrorCallback+0x76>
		status = STATUS_BUSY;
 800734c:	2302      	movs	r3, #2
 800734e:	60fb      	str	r3, [r7, #12]
 8007350:	e028      	b.n	80073a4 <HAL_UART_ErrorCallback+0xc8>
	else if (huart->gState == HAL_UART_STATE_BUSY_RX)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007358:	2b22      	cmp	r3, #34	@ 0x22
 800735a:	d102      	bne.n	8007362 <HAL_UART_ErrorCallback+0x86>
		status = STATUS_BUSY;
 800735c:	2302      	movs	r3, #2
 800735e:	60fb      	str	r3, [r7, #12]
 8007360:	e020      	b.n	80073a4 <HAL_UART_ErrorCallback+0xc8>
	else if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007368:	2b21      	cmp	r3, #33	@ 0x21
 800736a:	d102      	bne.n	8007372 <HAL_UART_ErrorCallback+0x96>
		status = STATUS_BUSY;
 800736c:	2302      	movs	r3, #2
 800736e:	60fb      	str	r3, [r7, #12]
 8007370:	e018      	b.n	80073a4 <HAL_UART_ErrorCallback+0xc8>
	else if (huart->gState == HAL_UART_STATE_BUSY_TX_RX)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007378:	2b23      	cmp	r3, #35	@ 0x23
 800737a:	d102      	bne.n	8007382 <HAL_UART_ErrorCallback+0xa6>
		status = STATUS_BUSY;
 800737c:	2302      	movs	r3, #2
 800737e:	60fb      	str	r3, [r7, #12]
 8007380:	e010      	b.n	80073a4 <HAL_UART_ErrorCallback+0xc8>
	else if (huart->gState == HAL_UART_STATE_ERROR)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007388:	2be0      	cmp	r3, #224	@ 0xe0
 800738a:	d103      	bne.n	8007394 <HAL_UART_ErrorCallback+0xb8>
		status = ERROR_FAIL;
 800738c:	f04f 33ff 	mov.w	r3, #4294967295
 8007390:	60fb      	str	r3, [r7, #12]
 8007392:	e007      	b.n	80073a4 <HAL_UART_ErrorCallback+0xc8>
	else if (huart->gState == HAL_UART_STATE_TIMEOUT)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800739a:	2ba0      	cmp	r3, #160	@ 0xa0
 800739c:	d102      	bne.n	80073a4 <HAL_UART_ErrorCallback+0xc8>
		status = ERROR_TIMEOUT;
 800739e:	f06f 0305 	mvn.w	r3, #5
 80073a2:	60fb      	str	r3, [r7, #12]

	if (errorCallback_)
 80073a4:	4b05      	ldr	r3, [pc, #20]	@ (80073bc <HAL_UART_ErrorCallback+0xe0>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d003      	beq.n	80073b4 <HAL_UART_ErrorCallback+0xd8>
		errorCallback_(status);
 80073ac:	4b03      	ldr	r3, [pc, #12]	@ (80073bc <HAL_UART_ErrorCallback+0xe0>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	4798      	blx	r3
}
 80073b4:	bf00      	nop
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	240031e4 	.word	0x240031e4

080073c0 <__assert_func>:
    }
}

__attribute__((naked)) // avoid stack usage (no return from assert!)
void __assert_func(const char *file, int line, const char *func, const char *failedExpr)
{
 80073c0:	460c      	mov	r4, r1
 80073c2:	4619      	mov	r1, r3
    static bool is_asserting = false;
    if (!is_asserting)
 80073c4:	4b12      	ldr	r3, [pc, #72]	@ (8007410 <__assert_func+0x50>)
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	f083 0301 	eor.w	r3, r3, #1
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d018      	beq.n	8007404 <__assert_func+0x44>
    {
        BREAKPOINT();
 80073d2:	be00      	bkpt	0x0000
        is_asserting = true;
 80073d4:	4b0e      	ldr	r3, [pc, #56]	@ (8007410 <__assert_func+0x50>)
 80073d6:	2501      	movs	r5, #1
 80073d8:	701d      	strb	r5, [r3, #0]
#endif

        /* Try to send message to master.
         * Note that sending via USB fails if the assert is called e.g. from
         * the HardFault handler. */
        print("ASSERT: expression \"%s\" failed;\n"
 80073da:	9200      	str	r2, [sp, #0]
 80073dc:	4623      	mov	r3, r4
 80073de:	4602      	mov	r2, r0
 80073e0:	480c      	ldr	r0, [pc, #48]	@ (8007414 <__assert_func+0x54>)
 80073e2:	f00b fdd7 	bl	8012f94 <print>
              "function \"%s\";\n",
              failedExpr, file, line, func);

        /* Wait for sending print statement */
        static volatile uint32_t i = 0;
        for (i = 0; i < 1000000; i++) __asm("nop");
 80073e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007418 <__assert_func+0x58>)
 80073e8:	2200      	movs	r2, #0
 80073ea:	601a      	str	r2, [r3, #0]
 80073ec:	e005      	b.n	80073fa <__assert_func+0x3a>
 80073ee:	bf00      	nop
 80073f0:	4b09      	ldr	r3, [pc, #36]	@ (8007418 <__assert_func+0x58>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	3301      	adds	r3, #1
 80073f6:	4a08      	ldr	r2, [pc, #32]	@ (8007418 <__assert_func+0x58>)
 80073f8:	6013      	str	r3, [r2, #0]
 80073fa:	4b07      	ldr	r3, [pc, #28]	@ (8007418 <__assert_func+0x58>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a07      	ldr	r2, [pc, #28]	@ (800741c <__assert_func+0x5c>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d9f4      	bls.n	80073ee <__assert_func+0x2e>
    }

    /* Stop or Reset. */
    BREAKPOINT();
 8007404:	be00      	bkpt	0x0000
    Board_Reset();
 8007406:	f7ff f839 	bl	800647c <Board_Reset>
    for (;;) __asm("nop");
 800740a:	bf00      	nop
 800740c:	e7fd      	b.n	800740a <__assert_func+0x4a>
 800740e:	bf00      	nop
 8007410:	240032e8 	.word	0x240032e8
 8007414:	0802c2a8 	.word	0x0802c2a8
 8007418:	240032ec 	.word	0x240032ec
 800741c:	000f423f 	.word	0x000f423f

08007420 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007426:	4b19      	ldr	r3, [pc, #100]	@ (800748c <MX_DMA_Init+0x6c>)
 8007428:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800742c:	4a17      	ldr	r2, [pc, #92]	@ (800748c <MX_DMA_Init+0x6c>)
 800742e:	f043 0301 	orr.w	r3, r3, #1
 8007432:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007436:	4b15      	ldr	r3, [pc, #84]	@ (800748c <MX_DMA_Init+0x6c>)
 8007438:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	607b      	str	r3, [r7, #4]
 8007442:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8007444:	2200      	movs	r2, #0
 8007446:	2100      	movs	r1, #0
 8007448:	200b      	movs	r0, #11
 800744a:	f001 f824 	bl	8008496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800744e:	200b      	movs	r0, #11
 8007450:	f001 f83b 	bl	80084ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8007454:	2200      	movs	r2, #0
 8007456:	2100      	movs	r1, #0
 8007458:	200c      	movs	r0, #12
 800745a:	f001 f81c 	bl	8008496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800745e:	200c      	movs	r0, #12
 8007460:	f001 f833 	bl	80084ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8007464:	2200      	movs	r2, #0
 8007466:	2100      	movs	r1, #0
 8007468:	200d      	movs	r0, #13
 800746a:	f001 f814 	bl	8008496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800746e:	200d      	movs	r0, #13
 8007470:	f001 f82b 	bl	80084ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8007474:	2200      	movs	r2, #0
 8007476:	2100      	movs	r1, #0
 8007478:	200e      	movs	r0, #14
 800747a:	f001 f80c 	bl	8008496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800747e:	200e      	movs	r0, #14
 8007480:	f001 f823 	bl	80084ca <HAL_NVIC_EnableIRQ>

}
 8007484:	bf00      	nop
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	58024400 	.word	0x58024400

08007490 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b088      	sub	sp, #32
 8007494:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007496:	f107 030c 	add.w	r3, r7, #12
 800749a:	2200      	movs	r2, #0
 800749c:	601a      	str	r2, [r3, #0]
 800749e:	605a      	str	r2, [r3, #4]
 80074a0:	609a      	str	r2, [r3, #8]
 80074a2:	60da      	str	r2, [r3, #12]
 80074a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80074a6:	4b2d      	ldr	r3, [pc, #180]	@ (800755c <MX_GPIO_Init+0xcc>)
 80074a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074ac:	4a2b      	ldr	r2, [pc, #172]	@ (800755c <MX_GPIO_Init+0xcc>)
 80074ae:	f043 0301 	orr.w	r3, r3, #1
 80074b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80074b6:	4b29      	ldr	r3, [pc, #164]	@ (800755c <MX_GPIO_Init+0xcc>)
 80074b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074bc:	f003 0301 	and.w	r3, r3, #1
 80074c0:	60bb      	str	r3, [r7, #8]
 80074c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80074c4:	4b25      	ldr	r3, [pc, #148]	@ (800755c <MX_GPIO_Init+0xcc>)
 80074c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074ca:	4a24      	ldr	r2, [pc, #144]	@ (800755c <MX_GPIO_Init+0xcc>)
 80074cc:	f043 0302 	orr.w	r3, r3, #2
 80074d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80074d4:	4b21      	ldr	r3, [pc, #132]	@ (800755c <MX_GPIO_Init+0xcc>)
 80074d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074da:	f003 0302 	and.w	r3, r3, #2
 80074de:	607b      	str	r3, [r7, #4]
 80074e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80074e2:	4b1e      	ldr	r3, [pc, #120]	@ (800755c <MX_GPIO_Init+0xcc>)
 80074e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074e8:	4a1c      	ldr	r2, [pc, #112]	@ (800755c <MX_GPIO_Init+0xcc>)
 80074ea:	f043 0308 	orr.w	r3, r3, #8
 80074ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80074f2:	4b1a      	ldr	r3, [pc, #104]	@ (800755c <MX_GPIO_Init+0xcc>)
 80074f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074f8:	f003 0308 	and.w	r3, r3, #8
 80074fc:	603b      	str	r3, [r7, #0]
 80074fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S50MV85I_SPI_NSS_GPIO_Port, S50MV85I_SPI_NSS_Pin, GPIO_PIN_SET);
 8007500:	2201      	movs	r2, #1
 8007502:	2110      	movs	r1, #16
 8007504:	4816      	ldr	r0, [pc, #88]	@ (8007560 <MX_GPIO_Init+0xd0>)
 8007506:	f004 f887 	bl	800b618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S50MV85I_SPI_NSS_Pin;
 800750a:	2310      	movs	r3, #16
 800750c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800750e:	2301      	movs	r3, #1
 8007510:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007512:	2300      	movs	r3, #0
 8007514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007516:	2303      	movs	r3, #3
 8007518:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(S50MV85I_SPI_NSS_GPIO_Port, &GPIO_InitStruct);
 800751a:	f107 030c 	add.w	r3, r7, #12
 800751e:	4619      	mov	r1, r3
 8007520:	480f      	ldr	r0, [pc, #60]	@ (8007560 <MX_GPIO_Init+0xd0>)
 8007522:	f003 feb9 	bl	800b298 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S50MV85I_IRQ_Pin;
 8007526:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800752a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800752c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8007530:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007532:	2301      	movs	r3, #1
 8007534:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(S50MV85I_IRQ_GPIO_Port, &GPIO_InitStruct);
 8007536:	f107 030c 	add.w	r3, r7, #12
 800753a:	4619      	mov	r1, r3
 800753c:	4809      	ldr	r0, [pc, #36]	@ (8007564 <MX_GPIO_Init+0xd4>)
 800753e:	f003 feab 	bl	800b298 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8007542:	2200      	movs	r2, #0
 8007544:	2102      	movs	r1, #2
 8007546:	2028      	movs	r0, #40	@ 0x28
 8007548:	f000 ffa5 	bl	8008496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800754c:	2028      	movs	r0, #40	@ 0x28
 800754e:	f000 ffbc 	bl	80084ca <HAL_NVIC_EnableIRQ>

}
 8007552:	bf00      	nop
 8007554:	3720      	adds	r7, #32
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	58024400 	.word	0x58024400
 8007560:	58020000 	.word	0x58020000
 8007564:	58020400 	.word	0x58020400

08007568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800756c:	f000 f88c 	bl	8007688 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007570:	f000 fdde 	bl	8008130 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007574:	f000 f818 	bl	80075a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007578:	f7ff ff8a 	bl	8007490 <MX_GPIO_Init>
  MX_DMA_Init();
 800757c:	f7ff ff50 	bl	8007420 <MX_DMA_Init>
  MX_SPI1_Init();
 8007580:	f000 f8b4 	bl	80076ec <MX_SPI1_Init>
  MX_TIM5_Init();
 8007584:	f000 fba8 	bl	8007cd8 <MX_TIM5_Init>
  MX_TIM6_Init();
 8007588:	f000 fbfe 	bl	8007d88 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 800758c:	f000 fc7c 	bl	8007e88 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  app_main();
 8007590:	f00a fe38 	bl	8012204 <app_main>

  while (1)
  {
	  printf("STM32 PANIC!!!!!!\n\t");
 8007594:	4803      	ldr	r0, [pc, #12]	@ (80075a4 <main+0x3c>)
 8007596:	f022 f86d 	bl	8029674 <iprintf>
	  HAL_Delay(100);
 800759a:	2064      	movs	r0, #100	@ 0x64
 800759c:	f000 fe5a 	bl	8008254 <HAL_Delay>
	  printf("STM32 PANIC!!!!!!\n\t");
 80075a0:	bf00      	nop
 80075a2:	e7f7      	b.n	8007594 <main+0x2c>
 80075a4:	0802c2f0 	.word	0x0802c2f0

080075a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b09c      	sub	sp, #112	@ 0x70
 80075ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80075ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075b2:	224c      	movs	r2, #76	@ 0x4c
 80075b4:	2100      	movs	r1, #0
 80075b6:	4618      	mov	r0, r3
 80075b8:	f022 f8cb 	bl	8029752 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80075bc:	1d3b      	adds	r3, r7, #4
 80075be:	2220      	movs	r2, #32
 80075c0:	2100      	movs	r1, #0
 80075c2:	4618      	mov	r0, r3
 80075c4:	f022 f8c5 	bl	8029752 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80075c8:	2002      	movs	r0, #2
 80075ca:	f004 f859 	bl	800b680 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80075ce:	2300      	movs	r3, #0
 80075d0:	603b      	str	r3, [r7, #0]
 80075d2:	4b2c      	ldr	r3, [pc, #176]	@ (8007684 <SystemClock_Config+0xdc>)
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	4a2b      	ldr	r2, [pc, #172]	@ (8007684 <SystemClock_Config+0xdc>)
 80075d8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80075dc:	6193      	str	r3, [r2, #24]
 80075de:	4b29      	ldr	r3, [pc, #164]	@ (8007684 <SystemClock_Config+0xdc>)
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80075e6:	603b      	str	r3, [r7, #0]
 80075e8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80075ea:	bf00      	nop
 80075ec:	4b25      	ldr	r3, [pc, #148]	@ (8007684 <SystemClock_Config+0xdc>)
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80075f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075f8:	d1f8      	bne.n	80075ec <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80075fa:	2302      	movs	r3, #2
 80075fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80075fe:	2301      	movs	r3, #1
 8007600:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8007602:	2340      	movs	r3, #64	@ 0x40
 8007604:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007606:	2302      	movs	r3, #2
 8007608:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800760a:	2300      	movs	r3, #0
 800760c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800760e:	2304      	movs	r3, #4
 8007610:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 8007612:	2322      	movs	r3, #34	@ 0x22
 8007614:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8007616:	2301      	movs	r3, #1
 8007618:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800761a:	2302      	movs	r3, #2
 800761c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800761e:	2302      	movs	r3, #2
 8007620:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8007622:	230c      	movs	r3, #12
 8007624:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8007626:	2300      	movs	r3, #0
 8007628:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 800762a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800762e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007630:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007634:	4618      	mov	r0, r3
 8007636:	f004 f85d 	bl	800b6f4 <HAL_RCC_OscConfig>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d001      	beq.n	8007644 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8007640:	f000 f84e 	bl	80076e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007644:	233f      	movs	r3, #63	@ 0x3f
 8007646:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007648:	2303      	movs	r3, #3
 800764a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800764c:	2300      	movs	r3, #0
 800764e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8007650:	2308      	movs	r3, #8
 8007652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8007654:	2340      	movs	r3, #64	@ 0x40
 8007656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8007658:	2340      	movs	r3, #64	@ 0x40
 800765a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800765c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007660:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8007662:	2340      	movs	r3, #64	@ 0x40
 8007664:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8007666:	1d3b      	adds	r3, r7, #4
 8007668:	2103      	movs	r1, #3
 800766a:	4618      	mov	r0, r3
 800766c:	f004 fc1c 	bl	800bea8 <HAL_RCC_ClockConfig>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d001      	beq.n	800767a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8007676:	f000 f833 	bl	80076e0 <Error_Handler>
  }
}
 800767a:	bf00      	nop
 800767c:	3770      	adds	r7, #112	@ 0x70
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	58024800 	.word	0x58024800

08007688 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800768e:	463b      	mov	r3, r7
 8007690:	2200      	movs	r2, #0
 8007692:	601a      	str	r2, [r3, #0]
 8007694:	605a      	str	r2, [r3, #4]
 8007696:	609a      	str	r2, [r3, #8]
 8007698:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800769a:	f000 ff31 	bl	8008500 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800769e:	2301      	movs	r3, #1
 80076a0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80076a2:	2300      	movs	r3, #0
 80076a4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80076a6:	2300      	movs	r3, #0
 80076a8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80076aa:	231f      	movs	r3, #31
 80076ac:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80076ae:	2387      	movs	r3, #135	@ 0x87
 80076b0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80076b2:	2300      	movs	r3, #0
 80076b4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80076b6:	2300      	movs	r3, #0
 80076b8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80076ba:	2301      	movs	r3, #1
 80076bc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80076be:	2301      	movs	r3, #1
 80076c0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80076c2:	2300      	movs	r3, #0
 80076c4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80076c6:	2300      	movs	r3, #0
 80076c8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80076ca:	463b      	mov	r3, r7
 80076cc:	4618      	mov	r0, r3
 80076ce:	f000 ff4f 	bl	8008570 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80076d2:	2004      	movs	r0, #4
 80076d4:	f000 ff2c 	bl	8008530 <HAL_MPU_Enable>

}
 80076d8:	bf00      	nop
 80076da:	3710      	adds	r7, #16
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80076e0:	b480      	push	{r7}
 80076e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80076e4:	b672      	cpsid	i
}
 80076e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80076e8:	bf00      	nop
 80076ea:	e7fd      	b.n	80076e8 <Error_Handler+0x8>

080076ec <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80076f0:	4b29      	ldr	r3, [pc, #164]	@ (8007798 <MX_SPI1_Init+0xac>)
 80076f2:	4a2a      	ldr	r2, [pc, #168]	@ (800779c <MX_SPI1_Init+0xb0>)
 80076f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80076f6:	4b28      	ldr	r3, [pc, #160]	@ (8007798 <MX_SPI1_Init+0xac>)
 80076f8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80076fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80076fe:	4b26      	ldr	r3, [pc, #152]	@ (8007798 <MX_SPI1_Init+0xac>)
 8007700:	2200      	movs	r2, #0
 8007702:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007704:	4b24      	ldr	r3, [pc, #144]	@ (8007798 <MX_SPI1_Init+0xac>)
 8007706:	2207      	movs	r2, #7
 8007708:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800770a:	4b23      	ldr	r3, [pc, #140]	@ (8007798 <MX_SPI1_Init+0xac>)
 800770c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007710:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8007712:	4b21      	ldr	r3, [pc, #132]	@ (8007798 <MX_SPI1_Init+0xac>)
 8007714:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007718:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800771a:	4b1f      	ldr	r3, [pc, #124]	@ (8007798 <MX_SPI1_Init+0xac>)
 800771c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007720:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8007722:	4b1d      	ldr	r3, [pc, #116]	@ (8007798 <MX_SPI1_Init+0xac>)
 8007724:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8007728:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800772a:	4b1b      	ldr	r3, [pc, #108]	@ (8007798 <MX_SPI1_Init+0xac>)
 800772c:	2200      	movs	r2, #0
 800772e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007730:	4b19      	ldr	r3, [pc, #100]	@ (8007798 <MX_SPI1_Init+0xac>)
 8007732:	2200      	movs	r2, #0
 8007734:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007736:	4b18      	ldr	r3, [pc, #96]	@ (8007798 <MX_SPI1_Init+0xac>)
 8007738:	2200      	movs	r2, #0
 800773a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800773c:	4b16      	ldr	r3, [pc, #88]	@ (8007798 <MX_SPI1_Init+0xac>)
 800773e:	2200      	movs	r2, #0
 8007740:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007742:	4b15      	ldr	r3, [pc, #84]	@ (8007798 <MX_SPI1_Init+0xac>)
 8007744:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007748:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800774a:	4b13      	ldr	r3, [pc, #76]	@ (8007798 <MX_SPI1_Init+0xac>)
 800774c:	2200      	movs	r2, #0
 800774e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007750:	4b11      	ldr	r3, [pc, #68]	@ (8007798 <MX_SPI1_Init+0xac>)
 8007752:	2200      	movs	r2, #0
 8007754:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007756:	4b10      	ldr	r3, [pc, #64]	@ (8007798 <MX_SPI1_Init+0xac>)
 8007758:	2200      	movs	r2, #0
 800775a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800775c:	4b0e      	ldr	r3, [pc, #56]	@ (8007798 <MX_SPI1_Init+0xac>)
 800775e:	2200      	movs	r2, #0
 8007760:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007762:	4b0d      	ldr	r3, [pc, #52]	@ (8007798 <MX_SPI1_Init+0xac>)
 8007764:	2200      	movs	r2, #0
 8007766:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007768:	4b0b      	ldr	r3, [pc, #44]	@ (8007798 <MX_SPI1_Init+0xac>)
 800776a:	2200      	movs	r2, #0
 800776c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800776e:	4b0a      	ldr	r3, [pc, #40]	@ (8007798 <MX_SPI1_Init+0xac>)
 8007770:	2200      	movs	r2, #0
 8007772:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 8007774:	4b08      	ldr	r3, [pc, #32]	@ (8007798 <MX_SPI1_Init+0xac>)
 8007776:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800777a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800777c:	4b06      	ldr	r3, [pc, #24]	@ (8007798 <MX_SPI1_Init+0xac>)
 800777e:	2200      	movs	r2, #0
 8007780:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007782:	4805      	ldr	r0, [pc, #20]	@ (8007798 <MX_SPI1_Init+0xac>)
 8007784:	f006 fcde 	bl	800e144 <HAL_SPI_Init>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <MX_SPI1_Init+0xa6>
  {
    Error_Handler();
 800778e:	f7ff ffa7 	bl	80076e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007792:	bf00      	nop
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	240032f0 	.word	0x240032f0
 800779c:	40013000 	.word	0x40013000

080077a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b0b8      	sub	sp, #224	@ 0xe0
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077a8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80077ac:	2200      	movs	r2, #0
 80077ae:	601a      	str	r2, [r3, #0]
 80077b0:	605a      	str	r2, [r3, #4]
 80077b2:	609a      	str	r2, [r3, #8]
 80077b4:	60da      	str	r2, [r3, #12]
 80077b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80077b8:	f107 0310 	add.w	r3, r7, #16
 80077bc:	22b8      	movs	r2, #184	@ 0xb8
 80077be:	2100      	movs	r1, #0
 80077c0:	4618      	mov	r0, r3
 80077c2:	f021 ffc6 	bl	8029752 <memset>
  if(spiHandle->Instance==SPI1)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a60      	ldr	r2, [pc, #384]	@ (800794c <HAL_SPI_MspInit+0x1ac>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	f040 80b8 	bne.w	8007942 <HAL_SPI_MspInit+0x1a2>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80077d2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80077d6:	f04f 0300 	mov.w	r3, #0
 80077da:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 32;
 80077de:	2320      	movs	r3, #32
 80077e0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 129;
 80077e2:	2381      	movs	r3, #129	@ 0x81
 80077e4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80077e6:	2302      	movs	r3, #2
 80077e8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80077ea:	2302      	movs	r3, #2
 80077ec:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80077ee:	2302      	movs	r3, #2
 80077f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80077f2:	2340      	movs	r3, #64	@ 0x40
 80077f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80077f6:	2300      	movs	r3, #0
 80077f8:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80077fa:	2300      	movs	r3, #0
 80077fc:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80077fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007802:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007804:	f107 0310 	add.w	r3, r7, #16
 8007808:	4618      	mov	r0, r3
 800780a:	f004 fed9 	bl	800c5c0 <HAL_RCCEx_PeriphCLKConfig>
 800780e:	4603      	mov	r3, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d001      	beq.n	8007818 <HAL_SPI_MspInit+0x78>
    {
      Error_Handler();
 8007814:	f7ff ff64 	bl	80076e0 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007818:	4b4d      	ldr	r3, [pc, #308]	@ (8007950 <HAL_SPI_MspInit+0x1b0>)
 800781a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800781e:	4a4c      	ldr	r2, [pc, #304]	@ (8007950 <HAL_SPI_MspInit+0x1b0>)
 8007820:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007824:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007828:	4b49      	ldr	r3, [pc, #292]	@ (8007950 <HAL_SPI_MspInit+0x1b0>)
 800782a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800782e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007832:	60fb      	str	r3, [r7, #12]
 8007834:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007836:	4b46      	ldr	r3, [pc, #280]	@ (8007950 <HAL_SPI_MspInit+0x1b0>)
 8007838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800783c:	4a44      	ldr	r2, [pc, #272]	@ (8007950 <HAL_SPI_MspInit+0x1b0>)
 800783e:	f043 0302 	orr.w	r3, r3, #2
 8007842:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007846:	4b42      	ldr	r3, [pc, #264]	@ (8007950 <HAL_SPI_MspInit+0x1b0>)
 8007848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800784c:	f003 0302 	and.w	r3, r3, #2
 8007850:	60bb      	str	r3, [r7, #8]
 8007852:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB3(JTDO/TRACESWO)     ------> SPI1_SCK
    PB4(NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = S50MV85I_SPI_SCK_Pin|S50MV85I_SPI_MISO_Pin|S50MV85I_SPI_MOSI_Pin;
 8007854:	2338      	movs	r3, #56	@ 0x38
 8007856:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800785a:	2302      	movs	r3, #2
 800785c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007860:	2300      	movs	r3, #0
 8007862:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007866:	2300      	movs	r3, #0
 8007868:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800786c:	2305      	movs	r3, #5
 800786e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007872:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8007876:	4619      	mov	r1, r3
 8007878:	4836      	ldr	r0, [pc, #216]	@ (8007954 <HAL_SPI_MspInit+0x1b4>)
 800787a:	f003 fd0d 	bl	800b298 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 800787e:	4b36      	ldr	r3, [pc, #216]	@ (8007958 <HAL_SPI_MspInit+0x1b8>)
 8007880:	4a36      	ldr	r2, [pc, #216]	@ (800795c <HAL_SPI_MspInit+0x1bc>)
 8007882:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8007884:	4b34      	ldr	r3, [pc, #208]	@ (8007958 <HAL_SPI_MspInit+0x1b8>)
 8007886:	2225      	movs	r2, #37	@ 0x25
 8007888:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800788a:	4b33      	ldr	r3, [pc, #204]	@ (8007958 <HAL_SPI_MspInit+0x1b8>)
 800788c:	2200      	movs	r2, #0
 800788e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007890:	4b31      	ldr	r3, [pc, #196]	@ (8007958 <HAL_SPI_MspInit+0x1b8>)
 8007892:	2200      	movs	r2, #0
 8007894:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007896:	4b30      	ldr	r3, [pc, #192]	@ (8007958 <HAL_SPI_MspInit+0x1b8>)
 8007898:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800789c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800789e:	4b2e      	ldr	r3, [pc, #184]	@ (8007958 <HAL_SPI_MspInit+0x1b8>)
 80078a0:	2200      	movs	r2, #0
 80078a2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80078a4:	4b2c      	ldr	r3, [pc, #176]	@ (8007958 <HAL_SPI_MspInit+0x1b8>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80078aa:	4b2b      	ldr	r3, [pc, #172]	@ (8007958 <HAL_SPI_MspInit+0x1b8>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80078b0:	4b29      	ldr	r3, [pc, #164]	@ (8007958 <HAL_SPI_MspInit+0x1b8>)
 80078b2:	2200      	movs	r2, #0
 80078b4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80078b6:	4b28      	ldr	r3, [pc, #160]	@ (8007958 <HAL_SPI_MspInit+0x1b8>)
 80078b8:	2200      	movs	r2, #0
 80078ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80078bc:	4826      	ldr	r0, [pc, #152]	@ (8007958 <HAL_SPI_MspInit+0x1b8>)
 80078be:	f000 fea7 	bl	8008610 <HAL_DMA_Init>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d001      	beq.n	80078cc <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 80078c8:	f7ff ff0a 	bl	80076e0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a22      	ldr	r2, [pc, #136]	@ (8007958 <HAL_SPI_MspInit+0x1b8>)
 80078d0:	67da      	str	r2, [r3, #124]	@ 0x7c
 80078d2:	4a21      	ldr	r2, [pc, #132]	@ (8007958 <HAL_SPI_MspInit+0x1b8>)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 80078d8:	4b21      	ldr	r3, [pc, #132]	@ (8007960 <HAL_SPI_MspInit+0x1c0>)
 80078da:	4a22      	ldr	r2, [pc, #136]	@ (8007964 <HAL_SPI_MspInit+0x1c4>)
 80078dc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80078de:	4b20      	ldr	r3, [pc, #128]	@ (8007960 <HAL_SPI_MspInit+0x1c0>)
 80078e0:	2226      	movs	r2, #38	@ 0x26
 80078e2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80078e4:	4b1e      	ldr	r3, [pc, #120]	@ (8007960 <HAL_SPI_MspInit+0x1c0>)
 80078e6:	2240      	movs	r2, #64	@ 0x40
 80078e8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80078ea:	4b1d      	ldr	r3, [pc, #116]	@ (8007960 <HAL_SPI_MspInit+0x1c0>)
 80078ec:	2200      	movs	r2, #0
 80078ee:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80078f0:	4b1b      	ldr	r3, [pc, #108]	@ (8007960 <HAL_SPI_MspInit+0x1c0>)
 80078f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80078f6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80078f8:	4b19      	ldr	r3, [pc, #100]	@ (8007960 <HAL_SPI_MspInit+0x1c0>)
 80078fa:	2200      	movs	r2, #0
 80078fc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80078fe:	4b18      	ldr	r3, [pc, #96]	@ (8007960 <HAL_SPI_MspInit+0x1c0>)
 8007900:	2200      	movs	r2, #0
 8007902:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8007904:	4b16      	ldr	r3, [pc, #88]	@ (8007960 <HAL_SPI_MspInit+0x1c0>)
 8007906:	2200      	movs	r2, #0
 8007908:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800790a:	4b15      	ldr	r3, [pc, #84]	@ (8007960 <HAL_SPI_MspInit+0x1c0>)
 800790c:	2200      	movs	r2, #0
 800790e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007910:	4b13      	ldr	r3, [pc, #76]	@ (8007960 <HAL_SPI_MspInit+0x1c0>)
 8007912:	2200      	movs	r2, #0
 8007914:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8007916:	4812      	ldr	r0, [pc, #72]	@ (8007960 <HAL_SPI_MspInit+0x1c0>)
 8007918:	f000 fe7a 	bl	8008610 <HAL_DMA_Init>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d001      	beq.n	8007926 <HAL_SPI_MspInit+0x186>
    {
      Error_Handler();
 8007922:	f7ff fedd 	bl	80076e0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a0d      	ldr	r2, [pc, #52]	@ (8007960 <HAL_SPI_MspInit+0x1c0>)
 800792a:	679a      	str	r2, [r3, #120]	@ 0x78
 800792c:	4a0c      	ldr	r2, [pc, #48]	@ (8007960 <HAL_SPI_MspInit+0x1c0>)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 8007932:	2200      	movs	r2, #0
 8007934:	2101      	movs	r1, #1
 8007936:	2023      	movs	r0, #35	@ 0x23
 8007938:	f000 fdad 	bl	8008496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800793c:	2023      	movs	r0, #35	@ 0x23
 800793e:	f000 fdc4 	bl	80084ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8007942:	bf00      	nop
 8007944:	37e0      	adds	r7, #224	@ 0xe0
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	40013000 	.word	0x40013000
 8007950:	58024400 	.word	0x58024400
 8007954:	58020400 	.word	0x58020400
 8007958:	24003378 	.word	0x24003378
 800795c:	40020010 	.word	0x40020010
 8007960:	240033f0 	.word	0x240033f0
 8007964:	40020028 	.word	0x40020028

08007968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800796e:	4b0a      	ldr	r3, [pc, #40]	@ (8007998 <HAL_MspInit+0x30>)
 8007970:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007974:	4a08      	ldr	r2, [pc, #32]	@ (8007998 <HAL_MspInit+0x30>)
 8007976:	f043 0302 	orr.w	r3, r3, #2
 800797a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800797e:	4b06      	ldr	r3, [pc, #24]	@ (8007998 <HAL_MspInit+0x30>)
 8007980:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007984:	f003 0302 	and.w	r3, r3, #2
 8007988:	607b      	str	r3, [r7, #4]
 800798a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr
 8007998:	58024400 	.word	0x58024400

0800799c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800799c:	b480      	push	{r7}
 800799e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80079a0:	bf00      	nop
 80079a2:	e7fd      	b.n	80079a0 <NMI_Handler+0x4>

080079a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80079a4:	b480      	push	{r7}
 80079a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80079a8:	bf00      	nop
 80079aa:	e7fd      	b.n	80079a8 <HardFault_Handler+0x4>

080079ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80079ac:	b480      	push	{r7}
 80079ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80079b0:	bf00      	nop
 80079b2:	e7fd      	b.n	80079b0 <MemManage_Handler+0x4>

080079b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80079b4:	b480      	push	{r7}
 80079b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80079b8:	bf00      	nop
 80079ba:	e7fd      	b.n	80079b8 <BusFault_Handler+0x4>

080079bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80079bc:	b480      	push	{r7}
 80079be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80079c0:	bf00      	nop
 80079c2:	e7fd      	b.n	80079c0 <UsageFault_Handler+0x4>

080079c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80079c4:	b480      	push	{r7}
 80079c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80079c8:	bf00      	nop
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80079d2:	b480      	push	{r7}
 80079d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80079d6:	bf00      	nop
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80079e0:	b480      	push	{r7}
 80079e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80079e4:	bf00      	nop
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	HAL_SYSTICK_Callback();
 80079f2:	f00a fc67 	bl	80122c4 <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80079f6:	f000 fc0d 	bl	8008214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80079fa:	bf00      	nop
 80079fc:	bd80      	pop	{r7, pc}
	...

08007a00 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8007a04:	4802      	ldr	r0, [pc, #8]	@ (8007a10 <DMA1_Stream0_IRQHandler+0x10>)
 8007a06:	f002 f929 	bl	8009c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8007a0a:	bf00      	nop
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	24003378 	.word	0x24003378

08007a14 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8007a18:	4802      	ldr	r0, [pc, #8]	@ (8007a24 <DMA1_Stream1_IRQHandler+0x10>)
 8007a1a:	f002 f91f 	bl	8009c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8007a1e:	bf00      	nop
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	240033f0 	.word	0x240033f0

08007a28 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8007a2c:	4802      	ldr	r0, [pc, #8]	@ (8007a38 <DMA1_Stream2_IRQHandler+0x10>)
 8007a2e:	f002 f915 	bl	8009c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8007a32:	bf00      	nop
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	24003598 	.word	0x24003598

08007a3c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8007a40:	4802      	ldr	r0, [pc, #8]	@ (8007a4c <DMA1_Stream3_IRQHandler+0x10>)
 8007a42:	f002 f90b 	bl	8009c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8007a46:	bf00      	nop
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	24003610 	.word	0x24003610

08007a50 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8007a54:	4802      	ldr	r0, [pc, #8]	@ (8007a60 <SPI1_IRQHandler+0x10>)
 8007a56:	f007 f86f 	bl	800eb38 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8007a5a:	bf00      	nop
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	240032f0 	.word	0x240032f0

08007a64 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007a68:	4803      	ldr	r0, [pc, #12]	@ (8007a78 <USART3_IRQHandler+0x14>)
 8007a6a:	f008 fbcf 	bl	801020c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  USER_UART_IRQHandler(&huart3);
 8007a6e:	4802      	ldr	r0, [pc, #8]	@ (8007a78 <USART3_IRQHandler+0x14>)
 8007a70:	f7ff fb2e 	bl	80070d0 <USER_UART_IRQHandler>
  /* USER CODE END USART3_IRQn 1 */
}
 8007a74:	bf00      	nop
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	24003504 	.word	0x24003504

08007a7c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S50MV85I_IRQ_Pin);
 8007a80:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007a84:	f003 fde1 	bl	800b64a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007a88:	bf00      	nop
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007a90:	4802      	ldr	r0, [pc, #8]	@ (8007a9c <TIM6_DAC_IRQHandler+0x10>)
 8007a92:	f007 fd90 	bl	800f5b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007a96:	bf00      	nop
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	240034b8 	.word	0x240034b8

08007aa0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b086      	sub	sp, #24
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007aac:	2300      	movs	r3, #0
 8007aae:	617b      	str	r3, [r7, #20]
 8007ab0:	e00a      	b.n	8007ac8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007ab2:	f3af 8000 	nop.w
 8007ab6:	4601      	mov	r1, r0
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	1c5a      	adds	r2, r3, #1
 8007abc:	60ba      	str	r2, [r7, #8]
 8007abe:	b2ca      	uxtb	r2, r1
 8007ac0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	617b      	str	r3, [r7, #20]
 8007ac8:	697a      	ldr	r2, [r7, #20]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	dbf0      	blt.n	8007ab2 <_read+0x12>
  }

  return len;
 8007ad0:	687b      	ldr	r3, [r7, #4]
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3718      	adds	r7, #24
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b086      	sub	sp, #24
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	60f8      	str	r0, [r7, #12]
 8007ae2:	60b9      	str	r1, [r7, #8]
 8007ae4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	617b      	str	r3, [r7, #20]
 8007aea:	e009      	b.n	8007b00 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	1c5a      	adds	r2, r3, #1
 8007af0:	60ba      	str	r2, [r7, #8]
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	4618      	mov	r0, r3
 8007af6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	3301      	adds	r3, #1
 8007afe:	617b      	str	r3, [r7, #20]
 8007b00:	697a      	ldr	r2, [r7, #20]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	dbf1      	blt.n	8007aec <_write+0x12>
  }
  return len;
 8007b08:	687b      	ldr	r3, [r7, #4]
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3718      	adds	r7, #24
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <_close>:

int _close(int file)
{
 8007b12:	b480      	push	{r7}
 8007b14:	b083      	sub	sp, #12
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007b1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	370c      	adds	r7, #12
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b083      	sub	sp, #12
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007b3a:	605a      	str	r2, [r3, #4]
  return 0;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	370c      	adds	r7, #12
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr

08007b4a <_isatty>:

int _isatty(int file)
{
 8007b4a:	b480      	push	{r7}
 8007b4c:	b083      	sub	sp, #12
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007b52:	2301      	movs	r3, #1
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b085      	sub	sp, #20
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3714      	adds	r7, #20
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr
	...

08007b7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b086      	sub	sp, #24
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007b84:	4a14      	ldr	r2, [pc, #80]	@ (8007bd8 <_sbrk+0x5c>)
 8007b86:	4b15      	ldr	r3, [pc, #84]	@ (8007bdc <_sbrk+0x60>)
 8007b88:	1ad3      	subs	r3, r2, r3
 8007b8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007b90:	4b13      	ldr	r3, [pc, #76]	@ (8007be0 <_sbrk+0x64>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d102      	bne.n	8007b9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007b98:	4b11      	ldr	r3, [pc, #68]	@ (8007be0 <_sbrk+0x64>)
 8007b9a:	4a12      	ldr	r2, [pc, #72]	@ (8007be4 <_sbrk+0x68>)
 8007b9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007b9e:	4b10      	ldr	r3, [pc, #64]	@ (8007be0 <_sbrk+0x64>)
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d207      	bcs.n	8007bbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007bac:	f021 fe34 	bl	8029818 <__errno>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	220c      	movs	r2, #12
 8007bb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bba:	e009      	b.n	8007bd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007bbc:	4b08      	ldr	r3, [pc, #32]	@ (8007be0 <_sbrk+0x64>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007bc2:	4b07      	ldr	r3, [pc, #28]	@ (8007be0 <_sbrk+0x64>)
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4413      	add	r3, r2
 8007bca:	4a05      	ldr	r2, [pc, #20]	@ (8007be0 <_sbrk+0x64>)
 8007bcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007bce:	68fb      	ldr	r3, [r7, #12]
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3718      	adds	r7, #24
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	24050000 	.word	0x24050000
 8007bdc:	00005000 	.word	0x00005000
 8007be0:	24003468 	.word	0x24003468
 8007be4:	24003818 	.word	0x24003818

08007be8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007be8:	b480      	push	{r7}
 8007bea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007bec:	4b32      	ldr	r3, [pc, #200]	@ (8007cb8 <SystemInit+0xd0>)
 8007bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bf2:	4a31      	ldr	r2, [pc, #196]	@ (8007cb8 <SystemInit+0xd0>)
 8007bf4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007bf8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8007cbc <SystemInit+0xd4>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 030f 	and.w	r3, r3, #15
 8007c04:	2b06      	cmp	r3, #6
 8007c06:	d807      	bhi.n	8007c18 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007c08:	4b2c      	ldr	r3, [pc, #176]	@ (8007cbc <SystemInit+0xd4>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f023 030f 	bic.w	r3, r3, #15
 8007c10:	4a2a      	ldr	r2, [pc, #168]	@ (8007cbc <SystemInit+0xd4>)
 8007c12:	f043 0307 	orr.w	r3, r3, #7
 8007c16:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8007c18:	4b29      	ldr	r3, [pc, #164]	@ (8007cc0 <SystemInit+0xd8>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a28      	ldr	r2, [pc, #160]	@ (8007cc0 <SystemInit+0xd8>)
 8007c1e:	f043 0301 	orr.w	r3, r3, #1
 8007c22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007c24:	4b26      	ldr	r3, [pc, #152]	@ (8007cc0 <SystemInit+0xd8>)
 8007c26:	2200      	movs	r2, #0
 8007c28:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8007c2a:	4b25      	ldr	r3, [pc, #148]	@ (8007cc0 <SystemInit+0xd8>)
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	4924      	ldr	r1, [pc, #144]	@ (8007cc0 <SystemInit+0xd8>)
 8007c30:	4b24      	ldr	r3, [pc, #144]	@ (8007cc4 <SystemInit+0xdc>)
 8007c32:	4013      	ands	r3, r2
 8007c34:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007c36:	4b21      	ldr	r3, [pc, #132]	@ (8007cbc <SystemInit+0xd4>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 0308 	and.w	r3, r3, #8
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d007      	beq.n	8007c52 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007c42:	4b1e      	ldr	r3, [pc, #120]	@ (8007cbc <SystemInit+0xd4>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f023 030f 	bic.w	r3, r3, #15
 8007c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8007cbc <SystemInit+0xd4>)
 8007c4c:	f043 0307 	orr.w	r3, r3, #7
 8007c50:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8007c52:	4b1b      	ldr	r3, [pc, #108]	@ (8007cc0 <SystemInit+0xd8>)
 8007c54:	2200      	movs	r2, #0
 8007c56:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8007c58:	4b19      	ldr	r3, [pc, #100]	@ (8007cc0 <SystemInit+0xd8>)
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8007c5e:	4b18      	ldr	r3, [pc, #96]	@ (8007cc0 <SystemInit+0xd8>)
 8007c60:	2200      	movs	r2, #0
 8007c62:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8007c64:	4b16      	ldr	r3, [pc, #88]	@ (8007cc0 <SystemInit+0xd8>)
 8007c66:	4a18      	ldr	r2, [pc, #96]	@ (8007cc8 <SystemInit+0xe0>)
 8007c68:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8007c6a:	4b15      	ldr	r3, [pc, #84]	@ (8007cc0 <SystemInit+0xd8>)
 8007c6c:	4a17      	ldr	r2, [pc, #92]	@ (8007ccc <SystemInit+0xe4>)
 8007c6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8007c70:	4b13      	ldr	r3, [pc, #76]	@ (8007cc0 <SystemInit+0xd8>)
 8007c72:	4a17      	ldr	r2, [pc, #92]	@ (8007cd0 <SystemInit+0xe8>)
 8007c74:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8007c76:	4b12      	ldr	r3, [pc, #72]	@ (8007cc0 <SystemInit+0xd8>)
 8007c78:	2200      	movs	r2, #0
 8007c7a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8007c7c:	4b10      	ldr	r3, [pc, #64]	@ (8007cc0 <SystemInit+0xd8>)
 8007c7e:	4a14      	ldr	r2, [pc, #80]	@ (8007cd0 <SystemInit+0xe8>)
 8007c80:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8007c82:	4b0f      	ldr	r3, [pc, #60]	@ (8007cc0 <SystemInit+0xd8>)
 8007c84:	2200      	movs	r2, #0
 8007c86:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8007c88:	4b0d      	ldr	r3, [pc, #52]	@ (8007cc0 <SystemInit+0xd8>)
 8007c8a:	4a11      	ldr	r2, [pc, #68]	@ (8007cd0 <SystemInit+0xe8>)
 8007c8c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8007c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8007cc0 <SystemInit+0xd8>)
 8007c90:	2200      	movs	r2, #0
 8007c92:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007c94:	4b0a      	ldr	r3, [pc, #40]	@ (8007cc0 <SystemInit+0xd8>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a09      	ldr	r2, [pc, #36]	@ (8007cc0 <SystemInit+0xd8>)
 8007c9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007c9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007ca0:	4b07      	ldr	r3, [pc, #28]	@ (8007cc0 <SystemInit+0xd8>)
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8007ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8007cd4 <SystemInit+0xec>)
 8007ca8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8007cac:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8007cae:	bf00      	nop
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr
 8007cb8:	e000ed00 	.word	0xe000ed00
 8007cbc:	52002000 	.word	0x52002000
 8007cc0:	58024400 	.word	0x58024400
 8007cc4:	eaf6ed7f 	.word	0xeaf6ed7f
 8007cc8:	02020200 	.word	0x02020200
 8007ccc:	01ff0000 	.word	0x01ff0000
 8007cd0:	01010280 	.word	0x01010280
 8007cd4:	52004000 	.word	0x52004000

08007cd8 <MX_TIM5_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b088      	sub	sp, #32
 8007cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007cde:	f107 0310 	add.w	r3, r7, #16
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	601a      	str	r2, [r3, #0]
 8007ce6:	605a      	str	r2, [r3, #4]
 8007ce8:	609a      	str	r2, [r3, #8]
 8007cea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007cec:	1d3b      	adds	r3, r7, #4
 8007cee:	2200      	movs	r2, #0
 8007cf0:	601a      	str	r2, [r3, #0]
 8007cf2:	605a      	str	r2, [r3, #4]
 8007cf4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8007cf6:	4b21      	ldr	r3, [pc, #132]	@ (8007d7c <MX_TIM5_Init+0xa4>)
 8007cf8:	4a21      	ldr	r2, [pc, #132]	@ (8007d80 <MX_TIM5_Init+0xa8>)
 8007cfa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = (TIM5_BUS_CLK / 1000000) - 1;
 8007cfc:	f004 fc34 	bl	800c568 <HAL_RCC_GetPCLK1Freq>
 8007d00:	4603      	mov	r3, r0
 8007d02:	005b      	lsls	r3, r3, #1
 8007d04:	4a1f      	ldr	r2, [pc, #124]	@ (8007d84 <MX_TIM5_Init+0xac>)
 8007d06:	fba2 2303 	umull	r2, r3, r2, r3
 8007d0a:	0c9b      	lsrs	r3, r3, #18
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	4a1b      	ldr	r2, [pc, #108]	@ (8007d7c <MX_TIM5_Init+0xa4>)
 8007d10:	6053      	str	r3, [r2, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d12:	4b1a      	ldr	r3, [pc, #104]	@ (8007d7c <MX_TIM5_Init+0xa4>)
 8007d14:	2200      	movs	r2, #0
 8007d16:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8007d18:	4b18      	ldr	r3, [pc, #96]	@ (8007d7c <MX_TIM5_Init+0xa4>)
 8007d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d1e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007d20:	4b16      	ldr	r3, [pc, #88]	@ (8007d7c <MX_TIM5_Init+0xa4>)
 8007d22:	2200      	movs	r2, #0
 8007d24:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007d26:	4b15      	ldr	r3, [pc, #84]	@ (8007d7c <MX_TIM5_Init+0xa4>)
 8007d28:	2200      	movs	r2, #0
 8007d2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8007d2c:	4813      	ldr	r0, [pc, #76]	@ (8007d7c <MX_TIM5_Init+0xa4>)
 8007d2e:	f007 fab8 	bl	800f2a2 <HAL_TIM_Base_Init>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d001      	beq.n	8007d3c <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8007d38:	f7ff fcd2 	bl	80076e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007d3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007d40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8007d42:	f107 0310 	add.w	r3, r7, #16
 8007d46:	4619      	mov	r1, r3
 8007d48:	480c      	ldr	r0, [pc, #48]	@ (8007d7c <MX_TIM5_Init+0xa4>)
 8007d4a:	f007 fd63 	bl	800f814 <HAL_TIM_ConfigClockSource>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d001      	beq.n	8007d58 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8007d54:	f7ff fcc4 	bl	80076e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007d58:	2320      	movs	r3, #32
 8007d5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8007d60:	1d3b      	adds	r3, r7, #4
 8007d62:	4619      	mov	r1, r3
 8007d64:	4805      	ldr	r0, [pc, #20]	@ (8007d7c <MX_TIM5_Init+0xa4>)
 8007d66:	f007 ffc5 	bl	800fcf4 <HAL_TIMEx_MasterConfigSynchronization>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d001      	beq.n	8007d74 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8007d70:	f7ff fcb6 	bl	80076e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8007d74:	bf00      	nop
 8007d76:	3720      	adds	r7, #32
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	2400346c 	.word	0x2400346c
 8007d80:	40000c00 	.word	0x40000c00
 8007d84:	431bde83 	.word	0x431bde83

08007d88 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007d8e:	1d3b      	adds	r3, r7, #4
 8007d90:	2200      	movs	r2, #0
 8007d92:	601a      	str	r2, [r3, #0]
 8007d94:	605a      	str	r2, [r3, #4]
 8007d96:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8007d98:	4b18      	ldr	r3, [pc, #96]	@ (8007dfc <MX_TIM6_Init+0x74>)
 8007d9a:	4a19      	ldr	r2, [pc, #100]	@ (8007e00 <MX_TIM6_Init+0x78>)
 8007d9c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = (TIM6_BUS_CLK / 1000000) - 1;
 8007d9e:	f004 fbe3 	bl	800c568 <HAL_RCC_GetPCLK1Freq>
 8007da2:	4603      	mov	r3, r0
 8007da4:	005b      	lsls	r3, r3, #1
 8007da6:	4a17      	ldr	r2, [pc, #92]	@ (8007e04 <MX_TIM6_Init+0x7c>)
 8007da8:	fba2 2303 	umull	r2, r3, r2, r3
 8007dac:	0c9b      	lsrs	r3, r3, #18
 8007dae:	3b01      	subs	r3, #1
 8007db0:	4a12      	ldr	r2, [pc, #72]	@ (8007dfc <MX_TIM6_Init+0x74>)
 8007db2:	6053      	str	r3, [r2, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007db4:	4b11      	ldr	r3, [pc, #68]	@ (8007dfc <MX_TIM6_Init+0x74>)
 8007db6:	2200      	movs	r2, #0
 8007db8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8007dba:	4b10      	ldr	r3, [pc, #64]	@ (8007dfc <MX_TIM6_Init+0x74>)
 8007dbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007dc0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8007dfc <MX_TIM6_Init+0x74>)
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8007dc8:	480c      	ldr	r0, [pc, #48]	@ (8007dfc <MX_TIM6_Init+0x74>)
 8007dca:	f007 fa6a 	bl	800f2a2 <HAL_TIM_Base_Init>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d001      	beq.n	8007dd8 <MX_TIM6_Init+0x50>
  {
    Error_Handler();
 8007dd4:	f7ff fc84 	bl	80076e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8007dd8:	2310      	movs	r3, #16
 8007dda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8007de0:	1d3b      	adds	r3, r7, #4
 8007de2:	4619      	mov	r1, r3
 8007de4:	4805      	ldr	r0, [pc, #20]	@ (8007dfc <MX_TIM6_Init+0x74>)
 8007de6:	f007 ff85 	bl	800fcf4 <HAL_TIMEx_MasterConfigSynchronization>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d001      	beq.n	8007df4 <MX_TIM6_Init+0x6c>
  {
    Error_Handler();
 8007df0:	f7ff fc76 	bl	80076e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8007df4:	bf00      	nop
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	240034b8 	.word	0x240034b8
 8007e00:	40001000 	.word	0x40001000
 8007e04:	431bde83 	.word	0x431bde83

08007e08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a19      	ldr	r2, [pc, #100]	@ (8007e7c <HAL_TIM_Base_MspInit+0x74>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d10f      	bne.n	8007e3a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8007e1a:	4b19      	ldr	r3, [pc, #100]	@ (8007e80 <HAL_TIM_Base_MspInit+0x78>)
 8007e1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e20:	4a17      	ldr	r2, [pc, #92]	@ (8007e80 <HAL_TIM_Base_MspInit+0x78>)
 8007e22:	f043 0308 	orr.w	r3, r3, #8
 8007e26:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007e2a:	4b15      	ldr	r3, [pc, #84]	@ (8007e80 <HAL_TIM_Base_MspInit+0x78>)
 8007e2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e30:	f003 0308 	and.w	r3, r3, #8
 8007e34:	60fb      	str	r3, [r7, #12]
 8007e36:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8007e38:	e01b      	b.n	8007e72 <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM6)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a11      	ldr	r2, [pc, #68]	@ (8007e84 <HAL_TIM_Base_MspInit+0x7c>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d116      	bne.n	8007e72 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007e44:	4b0e      	ldr	r3, [pc, #56]	@ (8007e80 <HAL_TIM_Base_MspInit+0x78>)
 8007e46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e4a:	4a0d      	ldr	r2, [pc, #52]	@ (8007e80 <HAL_TIM_Base_MspInit+0x78>)
 8007e4c:	f043 0310 	orr.w	r3, r3, #16
 8007e50:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007e54:	4b0a      	ldr	r3, [pc, #40]	@ (8007e80 <HAL_TIM_Base_MspInit+0x78>)
 8007e56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e5a:	f003 0310 	and.w	r3, r3, #16
 8007e5e:	60bb      	str	r3, [r7, #8]
 8007e60:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8007e62:	2200      	movs	r2, #0
 8007e64:	2103      	movs	r1, #3
 8007e66:	2036      	movs	r0, #54	@ 0x36
 8007e68:	f000 fb15 	bl	8008496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007e6c:	2036      	movs	r0, #54	@ 0x36
 8007e6e:	f000 fb2c 	bl	80084ca <HAL_NVIC_EnableIRQ>
}
 8007e72:	bf00      	nop
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	40000c00 	.word	0x40000c00
 8007e80:	58024400 	.word	0x58024400
 8007e84:	40001000 	.word	0x40001000

08007e88 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8007e8c:	4b26      	ldr	r3, [pc, #152]	@ (8007f28 <MX_USART3_UART_Init+0xa0>)
 8007e8e:	4a27      	ldr	r2, [pc, #156]	@ (8007f2c <MX_USART3_UART_Init+0xa4>)
 8007e90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8007e92:	4b25      	ldr	r3, [pc, #148]	@ (8007f28 <MX_USART3_UART_Init+0xa0>)
 8007e94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007e98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007e9a:	4b23      	ldr	r3, [pc, #140]	@ (8007f28 <MX_USART3_UART_Init+0xa0>)
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007ea0:	4b21      	ldr	r3, [pc, #132]	@ (8007f28 <MX_USART3_UART_Init+0xa0>)
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007ea6:	4b20      	ldr	r3, [pc, #128]	@ (8007f28 <MX_USART3_UART_Init+0xa0>)
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007eac:	4b1e      	ldr	r3, [pc, #120]	@ (8007f28 <MX_USART3_UART_Init+0xa0>)
 8007eae:	220c      	movs	r2, #12
 8007eb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8007f28 <MX_USART3_UART_Init+0xa0>)
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8007f28 <MX_USART3_UART_Init+0xa0>)
 8007eba:	2200      	movs	r2, #0
 8007ebc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8007f28 <MX_USART3_UART_Init+0xa0>)
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007ec4:	4b18      	ldr	r3, [pc, #96]	@ (8007f28 <MX_USART3_UART_Init+0xa0>)
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8007eca:	4b17      	ldr	r3, [pc, #92]	@ (8007f28 <MX_USART3_UART_Init+0xa0>)
 8007ecc:	2230      	movs	r2, #48	@ 0x30
 8007ece:	629a      	str	r2, [r3, #40]	@ 0x28
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8007ed0:	4b15      	ldr	r3, [pc, #84]	@ (8007f28 <MX_USART3_UART_Init+0xa0>)
 8007ed2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007ed6:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart3.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8007ed8:	4b13      	ldr	r3, [pc, #76]	@ (8007f28 <MX_USART3_UART_Init+0xa0>)
 8007eda:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007ede:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007ee0:	4811      	ldr	r0, [pc, #68]	@ (8007f28 <MX_USART3_UART_Init+0xa0>)
 8007ee2:	f007 ffc1 	bl	800fe68 <HAL_UART_Init>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d001      	beq.n	8007ef0 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8007eec:	f7ff fbf8 	bl	80076e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	480d      	ldr	r0, [pc, #52]	@ (8007f28 <MX_USART3_UART_Init+0xa0>)
 8007ef4:	f00a f8bc 	bl	8012070 <HAL_UARTEx_SetTxFifoThreshold>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d001      	beq.n	8007f02 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8007efe:	f7ff fbef 	bl	80076e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007f02:	2100      	movs	r1, #0
 8007f04:	4808      	ldr	r0, [pc, #32]	@ (8007f28 <MX_USART3_UART_Init+0xa0>)
 8007f06:	f00a f8f1 	bl	80120ec <HAL_UARTEx_SetRxFifoThreshold>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d001      	beq.n	8007f14 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8007f10:	f7ff fbe6 	bl	80076e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8007f14:	4804      	ldr	r0, [pc, #16]	@ (8007f28 <MX_USART3_UART_Init+0xa0>)
 8007f16:	f00a f872 	bl	8011ffe <HAL_UARTEx_DisableFifoMode>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d001      	beq.n	8007f24 <MX_USART3_UART_Init+0x9c>
  {
    Error_Handler();
 8007f20:	f7ff fbde 	bl	80076e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8007f24:	bf00      	nop
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	24003504 	.word	0x24003504
 8007f2c:	40004800 	.word	0x40004800

08007f30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b0b8      	sub	sp, #224	@ 0xe0
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f38:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	601a      	str	r2, [r3, #0]
 8007f40:	605a      	str	r2, [r3, #4]
 8007f42:	609a      	str	r2, [r3, #8]
 8007f44:	60da      	str	r2, [r3, #12]
 8007f46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007f48:	f107 0310 	add.w	r3, r7, #16
 8007f4c:	22b8      	movs	r2, #184	@ 0xb8
 8007f4e:	2100      	movs	r1, #0
 8007f50:	4618      	mov	r0, r3
 8007f52:	f021 fbfe 	bl	8029752 <memset>
  if(uartHandle->Instance==USART3)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a59      	ldr	r2, [pc, #356]	@ (80080c0 <HAL_UART_MspInit+0x190>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	f040 80aa 	bne.w	80080b6 <HAL_UART_MspInit+0x186>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8007f62:	f04f 0202 	mov.w	r2, #2
 8007f66:	f04f 0300 	mov.w	r3, #0
 8007f6a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007f74:	f107 0310 	add.w	r3, r7, #16
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f004 fb21 	bl	800c5c0 <HAL_RCCEx_PeriphCLKConfig>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d001      	beq.n	8007f88 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8007f84:	f7ff fbac 	bl	80076e0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8007f88:	4b4e      	ldr	r3, [pc, #312]	@ (80080c4 <HAL_UART_MspInit+0x194>)
 8007f8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f8e:	4a4d      	ldr	r2, [pc, #308]	@ (80080c4 <HAL_UART_MspInit+0x194>)
 8007f90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007f94:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007f98:	4b4a      	ldr	r3, [pc, #296]	@ (80080c4 <HAL_UART_MspInit+0x194>)
 8007f9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007fa2:	60fb      	str	r3, [r7, #12]
 8007fa4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007fa6:	4b47      	ldr	r3, [pc, #284]	@ (80080c4 <HAL_UART_MspInit+0x194>)
 8007fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007fac:	4a45      	ldr	r2, [pc, #276]	@ (80080c4 <HAL_UART_MspInit+0x194>)
 8007fae:	f043 0308 	orr.w	r3, r3, #8
 8007fb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007fb6:	4b43      	ldr	r3, [pc, #268]	@ (80080c4 <HAL_UART_MspInit+0x194>)
 8007fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007fbc:	f003 0308 	and.w	r3, r3, #8
 8007fc0:	60bb      	str	r3, [r7, #8]
 8007fc2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007fc4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007fc8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fcc:	2302      	movs	r3, #2
 8007fce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007fde:	2307      	movs	r3, #7
 8007fe0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007fe4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8007fe8:	4619      	mov	r1, r3
 8007fea:	4837      	ldr	r0, [pc, #220]	@ (80080c8 <HAL_UART_MspInit+0x198>)
 8007fec:	f003 f954 	bl	800b298 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream2;
 8007ff0:	4b36      	ldr	r3, [pc, #216]	@ (80080cc <HAL_UART_MspInit+0x19c>)
 8007ff2:	4a37      	ldr	r2, [pc, #220]	@ (80080d0 <HAL_UART_MspInit+0x1a0>)
 8007ff4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8007ff6:	4b35      	ldr	r3, [pc, #212]	@ (80080cc <HAL_UART_MspInit+0x19c>)
 8007ff8:	222d      	movs	r2, #45	@ 0x2d
 8007ffa:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007ffc:	4b33      	ldr	r3, [pc, #204]	@ (80080cc <HAL_UART_MspInit+0x19c>)
 8007ffe:	2200      	movs	r2, #0
 8008000:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008002:	4b32      	ldr	r3, [pc, #200]	@ (80080cc <HAL_UART_MspInit+0x19c>)
 8008004:	2200      	movs	r2, #0
 8008006:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008008:	4b30      	ldr	r3, [pc, #192]	@ (80080cc <HAL_UART_MspInit+0x19c>)
 800800a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800800e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008010:	4b2e      	ldr	r3, [pc, #184]	@ (80080cc <HAL_UART_MspInit+0x19c>)
 8008012:	2200      	movs	r2, #0
 8008014:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008016:	4b2d      	ldr	r3, [pc, #180]	@ (80080cc <HAL_UART_MspInit+0x19c>)
 8008018:	2200      	movs	r2, #0
 800801a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800801c:	4b2b      	ldr	r3, [pc, #172]	@ (80080cc <HAL_UART_MspInit+0x19c>)
 800801e:	2200      	movs	r2, #0
 8008020:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008022:	4b2a      	ldr	r3, [pc, #168]	@ (80080cc <HAL_UART_MspInit+0x19c>)
 8008024:	2200      	movs	r2, #0
 8008026:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008028:	4b28      	ldr	r3, [pc, #160]	@ (80080cc <HAL_UART_MspInit+0x19c>)
 800802a:	2200      	movs	r2, #0
 800802c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800802e:	4827      	ldr	r0, [pc, #156]	@ (80080cc <HAL_UART_MspInit+0x19c>)
 8008030:	f000 faee 	bl	8008610 <HAL_DMA_Init>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d001      	beq.n	800803e <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 800803a:	f7ff fb51 	bl	80076e0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a22      	ldr	r2, [pc, #136]	@ (80080cc <HAL_UART_MspInit+0x19c>)
 8008042:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8008046:	4a21      	ldr	r2, [pc, #132]	@ (80080cc <HAL_UART_MspInit+0x19c>)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800804c:	4b21      	ldr	r3, [pc, #132]	@ (80080d4 <HAL_UART_MspInit+0x1a4>)
 800804e:	4a22      	ldr	r2, [pc, #136]	@ (80080d8 <HAL_UART_MspInit+0x1a8>)
 8008050:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8008052:	4b20      	ldr	r3, [pc, #128]	@ (80080d4 <HAL_UART_MspInit+0x1a4>)
 8008054:	222e      	movs	r2, #46	@ 0x2e
 8008056:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008058:	4b1e      	ldr	r3, [pc, #120]	@ (80080d4 <HAL_UART_MspInit+0x1a4>)
 800805a:	2240      	movs	r2, #64	@ 0x40
 800805c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800805e:	4b1d      	ldr	r3, [pc, #116]	@ (80080d4 <HAL_UART_MspInit+0x1a4>)
 8008060:	2200      	movs	r2, #0
 8008062:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008064:	4b1b      	ldr	r3, [pc, #108]	@ (80080d4 <HAL_UART_MspInit+0x1a4>)
 8008066:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800806a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800806c:	4b19      	ldr	r3, [pc, #100]	@ (80080d4 <HAL_UART_MspInit+0x1a4>)
 800806e:	2200      	movs	r2, #0
 8008070:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008072:	4b18      	ldr	r3, [pc, #96]	@ (80080d4 <HAL_UART_MspInit+0x1a4>)
 8008074:	2200      	movs	r2, #0
 8008076:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8008078:	4b16      	ldr	r3, [pc, #88]	@ (80080d4 <HAL_UART_MspInit+0x1a4>)
 800807a:	2200      	movs	r2, #0
 800807c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800807e:	4b15      	ldr	r3, [pc, #84]	@ (80080d4 <HAL_UART_MspInit+0x1a4>)
 8008080:	2200      	movs	r2, #0
 8008082:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008084:	4b13      	ldr	r3, [pc, #76]	@ (80080d4 <HAL_UART_MspInit+0x1a4>)
 8008086:	2200      	movs	r2, #0
 8008088:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800808a:	4812      	ldr	r0, [pc, #72]	@ (80080d4 <HAL_UART_MspInit+0x1a4>)
 800808c:	f000 fac0 	bl	8008610 <HAL_DMA_Init>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d001      	beq.n	800809a <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8008096:	f7ff fb23 	bl	80076e0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a0d      	ldr	r2, [pc, #52]	@ (80080d4 <HAL_UART_MspInit+0x1a4>)
 800809e:	67da      	str	r2, [r3, #124]	@ 0x7c
 80080a0:	4a0c      	ldr	r2, [pc, #48]	@ (80080d4 <HAL_UART_MspInit+0x1a4>)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80080a6:	2200      	movs	r2, #0
 80080a8:	2100      	movs	r1, #0
 80080aa:	2027      	movs	r0, #39	@ 0x27
 80080ac:	f000 f9f3 	bl	8008496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80080b0:	2027      	movs	r0, #39	@ 0x27
 80080b2:	f000 fa0a 	bl	80084ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80080b6:	bf00      	nop
 80080b8:	37e0      	adds	r7, #224	@ 0xe0
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	40004800 	.word	0x40004800
 80080c4:	58024400 	.word	0x58024400
 80080c8:	58020c00 	.word	0x58020c00
 80080cc:	24003598 	.word	0x24003598
 80080d0:	40020040 	.word	0x40020040
 80080d4:	24003610 	.word	0x24003610
 80080d8:	40020058 	.word	0x40020058

080080dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80080dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008114 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80080e0:	f7ff fd82 	bl	8007be8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80080e4:	480c      	ldr	r0, [pc, #48]	@ (8008118 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80080e6:	490d      	ldr	r1, [pc, #52]	@ (800811c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80080e8:	4a0d      	ldr	r2, [pc, #52]	@ (8008120 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80080ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80080ec:	e002      	b.n	80080f4 <LoopCopyDataInit>

080080ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80080ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80080f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80080f2:	3304      	adds	r3, #4

080080f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80080f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80080f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80080f8:	d3f9      	bcc.n	80080ee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80080fa:	4a0a      	ldr	r2, [pc, #40]	@ (8008124 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80080fc:	4c0a      	ldr	r4, [pc, #40]	@ (8008128 <LoopFillZerobss+0x22>)
  movs r3, #0
 80080fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008100:	e001      	b.n	8008106 <LoopFillZerobss>

08008102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008104:	3204      	adds	r2, #4

08008106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008108:	d3fb      	bcc.n	8008102 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800810a:	f021 fb8b 	bl	8029824 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800810e:	f7ff fa2b 	bl	8007568 <main>
  bx  lr
 8008112:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008114:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8008118:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800811c:	24000234 	.word	0x24000234
  ldr r2, =_sidata
 8008120:	08031564 	.word	0x08031564
  ldr r2, =_sbss
 8008124:	24000234 	.word	0x24000234
  ldr r4, =_ebss
 8008128:	24003814 	.word	0x24003814

0800812c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800812c:	e7fe      	b.n	800812c <ADC3_IRQHandler>
	...

08008130 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008136:	2003      	movs	r0, #3
 8008138:	f000 f9a2 	bl	8008480 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800813c:	f004 f86a 	bl	800c214 <HAL_RCC_GetSysClockFreq>
 8008140:	4602      	mov	r2, r0
 8008142:	4b15      	ldr	r3, [pc, #84]	@ (8008198 <HAL_Init+0x68>)
 8008144:	699b      	ldr	r3, [r3, #24]
 8008146:	0a1b      	lsrs	r3, r3, #8
 8008148:	f003 030f 	and.w	r3, r3, #15
 800814c:	4913      	ldr	r1, [pc, #76]	@ (800819c <HAL_Init+0x6c>)
 800814e:	5ccb      	ldrb	r3, [r1, r3]
 8008150:	f003 031f 	and.w	r3, r3, #31
 8008154:	fa22 f303 	lsr.w	r3, r2, r3
 8008158:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800815a:	4b0f      	ldr	r3, [pc, #60]	@ (8008198 <HAL_Init+0x68>)
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	f003 030f 	and.w	r3, r3, #15
 8008162:	4a0e      	ldr	r2, [pc, #56]	@ (800819c <HAL_Init+0x6c>)
 8008164:	5cd3      	ldrb	r3, [r2, r3]
 8008166:	f003 031f 	and.w	r3, r3, #31
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	fa22 f303 	lsr.w	r3, r2, r3
 8008170:	4a0b      	ldr	r2, [pc, #44]	@ (80081a0 <HAL_Init+0x70>)
 8008172:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008174:	4a0b      	ldr	r2, [pc, #44]	@ (80081a4 <HAL_Init+0x74>)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800817a:	200f      	movs	r0, #15
 800817c:	f000 f814 	bl	80081a8 <HAL_InitTick>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	e002      	b.n	8008190 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800818a:	f7ff fbed 	bl	8007968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	58024400 	.word	0x58024400
 800819c:	0802ca00 	.word	0x0802ca00
 80081a0:	2400005c 	.word	0x2400005c
 80081a4:	24000058 	.word	0x24000058

080081a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80081b0:	4b15      	ldr	r3, [pc, #84]	@ (8008208 <HAL_InitTick+0x60>)
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d101      	bne.n	80081bc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	e021      	b.n	8008200 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80081bc:	4b13      	ldr	r3, [pc, #76]	@ (800820c <HAL_InitTick+0x64>)
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	4b11      	ldr	r3, [pc, #68]	@ (8008208 <HAL_InitTick+0x60>)
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	4619      	mov	r1, r3
 80081c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80081ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80081ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 f987 	bl	80084e6 <HAL_SYSTICK_Config>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d001      	beq.n	80081e2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e00e      	b.n	8008200 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2b0f      	cmp	r3, #15
 80081e6:	d80a      	bhi.n	80081fe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80081e8:	2200      	movs	r2, #0
 80081ea:	6879      	ldr	r1, [r7, #4]
 80081ec:	f04f 30ff 	mov.w	r0, #4294967295
 80081f0:	f000 f951 	bl	8008496 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80081f4:	4a06      	ldr	r2, [pc, #24]	@ (8008210 <HAL_InitTick+0x68>)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80081fa:	2300      	movs	r3, #0
 80081fc:	e000      	b.n	8008200 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
}
 8008200:	4618      	mov	r0, r3
 8008202:	3708      	adds	r7, #8
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	24000064 	.word	0x24000064
 800820c:	24000058 	.word	0x24000058
 8008210:	24000060 	.word	0x24000060

08008214 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008214:	b480      	push	{r7}
 8008216:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008218:	4b06      	ldr	r3, [pc, #24]	@ (8008234 <HAL_IncTick+0x20>)
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	461a      	mov	r2, r3
 800821e:	4b06      	ldr	r3, [pc, #24]	@ (8008238 <HAL_IncTick+0x24>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4413      	add	r3, r2
 8008224:	4a04      	ldr	r2, [pc, #16]	@ (8008238 <HAL_IncTick+0x24>)
 8008226:	6013      	str	r3, [r2, #0]
}
 8008228:	bf00      	nop
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	24000064 	.word	0x24000064
 8008238:	24003688 	.word	0x24003688

0800823c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800823c:	b480      	push	{r7}
 800823e:	af00      	add	r7, sp, #0
  return uwTick;
 8008240:	4b03      	ldr	r3, [pc, #12]	@ (8008250 <HAL_GetTick+0x14>)
 8008242:	681b      	ldr	r3, [r3, #0]
}
 8008244:	4618      	mov	r0, r3
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr
 800824e:	bf00      	nop
 8008250:	24003688 	.word	0x24003688

08008254 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800825c:	f7ff ffee 	bl	800823c <HAL_GetTick>
 8008260:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800826c:	d005      	beq.n	800827a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800826e:	4b0a      	ldr	r3, [pc, #40]	@ (8008298 <HAL_Delay+0x44>)
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	461a      	mov	r2, r3
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	4413      	add	r3, r2
 8008278:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800827a:	bf00      	nop
 800827c:	f7ff ffde 	bl	800823c <HAL_GetTick>
 8008280:	4602      	mov	r2, r0
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	1ad3      	subs	r3, r2, r3
 8008286:	68fa      	ldr	r2, [r7, #12]
 8008288:	429a      	cmp	r2, r3
 800828a:	d8f7      	bhi.n	800827c <HAL_Delay+0x28>
  {
  }
}
 800828c:	bf00      	nop
 800828e:	bf00      	nop
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	24000064 	.word	0x24000064

0800829c <__NVIC_SetPriorityGrouping>:
{
 800829c:	b480      	push	{r7}
 800829e:	b085      	sub	sp, #20
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f003 0307 	and.w	r3, r3, #7
 80082aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80082ac:	4b0b      	ldr	r3, [pc, #44]	@ (80082dc <__NVIC_SetPriorityGrouping+0x40>)
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80082b2:	68ba      	ldr	r2, [r7, #8]
 80082b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80082b8:	4013      	ands	r3, r2
 80082ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80082c4:	4b06      	ldr	r3, [pc, #24]	@ (80082e0 <__NVIC_SetPriorityGrouping+0x44>)
 80082c6:	4313      	orrs	r3, r2
 80082c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80082ca:	4a04      	ldr	r2, [pc, #16]	@ (80082dc <__NVIC_SetPriorityGrouping+0x40>)
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	60d3      	str	r3, [r2, #12]
}
 80082d0:	bf00      	nop
 80082d2:	3714      	adds	r7, #20
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr
 80082dc:	e000ed00 	.word	0xe000ed00
 80082e0:	05fa0000 	.word	0x05fa0000

080082e4 <__NVIC_GetPriorityGrouping>:
{
 80082e4:	b480      	push	{r7}
 80082e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80082e8:	4b04      	ldr	r3, [pc, #16]	@ (80082fc <__NVIC_GetPriorityGrouping+0x18>)
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	0a1b      	lsrs	r3, r3, #8
 80082ee:	f003 0307 	and.w	r3, r3, #7
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	e000ed00 	.word	0xe000ed00

08008300 <__NVIC_EnableIRQ>:
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	4603      	mov	r3, r0
 8008308:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800830a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800830e:	2b00      	cmp	r3, #0
 8008310:	db0b      	blt.n	800832a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008312:	88fb      	ldrh	r3, [r7, #6]
 8008314:	f003 021f 	and.w	r2, r3, #31
 8008318:	4907      	ldr	r1, [pc, #28]	@ (8008338 <__NVIC_EnableIRQ+0x38>)
 800831a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800831e:	095b      	lsrs	r3, r3, #5
 8008320:	2001      	movs	r0, #1
 8008322:	fa00 f202 	lsl.w	r2, r0, r2
 8008326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800832a:	bf00      	nop
 800832c:	370c      	adds	r7, #12
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	e000e100 	.word	0xe000e100

0800833c <__NVIC_GetPendingIRQ>:
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	4603      	mov	r3, r0
 8008344:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008346:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800834a:	2b00      	cmp	r3, #0
 800834c:	db0e      	blt.n	800836c <__NVIC_GetPendingIRQ+0x30>
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800834e:	4a0b      	ldr	r2, [pc, #44]	@ (800837c <__NVIC_GetPendingIRQ+0x40>)
 8008350:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008354:	095b      	lsrs	r3, r3, #5
 8008356:	3340      	adds	r3, #64	@ 0x40
 8008358:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800835c:	88fb      	ldrh	r3, [r7, #6]
 800835e:	f003 031f 	and.w	r3, r3, #31
 8008362:	fa22 f303 	lsr.w	r3, r2, r3
 8008366:	f003 0301 	and.w	r3, r3, #1
 800836a:	e000      	b.n	800836e <__NVIC_GetPendingIRQ+0x32>
    return(0U);
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	370c      	adds	r7, #12
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	e000e100 	.word	0xe000e100

08008380 <__NVIC_SetPriority>:
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	4603      	mov	r3, r0
 8008388:	6039      	str	r1, [r7, #0]
 800838a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800838c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008390:	2b00      	cmp	r3, #0
 8008392:	db0a      	blt.n	80083aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	b2da      	uxtb	r2, r3
 8008398:	490c      	ldr	r1, [pc, #48]	@ (80083cc <__NVIC_SetPriority+0x4c>)
 800839a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800839e:	0112      	lsls	r2, r2, #4
 80083a0:	b2d2      	uxtb	r2, r2
 80083a2:	440b      	add	r3, r1
 80083a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80083a8:	e00a      	b.n	80083c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	b2da      	uxtb	r2, r3
 80083ae:	4908      	ldr	r1, [pc, #32]	@ (80083d0 <__NVIC_SetPriority+0x50>)
 80083b0:	88fb      	ldrh	r3, [r7, #6]
 80083b2:	f003 030f 	and.w	r3, r3, #15
 80083b6:	3b04      	subs	r3, #4
 80083b8:	0112      	lsls	r2, r2, #4
 80083ba:	b2d2      	uxtb	r2, r2
 80083bc:	440b      	add	r3, r1
 80083be:	761a      	strb	r2, [r3, #24]
}
 80083c0:	bf00      	nop
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr
 80083cc:	e000e100 	.word	0xe000e100
 80083d0:	e000ed00 	.word	0xe000ed00

080083d4 <NVIC_EncodePriority>:
{
 80083d4:	b480      	push	{r7}
 80083d6:	b089      	sub	sp, #36	@ 0x24
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f003 0307 	and.w	r3, r3, #7
 80083e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	f1c3 0307 	rsb	r3, r3, #7
 80083ee:	2b04      	cmp	r3, #4
 80083f0:	bf28      	it	cs
 80083f2:	2304      	movcs	r3, #4
 80083f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	3304      	adds	r3, #4
 80083fa:	2b06      	cmp	r3, #6
 80083fc:	d902      	bls.n	8008404 <NVIC_EncodePriority+0x30>
 80083fe:	69fb      	ldr	r3, [r7, #28]
 8008400:	3b03      	subs	r3, #3
 8008402:	e000      	b.n	8008406 <NVIC_EncodePriority+0x32>
 8008404:	2300      	movs	r3, #0
 8008406:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008408:	f04f 32ff 	mov.w	r2, #4294967295
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	fa02 f303 	lsl.w	r3, r2, r3
 8008412:	43da      	mvns	r2, r3
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	401a      	ands	r2, r3
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800841c:	f04f 31ff 	mov.w	r1, #4294967295
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	fa01 f303 	lsl.w	r3, r1, r3
 8008426:	43d9      	mvns	r1, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800842c:	4313      	orrs	r3, r2
}
 800842e:	4618      	mov	r0, r3
 8008430:	3724      	adds	r7, #36	@ 0x24
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr
	...

0800843c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	3b01      	subs	r3, #1
 8008448:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800844c:	d301      	bcc.n	8008452 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800844e:	2301      	movs	r3, #1
 8008450:	e00f      	b.n	8008472 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008452:	4a0a      	ldr	r2, [pc, #40]	@ (800847c <SysTick_Config+0x40>)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	3b01      	subs	r3, #1
 8008458:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800845a:	210f      	movs	r1, #15
 800845c:	f04f 30ff 	mov.w	r0, #4294967295
 8008460:	f7ff ff8e 	bl	8008380 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008464:	4b05      	ldr	r3, [pc, #20]	@ (800847c <SysTick_Config+0x40>)
 8008466:	2200      	movs	r2, #0
 8008468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800846a:	4b04      	ldr	r3, [pc, #16]	@ (800847c <SysTick_Config+0x40>)
 800846c:	2207      	movs	r2, #7
 800846e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3708      	adds	r7, #8
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	e000e010 	.word	0xe000e010

08008480 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f7ff ff07 	bl	800829c <__NVIC_SetPriorityGrouping>
}
 800848e:	bf00      	nop
 8008490:	3708      	adds	r7, #8
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b086      	sub	sp, #24
 800849a:	af00      	add	r7, sp, #0
 800849c:	4603      	mov	r3, r0
 800849e:	60b9      	str	r1, [r7, #8]
 80084a0:	607a      	str	r2, [r7, #4]
 80084a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80084a4:	f7ff ff1e 	bl	80082e4 <__NVIC_GetPriorityGrouping>
 80084a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	68b9      	ldr	r1, [r7, #8]
 80084ae:	6978      	ldr	r0, [r7, #20]
 80084b0:	f7ff ff90 	bl	80083d4 <NVIC_EncodePriority>
 80084b4:	4602      	mov	r2, r0
 80084b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80084ba:	4611      	mov	r1, r2
 80084bc:	4618      	mov	r0, r3
 80084be:	f7ff ff5f 	bl	8008380 <__NVIC_SetPriority>
}
 80084c2:	bf00      	nop
 80084c4:	3718      	adds	r7, #24
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b082      	sub	sp, #8
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	4603      	mov	r3, r0
 80084d2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80084d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80084d8:	4618      	mov	r0, r3
 80084da:	f7ff ff11 	bl	8008300 <__NVIC_EnableIRQ>
}
 80084de:	bf00      	nop
 80084e0:	3708      	adds	r7, #8
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b082      	sub	sp, #8
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f7ff ffa4 	bl	800843c <SysTick_Config>
 80084f4:	4603      	mov	r3, r0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
	...

08008500 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8008500:	b480      	push	{r7}
 8008502:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8008504:	f3bf 8f5f 	dmb	sy
}
 8008508:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800850a:	4b07      	ldr	r3, [pc, #28]	@ (8008528 <HAL_MPU_Disable+0x28>)
 800850c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800850e:	4a06      	ldr	r2, [pc, #24]	@ (8008528 <HAL_MPU_Disable+0x28>)
 8008510:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008514:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8008516:	4b05      	ldr	r3, [pc, #20]	@ (800852c <HAL_MPU_Disable+0x2c>)
 8008518:	2200      	movs	r2, #0
 800851a:	605a      	str	r2, [r3, #4]
}
 800851c:	bf00      	nop
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	e000ed00 	.word	0xe000ed00
 800852c:	e000ed90 	.word	0xe000ed90

08008530 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8008538:	4a0b      	ldr	r2, [pc, #44]	@ (8008568 <HAL_MPU_Enable+0x38>)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f043 0301 	orr.w	r3, r3, #1
 8008540:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8008542:	4b0a      	ldr	r3, [pc, #40]	@ (800856c <HAL_MPU_Enable+0x3c>)
 8008544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008546:	4a09      	ldr	r2, [pc, #36]	@ (800856c <HAL_MPU_Enable+0x3c>)
 8008548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800854c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800854e:	f3bf 8f4f 	dsb	sy
}
 8008552:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008554:	f3bf 8f6f 	isb	sy
}
 8008558:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800855a:	bf00      	nop
 800855c:	370c      	adds	r7, #12
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop
 8008568:	e000ed90 	.word	0xe000ed90
 800856c:	e000ed00 	.word	0xe000ed00

08008570 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	785a      	ldrb	r2, [r3, #1]
 800857c:	4b1b      	ldr	r3, [pc, #108]	@ (80085ec <HAL_MPU_ConfigRegion+0x7c>)
 800857e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8008580:	4b1a      	ldr	r3, [pc, #104]	@ (80085ec <HAL_MPU_ConfigRegion+0x7c>)
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	4a19      	ldr	r2, [pc, #100]	@ (80085ec <HAL_MPU_ConfigRegion+0x7c>)
 8008586:	f023 0301 	bic.w	r3, r3, #1
 800858a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800858c:	4a17      	ldr	r2, [pc, #92]	@ (80085ec <HAL_MPU_ConfigRegion+0x7c>)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	7b1b      	ldrb	r3, [r3, #12]
 8008598:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	7adb      	ldrb	r3, [r3, #11]
 800859e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80085a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	7a9b      	ldrb	r3, [r3, #10]
 80085a6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80085a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	7b5b      	ldrb	r3, [r3, #13]
 80085ae:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80085b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	7b9b      	ldrb	r3, [r3, #14]
 80085b6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80085b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	7bdb      	ldrb	r3, [r3, #15]
 80085be:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80085c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	7a5b      	ldrb	r3, [r3, #9]
 80085c6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80085c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	7a1b      	ldrb	r3, [r3, #8]
 80085ce:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80085d0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	7812      	ldrb	r2, [r2, #0]
 80085d6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80085d8:	4a04      	ldr	r2, [pc, #16]	@ (80085ec <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80085da:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80085dc:	6113      	str	r3, [r2, #16]
}
 80085de:	bf00      	nop
 80085e0:	370c      	adds	r7, #12
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	e000ed90 	.word	0xe000ed90

080085f0 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval status  - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	4603      	mov	r3, r0
 80085f8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 80085fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80085fe:	4618      	mov	r0, r3
 8008600:	f7ff fe9c 	bl	800833c <__NVIC_GetPendingIRQ>
 8008604:	4603      	mov	r3, r0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3708      	adds	r7, #8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
	...

08008610 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b086      	sub	sp, #24
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8008618:	f7ff fe10 	bl	800823c <HAL_GetTick>
 800861c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d101      	bne.n	8008628 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	e312      	b.n	8008c4e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a66      	ldr	r2, [pc, #408]	@ (80087c8 <HAL_DMA_Init+0x1b8>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d04a      	beq.n	80086c8 <HAL_DMA_Init+0xb8>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a65      	ldr	r2, [pc, #404]	@ (80087cc <HAL_DMA_Init+0x1bc>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d045      	beq.n	80086c8 <HAL_DMA_Init+0xb8>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a63      	ldr	r2, [pc, #396]	@ (80087d0 <HAL_DMA_Init+0x1c0>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d040      	beq.n	80086c8 <HAL_DMA_Init+0xb8>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a62      	ldr	r2, [pc, #392]	@ (80087d4 <HAL_DMA_Init+0x1c4>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d03b      	beq.n	80086c8 <HAL_DMA_Init+0xb8>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a60      	ldr	r2, [pc, #384]	@ (80087d8 <HAL_DMA_Init+0x1c8>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d036      	beq.n	80086c8 <HAL_DMA_Init+0xb8>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a5f      	ldr	r2, [pc, #380]	@ (80087dc <HAL_DMA_Init+0x1cc>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d031      	beq.n	80086c8 <HAL_DMA_Init+0xb8>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a5d      	ldr	r2, [pc, #372]	@ (80087e0 <HAL_DMA_Init+0x1d0>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d02c      	beq.n	80086c8 <HAL_DMA_Init+0xb8>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a5c      	ldr	r2, [pc, #368]	@ (80087e4 <HAL_DMA_Init+0x1d4>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d027      	beq.n	80086c8 <HAL_DMA_Init+0xb8>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a5a      	ldr	r2, [pc, #360]	@ (80087e8 <HAL_DMA_Init+0x1d8>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d022      	beq.n	80086c8 <HAL_DMA_Init+0xb8>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a59      	ldr	r2, [pc, #356]	@ (80087ec <HAL_DMA_Init+0x1dc>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d01d      	beq.n	80086c8 <HAL_DMA_Init+0xb8>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a57      	ldr	r2, [pc, #348]	@ (80087f0 <HAL_DMA_Init+0x1e0>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d018      	beq.n	80086c8 <HAL_DMA_Init+0xb8>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a56      	ldr	r2, [pc, #344]	@ (80087f4 <HAL_DMA_Init+0x1e4>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d013      	beq.n	80086c8 <HAL_DMA_Init+0xb8>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a54      	ldr	r2, [pc, #336]	@ (80087f8 <HAL_DMA_Init+0x1e8>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d00e      	beq.n	80086c8 <HAL_DMA_Init+0xb8>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a53      	ldr	r2, [pc, #332]	@ (80087fc <HAL_DMA_Init+0x1ec>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d009      	beq.n	80086c8 <HAL_DMA_Init+0xb8>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a51      	ldr	r2, [pc, #324]	@ (8008800 <HAL_DMA_Init+0x1f0>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d004      	beq.n	80086c8 <HAL_DMA_Init+0xb8>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a50      	ldr	r2, [pc, #320]	@ (8008804 <HAL_DMA_Init+0x1f4>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d101      	bne.n	80086cc <HAL_DMA_Init+0xbc>
 80086c8:	2301      	movs	r3, #1
 80086ca:	e000      	b.n	80086ce <HAL_DMA_Init+0xbe>
 80086cc:	2300      	movs	r3, #0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	f000 813c 	beq.w	800894c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2202      	movs	r2, #2
 80086d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a37      	ldr	r2, [pc, #220]	@ (80087c8 <HAL_DMA_Init+0x1b8>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d04a      	beq.n	8008784 <HAL_DMA_Init+0x174>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a36      	ldr	r2, [pc, #216]	@ (80087cc <HAL_DMA_Init+0x1bc>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d045      	beq.n	8008784 <HAL_DMA_Init+0x174>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a34      	ldr	r2, [pc, #208]	@ (80087d0 <HAL_DMA_Init+0x1c0>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d040      	beq.n	8008784 <HAL_DMA_Init+0x174>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a33      	ldr	r2, [pc, #204]	@ (80087d4 <HAL_DMA_Init+0x1c4>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d03b      	beq.n	8008784 <HAL_DMA_Init+0x174>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a31      	ldr	r2, [pc, #196]	@ (80087d8 <HAL_DMA_Init+0x1c8>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d036      	beq.n	8008784 <HAL_DMA_Init+0x174>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a30      	ldr	r2, [pc, #192]	@ (80087dc <HAL_DMA_Init+0x1cc>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d031      	beq.n	8008784 <HAL_DMA_Init+0x174>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a2e      	ldr	r2, [pc, #184]	@ (80087e0 <HAL_DMA_Init+0x1d0>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d02c      	beq.n	8008784 <HAL_DMA_Init+0x174>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a2d      	ldr	r2, [pc, #180]	@ (80087e4 <HAL_DMA_Init+0x1d4>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d027      	beq.n	8008784 <HAL_DMA_Init+0x174>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a2b      	ldr	r2, [pc, #172]	@ (80087e8 <HAL_DMA_Init+0x1d8>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d022      	beq.n	8008784 <HAL_DMA_Init+0x174>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a2a      	ldr	r2, [pc, #168]	@ (80087ec <HAL_DMA_Init+0x1dc>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d01d      	beq.n	8008784 <HAL_DMA_Init+0x174>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a28      	ldr	r2, [pc, #160]	@ (80087f0 <HAL_DMA_Init+0x1e0>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d018      	beq.n	8008784 <HAL_DMA_Init+0x174>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a27      	ldr	r2, [pc, #156]	@ (80087f4 <HAL_DMA_Init+0x1e4>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d013      	beq.n	8008784 <HAL_DMA_Init+0x174>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a25      	ldr	r2, [pc, #148]	@ (80087f8 <HAL_DMA_Init+0x1e8>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d00e      	beq.n	8008784 <HAL_DMA_Init+0x174>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a24      	ldr	r2, [pc, #144]	@ (80087fc <HAL_DMA_Init+0x1ec>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d009      	beq.n	8008784 <HAL_DMA_Init+0x174>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a22      	ldr	r2, [pc, #136]	@ (8008800 <HAL_DMA_Init+0x1f0>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d004      	beq.n	8008784 <HAL_DMA_Init+0x174>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a21      	ldr	r2, [pc, #132]	@ (8008804 <HAL_DMA_Init+0x1f4>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d108      	bne.n	8008796 <HAL_DMA_Init+0x186>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f022 0201 	bic.w	r2, r2, #1
 8008792:	601a      	str	r2, [r3, #0]
 8008794:	e007      	b.n	80087a6 <HAL_DMA_Init+0x196>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f022 0201 	bic.w	r2, r2, #1
 80087a4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80087a6:	e02f      	b.n	8008808 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80087a8:	f7ff fd48 	bl	800823c <HAL_GetTick>
 80087ac:	4602      	mov	r2, r0
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	2b05      	cmp	r3, #5
 80087b4:	d928      	bls.n	8008808 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2220      	movs	r2, #32
 80087ba:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2203      	movs	r2, #3
 80087c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	e242      	b.n	8008c4e <HAL_DMA_Init+0x63e>
 80087c8:	40020010 	.word	0x40020010
 80087cc:	40020028 	.word	0x40020028
 80087d0:	40020040 	.word	0x40020040
 80087d4:	40020058 	.word	0x40020058
 80087d8:	40020070 	.word	0x40020070
 80087dc:	40020088 	.word	0x40020088
 80087e0:	400200a0 	.word	0x400200a0
 80087e4:	400200b8 	.word	0x400200b8
 80087e8:	40020410 	.word	0x40020410
 80087ec:	40020428 	.word	0x40020428
 80087f0:	40020440 	.word	0x40020440
 80087f4:	40020458 	.word	0x40020458
 80087f8:	40020470 	.word	0x40020470
 80087fc:	40020488 	.word	0x40020488
 8008800:	400204a0 	.word	0x400204a0
 8008804:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 0301 	and.w	r3, r3, #1
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1c8      	bne.n	80087a8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800881e:	697a      	ldr	r2, [r7, #20]
 8008820:	4b83      	ldr	r3, [pc, #524]	@ (8008a30 <HAL_DMA_Init+0x420>)
 8008822:	4013      	ands	r3, r2
 8008824:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800882e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	691b      	ldr	r3, [r3, #16]
 8008834:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800883a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	699b      	ldr	r3, [r3, #24]
 8008840:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008846:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6a1b      	ldr	r3, [r3, #32]
 800884c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800884e:	697a      	ldr	r2, [r7, #20]
 8008850:	4313      	orrs	r3, r2
 8008852:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008858:	2b04      	cmp	r3, #4
 800885a:	d107      	bne.n	800886c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008864:	4313      	orrs	r3, r2
 8008866:	697a      	ldr	r2, [r7, #20]
 8008868:	4313      	orrs	r3, r2
 800886a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	2b28      	cmp	r3, #40	@ 0x28
 8008872:	d903      	bls.n	800887c <HAL_DMA_Init+0x26c>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	2b2e      	cmp	r3, #46	@ 0x2e
 800887a:	d91f      	bls.n	80088bc <HAL_DMA_Init+0x2ac>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	2b3e      	cmp	r3, #62	@ 0x3e
 8008882:	d903      	bls.n	800888c <HAL_DMA_Init+0x27c>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	2b42      	cmp	r3, #66	@ 0x42
 800888a:	d917      	bls.n	80088bc <HAL_DMA_Init+0x2ac>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	2b46      	cmp	r3, #70	@ 0x46
 8008892:	d903      	bls.n	800889c <HAL_DMA_Init+0x28c>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	2b48      	cmp	r3, #72	@ 0x48
 800889a:	d90f      	bls.n	80088bc <HAL_DMA_Init+0x2ac>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	2b4e      	cmp	r3, #78	@ 0x4e
 80088a2:	d903      	bls.n	80088ac <HAL_DMA_Init+0x29c>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	2b52      	cmp	r3, #82	@ 0x52
 80088aa:	d907      	bls.n	80088bc <HAL_DMA_Init+0x2ac>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	2b73      	cmp	r3, #115	@ 0x73
 80088b2:	d905      	bls.n	80088c0 <HAL_DMA_Init+0x2b0>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	2b77      	cmp	r3, #119	@ 0x77
 80088ba:	d801      	bhi.n	80088c0 <HAL_DMA_Init+0x2b0>
 80088bc:	2301      	movs	r3, #1
 80088be:	e000      	b.n	80088c2 <HAL_DMA_Init+0x2b2>
 80088c0:	2300      	movs	r3, #0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d003      	beq.n	80088ce <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80088cc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	697a      	ldr	r2, [r7, #20]
 80088d4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	695b      	ldr	r3, [r3, #20]
 80088dc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	f023 0307 	bic.w	r3, r3, #7
 80088e4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ea:	697a      	ldr	r2, [r7, #20]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088f4:	2b04      	cmp	r3, #4
 80088f6:	d117      	bne.n	8008928 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088fc:	697a      	ldr	r2, [r7, #20]
 80088fe:	4313      	orrs	r3, r2
 8008900:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00e      	beq.n	8008928 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f002 fb3a 	bl	800af84 <DMA_CheckFifoParam>
 8008910:	4603      	mov	r3, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d008      	beq.n	8008928 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2240      	movs	r2, #64	@ 0x40
 800891a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	e192      	b.n	8008c4e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	697a      	ldr	r2, [r7, #20]
 800892e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f002 fa75 	bl	800ae20 <DMA_CalcBaseAndBitshift>
 8008936:	4603      	mov	r3, r0
 8008938:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800893e:	f003 031f 	and.w	r3, r3, #31
 8008942:	223f      	movs	r2, #63	@ 0x3f
 8008944:	409a      	lsls	r2, r3
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	609a      	str	r2, [r3, #8]
 800894a:	e0c8      	b.n	8008ade <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a38      	ldr	r2, [pc, #224]	@ (8008a34 <HAL_DMA_Init+0x424>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d022      	beq.n	800899c <HAL_DMA_Init+0x38c>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a37      	ldr	r2, [pc, #220]	@ (8008a38 <HAL_DMA_Init+0x428>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d01d      	beq.n	800899c <HAL_DMA_Init+0x38c>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a35      	ldr	r2, [pc, #212]	@ (8008a3c <HAL_DMA_Init+0x42c>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d018      	beq.n	800899c <HAL_DMA_Init+0x38c>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a34      	ldr	r2, [pc, #208]	@ (8008a40 <HAL_DMA_Init+0x430>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d013      	beq.n	800899c <HAL_DMA_Init+0x38c>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a32      	ldr	r2, [pc, #200]	@ (8008a44 <HAL_DMA_Init+0x434>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d00e      	beq.n	800899c <HAL_DMA_Init+0x38c>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a31      	ldr	r2, [pc, #196]	@ (8008a48 <HAL_DMA_Init+0x438>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d009      	beq.n	800899c <HAL_DMA_Init+0x38c>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a2f      	ldr	r2, [pc, #188]	@ (8008a4c <HAL_DMA_Init+0x43c>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d004      	beq.n	800899c <HAL_DMA_Init+0x38c>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a2e      	ldr	r2, [pc, #184]	@ (8008a50 <HAL_DMA_Init+0x440>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d101      	bne.n	80089a0 <HAL_DMA_Init+0x390>
 800899c:	2301      	movs	r3, #1
 800899e:	e000      	b.n	80089a2 <HAL_DMA_Init+0x392>
 80089a0:	2300      	movs	r3, #0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	f000 8092 	beq.w	8008acc <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a21      	ldr	r2, [pc, #132]	@ (8008a34 <HAL_DMA_Init+0x424>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d021      	beq.n	80089f6 <HAL_DMA_Init+0x3e6>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a20      	ldr	r2, [pc, #128]	@ (8008a38 <HAL_DMA_Init+0x428>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d01c      	beq.n	80089f6 <HAL_DMA_Init+0x3e6>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a1e      	ldr	r2, [pc, #120]	@ (8008a3c <HAL_DMA_Init+0x42c>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d017      	beq.n	80089f6 <HAL_DMA_Init+0x3e6>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a1d      	ldr	r2, [pc, #116]	@ (8008a40 <HAL_DMA_Init+0x430>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d012      	beq.n	80089f6 <HAL_DMA_Init+0x3e6>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a1b      	ldr	r2, [pc, #108]	@ (8008a44 <HAL_DMA_Init+0x434>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d00d      	beq.n	80089f6 <HAL_DMA_Init+0x3e6>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a1a      	ldr	r2, [pc, #104]	@ (8008a48 <HAL_DMA_Init+0x438>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d008      	beq.n	80089f6 <HAL_DMA_Init+0x3e6>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a18      	ldr	r2, [pc, #96]	@ (8008a4c <HAL_DMA_Init+0x43c>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d003      	beq.n	80089f6 <HAL_DMA_Init+0x3e6>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a17      	ldr	r2, [pc, #92]	@ (8008a50 <HAL_DMA_Init+0x440>)
 80089f4:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2202      	movs	r2, #2
 80089fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8008a0e:	697a      	ldr	r2, [r7, #20]
 8008a10:	4b10      	ldr	r3, [pc, #64]	@ (8008a54 <HAL_DMA_Init+0x444>)
 8008a12:	4013      	ands	r3, r2
 8008a14:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	2b40      	cmp	r3, #64	@ 0x40
 8008a1c:	d01c      	beq.n	8008a58 <HAL_DMA_Init+0x448>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	2b80      	cmp	r3, #128	@ 0x80
 8008a24:	d102      	bne.n	8008a2c <HAL_DMA_Init+0x41c>
 8008a26:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008a2a:	e016      	b.n	8008a5a <HAL_DMA_Init+0x44a>
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	e014      	b.n	8008a5a <HAL_DMA_Init+0x44a>
 8008a30:	fe10803f 	.word	0xfe10803f
 8008a34:	58025408 	.word	0x58025408
 8008a38:	5802541c 	.word	0x5802541c
 8008a3c:	58025430 	.word	0x58025430
 8008a40:	58025444 	.word	0x58025444
 8008a44:	58025458 	.word	0x58025458
 8008a48:	5802546c 	.word	0x5802546c
 8008a4c:	58025480 	.word	0x58025480
 8008a50:	58025494 	.word	0x58025494
 8008a54:	fffe000f 	.word	0xfffe000f
 8008a58:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	68d2      	ldr	r2, [r2, #12]
 8008a5e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008a60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8008a68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	695b      	ldr	r3, [r3, #20]
 8008a6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8008a70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	699b      	ldr	r3, [r3, #24]
 8008a76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8008a78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	69db      	ldr	r3, [r3, #28]
 8008a7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8008a80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6a1b      	ldr	r3, [r3, #32]
 8008a86:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8008a88:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008a8a:	697a      	ldr	r2, [r7, #20]
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	697a      	ldr	r2, [r7, #20]
 8008a96:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	4b6e      	ldr	r3, [pc, #440]	@ (8008c58 <HAL_DMA_Init+0x648>)
 8008aa0:	4413      	add	r3, r2
 8008aa2:	4a6e      	ldr	r2, [pc, #440]	@ (8008c5c <HAL_DMA_Init+0x64c>)
 8008aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8008aa8:	091b      	lsrs	r3, r3, #4
 8008aaa:	009a      	lsls	r2, r3, #2
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f002 f9b5 	bl	800ae20 <DMA_CalcBaseAndBitshift>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008abe:	f003 031f 	and.w	r3, r3, #31
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	409a      	lsls	r2, r3
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	605a      	str	r2, [r3, #4]
 8008aca:	e008      	b.n	8008ade <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2240      	movs	r2, #64	@ 0x40
 8008ad0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2203      	movs	r2, #3
 8008ad6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e0b7      	b.n	8008c4e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a5f      	ldr	r2, [pc, #380]	@ (8008c60 <HAL_DMA_Init+0x650>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d072      	beq.n	8008bce <HAL_DMA_Init+0x5be>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a5d      	ldr	r2, [pc, #372]	@ (8008c64 <HAL_DMA_Init+0x654>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d06d      	beq.n	8008bce <HAL_DMA_Init+0x5be>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a5c      	ldr	r2, [pc, #368]	@ (8008c68 <HAL_DMA_Init+0x658>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d068      	beq.n	8008bce <HAL_DMA_Init+0x5be>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a5a      	ldr	r2, [pc, #360]	@ (8008c6c <HAL_DMA_Init+0x65c>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d063      	beq.n	8008bce <HAL_DMA_Init+0x5be>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a59      	ldr	r2, [pc, #356]	@ (8008c70 <HAL_DMA_Init+0x660>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d05e      	beq.n	8008bce <HAL_DMA_Init+0x5be>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a57      	ldr	r2, [pc, #348]	@ (8008c74 <HAL_DMA_Init+0x664>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d059      	beq.n	8008bce <HAL_DMA_Init+0x5be>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a56      	ldr	r2, [pc, #344]	@ (8008c78 <HAL_DMA_Init+0x668>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d054      	beq.n	8008bce <HAL_DMA_Init+0x5be>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a54      	ldr	r2, [pc, #336]	@ (8008c7c <HAL_DMA_Init+0x66c>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d04f      	beq.n	8008bce <HAL_DMA_Init+0x5be>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a53      	ldr	r2, [pc, #332]	@ (8008c80 <HAL_DMA_Init+0x670>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d04a      	beq.n	8008bce <HAL_DMA_Init+0x5be>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a51      	ldr	r2, [pc, #324]	@ (8008c84 <HAL_DMA_Init+0x674>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d045      	beq.n	8008bce <HAL_DMA_Init+0x5be>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a50      	ldr	r2, [pc, #320]	@ (8008c88 <HAL_DMA_Init+0x678>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d040      	beq.n	8008bce <HAL_DMA_Init+0x5be>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a4e      	ldr	r2, [pc, #312]	@ (8008c8c <HAL_DMA_Init+0x67c>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d03b      	beq.n	8008bce <HAL_DMA_Init+0x5be>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a4d      	ldr	r2, [pc, #308]	@ (8008c90 <HAL_DMA_Init+0x680>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d036      	beq.n	8008bce <HAL_DMA_Init+0x5be>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a4b      	ldr	r2, [pc, #300]	@ (8008c94 <HAL_DMA_Init+0x684>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d031      	beq.n	8008bce <HAL_DMA_Init+0x5be>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a4a      	ldr	r2, [pc, #296]	@ (8008c98 <HAL_DMA_Init+0x688>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d02c      	beq.n	8008bce <HAL_DMA_Init+0x5be>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a48      	ldr	r2, [pc, #288]	@ (8008c9c <HAL_DMA_Init+0x68c>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d027      	beq.n	8008bce <HAL_DMA_Init+0x5be>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a47      	ldr	r2, [pc, #284]	@ (8008ca0 <HAL_DMA_Init+0x690>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d022      	beq.n	8008bce <HAL_DMA_Init+0x5be>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a45      	ldr	r2, [pc, #276]	@ (8008ca4 <HAL_DMA_Init+0x694>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d01d      	beq.n	8008bce <HAL_DMA_Init+0x5be>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a44      	ldr	r2, [pc, #272]	@ (8008ca8 <HAL_DMA_Init+0x698>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d018      	beq.n	8008bce <HAL_DMA_Init+0x5be>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a42      	ldr	r2, [pc, #264]	@ (8008cac <HAL_DMA_Init+0x69c>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d013      	beq.n	8008bce <HAL_DMA_Init+0x5be>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a41      	ldr	r2, [pc, #260]	@ (8008cb0 <HAL_DMA_Init+0x6a0>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d00e      	beq.n	8008bce <HAL_DMA_Init+0x5be>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a3f      	ldr	r2, [pc, #252]	@ (8008cb4 <HAL_DMA_Init+0x6a4>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d009      	beq.n	8008bce <HAL_DMA_Init+0x5be>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a3e      	ldr	r2, [pc, #248]	@ (8008cb8 <HAL_DMA_Init+0x6a8>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d004      	beq.n	8008bce <HAL_DMA_Init+0x5be>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a3c      	ldr	r2, [pc, #240]	@ (8008cbc <HAL_DMA_Init+0x6ac>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d101      	bne.n	8008bd2 <HAL_DMA_Init+0x5c2>
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e000      	b.n	8008bd4 <HAL_DMA_Init+0x5c4>
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d032      	beq.n	8008c3e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f002 fa4f 	bl	800b07c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	2b80      	cmp	r3, #128	@ 0x80
 8008be4:	d102      	bne.n	8008bec <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	685a      	ldr	r2, [r3, #4]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bf4:	b2d2      	uxtb	r2, r2
 8008bf6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008c00:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d010      	beq.n	8008c2c <HAL_DMA_Init+0x61c>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	2b08      	cmp	r3, #8
 8008c10:	d80c      	bhi.n	8008c2c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f002 facc 	bl	800b1b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008c28:	605a      	str	r2, [r3, #4]
 8008c2a:	e008      	b.n	8008c3e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3718      	adds	r7, #24
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	a7fdabf8 	.word	0xa7fdabf8
 8008c5c:	cccccccd 	.word	0xcccccccd
 8008c60:	40020010 	.word	0x40020010
 8008c64:	40020028 	.word	0x40020028
 8008c68:	40020040 	.word	0x40020040
 8008c6c:	40020058 	.word	0x40020058
 8008c70:	40020070 	.word	0x40020070
 8008c74:	40020088 	.word	0x40020088
 8008c78:	400200a0 	.word	0x400200a0
 8008c7c:	400200b8 	.word	0x400200b8
 8008c80:	40020410 	.word	0x40020410
 8008c84:	40020428 	.word	0x40020428
 8008c88:	40020440 	.word	0x40020440
 8008c8c:	40020458 	.word	0x40020458
 8008c90:	40020470 	.word	0x40020470
 8008c94:	40020488 	.word	0x40020488
 8008c98:	400204a0 	.word	0x400204a0
 8008c9c:	400204b8 	.word	0x400204b8
 8008ca0:	58025408 	.word	0x58025408
 8008ca4:	5802541c 	.word	0x5802541c
 8008ca8:	58025430 	.word	0x58025430
 8008cac:	58025444 	.word	0x58025444
 8008cb0:	58025458 	.word	0x58025458
 8008cb4:	5802546c 	.word	0x5802546c
 8008cb8:	58025480 	.word	0x58025480
 8008cbc:	58025494 	.word	0x58025494

08008cc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b086      	sub	sp, #24
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	607a      	str	r2, [r7, #4]
 8008ccc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d101      	bne.n	8008cdc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e226      	b.n	800912a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d101      	bne.n	8008cea <HAL_DMA_Start_IT+0x2a>
 8008ce6:	2302      	movs	r3, #2
 8008ce8:	e21f      	b.n	800912a <HAL_DMA_Start_IT+0x46a>
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2201      	movs	r2, #1
 8008cee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	f040 820a 	bne.w	8009114 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2202      	movs	r2, #2
 8008d04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a68      	ldr	r2, [pc, #416]	@ (8008eb4 <HAL_DMA_Start_IT+0x1f4>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d04a      	beq.n	8008dae <HAL_DMA_Start_IT+0xee>
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a66      	ldr	r2, [pc, #408]	@ (8008eb8 <HAL_DMA_Start_IT+0x1f8>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d045      	beq.n	8008dae <HAL_DMA_Start_IT+0xee>
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a65      	ldr	r2, [pc, #404]	@ (8008ebc <HAL_DMA_Start_IT+0x1fc>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d040      	beq.n	8008dae <HAL_DMA_Start_IT+0xee>
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a63      	ldr	r2, [pc, #396]	@ (8008ec0 <HAL_DMA_Start_IT+0x200>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d03b      	beq.n	8008dae <HAL_DMA_Start_IT+0xee>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a62      	ldr	r2, [pc, #392]	@ (8008ec4 <HAL_DMA_Start_IT+0x204>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d036      	beq.n	8008dae <HAL_DMA_Start_IT+0xee>
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a60      	ldr	r2, [pc, #384]	@ (8008ec8 <HAL_DMA_Start_IT+0x208>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d031      	beq.n	8008dae <HAL_DMA_Start_IT+0xee>
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a5f      	ldr	r2, [pc, #380]	@ (8008ecc <HAL_DMA_Start_IT+0x20c>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d02c      	beq.n	8008dae <HAL_DMA_Start_IT+0xee>
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a5d      	ldr	r2, [pc, #372]	@ (8008ed0 <HAL_DMA_Start_IT+0x210>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d027      	beq.n	8008dae <HAL_DMA_Start_IT+0xee>
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a5c      	ldr	r2, [pc, #368]	@ (8008ed4 <HAL_DMA_Start_IT+0x214>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d022      	beq.n	8008dae <HAL_DMA_Start_IT+0xee>
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a5a      	ldr	r2, [pc, #360]	@ (8008ed8 <HAL_DMA_Start_IT+0x218>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d01d      	beq.n	8008dae <HAL_DMA_Start_IT+0xee>
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a59      	ldr	r2, [pc, #356]	@ (8008edc <HAL_DMA_Start_IT+0x21c>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d018      	beq.n	8008dae <HAL_DMA_Start_IT+0xee>
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a57      	ldr	r2, [pc, #348]	@ (8008ee0 <HAL_DMA_Start_IT+0x220>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d013      	beq.n	8008dae <HAL_DMA_Start_IT+0xee>
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a56      	ldr	r2, [pc, #344]	@ (8008ee4 <HAL_DMA_Start_IT+0x224>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d00e      	beq.n	8008dae <HAL_DMA_Start_IT+0xee>
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a54      	ldr	r2, [pc, #336]	@ (8008ee8 <HAL_DMA_Start_IT+0x228>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d009      	beq.n	8008dae <HAL_DMA_Start_IT+0xee>
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a53      	ldr	r2, [pc, #332]	@ (8008eec <HAL_DMA_Start_IT+0x22c>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d004      	beq.n	8008dae <HAL_DMA_Start_IT+0xee>
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a51      	ldr	r2, [pc, #324]	@ (8008ef0 <HAL_DMA_Start_IT+0x230>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d108      	bne.n	8008dc0 <HAL_DMA_Start_IT+0x100>
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f022 0201 	bic.w	r2, r2, #1
 8008dbc:	601a      	str	r2, [r3, #0]
 8008dbe:	e007      	b.n	8008dd0 <HAL_DMA_Start_IT+0x110>
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f022 0201 	bic.w	r2, r2, #1
 8008dce:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	68b9      	ldr	r1, [r7, #8]
 8008dd6:	68f8      	ldr	r0, [r7, #12]
 8008dd8:	f001 fe76 	bl	800aac8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a34      	ldr	r2, [pc, #208]	@ (8008eb4 <HAL_DMA_Start_IT+0x1f4>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d04a      	beq.n	8008e7c <HAL_DMA_Start_IT+0x1bc>
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a33      	ldr	r2, [pc, #204]	@ (8008eb8 <HAL_DMA_Start_IT+0x1f8>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d045      	beq.n	8008e7c <HAL_DMA_Start_IT+0x1bc>
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a31      	ldr	r2, [pc, #196]	@ (8008ebc <HAL_DMA_Start_IT+0x1fc>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d040      	beq.n	8008e7c <HAL_DMA_Start_IT+0x1bc>
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a30      	ldr	r2, [pc, #192]	@ (8008ec0 <HAL_DMA_Start_IT+0x200>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d03b      	beq.n	8008e7c <HAL_DMA_Start_IT+0x1bc>
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a2e      	ldr	r2, [pc, #184]	@ (8008ec4 <HAL_DMA_Start_IT+0x204>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d036      	beq.n	8008e7c <HAL_DMA_Start_IT+0x1bc>
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a2d      	ldr	r2, [pc, #180]	@ (8008ec8 <HAL_DMA_Start_IT+0x208>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d031      	beq.n	8008e7c <HAL_DMA_Start_IT+0x1bc>
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a2b      	ldr	r2, [pc, #172]	@ (8008ecc <HAL_DMA_Start_IT+0x20c>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d02c      	beq.n	8008e7c <HAL_DMA_Start_IT+0x1bc>
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a2a      	ldr	r2, [pc, #168]	@ (8008ed0 <HAL_DMA_Start_IT+0x210>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d027      	beq.n	8008e7c <HAL_DMA_Start_IT+0x1bc>
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a28      	ldr	r2, [pc, #160]	@ (8008ed4 <HAL_DMA_Start_IT+0x214>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d022      	beq.n	8008e7c <HAL_DMA_Start_IT+0x1bc>
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a27      	ldr	r2, [pc, #156]	@ (8008ed8 <HAL_DMA_Start_IT+0x218>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d01d      	beq.n	8008e7c <HAL_DMA_Start_IT+0x1bc>
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a25      	ldr	r2, [pc, #148]	@ (8008edc <HAL_DMA_Start_IT+0x21c>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d018      	beq.n	8008e7c <HAL_DMA_Start_IT+0x1bc>
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a24      	ldr	r2, [pc, #144]	@ (8008ee0 <HAL_DMA_Start_IT+0x220>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d013      	beq.n	8008e7c <HAL_DMA_Start_IT+0x1bc>
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a22      	ldr	r2, [pc, #136]	@ (8008ee4 <HAL_DMA_Start_IT+0x224>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d00e      	beq.n	8008e7c <HAL_DMA_Start_IT+0x1bc>
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a21      	ldr	r2, [pc, #132]	@ (8008ee8 <HAL_DMA_Start_IT+0x228>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d009      	beq.n	8008e7c <HAL_DMA_Start_IT+0x1bc>
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a1f      	ldr	r2, [pc, #124]	@ (8008eec <HAL_DMA_Start_IT+0x22c>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d004      	beq.n	8008e7c <HAL_DMA_Start_IT+0x1bc>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a1e      	ldr	r2, [pc, #120]	@ (8008ef0 <HAL_DMA_Start_IT+0x230>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d101      	bne.n	8008e80 <HAL_DMA_Start_IT+0x1c0>
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e000      	b.n	8008e82 <HAL_DMA_Start_IT+0x1c2>
 8008e80:	2300      	movs	r3, #0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d036      	beq.n	8008ef4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f023 021e 	bic.w	r2, r3, #30
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f042 0216 	orr.w	r2, r2, #22
 8008e98:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d03e      	beq.n	8008f20 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f042 0208 	orr.w	r2, r2, #8
 8008eb0:	601a      	str	r2, [r3, #0]
 8008eb2:	e035      	b.n	8008f20 <HAL_DMA_Start_IT+0x260>
 8008eb4:	40020010 	.word	0x40020010
 8008eb8:	40020028 	.word	0x40020028
 8008ebc:	40020040 	.word	0x40020040
 8008ec0:	40020058 	.word	0x40020058
 8008ec4:	40020070 	.word	0x40020070
 8008ec8:	40020088 	.word	0x40020088
 8008ecc:	400200a0 	.word	0x400200a0
 8008ed0:	400200b8 	.word	0x400200b8
 8008ed4:	40020410 	.word	0x40020410
 8008ed8:	40020428 	.word	0x40020428
 8008edc:	40020440 	.word	0x40020440
 8008ee0:	40020458 	.word	0x40020458
 8008ee4:	40020470 	.word	0x40020470
 8008ee8:	40020488 	.word	0x40020488
 8008eec:	400204a0 	.word	0x400204a0
 8008ef0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f023 020e 	bic.w	r2, r3, #14
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f042 020a 	orr.w	r2, r2, #10
 8008f06:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d007      	beq.n	8008f20 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f042 0204 	orr.w	r2, r2, #4
 8008f1e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a83      	ldr	r2, [pc, #524]	@ (8009134 <HAL_DMA_Start_IT+0x474>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d072      	beq.n	8009010 <HAL_DMA_Start_IT+0x350>
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a82      	ldr	r2, [pc, #520]	@ (8009138 <HAL_DMA_Start_IT+0x478>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d06d      	beq.n	8009010 <HAL_DMA_Start_IT+0x350>
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a80      	ldr	r2, [pc, #512]	@ (800913c <HAL_DMA_Start_IT+0x47c>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d068      	beq.n	8009010 <HAL_DMA_Start_IT+0x350>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a7f      	ldr	r2, [pc, #508]	@ (8009140 <HAL_DMA_Start_IT+0x480>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d063      	beq.n	8009010 <HAL_DMA_Start_IT+0x350>
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a7d      	ldr	r2, [pc, #500]	@ (8009144 <HAL_DMA_Start_IT+0x484>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d05e      	beq.n	8009010 <HAL_DMA_Start_IT+0x350>
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a7c      	ldr	r2, [pc, #496]	@ (8009148 <HAL_DMA_Start_IT+0x488>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d059      	beq.n	8009010 <HAL_DMA_Start_IT+0x350>
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a7a      	ldr	r2, [pc, #488]	@ (800914c <HAL_DMA_Start_IT+0x48c>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d054      	beq.n	8009010 <HAL_DMA_Start_IT+0x350>
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a79      	ldr	r2, [pc, #484]	@ (8009150 <HAL_DMA_Start_IT+0x490>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d04f      	beq.n	8009010 <HAL_DMA_Start_IT+0x350>
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a77      	ldr	r2, [pc, #476]	@ (8009154 <HAL_DMA_Start_IT+0x494>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d04a      	beq.n	8009010 <HAL_DMA_Start_IT+0x350>
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a76      	ldr	r2, [pc, #472]	@ (8009158 <HAL_DMA_Start_IT+0x498>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d045      	beq.n	8009010 <HAL_DMA_Start_IT+0x350>
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a74      	ldr	r2, [pc, #464]	@ (800915c <HAL_DMA_Start_IT+0x49c>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d040      	beq.n	8009010 <HAL_DMA_Start_IT+0x350>
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a73      	ldr	r2, [pc, #460]	@ (8009160 <HAL_DMA_Start_IT+0x4a0>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d03b      	beq.n	8009010 <HAL_DMA_Start_IT+0x350>
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a71      	ldr	r2, [pc, #452]	@ (8009164 <HAL_DMA_Start_IT+0x4a4>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d036      	beq.n	8009010 <HAL_DMA_Start_IT+0x350>
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a70      	ldr	r2, [pc, #448]	@ (8009168 <HAL_DMA_Start_IT+0x4a8>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d031      	beq.n	8009010 <HAL_DMA_Start_IT+0x350>
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a6e      	ldr	r2, [pc, #440]	@ (800916c <HAL_DMA_Start_IT+0x4ac>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d02c      	beq.n	8009010 <HAL_DMA_Start_IT+0x350>
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a6d      	ldr	r2, [pc, #436]	@ (8009170 <HAL_DMA_Start_IT+0x4b0>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d027      	beq.n	8009010 <HAL_DMA_Start_IT+0x350>
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a6b      	ldr	r2, [pc, #428]	@ (8009174 <HAL_DMA_Start_IT+0x4b4>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d022      	beq.n	8009010 <HAL_DMA_Start_IT+0x350>
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a6a      	ldr	r2, [pc, #424]	@ (8009178 <HAL_DMA_Start_IT+0x4b8>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d01d      	beq.n	8009010 <HAL_DMA_Start_IT+0x350>
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a68      	ldr	r2, [pc, #416]	@ (800917c <HAL_DMA_Start_IT+0x4bc>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d018      	beq.n	8009010 <HAL_DMA_Start_IT+0x350>
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a67      	ldr	r2, [pc, #412]	@ (8009180 <HAL_DMA_Start_IT+0x4c0>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d013      	beq.n	8009010 <HAL_DMA_Start_IT+0x350>
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a65      	ldr	r2, [pc, #404]	@ (8009184 <HAL_DMA_Start_IT+0x4c4>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d00e      	beq.n	8009010 <HAL_DMA_Start_IT+0x350>
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a64      	ldr	r2, [pc, #400]	@ (8009188 <HAL_DMA_Start_IT+0x4c8>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d009      	beq.n	8009010 <HAL_DMA_Start_IT+0x350>
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a62      	ldr	r2, [pc, #392]	@ (800918c <HAL_DMA_Start_IT+0x4cc>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d004      	beq.n	8009010 <HAL_DMA_Start_IT+0x350>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a61      	ldr	r2, [pc, #388]	@ (8009190 <HAL_DMA_Start_IT+0x4d0>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d101      	bne.n	8009014 <HAL_DMA_Start_IT+0x354>
 8009010:	2301      	movs	r3, #1
 8009012:	e000      	b.n	8009016 <HAL_DMA_Start_IT+0x356>
 8009014:	2300      	movs	r3, #0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d01a      	beq.n	8009050 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009024:	2b00      	cmp	r3, #0
 8009026:	d007      	beq.n	8009038 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009032:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009036:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800903c:	2b00      	cmp	r3, #0
 800903e:	d007      	beq.n	8009050 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800904a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800904e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a37      	ldr	r2, [pc, #220]	@ (8009134 <HAL_DMA_Start_IT+0x474>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d04a      	beq.n	80090f0 <HAL_DMA_Start_IT+0x430>
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a36      	ldr	r2, [pc, #216]	@ (8009138 <HAL_DMA_Start_IT+0x478>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d045      	beq.n	80090f0 <HAL_DMA_Start_IT+0x430>
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a34      	ldr	r2, [pc, #208]	@ (800913c <HAL_DMA_Start_IT+0x47c>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d040      	beq.n	80090f0 <HAL_DMA_Start_IT+0x430>
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a33      	ldr	r2, [pc, #204]	@ (8009140 <HAL_DMA_Start_IT+0x480>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d03b      	beq.n	80090f0 <HAL_DMA_Start_IT+0x430>
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a31      	ldr	r2, [pc, #196]	@ (8009144 <HAL_DMA_Start_IT+0x484>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d036      	beq.n	80090f0 <HAL_DMA_Start_IT+0x430>
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a30      	ldr	r2, [pc, #192]	@ (8009148 <HAL_DMA_Start_IT+0x488>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d031      	beq.n	80090f0 <HAL_DMA_Start_IT+0x430>
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a2e      	ldr	r2, [pc, #184]	@ (800914c <HAL_DMA_Start_IT+0x48c>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d02c      	beq.n	80090f0 <HAL_DMA_Start_IT+0x430>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a2d      	ldr	r2, [pc, #180]	@ (8009150 <HAL_DMA_Start_IT+0x490>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d027      	beq.n	80090f0 <HAL_DMA_Start_IT+0x430>
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a2b      	ldr	r2, [pc, #172]	@ (8009154 <HAL_DMA_Start_IT+0x494>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d022      	beq.n	80090f0 <HAL_DMA_Start_IT+0x430>
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a2a      	ldr	r2, [pc, #168]	@ (8009158 <HAL_DMA_Start_IT+0x498>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d01d      	beq.n	80090f0 <HAL_DMA_Start_IT+0x430>
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a28      	ldr	r2, [pc, #160]	@ (800915c <HAL_DMA_Start_IT+0x49c>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d018      	beq.n	80090f0 <HAL_DMA_Start_IT+0x430>
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a27      	ldr	r2, [pc, #156]	@ (8009160 <HAL_DMA_Start_IT+0x4a0>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d013      	beq.n	80090f0 <HAL_DMA_Start_IT+0x430>
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a25      	ldr	r2, [pc, #148]	@ (8009164 <HAL_DMA_Start_IT+0x4a4>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d00e      	beq.n	80090f0 <HAL_DMA_Start_IT+0x430>
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a24      	ldr	r2, [pc, #144]	@ (8009168 <HAL_DMA_Start_IT+0x4a8>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d009      	beq.n	80090f0 <HAL_DMA_Start_IT+0x430>
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a22      	ldr	r2, [pc, #136]	@ (800916c <HAL_DMA_Start_IT+0x4ac>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d004      	beq.n	80090f0 <HAL_DMA_Start_IT+0x430>
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a21      	ldr	r2, [pc, #132]	@ (8009170 <HAL_DMA_Start_IT+0x4b0>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d108      	bne.n	8009102 <HAL_DMA_Start_IT+0x442>
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f042 0201 	orr.w	r2, r2, #1
 80090fe:	601a      	str	r2, [r3, #0]
 8009100:	e012      	b.n	8009128 <HAL_DMA_Start_IT+0x468>
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f042 0201 	orr.w	r2, r2, #1
 8009110:	601a      	str	r2, [r3, #0]
 8009112:	e009      	b.n	8009128 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800911a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2200      	movs	r2, #0
 8009120:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8009124:	2301      	movs	r3, #1
 8009126:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009128:	7dfb      	ldrb	r3, [r7, #23]
}
 800912a:	4618      	mov	r0, r3
 800912c:	3718      	adds	r7, #24
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	40020010 	.word	0x40020010
 8009138:	40020028 	.word	0x40020028
 800913c:	40020040 	.word	0x40020040
 8009140:	40020058 	.word	0x40020058
 8009144:	40020070 	.word	0x40020070
 8009148:	40020088 	.word	0x40020088
 800914c:	400200a0 	.word	0x400200a0
 8009150:	400200b8 	.word	0x400200b8
 8009154:	40020410 	.word	0x40020410
 8009158:	40020428 	.word	0x40020428
 800915c:	40020440 	.word	0x40020440
 8009160:	40020458 	.word	0x40020458
 8009164:	40020470 	.word	0x40020470
 8009168:	40020488 	.word	0x40020488
 800916c:	400204a0 	.word	0x400204a0
 8009170:	400204b8 	.word	0x400204b8
 8009174:	58025408 	.word	0x58025408
 8009178:	5802541c 	.word	0x5802541c
 800917c:	58025430 	.word	0x58025430
 8009180:	58025444 	.word	0x58025444
 8009184:	58025458 	.word	0x58025458
 8009188:	5802546c 	.word	0x5802546c
 800918c:	58025480 	.word	0x58025480
 8009190:	58025494 	.word	0x58025494

08009194 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b086      	sub	sp, #24
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800919c:	f7ff f84e 	bl	800823c <HAL_GetTick>
 80091a0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d101      	bne.n	80091ac <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80091a8:	2301      	movs	r3, #1
 80091aa:	e2dc      	b.n	8009766 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	2b02      	cmp	r3, #2
 80091b6:	d008      	beq.n	80091ca <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2280      	movs	r2, #128	@ 0x80
 80091bc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2200      	movs	r2, #0
 80091c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80091c6:	2301      	movs	r3, #1
 80091c8:	e2cd      	b.n	8009766 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a76      	ldr	r2, [pc, #472]	@ (80093a8 <HAL_DMA_Abort+0x214>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d04a      	beq.n	800926a <HAL_DMA_Abort+0xd6>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a74      	ldr	r2, [pc, #464]	@ (80093ac <HAL_DMA_Abort+0x218>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d045      	beq.n	800926a <HAL_DMA_Abort+0xd6>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a73      	ldr	r2, [pc, #460]	@ (80093b0 <HAL_DMA_Abort+0x21c>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d040      	beq.n	800926a <HAL_DMA_Abort+0xd6>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a71      	ldr	r2, [pc, #452]	@ (80093b4 <HAL_DMA_Abort+0x220>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d03b      	beq.n	800926a <HAL_DMA_Abort+0xd6>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a70      	ldr	r2, [pc, #448]	@ (80093b8 <HAL_DMA_Abort+0x224>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d036      	beq.n	800926a <HAL_DMA_Abort+0xd6>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a6e      	ldr	r2, [pc, #440]	@ (80093bc <HAL_DMA_Abort+0x228>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d031      	beq.n	800926a <HAL_DMA_Abort+0xd6>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a6d      	ldr	r2, [pc, #436]	@ (80093c0 <HAL_DMA_Abort+0x22c>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d02c      	beq.n	800926a <HAL_DMA_Abort+0xd6>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a6b      	ldr	r2, [pc, #428]	@ (80093c4 <HAL_DMA_Abort+0x230>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d027      	beq.n	800926a <HAL_DMA_Abort+0xd6>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a6a      	ldr	r2, [pc, #424]	@ (80093c8 <HAL_DMA_Abort+0x234>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d022      	beq.n	800926a <HAL_DMA_Abort+0xd6>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a68      	ldr	r2, [pc, #416]	@ (80093cc <HAL_DMA_Abort+0x238>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d01d      	beq.n	800926a <HAL_DMA_Abort+0xd6>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a67      	ldr	r2, [pc, #412]	@ (80093d0 <HAL_DMA_Abort+0x23c>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d018      	beq.n	800926a <HAL_DMA_Abort+0xd6>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a65      	ldr	r2, [pc, #404]	@ (80093d4 <HAL_DMA_Abort+0x240>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d013      	beq.n	800926a <HAL_DMA_Abort+0xd6>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a64      	ldr	r2, [pc, #400]	@ (80093d8 <HAL_DMA_Abort+0x244>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d00e      	beq.n	800926a <HAL_DMA_Abort+0xd6>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a62      	ldr	r2, [pc, #392]	@ (80093dc <HAL_DMA_Abort+0x248>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d009      	beq.n	800926a <HAL_DMA_Abort+0xd6>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a61      	ldr	r2, [pc, #388]	@ (80093e0 <HAL_DMA_Abort+0x24c>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d004      	beq.n	800926a <HAL_DMA_Abort+0xd6>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a5f      	ldr	r2, [pc, #380]	@ (80093e4 <HAL_DMA_Abort+0x250>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d101      	bne.n	800926e <HAL_DMA_Abort+0xda>
 800926a:	2301      	movs	r3, #1
 800926c:	e000      	b.n	8009270 <HAL_DMA_Abort+0xdc>
 800926e:	2300      	movs	r3, #0
 8009270:	2b00      	cmp	r3, #0
 8009272:	d013      	beq.n	800929c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f022 021e 	bic.w	r2, r2, #30
 8009282:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	695a      	ldr	r2, [r3, #20]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009292:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	617b      	str	r3, [r7, #20]
 800929a:	e00a      	b.n	80092b2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f022 020e 	bic.w	r2, r2, #14
 80092aa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a3c      	ldr	r2, [pc, #240]	@ (80093a8 <HAL_DMA_Abort+0x214>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d072      	beq.n	80093a2 <HAL_DMA_Abort+0x20e>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a3a      	ldr	r2, [pc, #232]	@ (80093ac <HAL_DMA_Abort+0x218>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d06d      	beq.n	80093a2 <HAL_DMA_Abort+0x20e>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a39      	ldr	r2, [pc, #228]	@ (80093b0 <HAL_DMA_Abort+0x21c>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d068      	beq.n	80093a2 <HAL_DMA_Abort+0x20e>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a37      	ldr	r2, [pc, #220]	@ (80093b4 <HAL_DMA_Abort+0x220>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d063      	beq.n	80093a2 <HAL_DMA_Abort+0x20e>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a36      	ldr	r2, [pc, #216]	@ (80093b8 <HAL_DMA_Abort+0x224>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d05e      	beq.n	80093a2 <HAL_DMA_Abort+0x20e>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a34      	ldr	r2, [pc, #208]	@ (80093bc <HAL_DMA_Abort+0x228>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d059      	beq.n	80093a2 <HAL_DMA_Abort+0x20e>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a33      	ldr	r2, [pc, #204]	@ (80093c0 <HAL_DMA_Abort+0x22c>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d054      	beq.n	80093a2 <HAL_DMA_Abort+0x20e>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a31      	ldr	r2, [pc, #196]	@ (80093c4 <HAL_DMA_Abort+0x230>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d04f      	beq.n	80093a2 <HAL_DMA_Abort+0x20e>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a30      	ldr	r2, [pc, #192]	@ (80093c8 <HAL_DMA_Abort+0x234>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d04a      	beq.n	80093a2 <HAL_DMA_Abort+0x20e>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a2e      	ldr	r2, [pc, #184]	@ (80093cc <HAL_DMA_Abort+0x238>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d045      	beq.n	80093a2 <HAL_DMA_Abort+0x20e>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a2d      	ldr	r2, [pc, #180]	@ (80093d0 <HAL_DMA_Abort+0x23c>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d040      	beq.n	80093a2 <HAL_DMA_Abort+0x20e>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a2b      	ldr	r2, [pc, #172]	@ (80093d4 <HAL_DMA_Abort+0x240>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d03b      	beq.n	80093a2 <HAL_DMA_Abort+0x20e>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a2a      	ldr	r2, [pc, #168]	@ (80093d8 <HAL_DMA_Abort+0x244>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d036      	beq.n	80093a2 <HAL_DMA_Abort+0x20e>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a28      	ldr	r2, [pc, #160]	@ (80093dc <HAL_DMA_Abort+0x248>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d031      	beq.n	80093a2 <HAL_DMA_Abort+0x20e>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a27      	ldr	r2, [pc, #156]	@ (80093e0 <HAL_DMA_Abort+0x24c>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d02c      	beq.n	80093a2 <HAL_DMA_Abort+0x20e>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a25      	ldr	r2, [pc, #148]	@ (80093e4 <HAL_DMA_Abort+0x250>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d027      	beq.n	80093a2 <HAL_DMA_Abort+0x20e>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a24      	ldr	r2, [pc, #144]	@ (80093e8 <HAL_DMA_Abort+0x254>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d022      	beq.n	80093a2 <HAL_DMA_Abort+0x20e>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a22      	ldr	r2, [pc, #136]	@ (80093ec <HAL_DMA_Abort+0x258>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d01d      	beq.n	80093a2 <HAL_DMA_Abort+0x20e>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a21      	ldr	r2, [pc, #132]	@ (80093f0 <HAL_DMA_Abort+0x25c>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d018      	beq.n	80093a2 <HAL_DMA_Abort+0x20e>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a1f      	ldr	r2, [pc, #124]	@ (80093f4 <HAL_DMA_Abort+0x260>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d013      	beq.n	80093a2 <HAL_DMA_Abort+0x20e>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4a1e      	ldr	r2, [pc, #120]	@ (80093f8 <HAL_DMA_Abort+0x264>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d00e      	beq.n	80093a2 <HAL_DMA_Abort+0x20e>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a1c      	ldr	r2, [pc, #112]	@ (80093fc <HAL_DMA_Abort+0x268>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d009      	beq.n	80093a2 <HAL_DMA_Abort+0x20e>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4a1b      	ldr	r2, [pc, #108]	@ (8009400 <HAL_DMA_Abort+0x26c>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d004      	beq.n	80093a2 <HAL_DMA_Abort+0x20e>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a19      	ldr	r2, [pc, #100]	@ (8009404 <HAL_DMA_Abort+0x270>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d132      	bne.n	8009408 <HAL_DMA_Abort+0x274>
 80093a2:	2301      	movs	r3, #1
 80093a4:	e031      	b.n	800940a <HAL_DMA_Abort+0x276>
 80093a6:	bf00      	nop
 80093a8:	40020010 	.word	0x40020010
 80093ac:	40020028 	.word	0x40020028
 80093b0:	40020040 	.word	0x40020040
 80093b4:	40020058 	.word	0x40020058
 80093b8:	40020070 	.word	0x40020070
 80093bc:	40020088 	.word	0x40020088
 80093c0:	400200a0 	.word	0x400200a0
 80093c4:	400200b8 	.word	0x400200b8
 80093c8:	40020410 	.word	0x40020410
 80093cc:	40020428 	.word	0x40020428
 80093d0:	40020440 	.word	0x40020440
 80093d4:	40020458 	.word	0x40020458
 80093d8:	40020470 	.word	0x40020470
 80093dc:	40020488 	.word	0x40020488
 80093e0:	400204a0 	.word	0x400204a0
 80093e4:	400204b8 	.word	0x400204b8
 80093e8:	58025408 	.word	0x58025408
 80093ec:	5802541c 	.word	0x5802541c
 80093f0:	58025430 	.word	0x58025430
 80093f4:	58025444 	.word	0x58025444
 80093f8:	58025458 	.word	0x58025458
 80093fc:	5802546c 	.word	0x5802546c
 8009400:	58025480 	.word	0x58025480
 8009404:	58025494 	.word	0x58025494
 8009408:	2300      	movs	r3, #0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d007      	beq.n	800941e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009418:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800941c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a6d      	ldr	r2, [pc, #436]	@ (80095d8 <HAL_DMA_Abort+0x444>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d04a      	beq.n	80094be <HAL_DMA_Abort+0x32a>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a6b      	ldr	r2, [pc, #428]	@ (80095dc <HAL_DMA_Abort+0x448>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d045      	beq.n	80094be <HAL_DMA_Abort+0x32a>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a6a      	ldr	r2, [pc, #424]	@ (80095e0 <HAL_DMA_Abort+0x44c>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d040      	beq.n	80094be <HAL_DMA_Abort+0x32a>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a68      	ldr	r2, [pc, #416]	@ (80095e4 <HAL_DMA_Abort+0x450>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d03b      	beq.n	80094be <HAL_DMA_Abort+0x32a>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a67      	ldr	r2, [pc, #412]	@ (80095e8 <HAL_DMA_Abort+0x454>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d036      	beq.n	80094be <HAL_DMA_Abort+0x32a>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a65      	ldr	r2, [pc, #404]	@ (80095ec <HAL_DMA_Abort+0x458>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d031      	beq.n	80094be <HAL_DMA_Abort+0x32a>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a64      	ldr	r2, [pc, #400]	@ (80095f0 <HAL_DMA_Abort+0x45c>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d02c      	beq.n	80094be <HAL_DMA_Abort+0x32a>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a62      	ldr	r2, [pc, #392]	@ (80095f4 <HAL_DMA_Abort+0x460>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d027      	beq.n	80094be <HAL_DMA_Abort+0x32a>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a61      	ldr	r2, [pc, #388]	@ (80095f8 <HAL_DMA_Abort+0x464>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d022      	beq.n	80094be <HAL_DMA_Abort+0x32a>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a5f      	ldr	r2, [pc, #380]	@ (80095fc <HAL_DMA_Abort+0x468>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d01d      	beq.n	80094be <HAL_DMA_Abort+0x32a>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a5e      	ldr	r2, [pc, #376]	@ (8009600 <HAL_DMA_Abort+0x46c>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d018      	beq.n	80094be <HAL_DMA_Abort+0x32a>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a5c      	ldr	r2, [pc, #368]	@ (8009604 <HAL_DMA_Abort+0x470>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d013      	beq.n	80094be <HAL_DMA_Abort+0x32a>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a5b      	ldr	r2, [pc, #364]	@ (8009608 <HAL_DMA_Abort+0x474>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d00e      	beq.n	80094be <HAL_DMA_Abort+0x32a>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a59      	ldr	r2, [pc, #356]	@ (800960c <HAL_DMA_Abort+0x478>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d009      	beq.n	80094be <HAL_DMA_Abort+0x32a>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a58      	ldr	r2, [pc, #352]	@ (8009610 <HAL_DMA_Abort+0x47c>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d004      	beq.n	80094be <HAL_DMA_Abort+0x32a>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a56      	ldr	r2, [pc, #344]	@ (8009614 <HAL_DMA_Abort+0x480>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d108      	bne.n	80094d0 <HAL_DMA_Abort+0x33c>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f022 0201 	bic.w	r2, r2, #1
 80094cc:	601a      	str	r2, [r3, #0]
 80094ce:	e007      	b.n	80094e0 <HAL_DMA_Abort+0x34c>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f022 0201 	bic.w	r2, r2, #1
 80094de:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80094e0:	e013      	b.n	800950a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80094e2:	f7fe feab 	bl	800823c <HAL_GetTick>
 80094e6:	4602      	mov	r2, r0
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	1ad3      	subs	r3, r2, r3
 80094ec:	2b05      	cmp	r3, #5
 80094ee:	d90c      	bls.n	800950a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2220      	movs	r2, #32
 80094f4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2203      	movs	r2, #3
 80094fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	e12d      	b.n	8009766 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f003 0301 	and.w	r3, r3, #1
 8009512:	2b00      	cmp	r3, #0
 8009514:	d1e5      	bne.n	80094e2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a2f      	ldr	r2, [pc, #188]	@ (80095d8 <HAL_DMA_Abort+0x444>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d04a      	beq.n	80095b6 <HAL_DMA_Abort+0x422>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a2d      	ldr	r2, [pc, #180]	@ (80095dc <HAL_DMA_Abort+0x448>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d045      	beq.n	80095b6 <HAL_DMA_Abort+0x422>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a2c      	ldr	r2, [pc, #176]	@ (80095e0 <HAL_DMA_Abort+0x44c>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d040      	beq.n	80095b6 <HAL_DMA_Abort+0x422>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a2a      	ldr	r2, [pc, #168]	@ (80095e4 <HAL_DMA_Abort+0x450>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d03b      	beq.n	80095b6 <HAL_DMA_Abort+0x422>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4a29      	ldr	r2, [pc, #164]	@ (80095e8 <HAL_DMA_Abort+0x454>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d036      	beq.n	80095b6 <HAL_DMA_Abort+0x422>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a27      	ldr	r2, [pc, #156]	@ (80095ec <HAL_DMA_Abort+0x458>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d031      	beq.n	80095b6 <HAL_DMA_Abort+0x422>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a26      	ldr	r2, [pc, #152]	@ (80095f0 <HAL_DMA_Abort+0x45c>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d02c      	beq.n	80095b6 <HAL_DMA_Abort+0x422>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a24      	ldr	r2, [pc, #144]	@ (80095f4 <HAL_DMA_Abort+0x460>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d027      	beq.n	80095b6 <HAL_DMA_Abort+0x422>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a23      	ldr	r2, [pc, #140]	@ (80095f8 <HAL_DMA_Abort+0x464>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d022      	beq.n	80095b6 <HAL_DMA_Abort+0x422>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a21      	ldr	r2, [pc, #132]	@ (80095fc <HAL_DMA_Abort+0x468>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d01d      	beq.n	80095b6 <HAL_DMA_Abort+0x422>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a20      	ldr	r2, [pc, #128]	@ (8009600 <HAL_DMA_Abort+0x46c>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d018      	beq.n	80095b6 <HAL_DMA_Abort+0x422>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a1e      	ldr	r2, [pc, #120]	@ (8009604 <HAL_DMA_Abort+0x470>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d013      	beq.n	80095b6 <HAL_DMA_Abort+0x422>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a1d      	ldr	r2, [pc, #116]	@ (8009608 <HAL_DMA_Abort+0x474>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d00e      	beq.n	80095b6 <HAL_DMA_Abort+0x422>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a1b      	ldr	r2, [pc, #108]	@ (800960c <HAL_DMA_Abort+0x478>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d009      	beq.n	80095b6 <HAL_DMA_Abort+0x422>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a1a      	ldr	r2, [pc, #104]	@ (8009610 <HAL_DMA_Abort+0x47c>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d004      	beq.n	80095b6 <HAL_DMA_Abort+0x422>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a18      	ldr	r2, [pc, #96]	@ (8009614 <HAL_DMA_Abort+0x480>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d101      	bne.n	80095ba <HAL_DMA_Abort+0x426>
 80095b6:	2301      	movs	r3, #1
 80095b8:	e000      	b.n	80095bc <HAL_DMA_Abort+0x428>
 80095ba:	2300      	movs	r3, #0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d02b      	beq.n	8009618 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095c4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095ca:	f003 031f 	and.w	r3, r3, #31
 80095ce:	223f      	movs	r2, #63	@ 0x3f
 80095d0:	409a      	lsls	r2, r3
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	609a      	str	r2, [r3, #8]
 80095d6:	e02a      	b.n	800962e <HAL_DMA_Abort+0x49a>
 80095d8:	40020010 	.word	0x40020010
 80095dc:	40020028 	.word	0x40020028
 80095e0:	40020040 	.word	0x40020040
 80095e4:	40020058 	.word	0x40020058
 80095e8:	40020070 	.word	0x40020070
 80095ec:	40020088 	.word	0x40020088
 80095f0:	400200a0 	.word	0x400200a0
 80095f4:	400200b8 	.word	0x400200b8
 80095f8:	40020410 	.word	0x40020410
 80095fc:	40020428 	.word	0x40020428
 8009600:	40020440 	.word	0x40020440
 8009604:	40020458 	.word	0x40020458
 8009608:	40020470 	.word	0x40020470
 800960c:	40020488 	.word	0x40020488
 8009610:	400204a0 	.word	0x400204a0
 8009614:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800961c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009622:	f003 031f 	and.w	r3, r3, #31
 8009626:	2201      	movs	r2, #1
 8009628:	409a      	lsls	r2, r3
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a4f      	ldr	r2, [pc, #316]	@ (8009770 <HAL_DMA_Abort+0x5dc>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d072      	beq.n	800971e <HAL_DMA_Abort+0x58a>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a4d      	ldr	r2, [pc, #308]	@ (8009774 <HAL_DMA_Abort+0x5e0>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d06d      	beq.n	800971e <HAL_DMA_Abort+0x58a>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a4c      	ldr	r2, [pc, #304]	@ (8009778 <HAL_DMA_Abort+0x5e4>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d068      	beq.n	800971e <HAL_DMA_Abort+0x58a>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a4a      	ldr	r2, [pc, #296]	@ (800977c <HAL_DMA_Abort+0x5e8>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d063      	beq.n	800971e <HAL_DMA_Abort+0x58a>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a49      	ldr	r2, [pc, #292]	@ (8009780 <HAL_DMA_Abort+0x5ec>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d05e      	beq.n	800971e <HAL_DMA_Abort+0x58a>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a47      	ldr	r2, [pc, #284]	@ (8009784 <HAL_DMA_Abort+0x5f0>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d059      	beq.n	800971e <HAL_DMA_Abort+0x58a>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a46      	ldr	r2, [pc, #280]	@ (8009788 <HAL_DMA_Abort+0x5f4>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d054      	beq.n	800971e <HAL_DMA_Abort+0x58a>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a44      	ldr	r2, [pc, #272]	@ (800978c <HAL_DMA_Abort+0x5f8>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d04f      	beq.n	800971e <HAL_DMA_Abort+0x58a>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a43      	ldr	r2, [pc, #268]	@ (8009790 <HAL_DMA_Abort+0x5fc>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d04a      	beq.n	800971e <HAL_DMA_Abort+0x58a>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a41      	ldr	r2, [pc, #260]	@ (8009794 <HAL_DMA_Abort+0x600>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d045      	beq.n	800971e <HAL_DMA_Abort+0x58a>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a40      	ldr	r2, [pc, #256]	@ (8009798 <HAL_DMA_Abort+0x604>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d040      	beq.n	800971e <HAL_DMA_Abort+0x58a>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a3e      	ldr	r2, [pc, #248]	@ (800979c <HAL_DMA_Abort+0x608>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d03b      	beq.n	800971e <HAL_DMA_Abort+0x58a>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a3d      	ldr	r2, [pc, #244]	@ (80097a0 <HAL_DMA_Abort+0x60c>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d036      	beq.n	800971e <HAL_DMA_Abort+0x58a>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a3b      	ldr	r2, [pc, #236]	@ (80097a4 <HAL_DMA_Abort+0x610>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d031      	beq.n	800971e <HAL_DMA_Abort+0x58a>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a3a      	ldr	r2, [pc, #232]	@ (80097a8 <HAL_DMA_Abort+0x614>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d02c      	beq.n	800971e <HAL_DMA_Abort+0x58a>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a38      	ldr	r2, [pc, #224]	@ (80097ac <HAL_DMA_Abort+0x618>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d027      	beq.n	800971e <HAL_DMA_Abort+0x58a>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a37      	ldr	r2, [pc, #220]	@ (80097b0 <HAL_DMA_Abort+0x61c>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d022      	beq.n	800971e <HAL_DMA_Abort+0x58a>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a35      	ldr	r2, [pc, #212]	@ (80097b4 <HAL_DMA_Abort+0x620>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d01d      	beq.n	800971e <HAL_DMA_Abort+0x58a>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a34      	ldr	r2, [pc, #208]	@ (80097b8 <HAL_DMA_Abort+0x624>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d018      	beq.n	800971e <HAL_DMA_Abort+0x58a>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a32      	ldr	r2, [pc, #200]	@ (80097bc <HAL_DMA_Abort+0x628>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d013      	beq.n	800971e <HAL_DMA_Abort+0x58a>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a31      	ldr	r2, [pc, #196]	@ (80097c0 <HAL_DMA_Abort+0x62c>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d00e      	beq.n	800971e <HAL_DMA_Abort+0x58a>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a2f      	ldr	r2, [pc, #188]	@ (80097c4 <HAL_DMA_Abort+0x630>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d009      	beq.n	800971e <HAL_DMA_Abort+0x58a>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a2e      	ldr	r2, [pc, #184]	@ (80097c8 <HAL_DMA_Abort+0x634>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d004      	beq.n	800971e <HAL_DMA_Abort+0x58a>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a2c      	ldr	r2, [pc, #176]	@ (80097cc <HAL_DMA_Abort+0x638>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d101      	bne.n	8009722 <HAL_DMA_Abort+0x58e>
 800971e:	2301      	movs	r3, #1
 8009720:	e000      	b.n	8009724 <HAL_DMA_Abort+0x590>
 8009722:	2300      	movs	r3, #0
 8009724:	2b00      	cmp	r3, #0
 8009726:	d015      	beq.n	8009754 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009730:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009736:	2b00      	cmp	r3, #0
 8009738:	d00c      	beq.n	8009754 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009744:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009748:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009752:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2201      	movs	r2, #1
 8009758:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	3718      	adds	r7, #24
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	40020010 	.word	0x40020010
 8009774:	40020028 	.word	0x40020028
 8009778:	40020040 	.word	0x40020040
 800977c:	40020058 	.word	0x40020058
 8009780:	40020070 	.word	0x40020070
 8009784:	40020088 	.word	0x40020088
 8009788:	400200a0 	.word	0x400200a0
 800978c:	400200b8 	.word	0x400200b8
 8009790:	40020410 	.word	0x40020410
 8009794:	40020428 	.word	0x40020428
 8009798:	40020440 	.word	0x40020440
 800979c:	40020458 	.word	0x40020458
 80097a0:	40020470 	.word	0x40020470
 80097a4:	40020488 	.word	0x40020488
 80097a8:	400204a0 	.word	0x400204a0
 80097ac:	400204b8 	.word	0x400204b8
 80097b0:	58025408 	.word	0x58025408
 80097b4:	5802541c 	.word	0x5802541c
 80097b8:	58025430 	.word	0x58025430
 80097bc:	58025444 	.word	0x58025444
 80097c0:	58025458 	.word	0x58025458
 80097c4:	5802546c 	.word	0x5802546c
 80097c8:	58025480 	.word	0x58025480
 80097cc:	58025494 	.word	0x58025494

080097d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d101      	bne.n	80097e2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	e237      	b.n	8009c52 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	2b02      	cmp	r3, #2
 80097ec:	d004      	beq.n	80097f8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2280      	movs	r2, #128	@ 0x80
 80097f2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80097f4:	2301      	movs	r3, #1
 80097f6:	e22c      	b.n	8009c52 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a5c      	ldr	r2, [pc, #368]	@ (8009970 <HAL_DMA_Abort_IT+0x1a0>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d04a      	beq.n	8009898 <HAL_DMA_Abort_IT+0xc8>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a5b      	ldr	r2, [pc, #364]	@ (8009974 <HAL_DMA_Abort_IT+0x1a4>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d045      	beq.n	8009898 <HAL_DMA_Abort_IT+0xc8>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a59      	ldr	r2, [pc, #356]	@ (8009978 <HAL_DMA_Abort_IT+0x1a8>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d040      	beq.n	8009898 <HAL_DMA_Abort_IT+0xc8>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a58      	ldr	r2, [pc, #352]	@ (800997c <HAL_DMA_Abort_IT+0x1ac>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d03b      	beq.n	8009898 <HAL_DMA_Abort_IT+0xc8>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4a56      	ldr	r2, [pc, #344]	@ (8009980 <HAL_DMA_Abort_IT+0x1b0>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d036      	beq.n	8009898 <HAL_DMA_Abort_IT+0xc8>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a55      	ldr	r2, [pc, #340]	@ (8009984 <HAL_DMA_Abort_IT+0x1b4>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d031      	beq.n	8009898 <HAL_DMA_Abort_IT+0xc8>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a53      	ldr	r2, [pc, #332]	@ (8009988 <HAL_DMA_Abort_IT+0x1b8>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d02c      	beq.n	8009898 <HAL_DMA_Abort_IT+0xc8>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a52      	ldr	r2, [pc, #328]	@ (800998c <HAL_DMA_Abort_IT+0x1bc>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d027      	beq.n	8009898 <HAL_DMA_Abort_IT+0xc8>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a50      	ldr	r2, [pc, #320]	@ (8009990 <HAL_DMA_Abort_IT+0x1c0>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d022      	beq.n	8009898 <HAL_DMA_Abort_IT+0xc8>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a4f      	ldr	r2, [pc, #316]	@ (8009994 <HAL_DMA_Abort_IT+0x1c4>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d01d      	beq.n	8009898 <HAL_DMA_Abort_IT+0xc8>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a4d      	ldr	r2, [pc, #308]	@ (8009998 <HAL_DMA_Abort_IT+0x1c8>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d018      	beq.n	8009898 <HAL_DMA_Abort_IT+0xc8>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a4c      	ldr	r2, [pc, #304]	@ (800999c <HAL_DMA_Abort_IT+0x1cc>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d013      	beq.n	8009898 <HAL_DMA_Abort_IT+0xc8>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a4a      	ldr	r2, [pc, #296]	@ (80099a0 <HAL_DMA_Abort_IT+0x1d0>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d00e      	beq.n	8009898 <HAL_DMA_Abort_IT+0xc8>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a49      	ldr	r2, [pc, #292]	@ (80099a4 <HAL_DMA_Abort_IT+0x1d4>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d009      	beq.n	8009898 <HAL_DMA_Abort_IT+0xc8>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a47      	ldr	r2, [pc, #284]	@ (80099a8 <HAL_DMA_Abort_IT+0x1d8>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d004      	beq.n	8009898 <HAL_DMA_Abort_IT+0xc8>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a46      	ldr	r2, [pc, #280]	@ (80099ac <HAL_DMA_Abort_IT+0x1dc>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d101      	bne.n	800989c <HAL_DMA_Abort_IT+0xcc>
 8009898:	2301      	movs	r3, #1
 800989a:	e000      	b.n	800989e <HAL_DMA_Abort_IT+0xce>
 800989c:	2300      	movs	r3, #0
 800989e:	2b00      	cmp	r3, #0
 80098a0:	f000 8086 	beq.w	80099b0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2204      	movs	r2, #4
 80098a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a2f      	ldr	r2, [pc, #188]	@ (8009970 <HAL_DMA_Abort_IT+0x1a0>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d04a      	beq.n	800994c <HAL_DMA_Abort_IT+0x17c>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a2e      	ldr	r2, [pc, #184]	@ (8009974 <HAL_DMA_Abort_IT+0x1a4>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d045      	beq.n	800994c <HAL_DMA_Abort_IT+0x17c>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a2c      	ldr	r2, [pc, #176]	@ (8009978 <HAL_DMA_Abort_IT+0x1a8>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d040      	beq.n	800994c <HAL_DMA_Abort_IT+0x17c>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a2b      	ldr	r2, [pc, #172]	@ (800997c <HAL_DMA_Abort_IT+0x1ac>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d03b      	beq.n	800994c <HAL_DMA_Abort_IT+0x17c>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a29      	ldr	r2, [pc, #164]	@ (8009980 <HAL_DMA_Abort_IT+0x1b0>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d036      	beq.n	800994c <HAL_DMA_Abort_IT+0x17c>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a28      	ldr	r2, [pc, #160]	@ (8009984 <HAL_DMA_Abort_IT+0x1b4>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d031      	beq.n	800994c <HAL_DMA_Abort_IT+0x17c>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a26      	ldr	r2, [pc, #152]	@ (8009988 <HAL_DMA_Abort_IT+0x1b8>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d02c      	beq.n	800994c <HAL_DMA_Abort_IT+0x17c>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a25      	ldr	r2, [pc, #148]	@ (800998c <HAL_DMA_Abort_IT+0x1bc>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d027      	beq.n	800994c <HAL_DMA_Abort_IT+0x17c>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a23      	ldr	r2, [pc, #140]	@ (8009990 <HAL_DMA_Abort_IT+0x1c0>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d022      	beq.n	800994c <HAL_DMA_Abort_IT+0x17c>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a22      	ldr	r2, [pc, #136]	@ (8009994 <HAL_DMA_Abort_IT+0x1c4>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d01d      	beq.n	800994c <HAL_DMA_Abort_IT+0x17c>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a20      	ldr	r2, [pc, #128]	@ (8009998 <HAL_DMA_Abort_IT+0x1c8>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d018      	beq.n	800994c <HAL_DMA_Abort_IT+0x17c>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a1f      	ldr	r2, [pc, #124]	@ (800999c <HAL_DMA_Abort_IT+0x1cc>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d013      	beq.n	800994c <HAL_DMA_Abort_IT+0x17c>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a1d      	ldr	r2, [pc, #116]	@ (80099a0 <HAL_DMA_Abort_IT+0x1d0>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d00e      	beq.n	800994c <HAL_DMA_Abort_IT+0x17c>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a1c      	ldr	r2, [pc, #112]	@ (80099a4 <HAL_DMA_Abort_IT+0x1d4>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d009      	beq.n	800994c <HAL_DMA_Abort_IT+0x17c>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a1a      	ldr	r2, [pc, #104]	@ (80099a8 <HAL_DMA_Abort_IT+0x1d8>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d004      	beq.n	800994c <HAL_DMA_Abort_IT+0x17c>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a19      	ldr	r2, [pc, #100]	@ (80099ac <HAL_DMA_Abort_IT+0x1dc>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d108      	bne.n	800995e <HAL_DMA_Abort_IT+0x18e>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f022 0201 	bic.w	r2, r2, #1
 800995a:	601a      	str	r2, [r3, #0]
 800995c:	e178      	b.n	8009c50 <HAL_DMA_Abort_IT+0x480>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f022 0201 	bic.w	r2, r2, #1
 800996c:	601a      	str	r2, [r3, #0]
 800996e:	e16f      	b.n	8009c50 <HAL_DMA_Abort_IT+0x480>
 8009970:	40020010 	.word	0x40020010
 8009974:	40020028 	.word	0x40020028
 8009978:	40020040 	.word	0x40020040
 800997c:	40020058 	.word	0x40020058
 8009980:	40020070 	.word	0x40020070
 8009984:	40020088 	.word	0x40020088
 8009988:	400200a0 	.word	0x400200a0
 800998c:	400200b8 	.word	0x400200b8
 8009990:	40020410 	.word	0x40020410
 8009994:	40020428 	.word	0x40020428
 8009998:	40020440 	.word	0x40020440
 800999c:	40020458 	.word	0x40020458
 80099a0:	40020470 	.word	0x40020470
 80099a4:	40020488 	.word	0x40020488
 80099a8:	400204a0 	.word	0x400204a0
 80099ac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f022 020e 	bic.w	r2, r2, #14
 80099be:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a6c      	ldr	r2, [pc, #432]	@ (8009b78 <HAL_DMA_Abort_IT+0x3a8>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d04a      	beq.n	8009a60 <HAL_DMA_Abort_IT+0x290>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a6b      	ldr	r2, [pc, #428]	@ (8009b7c <HAL_DMA_Abort_IT+0x3ac>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d045      	beq.n	8009a60 <HAL_DMA_Abort_IT+0x290>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a69      	ldr	r2, [pc, #420]	@ (8009b80 <HAL_DMA_Abort_IT+0x3b0>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d040      	beq.n	8009a60 <HAL_DMA_Abort_IT+0x290>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a68      	ldr	r2, [pc, #416]	@ (8009b84 <HAL_DMA_Abort_IT+0x3b4>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d03b      	beq.n	8009a60 <HAL_DMA_Abort_IT+0x290>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a66      	ldr	r2, [pc, #408]	@ (8009b88 <HAL_DMA_Abort_IT+0x3b8>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d036      	beq.n	8009a60 <HAL_DMA_Abort_IT+0x290>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a65      	ldr	r2, [pc, #404]	@ (8009b8c <HAL_DMA_Abort_IT+0x3bc>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d031      	beq.n	8009a60 <HAL_DMA_Abort_IT+0x290>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a63      	ldr	r2, [pc, #396]	@ (8009b90 <HAL_DMA_Abort_IT+0x3c0>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d02c      	beq.n	8009a60 <HAL_DMA_Abort_IT+0x290>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a62      	ldr	r2, [pc, #392]	@ (8009b94 <HAL_DMA_Abort_IT+0x3c4>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d027      	beq.n	8009a60 <HAL_DMA_Abort_IT+0x290>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a60      	ldr	r2, [pc, #384]	@ (8009b98 <HAL_DMA_Abort_IT+0x3c8>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d022      	beq.n	8009a60 <HAL_DMA_Abort_IT+0x290>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4a5f      	ldr	r2, [pc, #380]	@ (8009b9c <HAL_DMA_Abort_IT+0x3cc>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d01d      	beq.n	8009a60 <HAL_DMA_Abort_IT+0x290>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a5d      	ldr	r2, [pc, #372]	@ (8009ba0 <HAL_DMA_Abort_IT+0x3d0>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d018      	beq.n	8009a60 <HAL_DMA_Abort_IT+0x290>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4a5c      	ldr	r2, [pc, #368]	@ (8009ba4 <HAL_DMA_Abort_IT+0x3d4>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d013      	beq.n	8009a60 <HAL_DMA_Abort_IT+0x290>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a5a      	ldr	r2, [pc, #360]	@ (8009ba8 <HAL_DMA_Abort_IT+0x3d8>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d00e      	beq.n	8009a60 <HAL_DMA_Abort_IT+0x290>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a59      	ldr	r2, [pc, #356]	@ (8009bac <HAL_DMA_Abort_IT+0x3dc>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d009      	beq.n	8009a60 <HAL_DMA_Abort_IT+0x290>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a57      	ldr	r2, [pc, #348]	@ (8009bb0 <HAL_DMA_Abort_IT+0x3e0>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d004      	beq.n	8009a60 <HAL_DMA_Abort_IT+0x290>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a56      	ldr	r2, [pc, #344]	@ (8009bb4 <HAL_DMA_Abort_IT+0x3e4>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d108      	bne.n	8009a72 <HAL_DMA_Abort_IT+0x2a2>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f022 0201 	bic.w	r2, r2, #1
 8009a6e:	601a      	str	r2, [r3, #0]
 8009a70:	e007      	b.n	8009a82 <HAL_DMA_Abort_IT+0x2b2>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f022 0201 	bic.w	r2, r2, #1
 8009a80:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a3c      	ldr	r2, [pc, #240]	@ (8009b78 <HAL_DMA_Abort_IT+0x3a8>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d072      	beq.n	8009b72 <HAL_DMA_Abort_IT+0x3a2>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a3a      	ldr	r2, [pc, #232]	@ (8009b7c <HAL_DMA_Abort_IT+0x3ac>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d06d      	beq.n	8009b72 <HAL_DMA_Abort_IT+0x3a2>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a39      	ldr	r2, [pc, #228]	@ (8009b80 <HAL_DMA_Abort_IT+0x3b0>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d068      	beq.n	8009b72 <HAL_DMA_Abort_IT+0x3a2>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a37      	ldr	r2, [pc, #220]	@ (8009b84 <HAL_DMA_Abort_IT+0x3b4>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d063      	beq.n	8009b72 <HAL_DMA_Abort_IT+0x3a2>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a36      	ldr	r2, [pc, #216]	@ (8009b88 <HAL_DMA_Abort_IT+0x3b8>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d05e      	beq.n	8009b72 <HAL_DMA_Abort_IT+0x3a2>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a34      	ldr	r2, [pc, #208]	@ (8009b8c <HAL_DMA_Abort_IT+0x3bc>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d059      	beq.n	8009b72 <HAL_DMA_Abort_IT+0x3a2>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a33      	ldr	r2, [pc, #204]	@ (8009b90 <HAL_DMA_Abort_IT+0x3c0>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d054      	beq.n	8009b72 <HAL_DMA_Abort_IT+0x3a2>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a31      	ldr	r2, [pc, #196]	@ (8009b94 <HAL_DMA_Abort_IT+0x3c4>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d04f      	beq.n	8009b72 <HAL_DMA_Abort_IT+0x3a2>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a30      	ldr	r2, [pc, #192]	@ (8009b98 <HAL_DMA_Abort_IT+0x3c8>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d04a      	beq.n	8009b72 <HAL_DMA_Abort_IT+0x3a2>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a2e      	ldr	r2, [pc, #184]	@ (8009b9c <HAL_DMA_Abort_IT+0x3cc>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d045      	beq.n	8009b72 <HAL_DMA_Abort_IT+0x3a2>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a2d      	ldr	r2, [pc, #180]	@ (8009ba0 <HAL_DMA_Abort_IT+0x3d0>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d040      	beq.n	8009b72 <HAL_DMA_Abort_IT+0x3a2>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a2b      	ldr	r2, [pc, #172]	@ (8009ba4 <HAL_DMA_Abort_IT+0x3d4>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d03b      	beq.n	8009b72 <HAL_DMA_Abort_IT+0x3a2>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a2a      	ldr	r2, [pc, #168]	@ (8009ba8 <HAL_DMA_Abort_IT+0x3d8>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d036      	beq.n	8009b72 <HAL_DMA_Abort_IT+0x3a2>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4a28      	ldr	r2, [pc, #160]	@ (8009bac <HAL_DMA_Abort_IT+0x3dc>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d031      	beq.n	8009b72 <HAL_DMA_Abort_IT+0x3a2>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a27      	ldr	r2, [pc, #156]	@ (8009bb0 <HAL_DMA_Abort_IT+0x3e0>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d02c      	beq.n	8009b72 <HAL_DMA_Abort_IT+0x3a2>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a25      	ldr	r2, [pc, #148]	@ (8009bb4 <HAL_DMA_Abort_IT+0x3e4>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d027      	beq.n	8009b72 <HAL_DMA_Abort_IT+0x3a2>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a24      	ldr	r2, [pc, #144]	@ (8009bb8 <HAL_DMA_Abort_IT+0x3e8>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d022      	beq.n	8009b72 <HAL_DMA_Abort_IT+0x3a2>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a22      	ldr	r2, [pc, #136]	@ (8009bbc <HAL_DMA_Abort_IT+0x3ec>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d01d      	beq.n	8009b72 <HAL_DMA_Abort_IT+0x3a2>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a21      	ldr	r2, [pc, #132]	@ (8009bc0 <HAL_DMA_Abort_IT+0x3f0>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d018      	beq.n	8009b72 <HAL_DMA_Abort_IT+0x3a2>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a1f      	ldr	r2, [pc, #124]	@ (8009bc4 <HAL_DMA_Abort_IT+0x3f4>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d013      	beq.n	8009b72 <HAL_DMA_Abort_IT+0x3a2>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a1e      	ldr	r2, [pc, #120]	@ (8009bc8 <HAL_DMA_Abort_IT+0x3f8>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d00e      	beq.n	8009b72 <HAL_DMA_Abort_IT+0x3a2>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a1c      	ldr	r2, [pc, #112]	@ (8009bcc <HAL_DMA_Abort_IT+0x3fc>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d009      	beq.n	8009b72 <HAL_DMA_Abort_IT+0x3a2>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a1b      	ldr	r2, [pc, #108]	@ (8009bd0 <HAL_DMA_Abort_IT+0x400>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d004      	beq.n	8009b72 <HAL_DMA_Abort_IT+0x3a2>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a19      	ldr	r2, [pc, #100]	@ (8009bd4 <HAL_DMA_Abort_IT+0x404>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d132      	bne.n	8009bd8 <HAL_DMA_Abort_IT+0x408>
 8009b72:	2301      	movs	r3, #1
 8009b74:	e031      	b.n	8009bda <HAL_DMA_Abort_IT+0x40a>
 8009b76:	bf00      	nop
 8009b78:	40020010 	.word	0x40020010
 8009b7c:	40020028 	.word	0x40020028
 8009b80:	40020040 	.word	0x40020040
 8009b84:	40020058 	.word	0x40020058
 8009b88:	40020070 	.word	0x40020070
 8009b8c:	40020088 	.word	0x40020088
 8009b90:	400200a0 	.word	0x400200a0
 8009b94:	400200b8 	.word	0x400200b8
 8009b98:	40020410 	.word	0x40020410
 8009b9c:	40020428 	.word	0x40020428
 8009ba0:	40020440 	.word	0x40020440
 8009ba4:	40020458 	.word	0x40020458
 8009ba8:	40020470 	.word	0x40020470
 8009bac:	40020488 	.word	0x40020488
 8009bb0:	400204a0 	.word	0x400204a0
 8009bb4:	400204b8 	.word	0x400204b8
 8009bb8:	58025408 	.word	0x58025408
 8009bbc:	5802541c 	.word	0x5802541c
 8009bc0:	58025430 	.word	0x58025430
 8009bc4:	58025444 	.word	0x58025444
 8009bc8:	58025458 	.word	0x58025458
 8009bcc:	5802546c 	.word	0x5802546c
 8009bd0:	58025480 	.word	0x58025480
 8009bd4:	58025494 	.word	0x58025494
 8009bd8:	2300      	movs	r3, #0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d028      	beq.n	8009c30 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009be8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009bec:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bf2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bf8:	f003 031f 	and.w	r3, r3, #31
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	409a      	lsls	r2, r3
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009c0c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d00c      	beq.n	8009c30 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009c24:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009c2e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2201      	movs	r2, #1
 8009c34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d003      	beq.n	8009c50 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8009c50:	2300      	movs	r3, #0
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop

08009c5c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b08a      	sub	sp, #40	@ 0x28
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8009c64:	2300      	movs	r3, #0
 8009c66:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009c68:	4b67      	ldr	r3, [pc, #412]	@ (8009e08 <HAL_DMA_IRQHandler+0x1ac>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4a67      	ldr	r2, [pc, #412]	@ (8009e0c <HAL_DMA_IRQHandler+0x1b0>)
 8009c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c72:	0a9b      	lsrs	r3, r3, #10
 8009c74:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c7a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c80:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8009c82:	6a3b      	ldr	r3, [r7, #32]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a5f      	ldr	r2, [pc, #380]	@ (8009e10 <HAL_DMA_IRQHandler+0x1b4>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d04a      	beq.n	8009d2e <HAL_DMA_IRQHandler+0xd2>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a5d      	ldr	r2, [pc, #372]	@ (8009e14 <HAL_DMA_IRQHandler+0x1b8>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d045      	beq.n	8009d2e <HAL_DMA_IRQHandler+0xd2>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a5c      	ldr	r2, [pc, #368]	@ (8009e18 <HAL_DMA_IRQHandler+0x1bc>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d040      	beq.n	8009d2e <HAL_DMA_IRQHandler+0xd2>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a5a      	ldr	r2, [pc, #360]	@ (8009e1c <HAL_DMA_IRQHandler+0x1c0>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d03b      	beq.n	8009d2e <HAL_DMA_IRQHandler+0xd2>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a59      	ldr	r2, [pc, #356]	@ (8009e20 <HAL_DMA_IRQHandler+0x1c4>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d036      	beq.n	8009d2e <HAL_DMA_IRQHandler+0xd2>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a57      	ldr	r2, [pc, #348]	@ (8009e24 <HAL_DMA_IRQHandler+0x1c8>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d031      	beq.n	8009d2e <HAL_DMA_IRQHandler+0xd2>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4a56      	ldr	r2, [pc, #344]	@ (8009e28 <HAL_DMA_IRQHandler+0x1cc>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d02c      	beq.n	8009d2e <HAL_DMA_IRQHandler+0xd2>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a54      	ldr	r2, [pc, #336]	@ (8009e2c <HAL_DMA_IRQHandler+0x1d0>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d027      	beq.n	8009d2e <HAL_DMA_IRQHandler+0xd2>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	4a53      	ldr	r2, [pc, #332]	@ (8009e30 <HAL_DMA_IRQHandler+0x1d4>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d022      	beq.n	8009d2e <HAL_DMA_IRQHandler+0xd2>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a51      	ldr	r2, [pc, #324]	@ (8009e34 <HAL_DMA_IRQHandler+0x1d8>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d01d      	beq.n	8009d2e <HAL_DMA_IRQHandler+0xd2>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a50      	ldr	r2, [pc, #320]	@ (8009e38 <HAL_DMA_IRQHandler+0x1dc>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d018      	beq.n	8009d2e <HAL_DMA_IRQHandler+0xd2>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a4e      	ldr	r2, [pc, #312]	@ (8009e3c <HAL_DMA_IRQHandler+0x1e0>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d013      	beq.n	8009d2e <HAL_DMA_IRQHandler+0xd2>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a4d      	ldr	r2, [pc, #308]	@ (8009e40 <HAL_DMA_IRQHandler+0x1e4>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d00e      	beq.n	8009d2e <HAL_DMA_IRQHandler+0xd2>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a4b      	ldr	r2, [pc, #300]	@ (8009e44 <HAL_DMA_IRQHandler+0x1e8>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d009      	beq.n	8009d2e <HAL_DMA_IRQHandler+0xd2>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a4a      	ldr	r2, [pc, #296]	@ (8009e48 <HAL_DMA_IRQHandler+0x1ec>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d004      	beq.n	8009d2e <HAL_DMA_IRQHandler+0xd2>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a48      	ldr	r2, [pc, #288]	@ (8009e4c <HAL_DMA_IRQHandler+0x1f0>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d101      	bne.n	8009d32 <HAL_DMA_IRQHandler+0xd6>
 8009d2e:	2301      	movs	r3, #1
 8009d30:	e000      	b.n	8009d34 <HAL_DMA_IRQHandler+0xd8>
 8009d32:	2300      	movs	r3, #0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	f000 842b 	beq.w	800a590 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d3e:	f003 031f 	and.w	r3, r3, #31
 8009d42:	2208      	movs	r2, #8
 8009d44:	409a      	lsls	r2, r3
 8009d46:	69bb      	ldr	r3, [r7, #24]
 8009d48:	4013      	ands	r3, r2
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	f000 80a2 	beq.w	8009e94 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a2e      	ldr	r2, [pc, #184]	@ (8009e10 <HAL_DMA_IRQHandler+0x1b4>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d04a      	beq.n	8009df0 <HAL_DMA_IRQHandler+0x194>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a2d      	ldr	r2, [pc, #180]	@ (8009e14 <HAL_DMA_IRQHandler+0x1b8>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d045      	beq.n	8009df0 <HAL_DMA_IRQHandler+0x194>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a2b      	ldr	r2, [pc, #172]	@ (8009e18 <HAL_DMA_IRQHandler+0x1bc>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d040      	beq.n	8009df0 <HAL_DMA_IRQHandler+0x194>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a2a      	ldr	r2, [pc, #168]	@ (8009e1c <HAL_DMA_IRQHandler+0x1c0>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d03b      	beq.n	8009df0 <HAL_DMA_IRQHandler+0x194>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a28      	ldr	r2, [pc, #160]	@ (8009e20 <HAL_DMA_IRQHandler+0x1c4>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d036      	beq.n	8009df0 <HAL_DMA_IRQHandler+0x194>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a27      	ldr	r2, [pc, #156]	@ (8009e24 <HAL_DMA_IRQHandler+0x1c8>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d031      	beq.n	8009df0 <HAL_DMA_IRQHandler+0x194>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a25      	ldr	r2, [pc, #148]	@ (8009e28 <HAL_DMA_IRQHandler+0x1cc>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d02c      	beq.n	8009df0 <HAL_DMA_IRQHandler+0x194>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a24      	ldr	r2, [pc, #144]	@ (8009e2c <HAL_DMA_IRQHandler+0x1d0>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d027      	beq.n	8009df0 <HAL_DMA_IRQHandler+0x194>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a22      	ldr	r2, [pc, #136]	@ (8009e30 <HAL_DMA_IRQHandler+0x1d4>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d022      	beq.n	8009df0 <HAL_DMA_IRQHandler+0x194>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a21      	ldr	r2, [pc, #132]	@ (8009e34 <HAL_DMA_IRQHandler+0x1d8>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d01d      	beq.n	8009df0 <HAL_DMA_IRQHandler+0x194>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a1f      	ldr	r2, [pc, #124]	@ (8009e38 <HAL_DMA_IRQHandler+0x1dc>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d018      	beq.n	8009df0 <HAL_DMA_IRQHandler+0x194>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a1e      	ldr	r2, [pc, #120]	@ (8009e3c <HAL_DMA_IRQHandler+0x1e0>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d013      	beq.n	8009df0 <HAL_DMA_IRQHandler+0x194>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a1c      	ldr	r2, [pc, #112]	@ (8009e40 <HAL_DMA_IRQHandler+0x1e4>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d00e      	beq.n	8009df0 <HAL_DMA_IRQHandler+0x194>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a1b      	ldr	r2, [pc, #108]	@ (8009e44 <HAL_DMA_IRQHandler+0x1e8>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d009      	beq.n	8009df0 <HAL_DMA_IRQHandler+0x194>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a19      	ldr	r2, [pc, #100]	@ (8009e48 <HAL_DMA_IRQHandler+0x1ec>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d004      	beq.n	8009df0 <HAL_DMA_IRQHandler+0x194>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a18      	ldr	r2, [pc, #96]	@ (8009e4c <HAL_DMA_IRQHandler+0x1f0>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d12f      	bne.n	8009e50 <HAL_DMA_IRQHandler+0x1f4>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f003 0304 	and.w	r3, r3, #4
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	bf14      	ite	ne
 8009dfe:	2301      	movne	r3, #1
 8009e00:	2300      	moveq	r3, #0
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	e02e      	b.n	8009e64 <HAL_DMA_IRQHandler+0x208>
 8009e06:	bf00      	nop
 8009e08:	24000058 	.word	0x24000058
 8009e0c:	1b4e81b5 	.word	0x1b4e81b5
 8009e10:	40020010 	.word	0x40020010
 8009e14:	40020028 	.word	0x40020028
 8009e18:	40020040 	.word	0x40020040
 8009e1c:	40020058 	.word	0x40020058
 8009e20:	40020070 	.word	0x40020070
 8009e24:	40020088 	.word	0x40020088
 8009e28:	400200a0 	.word	0x400200a0
 8009e2c:	400200b8 	.word	0x400200b8
 8009e30:	40020410 	.word	0x40020410
 8009e34:	40020428 	.word	0x40020428
 8009e38:	40020440 	.word	0x40020440
 8009e3c:	40020458 	.word	0x40020458
 8009e40:	40020470 	.word	0x40020470
 8009e44:	40020488 	.word	0x40020488
 8009e48:	400204a0 	.word	0x400204a0
 8009e4c:	400204b8 	.word	0x400204b8
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f003 0308 	and.w	r3, r3, #8
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	bf14      	ite	ne
 8009e5e:	2301      	movne	r3, #1
 8009e60:	2300      	moveq	r3, #0
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d015      	beq.n	8009e94 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f022 0204 	bic.w	r2, r2, #4
 8009e76:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e7c:	f003 031f 	and.w	r3, r3, #31
 8009e80:	2208      	movs	r2, #8
 8009e82:	409a      	lsls	r2, r3
 8009e84:	6a3b      	ldr	r3, [r7, #32]
 8009e86:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e8c:	f043 0201 	orr.w	r2, r3, #1
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e98:	f003 031f 	and.w	r3, r3, #31
 8009e9c:	69ba      	ldr	r2, [r7, #24]
 8009e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8009ea2:	f003 0301 	and.w	r3, r3, #1
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d06e      	beq.n	8009f88 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4a69      	ldr	r2, [pc, #420]	@ (800a054 <HAL_DMA_IRQHandler+0x3f8>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d04a      	beq.n	8009f4a <HAL_DMA_IRQHandler+0x2ee>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4a67      	ldr	r2, [pc, #412]	@ (800a058 <HAL_DMA_IRQHandler+0x3fc>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d045      	beq.n	8009f4a <HAL_DMA_IRQHandler+0x2ee>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a66      	ldr	r2, [pc, #408]	@ (800a05c <HAL_DMA_IRQHandler+0x400>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d040      	beq.n	8009f4a <HAL_DMA_IRQHandler+0x2ee>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a64      	ldr	r2, [pc, #400]	@ (800a060 <HAL_DMA_IRQHandler+0x404>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d03b      	beq.n	8009f4a <HAL_DMA_IRQHandler+0x2ee>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a63      	ldr	r2, [pc, #396]	@ (800a064 <HAL_DMA_IRQHandler+0x408>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d036      	beq.n	8009f4a <HAL_DMA_IRQHandler+0x2ee>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a61      	ldr	r2, [pc, #388]	@ (800a068 <HAL_DMA_IRQHandler+0x40c>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d031      	beq.n	8009f4a <HAL_DMA_IRQHandler+0x2ee>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a60      	ldr	r2, [pc, #384]	@ (800a06c <HAL_DMA_IRQHandler+0x410>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d02c      	beq.n	8009f4a <HAL_DMA_IRQHandler+0x2ee>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a5e      	ldr	r2, [pc, #376]	@ (800a070 <HAL_DMA_IRQHandler+0x414>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d027      	beq.n	8009f4a <HAL_DMA_IRQHandler+0x2ee>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a5d      	ldr	r2, [pc, #372]	@ (800a074 <HAL_DMA_IRQHandler+0x418>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d022      	beq.n	8009f4a <HAL_DMA_IRQHandler+0x2ee>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a5b      	ldr	r2, [pc, #364]	@ (800a078 <HAL_DMA_IRQHandler+0x41c>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d01d      	beq.n	8009f4a <HAL_DMA_IRQHandler+0x2ee>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a5a      	ldr	r2, [pc, #360]	@ (800a07c <HAL_DMA_IRQHandler+0x420>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d018      	beq.n	8009f4a <HAL_DMA_IRQHandler+0x2ee>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a58      	ldr	r2, [pc, #352]	@ (800a080 <HAL_DMA_IRQHandler+0x424>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d013      	beq.n	8009f4a <HAL_DMA_IRQHandler+0x2ee>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a57      	ldr	r2, [pc, #348]	@ (800a084 <HAL_DMA_IRQHandler+0x428>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d00e      	beq.n	8009f4a <HAL_DMA_IRQHandler+0x2ee>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a55      	ldr	r2, [pc, #340]	@ (800a088 <HAL_DMA_IRQHandler+0x42c>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d009      	beq.n	8009f4a <HAL_DMA_IRQHandler+0x2ee>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a54      	ldr	r2, [pc, #336]	@ (800a08c <HAL_DMA_IRQHandler+0x430>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d004      	beq.n	8009f4a <HAL_DMA_IRQHandler+0x2ee>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a52      	ldr	r2, [pc, #328]	@ (800a090 <HAL_DMA_IRQHandler+0x434>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d10a      	bne.n	8009f60 <HAL_DMA_IRQHandler+0x304>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	695b      	ldr	r3, [r3, #20]
 8009f50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	bf14      	ite	ne
 8009f58:	2301      	movne	r3, #1
 8009f5a:	2300      	moveq	r3, #0
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	e003      	b.n	8009f68 <HAL_DMA_IRQHandler+0x30c>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2300      	movs	r3, #0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d00d      	beq.n	8009f88 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f70:	f003 031f 	and.w	r3, r3, #31
 8009f74:	2201      	movs	r2, #1
 8009f76:	409a      	lsls	r2, r3
 8009f78:	6a3b      	ldr	r3, [r7, #32]
 8009f7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f80:	f043 0202 	orr.w	r2, r3, #2
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f8c:	f003 031f 	and.w	r3, r3, #31
 8009f90:	2204      	movs	r2, #4
 8009f92:	409a      	lsls	r2, r3
 8009f94:	69bb      	ldr	r3, [r7, #24]
 8009f96:	4013      	ands	r3, r2
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	f000 808f 	beq.w	800a0bc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4a2c      	ldr	r2, [pc, #176]	@ (800a054 <HAL_DMA_IRQHandler+0x3f8>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d04a      	beq.n	800a03e <HAL_DMA_IRQHandler+0x3e2>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a2a      	ldr	r2, [pc, #168]	@ (800a058 <HAL_DMA_IRQHandler+0x3fc>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d045      	beq.n	800a03e <HAL_DMA_IRQHandler+0x3e2>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a29      	ldr	r2, [pc, #164]	@ (800a05c <HAL_DMA_IRQHandler+0x400>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d040      	beq.n	800a03e <HAL_DMA_IRQHandler+0x3e2>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a27      	ldr	r2, [pc, #156]	@ (800a060 <HAL_DMA_IRQHandler+0x404>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d03b      	beq.n	800a03e <HAL_DMA_IRQHandler+0x3e2>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a26      	ldr	r2, [pc, #152]	@ (800a064 <HAL_DMA_IRQHandler+0x408>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d036      	beq.n	800a03e <HAL_DMA_IRQHandler+0x3e2>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a24      	ldr	r2, [pc, #144]	@ (800a068 <HAL_DMA_IRQHandler+0x40c>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d031      	beq.n	800a03e <HAL_DMA_IRQHandler+0x3e2>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a23      	ldr	r2, [pc, #140]	@ (800a06c <HAL_DMA_IRQHandler+0x410>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d02c      	beq.n	800a03e <HAL_DMA_IRQHandler+0x3e2>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4a21      	ldr	r2, [pc, #132]	@ (800a070 <HAL_DMA_IRQHandler+0x414>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d027      	beq.n	800a03e <HAL_DMA_IRQHandler+0x3e2>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4a20      	ldr	r2, [pc, #128]	@ (800a074 <HAL_DMA_IRQHandler+0x418>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d022      	beq.n	800a03e <HAL_DMA_IRQHandler+0x3e2>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a1e      	ldr	r2, [pc, #120]	@ (800a078 <HAL_DMA_IRQHandler+0x41c>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d01d      	beq.n	800a03e <HAL_DMA_IRQHandler+0x3e2>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4a1d      	ldr	r2, [pc, #116]	@ (800a07c <HAL_DMA_IRQHandler+0x420>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d018      	beq.n	800a03e <HAL_DMA_IRQHandler+0x3e2>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4a1b      	ldr	r2, [pc, #108]	@ (800a080 <HAL_DMA_IRQHandler+0x424>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d013      	beq.n	800a03e <HAL_DMA_IRQHandler+0x3e2>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a1a      	ldr	r2, [pc, #104]	@ (800a084 <HAL_DMA_IRQHandler+0x428>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d00e      	beq.n	800a03e <HAL_DMA_IRQHandler+0x3e2>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4a18      	ldr	r2, [pc, #96]	@ (800a088 <HAL_DMA_IRQHandler+0x42c>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d009      	beq.n	800a03e <HAL_DMA_IRQHandler+0x3e2>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4a17      	ldr	r2, [pc, #92]	@ (800a08c <HAL_DMA_IRQHandler+0x430>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d004      	beq.n	800a03e <HAL_DMA_IRQHandler+0x3e2>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a15      	ldr	r2, [pc, #84]	@ (800a090 <HAL_DMA_IRQHandler+0x434>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d12a      	bne.n	800a094 <HAL_DMA_IRQHandler+0x438>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f003 0302 	and.w	r3, r3, #2
 800a048:	2b00      	cmp	r3, #0
 800a04a:	bf14      	ite	ne
 800a04c:	2301      	movne	r3, #1
 800a04e:	2300      	moveq	r3, #0
 800a050:	b2db      	uxtb	r3, r3
 800a052:	e023      	b.n	800a09c <HAL_DMA_IRQHandler+0x440>
 800a054:	40020010 	.word	0x40020010
 800a058:	40020028 	.word	0x40020028
 800a05c:	40020040 	.word	0x40020040
 800a060:	40020058 	.word	0x40020058
 800a064:	40020070 	.word	0x40020070
 800a068:	40020088 	.word	0x40020088
 800a06c:	400200a0 	.word	0x400200a0
 800a070:	400200b8 	.word	0x400200b8
 800a074:	40020410 	.word	0x40020410
 800a078:	40020428 	.word	0x40020428
 800a07c:	40020440 	.word	0x40020440
 800a080:	40020458 	.word	0x40020458
 800a084:	40020470 	.word	0x40020470
 800a088:	40020488 	.word	0x40020488
 800a08c:	400204a0 	.word	0x400204a0
 800a090:	400204b8 	.word	0x400204b8
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	2300      	movs	r3, #0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d00d      	beq.n	800a0bc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0a4:	f003 031f 	and.w	r3, r3, #31
 800a0a8:	2204      	movs	r2, #4
 800a0aa:	409a      	lsls	r2, r3
 800a0ac:	6a3b      	ldr	r3, [r7, #32]
 800a0ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0b4:	f043 0204 	orr.w	r2, r3, #4
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0c0:	f003 031f 	and.w	r3, r3, #31
 800a0c4:	2210      	movs	r2, #16
 800a0c6:	409a      	lsls	r2, r3
 800a0c8:	69bb      	ldr	r3, [r7, #24]
 800a0ca:	4013      	ands	r3, r2
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	f000 80a6 	beq.w	800a21e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4a85      	ldr	r2, [pc, #532]	@ (800a2ec <HAL_DMA_IRQHandler+0x690>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d04a      	beq.n	800a172 <HAL_DMA_IRQHandler+0x516>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a83      	ldr	r2, [pc, #524]	@ (800a2f0 <HAL_DMA_IRQHandler+0x694>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d045      	beq.n	800a172 <HAL_DMA_IRQHandler+0x516>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a82      	ldr	r2, [pc, #520]	@ (800a2f4 <HAL_DMA_IRQHandler+0x698>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d040      	beq.n	800a172 <HAL_DMA_IRQHandler+0x516>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a80      	ldr	r2, [pc, #512]	@ (800a2f8 <HAL_DMA_IRQHandler+0x69c>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d03b      	beq.n	800a172 <HAL_DMA_IRQHandler+0x516>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4a7f      	ldr	r2, [pc, #508]	@ (800a2fc <HAL_DMA_IRQHandler+0x6a0>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d036      	beq.n	800a172 <HAL_DMA_IRQHandler+0x516>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a7d      	ldr	r2, [pc, #500]	@ (800a300 <HAL_DMA_IRQHandler+0x6a4>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d031      	beq.n	800a172 <HAL_DMA_IRQHandler+0x516>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4a7c      	ldr	r2, [pc, #496]	@ (800a304 <HAL_DMA_IRQHandler+0x6a8>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d02c      	beq.n	800a172 <HAL_DMA_IRQHandler+0x516>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a7a      	ldr	r2, [pc, #488]	@ (800a308 <HAL_DMA_IRQHandler+0x6ac>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d027      	beq.n	800a172 <HAL_DMA_IRQHandler+0x516>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a79      	ldr	r2, [pc, #484]	@ (800a30c <HAL_DMA_IRQHandler+0x6b0>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d022      	beq.n	800a172 <HAL_DMA_IRQHandler+0x516>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a77      	ldr	r2, [pc, #476]	@ (800a310 <HAL_DMA_IRQHandler+0x6b4>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d01d      	beq.n	800a172 <HAL_DMA_IRQHandler+0x516>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a76      	ldr	r2, [pc, #472]	@ (800a314 <HAL_DMA_IRQHandler+0x6b8>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d018      	beq.n	800a172 <HAL_DMA_IRQHandler+0x516>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a74      	ldr	r2, [pc, #464]	@ (800a318 <HAL_DMA_IRQHandler+0x6bc>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d013      	beq.n	800a172 <HAL_DMA_IRQHandler+0x516>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a73      	ldr	r2, [pc, #460]	@ (800a31c <HAL_DMA_IRQHandler+0x6c0>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d00e      	beq.n	800a172 <HAL_DMA_IRQHandler+0x516>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a71      	ldr	r2, [pc, #452]	@ (800a320 <HAL_DMA_IRQHandler+0x6c4>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d009      	beq.n	800a172 <HAL_DMA_IRQHandler+0x516>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a70      	ldr	r2, [pc, #448]	@ (800a324 <HAL_DMA_IRQHandler+0x6c8>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d004      	beq.n	800a172 <HAL_DMA_IRQHandler+0x516>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a6e      	ldr	r2, [pc, #440]	@ (800a328 <HAL_DMA_IRQHandler+0x6cc>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d10a      	bne.n	800a188 <HAL_DMA_IRQHandler+0x52c>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f003 0308 	and.w	r3, r3, #8
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	bf14      	ite	ne
 800a180:	2301      	movne	r3, #1
 800a182:	2300      	moveq	r3, #0
 800a184:	b2db      	uxtb	r3, r3
 800a186:	e009      	b.n	800a19c <HAL_DMA_IRQHandler+0x540>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f003 0304 	and.w	r3, r3, #4
 800a192:	2b00      	cmp	r3, #0
 800a194:	bf14      	ite	ne
 800a196:	2301      	movne	r3, #1
 800a198:	2300      	moveq	r3, #0
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d03e      	beq.n	800a21e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1a4:	f003 031f 	and.w	r3, r3, #31
 800a1a8:	2210      	movs	r2, #16
 800a1aa:	409a      	lsls	r2, r3
 800a1ac:	6a3b      	ldr	r3, [r7, #32]
 800a1ae:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d018      	beq.n	800a1f0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d108      	bne.n	800a1de <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d024      	beq.n	800a21e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	4798      	blx	r3
 800a1dc:	e01f      	b.n	800a21e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d01b      	beq.n	800a21e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	4798      	blx	r3
 800a1ee:	e016      	b.n	800a21e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d107      	bne.n	800a20e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f022 0208 	bic.w	r2, r2, #8
 800a20c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a212:	2b00      	cmp	r3, #0
 800a214:	d003      	beq.n	800a21e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a222:	f003 031f 	and.w	r3, r3, #31
 800a226:	2220      	movs	r2, #32
 800a228:	409a      	lsls	r2, r3
 800a22a:	69bb      	ldr	r3, [r7, #24]
 800a22c:	4013      	ands	r3, r2
 800a22e:	2b00      	cmp	r3, #0
 800a230:	f000 8110 	beq.w	800a454 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a2c      	ldr	r2, [pc, #176]	@ (800a2ec <HAL_DMA_IRQHandler+0x690>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d04a      	beq.n	800a2d4 <HAL_DMA_IRQHandler+0x678>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a2b      	ldr	r2, [pc, #172]	@ (800a2f0 <HAL_DMA_IRQHandler+0x694>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d045      	beq.n	800a2d4 <HAL_DMA_IRQHandler+0x678>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a29      	ldr	r2, [pc, #164]	@ (800a2f4 <HAL_DMA_IRQHandler+0x698>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d040      	beq.n	800a2d4 <HAL_DMA_IRQHandler+0x678>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4a28      	ldr	r2, [pc, #160]	@ (800a2f8 <HAL_DMA_IRQHandler+0x69c>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d03b      	beq.n	800a2d4 <HAL_DMA_IRQHandler+0x678>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a26      	ldr	r2, [pc, #152]	@ (800a2fc <HAL_DMA_IRQHandler+0x6a0>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d036      	beq.n	800a2d4 <HAL_DMA_IRQHandler+0x678>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a25      	ldr	r2, [pc, #148]	@ (800a300 <HAL_DMA_IRQHandler+0x6a4>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d031      	beq.n	800a2d4 <HAL_DMA_IRQHandler+0x678>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a23      	ldr	r2, [pc, #140]	@ (800a304 <HAL_DMA_IRQHandler+0x6a8>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d02c      	beq.n	800a2d4 <HAL_DMA_IRQHandler+0x678>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4a22      	ldr	r2, [pc, #136]	@ (800a308 <HAL_DMA_IRQHandler+0x6ac>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d027      	beq.n	800a2d4 <HAL_DMA_IRQHandler+0x678>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a20      	ldr	r2, [pc, #128]	@ (800a30c <HAL_DMA_IRQHandler+0x6b0>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d022      	beq.n	800a2d4 <HAL_DMA_IRQHandler+0x678>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4a1f      	ldr	r2, [pc, #124]	@ (800a310 <HAL_DMA_IRQHandler+0x6b4>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d01d      	beq.n	800a2d4 <HAL_DMA_IRQHandler+0x678>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a1d      	ldr	r2, [pc, #116]	@ (800a314 <HAL_DMA_IRQHandler+0x6b8>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d018      	beq.n	800a2d4 <HAL_DMA_IRQHandler+0x678>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a1c      	ldr	r2, [pc, #112]	@ (800a318 <HAL_DMA_IRQHandler+0x6bc>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d013      	beq.n	800a2d4 <HAL_DMA_IRQHandler+0x678>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a1a      	ldr	r2, [pc, #104]	@ (800a31c <HAL_DMA_IRQHandler+0x6c0>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d00e      	beq.n	800a2d4 <HAL_DMA_IRQHandler+0x678>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a19      	ldr	r2, [pc, #100]	@ (800a320 <HAL_DMA_IRQHandler+0x6c4>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d009      	beq.n	800a2d4 <HAL_DMA_IRQHandler+0x678>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a17      	ldr	r2, [pc, #92]	@ (800a324 <HAL_DMA_IRQHandler+0x6c8>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d004      	beq.n	800a2d4 <HAL_DMA_IRQHandler+0x678>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a16      	ldr	r2, [pc, #88]	@ (800a328 <HAL_DMA_IRQHandler+0x6cc>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d12b      	bne.n	800a32c <HAL_DMA_IRQHandler+0x6d0>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f003 0310 	and.w	r3, r3, #16
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	bf14      	ite	ne
 800a2e2:	2301      	movne	r3, #1
 800a2e4:	2300      	moveq	r3, #0
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	e02a      	b.n	800a340 <HAL_DMA_IRQHandler+0x6e4>
 800a2ea:	bf00      	nop
 800a2ec:	40020010 	.word	0x40020010
 800a2f0:	40020028 	.word	0x40020028
 800a2f4:	40020040 	.word	0x40020040
 800a2f8:	40020058 	.word	0x40020058
 800a2fc:	40020070 	.word	0x40020070
 800a300:	40020088 	.word	0x40020088
 800a304:	400200a0 	.word	0x400200a0
 800a308:	400200b8 	.word	0x400200b8
 800a30c:	40020410 	.word	0x40020410
 800a310:	40020428 	.word	0x40020428
 800a314:	40020440 	.word	0x40020440
 800a318:	40020458 	.word	0x40020458
 800a31c:	40020470 	.word	0x40020470
 800a320:	40020488 	.word	0x40020488
 800a324:	400204a0 	.word	0x400204a0
 800a328:	400204b8 	.word	0x400204b8
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f003 0302 	and.w	r3, r3, #2
 800a336:	2b00      	cmp	r3, #0
 800a338:	bf14      	ite	ne
 800a33a:	2301      	movne	r3, #1
 800a33c:	2300      	moveq	r3, #0
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	2b00      	cmp	r3, #0
 800a342:	f000 8087 	beq.w	800a454 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a34a:	f003 031f 	and.w	r3, r3, #31
 800a34e:	2220      	movs	r2, #32
 800a350:	409a      	lsls	r2, r3
 800a352:	6a3b      	ldr	r3, [r7, #32]
 800a354:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	2b04      	cmp	r3, #4
 800a360:	d139      	bne.n	800a3d6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f022 0216 	bic.w	r2, r2, #22
 800a370:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	695a      	ldr	r2, [r3, #20]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a380:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a386:	2b00      	cmp	r3, #0
 800a388:	d103      	bne.n	800a392 <HAL_DMA_IRQHandler+0x736>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d007      	beq.n	800a3a2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	681a      	ldr	r2, [r3, #0]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f022 0208 	bic.w	r2, r2, #8
 800a3a0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3a6:	f003 031f 	and.w	r3, r3, #31
 800a3aa:	223f      	movs	r2, #63	@ 0x3f
 800a3ac:	409a      	lsls	r2, r3
 800a3ae:	6a3b      	ldr	r3, [r7, #32]
 800a3b0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	f000 834a 	beq.w	800aa60 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	4798      	blx	r3
          }
          return;
 800a3d4:	e344      	b.n	800aa60 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d018      	beq.n	800a416 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d108      	bne.n	800a404 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d02c      	beq.n	800a454 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	4798      	blx	r3
 800a402:	e027      	b.n	800a454 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d023      	beq.n	800a454 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	4798      	blx	r3
 800a414:	e01e      	b.n	800a454 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a420:	2b00      	cmp	r3, #0
 800a422:	d10f      	bne.n	800a444 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f022 0210 	bic.w	r2, r2, #16
 800a432:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2201      	movs	r2, #1
 800a438:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d003      	beq.n	800a454 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a458:	2b00      	cmp	r3, #0
 800a45a:	f000 8306 	beq.w	800aa6a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a462:	f003 0301 	and.w	r3, r3, #1
 800a466:	2b00      	cmp	r3, #0
 800a468:	f000 8088 	beq.w	800a57c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2204      	movs	r2, #4
 800a470:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a7a      	ldr	r2, [pc, #488]	@ (800a664 <HAL_DMA_IRQHandler+0xa08>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d04a      	beq.n	800a514 <HAL_DMA_IRQHandler+0x8b8>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a79      	ldr	r2, [pc, #484]	@ (800a668 <HAL_DMA_IRQHandler+0xa0c>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d045      	beq.n	800a514 <HAL_DMA_IRQHandler+0x8b8>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a77      	ldr	r2, [pc, #476]	@ (800a66c <HAL_DMA_IRQHandler+0xa10>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d040      	beq.n	800a514 <HAL_DMA_IRQHandler+0x8b8>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a76      	ldr	r2, [pc, #472]	@ (800a670 <HAL_DMA_IRQHandler+0xa14>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d03b      	beq.n	800a514 <HAL_DMA_IRQHandler+0x8b8>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a74      	ldr	r2, [pc, #464]	@ (800a674 <HAL_DMA_IRQHandler+0xa18>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d036      	beq.n	800a514 <HAL_DMA_IRQHandler+0x8b8>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4a73      	ldr	r2, [pc, #460]	@ (800a678 <HAL_DMA_IRQHandler+0xa1c>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d031      	beq.n	800a514 <HAL_DMA_IRQHandler+0x8b8>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a71      	ldr	r2, [pc, #452]	@ (800a67c <HAL_DMA_IRQHandler+0xa20>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d02c      	beq.n	800a514 <HAL_DMA_IRQHandler+0x8b8>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4a70      	ldr	r2, [pc, #448]	@ (800a680 <HAL_DMA_IRQHandler+0xa24>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d027      	beq.n	800a514 <HAL_DMA_IRQHandler+0x8b8>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a6e      	ldr	r2, [pc, #440]	@ (800a684 <HAL_DMA_IRQHandler+0xa28>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d022      	beq.n	800a514 <HAL_DMA_IRQHandler+0x8b8>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a6d      	ldr	r2, [pc, #436]	@ (800a688 <HAL_DMA_IRQHandler+0xa2c>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d01d      	beq.n	800a514 <HAL_DMA_IRQHandler+0x8b8>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a6b      	ldr	r2, [pc, #428]	@ (800a68c <HAL_DMA_IRQHandler+0xa30>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d018      	beq.n	800a514 <HAL_DMA_IRQHandler+0x8b8>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a6a      	ldr	r2, [pc, #424]	@ (800a690 <HAL_DMA_IRQHandler+0xa34>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d013      	beq.n	800a514 <HAL_DMA_IRQHandler+0x8b8>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4a68      	ldr	r2, [pc, #416]	@ (800a694 <HAL_DMA_IRQHandler+0xa38>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d00e      	beq.n	800a514 <HAL_DMA_IRQHandler+0x8b8>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a67      	ldr	r2, [pc, #412]	@ (800a698 <HAL_DMA_IRQHandler+0xa3c>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d009      	beq.n	800a514 <HAL_DMA_IRQHandler+0x8b8>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a65      	ldr	r2, [pc, #404]	@ (800a69c <HAL_DMA_IRQHandler+0xa40>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d004      	beq.n	800a514 <HAL_DMA_IRQHandler+0x8b8>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4a64      	ldr	r2, [pc, #400]	@ (800a6a0 <HAL_DMA_IRQHandler+0xa44>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d108      	bne.n	800a526 <HAL_DMA_IRQHandler+0x8ca>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f022 0201 	bic.w	r2, r2, #1
 800a522:	601a      	str	r2, [r3, #0]
 800a524:	e007      	b.n	800a536 <HAL_DMA_IRQHandler+0x8da>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f022 0201 	bic.w	r2, r2, #1
 800a534:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	3301      	adds	r3, #1
 800a53a:	60fb      	str	r3, [r7, #12]
 800a53c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a53e:	429a      	cmp	r2, r3
 800a540:	d307      	bcc.n	800a552 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f003 0301 	and.w	r3, r3, #1
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d1f2      	bne.n	800a536 <HAL_DMA_IRQHandler+0x8da>
 800a550:	e000      	b.n	800a554 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800a552:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f003 0301 	and.w	r3, r3, #1
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d004      	beq.n	800a56c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2203      	movs	r2, #3
 800a566:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800a56a:	e003      	b.n	800a574 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2201      	movs	r2, #1
 800a570:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a580:	2b00      	cmp	r3, #0
 800a582:	f000 8272 	beq.w	800aa6a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	4798      	blx	r3
 800a58e:	e26c      	b.n	800aa6a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a43      	ldr	r2, [pc, #268]	@ (800a6a4 <HAL_DMA_IRQHandler+0xa48>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d022      	beq.n	800a5e0 <HAL_DMA_IRQHandler+0x984>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	4a42      	ldr	r2, [pc, #264]	@ (800a6a8 <HAL_DMA_IRQHandler+0xa4c>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d01d      	beq.n	800a5e0 <HAL_DMA_IRQHandler+0x984>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4a40      	ldr	r2, [pc, #256]	@ (800a6ac <HAL_DMA_IRQHandler+0xa50>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d018      	beq.n	800a5e0 <HAL_DMA_IRQHandler+0x984>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4a3f      	ldr	r2, [pc, #252]	@ (800a6b0 <HAL_DMA_IRQHandler+0xa54>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d013      	beq.n	800a5e0 <HAL_DMA_IRQHandler+0x984>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a3d      	ldr	r2, [pc, #244]	@ (800a6b4 <HAL_DMA_IRQHandler+0xa58>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d00e      	beq.n	800a5e0 <HAL_DMA_IRQHandler+0x984>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a3c      	ldr	r2, [pc, #240]	@ (800a6b8 <HAL_DMA_IRQHandler+0xa5c>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d009      	beq.n	800a5e0 <HAL_DMA_IRQHandler+0x984>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a3a      	ldr	r2, [pc, #232]	@ (800a6bc <HAL_DMA_IRQHandler+0xa60>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d004      	beq.n	800a5e0 <HAL_DMA_IRQHandler+0x984>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a39      	ldr	r2, [pc, #228]	@ (800a6c0 <HAL_DMA_IRQHandler+0xa64>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d101      	bne.n	800a5e4 <HAL_DMA_IRQHandler+0x988>
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	e000      	b.n	800a5e6 <HAL_DMA_IRQHandler+0x98a>
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	f000 823f 	beq.w	800aa6a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5f8:	f003 031f 	and.w	r3, r3, #31
 800a5fc:	2204      	movs	r2, #4
 800a5fe:	409a      	lsls	r2, r3
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	4013      	ands	r3, r2
 800a604:	2b00      	cmp	r3, #0
 800a606:	f000 80cd 	beq.w	800a7a4 <HAL_DMA_IRQHandler+0xb48>
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	f003 0304 	and.w	r3, r3, #4
 800a610:	2b00      	cmp	r3, #0
 800a612:	f000 80c7 	beq.w	800a7a4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a61a:	f003 031f 	and.w	r3, r3, #31
 800a61e:	2204      	movs	r2, #4
 800a620:	409a      	lsls	r2, r3
 800a622:	69fb      	ldr	r3, [r7, #28]
 800a624:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d049      	beq.n	800a6c4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a636:	2b00      	cmp	r3, #0
 800a638:	d109      	bne.n	800a64e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a63e:	2b00      	cmp	r3, #0
 800a640:	f000 8210 	beq.w	800aa64 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a64c:	e20a      	b.n	800aa64 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a652:	2b00      	cmp	r3, #0
 800a654:	f000 8206 	beq.w	800aa64 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a660:	e200      	b.n	800aa64 <HAL_DMA_IRQHandler+0xe08>
 800a662:	bf00      	nop
 800a664:	40020010 	.word	0x40020010
 800a668:	40020028 	.word	0x40020028
 800a66c:	40020040 	.word	0x40020040
 800a670:	40020058 	.word	0x40020058
 800a674:	40020070 	.word	0x40020070
 800a678:	40020088 	.word	0x40020088
 800a67c:	400200a0 	.word	0x400200a0
 800a680:	400200b8 	.word	0x400200b8
 800a684:	40020410 	.word	0x40020410
 800a688:	40020428 	.word	0x40020428
 800a68c:	40020440 	.word	0x40020440
 800a690:	40020458 	.word	0x40020458
 800a694:	40020470 	.word	0x40020470
 800a698:	40020488 	.word	0x40020488
 800a69c:	400204a0 	.word	0x400204a0
 800a6a0:	400204b8 	.word	0x400204b8
 800a6a4:	58025408 	.word	0x58025408
 800a6a8:	5802541c 	.word	0x5802541c
 800a6ac:	58025430 	.word	0x58025430
 800a6b0:	58025444 	.word	0x58025444
 800a6b4:	58025458 	.word	0x58025458
 800a6b8:	5802546c 	.word	0x5802546c
 800a6bc:	58025480 	.word	0x58025480
 800a6c0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	f003 0320 	and.w	r3, r3, #32
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d160      	bne.n	800a790 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a7f      	ldr	r2, [pc, #508]	@ (800a8d0 <HAL_DMA_IRQHandler+0xc74>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d04a      	beq.n	800a76e <HAL_DMA_IRQHandler+0xb12>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a7d      	ldr	r2, [pc, #500]	@ (800a8d4 <HAL_DMA_IRQHandler+0xc78>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d045      	beq.n	800a76e <HAL_DMA_IRQHandler+0xb12>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a7c      	ldr	r2, [pc, #496]	@ (800a8d8 <HAL_DMA_IRQHandler+0xc7c>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d040      	beq.n	800a76e <HAL_DMA_IRQHandler+0xb12>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a7a      	ldr	r2, [pc, #488]	@ (800a8dc <HAL_DMA_IRQHandler+0xc80>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d03b      	beq.n	800a76e <HAL_DMA_IRQHandler+0xb12>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a79      	ldr	r2, [pc, #484]	@ (800a8e0 <HAL_DMA_IRQHandler+0xc84>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d036      	beq.n	800a76e <HAL_DMA_IRQHandler+0xb12>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a77      	ldr	r2, [pc, #476]	@ (800a8e4 <HAL_DMA_IRQHandler+0xc88>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d031      	beq.n	800a76e <HAL_DMA_IRQHandler+0xb12>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4a76      	ldr	r2, [pc, #472]	@ (800a8e8 <HAL_DMA_IRQHandler+0xc8c>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d02c      	beq.n	800a76e <HAL_DMA_IRQHandler+0xb12>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a74      	ldr	r2, [pc, #464]	@ (800a8ec <HAL_DMA_IRQHandler+0xc90>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d027      	beq.n	800a76e <HAL_DMA_IRQHandler+0xb12>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a73      	ldr	r2, [pc, #460]	@ (800a8f0 <HAL_DMA_IRQHandler+0xc94>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d022      	beq.n	800a76e <HAL_DMA_IRQHandler+0xb12>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a71      	ldr	r2, [pc, #452]	@ (800a8f4 <HAL_DMA_IRQHandler+0xc98>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d01d      	beq.n	800a76e <HAL_DMA_IRQHandler+0xb12>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a70      	ldr	r2, [pc, #448]	@ (800a8f8 <HAL_DMA_IRQHandler+0xc9c>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d018      	beq.n	800a76e <HAL_DMA_IRQHandler+0xb12>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a6e      	ldr	r2, [pc, #440]	@ (800a8fc <HAL_DMA_IRQHandler+0xca0>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d013      	beq.n	800a76e <HAL_DMA_IRQHandler+0xb12>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4a6d      	ldr	r2, [pc, #436]	@ (800a900 <HAL_DMA_IRQHandler+0xca4>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d00e      	beq.n	800a76e <HAL_DMA_IRQHandler+0xb12>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a6b      	ldr	r2, [pc, #428]	@ (800a904 <HAL_DMA_IRQHandler+0xca8>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d009      	beq.n	800a76e <HAL_DMA_IRQHandler+0xb12>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4a6a      	ldr	r2, [pc, #424]	@ (800a908 <HAL_DMA_IRQHandler+0xcac>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d004      	beq.n	800a76e <HAL_DMA_IRQHandler+0xb12>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a68      	ldr	r2, [pc, #416]	@ (800a90c <HAL_DMA_IRQHandler+0xcb0>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d108      	bne.n	800a780 <HAL_DMA_IRQHandler+0xb24>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f022 0208 	bic.w	r2, r2, #8
 800a77c:	601a      	str	r2, [r3, #0]
 800a77e:	e007      	b.n	800a790 <HAL_DMA_IRQHandler+0xb34>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	681a      	ldr	r2, [r3, #0]
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f022 0204 	bic.w	r2, r2, #4
 800a78e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a794:	2b00      	cmp	r3, #0
 800a796:	f000 8165 	beq.w	800aa64 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a7a2:	e15f      	b.n	800aa64 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a7a8:	f003 031f 	and.w	r3, r3, #31
 800a7ac:	2202      	movs	r2, #2
 800a7ae:	409a      	lsls	r2, r3
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	4013      	ands	r3, r2
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	f000 80c5 	beq.w	800a944 <HAL_DMA_IRQHandler+0xce8>
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	f003 0302 	and.w	r3, r3, #2
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	f000 80bf 	beq.w	800a944 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a7ca:	f003 031f 	and.w	r3, r3, #31
 800a7ce:	2202      	movs	r2, #2
 800a7d0:	409a      	lsls	r2, r3
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d018      	beq.n	800a812 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d109      	bne.n	800a7fe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	f000 813a 	beq.w	800aa68 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a7fc:	e134      	b.n	800aa68 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a802:	2b00      	cmp	r3, #0
 800a804:	f000 8130 	beq.w	800aa68 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a810:	e12a      	b.n	800aa68 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	f003 0320 	and.w	r3, r3, #32
 800a818:	2b00      	cmp	r3, #0
 800a81a:	f040 8089 	bne.w	800a930 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4a2b      	ldr	r2, [pc, #172]	@ (800a8d0 <HAL_DMA_IRQHandler+0xc74>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d04a      	beq.n	800a8be <HAL_DMA_IRQHandler+0xc62>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a29      	ldr	r2, [pc, #164]	@ (800a8d4 <HAL_DMA_IRQHandler+0xc78>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d045      	beq.n	800a8be <HAL_DMA_IRQHandler+0xc62>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4a28      	ldr	r2, [pc, #160]	@ (800a8d8 <HAL_DMA_IRQHandler+0xc7c>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d040      	beq.n	800a8be <HAL_DMA_IRQHandler+0xc62>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a26      	ldr	r2, [pc, #152]	@ (800a8dc <HAL_DMA_IRQHandler+0xc80>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d03b      	beq.n	800a8be <HAL_DMA_IRQHandler+0xc62>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4a25      	ldr	r2, [pc, #148]	@ (800a8e0 <HAL_DMA_IRQHandler+0xc84>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d036      	beq.n	800a8be <HAL_DMA_IRQHandler+0xc62>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a23      	ldr	r2, [pc, #140]	@ (800a8e4 <HAL_DMA_IRQHandler+0xc88>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d031      	beq.n	800a8be <HAL_DMA_IRQHandler+0xc62>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4a22      	ldr	r2, [pc, #136]	@ (800a8e8 <HAL_DMA_IRQHandler+0xc8c>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d02c      	beq.n	800a8be <HAL_DMA_IRQHandler+0xc62>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	4a20      	ldr	r2, [pc, #128]	@ (800a8ec <HAL_DMA_IRQHandler+0xc90>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d027      	beq.n	800a8be <HAL_DMA_IRQHandler+0xc62>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4a1f      	ldr	r2, [pc, #124]	@ (800a8f0 <HAL_DMA_IRQHandler+0xc94>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d022      	beq.n	800a8be <HAL_DMA_IRQHandler+0xc62>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4a1d      	ldr	r2, [pc, #116]	@ (800a8f4 <HAL_DMA_IRQHandler+0xc98>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d01d      	beq.n	800a8be <HAL_DMA_IRQHandler+0xc62>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4a1c      	ldr	r2, [pc, #112]	@ (800a8f8 <HAL_DMA_IRQHandler+0xc9c>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d018      	beq.n	800a8be <HAL_DMA_IRQHandler+0xc62>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4a1a      	ldr	r2, [pc, #104]	@ (800a8fc <HAL_DMA_IRQHandler+0xca0>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d013      	beq.n	800a8be <HAL_DMA_IRQHandler+0xc62>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	4a19      	ldr	r2, [pc, #100]	@ (800a900 <HAL_DMA_IRQHandler+0xca4>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d00e      	beq.n	800a8be <HAL_DMA_IRQHandler+0xc62>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4a17      	ldr	r2, [pc, #92]	@ (800a904 <HAL_DMA_IRQHandler+0xca8>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d009      	beq.n	800a8be <HAL_DMA_IRQHandler+0xc62>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	4a16      	ldr	r2, [pc, #88]	@ (800a908 <HAL_DMA_IRQHandler+0xcac>)
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d004      	beq.n	800a8be <HAL_DMA_IRQHandler+0xc62>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4a14      	ldr	r2, [pc, #80]	@ (800a90c <HAL_DMA_IRQHandler+0xcb0>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d128      	bne.n	800a910 <HAL_DMA_IRQHandler+0xcb4>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f022 0214 	bic.w	r2, r2, #20
 800a8cc:	601a      	str	r2, [r3, #0]
 800a8ce:	e027      	b.n	800a920 <HAL_DMA_IRQHandler+0xcc4>
 800a8d0:	40020010 	.word	0x40020010
 800a8d4:	40020028 	.word	0x40020028
 800a8d8:	40020040 	.word	0x40020040
 800a8dc:	40020058 	.word	0x40020058
 800a8e0:	40020070 	.word	0x40020070
 800a8e4:	40020088 	.word	0x40020088
 800a8e8:	400200a0 	.word	0x400200a0
 800a8ec:	400200b8 	.word	0x400200b8
 800a8f0:	40020410 	.word	0x40020410
 800a8f4:	40020428 	.word	0x40020428
 800a8f8:	40020440 	.word	0x40020440
 800a8fc:	40020458 	.word	0x40020458
 800a900:	40020470 	.word	0x40020470
 800a904:	40020488 	.word	0x40020488
 800a908:	400204a0 	.word	0x400204a0
 800a90c:	400204b8 	.word	0x400204b8
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f022 020a 	bic.w	r2, r2, #10
 800a91e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2201      	movs	r2, #1
 800a924:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2200      	movs	r2, #0
 800a92c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a934:	2b00      	cmp	r3, #0
 800a936:	f000 8097 	beq.w	800aa68 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a942:	e091      	b.n	800aa68 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a948:	f003 031f 	and.w	r3, r3, #31
 800a94c:	2208      	movs	r2, #8
 800a94e:	409a      	lsls	r2, r3
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	4013      	ands	r3, r2
 800a954:	2b00      	cmp	r3, #0
 800a956:	f000 8088 	beq.w	800aa6a <HAL_DMA_IRQHandler+0xe0e>
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	f003 0308 	and.w	r3, r3, #8
 800a960:	2b00      	cmp	r3, #0
 800a962:	f000 8082 	beq.w	800aa6a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4a41      	ldr	r2, [pc, #260]	@ (800aa70 <HAL_DMA_IRQHandler+0xe14>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d04a      	beq.n	800aa06 <HAL_DMA_IRQHandler+0xdaa>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a3f      	ldr	r2, [pc, #252]	@ (800aa74 <HAL_DMA_IRQHandler+0xe18>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d045      	beq.n	800aa06 <HAL_DMA_IRQHandler+0xdaa>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a3e      	ldr	r2, [pc, #248]	@ (800aa78 <HAL_DMA_IRQHandler+0xe1c>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d040      	beq.n	800aa06 <HAL_DMA_IRQHandler+0xdaa>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a3c      	ldr	r2, [pc, #240]	@ (800aa7c <HAL_DMA_IRQHandler+0xe20>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d03b      	beq.n	800aa06 <HAL_DMA_IRQHandler+0xdaa>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	4a3b      	ldr	r2, [pc, #236]	@ (800aa80 <HAL_DMA_IRQHandler+0xe24>)
 800a994:	4293      	cmp	r3, r2
 800a996:	d036      	beq.n	800aa06 <HAL_DMA_IRQHandler+0xdaa>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4a39      	ldr	r2, [pc, #228]	@ (800aa84 <HAL_DMA_IRQHandler+0xe28>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d031      	beq.n	800aa06 <HAL_DMA_IRQHandler+0xdaa>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4a38      	ldr	r2, [pc, #224]	@ (800aa88 <HAL_DMA_IRQHandler+0xe2c>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d02c      	beq.n	800aa06 <HAL_DMA_IRQHandler+0xdaa>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4a36      	ldr	r2, [pc, #216]	@ (800aa8c <HAL_DMA_IRQHandler+0xe30>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d027      	beq.n	800aa06 <HAL_DMA_IRQHandler+0xdaa>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	4a35      	ldr	r2, [pc, #212]	@ (800aa90 <HAL_DMA_IRQHandler+0xe34>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d022      	beq.n	800aa06 <HAL_DMA_IRQHandler+0xdaa>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4a33      	ldr	r2, [pc, #204]	@ (800aa94 <HAL_DMA_IRQHandler+0xe38>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d01d      	beq.n	800aa06 <HAL_DMA_IRQHandler+0xdaa>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4a32      	ldr	r2, [pc, #200]	@ (800aa98 <HAL_DMA_IRQHandler+0xe3c>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d018      	beq.n	800aa06 <HAL_DMA_IRQHandler+0xdaa>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a30      	ldr	r2, [pc, #192]	@ (800aa9c <HAL_DMA_IRQHandler+0xe40>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d013      	beq.n	800aa06 <HAL_DMA_IRQHandler+0xdaa>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4a2f      	ldr	r2, [pc, #188]	@ (800aaa0 <HAL_DMA_IRQHandler+0xe44>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d00e      	beq.n	800aa06 <HAL_DMA_IRQHandler+0xdaa>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a2d      	ldr	r2, [pc, #180]	@ (800aaa4 <HAL_DMA_IRQHandler+0xe48>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d009      	beq.n	800aa06 <HAL_DMA_IRQHandler+0xdaa>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4a2c      	ldr	r2, [pc, #176]	@ (800aaa8 <HAL_DMA_IRQHandler+0xe4c>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d004      	beq.n	800aa06 <HAL_DMA_IRQHandler+0xdaa>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4a2a      	ldr	r2, [pc, #168]	@ (800aaac <HAL_DMA_IRQHandler+0xe50>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d108      	bne.n	800aa18 <HAL_DMA_IRQHandler+0xdbc>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f022 021c 	bic.w	r2, r2, #28
 800aa14:	601a      	str	r2, [r3, #0]
 800aa16:	e007      	b.n	800aa28 <HAL_DMA_IRQHandler+0xdcc>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	681a      	ldr	r2, [r3, #0]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f022 020e 	bic.w	r2, r2, #14
 800aa26:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa2c:	f003 031f 	and.w	r3, r3, #31
 800aa30:	2201      	movs	r2, #1
 800aa32:	409a      	lsls	r2, r3
 800aa34:	69fb      	ldr	r3, [r7, #28]
 800aa36:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2201      	movs	r2, #1
 800aa42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d009      	beq.n	800aa6a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	4798      	blx	r3
 800aa5e:	e004      	b.n	800aa6a <HAL_DMA_IRQHandler+0xe0e>
          return;
 800aa60:	bf00      	nop
 800aa62:	e002      	b.n	800aa6a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800aa64:	bf00      	nop
 800aa66:	e000      	b.n	800aa6a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800aa68:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800aa6a:	3728      	adds	r7, #40	@ 0x28
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}
 800aa70:	40020010 	.word	0x40020010
 800aa74:	40020028 	.word	0x40020028
 800aa78:	40020040 	.word	0x40020040
 800aa7c:	40020058 	.word	0x40020058
 800aa80:	40020070 	.word	0x40020070
 800aa84:	40020088 	.word	0x40020088
 800aa88:	400200a0 	.word	0x400200a0
 800aa8c:	400200b8 	.word	0x400200b8
 800aa90:	40020410 	.word	0x40020410
 800aa94:	40020428 	.word	0x40020428
 800aa98:	40020440 	.word	0x40020440
 800aa9c:	40020458 	.word	0x40020458
 800aaa0:	40020470 	.word	0x40020470
 800aaa4:	40020488 	.word	0x40020488
 800aaa8:	400204a0 	.word	0x400204a0
 800aaac:	400204b8 	.word	0x400204b8

0800aab0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b083      	sub	sp, #12
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	370c      	adds	r7, #12
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b087      	sub	sp, #28
 800aacc:	af00      	add	r7, sp, #0
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	607a      	str	r2, [r7, #4]
 800aad4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aada:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aae0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4a7f      	ldr	r2, [pc, #508]	@ (800ace4 <DMA_SetConfig+0x21c>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d072      	beq.n	800abd2 <DMA_SetConfig+0x10a>
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a7d      	ldr	r2, [pc, #500]	@ (800ace8 <DMA_SetConfig+0x220>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d06d      	beq.n	800abd2 <DMA_SetConfig+0x10a>
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a7c      	ldr	r2, [pc, #496]	@ (800acec <DMA_SetConfig+0x224>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d068      	beq.n	800abd2 <DMA_SetConfig+0x10a>
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a7a      	ldr	r2, [pc, #488]	@ (800acf0 <DMA_SetConfig+0x228>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d063      	beq.n	800abd2 <DMA_SetConfig+0x10a>
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a79      	ldr	r2, [pc, #484]	@ (800acf4 <DMA_SetConfig+0x22c>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d05e      	beq.n	800abd2 <DMA_SetConfig+0x10a>
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a77      	ldr	r2, [pc, #476]	@ (800acf8 <DMA_SetConfig+0x230>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d059      	beq.n	800abd2 <DMA_SetConfig+0x10a>
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4a76      	ldr	r2, [pc, #472]	@ (800acfc <DMA_SetConfig+0x234>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d054      	beq.n	800abd2 <DMA_SetConfig+0x10a>
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a74      	ldr	r2, [pc, #464]	@ (800ad00 <DMA_SetConfig+0x238>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d04f      	beq.n	800abd2 <DMA_SetConfig+0x10a>
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4a73      	ldr	r2, [pc, #460]	@ (800ad04 <DMA_SetConfig+0x23c>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d04a      	beq.n	800abd2 <DMA_SetConfig+0x10a>
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4a71      	ldr	r2, [pc, #452]	@ (800ad08 <DMA_SetConfig+0x240>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d045      	beq.n	800abd2 <DMA_SetConfig+0x10a>
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4a70      	ldr	r2, [pc, #448]	@ (800ad0c <DMA_SetConfig+0x244>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d040      	beq.n	800abd2 <DMA_SetConfig+0x10a>
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4a6e      	ldr	r2, [pc, #440]	@ (800ad10 <DMA_SetConfig+0x248>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d03b      	beq.n	800abd2 <DMA_SetConfig+0x10a>
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4a6d      	ldr	r2, [pc, #436]	@ (800ad14 <DMA_SetConfig+0x24c>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d036      	beq.n	800abd2 <DMA_SetConfig+0x10a>
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	4a6b      	ldr	r2, [pc, #428]	@ (800ad18 <DMA_SetConfig+0x250>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d031      	beq.n	800abd2 <DMA_SetConfig+0x10a>
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4a6a      	ldr	r2, [pc, #424]	@ (800ad1c <DMA_SetConfig+0x254>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d02c      	beq.n	800abd2 <DMA_SetConfig+0x10a>
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4a68      	ldr	r2, [pc, #416]	@ (800ad20 <DMA_SetConfig+0x258>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d027      	beq.n	800abd2 <DMA_SetConfig+0x10a>
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4a67      	ldr	r2, [pc, #412]	@ (800ad24 <DMA_SetConfig+0x25c>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d022      	beq.n	800abd2 <DMA_SetConfig+0x10a>
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4a65      	ldr	r2, [pc, #404]	@ (800ad28 <DMA_SetConfig+0x260>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d01d      	beq.n	800abd2 <DMA_SetConfig+0x10a>
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4a64      	ldr	r2, [pc, #400]	@ (800ad2c <DMA_SetConfig+0x264>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d018      	beq.n	800abd2 <DMA_SetConfig+0x10a>
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4a62      	ldr	r2, [pc, #392]	@ (800ad30 <DMA_SetConfig+0x268>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d013      	beq.n	800abd2 <DMA_SetConfig+0x10a>
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4a61      	ldr	r2, [pc, #388]	@ (800ad34 <DMA_SetConfig+0x26c>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d00e      	beq.n	800abd2 <DMA_SetConfig+0x10a>
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a5f      	ldr	r2, [pc, #380]	@ (800ad38 <DMA_SetConfig+0x270>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d009      	beq.n	800abd2 <DMA_SetConfig+0x10a>
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4a5e      	ldr	r2, [pc, #376]	@ (800ad3c <DMA_SetConfig+0x274>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d004      	beq.n	800abd2 <DMA_SetConfig+0x10a>
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4a5c      	ldr	r2, [pc, #368]	@ (800ad40 <DMA_SetConfig+0x278>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d101      	bne.n	800abd6 <DMA_SetConfig+0x10e>
 800abd2:	2301      	movs	r3, #1
 800abd4:	e000      	b.n	800abd8 <DMA_SetConfig+0x110>
 800abd6:	2300      	movs	r3, #0
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d00d      	beq.n	800abf8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abe0:	68fa      	ldr	r2, [r7, #12]
 800abe2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800abe4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abea:	2b00      	cmp	r3, #0
 800abec:	d004      	beq.n	800abf8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abf2:	68fa      	ldr	r2, [r7, #12]
 800abf4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800abf6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4a39      	ldr	r2, [pc, #228]	@ (800ace4 <DMA_SetConfig+0x21c>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d04a      	beq.n	800ac98 <DMA_SetConfig+0x1d0>
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4a38      	ldr	r2, [pc, #224]	@ (800ace8 <DMA_SetConfig+0x220>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d045      	beq.n	800ac98 <DMA_SetConfig+0x1d0>
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4a36      	ldr	r2, [pc, #216]	@ (800acec <DMA_SetConfig+0x224>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d040      	beq.n	800ac98 <DMA_SetConfig+0x1d0>
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4a35      	ldr	r2, [pc, #212]	@ (800acf0 <DMA_SetConfig+0x228>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d03b      	beq.n	800ac98 <DMA_SetConfig+0x1d0>
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a33      	ldr	r2, [pc, #204]	@ (800acf4 <DMA_SetConfig+0x22c>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d036      	beq.n	800ac98 <DMA_SetConfig+0x1d0>
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4a32      	ldr	r2, [pc, #200]	@ (800acf8 <DMA_SetConfig+0x230>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d031      	beq.n	800ac98 <DMA_SetConfig+0x1d0>
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	4a30      	ldr	r2, [pc, #192]	@ (800acfc <DMA_SetConfig+0x234>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d02c      	beq.n	800ac98 <DMA_SetConfig+0x1d0>
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4a2f      	ldr	r2, [pc, #188]	@ (800ad00 <DMA_SetConfig+0x238>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d027      	beq.n	800ac98 <DMA_SetConfig+0x1d0>
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4a2d      	ldr	r2, [pc, #180]	@ (800ad04 <DMA_SetConfig+0x23c>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d022      	beq.n	800ac98 <DMA_SetConfig+0x1d0>
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	4a2c      	ldr	r2, [pc, #176]	@ (800ad08 <DMA_SetConfig+0x240>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d01d      	beq.n	800ac98 <DMA_SetConfig+0x1d0>
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a2a      	ldr	r2, [pc, #168]	@ (800ad0c <DMA_SetConfig+0x244>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d018      	beq.n	800ac98 <DMA_SetConfig+0x1d0>
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a29      	ldr	r2, [pc, #164]	@ (800ad10 <DMA_SetConfig+0x248>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d013      	beq.n	800ac98 <DMA_SetConfig+0x1d0>
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4a27      	ldr	r2, [pc, #156]	@ (800ad14 <DMA_SetConfig+0x24c>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d00e      	beq.n	800ac98 <DMA_SetConfig+0x1d0>
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4a26      	ldr	r2, [pc, #152]	@ (800ad18 <DMA_SetConfig+0x250>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d009      	beq.n	800ac98 <DMA_SetConfig+0x1d0>
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4a24      	ldr	r2, [pc, #144]	@ (800ad1c <DMA_SetConfig+0x254>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d004      	beq.n	800ac98 <DMA_SetConfig+0x1d0>
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4a23      	ldr	r2, [pc, #140]	@ (800ad20 <DMA_SetConfig+0x258>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d101      	bne.n	800ac9c <DMA_SetConfig+0x1d4>
 800ac98:	2301      	movs	r3, #1
 800ac9a:	e000      	b.n	800ac9e <DMA_SetConfig+0x1d6>
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d059      	beq.n	800ad56 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aca6:	f003 031f 	and.w	r3, r3, #31
 800acaa:	223f      	movs	r2, #63	@ 0x3f
 800acac:	409a      	lsls	r2, r3
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800acc0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	683a      	ldr	r2, [r7, #0]
 800acc8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	2b40      	cmp	r3, #64	@ 0x40
 800acd0:	d138      	bne.n	800ad44 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	687a      	ldr	r2, [r7, #4]
 800acd8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	68ba      	ldr	r2, [r7, #8]
 800ace0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800ace2:	e086      	b.n	800adf2 <DMA_SetConfig+0x32a>
 800ace4:	40020010 	.word	0x40020010
 800ace8:	40020028 	.word	0x40020028
 800acec:	40020040 	.word	0x40020040
 800acf0:	40020058 	.word	0x40020058
 800acf4:	40020070 	.word	0x40020070
 800acf8:	40020088 	.word	0x40020088
 800acfc:	400200a0 	.word	0x400200a0
 800ad00:	400200b8 	.word	0x400200b8
 800ad04:	40020410 	.word	0x40020410
 800ad08:	40020428 	.word	0x40020428
 800ad0c:	40020440 	.word	0x40020440
 800ad10:	40020458 	.word	0x40020458
 800ad14:	40020470 	.word	0x40020470
 800ad18:	40020488 	.word	0x40020488
 800ad1c:	400204a0 	.word	0x400204a0
 800ad20:	400204b8 	.word	0x400204b8
 800ad24:	58025408 	.word	0x58025408
 800ad28:	5802541c 	.word	0x5802541c
 800ad2c:	58025430 	.word	0x58025430
 800ad30:	58025444 	.word	0x58025444
 800ad34:	58025458 	.word	0x58025458
 800ad38:	5802546c 	.word	0x5802546c
 800ad3c:	58025480 	.word	0x58025480
 800ad40:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	68ba      	ldr	r2, [r7, #8]
 800ad4a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	60da      	str	r2, [r3, #12]
}
 800ad54:	e04d      	b.n	800adf2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a29      	ldr	r2, [pc, #164]	@ (800ae00 <DMA_SetConfig+0x338>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d022      	beq.n	800ada6 <DMA_SetConfig+0x2de>
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4a27      	ldr	r2, [pc, #156]	@ (800ae04 <DMA_SetConfig+0x33c>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d01d      	beq.n	800ada6 <DMA_SetConfig+0x2de>
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a26      	ldr	r2, [pc, #152]	@ (800ae08 <DMA_SetConfig+0x340>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d018      	beq.n	800ada6 <DMA_SetConfig+0x2de>
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a24      	ldr	r2, [pc, #144]	@ (800ae0c <DMA_SetConfig+0x344>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d013      	beq.n	800ada6 <DMA_SetConfig+0x2de>
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4a23      	ldr	r2, [pc, #140]	@ (800ae10 <DMA_SetConfig+0x348>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d00e      	beq.n	800ada6 <DMA_SetConfig+0x2de>
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4a21      	ldr	r2, [pc, #132]	@ (800ae14 <DMA_SetConfig+0x34c>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d009      	beq.n	800ada6 <DMA_SetConfig+0x2de>
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4a20      	ldr	r2, [pc, #128]	@ (800ae18 <DMA_SetConfig+0x350>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d004      	beq.n	800ada6 <DMA_SetConfig+0x2de>
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a1e      	ldr	r2, [pc, #120]	@ (800ae1c <DMA_SetConfig+0x354>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d101      	bne.n	800adaa <DMA_SetConfig+0x2e2>
 800ada6:	2301      	movs	r3, #1
 800ada8:	e000      	b.n	800adac <DMA_SetConfig+0x2e4>
 800adaa:	2300      	movs	r3, #0
 800adac:	2b00      	cmp	r3, #0
 800adae:	d020      	beq.n	800adf2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800adb4:	f003 031f 	and.w	r3, r3, #31
 800adb8:	2201      	movs	r2, #1
 800adba:	409a      	lsls	r2, r3
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	683a      	ldr	r2, [r7, #0]
 800adc6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	2b40      	cmp	r3, #64	@ 0x40
 800adce:	d108      	bne.n	800ade2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	68ba      	ldr	r2, [r7, #8]
 800adde:	60da      	str	r2, [r3, #12]
}
 800ade0:	e007      	b.n	800adf2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	68ba      	ldr	r2, [r7, #8]
 800ade8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	60da      	str	r2, [r3, #12]
}
 800adf2:	bf00      	nop
 800adf4:	371c      	adds	r7, #28
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr
 800adfe:	bf00      	nop
 800ae00:	58025408 	.word	0x58025408
 800ae04:	5802541c 	.word	0x5802541c
 800ae08:	58025430 	.word	0x58025430
 800ae0c:	58025444 	.word	0x58025444
 800ae10:	58025458 	.word	0x58025458
 800ae14:	5802546c 	.word	0x5802546c
 800ae18:	58025480 	.word	0x58025480
 800ae1c:	58025494 	.word	0x58025494

0800ae20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b085      	sub	sp, #20
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4a42      	ldr	r2, [pc, #264]	@ (800af38 <DMA_CalcBaseAndBitshift+0x118>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d04a      	beq.n	800aec8 <DMA_CalcBaseAndBitshift+0xa8>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	4a41      	ldr	r2, [pc, #260]	@ (800af3c <DMA_CalcBaseAndBitshift+0x11c>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d045      	beq.n	800aec8 <DMA_CalcBaseAndBitshift+0xa8>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a3f      	ldr	r2, [pc, #252]	@ (800af40 <DMA_CalcBaseAndBitshift+0x120>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d040      	beq.n	800aec8 <DMA_CalcBaseAndBitshift+0xa8>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4a3e      	ldr	r2, [pc, #248]	@ (800af44 <DMA_CalcBaseAndBitshift+0x124>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d03b      	beq.n	800aec8 <DMA_CalcBaseAndBitshift+0xa8>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4a3c      	ldr	r2, [pc, #240]	@ (800af48 <DMA_CalcBaseAndBitshift+0x128>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d036      	beq.n	800aec8 <DMA_CalcBaseAndBitshift+0xa8>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4a3b      	ldr	r2, [pc, #236]	@ (800af4c <DMA_CalcBaseAndBitshift+0x12c>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d031      	beq.n	800aec8 <DMA_CalcBaseAndBitshift+0xa8>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	4a39      	ldr	r2, [pc, #228]	@ (800af50 <DMA_CalcBaseAndBitshift+0x130>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d02c      	beq.n	800aec8 <DMA_CalcBaseAndBitshift+0xa8>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4a38      	ldr	r2, [pc, #224]	@ (800af54 <DMA_CalcBaseAndBitshift+0x134>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d027      	beq.n	800aec8 <DMA_CalcBaseAndBitshift+0xa8>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4a36      	ldr	r2, [pc, #216]	@ (800af58 <DMA_CalcBaseAndBitshift+0x138>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d022      	beq.n	800aec8 <DMA_CalcBaseAndBitshift+0xa8>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	4a35      	ldr	r2, [pc, #212]	@ (800af5c <DMA_CalcBaseAndBitshift+0x13c>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d01d      	beq.n	800aec8 <DMA_CalcBaseAndBitshift+0xa8>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a33      	ldr	r2, [pc, #204]	@ (800af60 <DMA_CalcBaseAndBitshift+0x140>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d018      	beq.n	800aec8 <DMA_CalcBaseAndBitshift+0xa8>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a32      	ldr	r2, [pc, #200]	@ (800af64 <DMA_CalcBaseAndBitshift+0x144>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d013      	beq.n	800aec8 <DMA_CalcBaseAndBitshift+0xa8>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4a30      	ldr	r2, [pc, #192]	@ (800af68 <DMA_CalcBaseAndBitshift+0x148>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d00e      	beq.n	800aec8 <DMA_CalcBaseAndBitshift+0xa8>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a2f      	ldr	r2, [pc, #188]	@ (800af6c <DMA_CalcBaseAndBitshift+0x14c>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d009      	beq.n	800aec8 <DMA_CalcBaseAndBitshift+0xa8>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4a2d      	ldr	r2, [pc, #180]	@ (800af70 <DMA_CalcBaseAndBitshift+0x150>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d004      	beq.n	800aec8 <DMA_CalcBaseAndBitshift+0xa8>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4a2c      	ldr	r2, [pc, #176]	@ (800af74 <DMA_CalcBaseAndBitshift+0x154>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d101      	bne.n	800aecc <DMA_CalcBaseAndBitshift+0xac>
 800aec8:	2301      	movs	r3, #1
 800aeca:	e000      	b.n	800aece <DMA_CalcBaseAndBitshift+0xae>
 800aecc:	2300      	movs	r3, #0
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d024      	beq.n	800af1c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	3b10      	subs	r3, #16
 800aeda:	4a27      	ldr	r2, [pc, #156]	@ (800af78 <DMA_CalcBaseAndBitshift+0x158>)
 800aedc:	fba2 2303 	umull	r2, r3, r2, r3
 800aee0:	091b      	lsrs	r3, r3, #4
 800aee2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f003 0307 	and.w	r3, r3, #7
 800aeea:	4a24      	ldr	r2, [pc, #144]	@ (800af7c <DMA_CalcBaseAndBitshift+0x15c>)
 800aeec:	5cd3      	ldrb	r3, [r2, r3]
 800aeee:	461a      	mov	r2, r3
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2b03      	cmp	r3, #3
 800aef8:	d908      	bls.n	800af0c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	461a      	mov	r2, r3
 800af00:	4b1f      	ldr	r3, [pc, #124]	@ (800af80 <DMA_CalcBaseAndBitshift+0x160>)
 800af02:	4013      	ands	r3, r2
 800af04:	1d1a      	adds	r2, r3, #4
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	659a      	str	r2, [r3, #88]	@ 0x58
 800af0a:	e00d      	b.n	800af28 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	461a      	mov	r2, r3
 800af12:	4b1b      	ldr	r3, [pc, #108]	@ (800af80 <DMA_CalcBaseAndBitshift+0x160>)
 800af14:	4013      	ands	r3, r2
 800af16:	687a      	ldr	r2, [r7, #4]
 800af18:	6593      	str	r3, [r2, #88]	@ 0x58
 800af1a:	e005      	b.n	800af28 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3714      	adds	r7, #20
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr
 800af38:	40020010 	.word	0x40020010
 800af3c:	40020028 	.word	0x40020028
 800af40:	40020040 	.word	0x40020040
 800af44:	40020058 	.word	0x40020058
 800af48:	40020070 	.word	0x40020070
 800af4c:	40020088 	.word	0x40020088
 800af50:	400200a0 	.word	0x400200a0
 800af54:	400200b8 	.word	0x400200b8
 800af58:	40020410 	.word	0x40020410
 800af5c:	40020428 	.word	0x40020428
 800af60:	40020440 	.word	0x40020440
 800af64:	40020458 	.word	0x40020458
 800af68:	40020470 	.word	0x40020470
 800af6c:	40020488 	.word	0x40020488
 800af70:	400204a0 	.word	0x400204a0
 800af74:	400204b8 	.word	0x400204b8
 800af78:	aaaaaaab 	.word	0xaaaaaaab
 800af7c:	0802ca10 	.word	0x0802ca10
 800af80:	fffffc00 	.word	0xfffffc00

0800af84 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800af84:	b480      	push	{r7}
 800af86:	b085      	sub	sp, #20
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af8c:	2300      	movs	r3, #0
 800af8e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	699b      	ldr	r3, [r3, #24]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d120      	bne.n	800afda <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af9c:	2b03      	cmp	r3, #3
 800af9e:	d858      	bhi.n	800b052 <DMA_CheckFifoParam+0xce>
 800afa0:	a201      	add	r2, pc, #4	@ (adr r2, 800afa8 <DMA_CheckFifoParam+0x24>)
 800afa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa6:	bf00      	nop
 800afa8:	0800afb9 	.word	0x0800afb9
 800afac:	0800afcb 	.word	0x0800afcb
 800afb0:	0800afb9 	.word	0x0800afb9
 800afb4:	0800b053 	.word	0x0800b053
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d048      	beq.n	800b056 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800afc4:	2301      	movs	r3, #1
 800afc6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800afc8:	e045      	b.n	800b056 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800afd2:	d142      	bne.n	800b05a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800afd4:	2301      	movs	r3, #1
 800afd6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800afd8:	e03f      	b.n	800b05a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	699b      	ldr	r3, [r3, #24]
 800afde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800afe2:	d123      	bne.n	800b02c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afe8:	2b03      	cmp	r3, #3
 800afea:	d838      	bhi.n	800b05e <DMA_CheckFifoParam+0xda>
 800afec:	a201      	add	r2, pc, #4	@ (adr r2, 800aff4 <DMA_CheckFifoParam+0x70>)
 800afee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff2:	bf00      	nop
 800aff4:	0800b005 	.word	0x0800b005
 800aff8:	0800b00b 	.word	0x0800b00b
 800affc:	0800b005 	.word	0x0800b005
 800b000:	0800b01d 	.word	0x0800b01d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800b004:	2301      	movs	r3, #1
 800b006:	73fb      	strb	r3, [r7, #15]
        break;
 800b008:	e030      	b.n	800b06c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b00e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b012:	2b00      	cmp	r3, #0
 800b014:	d025      	beq.n	800b062 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800b016:	2301      	movs	r3, #1
 800b018:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b01a:	e022      	b.n	800b062 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b020:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800b024:	d11f      	bne.n	800b066 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800b026:	2301      	movs	r3, #1
 800b028:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b02a:	e01c      	b.n	800b066 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b030:	2b02      	cmp	r3, #2
 800b032:	d902      	bls.n	800b03a <DMA_CheckFifoParam+0xb6>
 800b034:	2b03      	cmp	r3, #3
 800b036:	d003      	beq.n	800b040 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800b038:	e018      	b.n	800b06c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800b03a:	2301      	movs	r3, #1
 800b03c:	73fb      	strb	r3, [r7, #15]
        break;
 800b03e:	e015      	b.n	800b06c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b044:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d00e      	beq.n	800b06a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800b04c:	2301      	movs	r3, #1
 800b04e:	73fb      	strb	r3, [r7, #15]
    break;
 800b050:	e00b      	b.n	800b06a <DMA_CheckFifoParam+0xe6>
        break;
 800b052:	bf00      	nop
 800b054:	e00a      	b.n	800b06c <DMA_CheckFifoParam+0xe8>
        break;
 800b056:	bf00      	nop
 800b058:	e008      	b.n	800b06c <DMA_CheckFifoParam+0xe8>
        break;
 800b05a:	bf00      	nop
 800b05c:	e006      	b.n	800b06c <DMA_CheckFifoParam+0xe8>
        break;
 800b05e:	bf00      	nop
 800b060:	e004      	b.n	800b06c <DMA_CheckFifoParam+0xe8>
        break;
 800b062:	bf00      	nop
 800b064:	e002      	b.n	800b06c <DMA_CheckFifoParam+0xe8>
        break;
 800b066:	bf00      	nop
 800b068:	e000      	b.n	800b06c <DMA_CheckFifoParam+0xe8>
    break;
 800b06a:	bf00      	nop
    }
  }

  return status;
 800b06c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3714      	adds	r7, #20
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr
 800b07a:	bf00      	nop

0800b07c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b085      	sub	sp, #20
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	4a38      	ldr	r2, [pc, #224]	@ (800b170 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d022      	beq.n	800b0da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a36      	ldr	r2, [pc, #216]	@ (800b174 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d01d      	beq.n	800b0da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4a35      	ldr	r2, [pc, #212]	@ (800b178 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d018      	beq.n	800b0da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a33      	ldr	r2, [pc, #204]	@ (800b17c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d013      	beq.n	800b0da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4a32      	ldr	r2, [pc, #200]	@ (800b180 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d00e      	beq.n	800b0da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4a30      	ldr	r2, [pc, #192]	@ (800b184 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d009      	beq.n	800b0da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4a2f      	ldr	r2, [pc, #188]	@ (800b188 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d004      	beq.n	800b0da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4a2d      	ldr	r2, [pc, #180]	@ (800b18c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d101      	bne.n	800b0de <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800b0da:	2301      	movs	r3, #1
 800b0dc:	e000      	b.n	800b0e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800b0de:	2300      	movs	r3, #0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d01a      	beq.n	800b11a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	b2db      	uxtb	r3, r3
 800b0ea:	3b08      	subs	r3, #8
 800b0ec:	4a28      	ldr	r2, [pc, #160]	@ (800b190 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800b0ee:	fba2 2303 	umull	r2, r3, r2, r3
 800b0f2:	091b      	lsrs	r3, r3, #4
 800b0f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800b0f6:	68fa      	ldr	r2, [r7, #12]
 800b0f8:	4b26      	ldr	r3, [pc, #152]	@ (800b194 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800b0fa:	4413      	add	r3, r2
 800b0fc:	009b      	lsls	r3, r3, #2
 800b0fe:	461a      	mov	r2, r3
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	4a24      	ldr	r2, [pc, #144]	@ (800b198 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800b108:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f003 031f 	and.w	r3, r3, #31
 800b110:	2201      	movs	r2, #1
 800b112:	409a      	lsls	r2, r3
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800b118:	e024      	b.n	800b164 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	b2db      	uxtb	r3, r3
 800b120:	3b10      	subs	r3, #16
 800b122:	4a1e      	ldr	r2, [pc, #120]	@ (800b19c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800b124:	fba2 2303 	umull	r2, r3, r2, r3
 800b128:	091b      	lsrs	r3, r3, #4
 800b12a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	4a1c      	ldr	r2, [pc, #112]	@ (800b1a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800b130:	4293      	cmp	r3, r2
 800b132:	d806      	bhi.n	800b142 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	4a1b      	ldr	r2, [pc, #108]	@ (800b1a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d902      	bls.n	800b142 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	3308      	adds	r3, #8
 800b140:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b142:	68fa      	ldr	r2, [r7, #12]
 800b144:	4b18      	ldr	r3, [pc, #96]	@ (800b1a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800b146:	4413      	add	r3, r2
 800b148:	009b      	lsls	r3, r3, #2
 800b14a:	461a      	mov	r2, r3
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	4a16      	ldr	r2, [pc, #88]	@ (800b1ac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800b154:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f003 031f 	and.w	r3, r3, #31
 800b15c:	2201      	movs	r2, #1
 800b15e:	409a      	lsls	r2, r3
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b164:	bf00      	nop
 800b166:	3714      	adds	r7, #20
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr
 800b170:	58025408 	.word	0x58025408
 800b174:	5802541c 	.word	0x5802541c
 800b178:	58025430 	.word	0x58025430
 800b17c:	58025444 	.word	0x58025444
 800b180:	58025458 	.word	0x58025458
 800b184:	5802546c 	.word	0x5802546c
 800b188:	58025480 	.word	0x58025480
 800b18c:	58025494 	.word	0x58025494
 800b190:	cccccccd 	.word	0xcccccccd
 800b194:	16009600 	.word	0x16009600
 800b198:	58025880 	.word	0x58025880
 800b19c:	aaaaaaab 	.word	0xaaaaaaab
 800b1a0:	400204b8 	.word	0x400204b8
 800b1a4:	4002040f 	.word	0x4002040f
 800b1a8:	10008200 	.word	0x10008200
 800b1ac:	40020880 	.word	0x40020880

0800b1b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b085      	sub	sp, #20
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d04a      	beq.n	800b25c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2b08      	cmp	r3, #8
 800b1ca:	d847      	bhi.n	800b25c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	4a25      	ldr	r2, [pc, #148]	@ (800b268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d022      	beq.n	800b21c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	4a24      	ldr	r2, [pc, #144]	@ (800b26c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d01d      	beq.n	800b21c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4a22      	ldr	r2, [pc, #136]	@ (800b270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d018      	beq.n	800b21c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4a21      	ldr	r2, [pc, #132]	@ (800b274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d013      	beq.n	800b21c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4a1f      	ldr	r2, [pc, #124]	@ (800b278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d00e      	beq.n	800b21c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4a1e      	ldr	r2, [pc, #120]	@ (800b27c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d009      	beq.n	800b21c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	4a1c      	ldr	r2, [pc, #112]	@ (800b280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d004      	beq.n	800b21c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4a1b      	ldr	r2, [pc, #108]	@ (800b284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d101      	bne.n	800b220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800b21c:	2301      	movs	r3, #1
 800b21e:	e000      	b.n	800b222 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800b220:	2300      	movs	r3, #0
 800b222:	2b00      	cmp	r3, #0
 800b224:	d00a      	beq.n	800b23c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800b226:	68fa      	ldr	r2, [r7, #12]
 800b228:	4b17      	ldr	r3, [pc, #92]	@ (800b288 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800b22a:	4413      	add	r3, r2
 800b22c:	009b      	lsls	r3, r3, #2
 800b22e:	461a      	mov	r2, r3
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	4a15      	ldr	r2, [pc, #84]	@ (800b28c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800b238:	671a      	str	r2, [r3, #112]	@ 0x70
 800b23a:	e009      	b.n	800b250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b23c:	68fa      	ldr	r2, [r7, #12]
 800b23e:	4b14      	ldr	r3, [pc, #80]	@ (800b290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800b240:	4413      	add	r3, r2
 800b242:	009b      	lsls	r3, r3, #2
 800b244:	461a      	mov	r2, r3
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	4a11      	ldr	r2, [pc, #68]	@ (800b294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800b24e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	3b01      	subs	r3, #1
 800b254:	2201      	movs	r2, #1
 800b256:	409a      	lsls	r2, r3
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800b25c:	bf00      	nop
 800b25e:	3714      	adds	r7, #20
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr
 800b268:	58025408 	.word	0x58025408
 800b26c:	5802541c 	.word	0x5802541c
 800b270:	58025430 	.word	0x58025430
 800b274:	58025444 	.word	0x58025444
 800b278:	58025458 	.word	0x58025458
 800b27c:	5802546c 	.word	0x5802546c
 800b280:	58025480 	.word	0x58025480
 800b284:	58025494 	.word	0x58025494
 800b288:	1600963f 	.word	0x1600963f
 800b28c:	58025940 	.word	0x58025940
 800b290:	1000823f 	.word	0x1000823f
 800b294:	40020940 	.word	0x40020940

0800b298 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b298:	b480      	push	{r7}
 800b29a:	b089      	sub	sp, #36	@ 0x24
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b2a6:	4b86      	ldr	r3, [pc, #536]	@ (800b4c0 <HAL_GPIO_Init+0x228>)
 800b2a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b2aa:	e18c      	b.n	800b5c6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	2101      	movs	r1, #1
 800b2b2:	69fb      	ldr	r3, [r7, #28]
 800b2b4:	fa01 f303 	lsl.w	r3, r1, r3
 800b2b8:	4013      	ands	r3, r2
 800b2ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	f000 817e 	beq.w	800b5c0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	f003 0303 	and.w	r3, r3, #3
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d005      	beq.n	800b2dc <HAL_GPIO_Init+0x44>
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	f003 0303 	and.w	r3, r3, #3
 800b2d8:	2b02      	cmp	r3, #2
 800b2da:	d130      	bne.n	800b33e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	689b      	ldr	r3, [r3, #8]
 800b2e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b2e2:	69fb      	ldr	r3, [r7, #28]
 800b2e4:	005b      	lsls	r3, r3, #1
 800b2e6:	2203      	movs	r2, #3
 800b2e8:	fa02 f303 	lsl.w	r3, r2, r3
 800b2ec:	43db      	mvns	r3, r3
 800b2ee:	69ba      	ldr	r2, [r7, #24]
 800b2f0:	4013      	ands	r3, r2
 800b2f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	68da      	ldr	r2, [r3, #12]
 800b2f8:	69fb      	ldr	r3, [r7, #28]
 800b2fa:	005b      	lsls	r3, r3, #1
 800b2fc:	fa02 f303 	lsl.w	r3, r2, r3
 800b300:	69ba      	ldr	r2, [r7, #24]
 800b302:	4313      	orrs	r3, r2
 800b304:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	69ba      	ldr	r2, [r7, #24]
 800b30a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b312:	2201      	movs	r2, #1
 800b314:	69fb      	ldr	r3, [r7, #28]
 800b316:	fa02 f303 	lsl.w	r3, r2, r3
 800b31a:	43db      	mvns	r3, r3
 800b31c:	69ba      	ldr	r2, [r7, #24]
 800b31e:	4013      	ands	r3, r2
 800b320:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	091b      	lsrs	r3, r3, #4
 800b328:	f003 0201 	and.w	r2, r3, #1
 800b32c:	69fb      	ldr	r3, [r7, #28]
 800b32e:	fa02 f303 	lsl.w	r3, r2, r3
 800b332:	69ba      	ldr	r2, [r7, #24]
 800b334:	4313      	orrs	r3, r2
 800b336:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	69ba      	ldr	r2, [r7, #24]
 800b33c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	f003 0303 	and.w	r3, r3, #3
 800b346:	2b03      	cmp	r3, #3
 800b348:	d017      	beq.n	800b37a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	68db      	ldr	r3, [r3, #12]
 800b34e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b350:	69fb      	ldr	r3, [r7, #28]
 800b352:	005b      	lsls	r3, r3, #1
 800b354:	2203      	movs	r2, #3
 800b356:	fa02 f303 	lsl.w	r3, r2, r3
 800b35a:	43db      	mvns	r3, r3
 800b35c:	69ba      	ldr	r2, [r7, #24]
 800b35e:	4013      	ands	r3, r2
 800b360:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	689a      	ldr	r2, [r3, #8]
 800b366:	69fb      	ldr	r3, [r7, #28]
 800b368:	005b      	lsls	r3, r3, #1
 800b36a:	fa02 f303 	lsl.w	r3, r2, r3
 800b36e:	69ba      	ldr	r2, [r7, #24]
 800b370:	4313      	orrs	r3, r2
 800b372:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	69ba      	ldr	r2, [r7, #24]
 800b378:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	f003 0303 	and.w	r3, r3, #3
 800b382:	2b02      	cmp	r3, #2
 800b384:	d123      	bne.n	800b3ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b386:	69fb      	ldr	r3, [r7, #28]
 800b388:	08da      	lsrs	r2, r3, #3
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	3208      	adds	r2, #8
 800b38e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b394:	69fb      	ldr	r3, [r7, #28]
 800b396:	f003 0307 	and.w	r3, r3, #7
 800b39a:	009b      	lsls	r3, r3, #2
 800b39c:	220f      	movs	r2, #15
 800b39e:	fa02 f303 	lsl.w	r3, r2, r3
 800b3a2:	43db      	mvns	r3, r3
 800b3a4:	69ba      	ldr	r2, [r7, #24]
 800b3a6:	4013      	ands	r3, r2
 800b3a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	691a      	ldr	r2, [r3, #16]
 800b3ae:	69fb      	ldr	r3, [r7, #28]
 800b3b0:	f003 0307 	and.w	r3, r3, #7
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	fa02 f303 	lsl.w	r3, r2, r3
 800b3ba:	69ba      	ldr	r2, [r7, #24]
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b3c0:	69fb      	ldr	r3, [r7, #28]
 800b3c2:	08da      	lsrs	r2, r3, #3
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	3208      	adds	r2, #8
 800b3c8:	69b9      	ldr	r1, [r7, #24]
 800b3ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b3d4:	69fb      	ldr	r3, [r7, #28]
 800b3d6:	005b      	lsls	r3, r3, #1
 800b3d8:	2203      	movs	r2, #3
 800b3da:	fa02 f303 	lsl.w	r3, r2, r3
 800b3de:	43db      	mvns	r3, r3
 800b3e0:	69ba      	ldr	r2, [r7, #24]
 800b3e2:	4013      	ands	r3, r2
 800b3e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	f003 0203 	and.w	r2, r3, #3
 800b3ee:	69fb      	ldr	r3, [r7, #28]
 800b3f0:	005b      	lsls	r3, r3, #1
 800b3f2:	fa02 f303 	lsl.w	r3, r2, r3
 800b3f6:	69ba      	ldr	r2, [r7, #24]
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	69ba      	ldr	r2, [r7, #24]
 800b400:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	f000 80d8 	beq.w	800b5c0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b410:	4b2c      	ldr	r3, [pc, #176]	@ (800b4c4 <HAL_GPIO_Init+0x22c>)
 800b412:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b416:	4a2b      	ldr	r2, [pc, #172]	@ (800b4c4 <HAL_GPIO_Init+0x22c>)
 800b418:	f043 0302 	orr.w	r3, r3, #2
 800b41c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800b420:	4b28      	ldr	r3, [pc, #160]	@ (800b4c4 <HAL_GPIO_Init+0x22c>)
 800b422:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b426:	f003 0302 	and.w	r3, r3, #2
 800b42a:	60fb      	str	r3, [r7, #12]
 800b42c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b42e:	4a26      	ldr	r2, [pc, #152]	@ (800b4c8 <HAL_GPIO_Init+0x230>)
 800b430:	69fb      	ldr	r3, [r7, #28]
 800b432:	089b      	lsrs	r3, r3, #2
 800b434:	3302      	adds	r3, #2
 800b436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b43a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b43c:	69fb      	ldr	r3, [r7, #28]
 800b43e:	f003 0303 	and.w	r3, r3, #3
 800b442:	009b      	lsls	r3, r3, #2
 800b444:	220f      	movs	r2, #15
 800b446:	fa02 f303 	lsl.w	r3, r2, r3
 800b44a:	43db      	mvns	r3, r3
 800b44c:	69ba      	ldr	r2, [r7, #24]
 800b44e:	4013      	ands	r3, r2
 800b450:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	4a1d      	ldr	r2, [pc, #116]	@ (800b4cc <HAL_GPIO_Init+0x234>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d04a      	beq.n	800b4f0 <HAL_GPIO_Init+0x258>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	4a1c      	ldr	r2, [pc, #112]	@ (800b4d0 <HAL_GPIO_Init+0x238>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d02b      	beq.n	800b4ba <HAL_GPIO_Init+0x222>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	4a1b      	ldr	r2, [pc, #108]	@ (800b4d4 <HAL_GPIO_Init+0x23c>)
 800b466:	4293      	cmp	r3, r2
 800b468:	d025      	beq.n	800b4b6 <HAL_GPIO_Init+0x21e>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	4a1a      	ldr	r2, [pc, #104]	@ (800b4d8 <HAL_GPIO_Init+0x240>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d01f      	beq.n	800b4b2 <HAL_GPIO_Init+0x21a>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	4a19      	ldr	r2, [pc, #100]	@ (800b4dc <HAL_GPIO_Init+0x244>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d019      	beq.n	800b4ae <HAL_GPIO_Init+0x216>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	4a18      	ldr	r2, [pc, #96]	@ (800b4e0 <HAL_GPIO_Init+0x248>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d013      	beq.n	800b4aa <HAL_GPIO_Init+0x212>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	4a17      	ldr	r2, [pc, #92]	@ (800b4e4 <HAL_GPIO_Init+0x24c>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d00d      	beq.n	800b4a6 <HAL_GPIO_Init+0x20e>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	4a16      	ldr	r2, [pc, #88]	@ (800b4e8 <HAL_GPIO_Init+0x250>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	d007      	beq.n	800b4a2 <HAL_GPIO_Init+0x20a>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	4a15      	ldr	r2, [pc, #84]	@ (800b4ec <HAL_GPIO_Init+0x254>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d101      	bne.n	800b49e <HAL_GPIO_Init+0x206>
 800b49a:	2309      	movs	r3, #9
 800b49c:	e029      	b.n	800b4f2 <HAL_GPIO_Init+0x25a>
 800b49e:	230a      	movs	r3, #10
 800b4a0:	e027      	b.n	800b4f2 <HAL_GPIO_Init+0x25a>
 800b4a2:	2307      	movs	r3, #7
 800b4a4:	e025      	b.n	800b4f2 <HAL_GPIO_Init+0x25a>
 800b4a6:	2306      	movs	r3, #6
 800b4a8:	e023      	b.n	800b4f2 <HAL_GPIO_Init+0x25a>
 800b4aa:	2305      	movs	r3, #5
 800b4ac:	e021      	b.n	800b4f2 <HAL_GPIO_Init+0x25a>
 800b4ae:	2304      	movs	r3, #4
 800b4b0:	e01f      	b.n	800b4f2 <HAL_GPIO_Init+0x25a>
 800b4b2:	2303      	movs	r3, #3
 800b4b4:	e01d      	b.n	800b4f2 <HAL_GPIO_Init+0x25a>
 800b4b6:	2302      	movs	r3, #2
 800b4b8:	e01b      	b.n	800b4f2 <HAL_GPIO_Init+0x25a>
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e019      	b.n	800b4f2 <HAL_GPIO_Init+0x25a>
 800b4be:	bf00      	nop
 800b4c0:	58000080 	.word	0x58000080
 800b4c4:	58024400 	.word	0x58024400
 800b4c8:	58000400 	.word	0x58000400
 800b4cc:	58020000 	.word	0x58020000
 800b4d0:	58020400 	.word	0x58020400
 800b4d4:	58020800 	.word	0x58020800
 800b4d8:	58020c00 	.word	0x58020c00
 800b4dc:	58021000 	.word	0x58021000
 800b4e0:	58021400 	.word	0x58021400
 800b4e4:	58021800 	.word	0x58021800
 800b4e8:	58021c00 	.word	0x58021c00
 800b4ec:	58022400 	.word	0x58022400
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	69fa      	ldr	r2, [r7, #28]
 800b4f4:	f002 0203 	and.w	r2, r2, #3
 800b4f8:	0092      	lsls	r2, r2, #2
 800b4fa:	4093      	lsls	r3, r2
 800b4fc:	69ba      	ldr	r2, [r7, #24]
 800b4fe:	4313      	orrs	r3, r2
 800b500:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b502:	4938      	ldr	r1, [pc, #224]	@ (800b5e4 <HAL_GPIO_Init+0x34c>)
 800b504:	69fb      	ldr	r3, [r7, #28]
 800b506:	089b      	lsrs	r3, r3, #2
 800b508:	3302      	adds	r3, #2
 800b50a:	69ba      	ldr	r2, [r7, #24]
 800b50c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b510:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	43db      	mvns	r3, r3
 800b51c:	69ba      	ldr	r2, [r7, #24]
 800b51e:	4013      	ands	r3, r2
 800b520:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d003      	beq.n	800b536 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800b52e:	69ba      	ldr	r2, [r7, #24]
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	4313      	orrs	r3, r2
 800b534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b536:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b53a:	69bb      	ldr	r3, [r7, #24]
 800b53c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b53e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	43db      	mvns	r3, r3
 800b54a:	69ba      	ldr	r2, [r7, #24]
 800b54c:	4013      	ands	r3, r2
 800b54e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d003      	beq.n	800b564 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800b55c:	69ba      	ldr	r2, [r7, #24]
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	4313      	orrs	r3, r2
 800b562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b564:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b568:	69bb      	ldr	r3, [r7, #24]
 800b56a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	43db      	mvns	r3, r3
 800b576:	69ba      	ldr	r2, [r7, #24]
 800b578:	4013      	ands	r3, r2
 800b57a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b584:	2b00      	cmp	r3, #0
 800b586:	d003      	beq.n	800b590 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800b588:	69ba      	ldr	r2, [r7, #24]
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	4313      	orrs	r3, r2
 800b58e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	69ba      	ldr	r2, [r7, #24]
 800b594:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	43db      	mvns	r3, r3
 800b5a0:	69ba      	ldr	r2, [r7, #24]
 800b5a2:	4013      	ands	r3, r2
 800b5a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d003      	beq.n	800b5ba <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800b5b2:	69ba      	ldr	r2, [r7, #24]
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	69ba      	ldr	r2, [r7, #24]
 800b5be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b5c0:	69fb      	ldr	r3, [r7, #28]
 800b5c2:	3301      	adds	r3, #1
 800b5c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	681a      	ldr	r2, [r3, #0]
 800b5ca:	69fb      	ldr	r3, [r7, #28]
 800b5cc:	fa22 f303 	lsr.w	r3, r2, r3
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	f47f ae6b 	bne.w	800b2ac <HAL_GPIO_Init+0x14>
  }
}
 800b5d6:	bf00      	nop
 800b5d8:	bf00      	nop
 800b5da:	3724      	adds	r7, #36	@ 0x24
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr
 800b5e4:	58000400 	.word	0x58000400

0800b5e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b085      	sub	sp, #20
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	460b      	mov	r3, r1
 800b5f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	691a      	ldr	r2, [r3, #16]
 800b5f8:	887b      	ldrh	r3, [r7, #2]
 800b5fa:	4013      	ands	r3, r2
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d002      	beq.n	800b606 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b600:	2301      	movs	r3, #1
 800b602:	73fb      	strb	r3, [r7, #15]
 800b604:	e001      	b.n	800b60a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b606:	2300      	movs	r3, #0
 800b608:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b60a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3714      	adds	r7, #20
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr

0800b618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b618:	b480      	push	{r7}
 800b61a:	b083      	sub	sp, #12
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	460b      	mov	r3, r1
 800b622:	807b      	strh	r3, [r7, #2]
 800b624:	4613      	mov	r3, r2
 800b626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b628:	787b      	ldrb	r3, [r7, #1]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d003      	beq.n	800b636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b62e:	887a      	ldrh	r2, [r7, #2]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b634:	e003      	b.n	800b63e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b636:	887b      	ldrh	r3, [r7, #2]
 800b638:	041a      	lsls	r2, r3, #16
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	619a      	str	r2, [r3, #24]
}
 800b63e:	bf00      	nop
 800b640:	370c      	adds	r7, #12
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr

0800b64a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b64a:	b580      	push	{r7, lr}
 800b64c:	b082      	sub	sp, #8
 800b64e:	af00      	add	r7, sp, #0
 800b650:	4603      	mov	r3, r0
 800b652:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800b654:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b658:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b65c:	88fb      	ldrh	r3, [r7, #6]
 800b65e:	4013      	ands	r3, r2
 800b660:	2b00      	cmp	r3, #0
 800b662:	d008      	beq.n	800b676 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b664:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b668:	88fb      	ldrh	r3, [r7, #6]
 800b66a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b66e:	88fb      	ldrh	r3, [r7, #6]
 800b670:	4618      	mov	r0, r3
 800b672:	f7fb fad5 	bl	8006c20 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800b676:	bf00      	nop
 800b678:	3708      	adds	r7, #8
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}
	...

0800b680 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b084      	sub	sp, #16
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b688:	4b19      	ldr	r3, [pc, #100]	@ (800b6f0 <HAL_PWREx_ConfigSupply+0x70>)
 800b68a:	68db      	ldr	r3, [r3, #12]
 800b68c:	f003 0304 	and.w	r3, r3, #4
 800b690:	2b04      	cmp	r3, #4
 800b692:	d00a      	beq.n	800b6aa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b694:	4b16      	ldr	r3, [pc, #88]	@ (800b6f0 <HAL_PWREx_ConfigSupply+0x70>)
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	f003 0307 	and.w	r3, r3, #7
 800b69c:	687a      	ldr	r2, [r7, #4]
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	d001      	beq.n	800b6a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	e01f      	b.n	800b6e6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	e01d      	b.n	800b6e6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b6aa:	4b11      	ldr	r3, [pc, #68]	@ (800b6f0 <HAL_PWREx_ConfigSupply+0x70>)
 800b6ac:	68db      	ldr	r3, [r3, #12]
 800b6ae:	f023 0207 	bic.w	r2, r3, #7
 800b6b2:	490f      	ldr	r1, [pc, #60]	@ (800b6f0 <HAL_PWREx_ConfigSupply+0x70>)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b6ba:	f7fc fdbf 	bl	800823c <HAL_GetTick>
 800b6be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b6c0:	e009      	b.n	800b6d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b6c2:	f7fc fdbb 	bl	800823c <HAL_GetTick>
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	1ad3      	subs	r3, r2, r3
 800b6cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b6d0:	d901      	bls.n	800b6d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	e007      	b.n	800b6e6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b6d6:	4b06      	ldr	r3, [pc, #24]	@ (800b6f0 <HAL_PWREx_ConfigSupply+0x70>)
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b6de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b6e2:	d1ee      	bne.n	800b6c2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b6e4:	2300      	movs	r3, #0
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3710      	adds	r7, #16
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	58024800 	.word	0x58024800

0800b6f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b08c      	sub	sp, #48	@ 0x30
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d101      	bne.n	800b706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b702:	2301      	movs	r3, #1
 800b704:	e3c8      	b.n	800be98 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f003 0301 	and.w	r3, r3, #1
 800b70e:	2b00      	cmp	r3, #0
 800b710:	f000 8087 	beq.w	800b822 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b714:	4b88      	ldr	r3, [pc, #544]	@ (800b938 <HAL_RCC_OscConfig+0x244>)
 800b716:	691b      	ldr	r3, [r3, #16]
 800b718:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b71c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b71e:	4b86      	ldr	r3, [pc, #536]	@ (800b938 <HAL_RCC_OscConfig+0x244>)
 800b720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b722:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b726:	2b10      	cmp	r3, #16
 800b728:	d007      	beq.n	800b73a <HAL_RCC_OscConfig+0x46>
 800b72a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b72c:	2b18      	cmp	r3, #24
 800b72e:	d110      	bne.n	800b752 <HAL_RCC_OscConfig+0x5e>
 800b730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b732:	f003 0303 	and.w	r3, r3, #3
 800b736:	2b02      	cmp	r3, #2
 800b738:	d10b      	bne.n	800b752 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b73a:	4b7f      	ldr	r3, [pc, #508]	@ (800b938 <HAL_RCC_OscConfig+0x244>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b742:	2b00      	cmp	r3, #0
 800b744:	d06c      	beq.n	800b820 <HAL_RCC_OscConfig+0x12c>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d168      	bne.n	800b820 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b74e:	2301      	movs	r3, #1
 800b750:	e3a2      	b.n	800be98 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b75a:	d106      	bne.n	800b76a <HAL_RCC_OscConfig+0x76>
 800b75c:	4b76      	ldr	r3, [pc, #472]	@ (800b938 <HAL_RCC_OscConfig+0x244>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4a75      	ldr	r2, [pc, #468]	@ (800b938 <HAL_RCC_OscConfig+0x244>)
 800b762:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b766:	6013      	str	r3, [r2, #0]
 800b768:	e02e      	b.n	800b7c8 <HAL_RCC_OscConfig+0xd4>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	685b      	ldr	r3, [r3, #4]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d10c      	bne.n	800b78c <HAL_RCC_OscConfig+0x98>
 800b772:	4b71      	ldr	r3, [pc, #452]	@ (800b938 <HAL_RCC_OscConfig+0x244>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	4a70      	ldr	r2, [pc, #448]	@ (800b938 <HAL_RCC_OscConfig+0x244>)
 800b778:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b77c:	6013      	str	r3, [r2, #0]
 800b77e:	4b6e      	ldr	r3, [pc, #440]	@ (800b938 <HAL_RCC_OscConfig+0x244>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	4a6d      	ldr	r2, [pc, #436]	@ (800b938 <HAL_RCC_OscConfig+0x244>)
 800b784:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b788:	6013      	str	r3, [r2, #0]
 800b78a:	e01d      	b.n	800b7c8 <HAL_RCC_OscConfig+0xd4>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b794:	d10c      	bne.n	800b7b0 <HAL_RCC_OscConfig+0xbc>
 800b796:	4b68      	ldr	r3, [pc, #416]	@ (800b938 <HAL_RCC_OscConfig+0x244>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4a67      	ldr	r2, [pc, #412]	@ (800b938 <HAL_RCC_OscConfig+0x244>)
 800b79c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b7a0:	6013      	str	r3, [r2, #0]
 800b7a2:	4b65      	ldr	r3, [pc, #404]	@ (800b938 <HAL_RCC_OscConfig+0x244>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4a64      	ldr	r2, [pc, #400]	@ (800b938 <HAL_RCC_OscConfig+0x244>)
 800b7a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b7ac:	6013      	str	r3, [r2, #0]
 800b7ae:	e00b      	b.n	800b7c8 <HAL_RCC_OscConfig+0xd4>
 800b7b0:	4b61      	ldr	r3, [pc, #388]	@ (800b938 <HAL_RCC_OscConfig+0x244>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4a60      	ldr	r2, [pc, #384]	@ (800b938 <HAL_RCC_OscConfig+0x244>)
 800b7b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b7ba:	6013      	str	r3, [r2, #0]
 800b7bc:	4b5e      	ldr	r3, [pc, #376]	@ (800b938 <HAL_RCC_OscConfig+0x244>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4a5d      	ldr	r2, [pc, #372]	@ (800b938 <HAL_RCC_OscConfig+0x244>)
 800b7c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b7c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d013      	beq.n	800b7f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7d0:	f7fc fd34 	bl	800823c <HAL_GetTick>
 800b7d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b7d6:	e008      	b.n	800b7ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b7d8:	f7fc fd30 	bl	800823c <HAL_GetTick>
 800b7dc:	4602      	mov	r2, r0
 800b7de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7e0:	1ad3      	subs	r3, r2, r3
 800b7e2:	2b64      	cmp	r3, #100	@ 0x64
 800b7e4:	d901      	bls.n	800b7ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b7e6:	2303      	movs	r3, #3
 800b7e8:	e356      	b.n	800be98 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b7ea:	4b53      	ldr	r3, [pc, #332]	@ (800b938 <HAL_RCC_OscConfig+0x244>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d0f0      	beq.n	800b7d8 <HAL_RCC_OscConfig+0xe4>
 800b7f6:	e014      	b.n	800b822 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7f8:	f7fc fd20 	bl	800823c <HAL_GetTick>
 800b7fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b7fe:	e008      	b.n	800b812 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b800:	f7fc fd1c 	bl	800823c <HAL_GetTick>
 800b804:	4602      	mov	r2, r0
 800b806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b808:	1ad3      	subs	r3, r2, r3
 800b80a:	2b64      	cmp	r3, #100	@ 0x64
 800b80c:	d901      	bls.n	800b812 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b80e:	2303      	movs	r3, #3
 800b810:	e342      	b.n	800be98 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b812:	4b49      	ldr	r3, [pc, #292]	@ (800b938 <HAL_RCC_OscConfig+0x244>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d1f0      	bne.n	800b800 <HAL_RCC_OscConfig+0x10c>
 800b81e:	e000      	b.n	800b822 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f003 0302 	and.w	r3, r3, #2
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	f000 808c 	beq.w	800b948 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b830:	4b41      	ldr	r3, [pc, #260]	@ (800b938 <HAL_RCC_OscConfig+0x244>)
 800b832:	691b      	ldr	r3, [r3, #16]
 800b834:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b838:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b83a:	4b3f      	ldr	r3, [pc, #252]	@ (800b938 <HAL_RCC_OscConfig+0x244>)
 800b83c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b83e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b840:	6a3b      	ldr	r3, [r7, #32]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d007      	beq.n	800b856 <HAL_RCC_OscConfig+0x162>
 800b846:	6a3b      	ldr	r3, [r7, #32]
 800b848:	2b18      	cmp	r3, #24
 800b84a:	d137      	bne.n	800b8bc <HAL_RCC_OscConfig+0x1c8>
 800b84c:	69fb      	ldr	r3, [r7, #28]
 800b84e:	f003 0303 	and.w	r3, r3, #3
 800b852:	2b00      	cmp	r3, #0
 800b854:	d132      	bne.n	800b8bc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b856:	4b38      	ldr	r3, [pc, #224]	@ (800b938 <HAL_RCC_OscConfig+0x244>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f003 0304 	and.w	r3, r3, #4
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d005      	beq.n	800b86e <HAL_RCC_OscConfig+0x17a>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	68db      	ldr	r3, [r3, #12]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d101      	bne.n	800b86e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b86a:	2301      	movs	r3, #1
 800b86c:	e314      	b.n	800be98 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b86e:	4b32      	ldr	r3, [pc, #200]	@ (800b938 <HAL_RCC_OscConfig+0x244>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f023 0219 	bic.w	r2, r3, #25
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	68db      	ldr	r3, [r3, #12]
 800b87a:	492f      	ldr	r1, [pc, #188]	@ (800b938 <HAL_RCC_OscConfig+0x244>)
 800b87c:	4313      	orrs	r3, r2
 800b87e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b880:	f7fc fcdc 	bl	800823c <HAL_GetTick>
 800b884:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b886:	e008      	b.n	800b89a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b888:	f7fc fcd8 	bl	800823c <HAL_GetTick>
 800b88c:	4602      	mov	r2, r0
 800b88e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b890:	1ad3      	subs	r3, r2, r3
 800b892:	2b02      	cmp	r3, #2
 800b894:	d901      	bls.n	800b89a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800b896:	2303      	movs	r3, #3
 800b898:	e2fe      	b.n	800be98 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b89a:	4b27      	ldr	r3, [pc, #156]	@ (800b938 <HAL_RCC_OscConfig+0x244>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f003 0304 	and.w	r3, r3, #4
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d0f0      	beq.n	800b888 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b8a6:	4b24      	ldr	r3, [pc, #144]	@ (800b938 <HAL_RCC_OscConfig+0x244>)
 800b8a8:	685b      	ldr	r3, [r3, #4]
 800b8aa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	691b      	ldr	r3, [r3, #16]
 800b8b2:	061b      	lsls	r3, r3, #24
 800b8b4:	4920      	ldr	r1, [pc, #128]	@ (800b938 <HAL_RCC_OscConfig+0x244>)
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b8ba:	e045      	b.n	800b948 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	68db      	ldr	r3, [r3, #12]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d026      	beq.n	800b912 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b8c4:	4b1c      	ldr	r3, [pc, #112]	@ (800b938 <HAL_RCC_OscConfig+0x244>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f023 0219 	bic.w	r2, r3, #25
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	68db      	ldr	r3, [r3, #12]
 800b8d0:	4919      	ldr	r1, [pc, #100]	@ (800b938 <HAL_RCC_OscConfig+0x244>)
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8d6:	f7fc fcb1 	bl	800823c <HAL_GetTick>
 800b8da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b8dc:	e008      	b.n	800b8f0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b8de:	f7fc fcad 	bl	800823c <HAL_GetTick>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8e6:	1ad3      	subs	r3, r2, r3
 800b8e8:	2b02      	cmp	r3, #2
 800b8ea:	d901      	bls.n	800b8f0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800b8ec:	2303      	movs	r3, #3
 800b8ee:	e2d3      	b.n	800be98 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b8f0:	4b11      	ldr	r3, [pc, #68]	@ (800b938 <HAL_RCC_OscConfig+0x244>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f003 0304 	and.w	r3, r3, #4
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d0f0      	beq.n	800b8de <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b8fc:	4b0e      	ldr	r3, [pc, #56]	@ (800b938 <HAL_RCC_OscConfig+0x244>)
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	691b      	ldr	r3, [r3, #16]
 800b908:	061b      	lsls	r3, r3, #24
 800b90a:	490b      	ldr	r1, [pc, #44]	@ (800b938 <HAL_RCC_OscConfig+0x244>)
 800b90c:	4313      	orrs	r3, r2
 800b90e:	604b      	str	r3, [r1, #4]
 800b910:	e01a      	b.n	800b948 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b912:	4b09      	ldr	r3, [pc, #36]	@ (800b938 <HAL_RCC_OscConfig+0x244>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4a08      	ldr	r2, [pc, #32]	@ (800b938 <HAL_RCC_OscConfig+0x244>)
 800b918:	f023 0301 	bic.w	r3, r3, #1
 800b91c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b91e:	f7fc fc8d 	bl	800823c <HAL_GetTick>
 800b922:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b924:	e00a      	b.n	800b93c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b926:	f7fc fc89 	bl	800823c <HAL_GetTick>
 800b92a:	4602      	mov	r2, r0
 800b92c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b92e:	1ad3      	subs	r3, r2, r3
 800b930:	2b02      	cmp	r3, #2
 800b932:	d903      	bls.n	800b93c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800b934:	2303      	movs	r3, #3
 800b936:	e2af      	b.n	800be98 <HAL_RCC_OscConfig+0x7a4>
 800b938:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b93c:	4b96      	ldr	r3, [pc, #600]	@ (800bb98 <HAL_RCC_OscConfig+0x4a4>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f003 0304 	and.w	r3, r3, #4
 800b944:	2b00      	cmp	r3, #0
 800b946:	d1ee      	bne.n	800b926 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f003 0310 	and.w	r3, r3, #16
 800b950:	2b00      	cmp	r3, #0
 800b952:	d06a      	beq.n	800ba2a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b954:	4b90      	ldr	r3, [pc, #576]	@ (800bb98 <HAL_RCC_OscConfig+0x4a4>)
 800b956:	691b      	ldr	r3, [r3, #16]
 800b958:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b95c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b95e:	4b8e      	ldr	r3, [pc, #568]	@ (800bb98 <HAL_RCC_OscConfig+0x4a4>)
 800b960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b962:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b964:	69bb      	ldr	r3, [r7, #24]
 800b966:	2b08      	cmp	r3, #8
 800b968:	d007      	beq.n	800b97a <HAL_RCC_OscConfig+0x286>
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	2b18      	cmp	r3, #24
 800b96e:	d11b      	bne.n	800b9a8 <HAL_RCC_OscConfig+0x2b4>
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	f003 0303 	and.w	r3, r3, #3
 800b976:	2b01      	cmp	r3, #1
 800b978:	d116      	bne.n	800b9a8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b97a:	4b87      	ldr	r3, [pc, #540]	@ (800bb98 <HAL_RCC_OscConfig+0x4a4>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b982:	2b00      	cmp	r3, #0
 800b984:	d005      	beq.n	800b992 <HAL_RCC_OscConfig+0x29e>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	69db      	ldr	r3, [r3, #28]
 800b98a:	2b80      	cmp	r3, #128	@ 0x80
 800b98c:	d001      	beq.n	800b992 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800b98e:	2301      	movs	r3, #1
 800b990:	e282      	b.n	800be98 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b992:	4b81      	ldr	r3, [pc, #516]	@ (800bb98 <HAL_RCC_OscConfig+0x4a4>)
 800b994:	68db      	ldr	r3, [r3, #12]
 800b996:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6a1b      	ldr	r3, [r3, #32]
 800b99e:	061b      	lsls	r3, r3, #24
 800b9a0:	497d      	ldr	r1, [pc, #500]	@ (800bb98 <HAL_RCC_OscConfig+0x4a4>)
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b9a6:	e040      	b.n	800ba2a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	69db      	ldr	r3, [r3, #28]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d023      	beq.n	800b9f8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b9b0:	4b79      	ldr	r3, [pc, #484]	@ (800bb98 <HAL_RCC_OscConfig+0x4a4>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a78      	ldr	r2, [pc, #480]	@ (800bb98 <HAL_RCC_OscConfig+0x4a4>)
 800b9b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9bc:	f7fc fc3e 	bl	800823c <HAL_GetTick>
 800b9c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b9c2:	e008      	b.n	800b9d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b9c4:	f7fc fc3a 	bl	800823c <HAL_GetTick>
 800b9c8:	4602      	mov	r2, r0
 800b9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9cc:	1ad3      	subs	r3, r2, r3
 800b9ce:	2b02      	cmp	r3, #2
 800b9d0:	d901      	bls.n	800b9d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b9d2:	2303      	movs	r3, #3
 800b9d4:	e260      	b.n	800be98 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b9d6:	4b70      	ldr	r3, [pc, #448]	@ (800bb98 <HAL_RCC_OscConfig+0x4a4>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d0f0      	beq.n	800b9c4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b9e2:	4b6d      	ldr	r3, [pc, #436]	@ (800bb98 <HAL_RCC_OscConfig+0x4a4>)
 800b9e4:	68db      	ldr	r3, [r3, #12]
 800b9e6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6a1b      	ldr	r3, [r3, #32]
 800b9ee:	061b      	lsls	r3, r3, #24
 800b9f0:	4969      	ldr	r1, [pc, #420]	@ (800bb98 <HAL_RCC_OscConfig+0x4a4>)
 800b9f2:	4313      	orrs	r3, r2
 800b9f4:	60cb      	str	r3, [r1, #12]
 800b9f6:	e018      	b.n	800ba2a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b9f8:	4b67      	ldr	r3, [pc, #412]	@ (800bb98 <HAL_RCC_OscConfig+0x4a4>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	4a66      	ldr	r2, [pc, #408]	@ (800bb98 <HAL_RCC_OscConfig+0x4a4>)
 800b9fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba04:	f7fc fc1a 	bl	800823c <HAL_GetTick>
 800ba08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ba0a:	e008      	b.n	800ba1e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ba0c:	f7fc fc16 	bl	800823c <HAL_GetTick>
 800ba10:	4602      	mov	r2, r0
 800ba12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba14:	1ad3      	subs	r3, r2, r3
 800ba16:	2b02      	cmp	r3, #2
 800ba18:	d901      	bls.n	800ba1e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800ba1a:	2303      	movs	r3, #3
 800ba1c:	e23c      	b.n	800be98 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ba1e:	4b5e      	ldr	r3, [pc, #376]	@ (800bb98 <HAL_RCC_OscConfig+0x4a4>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d1f0      	bne.n	800ba0c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f003 0308 	and.w	r3, r3, #8
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d036      	beq.n	800baa4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	695b      	ldr	r3, [r3, #20]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d019      	beq.n	800ba72 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ba3e:	4b56      	ldr	r3, [pc, #344]	@ (800bb98 <HAL_RCC_OscConfig+0x4a4>)
 800ba40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba42:	4a55      	ldr	r2, [pc, #340]	@ (800bb98 <HAL_RCC_OscConfig+0x4a4>)
 800ba44:	f043 0301 	orr.w	r3, r3, #1
 800ba48:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba4a:	f7fc fbf7 	bl	800823c <HAL_GetTick>
 800ba4e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ba50:	e008      	b.n	800ba64 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ba52:	f7fc fbf3 	bl	800823c <HAL_GetTick>
 800ba56:	4602      	mov	r2, r0
 800ba58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba5a:	1ad3      	subs	r3, r2, r3
 800ba5c:	2b02      	cmp	r3, #2
 800ba5e:	d901      	bls.n	800ba64 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800ba60:	2303      	movs	r3, #3
 800ba62:	e219      	b.n	800be98 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ba64:	4b4c      	ldr	r3, [pc, #304]	@ (800bb98 <HAL_RCC_OscConfig+0x4a4>)
 800ba66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba68:	f003 0302 	and.w	r3, r3, #2
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d0f0      	beq.n	800ba52 <HAL_RCC_OscConfig+0x35e>
 800ba70:	e018      	b.n	800baa4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ba72:	4b49      	ldr	r3, [pc, #292]	@ (800bb98 <HAL_RCC_OscConfig+0x4a4>)
 800ba74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba76:	4a48      	ldr	r2, [pc, #288]	@ (800bb98 <HAL_RCC_OscConfig+0x4a4>)
 800ba78:	f023 0301 	bic.w	r3, r3, #1
 800ba7c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba7e:	f7fc fbdd 	bl	800823c <HAL_GetTick>
 800ba82:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ba84:	e008      	b.n	800ba98 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ba86:	f7fc fbd9 	bl	800823c <HAL_GetTick>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba8e:	1ad3      	subs	r3, r2, r3
 800ba90:	2b02      	cmp	r3, #2
 800ba92:	d901      	bls.n	800ba98 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800ba94:	2303      	movs	r3, #3
 800ba96:	e1ff      	b.n	800be98 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ba98:	4b3f      	ldr	r3, [pc, #252]	@ (800bb98 <HAL_RCC_OscConfig+0x4a4>)
 800ba9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba9c:	f003 0302 	and.w	r3, r3, #2
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d1f0      	bne.n	800ba86 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f003 0320 	and.w	r3, r3, #32
 800baac:	2b00      	cmp	r3, #0
 800baae:	d036      	beq.n	800bb1e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	699b      	ldr	r3, [r3, #24]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d019      	beq.n	800baec <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bab8:	4b37      	ldr	r3, [pc, #220]	@ (800bb98 <HAL_RCC_OscConfig+0x4a4>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	4a36      	ldr	r2, [pc, #216]	@ (800bb98 <HAL_RCC_OscConfig+0x4a4>)
 800babe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800bac2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800bac4:	f7fc fbba 	bl	800823c <HAL_GetTick>
 800bac8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800baca:	e008      	b.n	800bade <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bacc:	f7fc fbb6 	bl	800823c <HAL_GetTick>
 800bad0:	4602      	mov	r2, r0
 800bad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bad4:	1ad3      	subs	r3, r2, r3
 800bad6:	2b02      	cmp	r3, #2
 800bad8:	d901      	bls.n	800bade <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800bada:	2303      	movs	r3, #3
 800badc:	e1dc      	b.n	800be98 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800bade:	4b2e      	ldr	r3, [pc, #184]	@ (800bb98 <HAL_RCC_OscConfig+0x4a4>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d0f0      	beq.n	800bacc <HAL_RCC_OscConfig+0x3d8>
 800baea:	e018      	b.n	800bb1e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800baec:	4b2a      	ldr	r3, [pc, #168]	@ (800bb98 <HAL_RCC_OscConfig+0x4a4>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4a29      	ldr	r2, [pc, #164]	@ (800bb98 <HAL_RCC_OscConfig+0x4a4>)
 800baf2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800baf6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800baf8:	f7fc fba0 	bl	800823c <HAL_GetTick>
 800bafc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bafe:	e008      	b.n	800bb12 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bb00:	f7fc fb9c 	bl	800823c <HAL_GetTick>
 800bb04:	4602      	mov	r2, r0
 800bb06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb08:	1ad3      	subs	r3, r2, r3
 800bb0a:	2b02      	cmp	r3, #2
 800bb0c:	d901      	bls.n	800bb12 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800bb0e:	2303      	movs	r3, #3
 800bb10:	e1c2      	b.n	800be98 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bb12:	4b21      	ldr	r3, [pc, #132]	@ (800bb98 <HAL_RCC_OscConfig+0x4a4>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d1f0      	bne.n	800bb00 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	f003 0304 	and.w	r3, r3, #4
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	f000 8086 	beq.w	800bc38 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bb2c:	4b1b      	ldr	r3, [pc, #108]	@ (800bb9c <HAL_RCC_OscConfig+0x4a8>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	4a1a      	ldr	r2, [pc, #104]	@ (800bb9c <HAL_RCC_OscConfig+0x4a8>)
 800bb32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bb36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bb38:	f7fc fb80 	bl	800823c <HAL_GetTick>
 800bb3c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bb3e:	e008      	b.n	800bb52 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bb40:	f7fc fb7c 	bl	800823c <HAL_GetTick>
 800bb44:	4602      	mov	r2, r0
 800bb46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb48:	1ad3      	subs	r3, r2, r3
 800bb4a:	2b64      	cmp	r3, #100	@ 0x64
 800bb4c:	d901      	bls.n	800bb52 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800bb4e:	2303      	movs	r3, #3
 800bb50:	e1a2      	b.n	800be98 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bb52:	4b12      	ldr	r3, [pc, #72]	@ (800bb9c <HAL_RCC_OscConfig+0x4a8>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d0f0      	beq.n	800bb40 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	689b      	ldr	r3, [r3, #8]
 800bb62:	2b01      	cmp	r3, #1
 800bb64:	d106      	bne.n	800bb74 <HAL_RCC_OscConfig+0x480>
 800bb66:	4b0c      	ldr	r3, [pc, #48]	@ (800bb98 <HAL_RCC_OscConfig+0x4a4>)
 800bb68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb6a:	4a0b      	ldr	r2, [pc, #44]	@ (800bb98 <HAL_RCC_OscConfig+0x4a4>)
 800bb6c:	f043 0301 	orr.w	r3, r3, #1
 800bb70:	6713      	str	r3, [r2, #112]	@ 0x70
 800bb72:	e032      	b.n	800bbda <HAL_RCC_OscConfig+0x4e6>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	689b      	ldr	r3, [r3, #8]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d111      	bne.n	800bba0 <HAL_RCC_OscConfig+0x4ac>
 800bb7c:	4b06      	ldr	r3, [pc, #24]	@ (800bb98 <HAL_RCC_OscConfig+0x4a4>)
 800bb7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb80:	4a05      	ldr	r2, [pc, #20]	@ (800bb98 <HAL_RCC_OscConfig+0x4a4>)
 800bb82:	f023 0301 	bic.w	r3, r3, #1
 800bb86:	6713      	str	r3, [r2, #112]	@ 0x70
 800bb88:	4b03      	ldr	r3, [pc, #12]	@ (800bb98 <HAL_RCC_OscConfig+0x4a4>)
 800bb8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb8c:	4a02      	ldr	r2, [pc, #8]	@ (800bb98 <HAL_RCC_OscConfig+0x4a4>)
 800bb8e:	f023 0304 	bic.w	r3, r3, #4
 800bb92:	6713      	str	r3, [r2, #112]	@ 0x70
 800bb94:	e021      	b.n	800bbda <HAL_RCC_OscConfig+0x4e6>
 800bb96:	bf00      	nop
 800bb98:	58024400 	.word	0x58024400
 800bb9c:	58024800 	.word	0x58024800
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	2b05      	cmp	r3, #5
 800bba6:	d10c      	bne.n	800bbc2 <HAL_RCC_OscConfig+0x4ce>
 800bba8:	4b83      	ldr	r3, [pc, #524]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bbaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbac:	4a82      	ldr	r2, [pc, #520]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bbae:	f043 0304 	orr.w	r3, r3, #4
 800bbb2:	6713      	str	r3, [r2, #112]	@ 0x70
 800bbb4:	4b80      	ldr	r3, [pc, #512]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bbb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbb8:	4a7f      	ldr	r2, [pc, #508]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bbba:	f043 0301 	orr.w	r3, r3, #1
 800bbbe:	6713      	str	r3, [r2, #112]	@ 0x70
 800bbc0:	e00b      	b.n	800bbda <HAL_RCC_OscConfig+0x4e6>
 800bbc2:	4b7d      	ldr	r3, [pc, #500]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bbc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbc6:	4a7c      	ldr	r2, [pc, #496]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bbc8:	f023 0301 	bic.w	r3, r3, #1
 800bbcc:	6713      	str	r3, [r2, #112]	@ 0x70
 800bbce:	4b7a      	ldr	r3, [pc, #488]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bbd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbd2:	4a79      	ldr	r2, [pc, #484]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bbd4:	f023 0304 	bic.w	r3, r3, #4
 800bbd8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	689b      	ldr	r3, [r3, #8]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d015      	beq.n	800bc0e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bbe2:	f7fc fb2b 	bl	800823c <HAL_GetTick>
 800bbe6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bbe8:	e00a      	b.n	800bc00 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bbea:	f7fc fb27 	bl	800823c <HAL_GetTick>
 800bbee:	4602      	mov	r2, r0
 800bbf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbf2:	1ad3      	subs	r3, r2, r3
 800bbf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d901      	bls.n	800bc00 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800bbfc:	2303      	movs	r3, #3
 800bbfe:	e14b      	b.n	800be98 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bc00:	4b6d      	ldr	r3, [pc, #436]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bc02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc04:	f003 0302 	and.w	r3, r3, #2
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d0ee      	beq.n	800bbea <HAL_RCC_OscConfig+0x4f6>
 800bc0c:	e014      	b.n	800bc38 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc0e:	f7fc fb15 	bl	800823c <HAL_GetTick>
 800bc12:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bc14:	e00a      	b.n	800bc2c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bc16:	f7fc fb11 	bl	800823c <HAL_GetTick>
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc1e:	1ad3      	subs	r3, r2, r3
 800bc20:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d901      	bls.n	800bc2c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800bc28:	2303      	movs	r3, #3
 800bc2a:	e135      	b.n	800be98 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bc2c:	4b62      	ldr	r3, [pc, #392]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bc2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc30:	f003 0302 	and.w	r3, r3, #2
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d1ee      	bne.n	800bc16 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	f000 812a 	beq.w	800be96 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800bc42:	4b5d      	ldr	r3, [pc, #372]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bc44:	691b      	ldr	r3, [r3, #16]
 800bc46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bc4a:	2b18      	cmp	r3, #24
 800bc4c:	f000 80ba 	beq.w	800bdc4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc54:	2b02      	cmp	r3, #2
 800bc56:	f040 8095 	bne.w	800bd84 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bc5a:	4b57      	ldr	r3, [pc, #348]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	4a56      	ldr	r2, [pc, #344]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bc60:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bc64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc66:	f7fc fae9 	bl	800823c <HAL_GetTick>
 800bc6a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bc6c:	e008      	b.n	800bc80 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc6e:	f7fc fae5 	bl	800823c <HAL_GetTick>
 800bc72:	4602      	mov	r2, r0
 800bc74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc76:	1ad3      	subs	r3, r2, r3
 800bc78:	2b02      	cmp	r3, #2
 800bc7a:	d901      	bls.n	800bc80 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800bc7c:	2303      	movs	r3, #3
 800bc7e:	e10b      	b.n	800be98 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bc80:	4b4d      	ldr	r3, [pc, #308]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d1f0      	bne.n	800bc6e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bc8c:	4b4a      	ldr	r3, [pc, #296]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bc8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bc90:	4b4a      	ldr	r3, [pc, #296]	@ (800bdbc <HAL_RCC_OscConfig+0x6c8>)
 800bc92:	4013      	ands	r3, r2
 800bc94:	687a      	ldr	r2, [r7, #4]
 800bc96:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800bc98:	687a      	ldr	r2, [r7, #4]
 800bc9a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800bc9c:	0112      	lsls	r2, r2, #4
 800bc9e:	430a      	orrs	r2, r1
 800bca0:	4945      	ldr	r1, [pc, #276]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bca2:	4313      	orrs	r3, r2
 800bca4:	628b      	str	r3, [r1, #40]	@ 0x28
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcaa:	3b01      	subs	r3, #1
 800bcac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bcb4:	3b01      	subs	r3, #1
 800bcb6:	025b      	lsls	r3, r3, #9
 800bcb8:	b29b      	uxth	r3, r3
 800bcba:	431a      	orrs	r2, r3
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcc0:	3b01      	subs	r3, #1
 800bcc2:	041b      	lsls	r3, r3, #16
 800bcc4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bcc8:	431a      	orrs	r2, r3
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcce:	3b01      	subs	r3, #1
 800bcd0:	061b      	lsls	r3, r3, #24
 800bcd2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bcd6:	4938      	ldr	r1, [pc, #224]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800bcdc:	4b36      	ldr	r3, [pc, #216]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bcde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bce0:	4a35      	ldr	r2, [pc, #212]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bce2:	f023 0301 	bic.w	r3, r3, #1
 800bce6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bce8:	4b33      	ldr	r3, [pc, #204]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bcea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bcec:	4b34      	ldr	r3, [pc, #208]	@ (800bdc0 <HAL_RCC_OscConfig+0x6cc>)
 800bcee:	4013      	ands	r3, r2
 800bcf0:	687a      	ldr	r2, [r7, #4]
 800bcf2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800bcf4:	00d2      	lsls	r2, r2, #3
 800bcf6:	4930      	ldr	r1, [pc, #192]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800bcfc:	4b2e      	ldr	r3, [pc, #184]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bcfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd00:	f023 020c 	bic.w	r2, r3, #12
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd08:	492b      	ldr	r1, [pc, #172]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800bd0e:	4b2a      	ldr	r3, [pc, #168]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bd10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd12:	f023 0202 	bic.w	r2, r3, #2
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd1a:	4927      	ldr	r1, [pc, #156]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bd1c:	4313      	orrs	r3, r2
 800bd1e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bd20:	4b25      	ldr	r3, [pc, #148]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bd22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd24:	4a24      	ldr	r2, [pc, #144]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bd26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bd2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd2c:	4b22      	ldr	r3, [pc, #136]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bd2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd30:	4a21      	ldr	r2, [pc, #132]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bd32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bd36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800bd38:	4b1f      	ldr	r3, [pc, #124]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bd3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd3c:	4a1e      	ldr	r2, [pc, #120]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bd3e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bd42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800bd44:	4b1c      	ldr	r3, [pc, #112]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bd46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd48:	4a1b      	ldr	r2, [pc, #108]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bd4a:	f043 0301 	orr.w	r3, r3, #1
 800bd4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bd50:	4b19      	ldr	r3, [pc, #100]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	4a18      	ldr	r2, [pc, #96]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bd56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bd5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd5c:	f7fc fa6e 	bl	800823c <HAL_GetTick>
 800bd60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bd62:	e008      	b.n	800bd76 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bd64:	f7fc fa6a 	bl	800823c <HAL_GetTick>
 800bd68:	4602      	mov	r2, r0
 800bd6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd6c:	1ad3      	subs	r3, r2, r3
 800bd6e:	2b02      	cmp	r3, #2
 800bd70:	d901      	bls.n	800bd76 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800bd72:	2303      	movs	r3, #3
 800bd74:	e090      	b.n	800be98 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bd76:	4b10      	ldr	r3, [pc, #64]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d0f0      	beq.n	800bd64 <HAL_RCC_OscConfig+0x670>
 800bd82:	e088      	b.n	800be96 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bd84:	4b0c      	ldr	r3, [pc, #48]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	4a0b      	ldr	r2, [pc, #44]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bd8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bd8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd90:	f7fc fa54 	bl	800823c <HAL_GetTick>
 800bd94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bd96:	e008      	b.n	800bdaa <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bd98:	f7fc fa50 	bl	800823c <HAL_GetTick>
 800bd9c:	4602      	mov	r2, r0
 800bd9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bda0:	1ad3      	subs	r3, r2, r3
 800bda2:	2b02      	cmp	r3, #2
 800bda4:	d901      	bls.n	800bdaa <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800bda6:	2303      	movs	r3, #3
 800bda8:	e076      	b.n	800be98 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bdaa:	4b03      	ldr	r3, [pc, #12]	@ (800bdb8 <HAL_RCC_OscConfig+0x6c4>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d1f0      	bne.n	800bd98 <HAL_RCC_OscConfig+0x6a4>
 800bdb6:	e06e      	b.n	800be96 <HAL_RCC_OscConfig+0x7a2>
 800bdb8:	58024400 	.word	0x58024400
 800bdbc:	fffffc0c 	.word	0xfffffc0c
 800bdc0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800bdc4:	4b36      	ldr	r3, [pc, #216]	@ (800bea0 <HAL_RCC_OscConfig+0x7ac>)
 800bdc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdc8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800bdca:	4b35      	ldr	r3, [pc, #212]	@ (800bea0 <HAL_RCC_OscConfig+0x7ac>)
 800bdcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdce:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdd4:	2b01      	cmp	r3, #1
 800bdd6:	d031      	beq.n	800be3c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	f003 0203 	and.w	r2, r3, #3
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d12a      	bne.n	800be3c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	091b      	lsrs	r3, r3, #4
 800bdea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d122      	bne.n	800be3c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be00:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800be02:	429a      	cmp	r2, r3
 800be04:	d11a      	bne.n	800be3c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	0a5b      	lsrs	r3, r3, #9
 800be0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be12:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800be14:	429a      	cmp	r2, r3
 800be16:	d111      	bne.n	800be3c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	0c1b      	lsrs	r3, r3, #16
 800be1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be24:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800be26:	429a      	cmp	r2, r3
 800be28:	d108      	bne.n	800be3c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	0e1b      	lsrs	r3, r3, #24
 800be2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be36:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800be38:	429a      	cmp	r2, r3
 800be3a:	d001      	beq.n	800be40 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800be3c:	2301      	movs	r3, #1
 800be3e:	e02b      	b.n	800be98 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800be40:	4b17      	ldr	r3, [pc, #92]	@ (800bea0 <HAL_RCC_OscConfig+0x7ac>)
 800be42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be44:	08db      	lsrs	r3, r3, #3
 800be46:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800be4a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800be50:	693a      	ldr	r2, [r7, #16]
 800be52:	429a      	cmp	r2, r3
 800be54:	d01f      	beq.n	800be96 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800be56:	4b12      	ldr	r3, [pc, #72]	@ (800bea0 <HAL_RCC_OscConfig+0x7ac>)
 800be58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be5a:	4a11      	ldr	r2, [pc, #68]	@ (800bea0 <HAL_RCC_OscConfig+0x7ac>)
 800be5c:	f023 0301 	bic.w	r3, r3, #1
 800be60:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800be62:	f7fc f9eb 	bl	800823c <HAL_GetTick>
 800be66:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800be68:	bf00      	nop
 800be6a:	f7fc f9e7 	bl	800823c <HAL_GetTick>
 800be6e:	4602      	mov	r2, r0
 800be70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be72:	4293      	cmp	r3, r2
 800be74:	d0f9      	beq.n	800be6a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800be76:	4b0a      	ldr	r3, [pc, #40]	@ (800bea0 <HAL_RCC_OscConfig+0x7ac>)
 800be78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be7a:	4b0a      	ldr	r3, [pc, #40]	@ (800bea4 <HAL_RCC_OscConfig+0x7b0>)
 800be7c:	4013      	ands	r3, r2
 800be7e:	687a      	ldr	r2, [r7, #4]
 800be80:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800be82:	00d2      	lsls	r2, r2, #3
 800be84:	4906      	ldr	r1, [pc, #24]	@ (800bea0 <HAL_RCC_OscConfig+0x7ac>)
 800be86:	4313      	orrs	r3, r2
 800be88:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800be8a:	4b05      	ldr	r3, [pc, #20]	@ (800bea0 <HAL_RCC_OscConfig+0x7ac>)
 800be8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be8e:	4a04      	ldr	r2, [pc, #16]	@ (800bea0 <HAL_RCC_OscConfig+0x7ac>)
 800be90:	f043 0301 	orr.w	r3, r3, #1
 800be94:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800be96:	2300      	movs	r3, #0
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3730      	adds	r7, #48	@ 0x30
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}
 800bea0:	58024400 	.word	0x58024400
 800bea4:	ffff0007 	.word	0xffff0007

0800bea8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b086      	sub	sp, #24
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d101      	bne.n	800bebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800beb8:	2301      	movs	r3, #1
 800beba:	e19c      	b.n	800c1f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bebc:	4b8a      	ldr	r3, [pc, #552]	@ (800c0e8 <HAL_RCC_ClockConfig+0x240>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f003 030f 	and.w	r3, r3, #15
 800bec4:	683a      	ldr	r2, [r7, #0]
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d910      	bls.n	800beec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800beca:	4b87      	ldr	r3, [pc, #540]	@ (800c0e8 <HAL_RCC_ClockConfig+0x240>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f023 020f 	bic.w	r2, r3, #15
 800bed2:	4985      	ldr	r1, [pc, #532]	@ (800c0e8 <HAL_RCC_ClockConfig+0x240>)
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	4313      	orrs	r3, r2
 800bed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800beda:	4b83      	ldr	r3, [pc, #524]	@ (800c0e8 <HAL_RCC_ClockConfig+0x240>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f003 030f 	and.w	r3, r3, #15
 800bee2:	683a      	ldr	r2, [r7, #0]
 800bee4:	429a      	cmp	r2, r3
 800bee6:	d001      	beq.n	800beec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bee8:	2301      	movs	r3, #1
 800beea:	e184      	b.n	800c1f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f003 0304 	and.w	r3, r3, #4
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d010      	beq.n	800bf1a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	691a      	ldr	r2, [r3, #16]
 800befc:	4b7b      	ldr	r3, [pc, #492]	@ (800c0ec <HAL_RCC_ClockConfig+0x244>)
 800befe:	699b      	ldr	r3, [r3, #24]
 800bf00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d908      	bls.n	800bf1a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bf08:	4b78      	ldr	r3, [pc, #480]	@ (800c0ec <HAL_RCC_ClockConfig+0x244>)
 800bf0a:	699b      	ldr	r3, [r3, #24]
 800bf0c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	691b      	ldr	r3, [r3, #16]
 800bf14:	4975      	ldr	r1, [pc, #468]	@ (800c0ec <HAL_RCC_ClockConfig+0x244>)
 800bf16:	4313      	orrs	r3, r2
 800bf18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f003 0308 	and.w	r3, r3, #8
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d010      	beq.n	800bf48 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	695a      	ldr	r2, [r3, #20]
 800bf2a:	4b70      	ldr	r3, [pc, #448]	@ (800c0ec <HAL_RCC_ClockConfig+0x244>)
 800bf2c:	69db      	ldr	r3, [r3, #28]
 800bf2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d908      	bls.n	800bf48 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bf36:	4b6d      	ldr	r3, [pc, #436]	@ (800c0ec <HAL_RCC_ClockConfig+0x244>)
 800bf38:	69db      	ldr	r3, [r3, #28]
 800bf3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	695b      	ldr	r3, [r3, #20]
 800bf42:	496a      	ldr	r1, [pc, #424]	@ (800c0ec <HAL_RCC_ClockConfig+0x244>)
 800bf44:	4313      	orrs	r3, r2
 800bf46:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f003 0310 	and.w	r3, r3, #16
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d010      	beq.n	800bf76 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	699a      	ldr	r2, [r3, #24]
 800bf58:	4b64      	ldr	r3, [pc, #400]	@ (800c0ec <HAL_RCC_ClockConfig+0x244>)
 800bf5a:	69db      	ldr	r3, [r3, #28]
 800bf5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d908      	bls.n	800bf76 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bf64:	4b61      	ldr	r3, [pc, #388]	@ (800c0ec <HAL_RCC_ClockConfig+0x244>)
 800bf66:	69db      	ldr	r3, [r3, #28]
 800bf68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	699b      	ldr	r3, [r3, #24]
 800bf70:	495e      	ldr	r1, [pc, #376]	@ (800c0ec <HAL_RCC_ClockConfig+0x244>)
 800bf72:	4313      	orrs	r3, r2
 800bf74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f003 0320 	and.w	r3, r3, #32
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d010      	beq.n	800bfa4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	69da      	ldr	r2, [r3, #28]
 800bf86:	4b59      	ldr	r3, [pc, #356]	@ (800c0ec <HAL_RCC_ClockConfig+0x244>)
 800bf88:	6a1b      	ldr	r3, [r3, #32]
 800bf8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	d908      	bls.n	800bfa4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800bf92:	4b56      	ldr	r3, [pc, #344]	@ (800c0ec <HAL_RCC_ClockConfig+0x244>)
 800bf94:	6a1b      	ldr	r3, [r3, #32]
 800bf96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	69db      	ldr	r3, [r3, #28]
 800bf9e:	4953      	ldr	r1, [pc, #332]	@ (800c0ec <HAL_RCC_ClockConfig+0x244>)
 800bfa0:	4313      	orrs	r3, r2
 800bfa2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f003 0302 	and.w	r3, r3, #2
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d010      	beq.n	800bfd2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	68da      	ldr	r2, [r3, #12]
 800bfb4:	4b4d      	ldr	r3, [pc, #308]	@ (800c0ec <HAL_RCC_ClockConfig+0x244>)
 800bfb6:	699b      	ldr	r3, [r3, #24]
 800bfb8:	f003 030f 	and.w	r3, r3, #15
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d908      	bls.n	800bfd2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bfc0:	4b4a      	ldr	r3, [pc, #296]	@ (800c0ec <HAL_RCC_ClockConfig+0x244>)
 800bfc2:	699b      	ldr	r3, [r3, #24]
 800bfc4:	f023 020f 	bic.w	r2, r3, #15
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	68db      	ldr	r3, [r3, #12]
 800bfcc:	4947      	ldr	r1, [pc, #284]	@ (800c0ec <HAL_RCC_ClockConfig+0x244>)
 800bfce:	4313      	orrs	r3, r2
 800bfd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f003 0301 	and.w	r3, r3, #1
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d055      	beq.n	800c08a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800bfde:	4b43      	ldr	r3, [pc, #268]	@ (800c0ec <HAL_RCC_ClockConfig+0x244>)
 800bfe0:	699b      	ldr	r3, [r3, #24]
 800bfe2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	689b      	ldr	r3, [r3, #8]
 800bfea:	4940      	ldr	r1, [pc, #256]	@ (800c0ec <HAL_RCC_ClockConfig+0x244>)
 800bfec:	4313      	orrs	r3, r2
 800bfee:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	2b02      	cmp	r3, #2
 800bff6:	d107      	bne.n	800c008 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bff8:	4b3c      	ldr	r3, [pc, #240]	@ (800c0ec <HAL_RCC_ClockConfig+0x244>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c000:	2b00      	cmp	r3, #0
 800c002:	d121      	bne.n	800c048 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c004:	2301      	movs	r3, #1
 800c006:	e0f6      	b.n	800c1f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	685b      	ldr	r3, [r3, #4]
 800c00c:	2b03      	cmp	r3, #3
 800c00e:	d107      	bne.n	800c020 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c010:	4b36      	ldr	r3, [pc, #216]	@ (800c0ec <HAL_RCC_ClockConfig+0x244>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d115      	bne.n	800c048 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c01c:	2301      	movs	r3, #1
 800c01e:	e0ea      	b.n	800c1f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	685b      	ldr	r3, [r3, #4]
 800c024:	2b01      	cmp	r3, #1
 800c026:	d107      	bne.n	800c038 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c028:	4b30      	ldr	r3, [pc, #192]	@ (800c0ec <HAL_RCC_ClockConfig+0x244>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c030:	2b00      	cmp	r3, #0
 800c032:	d109      	bne.n	800c048 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c034:	2301      	movs	r3, #1
 800c036:	e0de      	b.n	800c1f6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c038:	4b2c      	ldr	r3, [pc, #176]	@ (800c0ec <HAL_RCC_ClockConfig+0x244>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f003 0304 	and.w	r3, r3, #4
 800c040:	2b00      	cmp	r3, #0
 800c042:	d101      	bne.n	800c048 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c044:	2301      	movs	r3, #1
 800c046:	e0d6      	b.n	800c1f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c048:	4b28      	ldr	r3, [pc, #160]	@ (800c0ec <HAL_RCC_ClockConfig+0x244>)
 800c04a:	691b      	ldr	r3, [r3, #16]
 800c04c:	f023 0207 	bic.w	r2, r3, #7
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	4925      	ldr	r1, [pc, #148]	@ (800c0ec <HAL_RCC_ClockConfig+0x244>)
 800c056:	4313      	orrs	r3, r2
 800c058:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c05a:	f7fc f8ef 	bl	800823c <HAL_GetTick>
 800c05e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c060:	e00a      	b.n	800c078 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c062:	f7fc f8eb 	bl	800823c <HAL_GetTick>
 800c066:	4602      	mov	r2, r0
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	1ad3      	subs	r3, r2, r3
 800c06c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c070:	4293      	cmp	r3, r2
 800c072:	d901      	bls.n	800c078 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800c074:	2303      	movs	r3, #3
 800c076:	e0be      	b.n	800c1f6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c078:	4b1c      	ldr	r3, [pc, #112]	@ (800c0ec <HAL_RCC_ClockConfig+0x244>)
 800c07a:	691b      	ldr	r3, [r3, #16]
 800c07c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	685b      	ldr	r3, [r3, #4]
 800c084:	00db      	lsls	r3, r3, #3
 800c086:	429a      	cmp	r2, r3
 800c088:	d1eb      	bne.n	800c062 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f003 0302 	and.w	r3, r3, #2
 800c092:	2b00      	cmp	r3, #0
 800c094:	d010      	beq.n	800c0b8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	68da      	ldr	r2, [r3, #12]
 800c09a:	4b14      	ldr	r3, [pc, #80]	@ (800c0ec <HAL_RCC_ClockConfig+0x244>)
 800c09c:	699b      	ldr	r3, [r3, #24]
 800c09e:	f003 030f 	and.w	r3, r3, #15
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	d208      	bcs.n	800c0b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c0a6:	4b11      	ldr	r3, [pc, #68]	@ (800c0ec <HAL_RCC_ClockConfig+0x244>)
 800c0a8:	699b      	ldr	r3, [r3, #24]
 800c0aa:	f023 020f 	bic.w	r2, r3, #15
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	68db      	ldr	r3, [r3, #12]
 800c0b2:	490e      	ldr	r1, [pc, #56]	@ (800c0ec <HAL_RCC_ClockConfig+0x244>)
 800c0b4:	4313      	orrs	r3, r2
 800c0b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c0b8:	4b0b      	ldr	r3, [pc, #44]	@ (800c0e8 <HAL_RCC_ClockConfig+0x240>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f003 030f 	and.w	r3, r3, #15
 800c0c0:	683a      	ldr	r2, [r7, #0]
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	d214      	bcs.n	800c0f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c0c6:	4b08      	ldr	r3, [pc, #32]	@ (800c0e8 <HAL_RCC_ClockConfig+0x240>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f023 020f 	bic.w	r2, r3, #15
 800c0ce:	4906      	ldr	r1, [pc, #24]	@ (800c0e8 <HAL_RCC_ClockConfig+0x240>)
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	4313      	orrs	r3, r2
 800c0d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c0d6:	4b04      	ldr	r3, [pc, #16]	@ (800c0e8 <HAL_RCC_ClockConfig+0x240>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f003 030f 	and.w	r3, r3, #15
 800c0de:	683a      	ldr	r2, [r7, #0]
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d005      	beq.n	800c0f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	e086      	b.n	800c1f6 <HAL_RCC_ClockConfig+0x34e>
 800c0e8:	52002000 	.word	0x52002000
 800c0ec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f003 0304 	and.w	r3, r3, #4
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d010      	beq.n	800c11e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	691a      	ldr	r2, [r3, #16]
 800c100:	4b3f      	ldr	r3, [pc, #252]	@ (800c200 <HAL_RCC_ClockConfig+0x358>)
 800c102:	699b      	ldr	r3, [r3, #24]
 800c104:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c108:	429a      	cmp	r2, r3
 800c10a:	d208      	bcs.n	800c11e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c10c:	4b3c      	ldr	r3, [pc, #240]	@ (800c200 <HAL_RCC_ClockConfig+0x358>)
 800c10e:	699b      	ldr	r3, [r3, #24]
 800c110:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	691b      	ldr	r3, [r3, #16]
 800c118:	4939      	ldr	r1, [pc, #228]	@ (800c200 <HAL_RCC_ClockConfig+0x358>)
 800c11a:	4313      	orrs	r3, r2
 800c11c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f003 0308 	and.w	r3, r3, #8
 800c126:	2b00      	cmp	r3, #0
 800c128:	d010      	beq.n	800c14c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	695a      	ldr	r2, [r3, #20]
 800c12e:	4b34      	ldr	r3, [pc, #208]	@ (800c200 <HAL_RCC_ClockConfig+0x358>)
 800c130:	69db      	ldr	r3, [r3, #28]
 800c132:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c136:	429a      	cmp	r2, r3
 800c138:	d208      	bcs.n	800c14c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c13a:	4b31      	ldr	r3, [pc, #196]	@ (800c200 <HAL_RCC_ClockConfig+0x358>)
 800c13c:	69db      	ldr	r3, [r3, #28]
 800c13e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	695b      	ldr	r3, [r3, #20]
 800c146:	492e      	ldr	r1, [pc, #184]	@ (800c200 <HAL_RCC_ClockConfig+0x358>)
 800c148:	4313      	orrs	r3, r2
 800c14a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f003 0310 	and.w	r3, r3, #16
 800c154:	2b00      	cmp	r3, #0
 800c156:	d010      	beq.n	800c17a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	699a      	ldr	r2, [r3, #24]
 800c15c:	4b28      	ldr	r3, [pc, #160]	@ (800c200 <HAL_RCC_ClockConfig+0x358>)
 800c15e:	69db      	ldr	r3, [r3, #28]
 800c160:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c164:	429a      	cmp	r2, r3
 800c166:	d208      	bcs.n	800c17a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c168:	4b25      	ldr	r3, [pc, #148]	@ (800c200 <HAL_RCC_ClockConfig+0x358>)
 800c16a:	69db      	ldr	r3, [r3, #28]
 800c16c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	699b      	ldr	r3, [r3, #24]
 800c174:	4922      	ldr	r1, [pc, #136]	@ (800c200 <HAL_RCC_ClockConfig+0x358>)
 800c176:	4313      	orrs	r3, r2
 800c178:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f003 0320 	and.w	r3, r3, #32
 800c182:	2b00      	cmp	r3, #0
 800c184:	d010      	beq.n	800c1a8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	69da      	ldr	r2, [r3, #28]
 800c18a:	4b1d      	ldr	r3, [pc, #116]	@ (800c200 <HAL_RCC_ClockConfig+0x358>)
 800c18c:	6a1b      	ldr	r3, [r3, #32]
 800c18e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c192:	429a      	cmp	r2, r3
 800c194:	d208      	bcs.n	800c1a8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c196:	4b1a      	ldr	r3, [pc, #104]	@ (800c200 <HAL_RCC_ClockConfig+0x358>)
 800c198:	6a1b      	ldr	r3, [r3, #32]
 800c19a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	69db      	ldr	r3, [r3, #28]
 800c1a2:	4917      	ldr	r1, [pc, #92]	@ (800c200 <HAL_RCC_ClockConfig+0x358>)
 800c1a4:	4313      	orrs	r3, r2
 800c1a6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c1a8:	f000 f834 	bl	800c214 <HAL_RCC_GetSysClockFreq>
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	4b14      	ldr	r3, [pc, #80]	@ (800c200 <HAL_RCC_ClockConfig+0x358>)
 800c1b0:	699b      	ldr	r3, [r3, #24]
 800c1b2:	0a1b      	lsrs	r3, r3, #8
 800c1b4:	f003 030f 	and.w	r3, r3, #15
 800c1b8:	4912      	ldr	r1, [pc, #72]	@ (800c204 <HAL_RCC_ClockConfig+0x35c>)
 800c1ba:	5ccb      	ldrb	r3, [r1, r3]
 800c1bc:	f003 031f 	and.w	r3, r3, #31
 800c1c0:	fa22 f303 	lsr.w	r3, r2, r3
 800c1c4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c1c6:	4b0e      	ldr	r3, [pc, #56]	@ (800c200 <HAL_RCC_ClockConfig+0x358>)
 800c1c8:	699b      	ldr	r3, [r3, #24]
 800c1ca:	f003 030f 	and.w	r3, r3, #15
 800c1ce:	4a0d      	ldr	r2, [pc, #52]	@ (800c204 <HAL_RCC_ClockConfig+0x35c>)
 800c1d0:	5cd3      	ldrb	r3, [r2, r3]
 800c1d2:	f003 031f 	and.w	r3, r3, #31
 800c1d6:	693a      	ldr	r2, [r7, #16]
 800c1d8:	fa22 f303 	lsr.w	r3, r2, r3
 800c1dc:	4a0a      	ldr	r2, [pc, #40]	@ (800c208 <HAL_RCC_ClockConfig+0x360>)
 800c1de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c1e0:	4a0a      	ldr	r2, [pc, #40]	@ (800c20c <HAL_RCC_ClockConfig+0x364>)
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800c1e6:	4b0a      	ldr	r3, [pc, #40]	@ (800c210 <HAL_RCC_ClockConfig+0x368>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f7fb ffdc 	bl	80081a8 <HAL_InitTick>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3718      	adds	r7, #24
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
 800c1fe:	bf00      	nop
 800c200:	58024400 	.word	0x58024400
 800c204:	0802ca00 	.word	0x0802ca00
 800c208:	2400005c 	.word	0x2400005c
 800c20c:	24000058 	.word	0x24000058
 800c210:	24000060 	.word	0x24000060

0800c214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c214:	b480      	push	{r7}
 800c216:	b089      	sub	sp, #36	@ 0x24
 800c218:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c21a:	4bb3      	ldr	r3, [pc, #716]	@ (800c4e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c21c:	691b      	ldr	r3, [r3, #16]
 800c21e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c222:	2b18      	cmp	r3, #24
 800c224:	f200 8155 	bhi.w	800c4d2 <HAL_RCC_GetSysClockFreq+0x2be>
 800c228:	a201      	add	r2, pc, #4	@ (adr r2, 800c230 <HAL_RCC_GetSysClockFreq+0x1c>)
 800c22a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c22e:	bf00      	nop
 800c230:	0800c295 	.word	0x0800c295
 800c234:	0800c4d3 	.word	0x0800c4d3
 800c238:	0800c4d3 	.word	0x0800c4d3
 800c23c:	0800c4d3 	.word	0x0800c4d3
 800c240:	0800c4d3 	.word	0x0800c4d3
 800c244:	0800c4d3 	.word	0x0800c4d3
 800c248:	0800c4d3 	.word	0x0800c4d3
 800c24c:	0800c4d3 	.word	0x0800c4d3
 800c250:	0800c2bb 	.word	0x0800c2bb
 800c254:	0800c4d3 	.word	0x0800c4d3
 800c258:	0800c4d3 	.word	0x0800c4d3
 800c25c:	0800c4d3 	.word	0x0800c4d3
 800c260:	0800c4d3 	.word	0x0800c4d3
 800c264:	0800c4d3 	.word	0x0800c4d3
 800c268:	0800c4d3 	.word	0x0800c4d3
 800c26c:	0800c4d3 	.word	0x0800c4d3
 800c270:	0800c2c1 	.word	0x0800c2c1
 800c274:	0800c4d3 	.word	0x0800c4d3
 800c278:	0800c4d3 	.word	0x0800c4d3
 800c27c:	0800c4d3 	.word	0x0800c4d3
 800c280:	0800c4d3 	.word	0x0800c4d3
 800c284:	0800c4d3 	.word	0x0800c4d3
 800c288:	0800c4d3 	.word	0x0800c4d3
 800c28c:	0800c4d3 	.word	0x0800c4d3
 800c290:	0800c2c7 	.word	0x0800c2c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c294:	4b94      	ldr	r3, [pc, #592]	@ (800c4e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f003 0320 	and.w	r3, r3, #32
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d009      	beq.n	800c2b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c2a0:	4b91      	ldr	r3, [pc, #580]	@ (800c4e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	08db      	lsrs	r3, r3, #3
 800c2a6:	f003 0303 	and.w	r3, r3, #3
 800c2aa:	4a90      	ldr	r2, [pc, #576]	@ (800c4ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c2ac:	fa22 f303 	lsr.w	r3, r2, r3
 800c2b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800c2b2:	e111      	b.n	800c4d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c2b4:	4b8d      	ldr	r3, [pc, #564]	@ (800c4ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c2b6:	61bb      	str	r3, [r7, #24]
      break;
 800c2b8:	e10e      	b.n	800c4d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800c2ba:	4b8d      	ldr	r3, [pc, #564]	@ (800c4f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c2bc:	61bb      	str	r3, [r7, #24]
      break;
 800c2be:	e10b      	b.n	800c4d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800c2c0:	4b8c      	ldr	r3, [pc, #560]	@ (800c4f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c2c2:	61bb      	str	r3, [r7, #24]
      break;
 800c2c4:	e108      	b.n	800c4d8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c2c6:	4b88      	ldr	r3, [pc, #544]	@ (800c4e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c2c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2ca:	f003 0303 	and.w	r3, r3, #3
 800c2ce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c2d0:	4b85      	ldr	r3, [pc, #532]	@ (800c4e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c2d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2d4:	091b      	lsrs	r3, r3, #4
 800c2d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c2da:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c2dc:	4b82      	ldr	r3, [pc, #520]	@ (800c4e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c2de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2e0:	f003 0301 	and.w	r3, r3, #1
 800c2e4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c2e6:	4b80      	ldr	r3, [pc, #512]	@ (800c4e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c2e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2ea:	08db      	lsrs	r3, r3, #3
 800c2ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c2f0:	68fa      	ldr	r2, [r7, #12]
 800c2f2:	fb02 f303 	mul.w	r3, r2, r3
 800c2f6:	ee07 3a90 	vmov	s15, r3
 800c2fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2fe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	2b00      	cmp	r3, #0
 800c306:	f000 80e1 	beq.w	800c4cc <HAL_RCC_GetSysClockFreq+0x2b8>
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	2b02      	cmp	r3, #2
 800c30e:	f000 8083 	beq.w	800c418 <HAL_RCC_GetSysClockFreq+0x204>
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	2b02      	cmp	r3, #2
 800c316:	f200 80a1 	bhi.w	800c45c <HAL_RCC_GetSysClockFreq+0x248>
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d003      	beq.n	800c328 <HAL_RCC_GetSysClockFreq+0x114>
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	2b01      	cmp	r3, #1
 800c324:	d056      	beq.n	800c3d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800c326:	e099      	b.n	800c45c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c328:	4b6f      	ldr	r3, [pc, #444]	@ (800c4e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f003 0320 	and.w	r3, r3, #32
 800c330:	2b00      	cmp	r3, #0
 800c332:	d02d      	beq.n	800c390 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c334:	4b6c      	ldr	r3, [pc, #432]	@ (800c4e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	08db      	lsrs	r3, r3, #3
 800c33a:	f003 0303 	and.w	r3, r3, #3
 800c33e:	4a6b      	ldr	r2, [pc, #428]	@ (800c4ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c340:	fa22 f303 	lsr.w	r3, r2, r3
 800c344:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	ee07 3a90 	vmov	s15, r3
 800c34c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	ee07 3a90 	vmov	s15, r3
 800c356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c35a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c35e:	4b62      	ldr	r3, [pc, #392]	@ (800c4e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c366:	ee07 3a90 	vmov	s15, r3
 800c36a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c36e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c372:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800c4f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c37a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c37e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c38a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800c38e:	e087      	b.n	800c4a0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	ee07 3a90 	vmov	s15, r3
 800c396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c39a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800c4fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800c39e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3a2:	4b51      	ldr	r3, [pc, #324]	@ (800c4e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c3a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3aa:	ee07 3a90 	vmov	s15, r3
 800c3ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3b2:	ed97 6a02 	vldr	s12, [r7, #8]
 800c3b6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800c4f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c3ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c3d2:	e065      	b.n	800c4a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	ee07 3a90 	vmov	s15, r3
 800c3da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3de:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800c500 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c3e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3e6:	4b40      	ldr	r3, [pc, #256]	@ (800c4e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c3e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3ee:	ee07 3a90 	vmov	s15, r3
 800c3f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3f6:	ed97 6a02 	vldr	s12, [r7, #8]
 800c3fa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800c4f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c3fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c406:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c40a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c40e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c412:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c416:	e043      	b.n	800c4a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	ee07 3a90 	vmov	s15, r3
 800c41e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c422:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800c504 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c42a:	4b2f      	ldr	r3, [pc, #188]	@ (800c4e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c42c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c42e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c432:	ee07 3a90 	vmov	s15, r3
 800c436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c43a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c43e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800c4f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c44a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c44e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c452:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c456:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c45a:	e021      	b.n	800c4a0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	ee07 3a90 	vmov	s15, r3
 800c462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c466:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800c500 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c46a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c46e:	4b1e      	ldr	r3, [pc, #120]	@ (800c4e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c476:	ee07 3a90 	vmov	s15, r3
 800c47a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c47e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c482:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800c4f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c48a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c48e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c49a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c49e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c4a0:	4b11      	ldr	r3, [pc, #68]	@ (800c4e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c4a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4a4:	0a5b      	lsrs	r3, r3, #9
 800c4a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	ee07 3a90 	vmov	s15, r3
 800c4b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c4b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4c4:	ee17 3a90 	vmov	r3, s15
 800c4c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800c4ca:	e005      	b.n	800c4d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	61bb      	str	r3, [r7, #24]
      break;
 800c4d0:	e002      	b.n	800c4d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800c4d2:	4b07      	ldr	r3, [pc, #28]	@ (800c4f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c4d4:	61bb      	str	r3, [r7, #24]
      break;
 800c4d6:	bf00      	nop
  }

  return sysclockfreq;
 800c4d8:	69bb      	ldr	r3, [r7, #24]
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3724      	adds	r7, #36	@ 0x24
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e4:	4770      	bx	lr
 800c4e6:	bf00      	nop
 800c4e8:	58024400 	.word	0x58024400
 800c4ec:	03d09000 	.word	0x03d09000
 800c4f0:	003d0900 	.word	0x003d0900
 800c4f4:	017d7840 	.word	0x017d7840
 800c4f8:	46000000 	.word	0x46000000
 800c4fc:	4c742400 	.word	0x4c742400
 800c500:	4a742400 	.word	0x4a742400
 800c504:	4bbebc20 	.word	0x4bbebc20

0800c508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b082      	sub	sp, #8
 800c50c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c50e:	f7ff fe81 	bl	800c214 <HAL_RCC_GetSysClockFreq>
 800c512:	4602      	mov	r2, r0
 800c514:	4b10      	ldr	r3, [pc, #64]	@ (800c558 <HAL_RCC_GetHCLKFreq+0x50>)
 800c516:	699b      	ldr	r3, [r3, #24]
 800c518:	0a1b      	lsrs	r3, r3, #8
 800c51a:	f003 030f 	and.w	r3, r3, #15
 800c51e:	490f      	ldr	r1, [pc, #60]	@ (800c55c <HAL_RCC_GetHCLKFreq+0x54>)
 800c520:	5ccb      	ldrb	r3, [r1, r3]
 800c522:	f003 031f 	and.w	r3, r3, #31
 800c526:	fa22 f303 	lsr.w	r3, r2, r3
 800c52a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c52c:	4b0a      	ldr	r3, [pc, #40]	@ (800c558 <HAL_RCC_GetHCLKFreq+0x50>)
 800c52e:	699b      	ldr	r3, [r3, #24]
 800c530:	f003 030f 	and.w	r3, r3, #15
 800c534:	4a09      	ldr	r2, [pc, #36]	@ (800c55c <HAL_RCC_GetHCLKFreq+0x54>)
 800c536:	5cd3      	ldrb	r3, [r2, r3]
 800c538:	f003 031f 	and.w	r3, r3, #31
 800c53c:	687a      	ldr	r2, [r7, #4]
 800c53e:	fa22 f303 	lsr.w	r3, r2, r3
 800c542:	4a07      	ldr	r2, [pc, #28]	@ (800c560 <HAL_RCC_GetHCLKFreq+0x58>)
 800c544:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c546:	4a07      	ldr	r2, [pc, #28]	@ (800c564 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c54c:	4b04      	ldr	r3, [pc, #16]	@ (800c560 <HAL_RCC_GetHCLKFreq+0x58>)
 800c54e:	681b      	ldr	r3, [r3, #0]
}
 800c550:	4618      	mov	r0, r3
 800c552:	3708      	adds	r7, #8
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}
 800c558:	58024400 	.word	0x58024400
 800c55c:	0802ca00 	.word	0x0802ca00
 800c560:	2400005c 	.word	0x2400005c
 800c564:	24000058 	.word	0x24000058

0800c568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c56c:	f7ff ffcc 	bl	800c508 <HAL_RCC_GetHCLKFreq>
 800c570:	4602      	mov	r2, r0
 800c572:	4b06      	ldr	r3, [pc, #24]	@ (800c58c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c574:	69db      	ldr	r3, [r3, #28]
 800c576:	091b      	lsrs	r3, r3, #4
 800c578:	f003 0307 	and.w	r3, r3, #7
 800c57c:	4904      	ldr	r1, [pc, #16]	@ (800c590 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c57e:	5ccb      	ldrb	r3, [r1, r3]
 800c580:	f003 031f 	and.w	r3, r3, #31
 800c584:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c588:	4618      	mov	r0, r3
 800c58a:	bd80      	pop	{r7, pc}
 800c58c:	58024400 	.word	0x58024400
 800c590:	0802ca00 	.word	0x0802ca00

0800c594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c598:	f7ff ffb6 	bl	800c508 <HAL_RCC_GetHCLKFreq>
 800c59c:	4602      	mov	r2, r0
 800c59e:	4b06      	ldr	r3, [pc, #24]	@ (800c5b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c5a0:	69db      	ldr	r3, [r3, #28]
 800c5a2:	0a1b      	lsrs	r3, r3, #8
 800c5a4:	f003 0307 	and.w	r3, r3, #7
 800c5a8:	4904      	ldr	r1, [pc, #16]	@ (800c5bc <HAL_RCC_GetPCLK2Freq+0x28>)
 800c5aa:	5ccb      	ldrb	r3, [r1, r3]
 800c5ac:	f003 031f 	and.w	r3, r3, #31
 800c5b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	bd80      	pop	{r7, pc}
 800c5b8:	58024400 	.word	0x58024400
 800c5bc:	0802ca00 	.word	0x0802ca00

0800c5c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c5c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c5c4:	b0c6      	sub	sp, #280	@ 0x118
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c5d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800c5e4:	2500      	movs	r5, #0
 800c5e6:	ea54 0305 	orrs.w	r3, r4, r5
 800c5ea:	d049      	beq.n	800c680 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800c5ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c5f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c5f6:	d02f      	beq.n	800c658 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800c5f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c5fc:	d828      	bhi.n	800c650 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c5fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c602:	d01a      	beq.n	800c63a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800c604:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c608:	d822      	bhi.n	800c650 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d003      	beq.n	800c616 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c60e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c612:	d007      	beq.n	800c624 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c614:	e01c      	b.n	800c650 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c616:	4bab      	ldr	r3, [pc, #684]	@ (800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c61a:	4aaa      	ldr	r2, [pc, #680]	@ (800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c61c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c620:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c622:	e01a      	b.n	800c65a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c628:	3308      	adds	r3, #8
 800c62a:	2102      	movs	r1, #2
 800c62c:	4618      	mov	r0, r3
 800c62e:	f001 fc25 	bl	800de7c <RCCEx_PLL2_Config>
 800c632:	4603      	mov	r3, r0
 800c634:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c638:	e00f      	b.n	800c65a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c63a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c63e:	3328      	adds	r3, #40	@ 0x28
 800c640:	2102      	movs	r1, #2
 800c642:	4618      	mov	r0, r3
 800c644:	f001 fccc 	bl	800dfe0 <RCCEx_PLL3_Config>
 800c648:	4603      	mov	r3, r0
 800c64a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c64e:	e004      	b.n	800c65a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c650:	2301      	movs	r3, #1
 800c652:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c656:	e000      	b.n	800c65a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800c658:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c65a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d10a      	bne.n	800c678 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c662:	4b98      	ldr	r3, [pc, #608]	@ (800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c666:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c66a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c66e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c670:	4a94      	ldr	r2, [pc, #592]	@ (800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c672:	430b      	orrs	r3, r1
 800c674:	6513      	str	r3, [r2, #80]	@ 0x50
 800c676:	e003      	b.n	800c680 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c678:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c67c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c688:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800c68c:	f04f 0900 	mov.w	r9, #0
 800c690:	ea58 0309 	orrs.w	r3, r8, r9
 800c694:	d047      	beq.n	800c726 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800c696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c69a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c69c:	2b04      	cmp	r3, #4
 800c69e:	d82a      	bhi.n	800c6f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800c6a0:	a201      	add	r2, pc, #4	@ (adr r2, 800c6a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800c6a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6a6:	bf00      	nop
 800c6a8:	0800c6bd 	.word	0x0800c6bd
 800c6ac:	0800c6cb 	.word	0x0800c6cb
 800c6b0:	0800c6e1 	.word	0x0800c6e1
 800c6b4:	0800c6ff 	.word	0x0800c6ff
 800c6b8:	0800c6ff 	.word	0x0800c6ff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c6bc:	4b81      	ldr	r3, [pc, #516]	@ (800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c6be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6c0:	4a80      	ldr	r2, [pc, #512]	@ (800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c6c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c6c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c6c8:	e01a      	b.n	800c700 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c6ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6ce:	3308      	adds	r3, #8
 800c6d0:	2100      	movs	r1, #0
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f001 fbd2 	bl	800de7c <RCCEx_PLL2_Config>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c6de:	e00f      	b.n	800c700 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c6e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6e4:	3328      	adds	r3, #40	@ 0x28
 800c6e6:	2100      	movs	r1, #0
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f001 fc79 	bl	800dfe0 <RCCEx_PLL3_Config>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c6f4:	e004      	b.n	800c700 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c6fc:	e000      	b.n	800c700 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800c6fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c700:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c704:	2b00      	cmp	r3, #0
 800c706:	d10a      	bne.n	800c71e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c708:	4b6e      	ldr	r3, [pc, #440]	@ (800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c70a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c70c:	f023 0107 	bic.w	r1, r3, #7
 800c710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c716:	4a6b      	ldr	r2, [pc, #428]	@ (800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c718:	430b      	orrs	r3, r1
 800c71a:	6513      	str	r3, [r2, #80]	@ 0x50
 800c71c:	e003      	b.n	800c726 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c71e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c722:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800c732:	f04f 0b00 	mov.w	fp, #0
 800c736:	ea5a 030b 	orrs.w	r3, sl, fp
 800c73a:	d05b      	beq.n	800c7f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800c73c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c740:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c744:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800c748:	d03b      	beq.n	800c7c2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800c74a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800c74e:	d834      	bhi.n	800c7ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c750:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c754:	d037      	beq.n	800c7c6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800c756:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c75a:	d82e      	bhi.n	800c7ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c75c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c760:	d033      	beq.n	800c7ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800c762:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c766:	d828      	bhi.n	800c7ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c768:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c76c:	d01a      	beq.n	800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800c76e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c772:	d822      	bhi.n	800c7ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c774:	2b00      	cmp	r3, #0
 800c776:	d003      	beq.n	800c780 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800c778:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c77c:	d007      	beq.n	800c78e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800c77e:	e01c      	b.n	800c7ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c780:	4b50      	ldr	r3, [pc, #320]	@ (800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c784:	4a4f      	ldr	r2, [pc, #316]	@ (800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c786:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c78a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c78c:	e01e      	b.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c78e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c792:	3308      	adds	r3, #8
 800c794:	2100      	movs	r1, #0
 800c796:	4618      	mov	r0, r3
 800c798:	f001 fb70 	bl	800de7c <RCCEx_PLL2_Config>
 800c79c:	4603      	mov	r3, r0
 800c79e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c7a2:	e013      	b.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c7a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7a8:	3328      	adds	r3, #40	@ 0x28
 800c7aa:	2100      	movs	r1, #0
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f001 fc17 	bl	800dfe0 <RCCEx_PLL3_Config>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c7b8:	e008      	b.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c7c0:	e004      	b.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c7c2:	bf00      	nop
 800c7c4:	e002      	b.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c7c6:	bf00      	nop
 800c7c8:	e000      	b.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c7ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d10b      	bne.n	800c7ec <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c7d4:	4b3b      	ldr	r3, [pc, #236]	@ (800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c7d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7d8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800c7dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c7e4:	4a37      	ldr	r2, [pc, #220]	@ (800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c7e6:	430b      	orrs	r3, r1
 800c7e8:	6593      	str	r3, [r2, #88]	@ 0x58
 800c7ea:	e003      	b.n	800c7f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c7f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800c800:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c804:	2300      	movs	r3, #0
 800c806:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c80a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800c80e:	460b      	mov	r3, r1
 800c810:	4313      	orrs	r3, r2
 800c812:	d05d      	beq.n	800c8d0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800c814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c818:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c81c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800c820:	d03b      	beq.n	800c89a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800c822:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800c826:	d834      	bhi.n	800c892 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c828:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c82c:	d037      	beq.n	800c89e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800c82e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c832:	d82e      	bhi.n	800c892 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c834:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c838:	d033      	beq.n	800c8a2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800c83a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c83e:	d828      	bhi.n	800c892 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c840:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c844:	d01a      	beq.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800c846:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c84a:	d822      	bhi.n	800c892 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d003      	beq.n	800c858 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800c850:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c854:	d007      	beq.n	800c866 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800c856:	e01c      	b.n	800c892 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c858:	4b1a      	ldr	r3, [pc, #104]	@ (800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c85a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c85c:	4a19      	ldr	r2, [pc, #100]	@ (800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c85e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c862:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c864:	e01e      	b.n	800c8a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c86a:	3308      	adds	r3, #8
 800c86c:	2100      	movs	r1, #0
 800c86e:	4618      	mov	r0, r3
 800c870:	f001 fb04 	bl	800de7c <RCCEx_PLL2_Config>
 800c874:	4603      	mov	r3, r0
 800c876:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c87a:	e013      	b.n	800c8a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c87c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c880:	3328      	adds	r3, #40	@ 0x28
 800c882:	2100      	movs	r1, #0
 800c884:	4618      	mov	r0, r3
 800c886:	f001 fbab 	bl	800dfe0 <RCCEx_PLL3_Config>
 800c88a:	4603      	mov	r3, r0
 800c88c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c890:	e008      	b.n	800c8a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c892:	2301      	movs	r3, #1
 800c894:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c898:	e004      	b.n	800c8a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c89a:	bf00      	nop
 800c89c:	e002      	b.n	800c8a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c89e:	bf00      	nop
 800c8a0:	e000      	b.n	800c8a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c8a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c8a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d10d      	bne.n	800c8c8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c8ac:	4b05      	ldr	r3, [pc, #20]	@ (800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c8ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8b0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800c8b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c8bc:	4a01      	ldr	r2, [pc, #4]	@ (800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c8be:	430b      	orrs	r3, r1
 800c8c0:	6593      	str	r3, [r2, #88]	@ 0x58
 800c8c2:	e005      	b.n	800c8d0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800c8c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c8cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c8d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800c8dc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c8e6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800c8ea:	460b      	mov	r3, r1
 800c8ec:	4313      	orrs	r3, r2
 800c8ee:	d03a      	beq.n	800c966 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800c8f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c8f6:	2b30      	cmp	r3, #48	@ 0x30
 800c8f8:	d01f      	beq.n	800c93a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800c8fa:	2b30      	cmp	r3, #48	@ 0x30
 800c8fc:	d819      	bhi.n	800c932 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800c8fe:	2b20      	cmp	r3, #32
 800c900:	d00c      	beq.n	800c91c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800c902:	2b20      	cmp	r3, #32
 800c904:	d815      	bhi.n	800c932 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800c906:	2b00      	cmp	r3, #0
 800c908:	d019      	beq.n	800c93e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800c90a:	2b10      	cmp	r3, #16
 800c90c:	d111      	bne.n	800c932 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c90e:	4baa      	ldr	r3, [pc, #680]	@ (800cbb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c912:	4aa9      	ldr	r2, [pc, #676]	@ (800cbb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c914:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c918:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800c91a:	e011      	b.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c91c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c920:	3308      	adds	r3, #8
 800c922:	2102      	movs	r1, #2
 800c924:	4618      	mov	r0, r3
 800c926:	f001 faa9 	bl	800de7c <RCCEx_PLL2_Config>
 800c92a:	4603      	mov	r3, r0
 800c92c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800c930:	e006      	b.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c932:	2301      	movs	r3, #1
 800c934:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c938:	e002      	b.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800c93a:	bf00      	nop
 800c93c:	e000      	b.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800c93e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c940:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c944:	2b00      	cmp	r3, #0
 800c946:	d10a      	bne.n	800c95e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800c948:	4b9b      	ldr	r3, [pc, #620]	@ (800cbb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c94a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c94c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800c950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c956:	4a98      	ldr	r2, [pc, #608]	@ (800cbb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c958:	430b      	orrs	r3, r1
 800c95a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c95c:	e003      	b.n	800c966 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c95e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c962:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800c972:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c976:	2300      	movs	r3, #0
 800c978:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c97c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800c980:	460b      	mov	r3, r1
 800c982:	4313      	orrs	r3, r2
 800c984:	d051      	beq.n	800ca2a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800c986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c98a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c98c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c990:	d035      	beq.n	800c9fe <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800c992:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c996:	d82e      	bhi.n	800c9f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c998:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c99c:	d031      	beq.n	800ca02 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800c99e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c9a2:	d828      	bhi.n	800c9f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c9a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c9a8:	d01a      	beq.n	800c9e0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800c9aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c9ae:	d822      	bhi.n	800c9f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d003      	beq.n	800c9bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800c9b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c9b8:	d007      	beq.n	800c9ca <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800c9ba:	e01c      	b.n	800c9f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c9bc:	4b7e      	ldr	r3, [pc, #504]	@ (800cbb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c9be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9c0:	4a7d      	ldr	r2, [pc, #500]	@ (800cbb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c9c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c9c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c9c8:	e01c      	b.n	800ca04 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c9ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9ce:	3308      	adds	r3, #8
 800c9d0:	2100      	movs	r1, #0
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f001 fa52 	bl	800de7c <RCCEx_PLL2_Config>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c9de:	e011      	b.n	800ca04 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c9e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9e4:	3328      	adds	r3, #40	@ 0x28
 800c9e6:	2100      	movs	r1, #0
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f001 faf9 	bl	800dfe0 <RCCEx_PLL3_Config>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c9f4:	e006      	b.n	800ca04 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c9fc:	e002      	b.n	800ca04 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800c9fe:	bf00      	nop
 800ca00:	e000      	b.n	800ca04 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ca02:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d10a      	bne.n	800ca22 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ca0c:	4b6a      	ldr	r3, [pc, #424]	@ (800cbb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ca0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca10:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800ca14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca1a:	4a67      	ldr	r2, [pc, #412]	@ (800cbb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ca1c:	430b      	orrs	r3, r1
 800ca1e:	6513      	str	r3, [r2, #80]	@ 0x50
 800ca20:	e003      	b.n	800ca2a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca26:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ca2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca32:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800ca36:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ca40:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800ca44:	460b      	mov	r3, r1
 800ca46:	4313      	orrs	r3, r2
 800ca48:	d053      	beq.n	800caf2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ca4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ca50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ca54:	d033      	beq.n	800cabe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800ca56:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ca5a:	d82c      	bhi.n	800cab6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ca5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ca60:	d02f      	beq.n	800cac2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800ca62:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ca66:	d826      	bhi.n	800cab6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ca68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ca6c:	d02b      	beq.n	800cac6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800ca6e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ca72:	d820      	bhi.n	800cab6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ca74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ca78:	d012      	beq.n	800caa0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800ca7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ca7e:	d81a      	bhi.n	800cab6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d022      	beq.n	800caca <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800ca84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca88:	d115      	bne.n	800cab6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ca8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca8e:	3308      	adds	r3, #8
 800ca90:	2101      	movs	r1, #1
 800ca92:	4618      	mov	r0, r3
 800ca94:	f001 f9f2 	bl	800de7c <RCCEx_PLL2_Config>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ca9e:	e015      	b.n	800cacc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800caa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caa4:	3328      	adds	r3, #40	@ 0x28
 800caa6:	2101      	movs	r1, #1
 800caa8:	4618      	mov	r0, r3
 800caaa:	f001 fa99 	bl	800dfe0 <RCCEx_PLL3_Config>
 800caae:	4603      	mov	r3, r0
 800cab0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800cab4:	e00a      	b.n	800cacc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cab6:	2301      	movs	r3, #1
 800cab8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cabc:	e006      	b.n	800cacc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800cabe:	bf00      	nop
 800cac0:	e004      	b.n	800cacc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800cac2:	bf00      	nop
 800cac4:	e002      	b.n	800cacc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800cac6:	bf00      	nop
 800cac8:	e000      	b.n	800cacc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800caca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cacc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d10a      	bne.n	800caea <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800cad4:	4b38      	ldr	r3, [pc, #224]	@ (800cbb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cad8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800cadc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cae2:	4a35      	ldr	r2, [pc, #212]	@ (800cbb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cae4:	430b      	orrs	r3, r1
 800cae6:	6513      	str	r3, [r2, #80]	@ 0x50
 800cae8:	e003      	b.n	800caf2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800caea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800caee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800caf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cafa:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800cafe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cb02:	2300      	movs	r3, #0
 800cb04:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800cb08:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800cb0c:	460b      	mov	r3, r1
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	d058      	beq.n	800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800cb12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800cb1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cb1e:	d033      	beq.n	800cb88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800cb20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cb24:	d82c      	bhi.n	800cb80 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800cb26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb2a:	d02f      	beq.n	800cb8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800cb2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb30:	d826      	bhi.n	800cb80 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800cb32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cb36:	d02b      	beq.n	800cb90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800cb38:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cb3c:	d820      	bhi.n	800cb80 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800cb3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cb42:	d012      	beq.n	800cb6a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800cb44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cb48:	d81a      	bhi.n	800cb80 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d022      	beq.n	800cb94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800cb4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cb52:	d115      	bne.n	800cb80 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cb54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb58:	3308      	adds	r3, #8
 800cb5a:	2101      	movs	r1, #1
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f001 f98d 	bl	800de7c <RCCEx_PLL2_Config>
 800cb62:	4603      	mov	r3, r0
 800cb64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cb68:	e015      	b.n	800cb96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cb6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb6e:	3328      	adds	r3, #40	@ 0x28
 800cb70:	2101      	movs	r1, #1
 800cb72:	4618      	mov	r0, r3
 800cb74:	f001 fa34 	bl	800dfe0 <RCCEx_PLL3_Config>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cb7e:	e00a      	b.n	800cb96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800cb80:	2301      	movs	r3, #1
 800cb82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cb86:	e006      	b.n	800cb96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cb88:	bf00      	nop
 800cb8a:	e004      	b.n	800cb96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cb8c:	bf00      	nop
 800cb8e:	e002      	b.n	800cb96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cb90:	bf00      	nop
 800cb92:	e000      	b.n	800cb96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cb94:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d10e      	bne.n	800cbbc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800cb9e:	4b06      	ldr	r3, [pc, #24]	@ (800cbb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cba2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800cba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbaa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800cbae:	4a02      	ldr	r2, [pc, #8]	@ (800cbb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cbb0:	430b      	orrs	r3, r1
 800cbb2:	6593      	str	r3, [r2, #88]	@ 0x58
 800cbb4:	e006      	b.n	800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800cbb6:	bf00      	nop
 800cbb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cbc0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800cbc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbcc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800cbd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800cbda:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800cbde:	460b      	mov	r3, r1
 800cbe0:	4313      	orrs	r3, r2
 800cbe2:	d037      	beq.n	800cc54 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800cbe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbe8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cbee:	d00e      	beq.n	800cc0e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800cbf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cbf4:	d816      	bhi.n	800cc24 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d018      	beq.n	800cc2c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800cbfa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cbfe:	d111      	bne.n	800cc24 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc00:	4bc4      	ldr	r3, [pc, #784]	@ (800cf14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cc02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc04:	4ac3      	ldr	r2, [pc, #780]	@ (800cf14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cc06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cc0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800cc0c:	e00f      	b.n	800cc2e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cc0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc12:	3308      	adds	r3, #8
 800cc14:	2101      	movs	r1, #1
 800cc16:	4618      	mov	r0, r3
 800cc18:	f001 f930 	bl	800de7c <RCCEx_PLL2_Config>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800cc22:	e004      	b.n	800cc2e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cc24:	2301      	movs	r3, #1
 800cc26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cc2a:	e000      	b.n	800cc2e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800cc2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d10a      	bne.n	800cc4c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800cc36:	4bb7      	ldr	r3, [pc, #732]	@ (800cf14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cc38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc3a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800cc3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc44:	4ab3      	ldr	r2, [pc, #716]	@ (800cf14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cc46:	430b      	orrs	r3, r1
 800cc48:	6513      	str	r3, [r2, #80]	@ 0x50
 800cc4a:	e003      	b.n	800cc54 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800cc54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800cc60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cc64:	2300      	movs	r3, #0
 800cc66:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800cc6a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800cc6e:	460b      	mov	r3, r1
 800cc70:	4313      	orrs	r3, r2
 800cc72:	d039      	beq.n	800cce8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800cc74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cc7a:	2b03      	cmp	r3, #3
 800cc7c:	d81c      	bhi.n	800ccb8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800cc7e:	a201      	add	r2, pc, #4	@ (adr r2, 800cc84 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800cc80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc84:	0800ccc1 	.word	0x0800ccc1
 800cc88:	0800cc95 	.word	0x0800cc95
 800cc8c:	0800cca3 	.word	0x0800cca3
 800cc90:	0800ccc1 	.word	0x0800ccc1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc94:	4b9f      	ldr	r3, [pc, #636]	@ (800cf14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cc96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc98:	4a9e      	ldr	r2, [pc, #632]	@ (800cf14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cc9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cc9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800cca0:	e00f      	b.n	800ccc2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cca6:	3308      	adds	r3, #8
 800cca8:	2102      	movs	r1, #2
 800ccaa:	4618      	mov	r0, r3
 800ccac:	f001 f8e6 	bl	800de7c <RCCEx_PLL2_Config>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ccb6:	e004      	b.n	800ccc2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ccb8:	2301      	movs	r3, #1
 800ccba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ccbe:	e000      	b.n	800ccc2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800ccc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ccc2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d10a      	bne.n	800cce0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ccca:	4b92      	ldr	r3, [pc, #584]	@ (800cf14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ccce:	f023 0103 	bic.w	r1, r3, #3
 800ccd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ccd8:	4a8e      	ldr	r2, [pc, #568]	@ (800cf14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ccda:	430b      	orrs	r3, r1
 800ccdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ccde:	e003      	b.n	800cce8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cce0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cce4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800ccf4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ccfe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800cd02:	460b      	mov	r3, r1
 800cd04:	4313      	orrs	r3, r2
 800cd06:	f000 8099 	beq.w	800ce3c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cd0a:	4b83      	ldr	r3, [pc, #524]	@ (800cf18 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	4a82      	ldr	r2, [pc, #520]	@ (800cf18 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800cd10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cd14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cd16:	f7fb fa91 	bl	800823c <HAL_GetTick>
 800cd1a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cd1e:	e00b      	b.n	800cd38 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cd20:	f7fb fa8c 	bl	800823c <HAL_GetTick>
 800cd24:	4602      	mov	r2, r0
 800cd26:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800cd2a:	1ad3      	subs	r3, r2, r3
 800cd2c:	2b64      	cmp	r3, #100	@ 0x64
 800cd2e:	d903      	bls.n	800cd38 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800cd30:	2303      	movs	r3, #3
 800cd32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cd36:	e005      	b.n	800cd44 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cd38:	4b77      	ldr	r3, [pc, #476]	@ (800cf18 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d0ed      	beq.n	800cd20 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800cd44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d173      	bne.n	800ce34 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800cd4c:	4b71      	ldr	r3, [pc, #452]	@ (800cf14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd4e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800cd50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cd58:	4053      	eors	r3, r2
 800cd5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d015      	beq.n	800cd8e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cd62:	4b6c      	ldr	r3, [pc, #432]	@ (800cf14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cd6a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cd6e:	4b69      	ldr	r3, [pc, #420]	@ (800cf14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd72:	4a68      	ldr	r2, [pc, #416]	@ (800cf14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cd78:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cd7a:	4b66      	ldr	r3, [pc, #408]	@ (800cf14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd7e:	4a65      	ldr	r2, [pc, #404]	@ (800cf14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cd84:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800cd86:	4a63      	ldr	r2, [pc, #396]	@ (800cf14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cd8c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800cd8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cd96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd9a:	d118      	bne.n	800cdce <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd9c:	f7fb fa4e 	bl	800823c <HAL_GetTick>
 800cda0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cda4:	e00d      	b.n	800cdc2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cda6:	f7fb fa49 	bl	800823c <HAL_GetTick>
 800cdaa:	4602      	mov	r2, r0
 800cdac:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800cdb0:	1ad2      	subs	r2, r2, r3
 800cdb2:	f241 3388 	movw	r3, #5000	@ 0x1388
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d903      	bls.n	800cdc2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800cdba:	2303      	movs	r3, #3
 800cdbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800cdc0:	e005      	b.n	800cdce <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cdc2:	4b54      	ldr	r3, [pc, #336]	@ (800cf14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cdc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cdc6:	f003 0302 	and.w	r3, r3, #2
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d0eb      	beq.n	800cda6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800cdce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d129      	bne.n	800ce2a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cdd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cdde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cde2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cde6:	d10e      	bne.n	800ce06 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800cde8:	4b4a      	ldr	r3, [pc, #296]	@ (800cf14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cdea:	691b      	ldr	r3, [r3, #16]
 800cdec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800cdf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdf4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cdf8:	091a      	lsrs	r2, r3, #4
 800cdfa:	4b48      	ldr	r3, [pc, #288]	@ (800cf1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800cdfc:	4013      	ands	r3, r2
 800cdfe:	4a45      	ldr	r2, [pc, #276]	@ (800cf14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ce00:	430b      	orrs	r3, r1
 800ce02:	6113      	str	r3, [r2, #16]
 800ce04:	e005      	b.n	800ce12 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800ce06:	4b43      	ldr	r3, [pc, #268]	@ (800cf14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ce08:	691b      	ldr	r3, [r3, #16]
 800ce0a:	4a42      	ldr	r2, [pc, #264]	@ (800cf14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ce0c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ce10:	6113      	str	r3, [r2, #16]
 800ce12:	4b40      	ldr	r3, [pc, #256]	@ (800cf14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ce14:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800ce16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ce1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ce22:	4a3c      	ldr	r2, [pc, #240]	@ (800cf14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ce24:	430b      	orrs	r3, r1
 800ce26:	6713      	str	r3, [r2, #112]	@ 0x70
 800ce28:	e008      	b.n	800ce3c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ce2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ce2e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800ce32:	e003      	b.n	800ce3c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ce38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ce3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce44:	f002 0301 	and.w	r3, r2, #1
 800ce48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ce52:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800ce56:	460b      	mov	r3, r1
 800ce58:	4313      	orrs	r3, r2
 800ce5a:	f000 808f 	beq.w	800cf7c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ce5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ce64:	2b28      	cmp	r3, #40	@ 0x28
 800ce66:	d871      	bhi.n	800cf4c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800ce68:	a201      	add	r2, pc, #4	@ (adr r2, 800ce70 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800ce6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce6e:	bf00      	nop
 800ce70:	0800cf55 	.word	0x0800cf55
 800ce74:	0800cf4d 	.word	0x0800cf4d
 800ce78:	0800cf4d 	.word	0x0800cf4d
 800ce7c:	0800cf4d 	.word	0x0800cf4d
 800ce80:	0800cf4d 	.word	0x0800cf4d
 800ce84:	0800cf4d 	.word	0x0800cf4d
 800ce88:	0800cf4d 	.word	0x0800cf4d
 800ce8c:	0800cf4d 	.word	0x0800cf4d
 800ce90:	0800cf21 	.word	0x0800cf21
 800ce94:	0800cf4d 	.word	0x0800cf4d
 800ce98:	0800cf4d 	.word	0x0800cf4d
 800ce9c:	0800cf4d 	.word	0x0800cf4d
 800cea0:	0800cf4d 	.word	0x0800cf4d
 800cea4:	0800cf4d 	.word	0x0800cf4d
 800cea8:	0800cf4d 	.word	0x0800cf4d
 800ceac:	0800cf4d 	.word	0x0800cf4d
 800ceb0:	0800cf37 	.word	0x0800cf37
 800ceb4:	0800cf4d 	.word	0x0800cf4d
 800ceb8:	0800cf4d 	.word	0x0800cf4d
 800cebc:	0800cf4d 	.word	0x0800cf4d
 800cec0:	0800cf4d 	.word	0x0800cf4d
 800cec4:	0800cf4d 	.word	0x0800cf4d
 800cec8:	0800cf4d 	.word	0x0800cf4d
 800cecc:	0800cf4d 	.word	0x0800cf4d
 800ced0:	0800cf55 	.word	0x0800cf55
 800ced4:	0800cf4d 	.word	0x0800cf4d
 800ced8:	0800cf4d 	.word	0x0800cf4d
 800cedc:	0800cf4d 	.word	0x0800cf4d
 800cee0:	0800cf4d 	.word	0x0800cf4d
 800cee4:	0800cf4d 	.word	0x0800cf4d
 800cee8:	0800cf4d 	.word	0x0800cf4d
 800ceec:	0800cf4d 	.word	0x0800cf4d
 800cef0:	0800cf55 	.word	0x0800cf55
 800cef4:	0800cf4d 	.word	0x0800cf4d
 800cef8:	0800cf4d 	.word	0x0800cf4d
 800cefc:	0800cf4d 	.word	0x0800cf4d
 800cf00:	0800cf4d 	.word	0x0800cf4d
 800cf04:	0800cf4d 	.word	0x0800cf4d
 800cf08:	0800cf4d 	.word	0x0800cf4d
 800cf0c:	0800cf4d 	.word	0x0800cf4d
 800cf10:	0800cf55 	.word	0x0800cf55
 800cf14:	58024400 	.word	0x58024400
 800cf18:	58024800 	.word	0x58024800
 800cf1c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cf20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf24:	3308      	adds	r3, #8
 800cf26:	2101      	movs	r1, #1
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f000 ffa7 	bl	800de7c <RCCEx_PLL2_Config>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800cf34:	e00f      	b.n	800cf56 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cf36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf3a:	3328      	adds	r3, #40	@ 0x28
 800cf3c:	2101      	movs	r1, #1
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f001 f84e 	bl	800dfe0 <RCCEx_PLL3_Config>
 800cf44:	4603      	mov	r3, r0
 800cf46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800cf4a:	e004      	b.n	800cf56 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cf52:	e000      	b.n	800cf56 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800cf54:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d10a      	bne.n	800cf74 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800cf5e:	4bbf      	ldr	r3, [pc, #764]	@ (800d25c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cf60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf62:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800cf66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cf6c:	4abb      	ldr	r2, [pc, #748]	@ (800d25c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cf6e:	430b      	orrs	r3, r1
 800cf70:	6553      	str	r3, [r2, #84]	@ 0x54
 800cf72:	e003      	b.n	800cf7c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cf78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800cf7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf84:	f002 0302 	and.w	r3, r2, #2
 800cf88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cf92:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800cf96:	460b      	mov	r3, r1
 800cf98:	4313      	orrs	r3, r2
 800cf9a:	d041      	beq.n	800d020 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800cf9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cfa2:	2b05      	cmp	r3, #5
 800cfa4:	d824      	bhi.n	800cff0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800cfa6:	a201      	add	r2, pc, #4	@ (adr r2, 800cfac <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800cfa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfac:	0800cff9 	.word	0x0800cff9
 800cfb0:	0800cfc5 	.word	0x0800cfc5
 800cfb4:	0800cfdb 	.word	0x0800cfdb
 800cfb8:	0800cff9 	.word	0x0800cff9
 800cfbc:	0800cff9 	.word	0x0800cff9
 800cfc0:	0800cff9 	.word	0x0800cff9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cfc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfc8:	3308      	adds	r3, #8
 800cfca:	2101      	movs	r1, #1
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f000 ff55 	bl	800de7c <RCCEx_PLL2_Config>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800cfd8:	e00f      	b.n	800cffa <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cfda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfde:	3328      	adds	r3, #40	@ 0x28
 800cfe0:	2101      	movs	r1, #1
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f000 fffc 	bl	800dfe0 <RCCEx_PLL3_Config>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800cfee:	e004      	b.n	800cffa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cff0:	2301      	movs	r3, #1
 800cff2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cff6:	e000      	b.n	800cffa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800cff8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cffa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d10a      	bne.n	800d018 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d002:	4b96      	ldr	r3, [pc, #600]	@ (800d25c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d006:	f023 0107 	bic.w	r1, r3, #7
 800d00a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d00e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d010:	4a92      	ldr	r2, [pc, #584]	@ (800d25c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d012:	430b      	orrs	r3, r1
 800d014:	6553      	str	r3, [r2, #84]	@ 0x54
 800d016:	e003      	b.n	800d020 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d018:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d01c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d028:	f002 0304 	and.w	r3, r2, #4
 800d02c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d030:	2300      	movs	r3, #0
 800d032:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d036:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d03a:	460b      	mov	r3, r1
 800d03c:	4313      	orrs	r3, r2
 800d03e:	d044      	beq.n	800d0ca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d048:	2b05      	cmp	r3, #5
 800d04a:	d825      	bhi.n	800d098 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800d04c:	a201      	add	r2, pc, #4	@ (adr r2, 800d054 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800d04e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d052:	bf00      	nop
 800d054:	0800d0a1 	.word	0x0800d0a1
 800d058:	0800d06d 	.word	0x0800d06d
 800d05c:	0800d083 	.word	0x0800d083
 800d060:	0800d0a1 	.word	0x0800d0a1
 800d064:	0800d0a1 	.word	0x0800d0a1
 800d068:	0800d0a1 	.word	0x0800d0a1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d06c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d070:	3308      	adds	r3, #8
 800d072:	2101      	movs	r1, #1
 800d074:	4618      	mov	r0, r3
 800d076:	f000 ff01 	bl	800de7c <RCCEx_PLL2_Config>
 800d07a:	4603      	mov	r3, r0
 800d07c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d080:	e00f      	b.n	800d0a2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d086:	3328      	adds	r3, #40	@ 0x28
 800d088:	2101      	movs	r1, #1
 800d08a:	4618      	mov	r0, r3
 800d08c:	f000 ffa8 	bl	800dfe0 <RCCEx_PLL3_Config>
 800d090:	4603      	mov	r3, r0
 800d092:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d096:	e004      	b.n	800d0a2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d098:	2301      	movs	r3, #1
 800d09a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d09e:	e000      	b.n	800d0a2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800d0a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d0a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d10b      	bne.n	800d0c2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d0aa:	4b6c      	ldr	r3, [pc, #432]	@ (800d25c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d0ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0ae:	f023 0107 	bic.w	r1, r3, #7
 800d0b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d0ba:	4a68      	ldr	r2, [pc, #416]	@ (800d25c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d0bc:	430b      	orrs	r3, r1
 800d0be:	6593      	str	r3, [r2, #88]	@ 0x58
 800d0c0:	e003      	b.n	800d0ca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d0c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d0ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0d2:	f002 0320 	and.w	r3, r2, #32
 800d0d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d0da:	2300      	movs	r3, #0
 800d0dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d0e0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800d0e4:	460b      	mov	r3, r1
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	d055      	beq.n	800d196 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d0ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d0f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d0f6:	d033      	beq.n	800d160 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800d0f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d0fc:	d82c      	bhi.n	800d158 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800d0fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d102:	d02f      	beq.n	800d164 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800d104:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d108:	d826      	bhi.n	800d158 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800d10a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d10e:	d02b      	beq.n	800d168 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800d110:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d114:	d820      	bhi.n	800d158 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800d116:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d11a:	d012      	beq.n	800d142 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800d11c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d120:	d81a      	bhi.n	800d158 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800d122:	2b00      	cmp	r3, #0
 800d124:	d022      	beq.n	800d16c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800d126:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d12a:	d115      	bne.n	800d158 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d12c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d130:	3308      	adds	r3, #8
 800d132:	2100      	movs	r1, #0
 800d134:	4618      	mov	r0, r3
 800d136:	f000 fea1 	bl	800de7c <RCCEx_PLL2_Config>
 800d13a:	4603      	mov	r3, r0
 800d13c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d140:	e015      	b.n	800d16e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d146:	3328      	adds	r3, #40	@ 0x28
 800d148:	2102      	movs	r1, #2
 800d14a:	4618      	mov	r0, r3
 800d14c:	f000 ff48 	bl	800dfe0 <RCCEx_PLL3_Config>
 800d150:	4603      	mov	r3, r0
 800d152:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d156:	e00a      	b.n	800d16e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d158:	2301      	movs	r3, #1
 800d15a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d15e:	e006      	b.n	800d16e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800d160:	bf00      	nop
 800d162:	e004      	b.n	800d16e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800d164:	bf00      	nop
 800d166:	e002      	b.n	800d16e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800d168:	bf00      	nop
 800d16a:	e000      	b.n	800d16e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800d16c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d16e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d172:	2b00      	cmp	r3, #0
 800d174:	d10b      	bne.n	800d18e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d176:	4b39      	ldr	r3, [pc, #228]	@ (800d25c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d17a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800d17e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d182:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d186:	4a35      	ldr	r2, [pc, #212]	@ (800d25c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d188:	430b      	orrs	r3, r1
 800d18a:	6553      	str	r3, [r2, #84]	@ 0x54
 800d18c:	e003      	b.n	800d196 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d18e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d192:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d19e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800d1a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d1ac:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800d1b0:	460b      	mov	r3, r1
 800d1b2:	4313      	orrs	r3, r2
 800d1b4:	d058      	beq.n	800d268 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d1b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d1be:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800d1c2:	d033      	beq.n	800d22c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800d1c4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800d1c8:	d82c      	bhi.n	800d224 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800d1ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d1ce:	d02f      	beq.n	800d230 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800d1d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d1d4:	d826      	bhi.n	800d224 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800d1d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d1da:	d02b      	beq.n	800d234 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800d1dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d1e0:	d820      	bhi.n	800d224 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800d1e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d1e6:	d012      	beq.n	800d20e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800d1e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d1ec:	d81a      	bhi.n	800d224 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d022      	beq.n	800d238 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800d1f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d1f6:	d115      	bne.n	800d224 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d1f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1fc:	3308      	adds	r3, #8
 800d1fe:	2100      	movs	r1, #0
 800d200:	4618      	mov	r0, r3
 800d202:	f000 fe3b 	bl	800de7c <RCCEx_PLL2_Config>
 800d206:	4603      	mov	r3, r0
 800d208:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d20c:	e015      	b.n	800d23a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d20e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d212:	3328      	adds	r3, #40	@ 0x28
 800d214:	2102      	movs	r1, #2
 800d216:	4618      	mov	r0, r3
 800d218:	f000 fee2 	bl	800dfe0 <RCCEx_PLL3_Config>
 800d21c:	4603      	mov	r3, r0
 800d21e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d222:	e00a      	b.n	800d23a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d224:	2301      	movs	r3, #1
 800d226:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d22a:	e006      	b.n	800d23a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800d22c:	bf00      	nop
 800d22e:	e004      	b.n	800d23a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800d230:	bf00      	nop
 800d232:	e002      	b.n	800d23a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800d234:	bf00      	nop
 800d236:	e000      	b.n	800d23a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800d238:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d23a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d10e      	bne.n	800d260 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d242:	4b06      	ldr	r3, [pc, #24]	@ (800d25c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d246:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800d24a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d24e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d252:	4a02      	ldr	r2, [pc, #8]	@ (800d25c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d254:	430b      	orrs	r3, r1
 800d256:	6593      	str	r3, [r2, #88]	@ 0x58
 800d258:	e006      	b.n	800d268 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800d25a:	bf00      	nop
 800d25c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d260:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d264:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d270:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800d274:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d278:	2300      	movs	r3, #0
 800d27a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d27e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800d282:	460b      	mov	r3, r1
 800d284:	4313      	orrs	r3, r2
 800d286:	d055      	beq.n	800d334 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d28c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d290:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800d294:	d033      	beq.n	800d2fe <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800d296:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800d29a:	d82c      	bhi.n	800d2f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800d29c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d2a0:	d02f      	beq.n	800d302 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800d2a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d2a6:	d826      	bhi.n	800d2f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800d2a8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d2ac:	d02b      	beq.n	800d306 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800d2ae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d2b2:	d820      	bhi.n	800d2f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800d2b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d2b8:	d012      	beq.n	800d2e0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800d2ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d2be:	d81a      	bhi.n	800d2f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d022      	beq.n	800d30a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800d2c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d2c8:	d115      	bne.n	800d2f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d2ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2ce:	3308      	adds	r3, #8
 800d2d0:	2100      	movs	r1, #0
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f000 fdd2 	bl	800de7c <RCCEx_PLL2_Config>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d2de:	e015      	b.n	800d30c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d2e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2e4:	3328      	adds	r3, #40	@ 0x28
 800d2e6:	2102      	movs	r1, #2
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f000 fe79 	bl	800dfe0 <RCCEx_PLL3_Config>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d2f4:	e00a      	b.n	800d30c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d2fc:	e006      	b.n	800d30c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800d2fe:	bf00      	nop
 800d300:	e004      	b.n	800d30c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800d302:	bf00      	nop
 800d304:	e002      	b.n	800d30c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800d306:	bf00      	nop
 800d308:	e000      	b.n	800d30c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800d30a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d30c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d310:	2b00      	cmp	r3, #0
 800d312:	d10b      	bne.n	800d32c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d314:	4ba0      	ldr	r3, [pc, #640]	@ (800d598 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d318:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800d31c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d320:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d324:	4a9c      	ldr	r2, [pc, #624]	@ (800d598 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d326:	430b      	orrs	r3, r1
 800d328:	6593      	str	r3, [r2, #88]	@ 0x58
 800d32a:	e003      	b.n	800d334 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d32c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d330:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800d334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d33c:	f002 0308 	and.w	r3, r2, #8
 800d340:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d344:	2300      	movs	r3, #0
 800d346:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d34a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800d34e:	460b      	mov	r3, r1
 800d350:	4313      	orrs	r3, r2
 800d352:	d01e      	beq.n	800d392 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800d354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d358:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d35c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d360:	d10c      	bne.n	800d37c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d366:	3328      	adds	r3, #40	@ 0x28
 800d368:	2102      	movs	r1, #2
 800d36a:	4618      	mov	r0, r3
 800d36c:	f000 fe38 	bl	800dfe0 <RCCEx_PLL3_Config>
 800d370:	4603      	mov	r3, r0
 800d372:	2b00      	cmp	r3, #0
 800d374:	d002      	beq.n	800d37c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800d376:	2301      	movs	r3, #1
 800d378:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800d37c:	4b86      	ldr	r3, [pc, #536]	@ (800d598 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d37e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d380:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d384:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d388:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d38c:	4a82      	ldr	r2, [pc, #520]	@ (800d598 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d38e:	430b      	orrs	r3, r1
 800d390:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d39a:	f002 0310 	and.w	r3, r2, #16
 800d39e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d3a8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800d3ac:	460b      	mov	r3, r1
 800d3ae:	4313      	orrs	r3, r2
 800d3b0:	d01e      	beq.n	800d3f0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800d3b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d3ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d3be:	d10c      	bne.n	800d3da <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d3c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3c4:	3328      	adds	r3, #40	@ 0x28
 800d3c6:	2102      	movs	r1, #2
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f000 fe09 	bl	800dfe0 <RCCEx_PLL3_Config>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d002      	beq.n	800d3da <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d3da:	4b6f      	ldr	r3, [pc, #444]	@ (800d598 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d3dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d3de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d3e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d3ea:	4a6b      	ldr	r2, [pc, #428]	@ (800d598 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d3ec:	430b      	orrs	r3, r1
 800d3ee:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d3f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800d3fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d3fe:	2300      	movs	r3, #0
 800d400:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d402:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800d406:	460b      	mov	r3, r1
 800d408:	4313      	orrs	r3, r2
 800d40a:	d03e      	beq.n	800d48a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800d40c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d410:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d414:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d418:	d022      	beq.n	800d460 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800d41a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d41e:	d81b      	bhi.n	800d458 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800d420:	2b00      	cmp	r3, #0
 800d422:	d003      	beq.n	800d42c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800d424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d428:	d00b      	beq.n	800d442 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800d42a:	e015      	b.n	800d458 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d42c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d430:	3308      	adds	r3, #8
 800d432:	2100      	movs	r1, #0
 800d434:	4618      	mov	r0, r3
 800d436:	f000 fd21 	bl	800de7c <RCCEx_PLL2_Config>
 800d43a:	4603      	mov	r3, r0
 800d43c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d440:	e00f      	b.n	800d462 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d442:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d446:	3328      	adds	r3, #40	@ 0x28
 800d448:	2102      	movs	r1, #2
 800d44a:	4618      	mov	r0, r3
 800d44c:	f000 fdc8 	bl	800dfe0 <RCCEx_PLL3_Config>
 800d450:	4603      	mov	r3, r0
 800d452:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d456:	e004      	b.n	800d462 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d458:	2301      	movs	r3, #1
 800d45a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d45e:	e000      	b.n	800d462 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800d460:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d462:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d466:	2b00      	cmp	r3, #0
 800d468:	d10b      	bne.n	800d482 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d46a:	4b4b      	ldr	r3, [pc, #300]	@ (800d598 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d46c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d46e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800d472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d476:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d47a:	4a47      	ldr	r2, [pc, #284]	@ (800d598 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d47c:	430b      	orrs	r3, r1
 800d47e:	6593      	str	r3, [r2, #88]	@ 0x58
 800d480:	e003      	b.n	800d48a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d482:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d486:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d48a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d492:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800d496:	673b      	str	r3, [r7, #112]	@ 0x70
 800d498:	2300      	movs	r3, #0
 800d49a:	677b      	str	r3, [r7, #116]	@ 0x74
 800d49c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800d4a0:	460b      	mov	r3, r1
 800d4a2:	4313      	orrs	r3, r2
 800d4a4:	d03b      	beq.n	800d51e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800d4a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d4ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d4b2:	d01f      	beq.n	800d4f4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800d4b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d4b8:	d818      	bhi.n	800d4ec <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800d4ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d4be:	d003      	beq.n	800d4c8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800d4c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d4c4:	d007      	beq.n	800d4d6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800d4c6:	e011      	b.n	800d4ec <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d4c8:	4b33      	ldr	r3, [pc, #204]	@ (800d598 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d4ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4cc:	4a32      	ldr	r2, [pc, #200]	@ (800d598 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d4ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d4d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800d4d4:	e00f      	b.n	800d4f6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d4d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4da:	3328      	adds	r3, #40	@ 0x28
 800d4dc:	2101      	movs	r1, #1
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f000 fd7e 	bl	800dfe0 <RCCEx_PLL3_Config>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800d4ea:	e004      	b.n	800d4f6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d4f2:	e000      	b.n	800d4f6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800d4f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d4f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d10b      	bne.n	800d516 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d4fe:	4b26      	ldr	r3, [pc, #152]	@ (800d598 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d502:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800d506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d50a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d50e:	4a22      	ldr	r2, [pc, #136]	@ (800d598 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d510:	430b      	orrs	r3, r1
 800d512:	6553      	str	r3, [r2, #84]	@ 0x54
 800d514:	e003      	b.n	800d51e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d516:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d51a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d51e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d526:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800d52a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d52c:	2300      	movs	r3, #0
 800d52e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d530:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800d534:	460b      	mov	r3, r1
 800d536:	4313      	orrs	r3, r2
 800d538:	d034      	beq.n	800d5a4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800d53a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d53e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d540:	2b00      	cmp	r3, #0
 800d542:	d003      	beq.n	800d54c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800d544:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d548:	d007      	beq.n	800d55a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800d54a:	e011      	b.n	800d570 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d54c:	4b12      	ldr	r3, [pc, #72]	@ (800d598 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d54e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d550:	4a11      	ldr	r2, [pc, #68]	@ (800d598 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d552:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d556:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d558:	e00e      	b.n	800d578 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d55a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d55e:	3308      	adds	r3, #8
 800d560:	2102      	movs	r1, #2
 800d562:	4618      	mov	r0, r3
 800d564:	f000 fc8a 	bl	800de7c <RCCEx_PLL2_Config>
 800d568:	4603      	mov	r3, r0
 800d56a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d56e:	e003      	b.n	800d578 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800d570:	2301      	movs	r3, #1
 800d572:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d576:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d578:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d10d      	bne.n	800d59c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d580:	4b05      	ldr	r3, [pc, #20]	@ (800d598 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d584:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d58c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d58e:	4a02      	ldr	r2, [pc, #8]	@ (800d598 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d590:	430b      	orrs	r3, r1
 800d592:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d594:	e006      	b.n	800d5a4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800d596:	bf00      	nop
 800d598:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d59c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d5a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d5a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ac:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800d5b0:	663b      	str	r3, [r7, #96]	@ 0x60
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	667b      	str	r3, [r7, #100]	@ 0x64
 800d5b6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800d5ba:	460b      	mov	r3, r1
 800d5bc:	4313      	orrs	r3, r2
 800d5be:	d00c      	beq.n	800d5da <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d5c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5c4:	3328      	adds	r3, #40	@ 0x28
 800d5c6:	2102      	movs	r1, #2
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	f000 fd09 	bl	800dfe0 <RCCEx_PLL3_Config>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d002      	beq.n	800d5da <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d5da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800d5e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d5ec:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800d5f0:	460b      	mov	r3, r1
 800d5f2:	4313      	orrs	r3, r2
 800d5f4:	d036      	beq.n	800d664 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800d5f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d5fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d600:	d018      	beq.n	800d634 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800d602:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d606:	d811      	bhi.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800d608:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d60c:	d014      	beq.n	800d638 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800d60e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d612:	d80b      	bhi.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800d614:	2b00      	cmp	r3, #0
 800d616:	d011      	beq.n	800d63c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800d618:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d61c:	d106      	bne.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d61e:	4bb7      	ldr	r3, [pc, #732]	@ (800d8fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d622:	4ab6      	ldr	r2, [pc, #728]	@ (800d8fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d624:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d628:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800d62a:	e008      	b.n	800d63e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d62c:	2301      	movs	r3, #1
 800d62e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d632:	e004      	b.n	800d63e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800d634:	bf00      	nop
 800d636:	e002      	b.n	800d63e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800d638:	bf00      	nop
 800d63a:	e000      	b.n	800d63e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800d63c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d63e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d642:	2b00      	cmp	r3, #0
 800d644:	d10a      	bne.n	800d65c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d646:	4bad      	ldr	r3, [pc, #692]	@ (800d8fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d64a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d64e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d652:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d654:	4aa9      	ldr	r2, [pc, #676]	@ (800d8fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d656:	430b      	orrs	r3, r1
 800d658:	6553      	str	r3, [r2, #84]	@ 0x54
 800d65a:	e003      	b.n	800d664 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d65c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d660:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d66c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800d670:	653b      	str	r3, [r7, #80]	@ 0x50
 800d672:	2300      	movs	r3, #0
 800d674:	657b      	str	r3, [r7, #84]	@ 0x54
 800d676:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800d67a:	460b      	mov	r3, r1
 800d67c:	4313      	orrs	r3, r2
 800d67e:	d009      	beq.n	800d694 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d680:	4b9e      	ldr	r3, [pc, #632]	@ (800d8fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d682:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d684:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d68c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d68e:	4a9b      	ldr	r2, [pc, #620]	@ (800d8fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d690:	430b      	orrs	r3, r1
 800d692:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d69c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800d6a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d6a6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800d6aa:	460b      	mov	r3, r1
 800d6ac:	4313      	orrs	r3, r2
 800d6ae:	d009      	beq.n	800d6c4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d6b0:	4b92      	ldr	r3, [pc, #584]	@ (800d8fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d6b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d6b4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800d6b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d6be:	4a8f      	ldr	r2, [pc, #572]	@ (800d8fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d6c0:	430b      	orrs	r3, r1
 800d6c2:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d6c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6cc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800d6d0:	643b      	str	r3, [r7, #64]	@ 0x40
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800d6d6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800d6da:	460b      	mov	r3, r1
 800d6dc:	4313      	orrs	r3, r2
 800d6de:	d00e      	beq.n	800d6fe <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d6e0:	4b86      	ldr	r3, [pc, #536]	@ (800d8fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d6e2:	691b      	ldr	r3, [r3, #16]
 800d6e4:	4a85      	ldr	r2, [pc, #532]	@ (800d8fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d6e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d6ea:	6113      	str	r3, [r2, #16]
 800d6ec:	4b83      	ldr	r3, [pc, #524]	@ (800d8fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d6ee:	6919      	ldr	r1, [r3, #16]
 800d6f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d6f8:	4a80      	ldr	r2, [pc, #512]	@ (800d8fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d6fa:	430b      	orrs	r3, r1
 800d6fc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d6fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d706:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800d70a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d70c:	2300      	movs	r3, #0
 800d70e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d710:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800d714:	460b      	mov	r3, r1
 800d716:	4313      	orrs	r3, r2
 800d718:	d009      	beq.n	800d72e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d71a:	4b78      	ldr	r3, [pc, #480]	@ (800d8fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d71c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d71e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800d722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d728:	4a74      	ldr	r2, [pc, #464]	@ (800d8fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d72a:	430b      	orrs	r3, r1
 800d72c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d72e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d736:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800d73a:	633b      	str	r3, [r7, #48]	@ 0x30
 800d73c:	2300      	movs	r3, #0
 800d73e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d740:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800d744:	460b      	mov	r3, r1
 800d746:	4313      	orrs	r3, r2
 800d748:	d00a      	beq.n	800d760 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d74a:	4b6c      	ldr	r3, [pc, #432]	@ (800d8fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d74c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d74e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800d752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d75a:	4a68      	ldr	r2, [pc, #416]	@ (800d8fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d75c:	430b      	orrs	r3, r1
 800d75e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800d760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d768:	2100      	movs	r1, #0
 800d76a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800d76c:	f003 0301 	and.w	r3, r3, #1
 800d770:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d772:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800d776:	460b      	mov	r3, r1
 800d778:	4313      	orrs	r3, r2
 800d77a:	d011      	beq.n	800d7a0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d77c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d780:	3308      	adds	r3, #8
 800d782:	2100      	movs	r1, #0
 800d784:	4618      	mov	r0, r3
 800d786:	f000 fb79 	bl	800de7c <RCCEx_PLL2_Config>
 800d78a:	4603      	mov	r3, r0
 800d78c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d790:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d794:	2b00      	cmp	r3, #0
 800d796:	d003      	beq.n	800d7a0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d798:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d79c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800d7a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a8:	2100      	movs	r1, #0
 800d7aa:	6239      	str	r1, [r7, #32]
 800d7ac:	f003 0302 	and.w	r3, r3, #2
 800d7b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d7b2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d7b6:	460b      	mov	r3, r1
 800d7b8:	4313      	orrs	r3, r2
 800d7ba:	d011      	beq.n	800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d7bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7c0:	3308      	adds	r3, #8
 800d7c2:	2101      	movs	r1, #1
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f000 fb59 	bl	800de7c <RCCEx_PLL2_Config>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d7d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d003      	beq.n	800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d7d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d7dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800d7e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e8:	2100      	movs	r1, #0
 800d7ea:	61b9      	str	r1, [r7, #24]
 800d7ec:	f003 0304 	and.w	r3, r3, #4
 800d7f0:	61fb      	str	r3, [r7, #28]
 800d7f2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d7f6:	460b      	mov	r3, r1
 800d7f8:	4313      	orrs	r3, r2
 800d7fa:	d011      	beq.n	800d820 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d7fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d800:	3308      	adds	r3, #8
 800d802:	2102      	movs	r1, #2
 800d804:	4618      	mov	r0, r3
 800d806:	f000 fb39 	bl	800de7c <RCCEx_PLL2_Config>
 800d80a:	4603      	mov	r3, r0
 800d80c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d810:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d814:	2b00      	cmp	r3, #0
 800d816:	d003      	beq.n	800d820 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d818:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d81c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800d820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d828:	2100      	movs	r1, #0
 800d82a:	6139      	str	r1, [r7, #16]
 800d82c:	f003 0308 	and.w	r3, r3, #8
 800d830:	617b      	str	r3, [r7, #20]
 800d832:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d836:	460b      	mov	r3, r1
 800d838:	4313      	orrs	r3, r2
 800d83a:	d011      	beq.n	800d860 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d83c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d840:	3328      	adds	r3, #40	@ 0x28
 800d842:	2100      	movs	r1, #0
 800d844:	4618      	mov	r0, r3
 800d846:	f000 fbcb 	bl	800dfe0 <RCCEx_PLL3_Config>
 800d84a:	4603      	mov	r3, r0
 800d84c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800d850:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d854:	2b00      	cmp	r3, #0
 800d856:	d003      	beq.n	800d860 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d858:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d85c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800d860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d868:	2100      	movs	r1, #0
 800d86a:	60b9      	str	r1, [r7, #8]
 800d86c:	f003 0310 	and.w	r3, r3, #16
 800d870:	60fb      	str	r3, [r7, #12]
 800d872:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d876:	460b      	mov	r3, r1
 800d878:	4313      	orrs	r3, r2
 800d87a:	d011      	beq.n	800d8a0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d87c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d880:	3328      	adds	r3, #40	@ 0x28
 800d882:	2101      	movs	r1, #1
 800d884:	4618      	mov	r0, r3
 800d886:	f000 fbab 	bl	800dfe0 <RCCEx_PLL3_Config>
 800d88a:	4603      	mov	r3, r0
 800d88c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d890:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d894:	2b00      	cmp	r3, #0
 800d896:	d003      	beq.n	800d8a0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d898:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d89c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800d8a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a8:	2100      	movs	r1, #0
 800d8aa:	6039      	str	r1, [r7, #0]
 800d8ac:	f003 0320 	and.w	r3, r3, #32
 800d8b0:	607b      	str	r3, [r7, #4]
 800d8b2:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d8b6:	460b      	mov	r3, r1
 800d8b8:	4313      	orrs	r3, r2
 800d8ba:	d011      	beq.n	800d8e0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d8bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8c0:	3328      	adds	r3, #40	@ 0x28
 800d8c2:	2102      	movs	r1, #2
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f000 fb8b 	bl	800dfe0 <RCCEx_PLL3_Config>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d8d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d003      	beq.n	800d8e0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d8dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800d8e0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d101      	bne.n	800d8ec <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	e000      	b.n	800d8ee <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800d8ec:	2301      	movs	r3, #1
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d8fa:	bf00      	nop
 800d8fc:	58024400 	.word	0x58024400

0800d900 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d904:	f7fe fe00 	bl	800c508 <HAL_RCC_GetHCLKFreq>
 800d908:	4602      	mov	r2, r0
 800d90a:	4b06      	ldr	r3, [pc, #24]	@ (800d924 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d90c:	6a1b      	ldr	r3, [r3, #32]
 800d90e:	091b      	lsrs	r3, r3, #4
 800d910:	f003 0307 	and.w	r3, r3, #7
 800d914:	4904      	ldr	r1, [pc, #16]	@ (800d928 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d916:	5ccb      	ldrb	r3, [r1, r3]
 800d918:	f003 031f 	and.w	r3, r3, #31
 800d91c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d920:	4618      	mov	r0, r3
 800d922:	bd80      	pop	{r7, pc}
 800d924:	58024400 	.word	0x58024400
 800d928:	0802ca00 	.word	0x0802ca00

0800d92c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d92c:	b480      	push	{r7}
 800d92e:	b089      	sub	sp, #36	@ 0x24
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d934:	4ba1      	ldr	r3, [pc, #644]	@ (800dbbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d938:	f003 0303 	and.w	r3, r3, #3
 800d93c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d93e:	4b9f      	ldr	r3, [pc, #636]	@ (800dbbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d942:	0b1b      	lsrs	r3, r3, #12
 800d944:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d948:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d94a:	4b9c      	ldr	r3, [pc, #624]	@ (800dbbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d94c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d94e:	091b      	lsrs	r3, r3, #4
 800d950:	f003 0301 	and.w	r3, r3, #1
 800d954:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d956:	4b99      	ldr	r3, [pc, #612]	@ (800dbbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d95a:	08db      	lsrs	r3, r3, #3
 800d95c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d960:	693a      	ldr	r2, [r7, #16]
 800d962:	fb02 f303 	mul.w	r3, r2, r3
 800d966:	ee07 3a90 	vmov	s15, r3
 800d96a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d96e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	2b00      	cmp	r3, #0
 800d976:	f000 8111 	beq.w	800db9c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d97a:	69bb      	ldr	r3, [r7, #24]
 800d97c:	2b02      	cmp	r3, #2
 800d97e:	f000 8083 	beq.w	800da88 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d982:	69bb      	ldr	r3, [r7, #24]
 800d984:	2b02      	cmp	r3, #2
 800d986:	f200 80a1 	bhi.w	800dacc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d98a:	69bb      	ldr	r3, [r7, #24]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d003      	beq.n	800d998 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d990:	69bb      	ldr	r3, [r7, #24]
 800d992:	2b01      	cmp	r3, #1
 800d994:	d056      	beq.n	800da44 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d996:	e099      	b.n	800dacc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d998:	4b88      	ldr	r3, [pc, #544]	@ (800dbbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	f003 0320 	and.w	r3, r3, #32
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d02d      	beq.n	800da00 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d9a4:	4b85      	ldr	r3, [pc, #532]	@ (800dbbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	08db      	lsrs	r3, r3, #3
 800d9aa:	f003 0303 	and.w	r3, r3, #3
 800d9ae:	4a84      	ldr	r2, [pc, #528]	@ (800dbc0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d9b0:	fa22 f303 	lsr.w	r3, r2, r3
 800d9b4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	ee07 3a90 	vmov	s15, r3
 800d9bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9c0:	697b      	ldr	r3, [r7, #20]
 800d9c2:	ee07 3a90 	vmov	s15, r3
 800d9c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9ce:	4b7b      	ldr	r3, [pc, #492]	@ (800dbbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d9d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9d6:	ee07 3a90 	vmov	s15, r3
 800d9da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9de:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9e2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800dbc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d9e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d9f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d9fe:	e087      	b.n	800db10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	ee07 3a90 	vmov	s15, r3
 800da06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da0a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800dbc8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800da0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da12:	4b6a      	ldr	r3, [pc, #424]	@ (800dbbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da1a:	ee07 3a90 	vmov	s15, r3
 800da1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da22:	ed97 6a03 	vldr	s12, [r7, #12]
 800da26:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800dbc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800da2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800da36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da42:	e065      	b.n	800db10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	ee07 3a90 	vmov	s15, r3
 800da4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da4e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800dbcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800da52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da56:	4b59      	ldr	r3, [pc, #356]	@ (800dbbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da5e:	ee07 3a90 	vmov	s15, r3
 800da62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da66:	ed97 6a03 	vldr	s12, [r7, #12]
 800da6a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800dbc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800da6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800da7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da86:	e043      	b.n	800db10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	ee07 3a90 	vmov	s15, r3
 800da8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da92:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800dbd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800da96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da9a:	4b48      	ldr	r3, [pc, #288]	@ (800dbbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800daa2:	ee07 3a90 	vmov	s15, r3
 800daa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800daaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800daae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800dbc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800dab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800daba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dabe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800daca:	e021      	b.n	800db10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	ee07 3a90 	vmov	s15, r3
 800dad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dad6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800dbcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800dada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dade:	4b37      	ldr	r3, [pc, #220]	@ (800dbbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dae6:	ee07 3a90 	vmov	s15, r3
 800daea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800daee:	ed97 6a03 	vldr	s12, [r7, #12]
 800daf2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800dbc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800daf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dafa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dafe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800db02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800db0e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800db10:	4b2a      	ldr	r3, [pc, #168]	@ (800dbbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800db12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db14:	0a5b      	lsrs	r3, r3, #9
 800db16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db1a:	ee07 3a90 	vmov	s15, r3
 800db1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800db26:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db2a:	edd7 6a07 	vldr	s13, [r7, #28]
 800db2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db36:	ee17 2a90 	vmov	r2, s15
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800db3e:	4b1f      	ldr	r3, [pc, #124]	@ (800dbbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800db40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db42:	0c1b      	lsrs	r3, r3, #16
 800db44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db48:	ee07 3a90 	vmov	s15, r3
 800db4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800db54:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db58:	edd7 6a07 	vldr	s13, [r7, #28]
 800db5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db64:	ee17 2a90 	vmov	r2, s15
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800db6c:	4b13      	ldr	r3, [pc, #76]	@ (800dbbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800db6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db70:	0e1b      	lsrs	r3, r3, #24
 800db72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db76:	ee07 3a90 	vmov	s15, r3
 800db7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800db82:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db86:	edd7 6a07 	vldr	s13, [r7, #28]
 800db8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db92:	ee17 2a90 	vmov	r2, s15
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800db9a:	e008      	b.n	800dbae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2200      	movs	r2, #0
 800dba0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2200      	movs	r2, #0
 800dba6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2200      	movs	r2, #0
 800dbac:	609a      	str	r2, [r3, #8]
}
 800dbae:	bf00      	nop
 800dbb0:	3724      	adds	r7, #36	@ 0x24
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb8:	4770      	bx	lr
 800dbba:	bf00      	nop
 800dbbc:	58024400 	.word	0x58024400
 800dbc0:	03d09000 	.word	0x03d09000
 800dbc4:	46000000 	.word	0x46000000
 800dbc8:	4c742400 	.word	0x4c742400
 800dbcc:	4a742400 	.word	0x4a742400
 800dbd0:	4bbebc20 	.word	0x4bbebc20

0800dbd4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800dbd4:	b480      	push	{r7}
 800dbd6:	b089      	sub	sp, #36	@ 0x24
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800dbdc:	4ba1      	ldr	r3, [pc, #644]	@ (800de64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dbde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbe0:	f003 0303 	and.w	r3, r3, #3
 800dbe4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800dbe6:	4b9f      	ldr	r3, [pc, #636]	@ (800de64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dbe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbea:	0d1b      	lsrs	r3, r3, #20
 800dbec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dbf0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800dbf2:	4b9c      	ldr	r3, [pc, #624]	@ (800de64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dbf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbf6:	0a1b      	lsrs	r3, r3, #8
 800dbf8:	f003 0301 	and.w	r3, r3, #1
 800dbfc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800dbfe:	4b99      	ldr	r3, [pc, #612]	@ (800de64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc02:	08db      	lsrs	r3, r3, #3
 800dc04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dc08:	693a      	ldr	r2, [r7, #16]
 800dc0a:	fb02 f303 	mul.w	r3, r2, r3
 800dc0e:	ee07 3a90 	vmov	s15, r3
 800dc12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	f000 8111 	beq.w	800de44 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800dc22:	69bb      	ldr	r3, [r7, #24]
 800dc24:	2b02      	cmp	r3, #2
 800dc26:	f000 8083 	beq.w	800dd30 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800dc2a:	69bb      	ldr	r3, [r7, #24]
 800dc2c:	2b02      	cmp	r3, #2
 800dc2e:	f200 80a1 	bhi.w	800dd74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800dc32:	69bb      	ldr	r3, [r7, #24]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d003      	beq.n	800dc40 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800dc38:	69bb      	ldr	r3, [r7, #24]
 800dc3a:	2b01      	cmp	r3, #1
 800dc3c:	d056      	beq.n	800dcec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800dc3e:	e099      	b.n	800dd74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dc40:	4b88      	ldr	r3, [pc, #544]	@ (800de64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	f003 0320 	and.w	r3, r3, #32
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d02d      	beq.n	800dca8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dc4c:	4b85      	ldr	r3, [pc, #532]	@ (800de64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	08db      	lsrs	r3, r3, #3
 800dc52:	f003 0303 	and.w	r3, r3, #3
 800dc56:	4a84      	ldr	r2, [pc, #528]	@ (800de68 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800dc58:	fa22 f303 	lsr.w	r3, r2, r3
 800dc5c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	ee07 3a90 	vmov	s15, r3
 800dc64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	ee07 3a90 	vmov	s15, r3
 800dc6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc76:	4b7b      	ldr	r3, [pc, #492]	@ (800de64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc7e:	ee07 3a90 	vmov	s15, r3
 800dc82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc86:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc8a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800de6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dc8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dc9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dca2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800dca6:	e087      	b.n	800ddb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	ee07 3a90 	vmov	s15, r3
 800dcae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcb2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800de70 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800dcb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dcba:	4b6a      	ldr	r3, [pc, #424]	@ (800de64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dcbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcc2:	ee07 3a90 	vmov	s15, r3
 800dcc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dcca:	ed97 6a03 	vldr	s12, [r7, #12]
 800dcce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800de6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dcd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dcd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dcda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dcde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dce6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dcea:	e065      	b.n	800ddb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	ee07 3a90 	vmov	s15, r3
 800dcf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcf6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800de74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800dcfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dcfe:	4b59      	ldr	r3, [pc, #356]	@ (800de64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd06:	ee07 3a90 	vmov	s15, r3
 800dd0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd12:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800de6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dd16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dd22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dd2e:	e043      	b.n	800ddb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dd30:	697b      	ldr	r3, [r7, #20]
 800dd32:	ee07 3a90 	vmov	s15, r3
 800dd36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd3a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800de78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800dd3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd42:	4b48      	ldr	r3, [pc, #288]	@ (800de64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd4a:	ee07 3a90 	vmov	s15, r3
 800dd4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd52:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd56:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800de6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dd5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dd66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dd72:	e021      	b.n	800ddb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	ee07 3a90 	vmov	s15, r3
 800dd7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd7e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800de74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800dd82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd86:	4b37      	ldr	r3, [pc, #220]	@ (800de64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd8e:	ee07 3a90 	vmov	s15, r3
 800dd92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd96:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd9a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800de6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dd9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dda2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dda6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ddaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ddae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ddb6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ddb8:	4b2a      	ldr	r3, [pc, #168]	@ (800de64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ddba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddbc:	0a5b      	lsrs	r3, r3, #9
 800ddbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ddc2:	ee07 3a90 	vmov	s15, r3
 800ddc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ddce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ddd2:	edd7 6a07 	vldr	s13, [r7, #28]
 800ddd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ddda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ddde:	ee17 2a90 	vmov	r2, s15
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800dde6:	4b1f      	ldr	r3, [pc, #124]	@ (800de64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dde8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddea:	0c1b      	lsrs	r3, r3, #16
 800ddec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ddf0:	ee07 3a90 	vmov	s15, r3
 800ddf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddf8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ddfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800de00:	edd7 6a07 	vldr	s13, [r7, #28]
 800de04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de0c:	ee17 2a90 	vmov	r2, s15
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800de14:	4b13      	ldr	r3, [pc, #76]	@ (800de64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800de16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de18:	0e1b      	lsrs	r3, r3, #24
 800de1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800de1e:	ee07 3a90 	vmov	s15, r3
 800de22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800de2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800de2e:	edd7 6a07 	vldr	s13, [r7, #28]
 800de32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de3a:	ee17 2a90 	vmov	r2, s15
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800de42:	e008      	b.n	800de56 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2200      	movs	r2, #0
 800de48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2200      	movs	r2, #0
 800de4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2200      	movs	r2, #0
 800de54:	609a      	str	r2, [r3, #8]
}
 800de56:	bf00      	nop
 800de58:	3724      	adds	r7, #36	@ 0x24
 800de5a:	46bd      	mov	sp, r7
 800de5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de60:	4770      	bx	lr
 800de62:	bf00      	nop
 800de64:	58024400 	.word	0x58024400
 800de68:	03d09000 	.word	0x03d09000
 800de6c:	46000000 	.word	0x46000000
 800de70:	4c742400 	.word	0x4c742400
 800de74:	4a742400 	.word	0x4a742400
 800de78:	4bbebc20 	.word	0x4bbebc20

0800de7c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b084      	sub	sp, #16
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
 800de84:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800de86:	2300      	movs	r3, #0
 800de88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800de8a:	4b53      	ldr	r3, [pc, #332]	@ (800dfd8 <RCCEx_PLL2_Config+0x15c>)
 800de8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de8e:	f003 0303 	and.w	r3, r3, #3
 800de92:	2b03      	cmp	r3, #3
 800de94:	d101      	bne.n	800de9a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800de96:	2301      	movs	r3, #1
 800de98:	e099      	b.n	800dfce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800de9a:	4b4f      	ldr	r3, [pc, #316]	@ (800dfd8 <RCCEx_PLL2_Config+0x15c>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	4a4e      	ldr	r2, [pc, #312]	@ (800dfd8 <RCCEx_PLL2_Config+0x15c>)
 800dea0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800dea4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dea6:	f7fa f9c9 	bl	800823c <HAL_GetTick>
 800deaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800deac:	e008      	b.n	800dec0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800deae:	f7fa f9c5 	bl	800823c <HAL_GetTick>
 800deb2:	4602      	mov	r2, r0
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	1ad3      	subs	r3, r2, r3
 800deb8:	2b02      	cmp	r3, #2
 800deba:	d901      	bls.n	800dec0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800debc:	2303      	movs	r3, #3
 800debe:	e086      	b.n	800dfce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dec0:	4b45      	ldr	r3, [pc, #276]	@ (800dfd8 <RCCEx_PLL2_Config+0x15c>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d1f0      	bne.n	800deae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800decc:	4b42      	ldr	r3, [pc, #264]	@ (800dfd8 <RCCEx_PLL2_Config+0x15c>)
 800dece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ded0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	031b      	lsls	r3, r3, #12
 800deda:	493f      	ldr	r1, [pc, #252]	@ (800dfd8 <RCCEx_PLL2_Config+0x15c>)
 800dedc:	4313      	orrs	r3, r2
 800dede:	628b      	str	r3, [r1, #40]	@ 0x28
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	685b      	ldr	r3, [r3, #4]
 800dee4:	3b01      	subs	r3, #1
 800dee6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	689b      	ldr	r3, [r3, #8]
 800deee:	3b01      	subs	r3, #1
 800def0:	025b      	lsls	r3, r3, #9
 800def2:	b29b      	uxth	r3, r3
 800def4:	431a      	orrs	r2, r3
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	68db      	ldr	r3, [r3, #12]
 800defa:	3b01      	subs	r3, #1
 800defc:	041b      	lsls	r3, r3, #16
 800defe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800df02:	431a      	orrs	r2, r3
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	691b      	ldr	r3, [r3, #16]
 800df08:	3b01      	subs	r3, #1
 800df0a:	061b      	lsls	r3, r3, #24
 800df0c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800df10:	4931      	ldr	r1, [pc, #196]	@ (800dfd8 <RCCEx_PLL2_Config+0x15c>)
 800df12:	4313      	orrs	r3, r2
 800df14:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800df16:	4b30      	ldr	r3, [pc, #192]	@ (800dfd8 <RCCEx_PLL2_Config+0x15c>)
 800df18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df1a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	695b      	ldr	r3, [r3, #20]
 800df22:	492d      	ldr	r1, [pc, #180]	@ (800dfd8 <RCCEx_PLL2_Config+0x15c>)
 800df24:	4313      	orrs	r3, r2
 800df26:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800df28:	4b2b      	ldr	r3, [pc, #172]	@ (800dfd8 <RCCEx_PLL2_Config+0x15c>)
 800df2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df2c:	f023 0220 	bic.w	r2, r3, #32
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	699b      	ldr	r3, [r3, #24]
 800df34:	4928      	ldr	r1, [pc, #160]	@ (800dfd8 <RCCEx_PLL2_Config+0x15c>)
 800df36:	4313      	orrs	r3, r2
 800df38:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800df3a:	4b27      	ldr	r3, [pc, #156]	@ (800dfd8 <RCCEx_PLL2_Config+0x15c>)
 800df3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df3e:	4a26      	ldr	r2, [pc, #152]	@ (800dfd8 <RCCEx_PLL2_Config+0x15c>)
 800df40:	f023 0310 	bic.w	r3, r3, #16
 800df44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800df46:	4b24      	ldr	r3, [pc, #144]	@ (800dfd8 <RCCEx_PLL2_Config+0x15c>)
 800df48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800df4a:	4b24      	ldr	r3, [pc, #144]	@ (800dfdc <RCCEx_PLL2_Config+0x160>)
 800df4c:	4013      	ands	r3, r2
 800df4e:	687a      	ldr	r2, [r7, #4]
 800df50:	69d2      	ldr	r2, [r2, #28]
 800df52:	00d2      	lsls	r2, r2, #3
 800df54:	4920      	ldr	r1, [pc, #128]	@ (800dfd8 <RCCEx_PLL2_Config+0x15c>)
 800df56:	4313      	orrs	r3, r2
 800df58:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800df5a:	4b1f      	ldr	r3, [pc, #124]	@ (800dfd8 <RCCEx_PLL2_Config+0x15c>)
 800df5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df5e:	4a1e      	ldr	r2, [pc, #120]	@ (800dfd8 <RCCEx_PLL2_Config+0x15c>)
 800df60:	f043 0310 	orr.w	r3, r3, #16
 800df64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d106      	bne.n	800df7a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800df6c:	4b1a      	ldr	r3, [pc, #104]	@ (800dfd8 <RCCEx_PLL2_Config+0x15c>)
 800df6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df70:	4a19      	ldr	r2, [pc, #100]	@ (800dfd8 <RCCEx_PLL2_Config+0x15c>)
 800df72:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800df76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800df78:	e00f      	b.n	800df9a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	2b01      	cmp	r3, #1
 800df7e:	d106      	bne.n	800df8e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800df80:	4b15      	ldr	r3, [pc, #84]	@ (800dfd8 <RCCEx_PLL2_Config+0x15c>)
 800df82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df84:	4a14      	ldr	r2, [pc, #80]	@ (800dfd8 <RCCEx_PLL2_Config+0x15c>)
 800df86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800df8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800df8c:	e005      	b.n	800df9a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800df8e:	4b12      	ldr	r3, [pc, #72]	@ (800dfd8 <RCCEx_PLL2_Config+0x15c>)
 800df90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df92:	4a11      	ldr	r2, [pc, #68]	@ (800dfd8 <RCCEx_PLL2_Config+0x15c>)
 800df94:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800df98:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800df9a:	4b0f      	ldr	r3, [pc, #60]	@ (800dfd8 <RCCEx_PLL2_Config+0x15c>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	4a0e      	ldr	r2, [pc, #56]	@ (800dfd8 <RCCEx_PLL2_Config+0x15c>)
 800dfa0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800dfa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dfa6:	f7fa f949 	bl	800823c <HAL_GetTick>
 800dfaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dfac:	e008      	b.n	800dfc0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dfae:	f7fa f945 	bl	800823c <HAL_GetTick>
 800dfb2:	4602      	mov	r2, r0
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	1ad3      	subs	r3, r2, r3
 800dfb8:	2b02      	cmp	r3, #2
 800dfba:	d901      	bls.n	800dfc0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dfbc:	2303      	movs	r3, #3
 800dfbe:	e006      	b.n	800dfce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dfc0:	4b05      	ldr	r3, [pc, #20]	@ (800dfd8 <RCCEx_PLL2_Config+0x15c>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d0f0      	beq.n	800dfae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800dfcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3710      	adds	r7, #16
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}
 800dfd6:	bf00      	nop
 800dfd8:	58024400 	.word	0x58024400
 800dfdc:	ffff0007 	.word	0xffff0007

0800dfe0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b084      	sub	sp, #16
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
 800dfe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dfea:	2300      	movs	r3, #0
 800dfec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dfee:	4b53      	ldr	r3, [pc, #332]	@ (800e13c <RCCEx_PLL3_Config+0x15c>)
 800dff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dff2:	f003 0303 	and.w	r3, r3, #3
 800dff6:	2b03      	cmp	r3, #3
 800dff8:	d101      	bne.n	800dffe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800dffa:	2301      	movs	r3, #1
 800dffc:	e099      	b.n	800e132 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800dffe:	4b4f      	ldr	r3, [pc, #316]	@ (800e13c <RCCEx_PLL3_Config+0x15c>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	4a4e      	ldr	r2, [pc, #312]	@ (800e13c <RCCEx_PLL3_Config+0x15c>)
 800e004:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e008:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e00a:	f7fa f917 	bl	800823c <HAL_GetTick>
 800e00e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e010:	e008      	b.n	800e024 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e012:	f7fa f913 	bl	800823c <HAL_GetTick>
 800e016:	4602      	mov	r2, r0
 800e018:	68bb      	ldr	r3, [r7, #8]
 800e01a:	1ad3      	subs	r3, r2, r3
 800e01c:	2b02      	cmp	r3, #2
 800e01e:	d901      	bls.n	800e024 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e020:	2303      	movs	r3, #3
 800e022:	e086      	b.n	800e132 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e024:	4b45      	ldr	r3, [pc, #276]	@ (800e13c <RCCEx_PLL3_Config+0x15c>)
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d1f0      	bne.n	800e012 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e030:	4b42      	ldr	r3, [pc, #264]	@ (800e13c <RCCEx_PLL3_Config+0x15c>)
 800e032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e034:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	051b      	lsls	r3, r3, #20
 800e03e:	493f      	ldr	r1, [pc, #252]	@ (800e13c <RCCEx_PLL3_Config+0x15c>)
 800e040:	4313      	orrs	r3, r2
 800e042:	628b      	str	r3, [r1, #40]	@ 0x28
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	685b      	ldr	r3, [r3, #4]
 800e048:	3b01      	subs	r3, #1
 800e04a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	689b      	ldr	r3, [r3, #8]
 800e052:	3b01      	subs	r3, #1
 800e054:	025b      	lsls	r3, r3, #9
 800e056:	b29b      	uxth	r3, r3
 800e058:	431a      	orrs	r2, r3
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	68db      	ldr	r3, [r3, #12]
 800e05e:	3b01      	subs	r3, #1
 800e060:	041b      	lsls	r3, r3, #16
 800e062:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e066:	431a      	orrs	r2, r3
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	691b      	ldr	r3, [r3, #16]
 800e06c:	3b01      	subs	r3, #1
 800e06e:	061b      	lsls	r3, r3, #24
 800e070:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e074:	4931      	ldr	r1, [pc, #196]	@ (800e13c <RCCEx_PLL3_Config+0x15c>)
 800e076:	4313      	orrs	r3, r2
 800e078:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e07a:	4b30      	ldr	r3, [pc, #192]	@ (800e13c <RCCEx_PLL3_Config+0x15c>)
 800e07c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e07e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	695b      	ldr	r3, [r3, #20]
 800e086:	492d      	ldr	r1, [pc, #180]	@ (800e13c <RCCEx_PLL3_Config+0x15c>)
 800e088:	4313      	orrs	r3, r2
 800e08a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e08c:	4b2b      	ldr	r3, [pc, #172]	@ (800e13c <RCCEx_PLL3_Config+0x15c>)
 800e08e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e090:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	699b      	ldr	r3, [r3, #24]
 800e098:	4928      	ldr	r1, [pc, #160]	@ (800e13c <RCCEx_PLL3_Config+0x15c>)
 800e09a:	4313      	orrs	r3, r2
 800e09c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e09e:	4b27      	ldr	r3, [pc, #156]	@ (800e13c <RCCEx_PLL3_Config+0x15c>)
 800e0a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0a2:	4a26      	ldr	r2, [pc, #152]	@ (800e13c <RCCEx_PLL3_Config+0x15c>)
 800e0a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e0a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e0aa:	4b24      	ldr	r3, [pc, #144]	@ (800e13c <RCCEx_PLL3_Config+0x15c>)
 800e0ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e0ae:	4b24      	ldr	r3, [pc, #144]	@ (800e140 <RCCEx_PLL3_Config+0x160>)
 800e0b0:	4013      	ands	r3, r2
 800e0b2:	687a      	ldr	r2, [r7, #4]
 800e0b4:	69d2      	ldr	r2, [r2, #28]
 800e0b6:	00d2      	lsls	r2, r2, #3
 800e0b8:	4920      	ldr	r1, [pc, #128]	@ (800e13c <RCCEx_PLL3_Config+0x15c>)
 800e0ba:	4313      	orrs	r3, r2
 800e0bc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e0be:	4b1f      	ldr	r3, [pc, #124]	@ (800e13c <RCCEx_PLL3_Config+0x15c>)
 800e0c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0c2:	4a1e      	ldr	r2, [pc, #120]	@ (800e13c <RCCEx_PLL3_Config+0x15c>)
 800e0c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e0c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d106      	bne.n	800e0de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e0d0:	4b1a      	ldr	r3, [pc, #104]	@ (800e13c <RCCEx_PLL3_Config+0x15c>)
 800e0d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0d4:	4a19      	ldr	r2, [pc, #100]	@ (800e13c <RCCEx_PLL3_Config+0x15c>)
 800e0d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800e0da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e0dc:	e00f      	b.n	800e0fe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	2b01      	cmp	r3, #1
 800e0e2:	d106      	bne.n	800e0f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e0e4:	4b15      	ldr	r3, [pc, #84]	@ (800e13c <RCCEx_PLL3_Config+0x15c>)
 800e0e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0e8:	4a14      	ldr	r2, [pc, #80]	@ (800e13c <RCCEx_PLL3_Config+0x15c>)
 800e0ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e0ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e0f0:	e005      	b.n	800e0fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e0f2:	4b12      	ldr	r3, [pc, #72]	@ (800e13c <RCCEx_PLL3_Config+0x15c>)
 800e0f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0f6:	4a11      	ldr	r2, [pc, #68]	@ (800e13c <RCCEx_PLL3_Config+0x15c>)
 800e0f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e0fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e0fe:	4b0f      	ldr	r3, [pc, #60]	@ (800e13c <RCCEx_PLL3_Config+0x15c>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	4a0e      	ldr	r2, [pc, #56]	@ (800e13c <RCCEx_PLL3_Config+0x15c>)
 800e104:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e108:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e10a:	f7fa f897 	bl	800823c <HAL_GetTick>
 800e10e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e110:	e008      	b.n	800e124 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e112:	f7fa f893 	bl	800823c <HAL_GetTick>
 800e116:	4602      	mov	r2, r0
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	1ad3      	subs	r3, r2, r3
 800e11c:	2b02      	cmp	r3, #2
 800e11e:	d901      	bls.n	800e124 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e120:	2303      	movs	r3, #3
 800e122:	e006      	b.n	800e132 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e124:	4b05      	ldr	r3, [pc, #20]	@ (800e13c <RCCEx_PLL3_Config+0x15c>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d0f0      	beq.n	800e112 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e130:	7bfb      	ldrb	r3, [r7, #15]
}
 800e132:	4618      	mov	r0, r3
 800e134:	3710      	adds	r7, #16
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}
 800e13a:	bf00      	nop
 800e13c:	58024400 	.word	0x58024400
 800e140:	ffff0007 	.word	0xffff0007

0800e144 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b084      	sub	sp, #16
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d101      	bne.n	800e156 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e152:	2301      	movs	r3, #1
 800e154:	e10f      	b.n	800e376 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2200      	movs	r2, #0
 800e15a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	4a87      	ldr	r2, [pc, #540]	@ (800e380 <HAL_SPI_Init+0x23c>)
 800e162:	4293      	cmp	r3, r2
 800e164:	d00f      	beq.n	800e186 <HAL_SPI_Init+0x42>
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	4a86      	ldr	r2, [pc, #536]	@ (800e384 <HAL_SPI_Init+0x240>)
 800e16c:	4293      	cmp	r3, r2
 800e16e:	d00a      	beq.n	800e186 <HAL_SPI_Init+0x42>
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	4a84      	ldr	r2, [pc, #528]	@ (800e388 <HAL_SPI_Init+0x244>)
 800e176:	4293      	cmp	r3, r2
 800e178:	d005      	beq.n	800e186 <HAL_SPI_Init+0x42>
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	68db      	ldr	r3, [r3, #12]
 800e17e:	2b0f      	cmp	r3, #15
 800e180:	d901      	bls.n	800e186 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e182:	2301      	movs	r3, #1
 800e184:	e0f7      	b.n	800e376 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	f001 f870 	bl	800f26c <SPI_GetPacketSize>
 800e18c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	4a7b      	ldr	r2, [pc, #492]	@ (800e380 <HAL_SPI_Init+0x23c>)
 800e194:	4293      	cmp	r3, r2
 800e196:	d00c      	beq.n	800e1b2 <HAL_SPI_Init+0x6e>
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	4a79      	ldr	r2, [pc, #484]	@ (800e384 <HAL_SPI_Init+0x240>)
 800e19e:	4293      	cmp	r3, r2
 800e1a0:	d007      	beq.n	800e1b2 <HAL_SPI_Init+0x6e>
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	4a78      	ldr	r2, [pc, #480]	@ (800e388 <HAL_SPI_Init+0x244>)
 800e1a8:	4293      	cmp	r3, r2
 800e1aa:	d002      	beq.n	800e1b2 <HAL_SPI_Init+0x6e>
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	2b08      	cmp	r3, #8
 800e1b0:	d811      	bhi.n	800e1d6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e1b6:	4a72      	ldr	r2, [pc, #456]	@ (800e380 <HAL_SPI_Init+0x23c>)
 800e1b8:	4293      	cmp	r3, r2
 800e1ba:	d009      	beq.n	800e1d0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	4a70      	ldr	r2, [pc, #448]	@ (800e384 <HAL_SPI_Init+0x240>)
 800e1c2:	4293      	cmp	r3, r2
 800e1c4:	d004      	beq.n	800e1d0 <HAL_SPI_Init+0x8c>
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	4a6f      	ldr	r2, [pc, #444]	@ (800e388 <HAL_SPI_Init+0x244>)
 800e1cc:	4293      	cmp	r3, r2
 800e1ce:	d104      	bne.n	800e1da <HAL_SPI_Init+0x96>
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	2b10      	cmp	r3, #16
 800e1d4:	d901      	bls.n	800e1da <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	e0cd      	b.n	800e376 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e1e0:	b2db      	uxtb	r3, r3
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d106      	bne.n	800e1f4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f7f9 fad6 	bl	80077a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2202      	movs	r2, #2
 800e1f8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	681a      	ldr	r2, [r3, #0]
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	f022 0201 	bic.w	r2, r2, #1
 800e20a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	689b      	ldr	r3, [r3, #8]
 800e212:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800e216:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	699b      	ldr	r3, [r3, #24]
 800e21c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e220:	d119      	bne.n	800e256 <HAL_SPI_Init+0x112>
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	685b      	ldr	r3, [r3, #4]
 800e226:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e22a:	d103      	bne.n	800e234 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e230:	2b00      	cmp	r3, #0
 800e232:	d008      	beq.n	800e246 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d10c      	bne.n	800e256 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e240:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e244:	d107      	bne.n	800e256 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	681a      	ldr	r2, [r3, #0]
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e254:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	685b      	ldr	r3, [r3, #4]
 800e25a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d00f      	beq.n	800e282 <HAL_SPI_Init+0x13e>
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	68db      	ldr	r3, [r3, #12]
 800e266:	2b06      	cmp	r3, #6
 800e268:	d90b      	bls.n	800e282 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	430a      	orrs	r2, r1
 800e27e:	601a      	str	r2, [r3, #0]
 800e280:	e007      	b.n	800e292 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	681a      	ldr	r2, [r3, #0]
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e290:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	69da      	ldr	r2, [r3, #28]
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e29a:	431a      	orrs	r2, r3
 800e29c:	68bb      	ldr	r3, [r7, #8]
 800e29e:	431a      	orrs	r2, r3
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e2a4:	ea42 0103 	orr.w	r1, r2, r3
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	68da      	ldr	r2, [r3, #12]
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	430a      	orrs	r2, r1
 800e2b2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2bc:	431a      	orrs	r2, r3
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2c2:	431a      	orrs	r2, r3
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	699b      	ldr	r3, [r3, #24]
 800e2c8:	431a      	orrs	r2, r3
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	691b      	ldr	r3, [r3, #16]
 800e2ce:	431a      	orrs	r2, r3
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	695b      	ldr	r3, [r3, #20]
 800e2d4:	431a      	orrs	r2, r3
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6a1b      	ldr	r3, [r3, #32]
 800e2da:	431a      	orrs	r2, r3
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	685b      	ldr	r3, [r3, #4]
 800e2e0:	431a      	orrs	r2, r3
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e2e6:	431a      	orrs	r2, r3
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	689b      	ldr	r3, [r3, #8]
 800e2ec:	431a      	orrs	r2, r3
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e2f2:	ea42 0103 	orr.w	r1, r2, r3
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	430a      	orrs	r2, r1
 800e300:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	685b      	ldr	r3, [r3, #4]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d113      	bne.n	800e332 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	689b      	ldr	r3, [r3, #8]
 800e310:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e31c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	689b      	ldr	r3, [r3, #8]
 800e324:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e330:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	f022 0201 	bic.w	r2, r2, #1
 800e340:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	685b      	ldr	r3, [r3, #4]
 800e346:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d00a      	beq.n	800e364 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	68db      	ldr	r3, [r3, #12]
 800e354:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	430a      	orrs	r2, r1
 800e362:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2200      	movs	r2, #0
 800e368:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	2201      	movs	r2, #1
 800e370:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800e374:	2300      	movs	r3, #0
}
 800e376:	4618      	mov	r0, r3
 800e378:	3710      	adds	r7, #16
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}
 800e37e:	bf00      	nop
 800e380:	40013000 	.word	0x40013000
 800e384:	40003800 	.word	0x40003800
 800e388:	40003c00 	.word	0x40003c00

0800e38c <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b084      	sub	sp, #16
 800e390:	af00      	add	r7, sp, #0
 800e392:	60f8      	str	r0, [r7, #12]
 800e394:	60b9      	str	r1, [r7, #8]
 800e396:	4613      	mov	r3, r2
 800e398:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e3a0:	b2db      	uxtb	r3, r3
 800e3a2:	2b01      	cmp	r3, #1
 800e3a4:	d001      	beq.n	800e3aa <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800e3a6:	2302      	movs	r3, #2
 800e3a8:	e126      	b.n	800e5f8 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d002      	beq.n	800e3b6 <HAL_SPI_Transmit_DMA+0x2a>
 800e3b0:	88fb      	ldrh	r3, [r7, #6]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d101      	bne.n	800e3ba <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	e11e      	b.n	800e5f8 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800e3c0:	2b01      	cmp	r3, #1
 800e3c2:	d101      	bne.n	800e3c8 <HAL_SPI_Transmit_DMA+0x3c>
 800e3c4:	2302      	movs	r3, #2
 800e3c6:	e117      	b.n	800e5f8 <HAL_SPI_Transmit_DMA+0x26c>
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	2201      	movs	r2, #1
 800e3cc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	2203      	movs	r2, #3
 800e3d4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	2200      	movs	r2, #0
 800e3dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	68ba      	ldr	r2, [r7, #8]
 800e3e4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	88fa      	ldrh	r2, [r7, #6]
 800e3ea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	88fa      	ldrh	r2, [r7, #6]
 800e3f2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	2200      	movs	r2, #0
 800e400:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	2200      	movs	r2, #0
 800e406:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	2200      	movs	r2, #0
 800e40c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	2200      	movs	r2, #0
 800e414:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	689b      	ldr	r3, [r3, #8]
 800e41c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800e420:	d108      	bne.n	800e434 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	681a      	ldr	r2, [r3, #0]
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e430:	601a      	str	r2, [r3, #0]
 800e432:	e009      	b.n	800e448 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	68db      	ldr	r3, [r3, #12]
 800e43a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800e446:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	68db      	ldr	r3, [r3, #12]
 800e44c:	2b0f      	cmp	r3, #15
 800e44e:	d905      	bls.n	800e45c <HAL_SPI_Transmit_DMA+0xd0>
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e454:	699b      	ldr	r3, [r3, #24]
 800e456:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e45a:	d10f      	bne.n	800e47c <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800e460:	2b07      	cmp	r3, #7
 800e462:	d911      	bls.n	800e488 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e468:	699b      	ldr	r3, [r3, #24]
 800e46a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e46e:	d00b      	beq.n	800e488 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e474:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800e476:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e47a:	d005      	beq.n	800e488 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	2200      	movs	r2, #0
 800e480:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800e484:	2301      	movs	r3, #1
 800e486:	e0b7      	b.n	800e5f8 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	68db      	ldr	r3, [r3, #12]
 800e48c:	2b07      	cmp	r3, #7
 800e48e:	d820      	bhi.n	800e4d2 <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e494:	699b      	ldr	r3, [r3, #24]
 800e496:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e49a:	d109      	bne.n	800e4b0 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e4a2:	b29b      	uxth	r3, r3
 800e4a4:	3301      	adds	r3, #1
 800e4a6:	105b      	asrs	r3, r3, #1
 800e4a8:	b29a      	uxth	r2, r3
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e4b4:	699b      	ldr	r3, [r3, #24]
 800e4b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e4ba:	d11e      	bne.n	800e4fa <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e4c2:	b29b      	uxth	r3, r3
 800e4c4:	3303      	adds	r3, #3
 800e4c6:	109b      	asrs	r3, r3, #2
 800e4c8:	b29a      	uxth	r2, r3
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800e4d0:	e013      	b.n	800e4fa <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	68db      	ldr	r3, [r3, #12]
 800e4d6:	2b0f      	cmp	r3, #15
 800e4d8:	d80f      	bhi.n	800e4fa <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e4de:	699b      	ldr	r3, [r3, #24]
 800e4e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e4e4:	d109      	bne.n	800e4fa <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e4ec:	b29b      	uxth	r3, r3
 800e4ee:	3301      	adds	r3, #1
 800e4f0:	105b      	asrs	r3, r3, #1
 800e4f2:	b29a      	uxth	r2, r3
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e4fe:	4a40      	ldr	r2, [pc, #256]	@ (800e600 <HAL_SPI_Transmit_DMA+0x274>)
 800e500:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e506:	4a3f      	ldr	r2, [pc, #252]	@ (800e604 <HAL_SPI_Transmit_DMA+0x278>)
 800e508:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e50e:	4a3e      	ldr	r2, [pc, #248]	@ (800e608 <HAL_SPI_Transmit_DMA+0x27c>)
 800e510:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e516:	2200      	movs	r2, #0
 800e518:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	689a      	ldr	r2, [r3, #8]
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e528:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e532:	4619      	mov	r1, r3
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	3320      	adds	r3, #32
 800e53a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e542:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800e544:	f7fa fbbc 	bl	8008cc0 <HAL_DMA_Start_IT>
 800e548:	4603      	mov	r3, r0
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d011      	beq.n	800e572 <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e554:	f043 0210 	orr.w	r2, r3, #16
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	2201      	movs	r2, #1
 800e562:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	2200      	movs	r2, #0
 800e56a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800e56e:	2301      	movs	r3, #1
 800e570:	e042      	b.n	800e5f8 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e576:	69db      	ldr	r3, [r3, #28]
 800e578:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e57c:	d108      	bne.n	800e590 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	6859      	ldr	r1, [r3, #4]
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	681a      	ldr	r2, [r3, #0]
 800e588:	4b20      	ldr	r3, [pc, #128]	@ (800e60c <HAL_SPI_Transmit_DMA+0x280>)
 800e58a:	400b      	ands	r3, r1
 800e58c:	6053      	str	r3, [r2, #4]
 800e58e:	e009      	b.n	800e5a4 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	685a      	ldr	r2, [r3, #4]
 800e596:	4b1d      	ldr	r3, [pc, #116]	@ (800e60c <HAL_SPI_Transmit_DMA+0x280>)
 800e598:	4013      	ands	r3, r2
 800e59a:	88f9      	ldrh	r1, [r7, #6]
 800e59c:	68fa      	ldr	r2, [r7, #12]
 800e59e:	6812      	ldr	r2, [r2, #0]
 800e5a0:	430b      	orrs	r3, r1
 800e5a2:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	689a      	ldr	r2, [r3, #8]
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e5b2:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	691a      	ldr	r2, [r3, #16]
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 800e5c2:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	681a      	ldr	r2, [r3, #0]
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	f042 0201 	orr.w	r2, r2, #1
 800e5d2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	685b      	ldr	r3, [r3, #4]
 800e5d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e5dc:	d107      	bne.n	800e5ee <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	681a      	ldr	r2, [r3, #0]
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e5ec:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800e5f6:	2300      	movs	r3, #0
}
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	3710      	adds	r7, #16
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}
 800e600:	0800efb1 	.word	0x0800efb1
 800e604:	0800ef25 	.word	0x0800ef25
 800e608:	0800efe9 	.word	0x0800efe9
 800e60c:	ffff0000 	.word	0xffff0000

0800e610 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b084      	sub	sp, #16
 800e614:	af00      	add	r7, sp, #0
 800e616:	60f8      	str	r0, [r7, #12]
 800e618:	60b9      	str	r1, [r7, #8]
 800e61a:	607a      	str	r2, [r7, #4]
 800e61c:	807b      	strh	r3, [r7, #2]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e624:	b2db      	uxtb	r3, r3
 800e626:	2b01      	cmp	r3, #1
 800e628:	d001      	beq.n	800e62e <HAL_SPI_TransmitReceive_DMA+0x1e>
  {
    return HAL_BUSY;
 800e62a:	2302      	movs	r3, #2
 800e62c:	e18a      	b.n	800e944 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800e62e:	68bb      	ldr	r3, [r7, #8]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d005      	beq.n	800e640 <HAL_SPI_TransmitReceive_DMA+0x30>
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d002      	beq.n	800e640 <HAL_SPI_TransmitReceive_DMA+0x30>
 800e63a:	887b      	ldrh	r3, [r7, #2]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d101      	bne.n	800e644 <HAL_SPI_TransmitReceive_DMA+0x34>
  {
    return HAL_ERROR;
 800e640:	2301      	movs	r3, #1
 800e642:	e17f      	b.n	800e944 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800e64a:	2b01      	cmp	r3, #1
 800e64c:	d101      	bne.n	800e652 <HAL_SPI_TransmitReceive_DMA+0x42>
 800e64e:	2302      	movs	r3, #2
 800e650:	e178      	b.n	800e944 <HAL_SPI_TransmitReceive_DMA+0x334>
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	2201      	movs	r2, #1
 800e656:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	2205      	movs	r2, #5
 800e65e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	2200      	movs	r2, #0
 800e666:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	68ba      	ldr	r2, [r7, #8]
 800e66e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	887a      	ldrh	r2, [r7, #2]
 800e674:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	887a      	ldrh	r2, [r7, #2]
 800e67c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	687a      	ldr	r2, [r7, #4]
 800e684:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	887a      	ldrh	r2, [r7, #2]
 800e68a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	887a      	ldrh	r2, [r7, #2]
 800e692:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	2200      	movs	r2, #0
 800e69a:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	2200      	movs	r2, #0
 800e6a0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	68da      	ldr	r2, [r3, #12]
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800e6b0:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	689a      	ldr	r2, [r3, #8]
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800e6c0:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	68db      	ldr	r3, [r3, #12]
 800e6c6:	2b0f      	cmp	r3, #15
 800e6c8:	d905      	bls.n	800e6d6 <HAL_SPI_TransmitReceive_DMA+0xc6>
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e6ce:	699b      	ldr	r3, [r3, #24]
 800e6d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e6d4:	d10f      	bne.n	800e6f6 <HAL_SPI_TransmitReceive_DMA+0xe6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800e6da:	2b07      	cmp	r3, #7
 800e6dc:	d911      	bls.n	800e702 <HAL_SPI_TransmitReceive_DMA+0xf2>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e6e2:	699b      	ldr	r3, [r3, #24]
 800e6e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e6e8:	d00b      	beq.n	800e702 <HAL_SPI_TransmitReceive_DMA+0xf2>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e6ee:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800e6f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e6f4:	d005      	beq.n	800e702 <HAL_SPI_TransmitReceive_DMA+0xf2>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800e6fe:	2301      	movs	r3, #1
 800e700:	e120      	b.n	800e944 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	68db      	ldr	r3, [r3, #12]
 800e706:	2b07      	cmp	r3, #7
 800e708:	d840      	bhi.n	800e78c <HAL_SPI_TransmitReceive_DMA+0x17c>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e70e:	699b      	ldr	r3, [r3, #24]
 800e710:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e714:	d109      	bne.n	800e72a <HAL_SPI_TransmitReceive_DMA+0x11a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e71c:	b29b      	uxth	r3, r3
 800e71e:	3301      	adds	r3, #1
 800e720:	105b      	asrs	r3, r3, #1
 800e722:	b29a      	uxth	r2, r3
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e72e:	699b      	ldr	r3, [r3, #24]
 800e730:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e734:	d109      	bne.n	800e74a <HAL_SPI_TransmitReceive_DMA+0x13a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e73c:	b29b      	uxth	r3, r3
 800e73e:	3303      	adds	r3, #3
 800e740:	109b      	asrs	r3, r3, #2
 800e742:	b29a      	uxth	r2, r3
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e74e:	699b      	ldr	r3, [r3, #24]
 800e750:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e754:	d109      	bne.n	800e76a <HAL_SPI_TransmitReceive_DMA+0x15a>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e75c:	b29b      	uxth	r3, r3
 800e75e:	3301      	adds	r3, #1
 800e760:	105b      	asrs	r3, r3, #1
 800e762:	b29a      	uxth	r2, r3
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e76e:	699b      	ldr	r3, [r3, #24]
 800e770:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e774:	d12e      	bne.n	800e7d4 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e77c:	b29b      	uxth	r3, r3
 800e77e:	3303      	adds	r3, #3
 800e780:	109b      	asrs	r3, r3, #2
 800e782:	b29a      	uxth	r2, r3
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800e78a:	e023      	b.n	800e7d4 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	68db      	ldr	r3, [r3, #12]
 800e790:	2b0f      	cmp	r3, #15
 800e792:	d81f      	bhi.n	800e7d4 <HAL_SPI_TransmitReceive_DMA+0x1c4>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e798:	699b      	ldr	r3, [r3, #24]
 800e79a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e79e:	d109      	bne.n	800e7b4 <HAL_SPI_TransmitReceive_DMA+0x1a4>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e7a6:	b29b      	uxth	r3, r3
 800e7a8:	3301      	adds	r3, #1
 800e7aa:	105b      	asrs	r3, r3, #1
 800e7ac:	b29a      	uxth	r2, r3
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e7b8:	699b      	ldr	r3, [r3, #24]
 800e7ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e7be:	d109      	bne.n	800e7d4 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e7c6:	b29b      	uxth	r3, r3
 800e7c8:	3301      	adds	r3, #1
 800e7ca:	105b      	asrs	r3, r3, #1
 800e7cc:	b29a      	uxth	r2, r3
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e7d8:	4a5c      	ldr	r2, [pc, #368]	@ (800e94c <HAL_SPI_TransmitReceive_DMA+0x33c>)
 800e7da:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e7e0:	4a5b      	ldr	r2, [pc, #364]	@ (800e950 <HAL_SPI_TransmitReceive_DMA+0x340>)
 800e7e2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e7e8:	4a5a      	ldr	r2, [pc, #360]	@ (800e954 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800e7ea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	3330      	adds	r3, #48	@ 0x30
 800e7fe:	4619      	mov	r1, r3
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e804:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e80c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800e80e:	f7fa fa57 	bl	8008cc0 <HAL_DMA_Start_IT>
 800e812:	4603      	mov	r3, r0
 800e814:	2b00      	cmp	r3, #0
 800e816:	d011      	beq.n	800e83c <HAL_SPI_TransmitReceive_DMA+0x22c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e81e:	f043 0210 	orr.w	r2, r3, #16
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	2201      	movs	r2, #1
 800e82c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	2200      	movs	r2, #0
 800e834:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800e838:	2301      	movs	r3, #1
 800e83a:	e083      	b.n	800e944 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	689a      	ldr	r2, [r3, #8]
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e84a:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e850:	2200      	movs	r2, #0
 800e852:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e858:	2200      	movs	r2, #0
 800e85a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e860:	2200      	movs	r2, #0
 800e862:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e868:	4a3a      	ldr	r2, [pc, #232]	@ (800e954 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800e86a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e874:	4619      	mov	r1, r3
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	3320      	adds	r3, #32
 800e87c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e884:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800e886:	f7fa fa1b 	bl	8008cc0 <HAL_DMA_Start_IT>
 800e88a:	4603      	mov	r3, r0
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d016      	beq.n	800e8be <HAL_SPI_TransmitReceive_DMA+0x2ae>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e894:	4618      	mov	r0, r3
 800e896:	f7fa fc7d 	bl	8009194 <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e8a0:	f043 0210 	orr.w	r2, r3, #16
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	2201      	movs	r2, #1
 800e8ae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800e8ba:	2301      	movs	r3, #1
 800e8bc:	e042      	b.n	800e944 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e8c2:	69db      	ldr	r3, [r3, #28]
 800e8c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e8c8:	d108      	bne.n	800e8dc <HAL_SPI_TransmitReceive_DMA+0x2cc>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	6859      	ldr	r1, [r3, #4]
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	681a      	ldr	r2, [r3, #0]
 800e8d4:	4b20      	ldr	r3, [pc, #128]	@ (800e958 <HAL_SPI_TransmitReceive_DMA+0x348>)
 800e8d6:	400b      	ands	r3, r1
 800e8d8:	6053      	str	r3, [r2, #4]
 800e8da:	e009      	b.n	800e8f0 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	685a      	ldr	r2, [r3, #4]
 800e8e2:	4b1d      	ldr	r3, [pc, #116]	@ (800e958 <HAL_SPI_TransmitReceive_DMA+0x348>)
 800e8e4:	4013      	ands	r3, r2
 800e8e6:	8879      	ldrh	r1, [r7, #2]
 800e8e8:	68fa      	ldr	r2, [r7, #12]
 800e8ea:	6812      	ldr	r2, [r2, #0]
 800e8ec:	430b      	orrs	r3, r1
 800e8ee:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	689a      	ldr	r2, [r3, #8]
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e8fe:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	691a      	ldr	r2, [r3, #16]
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 800e90e:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	681a      	ldr	r2, [r3, #0]
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	f042 0201 	orr.w	r2, r2, #1
 800e91e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	685b      	ldr	r3, [r3, #4]
 800e924:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e928:	d107      	bne.n	800e93a <HAL_SPI_TransmitReceive_DMA+0x32a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	681a      	ldr	r2, [r3, #0]
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e938:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	2200      	movs	r2, #0
 800e93e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800e942:	2300      	movs	r3, #0
}
 800e944:	4618      	mov	r0, r3
 800e946:	3710      	adds	r7, #16
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}
 800e94c:	0800efcd 	.word	0x0800efcd
 800e950:	0800ef6b 	.word	0x0800ef6b
 800e954:	0800efe9 	.word	0x0800efe9
 800e958:	ffff0000 	.word	0xffff0000

0800e95c <HAL_SPI_Abort>:
  *          + Set handle State to READY.
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b084      	sub	sp, #16
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;

  __IO uint32_t count;

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800e96a:	2b01      	cmp	r3, #1
 800e96c:	d101      	bne.n	800e972 <HAL_SPI_Abort+0x16>
 800e96e:	2302      	movs	r3, #2
 800e970:	e0d9      	b.n	800eb26 <HAL_SPI_Abort+0x1ca>
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2201      	movs	r2, #1
 800e976:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set hspi->state to aborting to avoid any interaction */
  hspi->State = HAL_SPI_STATE_ABORT;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	2207      	movs	r2, #7
 800e97e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Initialized local variable  */
  errorcode = HAL_OK;
 800e982:	2300      	movs	r3, #0
 800e984:	73fb      	strb	r3, [r7, #15]
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800e986:	4b6a      	ldr	r3, [pc, #424]	@ (800eb30 <HAL_SPI_Abort+0x1d4>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	4a6a      	ldr	r2, [pc, #424]	@ (800eb34 <HAL_SPI_Abort+0x1d8>)
 800e98c:	fba2 2303 	umull	r2, r3, r2, r3
 800e990:	0a5b      	lsrs	r3, r3, #9
 800e992:	2264      	movs	r2, #100	@ 0x64
 800e994:	fb02 f303 	mul.w	r3, r2, r3
 800e998:	60bb      	str	r3, [r7, #8]

  /* If master communication on going, make sure current frame is done before closing the connection */
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e9a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e9a8:	d15b      	bne.n	800ea62 <HAL_SPI_Abort+0x106>
  {
    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	691a      	ldr	r2, [r3, #16]
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	f022 0208 	bic.w	r2, r2, #8
 800e9b8:	611a      	str	r2, [r3, #16]
    do
    {
      count--;
 800e9ba:	68bb      	ldr	r3, [r7, #8]
 800e9bc:	3b01      	subs	r3, #1
 800e9be:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d108      	bne.n	800e9d8 <HAL_SPI_Abort+0x7c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e9cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800e9d6:	e006      	b.n	800e9e6 <HAL_SPI_Abort+0x8a>
      }
    } while (HAL_IS_BIT_SET(hspi->Instance->IER, SPI_IT_EOT));
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	691b      	ldr	r3, [r3, #16]
 800e9de:	f003 0308 	and.w	r3, r3, #8
 800e9e2:	2b08      	cmp	r3, #8
 800e9e4:	d0e9      	beq.n	800e9ba <HAL_SPI_Abort+0x5e>

    /* Request a Suspend transfer */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSUSP);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	681a      	ldr	r2, [r3, #0]
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e9f4:	601a      	str	r2, [r3, #0]
    do
    {
      count--;
 800e9f6:	68bb      	ldr	r3, [r7, #8]
 800e9f8:	3b01      	subs	r3, #1
 800e9fa:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d108      	bne.n	800ea14 <HAL_SPI_Abort+0xb8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ea08:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800ea12:	e007      	b.n	800ea24 <HAL_SPI_Abort+0xc8>
      }
    } while (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART));
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ea1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ea22:	d0e8      	beq.n	800e9f6 <HAL_SPI_Abort+0x9a>

    /* Clear SUSP flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	699a      	ldr	r2, [r3, #24]
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ea32:	619a      	str	r2, [r3, #24]
    do
    {
      count--;
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	3b01      	subs	r3, #1
 800ea38:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 800ea3a:	68bb      	ldr	r3, [r7, #8]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d108      	bne.n	800ea52 <HAL_SPI_Abort+0xf6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ea46:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800ea50:	e007      	b.n	800ea62 <HAL_SPI_Abort+0x106>
      }
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_SUSP));
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	695b      	ldr	r3, [r3, #20]
 800ea58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ea5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ea60:	d0e8      	beq.n	800ea34 <HAL_SPI_Abort+0xd8>
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN))
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	689b      	ldr	r3, [r3, #8]
 800ea68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ea6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ea70:	d11b      	bne.n	800eaaa <HAL_SPI_Abort+0x14e>
  {
    if (hspi->hdmatx != NULL)
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d017      	beq.n	800eaaa <HAL_SPI_Abort+0x14e>
    {
      /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
      hspi->hdmatx->XferAbortCallback = NULL;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ea7e:	2200      	movs	r2, #0
 800ea80:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ea86:	4618      	mov	r0, r3
 800ea88:	f7fa fb84 	bl	8009194 <HAL_DMA_Abort>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d00b      	beq.n	800eaaa <HAL_SPI_Abort+0x14e>
      {
        if (HAL_DMA_GetError(hspi->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ea96:	4618      	mov	r0, r3
 800ea98:	f7fc f80a 	bl	800aab0 <HAL_DMA_GetError>
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	2b20      	cmp	r3, #32
 800eaa0:	d103      	bne.n	800eaaa <HAL_SPI_Abort+0x14e>
        {
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	2240      	movs	r2, #64	@ 0x40
 800eaa6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	689b      	ldr	r3, [r3, #8]
 800eab0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800eab4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800eab8:	d11b      	bne.n	800eaf2 <HAL_SPI_Abort+0x196>
  {
    if (hspi->hdmarx != NULL)
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d017      	beq.n	800eaf2 <HAL_SPI_Abort+0x196>
    {
      /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
      hspi->hdmarx->XferAbortCallback = NULL;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eac6:	2200      	movs	r2, #0
 800eac8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eace:	4618      	mov	r0, r3
 800ead0:	f7fa fb60 	bl	8009194 <HAL_DMA_Abort>
 800ead4:	4603      	mov	r3, r0
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d00b      	beq.n	800eaf2 <HAL_SPI_Abort+0x196>
      {
        if (HAL_DMA_GetError(hspi->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eade:	4618      	mov	r0, r3
 800eae0:	f7fb ffe6 	bl	800aab0 <HAL_DMA_GetError>
 800eae4:	4603      	mov	r3, r0
 800eae6:	2b20      	cmp	r3, #32
 800eae8:	d103      	bne.n	800eaf2 <HAL_SPI_Abort+0x196>
        {
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	2240      	movs	r2, #64	@ 0x40
 800eaee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
  }

  /* Proceed with abort procedure */
  SPI_AbortTransfer(hspi);
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f000 fab6 	bl	800f064 <SPI_AbortTransfer>

  /* Check error during Abort procedure */
  if (HAL_IS_BIT_SET(hspi->ErrorCode, HAL_SPI_ERROR_ABORT))
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eafe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb02:	2b40      	cmp	r3, #64	@ 0x40
 800eb04:	d102      	bne.n	800eb0c <HAL_SPI_Abort+0x1b0>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 800eb06:	2301      	movs	r3, #1
 800eb08:	73fb      	strb	r3, [r7, #15]
 800eb0a:	e003      	b.n	800eb14 <HAL_SPI_Abort+0x1b8>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2201      	movs	r2, #1
 800eb18:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return errorcode;
 800eb24:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb26:	4618      	mov	r0, r3
 800eb28:	3710      	adds	r7, #16
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bd80      	pop	{r7, pc}
 800eb2e:	bf00      	nop
 800eb30:	24000058 	.word	0x24000058
 800eb34:	057619f1 	.word	0x057619f1

0800eb38 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b08a      	sub	sp, #40	@ 0x28
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	691b      	ldr	r3, [r3, #16]
 800eb46:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	695b      	ldr	r3, [r3, #20]
 800eb4e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800eb50:	6a3a      	ldr	r2, [r7, #32]
 800eb52:	69fb      	ldr	r3, [r7, #28]
 800eb54:	4013      	ands	r3, r2
 800eb56:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	689b      	ldr	r3, [r3, #8]
 800eb5e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800eb60:	2300      	movs	r3, #0
 800eb62:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800eb6a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	3330      	adds	r3, #48	@ 0x30
 800eb72:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800eb74:	69fb      	ldr	r3, [r7, #28]
 800eb76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d010      	beq.n	800eba0 <HAL_SPI_IRQHandler+0x68>
 800eb7e:	6a3b      	ldr	r3, [r7, #32]
 800eb80:	f003 0308 	and.w	r3, r3, #8
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d00b      	beq.n	800eba0 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	699a      	ldr	r2, [r3, #24]
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800eb96:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800eb98:	6878      	ldr	r0, [r7, #4]
 800eb9a:	f000 f9b9 	bl	800ef10 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800eb9e:	e192      	b.n	800eec6 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800eba0:	69bb      	ldr	r3, [r7, #24]
 800eba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d113      	bne.n	800ebd2 <HAL_SPI_IRQHandler+0x9a>
 800ebaa:	69bb      	ldr	r3, [r7, #24]
 800ebac:	f003 0320 	and.w	r3, r3, #32
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d10e      	bne.n	800ebd2 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800ebb4:	69bb      	ldr	r3, [r7, #24]
 800ebb6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d009      	beq.n	800ebd2 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	4798      	blx	r3
    hspi->RxISR(hspi);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ebca:	6878      	ldr	r0, [r7, #4]
 800ebcc:	4798      	blx	r3
    handled = 1UL;
 800ebce:	2301      	movs	r3, #1
 800ebd0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800ebd2:	69bb      	ldr	r3, [r7, #24]
 800ebd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d10f      	bne.n	800ebfc <HAL_SPI_IRQHandler+0xc4>
 800ebdc:	69bb      	ldr	r3, [r7, #24]
 800ebde:	f003 0301 	and.w	r3, r3, #1
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d00a      	beq.n	800ebfc <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800ebe6:	69bb      	ldr	r3, [r7, #24]
 800ebe8:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d105      	bne.n	800ebfc <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ebf4:	6878      	ldr	r0, [r7, #4]
 800ebf6:	4798      	blx	r3
    handled = 1UL;
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ebfc:	69bb      	ldr	r3, [r7, #24]
 800ebfe:	f003 0320 	and.w	r3, r3, #32
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d10f      	bne.n	800ec26 <HAL_SPI_IRQHandler+0xee>
 800ec06:	69bb      	ldr	r3, [r7, #24]
 800ec08:	f003 0302 	and.w	r3, r3, #2
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d00a      	beq.n	800ec26 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800ec10:	69bb      	ldr	r3, [r7, #24]
 800ec12:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d105      	bne.n	800ec26 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec1e:	6878      	ldr	r0, [r7, #4]
 800ec20:	4798      	blx	r3
    handled = 1UL;
 800ec22:	2301      	movs	r3, #1
 800ec24:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800ec26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	f040 8147 	bne.w	800eebc <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800ec2e:	69bb      	ldr	r3, [r7, #24]
 800ec30:	f003 0308 	and.w	r3, r3, #8
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	f000 808b 	beq.w	800ed50 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	699a      	ldr	r2, [r3, #24]
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	f042 0208 	orr.w	r2, r2, #8
 800ec48:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	699a      	ldr	r2, [r3, #24]
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	f042 0210 	orr.w	r2, r2, #16
 800ec58:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	699a      	ldr	r2, [r3, #24]
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ec68:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	691a      	ldr	r2, [r3, #16]
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	f022 0208 	bic.w	r2, r2, #8
 800ec78:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	689b      	ldr	r3, [r3, #8]
 800ec80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d13d      	bne.n	800ed04 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800ec88:	e036      	b.n	800ecf8 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	68db      	ldr	r3, [r3, #12]
 800ec8e:	2b0f      	cmp	r3, #15
 800ec90:	d90b      	bls.n	800ecaa <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681a      	ldr	r2, [r3, #0]
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ec9a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ec9c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eca2:	1d1a      	adds	r2, r3, #4
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	665a      	str	r2, [r3, #100]	@ 0x64
 800eca8:	e01d      	b.n	800ece6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	68db      	ldr	r3, [r3, #12]
 800ecae:	2b07      	cmp	r3, #7
 800ecb0:	d90b      	bls.n	800ecca <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ecb6:	68fa      	ldr	r2, [r7, #12]
 800ecb8:	8812      	ldrh	r2, [r2, #0]
 800ecba:	b292      	uxth	r2, r2
 800ecbc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ecc2:	1c9a      	adds	r2, r3, #2
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	665a      	str	r2, [r3, #100]	@ 0x64
 800ecc8:	e00d      	b.n	800ece6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ecd6:	7812      	ldrb	r2, [r2, #0]
 800ecd8:	b2d2      	uxtb	r2, r2
 800ecda:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ece0:	1c5a      	adds	r2, r3, #1
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ecec:	b29b      	uxth	r3, r3
 800ecee:	3b01      	subs	r3, #1
 800ecf0:	b29a      	uxth	r2, r3
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ecfe:	b29b      	uxth	r3, r3
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d1c2      	bne.n	800ec8a <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	f000 fa11 	bl	800f12c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	2201      	movs	r2, #1
 800ed0e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d003      	beq.n	800ed24 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ed1c:	6878      	ldr	r0, [r7, #4]
 800ed1e:	f7f7 ff31 	bl	8006b84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ed22:	e0d0      	b.n	800eec6 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800ed24:	7cfb      	ldrb	r3, [r7, #19]
 800ed26:	2b05      	cmp	r3, #5
 800ed28:	d103      	bne.n	800ed32 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	f7f7 feb6 	bl	8006a9c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800ed30:	e0c6      	b.n	800eec0 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800ed32:	7cfb      	ldrb	r3, [r7, #19]
 800ed34:	2b04      	cmp	r3, #4
 800ed36:	d103      	bne.n	800ed40 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f000 f8cb 	bl	800eed4 <HAL_SPI_RxCpltCallback>
    return;
 800ed3e:	e0bf      	b.n	800eec0 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800ed40:	7cfb      	ldrb	r3, [r7, #19]
 800ed42:	2b03      	cmp	r3, #3
 800ed44:	f040 80bc 	bne.w	800eec0 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800ed48:	6878      	ldr	r0, [r7, #4]
 800ed4a:	f7f7 fe8d 	bl	8006a68 <HAL_SPI_TxCpltCallback>
    return;
 800ed4e:	e0b7      	b.n	800eec0 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800ed50:	69bb      	ldr	r3, [r7, #24]
 800ed52:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	f000 80b5 	beq.w	800eec6 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800ed5c:	69bb      	ldr	r3, [r7, #24]
 800ed5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d00f      	beq.n	800ed86 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ed6c:	f043 0204 	orr.w	r2, r3, #4
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	699a      	ldr	r2, [r3, #24]
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ed84:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800ed86:	69bb      	ldr	r3, [r7, #24]
 800ed88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d00f      	beq.n	800edb0 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ed96:	f043 0201 	orr.w	r2, r3, #1
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	699a      	ldr	r2, [r3, #24]
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800edae:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800edb0:	69bb      	ldr	r3, [r7, #24]
 800edb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d00f      	beq.n	800edda <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800edc0:	f043 0208 	orr.w	r2, r3, #8
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	699a      	ldr	r2, [r3, #24]
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800edd8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800edda:	69bb      	ldr	r3, [r7, #24]
 800eddc:	f003 0320 	and.w	r3, r3, #32
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d00f      	beq.n	800ee04 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800edea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	699a      	ldr	r2, [r3, #24]
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	f042 0220 	orr.w	r2, r2, #32
 800ee02:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d05a      	beq.n	800eec4 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	681a      	ldr	r2, [r3, #0]
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	f022 0201 	bic.w	r2, r2, #1
 800ee1c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	6919      	ldr	r1, [r3, #16]
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681a      	ldr	r2, [r3, #0]
 800ee28:	4b28      	ldr	r3, [pc, #160]	@ (800eecc <HAL_SPI_IRQHandler+0x394>)
 800ee2a:	400b      	ands	r3, r1
 800ee2c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ee2e:	697b      	ldr	r3, [r7, #20]
 800ee30:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ee34:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ee38:	d138      	bne.n	800eeac <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	689a      	ldr	r2, [r3, #8]
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800ee48:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d013      	beq.n	800ee7a <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee56:	4a1e      	ldr	r2, [pc, #120]	@ (800eed0 <HAL_SPI_IRQHandler+0x398>)
 800ee58:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f7fa fcb6 	bl	80097d0 <HAL_DMA_Abort_IT>
 800ee64:	4603      	mov	r3, r0
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d007      	beq.n	800ee7a <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ee70:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d020      	beq.n	800eec4 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ee86:	4a12      	ldr	r2, [pc, #72]	@ (800eed0 <HAL_SPI_IRQHandler+0x398>)
 800ee88:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f7fa fc9e 	bl	80097d0 <HAL_DMA_Abort_IT>
 800ee94:	4603      	mov	r3, r0
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d014      	beq.n	800eec4 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eea0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800eeaa:	e00b      	b.n	800eec4 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2201      	movs	r2, #1
 800eeb0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800eeb4:	6878      	ldr	r0, [r7, #4]
 800eeb6:	f7f7 fe65 	bl	8006b84 <HAL_SPI_ErrorCallback>
    return;
 800eeba:	e003      	b.n	800eec4 <HAL_SPI_IRQHandler+0x38c>
    return;
 800eebc:	bf00      	nop
 800eebe:	e002      	b.n	800eec6 <HAL_SPI_IRQHandler+0x38e>
    return;
 800eec0:	bf00      	nop
 800eec2:	e000      	b.n	800eec6 <HAL_SPI_IRQHandler+0x38e>
    return;
 800eec4:	bf00      	nop
  }
}
 800eec6:	3728      	adds	r7, #40	@ 0x28
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}
 800eecc:	fffffc94 	.word	0xfffffc94
 800eed0:	0800f02f 	.word	0x0800f02f

0800eed4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800eed4:	b480      	push	{r7}
 800eed6:	b083      	sub	sp, #12
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800eedc:	bf00      	nop
 800eede:	370c      	adds	r7, #12
 800eee0:	46bd      	mov	sp, r7
 800eee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee6:	4770      	bx	lr

0800eee8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800eee8:	b480      	push	{r7}
 800eeea:	b083      	sub	sp, #12
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800eef0:	bf00      	nop
 800eef2:	370c      	adds	r7, #12
 800eef4:	46bd      	mov	sp, r7
 800eef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefa:	4770      	bx	lr

0800eefc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800eefc:	b480      	push	{r7}
 800eefe:	b083      	sub	sp, #12
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800ef04:	bf00      	nop
 800ef06:	370c      	adds	r7, #12
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0e:	4770      	bx	lr

0800ef10 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ef10:	b480      	push	{r7}
 800ef12:	b083      	sub	sp, #12
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800ef18:	bf00      	nop
 800ef1a:	370c      	adds	r7, #12
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef22:	4770      	bx	lr

0800ef24 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b084      	sub	sp, #16
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef30:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ef38:	b2db      	uxtb	r3, r3
 800ef3a:	2b07      	cmp	r3, #7
 800ef3c:	d011      	beq.n	800ef62 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ef42:	69db      	ldr	r3, [r3, #28]
 800ef44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ef48:	d103      	bne.n	800ef52 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 800ef4a:	68f8      	ldr	r0, [r7, #12]
 800ef4c:	f7f7 fd8c 	bl	8006a68 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800ef50:	e007      	b.n	800ef62 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	691a      	ldr	r2, [r3, #16]
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	f042 0208 	orr.w	r2, r2, #8
 800ef60:	611a      	str	r2, [r3, #16]
}
 800ef62:	bf00      	nop
 800ef64:	3710      	adds	r7, #16
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}

0800ef6a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ef6a:	b580      	push	{r7, lr}
 800ef6c:	b084      	sub	sp, #16
 800ef6e:	af00      	add	r7, sp, #0
 800ef70:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef76:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ef7e:	b2db      	uxtb	r3, r3
 800ef80:	2b07      	cmp	r3, #7
 800ef82:	d011      	beq.n	800efa8 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ef88:	69db      	ldr	r3, [r3, #28]
 800ef8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ef8e:	d103      	bne.n	800ef98 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800ef90:	68f8      	ldr	r0, [r7, #12]
 800ef92:	f7f7 fd83 	bl	8006a9c <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800ef96:	e007      	b.n	800efa8 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	691a      	ldr	r2, [r3, #16]
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	f042 0208 	orr.w	r2, r2, #8
 800efa6:	611a      	str	r2, [r3, #16]
}
 800efa8:	bf00      	nop
 800efaa:	3710      	adds	r7, #16
 800efac:	46bd      	mov	sp, r7
 800efae:	bd80      	pop	{r7, pc}

0800efb0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b084      	sub	sp, #16
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800efbc:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800efbe:	68f8      	ldr	r0, [r7, #12]
 800efc0:	f7ff ff92 	bl	800eee8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800efc4:	bf00      	nop
 800efc6:	3710      	adds	r7, #16
 800efc8:	46bd      	mov	sp, r7
 800efca:	bd80      	pop	{r7, pc}

0800efcc <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b084      	sub	sp, #16
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800efd8:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800efda:	68f8      	ldr	r0, [r7, #12]
 800efdc:	f7ff ff8e 	bl	800eefc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800efe0:	bf00      	nop
 800efe2:	3710      	adds	r7, #16
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}

0800efe8 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b084      	sub	sp, #16
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eff4:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800eff6:	6878      	ldr	r0, [r7, #4]
 800eff8:	f7fb fd5a 	bl	800aab0 <HAL_DMA_GetError>
 800effc:	4603      	mov	r3, r0
 800effe:	2b02      	cmp	r3, #2
 800f000:	d011      	beq.n	800f026 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800f002:	68f8      	ldr	r0, [r7, #12]
 800f004:	f000 f892 	bl	800f12c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f00e:	f043 0210 	orr.w	r2, r3, #16
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	2201      	movs	r2, #1
 800f01c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800f020:	68f8      	ldr	r0, [r7, #12]
 800f022:	f7f7 fdaf 	bl	8006b84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800f026:	bf00      	nop
 800f028:	3710      	adds	r7, #16
 800f02a:	46bd      	mov	sp, r7
 800f02c:	bd80      	pop	{r7, pc}

0800f02e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f02e:	b580      	push	{r7, lr}
 800f030:	b084      	sub	sp, #16
 800f032:	af00      	add	r7, sp, #0
 800f034:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f03a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	2200      	movs	r2, #0
 800f040:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	2200      	movs	r2, #0
 800f048:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	2201      	movs	r2, #1
 800f050:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f054:	68f8      	ldr	r0, [r7, #12]
 800f056:	f7f7 fd95 	bl	8006b84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f05a:	bf00      	nop
 800f05c:	3710      	adds	r7, #16
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd80      	pop	{r7, pc}
	...

0800f064 <SPI_AbortTransfer>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTransfer(SPI_HandleTypeDef *hspi)
{
 800f064:	b480      	push	{r7}
 800f066:	b083      	sub	sp, #12
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	681a      	ldr	r2, [r3, #0]
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	f022 0201 	bic.w	r2, r2, #1
 800f07a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	6919      	ldr	r1, [r3, #16]
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681a      	ldr	r2, [r3, #0]
 800f086:	4b28      	ldr	r3, [pc, #160]	@ (800f128 <SPI_AbortTransfer+0xc4>)
 800f088:	400b      	ands	r3, r1
 800f08a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Clear the Status flags in the SR register */
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	699a      	ldr	r2, [r3, #24]
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	f042 0208 	orr.w	r2, r2, #8
 800f09a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	699a      	ldr	r2, [r3, #24]
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	f042 0210 	orr.w	r2, r2, #16
 800f0aa:	619a      	str	r2, [r3, #24]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	689a      	ldr	r2, [r3, #8]
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800f0ba:	609a      	str	r2, [r3, #8]

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	699a      	ldr	r2, [r3, #24]
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f0ca:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	699a      	ldr	r2, [r3, #24]
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	f042 0220 	orr.w	r2, r2, #32
 800f0da:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	699a      	ldr	r2, [r3, #24]
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f0ea:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	699a      	ldr	r2, [r3, #24]
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f0fa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	699a      	ldr	r2, [r3, #24]
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f10a:	619a      	str	r2, [r3, #24]

#if (USE_SPI_CRC != 0U)
  __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
#endif /* USE_SPI_CRC */

  hspi->TxXferCount = (uint16_t)0UL;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2200      	movs	r2, #0
 800f110:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2200      	movs	r2, #0
 800f118:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800f11c:	bf00      	nop
 800f11e:	370c      	adds	r7, #12
 800f120:	46bd      	mov	sp, r7
 800f122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f126:	4770      	bx	lr
 800f128:	fffffc90 	.word	0xfffffc90

0800f12c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f12c:	b480      	push	{r7}
 800f12e:	b085      	sub	sp, #20
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	695b      	ldr	r3, [r3, #20]
 800f13a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	699a      	ldr	r2, [r3, #24]
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	f042 0208 	orr.w	r2, r2, #8
 800f14a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	699a      	ldr	r2, [r3, #24]
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	f042 0210 	orr.w	r2, r2, #16
 800f15a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	681a      	ldr	r2, [r3, #0]
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	f022 0201 	bic.w	r2, r2, #1
 800f16a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	6919      	ldr	r1, [r3, #16]
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681a      	ldr	r2, [r3, #0]
 800f176:	4b3c      	ldr	r3, [pc, #240]	@ (800f268 <SPI_CloseTransfer+0x13c>)
 800f178:	400b      	ands	r3, r1
 800f17a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	689a      	ldr	r2, [r3, #8]
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800f18a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f192:	b2db      	uxtb	r3, r3
 800f194:	2b04      	cmp	r3, #4
 800f196:	d014      	beq.n	800f1c2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	f003 0320 	and.w	r3, r3, #32
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d00f      	beq.n	800f1c2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f1a8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	699a      	ldr	r2, [r3, #24]
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	f042 0220 	orr.w	r2, r2, #32
 800f1c0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f1c8:	b2db      	uxtb	r3, r3
 800f1ca:	2b03      	cmp	r3, #3
 800f1cc:	d014      	beq.n	800f1f8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d00f      	beq.n	800f1f8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f1de:	f043 0204 	orr.w	r2, r3, #4
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	699a      	ldr	r2, [r3, #24]
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f1f6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d00f      	beq.n	800f222 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f208:	f043 0201 	orr.w	r2, r3, #1
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	699a      	ldr	r2, [r3, #24]
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f220:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d00f      	beq.n	800f24c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f232:	f043 0208 	orr.w	r2, r3, #8
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	699a      	ldr	r2, [r3, #24]
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f24a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2200      	movs	r2, #0
 800f250:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	2200      	movs	r2, #0
 800f258:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800f25c:	bf00      	nop
 800f25e:	3714      	adds	r7, #20
 800f260:	46bd      	mov	sp, r7
 800f262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f266:	4770      	bx	lr
 800f268:	fffffc90 	.word	0xfffffc90

0800f26c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800f26c:	b480      	push	{r7}
 800f26e:	b085      	sub	sp, #20
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f278:	095b      	lsrs	r3, r3, #5
 800f27a:	3301      	adds	r3, #1
 800f27c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	68db      	ldr	r3, [r3, #12]
 800f282:	3301      	adds	r3, #1
 800f284:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	3307      	adds	r3, #7
 800f28a:	08db      	lsrs	r3, r3, #3
 800f28c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	68fa      	ldr	r2, [r7, #12]
 800f292:	fb02 f303 	mul.w	r3, r2, r3
}
 800f296:	4618      	mov	r0, r3
 800f298:	3714      	adds	r7, #20
 800f29a:	46bd      	mov	sp, r7
 800f29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a0:	4770      	bx	lr

0800f2a2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f2a2:	b580      	push	{r7, lr}
 800f2a4:	b082      	sub	sp, #8
 800f2a6:	af00      	add	r7, sp, #0
 800f2a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d101      	bne.n	800f2b4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f2b0:	2301      	movs	r3, #1
 800f2b2:	e049      	b.n	800f348 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f2ba:	b2db      	uxtb	r3, r3
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d106      	bne.n	800f2ce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f7f8 fd9d 	bl	8007e08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	2202      	movs	r2, #2
 800f2d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681a      	ldr	r2, [r3, #0]
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	3304      	adds	r3, #4
 800f2de:	4619      	mov	r1, r3
 800f2e0:	4610      	mov	r0, r2
 800f2e2:	f000 fbb7 	bl	800fa54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2201      	movs	r2, #1
 800f2ea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	2201      	movs	r2, #1
 800f2f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	2201      	movs	r2, #1
 800f2fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	2201      	movs	r2, #1
 800f302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	2201      	movs	r2, #1
 800f30a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	2201      	movs	r2, #1
 800f312:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	2201      	movs	r2, #1
 800f31a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	2201      	movs	r2, #1
 800f322:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2201      	movs	r2, #1
 800f32a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	2201      	movs	r2, #1
 800f332:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2201      	movs	r2, #1
 800f33a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	2201      	movs	r2, #1
 800f342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f346:	2300      	movs	r3, #0
}
 800f348:	4618      	mov	r0, r3
 800f34a:	3708      	adds	r7, #8
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bd80      	pop	{r7, pc}

0800f350 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f350:	b480      	push	{r7}
 800f352:	b085      	sub	sp, #20
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f35e:	b2db      	uxtb	r3, r3
 800f360:	2b01      	cmp	r3, #1
 800f362:	d001      	beq.n	800f368 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800f364:	2301      	movs	r3, #1
 800f366:	e056      	b.n	800f416 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2202      	movs	r2, #2
 800f36c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	4a2b      	ldr	r2, [pc, #172]	@ (800f424 <HAL_TIM_Base_Start+0xd4>)
 800f376:	4293      	cmp	r3, r2
 800f378:	d02c      	beq.n	800f3d4 <HAL_TIM_Base_Start+0x84>
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f382:	d027      	beq.n	800f3d4 <HAL_TIM_Base_Start+0x84>
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	4a27      	ldr	r2, [pc, #156]	@ (800f428 <HAL_TIM_Base_Start+0xd8>)
 800f38a:	4293      	cmp	r3, r2
 800f38c:	d022      	beq.n	800f3d4 <HAL_TIM_Base_Start+0x84>
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	4a26      	ldr	r2, [pc, #152]	@ (800f42c <HAL_TIM_Base_Start+0xdc>)
 800f394:	4293      	cmp	r3, r2
 800f396:	d01d      	beq.n	800f3d4 <HAL_TIM_Base_Start+0x84>
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	4a24      	ldr	r2, [pc, #144]	@ (800f430 <HAL_TIM_Base_Start+0xe0>)
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	d018      	beq.n	800f3d4 <HAL_TIM_Base_Start+0x84>
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	4a23      	ldr	r2, [pc, #140]	@ (800f434 <HAL_TIM_Base_Start+0xe4>)
 800f3a8:	4293      	cmp	r3, r2
 800f3aa:	d013      	beq.n	800f3d4 <HAL_TIM_Base_Start+0x84>
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	4a21      	ldr	r2, [pc, #132]	@ (800f438 <HAL_TIM_Base_Start+0xe8>)
 800f3b2:	4293      	cmp	r3, r2
 800f3b4:	d00e      	beq.n	800f3d4 <HAL_TIM_Base_Start+0x84>
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	4a20      	ldr	r2, [pc, #128]	@ (800f43c <HAL_TIM_Base_Start+0xec>)
 800f3bc:	4293      	cmp	r3, r2
 800f3be:	d009      	beq.n	800f3d4 <HAL_TIM_Base_Start+0x84>
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	4a1e      	ldr	r2, [pc, #120]	@ (800f440 <HAL_TIM_Base_Start+0xf0>)
 800f3c6:	4293      	cmp	r3, r2
 800f3c8:	d004      	beq.n	800f3d4 <HAL_TIM_Base_Start+0x84>
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	4a1d      	ldr	r2, [pc, #116]	@ (800f444 <HAL_TIM_Base_Start+0xf4>)
 800f3d0:	4293      	cmp	r3, r2
 800f3d2:	d115      	bne.n	800f400 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	689a      	ldr	r2, [r3, #8]
 800f3da:	4b1b      	ldr	r3, [pc, #108]	@ (800f448 <HAL_TIM_Base_Start+0xf8>)
 800f3dc:	4013      	ands	r3, r2
 800f3de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	2b06      	cmp	r3, #6
 800f3e4:	d015      	beq.n	800f412 <HAL_TIM_Base_Start+0xc2>
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f3ec:	d011      	beq.n	800f412 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	681a      	ldr	r2, [r3, #0]
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	f042 0201 	orr.w	r2, r2, #1
 800f3fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3fe:	e008      	b.n	800f412 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	681a      	ldr	r2, [r3, #0]
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	f042 0201 	orr.w	r2, r2, #1
 800f40e:	601a      	str	r2, [r3, #0]
 800f410:	e000      	b.n	800f414 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f412:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f414:	2300      	movs	r3, #0
}
 800f416:	4618      	mov	r0, r3
 800f418:	3714      	adds	r7, #20
 800f41a:	46bd      	mov	sp, r7
 800f41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f420:	4770      	bx	lr
 800f422:	bf00      	nop
 800f424:	40010000 	.word	0x40010000
 800f428:	40000400 	.word	0x40000400
 800f42c:	40000800 	.word	0x40000800
 800f430:	40000c00 	.word	0x40000c00
 800f434:	40010400 	.word	0x40010400
 800f438:	40001800 	.word	0x40001800
 800f43c:	40014000 	.word	0x40014000
 800f440:	4000e000 	.word	0x4000e000
 800f444:	4000e400 	.word	0x4000e400
 800f448:	00010007 	.word	0x00010007

0800f44c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f44c:	b480      	push	{r7}
 800f44e:	b085      	sub	sp, #20
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f45a:	b2db      	uxtb	r3, r3
 800f45c:	2b01      	cmp	r3, #1
 800f45e:	d001      	beq.n	800f464 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f460:	2301      	movs	r3, #1
 800f462:	e05e      	b.n	800f522 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2202      	movs	r2, #2
 800f468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	68da      	ldr	r2, [r3, #12]
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	f042 0201 	orr.w	r2, r2, #1
 800f47a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	4a2b      	ldr	r2, [pc, #172]	@ (800f530 <HAL_TIM_Base_Start_IT+0xe4>)
 800f482:	4293      	cmp	r3, r2
 800f484:	d02c      	beq.n	800f4e0 <HAL_TIM_Base_Start_IT+0x94>
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f48e:	d027      	beq.n	800f4e0 <HAL_TIM_Base_Start_IT+0x94>
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	4a27      	ldr	r2, [pc, #156]	@ (800f534 <HAL_TIM_Base_Start_IT+0xe8>)
 800f496:	4293      	cmp	r3, r2
 800f498:	d022      	beq.n	800f4e0 <HAL_TIM_Base_Start_IT+0x94>
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	4a26      	ldr	r2, [pc, #152]	@ (800f538 <HAL_TIM_Base_Start_IT+0xec>)
 800f4a0:	4293      	cmp	r3, r2
 800f4a2:	d01d      	beq.n	800f4e0 <HAL_TIM_Base_Start_IT+0x94>
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	4a24      	ldr	r2, [pc, #144]	@ (800f53c <HAL_TIM_Base_Start_IT+0xf0>)
 800f4aa:	4293      	cmp	r3, r2
 800f4ac:	d018      	beq.n	800f4e0 <HAL_TIM_Base_Start_IT+0x94>
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	4a23      	ldr	r2, [pc, #140]	@ (800f540 <HAL_TIM_Base_Start_IT+0xf4>)
 800f4b4:	4293      	cmp	r3, r2
 800f4b6:	d013      	beq.n	800f4e0 <HAL_TIM_Base_Start_IT+0x94>
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	4a21      	ldr	r2, [pc, #132]	@ (800f544 <HAL_TIM_Base_Start_IT+0xf8>)
 800f4be:	4293      	cmp	r3, r2
 800f4c0:	d00e      	beq.n	800f4e0 <HAL_TIM_Base_Start_IT+0x94>
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	4a20      	ldr	r2, [pc, #128]	@ (800f548 <HAL_TIM_Base_Start_IT+0xfc>)
 800f4c8:	4293      	cmp	r3, r2
 800f4ca:	d009      	beq.n	800f4e0 <HAL_TIM_Base_Start_IT+0x94>
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	4a1e      	ldr	r2, [pc, #120]	@ (800f54c <HAL_TIM_Base_Start_IT+0x100>)
 800f4d2:	4293      	cmp	r3, r2
 800f4d4:	d004      	beq.n	800f4e0 <HAL_TIM_Base_Start_IT+0x94>
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	4a1d      	ldr	r2, [pc, #116]	@ (800f550 <HAL_TIM_Base_Start_IT+0x104>)
 800f4dc:	4293      	cmp	r3, r2
 800f4de:	d115      	bne.n	800f50c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	689a      	ldr	r2, [r3, #8]
 800f4e6:	4b1b      	ldr	r3, [pc, #108]	@ (800f554 <HAL_TIM_Base_Start_IT+0x108>)
 800f4e8:	4013      	ands	r3, r2
 800f4ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	2b06      	cmp	r3, #6
 800f4f0:	d015      	beq.n	800f51e <HAL_TIM_Base_Start_IT+0xd2>
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f4f8:	d011      	beq.n	800f51e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	681a      	ldr	r2, [r3, #0]
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	f042 0201 	orr.w	r2, r2, #1
 800f508:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f50a:	e008      	b.n	800f51e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	681a      	ldr	r2, [r3, #0]
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	f042 0201 	orr.w	r2, r2, #1
 800f51a:	601a      	str	r2, [r3, #0]
 800f51c:	e000      	b.n	800f520 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f51e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f520:	2300      	movs	r3, #0
}
 800f522:	4618      	mov	r0, r3
 800f524:	3714      	adds	r7, #20
 800f526:	46bd      	mov	sp, r7
 800f528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52c:	4770      	bx	lr
 800f52e:	bf00      	nop
 800f530:	40010000 	.word	0x40010000
 800f534:	40000400 	.word	0x40000400
 800f538:	40000800 	.word	0x40000800
 800f53c:	40000c00 	.word	0x40000c00
 800f540:	40010400 	.word	0x40010400
 800f544:	40001800 	.word	0x40001800
 800f548:	40014000 	.word	0x40014000
 800f54c:	4000e000 	.word	0x4000e000
 800f550:	4000e400 	.word	0x4000e400
 800f554:	00010007 	.word	0x00010007

0800f558 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800f558:	b480      	push	{r7}
 800f55a:	b083      	sub	sp, #12
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	68da      	ldr	r2, [r3, #12]
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	f022 0201 	bic.w	r2, r2, #1
 800f56e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	6a1a      	ldr	r2, [r3, #32]
 800f576:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f57a:	4013      	ands	r3, r2
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d10f      	bne.n	800f5a0 <HAL_TIM_Base_Stop_IT+0x48>
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	6a1a      	ldr	r2, [r3, #32]
 800f586:	f240 4344 	movw	r3, #1092	@ 0x444
 800f58a:	4013      	ands	r3, r2
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d107      	bne.n	800f5a0 <HAL_TIM_Base_Stop_IT+0x48>
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	681a      	ldr	r2, [r3, #0]
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	f022 0201 	bic.w	r2, r2, #1
 800f59e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2201      	movs	r2, #1
 800f5a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800f5a8:	2300      	movs	r3, #0
}
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	370c      	adds	r7, #12
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b4:	4770      	bx	lr

0800f5b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f5b6:	b580      	push	{r7, lr}
 800f5b8:	b084      	sub	sp, #16
 800f5ba:	af00      	add	r7, sp, #0
 800f5bc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	68db      	ldr	r3, [r3, #12]
 800f5c4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	691b      	ldr	r3, [r3, #16]
 800f5cc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f5ce:	68bb      	ldr	r3, [r7, #8]
 800f5d0:	f003 0302 	and.w	r3, r3, #2
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d020      	beq.n	800f61a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	f003 0302 	and.w	r3, r3, #2
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d01b      	beq.n	800f61a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	f06f 0202 	mvn.w	r2, #2
 800f5ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2201      	movs	r2, #1
 800f5f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	699b      	ldr	r3, [r3, #24]
 800f5f8:	f003 0303 	and.w	r3, r3, #3
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d003      	beq.n	800f608 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f600:	6878      	ldr	r0, [r7, #4]
 800f602:	f000 fa09 	bl	800fa18 <HAL_TIM_IC_CaptureCallback>
 800f606:	e005      	b.n	800f614 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f608:	6878      	ldr	r0, [r7, #4]
 800f60a:	f000 f9fb 	bl	800fa04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f60e:	6878      	ldr	r0, [r7, #4]
 800f610:	f000 fa0c 	bl	800fa2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2200      	movs	r2, #0
 800f618:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f61a:	68bb      	ldr	r3, [r7, #8]
 800f61c:	f003 0304 	and.w	r3, r3, #4
 800f620:	2b00      	cmp	r3, #0
 800f622:	d020      	beq.n	800f666 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	f003 0304 	and.w	r3, r3, #4
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d01b      	beq.n	800f666 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	f06f 0204 	mvn.w	r2, #4
 800f636:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	2202      	movs	r2, #2
 800f63c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	699b      	ldr	r3, [r3, #24]
 800f644:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d003      	beq.n	800f654 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f64c:	6878      	ldr	r0, [r7, #4]
 800f64e:	f000 f9e3 	bl	800fa18 <HAL_TIM_IC_CaptureCallback>
 800f652:	e005      	b.n	800f660 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f654:	6878      	ldr	r0, [r7, #4]
 800f656:	f000 f9d5 	bl	800fa04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f65a:	6878      	ldr	r0, [r7, #4]
 800f65c:	f000 f9e6 	bl	800fa2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	2200      	movs	r2, #0
 800f664:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f666:	68bb      	ldr	r3, [r7, #8]
 800f668:	f003 0308 	and.w	r3, r3, #8
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d020      	beq.n	800f6b2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	f003 0308 	and.w	r3, r3, #8
 800f676:	2b00      	cmp	r3, #0
 800f678:	d01b      	beq.n	800f6b2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	f06f 0208 	mvn.w	r2, #8
 800f682:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	2204      	movs	r2, #4
 800f688:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	69db      	ldr	r3, [r3, #28]
 800f690:	f003 0303 	and.w	r3, r3, #3
 800f694:	2b00      	cmp	r3, #0
 800f696:	d003      	beq.n	800f6a0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f698:	6878      	ldr	r0, [r7, #4]
 800f69a:	f000 f9bd 	bl	800fa18 <HAL_TIM_IC_CaptureCallback>
 800f69e:	e005      	b.n	800f6ac <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f6a0:	6878      	ldr	r0, [r7, #4]
 800f6a2:	f000 f9af 	bl	800fa04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f6a6:	6878      	ldr	r0, [r7, #4]
 800f6a8:	f000 f9c0 	bl	800fa2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f6b2:	68bb      	ldr	r3, [r7, #8]
 800f6b4:	f003 0310 	and.w	r3, r3, #16
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d020      	beq.n	800f6fe <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	f003 0310 	and.w	r3, r3, #16
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d01b      	beq.n	800f6fe <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	f06f 0210 	mvn.w	r2, #16
 800f6ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	2208      	movs	r2, #8
 800f6d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	69db      	ldr	r3, [r3, #28]
 800f6dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d003      	beq.n	800f6ec <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	f000 f997 	bl	800fa18 <HAL_TIM_IC_CaptureCallback>
 800f6ea:	e005      	b.n	800f6f8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f000 f989 	bl	800fa04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f6f2:	6878      	ldr	r0, [r7, #4]
 800f6f4:	f000 f99a 	bl	800fa2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f6fe:	68bb      	ldr	r3, [r7, #8]
 800f700:	f003 0301 	and.w	r3, r3, #1
 800f704:	2b00      	cmp	r3, #0
 800f706:	d00c      	beq.n	800f722 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	f003 0301 	and.w	r3, r3, #1
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d007      	beq.n	800f722 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	f06f 0201 	mvn.w	r2, #1
 800f71a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f71c:	6878      	ldr	r0, [r7, #4]
 800f71e:	f7f7 fb73 	bl	8006e08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f722:	68bb      	ldr	r3, [r7, #8]
 800f724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d104      	bne.n	800f736 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f72c:	68bb      	ldr	r3, [r7, #8]
 800f72e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f732:	2b00      	cmp	r3, #0
 800f734:	d00c      	beq.n	800f750 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d007      	beq.n	800f750 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800f748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f74a:	6878      	ldr	r0, [r7, #4]
 800f74c:	f000 fb78 	bl	800fe40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f750:	68bb      	ldr	r3, [r7, #8]
 800f752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f756:	2b00      	cmp	r3, #0
 800f758:	d00c      	beq.n	800f774 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f760:	2b00      	cmp	r3, #0
 800f762:	d007      	beq.n	800f774 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800f76c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f76e:	6878      	ldr	r0, [r7, #4]
 800f770:	f000 fb70 	bl	800fe54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f774:	68bb      	ldr	r3, [r7, #8]
 800f776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d00c      	beq.n	800f798 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f784:	2b00      	cmp	r3, #0
 800f786:	d007      	beq.n	800f798 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f792:	6878      	ldr	r0, [r7, #4]
 800f794:	f000 f954 	bl	800fa40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	f003 0320 	and.w	r3, r3, #32
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d00c      	beq.n	800f7bc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	f003 0320 	and.w	r3, r3, #32
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d007      	beq.n	800f7bc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	f06f 0220 	mvn.w	r2, #32
 800f7b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f7b6:	6878      	ldr	r0, [r7, #4]
 800f7b8:	f000 fb38 	bl	800fe2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f7bc:	bf00      	nop
 800f7be:	3710      	adds	r7, #16
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd80      	pop	{r7, pc}

0800f7c4 <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800f7c4:	b480      	push	{r7}
 800f7c6:	b083      	sub	sp, #12
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
 800f7cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f7d4:	2b01      	cmp	r3, #1
 800f7d6:	d101      	bne.n	800f7dc <HAL_TIM_GenerateEvent+0x18>
 800f7d8:	2302      	movs	r3, #2
 800f7da:	e014      	b.n	800f806 <HAL_TIM_GenerateEvent+0x42>
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	2201      	movs	r2, #1
 800f7e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	2202      	movs	r2, #2
 800f7e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	683a      	ldr	r2, [r7, #0]
 800f7f2:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2201      	movs	r2, #1
 800f7f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2200      	movs	r2, #0
 800f800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800f804:	2300      	movs	r3, #0
}
 800f806:	4618      	mov	r0, r3
 800f808:	370c      	adds	r7, #12
 800f80a:	46bd      	mov	sp, r7
 800f80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f810:	4770      	bx	lr
	...

0800f814 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f814:	b580      	push	{r7, lr}
 800f816:	b084      	sub	sp, #16
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
 800f81c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f81e:	2300      	movs	r3, #0
 800f820:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f828:	2b01      	cmp	r3, #1
 800f82a:	d101      	bne.n	800f830 <HAL_TIM_ConfigClockSource+0x1c>
 800f82c:	2302      	movs	r3, #2
 800f82e:	e0dc      	b.n	800f9ea <HAL_TIM_ConfigClockSource+0x1d6>
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2201      	movs	r2, #1
 800f834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	2202      	movs	r2, #2
 800f83c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	689b      	ldr	r3, [r3, #8]
 800f846:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f848:	68ba      	ldr	r2, [r7, #8]
 800f84a:	4b6a      	ldr	r3, [pc, #424]	@ (800f9f4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800f84c:	4013      	ands	r3, r2
 800f84e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f850:	68bb      	ldr	r3, [r7, #8]
 800f852:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f856:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	68ba      	ldr	r2, [r7, #8]
 800f85e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f860:	683b      	ldr	r3, [r7, #0]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	4a64      	ldr	r2, [pc, #400]	@ (800f9f8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f866:	4293      	cmp	r3, r2
 800f868:	f000 80a9 	beq.w	800f9be <HAL_TIM_ConfigClockSource+0x1aa>
 800f86c:	4a62      	ldr	r2, [pc, #392]	@ (800f9f8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f86e:	4293      	cmp	r3, r2
 800f870:	f200 80ae 	bhi.w	800f9d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f874:	4a61      	ldr	r2, [pc, #388]	@ (800f9fc <HAL_TIM_ConfigClockSource+0x1e8>)
 800f876:	4293      	cmp	r3, r2
 800f878:	f000 80a1 	beq.w	800f9be <HAL_TIM_ConfigClockSource+0x1aa>
 800f87c:	4a5f      	ldr	r2, [pc, #380]	@ (800f9fc <HAL_TIM_ConfigClockSource+0x1e8>)
 800f87e:	4293      	cmp	r3, r2
 800f880:	f200 80a6 	bhi.w	800f9d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f884:	4a5e      	ldr	r2, [pc, #376]	@ (800fa00 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f886:	4293      	cmp	r3, r2
 800f888:	f000 8099 	beq.w	800f9be <HAL_TIM_ConfigClockSource+0x1aa>
 800f88c:	4a5c      	ldr	r2, [pc, #368]	@ (800fa00 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f88e:	4293      	cmp	r3, r2
 800f890:	f200 809e 	bhi.w	800f9d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f894:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800f898:	f000 8091 	beq.w	800f9be <HAL_TIM_ConfigClockSource+0x1aa>
 800f89c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800f8a0:	f200 8096 	bhi.w	800f9d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f8a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f8a8:	f000 8089 	beq.w	800f9be <HAL_TIM_ConfigClockSource+0x1aa>
 800f8ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f8b0:	f200 808e 	bhi.w	800f9d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f8b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f8b8:	d03e      	beq.n	800f938 <HAL_TIM_ConfigClockSource+0x124>
 800f8ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f8be:	f200 8087 	bhi.w	800f9d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f8c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f8c6:	f000 8086 	beq.w	800f9d6 <HAL_TIM_ConfigClockSource+0x1c2>
 800f8ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f8ce:	d87f      	bhi.n	800f9d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f8d0:	2b70      	cmp	r3, #112	@ 0x70
 800f8d2:	d01a      	beq.n	800f90a <HAL_TIM_ConfigClockSource+0xf6>
 800f8d4:	2b70      	cmp	r3, #112	@ 0x70
 800f8d6:	d87b      	bhi.n	800f9d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f8d8:	2b60      	cmp	r3, #96	@ 0x60
 800f8da:	d050      	beq.n	800f97e <HAL_TIM_ConfigClockSource+0x16a>
 800f8dc:	2b60      	cmp	r3, #96	@ 0x60
 800f8de:	d877      	bhi.n	800f9d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f8e0:	2b50      	cmp	r3, #80	@ 0x50
 800f8e2:	d03c      	beq.n	800f95e <HAL_TIM_ConfigClockSource+0x14a>
 800f8e4:	2b50      	cmp	r3, #80	@ 0x50
 800f8e6:	d873      	bhi.n	800f9d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f8e8:	2b40      	cmp	r3, #64	@ 0x40
 800f8ea:	d058      	beq.n	800f99e <HAL_TIM_ConfigClockSource+0x18a>
 800f8ec:	2b40      	cmp	r3, #64	@ 0x40
 800f8ee:	d86f      	bhi.n	800f9d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f8f0:	2b30      	cmp	r3, #48	@ 0x30
 800f8f2:	d064      	beq.n	800f9be <HAL_TIM_ConfigClockSource+0x1aa>
 800f8f4:	2b30      	cmp	r3, #48	@ 0x30
 800f8f6:	d86b      	bhi.n	800f9d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f8f8:	2b20      	cmp	r3, #32
 800f8fa:	d060      	beq.n	800f9be <HAL_TIM_ConfigClockSource+0x1aa>
 800f8fc:	2b20      	cmp	r3, #32
 800f8fe:	d867      	bhi.n	800f9d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f900:	2b00      	cmp	r3, #0
 800f902:	d05c      	beq.n	800f9be <HAL_TIM_ConfigClockSource+0x1aa>
 800f904:	2b10      	cmp	r3, #16
 800f906:	d05a      	beq.n	800f9be <HAL_TIM_ConfigClockSource+0x1aa>
 800f908:	e062      	b.n	800f9d0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f91a:	f000 f9cb 	bl	800fcb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	689b      	ldr	r3, [r3, #8]
 800f924:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f926:	68bb      	ldr	r3, [r7, #8]
 800f928:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f92c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	68ba      	ldr	r2, [r7, #8]
 800f934:	609a      	str	r2, [r3, #8]
      break;
 800f936:	e04f      	b.n	800f9d8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f93c:	683b      	ldr	r3, [r7, #0]
 800f93e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f940:	683b      	ldr	r3, [r7, #0]
 800f942:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f948:	f000 f9b4 	bl	800fcb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	689a      	ldr	r2, [r3, #8]
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f95a:	609a      	str	r2, [r3, #8]
      break;
 800f95c:	e03c      	b.n	800f9d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f962:	683b      	ldr	r3, [r7, #0]
 800f964:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f96a:	461a      	mov	r2, r3
 800f96c:	f000 f924 	bl	800fbb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	2150      	movs	r1, #80	@ 0x50
 800f976:	4618      	mov	r0, r3
 800f978:	f000 f97e 	bl	800fc78 <TIM_ITRx_SetConfig>
      break;
 800f97c:	e02c      	b.n	800f9d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f982:	683b      	ldr	r3, [r7, #0]
 800f984:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f986:	683b      	ldr	r3, [r7, #0]
 800f988:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f98a:	461a      	mov	r2, r3
 800f98c:	f000 f943 	bl	800fc16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	2160      	movs	r1, #96	@ 0x60
 800f996:	4618      	mov	r0, r3
 800f998:	f000 f96e 	bl	800fc78 <TIM_ITRx_SetConfig>
      break;
 800f99c:	e01c      	b.n	800f9d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f9aa:	461a      	mov	r2, r3
 800f9ac:	f000 f904 	bl	800fbb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	2140      	movs	r1, #64	@ 0x40
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f000 f95e 	bl	800fc78 <TIM_ITRx_SetConfig>
      break;
 800f9bc:	e00c      	b.n	800f9d8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	681a      	ldr	r2, [r3, #0]
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	4619      	mov	r1, r3
 800f9c8:	4610      	mov	r0, r2
 800f9ca:	f000 f955 	bl	800fc78 <TIM_ITRx_SetConfig>
      break;
 800f9ce:	e003      	b.n	800f9d8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f9d0:	2301      	movs	r3, #1
 800f9d2:	73fb      	strb	r3, [r7, #15]
      break;
 800f9d4:	e000      	b.n	800f9d8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f9d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	2201      	movs	r2, #1
 800f9dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f9e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	3710      	adds	r7, #16
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	bd80      	pop	{r7, pc}
 800f9f2:	bf00      	nop
 800f9f4:	ffceff88 	.word	0xffceff88
 800f9f8:	00100040 	.word	0x00100040
 800f9fc:	00100030 	.word	0x00100030
 800fa00:	00100020 	.word	0x00100020

0800fa04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fa04:	b480      	push	{r7}
 800fa06:	b083      	sub	sp, #12
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fa0c:	bf00      	nop
 800fa0e:	370c      	adds	r7, #12
 800fa10:	46bd      	mov	sp, r7
 800fa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa16:	4770      	bx	lr

0800fa18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fa18:	b480      	push	{r7}
 800fa1a:	b083      	sub	sp, #12
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fa20:	bf00      	nop
 800fa22:	370c      	adds	r7, #12
 800fa24:	46bd      	mov	sp, r7
 800fa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2a:	4770      	bx	lr

0800fa2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fa2c:	b480      	push	{r7}
 800fa2e:	b083      	sub	sp, #12
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fa34:	bf00      	nop
 800fa36:	370c      	adds	r7, #12
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3e:	4770      	bx	lr

0800fa40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fa40:	b480      	push	{r7}
 800fa42:	b083      	sub	sp, #12
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fa48:	bf00      	nop
 800fa4a:	370c      	adds	r7, #12
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa52:	4770      	bx	lr

0800fa54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fa54:	b480      	push	{r7}
 800fa56:	b085      	sub	sp, #20
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
 800fa5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	4a4a      	ldr	r2, [pc, #296]	@ (800fb90 <TIM_Base_SetConfig+0x13c>)
 800fa68:	4293      	cmp	r3, r2
 800fa6a:	d013      	beq.n	800fa94 <TIM_Base_SetConfig+0x40>
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fa72:	d00f      	beq.n	800fa94 <TIM_Base_SetConfig+0x40>
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	4a47      	ldr	r2, [pc, #284]	@ (800fb94 <TIM_Base_SetConfig+0x140>)
 800fa78:	4293      	cmp	r3, r2
 800fa7a:	d00b      	beq.n	800fa94 <TIM_Base_SetConfig+0x40>
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	4a46      	ldr	r2, [pc, #280]	@ (800fb98 <TIM_Base_SetConfig+0x144>)
 800fa80:	4293      	cmp	r3, r2
 800fa82:	d007      	beq.n	800fa94 <TIM_Base_SetConfig+0x40>
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	4a45      	ldr	r2, [pc, #276]	@ (800fb9c <TIM_Base_SetConfig+0x148>)
 800fa88:	4293      	cmp	r3, r2
 800fa8a:	d003      	beq.n	800fa94 <TIM_Base_SetConfig+0x40>
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	4a44      	ldr	r2, [pc, #272]	@ (800fba0 <TIM_Base_SetConfig+0x14c>)
 800fa90:	4293      	cmp	r3, r2
 800fa92:	d108      	bne.n	800faa6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fa9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fa9c:	683b      	ldr	r3, [r7, #0]
 800fa9e:	685b      	ldr	r3, [r3, #4]
 800faa0:	68fa      	ldr	r2, [r7, #12]
 800faa2:	4313      	orrs	r3, r2
 800faa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	4a39      	ldr	r2, [pc, #228]	@ (800fb90 <TIM_Base_SetConfig+0x13c>)
 800faaa:	4293      	cmp	r3, r2
 800faac:	d027      	beq.n	800fafe <TIM_Base_SetConfig+0xaa>
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fab4:	d023      	beq.n	800fafe <TIM_Base_SetConfig+0xaa>
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	4a36      	ldr	r2, [pc, #216]	@ (800fb94 <TIM_Base_SetConfig+0x140>)
 800faba:	4293      	cmp	r3, r2
 800fabc:	d01f      	beq.n	800fafe <TIM_Base_SetConfig+0xaa>
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	4a35      	ldr	r2, [pc, #212]	@ (800fb98 <TIM_Base_SetConfig+0x144>)
 800fac2:	4293      	cmp	r3, r2
 800fac4:	d01b      	beq.n	800fafe <TIM_Base_SetConfig+0xaa>
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	4a34      	ldr	r2, [pc, #208]	@ (800fb9c <TIM_Base_SetConfig+0x148>)
 800faca:	4293      	cmp	r3, r2
 800facc:	d017      	beq.n	800fafe <TIM_Base_SetConfig+0xaa>
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	4a33      	ldr	r2, [pc, #204]	@ (800fba0 <TIM_Base_SetConfig+0x14c>)
 800fad2:	4293      	cmp	r3, r2
 800fad4:	d013      	beq.n	800fafe <TIM_Base_SetConfig+0xaa>
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	4a32      	ldr	r2, [pc, #200]	@ (800fba4 <TIM_Base_SetConfig+0x150>)
 800fada:	4293      	cmp	r3, r2
 800fadc:	d00f      	beq.n	800fafe <TIM_Base_SetConfig+0xaa>
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	4a31      	ldr	r2, [pc, #196]	@ (800fba8 <TIM_Base_SetConfig+0x154>)
 800fae2:	4293      	cmp	r3, r2
 800fae4:	d00b      	beq.n	800fafe <TIM_Base_SetConfig+0xaa>
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	4a30      	ldr	r2, [pc, #192]	@ (800fbac <TIM_Base_SetConfig+0x158>)
 800faea:	4293      	cmp	r3, r2
 800faec:	d007      	beq.n	800fafe <TIM_Base_SetConfig+0xaa>
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	4a2f      	ldr	r2, [pc, #188]	@ (800fbb0 <TIM_Base_SetConfig+0x15c>)
 800faf2:	4293      	cmp	r3, r2
 800faf4:	d003      	beq.n	800fafe <TIM_Base_SetConfig+0xaa>
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	4a2e      	ldr	r2, [pc, #184]	@ (800fbb4 <TIM_Base_SetConfig+0x160>)
 800fafa:	4293      	cmp	r3, r2
 800fafc:	d108      	bne.n	800fb10 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fb04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	68db      	ldr	r3, [r3, #12]
 800fb0a:	68fa      	ldr	r2, [r7, #12]
 800fb0c:	4313      	orrs	r3, r2
 800fb0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	695b      	ldr	r3, [r3, #20]
 800fb1a:	4313      	orrs	r3, r2
 800fb1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	68fa      	ldr	r2, [r7, #12]
 800fb22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	689a      	ldr	r2, [r3, #8]
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	681a      	ldr	r2, [r3, #0]
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	4a16      	ldr	r2, [pc, #88]	@ (800fb90 <TIM_Base_SetConfig+0x13c>)
 800fb38:	4293      	cmp	r3, r2
 800fb3a:	d00f      	beq.n	800fb5c <TIM_Base_SetConfig+0x108>
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	4a18      	ldr	r2, [pc, #96]	@ (800fba0 <TIM_Base_SetConfig+0x14c>)
 800fb40:	4293      	cmp	r3, r2
 800fb42:	d00b      	beq.n	800fb5c <TIM_Base_SetConfig+0x108>
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	4a17      	ldr	r2, [pc, #92]	@ (800fba4 <TIM_Base_SetConfig+0x150>)
 800fb48:	4293      	cmp	r3, r2
 800fb4a:	d007      	beq.n	800fb5c <TIM_Base_SetConfig+0x108>
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	4a16      	ldr	r2, [pc, #88]	@ (800fba8 <TIM_Base_SetConfig+0x154>)
 800fb50:	4293      	cmp	r3, r2
 800fb52:	d003      	beq.n	800fb5c <TIM_Base_SetConfig+0x108>
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	4a15      	ldr	r2, [pc, #84]	@ (800fbac <TIM_Base_SetConfig+0x158>)
 800fb58:	4293      	cmp	r3, r2
 800fb5a:	d103      	bne.n	800fb64 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fb5c:	683b      	ldr	r3, [r7, #0]
 800fb5e:	691a      	ldr	r2, [r3, #16]
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2201      	movs	r2, #1
 800fb68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	691b      	ldr	r3, [r3, #16]
 800fb6e:	f003 0301 	and.w	r3, r3, #1
 800fb72:	2b01      	cmp	r3, #1
 800fb74:	d105      	bne.n	800fb82 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	691b      	ldr	r3, [r3, #16]
 800fb7a:	f023 0201 	bic.w	r2, r3, #1
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	611a      	str	r2, [r3, #16]
  }
}
 800fb82:	bf00      	nop
 800fb84:	3714      	adds	r7, #20
 800fb86:	46bd      	mov	sp, r7
 800fb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8c:	4770      	bx	lr
 800fb8e:	bf00      	nop
 800fb90:	40010000 	.word	0x40010000
 800fb94:	40000400 	.word	0x40000400
 800fb98:	40000800 	.word	0x40000800
 800fb9c:	40000c00 	.word	0x40000c00
 800fba0:	40010400 	.word	0x40010400
 800fba4:	40014000 	.word	0x40014000
 800fba8:	40014400 	.word	0x40014400
 800fbac:	40014800 	.word	0x40014800
 800fbb0:	4000e000 	.word	0x4000e000
 800fbb4:	4000e400 	.word	0x4000e400

0800fbb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fbb8:	b480      	push	{r7}
 800fbba:	b087      	sub	sp, #28
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	60f8      	str	r0, [r7, #12]
 800fbc0:	60b9      	str	r1, [r7, #8]
 800fbc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	6a1b      	ldr	r3, [r3, #32]
 800fbc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	6a1b      	ldr	r3, [r3, #32]
 800fbce:	f023 0201 	bic.w	r2, r3, #1
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	699b      	ldr	r3, [r3, #24]
 800fbda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fbdc:	693b      	ldr	r3, [r7, #16]
 800fbde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800fbe2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	011b      	lsls	r3, r3, #4
 800fbe8:	693a      	ldr	r2, [r7, #16]
 800fbea:	4313      	orrs	r3, r2
 800fbec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fbee:	697b      	ldr	r3, [r7, #20]
 800fbf0:	f023 030a 	bic.w	r3, r3, #10
 800fbf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fbf6:	697a      	ldr	r2, [r7, #20]
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	4313      	orrs	r3, r2
 800fbfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	693a      	ldr	r2, [r7, #16]
 800fc02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	697a      	ldr	r2, [r7, #20]
 800fc08:	621a      	str	r2, [r3, #32]
}
 800fc0a:	bf00      	nop
 800fc0c:	371c      	adds	r7, #28
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc14:	4770      	bx	lr

0800fc16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fc16:	b480      	push	{r7}
 800fc18:	b087      	sub	sp, #28
 800fc1a:	af00      	add	r7, sp, #0
 800fc1c:	60f8      	str	r0, [r7, #12]
 800fc1e:	60b9      	str	r1, [r7, #8]
 800fc20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	6a1b      	ldr	r3, [r3, #32]
 800fc26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	6a1b      	ldr	r3, [r3, #32]
 800fc2c:	f023 0210 	bic.w	r2, r3, #16
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	699b      	ldr	r3, [r3, #24]
 800fc38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fc3a:	693b      	ldr	r3, [r7, #16]
 800fc3c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800fc40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	031b      	lsls	r3, r3, #12
 800fc46:	693a      	ldr	r2, [r7, #16]
 800fc48:	4313      	orrs	r3, r2
 800fc4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fc4c:	697b      	ldr	r3, [r7, #20]
 800fc4e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800fc52:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fc54:	68bb      	ldr	r3, [r7, #8]
 800fc56:	011b      	lsls	r3, r3, #4
 800fc58:	697a      	ldr	r2, [r7, #20]
 800fc5a:	4313      	orrs	r3, r2
 800fc5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	693a      	ldr	r2, [r7, #16]
 800fc62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	697a      	ldr	r2, [r7, #20]
 800fc68:	621a      	str	r2, [r3, #32]
}
 800fc6a:	bf00      	nop
 800fc6c:	371c      	adds	r7, #28
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc74:	4770      	bx	lr
	...

0800fc78 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fc78:	b480      	push	{r7}
 800fc7a:	b085      	sub	sp, #20
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
 800fc80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	689b      	ldr	r3, [r3, #8]
 800fc86:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fc88:	68fa      	ldr	r2, [r7, #12]
 800fc8a:	4b09      	ldr	r3, [pc, #36]	@ (800fcb0 <TIM_ITRx_SetConfig+0x38>)
 800fc8c:	4013      	ands	r3, r2
 800fc8e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fc90:	683a      	ldr	r2, [r7, #0]
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	4313      	orrs	r3, r2
 800fc96:	f043 0307 	orr.w	r3, r3, #7
 800fc9a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	68fa      	ldr	r2, [r7, #12]
 800fca0:	609a      	str	r2, [r3, #8]
}
 800fca2:	bf00      	nop
 800fca4:	3714      	adds	r7, #20
 800fca6:	46bd      	mov	sp, r7
 800fca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcac:	4770      	bx	lr
 800fcae:	bf00      	nop
 800fcb0:	ffcfff8f 	.word	0xffcfff8f

0800fcb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fcb4:	b480      	push	{r7}
 800fcb6:	b087      	sub	sp, #28
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	60f8      	str	r0, [r7, #12]
 800fcbc:	60b9      	str	r1, [r7, #8]
 800fcbe:	607a      	str	r2, [r7, #4]
 800fcc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	689b      	ldr	r3, [r3, #8]
 800fcc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fcc8:	697b      	ldr	r3, [r7, #20]
 800fcca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fcce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fcd0:	683b      	ldr	r3, [r7, #0]
 800fcd2:	021a      	lsls	r2, r3, #8
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	431a      	orrs	r2, r3
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	4313      	orrs	r3, r2
 800fcdc:	697a      	ldr	r2, [r7, #20]
 800fcde:	4313      	orrs	r3, r2
 800fce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	697a      	ldr	r2, [r7, #20]
 800fce6:	609a      	str	r2, [r3, #8]
}
 800fce8:	bf00      	nop
 800fcea:	371c      	adds	r7, #28
 800fcec:	46bd      	mov	sp, r7
 800fcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf2:	4770      	bx	lr

0800fcf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fcf4:	b480      	push	{r7}
 800fcf6:	b085      	sub	sp, #20
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
 800fcfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fd04:	2b01      	cmp	r3, #1
 800fd06:	d101      	bne.n	800fd0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fd08:	2302      	movs	r3, #2
 800fd0a:	e077      	b.n	800fdfc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2201      	movs	r2, #1
 800fd10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	2202      	movs	r2, #2
 800fd18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	685b      	ldr	r3, [r3, #4]
 800fd22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	689b      	ldr	r3, [r3, #8]
 800fd2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	4a35      	ldr	r2, [pc, #212]	@ (800fe08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fd32:	4293      	cmp	r3, r2
 800fd34:	d004      	beq.n	800fd40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	4a34      	ldr	r2, [pc, #208]	@ (800fe0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fd3c:	4293      	cmp	r3, r2
 800fd3e:	d108      	bne.n	800fd52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800fd46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	685b      	ldr	r3, [r3, #4]
 800fd4c:	68fa      	ldr	r2, [r7, #12]
 800fd4e:	4313      	orrs	r3, r2
 800fd50:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fd58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fd5a:	683b      	ldr	r3, [r7, #0]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	68fa      	ldr	r2, [r7, #12]
 800fd60:	4313      	orrs	r3, r2
 800fd62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	68fa      	ldr	r2, [r7, #12]
 800fd6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	4a25      	ldr	r2, [pc, #148]	@ (800fe08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fd72:	4293      	cmp	r3, r2
 800fd74:	d02c      	beq.n	800fdd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fd7e:	d027      	beq.n	800fdd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	4a22      	ldr	r2, [pc, #136]	@ (800fe10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800fd86:	4293      	cmp	r3, r2
 800fd88:	d022      	beq.n	800fdd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	4a21      	ldr	r2, [pc, #132]	@ (800fe14 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800fd90:	4293      	cmp	r3, r2
 800fd92:	d01d      	beq.n	800fdd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	4a1f      	ldr	r2, [pc, #124]	@ (800fe18 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800fd9a:	4293      	cmp	r3, r2
 800fd9c:	d018      	beq.n	800fdd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	4a1a      	ldr	r2, [pc, #104]	@ (800fe0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fda4:	4293      	cmp	r3, r2
 800fda6:	d013      	beq.n	800fdd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	4a1b      	ldr	r2, [pc, #108]	@ (800fe1c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800fdae:	4293      	cmp	r3, r2
 800fdb0:	d00e      	beq.n	800fdd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	4a1a      	ldr	r2, [pc, #104]	@ (800fe20 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800fdb8:	4293      	cmp	r3, r2
 800fdba:	d009      	beq.n	800fdd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	4a18      	ldr	r2, [pc, #96]	@ (800fe24 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800fdc2:	4293      	cmp	r3, r2
 800fdc4:	d004      	beq.n	800fdd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	4a17      	ldr	r2, [pc, #92]	@ (800fe28 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800fdcc:	4293      	cmp	r3, r2
 800fdce:	d10c      	bne.n	800fdea <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fdd0:	68bb      	ldr	r3, [r7, #8]
 800fdd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fdd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fdd8:	683b      	ldr	r3, [r7, #0]
 800fdda:	689b      	ldr	r3, [r3, #8]
 800fddc:	68ba      	ldr	r2, [r7, #8]
 800fdde:	4313      	orrs	r3, r2
 800fde0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	68ba      	ldr	r2, [r7, #8]
 800fde8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	2201      	movs	r2, #1
 800fdee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fdfa:	2300      	movs	r3, #0
}
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	3714      	adds	r7, #20
 800fe00:	46bd      	mov	sp, r7
 800fe02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe06:	4770      	bx	lr
 800fe08:	40010000 	.word	0x40010000
 800fe0c:	40010400 	.word	0x40010400
 800fe10:	40000400 	.word	0x40000400
 800fe14:	40000800 	.word	0x40000800
 800fe18:	40000c00 	.word	0x40000c00
 800fe1c:	40001800 	.word	0x40001800
 800fe20:	40014000 	.word	0x40014000
 800fe24:	4000e000 	.word	0x4000e000
 800fe28:	4000e400 	.word	0x4000e400

0800fe2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fe2c:	b480      	push	{r7}
 800fe2e:	b083      	sub	sp, #12
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fe34:	bf00      	nop
 800fe36:	370c      	adds	r7, #12
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3e:	4770      	bx	lr

0800fe40 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fe40:	b480      	push	{r7}
 800fe42:	b083      	sub	sp, #12
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fe48:	bf00      	nop
 800fe4a:	370c      	adds	r7, #12
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe52:	4770      	bx	lr

0800fe54 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fe54:	b480      	push	{r7}
 800fe56:	b083      	sub	sp, #12
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fe5c:	bf00      	nop
 800fe5e:	370c      	adds	r7, #12
 800fe60:	46bd      	mov	sp, r7
 800fe62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe66:	4770      	bx	lr

0800fe68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b082      	sub	sp, #8
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d101      	bne.n	800fe7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fe76:	2301      	movs	r3, #1
 800fe78:	e042      	b.n	800ff00 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d106      	bne.n	800fe92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2200      	movs	r2, #0
 800fe88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fe8c:	6878      	ldr	r0, [r7, #4]
 800fe8e:	f7f8 f84f 	bl	8007f30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	2224      	movs	r2, #36	@ 0x24
 800fe96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	681a      	ldr	r2, [r3, #0]
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	f022 0201 	bic.w	r2, r2, #1
 800fea8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d002      	beq.n	800feb8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800feb2:	6878      	ldr	r0, [r7, #4]
 800feb4:	f001 fbf0 	bl	8011698 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800feb8:	6878      	ldr	r0, [r7, #4]
 800feba:	f000 fd81 	bl	80109c0 <UART_SetConfig>
 800febe:	4603      	mov	r3, r0
 800fec0:	2b01      	cmp	r3, #1
 800fec2:	d101      	bne.n	800fec8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800fec4:	2301      	movs	r3, #1
 800fec6:	e01b      	b.n	800ff00 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	685a      	ldr	r2, [r3, #4]
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800fed6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	689a      	ldr	r2, [r3, #8]
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800fee6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	681a      	ldr	r2, [r3, #0]
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	f042 0201 	orr.w	r2, r2, #1
 800fef6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fef8:	6878      	ldr	r0, [r7, #4]
 800fefa:	f001 fc6f 	bl	80117dc <UART_CheckIdleState>
 800fefe:	4603      	mov	r3, r0
}
 800ff00:	4618      	mov	r0, r3
 800ff02:	3708      	adds	r7, #8
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bd80      	pop	{r7, pc}

0800ff08 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b08a      	sub	sp, #40	@ 0x28
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	60f8      	str	r0, [r7, #12]
 800ff10:	60b9      	str	r1, [r7, #8]
 800ff12:	4613      	mov	r3, r2
 800ff14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ff1c:	2b20      	cmp	r3, #32
 800ff1e:	d167      	bne.n	800fff0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ff20:	68bb      	ldr	r3, [r7, #8]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d002      	beq.n	800ff2c <HAL_UART_Transmit_DMA+0x24>
 800ff26:	88fb      	ldrh	r3, [r7, #6]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d101      	bne.n	800ff30 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ff2c:	2301      	movs	r3, #1
 800ff2e:	e060      	b.n	800fff2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	68ba      	ldr	r2, [r7, #8]
 800ff34:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	88fa      	ldrh	r2, [r7, #6]
 800ff3a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	88fa      	ldrh	r2, [r7, #6]
 800ff42:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	2200      	movs	r2, #0
 800ff4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	2221      	movs	r2, #33	@ 0x21
 800ff52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d028      	beq.n	800ffb0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff62:	4a26      	ldr	r2, [pc, #152]	@ (800fffc <HAL_UART_Transmit_DMA+0xf4>)
 800ff64:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff6a:	4a25      	ldr	r2, [pc, #148]	@ (8010000 <HAL_UART_Transmit_DMA+0xf8>)
 800ff6c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff72:	4a24      	ldr	r2, [pc, #144]	@ (8010004 <HAL_UART_Transmit_DMA+0xfc>)
 800ff74:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ff86:	4619      	mov	r1, r3
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	3328      	adds	r3, #40	@ 0x28
 800ff8e:	461a      	mov	r2, r3
 800ff90:	88fb      	ldrh	r3, [r7, #6]
 800ff92:	f7f8 fe95 	bl	8008cc0 <HAL_DMA_Start_IT>
 800ff96:	4603      	mov	r3, r0
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d009      	beq.n	800ffb0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	2210      	movs	r2, #16
 800ffa0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	2220      	movs	r2, #32
 800ffa8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800ffac:	2301      	movs	r3, #1
 800ffae:	e020      	b.n	800fff2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	2240      	movs	r2, #64	@ 0x40
 800ffb6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	3308      	adds	r3, #8
 800ffbe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffc0:	697b      	ldr	r3, [r7, #20]
 800ffc2:	e853 3f00 	ldrex	r3, [r3]
 800ffc6:	613b      	str	r3, [r7, #16]
   return(result);
 800ffc8:	693b      	ldr	r3, [r7, #16]
 800ffca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ffce:	627b      	str	r3, [r7, #36]	@ 0x24
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	3308      	adds	r3, #8
 800ffd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ffd8:	623a      	str	r2, [r7, #32]
 800ffda:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffdc:	69f9      	ldr	r1, [r7, #28]
 800ffde:	6a3a      	ldr	r2, [r7, #32]
 800ffe0:	e841 2300 	strex	r3, r2, [r1]
 800ffe4:	61bb      	str	r3, [r7, #24]
   return(result);
 800ffe6:	69bb      	ldr	r3, [r7, #24]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d1e5      	bne.n	800ffb8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800ffec:	2300      	movs	r3, #0
 800ffee:	e000      	b.n	800fff2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800fff0:	2302      	movs	r3, #2
  }
}
 800fff2:	4618      	mov	r0, r3
 800fff4:	3728      	adds	r7, #40	@ 0x28
 800fff6:	46bd      	mov	sp, r7
 800fff8:	bd80      	pop	{r7, pc}
 800fffa:	bf00      	nop
 800fffc:	08011ca9 	.word	0x08011ca9
 8010000:	08011d3f 	.word	0x08011d3f
 8010004:	08011ec1 	.word	0x08011ec1

08010008 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b08a      	sub	sp, #40	@ 0x28
 801000c:	af00      	add	r7, sp, #0
 801000e:	60f8      	str	r0, [r7, #12]
 8010010:	60b9      	str	r1, [r7, #8]
 8010012:	4613      	mov	r3, r2
 8010014:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801001c:	2b20      	cmp	r3, #32
 801001e:	d137      	bne.n	8010090 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010020:	68bb      	ldr	r3, [r7, #8]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d002      	beq.n	801002c <HAL_UART_Receive_DMA+0x24>
 8010026:	88fb      	ldrh	r3, [r7, #6]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d101      	bne.n	8010030 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 801002c:	2301      	movs	r3, #1
 801002e:	e030      	b.n	8010092 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	2200      	movs	r2, #0
 8010034:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	4a18      	ldr	r2, [pc, #96]	@ (801009c <HAL_UART_Receive_DMA+0x94>)
 801003c:	4293      	cmp	r3, r2
 801003e:	d01f      	beq.n	8010080 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	685b      	ldr	r3, [r3, #4]
 8010046:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801004a:	2b00      	cmp	r3, #0
 801004c:	d018      	beq.n	8010080 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010054:	697b      	ldr	r3, [r7, #20]
 8010056:	e853 3f00 	ldrex	r3, [r3]
 801005a:	613b      	str	r3, [r7, #16]
   return(result);
 801005c:	693b      	ldr	r3, [r7, #16]
 801005e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8010062:	627b      	str	r3, [r7, #36]	@ 0x24
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	461a      	mov	r2, r3
 801006a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801006c:	623b      	str	r3, [r7, #32]
 801006e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010070:	69f9      	ldr	r1, [r7, #28]
 8010072:	6a3a      	ldr	r2, [r7, #32]
 8010074:	e841 2300 	strex	r3, r2, [r1]
 8010078:	61bb      	str	r3, [r7, #24]
   return(result);
 801007a:	69bb      	ldr	r3, [r7, #24]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d1e6      	bne.n	801004e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8010080:	88fb      	ldrh	r3, [r7, #6]
 8010082:	461a      	mov	r2, r3
 8010084:	68b9      	ldr	r1, [r7, #8]
 8010086:	68f8      	ldr	r0, [r7, #12]
 8010088:	f001 fcc0 	bl	8011a0c <UART_Start_Receive_DMA>
 801008c:	4603      	mov	r3, r0
 801008e:	e000      	b.n	8010092 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010090:	2302      	movs	r3, #2
  }
}
 8010092:	4618      	mov	r0, r3
 8010094:	3728      	adds	r7, #40	@ 0x28
 8010096:	46bd      	mov	sp, r7
 8010098:	bd80      	pop	{r7, pc}
 801009a:	bf00      	nop
 801009c:	58000c00 	.word	0x58000c00

080100a0 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b09a      	sub	sp, #104	@ 0x68
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80100b0:	e853 3f00 	ldrex	r3, [r3]
 80100b4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80100b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80100b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80100bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	461a      	mov	r2, r3
 80100c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80100c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80100c8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80100cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80100ce:	e841 2300 	strex	r3, r2, [r1]
 80100d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80100d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d1e6      	bne.n	80100a8 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	3308      	adds	r3, #8
 80100e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100e4:	e853 3f00 	ldrex	r3, [r3]
 80100e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80100ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80100ec:	4b46      	ldr	r3, [pc, #280]	@ (8010208 <HAL_UART_AbortReceive+0x168>)
 80100ee:	4013      	ands	r3, r2
 80100f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	3308      	adds	r3, #8
 80100f8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80100fa:	643a      	str	r2, [r7, #64]	@ 0x40
 80100fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010100:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010102:	e841 2300 	strex	r3, r2, [r1]
 8010106:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801010a:	2b00      	cmp	r3, #0
 801010c:	d1e5      	bne.n	80100da <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010112:	2b01      	cmp	r3, #1
 8010114:	d118      	bne.n	8010148 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801011c:	6a3b      	ldr	r3, [r7, #32]
 801011e:	e853 3f00 	ldrex	r3, [r3]
 8010122:	61fb      	str	r3, [r7, #28]
   return(result);
 8010124:	69fb      	ldr	r3, [r7, #28]
 8010126:	f023 0310 	bic.w	r3, r3, #16
 801012a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	461a      	mov	r2, r3
 8010132:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010134:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010136:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010138:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801013a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801013c:	e841 2300 	strex	r3, r2, [r1]
 8010140:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010144:	2b00      	cmp	r3, #0
 8010146:	d1e6      	bne.n	8010116 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	689b      	ldr	r3, [r3, #8]
 801014e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010152:	2b40      	cmp	r3, #64	@ 0x40
 8010154:	d13b      	bne.n	80101ce <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	3308      	adds	r3, #8
 801015c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	e853 3f00 	ldrex	r3, [r3]
 8010164:	60bb      	str	r3, [r7, #8]
   return(result);
 8010166:	68bb      	ldr	r3, [r7, #8]
 8010168:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801016c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	3308      	adds	r3, #8
 8010174:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010176:	61ba      	str	r2, [r7, #24]
 8010178:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801017a:	6979      	ldr	r1, [r7, #20]
 801017c:	69ba      	ldr	r2, [r7, #24]
 801017e:	e841 2300 	strex	r3, r2, [r1]
 8010182:	613b      	str	r3, [r7, #16]
   return(result);
 8010184:	693b      	ldr	r3, [r7, #16]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d1e5      	bne.n	8010156 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010190:	2b00      	cmp	r3, #0
 8010192:	d01c      	beq.n	80101ce <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801019a:	2200      	movs	r2, #0
 801019c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80101a4:	4618      	mov	r0, r3
 80101a6:	f7f8 fff5 	bl	8009194 <HAL_DMA_Abort>
 80101aa:	4603      	mov	r3, r0
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d00e      	beq.n	80101ce <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80101b6:	4618      	mov	r0, r3
 80101b8:	f7fa fc7a 	bl	800aab0 <HAL_DMA_GetError>
 80101bc:	4603      	mov	r3, r0
 80101be:	2b20      	cmp	r3, #32
 80101c0:	d105      	bne.n	80101ce <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	2210      	movs	r2, #16
 80101c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80101ca:	2303      	movs	r3, #3
 80101cc:	e017      	b.n	80101fe <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	2200      	movs	r2, #0
 80101d2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	220f      	movs	r2, #15
 80101dc:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	699a      	ldr	r2, [r3, #24]
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	f042 0208 	orr.w	r2, r2, #8
 80101ec:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2220      	movs	r2, #32
 80101f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	2200      	movs	r2, #0
 80101fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 80101fc:	2300      	movs	r3, #0
}
 80101fe:	4618      	mov	r0, r3
 8010200:	3768      	adds	r7, #104	@ 0x68
 8010202:	46bd      	mov	sp, r7
 8010204:	bd80      	pop	{r7, pc}
 8010206:	bf00      	nop
 8010208:	effffffe 	.word	0xeffffffe

0801020c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b0ba      	sub	sp, #232	@ 0xe8
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	69db      	ldr	r3, [r3, #28]
 801021a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	689b      	ldr	r3, [r3, #8]
 801022e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010232:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8010236:	f640 030f 	movw	r3, #2063	@ 0x80f
 801023a:	4013      	ands	r3, r2
 801023c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8010240:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010244:	2b00      	cmp	r3, #0
 8010246:	d11b      	bne.n	8010280 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801024c:	f003 0320 	and.w	r3, r3, #32
 8010250:	2b00      	cmp	r3, #0
 8010252:	d015      	beq.n	8010280 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010258:	f003 0320 	and.w	r3, r3, #32
 801025c:	2b00      	cmp	r3, #0
 801025e:	d105      	bne.n	801026c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010260:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010264:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010268:	2b00      	cmp	r3, #0
 801026a:	d009      	beq.n	8010280 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010270:	2b00      	cmp	r3, #0
 8010272:	f000 8377 	beq.w	8010964 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	4798      	blx	r3
      }
      return;
 801027e:	e371      	b.n	8010964 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010280:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010284:	2b00      	cmp	r3, #0
 8010286:	f000 8123 	beq.w	80104d0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801028a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801028e:	4b8d      	ldr	r3, [pc, #564]	@ (80104c4 <HAL_UART_IRQHandler+0x2b8>)
 8010290:	4013      	ands	r3, r2
 8010292:	2b00      	cmp	r3, #0
 8010294:	d106      	bne.n	80102a4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010296:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801029a:	4b8b      	ldr	r3, [pc, #556]	@ (80104c8 <HAL_UART_IRQHandler+0x2bc>)
 801029c:	4013      	ands	r3, r2
 801029e:	2b00      	cmp	r3, #0
 80102a0:	f000 8116 	beq.w	80104d0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80102a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80102a8:	f003 0301 	and.w	r3, r3, #1
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d011      	beq.n	80102d4 <HAL_UART_IRQHandler+0xc8>
 80102b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80102b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d00b      	beq.n	80102d4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	2201      	movs	r2, #1
 80102c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80102ca:	f043 0201 	orr.w	r2, r3, #1
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80102d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80102d8:	f003 0302 	and.w	r3, r3, #2
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d011      	beq.n	8010304 <HAL_UART_IRQHandler+0xf8>
 80102e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80102e4:	f003 0301 	and.w	r3, r3, #1
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d00b      	beq.n	8010304 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	2202      	movs	r2, #2
 80102f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80102fa:	f043 0204 	orr.w	r2, r3, #4
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010308:	f003 0304 	and.w	r3, r3, #4
 801030c:	2b00      	cmp	r3, #0
 801030e:	d011      	beq.n	8010334 <HAL_UART_IRQHandler+0x128>
 8010310:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010314:	f003 0301 	and.w	r3, r3, #1
 8010318:	2b00      	cmp	r3, #0
 801031a:	d00b      	beq.n	8010334 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	2204      	movs	r2, #4
 8010322:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801032a:	f043 0202 	orr.w	r2, r3, #2
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010338:	f003 0308 	and.w	r3, r3, #8
 801033c:	2b00      	cmp	r3, #0
 801033e:	d017      	beq.n	8010370 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010344:	f003 0320 	and.w	r3, r3, #32
 8010348:	2b00      	cmp	r3, #0
 801034a:	d105      	bne.n	8010358 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801034c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010350:	4b5c      	ldr	r3, [pc, #368]	@ (80104c4 <HAL_UART_IRQHandler+0x2b8>)
 8010352:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010354:	2b00      	cmp	r3, #0
 8010356:	d00b      	beq.n	8010370 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	2208      	movs	r2, #8
 801035e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010366:	f043 0208 	orr.w	r2, r3, #8
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010374:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010378:	2b00      	cmp	r3, #0
 801037a:	d012      	beq.n	80103a2 <HAL_UART_IRQHandler+0x196>
 801037c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010380:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010384:	2b00      	cmp	r3, #0
 8010386:	d00c      	beq.n	80103a2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010390:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010398:	f043 0220 	orr.w	r2, r3, #32
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	f000 82dd 	beq.w	8010968 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80103ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80103b2:	f003 0320 	and.w	r3, r3, #32
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d013      	beq.n	80103e2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80103ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80103be:	f003 0320 	and.w	r3, r3, #32
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d105      	bne.n	80103d2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80103c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80103ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d007      	beq.n	80103e2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d003      	beq.n	80103e2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80103de:	6878      	ldr	r0, [r7, #4]
 80103e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80103e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	689b      	ldr	r3, [r3, #8]
 80103f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80103f6:	2b40      	cmp	r3, #64	@ 0x40
 80103f8:	d005      	beq.n	8010406 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80103fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80103fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010402:	2b00      	cmp	r3, #0
 8010404:	d054      	beq.n	80104b0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010406:	6878      	ldr	r0, [r7, #4]
 8010408:	f001 fbe8 	bl	8011bdc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	689b      	ldr	r3, [r3, #8]
 8010412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010416:	2b40      	cmp	r3, #64	@ 0x40
 8010418:	d146      	bne.n	80104a8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	3308      	adds	r3, #8
 8010420:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010424:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010428:	e853 3f00 	ldrex	r3, [r3]
 801042c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8010430:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010434:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010438:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	3308      	adds	r3, #8
 8010442:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8010446:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801044a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801044e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8010452:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010456:	e841 2300 	strex	r3, r2, [r1]
 801045a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801045e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010462:	2b00      	cmp	r3, #0
 8010464:	d1d9      	bne.n	801041a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801046c:	2b00      	cmp	r3, #0
 801046e:	d017      	beq.n	80104a0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010476:	4a15      	ldr	r2, [pc, #84]	@ (80104cc <HAL_UART_IRQHandler+0x2c0>)
 8010478:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010480:	4618      	mov	r0, r3
 8010482:	f7f9 f9a5 	bl	80097d0 <HAL_DMA_Abort_IT>
 8010486:	4603      	mov	r3, r0
 8010488:	2b00      	cmp	r3, #0
 801048a:	d019      	beq.n	80104c0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010494:	687a      	ldr	r2, [r7, #4]
 8010496:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 801049a:	4610      	mov	r0, r2
 801049c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801049e:	e00f      	b.n	80104c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80104a0:	6878      	ldr	r0, [r7, #4]
 80104a2:	f7f6 ff1b 	bl	80072dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104a6:	e00b      	b.n	80104c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f7f6 ff17 	bl	80072dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104ae:	e007      	b.n	80104c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80104b0:	6878      	ldr	r0, [r7, #4]
 80104b2:	f7f6 ff13 	bl	80072dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	2200      	movs	r2, #0
 80104ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80104be:	e253      	b.n	8010968 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104c0:	bf00      	nop
    return;
 80104c2:	e251      	b.n	8010968 <HAL_UART_IRQHandler+0x75c>
 80104c4:	10000001 	.word	0x10000001
 80104c8:	04000120 	.word	0x04000120
 80104cc:	08011f41 	.word	0x08011f41

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80104d4:	2b01      	cmp	r3, #1
 80104d6:	f040 81e7 	bne.w	80108a8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80104da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80104de:	f003 0310 	and.w	r3, r3, #16
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	f000 81e0 	beq.w	80108a8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80104e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80104ec:	f003 0310 	and.w	r3, r3, #16
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	f000 81d9 	beq.w	80108a8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	2210      	movs	r2, #16
 80104fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	689b      	ldr	r3, [r3, #8]
 8010504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010508:	2b40      	cmp	r3, #64	@ 0x40
 801050a:	f040 8151 	bne.w	80107b0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	4a96      	ldr	r2, [pc, #600]	@ (8010770 <HAL_UART_IRQHandler+0x564>)
 8010518:	4293      	cmp	r3, r2
 801051a:	d068      	beq.n	80105ee <HAL_UART_IRQHandler+0x3e2>
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	4a93      	ldr	r2, [pc, #588]	@ (8010774 <HAL_UART_IRQHandler+0x568>)
 8010526:	4293      	cmp	r3, r2
 8010528:	d061      	beq.n	80105ee <HAL_UART_IRQHandler+0x3e2>
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	4a91      	ldr	r2, [pc, #580]	@ (8010778 <HAL_UART_IRQHandler+0x56c>)
 8010534:	4293      	cmp	r3, r2
 8010536:	d05a      	beq.n	80105ee <HAL_UART_IRQHandler+0x3e2>
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	4a8e      	ldr	r2, [pc, #568]	@ (801077c <HAL_UART_IRQHandler+0x570>)
 8010542:	4293      	cmp	r3, r2
 8010544:	d053      	beq.n	80105ee <HAL_UART_IRQHandler+0x3e2>
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	4a8c      	ldr	r2, [pc, #560]	@ (8010780 <HAL_UART_IRQHandler+0x574>)
 8010550:	4293      	cmp	r3, r2
 8010552:	d04c      	beq.n	80105ee <HAL_UART_IRQHandler+0x3e2>
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	4a89      	ldr	r2, [pc, #548]	@ (8010784 <HAL_UART_IRQHandler+0x578>)
 801055e:	4293      	cmp	r3, r2
 8010560:	d045      	beq.n	80105ee <HAL_UART_IRQHandler+0x3e2>
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	4a87      	ldr	r2, [pc, #540]	@ (8010788 <HAL_UART_IRQHandler+0x57c>)
 801056c:	4293      	cmp	r3, r2
 801056e:	d03e      	beq.n	80105ee <HAL_UART_IRQHandler+0x3e2>
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	4a84      	ldr	r2, [pc, #528]	@ (801078c <HAL_UART_IRQHandler+0x580>)
 801057a:	4293      	cmp	r3, r2
 801057c:	d037      	beq.n	80105ee <HAL_UART_IRQHandler+0x3e2>
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	4a82      	ldr	r2, [pc, #520]	@ (8010790 <HAL_UART_IRQHandler+0x584>)
 8010588:	4293      	cmp	r3, r2
 801058a:	d030      	beq.n	80105ee <HAL_UART_IRQHandler+0x3e2>
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	4a7f      	ldr	r2, [pc, #508]	@ (8010794 <HAL_UART_IRQHandler+0x588>)
 8010596:	4293      	cmp	r3, r2
 8010598:	d029      	beq.n	80105ee <HAL_UART_IRQHandler+0x3e2>
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	4a7d      	ldr	r2, [pc, #500]	@ (8010798 <HAL_UART_IRQHandler+0x58c>)
 80105a4:	4293      	cmp	r3, r2
 80105a6:	d022      	beq.n	80105ee <HAL_UART_IRQHandler+0x3e2>
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	4a7a      	ldr	r2, [pc, #488]	@ (801079c <HAL_UART_IRQHandler+0x590>)
 80105b2:	4293      	cmp	r3, r2
 80105b4:	d01b      	beq.n	80105ee <HAL_UART_IRQHandler+0x3e2>
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	4a78      	ldr	r2, [pc, #480]	@ (80107a0 <HAL_UART_IRQHandler+0x594>)
 80105c0:	4293      	cmp	r3, r2
 80105c2:	d014      	beq.n	80105ee <HAL_UART_IRQHandler+0x3e2>
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	4a75      	ldr	r2, [pc, #468]	@ (80107a4 <HAL_UART_IRQHandler+0x598>)
 80105ce:	4293      	cmp	r3, r2
 80105d0:	d00d      	beq.n	80105ee <HAL_UART_IRQHandler+0x3e2>
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	4a73      	ldr	r2, [pc, #460]	@ (80107a8 <HAL_UART_IRQHandler+0x59c>)
 80105dc:	4293      	cmp	r3, r2
 80105de:	d006      	beq.n	80105ee <HAL_UART_IRQHandler+0x3e2>
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	4a70      	ldr	r2, [pc, #448]	@ (80107ac <HAL_UART_IRQHandler+0x5a0>)
 80105ea:	4293      	cmp	r3, r2
 80105ec:	d106      	bne.n	80105fc <HAL_UART_IRQHandler+0x3f0>
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	685b      	ldr	r3, [r3, #4]
 80105f8:	b29b      	uxth	r3, r3
 80105fa:	e005      	b.n	8010608 <HAL_UART_IRQHandler+0x3fc>
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	685b      	ldr	r3, [r3, #4]
 8010606:	b29b      	uxth	r3, r3
 8010608:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 801060c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8010610:	2b00      	cmp	r3, #0
 8010612:	f000 81ab 	beq.w	801096c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801061c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010620:	429a      	cmp	r2, r3
 8010622:	f080 81a3 	bcs.w	801096c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801062c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010636:	69db      	ldr	r3, [r3, #28]
 8010638:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801063c:	f000 8087 	beq.w	801074e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010648:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801064c:	e853 3f00 	ldrex	r3, [r3]
 8010650:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8010654:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010658:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801065c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	461a      	mov	r2, r3
 8010666:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801066a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801066e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010672:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8010676:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801067a:	e841 2300 	strex	r3, r2, [r1]
 801067e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8010682:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010686:	2b00      	cmp	r3, #0
 8010688:	d1da      	bne.n	8010640 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	3308      	adds	r3, #8
 8010690:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010692:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010694:	e853 3f00 	ldrex	r3, [r3]
 8010698:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801069a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801069c:	f023 0301 	bic.w	r3, r3, #1
 80106a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	3308      	adds	r3, #8
 80106aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80106ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80106b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80106b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80106ba:	e841 2300 	strex	r3, r2, [r1]
 80106be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80106c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d1e1      	bne.n	801068a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	3308      	adds	r3, #8
 80106cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80106d0:	e853 3f00 	ldrex	r3, [r3]
 80106d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80106d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80106d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80106dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	3308      	adds	r3, #8
 80106e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80106ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80106ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80106f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80106f2:	e841 2300 	strex	r3, r2, [r1]
 80106f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80106f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d1e3      	bne.n	80106c6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	2220      	movs	r2, #32
 8010702:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	2200      	movs	r2, #0
 801070a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010712:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010714:	e853 3f00 	ldrex	r3, [r3]
 8010718:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801071a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801071c:	f023 0310 	bic.w	r3, r3, #16
 8010720:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	461a      	mov	r2, r3
 801072a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801072e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010730:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010732:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010734:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010736:	e841 2300 	strex	r3, r2, [r1]
 801073a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801073c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801073e:	2b00      	cmp	r3, #0
 8010740:	d1e4      	bne.n	801070c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010748:	4618      	mov	r0, r3
 801074a:	f7f8 fd23 	bl	8009194 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	2202      	movs	r2, #2
 8010752:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010760:	b29b      	uxth	r3, r3
 8010762:	1ad3      	subs	r3, r2, r3
 8010764:	b29b      	uxth	r3, r3
 8010766:	4619      	mov	r1, r3
 8010768:	6878      	ldr	r0, [r7, #4]
 801076a:	f000 f91d 	bl	80109a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801076e:	e0fd      	b.n	801096c <HAL_UART_IRQHandler+0x760>
 8010770:	40020010 	.word	0x40020010
 8010774:	40020028 	.word	0x40020028
 8010778:	40020040 	.word	0x40020040
 801077c:	40020058 	.word	0x40020058
 8010780:	40020070 	.word	0x40020070
 8010784:	40020088 	.word	0x40020088
 8010788:	400200a0 	.word	0x400200a0
 801078c:	400200b8 	.word	0x400200b8
 8010790:	40020410 	.word	0x40020410
 8010794:	40020428 	.word	0x40020428
 8010798:	40020440 	.word	0x40020440
 801079c:	40020458 	.word	0x40020458
 80107a0:	40020470 	.word	0x40020470
 80107a4:	40020488 	.word	0x40020488
 80107a8:	400204a0 	.word	0x400204a0
 80107ac:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80107bc:	b29b      	uxth	r3, r3
 80107be:	1ad3      	subs	r3, r2, r3
 80107c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80107ca:	b29b      	uxth	r3, r3
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	f000 80cf 	beq.w	8010970 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80107d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	f000 80ca 	beq.w	8010970 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107e4:	e853 3f00 	ldrex	r3, [r3]
 80107e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80107ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80107f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	461a      	mov	r2, r3
 80107fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80107fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8010800:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010802:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010804:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010806:	e841 2300 	strex	r3, r2, [r1]
 801080a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801080c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801080e:	2b00      	cmp	r3, #0
 8010810:	d1e4      	bne.n	80107dc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	3308      	adds	r3, #8
 8010818:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801081a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801081c:	e853 3f00 	ldrex	r3, [r3]
 8010820:	623b      	str	r3, [r7, #32]
   return(result);
 8010822:	6a3a      	ldr	r2, [r7, #32]
 8010824:	4b55      	ldr	r3, [pc, #340]	@ (801097c <HAL_UART_IRQHandler+0x770>)
 8010826:	4013      	ands	r3, r2
 8010828:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	3308      	adds	r3, #8
 8010832:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010836:	633a      	str	r2, [r7, #48]	@ 0x30
 8010838:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801083a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801083c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801083e:	e841 2300 	strex	r3, r2, [r1]
 8010842:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010846:	2b00      	cmp	r3, #0
 8010848:	d1e3      	bne.n	8010812 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	2220      	movs	r2, #32
 801084e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	2200      	movs	r2, #0
 8010856:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	2200      	movs	r2, #0
 801085c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010864:	693b      	ldr	r3, [r7, #16]
 8010866:	e853 3f00 	ldrex	r3, [r3]
 801086a:	60fb      	str	r3, [r7, #12]
   return(result);
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	f023 0310 	bic.w	r3, r3, #16
 8010872:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	461a      	mov	r2, r3
 801087c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010880:	61fb      	str	r3, [r7, #28]
 8010882:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010884:	69b9      	ldr	r1, [r7, #24]
 8010886:	69fa      	ldr	r2, [r7, #28]
 8010888:	e841 2300 	strex	r3, r2, [r1]
 801088c:	617b      	str	r3, [r7, #20]
   return(result);
 801088e:	697b      	ldr	r3, [r7, #20]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d1e4      	bne.n	801085e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2202      	movs	r2, #2
 8010898:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801089a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801089e:	4619      	mov	r1, r3
 80108a0:	6878      	ldr	r0, [r7, #4]
 80108a2:	f000 f881 	bl	80109a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80108a6:	e063      	b.n	8010970 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80108a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80108ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d00e      	beq.n	80108d2 <HAL_UART_IRQHandler+0x6c6>
 80108b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80108b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d008      	beq.n	80108d2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80108c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80108ca:	6878      	ldr	r0, [r7, #4]
 80108cc:	f001 fb79 	bl	8011fc2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80108d0:	e051      	b.n	8010976 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80108d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80108d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d014      	beq.n	8010908 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80108de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80108e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d105      	bne.n	80108f6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80108ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80108ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d008      	beq.n	8010908 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d03a      	beq.n	8010974 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010902:	6878      	ldr	r0, [r7, #4]
 8010904:	4798      	blx	r3
    }
    return;
 8010906:	e035      	b.n	8010974 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801090c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010910:	2b00      	cmp	r3, #0
 8010912:	d009      	beq.n	8010928 <HAL_UART_IRQHandler+0x71c>
 8010914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801091c:	2b00      	cmp	r3, #0
 801091e:	d003      	beq.n	8010928 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8010920:	6878      	ldr	r0, [r7, #4]
 8010922:	f001 fb23 	bl	8011f6c <UART_EndTransmit_IT>
    return;
 8010926:	e026      	b.n	8010976 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801092c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010930:	2b00      	cmp	r3, #0
 8010932:	d009      	beq.n	8010948 <HAL_UART_IRQHandler+0x73c>
 8010934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010938:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801093c:	2b00      	cmp	r3, #0
 801093e:	d003      	beq.n	8010948 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010940:	6878      	ldr	r0, [r7, #4]
 8010942:	f001 fb52 	bl	8011fea <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010946:	e016      	b.n	8010976 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801094c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010950:	2b00      	cmp	r3, #0
 8010952:	d010      	beq.n	8010976 <HAL_UART_IRQHandler+0x76a>
 8010954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010958:	2b00      	cmp	r3, #0
 801095a:	da0c      	bge.n	8010976 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801095c:	6878      	ldr	r0, [r7, #4]
 801095e:	f001 fb3a 	bl	8011fd6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010962:	e008      	b.n	8010976 <HAL_UART_IRQHandler+0x76a>
      return;
 8010964:	bf00      	nop
 8010966:	e006      	b.n	8010976 <HAL_UART_IRQHandler+0x76a>
    return;
 8010968:	bf00      	nop
 801096a:	e004      	b.n	8010976 <HAL_UART_IRQHandler+0x76a>
      return;
 801096c:	bf00      	nop
 801096e:	e002      	b.n	8010976 <HAL_UART_IRQHandler+0x76a>
      return;
 8010970:	bf00      	nop
 8010972:	e000      	b.n	8010976 <HAL_UART_IRQHandler+0x76a>
    return;
 8010974:	bf00      	nop
  }
}
 8010976:	37e8      	adds	r7, #232	@ 0xe8
 8010978:	46bd      	mov	sp, r7
 801097a:	bd80      	pop	{r7, pc}
 801097c:	effffffe 	.word	0xeffffffe

08010980 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010980:	b480      	push	{r7}
 8010982:	b083      	sub	sp, #12
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010988:	bf00      	nop
 801098a:	370c      	adds	r7, #12
 801098c:	46bd      	mov	sp, r7
 801098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010992:	4770      	bx	lr

08010994 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010994:	b480      	push	{r7}
 8010996:	b083      	sub	sp, #12
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801099c:	bf00      	nop
 801099e:	370c      	adds	r7, #12
 80109a0:	46bd      	mov	sp, r7
 80109a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a6:	4770      	bx	lr

080109a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80109a8:	b480      	push	{r7}
 80109aa:	b083      	sub	sp, #12
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
 80109b0:	460b      	mov	r3, r1
 80109b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80109b4:	bf00      	nop
 80109b6:	370c      	adds	r7, #12
 80109b8:	46bd      	mov	sp, r7
 80109ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109be:	4770      	bx	lr

080109c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80109c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80109c4:	b092      	sub	sp, #72	@ 0x48
 80109c6:	af00      	add	r7, sp, #0
 80109c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80109ca:	2300      	movs	r3, #0
 80109cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80109d0:	697b      	ldr	r3, [r7, #20]
 80109d2:	689a      	ldr	r2, [r3, #8]
 80109d4:	697b      	ldr	r3, [r7, #20]
 80109d6:	691b      	ldr	r3, [r3, #16]
 80109d8:	431a      	orrs	r2, r3
 80109da:	697b      	ldr	r3, [r7, #20]
 80109dc:	695b      	ldr	r3, [r3, #20]
 80109de:	431a      	orrs	r2, r3
 80109e0:	697b      	ldr	r3, [r7, #20]
 80109e2:	69db      	ldr	r3, [r3, #28]
 80109e4:	4313      	orrs	r3, r2
 80109e6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80109e8:	697b      	ldr	r3, [r7, #20]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	681a      	ldr	r2, [r3, #0]
 80109ee:	4bbe      	ldr	r3, [pc, #760]	@ (8010ce8 <UART_SetConfig+0x328>)
 80109f0:	4013      	ands	r3, r2
 80109f2:	697a      	ldr	r2, [r7, #20]
 80109f4:	6812      	ldr	r2, [r2, #0]
 80109f6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80109f8:	430b      	orrs	r3, r1
 80109fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80109fc:	697b      	ldr	r3, [r7, #20]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	685b      	ldr	r3, [r3, #4]
 8010a02:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8010a06:	697b      	ldr	r3, [r7, #20]
 8010a08:	68da      	ldr	r2, [r3, #12]
 8010a0a:	697b      	ldr	r3, [r7, #20]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	430a      	orrs	r2, r1
 8010a10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010a12:	697b      	ldr	r3, [r7, #20]
 8010a14:	699b      	ldr	r3, [r3, #24]
 8010a16:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010a18:	697b      	ldr	r3, [r7, #20]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	4ab3      	ldr	r2, [pc, #716]	@ (8010cec <UART_SetConfig+0x32c>)
 8010a1e:	4293      	cmp	r3, r2
 8010a20:	d004      	beq.n	8010a2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010a22:	697b      	ldr	r3, [r7, #20]
 8010a24:	6a1b      	ldr	r3, [r3, #32]
 8010a26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010a28:	4313      	orrs	r3, r2
 8010a2a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010a2c:	697b      	ldr	r3, [r7, #20]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	689a      	ldr	r2, [r3, #8]
 8010a32:	4baf      	ldr	r3, [pc, #700]	@ (8010cf0 <UART_SetConfig+0x330>)
 8010a34:	4013      	ands	r3, r2
 8010a36:	697a      	ldr	r2, [r7, #20]
 8010a38:	6812      	ldr	r2, [r2, #0]
 8010a3a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010a3c:	430b      	orrs	r3, r1
 8010a3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010a40:	697b      	ldr	r3, [r7, #20]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a46:	f023 010f 	bic.w	r1, r3, #15
 8010a4a:	697b      	ldr	r3, [r7, #20]
 8010a4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010a4e:	697b      	ldr	r3, [r7, #20]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	430a      	orrs	r2, r1
 8010a54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010a56:	697b      	ldr	r3, [r7, #20]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	4aa6      	ldr	r2, [pc, #664]	@ (8010cf4 <UART_SetConfig+0x334>)
 8010a5c:	4293      	cmp	r3, r2
 8010a5e:	d177      	bne.n	8010b50 <UART_SetConfig+0x190>
 8010a60:	4ba5      	ldr	r3, [pc, #660]	@ (8010cf8 <UART_SetConfig+0x338>)
 8010a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010a64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010a68:	2b28      	cmp	r3, #40	@ 0x28
 8010a6a:	d86d      	bhi.n	8010b48 <UART_SetConfig+0x188>
 8010a6c:	a201      	add	r2, pc, #4	@ (adr r2, 8010a74 <UART_SetConfig+0xb4>)
 8010a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a72:	bf00      	nop
 8010a74:	08010b19 	.word	0x08010b19
 8010a78:	08010b49 	.word	0x08010b49
 8010a7c:	08010b49 	.word	0x08010b49
 8010a80:	08010b49 	.word	0x08010b49
 8010a84:	08010b49 	.word	0x08010b49
 8010a88:	08010b49 	.word	0x08010b49
 8010a8c:	08010b49 	.word	0x08010b49
 8010a90:	08010b49 	.word	0x08010b49
 8010a94:	08010b21 	.word	0x08010b21
 8010a98:	08010b49 	.word	0x08010b49
 8010a9c:	08010b49 	.word	0x08010b49
 8010aa0:	08010b49 	.word	0x08010b49
 8010aa4:	08010b49 	.word	0x08010b49
 8010aa8:	08010b49 	.word	0x08010b49
 8010aac:	08010b49 	.word	0x08010b49
 8010ab0:	08010b49 	.word	0x08010b49
 8010ab4:	08010b29 	.word	0x08010b29
 8010ab8:	08010b49 	.word	0x08010b49
 8010abc:	08010b49 	.word	0x08010b49
 8010ac0:	08010b49 	.word	0x08010b49
 8010ac4:	08010b49 	.word	0x08010b49
 8010ac8:	08010b49 	.word	0x08010b49
 8010acc:	08010b49 	.word	0x08010b49
 8010ad0:	08010b49 	.word	0x08010b49
 8010ad4:	08010b31 	.word	0x08010b31
 8010ad8:	08010b49 	.word	0x08010b49
 8010adc:	08010b49 	.word	0x08010b49
 8010ae0:	08010b49 	.word	0x08010b49
 8010ae4:	08010b49 	.word	0x08010b49
 8010ae8:	08010b49 	.word	0x08010b49
 8010aec:	08010b49 	.word	0x08010b49
 8010af0:	08010b49 	.word	0x08010b49
 8010af4:	08010b39 	.word	0x08010b39
 8010af8:	08010b49 	.word	0x08010b49
 8010afc:	08010b49 	.word	0x08010b49
 8010b00:	08010b49 	.word	0x08010b49
 8010b04:	08010b49 	.word	0x08010b49
 8010b08:	08010b49 	.word	0x08010b49
 8010b0c:	08010b49 	.word	0x08010b49
 8010b10:	08010b49 	.word	0x08010b49
 8010b14:	08010b41 	.word	0x08010b41
 8010b18:	2301      	movs	r3, #1
 8010b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b1e:	e326      	b.n	801116e <UART_SetConfig+0x7ae>
 8010b20:	2304      	movs	r3, #4
 8010b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b26:	e322      	b.n	801116e <UART_SetConfig+0x7ae>
 8010b28:	2308      	movs	r3, #8
 8010b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b2e:	e31e      	b.n	801116e <UART_SetConfig+0x7ae>
 8010b30:	2310      	movs	r3, #16
 8010b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b36:	e31a      	b.n	801116e <UART_SetConfig+0x7ae>
 8010b38:	2320      	movs	r3, #32
 8010b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b3e:	e316      	b.n	801116e <UART_SetConfig+0x7ae>
 8010b40:	2340      	movs	r3, #64	@ 0x40
 8010b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b46:	e312      	b.n	801116e <UART_SetConfig+0x7ae>
 8010b48:	2380      	movs	r3, #128	@ 0x80
 8010b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b4e:	e30e      	b.n	801116e <UART_SetConfig+0x7ae>
 8010b50:	697b      	ldr	r3, [r7, #20]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	4a69      	ldr	r2, [pc, #420]	@ (8010cfc <UART_SetConfig+0x33c>)
 8010b56:	4293      	cmp	r3, r2
 8010b58:	d130      	bne.n	8010bbc <UART_SetConfig+0x1fc>
 8010b5a:	4b67      	ldr	r3, [pc, #412]	@ (8010cf8 <UART_SetConfig+0x338>)
 8010b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b5e:	f003 0307 	and.w	r3, r3, #7
 8010b62:	2b05      	cmp	r3, #5
 8010b64:	d826      	bhi.n	8010bb4 <UART_SetConfig+0x1f4>
 8010b66:	a201      	add	r2, pc, #4	@ (adr r2, 8010b6c <UART_SetConfig+0x1ac>)
 8010b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b6c:	08010b85 	.word	0x08010b85
 8010b70:	08010b8d 	.word	0x08010b8d
 8010b74:	08010b95 	.word	0x08010b95
 8010b78:	08010b9d 	.word	0x08010b9d
 8010b7c:	08010ba5 	.word	0x08010ba5
 8010b80:	08010bad 	.word	0x08010bad
 8010b84:	2300      	movs	r3, #0
 8010b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b8a:	e2f0      	b.n	801116e <UART_SetConfig+0x7ae>
 8010b8c:	2304      	movs	r3, #4
 8010b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b92:	e2ec      	b.n	801116e <UART_SetConfig+0x7ae>
 8010b94:	2308      	movs	r3, #8
 8010b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b9a:	e2e8      	b.n	801116e <UART_SetConfig+0x7ae>
 8010b9c:	2310      	movs	r3, #16
 8010b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ba2:	e2e4      	b.n	801116e <UART_SetConfig+0x7ae>
 8010ba4:	2320      	movs	r3, #32
 8010ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010baa:	e2e0      	b.n	801116e <UART_SetConfig+0x7ae>
 8010bac:	2340      	movs	r3, #64	@ 0x40
 8010bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bb2:	e2dc      	b.n	801116e <UART_SetConfig+0x7ae>
 8010bb4:	2380      	movs	r3, #128	@ 0x80
 8010bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bba:	e2d8      	b.n	801116e <UART_SetConfig+0x7ae>
 8010bbc:	697b      	ldr	r3, [r7, #20]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	4a4f      	ldr	r2, [pc, #316]	@ (8010d00 <UART_SetConfig+0x340>)
 8010bc2:	4293      	cmp	r3, r2
 8010bc4:	d130      	bne.n	8010c28 <UART_SetConfig+0x268>
 8010bc6:	4b4c      	ldr	r3, [pc, #304]	@ (8010cf8 <UART_SetConfig+0x338>)
 8010bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010bca:	f003 0307 	and.w	r3, r3, #7
 8010bce:	2b05      	cmp	r3, #5
 8010bd0:	d826      	bhi.n	8010c20 <UART_SetConfig+0x260>
 8010bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8010bd8 <UART_SetConfig+0x218>)
 8010bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bd8:	08010bf1 	.word	0x08010bf1
 8010bdc:	08010bf9 	.word	0x08010bf9
 8010be0:	08010c01 	.word	0x08010c01
 8010be4:	08010c09 	.word	0x08010c09
 8010be8:	08010c11 	.word	0x08010c11
 8010bec:	08010c19 	.word	0x08010c19
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bf6:	e2ba      	b.n	801116e <UART_SetConfig+0x7ae>
 8010bf8:	2304      	movs	r3, #4
 8010bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bfe:	e2b6      	b.n	801116e <UART_SetConfig+0x7ae>
 8010c00:	2308      	movs	r3, #8
 8010c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c06:	e2b2      	b.n	801116e <UART_SetConfig+0x7ae>
 8010c08:	2310      	movs	r3, #16
 8010c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c0e:	e2ae      	b.n	801116e <UART_SetConfig+0x7ae>
 8010c10:	2320      	movs	r3, #32
 8010c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c16:	e2aa      	b.n	801116e <UART_SetConfig+0x7ae>
 8010c18:	2340      	movs	r3, #64	@ 0x40
 8010c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c1e:	e2a6      	b.n	801116e <UART_SetConfig+0x7ae>
 8010c20:	2380      	movs	r3, #128	@ 0x80
 8010c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c26:	e2a2      	b.n	801116e <UART_SetConfig+0x7ae>
 8010c28:	697b      	ldr	r3, [r7, #20]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	4a35      	ldr	r2, [pc, #212]	@ (8010d04 <UART_SetConfig+0x344>)
 8010c2e:	4293      	cmp	r3, r2
 8010c30:	d130      	bne.n	8010c94 <UART_SetConfig+0x2d4>
 8010c32:	4b31      	ldr	r3, [pc, #196]	@ (8010cf8 <UART_SetConfig+0x338>)
 8010c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010c36:	f003 0307 	and.w	r3, r3, #7
 8010c3a:	2b05      	cmp	r3, #5
 8010c3c:	d826      	bhi.n	8010c8c <UART_SetConfig+0x2cc>
 8010c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8010c44 <UART_SetConfig+0x284>)
 8010c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c44:	08010c5d 	.word	0x08010c5d
 8010c48:	08010c65 	.word	0x08010c65
 8010c4c:	08010c6d 	.word	0x08010c6d
 8010c50:	08010c75 	.word	0x08010c75
 8010c54:	08010c7d 	.word	0x08010c7d
 8010c58:	08010c85 	.word	0x08010c85
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c62:	e284      	b.n	801116e <UART_SetConfig+0x7ae>
 8010c64:	2304      	movs	r3, #4
 8010c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c6a:	e280      	b.n	801116e <UART_SetConfig+0x7ae>
 8010c6c:	2308      	movs	r3, #8
 8010c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c72:	e27c      	b.n	801116e <UART_SetConfig+0x7ae>
 8010c74:	2310      	movs	r3, #16
 8010c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c7a:	e278      	b.n	801116e <UART_SetConfig+0x7ae>
 8010c7c:	2320      	movs	r3, #32
 8010c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c82:	e274      	b.n	801116e <UART_SetConfig+0x7ae>
 8010c84:	2340      	movs	r3, #64	@ 0x40
 8010c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c8a:	e270      	b.n	801116e <UART_SetConfig+0x7ae>
 8010c8c:	2380      	movs	r3, #128	@ 0x80
 8010c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c92:	e26c      	b.n	801116e <UART_SetConfig+0x7ae>
 8010c94:	697b      	ldr	r3, [r7, #20]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	4a1b      	ldr	r2, [pc, #108]	@ (8010d08 <UART_SetConfig+0x348>)
 8010c9a:	4293      	cmp	r3, r2
 8010c9c:	d142      	bne.n	8010d24 <UART_SetConfig+0x364>
 8010c9e:	4b16      	ldr	r3, [pc, #88]	@ (8010cf8 <UART_SetConfig+0x338>)
 8010ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010ca2:	f003 0307 	and.w	r3, r3, #7
 8010ca6:	2b05      	cmp	r3, #5
 8010ca8:	d838      	bhi.n	8010d1c <UART_SetConfig+0x35c>
 8010caa:	a201      	add	r2, pc, #4	@ (adr r2, 8010cb0 <UART_SetConfig+0x2f0>)
 8010cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cb0:	08010cc9 	.word	0x08010cc9
 8010cb4:	08010cd1 	.word	0x08010cd1
 8010cb8:	08010cd9 	.word	0x08010cd9
 8010cbc:	08010ce1 	.word	0x08010ce1
 8010cc0:	08010d0d 	.word	0x08010d0d
 8010cc4:	08010d15 	.word	0x08010d15
 8010cc8:	2300      	movs	r3, #0
 8010cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cce:	e24e      	b.n	801116e <UART_SetConfig+0x7ae>
 8010cd0:	2304      	movs	r3, #4
 8010cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cd6:	e24a      	b.n	801116e <UART_SetConfig+0x7ae>
 8010cd8:	2308      	movs	r3, #8
 8010cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cde:	e246      	b.n	801116e <UART_SetConfig+0x7ae>
 8010ce0:	2310      	movs	r3, #16
 8010ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ce6:	e242      	b.n	801116e <UART_SetConfig+0x7ae>
 8010ce8:	cfff69f3 	.word	0xcfff69f3
 8010cec:	58000c00 	.word	0x58000c00
 8010cf0:	11fff4ff 	.word	0x11fff4ff
 8010cf4:	40011000 	.word	0x40011000
 8010cf8:	58024400 	.word	0x58024400
 8010cfc:	40004400 	.word	0x40004400
 8010d00:	40004800 	.word	0x40004800
 8010d04:	40004c00 	.word	0x40004c00
 8010d08:	40005000 	.word	0x40005000
 8010d0c:	2320      	movs	r3, #32
 8010d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d12:	e22c      	b.n	801116e <UART_SetConfig+0x7ae>
 8010d14:	2340      	movs	r3, #64	@ 0x40
 8010d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d1a:	e228      	b.n	801116e <UART_SetConfig+0x7ae>
 8010d1c:	2380      	movs	r3, #128	@ 0x80
 8010d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d22:	e224      	b.n	801116e <UART_SetConfig+0x7ae>
 8010d24:	697b      	ldr	r3, [r7, #20]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	4ab1      	ldr	r2, [pc, #708]	@ (8010ff0 <UART_SetConfig+0x630>)
 8010d2a:	4293      	cmp	r3, r2
 8010d2c:	d176      	bne.n	8010e1c <UART_SetConfig+0x45c>
 8010d2e:	4bb1      	ldr	r3, [pc, #708]	@ (8010ff4 <UART_SetConfig+0x634>)
 8010d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010d32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010d36:	2b28      	cmp	r3, #40	@ 0x28
 8010d38:	d86c      	bhi.n	8010e14 <UART_SetConfig+0x454>
 8010d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8010d40 <UART_SetConfig+0x380>)
 8010d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d40:	08010de5 	.word	0x08010de5
 8010d44:	08010e15 	.word	0x08010e15
 8010d48:	08010e15 	.word	0x08010e15
 8010d4c:	08010e15 	.word	0x08010e15
 8010d50:	08010e15 	.word	0x08010e15
 8010d54:	08010e15 	.word	0x08010e15
 8010d58:	08010e15 	.word	0x08010e15
 8010d5c:	08010e15 	.word	0x08010e15
 8010d60:	08010ded 	.word	0x08010ded
 8010d64:	08010e15 	.word	0x08010e15
 8010d68:	08010e15 	.word	0x08010e15
 8010d6c:	08010e15 	.word	0x08010e15
 8010d70:	08010e15 	.word	0x08010e15
 8010d74:	08010e15 	.word	0x08010e15
 8010d78:	08010e15 	.word	0x08010e15
 8010d7c:	08010e15 	.word	0x08010e15
 8010d80:	08010df5 	.word	0x08010df5
 8010d84:	08010e15 	.word	0x08010e15
 8010d88:	08010e15 	.word	0x08010e15
 8010d8c:	08010e15 	.word	0x08010e15
 8010d90:	08010e15 	.word	0x08010e15
 8010d94:	08010e15 	.word	0x08010e15
 8010d98:	08010e15 	.word	0x08010e15
 8010d9c:	08010e15 	.word	0x08010e15
 8010da0:	08010dfd 	.word	0x08010dfd
 8010da4:	08010e15 	.word	0x08010e15
 8010da8:	08010e15 	.word	0x08010e15
 8010dac:	08010e15 	.word	0x08010e15
 8010db0:	08010e15 	.word	0x08010e15
 8010db4:	08010e15 	.word	0x08010e15
 8010db8:	08010e15 	.word	0x08010e15
 8010dbc:	08010e15 	.word	0x08010e15
 8010dc0:	08010e05 	.word	0x08010e05
 8010dc4:	08010e15 	.word	0x08010e15
 8010dc8:	08010e15 	.word	0x08010e15
 8010dcc:	08010e15 	.word	0x08010e15
 8010dd0:	08010e15 	.word	0x08010e15
 8010dd4:	08010e15 	.word	0x08010e15
 8010dd8:	08010e15 	.word	0x08010e15
 8010ddc:	08010e15 	.word	0x08010e15
 8010de0:	08010e0d 	.word	0x08010e0d
 8010de4:	2301      	movs	r3, #1
 8010de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dea:	e1c0      	b.n	801116e <UART_SetConfig+0x7ae>
 8010dec:	2304      	movs	r3, #4
 8010dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010df2:	e1bc      	b.n	801116e <UART_SetConfig+0x7ae>
 8010df4:	2308      	movs	r3, #8
 8010df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dfa:	e1b8      	b.n	801116e <UART_SetConfig+0x7ae>
 8010dfc:	2310      	movs	r3, #16
 8010dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e02:	e1b4      	b.n	801116e <UART_SetConfig+0x7ae>
 8010e04:	2320      	movs	r3, #32
 8010e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e0a:	e1b0      	b.n	801116e <UART_SetConfig+0x7ae>
 8010e0c:	2340      	movs	r3, #64	@ 0x40
 8010e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e12:	e1ac      	b.n	801116e <UART_SetConfig+0x7ae>
 8010e14:	2380      	movs	r3, #128	@ 0x80
 8010e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e1a:	e1a8      	b.n	801116e <UART_SetConfig+0x7ae>
 8010e1c:	697b      	ldr	r3, [r7, #20]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	4a75      	ldr	r2, [pc, #468]	@ (8010ff8 <UART_SetConfig+0x638>)
 8010e22:	4293      	cmp	r3, r2
 8010e24:	d130      	bne.n	8010e88 <UART_SetConfig+0x4c8>
 8010e26:	4b73      	ldr	r3, [pc, #460]	@ (8010ff4 <UART_SetConfig+0x634>)
 8010e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010e2a:	f003 0307 	and.w	r3, r3, #7
 8010e2e:	2b05      	cmp	r3, #5
 8010e30:	d826      	bhi.n	8010e80 <UART_SetConfig+0x4c0>
 8010e32:	a201      	add	r2, pc, #4	@ (adr r2, 8010e38 <UART_SetConfig+0x478>)
 8010e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e38:	08010e51 	.word	0x08010e51
 8010e3c:	08010e59 	.word	0x08010e59
 8010e40:	08010e61 	.word	0x08010e61
 8010e44:	08010e69 	.word	0x08010e69
 8010e48:	08010e71 	.word	0x08010e71
 8010e4c:	08010e79 	.word	0x08010e79
 8010e50:	2300      	movs	r3, #0
 8010e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e56:	e18a      	b.n	801116e <UART_SetConfig+0x7ae>
 8010e58:	2304      	movs	r3, #4
 8010e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e5e:	e186      	b.n	801116e <UART_SetConfig+0x7ae>
 8010e60:	2308      	movs	r3, #8
 8010e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e66:	e182      	b.n	801116e <UART_SetConfig+0x7ae>
 8010e68:	2310      	movs	r3, #16
 8010e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e6e:	e17e      	b.n	801116e <UART_SetConfig+0x7ae>
 8010e70:	2320      	movs	r3, #32
 8010e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e76:	e17a      	b.n	801116e <UART_SetConfig+0x7ae>
 8010e78:	2340      	movs	r3, #64	@ 0x40
 8010e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e7e:	e176      	b.n	801116e <UART_SetConfig+0x7ae>
 8010e80:	2380      	movs	r3, #128	@ 0x80
 8010e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e86:	e172      	b.n	801116e <UART_SetConfig+0x7ae>
 8010e88:	697b      	ldr	r3, [r7, #20]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	4a5b      	ldr	r2, [pc, #364]	@ (8010ffc <UART_SetConfig+0x63c>)
 8010e8e:	4293      	cmp	r3, r2
 8010e90:	d130      	bne.n	8010ef4 <UART_SetConfig+0x534>
 8010e92:	4b58      	ldr	r3, [pc, #352]	@ (8010ff4 <UART_SetConfig+0x634>)
 8010e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010e96:	f003 0307 	and.w	r3, r3, #7
 8010e9a:	2b05      	cmp	r3, #5
 8010e9c:	d826      	bhi.n	8010eec <UART_SetConfig+0x52c>
 8010e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8010ea4 <UART_SetConfig+0x4e4>)
 8010ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ea4:	08010ebd 	.word	0x08010ebd
 8010ea8:	08010ec5 	.word	0x08010ec5
 8010eac:	08010ecd 	.word	0x08010ecd
 8010eb0:	08010ed5 	.word	0x08010ed5
 8010eb4:	08010edd 	.word	0x08010edd
 8010eb8:	08010ee5 	.word	0x08010ee5
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ec2:	e154      	b.n	801116e <UART_SetConfig+0x7ae>
 8010ec4:	2304      	movs	r3, #4
 8010ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010eca:	e150      	b.n	801116e <UART_SetConfig+0x7ae>
 8010ecc:	2308      	movs	r3, #8
 8010ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ed2:	e14c      	b.n	801116e <UART_SetConfig+0x7ae>
 8010ed4:	2310      	movs	r3, #16
 8010ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010eda:	e148      	b.n	801116e <UART_SetConfig+0x7ae>
 8010edc:	2320      	movs	r3, #32
 8010ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ee2:	e144      	b.n	801116e <UART_SetConfig+0x7ae>
 8010ee4:	2340      	movs	r3, #64	@ 0x40
 8010ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010eea:	e140      	b.n	801116e <UART_SetConfig+0x7ae>
 8010eec:	2380      	movs	r3, #128	@ 0x80
 8010eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ef2:	e13c      	b.n	801116e <UART_SetConfig+0x7ae>
 8010ef4:	697b      	ldr	r3, [r7, #20]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	4a41      	ldr	r2, [pc, #260]	@ (8011000 <UART_SetConfig+0x640>)
 8010efa:	4293      	cmp	r3, r2
 8010efc:	f040 8082 	bne.w	8011004 <UART_SetConfig+0x644>
 8010f00:	4b3c      	ldr	r3, [pc, #240]	@ (8010ff4 <UART_SetConfig+0x634>)
 8010f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010f04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010f08:	2b28      	cmp	r3, #40	@ 0x28
 8010f0a:	d86d      	bhi.n	8010fe8 <UART_SetConfig+0x628>
 8010f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8010f14 <UART_SetConfig+0x554>)
 8010f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f12:	bf00      	nop
 8010f14:	08010fb9 	.word	0x08010fb9
 8010f18:	08010fe9 	.word	0x08010fe9
 8010f1c:	08010fe9 	.word	0x08010fe9
 8010f20:	08010fe9 	.word	0x08010fe9
 8010f24:	08010fe9 	.word	0x08010fe9
 8010f28:	08010fe9 	.word	0x08010fe9
 8010f2c:	08010fe9 	.word	0x08010fe9
 8010f30:	08010fe9 	.word	0x08010fe9
 8010f34:	08010fc1 	.word	0x08010fc1
 8010f38:	08010fe9 	.word	0x08010fe9
 8010f3c:	08010fe9 	.word	0x08010fe9
 8010f40:	08010fe9 	.word	0x08010fe9
 8010f44:	08010fe9 	.word	0x08010fe9
 8010f48:	08010fe9 	.word	0x08010fe9
 8010f4c:	08010fe9 	.word	0x08010fe9
 8010f50:	08010fe9 	.word	0x08010fe9
 8010f54:	08010fc9 	.word	0x08010fc9
 8010f58:	08010fe9 	.word	0x08010fe9
 8010f5c:	08010fe9 	.word	0x08010fe9
 8010f60:	08010fe9 	.word	0x08010fe9
 8010f64:	08010fe9 	.word	0x08010fe9
 8010f68:	08010fe9 	.word	0x08010fe9
 8010f6c:	08010fe9 	.word	0x08010fe9
 8010f70:	08010fe9 	.word	0x08010fe9
 8010f74:	08010fd1 	.word	0x08010fd1
 8010f78:	08010fe9 	.word	0x08010fe9
 8010f7c:	08010fe9 	.word	0x08010fe9
 8010f80:	08010fe9 	.word	0x08010fe9
 8010f84:	08010fe9 	.word	0x08010fe9
 8010f88:	08010fe9 	.word	0x08010fe9
 8010f8c:	08010fe9 	.word	0x08010fe9
 8010f90:	08010fe9 	.word	0x08010fe9
 8010f94:	08010fd9 	.word	0x08010fd9
 8010f98:	08010fe9 	.word	0x08010fe9
 8010f9c:	08010fe9 	.word	0x08010fe9
 8010fa0:	08010fe9 	.word	0x08010fe9
 8010fa4:	08010fe9 	.word	0x08010fe9
 8010fa8:	08010fe9 	.word	0x08010fe9
 8010fac:	08010fe9 	.word	0x08010fe9
 8010fb0:	08010fe9 	.word	0x08010fe9
 8010fb4:	08010fe1 	.word	0x08010fe1
 8010fb8:	2301      	movs	r3, #1
 8010fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010fbe:	e0d6      	b.n	801116e <UART_SetConfig+0x7ae>
 8010fc0:	2304      	movs	r3, #4
 8010fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010fc6:	e0d2      	b.n	801116e <UART_SetConfig+0x7ae>
 8010fc8:	2308      	movs	r3, #8
 8010fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010fce:	e0ce      	b.n	801116e <UART_SetConfig+0x7ae>
 8010fd0:	2310      	movs	r3, #16
 8010fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010fd6:	e0ca      	b.n	801116e <UART_SetConfig+0x7ae>
 8010fd8:	2320      	movs	r3, #32
 8010fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010fde:	e0c6      	b.n	801116e <UART_SetConfig+0x7ae>
 8010fe0:	2340      	movs	r3, #64	@ 0x40
 8010fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010fe6:	e0c2      	b.n	801116e <UART_SetConfig+0x7ae>
 8010fe8:	2380      	movs	r3, #128	@ 0x80
 8010fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010fee:	e0be      	b.n	801116e <UART_SetConfig+0x7ae>
 8010ff0:	40011400 	.word	0x40011400
 8010ff4:	58024400 	.word	0x58024400
 8010ff8:	40007800 	.word	0x40007800
 8010ffc:	40007c00 	.word	0x40007c00
 8011000:	40011800 	.word	0x40011800
 8011004:	697b      	ldr	r3, [r7, #20]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	4aad      	ldr	r2, [pc, #692]	@ (80112c0 <UART_SetConfig+0x900>)
 801100a:	4293      	cmp	r3, r2
 801100c:	d176      	bne.n	80110fc <UART_SetConfig+0x73c>
 801100e:	4bad      	ldr	r3, [pc, #692]	@ (80112c4 <UART_SetConfig+0x904>)
 8011010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011012:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011016:	2b28      	cmp	r3, #40	@ 0x28
 8011018:	d86c      	bhi.n	80110f4 <UART_SetConfig+0x734>
 801101a:	a201      	add	r2, pc, #4	@ (adr r2, 8011020 <UART_SetConfig+0x660>)
 801101c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011020:	080110c5 	.word	0x080110c5
 8011024:	080110f5 	.word	0x080110f5
 8011028:	080110f5 	.word	0x080110f5
 801102c:	080110f5 	.word	0x080110f5
 8011030:	080110f5 	.word	0x080110f5
 8011034:	080110f5 	.word	0x080110f5
 8011038:	080110f5 	.word	0x080110f5
 801103c:	080110f5 	.word	0x080110f5
 8011040:	080110cd 	.word	0x080110cd
 8011044:	080110f5 	.word	0x080110f5
 8011048:	080110f5 	.word	0x080110f5
 801104c:	080110f5 	.word	0x080110f5
 8011050:	080110f5 	.word	0x080110f5
 8011054:	080110f5 	.word	0x080110f5
 8011058:	080110f5 	.word	0x080110f5
 801105c:	080110f5 	.word	0x080110f5
 8011060:	080110d5 	.word	0x080110d5
 8011064:	080110f5 	.word	0x080110f5
 8011068:	080110f5 	.word	0x080110f5
 801106c:	080110f5 	.word	0x080110f5
 8011070:	080110f5 	.word	0x080110f5
 8011074:	080110f5 	.word	0x080110f5
 8011078:	080110f5 	.word	0x080110f5
 801107c:	080110f5 	.word	0x080110f5
 8011080:	080110dd 	.word	0x080110dd
 8011084:	080110f5 	.word	0x080110f5
 8011088:	080110f5 	.word	0x080110f5
 801108c:	080110f5 	.word	0x080110f5
 8011090:	080110f5 	.word	0x080110f5
 8011094:	080110f5 	.word	0x080110f5
 8011098:	080110f5 	.word	0x080110f5
 801109c:	080110f5 	.word	0x080110f5
 80110a0:	080110e5 	.word	0x080110e5
 80110a4:	080110f5 	.word	0x080110f5
 80110a8:	080110f5 	.word	0x080110f5
 80110ac:	080110f5 	.word	0x080110f5
 80110b0:	080110f5 	.word	0x080110f5
 80110b4:	080110f5 	.word	0x080110f5
 80110b8:	080110f5 	.word	0x080110f5
 80110bc:	080110f5 	.word	0x080110f5
 80110c0:	080110ed 	.word	0x080110ed
 80110c4:	2301      	movs	r3, #1
 80110c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80110ca:	e050      	b.n	801116e <UART_SetConfig+0x7ae>
 80110cc:	2304      	movs	r3, #4
 80110ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80110d2:	e04c      	b.n	801116e <UART_SetConfig+0x7ae>
 80110d4:	2308      	movs	r3, #8
 80110d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80110da:	e048      	b.n	801116e <UART_SetConfig+0x7ae>
 80110dc:	2310      	movs	r3, #16
 80110de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80110e2:	e044      	b.n	801116e <UART_SetConfig+0x7ae>
 80110e4:	2320      	movs	r3, #32
 80110e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80110ea:	e040      	b.n	801116e <UART_SetConfig+0x7ae>
 80110ec:	2340      	movs	r3, #64	@ 0x40
 80110ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80110f2:	e03c      	b.n	801116e <UART_SetConfig+0x7ae>
 80110f4:	2380      	movs	r3, #128	@ 0x80
 80110f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80110fa:	e038      	b.n	801116e <UART_SetConfig+0x7ae>
 80110fc:	697b      	ldr	r3, [r7, #20]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	4a71      	ldr	r2, [pc, #452]	@ (80112c8 <UART_SetConfig+0x908>)
 8011102:	4293      	cmp	r3, r2
 8011104:	d130      	bne.n	8011168 <UART_SetConfig+0x7a8>
 8011106:	4b6f      	ldr	r3, [pc, #444]	@ (80112c4 <UART_SetConfig+0x904>)
 8011108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801110a:	f003 0307 	and.w	r3, r3, #7
 801110e:	2b05      	cmp	r3, #5
 8011110:	d826      	bhi.n	8011160 <UART_SetConfig+0x7a0>
 8011112:	a201      	add	r2, pc, #4	@ (adr r2, 8011118 <UART_SetConfig+0x758>)
 8011114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011118:	08011131 	.word	0x08011131
 801111c:	08011139 	.word	0x08011139
 8011120:	08011141 	.word	0x08011141
 8011124:	08011149 	.word	0x08011149
 8011128:	08011151 	.word	0x08011151
 801112c:	08011159 	.word	0x08011159
 8011130:	2302      	movs	r3, #2
 8011132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011136:	e01a      	b.n	801116e <UART_SetConfig+0x7ae>
 8011138:	2304      	movs	r3, #4
 801113a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801113e:	e016      	b.n	801116e <UART_SetConfig+0x7ae>
 8011140:	2308      	movs	r3, #8
 8011142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011146:	e012      	b.n	801116e <UART_SetConfig+0x7ae>
 8011148:	2310      	movs	r3, #16
 801114a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801114e:	e00e      	b.n	801116e <UART_SetConfig+0x7ae>
 8011150:	2320      	movs	r3, #32
 8011152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011156:	e00a      	b.n	801116e <UART_SetConfig+0x7ae>
 8011158:	2340      	movs	r3, #64	@ 0x40
 801115a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801115e:	e006      	b.n	801116e <UART_SetConfig+0x7ae>
 8011160:	2380      	movs	r3, #128	@ 0x80
 8011162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011166:	e002      	b.n	801116e <UART_SetConfig+0x7ae>
 8011168:	2380      	movs	r3, #128	@ 0x80
 801116a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801116e:	697b      	ldr	r3, [r7, #20]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	4a55      	ldr	r2, [pc, #340]	@ (80112c8 <UART_SetConfig+0x908>)
 8011174:	4293      	cmp	r3, r2
 8011176:	f040 80f8 	bne.w	801136a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801117a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801117e:	2b20      	cmp	r3, #32
 8011180:	dc46      	bgt.n	8011210 <UART_SetConfig+0x850>
 8011182:	2b02      	cmp	r3, #2
 8011184:	db75      	blt.n	8011272 <UART_SetConfig+0x8b2>
 8011186:	3b02      	subs	r3, #2
 8011188:	2b1e      	cmp	r3, #30
 801118a:	d872      	bhi.n	8011272 <UART_SetConfig+0x8b2>
 801118c:	a201      	add	r2, pc, #4	@ (adr r2, 8011194 <UART_SetConfig+0x7d4>)
 801118e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011192:	bf00      	nop
 8011194:	08011217 	.word	0x08011217
 8011198:	08011273 	.word	0x08011273
 801119c:	0801121f 	.word	0x0801121f
 80111a0:	08011273 	.word	0x08011273
 80111a4:	08011273 	.word	0x08011273
 80111a8:	08011273 	.word	0x08011273
 80111ac:	0801122f 	.word	0x0801122f
 80111b0:	08011273 	.word	0x08011273
 80111b4:	08011273 	.word	0x08011273
 80111b8:	08011273 	.word	0x08011273
 80111bc:	08011273 	.word	0x08011273
 80111c0:	08011273 	.word	0x08011273
 80111c4:	08011273 	.word	0x08011273
 80111c8:	08011273 	.word	0x08011273
 80111cc:	0801123f 	.word	0x0801123f
 80111d0:	08011273 	.word	0x08011273
 80111d4:	08011273 	.word	0x08011273
 80111d8:	08011273 	.word	0x08011273
 80111dc:	08011273 	.word	0x08011273
 80111e0:	08011273 	.word	0x08011273
 80111e4:	08011273 	.word	0x08011273
 80111e8:	08011273 	.word	0x08011273
 80111ec:	08011273 	.word	0x08011273
 80111f0:	08011273 	.word	0x08011273
 80111f4:	08011273 	.word	0x08011273
 80111f8:	08011273 	.word	0x08011273
 80111fc:	08011273 	.word	0x08011273
 8011200:	08011273 	.word	0x08011273
 8011204:	08011273 	.word	0x08011273
 8011208:	08011273 	.word	0x08011273
 801120c:	08011265 	.word	0x08011265
 8011210:	2b40      	cmp	r3, #64	@ 0x40
 8011212:	d02a      	beq.n	801126a <UART_SetConfig+0x8aa>
 8011214:	e02d      	b.n	8011272 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011216:	f7fc fb73 	bl	800d900 <HAL_RCCEx_GetD3PCLK1Freq>
 801121a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801121c:	e02f      	b.n	801127e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801121e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011222:	4618      	mov	r0, r3
 8011224:	f7fc fb82 	bl	800d92c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801122a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801122c:	e027      	b.n	801127e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801122e:	f107 0318 	add.w	r3, r7, #24
 8011232:	4618      	mov	r0, r3
 8011234:	f7fc fcce 	bl	800dbd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011238:	69fb      	ldr	r3, [r7, #28]
 801123a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801123c:	e01f      	b.n	801127e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801123e:	4b21      	ldr	r3, [pc, #132]	@ (80112c4 <UART_SetConfig+0x904>)
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	f003 0320 	and.w	r3, r3, #32
 8011246:	2b00      	cmp	r3, #0
 8011248:	d009      	beq.n	801125e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801124a:	4b1e      	ldr	r3, [pc, #120]	@ (80112c4 <UART_SetConfig+0x904>)
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	08db      	lsrs	r3, r3, #3
 8011250:	f003 0303 	and.w	r3, r3, #3
 8011254:	4a1d      	ldr	r2, [pc, #116]	@ (80112cc <UART_SetConfig+0x90c>)
 8011256:	fa22 f303 	lsr.w	r3, r2, r3
 801125a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801125c:	e00f      	b.n	801127e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801125e:	4b1b      	ldr	r3, [pc, #108]	@ (80112cc <UART_SetConfig+0x90c>)
 8011260:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011262:	e00c      	b.n	801127e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011264:	4b1a      	ldr	r3, [pc, #104]	@ (80112d0 <UART_SetConfig+0x910>)
 8011266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011268:	e009      	b.n	801127e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801126a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801126e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011270:	e005      	b.n	801127e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011272:	2300      	movs	r3, #0
 8011274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8011276:	2301      	movs	r3, #1
 8011278:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801127c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801127e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011280:	2b00      	cmp	r3, #0
 8011282:	f000 81ee 	beq.w	8011662 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011286:	697b      	ldr	r3, [r7, #20]
 8011288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801128a:	4a12      	ldr	r2, [pc, #72]	@ (80112d4 <UART_SetConfig+0x914>)
 801128c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011290:	461a      	mov	r2, r3
 8011292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011294:	fbb3 f3f2 	udiv	r3, r3, r2
 8011298:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801129a:	697b      	ldr	r3, [r7, #20]
 801129c:	685a      	ldr	r2, [r3, #4]
 801129e:	4613      	mov	r3, r2
 80112a0:	005b      	lsls	r3, r3, #1
 80112a2:	4413      	add	r3, r2
 80112a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80112a6:	429a      	cmp	r2, r3
 80112a8:	d305      	bcc.n	80112b6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80112aa:	697b      	ldr	r3, [r7, #20]
 80112ac:	685b      	ldr	r3, [r3, #4]
 80112ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80112b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80112b2:	429a      	cmp	r2, r3
 80112b4:	d910      	bls.n	80112d8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80112b6:	2301      	movs	r3, #1
 80112b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80112bc:	e1d1      	b.n	8011662 <UART_SetConfig+0xca2>
 80112be:	bf00      	nop
 80112c0:	40011c00 	.word	0x40011c00
 80112c4:	58024400 	.word	0x58024400
 80112c8:	58000c00 	.word	0x58000c00
 80112cc:	03d09000 	.word	0x03d09000
 80112d0:	003d0900 	.word	0x003d0900
 80112d4:	0802ca18 	.word	0x0802ca18
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80112d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80112da:	2200      	movs	r2, #0
 80112dc:	60bb      	str	r3, [r7, #8]
 80112de:	60fa      	str	r2, [r7, #12]
 80112e0:	697b      	ldr	r3, [r7, #20]
 80112e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112e4:	4ac0      	ldr	r2, [pc, #768]	@ (80115e8 <UART_SetConfig+0xc28>)
 80112e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80112ea:	b29b      	uxth	r3, r3
 80112ec:	2200      	movs	r2, #0
 80112ee:	603b      	str	r3, [r7, #0]
 80112f0:	607a      	str	r2, [r7, #4]
 80112f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80112f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80112fa:	f7ef f861 	bl	80003c0 <__aeabi_uldivmod>
 80112fe:	4602      	mov	r2, r0
 8011300:	460b      	mov	r3, r1
 8011302:	4610      	mov	r0, r2
 8011304:	4619      	mov	r1, r3
 8011306:	f04f 0200 	mov.w	r2, #0
 801130a:	f04f 0300 	mov.w	r3, #0
 801130e:	020b      	lsls	r3, r1, #8
 8011310:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011314:	0202      	lsls	r2, r0, #8
 8011316:	6979      	ldr	r1, [r7, #20]
 8011318:	6849      	ldr	r1, [r1, #4]
 801131a:	0849      	lsrs	r1, r1, #1
 801131c:	2000      	movs	r0, #0
 801131e:	460c      	mov	r4, r1
 8011320:	4605      	mov	r5, r0
 8011322:	eb12 0804 	adds.w	r8, r2, r4
 8011326:	eb43 0905 	adc.w	r9, r3, r5
 801132a:	697b      	ldr	r3, [r7, #20]
 801132c:	685b      	ldr	r3, [r3, #4]
 801132e:	2200      	movs	r2, #0
 8011330:	469a      	mov	sl, r3
 8011332:	4693      	mov	fp, r2
 8011334:	4652      	mov	r2, sl
 8011336:	465b      	mov	r3, fp
 8011338:	4640      	mov	r0, r8
 801133a:	4649      	mov	r1, r9
 801133c:	f7ef f840 	bl	80003c0 <__aeabi_uldivmod>
 8011340:	4602      	mov	r2, r0
 8011342:	460b      	mov	r3, r1
 8011344:	4613      	mov	r3, r2
 8011346:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801134a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801134e:	d308      	bcc.n	8011362 <UART_SetConfig+0x9a2>
 8011350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011352:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011356:	d204      	bcs.n	8011362 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8011358:	697b      	ldr	r3, [r7, #20]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801135e:	60da      	str	r2, [r3, #12]
 8011360:	e17f      	b.n	8011662 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8011362:	2301      	movs	r3, #1
 8011364:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8011368:	e17b      	b.n	8011662 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801136a:	697b      	ldr	r3, [r7, #20]
 801136c:	69db      	ldr	r3, [r3, #28]
 801136e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011372:	f040 80bd 	bne.w	80114f0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8011376:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801137a:	2b20      	cmp	r3, #32
 801137c:	dc48      	bgt.n	8011410 <UART_SetConfig+0xa50>
 801137e:	2b00      	cmp	r3, #0
 8011380:	db7b      	blt.n	801147a <UART_SetConfig+0xaba>
 8011382:	2b20      	cmp	r3, #32
 8011384:	d879      	bhi.n	801147a <UART_SetConfig+0xaba>
 8011386:	a201      	add	r2, pc, #4	@ (adr r2, 801138c <UART_SetConfig+0x9cc>)
 8011388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801138c:	08011417 	.word	0x08011417
 8011390:	0801141f 	.word	0x0801141f
 8011394:	0801147b 	.word	0x0801147b
 8011398:	0801147b 	.word	0x0801147b
 801139c:	08011427 	.word	0x08011427
 80113a0:	0801147b 	.word	0x0801147b
 80113a4:	0801147b 	.word	0x0801147b
 80113a8:	0801147b 	.word	0x0801147b
 80113ac:	08011437 	.word	0x08011437
 80113b0:	0801147b 	.word	0x0801147b
 80113b4:	0801147b 	.word	0x0801147b
 80113b8:	0801147b 	.word	0x0801147b
 80113bc:	0801147b 	.word	0x0801147b
 80113c0:	0801147b 	.word	0x0801147b
 80113c4:	0801147b 	.word	0x0801147b
 80113c8:	0801147b 	.word	0x0801147b
 80113cc:	08011447 	.word	0x08011447
 80113d0:	0801147b 	.word	0x0801147b
 80113d4:	0801147b 	.word	0x0801147b
 80113d8:	0801147b 	.word	0x0801147b
 80113dc:	0801147b 	.word	0x0801147b
 80113e0:	0801147b 	.word	0x0801147b
 80113e4:	0801147b 	.word	0x0801147b
 80113e8:	0801147b 	.word	0x0801147b
 80113ec:	0801147b 	.word	0x0801147b
 80113f0:	0801147b 	.word	0x0801147b
 80113f4:	0801147b 	.word	0x0801147b
 80113f8:	0801147b 	.word	0x0801147b
 80113fc:	0801147b 	.word	0x0801147b
 8011400:	0801147b 	.word	0x0801147b
 8011404:	0801147b 	.word	0x0801147b
 8011408:	0801147b 	.word	0x0801147b
 801140c:	0801146d 	.word	0x0801146d
 8011410:	2b40      	cmp	r3, #64	@ 0x40
 8011412:	d02e      	beq.n	8011472 <UART_SetConfig+0xab2>
 8011414:	e031      	b.n	801147a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011416:	f7fb f8a7 	bl	800c568 <HAL_RCC_GetPCLK1Freq>
 801141a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801141c:	e033      	b.n	8011486 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801141e:	f7fb f8b9 	bl	800c594 <HAL_RCC_GetPCLK2Freq>
 8011422:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011424:	e02f      	b.n	8011486 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011426:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801142a:	4618      	mov	r0, r3
 801142c:	f7fc fa7e 	bl	800d92c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011434:	e027      	b.n	8011486 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011436:	f107 0318 	add.w	r3, r7, #24
 801143a:	4618      	mov	r0, r3
 801143c:	f7fc fbca 	bl	800dbd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011440:	69fb      	ldr	r3, [r7, #28]
 8011442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011444:	e01f      	b.n	8011486 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011446:	4b69      	ldr	r3, [pc, #420]	@ (80115ec <UART_SetConfig+0xc2c>)
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	f003 0320 	and.w	r3, r3, #32
 801144e:	2b00      	cmp	r3, #0
 8011450:	d009      	beq.n	8011466 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011452:	4b66      	ldr	r3, [pc, #408]	@ (80115ec <UART_SetConfig+0xc2c>)
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	08db      	lsrs	r3, r3, #3
 8011458:	f003 0303 	and.w	r3, r3, #3
 801145c:	4a64      	ldr	r2, [pc, #400]	@ (80115f0 <UART_SetConfig+0xc30>)
 801145e:	fa22 f303 	lsr.w	r3, r2, r3
 8011462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011464:	e00f      	b.n	8011486 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8011466:	4b62      	ldr	r3, [pc, #392]	@ (80115f0 <UART_SetConfig+0xc30>)
 8011468:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801146a:	e00c      	b.n	8011486 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801146c:	4b61      	ldr	r3, [pc, #388]	@ (80115f4 <UART_SetConfig+0xc34>)
 801146e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011470:	e009      	b.n	8011486 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011472:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011478:	e005      	b.n	8011486 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801147a:	2300      	movs	r3, #0
 801147c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801147e:	2301      	movs	r3, #1
 8011480:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8011484:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011488:	2b00      	cmp	r3, #0
 801148a:	f000 80ea 	beq.w	8011662 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801148e:	697b      	ldr	r3, [r7, #20]
 8011490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011492:	4a55      	ldr	r2, [pc, #340]	@ (80115e8 <UART_SetConfig+0xc28>)
 8011494:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011498:	461a      	mov	r2, r3
 801149a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801149c:	fbb3 f3f2 	udiv	r3, r3, r2
 80114a0:	005a      	lsls	r2, r3, #1
 80114a2:	697b      	ldr	r3, [r7, #20]
 80114a4:	685b      	ldr	r3, [r3, #4]
 80114a6:	085b      	lsrs	r3, r3, #1
 80114a8:	441a      	add	r2, r3
 80114aa:	697b      	ldr	r3, [r7, #20]
 80114ac:	685b      	ldr	r3, [r3, #4]
 80114ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80114b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80114b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114b6:	2b0f      	cmp	r3, #15
 80114b8:	d916      	bls.n	80114e8 <UART_SetConfig+0xb28>
 80114ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80114c0:	d212      	bcs.n	80114e8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80114c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114c4:	b29b      	uxth	r3, r3
 80114c6:	f023 030f 	bic.w	r3, r3, #15
 80114ca:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80114cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114ce:	085b      	lsrs	r3, r3, #1
 80114d0:	b29b      	uxth	r3, r3
 80114d2:	f003 0307 	and.w	r3, r3, #7
 80114d6:	b29a      	uxth	r2, r3
 80114d8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80114da:	4313      	orrs	r3, r2
 80114dc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80114de:	697b      	ldr	r3, [r7, #20]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80114e4:	60da      	str	r2, [r3, #12]
 80114e6:	e0bc      	b.n	8011662 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80114e8:	2301      	movs	r3, #1
 80114ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80114ee:	e0b8      	b.n	8011662 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80114f0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80114f4:	2b20      	cmp	r3, #32
 80114f6:	dc4b      	bgt.n	8011590 <UART_SetConfig+0xbd0>
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	f2c0 8087 	blt.w	801160c <UART_SetConfig+0xc4c>
 80114fe:	2b20      	cmp	r3, #32
 8011500:	f200 8084 	bhi.w	801160c <UART_SetConfig+0xc4c>
 8011504:	a201      	add	r2, pc, #4	@ (adr r2, 801150c <UART_SetConfig+0xb4c>)
 8011506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801150a:	bf00      	nop
 801150c:	08011597 	.word	0x08011597
 8011510:	0801159f 	.word	0x0801159f
 8011514:	0801160d 	.word	0x0801160d
 8011518:	0801160d 	.word	0x0801160d
 801151c:	080115a7 	.word	0x080115a7
 8011520:	0801160d 	.word	0x0801160d
 8011524:	0801160d 	.word	0x0801160d
 8011528:	0801160d 	.word	0x0801160d
 801152c:	080115b7 	.word	0x080115b7
 8011530:	0801160d 	.word	0x0801160d
 8011534:	0801160d 	.word	0x0801160d
 8011538:	0801160d 	.word	0x0801160d
 801153c:	0801160d 	.word	0x0801160d
 8011540:	0801160d 	.word	0x0801160d
 8011544:	0801160d 	.word	0x0801160d
 8011548:	0801160d 	.word	0x0801160d
 801154c:	080115c7 	.word	0x080115c7
 8011550:	0801160d 	.word	0x0801160d
 8011554:	0801160d 	.word	0x0801160d
 8011558:	0801160d 	.word	0x0801160d
 801155c:	0801160d 	.word	0x0801160d
 8011560:	0801160d 	.word	0x0801160d
 8011564:	0801160d 	.word	0x0801160d
 8011568:	0801160d 	.word	0x0801160d
 801156c:	0801160d 	.word	0x0801160d
 8011570:	0801160d 	.word	0x0801160d
 8011574:	0801160d 	.word	0x0801160d
 8011578:	0801160d 	.word	0x0801160d
 801157c:	0801160d 	.word	0x0801160d
 8011580:	0801160d 	.word	0x0801160d
 8011584:	0801160d 	.word	0x0801160d
 8011588:	0801160d 	.word	0x0801160d
 801158c:	080115ff 	.word	0x080115ff
 8011590:	2b40      	cmp	r3, #64	@ 0x40
 8011592:	d037      	beq.n	8011604 <UART_SetConfig+0xc44>
 8011594:	e03a      	b.n	801160c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011596:	f7fa ffe7 	bl	800c568 <HAL_RCC_GetPCLK1Freq>
 801159a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801159c:	e03c      	b.n	8011618 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801159e:	f7fa fff9 	bl	800c594 <HAL_RCC_GetPCLK2Freq>
 80115a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80115a4:	e038      	b.n	8011618 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80115a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80115aa:	4618      	mov	r0, r3
 80115ac:	f7fc f9be 	bl	800d92c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80115b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80115b4:	e030      	b.n	8011618 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80115b6:	f107 0318 	add.w	r3, r7, #24
 80115ba:	4618      	mov	r0, r3
 80115bc:	f7fc fb0a 	bl	800dbd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80115c0:	69fb      	ldr	r3, [r7, #28]
 80115c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80115c4:	e028      	b.n	8011618 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80115c6:	4b09      	ldr	r3, [pc, #36]	@ (80115ec <UART_SetConfig+0xc2c>)
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	f003 0320 	and.w	r3, r3, #32
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d012      	beq.n	80115f8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80115d2:	4b06      	ldr	r3, [pc, #24]	@ (80115ec <UART_SetConfig+0xc2c>)
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	08db      	lsrs	r3, r3, #3
 80115d8:	f003 0303 	and.w	r3, r3, #3
 80115dc:	4a04      	ldr	r2, [pc, #16]	@ (80115f0 <UART_SetConfig+0xc30>)
 80115de:	fa22 f303 	lsr.w	r3, r2, r3
 80115e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80115e4:	e018      	b.n	8011618 <UART_SetConfig+0xc58>
 80115e6:	bf00      	nop
 80115e8:	0802ca18 	.word	0x0802ca18
 80115ec:	58024400 	.word	0x58024400
 80115f0:	03d09000 	.word	0x03d09000
 80115f4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80115f8:	4b24      	ldr	r3, [pc, #144]	@ (801168c <UART_SetConfig+0xccc>)
 80115fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80115fc:	e00c      	b.n	8011618 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80115fe:	4b24      	ldr	r3, [pc, #144]	@ (8011690 <UART_SetConfig+0xcd0>)
 8011600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011602:	e009      	b.n	8011618 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011604:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801160a:	e005      	b.n	8011618 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 801160c:	2300      	movs	r3, #0
 801160e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8011610:	2301      	movs	r3, #1
 8011612:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8011616:	bf00      	nop
    }

    if (pclk != 0U)
 8011618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801161a:	2b00      	cmp	r3, #0
 801161c:	d021      	beq.n	8011662 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801161e:	697b      	ldr	r3, [r7, #20]
 8011620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011622:	4a1c      	ldr	r2, [pc, #112]	@ (8011694 <UART_SetConfig+0xcd4>)
 8011624:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011628:	461a      	mov	r2, r3
 801162a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801162c:	fbb3 f2f2 	udiv	r2, r3, r2
 8011630:	697b      	ldr	r3, [r7, #20]
 8011632:	685b      	ldr	r3, [r3, #4]
 8011634:	085b      	lsrs	r3, r3, #1
 8011636:	441a      	add	r2, r3
 8011638:	697b      	ldr	r3, [r7, #20]
 801163a:	685b      	ldr	r3, [r3, #4]
 801163c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011640:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011644:	2b0f      	cmp	r3, #15
 8011646:	d909      	bls.n	801165c <UART_SetConfig+0xc9c>
 8011648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801164a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801164e:	d205      	bcs.n	801165c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011652:	b29a      	uxth	r2, r3
 8011654:	697b      	ldr	r3, [r7, #20]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	60da      	str	r2, [r3, #12]
 801165a:	e002      	b.n	8011662 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 801165c:	2301      	movs	r3, #1
 801165e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011662:	697b      	ldr	r3, [r7, #20]
 8011664:	2201      	movs	r2, #1
 8011666:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801166a:	697b      	ldr	r3, [r7, #20]
 801166c:	2201      	movs	r2, #1
 801166e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011672:	697b      	ldr	r3, [r7, #20]
 8011674:	2200      	movs	r2, #0
 8011676:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8011678:	697b      	ldr	r3, [r7, #20]
 801167a:	2200      	movs	r2, #0
 801167c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801167e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8011682:	4618      	mov	r0, r3
 8011684:	3748      	adds	r7, #72	@ 0x48
 8011686:	46bd      	mov	sp, r7
 8011688:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801168c:	03d09000 	.word	0x03d09000
 8011690:	003d0900 	.word	0x003d0900
 8011694:	0802ca18 	.word	0x0802ca18

08011698 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011698:	b480      	push	{r7}
 801169a:	b083      	sub	sp, #12
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116a4:	f003 0308 	and.w	r3, r3, #8
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d00a      	beq.n	80116c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	685b      	ldr	r3, [r3, #4]
 80116b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	430a      	orrs	r2, r1
 80116c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116c6:	f003 0301 	and.w	r3, r3, #1
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d00a      	beq.n	80116e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	685b      	ldr	r3, [r3, #4]
 80116d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	430a      	orrs	r2, r1
 80116e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116e8:	f003 0302 	and.w	r3, r3, #2
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d00a      	beq.n	8011706 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	685b      	ldr	r3, [r3, #4]
 80116f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	430a      	orrs	r2, r1
 8011704:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801170a:	f003 0304 	and.w	r3, r3, #4
 801170e:	2b00      	cmp	r3, #0
 8011710:	d00a      	beq.n	8011728 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	685b      	ldr	r3, [r3, #4]
 8011718:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	430a      	orrs	r2, r1
 8011726:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801172c:	f003 0310 	and.w	r3, r3, #16
 8011730:	2b00      	cmp	r3, #0
 8011732:	d00a      	beq.n	801174a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	689b      	ldr	r3, [r3, #8]
 801173a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	430a      	orrs	r2, r1
 8011748:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801174e:	f003 0320 	and.w	r3, r3, #32
 8011752:	2b00      	cmp	r3, #0
 8011754:	d00a      	beq.n	801176c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	689b      	ldr	r3, [r3, #8]
 801175c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	430a      	orrs	r2, r1
 801176a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011774:	2b00      	cmp	r3, #0
 8011776:	d01a      	beq.n	80117ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	685b      	ldr	r3, [r3, #4]
 801177e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	430a      	orrs	r2, r1
 801178c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011792:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011796:	d10a      	bne.n	80117ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	685b      	ldr	r3, [r3, #4]
 801179e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	430a      	orrs	r2, r1
 80117ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80117b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d00a      	beq.n	80117d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	685b      	ldr	r3, [r3, #4]
 80117c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	430a      	orrs	r2, r1
 80117ce:	605a      	str	r2, [r3, #4]
  }
}
 80117d0:	bf00      	nop
 80117d2:	370c      	adds	r7, #12
 80117d4:	46bd      	mov	sp, r7
 80117d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117da:	4770      	bx	lr

080117dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b098      	sub	sp, #96	@ 0x60
 80117e0:	af02      	add	r7, sp, #8
 80117e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	2200      	movs	r2, #0
 80117e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80117ec:	f7f6 fd26 	bl	800823c <HAL_GetTick>
 80117f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	f003 0308 	and.w	r3, r3, #8
 80117fc:	2b08      	cmp	r3, #8
 80117fe:	d12f      	bne.n	8011860 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011800:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011804:	9300      	str	r3, [sp, #0]
 8011806:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011808:	2200      	movs	r2, #0
 801180a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801180e:	6878      	ldr	r0, [r7, #4]
 8011810:	f000 f88e 	bl	8011930 <UART_WaitOnFlagUntilTimeout>
 8011814:	4603      	mov	r3, r0
 8011816:	2b00      	cmp	r3, #0
 8011818:	d022      	beq.n	8011860 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011822:	e853 3f00 	ldrex	r3, [r3]
 8011826:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801182a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801182e:	653b      	str	r3, [r7, #80]	@ 0x50
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	461a      	mov	r2, r3
 8011836:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011838:	647b      	str	r3, [r7, #68]	@ 0x44
 801183a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801183c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801183e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011840:	e841 2300 	strex	r3, r2, [r1]
 8011844:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011848:	2b00      	cmp	r3, #0
 801184a:	d1e6      	bne.n	801181a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	2220      	movs	r2, #32
 8011850:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	2200      	movs	r2, #0
 8011858:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801185c:	2303      	movs	r3, #3
 801185e:	e063      	b.n	8011928 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	f003 0304 	and.w	r3, r3, #4
 801186a:	2b04      	cmp	r3, #4
 801186c:	d149      	bne.n	8011902 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801186e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011872:	9300      	str	r3, [sp, #0]
 8011874:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011876:	2200      	movs	r2, #0
 8011878:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801187c:	6878      	ldr	r0, [r7, #4]
 801187e:	f000 f857 	bl	8011930 <UART_WaitOnFlagUntilTimeout>
 8011882:	4603      	mov	r3, r0
 8011884:	2b00      	cmp	r3, #0
 8011886:	d03c      	beq.n	8011902 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801188e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011890:	e853 3f00 	ldrex	r3, [r3]
 8011894:	623b      	str	r3, [r7, #32]
   return(result);
 8011896:	6a3b      	ldr	r3, [r7, #32]
 8011898:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801189c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	461a      	mov	r2, r3
 80118a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80118a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80118ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80118ae:	e841 2300 	strex	r3, r2, [r1]
 80118b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80118b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d1e6      	bne.n	8011888 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	3308      	adds	r3, #8
 80118c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118c2:	693b      	ldr	r3, [r7, #16]
 80118c4:	e853 3f00 	ldrex	r3, [r3]
 80118c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	f023 0301 	bic.w	r3, r3, #1
 80118d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	3308      	adds	r3, #8
 80118d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80118da:	61fa      	str	r2, [r7, #28]
 80118dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118de:	69b9      	ldr	r1, [r7, #24]
 80118e0:	69fa      	ldr	r2, [r7, #28]
 80118e2:	e841 2300 	strex	r3, r2, [r1]
 80118e6:	617b      	str	r3, [r7, #20]
   return(result);
 80118e8:	697b      	ldr	r3, [r7, #20]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d1e5      	bne.n	80118ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	2220      	movs	r2, #32
 80118f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	2200      	movs	r2, #0
 80118fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80118fe:	2303      	movs	r3, #3
 8011900:	e012      	b.n	8011928 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	2220      	movs	r2, #32
 8011906:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	2220      	movs	r2, #32
 801190e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	2200      	movs	r2, #0
 8011916:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	2200      	movs	r2, #0
 801191c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	2200      	movs	r2, #0
 8011922:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011926:	2300      	movs	r3, #0
}
 8011928:	4618      	mov	r0, r3
 801192a:	3758      	adds	r7, #88	@ 0x58
 801192c:	46bd      	mov	sp, r7
 801192e:	bd80      	pop	{r7, pc}

08011930 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011930:	b580      	push	{r7, lr}
 8011932:	b084      	sub	sp, #16
 8011934:	af00      	add	r7, sp, #0
 8011936:	60f8      	str	r0, [r7, #12]
 8011938:	60b9      	str	r1, [r7, #8]
 801193a:	603b      	str	r3, [r7, #0]
 801193c:	4613      	mov	r3, r2
 801193e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011940:	e04f      	b.n	80119e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011942:	69bb      	ldr	r3, [r7, #24]
 8011944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011948:	d04b      	beq.n	80119e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801194a:	f7f6 fc77 	bl	800823c <HAL_GetTick>
 801194e:	4602      	mov	r2, r0
 8011950:	683b      	ldr	r3, [r7, #0]
 8011952:	1ad3      	subs	r3, r2, r3
 8011954:	69ba      	ldr	r2, [r7, #24]
 8011956:	429a      	cmp	r2, r3
 8011958:	d302      	bcc.n	8011960 <UART_WaitOnFlagUntilTimeout+0x30>
 801195a:	69bb      	ldr	r3, [r7, #24]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d101      	bne.n	8011964 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011960:	2303      	movs	r3, #3
 8011962:	e04e      	b.n	8011a02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	f003 0304 	and.w	r3, r3, #4
 801196e:	2b00      	cmp	r3, #0
 8011970:	d037      	beq.n	80119e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011972:	68bb      	ldr	r3, [r7, #8]
 8011974:	2b80      	cmp	r3, #128	@ 0x80
 8011976:	d034      	beq.n	80119e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011978:	68bb      	ldr	r3, [r7, #8]
 801197a:	2b40      	cmp	r3, #64	@ 0x40
 801197c:	d031      	beq.n	80119e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	69db      	ldr	r3, [r3, #28]
 8011984:	f003 0308 	and.w	r3, r3, #8
 8011988:	2b08      	cmp	r3, #8
 801198a:	d110      	bne.n	80119ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	2208      	movs	r2, #8
 8011992:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011994:	68f8      	ldr	r0, [r7, #12]
 8011996:	f000 f921 	bl	8011bdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	2208      	movs	r2, #8
 801199e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	2200      	movs	r2, #0
 80119a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80119aa:	2301      	movs	r3, #1
 80119ac:	e029      	b.n	8011a02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	69db      	ldr	r3, [r3, #28]
 80119b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80119b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80119bc:	d111      	bne.n	80119e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80119c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80119c8:	68f8      	ldr	r0, [r7, #12]
 80119ca:	f000 f907 	bl	8011bdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	2220      	movs	r2, #32
 80119d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	2200      	movs	r2, #0
 80119da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80119de:	2303      	movs	r3, #3
 80119e0:	e00f      	b.n	8011a02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	69da      	ldr	r2, [r3, #28]
 80119e8:	68bb      	ldr	r3, [r7, #8]
 80119ea:	4013      	ands	r3, r2
 80119ec:	68ba      	ldr	r2, [r7, #8]
 80119ee:	429a      	cmp	r2, r3
 80119f0:	bf0c      	ite	eq
 80119f2:	2301      	moveq	r3, #1
 80119f4:	2300      	movne	r3, #0
 80119f6:	b2db      	uxtb	r3, r3
 80119f8:	461a      	mov	r2, r3
 80119fa:	79fb      	ldrb	r3, [r7, #7]
 80119fc:	429a      	cmp	r2, r3
 80119fe:	d0a0      	beq.n	8011942 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011a00:	2300      	movs	r3, #0
}
 8011a02:	4618      	mov	r0, r3
 8011a04:	3710      	adds	r7, #16
 8011a06:	46bd      	mov	sp, r7
 8011a08:	bd80      	pop	{r7, pc}
	...

08011a0c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	b096      	sub	sp, #88	@ 0x58
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	60f8      	str	r0, [r7, #12]
 8011a14:	60b9      	str	r1, [r7, #8]
 8011a16:	4613      	mov	r3, r2
 8011a18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	68ba      	ldr	r2, [r7, #8]
 8011a1e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	88fa      	ldrh	r2, [r7, #6]
 8011a24:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	2222      	movs	r2, #34	@ 0x22
 8011a34:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d02d      	beq.n	8011a9e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011a48:	4a40      	ldr	r2, [pc, #256]	@ (8011b4c <UART_Start_Receive_DMA+0x140>)
 8011a4a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011a52:	4a3f      	ldr	r2, [pc, #252]	@ (8011b50 <UART_Start_Receive_DMA+0x144>)
 8011a54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011a5c:	4a3d      	ldr	r2, [pc, #244]	@ (8011b54 <UART_Start_Receive_DMA+0x148>)
 8011a5e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011a66:	2200      	movs	r2, #0
 8011a68:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	3324      	adds	r3, #36	@ 0x24
 8011a76:	4619      	mov	r1, r3
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011a7c:	461a      	mov	r2, r3
 8011a7e:	88fb      	ldrh	r3, [r7, #6]
 8011a80:	f7f7 f91e 	bl	8008cc0 <HAL_DMA_Start_IT>
 8011a84:	4603      	mov	r3, r0
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d009      	beq.n	8011a9e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	2210      	movs	r2, #16
 8011a8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	2220      	movs	r2, #32
 8011a96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8011a9a:	2301      	movs	r3, #1
 8011a9c:	e051      	b.n	8011b42 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	691b      	ldr	r3, [r3, #16]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d018      	beq.n	8011ad8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011aac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011aae:	e853 3f00 	ldrex	r3, [r3]
 8011ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ab6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011aba:	657b      	str	r3, [r7, #84]	@ 0x54
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	461a      	mov	r2, r3
 8011ac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011ac6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ac8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011aca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011acc:	e841 2300 	strex	r3, r2, [r1]
 8011ad0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8011ad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d1e6      	bne.n	8011aa6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	3308      	adds	r3, #8
 8011ade:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ae2:	e853 3f00 	ldrex	r3, [r3]
 8011ae6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011aea:	f043 0301 	orr.w	r3, r3, #1
 8011aee:	653b      	str	r3, [r7, #80]	@ 0x50
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	3308      	adds	r3, #8
 8011af6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011af8:	637a      	str	r2, [r7, #52]	@ 0x34
 8011afa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011afc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011afe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011b00:	e841 2300 	strex	r3, r2, [r1]
 8011b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8011b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d1e5      	bne.n	8011ad8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	3308      	adds	r3, #8
 8011b12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b14:	697b      	ldr	r3, [r7, #20]
 8011b16:	e853 3f00 	ldrex	r3, [r3]
 8011b1a:	613b      	str	r3, [r7, #16]
   return(result);
 8011b1c:	693b      	ldr	r3, [r7, #16]
 8011b1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	3308      	adds	r3, #8
 8011b2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011b2c:	623a      	str	r2, [r7, #32]
 8011b2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b30:	69f9      	ldr	r1, [r7, #28]
 8011b32:	6a3a      	ldr	r2, [r7, #32]
 8011b34:	e841 2300 	strex	r3, r2, [r1]
 8011b38:	61bb      	str	r3, [r7, #24]
   return(result);
 8011b3a:	69bb      	ldr	r3, [r7, #24]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d1e5      	bne.n	8011b0c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8011b40:	2300      	movs	r3, #0
}
 8011b42:	4618      	mov	r0, r3
 8011b44:	3758      	adds	r7, #88	@ 0x58
 8011b46:	46bd      	mov	sp, r7
 8011b48:	bd80      	pop	{r7, pc}
 8011b4a:	bf00      	nop
 8011b4c:	08011d5b 	.word	0x08011d5b
 8011b50:	08011e83 	.word	0x08011e83
 8011b54:	08011ec1 	.word	0x08011ec1

08011b58 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011b58:	b480      	push	{r7}
 8011b5a:	b08f      	sub	sp, #60	@ 0x3c
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b66:	6a3b      	ldr	r3, [r7, #32]
 8011b68:	e853 3f00 	ldrex	r3, [r3]
 8011b6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8011b6e:	69fb      	ldr	r3, [r7, #28]
 8011b70:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8011b74:	637b      	str	r3, [r7, #52]	@ 0x34
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	461a      	mov	r2, r3
 8011b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011b80:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011b84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011b86:	e841 2300 	strex	r3, r2, [r1]
 8011b8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d1e6      	bne.n	8011b60 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	3308      	adds	r3, #8
 8011b98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	e853 3f00 	ldrex	r3, [r3]
 8011ba0:	60bb      	str	r3, [r7, #8]
   return(result);
 8011ba2:	68bb      	ldr	r3, [r7, #8]
 8011ba4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8011ba8:	633b      	str	r3, [r7, #48]	@ 0x30
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	3308      	adds	r3, #8
 8011bb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011bb2:	61ba      	str	r2, [r7, #24]
 8011bb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bb6:	6979      	ldr	r1, [r7, #20]
 8011bb8:	69ba      	ldr	r2, [r7, #24]
 8011bba:	e841 2300 	strex	r3, r2, [r1]
 8011bbe:	613b      	str	r3, [r7, #16]
   return(result);
 8011bc0:	693b      	ldr	r3, [r7, #16]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d1e5      	bne.n	8011b92 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	2220      	movs	r2, #32
 8011bca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8011bce:	bf00      	nop
 8011bd0:	373c      	adds	r7, #60	@ 0x3c
 8011bd2:	46bd      	mov	sp, r7
 8011bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd8:	4770      	bx	lr
	...

08011bdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011bdc:	b480      	push	{r7}
 8011bde:	b095      	sub	sp, #84	@ 0x54
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011bec:	e853 3f00 	ldrex	r3, [r3]
 8011bf0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bf4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011bf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	461a      	mov	r2, r3
 8011c00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c02:	643b      	str	r3, [r7, #64]	@ 0x40
 8011c04:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011c08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011c0a:	e841 2300 	strex	r3, r2, [r1]
 8011c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d1e6      	bne.n	8011be4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	3308      	adds	r3, #8
 8011c1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c1e:	6a3b      	ldr	r3, [r7, #32]
 8011c20:	e853 3f00 	ldrex	r3, [r3]
 8011c24:	61fb      	str	r3, [r7, #28]
   return(result);
 8011c26:	69fa      	ldr	r2, [r7, #28]
 8011c28:	4b1e      	ldr	r3, [pc, #120]	@ (8011ca4 <UART_EndRxTransfer+0xc8>)
 8011c2a:	4013      	ands	r3, r2
 8011c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	3308      	adds	r3, #8
 8011c34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011c36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011c38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011c3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011c3e:	e841 2300 	strex	r3, r2, [r1]
 8011c42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d1e5      	bne.n	8011c16 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c4e:	2b01      	cmp	r3, #1
 8011c50:	d118      	bne.n	8011c84 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	e853 3f00 	ldrex	r3, [r3]
 8011c5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011c60:	68bb      	ldr	r3, [r7, #8]
 8011c62:	f023 0310 	bic.w	r3, r3, #16
 8011c66:	647b      	str	r3, [r7, #68]	@ 0x44
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	461a      	mov	r2, r3
 8011c6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c70:	61bb      	str	r3, [r7, #24]
 8011c72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c74:	6979      	ldr	r1, [r7, #20]
 8011c76:	69ba      	ldr	r2, [r7, #24]
 8011c78:	e841 2300 	strex	r3, r2, [r1]
 8011c7c:	613b      	str	r3, [r7, #16]
   return(result);
 8011c7e:	693b      	ldr	r3, [r7, #16]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d1e6      	bne.n	8011c52 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	2220      	movs	r2, #32
 8011c88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	2200      	movs	r2, #0
 8011c90:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	2200      	movs	r2, #0
 8011c96:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8011c98:	bf00      	nop
 8011c9a:	3754      	adds	r7, #84	@ 0x54
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca2:	4770      	bx	lr
 8011ca4:	effffffe 	.word	0xeffffffe

08011ca8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	b090      	sub	sp, #64	@ 0x40
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	69db      	ldr	r3, [r3, #28]
 8011cba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011cbe:	d037      	beq.n	8011d30 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8011cc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011cc2:	2200      	movs	r2, #0
 8011cc4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011cc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	3308      	adds	r3, #8
 8011cce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cd2:	e853 3f00 	ldrex	r3, [r3]
 8011cd6:	623b      	str	r3, [r7, #32]
   return(result);
 8011cd8:	6a3b      	ldr	r3, [r7, #32]
 8011cda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011cde:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	3308      	adds	r3, #8
 8011ce6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011ce8:	633a      	str	r2, [r7, #48]	@ 0x30
 8011cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011cee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011cf0:	e841 2300 	strex	r3, r2, [r1]
 8011cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d1e5      	bne.n	8011cc8 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011cfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d02:	693b      	ldr	r3, [r7, #16]
 8011d04:	e853 3f00 	ldrex	r3, [r3]
 8011d08:	60fb      	str	r3, [r7, #12]
   return(result);
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d10:	637b      	str	r3, [r7, #52]	@ 0x34
 8011d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	461a      	mov	r2, r3
 8011d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d1a:	61fb      	str	r3, [r7, #28]
 8011d1c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d1e:	69b9      	ldr	r1, [r7, #24]
 8011d20:	69fa      	ldr	r2, [r7, #28]
 8011d22:	e841 2300 	strex	r3, r2, [r1]
 8011d26:	617b      	str	r3, [r7, #20]
   return(result);
 8011d28:	697b      	ldr	r3, [r7, #20]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d1e6      	bne.n	8011cfc <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011d2e:	e002      	b.n	8011d36 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8011d30:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8011d32:	f7f5 f965 	bl	8007000 <HAL_UART_TxCpltCallback>
}
 8011d36:	bf00      	nop
 8011d38:	3740      	adds	r7, #64	@ 0x40
 8011d3a:	46bd      	mov	sp, r7
 8011d3c:	bd80      	pop	{r7, pc}

08011d3e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011d3e:	b580      	push	{r7, lr}
 8011d40:	b084      	sub	sp, #16
 8011d42:	af00      	add	r7, sp, #0
 8011d44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d4a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011d4c:	68f8      	ldr	r0, [r7, #12]
 8011d4e:	f7fe fe17 	bl	8010980 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011d52:	bf00      	nop
 8011d54:	3710      	adds	r7, #16
 8011d56:	46bd      	mov	sp, r7
 8011d58:	bd80      	pop	{r7, pc}

08011d5a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011d5a:	b580      	push	{r7, lr}
 8011d5c:	b09c      	sub	sp, #112	@ 0x70
 8011d5e:	af00      	add	r7, sp, #0
 8011d60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d66:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	69db      	ldr	r3, [r3, #28]
 8011d6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011d70:	d071      	beq.n	8011e56 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8011d72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011d74:	2200      	movs	r2, #0
 8011d76:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011d7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d82:	e853 3f00 	ldrex	r3, [r3]
 8011d86:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011d88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011d8a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011d8e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011d90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	461a      	mov	r2, r3
 8011d96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011d98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011d9a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d9c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011d9e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011da0:	e841 2300 	strex	r3, r2, [r1]
 8011da4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011da6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d1e6      	bne.n	8011d7a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011dac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	3308      	adds	r3, #8
 8011db2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011db6:	e853 3f00 	ldrex	r3, [r3]
 8011dba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011dbe:	f023 0301 	bic.w	r3, r3, #1
 8011dc2:	667b      	str	r3, [r7, #100]	@ 0x64
 8011dc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	3308      	adds	r3, #8
 8011dca:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011dcc:	647a      	str	r2, [r7, #68]	@ 0x44
 8011dce:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dd0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011dd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011dd4:	e841 2300 	strex	r3, r2, [r1]
 8011dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011dda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d1e5      	bne.n	8011dac <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011de0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	3308      	adds	r3, #8
 8011de6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dea:	e853 3f00 	ldrex	r3, [r3]
 8011dee:	623b      	str	r3, [r7, #32]
   return(result);
 8011df0:	6a3b      	ldr	r3, [r7, #32]
 8011df2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011df6:	663b      	str	r3, [r7, #96]	@ 0x60
 8011df8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	3308      	adds	r3, #8
 8011dfe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011e00:	633a      	str	r2, [r7, #48]	@ 0x30
 8011e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011e06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011e08:	e841 2300 	strex	r3, r2, [r1]
 8011e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d1e5      	bne.n	8011de0 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011e14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e16:	2220      	movs	r2, #32
 8011e18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011e1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e20:	2b01      	cmp	r3, #1
 8011e22:	d118      	bne.n	8011e56 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011e24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e2a:	693b      	ldr	r3, [r7, #16]
 8011e2c:	e853 3f00 	ldrex	r3, [r3]
 8011e30:	60fb      	str	r3, [r7, #12]
   return(result);
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	f023 0310 	bic.w	r3, r3, #16
 8011e38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011e3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	461a      	mov	r2, r3
 8011e40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011e42:	61fb      	str	r3, [r7, #28]
 8011e44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e46:	69b9      	ldr	r1, [r7, #24]
 8011e48:	69fa      	ldr	r2, [r7, #28]
 8011e4a:	e841 2300 	strex	r3, r2, [r1]
 8011e4e:	617b      	str	r3, [r7, #20]
   return(result);
 8011e50:	697b      	ldr	r3, [r7, #20]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d1e6      	bne.n	8011e24 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011e56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e58:	2200      	movs	r2, #0
 8011e5a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011e5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e60:	2b01      	cmp	r3, #1
 8011e62:	d107      	bne.n	8011e74 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011e64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011e6a:	4619      	mov	r1, r3
 8011e6c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011e6e:	f7fe fd9b 	bl	80109a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011e72:	e002      	b.n	8011e7a <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8011e74:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011e76:	f7f5 f945 	bl	8007104 <HAL_UART_RxCpltCallback>
}
 8011e7a:	bf00      	nop
 8011e7c:	3770      	adds	r7, #112	@ 0x70
 8011e7e:	46bd      	mov	sp, r7
 8011e80:	bd80      	pop	{r7, pc}

08011e82 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011e82:	b580      	push	{r7, lr}
 8011e84:	b084      	sub	sp, #16
 8011e86:	af00      	add	r7, sp, #0
 8011e88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e8e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	2201      	movs	r2, #1
 8011e94:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e9a:	2b01      	cmp	r3, #1
 8011e9c:	d109      	bne.n	8011eb2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011ea4:	085b      	lsrs	r3, r3, #1
 8011ea6:	b29b      	uxth	r3, r3
 8011ea8:	4619      	mov	r1, r3
 8011eaa:	68f8      	ldr	r0, [r7, #12]
 8011eac:	f7fe fd7c 	bl	80109a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011eb0:	e002      	b.n	8011eb8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8011eb2:	68f8      	ldr	r0, [r7, #12]
 8011eb4:	f7fe fd6e 	bl	8010994 <HAL_UART_RxHalfCpltCallback>
}
 8011eb8:	bf00      	nop
 8011eba:	3710      	adds	r7, #16
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	bd80      	pop	{r7, pc}

08011ec0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b086      	sub	sp, #24
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ecc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011ece:	697b      	ldr	r3, [r7, #20]
 8011ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011ed4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011ed6:	697b      	ldr	r3, [r7, #20]
 8011ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011edc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011ede:	697b      	ldr	r3, [r7, #20]
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	689b      	ldr	r3, [r3, #8]
 8011ee4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011ee8:	2b80      	cmp	r3, #128	@ 0x80
 8011eea:	d109      	bne.n	8011f00 <UART_DMAError+0x40>
 8011eec:	693b      	ldr	r3, [r7, #16]
 8011eee:	2b21      	cmp	r3, #33	@ 0x21
 8011ef0:	d106      	bne.n	8011f00 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011ef2:	697b      	ldr	r3, [r7, #20]
 8011ef4:	2200      	movs	r2, #0
 8011ef6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8011efa:	6978      	ldr	r0, [r7, #20]
 8011efc:	f7ff fe2c 	bl	8011b58 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011f00:	697b      	ldr	r3, [r7, #20]
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	689b      	ldr	r3, [r3, #8]
 8011f06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011f0a:	2b40      	cmp	r3, #64	@ 0x40
 8011f0c:	d109      	bne.n	8011f22 <UART_DMAError+0x62>
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	2b22      	cmp	r3, #34	@ 0x22
 8011f12:	d106      	bne.n	8011f22 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011f14:	697b      	ldr	r3, [r7, #20]
 8011f16:	2200      	movs	r2, #0
 8011f18:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8011f1c:	6978      	ldr	r0, [r7, #20]
 8011f1e:	f7ff fe5d 	bl	8011bdc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011f22:	697b      	ldr	r3, [r7, #20]
 8011f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011f28:	f043 0210 	orr.w	r2, r3, #16
 8011f2c:	697b      	ldr	r3, [r7, #20]
 8011f2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011f32:	6978      	ldr	r0, [r7, #20]
 8011f34:	f7f5 f9d2 	bl	80072dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011f38:	bf00      	nop
 8011f3a:	3718      	adds	r7, #24
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	bd80      	pop	{r7, pc}

08011f40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b084      	sub	sp, #16
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	2200      	movs	r2, #0
 8011f52:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	2200      	movs	r2, #0
 8011f5a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011f5e:	68f8      	ldr	r0, [r7, #12]
 8011f60:	f7f5 f9bc 	bl	80072dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011f64:	bf00      	nop
 8011f66:	3710      	adds	r7, #16
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	bd80      	pop	{r7, pc}

08011f6c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011f6c:	b580      	push	{r7, lr}
 8011f6e:	b088      	sub	sp, #32
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	e853 3f00 	ldrex	r3, [r3]
 8011f80:	60bb      	str	r3, [r7, #8]
   return(result);
 8011f82:	68bb      	ldr	r3, [r7, #8]
 8011f84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011f88:	61fb      	str	r3, [r7, #28]
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	461a      	mov	r2, r3
 8011f90:	69fb      	ldr	r3, [r7, #28]
 8011f92:	61bb      	str	r3, [r7, #24]
 8011f94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f96:	6979      	ldr	r1, [r7, #20]
 8011f98:	69ba      	ldr	r2, [r7, #24]
 8011f9a:	e841 2300 	strex	r3, r2, [r1]
 8011f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8011fa0:	693b      	ldr	r3, [r7, #16]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d1e6      	bne.n	8011f74 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	2220      	movs	r2, #32
 8011faa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	2200      	movs	r2, #0
 8011fb2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011fb4:	6878      	ldr	r0, [r7, #4]
 8011fb6:	f7f5 f823 	bl	8007000 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011fba:	bf00      	nop
 8011fbc:	3720      	adds	r7, #32
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bd80      	pop	{r7, pc}

08011fc2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011fc2:	b480      	push	{r7}
 8011fc4:	b083      	sub	sp, #12
 8011fc6:	af00      	add	r7, sp, #0
 8011fc8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011fca:	bf00      	nop
 8011fcc:	370c      	adds	r7, #12
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd4:	4770      	bx	lr

08011fd6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011fd6:	b480      	push	{r7}
 8011fd8:	b083      	sub	sp, #12
 8011fda:	af00      	add	r7, sp, #0
 8011fdc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011fde:	bf00      	nop
 8011fe0:	370c      	adds	r7, #12
 8011fe2:	46bd      	mov	sp, r7
 8011fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe8:	4770      	bx	lr

08011fea <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011fea:	b480      	push	{r7}
 8011fec:	b083      	sub	sp, #12
 8011fee:	af00      	add	r7, sp, #0
 8011ff0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011ff2:	bf00      	nop
 8011ff4:	370c      	adds	r7, #12
 8011ff6:	46bd      	mov	sp, r7
 8011ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffc:	4770      	bx	lr

08011ffe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011ffe:	b480      	push	{r7}
 8012000:	b085      	sub	sp, #20
 8012002:	af00      	add	r7, sp, #0
 8012004:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801200c:	2b01      	cmp	r3, #1
 801200e:	d101      	bne.n	8012014 <HAL_UARTEx_DisableFifoMode+0x16>
 8012010:	2302      	movs	r3, #2
 8012012:	e027      	b.n	8012064 <HAL_UARTEx_DisableFifoMode+0x66>
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	2201      	movs	r2, #1
 8012018:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	2224      	movs	r2, #36	@ 0x24
 8012020:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	681a      	ldr	r2, [r3, #0]
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	f022 0201 	bic.w	r2, r2, #1
 801203a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8012042:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	2200      	movs	r2, #0
 8012048:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	68fa      	ldr	r2, [r7, #12]
 8012050:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	2220      	movs	r2, #32
 8012056:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	2200      	movs	r2, #0
 801205e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012062:	2300      	movs	r3, #0
}
 8012064:	4618      	mov	r0, r3
 8012066:	3714      	adds	r7, #20
 8012068:	46bd      	mov	sp, r7
 801206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206e:	4770      	bx	lr

08012070 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012070:	b580      	push	{r7, lr}
 8012072:	b084      	sub	sp, #16
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
 8012078:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012080:	2b01      	cmp	r3, #1
 8012082:	d101      	bne.n	8012088 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012084:	2302      	movs	r3, #2
 8012086:	e02d      	b.n	80120e4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	2201      	movs	r2, #1
 801208c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	2224      	movs	r2, #36	@ 0x24
 8012094:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	681a      	ldr	r2, [r3, #0]
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	f022 0201 	bic.w	r2, r2, #1
 80120ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	689b      	ldr	r3, [r3, #8]
 80120b6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	683a      	ldr	r2, [r7, #0]
 80120c0:	430a      	orrs	r2, r1
 80120c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80120c4:	6878      	ldr	r0, [r7, #4]
 80120c6:	f000 f84f 	bl	8012168 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	68fa      	ldr	r2, [r7, #12]
 80120d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	2220      	movs	r2, #32
 80120d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	2200      	movs	r2, #0
 80120de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80120e2:	2300      	movs	r3, #0
}
 80120e4:	4618      	mov	r0, r3
 80120e6:	3710      	adds	r7, #16
 80120e8:	46bd      	mov	sp, r7
 80120ea:	bd80      	pop	{r7, pc}

080120ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b084      	sub	sp, #16
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	6078      	str	r0, [r7, #4]
 80120f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80120fc:	2b01      	cmp	r3, #1
 80120fe:	d101      	bne.n	8012104 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012100:	2302      	movs	r3, #2
 8012102:	e02d      	b.n	8012160 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	2201      	movs	r2, #1
 8012108:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	2224      	movs	r2, #36	@ 0x24
 8012110:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	681a      	ldr	r2, [r3, #0]
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	f022 0201 	bic.w	r2, r2, #1
 801212a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	689b      	ldr	r3, [r3, #8]
 8012132:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	683a      	ldr	r2, [r7, #0]
 801213c:	430a      	orrs	r2, r1
 801213e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012140:	6878      	ldr	r0, [r7, #4]
 8012142:	f000 f811 	bl	8012168 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	68fa      	ldr	r2, [r7, #12]
 801214c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	2220      	movs	r2, #32
 8012152:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	2200      	movs	r2, #0
 801215a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801215e:	2300      	movs	r3, #0
}
 8012160:	4618      	mov	r0, r3
 8012162:	3710      	adds	r7, #16
 8012164:	46bd      	mov	sp, r7
 8012166:	bd80      	pop	{r7, pc}

08012168 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012168:	b480      	push	{r7}
 801216a:	b085      	sub	sp, #20
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012174:	2b00      	cmp	r3, #0
 8012176:	d108      	bne.n	801218a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	2201      	movs	r2, #1
 801217c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	2201      	movs	r2, #1
 8012184:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012188:	e031      	b.n	80121ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801218a:	2310      	movs	r3, #16
 801218c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801218e:	2310      	movs	r3, #16
 8012190:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	689b      	ldr	r3, [r3, #8]
 8012198:	0e5b      	lsrs	r3, r3, #25
 801219a:	b2db      	uxtb	r3, r3
 801219c:	f003 0307 	and.w	r3, r3, #7
 80121a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	689b      	ldr	r3, [r3, #8]
 80121a8:	0f5b      	lsrs	r3, r3, #29
 80121aa:	b2db      	uxtb	r3, r3
 80121ac:	f003 0307 	and.w	r3, r3, #7
 80121b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80121b2:	7bbb      	ldrb	r3, [r7, #14]
 80121b4:	7b3a      	ldrb	r2, [r7, #12]
 80121b6:	4911      	ldr	r1, [pc, #68]	@ (80121fc <UARTEx_SetNbDataToProcess+0x94>)
 80121b8:	5c8a      	ldrb	r2, [r1, r2]
 80121ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80121be:	7b3a      	ldrb	r2, [r7, #12]
 80121c0:	490f      	ldr	r1, [pc, #60]	@ (8012200 <UARTEx_SetNbDataToProcess+0x98>)
 80121c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80121c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80121c8:	b29a      	uxth	r2, r3
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80121d0:	7bfb      	ldrb	r3, [r7, #15]
 80121d2:	7b7a      	ldrb	r2, [r7, #13]
 80121d4:	4909      	ldr	r1, [pc, #36]	@ (80121fc <UARTEx_SetNbDataToProcess+0x94>)
 80121d6:	5c8a      	ldrb	r2, [r1, r2]
 80121d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80121dc:	7b7a      	ldrb	r2, [r7, #13]
 80121de:	4908      	ldr	r1, [pc, #32]	@ (8012200 <UARTEx_SetNbDataToProcess+0x98>)
 80121e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80121e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80121e6:	b29a      	uxth	r2, r3
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80121ee:	bf00      	nop
 80121f0:	3714      	adds	r7, #20
 80121f2:	46bd      	mov	sp, r7
 80121f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f8:	4770      	bx	lr
 80121fa:	bf00      	nop
 80121fc:	0802ca30 	.word	0x0802ca30
 8012200:	0802ca38 	.word	0x0802ca38

08012204 <app_main>:




void app_main(void)
{
 8012204:	b580      	push	{r7, lr}
 8012206:	af00      	add	r7, sp, #0

	//argus_example_app();
	argus_explorer_app();
 8012208:	f7f0 ff5c 	bl	80030c4 <argus_explorer_app>

	while(1) {
 801220c:	bf00      	nop
 801220e:	e7fd      	b.n	801220c <app_main+0x8>

08012210 <_ZN13TimingManager7proceedEv>:
public:
	TimingManager();
	TimingManager(const uint32_t delay);
	~TimingManager();

    static inline void proceed() {
 8012210:	b580      	push	{r7, lr}
 8012212:	b084      	sub	sp, #16
 8012214:	af00      	add	r7, sp, #0
        for (TimingManager* const timer : m_timers) {
 8012216:	4b17      	ldr	r3, [pc, #92]	@ (8012274 <_ZN13TimingManager7proceedEv+0x64>)
 8012218:	60fb      	str	r3, [r7, #12]
 801221a:	68f8      	ldr	r0, [r7, #12]
 801221c:	f000 f858 	bl	80122d0 <_ZNSt6vectorIP13TimingManagerSaIS1_EE5beginEv>
 8012220:	4603      	mov	r3, r0
 8012222:	607b      	str	r3, [r7, #4]
 8012224:	68f8      	ldr	r0, [r7, #12]
 8012226:	f000 f863 	bl	80122f0 <_ZNSt6vectorIP13TimingManagerSaIS1_EE3endEv>
 801222a:	4603      	mov	r3, r0
 801222c:	603b      	str	r3, [r7, #0]
 801222e:	e013      	b.n	8012258 <_ZN13TimingManager7proceedEv+0x48>
 8012230:	1d3b      	adds	r3, r7, #4
 8012232:	4618      	mov	r0, r3
 8012234:	f000 f895 	bl	8012362 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEdeEv>
 8012238:	4603      	mov	r3, r0
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	60bb      	str	r3, [r7, #8]
            if (timer->m_counter) {
 801223e:	68bb      	ldr	r3, [r7, #8]
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d004      	beq.n	8012250 <_ZN13TimingManager7proceedEv+0x40>
                --timer->m_counter;
 8012246:	68bb      	ldr	r3, [r7, #8]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	1e5a      	subs	r2, r3, #1
 801224c:	68bb      	ldr	r3, [r7, #8]
 801224e:	601a      	str	r2, [r3, #0]
        for (TimingManager* const timer : m_timers) {
 8012250:	1d3b      	adds	r3, r7, #4
 8012252:	4618      	mov	r0, r3
 8012254:	f000 f875 	bl	8012342 <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEppEv>
 8012258:	463a      	mov	r2, r7
 801225a:	1d3b      	adds	r3, r7, #4
 801225c:	4611      	mov	r1, r2
 801225e:	4618      	mov	r0, r3
 8012260:	f000 f857 	bl	8012312 <_ZN9__gnu_cxxneIPP13TimingManagerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8012264:	4603      	mov	r3, r0
 8012266:	2b00      	cmp	r3, #0
 8012268:	d1e2      	bne.n	8012230 <_ZN13TimingManager7proceedEv+0x20>
            }
        }
    }
 801226a:	bf00      	nop
 801226c:	bf00      	nop
 801226e:	3710      	adds	r7, #16
 8012270:	46bd      	mov	sp, r7
 8012272:	bd80      	pop	{r7, pc}
 8012274:	2400368c 	.word	0x2400368c

08012278 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8012278:	b580      	push	{r7, lr}
 801227a:	b082      	sub	sp, #8
 801227c:	af00      	add	r7, sp, #0
 801227e:	6078      	str	r0, [r7, #4]
 8012280:	6878      	ldr	r0, [r7, #4]
 8012282:	f000 f88a 	bl	801239a <_ZNSaIP13TimingManagerED1Ev>
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	4618      	mov	r0, r3
 801228a:	3708      	adds	r7, #8
 801228c:	46bd      	mov	sp, r7
 801228e:	bd80      	pop	{r7, pc}

08012290 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8012290:	b580      	push	{r7, lr}
 8012292:	b082      	sub	sp, #8
 8012294:	af00      	add	r7, sp, #0
 8012296:	6078      	str	r0, [r7, #4]
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	4618      	mov	r0, r3
 801229c:	f000 f86d 	bl	801237a <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE12_Vector_implC1Ev>
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	4618      	mov	r0, r3
 80122a4:	3708      	adds	r7, #8
 80122a6:	46bd      	mov	sp, r7
 80122a8:	bd80      	pop	{r7, pc}

080122aa <_ZNSt6vectorIP13TimingManagerSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80122aa:	b580      	push	{r7, lr}
 80122ac:	b082      	sub	sp, #8
 80122ae:	af00      	add	r7, sp, #0
 80122b0:	6078      	str	r0, [r7, #4]
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	4618      	mov	r0, r3
 80122b6:	f7ff ffeb 	bl	8012290 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EEC1Ev>
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	4618      	mov	r0, r3
 80122be:	3708      	adds	r7, #8
 80122c0:	46bd      	mov	sp, r7
 80122c2:	bd80      	pop	{r7, pc}

080122c4 <HAL_SYSTICK_Callback>:



//----------------------------------------------------------------------------------------------------------
void HAL_SYSTICK_Callback(void)
{
 80122c4:	b580      	push	{r7, lr}
 80122c6:	af00      	add	r7, sp, #0
	TimingManager::proceed();
 80122c8:	f7ff ffa2 	bl	8012210 <_ZN13TimingManager7proceedEv>
}
 80122cc:	bf00      	nop
 80122ce:	bd80      	pop	{r7, pc}

080122d0 <_ZNSt6vectorIP13TimingManagerSaIS1_EE5beginEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      begin() _GLIBCXX_NOEXCEPT
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b084      	sub	sp, #16
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80122d8:	687a      	ldr	r2, [r7, #4]
 80122da:	f107 030c 	add.w	r3, r7, #12
 80122de:	4611      	mov	r1, r2
 80122e0:	4618      	mov	r0, r3
 80122e2:	f000 f87f 	bl	80123e4 <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	4618      	mov	r0, r3
 80122ea:	3710      	adds	r7, #16
 80122ec:	46bd      	mov	sp, r7
 80122ee:	bd80      	pop	{r7, pc}

080122f0 <_ZNSt6vectorIP13TimingManagerSaIS1_EE3endEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      end() _GLIBCXX_NOEXCEPT
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b084      	sub	sp, #16
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	1d1a      	adds	r2, r3, #4
 80122fc:	f107 030c 	add.w	r3, r7, #12
 8012300:	4611      	mov	r1, r2
 8012302:	4618      	mov	r0, r3
 8012304:	f000 f86e 	bl	80123e4 <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	4618      	mov	r0, r3
 801230c:	3710      	adds	r7, #16
 801230e:	46bd      	mov	sp, r7
 8012310:	bd80      	pop	{r7, pc}

08012312 <_ZN9__gnu_cxxneIPP13TimingManagerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8012312:	b590      	push	{r4, r7, lr}
 8012314:	b083      	sub	sp, #12
 8012316:	af00      	add	r7, sp, #0
 8012318:	6078      	str	r0, [r7, #4]
 801231a:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 801231c:	6878      	ldr	r0, [r7, #4]
 801231e:	f000 f871 	bl	8012404 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 8012322:	4603      	mov	r3, r0
 8012324:	681c      	ldr	r4, [r3, #0]
 8012326:	6838      	ldr	r0, [r7, #0]
 8012328:	f000 f86c 	bl	8012404 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 801232c:	4603      	mov	r3, r0
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	429c      	cmp	r4, r3
 8012332:	bf14      	ite	ne
 8012334:	2301      	movne	r3, #1
 8012336:	2300      	moveq	r3, #0
 8012338:	b2db      	uxtb	r3, r3
 801233a:	4618      	mov	r0, r3
 801233c:	370c      	adds	r7, #12
 801233e:	46bd      	mov	sp, r7
 8012340:	bd90      	pop	{r4, r7, pc}

08012342 <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8012342:	b480      	push	{r7}
 8012344:	b083      	sub	sp, #12
 8012346:	af00      	add	r7, sp, #0
 8012348:	6078      	str	r0, [r7, #4]
	++_M_current;
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	1d1a      	adds	r2, r3, #4
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	601a      	str	r2, [r3, #0]
	return *this;
 8012354:	687b      	ldr	r3, [r7, #4]
      }
 8012356:	4618      	mov	r0, r3
 8012358:	370c      	adds	r7, #12
 801235a:	46bd      	mov	sp, r7
 801235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012360:	4770      	bx	lr

08012362 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8012362:	b480      	push	{r7}
 8012364:	b083      	sub	sp, #12
 8012366:	af00      	add	r7, sp, #0
 8012368:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	4618      	mov	r0, r3
 8012370:	370c      	adds	r7, #12
 8012372:	46bd      	mov	sp, r7
 8012374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012378:	4770      	bx	lr

0801237a <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 801237a:	b580      	push	{r7, lr}
 801237c:	b082      	sub	sp, #8
 801237e:	af00      	add	r7, sp, #0
 8012380:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8012382:	6878      	ldr	r0, [r7, #4]
 8012384:	f000 f849 	bl	801241a <_ZNSaIP13TimingManagerEC1Ev>
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	4618      	mov	r0, r3
 801238c:	f000 f851 	bl	8012432 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	4618      	mov	r0, r3
 8012394:	3708      	adds	r7, #8
 8012396:	46bd      	mov	sp, r7
 8012398:	bd80      	pop	{r7, pc}

0801239a <_ZNSaIP13TimingManagerED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 801239a:	b580      	push	{r7, lr}
 801239c:	b082      	sub	sp, #8
 801239e:	af00      	add	r7, sp, #0
 80123a0:	6078      	str	r0, [r7, #4]
 80123a2:	6878      	ldr	r0, [r7, #4]
 80123a4:	f000 f859 	bl	801245a <_ZNSt15__new_allocatorIP13TimingManagerED1Ev>
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	4618      	mov	r0, r3
 80123ac:	3708      	adds	r7, #8
 80123ae:	46bd      	mov	sp, r7
 80123b0:	bd80      	pop	{r7, pc}

080123b2 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80123b2:	b580      	push	{r7, lr}
 80123b4:	b082      	sub	sp, #8
 80123b6:	af00      	add	r7, sp, #0
 80123b8:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	689a      	ldr	r2, [r3, #8]
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	1ad3      	subs	r3, r2, r3
 80123c8:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 80123ca:	461a      	mov	r2, r3
 80123cc:	6878      	ldr	r0, [r7, #4]
 80123ce:	f000 f84f 	bl	8012470 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE13_M_deallocateEPS1_j>
      }
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	4618      	mov	r0, r3
 80123d6:	f7ff ff4f 	bl	8012278 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE12_Vector_implD1Ev>
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	4618      	mov	r0, r3
 80123de:	3708      	adds	r7, #8
 80123e0:	46bd      	mov	sp, r7
 80123e2:	bd80      	pop	{r7, pc}

080123e4 <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80123e4:	b480      	push	{r7}
 80123e6:	b083      	sub	sp, #12
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	6078      	str	r0, [r7, #4]
 80123ec:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80123ee:	683b      	ldr	r3, [r7, #0]
 80123f0:	681a      	ldr	r2, [r3, #0]
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	601a      	str	r2, [r3, #0]
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	4618      	mov	r0, r3
 80123fa:	370c      	adds	r7, #12
 80123fc:	46bd      	mov	sp, r7
 80123fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012402:	4770      	bx	lr

08012404 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8012404:	b480      	push	{r7}
 8012406:	b083      	sub	sp, #12
 8012408:	af00      	add	r7, sp, #0
 801240a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	4618      	mov	r0, r3
 8012410:	370c      	adds	r7, #12
 8012412:	46bd      	mov	sp, r7
 8012414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012418:	4770      	bx	lr

0801241a <_ZNSaIP13TimingManagerEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801241a:	b580      	push	{r7, lr}
 801241c:	b082      	sub	sp, #8
 801241e:	af00      	add	r7, sp, #0
 8012420:	6078      	str	r0, [r7, #4]
 8012422:	6878      	ldr	r0, [r7, #4]
 8012424:	f000 f837 	bl	8012496 <_ZNSt15__new_allocatorIP13TimingManagerEC1Ev>
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	4618      	mov	r0, r3
 801242c:	3708      	adds	r7, #8
 801242e:	46bd      	mov	sp, r7
 8012430:	bd80      	pop	{r7, pc}

08012432 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8012432:	b480      	push	{r7}
 8012434:	b083      	sub	sp, #12
 8012436:	af00      	add	r7, sp, #0
 8012438:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	2200      	movs	r2, #0
 801243e:	601a      	str	r2, [r3, #0]
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	2200      	movs	r2, #0
 8012444:	605a      	str	r2, [r3, #4]
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	2200      	movs	r2, #0
 801244a:	609a      	str	r2, [r3, #8]
	{ }
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	4618      	mov	r0, r3
 8012450:	370c      	adds	r7, #12
 8012452:	46bd      	mov	sp, r7
 8012454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012458:	4770      	bx	lr

0801245a <_ZNSt15__new_allocatorIP13TimingManagerED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801245a:	b480      	push	{r7}
 801245c:	b083      	sub	sp, #12
 801245e:	af00      	add	r7, sp, #0
 8012460:	6078      	str	r0, [r7, #4]
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	4618      	mov	r0, r3
 8012466:	370c      	adds	r7, #12
 8012468:	46bd      	mov	sp, r7
 801246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801246e:	4770      	bx	lr

08012470 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8012470:	b580      	push	{r7, lr}
 8012472:	b084      	sub	sp, #16
 8012474:	af00      	add	r7, sp, #0
 8012476:	60f8      	str	r0, [r7, #12]
 8012478:	60b9      	str	r1, [r7, #8]
 801247a:	607a      	str	r2, [r7, #4]
	if (__p)
 801247c:	68bb      	ldr	r3, [r7, #8]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d005      	beq.n	801248e <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	687a      	ldr	r2, [r7, #4]
 8012486:	68b9      	ldr	r1, [r7, #8]
 8012488:	4618      	mov	r0, r3
 801248a:	f000 f80f 	bl	80124ac <_ZNSt16allocator_traitsISaIP13TimingManagerEE10deallocateERS2_PS1_j>
      }
 801248e:	bf00      	nop
 8012490:	3710      	adds	r7, #16
 8012492:	46bd      	mov	sp, r7
 8012494:	bd80      	pop	{r7, pc}

08012496 <_ZNSt15__new_allocatorIP13TimingManagerEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8012496:	b480      	push	{r7}
 8012498:	b083      	sub	sp, #12
 801249a:	af00      	add	r7, sp, #0
 801249c:	6078      	str	r0, [r7, #4]
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	4618      	mov	r0, r3
 80124a2:	370c      	adds	r7, #12
 80124a4:	46bd      	mov	sp, r7
 80124a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124aa:	4770      	bx	lr

080124ac <_ZNSt16allocator_traitsISaIP13TimingManagerEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b084      	sub	sp, #16
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	60f8      	str	r0, [r7, #12]
 80124b4:	60b9      	str	r1, [r7, #8]
 80124b6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80124b8:	687a      	ldr	r2, [r7, #4]
 80124ba:	68b9      	ldr	r1, [r7, #8]
 80124bc:	68f8      	ldr	r0, [r7, #12]
 80124be:	f000 f804 	bl	80124ca <_ZNSt15__new_allocatorIP13TimingManagerE10deallocateEPS1_j>
 80124c2:	bf00      	nop
 80124c4:	3710      	adds	r7, #16
 80124c6:	46bd      	mov	sp, r7
 80124c8:	bd80      	pop	{r7, pc}

080124ca <_ZNSt15__new_allocatorIP13TimingManagerE10deallocateEPS1_j>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 80124ca:	b580      	push	{r7, lr}
 80124cc:	b084      	sub	sp, #16
 80124ce:	af00      	add	r7, sp, #0
 80124d0:	60f8      	str	r0, [r7, #12]
 80124d2:	60b9      	str	r1, [r7, #8]
 80124d4:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	009b      	lsls	r3, r3, #2
 80124da:	4619      	mov	r1, r3
 80124dc:	68b8      	ldr	r0, [r7, #8]
 80124de:	f016 fb0d 	bl	8028afc <_ZdlPvj>
      }
 80124e2:	bf00      	nop
 80124e4:	3710      	adds	r7, #16
 80124e6:	46bd      	mov	sp, r7
 80124e8:	bd80      	pop	{r7, pc}

080124ea <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80124ea:	b480      	push	{r7}
 80124ec:	b083      	sub	sp, #12
 80124ee:	af00      	add	r7, sp, #0
 80124f0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	4618      	mov	r0, r3
 80124f6:	370c      	adds	r7, #12
 80124f8:	46bd      	mov	sp, r7
 80124fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fe:	4770      	bx	lr

08012500 <_ZSt8_DestroyIPP13TimingManagerS1_EvT_S3_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8012500:	b580      	push	{r7, lr}
 8012502:	b084      	sub	sp, #16
 8012504:	af00      	add	r7, sp, #0
 8012506:	60f8      	str	r0, [r7, #12]
 8012508:	60b9      	str	r1, [r7, #8]
 801250a:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 801250c:	68b9      	ldr	r1, [r7, #8]
 801250e:	68f8      	ldr	r0, [r7, #12]
 8012510:	f000 f804 	bl	801251c <_ZSt8_DestroyIPP13TimingManagerEvT_S3_>
    }
 8012514:	bf00      	nop
 8012516:	3710      	adds	r7, #16
 8012518:	46bd      	mov	sp, r7
 801251a:	bd80      	pop	{r7, pc}

0801251c <_ZSt8_DestroyIPP13TimingManagerEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 801251c:	b580      	push	{r7, lr}
 801251e:	b082      	sub	sp, #8
 8012520:	af00      	add	r7, sp, #0
 8012522:	6078      	str	r0, [r7, #4]
 8012524:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8012526:	6839      	ldr	r1, [r7, #0]
 8012528:	6878      	ldr	r0, [r7, #4]
 801252a:	f000 f804 	bl	8012536 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP13TimingManagerEEvT_S5_>
    }
 801252e:	bf00      	nop
 8012530:	3708      	adds	r7, #8
 8012532:	46bd      	mov	sp, r7
 8012534:	bd80      	pop	{r7, pc}

08012536 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP13TimingManagerEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8012536:	b480      	push	{r7}
 8012538:	b083      	sub	sp, #12
 801253a:	af00      	add	r7, sp, #0
 801253c:	6078      	str	r0, [r7, #4]
 801253e:	6039      	str	r1, [r7, #0]
 8012540:	bf00      	nop
 8012542:	370c      	adds	r7, #12
 8012544:	46bd      	mov	sp, r7
 8012546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254a:	4770      	bx	lr

0801254c <_Z41__static_initialization_and_destruction_0ii>:
 801254c:	b580      	push	{r7, lr}
 801254e:	b082      	sub	sp, #8
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
 8012554:	6039      	str	r1, [r7, #0]
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	2b01      	cmp	r3, #1
 801255a:	d107      	bne.n	801256c <_Z41__static_initialization_and_destruction_0ii+0x20>
 801255c:	683b      	ldr	r3, [r7, #0]
 801255e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012562:	4293      	cmp	r3, r2
 8012564:	d102      	bne.n	801256c <_Z41__static_initialization_and_destruction_0ii+0x20>
std::vector<TimingManager*> TimingManager::m_timers;
 8012566:	4809      	ldr	r0, [pc, #36]	@ (801258c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8012568:	f7ff fe9f 	bl	80122aa <_ZNSt6vectorIP13TimingManagerSaIS1_EEC1Ev>
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d107      	bne.n	8012582 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8012572:	683b      	ldr	r3, [r7, #0]
 8012574:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012578:	4293      	cmp	r3, r2
 801257a:	d102      	bne.n	8012582 <_Z41__static_initialization_and_destruction_0ii+0x36>
 801257c:	4803      	ldr	r0, [pc, #12]	@ (801258c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801257e:	f000 f807 	bl	8012590 <_ZNSt6vectorIP13TimingManagerSaIS1_EED1Ev>
}
 8012582:	bf00      	nop
 8012584:	3708      	adds	r7, #8
 8012586:	46bd      	mov	sp, r7
 8012588:	bd80      	pop	{r7, pc}
 801258a:	bf00      	nop
 801258c:	2400368c 	.word	0x2400368c

08012590 <_ZNSt6vectorIP13TimingManagerSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8012590:	b5b0      	push	{r4, r5, r7, lr}
 8012592:	b082      	sub	sp, #8
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	681c      	ldr	r4, [r3, #0]
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	4618      	mov	r0, r3
 80125a4:	f7ff ffa1 	bl	80124ea <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>
 80125a8:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80125aa:	461a      	mov	r2, r3
 80125ac:	4629      	mov	r1, r5
 80125ae:	4620      	mov	r0, r4
 80125b0:	f7ff ffa6 	bl	8012500 <_ZSt8_DestroyIPP13TimingManagerS1_EvT_S3_RSaIT0_E>
      }
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	4618      	mov	r0, r3
 80125b8:	f7ff fefb 	bl	80123b2 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EED1Ev>
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	4618      	mov	r0, r3
 80125c0:	3708      	adds	r7, #8
 80125c2:	46bd      	mov	sp, r7
 80125c4:	bdb0      	pop	{r4, r5, r7, pc}

080125c6 <_GLOBAL__sub_I__ZN13TimingManager8m_timersE>:
 80125c6:	b580      	push	{r7, lr}
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80125ce:	2001      	movs	r0, #1
 80125d0:	f7ff ffbc 	bl	801254c <_Z41__static_initialization_and_destruction_0ii>
 80125d4:	bd80      	pop	{r7, pc}

080125d6 <_GLOBAL__sub_D__ZN13TimingManager8m_timersE>:
 80125d6:	b580      	push	{r7, lr}
 80125d8:	af00      	add	r7, sp, #0
 80125da:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80125de:	2000      	movs	r0, #0
 80125e0:	f7ff ffb4 	bl	801254c <_Z41__static_initialization_and_destruction_0ii>
 80125e4:	bd80      	pop	{r7, pc}
	...

080125e8 <fp_rnds>:
 80125e8:	2800      	cmp	r0, #0
 80125ea:	db09      	blt.n	8012600 <fp_rnds+0x18>
 80125ec:	b169      	cbz	r1, 801260a <fp_rnds+0x22>
 80125ee:	2920      	cmp	r1, #32
 80125f0:	d80a      	bhi.n	8012608 <fp_rnds+0x20>
 80125f2:	3901      	subs	r1, #1
 80125f4:	40c8      	lsrs	r0, r1
 80125f6:	f000 0301 	and.w	r3, r0, #1
 80125fa:	eb03 0050 	add.w	r0, r3, r0, lsr #1
 80125fe:	4770      	bx	lr
 8012600:	4243      	negs	r3, r0
 8012602:	b111      	cbz	r1, 801260a <fp_rnds+0x22>
 8012604:	2920      	cmp	r1, #32
 8012606:	d901      	bls.n	801260c <fp_rnds+0x24>
 8012608:	2000      	movs	r0, #0
 801260a:	4770      	bx	lr
 801260c:	3901      	subs	r1, #1
 801260e:	fa23 f101 	lsr.w	r1, r3, r1
 8012612:	f001 0001 	and.w	r0, r1, #1
 8012616:	eb00 0051 	add.w	r0, r0, r1, lsr #1
 801261a:	4240      	negs	r0, r0
 801261c:	4770      	bx	lr
 801261e:	bf00      	nop

08012620 <InsertParityBits>:
 8012620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012624:	2700      	movs	r7, #0
 8012626:	f04f 0901 	mov.w	r9, #1
 801262a:	fa09 f407 	lsl.w	r4, r9, r7
 801262e:	1e66      	subs	r6, r4, #1
 8012630:	ea4f 08d6 	mov.w	r8, r6, lsr #3
 8012634:	f006 0607 	and.w	r6, r6, #7
 8012638:	f810 5008 	ldrb.w	r5, [r0, r8]
 801263c:	fa09 f206 	lsl.w	r2, r9, r6
 8012640:	b2e3      	uxtb	r3, r4
 8012642:	ea25 0502 	bic.w	r5, r5, r2
 8012646:	f103 3cff 	add.w	ip, r3, #4294967295
 801264a:	f800 5008 	strb.w	r5, [r0, r8]
 801264e:	005b      	lsls	r3, r3, #1
 8012650:	fa5f fc8c 	uxtb.w	ip, ip
 8012654:	fa5f fe83 	uxtb.w	lr, r3
 8012658:	f04f 0a00 	mov.w	sl, #0
 801265c:	eb04 010c 	add.w	r1, r4, ip
 8012660:	4561      	cmp	r1, ip
 8012662:	46e3      	mov	fp, ip
 8012664:	bfc8      	it	gt
 8012666:	4662      	movgt	r2, ip
 8012668:	dd10      	ble.n	801268c <InsertParityBits+0x6c>
 801266a:	f3c2 03c7 	ubfx	r3, r2, #3, #8
 801266e:	ebab 0bc3 	sub.w	fp, fp, r3, lsl #3
 8012672:	5cc3      	ldrb	r3, [r0, r3]
 8012674:	3201      	adds	r2, #1
 8012676:	fa43 f30b 	asr.w	r3, r3, fp
 801267a:	b2d2      	uxtb	r2, r2
 801267c:	f003 0301 	and.w	r3, r3, #1
 8012680:	4453      	add	r3, sl
 8012682:	428a      	cmp	r2, r1
 8012684:	fa5f fa83 	uxtb.w	sl, r3
 8012688:	4693      	mov	fp, r2
 801268a:	dbee      	blt.n	801266a <InsertParityBits+0x4a>
 801268c:	44f4      	add	ip, lr
 801268e:	fa5f fc8c 	uxtb.w	ip, ip
 8012692:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8012696:	d9e1      	bls.n	801265c <InsertParityBits+0x3c>
 8012698:	f00a 0301 	and.w	r3, sl, #1
 801269c:	fa03 f606 	lsl.w	r6, r3, r6
 80126a0:	3701      	adds	r7, #1
 80126a2:	432e      	orrs	r6, r5
 80126a4:	2f07      	cmp	r7, #7
 80126a6:	f800 6008 	strb.w	r6, [r0, r8]
 80126aa:	d1be      	bne.n	801262a <InsertParityBits+0xa>
 80126ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080126b0 <hamming_decode>:
 80126b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80126b4:	4605      	mov	r5, r0
 80126b6:	b085      	sub	sp, #20
 80126b8:	6800      	ldr	r0, [r0, #0]
 80126ba:	68aa      	ldr	r2, [r5, #8]
 80126bc:	68eb      	ldr	r3, [r5, #12]
 80126be:	460c      	mov	r4, r1
 80126c0:	6869      	ldr	r1, [r5, #4]
 80126c2:	466e      	mov	r6, sp
 80126c4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80126c6:	4668      	mov	r0, sp
 80126c8:	f7ff ffaa 	bl	8012620 <InsertParityBits>
 80126cc:	782a      	ldrb	r2, [r5, #0]
 80126ce:	f89d 3000 	ldrb.w	r3, [sp]
 80126d2:	f002 0101 	and.w	r1, r2, #1
 80126d6:	f003 0001 	and.w	r0, r3, #1
 80126da:	1a40      	subs	r0, r0, r1
 80126dc:	f3c2 0640 	ubfx	r6, r2, #1, #1
 80126e0:	f3c3 0140 	ubfx	r1, r3, #1, #1
 80126e4:	bf18      	it	ne
 80126e6:	2001      	movne	r0, #1
 80126e8:	428e      	cmp	r6, r1
 80126ea:	f3c2 01c0 	ubfx	r1, r2, #3, #1
 80126ee:	f3c3 06c0 	ubfx	r6, r3, #3, #1
 80126f2:	bf18      	it	ne
 80126f4:	3002      	addne	r0, #2
 80126f6:	42b1      	cmp	r1, r6
 80126f8:	bf18      	it	ne
 80126fa:	3004      	addne	r0, #4
 80126fc:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8012700:	bf18      	it	ne
 8012702:	b2c0      	uxtbne	r0, r0
 8012704:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
 8012708:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801270c:	786a      	ldrb	r2, [r5, #1]
 801270e:	bf18      	it	ne
 8012710:	3008      	addne	r0, #8
 8012712:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8012716:	bf18      	it	ne
 8012718:	b2c0      	uxtbne	r0, r0
 801271a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
 801271e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012722:	78ea      	ldrb	r2, [r5, #3]
 8012724:	bf18      	it	ne
 8012726:	3010      	addne	r0, #16
 8012728:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 801272c:	bf18      	it	ne
 801272e:	b2c0      	uxtbne	r0, r0
 8012730:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
 8012734:	d054      	beq.n	80127e0 <hamming_decode+0x130>
 8012736:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801273a:	79ea      	ldrb	r2, [r5, #7]
 801273c:	09db      	lsrs	r3, r3, #7
 801273e:	3020      	adds	r0, #32
 8012740:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
 8012744:	b2c0      	uxtb	r0, r0
 8012746:	d001      	beq.n	801274c <hamming_decode+0x9c>
 8012748:	3040      	adds	r0, #64	@ 0x40
 801274a:	b2c0      	uxtb	r0, r0
 801274c:	1e42      	subs	r2, r0, #1
 801274e:	f3c2 03c4 	ubfx	r3, r2, #3, #5
 8012752:	b2d1      	uxtb	r1, r2
 8012754:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 8012758:	3310      	adds	r3, #16
 801275a:	446b      	add	r3, sp
 801275c:	08d6      	lsrs	r6, r2, #3
 801275e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8012762:	410b      	asrs	r3, r1
 8012764:	f003 0301 	and.w	r3, r3, #1
 8012768:	f81d 1006 	ldrb.w	r1, [sp, r6]
 801276c:	f002 0207 	and.w	r2, r2, #7
 8012770:	f1c3 0301 	rsb	r3, r3, #1
 8012774:	2501      	movs	r5, #1
 8012776:	4093      	lsls	r3, r2
 8012778:	fa05 f202 	lsl.w	r2, r5, r2
 801277c:	ea21 0202 	bic.w	r2, r1, r2
 8012780:	4313      	orrs	r3, r2
 8012782:	f80d 3006 	strb.w	r3, [sp, r6]
 8012786:	2201      	movs	r2, #1
 8012788:	2100      	movs	r1, #0
 801278a:	4616      	mov	r6, r2
 801278c:	fa5f fc82 	uxtb.w	ip, r2
 8012790:	ab04      	add	r3, sp, #16
 8012792:	eb03 09dc 	add.w	r9, r3, ip, lsr #3
 8012796:	f00c 03f8 	and.w	r3, ip, #248	@ 0xf8
 801279a:	eba2 0e03 	sub.w	lr, r2, r3
 801279e:	f10c 0301 	add.w	r3, ip, #1
 80127a2:	f001 0707 	and.w	r7, r1, #7
 80127a6:	ea1c 0f03 	tst.w	ip, r3
 80127aa:	ea4f 05d1 	mov.w	r5, r1, lsr #3
 80127ae:	f102 0201 	add.w	r2, r2, #1
 80127b2:	fa06 f807 	lsl.w	r8, r6, r7
 80127b6:	d00e      	beq.n	80127d6 <hamming_decode+0x126>
 80127b8:	f819 3c10 	ldrb.w	r3, [r9, #-16]
 80127bc:	f814 c005 	ldrb.w	ip, [r4, r5]
 80127c0:	fa43 f30e 	asr.w	r3, r3, lr
 80127c4:	f003 0301 	and.w	r3, r3, #1
 80127c8:	40bb      	lsls	r3, r7
 80127ca:	ea2c 0708 	bic.w	r7, ip, r8
 80127ce:	433b      	orrs	r3, r7
 80127d0:	3101      	adds	r1, #1
 80127d2:	5563      	strb	r3, [r4, r5]
 80127d4:	b2c9      	uxtb	r1, r1
 80127d6:	2a7f      	cmp	r2, #127	@ 0x7f
 80127d8:	d1d8      	bne.n	801278c <hamming_decode+0xdc>
 80127da:	b005      	add	sp, #20
 80127dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80127e0:	79eb      	ldrb	r3, [r5, #7]
 80127e2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80127e6:	09db      	lsrs	r3, r3, #7
 80127e8:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
 80127ec:	d1ac      	bne.n	8012748 <hamming_decode+0x98>
 80127ee:	2800      	cmp	r0, #0
 80127f0:	d0c9      	beq.n	8012786 <hamming_decode+0xd6>
 80127f2:	e7ab      	b.n	801274c <hamming_decode+0x9c>

080127f4 <Time_GetNow>:
 80127f4:	1d01      	adds	r1, r0, #4
 80127f6:	f7f4 ba5b 	b.w	8006cb0 <Timer_GetCounterValue>
 80127fa:	bf00      	nop

080127fc <Time_Now>:
 80127fc:	b530      	push	{r4, r5, lr}
 80127fe:	b083      	sub	sp, #12
 8012800:	466d      	mov	r5, sp
 8012802:	4604      	mov	r4, r0
 8012804:	a901      	add	r1, sp, #4
 8012806:	4628      	mov	r0, r5
 8012808:	f7f4 fa52 	bl	8006cb0 <Timer_GetCounterValue>
 801280c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012810:	e884 0003 	stmia.w	r4, {r0, r1}
 8012814:	4620      	mov	r0, r4
 8012816:	b003      	add	sp, #12
 8012818:	bd30      	pop	{r4, r5, pc}
 801281a:	bf00      	nop

0801281c <Time_GetElapsedUSec>:
 801281c:	b510      	push	{r4, lr}
 801281e:	4604      	mov	r4, r0
 8012820:	b082      	sub	sp, #8
 8012822:	a901      	add	r1, sp, #4
 8012824:	4668      	mov	r0, sp
 8012826:	f7f4 fa43 	bl	8006cb0 <Timer_GetCounterValue>
 801282a:	9901      	ldr	r1, [sp, #4]
 801282c:	6863      	ldr	r3, [r4, #4]
 801282e:	9a00      	ldr	r2, [sp, #0]
 8012830:	428b      	cmp	r3, r1
 8012832:	d816      	bhi.n	8012862 <Time_GetElapsedUSec+0x46>
 8012834:	6820      	ldr	r0, [r4, #0]
 8012836:	1acb      	subs	r3, r1, r3
 8012838:	1a10      	subs	r0, r2, r0
 801283a:	f241 02c5 	movw	r2, #4293	@ 0x10c5
 801283e:	4290      	cmp	r0, r2
 8012840:	d90a      	bls.n	8012858 <Time_GetElapsedUSec+0x3c>
 8012842:	f241 02c6 	movw	r2, #4294	@ 0x10c6
 8012846:	4290      	cmp	r0, r2
 8012848:	d003      	beq.n	8012852 <Time_GetElapsedUSec+0x36>
 801284a:	f04f 30ff 	mov.w	r0, #4294967295
 801284e:	b002      	add	sp, #8
 8012850:	bd10      	pop	{r4, pc}
 8012852:	4a08      	ldr	r2, [pc, #32]	@ (8012874 <Time_GetElapsedUSec+0x58>)
 8012854:	4293      	cmp	r3, r2
 8012856:	d8f8      	bhi.n	801284a <Time_GetElapsedUSec+0x2e>
 8012858:	4a07      	ldr	r2, [pc, #28]	@ (8012878 <Time_GetElapsedUSec+0x5c>)
 801285a:	fb02 3000 	mla	r0, r2, r0, r3
 801285e:	b002      	add	sp, #8
 8012860:	bd10      	pop	{r4, pc}
 8012862:	6824      	ldr	r4, [r4, #0]
 8012864:	f501 2174 	add.w	r1, r1, #999424	@ 0xf4000
 8012868:	1e50      	subs	r0, r2, #1
 801286a:	f501 7110 	add.w	r1, r1, #576	@ 0x240
 801286e:	1b00      	subs	r0, r0, r4
 8012870:	1acb      	subs	r3, r1, r3
 8012872:	e7e2      	b.n	801283a <Time_GetElapsedUSec+0x1e>
 8012874:	000ec27e 	.word	0x000ec27e
 8012878:	000f4240 	.word	0x000f4240

0801287c <Time_CheckTimeoutMSec>:
 801287c:	b570      	push	{r4, r5, r6, lr}
 801287e:	b082      	sub	sp, #8
 8012880:	4605      	mov	r5, r0
 8012882:	460c      	mov	r4, r1
 8012884:	4668      	mov	r0, sp
 8012886:	a901      	add	r1, sp, #4
 8012888:	f7f4 fa12 	bl	8006cb0 <Timer_GetCounterValue>
 801288c:	4b21      	ldr	r3, [pc, #132]	@ (8012914 <Time_CheckTimeoutMSec+0x98>)
 801288e:	686a      	ldr	r2, [r5, #4]
 8012890:	682e      	ldr	r6, [r5, #0]
 8012892:	9d00      	ldr	r5, [sp, #0]
 8012894:	fba3 1304 	umull	r1, r3, r3, r4
 8012898:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801289c:	0999      	lsrs	r1, r3, #6
 801289e:	fb00 4111 	mls	r1, r0, r1, r4
 80128a2:	fb00 2101 	mla	r1, r0, r1, r2
 80128a6:	481c      	ldr	r0, [pc, #112]	@ (8012918 <Time_CheckTimeoutMSec+0x9c>)
 80128a8:	9c01      	ldr	r4, [sp, #4]
 80128aa:	4281      	cmp	r1, r0
 80128ac:	eb06 1393 	add.w	r3, r6, r3, lsr #6
 80128b0:	d904      	bls.n	80128bc <Time_CheckTimeoutMSec+0x40>
 80128b2:	f5a1 2174 	sub.w	r1, r1, #999424	@ 0xf4000
 80128b6:	3301      	adds	r3, #1
 80128b8:	f5a1 7110 	sub.w	r1, r1, #576	@ 0x240
 80128bc:	429e      	cmp	r6, r3
 80128be:	d015      	beq.n	80128ec <Time_CheckTimeoutMSec+0x70>
 80128c0:	bf34      	ite	cc
 80128c2:	2001      	movcc	r0, #1
 80128c4:	2000      	movcs	r0, #0
 80128c6:	b160      	cbz	r0, 80128e2 <Time_CheckTimeoutMSec+0x66>
 80128c8:	42ae      	cmp	r6, r5
 80128ca:	d017      	beq.n	80128fc <Time_CheckTimeoutMSec+0x80>
 80128cc:	bf34      	ite	cc
 80128ce:	2201      	movcc	r2, #1
 80128d0:	2200      	movcs	r2, #0
 80128d2:	b122      	cbz	r2, 80128de <Time_CheckTimeoutMSec+0x62>
 80128d4:	429d      	cmp	r5, r3
 80128d6:	d016      	beq.n	8012906 <Time_CheckTimeoutMSec+0x8a>
 80128d8:	bf8c      	ite	hi
 80128da:	2001      	movhi	r0, #1
 80128dc:	2000      	movls	r0, #0
 80128de:	b002      	add	sp, #8
 80128e0:	bd70      	pop	{r4, r5, r6, pc}
 80128e2:	42ae      	cmp	r6, r5
 80128e4:	d007      	beq.n	80128f6 <Time_CheckTimeoutMSec+0x7a>
 80128e6:	d2f5      	bcs.n	80128d4 <Time_CheckTimeoutMSec+0x58>
 80128e8:	b002      	add	sp, #8
 80128ea:	bd70      	pop	{r4, r5, r6, pc}
 80128ec:	428a      	cmp	r2, r1
 80128ee:	bf8c      	ite	hi
 80128f0:	2000      	movhi	r0, #0
 80128f2:	2001      	movls	r0, #1
 80128f4:	e7e7      	b.n	80128c6 <Time_CheckTimeoutMSec+0x4a>
 80128f6:	42a2      	cmp	r2, r4
 80128f8:	d9f1      	bls.n	80128de <Time_CheckTimeoutMSec+0x62>
 80128fa:	e7eb      	b.n	80128d4 <Time_CheckTimeoutMSec+0x58>
 80128fc:	42a2      	cmp	r2, r4
 80128fe:	bf8c      	ite	hi
 8012900:	2200      	movhi	r2, #0
 8012902:	2201      	movls	r2, #1
 8012904:	e7e5      	b.n	80128d2 <Time_CheckTimeoutMSec+0x56>
 8012906:	428c      	cmp	r4, r1
 8012908:	bf34      	ite	cc
 801290a:	2000      	movcc	r0, #0
 801290c:	2001      	movcs	r0, #1
 801290e:	b002      	add	sp, #8
 8012910:	bd70      	pop	{r4, r5, r6, pc}
 8012912:	bf00      	nop
 8012914:	10624dd3 	.word	0x10624dd3
 8012918:	000f423f 	.word	0x000f423f

0801291c <Time_DelayUSec>:
 801291c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801291e:	b083      	sub	sp, #12
 8012920:	4604      	mov	r4, r0
 8012922:	a901      	add	r1, sp, #4
 8012924:	4668      	mov	r0, sp
 8012926:	f7f4 f9c3 	bl	8006cb0 <Timer_GetCounterValue>
 801292a:	4b28      	ldr	r3, [pc, #160]	@ (80129cc <Time_DelayUSec+0xb0>)
 801292c:	9e00      	ldr	r6, [sp, #0]
 801292e:	9f01      	ldr	r7, [sp, #4]
 8012930:	fba3 2304 	umull	r2, r3, r3, r4
 8012934:	4a26      	ldr	r2, [pc, #152]	@ (80129d0 <Time_DelayUSec+0xb4>)
 8012936:	0c98      	lsrs	r0, r3, #18
 8012938:	fb02 4010 	mls	r0, r2, r0, r4
 801293c:	eb06 4493 	add.w	r4, r6, r3, lsr #18
 8012940:	4b24      	ldr	r3, [pc, #144]	@ (80129d4 <Time_DelayUSec+0xb8>)
 8012942:	4438      	add	r0, r7
 8012944:	4298      	cmp	r0, r3
 8012946:	f5a0 2574 	sub.w	r5, r0, #999424	@ 0xf4000
 801294a:	f104 0301 	add.w	r3, r4, #1
 801294e:	f5a5 7510 	sub.w	r5, r5, #576	@ 0x240
 8012952:	bf94      	ite	ls
 8012954:	4605      	movls	r5, r0
 8012956:	461c      	movhi	r4, r3
 8012958:	42af      	cmp	r7, r5
 801295a:	bf8c      	ite	hi
 801295c:	2300      	movhi	r3, #0
 801295e:	2301      	movls	r3, #1
 8012960:	42b4      	cmp	r4, r6
 8012962:	bf8c      	ite	hi
 8012964:	2201      	movhi	r2, #1
 8012966:	2200      	movls	r2, #0
 8012968:	bf18      	it	ne
 801296a:	4613      	movne	r3, r2
 801296c:	b9a3      	cbnz	r3, 8012998 <Time_DelayUSec+0x7c>
 801296e:	a901      	add	r1, sp, #4
 8012970:	4668      	mov	r0, sp
 8012972:	f7f4 f99d 	bl	8006cb0 <Timer_GetCounterValue>
 8012976:	e9dd 3200 	ldrd	r3, r2, [sp]
 801297a:	42b3      	cmp	r3, r6
 801297c:	d017      	beq.n	80129ae <Time_DelayUSec+0x92>
 801297e:	d8f6      	bhi.n	801296e <Time_DelayUSec+0x52>
 8012980:	42a3      	cmp	r3, r4
 8012982:	d018      	beq.n	80129b6 <Time_DelayUSec+0x9a>
 8012984:	d811      	bhi.n	80129aa <Time_DelayUSec+0x8e>
 8012986:	e7f2      	b.n	801296e <Time_DelayUSec+0x52>
 8012988:	42bb      	cmp	r3, r7
 801298a:	d30e      	bcc.n	80129aa <Time_DelayUSec+0x8e>
 801298c:	4294      	cmp	r4, r2
 801298e:	d016      	beq.n	80129be <Time_DelayUSec+0xa2>
 8012990:	bf34      	ite	cc
 8012992:	2301      	movcc	r3, #1
 8012994:	2300      	movcs	r3, #0
 8012996:	b943      	cbnz	r3, 80129aa <Time_DelayUSec+0x8e>
 8012998:	a901      	add	r1, sp, #4
 801299a:	4668      	mov	r0, sp
 801299c:	f7f4 f988 	bl	8006cb0 <Timer_GetCounterValue>
 80129a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80129a4:	42b2      	cmp	r2, r6
 80129a6:	d0ef      	beq.n	8012988 <Time_DelayUSec+0x6c>
 80129a8:	d8f0      	bhi.n	801298c <Time_DelayUSec+0x70>
 80129aa:	b003      	add	sp, #12
 80129ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129ae:	4297      	cmp	r7, r2
 80129b0:	d9dd      	bls.n	801296e <Time_DelayUSec+0x52>
 80129b2:	42a3      	cmp	r3, r4
 80129b4:	d1e6      	bne.n	8012984 <Time_DelayUSec+0x68>
 80129b6:	42aa      	cmp	r2, r5
 80129b8:	d3d9      	bcc.n	801296e <Time_DelayUSec+0x52>
 80129ba:	b003      	add	sp, #12
 80129bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129be:	42ab      	cmp	r3, r5
 80129c0:	bf34      	ite	cc
 80129c2:	2300      	movcc	r3, #0
 80129c4:	2301      	movcs	r3, #1
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d0e6      	beq.n	8012998 <Time_DelayUSec+0x7c>
 80129ca:	e7ee      	b.n	80129aa <Time_DelayUSec+0x8e>
 80129cc:	431bde83 	.word	0x431bde83
 80129d0:	000f4240 	.word	0x000f4240
 80129d4:	000f423f 	.word	0x000f423f

080129d8 <Time_DelayMSec>:
 80129d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129da:	b083      	sub	sp, #12
 80129dc:	4604      	mov	r4, r0
 80129de:	a901      	add	r1, sp, #4
 80129e0:	4668      	mov	r0, sp
 80129e2:	f7f4 f965 	bl	8006cb0 <Timer_GetCounterValue>
 80129e6:	4b29      	ldr	r3, [pc, #164]	@ (8012a8c <Time_DelayMSec+0xb4>)
 80129e8:	9e00      	ldr	r6, [sp, #0]
 80129ea:	9f01      	ldr	r7, [sp, #4]
 80129ec:	fba3 2304 	umull	r2, r3, r3, r4
 80129f0:	0998      	lsrs	r0, r3, #6
 80129f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80129f6:	fb02 4010 	mls	r0, r2, r0, r4
 80129fa:	eb06 1493 	add.w	r4, r6, r3, lsr #6
 80129fe:	4b24      	ldr	r3, [pc, #144]	@ (8012a90 <Time_DelayMSec+0xb8>)
 8012a00:	fb02 7000 	mla	r0, r2, r0, r7
 8012a04:	4298      	cmp	r0, r3
 8012a06:	f5a0 2574 	sub.w	r5, r0, #999424	@ 0xf4000
 8012a0a:	f104 0301 	add.w	r3, r4, #1
 8012a0e:	f5a5 7510 	sub.w	r5, r5, #576	@ 0x240
 8012a12:	bf94      	ite	ls
 8012a14:	4605      	movls	r5, r0
 8012a16:	461c      	movhi	r4, r3
 8012a18:	42af      	cmp	r7, r5
 8012a1a:	bf8c      	ite	hi
 8012a1c:	2300      	movhi	r3, #0
 8012a1e:	2301      	movls	r3, #1
 8012a20:	42b4      	cmp	r4, r6
 8012a22:	bf8c      	ite	hi
 8012a24:	2201      	movhi	r2, #1
 8012a26:	2200      	movls	r2, #0
 8012a28:	bf18      	it	ne
 8012a2a:	4613      	movne	r3, r2
 8012a2c:	b9a3      	cbnz	r3, 8012a58 <Time_DelayMSec+0x80>
 8012a2e:	a901      	add	r1, sp, #4
 8012a30:	4668      	mov	r0, sp
 8012a32:	f7f4 f93d 	bl	8006cb0 <Timer_GetCounterValue>
 8012a36:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012a3a:	42b3      	cmp	r3, r6
 8012a3c:	d017      	beq.n	8012a6e <Time_DelayMSec+0x96>
 8012a3e:	d8f6      	bhi.n	8012a2e <Time_DelayMSec+0x56>
 8012a40:	42a3      	cmp	r3, r4
 8012a42:	d018      	beq.n	8012a76 <Time_DelayMSec+0x9e>
 8012a44:	d811      	bhi.n	8012a6a <Time_DelayMSec+0x92>
 8012a46:	e7f2      	b.n	8012a2e <Time_DelayMSec+0x56>
 8012a48:	42bb      	cmp	r3, r7
 8012a4a:	d30e      	bcc.n	8012a6a <Time_DelayMSec+0x92>
 8012a4c:	4294      	cmp	r4, r2
 8012a4e:	d016      	beq.n	8012a7e <Time_DelayMSec+0xa6>
 8012a50:	bf34      	ite	cc
 8012a52:	2301      	movcc	r3, #1
 8012a54:	2300      	movcs	r3, #0
 8012a56:	b943      	cbnz	r3, 8012a6a <Time_DelayMSec+0x92>
 8012a58:	a901      	add	r1, sp, #4
 8012a5a:	4668      	mov	r0, sp
 8012a5c:	f7f4 f928 	bl	8006cb0 <Timer_GetCounterValue>
 8012a60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012a64:	42b2      	cmp	r2, r6
 8012a66:	d0ef      	beq.n	8012a48 <Time_DelayMSec+0x70>
 8012a68:	d8f0      	bhi.n	8012a4c <Time_DelayMSec+0x74>
 8012a6a:	b003      	add	sp, #12
 8012a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a6e:	4297      	cmp	r7, r2
 8012a70:	d9dd      	bls.n	8012a2e <Time_DelayMSec+0x56>
 8012a72:	42a3      	cmp	r3, r4
 8012a74:	d1e6      	bne.n	8012a44 <Time_DelayMSec+0x6c>
 8012a76:	42aa      	cmp	r2, r5
 8012a78:	d3d9      	bcc.n	8012a2e <Time_DelayMSec+0x56>
 8012a7a:	b003      	add	sp, #12
 8012a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a7e:	42ab      	cmp	r3, r5
 8012a80:	bf34      	ite	cc
 8012a82:	2300      	movcc	r3, #0
 8012a84:	2301      	movcs	r3, #1
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d0e6      	beq.n	8012a58 <Time_DelayMSec+0x80>
 8012a8a:	e7ee      	b.n	8012a6a <Time_DelayMSec+0x92>
 8012a8c:	10624dd3 	.word	0x10624dd3
 8012a90:	000f423f 	.word	0x000f423f

08012a94 <eeprom_place_command>:
 8012a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a96:	b083      	sub	sp, #12
 8012a98:	2500      	movs	r5, #0
 8012a9a:	460e      	mov	r6, r1
 8012a9c:	4617      	mov	r7, r2
 8012a9e:	2102      	movs	r1, #2
 8012aa0:	2201      	movs	r2, #1
 8012aa2:	4604      	mov	r4, r0
 8012aa4:	9501      	str	r5, [sp, #4]
 8012aa6:	f7f3 fe85 	bl	80067b4 <S2PI_WriteGpioPin>
 8012aaa:	2800      	cmp	r0, #0
 8012aac:	f2c0 80f1 	blt.w	8012c92 <eeprom_place_command+0x1fe>
 8012ab0:	2201      	movs	r2, #1
 8012ab2:	4629      	mov	r1, r5
 8012ab4:	4620      	mov	r0, r4
 8012ab6:	f7f3 fe7d 	bl	80067b4 <S2PI_WriteGpioPin>
 8012aba:	2800      	cmp	r0, #0
 8012abc:	f2c0 80e9 	blt.w	8012c92 <eeprom_place_command+0x1fe>
 8012ac0:	aa01      	add	r2, sp, #4
 8012ac2:	2103      	movs	r1, #3
 8012ac4:	4620      	mov	r0, r4
 8012ac6:	f7f3 fec1 	bl	800684c <S2PI_ReadGpioPin>
 8012aca:	2800      	cmp	r0, #0
 8012acc:	f2c0 80e1 	blt.w	8012c92 <eeprom_place_command+0x1fe>
 8012ad0:	462a      	mov	r2, r5
 8012ad2:	4629      	mov	r1, r5
 8012ad4:	4620      	mov	r0, r4
 8012ad6:	f7f3 fe6d 	bl	80067b4 <S2PI_WriteGpioPin>
 8012ada:	2800      	cmp	r0, #0
 8012adc:	f2c0 80d9 	blt.w	8012c92 <eeprom_place_command+0x1fe>
 8012ae0:	4632      	mov	r2, r6
 8012ae2:	2102      	movs	r1, #2
 8012ae4:	4620      	mov	r0, r4
 8012ae6:	f7f3 fe65 	bl	80067b4 <S2PI_WriteGpioPin>
 8012aea:	2800      	cmp	r0, #0
 8012aec:	f2c0 80d1 	blt.w	8012c92 <eeprom_place_command+0x1fe>
 8012af0:	2201      	movs	r2, #1
 8012af2:	4629      	mov	r1, r5
 8012af4:	4620      	mov	r0, r4
 8012af6:	f7f3 fe5d 	bl	80067b4 <S2PI_WriteGpioPin>
 8012afa:	2800      	cmp	r0, #0
 8012afc:	f2c0 80c9 	blt.w	8012c92 <eeprom_place_command+0x1fe>
 8012b00:	aa01      	add	r2, sp, #4
 8012b02:	2103      	movs	r1, #3
 8012b04:	4620      	mov	r0, r4
 8012b06:	f7f3 fea1 	bl	800684c <S2PI_ReadGpioPin>
 8012b0a:	2800      	cmp	r0, #0
 8012b0c:	f2c0 80c1 	blt.w	8012c92 <eeprom_place_command+0x1fe>
 8012b10:	462a      	mov	r2, r5
 8012b12:	4629      	mov	r1, r5
 8012b14:	4620      	mov	r0, r4
 8012b16:	f7f3 fe4d 	bl	80067b4 <S2PI_WriteGpioPin>
 8012b1a:	2800      	cmp	r0, #0
 8012b1c:	f2c0 80b9 	blt.w	8012c92 <eeprom_place_command+0x1fe>
 8012b20:	9b01      	ldr	r3, [sp, #4]
 8012b22:	2b01      	cmp	r3, #1
 8012b24:	f040 80b7 	bne.w	8012c96 <eeprom_place_command+0x202>
 8012b28:	f086 0501 	eor.w	r5, r6, #1
 8012b2c:	462a      	mov	r2, r5
 8012b2e:	2102      	movs	r1, #2
 8012b30:	4620      	mov	r0, r4
 8012b32:	f7f3 fe3f 	bl	80067b4 <S2PI_WriteGpioPin>
 8012b36:	2800      	cmp	r0, #0
 8012b38:	f2c0 80ab 	blt.w	8012c92 <eeprom_place_command+0x1fe>
 8012b3c:	2201      	movs	r2, #1
 8012b3e:	2100      	movs	r1, #0
 8012b40:	4620      	mov	r0, r4
 8012b42:	f7f3 fe37 	bl	80067b4 <S2PI_WriteGpioPin>
 8012b46:	2800      	cmp	r0, #0
 8012b48:	f2c0 80a3 	blt.w	8012c92 <eeprom_place_command+0x1fe>
 8012b4c:	aa01      	add	r2, sp, #4
 8012b4e:	2103      	movs	r1, #3
 8012b50:	4620      	mov	r0, r4
 8012b52:	f7f3 fe7b 	bl	800684c <S2PI_ReadGpioPin>
 8012b56:	2800      	cmp	r0, #0
 8012b58:	f2c0 809b 	blt.w	8012c92 <eeprom_place_command+0x1fe>
 8012b5c:	2200      	movs	r2, #0
 8012b5e:	4611      	mov	r1, r2
 8012b60:	4620      	mov	r0, r4
 8012b62:	f7f3 fe27 	bl	80067b4 <S2PI_WriteGpioPin>
 8012b66:	2800      	cmp	r0, #0
 8012b68:	f2c0 8093 	blt.w	8012c92 <eeprom_place_command+0x1fe>
 8012b6c:	9b01      	ldr	r3, [sp, #4]
 8012b6e:	429e      	cmp	r6, r3
 8012b70:	f040 8091 	bne.w	8012c96 <eeprom_place_command+0x202>
 8012b74:	08fe      	lsrs	r6, r7, #3
 8012b76:	4632      	mov	r2, r6
 8012b78:	2102      	movs	r1, #2
 8012b7a:	4620      	mov	r0, r4
 8012b7c:	f7f3 fe1a 	bl	80067b4 <S2PI_WriteGpioPin>
 8012b80:	2800      	cmp	r0, #0
 8012b82:	f2c0 8086 	blt.w	8012c92 <eeprom_place_command+0x1fe>
 8012b86:	2201      	movs	r2, #1
 8012b88:	2100      	movs	r1, #0
 8012b8a:	4620      	mov	r0, r4
 8012b8c:	f7f3 fe12 	bl	80067b4 <S2PI_WriteGpioPin>
 8012b90:	2800      	cmp	r0, #0
 8012b92:	db7e      	blt.n	8012c92 <eeprom_place_command+0x1fe>
 8012b94:	aa01      	add	r2, sp, #4
 8012b96:	2103      	movs	r1, #3
 8012b98:	4620      	mov	r0, r4
 8012b9a:	f7f3 fe57 	bl	800684c <S2PI_ReadGpioPin>
 8012b9e:	2800      	cmp	r0, #0
 8012ba0:	db77      	blt.n	8012c92 <eeprom_place_command+0x1fe>
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	4611      	mov	r1, r2
 8012ba6:	4620      	mov	r0, r4
 8012ba8:	f7f3 fe04 	bl	80067b4 <S2PI_WriteGpioPin>
 8012bac:	2800      	cmp	r0, #0
 8012bae:	db70      	blt.n	8012c92 <eeprom_place_command+0x1fe>
 8012bb0:	9b01      	ldr	r3, [sp, #4]
 8012bb2:	429d      	cmp	r5, r3
 8012bb4:	d16f      	bne.n	8012c96 <eeprom_place_command+0x202>
 8012bb6:	f3c7 0580 	ubfx	r5, r7, #2, #1
 8012bba:	462a      	mov	r2, r5
 8012bbc:	2102      	movs	r1, #2
 8012bbe:	4620      	mov	r0, r4
 8012bc0:	f7f3 fdf8 	bl	80067b4 <S2PI_WriteGpioPin>
 8012bc4:	2800      	cmp	r0, #0
 8012bc6:	db64      	blt.n	8012c92 <eeprom_place_command+0x1fe>
 8012bc8:	2201      	movs	r2, #1
 8012bca:	2100      	movs	r1, #0
 8012bcc:	4620      	mov	r0, r4
 8012bce:	f7f3 fdf1 	bl	80067b4 <S2PI_WriteGpioPin>
 8012bd2:	2800      	cmp	r0, #0
 8012bd4:	db5d      	blt.n	8012c92 <eeprom_place_command+0x1fe>
 8012bd6:	aa01      	add	r2, sp, #4
 8012bd8:	2103      	movs	r1, #3
 8012bda:	4620      	mov	r0, r4
 8012bdc:	f7f3 fe36 	bl	800684c <S2PI_ReadGpioPin>
 8012be0:	2800      	cmp	r0, #0
 8012be2:	db56      	blt.n	8012c92 <eeprom_place_command+0x1fe>
 8012be4:	2200      	movs	r2, #0
 8012be6:	4611      	mov	r1, r2
 8012be8:	4620      	mov	r0, r4
 8012bea:	f7f3 fde3 	bl	80067b4 <S2PI_WriteGpioPin>
 8012bee:	2800      	cmp	r0, #0
 8012bf0:	db4f      	blt.n	8012c92 <eeprom_place_command+0x1fe>
 8012bf2:	9b01      	ldr	r3, [sp, #4]
 8012bf4:	429e      	cmp	r6, r3
 8012bf6:	d14e      	bne.n	8012c96 <eeprom_place_command+0x202>
 8012bf8:	f3c7 0640 	ubfx	r6, r7, #1, #1
 8012bfc:	4632      	mov	r2, r6
 8012bfe:	2102      	movs	r1, #2
 8012c00:	4620      	mov	r0, r4
 8012c02:	f7f3 fdd7 	bl	80067b4 <S2PI_WriteGpioPin>
 8012c06:	2800      	cmp	r0, #0
 8012c08:	db43      	blt.n	8012c92 <eeprom_place_command+0x1fe>
 8012c0a:	2201      	movs	r2, #1
 8012c0c:	2100      	movs	r1, #0
 8012c0e:	4620      	mov	r0, r4
 8012c10:	f7f3 fdd0 	bl	80067b4 <S2PI_WriteGpioPin>
 8012c14:	2800      	cmp	r0, #0
 8012c16:	db3c      	blt.n	8012c92 <eeprom_place_command+0x1fe>
 8012c18:	aa01      	add	r2, sp, #4
 8012c1a:	2103      	movs	r1, #3
 8012c1c:	4620      	mov	r0, r4
 8012c1e:	f7f3 fe15 	bl	800684c <S2PI_ReadGpioPin>
 8012c22:	2800      	cmp	r0, #0
 8012c24:	db35      	blt.n	8012c92 <eeprom_place_command+0x1fe>
 8012c26:	2200      	movs	r2, #0
 8012c28:	4611      	mov	r1, r2
 8012c2a:	4620      	mov	r0, r4
 8012c2c:	f7f3 fdc2 	bl	80067b4 <S2PI_WriteGpioPin>
 8012c30:	2800      	cmp	r0, #0
 8012c32:	db2e      	blt.n	8012c92 <eeprom_place_command+0x1fe>
 8012c34:	9b01      	ldr	r3, [sp, #4]
 8012c36:	429d      	cmp	r5, r3
 8012c38:	d12d      	bne.n	8012c96 <eeprom_place_command+0x202>
 8012c3a:	f007 0201 	and.w	r2, r7, #1
 8012c3e:	2102      	movs	r1, #2
 8012c40:	4620      	mov	r0, r4
 8012c42:	f7f3 fdb7 	bl	80067b4 <S2PI_WriteGpioPin>
 8012c46:	2800      	cmp	r0, #0
 8012c48:	db23      	blt.n	8012c92 <eeprom_place_command+0x1fe>
 8012c4a:	2201      	movs	r2, #1
 8012c4c:	2100      	movs	r1, #0
 8012c4e:	4620      	mov	r0, r4
 8012c50:	f7f3 fdb0 	bl	80067b4 <S2PI_WriteGpioPin>
 8012c54:	2800      	cmp	r0, #0
 8012c56:	db1c      	blt.n	8012c92 <eeprom_place_command+0x1fe>
 8012c58:	aa01      	add	r2, sp, #4
 8012c5a:	2103      	movs	r1, #3
 8012c5c:	4620      	mov	r0, r4
 8012c5e:	f7f3 fdf5 	bl	800684c <S2PI_ReadGpioPin>
 8012c62:	2800      	cmp	r0, #0
 8012c64:	db15      	blt.n	8012c92 <eeprom_place_command+0x1fe>
 8012c66:	2200      	movs	r2, #0
 8012c68:	4611      	mov	r1, r2
 8012c6a:	4620      	mov	r0, r4
 8012c6c:	f7f3 fda2 	bl	80067b4 <S2PI_WriteGpioPin>
 8012c70:	2800      	cmp	r0, #0
 8012c72:	db0e      	blt.n	8012c92 <eeprom_place_command+0x1fe>
 8012c74:	9b01      	ldr	r3, [sp, #4]
 8012c76:	429e      	cmp	r6, r3
 8012c78:	d10d      	bne.n	8012c96 <eeprom_place_command+0x202>
 8012c7a:	2201      	movs	r2, #1
 8012c7c:	4611      	mov	r1, r2
 8012c7e:	4620      	mov	r0, r4
 8012c80:	f7f3 fd98 	bl	80067b4 <S2PI_WriteGpioPin>
 8012c84:	2800      	cmp	r0, #0
 8012c86:	db04      	blt.n	8012c92 <eeprom_place_command+0x1fe>
 8012c88:	2201      	movs	r2, #1
 8012c8a:	2100      	movs	r1, #0
 8012c8c:	4620      	mov	r0, r4
 8012c8e:	f7f3 fd91 	bl	80067b4 <S2PI_WriteGpioPin>
 8012c92:	b003      	add	sp, #12
 8012c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c96:	f06f 006c 	mvn.w	r0, #108	@ 0x6c
 8012c9a:	e7fa      	b.n	8012c92 <eeprom_place_command+0x1fe>

08012c9c <eeprom_write_ce>:
 8012c9c:	b570      	push	{r4, r5, r6, lr}
 8012c9e:	4616      	mov	r6, r2
 8012ca0:	460d      	mov	r5, r1
 8012ca2:	2200      	movs	r2, #0
 8012ca4:	2101      	movs	r1, #1
 8012ca6:	4604      	mov	r4, r0
 8012ca8:	f7f3 fd84 	bl	80067b4 <S2PI_WriteGpioPin>
 8012cac:	2800      	cmp	r0, #0
 8012cae:	f2c0 80be 	blt.w	8012e2e <eeprom_write_ce+0x192>
 8012cb2:	2200      	movs	r2, #0
 8012cb4:	2102      	movs	r1, #2
 8012cb6:	4620      	mov	r0, r4
 8012cb8:	f7f3 fd7c 	bl	80067b4 <S2PI_WriteGpioPin>
 8012cbc:	2800      	cmp	r0, #0
 8012cbe:	f2c0 80b6 	blt.w	8012e2e <eeprom_write_ce+0x192>
 8012cc2:	2200      	movs	r2, #0
 8012cc4:	4611      	mov	r1, r2
 8012cc6:	4620      	mov	r0, r4
 8012cc8:	f7f3 fd74 	bl	80067b4 <S2PI_WriteGpioPin>
 8012ccc:	2800      	cmp	r0, #0
 8012cce:	f2c0 80ae 	blt.w	8012e2e <eeprom_write_ce+0x192>
 8012cd2:	2201      	movs	r2, #1
 8012cd4:	2100      	movs	r1, #0
 8012cd6:	4620      	mov	r0, r4
 8012cd8:	f7f3 fd6c 	bl	80067b4 <S2PI_WriteGpioPin>
 8012cdc:	2800      	cmp	r0, #0
 8012cde:	f2c0 80a6 	blt.w	8012e2e <eeprom_write_ce+0x192>
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	2102      	movs	r1, #2
 8012ce6:	4620      	mov	r0, r4
 8012ce8:	f7f3 fd64 	bl	80067b4 <S2PI_WriteGpioPin>
 8012cec:	2800      	cmp	r0, #0
 8012cee:	f2c0 809e 	blt.w	8012e2e <eeprom_write_ce+0x192>
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	4611      	mov	r1, r2
 8012cf6:	4620      	mov	r0, r4
 8012cf8:	f7f3 fd5c 	bl	80067b4 <S2PI_WriteGpioPin>
 8012cfc:	2800      	cmp	r0, #0
 8012cfe:	f2c0 8096 	blt.w	8012e2e <eeprom_write_ce+0x192>
 8012d02:	2201      	movs	r2, #1
 8012d04:	2100      	movs	r1, #0
 8012d06:	4620      	mov	r0, r4
 8012d08:	f7f3 fd54 	bl	80067b4 <S2PI_WriteGpioPin>
 8012d0c:	2800      	cmp	r0, #0
 8012d0e:	f2c0 808e 	blt.w	8012e2e <eeprom_write_ce+0x192>
 8012d12:	2201      	movs	r2, #1
 8012d14:	2102      	movs	r1, #2
 8012d16:	4620      	mov	r0, r4
 8012d18:	f7f3 fd4c 	bl	80067b4 <S2PI_WriteGpioPin>
 8012d1c:	2800      	cmp	r0, #0
 8012d1e:	f2c0 8086 	blt.w	8012e2e <eeprom_write_ce+0x192>
 8012d22:	2200      	movs	r2, #0
 8012d24:	4611      	mov	r1, r2
 8012d26:	4620      	mov	r0, r4
 8012d28:	f7f3 fd44 	bl	80067b4 <S2PI_WriteGpioPin>
 8012d2c:	2800      	cmp	r0, #0
 8012d2e:	db7e      	blt.n	8012e2e <eeprom_write_ce+0x192>
 8012d30:	2201      	movs	r2, #1
 8012d32:	2100      	movs	r1, #0
 8012d34:	4620      	mov	r0, r4
 8012d36:	f7f3 fd3d 	bl	80067b4 <S2PI_WriteGpioPin>
 8012d3a:	2800      	cmp	r0, #0
 8012d3c:	db77      	blt.n	8012e2e <eeprom_write_ce+0x192>
 8012d3e:	2200      	movs	r2, #0
 8012d40:	2102      	movs	r1, #2
 8012d42:	4620      	mov	r0, r4
 8012d44:	f7f3 fd36 	bl	80067b4 <S2PI_WriteGpioPin>
 8012d48:	2800      	cmp	r0, #0
 8012d4a:	db70      	blt.n	8012e2e <eeprom_write_ce+0x192>
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	4611      	mov	r1, r2
 8012d50:	4620      	mov	r0, r4
 8012d52:	f7f3 fd2f 	bl	80067b4 <S2PI_WriteGpioPin>
 8012d56:	2800      	cmp	r0, #0
 8012d58:	db69      	blt.n	8012e2e <eeprom_write_ce+0x192>
 8012d5a:	2201      	movs	r2, #1
 8012d5c:	2100      	movs	r1, #0
 8012d5e:	4620      	mov	r0, r4
 8012d60:	f7f3 fd28 	bl	80067b4 <S2PI_WriteGpioPin>
 8012d64:	2800      	cmp	r0, #0
 8012d66:	db62      	blt.n	8012e2e <eeprom_write_ce+0x192>
 8012d68:	2201      	movs	r2, #1
 8012d6a:	2102      	movs	r1, #2
 8012d6c:	4620      	mov	r0, r4
 8012d6e:	f7f3 fd21 	bl	80067b4 <S2PI_WriteGpioPin>
 8012d72:	2800      	cmp	r0, #0
 8012d74:	db5b      	blt.n	8012e2e <eeprom_write_ce+0x192>
 8012d76:	2200      	movs	r2, #0
 8012d78:	4611      	mov	r1, r2
 8012d7a:	4620      	mov	r0, r4
 8012d7c:	f7f3 fd1a 	bl	80067b4 <S2PI_WriteGpioPin>
 8012d80:	2800      	cmp	r0, #0
 8012d82:	db54      	blt.n	8012e2e <eeprom_write_ce+0x192>
 8012d84:	2201      	movs	r2, #1
 8012d86:	2100      	movs	r1, #0
 8012d88:	4620      	mov	r0, r4
 8012d8a:	f7f3 fd13 	bl	80067b4 <S2PI_WriteGpioPin>
 8012d8e:	2800      	cmp	r0, #0
 8012d90:	db4d      	blt.n	8012e2e <eeprom_write_ce+0x192>
 8012d92:	2201      	movs	r2, #1
 8012d94:	2102      	movs	r1, #2
 8012d96:	4620      	mov	r0, r4
 8012d98:	f7f3 fd0c 	bl	80067b4 <S2PI_WriteGpioPin>
 8012d9c:	2800      	cmp	r0, #0
 8012d9e:	db46      	blt.n	8012e2e <eeprom_write_ce+0x192>
 8012da0:	2200      	movs	r2, #0
 8012da2:	4611      	mov	r1, r2
 8012da4:	4620      	mov	r0, r4
 8012da6:	f7f3 fd05 	bl	80067b4 <S2PI_WriteGpioPin>
 8012daa:	2800      	cmp	r0, #0
 8012dac:	db3f      	blt.n	8012e2e <eeprom_write_ce+0x192>
 8012dae:	2201      	movs	r2, #1
 8012db0:	2100      	movs	r1, #0
 8012db2:	4620      	mov	r0, r4
 8012db4:	f7f3 fcfe 	bl	80067b4 <S2PI_WriteGpioPin>
 8012db8:	2800      	cmp	r0, #0
 8012dba:	db38      	blt.n	8012e2e <eeprom_write_ce+0x192>
 8012dbc:	f085 0201 	eor.w	r2, r5, #1
 8012dc0:	2102      	movs	r1, #2
 8012dc2:	4620      	mov	r0, r4
 8012dc4:	f7f3 fcf6 	bl	80067b4 <S2PI_WriteGpioPin>
 8012dc8:	2800      	cmp	r0, #0
 8012dca:	db30      	blt.n	8012e2e <eeprom_write_ce+0x192>
 8012dcc:	2200      	movs	r2, #0
 8012dce:	4611      	mov	r1, r2
 8012dd0:	4620      	mov	r0, r4
 8012dd2:	f7f3 fcef 	bl	80067b4 <S2PI_WriteGpioPin>
 8012dd6:	2800      	cmp	r0, #0
 8012dd8:	db29      	blt.n	8012e2e <eeprom_write_ce+0x192>
 8012dda:	2201      	movs	r2, #1
 8012ddc:	2100      	movs	r1, #0
 8012dde:	4620      	mov	r0, r4
 8012de0:	f7f3 fce8 	bl	80067b4 <S2PI_WriteGpioPin>
 8012de4:	2800      	cmp	r0, #0
 8012de6:	db22      	blt.n	8012e2e <eeprom_write_ce+0x192>
 8012de8:	4632      	mov	r2, r6
 8012dea:	2102      	movs	r1, #2
 8012dec:	4620      	mov	r0, r4
 8012dee:	f7f3 fce1 	bl	80067b4 <S2PI_WriteGpioPin>
 8012df2:	2800      	cmp	r0, #0
 8012df4:	db1b      	blt.n	8012e2e <eeprom_write_ce+0x192>
 8012df6:	2200      	movs	r2, #0
 8012df8:	4611      	mov	r1, r2
 8012dfa:	4620      	mov	r0, r4
 8012dfc:	f7f3 fcda 	bl	80067b4 <S2PI_WriteGpioPin>
 8012e00:	2800      	cmp	r0, #0
 8012e02:	db14      	blt.n	8012e2e <eeprom_write_ce+0x192>
 8012e04:	2201      	movs	r2, #1
 8012e06:	2100      	movs	r1, #0
 8012e08:	4620      	mov	r0, r4
 8012e0a:	f7f3 fcd3 	bl	80067b4 <S2PI_WriteGpioPin>
 8012e0e:	2800      	cmp	r0, #0
 8012e10:	db0d      	blt.n	8012e2e <eeprom_write_ce+0x192>
 8012e12:	2200      	movs	r2, #0
 8012e14:	2102      	movs	r1, #2
 8012e16:	4620      	mov	r0, r4
 8012e18:	f7f3 fccc 	bl	80067b4 <S2PI_WriteGpioPin>
 8012e1c:	2800      	cmp	r0, #0
 8012e1e:	db06      	blt.n	8012e2e <eeprom_write_ce+0x192>
 8012e20:	2200      	movs	r2, #0
 8012e22:	4620      	mov	r0, r4
 8012e24:	4611      	mov	r1, r2
 8012e26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e2a:	f7f3 bcc3 	b.w	80067b4 <S2PI_WriteGpioPin>
 8012e2e:	bd70      	pop	{r4, r5, r6, pc}

08012e30 <EEPROM_Read>:
 8012e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e32:	b083      	sub	sp, #12
 8012e34:	4605      	mov	r5, r0
 8012e36:	460e      	mov	r6, r1
 8012e38:	4617      	mov	r7, r2
 8012e3a:	f7f3 fc73 	bl	8006724 <S2PI_CaptureGpioControl>
 8012e3e:	1e04      	subs	r4, r0, #0
 8012e40:	db70      	blt.n	8012f24 <EEPROM_Read+0xf4>
 8012e42:	2201      	movs	r2, #1
 8012e44:	4611      	mov	r1, r2
 8012e46:	4628      	mov	r0, r5
 8012e48:	f7f3 fcb4 	bl	80067b4 <S2PI_WriteGpioPin>
 8012e4c:	1e04      	subs	r4, r0, #0
 8012e4e:	db66      	blt.n	8012f1e <EEPROM_Read+0xee>
 8012e50:	2201      	movs	r2, #1
 8012e52:	2102      	movs	r1, #2
 8012e54:	4628      	mov	r0, r5
 8012e56:	f7f3 fcad 	bl	80067b4 <S2PI_WriteGpioPin>
 8012e5a:	1e04      	subs	r4, r0, #0
 8012e5c:	db5f      	blt.n	8012f1e <EEPROM_Read+0xee>
 8012e5e:	2201      	movs	r2, #1
 8012e60:	2100      	movs	r1, #0
 8012e62:	4628      	mov	r0, r5
 8012e64:	f7f3 fca6 	bl	80067b4 <S2PI_WriteGpioPin>
 8012e68:	1e04      	subs	r4, r0, #0
 8012e6a:	db58      	blt.n	8012f1e <EEPROM_Read+0xee>
 8012e6c:	2200      	movs	r2, #0
 8012e6e:	2101      	movs	r1, #1
 8012e70:	4628      	mov	r0, r5
 8012e72:	f7ff ff13 	bl	8012c9c <eeprom_write_ce>
 8012e76:	1e04      	subs	r4, r0, #0
 8012e78:	db51      	blt.n	8012f1e <EEPROM_Read+0xee>
 8012e7a:	f006 020f 	and.w	r2, r6, #15
 8012e7e:	2101      	movs	r1, #1
 8012e80:	4628      	mov	r0, r5
 8012e82:	f7ff fe07 	bl	8012a94 <eeprom_place_command>
 8012e86:	1e04      	subs	r4, r0, #0
 8012e88:	db49      	blt.n	8012f1e <EEPROM_Read+0xee>
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	2101      	movs	r1, #1
 8012e8e:	4628      	mov	r0, r5
 8012e90:	f7ff ff04 	bl	8012c9c <eeprom_write_ce>
 8012e94:	1e04      	subs	r4, r0, #0
 8012e96:	db42      	blt.n	8012f1e <EEPROM_Read+0xee>
 8012e98:	2201      	movs	r2, #1
 8012e9a:	4611      	mov	r1, r2
 8012e9c:	4628      	mov	r0, r5
 8012e9e:	f7f3 fc89 	bl	80067b4 <S2PI_WriteGpioPin>
 8012ea2:	1e04      	subs	r4, r0, #0
 8012ea4:	db3b      	blt.n	8012f1e <EEPROM_Read+0xee>
 8012ea6:	2201      	movs	r2, #1
 8012ea8:	2100      	movs	r1, #0
 8012eaa:	4628      	mov	r0, r5
 8012eac:	f7f3 fc82 	bl	80067b4 <S2PI_WriteGpioPin>
 8012eb0:	1e04      	subs	r4, r0, #0
 8012eb2:	db34      	blt.n	8012f1e <EEPROM_Read+0xee>
 8012eb4:	2201      	movs	r2, #1
 8012eb6:	2100      	movs	r1, #0
 8012eb8:	4628      	mov	r0, r5
 8012eba:	f7ff feef 	bl	8012c9c <eeprom_write_ce>
 8012ebe:	1e04      	subs	r4, r0, #0
 8012ec0:	db2d      	blt.n	8012f1e <EEPROM_Read+0xee>
 8012ec2:	2300      	movs	r3, #0
 8012ec4:	9301      	str	r3, [sp, #4]
 8012ec6:	703b      	strb	r3, [r7, #0]
 8012ec8:	2607      	movs	r6, #7
 8012eca:	e01d      	b.n	8012f08 <EEPROM_Read+0xd8>
 8012ecc:	4628      	mov	r0, r5
 8012ece:	f7f3 fc71 	bl	80067b4 <S2PI_WriteGpioPin>
 8012ed2:	1e04      	subs	r4, r0, #0
 8012ed4:	aa01      	add	r2, sp, #4
 8012ed6:	db22      	blt.n	8012f1e <EEPROM_Read+0xee>
 8012ed8:	2103      	movs	r1, #3
 8012eda:	4628      	mov	r0, r5
 8012edc:	f7f3 fcb6 	bl	800684c <S2PI_ReadGpioPin>
 8012ee0:	1e04      	subs	r4, r0, #0
 8012ee2:	f04f 0200 	mov.w	r2, #0
 8012ee6:	db1a      	blt.n	8012f1e <EEPROM_Read+0xee>
 8012ee8:	4611      	mov	r1, r2
 8012eea:	4628      	mov	r0, r5
 8012eec:	f7f3 fc62 	bl	80067b4 <S2PI_WriteGpioPin>
 8012ef0:	1e04      	subs	r4, r0, #0
 8012ef2:	db14      	blt.n	8012f1e <EEPROM_Read+0xee>
 8012ef4:	9b01      	ldr	r3, [sp, #4]
 8012ef6:	783a      	ldrb	r2, [r7, #0]
 8012ef8:	f003 0301 	and.w	r3, r3, #1
 8012efc:	40b3      	lsls	r3, r6
 8012efe:	4313      	orrs	r3, r2
 8012f00:	3e01      	subs	r6, #1
 8012f02:	703b      	strb	r3, [r7, #0]
 8012f04:	1c73      	adds	r3, r6, #1
 8012f06:	d010      	beq.n	8012f2a <EEPROM_Read+0xfa>
 8012f08:	2200      	movs	r2, #0
 8012f0a:	2102      	movs	r1, #2
 8012f0c:	4628      	mov	r0, r5
 8012f0e:	f7f3 fc51 	bl	80067b4 <S2PI_WriteGpioPin>
 8012f12:	1e04      	subs	r4, r0, #0
 8012f14:	f04f 0201 	mov.w	r2, #1
 8012f18:	f04f 0100 	mov.w	r1, #0
 8012f1c:	dad6      	bge.n	8012ecc <EEPROM_Read+0x9c>
 8012f1e:	4628      	mov	r0, r5
 8012f20:	f7f3 fc28 	bl	8006774 <S2PI_ReleaseGpioControl>
 8012f24:	4620      	mov	r0, r4
 8012f26:	b003      	add	sp, #12
 8012f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f2a:	2201      	movs	r2, #1
 8012f2c:	4611      	mov	r1, r2
 8012f2e:	4628      	mov	r0, r5
 8012f30:	f7f3 fc40 	bl	80067b4 <S2PI_WriteGpioPin>
 8012f34:	1e04      	subs	r4, r0, #0
 8012f36:	dbf2      	blt.n	8012f1e <EEPROM_Read+0xee>
 8012f38:	2201      	movs	r2, #1
 8012f3a:	2100      	movs	r1, #0
 8012f3c:	4628      	mov	r0, r5
 8012f3e:	f7f3 fc39 	bl	80067b4 <S2PI_WriteGpioPin>
 8012f42:	1e04      	subs	r4, r0, #0
 8012f44:	dbeb      	blt.n	8012f1e <EEPROM_Read+0xee>
 8012f46:	2200      	movs	r2, #0
 8012f48:	2101      	movs	r1, #1
 8012f4a:	4628      	mov	r0, r5
 8012f4c:	f7ff fea6 	bl	8012c9c <eeprom_write_ce>
 8012f50:	1e04      	subs	r4, r0, #0
 8012f52:	dbe4      	blt.n	8012f1e <EEPROM_Read+0xee>
 8012f54:	2201      	movs	r2, #1
 8012f56:	4611      	mov	r1, r2
 8012f58:	4628      	mov	r0, r5
 8012f5a:	f7f3 fc2b 	bl	80067b4 <S2PI_WriteGpioPin>
 8012f5e:	1e04      	subs	r4, r0, #0
 8012f60:	dbdd      	blt.n	8012f1e <EEPROM_Read+0xee>
 8012f62:	2201      	movs	r2, #1
 8012f64:	2102      	movs	r1, #2
 8012f66:	4628      	mov	r0, r5
 8012f68:	f7f3 fc24 	bl	80067b4 <S2PI_WriteGpioPin>
 8012f6c:	1e04      	subs	r4, r0, #0
 8012f6e:	dbd6      	blt.n	8012f1e <EEPROM_Read+0xee>
 8012f70:	2201      	movs	r2, #1
 8012f72:	2100      	movs	r1, #0
 8012f74:	4628      	mov	r0, r5
 8012f76:	f7f3 fc1d 	bl	80067b4 <S2PI_WriteGpioPin>
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	4628      	mov	r0, r5
 8012f7e:	461d      	mov	r5, r3
 8012f80:	f7f3 fbf8 	bl	8006774 <S2PI_ReleaseGpioControl>
 8012f84:	ea15 0425 	ands.w	r4, r5, r5, asr #32
 8012f88:	bf38      	it	cc
 8012f8a:	4604      	movcc	r4, r0
 8012f8c:	4620      	mov	r0, r4
 8012f8e:	b003      	add	sp, #12
 8012f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f92:	bf00      	nop

08012f94 <print>:
 8012f94:	b40f      	push	{r0, r1, r2, r3}
 8012f96:	2000      	movs	r0, #0
 8012f98:	b004      	add	sp, #16
 8012f9a:	4770      	bx	lr

08012f9c <EEPROM_ReadChipId>:
 8012f9c:	7b43      	ldrb	r3, [r0, #13]
 8012f9e:	7b01      	ldrb	r1, [r0, #12]
 8012fa0:	7b82      	ldrb	r2, [r0, #14]
 8012fa2:	7bc0      	ldrb	r0, [r0, #15]
 8012fa4:	021b      	lsls	r3, r3, #8
 8012fa6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8012faa:	4313      	orrs	r3, r2
 8012fac:	f3c3 0314 	ubfx	r3, r3, #0, #21
 8012fb0:	09c0      	lsrs	r0, r0, #7
 8012fb2:	ea43 5040 	orr.w	r0, r3, r0, lsl #21
 8012fb6:	4770      	bx	lr

08012fb8 <EEPROM_ReadModule>:
 8012fb8:	b500      	push	{lr}
 8012fba:	f8b0 200b 	ldrh.w	r2, [r0, #11]
 8012fbe:	f890 e00c 	ldrb.w	lr, [r0, #12]
 8012fc2:	7bc1      	ldrb	r1, [r0, #15]
 8012fc4:	7b43      	ldrb	r3, [r0, #13]
 8012fc6:	f890 c00e 	ldrb.w	ip, [r0, #14]
 8012fca:	ba52      	rev16	r2, r2
 8012fcc:	f412 6ffc 	tst.w	r2, #2016	@ 0x7e0
 8012fd0:	f3c2 1045 	ubfx	r0, r2, #5, #6
 8012fd4:	d002      	beq.n	8012fdc <EEPROM_ReadModule+0x24>
 8012fd6:	b2c0      	uxtb	r0, r0
 8012fd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8012fdc:	021b      	lsls	r3, r3, #8
 8012fde:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8012fe2:	ea40 000c 	orr.w	r0, r0, ip
 8012fe6:	09c9      	lsrs	r1, r1, #7
 8012fe8:	f3c0 0014 	ubfx	r0, r0, #0, #21
 8012fec:	ea40 5041 	orr.w	r0, r0, r1, lsl #21
 8012ff0:	f2a0 3003 	subw	r0, r0, #771	@ 0x303
 8012ff4:	f5b0 7fe3 	cmp.w	r0, #454	@ 0x1c6
 8012ff8:	bf8c      	ite	hi
 8012ffa:	2000      	movhi	r0, #0
 8012ffc:	2001      	movls	r0, #1
 8012ffe:	f85d fb04 	ldr.w	pc, [sp], #4
 8013002:	bf00      	nop

08013004 <EEPROM_Decode>:
 8013004:	2300      	movs	r3, #0
 8013006:	6003      	str	r3, [r0, #0]
 8013008:	6043      	str	r3, [r0, #4]
 801300a:	6083      	str	r3, [r0, #8]
 801300c:	60c3      	str	r3, [r0, #12]
 801300e:	6103      	str	r3, [r0, #16]
 8013010:	8283      	strh	r3, [r0, #20]
 8013012:	f8b1 300b 	ldrh.w	r3, [r1, #11]
 8013016:	ba5b      	rev16	r3, r3
 8013018:	f413 6ffc 	tst.w	r3, #2016	@ 0x7e0
 801301c:	f3c3 1245 	ubfx	r2, r3, #5, #6
 8013020:	f040 808d 	bne.w	801313e <EEPROM_Decode+0x13a>
 8013024:	7b4b      	ldrb	r3, [r1, #13]
 8013026:	f891 c00c 	ldrb.w	ip, [r1, #12]
 801302a:	021b      	lsls	r3, r3, #8
 801302c:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8013030:	f891 c00e 	ldrb.w	ip, [r1, #14]
 8013034:	ea43 030c 	orr.w	r3, r3, ip
 8013038:	f891 c00f 	ldrb.w	ip, [r1, #15]
 801303c:	f3c3 0314 	ubfx	r3, r3, #0, #21
 8013040:	ea4f 1cdc 	mov.w	ip, ip, lsr #7
 8013044:	ea43 534c 	orr.w	r3, r3, ip, lsl #21
 8013048:	f2a3 3303 	subw	r3, r3, #771	@ 0x303
 801304c:	f5b3 7fe3 	cmp.w	r3, #454	@ 0x1c6
 8013050:	f200 8129 	bhi.w	80132a6 <EEPROM_Decode+0x2a2>
 8013054:	2301      	movs	r3, #1
 8013056:	7003      	strb	r3, [r0, #0]
 8013058:	780a      	ldrb	r2, [r1, #0]
 801305a:	08d3      	lsrs	r3, r2, #3
 801305c:	09d2      	lsrs	r2, r2, #7
 801305e:	bf18      	it	ne
 8013060:	f043 03e0 	orrne.w	r3, r3, #224	@ 0xe0
 8013064:	7043      	strb	r3, [r0, #1]
 8013066:	880b      	ldrh	r3, [r1, #0]
 8013068:	ba5b      	rev16	r3, r3
 801306a:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 801306e:	bf14      	ite	ne
 8013070:	22f0      	movne	r2, #240	@ 0xf0
 8013072:	2200      	moveq	r2, #0
 8013074:	f3c3 13c3 	ubfx	r3, r3, #7, #4
 8013078:	4313      	orrs	r3, r2
 801307a:	7083      	strb	r3, [r0, #2]
 801307c:	784b      	ldrb	r3, [r1, #1]
 801307e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8013082:	bf14      	ite	ne
 8013084:	22e0      	movne	r2, #224	@ 0xe0
 8013086:	2200      	moveq	r2, #0
 8013088:	f3c3 0384 	ubfx	r3, r3, #2, #5
 801308c:	4313      	orrs	r3, r2
 801308e:	70c3      	strb	r3, [r0, #3]
 8013090:	f8b1 3001 	ldrh.w	r3, [r1, #1]
 8013094:	ba5b      	rev16	r3, r3
 8013096:	f413 7f00 	tst.w	r3, #512	@ 0x200
 801309a:	bf14      	ite	ne
 801309c:	f44f 427e 	movne.w	r2, #65024	@ 0xfe00
 80130a0:	2200      	moveq	r2, #0
 80130a2:	f3c3 0348 	ubfx	r3, r3, #1, #9
 80130a6:	4313      	orrs	r3, r2
 80130a8:	8083      	strh	r3, [r0, #4]
 80130aa:	884b      	ldrh	r3, [r1, #2]
 80130ac:	ba5b      	rev16	r3, r3
 80130ae:	f3c3 1382 	ubfx	r3, r3, #6, #3
 80130b2:	7183      	strb	r3, [r0, #6]
 80130b4:	f8b1 3003 	ldrh.w	r3, [r1, #3]
 80130b8:	ba5b      	rev16	r3, r3
 80130ba:	f3c3 1389 	ubfx	r3, r3, #6, #10
 80130be:	71c3      	strb	r3, [r0, #7]
 80130c0:	794b      	ldrb	r3, [r1, #5]
 80130c2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80130c6:	bf14      	ite	ne
 80130c8:	22f8      	movne	r2, #248	@ 0xf8
 80130ca:	2200      	moveq	r2, #0
 80130cc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80130d0:	4313      	orrs	r3, r2
 80130d2:	7243      	strb	r3, [r0, #9]
 80130d4:	f8b1 3005 	ldrh.w	r3, [r1, #5]
 80130d8:	ba5b      	rev16	r3, r3
 80130da:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80130de:	bf14      	ite	ne
 80130e0:	22e0      	movne	r2, #224	@ 0xe0
 80130e2:	2200      	moveq	r2, #0
 80130e4:	f3c3 13c4 	ubfx	r3, r3, #7, #5
 80130e8:	4313      	orrs	r3, r2
 80130ea:	7283      	strb	r3, [r0, #10]
 80130ec:	798b      	ldrb	r3, [r1, #6]
 80130ee:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80130f2:	bf14      	ite	ne
 80130f4:	22f0      	movne	r2, #240	@ 0xf0
 80130f6:	2200      	moveq	r2, #0
 80130f8:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80130fc:	4313      	orrs	r3, r2
 80130fe:	72c3      	strb	r3, [r0, #11]
 8013100:	88cb      	ldrh	r3, [r1, #6]
 8013102:	ba5b      	rev16	r3, r3
 8013104:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8013108:	7303      	strb	r3, [r0, #12]
 801310a:	f8b1 3007 	ldrh.w	r3, [r1, #7]
 801310e:	ba5b      	rev16	r3, r3
 8013110:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8013114:	bf14      	ite	ne
 8013116:	22e0      	movne	r2, #224	@ 0xe0
 8013118:	2200      	moveq	r2, #0
 801311a:	f3c3 1384 	ubfx	r3, r3, #6, #5
 801311e:	4313      	orrs	r3, r2
 8013120:	7343      	strb	r3, [r0, #13]
 8013122:	890a      	ldrh	r2, [r1, #8]
 8013124:	ba52      	rev16	r2, r2
 8013126:	f3c2 12c7 	ubfx	r2, r2, #7, #8
 801312a:	0051      	lsls	r1, r2, #1
 801312c:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 8013130:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8013134:	2300      	movs	r3, #0
 8013136:	430a      	orrs	r2, r1
 8013138:	7402      	strb	r2, [r0, #16]
 801313a:	4618      	mov	r0, r3
 801313c:	4770      	bx	lr
 801313e:	b2d3      	uxtb	r3, r2
 8013140:	2a02      	cmp	r2, #2
 8013142:	7003      	strb	r3, [r0, #0]
 8013144:	f000 80b8 	beq.w	80132b8 <EEPROM_Decode+0x2b4>
 8013148:	2b02      	cmp	r3, #2
 801314a:	f240 80af 	bls.w	80132ac <EEPROM_Decode+0x2a8>
 801314e:	3b03      	subs	r3, #3
 8013150:	2b04      	cmp	r3, #4
 8013152:	f200 80ae 	bhi.w	80132b2 <EEPROM_Decode+0x2ae>
 8013156:	780a      	ldrb	r2, [r1, #0]
 8013158:	08d3      	lsrs	r3, r2, #3
 801315a:	09d2      	lsrs	r2, r2, #7
 801315c:	bf18      	it	ne
 801315e:	f043 03e0 	orrne.w	r3, r3, #224	@ 0xe0
 8013162:	7043      	strb	r3, [r0, #1]
 8013164:	880b      	ldrh	r3, [r1, #0]
 8013166:	ba5b      	rev16	r3, r3
 8013168:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 801316c:	bf14      	ite	ne
 801316e:	22f0      	movne	r2, #240	@ 0xf0
 8013170:	2200      	moveq	r2, #0
 8013172:	f3c3 13c3 	ubfx	r3, r3, #7, #4
 8013176:	4313      	orrs	r3, r2
 8013178:	7083      	strb	r3, [r0, #2]
 801317a:	784b      	ldrb	r3, [r1, #1]
 801317c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8013180:	bf14      	ite	ne
 8013182:	22e0      	movne	r2, #224	@ 0xe0
 8013184:	2200      	moveq	r2, #0
 8013186:	f3c3 0384 	ubfx	r3, r3, #2, #5
 801318a:	4313      	orrs	r3, r2
 801318c:	70c3      	strb	r3, [r0, #3]
 801318e:	f8b1 3001 	ldrh.w	r3, [r1, #1]
 8013192:	ba5b      	rev16	r3, r3
 8013194:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8013198:	bf14      	ite	ne
 801319a:	f44f 427e 	movne.w	r2, #65024	@ 0xfe00
 801319e:	2200      	moveq	r2, #0
 80131a0:	f3c3 0348 	ubfx	r3, r3, #1, #9
 80131a4:	4313      	orrs	r3, r2
 80131a6:	8083      	strh	r3, [r0, #4]
 80131a8:	884b      	ldrh	r3, [r1, #2]
 80131aa:	ba5b      	rev16	r3, r3
 80131ac:	f3c3 1382 	ubfx	r3, r3, #6, #3
 80131b0:	7183      	strb	r3, [r0, #6]
 80131b2:	f8b1 3003 	ldrh.w	r3, [r1, #3]
 80131b6:	ba5b      	rev16	r3, r3
 80131b8:	f3c3 1389 	ubfx	r3, r3, #6, #10
 80131bc:	71c3      	strb	r3, [r0, #7]
 80131be:	790b      	ldrb	r3, [r1, #4]
 80131c0:	f013 0f20 	tst.w	r3, #32
 80131c4:	bf14      	ite	ne
 80131c6:	22f8      	movne	r2, #248	@ 0xf8
 80131c8:	2200      	moveq	r2, #0
 80131ca:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 80131ce:	4313      	orrs	r3, r2
 80131d0:	7203      	strb	r3, [r0, #8]
 80131d2:	888b      	ldrh	r3, [r1, #4]
 80131d4:	ba5b      	rev16	r3, r3
 80131d6:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80131da:	bf14      	ite	ne
 80131dc:	22e0      	movne	r2, #224	@ 0xe0
 80131de:	2200      	moveq	r2, #0
 80131e0:	f3c3 1384 	ubfx	r3, r3, #6, #5
 80131e4:	4313      	orrs	r3, r2
 80131e6:	73c3      	strb	r3, [r0, #15]
 80131e8:	794b      	ldrb	r3, [r1, #5]
 80131ea:	f013 0f20 	tst.w	r3, #32
 80131ee:	bf14      	ite	ne
 80131f0:	22f8      	movne	r2, #248	@ 0xf8
 80131f2:	2200      	moveq	r2, #0
 80131f4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 80131f8:	4313      	orrs	r3, r2
 80131fa:	7243      	strb	r3, [r0, #9]
 80131fc:	f8b1 3005 	ldrh.w	r3, [r1, #5]
 8013200:	ba5b      	rev16	r3, r3
 8013202:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8013206:	bf14      	ite	ne
 8013208:	22e0      	movne	r2, #224	@ 0xe0
 801320a:	2200      	moveq	r2, #0
 801320c:	f3c3 1384 	ubfx	r3, r3, #6, #5
 8013210:	4313      	orrs	r3, r2
 8013212:	7283      	strb	r3, [r0, #10]
 8013214:	798b      	ldrb	r3, [r1, #6]
 8013216:	f013 0f20 	tst.w	r3, #32
 801321a:	bf14      	ite	ne
 801321c:	22f0      	movne	r2, #240	@ 0xf0
 801321e:	2200      	moveq	r2, #0
 8013220:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8013224:	4313      	orrs	r3, r2
 8013226:	72c3      	strb	r3, [r0, #11]
 8013228:	88cb      	ldrh	r3, [r1, #6]
 801322a:	ba5b      	rev16	r3, r3
 801322c:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8013230:	bf14      	ite	ne
 8013232:	22c0      	movne	r2, #192	@ 0xc0
 8013234:	2200      	moveq	r2, #0
 8013236:	f3c3 1305 	ubfx	r3, r3, #4, #6
 801323a:	4313      	orrs	r3, r2
 801323c:	7303      	strb	r3, [r0, #12]
 801323e:	f8b1 3007 	ldrh.w	r3, [r1, #7]
 8013242:	ba5b      	rev16	r3, r3
 8013244:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8013248:	bf14      	ite	ne
 801324a:	22c0      	movne	r2, #192	@ 0xc0
 801324c:	2200      	moveq	r2, #0
 801324e:	f3c3 1385 	ubfx	r3, r3, #6, #6
 8013252:	4313      	orrs	r3, r2
 8013254:	7343      	strb	r3, [r0, #13]
 8013256:	890b      	ldrh	r3, [r1, #8]
 8013258:	ba5b      	rev16	r3, r3
 801325a:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 801325e:	005a      	lsls	r2, r3, #1
 8013260:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8013264:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013268:	4313      	orrs	r3, r2
 801326a:	7403      	strb	r3, [r0, #16]
 801326c:	f8b1 3009 	ldrh.w	r3, [r1, #9]
 8013270:	ba5b      	rev16	r3, r3
 8013272:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8013276:	7383      	strb	r3, [r0, #14]
 8013278:	7a8a      	ldrb	r2, [r1, #10]
 801327a:	f012 0f40 	tst.w	r2, #64	@ 0x40
 801327e:	bf14      	ite	ne
 8013280:	23c0      	movne	r3, #192	@ 0xc0
 8013282:	2300      	moveq	r3, #0
 8013284:	f3c2 0245 	ubfx	r2, r2, #1, #6
 8013288:	4313      	orrs	r3, r2
 801328a:	b25b      	sxtb	r3, r3
 801328c:	8243      	strh	r3, [r0, #18]
 801328e:	894b      	ldrh	r3, [r1, #10]
 8013290:	ba5b      	rev16	r3, r3
 8013292:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8013296:	f64f 72c0 	movw	r2, #65472	@ 0xffc0
 801329a:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 801329e:	bf08      	it	eq
 80132a0:	2200      	moveq	r2, #0
 80132a2:	4313      	orrs	r3, r2
 80132a4:	8283      	strh	r3, [r0, #20]
 80132a6:	2300      	movs	r3, #0
 80132a8:	4618      	mov	r0, r3
 80132aa:	4770      	bx	lr
 80132ac:	2b01      	cmp	r3, #1
 80132ae:	f43f aed3 	beq.w	8013058 <EEPROM_Decode+0x54>
 80132b2:	236e      	movs	r3, #110	@ 0x6e
 80132b4:	4618      	mov	r0, r3
 80132b6:	4770      	bx	lr
 80132b8:	780a      	ldrb	r2, [r1, #0]
 80132ba:	08d3      	lsrs	r3, r2, #3
 80132bc:	09d2      	lsrs	r2, r2, #7
 80132be:	bf18      	it	ne
 80132c0:	f043 03e0 	orrne.w	r3, r3, #224	@ 0xe0
 80132c4:	7043      	strb	r3, [r0, #1]
 80132c6:	880b      	ldrh	r3, [r1, #0]
 80132c8:	ba5b      	rev16	r3, r3
 80132ca:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80132ce:	bf14      	ite	ne
 80132d0:	22f0      	movne	r2, #240	@ 0xf0
 80132d2:	2200      	moveq	r2, #0
 80132d4:	f3c3 13c3 	ubfx	r3, r3, #7, #4
 80132d8:	4313      	orrs	r3, r2
 80132da:	7083      	strb	r3, [r0, #2]
 80132dc:	784b      	ldrb	r3, [r1, #1]
 80132de:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80132e2:	bf14      	ite	ne
 80132e4:	22e0      	movne	r2, #224	@ 0xe0
 80132e6:	2200      	moveq	r2, #0
 80132e8:	f3c3 0384 	ubfx	r3, r3, #2, #5
 80132ec:	4313      	orrs	r3, r2
 80132ee:	70c3      	strb	r3, [r0, #3]
 80132f0:	f8b1 3001 	ldrh.w	r3, [r1, #1]
 80132f4:	ba5b      	rev16	r3, r3
 80132f6:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80132fa:	bf14      	ite	ne
 80132fc:	f44f 427e 	movne.w	r2, #65024	@ 0xfe00
 8013300:	2200      	moveq	r2, #0
 8013302:	f3c3 0348 	ubfx	r3, r3, #1, #9
 8013306:	4313      	orrs	r3, r2
 8013308:	8083      	strh	r3, [r0, #4]
 801330a:	884b      	ldrh	r3, [r1, #2]
 801330c:	ba5b      	rev16	r3, r3
 801330e:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8013312:	7183      	strb	r3, [r0, #6]
 8013314:	f8b1 3003 	ldrh.w	r3, [r1, #3]
 8013318:	ba5b      	rev16	r3, r3
 801331a:	f3c3 1389 	ubfx	r3, r3, #6, #10
 801331e:	71c3      	strb	r3, [r0, #7]
 8013320:	888b      	ldrh	r3, [r1, #4]
 8013322:	ba5b      	rev16	r3, r3
 8013324:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8013328:	bf14      	ite	ne
 801332a:	22e0      	movne	r2, #224	@ 0xe0
 801332c:	2200      	moveq	r2, #0
 801332e:	f3c3 1384 	ubfx	r3, r3, #6, #5
 8013332:	4313      	orrs	r3, r2
 8013334:	73c3      	strb	r3, [r0, #15]
 8013336:	794b      	ldrb	r3, [r1, #5]
 8013338:	f013 0f20 	tst.w	r3, #32
 801333c:	bf14      	ite	ne
 801333e:	22f8      	movne	r2, #248	@ 0xf8
 8013340:	2200      	moveq	r2, #0
 8013342:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8013346:	4313      	orrs	r3, r2
 8013348:	7243      	strb	r3, [r0, #9]
 801334a:	f8b1 3005 	ldrh.w	r3, [r1, #5]
 801334e:	ba5b      	rev16	r3, r3
 8013350:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8013354:	bf14      	ite	ne
 8013356:	22e0      	movne	r2, #224	@ 0xe0
 8013358:	2200      	moveq	r2, #0
 801335a:	f3c3 1384 	ubfx	r3, r3, #6, #5
 801335e:	4313      	orrs	r3, r2
 8013360:	7283      	strb	r3, [r0, #10]
 8013362:	798b      	ldrb	r3, [r1, #6]
 8013364:	f013 0f20 	tst.w	r3, #32
 8013368:	bf14      	ite	ne
 801336a:	22f0      	movne	r2, #240	@ 0xf0
 801336c:	2200      	moveq	r2, #0
 801336e:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8013372:	4313      	orrs	r3, r2
 8013374:	72c3      	strb	r3, [r0, #11]
 8013376:	88cb      	ldrh	r3, [r1, #6]
 8013378:	ba5b      	rev16	r3, r3
 801337a:	f413 7f00 	tst.w	r3, #512	@ 0x200
 801337e:	bf14      	ite	ne
 8013380:	22c0      	movne	r2, #192	@ 0xc0
 8013382:	2200      	moveq	r2, #0
 8013384:	f3c3 1305 	ubfx	r3, r3, #4, #6
 8013388:	4313      	orrs	r3, r2
 801338a:	7303      	strb	r3, [r0, #12]
 801338c:	f8b1 3007 	ldrh.w	r3, [r1, #7]
 8013390:	ba5b      	rev16	r3, r3
 8013392:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8013396:	bf14      	ite	ne
 8013398:	22c0      	movne	r2, #192	@ 0xc0
 801339a:	2200      	moveq	r2, #0
 801339c:	f3c3 1385 	ubfx	r3, r3, #6, #6
 80133a0:	4313      	orrs	r3, r2
 80133a2:	7343      	strb	r3, [r0, #13]
 80133a4:	890b      	ldrh	r3, [r1, #8]
 80133a6:	ba5b      	rev16	r3, r3
 80133a8:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 80133ac:	005a      	lsls	r2, r3, #1
 80133ae:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 80133b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80133b6:	4313      	orrs	r3, r2
 80133b8:	7403      	strb	r3, [r0, #16]
 80133ba:	f8b1 2009 	ldrh.w	r2, [r1, #9]
 80133be:	ba52      	rev16	r2, r2
 80133c0:	2300      	movs	r3, #0
 80133c2:	f3c2 12c8 	ubfx	r2, r2, #7, #9
 80133c6:	7382      	strb	r2, [r0, #14]
 80133c8:	4618      	mov	r0, r3
 80133ca:	4770      	bx	lr

080133cc <CheckStateAndRecoverError>:
 80133cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80133d0:	2800      	cmp	r0, #0
 80133d2:	d04f      	beq.n	8013474 <CheckStateAndRecoverError+0xa8>
 80133d4:	4b2e      	ldr	r3, [pc, #184]	@ (8013490 <CheckStateAndRecoverError+0xc4>)
 80133d6:	4617      	mov	r7, r2
 80133d8:	6802      	ldr	r2, [r0, #0]
 80133da:	429a      	cmp	r2, r3
 80133dc:	4604      	mov	r4, r0
 80133de:	d143      	bne.n	8013468 <CheckStateAndRecoverError+0x9c>
 80133e0:	1d05      	adds	r5, r0, #4
 80133e2:	4628      	mov	r0, r5
 80133e4:	4688      	mov	r8, r1
 80133e6:	f00c f99d 	bl	801f724 <Argus_Dev_GetStatus>
 80133ea:	1e06      	subs	r6, r0, #0
 80133ec:	db0f      	blt.n	801340e <CheckStateAndRecoverError+0x42>
 80133ee:	f204 79cc 	addw	r9, r4, #1996	@ 0x7cc
 80133f2:	4648      	mov	r0, r9
 80133f4:	f003 fede 	bl	80171b4 <Argus_Measurement_CheckTimeout>
 80133f8:	2800      	cmp	r0, #0
 80133fa:	db1f      	blt.n	801343c <CheckStateAndRecoverError+0x70>
 80133fc:	f1b8 0f00 	cmp.w	r8, #0
 8013400:	d000      	beq.n	8013404 <CheckStateAndRecoverError+0x38>
 8013402:	bb2e      	cbnz	r6, 8013450 <CheckStateAndRecoverError+0x84>
 8013404:	b977      	cbnz	r7, 8013424 <CheckStateAndRecoverError+0x58>
 8013406:	2500      	movs	r5, #0
 8013408:	4628      	mov	r0, r5
 801340a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801340e:	4628      	mov	r0, r5
 8013410:	f00d f9de 	bl	80207d0 <Argus_Dev_RecoverFromError>
 8013414:	1e05      	subs	r5, r0, #0
 8013416:	daf5      	bge.n	8013404 <CheckStateAndRecoverError+0x38>
 8013418:	462a      	mov	r2, r5
 801341a:	4631      	mov	r1, r6
 801341c:	481d      	ldr	r0, [pc, #116]	@ (8013494 <CheckStateAndRecoverError+0xc8>)
 801341e:	f7ff fdb9 	bl	8012f94 <print>
 8013422:	e7f1      	b.n	8013408 <CheckStateAndRecoverError+0x3c>
 8013424:	f204 70cc 	addw	r0, r4, #1996	@ 0x7cc
 8013428:	f003 fe1c 	bl	8017064 <Argus_Measurement_IsActive>
 801342c:	2800      	cmp	r0, #0
 801342e:	d0ea      	beq.n	8013406 <CheckStateAndRecoverError+0x3a>
 8013430:	4819      	ldr	r0, [pc, #100]	@ (8013498 <CheckStateAndRecoverError+0xcc>)
 8013432:	f7ff fdaf 	bl	8012f94 <print>
 8013436:	f06f 05be 	mvn.w	r5, #190	@ 0xbe
 801343a:	e7e5      	b.n	8013408 <CheckStateAndRecoverError+0x3c>
 801343c:	4648      	mov	r0, r9
 801343e:	f003 fdeb 	bl	8017018 <Argus_Measurement_Abort>
 8013442:	1e05      	subs	r5, r0, #0
 8013444:	dade      	bge.n	8013404 <CheckStateAndRecoverError+0x38>
 8013446:	4629      	mov	r1, r5
 8013448:	4814      	ldr	r0, [pc, #80]	@ (801349c <CheckStateAndRecoverError+0xd0>)
 801344a:	f7ff fda3 	bl	8012f94 <print>
 801344e:	e7db      	b.n	8013408 <CheckStateAndRecoverError+0x3c>
 8013450:	b9b7      	cbnz	r7, 8013480 <CheckStateAndRecoverError+0xb4>
 8013452:	4628      	mov	r0, r5
 8013454:	4639      	mov	r1, r7
 8013456:	f00b ffd7 	bl	801f408 <Argus_Dev_AwaitStatus>
 801345a:	1e05      	subs	r5, r0, #0
 801345c:	dad3      	bge.n	8013406 <CheckStateAndRecoverError+0x3a>
 801345e:	4629      	mov	r1, r5
 8013460:	480f      	ldr	r0, [pc, #60]	@ (80134a0 <CheckStateAndRecoverError+0xd4>)
 8013462:	f7ff fd97 	bl	8012f94 <print>
 8013466:	e7cf      	b.n	8013408 <CheckStateAndRecoverError+0x3c>
 8013468:	480e      	ldr	r0, [pc, #56]	@ (80134a4 <CheckStateAndRecoverError+0xd8>)
 801346a:	f7ff fd93 	bl	8012f94 <print>
 801346e:	f06f 0506 	mvn.w	r5, #6
 8013472:	e7c9      	b.n	8013408 <CheckStateAndRecoverError+0x3c>
 8013474:	480c      	ldr	r0, [pc, #48]	@ (80134a8 <CheckStateAndRecoverError+0xdc>)
 8013476:	f7ff fd8d 	bl	8012f94 <print>
 801347a:	f06f 0504 	mvn.w	r5, #4
 801347e:	e7c3      	b.n	8013408 <CheckStateAndRecoverError+0x3c>
 8013480:	480a      	ldr	r0, [pc, #40]	@ (80134ac <CheckStateAndRecoverError+0xe0>)
 8013482:	4631      	mov	r1, r6
 8013484:	f7ff fd86 	bl	8012f94 <print>
 8013488:	f06f 05be 	mvn.w	r5, #190	@ 0xbe
 801348c:	e7bc      	b.n	8013408 <CheckStateAndRecoverError+0x3c>
 801348e:	bf00      	nop
 8013490:	0afb8550 	.word	0x0afb8550
 8013494:	0802ca90 	.word	0x0802ca90
 8013498:	0802cb6c 	.word	0x0802cb6c
 801349c:	0802cacc 	.word	0x0802cacc
 80134a0:	0802cb2c 	.word	0x0802cb2c
 80134a4:	0802ca68 	.word	0x0802ca68
 80134a8:	0802ca40 	.word	0x0802ca40
 80134ac:	0802cb04 	.word	0x0802cb04

080134b0 <Argus_SetMeasurementMode.part.0>:
 80134b0:	b570      	push	{r4, r5, r6, lr}
 80134b2:	f5ad 7d7c 	sub.w	sp, sp, #1008	@ 0x3f0
 80134b6:	460a      	mov	r2, r1
 80134b8:	9101      	str	r1, [sp, #4]
 80134ba:	4605      	mov	r5, r0
 80134bc:	a94d      	add	r1, sp, #308	@ 0x134
 80134be:	f500 7042 	add.w	r0, r0, #776	@ 0x308
 80134c2:	f013 ff1f 	bl	8027304 <Argus_Cal_GetCurrentDefaultCalibration>
 80134c6:	4604      	mov	r4, r0
 80134c8:	b118      	cbz	r0, 80134d2 <Argus_SetMeasurementMode.part.0+0x22>
 80134ca:	4620      	mov	r0, r4
 80134cc:	f50d 7d7c 	add.w	sp, sp, #1008	@ 0x3f0
 80134d0:	bd70      	pop	{r4, r5, r6, pc}
 80134d2:	9a01      	ldr	r2, [sp, #4]
 80134d4:	a903      	add	r1, sp, #12
 80134d6:	f505 70ee 	add.w	r0, r5, #476	@ 0x1dc
 80134da:	f00f fbed 	bl	8022cb8 <Argus_Cfg_GetCurrentDefaultConfiguration>
 80134de:	4604      	mov	r4, r0
 80134e0:	2800      	cmp	r0, #0
 80134e2:	d1f2      	bne.n	80134ca <Argus_SetMeasurementMode.part.0+0x1a>
 80134e4:	1d2e      	adds	r6, r5, #4
 80134e6:	21c0      	movs	r1, #192	@ 0xc0
 80134e8:	4630      	mov	r0, r6
 80134ea:	f00c f835 	bl	801f558 <Argus_Dev_SetStatusSync>
 80134ee:	4604      	mov	r4, r0
 80134f0:	2800      	cmp	r0, #0
 80134f2:	d1ea      	bne.n	80134ca <Argus_SetMeasurementMode.part.0+0x1a>
 80134f4:	a903      	add	r1, sp, #12
 80134f6:	aa4d      	add	r2, sp, #308	@ 0x134
 80134f8:	4628      	mov	r0, r5
 80134fa:	f001 fe0d 	bl	8015118 <Argus_Core_SetSettingsSync>
 80134fe:	21c0      	movs	r1, #192	@ 0xc0
 8013500:	4604      	mov	r4, r0
 8013502:	4630      	mov	r0, r6
 8013504:	f00c f8fa 	bl	801f6fc <Argus_Dev_ClearStatus>
 8013508:	4620      	mov	r0, r4
 801350a:	f50d 7d7c 	add.w	sp, sp, #1008	@ 0x3f0
 801350e:	bd70      	pop	{r4, r5, r6, pc}

08013510 <Argus_InitMode>:
 8013510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013514:	f5ad 7d7f 	sub.w	sp, sp, #1020	@ 0x3fc
 8013518:	9203      	str	r2, [sp, #12]
 801351a:	2800      	cmp	r0, #0
 801351c:	f000 8114 	beq.w	8013748 <Argus_InitMode+0x238>
 8013520:	4b8c      	ldr	r3, [pc, #560]	@ (8013754 <Argus_InitMode+0x244>)
 8013522:	6802      	ldr	r2, [r0, #0]
 8013524:	429a      	cmp	r2, r3
 8013526:	4604      	mov	r4, r0
 8013528:	f000 8108 	beq.w	801373c <Argus_InitMode+0x22c>
 801352c:	1d05      	adds	r5, r0, #4
 801352e:	f640 62ec 	movw	r2, #3820	@ 0xeec
 8013532:	4688      	mov	r8, r1
 8013534:	f06f 0a06 	mvn.w	sl, #6
 8013538:	2100      	movs	r1, #0
 801353a:	f204 79cc 	addw	r9, r4, #1996	@ 0x7cc
 801353e:	f016 f908 	bl	8029752 <memset>
 8013542:	4629      	mov	r1, r5
 8013544:	4648      	mov	r0, r9
 8013546:	f8c4 a004 	str.w	sl, [r4, #4]
 801354a:	f003 fd53 	bl	8016ff4 <Argus_Measurement_Init>
 801354e:	f504 7742 	add.w	r7, r4, #776	@ 0x308
 8013552:	f604 367c 	addw	r6, r4, #2940	@ 0xb7c
 8013556:	f504 723a 	add.w	r2, r4, #744	@ 0x2e8
 801355a:	f504 73f0 	add.w	r3, r4, #480	@ 0x1e0
 801355e:	4630      	mov	r0, r6
 8013560:	9200      	str	r2, [sp, #0]
 8013562:	f504 71b6 	add.w	r1, r4, #364	@ 0x16c
 8013566:	463a      	mov	r2, r7
 8013568:	f504 7bee 	add.w	fp, r4, #476	@ 0x1dc
 801356c:	9302      	str	r3, [sp, #8]
 801356e:	f004 ffd3 	bl	8018518 <Argus_Eval_Init>
 8013572:	4629      	mov	r1, r5
 8013574:	4658      	mov	r0, fp
 8013576:	f00e fa5b 	bl	8021a30 <Argus_Cfg_Init>
 801357a:	4629      	mov	r1, r5
 801357c:	4638      	mov	r0, r7
 801357e:	f00f fd0b 	bl	8022f98 <Argus_Cal_Init>
 8013582:	f504 7134 	add.w	r1, r4, #720	@ 0x2d0
 8013586:	4632      	mov	r2, r6
 8013588:	9100      	str	r1, [sp, #0]
 801358a:	9b02      	ldr	r3, [sp, #8]
 801358c:	f8cd 8004 	str.w	r8, [sp, #4]
 8013590:	4639      	mov	r1, r7
 8013592:	4628      	mov	r0, r5
 8013594:	f00b fdf6 	bl	801f184 <Argus_Dev_Init>
 8013598:	1e06      	subs	r6, r0, #0
 801359a:	db63      	blt.n	8013664 <Argus_InitMode+0x154>
 801359c:	f04f 0800 	mov.w	r8, #0
 80135a0:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 80135a4:	4641      	mov	r1, r8
 80135a6:	a84f      	add	r0, sp, #316	@ 0x13c
 80135a8:	f016 f8d3 	bl	8029752 <memset>
 80135ac:	f8cd 8000 	str.w	r8, [sp]
 80135b0:	4643      	mov	r3, r8
 80135b2:	4642      	mov	r2, r8
 80135b4:	2101      	movs	r1, #1
 80135b6:	a84f      	add	r0, sp, #316	@ 0x13c
 80135b8:	f012 f8e0 	bl	802577c <Argus_Cal_GetDefaultCalibration>
 80135bc:	1e06      	subs	r6, r0, #0
 80135be:	f2c0 8088 	blt.w	80136d2 <Argus_InitMode+0x1c2>
 80135c2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80135c6:	4641      	mov	r1, r8
 80135c8:	a805      	add	r0, sp, #20
 80135ca:	f016 f8c2 	bl	8029752 <memset>
 80135ce:	f8cd 8000 	str.w	r8, [sp]
 80135d2:	4643      	mov	r3, r8
 80135d4:	4642      	mov	r2, r8
 80135d6:	2101      	movs	r1, #1
 80135d8:	a805      	add	r0, sp, #20
 80135da:	f00f faf5 	bl	8022bc8 <Argus_Cfg_GetDefaultConfiguration>
 80135de:	1e06      	subs	r6, r0, #0
 80135e0:	db54      	blt.n	801368c <Argus_InitMode+0x17c>
 80135e2:	aa4f      	add	r2, sp, #316	@ 0x13c
 80135e4:	a905      	add	r1, sp, #20
 80135e6:	4620      	mov	r0, r4
 80135e8:	f001 fd96 	bl	8015118 <Argus_Core_SetSettingsSync>
 80135ec:	1e06      	subs	r6, r0, #0
 80135ee:	db73      	blt.n	80136d8 <Argus_InitMode+0x1c8>
 80135f0:	4638      	mov	r0, r7
 80135f2:	f00f fcdf 	bl	8022fb4 <Argus_Cal_ReadEEPROMData>
 80135f6:	1e06      	subs	r6, r0, #0
 80135f8:	f2c0 8093 	blt.w	8013722 <Argus_InitMode+0x212>
 80135fc:	9b03      	ldr	r3, [sp, #12]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d047      	beq.n	8013692 <Argus_InitMode+0x182>
 8013602:	9a03      	ldr	r2, [sp, #12]
 8013604:	4658      	mov	r0, fp
 8013606:	a905      	add	r1, sp, #20
 8013608:	f00f fb56 	bl	8022cb8 <Argus_Cfg_GetCurrentDefaultConfiguration>
 801360c:	1e06      	subs	r6, r0, #0
 801360e:	db4b      	blt.n	80136a8 <Argus_InitMode+0x198>
 8013610:	9a03      	ldr	r2, [sp, #12]
 8013612:	a94f      	add	r1, sp, #316	@ 0x13c
 8013614:	4638      	mov	r0, r7
 8013616:	f013 fe75 	bl	8027304 <Argus_Cal_GetCurrentDefaultCalibration>
 801361a:	1e06      	subs	r6, r0, #0
 801361c:	db7c      	blt.n	8013718 <Argus_InitMode+0x208>
 801361e:	a94f      	add	r1, sp, #316	@ 0x13c
 8013620:	4638      	mov	r0, r7
 8013622:	f00f fccd 	bl	8022fc0 <Argus_Cal_ReadNVMData>
 8013626:	1e06      	subs	r6, r0, #0
 8013628:	db7e      	blt.n	8013728 <Argus_InitMode+0x218>
 801362a:	aa4f      	add	r2, sp, #316	@ 0x13c
 801362c:	a905      	add	r1, sp, #20
 801362e:	4620      	mov	r0, r4
 8013630:	f001 fd72 	bl	8015118 <Argus_Core_SetSettingsSync>
 8013634:	1e06      	subs	r6, r0, #0
 8013636:	db7c      	blt.n	8013732 <Argus_InitMode+0x222>
 8013638:	21c0      	movs	r1, #192	@ 0xc0
 801363a:	4628      	mov	r0, r5
 801363c:	f00c f85e 	bl	801f6fc <Argus_Dev_ClearStatus>
 8013640:	4628      	mov	r0, r5
 8013642:	f00c ff51 	bl	80204e8 <Argus_Dev_GetModule>
 8013646:	2800      	cmp	r0, #0
 8013648:	d049      	beq.n	80136de <Argus_InitMode+0x1ce>
 801364a:	2801      	cmp	r0, #1
 801364c:	d04a      	beq.n	80136e4 <Argus_InitMode+0x1d4>
 801364e:	2600      	movs	r6, #0
 8013650:	4628      	mov	r0, r5
 8013652:	f00c ff49 	bl	80204e8 <Argus_Dev_GetModule>
 8013656:	4b3f      	ldr	r3, [pc, #252]	@ (8013754 <Argus_InitMode+0x244>)
 8013658:	6023      	str	r3, [r4, #0]
 801365a:	2800      	cmp	r0, #0
 801365c:	bf08      	it	eq
 801365e:	f06f 06c6 	mvneq.w	r6, #198	@ 0xc6
 8013662:	e00e      	b.n	8013682 <Argus_InitMode+0x172>
 8013664:	483c      	ldr	r0, [pc, #240]	@ (8013758 <Argus_InitMode+0x248>)
 8013666:	4631      	mov	r1, r6
 8013668:	f7ff fc94 	bl	8012f94 <print>
 801366c:	4648      	mov	r0, r9
 801366e:	f003 fcd1 	bl	8017014 <Argus_Measurement_Deinit>
 8013672:	f640 62ec 	movw	r2, #3820	@ 0xeec
 8013676:	2100      	movs	r1, #0
 8013678:	4620      	mov	r0, r4
 801367a:	f016 f86a 	bl	8029752 <memset>
 801367e:	f8c4 a004 	str.w	sl, [r4, #4]
 8013682:	4630      	mov	r0, r6
 8013684:	f50d 7d7f 	add.w	sp, sp, #1020	@ 0x3fc
 8013688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801368c:	4833      	ldr	r0, [pc, #204]	@ (801375c <Argus_InitMode+0x24c>)
 801368e:	4631      	mov	r1, r6
 8013690:	e7ea      	b.n	8013668 <Argus_InitMode+0x158>
 8013692:	4628      	mov	r0, r5
 8013694:	f00c ff28 	bl	80204e8 <Argus_Dev_GetModule>
 8013698:	f000 00bf 	and.w	r0, r0, #191	@ 0xbf
 801369c:	2803      	cmp	r0, #3
 801369e:	bf14      	ite	ne
 80136a0:	2301      	movne	r3, #1
 80136a2:	2302      	moveq	r3, #2
 80136a4:	9303      	str	r3, [sp, #12]
 80136a6:	e7ac      	b.n	8013602 <Argus_InitMode+0xf2>
 80136a8:	482d      	ldr	r0, [pc, #180]	@ (8013760 <Argus_InitMode+0x250>)
 80136aa:	4631      	mov	r1, r6
 80136ac:	f7ff fc72 	bl	8012f94 <print>
 80136b0:	4648      	mov	r0, r9
 80136b2:	f003 fcaf 	bl	8017014 <Argus_Measurement_Deinit>
 80136b6:	f640 62ec 	movw	r2, #3820	@ 0xeec
 80136ba:	2100      	movs	r1, #0
 80136bc:	4620      	mov	r0, r4
 80136be:	f016 f848 	bl	8029752 <memset>
 80136c2:	f06f 0306 	mvn.w	r3, #6
 80136c6:	4630      	mov	r0, r6
 80136c8:	6063      	str	r3, [r4, #4]
 80136ca:	f50d 7d7f 	add.w	sp, sp, #1020	@ 0x3fc
 80136ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136d2:	4824      	ldr	r0, [pc, #144]	@ (8013764 <Argus_InitMode+0x254>)
 80136d4:	4631      	mov	r1, r6
 80136d6:	e7c7      	b.n	8013668 <Argus_InitMode+0x158>
 80136d8:	4823      	ldr	r0, [pc, #140]	@ (8013768 <Argus_InitMode+0x258>)
 80136da:	4631      	mov	r1, r6
 80136dc:	e7c4      	b.n	8013668 <Argus_InitMode+0x158>
 80136de:	4823      	ldr	r0, [pc, #140]	@ (801376c <Argus_InitMode+0x25c>)
 80136e0:	f7ff fc58 	bl	8012f94 <print>
 80136e4:	4638      	mov	r0, r7
 80136e6:	f00f fc89 	bl	8022ffc <Argus_Cal_GetCalibrationPtr>
 80136ea:	f8d0 3288 	ldr.w	r3, [r0, #648]	@ 0x288
 80136ee:	f003 0303 	and.w	r3, r3, #3
 80136f2:	2b03      	cmp	r3, #3
 80136f4:	d0ab      	beq.n	801364e <Argus_InitMode+0x13e>
 80136f6:	4620      	mov	r0, r4
 80136f8:	f003 fa54 	bl	8016ba4 <Argus_Core_ExecuteVsubCalibrationSequence>
 80136fc:	2800      	cmp	r0, #0
 80136fe:	ea00 76e0 	and.w	r6, r0, r0, asr #31
 8013702:	daa4      	bge.n	801364e <Argus_InitMode+0x13e>
 8013704:	481a      	ldr	r0, [pc, #104]	@ (8013770 <Argus_InitMode+0x260>)
 8013706:	4631      	mov	r1, r6
 8013708:	f7ff fc44 	bl	8012f94 <print>
 801370c:	4628      	mov	r0, r5
 801370e:	f00c feeb 	bl	80204e8 <Argus_Dev_GetModule>
 8013712:	2800      	cmp	r0, #0
 8013714:	d09c      	beq.n	8013650 <Argus_InitMode+0x140>
 8013716:	e7cb      	b.n	80136b0 <Argus_InitMode+0x1a0>
 8013718:	4631      	mov	r1, r6
 801371a:	4816      	ldr	r0, [pc, #88]	@ (8013774 <Argus_InitMode+0x264>)
 801371c:	f7ff fc3a 	bl	8012f94 <print>
 8013720:	e7c6      	b.n	80136b0 <Argus_InitMode+0x1a0>
 8013722:	4815      	ldr	r0, [pc, #84]	@ (8013778 <Argus_InitMode+0x268>)
 8013724:	4631      	mov	r1, r6
 8013726:	e79f      	b.n	8013668 <Argus_InitMode+0x158>
 8013728:	4631      	mov	r1, r6
 801372a:	4814      	ldr	r0, [pc, #80]	@ (801377c <Argus_InitMode+0x26c>)
 801372c:	f7ff fc32 	bl	8012f94 <print>
 8013730:	e7be      	b.n	80136b0 <Argus_InitMode+0x1a0>
 8013732:	4631      	mov	r1, r6
 8013734:	4812      	ldr	r0, [pc, #72]	@ (8013780 <Argus_InitMode+0x270>)
 8013736:	f7ff fc2d 	bl	8012f94 <print>
 801373a:	e7b9      	b.n	80136b0 <Argus_InitMode+0x1a0>
 801373c:	4811      	ldr	r0, [pc, #68]	@ (8013784 <Argus_InitMode+0x274>)
 801373e:	f7ff fc29 	bl	8012f94 <print>
 8013742:	f06f 0604 	mvn.w	r6, #4
 8013746:	e79c      	b.n	8013682 <Argus_InitMode+0x172>
 8013748:	480f      	ldr	r0, [pc, #60]	@ (8013788 <Argus_InitMode+0x278>)
 801374a:	f7ff fc23 	bl	8012f94 <print>
 801374e:	f06f 0604 	mvn.w	r6, #4
 8013752:	e796      	b.n	8013682 <Argus_InitMode+0x172>
 8013754:	0afb8550 	.word	0x0afb8550
 8013758:	0802cbe0 	.word	0x0802cbe0
 801375c:	0802cc54 	.word	0x0802cc54
 8013760:	0802cd08 	.word	0x0802cd08
 8013764:	0802cc1c 	.word	0x0802cc1c
 8013768:	0802cc90 	.word	0x0802cc90
 801376c:	0802ce00 	.word	0x0802ce00
 8013770:	0802ce84 	.word	0x0802ce84
 8013774:	0802cd4c 	.word	0x0802cd4c
 8013778:	0802ccd4 	.word	0x0802ccd4
 801377c:	0802cd8c 	.word	0x0802cd8c
 8013780:	0802cdbc 	.word	0x0802cdbc
 8013784:	0802cbb4 	.word	0x0802cbb4
 8013788:	0802ca40 	.word	0x0802ca40

0801378c <Argus_Deinit>:
 801378c:	b570      	push	{r4, r5, r6, lr}
 801378e:	b330      	cbz	r0, 80137de <Argus_Deinit+0x52>
 8013790:	4b16      	ldr	r3, [pc, #88]	@ (80137ec <Argus_Deinit+0x60>)
 8013792:	6802      	ldr	r2, [r0, #0]
 8013794:	429a      	cmp	r2, r3
 8013796:	4604      	mov	r4, r0
 8013798:	d11b      	bne.n	80137d2 <Argus_Deinit+0x46>
 801379a:	f200 76cc 	addw	r6, r0, #1996	@ 0x7cc
 801379e:	4630      	mov	r0, r6
 80137a0:	f003 fc3a 	bl	8017018 <Argus_Measurement_Abort>
 80137a4:	1e05      	subs	r5, r0, #0
 80137a6:	db0e      	blt.n	80137c6 <Argus_Deinit+0x3a>
 80137a8:	4630      	mov	r0, r6
 80137aa:	f003 fc33 	bl	8017014 <Argus_Measurement_Deinit>
 80137ae:	f640 62ec 	movw	r2, #3820	@ 0xeec
 80137b2:	2100      	movs	r1, #0
 80137b4:	4620      	mov	r0, r4
 80137b6:	f015 ffcc 	bl	8029752 <memset>
 80137ba:	f06f 0306 	mvn.w	r3, #6
 80137be:	6063      	str	r3, [r4, #4]
 80137c0:	2500      	movs	r5, #0
 80137c2:	4628      	mov	r0, r5
 80137c4:	bd70      	pop	{r4, r5, r6, pc}
 80137c6:	4629      	mov	r1, r5
 80137c8:	4809      	ldr	r0, [pc, #36]	@ (80137f0 <Argus_Deinit+0x64>)
 80137ca:	f7ff fbe3 	bl	8012f94 <print>
 80137ce:	4628      	mov	r0, r5
 80137d0:	bd70      	pop	{r4, r5, r6, pc}
 80137d2:	4808      	ldr	r0, [pc, #32]	@ (80137f4 <Argus_Deinit+0x68>)
 80137d4:	f7ff fbde 	bl	8012f94 <print>
 80137d8:	f06f 0506 	mvn.w	r5, #6
 80137dc:	e7f1      	b.n	80137c2 <Argus_Deinit+0x36>
 80137de:	4806      	ldr	r0, [pc, #24]	@ (80137f8 <Argus_Deinit+0x6c>)
 80137e0:	f7ff fbd8 	bl	8012f94 <print>
 80137e4:	f06f 0504 	mvn.w	r5, #4
 80137e8:	e7eb      	b.n	80137c2 <Argus_Deinit+0x36>
 80137ea:	bf00      	nop
 80137ec:	0afb8550 	.word	0x0afb8550
 80137f0:	0802cebc 	.word	0x0802cebc
 80137f4:	0802ca68 	.word	0x0802ca68
 80137f8:	0802ca40 	.word	0x0802ca40

080137fc <Argus_Malloc>:
 80137fc:	f015 b982 	b.w	8028b04 <malloc>

08013800 <Argus_Free>:
 8013800:	f015 b988 	b.w	8028b14 <free>

08013804 <Argus_DestroyHandle>:
 8013804:	b510      	push	{r4, lr}
 8013806:	6804      	ldr	r4, [r0, #0]
 8013808:	b91c      	cbnz	r4, 8013812 <Argus_DestroyHandle+0xe>
 801380a:	f7ff fff9 	bl	8013800 <Argus_Free>
 801380e:	4620      	mov	r0, r4
 8013810:	bd10      	pop	{r4, pc}
 8013812:	f04f 30ff 	mov.w	r0, #4294967295
 8013816:	bd10      	pop	{r4, pc}

08013818 <Argus_CreateHandle>:
 8013818:	b510      	push	{r4, lr}
 801381a:	f640 60ec 	movw	r0, #3820	@ 0xeec
 801381e:	f7ff ffed 	bl	80137fc <Argus_Malloc>
 8013822:	4604      	mov	r4, r0
 8013824:	b138      	cbz	r0, 8013836 <Argus_CreateHandle+0x1e>
 8013826:	f640 62ec 	movw	r2, #3820	@ 0xeec
 801382a:	2100      	movs	r1, #0
 801382c:	f015 ff91 	bl	8029752 <memset>
 8013830:	f06f 0306 	mvn.w	r3, #6
 8013834:	6063      	str	r3, [r4, #4]
 8013836:	4620      	mov	r0, r4
 8013838:	bd10      	pop	{r4, pc}
 801383a:	bf00      	nop

0801383c <Argus_GetStatus>:
 801383c:	b510      	push	{r4, lr}
 801383e:	b1a8      	cbz	r0, 801386c <Argus_GetStatus+0x30>
 8013840:	4b0d      	ldr	r3, [pc, #52]	@ (8013878 <Argus_GetStatus+0x3c>)
 8013842:	6802      	ldr	r2, [r0, #0]
 8013844:	429a      	cmp	r2, r3
 8013846:	4604      	mov	r4, r0
 8013848:	d10a      	bne.n	8013860 <Argus_GetStatus+0x24>
 801384a:	f200 70cc 	addw	r0, r0, #1996	@ 0x7cc
 801384e:	f003 fcb1 	bl	80171b4 <Argus_Measurement_CheckTimeout>
 8013852:	2800      	cmp	r0, #0
 8013854:	db09      	blt.n	801386a <Argus_GetStatus+0x2e>
 8013856:	1d20      	adds	r0, r4, #4
 8013858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801385c:	f00b bf62 	b.w	801f724 <Argus_Dev_GetStatus>
 8013860:	4806      	ldr	r0, [pc, #24]	@ (801387c <Argus_GetStatus+0x40>)
 8013862:	f7ff fb97 	bl	8012f94 <print>
 8013866:	f06f 0006 	mvn.w	r0, #6
 801386a:	bd10      	pop	{r4, pc}
 801386c:	4804      	ldr	r0, [pc, #16]	@ (8013880 <Argus_GetStatus+0x44>)
 801386e:	f7ff fb91 	bl	8012f94 <print>
 8013872:	f06f 0004 	mvn.w	r0, #4
 8013876:	bd10      	pop	{r4, pc}
 8013878:	0afb8550 	.word	0x0afb8550
 801387c:	0802ca68 	.word	0x0802ca68
 8013880:	0802ca40 	.word	0x0802ca40

08013884 <Argus_IsDataEvaluationPending>:
 8013884:	b538      	push	{r3, r4, r5, lr}
 8013886:	b1d0      	cbz	r0, 80138be <Argus_IsDataEvaluationPending+0x3a>
 8013888:	4b0f      	ldr	r3, [pc, #60]	@ (80138c8 <Argus_IsDataEvaluationPending+0x44>)
 801388a:	6802      	ldr	r2, [r0, #0]
 801388c:	429a      	cmp	r2, r3
 801388e:	4604      	mov	r4, r0
 8013890:	d110      	bne.n	80138b4 <Argus_IsDataEvaluationPending+0x30>
 8013892:	f200 75cc 	addw	r5, r0, #1996	@ 0x7cc
 8013896:	4628      	mov	r0, r5
 8013898:	f003 fc8c 	bl	80171b4 <Argus_Measurement_CheckTimeout>
 801389c:	2800      	cmp	r0, #0
 801389e:	db0c      	blt.n	80138ba <Argus_IsDataEvaluationPending+0x36>
 80138a0:	1d20      	adds	r0, r4, #4
 80138a2:	f00b ff3f 	bl	801f724 <Argus_Dev_GetStatus>
 80138a6:	2800      	cmp	r0, #0
 80138a8:	db07      	blt.n	80138ba <Argus_IsDataEvaluationPending+0x36>
 80138aa:	4628      	mov	r0, r5
 80138ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80138b0:	f003 bbcc 	b.w	801704c <Argus_Measurement_IsBufferBusy>
 80138b4:	4805      	ldr	r0, [pc, #20]	@ (80138cc <Argus_IsDataEvaluationPending+0x48>)
 80138b6:	f7ff fb6d 	bl	8012f94 <print>
 80138ba:	2000      	movs	r0, #0
 80138bc:	bd38      	pop	{r3, r4, r5, pc}
 80138be:	4804      	ldr	r0, [pc, #16]	@ (80138d0 <Argus_IsDataEvaluationPending+0x4c>)
 80138c0:	f7ff fb68 	bl	8012f94 <print>
 80138c4:	e7f9      	b.n	80138ba <Argus_IsDataEvaluationPending+0x36>
 80138c6:	bf00      	nop
 80138c8:	0afb8550 	.word	0x0afb8550
 80138cc:	0802ca68 	.word	0x0802ca68
 80138d0:	0802ca40 	.word	0x0802ca40

080138d4 <Argus_IsTimerMeasurementActive>:
 80138d4:	b538      	push	{r3, r4, r5, lr}
 80138d6:	b1d0      	cbz	r0, 801390e <Argus_IsTimerMeasurementActive+0x3a>
 80138d8:	4b0f      	ldr	r3, [pc, #60]	@ (8013918 <Argus_IsTimerMeasurementActive+0x44>)
 80138da:	6802      	ldr	r2, [r0, #0]
 80138dc:	429a      	cmp	r2, r3
 80138de:	4604      	mov	r4, r0
 80138e0:	d110      	bne.n	8013904 <Argus_IsTimerMeasurementActive+0x30>
 80138e2:	f200 75cc 	addw	r5, r0, #1996	@ 0x7cc
 80138e6:	4628      	mov	r0, r5
 80138e8:	f003 fc64 	bl	80171b4 <Argus_Measurement_CheckTimeout>
 80138ec:	2800      	cmp	r0, #0
 80138ee:	db0c      	blt.n	801390a <Argus_IsTimerMeasurementActive+0x36>
 80138f0:	1d20      	adds	r0, r4, #4
 80138f2:	f00b ff17 	bl	801f724 <Argus_Dev_GetStatus>
 80138f6:	2800      	cmp	r0, #0
 80138f8:	db07      	blt.n	801390a <Argus_IsTimerMeasurementActive+0x36>
 80138fa:	4628      	mov	r0, r5
 80138fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013900:	f003 bb9c 	b.w	801703c <Argus_Measurement_IsTimerActive>
 8013904:	4805      	ldr	r0, [pc, #20]	@ (801391c <Argus_IsTimerMeasurementActive+0x48>)
 8013906:	f7ff fb45 	bl	8012f94 <print>
 801390a:	2000      	movs	r0, #0
 801390c:	bd38      	pop	{r3, r4, r5, pc}
 801390e:	4804      	ldr	r0, [pc, #16]	@ (8013920 <Argus_IsTimerMeasurementActive+0x4c>)
 8013910:	f7ff fb40 	bl	8012f94 <print>
 8013914:	e7f9      	b.n	801390a <Argus_IsTimerMeasurementActive+0x36>
 8013916:	bf00      	nop
 8013918:	0afb8550 	.word	0x0afb8550
 801391c:	0802ca68 	.word	0x0802ca68
 8013920:	0802ca40 	.word	0x0802ca40

08013924 <Argus_StartMeasurementTimer>:
 8013924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013926:	b3d0      	cbz	r0, 801399e <Argus_StartMeasurementTimer+0x7a>
 8013928:	4b20      	ldr	r3, [pc, #128]	@ (80139ac <Argus_StartMeasurementTimer+0x88>)
 801392a:	6802      	ldr	r2, [r0, #0]
 801392c:	429a      	cmp	r2, r3
 801392e:	4604      	mov	r4, r0
 8013930:	d12c      	bne.n	801398c <Argus_StartMeasurementTimer+0x68>
 8013932:	1d07      	adds	r7, r0, #4
 8013934:	4638      	mov	r0, r7
 8013936:	460d      	mov	r5, r1
 8013938:	f00b fef4 	bl	801f724 <Argus_Dev_GetStatus>
 801393c:	1e06      	subs	r6, r0, #0
 801393e:	db0f      	blt.n	8013960 <Argus_StartMeasurementTimer+0x3c>
 8013940:	f204 76cc 	addw	r6, r4, #1996	@ 0x7cc
 8013944:	4630      	mov	r0, r6
 8013946:	f003 fc35 	bl	80171b4 <Argus_Measurement_CheckTimeout>
 801394a:	2800      	cmp	r0, #0
 801394c:	db14      	blt.n	8013978 <Argus_StartMeasurementTimer+0x54>
 801394e:	b31d      	cbz	r5, 8013998 <Argus_StartMeasurementTimer+0x74>
 8013950:	4622      	mov	r2, r4
 8013952:	4629      	mov	r1, r5
 8013954:	f204 70cc 	addw	r0, r4, #1996	@ 0x7cc
 8013958:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801395c:	f003 bd7e 	b.w	801745c <Argus_Measurement_StartTimer>
 8013960:	4638      	mov	r0, r7
 8013962:	f00c ff35 	bl	80207d0 <Argus_Dev_RecoverFromError>
 8013966:	1e07      	subs	r7, r0, #0
 8013968:	daf1      	bge.n	801394e <Argus_StartMeasurementTimer+0x2a>
 801396a:	4811      	ldr	r0, [pc, #68]	@ (80139b0 <Argus_StartMeasurementTimer+0x8c>)
 801396c:	463a      	mov	r2, r7
 801396e:	4631      	mov	r1, r6
 8013970:	f7ff fb10 	bl	8012f94 <print>
 8013974:	4638      	mov	r0, r7
 8013976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013978:	4630      	mov	r0, r6
 801397a:	f003 fb4d 	bl	8017018 <Argus_Measurement_Abort>
 801397e:	1e07      	subs	r7, r0, #0
 8013980:	dae5      	bge.n	801394e <Argus_StartMeasurementTimer+0x2a>
 8013982:	4639      	mov	r1, r7
 8013984:	480b      	ldr	r0, [pc, #44]	@ (80139b4 <Argus_StartMeasurementTimer+0x90>)
 8013986:	f7ff fb05 	bl	8012f94 <print>
 801398a:	e7f3      	b.n	8013974 <Argus_StartMeasurementTimer+0x50>
 801398c:	480a      	ldr	r0, [pc, #40]	@ (80139b8 <Argus_StartMeasurementTimer+0x94>)
 801398e:	f7ff fb01 	bl	8012f94 <print>
 8013992:	f06f 0706 	mvn.w	r7, #6
 8013996:	e7ed      	b.n	8013974 <Argus_StartMeasurementTimer+0x50>
 8013998:	f06f 0704 	mvn.w	r7, #4
 801399c:	e7ea      	b.n	8013974 <Argus_StartMeasurementTimer+0x50>
 801399e:	4807      	ldr	r0, [pc, #28]	@ (80139bc <Argus_StartMeasurementTimer+0x98>)
 80139a0:	f7ff faf8 	bl	8012f94 <print>
 80139a4:	f06f 0704 	mvn.w	r7, #4
 80139a8:	e7e4      	b.n	8013974 <Argus_StartMeasurementTimer+0x50>
 80139aa:	bf00      	nop
 80139ac:	0afb8550 	.word	0x0afb8550
 80139b0:	0802ca90 	.word	0x0802ca90
 80139b4:	0802cacc 	.word	0x0802cacc
 80139b8:	0802ca68 	.word	0x0802ca68
 80139bc:	0802ca40 	.word	0x0802ca40

080139c0 <Argus_StopMeasurementTimer>:
 80139c0:	b570      	push	{r4, r5, r6, lr}
 80139c2:	b3c8      	cbz	r0, 8013a38 <Argus_StopMeasurementTimer+0x78>
 80139c4:	4b1f      	ldr	r3, [pc, #124]	@ (8013a44 <Argus_StopMeasurementTimer+0x84>)
 80139c6:	6802      	ldr	r2, [r0, #0]
 80139c8:	429a      	cmp	r2, r3
 80139ca:	4604      	mov	r4, r0
 80139cc:	d12e      	bne.n	8013a2c <Argus_StopMeasurementTimer+0x6c>
 80139ce:	1d06      	adds	r6, r0, #4
 80139d0:	4630      	mov	r0, r6
 80139d2:	f00b fea7 	bl	801f724 <Argus_Dev_GetStatus>
 80139d6:	1e05      	subs	r5, r0, #0
 80139d8:	db0b      	blt.n	80139f2 <Argus_StopMeasurementTimer+0x32>
 80139da:	f204 74cc 	addw	r4, r4, #1996	@ 0x7cc
 80139de:	4620      	mov	r0, r4
 80139e0:	f003 fbe8 	bl	80171b4 <Argus_Measurement_CheckTimeout>
 80139e4:	2800      	cmp	r0, #0
 80139e6:	db10      	blt.n	8013a0a <Argus_StopMeasurementTimer+0x4a>
 80139e8:	4620      	mov	r0, r4
 80139ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80139ee:	f003 bd4f 	b.w	8017490 <Argus_Measurement_StopTimer>
 80139f2:	4630      	mov	r0, r6
 80139f4:	f00c feec 	bl	80207d0 <Argus_Dev_RecoverFromError>
 80139f8:	1e06      	subs	r6, r0, #0
 80139fa:	db10      	blt.n	8013a1e <Argus_StopMeasurementTimer+0x5e>
 80139fc:	f204 74cc 	addw	r4, r4, #1996	@ 0x7cc
 8013a00:	4620      	mov	r0, r4
 8013a02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a06:	f003 bd43 	b.w	8017490 <Argus_Measurement_StopTimer>
 8013a0a:	4620      	mov	r0, r4
 8013a0c:	f003 fb04 	bl	8017018 <Argus_Measurement_Abort>
 8013a10:	1e06      	subs	r6, r0, #0
 8013a12:	dae9      	bge.n	80139e8 <Argus_StopMeasurementTimer+0x28>
 8013a14:	4631      	mov	r1, r6
 8013a16:	480c      	ldr	r0, [pc, #48]	@ (8013a48 <Argus_StopMeasurementTimer+0x88>)
 8013a18:	f7ff fabc 	bl	8012f94 <print>
 8013a1c:	e004      	b.n	8013a28 <Argus_StopMeasurementTimer+0x68>
 8013a1e:	480b      	ldr	r0, [pc, #44]	@ (8013a4c <Argus_StopMeasurementTimer+0x8c>)
 8013a20:	4632      	mov	r2, r6
 8013a22:	4629      	mov	r1, r5
 8013a24:	f7ff fab6 	bl	8012f94 <print>
 8013a28:	4630      	mov	r0, r6
 8013a2a:	bd70      	pop	{r4, r5, r6, pc}
 8013a2c:	4808      	ldr	r0, [pc, #32]	@ (8013a50 <Argus_StopMeasurementTimer+0x90>)
 8013a2e:	f7ff fab1 	bl	8012f94 <print>
 8013a32:	f06f 0606 	mvn.w	r6, #6
 8013a36:	e7f7      	b.n	8013a28 <Argus_StopMeasurementTimer+0x68>
 8013a38:	4806      	ldr	r0, [pc, #24]	@ (8013a54 <Argus_StopMeasurementTimer+0x94>)
 8013a3a:	f7ff faab 	bl	8012f94 <print>
 8013a3e:	f06f 0604 	mvn.w	r6, #4
 8013a42:	e7f1      	b.n	8013a28 <Argus_StopMeasurementTimer+0x68>
 8013a44:	0afb8550 	.word	0x0afb8550
 8013a48:	0802cacc 	.word	0x0802cacc
 8013a4c:	0802ca90 	.word	0x0802ca90
 8013a50:	0802ca68 	.word	0x0802ca68
 8013a54:	0802ca40 	.word	0x0802ca40

08013a58 <Argus_TriggerMeasurement>:
 8013a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a5a:	2800      	cmp	r0, #0
 8013a5c:	d03e      	beq.n	8013adc <Argus_TriggerMeasurement+0x84>
 8013a5e:	4b22      	ldr	r3, [pc, #136]	@ (8013ae8 <Argus_TriggerMeasurement+0x90>)
 8013a60:	6802      	ldr	r2, [r0, #0]
 8013a62:	429a      	cmp	r2, r3
 8013a64:	4604      	mov	r4, r0
 8013a66:	d133      	bne.n	8013ad0 <Argus_TriggerMeasurement+0x78>
 8013a68:	1d07      	adds	r7, r0, #4
 8013a6a:	4638      	mov	r0, r7
 8013a6c:	460e      	mov	r6, r1
 8013a6e:	f00b fe59 	bl	801f724 <Argus_Dev_GetStatus>
 8013a72:	1e05      	subs	r5, r0, #0
 8013a74:	db0d      	blt.n	8013a92 <Argus_TriggerMeasurement+0x3a>
 8013a76:	f204 75cc 	addw	r5, r4, #1996	@ 0x7cc
 8013a7a:	4628      	mov	r0, r5
 8013a7c:	f003 fb9a 	bl	80171b4 <Argus_Measurement_CheckTimeout>
 8013a80:	2800      	cmp	r0, #0
 8013a82:	db14      	blt.n	8013aae <Argus_TriggerMeasurement+0x56>
 8013a84:	4622      	mov	r2, r4
 8013a86:	4631      	mov	r1, r6
 8013a88:	4628      	mov	r0, r5
 8013a8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013a8e:	f003 baf7 	b.w	8017080 <Argus_Measurement_Trigger>
 8013a92:	4638      	mov	r0, r7
 8013a94:	f00c fe9c 	bl	80207d0 <Argus_Dev_RecoverFromError>
 8013a98:	1e07      	subs	r7, r0, #0
 8013a9a:	db12      	blt.n	8013ac2 <Argus_TriggerMeasurement+0x6a>
 8013a9c:	f204 75cc 	addw	r5, r4, #1996	@ 0x7cc
 8013aa0:	4622      	mov	r2, r4
 8013aa2:	4631      	mov	r1, r6
 8013aa4:	4628      	mov	r0, r5
 8013aa6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013aaa:	f003 bae9 	b.w	8017080 <Argus_Measurement_Trigger>
 8013aae:	4628      	mov	r0, r5
 8013ab0:	f003 fab2 	bl	8017018 <Argus_Measurement_Abort>
 8013ab4:	1e07      	subs	r7, r0, #0
 8013ab6:	dae5      	bge.n	8013a84 <Argus_TriggerMeasurement+0x2c>
 8013ab8:	4639      	mov	r1, r7
 8013aba:	480c      	ldr	r0, [pc, #48]	@ (8013aec <Argus_TriggerMeasurement+0x94>)
 8013abc:	f7ff fa6a 	bl	8012f94 <print>
 8013ac0:	e004      	b.n	8013acc <Argus_TriggerMeasurement+0x74>
 8013ac2:	480b      	ldr	r0, [pc, #44]	@ (8013af0 <Argus_TriggerMeasurement+0x98>)
 8013ac4:	463a      	mov	r2, r7
 8013ac6:	4629      	mov	r1, r5
 8013ac8:	f7ff fa64 	bl	8012f94 <print>
 8013acc:	4638      	mov	r0, r7
 8013ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ad0:	4808      	ldr	r0, [pc, #32]	@ (8013af4 <Argus_TriggerMeasurement+0x9c>)
 8013ad2:	f7ff fa5f 	bl	8012f94 <print>
 8013ad6:	f06f 0706 	mvn.w	r7, #6
 8013ada:	e7f7      	b.n	8013acc <Argus_TriggerMeasurement+0x74>
 8013adc:	4806      	ldr	r0, [pc, #24]	@ (8013af8 <Argus_TriggerMeasurement+0xa0>)
 8013ade:	f7ff fa59 	bl	8012f94 <print>
 8013ae2:	f06f 0704 	mvn.w	r7, #4
 8013ae6:	e7f1      	b.n	8013acc <Argus_TriggerMeasurement+0x74>
 8013ae8:	0afb8550 	.word	0x0afb8550
 8013aec:	0802cacc 	.word	0x0802cacc
 8013af0:	0802ca90 	.word	0x0802ca90
 8013af4:	0802ca68 	.word	0x0802ca68
 8013af8:	0802ca40 	.word	0x0802ca40

08013afc <Argus_ExecuteXtalkCalibrationSequence>:
 8013afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013afe:	2800      	cmp	r0, #0
 8013b00:	d046      	beq.n	8013b90 <Argus_ExecuteXtalkCalibrationSequence+0x94>
 8013b02:	4b26      	ldr	r3, [pc, #152]	@ (8013b9c <Argus_ExecuteXtalkCalibrationSequence+0xa0>)
 8013b04:	6802      	ldr	r2, [r0, #0]
 8013b06:	429a      	cmp	r2, r3
 8013b08:	4604      	mov	r4, r0
 8013b0a:	d135      	bne.n	8013b78 <Argus_ExecuteXtalkCalibrationSequence+0x7c>
 8013b0c:	1d06      	adds	r6, r0, #4
 8013b0e:	4630      	mov	r0, r6
 8013b10:	f00b fe08 	bl	801f724 <Argus_Dev_GetStatus>
 8013b14:	1e05      	subs	r5, r0, #0
 8013b16:	db0f      	blt.n	8013b38 <Argus_ExecuteXtalkCalibrationSequence+0x3c>
 8013b18:	f204 77cc 	addw	r7, r4, #1996	@ 0x7cc
 8013b1c:	4638      	mov	r0, r7
 8013b1e:	f003 fb49 	bl	80171b4 <Argus_Measurement_CheckTimeout>
 8013b22:	2800      	cmp	r0, #0
 8013b24:	db18      	blt.n	8013b58 <Argus_ExecuteXtalkCalibrationSequence+0x5c>
 8013b26:	b175      	cbz	r5, 8013b46 <Argus_ExecuteXtalkCalibrationSequence+0x4a>
 8013b28:	481d      	ldr	r0, [pc, #116]	@ (8013ba0 <Argus_ExecuteXtalkCalibrationSequence+0xa4>)
 8013b2a:	4629      	mov	r1, r5
 8013b2c:	f7ff fa32 	bl	8012f94 <print>
 8013b30:	f06f 06be 	mvn.w	r6, #190	@ 0xbe
 8013b34:	4630      	mov	r0, r6
 8013b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b38:	4630      	mov	r0, r6
 8013b3a:	f00c fe49 	bl	80207d0 <Argus_Dev_RecoverFromError>
 8013b3e:	1e06      	subs	r6, r0, #0
 8013b40:	db14      	blt.n	8013b6c <Argus_ExecuteXtalkCalibrationSequence+0x70>
 8013b42:	f204 77cc 	addw	r7, r4, #1996	@ 0x7cc
 8013b46:	4638      	mov	r0, r7
 8013b48:	f003 fa8c 	bl	8017064 <Argus_Measurement_IsActive>
 8013b4c:	b9d0      	cbnz	r0, 8013b84 <Argus_ExecuteXtalkCalibrationSequence+0x88>
 8013b4e:	4620      	mov	r0, r4
 8013b50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013b54:	f003 b83e 	b.w	8016bd4 <Argus_Core_ExecuteXtalkCalibrationSequence>
 8013b58:	4638      	mov	r0, r7
 8013b5a:	f003 fa5d 	bl	8017018 <Argus_Measurement_Abort>
 8013b5e:	1e06      	subs	r6, r0, #0
 8013b60:	daf1      	bge.n	8013b46 <Argus_ExecuteXtalkCalibrationSequence+0x4a>
 8013b62:	4631      	mov	r1, r6
 8013b64:	480f      	ldr	r0, [pc, #60]	@ (8013ba4 <Argus_ExecuteXtalkCalibrationSequence+0xa8>)
 8013b66:	f7ff fa15 	bl	8012f94 <print>
 8013b6a:	e7e3      	b.n	8013b34 <Argus_ExecuteXtalkCalibrationSequence+0x38>
 8013b6c:	4632      	mov	r2, r6
 8013b6e:	4629      	mov	r1, r5
 8013b70:	480d      	ldr	r0, [pc, #52]	@ (8013ba8 <Argus_ExecuteXtalkCalibrationSequence+0xac>)
 8013b72:	f7ff fa0f 	bl	8012f94 <print>
 8013b76:	e7dd      	b.n	8013b34 <Argus_ExecuteXtalkCalibrationSequence+0x38>
 8013b78:	480c      	ldr	r0, [pc, #48]	@ (8013bac <Argus_ExecuteXtalkCalibrationSequence+0xb0>)
 8013b7a:	f7ff fa0b 	bl	8012f94 <print>
 8013b7e:	f06f 0606 	mvn.w	r6, #6
 8013b82:	e7d7      	b.n	8013b34 <Argus_ExecuteXtalkCalibrationSequence+0x38>
 8013b84:	480a      	ldr	r0, [pc, #40]	@ (8013bb0 <Argus_ExecuteXtalkCalibrationSequence+0xb4>)
 8013b86:	f7ff fa05 	bl	8012f94 <print>
 8013b8a:	f06f 06be 	mvn.w	r6, #190	@ 0xbe
 8013b8e:	e7d1      	b.n	8013b34 <Argus_ExecuteXtalkCalibrationSequence+0x38>
 8013b90:	4808      	ldr	r0, [pc, #32]	@ (8013bb4 <Argus_ExecuteXtalkCalibrationSequence+0xb8>)
 8013b92:	f7ff f9ff 	bl	8012f94 <print>
 8013b96:	f06f 0604 	mvn.w	r6, #4
 8013b9a:	e7cb      	b.n	8013b34 <Argus_ExecuteXtalkCalibrationSequence+0x38>
 8013b9c:	0afb8550 	.word	0x0afb8550
 8013ba0:	0802cb04 	.word	0x0802cb04
 8013ba4:	0802cacc 	.word	0x0802cacc
 8013ba8:	0802ca90 	.word	0x0802ca90
 8013bac:	0802ca68 	.word	0x0802ca68
 8013bb0:	0802cb6c 	.word	0x0802cb6c
 8013bb4:	0802ca40 	.word	0x0802ca40

08013bb8 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence>:
 8013bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bba:	2800      	cmp	r0, #0
 8013bbc:	d048      	beq.n	8013c50 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0x98>
 8013bbe:	4b27      	ldr	r3, [pc, #156]	@ (8013c5c <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0xa4>)
 8013bc0:	6802      	ldr	r2, [r0, #0]
 8013bc2:	429a      	cmp	r2, r3
 8013bc4:	4604      	mov	r4, r0
 8013bc6:	d137      	bne.n	8013c38 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0x80>
 8013bc8:	1d06      	adds	r6, r0, #4
 8013bca:	4630      	mov	r0, r6
 8013bcc:	f00b fdaa 	bl	801f724 <Argus_Dev_GetStatus>
 8013bd0:	1e05      	subs	r5, r0, #0
 8013bd2:	db0f      	blt.n	8013bf4 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0x3c>
 8013bd4:	f204 77cc 	addw	r7, r4, #1996	@ 0x7cc
 8013bd8:	4638      	mov	r0, r7
 8013bda:	f003 faeb 	bl	80171b4 <Argus_Measurement_CheckTimeout>
 8013bde:	2800      	cmp	r0, #0
 8013be0:	db1a      	blt.n	8013c18 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0x60>
 8013be2:	b175      	cbz	r5, 8013c02 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0x4a>
 8013be4:	481e      	ldr	r0, [pc, #120]	@ (8013c60 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0xa8>)
 8013be6:	4629      	mov	r1, r5
 8013be8:	f7ff f9d4 	bl	8012f94 <print>
 8013bec:	f06f 06be 	mvn.w	r6, #190	@ 0xbe
 8013bf0:	4630      	mov	r0, r6
 8013bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013bf4:	4630      	mov	r0, r6
 8013bf6:	f00c fdeb 	bl	80207d0 <Argus_Dev_RecoverFromError>
 8013bfa:	1e06      	subs	r6, r0, #0
 8013bfc:	db16      	blt.n	8013c2c <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0x74>
 8013bfe:	f204 77cc 	addw	r7, r4, #1996	@ 0x7cc
 8013c02:	4638      	mov	r0, r7
 8013c04:	f003 fa2e 	bl	8017064 <Argus_Measurement_IsActive>
 8013c08:	b9e0      	cbnz	r0, 8013c44 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0x8c>
 8013c0a:	4620      	mov	r0, r4
 8013c0c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8013c10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013c14:	f002 bfe8 	b.w	8016be8 <Argus_Core_ExecuteRangeOffsetCalibrationSequence>
 8013c18:	4638      	mov	r0, r7
 8013c1a:	f003 f9fd 	bl	8017018 <Argus_Measurement_Abort>
 8013c1e:	1e06      	subs	r6, r0, #0
 8013c20:	daef      	bge.n	8013c02 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0x4a>
 8013c22:	4631      	mov	r1, r6
 8013c24:	480f      	ldr	r0, [pc, #60]	@ (8013c64 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0xac>)
 8013c26:	f7ff f9b5 	bl	8012f94 <print>
 8013c2a:	e7e1      	b.n	8013bf0 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0x38>
 8013c2c:	4632      	mov	r2, r6
 8013c2e:	4629      	mov	r1, r5
 8013c30:	480d      	ldr	r0, [pc, #52]	@ (8013c68 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0xb0>)
 8013c32:	f7ff f9af 	bl	8012f94 <print>
 8013c36:	e7db      	b.n	8013bf0 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0x38>
 8013c38:	480c      	ldr	r0, [pc, #48]	@ (8013c6c <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0xb4>)
 8013c3a:	f7ff f9ab 	bl	8012f94 <print>
 8013c3e:	f06f 0606 	mvn.w	r6, #6
 8013c42:	e7d5      	b.n	8013bf0 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0x38>
 8013c44:	480a      	ldr	r0, [pc, #40]	@ (8013c70 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0xb8>)
 8013c46:	f7ff f9a5 	bl	8012f94 <print>
 8013c4a:	f06f 06be 	mvn.w	r6, #190	@ 0xbe
 8013c4e:	e7cf      	b.n	8013bf0 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0x38>
 8013c50:	4808      	ldr	r0, [pc, #32]	@ (8013c74 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0xbc>)
 8013c52:	f7ff f99f 	bl	8012f94 <print>
 8013c56:	f06f 0604 	mvn.w	r6, #4
 8013c5a:	e7c9      	b.n	8013bf0 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0x38>
 8013c5c:	0afb8550 	.word	0x0afb8550
 8013c60:	0802cb04 	.word	0x0802cb04
 8013c64:	0802cacc 	.word	0x0802cacc
 8013c68:	0802ca90 	.word	0x0802ca90
 8013c6c:	0802ca68 	.word	0x0802ca68
 8013c70:	0802cb6c 	.word	0x0802cb6c
 8013c74:	0802ca40 	.word	0x0802ca40

08013c78 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence>:
 8013c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c7c:	2800      	cmp	r0, #0
 8013c7e:	d049      	beq.n	8013d14 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0x9c>
 8013c80:	4b27      	ldr	r3, [pc, #156]	@ (8013d20 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0xa8>)
 8013c82:	6802      	ldr	r2, [r0, #0]
 8013c84:	429a      	cmp	r2, r3
 8013c86:	4604      	mov	r4, r0
 8013c88:	d138      	bne.n	8013cfc <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0x84>
 8013c8a:	1d07      	adds	r7, r0, #4
 8013c8c:	4638      	mov	r0, r7
 8013c8e:	460e      	mov	r6, r1
 8013c90:	f00b fd48 	bl	801f724 <Argus_Dev_GetStatus>
 8013c94:	1e05      	subs	r5, r0, #0
 8013c96:	db10      	blt.n	8013cba <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0x42>
 8013c98:	f204 78cc 	addw	r8, r4, #1996	@ 0x7cc
 8013c9c:	4640      	mov	r0, r8
 8013c9e:	f003 fa89 	bl	80171b4 <Argus_Measurement_CheckTimeout>
 8013ca2:	2800      	cmp	r0, #0
 8013ca4:	db1a      	blt.n	8013cdc <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0x64>
 8013ca6:	b17d      	cbz	r5, 8013cc8 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0x50>
 8013ca8:	481e      	ldr	r0, [pc, #120]	@ (8013d24 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0xac>)
 8013caa:	4629      	mov	r1, r5
 8013cac:	f7ff f972 	bl	8012f94 <print>
 8013cb0:	f06f 07be 	mvn.w	r7, #190	@ 0xbe
 8013cb4:	4638      	mov	r0, r7
 8013cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cba:	4638      	mov	r0, r7
 8013cbc:	f00c fd88 	bl	80207d0 <Argus_Dev_RecoverFromError>
 8013cc0:	1e07      	subs	r7, r0, #0
 8013cc2:	db15      	blt.n	8013cf0 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0x78>
 8013cc4:	f204 78cc 	addw	r8, r4, #1996	@ 0x7cc
 8013cc8:	4640      	mov	r0, r8
 8013cca:	f003 f9cb 	bl	8017064 <Argus_Measurement_IsActive>
 8013cce:	b9d8      	cbnz	r0, 8013d08 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0x90>
 8013cd0:	4631      	mov	r1, r6
 8013cd2:	4620      	mov	r0, r4
 8013cd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013cd8:	f002 bf86 	b.w	8016be8 <Argus_Core_ExecuteRangeOffsetCalibrationSequence>
 8013cdc:	4640      	mov	r0, r8
 8013cde:	f003 f99b 	bl	8017018 <Argus_Measurement_Abort>
 8013ce2:	1e07      	subs	r7, r0, #0
 8013ce4:	daf0      	bge.n	8013cc8 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0x50>
 8013ce6:	4639      	mov	r1, r7
 8013ce8:	480f      	ldr	r0, [pc, #60]	@ (8013d28 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0xb0>)
 8013cea:	f7ff f953 	bl	8012f94 <print>
 8013cee:	e7e1      	b.n	8013cb4 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0x3c>
 8013cf0:	463a      	mov	r2, r7
 8013cf2:	4629      	mov	r1, r5
 8013cf4:	480d      	ldr	r0, [pc, #52]	@ (8013d2c <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0xb4>)
 8013cf6:	f7ff f94d 	bl	8012f94 <print>
 8013cfa:	e7db      	b.n	8013cb4 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0x3c>
 8013cfc:	480c      	ldr	r0, [pc, #48]	@ (8013d30 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0xb8>)
 8013cfe:	f7ff f949 	bl	8012f94 <print>
 8013d02:	f06f 0706 	mvn.w	r7, #6
 8013d06:	e7d5      	b.n	8013cb4 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0x3c>
 8013d08:	480a      	ldr	r0, [pc, #40]	@ (8013d34 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0xbc>)
 8013d0a:	f7ff f943 	bl	8012f94 <print>
 8013d0e:	f06f 07be 	mvn.w	r7, #190	@ 0xbe
 8013d12:	e7cf      	b.n	8013cb4 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0x3c>
 8013d14:	4808      	ldr	r0, [pc, #32]	@ (8013d38 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0xc0>)
 8013d16:	f7ff f93d 	bl	8012f94 <print>
 8013d1a:	f06f 0704 	mvn.w	r7, #4
 8013d1e:	e7c9      	b.n	8013cb4 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0x3c>
 8013d20:	0afb8550 	.word	0x0afb8550
 8013d24:	0802cb04 	.word	0x0802cb04
 8013d28:	0802cacc 	.word	0x0802cacc
 8013d2c:	0802ca90 	.word	0x0802ca90
 8013d30:	0802ca68 	.word	0x0802ca68
 8013d34:	0802cb6c 	.word	0x0802cb6c
 8013d38:	0802ca40 	.word	0x0802ca40

08013d3c <Argus_Abort>:
 8013d3c:	b508      	push	{r3, lr}
 8013d3e:	b178      	cbz	r0, 8013d60 <Argus_Abort+0x24>
 8013d40:	4b0a      	ldr	r3, [pc, #40]	@ (8013d6c <Argus_Abort+0x30>)
 8013d42:	6802      	ldr	r2, [r0, #0]
 8013d44:	429a      	cmp	r2, r3
 8013d46:	d105      	bne.n	8013d54 <Argus_Abort+0x18>
 8013d48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013d4c:	f200 70cc 	addw	r0, r0, #1996	@ 0x7cc
 8013d50:	f003 b962 	b.w	8017018 <Argus_Measurement_Abort>
 8013d54:	4806      	ldr	r0, [pc, #24]	@ (8013d70 <Argus_Abort+0x34>)
 8013d56:	f7ff f91d 	bl	8012f94 <print>
 8013d5a:	f06f 0006 	mvn.w	r0, #6
 8013d5e:	bd08      	pop	{r3, pc}
 8013d60:	4804      	ldr	r0, [pc, #16]	@ (8013d74 <Argus_Abort+0x38>)
 8013d62:	f7ff f917 	bl	8012f94 <print>
 8013d66:	f06f 0004 	mvn.w	r0, #4
 8013d6a:	bd08      	pop	{r3, pc}
 8013d6c:	0afb8550 	.word	0x0afb8550
 8013d70:	0802ca68 	.word	0x0802ca68
 8013d74:	0802ca40 	.word	0x0802ca40

08013d78 <Argus_EvaluateDataDebug>:
 8013d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d7c:	b358      	cbz	r0, 8013dd6 <Argus_EvaluateDataDebug+0x5e>
 8013d7e:	4b19      	ldr	r3, [pc, #100]	@ (8013de4 <Argus_EvaluateDataDebug+0x6c>)
 8013d80:	4617      	mov	r7, r2
 8013d82:	6802      	ldr	r2, [r0, #0]
 8013d84:	429a      	cmp	r2, r3
 8013d86:	4604      	mov	r4, r0
 8013d88:	d118      	bne.n	8013dbc <Argus_EvaluateDataDebug+0x44>
 8013d8a:	460e      	mov	r6, r1
 8013d8c:	b1e1      	cbz	r1, 8013dc8 <Argus_EvaluateDataDebug+0x50>
 8013d8e:	f200 78cc 	addw	r8, r0, #1996	@ 0x7cc
 8013d92:	4640      	mov	r0, r8
 8013d94:	f003 fbc2 	bl	801751c <Argus_Measurement_GetRawDataBuffer>
 8013d98:	4605      	mov	r5, r0
 8013d9a:	b1c0      	cbz	r0, 8013dce <Argus_EvaluateDataDebug+0x56>
 8013d9c:	f604 307c 	addw	r0, r4, #2940	@ 0xb7c
 8013da0:	463b      	mov	r3, r7
 8013da2:	4632      	mov	r2, r6
 8013da4:	4629      	mov	r1, r5
 8013da6:	2400      	movs	r4, #0
 8013da8:	f005 f9d4 	bl	8019154 <Argus_Eval_Apply>
 8013dac:	f885 41c5 	strb.w	r4, [r5, #453]	@ 0x1c5
 8013db0:	4640      	mov	r0, r8
 8013db2:	f003 fbdd 	bl	8017570 <Argus_Measurement_Start>
 8013db6:	4620      	mov	r0, r4
 8013db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dbc:	480a      	ldr	r0, [pc, #40]	@ (8013de8 <Argus_EvaluateDataDebug+0x70>)
 8013dbe:	f7ff f8e9 	bl	8012f94 <print>
 8013dc2:	f06f 0006 	mvn.w	r0, #6
 8013dc6:	e7f7      	b.n	8013db8 <Argus_EvaluateDataDebug+0x40>
 8013dc8:	f06f 0004 	mvn.w	r0, #4
 8013dcc:	e7f4      	b.n	8013db8 <Argus_EvaluateDataDebug+0x40>
 8013dce:	f06f 0066 	mvn.w	r0, #102	@ 0x66
 8013dd2:	6030      	str	r0, [r6, #0]
 8013dd4:	e7f0      	b.n	8013db8 <Argus_EvaluateDataDebug+0x40>
 8013dd6:	4805      	ldr	r0, [pc, #20]	@ (8013dec <Argus_EvaluateDataDebug+0x74>)
 8013dd8:	f7ff f8dc 	bl	8012f94 <print>
 8013ddc:	f06f 0004 	mvn.w	r0, #4
 8013de0:	e7ea      	b.n	8013db8 <Argus_EvaluateDataDebug+0x40>
 8013de2:	bf00      	nop
 8013de4:	0afb8550 	.word	0x0afb8550
 8013de8:	0802ca68 	.word	0x0802ca68
 8013dec:	0802ca40 	.word	0x0802ca40

08013df0 <Argus_Ping>:
 8013df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013df2:	2800      	cmp	r0, #0
 8013df4:	d03f      	beq.n	8013e76 <Argus_Ping+0x86>
 8013df6:	4b23      	ldr	r3, [pc, #140]	@ (8013e84 <Argus_Ping+0x94>)
 8013df8:	6802      	ldr	r2, [r0, #0]
 8013dfa:	429a      	cmp	r2, r3
 8013dfc:	4604      	mov	r4, r0
 8013dfe:	d134      	bne.n	8013e6a <Argus_Ping+0x7a>
 8013e00:	1d06      	adds	r6, r0, #4
 8013e02:	4630      	mov	r0, r6
 8013e04:	f00b fc8e 	bl	801f724 <Argus_Dev_GetStatus>
 8013e08:	1e05      	subs	r5, r0, #0
 8013e0a:	db13      	blt.n	8013e34 <Argus_Ping+0x44>
 8013e0c:	f204 77cc 	addw	r7, r4, #1996	@ 0x7cc
 8013e10:	4638      	mov	r0, r7
 8013e12:	f003 f9cf 	bl	80171b4 <Argus_Measurement_CheckTimeout>
 8013e16:	2800      	cmp	r0, #0
 8013e18:	db18      	blt.n	8013e4c <Argus_Ping+0x5c>
 8013e1a:	b12d      	cbz	r5, 8013e28 <Argus_Ping+0x38>
 8013e1c:	4630      	mov	r0, r6
 8013e1e:	2100      	movs	r1, #0
 8013e20:	f00b faf2 	bl	801f408 <Argus_Dev_AwaitStatus>
 8013e24:	1e06      	subs	r6, r0, #0
 8013e26:	db1b      	blt.n	8013e60 <Argus_Ping+0x70>
 8013e28:	f504 70ee 	add.w	r0, r4, #476	@ 0x1dc
 8013e2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013e30:	f00d be58 	b.w	8021ae4 <Argus_Cfg_TestConnection>
 8013e34:	4630      	mov	r0, r6
 8013e36:	f00c fccb 	bl	80207d0 <Argus_Dev_RecoverFromError>
 8013e3a:	1e06      	subs	r6, r0, #0
 8013e3c:	daf4      	bge.n	8013e28 <Argus_Ping+0x38>
 8013e3e:	4812      	ldr	r0, [pc, #72]	@ (8013e88 <Argus_Ping+0x98>)
 8013e40:	4632      	mov	r2, r6
 8013e42:	4629      	mov	r1, r5
 8013e44:	f7ff f8a6 	bl	8012f94 <print>
 8013e48:	4630      	mov	r0, r6
 8013e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e4c:	4638      	mov	r0, r7
 8013e4e:	f003 f8e3 	bl	8017018 <Argus_Measurement_Abort>
 8013e52:	1e06      	subs	r6, r0, #0
 8013e54:	dae8      	bge.n	8013e28 <Argus_Ping+0x38>
 8013e56:	4631      	mov	r1, r6
 8013e58:	480c      	ldr	r0, [pc, #48]	@ (8013e8c <Argus_Ping+0x9c>)
 8013e5a:	f7ff f89b 	bl	8012f94 <print>
 8013e5e:	e7f3      	b.n	8013e48 <Argus_Ping+0x58>
 8013e60:	4631      	mov	r1, r6
 8013e62:	480b      	ldr	r0, [pc, #44]	@ (8013e90 <Argus_Ping+0xa0>)
 8013e64:	f7ff f896 	bl	8012f94 <print>
 8013e68:	e7ee      	b.n	8013e48 <Argus_Ping+0x58>
 8013e6a:	480a      	ldr	r0, [pc, #40]	@ (8013e94 <Argus_Ping+0xa4>)
 8013e6c:	f7ff f892 	bl	8012f94 <print>
 8013e70:	f06f 0606 	mvn.w	r6, #6
 8013e74:	e7e8      	b.n	8013e48 <Argus_Ping+0x58>
 8013e76:	4808      	ldr	r0, [pc, #32]	@ (8013e98 <Argus_Ping+0xa8>)
 8013e78:	f7ff f88c 	bl	8012f94 <print>
 8013e7c:	f06f 0604 	mvn.w	r6, #4
 8013e80:	e7e2      	b.n	8013e48 <Argus_Ping+0x58>
 8013e82:	bf00      	nop
 8013e84:	0afb8550 	.word	0x0afb8550
 8013e88:	0802ca90 	.word	0x0802ca90
 8013e8c:	0802cacc 	.word	0x0802cacc
 8013e90:	0802cb2c 	.word	0x0802cb2c
 8013e94:	0802ca68 	.word	0x0802ca68
 8013e98:	0802ca40 	.word	0x0802ca40

08013e9c <Argus_GetAPIVersion>:
 8013e9c:	4800      	ldr	r0, [pc, #0]	@ (8013ea0 <Argus_GetAPIVersion+0x4>)
 8013e9e:	4770      	bx	lr
 8013ea0:	01050006 	.word	0x01050006

08013ea4 <Argus_GetBuildNumber>:
 8013ea4:	4800      	ldr	r0, [pc, #0]	@ (8013ea8 <Argus_GetBuildNumber+0x4>)
 8013ea6:	4770      	bx	lr
 8013ea8:	0802cf00 	.word	0x0802cf00

08013eac <Argus_GetModuleVersion>:
 8013eac:	b1d0      	cbz	r0, 8013ee4 <Argus_GetModuleVersion+0x38>
 8013eae:	4b0e      	ldr	r3, [pc, #56]	@ (8013ee8 <Argus_GetModuleVersion+0x3c>)
 8013eb0:	6802      	ldr	r2, [r0, #0]
 8013eb2:	429a      	cmp	r2, r3
 8013eb4:	b510      	push	{r4, lr}
 8013eb6:	4604      	mov	r4, r0
 8013eb8:	d001      	beq.n	8013ebe <Argus_GetModuleVersion+0x12>
 8013eba:	2000      	movs	r0, #0
 8013ebc:	bd10      	pop	{r4, pc}
 8013ebe:	f200 70cc 	addw	r0, r0, #1996	@ 0x7cc
 8013ec2:	f003 f977 	bl	80171b4 <Argus_Measurement_CheckTimeout>
 8013ec6:	2800      	cmp	r0, #0
 8013ec8:	db02      	blt.n	8013ed0 <Argus_GetModuleVersion+0x24>
 8013eca:	1d20      	adds	r0, r4, #4
 8013ecc:	f00b fc2a 	bl	801f724 <Argus_Dev_GetStatus>
 8013ed0:	f110 0f65 	cmn.w	r0, #101	@ 0x65
 8013ed4:	d0f1      	beq.n	8013eba <Argus_GetModuleVersion+0xe>
 8013ed6:	3007      	adds	r0, #7
 8013ed8:	d0ef      	beq.n	8013eba <Argus_GetModuleVersion+0xe>
 8013eda:	1d20      	adds	r0, r4, #4
 8013edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ee0:	f00c bb02 	b.w	80204e8 <Argus_Dev_GetModule>
 8013ee4:	2000      	movs	r0, #0
 8013ee6:	4770      	bx	lr
 8013ee8:	0afb8550 	.word	0x0afb8550

08013eec <Argus_GetChipVersion>:
 8013eec:	b1d0      	cbz	r0, 8013f24 <Argus_GetChipVersion+0x38>
 8013eee:	4b0e      	ldr	r3, [pc, #56]	@ (8013f28 <Argus_GetChipVersion+0x3c>)
 8013ef0:	6802      	ldr	r2, [r0, #0]
 8013ef2:	429a      	cmp	r2, r3
 8013ef4:	b510      	push	{r4, lr}
 8013ef6:	4604      	mov	r4, r0
 8013ef8:	d001      	beq.n	8013efe <Argus_GetChipVersion+0x12>
 8013efa:	2000      	movs	r0, #0
 8013efc:	bd10      	pop	{r4, pc}
 8013efe:	f200 70cc 	addw	r0, r0, #1996	@ 0x7cc
 8013f02:	f003 f957 	bl	80171b4 <Argus_Measurement_CheckTimeout>
 8013f06:	2800      	cmp	r0, #0
 8013f08:	db02      	blt.n	8013f10 <Argus_GetChipVersion+0x24>
 8013f0a:	1d20      	adds	r0, r4, #4
 8013f0c:	f00b fc0a 	bl	801f724 <Argus_Dev_GetStatus>
 8013f10:	f110 0f65 	cmn.w	r0, #101	@ 0x65
 8013f14:	d0f1      	beq.n	8013efa <Argus_GetChipVersion+0xe>
 8013f16:	3007      	adds	r0, #7
 8013f18:	d0ef      	beq.n	8013efa <Argus_GetChipVersion+0xe>
 8013f1a:	1d20      	adds	r0, r4, #4
 8013f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f20:	f00c bae6 	b.w	80204f0 <Argus_Dev_GetChipVersion>
 8013f24:	2000      	movs	r0, #0
 8013f26:	4770      	bx	lr
 8013f28:	0afb8550 	.word	0x0afb8550

08013f2c <Argus_GetLaserType>:
 8013f2c:	b1d0      	cbz	r0, 8013f64 <Argus_GetLaserType+0x38>
 8013f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8013f68 <Argus_GetLaserType+0x3c>)
 8013f30:	6802      	ldr	r2, [r0, #0]
 8013f32:	429a      	cmp	r2, r3
 8013f34:	b510      	push	{r4, lr}
 8013f36:	4604      	mov	r4, r0
 8013f38:	d001      	beq.n	8013f3e <Argus_GetLaserType+0x12>
 8013f3a:	2000      	movs	r0, #0
 8013f3c:	bd10      	pop	{r4, pc}
 8013f3e:	f200 70cc 	addw	r0, r0, #1996	@ 0x7cc
 8013f42:	f003 f937 	bl	80171b4 <Argus_Measurement_CheckTimeout>
 8013f46:	2800      	cmp	r0, #0
 8013f48:	db02      	blt.n	8013f50 <Argus_GetLaserType+0x24>
 8013f4a:	1d20      	adds	r0, r4, #4
 8013f4c:	f00b fbea 	bl	801f724 <Argus_Dev_GetStatus>
 8013f50:	f110 0f65 	cmn.w	r0, #101	@ 0x65
 8013f54:	d0f1      	beq.n	8013f3a <Argus_GetLaserType+0xe>
 8013f56:	3007      	adds	r0, #7
 8013f58:	d0ef      	beq.n	8013f3a <Argus_GetLaserType+0xe>
 8013f5a:	1d20      	adds	r0, r4, #4
 8013f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f60:	f00c bac8 	b.w	80204f4 <Argus_Dev_GetLaserType>
 8013f64:	2000      	movs	r0, #0
 8013f66:	4770      	bx	lr
 8013f68:	0afb8550 	.word	0x0afb8550

08013f6c <Argus_GetChipID>:
 8013f6c:	b1d0      	cbz	r0, 8013fa4 <Argus_GetChipID+0x38>
 8013f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8013fa8 <Argus_GetChipID+0x3c>)
 8013f70:	6802      	ldr	r2, [r0, #0]
 8013f72:	429a      	cmp	r2, r3
 8013f74:	b510      	push	{r4, lr}
 8013f76:	4604      	mov	r4, r0
 8013f78:	d001      	beq.n	8013f7e <Argus_GetChipID+0x12>
 8013f7a:	2000      	movs	r0, #0
 8013f7c:	bd10      	pop	{r4, pc}
 8013f7e:	f200 70cc 	addw	r0, r0, #1996	@ 0x7cc
 8013f82:	f003 f917 	bl	80171b4 <Argus_Measurement_CheckTimeout>
 8013f86:	2800      	cmp	r0, #0
 8013f88:	db02      	blt.n	8013f90 <Argus_GetChipID+0x24>
 8013f8a:	1d20      	adds	r0, r4, #4
 8013f8c:	f00b fbca 	bl	801f724 <Argus_Dev_GetStatus>
 8013f90:	f110 0f65 	cmn.w	r0, #101	@ 0x65
 8013f94:	d0f1      	beq.n	8013f7a <Argus_GetChipID+0xe>
 8013f96:	3007      	adds	r0, #7
 8013f98:	d0ef      	beq.n	8013f7a <Argus_GetChipID+0xe>
 8013f9a:	1d20      	adds	r0, r4, #4
 8013f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013fa0:	f00c baa4 	b.w	80204ec <Argus_Dev_GetChipID>
 8013fa4:	2000      	movs	r0, #0
 8013fa6:	4770      	bx	lr
 8013fa8:	0afb8550 	.word	0x0afb8550

08013fac <Argus_GetSPISlave>:
 8013fac:	b120      	cbz	r0, 8013fb8 <Argus_GetSPISlave+0xc>
 8013fae:	4b04      	ldr	r3, [pc, #16]	@ (8013fc0 <Argus_GetSPISlave+0x14>)
 8013fb0:	6802      	ldr	r2, [r0, #0]
 8013fb2:	429a      	cmp	r2, r3
 8013fb4:	d001      	beq.n	8013fba <Argus_GetSPISlave+0xe>
 8013fb6:	2000      	movs	r0, #0
 8013fb8:	4770      	bx	lr
 8013fba:	f8d0 0150 	ldr.w	r0, [r0, #336]	@ 0x150
 8013fbe:	4770      	bx	lr
 8013fc0:	0afb8550 	.word	0x0afb8550

08013fc4 <Argus_SetMeasurementMode>:
 8013fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fc8:	2800      	cmp	r0, #0
 8013fca:	d049      	beq.n	8014060 <Argus_SetMeasurementMode+0x9c>
 8013fcc:	4b27      	ldr	r3, [pc, #156]	@ (801406c <Argus_SetMeasurementMode+0xa8>)
 8013fce:	6802      	ldr	r2, [r0, #0]
 8013fd0:	429a      	cmp	r2, r3
 8013fd2:	4604      	mov	r4, r0
 8013fd4:	d138      	bne.n	8014048 <Argus_SetMeasurementMode+0x84>
 8013fd6:	1d07      	adds	r7, r0, #4
 8013fd8:	4638      	mov	r0, r7
 8013fda:	460e      	mov	r6, r1
 8013fdc:	f00b fba2 	bl	801f724 <Argus_Dev_GetStatus>
 8013fe0:	1e05      	subs	r5, r0, #0
 8013fe2:	db10      	blt.n	8014006 <Argus_SetMeasurementMode+0x42>
 8013fe4:	f204 78cc 	addw	r8, r4, #1996	@ 0x7cc
 8013fe8:	4640      	mov	r0, r8
 8013fea:	f003 f8e3 	bl	80171b4 <Argus_Measurement_CheckTimeout>
 8013fee:	2800      	cmp	r0, #0
 8013ff0:	db1a      	blt.n	8014028 <Argus_SetMeasurementMode+0x64>
 8013ff2:	b17d      	cbz	r5, 8014014 <Argus_SetMeasurementMode+0x50>
 8013ff4:	481e      	ldr	r0, [pc, #120]	@ (8014070 <Argus_SetMeasurementMode+0xac>)
 8013ff6:	4629      	mov	r1, r5
 8013ff8:	f7fe ffcc 	bl	8012f94 <print>
 8013ffc:	f06f 07be 	mvn.w	r7, #190	@ 0xbe
 8014000:	4638      	mov	r0, r7
 8014002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014006:	4638      	mov	r0, r7
 8014008:	f00c fbe2 	bl	80207d0 <Argus_Dev_RecoverFromError>
 801400c:	1e07      	subs	r7, r0, #0
 801400e:	db15      	blt.n	801403c <Argus_SetMeasurementMode+0x78>
 8014010:	f204 78cc 	addw	r8, r4, #1996	@ 0x7cc
 8014014:	4640      	mov	r0, r8
 8014016:	f003 f825 	bl	8017064 <Argus_Measurement_IsActive>
 801401a:	b9d8      	cbnz	r0, 8014054 <Argus_SetMeasurementMode+0x90>
 801401c:	4631      	mov	r1, r6
 801401e:	4620      	mov	r0, r4
 8014020:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014024:	f7ff ba44 	b.w	80134b0 <Argus_SetMeasurementMode.part.0>
 8014028:	4640      	mov	r0, r8
 801402a:	f002 fff5 	bl	8017018 <Argus_Measurement_Abort>
 801402e:	1e07      	subs	r7, r0, #0
 8014030:	daf0      	bge.n	8014014 <Argus_SetMeasurementMode+0x50>
 8014032:	4639      	mov	r1, r7
 8014034:	480f      	ldr	r0, [pc, #60]	@ (8014074 <Argus_SetMeasurementMode+0xb0>)
 8014036:	f7fe ffad 	bl	8012f94 <print>
 801403a:	e7e1      	b.n	8014000 <Argus_SetMeasurementMode+0x3c>
 801403c:	463a      	mov	r2, r7
 801403e:	4629      	mov	r1, r5
 8014040:	480d      	ldr	r0, [pc, #52]	@ (8014078 <Argus_SetMeasurementMode+0xb4>)
 8014042:	f7fe ffa7 	bl	8012f94 <print>
 8014046:	e7db      	b.n	8014000 <Argus_SetMeasurementMode+0x3c>
 8014048:	480c      	ldr	r0, [pc, #48]	@ (801407c <Argus_SetMeasurementMode+0xb8>)
 801404a:	f7fe ffa3 	bl	8012f94 <print>
 801404e:	f06f 0706 	mvn.w	r7, #6
 8014052:	e7d5      	b.n	8014000 <Argus_SetMeasurementMode+0x3c>
 8014054:	480a      	ldr	r0, [pc, #40]	@ (8014080 <Argus_SetMeasurementMode+0xbc>)
 8014056:	f7fe ff9d 	bl	8012f94 <print>
 801405a:	f06f 07be 	mvn.w	r7, #190	@ 0xbe
 801405e:	e7cf      	b.n	8014000 <Argus_SetMeasurementMode+0x3c>
 8014060:	4808      	ldr	r0, [pc, #32]	@ (8014084 <Argus_SetMeasurementMode+0xc0>)
 8014062:	f7fe ff97 	bl	8012f94 <print>
 8014066:	f06f 0704 	mvn.w	r7, #4
 801406a:	e7c9      	b.n	8014000 <Argus_SetMeasurementMode+0x3c>
 801406c:	0afb8550 	.word	0x0afb8550
 8014070:	0802cb04 	.word	0x0802cb04
 8014074:	0802cacc 	.word	0x0802cacc
 8014078:	0802ca90 	.word	0x0802ca90
 801407c:	0802ca68 	.word	0x0802ca68
 8014080:	0802cb6c 	.word	0x0802cb6c
 8014084:	0802ca40 	.word	0x0802ca40

08014088 <Argus_GetMeasurementMode>:
 8014088:	b510      	push	{r4, lr}
 801408a:	b1a8      	cbz	r0, 80140b8 <Argus_GetMeasurementMode+0x30>
 801408c:	4b0d      	ldr	r3, [pc, #52]	@ (80140c4 <Argus_GetMeasurementMode+0x3c>)
 801408e:	6802      	ldr	r2, [r0, #0]
 8014090:	429a      	cmp	r2, r3
 8014092:	d108      	bne.n	80140a6 <Argus_GetMeasurementMode+0x1e>
 8014094:	460c      	mov	r4, r1
 8014096:	b161      	cbz	r1, 80140b2 <Argus_GetMeasurementMode+0x2a>
 8014098:	f500 70ee 	add.w	r0, r0, #476	@ 0x1dc
 801409c:	f00d fd20 	bl	8021ae0 <Argus_Cfg_GetMeasurementMode>
 80140a0:	7020      	strb	r0, [r4, #0]
 80140a2:	2000      	movs	r0, #0
 80140a4:	bd10      	pop	{r4, pc}
 80140a6:	4808      	ldr	r0, [pc, #32]	@ (80140c8 <Argus_GetMeasurementMode+0x40>)
 80140a8:	f7fe ff74 	bl	8012f94 <print>
 80140ac:	f06f 0006 	mvn.w	r0, #6
 80140b0:	bd10      	pop	{r4, pc}
 80140b2:	f06f 0004 	mvn.w	r0, #4
 80140b6:	bd10      	pop	{r4, pc}
 80140b8:	4804      	ldr	r0, [pc, #16]	@ (80140cc <Argus_GetMeasurementMode+0x44>)
 80140ba:	f7fe ff6b 	bl	8012f94 <print>
 80140be:	f06f 0004 	mvn.w	r0, #4
 80140c2:	bd10      	pop	{r4, pc}
 80140c4:	0afb8550 	.word	0x0afb8550
 80140c8:	0802ca68 	.word	0x0802ca68
 80140cc:	0802ca40 	.word	0x0802ca40

080140d0 <Argus_SetConfigurationFrameTime>:
 80140d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80140d2:	b0cb      	sub	sp, #300	@ 0x12c
 80140d4:	b3c0      	cbz	r0, 8014148 <Argus_SetConfigurationFrameTime+0x78>
 80140d6:	4b1f      	ldr	r3, [pc, #124]	@ (8014154 <Argus_SetConfigurationFrameTime+0x84>)
 80140d8:	6802      	ldr	r2, [r0, #0]
 80140da:	429a      	cmp	r2, r3
 80140dc:	4604      	mov	r4, r0
 80140de:	d12d      	bne.n	801413c <Argus_SetConfigurationFrameTime+0x6c>
 80140e0:	460d      	mov	r5, r1
 80140e2:	f500 70ee 	add.w	r0, r0, #476	@ 0x1dc
 80140e6:	4669      	mov	r1, sp
 80140e8:	f00d fcae 	bl	8021a48 <Argus_Cfg_GetConfiguration>
 80140ec:	2201      	movs	r2, #1
 80140ee:	4611      	mov	r1, r2
 80140f0:	4620      	mov	r0, r4
 80140f2:	9501      	str	r5, [sp, #4]
 80140f4:	f7ff f96a 	bl	80133cc <CheckStateAndRecoverError>
 80140f8:	4605      	mov	r5, r0
 80140fa:	b960      	cbnz	r0, 8014116 <Argus_SetConfigurationFrameTime+0x46>
 80140fc:	f504 7042 	add.w	r0, r4, #776	@ 0x308
 8014100:	f00e ff7c 	bl	8022ffc <Argus_Cal_GetCalibrationPtr>
 8014104:	4606      	mov	r6, r0
 8014106:	b1b0      	cbz	r0, 8014136 <Argus_SetConfigurationFrameTime+0x66>
 8014108:	1d27      	adds	r7, r4, #4
 801410a:	21c0      	movs	r1, #192	@ 0xc0
 801410c:	4638      	mov	r0, r7
 801410e:	f00b fa23 	bl	801f558 <Argus_Dev_SetStatusSync>
 8014112:	4605      	mov	r5, r0
 8014114:	b110      	cbz	r0, 801411c <Argus_SetConfigurationFrameTime+0x4c>
 8014116:	4628      	mov	r0, r5
 8014118:	b04b      	add	sp, #300	@ 0x12c
 801411a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801411c:	4669      	mov	r1, sp
 801411e:	4632      	mov	r2, r6
 8014120:	4620      	mov	r0, r4
 8014122:	f000 fff9 	bl	8015118 <Argus_Core_SetSettingsSync>
 8014126:	21c0      	movs	r1, #192	@ 0xc0
 8014128:	4605      	mov	r5, r0
 801412a:	4638      	mov	r0, r7
 801412c:	f00b fae6 	bl	801f6fc <Argus_Dev_ClearStatus>
 8014130:	4628      	mov	r0, r5
 8014132:	b04b      	add	sp, #300	@ 0x12c
 8014134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014136:	f06f 0504 	mvn.w	r5, #4
 801413a:	e7ec      	b.n	8014116 <Argus_SetConfigurationFrameTime+0x46>
 801413c:	4806      	ldr	r0, [pc, #24]	@ (8014158 <Argus_SetConfigurationFrameTime+0x88>)
 801413e:	f7fe ff29 	bl	8012f94 <print>
 8014142:	f06f 0506 	mvn.w	r5, #6
 8014146:	e7e6      	b.n	8014116 <Argus_SetConfigurationFrameTime+0x46>
 8014148:	4804      	ldr	r0, [pc, #16]	@ (801415c <Argus_SetConfigurationFrameTime+0x8c>)
 801414a:	f7fe ff23 	bl	8012f94 <print>
 801414e:	f06f 0504 	mvn.w	r5, #4
 8014152:	e7e0      	b.n	8014116 <Argus_SetConfigurationFrameTime+0x46>
 8014154:	0afb8550 	.word	0x0afb8550
 8014158:	0802ca68 	.word	0x0802ca68
 801415c:	0802ca40 	.word	0x0802ca40

08014160 <Argus_GetConfigurationFrameTime>:
 8014160:	b510      	push	{r4, lr}
 8014162:	b1b8      	cbz	r0, 8014194 <Argus_GetConfigurationFrameTime+0x34>
 8014164:	4b0e      	ldr	r3, [pc, #56]	@ (80141a0 <Argus_GetConfigurationFrameTime+0x40>)
 8014166:	6802      	ldr	r2, [r0, #0]
 8014168:	429a      	cmp	r2, r3
 801416a:	d10a      	bne.n	8014182 <Argus_GetConfigurationFrameTime+0x22>
 801416c:	460c      	mov	r4, r1
 801416e:	b171      	cbz	r1, 801418e <Argus_GetConfigurationFrameTime+0x2e>
 8014170:	f500 70ee 	add.w	r0, r0, #476	@ 0x1dc
 8014174:	f00d fc70 	bl	8021a58 <Argus_Cfg_GetConfigurationPtr>
 8014178:	4603      	mov	r3, r0
 801417a:	2000      	movs	r0, #0
 801417c:	685b      	ldr	r3, [r3, #4]
 801417e:	6023      	str	r3, [r4, #0]
 8014180:	bd10      	pop	{r4, pc}
 8014182:	4808      	ldr	r0, [pc, #32]	@ (80141a4 <Argus_GetConfigurationFrameTime+0x44>)
 8014184:	f7fe ff06 	bl	8012f94 <print>
 8014188:	f06f 0006 	mvn.w	r0, #6
 801418c:	bd10      	pop	{r4, pc}
 801418e:	f06f 0004 	mvn.w	r0, #4
 8014192:	bd10      	pop	{r4, pc}
 8014194:	4804      	ldr	r0, [pc, #16]	@ (80141a8 <Argus_GetConfigurationFrameTime+0x48>)
 8014196:	f7fe fefd 	bl	8012f94 <print>
 801419a:	f06f 0004 	mvn.w	r0, #4
 801419e:	bd10      	pop	{r4, pc}
 80141a0:	0afb8550 	.word	0x0afb8550
 80141a4:	0802ca68 	.word	0x0802ca68
 80141a8:	0802ca40 	.word	0x0802ca40

080141ac <Argus_SetConfigurationDFMMode>:
 80141ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141ae:	b0cb      	sub	sp, #300	@ 0x12c
 80141b0:	b3c8      	cbz	r0, 8014226 <Argus_SetConfigurationDFMMode+0x7a>
 80141b2:	4b20      	ldr	r3, [pc, #128]	@ (8014234 <Argus_SetConfigurationDFMMode+0x88>)
 80141b4:	6802      	ldr	r2, [r0, #0]
 80141b6:	429a      	cmp	r2, r3
 80141b8:	4604      	mov	r4, r0
 80141ba:	d12e      	bne.n	801421a <Argus_SetConfigurationDFMMode+0x6e>
 80141bc:	460d      	mov	r5, r1
 80141be:	f500 70ee 	add.w	r0, r0, #476	@ 0x1dc
 80141c2:	4669      	mov	r1, sp
 80141c4:	f00d fc40 	bl	8021a48 <Argus_Cfg_GetConfiguration>
 80141c8:	2201      	movs	r2, #1
 80141ca:	4611      	mov	r1, r2
 80141cc:	4620      	mov	r0, r4
 80141ce:	f88d 50ac 	strb.w	r5, [sp, #172]	@ 0xac
 80141d2:	f7ff f8fb 	bl	80133cc <CheckStateAndRecoverError>
 80141d6:	4605      	mov	r5, r0
 80141d8:	b960      	cbnz	r0, 80141f4 <Argus_SetConfigurationDFMMode+0x48>
 80141da:	f504 7042 	add.w	r0, r4, #776	@ 0x308
 80141de:	f00e ff0d 	bl	8022ffc <Argus_Cal_GetCalibrationPtr>
 80141e2:	4606      	mov	r6, r0
 80141e4:	b1b0      	cbz	r0, 8014214 <Argus_SetConfigurationDFMMode+0x68>
 80141e6:	1d27      	adds	r7, r4, #4
 80141e8:	21c0      	movs	r1, #192	@ 0xc0
 80141ea:	4638      	mov	r0, r7
 80141ec:	f00b f9b4 	bl	801f558 <Argus_Dev_SetStatusSync>
 80141f0:	4605      	mov	r5, r0
 80141f2:	b110      	cbz	r0, 80141fa <Argus_SetConfigurationDFMMode+0x4e>
 80141f4:	4628      	mov	r0, r5
 80141f6:	b04b      	add	sp, #300	@ 0x12c
 80141f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80141fa:	4669      	mov	r1, sp
 80141fc:	4632      	mov	r2, r6
 80141fe:	4620      	mov	r0, r4
 8014200:	f000 ff8a 	bl	8015118 <Argus_Core_SetSettingsSync>
 8014204:	21c0      	movs	r1, #192	@ 0xc0
 8014206:	4605      	mov	r5, r0
 8014208:	4638      	mov	r0, r7
 801420a:	f00b fa77 	bl	801f6fc <Argus_Dev_ClearStatus>
 801420e:	4628      	mov	r0, r5
 8014210:	b04b      	add	sp, #300	@ 0x12c
 8014212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014214:	f06f 0504 	mvn.w	r5, #4
 8014218:	e7ec      	b.n	80141f4 <Argus_SetConfigurationDFMMode+0x48>
 801421a:	4807      	ldr	r0, [pc, #28]	@ (8014238 <Argus_SetConfigurationDFMMode+0x8c>)
 801421c:	f7fe feba 	bl	8012f94 <print>
 8014220:	f06f 0506 	mvn.w	r5, #6
 8014224:	e7e6      	b.n	80141f4 <Argus_SetConfigurationDFMMode+0x48>
 8014226:	4805      	ldr	r0, [pc, #20]	@ (801423c <Argus_SetConfigurationDFMMode+0x90>)
 8014228:	f7fe feb4 	bl	8012f94 <print>
 801422c:	f06f 0504 	mvn.w	r5, #4
 8014230:	e7e0      	b.n	80141f4 <Argus_SetConfigurationDFMMode+0x48>
 8014232:	bf00      	nop
 8014234:	0afb8550 	.word	0x0afb8550
 8014238:	0802ca68 	.word	0x0802ca68
 801423c:	0802ca40 	.word	0x0802ca40

08014240 <Argus_GetConfigurationDFMMode>:
 8014240:	b510      	push	{r4, lr}
 8014242:	b1c0      	cbz	r0, 8014276 <Argus_GetConfigurationDFMMode+0x36>
 8014244:	4b0f      	ldr	r3, [pc, #60]	@ (8014284 <Argus_GetConfigurationDFMMode+0x44>)
 8014246:	6802      	ldr	r2, [r0, #0]
 8014248:	429a      	cmp	r2, r3
 801424a:	d10b      	bne.n	8014264 <Argus_GetConfigurationDFMMode+0x24>
 801424c:	460c      	mov	r4, r1
 801424e:	b179      	cbz	r1, 8014270 <Argus_GetConfigurationDFMMode+0x30>
 8014250:	f500 70ee 	add.w	r0, r0, #476	@ 0x1dc
 8014254:	f00d fc00 	bl	8021a58 <Argus_Cfg_GetConfigurationPtr>
 8014258:	4603      	mov	r3, r0
 801425a:	2000      	movs	r0, #0
 801425c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8014260:	7023      	strb	r3, [r4, #0]
 8014262:	bd10      	pop	{r4, pc}
 8014264:	4808      	ldr	r0, [pc, #32]	@ (8014288 <Argus_GetConfigurationDFMMode+0x48>)
 8014266:	f7fe fe95 	bl	8012f94 <print>
 801426a:	f06f 0006 	mvn.w	r0, #6
 801426e:	bd10      	pop	{r4, pc}
 8014270:	f06f 0004 	mvn.w	r0, #4
 8014274:	bd10      	pop	{r4, pc}
 8014276:	4805      	ldr	r0, [pc, #20]	@ (801428c <Argus_GetConfigurationDFMMode+0x4c>)
 8014278:	f7fe fe8c 	bl	8012f94 <print>
 801427c:	f06f 0004 	mvn.w	r0, #4
 8014280:	bd10      	pop	{r4, pc}
 8014282:	bf00      	nop
 8014284:	0afb8550 	.word	0x0afb8550
 8014288:	0802ca68 	.word	0x0802ca68
 801428c:	0802ca40 	.word	0x0802ca40

08014290 <Argus_SetConfigurationShotNoiseMonitorMode>:
 8014290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014292:	b0cb      	sub	sp, #300	@ 0x12c
 8014294:	b3c8      	cbz	r0, 801430a <Argus_SetConfigurationShotNoiseMonitorMode+0x7a>
 8014296:	4b20      	ldr	r3, [pc, #128]	@ (8014318 <Argus_SetConfigurationShotNoiseMonitorMode+0x88>)
 8014298:	6802      	ldr	r2, [r0, #0]
 801429a:	429a      	cmp	r2, r3
 801429c:	4604      	mov	r4, r0
 801429e:	d12e      	bne.n	80142fe <Argus_SetConfigurationShotNoiseMonitorMode+0x6e>
 80142a0:	460d      	mov	r5, r1
 80142a2:	f500 70ee 	add.w	r0, r0, #476	@ 0x1dc
 80142a6:	4669      	mov	r1, sp
 80142a8:	f00d fbce 	bl	8021a48 <Argus_Cfg_GetConfiguration>
 80142ac:	2201      	movs	r2, #1
 80142ae:	4611      	mov	r1, r2
 80142b0:	4620      	mov	r0, r4
 80142b2:	f88d 50d8 	strb.w	r5, [sp, #216]	@ 0xd8
 80142b6:	f7ff f889 	bl	80133cc <CheckStateAndRecoverError>
 80142ba:	4605      	mov	r5, r0
 80142bc:	b960      	cbnz	r0, 80142d8 <Argus_SetConfigurationShotNoiseMonitorMode+0x48>
 80142be:	f504 7042 	add.w	r0, r4, #776	@ 0x308
 80142c2:	f00e fe9b 	bl	8022ffc <Argus_Cal_GetCalibrationPtr>
 80142c6:	4606      	mov	r6, r0
 80142c8:	b1b0      	cbz	r0, 80142f8 <Argus_SetConfigurationShotNoiseMonitorMode+0x68>
 80142ca:	1d27      	adds	r7, r4, #4
 80142cc:	21c0      	movs	r1, #192	@ 0xc0
 80142ce:	4638      	mov	r0, r7
 80142d0:	f00b f942 	bl	801f558 <Argus_Dev_SetStatusSync>
 80142d4:	4605      	mov	r5, r0
 80142d6:	b110      	cbz	r0, 80142de <Argus_SetConfigurationShotNoiseMonitorMode+0x4e>
 80142d8:	4628      	mov	r0, r5
 80142da:	b04b      	add	sp, #300	@ 0x12c
 80142dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142de:	4669      	mov	r1, sp
 80142e0:	4632      	mov	r2, r6
 80142e2:	4620      	mov	r0, r4
 80142e4:	f000 ff18 	bl	8015118 <Argus_Core_SetSettingsSync>
 80142e8:	21c0      	movs	r1, #192	@ 0xc0
 80142ea:	4605      	mov	r5, r0
 80142ec:	4638      	mov	r0, r7
 80142ee:	f00b fa05 	bl	801f6fc <Argus_Dev_ClearStatus>
 80142f2:	4628      	mov	r0, r5
 80142f4:	b04b      	add	sp, #300	@ 0x12c
 80142f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142f8:	f06f 0504 	mvn.w	r5, #4
 80142fc:	e7ec      	b.n	80142d8 <Argus_SetConfigurationShotNoiseMonitorMode+0x48>
 80142fe:	4807      	ldr	r0, [pc, #28]	@ (801431c <Argus_SetConfigurationShotNoiseMonitorMode+0x8c>)
 8014300:	f7fe fe48 	bl	8012f94 <print>
 8014304:	f06f 0506 	mvn.w	r5, #6
 8014308:	e7e6      	b.n	80142d8 <Argus_SetConfigurationShotNoiseMonitorMode+0x48>
 801430a:	4805      	ldr	r0, [pc, #20]	@ (8014320 <Argus_SetConfigurationShotNoiseMonitorMode+0x90>)
 801430c:	f7fe fe42 	bl	8012f94 <print>
 8014310:	f06f 0504 	mvn.w	r5, #4
 8014314:	e7e0      	b.n	80142d8 <Argus_SetConfigurationShotNoiseMonitorMode+0x48>
 8014316:	bf00      	nop
 8014318:	0afb8550 	.word	0x0afb8550
 801431c:	0802ca68 	.word	0x0802ca68
 8014320:	0802ca40 	.word	0x0802ca40

08014324 <Argus_GetConfigurationShotNoiseMonitorMode>:
 8014324:	b510      	push	{r4, lr}
 8014326:	b1c0      	cbz	r0, 801435a <Argus_GetConfigurationShotNoiseMonitorMode+0x36>
 8014328:	4b0f      	ldr	r3, [pc, #60]	@ (8014368 <Argus_GetConfigurationShotNoiseMonitorMode+0x44>)
 801432a:	6802      	ldr	r2, [r0, #0]
 801432c:	429a      	cmp	r2, r3
 801432e:	d10b      	bne.n	8014348 <Argus_GetConfigurationShotNoiseMonitorMode+0x24>
 8014330:	460c      	mov	r4, r1
 8014332:	b179      	cbz	r1, 8014354 <Argus_GetConfigurationShotNoiseMonitorMode+0x30>
 8014334:	f500 70ee 	add.w	r0, r0, #476	@ 0x1dc
 8014338:	f00d fb8e 	bl	8021a58 <Argus_Cfg_GetConfigurationPtr>
 801433c:	4603      	mov	r3, r0
 801433e:	2000      	movs	r0, #0
 8014340:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 8014344:	7023      	strb	r3, [r4, #0]
 8014346:	bd10      	pop	{r4, pc}
 8014348:	4808      	ldr	r0, [pc, #32]	@ (801436c <Argus_GetConfigurationShotNoiseMonitorMode+0x48>)
 801434a:	f7fe fe23 	bl	8012f94 <print>
 801434e:	f06f 0006 	mvn.w	r0, #6
 8014352:	bd10      	pop	{r4, pc}
 8014354:	f06f 0004 	mvn.w	r0, #4
 8014358:	bd10      	pop	{r4, pc}
 801435a:	4805      	ldr	r0, [pc, #20]	@ (8014370 <Argus_GetConfigurationShotNoiseMonitorMode+0x4c>)
 801435c:	f7fe fe1a 	bl	8012f94 <print>
 8014360:	f06f 0004 	mvn.w	r0, #4
 8014364:	bd10      	pop	{r4, pc}
 8014366:	bf00      	nop
 8014368:	0afb8550 	.word	0x0afb8550
 801436c:	0802ca68 	.word	0x0802ca68
 8014370:	0802ca40 	.word	0x0802ca40

08014374 <Argus_SetConfigurationCrosstalkMonitorMode>:
 8014374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014376:	b0cb      	sub	sp, #300	@ 0x12c
 8014378:	b3c8      	cbz	r0, 80143ee <Argus_SetConfigurationCrosstalkMonitorMode+0x7a>
 801437a:	4b20      	ldr	r3, [pc, #128]	@ (80143fc <Argus_SetConfigurationCrosstalkMonitorMode+0x88>)
 801437c:	6802      	ldr	r2, [r0, #0]
 801437e:	429a      	cmp	r2, r3
 8014380:	4604      	mov	r4, r0
 8014382:	d12e      	bne.n	80143e2 <Argus_SetConfigurationCrosstalkMonitorMode+0x6e>
 8014384:	460d      	mov	r5, r1
 8014386:	f500 70ee 	add.w	r0, r0, #476	@ 0x1dc
 801438a:	4669      	mov	r1, sp
 801438c:	f00d fb5c 	bl	8021a48 <Argus_Cfg_GetConfiguration>
 8014390:	2201      	movs	r2, #1
 8014392:	4611      	mov	r1, r2
 8014394:	4620      	mov	r0, r4
 8014396:	f88d 50e4 	strb.w	r5, [sp, #228]	@ 0xe4
 801439a:	f7ff f817 	bl	80133cc <CheckStateAndRecoverError>
 801439e:	4605      	mov	r5, r0
 80143a0:	b960      	cbnz	r0, 80143bc <Argus_SetConfigurationCrosstalkMonitorMode+0x48>
 80143a2:	f504 7042 	add.w	r0, r4, #776	@ 0x308
 80143a6:	f00e fe29 	bl	8022ffc <Argus_Cal_GetCalibrationPtr>
 80143aa:	4606      	mov	r6, r0
 80143ac:	b1b0      	cbz	r0, 80143dc <Argus_SetConfigurationCrosstalkMonitorMode+0x68>
 80143ae:	1d27      	adds	r7, r4, #4
 80143b0:	21c0      	movs	r1, #192	@ 0xc0
 80143b2:	4638      	mov	r0, r7
 80143b4:	f00b f8d0 	bl	801f558 <Argus_Dev_SetStatusSync>
 80143b8:	4605      	mov	r5, r0
 80143ba:	b110      	cbz	r0, 80143c2 <Argus_SetConfigurationCrosstalkMonitorMode+0x4e>
 80143bc:	4628      	mov	r0, r5
 80143be:	b04b      	add	sp, #300	@ 0x12c
 80143c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143c2:	4669      	mov	r1, sp
 80143c4:	4632      	mov	r2, r6
 80143c6:	4620      	mov	r0, r4
 80143c8:	f000 fea6 	bl	8015118 <Argus_Core_SetSettingsSync>
 80143cc:	21c0      	movs	r1, #192	@ 0xc0
 80143ce:	4605      	mov	r5, r0
 80143d0:	4638      	mov	r0, r7
 80143d2:	f00b f993 	bl	801f6fc <Argus_Dev_ClearStatus>
 80143d6:	4628      	mov	r0, r5
 80143d8:	b04b      	add	sp, #300	@ 0x12c
 80143da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143dc:	f06f 0504 	mvn.w	r5, #4
 80143e0:	e7ec      	b.n	80143bc <Argus_SetConfigurationCrosstalkMonitorMode+0x48>
 80143e2:	4807      	ldr	r0, [pc, #28]	@ (8014400 <Argus_SetConfigurationCrosstalkMonitorMode+0x8c>)
 80143e4:	f7fe fdd6 	bl	8012f94 <print>
 80143e8:	f06f 0506 	mvn.w	r5, #6
 80143ec:	e7e6      	b.n	80143bc <Argus_SetConfigurationCrosstalkMonitorMode+0x48>
 80143ee:	4805      	ldr	r0, [pc, #20]	@ (8014404 <Argus_SetConfigurationCrosstalkMonitorMode+0x90>)
 80143f0:	f7fe fdd0 	bl	8012f94 <print>
 80143f4:	f06f 0504 	mvn.w	r5, #4
 80143f8:	e7e0      	b.n	80143bc <Argus_SetConfigurationCrosstalkMonitorMode+0x48>
 80143fa:	bf00      	nop
 80143fc:	0afb8550 	.word	0x0afb8550
 8014400:	0802ca68 	.word	0x0802ca68
 8014404:	0802ca40 	.word	0x0802ca40

08014408 <Argus_GetConfigurationCrosstalkMonitorMode>:
 8014408:	b510      	push	{r4, lr}
 801440a:	b1c0      	cbz	r0, 801443e <Argus_GetConfigurationCrosstalkMonitorMode+0x36>
 801440c:	4b0f      	ldr	r3, [pc, #60]	@ (801444c <Argus_GetConfigurationCrosstalkMonitorMode+0x44>)
 801440e:	6802      	ldr	r2, [r0, #0]
 8014410:	429a      	cmp	r2, r3
 8014412:	d10b      	bne.n	801442c <Argus_GetConfigurationCrosstalkMonitorMode+0x24>
 8014414:	460c      	mov	r4, r1
 8014416:	b179      	cbz	r1, 8014438 <Argus_GetConfigurationCrosstalkMonitorMode+0x30>
 8014418:	f500 70ee 	add.w	r0, r0, #476	@ 0x1dc
 801441c:	f00d fb1c 	bl	8021a58 <Argus_Cfg_GetConfigurationPtr>
 8014420:	4603      	mov	r3, r0
 8014422:	2000      	movs	r0, #0
 8014424:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8014428:	7023      	strb	r3, [r4, #0]
 801442a:	bd10      	pop	{r4, pc}
 801442c:	4808      	ldr	r0, [pc, #32]	@ (8014450 <Argus_GetConfigurationCrosstalkMonitorMode+0x48>)
 801442e:	f7fe fdb1 	bl	8012f94 <print>
 8014432:	f06f 0006 	mvn.w	r0, #6
 8014436:	bd10      	pop	{r4, pc}
 8014438:	f06f 0004 	mvn.w	r0, #4
 801443c:	bd10      	pop	{r4, pc}
 801443e:	4805      	ldr	r0, [pc, #20]	@ (8014454 <Argus_GetConfigurationCrosstalkMonitorMode+0x4c>)
 8014440:	f7fe fda8 	bl	8012f94 <print>
 8014444:	f06f 0004 	mvn.w	r0, #4
 8014448:	bd10      	pop	{r4, pc}
 801444a:	bf00      	nop
 801444c:	0afb8550 	.word	0x0afb8550
 8014450:	0802ca68 	.word	0x0802ca68
 8014454:	0802ca40 	.word	0x0802ca40

08014458 <Argus_SetConfigurationSmartPowerSaveEnabled>:
 8014458:	b5f0      	push	{r4, r5, r6, r7, lr}
 801445a:	b0cb      	sub	sp, #300	@ 0x12c
 801445c:	b3c8      	cbz	r0, 80144d2 <Argus_SetConfigurationSmartPowerSaveEnabled+0x7a>
 801445e:	4b20      	ldr	r3, [pc, #128]	@ (80144e0 <Argus_SetConfigurationSmartPowerSaveEnabled+0x88>)
 8014460:	6802      	ldr	r2, [r0, #0]
 8014462:	429a      	cmp	r2, r3
 8014464:	4604      	mov	r4, r0
 8014466:	d12e      	bne.n	80144c6 <Argus_SetConfigurationSmartPowerSaveEnabled+0x6e>
 8014468:	460d      	mov	r5, r1
 801446a:	f500 70ee 	add.w	r0, r0, #476	@ 0x1dc
 801446e:	4669      	mov	r1, sp
 8014470:	f00d faea 	bl	8021a48 <Argus_Cfg_GetConfiguration>
 8014474:	2201      	movs	r2, #1
 8014476:	4611      	mov	r1, r2
 8014478:	4620      	mov	r0, r4
 801447a:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 801447e:	f7fe ffa5 	bl	80133cc <CheckStateAndRecoverError>
 8014482:	4605      	mov	r5, r0
 8014484:	b960      	cbnz	r0, 80144a0 <Argus_SetConfigurationSmartPowerSaveEnabled+0x48>
 8014486:	f504 7042 	add.w	r0, r4, #776	@ 0x308
 801448a:	f00e fdb7 	bl	8022ffc <Argus_Cal_GetCalibrationPtr>
 801448e:	4606      	mov	r6, r0
 8014490:	b1b0      	cbz	r0, 80144c0 <Argus_SetConfigurationSmartPowerSaveEnabled+0x68>
 8014492:	1d27      	adds	r7, r4, #4
 8014494:	21c0      	movs	r1, #192	@ 0xc0
 8014496:	4638      	mov	r0, r7
 8014498:	f00b f85e 	bl	801f558 <Argus_Dev_SetStatusSync>
 801449c:	4605      	mov	r5, r0
 801449e:	b110      	cbz	r0, 80144a6 <Argus_SetConfigurationSmartPowerSaveEnabled+0x4e>
 80144a0:	4628      	mov	r0, r5
 80144a2:	b04b      	add	sp, #300	@ 0x12c
 80144a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144a6:	4669      	mov	r1, sp
 80144a8:	4632      	mov	r2, r6
 80144aa:	4620      	mov	r0, r4
 80144ac:	f000 fe34 	bl	8015118 <Argus_Core_SetSettingsSync>
 80144b0:	21c0      	movs	r1, #192	@ 0xc0
 80144b2:	4605      	mov	r5, r0
 80144b4:	4638      	mov	r0, r7
 80144b6:	f00b f921 	bl	801f6fc <Argus_Dev_ClearStatus>
 80144ba:	4628      	mov	r0, r5
 80144bc:	b04b      	add	sp, #300	@ 0x12c
 80144be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144c0:	f06f 0504 	mvn.w	r5, #4
 80144c4:	e7ec      	b.n	80144a0 <Argus_SetConfigurationSmartPowerSaveEnabled+0x48>
 80144c6:	4807      	ldr	r0, [pc, #28]	@ (80144e4 <Argus_SetConfigurationSmartPowerSaveEnabled+0x8c>)
 80144c8:	f7fe fd64 	bl	8012f94 <print>
 80144cc:	f06f 0506 	mvn.w	r5, #6
 80144d0:	e7e6      	b.n	80144a0 <Argus_SetConfigurationSmartPowerSaveEnabled+0x48>
 80144d2:	4805      	ldr	r0, [pc, #20]	@ (80144e8 <Argus_SetConfigurationSmartPowerSaveEnabled+0x90>)
 80144d4:	f7fe fd5e 	bl	8012f94 <print>
 80144d8:	f06f 0504 	mvn.w	r5, #4
 80144dc:	e7e0      	b.n	80144a0 <Argus_SetConfigurationSmartPowerSaveEnabled+0x48>
 80144de:	bf00      	nop
 80144e0:	0afb8550 	.word	0x0afb8550
 80144e4:	0802ca68 	.word	0x0802ca68
 80144e8:	0802ca40 	.word	0x0802ca40

080144ec <Argus_GetConfigurationSmartPowerSaveEnabled>:
 80144ec:	b510      	push	{r4, lr}
 80144ee:	b1d8      	cbz	r0, 8014528 <Argus_GetConfigurationSmartPowerSaveEnabled+0x3c>
 80144f0:	4b10      	ldr	r3, [pc, #64]	@ (8014534 <Argus_GetConfigurationSmartPowerSaveEnabled+0x48>)
 80144f2:	6802      	ldr	r2, [r0, #0]
 80144f4:	429a      	cmp	r2, r3
 80144f6:	d10e      	bne.n	8014516 <Argus_GetConfigurationSmartPowerSaveEnabled+0x2a>
 80144f8:	460c      	mov	r4, r1
 80144fa:	b191      	cbz	r1, 8014522 <Argus_GetConfigurationSmartPowerSaveEnabled+0x36>
 80144fc:	f500 70ee 	add.w	r0, r0, #476	@ 0x1dc
 8014500:	f00d faaa 	bl	8021a58 <Argus_Cfg_GetConfigurationPtr>
 8014504:	4603      	mov	r3, r0
 8014506:	2000      	movs	r0, #0
 8014508:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 801450c:	1a1b      	subs	r3, r3, r0
 801450e:	bf18      	it	ne
 8014510:	2301      	movne	r3, #1
 8014512:	7023      	strb	r3, [r4, #0]
 8014514:	bd10      	pop	{r4, pc}
 8014516:	4808      	ldr	r0, [pc, #32]	@ (8014538 <Argus_GetConfigurationSmartPowerSaveEnabled+0x4c>)
 8014518:	f7fe fd3c 	bl	8012f94 <print>
 801451c:	f06f 0006 	mvn.w	r0, #6
 8014520:	bd10      	pop	{r4, pc}
 8014522:	f06f 0004 	mvn.w	r0, #4
 8014526:	bd10      	pop	{r4, pc}
 8014528:	4804      	ldr	r0, [pc, #16]	@ (801453c <Argus_GetConfigurationSmartPowerSaveEnabled+0x50>)
 801452a:	f7fe fd33 	bl	8012f94 <print>
 801452e:	f06f 0004 	mvn.w	r0, #4
 8014532:	bd10      	pop	{r4, pc}
 8014534:	0afb8550 	.word	0x0afb8550
 8014538:	0802ca68 	.word	0x0802ca68
 801453c:	0802ca40 	.word	0x0802ca40

08014540 <Argus_SetConfigurationDynamicAdaption>:
 8014540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014542:	f991 3000 	ldrsb.w	r3, [r1]
 8014546:	b0cb      	sub	sp, #300	@ 0x12c
 8014548:	2b00      	cmp	r3, #0
 801454a:	d041      	beq.n	80145d0 <Argus_SetConfigurationDynamicAdaption+0x90>
 801454c:	4605      	mov	r5, r0
 801454e:	2800      	cmp	r0, #0
 8014550:	d047      	beq.n	80145e2 <Argus_SetConfigurationDynamicAdaption+0xa2>
 8014552:	4b27      	ldr	r3, [pc, #156]	@ (80145f0 <Argus_SetConfigurationDynamicAdaption+0xb0>)
 8014554:	6802      	ldr	r2, [r0, #0]
 8014556:	429a      	cmp	r2, r3
 8014558:	d13d      	bne.n	80145d6 <Argus_SetConfigurationDynamicAdaption+0x96>
 801455a:	460c      	mov	r4, r1
 801455c:	f500 70ee 	add.w	r0, r0, #476	@ 0x1dc
 8014560:	4669      	mov	r1, sp
 8014562:	f00d fa71 	bl	8021a48 <Argus_Cfg_GetConfiguration>
 8014566:	6820      	ldr	r0, [r4, #0]
 8014568:	6861      	ldr	r1, [r4, #4]
 801456a:	68a2      	ldr	r2, [r4, #8]
 801456c:	68e3      	ldr	r3, [r4, #12]
 801456e:	f10d 0cf4 	add.w	ip, sp, #244	@ 0xf4
 8014572:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014576:	6920      	ldr	r0, [r4, #16]
 8014578:	8aa3      	ldrh	r3, [r4, #20]
 801457a:	f8cc 0000 	str.w	r0, [ip]
 801457e:	2201      	movs	r2, #1
 8014580:	f8ac 3004 	strh.w	r3, [ip, #4]
 8014584:	4611      	mov	r1, r2
 8014586:	4628      	mov	r0, r5
 8014588:	f7fe ff20 	bl	80133cc <CheckStateAndRecoverError>
 801458c:	4604      	mov	r4, r0
 801458e:	b960      	cbnz	r0, 80145aa <Argus_SetConfigurationDynamicAdaption+0x6a>
 8014590:	f505 7042 	add.w	r0, r5, #776	@ 0x308
 8014594:	f00e fd32 	bl	8022ffc <Argus_Cal_GetCalibrationPtr>
 8014598:	4606      	mov	r6, r0
 801459a:	b1b0      	cbz	r0, 80145ca <Argus_SetConfigurationDynamicAdaption+0x8a>
 801459c:	1d2f      	adds	r7, r5, #4
 801459e:	21c0      	movs	r1, #192	@ 0xc0
 80145a0:	4638      	mov	r0, r7
 80145a2:	f00a ffd9 	bl	801f558 <Argus_Dev_SetStatusSync>
 80145a6:	4604      	mov	r4, r0
 80145a8:	b110      	cbz	r0, 80145b0 <Argus_SetConfigurationDynamicAdaption+0x70>
 80145aa:	4620      	mov	r0, r4
 80145ac:	b04b      	add	sp, #300	@ 0x12c
 80145ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145b0:	4669      	mov	r1, sp
 80145b2:	4632      	mov	r2, r6
 80145b4:	4628      	mov	r0, r5
 80145b6:	f000 fdaf 	bl	8015118 <Argus_Core_SetSettingsSync>
 80145ba:	21c0      	movs	r1, #192	@ 0xc0
 80145bc:	4604      	mov	r4, r0
 80145be:	4638      	mov	r0, r7
 80145c0:	f00b f89c 	bl	801f6fc <Argus_Dev_ClearStatus>
 80145c4:	4620      	mov	r0, r4
 80145c6:	b04b      	add	sp, #300	@ 0x12c
 80145c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145ca:	f06f 0404 	mvn.w	r4, #4
 80145ce:	e7ec      	b.n	80145aa <Argus_SetConfigurationDynamicAdaption+0x6a>
 80145d0:	f06f 0465 	mvn.w	r4, #101	@ 0x65
 80145d4:	e7e9      	b.n	80145aa <Argus_SetConfigurationDynamicAdaption+0x6a>
 80145d6:	4807      	ldr	r0, [pc, #28]	@ (80145f4 <Argus_SetConfigurationDynamicAdaption+0xb4>)
 80145d8:	f7fe fcdc 	bl	8012f94 <print>
 80145dc:	f06f 0406 	mvn.w	r4, #6
 80145e0:	e7e3      	b.n	80145aa <Argus_SetConfigurationDynamicAdaption+0x6a>
 80145e2:	4805      	ldr	r0, [pc, #20]	@ (80145f8 <Argus_SetConfigurationDynamicAdaption+0xb8>)
 80145e4:	f7fe fcd6 	bl	8012f94 <print>
 80145e8:	f06f 0404 	mvn.w	r4, #4
 80145ec:	e7dd      	b.n	80145aa <Argus_SetConfigurationDynamicAdaption+0x6a>
 80145ee:	bf00      	nop
 80145f0:	0afb8550 	.word	0x0afb8550
 80145f4:	0802ca68 	.word	0x0802ca68
 80145f8:	0802ca40 	.word	0x0802ca40

080145fc <Argus_GetConfigurationDynamicAdaption>:
 80145fc:	b510      	push	{r4, lr}
 80145fe:	b338      	cbz	r0, 8014650 <Argus_GetConfigurationDynamicAdaption+0x54>
 8014600:	4b16      	ldr	r3, [pc, #88]	@ (801465c <Argus_GetConfigurationDynamicAdaption+0x60>)
 8014602:	6802      	ldr	r2, [r0, #0]
 8014604:	429a      	cmp	r2, r3
 8014606:	d11a      	bne.n	801463e <Argus_GetConfigurationDynamicAdaption+0x42>
 8014608:	460c      	mov	r4, r1
 801460a:	b1f1      	cbz	r1, 801464a <Argus_GetConfigurationDynamicAdaption+0x4e>
 801460c:	f500 70ee 	add.w	r0, r0, #476	@ 0x1dc
 8014610:	f00d fa22 	bl	8021a58 <Argus_Cfg_GetConfigurationPtr>
 8014614:	f8d0 30f4 	ldr.w	r3, [r0, #244]	@ 0xf4
 8014618:	f8d0 10f8 	ldr.w	r1, [r0, #248]	@ 0xf8
 801461c:	f8d0 20fc 	ldr.w	r2, [r0, #252]	@ 0xfc
 8014620:	f8d0 c100 	ldr.w	ip, [r0, #256]	@ 0x100
 8014624:	f8c4 c00c 	str.w	ip, [r4, #12]
 8014628:	6023      	str	r3, [r4, #0]
 801462a:	6061      	str	r1, [r4, #4]
 801462c:	60a2      	str	r2, [r4, #8]
 801462e:	f8d0 3104 	ldr.w	r3, [r0, #260]	@ 0x104
 8014632:	6123      	str	r3, [r4, #16]
 8014634:	f8b0 3108 	ldrh.w	r3, [r0, #264]	@ 0x108
 8014638:	82a3      	strh	r3, [r4, #20]
 801463a:	2000      	movs	r0, #0
 801463c:	bd10      	pop	{r4, pc}
 801463e:	4808      	ldr	r0, [pc, #32]	@ (8014660 <Argus_GetConfigurationDynamicAdaption+0x64>)
 8014640:	f7fe fca8 	bl	8012f94 <print>
 8014644:	f06f 0006 	mvn.w	r0, #6
 8014648:	bd10      	pop	{r4, pc}
 801464a:	f06f 0004 	mvn.w	r0, #4
 801464e:	bd10      	pop	{r4, pc}
 8014650:	4804      	ldr	r0, [pc, #16]	@ (8014664 <Argus_GetConfigurationDynamicAdaption+0x68>)
 8014652:	f7fe fc9f 	bl	8012f94 <print>
 8014656:	f06f 0004 	mvn.w	r0, #4
 801465a:	bd10      	pop	{r4, pc}
 801465c:	0afb8550 	.word	0x0afb8550
 8014660:	0802ca68 	.word	0x0802ca68
 8014664:	0802ca40 	.word	0x0802ca40

08014668 <Argus_SetConfigurationPixelBinning>:
 8014668:	b5f0      	push	{r4, r5, r6, r7, lr}
 801466a:	b0cb      	sub	sp, #300	@ 0x12c
 801466c:	2800      	cmp	r0, #0
 801466e:	d044      	beq.n	80146fa <Argus_SetConfigurationPixelBinning+0x92>
 8014670:	4b25      	ldr	r3, [pc, #148]	@ (8014708 <Argus_SetConfigurationPixelBinning+0xa0>)
 8014672:	6802      	ldr	r2, [r0, #0]
 8014674:	429a      	cmp	r2, r3
 8014676:	4605      	mov	r5, r0
 8014678:	d139      	bne.n	80146ee <Argus_SetConfigurationPixelBinning+0x86>
 801467a:	460c      	mov	r4, r1
 801467c:	f500 70ee 	add.w	r0, r0, #476	@ 0x1dc
 8014680:	4669      	mov	r1, sp
 8014682:	f00d f9e1 	bl	8021a48 <Argus_Cfg_GetConfiguration>
 8014686:	6820      	ldr	r0, [r4, #0]
 8014688:	6861      	ldr	r1, [r4, #4]
 801468a:	68a2      	ldr	r2, [r4, #8]
 801468c:	68e3      	ldr	r3, [r4, #12]
 801468e:	f50d 7c86 	add.w	ip, sp, #268	@ 0x10c
 8014692:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014696:	6920      	ldr	r0, [r4, #16]
 8014698:	6961      	ldr	r1, [r4, #20]
 801469a:	69a2      	ldr	r2, [r4, #24]
 801469c:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 80146a0:	2201      	movs	r2, #1
 80146a2:	4611      	mov	r1, r2
 80146a4:	4628      	mov	r0, r5
 80146a6:	f7fe fe91 	bl	80133cc <CheckStateAndRecoverError>
 80146aa:	4604      	mov	r4, r0
 80146ac:	b960      	cbnz	r0, 80146c8 <Argus_SetConfigurationPixelBinning+0x60>
 80146ae:	f505 7042 	add.w	r0, r5, #776	@ 0x308
 80146b2:	f00e fca3 	bl	8022ffc <Argus_Cal_GetCalibrationPtr>
 80146b6:	4606      	mov	r6, r0
 80146b8:	b1b0      	cbz	r0, 80146e8 <Argus_SetConfigurationPixelBinning+0x80>
 80146ba:	1d2f      	adds	r7, r5, #4
 80146bc:	21c0      	movs	r1, #192	@ 0xc0
 80146be:	4638      	mov	r0, r7
 80146c0:	f00a ff4a 	bl	801f558 <Argus_Dev_SetStatusSync>
 80146c4:	4604      	mov	r4, r0
 80146c6:	b110      	cbz	r0, 80146ce <Argus_SetConfigurationPixelBinning+0x66>
 80146c8:	4620      	mov	r0, r4
 80146ca:	b04b      	add	sp, #300	@ 0x12c
 80146cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80146ce:	4669      	mov	r1, sp
 80146d0:	4632      	mov	r2, r6
 80146d2:	4628      	mov	r0, r5
 80146d4:	f000 fd20 	bl	8015118 <Argus_Core_SetSettingsSync>
 80146d8:	21c0      	movs	r1, #192	@ 0xc0
 80146da:	4604      	mov	r4, r0
 80146dc:	4638      	mov	r0, r7
 80146de:	f00b f80d 	bl	801f6fc <Argus_Dev_ClearStatus>
 80146e2:	4620      	mov	r0, r4
 80146e4:	b04b      	add	sp, #300	@ 0x12c
 80146e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80146e8:	f06f 0404 	mvn.w	r4, #4
 80146ec:	e7ec      	b.n	80146c8 <Argus_SetConfigurationPixelBinning+0x60>
 80146ee:	4807      	ldr	r0, [pc, #28]	@ (801470c <Argus_SetConfigurationPixelBinning+0xa4>)
 80146f0:	f7fe fc50 	bl	8012f94 <print>
 80146f4:	f06f 0406 	mvn.w	r4, #6
 80146f8:	e7e6      	b.n	80146c8 <Argus_SetConfigurationPixelBinning+0x60>
 80146fa:	4805      	ldr	r0, [pc, #20]	@ (8014710 <Argus_SetConfigurationPixelBinning+0xa8>)
 80146fc:	f7fe fc4a 	bl	8012f94 <print>
 8014700:	f06f 0404 	mvn.w	r4, #4
 8014704:	e7e0      	b.n	80146c8 <Argus_SetConfigurationPixelBinning+0x60>
 8014706:	bf00      	nop
 8014708:	0afb8550 	.word	0x0afb8550
 801470c:	0802ca68 	.word	0x0802ca68
 8014710:	0802ca40 	.word	0x0802ca40

08014714 <Argus_GetConfigurationPixelBinning>:
 8014714:	b510      	push	{r4, lr}
 8014716:	b350      	cbz	r0, 801476e <Argus_GetConfigurationPixelBinning+0x5a>
 8014718:	4b18      	ldr	r3, [pc, #96]	@ (801477c <Argus_GetConfigurationPixelBinning+0x68>)
 801471a:	6802      	ldr	r2, [r0, #0]
 801471c:	429a      	cmp	r2, r3
 801471e:	d11d      	bne.n	801475c <Argus_GetConfigurationPixelBinning+0x48>
 8014720:	460c      	mov	r4, r1
 8014722:	b309      	cbz	r1, 8014768 <Argus_GetConfigurationPixelBinning+0x54>
 8014724:	f500 70ee 	add.w	r0, r0, #476	@ 0x1dc
 8014728:	f00d f996 	bl	8021a58 <Argus_Cfg_GetConfigurationPtr>
 801472c:	f8d0 210c 	ldr.w	r2, [r0, #268]	@ 0x10c
 8014730:	f8d0 3110 	ldr.w	r3, [r0, #272]	@ 0x110
 8014734:	f8d0 1114 	ldr.w	r1, [r0, #276]	@ 0x114
 8014738:	f8d0 c118 	ldr.w	ip, [r0, #280]	@ 0x118
 801473c:	f8c4 c00c 	str.w	ip, [r4, #12]
 8014740:	6022      	str	r2, [r4, #0]
 8014742:	6063      	str	r3, [r4, #4]
 8014744:	60a1      	str	r1, [r4, #8]
 8014746:	f8d0 211c 	ldr.w	r2, [r0, #284]	@ 0x11c
 801474a:	f8d0 3120 	ldr.w	r3, [r0, #288]	@ 0x120
 801474e:	f8d0 1124 	ldr.w	r1, [r0, #292]	@ 0x124
 8014752:	61a1      	str	r1, [r4, #24]
 8014754:	6122      	str	r2, [r4, #16]
 8014756:	6163      	str	r3, [r4, #20]
 8014758:	2000      	movs	r0, #0
 801475a:	bd10      	pop	{r4, pc}
 801475c:	4808      	ldr	r0, [pc, #32]	@ (8014780 <Argus_GetConfigurationPixelBinning+0x6c>)
 801475e:	f7fe fc19 	bl	8012f94 <print>
 8014762:	f06f 0006 	mvn.w	r0, #6
 8014766:	bd10      	pop	{r4, pc}
 8014768:	f06f 0004 	mvn.w	r0, #4
 801476c:	bd10      	pop	{r4, pc}
 801476e:	4805      	ldr	r0, [pc, #20]	@ (8014784 <Argus_GetConfigurationPixelBinning+0x70>)
 8014770:	f7fe fc10 	bl	8012f94 <print>
 8014774:	f06f 0004 	mvn.w	r0, #4
 8014778:	bd10      	pop	{r4, pc}
 801477a:	bf00      	nop
 801477c:	0afb8550 	.word	0x0afb8550
 8014780:	0802ca68 	.word	0x0802ca68
 8014784:	0802ca40 	.word	0x0802ca40

08014788 <Argus_SetCalibrationGlobalRangeOffsets>:
 8014788:	b5f0      	push	{r4, r5, r6, r7, lr}
 801478a:	f5ad 7d31 	sub.w	sp, sp, #708	@ 0x2c4
 801478e:	2800      	cmp	r0, #0
 8014790:	d03e      	beq.n	8014810 <Argus_SetCalibrationGlobalRangeOffsets+0x88>
 8014792:	4b22      	ldr	r3, [pc, #136]	@ (801481c <Argus_SetCalibrationGlobalRangeOffsets+0x94>)
 8014794:	4615      	mov	r5, r2
 8014796:	6802      	ldr	r2, [r0, #0]
 8014798:	429a      	cmp	r2, r3
 801479a:	4604      	mov	r4, r0
 801479c:	d132      	bne.n	8014804 <Argus_SetCalibrationGlobalRangeOffsets+0x7c>
 801479e:	460e      	mov	r6, r1
 80147a0:	f500 7042 	add.w	r0, r0, #776	@ 0x308
 80147a4:	a901      	add	r1, sp, #4
 80147a6:	f00e fc21 	bl	8022fec <Argus_Cal_GetCalibration>
 80147aa:	2201      	movs	r2, #1
 80147ac:	4611      	mov	r1, r2
 80147ae:	4620      	mov	r0, r4
 80147b0:	f8ad 50a4 	strh.w	r5, [sp, #164]	@ 0xa4
 80147b4:	f8ad 60a2 	strh.w	r6, [sp, #162]	@ 0xa2
 80147b8:	f7fe fe08 	bl	80133cc <CheckStateAndRecoverError>
 80147bc:	4605      	mov	r5, r0
 80147be:	b960      	cbnz	r0, 80147da <Argus_SetCalibrationGlobalRangeOffsets+0x52>
 80147c0:	f504 70ee 	add.w	r0, r4, #476	@ 0x1dc
 80147c4:	f00d f948 	bl	8021a58 <Argus_Cfg_GetConfigurationPtr>
 80147c8:	4606      	mov	r6, r0
 80147ca:	b1c0      	cbz	r0, 80147fe <Argus_SetCalibrationGlobalRangeOffsets+0x76>
 80147cc:	1d27      	adds	r7, r4, #4
 80147ce:	21c0      	movs	r1, #192	@ 0xc0
 80147d0:	4638      	mov	r0, r7
 80147d2:	f00a fec1 	bl	801f558 <Argus_Dev_SetStatusSync>
 80147d6:	4605      	mov	r5, r0
 80147d8:	b118      	cbz	r0, 80147e2 <Argus_SetCalibrationGlobalRangeOffsets+0x5a>
 80147da:	4628      	mov	r0, r5
 80147dc:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 80147e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147e2:	4631      	mov	r1, r6
 80147e4:	aa01      	add	r2, sp, #4
 80147e6:	4620      	mov	r0, r4
 80147e8:	f000 fc96 	bl	8015118 <Argus_Core_SetSettingsSync>
 80147ec:	21c0      	movs	r1, #192	@ 0xc0
 80147ee:	4605      	mov	r5, r0
 80147f0:	4638      	mov	r0, r7
 80147f2:	f00a ff83 	bl	801f6fc <Argus_Dev_ClearStatus>
 80147f6:	4628      	mov	r0, r5
 80147f8:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 80147fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147fe:	f06f 0504 	mvn.w	r5, #4
 8014802:	e7ea      	b.n	80147da <Argus_SetCalibrationGlobalRangeOffsets+0x52>
 8014804:	4806      	ldr	r0, [pc, #24]	@ (8014820 <Argus_SetCalibrationGlobalRangeOffsets+0x98>)
 8014806:	f7fe fbc5 	bl	8012f94 <print>
 801480a:	f06f 0506 	mvn.w	r5, #6
 801480e:	e7e4      	b.n	80147da <Argus_SetCalibrationGlobalRangeOffsets+0x52>
 8014810:	4804      	ldr	r0, [pc, #16]	@ (8014824 <Argus_SetCalibrationGlobalRangeOffsets+0x9c>)
 8014812:	f7fe fbbf 	bl	8012f94 <print>
 8014816:	f06f 0504 	mvn.w	r5, #4
 801481a:	e7de      	b.n	80147da <Argus_SetCalibrationGlobalRangeOffsets+0x52>
 801481c:	0afb8550 	.word	0x0afb8550
 8014820:	0802ca68 	.word	0x0802ca68
 8014824:	0802ca40 	.word	0x0802ca40

08014828 <Argus_GetCalibrationGlobalRangeOffsets>:
 8014828:	b570      	push	{r4, r5, r6, lr}
 801482a:	b310      	cbz	r0, 8014872 <Argus_GetCalibrationGlobalRangeOffsets+0x4a>
 801482c:	4b14      	ldr	r3, [pc, #80]	@ (8014880 <Argus_GetCalibrationGlobalRangeOffsets+0x58>)
 801482e:	4616      	mov	r6, r2
 8014830:	6802      	ldr	r2, [r0, #0]
 8014832:	429a      	cmp	r2, r3
 8014834:	d117      	bne.n	8014866 <Argus_GetCalibrationGlobalRangeOffsets+0x3e>
 8014836:	460d      	mov	r5, r1
 8014838:	b191      	cbz	r1, 8014860 <Argus_GetCalibrationGlobalRangeOffsets+0x38>
 801483a:	b18e      	cbz	r6, 8014860 <Argus_GetCalibrationGlobalRangeOffsets+0x38>
 801483c:	f500 7442 	add.w	r4, r0, #776	@ 0x308
 8014840:	4620      	mov	r0, r4
 8014842:	f00e fbdb 	bl	8022ffc <Argus_Cal_GetCalibrationPtr>
 8014846:	4603      	mov	r3, r0
 8014848:	4620      	mov	r0, r4
 801484a:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	@ 0x9e
 801484e:	802b      	strh	r3, [r5, #0]
 8014850:	f00e fbd4 	bl	8022ffc <Argus_Cal_GetCalibrationPtr>
 8014854:	4603      	mov	r3, r0
 8014856:	2000      	movs	r0, #0
 8014858:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	@ 0xa0
 801485c:	8033      	strh	r3, [r6, #0]
 801485e:	bd70      	pop	{r4, r5, r6, pc}
 8014860:	f06f 0004 	mvn.w	r0, #4
 8014864:	bd70      	pop	{r4, r5, r6, pc}
 8014866:	4807      	ldr	r0, [pc, #28]	@ (8014884 <Argus_GetCalibrationGlobalRangeOffsets+0x5c>)
 8014868:	f7fe fb94 	bl	8012f94 <print>
 801486c:	f06f 0006 	mvn.w	r0, #6
 8014870:	bd70      	pop	{r4, r5, r6, pc}
 8014872:	4805      	ldr	r0, [pc, #20]	@ (8014888 <Argus_GetCalibrationGlobalRangeOffsets+0x60>)
 8014874:	f7fe fb8e 	bl	8012f94 <print>
 8014878:	f06f 0004 	mvn.w	r0, #4
 801487c:	bd70      	pop	{r4, r5, r6, pc}
 801487e:	bf00      	nop
 8014880:	0afb8550 	.word	0x0afb8550
 8014884:	0802ca68 	.word	0x0802ca68
 8014888:	0802ca40 	.word	0x0802ca40

0801488c <Argus_SetCalibrationPixelRangeOffsets>:
 801488c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801488e:	f5ad 7d31 	sub.w	sp, sp, #708	@ 0x2c4
 8014892:	2800      	cmp	r0, #0
 8014894:	d042      	beq.n	801491c <Argus_SetCalibrationPixelRangeOffsets+0x90>
 8014896:	4b24      	ldr	r3, [pc, #144]	@ (8014928 <Argus_SetCalibrationPixelRangeOffsets+0x9c>)
 8014898:	6802      	ldr	r2, [r0, #0]
 801489a:	429a      	cmp	r2, r3
 801489c:	4604      	mov	r4, r0
 801489e:	d137      	bne.n	8014910 <Argus_SetCalibrationPixelRangeOffsets+0x84>
 80148a0:	460d      	mov	r5, r1
 80148a2:	f500 7042 	add.w	r0, r0, #776	@ 0x308
 80148a6:	a901      	add	r1, sp, #4
 80148a8:	f00e fba0 	bl	8022fec <Argus_Cal_GetCalibration>
 80148ac:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 80148ae:	4629      	mov	r1, r5
 80148b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80148b4:	2280      	movs	r2, #128	@ 0x80
 80148b6:	a808      	add	r0, sp, #32
 80148b8:	93a3      	str	r3, [sp, #652]	@ 0x28c
 80148ba:	f014 ffe2 	bl	8029882 <memcpy>
 80148be:	2201      	movs	r2, #1
 80148c0:	4611      	mov	r1, r2
 80148c2:	4620      	mov	r0, r4
 80148c4:	f7fe fd82 	bl	80133cc <CheckStateAndRecoverError>
 80148c8:	4605      	mov	r5, r0
 80148ca:	b960      	cbnz	r0, 80148e6 <Argus_SetCalibrationPixelRangeOffsets+0x5a>
 80148cc:	f504 70ee 	add.w	r0, r4, #476	@ 0x1dc
 80148d0:	f00d f8c2 	bl	8021a58 <Argus_Cfg_GetConfigurationPtr>
 80148d4:	4606      	mov	r6, r0
 80148d6:	b1c0      	cbz	r0, 801490a <Argus_SetCalibrationPixelRangeOffsets+0x7e>
 80148d8:	1d27      	adds	r7, r4, #4
 80148da:	21c0      	movs	r1, #192	@ 0xc0
 80148dc:	4638      	mov	r0, r7
 80148de:	f00a fe3b 	bl	801f558 <Argus_Dev_SetStatusSync>
 80148e2:	4605      	mov	r5, r0
 80148e4:	b118      	cbz	r0, 80148ee <Argus_SetCalibrationPixelRangeOffsets+0x62>
 80148e6:	4628      	mov	r0, r5
 80148e8:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 80148ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148ee:	4631      	mov	r1, r6
 80148f0:	aa01      	add	r2, sp, #4
 80148f2:	4620      	mov	r0, r4
 80148f4:	f000 fc10 	bl	8015118 <Argus_Core_SetSettingsSync>
 80148f8:	21c0      	movs	r1, #192	@ 0xc0
 80148fa:	4605      	mov	r5, r0
 80148fc:	4638      	mov	r0, r7
 80148fe:	f00a fefd 	bl	801f6fc <Argus_Dev_ClearStatus>
 8014902:	4628      	mov	r0, r5
 8014904:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 8014908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801490a:	f06f 0504 	mvn.w	r5, #4
 801490e:	e7ea      	b.n	80148e6 <Argus_SetCalibrationPixelRangeOffsets+0x5a>
 8014910:	4806      	ldr	r0, [pc, #24]	@ (801492c <Argus_SetCalibrationPixelRangeOffsets+0xa0>)
 8014912:	f7fe fb3f 	bl	8012f94 <print>
 8014916:	f06f 0506 	mvn.w	r5, #6
 801491a:	e7e4      	b.n	80148e6 <Argus_SetCalibrationPixelRangeOffsets+0x5a>
 801491c:	4804      	ldr	r0, [pc, #16]	@ (8014930 <Argus_SetCalibrationPixelRangeOffsets+0xa4>)
 801491e:	f7fe fb39 	bl	8012f94 <print>
 8014922:	f06f 0504 	mvn.w	r5, #4
 8014926:	e7de      	b.n	80148e6 <Argus_SetCalibrationPixelRangeOffsets+0x5a>
 8014928:	0afb8550 	.word	0x0afb8550
 801492c:	0802ca68 	.word	0x0802ca68
 8014930:	0802ca40 	.word	0x0802ca40

08014934 <Argus_GetCalibrationPixelRangeOffsets>:
 8014934:	b510      	push	{r4, lr}
 8014936:	b1d0      	cbz	r0, 801496e <Argus_GetCalibrationPixelRangeOffsets+0x3a>
 8014938:	4b10      	ldr	r3, [pc, #64]	@ (801497c <Argus_GetCalibrationPixelRangeOffsets+0x48>)
 801493a:	6802      	ldr	r2, [r0, #0]
 801493c:	429a      	cmp	r2, r3
 801493e:	d10d      	bne.n	801495c <Argus_GetCalibrationPixelRangeOffsets+0x28>
 8014940:	460c      	mov	r4, r1
 8014942:	b189      	cbz	r1, 8014968 <Argus_GetCalibrationPixelRangeOffsets+0x34>
 8014944:	f500 7042 	add.w	r0, r0, #776	@ 0x308
 8014948:	f00e fb58 	bl	8022ffc <Argus_Cal_GetCalibrationPtr>
 801494c:	2280      	movs	r2, #128	@ 0x80
 801494e:	f100 011c 	add.w	r1, r0, #28
 8014952:	4620      	mov	r0, r4
 8014954:	f014 ff95 	bl	8029882 <memcpy>
 8014958:	2000      	movs	r0, #0
 801495a:	bd10      	pop	{r4, pc}
 801495c:	4808      	ldr	r0, [pc, #32]	@ (8014980 <Argus_GetCalibrationPixelRangeOffsets+0x4c>)
 801495e:	f7fe fb19 	bl	8012f94 <print>
 8014962:	f06f 0006 	mvn.w	r0, #6
 8014966:	bd10      	pop	{r4, pc}
 8014968:	f06f 0004 	mvn.w	r0, #4
 801496c:	bd10      	pop	{r4, pc}
 801496e:	4805      	ldr	r0, [pc, #20]	@ (8014984 <Argus_GetCalibrationPixelRangeOffsets+0x50>)
 8014970:	f7fe fb10 	bl	8012f94 <print>
 8014974:	f06f 0004 	mvn.w	r0, #4
 8014978:	bd10      	pop	{r4, pc}
 801497a:	bf00      	nop
 801497c:	0afb8550 	.word	0x0afb8550
 8014980:	0802ca68 	.word	0x0802ca68
 8014984:	0802ca40 	.word	0x0802ca40

08014988 <Argus_ResetCalibrationPixelRangeOffsets>:
 8014988:	b5f0      	push	{r4, r5, r6, r7, lr}
 801498a:	f5ad 7d31 	sub.w	sp, sp, #708	@ 0x2c4
 801498e:	2800      	cmp	r0, #0
 8014990:	d044      	beq.n	8014a1c <Argus_ResetCalibrationPixelRangeOffsets+0x94>
 8014992:	4b25      	ldr	r3, [pc, #148]	@ (8014a28 <Argus_ResetCalibrationPixelRangeOffsets+0xa0>)
 8014994:	6802      	ldr	r2, [r0, #0]
 8014996:	429a      	cmp	r2, r3
 8014998:	4604      	mov	r4, r0
 801499a:	d139      	bne.n	8014a10 <Argus_ResetCalibrationPixelRangeOffsets+0x88>
 801499c:	a901      	add	r1, sp, #4
 801499e:	f500 7042 	add.w	r0, r0, #776	@ 0x308
 80149a2:	f504 76ee 	add.w	r6, r4, #476	@ 0x1dc
 80149a6:	f00e fb21 	bl	8022fec <Argus_Cal_GetCalibration>
 80149aa:	4630      	mov	r0, r6
 80149ac:	f00d f898 	bl	8021ae0 <Argus_Cfg_GetMeasurementMode>
 80149b0:	4601      	mov	r1, r0
 80149b2:	a808      	add	r0, sp, #32
 80149b4:	f010 fc9e 	bl	80252f4 <Argus_GetPixelRangeOffsets_Callback>
 80149b8:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 80149ba:	2201      	movs	r2, #1
 80149bc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80149c0:	4611      	mov	r1, r2
 80149c2:	4620      	mov	r0, r4
 80149c4:	93a3      	str	r3, [sp, #652]	@ 0x28c
 80149c6:	f7fe fd01 	bl	80133cc <CheckStateAndRecoverError>
 80149ca:	4605      	mov	r5, r0
 80149cc:	b958      	cbnz	r0, 80149e6 <Argus_ResetCalibrationPixelRangeOffsets+0x5e>
 80149ce:	4630      	mov	r0, r6
 80149d0:	f00d f842 	bl	8021a58 <Argus_Cfg_GetConfigurationPtr>
 80149d4:	4606      	mov	r6, r0
 80149d6:	b1c0      	cbz	r0, 8014a0a <Argus_ResetCalibrationPixelRangeOffsets+0x82>
 80149d8:	1d27      	adds	r7, r4, #4
 80149da:	21c0      	movs	r1, #192	@ 0xc0
 80149dc:	4638      	mov	r0, r7
 80149de:	f00a fdbb 	bl	801f558 <Argus_Dev_SetStatusSync>
 80149e2:	4605      	mov	r5, r0
 80149e4:	b118      	cbz	r0, 80149ee <Argus_ResetCalibrationPixelRangeOffsets+0x66>
 80149e6:	4628      	mov	r0, r5
 80149e8:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 80149ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149ee:	4631      	mov	r1, r6
 80149f0:	aa01      	add	r2, sp, #4
 80149f2:	4620      	mov	r0, r4
 80149f4:	f000 fb90 	bl	8015118 <Argus_Core_SetSettingsSync>
 80149f8:	21c0      	movs	r1, #192	@ 0xc0
 80149fa:	4605      	mov	r5, r0
 80149fc:	4638      	mov	r0, r7
 80149fe:	f00a fe7d 	bl	801f6fc <Argus_Dev_ClearStatus>
 8014a02:	4628      	mov	r0, r5
 8014a04:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 8014a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a0a:	f06f 0504 	mvn.w	r5, #4
 8014a0e:	e7ea      	b.n	80149e6 <Argus_ResetCalibrationPixelRangeOffsets+0x5e>
 8014a10:	4806      	ldr	r0, [pc, #24]	@ (8014a2c <Argus_ResetCalibrationPixelRangeOffsets+0xa4>)
 8014a12:	f7fe fabf 	bl	8012f94 <print>
 8014a16:	f06f 0506 	mvn.w	r5, #6
 8014a1a:	e7e4      	b.n	80149e6 <Argus_ResetCalibrationPixelRangeOffsets+0x5e>
 8014a1c:	4804      	ldr	r0, [pc, #16]	@ (8014a30 <Argus_ResetCalibrationPixelRangeOffsets+0xa8>)
 8014a1e:	f7fe fab9 	bl	8012f94 <print>
 8014a22:	f06f 0504 	mvn.w	r5, #4
 8014a26:	e7de      	b.n	80149e6 <Argus_ResetCalibrationPixelRangeOffsets+0x5e>
 8014a28:	0afb8550 	.word	0x0afb8550
 8014a2c:	0802ca68 	.word	0x0802ca68
 8014a30:	0802ca40 	.word	0x0802ca40

08014a34 <Argus_SetCalibrationRangeOffsetSequenceSampleTime>:
 8014a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a36:	f5ad 7d31 	sub.w	sp, sp, #708	@ 0x2c4
 8014a3a:	2800      	cmp	r0, #0
 8014a3c:	d03b      	beq.n	8014ab6 <Argus_SetCalibrationRangeOffsetSequenceSampleTime+0x82>
 8014a3e:	4b21      	ldr	r3, [pc, #132]	@ (8014ac4 <Argus_SetCalibrationRangeOffsetSequenceSampleTime+0x90>)
 8014a40:	6802      	ldr	r2, [r0, #0]
 8014a42:	429a      	cmp	r2, r3
 8014a44:	4604      	mov	r4, r0
 8014a46:	d130      	bne.n	8014aaa <Argus_SetCalibrationRangeOffsetSequenceSampleTime+0x76>
 8014a48:	460d      	mov	r5, r1
 8014a4a:	f500 7042 	add.w	r0, r0, #776	@ 0x308
 8014a4e:	a901      	add	r1, sp, #4
 8014a50:	f00e facc 	bl	8022fec <Argus_Cal_GetCalibration>
 8014a54:	2201      	movs	r2, #1
 8014a56:	4611      	mov	r1, r2
 8014a58:	4620      	mov	r0, r4
 8014a5a:	f8ad 52be 	strh.w	r5, [sp, #702]	@ 0x2be
 8014a5e:	f7fe fcb5 	bl	80133cc <CheckStateAndRecoverError>
 8014a62:	4605      	mov	r5, r0
 8014a64:	b960      	cbnz	r0, 8014a80 <Argus_SetCalibrationRangeOffsetSequenceSampleTime+0x4c>
 8014a66:	f504 70ee 	add.w	r0, r4, #476	@ 0x1dc
 8014a6a:	f00c fff5 	bl	8021a58 <Argus_Cfg_GetConfigurationPtr>
 8014a6e:	4606      	mov	r6, r0
 8014a70:	b1c0      	cbz	r0, 8014aa4 <Argus_SetCalibrationRangeOffsetSequenceSampleTime+0x70>
 8014a72:	1d27      	adds	r7, r4, #4
 8014a74:	21c0      	movs	r1, #192	@ 0xc0
 8014a76:	4638      	mov	r0, r7
 8014a78:	f00a fd6e 	bl	801f558 <Argus_Dev_SetStatusSync>
 8014a7c:	4605      	mov	r5, r0
 8014a7e:	b118      	cbz	r0, 8014a88 <Argus_SetCalibrationRangeOffsetSequenceSampleTime+0x54>
 8014a80:	4628      	mov	r0, r5
 8014a82:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 8014a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a88:	4631      	mov	r1, r6
 8014a8a:	aa01      	add	r2, sp, #4
 8014a8c:	4620      	mov	r0, r4
 8014a8e:	f000 fb43 	bl	8015118 <Argus_Core_SetSettingsSync>
 8014a92:	21c0      	movs	r1, #192	@ 0xc0
 8014a94:	4605      	mov	r5, r0
 8014a96:	4638      	mov	r0, r7
 8014a98:	f00a fe30 	bl	801f6fc <Argus_Dev_ClearStatus>
 8014a9c:	4628      	mov	r0, r5
 8014a9e:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 8014aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014aa4:	f06f 0504 	mvn.w	r5, #4
 8014aa8:	e7ea      	b.n	8014a80 <Argus_SetCalibrationRangeOffsetSequenceSampleTime+0x4c>
 8014aaa:	4807      	ldr	r0, [pc, #28]	@ (8014ac8 <Argus_SetCalibrationRangeOffsetSequenceSampleTime+0x94>)
 8014aac:	f7fe fa72 	bl	8012f94 <print>
 8014ab0:	f06f 0506 	mvn.w	r5, #6
 8014ab4:	e7e4      	b.n	8014a80 <Argus_SetCalibrationRangeOffsetSequenceSampleTime+0x4c>
 8014ab6:	4805      	ldr	r0, [pc, #20]	@ (8014acc <Argus_SetCalibrationRangeOffsetSequenceSampleTime+0x98>)
 8014ab8:	f7fe fa6c 	bl	8012f94 <print>
 8014abc:	f06f 0504 	mvn.w	r5, #4
 8014ac0:	e7de      	b.n	8014a80 <Argus_SetCalibrationRangeOffsetSequenceSampleTime+0x4c>
 8014ac2:	bf00      	nop
 8014ac4:	0afb8550 	.word	0x0afb8550
 8014ac8:	0802ca68 	.word	0x0802ca68
 8014acc:	0802ca40 	.word	0x0802ca40

08014ad0 <Argus_GetCalibrationRangeOffsetSequenceSampleTime>:
 8014ad0:	b510      	push	{r4, lr}
 8014ad2:	b1c0      	cbz	r0, 8014b06 <Argus_GetCalibrationRangeOffsetSequenceSampleTime+0x36>
 8014ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8014b14 <Argus_GetCalibrationRangeOffsetSequenceSampleTime+0x44>)
 8014ad6:	6802      	ldr	r2, [r0, #0]
 8014ad8:	429a      	cmp	r2, r3
 8014ada:	d10b      	bne.n	8014af4 <Argus_GetCalibrationRangeOffsetSequenceSampleTime+0x24>
 8014adc:	460c      	mov	r4, r1
 8014ade:	b179      	cbz	r1, 8014b00 <Argus_GetCalibrationRangeOffsetSequenceSampleTime+0x30>
 8014ae0:	f500 7042 	add.w	r0, r0, #776	@ 0x308
 8014ae4:	f00e fa8a 	bl	8022ffc <Argus_Cal_GetCalibrationPtr>
 8014ae8:	4603      	mov	r3, r0
 8014aea:	2000      	movs	r0, #0
 8014aec:	f8b3 32ba 	ldrh.w	r3, [r3, #698]	@ 0x2ba
 8014af0:	8023      	strh	r3, [r4, #0]
 8014af2:	bd10      	pop	{r4, pc}
 8014af4:	4808      	ldr	r0, [pc, #32]	@ (8014b18 <Argus_GetCalibrationRangeOffsetSequenceSampleTime+0x48>)
 8014af6:	f7fe fa4d 	bl	8012f94 <print>
 8014afa:	f06f 0006 	mvn.w	r0, #6
 8014afe:	bd10      	pop	{r4, pc}
 8014b00:	f06f 0004 	mvn.w	r0, #4
 8014b04:	bd10      	pop	{r4, pc}
 8014b06:	4805      	ldr	r0, [pc, #20]	@ (8014b1c <Argus_GetCalibrationRangeOffsetSequenceSampleTime+0x4c>)
 8014b08:	f7fe fa44 	bl	8012f94 <print>
 8014b0c:	f06f 0004 	mvn.w	r0, #4
 8014b10:	bd10      	pop	{r4, pc}
 8014b12:	bf00      	nop
 8014b14:	0afb8550 	.word	0x0afb8550
 8014b18:	0802ca68 	.word	0x0802ca68
 8014b1c:	0802ca40 	.word	0x0802ca40

08014b20 <Argus_SetCalibrationCrosstalkVectorTable>:
 8014b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b22:	f5ad 7d31 	sub.w	sp, sp, #708	@ 0x2c4
 8014b26:	2800      	cmp	r0, #0
 8014b28:	d044      	beq.n	8014bb4 <Argus_SetCalibrationCrosstalkVectorTable+0x94>
 8014b2a:	4b25      	ldr	r3, [pc, #148]	@ (8014bc0 <Argus_SetCalibrationCrosstalkVectorTable+0xa0>)
 8014b2c:	6802      	ldr	r2, [r0, #0]
 8014b2e:	429a      	cmp	r2, r3
 8014b30:	4604      	mov	r4, r0
 8014b32:	d139      	bne.n	8014ba8 <Argus_SetCalibrationCrosstalkVectorTable+0x88>
 8014b34:	460d      	mov	r5, r1
 8014b36:	f500 7042 	add.w	r0, r0, #776	@ 0x308
 8014b3a:	a901      	add	r1, sp, #4
 8014b3c:	f00e fa56 	bl	8022fec <Argus_Cal_GetCalibration>
 8014b40:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8014b42:	4629      	mov	r1, r5
 8014b44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8014b48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8014b4c:	f50d 7093 	add.w	r0, sp, #294	@ 0x126
 8014b50:	93a3      	str	r3, [sp, #652]	@ 0x28c
 8014b52:	f014 fe96 	bl	8029882 <memcpy>
 8014b56:	2201      	movs	r2, #1
 8014b58:	4611      	mov	r1, r2
 8014b5a:	4620      	mov	r0, r4
 8014b5c:	f7fe fc36 	bl	80133cc <CheckStateAndRecoverError>
 8014b60:	4605      	mov	r5, r0
 8014b62:	b960      	cbnz	r0, 8014b7e <Argus_SetCalibrationCrosstalkVectorTable+0x5e>
 8014b64:	f504 70ee 	add.w	r0, r4, #476	@ 0x1dc
 8014b68:	f00c ff76 	bl	8021a58 <Argus_Cfg_GetConfigurationPtr>
 8014b6c:	4606      	mov	r6, r0
 8014b6e:	b1c0      	cbz	r0, 8014ba2 <Argus_SetCalibrationCrosstalkVectorTable+0x82>
 8014b70:	1d27      	adds	r7, r4, #4
 8014b72:	21c0      	movs	r1, #192	@ 0xc0
 8014b74:	4638      	mov	r0, r7
 8014b76:	f00a fcef 	bl	801f558 <Argus_Dev_SetStatusSync>
 8014b7a:	4605      	mov	r5, r0
 8014b7c:	b118      	cbz	r0, 8014b86 <Argus_SetCalibrationCrosstalkVectorTable+0x66>
 8014b7e:	4628      	mov	r0, r5
 8014b80:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 8014b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b86:	4631      	mov	r1, r6
 8014b88:	aa01      	add	r2, sp, #4
 8014b8a:	4620      	mov	r0, r4
 8014b8c:	f000 fac4 	bl	8015118 <Argus_Core_SetSettingsSync>
 8014b90:	21c0      	movs	r1, #192	@ 0xc0
 8014b92:	4605      	mov	r5, r0
 8014b94:	4638      	mov	r0, r7
 8014b96:	f00a fdb1 	bl	801f6fc <Argus_Dev_ClearStatus>
 8014b9a:	4628      	mov	r0, r5
 8014b9c:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 8014ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ba2:	f06f 0504 	mvn.w	r5, #4
 8014ba6:	e7ea      	b.n	8014b7e <Argus_SetCalibrationCrosstalkVectorTable+0x5e>
 8014ba8:	4806      	ldr	r0, [pc, #24]	@ (8014bc4 <Argus_SetCalibrationCrosstalkVectorTable+0xa4>)
 8014baa:	f7fe f9f3 	bl	8012f94 <print>
 8014bae:	f06f 0506 	mvn.w	r5, #6
 8014bb2:	e7e4      	b.n	8014b7e <Argus_SetCalibrationCrosstalkVectorTable+0x5e>
 8014bb4:	4804      	ldr	r0, [pc, #16]	@ (8014bc8 <Argus_SetCalibrationCrosstalkVectorTable+0xa8>)
 8014bb6:	f7fe f9ed 	bl	8012f94 <print>
 8014bba:	f06f 0504 	mvn.w	r5, #4
 8014bbe:	e7de      	b.n	8014b7e <Argus_SetCalibrationCrosstalkVectorTable+0x5e>
 8014bc0:	0afb8550 	.word	0x0afb8550
 8014bc4:	0802ca68 	.word	0x0802ca68
 8014bc8:	0802ca40 	.word	0x0802ca40

08014bcc <Argus_GetCalibrationCrosstalkVectorTable>:
 8014bcc:	b510      	push	{r4, lr}
 8014bce:	b1d8      	cbz	r0, 8014c08 <Argus_GetCalibrationCrosstalkVectorTable+0x3c>
 8014bd0:	4b10      	ldr	r3, [pc, #64]	@ (8014c14 <Argus_GetCalibrationCrosstalkVectorTable+0x48>)
 8014bd2:	6802      	ldr	r2, [r0, #0]
 8014bd4:	429a      	cmp	r2, r3
 8014bd6:	d10e      	bne.n	8014bf6 <Argus_GetCalibrationCrosstalkVectorTable+0x2a>
 8014bd8:	460c      	mov	r4, r1
 8014bda:	b191      	cbz	r1, 8014c02 <Argus_GetCalibrationCrosstalkVectorTable+0x36>
 8014bdc:	f500 7042 	add.w	r0, r0, #776	@ 0x308
 8014be0:	f00e fa0c 	bl	8022ffc <Argus_Cal_GetCalibrationPtr>
 8014be4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8014be8:	f500 7191 	add.w	r1, r0, #290	@ 0x122
 8014bec:	4620      	mov	r0, r4
 8014bee:	f014 fe48 	bl	8029882 <memcpy>
 8014bf2:	2000      	movs	r0, #0
 8014bf4:	bd10      	pop	{r4, pc}
 8014bf6:	4808      	ldr	r0, [pc, #32]	@ (8014c18 <Argus_GetCalibrationCrosstalkVectorTable+0x4c>)
 8014bf8:	f7fe f9cc 	bl	8012f94 <print>
 8014bfc:	f06f 0006 	mvn.w	r0, #6
 8014c00:	bd10      	pop	{r4, pc}
 8014c02:	f06f 0004 	mvn.w	r0, #4
 8014c06:	bd10      	pop	{r4, pc}
 8014c08:	4804      	ldr	r0, [pc, #16]	@ (8014c1c <Argus_GetCalibrationCrosstalkVectorTable+0x50>)
 8014c0a:	f7fe f9c3 	bl	8012f94 <print>
 8014c0e:	f06f 0004 	mvn.w	r0, #4
 8014c12:	bd10      	pop	{r4, pc}
 8014c14:	0afb8550 	.word	0x0afb8550
 8014c18:	0802ca68 	.word	0x0802ca68
 8014c1c:	0802ca40 	.word	0x0802ca40

08014c20 <Argus_ResetCalibrationCrosstalkVectorTable>:
 8014c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c22:	f5ad 7d31 	sub.w	sp, sp, #708	@ 0x2c4
 8014c26:	2800      	cmp	r0, #0
 8014c28:	d045      	beq.n	8014cb6 <Argus_ResetCalibrationCrosstalkVectorTable+0x96>
 8014c2a:	4b26      	ldr	r3, [pc, #152]	@ (8014cc4 <Argus_ResetCalibrationCrosstalkVectorTable+0xa4>)
 8014c2c:	6802      	ldr	r2, [r0, #0]
 8014c2e:	429a      	cmp	r2, r3
 8014c30:	4604      	mov	r4, r0
 8014c32:	d13a      	bne.n	8014caa <Argus_ResetCalibrationCrosstalkVectorTable+0x8a>
 8014c34:	a901      	add	r1, sp, #4
 8014c36:	f500 7042 	add.w	r0, r0, #776	@ 0x308
 8014c3a:	f504 76ee 	add.w	r6, r4, #476	@ 0x1dc
 8014c3e:	f00e f9d5 	bl	8022fec <Argus_Cal_GetCalibration>
 8014c42:	4630      	mov	r0, r6
 8014c44:	f00c ff4c 	bl	8021ae0 <Argus_Cfg_GetMeasurementMode>
 8014c48:	4601      	mov	r1, r0
 8014c4a:	f50d 7093 	add.w	r0, sp, #294	@ 0x126
 8014c4e:	f7f1 fc19 	bl	8006484 <Argus_GetCrosstalkVectorTable_Callback>
 8014c52:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8014c54:	2201      	movs	r2, #1
 8014c56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8014c5a:	4611      	mov	r1, r2
 8014c5c:	4620      	mov	r0, r4
 8014c5e:	93a3      	str	r3, [sp, #652]	@ 0x28c
 8014c60:	f7fe fbb4 	bl	80133cc <CheckStateAndRecoverError>
 8014c64:	4605      	mov	r5, r0
 8014c66:	b958      	cbnz	r0, 8014c80 <Argus_ResetCalibrationCrosstalkVectorTable+0x60>
 8014c68:	4630      	mov	r0, r6
 8014c6a:	f00c fef5 	bl	8021a58 <Argus_Cfg_GetConfigurationPtr>
 8014c6e:	4606      	mov	r6, r0
 8014c70:	b1c0      	cbz	r0, 8014ca4 <Argus_ResetCalibrationCrosstalkVectorTable+0x84>
 8014c72:	1d27      	adds	r7, r4, #4
 8014c74:	21c0      	movs	r1, #192	@ 0xc0
 8014c76:	4638      	mov	r0, r7
 8014c78:	f00a fc6e 	bl	801f558 <Argus_Dev_SetStatusSync>
 8014c7c:	4605      	mov	r5, r0
 8014c7e:	b118      	cbz	r0, 8014c88 <Argus_ResetCalibrationCrosstalkVectorTable+0x68>
 8014c80:	4628      	mov	r0, r5
 8014c82:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 8014c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c88:	4631      	mov	r1, r6
 8014c8a:	aa01      	add	r2, sp, #4
 8014c8c:	4620      	mov	r0, r4
 8014c8e:	f000 fa43 	bl	8015118 <Argus_Core_SetSettingsSync>
 8014c92:	21c0      	movs	r1, #192	@ 0xc0
 8014c94:	4605      	mov	r5, r0
 8014c96:	4638      	mov	r0, r7
 8014c98:	f00a fd30 	bl	801f6fc <Argus_Dev_ClearStatus>
 8014c9c:	4628      	mov	r0, r5
 8014c9e:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 8014ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ca4:	f06f 0504 	mvn.w	r5, #4
 8014ca8:	e7ea      	b.n	8014c80 <Argus_ResetCalibrationCrosstalkVectorTable+0x60>
 8014caa:	4807      	ldr	r0, [pc, #28]	@ (8014cc8 <Argus_ResetCalibrationCrosstalkVectorTable+0xa8>)
 8014cac:	f7fe f972 	bl	8012f94 <print>
 8014cb0:	f06f 0506 	mvn.w	r5, #6
 8014cb4:	e7e4      	b.n	8014c80 <Argus_ResetCalibrationCrosstalkVectorTable+0x60>
 8014cb6:	4805      	ldr	r0, [pc, #20]	@ (8014ccc <Argus_ResetCalibrationCrosstalkVectorTable+0xac>)
 8014cb8:	f7fe f96c 	bl	8012f94 <print>
 8014cbc:	f06f 0504 	mvn.w	r5, #4
 8014cc0:	e7de      	b.n	8014c80 <Argus_ResetCalibrationCrosstalkVectorTable+0x60>
 8014cc2:	bf00      	nop
 8014cc4:	0afb8550 	.word	0x0afb8550
 8014cc8:	0802ca68 	.word	0x0802ca68
 8014ccc:	0802ca40 	.word	0x0802ca40

08014cd0 <Argus_SetCalibrationCrosstalkSequenceSampleTime>:
 8014cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cd2:	f5ad 7d31 	sub.w	sp, sp, #708	@ 0x2c4
 8014cd6:	2800      	cmp	r0, #0
 8014cd8:	d03b      	beq.n	8014d52 <Argus_SetCalibrationCrosstalkSequenceSampleTime+0x82>
 8014cda:	4b21      	ldr	r3, [pc, #132]	@ (8014d60 <Argus_SetCalibrationCrosstalkSequenceSampleTime+0x90>)
 8014cdc:	6802      	ldr	r2, [r0, #0]
 8014cde:	429a      	cmp	r2, r3
 8014ce0:	4604      	mov	r4, r0
 8014ce2:	d130      	bne.n	8014d46 <Argus_SetCalibrationCrosstalkSequenceSampleTime+0x76>
 8014ce4:	460d      	mov	r5, r1
 8014ce6:	f500 7042 	add.w	r0, r0, #776	@ 0x308
 8014cea:	a901      	add	r1, sp, #4
 8014cec:	f00e f97e 	bl	8022fec <Argus_Cal_GetCalibration>
 8014cf0:	2201      	movs	r2, #1
 8014cf2:	4611      	mov	r1, r2
 8014cf4:	4620      	mov	r0, r4
 8014cf6:	f8ad 52b4 	strh.w	r5, [sp, #692]	@ 0x2b4
 8014cfa:	f7fe fb67 	bl	80133cc <CheckStateAndRecoverError>
 8014cfe:	4605      	mov	r5, r0
 8014d00:	b960      	cbnz	r0, 8014d1c <Argus_SetCalibrationCrosstalkSequenceSampleTime+0x4c>
 8014d02:	f504 70ee 	add.w	r0, r4, #476	@ 0x1dc
 8014d06:	f00c fea7 	bl	8021a58 <Argus_Cfg_GetConfigurationPtr>
 8014d0a:	4606      	mov	r6, r0
 8014d0c:	b1c0      	cbz	r0, 8014d40 <Argus_SetCalibrationCrosstalkSequenceSampleTime+0x70>
 8014d0e:	1d27      	adds	r7, r4, #4
 8014d10:	21c0      	movs	r1, #192	@ 0xc0
 8014d12:	4638      	mov	r0, r7
 8014d14:	f00a fc20 	bl	801f558 <Argus_Dev_SetStatusSync>
 8014d18:	4605      	mov	r5, r0
 8014d1a:	b118      	cbz	r0, 8014d24 <Argus_SetCalibrationCrosstalkSequenceSampleTime+0x54>
 8014d1c:	4628      	mov	r0, r5
 8014d1e:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 8014d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d24:	4631      	mov	r1, r6
 8014d26:	aa01      	add	r2, sp, #4
 8014d28:	4620      	mov	r0, r4
 8014d2a:	f000 f9f5 	bl	8015118 <Argus_Core_SetSettingsSync>
 8014d2e:	21c0      	movs	r1, #192	@ 0xc0
 8014d30:	4605      	mov	r5, r0
 8014d32:	4638      	mov	r0, r7
 8014d34:	f00a fce2 	bl	801f6fc <Argus_Dev_ClearStatus>
 8014d38:	4628      	mov	r0, r5
 8014d3a:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 8014d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d40:	f06f 0504 	mvn.w	r5, #4
 8014d44:	e7ea      	b.n	8014d1c <Argus_SetCalibrationCrosstalkSequenceSampleTime+0x4c>
 8014d46:	4807      	ldr	r0, [pc, #28]	@ (8014d64 <Argus_SetCalibrationCrosstalkSequenceSampleTime+0x94>)
 8014d48:	f7fe f924 	bl	8012f94 <print>
 8014d4c:	f06f 0506 	mvn.w	r5, #6
 8014d50:	e7e4      	b.n	8014d1c <Argus_SetCalibrationCrosstalkSequenceSampleTime+0x4c>
 8014d52:	4805      	ldr	r0, [pc, #20]	@ (8014d68 <Argus_SetCalibrationCrosstalkSequenceSampleTime+0x98>)
 8014d54:	f7fe f91e 	bl	8012f94 <print>
 8014d58:	f06f 0504 	mvn.w	r5, #4
 8014d5c:	e7de      	b.n	8014d1c <Argus_SetCalibrationCrosstalkSequenceSampleTime+0x4c>
 8014d5e:	bf00      	nop
 8014d60:	0afb8550 	.word	0x0afb8550
 8014d64:	0802ca68 	.word	0x0802ca68
 8014d68:	0802ca40 	.word	0x0802ca40

08014d6c <Argus_GetCalibrationCrosstalkSequenceSampleTime>:
 8014d6c:	b510      	push	{r4, lr}
 8014d6e:	b1c0      	cbz	r0, 8014da2 <Argus_GetCalibrationCrosstalkSequenceSampleTime+0x36>
 8014d70:	4b0f      	ldr	r3, [pc, #60]	@ (8014db0 <Argus_GetCalibrationCrosstalkSequenceSampleTime+0x44>)
 8014d72:	6802      	ldr	r2, [r0, #0]
 8014d74:	429a      	cmp	r2, r3
 8014d76:	d10b      	bne.n	8014d90 <Argus_GetCalibrationCrosstalkSequenceSampleTime+0x24>
 8014d78:	460c      	mov	r4, r1
 8014d7a:	b179      	cbz	r1, 8014d9c <Argus_GetCalibrationCrosstalkSequenceSampleTime+0x30>
 8014d7c:	f500 7042 	add.w	r0, r0, #776	@ 0x308
 8014d80:	f00e f93c 	bl	8022ffc <Argus_Cal_GetCalibrationPtr>
 8014d84:	4603      	mov	r3, r0
 8014d86:	2000      	movs	r0, #0
 8014d88:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8014d8c:	8023      	strh	r3, [r4, #0]
 8014d8e:	bd10      	pop	{r4, pc}
 8014d90:	4808      	ldr	r0, [pc, #32]	@ (8014db4 <Argus_GetCalibrationCrosstalkSequenceSampleTime+0x48>)
 8014d92:	f7fe f8ff 	bl	8012f94 <print>
 8014d96:	f06f 0006 	mvn.w	r0, #6
 8014d9a:	bd10      	pop	{r4, pc}
 8014d9c:	f06f 0004 	mvn.w	r0, #4
 8014da0:	bd10      	pop	{r4, pc}
 8014da2:	4805      	ldr	r0, [pc, #20]	@ (8014db8 <Argus_GetCalibrationCrosstalkSequenceSampleTime+0x4c>)
 8014da4:	f7fe f8f6 	bl	8012f94 <print>
 8014da8:	f06f 0004 	mvn.w	r0, #4
 8014dac:	bd10      	pop	{r4, pc}
 8014dae:	bf00      	nop
 8014db0:	0afb8550 	.word	0x0afb8550
 8014db4:	0802ca68 	.word	0x0802ca68
 8014db8:	0802ca40 	.word	0x0802ca40

08014dbc <Argus_SetCalibrationCrosstalkSequenceAmplitudeThreshold>:
 8014dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014dbe:	f5ad 7d31 	sub.w	sp, sp, #708	@ 0x2c4
 8014dc2:	2800      	cmp	r0, #0
 8014dc4:	d03b      	beq.n	8014e3e <Argus_SetCalibrationCrosstalkSequenceAmplitudeThreshold+0x82>
 8014dc6:	4b21      	ldr	r3, [pc, #132]	@ (8014e4c <Argus_SetCalibrationCrosstalkSequenceAmplitudeThreshold+0x90>)
 8014dc8:	6802      	ldr	r2, [r0, #0]
 8014dca:	429a      	cmp	r2, r3
 8014dcc:	4604      	mov	r4, r0
 8014dce:	d130      	bne.n	8014e32 <Argus_SetCalibrationCrosstalkSequenceAmplitudeThreshold+0x76>
 8014dd0:	460d      	mov	r5, r1
 8014dd2:	f500 7042 	add.w	r0, r0, #776	@ 0x308
 8014dd6:	a901      	add	r1, sp, #4
 8014dd8:	f00e f908 	bl	8022fec <Argus_Cal_GetCalibration>
 8014ddc:	2201      	movs	r2, #1
 8014dde:	4611      	mov	r1, r2
 8014de0:	4620      	mov	r0, r4
 8014de2:	f8ad 52b6 	strh.w	r5, [sp, #694]	@ 0x2b6
 8014de6:	f7fe faf1 	bl	80133cc <CheckStateAndRecoverError>
 8014dea:	4605      	mov	r5, r0
 8014dec:	b960      	cbnz	r0, 8014e08 <Argus_SetCalibrationCrosstalkSequenceAmplitudeThreshold+0x4c>
 8014dee:	f504 70ee 	add.w	r0, r4, #476	@ 0x1dc
 8014df2:	f00c fe31 	bl	8021a58 <Argus_Cfg_GetConfigurationPtr>
 8014df6:	4606      	mov	r6, r0
 8014df8:	b1c0      	cbz	r0, 8014e2c <Argus_SetCalibrationCrosstalkSequenceAmplitudeThreshold+0x70>
 8014dfa:	1d27      	adds	r7, r4, #4
 8014dfc:	21c0      	movs	r1, #192	@ 0xc0
 8014dfe:	4638      	mov	r0, r7
 8014e00:	f00a fbaa 	bl	801f558 <Argus_Dev_SetStatusSync>
 8014e04:	4605      	mov	r5, r0
 8014e06:	b118      	cbz	r0, 8014e10 <Argus_SetCalibrationCrosstalkSequenceAmplitudeThreshold+0x54>
 8014e08:	4628      	mov	r0, r5
 8014e0a:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 8014e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e10:	4631      	mov	r1, r6
 8014e12:	aa01      	add	r2, sp, #4
 8014e14:	4620      	mov	r0, r4
 8014e16:	f000 f97f 	bl	8015118 <Argus_Core_SetSettingsSync>
 8014e1a:	21c0      	movs	r1, #192	@ 0xc0
 8014e1c:	4605      	mov	r5, r0
 8014e1e:	4638      	mov	r0, r7
 8014e20:	f00a fc6c 	bl	801f6fc <Argus_Dev_ClearStatus>
 8014e24:	4628      	mov	r0, r5
 8014e26:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 8014e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e2c:	f06f 0504 	mvn.w	r5, #4
 8014e30:	e7ea      	b.n	8014e08 <Argus_SetCalibrationCrosstalkSequenceAmplitudeThreshold+0x4c>
 8014e32:	4807      	ldr	r0, [pc, #28]	@ (8014e50 <Argus_SetCalibrationCrosstalkSequenceAmplitudeThreshold+0x94>)
 8014e34:	f7fe f8ae 	bl	8012f94 <print>
 8014e38:	f06f 0506 	mvn.w	r5, #6
 8014e3c:	e7e4      	b.n	8014e08 <Argus_SetCalibrationCrosstalkSequenceAmplitudeThreshold+0x4c>
 8014e3e:	4805      	ldr	r0, [pc, #20]	@ (8014e54 <Argus_SetCalibrationCrosstalkSequenceAmplitudeThreshold+0x98>)
 8014e40:	f7fe f8a8 	bl	8012f94 <print>
 8014e44:	f06f 0504 	mvn.w	r5, #4
 8014e48:	e7de      	b.n	8014e08 <Argus_SetCalibrationCrosstalkSequenceAmplitudeThreshold+0x4c>
 8014e4a:	bf00      	nop
 8014e4c:	0afb8550 	.word	0x0afb8550
 8014e50:	0802ca68 	.word	0x0802ca68
 8014e54:	0802ca40 	.word	0x0802ca40

08014e58 <Argus_GetCalibrationCrosstalkSequenceAmplitudeThreshold>:
 8014e58:	b510      	push	{r4, lr}
 8014e5a:	b1c0      	cbz	r0, 8014e8e <Argus_GetCalibrationCrosstalkSequenceAmplitudeThreshold+0x36>
 8014e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8014e9c <Argus_GetCalibrationCrosstalkSequenceAmplitudeThreshold+0x44>)
 8014e5e:	6802      	ldr	r2, [r0, #0]
 8014e60:	429a      	cmp	r2, r3
 8014e62:	d10b      	bne.n	8014e7c <Argus_GetCalibrationCrosstalkSequenceAmplitudeThreshold+0x24>
 8014e64:	460c      	mov	r4, r1
 8014e66:	b179      	cbz	r1, 8014e88 <Argus_GetCalibrationCrosstalkSequenceAmplitudeThreshold+0x30>
 8014e68:	f500 7042 	add.w	r0, r0, #776	@ 0x308
 8014e6c:	f00e f8c6 	bl	8022ffc <Argus_Cal_GetCalibrationPtr>
 8014e70:	4603      	mov	r3, r0
 8014e72:	2000      	movs	r0, #0
 8014e74:	f8b3 32b2 	ldrh.w	r3, [r3, #690]	@ 0x2b2
 8014e78:	8023      	strh	r3, [r4, #0]
 8014e7a:	bd10      	pop	{r4, pc}
 8014e7c:	4808      	ldr	r0, [pc, #32]	@ (8014ea0 <Argus_GetCalibrationCrosstalkSequenceAmplitudeThreshold+0x48>)
 8014e7e:	f7fe f889 	bl	8012f94 <print>
 8014e82:	f06f 0006 	mvn.w	r0, #6
 8014e86:	bd10      	pop	{r4, pc}
 8014e88:	f06f 0004 	mvn.w	r0, #4
 8014e8c:	bd10      	pop	{r4, pc}
 8014e8e:	4805      	ldr	r0, [pc, #20]	@ (8014ea4 <Argus_GetCalibrationCrosstalkSequenceAmplitudeThreshold+0x4c>)
 8014e90:	f7fe f880 	bl	8012f94 <print>
 8014e94:	f06f 0004 	mvn.w	r0, #4
 8014e98:	bd10      	pop	{r4, pc}
 8014e9a:	bf00      	nop
 8014e9c:	0afb8550 	.word	0x0afb8550
 8014ea0:	0802ca68 	.word	0x0802ca68
 8014ea4:	0802ca40 	.word	0x0802ca40

08014ea8 <Argus_SetCalibrationCrosstalkPixel2Pixel>:
 8014ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014eaa:	f5ad 7d31 	sub.w	sp, sp, #708	@ 0x2c4
 8014eae:	2800      	cmp	r0, #0
 8014eb0:	d044      	beq.n	8014f3c <Argus_SetCalibrationCrosstalkPixel2Pixel+0x94>
 8014eb2:	4b25      	ldr	r3, [pc, #148]	@ (8014f48 <Argus_SetCalibrationCrosstalkPixel2Pixel+0xa0>)
 8014eb4:	6802      	ldr	r2, [r0, #0]
 8014eb6:	429a      	cmp	r2, r3
 8014eb8:	4605      	mov	r5, r0
 8014eba:	d139      	bne.n	8014f30 <Argus_SetCalibrationCrosstalkPixel2Pixel+0x88>
 8014ebc:	460c      	mov	r4, r1
 8014ebe:	f500 7042 	add.w	r0, r0, #776	@ 0x308
 8014ec2:	a901      	add	r1, sp, #4
 8014ec4:	f00e f892 	bl	8022fec <Argus_Cal_GetCalibration>
 8014ec8:	6820      	ldr	r0, [r4, #0]
 8014eca:	6861      	ldr	r1, [r4, #4]
 8014ecc:	68a2      	ldr	r2, [r4, #8]
 8014ece:	68e3      	ldr	r3, [r4, #12]
 8014ed0:	f50d 7c14 	add.w	ip, sp, #592	@ 0x250
 8014ed4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014ed8:	8a23      	ldrh	r3, [r4, #16]
 8014eda:	f8ac 3000 	strh.w	r3, [ip]
 8014ede:	2201      	movs	r2, #1
 8014ee0:	4611      	mov	r1, r2
 8014ee2:	4628      	mov	r0, r5
 8014ee4:	f7fe fa72 	bl	80133cc <CheckStateAndRecoverError>
 8014ee8:	4604      	mov	r4, r0
 8014eea:	b960      	cbnz	r0, 8014f06 <Argus_SetCalibrationCrosstalkPixel2Pixel+0x5e>
 8014eec:	f505 70ee 	add.w	r0, r5, #476	@ 0x1dc
 8014ef0:	f00c fdb2 	bl	8021a58 <Argus_Cfg_GetConfigurationPtr>
 8014ef4:	4606      	mov	r6, r0
 8014ef6:	b1c0      	cbz	r0, 8014f2a <Argus_SetCalibrationCrosstalkPixel2Pixel+0x82>
 8014ef8:	1d2f      	adds	r7, r5, #4
 8014efa:	21c0      	movs	r1, #192	@ 0xc0
 8014efc:	4638      	mov	r0, r7
 8014efe:	f00a fb2b 	bl	801f558 <Argus_Dev_SetStatusSync>
 8014f02:	4604      	mov	r4, r0
 8014f04:	b118      	cbz	r0, 8014f0e <Argus_SetCalibrationCrosstalkPixel2Pixel+0x66>
 8014f06:	4620      	mov	r0, r4
 8014f08:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 8014f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f0e:	4631      	mov	r1, r6
 8014f10:	aa01      	add	r2, sp, #4
 8014f12:	4628      	mov	r0, r5
 8014f14:	f000 f900 	bl	8015118 <Argus_Core_SetSettingsSync>
 8014f18:	21c0      	movs	r1, #192	@ 0xc0
 8014f1a:	4604      	mov	r4, r0
 8014f1c:	4638      	mov	r0, r7
 8014f1e:	f00a fbed 	bl	801f6fc <Argus_Dev_ClearStatus>
 8014f22:	4620      	mov	r0, r4
 8014f24:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 8014f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f2a:	f06f 0404 	mvn.w	r4, #4
 8014f2e:	e7ea      	b.n	8014f06 <Argus_SetCalibrationCrosstalkPixel2Pixel+0x5e>
 8014f30:	4806      	ldr	r0, [pc, #24]	@ (8014f4c <Argus_SetCalibrationCrosstalkPixel2Pixel+0xa4>)
 8014f32:	f7fe f82f 	bl	8012f94 <print>
 8014f36:	f06f 0406 	mvn.w	r4, #6
 8014f3a:	e7e4      	b.n	8014f06 <Argus_SetCalibrationCrosstalkPixel2Pixel+0x5e>
 8014f3c:	4804      	ldr	r0, [pc, #16]	@ (8014f50 <Argus_SetCalibrationCrosstalkPixel2Pixel+0xa8>)
 8014f3e:	f7fe f829 	bl	8012f94 <print>
 8014f42:	f06f 0404 	mvn.w	r4, #4
 8014f46:	e7de      	b.n	8014f06 <Argus_SetCalibrationCrosstalkPixel2Pixel+0x5e>
 8014f48:	0afb8550 	.word	0x0afb8550
 8014f4c:	0802ca68 	.word	0x0802ca68
 8014f50:	0802ca40 	.word	0x0802ca40

08014f54 <Argus_GetCalibrationCrosstalkPixel2Pixel>:
 8014f54:	b510      	push	{r4, lr}
 8014f56:	b320      	cbz	r0, 8014fa2 <Argus_GetCalibrationCrosstalkPixel2Pixel+0x4e>
 8014f58:	4b15      	ldr	r3, [pc, #84]	@ (8014fb0 <Argus_GetCalibrationCrosstalkPixel2Pixel+0x5c>)
 8014f5a:	6802      	ldr	r2, [r0, #0]
 8014f5c:	429a      	cmp	r2, r3
 8014f5e:	d117      	bne.n	8014f90 <Argus_GetCalibrationCrosstalkPixel2Pixel+0x3c>
 8014f60:	460c      	mov	r4, r1
 8014f62:	b1d9      	cbz	r1, 8014f9c <Argus_GetCalibrationCrosstalkPixel2Pixel+0x48>
 8014f64:	f500 7042 	add.w	r0, r0, #776	@ 0x308
 8014f68:	f00e f848 	bl	8022ffc <Argus_Cal_GetCalibrationPtr>
 8014f6c:	f8d0 3254 	ldr.w	r3, [r0, #596]	@ 0x254
 8014f70:	f8d0 124c 	ldr.w	r1, [r0, #588]	@ 0x24c
 8014f74:	f8d0 2250 	ldr.w	r2, [r0, #592]	@ 0x250
 8014f78:	f8d0 c258 	ldr.w	ip, [r0, #600]	@ 0x258
 8014f7c:	f8c4 c00c 	str.w	ip, [r4, #12]
 8014f80:	6021      	str	r1, [r4, #0]
 8014f82:	6062      	str	r2, [r4, #4]
 8014f84:	60a3      	str	r3, [r4, #8]
 8014f86:	f8b0 325c 	ldrh.w	r3, [r0, #604]	@ 0x25c
 8014f8a:	8223      	strh	r3, [r4, #16]
 8014f8c:	2000      	movs	r0, #0
 8014f8e:	bd10      	pop	{r4, pc}
 8014f90:	4808      	ldr	r0, [pc, #32]	@ (8014fb4 <Argus_GetCalibrationCrosstalkPixel2Pixel+0x60>)
 8014f92:	f7fd ffff 	bl	8012f94 <print>
 8014f96:	f06f 0006 	mvn.w	r0, #6
 8014f9a:	bd10      	pop	{r4, pc}
 8014f9c:	f06f 0004 	mvn.w	r0, #4
 8014fa0:	bd10      	pop	{r4, pc}
 8014fa2:	4805      	ldr	r0, [pc, #20]	@ (8014fb8 <Argus_GetCalibrationCrosstalkPixel2Pixel+0x64>)
 8014fa4:	f7fd fff6 	bl	8012f94 <print>
 8014fa8:	f06f 0004 	mvn.w	r0, #4
 8014fac:	bd10      	pop	{r4, pc}
 8014fae:	bf00      	nop
 8014fb0:	0afb8550 	.word	0x0afb8550
 8014fb4:	0802ca68 	.word	0x0802ca68
 8014fb8:	0802ca40 	.word	0x0802ca40

08014fbc <ClearStatusCallback>:
 8014fbc:	1d08      	adds	r0, r1, #4
 8014fbe:	21c0      	movs	r1, #192	@ 0xc0
 8014fc0:	f00a bb9c 	b.w	801f6fc <Argus_Dev_ClearStatus>

08014fc4 <SetSettings>:
 8014fc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014fc8:	4606      	mov	r6, r0
 8014fca:	f5ad 7d33 	sub.w	sp, sp, #716	@ 0x2cc
 8014fce:	460f      	mov	r7, r1
 8014fd0:	a803      	add	r0, sp, #12
 8014fd2:	4611      	mov	r1, r2
 8014fd4:	f506 7842 	add.w	r8, r6, #776	@ 0x308
 8014fd8:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8014fdc:	461d      	mov	r5, r3
 8014fde:	f014 fc50 	bl	8029882 <memcpy>
 8014fe2:	a903      	add	r1, sp, #12
 8014fe4:	4640      	mov	r0, r8
 8014fe6:	f00e f80d 	bl	8023004 <Argus_Cal_ComposeCalibrationData>
 8014fea:	4604      	mov	r4, r0
 8014fec:	b120      	cbz	r0, 8014ff8 <SetSettings+0x34>
 8014fee:	4620      	mov	r0, r4
 8014ff0:	f50d 7d33 	add.w	sp, sp, #716	@ 0x2cc
 8014ff4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ff8:	4638      	mov	r0, r7
 8014ffa:	f00c fd2f 	bl	8021a5c <Argus_Cfg_CheckConfiguration>
 8014ffe:	4604      	mov	r4, r0
 8015000:	2800      	cmp	r0, #0
 8015002:	d1f4      	bne.n	8014fee <SetSettings+0x2a>
 8015004:	a803      	add	r0, sp, #12
 8015006:	f00e f915 	bl	8023234 <Argus_Cal_CheckCalibration>
 801500a:	4604      	mov	r4, r0
 801500c:	2800      	cmp	r0, #0
 801500e:	d1ee      	bne.n	8014fee <SetSettings+0x2a>
 8015010:	2d00      	cmp	r5, #0
 8015012:	d143      	bne.n	801509c <SetSettings+0xd8>
 8015014:	1d35      	adds	r5, r6, #4
 8015016:	21c0      	movs	r1, #192	@ 0xc0
 8015018:	4628      	mov	r0, r5
 801501a:	f00a fa9d 	bl	801f558 <Argus_Dev_SetStatusSync>
 801501e:	4604      	mov	r4, r0
 8015020:	2800      	cmp	r0, #0
 8015022:	d1e4      	bne.n	8014fee <SetSettings+0x2a>
 8015024:	4639      	mov	r1, r7
 8015026:	f506 70ee 	add.w	r0, r6, #476	@ 0x1dc
 801502a:	f00c fd4d 	bl	8021ac8 <Argus_Cfg_CopyConfiguration>
 801502e:	a903      	add	r1, sp, #12
 8015030:	4681      	mov	r9, r0
 8015032:	4640      	mov	r0, r8
 8015034:	f00e f9be 	bl	80233b4 <Argus_Cal_CopyCalibration>
 8015038:	4649      	mov	r1, r9
 801503a:	4602      	mov	r2, r0
 801503c:	4640      	mov	r0, r8
 801503e:	9201      	str	r2, [sp, #4]
 8015040:	f00e fce8 	bl	8023a14 <Argus_Cal_Update>
 8015044:	1e07      	subs	r7, r0, #0
 8015046:	db5e      	blt.n	8015106 <SetSettings+0x142>
 8015048:	9a01      	ldr	r2, [sp, #4]
 801504a:	4649      	mov	r1, r9
 801504c:	4628      	mov	r0, r5
 801504e:	f00a fdf9 	bl	801fc44 <Argus_Dev_Update>
 8015052:	1e07      	subs	r7, r0, #0
 8015054:	9a01      	ldr	r2, [sp, #4]
 8015056:	db56      	blt.n	8015106 <SetSettings+0x142>
 8015058:	4649      	mov	r1, r9
 801505a:	f606 307c 	addw	r0, r6, #2940	@ 0xb7c
 801505e:	9201      	str	r2, [sp, #4]
 8015060:	f003 fa7e 	bl	8018560 <Argus_Eval_Update>
 8015064:	4628      	mov	r0, r5
 8015066:	f00b fa3f 	bl	80204e8 <Argus_Dev_GetModule>
 801506a:	4607      	mov	r7, r0
 801506c:	4628      	mov	r0, r5
 801506e:	f00b fa3d 	bl	80204ec <Argus_Dev_GetChipID>
 8015072:	9a01      	ldr	r2, [sp, #4]
 8015074:	4601      	mov	r1, r0
 8015076:	4638      	mov	r0, r7
 8015078:	f012 f9de 	bl	8027438 <Argus_Cal_WriteCalibrationToNVM>
 801507c:	1e07      	subs	r7, r0, #0
 801507e:	db42      	blt.n	8015106 <SetSettings+0x142>
 8015080:	4633      	mov	r3, r6
 8015082:	4a24      	ldr	r2, [pc, #144]	@ (8015114 <SetSettings+0x150>)
 8015084:	2101      	movs	r1, #1
 8015086:	4628      	mov	r0, r5
 8015088:	f00b fa36 	bl	80204f8 <Argus_Dev_Apply>
 801508c:	1e06      	subs	r6, r0, #0
 801508e:	daae      	bge.n	8014fee <SetSettings+0x2a>
 8015090:	21c0      	movs	r1, #192	@ 0xc0
 8015092:	4628      	mov	r0, r5
 8015094:	f00a fb32 	bl	801f6fc <Argus_Dev_ClearStatus>
 8015098:	4634      	mov	r4, r6
 801509a:	e7a8      	b.n	8014fee <SetSettings+0x2a>
 801509c:	4639      	mov	r1, r7
 801509e:	f506 70ee 	add.w	r0, r6, #476	@ 0x1dc
 80150a2:	f00c fd11 	bl	8021ac8 <Argus_Cfg_CopyConfiguration>
 80150a6:	a903      	add	r1, sp, #12
 80150a8:	4681      	mov	r9, r0
 80150aa:	4640      	mov	r0, r8
 80150ac:	f00e f982 	bl	80233b4 <Argus_Cal_CopyCalibration>
 80150b0:	4649      	mov	r1, r9
 80150b2:	4602      	mov	r2, r0
 80150b4:	4607      	mov	r7, r0
 80150b6:	4640      	mov	r0, r8
 80150b8:	f00e fcac 	bl	8023a14 <Argus_Cal_Update>
 80150bc:	1e04      	subs	r4, r0, #0
 80150be:	db96      	blt.n	8014fee <SetSettings+0x2a>
 80150c0:	1d35      	adds	r5, r6, #4
 80150c2:	463a      	mov	r2, r7
 80150c4:	4649      	mov	r1, r9
 80150c6:	4628      	mov	r0, r5
 80150c8:	f00a fdbc 	bl	801fc44 <Argus_Dev_Update>
 80150cc:	1e04      	subs	r4, r0, #0
 80150ce:	db8e      	blt.n	8014fee <SetSettings+0x2a>
 80150d0:	463a      	mov	r2, r7
 80150d2:	4649      	mov	r1, r9
 80150d4:	f606 307c 	addw	r0, r6, #2940	@ 0xb7c
 80150d8:	f003 fa42 	bl	8018560 <Argus_Eval_Update>
 80150dc:	4628      	mov	r0, r5
 80150de:	f00b fa03 	bl	80204e8 <Argus_Dev_GetModule>
 80150e2:	4604      	mov	r4, r0
 80150e4:	4628      	mov	r0, r5
 80150e6:	f00b fa01 	bl	80204ec <Argus_Dev_GetChipID>
 80150ea:	463a      	mov	r2, r7
 80150ec:	4601      	mov	r1, r0
 80150ee:	4620      	mov	r0, r4
 80150f0:	f012 f9a2 	bl	8027438 <Argus_Cal_WriteCalibrationToNVM>
 80150f4:	1e07      	subs	r7, r0, #0
 80150f6:	db06      	blt.n	8015106 <SetSettings+0x142>
 80150f8:	2101      	movs	r1, #1
 80150fa:	4628      	mov	r0, r5
 80150fc:	f00b fafc 	bl	80206f8 <Argus_Dev_ApplySync>
 8015100:	ea00 74e0 	and.w	r4, r0, r0, asr #31
 8015104:	e773      	b.n	8014fee <SetSettings+0x2a>
 8015106:	21c0      	movs	r1, #192	@ 0xc0
 8015108:	4628      	mov	r0, r5
 801510a:	f00a faf7 	bl	801f6fc <Argus_Dev_ClearStatus>
 801510e:	463c      	mov	r4, r7
 8015110:	e76d      	b.n	8014fee <SetSettings+0x2a>
 8015112:	bf00      	nop
 8015114:	08014fbd 	.word	0x08014fbd

08015118 <Argus_Core_SetSettingsSync>:
 8015118:	2301      	movs	r3, #1
 801511a:	f7ff bf53 	b.w	8014fc4 <SetSettings>
 801511e:	bf00      	nop

08015120 <RunSequence>:
 8015120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015124:	1d07      	adds	r7, r0, #4
 8015126:	f5ad 7d7b 	sub.w	sp, sp, #1004	@ 0x3ec
 801512a:	4604      	mov	r4, r0
 801512c:	4688      	mov	r8, r1
 801512e:	4638      	mov	r0, r7
 8015130:	21c3      	movs	r1, #195	@ 0xc3
 8015132:	4616      	mov	r6, r2
 8015134:	4699      	mov	r9, r3
 8015136:	f00a fa0f 	bl	801f558 <Argus_Dev_SetStatusSync>
 801513a:	bb18      	cbnz	r0, 8015184 <RunSequence+0x64>
 801513c:	a901      	add	r1, sp, #4
 801513e:	f504 70ee 	add.w	r0, r4, #476	@ 0x1dc
 8015142:	f00c fc81 	bl	8021a48 <Argus_Cfg_GetConfiguration>
 8015146:	a94b      	add	r1, sp, #300	@ 0x12c
 8015148:	f504 7042 	add.w	r0, r4, #776	@ 0x308
 801514c:	f00d ff4e 	bl	8022fec <Argus_Cal_GetCalibration>
 8015150:	464b      	mov	r3, r9
 8015152:	aa4b      	add	r2, sp, #300	@ 0x12c
 8015154:	a901      	add	r1, sp, #4
 8015156:	4620      	mov	r0, r4
 8015158:	47c0      	blx	r8
 801515a:	1e05      	subs	r5, r0, #0
 801515c:	db23      	blt.n	80151a6 <RunSequence+0x86>
 801515e:	4620      	mov	r0, r4
 8015160:	aa4b      	add	r2, sp, #300	@ 0x12c
 8015162:	a901      	add	r1, sp, #4
 8015164:	f7ff ffd8 	bl	8015118 <Argus_Core_SetSettingsSync>
 8015168:	1e04      	subs	r4, r0, #0
 801516a:	db16      	blt.n	801519a <RunSequence+0x7a>
 801516c:	21c3      	movs	r1, #195	@ 0xc3
 801516e:	4638      	mov	r0, r7
 8015170:	f00a fac4 	bl	801f6fc <Argus_Dev_ClearStatus>
 8015174:	2d00      	cmp	r5, #0
 8015176:	bf08      	it	eq
 8015178:	4625      	moveq	r5, r4
 801517a:	4628      	mov	r0, r5
 801517c:	f50d 7d7b 	add.w	sp, sp, #1004	@ 0x3ec
 8015180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015184:	4602      	mov	r2, r0
 8015186:	4631      	mov	r1, r6
 8015188:	4811      	ldr	r0, [pc, #68]	@ (80151d0 <RunSequence+0xb0>)
 801518a:	f7fd ff03 	bl	8012f94 <print>
 801518e:	2502      	movs	r5, #2
 8015190:	4628      	mov	r0, r5
 8015192:	f50d 7d7b 	add.w	sp, sp, #1004	@ 0x3ec
 8015196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801519a:	4622      	mov	r2, r4
 801519c:	4631      	mov	r1, r6
 801519e:	480d      	ldr	r0, [pc, #52]	@ (80151d4 <RunSequence+0xb4>)
 80151a0:	f7fd fef8 	bl	8012f94 <print>
 80151a4:	e7e2      	b.n	801516c <RunSequence+0x4c>
 80151a6:	462a      	mov	r2, r5
 80151a8:	4631      	mov	r1, r6
 80151aa:	480b      	ldr	r0, [pc, #44]	@ (80151d8 <RunSequence+0xb8>)
 80151ac:	f7fd fef2 	bl	8012f94 <print>
 80151b0:	4620      	mov	r0, r4
 80151b2:	aa4b      	add	r2, sp, #300	@ 0x12c
 80151b4:	a901      	add	r1, sp, #4
 80151b6:	f7ff ffaf 	bl	8015118 <Argus_Core_SetSettingsSync>
 80151ba:	1e04      	subs	r4, r0, #0
 80151bc:	dbed      	blt.n	801519a <RunSequence+0x7a>
 80151be:	21c3      	movs	r1, #195	@ 0xc3
 80151c0:	4638      	mov	r0, r7
 80151c2:	f00a fa9b 	bl	801f6fc <Argus_Dev_ClearStatus>
 80151c6:	4628      	mov	r0, r5
 80151c8:	f50d 7d7b 	add.w	sp, sp, #1004	@ 0x3ec
 80151cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151d0:	0802cf10 	.word	0x0802cf10
 80151d4:	0802cf68 	.word	0x0802cf68
 80151d8:	0802cf44 	.word	0x0802cf44

080151dc <XtalkCal_Sequence>:
 80151dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151e0:	ed2d 8b02 	vpush	{d8}
 80151e4:	f2ad 5d9c 	subw	sp, sp, #1436	@ 0x59c
 80151e8:	9008      	str	r0, [sp, #32]
 80151ea:	920f      	str	r2, [sp, #60]	@ 0x3c
 80151ec:	a8aa      	add	r0, sp, #680	@ 0x2a8
 80151ee:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80151f2:	910c      	str	r1, [sp, #48]	@ 0x30
 80151f4:	f014 fb45 	bl	8029882 <memcpy>
 80151f8:	2300      	movs	r3, #0
 80151fa:	f88d 3354 	strb.w	r3, [sp, #852]	@ 0x354
 80151fe:	23ff      	movs	r3, #255	@ 0xff
 8015200:	f88d 339c 	strb.w	r3, [sp, #924]	@ 0x39c
 8015204:	f89d 33b0 	ldrb.w	r3, [sp, #944]	@ 0x3b0
 8015208:	f88d 33ae 	strb.w	r3, [sp, #942]	@ 0x3ae
 801520c:	f89d 3380 	ldrb.w	r3, [sp, #896]	@ 0x380
 8015210:	2b01      	cmp	r3, #1
 8015212:	bf1c      	itt	ne
 8015214:	f8bd 33ac 	ldrhne.w	r3, [sp, #940]	@ 0x3ac
 8015218:	f8ad 33a8 	strhne.w	r3, [sp, #936]	@ 0x3a8
 801521c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015220:	2100      	movs	r1, #0
 8015222:	a82a      	add	r0, sp, #168	@ 0xa8
 8015224:	f014 fa95 	bl	8029752 <memset>
 8015228:	9b08      	ldr	r3, [sp, #32]
 801522a:	3304      	adds	r3, #4
 801522c:	4618      	mov	r0, r3
 801522e:	ee08 3a90 	vmov	s17, r3
 8015232:	f00b f95f 	bl	80204f4 <Argus_Dev_GetLaserType>
 8015236:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8015238:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801523a:	4603      	mov	r3, r0
 801523c:	4622      	mov	r2, r4
 801523e:	4631      	mov	r1, r6
 8015240:	a82a      	add	r0, sp, #168	@ 0xa8
 8015242:	f010 f9d3 	bl	80255ec <Argus_Cal_GetInternalXtalkVectorTable>
 8015246:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801524a:	2100      	movs	r1, #0
 801524c:	a86a      	add	r0, sp, #424	@ 0x1a8
 801524e:	f014 fa80 	bl	8029752 <memset>
 8015252:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 8015256:	49c3      	ldr	r1, [pc, #780]	@ (8015564 <XtalkCal_Sequence+0x388>)
 8015258:	f896 40ac 	ldrb.w	r4, [r6, #172]	@ 0xac
 801525c:	9410      	str	r4, [sp, #64]	@ 0x40
 801525e:	4625      	mov	r5, r4
 8015260:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015264:	fba3 1401 	umull	r1, r4, r3, r1
 8015268:	fb03 f202 	mul.w	r2, r3, r2
 801526c:	0c08      	lsrs	r0, r1, #16
 801526e:	f3c1 33c0 	ubfx	r3, r1, #15, #1
 8015272:	6871      	ldr	r1, [r6, #4]
 8015274:	fbb2 f2f1 	udiv	r2, r2, r1
 8015278:	1e69      	subs	r1, r5, #1
 801527a:	b2c9      	uxtb	r1, r1
 801527c:	2a01      	cmp	r2, #1
 801527e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8015282:	910d      	str	r1, [sp, #52]	@ 0x34
 8015284:	4611      	mov	r1, r2
 8015286:	bf38      	it	cc
 8015288:	2101      	movcc	r1, #1
 801528a:	4403      	add	r3, r0
 801528c:	4608      	mov	r0, r1
 801528e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8015292:	4288      	cmp	r0, r1
 8015294:	bf28      	it	cs
 8015296:	4608      	movcs	r0, r1
 8015298:	9007      	str	r0, [sp, #28]
 801529a:	2d00      	cmp	r5, #0
 801529c:	f040 83ae 	bne.w	80159fc <XtalkCal_Sequence+0x820>
 80152a0:	0402      	lsls	r2, r0, #16
 80152a2:	4251      	negs	r1, r2
 80152a4:	9204      	str	r2, [sp, #16]
 80152a6:	9105      	str	r1, [sp, #20]
 80152a8:	9200      	str	r2, [sp, #0]
 80152aa:	4aaf      	ldr	r2, [pc, #700]	@ (8015568 <XtalkCal_Sequence+0x38c>)
 80152ac:	fba2 1203 	umull	r1, r2, r2, r3
 80152b0:	0992      	lsrs	r2, r2, #6
 80152b2:	4611      	mov	r1, r2
 80152b4:	9214      	str	r2, [sp, #80]	@ 0x50
 80152b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80152ba:	fb02 3311 	mls	r3, r2, r1, r3
 80152be:	fb02 f303 	mul.w	r3, r2, r3
 80152c2:	9315      	str	r3, [sp, #84]	@ 0x54
 80152c4:	9b00      	ldr	r3, [sp, #0]
 80152c6:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 80152ca:	43d2      	mvns	r2, r2
 80152cc:	9203      	str	r2, [sp, #12]
 80152ce:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80152d2:	ea32 0223 	bics.w	r2, r2, r3, asr #32
 80152d6:	bf28      	it	cs
 80152d8:	460a      	movcs	r2, r1
 80152da:	2300      	movs	r3, #0
 80152dc:	930e      	str	r3, [sp, #56]	@ 0x38
 80152de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80152e0:	9202      	str	r2, [sp, #8]
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	f040 8476 	bne.w	8015bd4 <XtalkCal_Sequence+0x9f8>
 80152e8:	9e08      	ldr	r6, [sp, #32]
 80152ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80152ec:	a9aa      	add	r1, sp, #680	@ 0x2a8
 80152ee:	4630      	mov	r0, r6
 80152f0:	f7ff ff12 	bl	8015118 <Argus_Core_SetSettingsSync>
 80152f4:	2800      	cmp	r0, #0
 80152f6:	f2c0 81ad 	blt.w	8015654 <XtalkCal_Sequence+0x478>
 80152fa:	f44f 72e4 	mov.w	r2, #456	@ 0x1c8
 80152fe:	2100      	movs	r1, #0
 8015300:	a8f4      	add	r0, sp, #976	@ 0x3d0
 8015302:	f014 fa26 	bl	8029752 <memset>
 8015306:	ee18 0a90 	vmov	r0, s17
 801530a:	a9f7      	add	r1, sp, #988	@ 0x3dc
 801530c:	f00b f804 	bl	8020318 <Argus_Dev_GetFrameConfig>
 8015310:	2240      	movs	r2, #64	@ 0x40
 8015312:	2100      	movs	r1, #0
 8015314:	a81a      	add	r0, sp, #104	@ 0x68
 8015316:	f014 fa1c 	bl	8029752 <memset>
 801531a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801531e:	2100      	movs	r1, #0
 8015320:	a86a      	add	r0, sp, #424	@ 0x1a8
 8015322:	f014 fa16 	bl	8029752 <memset>
 8015326:	a917      	add	r1, sp, #92	@ 0x5c
 8015328:	a816      	add	r0, sp, #88	@ 0x58
 801532a:	f7f1 fcc1 	bl	8006cb0 <Timer_GetCounterValue>
 801532e:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8015330:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015332:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8015334:	9412      	str	r4, [sp, #72]	@ 0x48
 8015336:	191a      	adds	r2, r3, r4
 8015338:	4b8c      	ldr	r3, [pc, #560]	@ (801556c <XtalkCal_Sequence+0x390>)
 801533a:	950a      	str	r5, [sp, #40]	@ 0x28
 801533c:	429a      	cmp	r2, r3
 801533e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8015340:	eb03 0105 	add.w	r1, r3, r5
 8015344:	f5a2 2374 	sub.w	r3, r2, #999424	@ 0xf4000
 8015348:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 801534c:	bf88      	it	hi
 801534e:	461a      	movhi	r2, r3
 8015350:	f101 0301 	add.w	r3, r1, #1
 8015354:	bf98      	it	ls
 8015356:	460b      	movls	r3, r1
 8015358:	4294      	cmp	r4, r2
 801535a:	9213      	str	r2, [sp, #76]	@ 0x4c
 801535c:	bf8c      	ite	hi
 801535e:	2200      	movhi	r2, #0
 8015360:	2201      	movls	r2, #1
 8015362:	42ab      	cmp	r3, r5
 8015364:	9311      	str	r3, [sp, #68]	@ 0x44
 8015366:	bf8c      	ite	hi
 8015368:	2301      	movhi	r3, #1
 801536a:	2300      	movls	r3, #0
 801536c:	bf08      	it	eq
 801536e:	4613      	moveq	r3, r2
 8015370:	9309      	str	r3, [sp, #36]	@ 0x24
 8015372:	f206 73cc 	addw	r3, r6, #1996	@ 0x7cc
 8015376:	ee08 3a10 	vmov	s16, r3
 801537a:	2300      	movs	r3, #0
 801537c:	9306      	str	r3, [sp, #24]
 801537e:	ee18 0a10 	vmov	r0, s16
 8015382:	a9f4      	add	r1, sp, #976	@ 0x3d0
 8015384:	f001 ff94 	bl	80172b0 <Argus_Measurement_TriggerSync>
 8015388:	2800      	cmp	r0, #0
 801538a:	f2c0 8163 	blt.w	8015654 <XtalkCal_Sequence+0x478>
 801538e:	f8bd 33ec 	ldrh.w	r3, [sp, #1004]	@ 0x3ec
 8015392:	f8bd 73ee 	ldrh.w	r7, [sp, #1006]	@ 0x3ee
 8015396:	9a08      	ldr	r2, [sp, #32]
 8015398:	fb03 f707 	mul.w	r7, r3, r7
 801539c:	099b      	lsrs	r3, r3, #6
 801539e:	2b01      	cmp	r3, #1
 80153a0:	bf38      	it	cc
 80153a2:	2301      	movcc	r3, #1
 80153a4:	2b20      	cmp	r3, #32
 80153a6:	bf94      	ite	ls
 80153a8:	18d2      	addls	r2, r2, r3
 80153aa:	3220      	addhi	r2, #32
 80153ac:	2400      	movs	r4, #0
 80153ae:	f892 3307 	ldrb.w	r3, [r2, #775]	@ 0x307
 80153b2:	9301      	str	r3, [sp, #4]
 80153b4:	ab6a      	add	r3, sp, #424	@ 0x1a8
 80153b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80153b8:	461d      	mov	r5, r3
 80153ba:	4626      	mov	r6, r4
 80153bc:	e9cd 6616 	strd	r6, r6, [sp, #88]	@ 0x58
 80153c0:	e9cd 6618 	strd	r6, r6, [sp, #96]	@ 0x60
 80153c4:	f04f 0a00 	mov.w	sl, #0
 80153c8:	fa5f f884 	uxtb.w	r8, r4
 80153cc:	f10d 0b58 	add.w	fp, sp, #88	@ 0x58
 80153d0:	46d1      	mov	r9, sl
 80153d2:	fa5f f289 	uxtb.w	r2, r9
 80153d6:	4641      	mov	r1, r8
 80153d8:	a8f4      	add	r0, sp, #976	@ 0x3d0
 80153da:	f004 fc13 	bl	8019c04 <Argus_Eval_GetPixelSample>
 80153de:	f109 0901 	add.w	r9, r9, #1
 80153e2:	f410 0f40 	tst.w	r0, #12582912	@ 0xc00000
 80153e6:	bf18      	it	ne
 80153e8:	f04f 0a01 	movne.w	sl, #1
 80153ec:	f1b9 0f04 	cmp.w	r9, #4
 80153f0:	f84b 0b04 	str.w	r0, [fp], #4
 80153f4:	d1ed      	bne.n	80153d2 <XtalkCal_Sequence+0x1f6>
 80153f6:	f1ba 0f00 	cmp.w	sl, #0
 80153fa:	f040 8098 	bne.w	801552e <XtalkCal_Sequence+0x352>
 80153fe:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015400:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8015402:	eba3 0c02 	sub.w	ip, r3, r2
 8015406:	9b01      	ldr	r3, [sp, #4]
 8015408:	fb03 fc0c 	mul.w	ip, r3, ip
 801540c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8015410:	2f00      	cmp	r7, #0
 8015412:	f000 8125 	beq.w	8015660 <XtalkCal_Sequence+0x484>
 8015416:	ea8c 70ec 	eor.w	r0, ip, ip, asr #31
 801541a:	eba0 70ec 	sub.w	r0, r0, ip, asr #31
 801541e:	42b8      	cmp	r0, r7
 8015420:	f240 8204 	bls.w	801582c <XtalkCal_Sequence+0x650>
 8015424:	4639      	mov	r1, r7
 8015426:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801542a:	468e      	mov	lr, r1
 801542c:	0049      	lsls	r1, r1, #1
 801542e:	4281      	cmp	r1, r0
 8015430:	4613      	mov	r3, r2
 8015432:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8015436:	d3f8      	bcc.n	801542a <XtalkCal_Sequence+0x24e>
 8015438:	2a00      	cmp	r2, #0
 801543a:	f040 81a4 	bne.w	8015786 <XtalkCal_Sequence+0x5aa>
 801543e:	ea9c 0f07 	teq	ip, r7
 8015442:	f100 829b 	bmi.w	801597c <XtalkCal_Sequence+0x7a0>
 8015446:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801544a:	f8dd e00c 	ldr.w	lr, [sp, #12]
 801544e:	4699      	mov	r9, r3
 8015450:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8015452:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8015454:	eba2 0c01 	sub.w	ip, r2, r1
 8015458:	9a01      	ldr	r2, [sp, #4]
 801545a:	fb02 fc0c 	mul.w	ip, r2, ip
 801545e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8015462:	ea8c 70ec 	eor.w	r0, ip, ip, asr #31
 8015466:	eba0 70ec 	sub.w	r0, r0, ip, asr #31
 801546a:	42b8      	cmp	r0, r7
 801546c:	f240 81e5 	bls.w	801583a <XtalkCal_Sequence+0x65e>
 8015470:	4639      	mov	r1, r7
 8015472:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8015476:	468b      	mov	fp, r1
 8015478:	0049      	lsls	r1, r1, #1
 801547a:	4281      	cmp	r1, r0
 801547c:	4692      	mov	sl, r2
 801547e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8015482:	d3f8      	bcc.n	8015476 <XtalkCal_Sequence+0x29a>
 8015484:	2a00      	cmp	r2, #0
 8015486:	f040 8157 	bne.w	8015738 <XtalkCal_Sequence+0x55c>
 801548a:	ea97 0f0c 	teq	r7, ip
 801548e:	f100 827c 	bmi.w	801598a <XtalkCal_Sequence+0x7ae>
 8015492:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 8015496:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801549a:	4650      	mov	r0, sl
 801549c:	f1b9 0f00 	cmp.w	r9, #0
 80154a0:	da00      	bge.n	80154a4 <XtalkCal_Sequence+0x2c8>
 80154a2:	425b      	negs	r3, r3
 80154a4:	9a00      	ldr	r2, [sp, #0]
 80154a6:	2a00      	cmp	r2, #0
 80154a8:	f2c0 8122 	blt.w	80156f0 <XtalkCal_Sequence+0x514>
 80154ac:	9a04      	ldr	r2, [sp, #16]
 80154ae:	4293      	cmp	r3, r2
 80154b0:	f240 81db 	bls.w	801586a <XtalkCal_Sequence+0x68e>
 80154b4:	9902      	ldr	r1, [sp, #8]
 80154b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80154ba:	0049      	lsls	r1, r1, #1
 80154bc:	4299      	cmp	r1, r3
 80154be:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80154c2:	d3fa      	bcc.n	80154ba <XtalkCal_Sequence+0x2de>
 80154c4:	2a00      	cmp	r2, #0
 80154c6:	f040 811a 	bne.w	80156fe <XtalkCal_Sequence+0x522>
 80154ca:	f1be 0f00 	cmp.w	lr, #0
 80154ce:	bfac      	ite	ge
 80154d0:	f06f 4900 	mvnge.w	r9, #2147483648	@ 0x80000000
 80154d4:	f04f 4900 	movlt.w	r9, #2147483648	@ 0x80000000
 80154d8:	686b      	ldr	r3, [r5, #4]
 80154da:	2800      	cmp	r0, #0
 80154dc:	444b      	add	r3, r9
 80154de:	606b      	str	r3, [r5, #4]
 80154e0:	da01      	bge.n	80154e6 <XtalkCal_Sequence+0x30a>
 80154e2:	f1ca 0a00 	rsb	sl, sl, #0
 80154e6:	9b00      	ldr	r3, [sp, #0]
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	f2c0 80d2 	blt.w	8015692 <XtalkCal_Sequence+0x4b6>
 80154ee:	9b04      	ldr	r3, [sp, #16]
 80154f0:	459a      	cmp	sl, r3
 80154f2:	f240 81c4 	bls.w	801587e <XtalkCal_Sequence+0x6a2>
 80154f6:	9a02      	ldr	r2, [sp, #8]
 80154f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80154fc:	0052      	lsls	r2, r2, #1
 80154fe:	4552      	cmp	r2, sl
 8015500:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015504:	d3fa      	bcc.n	80154fc <XtalkCal_Sequence+0x320>
 8015506:	2b00      	cmp	r3, #0
 8015508:	f040 80ca 	bne.w	80156a0 <XtalkCal_Sequence+0x4c4>
 801550c:	f1bc 0f00 	cmp.w	ip, #0
 8015510:	bfac      	ite	ge
 8015512:	f06f 4100 	mvnge.w	r1, #2147483648	@ 0x80000000
 8015516:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 801551a:	ab1a      	add	r3, sp, #104	@ 0x68
 801551c:	aa1a      	add	r2, sp, #104	@ 0x68
 801551e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8015522:	3301      	adds	r3, #1
 8015524:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
 8015528:	682b      	ldr	r3, [r5, #0]
 801552a:	4419      	add	r1, r3
 801552c:	6029      	str	r1, [r5, #0]
 801552e:	3401      	adds	r4, #1
 8015530:	2c20      	cmp	r4, #32
 8015532:	f105 0508 	add.w	r5, r5, #8
 8015536:	f47f af41 	bne.w	80153bc <XtalkCal_Sequence+0x1e0>
 801553a:	a917      	add	r1, sp, #92	@ 0x5c
 801553c:	a816      	add	r0, sp, #88	@ 0x58
 801553e:	f7f1 fbb7 	bl	8006cb0 <Timer_GetCounterValue>
 8015542:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015544:	e9dd 1316 	ldrd	r1, r3, [sp, #88]	@ 0x58
 8015548:	2a00      	cmp	r2, #0
 801554a:	f000 81a1 	beq.w	8015890 <XtalkCal_Sequence+0x6b4>
 801554e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015550:	4291      	cmp	r1, r2
 8015552:	f000 8221 	beq.w	8015998 <XtalkCal_Sequence+0x7bc>
 8015556:	bf8c      	ite	hi
 8015558:	2201      	movhi	r2, #1
 801555a:	2200      	movls	r2, #0
 801555c:	2a00      	cmp	r2, #0
 801555e:	f040 819e 	bne.w	801589e <XtalkCal_Sequence+0x6c2>
 8015562:	e005      	b.n	8015570 <XtalkCal_Sequence+0x394>
 8015564:	0001199a 	.word	0x0001199a
 8015568:	10624dd3 	.word	0x10624dd3
 801556c:	000f423f 	.word	0x000f423f
 8015570:	9e07      	ldr	r6, [sp, #28]
 8015572:	f8dd e000 	ldr.w	lr, [sp]
 8015576:	9d02      	ldr	r5, [sp, #8]
 8015578:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801557a:	f10d 0266 	add.w	r2, sp, #102	@ 0x66
 801557e:	af6b      	add	r7, sp, #428	@ 0x1ac
 8015580:	f10d 0ca6 	add.w	ip, sp, #166	@ 0xa6
 8015584:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8015588:	2b00      	cmp	r3, #0
 801558a:	d043      	beq.n	8015614 <XtalkCal_Sequence+0x438>
 801558c:	429e      	cmp	r6, r3
 801558e:	d041      	beq.n	8015614 <XtalkCal_Sequence+0x438>
 8015590:	ea5f 4803 	movs.w	r8, r3, lsl #16
 8015594:	f100 81af 	bmi.w	80158f6 <XtalkCal_Sequence+0x71a>
 8015598:	45a8      	cmp	r8, r5
 801559a:	4641      	mov	r1, r8
 801559c:	f080 8305 	bcs.w	8015baa <XtalkCal_Sequence+0x9ce>
 80155a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80155a4:	4689      	mov	r9, r1
 80155a6:	0049      	lsls	r1, r1, #1
 80155a8:	42a9      	cmp	r1, r5
 80155aa:	4618      	mov	r0, r3
 80155ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80155b0:	d3f8      	bcc.n	80155a4 <XtalkCal_Sequence+0x3c8>
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	f040 81af 	bne.w	8015916 <XtalkCal_Sequence+0x73a>
 80155b8:	ea98 0f0e 	teq	r8, lr
 80155bc:	6863      	ldr	r3, [r4, #4]
 80155be:	f100 83cb 	bmi.w	8015d58 <XtalkCal_Sequence+0xb7c>
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	f2c0 81f4 	blt.w	80159b0 <XtalkCal_Sequence+0x7d4>
 80155c8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80155cc:	4698      	mov	r8, r3
 80155ce:	4681      	mov	r9, r0
 80155d0:	fba8 3809 	umull	r3, r8, r8, r9
 80155d4:	0c19      	lsrs	r1, r3, #16
 80155d6:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80155da:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 80155de:	440b      	add	r3, r1
 80155e0:	2100      	movs	r1, #0
 80155e2:	6063      	str	r3, [r4, #4]
 80155e4:	f857 3c04 	ldr.w	r3, [r7, #-4]
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	f2c0 816f 	blt.w	80158cc <XtalkCal_Sequence+0x6f0>
 80155ee:	2800      	cmp	r0, #0
 80155f0:	f2c0 8171 	blt.w	80158d6 <XtalkCal_Sequence+0x6fa>
 80155f4:	17d8      	asrs	r0, r3, #31
 80155f6:	fb03 f101 	mul.w	r1, r3, r1
 80155fa:	fb09 1100 	mla	r1, r9, r0, r1
 80155fe:	fba3 3909 	umull	r3, r9, r3, r9
 8015602:	0c18      	lsrs	r0, r3, #16
 8015604:	4449      	add	r1, r9
 8015606:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801560a:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 801560e:	4403      	add	r3, r0
 8015610:	f847 3c04 	str.w	r3, [r7, #-4]
 8015614:	4562      	cmp	r2, ip
 8015616:	f104 0408 	add.w	r4, r4, #8
 801561a:	f107 0708 	add.w	r7, r7, #8
 801561e:	d1b1      	bne.n	8015584 <XtalkCal_Sequence+0x3a8>
 8015620:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	@ 0x38
 8015624:	2400      	movs	r4, #0
 8015626:	f50d 7ad4 	add.w	sl, sp, #424	@ 0x1a8
 801562a:	4627      	mov	r7, r4
 801562c:	ea4f 06c8 	mov.w	r6, r8, lsl #3
 8015630:	f8b9 52b2 	ldrh.w	r5, [r9, #690]	@ 0x2b2
 8015634:	2d00      	cmp	r5, #0
 8015636:	f000 81fe 	beq.w	8015a36 <XtalkCal_Sequence+0x85a>
 801563a:	f89d 32b9 	ldrb.w	r3, [sp, #697]	@ 0x2b9
 801563e:	97f6      	str	r7, [sp, #984]	@ 0x3d8
 8015640:	2b01      	cmp	r3, #1
 8015642:	e9cd 77f4 	strd	r7, r7, [sp, #976]	@ 0x3d0
 8015646:	f000 81ed 	beq.w	8015a24 <XtalkCal_Sequence+0x848>
 801564a:	2b02      	cmp	r3, #2
 801564c:	f000 8282 	beq.w	8015b54 <XtalkCal_Sequence+0x978>
 8015650:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8015654:	f20d 5d9c 	addw	sp, sp, #1436	@ 0x59c
 8015658:	ecbd 8b02 	vpop	{d8}
 801565c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015660:	f1bc 0f00 	cmp.w	ip, #0
 8015664:	f2c0 80b1 	blt.w	80157ca <XtalkCal_Sequence+0x5ee>
 8015668:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801566a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801566c:	1a9b      	subs	r3, r3, r2
 801566e:	9a01      	ldr	r2, [sp, #4]
 8015670:	fb02 f303 	mul.w	r3, r2, r3
 8015674:	011b      	lsls	r3, r3, #4
 8015676:	f100 80ce 	bmi.w	8015816 <XtalkCal_Sequence+0x63a>
 801567a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801567e:	4699      	mov	r9, r3
 8015680:	9a00      	ldr	r2, [sp, #0]
 8015682:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8015686:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 801568a:	ea89 0e02 	eor.w	lr, r9, r2
 801568e:	4650      	mov	r0, sl
 8015690:	e704      	b.n	801549c <XtalkCal_Sequence+0x2c0>
 8015692:	9b05      	ldr	r3, [sp, #20]
 8015694:	459a      	cmp	sl, r3
 8015696:	f63f af2e 	bhi.w	80154f6 <XtalkCal_Sequence+0x31a>
 801569a:	461a      	mov	r2, r3
 801569c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80156a0:	2a00      	cmp	r2, #0
 80156a2:	db1c      	blt.n	80156de <XtalkCal_Sequence+0x502>
 80156a4:	f1ba 0f00 	cmp.w	sl, #0
 80156a8:	f000 80f0 	beq.w	801588c <XtalkCal_Sequence+0x6b0>
 80156ac:	2100      	movs	r1, #0
 80156ae:	4650      	mov	r0, sl
 80156b0:	e000      	b.n	80156b4 <XtalkCal_Sequence+0x4d8>
 80156b2:	b158      	cbz	r0, 80156cc <XtalkCal_Sequence+0x4f0>
 80156b4:	4290      	cmp	r0, r2
 80156b6:	bf24      	itt	cs
 80156b8:	1a80      	subcs	r0, r0, r2
 80156ba:	4319      	orrcs	r1, r3
 80156bc:	085b      	lsrs	r3, r3, #1
 80156be:	ea4f 0040 	mov.w	r0, r0, lsl #1
 80156c2:	d1f6      	bne.n	80156b2 <XtalkCal_Sequence+0x4d6>
 80156c4:	4682      	mov	sl, r0
 80156c6:	4552      	cmp	r2, sl
 80156c8:	d800      	bhi.n	80156cc <XtalkCal_Sequence+0x4f0>
 80156ca:	3101      	adds	r1, #1
 80156cc:	f1bc 0f00 	cmp.w	ip, #0
 80156d0:	f2c0 8092 	blt.w	80157f8 <XtalkCal_Sequence+0x61c>
 80156d4:	2900      	cmp	r1, #0
 80156d6:	bfb8      	it	lt
 80156d8:	f06f 4100 	mvnlt.w	r1, #2147483648	@ 0x80000000
 80156dc:	e71d      	b.n	801551a <XtalkCal_Sequence+0x33e>
 80156de:	4592      	cmp	sl, r2
 80156e0:	f080 80b8 	bcs.w	8015854 <XtalkCal_Sequence+0x678>
 80156e4:	085b      	lsrs	r3, r3, #1
 80156e6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80156ea:	d1db      	bne.n	80156a4 <XtalkCal_Sequence+0x4c8>
 80156ec:	4619      	mov	r1, r3
 80156ee:	e7ea      	b.n	80156c6 <XtalkCal_Sequence+0x4ea>
 80156f0:	9a05      	ldr	r2, [sp, #20]
 80156f2:	4293      	cmp	r3, r2
 80156f4:	f63f aede 	bhi.w	80154b4 <XtalkCal_Sequence+0x2d8>
 80156f8:	4611      	mov	r1, r2
 80156fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80156fe:	2900      	cmp	r1, #0
 8015700:	db6f      	blt.n	80157e2 <XtalkCal_Sequence+0x606>
 8015702:	f04f 0900 	mov.w	r9, #0
 8015706:	b90b      	cbnz	r3, 801570c <XtalkCal_Sequence+0x530>
 8015708:	e0b7      	b.n	801587a <XtalkCal_Sequence+0x69e>
 801570a:	b163      	cbz	r3, 8015726 <XtalkCal_Sequence+0x54a>
 801570c:	4299      	cmp	r1, r3
 801570e:	bf9c      	itt	ls
 8015710:	1a5b      	subls	r3, r3, r1
 8015712:	ea49 0902 	orrls.w	r9, r9, r2
 8015716:	0852      	lsrs	r2, r2, #1
 8015718:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801571c:	d1f5      	bne.n	801570a <XtalkCal_Sequence+0x52e>
 801571e:	4299      	cmp	r1, r3
 8015720:	d801      	bhi.n	8015726 <XtalkCal_Sequence+0x54a>
 8015722:	f109 0901 	add.w	r9, r9, #1
 8015726:	f1be 0f00 	cmp.w	lr, #0
 801572a:	db62      	blt.n	80157f2 <XtalkCal_Sequence+0x616>
 801572c:	f1b9 0f00 	cmp.w	r9, #0
 8015730:	bfb8      	it	lt
 8015732:	f06f 4900 	mvnlt.w	r9, #2147483648	@ 0x80000000
 8015736:	e6cf      	b.n	80154d8 <XtalkCal_Sequence+0x2fc>
 8015738:	2900      	cmp	r1, #0
 801573a:	da07      	bge.n	801574c <XtalkCal_Sequence+0x570>
 801573c:	4281      	cmp	r1, r0
 801573e:	f000 8087 	beq.w	8015850 <XtalkCal_Sequence+0x674>
 8015742:	f03a 4200 	bics.w	r2, sl, #2147483648	@ 0x80000000
 8015746:	4659      	mov	r1, fp
 8015748:	f000 80be 	beq.w	80158c8 <XtalkCal_Sequence+0x6ec>
 801574c:	f04f 0a00 	mov.w	sl, #0
 8015750:	e000      	b.n	8015754 <XtalkCal_Sequence+0x578>
 8015752:	b160      	cbz	r0, 801576e <XtalkCal_Sequence+0x592>
 8015754:	4288      	cmp	r0, r1
 8015756:	bf24      	itt	cs
 8015758:	1a40      	subcs	r0, r0, r1
 801575a:	ea4a 0a02 	orrcs.w	sl, sl, r2
 801575e:	0852      	lsrs	r2, r2, #1
 8015760:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8015764:	d1f5      	bne.n	8015752 <XtalkCal_Sequence+0x576>
 8015766:	4288      	cmp	r0, r1
 8015768:	d301      	bcc.n	801576e <XtalkCal_Sequence+0x592>
 801576a:	f10a 0a01 	add.w	sl, sl, #1
 801576e:	ea97 0f0c 	teq	r7, ip
 8015772:	d443      	bmi.n	80157fc <XtalkCal_Sequence+0x620>
 8015774:	f1ba 0f00 	cmp.w	sl, #0
 8015778:	4650      	mov	r0, sl
 801577a:	f6ff ae8a 	blt.w	8015492 <XtalkCal_Sequence+0x2b6>
 801577e:	9a00      	ldr	r2, [sp, #0]
 8015780:	ea8a 0c02 	eor.w	ip, sl, r2
 8015784:	e68a      	b.n	801549c <XtalkCal_Sequence+0x2c0>
 8015786:	2900      	cmp	r1, #0
 8015788:	da06      	bge.n	8015798 <XtalkCal_Sequence+0x5bc>
 801578a:	4281      	cmp	r1, r0
 801578c:	d05e      	beq.n	801584c <XtalkCal_Sequence+0x670>
 801578e:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8015792:	4671      	mov	r1, lr
 8015794:	f000 8096 	beq.w	80158c4 <XtalkCal_Sequence+0x6e8>
 8015798:	2300      	movs	r3, #0
 801579a:	e000      	b.n	801579e <XtalkCal_Sequence+0x5c2>
 801579c:	b150      	cbz	r0, 80157b4 <XtalkCal_Sequence+0x5d8>
 801579e:	4281      	cmp	r1, r0
 80157a0:	bf9c      	itt	ls
 80157a2:	1a40      	subls	r0, r0, r1
 80157a4:	4313      	orrls	r3, r2
 80157a6:	0852      	lsrs	r2, r2, #1
 80157a8:	ea4f 0040 	mov.w	r0, r0, lsl #1
 80157ac:	d1f6      	bne.n	801579c <XtalkCal_Sequence+0x5c0>
 80157ae:	4281      	cmp	r1, r0
 80157b0:	d800      	bhi.n	80157b4 <XtalkCal_Sequence+0x5d8>
 80157b2:	3301      	adds	r3, #1
 80157b4:	ea9c 0f07 	teq	ip, r7
 80157b8:	d427      	bmi.n	801580a <XtalkCal_Sequence+0x62e>
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	4699      	mov	r9, r3
 80157be:	f6ff ae42 	blt.w	8015446 <XtalkCal_Sequence+0x26a>
 80157c2:	9a00      	ldr	r2, [sp, #0]
 80157c4:	ea83 0e02 	eor.w	lr, r3, r2
 80157c8:	e642      	b.n	8015450 <XtalkCal_Sequence+0x274>
 80157ca:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80157cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80157ce:	1a9b      	subs	r3, r3, r2
 80157d0:	9a01      	ldr	r2, [sp, #4]
 80157d2:	fb02 f303 	mul.w	r3, r2, r3
 80157d6:	011a      	lsls	r2, r3, #4
 80157d8:	d43e      	bmi.n	8015858 <XtalkCal_Sequence+0x67c>
 80157da:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80157de:	4699      	mov	r9, r3
 80157e0:	e74e      	b.n	8015680 <XtalkCal_Sequence+0x4a4>
 80157e2:	428b      	cmp	r3, r1
 80157e4:	d230      	bcs.n	8015848 <XtalkCal_Sequence+0x66c>
 80157e6:	0852      	lsrs	r2, r2, #1
 80157e8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80157ec:	d189      	bne.n	8015702 <XtalkCal_Sequence+0x526>
 80157ee:	4691      	mov	r9, r2
 80157f0:	e795      	b.n	801571e <XtalkCal_Sequence+0x542>
 80157f2:	f1c9 0900 	rsb	r9, r9, #0
 80157f6:	e66f      	b.n	80154d8 <XtalkCal_Sequence+0x2fc>
 80157f8:	4249      	negs	r1, r1
 80157fa:	e68e      	b.n	801551a <XtalkCal_Sequence+0x33e>
 80157fc:	9a00      	ldr	r2, [sp, #0]
 80157fe:	f1ca 0a00 	rsb	sl, sl, #0
 8015802:	4650      	mov	r0, sl
 8015804:	ea82 0c0a 	eor.w	ip, r2, sl
 8015808:	e648      	b.n	801549c <XtalkCal_Sequence+0x2c0>
 801580a:	9a00      	ldr	r2, [sp, #0]
 801580c:	425b      	negs	r3, r3
 801580e:	4699      	mov	r9, r3
 8015810:	ea82 0e03 	eor.w	lr, r2, r3
 8015814:	e61c      	b.n	8015450 <XtalkCal_Sequence+0x274>
 8015816:	9b00      	ldr	r3, [sp, #0]
 8015818:	f8dd e00c 	ldr.w	lr, [sp, #12]
 801581c:	f04f 4a00 	mov.w	sl, #2147483648	@ 0x80000000
 8015820:	eb03 0c0a 	add.w	ip, r3, sl
 8015824:	4650      	mov	r0, sl
 8015826:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801582a:	e63b      	b.n	80154a4 <XtalkCal_Sequence+0x2c8>
 801582c:	2800      	cmp	r0, #0
 801582e:	f000 81b0 	beq.w	8015b92 <XtalkCal_Sequence+0x9b6>
 8015832:	4639      	mov	r1, r7
 8015834:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8015838:	e7ae      	b.n	8015798 <XtalkCal_Sequence+0x5bc>
 801583a:	2800      	cmp	r0, #0
 801583c:	f000 81a5 	beq.w	8015b8a <XtalkCal_Sequence+0x9ae>
 8015840:	4639      	mov	r1, r7
 8015842:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8015846:	e781      	b.n	801574c <XtalkCal_Sequence+0x570>
 8015848:	4691      	mov	r9, r2
 801584a:	e76c      	b.n	8015726 <XtalkCal_Sequence+0x54a>
 801584c:	4613      	mov	r3, r2
 801584e:	e7b1      	b.n	80157b4 <XtalkCal_Sequence+0x5d8>
 8015850:	4692      	mov	sl, r2
 8015852:	e78c      	b.n	801576e <XtalkCal_Sequence+0x592>
 8015854:	4619      	mov	r1, r3
 8015856:	e739      	b.n	80156cc <XtalkCal_Sequence+0x4f0>
 8015858:	9b00      	ldr	r3, [sp, #0]
 801585a:	f04f 4a00 	mov.w	sl, #2147483648	@ 0x80000000
 801585e:	eb03 0c0a 	add.w	ip, r3, sl
 8015862:	46e6      	mov	lr, ip
 8015864:	4653      	mov	r3, sl
 8015866:	4650      	mov	r0, sl
 8015868:	e61c      	b.n	80154a4 <XtalkCal_Sequence+0x2c8>
 801586a:	4611      	mov	r1, r2
 801586c:	f04f 0900 	mov.w	r9, #0
 8015870:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8015874:	2b00      	cmp	r3, #0
 8015876:	f47f af49 	bne.w	801570c <XtalkCal_Sequence+0x530>
 801587a:	4699      	mov	r9, r3
 801587c:	e62c      	b.n	80154d8 <XtalkCal_Sequence+0x2fc>
 801587e:	461a      	mov	r2, r3
 8015880:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8015884:	f1ba 0f00 	cmp.w	sl, #0
 8015888:	f47f af10 	bne.w	80156ac <XtalkCal_Sequence+0x4d0>
 801588c:	4651      	mov	r1, sl
 801588e:	e644      	b.n	801551a <XtalkCal_Sequence+0x33e>
 8015890:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015892:	4291      	cmp	r1, r2
 8015894:	d06c      	beq.n	8015970 <XtalkCal_Sequence+0x794>
 8015896:	bf8c      	ite	hi
 8015898:	2201      	movhi	r2, #1
 801589a:	2200      	movls	r2, #0
 801589c:	b952      	cbnz	r2, 80158b4 <XtalkCal_Sequence+0x6d8>
 801589e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80158a0:	428a      	cmp	r2, r1
 80158a2:	d07f      	beq.n	80159a4 <XtalkCal_Sequence+0x7c8>
 80158a4:	bf34      	ite	cc
 80158a6:	2301      	movcc	r3, #1
 80158a8:	2300      	movcs	r3, #0
 80158aa:	f083 0301 	eor.w	r3, r3, #1
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	f43f ae5e 	beq.w	8015570 <XtalkCal_Sequence+0x394>
 80158b4:	9b06      	ldr	r3, [sp, #24]
 80158b6:	9a07      	ldr	r2, [sp, #28]
 80158b8:	3301      	adds	r3, #1
 80158ba:	429a      	cmp	r2, r3
 80158bc:	9306      	str	r3, [sp, #24]
 80158be:	f47f ad5e 	bne.w	801537e <XtalkCal_Sequence+0x1a2>
 80158c2:	e655      	b.n	8015570 <XtalkCal_Sequence+0x394>
 80158c4:	4613      	mov	r3, r2
 80158c6:	e772      	b.n	80157ae <XtalkCal_Sequence+0x5d2>
 80158c8:	4692      	mov	sl, r2
 80158ca:	e74c      	b.n	8015766 <XtalkCal_Sequence+0x58a>
 80158cc:	2800      	cmp	r0, #0
 80158ce:	f1c3 0300 	rsb	r3, r3, #0
 80158d2:	f6ff ae8f 	blt.w	80155f4 <XtalkCal_Sequence+0x418>
 80158d6:	17d8      	asrs	r0, r3, #31
 80158d8:	fb03 f101 	mul.w	r1, r3, r1
 80158dc:	fb09 1100 	mla	r1, r9, r0, r1
 80158e0:	fba3 3909 	umull	r3, r9, r3, r9
 80158e4:	0c18      	lsrs	r0, r3, #16
 80158e6:	4449      	add	r1, r9
 80158e8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80158ec:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 80158f0:	4403      	add	r3, r0
 80158f2:	425b      	negs	r3, r3
 80158f4:	e68c      	b.n	8015610 <XtalkCal_Sequence+0x434>
 80158f6:	f1c8 0100 	rsb	r1, r8, #0
 80158fa:	42a9      	cmp	r1, r5
 80158fc:	f4ff ae50 	bcc.w	80155a0 <XtalkCal_Sequence+0x3c4>
 8015900:	2900      	cmp	r1, #0
 8015902:	f280 8152 	bge.w	8015baa <XtalkCal_Sequence+0x9ce>
 8015906:	2d00      	cmp	r5, #0
 8015908:	f2c0 8161 	blt.w	8015bce <XtalkCal_Sequence+0x9f2>
 801590c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015910:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8015914:	e001      	b.n	801591a <XtalkCal_Sequence+0x73e>
 8015916:	2900      	cmp	r1, #0
 8015918:	db4f      	blt.n	80159ba <XtalkCal_Sequence+0x7de>
 801591a:	4628      	mov	r0, r5
 801591c:	f04f 0900 	mov.w	r9, #0
 8015920:	e000      	b.n	8015924 <XtalkCal_Sequence+0x748>
 8015922:	b160      	cbz	r0, 801593e <XtalkCal_Sequence+0x762>
 8015924:	4281      	cmp	r1, r0
 8015926:	bf9c      	itt	ls
 8015928:	1a40      	subls	r0, r0, r1
 801592a:	ea49 0903 	orrls.w	r9, r9, r3
 801592e:	085b      	lsrs	r3, r3, #1
 8015930:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8015934:	d1f5      	bne.n	8015922 <XtalkCal_Sequence+0x746>
 8015936:	4281      	cmp	r1, r0
 8015938:	d801      	bhi.n	801593e <XtalkCal_Sequence+0x762>
 801593a:	f109 0901 	add.w	r9, r9, #1
 801593e:	ea98 0f0e 	teq	r8, lr
 8015942:	d440      	bmi.n	80159c6 <XtalkCal_Sequence+0x7ea>
 8015944:	f1b9 0f00 	cmp.w	r9, #0
 8015948:	6863      	ldr	r3, [r4, #4]
 801594a:	4648      	mov	r0, r9
 801594c:	f2c0 8126 	blt.w	8015b9c <XtalkCal_Sequence+0x9c0>
 8015950:	2b00      	cmp	r3, #0
 8015952:	bfb8      	it	lt
 8015954:	425b      	neglt	r3, r3
 8015956:	f280 8205 	bge.w	8015d64 <XtalkCal_Sequence+0xb88>
 801595a:	fba3 3809 	umull	r3, r8, r3, r9
 801595e:	0c19      	lsrs	r1, r3, #16
 8015960:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8015964:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8015968:	440b      	add	r3, r1
 801596a:	2100      	movs	r1, #0
 801596c:	425b      	negs	r3, r3
 801596e:	e638      	b.n	80155e2 <XtalkCal_Sequence+0x406>
 8015970:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015972:	4293      	cmp	r3, r2
 8015974:	bf34      	ite	cc
 8015976:	2200      	movcc	r2, #0
 8015978:	2201      	movcs	r2, #1
 801597a:	e78f      	b.n	801589c <XtalkCal_Sequence+0x6c0>
 801597c:	9a00      	ldr	r2, [sp, #0]
 801597e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8015982:	eb02 0e03 	add.w	lr, r2, r3
 8015986:	4699      	mov	r9, r3
 8015988:	e562      	b.n	8015450 <XtalkCal_Sequence+0x274>
 801598a:	9a00      	ldr	r2, [sp, #0]
 801598c:	f04f 4a00 	mov.w	sl, #2147483648	@ 0x80000000
 8015990:	eb02 0c0a 	add.w	ip, r2, sl
 8015994:	4650      	mov	r0, sl
 8015996:	e581      	b.n	801549c <XtalkCal_Sequence+0x2c0>
 8015998:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801599a:	4293      	cmp	r3, r2
 801599c:	bf34      	ite	cc
 801599e:	2200      	movcc	r2, #0
 80159a0:	2201      	movcs	r2, #1
 80159a2:	e5db      	b.n	801555c <XtalkCal_Sequence+0x380>
 80159a4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80159a6:	4293      	cmp	r3, r2
 80159a8:	bf34      	ite	cc
 80159aa:	2300      	movcc	r3, #0
 80159ac:	2301      	movcs	r3, #1
 80159ae:	e77c      	b.n	80158aa <XtalkCal_Sequence+0x6ce>
 80159b0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80159b4:	425b      	negs	r3, r3
 80159b6:	4681      	mov	r9, r0
 80159b8:	e7cf      	b.n	801595a <XtalkCal_Sequence+0x77e>
 80159ba:	42a9      	cmp	r1, r5
 80159bc:	d829      	bhi.n	8015a12 <XtalkCal_Sequence+0x836>
 80159be:	ea98 0f0e 	teq	r8, lr
 80159c2:	4699      	mov	r9, r3
 80159c4:	d5be      	bpl.n	8015944 <XtalkCal_Sequence+0x768>
 80159c6:	6863      	ldr	r3, [r4, #4]
 80159c8:	f1c9 0900 	rsb	r9, r9, #0
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	4648      	mov	r0, r9
 80159d0:	f2c0 80c5 	blt.w	8015b5e <XtalkCal_Sequence+0x982>
 80159d4:	f1b9 0f00 	cmp.w	r9, #0
 80159d8:	4698      	mov	r8, r3
 80159da:	f6bf adf9 	bge.w	80155d0 <XtalkCal_Sequence+0x3f4>
 80159de:	4243      	negs	r3, r0
 80159e0:	17d9      	asrs	r1, r3, #31
 80159e2:	4699      	mov	r9, r3
 80159e4:	fba8 3a03 	umull	r3, sl, r8, r3
 80159e8:	fb08 aa01 	mla	sl, r8, r1, sl
 80159ec:	ea4f 4813 	mov.w	r8, r3, lsr #16
 80159f0:	ea48 480a 	orr.w	r8, r8, sl, lsl #16
 80159f4:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 80159f8:	4443      	add	r3, r8
 80159fa:	e7b7      	b.n	801596c <XtalkCal_Sequence+0x790>
 80159fc:	2a01      	cmp	r2, #1
 80159fe:	f240 80dc 	bls.w	8015bba <XtalkCal_Sequence+0x9de>
 8015a02:	0842      	lsrs	r2, r0, #1
 8015a04:	9207      	str	r2, [sp, #28]
 8015a06:	0412      	lsls	r2, r2, #16
 8015a08:	4251      	negs	r1, r2
 8015a0a:	9204      	str	r2, [sp, #16]
 8015a0c:	9105      	str	r1, [sp, #20]
 8015a0e:	9200      	str	r2, [sp, #0]
 8015a10:	e44b      	b.n	80152aa <XtalkCal_Sequence+0xce>
 8015a12:	f030 4300 	bics.w	r3, r0, #2147483648	@ 0x80000000
 8015a16:	f029 4100 	bic.w	r1, r9, #2147483648	@ 0x80000000
 8015a1a:	f47f af7e 	bne.w	801591a <XtalkCal_Sequence+0x73e>
 8015a1e:	4699      	mov	r9, r3
 8015a20:	4628      	mov	r0, r5
 8015a22:	e788      	b.n	8015936 <XtalkCal_Sequence+0x75a>
 8015a24:	4651      	mov	r1, sl
 8015a26:	a8f4      	add	r0, sp, #976	@ 0x3d0
 8015a28:	f005 f84c 	bl	801aac4 <Argus_Eval_Trapezoidal>
 8015a2c:	f8bd 33d6 	ldrh.w	r3, [sp, #982]	@ 0x3d6
 8015a30:	42ab      	cmp	r3, r5
 8015a32:	f200 8199 	bhi.w	8015d68 <XtalkCal_Sequence+0xb8c>
 8015a36:	f8da 0000 	ldr.w	r0, [sl]
 8015a3a:	2800      	cmp	r0, #0
 8015a3c:	ea4f 0194 	mov.w	r1, r4, lsr #2
 8015a40:	f004 0303 	and.w	r3, r4, #3
 8015a44:	db77      	blt.n	8015b36 <XtalkCal_Sequence+0x95a>
 8015a46:	f3c0 22c0 	ubfx	r2, r0, #11, #1
 8015a4a:	eb02 3210 	add.w	r2, r2, r0, lsr #12
 8015a4e:	1870      	adds	r0, r6, r1
 8015a50:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8015a54:	f10d 0ea8 	add.w	lr, sp, #168	@ 0xa8
 8015a58:	f8da c004 	ldr.w	ip, [sl, #4]
 8015a5c:	f83e e020 	ldrh.w	lr, [lr, r0, lsl #2]
 8015a60:	eba2 020e 	sub.w	r2, r2, lr
 8015a64:	f10d 0ea8 	add.w	lr, sp, #168	@ 0xa8
 8015a68:	f1bc 0f00 	cmp.w	ip, #0
 8015a6c:	f82e 2020 	strh.w	r2, [lr, r0, lsl #2]
 8015a70:	db68      	blt.n	8015b44 <XtalkCal_Sequence+0x968>
 8015a72:	f3cc 22c0 	ubfx	r2, ip, #11, #1
 8015a76:	eb02 321c 	add.w	r2, r2, ip, lsr #12
 8015a7a:	4431      	add	r1, r6
 8015a7c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8015a80:	a92a      	add	r1, sp, #168	@ 0xa8
 8015a82:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8015a86:	3401      	adds	r4, #1
 8015a88:	8859      	ldrh	r1, [r3, #2]
 8015a8a:	2c20      	cmp	r4, #32
 8015a8c:	eba2 0201 	sub.w	r2, r2, r1
 8015a90:	805a      	strh	r2, [r3, #2]
 8015a92:	d038      	beq.n	8015b06 <XtalkCal_Sequence+0x92a>
 8015a94:	f10a 0a08 	add.w	sl, sl, #8
 8015a98:	2d00      	cmp	r5, #0
 8015a9a:	f47f adc9 	bne.w	8015630 <XtalkCal_Sequence+0x454>
 8015a9e:	ab6a      	add	r3, sp, #424	@ 0x1a8
 8015aa0:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 8015aa4:	6810      	ldr	r0, [r2, #0]
 8015aa6:	4243      	negs	r3, r0
 8015aa8:	08a5      	lsrs	r5, r4, #2
 8015aaa:	f3c0 21c0 	ubfx	r1, r0, #11, #1
 8015aae:	f3c3 27c0 	ubfx	r7, r3, #11, #1
 8015ab2:	eb01 3110 	add.w	r1, r1, r0, lsr #12
 8015ab6:	eb07 3713 	add.w	r7, r7, r3, lsr #12
 8015aba:	2800      	cmp	r0, #0
 8015abc:	f004 0303 	and.w	r3, r4, #3
 8015ac0:	eb06 0005 	add.w	r0, r6, r5
 8015ac4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8015ac8:	bfb8      	it	lt
 8015aca:	4279      	neglt	r1, r7
 8015acc:	af2a      	add	r7, sp, #168	@ 0xa8
 8015ace:	a82a      	add	r0, sp, #168	@ 0xa8
 8015ad0:	f837 7023 	ldrh.w	r7, [r7, r3, lsl #2]
 8015ad4:	1bc9      	subs	r1, r1, r7
 8015ad6:	af2a      	add	r7, sp, #168	@ 0xa8
 8015ad8:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 8015adc:	f827 1023 	strh.w	r1, [r7, r3, lsl #2]
 8015ae0:	6851      	ldr	r1, [r2, #4]
 8015ae2:	2900      	cmp	r1, #0
 8015ae4:	f104 0401 	add.w	r4, r4, #1
 8015ae8:	f102 0208 	add.w	r2, r2, #8
 8015aec:	f1c1 0700 	rsb	r7, r1, #0
 8015af0:	f2c0 8159 	blt.w	8015da6 <XtalkCal_Sequence+0xbca>
 8015af4:	8868      	ldrh	r0, [r5, #2]
 8015af6:	f3c1 23c0 	ubfx	r3, r1, #11, #1
 8015afa:	eb03 3311 	add.w	r3, r3, r1, lsr #12
 8015afe:	1a1b      	subs	r3, r3, r0
 8015b00:	2c20      	cmp	r4, #32
 8015b02:	806b      	strh	r3, [r5, #2]
 8015b04:	d1ce      	bne.n	8015aa4 <XtalkCal_Sequence+0x8c8>
 8015b06:	f1b8 0f00 	cmp.w	r8, #0
 8015b0a:	f000 8133 	beq.w	8015d74 <XtalkCal_Sequence+0xb98>
 8015b0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015b12:	a92a      	add	r1, sp, #168	@ 0xa8
 8015b14:	f509 7091 	add.w	r0, r9, #290	@ 0x122
 8015b18:	f013 feb3 	bl	8029882 <memcpy>
 8015b1c:	f8d9 3288 	ldr.w	r3, [r9, #648]	@ 0x288
 8015b20:	2000      	movs	r0, #0
 8015b22:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8015b26:	f8c9 3288 	str.w	r3, [r9, #648]	@ 0x288
 8015b2a:	f20d 5d9c 	addw	sp, sp, #1436	@ 0x59c
 8015b2e:	ecbd 8b02 	vpop	{d8}
 8015b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b36:	4240      	negs	r0, r0
 8015b38:	f3c0 22c0 	ubfx	r2, r0, #11, #1
 8015b3c:	eb02 3210 	add.w	r2, r2, r0, lsr #12
 8015b40:	4252      	negs	r2, r2
 8015b42:	e784      	b.n	8015a4e <XtalkCal_Sequence+0x872>
 8015b44:	f1cc 0c00 	rsb	ip, ip, #0
 8015b48:	f3cc 22c0 	ubfx	r2, ip, #11, #1
 8015b4c:	eb02 321c 	add.w	r2, r2, ip, lsr #12
 8015b50:	4252      	negs	r2, r2
 8015b52:	e792      	b.n	8015a7a <XtalkCal_Sequence+0x89e>
 8015b54:	4651      	mov	r1, sl
 8015b56:	a8f4      	add	r0, sp, #976	@ 0x3d0
 8015b58:	f005 f86a 	bl	801ac30 <Argus_Eval_Triangular>
 8015b5c:	e766      	b.n	8015a2c <XtalkCal_Sequence+0x850>
 8015b5e:	f1b9 0f00 	cmp.w	r9, #0
 8015b62:	f1c3 0300 	rsb	r3, r3, #0
 8015b66:	f6bf aef8 	bge.w	801595a <XtalkCal_Sequence+0x77e>
 8015b6a:	f1c0 0900 	rsb	r9, r0, #0
 8015b6e:	fba3 8a09 	umull	r8, sl, r3, r9
 8015b72:	ea4f 71e9 	mov.w	r1, r9, asr #31
 8015b76:	fb03 a301 	mla	r3, r3, r1, sl
 8015b7a:	ea4f 4a18 	mov.w	sl, r8, lsr #16
 8015b7e:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 8015b82:	f3c8 33c0 	ubfx	r3, r8, #15, #1
 8015b86:	4453      	add	r3, sl
 8015b88:	e52b      	b.n	80155e2 <XtalkCal_Sequence+0x406>
 8015b8a:	f8dd c000 	ldr.w	ip, [sp]
 8015b8e:	4682      	mov	sl, r0
 8015b90:	e484      	b.n	801549c <XtalkCal_Sequence+0x2c0>
 8015b92:	f8dd e000 	ldr.w	lr, [sp]
 8015b96:	4653      	mov	r3, sl
 8015b98:	46d1      	mov	r9, sl
 8015b9a:	e459      	b.n	8015450 <XtalkCal_Sequence+0x274>
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	db07      	blt.n	8015bb0 <XtalkCal_Sequence+0x9d4>
 8015ba0:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 8015ba4:	4698      	mov	r8, r3
 8015ba6:	4648      	mov	r0, r9
 8015ba8:	e512      	b.n	80155d0 <XtalkCal_Sequence+0x3f4>
 8015baa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8015bae:	e6b4      	b.n	801591a <XtalkCal_Sequence+0x73e>
 8015bb0:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 8015bb4:	425b      	negs	r3, r3
 8015bb6:	4648      	mov	r0, r9
 8015bb8:	e6cf      	b.n	801595a <XtalkCal_Sequence+0x77e>
 8015bba:	4981      	ldr	r1, [pc, #516]	@ (8015dc0 <XtalkCal_Sequence+0xbe4>)
 8015bbc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8015bc0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8015bc4:	9200      	str	r2, [sp, #0]
 8015bc6:	2201      	movs	r2, #1
 8015bc8:	9207      	str	r2, [sp, #28]
 8015bca:	f7ff bb6e 	b.w	80152aa <XtalkCal_Sequence+0xce>
 8015bce:	f44f 3980 	mov.w	r9, #65536	@ 0x10000
 8015bd2:	e6b4      	b.n	801593e <XtalkCal_Sequence+0x762>
 8015bd4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015bd6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8015bd8:	689a      	ldr	r2, [r3, #8]
 8015bda:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8015bde:	4610      	mov	r0, r2
 8015be0:	f8d3 10bc 	ldr.w	r1, [r3, #188]	@ 0xbc
 8015be4:	2a00      	cmp	r2, #0
 8015be6:	f000 80b0 	beq.w	8015d4a <XtalkCal_Sequence+0xb6e>
 8015bea:	0849      	lsrs	r1, r1, #1
 8015bec:	2a00      	cmp	r2, #0
 8015bee:	460e      	mov	r6, r1
 8015bf0:	db49      	blt.n	8015c86 <XtalkCal_Sequence+0xaaa>
 8015bf2:	428a      	cmp	r2, r1
 8015bf4:	d24c      	bcs.n	8015c90 <XtalkCal_Sequence+0xab4>
 8015bf6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8015bfa:	4614      	mov	r4, r2
 8015bfc:	0052      	lsls	r2, r2, #1
 8015bfe:	428a      	cmp	r2, r1
 8015c00:	461d      	mov	r5, r3
 8015c02:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015c06:	d3f8      	bcc.n	8015bfa <XtalkCal_Sequence+0xa1e>
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	f040 808e 	bne.w	8015d2a <XtalkCal_Sequence+0xb4e>
 8015c0e:	ea91 0f00 	teq	r1, r0
 8015c12:	bf54      	ite	pl
 8015c14:	f06f 4300 	mvnpl.w	r3, #2147483648	@ 0x80000000
 8015c18:	f04f 4300 	movmi.w	r3, #2147483648	@ 0x80000000
 8015c1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015c1e:	2a00      	cmp	r2, #0
 8015c20:	d151      	bne.n	8015cc6 <XtalkCal_Sequence+0xaea>
 8015c22:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8015c26:	4615      	mov	r5, r2
 8015c28:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8015c2a:	f8b4 109c 	ldrh.w	r1, [r4, #156]	@ 0x9c
 8015c2e:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8015c32:	fba1 1203 	umull	r1, r2, r1, r3
 8015c36:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015c38:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8015c3c:	f8b2 40b4 	ldrh.w	r4, [r2, #180]	@ 0xb4
 8015c40:	fba0 2303 	umull	r2, r3, r0, r3
 8015c44:	fb00 3305 	mla	r3, r0, r5, r3
 8015c48:	f89d 0326 	ldrb.w	r0, [sp, #806]	@ 0x326
 8015c4c:	f000 001f 	and.w	r0, r0, #31
 8015c50:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
 8015c54:	08e4      	lsrs	r4, r4, #3
 8015c56:	f88d 4325 	strb.w	r4, [sp, #805]	@ 0x325
 8015c5a:	9c08      	ldr	r4, [sp, #32]
 8015c5c:	f88d 0326 	strb.w	r0, [sp, #806]	@ 0x326
 8015c60:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8015c62:	f040 7080 	orr.w	r0, r0, #16777216	@ 0x1000000
 8015c66:	67e0      	str	r0, [r4, #124]	@ 0x7c
 8015c68:	0c10      	lsrs	r0, r2, #16
 8015c6a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8015c6e:	f3c2 33c0 	ubfx	r3, r2, #15, #1
 8015c72:	4403      	add	r3, r0
 8015c74:	93cf      	str	r3, [sp, #828]	@ 0x33c
 8015c76:	f3c1 33c0 	ubfx	r3, r1, #15, #1
 8015c7a:	eb03 4111 	add.w	r1, r3, r1, lsr #16
 8015c7e:	f8ad 1344 	strh.w	r1, [sp, #836]	@ 0x344
 8015c82:	f7ff bb31 	b.w	80152e8 <XtalkCal_Sequence+0x10c>
 8015c86:	4252      	negs	r2, r2
 8015c88:	428a      	cmp	r2, r1
 8015c8a:	d3b4      	bcc.n	8015bf6 <XtalkCal_Sequence+0xa1a>
 8015c8c:	2a00      	cmp	r2, #0
 8015c8e:	db5f      	blt.n	8015d50 <XtalkCal_Sequence+0xb74>
 8015c90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8015c94:	2900      	cmp	r1, #0
 8015c96:	d056      	beq.n	8015d46 <XtalkCal_Sequence+0xb6a>
 8015c98:	461c      	mov	r4, r3
 8015c9a:	2300      	movs	r3, #0
 8015c9c:	e000      	b.n	8015ca0 <XtalkCal_Sequence+0xac4>
 8015c9e:	b139      	cbz	r1, 8015cb0 <XtalkCal_Sequence+0xad4>
 8015ca0:	428a      	cmp	r2, r1
 8015ca2:	bf9c      	itt	ls
 8015ca4:	1a89      	subls	r1, r1, r2
 8015ca6:	4323      	orrls	r3, r4
 8015ca8:	0864      	lsrs	r4, r4, #1
 8015caa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015cae:	d1f6      	bne.n	8015c9e <XtalkCal_Sequence+0xac2>
 8015cb0:	4291      	cmp	r1, r2
 8015cb2:	bf28      	it	cs
 8015cb4:	3301      	addcs	r3, #1
 8015cb6:	ea96 0f00 	teq	r6, r0
 8015cba:	d442      	bmi.n	8015d42 <XtalkCal_Sequence+0xb66>
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	bfb8      	it	lt
 8015cc0:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8015cc4:	e7aa      	b.n	8015c1c <XtalkCal_Sequence+0xa40>
 8015cc6:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 8015cca:	2200      	movs	r2, #0
 8015ccc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8015cce:	f8b4 009c 	ldrh.w	r0, [r4, #156]	@ 0x9c
 8015cd2:	f8d4 5094 	ldr.w	r5, [r4, #148]	@ 0x94
 8015cd6:	fba0 0103 	umull	r0, r1, r0, r3
 8015cda:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8015cdc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8015ce0:	f8b1 40b8 	ldrh.w	r4, [r1, #184]	@ 0xb8
 8015ce4:	fba5 1303 	umull	r1, r3, r5, r3
 8015ce8:	fb05 3302 	mla	r3, r5, r2, r3
 8015cec:	f89d 2326 	ldrb.w	r2, [sp, #806]	@ 0x326
 8015cf0:	f002 021f 	and.w	r2, r2, #31
 8015cf4:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
 8015cf8:	08e4      	lsrs	r4, r4, #3
 8015cfa:	f88d 4325 	strb.w	r4, [sp, #805]	@ 0x325
 8015cfe:	9c08      	ldr	r4, [sp, #32]
 8015d00:	f88d 2326 	strb.w	r2, [sp, #806]	@ 0x326
 8015d04:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8015d06:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8015d0a:	67e2      	str	r2, [r4, #124]	@ 0x7c
 8015d0c:	0c0a      	lsrs	r2, r1, #16
 8015d0e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8015d12:	f3c1 33c0 	ubfx	r3, r1, #15, #1
 8015d16:	4413      	add	r3, r2
 8015d18:	93cf      	str	r3, [sp, #828]	@ 0x33c
 8015d1a:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 8015d1e:	eb03 4010 	add.w	r0, r3, r0, lsr #16
 8015d22:	f8ad 0344 	strh.w	r0, [sp, #836]	@ 0x344
 8015d26:	f7ff badf 	b.w	80152e8 <XtalkCal_Sequence+0x10c>
 8015d2a:	2a00      	cmp	r2, #0
 8015d2c:	dab2      	bge.n	8015c94 <XtalkCal_Sequence+0xab8>
 8015d2e:	f035 4300 	bics.w	r3, r5, #2147483648	@ 0x80000000
 8015d32:	4622      	mov	r2, r4
 8015d34:	d0bc      	beq.n	8015cb0 <XtalkCal_Sequence+0xad4>
 8015d36:	2900      	cmp	r1, #0
 8015d38:	d1ae      	bne.n	8015c98 <XtalkCal_Sequence+0xabc>
 8015d3a:	2800      	cmp	r0, #0
 8015d3c:	460b      	mov	r3, r1
 8015d3e:	f6bf af6d 	bge.w	8015c1c <XtalkCal_Sequence+0xa40>
 8015d42:	425b      	negs	r3, r3
 8015d44:	e76a      	b.n	8015c1c <XtalkCal_Sequence+0xa40>
 8015d46:	460b      	mov	r3, r1
 8015d48:	e7b2      	b.n	8015cb0 <XtalkCal_Sequence+0xad4>
 8015d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8015dc4 <XtalkCal_Sequence+0xbe8>)
 8015d4c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8015d4e:	e76b      	b.n	8015c28 <XtalkCal_Sequence+0xa4c>
 8015d50:	0852      	lsrs	r2, r2, #1
 8015d52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015d56:	e7ee      	b.n	8015d36 <XtalkCal_Sequence+0xb5a>
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	db20      	blt.n	8015d9e <XtalkCal_Sequence+0xbc2>
 8015d5c:	4698      	mov	r8, r3
 8015d5e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8015d62:	e63c      	b.n	80159de <XtalkCal_Sequence+0x802>
 8015d64:	4698      	mov	r8, r3
 8015d66:	e433      	b.n	80155d0 <XtalkCal_Sequence+0x3f4>
 8015d68:	4817      	ldr	r0, [pc, #92]	@ (8015dc8 <XtalkCal_Sequence+0xbec>)
 8015d6a:	f7fd f913 	bl	8012f94 <print>
 8015d6e:	f06f 006f 	mvn.w	r0, #111	@ 0x6f
 8015d72:	e46f      	b.n	8015654 <XtalkCal_Sequence+0x478>
 8015d74:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015d76:	f04f 0801 	mov.w	r8, #1
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	f43f ac52 	beq.w	8015624 <XtalkCal_Sequence+0x448>
 8015d80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015d82:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8015d84:	689a      	ldr	r2, [r3, #8]
 8015d86:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8015d8a:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
 8015d8e:	f8d3 10bc 	ldr.w	r1, [r3, #188]	@ 0xbc
 8015d92:	4610      	mov	r0, r2
 8015d94:	2a00      	cmp	r2, #0
 8015d96:	f47f af28 	bne.w	8015bea <XtalkCal_Sequence+0xa0e>
 8015d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8015dcc <XtalkCal_Sequence+0xbf0>)
 8015d9c:	e796      	b.n	8015ccc <XtalkCal_Sequence+0xaf0>
 8015d9e:	425b      	negs	r3, r3
 8015da0:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8015da4:	e6e1      	b.n	8015b6a <XtalkCal_Sequence+0x98e>
 8015da6:	f3c7 23c0 	ubfx	r3, r7, #11, #1
 8015daa:	8869      	ldrh	r1, [r5, #2]
 8015dac:	eb03 3317 	add.w	r3, r3, r7, lsr #12
 8015db0:	425b      	negs	r3, r3
 8015db2:	1a5b      	subs	r3, r3, r1
 8015db4:	2c20      	cmp	r4, #32
 8015db6:	806b      	strh	r3, [r5, #2]
 8015db8:	f47f ae74 	bne.w	8015aa4 <XtalkCal_Sequence+0x8c8>
 8015dbc:	e6a3      	b.n	8015b06 <XtalkCal_Sequence+0x92a>
 8015dbe:	bf00      	nop
 8015dc0:	ffff0000 	.word	0xffff0000
 8015dc4:	8000ffff 	.word	0x8000ffff
 8015dc8:	0802cfa4 	.word	0x0802cfa4
 8015dcc:	80010001 	.word	0x80010001

08015dd0 <RangeOffsetCal_Sequence>:
 8015dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dd4:	ed2d 8b02 	vpush	{d8}
 8015dd8:	f2ad 6d5c 	subw	sp, sp, #1628	@ 0x65c
 8015ddc:	e9cd 1012 	strd	r1, r0, [sp, #72]	@ 0x48
 8015de0:	920a      	str	r2, [sp, #40]	@ 0x28
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	f000 84c6 	beq.w	8016774 <RangeOffsetCal_Sequence+0x9a4>
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	930d      	str	r3, [sp, #52]	@ 0x34
 8015dec:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8015df0:	a866      	add	r0, sp, #408	@ 0x198
 8015df2:	f013 fd46 	bl	8029882 <memcpy>
 8015df6:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8015dfa:	2280      	movs	r2, #128	@ 0x80
 8015dfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8015e00:	2100      	movs	r1, #0
 8015e02:	a826      	add	r0, sp, #152	@ 0x98
 8015e04:	f88d 32a4 	strb.w	r3, [sp, #676]	@ 0x2a4
 8015e08:	f013 fca3 	bl	8029752 <memset>
 8015e0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015e0e:	339e      	adds	r3, #158	@ 0x9e
 8015e10:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015e12:	ab26      	add	r3, sp, #152	@ 0x98
 8015e14:	930e      	str	r3, [sp, #56]	@ 0x38
 8015e16:	2300      	movs	r3, #0
 8015e18:	930c      	str	r3, [sp, #48]	@ 0x30
 8015e1a:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8015e1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015e1e:	f88d 3297 	strb.w	r3, [sp, #663]	@ 0x297
 8015e22:	a966      	add	r1, sp, #408	@ 0x198
 8015e24:	4630      	mov	r0, r6
 8015e26:	f7ff f977 	bl	8015118 <Argus_Core_SetSettingsSync>
 8015e2a:	1e02      	subs	r2, r0, #0
 8015e2c:	9206      	str	r2, [sp, #24]
 8015e2e:	f2c0 831f 	blt.w	8016470 <RangeOffsetCal_Sequence+0x6a0>
 8015e32:	f44f 72e4 	mov.w	r2, #456	@ 0x1c8
 8015e36:	2100      	movs	r1, #0
 8015e38:	a8b0      	add	r0, sp, #704	@ 0x2c0
 8015e3a:	f013 fc8a 	bl	8029752 <memset>
 8015e3e:	2240      	movs	r2, #64	@ 0x40
 8015e40:	2100      	movs	r1, #0
 8015e42:	a816      	add	r0, sp, #88	@ 0x58
 8015e44:	f013 fc85 	bl	8029752 <memset>
 8015e48:	2280      	movs	r2, #128	@ 0x80
 8015e4a:	2100      	movs	r1, #0
 8015e4c:	a846      	add	r0, sp, #280	@ 0x118
 8015e4e:	f013 fc80 	bl	8029752 <memset>
 8015e52:	f20d 418c 	addw	r1, sp, #1164	@ 0x48c
 8015e56:	f50d 6091 	add.w	r0, sp, #1160	@ 0x488
 8015e5a:	f7f0 ff29 	bl	8006cb0 <Timer_GetCounterValue>
 8015e5e:	f8dd 148c 	ldr.w	r1, [sp, #1164]	@ 0x48c
 8015e62:	4bb6      	ldr	r3, [pc, #728]	@ (801613c <RangeOffsetCal_Sequence+0x36c>)
 8015e64:	f8dd 4488 	ldr.w	r4, [sp, #1160]	@ 0x488
 8015e68:	9106      	str	r1, [sp, #24]
 8015e6a:	4299      	cmp	r1, r3
 8015e6c:	f5a1 2374 	sub.w	r3, r1, #999424	@ 0xf4000
 8015e70:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8015e74:	f104 0201 	add.w	r2, r4, #1
 8015e78:	bf8c      	ite	hi
 8015e7a:	461d      	movhi	r5, r3
 8015e7c:	460d      	movls	r5, r1
 8015e7e:	f104 0302 	add.w	r3, r4, #2
 8015e82:	bf98      	it	ls
 8015e84:	4613      	movls	r3, r2
 8015e86:	428d      	cmp	r5, r1
 8015e88:	bf34      	ite	cc
 8015e8a:	2200      	movcc	r2, #0
 8015e8c:	2201      	movcs	r2, #1
 8015e8e:	42a3      	cmp	r3, r4
 8015e90:	9304      	str	r3, [sp, #16]
 8015e92:	bf8c      	ite	hi
 8015e94:	2301      	movhi	r3, #1
 8015e96:	2300      	movls	r3, #0
 8015e98:	bf18      	it	ne
 8015e9a:	461a      	movne	r2, r3
 8015e9c:	9203      	str	r2, [sp, #12]
 8015e9e:	f206 72cc 	addw	r2, r6, #1996	@ 0x7cc
 8015ea2:	ee08 2a10 	vmov	s16, r2
 8015ea6:	f606 337c 	addw	r3, r6, #2940	@ 0xb7c
 8015eaa:	2208      	movs	r2, #8
 8015eac:	ee18 0a10 	vmov	r0, s16
 8015eb0:	a9b0      	add	r1, sp, #704	@ 0x2c0
 8015eb2:	ee08 3a90 	vmov	s17, r3
 8015eb6:	9401      	str	r4, [sp, #4]
 8015eb8:	9505      	str	r5, [sp, #20]
 8015eba:	9200      	str	r2, [sp, #0]
 8015ebc:	f001 f9f8 	bl	80172b0 <Argus_Measurement_TriggerSync>
 8015ec0:	2800      	cmp	r0, #0
 8015ec2:	ae6a      	add	r6, sp, #424	@ 0x1a8
 8015ec4:	f2c0 82d3 	blt.w	801646e <RangeOffsetCal_Sequence+0x69e>
 8015ec8:	2300      	movs	r3, #0
 8015eca:	f50d 6291 	add.w	r2, sp, #1160	@ 0x488
 8015ece:	ee18 0a90 	vmov	r0, s17
 8015ed2:	a9b0      	add	r1, sp, #704	@ 0x2c0
 8015ed4:	f003 f93e 	bl	8019154 <Argus_Eval_Apply>
 8015ed8:	f10d 0b58 	add.w	fp, sp, #88	@ 0x58
 8015edc:	ab4a      	add	r3, sp, #296	@ 0x128
 8015ede:	aa46      	add	r2, sp, #280	@ 0x118
 8015ee0:	9302      	str	r3, [sp, #8]
 8015ee2:	9208      	str	r2, [sp, #32]
 8015ee4:	f50d 6991 	add.w	r9, sp, #1160	@ 0x488
 8015ee8:	46d8      	mov	r8, fp
 8015eea:	469e      	mov	lr, r3
 8015eec:	f1ae 0010 	sub.w	r0, lr, #16
 8015ef0:	4645      	mov	r5, r8
 8015ef2:	464c      	mov	r4, r9
 8015ef4:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8015ef8:	bb23      	cbnz	r3, 8015f44 <RangeOffsetCal_Sequence+0x174>
 8015efa:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8015efe:	882b      	ldrh	r3, [r5, #0]
 8015f00:	ea8c 71ec 	eor.w	r1, ip, ip, asr #31
 8015f04:	eba1 71ec 	sub.w	r1, r1, ip, asr #31
 8015f08:	3301      	adds	r3, #1
 8015f0a:	f5b1 2f00 	cmp.w	r1, #524288	@ 0x80000
 8015f0e:	802b      	strh	r3, [r5, #0]
 8015f10:	f240 8284 	bls.w	801641c <RangeOffsetCal_Sequence+0x64c>
 8015f14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8015f18:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8015f1c:	4692      	mov	sl, r2
 8015f1e:	0052      	lsls	r2, r2, #1
 8015f20:	428a      	cmp	r2, r1
 8015f22:	461f      	mov	r7, r3
 8015f24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015f28:	d3f8      	bcc.n	8015f1c <RangeOffsetCal_Sequence+0x14c>
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	f040 8255 	bne.w	80163da <RangeOffsetCal_Sequence+0x60a>
 8015f30:	f1bc 0f00 	cmp.w	ip, #0
 8015f34:	bfac      	ite	ge
 8015f36:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8015f3a:	f04f 4700 	movlt.w	r7, #2147483648	@ 0x80000000
 8015f3e:	6801      	ldr	r1, [r0, #0]
 8015f40:	4439      	add	r1, r7
 8015f42:	6001      	str	r1, [r0, #0]
 8015f44:	3004      	adds	r0, #4
 8015f46:	4586      	cmp	lr, r0
 8015f48:	f104 040c 	add.w	r4, r4, #12
 8015f4c:	f105 0502 	add.w	r5, r5, #2
 8015f50:	d1d0      	bne.n	8015ef4 <RangeOffsetCal_Sequence+0x124>
 8015f52:	f10e 0e10 	add.w	lr, lr, #16
 8015f56:	45b6      	cmp	lr, r6
 8015f58:	f109 0930 	add.w	r9, r9, #48	@ 0x30
 8015f5c:	f108 0808 	add.w	r8, r8, #8
 8015f60:	d1c4      	bne.n	8015eec <RangeOffsetCal_Sequence+0x11c>
 8015f62:	a915      	add	r1, sp, #84	@ 0x54
 8015f64:	a814      	add	r0, sp, #80	@ 0x50
 8015f66:	f7f0 fea3 	bl	8006cb0 <Timer_GetCounterValue>
 8015f6a:	9a03      	ldr	r2, [sp, #12]
 8015f6c:	e9dd 1314 	ldrd	r1, r3, [sp, #80]	@ 0x50
 8015f70:	2a00      	cmp	r2, #0
 8015f72:	f000 825d 	beq.w	8016430 <RangeOffsetCal_Sequence+0x660>
 8015f76:	9a01      	ldr	r2, [sp, #4]
 8015f78:	4291      	cmp	r1, r2
 8015f7a:	f000 82af 	beq.w	80164dc <RangeOffsetCal_Sequence+0x70c>
 8015f7e:	bf8c      	ite	hi
 8015f80:	2201      	movhi	r2, #1
 8015f82:	2200      	movls	r2, #0
 8015f84:	2a00      	cmp	r2, #0
 8015f86:	f040 825a 	bne.w	801643e <RangeOffsetCal_Sequence+0x66e>
 8015f8a:	9f02      	ldr	r7, [sp, #8]
 8015f8c:	f1a7 0010 	sub.w	r0, r7, #16
 8015f90:	465c      	mov	r4, fp
 8015f92:	f834 3b02 	ldrh.w	r3, [r4], #2
 8015f96:	f023 0208 	bic.w	r2, r3, #8
 8015f9a:	b322      	cbz	r2, 8015fe6 <RangeOffsetCal_Sequence+0x216>
 8015f9c:	041d      	lsls	r5, r3, #16
 8015f9e:	f100 8291 	bmi.w	80164c4 <RangeOffsetCal_Sequence+0x6f4>
 8015fa2:	f5b5 2f00 	cmp.w	r5, #524288	@ 0x80000
 8015fa6:	462a      	mov	r2, r5
 8015fa8:	f280 826b 	bge.w	8016482 <RangeOffsetCal_Sequence+0x6b2>
 8015fac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8015fb0:	0052      	lsls	r2, r2, #1
 8015fb2:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 8015fb6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015fba:	d3f9      	bcc.n	8015fb0 <RangeOffsetCal_Sequence+0x1e0>
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	f040 8262 	bne.w	8016486 <RangeOffsetCal_Sequence+0x6b6>
 8015fc2:	2d00      	cmp	r5, #0
 8015fc4:	6803      	ldr	r3, [r0, #0]
 8015fc6:	f2c0 8441 	blt.w	801684c <RangeOffsetCal_Sequence+0xa7c>
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	f2c0 8298 	blt.w	8016500 <RangeOffsetCal_Sequence+0x730>
 8015fd0:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8015fd4:	fba3 3c0c 	umull	r3, ip, r3, ip
 8015fd8:	0c1a      	lsrs	r2, r3, #16
 8015fda:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8015fde:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8015fe2:	4413      	add	r3, r2
 8015fe4:	6003      	str	r3, [r0, #0]
 8015fe6:	3004      	adds	r0, #4
 8015fe8:	4287      	cmp	r7, r0
 8015fea:	d1d2      	bne.n	8015f92 <RangeOffsetCal_Sequence+0x1c2>
 8015fec:	3710      	adds	r7, #16
 8015fee:	42b7      	cmp	r7, r6
 8015ff0:	f10b 0b08 	add.w	fp, fp, #8
 8015ff4:	d1ca      	bne.n	8015f8c <RangeOffsetCal_Sequence+0x1bc>
 8015ff6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015ff8:	4951      	ldr	r1, [pc, #324]	@ (8016140 <RangeOffsetCal_Sequence+0x370>)
 8015ffa:	f8b3 22ba 	ldrh.w	r2, [r3, #698]	@ 0x2ba
 8015ffe:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8016000:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016004:	6840      	ldr	r0, [r0, #4]
 8016006:	fb02 f303 	mul.w	r3, r2, r3
 801600a:	fbb3 f3f0 	udiv	r3, r3, r0
 801600e:	428b      	cmp	r3, r1
 8016010:	f240 82ac 	bls.w	801656c <RangeOffsetCal_Sequence+0x79c>
 8016014:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8016018:	4d4a      	ldr	r5, [pc, #296]	@ (8016144 <RangeOffsetCal_Sequence+0x374>)
 801601a:	9301      	str	r3, [sp, #4]
 801601c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016020:	9500      	str	r5, [sp, #0]
 8016022:	9305      	str	r3, [sp, #20]
 8016024:	4b48      	ldr	r3, [pc, #288]	@ (8016148 <RangeOffsetCal_Sequence+0x378>)
 8016026:	fba2 3203 	umull	r3, r2, r2, r3
 801602a:	0c1c      	lsrs	r4, r3, #16
 801602c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8016030:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8016034:	f44f 72e4 	mov.w	r2, #456	@ 0x1c8
 8016038:	2100      	movs	r1, #0
 801603a:	a8b0      	add	r0, sp, #704	@ 0x2c0
 801603c:	441c      	add	r4, r3
 801603e:	f013 fb88 	bl	8029752 <memset>
 8016042:	2240      	movs	r2, #64	@ 0x40
 8016044:	2100      	movs	r1, #0
 8016046:	a816      	add	r0, sp, #88	@ 0x58
 8016048:	f013 fb83 	bl	8029752 <memset>
 801604c:	2280      	movs	r2, #128	@ 0x80
 801604e:	2100      	movs	r1, #0
 8016050:	a846      	add	r0, sp, #280	@ 0x118
 8016052:	f013 fb7e 	bl	8029752 <memset>
 8016056:	f20d 418c 	addw	r1, sp, #1164	@ 0x48c
 801605a:	f50d 6091 	add.w	r0, sp, #1160	@ 0x488
 801605e:	f7f0 fe27 	bl	8006cb0 <Timer_GetCounterValue>
 8016062:	4b3a      	ldr	r3, [pc, #232]	@ (801614c <RangeOffsetCal_Sequence+0x37c>)
 8016064:	f8dd 048c 	ldr.w	r0, [sp, #1164]	@ 0x48c
 8016068:	9011      	str	r0, [sp, #68]	@ 0x44
 801606a:	fba3 3204 	umull	r3, r2, r3, r4
 801606e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016072:	0993      	lsrs	r3, r2, #6
 8016074:	fb01 4313 	mls	r3, r1, r3, r4
 8016078:	fb01 0303 	mla	r3, r1, r3, r0
 801607c:	4604      	mov	r4, r0
 801607e:	e9dd 0700 	ldrd	r0, r7, [sp]
 8016082:	f8dd 1488 	ldr.w	r1, [sp, #1160]	@ 0x488
 8016086:	f8df c0b4 	ldr.w	ip, [pc, #180]	@ 801613c <RangeOffsetCal_Sequence+0x36c>
 801608a:	9107      	str	r1, [sp, #28]
 801608c:	eb01 1292 	add.w	r2, r1, r2, lsr #6
 8016090:	ea17 0725 	ands.w	r7, r7, r5, asr #32
 8016094:	bf38      	it	cc
 8016096:	4607      	movcc	r7, r0
 8016098:	f5a3 2174 	sub.w	r1, r3, #999424	@ 0xf4000
 801609c:	4563      	cmp	r3, ip
 801609e:	bf98      	it	ls
 80160a0:	4618      	movls	r0, r3
 80160a2:	f5a1 7110 	sub.w	r1, r1, #576	@ 0x240
 80160a6:	f102 0301 	add.w	r3, r2, #1
 80160aa:	bf84      	itt	hi
 80160ac:	461a      	movhi	r2, r3
 80160ae:	4608      	movhi	r0, r1
 80160b0:	9b07      	ldr	r3, [sp, #28]
 80160b2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80160b4:	4611      	mov	r1, r2
 80160b6:	42a0      	cmp	r0, r4
 80160b8:	bf34      	ite	cc
 80160ba:	2200      	movcc	r2, #0
 80160bc:	2201      	movcs	r2, #1
 80160be:	428b      	cmp	r3, r1
 80160c0:	bf34      	ite	cc
 80160c2:	2301      	movcc	r3, #1
 80160c4:	2300      	movcs	r3, #0
 80160c6:	bf08      	it	eq
 80160c8:	4613      	moveq	r3, r2
 80160ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80160cc:	2300      	movs	r3, #0
 80160ce:	9010      	str	r0, [sp, #64]	@ 0x40
 80160d0:	9304      	str	r3, [sp, #16]
 80160d2:	ee18 0a10 	vmov	r0, s16
 80160d6:	a9b0      	add	r1, sp, #704	@ 0x2c0
 80160d8:	f001 f8ea 	bl	80172b0 <Argus_Measurement_TriggerSync>
 80160dc:	1e03      	subs	r3, r0, #0
 80160de:	9306      	str	r3, [sp, #24]
 80160e0:	f2c0 81c6 	blt.w	8016470 <RangeOffsetCal_Sequence+0x6a0>
 80160e4:	2300      	movs	r3, #0
 80160e6:	ee18 0a90 	vmov	r0, s17
 80160ea:	f50d 6291 	add.w	r2, sp, #1160	@ 0x488
 80160ee:	a9b0      	add	r1, sp, #704	@ 0x2c0
 80160f0:	f003 f830 	bl	8019154 <Argus_Eval_Apply>
 80160f4:	ab16      	add	r3, sp, #88	@ 0x58
 80160f6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80160fa:	9303      	str	r3, [sp, #12]
 80160fc:	f50d 6a91 	add.w	sl, sp, #1160	@ 0x488
 8016100:	4699      	mov	r9, r3
 8016102:	f1a8 0010 	sub.w	r0, r8, #16
 8016106:	46cc      	mov	ip, r9
 8016108:	4654      	mov	r4, sl
 801610a:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 801610e:	bba3      	cbnz	r3, 801617a <RangeOffsetCal_Sequence+0x3aa>
 8016110:	f8bc 3000 	ldrh.w	r3, [ip]
 8016114:	f8d4 b028 	ldr.w	fp, [r4, #40]	@ 0x28
 8016118:	3301      	adds	r3, #1
 801611a:	f8ac 3000 	strh.w	r3, [ip]
 801611e:	2d00      	cmp	r5, #0
 8016120:	f000 822f 	beq.w	8016582 <RangeOffsetCal_Sequence+0x7b2>
 8016124:	ea8b 71eb 	eor.w	r1, fp, fp, asr #31
 8016128:	2d00      	cmp	r5, #0
 801612a:	eba1 71eb 	sub.w	r1, r1, fp, asr #31
 801612e:	f2c0 8230 	blt.w	8016592 <RangeOffsetCal_Sequence+0x7c2>
 8016132:	9b00      	ldr	r3, [sp, #0]
 8016134:	4299      	cmp	r1, r3
 8016136:	f240 8265 	bls.w	8016604 <RangeOffsetCal_Sequence+0x834>
 801613a:	e009      	b.n	8016150 <RangeOffsetCal_Sequence+0x380>
 801613c:	000f423f 	.word	0x000f423f
 8016140:	0001fffd 	.word	0x0001fffd
 8016144:	ffff0000 	.word	0xffff0000
 8016148:	0001199a 	.word	0x0001199a
 801614c:	10624dd3 	.word	0x10624dd3
 8016150:	463a      	mov	r2, r7
 8016152:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8016156:	0052      	lsls	r2, r2, #1
 8016158:	428a      	cmp	r2, r1
 801615a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801615e:	d3fa      	bcc.n	8016156 <RangeOffsetCal_Sequence+0x386>
 8016160:	2b00      	cmp	r3, #0
 8016162:	f040 821d 	bne.w	80165a0 <RangeOffsetCal_Sequence+0x7d0>
 8016166:	ea9b 0f05 	teq	fp, r5
 801616a:	bf54      	ite	pl
 801616c:	f06f 4e00 	mvnpl.w	lr, #2147483648	@ 0x80000000
 8016170:	f04f 4e00 	movmi.w	lr, #2147483648	@ 0x80000000
 8016174:	6801      	ldr	r1, [r0, #0]
 8016176:	4471      	add	r1, lr
 8016178:	6001      	str	r1, [r0, #0]
 801617a:	3004      	adds	r0, #4
 801617c:	4580      	cmp	r8, r0
 801617e:	f104 040c 	add.w	r4, r4, #12
 8016182:	f10c 0c02 	add.w	ip, ip, #2
 8016186:	d1c0      	bne.n	801610a <RangeOffsetCal_Sequence+0x33a>
 8016188:	f108 0810 	add.w	r8, r8, #16
 801618c:	45b0      	cmp	r8, r6
 801618e:	f10a 0a30 	add.w	sl, sl, #48	@ 0x30
 8016192:	f109 0908 	add.w	r9, r9, #8
 8016196:	d1b4      	bne.n	8016102 <RangeOffsetCal_Sequence+0x332>
 8016198:	a915      	add	r1, sp, #84	@ 0x54
 801619a:	a814      	add	r0, sp, #80	@ 0x50
 801619c:	f7f0 fd88 	bl	8006cb0 <Timer_GetCounterValue>
 80161a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80161a2:	e9dd 1314 	ldrd	r1, r3, [sp, #80]	@ 0x50
 80161a6:	2a00      	cmp	r2, #0
 80161a8:	f000 8232 	beq.w	8016610 <RangeOffsetCal_Sequence+0x840>
 80161ac:	9a07      	ldr	r2, [sp, #28]
 80161ae:	428a      	cmp	r2, r1
 80161b0:	f000 8265 	beq.w	801667e <RangeOffsetCal_Sequence+0x8ae>
 80161b4:	bf34      	ite	cc
 80161b6:	2201      	movcc	r2, #1
 80161b8:	2200      	movcs	r2, #0
 80161ba:	b182      	cbz	r2, 80161de <RangeOffsetCal_Sequence+0x40e>
 80161bc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80161be:	428a      	cmp	r2, r1
 80161c0:	f000 822f 	beq.w	8016622 <RangeOffsetCal_Sequence+0x852>
 80161c4:	bf34      	ite	cc
 80161c6:	2301      	movcc	r3, #1
 80161c8:	2300      	movcs	r3, #0
 80161ca:	f083 0301 	eor.w	r3, r3, #1
 80161ce:	b133      	cbz	r3, 80161de <RangeOffsetCal_Sequence+0x40e>
 80161d0:	9b04      	ldr	r3, [sp, #16]
 80161d2:	9a05      	ldr	r2, [sp, #20]
 80161d4:	3301      	adds	r3, #1
 80161d6:	429a      	cmp	r2, r3
 80161d8:	9304      	str	r3, [sp, #16]
 80161da:	f47f af7a 	bne.w	80160d2 <RangeOffsetCal_Sequence+0x302>
 80161de:	9b02      	ldr	r3, [sp, #8]
 80161e0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80161e4:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80161e8:	f1a3 0410 	sub.w	r4, r3, #16
 80161ec:	469e      	mov	lr, r3
 80161ee:	f83c 0b02 	ldrh.w	r0, [ip], #2
 80161f2:	b328      	cbz	r0, 8016240 <RangeOffsetCal_Sequence+0x470>
 80161f4:	4580      	cmp	r8, r0
 80161f6:	d023      	beq.n	8016240 <RangeOffsetCal_Sequence+0x470>
 80161f8:	0400      	lsls	r0, r0, #16
 80161fa:	f100 8218 	bmi.w	801662e <RangeOffsetCal_Sequence+0x85e>
 80161fe:	42b8      	cmp	r0, r7
 8016200:	4602      	mov	r2, r0
 8016202:	f080 82b4 	bcs.w	801676e <RangeOffsetCal_Sequence+0x99e>
 8016206:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801620a:	0052      	lsls	r2, r2, #1
 801620c:	42ba      	cmp	r2, r7
 801620e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016212:	d3fa      	bcc.n	801620a <RangeOffsetCal_Sequence+0x43a>
 8016214:	2b00      	cmp	r3, #0
 8016216:	f040 8211 	bne.w	801663c <RangeOffsetCal_Sequence+0x86c>
 801621a:	ea90 0f05 	teq	r0, r5
 801621e:	6823      	ldr	r3, [r4, #0]
 8016220:	f100 830f 	bmi.w	8016842 <RangeOffsetCal_Sequence+0xa72>
 8016224:	2b00      	cmp	r3, #0
 8016226:	f2c0 8235 	blt.w	8016694 <RangeOffsetCal_Sequence+0x8c4>
 801622a:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 801622e:	fba3 3909 	umull	r3, r9, r3, r9
 8016232:	0c1a      	lsrs	r2, r3, #16
 8016234:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8016238:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 801623c:	4413      	add	r3, r2
 801623e:	6023      	str	r3, [r4, #0]
 8016240:	3404      	adds	r4, #4
 8016242:	45a6      	cmp	lr, r4
 8016244:	d1d3      	bne.n	80161ee <RangeOffsetCal_Sequence+0x41e>
 8016246:	9b02      	ldr	r3, [sp, #8]
 8016248:	9a03      	ldr	r2, [sp, #12]
 801624a:	3310      	adds	r3, #16
 801624c:	3208      	adds	r2, #8
 801624e:	42b3      	cmp	r3, r6
 8016250:	9302      	str	r3, [sp, #8]
 8016252:	9203      	str	r2, [sp, #12]
 8016254:	d1c3      	bne.n	80161de <RangeOffsetCal_Sequence+0x40e>
 8016256:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016258:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801625a:	2100      	movs	r1, #0
 801625c:	eb03 1082 	add.w	r0, r3, r2, lsl #6
 8016260:	ad66      	add	r5, sp, #408	@ 0x198
 8016262:	ab46      	add	r3, sp, #280	@ 0x118
 8016264:	460a      	mov	r2, r1
 8016266:	681c      	ldr	r4, [r3, #0]
 8016268:	1c56      	adds	r6, r2, #1
 801626a:	b13c      	cbz	r4, 801627c <RangeOffsetCal_Sequence+0x4ac>
 801626c:	f9b0 701c 	ldrsh.w	r7, [r0, #28]
 8016270:	eb04 14c7 	add.w	r4, r4, r7, lsl #7
 8016274:	b2f2      	uxtb	r2, r6
 8016276:	601c      	str	r4, [r3, #0]
 8016278:	eb01 1164 	add.w	r1, r1, r4, asr #5
 801627c:	685c      	ldr	r4, [r3, #4]
 801627e:	1c56      	adds	r6, r2, #1
 8016280:	b13c      	cbz	r4, 8016292 <RangeOffsetCal_Sequence+0x4c2>
 8016282:	f9b0 701e 	ldrsh.w	r7, [r0, #30]
 8016286:	eb04 14c7 	add.w	r4, r4, r7, lsl #7
 801628a:	b2f2      	uxtb	r2, r6
 801628c:	605c      	str	r4, [r3, #4]
 801628e:	eb01 1164 	add.w	r1, r1, r4, asr #5
 8016292:	689c      	ldr	r4, [r3, #8]
 8016294:	1c56      	adds	r6, r2, #1
 8016296:	b13c      	cbz	r4, 80162a8 <RangeOffsetCal_Sequence+0x4d8>
 8016298:	f9b0 7020 	ldrsh.w	r7, [r0, #32]
 801629c:	eb04 14c7 	add.w	r4, r4, r7, lsl #7
 80162a0:	b2f2      	uxtb	r2, r6
 80162a2:	609c      	str	r4, [r3, #8]
 80162a4:	eb01 1164 	add.w	r1, r1, r4, asr #5
 80162a8:	68dc      	ldr	r4, [r3, #12]
 80162aa:	1c56      	adds	r6, r2, #1
 80162ac:	b13c      	cbz	r4, 80162be <RangeOffsetCal_Sequence+0x4ee>
 80162ae:	f9b0 7022 	ldrsh.w	r7, [r0, #34]	@ 0x22
 80162b2:	eb04 14c7 	add.w	r4, r4, r7, lsl #7
 80162b6:	b2f2      	uxtb	r2, r6
 80162b8:	60dc      	str	r4, [r3, #12]
 80162ba:	eb01 1164 	add.w	r1, r1, r4, asr #5
 80162be:	3310      	adds	r3, #16
 80162c0:	429d      	cmp	r5, r3
 80162c2:	f100 0008 	add.w	r0, r0, #8
 80162c6:	d1ce      	bne.n	8016266 <RangeOffsetCal_Sequence+0x496>
 80162c8:	2a00      	cmp	r2, #0
 80162ca:	f000 82ca 	beq.w	8016862 <RangeOffsetCal_Sequence+0xa92>
 80162ce:	2a01      	cmp	r2, #1
 80162d0:	f000 8255 	beq.w	801677e <RangeOffsetCal_Sequence+0x9ae>
 80162d4:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 80162d8:	02d2      	lsls	r2, r2, #11
 80162da:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 80162de:	42a2      	cmp	r2, r4
 80162e0:	4610      	mov	r0, r2
 80162e2:	bf38      	it	cc
 80162e4:	f44f 3380 	movcc.w	r3, #65536	@ 0x10000
 80162e8:	f080 82a0 	bcs.w	801682c <RangeOffsetCal_Sequence+0xa5c>
 80162ec:	4607      	mov	r7, r0
 80162ee:	0040      	lsls	r0, r0, #1
 80162f0:	42a0      	cmp	r0, r4
 80162f2:	461e      	mov	r6, r3
 80162f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80162f8:	d3f8      	bcc.n	80162ec <RangeOffsetCal_Sequence+0x51c>
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	f040 824b 	bne.w	8016796 <RangeOffsetCal_Sequence+0x9c6>
 8016300:	ea91 0f02 	teq	r1, r2
 8016304:	bf54      	ite	pl
 8016306:	f06f 4600 	mvnpl.w	r6, #2147483648	@ 0x80000000
 801630a:	f04f 4600 	movmi.w	r6, #2147483648	@ 0x80000000
 801630e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016310:	9a08      	ldr	r2, [sp, #32]
 8016312:	6811      	ldr	r1, [r2, #0]
 8016314:	b169      	cbz	r1, 8016332 <RangeOffsetCal_Sequence+0x562>
 8016316:	1b88      	subs	r0, r1, r6
 8016318:	f500 0480 	add.w	r4, r0, #4194304	@ 0x400000
 801631c:	f5b4 0f00 	cmp.w	r4, #8388608	@ 0x800000
 8016320:	f080 8218 	bcs.w	8016754 <RangeOffsetCal_Sequence+0x984>
 8016324:	2800      	cmp	r0, #0
 8016326:	f2c0 81cb 	blt.w	80166c0 <RangeOffsetCal_Sequence+0x8f0>
 801632a:	f3c0 1180 	ubfx	r1, r0, #6, #1
 801632e:	eb01 11d0 	add.w	r1, r1, r0, lsr #7
 8016332:	8019      	strh	r1, [r3, #0]
 8016334:	6851      	ldr	r1, [r2, #4]
 8016336:	b169      	cbz	r1, 8016354 <RangeOffsetCal_Sequence+0x584>
 8016338:	1b88      	subs	r0, r1, r6
 801633a:	f500 0480 	add.w	r4, r0, #4194304	@ 0x400000
 801633e:	f5b4 0f00 	cmp.w	r4, #8388608	@ 0x800000
 8016342:	f080 8207 	bcs.w	8016754 <RangeOffsetCal_Sequence+0x984>
 8016346:	2800      	cmp	r0, #0
 8016348:	f2c0 81c1 	blt.w	80166ce <RangeOffsetCal_Sequence+0x8fe>
 801634c:	f3c0 1180 	ubfx	r1, r0, #6, #1
 8016350:	eb01 11d0 	add.w	r1, r1, r0, lsr #7
 8016354:	8059      	strh	r1, [r3, #2]
 8016356:	6891      	ldr	r1, [r2, #8]
 8016358:	b169      	cbz	r1, 8016376 <RangeOffsetCal_Sequence+0x5a6>
 801635a:	1b88      	subs	r0, r1, r6
 801635c:	f500 0480 	add.w	r4, r0, #4194304	@ 0x400000
 8016360:	f5b4 0f00 	cmp.w	r4, #8388608	@ 0x800000
 8016364:	f080 81f6 	bcs.w	8016754 <RangeOffsetCal_Sequence+0x984>
 8016368:	2800      	cmp	r0, #0
 801636a:	f2c0 81b7 	blt.w	80166dc <RangeOffsetCal_Sequence+0x90c>
 801636e:	f3c0 1180 	ubfx	r1, r0, #6, #1
 8016372:	eb01 11d0 	add.w	r1, r1, r0, lsr #7
 8016376:	8099      	strh	r1, [r3, #4]
 8016378:	68d1      	ldr	r1, [r2, #12]
 801637a:	b169      	cbz	r1, 8016398 <RangeOffsetCal_Sequence+0x5c8>
 801637c:	1b88      	subs	r0, r1, r6
 801637e:	f500 0480 	add.w	r4, r0, #4194304	@ 0x400000
 8016382:	f5b4 0f00 	cmp.w	r4, #8388608	@ 0x800000
 8016386:	f080 81e5 	bcs.w	8016754 <RangeOffsetCal_Sequence+0x984>
 801638a:	2800      	cmp	r0, #0
 801638c:	f2c0 81ad 	blt.w	80166ea <RangeOffsetCal_Sequence+0x91a>
 8016390:	f3c0 1180 	ubfx	r1, r0, #6, #1
 8016394:	eb01 11d0 	add.w	r1, r1, r0, lsr #7
 8016398:	3210      	adds	r2, #16
 801639a:	42aa      	cmp	r2, r5
 801639c:	80d9      	strh	r1, [r3, #6]
 801639e:	f103 0308 	add.w	r3, r3, #8
 80163a2:	d1b6      	bne.n	8016312 <RangeOffsetCal_Sequence+0x542>
 80163a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80163a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80163aa:	f000 823b 	beq.w	8016824 <RangeOffsetCal_Sequence+0xa54>
 80163ae:	1af2      	subs	r2, r6, r3
 80163b0:	f100 8231 	bmi.w	8016816 <RangeOffsetCal_Sequence+0xa46>
 80163b4:	f3c2 1380 	ubfx	r3, r2, #6, #1
 80163b8:	eb03 12d2 	add.w	r2, r3, r2, lsr #7
 80163bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80163be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80163c2:	4413      	add	r3, r2
 80163c4:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80163c8:	4293      	cmp	r3, r2
 80163ca:	f300 8203 	bgt.w	80167d4 <RangeOffsetCal_Sequence+0xa04>
 80163ce:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80163d2:	f340 821e 	ble.w	8016812 <RangeOffsetCal_Sequence+0xa42>
 80163d6:	b21b      	sxth	r3, r3
 80163d8:	e1fe      	b.n	80167d8 <RangeOffsetCal_Sequence+0xa08>
 80163da:	2a00      	cmp	r2, #0
 80163dc:	da06      	bge.n	80163ec <RangeOffsetCal_Sequence+0x61c>
 80163de:	428a      	cmp	r2, r1
 80163e0:	d024      	beq.n	801642c <RangeOffsetCal_Sequence+0x65c>
 80163e2:	f037 4300 	bics.w	r3, r7, #2147483648	@ 0x80000000
 80163e6:	f02a 4200 	bic.w	r2, sl, #2147483648	@ 0x80000000
 80163ea:	d048      	beq.n	801647e <RangeOffsetCal_Sequence+0x6ae>
 80163ec:	2700      	movs	r7, #0
 80163ee:	e000      	b.n	80163f2 <RangeOffsetCal_Sequence+0x622>
 80163f0:	b151      	cbz	r1, 8016408 <RangeOffsetCal_Sequence+0x638>
 80163f2:	4291      	cmp	r1, r2
 80163f4:	bf24      	itt	cs
 80163f6:	1a89      	subcs	r1, r1, r2
 80163f8:	431f      	orrcs	r7, r3
 80163fa:	085b      	lsrs	r3, r3, #1
 80163fc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016400:	d1f6      	bne.n	80163f0 <RangeOffsetCal_Sequence+0x620>
 8016402:	4291      	cmp	r1, r2
 8016404:	d300      	bcc.n	8016408 <RangeOffsetCal_Sequence+0x638>
 8016406:	3701      	adds	r7, #1
 8016408:	f1bc 0f00 	cmp.w	ip, #0
 801640c:	db04      	blt.n	8016418 <RangeOffsetCal_Sequence+0x648>
 801640e:	2f00      	cmp	r7, #0
 8016410:	bfb8      	it	lt
 8016412:	f06f 4700 	mvnlt.w	r7, #2147483648	@ 0x80000000
 8016416:	e592      	b.n	8015f3e <RangeOffsetCal_Sequence+0x16e>
 8016418:	427f      	negs	r7, r7
 801641a:	e590      	b.n	8015f3e <RangeOffsetCal_Sequence+0x16e>
 801641c:	2900      	cmp	r1, #0
 801641e:	f000 8194 	beq.w	801674a <RangeOffsetCal_Sequence+0x97a>
 8016422:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8016426:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801642a:	e7df      	b.n	80163ec <RangeOffsetCal_Sequence+0x61c>
 801642c:	461f      	mov	r7, r3
 801642e:	e7eb      	b.n	8016408 <RangeOffsetCal_Sequence+0x638>
 8016430:	9a01      	ldr	r2, [sp, #4]
 8016432:	4291      	cmp	r1, r2
 8016434:	d05e      	beq.n	80164f4 <RangeOffsetCal_Sequence+0x724>
 8016436:	bf8c      	ite	hi
 8016438:	2201      	movhi	r2, #1
 801643a:	2200      	movls	r2, #0
 801643c:	b952      	cbnz	r2, 8016454 <RangeOffsetCal_Sequence+0x684>
 801643e:	9a04      	ldr	r2, [sp, #16]
 8016440:	428a      	cmp	r2, r1
 8016442:	d051      	beq.n	80164e8 <RangeOffsetCal_Sequence+0x718>
 8016444:	bf34      	ite	cc
 8016446:	2301      	movcc	r3, #1
 8016448:	2300      	movcs	r3, #0
 801644a:	f083 0301 	eor.w	r3, r3, #1
 801644e:	2b00      	cmp	r3, #0
 8016450:	f43f ad9b 	beq.w	8015f8a <RangeOffsetCal_Sequence+0x1ba>
 8016454:	9b00      	ldr	r3, [sp, #0]
 8016456:	3b01      	subs	r3, #1
 8016458:	9300      	str	r3, [sp, #0]
 801645a:	f43f ad96 	beq.w	8015f8a <RangeOffsetCal_Sequence+0x1ba>
 801645e:	ee18 0a10 	vmov	r0, s16
 8016462:	a9b0      	add	r1, sp, #704	@ 0x2c0
 8016464:	f000 ff24 	bl	80172b0 <Argus_Measurement_TriggerSync>
 8016468:	2800      	cmp	r0, #0
 801646a:	f6bf ad2d 	bge.w	8015ec8 <RangeOffsetCal_Sequence+0xf8>
 801646e:	9006      	str	r0, [sp, #24]
 8016470:	9806      	ldr	r0, [sp, #24]
 8016472:	f20d 6d5c 	addw	sp, sp, #1628	@ 0x65c
 8016476:	ecbd 8b02 	vpop	{d8}
 801647a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801647e:	461f      	mov	r7, r3
 8016480:	e7bf      	b.n	8016402 <RangeOffsetCal_Sequence+0x632>
 8016482:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8016486:	f04f 0c00 	mov.w	ip, #0
 801648a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 801648e:	e000      	b.n	8016492 <RangeOffsetCal_Sequence+0x6c2>
 8016490:	b161      	cbz	r1, 80164ac <RangeOffsetCal_Sequence+0x6dc>
 8016492:	428a      	cmp	r2, r1
 8016494:	bf9c      	itt	ls
 8016496:	1a89      	subls	r1, r1, r2
 8016498:	ea4c 0c03 	orrls.w	ip, ip, r3
 801649c:	085b      	lsrs	r3, r3, #1
 801649e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80164a2:	d1f5      	bne.n	8016490 <RangeOffsetCal_Sequence+0x6c0>
 80164a4:	4291      	cmp	r1, r2
 80164a6:	bf28      	it	cs
 80164a8:	f10c 0c01 	addcs.w	ip, ip, #1
 80164ac:	2d00      	cmp	r5, #0
 80164ae:	db34      	blt.n	801651a <RangeOffsetCal_Sequence+0x74a>
 80164b0:	f1bc 0f00 	cmp.w	ip, #0
 80164b4:	6803      	ldr	r3, [r0, #0]
 80164b6:	f6ff ad88 	blt.w	8015fca <RangeOffsetCal_Sequence+0x1fa>
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	f6bf ad8a 	bge.w	8015fd4 <RangeOffsetCal_Sequence+0x204>
 80164c0:	425b      	negs	r3, r3
 80164c2:	e020      	b.n	8016506 <RangeOffsetCal_Sequence+0x736>
 80164c4:	426a      	negs	r2, r5
 80164c6:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 80164ca:	f4ff ad6f 	bcc.w	8015fac <RangeOffsetCal_Sequence+0x1dc>
 80164ce:	2a00      	cmp	r2, #0
 80164d0:	dad7      	bge.n	8016482 <RangeOffsetCal_Sequence+0x6b2>
 80164d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80164d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80164da:	e7d4      	b.n	8016486 <RangeOffsetCal_Sequence+0x6b6>
 80164dc:	9a06      	ldr	r2, [sp, #24]
 80164de:	4293      	cmp	r3, r2
 80164e0:	bf34      	ite	cc
 80164e2:	2200      	movcc	r2, #0
 80164e4:	2201      	movcs	r2, #1
 80164e6:	e54d      	b.n	8015f84 <RangeOffsetCal_Sequence+0x1b4>
 80164e8:	9a05      	ldr	r2, [sp, #20]
 80164ea:	429a      	cmp	r2, r3
 80164ec:	bf8c      	ite	hi
 80164ee:	2300      	movhi	r3, #0
 80164f0:	2301      	movls	r3, #1
 80164f2:	e7aa      	b.n	801644a <RangeOffsetCal_Sequence+0x67a>
 80164f4:	9a06      	ldr	r2, [sp, #24]
 80164f6:	4293      	cmp	r3, r2
 80164f8:	bf34      	ite	cc
 80164fa:	2200      	movcc	r2, #0
 80164fc:	2201      	movcs	r2, #1
 80164fe:	e79d      	b.n	801643c <RangeOffsetCal_Sequence+0x66c>
 8016500:	425b      	negs	r3, r3
 8016502:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8016506:	fbac 3c03 	umull	r3, ip, ip, r3
 801650a:	0c1a      	lsrs	r2, r3, #16
 801650c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8016510:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8016514:	4413      	add	r3, r2
 8016516:	425b      	negs	r3, r3
 8016518:	e564      	b.n	8015fe4 <RangeOffsetCal_Sequence+0x214>
 801651a:	6803      	ldr	r3, [r0, #0]
 801651c:	f1cc 0c00 	rsb	ip, ip, #0
 8016520:	2b00      	cmp	r3, #0
 8016522:	4662      	mov	r2, ip
 8016524:	da11      	bge.n	801654a <RangeOffsetCal_Sequence+0x77a>
 8016526:	f1bc 0f00 	cmp.w	ip, #0
 801652a:	f1c3 0300 	rsb	r3, r3, #0
 801652e:	daea      	bge.n	8016506 <RangeOffsetCal_Sequence+0x736>
 8016530:	4252      	negs	r2, r2
 8016532:	17d5      	asrs	r5, r2, #31
 8016534:	fba2 2103 	umull	r2, r1, r2, r3
 8016538:	fb03 1105 	mla	r1, r3, r5, r1
 801653c:	0c13      	lsrs	r3, r2, #16
 801653e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8016542:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8016546:	4413      	add	r3, r2
 8016548:	e54c      	b.n	8015fe4 <RangeOffsetCal_Sequence+0x214>
 801654a:	f1bc 0f00 	cmp.w	ip, #0
 801654e:	f6bf ad41 	bge.w	8015fd4 <RangeOffsetCal_Sequence+0x204>
 8016552:	4252      	negs	r2, r2
 8016554:	17d5      	asrs	r5, r2, #31
 8016556:	fba2 2103 	umull	r2, r1, r2, r3
 801655a:	fb03 1105 	mla	r1, r3, r5, r1
 801655e:	0c13      	lsrs	r3, r2, #16
 8016560:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8016564:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8016568:	4413      	add	r3, r2
 801656a:	e7d4      	b.n	8016516 <RangeOffsetCal_Sequence+0x746>
 801656c:	085b      	lsrs	r3, r3, #1
 801656e:	2b01      	cmp	r3, #1
 8016570:	bf38      	it	cc
 8016572:	2301      	movcc	r3, #1
 8016574:	9305      	str	r3, [sp, #20]
 8016576:	041b      	lsls	r3, r3, #16
 8016578:	9300      	str	r3, [sp, #0]
 801657a:	461d      	mov	r5, r3
 801657c:	425b      	negs	r3, r3
 801657e:	9301      	str	r3, [sp, #4]
 8016580:	e550      	b.n	8016024 <RangeOffsetCal_Sequence+0x254>
 8016582:	f1bb 0f00 	cmp.w	fp, #0
 8016586:	bfac      	ite	ge
 8016588:	f06f 4e00 	mvnge.w	lr, #2147483648	@ 0x80000000
 801658c:	f04f 4e00 	movlt.w	lr, #2147483648	@ 0x80000000
 8016590:	e5f0      	b.n	8016174 <RangeOffsetCal_Sequence+0x3a4>
 8016592:	9b01      	ldr	r3, [sp, #4]
 8016594:	428b      	cmp	r3, r1
 8016596:	f4ff addb 	bcc.w	8016150 <RangeOffsetCal_Sequence+0x380>
 801659a:	461a      	mov	r2, r3
 801659c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80165a0:	2a00      	cmp	r2, #0
 80165a2:	db1b      	blt.n	80165dc <RangeOffsetCal_Sequence+0x80c>
 80165a4:	468e      	mov	lr, r1
 80165a6:	b161      	cbz	r1, 80165c2 <RangeOffsetCal_Sequence+0x7f2>
 80165a8:	f04f 0e00 	mov.w	lr, #0
 80165ac:	e000      	b.n	80165b0 <RangeOffsetCal_Sequence+0x7e0>
 80165ae:	b141      	cbz	r1, 80165c2 <RangeOffsetCal_Sequence+0x7f2>
 80165b0:	428a      	cmp	r2, r1
 80165b2:	bf9c      	itt	ls
 80165b4:	1a89      	subls	r1, r1, r2
 80165b6:	ea4e 0e03 	orrls.w	lr, lr, r3
 80165ba:	085b      	lsrs	r3, r3, #1
 80165bc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80165c0:	d1f5      	bne.n	80165ae <RangeOffsetCal_Sequence+0x7de>
 80165c2:	4291      	cmp	r1, r2
 80165c4:	d301      	bcc.n	80165ca <RangeOffsetCal_Sequence+0x7fa>
 80165c6:	f10e 0e01 	add.w	lr, lr, #1
 80165ca:	ea9b 0f05 	teq	fp, r5
 80165ce:	d412      	bmi.n	80165f6 <RangeOffsetCal_Sequence+0x826>
 80165d0:	f1be 0f00 	cmp.w	lr, #0
 80165d4:	bfb8      	it	lt
 80165d6:	f06f 4e00 	mvnlt.w	lr, #2147483648	@ 0x80000000
 80165da:	e5cb      	b.n	8016174 <RangeOffsetCal_Sequence+0x3a4>
 80165dc:	4291      	cmp	r1, r2
 80165de:	d20f      	bcs.n	8016600 <RangeOffsetCal_Sequence+0x830>
 80165e0:	085b      	lsrs	r3, r3, #1
 80165e2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80165e6:	d009      	beq.n	80165fc <RangeOffsetCal_Sequence+0x82c>
 80165e8:	2900      	cmp	r1, #0
 80165ea:	d1dd      	bne.n	80165a8 <RangeOffsetCal_Sequence+0x7d8>
 80165ec:	ea9b 0f05 	teq	fp, r5
 80165f0:	468e      	mov	lr, r1
 80165f2:	f57f adbf 	bpl.w	8016174 <RangeOffsetCal_Sequence+0x3a4>
 80165f6:	f1ce 0e00 	rsb	lr, lr, #0
 80165fa:	e5bb      	b.n	8016174 <RangeOffsetCal_Sequence+0x3a4>
 80165fc:	469e      	mov	lr, r3
 80165fe:	e7e0      	b.n	80165c2 <RangeOffsetCal_Sequence+0x7f2>
 8016600:	469e      	mov	lr, r3
 8016602:	e7e2      	b.n	80165ca <RangeOffsetCal_Sequence+0x7fa>
 8016604:	461a      	mov	r2, r3
 8016606:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801660a:	2900      	cmp	r1, #0
 801660c:	d1cc      	bne.n	80165a8 <RangeOffsetCal_Sequence+0x7d8>
 801660e:	e7ed      	b.n	80165ec <RangeOffsetCal_Sequence+0x81c>
 8016610:	9a07      	ldr	r2, [sp, #28]
 8016612:	428a      	cmp	r2, r1
 8016614:	d039      	beq.n	801668a <RangeOffsetCal_Sequence+0x8ba>
 8016616:	f4ff addb 	bcc.w	80161d0 <RangeOffsetCal_Sequence+0x400>
 801661a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801661c:	428a      	cmp	r2, r1
 801661e:	f47f add1 	bne.w	80161c4 <RangeOffsetCal_Sequence+0x3f4>
 8016622:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8016624:	429a      	cmp	r2, r3
 8016626:	bf8c      	ite	hi
 8016628:	2300      	movhi	r3, #0
 801662a:	2301      	movls	r3, #1
 801662c:	e5cd      	b.n	80161ca <RangeOffsetCal_Sequence+0x3fa>
 801662e:	4242      	negs	r2, r0
 8016630:	42ba      	cmp	r2, r7
 8016632:	bf28      	it	cs
 8016634:	f44f 3380 	movcs.w	r3, #65536	@ 0x10000
 8016638:	f4ff ade5 	bcc.w	8016206 <RangeOffsetCal_Sequence+0x436>
 801663c:	2a00      	cmp	r2, #0
 801663e:	db36      	blt.n	80166ae <RangeOffsetCal_Sequence+0x8de>
 8016640:	4639      	mov	r1, r7
 8016642:	f04f 0900 	mov.w	r9, #0
 8016646:	e000      	b.n	801664a <RangeOffsetCal_Sequence+0x87a>
 8016648:	b161      	cbz	r1, 8016664 <RangeOffsetCal_Sequence+0x894>
 801664a:	4291      	cmp	r1, r2
 801664c:	bf24      	itt	cs
 801664e:	1a89      	subcs	r1, r1, r2
 8016650:	ea49 0903 	orrcs.w	r9, r9, r3
 8016654:	085b      	lsrs	r3, r3, #1
 8016656:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801665a:	d1f5      	bne.n	8016648 <RangeOffsetCal_Sequence+0x878>
 801665c:	4291      	cmp	r1, r2
 801665e:	d301      	bcc.n	8016664 <RangeOffsetCal_Sequence+0x894>
 8016660:	f109 0901 	add.w	r9, r9, #1
 8016664:	ea90 0f05 	teq	r0, r5
 8016668:	d446      	bmi.n	80166f8 <RangeOffsetCal_Sequence+0x928>
 801666a:	f1b9 0f00 	cmp.w	r9, #0
 801666e:	6823      	ldr	r3, [r4, #0]
 8016670:	f6ff add8 	blt.w	8016224 <RangeOffsetCal_Sequence+0x454>
 8016674:	2b00      	cmp	r3, #0
 8016676:	f6bf adda 	bge.w	801622e <RangeOffsetCal_Sequence+0x45e>
 801667a:	425b      	negs	r3, r3
 801667c:	e00d      	b.n	801669a <RangeOffsetCal_Sequence+0x8ca>
 801667e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016680:	429a      	cmp	r2, r3
 8016682:	bf8c      	ite	hi
 8016684:	2200      	movhi	r2, #0
 8016686:	2201      	movls	r2, #1
 8016688:	e597      	b.n	80161ba <RangeOffsetCal_Sequence+0x3ea>
 801668a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801668c:	429a      	cmp	r2, r3
 801668e:	f67f ad9f 	bls.w	80161d0 <RangeOffsetCal_Sequence+0x400>
 8016692:	e593      	b.n	80161bc <RangeOffsetCal_Sequence+0x3ec>
 8016694:	425b      	negs	r3, r3
 8016696:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 801669a:	fba9 3903 	umull	r3, r9, r9, r3
 801669e:	0c1a      	lsrs	r2, r3, #16
 80166a0:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 80166a4:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 80166a8:	4413      	add	r3, r2
 80166aa:	425b      	negs	r3, r3
 80166ac:	e5c7      	b.n	801623e <RangeOffsetCal_Sequence+0x46e>
 80166ae:	4297      	cmp	r7, r2
 80166b0:	d24e      	bcs.n	8016750 <RangeOffsetCal_Sequence+0x980>
 80166b2:	085b      	lsrs	r3, r3, #1
 80166b4:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80166b8:	d1c2      	bne.n	8016640 <RangeOffsetCal_Sequence+0x870>
 80166ba:	4699      	mov	r9, r3
 80166bc:	4639      	mov	r1, r7
 80166be:	e7cd      	b.n	801665c <RangeOffsetCal_Sequence+0x88c>
 80166c0:	1a71      	subs	r1, r6, r1
 80166c2:	f3c1 1080 	ubfx	r0, r1, #6, #1
 80166c6:	eb00 11d1 	add.w	r1, r0, r1, lsr #7
 80166ca:	4249      	negs	r1, r1
 80166cc:	e631      	b.n	8016332 <RangeOffsetCal_Sequence+0x562>
 80166ce:	1a71      	subs	r1, r6, r1
 80166d0:	f3c1 1080 	ubfx	r0, r1, #6, #1
 80166d4:	eb00 11d1 	add.w	r1, r0, r1, lsr #7
 80166d8:	4249      	negs	r1, r1
 80166da:	e63b      	b.n	8016354 <RangeOffsetCal_Sequence+0x584>
 80166dc:	1a71      	subs	r1, r6, r1
 80166de:	f3c1 1080 	ubfx	r0, r1, #6, #1
 80166e2:	eb00 11d1 	add.w	r1, r0, r1, lsr #7
 80166e6:	4249      	negs	r1, r1
 80166e8:	e645      	b.n	8016376 <RangeOffsetCal_Sequence+0x5a6>
 80166ea:	1a71      	subs	r1, r6, r1
 80166ec:	f3c1 1080 	ubfx	r0, r1, #6, #1
 80166f0:	eb00 11d1 	add.w	r1, r0, r1, lsr #7
 80166f4:	4249      	negs	r1, r1
 80166f6:	e64f      	b.n	8016398 <RangeOffsetCal_Sequence+0x5c8>
 80166f8:	6823      	ldr	r3, [r4, #0]
 80166fa:	f1c9 0900 	rsb	r9, r9, #0
 80166fe:	2b00      	cmp	r3, #0
 8016700:	464a      	mov	r2, r9
 8016702:	da11      	bge.n	8016728 <RangeOffsetCal_Sequence+0x958>
 8016704:	f1b9 0f00 	cmp.w	r9, #0
 8016708:	f1c3 0300 	rsb	r3, r3, #0
 801670c:	dac5      	bge.n	801669a <RangeOffsetCal_Sequence+0x8ca>
 801670e:	4252      	negs	r2, r2
 8016710:	17d0      	asrs	r0, r2, #31
 8016712:	fba2 2103 	umull	r2, r1, r2, r3
 8016716:	fb03 1100 	mla	r1, r3, r0, r1
 801671a:	0c13      	lsrs	r3, r2, #16
 801671c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8016720:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8016724:	4413      	add	r3, r2
 8016726:	e58a      	b.n	801623e <RangeOffsetCal_Sequence+0x46e>
 8016728:	f1b9 0f00 	cmp.w	r9, #0
 801672c:	f6bf ad7f 	bge.w	801622e <RangeOffsetCal_Sequence+0x45e>
 8016730:	4252      	negs	r2, r2
 8016732:	17d0      	asrs	r0, r2, #31
 8016734:	fba2 2103 	umull	r2, r1, r2, r3
 8016738:	fb03 1100 	mla	r1, r3, r0, r1
 801673c:	0c13      	lsrs	r3, r2, #16
 801673e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8016742:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8016746:	4413      	add	r3, r2
 8016748:	e7af      	b.n	80166aa <RangeOffsetCal_Sequence+0x8da>
 801674a:	460f      	mov	r7, r1
 801674c:	f7ff bbf7 	b.w	8015f3e <RangeOffsetCal_Sequence+0x16e>
 8016750:	4699      	mov	r9, r3
 8016752:	e787      	b.n	8016664 <RangeOffsetCal_Sequence+0x894>
 8016754:	484a      	ldr	r0, [pc, #296]	@ (8016880 <RangeOffsetCal_Sequence+0xab0>)
 8016756:	f7fc fc1d 	bl	8012f94 <print>
 801675a:	f06f 0372 	mvn.w	r3, #114	@ 0x72
 801675e:	9306      	str	r3, [sp, #24]
 8016760:	9806      	ldr	r0, [sp, #24]
 8016762:	f20d 6d5c 	addw	sp, sp, #1628	@ 0x65c
 8016766:	ecbd 8b02 	vpop	{d8}
 801676a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801676e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8016772:	e765      	b.n	8016640 <RangeOffsetCal_Sequence+0x870>
 8016774:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8016778:	930d      	str	r3, [sp, #52]	@ 0x34
 801677a:	f7ff bb37 	b.w	8015dec <RangeOffsetCal_Sequence+0x1c>
 801677e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016780:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8016784:	f47f ada6 	bne.w	80162d4 <RangeOffsetCal_Sequence+0x504>
 8016788:	483e      	ldr	r0, [pc, #248]	@ (8016884 <RangeOffsetCal_Sequence+0xab4>)
 801678a:	f7fc fc03 	bl	8012f94 <print>
 801678e:	f06f 0372 	mvn.w	r3, #114	@ 0x72
 8016792:	9306      	str	r3, [sp, #24]
 8016794:	e66c      	b.n	8016470 <RangeOffsetCal_Sequence+0x6a0>
 8016796:	2800      	cmp	r0, #0
 8016798:	da06      	bge.n	80167a8 <RangeOffsetCal_Sequence+0x9d8>
 801679a:	42a0      	cmp	r0, r4
 801679c:	d044      	beq.n	8016828 <RangeOffsetCal_Sequence+0xa58>
 801679e:	f036 4300 	bics.w	r3, r6, #2147483648	@ 0x80000000
 80167a2:	f027 4000 	bic.w	r0, r7, #2147483648	@ 0x80000000
 80167a6:	d056      	beq.n	8016856 <RangeOffsetCal_Sequence+0xa86>
 80167a8:	2600      	movs	r6, #0
 80167aa:	e000      	b.n	80167ae <RangeOffsetCal_Sequence+0x9de>
 80167ac:	b154      	cbz	r4, 80167c4 <RangeOffsetCal_Sequence+0x9f4>
 80167ae:	4284      	cmp	r4, r0
 80167b0:	bf24      	itt	cs
 80167b2:	1a24      	subcs	r4, r4, r0
 80167b4:	431e      	orrcs	r6, r3
 80167b6:	085b      	lsrs	r3, r3, #1
 80167b8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80167bc:	d1f6      	bne.n	80167ac <RangeOffsetCal_Sequence+0x9dc>
 80167be:	4284      	cmp	r4, r0
 80167c0:	d300      	bcc.n	80167c4 <RangeOffsetCal_Sequence+0x9f4>
 80167c2:	3601      	adds	r6, #1
 80167c4:	ea91 0f02 	teq	r1, r2
 80167c8:	d439      	bmi.n	801683e <RangeOffsetCal_Sequence+0xa6e>
 80167ca:	2e00      	cmp	r6, #0
 80167cc:	bfb8      	it	lt
 80167ce:	f06f 4600 	mvnlt.w	r6, #2147483648	@ 0x80000000
 80167d2:	e59c      	b.n	801630e <RangeOffsetCal_Sequence+0x53e>
 80167d4:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80167d8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80167da:	f822 3b02 	strh.w	r3, [r2], #2
 80167de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80167e0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80167e2:	3340      	adds	r3, #64	@ 0x40
 80167e4:	930e      	str	r3, [sp, #56]	@ 0x38
 80167e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80167e8:	b3bb      	cbz	r3, 801685a <RangeOffsetCal_Sequence+0xa8a>
 80167ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80167ec:	2280      	movs	r2, #128	@ 0x80
 80167ee:	a926      	add	r1, sp, #152	@ 0x98
 80167f0:	f104 001c 	add.w	r0, r4, #28
 80167f4:	f013 f845 	bl	8029882 <memcpy>
 80167f8:	f8d4 3288 	ldr.w	r3, [r4, #648]	@ 0x288
 80167fc:	9806      	ldr	r0, [sp, #24]
 80167fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8016802:	f8c4 3288 	str.w	r3, [r4, #648]	@ 0x288
 8016806:	f20d 6d5c 	addw	sp, sp, #1628	@ 0x65c
 801680a:	ecbd 8b02 	vpop	{d8}
 801680e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016812:	4b1d      	ldr	r3, [pc, #116]	@ (8016888 <RangeOffsetCal_Sequence+0xab8>)
 8016814:	e7e0      	b.n	80167d8 <RangeOffsetCal_Sequence+0xa08>
 8016816:	1b9e      	subs	r6, r3, r6
 8016818:	f3c6 1380 	ubfx	r3, r6, #6, #1
 801681c:	eb03 13d6 	add.w	r3, r3, r6, lsr #7
 8016820:	425a      	negs	r2, r3
 8016822:	e5cb      	b.n	80163bc <RangeOffsetCal_Sequence+0x5ec>
 8016824:	2200      	movs	r2, #0
 8016826:	e5c9      	b.n	80163bc <RangeOffsetCal_Sequence+0x5ec>
 8016828:	461e      	mov	r6, r3
 801682a:	e7cb      	b.n	80167c4 <RangeOffsetCal_Sequence+0x9f4>
 801682c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8016830:	2c00      	cmp	r4, #0
 8016832:	d1b9      	bne.n	80167a8 <RangeOffsetCal_Sequence+0x9d8>
 8016834:	ea91 0f02 	teq	r1, r2
 8016838:	4626      	mov	r6, r4
 801683a:	f57f ad68 	bpl.w	801630e <RangeOffsetCal_Sequence+0x53e>
 801683e:	4276      	negs	r6, r6
 8016840:	e565      	b.n	801630e <RangeOffsetCal_Sequence+0x53e>
 8016842:	2b00      	cmp	r3, #0
 8016844:	db18      	blt.n	8016878 <RangeOffsetCal_Sequence+0xaa8>
 8016846:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801684a:	e771      	b.n	8016730 <RangeOffsetCal_Sequence+0x960>
 801684c:	2b00      	cmp	r3, #0
 801684e:	db0f      	blt.n	8016870 <RangeOffsetCal_Sequence+0xaa0>
 8016850:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8016854:	e67d      	b.n	8016552 <RangeOffsetCal_Sequence+0x782>
 8016856:	461e      	mov	r6, r3
 8016858:	e7b1      	b.n	80167be <RangeOffsetCal_Sequence+0x9ee>
 801685a:	2301      	movs	r3, #1
 801685c:	930c      	str	r3, [sp, #48]	@ 0x30
 801685e:	f7ff badc 	b.w	8015e1a <RangeOffsetCal_Sequence+0x4a>
 8016862:	480a      	ldr	r0, [pc, #40]	@ (801688c <RangeOffsetCal_Sequence+0xabc>)
 8016864:	f7fc fb96 	bl	8012f94 <print>
 8016868:	f06f 0372 	mvn.w	r3, #114	@ 0x72
 801686c:	9306      	str	r3, [sp, #24]
 801686e:	e5ff      	b.n	8016470 <RangeOffsetCal_Sequence+0x6a0>
 8016870:	425b      	negs	r3, r3
 8016872:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8016876:	e65b      	b.n	8016530 <RangeOffsetCal_Sequence+0x760>
 8016878:	425b      	negs	r3, r3
 801687a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801687e:	e746      	b.n	801670e <RangeOffsetCal_Sequence+0x93e>
 8016880:	0802d174 	.word	0x0802d174
 8016884:	0802d130 	.word	0x0802d130
 8016888:	ffff8000 	.word	0xffff8000
 801688c:	0802d084 	.word	0x0802d084

08016890 <VsubCal_Sequence>:
 8016890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016894:	4680      	mov	r8, r0
 8016896:	b0cc      	sub	sp, #304	@ 0x130
 8016898:	4615      	mov	r5, r2
 801689a:	a802      	add	r0, sp, #8
 801689c:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80168a0:	f012 ffef 	bl	8029882 <memcpy>
 80168a4:	f8d8 307c 	ldr.w	r3, [r8, #124]	@ 0x7c
 80168a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80168ac:	2600      	movs	r6, #0
 80168ae:	f8c8 307c 	str.w	r3, [r8, #124]	@ 0x7c
 80168b2:	462a      	mov	r2, r5
 80168b4:	a902      	add	r1, sp, #8
 80168b6:	4640      	mov	r0, r8
 80168b8:	f88d 60b4 	strb.w	r6, [sp, #180]	@ 0xb4
 80168bc:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 80168c0:	f7fe fc2a 	bl	8015118 <Argus_Core_SetSettingsSync>
 80168c4:	1e04      	subs	r4, r0, #0
 80168c6:	db60      	blt.n	801698a <VsubCal_Sequence+0xfa>
 80168c8:	f9b8 3330 	ldrsh.w	r3, [r8, #816]	@ 0x330
 80168cc:	f8ad 6002 	strh.w	r6, [sp, #2]
 80168d0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80168d4:	4293      	cmp	r3, r2
 80168d6:	f8ad 6004 	strh.w	r6, [sp, #4]
 80168da:	f8ad 6006 	strh.w	r6, [sp, #6]
 80168de:	d058      	beq.n	8016992 <VsubCal_Sequence+0x102>
 80168e0:	111f      	asrs	r7, r3, #4
 80168e2:	f895 3267 	ldrb.w	r3, [r5, #615]	@ 0x267
 80168e6:	f895 6290 	ldrb.w	r6, [r5, #656]	@ 0x290
 80168ea:	fb13 f307 	smulbb	r3, r3, r7
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	f895 7291 	ldrb.w	r7, [r5, #657]	@ 0x291
 80168f4:	f280 8126 	bge.w	8016b44 <VsubCal_Sequence+0x2b4>
 80168f8:	425b      	negs	r3, r3
 80168fa:	f3c3 2280 	ubfx	r2, r3, #10, #1
 80168fe:	eb02 23d3 	add.w	r3, r2, r3, lsr #11
 8016902:	1aff      	subs	r7, r7, r3
 8016904:	b2ff      	uxtb	r7, r7
 8016906:	42b7      	cmp	r7, r6
 8016908:	f895 3266 	ldrb.w	r3, [r5, #614]	@ 0x266
 801690c:	bf38      	it	cc
 801690e:	4637      	movcc	r7, r6
 8016910:	429f      	cmp	r7, r3
 8016912:	bf28      	it	cs
 8016914:	461f      	movcs	r7, r3
 8016916:	42b7      	cmp	r7, r6
 8016918:	f240 80e1 	bls.w	8016ade <VsubCal_Sequence+0x24e>
 801691c:	f108 0804 	add.w	r8, r8, #4
 8016920:	f10d 0102 	add.w	r1, sp, #2
 8016924:	4640      	mov	r0, r8
 8016926:	f00a fc03 	bl	8021130 <Argus_Dev_BglMeasurement>
 801692a:	1e04      	subs	r4, r0, #0
 801692c:	f2c0 8111 	blt.w	8016b52 <VsubCal_Sequence+0x2c2>
 8016930:	f8b5 22b6 	ldrh.w	r2, [r5, #694]	@ 0x2b6
 8016934:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016938:	429a      	cmp	r2, r3
 801693a:	f0c0 80d7 	bcc.w	8016aec <VsubCal_Sequence+0x25c>
 801693e:	f8b5 32b4 	ldrh.w	r3, [r5, #692]	@ 0x2b4
 8016942:	4632      	mov	r2, r6
 8016944:	a901      	add	r1, sp, #4
 8016946:	4640      	mov	r0, r8
 8016948:	f00a fd5c 	bl	8021404 <Argus_Dev_VsubMeasurement>
 801694c:	1e04      	subs	r4, r0, #0
 801694e:	f2c0 80d9 	blt.w	8016b04 <VsubCal_Sequence+0x274>
 8016952:	42b7      	cmp	r7, r6
 8016954:	d809      	bhi.n	801696a <VsubCal_Sequence+0xda>
 8016956:	e02c      	b.n	80169b2 <VsubCal_Sequence+0x122>
 8016958:	f8b5 1262 	ldrh.w	r1, [r5, #610]	@ 0x262
 801695c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8016960:	4291      	cmp	r1, r2
 8016962:	d21b      	bcs.n	801699c <VsubCal_Sequence+0x10c>
 8016964:	b2df      	uxtb	r7, r3
 8016966:	42b7      	cmp	r7, r6
 8016968:	d923      	bls.n	80169b2 <VsubCal_Sequence+0x122>
 801696a:	2301      	movs	r3, #1
 801696c:	463a      	mov	r2, r7
 801696e:	f10d 0106 	add.w	r1, sp, #6
 8016972:	4640      	mov	r0, r8
 8016974:	f00a fd46 	bl	8021404 <Argus_Dev_VsubMeasurement>
 8016978:	1e04      	subs	r4, r0, #0
 801697a:	f107 33ff 	add.w	r3, r7, #4294967295
 801697e:	daeb      	bge.n	8016958 <VsubCal_Sequence+0xc8>
 8016980:	4881      	ldr	r0, [pc, #516]	@ (8016b88 <VsubCal_Sequence+0x2f8>)
 8016982:	4622      	mov	r2, r4
 8016984:	4631      	mov	r1, r6
 8016986:	f7fc fb05 	bl	8012f94 <print>
 801698a:	4620      	mov	r0, r4
 801698c:	b04c      	add	sp, #304	@ 0x130
 801698e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016992:	f895 6290 	ldrb.w	r6, [r5, #656]	@ 0x290
 8016996:	f895 7291 	ldrb.w	r7, [r5, #657]	@ 0x291
 801699a:	e7b4      	b.n	8016906 <VsubCal_Sequence+0x76>
 801699c:	f8b5 32b4 	ldrh.w	r3, [r5, #692]	@ 0x2b4
 80169a0:	4640      	mov	r0, r8
 80169a2:	463a      	mov	r2, r7
 80169a4:	f10d 0106 	add.w	r1, sp, #6
 80169a8:	f00a fd2c 	bl	8021404 <Argus_Dev_VsubMeasurement>
 80169ac:	1e04      	subs	r4, r0, #0
 80169ae:	f2c0 80dc 	blt.w	8016b6a <VsubCal_Sequence+0x2da>
 80169b2:	2f00      	cmp	r7, #0
 80169b4:	f000 80ac 	beq.w	8016b10 <VsubCal_Sequence+0x280>
 80169b8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80169bc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80169c0:	1bbe      	subs	r6, r7, r6
 80169c2:	2e00      	cmp	r6, #0
 80169c4:	eba3 0002 	sub.w	r0, r3, r2
 80169c8:	f340 80d8 	ble.w	8016b7c <VsubCal_Sequence+0x2ec>
 80169cc:	2800      	cmp	r0, #0
 80169ce:	f340 80d5 	ble.w	8016b7c <VsubCal_Sequence+0x2ec>
 80169d2:	0043      	lsls	r3, r0, #1
 80169d4:	ebb3 4f06 	cmp.w	r3, r6, lsl #16
 80169d8:	ea4f 4106 	mov.w	r1, r6, lsl #16
 80169dc:	f0c0 80cb 	bcc.w	8016b76 <VsubCal_Sequence+0x2e6>
 80169e0:	1a5b      	subs	r3, r3, r1
 80169e2:	005b      	lsls	r3, r3, #1
 80169e4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80169e8:	d06a      	beq.n	8016ac0 <VsubCal_Sequence+0x230>
 80169ea:	4299      	cmp	r1, r3
 80169ec:	bf9c      	itt	ls
 80169ee:	1a5b      	subls	r3, r3, r1
 80169f0:	f440 4080 	orrls.w	r0, r0, #16384	@ 0x4000
 80169f4:	005b      	lsls	r3, r3, #1
 80169f6:	d063      	beq.n	8016ac0 <VsubCal_Sequence+0x230>
 80169f8:	4299      	cmp	r1, r3
 80169fa:	bf9c      	itt	ls
 80169fc:	1a5b      	subls	r3, r3, r1
 80169fe:	f440 5000 	orrls.w	r0, r0, #8192	@ 0x2000
 8016a02:	005b      	lsls	r3, r3, #1
 8016a04:	d05c      	beq.n	8016ac0 <VsubCal_Sequence+0x230>
 8016a06:	4299      	cmp	r1, r3
 8016a08:	bf9c      	itt	ls
 8016a0a:	1a5b      	subls	r3, r3, r1
 8016a0c:	f440 5080 	orrls.w	r0, r0, #4096	@ 0x1000
 8016a10:	005b      	lsls	r3, r3, #1
 8016a12:	d055      	beq.n	8016ac0 <VsubCal_Sequence+0x230>
 8016a14:	4299      	cmp	r1, r3
 8016a16:	bf9c      	itt	ls
 8016a18:	1a5b      	subls	r3, r3, r1
 8016a1a:	f440 6000 	orrls.w	r0, r0, #2048	@ 0x800
 8016a1e:	005b      	lsls	r3, r3, #1
 8016a20:	d04e      	beq.n	8016ac0 <VsubCal_Sequence+0x230>
 8016a22:	4299      	cmp	r1, r3
 8016a24:	bf9c      	itt	ls
 8016a26:	1a5b      	subls	r3, r3, r1
 8016a28:	f440 6080 	orrls.w	r0, r0, #1024	@ 0x400
 8016a2c:	005b      	lsls	r3, r3, #1
 8016a2e:	d047      	beq.n	8016ac0 <VsubCal_Sequence+0x230>
 8016a30:	428b      	cmp	r3, r1
 8016a32:	bf24      	itt	cs
 8016a34:	1a5b      	subcs	r3, r3, r1
 8016a36:	f440 7000 	orrcs.w	r0, r0, #512	@ 0x200
 8016a3a:	005b      	lsls	r3, r3, #1
 8016a3c:	d040      	beq.n	8016ac0 <VsubCal_Sequence+0x230>
 8016a3e:	4299      	cmp	r1, r3
 8016a40:	bf9c      	itt	ls
 8016a42:	1a5b      	subls	r3, r3, r1
 8016a44:	f440 7080 	orrls.w	r0, r0, #256	@ 0x100
 8016a48:	005b      	lsls	r3, r3, #1
 8016a4a:	d039      	beq.n	8016ac0 <VsubCal_Sequence+0x230>
 8016a4c:	428b      	cmp	r3, r1
 8016a4e:	bf24      	itt	cs
 8016a50:	1a5b      	subcs	r3, r3, r1
 8016a52:	f040 0080 	orrcs.w	r0, r0, #128	@ 0x80
 8016a56:	005b      	lsls	r3, r3, #1
 8016a58:	d032      	beq.n	8016ac0 <VsubCal_Sequence+0x230>
 8016a5a:	4299      	cmp	r1, r3
 8016a5c:	bf9c      	itt	ls
 8016a5e:	1a5b      	subls	r3, r3, r1
 8016a60:	f040 0040 	orrls.w	r0, r0, #64	@ 0x40
 8016a64:	005b      	lsls	r3, r3, #1
 8016a66:	d02b      	beq.n	8016ac0 <VsubCal_Sequence+0x230>
 8016a68:	4299      	cmp	r1, r3
 8016a6a:	bf9c      	itt	ls
 8016a6c:	1a5b      	subls	r3, r3, r1
 8016a6e:	f040 0020 	orrls.w	r0, r0, #32
 8016a72:	005b      	lsls	r3, r3, #1
 8016a74:	d024      	beq.n	8016ac0 <VsubCal_Sequence+0x230>
 8016a76:	4299      	cmp	r1, r3
 8016a78:	bf9c      	itt	ls
 8016a7a:	1a5b      	subls	r3, r3, r1
 8016a7c:	f040 0010 	orrls.w	r0, r0, #16
 8016a80:	005b      	lsls	r3, r3, #1
 8016a82:	d01d      	beq.n	8016ac0 <VsubCal_Sequence+0x230>
 8016a84:	4299      	cmp	r1, r3
 8016a86:	bf9c      	itt	ls
 8016a88:	1a5b      	subls	r3, r3, r1
 8016a8a:	f040 0008 	orrls.w	r0, r0, #8
 8016a8e:	005b      	lsls	r3, r3, #1
 8016a90:	d016      	beq.n	8016ac0 <VsubCal_Sequence+0x230>
 8016a92:	4299      	cmp	r1, r3
 8016a94:	bf9c      	itt	ls
 8016a96:	1a5b      	subls	r3, r3, r1
 8016a98:	f040 0004 	orrls.w	r0, r0, #4
 8016a9c:	005b      	lsls	r3, r3, #1
 8016a9e:	d00f      	beq.n	8016ac0 <VsubCal_Sequence+0x230>
 8016aa0:	4299      	cmp	r1, r3
 8016aa2:	bf9c      	itt	ls
 8016aa4:	1a5b      	subls	r3, r3, r1
 8016aa6:	f040 0002 	orrls.w	r0, r0, #2
 8016aaa:	005b      	lsls	r3, r3, #1
 8016aac:	d008      	beq.n	8016ac0 <VsubCal_Sequence+0x230>
 8016aae:	4299      	cmp	r1, r3
 8016ab0:	bf9c      	itt	ls
 8016ab2:	1a5b      	subls	r3, r3, r1
 8016ab4:	f040 0001 	orrls.w	r0, r0, #1
 8016ab8:	ebb1 0f43 	cmp.w	r1, r3, lsl #1
 8016abc:	bf98      	it	ls
 8016abe:	3001      	addls	r0, #1
 8016ac0:	f8d5 3288 	ldr.w	r3, [r5, #648]	@ 0x288
 8016ac4:	f8a5 028e 	strh.w	r0, [r5, #654]	@ 0x28e
 8016ac8:	2400      	movs	r4, #0
 8016aca:	f043 0303 	orr.w	r3, r3, #3
 8016ace:	4620      	mov	r0, r4
 8016ad0:	f8a5 228c 	strh.w	r2, [r5, #652]	@ 0x28c
 8016ad4:	f8c5 3288 	str.w	r3, [r5, #648]	@ 0x288
 8016ad8:	b04c      	add	sp, #304	@ 0x130
 8016ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ade:	4639      	mov	r1, r7
 8016ae0:	482a      	ldr	r0, [pc, #168]	@ (8016b8c <VsubCal_Sequence+0x2fc>)
 8016ae2:	4632      	mov	r2, r6
 8016ae4:	f7fc fa56 	bl	8012f94 <print>
 8016ae8:	2700      	movs	r7, #0
 8016aea:	e717      	b.n	801691c <VsubCal_Sequence+0x8c>
 8016aec:	4828      	ldr	r0, [pc, #160]	@ (8016b90 <VsubCal_Sequence+0x300>)
 8016aee:	f7fc fa51 	bl	8012f94 <print>
 8016af2:	f8b5 32b4 	ldrh.w	r3, [r5, #692]	@ 0x2b4
 8016af6:	4640      	mov	r0, r8
 8016af8:	4632      	mov	r2, r6
 8016afa:	a901      	add	r1, sp, #4
 8016afc:	f00a fc82 	bl	8021404 <Argus_Dev_VsubMeasurement>
 8016b00:	1e04      	subs	r4, r0, #0
 8016b02:	da05      	bge.n	8016b10 <VsubCal_Sequence+0x280>
 8016b04:	4622      	mov	r2, r4
 8016b06:	4631      	mov	r1, r6
 8016b08:	4822      	ldr	r0, [pc, #136]	@ (8016b94 <VsubCal_Sequence+0x304>)
 8016b0a:	f7fc fa43 	bl	8012f94 <print>
 8016b0e:	e73c      	b.n	801698a <VsubCal_Sequence+0xfa>
 8016b10:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016b14:	f895 22b8 	ldrb.w	r2, [r5, #696]	@ 0x2b8
 8016b18:	f8d5 1288 	ldr.w	r1, [r5, #648]	@ 0x288
 8016b1c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8016b20:	fb03 f202 	mul.w	r2, r3, r2
 8016b24:	f3c2 13c0 	ubfx	r3, r2, #7, #1
 8016b28:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8016b2c:	2400      	movs	r4, #0
 8016b2e:	4403      	add	r3, r0
 8016b30:	f041 0101 	orr.w	r1, r1, #1
 8016b34:	4620      	mov	r0, r4
 8016b36:	f8a5 328c 	strh.w	r3, [r5, #652]	@ 0x28c
 8016b3a:	f8c5 1288 	str.w	r1, [r5, #648]	@ 0x288
 8016b3e:	b04c      	add	sp, #304	@ 0x130
 8016b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b44:	f3c3 2280 	ubfx	r2, r3, #10, #1
 8016b48:	eb02 23d3 	add.w	r3, r2, r3, lsr #11
 8016b4c:	441f      	add	r7, r3
 8016b4e:	b2ff      	uxtb	r7, r7
 8016b50:	e6d9      	b.n	8016906 <VsubCal_Sequence+0x76>
 8016b52:	4621      	mov	r1, r4
 8016b54:	4810      	ldr	r0, [pc, #64]	@ (8016b98 <VsubCal_Sequence+0x308>)
 8016b56:	f7fc fa1d 	bl	8012f94 <print>
 8016b5a:	21c3      	movs	r1, #195	@ 0xc3
 8016b5c:	4640      	mov	r0, r8
 8016b5e:	f008 fdcd 	bl	801f6fc <Argus_Dev_ClearStatus>
 8016b62:	4620      	mov	r0, r4
 8016b64:	b04c      	add	sp, #304	@ 0x130
 8016b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b6a:	4622      	mov	r2, r4
 8016b6c:	4639      	mov	r1, r7
 8016b6e:	480b      	ldr	r0, [pc, #44]	@ (8016b9c <VsubCal_Sequence+0x30c>)
 8016b70:	f7fc fa10 	bl	8012f94 <print>
 8016b74:	e709      	b.n	801698a <VsubCal_Sequence+0xfa>
 8016b76:	0083      	lsls	r3, r0, #2
 8016b78:	2000      	movs	r0, #0
 8016b7a:	e736      	b.n	80169ea <VsubCal_Sequence+0x15a>
 8016b7c:	4808      	ldr	r0, [pc, #32]	@ (8016ba0 <VsubCal_Sequence+0x310>)
 8016b7e:	f7fc fa09 	bl	8012f94 <print>
 8016b82:	f06f 0473 	mvn.w	r4, #115	@ 0x73
 8016b86:	e700      	b.n	801698a <VsubCal_Sequence+0xfa>
 8016b88:	0802d3c4 	.word	0x0802d3c4
 8016b8c:	0802d254 	.word	0x0802d254
 8016b90:	0802d31c 	.word	0x0802d31c
 8016b94:	0802d370 	.word	0x0802d370
 8016b98:	0802d2d0 	.word	0x0802d2d0
 8016b9c:	0802d420 	.word	0x0802d420
 8016ba0:	0802d474 	.word	0x0802d474

08016ba4 <Argus_Core_ExecuteVsubCalibrationSequence>:
 8016ba4:	f8d0 3120 	ldr.w	r3, [r0, #288]	@ 0x120
 8016ba8:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8016bac:	b123      	cbz	r3, 8016bb8 <Argus_Core_ExecuteVsubCalibrationSequence+0x14>
 8016bae:	4a06      	ldr	r2, [pc, #24]	@ (8016bc8 <Argus_Core_ExecuteVsubCalibrationSequence+0x24>)
 8016bb0:	4906      	ldr	r1, [pc, #24]	@ (8016bcc <Argus_Core_ExecuteVsubCalibrationSequence+0x28>)
 8016bb2:	2300      	movs	r3, #0
 8016bb4:	f7fe bab4 	b.w	8015120 <RunSequence>
 8016bb8:	b510      	push	{r4, lr}
 8016bba:	4805      	ldr	r0, [pc, #20]	@ (8016bd0 <Argus_Core_ExecuteVsubCalibrationSequence+0x2c>)
 8016bbc:	f7fc f9ea 	bl	8012f94 <print>
 8016bc0:	f06f 0004 	mvn.w	r0, #4
 8016bc4:	bd10      	pop	{r4, pc}
 8016bc6:	bf00      	nop
 8016bc8:	0802d500 	.word	0x0802d500
 8016bcc:	08016891 	.word	0x08016891
 8016bd0:	0802d4c4 	.word	0x0802d4c4

08016bd4 <Argus_Core_ExecuteXtalkCalibrationSequence>:
 8016bd4:	4a02      	ldr	r2, [pc, #8]	@ (8016be0 <Argus_Core_ExecuteXtalkCalibrationSequence+0xc>)
 8016bd6:	4903      	ldr	r1, [pc, #12]	@ (8016be4 <Argus_Core_ExecuteXtalkCalibrationSequence+0x10>)
 8016bd8:	2300      	movs	r3, #0
 8016bda:	f7fe baa1 	b.w	8015120 <RunSequence>
 8016bde:	bf00      	nop
 8016be0:	0802d520 	.word	0x0802d520
 8016be4:	080151dd 	.word	0x080151dd

08016be8 <Argus_Core_ExecuteRangeOffsetCalibrationSequence>:
 8016be8:	b500      	push	{lr}
 8016bea:	b083      	sub	sp, #12
 8016bec:	4a04      	ldr	r2, [pc, #16]	@ (8016c00 <Argus_Core_ExecuteRangeOffsetCalibrationSequence+0x18>)
 8016bee:	9101      	str	r1, [sp, #4]
 8016bf0:	ab01      	add	r3, sp, #4
 8016bf2:	4904      	ldr	r1, [pc, #16]	@ (8016c04 <Argus_Core_ExecuteRangeOffsetCalibrationSequence+0x1c>)
 8016bf4:	f7fe fa94 	bl	8015120 <RunSequence>
 8016bf8:	b003      	add	sp, #12
 8016bfa:	f85d fb04 	ldr.w	pc, [sp], #4
 8016bfe:	bf00      	nop
 8016c00:	0802d540 	.word	0x0802d540
 8016c04:	08015dd1 	.word	0x08015dd1

08016c08 <GetStatusCallback>:
 8016c08:	6008      	str	r0, [r1, #0]
 8016c0a:	4770      	bx	lr

08016c0c <MeasurementFinish>:
 8016c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c10:	2300      	movs	r3, #0
 8016c12:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8016c16:	610b      	str	r3, [r1, #16]
 8016c18:	460c      	mov	r4, r1
 8016c1a:	4605      	mov	r5, r0
 8016c1c:	b082      	sub	sp, #8
 8016c1e:	f8d1 03ac 	ldr.w	r0, [r1, #940]	@ 0x3ac
 8016c22:	21c4      	movs	r1, #196	@ 0xc4
 8016c24:	e9d4 67e9 	ldrd	r6, r7, [r4, #932]	@ 0x3a4
 8016c28:	f008 fd68 	bl	801f6fc <Argus_Dev_ClearStatus>
 8016c2c:	2302      	movs	r3, #2
 8016c2e:	f115 0f72 	cmn.w	r5, #114	@ 0x72
 8016c32:	f888 31c5 	strb.w	r3, [r8, #453]	@ 0x1c5
 8016c36:	d04c      	beq.n	8016cd2 <MeasurementFinish+0xc6>
 8016c38:	f025 0304 	bic.w	r3, r5, #4
 8016c3c:	3306      	adds	r3, #6
 8016c3e:	d048      	beq.n	8016cd2 <MeasurementFinish+0xc6>
 8016c40:	2d00      	cmp	r5, #0
 8016c42:	db56      	blt.n	8016cf2 <MeasurementFinish+0xe6>
 8016c44:	a901      	add	r1, sp, #4
 8016c46:	4668      	mov	r0, sp
 8016c48:	e9d8 a901 	ldrd	sl, r9, [r8, #4]
 8016c4c:	f7f0 f830 	bl	8006cb0 <Timer_GetCounterValue>
 8016c50:	e9dd 1300 	ldrd	r1, r3, [sp]
 8016c54:	4599      	cmp	r9, r3
 8016c56:	d85d      	bhi.n	8016d14 <MeasurementFinish+0x108>
 8016c58:	eba1 010a 	sub.w	r1, r1, sl
 8016c5c:	eba3 0909 	sub.w	r9, r3, r9
 8016c60:	f241 03c5 	movw	r3, #4293	@ 0x10c5
 8016c64:	4299      	cmp	r1, r3
 8016c66:	d951      	bls.n	8016d0c <MeasurementFinish+0x100>
 8016c68:	f241 03c6 	movw	r3, #4294	@ 0x10c6
 8016c6c:	4299      	cmp	r1, r3
 8016c6e:	d04a      	beq.n	8016d06 <MeasurementFinish+0xfa>
 8016c70:	f04f 39ff 	mov.w	r9, #4294967295
 8016c74:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8016c78:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 8016c7c:	eba9 0101 	sub.w	r1, r9, r1
 8016c80:	f500 70b4 	add.w	r0, r0, #360	@ 0x168
 8016c84:	f005 fe9a 	bl	801c9bc <Argus_Dca_UpdateTimings>
 8016c88:	b9dd      	cbnz	r5, 8016cc2 <MeasurementFinish+0xb6>
 8016c8a:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 8016c8e:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 8016c92:	f011 f965 	bl	8027f60 <ADS_CheckTimeout>
 8016c96:	f7ef fc27 	bl	80064e8 <IRQ_LOCK>
 8016c9a:	7923      	ldrb	r3, [r4, #4]
 8016c9c:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8016ca0:	b373      	cbz	r3, 8016d00 <MeasurementFinish+0xf4>
 8016ca2:	f04f 0800 	mov.w	r8, #0
 8016ca6:	f884 8004 	strb.w	r8, [r4, #4]
 8016caa:	f7ef fbfb 	bl	80064a4 <IRQ_UNLOCK>
 8016cae:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 8016cb2:	21c4      	movs	r1, #196	@ 0xc4
 8016cb4:	f008 fcec 	bl	801f690 <Argus_Dev_SetStatus>
 8016cb8:	4605      	mov	r5, r0
 8016cba:	b188      	cbz	r0, 8016ce0 <MeasurementFinish+0xd4>
 8016cbc:	2301      	movs	r3, #1
 8016cbe:	7123      	strb	r3, [r4, #4]
 8016cc0:	4645      	mov	r5, r8
 8016cc2:	b196      	cbz	r6, 8016cea <MeasurementFinish+0xde>
 8016cc4:	4639      	mov	r1, r7
 8016cc6:	4628      	mov	r0, r5
 8016cc8:	4633      	mov	r3, r6
 8016cca:	b002      	add	sp, #8
 8016ccc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016cd0:	4718      	bx	r3
 8016cd2:	f8d8 3000 	ldr.w	r3, [r8]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	dbd7      	blt.n	8016c8a <MeasurementFinish+0x7e>
 8016cda:	f8c8 5000 	str.w	r5, [r8]
 8016cde:	e7d4      	b.n	8016c8a <MeasurementFinish+0x7e>
 8016ce0:	4620      	mov	r0, r4
 8016ce2:	f000 f921 	bl	8016f28 <Argus_Measurement_Start.part.0>
 8016ce6:	2e00      	cmp	r6, #0
 8016ce8:	d1ec      	bne.n	8016cc4 <MeasurementFinish+0xb8>
 8016cea:	4628      	mov	r0, r5
 8016cec:	b002      	add	sp, #8
 8016cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016cf2:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 8016cf6:	f8c8 5000 	str.w	r5, [r8]
 8016cfa:	f008 fd33 	bl	801f764 <Argus_Dev_Abort>
 8016cfe:	e7e0      	b.n	8016cc2 <MeasurementFinish+0xb6>
 8016d00:	f7ef fbd0 	bl	80064a4 <IRQ_UNLOCK>
 8016d04:	e7dd      	b.n	8016cc2 <MeasurementFinish+0xb6>
 8016d06:	4b08      	ldr	r3, [pc, #32]	@ (8016d28 <MeasurementFinish+0x11c>)
 8016d08:	4599      	cmp	r9, r3
 8016d0a:	d8b1      	bhi.n	8016c70 <MeasurementFinish+0x64>
 8016d0c:	4b07      	ldr	r3, [pc, #28]	@ (8016d2c <MeasurementFinish+0x120>)
 8016d0e:	fb03 9901 	mla	r9, r3, r1, r9
 8016d12:	e7af      	b.n	8016c74 <MeasurementFinish+0x68>
 8016d14:	f503 2374 	add.w	r3, r3, #999424	@ 0xf4000
 8016d18:	3901      	subs	r1, #1
 8016d1a:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8016d1e:	eba1 010a 	sub.w	r1, r1, sl
 8016d22:	eba3 0909 	sub.w	r9, r3, r9
 8016d26:	e79b      	b.n	8016c60 <MeasurementFinish+0x54>
 8016d28:	000ec27e 	.word	0x000ec27e
 8016d2c:	000f4240 	.word	0x000f4240

08016d30 <MeasurementStartIntegration>:
 8016d30:	2800      	cmp	r0, #0
 8016d32:	b510      	push	{r4, lr}
 8016d34:	460c      	mov	r4, r1
 8016d36:	da04      	bge.n	8016d42 <MeasurementStartIntegration+0x12>
 8016d38:	4621      	mov	r1, r4
 8016d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d3e:	f7ff bf65 	b.w	8016c0c <MeasurementFinish>
 8016d42:	4905      	ldr	r1, [pc, #20]	@ (8016d58 <MeasurementStartIntegration+0x28>)
 8016d44:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 8016d48:	4622      	mov	r2, r4
 8016d4a:	f009 fe79 	bl	8020a40 <Argus_Dev_StartIntegration>
 8016d4e:	1e03      	subs	r3, r0, #0
 8016d50:	db00      	blt.n	8016d54 <MeasurementStartIntegration+0x24>
 8016d52:	bd10      	pop	{r4, pc}
 8016d54:	4618      	mov	r0, r3
 8016d56:	e7ef      	b.n	8016d38 <MeasurementStartIntegration+0x8>
 8016d58:	08016e5d 	.word	0x08016e5d

08016d5c <MeasurementReadDataFinished>:
 8016d5c:	b510      	push	{r4, lr}
 8016d5e:	460c      	mov	r4, r1
 8016d60:	b950      	cbnz	r0, 8016d78 <MeasurementReadDataFinished+0x1c>
 8016d62:	690a      	ldr	r2, [r1, #16]
 8016d64:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 8016d68:	6993      	ldr	r3, [r2, #24]
 8016d6a:	4907      	ldr	r1, [pc, #28]	@ (8016d88 <MeasurementReadDataFinished+0x2c>)
 8016d6c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8016d70:	6193      	str	r3, [r2, #24]
 8016d72:	4622      	mov	r2, r4
 8016d74:	f00a fd5a 	bl	802182c <Argus_Dev_StartAuxMeasurement>
 8016d78:	2800      	cmp	r0, #0
 8016d7a:	db00      	blt.n	8016d7e <MeasurementReadDataFinished+0x22>
 8016d7c:	bd10      	pop	{r4, pc}
 8016d7e:	4621      	mov	r1, r4
 8016d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d84:	f7ff bf42 	b.w	8016c0c <MeasurementFinish>
 8016d88:	08016ded 	.word	0x08016ded

08016d8c <MeasurementReadAuxChannelsFinished>:
 8016d8c:	b510      	push	{r4, lr}
 8016d8e:	460c      	mov	r4, r1
 8016d90:	b950      	cbnz	r0, 8016da8 <MeasurementReadAuxChannelsFinished+0x1c>
 8016d92:	690a      	ldr	r2, [r1, #16]
 8016d94:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 8016d98:	6993      	ldr	r3, [r2, #24]
 8016d9a:	4907      	ldr	r1, [pc, #28]	@ (8016db8 <MeasurementReadAuxChannelsFinished+0x2c>)
 8016d9c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8016da0:	6193      	str	r3, [r2, #24]
 8016da2:	4622      	mov	r2, r4
 8016da4:	f009 ff08 	bl	8020bb8 <Argus_Dev_DetuneClock>
 8016da8:	2800      	cmp	r0, #0
 8016daa:	db00      	blt.n	8016dae <MeasurementReadAuxChannelsFinished+0x22>
 8016dac:	bd10      	pop	{r4, pc}
 8016dae:	4621      	mov	r1, r4
 8016db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016db4:	f7ff bf2a 	b.w	8016c0c <MeasurementFinish>
 8016db8:	08016dbd 	.word	0x08016dbd

08016dbc <MeasurementUpdateConfig>:
 8016dbc:	2800      	cmp	r0, #0
 8016dbe:	b510      	push	{r4, lr}
 8016dc0:	460c      	mov	r4, r1
 8016dc2:	da04      	bge.n	8016dce <MeasurementUpdateConfig+0x12>
 8016dc4:	4621      	mov	r1, r4
 8016dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016dca:	f7ff bf1f 	b.w	8016c0c <MeasurementFinish>
 8016dce:	4a06      	ldr	r2, [pc, #24]	@ (8016de8 <MeasurementUpdateConfig+0x2c>)
 8016dd0:	f8d1 03ac 	ldr.w	r0, [r1, #940]	@ 0x3ac
 8016dd4:	460b      	mov	r3, r1
 8016dd6:	2101      	movs	r1, #1
 8016dd8:	f009 fb8e 	bl	80204f8 <Argus_Dev_Apply>
 8016ddc:	1e02      	subs	r2, r0, #0
 8016dde:	db00      	blt.n	8016de2 <MeasurementUpdateConfig+0x26>
 8016de0:	bd10      	pop	{r4, pc}
 8016de2:	4610      	mov	r0, r2
 8016de4:	e7ee      	b.n	8016dc4 <MeasurementUpdateConfig+0x8>
 8016de6:	bf00      	nop
 8016de8:	08016c0d 	.word	0x08016c0d

08016dec <MeasurementReadAuxChannels>:
 8016dec:	b510      	push	{r4, lr}
 8016dee:	460c      	mov	r4, r1
 8016df0:	b082      	sub	sp, #8
 8016df2:	b1d0      	cbz	r0, 8016e2a <MeasurementReadAuxChannels+0x3e>
 8016df4:	f110 0f72 	cmn.w	r0, #114	@ 0x72
 8016df8:	d007      	beq.n	8016e0a <MeasurementReadAuxChannels+0x1e>
 8016dfa:	1d83      	adds	r3, r0, #6
 8016dfc:	d005      	beq.n	8016e0a <MeasurementReadAuxChannels+0x1e>
 8016dfe:	4602      	mov	r2, r0
 8016e00:	2a00      	cmp	r2, #0
 8016e02:	db1f      	blt.n	8016e44 <MeasurementReadAuxChannels+0x58>
 8016e04:	4610      	mov	r0, r2
 8016e06:	b002      	add	sp, #8
 8016e08:	bd10      	pop	{r4, pc}
 8016e0a:	6923      	ldr	r3, [r4, #16]
 8016e0c:	4a11      	ldr	r2, [pc, #68]	@ (8016e54 <MeasurementReadAuxChannels+0x68>)
 8016e0e:	6018      	str	r0, [r3, #0]
 8016e10:	2101      	movs	r1, #1
 8016e12:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 8016e16:	4623      	mov	r3, r4
 8016e18:	f009 fb6e 	bl	80204f8 <Argus_Dev_Apply>
 8016e1c:	1e02      	subs	r2, r0, #0
 8016e1e:	daf1      	bge.n	8016e04 <MeasurementReadAuxChannels+0x18>
 8016e20:	4621      	mov	r1, r4
 8016e22:	f7ff fef3 	bl	8016c0c <MeasurementFinish>
 8016e26:	4602      	mov	r2, r0
 8016e28:	e7ea      	b.n	8016e00 <MeasurementReadAuxChannels+0x14>
 8016e2a:	6909      	ldr	r1, [r1, #16]
 8016e2c:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 8016e30:	4b09      	ldr	r3, [pc, #36]	@ (8016e58 <MeasurementReadAuxChannels+0x6c>)
 8016e32:	9400      	str	r4, [sp, #0]
 8016e34:	2205      	movs	r2, #5
 8016e36:	f201 11b5 	addw	r1, r1, #437	@ 0x1b5
 8016e3a:	f008 fc99 	bl	801f770 <Argus_Dev_ReadData>
 8016e3e:	4602      	mov	r2, r0
 8016e40:	2a00      	cmp	r2, #0
 8016e42:	dadf      	bge.n	8016e04 <MeasurementReadAuxChannels+0x18>
 8016e44:	4621      	mov	r1, r4
 8016e46:	4610      	mov	r0, r2
 8016e48:	b002      	add	sp, #8
 8016e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e4e:	f7ff bedd 	b.w	8016c0c <MeasurementFinish>
 8016e52:	bf00      	nop
 8016e54:	08016c0d 	.word	0x08016c0d
 8016e58:	08016d8d 	.word	0x08016d8d

08016e5c <MeasurementReadData>:
 8016e5c:	b530      	push	{r4, r5, lr}
 8016e5e:	460d      	mov	r5, r1
 8016e60:	6909      	ldr	r1, [r1, #16]
 8016e62:	4604      	mov	r4, r0
 8016e64:	b083      	sub	sp, #12
 8016e66:	f8d5 03ac 	ldr.w	r0, [r5, #940]	@ 0x3ac
 8016e6a:	310c      	adds	r1, #12
 8016e6c:	f009 fa54 	bl	8020318 <Argus_Dev_GetFrameConfig>
 8016e70:	b1cc      	cbz	r4, 8016ea6 <MeasurementReadData+0x4a>
 8016e72:	f114 0f72 	cmn.w	r4, #114	@ 0x72
 8016e76:	d006      	beq.n	8016e86 <MeasurementReadData+0x2a>
 8016e78:	1da3      	adds	r3, r4, #6
 8016e7a:	d004      	beq.n	8016e86 <MeasurementReadData+0x2a>
 8016e7c:	2c00      	cmp	r4, #0
 8016e7e:	db47      	blt.n	8016f10 <MeasurementReadData+0xb4>
 8016e80:	4620      	mov	r0, r4
 8016e82:	b003      	add	sp, #12
 8016e84:	bd30      	pop	{r4, r5, pc}
 8016e86:	692b      	ldr	r3, [r5, #16]
 8016e88:	4a25      	ldr	r2, [pc, #148]	@ (8016f20 <MeasurementReadData+0xc4>)
 8016e8a:	601c      	str	r4, [r3, #0]
 8016e8c:	f8d5 03ac 	ldr.w	r0, [r5, #940]	@ 0x3ac
 8016e90:	462b      	mov	r3, r5
 8016e92:	2101      	movs	r1, #1
 8016e94:	f009 fb30 	bl	80204f8 <Argus_Dev_Apply>
 8016e98:	1e04      	subs	r4, r0, #0
 8016e9a:	daf1      	bge.n	8016e80 <MeasurementReadData+0x24>
 8016e9c:	4629      	mov	r1, r5
 8016e9e:	f7ff feb5 	bl	8016c0c <MeasurementFinish>
 8016ea2:	4604      	mov	r4, r0
 8016ea4:	e7ea      	b.n	8016e7c <MeasurementReadData+0x20>
 8016ea6:	6929      	ldr	r1, [r5, #16]
 8016ea8:	690a      	ldr	r2, [r1, #16]
 8016eaa:	0853      	lsrs	r3, r2, #1
 8016eac:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8016eb0:	1ad2      	subs	r2, r2, r3
 8016eb2:	0890      	lsrs	r0, r2, #2
 8016eb4:	694b      	ldr	r3, [r1, #20]
 8016eb6:	9500      	str	r5, [sp, #0]
 8016eb8:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 8016ebc:	f002 3233 	and.w	r2, r2, #858993459	@ 0x33333333
 8016ec0:	4402      	add	r2, r0
 8016ec2:	0858      	lsrs	r0, r3, #1
 8016ec4:	f000 3055 	and.w	r0, r0, #1431655765	@ 0x55555555
 8016ec8:	1a18      	subs	r0, r3, r0
 8016eca:	f000 3333 	and.w	r3, r0, #858993459	@ 0x33333333
 8016ece:	0880      	lsrs	r0, r0, #2
 8016ed0:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 8016ed4:	4403      	add	r3, r0
 8016ed6:	eb02 1212 	add.w	r2, r2, r2, lsr #4
 8016eda:	f002 320f 	and.w	r2, r2, #252645135	@ 0xf0f0f0f
 8016ede:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 8016ee2:	eb02 2202 	add.w	r2, r2, r2, lsl #8
 8016ee6:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8016eea:	eb02 4202 	add.w	r2, r2, r2, lsl #16
 8016eee:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 8016ef2:	eb03 4303 	add.w	r3, r3, r3, lsl #16
 8016ef6:	0e12      	lsrs	r2, r2, #24
 8016ef8:	eb02 6213 	add.w	r2, r2, r3, lsr #24
 8016efc:	f8d5 03ac 	ldr.w	r0, [r5, #940]	@ 0x3ac
 8016f00:	4b08      	ldr	r3, [pc, #32]	@ (8016f24 <MeasurementReadData+0xc8>)
 8016f02:	3128      	adds	r1, #40	@ 0x28
 8016f04:	0092      	lsls	r2, r2, #2
 8016f06:	f008 fc33 	bl	801f770 <Argus_Dev_ReadData>
 8016f0a:	4604      	mov	r4, r0
 8016f0c:	2c00      	cmp	r4, #0
 8016f0e:	dab7      	bge.n	8016e80 <MeasurementReadData+0x24>
 8016f10:	4629      	mov	r1, r5
 8016f12:	4620      	mov	r0, r4
 8016f14:	b003      	add	sp, #12
 8016f16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016f1a:	f7ff be77 	b.w	8016c0c <MeasurementFinish>
 8016f1e:	bf00      	nop
 8016f20:	08016c0d 	.word	0x08016c0d
 8016f24:	08016d5d 	.word	0x08016d5d

08016f28 <Argus_Measurement_Start.part.0>:
 8016f28:	b530      	push	{r4, r5, lr}
 8016f2a:	6903      	ldr	r3, [r0, #16]
 8016f2c:	b083      	sub	sp, #12
 8016f2e:	4604      	mov	r4, r0
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d143      	bne.n	8016fbc <Argus_Measurement_Start.part.0+0x94>
 8016f34:	f890 31d9 	ldrb.w	r3, [r0, #473]	@ 0x1d9
 8016f38:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8016f3c:	b36b      	cbz	r3, 8016f9a <Argus_Measurement_Start.part.0+0x72>
 8016f3e:	f890 33a1 	ldrb.w	r3, [r0, #929]	@ 0x3a1
 8016f42:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d143      	bne.n	8016fd2 <Argus_Measurement_Start.part.0+0xaa>
 8016f4a:	f500 70f0 	add.w	r0, r0, #480	@ 0x1e0
 8016f4e:	f504 71f2 	add.w	r1, r4, #484	@ 0x1e4
 8016f52:	e9cd 0100 	strd	r0, r1, [sp]
 8016f56:	f7ef feab 	bl	8006cb0 <Timer_GetCounterValue>
 8016f5a:	f504 73ee 	add.w	r3, r4, #476	@ 0x1dc
 8016f5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016f62:	6123      	str	r3, [r4, #16]
 8016f64:	2301      	movs	r3, #1
 8016f66:	f8c4 51dc 	str.w	r5, [r4, #476]	@ 0x1dc
 8016f6a:	f884 33a1 	strb.w	r3, [r4, #929]	@ 0x3a1
 8016f6e:	f7ef fe9f 	bl	8006cb0 <Timer_GetCounterValue>
 8016f72:	6923      	ldr	r3, [r4, #16]
 8016f74:	4a1d      	ldr	r2, [pc, #116]	@ (8016fec <Argus_Measurement_Start.part.0+0xc4>)
 8016f76:	3304      	adds	r3, #4
 8016f78:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016f7c:	f104 0508 	add.w	r5, r4, #8
 8016f80:	e885 0003 	stmia.w	r5, {r0, r1}
 8016f84:	4623      	mov	r3, r4
 8016f86:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 8016f8a:	2100      	movs	r1, #0
 8016f8c:	f009 fab4 	bl	80204f8 <Argus_Dev_Apply>
 8016f90:	1e05      	subs	r5, r0, #0
 8016f92:	db20      	blt.n	8016fd6 <Argus_Measurement_Start.part.0+0xae>
 8016f94:	4628      	mov	r0, r5
 8016f96:	b003      	add	sp, #12
 8016f98:	bd30      	pop	{r4, r5, pc}
 8016f9a:	3018      	adds	r0, #24
 8016f9c:	f104 011c 	add.w	r1, r4, #28
 8016fa0:	e9cd 0100 	strd	r0, r1, [sp]
 8016fa4:	f7ef fe84 	bl	8006cb0 <Timer_GetCounterValue>
 8016fa8:	f104 0314 	add.w	r3, r4, #20
 8016fac:	6123      	str	r3, [r4, #16]
 8016fae:	2301      	movs	r3, #1
 8016fb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016fb4:	6165      	str	r5, [r4, #20]
 8016fb6:	f884 31d9 	strb.w	r3, [r4, #473]	@ 0x1d9
 8016fba:	e7d8      	b.n	8016f6e <Argus_Measurement_Start.part.0+0x46>
 8016fbc:	2502      	movs	r5, #2
 8016fbe:	2301      	movs	r3, #1
 8016fc0:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 8016fc4:	7123      	strb	r3, [r4, #4]
 8016fc6:	21c4      	movs	r1, #196	@ 0xc4
 8016fc8:	f008 fb98 	bl	801f6fc <Argus_Dev_ClearStatus>
 8016fcc:	4628      	mov	r0, r5
 8016fce:	b003      	add	sp, #12
 8016fd0:	bd30      	pop	{r4, r5, pc}
 8016fd2:	2568      	movs	r5, #104	@ 0x68
 8016fd4:	e7f3      	b.n	8016fbe <Argus_Measurement_Start.part.0+0x96>
 8016fd6:	4629      	mov	r1, r5
 8016fd8:	4805      	ldr	r0, [pc, #20]	@ (8016ff0 <Argus_Measurement_Start.part.0+0xc8>)
 8016fda:	f7fb ffdb 	bl	8012f94 <print>
 8016fde:	4621      	mov	r1, r4
 8016fe0:	4628      	mov	r0, r5
 8016fe2:	b003      	add	sp, #12
 8016fe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016fe8:	f7ff be10 	b.w	8016c0c <MeasurementFinish>
 8016fec:	08016d31 	.word	0x08016d31
 8016ff0:	0802d55c 	.word	0x0802d55c

08016ff4 <Argus_Measurement_Init>:
 8016ff4:	b538      	push	{r3, r4, r5, lr}
 8016ff6:	4604      	mov	r4, r0
 8016ff8:	460d      	mov	r5, r1
 8016ffa:	f44f 726c 	mov.w	r2, #944	@ 0x3b0
 8016ffe:	2100      	movs	r1, #0
 8017000:	f012 fba7 	bl	8029752 <memset>
 8017004:	f8c4 53ac 	str.w	r5, [r4, #940]	@ 0x3ac
 8017008:	4620      	mov	r0, r4
 801700a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801700e:	f000 bb57 	b.w	80176c0 <TimerMngr_subscribeArgus>
 8017012:	bf00      	nop

08017014 <Argus_Measurement_Deinit>:
 8017014:	f000 bb78 	b.w	8017708 <TimerMngr_unsubscribeArgus>

08017018 <Argus_Measurement_Abort>:
 8017018:	b538      	push	{r3, r4, r5, lr}
 801701a:	4604      	mov	r4, r0
 801701c:	2500      	movs	r5, #0
 801701e:	f8c0 53a4 	str.w	r5, [r0, #932]	@ 0x3a4
 8017022:	6005      	str	r5, [r0, #0]
 8017024:	f000 fade 	bl	80175e4 <TimerMngr_UpdateTimings>
 8017028:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 801702c:	7125      	strb	r5, [r4, #4]
 801702e:	f008 fb99 	bl	801f764 <Argus_Dev_Abort>
 8017032:	f884 51d9 	strb.w	r5, [r4, #473]	@ 0x1d9
 8017036:	f884 53a1 	strb.w	r5, [r4, #929]	@ 0x3a1
 801703a:	bd38      	pop	{r3, r4, r5, pc}

0801703c <Argus_Measurement_IsTimerActive>:
 801703c:	6800      	ldr	r0, [r0, #0]
 801703e:	3800      	subs	r0, #0
 8017040:	bf18      	it	ne
 8017042:	2001      	movne	r0, #1
 8017044:	4770      	bx	lr
 8017046:	bf00      	nop

08017048 <Argus_Measurement_GetTimerInterval>:
 8017048:	6800      	ldr	r0, [r0, #0]
 801704a:	4770      	bx	lr

0801704c <Argus_Measurement_IsBufferBusy>:
 801704c:	f890 31d9 	ldrb.w	r3, [r0, #473]	@ 0x1d9
 8017050:	b92b      	cbnz	r3, 801705e <Argus_Measurement_IsBufferBusy+0x12>
 8017052:	f890 03a1 	ldrb.w	r0, [r0, #929]	@ 0x3a1
 8017056:	3800      	subs	r0, #0
 8017058:	bf18      	it	ne
 801705a:	2001      	movne	r0, #1
 801705c:	4770      	bx	lr
 801705e:	2001      	movs	r0, #1
 8017060:	4770      	bx	lr
 8017062:	bf00      	nop

08017064 <Argus_Measurement_IsActive>:
 8017064:	6803      	ldr	r3, [r0, #0]
 8017066:	b913      	cbnz	r3, 801706e <Argus_Measurement_IsActive+0xa>
 8017068:	f890 31d9 	ldrb.w	r3, [r0, #473]	@ 0x1d9
 801706c:	b10b      	cbz	r3, 8017072 <Argus_Measurement_IsActive+0xe>
 801706e:	2001      	movs	r0, #1
 8017070:	4770      	bx	lr
 8017072:	f890 03a1 	ldrb.w	r0, [r0, #929]	@ 0x3a1
 8017076:	3800      	subs	r0, #0
 8017078:	bf18      	it	ne
 801707a:	2001      	movne	r0, #1
 801707c:	4770      	bx	lr
 801707e:	bf00      	nop

08017080 <Argus_Measurement_Trigger>:
 8017080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017082:	4604      	mov	r4, r0
 8017084:	b085      	sub	sp, #20
 8017086:	460f      	mov	r7, r1
 8017088:	4616      	mov	r6, r2
 801708a:	f7ef fa2d 	bl	80064e8 <IRQ_LOCK>
 801708e:	6825      	ldr	r5, [r4, #0]
 8017090:	2d00      	cmp	r5, #0
 8017092:	d15a      	bne.n	801714a <Argus_Measurement_Trigger+0xca>
 8017094:	f7ef fa06 	bl	80064a4 <IRQ_UNLOCK>
 8017098:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 801709c:	4629      	mov	r1, r5
 801709e:	f008 f9b3 	bl	801f408 <Argus_Dev_AwaitStatus>
 80170a2:	b108      	cbz	r0, 80170a8 <Argus_Measurement_Trigger+0x28>
 80170a4:	b005      	add	sp, #20
 80170a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80170a8:	f104 0308 	add.w	r3, r4, #8
 80170ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80170b0:	466b      	mov	r3, sp
 80170b2:	e883 0003 	stmia.w	r3, {r0, r1}
 80170b6:	f8d4 33ac 	ldr.w	r3, [r4, #940]	@ 0x3ac
 80170ba:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80170be:	e9c4 76e9 	strd	r7, r6, [r4, #932]	@ 0x3a4
 80170c2:	a903      	add	r1, sp, #12
 80170c4:	4607      	mov	r7, r0
 80170c6:	a802      	add	r0, sp, #8
 80170c8:	681d      	ldr	r5, [r3, #0]
 80170ca:	9e01      	ldr	r6, [sp, #4]
 80170cc:	f7ef fdf0 	bl	8006cb0 <Timer_GetCounterValue>
 80170d0:	4a36      	ldr	r2, [pc, #216]	@ (80171ac <Argus_Measurement_Trigger+0x12c>)
 80170d2:	4937      	ldr	r1, [pc, #220]	@ (80171b0 <Argus_Measurement_Trigger+0x130>)
 80170d4:	f8dd c008 	ldr.w	ip, [sp, #8]
 80170d8:	fba2 3205 	umull	r3, r2, r2, r5
 80170dc:	0c93      	lsrs	r3, r2, #18
 80170de:	fb01 5313 	mls	r3, r1, r3, r5
 80170e2:	4433      	add	r3, r6
 80170e4:	3901      	subs	r1, #1
 80170e6:	428b      	cmp	r3, r1
 80170e8:	9d03      	ldr	r5, [sp, #12]
 80170ea:	eb07 4292 	add.w	r2, r7, r2, lsr #18
 80170ee:	d835      	bhi.n	801715c <Argus_Measurement_Trigger+0xdc>
 80170f0:	4297      	cmp	r7, r2
 80170f2:	d03a      	beq.n	801716a <Argus_Measurement_Trigger+0xea>
 80170f4:	bf34      	ite	cc
 80170f6:	2101      	movcc	r1, #1
 80170f8:	2100      	movcs	r1, #0
 80170fa:	2900      	cmp	r1, #0
 80170fc:	d03f      	beq.n	801717e <Argus_Measurement_Trigger+0xfe>
 80170fe:	45bc      	cmp	ip, r7
 8017100:	d038      	beq.n	8017174 <Argus_Measurement_Trigger+0xf4>
 8017102:	bf8c      	ite	hi
 8017104:	2601      	movhi	r6, #1
 8017106:	2600      	movls	r6, #0
 8017108:	b126      	cbz	r6, 8017114 <Argus_Measurement_Trigger+0x94>
 801710a:	4594      	cmp	ip, r2
 801710c:	d045      	beq.n	801719a <Argus_Measurement_Trigger+0x11a>
 801710e:	bf8c      	ite	hi
 8017110:	2101      	movhi	r1, #1
 8017112:	2100      	movls	r1, #0
 8017114:	7923      	ldrb	r3, [r4, #4]
 8017116:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 801711a:	4319      	orrs	r1, r3
 801711c:	7121      	strb	r1, [r4, #4]
 801711e:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 8017122:	f010 ff1d 	bl	8027f60 <ADS_CheckTimeout>
 8017126:	f7ef f9df 	bl	80064e8 <IRQ_LOCK>
 801712a:	7923      	ldrb	r3, [r4, #4]
 801712c:	b38b      	cbz	r3, 8017192 <Argus_Measurement_Trigger+0x112>
 801712e:	2300      	movs	r3, #0
 8017130:	7123      	strb	r3, [r4, #4]
 8017132:	f7ef f9b7 	bl	80064a4 <IRQ_UNLOCK>
 8017136:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 801713a:	21c4      	movs	r1, #196	@ 0xc4
 801713c:	f008 faa8 	bl	801f690 <Argus_Dev_SetStatus>
 8017140:	b308      	cbz	r0, 8017186 <Argus_Measurement_Trigger+0x106>
 8017142:	2301      	movs	r3, #1
 8017144:	7123      	strb	r3, [r4, #4]
 8017146:	b005      	add	sp, #20
 8017148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801714a:	2500      	movs	r5, #0
 801714c:	e9c4 76e9 	strd	r7, r6, [r4, #932]	@ 0x3a4
 8017150:	6025      	str	r5, [r4, #0]
 8017152:	f7ef f9a7 	bl	80064a4 <IRQ_UNLOCK>
 8017156:	4628      	mov	r0, r5
 8017158:	b005      	add	sp, #20
 801715a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801715c:	3201      	adds	r2, #1
 801715e:	f5a3 2374 	sub.w	r3, r3, #999424	@ 0xf4000
 8017162:	4297      	cmp	r7, r2
 8017164:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8017168:	d1c4      	bne.n	80170f4 <Argus_Measurement_Trigger+0x74>
 801716a:	429e      	cmp	r6, r3
 801716c:	bf8c      	ite	hi
 801716e:	2100      	movhi	r1, #0
 8017170:	2101      	movls	r1, #1
 8017172:	e7c2      	b.n	80170fa <Argus_Measurement_Trigger+0x7a>
 8017174:	42b5      	cmp	r5, r6
 8017176:	bf34      	ite	cc
 8017178:	2600      	movcc	r6, #0
 801717a:	2601      	movcs	r6, #1
 801717c:	e7c4      	b.n	8017108 <Argus_Measurement_Trigger+0x88>
 801717e:	45bc      	cmp	ip, r7
 8017180:	d010      	beq.n	80171a4 <Argus_Measurement_Trigger+0x124>
 8017182:	d8c7      	bhi.n	8017114 <Argus_Measurement_Trigger+0x94>
 8017184:	e7c1      	b.n	801710a <Argus_Measurement_Trigger+0x8a>
 8017186:	4620      	mov	r0, r4
 8017188:	b005      	add	sp, #20
 801718a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801718e:	f7ff becb 	b.w	8016f28 <Argus_Measurement_Start.part.0>
 8017192:	f7ef f987 	bl	80064a4 <IRQ_UNLOCK>
 8017196:	2069      	movs	r0, #105	@ 0x69
 8017198:	e784      	b.n	80170a4 <Argus_Measurement_Trigger+0x24>
 801719a:	429d      	cmp	r5, r3
 801719c:	bf34      	ite	cc
 801719e:	2100      	movcc	r1, #0
 80171a0:	2101      	movcs	r1, #1
 80171a2:	e7b7      	b.n	8017114 <Argus_Measurement_Trigger+0x94>
 80171a4:	42b5      	cmp	r5, r6
 80171a6:	d2b5      	bcs.n	8017114 <Argus_Measurement_Trigger+0x94>
 80171a8:	e7af      	b.n	801710a <Argus_Measurement_Trigger+0x8a>
 80171aa:	bf00      	nop
 80171ac:	431bde83 	.word	0x431bde83
 80171b0:	000f4240 	.word	0x000f4240

080171b4 <Argus_Measurement_CheckTimeout>:
 80171b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171b6:	6905      	ldr	r5, [r0, #16]
 80171b8:	b083      	sub	sp, #12
 80171ba:	b11d      	cbz	r5, 80171c4 <Argus_Measurement_CheckTimeout+0x10>
 80171bc:	f895 31c5 	ldrb.w	r3, [r5, #453]	@ 0x1c5
 80171c0:	2b01      	cmp	r3, #1
 80171c2:	d003      	beq.n	80171cc <Argus_Measurement_CheckTimeout+0x18>
 80171c4:	2400      	movs	r4, #0
 80171c6:	4620      	mov	r0, r4
 80171c8:	b003      	add	sp, #12
 80171ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80171cc:	f8d0 33ac 	ldr.w	r3, [r0, #940]	@ 0x3ac
 80171d0:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80171d4:	681e      	ldr	r6, [r3, #0]
 80171d6:	a901      	add	r1, sp, #4
 80171d8:	4604      	mov	r4, r0
 80171da:	0076      	lsls	r6, r6, #1
 80171dc:	4668      	mov	r0, sp
 80171de:	f7ef fd67 	bl	8006cb0 <Timer_GetCounterValue>
 80171e2:	f506 36c3 	add.w	r6, r6, #99840	@ 0x18600
 80171e6:	4a2e      	ldr	r2, [pc, #184]	@ (80172a0 <Argus_Measurement_CheckTimeout+0xec>)
 80171e8:	492e      	ldr	r1, [pc, #184]	@ (80172a4 <Argus_Measurement_CheckTimeout+0xf0>)
 80171ea:	68a8      	ldr	r0, [r5, #8]
 80171ec:	f8d5 e004 	ldr.w	lr, [r5, #4]
 80171f0:	36a0      	adds	r6, #160	@ 0xa0
 80171f2:	fba2 3206 	umull	r3, r2, r2, r6
 80171f6:	0c93      	lsrs	r3, r2, #18
 80171f8:	fb01 6313 	mls	r3, r1, r3, r6
 80171fc:	4403      	add	r3, r0
 80171fe:	3901      	subs	r1, #1
 8017200:	428b      	cmp	r3, r1
 8017202:	e9dd 7c00 	ldrd	r7, ip, [sp]
 8017206:	eb0e 4292 	add.w	r2, lr, r2, lsr #18
 801720a:	d904      	bls.n	8017216 <Argus_Measurement_CheckTimeout+0x62>
 801720c:	f5a3 2374 	sub.w	r3, r3, #999424	@ 0xf4000
 8017210:	3201      	adds	r2, #1
 8017212:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8017216:	4596      	cmp	lr, r2
 8017218:	d022      	beq.n	8017260 <Argus_Measurement_CheckTimeout+0xac>
 801721a:	bf34      	ite	cc
 801721c:	2101      	movcc	r1, #1
 801721e:	2100      	movcs	r1, #0
 8017220:	b319      	cbz	r1, 801726a <Argus_Measurement_CheckTimeout+0xb6>
 8017222:	45be      	cmp	lr, r7
 8017224:	d035      	beq.n	8017292 <Argus_Measurement_CheckTimeout+0xde>
 8017226:	bf34      	ite	cc
 8017228:	2001      	movcc	r0, #1
 801722a:	2000      	movcs	r0, #0
 801722c:	b130      	cbz	r0, 801723c <Argus_Measurement_CheckTimeout+0x88>
 801722e:	42ba      	cmp	r2, r7
 8017230:	d022      	beq.n	8017278 <Argus_Measurement_CheckTimeout+0xc4>
 8017232:	bf34      	ite	cc
 8017234:	2301      	movcc	r3, #1
 8017236:	2300      	movcs	r3, #0
 8017238:	2b00      	cmp	r3, #0
 801723a:	d0c3      	beq.n	80171c4 <Argus_Measurement_CheckTimeout+0x10>
 801723c:	f06f 0705 	mvn.w	r7, #5
 8017240:	4631      	mov	r1, r6
 8017242:	4819      	ldr	r0, [pc, #100]	@ (80172a8 <Argus_Measurement_CheckTimeout+0xf4>)
 8017244:	602f      	str	r7, [r5, #0]
 8017246:	f7fb fea5 	bl	8012f94 <print>
 801724a:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 801724e:	f008 fa89 	bl	801f764 <Argus_Dev_Abort>
 8017252:	1e04      	subs	r4, r0, #0
 8017254:	da22      	bge.n	801729c <Argus_Measurement_CheckTimeout+0xe8>
 8017256:	4621      	mov	r1, r4
 8017258:	4814      	ldr	r0, [pc, #80]	@ (80172ac <Argus_Measurement_CheckTimeout+0xf8>)
 801725a:	f7fb fe9b 	bl	8012f94 <print>
 801725e:	e7b2      	b.n	80171c6 <Argus_Measurement_CheckTimeout+0x12>
 8017260:	4298      	cmp	r0, r3
 8017262:	bf8c      	ite	hi
 8017264:	2100      	movhi	r1, #0
 8017266:	2101      	movls	r1, #1
 8017268:	e7da      	b.n	8017220 <Argus_Measurement_CheckTimeout+0x6c>
 801726a:	45be      	cmp	lr, r7
 801726c:	d00e      	beq.n	801728c <Argus_Measurement_CheckTimeout+0xd8>
 801726e:	d3a9      	bcc.n	80171c4 <Argus_Measurement_CheckTimeout+0x10>
 8017270:	42ba      	cmp	r2, r7
 8017272:	d008      	beq.n	8017286 <Argus_Measurement_CheckTimeout+0xd2>
 8017274:	d2a6      	bcs.n	80171c4 <Argus_Measurement_CheckTimeout+0x10>
 8017276:	e7e1      	b.n	801723c <Argus_Measurement_CheckTimeout+0x88>
 8017278:	459c      	cmp	ip, r3
 801727a:	bf34      	ite	cc
 801727c:	2300      	movcc	r3, #0
 801727e:	2301      	movcs	r3, #1
 8017280:	2b00      	cmp	r3, #0
 8017282:	d09f      	beq.n	80171c4 <Argus_Measurement_CheckTimeout+0x10>
 8017284:	e7da      	b.n	801723c <Argus_Measurement_CheckTimeout+0x88>
 8017286:	459c      	cmp	ip, r3
 8017288:	d2d8      	bcs.n	801723c <Argus_Measurement_CheckTimeout+0x88>
 801728a:	e79b      	b.n	80171c4 <Argus_Measurement_CheckTimeout+0x10>
 801728c:	4560      	cmp	r0, ip
 801728e:	d999      	bls.n	80171c4 <Argus_Measurement_CheckTimeout+0x10>
 8017290:	e7ee      	b.n	8017270 <Argus_Measurement_CheckTimeout+0xbc>
 8017292:	4560      	cmp	r0, ip
 8017294:	bf8c      	ite	hi
 8017296:	2000      	movhi	r0, #0
 8017298:	2001      	movls	r0, #1
 801729a:	e7c7      	b.n	801722c <Argus_Measurement_CheckTimeout+0x78>
 801729c:	463c      	mov	r4, r7
 801729e:	e792      	b.n	80171c6 <Argus_Measurement_CheckTimeout+0x12>
 80172a0:	431bde83 	.word	0x431bde83
 80172a4:	000f4240 	.word	0x000f4240
 80172a8:	0802d5a4 	.word	0x0802d5a4
 80172ac:	0802d5cc 	.word	0x0802d5cc

080172b0 <Argus_Measurement_TriggerSync>:
 80172b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172b4:	7903      	ldrb	r3, [r0, #4]
 80172b6:	b089      	sub	sp, #36	@ 0x24
 80172b8:	4604      	mov	r4, r0
 80172ba:	9102      	str	r1, [sp, #8]
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d143      	bne.n	8017348 <Argus_Measurement_TriggerSync+0x98>
 80172c0:	f100 0308 	add.w	r3, r0, #8
 80172c4:	f8df 918c 	ldr.w	r9, [pc, #396]	@ 8017454 <Argus_Measurement_TriggerSync+0x1a4>
 80172c8:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 8017458 <Argus_Measurement_TriggerSync+0x1a8>
 80172cc:	4f5d      	ldr	r7, [pc, #372]	@ (8017444 <Argus_Measurement_TriggerSync+0x194>)
 80172ce:	9301      	str	r3, [sp, #4]
 80172d0:	ae04      	add	r6, sp, #16
 80172d2:	9b01      	ldr	r3, [sp, #4]
 80172d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80172d8:	f8d4 33ac 	ldr.w	r3, [r4, #940]	@ 0x3ac
 80172dc:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80172e0:	e886 0003 	stmia.w	r6, {r0, r1}
 80172e4:	681d      	ldr	r5, [r3, #0]
 80172e6:	a907      	add	r1, sp, #28
 80172e8:	a806      	add	r0, sp, #24
 80172ea:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80172ee:	f7ef fcdf 	bl	8006cb0 <Timer_GetCounterValue>
 80172f2:	fba9 3c05 	umull	r3, ip, r9, r5
 80172f6:	ea4f 419c 	mov.w	r1, ip, lsr #18
 80172fa:	fb08 5211 	mls	r2, r8, r1, r5
 80172fe:	445a      	add	r2, fp
 8017300:	42ba      	cmp	r2, r7
 8017302:	9806      	ldr	r0, [sp, #24]
 8017304:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8017308:	eb0a 4c9c 	add.w	ip, sl, ip, lsr #18
 801730c:	d905      	bls.n	801731a <Argus_Measurement_TriggerSync+0x6a>
 801730e:	f5a2 2274 	sub.w	r2, r2, #999424	@ 0xf4000
 8017312:	f10c 0c01 	add.w	ip, ip, #1
 8017316:	f5a2 7210 	sub.w	r2, r2, #576	@ 0x240
 801731a:	45d4      	cmp	ip, sl
 801731c:	d025      	beq.n	801736a <Argus_Measurement_TriggerSync+0xba>
 801731e:	bf8c      	ite	hi
 8017320:	2101      	movhi	r1, #1
 8017322:	2100      	movls	r1, #0
 8017324:	b1b9      	cbz	r1, 8017356 <Argus_Measurement_TriggerSync+0xa6>
 8017326:	4550      	cmp	r0, sl
 8017328:	d024      	beq.n	8017374 <Argus_Measurement_TriggerSync+0xc4>
 801732a:	bf8c      	ite	hi
 801732c:	2301      	movhi	r3, #1
 801732e:	2300      	movls	r3, #0
 8017330:	b123      	cbz	r3, 801733c <Argus_Measurement_TriggerSync+0x8c>
 8017332:	4584      	cmp	ip, r0
 8017334:	d014      	beq.n	8017360 <Argus_Measurement_TriggerSync+0xb0>
 8017336:	bf34      	ite	cc
 8017338:	2101      	movcc	r1, #1
 801733a:	2100      	movcs	r1, #0
 801733c:	7923      	ldrb	r3, [r4, #4]
 801733e:	430b      	orrs	r3, r1
 8017340:	7123      	strb	r3, [r4, #4]
 8017342:	7923      	ldrb	r3, [r4, #4]
 8017344:	2b00      	cmp	r3, #0
 8017346:	d0c4      	beq.n	80172d2 <Argus_Measurement_TriggerSync+0x22>
 8017348:	6925      	ldr	r5, [r4, #16]
 801734a:	b1dd      	cbz	r5, 8017384 <Argus_Measurement_TriggerSync+0xd4>
 801734c:	2502      	movs	r5, #2
 801734e:	4628      	mov	r0, r5
 8017350:	b009      	add	sp, #36	@ 0x24
 8017352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017356:	4550      	cmp	r0, sl
 8017358:	d011      	beq.n	801737e <Argus_Measurement_TriggerSync+0xce>
 801735a:	d8ef      	bhi.n	801733c <Argus_Measurement_TriggerSync+0x8c>
 801735c:	4584      	cmp	ip, r0
 801735e:	d1ea      	bne.n	8017336 <Argus_Measurement_TriggerSync+0x86>
 8017360:	4596      	cmp	lr, r2
 8017362:	bf34      	ite	cc
 8017364:	2100      	movcc	r1, #0
 8017366:	2101      	movcs	r1, #1
 8017368:	e7e8      	b.n	801733c <Argus_Measurement_TriggerSync+0x8c>
 801736a:	455a      	cmp	r2, fp
 801736c:	bf34      	ite	cc
 801736e:	2100      	movcc	r1, #0
 8017370:	2101      	movcs	r1, #1
 8017372:	e7d7      	b.n	8017324 <Argus_Measurement_TriggerSync+0x74>
 8017374:	45de      	cmp	lr, fp
 8017376:	bf34      	ite	cc
 8017378:	2300      	movcc	r3, #0
 801737a:	2301      	movcs	r3, #1
 801737c:	e7d8      	b.n	8017330 <Argus_Measurement_TriggerSync+0x80>
 801737e:	45de      	cmp	lr, fp
 8017380:	d2dc      	bcs.n	801733c <Argus_Measurement_TriggerSync+0x8c>
 8017382:	e7d6      	b.n	8017332 <Argus_Measurement_TriggerSync+0x82>
 8017384:	9e02      	ldr	r6, [sp, #8]
 8017386:	1d30      	adds	r0, r6, #4
 8017388:	f106 0108 	add.w	r1, r6, #8
 801738c:	9103      	str	r1, [sp, #12]
 801738e:	9001      	str	r0, [sp, #4]
 8017390:	f7ef fc8e 	bl	8006cb0 <Timer_GetCounterValue>
 8017394:	4b2c      	ldr	r3, [pc, #176]	@ (8017448 <Argus_Measurement_TriggerSync+0x198>)
 8017396:	6126      	str	r6, [r4, #16]
 8017398:	2201      	movs	r2, #1
 801739a:	6035      	str	r5, [r6, #0]
 801739c:	f886 21c5 	strb.w	r2, [r6, #453]	@ 0x1c5
 80173a0:	9903      	ldr	r1, [sp, #12]
 80173a2:	9801      	ldr	r0, [sp, #4]
 80173a4:	f8c4 33a4 	str.w	r3, [r4, #932]	@ 0x3a4
 80173a8:	7125      	strb	r5, [r4, #4]
 80173aa:	f8c4 63a8 	str.w	r6, [r4, #936]	@ 0x3a8
 80173ae:	f7ef fc7f 	bl	8006cb0 <Timer_GetCounterValue>
 80173b2:	6922      	ldr	r2, [r4, #16]
 80173b4:	3204      	adds	r2, #4
 80173b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80173ba:	f104 0308 	add.w	r3, r4, #8
 80173be:	e883 0003 	stmia.w	r3, {r0, r1}
 80173c2:	4a22      	ldr	r2, [pc, #136]	@ (801744c <Argus_Measurement_TriggerSync+0x19c>)
 80173c4:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 80173c8:	4629      	mov	r1, r5
 80173ca:	4623      	mov	r3, r4
 80173cc:	f009 f894 	bl	80204f8 <Argus_Dev_Apply>
 80173d0:	1e05      	subs	r5, r0, #0
 80173d2:	db15      	blt.n	8017400 <Argus_Measurement_TriggerSync+0x150>
 80173d4:	b125      	cbz	r5, 80173e0 <Argus_Measurement_TriggerSync+0x130>
 80173d6:	e01e      	b.n	8017416 <Argus_Measurement_TriggerSync+0x166>
 80173d8:	f7ff feec 	bl	80171b4 <Argus_Measurement_CheckTimeout>
 80173dc:	1e05      	subs	r5, r0, #0
 80173de:	d126      	bne.n	801742e <Argus_Measurement_TriggerSync+0x17e>
 80173e0:	9b02      	ldr	r3, [sp, #8]
 80173e2:	f893 31c5 	ldrb.w	r3, [r3, #453]	@ 0x1c5
 80173e6:	2b01      	cmp	r3, #1
 80173e8:	4620      	mov	r0, r4
 80173ea:	d0f5      	beq.n	80173d8 <Argus_Measurement_TriggerSync+0x128>
 80173ec:	2300      	movs	r3, #0
 80173ee:	e9c4 33e9 	strd	r3, r3, [r4, #932]	@ 0x3a4
 80173f2:	6123      	str	r3, [r4, #16]
 80173f4:	9b02      	ldr	r3, [sp, #8]
 80173f6:	681d      	ldr	r5, [r3, #0]
 80173f8:	4628      	mov	r0, r5
 80173fa:	b009      	add	sp, #36	@ 0x24
 80173fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017400:	4629      	mov	r1, r5
 8017402:	4813      	ldr	r0, [pc, #76]	@ (8017450 <Argus_Measurement_TriggerSync+0x1a0>)
 8017404:	f7fb fdc6 	bl	8012f94 <print>
 8017408:	4628      	mov	r0, r5
 801740a:	4621      	mov	r1, r4
 801740c:	f7ff fbfe 	bl	8016c0c <MeasurementFinish>
 8017410:	4605      	mov	r5, r0
 8017412:	2d00      	cmp	r5, #0
 8017414:	d0e4      	beq.n	80173e0 <Argus_Measurement_TriggerSync+0x130>
 8017416:	9a02      	ldr	r2, [sp, #8]
 8017418:	2300      	movs	r3, #0
 801741a:	4628      	mov	r0, r5
 801741c:	6015      	str	r5, [r2, #0]
 801741e:	f882 31c5 	strb.w	r3, [r2, #453]	@ 0x1c5
 8017422:	e9c4 33e9 	strd	r3, r3, [r4, #932]	@ 0x3a4
 8017426:	6123      	str	r3, [r4, #16]
 8017428:	b009      	add	sp, #36	@ 0x24
 801742a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801742e:	f04f 0300 	mov.w	r3, #0
 8017432:	e9c4 33e9 	strd	r3, r3, [r4, #932]	@ 0x3a4
 8017436:	6123      	str	r3, [r4, #16]
 8017438:	dadc      	bge.n	80173f4 <Argus_Measurement_TriggerSync+0x144>
 801743a:	4628      	mov	r0, r5
 801743c:	b009      	add	sp, #36	@ 0x24
 801743e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017442:	bf00      	nop
 8017444:	000f423f 	.word	0x000f423f
 8017448:	08016c09 	.word	0x08016c09
 801744c:	08016d31 	.word	0x08016d31
 8017450:	0802d55c 	.word	0x0802d55c
 8017454:	431bde83 	.word	0x431bde83
 8017458:	000f4240 	.word	0x000f4240

0801745c <Argus_Measurement_StartTimer>:
 801745c:	b510      	push	{r4, lr}
 801745e:	4604      	mov	r4, r0
 8017460:	f8d0 03ac 	ldr.w	r0, [r0, #940]	@ 0x3ac
 8017464:	e9c4 12e9 	strd	r1, r2, [r4, #932]	@ 0x3a4
 8017468:	f008 f95c 	bl	801f724 <Argus_Dev_GetStatus>
 801746c:	2800      	cmp	r0, #0
 801746e:	db09      	blt.n	8017484 <Argus_Measurement_StartTimer+0x28>
 8017470:	f8d4 33ac 	ldr.w	r3, [r4, #940]	@ 0x3ac
 8017474:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8017478:	681b      	ldr	r3, [r3, #0]
 801747a:	6023      	str	r3, [r4, #0]
 801747c:	f000 f8b2 	bl	80175e4 <TimerMngr_UpdateTimings>
 8017480:	2800      	cmp	r0, #0
 8017482:	db00      	blt.n	8017486 <Argus_Measurement_StartTimer+0x2a>
 8017484:	bd10      	pop	{r4, pc}
 8017486:	2300      	movs	r3, #0
 8017488:	e9c4 33e9 	strd	r3, r3, [r4, #932]	@ 0x3a4
 801748c:	6023      	str	r3, [r4, #0]
 801748e:	bd10      	pop	{r4, pc}

08017490 <Argus_Measurement_StopTimer>:
 8017490:	b570      	push	{r4, r5, r6, lr}
 8017492:	4604      	mov	r4, r0
 8017494:	2600      	movs	r6, #0
 8017496:	6006      	str	r6, [r0, #0]
 8017498:	f000 f8a4 	bl	80175e4 <TimerMngr_UpdateTimings>
 801749c:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 80174a0:	4631      	mov	r1, r6
 80174a2:	f007 ffb1 	bl	801f408 <Argus_Dev_AwaitStatus>
 80174a6:	1e05      	subs	r5, r0, #0
 80174a8:	db01      	blt.n	80174ae <Argus_Measurement_StopTimer+0x1e>
 80174aa:	4628      	mov	r0, r5
 80174ac:	bd70      	pop	{r4, r5, r6, pc}
 80174ae:	f8c4 63a4 	str.w	r6, [r4, #932]	@ 0x3a4
 80174b2:	6026      	str	r6, [r4, #0]
 80174b4:	f000 f896 	bl	80175e4 <TimerMngr_UpdateTimings>
 80174b8:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 80174bc:	7126      	strb	r6, [r4, #4]
 80174be:	f008 f951 	bl	801f764 <Argus_Dev_Abort>
 80174c2:	f884 61d9 	strb.w	r6, [r4, #473]	@ 0x1d9
 80174c6:	f884 63a1 	strb.w	r6, [r4, #929]	@ 0x3a1
 80174ca:	4628      	mov	r0, r5
 80174cc:	bd70      	pop	{r4, r5, r6, pc}
 80174ce:	bf00      	nop

080174d0 <Argus_Measurement_TimerTick>:
 80174d0:	b538      	push	{r3, r4, r5, lr}
 80174d2:	6803      	ldr	r3, [r0, #0]
 80174d4:	b903      	cbnz	r3, 80174d8 <Argus_Measurement_TimerTick+0x8>
 80174d6:	bd38      	pop	{r3, r4, r5, pc}
 80174d8:	4604      	mov	r4, r0
 80174da:	f8d0 03ac 	ldr.w	r0, [r0, #940]	@ 0x3ac
 80174de:	2501      	movs	r5, #1
 80174e0:	7125      	strb	r5, [r4, #4]
 80174e2:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 80174e6:	f010 fd3b 	bl	8027f60 <ADS_CheckTimeout>
 80174ea:	f7ee fffd 	bl	80064e8 <IRQ_LOCK>
 80174ee:	7923      	ldrb	r3, [r4, #4]
 80174f0:	b183      	cbz	r3, 8017514 <Argus_Measurement_TimerTick+0x44>
 80174f2:	2300      	movs	r3, #0
 80174f4:	7123      	strb	r3, [r4, #4]
 80174f6:	f7ee ffd5 	bl	80064a4 <IRQ_UNLOCK>
 80174fa:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 80174fe:	21c4      	movs	r1, #196	@ 0xc4
 8017500:	f008 f8c6 	bl	801f690 <Argus_Dev_SetStatus>
 8017504:	b108      	cbz	r0, 801750a <Argus_Measurement_TimerTick+0x3a>
 8017506:	7125      	strb	r5, [r4, #4]
 8017508:	bd38      	pop	{r3, r4, r5, pc}
 801750a:	4620      	mov	r0, r4
 801750c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017510:	f7ff bd0a 	b.w	8016f28 <Argus_Measurement_Start.part.0>
 8017514:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017518:	f7ee bfc4 	b.w	80064a4 <IRQ_UNLOCK>

0801751c <Argus_Measurement_GetRawDataBuffer>:
 801751c:	f890 31d9 	ldrb.w	r3, [r0, #473]	@ 0x1d9
 8017520:	2b02      	cmp	r3, #2
 8017522:	d00d      	beq.n	8017540 <Argus_Measurement_GetRawDataBuffer+0x24>
 8017524:	f890 31d9 	ldrb.w	r3, [r0, #473]	@ 0x1d9
 8017528:	2b02      	cmp	r3, #2
 801752a:	d013      	beq.n	8017554 <Argus_Measurement_GetRawDataBuffer+0x38>
 801752c:	f890 33a1 	ldrb.w	r3, [r0, #929]	@ 0x3a1
 8017530:	2b02      	cmp	r3, #2
 8017532:	d114      	bne.n	801755e <Argus_Measurement_GetRawDataBuffer+0x42>
 8017534:	f500 70ee 	add.w	r0, r0, #476	@ 0x1dc
 8017538:	2301      	movs	r3, #1
 801753a:	f880 31c5 	strb.w	r3, [r0, #453]	@ 0x1c5
 801753e:	4770      	bx	lr
 8017540:	f890 33a1 	ldrb.w	r3, [r0, #929]	@ 0x3a1
 8017544:	2b02      	cmp	r3, #2
 8017546:	d1ed      	bne.n	8017524 <Argus_Measurement_GetRawDataBuffer+0x8>
 8017548:	6982      	ldr	r2, [r0, #24]
 801754a:	f8d0 31e0 	ldr.w	r3, [r0, #480]	@ 0x1e0
 801754e:	429a      	cmp	r2, r3
 8017550:	d007      	beq.n	8017562 <Argus_Measurement_GetRawDataBuffer+0x46>
 8017552:	d8ef      	bhi.n	8017534 <Argus_Measurement_GetRawDataBuffer+0x18>
 8017554:	3014      	adds	r0, #20
 8017556:	2301      	movs	r3, #1
 8017558:	f880 31c5 	strb.w	r3, [r0, #453]	@ 0x1c5
 801755c:	4770      	bx	lr
 801755e:	2000      	movs	r0, #0
 8017560:	4770      	bx	lr
 8017562:	69c2      	ldr	r2, [r0, #28]
 8017564:	f8d0 31e4 	ldr.w	r3, [r0, #484]	@ 0x1e4
 8017568:	429a      	cmp	r2, r3
 801756a:	d2e3      	bcs.n	8017534 <Argus_Measurement_GetRawDataBuffer+0x18>
 801756c:	e7f2      	b.n	8017554 <Argus_Measurement_GetRawDataBuffer+0x38>
 801756e:	bf00      	nop

08017570 <Argus_Measurement_Start>:
 8017570:	b510      	push	{r4, lr}
 8017572:	4604      	mov	r4, r0
 8017574:	f8d0 03ac 	ldr.w	r0, [r0, #940]	@ 0x3ac
 8017578:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 801757c:	f010 fcf0 	bl	8027f60 <ADS_CheckTimeout>
 8017580:	f7ee ffb2 	bl	80064e8 <IRQ_LOCK>
 8017584:	7923      	ldrb	r3, [r4, #4]
 8017586:	b18b      	cbz	r3, 80175ac <Argus_Measurement_Start+0x3c>
 8017588:	2300      	movs	r3, #0
 801758a:	7123      	strb	r3, [r4, #4]
 801758c:	f7ee ff8a 	bl	80064a4 <IRQ_UNLOCK>
 8017590:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 8017594:	21c4      	movs	r1, #196	@ 0xc4
 8017596:	f008 f87b 	bl	801f690 <Argus_Dev_SetStatus>
 801759a:	b110      	cbz	r0, 80175a2 <Argus_Measurement_Start+0x32>
 801759c:	2301      	movs	r3, #1
 801759e:	7123      	strb	r3, [r4, #4]
 80175a0:	bd10      	pop	{r4, pc}
 80175a2:	4620      	mov	r0, r4
 80175a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80175a8:	f7ff bcbe 	b.w	8016f28 <Argus_Measurement_Start.part.0>
 80175ac:	f7ee ff7a 	bl	80064a4 <IRQ_UNLOCK>
 80175b0:	2069      	movs	r0, #105	@ 0x69
 80175b2:	bd10      	pop	{r4, pc}

080175b4 <TimerCallback>:
 80175b4:	4b08      	ldr	r3, [pc, #32]	@ (80175d8 <TimerCallback+0x24>)
 80175b6:	4a09      	ldr	r2, [pc, #36]	@ (80175dc <TimerCallback+0x28>)
 80175b8:	6819      	ldr	r1, [r3, #0]
 80175ba:	4809      	ldr	r0, [pc, #36]	@ (80175e0 <TimerCallback+0x2c>)
 80175bc:	b410      	push	{r4}
 80175be:	6814      	ldr	r4, [r2, #0]
 80175c0:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80175c4:	1c4a      	adds	r2, r1, #1
 80175c6:	42a2      	cmp	r2, r4
 80175c8:	601a      	str	r2, [r3, #0]
 80175ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80175ce:	bf24      	itt	cs
 80175d0:	2200      	movcs	r2, #0
 80175d2:	601a      	strcs	r2, [r3, #0]
 80175d4:	f7ff bf7c 	b.w	80174d0 <Argus_Measurement_TimerTick>
 80175d8:	240036ac 	.word	0x240036ac
 80175dc:	240036a8 	.word	0x240036a8
 80175e0:	24003698 	.word	0x24003698

080175e4 <TimerMngr_UpdateTimings>:
 80175e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80175e8:	f8df a0cc 	ldr.w	sl, [pc, #204]	@ 80176b8 <TimerMngr_UpdateTimings+0xd4>
 80175ec:	4e2d      	ldr	r6, [pc, #180]	@ (80176a4 <TimerMngr_UpdateTimings+0xc0>)
 80175ee:	f8da 3000 	ldr.w	r3, [sl]
 80175f2:	2400      	movs	r4, #0
 80175f4:	6034      	str	r4, [r6, #0]
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d046      	beq.n	8017688 <TimerMngr_UpdateTimings+0xa4>
 80175fa:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 80176bc <TimerMngr_UpdateTimings+0xd8>
 80175fe:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 80176a8 <TimerMngr_UpdateTimings+0xc4>
 8017602:	4627      	mov	r7, r4
 8017604:	f858 5b04 	ldr.w	r5, [r8], #4
 8017608:	4628      	mov	r0, r5
 801760a:	f7ff fd1d 	bl	8017048 <Argus_Measurement_GetTimerInterval>
 801760e:	b188      	cbz	r0, 8017634 <TimerMngr_UpdateTimings+0x50>
 8017610:	6833      	ldr	r3, [r6, #0]
 8017612:	1c5a      	adds	r2, r3, #1
 8017614:	f849 5023 	str.w	r5, [r9, r3, lsl #2]
 8017618:	f8da 3000 	ldr.w	r3, [sl]
 801761c:	6032      	str	r2, [r6, #0]
 801761e:	3401      	adds	r4, #1
 8017620:	429c      	cmp	r4, r3
 8017622:	d23b      	bcs.n	801769c <TimerMngr_UpdateTimings+0xb8>
 8017624:	f858 5b04 	ldr.w	r5, [r8], #4
 8017628:	4607      	mov	r7, r0
 801762a:	4628      	mov	r0, r5
 801762c:	f7ff fd0c 	bl	8017048 <Argus_Measurement_GetTimerInterval>
 8017630:	2800      	cmp	r0, #0
 8017632:	d1ed      	bne.n	8017610 <TimerMngr_UpdateTimings+0x2c>
 8017634:	f8da 3000 	ldr.w	r3, [sl]
 8017638:	3401      	adds	r4, #1
 801763a:	42a3      	cmp	r3, r4
 801763c:	d8e2      	bhi.n	8017604 <TimerMngr_UpdateTimings+0x20>
 801763e:	6833      	ldr	r3, [r6, #0]
 8017640:	b1a3      	cbz	r3, 801766c <TimerMngr_UpdateTimings+0x88>
 8017642:	4d19      	ldr	r5, [pc, #100]	@ (80176a8 <TimerMngr_UpdateTimings+0xc4>)
 8017644:	2400      	movs	r4, #0
 8017646:	e002      	b.n	801764e <TimerMngr_UpdateTimings+0x6a>
 8017648:	6833      	ldr	r3, [r6, #0]
 801764a:	42a3      	cmp	r3, r4
 801764c:	d90e      	bls.n	801766c <TimerMngr_UpdateTimings+0x88>
 801764e:	f855 0b04 	ldr.w	r0, [r5], #4
 8017652:	f7ff fcf9 	bl	8017048 <Argus_Measurement_GetTimerInterval>
 8017656:	42b8      	cmp	r0, r7
 8017658:	f104 0401 	add.w	r4, r4, #1
 801765c:	d0f4      	beq.n	8017648 <TimerMngr_UpdateTimings+0x64>
 801765e:	4813      	ldr	r0, [pc, #76]	@ (80176ac <TimerMngr_UpdateTimings+0xc8>)
 8017660:	f7fb fc98 	bl	8012f94 <print>
 8017664:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8017668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801766c:	b167      	cbz	r7, 8017688 <TimerMngr_UpdateTimings+0xa4>
 801766e:	4810      	ldr	r0, [pc, #64]	@ (80176b0 <TimerMngr_UpdateTimings+0xcc>)
 8017670:	f7ef fbba 	bl	8006de8 <Timer_SetCallback>
 8017674:	2800      	cmp	r0, #0
 8017676:	d1f7      	bne.n	8017668 <TimerMngr_UpdateTimings+0x84>
 8017678:	6833      	ldr	r3, [r6, #0]
 801767a:	4601      	mov	r1, r0
 801767c:	fbb7 f0f3 	udiv	r0, r7, r3
 8017680:	f7ef fb3e 	bl	8006d00 <Timer_SetInterval>
 8017684:	b128      	cbz	r0, 8017692 <TimerMngr_UpdateTimings+0xae>
 8017686:	e7ef      	b.n	8017668 <TimerMngr_UpdateTimings+0x84>
 8017688:	2000      	movs	r0, #0
 801768a:	f7ef fbad 	bl	8006de8 <Timer_SetCallback>
 801768e:	2800      	cmp	r0, #0
 8017690:	d1ea      	bne.n	8017668 <TimerMngr_UpdateTimings+0x84>
 8017692:	4b08      	ldr	r3, [pc, #32]	@ (80176b4 <TimerMngr_UpdateTimings+0xd0>)
 8017694:	2000      	movs	r0, #0
 8017696:	6018      	str	r0, [r3, #0]
 8017698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801769c:	4607      	mov	r7, r0
 801769e:	2a00      	cmp	r2, #0
 80176a0:	d1cf      	bne.n	8017642 <TimerMngr_UpdateTimings+0x5e>
 80176a2:	e7e4      	b.n	801766e <TimerMngr_UpdateTimings+0x8a>
 80176a4:	240036a8 	.word	0x240036a8
 80176a8:	24003698 	.word	0x24003698
 80176ac:	0802d5f8 	.word	0x0802d5f8
 80176b0:	080175b5 	.word	0x080175b5
 80176b4:	240036ac 	.word	0x240036ac
 80176b8:	240036c0 	.word	0x240036c0
 80176bc:	240036b0 	.word	0x240036b0

080176c0 <TimerMngr_subscribeArgus>:
 80176c0:	490f      	ldr	r1, [pc, #60]	@ (8017700 <TimerMngr_subscribeArgus+0x40>)
 80176c2:	4a10      	ldr	r2, [pc, #64]	@ (8017704 <TimerMngr_subscribeArgus+0x44>)
 80176c4:	680b      	ldr	r3, [r1, #0]
 80176c6:	b410      	push	{r4}
 80176c8:	b1c3      	cbz	r3, 80176fc <TimerMngr_subscribeArgus+0x3c>
 80176ca:	6814      	ldr	r4, [r2, #0]
 80176cc:	4284      	cmp	r4, r0
 80176ce:	d012      	beq.n	80176f6 <TimerMngr_subscribeArgus+0x36>
 80176d0:	2b01      	cmp	r3, #1
 80176d2:	d00c      	beq.n	80176ee <TimerMngr_subscribeArgus+0x2e>
 80176d4:	6854      	ldr	r4, [r2, #4]
 80176d6:	42a0      	cmp	r0, r4
 80176d8:	d00d      	beq.n	80176f6 <TimerMngr_subscribeArgus+0x36>
 80176da:	2b02      	cmp	r3, #2
 80176dc:	d007      	beq.n	80176ee <TimerMngr_subscribeArgus+0x2e>
 80176de:	6894      	ldr	r4, [r2, #8]
 80176e0:	42a0      	cmp	r0, r4
 80176e2:	d008      	beq.n	80176f6 <TimerMngr_subscribeArgus+0x36>
 80176e4:	2b03      	cmp	r3, #3
 80176e6:	d002      	beq.n	80176ee <TimerMngr_subscribeArgus+0x2e>
 80176e8:	68d4      	ldr	r4, [r2, #12]
 80176ea:	4284      	cmp	r4, r0
 80176ec:	d003      	beq.n	80176f6 <TimerMngr_subscribeArgus+0x36>
 80176ee:	1c5c      	adds	r4, r3, #1
 80176f0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80176f4:	600c      	str	r4, [r1, #0]
 80176f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80176fa:	4770      	bx	lr
 80176fc:	2401      	movs	r4, #1
 80176fe:	e7f7      	b.n	80176f0 <TimerMngr_subscribeArgus+0x30>
 8017700:	240036c0 	.word	0x240036c0
 8017704:	240036b0 	.word	0x240036b0

08017708 <TimerMngr_unsubscribeArgus>:
 8017708:	b538      	push	{r3, r4, r5, lr}
 801770a:	4d19      	ldr	r5, [pc, #100]	@ (8017770 <TimerMngr_unsubscribeArgus+0x68>)
 801770c:	682c      	ldr	r4, [r5, #0]
 801770e:	b1ac      	cbz	r4, 801773c <TimerMngr_unsubscribeArgus+0x34>
 8017710:	4a18      	ldr	r2, [pc, #96]	@ (8017774 <TimerMngr_unsubscribeArgus+0x6c>)
 8017712:	6811      	ldr	r1, [r2, #0]
 8017714:	4288      	cmp	r0, r1
 8017716:	d012      	beq.n	801773e <TimerMngr_unsubscribeArgus+0x36>
 8017718:	2c01      	cmp	r4, #1
 801771a:	d00f      	beq.n	801773c <TimerMngr_unsubscribeArgus+0x34>
 801771c:	6851      	ldr	r1, [r2, #4]
 801771e:	4288      	cmp	r0, r1
 8017720:	d020      	beq.n	8017764 <TimerMngr_unsubscribeArgus+0x5c>
 8017722:	2c02      	cmp	r4, #2
 8017724:	d00a      	beq.n	801773c <TimerMngr_unsubscribeArgus+0x34>
 8017726:	6891      	ldr	r1, [r2, #8]
 8017728:	4288      	cmp	r0, r1
 801772a:	d01e      	beq.n	801776a <TimerMngr_unsubscribeArgus+0x62>
 801772c:	2c03      	cmp	r4, #3
 801772e:	d005      	beq.n	801773c <TimerMngr_unsubscribeArgus+0x34>
 8017730:	68d1      	ldr	r1, [r2, #12]
 8017732:	4281      	cmp	r1, r0
 8017734:	bf08      	it	eq
 8017736:	f04f 0c03 	moveq.w	ip, #3
 801773a:	d002      	beq.n	8017742 <TimerMngr_unsubscribeArgus+0x3a>
 801773c:	bd38      	pop	{r3, r4, r5, pc}
 801773e:	f04f 0c00 	mov.w	ip, #0
 8017742:	f10c 0101 	add.w	r1, ip, #1
 8017746:	42a1      	cmp	r1, r4
 8017748:	f104 34ff 	add.w	r4, r4, #4294967295
 801774c:	d208      	bcs.n	8017760 <TimerMngr_unsubscribeArgus+0x58>
 801774e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8017752:	eb02 008c 	add.w	r0, r2, ip, lsl #2
 8017756:	eba4 020c 	sub.w	r2, r4, ip
 801775a:	0092      	lsls	r2, r2, #2
 801775c:	f011 ffdf 	bl	802971e <memmove>
 8017760:	602c      	str	r4, [r5, #0]
 8017762:	bd38      	pop	{r3, r4, r5, pc}
 8017764:	f04f 0c01 	mov.w	ip, #1
 8017768:	e7eb      	b.n	8017742 <TimerMngr_unsubscribeArgus+0x3a>
 801776a:	f04f 0c02 	mov.w	ip, #2
 801776e:	e7e8      	b.n	8017742 <TimerMngr_unsubscribeArgus+0x3a>
 8017770:	240036c0 	.word	0x240036c0
 8017774:	240036b0 	.word	0x240036b0

08017778 <ApplyPhaseEvaluation>:
 8017778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801777c:	460c      	mov	r4, r1
 801777e:	f5ad 7d15 	sub.w	sp, sp, #596	@ 0x254
 8017782:	f8d0 3354 	ldr.w	r3, [r0, #852]	@ 0x354
 8017786:	920d      	str	r2, [sp, #52]	@ 0x34
 8017788:	8ba2      	ldrh	r2, [r4, #28]
 801778a:	9005      	str	r0, [sp, #20]
 801778c:	0992      	lsrs	r2, r2, #6
 801778e:	2a01      	cmp	r2, #1
 8017790:	f8d0 036c 	ldr.w	r0, [r0, #876]	@ 0x36c
 8017794:	900f      	str	r0, [sp, #60]	@ 0x3c
 8017796:	bf38      	it	cc
 8017798:	2201      	movcc	r2, #1
 801779a:	2a20      	cmp	r2, #32
 801779c:	bf94      	ite	ls
 801779e:	1880      	addls	r0, r0, r2
 80177a0:	3020      	addhi	r0, #32
 80177a2:	7b1b      	ldrb	r3, [r3, #12]
 80177a4:	910c      	str	r1, [sp, #48]	@ 0x30
 80177a6:	8bc9      	ldrh	r1, [r1, #30]
 80177a8:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 80177ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80177ae:	fb01 f303 	mul.w	r3, r1, r3
 80177b2:	030a      	lsls	r2, r1, #12
 80177b4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80177b8:	00db      	lsls	r3, r3, #3
 80177ba:	f8d4 01cc 	ldr.w	r0, [r4, #460]	@ 0x1cc
 80177be:	9304      	str	r3, [sp, #16]
 80177c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80177c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80177c8:	3301      	adds	r3, #1
 80177ca:	085b      	lsrs	r3, r3, #1
 80177cc:	9006      	str	r0, [sp, #24]
 80177ce:	920a      	str	r2, [sp, #40]	@ 0x28
 80177d0:	9308      	str	r3, [sp, #32]
 80177d2:	2800      	cmp	r0, #0
 80177d4:	f000 863a 	beq.w	801844c <ApplyPhaseEvaluation+0xcd4>
 80177d8:	ab12      	add	r3, sp, #72	@ 0x48
 80177da:	1d05      	adds	r5, r0, #4
 80177dc:	930e      	str	r3, [sp, #56]	@ 0x38
 80177de:	4620      	mov	r0, r4
 80177e0:	e9d0 b204 	ldrd	fp, r2, [r0, #16]
 80177e4:	0853      	lsrs	r3, r2, #1
 80177e6:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 80177ea:	1ad3      	subs	r3, r2, r3
 80177ec:	0899      	lsrs	r1, r3, #2
 80177ee:	f001 3133 	and.w	r1, r1, #858993459	@ 0x33333333
 80177f2:	ea4f 025b 	mov.w	r2, fp, lsr #1
 80177f6:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 80177fa:	440b      	add	r3, r1
 80177fc:	f002 3255 	and.w	r2, r2, #1431655765	@ 0x55555555
 8017800:	ebab 0202 	sub.w	r2, fp, r2
 8017804:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 8017808:	f003 340f 	and.w	r4, r3, #252645135	@ 0xf0f0f0f
 801780c:	0893      	lsrs	r3, r2, #2
 801780e:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8017812:	f002 3233 	and.w	r2, r2, #858993459	@ 0x33333333
 8017816:	4413      	add	r3, r2
 8017818:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 801781c:	eb04 2404 	add.w	r4, r4, r4, lsl #8
 8017820:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8017824:	eb04 4404 	add.w	r4, r4, r4, lsl #16
 8017828:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 801782c:	eb03 4303 	add.w	r3, r3, r3, lsl #16
 8017830:	0e24      	lsrs	r4, r4, #24
 8017832:	eb04 6413 	add.w	r4, r4, r3, lsr #24
 8017836:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017838:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801783c:	691a      	ldr	r2, [r3, #16]
 801783e:	9207      	str	r2, [sp, #28]
 8017840:	3028      	adds	r0, #40	@ 0x28
 8017842:	3329      	adds	r3, #41	@ 0x29
 8017844:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 8017848:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 8017860 <ApplyPhaseEvaluation+0xe8>
 801784c:	9010      	str	r0, [sp, #64]	@ 0x40
 801784e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017850:	aa54      	add	r2, sp, #336	@ 0x150
 8017852:	f50d 7a14 	add.w	sl, sp, #592	@ 0x250
 8017856:	2100      	movs	r1, #0
 8017858:	9403      	str	r4, [sp, #12]
 801785a:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
 801785e:	e010      	b.n	8017882 <ApplyPhaseEvaluation+0x10a>
	...
 8017868:	ed02 7b02 	vstr	d7, [r2, #-8]
 801786c:	3208      	adds	r2, #8
 801786e:	f04f 0301 	mov.w	r3, #1
 8017872:	4592      	cmp	sl, r2
 8017874:	7203      	strb	r3, [r0, #8]
 8017876:	f101 0101 	add.w	r1, r1, #1
 801787a:	f100 000c 	add.w	r0, r0, #12
 801787e:	f000 80cc 	beq.w	8017a1a <ApplyPhaseEvaluation+0x2a2>
 8017882:	fa2b f301 	lsr.w	r3, fp, r1
 8017886:	07dc      	lsls	r4, r3, #31
 8017888:	d5ee      	bpl.n	8017868 <ApplyPhaseEvaluation+0xf0>
 801788a:	ea6f 0351 	mvn.w	r3, r1, lsr #1
 801788e:	f003 060e 	and.w	r6, r3, #14
 8017892:	00cb      	lsls	r3, r1, #3
 8017894:	f003 0310 	and.w	r3, r3, #16
 8017898:	4333      	orrs	r3, r6
 801789a:	f001 0601 	and.w	r6, r1, #1
 801789e:	4333      	orrs	r3, r6
 80178a0:	f04f 34ff 	mov.w	r4, #4294967295
 80178a4:	9e07      	ldr	r6, [sp, #28]
 80178a6:	fa04 f303 	lsl.w	r3, r4, r3
 80178aa:	ea26 0603 	bic.w	r6, r6, r3
 80178ae:	0873      	lsrs	r3, r6, #1
 80178b0:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 80178b4:	1af3      	subs	r3, r6, r3
 80178b6:	089e      	lsrs	r6, r3, #2
 80178b8:	f006 3633 	and.w	r6, r6, #858993459	@ 0x33333333
 80178bc:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 80178c0:	4433      	add	r3, r6
 80178c2:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 80178c6:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 80178ca:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 80178ce:	eb03 4303 	add.w	r3, r3, r3, lsl #16
 80178d2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80178d4:	9c03      	ldr	r4, [sp, #12]
 80178d6:	0e1b      	lsrs	r3, r3, #24
 80178d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80178dc:	18f7      	adds	r7, r6, r3
 80178de:	5cf6      	ldrb	r6, [r6, r3]
 80178e0:	787b      	ldrb	r3, [r7, #1]
 80178e2:	021b      	lsls	r3, r3, #8
 80178e4:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80178e8:	78be      	ldrb	r6, [r7, #2]
 80178ea:	4333      	orrs	r3, r6
 80178ec:	f413 0f40 	tst.w	r3, #12582912	@ 0xc00000
 80178f0:	eb07 0e04 	add.w	lr, r7, r4
 80178f4:	f3c3 0915 	ubfx	r9, r3, #0, #22
 80178f8:	f040 8210 	bne.w	8017d1c <ApplyPhaseEvaluation+0x5a4>
 80178fc:	9e04      	ldr	r6, [sp, #16]
 80178fe:	454e      	cmp	r6, r9
 8017900:	f200 820c 	bhi.w	8017d1c <ApplyPhaseEvaluation+0x5a4>
 8017904:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8017906:	454c      	cmp	r4, r9
 8017908:	bf34      	ite	cc
 801790a:	f04f 0c02 	movcc.w	ip, #2
 801790e:	f04f 0c00 	movcs.w	ip, #0
 8017912:	9c03      	ldr	r4, [sp, #12]
 8017914:	602b      	str	r3, [r5, #0]
 8017916:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801791a:	5d3b      	ldrb	r3, [r7, r4]
 801791c:	f89e 8002 	ldrb.w	r8, [lr, #2]
 8017920:	0236      	lsls	r6, r6, #8
 8017922:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8017926:	f416 0f40 	tst.w	r6, #12582912	@ 0xc00000
 801792a:	ea46 0808 	orr.w	r8, r6, r8
 801792e:	eb0e 0304 	add.w	r3, lr, r4
 8017932:	f040 81f0 	bne.w	8017d16 <ApplyPhaseEvaluation+0x59e>
 8017936:	9c04      	ldr	r4, [sp, #16]
 8017938:	f3c8 0615 	ubfx	r6, r8, #0, #22
 801793c:	42b4      	cmp	r4, r6
 801793e:	f200 81ea 	bhi.w	8017d16 <ApplyPhaseEvaluation+0x59e>
 8017942:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8017944:	42b4      	cmp	r4, r6
 8017946:	bf38      	it	cc
 8017948:	f04f 0c02 	movcc.w	ip, #2
 801794c:	9c03      	ldr	r4, [sp, #12]
 801794e:	f8c5 8004 	str.w	r8, [r5, #4]
 8017952:	f817 6014 	ldrb.w	r6, [r7, r4, lsl #1]
 8017956:	785f      	ldrb	r7, [r3, #1]
 8017958:	023f      	lsls	r7, r7, #8
 801795a:	ea47 4706 	orr.w	r7, r7, r6, lsl #16
 801795e:	789e      	ldrb	r6, [r3, #2]
 8017960:	4337      	orrs	r7, r6
 8017962:	f417 0f40 	tst.w	r7, #12582912	@ 0xc00000
 8017966:	4423      	add	r3, r4
 8017968:	f3c7 0615 	ubfx	r6, r7, #0, #22
 801796c:	f040 81d0 	bne.w	8017d10 <ApplyPhaseEvaluation+0x598>
 8017970:	9c04      	ldr	r4, [sp, #16]
 8017972:	42b4      	cmp	r4, r6
 8017974:	f200 81cc 	bhi.w	8017d10 <ApplyPhaseEvaluation+0x598>
 8017978:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801797a:	42b4      	cmp	r4, r6
 801797c:	bf38      	it	cc
 801797e:	f04f 0c02 	movcc.w	ip, #2
 8017982:	60af      	str	r7, [r5, #8]
 8017984:	9c03      	ldr	r4, [sp, #12]
 8017986:	785f      	ldrb	r7, [r3, #1]
 8017988:	f81e e014 	ldrb.w	lr, [lr, r4, lsl #1]
 801798c:	789b      	ldrb	r3, [r3, #2]
 801798e:	023f      	lsls	r7, r7, #8
 8017990:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 8017994:	f417 0f40 	tst.w	r7, #12582912	@ 0xc00000
 8017998:	ea43 0307 	orr.w	r3, r3, r7
 801799c:	f040 81b5 	bne.w	8017d0a <ApplyPhaseEvaluation+0x592>
 80179a0:	9c04      	ldr	r4, [sp, #16]
 80179a2:	f3c3 0715 	ubfx	r7, r3, #0, #22
 80179a6:	42bc      	cmp	r4, r7
 80179a8:	f200 81af 	bhi.w	8017d0a <ApplyPhaseEvaluation+0x592>
 80179ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80179ae:	42bc      	cmp	r4, r7
 80179b0:	bf38      	it	cc
 80179b2:	f04f 0c02 	movcc.w	ip, #2
 80179b6:	9c08      	ldr	r4, [sp, #32]
 80179b8:	60eb      	str	r3, [r5, #12]
 80179ba:	eba6 0609 	sub.w	r6, r6, r9
 80179be:	fb04 f606 	mul.w	r6, r4, r6
 80179c2:	f842 6c08 	str.w	r6, [r2, #-8]
 80179c6:	68eb      	ldr	r3, [r5, #12]
 80179c8:	686f      	ldr	r7, [r5, #4]
 80179ca:	f880 c008 	strb.w	ip, [r0, #8]
 80179ce:	f3c7 0715 	ubfx	r7, r7, #0, #22
 80179d2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80179d6:	1bdb      	subs	r3, r3, r7
 80179d8:	9f06      	ldr	r7, [sp, #24]
 80179da:	fb04 f303 	mul.w	r3, r4, r3
 80179de:	b107      	cbz	r7, 80179e2 <ApplyPhaseEvaluation+0x26a>
 80179e0:	3510      	adds	r5, #16
 80179e2:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80179e4:	11b6      	asrs	r6, r6, #6
 80179e6:	fb07 f606 	mul.w	r6, r7, r6
 80179ea:	119b      	asrs	r3, r3, #6
 80179ec:	fb07 f303 	mul.w	r3, r7, r3
 80179f0:	2e00      	cmp	r6, #0
 80179f2:	f842 6c08 	str.w	r6, [r2, #-8]
 80179f6:	bfb8      	it	lt
 80179f8:	4276      	neglt	r6, r6
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	f842 3c04 	str.w	r3, [r2, #-4]
 8017a00:	bfb8      	it	lt
 8017a02:	425b      	neglt	r3, r3
 8017a04:	4433      	add	r3, r6
 8017a06:	3208      	adds	r2, #8
 8017a08:	0b5b      	lsrs	r3, r3, #13
 8017a0a:	4592      	cmp	sl, r2
 8017a0c:	8143      	strh	r3, [r0, #10]
 8017a0e:	f101 0101 	add.w	r1, r1, #1
 8017a12:	f100 000c 	add.w	r0, r0, #12
 8017a16:	f47f af34 	bne.w	8017882 <ApplyPhaseEvaluation+0x10a>
 8017a1a:	9a07      	ldr	r2, [sp, #28]
 8017a1c:	9c03      	ldr	r4, [sp, #12]
 8017a1e:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 8017a22:	0853      	lsrs	r3, r2, #1
 8017a24:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8017a28:	1ad3      	subs	r3, r2, r3
 8017a2a:	089a      	lsrs	r2, r3, #2
 8017a2c:	f002 3233 	and.w	r2, r2, #858993459	@ 0x33333333
 8017a30:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8017a34:	4413      	add	r3, r2
 8017a36:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 8017a3a:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8017a3e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017a40:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 8017a44:	eb03 4303 	add.w	r3, r3, r3, lsl #16
 8017a48:	6957      	ldr	r7, [r2, #20]
 8017a4a:	0e1b      	lsrs	r3, r3, #24
 8017a4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017a50:	3301      	adds	r3, #1
 8017a52:	f102 0128 	add.w	r1, r2, #40	@ 0x28
 8017a56:	07f8      	lsls	r0, r7, #31
 8017a58:	eb01 0203 	add.w	r2, r1, r3
 8017a5c:	f100 8402 	bmi.w	8018264 <ApplyPhaseEvaluation+0xaec>
 8017a60:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017a62:	2301      	movs	r3, #1
 8017a64:	f881 31b0 	strb.w	r3, [r1, #432]	@ 0x1b0
 8017a68:	2000      	movs	r0, #0
 8017a6a:	2100      	movs	r1, #0
 8017a6c:	e9cd 0192 	strd	r0, r1, [sp, #584]	@ 0x248
 8017a70:	9b06      	ldr	r3, [sp, #24]
 8017a72:	b373      	cbz	r3, 8017ad2 <ApplyPhaseEvaluation+0x35a>
 8017a74:	087f      	lsrs	r7, r7, #1
 8017a76:	d02c      	beq.n	8017ad2 <ApplyPhaseEvaluation+0x35a>
 8017a78:	07f9      	lsls	r1, r7, #31
 8017a7a:	d5fb      	bpl.n	8017a74 <ApplyPhaseEvaluation+0x2fc>
 8017a7c:	7813      	ldrb	r3, [r2, #0]
 8017a7e:	7851      	ldrb	r1, [r2, #1]
 8017a80:	7890      	ldrb	r0, [r2, #2]
 8017a82:	041b      	lsls	r3, r3, #16
 8017a84:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8017a88:	4303      	orrs	r3, r0
 8017a8a:	1911      	adds	r1, r2, r4
 8017a8c:	602b      	str	r3, [r5, #0]
 8017a8e:	784b      	ldrb	r3, [r1, #1]
 8017a90:	5d10      	ldrb	r0, [r2, r4]
 8017a92:	788e      	ldrb	r6, [r1, #2]
 8017a94:	021b      	lsls	r3, r3, #8
 8017a96:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8017a9a:	4333      	orrs	r3, r6
 8017a9c:	1908      	adds	r0, r1, r4
 8017a9e:	606b      	str	r3, [r5, #4]
 8017aa0:	7843      	ldrb	r3, [r0, #1]
 8017aa2:	f812 c014 	ldrb.w	ip, [r2, r4, lsl #1]
 8017aa6:	7886      	ldrb	r6, [r0, #2]
 8017aa8:	021b      	lsls	r3, r3, #8
 8017aaa:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8017aae:	4333      	orrs	r3, r6
 8017ab0:	4420      	add	r0, r4
 8017ab2:	60ab      	str	r3, [r5, #8]
 8017ab4:	7843      	ldrb	r3, [r0, #1]
 8017ab6:	f811 6014 	ldrb.w	r6, [r1, r4, lsl #1]
 8017aba:	7881      	ldrb	r1, [r0, #2]
 8017abc:	021b      	lsls	r3, r3, #8
 8017abe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8017ac2:	430b      	orrs	r3, r1
 8017ac4:	087f      	lsrs	r7, r7, #1
 8017ac6:	60eb      	str	r3, [r5, #12]
 8017ac8:	f102 0203 	add.w	r2, r2, #3
 8017acc:	f105 0510 	add.w	r5, r5, #16
 8017ad0:	d1d2      	bne.n	8017a78 <ApplyPhaseEvaluation+0x300>
 8017ad2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8017ad4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8017ad6:	aa52      	add	r2, sp, #328	@ 0x148
 8017ad8:	4629      	mov	r1, r5
 8017ada:	f00c ff77 	bl	80249cc <Argus_Cal_UpdateLddXtalkVectors>
 8017ade:	9b05      	ldr	r3, [sp, #20]
 8017ae0:	8baa      	ldrh	r2, [r5, #28]
 8017ae2:	f8d3 3368 	ldr.w	r3, [r3, #872]	@ 0x368
 8017ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8017ae8:	8a1c      	ldrh	r4, [r3, #16]
 8017aea:	69ab      	ldr	r3, [r5, #24]
 8017aec:	f003 0106 	and.w	r1, r3, #6
 8017af0:	f1a1 0106 	sub.w	r1, r1, #6
 8017af4:	fab1 f181 	clz	r1, r1
 8017af8:	0949      	lsrs	r1, r1, #5
 8017afa:	f403 5000 	and.w	r0, r3, #8192	@ 0x2000
 8017afe:	f3c3 3340 	ubfx	r3, r3, #13, #1
 8017b02:	930a      	str	r3, [sp, #40]	@ 0x28
 8017b04:	9109      	str	r1, [sp, #36]	@ 0x24
 8017b06:	0293      	lsls	r3, r2, #10
 8017b08:	b17a      	cbz	r2, 8017b2a <ApplyPhaseEvaluation+0x3b2>
 8017b0a:	ebb3 2f84 	cmp.w	r3, r4, lsl #10
 8017b0e:	ea4f 2184 	mov.w	r1, r4, lsl #10
 8017b12:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8017b16:	f080 8335 	bcs.w	8018184 <ApplyPhaseEvaluation+0xa0c>
 8017b1a:	005b      	lsls	r3, r3, #1
 8017b1c:	4299      	cmp	r1, r3
 8017b1e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8017b22:	d8fa      	bhi.n	8017b1a <ApplyPhaseEvaluation+0x3a2>
 8017b24:	2a00      	cmp	r2, #0
 8017b26:	f040 832d 	bne.w	8018184 <ApplyPhaseEvaluation+0xa0c>
 8017b2a:	221f      	movs	r2, #31
 8017b2c:	fab0 f380 	clz	r3, r0
 8017b30:	095b      	lsrs	r3, r3, #5
 8017b32:	3b10      	subs	r3, #16
 8017b34:	4413      	add	r3, r2
 8017b36:	b2dc      	uxtb	r4, r3
 8017b38:	9b05      	ldr	r3, [sp, #20]
 8017b3a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8017b3c:	f8d3 136c 	ldr.w	r1, [r3, #876]	@ 0x36c
 8017b40:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8017b42:	940f      	str	r4, [sp, #60]	@ 0x3c
 8017b44:	eb06 1846 	add.w	r8, r6, r6, lsl #5
 8017b48:	eb01 0888 	add.w	r8, r1, r8, lsl #2
 8017b4c:	aa53      	add	r2, sp, #332	@ 0x14c
 8017b4e:	00b6      	lsls	r6, r6, #2
 8017b50:	e9cd 9203 	strd	r9, r2, [sp, #12]
 8017b54:	f108 0a32 	add.w	sl, r8, #50	@ 0x32
 8017b58:	9107      	str	r1, [sp, #28]
 8017b5a:	f108 0834 	add.w	r8, r8, #52	@ 0x34
 8017b5e:	4615      	mov	r5, r2
 8017b60:	2300      	movs	r3, #0
 8017b62:	f1c4 0e0c 	rsb	lr, r4, #12
 8017b66:	468c      	mov	ip, r1
 8017b68:	46b1      	mov	r9, r6
 8017b6a:	e004      	b.n	8017b76 <ApplyPhaseEvaluation+0x3fe>
 8017b6c:	3301      	adds	r3, #1
 8017b6e:	2b21      	cmp	r3, #33	@ 0x21
 8017b70:	f105 0508 	add.w	r5, r5, #8
 8017b74:	d032      	beq.n	8017bdc <ApplyPhaseEvaluation+0x464>
 8017b76:	f890 2030 	ldrb.w	r2, [r0, #48]	@ 0x30
 8017b7a:	07d2      	lsls	r2, r2, #31
 8017b7c:	f100 000c 	add.w	r0, r0, #12
 8017b80:	d4f4      	bmi.n	8017b6c <ApplyPhaseEvaluation+0x3f4>
 8017b82:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8017b86:	f003 0103 	and.w	r1, r3, #3
 8017b8a:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 8017b8e:	4449      	add	r1, r9
 8017b90:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 8017b94:	f93a 6023 	ldrsh.w	r6, [sl, r3, lsl #2]
 8017b98:	f9b2 413a 	ldrsh.w	r4, [r2, #314]	@ 0x13a
 8017b9c:	f9b1 7142 	ldrsh.w	r7, [r1, #322]	@ 0x142
 8017ba0:	f938 b023 	ldrsh.w	fp, [r8, r3, lsl #2]
 8017ba4:	f9b2 213c 	ldrsh.w	r2, [r2, #316]	@ 0x13c
 8017ba8:	4434      	add	r4, r6
 8017baa:	443c      	add	r4, r7
 8017bac:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8017bb0:	fa04 f40e 	lsl.w	r4, r4, lr
 8017bb4:	af52      	add	r7, sp, #328	@ 0x148
 8017bb6:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
 8017bba:	445a      	add	r2, fp
 8017bbc:	4434      	add	r4, r6
 8017bbe:	f9b1 b144 	ldrsh.w	fp, [r1, #324]	@ 0x144
 8017bc2:	f845 4c04 	str.w	r4, [r5, #-4]
 8017bc6:	6879      	ldr	r1, [r7, #4]
 8017bc8:	4493      	add	fp, r2
 8017bca:	fa0b fb0e 	lsl.w	fp, fp, lr
 8017bce:	3301      	adds	r3, #1
 8017bd0:	4459      	add	r1, fp
 8017bd2:	2b21      	cmp	r3, #33	@ 0x21
 8017bd4:	6079      	str	r1, [r7, #4]
 8017bd6:	f105 0508 	add.w	r5, r5, #8
 8017bda:	d1cc      	bne.n	8017b76 <ApplyPhaseEvaluation+0x3fe>
 8017bdc:	9b07      	ldr	r3, [sp, #28]
 8017bde:	f893 345c 	ldrb.w	r3, [r3, #1116]	@ 0x45c
 8017be2:	e9dd 9203 	ldrd	r9, r2, [sp, #12]
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	f000 81b2 	beq.w	8017f50 <ApplyPhaseEvaluation+0x7d8>
 8017bec:	9b05      	ldr	r3, [sp, #20]
 8017bee:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 8017bf2:	f8d3 1348 	ldr.w	r1, [r3, #840]	@ 0x348
 8017bf6:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8017bfa:	9103      	str	r1, [sp, #12]
 8017bfc:	ea81 70e1 	eor.w	r0, r1, r1, asr #31
 8017c00:	eba0 70e1 	sub.w	r0, r0, r1, asr #31
 8017c04:	4601      	mov	r1, r0
 8017c06:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 8017c0a:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8017c0e:	f04f 0a00 	mov.w	sl, #0
 8017c12:	9006      	str	r0, [sp, #24]
 8017c14:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8017c16:	f8dd b030 	ldr.w	fp, [sp, #48]	@ 0x30
 8017c1a:	9304      	str	r3, [sp, #16]
 8017c1c:	ac13      	add	r4, sp, #76	@ 0x4c
 8017c1e:	4650      	mov	r0, sl
 8017c20:	4689      	mov	r9, r1
 8017c22:	9211      	str	r2, [sp, #68]	@ 0x44
 8017c24:	e009      	b.n	8017c3a <ApplyPhaseEvaluation+0x4c2>
 8017c26:	3001      	adds	r0, #1
 8017c28:	2820      	cmp	r0, #32
 8017c2a:	f105 0508 	add.w	r5, r5, #8
 8017c2e:	f10b 0b0c 	add.w	fp, fp, #12
 8017c32:	f104 0408 	add.w	r4, r4, #8
 8017c36:	f000 8188 	beq.w	8017f4a <ApplyPhaseEvaluation+0x7d2>
 8017c3a:	f89b 3030 	ldrb.w	r3, [fp, #48]	@ 0x30
 8017c3e:	f844 ac04 	str.w	sl, [r4, #-4]
 8017c42:	07db      	lsls	r3, r3, #31
 8017c44:	f8c5 a004 	str.w	sl, [r5, #4]
 8017c48:	d4ed      	bmi.n	8017c26 <ApplyPhaseEvaluation+0x4ae>
 8017c4a:	07c7      	lsls	r7, r0, #31
 8017c4c:	ea4f 0190 	mov.w	r1, r0, lsr #2
 8017c50:	f000 0603 	and.w	r6, r0, #3
 8017c54:	f100 80c8 	bmi.w	8017de8 <ApplyPhaseEvaluation+0x670>
 8017c58:	2e00      	cmp	r6, #0
 8017c5a:	d062      	beq.n	8017d22 <ApplyPhaseEvaluation+0x5aa>
 8017c5c:	f020 0e03 	bic.w	lr, r0, #3
 8017c60:	f106 3cff 	add.w	ip, r6, #4294967295
 8017c64:	ea4e 030c 	orr.w	r3, lr, ip
 8017c68:	aa52      	add	r2, sp, #328	@ 0x148
 8017c6a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8017c6e:	af52      	add	r7, sp, #328	@ 0x148
 8017c70:	6852      	ldr	r2, [r2, #4]
 8017c72:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
 8017c76:	f844 3c04 	str.w	r3, [r4, #-4]
 8017c7a:	2907      	cmp	r1, #7
 8017c7c:	606a      	str	r2, [r5, #4]
 8017c7e:	f000 82e7 	beq.w	8018250 <ApplyPhaseEvaluation+0xad8>
 8017c82:	1c4f      	adds	r7, r1, #1
 8017c84:	ea4c 0c87 	orr.w	ip, ip, r7, lsl #2
 8017c88:	ea46 0887 	orr.w	r8, r6, r7, lsl #2
 8017c8c:	00bf      	lsls	r7, r7, #2
 8017c8e:	9708      	str	r7, [sp, #32]
 8017c90:	af52      	add	r7, sp, #328	@ 0x148
 8017c92:	eb07 07cc 	add.w	r7, r7, ip, lsl #3
 8017c96:	970b      	str	r7, [sp, #44]	@ 0x2c
 8017c98:	af52      	add	r7, sp, #328	@ 0x148
 8017c9a:	2e03      	cmp	r6, #3
 8017c9c:	f857 c03c 	ldr.w	ip, [r7, ip, lsl #3]
 8017ca0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8017ca2:	4463      	add	r3, ip
 8017ca4:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8017ca8:	af52      	add	r7, sp, #328	@ 0x148
 8017caa:	4462      	add	r2, ip
 8017cac:	eb07 0cc8 	add.w	ip, r7, r8, lsl #3
 8017cb0:	f857 8038 	ldr.w	r8, [r7, r8, lsl #3]
 8017cb4:	f8dc c004 	ldr.w	ip, [ip, #4]
 8017cb8:	4443      	add	r3, r8
 8017cba:	4462      	add	r2, ip
 8017cbc:	f844 3c04 	str.w	r3, [r4, #-4]
 8017cc0:	606a      	str	r2, [r5, #4]
 8017cc2:	d13c      	bne.n	8017d3e <ApplyPhaseEvaluation+0x5c6>
 8017cc4:	2900      	cmp	r1, #0
 8017cc6:	d15d      	bne.n	8017d84 <ApplyPhaseEvaluation+0x60c>
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	db69      	blt.n	8017da0 <ApplyPhaseEvaluation+0x628>
 8017ccc:	9903      	ldr	r1, [sp, #12]
 8017cce:	2900      	cmp	r1, #0
 8017cd0:	f2c0 8108 	blt.w	8017ee4 <ApplyPhaseEvaluation+0x76c>
 8017cd4:	fba9 3603 	umull	r3, r6, r9, r3
 8017cd8:	0c19      	lsrs	r1, r3, #16
 8017cda:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 8017cde:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8017ce2:	4419      	add	r1, r3
 8017ce4:	2a00      	cmp	r2, #0
 8017ce6:	f844 1c04 	str.w	r1, [r4, #-4]
 8017cea:	db6c      	blt.n	8017dc6 <ApplyPhaseEvaluation+0x64e>
 8017cec:	9b04      	ldr	r3, [sp, #16]
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	f2c0 8104 	blt.w	8017efc <ApplyPhaseEvaluation+0x784>
 8017cf4:	9b06      	ldr	r3, [sp, #24]
 8017cf6:	fba3 2102 	umull	r2, r1, r3, r2
 8017cfa:	0c13      	lsrs	r3, r2, #16
 8017cfc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8017d00:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8017d04:	4413      	add	r3, r2
 8017d06:	606b      	str	r3, [r5, #4]
 8017d08:	e78d      	b.n	8017c26 <ApplyPhaseEvaluation+0x4ae>
 8017d0a:	f04f 0c02 	mov.w	ip, #2
 8017d0e:	e652      	b.n	80179b6 <ApplyPhaseEvaluation+0x23e>
 8017d10:	f04f 0c02 	mov.w	ip, #2
 8017d14:	e635      	b.n	8017982 <ApplyPhaseEvaluation+0x20a>
 8017d16:	f04f 0c02 	mov.w	ip, #2
 8017d1a:	e617      	b.n	801794c <ApplyPhaseEvaluation+0x1d4>
 8017d1c:	f04f 0c02 	mov.w	ip, #2
 8017d20:	e5f8      	b.n	8017914 <ApplyPhaseEvaluation+0x19c>
 8017d22:	2907      	cmp	r1, #7
 8017d24:	f000 828d 	beq.w	8018242 <ApplyPhaseEvaluation+0xaca>
 8017d28:	1c4f      	adds	r7, r1, #1
 8017d2a:	017b      	lsls	r3, r7, #5
 8017d2c:	aa52      	add	r2, sp, #328	@ 0x148
 8017d2e:	f020 0e03 	bic.w	lr, r0, #3
 8017d32:	58d3      	ldr	r3, [r2, r3]
 8017d34:	eb02 1247 	add.w	r2, r2, r7, lsl #5
 8017d38:	00bf      	lsls	r7, r7, #2
 8017d3a:	6852      	ldr	r2, [r2, #4]
 8017d3c:	9708      	str	r7, [sp, #32]
 8017d3e:	9f08      	ldr	r7, [sp, #32]
 8017d40:	f106 0c01 	add.w	ip, r6, #1
 8017d44:	ea47 070c 	orr.w	r7, r7, ip
 8017d48:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 8017d4c:	9708      	str	r7, [sp, #32]
 8017d4e:	eb08 07c7 	add.w	r7, r8, r7, lsl #3
 8017d52:	970b      	str	r7, [sp, #44]	@ 0x2c
 8017d54:	9f08      	ldr	r7, [sp, #32]
 8017d56:	f858 7037 	ldr.w	r7, [r8, r7, lsl #3]
 8017d5a:	443b      	add	r3, r7
 8017d5c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8017d5e:	687f      	ldr	r7, [r7, #4]
 8017d60:	443a      	add	r2, r7
 8017d62:	ea4e 0c0c 	orr.w	ip, lr, ip
 8017d66:	af52      	add	r7, sp, #328	@ 0x148
 8017d68:	eb07 07cc 	add.w	r7, r7, ip, lsl #3
 8017d6c:	f50d 7ea4 	add.w	lr, sp, #328	@ 0x148
 8017d70:	687f      	ldr	r7, [r7, #4]
 8017d72:	f85e c03c 	ldr.w	ip, [lr, ip, lsl #3]
 8017d76:	443a      	add	r2, r7
 8017d78:	4463      	add	r3, ip
 8017d7a:	f844 3c04 	str.w	r3, [r4, #-4]
 8017d7e:	606a      	str	r2, [r5, #4]
 8017d80:	2900      	cmp	r1, #0
 8017d82:	d0a1      	beq.n	8017cc8 <ApplyPhaseEvaluation+0x550>
 8017d84:	3901      	subs	r1, #1
 8017d86:	ea46 0681 	orr.w	r6, r6, r1, lsl #2
 8017d8a:	af52      	add	r7, sp, #328	@ 0x148
 8017d8c:	a952      	add	r1, sp, #328	@ 0x148
 8017d8e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8017d92:	f857 6036 	ldr.w	r6, [r7, r6, lsl #3]
 8017d96:	6849      	ldr	r1, [r1, #4]
 8017d98:	4433      	add	r3, r6
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	440a      	add	r2, r1
 8017d9e:	da95      	bge.n	8017ccc <ApplyPhaseEvaluation+0x554>
 8017da0:	9903      	ldr	r1, [sp, #12]
 8017da2:	2900      	cmp	r1, #0
 8017da4:	f1c3 0300 	rsb	r3, r3, #0
 8017da8:	f2c0 81d6 	blt.w	8018158 <ApplyPhaseEvaluation+0x9e0>
 8017dac:	fba9 3603 	umull	r3, r6, r9, r3
 8017db0:	0c19      	lsrs	r1, r3, #16
 8017db2:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 8017db6:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8017dba:	4419      	add	r1, r3
 8017dbc:	4249      	negs	r1, r1
 8017dbe:	2a00      	cmp	r2, #0
 8017dc0:	f844 1c04 	str.w	r1, [r4, #-4]
 8017dc4:	da92      	bge.n	8017cec <ApplyPhaseEvaluation+0x574>
 8017dc6:	9b04      	ldr	r3, [sp, #16]
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	f1c2 0200 	rsb	r2, r2, #0
 8017dce:	f2c0 81b6 	blt.w	801813e <ApplyPhaseEvaluation+0x9c6>
 8017dd2:	9b06      	ldr	r3, [sp, #24]
 8017dd4:	fba2 2103 	umull	r2, r1, r2, r3
 8017dd8:	0c13      	lsrs	r3, r2, #16
 8017dda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8017dde:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8017de2:	4413      	add	r3, r2
 8017de4:	425b      	negs	r3, r3
 8017de6:	e78e      	b.n	8017d06 <ApplyPhaseEvaluation+0x58e>
 8017de8:	2900      	cmp	r1, #0
 8017dea:	d053      	beq.n	8017e94 <ApplyPhaseEvaluation+0x71c>
 8017dec:	b326      	cbz	r6, 8017e38 <ApplyPhaseEvaluation+0x6c0>
 8017dee:	f106 3eff 	add.w	lr, r6, #4294967295
 8017df2:	1e4f      	subs	r7, r1, #1
 8017df4:	ea4e 0387 	orr.w	r3, lr, r7, lsl #2
 8017df8:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 8017dfc:	aa52      	add	r2, sp, #328	@ 0x148
 8017dfe:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8017e02:	f020 0c03 	bic.w	ip, r0, #3
 8017e06:	f858 3033 	ldr.w	r3, [r8, r3, lsl #3]
 8017e0a:	9308      	str	r3, [sp, #32]
 8017e0c:	ea4c 0e0e 	orr.w	lr, ip, lr
 8017e10:	ab52      	add	r3, sp, #328	@ 0x148
 8017e12:	eb08 08ce 	add.w	r8, r8, lr, lsl #3
 8017e16:	f853 e03e 	ldr.w	lr, [r3, lr, lsl #3]
 8017e1a:	9b08      	ldr	r3, [sp, #32]
 8017e1c:	6852      	ldr	r2, [r2, #4]
 8017e1e:	4473      	add	r3, lr
 8017e20:	f8d8 e004 	ldr.w	lr, [r8, #4]
 8017e24:	f844 3c04 	str.w	r3, [r4, #-4]
 8017e28:	4472      	add	r2, lr
 8017e2a:	2907      	cmp	r1, #7
 8017e2c:	606a      	str	r2, [r5, #4]
 8017e2e:	d13f      	bne.n	8017eb0 <ApplyPhaseEvaluation+0x738>
 8017e30:	2e03      	cmp	r6, #3
 8017e32:	d107      	bne.n	8017e44 <ApplyPhaseEvaluation+0x6cc>
 8017e34:	00bf      	lsls	r7, r7, #2
 8017e36:	e022      	b.n	8017e7e <ApplyPhaseEvaluation+0x706>
 8017e38:	2907      	cmp	r1, #7
 8017e3a:	f040 8199 	bne.w	8018170 <ApplyPhaseEvaluation+0x9f8>
 8017e3e:	4633      	mov	r3, r6
 8017e40:	4632      	mov	r2, r6
 8017e42:	2706      	movs	r7, #6
 8017e44:	f106 0e01 	add.w	lr, r6, #1
 8017e48:	f04e 011c 	orr.w	r1, lr, #28
 8017e4c:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 8017e50:	f50d 7ca4 	add.w	ip, sp, #328	@ 0x148
 8017e54:	eb0c 0cc1 	add.w	ip, ip, r1, lsl #3
 8017e58:	f858 1031 	ldr.w	r1, [r8, r1, lsl #3]
 8017e5c:	440b      	add	r3, r1
 8017e5e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8017e62:	440a      	add	r2, r1
 8017e64:	ea4e 0e87 	orr.w	lr, lr, r7, lsl #2
 8017e68:	a952      	add	r1, sp, #328	@ 0x148
 8017e6a:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 8017e6e:	f50d 7ca4 	add.w	ip, sp, #328	@ 0x148
 8017e72:	6849      	ldr	r1, [r1, #4]
 8017e74:	f85c c03e 	ldr.w	ip, [ip, lr, lsl #3]
 8017e78:	00bf      	lsls	r7, r7, #2
 8017e7a:	4463      	add	r3, ip
 8017e7c:	440a      	add	r2, r1
 8017e7e:	4337      	orrs	r7, r6
 8017e80:	a952      	add	r1, sp, #328	@ 0x148
 8017e82:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8017e86:	ae52      	add	r6, sp, #328	@ 0x148
 8017e88:	6849      	ldr	r1, [r1, #4]
 8017e8a:	f856 6037 	ldr.w	r6, [r6, r7, lsl #3]
 8017e8e:	440a      	add	r2, r1
 8017e90:	4433      	add	r3, r6
 8017e92:	e719      	b.n	8017cc8 <ApplyPhaseEvaluation+0x550>
 8017e94:	2e00      	cmp	r6, #0
 8017e96:	d03e      	beq.n	8017f16 <ApplyPhaseEvaluation+0x79e>
 8017e98:	f020 0c03 	bic.w	ip, r0, #3
 8017e9c:	1e73      	subs	r3, r6, #1
 8017e9e:	ea4c 0303 	orr.w	r3, ip, r3
 8017ea2:	aa52      	add	r2, sp, #328	@ 0x148
 8017ea4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8017ea8:	af52      	add	r7, sp, #328	@ 0x148
 8017eaa:	6852      	ldr	r2, [r2, #4]
 8017eac:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
 8017eb0:	1c4f      	adds	r7, r1, #1
 8017eb2:	ea46 0787 	orr.w	r7, r6, r7, lsl #2
 8017eb6:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 8017eba:	f50d 7ea4 	add.w	lr, sp, #328	@ 0x148
 8017ebe:	eb0e 0ec7 	add.w	lr, lr, r7, lsl #3
 8017ec2:	f858 7037 	ldr.w	r7, [r8, r7, lsl #3]
 8017ec6:	443b      	add	r3, r7
 8017ec8:	f8de 7004 	ldr.w	r7, [lr, #4]
 8017ecc:	f844 3c04 	str.w	r3, [r4, #-4]
 8017ed0:	443a      	add	r2, r7
 8017ed2:	2e03      	cmp	r6, #3
 8017ed4:	606a      	str	r2, [r5, #4]
 8017ed6:	d122      	bne.n	8017f1e <ApplyPhaseEvaluation+0x7a6>
 8017ed8:	2900      	cmp	r1, #0
 8017eda:	f43f aef5 	beq.w	8017cc8 <ApplyPhaseEvaluation+0x550>
 8017ede:	1e4f      	subs	r7, r1, #1
 8017ee0:	00bf      	lsls	r7, r7, #2
 8017ee2:	e7cc      	b.n	8017e7e <ApplyPhaseEvaluation+0x706>
 8017ee4:	17d9      	asrs	r1, r3, #31
 8017ee6:	fba3 3609 	umull	r3, r6, r3, r9
 8017eea:	fb09 6601 	mla	r6, r9, r1, r6
 8017eee:	0c19      	lsrs	r1, r3, #16
 8017ef0:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 8017ef4:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8017ef8:	4419      	add	r1, r3
 8017efa:	e75f      	b.n	8017dbc <ApplyPhaseEvaluation+0x644>
 8017efc:	9e06      	ldr	r6, [sp, #24]
 8017efe:	17d3      	asrs	r3, r2, #31
 8017f00:	fba2 2106 	umull	r2, r1, r2, r6
 8017f04:	fb06 1103 	mla	r1, r6, r3, r1
 8017f08:	0c13      	lsrs	r3, r2, #16
 8017f0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8017f0e:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8017f12:	4413      	add	r3, r2
 8017f14:	e766      	b.n	8017de4 <ApplyPhaseEvaluation+0x66c>
 8017f16:	e9dd 325a 	ldrd	r3, r2, [sp, #360]	@ 0x168
 8017f1a:	f020 0c03 	bic.w	ip, r0, #3
 8017f1e:	f106 0e01 	add.w	lr, r6, #1
 8017f22:	ea4c 0c0e 	orr.w	ip, ip, lr
 8017f26:	af52      	add	r7, sp, #328	@ 0x148
 8017f28:	eb07 07cc 	add.w	r7, r7, ip, lsl #3
 8017f2c:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 8017f30:	687f      	ldr	r7, [r7, #4]
 8017f32:	f858 c03c 	ldr.w	ip, [r8, ip, lsl #3]
 8017f36:	443a      	add	r2, r7
 8017f38:	4463      	add	r3, ip
 8017f3a:	f844 3c04 	str.w	r3, [r4, #-4]
 8017f3e:	606a      	str	r2, [r5, #4]
 8017f40:	2900      	cmp	r1, #0
 8017f42:	f43f aec1 	beq.w	8017cc8 <ApplyPhaseEvaluation+0x550>
 8017f46:	1e4f      	subs	r7, r1, #1
 8017f48:	e78c      	b.n	8017e64 <ApplyPhaseEvaluation+0x6ec>
 8017f4a:	f8dd 9034 	ldr.w	r9, [sp, #52]	@ 0x34
 8017f4e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017f50:	9b07      	ldr	r3, [sp, #28]
 8017f52:	f8b3 4204 	ldrh.w	r4, [r3, #516]	@ 0x204
 8017f56:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 8017f5a:	d02c      	beq.n	8017fb6 <ApplyPhaseEvaluation+0x83e>
 8017f5c:	b35c      	cbz	r4, 8017fb6 <ApplyPhaseEvaluation+0x83e>
 8017f5e:	f04f 0800 	mov.w	r8, #0
 8017f62:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8017f64:	ae95      	add	r6, sp, #596	@ 0x254
 8017f66:	46c2      	mov	sl, r8
 8017f68:	e011      	b.n	8017f8e <ApplyPhaseEvaluation+0x816>
 8017f6a:	0bcb      	lsrs	r3, r1, #15
 8017f6c:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
 8017f70:	f3c1 3180 	ubfx	r1, r1, #14, #1
 8017f74:	440b      	add	r3, r1
 8017f76:	6811      	ldr	r1, [r2, #0]
 8017f78:	f842 3c04 	str.w	r3, [r2, #-4]
 8017f7c:	eb0a 0a63 	add.w	sl, sl, r3, asr #1
 8017f80:	eb08 0861 	add.w	r8, r8, r1, asr #1
 8017f84:	3208      	adds	r2, #8
 8017f86:	4296      	cmp	r6, r2
 8017f88:	f100 000c 	add.w	r0, r0, #12
 8017f8c:	d027      	beq.n	8017fde <ApplyPhaseEvaluation+0x866>
 8017f8e:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8017f92:	07dd      	lsls	r5, r3, #31
 8017f94:	d4f6      	bmi.n	8017f84 <ApplyPhaseEvaluation+0x80c>
 8017f96:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8017f9a:	424b      	negs	r3, r1
 8017f9c:	fb83 3c04 	smull	r3, ip, r3, r4
 8017fa0:	0bdd      	lsrs	r5, r3, #15
 8017fa2:	2900      	cmp	r1, #0
 8017fa4:	ea45 454c 	orr.w	r5, r5, ip, lsl #17
 8017fa8:	fb84 1701 	smull	r1, r7, r4, r1
 8017fac:	f343 3380 	sbfx	r3, r3, #14, #1
 8017fb0:	dadb      	bge.n	8017f6a <ApplyPhaseEvaluation+0x7f2>
 8017fb2:	1b5b      	subs	r3, r3, r5
 8017fb4:	e7df      	b.n	8017f76 <ApplyPhaseEvaluation+0x7fe>
 8017fb6:	f04f 0800 	mov.w	r8, #0
 8017fba:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8017fbc:	ac95      	add	r4, sp, #596	@ 0x254
 8017fbe:	46c2      	mov	sl, r8
 8017fc0:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8017fc4:	07de      	lsls	r6, r3, #31
 8017fc6:	f100 000c 	add.w	r0, r0, #12
 8017fca:	d405      	bmi.n	8017fd8 <ApplyPhaseEvaluation+0x860>
 8017fcc:	e952 1301 	ldrd	r1, r3, [r2, #-4]
 8017fd0:	eb0a 0a61 	add.w	sl, sl, r1, asr #1
 8017fd4:	eb08 0863 	add.w	r8, r8, r3, asr #1
 8017fd8:	3208      	adds	r2, #8
 8017fda:	4294      	cmp	r4, r2
 8017fdc:	d1f0      	bne.n	8017fc0 <ApplyPhaseEvaluation+0x848>
 8017fde:	9807      	ldr	r0, [sp, #28]
 8017fe0:	f00b f80c 	bl	8022ffc <Argus_Cal_GetCalibrationPtr>
 8017fe4:	f890 324c 	ldrb.w	r3, [r0, #588]	@ 0x24c
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	f040 81d1 	bne.w	8018390 <ApplyPhaseEvaluation+0xc18>
 8017fee:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8017ff2:	461d      	mov	r5, r3
 8017ff4:	9a05      	ldr	r2, [sp, #20]
 8017ff6:	4e99      	ldr	r6, [pc, #612]	@ (801825c <ApplyPhaseEvaluation+0xae4>)
 8017ff8:	f8d2 3354 	ldr.w	r3, [r2, #852]	@ 0x354
 8017ffc:	f8d2 036c 	ldr.w	r0, [r2, #876]	@ 0x36c
 8018000:	7b5a      	ldrb	r2, [r3, #13]
 8018002:	89db      	ldrh	r3, [r3, #14]
 8018004:	9306      	str	r3, [sp, #24]
 8018006:	4b96      	ldr	r3, [pc, #600]	@ (8018260 <ApplyPhaseEvaluation+0xae8>)
 8018008:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 801800c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801800e:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 8018012:	2a02      	cmp	r2, #2
 8018014:	bf18      	it	ne
 8018016:	461e      	movne	r6, r3
 8018018:	f890 345c 	ldrb.w	r3, [r0, #1116]	@ 0x45c
 801801c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801801e:	9303      	str	r3, [sp, #12]
 8018020:	f8b0 3208 	ldrh.w	r3, [r0, #520]	@ 0x208
 8018024:	9304      	str	r3, [sp, #16]
 8018026:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018028:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 801802c:	0152      	lsls	r2, r2, #5
 801802e:	f503 77d4 	add.w	r7, r3, #424	@ 0x1a8
 8018032:	469a      	mov	sl, r3
 8018034:	4690      	mov	r8, r2
 8018036:	f89b 3008 	ldrb.w	r3, [fp, #8]
 801803a:	07d9      	lsls	r1, r3, #31
 801803c:	d43c      	bmi.n	80180b8 <ApplyPhaseEvaluation+0x940>
 801803e:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 8018042:	42ab      	cmp	r3, r5
 8018044:	d20e      	bcs.n	8018064 <ApplyPhaseEvaluation+0x8ec>
 8018046:	9a06      	ldr	r2, [sp, #24]
 8018048:	429a      	cmp	r2, r3
 801804a:	d80b      	bhi.n	8018064 <ApplyPhaseEvaluation+0x8ec>
 801804c:	f8d9 3000 	ldr.w	r3, [r9]
 8018050:	9a08      	ldr	r2, [sp, #32]
 8018052:	4413      	add	r3, r2
 8018054:	f8c9 3000 	str.w	r3, [r9]
 8018058:	9a07      	ldr	r2, [sp, #28]
 801805a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801805e:	4413      	add	r3, r2
 8018060:	f8c9 3004 	str.w	r3, [r9, #4]
 8018064:	9b03      	ldr	r3, [sp, #12]
 8018066:	4649      	mov	r1, r9
 8018068:	b14b      	cbz	r3, 801807e <ApplyPhaseEvaluation+0x906>
 801806a:	e9d9 3000 	ldrd	r3, r0, [r9]
 801806e:	6822      	ldr	r2, [r4, #0]
 8018070:	4413      	add	r3, r2
 8018072:	f8c9 3000 	str.w	r3, [r9]
 8018076:	6863      	ldr	r3, [r4, #4]
 8018078:	4403      	add	r3, r0
 801807a:	f8c9 3004 	str.w	r3, [r9, #4]
 801807e:	4658      	mov	r0, fp
 8018080:	47b0      	blx	r6
 8018082:	f89b 3008 	ldrb.w	r3, [fp, #8]
 8018086:	079a      	lsls	r2, r3, #30
 8018088:	d505      	bpl.n	8018096 <ApplyPhaseEvaluation+0x91e>
 801808a:	f8da 3018 	ldr.w	r3, [sl, #24]
 801808e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8018092:	f8ca 3018 	str.w	r3, [sl, #24]
 8018096:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 801809a:	9a05      	ldr	r2, [sp, #20]
 801809c:	9904      	ldr	r1, [sp, #16]
 801809e:	f8d2 036c 	ldr.w	r0, [r2, #876]	@ 0x36c
 80180a2:	f3c3 2244 	ubfx	r2, r3, #9, #5
 80180a6:	4442      	add	r2, r8
 80180a8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80180ac:	1a5b      	subs	r3, r3, r1
 80180ae:	f8b2 22a6 	ldrh.w	r2, [r2, #678]	@ 0x2a6
 80180b2:	1a9b      	subs	r3, r3, r2
 80180b4:	f8ab 3004 	strh.w	r3, [fp, #4]
 80180b8:	f10b 0b0c 	add.w	fp, fp, #12
 80180bc:	455f      	cmp	r7, fp
 80180be:	f109 0908 	add.w	r9, r9, #8
 80180c2:	f104 0408 	add.w	r4, r4, #8
 80180c6:	d1b6      	bne.n	8018036 <ApplyPhaseEvaluation+0x8be>
 80180c8:	e9dd 2a0c 	ldrd	r2, sl, [sp, #48]	@ 0x30
 80180cc:	f892 31b0 	ldrb.w	r3, [r2, #432]	@ 0x1b0
 80180d0:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 80180d4:	07db      	lsls	r3, r3, #31
 80180d6:	d421      	bmi.n	801811c <ApplyPhaseEvaluation+0x9a4>
 80180d8:	f8b2 31b2 	ldrh.w	r3, [r2, #434]	@ 0x1b2
 80180dc:	42ab      	cmp	r3, r5
 80180de:	d36d      	bcc.n	80181bc <ApplyPhaseEvaluation+0xa44>
 80180e0:	4638      	mov	r0, r7
 80180e2:	a992      	add	r1, sp, #584	@ 0x248
 80180e4:	47b0      	blx	r6
 80180e6:	9b05      	ldr	r3, [sp, #20]
 80180e8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80180ea:	f8d3 036c 	ldr.w	r0, [r3, #876]	@ 0x36c
 80180ee:	f8b1 31ac 	ldrh.w	r3, [r1, #428]	@ 0x1ac
 80180f2:	f8b0 220a 	ldrh.w	r2, [r0, #522]	@ 0x20a
 80180f6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80180f8:	1a9a      	subs	r2, r3, r2
 80180fa:	f3c3 2344 	ubfx	r3, r3, #9, #5
 80180fe:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8018102:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018106:	f8b3 32a6 	ldrh.w	r3, [r3, #678]	@ 0x2a6
 801810a:	1ad3      	subs	r3, r2, r3
 801810c:	f8a1 31ac 	strh.w	r3, [r1, #428]	@ 0x1ac
 8018110:	f891 31b0 	ldrb.w	r3, [r1, #432]	@ 0x1b0
 8018114:	f043 0304 	orr.w	r3, r3, #4
 8018118:	f881 31b0 	strb.w	r3, [r1, #432]	@ 0x1b0
 801811c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801811e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 8018122:	b143      	cbz	r3, 8018136 <ApplyPhaseEvaluation+0x9be>
 8018124:	f503 7207 	add.w	r2, r3, #540	@ 0x21c
 8018128:	9200      	str	r2, [sp, #0]
 801812a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801812c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801812e:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8018132:	f00c feeb 	bl	8024f0c <Argus_Cal_GetXtalkVectors>
 8018136:	f50d 7d15 	add.w	sp, sp, #596	@ 0x254
 801813a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801813e:	9e06      	ldr	r6, [sp, #24]
 8018140:	17d3      	asrs	r3, r2, #31
 8018142:	fba2 1206 	umull	r1, r2, r2, r6
 8018146:	fb06 2203 	mla	r2, r6, r3, r2
 801814a:	0c0b      	lsrs	r3, r1, #16
 801814c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018150:	f3c1 32c0 	ubfx	r2, r1, #15, #1
 8018154:	4413      	add	r3, r2
 8018156:	e5d6      	b.n	8017d06 <ApplyPhaseEvaluation+0x58e>
 8018158:	17d9      	asrs	r1, r3, #31
 801815a:	fba3 3609 	umull	r3, r6, r3, r9
 801815e:	fb09 6601 	mla	r6, r9, r1, r6
 8018162:	0c19      	lsrs	r1, r3, #16
 8018164:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 8018168:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 801816c:	4419      	add	r1, r3
 801816e:	e5b9      	b.n	8017ce4 <ApplyPhaseEvaluation+0x56c>
 8018170:	1c4a      	adds	r2, r1, #1
 8018172:	af52      	add	r7, sp, #328	@ 0x148
 8018174:	0153      	lsls	r3, r2, #5
 8018176:	eb07 1242 	add.w	r2, r7, r2, lsl #5
 801817a:	58fb      	ldr	r3, [r7, r3]
 801817c:	6852      	ldr	r2, [r2, #4]
 801817e:	f020 0c03 	bic.w	ip, r0, #3
 8018182:	e6cc      	b.n	8017f1e <ApplyPhaseEvaluation+0x7a6>
 8018184:	2400      	movs	r4, #0
 8018186:	1acd      	subs	r5, r1, r3
 8018188:	b149      	cbz	r1, 801819e <ApplyPhaseEvaluation+0xa26>
 801818a:	428b      	cmp	r3, r1
 801818c:	d854      	bhi.n	8018238 <ApplyPhaseEvaluation+0xac0>
 801818e:	4314      	orrs	r4, r2
 8018190:	0852      	lsrs	r2, r2, #1
 8018192:	ea4f 0145 	mov.w	r1, r5, lsl #1
 8018196:	d1f6      	bne.n	8018186 <ApplyPhaseEvaluation+0xa0e>
 8018198:	428b      	cmp	r3, r1
 801819a:	d800      	bhi.n	801819e <ApplyPhaseEvaluation+0xa26>
 801819c:	3401      	adds	r4, #1
 801819e:	2c00      	cmp	r4, #0
 80181a0:	f6ff acc3 	blt.w	8017b2a <ApplyPhaseEvaluation+0x3b2>
 80181a4:	fab4 f384 	clz	r3, r4
 80181a8:	f1c3 021e 	rsb	r2, r3, #30
 80181ac:	40d4      	lsrs	r4, r2
 80181ae:	f1c3 031f 	rsb	r3, r3, #31
 80181b2:	2c03      	cmp	r4, #3
 80181b4:	bf08      	it	eq
 80181b6:	3301      	addeq	r3, #1
 80181b8:	b2da      	uxtb	r2, r3
 80181ba:	e4b7      	b.n	8017b2c <ApplyPhaseEvaluation+0x3b4>
 80181bc:	9a06      	ldr	r2, [sp, #24]
 80181be:	429a      	cmp	r2, r3
 80181c0:	d88e      	bhi.n	80180e0 <ApplyPhaseEvaluation+0x968>
 80181c2:	9b05      	ldr	r3, [sp, #20]
 80181c4:	f1ba 0f00 	cmp.w	sl, #0
 80181c8:	e9d3 10d0 	ldrd	r1, r0, [r3, #832]	@ 0x340
 80181cc:	f2c0 8181 	blt.w	80184d2 <ApplyPhaseEvaluation+0xd5a>
 80181d0:	4653      	mov	r3, sl
 80181d2:	f04f 34ff 	mov.w	r4, #4294967295
 80181d6:	2201      	movs	r2, #1
 80181d8:	2900      	cmp	r1, #0
 80181da:	bfb8      	it	lt
 80181dc:	4249      	neglt	r1, r1
 80181de:	fba3 3101 	umull	r3, r1, r3, r1
 80181e2:	bfb8      	it	lt
 80181e4:	4622      	movlt	r2, r4
 80181e6:	0bdc      	lsrs	r4, r3, #15
 80181e8:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
 80181ec:	f3c3 3180 	ubfx	r1, r3, #14, #1
 80181f0:	2a01      	cmp	r2, #1
 80181f2:	4421      	add	r1, r4
 80181f4:	bf18      	it	ne
 80181f6:	4249      	negne	r1, r1
 80181f8:	f1b8 0f00 	cmp.w	r8, #0
 80181fc:	f2c0 8186 	blt.w	801850c <ApplyPhaseEvaluation+0xd94>
 8018200:	4643      	mov	r3, r8
 8018202:	f04f 34ff 	mov.w	r4, #4294967295
 8018206:	2201      	movs	r2, #1
 8018208:	2800      	cmp	r0, #0
 801820a:	bfbc      	itt	lt
 801820c:	4622      	movlt	r2, r4
 801820e:	4240      	neglt	r0, r0
 8018210:	fba3 3000 	umull	r3, r0, r3, r0
 8018214:	2a01      	cmp	r2, #1
 8018216:	9a92      	ldr	r2, [sp, #584]	@ 0x248
 8018218:	ea4f 34d3 	mov.w	r4, r3, lsr #15
 801821c:	eba2 0201 	sub.w	r2, r2, r1
 8018220:	ea44 4440 	orr.w	r4, r4, r0, lsl #17
 8018224:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8018228:	4423      	add	r3, r4
 801822a:	9292      	str	r2, [sp, #584]	@ 0x248
 801822c:	9a93      	ldr	r2, [sp, #588]	@ 0x24c
 801822e:	bf18      	it	ne
 8018230:	425b      	negne	r3, r3
 8018232:	1ad3      	subs	r3, r2, r3
 8018234:	9393      	str	r3, [sp, #588]	@ 0x24c
 8018236:	e753      	b.n	80180e0 <ApplyPhaseEvaluation+0x968>
 8018238:	0852      	lsrs	r2, r2, #1
 801823a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801823e:	d1a2      	bne.n	8018186 <ApplyPhaseEvaluation+0xa0e>
 8018240:	e7aa      	b.n	8018198 <ApplyPhaseEvaluation+0xa20>
 8018242:	f04f 0c01 	mov.w	ip, #1
 8018246:	f04f 0e1c 	mov.w	lr, #28
 801824a:	4632      	mov	r2, r6
 801824c:	4633      	mov	r3, r6
 801824e:	e588      	b.n	8017d62 <ApplyPhaseEvaluation+0x5ea>
 8018250:	2e03      	cmp	r6, #3
 8018252:	f43f ad97 	beq.w	8017d84 <ApplyPhaseEvaluation+0x60c>
 8018256:	f106 0c01 	add.w	ip, r6, #1
 801825a:	e582      	b.n	8017d62 <ApplyPhaseEvaluation+0x5ea>
 801825c:	0801ac31 	.word	0x0801ac31
 8018260:	0801aac5 	.word	0x0801aac5
 8018264:	5cc9      	ldrb	r1, [r1, r3]
 8018266:	7853      	ldrb	r3, [r2, #1]
 8018268:	021b      	lsls	r3, r3, #8
 801826a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801826e:	7891      	ldrb	r1, [r2, #2]
 8018270:	f413 0f40 	tst.w	r3, #12582912	@ 0xc00000
 8018274:	ea41 0103 	orr.w	r1, r1, r3
 8018278:	eb02 0604 	add.w	r6, r2, r4
 801827c:	f040 80ec 	bne.w	8018458 <ApplyPhaseEvaluation+0xce0>
 8018280:	9b04      	ldr	r3, [sp, #16]
 8018282:	f3c1 0815 	ubfx	r8, r1, #0, #22
 8018286:	4543      	cmp	r3, r8
 8018288:	f200 810f 	bhi.w	80184aa <ApplyPhaseEvaluation+0xd32>
 801828c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801828e:	4543      	cmp	r3, r8
 8018290:	bf34      	ite	cc
 8018292:	f04f 0e02 	movcc.w	lr, #2
 8018296:	f04f 0e00 	movcs.w	lr, #0
 801829a:	6029      	str	r1, [r5, #0]
 801829c:	7873      	ldrb	r3, [r6, #1]
 801829e:	7831      	ldrb	r1, [r6, #0]
 80182a0:	78b0      	ldrb	r0, [r6, #2]
 80182a2:	021b      	lsls	r3, r3, #8
 80182a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80182a8:	f413 0f40 	tst.w	r3, #12582912	@ 0xc00000
 80182ac:	ea40 0c03 	orr.w	ip, r0, r3
 80182b0:	eb06 0104 	add.w	r1, r6, r4
 80182b4:	f040 80de 	bne.w	8018474 <ApplyPhaseEvaluation+0xcfc>
 80182b8:	9804      	ldr	r0, [sp, #16]
 80182ba:	f3cc 0315 	ubfx	r3, ip, #0, #22
 80182be:	4298      	cmp	r0, r3
 80182c0:	f200 80d8 	bhi.w	8018474 <ApplyPhaseEvaluation+0xcfc>
 80182c4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80182c6:	4298      	cmp	r0, r3
 80182c8:	bf38      	it	cc
 80182ca:	f04f 0e02 	movcc.w	lr, #2
 80182ce:	f8c5 c004 	str.w	ip, [r5, #4]
 80182d2:	784b      	ldrb	r3, [r1, #1]
 80182d4:	5d30      	ldrb	r0, [r6, r4]
 80182d6:	021b      	lsls	r3, r3, #8
 80182d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80182dc:	7888      	ldrb	r0, [r1, #2]
 80182de:	f413 0f40 	tst.w	r3, #12582912	@ 0xc00000
 80182e2:	4421      	add	r1, r4
 80182e4:	ea40 0003 	orr.w	r0, r0, r3
 80182e8:	f040 80c7 	bne.w	801847a <ApplyPhaseEvaluation+0xd02>
 80182ec:	9b04      	ldr	r3, [sp, #16]
 80182ee:	f3c0 0c15 	ubfx	ip, r0, #0, #22
 80182f2:	4563      	cmp	r3, ip
 80182f4:	f200 80d6 	bhi.w	80184a4 <ApplyPhaseEvaluation+0xd2c>
 80182f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80182fa:	4563      	cmp	r3, ip
 80182fc:	bf38      	it	cc
 80182fe:	f04f 0e02 	movcc.w	lr, #2
 8018302:	60a8      	str	r0, [r5, #8]
 8018304:	f816 3014 	ldrb.w	r3, [r6, r4, lsl #1]
 8018308:	7848      	ldrb	r0, [r1, #1]
 801830a:	7889      	ldrb	r1, [r1, #2]
 801830c:	041b      	lsls	r3, r3, #16
 801830e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8018312:	f413 0f40 	tst.w	r3, #12582912	@ 0xc00000
 8018316:	ea41 0103 	orr.w	r1, r1, r3
 801831a:	f040 80a8 	bne.w	801846e <ApplyPhaseEvaluation+0xcf6>
 801831e:	9804      	ldr	r0, [sp, #16]
 8018320:	f3c1 0315 	ubfx	r3, r1, #0, #22
 8018324:	4298      	cmp	r0, r3
 8018326:	f200 80a2 	bhi.w	801846e <ApplyPhaseEvaluation+0xcf6>
 801832a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801832c:	4298      	cmp	r0, r3
 801832e:	bf38      	it	cc
 8018330:	f04f 0e02 	movcc.w	lr, #2
 8018334:	9e08      	ldr	r6, [sp, #32]
 8018336:	60e9      	str	r1, [r5, #12]
 8018338:	ebac 0c08 	sub.w	ip, ip, r8
 801833c:	fb06 f10c 	mul.w	r1, r6, ip
 8018340:	9192      	str	r1, [sp, #584]	@ 0x248
 8018342:	68eb      	ldr	r3, [r5, #12]
 8018344:	6868      	ldr	r0, [r5, #4]
 8018346:	f3c3 0c15 	ubfx	ip, r3, #0, #22
 801834a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801834c:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8018350:	f883 e1b0 	strb.w	lr, [r3, #432]	@ 0x1b0
 8018354:	ebac 0300 	sub.w	r3, ip, r0
 8018358:	9806      	ldr	r0, [sp, #24]
 801835a:	3203      	adds	r2, #3
 801835c:	fb06 f303 	mul.w	r3, r6, r3
 8018360:	b100      	cbz	r0, 8018364 <ApplyPhaseEvaluation+0xbec>
 8018362:	3510      	adds	r5, #16
 8018364:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018366:	1189      	asrs	r1, r1, #6
 8018368:	fb00 f101 	mul.w	r1, r0, r1
 801836c:	119b      	asrs	r3, r3, #6
 801836e:	fb00 f303 	mul.w	r3, r0, r3
 8018372:	2900      	cmp	r1, #0
 8018374:	9192      	str	r1, [sp, #584]	@ 0x248
 8018376:	bfb8      	it	lt
 8018378:	4249      	neglt	r1, r1
 801837a:	2b00      	cmp	r3, #0
 801837c:	9393      	str	r3, [sp, #588]	@ 0x24c
 801837e:	bfb8      	it	lt
 8018380:	425b      	neglt	r3, r3
 8018382:	440b      	add	r3, r1
 8018384:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018386:	0b5b      	lsrs	r3, r3, #13
 8018388:	f8a1 31b2 	strh.w	r3, [r1, #434]	@ 0x1b2
 801838c:	f7ff bb70 	b.w	8017a70 <ApplyPhaseEvaluation+0x2f8>
 8018390:	9b05      	ldr	r3, [sp, #20]
 8018392:	f8b0 724e 	ldrh.w	r7, [r0, #590]	@ 0x24e
 8018396:	f890 c24d 	ldrb.w	ip, [r0, #589]	@ 0x24d
 801839a:	f1ba 0f00 	cmp.w	sl, #0
 801839e:	e9d3 62cd 	ldrd	r6, r2, [r3, #820]	@ 0x334
 80183a2:	ea4f 3747 	mov.w	r7, r7, lsl #13
 80183a6:	f8d3 333c 	ldr.w	r3, [r3, #828]	@ 0x33c
 80183aa:	db5a      	blt.n	8018462 <ApplyPhaseEvaluation+0xcea>
 80183ac:	4650      	mov	r0, sl
 80183ae:	f04f 34ff 	mov.w	r4, #4294967295
 80183b2:	2101      	movs	r1, #1
 80183b4:	2a00      	cmp	r2, #0
 80183b6:	bfb8      	it	lt
 80183b8:	4252      	neglt	r2, r2
 80183ba:	fba0 2002 	umull	r2, r0, r0, r2
 80183be:	bfb8      	it	lt
 80183c0:	4621      	movlt	r1, r4
 80183c2:	0bd4      	lsrs	r4, r2, #15
 80183c4:	ea44 4440 	orr.w	r4, r4, r0, lsl #17
 80183c8:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80183cc:	2901      	cmp	r1, #1
 80183ce:	4422      	add	r2, r4
 80183d0:	d060      	beq.n	8018494 <ApplyPhaseEvaluation+0xd1c>
 80183d2:	9208      	str	r2, [sp, #32]
 80183d4:	4250      	negs	r0, r2
 80183d6:	f1b8 0f00 	cmp.w	r8, #0
 80183da:	db55      	blt.n	8018488 <ApplyPhaseEvaluation+0xd10>
 80183dc:	4641      	mov	r1, r8
 80183de:	f04f 35ff 	mov.w	r5, #4294967295
 80183e2:	2401      	movs	r4, #1
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	bfb8      	it	lt
 80183e8:	425b      	neglt	r3, r3
 80183ea:	fba1 3103 	umull	r3, r1, r1, r3
 80183ee:	bfb8      	it	lt
 80183f0:	462c      	movlt	r4, r5
 80183f2:	0bdd      	lsrs	r5, r3, #15
 80183f4:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
 80183f8:	f3c3 3380 	ubfx	r3, r3, #14, #1
 80183fc:	2c01      	cmp	r4, #1
 80183fe:	442b      	add	r3, r5
 8018400:	d04c      	beq.n	801849c <ApplyPhaseEvaluation+0xd24>
 8018402:	9307      	str	r3, [sp, #28]
 8018404:	4259      	negs	r1, r3
 8018406:	2800      	cmp	r0, #0
 8018408:	bfc8      	it	gt
 801840a:	4602      	movgt	r2, r0
 801840c:	2900      	cmp	r1, #0
 801840e:	bfc8      	it	gt
 8018410:	460b      	movgt	r3, r1
 8018412:	4413      	add	r3, r2
 8018414:	429f      	cmp	r7, r3
 8018416:	d235      	bcs.n	8018484 <ApplyPhaseEvaluation+0xd0c>
 8018418:	ea8a 73ea 	eor.w	r3, sl, sl, asr #31
 801841c:	ea88 72e8 	eor.w	r2, r8, r8, asr #31
 8018420:	eba3 73ea 	sub.w	r3, r3, sl, asr #31
 8018424:	eba2 72e8 	sub.w	r2, r2, r8, asr #31
 8018428:	18d2      	adds	r2, r2, r3
 801842a:	d441      	bmi.n	80184b0 <ApplyPhaseEvaluation+0xd38>
 801842c:	2e00      	cmp	r6, #0
 801842e:	db60      	blt.n	80184f2 <ApplyPhaseEvaluation+0xd7a>
 8018430:	fba6 6202 	umull	r6, r2, r6, r2
 8018434:	0bf3      	lsrs	r3, r6, #15
 8018436:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 801843a:	f3c6 3580 	ubfx	r5, r6, #14, #1
 801843e:	441d      	add	r5, r3
 8018440:	122d      	asrs	r5, r5, #8
 8018442:	fb0c f505 	mul.w	r5, ip, r5
 8018446:	f3c5 354f 	ubfx	r5, r5, #13, #16
 801844a:	e5d3      	b.n	8017ff4 <ApplyPhaseEvaluation+0x87c>
 801844c:	ab12      	add	r3, sp, #72	@ 0x48
 801844e:	930e      	str	r3, [sp, #56]	@ 0x38
 8018450:	461d      	mov	r5, r3
 8018452:	4620      	mov	r0, r4
 8018454:	f7ff b9c4 	b.w	80177e0 <ApplyPhaseEvaluation+0x68>
 8018458:	f04f 0e02 	mov.w	lr, #2
 801845c:	f3c1 0815 	ubfx	r8, r1, #0, #22
 8018460:	e71b      	b.n	801829a <ApplyPhaseEvaluation+0xb22>
 8018462:	f1ca 0000 	rsb	r0, sl, #0
 8018466:	2401      	movs	r4, #1
 8018468:	f04f 31ff 	mov.w	r1, #4294967295
 801846c:	e7a2      	b.n	80183b4 <ApplyPhaseEvaluation+0xc3c>
 801846e:	f04f 0e02 	mov.w	lr, #2
 8018472:	e75f      	b.n	8018334 <ApplyPhaseEvaluation+0xbbc>
 8018474:	f04f 0e02 	mov.w	lr, #2
 8018478:	e729      	b.n	80182ce <ApplyPhaseEvaluation+0xb56>
 801847a:	f04f 0e02 	mov.w	lr, #2
 801847e:	f3c0 0c15 	ubfx	ip, r0, #0, #22
 8018482:	e73e      	b.n	8018302 <ApplyPhaseEvaluation+0xb8a>
 8018484:	2500      	movs	r5, #0
 8018486:	e5b5      	b.n	8017ff4 <ApplyPhaseEvaluation+0x87c>
 8018488:	f1c8 0100 	rsb	r1, r8, #0
 801848c:	2501      	movs	r5, #1
 801848e:	f04f 34ff 	mov.w	r4, #4294967295
 8018492:	e7a7      	b.n	80183e4 <ApplyPhaseEvaluation+0xc6c>
 8018494:	4610      	mov	r0, r2
 8018496:	4252      	negs	r2, r2
 8018498:	9208      	str	r2, [sp, #32]
 801849a:	e79c      	b.n	80183d6 <ApplyPhaseEvaluation+0xc5e>
 801849c:	4619      	mov	r1, r3
 801849e:	425b      	negs	r3, r3
 80184a0:	9307      	str	r3, [sp, #28]
 80184a2:	e7b0      	b.n	8018406 <ApplyPhaseEvaluation+0xc8e>
 80184a4:	f04f 0e02 	mov.w	lr, #2
 80184a8:	e72b      	b.n	8018302 <ApplyPhaseEvaluation+0xb8a>
 80184aa:	f04f 0e02 	mov.w	lr, #2
 80184ae:	e6f4      	b.n	801829a <ApplyPhaseEvaluation+0xb22>
 80184b0:	2e00      	cmp	r6, #0
 80184b2:	f1c2 0200 	rsb	r2, r2, #0
 80184b6:	db12      	blt.n	80184de <ApplyPhaseEvaluation+0xd66>
 80184b8:	17d1      	asrs	r1, r2, #31
 80184ba:	fba6 3202 	umull	r3, r2, r6, r2
 80184be:	fb06 2201 	mla	r2, r6, r1, r2
 80184c2:	0bd9      	lsrs	r1, r3, #15
 80184c4:	ea41 4142 	orr.w	r1, r1, r2, lsl #17
 80184c8:	f3c3 3580 	ubfx	r5, r3, #14, #1
 80184cc:	440d      	add	r5, r1
 80184ce:	426d      	negs	r5, r5
 80184d0:	e7b6      	b.n	8018440 <ApplyPhaseEvaluation+0xcc8>
 80184d2:	f1ca 0300 	rsb	r3, sl, #0
 80184d6:	2401      	movs	r4, #1
 80184d8:	f04f 32ff 	mov.w	r2, #4294967295
 80184dc:	e67c      	b.n	80181d8 <ApplyPhaseEvaluation+0xa60>
 80184de:	4273      	negs	r3, r6
 80184e0:	fb83 3202 	smull	r3, r2, r3, r2
 80184e4:	0bd9      	lsrs	r1, r3, #15
 80184e6:	ea41 4142 	orr.w	r1, r1, r2, lsl #17
 80184ea:	f3c3 3580 	ubfx	r5, r3, #14, #1
 80184ee:	440d      	add	r5, r1
 80184f0:	e7a6      	b.n	8018440 <ApplyPhaseEvaluation+0xcc8>
 80184f2:	4273      	negs	r3, r6
 80184f4:	17d8      	asrs	r0, r3, #31
 80184f6:	fba3 3102 	umull	r3, r1, r3, r2
 80184fa:	fb02 1100 	mla	r1, r2, r0, r1
 80184fe:	0bda      	lsrs	r2, r3, #15
 8018500:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8018504:	f3c3 3580 	ubfx	r5, r3, #14, #1
 8018508:	4415      	add	r5, r2
 801850a:	e7e0      	b.n	80184ce <ApplyPhaseEvaluation+0xd56>
 801850c:	f1c8 0300 	rsb	r3, r8, #0
 8018510:	2401      	movs	r4, #1
 8018512:	f04f 32ff 	mov.w	r2, #4294967295
 8018516:	e677      	b.n	8018208 <ApplyPhaseEvaluation+0xa90>

08018518 <Argus_Eval_Init>:
 8018518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801851a:	4604      	mov	r4, r0
 801851c:	461d      	mov	r5, r3
 801851e:	460e      	mov	r6, r1
 8018520:	4617      	mov	r7, r2
 8018522:	2100      	movs	r1, #0
 8018524:	f44f 725c 	mov.w	r2, #880	@ 0x370
 8018528:	f011 f913 	bl	8029752 <memset>
 801852c:	9906      	ldr	r1, [sp, #24]
 801852e:	f8c4 5354 	str.w	r5, [r4, #852]	@ 0x354
 8018532:	f504 7056 	add.w	r0, r4, #856	@ 0x358
 8018536:	e9c4 67da 	strd	r6, r7, [r4, #872]	@ 0x368
 801853a:	f001 fc25 	bl	8019d88 <Argus_Pba_Init>
 801853e:	4620      	mov	r0, r4
 8018540:	f504 71c6 	add.w	r1, r4, #396	@ 0x18c
 8018544:	7a02      	ldrb	r2, [r0, #8]
 8018546:	f890 319c 	ldrb.w	r3, [r0, #412]	@ 0x19c
 801854a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 801854e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8018552:	7202      	strb	r2, [r0, #8]
 8018554:	f880 319c 	strb.w	r3, [r0, #412]	@ 0x19c
 8018558:	300c      	adds	r0, #12
 801855a:	4288      	cmp	r0, r1
 801855c:	d1f2      	bne.n	8018544 <Argus_Eval_Init+0x2c>
 801855e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018560 <Argus_Eval_Update>:
 8018560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018564:	f891 30ac 	ldrb.w	r3, [r1, #172]	@ 0xac
 8018568:	f992 4297 	ldrsb.w	r4, [r2, #663]	@ 0x297
 801856c:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8018570:	460f      	mov	r7, r1
 8018572:	4690      	mov	r8, r2
 8018574:	4606      	mov	r6, r0
 8018576:	2b00      	cmp	r3, #0
 8018578:	f000 81dd 	beq.w	8018936 <Argus_Eval_Update+0x3d6>
 801857c:	3b01      	subs	r3, #1
 801857e:	b2db      	uxtb	r3, r3
 8018580:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8018584:	2c00      	cmp	r4, #0
 8018586:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801858a:	eb0c 0053 	add.w	r0, ip, r3, lsr #1
 801858e:	ebac 0c53 	sub.w	ip, ip, r3, lsr #1
 8018592:	f2c0 81d4 	blt.w	801893e <Argus_Eval_Update+0x3de>
 8018596:	f1bc 0f00 	cmp.w	ip, #0
 801859a:	4621      	mov	r1, r4
 801859c:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80185a0:	f2c0 81df 	blt.w	8018962 <Argus_Eval_Update+0x402>
 80185a4:	fbac 3204 	umull	r3, r2, ip, r4
 80185a8:	fb0c 2205 	mla	r2, ip, r5, r2
 80185ac:	ea4f 2e93 	mov.w	lr, r3, lsr #10
 80185b0:	ea4e 5e82 	orr.w	lr, lr, r2, lsl #22
 80185b4:	f3c3 2240 	ubfx	r2, r3, #9, #1
 80185b8:	4472      	add	r2, lr
 80185ba:	2800      	cmp	r0, #0
 80185bc:	4462      	add	r2, ip
 80185be:	f2c0 81df 	blt.w	8018980 <Argus_Eval_Update+0x420>
 80185c2:	2c00      	cmp	r4, #0
 80185c4:	f2c0 83e1 	blt.w	8018d8a <Argus_Eval_Update+0x82a>
 80185c8:	fba0 3101 	umull	r3, r1, r0, r1
 80185cc:	0a9c      	lsrs	r4, r3, #10
 80185ce:	fb00 1505 	mla	r5, r0, r5, r1
 80185d2:	ea44 5485 	orr.w	r4, r4, r5, lsl #22
 80185d6:	f3c3 2340 	ubfx	r3, r3, #9, #1
 80185da:	4423      	add	r3, r4
 80185dc:	f897 e07b 	ldrb.w	lr, [r7, #123]	@ 0x7b
 80185e0:	ea4f 1e9e 	mov.w	lr, lr, lsr #6
 80185e4:	4418      	add	r0, r3
 80185e6:	f1ce 0e04 	rsb	lr, lr, #4
 80185ea:	7bbb      	ldrb	r3, [r7, #14]
 80185ec:	fa02 f20e 	lsl.w	r2, r2, lr
 80185f0:	4692      	mov	sl, r2
 80185f2:	041d      	lsls	r5, r3, #16
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	f000 81d8 	beq.w	80189aa <Argus_Eval_Update+0x44a>
 80185fa:	2a00      	cmp	r2, #0
 80185fc:	bfb8      	it	lt
 80185fe:	4252      	neglt	r2, r2
 8018600:	4295      	cmp	r5, r2
 8018602:	4629      	mov	r1, r5
 8018604:	f080 84a5 	bcs.w	8018f52 <Argus_Eval_Update+0x9f2>
 8018608:	462b      	mov	r3, r5
 801860a:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 801860e:	4699      	mov	r9, r3
 8018610:	005b      	lsls	r3, r3, #1
 8018612:	4293      	cmp	r3, r2
 8018614:	46a4      	mov	ip, r4
 8018616:	ea4f 0444 	mov.w	r4, r4, lsl #1
 801861a:	d3f8      	bcc.n	801860e <Argus_Eval_Update+0xae>
 801861c:	2c00      	cmp	r4, #0
 801861e:	f040 838d 	bne.w	8018d3c <Argus_Eval_Update+0x7dc>
 8018622:	ea9a 0f05 	teq	sl, r5
 8018626:	f100 84cf 	bmi.w	8018fc8 <Argus_Eval_Update+0xa68>
 801862a:	f06f 0401 	mvn.w	r4, #1
 801862e:	46a4      	mov	ip, r4
 8018630:	fa00 f20e 	lsl.w	r2, r0, lr
 8018634:	2a00      	cmp	r2, #0
 8018636:	4691      	mov	r9, r2
 8018638:	bfb8      	it	lt
 801863a:	4252      	neglt	r2, r2
 801863c:	4295      	cmp	r5, r2
 801863e:	bf38      	it	cc
 8018640:	f44f 3380 	movcc.w	r3, #65536	@ 0x10000
 8018644:	f080 8451 	bcs.w	8018eea <Argus_Eval_Update+0x98a>
 8018648:	468e      	mov	lr, r1
 801864a:	0049      	lsls	r1, r1, #1
 801864c:	4291      	cmp	r1, r2
 801864e:	4618      	mov	r0, r3
 8018650:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018654:	d3f8      	bcc.n	8018648 <Argus_Eval_Update+0xe8>
 8018656:	2b00      	cmp	r3, #0
 8018658:	f040 834a 	bne.w	8018cf0 <Argus_Eval_Update+0x790>
 801865c:	ea95 0f09 	teq	r5, r9
 8018660:	f100 8498 	bmi.w	8018f94 <Argus_Eval_Update+0xa34>
 8018664:	f1bc 0f00 	cmp.w	ip, #0
 8018668:	f000 83ff 	beq.w	8018e6a <Argus_Eval_Update+0x90a>
 801866c:	f06f 0501 	mvn.w	r5, #1
 8018670:	4629      	mov	r1, r5
 8018672:	f1bc 0f00 	cmp.w	ip, #0
 8018676:	f2c0 8471 	blt.w	8018f5c <Argus_Eval_Update+0x9fc>
 801867a:	4bd3      	ldr	r3, [pc, #844]	@ (80189c8 <Argus_Eval_Update+0x468>)
 801867c:	429c      	cmp	r4, r3
 801867e:	f200 847d 	bhi.w	8018f7c <Argus_Eval_Update+0xa1c>
 8018682:	48d1      	ldr	r0, [pc, #836]	@ (80189c8 <Argus_Eval_Update+0x468>)
 8018684:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8018688:	46a6      	mov	lr, r4
 801868a:	0064      	lsls	r4, r4, #1
 801868c:	4284      	cmp	r4, r0
 801868e:	461a      	mov	r2, r3
 8018690:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018694:	d9f8      	bls.n	8018688 <Argus_Eval_Update+0x128>
 8018696:	2b00      	cmp	r3, #0
 8018698:	f040 8308 	bne.w	8018cac <Argus_Eval_Update+0x74c>
 801869c:	f1bc 0f00 	cmp.w	ip, #0
 80186a0:	f2c0 849e 	blt.w	8018fe0 <Argus_Eval_Update+0xa80>
 80186a4:	f06f 0307 	mvn.w	r3, #7
 80186a8:	f8c6 3328 	str.w	r3, [r6, #808]	@ 0x328
 80186ac:	2d00      	cmp	r5, #0
 80186ae:	f000 837e 	beq.w	8018dae <Argus_Eval_Update+0x84e>
 80186b2:	f06f 0307 	mvn.w	r3, #7
 80186b6:	2d00      	cmp	r5, #0
 80186b8:	f2c0 83f0 	blt.w	8018e9c <Argus_Eval_Update+0x93c>
 80186bc:	4ac2      	ldr	r2, [pc, #776]	@ (80189c8 <Argus_Eval_Update+0x468>)
 80186be:	f8df e30c 	ldr.w	lr, [pc, #780]	@ 80189cc <Argus_Eval_Update+0x46c>
 80186c2:	4291      	cmp	r1, r2
 80186c4:	ea85 0e0e 	eor.w	lr, r5, lr
 80186c8:	f200 845b 	bhi.w	8018f82 <Argus_Eval_Update+0xa22>
 80186cc:	48be      	ldr	r0, [pc, #760]	@ (80189c8 <Argus_Eval_Update+0x468>)
 80186ce:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 80186d2:	460a      	mov	r2, r1
 80186d4:	ebb0 0f42 	cmp.w	r0, r2, lsl #1
 80186d8:	46a4      	mov	ip, r4
 80186da:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80186de:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80186e2:	d2f6      	bcs.n	80186d2 <Argus_Eval_Update+0x172>
 80186e4:	2c00      	cmp	r4, #0
 80186e6:	f040 826b 	bne.w	8018bc0 <Argus_Eval_Update+0x660>
 80186ea:	f1be 0f00 	cmp.w	lr, #0
 80186ee:	f2c0 846e 	blt.w	8018fce <Argus_Eval_Update+0xa6e>
 80186f2:	f06f 0207 	mvn.w	r2, #7
 80186f6:	f9b8 52a8 	ldrsh.w	r5, [r8, #680]	@ 0x2a8
 80186fa:	f8c6 232c 	str.w	r2, [r6, #812]	@ 0x32c
 80186fe:	4293      	cmp	r3, r2
 8018700:	ea4f 1585 	mov.w	r5, r5, lsl #6
 8018704:	d049      	beq.n	801879a <Argus_Eval_Update+0x23a>
 8018706:	f8df c2c8 	ldr.w	ip, [pc, #712]	@ 80189d0 <Argus_Eval_Update+0x470>
 801870a:	2408      	movs	r4, #8
 801870c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8018710:	0064      	lsls	r4, r4, #1
 8018712:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 8018716:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801871a:	d3f9      	bcc.n	8018710 <Argus_Eval_Update+0x1b0>
 801871c:	2a00      	cmp	r2, #0
 801871e:	f040 8282 	bne.w	8018c26 <Argus_Eval_Update+0x6c6>
 8018722:	f1bc 0f00 	cmp.w	ip, #0
 8018726:	f2c0 8474 	blt.w	8019012 <Argus_Eval_Update+0xab2>
 801872a:	469c      	mov	ip, r3
 801872c:	b39b      	cbz	r3, 8018796 <Argus_Eval_Update+0x236>
 801872e:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8018732:	2b00      	cmp	r3, #0
 8018734:	f2c0 8295 	blt.w	8018c62 <Argus_Eval_Update+0x702>
 8018738:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801873c:	f080 8432 	bcs.w	8018fa4 <Argus_Eval_Update+0xa44>
 8018740:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8018744:	005b      	lsls	r3, r3, #1
 8018746:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801874a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801874e:	d3f9      	bcc.n	8018744 <Argus_Eval_Update+0x1e4>
 8018750:	2a00      	cmp	r2, #0
 8018752:	f040 8292 	bne.w	8018c7a <Argus_Eval_Update+0x71a>
 8018756:	f1bc 0f00 	cmp.w	ip, #0
 801875a:	f2c0 8454 	blt.w	8019006 <Argus_Eval_Update+0xaa6>
 801875e:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8018762:	1b00      	subs	r0, r0, r4
 8018764:	2800      	cmp	r0, #0
 8018766:	d016      	beq.n	8018796 <Argus_Eval_Update+0x236>
 8018768:	f2c0 8377 	blt.w	8018e5a <Argus_Eval_Update+0x8fa>
 801876c:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 8018770:	4602      	mov	r2, r0
 8018772:	f080 5480 	eor.w	r4, r0, #268435456	@ 0x10000000
 8018776:	f280 8325 	bge.w	8018dc4 <Argus_Eval_Update+0x864>
 801877a:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 801877e:	0052      	lsls	r2, r2, #1
 8018780:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 8018784:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8018788:	d3f9      	bcc.n	801877e <Argus_Eval_Update+0x21e>
 801878a:	2900      	cmp	r1, #0
 801878c:	f040 831c 	bne.w	8018dc8 <Argus_Eval_Update+0x868>
 8018790:	2c00      	cmp	r4, #0
 8018792:	f2c0 8433 	blt.w	8018ffc <Argus_Eval_Update+0xa9c>
 8018796:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801879a:	4618      	mov	r0, r3
 801879c:	ea85 71e5 	eor.w	r1, r5, r5, asr #31
 80187a0:	2800      	cmp	r0, #0
 80187a2:	eba1 71e5 	sub.w	r1, r1, r5, asr #31
 80187a6:	f2c0 81e7 	blt.w	8018b78 <Argus_Eval_Update+0x618>
 80187aa:	428b      	cmp	r3, r1
 80187ac:	bf28      	it	cs
 80187ae:	f44f 3280 	movcs.w	r2, #65536	@ 0x10000
 80187b2:	f080 8134 	bcs.w	8018a1e <Argus_Eval_Update+0x4be>
 80187b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80187ba:	005b      	lsls	r3, r3, #1
 80187bc:	428b      	cmp	r3, r1
 80187be:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80187c2:	d3fa      	bcc.n	80187ba <Argus_Eval_Update+0x25a>
 80187c4:	2a00      	cmp	r2, #0
 80187c6:	f040 812a 	bne.w	8018a1e <Argus_Eval_Update+0x4be>
 80187ca:	ea85 0100 	eor.w	r1, r5, r0
 80187ce:	43c9      	mvns	r1, r1
 80187d0:	0fc9      	lsrs	r1, r1, #31
 80187d2:	4249      	negs	r1, r1
 80187d4:	b289      	uxth	r1, r1
 80187d6:	f8a6 1350 	strh.w	r1, [r6, #848]	@ 0x350
 80187da:	4638      	mov	r0, r7
 80187dc:	f007 fd74 	bl	80202c8 <Argus_Dev_GetPixelCount>
 80187e0:	f9b8 c250 	ldrsh.w	ip, [r8, #592]	@ 0x250
 80187e4:	0402      	lsls	r2, r0, #16
 80187e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80187ea:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80187ee:	fbb3 f0f0 	udiv	r0, r3, r0
 80187f2:	4614      	mov	r4, r2
 80187f4:	f8c6 0334 	str.w	r0, [r6, #820]	@ 0x334
 80187f8:	2a00      	cmp	r2, #0
 80187fa:	f000 80eb 	beq.w	80189d4 <Argus_Eval_Update+0x474>
 80187fe:	ea8c 70ec 	eor.w	r0, ip, ip, asr #31
 8018802:	2a00      	cmp	r2, #0
 8018804:	eba0 70ec 	sub.w	r0, r0, ip, asr #31
 8018808:	f2c0 81a7 	blt.w	8018b5a <Argus_Eval_Update+0x5fa>
 801880c:	4282      	cmp	r2, r0
 801880e:	4611      	mov	r1, r2
 8018810:	f080 813c 	bcs.w	8018a8c <Argus_Eval_Update+0x52c>
 8018814:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8018818:	0049      	lsls	r1, r1, #1
 801881a:	4281      	cmp	r1, r0
 801881c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018820:	d3fa      	bcc.n	8018818 <Argus_Eval_Update+0x2b8>
 8018822:	2b00      	cmp	r3, #0
 8018824:	f040 8132 	bne.w	8018a8c <Argus_Eval_Update+0x52c>
 8018828:	ea9c 0f02 	teq	ip, r2
 801882c:	bf4c      	ite	mi
 801882e:	f04f 4500 	movmi.w	r5, #2147483648	@ 0x80000000
 8018832:	f06f 4500 	mvnpl.w	r5, #2147483648	@ 0x80000000
 8018836:	f9b8 c252 	ldrsh.w	ip, [r8, #594]	@ 0x252
 801883a:	f8c6 5338 	str.w	r5, [r6, #824]	@ 0x338
 801883e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8018842:	ea8c 70ec 	eor.w	r0, ip, ip, asr #31
 8018846:	2a00      	cmp	r2, #0
 8018848:	eba0 70ec 	sub.w	r0, r0, ip, asr #31
 801884c:	f2c0 8176 	blt.w	8018b3c <Argus_Eval_Update+0x5dc>
 8018850:	4282      	cmp	r2, r0
 8018852:	4611      	mov	r1, r2
 8018854:	bf28      	it	cs
 8018856:	f44f 3380 	movcs.w	r3, #65536	@ 0x10000
 801885a:	f080 80fe 	bcs.w	8018a5a <Argus_Eval_Update+0x4fa>
 801885e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8018862:	0049      	lsls	r1, r1, #1
 8018864:	4281      	cmp	r1, r0
 8018866:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801886a:	d3fa      	bcc.n	8018862 <Argus_Eval_Update+0x302>
 801886c:	2b00      	cmp	r3, #0
 801886e:	f040 80f4 	bne.w	8018a5a <Argus_Eval_Update+0x4fa>
 8018872:	ea92 0f0c 	teq	r2, ip
 8018876:	bf4c      	ite	mi
 8018878:	f04f 4500 	movmi.w	r5, #2147483648	@ 0x80000000
 801887c:	f06f 4500 	mvnpl.w	r5, #2147483648	@ 0x80000000
 8018880:	f9b8 c254 	ldrsh.w	ip, [r8, #596]	@ 0x254
 8018884:	f8c6 533c 	str.w	r5, [r6, #828]	@ 0x33c
 8018888:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801888c:	ea8c 70ec 	eor.w	r0, ip, ip, asr #31
 8018890:	2a00      	cmp	r2, #0
 8018892:	eba0 70ec 	sub.w	r0, r0, ip, asr #31
 8018896:	f2c0 8142 	blt.w	8018b1e <Argus_Eval_Update+0x5be>
 801889a:	4282      	cmp	r2, r0
 801889c:	4611      	mov	r1, r2
 801889e:	bf28      	it	cs
 80188a0:	f44f 3380 	movcs.w	r3, #65536	@ 0x10000
 80188a4:	f080 8122 	bcs.w	8018aec <Argus_Eval_Update+0x58c>
 80188a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80188ac:	0049      	lsls	r1, r1, #1
 80188ae:	4281      	cmp	r1, r0
 80188b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80188b4:	d3fa      	bcc.n	80188ac <Argus_Eval_Update+0x34c>
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	f040 8118 	bne.w	8018aec <Argus_Eval_Update+0x58c>
 80188bc:	ea92 0f0c 	teq	r2, ip
 80188c0:	bf4c      	ite	mi
 80188c2:	f04f 4500 	movmi.w	r5, #2147483648	@ 0x80000000
 80188c6:	f06f 4500 	mvnpl.w	r5, #2147483648	@ 0x80000000
 80188ca:	f8c6 5340 	str.w	r5, [r6, #832]	@ 0x340
 80188ce:	f9b8 5256 	ldrsh.w	r5, [r8, #598]	@ 0x256
 80188d2:	012d      	lsls	r5, r5, #4
 80188d4:	ea85 71e5 	eor.w	r1, r5, r5, asr #31
 80188d8:	2a00      	cmp	r2, #0
 80188da:	eba1 71e5 	sub.w	r1, r1, r5, asr #31
 80188de:	f2c0 815b 	blt.w	8018b98 <Argus_Eval_Update+0x638>
 80188e2:	428a      	cmp	r2, r1
 80188e4:	bf28      	it	cs
 80188e6:	f44f 3380 	movcs.w	r3, #65536	@ 0x10000
 80188ea:	f080 80e8 	bcs.w	8018abe <Argus_Eval_Update+0x55e>
 80188ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80188f2:	0052      	lsls	r2, r2, #1
 80188f4:	428a      	cmp	r2, r1
 80188f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80188fa:	d3fa      	bcc.n	80188f2 <Argus_Eval_Update+0x392>
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	f040 80de 	bne.w	8018abe <Argus_Eval_Update+0x55e>
 8018902:	ea94 0f05 	teq	r4, r5
 8018906:	f100 8087 	bmi.w	8018a18 <Argus_Eval_Update+0x4b8>
 801890a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801890e:	f9b8 325a 	ldrsh.w	r3, [r8, #602]	@ 0x25a
 8018912:	f8c6 0344 	str.w	r0, [r6, #836]	@ 0x344
 8018916:	011b      	lsls	r3, r3, #4
 8018918:	f8c6 3348 	str.w	r3, [r6, #840]	@ 0x348
 801891c:	f9b8 325c 	ldrsh.w	r3, [r8, #604]	@ 0x25c
 8018920:	011b      	lsls	r3, r3, #4
 8018922:	4642      	mov	r2, r8
 8018924:	f8c6 334c 	str.w	r3, [r6, #844]	@ 0x34c
 8018928:	4639      	mov	r1, r7
 801892a:	f506 7056 	add.w	r0, r6, #856	@ 0x358
 801892e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018932:	f001 ba95 	b.w	8019e60 <Argus_Pba_UpdateConfig>
 8018936:	2c00      	cmp	r4, #0
 8018938:	4660      	mov	r0, ip
 801893a:	f6bf ae2c 	bge.w	8018596 <Argus_Eval_Update+0x36>
 801893e:	4261      	negs	r1, r4
 8018940:	f1bc 0f00 	cmp.w	ip, #0
 8018944:	ea4f 75e1 	mov.w	r5, r1, asr #31
 8018948:	f2c0 8297 	blt.w	8018e7a <Argus_Eval_Update+0x91a>
 801894c:	fbac 3e01 	umull	r3, lr, ip, r1
 8018950:	0a9a      	lsrs	r2, r3, #10
 8018952:	fb0c ee05 	mla	lr, ip, r5, lr
 8018956:	ea42 528e 	orr.w	r2, r2, lr, lsl #22
 801895a:	f3c3 2340 	ubfx	r3, r3, #9, #1
 801895e:	4413      	add	r3, r2
 8018960:	e009      	b.n	8018976 <Argus_Eval_Update+0x416>
 8018962:	f1cc 0300 	rsb	r3, ip, #0
 8018966:	fb83 3e04 	smull	r3, lr, r3, r4
 801896a:	0a9a      	lsrs	r2, r3, #10
 801896c:	ea42 528e 	orr.w	r2, r2, lr, lsl #22
 8018970:	f3c3 2340 	ubfx	r3, r3, #9, #1
 8018974:	4413      	add	r3, r2
 8018976:	425a      	negs	r2, r3
 8018978:	2800      	cmp	r0, #0
 801897a:	4462      	add	r2, ip
 801897c:	f6bf ae21 	bge.w	80185c2 <Argus_Eval_Update+0x62>
 8018980:	2c00      	cmp	r4, #0
 8018982:	f1c0 0300 	rsb	r3, r0, #0
 8018986:	f2c0 8351 	blt.w	801902c <Argus_Eval_Update+0xacc>
 801898a:	17dc      	asrs	r4, r3, #31
 801898c:	fb03 f505 	mul.w	r5, r3, r5
 8018990:	fb01 5504 	mla	r5, r1, r4, r5
 8018994:	fba3 3101 	umull	r3, r1, r3, r1
 8018998:	0a9c      	lsrs	r4, r3, #10
 801899a:	4429      	add	r1, r5
 801899c:	ea44 5481 	orr.w	r4, r4, r1, lsl #22
 80189a0:	f3c3 2340 	ubfx	r3, r3, #9, #1
 80189a4:	4423      	add	r3, r4
 80189a6:	425b      	negs	r3, r3
 80189a8:	e618      	b.n	80185dc <Argus_Eval_Update+0x7c>
 80189aa:	2a00      	cmp	r2, #0
 80189ac:	f2c0 81f8 	blt.w	8018da0 <Argus_Eval_Update+0x840>
 80189b0:	fa10 f30e 	lsls.w	r3, r0, lr
 80189b4:	f100 8237 	bmi.w	8018e26 <Argus_Eval_Update+0x8c6>
 80189b8:	f06f 0501 	mvn.w	r5, #1
 80189bc:	4629      	mov	r1, r5
 80189be:	f06f 0c01 	mvn.w	ip, #1
 80189c2:	2402      	movs	r4, #2
 80189c4:	e65d      	b.n	8018682 <Argus_Eval_Update+0x122>
 80189c6:	bf00      	nop
 80189c8:	4779e127 	.word	0x4779e127
 80189cc:	4779e128 	.word	0x4779e128
 80189d0:	effffff8 	.word	0xeffffff8
 80189d4:	f9b8 3252 	ldrsh.w	r3, [r8, #594]	@ 0x252
 80189d8:	f1bc 0f00 	cmp.w	ip, #0
 80189dc:	bfb4      	ite	lt
 80189de:	f04f 4200 	movlt.w	r2, #2147483648	@ 0x80000000
 80189e2:	f06f 4200 	mvnge.w	r2, #2147483648	@ 0x80000000
 80189e6:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80189ea:	bf14      	ite	ne
 80189ec:	f04f 4300 	movne.w	r3, #2147483648	@ 0x80000000
 80189f0:	f06f 4300 	mvneq.w	r3, #2147483648	@ 0x80000000
 80189f4:	e9c6 23ce 	strd	r2, r3, [r6, #824]	@ 0x338
 80189f8:	f9b8 2254 	ldrsh.w	r2, [r8, #596]	@ 0x254
 80189fc:	f9b8 3256 	ldrsh.w	r3, [r8, #598]	@ 0x256
 8018a00:	f012 6f00 	tst.w	r2, #134217728	@ 0x8000000
 8018a04:	bf14      	ite	ne
 8018a06:	f04f 4200 	movne.w	r2, #2147483648	@ 0x80000000
 8018a0a:	f06f 4200 	mvneq.w	r2, #2147483648	@ 0x80000000
 8018a0e:	011b      	lsls	r3, r3, #4
 8018a10:	f8c6 2340 	str.w	r2, [r6, #832]	@ 0x340
 8018a14:	f57f af79 	bpl.w	801890a <Argus_Eval_Update+0x3aa>
 8018a18:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8018a1c:	e777      	b.n	801890e <Argus_Eval_Update+0x3ae>
 8018a1e:	460c      	mov	r4, r1
 8018a20:	b151      	cbz	r1, 8018a38 <Argus_Eval_Update+0x4d8>
 8018a22:	2400      	movs	r4, #0
 8018a24:	e000      	b.n	8018a28 <Argus_Eval_Update+0x4c8>
 8018a26:	b139      	cbz	r1, 8018a38 <Argus_Eval_Update+0x4d8>
 8018a28:	428b      	cmp	r3, r1
 8018a2a:	bf9c      	itt	ls
 8018a2c:	1ac9      	subls	r1, r1, r3
 8018a2e:	4314      	orrls	r4, r2
 8018a30:	0852      	lsrs	r2, r2, #1
 8018a32:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8018a36:	d1f6      	bne.n	8018a26 <Argus_Eval_Update+0x4c6>
 8018a38:	428b      	cmp	r3, r1
 8018a3a:	bf98      	it	ls
 8018a3c:	3401      	addls	r4, #1
 8018a3e:	ea95 0f00 	teq	r5, r0
 8018a42:	f100 826e 	bmi.w	8018f22 <Argus_Eval_Update+0x9c2>
 8018a46:	2c00      	cmp	r4, #0
 8018a48:	db04      	blt.n	8018a54 <Argus_Eval_Update+0x4f4>
 8018a4a:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8018a4e:	429c      	cmp	r4, r3
 8018a50:	f340 81d8 	ble.w	8018e04 <Argus_Eval_Update+0x8a4>
 8018a54:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8018a58:	e6bd      	b.n	80187d6 <Argus_Eval_Update+0x276>
 8018a5a:	4605      	mov	r5, r0
 8018a5c:	b150      	cbz	r0, 8018a74 <Argus_Eval_Update+0x514>
 8018a5e:	2500      	movs	r5, #0
 8018a60:	e000      	b.n	8018a64 <Argus_Eval_Update+0x504>
 8018a62:	b138      	cbz	r0, 8018a74 <Argus_Eval_Update+0x514>
 8018a64:	4281      	cmp	r1, r0
 8018a66:	bf9c      	itt	ls
 8018a68:	1a40      	subls	r0, r0, r1
 8018a6a:	431d      	orrls	r5, r3
 8018a6c:	085b      	lsrs	r3, r3, #1
 8018a6e:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8018a72:	d1f6      	bne.n	8018a62 <Argus_Eval_Update+0x502>
 8018a74:	4281      	cmp	r1, r0
 8018a76:	bf98      	it	ls
 8018a78:	3501      	addls	r5, #1
 8018a7a:	ea92 0f0c 	teq	r2, ip
 8018a7e:	f100 8266 	bmi.w	8018f4e <Argus_Eval_Update+0x9ee>
 8018a82:	2d00      	cmp	r5, #0
 8018a84:	bfb8      	it	lt
 8018a86:	f06f 4500 	mvnlt.w	r5, #2147483648	@ 0x80000000
 8018a8a:	e6f9      	b.n	8018880 <Argus_Eval_Update+0x320>
 8018a8c:	4605      	mov	r5, r0
 8018a8e:	b150      	cbz	r0, 8018aa6 <Argus_Eval_Update+0x546>
 8018a90:	2500      	movs	r5, #0
 8018a92:	e000      	b.n	8018a96 <Argus_Eval_Update+0x536>
 8018a94:	b138      	cbz	r0, 8018aa6 <Argus_Eval_Update+0x546>
 8018a96:	4281      	cmp	r1, r0
 8018a98:	bf9c      	itt	ls
 8018a9a:	1a40      	subls	r0, r0, r1
 8018a9c:	431d      	orrls	r5, r3
 8018a9e:	085b      	lsrs	r3, r3, #1
 8018aa0:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8018aa4:	d1f6      	bne.n	8018a94 <Argus_Eval_Update+0x534>
 8018aa6:	4281      	cmp	r1, r0
 8018aa8:	bf98      	it	ls
 8018aaa:	3501      	addls	r5, #1
 8018aac:	ea9c 0f02 	teq	ip, r2
 8018ab0:	f100 8241 	bmi.w	8018f36 <Argus_Eval_Update+0x9d6>
 8018ab4:	2d00      	cmp	r5, #0
 8018ab6:	bfb8      	it	lt
 8018ab8:	f06f 4500 	mvnlt.w	r5, #2147483648	@ 0x80000000
 8018abc:	e6bb      	b.n	8018836 <Argus_Eval_Update+0x2d6>
 8018abe:	4608      	mov	r0, r1
 8018ac0:	b151      	cbz	r1, 8018ad8 <Argus_Eval_Update+0x578>
 8018ac2:	2000      	movs	r0, #0
 8018ac4:	e000      	b.n	8018ac8 <Argus_Eval_Update+0x568>
 8018ac6:	b139      	cbz	r1, 8018ad8 <Argus_Eval_Update+0x578>
 8018ac8:	428a      	cmp	r2, r1
 8018aca:	bf9c      	itt	ls
 8018acc:	1a89      	subls	r1, r1, r2
 8018ace:	4318      	orrls	r0, r3
 8018ad0:	085b      	lsrs	r3, r3, #1
 8018ad2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8018ad6:	d1f6      	bne.n	8018ac6 <Argus_Eval_Update+0x566>
 8018ad8:	428a      	cmp	r2, r1
 8018ada:	bf98      	it	ls
 8018adc:	3001      	addls	r0, #1
 8018ade:	ea94 0f05 	teq	r4, r5
 8018ae2:	d46b      	bmi.n	8018bbc <Argus_Eval_Update+0x65c>
 8018ae4:	2800      	cmp	r0, #0
 8018ae6:	f6bf af12 	bge.w	801890e <Argus_Eval_Update+0x3ae>
 8018aea:	e70e      	b.n	801890a <Argus_Eval_Update+0x3aa>
 8018aec:	4605      	mov	r5, r0
 8018aee:	b150      	cbz	r0, 8018b06 <Argus_Eval_Update+0x5a6>
 8018af0:	2500      	movs	r5, #0
 8018af2:	e000      	b.n	8018af6 <Argus_Eval_Update+0x596>
 8018af4:	b138      	cbz	r0, 8018b06 <Argus_Eval_Update+0x5a6>
 8018af6:	4281      	cmp	r1, r0
 8018af8:	bf9c      	itt	ls
 8018afa:	1a40      	subls	r0, r0, r1
 8018afc:	431d      	orrls	r5, r3
 8018afe:	085b      	lsrs	r3, r3, #1
 8018b00:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8018b04:	d1f6      	bne.n	8018af4 <Argus_Eval_Update+0x594>
 8018b06:	4281      	cmp	r1, r0
 8018b08:	bf98      	it	ls
 8018b0a:	3501      	addls	r5, #1
 8018b0c:	ea92 0f0c 	teq	r2, ip
 8018b10:	f100 81e9 	bmi.w	8018ee6 <Argus_Eval_Update+0x986>
 8018b14:	2d00      	cmp	r5, #0
 8018b16:	bfb8      	it	lt
 8018b18:	f06f 4500 	mvnlt.w	r5, #2147483648	@ 0x80000000
 8018b1c:	e6d5      	b.n	80188ca <Argus_Eval_Update+0x36a>
 8018b1e:	4251      	negs	r1, r2
 8018b20:	4281      	cmp	r1, r0
 8018b22:	f4ff aec1 	bcc.w	80188a8 <Argus_Eval_Update+0x348>
 8018b26:	2900      	cmp	r1, #0
 8018b28:	f280 81d3 	bge.w	8018ed2 <Argus_Eval_Update+0x972>
 8018b2c:	4605      	mov	r5, r0
 8018b2e:	2800      	cmp	r0, #0
 8018b30:	d0ec      	beq.n	8018b0c <Argus_Eval_Update+0x5ac>
 8018b32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018b36:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8018b3a:	e7d9      	b.n	8018af0 <Argus_Eval_Update+0x590>
 8018b3c:	4251      	negs	r1, r2
 8018b3e:	4281      	cmp	r1, r0
 8018b40:	f4ff ae8d 	bcc.w	801885e <Argus_Eval_Update+0x2fe>
 8018b44:	2900      	cmp	r1, #0
 8018b46:	f280 81f8 	bge.w	8018f3a <Argus_Eval_Update+0x9da>
 8018b4a:	4605      	mov	r5, r0
 8018b4c:	2800      	cmp	r0, #0
 8018b4e:	d094      	beq.n	8018a7a <Argus_Eval_Update+0x51a>
 8018b50:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8018b54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018b58:	e781      	b.n	8018a5e <Argus_Eval_Update+0x4fe>
 8018b5a:	4251      	negs	r1, r2
 8018b5c:	4281      	cmp	r1, r0
 8018b5e:	f4ff ae59 	bcc.w	8018814 <Argus_Eval_Update+0x2b4>
 8018b62:	2900      	cmp	r1, #0
 8018b64:	f280 81df 	bge.w	8018f26 <Argus_Eval_Update+0x9c6>
 8018b68:	4605      	mov	r5, r0
 8018b6a:	2800      	cmp	r0, #0
 8018b6c:	d09e      	beq.n	8018aac <Argus_Eval_Update+0x54c>
 8018b6e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8018b72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018b76:	e78b      	b.n	8018a90 <Argus_Eval_Update+0x530>
 8018b78:	425b      	negs	r3, r3
 8018b7a:	428b      	cmp	r3, r1
 8018b7c:	f4ff ae1b 	bcc.w	80187b6 <Argus_Eval_Update+0x256>
 8018b80:	2b00      	cmp	r3, #0
 8018b82:	f280 81c4 	bge.w	8018f0e <Argus_Eval_Update+0x9ae>
 8018b86:	460c      	mov	r4, r1
 8018b88:	2900      	cmp	r1, #0
 8018b8a:	f43f af58 	beq.w	8018a3e <Argus_Eval_Update+0x4de>
 8018b8e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8018b92:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8018b96:	e744      	b.n	8018a22 <Argus_Eval_Update+0x4c2>
 8018b98:	4252      	negs	r2, r2
 8018b9a:	428a      	cmp	r2, r1
 8018b9c:	f4ff aea7 	bcc.w	80188ee <Argus_Eval_Update+0x38e>
 8018ba0:	2a00      	cmp	r2, #0
 8018ba2:	f280 8240 	bge.w	8019026 <Argus_Eval_Update+0xac6>
 8018ba6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018baa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8018bae:	2900      	cmp	r1, #0
 8018bb0:	d187      	bne.n	8018ac2 <Argus_Eval_Update+0x562>
 8018bb2:	ea94 0f05 	teq	r4, r5
 8018bb6:	4608      	mov	r0, r1
 8018bb8:	f57f aea9 	bpl.w	801890e <Argus_Eval_Update+0x3ae>
 8018bbc:	4240      	negs	r0, r0
 8018bbe:	e6a6      	b.n	801890e <Argus_Eval_Update+0x3ae>
 8018bc0:	2900      	cmp	r1, #0
 8018bc2:	f02c 4500 	bic.w	r5, ip, #2147483648	@ 0x80000000
 8018bc6:	f2c0 8122 	blt.w	8018e0e <Argus_Eval_Update+0x8ae>
 8018bca:	4ab2      	ldr	r2, [pc, #712]	@ (8018e94 <Argus_Eval_Update+0x934>)
 8018bcc:	2500      	movs	r5, #0
 8018bce:	e000      	b.n	8018bd2 <Argus_Eval_Update+0x672>
 8018bd0:	b152      	cbz	r2, 8018be8 <Argus_Eval_Update+0x688>
 8018bd2:	428a      	cmp	r2, r1
 8018bd4:	bf24      	itt	cs
 8018bd6:	1a52      	subcs	r2, r2, r1
 8018bd8:	4325      	orrcs	r5, r4
 8018bda:	0864      	lsrs	r4, r4, #1
 8018bdc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8018be0:	d1f6      	bne.n	8018bd0 <Argus_Eval_Update+0x670>
 8018be2:	428a      	cmp	r2, r1
 8018be4:	d300      	bcc.n	8018be8 <Argus_Eval_Update+0x688>
 8018be6:	3501      	adds	r5, #1
 8018be8:	f1be 0f00 	cmp.w	lr, #0
 8018bec:	f2c0 816c 	blt.w	8018ec8 <Argus_Eval_Update+0x968>
 8018bf0:	2d00      	cmp	r5, #0
 8018bf2:	f6ff ad7e 	blt.w	80186f2 <Argus_Eval_Update+0x192>
 8018bf6:	00ec      	lsls	r4, r5, #3
 8018bf8:	f9b8 52a8 	ldrsh.w	r5, [r8, #680]	@ 0x2a8
 8018bfc:	f8c6 432c 	str.w	r4, [r6, #812]	@ 0x32c
 8018c00:	429c      	cmp	r4, r3
 8018c02:	ea4f 1585 	mov.w	r5, r5, lsl #6
 8018c06:	f000 8126 	beq.w	8018e56 <Argus_Eval_Update+0x8f6>
 8018c0a:	2c00      	cmp	r4, #0
 8018c0c:	46a4      	mov	ip, r4
 8018c0e:	f43f ad8c 	beq.w	801872a <Argus_Eval_Update+0x1ca>
 8018c12:	f2c0 821b 	blt.w	801904c <Argus_Eval_Update+0xaec>
 8018c16:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 8018c1a:	f084 5c80 	eor.w	ip, r4, #268435456	@ 0x10000000
 8018c1e:	f4ff ad75 	bcc.w	801870c <Argus_Eval_Update+0x1ac>
 8018c22:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8018c26:	2000      	movs	r0, #0
 8018c28:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 8018c2c:	e000      	b.n	8018c30 <Argus_Eval_Update+0x6d0>
 8018c2e:	b151      	cbz	r1, 8018c46 <Argus_Eval_Update+0x6e6>
 8018c30:	42a1      	cmp	r1, r4
 8018c32:	bf24      	itt	cs
 8018c34:	1b09      	subcs	r1, r1, r4
 8018c36:	4310      	orrcs	r0, r2
 8018c38:	0852      	lsrs	r2, r2, #1
 8018c3a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8018c3e:	d1f6      	bne.n	8018c2e <Argus_Eval_Update+0x6ce>
 8018c40:	42a1      	cmp	r1, r4
 8018c42:	bf28      	it	cs
 8018c44:	3001      	addcs	r0, #1
 8018c46:	f1bc 0f00 	cmp.w	ip, #0
 8018c4a:	f2c0 80ff 	blt.w	8018e4c <Argus_Eval_Update+0x8ec>
 8018c4e:	2800      	cmp	r0, #0
 8018c50:	f6ff ad6b 	blt.w	801872a <Argus_Eval_Update+0x1ca>
 8018c54:	469c      	mov	ip, r3
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	f43f ad81 	beq.w	801875e <Argus_Eval_Update+0x1fe>
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	f6bf ad6b 	bge.w	8018738 <Argus_Eval_Update+0x1d8>
 8018c62:	425b      	negs	r3, r3
 8018c64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018c68:	f4ff ad6a 	bcc.w	8018740 <Argus_Eval_Update+0x1e0>
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	f280 8199 	bge.w	8018fa4 <Argus_Eval_Update+0xa44>
 8018c72:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8018c76:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8018c7a:	2400      	movs	r4, #0
 8018c7c:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 8018c80:	e000      	b.n	8018c84 <Argus_Eval_Update+0x724>
 8018c82:	b151      	cbz	r1, 8018c9a <Argus_Eval_Update+0x73a>
 8018c84:	428b      	cmp	r3, r1
 8018c86:	bf9c      	itt	ls
 8018c88:	1ac9      	subls	r1, r1, r3
 8018c8a:	4314      	orrls	r4, r2
 8018c8c:	0852      	lsrs	r2, r2, #1
 8018c8e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8018c92:	d1f6      	bne.n	8018c82 <Argus_Eval_Update+0x722>
 8018c94:	428b      	cmp	r3, r1
 8018c96:	bf98      	it	ls
 8018c98:	3401      	addls	r4, #1
 8018c9a:	f1bc 0f00 	cmp.w	ip, #0
 8018c9e:	f2c0 80d7 	blt.w	8018e50 <Argus_Eval_Update+0x8f0>
 8018ca2:	2c00      	cmp	r4, #0
 8018ca4:	bfb8      	it	lt
 8018ca6:	f06f 4400 	mvnlt.w	r4, #2147483648	@ 0x80000000
 8018caa:	e55a      	b.n	8018762 <Argus_Eval_Update+0x202>
 8018cac:	2c00      	cmp	r4, #0
 8018cae:	f022 4000 	bic.w	r0, r2, #2147483648	@ 0x80000000
 8018cb2:	f2c0 80b2 	blt.w	8018e1a <Argus_Eval_Update+0x8ba>
 8018cb6:	4a77      	ldr	r2, [pc, #476]	@ (8018e94 <Argus_Eval_Update+0x934>)
 8018cb8:	2000      	movs	r0, #0
 8018cba:	e000      	b.n	8018cbe <Argus_Eval_Update+0x75e>
 8018cbc:	b152      	cbz	r2, 8018cd4 <Argus_Eval_Update+0x774>
 8018cbe:	42a2      	cmp	r2, r4
 8018cc0:	bf24      	itt	cs
 8018cc2:	1b12      	subcs	r2, r2, r4
 8018cc4:	4318      	orrcs	r0, r3
 8018cc6:	085b      	lsrs	r3, r3, #1
 8018cc8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8018ccc:	d1f6      	bne.n	8018cbc <Argus_Eval_Update+0x75c>
 8018cce:	42a2      	cmp	r2, r4
 8018cd0:	d300      	bcc.n	8018cd4 <Argus_Eval_Update+0x774>
 8018cd2:	3001      	adds	r0, #1
 8018cd4:	f1bc 0f00 	cmp.w	ip, #0
 8018cd8:	f2c0 80f8 	blt.w	8018ecc <Argus_Eval_Update+0x96c>
 8018cdc:	2800      	cmp	r0, #0
 8018cde:	f6ff ace1 	blt.w	80186a4 <Argus_Eval_Update+0x144>
 8018ce2:	00c3      	lsls	r3, r0, #3
 8018ce4:	f8c6 3328 	str.w	r3, [r6, #808]	@ 0x328
 8018ce8:	2d00      	cmp	r5, #0
 8018cea:	f47f ace4 	bne.w	80186b6 <Argus_Eval_Update+0x156>
 8018cee:	e500      	b.n	80186f2 <Argus_Eval_Update+0x192>
 8018cf0:	2900      	cmp	r1, #0
 8018cf2:	da08      	bge.n	8018d06 <Argus_Eval_Update+0x7a6>
 8018cf4:	4291      	cmp	r1, r2
 8018cf6:	f000 813f 	beq.w	8018f78 <Argus_Eval_Update+0xa18>
 8018cfa:	f030 4300 	bics.w	r3, r0, #2147483648	@ 0x80000000
 8018cfe:	f02e 4100 	bic.w	r1, lr, #2147483648	@ 0x80000000
 8018d02:	f000 8145 	beq.w	8018f90 <Argus_Eval_Update+0xa30>
 8018d06:	2000      	movs	r0, #0
 8018d08:	e000      	b.n	8018d0c <Argus_Eval_Update+0x7ac>
 8018d0a:	b152      	cbz	r2, 8018d22 <Argus_Eval_Update+0x7c2>
 8018d0c:	428a      	cmp	r2, r1
 8018d0e:	bf24      	itt	cs
 8018d10:	1a52      	subcs	r2, r2, r1
 8018d12:	4318      	orrcs	r0, r3
 8018d14:	085b      	lsrs	r3, r3, #1
 8018d16:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8018d1a:	d1f6      	bne.n	8018d0a <Argus_Eval_Update+0x7aa>
 8018d1c:	4291      	cmp	r1, r2
 8018d1e:	d800      	bhi.n	8018d22 <Argus_Eval_Update+0x7c2>
 8018d20:	3001      	adds	r0, #1
 8018d22:	ea95 0f09 	teq	r5, r9
 8018d26:	f100 80e9 	bmi.w	8018efc <Argus_Eval_Update+0x99c>
 8018d2a:	2800      	cmp	r0, #0
 8018d2c:	db7d      	blt.n	8018e2a <Argus_Eval_Update+0x8ca>
 8018d2e:	0045      	lsls	r5, r0, #1
 8018d30:	4629      	mov	r1, r5
 8018d32:	f1bc 0f00 	cmp.w	ip, #0
 8018d36:	f47f ac9c 	bne.w	8018672 <Argus_Eval_Update+0x112>
 8018d3a:	e4b3      	b.n	80186a4 <Argus_Eval_Update+0x144>
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	da08      	bge.n	8018d52 <Argus_Eval_Update+0x7f2>
 8018d40:	4293      	cmp	r3, r2
 8018d42:	f000 8117 	beq.w	8018f74 <Argus_Eval_Update+0xa14>
 8018d46:	f03c 4400 	bics.w	r4, ip, #2147483648	@ 0x80000000
 8018d4a:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8018d4e:	f000 811d 	beq.w	8018f8c <Argus_Eval_Update+0xa2c>
 8018d52:	f04f 0c00 	mov.w	ip, #0
 8018d56:	e000      	b.n	8018d5a <Argus_Eval_Update+0x7fa>
 8018d58:	b162      	cbz	r2, 8018d74 <Argus_Eval_Update+0x814>
 8018d5a:	4293      	cmp	r3, r2
 8018d5c:	bf9c      	itt	ls
 8018d5e:	1ad2      	subls	r2, r2, r3
 8018d60:	ea4c 0c04 	orrls.w	ip, ip, r4
 8018d64:	0864      	lsrs	r4, r4, #1
 8018d66:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8018d6a:	d1f5      	bne.n	8018d58 <Argus_Eval_Update+0x7f8>
 8018d6c:	4293      	cmp	r3, r2
 8018d6e:	d801      	bhi.n	8018d74 <Argus_Eval_Update+0x814>
 8018d70:	f10c 0c01 	add.w	ip, ip, #1
 8018d74:	ea9a 0f05 	teq	sl, r5
 8018d78:	f100 80a0 	bmi.w	8018ebc <Argus_Eval_Update+0x95c>
 8018d7c:	f1bc 0f00 	cmp.w	ip, #0
 8018d80:	db5f      	blt.n	8018e42 <Argus_Eval_Update+0x8e2>
 8018d82:	ea4f 044c 	mov.w	r4, ip, lsl #1
 8018d86:	46a4      	mov	ip, r4
 8018d88:	e452      	b.n	8018630 <Argus_Eval_Update+0xd0>
 8018d8a:	fba0 3101 	umull	r3, r1, r0, r1
 8018d8e:	0a9c      	lsrs	r4, r3, #10
 8018d90:	fb00 1505 	mla	r5, r0, r5, r1
 8018d94:	ea44 5485 	orr.w	r4, r4, r5, lsl #22
 8018d98:	f3c3 2340 	ubfx	r3, r3, #9, #1
 8018d9c:	4423      	add	r3, r4
 8018d9e:	e602      	b.n	80189a6 <Argus_Eval_Update+0x446>
 8018da0:	fa10 f30e 	lsls.w	r3, r0, lr
 8018da4:	d561      	bpl.n	8018e6a <Argus_Eval_Update+0x90a>
 8018da6:	f06f 0307 	mvn.w	r3, #7
 8018daa:	f8c6 3328 	str.w	r3, [r6, #808]	@ 0x328
 8018dae:	f9b8 52a8 	ldrsh.w	r5, [r8, #680]	@ 0x2a8
 8018db2:	f06f 0307 	mvn.w	r3, #7
 8018db6:	f8c6 332c 	str.w	r3, [r6, #812]	@ 0x32c
 8018dba:	01ad      	lsls	r5, r5, #6
 8018dbc:	4618      	mov	r0, r3
 8018dbe:	e4ed      	b.n	801879c <Argus_Eval_Update+0x23c>
 8018dc0:	f080 5480 	eor.w	r4, r0, #268435456	@ 0x10000000
 8018dc4:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8018dc8:	2300      	movs	r3, #0
 8018dca:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8018dce:	e000      	b.n	8018dd2 <Argus_Eval_Update+0x872>
 8018dd0:	b150      	cbz	r0, 8018de8 <Argus_Eval_Update+0x888>
 8018dd2:	4282      	cmp	r2, r0
 8018dd4:	bf9c      	itt	ls
 8018dd6:	1a80      	subls	r0, r0, r2
 8018dd8:	430b      	orrls	r3, r1
 8018dda:	0849      	lsrs	r1, r1, #1
 8018ddc:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8018de0:	d1f6      	bne.n	8018dd0 <Argus_Eval_Update+0x870>
 8018de2:	4282      	cmp	r2, r0
 8018de4:	bf98      	it	ls
 8018de6:	3301      	addls	r3, #1
 8018de8:	2c00      	cmp	r4, #0
 8018dea:	db33      	blt.n	8018e54 <Argus_Eval_Update+0x8f4>
 8018dec:	2b00      	cmp	r3, #0
 8018dee:	4618      	mov	r0, r3
 8018df0:	f6ff acd1 	blt.w	8018796 <Argus_Eval_Update+0x236>
 8018df4:	2b00      	cmp	r3, #0
 8018df6:	f47f acd1 	bne.w	801879c <Argus_Eval_Update+0x23c>
 8018dfa:	43e9      	mvns	r1, r5
 8018dfc:	0fc9      	lsrs	r1, r1, #31
 8018dfe:	4249      	negs	r1, r1
 8018e00:	b289      	uxth	r1, r1
 8018e02:	e4e8      	b.n	80187d6 <Argus_Eval_Update+0x276>
 8018e04:	2c00      	cmp	r4, #0
 8018e06:	f340 80bf 	ble.w	8018f88 <Argus_Eval_Update+0xa28>
 8018e0a:	b2a1      	uxth	r1, r4
 8018e0c:	e4e3      	b.n	80187d6 <Argus_Eval_Update+0x276>
 8018e0e:	2d00      	cmp	r5, #0
 8018e10:	f43f aee9 	beq.w	8018be6 <Argus_Eval_Update+0x686>
 8018e14:	4611      	mov	r1, r2
 8018e16:	462c      	mov	r4, r5
 8018e18:	e6d7      	b.n	8018bca <Argus_Eval_Update+0x66a>
 8018e1a:	2800      	cmp	r0, #0
 8018e1c:	f43f af59 	beq.w	8018cd2 <Argus_Eval_Update+0x772>
 8018e20:	4674      	mov	r4, lr
 8018e22:	4603      	mov	r3, r0
 8018e24:	e747      	b.n	8018cb6 <Argus_Eval_Update+0x756>
 8018e26:	4629      	mov	r1, r5
 8018e28:	e5c9      	b.n	80189be <Argus_Eval_Update+0x45e>
 8018e2a:	f1bc 0f00 	cmp.w	ip, #0
 8018e2e:	f47f ac1d 	bne.w	801866c <Argus_Eval_Update+0x10c>
 8018e32:	f06f 0307 	mvn.w	r3, #7
 8018e36:	f06f 0501 	mvn.w	r5, #1
 8018e3a:	f8c6 3328 	str.w	r3, [r6, #808]	@ 0x328
 8018e3e:	4629      	mov	r1, r5
 8018e40:	e437      	b.n	80186b2 <Argus_Eval_Update+0x152>
 8018e42:	f06f 0c01 	mvn.w	ip, #1
 8018e46:	4664      	mov	r4, ip
 8018e48:	f7ff bbf2 	b.w	8018630 <Argus_Eval_Update+0xd0>
 8018e4c:	4240      	negs	r0, r0
 8018e4e:	e701      	b.n	8018c54 <Argus_Eval_Update+0x6f4>
 8018e50:	4264      	negs	r4, r4
 8018e52:	e486      	b.n	8018762 <Argus_Eval_Update+0x202>
 8018e54:	425b      	negs	r3, r3
 8018e56:	4618      	mov	r0, r3
 8018e58:	e7cc      	b.n	8018df4 <Argus_Eval_Update+0x894>
 8018e5a:	4242      	negs	r2, r0
 8018e5c:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 8018e60:	f080 80a3 	bcs.w	8018faa <Argus_Eval_Update+0xa4a>
 8018e64:	f080 5480 	eor.w	r4, r0, #268435456	@ 0x10000000
 8018e68:	e487      	b.n	801877a <Argus_Eval_Update+0x21a>
 8018e6a:	f06f 0307 	mvn.w	r3, #7
 8018e6e:	f8df e028 	ldr.w	lr, [pc, #40]	@ 8018e98 <Argus_Eval_Update+0x938>
 8018e72:	f8c6 3328 	str.w	r3, [r6, #808]	@ 0x328
 8018e76:	2102      	movs	r1, #2
 8018e78:	e428      	b.n	80186cc <Argus_Eval_Update+0x16c>
 8018e7a:	f1cc 0300 	rsb	r3, ip, #0
 8018e7e:	fb83 3201 	smull	r3, r2, r3, r1
 8018e82:	ea4f 2e93 	mov.w	lr, r3, lsr #10
 8018e86:	ea4e 5e82 	orr.w	lr, lr, r2, lsl #22
 8018e8a:	f3c3 2240 	ubfx	r2, r3, #9, #1
 8018e8e:	4472      	add	r2, lr
 8018e90:	f7ff bb93 	b.w	80185ba <Argus_Eval_Update+0x5a>
 8018e94:	4779e128 	.word	0x4779e128
 8018e98:	b8861ed6 	.word	0xb8861ed6
 8018e9c:	4a73      	ldr	r2, [pc, #460]	@ (801906c <Argus_Eval_Update+0xb0c>)
 8018e9e:	f8df e1d4 	ldr.w	lr, [pc, #468]	@ 8019074 <Argus_Eval_Update+0xb14>
 8018ea2:	4249      	negs	r1, r1
 8018ea4:	4291      	cmp	r1, r2
 8018ea6:	ea85 0e0e 	eor.w	lr, r5, lr
 8018eaa:	f67f ac0f 	bls.w	80186cc <Argus_Eval_Update+0x16c>
 8018eae:	2900      	cmp	r1, #0
 8018eb0:	da67      	bge.n	8018f82 <Argus_Eval_Update+0xa22>
 8018eb2:	084a      	lsrs	r2, r1, #1
 8018eb4:	f44f 4500 	mov.w	r5, #32768	@ 0x8000
 8018eb8:	e7ac      	b.n	8018e14 <Argus_Eval_Update+0x8b4>
 8018eba:	4694      	mov	ip, r2
 8018ebc:	f1cc 0400 	rsb	r4, ip, #0
 8018ec0:	0064      	lsls	r4, r4, #1
 8018ec2:	46a4      	mov	ip, r4
 8018ec4:	f7ff bbb4 	b.w	8018630 <Argus_Eval_Update+0xd0>
 8018ec8:	426d      	negs	r5, r5
 8018eca:	e694      	b.n	8018bf6 <Argus_Eval_Update+0x696>
 8018ecc:	4243      	negs	r3, r0
 8018ece:	00db      	lsls	r3, r3, #3
 8018ed0:	e708      	b.n	8018ce4 <Argus_Eval_Update+0x784>
 8018ed2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8018ed6:	2800      	cmp	r0, #0
 8018ed8:	f47f ae0a 	bne.w	8018af0 <Argus_Eval_Update+0x590>
 8018edc:	ea92 0f0c 	teq	r2, ip
 8018ee0:	4605      	mov	r5, r0
 8018ee2:	f57f acf2 	bpl.w	80188ca <Argus_Eval_Update+0x36a>
 8018ee6:	426d      	negs	r5, r5
 8018ee8:	e4ef      	b.n	80188ca <Argus_Eval_Update+0x36a>
 8018eea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8018eee:	2a00      	cmp	r2, #0
 8018ef0:	f47f af09 	bne.w	8018d06 <Argus_Eval_Update+0x7a6>
 8018ef4:	ea95 0f09 	teq	r5, r9
 8018ef8:	d54c      	bpl.n	8018f94 <Argus_Eval_Update+0xa34>
 8018efa:	4610      	mov	r0, r2
 8018efc:	4241      	negs	r1, r0
 8018efe:	0049      	lsls	r1, r1, #1
 8018f00:	460d      	mov	r5, r1
 8018f02:	f1bc 0f00 	cmp.w	ip, #0
 8018f06:	f47f abb4 	bne.w	8018672 <Argus_Eval_Update+0x112>
 8018f0a:	f7ff bbcb 	b.w	80186a4 <Argus_Eval_Update+0x144>
 8018f0e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8018f12:	2900      	cmp	r1, #0
 8018f14:	f47f ad85 	bne.w	8018a22 <Argus_Eval_Update+0x4c2>
 8018f18:	ea95 0f00 	teq	r5, r0
 8018f1c:	460c      	mov	r4, r1
 8018f1e:	f57f ad94 	bpl.w	8018a4a <Argus_Eval_Update+0x4ea>
 8018f22:	4264      	negs	r4, r4
 8018f24:	e591      	b.n	8018a4a <Argus_Eval_Update+0x4ea>
 8018f26:	2800      	cmp	r0, #0
 8018f28:	f47f adb2 	bne.w	8018a90 <Argus_Eval_Update+0x530>
 8018f2c:	ea9c 0f02 	teq	ip, r2
 8018f30:	4605      	mov	r5, r0
 8018f32:	f57f ac80 	bpl.w	8018836 <Argus_Eval_Update+0x2d6>
 8018f36:	426d      	negs	r5, r5
 8018f38:	e47d      	b.n	8018836 <Argus_Eval_Update+0x2d6>
 8018f3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8018f3e:	2800      	cmp	r0, #0
 8018f40:	f47f ad8d 	bne.w	8018a5e <Argus_Eval_Update+0x4fe>
 8018f44:	ea92 0f0c 	teq	r2, ip
 8018f48:	4605      	mov	r5, r0
 8018f4a:	f57f ac99 	bpl.w	8018880 <Argus_Eval_Update+0x320>
 8018f4e:	426d      	negs	r5, r5
 8018f50:	e496      	b.n	8018880 <Argus_Eval_Update+0x320>
 8018f52:	b3a2      	cbz	r2, 8018fbe <Argus_Eval_Update+0xa5e>
 8018f54:	462b      	mov	r3, r5
 8018f56:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8018f5a:	e6fa      	b.n	8018d52 <Argus_Eval_Update+0x7f2>
 8018f5c:	4b43      	ldr	r3, [pc, #268]	@ (801906c <Argus_Eval_Update+0xb0c>)
 8018f5e:	4264      	negs	r4, r4
 8018f60:	429c      	cmp	r4, r3
 8018f62:	f67f ab8e 	bls.w	8018682 <Argus_Eval_Update+0x122>
 8018f66:	2c00      	cmp	r4, #0
 8018f68:	da08      	bge.n	8018f7c <Argus_Eval_Update+0xa1c>
 8018f6a:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 8018f6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018f72:	e6a0      	b.n	8018cb6 <Argus_Eval_Update+0x756>
 8018f74:	46a4      	mov	ip, r4
 8018f76:	e6fd      	b.n	8018d74 <Argus_Eval_Update+0x814>
 8018f78:	4618      	mov	r0, r3
 8018f7a:	e6d2      	b.n	8018d22 <Argus_Eval_Update+0x7c2>
 8018f7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8018f80:	e699      	b.n	8018cb6 <Argus_Eval_Update+0x756>
 8018f82:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8018f86:	e620      	b.n	8018bca <Argus_Eval_Update+0x66a>
 8018f88:	2100      	movs	r1, #0
 8018f8a:	e424      	b.n	80187d6 <Argus_Eval_Update+0x276>
 8018f8c:	46a4      	mov	ip, r4
 8018f8e:	e6ed      	b.n	8018d6c <Argus_Eval_Update+0x80c>
 8018f90:	4618      	mov	r0, r3
 8018f92:	e6c3      	b.n	8018d1c <Argus_Eval_Update+0x7bc>
 8018f94:	f1bc 0f00 	cmp.w	ip, #0
 8018f98:	f43f af05 	beq.w	8018da6 <Argus_Eval_Update+0x846>
 8018f9c:	2500      	movs	r5, #0
 8018f9e:	4629      	mov	r1, r5
 8018fa0:	f7ff bb67 	b.w	8018672 <Argus_Eval_Update+0x112>
 8018fa4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8018fa8:	e667      	b.n	8018c7a <Argus_Eval_Update+0x71a>
 8018faa:	2a00      	cmp	r2, #0
 8018fac:	f6bf af08 	bge.w	8018dc0 <Argus_Eval_Update+0x860>
 8018fb0:	f080 5480 	eor.w	r4, r0, #268435456	@ 0x10000000
 8018fb4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8018fb8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8018fbc:	e704      	b.n	8018dc8 <Argus_Eval_Update+0x868>
 8018fbe:	ea9a 0f05 	teq	sl, r5
 8018fc2:	f53f af7a 	bmi.w	8018eba <Argus_Eval_Update+0x95a>
 8018fc6:	4614      	mov	r4, r2
 8018fc8:	46a4      	mov	ip, r4
 8018fca:	f7ff bb31 	b.w	8018630 <Argus_Eval_Update+0xd0>
 8018fce:	f9b8 52a8 	ldrsh.w	r5, [r8, #680]	@ 0x2a8
 8018fd2:	f8c6 432c 	str.w	r4, [r6, #812]	@ 0x32c
 8018fd6:	01ad      	lsls	r5, r5, #6
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	f47f aba6 	bne.w	801872a <Argus_Eval_Update+0x1ca>
 8018fde:	e70c      	b.n	8018dfa <Argus_Eval_Update+0x89a>
 8018fe0:	f8c6 3328 	str.w	r3, [r6, #808]	@ 0x328
 8018fe4:	2d00      	cmp	r5, #0
 8018fe6:	f47f ab66 	bne.w	80186b6 <Argus_Eval_Update+0x156>
 8018fea:	f9b8 52a8 	ldrsh.w	r5, [r8, #680]	@ 0x2a8
 8018fee:	f06f 0207 	mvn.w	r2, #7
 8018ff2:	f8c6 232c 	str.w	r2, [r6, #812]	@ 0x32c
 8018ff6:	01ad      	lsls	r5, r5, #6
 8018ff8:	f7ff bb85 	b.w	8018706 <Argus_Eval_Update+0x1a6>
 8018ffc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8019000:	4618      	mov	r0, r3
 8019002:	f7ff bbcb 	b.w	801879c <Argus_Eval_Update+0x23c>
 8019006:	f1b0 4000 	subs.w	r0, r0, #2147483648	@ 0x80000000
 801900a:	f47f abaf 	bne.w	801876c <Argus_Eval_Update+0x20c>
 801900e:	f7ff bbc2 	b.w	8018796 <Argus_Eval_Update+0x236>
 8019012:	469c      	mov	ip, r3
 8019014:	b11b      	cbz	r3, 801901e <Argus_Eval_Update+0xabe>
 8019016:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 801901a:	f7ff bb8a 	b.w	8018732 <Argus_Eval_Update+0x1d2>
 801901e:	4c14      	ldr	r4, [pc, #80]	@ (8019070 <Argus_Eval_Update+0xb10>)
 8019020:	2201      	movs	r2, #1
 8019022:	f7ff bbaa 	b.w	801877a <Argus_Eval_Update+0x21a>
 8019026:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801902a:	e5c0      	b.n	8018bae <Argus_Eval_Update+0x64e>
 801902c:	fb03 f405 	mul.w	r4, r3, r5
 8019030:	17dd      	asrs	r5, r3, #31
 8019032:	fb01 4405 	mla	r4, r1, r5, r4
 8019036:	fba3 3101 	umull	r3, r1, r3, r1
 801903a:	4421      	add	r1, r4
 801903c:	0a9c      	lsrs	r4, r3, #10
 801903e:	ea44 5481 	orr.w	r4, r4, r1, lsl #22
 8019042:	f3c3 2340 	ubfx	r3, r3, #9, #1
 8019046:	4423      	add	r3, r4
 8019048:	f7ff bac8 	b.w	80185dc <Argus_Eval_Update+0x7c>
 801904c:	4264      	negs	r4, r4
 801904e:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 8019052:	f08c 5c80 	eor.w	ip, ip, #268435456	@ 0x10000000
 8019056:	f4ff ab59 	bcc.w	801870c <Argus_Eval_Update+0x1ac>
 801905a:	2c00      	cmp	r4, #0
 801905c:	f6bf ade1 	bge.w	8018c22 <Argus_Eval_Update+0x6c2>
 8019060:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 8019064:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8019068:	e5dd      	b.n	8018c26 <Argus_Eval_Update+0x6c6>
 801906a:	bf00      	nop
 801906c:	4779e127 	.word	0x4779e127
 8019070:	10000001 	.word	0x10000001
 8019074:	4779e128 	.word	0x4779e128

08019078 <Argus_Eval_ApplyAuxEvaluation>:
 8019078:	2a00      	cmp	r2, #0
 801907a:	d05c      	beq.n	8019136 <Argus_Eval_ApplyAuxEvaluation+0xbe>
 801907c:	b500      	push	{lr}
 801907e:	788b      	ldrb	r3, [r1, #2]
 8019080:	f891 c001 	ldrb.w	ip, [r1, #1]
 8019084:	f891 e003 	ldrb.w	lr, [r1, #3]
 8019088:	021b      	lsls	r3, r3, #8
 801908a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 801908e:	ea43 030e 	orr.w	r3, r3, lr
 8019092:	f44f 3c00 	mov.w	ip, #131072	@ 0x20000
 8019096:	fbbc f2f2 	udiv	r2, ip, r2
 801909a:	3201      	adds	r2, #1
 801909c:	1052      	asrs	r2, r2, #1
 801909e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80190a2:	fb02 f303 	mul.w	r3, r2, r3
 80190a6:	0b1b      	lsrs	r3, r3, #12
 80190a8:	8003      	strh	r3, [r0, #0]
 80190aa:	794b      	ldrb	r3, [r1, #5]
 80190ac:	f891 c004 	ldrb.w	ip, [r1, #4]
 80190b0:	021b      	lsls	r3, r3, #8
 80190b2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80190b6:	f891 c006 	ldrb.w	ip, [r1, #6]
 80190ba:	ea43 030c 	orr.w	r3, r3, ip
 80190be:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80190c2:	fb02 f303 	mul.w	r3, r2, r3
 80190c6:	0b1b      	lsrs	r3, r3, #12
 80190c8:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80190cc:	8043      	strh	r3, [r0, #2]
 80190ce:	7a0b      	ldrb	r3, [r1, #8]
 80190d0:	f891 c007 	ldrb.w	ip, [r1, #7]
 80190d4:	021b      	lsls	r3, r3, #8
 80190d6:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80190da:	f891 c009 	ldrb.w	ip, [r1, #9]
 80190de:	ea43 030c 	orr.w	r3, r3, ip
 80190e2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80190e6:	fb02 f303 	mul.w	r3, r2, r3
 80190ea:	0b1b      	lsrs	r3, r3, #12
 80190ec:	8083      	strh	r3, [r0, #4]
 80190ee:	7acb      	ldrb	r3, [r1, #11]
 80190f0:	f891 c00a 	ldrb.w	ip, [r1, #10]
 80190f4:	021b      	lsls	r3, r3, #8
 80190f6:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80190fa:	f891 c00c 	ldrb.w	ip, [r1, #12]
 80190fe:	ea43 030c 	orr.w	r3, r3, ip
 8019102:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8019106:	fb02 f303 	mul.w	r3, r2, r3
 801910a:	0b1b      	lsrs	r3, r3, #12
 801910c:	80c3      	strh	r3, [r0, #6]
 801910e:	7b8b      	ldrb	r3, [r1, #14]
 8019110:	f891 c00d 	ldrb.w	ip, [r1, #13]
 8019114:	7bc9      	ldrb	r1, [r1, #15]
 8019116:	021b      	lsls	r3, r3, #8
 8019118:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 801911c:	430b      	orrs	r3, r1
 801911e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8019122:	fb02 f303 	mul.w	r3, r2, r3
 8019126:	0b1b      	lsrs	r3, r3, #12
 8019128:	8103      	strh	r3, [r0, #8]
 801912a:	f04f 33ff 	mov.w	r3, #4294967295
 801912e:	f8c0 300a 	str.w	r3, [r0, #10]
 8019132:	f85d fb04 	ldr.w	pc, [sp], #4
 8019136:	f04f 33ff 	mov.w	r3, #4294967295
 801913a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801913e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8019142:	6043      	str	r3, [r0, #4]
 8019144:	8103      	strh	r3, [r0, #8]
 8019146:	f04f 33ff 	mov.w	r3, #4294967295
 801914a:	8001      	strh	r1, [r0, #0]
 801914c:	8042      	strh	r2, [r0, #2]
 801914e:	f8c0 300a 	str.w	r3, [r0, #10]
 8019152:	4770      	bx	lr

08019154 <Argus_Eval_Apply>:
 8019154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019158:	f8c2 31cc 	str.w	r3, [r2, #460]	@ 0x1cc
 801915c:	690b      	ldr	r3, [r1, #16]
 801915e:	4617      	mov	r7, r2
 8019160:	f3c3 3e81 	ubfx	lr, r3, #14, #2
 8019164:	f102 050c 	add.w	r5, r2, #12
 8019168:	0f9a      	lsrs	r2, r3, #30
 801916a:	ea4e 0282 	orr.w	r2, lr, r2, lsl #2
 801916e:	ea4f 2e13 	mov.w	lr, r3, lsr #8
 8019172:	f00e 0e30 	and.w	lr, lr, #48	@ 0x30
 8019176:	ea4e 0e02 	orr.w	lr, lr, r2
 801917a:	0d9a      	lsrs	r2, r3, #22
 801917c:	f002 02c0 	and.w	r2, r2, #192	@ 0xc0
 8019180:	ea42 0e0e 	orr.w	lr, r2, lr
 8019184:	089a      	lsrs	r2, r3, #2
 8019186:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 801918a:	ea42 020e 	orr.w	r2, r2, lr
 801918e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8019192:	f40e 6e40 	and.w	lr, lr, #3072	@ 0xc00
 8019196:	ea4e 0202 	orr.w	r2, lr, r2
 801919a:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 801919e:	f40e 5e40 	and.w	lr, lr, #12288	@ 0x3000
 80191a2:	ea4e 0e02 	orr.w	lr, lr, r2
 80191a6:	0a9a      	lsrs	r2, r3, #10
 80191a8:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 80191ac:	ea42 0e0e 	orr.w	lr, r2, lr
 80191b0:	029a      	lsls	r2, r3, #10
 80191b2:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
 80191b6:	ea42 020e 	orr.w	r2, r2, lr
 80191ba:	ea4f 1e13 	mov.w	lr, r3, lsr #4
 80191be:	f40e 2e40 	and.w	lr, lr, #786432	@ 0xc0000
 80191c2:	ea4e 0202 	orr.w	r2, lr, r2
 80191c6:	ea4f 4e03 	mov.w	lr, r3, lsl #16
 80191ca:	f40e 1e40 	and.w	lr, lr, #3145728	@ 0x300000
 80191ce:	ea4e 0e02 	orr.w	lr, lr, r2
 80191d2:	009a      	lsls	r2, r3, #2
 80191d4:	f402 0240 	and.w	r2, r2, #12582912	@ 0xc00000
 80191d8:	ea42 0e0e 	orr.w	lr, r2, lr
 80191dc:	059a      	lsls	r2, r3, #22
 80191de:	f002 7240 	and.w	r2, r2, #50331648	@ 0x3000000
 80191e2:	ea42 020e 	orr.w	r2, r2, lr
 80191e6:	ea4f 2e03 	mov.w	lr, r3, lsl #8
 80191ea:	f00e 6e40 	and.w	lr, lr, #201326592	@ 0xc000000
 80191ee:	ea4e 0202 	orr.w	r2, lr, r2
 80191f2:	ea4f 7e03 	mov.w	lr, r3, lsl #28
 80191f6:	f00e 5e40 	and.w	lr, lr, #805306368	@ 0x30000000
 80191fa:	ea4e 0e02 	orr.w	lr, lr, r2
 80191fe:	0c1b      	lsrs	r3, r3, #16
 8019200:	ea4e 7e83 	orr.w	lr, lr, r3, lsl #30
 8019204:	680b      	ldr	r3, [r1, #0]
 8019206:	f101 0c0c 	add.w	ip, r1, #12
 801920a:	4604      	mov	r4, r0
 801920c:	4688      	mov	r8, r1
 801920e:	f101 0904 	add.w	r9, r1, #4
 8019212:	ea03 7ae3 	and.w	sl, r3, r3, asr #31
 8019216:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801921a:	462e      	mov	r6, r5
 801921c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801921e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8019222:	69bb      	ldr	r3, [r7, #24]
 8019224:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8019228:	f413 6200 	ands.w	r2, r3, #2048	@ 0x800
 801922c:	e899 0003 	ldmia.w	r9, {r0, r1}
 8019230:	bf18      	it	ne
 8019232:	f8d4 3354 	ldrne.w	r3, [r4, #852]	@ 0x354
 8019236:	f107 0b04 	add.w	fp, r7, #4
 801923a:	e88b 0003 	stmia.w	fp, {r0, r1}
 801923e:	bf18      	it	ne
 8019240:	f8b3 20a0 	ldrhne.w	r2, [r3, #160]	@ 0xa0
 8019244:	f8c7 e010 	str.w	lr, [r7, #16]
 8019248:	b08f      	sub	sp, #60	@ 0x3c
 801924a:	f507 70de 	add.w	r0, r7, #444	@ 0x1bc
 801924e:	f208 11b5 	addw	r1, r8, #437	@ 0x1b5
 8019252:	f8c7 a000 	str.w	sl, [r7]
 8019256:	f7ff ff0f 	bl	8019078 <Argus_Eval_ApplyAuxEvaluation>
 801925a:	4601      	mov	r1, r0
 801925c:	69ba      	ldr	r2, [r7, #24]
 801925e:	f8d4 036c 	ldr.w	r0, [r4, #876]	@ 0x36c
 8019262:	f00b fa85 	bl	8024770 <Argus_Cal_ApplyAuxCalibration>
 8019266:	f8d4 036c 	ldr.w	r0, [r4, #876]	@ 0x36c
 801926a:	f00b fa33 	bl	80246d4 <Argus_Cal_ApplyTempCalibration>
 801926e:	69b9      	ldr	r1, [r7, #24]
 8019270:	f411 6180 	ands.w	r1, r1, #1024	@ 0x400
 8019274:	d14a      	bne.n	801930c <Argus_Eval_Apply+0x1b8>
 8019276:	f8d7 01cc 	ldr.w	r0, [r7, #460]	@ 0x1cc
 801927a:	b120      	cbz	r0, 8019286 <Argus_Eval_Apply+0x132>
 801927c:	f44f 7204 	mov.w	r2, #528	@ 0x210
 8019280:	3004      	adds	r0, #4
 8019282:	f010 fa66 	bl	8029752 <memset>
 8019286:	f8d4 0368 	ldr.w	r0, [r4, #872]	@ 0x368
 801928a:	4639      	mov	r1, r7
 801928c:	f003 fbbc 	bl	801ca08 <Argus_Dca_Evaluate>
 8019290:	6838      	ldr	r0, [r7, #0]
 8019292:	1d81      	adds	r1, r0, #6
 8019294:	d019      	beq.n	80192ca <Argus_Eval_Apply+0x176>
 8019296:	f110 0f6b 	cmn.w	r0, #107	@ 0x6b
 801929a:	d016      	beq.n	80192ca <Argus_Eval_Apply+0x176>
 801929c:	f100 0372 	add.w	r3, r0, #114	@ 0x72
 80192a0:	2b01      	cmp	r3, #1
 80192a2:	d912      	bls.n	80192ca <Argus_Eval_Apply+0x176>
 80192a4:	2800      	cmp	r0, #0
 80192a6:	db05      	blt.n	80192b4 <Argus_Eval_Apply+0x160>
 80192a8:	d02b      	beq.n	8019302 <Argus_Eval_Apply+0x1ae>
 80192aa:	2332      	movs	r3, #50	@ 0x32
 80192ac:	286c      	cmp	r0, #108	@ 0x6c
 80192ae:	f887 31ba 	strb.w	r3, [r7, #442]	@ 0x1ba
 80192b2:	d102      	bne.n	80192ba <Argus_Eval_Apply+0x166>
 80192b4:	2301      	movs	r3, #1
 80192b6:	f887 31ba 	strb.w	r3, [r7, #442]	@ 0x1ba
 80192ba:	69ba      	ldr	r2, [r7, #24]
 80192bc:	06d2      	lsls	r2, r2, #27
 80192be:	d501      	bpl.n	80192c4 <Argus_Eval_Apply+0x170>
 80192c0:	f887 31ba 	strb.w	r3, [r7, #442]	@ 0x1ba
 80192c4:	b00f      	add	sp, #60	@ 0x3c
 80192c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80192ce:	f507 71da 	add.w	r1, r7, #436	@ 0x1b4
 80192d2:	7a1a      	ldrb	r2, [r3, #8]
 80192d4:	330c      	adds	r3, #12
 80192d6:	f062 021b 	orn	r2, r2, #27
 80192da:	428b      	cmp	r3, r1
 80192dc:	f803 2c04 	strb.w	r2, [r3, #-4]
 80192e0:	d1f7      	bne.n	80192d2 <Argus_Eval_Apply+0x17e>
 80192e2:	f504 71c6 	add.w	r1, r4, #396	@ 0x18c
 80192e6:	7a22      	ldrb	r2, [r4, #8]
 80192e8:	f894 319c 	ldrb.w	r3, [r4, #412]	@ 0x19c
 80192ec:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80192f0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80192f4:	7222      	strb	r2, [r4, #8]
 80192f6:	f884 319c 	strb.w	r3, [r4, #412]	@ 0x19c
 80192fa:	340c      	adds	r4, #12
 80192fc:	428c      	cmp	r4, r1
 80192fe:	d1f2      	bne.n	80192e6 <Argus_Eval_Apply+0x192>
 8019300:	e7d0      	b.n	80192a4 <Argus_Eval_Apply+0x150>
 8019302:	2364      	movs	r3, #100	@ 0x64
 8019304:	f887 31ba 	strb.w	r3, [r7, #442]	@ 0x1ba
 8019308:	2332      	movs	r3, #50	@ 0x32
 801930a:	e7d6      	b.n	80192ba <Argus_Eval_Apply+0x166>
 801930c:	4642      	mov	r2, r8
 801930e:	4639      	mov	r1, r7
 8019310:	4620      	mov	r0, r4
 8019312:	f7fe fa31 	bl	8017778 <ApplyPhaseEvaluation>
 8019316:	f8d4 c354 	ldr.w	ip, [r4, #852]	@ 0x354
 801931a:	f89c 30d4 	ldrb.w	r3, [ip, #212]	@ 0xd4
 801931e:	2b02      	cmp	r3, #2
 8019320:	f000 81f0 	beq.w	8019704 <Argus_Eval_Apply+0x5b0>
 8019324:	2300      	movs	r3, #0
 8019326:	f8c4 3330 	str.w	r3, [r4, #816]	@ 0x330
 801932a:	69bb      	ldr	r3, [r7, #24]
 801932c:	f8b7 801c 	ldrh.w	r8, [r7, #28]
 8019330:	f003 0202 	and.w	r2, r3, #2
 8019334:	9201      	str	r2, [sp, #4]
 8019336:	f107 0a28 	add.w	sl, r7, #40	@ 0x28
 801933a:	f8b4 2190 	ldrh.w	r2, [r4, #400]	@ 0x190
 801933e:	f8a4 2324 	strh.w	r2, [r4, #804]	@ 0x324
 8019342:	f8d4 218c 	ldr.w	r2, [r4, #396]	@ 0x18c
 8019346:	f8c4 318c 	str.w	r3, [r4, #396]	@ 0x18c
 801934a:	f013 0304 	ands.w	r3, r3, #4
 801934e:	f8a4 8190 	strh.w	r8, [r4, #400]	@ 0x190
 8019352:	f8c4 2320 	str.w	r2, [r4, #800]	@ 0x320
 8019356:	930c      	str	r3, [sp, #48]	@ 0x30
 8019358:	f040 8156 	bne.w	8019608 <Argus_Eval_Apply+0x4b4>
 801935c:	9b01      	ldr	r3, [sp, #4]
 801935e:	f8d4 2328 	ldr.w	r2, [r4, #808]	@ 0x328
 8019362:	2b00      	cmp	r3, #0
 8019364:	f000 81c6 	beq.w	80196f4 <Argus_Eval_Apply+0x5a0>
 8019368:	f8d4 332c 	ldr.w	r3, [r4, #812]	@ 0x32c
 801936c:	4610      	mov	r0, r2
 801936e:	461e      	mov	r6, r3
 8019370:	1b81      	subs	r1, r0, r6
 8019372:	469e      	mov	lr, r3
 8019374:	4688      	mov	r8, r1
 8019376:	2900      	cmp	r1, #0
 8019378:	f000 81ee 	beq.w	8019758 <Argus_Eval_Apply+0x604>
 801937c:	2b00      	cmp	r3, #0
 801937e:	bfb8      	it	lt
 8019380:	425b      	neglt	r3, r3
 8019382:	2900      	cmp	r1, #0
 8019384:	f2c0 82c1 	blt.w	801990a <Argus_Eval_Apply+0x7b6>
 8019388:	4299      	cmp	r1, r3
 801938a:	f080 838d 	bcs.w	8019aa8 <Argus_Eval_Apply+0x954>
 801938e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8019392:	0049      	lsls	r1, r1, #1
 8019394:	4299      	cmp	r1, r3
 8019396:	ea4f 0040 	mov.w	r0, r0, lsl #1
 801939a:	d3fa      	bcc.n	8019392 <Argus_Eval_Apply+0x23e>
 801939c:	2800      	cmp	r0, #0
 801939e:	f040 82bb 	bne.w	8019918 <Argus_Eval_Apply+0x7c4>
 80193a2:	ea9e 0f08 	teq	lr, r8
 80193a6:	4bc8      	ldr	r3, [pc, #800]	@ (80196c8 <Argus_Eval_Apply+0x574>)
 80193a8:	bf58      	it	pl
 80193aa:	f44f 0300 	movpl.w	r3, #8388608	@ 0x800000
 80193ae:	9301      	str	r3, [sp, #4]
 80193b0:	f89c 30a9 	ldrb.w	r3, [ip, #169]	@ 0xa9
 80193b4:	f89c 10aa 	ldrb.w	r1, [ip, #170]	@ 0xaa
 80193b8:	f89c 00ac 	ldrb.w	r0, [ip, #172]	@ 0xac
 80193bc:	019b      	lsls	r3, r3, #6
 80193be:	9308      	str	r3, [sp, #32]
 80193c0:	f89c 30ad 	ldrb.w	r3, [ip, #173]	@ 0xad
 80193c4:	03db      	lsls	r3, r3, #15
 80193c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80193c8:	0a13      	lsrs	r3, r2, #8
 80193ca:	fb01 f303 	mul.w	r3, r1, r3
 80193ce:	03c0      	lsls	r0, r0, #15
 80193d0:	9305      	str	r3, [sp, #20]
 80193d2:	f8b4 3350 	ldrh.w	r3, [r4, #848]	@ 0x350
 80193d6:	900a      	str	r0, [sp, #40]	@ 0x28
 80193d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80193da:	4629      	mov	r1, r5
 80193dc:	f8d4 036c 	ldr.w	r0, [r4, #876]	@ 0x36c
 80193e0:	f00b f828 	bl	8024434 <Argus_Cal_ApplyFrequencyTemperatureCompensation>
 80193e4:	f8b7 21c0 	ldrh.w	r2, [r7, #448]	@ 0x1c0
 80193e8:	69b9      	ldr	r1, [r7, #24]
 80193ea:	4605      	mov	r5, r0
 80193ec:	f8d4 036c 	ldr.w	r0, [r4, #876]	@ 0x36c
 80193f0:	f00b f8cc 	bl	802458c <Argus_Cal_GetGlobalRangeOffset>
 80193f4:	69ba      	ldr	r2, [r7, #24]
 80193f6:	970d      	str	r7, [sp, #52]	@ 0x34
 80193f8:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 80193fc:	f002 0208 	and.w	r2, r2, #8
 8019400:	9204      	str	r2, [sp, #16]
 8019402:	ea4f 32d5 	mov.w	r2, r5, lsr #15
 8019406:	9202      	str	r2, [sp, #8]
 8019408:	bf0c      	ite	eq
 801940a:	2228      	moveq	r2, #40	@ 0x28
 801940c:	222a      	movne	r2, #42	@ 0x2a
 801940e:	9207      	str	r2, [sp, #28]
 8019410:	006a      	lsls	r2, r5, #1
 8019412:	9206      	str	r2, [sp, #24]
 8019414:	f3c5 020e 	ubfx	r2, r5, #0, #15
 8019418:	f10a 030c 	add.w	r3, sl, #12
 801941c:	f04f 0e00 	mov.w	lr, #0
 8019420:	9203      	str	r2, [sp, #12]
 8019422:	f104 0c0c 	add.w	ip, r4, #12
 8019426:	4682      	mov	sl, r0
 8019428:	46a3      	mov	fp, r4
 801942a:	e020      	b.n	801946e <Argus_Eval_Apply+0x31a>
 801942c:	f042 0220 	orr.w	r2, r2, #32
 8019430:	f803 2c04 	strb.w	r2, [r3, #-4]
 8019434:	f81c 2c04 	ldrb.w	r2, [ip, #-4]
 8019438:	f042 0220 	orr.w	r2, r2, #32
 801943c:	f80c 2c04 	strb.w	r2, [ip, #-4]
 8019440:	f89c 2190 	ldrb.w	r2, [ip, #400]	@ 0x190
 8019444:	f012 0f20 	tst.w	r2, #32
 8019448:	9a04      	ldr	r2, [sp, #16]
 801944a:	f000 8118 	beq.w	801967e <Argus_Eval_Apply+0x52a>
 801944e:	2a00      	cmp	r2, #0
 8019450:	bf08      	it	eq
 8019452:	f06f 4500 	mvneq.w	r5, #2147483648	@ 0x80000000
 8019456:	f843 5c0c 	str.w	r5, [r3, #-12]
 801945a:	f10e 0e01 	add.w	lr, lr, #1
 801945e:	f1be 0f21 	cmp.w	lr, #33	@ 0x21
 8019462:	f103 030c 	add.w	r3, r3, #12
 8019466:	f10c 0c0c 	add.w	ip, ip, #12
 801946a:	f000 8116 	beq.w	801969a <Argus_Eval_Apply+0x546>
 801946e:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8019472:	07d4      	lsls	r4, r2, #31
 8019474:	f100 80e3 	bmi.w	801963e <Argus_Eval_Apply+0x4ea>
 8019478:	f833 1c08 	ldrh.w	r1, [r3, #-8]
 801947c:	9803      	ldr	r0, [sp, #12]
 801947e:	9c02      	ldr	r4, [sp, #8]
 8019480:	fb01 f000 	mul.w	r0, r1, r0
 8019484:	0bc5      	lsrs	r5, r0, #15
 8019486:	fb01 5504 	mla	r5, r1, r4, r5
 801948a:	f3c0 3080 	ubfx	r0, r0, #14, #1
 801948e:	4405      	add	r5, r0
 8019490:	9801      	ldr	r0, [sp, #4]
 8019492:	eba5 050a 	sub.w	r5, r5, sl
 8019496:	2800      	cmp	r0, #0
 8019498:	f000 80c0 	beq.w	801961c <Argus_Eval_Apply+0x4c8>
 801949c:	f1be 0f20 	cmp.w	lr, #32
 80194a0:	f000 80f9 	beq.w	8019696 <Argus_Eval_Apply+0x542>
 80194a4:	f91c 0c03 	ldrsb.w	r0, [ip, #-3]
 80194a8:	f803 0c03 	strb.w	r0, [r3, #-3]
 80194ac:	f81c 4c04 	ldrb.w	r4, [ip, #-4]
 80194b0:	4314      	orrs	r4, r2
 80194b2:	f014 0f2a 	tst.w	r4, #42	@ 0x2a
 80194b6:	f040 80d9 	bne.w	801966c <Argus_Eval_Apply+0x518>
 80194ba:	f89c 6190 	ldrb.w	r6, [ip, #400]	@ 0x190
 80194be:	9c07      	ldr	r4, [sp, #28]
 80194c0:	4034      	ands	r4, r6
 80194c2:	f040 80d3 	bne.w	801966c <Argus_Eval_Apply+0x518>
 80194c6:	f016 0f2a 	tst.w	r6, #42	@ 0x2a
 80194ca:	f000 80c2 	beq.w	8019652 <Argus_Eval_Apply+0x4fe>
 80194ce:	9e08      	ldr	r6, [sp, #32]
 80194d0:	2e00      	cmp	r6, #0
 80194d2:	f040 80fb 	bne.w	80196cc <Argus_Eval_Apply+0x578>
 80194d6:	4634      	mov	r4, r6
 80194d8:	f83c 6c08 	ldrh.w	r6, [ip, #-8]
 80194dc:	4434      	add	r4, r6
 80194de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80194e0:	b2a4      	uxth	r4, r4
 80194e2:	2e00      	cmp	r6, #0
 80194e4:	f000 80fc 	beq.w	80196e0 <Argus_Eval_Apply+0x58c>
 80194e8:	1b0c      	subs	r4, r1, r4
 80194ea:	b2a4      	uxth	r4, r4
 80194ec:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80194ee:	4434      	add	r4, r6
 80194f0:	b2a4      	uxth	r4, r4
 80194f2:	1ba4      	subs	r4, r4, r6
 80194f4:	9e01      	ldr	r6, [sp, #4]
 80194f6:	fb06 f404 	mul.w	r4, r6, r4
 80194fa:	ebb4 2101 	subs.w	r1, r4, r1, lsl #8
 80194fe:	f100 80f2 	bmi.w	80196e6 <Argus_Eval_Apply+0x592>
 8019502:	f3c1 54c0 	ubfx	r4, r1, #23, #1
 8019506:	eb04 6411 	add.w	r4, r4, r1, lsr #24
 801950a:	9f01      	ldr	r7, [sp, #4]
 801950c:	b264      	sxtb	r4, r4
 801950e:	1c66      	adds	r6, r4, #1
 8019510:	ebb7 2f06 	cmp.w	r7, r6, lsl #8
 8019514:	e9dd 760a 	ldrd	r7, r6, [sp, #40]	@ 0x28
 8019518:	bf88      	it	hi
 801951a:	463e      	movhi	r6, r7
 801951c:	4627      	mov	r7, r4
 801951e:	b13e      	cbz	r6, 8019530 <Argus_Eval_Apply+0x3dc>
 8019520:	eba1 6104 	sub.w	r1, r1, r4, lsl #24
 8019524:	2900      	cmp	r1, #0
 8019526:	bfb8      	it	lt
 8019528:	4249      	neglt	r1, r1
 801952a:	428e      	cmp	r6, r1
 801952c:	f0c0 809e 	bcc.w	801966c <Argus_Eval_Apply+0x518>
 8019530:	f803 7c03 	strb.w	r7, [r3, #-3]
 8019534:	9906      	ldr	r1, [sp, #24]
 8019536:	fb04 5401 	mla	r4, r4, r1, r5
 801953a:	f012 0f6a 	tst.w	r2, #106	@ 0x6a
 801953e:	f040 8086 	bne.w	801964e <Argus_Eval_Apply+0x4fa>
 8019542:	9905      	ldr	r1, [sp, #20]
 8019544:	2900      	cmp	r1, #0
 8019546:	f000 8082 	beq.w	801964e <Argus_Eval_Apply+0x4fa>
 801954a:	f89c 1190 	ldrb.w	r1, [ip, #400]	@ 0x190
 801954e:	f85c 5c0c 	ldr.w	r5, [ip, #-12]
 8019552:	9805      	ldr	r0, [sp, #20]
 8019554:	f011 0f2a 	tst.w	r1, #42	@ 0x2a
 8019558:	bf03      	ittte	eq
 801955a:	f8dc 1188 	ldreq.w	r1, [ip, #392]	@ 0x188
 801955e:	1909      	addeq	r1, r1, r4
 8019560:	1049      	asreq	r1, r1, #1
 8019562:	4621      	movne	r1, r4
 8019564:	1a6d      	subs	r5, r5, r1
 8019566:	ea85 71e5 	eor.w	r1, r5, r5, asr #31
 801956a:	eba1 71e5 	sub.w	r1, r1, r5, asr #31
 801956e:	4281      	cmp	r1, r0
 8019570:	bf83      	ittte	hi
 8019572:	f042 0240 	orrhi.w	r2, r2, #64	@ 0x40
 8019576:	f803 2c04 	strbhi.w	r2, [r3, #-4]
 801957a:	4625      	movhi	r5, r4
 801957c:	eb04 0565 	addls.w	r5, r4, r5, asr #1
 8019580:	f833 2c06 	ldrh.w	r2, [r3, #-6]
 8019584:	f83c 0c06 	ldrh.w	r0, [ip, #-6]
 8019588:	f8db 8354 	ldr.w	r8, [fp, #852]	@ 0x354
 801958c:	4282      	cmp	r2, r0
 801958e:	f898 10ab 	ldrb.w	r1, [r8, #171]	@ 0xab
 8019592:	eba2 0900 	sub.w	r9, r2, r0
 8019596:	bf38      	it	cc
 8019598:	4602      	movcc	r2, r0
 801959a:	fb01 f202 	mul.w	r2, r1, r2
 801959e:	ea89 71e9 	eor.w	r1, r9, r9, asr #31
 80195a2:	eba1 71e9 	sub.w	r1, r1, r9, asr #31
 80195a6:	f1ac 060c 	sub.w	r6, ip, #12
 80195aa:	ebb1 2f12 	cmp.w	r1, r2, lsr #8
 80195ae:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80195b2:	f50c 77c4 	add.w	r7, ip, #392	@ 0x188
 80195b6:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 80195ba:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80195be:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80195c2:	f833 2c06 	ldrh.w	r2, [r3, #-6]
 80195c6:	f84c 4c0c 	str.w	r4, [ip, #-12]
 80195ca:	bf94      	ite	ls
 80195cc:	f3c9 094f 	ubfxls	r9, r9, #1, #16
 80195d0:	f04f 0900 	movhi.w	r9, #0
 80195d4:	eba2 0909 	sub.w	r9, r2, r9
 80195d8:	fa1f f989 	uxth.w	r9, r9
 80195dc:	f823 9c06 	strh.w	r9, [r3, #-6]
 80195e0:	f8b8 200e 	ldrh.w	r2, [r8, #14]
 80195e4:	454a      	cmp	r2, r9
 80195e6:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80195ea:	f63f af1f 	bhi.w	801942c <Argus_Eval_Apply+0x2d8>
 80195ee:	0650      	lsls	r0, r2, #25
 80195f0:	d542      	bpl.n	8019678 <Argus_Eval_Apply+0x524>
 80195f2:	9904      	ldr	r1, [sp, #16]
 80195f4:	b909      	cbnz	r1, 80195fa <Argus_Eval_Apply+0x4a6>
 80195f6:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 80195fa:	f843 5c0c 	str.w	r5, [r3, #-12]
 80195fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8019602:	f803 2c04 	strb.w	r2, [r3, #-4]
 8019606:	e728      	b.n	801945a <Argus_Eval_Apply+0x306>
 8019608:	9b01      	ldr	r3, [sp, #4]
 801960a:	f8d4 232c 	ldr.w	r2, [r4, #812]	@ 0x32c
 801960e:	2b00      	cmp	r3, #0
 8019610:	d070      	beq.n	80196f4 <Argus_Eval_Apply+0x5a0>
 8019612:	f8d4 3328 	ldr.w	r3, [r4, #808]	@ 0x328
 8019616:	4616      	mov	r6, r2
 8019618:	4618      	mov	r0, r3
 801961a:	e6a9      	b.n	8019370 <Argus_Eval_Apply+0x21c>
 801961c:	f1ac 040c 	sub.w	r4, ip, #12
 8019620:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8019624:	f50c 76c4 	add.w	r6, ip, #392	@ 0x188
 8019628:	f8db 8354 	ldr.w	r8, [fp, #852]	@ 0x354
 801962c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8019630:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8019634:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8019638:	f833 9c06 	ldrh.w	r9, [r3, #-6]
 801963c:	e7d0      	b.n	80195e0 <Argus_Eval_Apply+0x48c>
 801963e:	f04f 0200 	mov.w	r2, #0
 8019642:	f823 2c08 	strh.w	r2, [r3, #-8]
 8019646:	2200      	movs	r2, #0
 8019648:	f843 2c0c 	str.w	r2, [r3, #-12]
 801964c:	e705      	b.n	801945a <Argus_Eval_Apply+0x306>
 801964e:	4625      	mov	r5, r4
 8019650:	e796      	b.n	8019580 <Argus_Eval_Apply+0x42c>
 8019652:	f8bc 418c 	ldrh.w	r4, [ip, #396]	@ 0x18c
 8019656:	9e08      	ldr	r6, [sp, #32]
 8019658:	1b0c      	subs	r4, r1, r4
 801965a:	b224      	sxth	r4, r4
 801965c:	b3b6      	cbz	r6, 80196cc <Argus_Eval_Apply+0x578>
 801965e:	4637      	mov	r7, r6
 8019660:	ea84 76e4 	eor.w	r6, r4, r4, asr #31
 8019664:	eba6 76e4 	sub.w	r6, r6, r4, asr #31
 8019668:	42b7      	cmp	r7, r6
 801966a:	d22f      	bcs.n	80196cc <Argus_Eval_Apply+0x578>
 801966c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8019670:	f803 2c04 	strb.w	r2, [r3, #-4]
 8019674:	4604      	mov	r4, r0
 8019676:	e75d      	b.n	8019534 <Argus_Eval_Apply+0x3e0>
 8019678:	f843 5c0c 	str.w	r5, [r3, #-12]
 801967c:	e6ed      	b.n	801945a <Argus_Eval_Apply+0x306>
 801967e:	b90a      	cbnz	r2, 8019684 <Argus_Eval_Apply+0x530>
 8019680:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8019684:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8019688:	f843 5c0c 	str.w	r5, [r3, #-12]
 801968c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8019690:	f803 2c04 	strb.w	r2, [r3, #-4]
 8019694:	e6e1      	b.n	801945a <Argus_Eval_Apply+0x306>
 8019696:	462c      	mov	r4, r5
 8019698:	e74f      	b.n	801953a <Argus_Eval_Apply+0x3e6>
 801969a:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801969c:	f8db 036c 	ldr.w	r0, [fp, #876]	@ 0x36c
 80196a0:	4639      	mov	r1, r7
 80196a2:	f50b 7556 	add.w	r5, fp, #856	@ 0x358
 80196a6:	f00a ffdd 	bl	8024664 <Argus_Cal_ApplyPixelOffsetCompensation>
 80196aa:	4628      	mov	r0, r5
 80196ac:	4639      	mov	r1, r7
 80196ae:	f001 f9eb 	bl	801aa88 <Argus_Pba_ApplyPreFilter>
 80196b2:	f8db 0368 	ldr.w	r0, [fp, #872]	@ 0x368
 80196b6:	4639      	mov	r1, r7
 80196b8:	f003 f9a6 	bl	801ca08 <Argus_Dca_Evaluate>
 80196bc:	4639      	mov	r1, r7
 80196be:	4628      	mov	r0, r5
 80196c0:	465c      	mov	r4, fp
 80196c2:	f000 fbd1 	bl	8019e68 <Argus_Pba_Apply>
 80196c6:	e5e3      	b.n	8019290 <Argus_Eval_Apply+0x13c>
 80196c8:	ff800000 	.word	0xff800000
 80196cc:	f83c 6c08 	ldrh.w	r6, [ip, #-8]
 80196d0:	f3c4 044f 	ubfx	r4, r4, #1, #16
 80196d4:	4434      	add	r4, r6
 80196d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80196d8:	b2a4      	uxth	r4, r4
 80196da:	2e00      	cmp	r6, #0
 80196dc:	f47f af04 	bne.w	80194e8 <Argus_Eval_Apply+0x394>
 80196e0:	1a64      	subs	r4, r4, r1
 80196e2:	b2a4      	uxth	r4, r4
 80196e4:	e702      	b.n	80194ec <Argus_Eval_Apply+0x398>
 80196e6:	424e      	negs	r6, r1
 80196e8:	f3c6 54c0 	ubfx	r4, r6, #23, #1
 80196ec:	eb04 6416 	add.w	r4, r4, r6, lsr #24
 80196f0:	4264      	negs	r4, r4
 80196f2:	e70a      	b.n	801950a <Argus_Eval_Apply+0x3b6>
 80196f4:	2300      	movs	r3, #0
 80196f6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80196fa:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 80196fe:	9305      	str	r3, [sp, #20]
 8019700:	9301      	str	r3, [sp, #4]
 8019702:	e66a      	b.n	80193da <Argus_Eval_Apply+0x286>
 8019704:	69bb      	ldr	r3, [r7, #24]
 8019706:	f8b7 801c 	ldrh.w	r8, [r7, #28]
 801970a:	f44f 72ca 	mov.w	r2, #404	@ 0x194
 801970e:	f3c3 0140 	ubfx	r1, r3, #1, #1
 8019712:	fb02 4101 	mla	r1, r2, r1, r4
 8019716:	f242 0003 	movw	r0, #8195	@ 0x2003
 801971a:	f8d1 218c 	ldr.w	r2, [r1, #396]	@ 0x18c
 801971e:	405a      	eors	r2, r3
 8019720:	f003 0602 	and.w	r6, r3, #2
 8019724:	4002      	ands	r2, r0
 8019726:	9601      	str	r6, [sp, #4]
 8019728:	d103      	bne.n	8019732 <Argus_Eval_Apply+0x5de>
 801972a:	f8b1 e190 	ldrh.w	lr, [r1, #400]	@ 0x190
 801972e:	45f0      	cmp	r8, lr
 8019730:	d01e      	beq.n	8019770 <Argus_Eval_Apply+0x61c>
 8019732:	f8d4 2330 	ldr.w	r2, [r4, #816]	@ 0x330
 8019736:	f107 0a28 	add.w	sl, r7, #40	@ 0x28
 801973a:	2a00      	cmp	r2, #0
 801973c:	f2c0 80e3 	blt.w	8019906 <Argus_Eval_Apply+0x7b2>
 8019740:	f3c2 21c0 	ubfx	r1, r2, #11, #1
 8019744:	eb01 3212 	add.w	r2, r1, r2, lsr #12
 8019748:	f64f 71fd 	movw	r1, #65533	@ 0xfffd
 801974c:	428a      	cmp	r2, r1
 801974e:	d80c      	bhi.n	801976a <Argus_Eval_Apply+0x616>
 8019750:	b292      	uxth	r2, r2
 8019752:	f8a7 21c8 	strh.w	r2, [r7, #456]	@ 0x1c8
 8019756:	e5f0      	b.n	801933a <Argus_Eval_Apply+0x1e6>
 8019758:	2b00      	cmp	r3, #0
 801975a:	4b8d      	ldr	r3, [pc, #564]	@ (8019990 <Argus_Eval_Apply+0x83c>)
 801975c:	bfa8      	it	ge
 801975e:	f44f 0300 	movge.w	r3, #8388608	@ 0x800000
 8019762:	9301      	str	r3, [sp, #4]
 8019764:	e624      	b.n	80193b0 <Argus_Eval_Apply+0x25c>
 8019766:	f8c4 2330 	str.w	r2, [r4, #816]	@ 0x330
 801976a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801976e:	e7f0      	b.n	8019752 <Argus_Eval_Apply+0x5fe>
 8019770:	f107 0a28 	add.w	sl, r7, #40	@ 0x28
 8019774:	ea4f 2688 	mov.w	r6, r8, lsl #10
 8019778:	f1b8 0f00 	cmp.w	r8, #0
 801977c:	f000 81c9 	beq.w	8019b12 <Argus_Eval_Apply+0x9be>
 8019780:	2eff      	cmp	r6, #255	@ 0xff
 8019782:	dc00      	bgt.n	8019786 <Argus_Eval_Apply+0x632>
 8019784:	e7fe      	b.n	8019784 <Argus_Eval_Apply+0x630>
 8019786:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 801978a:	f240 8224 	bls.w	8019bd6 <Argus_Eval_Apply+0xa82>
 801978e:	4610      	mov	r0, r2
 8019790:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8019794:	4296      	cmp	r6, r2
 8019796:	bf9c      	itt	ls
 8019798:	1b92      	subls	r2, r2, r6
 801979a:	f440 4080 	orrls.w	r0, r0, #16384	@ 0x4000
 801979e:	0052      	lsls	r2, r2, #1
 80197a0:	d063      	beq.n	801986a <Argus_Eval_Apply+0x716>
 80197a2:	42b2      	cmp	r2, r6
 80197a4:	bf24      	itt	cs
 80197a6:	1b92      	subcs	r2, r2, r6
 80197a8:	f440 5000 	orrcs.w	r0, r0, #8192	@ 0x2000
 80197ac:	0052      	lsls	r2, r2, #1
 80197ae:	d05c      	beq.n	801986a <Argus_Eval_Apply+0x716>
 80197b0:	42b2      	cmp	r2, r6
 80197b2:	bf24      	itt	cs
 80197b4:	1b92      	subcs	r2, r2, r6
 80197b6:	f440 5080 	orrcs.w	r0, r0, #4096	@ 0x1000
 80197ba:	0052      	lsls	r2, r2, #1
 80197bc:	d055      	beq.n	801986a <Argus_Eval_Apply+0x716>
 80197be:	4296      	cmp	r6, r2
 80197c0:	bf9c      	itt	ls
 80197c2:	1b92      	subls	r2, r2, r6
 80197c4:	f440 6000 	orrls.w	r0, r0, #2048	@ 0x800
 80197c8:	0052      	lsls	r2, r2, #1
 80197ca:	d04e      	beq.n	801986a <Argus_Eval_Apply+0x716>
 80197cc:	4296      	cmp	r6, r2
 80197ce:	bf9c      	itt	ls
 80197d0:	1b92      	subls	r2, r2, r6
 80197d2:	f440 6080 	orrls.w	r0, r0, #1024	@ 0x400
 80197d6:	0052      	lsls	r2, r2, #1
 80197d8:	d047      	beq.n	801986a <Argus_Eval_Apply+0x716>
 80197da:	4296      	cmp	r6, r2
 80197dc:	bf9c      	itt	ls
 80197de:	1b92      	subls	r2, r2, r6
 80197e0:	f440 7000 	orrls.w	r0, r0, #512	@ 0x200
 80197e4:	0052      	lsls	r2, r2, #1
 80197e6:	d040      	beq.n	801986a <Argus_Eval_Apply+0x716>
 80197e8:	42b2      	cmp	r2, r6
 80197ea:	bf24      	itt	cs
 80197ec:	1b92      	subcs	r2, r2, r6
 80197ee:	f440 7080 	orrcs.w	r0, r0, #256	@ 0x100
 80197f2:	0052      	lsls	r2, r2, #1
 80197f4:	d039      	beq.n	801986a <Argus_Eval_Apply+0x716>
 80197f6:	4296      	cmp	r6, r2
 80197f8:	bf9c      	itt	ls
 80197fa:	1b92      	subls	r2, r2, r6
 80197fc:	f040 0080 	orrls.w	r0, r0, #128	@ 0x80
 8019800:	0052      	lsls	r2, r2, #1
 8019802:	d032      	beq.n	801986a <Argus_Eval_Apply+0x716>
 8019804:	42b2      	cmp	r2, r6
 8019806:	bf24      	itt	cs
 8019808:	1b92      	subcs	r2, r2, r6
 801980a:	f040 0040 	orrcs.w	r0, r0, #64	@ 0x40
 801980e:	0052      	lsls	r2, r2, #1
 8019810:	d02b      	beq.n	801986a <Argus_Eval_Apply+0x716>
 8019812:	42b2      	cmp	r2, r6
 8019814:	bf24      	itt	cs
 8019816:	1b92      	subcs	r2, r2, r6
 8019818:	f040 0020 	orrcs.w	r0, r0, #32
 801981c:	0052      	lsls	r2, r2, #1
 801981e:	d024      	beq.n	801986a <Argus_Eval_Apply+0x716>
 8019820:	4296      	cmp	r6, r2
 8019822:	bf9c      	itt	ls
 8019824:	1b92      	subls	r2, r2, r6
 8019826:	f040 0010 	orrls.w	r0, r0, #16
 801982a:	0052      	lsls	r2, r2, #1
 801982c:	d01d      	beq.n	801986a <Argus_Eval_Apply+0x716>
 801982e:	4296      	cmp	r6, r2
 8019830:	bf9c      	itt	ls
 8019832:	1b92      	subls	r2, r2, r6
 8019834:	f040 0008 	orrls.w	r0, r0, #8
 8019838:	0052      	lsls	r2, r2, #1
 801983a:	d016      	beq.n	801986a <Argus_Eval_Apply+0x716>
 801983c:	4296      	cmp	r6, r2
 801983e:	bf9c      	itt	ls
 8019840:	1b92      	subls	r2, r2, r6
 8019842:	f040 0004 	orrls.w	r0, r0, #4
 8019846:	0052      	lsls	r2, r2, #1
 8019848:	d00f      	beq.n	801986a <Argus_Eval_Apply+0x716>
 801984a:	4296      	cmp	r6, r2
 801984c:	bf9c      	itt	ls
 801984e:	1b92      	subls	r2, r2, r6
 8019850:	f040 0002 	orrls.w	r0, r0, #2
 8019854:	0052      	lsls	r2, r2, #1
 8019856:	d008      	beq.n	801986a <Argus_Eval_Apply+0x716>
 8019858:	4296      	cmp	r6, r2
 801985a:	bf9c      	itt	ls
 801985c:	1b92      	subls	r2, r2, r6
 801985e:	f040 0001 	orrls.w	r0, r0, #1
 8019862:	ebb6 0f42 	cmp.w	r6, r2, lsl #1
 8019866:	d800      	bhi.n	801986a <Argus_Eval_Apply+0x716>
 8019868:	3001      	adds	r0, #1
 801986a:	ea4f 268e 	mov.w	r6, lr, lsl #10
 801986e:	f1be 0f00 	cmp.w	lr, #0
 8019872:	f040 808a 	bne.w	801998a <Argus_Eval_Apply+0x836>
 8019876:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 801987a:	f8dc 60dc 	ldr.w	r6, [ip, #220]	@ 0xdc
 801987e:	9603      	str	r6, [sp, #12]
 8019880:	2200      	movs	r2, #0
 8019882:	e9cd c304 	strd	ip, r3, [sp, #16]
 8019886:	9202      	str	r2, [sp, #8]
 8019888:	9b03      	ldr	r3, [sp, #12]
 801988a:	9406      	str	r4, [sp, #24]
 801988c:	4693      	mov	fp, r2
 801988e:	4656      	mov	r6, sl
 8019890:	f8cd a00c 	str.w	sl, [sp, #12]
 8019894:	fa23 fc02 	lsr.w	ip, r3, r2
 8019898:	f01c 0f01 	tst.w	ip, #1
 801989c:	f102 0201 	add.w	r2, r2, #1
 80198a0:	d01b      	beq.n	80198da <Argus_Eval_Apply+0x786>
 80198a2:	f896 c008 	ldrb.w	ip, [r6, #8]
 80198a6:	f01c 0f03 	tst.w	ip, #3
 80198aa:	d116      	bne.n	80198da <Argus_Eval_Apply+0x786>
 80198ac:	f891 c008 	ldrb.w	ip, [r1, #8]
 80198b0:	f01c 0f03 	tst.w	ip, #3
 80198b4:	d111      	bne.n	80198da <Argus_Eval_Apply+0x786>
 80198b6:	f8b6 c00a 	ldrh.w	ip, [r6, #10]
 80198ba:	f8b1 900a 	ldrh.w	r9, [r1, #10]
 80198be:	9c02      	ldr	r4, [sp, #8]
 80198c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80198c4:	fb0e f909 	mul.w	r9, lr, r9
 80198c8:	ebbc 0a09 	subs.w	sl, ip, r9
 80198cc:	f104 0401 	add.w	r4, r4, #1
 80198d0:	bf48      	it	mi
 80198d2:	eba9 0a0c 	submi.w	sl, r9, ip
 80198d6:	9402      	str	r4, [sp, #8]
 80198d8:	44d3      	add	fp, sl
 80198da:	2a20      	cmp	r2, #32
 80198dc:	f106 060c 	add.w	r6, r6, #12
 80198e0:	f101 010c 	add.w	r1, r1, #12
 80198e4:	d1d6      	bne.n	8019894 <Argus_Eval_Apply+0x740>
 80198e6:	9a02      	ldr	r2, [sp, #8]
 80198e8:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80198ec:	9c06      	ldr	r4, [sp, #24]
 80198ee:	e9dd c304 	ldrd	ip, r3, [sp, #16]
 80198f2:	2a00      	cmp	r2, #0
 80198f4:	f040 80db 	bne.w	8019aae <Argus_Eval_Apply+0x95a>
 80198f8:	f8d4 2330 	ldr.w	r2, [r4, #816]	@ 0x330
 80198fc:	e71d      	b.n	801973a <Argus_Eval_Apply+0x5e6>
 80198fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8019902:	f8c4 2330 	str.w	r2, [r4, #816]	@ 0x330
 8019906:	2200      	movs	r2, #0
 8019908:	e723      	b.n	8019752 <Argus_Eval_Apply+0x5fe>
 801990a:	1a31      	subs	r1, r6, r0
 801990c:	4299      	cmp	r1, r3
 801990e:	bf28      	it	cs
 8019910:	f44f 3080 	movcs.w	r0, #65536	@ 0x10000
 8019914:	f4ff ad3b 	bcc.w	801938e <Argus_Eval_Apply+0x23a>
 8019918:	2900      	cmp	r1, #0
 801991a:	db26      	blt.n	801996a <Argus_Eval_Apply+0x816>
 801991c:	461e      	mov	r6, r3
 801991e:	b153      	cbz	r3, 8019936 <Argus_Eval_Apply+0x7e2>
 8019920:	2600      	movs	r6, #0
 8019922:	e000      	b.n	8019926 <Argus_Eval_Apply+0x7d2>
 8019924:	b13b      	cbz	r3, 8019936 <Argus_Eval_Apply+0x7e2>
 8019926:	428b      	cmp	r3, r1
 8019928:	bf24      	itt	cs
 801992a:	1a5b      	subcs	r3, r3, r1
 801992c:	4306      	orrcs	r6, r0
 801992e:	0840      	lsrs	r0, r0, #1
 8019930:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019934:	d1f6      	bne.n	8019924 <Argus_Eval_Apply+0x7d0>
 8019936:	4299      	cmp	r1, r3
 8019938:	d800      	bhi.n	801993c <Argus_Eval_Apply+0x7e8>
 801993a:	3601      	adds	r6, #1
 801993c:	ea9e 0f08 	teq	lr, r8
 8019940:	d408      	bmi.n	8019954 <Argus_Eval_Apply+0x800>
 8019942:	2e00      	cmp	r6, #0
 8019944:	f2c0 80aa 	blt.w	8019a9c <Argus_Eval_Apply+0x948>
 8019948:	f3c6 13c0 	ubfx	r3, r6, #7, #1
 801994c:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8019950:	9301      	str	r3, [sp, #4]
 8019952:	e52d      	b.n	80193b0 <Argus_Eval_Apply+0x25c>
 8019954:	4273      	negs	r3, r6
 8019956:	2b00      	cmp	r3, #0
 8019958:	f280 8120 	bge.w	8019b9c <Argus_Eval_Apply+0xa48>
 801995c:	f3c6 13c0 	ubfx	r3, r6, #7, #1
 8019960:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8019964:	4273      	negs	r3, r6
 8019966:	9301      	str	r3, [sp, #4]
 8019968:	e522      	b.n	80193b0 <Argus_Eval_Apply+0x25c>
 801996a:	428b      	cmp	r3, r1
 801996c:	f080 809a 	bcs.w	8019aa4 <Argus_Eval_Apply+0x950>
 8019970:	0840      	lsrs	r0, r0, #1
 8019972:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8019976:	f000 80cf 	beq.w	8019b18 <Argus_Eval_Apply+0x9c4>
 801997a:	2b00      	cmp	r3, #0
 801997c:	d1d0      	bne.n	8019920 <Argus_Eval_Apply+0x7cc>
 801997e:	ea9e 0f08 	teq	lr, r8
 8019982:	f100 810b 	bmi.w	8019b9c <Argus_Eval_Apply+0xa48>
 8019986:	461e      	mov	r6, r3
 8019988:	e7de      	b.n	8019948 <Argus_Eval_Apply+0x7f4>
 801998a:	2eff      	cmp	r6, #255	@ 0xff
 801998c:	dc02      	bgt.n	8019994 <Argus_Eval_Apply+0x840>
 801998e:	e7fe      	b.n	801998e <Argus_Eval_Apply+0x83a>
 8019990:	ff800000 	.word	0xff800000
 8019994:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8019998:	f240 8125 	bls.w	8019be6 <Argus_Eval_Apply+0xa92>
 801999c:	f04f 0e00 	mov.w	lr, #0
 80199a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80199a4:	4296      	cmp	r6, r2
 80199a6:	bf9c      	itt	ls
 80199a8:	1b92      	subls	r2, r2, r6
 80199aa:	f44e 4e80 	orrls.w	lr, lr, #16384	@ 0x4000
 80199ae:	0052      	lsls	r2, r2, #1
 80199b0:	f43f af63 	beq.w	801987a <Argus_Eval_Apply+0x726>
 80199b4:	4296      	cmp	r6, r2
 80199b6:	bf9c      	itt	ls
 80199b8:	1b92      	subls	r2, r2, r6
 80199ba:	f44e 5e00 	orrls.w	lr, lr, #8192	@ 0x2000
 80199be:	0052      	lsls	r2, r2, #1
 80199c0:	f43f af5b 	beq.w	801987a <Argus_Eval_Apply+0x726>
 80199c4:	4296      	cmp	r6, r2
 80199c6:	bf9c      	itt	ls
 80199c8:	1b92      	subls	r2, r2, r6
 80199ca:	f44e 5e80 	orrls.w	lr, lr, #4096	@ 0x1000
 80199ce:	0052      	lsls	r2, r2, #1
 80199d0:	f43f af53 	beq.w	801987a <Argus_Eval_Apply+0x726>
 80199d4:	4296      	cmp	r6, r2
 80199d6:	bf9c      	itt	ls
 80199d8:	1b92      	subls	r2, r2, r6
 80199da:	f44e 6e00 	orrls.w	lr, lr, #2048	@ 0x800
 80199de:	0052      	lsls	r2, r2, #1
 80199e0:	f43f af4b 	beq.w	801987a <Argus_Eval_Apply+0x726>
 80199e4:	4296      	cmp	r6, r2
 80199e6:	bf9c      	itt	ls
 80199e8:	1b92      	subls	r2, r2, r6
 80199ea:	f44e 6e80 	orrls.w	lr, lr, #1024	@ 0x400
 80199ee:	0052      	lsls	r2, r2, #1
 80199f0:	f43f af43 	beq.w	801987a <Argus_Eval_Apply+0x726>
 80199f4:	4296      	cmp	r6, r2
 80199f6:	bf9c      	itt	ls
 80199f8:	1b92      	subls	r2, r2, r6
 80199fa:	f44e 7e00 	orrls.w	lr, lr, #512	@ 0x200
 80199fe:	0052      	lsls	r2, r2, #1
 8019a00:	f43f af3b 	beq.w	801987a <Argus_Eval_Apply+0x726>
 8019a04:	4296      	cmp	r6, r2
 8019a06:	bf9c      	itt	ls
 8019a08:	1b92      	subls	r2, r2, r6
 8019a0a:	f44e 7e80 	orrls.w	lr, lr, #256	@ 0x100
 8019a0e:	0052      	lsls	r2, r2, #1
 8019a10:	f43f af33 	beq.w	801987a <Argus_Eval_Apply+0x726>
 8019a14:	4296      	cmp	r6, r2
 8019a16:	bf9c      	itt	ls
 8019a18:	1b92      	subls	r2, r2, r6
 8019a1a:	f04e 0e80 	orrls.w	lr, lr, #128	@ 0x80
 8019a1e:	0052      	lsls	r2, r2, #1
 8019a20:	f43f af2b 	beq.w	801987a <Argus_Eval_Apply+0x726>
 8019a24:	4296      	cmp	r6, r2
 8019a26:	bf9c      	itt	ls
 8019a28:	1b92      	subls	r2, r2, r6
 8019a2a:	f04e 0e40 	orrls.w	lr, lr, #64	@ 0x40
 8019a2e:	0052      	lsls	r2, r2, #1
 8019a30:	f43f af23 	beq.w	801987a <Argus_Eval_Apply+0x726>
 8019a34:	4296      	cmp	r6, r2
 8019a36:	bf9c      	itt	ls
 8019a38:	1b92      	subls	r2, r2, r6
 8019a3a:	f04e 0e20 	orrls.w	lr, lr, #32
 8019a3e:	0052      	lsls	r2, r2, #1
 8019a40:	f43f af1b 	beq.w	801987a <Argus_Eval_Apply+0x726>
 8019a44:	4296      	cmp	r6, r2
 8019a46:	bf9c      	itt	ls
 8019a48:	1b92      	subls	r2, r2, r6
 8019a4a:	f04e 0e10 	orrls.w	lr, lr, #16
 8019a4e:	0052      	lsls	r2, r2, #1
 8019a50:	f43f af13 	beq.w	801987a <Argus_Eval_Apply+0x726>
 8019a54:	4296      	cmp	r6, r2
 8019a56:	bf9c      	itt	ls
 8019a58:	1b92      	subls	r2, r2, r6
 8019a5a:	f04e 0e08 	orrls.w	lr, lr, #8
 8019a5e:	0052      	lsls	r2, r2, #1
 8019a60:	f43f af0b 	beq.w	801987a <Argus_Eval_Apply+0x726>
 8019a64:	4296      	cmp	r6, r2
 8019a66:	bf9c      	itt	ls
 8019a68:	1b92      	subls	r2, r2, r6
 8019a6a:	f04e 0e04 	orrls.w	lr, lr, #4
 8019a6e:	0052      	lsls	r2, r2, #1
 8019a70:	f43f af03 	beq.w	801987a <Argus_Eval_Apply+0x726>
 8019a74:	4296      	cmp	r6, r2
 8019a76:	bf9c      	itt	ls
 8019a78:	1b92      	subls	r2, r2, r6
 8019a7a:	f04e 0e02 	orrls.w	lr, lr, #2
 8019a7e:	0052      	lsls	r2, r2, #1
 8019a80:	f43f aefb 	beq.w	801987a <Argus_Eval_Apply+0x726>
 8019a84:	4296      	cmp	r6, r2
 8019a86:	bf9c      	itt	ls
 8019a88:	1b92      	subls	r2, r2, r6
 8019a8a:	f04e 0e01 	orrls.w	lr, lr, #1
 8019a8e:	ebb6 0f42 	cmp.w	r6, r2, lsl #1
 8019a92:	f63f aef2 	bhi.w	801987a <Argus_Eval_Apply+0x726>
 8019a96:	f10e 0e01 	add.w	lr, lr, #1
 8019a9a:	e6ee      	b.n	801987a <Argus_Eval_Apply+0x726>
 8019a9c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8019aa0:	9301      	str	r3, [sp, #4]
 8019aa2:	e485      	b.n	80193b0 <Argus_Eval_Apply+0x25c>
 8019aa4:	4606      	mov	r6, r0
 8019aa6:	e749      	b.n	801993c <Argus_Eval_Apply+0x7e8>
 8019aa8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8019aac:	e736      	b.n	801991c <Argus_Eval_Apply+0x7c8>
 8019aae:	0211      	lsls	r1, r2, #8
 8019ab0:	465e      	mov	r6, fp
 8019ab2:	468e      	mov	lr, r1
 8019ab4:	b391      	cbz	r1, 8019b1c <Argus_Eval_Apply+0x9c8>
 8019ab6:	f1bb 0f00 	cmp.w	fp, #0
 8019aba:	bfb8      	it	lt
 8019abc:	f1cb 0b00 	rsblt	fp, fp, #0
 8019ac0:	2900      	cmp	r1, #0
 8019ac2:	db44      	blt.n	8019b4e <Argus_Eval_Apply+0x9fa>
 8019ac4:	4559      	cmp	r1, fp
 8019ac6:	d271      	bcs.n	8019bac <Argus_Eval_Apply+0xa58>
 8019ac8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8019acc:	0049      	lsls	r1, r1, #1
 8019ace:	4559      	cmp	r1, fp
 8019ad0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8019ad4:	d3fa      	bcc.n	8019acc <Argus_Eval_Apply+0x978>
 8019ad6:	2a00      	cmp	r2, #0
 8019ad8:	d13f      	bne.n	8019b5a <Argus_Eval_Apply+0xa06>
 8019ada:	ea96 0f0e 	teq	r6, lr
 8019ade:	f8d4 1330 	ldr.w	r1, [r4, #816]	@ 0x330
 8019ae2:	d420      	bmi.n	8019b26 <Argus_Eval_Apply+0x9d2>
 8019ae4:	2900      	cmp	r1, #0
 8019ae6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8019aea:	f6ff ae3c 	blt.w	8019766 <Argus_Eval_Apply+0x612>
 8019aee:	f89c 00d5 	ldrb.w	r0, [ip, #213]	@ 0xd5
 8019af2:	b158      	cbz	r0, 8019b0c <Argus_Eval_Apply+0x9b8>
 8019af4:	4291      	cmp	r1, r2
 8019af6:	da1f      	bge.n	8019b38 <Argus_Eval_Apply+0x9e4>
 8019af8:	1a52      	subs	r2, r2, r1
 8019afa:	fb82 2000 	smull	r2, r0, r2, r0
 8019afe:	0a16      	lsrs	r6, r2, #8
 8019b00:	ea46 6600 	orr.w	r6, r6, r0, lsl #24
 8019b04:	4431      	add	r1, r6
 8019b06:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8019b0a:	440a      	add	r2, r1
 8019b0c:	f8c4 2330 	str.w	r2, [r4, #816]	@ 0x330
 8019b10:	e613      	b.n	801973a <Argus_Eval_Apply+0x5e6>
 8019b12:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8019b16:	e6a8      	b.n	801986a <Argus_Eval_Apply+0x716>
 8019b18:	4606      	mov	r6, r0
 8019b1a:	e70c      	b.n	8019936 <Argus_Eval_Apply+0x7e2>
 8019b1c:	f1bb 0f00 	cmp.w	fp, #0
 8019b20:	f8d4 1330 	ldr.w	r1, [r4, #816]	@ 0x330
 8019b24:	dade      	bge.n	8019ae4 <Argus_Eval_Apply+0x990>
 8019b26:	2900      	cmp	r1, #0
 8019b28:	f6ff aee9 	blt.w	80198fe <Argus_Eval_Apply+0x7aa>
 8019b2c:	f89c 00d5 	ldrb.w	r0, [ip, #213]	@ 0xd5
 8019b30:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8019b34:	2800      	cmp	r0, #0
 8019b36:	d0e9      	beq.n	8019b0c <Argus_Eval_Apply+0x9b8>
 8019b38:	1a8a      	subs	r2, r1, r2
 8019b3a:	fb82 2000 	smull	r2, r0, r2, r0
 8019b3e:	0a16      	lsrs	r6, r2, #8
 8019b40:	ea46 6600 	orr.w	r6, r6, r0, lsl #24
 8019b44:	1b89      	subs	r1, r1, r6
 8019b46:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8019b4a:	1a8a      	subs	r2, r1, r2
 8019b4c:	e7de      	b.n	8019b0c <Argus_Eval_Apply+0x9b8>
 8019b4e:	4249      	negs	r1, r1
 8019b50:	4559      	cmp	r1, fp
 8019b52:	bf28      	it	cs
 8019b54:	f44f 3280 	movcs.w	r2, #65536	@ 0x10000
 8019b58:	d3b6      	bcc.n	8019ac8 <Argus_Eval_Apply+0x974>
 8019b5a:	2900      	cmp	r1, #0
 8019b5c:	db2c      	blt.n	8019bb8 <Argus_Eval_Apply+0xa64>
 8019b5e:	f1bb 0f00 	cmp.w	fp, #0
 8019b62:	d021      	beq.n	8019ba8 <Argus_Eval_Apply+0xa54>
 8019b64:	4610      	mov	r0, r2
 8019b66:	2200      	movs	r2, #0
 8019b68:	e002      	b.n	8019b70 <Argus_Eval_Apply+0xa1c>
 8019b6a:	f1bb 0f00 	cmp.w	fp, #0
 8019b6e:	d008      	beq.n	8019b82 <Argus_Eval_Apply+0xa2e>
 8019b70:	458b      	cmp	fp, r1
 8019b72:	bf24      	itt	cs
 8019b74:	ebab 0b01 	subcs.w	fp, fp, r1
 8019b78:	4302      	orrcs	r2, r0
 8019b7a:	0840      	lsrs	r0, r0, #1
 8019b7c:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8019b80:	d1f3      	bne.n	8019b6a <Argus_Eval_Apply+0xa16>
 8019b82:	4559      	cmp	r1, fp
 8019b84:	bf98      	it	ls
 8019b86:	3201      	addls	r2, #1
 8019b88:	ea96 0f0e 	teq	r6, lr
 8019b8c:	d421      	bmi.n	8019bd2 <Argus_Eval_Apply+0xa7e>
 8019b8e:	2a00      	cmp	r2, #0
 8019b90:	db0f      	blt.n	8019bb2 <Argus_Eval_Apply+0xa5e>
 8019b92:	f8d4 1330 	ldr.w	r1, [r4, #816]	@ 0x330
 8019b96:	2900      	cmp	r1, #0
 8019b98:	daa9      	bge.n	8019aee <Argus_Eval_Apply+0x99a>
 8019b9a:	e7b7      	b.n	8019b0c <Argus_Eval_Apply+0x9b8>
 8019b9c:	f3c3 11c0 	ubfx	r1, r3, #7, #1
 8019ba0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8019ba4:	9301      	str	r3, [sp, #4]
 8019ba6:	e403      	b.n	80193b0 <Argus_Eval_Apply+0x25c>
 8019ba8:	465a      	mov	r2, fp
 8019baa:	e7ea      	b.n	8019b82 <Argus_Eval_Apply+0xa2e>
 8019bac:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8019bb0:	e7d5      	b.n	8019b5e <Argus_Eval_Apply+0xa0a>
 8019bb2:	f8d4 1330 	ldr.w	r1, [r4, #816]	@ 0x330
 8019bb6:	e795      	b.n	8019ae4 <Argus_Eval_Apply+0x990>
 8019bb8:	4559      	cmp	r1, fp
 8019bba:	d9e5      	bls.n	8019b88 <Argus_Eval_Apply+0xa34>
 8019bbc:	0852      	lsrs	r2, r2, #1
 8019bbe:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8019bc2:	d0de      	beq.n	8019b82 <Argus_Eval_Apply+0xa2e>
 8019bc4:	f1bb 0f00 	cmp.w	fp, #0
 8019bc8:	d1cc      	bne.n	8019b64 <Argus_Eval_Apply+0xa10>
 8019bca:	ea96 0f0e 	teq	r6, lr
 8019bce:	465a      	mov	r2, fp
 8019bd0:	d5df      	bpl.n	8019b92 <Argus_Eval_Apply+0xa3e>
 8019bd2:	4252      	negs	r2, r2
 8019bd4:	e7dd      	b.n	8019b92 <Argus_Eval_Apply+0xa3e>
 8019bd6:	f5c6 7200 	rsb	r2, r6, #512	@ 0x200
 8019bda:	0052      	lsls	r2, r2, #1
 8019bdc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8019be0:	f47f add8 	bne.w	8019794 <Argus_Eval_Apply+0x640>
 8019be4:	e641      	b.n	801986a <Argus_Eval_Apply+0x716>
 8019be6:	f5c6 7200 	rsb	r2, r6, #512	@ 0x200
 8019bea:	0052      	lsls	r2, r2, #1
 8019bec:	f44f 4e00 	mov.w	lr, #32768	@ 0x8000
 8019bf0:	f47f aed8 	bne.w	80199a4 <Argus_Eval_Apply+0x850>
 8019bf4:	e641      	b.n	801987a <Argus_Eval_Apply+0x726>
 8019bf6:	bf00      	nop

08019bf8 <Argus_Eval_ResetShotNoiseAmplitude>:
 8019bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8019bfc:	f8c0 3330 	str.w	r3, [r0, #816]	@ 0x330
 8019c00:	4770      	bx	lr
 8019c02:	bf00      	nop

08019c04 <Argus_Eval_GetPixelSample>:
 8019c04:	291f      	cmp	r1, #31
 8019c06:	f200 80bd 	bhi.w	8019d84 <Argus_Eval_GetPixelSample+0x180>
 8019c0a:	2a03      	cmp	r2, #3
 8019c0c:	f200 80ba 	bhi.w	8019d84 <Argus_Eval_GetPixelSample+0x180>
 8019c10:	6903      	ldr	r3, [r0, #16]
 8019c12:	b510      	push	{r4, lr}
 8019c14:	f3c3 3c81 	ubfx	ip, r3, #14, #2
 8019c18:	4686      	mov	lr, r0
 8019c1a:	0f98      	lsrs	r0, r3, #30
 8019c1c:	ea4c 0080 	orr.w	r0, ip, r0, lsl #2
 8019c20:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 8019c24:	f00c 0c30 	and.w	ip, ip, #48	@ 0x30
 8019c28:	ea4c 0c00 	orr.w	ip, ip, r0
 8019c2c:	0d98      	lsrs	r0, r3, #22
 8019c2e:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
 8019c32:	ea40 0c0c 	orr.w	ip, r0, ip
 8019c36:	0898      	lsrs	r0, r3, #2
 8019c38:	f400 7040 	and.w	r0, r0, #768	@ 0x300
 8019c3c:	ea40 000c 	orr.w	r0, r0, ip
 8019c40:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8019c44:	f40c 6c40 	and.w	ip, ip, #3072	@ 0xc00
 8019c48:	ea4c 0000 	orr.w	r0, ip, r0
 8019c4c:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 8019c50:	f40c 5c40 	and.w	ip, ip, #12288	@ 0x3000
 8019c54:	ea4c 0c00 	orr.w	ip, ip, r0
 8019c58:	0a98      	lsrs	r0, r3, #10
 8019c5a:	f400 4040 	and.w	r0, r0, #49152	@ 0xc000
 8019c5e:	ea40 0c0c 	orr.w	ip, r0, ip
 8019c62:	0298      	lsls	r0, r3, #10
 8019c64:	f400 3040 	and.w	r0, r0, #196608	@ 0x30000
 8019c68:	ea40 000c 	orr.w	r0, r0, ip
 8019c6c:	ea4f 1c13 	mov.w	ip, r3, lsr #4
 8019c70:	f40c 2c40 	and.w	ip, ip, #786432	@ 0xc0000
 8019c74:	ea4c 0000 	orr.w	r0, ip, r0
 8019c78:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8019c7c:	f40c 1c40 	and.w	ip, ip, #3145728	@ 0x300000
 8019c80:	ea4c 0c00 	orr.w	ip, ip, r0
 8019c84:	0098      	lsls	r0, r3, #2
 8019c86:	f400 0040 	and.w	r0, r0, #12582912	@ 0xc00000
 8019c8a:	ea40 0c0c 	orr.w	ip, r0, ip
 8019c8e:	0598      	lsls	r0, r3, #22
 8019c90:	f000 7040 	and.w	r0, r0, #50331648	@ 0x3000000
 8019c94:	ea40 000c 	orr.w	r0, r0, ip
 8019c98:	ea4f 2c03 	mov.w	ip, r3, lsl #8
 8019c9c:	f00c 6c40 	and.w	ip, ip, #201326592	@ 0xc000000
 8019ca0:	ea4c 0000 	orr.w	r0, ip, r0
 8019ca4:	ea4f 7c03 	mov.w	ip, r3, lsl #28
 8019ca8:	f00c 5c40 	and.w	ip, ip, #805306368	@ 0x30000000
 8019cac:	ea4c 0c00 	orr.w	ip, ip, r0
 8019cb0:	0c18      	lsrs	r0, r3, #16
 8019cb2:	ea4c 7c80 	orr.w	ip, ip, r0, lsl #30
 8019cb6:	fa2c fc01 	lsr.w	ip, ip, r1
 8019cba:	f01c 0001 	ands.w	r0, ip, #1
 8019cbe:	d060      	beq.n	8019d82 <Argus_Eval_GetPixelSample+0x17e>
 8019cc0:	ea6f 0051 	mvn.w	r0, r1, lsr #1
 8019cc4:	00cc      	lsls	r4, r1, #3
 8019cc6:	f004 0410 	and.w	r4, r4, #16
 8019cca:	f000 000e 	and.w	r0, r0, #14
 8019cce:	4320      	orrs	r0, r4
 8019cd0:	f001 0101 	and.w	r1, r1, #1
 8019cd4:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8019cd8:	4301      	orrs	r1, r0
 8019cda:	f04f 30ff 	mov.w	r0, #4294967295
 8019cde:	fa00 f101 	lsl.w	r1, r0, r1
 8019ce2:	f00c 3c55 	and.w	ip, ip, #1431655765	@ 0x55555555
 8019ce6:	eba3 0c0c 	sub.w	ip, r3, ip
 8019cea:	ea23 0301 	bic.w	r3, r3, r1
 8019cee:	0859      	lsrs	r1, r3, #1
 8019cf0:	f001 3155 	and.w	r1, r1, #1431655765	@ 0x55555555
 8019cf4:	1a5b      	subs	r3, r3, r1
 8019cf6:	f003 3133 	and.w	r1, r3, #858993459	@ 0x33333333
 8019cfa:	089b      	lsrs	r3, r3, #2
 8019cfc:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8019d00:	f8de 0014 	ldr.w	r0, [lr, #20]
 8019d04:	440b      	add	r3, r1
 8019d06:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 8019d0a:	f003 310f 	and.w	r1, r3, #252645135	@ 0xf0f0f0f
 8019d0e:	0843      	lsrs	r3, r0, #1
 8019d10:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8019d14:	ea4f 049c 	mov.w	r4, ip, lsr #2
 8019d18:	1ac0      	subs	r0, r0, r3
 8019d1a:	f00c 3333 	and.w	r3, ip, #858993459	@ 0x33333333
 8019d1e:	f004 3c33 	and.w	ip, r4, #858993459	@ 0x33333333
 8019d22:	4463      	add	r3, ip
 8019d24:	ea4f 0c90 	mov.w	ip, r0, lsr #2
 8019d28:	f00c 3c33 	and.w	ip, ip, #858993459	@ 0x33333333
 8019d2c:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 8019d30:	4484      	add	ip, r0
 8019d32:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 8019d36:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8019d3a:	eb0c 1c1c 	add.w	ip, ip, ip, lsr #4
 8019d3e:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 8019d42:	f00c 3c0f 	and.w	ip, ip, #252645135	@ 0xf0f0f0f
 8019d46:	eb01 2101 	add.w	r1, r1, r1, lsl #8
 8019d4a:	eb03 4303 	add.w	r3, r3, r3, lsl #16
 8019d4e:	eb0c 2c0c 	add.w	ip, ip, ip, lsl #8
 8019d52:	eb01 4101 	add.w	r1, r1, r1, lsl #16
 8019d56:	0e1b      	lsrs	r3, r3, #24
 8019d58:	eb0c 4c0c 	add.w	ip, ip, ip, lsl #16
 8019d5c:	0e09      	lsrs	r1, r1, #24
 8019d5e:	eb03 631c 	add.w	r3, r3, ip, lsr #24
 8019d62:	fb02 1303 	mla	r3, r2, r3, r1
 8019d66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019d6a:	f10e 0e29 	add.w	lr, lr, #41	@ 0x29
 8019d6e:	eb0e 0203 	add.w	r2, lr, r3
 8019d72:	f81e 1003 	ldrb.w	r1, [lr, r3]
 8019d76:	7850      	ldrb	r0, [r2, #1]
 8019d78:	7893      	ldrb	r3, [r2, #2]
 8019d7a:	0200      	lsls	r0, r0, #8
 8019d7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8019d80:	4318      	orrs	r0, r3
 8019d82:	bd10      	pop	{r4, pc}
 8019d84:	2000      	movs	r0, #0
 8019d86:	4770      	bx	lr

08019d88 <Argus_Pba_Init>:
 8019d88:	2300      	movs	r3, #0
 8019d8a:	6003      	str	r3, [r0, #0]
 8019d8c:	6043      	str	r3, [r0, #4]
 8019d8e:	6083      	str	r3, [r0, #8]
 8019d90:	60c1      	str	r1, [r0, #12]
 8019d92:	4770      	bx	lr

08019d94 <Argus_Pba_CheckCfg>:
 8019d94:	b508      	push	{r3, lr}
 8019d96:	7802      	ldrb	r2, [r0, #0]
 8019d98:	4603      	mov	r3, r0
 8019d9a:	f012 0001 	ands.w	r0, r2, #1
 8019d9e:	d01d      	beq.n	8019ddc <Argus_Pba_CheckCfg+0x48>
 8019da0:	f032 0071 	bics.w	r0, r2, #113	@ 0x71
 8019da4:	d11b      	bne.n	8019dde <Argus_Pba_CheckCfg+0x4a>
 8019da6:	7859      	ldrb	r1, [r3, #1]
 8019da8:	1e4a      	subs	r2, r1, #1
 8019daa:	2a01      	cmp	r2, #1
 8019dac:	d823      	bhi.n	8019df6 <Argus_Pba_CheckCfg+0x62>
 8019dae:	78d9      	ldrb	r1, [r3, #3]
 8019db0:	789a      	ldrb	r2, [r3, #2]
 8019db2:	4291      	cmp	r1, r2
 8019db4:	d82b      	bhi.n	8019e0e <Argus_Pba_CheckCfg+0x7a>
 8019db6:	88d9      	ldrh	r1, [r3, #6]
 8019db8:	889a      	ldrh	r2, [r3, #4]
 8019dba:	4291      	cmp	r1, r2
 8019dbc:	d821      	bhi.n	8019e02 <Argus_Pba_CheckCfg+0x6e>
 8019dbe:	8959      	ldrh	r1, [r3, #10]
 8019dc0:	891a      	ldrh	r2, [r3, #8]
 8019dc2:	4291      	cmp	r1, r2
 8019dc4:	d835      	bhi.n	8019e32 <Argus_Pba_CheckCfg+0x9e>
 8019dc6:	7b5a      	ldrb	r2, [r3, #13]
 8019dc8:	7b19      	ldrb	r1, [r3, #12]
 8019dca:	428a      	cmp	r2, r1
 8019dcc:	d325      	bcc.n	8019e1a <Argus_Pba_CheckCfg+0x86>
 8019dce:	8a1a      	ldrh	r2, [r3, #16]
 8019dd0:	89d9      	ldrh	r1, [r3, #14]
 8019dd2:	428a      	cmp	r2, r1
 8019dd4:	d327      	bcc.n	8019e26 <Argus_Pba_CheckCfg+0x92>
 8019dd6:	699b      	ldr	r3, [r3, #24]
 8019dd8:	3301      	adds	r3, #1
 8019dda:	d006      	beq.n	8019dea <Argus_Pba_CheckCfg+0x56>
 8019ddc:	bd08      	pop	{r3, pc}
 8019dde:	4818      	ldr	r0, [pc, #96]	@ (8019e40 <Argus_Pba_CheckCfg+0xac>)
 8019de0:	f7f9 f8d8 	bl	8012f94 <print>
 8019de4:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019de8:	bd08      	pop	{r3, pc}
 8019dea:	4816      	ldr	r0, [pc, #88]	@ (8019e44 <Argus_Pba_CheckCfg+0xb0>)
 8019dec:	f7f9 f8d2 	bl	8012f94 <print>
 8019df0:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019df4:	bd08      	pop	{r3, pc}
 8019df6:	4814      	ldr	r0, [pc, #80]	@ (8019e48 <Argus_Pba_CheckCfg+0xb4>)
 8019df8:	f7f9 f8cc 	bl	8012f94 <print>
 8019dfc:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019e00:	bd08      	pop	{r3, pc}
 8019e02:	4812      	ldr	r0, [pc, #72]	@ (8019e4c <Argus_Pba_CheckCfg+0xb8>)
 8019e04:	f7f9 f8c6 	bl	8012f94 <print>
 8019e08:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019e0c:	bd08      	pop	{r3, pc}
 8019e0e:	4810      	ldr	r0, [pc, #64]	@ (8019e50 <Argus_Pba_CheckCfg+0xbc>)
 8019e10:	f7f9 f8c0 	bl	8012f94 <print>
 8019e14:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019e18:	bd08      	pop	{r3, pc}
 8019e1a:	480e      	ldr	r0, [pc, #56]	@ (8019e54 <Argus_Pba_CheckCfg+0xc0>)
 8019e1c:	f7f9 f8ba 	bl	8012f94 <print>
 8019e20:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019e24:	bd08      	pop	{r3, pc}
 8019e26:	480c      	ldr	r0, [pc, #48]	@ (8019e58 <Argus_Pba_CheckCfg+0xc4>)
 8019e28:	f7f9 f8b4 	bl	8012f94 <print>
 8019e2c:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019e30:	bd08      	pop	{r3, pc}
 8019e32:	480a      	ldr	r0, [pc, #40]	@ (8019e5c <Argus_Pba_CheckCfg+0xc8>)
 8019e34:	f7f9 f8ae 	bl	8012f94 <print>
 8019e38:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8019e3c:	bd08      	pop	{r3, pc}
 8019e3e:	bf00      	nop
 8019e40:	0802d640 	.word	0x0802d640
 8019e44:	0802d864 	.word	0x0802d864
 8019e48:	0802d674 	.word	0x0802d674
 8019e4c:	0802d700 	.word	0x0802d700
 8019e50:	0802d6ac 	.word	0x0802d6ac
 8019e54:	0802d7b4 	.word	0x0802d7b4
 8019e58:	0802d80c 	.word	0x0802d80c
 8019e5c:	0802d754 	.word	0x0802d754

08019e60 <Argus_Pba_UpdateConfig>:
 8019e60:	f8b2 329d 	ldrh.w	r3, [r2, #669]	@ 0x29d
 8019e64:	8143      	strh	r3, [r0, #10]
 8019e66:	4770      	bx	lr

08019e68 <Argus_Pba_Apply>:
 8019e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e6c:	68c7      	ldr	r7, [r0, #12]
 8019e6e:	783b      	ldrb	r3, [r7, #0]
 8019e70:	b09b      	sub	sp, #108	@ 0x6c
 8019e72:	f013 0301 	ands.w	r3, r3, #1
 8019e76:	4683      	mov	fp, r0
 8019e78:	9301      	str	r3, [sp, #4]
 8019e7a:	f000 8201 	beq.w	801a280 <Argus_Pba_Apply+0x418>
 8019e7e:	680b      	ldr	r3, [r1, #0]
 8019e80:	9308      	str	r3, [sp, #32]
 8019e82:	2b00      	cmp	r3, #0
 8019e84:	f2c0 8204 	blt.w	801a290 <Argus_Pba_Apply+0x428>
 8019e88:	698b      	ldr	r3, [r1, #24]
 8019e8a:	7a82      	ldrb	r2, [r0, #10]
 8019e8c:	9203      	str	r2, [sp, #12]
 8019e8e:	f101 0e34 	add.w	lr, r1, #52	@ 0x34
 8019e92:	7ac2      	ldrb	r2, [r0, #11]
 8019e94:	697e      	ldr	r6, [r7, #20]
 8019e96:	9306      	str	r3, [sp, #24]
 8019e98:	9202      	str	r2, [sp, #8]
 8019e9a:	f403 3880 	and.w	r8, r3, #65536	@ 0x10000
 8019e9e:	f403 2980 	and.w	r9, r3, #262144	@ 0x40000
 8019ea2:	f501 72d4 	add.w	r2, r1, #424	@ 0x1a8
 8019ea6:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 8019eaa:	f501 7cda 	add.w	ip, r1, #436	@ 0x1b4
 8019eae:	4674      	mov	r4, lr
 8019eb0:	f814 0c04 	ldrb.w	r0, [r4, #-4]
 8019eb4:	f010 0ffb 	tst.w	r0, #251	@ 0xfb
 8019eb8:	d107      	bne.n	8019eca <Argus_Pba_Apply+0x62>
 8019eba:	f854 5c0c 	ldr.w	r5, [r4, #-12]
 8019ebe:	f040 0008 	orr.w	r0, r0, #8
 8019ec2:	42ae      	cmp	r6, r5
 8019ec4:	bfc8      	it	gt
 8019ec6:	f804 0c04 	strbgt.w	r0, [r4, #-4]
 8019eca:	340c      	adds	r4, #12
 8019ecc:	45a4      	cmp	ip, r4
 8019ece:	d1ef      	bne.n	8019eb0 <Argus_Pba_Apply+0x48>
 8019ed0:	7838      	ldrb	r0, [r7, #0]
 8019ed2:	9004      	str	r0, [sp, #16]
 8019ed4:	f010 0f30 	tst.w	r0, #48	@ 0x30
 8019ed8:	d01d      	beq.n	8019f16 <Argus_Pba_Apply+0xae>
 8019eda:	7cbd      	ldrb	r5, [r7, #18]
 8019edc:	b1dd      	cbz	r5, 8019f16 <Argus_Pba_Apply+0xae>
 8019ede:	9802      	ldr	r0, [sp, #8]
 8019ee0:	9e03      	ldr	r6, [sp, #12]
 8019ee2:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8019ee6:	00a4      	lsls	r4, r4, #2
 8019ee8:	2030      	movs	r0, #48	@ 0x30
 8019eea:	fb10 4606 	smlabb	r6, r0, r6, r4
 8019eee:	3628      	adds	r6, #40	@ 0x28
 8019ef0:	440e      	add	r6, r1
 8019ef2:	4618      	mov	r0, r3
 8019ef4:	7a04      	ldrb	r4, [r0, #8]
 8019ef6:	f014 0f10 	tst.w	r4, #16
 8019efa:	d109      	bne.n	8019f10 <Argus_Pba_Apply+0xa8>
 8019efc:	07a4      	lsls	r4, r4, #30
 8019efe:	d507      	bpl.n	8019f10 <Argus_Pba_Apply+0xa8>
 8019f00:	4286      	cmp	r6, r0
 8019f02:	f105 34ff 	add.w	r4, r5, #4294967295
 8019f06:	d003      	beq.n	8019f10 <Argus_Pba_Apply+0xa8>
 8019f08:	f014 05ff 	ands.w	r5, r4, #255	@ 0xff
 8019f0c:	f000 8275 	beq.w	801a3fa <Argus_Pba_Apply+0x592>
 8019f10:	300c      	adds	r0, #12
 8019f12:	4290      	cmp	r0, r2
 8019f14:	d9ee      	bls.n	8019ef4 <Argus_Pba_Apply+0x8c>
 8019f16:	7cfc      	ldrb	r4, [r7, #19]
 8019f18:	b18c      	cbz	r4, 8019f3e <Argus_Pba_Apply+0xd6>
 8019f1a:	9803      	ldr	r0, [sp, #12]
 8019f1c:	9d02      	ldr	r5, [sp, #8]
 8019f1e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019f22:	0100      	lsls	r0, r0, #4
 8019f24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019f28:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8019f2c:	4408      	add	r0, r1
 8019f2e:	f890 0030 	ldrb.w	r0, [r0, #48]	@ 0x30
 8019f32:	f010 0040 	ands.w	r0, r0, #64	@ 0x40
 8019f36:	f040 81ca 	bne.w	801a2ce <Argus_Pba_Apply+0x466>
 8019f3a:	f88b 0009 	strb.w	r0, [fp, #9]
 8019f3e:	f1b8 0f00 	cmp.w	r8, #0
 8019f42:	bf14      	ite	ne
 8019f44:	26df      	movne	r6, #223	@ 0xdf
 8019f46:	2610      	moveq	r6, #16
 8019f48:	4618      	mov	r0, r3
 8019f4a:	2500      	movs	r5, #0
 8019f4c:	7a04      	ldrb	r4, [r0, #8]
 8019f4e:	4226      	tst	r6, r4
 8019f50:	d103      	bne.n	8019f5a <Argus_Pba_Apply+0xf2>
 8019f52:	88c4      	ldrh	r4, [r0, #6]
 8019f54:	42a5      	cmp	r5, r4
 8019f56:	bf38      	it	cc
 8019f58:	4625      	movcc	r5, r4
 8019f5a:	300c      	adds	r0, #12
 8019f5c:	4282      	cmp	r2, r0
 8019f5e:	d1f5      	bne.n	8019f4c <Argus_Pba_Apply+0xe4>
 8019f60:	9804      	ldr	r0, [sp, #16]
 8019f62:	f8a1 51b8 	strh.w	r5, [r1, #440]	@ 0x1b8
 8019f66:	f010 0010 	ands.w	r0, r0, #16
 8019f6a:	9007      	str	r0, [sp, #28]
 8019f6c:	f000 81dd 	beq.w	801a32a <Argus_Pba_Apply+0x4c2>
 8019f70:	9e03      	ldr	r6, [sp, #12]
 8019f72:	9c02      	ldr	r4, [sp, #8]
 8019f74:	f8b7 a00a 	ldrh.w	sl, [r7, #10]
 8019f78:	f8cd a01c 	str.w	sl, [sp, #28]
 8019f7c:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8019f80:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019f84:	0100      	lsls	r0, r0, #4
 8019f86:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8019f8a:	4408      	add	r0, r1
 8019f8c:	9c02      	ldr	r4, [sp, #8]
 8019f8e:	f890 a030 	ldrb.w	sl, [r0, #48]	@ 0x30
 8019f92:	8dc0      	ldrh	r0, [r0, #46]	@ 0x2e
 8019f94:	9005      	str	r0, [sp, #20]
 8019f96:	8938      	ldrh	r0, [r7, #8]
 8019f98:	900b      	str	r0, [sp, #44]	@ 0x2c
 8019f9a:	0060      	lsls	r0, r4, #1
 8019f9c:	900a      	str	r0, [sp, #40]	@ 0x28
 8019f9e:	0070      	lsls	r0, r6, #1
 8019fa0:	9009      	str	r0, [sp, #36]	@ 0x24
 8019fa2:	2600      	movs	r6, #0
 8019fa4:	4618      	mov	r0, r3
 8019fa6:	7a04      	ldrb	r4, [r0, #8]
 8019fa8:	300c      	adds	r0, #12
 8019faa:	07a4      	lsls	r4, r4, #30
 8019fac:	bf48      	it	mi
 8019fae:	3601      	addmi	r6, #1
 8019fb0:	4282      	cmp	r2, r0
 8019fb2:	d1f8      	bne.n	8019fa6 <Argus_Pba_Apply+0x13e>
 8019fb4:	f1b8 0f00 	cmp.w	r8, #0
 8019fb8:	f000 8124 	beq.w	801a204 <Argus_Pba_Apply+0x39c>
 8019fbc:	2e00      	cmp	r6, #0
 8019fbe:	f000 8121 	beq.w	801a204 <Argus_Pba_Apply+0x39c>
 8019fc2:	2000      	movs	r0, #0
 8019fc4:	9007      	str	r0, [sp, #28]
 8019fc6:	4618      	mov	r0, r3
 8019fc8:	266c      	movs	r6, #108	@ 0x6c
 8019fca:	e009      	b.n	8019fe0 <Argus_Pba_Apply+0x178>
 8019fcc:	2e6c      	cmp	r6, #108	@ 0x6c
 8019fce:	d104      	bne.n	8019fda <Argus_Pba_Apply+0x172>
 8019fd0:	f014 0fdf 	tst.w	r4, #223	@ 0xdf
 8019fd4:	bf18      	it	ne
 8019fd6:	f06f 066d 	mvnne.w	r6, #109	@ 0x6d
 8019fda:	4290      	cmp	r0, r2
 8019fdc:	f080 81ae 	bcs.w	801a33c <Argus_Pba_Apply+0x4d4>
 8019fe0:	7a04      	ldrb	r4, [r0, #8]
 8019fe2:	f014 0f15 	tst.w	r4, #21
 8019fe6:	f100 000c 	add.w	r0, r0, #12
 8019fea:	d1f6      	bne.n	8019fda <Argus_Pba_Apply+0x172>
 8019fec:	2c00      	cmp	r4, #0
 8019fee:	d1ed      	bne.n	8019fcc <Argus_Pba_Apply+0x164>
 8019ff0:	f8db 0004 	ldr.w	r0, [fp, #4]
 8019ff4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8019ff6:	4604      	mov	r4, r0
 8019ff8:	69b8      	ldr	r0, [r7, #24]
 8019ffa:	4320      	orrs	r0, r4
 8019ffc:	43c4      	mvns	r4, r0
 8019ffe:	4618      	mov	r0, r3
 801a000:	f014 0f01 	tst.w	r4, #1
 801a004:	7a06      	ldrb	r6, [r0, #8]
 801a006:	f100 000c 	add.w	r0, r0, #12
 801a00a:	f000 817b 	beq.w	801a304 <Argus_Pba_Apply+0x49c>
 801a00e:	f046 0604 	orr.w	r6, r6, #4
 801a012:	4282      	cmp	r2, r0
 801a014:	f800 6c04 	strb.w	r6, [r0, #-4]
 801a018:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801a01c:	d1f0      	bne.n	801a000 <Argus_Pba_Apply+0x198>
 801a01e:	78bc      	ldrb	r4, [r7, #2]
 801a020:	78f8      	ldrb	r0, [r7, #3]
 801a022:	fb05 f404 	mul.w	r4, r5, r4
 801a026:	fb05 f000 	mul.w	r0, r5, r0
 801a02a:	f3c4 16c0 	ubfx	r6, r4, #7, #1
 801a02e:	eb06 2a14 	add.w	sl, r6, r4, lsr #8
 801a032:	f3c0 14c0 	ubfx	r4, r0, #7, #1
 801a036:	eb04 2910 	add.w	r9, r4, r0, lsr #8
 801a03a:	88b8      	ldrh	r0, [r7, #4]
 801a03c:	fa1f fa8a 	uxth.w	sl, sl
 801a040:	4582      	cmp	sl, r0
 801a042:	bf38      	it	cc
 801a044:	4682      	movcc	sl, r0
 801a046:	88f8      	ldrh	r0, [r7, #6]
 801a048:	9005      	str	r0, [sp, #20]
 801a04a:	fa1f f989 	uxth.w	r9, r9
 801a04e:	4581      	cmp	r9, r0
 801a050:	bf38      	it	cc
 801a052:	4681      	movcc	r9, r0
 801a054:	461c      	mov	r4, r3
 801a056:	e009      	b.n	801a06c <Argus_Pba_Apply+0x204>
 801a058:	f8b4 8006 	ldrh.w	r8, [r4, #6]
 801a05c:	45c8      	cmp	r8, r9
 801a05e:	d30b      	bcc.n	801a078 <Argus_Pba_Apply+0x210>
 801a060:	45d0      	cmp	r8, sl
 801a062:	bf28      	it	cs
 801a064:	7226      	strbcs	r6, [r4, #8]
 801a066:	340c      	adds	r4, #12
 801a068:	4294      	cmp	r4, r2
 801a06a:	d009      	beq.n	801a080 <Argus_Pba_Apply+0x218>
 801a06c:	7a20      	ldrb	r0, [r4, #8]
 801a06e:	f030 0604 	bics.w	r6, r0, #4
 801a072:	f040 0004 	orr.w	r0, r0, #4
 801a076:	d0ef      	beq.n	801a058 <Argus_Pba_Apply+0x1f0>
 801a078:	7220      	strb	r0, [r4, #8]
 801a07a:	340c      	adds	r4, #12
 801a07c:	4294      	cmp	r4, r2
 801a07e:	d1f5      	bne.n	801a06c <Argus_Pba_Apply+0x204>
 801a080:	9807      	ldr	r0, [sp, #28]
 801a082:	2801      	cmp	r0, #1
 801a084:	f000 8314 	beq.w	801a6b0 <Argus_Pba_Apply+0x848>
 801a088:	9804      	ldr	r0, [sp, #16]
 801a08a:	0640      	lsls	r0, r0, #25
 801a08c:	d560      	bpl.n	801a150 <Argus_Pba_Apply+0x2e8>
 801a08e:	4674      	mov	r4, lr
 801a090:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 801a094:	f814 0c04 	ldrb.w	r0, [r4, #-4]
 801a098:	0740      	lsls	r0, r0, #29
 801a09a:	d404      	bmi.n	801a0a6 <Argus_Pba_Apply+0x23e>
 801a09c:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 801a0a0:	4286      	cmp	r6, r0
 801a0a2:	bfa8      	it	ge
 801a0a4:	4606      	movge	r6, r0
 801a0a6:	340c      	adds	r4, #12
 801a0a8:	4564      	cmp	r4, ip
 801a0aa:	d1f3      	bne.n	801a094 <Argus_Pba_Apply+0x22c>
 801a0ac:	2e00      	cmp	r6, #0
 801a0ae:	f897 a00c 	ldrb.w	sl, [r7, #12]
 801a0b2:	f897 900d 	ldrb.w	r9, [r7, #13]
 801a0b6:	f2c0 8214 	blt.w	801a4e2 <Argus_Pba_Apply+0x67a>
 801a0ba:	f8b7 800e 	ldrh.w	r8, [r7, #14]
 801a0be:	b2f4      	uxtb	r4, r6
 801a0c0:	fb04 f00a 	mul.w	r0, r4, sl
 801a0c4:	9007      	str	r0, [sp, #28]
 801a0c6:	ea4f 10c8 	mov.w	r0, r8, lsl #7
 801a0ca:	900c      	str	r0, [sp, #48]	@ 0x30
 801a0cc:	9807      	ldr	r0, [sp, #28]
 801a0ce:	fb09 f404 	mul.w	r4, r9, r4
 801a0d2:	9409      	str	r4, [sp, #36]	@ 0x24
 801a0d4:	ea4f 2810 	mov.w	r8, r0, lsr #8
 801a0d8:	0a34      	lsrs	r4, r6, #8
 801a0da:	940a      	str	r4, [sp, #40]	@ 0x28
 801a0dc:	fb0a 8804 	mla	r8, sl, r4, r8
 801a0e0:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 801a0e4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801a0e6:	4440      	add	r0, r8
 801a0e8:	42a0      	cmp	r0, r4
 801a0ea:	bfac      	ite	ge
 801a0ec:	1830      	addge	r0, r6, r0
 801a0ee:	1930      	addlt	r0, r6, r4
 801a0f0:	9007      	str	r0, [sp, #28]
 801a0f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a0f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801a0f6:	0a00      	lsrs	r0, r0, #8
 801a0f8:	fb09 0004 	mla	r0, r9, r4, r0
 801a0fc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801a0fe:	f3c4 14c0 	ubfx	r4, r4, #7, #1
 801a102:	4420      	add	r0, r4
 801a104:	8a3c      	ldrh	r4, [r7, #16]
 801a106:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 801a10a:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801a10e:	e9cd 7309 	strd	r7, r3, [sp, #36]	@ 0x24
 801a112:	01e4      	lsls	r4, r4, #7
 801a114:	4284      	cmp	r4, r0
 801a116:	bfac      	ite	ge
 801a118:	1936      	addge	r6, r6, r4
 801a11a:	1836      	addlt	r6, r6, r0
 801a11c:	f04f 0a04 	mov.w	sl, #4
 801a120:	4670      	mov	r0, lr
 801a122:	2400      	movs	r4, #0
 801a124:	f810 3c04 	ldrb.w	r3, [r0, #-4]
 801a128:	b95b      	cbnz	r3, 801a142 <Argus_Pba_Apply+0x2da>
 801a12a:	f850 3c0c 	ldr.w	r3, [r0, #-12]
 801a12e:	42b3      	cmp	r3, r6
 801a130:	dc05      	bgt.n	801a13e <Argus_Pba_Apply+0x2d6>
 801a132:	454b      	cmp	r3, r9
 801a134:	fa28 f704 	lsr.w	r7, r8, r4
 801a138:	dd03      	ble.n	801a142 <Argus_Pba_Apply+0x2da>
 801a13a:	07ff      	lsls	r7, r7, #31
 801a13c:	d401      	bmi.n	801a142 <Argus_Pba_Apply+0x2da>
 801a13e:	f800 ac04 	strb.w	sl, [r0, #-4]
 801a142:	300c      	adds	r0, #12
 801a144:	4560      	cmp	r0, ip
 801a146:	f104 0401 	add.w	r4, r4, #1
 801a14a:	d1eb      	bne.n	801a124 <Argus_Pba_Apply+0x2bc>
 801a14c:	e9dd 7309 	ldrd	r7, r3, [sp, #36]	@ 0x24
 801a150:	7878      	ldrb	r0, [r7, #1]
 801a152:	2802      	cmp	r0, #2
 801a154:	f000 820a 	beq.w	801a56c <Argus_Pba_Apply+0x704>
 801a158:	2600      	movs	r6, #0
 801a15a:	4637      	mov	r7, r6
 801a15c:	f81e 0c04 	ldrb.w	r0, [lr, #-4]
 801a160:	b978      	cbnz	r0, 801a182 <Argus_Pba_Apply+0x31a>
 801a162:	f85e 4c0c 	ldr.w	r4, [lr, #-12]
 801a166:	4265      	negs	r5, r4
 801a168:	2c00      	cmp	r4, #0
 801a16a:	f3c5 1040 	ubfx	r0, r5, #5, #1
 801a16e:	eb00 1095 	add.w	r0, r0, r5, lsr #6
 801a172:	bfaa      	itet	ge
 801a174:	f3c4 1040 	ubfxge	r0, r4, #5, #1
 801a178:	4240      	neglt	r0, r0
 801a17a:	eb00 1094 	addge.w	r0, r0, r4, lsr #6
 801a17e:	4407      	add	r7, r0
 801a180:	3601      	adds	r6, #1
 801a182:	f10e 0e0c 	add.w	lr, lr, #12
 801a186:	45e6      	cmp	lr, ip
 801a188:	d1e8      	bne.n	801a15c <Argus_Pba_Apply+0x2f4>
 801a18a:	02b6      	lsls	r6, r6, #10
 801a18c:	f000 8289 	beq.w	801a6a2 <Argus_Pba_Apply+0x83a>
 801a190:	ea87 70e7 	eor.w	r0, r7, r7, asr #31
 801a194:	2e00      	cmp	r6, #0
 801a196:	eba0 70e7 	sub.w	r0, r0, r7, asr #31
 801a19a:	f2c0 81b6 	blt.w	801a50a <Argus_Pba_Apply+0x6a2>
 801a19e:	4286      	cmp	r6, r0
 801a1a0:	4635      	mov	r5, r6
 801a1a2:	f080 8442 	bcs.w	801aa2a <Argus_Pba_Apply+0xbc2>
 801a1a6:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 801a1aa:	006d      	lsls	r5, r5, #1
 801a1ac:	4285      	cmp	r5, r0
 801a1ae:	ea4f 0444 	mov.w	r4, r4, lsl #1
 801a1b2:	d3fa      	bcc.n	801a1aa <Argus_Pba_Apply+0x342>
 801a1b4:	2c00      	cmp	r4, #0
 801a1b6:	f040 81af 	bne.w	801a518 <Argus_Pba_Apply+0x6b0>
 801a1ba:	ea97 0f06 	teq	r7, r6
 801a1be:	bf54      	ite	pl
 801a1c0:	f06f 4c00 	mvnpl.w	ip, #2147483648	@ 0x80000000
 801a1c4:	f04f 4c00 	movmi.w	ip, #2147483648	@ 0x80000000
 801a1c8:	2000      	movs	r0, #0
 801a1ca:	f8c1 c1b4 	str.w	ip, [r1, #436]	@ 0x1b4
 801a1ce:	461c      	mov	r4, r3
 801a1d0:	4606      	mov	r6, r0
 801a1d2:	2701      	movs	r7, #1
 801a1d4:	7a25      	ldrb	r5, [r4, #8]
 801a1d6:	076d      	lsls	r5, r5, #29
 801a1d8:	bf48      	it	mi
 801a1da:	fa07 f500 	lslmi.w	r5, r7, r0
 801a1de:	f100 0001 	add.w	r0, r0, #1
 801a1e2:	bf48      	it	mi
 801a1e4:	432e      	orrmi	r6, r5
 801a1e6:	2820      	cmp	r0, #32
 801a1e8:	f104 040c 	add.w	r4, r4, #12
 801a1ec:	d1f2      	bne.n	801a1d4 <Argus_Pba_Apply+0x36c>
 801a1ee:	43f6      	mvns	r6, r6
 801a1f0:	f8cb 6004 	str.w	r6, [fp, #4]
 801a1f4:	2e00      	cmp	r6, #0
 801a1f6:	f000 81ae 	beq.w	801a556 <Argus_Pba_Apply+0x6ee>
 801a1fa:	2300      	movs	r3, #0
 801a1fc:	f8b1 21b8 	ldrh.w	r2, [r1, #440]	@ 0x1b8
 801a200:	9301      	str	r3, [sp, #4]
 801a202:	e02e      	b.n	801a262 <Argus_Pba_Apply+0x3fa>
 801a204:	9807      	ldr	r0, [sp, #28]
 801a206:	9c05      	ldr	r4, [sp, #20]
 801a208:	42a0      	cmp	r0, r4
 801a20a:	d867      	bhi.n	801a2dc <Argus_Pba_Apply+0x474>
 801a20c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801a20e:	42a0      	cmp	r0, r4
 801a210:	d803      	bhi.n	801a21a <Argus_Pba_Apply+0x3b2>
 801a212:	f01a 0ffb 	tst.w	sl, #251	@ 0xfb
 801a216:	f000 8154 	beq.w	801a4c2 <Argus_Pba_Apply+0x65a>
 801a21a:	f1b9 0f00 	cmp.w	r9, #0
 801a21e:	d065      	beq.n	801a2ec <Argus_Pba_Apply+0x484>
 801a220:	f1b8 0f00 	cmp.w	r8, #0
 801a224:	d162      	bne.n	801a2ec <Argus_Pba_Apply+0x484>
 801a226:	f04f 30ff 	mov.w	r0, #4294967295
 801a22a:	07c5      	lsls	r5, r0, #31
 801a22c:	7a1c      	ldrb	r4, [r3, #8]
 801a22e:	f103 030c 	add.w	r3, r3, #12
 801a232:	d471      	bmi.n	801a318 <Argus_Pba_Apply+0x4b0>
 801a234:	f024 0404 	bic.w	r4, r4, #4
 801a238:	429a      	cmp	r2, r3
 801a23a:	f803 4c04 	strb.w	r4, [r3, #-4]
 801a23e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 801a242:	d8f2      	bhi.n	801a22a <Argus_Pba_Apply+0x3c2>
 801a244:	88fa      	ldrh	r2, [r7, #6]
 801a246:	9205      	str	r2, [sp, #20]
 801a248:	2300      	movs	r3, #0
 801a24a:	f8db c000 	ldr.w	ip, [fp]
 801a24e:	f8b1 21b8 	ldrh.w	r2, [r1, #440]	@ 0x1b8
 801a252:	f8cb 3004 	str.w	r3, [fp, #4]
 801a256:	9301      	str	r3, [sp, #4]
 801a258:	f06f 036d 	mvn.w	r3, #109	@ 0x6d
 801a25c:	f8c1 c1b4 	str.w	ip, [r1, #436]	@ 0x1b4
 801a260:	600b      	str	r3, [r1, #0]
 801a262:	9b05      	ldr	r3, [sp, #20]
 801a264:	429a      	cmp	r2, r3
 801a266:	d203      	bcs.n	801a270 <Argus_Pba_Apply+0x408>
 801a268:	9b06      	ldr	r3, [sp, #24]
 801a26a:	f043 0310 	orr.w	r3, r3, #16
 801a26e:	618b      	str	r3, [r1, #24]
 801a270:	9b01      	ldr	r3, [sp, #4]
 801a272:	f88b 3008 	strb.w	r3, [fp, #8]
 801a276:	f8cb c000 	str.w	ip, [fp]
 801a27a:	b01b      	add	sp, #108	@ 0x6c
 801a27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a280:	f8a1 31b8 	strh.w	r3, [r1, #440]	@ 0x1b8
 801a284:	f8c1 31b4 	str.w	r3, [r1, #436]	@ 0x1b4
 801a288:	6043      	str	r3, [r0, #4]
 801a28a:	b01b      	add	sp, #108	@ 0x6c
 801a28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a290:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 801a294:	f501 74d4 	add.w	r4, r1, #424	@ 0x1a8
 801a298:	f04f 32ff 	mov.w	r2, #4294967295
 801a29c:	07d5      	lsls	r5, r2, #31
 801a29e:	7a18      	ldrb	r0, [r3, #8]
 801a2a0:	f103 030c 	add.w	r3, r3, #12
 801a2a4:	d525      	bpl.n	801a2f2 <Argus_Pba_Apply+0x48a>
 801a2a6:	f040 0004 	orr.w	r0, r0, #4
 801a2aa:	429c      	cmp	r4, r3
 801a2ac:	f803 0c04 	strb.w	r0, [r3, #-4]
 801a2b0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801a2b4:	d1f2      	bne.n	801a29c <Argus_Pba_Apply+0x434>
 801a2b6:	f8db 2000 	ldr.w	r2, [fp]
 801a2ba:	2300      	movs	r3, #0
 801a2bc:	f8cb 3004 	str.w	r3, [fp, #4]
 801a2c0:	f8a1 31b8 	strh.w	r3, [r1, #440]	@ 0x1b8
 801a2c4:	f8c1 21b4 	str.w	r2, [r1, #436]	@ 0x1b4
 801a2c8:	b01b      	add	sp, #108	@ 0x6c
 801a2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2ce:	f89b 0009 	ldrb.w	r0, [fp, #9]
 801a2d2:	4284      	cmp	r4, r0
 801a2d4:	f67f ae33 	bls.w	8019f3e <Argus_Pba_Apply+0xd6>
 801a2d8:	3001      	adds	r0, #1
 801a2da:	e62e      	b.n	8019f3a <Argus_Pba_Apply+0xd2>
 801a2dc:	f1b9 0f00 	cmp.w	r9, #0
 801a2e0:	f000 80ec 	beq.w	801a4bc <Argus_Pba_Apply+0x654>
 801a2e4:	f1b8 0f00 	cmp.w	r8, #0
 801a2e8:	d09d      	beq.n	801a226 <Argus_Pba_Apply+0x3be>
 801a2ea:	e66a      	b.n	8019fc2 <Argus_Pba_Apply+0x15a>
 801a2ec:	9801      	ldr	r0, [sp, #4]
 801a2ee:	9007      	str	r0, [sp, #28]
 801a2f0:	e669      	b.n	8019fc6 <Argus_Pba_Apply+0x15e>
 801a2f2:	f020 0004 	bic.w	r0, r0, #4
 801a2f6:	42a3      	cmp	r3, r4
 801a2f8:	f803 0c04 	strb.w	r0, [r3, #-4]
 801a2fc:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801a300:	d1cc      	bne.n	801a29c <Argus_Pba_Apply+0x434>
 801a302:	e7d8      	b.n	801a2b6 <Argus_Pba_Apply+0x44e>
 801a304:	f026 0604 	bic.w	r6, r6, #4
 801a308:	4290      	cmp	r0, r2
 801a30a:	f800 6c04 	strb.w	r6, [r0, #-4]
 801a30e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801a312:	f47f ae75 	bne.w	801a000 <Argus_Pba_Apply+0x198>
 801a316:	e682      	b.n	801a01e <Argus_Pba_Apply+0x1b6>
 801a318:	f044 0404 	orr.w	r4, r4, #4
 801a31c:	429a      	cmp	r2, r3
 801a31e:	f803 4c04 	strb.w	r4, [r3, #-4]
 801a322:	ea4f 0050 	mov.w	r0, r0, lsr #1
 801a326:	d880      	bhi.n	801a22a <Argus_Pba_Apply+0x3c2>
 801a328:	e78c      	b.n	801a244 <Argus_Pba_Apply+0x3dc>
 801a32a:	f1b9 0f00 	cmp.w	r9, #0
 801a32e:	f43f ae4a 	beq.w	8019fc6 <Argus_Pba_Apply+0x15e>
 801a332:	f1b8 0f00 	cmp.w	r8, #0
 801a336:	f43f af76 	beq.w	801a226 <Argus_Pba_Apply+0x3be>
 801a33a:	e644      	b.n	8019fc6 <Argus_Pba_Apply+0x15e>
 801a33c:	2e00      	cmp	r6, #0
 801a33e:	f43f ae57 	beq.w	8019ff0 <Argus_Pba_Apply+0x188>
 801a342:	9804      	ldr	r0, [sp, #16]
 801a344:	f010 0020 	ands.w	r0, r0, #32
 801a348:	d068      	beq.n	801a41c <Argus_Pba_Apply+0x5b4>
 801a34a:	88f8      	ldrh	r0, [r7, #6]
 801a34c:	9005      	str	r0, [sp, #20]
 801a34e:	9d03      	ldr	r5, [sp, #12]
 801a350:	9e02      	ldr	r6, [sp, #8]
 801a352:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 801a356:	0100      	lsls	r0, r0, #4
 801a358:	eb06 0446 	add.w	r4, r6, r6, lsl #1
 801a35c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 801a360:	4408      	add	r0, r1
 801a362:	f890 a030 	ldrb.w	sl, [r0, #48]	@ 0x30
 801a366:	0070      	lsls	r0, r6, #1
 801a368:	900a      	str	r0, [sp, #40]	@ 0x28
 801a36a:	0068      	lsls	r0, r5, #1
 801a36c:	9009      	str	r0, [sp, #36]	@ 0x24
 801a36e:	f02a 0004 	bic.w	r0, sl, #4
 801a372:	900c      	str	r0, [sp, #48]	@ 0x30
 801a374:	2003      	movs	r0, #3
 801a376:	f01a 0720 	ands.w	r7, sl, #32
 801a37a:	f040 8091 	bne.w	801a4a0 <Argus_Pba_Apply+0x638>
 801a37e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801a380:	2c00      	cmp	r4, #0
 801a382:	f040 834d 	bne.w	801aa20 <Argus_Pba_Apply+0xbb8>
 801a386:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801a38a:	2701      	movs	r7, #1
 801a38c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 801a390:	40a7      	lsls	r7, r4
 801a392:	43fc      	mvns	r4, r7
 801a394:	2600      	movs	r6, #0
 801a396:	f014 0f01 	tst.w	r4, #1
 801a39a:	7a1d      	ldrb	r5, [r3, #8]
 801a39c:	f103 030c 	add.w	r3, r3, #12
 801a3a0:	d022      	beq.n	801a3e8 <Argus_Pba_Apply+0x580>
 801a3a2:	f045 0504 	orr.w	r5, r5, #4
 801a3a6:	4293      	cmp	r3, r2
 801a3a8:	f803 5c04 	strb.w	r5, [r3, #-4]
 801a3ac:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801a3b0:	d1f1      	bne.n	801a396 <Argus_Pba_Apply+0x52e>
 801a3b2:	9a03      	ldr	r2, [sp, #12]
 801a3b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a3b6:	9c02      	ldr	r4, [sp, #8]
 801a3b8:	f8cb 7004 	str.w	r7, [fp, #4]
 801a3bc:	4413      	add	r3, r2
 801a3be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a3c0:	011b      	lsls	r3, r3, #4
 801a3c2:	4422      	add	r2, r4
 801a3c4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801a3c8:	440b      	add	r3, r1
 801a3ca:	2e6c      	cmp	r6, #108	@ 0x6c
 801a3cc:	8dda      	ldrh	r2, [r3, #46]	@ 0x2e
 801a3ce:	f8a1 21b8 	strh.w	r2, [r1, #440]	@ 0x1b8
 801a3d2:	f8d3 c028 	ldr.w	ip, [r3, #40]	@ 0x28
 801a3d6:	f8c1 c1b4 	str.w	ip, [r1, #436]	@ 0x1b4
 801a3da:	d066      	beq.n	801a4aa <Argus_Pba_Apply+0x642>
 801a3dc:	366e      	adds	r6, #110	@ 0x6e
 801a3de:	f040 824f 	bne.w	801a880 <Argus_Pba_Apply+0xa18>
 801a3e2:	f8db c000 	ldr.w	ip, [fp]
 801a3e6:	e737      	b.n	801a258 <Argus_Pba_Apply+0x3f0>
 801a3e8:	f025 0504 	bic.w	r5, r5, #4
 801a3ec:	4293      	cmp	r3, r2
 801a3ee:	f803 5c04 	strb.w	r5, [r3, #-4]
 801a3f2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801a3f6:	d1ce      	bne.n	801a396 <Argus_Pba_Apply+0x52e>
 801a3f8:	e7db      	b.n	801a3b2 <Argus_Pba_Apply+0x54a>
 801a3fa:	9803      	ldr	r0, [sp, #12]
 801a3fc:	9c02      	ldr	r4, [sp, #8]
 801a3fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a402:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a406:	0100      	lsls	r0, r0, #4
 801a408:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 801a40c:	4408      	add	r0, r1
 801a40e:	f890 4030 	ldrb.w	r4, [r0, #48]	@ 0x30
 801a412:	f044 0408 	orr.w	r4, r4, #8
 801a416:	f880 4030 	strb.w	r4, [r0, #48]	@ 0x30
 801a41a:	e57c      	b.n	8019f16 <Argus_Pba_Apply+0xae>
 801a41c:	f04f 34ff 	mov.w	r4, #4294967295
 801a420:	f014 0f01 	tst.w	r4, #1
 801a424:	7a1d      	ldrb	r5, [r3, #8]
 801a426:	f103 030c 	add.w	r3, r3, #12
 801a42a:	d028      	beq.n	801a47e <Argus_Pba_Apply+0x616>
 801a42c:	f045 0504 	orr.w	r5, r5, #4
 801a430:	429a      	cmp	r2, r3
 801a432:	f803 5c04 	strb.w	r5, [r3, #-4]
 801a436:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801a43a:	d1f1      	bne.n	801a420 <Argus_Pba_Apply+0x5b8>
 801a43c:	9a06      	ldr	r2, [sp, #24]
 801a43e:	f8db c000 	ldr.w	ip, [fp]
 801a442:	2300      	movs	r3, #0
 801a444:	f116 0f6e 	cmn.w	r6, #110	@ 0x6e
 801a448:	f8cb 3004 	str.w	r3, [fp, #4]
 801a44c:	f402 3400 	and.w	r4, r2, #131072	@ 0x20000
 801a450:	f000 8311 	beq.w	801aa76 <Argus_Pba_Apply+0xc0e>
 801a454:	2e6c      	cmp	r6, #108	@ 0x6c
 801a456:	f040 820d 	bne.w	801a874 <Argus_Pba_Apply+0xa0c>
 801a45a:	88fa      	ldrh	r2, [r7, #6]
 801a45c:	9205      	str	r2, [sp, #20]
 801a45e:	f8b1 21b8 	ldrh.w	r2, [r1, #440]	@ 0x1b8
 801a462:	9301      	str	r3, [sp, #4]
 801a464:	2c00      	cmp	r4, #0
 801a466:	f43f aef7 	beq.w	801a258 <Argus_Pba_Apply+0x3f0>
 801a46a:	9b08      	ldr	r3, [sp, #32]
 801a46c:	b90b      	cbnz	r3, 801a472 <Argus_Pba_Apply+0x60a>
 801a46e:	236c      	movs	r3, #108	@ 0x6c
 801a470:	600b      	str	r3, [r1, #0]
 801a472:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a476:	f8c1 31b4 	str.w	r3, [r1, #436]	@ 0x1b4
 801a47a:	469c      	mov	ip, r3
 801a47c:	e6f1      	b.n	801a262 <Argus_Pba_Apply+0x3fa>
 801a47e:	f025 0504 	bic.w	r5, r5, #4
 801a482:	4293      	cmp	r3, r2
 801a484:	f803 5c04 	strb.w	r5, [r3, #-4]
 801a488:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801a48c:	d1c8      	bne.n	801a420 <Argus_Pba_Apply+0x5b8>
 801a48e:	e7d5      	b.n	801a43c <Argus_Pba_Apply+0x5d4>
 801a490:	88f8      	ldrh	r0, [r7, #6]
 801a492:	9005      	str	r0, [sp, #20]
 801a494:	f01a 0f20 	tst.w	sl, #32
 801a498:	f04f 0002 	mov.w	r0, #2
 801a49c:	f43f af73 	beq.w	801a386 <Argus_Pba_Apply+0x51e>
 801a4a0:	266c      	movs	r6, #108	@ 0x6c
 801a4a2:	f04f 34ff 	mov.w	r4, #4294967295
 801a4a6:	2700      	movs	r7, #0
 801a4a8:	e775      	b.n	801a396 <Argus_Pba_Apply+0x52e>
 801a4aa:	2802      	cmp	r0, #2
 801a4ac:	f8db c000 	ldr.w	ip, [fp]
 801a4b0:	f43f aed2 	beq.w	801a258 <Argus_Pba_Apply+0x3f0>
 801a4b4:	9b06      	ldr	r3, [sp, #24]
 801a4b6:	f403 3400 	and.w	r4, r3, #131072	@ 0x20000
 801a4ba:	e7d3      	b.n	801a464 <Argus_Pba_Apply+0x5fc>
 801a4bc:	f8cd 901c 	str.w	r9, [sp, #28]
 801a4c0:	e581      	b.n	8019fc6 <Argus_Pba_Apply+0x15e>
 801a4c2:	f1b9 0f00 	cmp.w	r9, #0
 801a4c6:	d0e3      	beq.n	801a490 <Argus_Pba_Apply+0x628>
 801a4c8:	f1b8 0f00 	cmp.w	r8, #0
 801a4cc:	f43f aeab 	beq.w	801a226 <Argus_Pba_Apply+0x3be>
 801a4d0:	88f8      	ldrh	r0, [r7, #6]
 801a4d2:	9005      	str	r0, [sp, #20]
 801a4d4:	f01a 0f20 	tst.w	sl, #32
 801a4d8:	f04f 0002 	mov.w	r0, #2
 801a4dc:	f43f af53 	beq.w	801a386 <Argus_Pba_Apply+0x51e>
 801a4e0:	e7de      	b.n	801a4a0 <Argus_Pba_Apply+0x638>
 801a4e2:	f1c6 0800 	rsb	r8, r6, #0
 801a4e6:	fa5f f488 	uxtb.w	r4, r8
 801a4ea:	fb09 f404 	mul.w	r4, r9, r4
 801a4ee:	0a20      	lsrs	r0, r4, #8
 801a4f0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801a4f4:	f3c4 14c0 	ubfx	r4, r4, #7, #1
 801a4f8:	fb09 0008 	mla	r0, r9, r8, r0
 801a4fc:	4420      	add	r0, r4
 801a4fe:	89fc      	ldrh	r4, [r7, #14]
 801a500:	eb06 14c4 	add.w	r4, r6, r4, lsl #7
 801a504:	4240      	negs	r0, r0
 801a506:	9407      	str	r4, [sp, #28]
 801a508:	e5fc      	b.n	801a104 <Argus_Pba_Apply+0x29c>
 801a50a:	4275      	negs	r5, r6
 801a50c:	4285      	cmp	r5, r0
 801a50e:	bf28      	it	cs
 801a510:	f44f 3480 	movcs.w	r4, #65536	@ 0x10000
 801a514:	f4ff ae47 	bcc.w	801a1a6 <Argus_Pba_Apply+0x33e>
 801a518:	2d00      	cmp	r5, #0
 801a51a:	f2c0 81ff 	blt.w	801a91c <Argus_Pba_Apply+0xab4>
 801a51e:	f04f 0c00 	mov.w	ip, #0
 801a522:	b908      	cbnz	r0, 801a528 <Argus_Pba_Apply+0x6c0>
 801a524:	e228      	b.n	801a978 <Argus_Pba_Apply+0xb10>
 801a526:	b160      	cbz	r0, 801a542 <Argus_Pba_Apply+0x6da>
 801a528:	4285      	cmp	r5, r0
 801a52a:	bf9c      	itt	ls
 801a52c:	1b40      	subls	r0, r0, r5
 801a52e:	ea4c 0c04 	orrls.w	ip, ip, r4
 801a532:	0864      	lsrs	r4, r4, #1
 801a534:	ea4f 0040 	mov.w	r0, r0, lsl #1
 801a538:	d1f5      	bne.n	801a526 <Argus_Pba_Apply+0x6be>
 801a53a:	42a8      	cmp	r0, r5
 801a53c:	d301      	bcc.n	801a542 <Argus_Pba_Apply+0x6da>
 801a53e:	f10c 0c01 	add.w	ip, ip, #1
 801a542:	ea97 0f06 	teq	r7, r6
 801a546:	f100 821c 	bmi.w	801a982 <Argus_Pba_Apply+0xb1a>
 801a54a:	f1bc 0f00 	cmp.w	ip, #0
 801a54e:	bfb8      	it	lt
 801a550:	f06f 4c00 	mvnlt.w	ip, #2147483648	@ 0x80000000
 801a554:	e638      	b.n	801a1c8 <Argus_Pba_Apply+0x360>
 801a556:	9804      	ldr	r0, [sp, #16]
 801a558:	f010 0020 	ands.w	r0, r0, #32
 801a55c:	f47f aef7 	bne.w	801a34e <Argus_Pba_Apply+0x4e6>
 801a560:	f8db c000 	ldr.w	ip, [fp]
 801a564:	f8b1 21b8 	ldrh.w	r2, [r1, #440]	@ 0x1b8
 801a568:	9001      	str	r0, [sp, #4]
 801a56a:	e675      	b.n	801a258 <Argus_Pba_Apply+0x3f0>
 801a56c:	fab5 f485 	clz	r4, r5
 801a570:	f1c4 0726 	rsb	r7, r4, #38	@ 0x26
 801a574:	f04f 30ff 	mov.w	r0, #4294967295
 801a578:	40b8      	lsls	r0, r7
 801a57a:	43c0      	mvns	r0, r0
 801a57c:	9009      	str	r0, [sp, #36]	@ 0x24
 801a57e:	2600      	movs	r6, #0
 801a580:	f1c4 0015 	rsb	r0, r4, #21
 801a584:	9407      	str	r4, [sp, #28]
 801a586:	f1c4 0825 	rsb	r8, r4, #37	@ 0x25
 801a58a:	4635      	mov	r5, r6
 801a58c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801a58e:	930a      	str	r3, [sp, #40]	@ 0x28
 801a590:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801a594:	4681      	mov	r9, r0
 801a596:	e01b      	b.n	801a5d0 <Argus_Pba_Apply+0x768>
 801a598:	2f10      	cmp	r7, #16
 801a59a:	dd3d      	ble.n	801a618 <Argus_Pba_Apply+0x7b0>
 801a59c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a5a0:	fb00 fa0a 	mul.w	sl, r0, sl
 801a5a4:	fa2a fa09 	lsr.w	sl, sl, r9
 801a5a8:	b29b      	uxth	r3, r3
 801a5aa:	fb00 f303 	mul.w	r3, r0, r3
 801a5ae:	f00a 0b01 	and.w	fp, sl, #1
 801a5b2:	fa23 f308 	lsr.w	r3, r3, r8
 801a5b6:	eb0b 0a5a 	add.w	sl, fp, sl, lsr #1
 801a5ba:	eb0a 0a53 	add.w	sl, sl, r3, lsr #1
 801a5be:	f003 0301 	and.w	r3, r3, #1
 801a5c2:	4453      	add	r3, sl
 801a5c4:	441d      	add	r5, r3
 801a5c6:	4406      	add	r6, r0
 801a5c8:	f10e 0e0c 	add.w	lr, lr, #12
 801a5cc:	45e6      	cmp	lr, ip
 801a5ce:	d03f      	beq.n	801a650 <Argus_Pba_Apply+0x7e8>
 801a5d0:	f81e 3c04 	ldrb.w	r3, [lr, #-4]
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	d1f7      	bne.n	801a5c8 <Argus_Pba_Apply+0x760>
 801a5d8:	f85e 3c0c 	ldr.w	r3, [lr, #-12]
 801a5dc:	f83e 0c06 	ldrh.w	r0, [lr, #-6]
 801a5e0:	2b00      	cmp	r3, #0
 801a5e2:	dad9      	bge.n	801a598 <Argus_Pba_Apply+0x730>
 801a5e4:	2f10      	cmp	r7, #16
 801a5e6:	f1c3 0300 	rsb	r3, r3, #0
 801a5ea:	dd23      	ble.n	801a634 <Argus_Pba_Apply+0x7cc>
 801a5ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a5f0:	fb00 fa0a 	mul.w	sl, r0, sl
 801a5f4:	fa2a fa09 	lsr.w	sl, sl, r9
 801a5f8:	b29b      	uxth	r3, r3
 801a5fa:	fb00 f303 	mul.w	r3, r0, r3
 801a5fe:	f00a 0b01 	and.w	fp, sl, #1
 801a602:	fa23 f308 	lsr.w	r3, r3, r8
 801a606:	eb0b 0a5a 	add.w	sl, fp, sl, lsr #1
 801a60a:	eb0a 0a53 	add.w	sl, sl, r3, lsr #1
 801a60e:	f003 0301 	and.w	r3, r3, #1
 801a612:	4453      	add	r3, sl
 801a614:	425b      	negs	r3, r3
 801a616:	e7d5      	b.n	801a5c4 <Argus_Pba_Apply+0x75c>
 801a618:	ea03 0a04 	and.w	sl, r3, r4
 801a61c:	fb00 fa0a 	mul.w	sl, r0, sl
 801a620:	fa2a fa08 	lsr.w	sl, sl, r8
 801a624:	f00a 0b01 	and.w	fp, sl, #1
 801a628:	40fb      	lsrs	r3, r7
 801a62a:	eb0b 0a5a 	add.w	sl, fp, sl, lsr #1
 801a62e:	fb00 a303 	mla	r3, r0, r3, sl
 801a632:	e7c7      	b.n	801a5c4 <Argus_Pba_Apply+0x75c>
 801a634:	ea03 0a04 	and.w	sl, r3, r4
 801a638:	fb00 fa0a 	mul.w	sl, r0, sl
 801a63c:	fa2a fa08 	lsr.w	sl, sl, r8
 801a640:	f00a 0b01 	and.w	fp, sl, #1
 801a644:	40fb      	lsrs	r3, r7
 801a646:	eb0b 0a5a 	add.w	sl, fp, sl, lsr #1
 801a64a:	fb00 a303 	mla	r3, r0, r3, sl
 801a64e:	e7e1      	b.n	801a614 <Argus_Pba_Apply+0x7ac>
 801a650:	2f0f      	cmp	r7, #15
 801a652:	e9dd b309 	ldrd	fp, r3, [sp, #36]	@ 0x24
 801a656:	f340 8118 	ble.w	801a88a <Argus_Pba_Apply+0xa22>
 801a65a:	2e00      	cmp	r6, #0
 801a65c:	f000 8185 	beq.w	801a96a <Argus_Pba_Apply+0xb02>
 801a660:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 801a664:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 801a668:	42b7      	cmp	r7, r6
 801a66a:	4630      	mov	r0, r6
 801a66c:	f240 81ed 	bls.w	801aa4a <Argus_Pba_Apply+0xbe2>
 801a670:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 801a674:	4686      	mov	lr, r0
 801a676:	0040      	lsls	r0, r0, #1
 801a678:	4287      	cmp	r7, r0
 801a67a:	46a4      	mov	ip, r4
 801a67c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 801a680:	d8f8      	bhi.n	801a674 <Argus_Pba_Apply+0x80c>
 801a682:	2c00      	cmp	r4, #0
 801a684:	f040 81a9 	bne.w	801a9da <Argus_Pba_Apply+0xb72>
 801a688:	ea96 0f05 	teq	r6, r5
 801a68c:	bf54      	ite	pl
 801a68e:	f06f 4c00 	mvnpl.w	ip, #2147483648	@ 0x80000000
 801a692:	f04f 4c00 	movmi.w	ip, #2147483648	@ 0x80000000
 801a696:	9807      	ldr	r0, [sp, #28]
 801a698:	f1c0 0516 	rsb	r5, r0, #22
 801a69c:	fa0c fc05 	lsl.w	ip, ip, r5
 801a6a0:	e592      	b.n	801a1c8 <Argus_Pba_Apply+0x360>
 801a6a2:	2f00      	cmp	r7, #0
 801a6a4:	bfac      	ite	ge
 801a6a6:	f06f 4c00 	mvnge.w	ip, #2147483648	@ 0x80000000
 801a6aa:	f04f 4c00 	movlt.w	ip, #2147483648	@ 0x80000000
 801a6ae:	e58b      	b.n	801a1c8 <Argus_Pba_Apply+0x360>
 801a6b0:	9803      	ldr	r0, [sp, #12]
 801a6b2:	9e02      	ldr	r6, [sp, #8]
 801a6b4:	f89b 8008 	ldrb.w	r8, [fp, #8]
 801a6b8:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
 801a6bc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a6c0:	eb06 0446 	add.w	r4, r6, r6, lsl #1
 801a6c4:	0100      	lsls	r0, r0, #4
 801a6c6:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 801a6ca:	f89b 4009 	ldrb.w	r4, [fp, #9]
 801a6ce:	940f      	str	r4, [sp, #60]	@ 0x3c
 801a6d0:	9c02      	ldr	r4, [sp, #8]
 801a6d2:	f897 800c 	ldrb.w	r8, [r7, #12]
 801a6d6:	f8cd 804c 	str.w	r8, [sp, #76]	@ 0x4c
 801a6da:	0064      	lsls	r4, r4, #1
 801a6dc:	940a      	str	r4, [sp, #40]	@ 0x28
 801a6de:	9c03      	ldr	r4, [sp, #12]
 801a6e0:	f897 800d 	ldrb.w	r8, [r7, #13]
 801a6e4:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 801a6e8:	4408      	add	r0, r1
 801a6ea:	0064      	lsls	r4, r4, #1
 801a6ec:	f890 a030 	ldrb.w	sl, [r0, #48]	@ 0x30
 801a6f0:	9409      	str	r4, [sp, #36]	@ 0x24
 801a6f2:	7cf8      	ldrb	r0, [r7, #19]
 801a6f4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801a6f6:	f8b7 8010 	ldrh.w	r8, [r7, #16]
 801a6fa:	f8b7 900e 	ldrh.w	r9, [r7, #14]
 801a6fe:	f8cd 805c 	str.w	r8, [sp, #92]	@ 0x5c
 801a702:	f02a 0604 	bic.w	r6, sl, #4
 801a706:	4284      	cmp	r4, r0
 801a708:	960d      	str	r6, [sp, #52]	@ 0x34
 801a70a:	960c      	str	r6, [sp, #48]	@ 0x30
 801a70c:	f0c0 80df 	bcc.w	801a8ce <Argus_Pba_Apply+0xa66>
 801a710:	2e00      	cmp	r6, #0
 801a712:	f040 810f 	bne.w	801a934 <Argus_Pba_Apply+0xacc>
 801a716:	9607      	str	r6, [sp, #28]
 801a718:	9c03      	ldr	r4, [sp, #12]
 801a71a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a71c:	9e02      	ldr	r6, [sp, #8]
 801a71e:	4420      	add	r0, r4
 801a720:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801a722:	0100      	lsls	r0, r0, #4
 801a724:	4434      	add	r4, r6
 801a726:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 801a72a:	4408      	add	r0, r1
 801a72c:	f06f 4800 	mvn.w	r8, #2147483648	@ 0x80000000
 801a730:	6a86      	ldr	r6, [r0, #40]	@ 0x28
 801a732:	9615      	str	r6, [sp, #84]	@ 0x54
 801a734:	f00a 0404 	and.w	r4, sl, #4
 801a738:	4546      	cmp	r6, r8
 801a73a:	9411      	str	r4, [sp, #68]	@ 0x44
 801a73c:	f000 8149 	beq.w	801a9d2 <Argus_Pba_Apply+0xb6a>
 801a740:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801a742:	f880 4030 	strb.w	r4, [r0, #48]	@ 0x30
 801a746:	2000      	movs	r0, #0
 801a748:	900f      	str	r0, [sp, #60]	@ 0x3c
 801a74a:	2001      	movs	r0, #1
 801a74c:	9012      	str	r0, [sp, #72]	@ 0x48
 801a74e:	4618      	mov	r0, r3
 801a750:	2600      	movs	r6, #0
 801a752:	7a04      	ldrb	r4, [r0, #8]
 801a754:	300c      	adds	r0, #12
 801a756:	0764      	lsls	r4, r4, #29
 801a758:	bf48      	it	mi
 801a75a:	3601      	addmi	r6, #1
 801a75c:	4282      	cmp	r2, r0
 801a75e:	d1f8      	bne.n	801a752 <Argus_Pba_Apply+0x8ea>
 801a760:	f1c6 0620 	rsb	r6, r6, #32
 801a764:	b2f0      	uxtb	r0, r6
 801a766:	9018      	str	r0, [sp, #96]	@ 0x60
 801a768:	4676      	mov	r6, lr
 801a76a:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 801a76e:	f816 0c04 	ldrb.w	r0, [r6, #-4]
 801a772:	0740      	lsls	r0, r0, #29
 801a774:	d404      	bmi.n	801a780 <Argus_Pba_Apply+0x918>
 801a776:	f856 0c0c 	ldr.w	r0, [r6, #-12]
 801a77a:	4284      	cmp	r4, r0
 801a77c:	bfa8      	it	ge
 801a77e:	4604      	movge	r4, r0
 801a780:	360c      	adds	r6, #12
 801a782:	45b4      	cmp	ip, r6
 801a784:	d1f3      	bne.n	801a76e <Argus_Pba_Apply+0x906>
 801a786:	46f0      	mov	r8, lr
 801a788:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 801a78c:	f818 0c04 	ldrb.w	r0, [r8, #-4]
 801a790:	0740      	lsls	r0, r0, #29
 801a792:	d404      	bmi.n	801a79e <Argus_Pba_Apply+0x936>
 801a794:	f858 0c0c 	ldr.w	r0, [r8, #-12]
 801a798:	4286      	cmp	r6, r0
 801a79a:	bfb8      	it	lt
 801a79c:	4606      	movlt	r6, r0
 801a79e:	f108 080c 	add.w	r8, r8, #12
 801a7a2:	45e0      	cmp	r8, ip
 801a7a4:	d1f2      	bne.n	801a78c <Argus_Pba_Apply+0x924>
 801a7a6:	2c00      	cmp	r4, #0
 801a7a8:	9610      	str	r6, [sp, #64]	@ 0x40
 801a7aa:	f2c0 80a1 	blt.w	801a8f0 <Argus_Pba_Apply+0xa88>
 801a7ae:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801a7b0:	ea4f 10c9 	mov.w	r0, r9, lsl #7
 801a7b4:	9019      	str	r0, [sp, #100]	@ 0x64
 801a7b6:	b2e0      	uxtb	r0, r4
 801a7b8:	fb00 f906 	mul.w	r9, r0, r6
 801a7bc:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801a7be:	fb06 f800 	mul.w	r8, r6, r0
 801a7c2:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801a7c4:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801a7c8:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801a7cc:	ea4f 2814 	mov.w	r8, r4, lsr #8
 801a7d0:	fb06 0008 	mla	r0, r6, r8, r0
 801a7d4:	f3c9 19c0 	ubfx	r9, r9, #7, #1
 801a7d8:	4481      	add	r9, r0
 801a7da:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801a7dc:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801a7de:	4581      	cmp	r9, r0
 801a7e0:	bfac      	ite	ge
 801a7e2:	44a1      	addge	r9, r4
 801a7e4:	eb04 0900 	addlt.w	r9, r4, r0
 801a7e8:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801a7ea:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 801a7ee:	0a00      	lsrs	r0, r0, #8
 801a7f0:	fb06 0808 	mla	r8, r6, r8, r0
 801a7f4:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801a7f6:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 801a7fa:	eb08 0900 	add.w	r9, r8, r0
 801a7fe:	9e03      	ldr	r6, [sp, #12]
 801a800:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a802:	4430      	add	r0, r6
 801a804:	0100      	lsls	r0, r0, #4
 801a806:	900e      	str	r0, [sp, #56]	@ 0x38
 801a808:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801a80a:	9802      	ldr	r0, [sp, #8]
 801a80c:	eb06 0800 	add.w	r8, r6, r0
 801a810:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801a812:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 801a816:	4408      	add	r0, r1
 801a818:	f880 a030 	strb.w	sl, [r0, #48]	@ 0x30
 801a81c:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801a81e:	2801      	cmp	r0, #1
 801a820:	d95d      	bls.n	801a8de <Argus_Pba_Apply+0xa76>
 801a822:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801a824:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801a826:	4286      	cmp	r6, r0
 801a828:	dc07      	bgt.n	801a83a <Argus_Pba_Apply+0x9d2>
 801a82a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801a82c:	2800      	cmp	r0, #0
 801a82e:	f47f ac2b 	bne.w	801a088 <Argus_Pba_Apply+0x220>
 801a832:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801a834:	2800      	cmp	r0, #0
 801a836:	f43f ac27 	beq.w	801a088 <Argus_Pba_Apply+0x220>
 801a83a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801a83c:	2800      	cmp	r0, #0
 801a83e:	f43f ac23 	beq.w	801a088 <Argus_Pba_Apply+0x220>
 801a842:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801a844:	01c0      	lsls	r0, r0, #7
 801a846:	4548      	cmp	r0, r9
 801a848:	bfac      	ite	ge
 801a84a:	1824      	addge	r4, r4, r0
 801a84c:	444c      	addlt	r4, r9
 801a84e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801a850:	4284      	cmp	r4, r0
 801a852:	da01      	bge.n	801a858 <Argus_Pba_Apply+0x9f0>
 801a854:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801a856:	b158      	cbz	r0, 801a870 <Argus_Pba_Apply+0xa08>
 801a858:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801a85a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801a85c:	4284      	cmp	r4, r0
 801a85e:	d003      	beq.n	801a868 <Argus_Pba_Apply+0xa00>
 801a860:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801a862:	2800      	cmp	r0, #0
 801a864:	f43f ac10 	beq.w	801a088 <Argus_Pba_Apply+0x220>
 801a868:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801a86a:	2800      	cmp	r0, #0
 801a86c:	f43f ac0c 	beq.w	801a088 <Argus_Pba_Apply+0x220>
 801a870:	2002      	movs	r0, #2
 801a872:	e580      	b.n	801a376 <Argus_Pba_Apply+0x50e>
 801a874:	88fb      	ldrh	r3, [r7, #6]
 801a876:	f8b1 21b8 	ldrh.w	r2, [r1, #440]	@ 0x1b8
 801a87a:	f8d1 c1b4 	ldr.w	ip, [r1, #436]	@ 0x1b4
 801a87e:	9305      	str	r3, [sp, #20]
 801a880:	1e03      	subs	r3, r0, #0
 801a882:	bf18      	it	ne
 801a884:	2301      	movne	r3, #1
 801a886:	9301      	str	r3, [sp, #4]
 801a888:	e4eb      	b.n	801a262 <Argus_Pba_Apply+0x3fa>
 801a88a:	0277      	lsls	r7, r6, #9
 801a88c:	d066      	beq.n	801a95c <Argus_Pba_Apply+0xaf4>
 801a88e:	ea85 76e5 	eor.w	r6, r5, r5, asr #31
 801a892:	2f00      	cmp	r7, #0
 801a894:	eba6 76e5 	sub.w	r6, r6, r5, asr #31
 801a898:	db76      	blt.n	801a988 <Argus_Pba_Apply+0xb20>
 801a89a:	42b7      	cmp	r7, r6
 801a89c:	4638      	mov	r0, r7
 801a89e:	f080 80cf 	bcs.w	801aa40 <Argus_Pba_Apply+0xbd8>
 801a8a2:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 801a8a6:	0040      	lsls	r0, r0, #1
 801a8a8:	42b0      	cmp	r0, r6
 801a8aa:	ea4f 0444 	mov.w	r4, r4, lsl #1
 801a8ae:	d3fa      	bcc.n	801a8a6 <Argus_Pba_Apply+0xa3e>
 801a8b0:	2c00      	cmp	r4, #0
 801a8b2:	d16f      	bne.n	801a994 <Argus_Pba_Apply+0xb2c>
 801a8b4:	ea97 0f05 	teq	r7, r5
 801a8b8:	bf54      	ite	pl
 801a8ba:	f06f 4c00 	mvnpl.w	ip, #2147483648	@ 0x80000000
 801a8be:	f04f 4c00 	movmi.w	ip, #2147483648	@ 0x80000000
 801a8c2:	9807      	ldr	r0, [sp, #28]
 801a8c4:	f1c0 051f 	rsb	r5, r0, #31
 801a8c8:	fa0c fc05 	lsl.w	ip, ip, r5
 801a8cc:	e47c      	b.n	801a1c8 <Argus_Pba_Apply+0x360>
 801a8ce:	f00a 0040 	and.w	r0, sl, #64	@ 0x40
 801a8d2:	bb66      	cbnz	r6, 801a92e <Argus_Pba_Apply+0xac6>
 801a8d4:	3800      	subs	r0, #0
 801a8d6:	bf18      	it	ne
 801a8d8:	2001      	movne	r0, #1
 801a8da:	9007      	str	r0, [sp, #28]
 801a8dc:	e71c      	b.n	801a718 <Argus_Pba_Apply+0x8b0>
 801a8de:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801a8e0:	2800      	cmp	r0, #0
 801a8e2:	f43f add7 	beq.w	801a494 <Argus_Pba_Apply+0x62c>
 801a8e6:	9807      	ldr	r0, [sp, #28]
 801a8e8:	2800      	cmp	r0, #0
 801a8ea:	d1bd      	bne.n	801a868 <Argus_Pba_Apply+0xa00>
 801a8ec:	f7ff bbcc 	b.w	801a088 <Argus_Pba_Apply+0x220>
 801a8f0:	eb04 10c9 	add.w	r0, r4, r9, lsl #7
 801a8f4:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801a8f6:	9013      	str	r0, [sp, #76]	@ 0x4c
 801a8f8:	f1c4 0900 	rsb	r9, r4, #0
 801a8fc:	fa5f f089 	uxtb.w	r0, r9
 801a900:	fb06 f000 	mul.w	r0, r6, r0
 801a904:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a908:	ea4f 2810 	mov.w	r8, r0, lsr #8
 801a90c:	fb06 8809 	mla	r8, r6, r9, r8
 801a910:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 801a914:	4440      	add	r0, r8
 801a916:	f1c0 0900 	rsb	r9, r0, #0
 801a91a:	e770      	b.n	801a7fe <Argus_Pba_Apply+0x996>
 801a91c:	4285      	cmp	r5, r0
 801a91e:	d956      	bls.n	801a9ce <Argus_Pba_Apply+0xb66>
 801a920:	0864      	lsrs	r4, r4, #1
 801a922:	ea4f 0555 	mov.w	r5, r5, lsr #1
 801a926:	f47f adfa 	bne.w	801a51e <Argus_Pba_Apply+0x6b6>
 801a92a:	46a4      	mov	ip, r4
 801a92c:	e605      	b.n	801a53a <Argus_Pba_Apply+0x6d2>
 801a92e:	2800      	cmp	r0, #0
 801a930:	f47f aef2 	bne.w	801a718 <Argus_Pba_Apply+0x8b0>
 801a934:	9c03      	ldr	r4, [sp, #12]
 801a936:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a938:	9e02      	ldr	r6, [sp, #8]
 801a93a:	4420      	add	r0, r4
 801a93c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801a93e:	0100      	lsls	r0, r0, #4
 801a940:	4434      	add	r4, r6
 801a942:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 801a946:	4408      	add	r0, r1
 801a948:	2400      	movs	r4, #0
 801a94a:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 801a94c:	9015      	str	r0, [sp, #84]	@ 0x54
 801a94e:	f00a 0004 	and.w	r0, sl, #4
 801a952:	9011      	str	r0, [sp, #68]	@ 0x44
 801a954:	9407      	str	r4, [sp, #28]
 801a956:	900f      	str	r0, [sp, #60]	@ 0x3c
 801a958:	9412      	str	r4, [sp, #72]	@ 0x48
 801a95a:	e6f8      	b.n	801a74e <Argus_Pba_Apply+0x8e6>
 801a95c:	2d00      	cmp	r5, #0
 801a95e:	bfac      	ite	ge
 801a960:	f06f 4c00 	mvnge.w	ip, #2147483648	@ 0x80000000
 801a964:	f04f 4c00 	movlt.w	ip, #2147483648	@ 0x80000000
 801a968:	e7ab      	b.n	801a8c2 <Argus_Pba_Apply+0xa5a>
 801a96a:	2d00      	cmp	r5, #0
 801a96c:	bfac      	ite	ge
 801a96e:	f06f 4c00 	mvnge.w	ip, #2147483648	@ 0x80000000
 801a972:	f04f 4c00 	movlt.w	ip, #2147483648	@ 0x80000000
 801a976:	e68e      	b.n	801a696 <Argus_Pba_Apply+0x82e>
 801a978:	ea97 0f06 	teq	r7, r6
 801a97c:	4684      	mov	ip, r0
 801a97e:	f57f ac23 	bpl.w	801a1c8 <Argus_Pba_Apply+0x360>
 801a982:	f1cc 0c00 	rsb	ip, ip, #0
 801a986:	e41f      	b.n	801a1c8 <Argus_Pba_Apply+0x360>
 801a988:	4278      	negs	r0, r7
 801a98a:	42b0      	cmp	r0, r6
 801a98c:	bf28      	it	cs
 801a98e:	f44f 3480 	movcs.w	r4, #65536	@ 0x10000
 801a992:	d386      	bcc.n	801a8a2 <Argus_Pba_Apply+0xa3a>
 801a994:	2800      	cmp	r0, #0
 801a996:	db4b      	blt.n	801aa30 <Argus_Pba_Apply+0xbc8>
 801a998:	f04f 0c00 	mov.w	ip, #0
 801a99c:	b90e      	cbnz	r6, 801a9a2 <Argus_Pba_Apply+0xb3a>
 801a99e:	e060      	b.n	801aa62 <Argus_Pba_Apply+0xbfa>
 801a9a0:	b166      	cbz	r6, 801a9bc <Argus_Pba_Apply+0xb54>
 801a9a2:	4286      	cmp	r6, r0
 801a9a4:	bf24      	itt	cs
 801a9a6:	1a36      	subcs	r6, r6, r0
 801a9a8:	ea4c 0c04 	orrcs.w	ip, ip, r4
 801a9ac:	0864      	lsrs	r4, r4, #1
 801a9ae:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801a9b2:	d1f5      	bne.n	801a9a0 <Argus_Pba_Apply+0xb38>
 801a9b4:	42b0      	cmp	r0, r6
 801a9b6:	d801      	bhi.n	801a9bc <Argus_Pba_Apply+0xb54>
 801a9b8:	f10c 0c01 	add.w	ip, ip, #1
 801a9bc:	ea97 0f05 	teq	r7, r5
 801a9c0:	d454      	bmi.n	801aa6c <Argus_Pba_Apply+0xc04>
 801a9c2:	f1bc 0f00 	cmp.w	ip, #0
 801a9c6:	bfb8      	it	lt
 801a9c8:	f06f 4c00 	mvnlt.w	ip, #2147483648	@ 0x80000000
 801a9cc:	e779      	b.n	801a8c2 <Argus_Pba_Apply+0xa5a>
 801a9ce:	46a4      	mov	ip, r4
 801a9d0:	e5b7      	b.n	801a542 <Argus_Pba_Apply+0x6da>
 801a9d2:	2001      	movs	r0, #1
 801a9d4:	940f      	str	r4, [sp, #60]	@ 0x3c
 801a9d6:	9012      	str	r0, [sp, #72]	@ 0x48
 801a9d8:	e6b9      	b.n	801a74e <Argus_Pba_Apply+0x8e6>
 801a9da:	2800      	cmp	r0, #0
 801a9dc:	da06      	bge.n	801a9ec <Argus_Pba_Apply+0xb84>
 801a9de:	4287      	cmp	r7, r0
 801a9e0:	d031      	beq.n	801aa46 <Argus_Pba_Apply+0xbde>
 801a9e2:	f03c 4400 	bics.w	r4, ip, #2147483648	@ 0x80000000
 801a9e6:	f02e 4000 	bic.w	r0, lr, #2147483648	@ 0x80000000
 801a9ea:	d04b      	beq.n	801aa84 <Argus_Pba_Apply+0xc1c>
 801a9ec:	f04f 0c00 	mov.w	ip, #0
 801a9f0:	e000      	b.n	801a9f4 <Argus_Pba_Apply+0xb8c>
 801a9f2:	b167      	cbz	r7, 801aa0e <Argus_Pba_Apply+0xba6>
 801a9f4:	4287      	cmp	r7, r0
 801a9f6:	bf24      	itt	cs
 801a9f8:	1a3f      	subcs	r7, r7, r0
 801a9fa:	ea4c 0c04 	orrcs.w	ip, ip, r4
 801a9fe:	0864      	lsrs	r4, r4, #1
 801aa00:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801aa04:	d1f5      	bne.n	801a9f2 <Argus_Pba_Apply+0xb8a>
 801aa06:	42b8      	cmp	r0, r7
 801aa08:	d801      	bhi.n	801aa0e <Argus_Pba_Apply+0xba6>
 801aa0a:	f10c 0c01 	add.w	ip, ip, #1
 801aa0e:	ea96 0f05 	teq	r6, r5
 801aa12:	d423      	bmi.n	801aa5c <Argus_Pba_Apply+0xbf4>
 801aa14:	f1bc 0f00 	cmp.w	ip, #0
 801aa18:	bfb8      	it	lt
 801aa1a:	f06f 4c00 	mvnlt.w	ip, #2147483648	@ 0x80000000
 801aa1e:	e63a      	b.n	801a696 <Argus_Pba_Apply+0x82e>
 801aa20:	f04f 34ff 	mov.w	r4, #4294967295
 801aa24:	f06f 066d 	mvn.w	r6, #109	@ 0x6d
 801aa28:	e4b5      	b.n	801a396 <Argus_Pba_Apply+0x52e>
 801aa2a:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 801aa2e:	e576      	b.n	801a51e <Argus_Pba_Apply+0x6b6>
 801aa30:	42b0      	cmp	r0, r6
 801aa32:	d91e      	bls.n	801aa72 <Argus_Pba_Apply+0xc0a>
 801aa34:	0864      	lsrs	r4, r4, #1
 801aa36:	ea4f 0050 	mov.w	r0, r0, lsr #1
 801aa3a:	d1ad      	bne.n	801a998 <Argus_Pba_Apply+0xb30>
 801aa3c:	46a4      	mov	ip, r4
 801aa3e:	e7b9      	b.n	801a9b4 <Argus_Pba_Apply+0xb4c>
 801aa40:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 801aa44:	e7a8      	b.n	801a998 <Argus_Pba_Apply+0xb30>
 801aa46:	46a4      	mov	ip, r4
 801aa48:	e7e1      	b.n	801aa0e <Argus_Pba_Apply+0xba6>
 801aa4a:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 801aa4e:	2f00      	cmp	r7, #0
 801aa50:	d1cc      	bne.n	801a9ec <Argus_Pba_Apply+0xb84>
 801aa52:	ea96 0f05 	teq	r6, r5
 801aa56:	46bc      	mov	ip, r7
 801aa58:	f57f ae1d 	bpl.w	801a696 <Argus_Pba_Apply+0x82e>
 801aa5c:	f1cc 0c00 	rsb	ip, ip, #0
 801aa60:	e619      	b.n	801a696 <Argus_Pba_Apply+0x82e>
 801aa62:	ea97 0f05 	teq	r7, r5
 801aa66:	46b4      	mov	ip, r6
 801aa68:	f57f af2b 	bpl.w	801a8c2 <Argus_Pba_Apply+0xa5a>
 801aa6c:	f1cc 0c00 	rsb	ip, ip, #0
 801aa70:	e727      	b.n	801a8c2 <Argus_Pba_Apply+0xa5a>
 801aa72:	46a4      	mov	ip, r4
 801aa74:	e7a2      	b.n	801a9bc <Argus_Pba_Apply+0xb54>
 801aa76:	88fa      	ldrh	r2, [r7, #6]
 801aa78:	9205      	str	r2, [sp, #20]
 801aa7a:	9301      	str	r3, [sp, #4]
 801aa7c:	f8b1 21b8 	ldrh.w	r2, [r1, #440]	@ 0x1b8
 801aa80:	f7ff bbea 	b.w	801a258 <Argus_Pba_Apply+0x3f0>
 801aa84:	46a4      	mov	ip, r4
 801aa86:	e7be      	b.n	801aa06 <Argus_Pba_Apply+0xb9e>

0801aa88 <Argus_Pba_ApplyPreFilter>:
 801aa88:	68c3      	ldr	r3, [r0, #12]
 801aa8a:	f501 70d4 	add.w	r0, r1, #424	@ 0x1a8
 801aa8e:	699a      	ldr	r2, [r3, #24]
 801aa90:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 801aa94:	f012 0f01 	tst.w	r2, #1
 801aa98:	7a19      	ldrb	r1, [r3, #8]
 801aa9a:	f103 030c 	add.w	r3, r3, #12
 801aa9e:	d008      	beq.n	801aab2 <Argus_Pba_ApplyPreFilter+0x2a>
 801aaa0:	f041 0110 	orr.w	r1, r1, #16
 801aaa4:	4283      	cmp	r3, r0
 801aaa6:	f803 1c04 	strb.w	r1, [r3, #-4]
 801aaaa:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801aaae:	d1f1      	bne.n	801aa94 <Argus_Pba_ApplyPreFilter+0xc>
 801aab0:	4770      	bx	lr
 801aab2:	f021 0110 	bic.w	r1, r1, #16
 801aab6:	4283      	cmp	r3, r0
 801aab8:	f803 1c04 	strb.w	r1, [r3, #-4]
 801aabc:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801aac0:	d1e8      	bne.n	801aa94 <Argus_Pba_ApplyPreFilter+0xc>
 801aac2:	4770      	bx	lr

0801aac4 <Argus_Eval_Trapezoidal>:
 801aac4:	684a      	ldr	r2, [r1, #4]
 801aac6:	2a00      	cmp	r2, #0
 801aac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aaca:	dd41      	ble.n	801ab50 <Argus_Eval_Trapezoidal+0x8c>
 801aacc:	680c      	ldr	r4, [r1, #0]
 801aace:	2c00      	cmp	r4, #0
 801aad0:	db2a      	blt.n	801ab28 <Argus_Eval_Trapezoidal+0x64>
 801aad2:	42a2      	cmp	r2, r4
 801aad4:	4616      	mov	r6, r2
 801aad6:	bfb8      	it	lt
 801aad8:	4626      	movlt	r6, r4
 801aada:	4635      	mov	r5, r6
 801aadc:	1aa4      	subs	r4, r4, r2
 801aade:	f44f 3740 	mov.w	r7, #196608	@ 0x30000
 801aae2:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
 801aae6:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 801aaea:	428d      	cmp	r5, r1
 801aaec:	f080 8087 	bcs.w	801abfe <Argus_Eval_Trapezoidal+0x13a>
 801aaf0:	462a      	mov	r2, r5
 801aaf2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801aaf6:	4696      	mov	lr, r2
 801aaf8:	0052      	lsls	r2, r2, #1
 801aafa:	428a      	cmp	r2, r1
 801aafc:	469c      	mov	ip, r3
 801aafe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ab02:	d3f8      	bcc.n	801aaf6 <Argus_Eval_Trapezoidal+0x32>
 801ab04:	bb8b      	cbnz	r3, 801ab6a <Argus_Eval_Trapezoidal+0xa6>
 801ab06:	ea94 0f06 	teq	r4, r6
 801ab0a:	f100 8082 	bmi.w	801ac12 <Argus_Eval_Trapezoidal+0x14e>
 801ab0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801ab12:	f3c5 23c0 	ubfx	r3, r5, #11, #1
 801ab16:	eb13 3315 	adds.w	r3, r3, r5, lsr #12
 801ab1a:	d10e      	bne.n	801ab3a <Argus_Eval_Trapezoidal+0x76>
 801ab1c:	7a02      	ldrb	r2, [r0, #8]
 801ab1e:	6043      	str	r3, [r0, #4]
 801ab20:	f042 0308 	orr.w	r3, r2, #8
 801ab24:	7203      	strb	r3, [r0, #8]
 801ab26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab28:	4266      	negs	r6, r4
 801ab2a:	4296      	cmp	r6, r2
 801ab2c:	bfb8      	it	lt
 801ab2e:	4616      	movlt	r6, r2
 801ab30:	4635      	mov	r5, r6
 801ab32:	4414      	add	r4, r2
 801ab34:	f44f 3780 	mov.w	r7, #65536	@ 0x10000
 801ab38:	e7d3      	b.n	801aae2 <Argus_Eval_Trapezoidal+0x1e>
 801ab3a:	f64f 71f0 	movw	r1, #65520	@ 0xfff0
 801ab3e:	428b      	cmp	r3, r1
 801ab40:	d946      	bls.n	801abd0 <Argus_Eval_Trapezoidal+0x10c>
 801ab42:	7a03      	ldrb	r3, [r0, #8]
 801ab44:	8082      	strh	r2, [r0, #4]
 801ab46:	f043 0302 	orr.w	r3, r3, #2
 801ab4a:	80c1      	strh	r1, [r0, #6]
 801ab4c:	7203      	strb	r3, [r0, #8]
 801ab4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab50:	680b      	ldr	r3, [r1, #0]
 801ab52:	2b00      	cmp	r3, #0
 801ab54:	dd3f      	ble.n	801abd6 <Argus_Eval_Trapezoidal+0x112>
 801ab56:	4252      	negs	r2, r2
 801ab58:	4293      	cmp	r3, r2
 801ab5a:	461e      	mov	r6, r3
 801ab5c:	bfb8      	it	lt
 801ab5e:	4616      	movlt	r6, r2
 801ab60:	4635      	mov	r5, r6
 801ab62:	1ad4      	subs	r4, r2, r3
 801ab64:	f44f 27a0 	mov.w	r7, #327680	@ 0x50000
 801ab68:	e7bb      	b.n	801aae2 <Argus_Eval_Trapezoidal+0x1e>
 801ab6a:	2a00      	cmp	r2, #0
 801ab6c:	da05      	bge.n	801ab7a <Argus_Eval_Trapezoidal+0xb6>
 801ab6e:	428a      	cmp	r2, r1
 801ab70:	d04b      	beq.n	801ac0a <Argus_Eval_Trapezoidal+0x146>
 801ab72:	f03c 4300 	bics.w	r3, ip, #2147483648	@ 0x80000000
 801ab76:	4672      	mov	r2, lr
 801ab78:	d049      	beq.n	801ac0e <Argus_Eval_Trapezoidal+0x14a>
 801ab7a:	f04f 0c00 	mov.w	ip, #0
 801ab7e:	e000      	b.n	801ab82 <Argus_Eval_Trapezoidal+0xbe>
 801ab80:	b161      	cbz	r1, 801ab9c <Argus_Eval_Trapezoidal+0xd8>
 801ab82:	4291      	cmp	r1, r2
 801ab84:	bf24      	itt	cs
 801ab86:	1a89      	subcs	r1, r1, r2
 801ab88:	ea4c 0c03 	orrcs.w	ip, ip, r3
 801ab8c:	085b      	lsrs	r3, r3, #1
 801ab8e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801ab92:	d1f5      	bne.n	801ab80 <Argus_Eval_Trapezoidal+0xbc>
 801ab94:	428a      	cmp	r2, r1
 801ab96:	d801      	bhi.n	801ab9c <Argus_Eval_Trapezoidal+0xd8>
 801ab98:	f10c 0c01 	add.w	ip, ip, #1
 801ab9c:	ea94 0f06 	teq	r4, r6
 801aba0:	d40c      	bmi.n	801abbc <Argus_Eval_Trapezoidal+0xf8>
 801aba2:	f1bc 0f00 	cmp.w	ip, #0
 801aba6:	dbb2      	blt.n	801ab0e <Argus_Eval_Trapezoidal+0x4a>
 801aba8:	4467      	add	r7, ip
 801abaa:	f3c7 0380 	ubfx	r3, r7, #2, #1
 801abae:	eb03 02d7 	add.w	r2, r3, r7, lsr #3
 801abb2:	e7ae      	b.n	801ab12 <Argus_Eval_Trapezoidal+0x4e>
 801abb4:	ea94 0f06 	teq	r4, r6
 801abb8:	d5f7      	bpl.n	801abaa <Argus_Eval_Trapezoidal+0xe6>
 801abba:	468c      	mov	ip, r1
 801abbc:	ebb7 070c 	subs.w	r7, r7, ip
 801abc0:	d5f3      	bpl.n	801abaa <Argus_Eval_Trapezoidal+0xe6>
 801abc2:	427f      	negs	r7, r7
 801abc4:	f3c7 0280 	ubfx	r2, r7, #2, #1
 801abc8:	eb02 02d7 	add.w	r2, r2, r7, lsr #3
 801abcc:	4252      	negs	r2, r2
 801abce:	e7a0      	b.n	801ab12 <Argus_Eval_Trapezoidal+0x4e>
 801abd0:	8082      	strh	r2, [r0, #4]
 801abd2:	80c3      	strh	r3, [r0, #6]
 801abd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801abd6:	429a      	cmp	r2, r3
 801abd8:	da05      	bge.n	801abe6 <Argus_Eval_Trapezoidal+0x122>
 801abda:	4256      	negs	r6, r2
 801abdc:	4635      	mov	r5, r6
 801abde:	1ad4      	subs	r4, r2, r3
 801abe0:	f44f 27e0 	mov.w	r7, #458752	@ 0x70000
 801abe4:	e77d      	b.n	801aae2 <Argus_Eval_Trapezoidal+0x1e>
 801abe6:	425d      	negs	r5, r3
 801abe8:	462e      	mov	r6, r5
 801abea:	1ad4      	subs	r4, r2, r3
 801abec:	b9cb      	cbnz	r3, 801ac22 <Argus_Eval_Trapezoidal+0x15e>
 801abee:	4a0e      	ldr	r2, [pc, #56]	@ (801ac28 <Argus_Eval_Trapezoidal+0x164>)
 801abf0:	490e      	ldr	r1, [pc, #56]	@ (801ac2c <Argus_Eval_Trapezoidal+0x168>)
 801abf2:	461d      	mov	r5, r3
 801abf4:	ea12 0224 	ands.w	r2, r2, r4, asr #32
 801abf8:	bf38      	it	cc
 801abfa:	460a      	movcc	r2, r1
 801abfc:	e789      	b.n	801ab12 <Argus_Eval_Trapezoidal+0x4e>
 801abfe:	2900      	cmp	r1, #0
 801ac00:	d0d8      	beq.n	801abb4 <Argus_Eval_Trapezoidal+0xf0>
 801ac02:	462a      	mov	r2, r5
 801ac04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801ac08:	e7b7      	b.n	801ab7a <Argus_Eval_Trapezoidal+0xb6>
 801ac0a:	469c      	mov	ip, r3
 801ac0c:	e7c6      	b.n	801ab9c <Argus_Eval_Trapezoidal+0xd8>
 801ac0e:	469c      	mov	ip, r3
 801ac10:	e7c0      	b.n	801ab94 <Argus_Eval_Trapezoidal+0xd0>
 801ac12:	f1c7 4700 	rsb	r7, r7, #2147483648	@ 0x80000000
 801ac16:	f3c7 0280 	ubfx	r2, r7, #2, #1
 801ac1a:	eb02 02d7 	add.w	r2, r2, r7, lsr #3
 801ac1e:	4252      	negs	r2, r2
 801ac20:	e777      	b.n	801ab12 <Argus_Eval_Trapezoidal+0x4e>
 801ac22:	f44f 27e0 	mov.w	r7, #458752	@ 0x70000
 801ac26:	e75c      	b.n	801aae2 <Argus_Eval_Trapezoidal+0x1e>
 801ac28:	f000e000 	.word	0xf000e000
 801ac2c:	1000e000 	.word	0x1000e000

0801ac30 <Argus_Eval_Triangular>:
 801ac30:	e9d1 2300 	ldrd	r2, r3, [r1]
 801ac34:	2b00      	cmp	r3, #0
 801ac36:	b530      	push	{r4, r5, lr}
 801ac38:	dd6f      	ble.n	801ad1a <Argus_Eval_Triangular+0xea>
 801ac3a:	2a00      	cmp	r2, #0
 801ac3c:	db29      	blt.n	801ac92 <Argus_Eval_Triangular+0x62>
 801ac3e:	eb02 0c03 	add.w	ip, r2, r3
 801ac42:	eba2 0e03 	sub.w	lr, r2, r3
 801ac46:	f44f 3540 	mov.w	r5, #196608	@ 0x30000
 801ac4a:	ea8e 71ee 	eor.w	r1, lr, lr, asr #31
 801ac4e:	f1bc 0f00 	cmp.w	ip, #0
 801ac52:	eba1 71ee 	sub.w	r1, r1, lr, asr #31
 801ac56:	db29      	blt.n	801acac <Argus_Eval_Triangular+0x7c>
 801ac58:	4561      	cmp	r1, ip
 801ac5a:	4663      	mov	r3, ip
 801ac5c:	f240 808b 	bls.w	801ad76 <Argus_Eval_Triangular+0x146>
 801ac60:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801ac64:	005b      	lsls	r3, r3, #1
 801ac66:	428b      	cmp	r3, r1
 801ac68:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801ac6c:	d3fa      	bcc.n	801ac64 <Argus_Eval_Triangular+0x34>
 801ac6e:	bb22      	cbnz	r2, 801acba <Argus_Eval_Triangular+0x8a>
 801ac70:	ea9e 0f0c 	teq	lr, ip
 801ac74:	f100 8082 	bmi.w	801ad7c <Argus_Eval_Triangular+0x14c>
 801ac78:	f04f 5480 	mov.w	r4, #268435456	@ 0x10000000
 801ac7c:	f3cc 3300 	ubfx	r3, ip, #12, #1
 801ac80:	eb13 335c 	adds.w	r3, r3, ip, lsr #13
 801ac84:	d13e      	bne.n	801ad04 <Argus_Eval_Triangular+0xd4>
 801ac86:	7a02      	ldrb	r2, [r0, #8]
 801ac88:	6043      	str	r3, [r0, #4]
 801ac8a:	f042 0308 	orr.w	r3, r2, #8
 801ac8e:	7203      	strb	r3, [r0, #8]
 801ac90:	bd30      	pop	{r4, r5, pc}
 801ac92:	eb03 0e02 	add.w	lr, r3, r2
 801ac96:	eba3 0c02 	sub.w	ip, r3, r2
 801ac9a:	ea8e 71ee 	eor.w	r1, lr, lr, asr #31
 801ac9e:	f1bc 0f00 	cmp.w	ip, #0
 801aca2:	f44f 3580 	mov.w	r5, #65536	@ 0x10000
 801aca6:	eba1 71ee 	sub.w	r1, r1, lr, asr #31
 801acaa:	dad5      	bge.n	801ac58 <Argus_Eval_Triangular+0x28>
 801acac:	f1cc 0300 	rsb	r3, ip, #0
 801acb0:	428b      	cmp	r3, r1
 801acb2:	bf28      	it	cs
 801acb4:	f44f 3280 	movcs.w	r2, #65536	@ 0x10000
 801acb8:	d3d2      	bcc.n	801ac60 <Argus_Eval_Triangular+0x30>
 801acba:	2b00      	cmp	r3, #0
 801acbc:	db49      	blt.n	801ad52 <Argus_Eval_Triangular+0x122>
 801acbe:	460c      	mov	r4, r1
 801acc0:	b151      	cbz	r1, 801acd8 <Argus_Eval_Triangular+0xa8>
 801acc2:	2400      	movs	r4, #0
 801acc4:	e000      	b.n	801acc8 <Argus_Eval_Triangular+0x98>
 801acc6:	b139      	cbz	r1, 801acd8 <Argus_Eval_Triangular+0xa8>
 801acc8:	4299      	cmp	r1, r3
 801acca:	bf24      	itt	cs
 801accc:	1ac9      	subcs	r1, r1, r3
 801acce:	4314      	orrcs	r4, r2
 801acd0:	0852      	lsrs	r2, r2, #1
 801acd2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801acd6:	d1f6      	bne.n	801acc6 <Argus_Eval_Triangular+0x96>
 801acd8:	4299      	cmp	r1, r3
 801acda:	d300      	bcc.n	801acde <Argus_Eval_Triangular+0xae>
 801acdc:	3401      	adds	r4, #1
 801acde:	ea9e 0f0c 	teq	lr, ip
 801ace2:	d442      	bmi.n	801ad6a <Argus_Eval_Triangular+0x13a>
 801ace4:	2c00      	cmp	r4, #0
 801ace6:	dbc7      	blt.n	801ac78 <Argus_Eval_Triangular+0x48>
 801ace8:	1964      	adds	r4, r4, r5
 801acea:	d54c      	bpl.n	801ad86 <Argus_Eval_Triangular+0x156>
 801acec:	4264      	negs	r4, r4
 801acee:	f3c4 0380 	ubfx	r3, r4, #2, #1
 801acf2:	eb03 04d4 	add.w	r4, r3, r4, lsr #3
 801acf6:	f3cc 3300 	ubfx	r3, ip, #12, #1
 801acfa:	eb13 335c 	adds.w	r3, r3, ip, lsr #13
 801acfe:	f1c4 0400 	rsb	r4, r4, #0
 801ad02:	d0c0      	beq.n	801ac86 <Argus_Eval_Triangular+0x56>
 801ad04:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 801ad08:	4293      	cmp	r3, r2
 801ad0a:	d91f      	bls.n	801ad4c <Argus_Eval_Triangular+0x11c>
 801ad0c:	7a03      	ldrb	r3, [r0, #8]
 801ad0e:	8084      	strh	r4, [r0, #4]
 801ad10:	f043 0302 	orr.w	r3, r3, #2
 801ad14:	80c2      	strh	r2, [r0, #6]
 801ad16:	7203      	strb	r3, [r0, #8]
 801ad18:	bd30      	pop	{r4, r5, pc}
 801ad1a:	2a00      	cmp	r2, #0
 801ad1c:	dd08      	ble.n	801ad30 <Argus_Eval_Triangular+0x100>
 801ad1e:	f1c3 0e00 	rsb	lr, r3, #0
 801ad22:	eba2 0c03 	sub.w	ip, r2, r3
 801ad26:	ebae 0e02 	sub.w	lr, lr, r2
 801ad2a:	f44f 25a0 	mov.w	r5, #327680	@ 0x50000
 801ad2e:	e78c      	b.n	801ac4a <Argus_Eval_Triangular+0x1a>
 801ad30:	f1c3 0c00 	rsb	ip, r3, #0
 801ad34:	ebbc 0c02 	subs.w	ip, ip, r2
 801ad38:	eba3 0e02 	sub.w	lr, r3, r2
 801ad3c:	d128      	bne.n	801ad90 <Argus_Eval_Triangular+0x160>
 801ad3e:	4c16      	ldr	r4, [pc, #88]	@ (801ad98 <Argus_Eval_Triangular+0x168>)
 801ad40:	4b16      	ldr	r3, [pc, #88]	@ (801ad9c <Argus_Eval_Triangular+0x16c>)
 801ad42:	ea14 042e 	ands.w	r4, r4, lr, asr #32
 801ad46:	bf38      	it	cc
 801ad48:	461c      	movcc	r4, r3
 801ad4a:	e797      	b.n	801ac7c <Argus_Eval_Triangular+0x4c>
 801ad4c:	8084      	strh	r4, [r0, #4]
 801ad4e:	80c3      	strh	r3, [r0, #6]
 801ad50:	bd30      	pop	{r4, r5, pc}
 801ad52:	4299      	cmp	r1, r3
 801ad54:	d20b      	bcs.n	801ad6e <Argus_Eval_Triangular+0x13e>
 801ad56:	0852      	lsrs	r2, r2, #1
 801ad58:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801ad5c:	d009      	beq.n	801ad72 <Argus_Eval_Triangular+0x142>
 801ad5e:	2900      	cmp	r1, #0
 801ad60:	d1af      	bne.n	801acc2 <Argus_Eval_Triangular+0x92>
 801ad62:	ea9e 0f0c 	teq	lr, ip
 801ad66:	460c      	mov	r4, r1
 801ad68:	d5be      	bpl.n	801ace8 <Argus_Eval_Triangular+0xb8>
 801ad6a:	4264      	negs	r4, r4
 801ad6c:	e7bc      	b.n	801ace8 <Argus_Eval_Triangular+0xb8>
 801ad6e:	4614      	mov	r4, r2
 801ad70:	e7b5      	b.n	801acde <Argus_Eval_Triangular+0xae>
 801ad72:	4614      	mov	r4, r2
 801ad74:	e7b0      	b.n	801acd8 <Argus_Eval_Triangular+0xa8>
 801ad76:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801ad7a:	e7a0      	b.n	801acbe <Argus_Eval_Triangular+0x8e>
 801ad7c:	f1c5 4400 	rsb	r4, r5, #2147483648	@ 0x80000000
 801ad80:	08e4      	lsrs	r4, r4, #3
 801ad82:	4264      	negs	r4, r4
 801ad84:	e77a      	b.n	801ac7c <Argus_Eval_Triangular+0x4c>
 801ad86:	f3c4 0380 	ubfx	r3, r4, #2, #1
 801ad8a:	eb03 04d4 	add.w	r4, r3, r4, lsr #3
 801ad8e:	e775      	b.n	801ac7c <Argus_Eval_Triangular+0x4c>
 801ad90:	f44f 25e0 	mov.w	r5, #458752	@ 0x70000
 801ad94:	e759      	b.n	801ac4a <Argus_Eval_Triangular+0x1a>
 801ad96:	bf00      	nop
 801ad98:	f000e000 	.word	0xf000e000
 801ad9c:	1000e000 	.word	0x1000e000

0801ada0 <fp_div16.part.0>:
 801ada0:	b410      	push	{r4}
 801ada2:	2900      	cmp	r1, #0
 801ada4:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
 801ada8:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
 801adac:	db14      	blt.n	801add8 <fp_div16.part.0+0x38>
 801adae:	42a1      	cmp	r1, r4
 801adb0:	460a      	mov	r2, r1
 801adb2:	d248      	bcs.n	801ae46 <fp_div16.part.0+0xa6>
 801adb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801adb8:	0052      	lsls	r2, r2, #1
 801adba:	42a2      	cmp	r2, r4
 801adbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801adc0:	d3fa      	bcc.n	801adb8 <fp_div16.part.0+0x18>
 801adc2:	b97b      	cbnz	r3, 801ade4 <fp_div16.part.0+0x44>
 801adc4:	ea90 0f01 	teq	r0, r1
 801adc8:	bf54      	ite	pl
 801adca:	f06f 4000 	mvnpl.w	r0, #2147483648	@ 0x80000000
 801adce:	f04f 4000 	movmi.w	r0, #2147483648	@ 0x80000000
 801add2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801add6:	4770      	bx	lr
 801add8:	424a      	negs	r2, r1
 801adda:	42a2      	cmp	r2, r4
 801addc:	bf28      	it	cs
 801adde:	f44f 3380 	movcs.w	r3, #65536	@ 0x10000
 801ade2:	d3e7      	bcc.n	801adb4 <fp_div16.part.0+0x14>
 801ade4:	2a00      	cmp	r2, #0
 801ade6:	db1d      	blt.n	801ae24 <fp_div16.part.0+0x84>
 801ade8:	f04f 0c00 	mov.w	ip, #0
 801adec:	b90c      	cbnz	r4, 801adf2 <fp_div16.part.0+0x52>
 801adee:	e02d      	b.n	801ae4c <fp_div16.part.0+0xac>
 801adf0:	b164      	cbz	r4, 801ae0c <fp_div16.part.0+0x6c>
 801adf2:	4294      	cmp	r4, r2
 801adf4:	bf24      	itt	cs
 801adf6:	1aa4      	subcs	r4, r4, r2
 801adf8:	ea4c 0c03 	orrcs.w	ip, ip, r3
 801adfc:	085b      	lsrs	r3, r3, #1
 801adfe:	ea4f 0444 	mov.w	r4, r4, lsl #1
 801ae02:	d1f5      	bne.n	801adf0 <fp_div16.part.0+0x50>
 801ae04:	42a2      	cmp	r2, r4
 801ae06:	d801      	bhi.n	801ae0c <fp_div16.part.0+0x6c>
 801ae08:	f10c 0c01 	add.w	ip, ip, #1
 801ae0c:	ea90 0f01 	teq	r0, r1
 801ae10:	d40e      	bmi.n	801ae30 <fp_div16.part.0+0x90>
 801ae12:	f1bc 0f00 	cmp.w	ip, #0
 801ae16:	bfac      	ite	ge
 801ae18:	4660      	movge	r0, ip
 801ae1a:	f06f 4000 	mvnlt.w	r0, #2147483648	@ 0x80000000
 801ae1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ae22:	4770      	bx	lr
 801ae24:	4294      	cmp	r4, r2
 801ae26:	d308      	bcc.n	801ae3a <fp_div16.part.0+0x9a>
 801ae28:	ea90 0f01 	teq	r0, r1
 801ae2c:	469c      	mov	ip, r3
 801ae2e:	d5f0      	bpl.n	801ae12 <fp_div16.part.0+0x72>
 801ae30:	f1cc 0000 	rsb	r0, ip, #0
 801ae34:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ae38:	4770      	bx	lr
 801ae3a:	085b      	lsrs	r3, r3, #1
 801ae3c:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801ae40:	d1d2      	bne.n	801ade8 <fp_div16.part.0+0x48>
 801ae42:	469c      	mov	ip, r3
 801ae44:	e7de      	b.n	801ae04 <fp_div16.part.0+0x64>
 801ae46:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801ae4a:	e7cd      	b.n	801ade8 <fp_div16.part.0+0x48>
 801ae4c:	4620      	mov	r0, r4
 801ae4e:	e7c0      	b.n	801add2 <fp_div16.part.0+0x32>

0801ae50 <Argus_Dca_Init>:
 801ae50:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ae52:	460f      	mov	r7, r1
 801ae54:	b083      	sub	sp, #12
 801ae56:	4616      	mov	r6, r2
 801ae58:	2100      	movs	r1, #0
 801ae5a:	226c      	movs	r2, #108	@ 0x6c
 801ae5c:	4604      	mov	r4, r0
 801ae5e:	461d      	mov	r5, r3
 801ae60:	f00e fc77 	bl	8029752 <memset>
 801ae64:	a10e      	add	r1, pc, #56	@ (adr r1, 801aea0 <Argus_Dca_Init+0x50>)
 801ae66:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ae6a:	e9cd 0100 	strd	r0, r1, [sp]
 801ae6e:	4b0a      	ldr	r3, [pc, #40]	@ (801ae98 <Argus_Dca_Init+0x48>)
 801ae70:	f8c4 303f 	str.w	r3, [r4, #63]	@ 0x3f
 801ae74:	46ec      	mov	ip, sp
 801ae76:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 801ae7a:	9b08      	ldr	r3, [sp, #32]
 801ae7c:	65e3      	str	r3, [r4, #92]	@ 0x5c
 801ae7e:	4b07      	ldr	r3, [pc, #28]	@ (801ae9c <Argus_Dca_Init+0x4c>)
 801ae80:	62a3      	str	r3, [r4, #40]	@ 0x28
 801ae82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801ae86:	6667      	str	r7, [r4, #100]	@ 0x64
 801ae88:	66a6      	str	r6, [r4, #104]	@ 0x68
 801ae8a:	6625      	str	r5, [r4, #96]	@ 0x60
 801ae8c:	83a3      	strh	r3, [r4, #28]
 801ae8e:	6460      	str	r0, [r4, #68]	@ 0x44
 801ae90:	64a1      	str	r1, [r4, #72]	@ 0x48
 801ae92:	b003      	add	sp, #12
 801ae94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ae96:	bf00      	nop
 801ae98:	28221c0e 	.word	0x28221c0e
 801ae9c:	0001ffff 	.word	0x0001ffff
 801aea0:	d2a0b860 	.word	0xd2a0b860
 801aea4:	e920dde0 	.word	0xe920dde0

0801aea8 <Argus_Dca_CheckCfg>:
 801aea8:	b508      	push	{r3, lr}
 801aeaa:	f990 2000 	ldrsb.w	r2, [r0]
 801aeae:	1c53      	adds	r3, r2, #1
 801aeb0:	b2db      	uxtb	r3, r3
 801aeb2:	2b02      	cmp	r3, #2
 801aeb4:	f200 8107 	bhi.w	801b0c6 <Argus_Dca_CheckCfg+0x21e>
 801aeb8:	f891 c00a 	ldrb.w	ip, [r1, #10]
 801aebc:	7a0b      	ldrb	r3, [r1, #8]
 801aebe:	f1ac 0e02 	sub.w	lr, ip, #2
 801aec2:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 801aec6:	f200 80f7 	bhi.w	801b0b8 <Argus_Dca_CheckCfg+0x210>
 801aeca:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 801aece:	029b      	lsls	r3, r3, #10
 801aed0:	2b00      	cmp	r3, #0
 801aed2:	d006      	beq.n	801aee2 <Argus_Dca_CheckCfg+0x3a>
 801aed4:	db02      	blt.n	801aedc <Argus_Dca_CheckCfg+0x34>
 801aed6:	459c      	cmp	ip, r3
 801aed8:	d903      	bls.n	801aee2 <Argus_Dca_CheckCfg+0x3a>
 801aeda:	e7fe      	b.n	801aeda <Argus_Dca_CheckCfg+0x32>
 801aedc:	425b      	negs	r3, r3
 801aede:	459c      	cmp	ip, r3
 801aee0:	d8fb      	bhi.n	801aeda <Argus_Dca_CheckCfg+0x32>
 801aee2:	2a01      	cmp	r2, #1
 801aee4:	d026      	beq.n	801af34 <Argus_Dca_CheckCfg+0x8c>
 801aee6:	3201      	adds	r2, #1
 801aee8:	d001      	beq.n	801aeee <Argus_Dca_CheckCfg+0x46>
 801aeea:	2000      	movs	r0, #0
 801aeec:	bd08      	pop	{r3, pc}
 801aeee:	8983      	ldrh	r3, [r0, #12]
 801aef0:	2b40      	cmp	r3, #64	@ 0x40
 801aef2:	f200 808a 	bhi.w	801b00a <Argus_Dca_CheckCfg+0x162>
 801aef6:	3b01      	subs	r3, #1
 801aef8:	b29b      	uxth	r3, r3
 801aefa:	f64f 72bf 	movw	r2, #65471	@ 0xffbf
 801aefe:	4293      	cmp	r3, r2
 801af00:	f200 8110 	bhi.w	801b124 <Argus_Dca_CheckCfg+0x27c>
 801af04:	7ac3      	ldrb	r3, [r0, #11]
 801af06:	2b02      	cmp	r3, #2
 801af08:	f200 80b7 	bhi.w	801b07a <Argus_Dca_CheckCfg+0x1d2>
 801af0c:	7d03      	ldrb	r3, [r0, #20]
 801af0e:	2b03      	cmp	r3, #3
 801af10:	f200 8120 	bhi.w	801b154 <Argus_Dca_CheckCfg+0x2ac>
 801af14:	f891 308e 	ldrb.w	r3, [r1, #142]	@ 0x8e
 801af18:	2b02      	cmp	r3, #2
 801af1a:	f000 80a9 	beq.w	801b070 <Argus_Dca_CheckCfg+0x1c8>
 801af1e:	2b03      	cmp	r3, #3
 801af20:	f000 8094 	beq.w	801b04c <Argus_Dca_CheckCfg+0x1a4>
 801af24:	2b01      	cmp	r3, #1
 801af26:	d073      	beq.n	801b010 <Argus_Dca_CheckCfg+0x168>
 801af28:	4894      	ldr	r0, [pc, #592]	@ (801b17c <Argus_Dca_CheckCfg+0x2d4>)
 801af2a:	f7f8 f833 	bl	8012f94 <print>
 801af2e:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801af32:	bd08      	pop	{r3, pc}
 801af34:	7843      	ldrb	r3, [r0, #1]
 801af36:	2b00      	cmp	r3, #0
 801af38:	f000 80b2 	beq.w	801b0a0 <Argus_Dca_CheckCfg+0x1f8>
 801af3c:	7882      	ldrb	r2, [r0, #2]
 801af3e:	4293      	cmp	r3, r2
 801af40:	f200 80ae 	bhi.w	801b0a0 <Argus_Dca_CheckCfg+0x1f8>
 801af44:	78c3      	ldrb	r3, [r0, #3]
 801af46:	429a      	cmp	r2, r3
 801af48:	f200 80aa 	bhi.w	801b0a0 <Argus_Dca_CheckCfg+0x1f8>
 801af4c:	2b21      	cmp	r3, #33	@ 0x21
 801af4e:	f200 80a7 	bhi.w	801b0a0 <Argus_Dca_CheckCfg+0x1f8>
 801af52:	7a83      	ldrb	r3, [r0, #10]
 801af54:	1e5a      	subs	r2, r3, #1
 801af56:	2a01      	cmp	r2, #1
 801af58:	f200 80c2 	bhi.w	801b0e0 <Argus_Dca_CheckCfg+0x238>
 801af5c:	88c3      	ldrh	r3, [r0, #6]
 801af5e:	2b3f      	cmp	r3, #63	@ 0x3f
 801af60:	f240 80ff 	bls.w	801b162 <Argus_Dca_CheckCfg+0x2ba>
 801af64:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801af68:	4563      	cmp	r3, ip
 801af6a:	f200 80ed 	bhi.w	801b148 <Argus_Dca_CheckCfg+0x2a0>
 801af6e:	8882      	ldrh	r2, [r0, #4]
 801af70:	4293      	cmp	r3, r2
 801af72:	f200 809b 	bhi.w	801b0ac <Argus_Dca_CheckCfg+0x204>
 801af76:	4594      	cmp	ip, r2
 801af78:	f0c0 8098 	bcc.w	801b0ac <Argus_Dca_CheckCfg+0x204>
 801af7c:	89c3      	ldrh	r3, [r0, #14]
 801af7e:	2b40      	cmp	r3, #64	@ 0x40
 801af80:	d902      	bls.n	801af88 <Argus_Dca_CheckCfg+0xe0>
 801af82:	069a      	lsls	r2, r3, #26
 801af84:	f040 8086 	bne.w	801b094 <Argus_Dca_CheckCfg+0x1ec>
 801af88:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 801af8c:	f1bc 0f40 	cmp.w	ip, #64	@ 0x40
 801af90:	d902      	bls.n	801af98 <Argus_Dca_CheckCfg+0xf0>
 801af92:	f01c 0f3f 	tst.w	ip, #63	@ 0x3f
 801af96:	d177      	bne.n	801b088 <Argus_Dca_CheckCfg+0x1e0>
 801af98:	8a02      	ldrh	r2, [r0, #16]
 801af9a:	2a40      	cmp	r2, #64	@ 0x40
 801af9c:	d82c      	bhi.n	801aff8 <Argus_Dca_CheckCfg+0x150>
 801af9e:	2b00      	cmp	r3, #0
 801afa0:	f000 80c6 	beq.w	801b130 <Argus_Dca_CheckCfg+0x288>
 801afa4:	f64f 7ec0 	movw	lr, #65472	@ 0xffc0
 801afa8:	4572      	cmp	r2, lr
 801afaa:	f200 80c7 	bhi.w	801b13c <Argus_Dca_CheckCfg+0x294>
 801afae:	4293      	cmp	r3, r2
 801afb0:	f200 80de 	bhi.w	801b170 <Argus_Dca_CheckCfg+0x2c8>
 801afb4:	4563      	cmp	r3, ip
 801afb6:	f200 808d 	bhi.w	801b0d4 <Argus_Dca_CheckCfg+0x22c>
 801afba:	4594      	cmp	ip, r2
 801afbc:	f200 808a 	bhi.w	801b0d4 <Argus_Dca_CheckCfg+0x22c>
 801afc0:	7ac3      	ldrb	r3, [r0, #11]
 801afc2:	2b02      	cmp	r3, #2
 801afc4:	d859      	bhi.n	801b07a <Argus_Dca_CheckCfg+0x1d2>
 801afc6:	f890 c013 	ldrb.w	ip, [r0, #19]
 801afca:	f1bc 0f03 	cmp.w	ip, #3
 801afce:	f200 8094 	bhi.w	801b0fa <Argus_Dca_CheckCfg+0x252>
 801afd2:	7c82      	ldrb	r2, [r0, #18]
 801afd4:	2a03      	cmp	r2, #3
 801afd6:	f200 8097 	bhi.w	801b108 <Argus_Dca_CheckCfg+0x260>
 801afda:	7d03      	ldrb	r3, [r0, #20]
 801afdc:	2b03      	cmp	r3, #3
 801afde:	f200 809a 	bhi.w	801b116 <Argus_Dca_CheckCfg+0x26e>
 801afe2:	429a      	cmp	r2, r3
 801afe4:	d801      	bhi.n	801afea <Argus_Dca_CheckCfg+0x142>
 801afe6:	4594      	cmp	ip, r2
 801afe8:	d994      	bls.n	801af14 <Argus_Dca_CheckCfg+0x6c>
 801afea:	4661      	mov	r1, ip
 801afec:	4864      	ldr	r0, [pc, #400]	@ (801b180 <Argus_Dca_CheckCfg+0x2d8>)
 801afee:	f7f7 ffd1 	bl	8012f94 <print>
 801aff2:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801aff6:	bd08      	pop	{r3, pc}
 801aff8:	f012 0f3f 	tst.w	r2, #63	@ 0x3f
 801affc:	d0cf      	beq.n	801af9e <Argus_Dca_CheckCfg+0xf6>
 801affe:	4861      	ldr	r0, [pc, #388]	@ (801b184 <Argus_Dca_CheckCfg+0x2dc>)
 801b000:	f7f7 ffc8 	bl	8012f94 <print>
 801b004:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801b008:	bd08      	pop	{r3, pc}
 801b00a:	069a      	lsls	r2, r3, #26
 801b00c:	d1f7      	bne.n	801affe <Argus_Dca_CheckCfg+0x156>
 801b00e:	e772      	b.n	801aef6 <Argus_Dca_CheckCfg+0x4e>
 801b010:	f891 2067 	ldrb.w	r2, [r1, #103]	@ 0x67
 801b014:	08d2      	lsrs	r2, r2, #3
 801b016:	f8b1 305f 	ldrh.w	r3, [r1, #95]	@ 0x5f
 801b01a:	f8b1 0080 	ldrh.w	r0, [r1, #128]	@ 0x80
 801b01e:	ba59      	rev16	r1, r3
 801b020:	ba40      	rev16	r0, r0
 801b022:	f3c0 1049 	ubfx	r0, r0, #5, #10
 801b026:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801b02a:	1c43      	adds	r3, r0, #1
 801b02c:	fb00 1001 	mla	r0, r0, r1, r1
 801b030:	fb02 f000 	mul.w	r0, r2, r0
 801b034:	2800      	cmp	r0, #0
 801b036:	d05a      	beq.n	801b0ee <Argus_Dca_CheckCfg+0x246>
 801b038:	f5b0 0ffa 	cmp.w	r0, #8192000	@ 0x7d0000
 801b03c:	f67f af55 	bls.w	801aeea <Argus_Dca_CheckCfg+0x42>
 801b040:	4851      	ldr	r0, [pc, #324]	@ (801b188 <Argus_Dca_CheckCfg+0x2e0>)
 801b042:	f7f7 ffa7 	bl	8012f94 <print>
 801b046:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801b04a:	bd08      	pop	{r3, pc}
 801b04c:	f891 3068 	ldrb.w	r3, [r1, #104]	@ 0x68
 801b050:	f891 0067 	ldrb.w	r0, [r1, #103]	@ 0x67
 801b054:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801b058:	08c2      	lsrs	r2, r0, #3
 801b05a:	ebb3 0fd0 	cmp.w	r3, r0, lsr #3
 801b05e:	bf08      	it	eq
 801b060:	0052      	lsleq	r2, r2, #1
 801b062:	d0d8      	beq.n	801b016 <Argus_Dca_CheckCfg+0x16e>
 801b064:	4849      	ldr	r0, [pc, #292]	@ (801b18c <Argus_Dca_CheckCfg+0x2e4>)
 801b066:	f7f7 ff95 	bl	8012f94 <print>
 801b06a:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801b06e:	bd08      	pop	{r3, pc}
 801b070:	f891 2068 	ldrb.w	r2, [r1, #104]	@ 0x68
 801b074:	f3c2 0244 	ubfx	r2, r2, #1, #5
 801b078:	e7cd      	b.n	801b016 <Argus_Dca_CheckCfg+0x16e>
 801b07a:	4619      	mov	r1, r3
 801b07c:	4844      	ldr	r0, [pc, #272]	@ (801b190 <Argus_Dca_CheckCfg+0x2e8>)
 801b07e:	f7f7 ff89 	bl	8012f94 <print>
 801b082:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801b086:	bd08      	pop	{r3, pc}
 801b088:	4842      	ldr	r0, [pc, #264]	@ (801b194 <Argus_Dca_CheckCfg+0x2ec>)
 801b08a:	f7f7 ff83 	bl	8012f94 <print>
 801b08e:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801b092:	bd08      	pop	{r3, pc}
 801b094:	4840      	ldr	r0, [pc, #256]	@ (801b198 <Argus_Dca_CheckCfg+0x2f0>)
 801b096:	f7f7 ff7d 	bl	8012f94 <print>
 801b09a:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801b09e:	bd08      	pop	{r3, pc}
 801b0a0:	483e      	ldr	r0, [pc, #248]	@ (801b19c <Argus_Dca_CheckCfg+0x2f4>)
 801b0a2:	f7f7 ff77 	bl	8012f94 <print>
 801b0a6:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801b0aa:	bd08      	pop	{r3, pc}
 801b0ac:	483c      	ldr	r0, [pc, #240]	@ (801b1a0 <Argus_Dca_CheckCfg+0x2f8>)
 801b0ae:	f7f7 ff71 	bl	8012f94 <print>
 801b0b2:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801b0b6:	bd08      	pop	{r3, pc}
 801b0b8:	4661      	mov	r1, ip
 801b0ba:	483a      	ldr	r0, [pc, #232]	@ (801b1a4 <Argus_Dca_CheckCfg+0x2fc>)
 801b0bc:	f7f7 ff6a 	bl	8012f94 <print>
 801b0c0:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801b0c4:	bd08      	pop	{r3, pc}
 801b0c6:	4611      	mov	r1, r2
 801b0c8:	4837      	ldr	r0, [pc, #220]	@ (801b1a8 <Argus_Dca_CheckCfg+0x300>)
 801b0ca:	f7f7 ff63 	bl	8012f94 <print>
 801b0ce:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801b0d2:	bd08      	pop	{r3, pc}
 801b0d4:	4835      	ldr	r0, [pc, #212]	@ (801b1ac <Argus_Dca_CheckCfg+0x304>)
 801b0d6:	f7f7 ff5d 	bl	8012f94 <print>
 801b0da:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801b0de:	bd08      	pop	{r3, pc}
 801b0e0:	4619      	mov	r1, r3
 801b0e2:	4833      	ldr	r0, [pc, #204]	@ (801b1b0 <Argus_Dca_CheckCfg+0x308>)
 801b0e4:	f7f7 ff56 	bl	8012f94 <print>
 801b0e8:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801b0ec:	bd08      	pop	{r3, pc}
 801b0ee:	4831      	ldr	r0, [pc, #196]	@ (801b1b4 <Argus_Dca_CheckCfg+0x30c>)
 801b0f0:	f7f7 ff50 	bl	8012f94 <print>
 801b0f4:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801b0f8:	bd08      	pop	{r3, pc}
 801b0fa:	4661      	mov	r1, ip
 801b0fc:	482e      	ldr	r0, [pc, #184]	@ (801b1b8 <Argus_Dca_CheckCfg+0x310>)
 801b0fe:	f7f7 ff49 	bl	8012f94 <print>
 801b102:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801b106:	bd08      	pop	{r3, pc}
 801b108:	4611      	mov	r1, r2
 801b10a:	482c      	ldr	r0, [pc, #176]	@ (801b1bc <Argus_Dca_CheckCfg+0x314>)
 801b10c:	f7f7 ff42 	bl	8012f94 <print>
 801b110:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801b114:	bd08      	pop	{r3, pc}
 801b116:	4619      	mov	r1, r3
 801b118:	4829      	ldr	r0, [pc, #164]	@ (801b1c0 <Argus_Dca_CheckCfg+0x318>)
 801b11a:	f7f7 ff3b 	bl	8012f94 <print>
 801b11e:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801b122:	bd08      	pop	{r3, pc}
 801b124:	4827      	ldr	r0, [pc, #156]	@ (801b1c4 <Argus_Dca_CheckCfg+0x31c>)
 801b126:	f7f7 ff35 	bl	8012f94 <print>
 801b12a:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801b12e:	bd08      	pop	{r3, pc}
 801b130:	4825      	ldr	r0, [pc, #148]	@ (801b1c8 <Argus_Dca_CheckCfg+0x320>)
 801b132:	f7f7 ff2f 	bl	8012f94 <print>
 801b136:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801b13a:	bd08      	pop	{r3, pc}
 801b13c:	4823      	ldr	r0, [pc, #140]	@ (801b1cc <Argus_Dca_CheckCfg+0x324>)
 801b13e:	f7f7 ff29 	bl	8012f94 <print>
 801b142:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801b146:	bd08      	pop	{r3, pc}
 801b148:	4821      	ldr	r0, [pc, #132]	@ (801b1d0 <Argus_Dca_CheckCfg+0x328>)
 801b14a:	f7f7 ff23 	bl	8012f94 <print>
 801b14e:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801b152:	bd08      	pop	{r3, pc}
 801b154:	7c81      	ldrb	r1, [r0, #18]
 801b156:	481f      	ldr	r0, [pc, #124]	@ (801b1d4 <Argus_Dca_CheckCfg+0x32c>)
 801b158:	f7f7 ff1c 	bl	8012f94 <print>
 801b15c:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801b160:	bd08      	pop	{r3, pc}
 801b162:	2104      	movs	r1, #4
 801b164:	481c      	ldr	r0, [pc, #112]	@ (801b1d8 <Argus_Dca_CheckCfg+0x330>)
 801b166:	f7f7 ff15 	bl	8012f94 <print>
 801b16a:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801b16e:	bd08      	pop	{r3, pc}
 801b170:	481a      	ldr	r0, [pc, #104]	@ (801b1dc <Argus_Dca_CheckCfg+0x334>)
 801b172:	f7f7 ff0f 	bl	8012f94 <print>
 801b176:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801b17a:	bd08      	pop	{r3, pc}
 801b17c:	0802ded8 	.word	0x0802ded8
 801b180:	0802ddec 	.word	0x0802ddec
 801b184:	0802db74 	.word	0x0802db74
 801b188:	0802df7c 	.word	0x0802df7c
 801b18c:	0802de70 	.word	0x0802de70
 801b190:	0802dd30 	.word	0x0802dd30
 801b194:	0802db20 	.word	0x0802db20
 801b198:	0802dacc 	.word	0x0802dacc
 801b19c:	0802d920 	.word	0x0802d920
 801b1a0:	0802da68 	.word	0x0802da68
 801b1a4:	0802d8dc 	.word	0x0802d8dc
 801b1a8:	0802d8ac 	.word	0x0802d8ac
 801b1ac:	0802dc7c 	.word	0x0802dc7c
 801b1b0:	0802d9a8 	.word	0x0802d9a8
 801b1b4:	0802defc 	.word	0x0802defc
 801b1b8:	0802dd5c 	.word	0x0802dd5c
 801b1bc:	0802dd8c 	.word	0x0802dd8c
 801b1c0:	0802ddbc 	.word	0x0802ddbc
 801b1c4:	0802dcd4 	.word	0x0802dcd4
 801b1c8:	0802dbc8 	.word	0x0802dbc8
 801b1cc:	0802dbf8 	.word	0x0802dbf8
 801b1d0:	0802da10 	.word	0x0802da10
 801b1d4:	0802de44 	.word	0x0802de44
 801b1d8:	0802d9d4 	.word	0x0802d9d4
 801b1dc:	0802dc28 	.word	0x0802dc28

0801b1e0 <Argus_Dca_PrepareCfg>:
 801b1e0:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 801b1e4:	f890 1050 	ldrb.w	r1, [r0, #80]	@ 0x50
 801b1e8:	f890 2060 	ldrb.w	r2, [r0, #96]	@ 0x60
 801b1ec:	400b      	ands	r3, r1
 801b1ee:	4013      	ands	r3, r2
 801b1f0:	2bff      	cmp	r3, #255	@ 0xff
 801b1f2:	b500      	push	{lr}
 801b1f4:	7b82      	ldrb	r2, [r0, #14]
 801b1f6:	f040 80ea 	bne.w	801b3ce <Argus_Dca_PrepareCfg+0x1ee>
 801b1fa:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 801b1fe:	f890 c04f 	ldrb.w	ip, [r0, #79]	@ 0x4f
 801b202:	f890 105f 	ldrb.w	r1, [r0, #95]	@ 0x5f
 801b206:	ea03 030c 	and.w	r3, r3, ip
 801b20a:	400b      	ands	r3, r1
 801b20c:	2bff      	cmp	r3, #255	@ 0xff
 801b20e:	f040 8123 	bne.w	801b458 <Argus_Dca_PrepareCfg+0x278>
 801b212:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 801b216:	f890 c04e 	ldrb.w	ip, [r0, #78]	@ 0x4e
 801b21a:	f890 105e 	ldrb.w	r1, [r0, #94]	@ 0x5e
 801b21e:	ea03 030c 	and.w	r3, r3, ip
 801b222:	400b      	ands	r3, r1
 801b224:	2bff      	cmp	r3, #255	@ 0xff
 801b226:	f040 811b 	bne.w	801b460 <Argus_Dca_PrepareCfg+0x280>
 801b22a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 801b22e:	f890 c04d 	ldrb.w	ip, [r0, #77]	@ 0x4d
 801b232:	f890 105d 	ldrb.w	r1, [r0, #93]	@ 0x5d
 801b236:	ea03 030c 	and.w	r3, r3, ip
 801b23a:	400b      	ands	r3, r1
 801b23c:	2bff      	cmp	r3, #255	@ 0xff
 801b23e:	f040 8111 	bne.w	801b464 <Argus_Dca_PrepareCfg+0x284>
 801b242:	f890 303b 	ldrb.w	r3, [r0, #59]	@ 0x3b
 801b246:	f890 c04c 	ldrb.w	ip, [r0, #76]	@ 0x4c
 801b24a:	f890 105c 	ldrb.w	r1, [r0, #92]	@ 0x5c
 801b24e:	ea03 030c 	and.w	r3, r3, ip
 801b252:	400b      	ands	r3, r1
 801b254:	2bff      	cmp	r3, #255	@ 0xff
 801b256:	f040 8107 	bne.w	801b468 <Argus_Dca_PrepareCfg+0x288>
 801b25a:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 801b25e:	f890 c04b 	ldrb.w	ip, [r0, #75]	@ 0x4b
 801b262:	f890 105b 	ldrb.w	r1, [r0, #91]	@ 0x5b
 801b266:	ea03 030c 	and.w	r3, r3, ip
 801b26a:	400b      	ands	r3, r1
 801b26c:	2bff      	cmp	r3, #255	@ 0xff
 801b26e:	f040 80fd 	bne.w	801b46c <Argus_Dca_PrepareCfg+0x28c>
 801b272:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 801b276:	f890 c04a 	ldrb.w	ip, [r0, #74]	@ 0x4a
 801b27a:	f890 105a 	ldrb.w	r1, [r0, #90]	@ 0x5a
 801b27e:	ea03 030c 	and.w	r3, r3, ip
 801b282:	400b      	ands	r3, r1
 801b284:	2bff      	cmp	r3, #255	@ 0xff
 801b286:	f040 80f3 	bne.w	801b470 <Argus_Dca_PrepareCfg+0x290>
 801b28a:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 801b28e:	f890 c049 	ldrb.w	ip, [r0, #73]	@ 0x49
 801b292:	f890 1059 	ldrb.w	r1, [r0, #89]	@ 0x59
 801b296:	ea03 030c 	and.w	r3, r3, ip
 801b29a:	400b      	ands	r3, r1
 801b29c:	2bff      	cmp	r3, #255	@ 0xff
 801b29e:	f040 80e9 	bne.w	801b474 <Argus_Dca_PrepareCfg+0x294>
 801b2a2:	f890 3037 	ldrb.w	r3, [r0, #55]	@ 0x37
 801b2a6:	f890 c048 	ldrb.w	ip, [r0, #72]	@ 0x48
 801b2aa:	f890 1058 	ldrb.w	r1, [r0, #88]	@ 0x58
 801b2ae:	ea03 030c 	and.w	r3, r3, ip
 801b2b2:	400b      	ands	r3, r1
 801b2b4:	2bff      	cmp	r3, #255	@ 0xff
 801b2b6:	f040 80f4 	bne.w	801b4a2 <Argus_Dca_PrepareCfg+0x2c2>
 801b2ba:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 801b2be:	f890 c047 	ldrb.w	ip, [r0, #71]	@ 0x47
 801b2c2:	f890 1057 	ldrb.w	r1, [r0, #87]	@ 0x57
 801b2c6:	ea03 030c 	and.w	r3, r3, ip
 801b2ca:	400b      	ands	r3, r1
 801b2cc:	2bff      	cmp	r3, #255	@ 0xff
 801b2ce:	f040 8292 	bne.w	801b7f6 <Argus_Dca_PrepareCfg+0x616>
 801b2d2:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 801b2d6:	f890 c046 	ldrb.w	ip, [r0, #70]	@ 0x46
 801b2da:	f890 1056 	ldrb.w	r1, [r0, #86]	@ 0x56
 801b2de:	ea03 030c 	and.w	r3, r3, ip
 801b2e2:	400b      	ands	r3, r1
 801b2e4:	2bff      	cmp	r3, #255	@ 0xff
 801b2e6:	f040 8288 	bne.w	801b7fa <Argus_Dca_PrepareCfg+0x61a>
 801b2ea:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 801b2ee:	f890 c045 	ldrb.w	ip, [r0, #69]	@ 0x45
 801b2f2:	f890 1055 	ldrb.w	r1, [r0, #85]	@ 0x55
 801b2f6:	ea03 030c 	and.w	r3, r3, ip
 801b2fa:	400b      	ands	r3, r1
 801b2fc:	2bff      	cmp	r3, #255	@ 0xff
 801b2fe:	f040 827e 	bne.w	801b7fe <Argus_Dca_PrepareCfg+0x61e>
 801b302:	f890 3033 	ldrb.w	r3, [r0, #51]	@ 0x33
 801b306:	f890 c044 	ldrb.w	ip, [r0, #68]	@ 0x44
 801b30a:	f890 1054 	ldrb.w	r1, [r0, #84]	@ 0x54
 801b30e:	ea03 030c 	and.w	r3, r3, ip
 801b312:	400b      	ands	r3, r1
 801b314:	2bff      	cmp	r3, #255	@ 0xff
 801b316:	f040 80a1 	bne.w	801b45c <Argus_Dca_PrepareCfg+0x27c>
 801b31a:	f890 3032 	ldrb.w	r3, [r0, #50]	@ 0x32
 801b31e:	f890 c043 	ldrb.w	ip, [r0, #67]	@ 0x43
 801b322:	f890 1053 	ldrb.w	r1, [r0, #83]	@ 0x53
 801b326:	ea03 030c 	and.w	r3, r3, ip
 801b32a:	400b      	ands	r3, r1
 801b32c:	2bff      	cmp	r3, #255	@ 0xff
 801b32e:	f040 8268 	bne.w	801b802 <Argus_Dca_PrepareCfg+0x622>
 801b332:	f890 3031 	ldrb.w	r3, [r0, #49]	@ 0x31
 801b336:	f890 c042 	ldrb.w	ip, [r0, #66]	@ 0x42
 801b33a:	f890 1052 	ldrb.w	r1, [r0, #82]	@ 0x52
 801b33e:	ea03 030c 	and.w	r3, r3, ip
 801b342:	400b      	ands	r3, r1
 801b344:	2bff      	cmp	r3, #255	@ 0xff
 801b346:	f040 825e 	bne.w	801b806 <Argus_Dca_PrepareCfg+0x626>
 801b34a:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 801b34e:	f890 c041 	ldrb.w	ip, [r0, #65]	@ 0x41
 801b352:	f890 1051 	ldrb.w	r1, [r0, #81]	@ 0x51
 801b356:	ea03 030c 	and.w	r3, r3, ip
 801b35a:	400b      	ands	r3, r1
 801b35c:	2bff      	cmp	r3, #255	@ 0xff
 801b35e:	bf18      	it	ne
 801b360:	2178      	movne	r1, #120	@ 0x78
 801b362:	d135      	bne.n	801b3d0 <Argus_Dca_PrepareCfg+0x1f0>
 801b364:	2180      	movs	r1, #128	@ 0x80
 801b366:	7b03      	ldrb	r3, [r0, #12]
 801b368:	f8b0 c102 	ldrh.w	ip, [r0, #258]	@ 0x102
 801b36c:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 801b370:	1a59      	subs	r1, r3, r1
 801b372:	b2c9      	uxtb	r1, r1
 801b374:	fbb1 f2f2 	udiv	r2, r1, r2
 801b378:	f02c 013f 	bic.w	r1, ip, #63	@ 0x3f
 801b37c:	fa1f fe81 	uxth.w	lr, r1
 801b380:	2900      	cmp	r1, #0
 801b382:	d04d      	beq.n	801b420 <Argus_Dca_PrepareCfg+0x240>
 801b384:	f10c 0320 	add.w	r3, ip, #32
 801b388:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 801b38c:	b29b      	uxth	r3, r3
 801b38e:	f8b0 1104 	ldrh.w	r1, [r0, #260]	@ 0x104
 801b392:	f8a0 3102 	strh.w	r3, [r0, #258]	@ 0x102
 801b396:	f021 033f 	bic.w	r3, r1, #63	@ 0x3f
 801b39a:	fa1f fe83 	uxth.w	lr, r3
 801b39e:	b383      	cbz	r3, 801b402 <Argus_Dca_PrepareCfg+0x222>
 801b3a0:	f101 0320 	add.w	r3, r1, #32
 801b3a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 801b3a8:	b29b      	uxth	r3, r3
 801b3aa:	f8b0 1100 	ldrh.w	r1, [r0, #256]	@ 0x100
 801b3ae:	f8a0 3104 	strh.w	r3, [r0, #260]	@ 0x104
 801b3b2:	f021 033f 	bic.w	r3, r1, #63	@ 0x3f
 801b3b6:	fa1f fe83 	uxth.w	lr, r3
 801b3ba:	b19b      	cbz	r3, 801b3e4 <Argus_Dca_PrepareCfg+0x204>
 801b3bc:	f101 0320 	add.w	r3, r1, #32
 801b3c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 801b3c4:	b29b      	uxth	r3, r3
 801b3c6:	f8a0 3100 	strh.w	r3, [r0, #256]	@ 0x100
 801b3ca:	f85d fb04 	ldr.w	pc, [sp], #4
 801b3ce:	2100      	movs	r1, #0
 801b3d0:	085b      	lsrs	r3, r3, #1
 801b3d2:	d0c8      	beq.n	801b366 <Argus_Dca_PrepareCfg+0x186>
 801b3d4:	f013 0f01 	tst.w	r3, #1
 801b3d8:	d0fa      	beq.n	801b3d0 <Argus_Dca_PrepareCfg+0x1f0>
 801b3da:	3101      	adds	r1, #1
 801b3dc:	085b      	lsrs	r3, r3, #1
 801b3de:	b2c9      	uxtb	r1, r1
 801b3e0:	d1f8      	bne.n	801b3d4 <Argus_Dca_PrepareCfg+0x1f4>
 801b3e2:	e7c0      	b.n	801b366 <Argus_Dca_PrepareCfg+0x186>
 801b3e4:	ea4f 2c82 	mov.w	ip, r2, lsl #10
 801b3e8:	b382      	cbz	r2, 801b44c <Argus_Dca_PrepareCfg+0x26c>
 801b3ea:	fb01 f202 	mul.w	r2, r1, r2
 801b3ee:	f3c2 1140 	ubfx	r1, r2, #5, #1
 801b3f2:	eb01 1292 	add.w	r2, r1, r2, lsr #6
 801b3f6:	2a01      	cmp	r2, #1
 801b3f8:	bf38      	it	cc
 801b3fa:	2201      	movcc	r2, #1
 801b3fc:	4562      	cmp	r2, ip
 801b3fe:	d941      	bls.n	801b484 <Argus_Dca_PrepareCfg+0x2a4>
 801b400:	e7fe      	b.n	801b400 <Argus_Dca_PrepareCfg+0x220>
 801b402:	ea4f 2c82 	mov.w	ip, r2, lsl #10
 801b406:	b1f2      	cbz	r2, 801b446 <Argus_Dca_PrepareCfg+0x266>
 801b408:	fb02 f101 	mul.w	r1, r2, r1
 801b40c:	f3c1 1340 	ubfx	r3, r1, #5, #1
 801b410:	eb03 1191 	add.w	r1, r3, r1, lsr #6
 801b414:	2901      	cmp	r1, #1
 801b416:	bf38      	it	cc
 801b418:	2101      	movcc	r1, #1
 801b41a:	4561      	cmp	r1, ip
 801b41c:	d93b      	bls.n	801b496 <Argus_Dca_PrepareCfg+0x2b6>
 801b41e:	e7fe      	b.n	801b41e <Argus_Dca_PrepareCfg+0x23e>
 801b420:	0291      	lsls	r1, r2, #10
 801b422:	b16a      	cbz	r2, 801b440 <Argus_Dca_PrepareCfg+0x260>
 801b424:	fb02 fc0c 	mul.w	ip, r2, ip
 801b428:	f3cc 1340 	ubfx	r3, ip, #5, #1
 801b42c:	eb03 1c9c 	add.w	ip, r3, ip, lsr #6
 801b430:	f1bc 0f01 	cmp.w	ip, #1
 801b434:	bf38      	it	cc
 801b436:	f04f 0c01 	movcc.w	ip, #1
 801b43a:	458c      	cmp	ip, r1
 801b43c:	d91c      	bls.n	801b478 <Argus_Dca_PrepareCfg+0x298>
 801b43e:	e7fe      	b.n	801b43e <Argus_Dca_PrepareCfg+0x25e>
 801b440:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b444:	e7a3      	b.n	801b38e <Argus_Dca_PrepareCfg+0x1ae>
 801b446:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b44a:	e7ae      	b.n	801b3aa <Argus_Dca_PrepareCfg+0x1ca>
 801b44c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b450:	f8a0 3100 	strh.w	r3, [r0, #256]	@ 0x100
 801b454:	f85d fb04 	ldr.w	pc, [sp], #4
 801b458:	2108      	movs	r1, #8
 801b45a:	e7b9      	b.n	801b3d0 <Argus_Dca_PrepareCfg+0x1f0>
 801b45c:	2160      	movs	r1, #96	@ 0x60
 801b45e:	e7b7      	b.n	801b3d0 <Argus_Dca_PrepareCfg+0x1f0>
 801b460:	2110      	movs	r1, #16
 801b462:	e7b5      	b.n	801b3d0 <Argus_Dca_PrepareCfg+0x1f0>
 801b464:	2118      	movs	r1, #24
 801b466:	e7b3      	b.n	801b3d0 <Argus_Dca_PrepareCfg+0x1f0>
 801b468:	2120      	movs	r1, #32
 801b46a:	e7b1      	b.n	801b3d0 <Argus_Dca_PrepareCfg+0x1f0>
 801b46c:	2128      	movs	r1, #40	@ 0x28
 801b46e:	e7af      	b.n	801b3d0 <Argus_Dca_PrepareCfg+0x1f0>
 801b470:	2130      	movs	r1, #48	@ 0x30
 801b472:	e7ad      	b.n	801b3d0 <Argus_Dca_PrepareCfg+0x1f0>
 801b474:	2138      	movs	r1, #56	@ 0x38
 801b476:	e7ab      	b.n	801b3d0 <Argus_Dca_PrepareCfg+0x1f0>
 801b478:	d115      	bne.n	801b4a6 <Argus_Dca_PrepareCfg+0x2c6>
 801b47a:	f44f 3c80 	mov.w	ip, #65536	@ 0x10000
 801b47e:	fa1f f38c 	uxth.w	r3, ip
 801b482:	e784      	b.n	801b38e <Argus_Dca_PrepareCfg+0x1ae>
 801b484:	f040 8089 	bne.w	801b59a <Argus_Dca_PrepareCfg+0x3ba>
 801b488:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801b48c:	b293      	uxth	r3, r2
 801b48e:	f8a0 3100 	strh.w	r3, [r0, #256]	@ 0x100
 801b492:	f85d fb04 	ldr.w	pc, [sp], #4
 801b496:	f040 8117 	bne.w	801b6c8 <Argus_Dca_PrepareCfg+0x4e8>
 801b49a:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 801b49e:	b28b      	uxth	r3, r1
 801b4a0:	e783      	b.n	801b3aa <Argus_Dca_PrepareCfg+0x1ca>
 801b4a2:	2140      	movs	r1, #64	@ 0x40
 801b4a4:	e794      	b.n	801b3d0 <Argus_Dca_PrepareCfg+0x1f0>
 801b4a6:	ebb1 0f4c 	cmp.w	r1, ip, lsl #1
 801b4aa:	ea4f 034c 	mov.w	r3, ip, lsl #1
 801b4ae:	f200 81af 	bhi.w	801b810 <Argus_Dca_PrepareCfg+0x630>
 801b4b2:	1a5b      	subs	r3, r3, r1
 801b4b4:	005b      	lsls	r3, r3, #1
 801b4b6:	f44f 4c00 	mov.w	ip, #32768	@ 0x8000
 801b4ba:	d0e0      	beq.n	801b47e <Argus_Dca_PrepareCfg+0x29e>
 801b4bc:	4299      	cmp	r1, r3
 801b4be:	bf9c      	itt	ls
 801b4c0:	1a5b      	subls	r3, r3, r1
 801b4c2:	f44c 4c80 	orrls.w	ip, ip, #16384	@ 0x4000
 801b4c6:	005b      	lsls	r3, r3, #1
 801b4c8:	d0d9      	beq.n	801b47e <Argus_Dca_PrepareCfg+0x29e>
 801b4ca:	4299      	cmp	r1, r3
 801b4cc:	bf9c      	itt	ls
 801b4ce:	1a5b      	subls	r3, r3, r1
 801b4d0:	f44c 5c00 	orrls.w	ip, ip, #8192	@ 0x2000
 801b4d4:	005b      	lsls	r3, r3, #1
 801b4d6:	d0d2      	beq.n	801b47e <Argus_Dca_PrepareCfg+0x29e>
 801b4d8:	4299      	cmp	r1, r3
 801b4da:	bf9c      	itt	ls
 801b4dc:	1a5b      	subls	r3, r3, r1
 801b4de:	f44c 5c80 	orrls.w	ip, ip, #4096	@ 0x1000
 801b4e2:	005b      	lsls	r3, r3, #1
 801b4e4:	d0cb      	beq.n	801b47e <Argus_Dca_PrepareCfg+0x29e>
 801b4e6:	4299      	cmp	r1, r3
 801b4e8:	bf9c      	itt	ls
 801b4ea:	1a5b      	subls	r3, r3, r1
 801b4ec:	f44c 6c00 	orrls.w	ip, ip, #2048	@ 0x800
 801b4f0:	005b      	lsls	r3, r3, #1
 801b4f2:	d0c4      	beq.n	801b47e <Argus_Dca_PrepareCfg+0x29e>
 801b4f4:	4299      	cmp	r1, r3
 801b4f6:	bf9c      	itt	ls
 801b4f8:	1a5b      	subls	r3, r3, r1
 801b4fa:	f44c 6c80 	orrls.w	ip, ip, #1024	@ 0x400
 801b4fe:	005b      	lsls	r3, r3, #1
 801b500:	d0bd      	beq.n	801b47e <Argus_Dca_PrepareCfg+0x29e>
 801b502:	4299      	cmp	r1, r3
 801b504:	bf9c      	itt	ls
 801b506:	1a5b      	subls	r3, r3, r1
 801b508:	f44c 7c00 	orrls.w	ip, ip, #512	@ 0x200
 801b50c:	005b      	lsls	r3, r3, #1
 801b50e:	d0b6      	beq.n	801b47e <Argus_Dca_PrepareCfg+0x29e>
 801b510:	4299      	cmp	r1, r3
 801b512:	bf9c      	itt	ls
 801b514:	1a5b      	subls	r3, r3, r1
 801b516:	f44c 7c80 	orrls.w	ip, ip, #256	@ 0x100
 801b51a:	005b      	lsls	r3, r3, #1
 801b51c:	d0af      	beq.n	801b47e <Argus_Dca_PrepareCfg+0x29e>
 801b51e:	4299      	cmp	r1, r3
 801b520:	bf9c      	itt	ls
 801b522:	1a5b      	subls	r3, r3, r1
 801b524:	f04c 0c80 	orrls.w	ip, ip, #128	@ 0x80
 801b528:	005b      	lsls	r3, r3, #1
 801b52a:	d0a8      	beq.n	801b47e <Argus_Dca_PrepareCfg+0x29e>
 801b52c:	4299      	cmp	r1, r3
 801b52e:	bf9c      	itt	ls
 801b530:	1a5b      	subls	r3, r3, r1
 801b532:	f04c 0c40 	orrls.w	ip, ip, #64	@ 0x40
 801b536:	005b      	lsls	r3, r3, #1
 801b538:	d0a1      	beq.n	801b47e <Argus_Dca_PrepareCfg+0x29e>
 801b53a:	4299      	cmp	r1, r3
 801b53c:	bf9c      	itt	ls
 801b53e:	1a5b      	subls	r3, r3, r1
 801b540:	f04c 0c20 	orrls.w	ip, ip, #32
 801b544:	005b      	lsls	r3, r3, #1
 801b546:	d09a      	beq.n	801b47e <Argus_Dca_PrepareCfg+0x29e>
 801b548:	4299      	cmp	r1, r3
 801b54a:	bf9c      	itt	ls
 801b54c:	1a5b      	subls	r3, r3, r1
 801b54e:	f04c 0c10 	orrls.w	ip, ip, #16
 801b552:	005b      	lsls	r3, r3, #1
 801b554:	d093      	beq.n	801b47e <Argus_Dca_PrepareCfg+0x29e>
 801b556:	4299      	cmp	r1, r3
 801b558:	bf9c      	itt	ls
 801b55a:	1a5b      	subls	r3, r3, r1
 801b55c:	f04c 0c08 	orrls.w	ip, ip, #8
 801b560:	005b      	lsls	r3, r3, #1
 801b562:	d08c      	beq.n	801b47e <Argus_Dca_PrepareCfg+0x29e>
 801b564:	4299      	cmp	r1, r3
 801b566:	bf9c      	itt	ls
 801b568:	1a5b      	subls	r3, r3, r1
 801b56a:	f04c 0c04 	orrls.w	ip, ip, #4
 801b56e:	005b      	lsls	r3, r3, #1
 801b570:	d085      	beq.n	801b47e <Argus_Dca_PrepareCfg+0x29e>
 801b572:	4299      	cmp	r1, r3
 801b574:	bf9c      	itt	ls
 801b576:	1a5b      	subls	r3, r3, r1
 801b578:	f04c 0c02 	orrls.w	ip, ip, #2
 801b57c:	005b      	lsls	r3, r3, #1
 801b57e:	f43f af7e 	beq.w	801b47e <Argus_Dca_PrepareCfg+0x29e>
 801b582:	4299      	cmp	r1, r3
 801b584:	bf9c      	itt	ls
 801b586:	1a5b      	subls	r3, r3, r1
 801b588:	f04c 0c01 	orrls.w	ip, ip, #1
 801b58c:	ebb1 0f43 	cmp.w	r1, r3, lsl #1
 801b590:	f63f af75 	bhi.w	801b47e <Argus_Dca_PrepareCfg+0x29e>
 801b594:	f10c 0c01 	add.w	ip, ip, #1
 801b598:	e771      	b.n	801b47e <Argus_Dca_PrepareCfg+0x29e>
 801b59a:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 801b59e:	ea4f 0342 	mov.w	r3, r2, lsl #1
 801b5a2:	f200 8139 	bhi.w	801b818 <Argus_Dca_PrepareCfg+0x638>
 801b5a6:	eba3 030c 	sub.w	r3, r3, ip
 801b5aa:	005b      	lsls	r3, r3, #1
 801b5ac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 801b5b0:	f43f af6c 	beq.w	801b48c <Argus_Dca_PrepareCfg+0x2ac>
 801b5b4:	459c      	cmp	ip, r3
 801b5b6:	bf9c      	itt	ls
 801b5b8:	eba3 030c 	subls.w	r3, r3, ip
 801b5bc:	f442 4280 	orrls.w	r2, r2, #16384	@ 0x4000
 801b5c0:	005b      	lsls	r3, r3, #1
 801b5c2:	f43f af63 	beq.w	801b48c <Argus_Dca_PrepareCfg+0x2ac>
 801b5c6:	4563      	cmp	r3, ip
 801b5c8:	bf24      	itt	cs
 801b5ca:	eba3 030c 	subcs.w	r3, r3, ip
 801b5ce:	f442 5200 	orrcs.w	r2, r2, #8192	@ 0x2000
 801b5d2:	005b      	lsls	r3, r3, #1
 801b5d4:	f43f af5a 	beq.w	801b48c <Argus_Dca_PrepareCfg+0x2ac>
 801b5d8:	459c      	cmp	ip, r3
 801b5da:	bf9c      	itt	ls
 801b5dc:	eba3 030c 	subls.w	r3, r3, ip
 801b5e0:	f442 5280 	orrls.w	r2, r2, #4096	@ 0x1000
 801b5e4:	005b      	lsls	r3, r3, #1
 801b5e6:	f43f af51 	beq.w	801b48c <Argus_Dca_PrepareCfg+0x2ac>
 801b5ea:	4563      	cmp	r3, ip
 801b5ec:	bf24      	itt	cs
 801b5ee:	eba3 030c 	subcs.w	r3, r3, ip
 801b5f2:	f442 6200 	orrcs.w	r2, r2, #2048	@ 0x800
 801b5f6:	005b      	lsls	r3, r3, #1
 801b5f8:	f43f af48 	beq.w	801b48c <Argus_Dca_PrepareCfg+0x2ac>
 801b5fc:	459c      	cmp	ip, r3
 801b5fe:	bf9c      	itt	ls
 801b600:	eba3 030c 	subls.w	r3, r3, ip
 801b604:	f442 6280 	orrls.w	r2, r2, #1024	@ 0x400
 801b608:	005b      	lsls	r3, r3, #1
 801b60a:	f43f af3f 	beq.w	801b48c <Argus_Dca_PrepareCfg+0x2ac>
 801b60e:	459c      	cmp	ip, r3
 801b610:	bf9c      	itt	ls
 801b612:	eba3 030c 	subls.w	r3, r3, ip
 801b616:	f442 7200 	orrls.w	r2, r2, #512	@ 0x200
 801b61a:	005b      	lsls	r3, r3, #1
 801b61c:	f43f af36 	beq.w	801b48c <Argus_Dca_PrepareCfg+0x2ac>
 801b620:	4563      	cmp	r3, ip
 801b622:	bf24      	itt	cs
 801b624:	eba3 030c 	subcs.w	r3, r3, ip
 801b628:	f442 7280 	orrcs.w	r2, r2, #256	@ 0x100
 801b62c:	005b      	lsls	r3, r3, #1
 801b62e:	f43f af2d 	beq.w	801b48c <Argus_Dca_PrepareCfg+0x2ac>
 801b632:	4563      	cmp	r3, ip
 801b634:	bf24      	itt	cs
 801b636:	eba3 030c 	subcs.w	r3, r3, ip
 801b63a:	f042 0280 	orrcs.w	r2, r2, #128	@ 0x80
 801b63e:	005b      	lsls	r3, r3, #1
 801b640:	f43f af24 	beq.w	801b48c <Argus_Dca_PrepareCfg+0x2ac>
 801b644:	459c      	cmp	ip, r3
 801b646:	bf9c      	itt	ls
 801b648:	eba3 030c 	subls.w	r3, r3, ip
 801b64c:	f042 0240 	orrls.w	r2, r2, #64	@ 0x40
 801b650:	005b      	lsls	r3, r3, #1
 801b652:	f43f af1b 	beq.w	801b48c <Argus_Dca_PrepareCfg+0x2ac>
 801b656:	459c      	cmp	ip, r3
 801b658:	bf9c      	itt	ls
 801b65a:	eba3 030c 	subls.w	r3, r3, ip
 801b65e:	f042 0220 	orrls.w	r2, r2, #32
 801b662:	005b      	lsls	r3, r3, #1
 801b664:	f43f af12 	beq.w	801b48c <Argus_Dca_PrepareCfg+0x2ac>
 801b668:	459c      	cmp	ip, r3
 801b66a:	bf9c      	itt	ls
 801b66c:	eba3 030c 	subls.w	r3, r3, ip
 801b670:	f042 0210 	orrls.w	r2, r2, #16
 801b674:	005b      	lsls	r3, r3, #1
 801b676:	f43f af09 	beq.w	801b48c <Argus_Dca_PrepareCfg+0x2ac>
 801b67a:	459c      	cmp	ip, r3
 801b67c:	bf9c      	itt	ls
 801b67e:	eba3 030c 	subls.w	r3, r3, ip
 801b682:	f042 0208 	orrls.w	r2, r2, #8
 801b686:	005b      	lsls	r3, r3, #1
 801b688:	f43f af00 	beq.w	801b48c <Argus_Dca_PrepareCfg+0x2ac>
 801b68c:	459c      	cmp	ip, r3
 801b68e:	bf9c      	itt	ls
 801b690:	eba3 030c 	subls.w	r3, r3, ip
 801b694:	f042 0204 	orrls.w	r2, r2, #4
 801b698:	005b      	lsls	r3, r3, #1
 801b69a:	f43f aef7 	beq.w	801b48c <Argus_Dca_PrepareCfg+0x2ac>
 801b69e:	459c      	cmp	ip, r3
 801b6a0:	bf9c      	itt	ls
 801b6a2:	eba3 030c 	subls.w	r3, r3, ip
 801b6a6:	f042 0202 	orrls.w	r2, r2, #2
 801b6aa:	005b      	lsls	r3, r3, #1
 801b6ac:	f43f aeee 	beq.w	801b48c <Argus_Dca_PrepareCfg+0x2ac>
 801b6b0:	4563      	cmp	r3, ip
 801b6b2:	bf24      	itt	cs
 801b6b4:	eba3 030c 	subcs.w	r3, r3, ip
 801b6b8:	f042 0201 	orrcs.w	r2, r2, #1
 801b6bc:	ebbc 0f43 	cmp.w	ip, r3, lsl #1
 801b6c0:	f63f aee4 	bhi.w	801b48c <Argus_Dca_PrepareCfg+0x2ac>
 801b6c4:	3201      	adds	r2, #1
 801b6c6:	e6e1      	b.n	801b48c <Argus_Dca_PrepareCfg+0x2ac>
 801b6c8:	ebbc 0f41 	cmp.w	ip, r1, lsl #1
 801b6cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 801b6d0:	f200 809b 	bhi.w	801b80a <Argus_Dca_PrepareCfg+0x62a>
 801b6d4:	eba3 030c 	sub.w	r3, r3, ip
 801b6d8:	005b      	lsls	r3, r3, #1
 801b6da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801b6de:	f43f aede 	beq.w	801b49e <Argus_Dca_PrepareCfg+0x2be>
 801b6e2:	459c      	cmp	ip, r3
 801b6e4:	bf9c      	itt	ls
 801b6e6:	eba3 030c 	subls.w	r3, r3, ip
 801b6ea:	f441 4180 	orrls.w	r1, r1, #16384	@ 0x4000
 801b6ee:	005b      	lsls	r3, r3, #1
 801b6f0:	f43f aed5 	beq.w	801b49e <Argus_Dca_PrepareCfg+0x2be>
 801b6f4:	459c      	cmp	ip, r3
 801b6f6:	bf9c      	itt	ls
 801b6f8:	eba3 030c 	subls.w	r3, r3, ip
 801b6fc:	f441 5100 	orrls.w	r1, r1, #8192	@ 0x2000
 801b700:	005b      	lsls	r3, r3, #1
 801b702:	f43f aecc 	beq.w	801b49e <Argus_Dca_PrepareCfg+0x2be>
 801b706:	459c      	cmp	ip, r3
 801b708:	bf9c      	itt	ls
 801b70a:	eba3 030c 	subls.w	r3, r3, ip
 801b70e:	f441 5180 	orrls.w	r1, r1, #4096	@ 0x1000
 801b712:	005b      	lsls	r3, r3, #1
 801b714:	f43f aec3 	beq.w	801b49e <Argus_Dca_PrepareCfg+0x2be>
 801b718:	459c      	cmp	ip, r3
 801b71a:	bf9c      	itt	ls
 801b71c:	eba3 030c 	subls.w	r3, r3, ip
 801b720:	f441 6100 	orrls.w	r1, r1, #2048	@ 0x800
 801b724:	005b      	lsls	r3, r3, #1
 801b726:	f43f aeba 	beq.w	801b49e <Argus_Dca_PrepareCfg+0x2be>
 801b72a:	459c      	cmp	ip, r3
 801b72c:	bf9c      	itt	ls
 801b72e:	eba3 030c 	subls.w	r3, r3, ip
 801b732:	f441 6180 	orrls.w	r1, r1, #1024	@ 0x400
 801b736:	005b      	lsls	r3, r3, #1
 801b738:	f43f aeb1 	beq.w	801b49e <Argus_Dca_PrepareCfg+0x2be>
 801b73c:	459c      	cmp	ip, r3
 801b73e:	bf9c      	itt	ls
 801b740:	eba3 030c 	subls.w	r3, r3, ip
 801b744:	f441 7100 	orrls.w	r1, r1, #512	@ 0x200
 801b748:	005b      	lsls	r3, r3, #1
 801b74a:	f43f aea8 	beq.w	801b49e <Argus_Dca_PrepareCfg+0x2be>
 801b74e:	459c      	cmp	ip, r3
 801b750:	bf9c      	itt	ls
 801b752:	eba3 030c 	subls.w	r3, r3, ip
 801b756:	f441 7180 	orrls.w	r1, r1, #256	@ 0x100
 801b75a:	005b      	lsls	r3, r3, #1
 801b75c:	f43f ae9f 	beq.w	801b49e <Argus_Dca_PrepareCfg+0x2be>
 801b760:	459c      	cmp	ip, r3
 801b762:	bf9c      	itt	ls
 801b764:	eba3 030c 	subls.w	r3, r3, ip
 801b768:	f041 0180 	orrls.w	r1, r1, #128	@ 0x80
 801b76c:	005b      	lsls	r3, r3, #1
 801b76e:	f43f ae96 	beq.w	801b49e <Argus_Dca_PrepareCfg+0x2be>
 801b772:	459c      	cmp	ip, r3
 801b774:	bf9c      	itt	ls
 801b776:	eba3 030c 	subls.w	r3, r3, ip
 801b77a:	f041 0140 	orrls.w	r1, r1, #64	@ 0x40
 801b77e:	005b      	lsls	r3, r3, #1
 801b780:	f43f ae8d 	beq.w	801b49e <Argus_Dca_PrepareCfg+0x2be>
 801b784:	459c      	cmp	ip, r3
 801b786:	bf9c      	itt	ls
 801b788:	eba3 030c 	subls.w	r3, r3, ip
 801b78c:	f041 0120 	orrls.w	r1, r1, #32
 801b790:	005b      	lsls	r3, r3, #1
 801b792:	f43f ae84 	beq.w	801b49e <Argus_Dca_PrepareCfg+0x2be>
 801b796:	459c      	cmp	ip, r3
 801b798:	bf9c      	itt	ls
 801b79a:	eba3 030c 	subls.w	r3, r3, ip
 801b79e:	f041 0110 	orrls.w	r1, r1, #16
 801b7a2:	005b      	lsls	r3, r3, #1
 801b7a4:	f43f ae7b 	beq.w	801b49e <Argus_Dca_PrepareCfg+0x2be>
 801b7a8:	459c      	cmp	ip, r3
 801b7aa:	bf9c      	itt	ls
 801b7ac:	eba3 030c 	subls.w	r3, r3, ip
 801b7b0:	f041 0108 	orrls.w	r1, r1, #8
 801b7b4:	005b      	lsls	r3, r3, #1
 801b7b6:	f43f ae72 	beq.w	801b49e <Argus_Dca_PrepareCfg+0x2be>
 801b7ba:	459c      	cmp	ip, r3
 801b7bc:	bf9c      	itt	ls
 801b7be:	eba3 030c 	subls.w	r3, r3, ip
 801b7c2:	f041 0104 	orrls.w	r1, r1, #4
 801b7c6:	005b      	lsls	r3, r3, #1
 801b7c8:	f43f ae69 	beq.w	801b49e <Argus_Dca_PrepareCfg+0x2be>
 801b7cc:	459c      	cmp	ip, r3
 801b7ce:	bf9c      	itt	ls
 801b7d0:	eba3 030c 	subls.w	r3, r3, ip
 801b7d4:	f041 0102 	orrls.w	r1, r1, #2
 801b7d8:	005b      	lsls	r3, r3, #1
 801b7da:	f43f ae60 	beq.w	801b49e <Argus_Dca_PrepareCfg+0x2be>
 801b7de:	459c      	cmp	ip, r3
 801b7e0:	bf9c      	itt	ls
 801b7e2:	eba3 030c 	subls.w	r3, r3, ip
 801b7e6:	f041 0101 	orrls.w	r1, r1, #1
 801b7ea:	ebbc 0f43 	cmp.w	ip, r3, lsl #1
 801b7ee:	f63f ae56 	bhi.w	801b49e <Argus_Dca_PrepareCfg+0x2be>
 801b7f2:	3101      	adds	r1, #1
 801b7f4:	e653      	b.n	801b49e <Argus_Dca_PrepareCfg+0x2be>
 801b7f6:	2148      	movs	r1, #72	@ 0x48
 801b7f8:	e5ea      	b.n	801b3d0 <Argus_Dca_PrepareCfg+0x1f0>
 801b7fa:	2150      	movs	r1, #80	@ 0x50
 801b7fc:	e5e8      	b.n	801b3d0 <Argus_Dca_PrepareCfg+0x1f0>
 801b7fe:	2158      	movs	r1, #88	@ 0x58
 801b800:	e5e6      	b.n	801b3d0 <Argus_Dca_PrepareCfg+0x1f0>
 801b802:	2168      	movs	r1, #104	@ 0x68
 801b804:	e5e4      	b.n	801b3d0 <Argus_Dca_PrepareCfg+0x1f0>
 801b806:	2170      	movs	r1, #112	@ 0x70
 801b808:	e5e2      	b.n	801b3d0 <Argus_Dca_PrepareCfg+0x1f0>
 801b80a:	008b      	lsls	r3, r1, #2
 801b80c:	4671      	mov	r1, lr
 801b80e:	e768      	b.n	801b6e2 <Argus_Dca_PrepareCfg+0x502>
 801b810:	ea4f 038c 	mov.w	r3, ip, lsl #2
 801b814:	46f4      	mov	ip, lr
 801b816:	e651      	b.n	801b4bc <Argus_Dca_PrepareCfg+0x2dc>
 801b818:	0093      	lsls	r3, r2, #2
 801b81a:	4672      	mov	r2, lr
 801b81c:	e6ca      	b.n	801b5b4 <Argus_Dca_PrepareCfg+0x3d4>
 801b81e:	bf00      	nop

0801b820 <Argus_Dca_Update>:
 801b820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b824:	460e      	mov	r6, r1
 801b826:	f891 1050 	ldrb.w	r1, [r1, #80]	@ 0x50
 801b82a:	f896 303f 	ldrb.w	r3, [r6, #63]	@ 0x3f
 801b82e:	7bb4      	ldrb	r4, [r6, #14]
 801b830:	4019      	ands	r1, r3
 801b832:	f896 3060 	ldrb.w	r3, [r6, #96]	@ 0x60
 801b836:	4019      	ands	r1, r3
 801b838:	29ff      	cmp	r1, #255	@ 0xff
 801b83a:	b085      	sub	sp, #20
 801b83c:	4607      	mov	r7, r0
 801b83e:	4615      	mov	r5, r2
 801b840:	f040 8527 	bne.w	801c292 <Argus_Dca_Update+0xa72>
 801b844:	f896 203e 	ldrb.w	r2, [r6, #62]	@ 0x3e
 801b848:	f896 304f 	ldrb.w	r3, [r6, #79]	@ 0x4f
 801b84c:	4013      	ands	r3, r2
 801b84e:	f896 205f 	ldrb.w	r2, [r6, #95]	@ 0x5f
 801b852:	4013      	ands	r3, r2
 801b854:	2bff      	cmp	r3, #255	@ 0xff
 801b856:	f040 8155 	bne.w	801bb04 <Argus_Dca_Update+0x2e4>
 801b85a:	f896 203d 	ldrb.w	r2, [r6, #61]	@ 0x3d
 801b85e:	f896 304e 	ldrb.w	r3, [r6, #78]	@ 0x4e
 801b862:	4013      	ands	r3, r2
 801b864:	f896 205e 	ldrb.w	r2, [r6, #94]	@ 0x5e
 801b868:	4013      	ands	r3, r2
 801b86a:	2bff      	cmp	r3, #255	@ 0xff
 801b86c:	f040 8548 	bne.w	801c300 <Argus_Dca_Update+0xae0>
 801b870:	f896 203c 	ldrb.w	r2, [r6, #60]	@ 0x3c
 801b874:	f896 304d 	ldrb.w	r3, [r6, #77]	@ 0x4d
 801b878:	4013      	ands	r3, r2
 801b87a:	f896 205d 	ldrb.w	r2, [r6, #93]	@ 0x5d
 801b87e:	4013      	ands	r3, r2
 801b880:	2bff      	cmp	r3, #255	@ 0xff
 801b882:	f040 853f 	bne.w	801c304 <Argus_Dca_Update+0xae4>
 801b886:	f896 203b 	ldrb.w	r2, [r6, #59]	@ 0x3b
 801b88a:	f896 304c 	ldrb.w	r3, [r6, #76]	@ 0x4c
 801b88e:	4013      	ands	r3, r2
 801b890:	f896 205c 	ldrb.w	r2, [r6, #92]	@ 0x5c
 801b894:	4013      	ands	r3, r2
 801b896:	2bff      	cmp	r3, #255	@ 0xff
 801b898:	f040 853a 	bne.w	801c310 <Argus_Dca_Update+0xaf0>
 801b89c:	f896 203a 	ldrb.w	r2, [r6, #58]	@ 0x3a
 801b8a0:	f896 304b 	ldrb.w	r3, [r6, #75]	@ 0x4b
 801b8a4:	4013      	ands	r3, r2
 801b8a6:	f896 205b 	ldrb.w	r2, [r6, #91]	@ 0x5b
 801b8aa:	4013      	ands	r3, r2
 801b8ac:	2bff      	cmp	r3, #255	@ 0xff
 801b8ae:	f040 8538 	bne.w	801c322 <Argus_Dca_Update+0xb02>
 801b8b2:	f896 2039 	ldrb.w	r2, [r6, #57]	@ 0x39
 801b8b6:	f896 304a 	ldrb.w	r3, [r6, #74]	@ 0x4a
 801b8ba:	4013      	ands	r3, r2
 801b8bc:	f896 205a 	ldrb.w	r2, [r6, #90]	@ 0x5a
 801b8c0:	4013      	ands	r3, r2
 801b8c2:	2bff      	cmp	r3, #255	@ 0xff
 801b8c4:	f040 8533 	bne.w	801c32e <Argus_Dca_Update+0xb0e>
 801b8c8:	f896 2038 	ldrb.w	r2, [r6, #56]	@ 0x38
 801b8cc:	f896 3049 	ldrb.w	r3, [r6, #73]	@ 0x49
 801b8d0:	4013      	ands	r3, r2
 801b8d2:	f896 2059 	ldrb.w	r2, [r6, #89]	@ 0x59
 801b8d6:	4013      	ands	r3, r2
 801b8d8:	2bff      	cmp	r3, #255	@ 0xff
 801b8da:	f040 8532 	bne.w	801c342 <Argus_Dca_Update+0xb22>
 801b8de:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 801b8e2:	f896 3037 	ldrb.w	r3, [r6, #55]	@ 0x37
 801b8e6:	4013      	ands	r3, r2
 801b8e8:	f896 2058 	ldrb.w	r2, [r6, #88]	@ 0x58
 801b8ec:	4013      	ands	r3, r2
 801b8ee:	2bff      	cmp	r3, #255	@ 0xff
 801b8f0:	f040 8524 	bne.w	801c33c <Argus_Dca_Update+0xb1c>
 801b8f4:	f896 2047 	ldrb.w	r2, [r6, #71]	@ 0x47
 801b8f8:	f896 3036 	ldrb.w	r3, [r6, #54]	@ 0x36
 801b8fc:	4013      	ands	r3, r2
 801b8fe:	f896 2057 	ldrb.w	r2, [r6, #87]	@ 0x57
 801b902:	4013      	ands	r3, r2
 801b904:	2bff      	cmp	r3, #255	@ 0xff
 801b906:	f040 8527 	bne.w	801c358 <Argus_Dca_Update+0xb38>
 801b90a:	f896 2046 	ldrb.w	r2, [r6, #70]	@ 0x46
 801b90e:	f896 3035 	ldrb.w	r3, [r6, #53]	@ 0x35
 801b912:	4013      	ands	r3, r2
 801b914:	f896 2056 	ldrb.w	r2, [r6, #86]	@ 0x56
 801b918:	4013      	ands	r3, r2
 801b91a:	2bff      	cmp	r3, #255	@ 0xff
 801b91c:	f040 8527 	bne.w	801c36e <Argus_Dca_Update+0xb4e>
 801b920:	f896 2045 	ldrb.w	r2, [r6, #69]	@ 0x45
 801b924:	f896 3034 	ldrb.w	r3, [r6, #52]	@ 0x34
 801b928:	4013      	ands	r3, r2
 801b92a:	f896 2055 	ldrb.w	r2, [r6, #85]	@ 0x55
 801b92e:	4013      	ands	r3, r2
 801b930:	2bff      	cmp	r3, #255	@ 0xff
 801b932:	f040 8527 	bne.w	801c384 <Argus_Dca_Update+0xb64>
 801b936:	f896 2044 	ldrb.w	r2, [r6, #68]	@ 0x44
 801b93a:	f896 3033 	ldrb.w	r3, [r6, #51]	@ 0x33
 801b93e:	4013      	ands	r3, r2
 801b940:	f896 2054 	ldrb.w	r2, [r6, #84]	@ 0x54
 801b944:	4013      	ands	r3, r2
 801b946:	2bff      	cmp	r3, #255	@ 0xff
 801b948:	f040 84b6 	bne.w	801c2b8 <Argus_Dca_Update+0xa98>
 801b94c:	f896 2043 	ldrb.w	r2, [r6, #67]	@ 0x43
 801b950:	f896 3032 	ldrb.w	r3, [r6, #50]	@ 0x32
 801b954:	4013      	ands	r3, r2
 801b956:	f896 2053 	ldrb.w	r2, [r6, #83]	@ 0x53
 801b95a:	4013      	ands	r3, r2
 801b95c:	2bff      	cmp	r3, #255	@ 0xff
 801b95e:	f040 8514 	bne.w	801c38a <Argus_Dca_Update+0xb6a>
 801b962:	f896 2042 	ldrb.w	r2, [r6, #66]	@ 0x42
 801b966:	f896 3031 	ldrb.w	r3, [r6, #49]	@ 0x31
 801b96a:	4013      	ands	r3, r2
 801b96c:	f896 2052 	ldrb.w	r2, [r6, #82]	@ 0x52
 801b970:	4013      	ands	r3, r2
 801b972:	2bff      	cmp	r3, #255	@ 0xff
 801b974:	f040 852d 	bne.w	801c3d2 <Argus_Dca_Update+0xbb2>
 801b978:	f896 2041 	ldrb.w	r2, [r6, #65]	@ 0x41
 801b97c:	f896 3030 	ldrb.w	r3, [r6, #48]	@ 0x30
 801b980:	4013      	ands	r3, r2
 801b982:	f896 2051 	ldrb.w	r2, [r6, #81]	@ 0x51
 801b986:	4013      	ands	r3, r2
 801b988:	2bff      	cmp	r3, #255	@ 0xff
 801b98a:	bf18      	it	ne
 801b98c:	2278      	movne	r2, #120	@ 0x78
 801b98e:	f040 80ba 	bne.w	801bb06 <Argus_Dca_Update+0x2e6>
 801b992:	7b33      	ldrb	r3, [r6, #12]
 801b994:	f1c3 0080 	rsb	r0, r3, #128	@ 0x80
 801b998:	425b      	negs	r3, r3
 801b99a:	b2db      	uxtb	r3, r3
 801b99c:	b2c0      	uxtb	r0, r0
 801b99e:	fbb3 f3f4 	udiv	r3, r3, r4
 801b9a2:	f887 3020 	strb.w	r3, [r7, #32]
 801b9a6:	f896 303e 	ldrb.w	r3, [r6, #62]	@ 0x3e
 801b9aa:	f896 104f 	ldrb.w	r1, [r6, #79]	@ 0x4f
 801b9ae:	4019      	ands	r1, r3
 801b9b0:	f896 305f 	ldrb.w	r3, [r6, #95]	@ 0x5f
 801b9b4:	4019      	ands	r1, r3
 801b9b6:	29ff      	cmp	r1, #255	@ 0xff
 801b9b8:	f040 847b 	bne.w	801c2b2 <Argus_Dca_Update+0xa92>
 801b9bc:	f896 303d 	ldrb.w	r3, [r6, #61]	@ 0x3d
 801b9c0:	f896 104e 	ldrb.w	r1, [r6, #78]	@ 0x4e
 801b9c4:	4019      	ands	r1, r3
 801b9c6:	f896 305e 	ldrb.w	r3, [r6, #94]	@ 0x5e
 801b9ca:	4019      	ands	r1, r3
 801b9cc:	29ff      	cmp	r1, #255	@ 0xff
 801b9ce:	f040 8488 	bne.w	801c2e2 <Argus_Dca_Update+0xac2>
 801b9d2:	f896 303c 	ldrb.w	r3, [r6, #60]	@ 0x3c
 801b9d6:	f896 104d 	ldrb.w	r1, [r6, #77]	@ 0x4d
 801b9da:	4019      	ands	r1, r3
 801b9dc:	f896 305d 	ldrb.w	r3, [r6, #93]	@ 0x5d
 801b9e0:	4019      	ands	r1, r3
 801b9e2:	29ff      	cmp	r1, #255	@ 0xff
 801b9e4:	f040 8491 	bne.w	801c30a <Argus_Dca_Update+0xaea>
 801b9e8:	f896 303b 	ldrb.w	r3, [r6, #59]	@ 0x3b
 801b9ec:	f896 104c 	ldrb.w	r1, [r6, #76]	@ 0x4c
 801b9f0:	4019      	ands	r1, r3
 801b9f2:	f896 305c 	ldrb.w	r3, [r6, #92]	@ 0x5c
 801b9f6:	4019      	ands	r1, r3
 801b9f8:	29ff      	cmp	r1, #255	@ 0xff
 801b9fa:	f040 848c 	bne.w	801c316 <Argus_Dca_Update+0xaf6>
 801b9fe:	f896 303a 	ldrb.w	r3, [r6, #58]	@ 0x3a
 801ba02:	f896 104b 	ldrb.w	r1, [r6, #75]	@ 0x4b
 801ba06:	4019      	ands	r1, r3
 801ba08:	f896 305b 	ldrb.w	r3, [r6, #91]	@ 0x5b
 801ba0c:	4019      	ands	r1, r3
 801ba0e:	29ff      	cmp	r1, #255	@ 0xff
 801ba10:	f040 8484 	bne.w	801c31c <Argus_Dca_Update+0xafc>
 801ba14:	f896 3039 	ldrb.w	r3, [r6, #57]	@ 0x39
 801ba18:	f896 104a 	ldrb.w	r1, [r6, #74]	@ 0x4a
 801ba1c:	4019      	ands	r1, r3
 801ba1e:	f896 305a 	ldrb.w	r3, [r6, #90]	@ 0x5a
 801ba22:	4019      	ands	r1, r3
 801ba24:	29ff      	cmp	r1, #255	@ 0xff
 801ba26:	f040 847f 	bne.w	801c328 <Argus_Dca_Update+0xb08>
 801ba2a:	f896 3038 	ldrb.w	r3, [r6, #56]	@ 0x38
 801ba2e:	f896 1049 	ldrb.w	r1, [r6, #73]	@ 0x49
 801ba32:	4019      	ands	r1, r3
 801ba34:	f896 3059 	ldrb.w	r3, [r6, #89]	@ 0x59
 801ba38:	4019      	ands	r1, r3
 801ba3a:	29ff      	cmp	r1, #255	@ 0xff
 801ba3c:	f040 847a 	bne.w	801c334 <Argus_Dca_Update+0xb14>
 801ba40:	f896 3037 	ldrb.w	r3, [r6, #55]	@ 0x37
 801ba44:	f896 1048 	ldrb.w	r1, [r6, #72]	@ 0x48
 801ba48:	4019      	ands	r1, r3
 801ba4a:	f896 3058 	ldrb.w	r3, [r6, #88]	@ 0x58
 801ba4e:	4019      	ands	r1, r3
 801ba50:	29ff      	cmp	r1, #255	@ 0xff
 801ba52:	f040 8479 	bne.w	801c348 <Argus_Dca_Update+0xb28>
 801ba56:	f896 3036 	ldrb.w	r3, [r6, #54]	@ 0x36
 801ba5a:	f896 1047 	ldrb.w	r1, [r6, #71]	@ 0x47
 801ba5e:	4019      	ands	r1, r3
 801ba60:	f896 3057 	ldrb.w	r3, [r6, #87]	@ 0x57
 801ba64:	4019      	ands	r1, r3
 801ba66:	29ff      	cmp	r1, #255	@ 0xff
 801ba68:	f040 8472 	bne.w	801c350 <Argus_Dca_Update+0xb30>
 801ba6c:	f896 3035 	ldrb.w	r3, [r6, #53]	@ 0x35
 801ba70:	f896 1046 	ldrb.w	r1, [r6, #70]	@ 0x46
 801ba74:	4019      	ands	r1, r3
 801ba76:	f896 3056 	ldrb.w	r3, [r6, #86]	@ 0x56
 801ba7a:	4019      	ands	r1, r3
 801ba7c:	29ff      	cmp	r1, #255	@ 0xff
 801ba7e:	f040 8472 	bne.w	801c366 <Argus_Dca_Update+0xb46>
 801ba82:	f896 3034 	ldrb.w	r3, [r6, #52]	@ 0x34
 801ba86:	f896 1045 	ldrb.w	r1, [r6, #69]	@ 0x45
 801ba8a:	4019      	ands	r1, r3
 801ba8c:	f896 3055 	ldrb.w	r3, [r6, #85]	@ 0x55
 801ba90:	4019      	ands	r1, r3
 801ba92:	29ff      	cmp	r1, #255	@ 0xff
 801ba94:	f040 846e 	bne.w	801c374 <Argus_Dca_Update+0xb54>
 801ba98:	f896 3033 	ldrb.w	r3, [r6, #51]	@ 0x33
 801ba9c:	f896 1044 	ldrb.w	r1, [r6, #68]	@ 0x44
 801baa0:	4019      	ands	r1, r3
 801baa2:	f896 3054 	ldrb.w	r3, [r6, #84]	@ 0x54
 801baa6:	4019      	ands	r1, r3
 801baa8:	29ff      	cmp	r1, #255	@ 0xff
 801baaa:	f040 8467 	bne.w	801c37c <Argus_Dca_Update+0xb5c>
 801baae:	f896 3032 	ldrb.w	r3, [r6, #50]	@ 0x32
 801bab2:	f896 1043 	ldrb.w	r1, [r6, #67]	@ 0x43
 801bab6:	4019      	ands	r1, r3
 801bab8:	f896 3053 	ldrb.w	r3, [r6, #83]	@ 0x53
 801babc:	4019      	ands	r1, r3
 801babe:	29ff      	cmp	r1, #255	@ 0xff
 801bac0:	f040 8466 	bne.w	801c390 <Argus_Dca_Update+0xb70>
 801bac4:	f896 3031 	ldrb.w	r3, [r6, #49]	@ 0x31
 801bac8:	f896 1042 	ldrb.w	r1, [r6, #66]	@ 0x42
 801bacc:	4019      	ands	r1, r3
 801bace:	f896 3052 	ldrb.w	r3, [r6, #82]	@ 0x52
 801bad2:	4019      	ands	r1, r3
 801bad4:	29ff      	cmp	r1, #255	@ 0xff
 801bad6:	f040 8478 	bne.w	801c3ca <Argus_Dca_Update+0xbaa>
 801bada:	f896 3041 	ldrb.w	r3, [r6, #65]	@ 0x41
 801bade:	f896 1030 	ldrb.w	r1, [r6, #48]	@ 0x30
 801bae2:	4019      	ands	r1, r3
 801bae4:	f896 3051 	ldrb.w	r3, [r6, #81]	@ 0x51
 801bae8:	4019      	ands	r1, r3
 801baea:	29ff      	cmp	r1, #255	@ 0xff
 801baec:	bf08      	it	eq
 801baee:	2380      	moveq	r3, #128	@ 0x80
 801baf0:	f040 8467 	bne.w	801c3c2 <Argus_Dca_Update+0xba2>
 801baf4:	1ac3      	subs	r3, r0, r3
 801baf6:	b2db      	uxtb	r3, r3
 801baf8:	029a      	lsls	r2, r3, #10
 801bafa:	b353      	cbz	r3, 801bb52 <Argus_Dca_Update+0x332>
 801bafc:	4294      	cmp	r4, r2
 801bafe:	f240 8313 	bls.w	801c128 <Argus_Dca_Update+0x908>
 801bb02:	e7fe      	b.n	801bb02 <Argus_Dca_Update+0x2e2>
 801bb04:	2208      	movs	r2, #8
 801bb06:	085b      	lsrs	r3, r3, #1
 801bb08:	f000 83ee 	beq.w	801c2e8 <Argus_Dca_Update+0xac8>
 801bb0c:	07d8      	lsls	r0, r3, #31
 801bb0e:	bf44      	itt	mi
 801bb10:	3201      	addmi	r2, #1
 801bb12:	b2d2      	uxtbmi	r2, r2
 801bb14:	085b      	lsrs	r3, r3, #1
 801bb16:	d1f9      	bne.n	801bb0c <Argus_Dca_Update+0x2ec>
 801bb18:	7b30      	ldrb	r0, [r6, #12]
 801bb1a:	f1c0 0080 	rsb	r0, r0, #128	@ 0x80
 801bb1e:	b2c0      	uxtb	r0, r0
 801bb20:	1a82      	subs	r2, r0, r2
 801bb22:	29ff      	cmp	r1, #255	@ 0xff
 801bb24:	b2d2      	uxtb	r2, r2
 801bb26:	fbb2 f2f4 	udiv	r2, r2, r4
 801bb2a:	f887 2020 	strb.w	r2, [r7, #32]
 801bb2e:	bf18      	it	ne
 801bb30:	084a      	lsrne	r2, r1, #1
 801bb32:	f43f af38 	beq.w	801b9a6 <Argus_Dca_Update+0x186>
 801bb36:	f012 02ff 	ands.w	r2, r2, #255	@ 0xff
 801bb3a:	d0db      	beq.n	801baf4 <Argus_Dca_Update+0x2d4>
 801bb3c:	07d1      	lsls	r1, r2, #31
 801bb3e:	bf44      	itt	mi
 801bb40:	3301      	addmi	r3, #1
 801bb42:	b2db      	uxtbmi	r3, r3
 801bb44:	0852      	lsrs	r2, r2, #1
 801bb46:	d1f9      	bne.n	801bb3c <Argus_Dca_Update+0x31c>
 801bb48:	1ac3      	subs	r3, r0, r3
 801bb4a:	b2db      	uxtb	r3, r3
 801bb4c:	029a      	lsls	r2, r3, #10
 801bb4e:	2b00      	cmp	r3, #0
 801bb50:	d1d4      	bne.n	801bafc <Argus_Dca_Update+0x2dc>
 801bb52:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801bb56:	f8b6 2100 	ldrh.w	r2, [r6, #256]	@ 0x100
 801bb5a:	f8b6 c104 	ldrh.w	ip, [r6, #260]	@ 0x104
 801bb5e:	83f9      	strh	r1, [r7, #30]
 801bb60:	0293      	lsls	r3, r2, #10
 801bb62:	b17a      	cbz	r2, 801bb84 <Argus_Dca_Update+0x364>
 801bb64:	ebb3 2f8c 	cmp.w	r3, ip, lsl #10
 801bb68:	ea4f 218c 	mov.w	r1, ip, lsl #10
 801bb6c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801bb70:	f080 8237 	bcs.w	801bfe2 <Argus_Dca_Update+0x7c2>
 801bb74:	005b      	lsls	r3, r3, #1
 801bb76:	4299      	cmp	r1, r3
 801bb78:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801bb7c:	d8fa      	bhi.n	801bb74 <Argus_Dca_Update+0x354>
 801bb7e:	2a00      	cmp	r2, #0
 801bb80:	f040 822f 	bne.w	801bfe2 <Argus_Dca_Update+0x7c2>
 801bb84:	230f      	movs	r3, #15
 801bb86:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 801bb8a:	6873      	ldr	r3, [r6, #4]
 801bb8c:	2200      	movs	r2, #0
 801bb8e:	f36c 020f 	bfi	r2, ip, #0, #16
 801bb92:	f36c 421f 	bfi	r2, ip, #16, #16
 801bb96:	2b00      	cmp	r3, #0
 801bb98:	f8c7 2022 	str.w	r2, [r7, #34]	@ 0x22
 801bb9c:	461c      	mov	r4, r3
 801bb9e:	f000 81f7 	beq.w	801bf90 <Argus_Dca_Update+0x770>
 801bba2:	f2c0 8261 	blt.w	801c068 <Argus_Dca_Update+0x848>
 801bba6:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 801bbaa:	4293      	cmp	r3, r2
 801bbac:	f200 823b 	bhi.w	801c026 <Argus_Dca_Update+0x806>
 801bbb0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801bbb4:	f649 413f 	movw	r1, #39999	@ 0x9c3f
 801bbb8:	005b      	lsls	r3, r3, #1
 801bbba:	428b      	cmp	r3, r1
 801bbbc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801bbc0:	d9fa      	bls.n	801bbb8 <Argus_Dca_Update+0x398>
 801bbc2:	2a00      	cmp	r2, #0
 801bbc4:	f040 8231 	bne.w	801c02a <Argus_Dca_Update+0x80a>
 801bbc8:	2c00      	cmp	r4, #0
 801bbca:	bfac      	ite	ge
 801bbcc:	f06f 4000 	mvnge.w	r0, #2147483648	@ 0x80000000
 801bbd0:	f04f 4000 	movlt.w	r0, #2147483648	@ 0x80000000
 801bbd4:	f00c fee0 	bl	8028998 <fp_log16>
 801bbd8:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
 801bbdc:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
 801bbe0:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 801bbe4:	f240 81a9 	bls.w	801bf3a <Argus_Dca_Update+0x71a>
 801bbe8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801bbec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 801bbf0:	4694      	mov	ip, r2
 801bbf2:	0052      	lsls	r2, r2, #1
 801bbf4:	428a      	cmp	r2, r1
 801bbf6:	461c      	mov	r4, r3
 801bbf8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801bbfc:	d3f8      	bcc.n	801bbf0 <Argus_Dca_Update+0x3d0>
 801bbfe:	2b00      	cmp	r3, #0
 801bc00:	f040 8191 	bne.w	801bf26 <Argus_Dca_Update+0x706>
 801bc04:	2800      	cmp	r0, #0
 801bc06:	bfac      	ite	ge
 801bc08:	f06f 4000 	mvnge.w	r0, #2147483648	@ 0x80000000
 801bc0c:	f04f 4000 	movlt.w	r0, #2147483648	@ 0x80000000
 801bc10:	f00c fe10 	bl	8028834 <fp_exp16>
 801bc14:	f8b6 30de 	ldrh.w	r3, [r6, #222]	@ 0xde
 801bc18:	f8b6 20dc 	ldrh.w	r2, [r6, #220]	@ 0xdc
 801bc1c:	fba3 3400 	umull	r3, r4, r3, r0
 801bc20:	fba2 1000 	umull	r1, r0, r2, r0
 801bc24:	0c1a      	lsrs	r2, r3, #16
 801bc26:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801bc2a:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 801bc2e:	4413      	add	r3, r2
 801bc30:	2b01      	cmp	r3, #1
 801bc32:	bf38      	it	cc
 801bc34:	2301      	movcc	r3, #1
 801bc36:	0c0c      	lsrs	r4, r1, #16
 801bc38:	f3c1 32c0 	ubfx	r2, r1, #15, #1
 801bc3c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801bc40:	428b      	cmp	r3, r1
 801bc42:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 801bc46:	4422      	add	r2, r4
 801bc48:	bf28      	it	cs
 801bc4a:	460b      	movcs	r3, r1
 801bc4c:	429a      	cmp	r2, r3
 801bc4e:	bf38      	it	cc
 801bc50:	461a      	movcc	r2, r3
 801bc52:	428a      	cmp	r2, r1
 801bc54:	bf28      	it	cs
 801bc56:	460a      	movcs	r2, r1
 801bc58:	857b      	strh	r3, [r7, #42]	@ 0x2a
 801bc5a:	853a      	strh	r2, [r7, #40]	@ 0x28
 801bc5c:	f896 3092 	ldrb.w	r3, [r6, #146]	@ 0x92
 801bc60:	2b02      	cmp	r3, #2
 801bc62:	f000 821f 	beq.w	801c0a4 <Argus_Dca_Update+0x884>
 801bc66:	2b03      	cmp	r3, #3
 801bc68:	f000 8211 	beq.w	801c08e <Argus_Dca_Update+0x86e>
 801bc6c:	2b01      	cmp	r3, #1
 801bc6e:	f000 8208 	beq.w	801c082 <Argus_Dca_Update+0x862>
 801bc72:	f8b5 228e 	ldrh.w	r2, [r5, #654]	@ 0x28e
 801bc76:	877a      	strh	r2, [r7, #58]	@ 0x3a
 801bc78:	f896 30c5 	ldrb.w	r3, [r6, #197]	@ 0xc5
 801bc7c:	fb02 f303 	mul.w	r3, r2, r3
 801bc80:	f3c3 11c0 	ubfx	r1, r3, #7, #1
 801bc84:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801bc88:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 801bc8a:	0313      	lsls	r3, r2, #12
 801bc8c:	b172      	cbz	r2, 801bcac <Argus_Dca_Update+0x48c>
 801bc8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801bc92:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801bc96:	f280 818f 	bge.w	801bfb8 <Argus_Dca_Update+0x798>
 801bc9a:	005b      	lsls	r3, r3, #1
 801bc9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801bca0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801bca4:	d3f9      	bcc.n	801bc9a <Argus_Dca_Update+0x47a>
 801bca6:	2a00      	cmp	r2, #0
 801bca8:	f040 8186 	bne.w	801bfb8 <Argus_Dca_Update+0x798>
 801bcac:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801bcb0:	8738      	strh	r0, [r7, #56]	@ 0x38
 801bcb2:	f895 1292 	ldrb.w	r1, [r5, #658]	@ 0x292
 801bcb6:	4668      	mov	r0, sp
 801bcb8:	0389      	lsls	r1, r1, #14
 801bcba:	f007 fb85 	bl	80233c8 <Argus_Cal_GetGainValues>
 801bcbe:	f107 0854 	add.w	r8, r7, #84	@ 0x54
 801bcc2:	46ee      	mov	lr, sp
 801bcc4:	f107 0c4c 	add.w	ip, r7, #76	@ 0x4c
 801bcc8:	f85e 3b04 	ldr.w	r3, [lr], #4
 801bccc:	2b00      	cmp	r3, #0
 801bcce:	4619      	mov	r1, r3
 801bcd0:	f000 80f3 	beq.w	801beba <Argus_Dca_Update+0x69a>
 801bcd4:	f2c0 810c 	blt.w	801bef0 <Argus_Dca_Update+0x6d0>
 801bcd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801bcdc:	f080 80f0 	bcs.w	801bec0 <Argus_Dca_Update+0x6a0>
 801bce0:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 801bce4:	005b      	lsls	r3, r3, #1
 801bce6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801bcea:	ea4f 0444 	mov.w	r4, r4, lsl #1
 801bcee:	d3f9      	bcc.n	801bce4 <Argus_Dca_Update+0x4c4>
 801bcf0:	2c00      	cmp	r4, #0
 801bcf2:	f040 80e7 	bne.w	801bec4 <Argus_Dca_Update+0x6a4>
 801bcf6:	43cb      	mvns	r3, r1
 801bcf8:	0fdb      	lsrs	r3, r3, #31
 801bcfa:	425b      	negs	r3, r3
 801bcfc:	b29b      	uxth	r3, r3
 801bcfe:	f82c 3b02 	strh.w	r3, [ip], #2
 801bd02:	45c4      	cmp	ip, r8
 801bd04:	d1e0      	bne.n	801bcc8 <Argus_Dca_Update+0x4a8>
 801bd06:	f996 40f4 	ldrsb.w	r4, [r6, #244]	@ 0xf4
 801bd0a:	2c00      	cmp	r4, #0
 801bd0c:	f040 8143 	bne.w	801bf96 <Argus_Dca_Update+0x776>
 801bd10:	f04f 33ff 	mov.w	r3, #4294967295
 801bd14:	61bb      	str	r3, [r7, #24]
 801bd16:	e9d7 1017 	ldrd	r1, r0, [r7, #92]	@ 0x5c
 801bd1a:	7d4b      	ldrb	r3, [r1, #21]
 801bd1c:	6805      	ldr	r5, [r0, #0]
 801bd1e:	f8b0 2098 	ldrh.w	r2, [r0, #152]	@ 0x98
 801bd22:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 801bd26:	b29b      	uxth	r3, r3
 801bd28:	fba3 3605 	umull	r3, r6, r3, r5
 801bd2c:	1aaa      	subs	r2, r5, r2
 801bd2e:	633a      	str	r2, [r7, #48]	@ 0x30
 801bd30:	0a1a      	lsrs	r2, r3, #8
 801bd32:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
 801bd36:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801bd3a:	189e      	adds	r6, r3, r2
 801bd3c:	62fe      	str	r6, [r7, #44]	@ 0x2c
 801bd3e:	f890 30a8 	ldrb.w	r3, [r0, #168]	@ 0xa8
 801bd42:	b3b3      	cbz	r3, 801bdb2 <Argus_Dca_Update+0x592>
 801bd44:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801bd48:	f8b0 80ae 	ldrh.w	r8, [r0, #174]	@ 0xae
 801bd4c:	332d      	adds	r3, #45	@ 0x2d
 801bd4e:	f1b9 0f00 	cmp.w	r9, #0
 801bd52:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801bd56:	464a      	mov	r2, r9
 801bd58:	f000 81ff 	beq.w	801c15a <Argus_Dca_Update+0x93a>
 801bd5c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801bd60:	46e2      	mov	sl, ip
 801bd62:	f2c0 81ae 	blt.w	801c0c2 <Argus_Dca_Update+0x8a2>
 801bd66:	45cc      	cmp	ip, r9
 801bd68:	f240 8336 	bls.w	801c3d8 <Argus_Dca_Update+0xbb8>
 801bd6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801bd70:	4696      	mov	lr, r2
 801bd72:	0052      	lsls	r2, r2, #1
 801bd74:	4594      	cmp	ip, r2
 801bd76:	469b      	mov	fp, r3
 801bd78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801bd7c:	d8f8      	bhi.n	801bd70 <Argus_Dca_Update+0x550>
 801bd7e:	2b00      	cmp	r3, #0
 801bd80:	f040 81ed 	bne.w	801c15e <Argus_Dca_Update+0x93e>
 801bd84:	ea9c 0f09 	teq	ip, r9
 801bd88:	4699      	mov	r9, r3
 801bd8a:	4baa      	ldr	r3, [pc, #680]	@ (801c034 <Argus_Dca_Update+0x814>)
 801bd8c:	4aaa      	ldr	r2, [pc, #680]	@ (801c038 <Argus_Dca_Update+0x818>)
 801bd8e:	bf48      	it	mi
 801bd90:	461a      	movmi	r2, r3
 801bd92:	eba5 0808 	sub.w	r8, r5, r8
 801bd96:	fba8 2502 	umull	r2, r5, r8, r2
 801bd9a:	0c13      	lsrs	r3, r2, #16
 801bd9c:	fb08 5509 	mla	r5, r8, r9, r5
 801bda0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 801bda4:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 801bda8:	4413      	add	r3, r2
 801bdaa:	42b3      	cmp	r3, r6
 801bdac:	bf28      	it	cs
 801bdae:	4633      	movcs	r3, r6
 801bdb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801bdb2:	7d0b      	ldrb	r3, [r1, #20]
 801bdb4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 801bdb8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801bdbc:	803b      	strh	r3, [r7, #0]
 801bdbe:	713b      	strb	r3, [r7, #4]
 801bdc0:	898d      	ldrh	r5, [r1, #12]
 801bdc2:	813d      	strh	r5, [r7, #8]
 801bdc4:	2200      	movs	r2, #0
 801bdc6:	807a      	strh	r2, [r7, #2]
 801bdc8:	7acb      	ldrb	r3, [r1, #11]
 801bdca:	1a9b      	subs	r3, r3, r2
 801bdcc:	bf18      	it	ne
 801bdce:	2301      	movne	r3, #1
 801bdd0:	733b      	strb	r3, [r7, #12]
 801bdd2:	7c8b      	ldrb	r3, [r1, #18]
 801bdd4:	737b      	strb	r3, [r7, #13]
 801bdd6:	73ba      	strb	r2, [r7, #14]
 801bdd8:	f991 3000 	ldrsb.w	r3, [r1]
 801bddc:	4293      	cmp	r3, r2
 801bdde:	dd07      	ble.n	801bdf0 <Argus_Dca_Update+0x5d0>
 801bde0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801bde2:	737a      	strb	r2, [r7, #13]
 801bde4:	f890 20c0 	ldrb.w	r2, [r0, #192]	@ 0xc0
 801bde8:	73ba      	strb	r2, [r7, #14]
 801bdea:	429d      	cmp	r5, r3
 801bdec:	bf88      	it	hi
 801bdee:	813b      	strhhi	r3, [r7, #8]
 801bdf0:	2500      	movs	r5, #0
 801bdf2:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 801bdf4:	84fd      	strh	r5, [r7, #38]	@ 0x26
 801bdf6:	f7fd feff 	bl	8019bf8 <Argus_Eval_ResetShotNoiseAmplitude>
 801bdfa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801bdfc:	893e      	ldrh	r6, [r7, #8]
 801bdfe:	f887 5035 	strb.w	r5, [r7, #53]	@ 0x35
 801be02:	e9d3 2124 	ldrd	r2, r1, [r3, #144]	@ 0x90
 801be06:	09b0      	lsrs	r0, r6, #6
 801be08:	2801      	cmp	r0, #1
 801be0a:	bf38      	it	cc
 801be0c:	2001      	movcc	r0, #1
 801be0e:	fb01 2200 	mla	r2, r1, r0, r2
 801be12:	e9d7 130b 	ldrd	r1, r3, [r7, #44]	@ 0x2c
 801be16:	428b      	cmp	r3, r1
 801be18:	bf28      	it	cs
 801be1a:	460b      	movcs	r3, r1
 801be1c:	f3c2 3140 	ubfx	r1, r2, #13, #1
 801be20:	eb01 3292 	add.w	r2, r1, r2, lsr #14
 801be24:	fbb3 f1f2 	udiv	r1, r3, r2
 801be28:	2901      	cmp	r1, #1
 801be2a:	bf38      	it	cc
 801be2c:	2101      	movcc	r1, #1
 801be2e:	86fd      	strh	r5, [r7, #54]	@ 0x36
 801be30:	69bd      	ldr	r5, [r7, #24]
 801be32:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801be36:	bf28      	it	cs
 801be38:	f44f 6180 	movcs.w	r1, #1024	@ 0x400
 801be3c:	1c6b      	adds	r3, r5, #1
 801be3e:	8179      	strh	r1, [r7, #10]
 801be40:	d024      	beq.n	801be8c <Argus_Dca_Update+0x66c>
 801be42:	7b3b      	ldrb	r3, [r7, #12]
 801be44:	2b01      	cmp	r3, #1
 801be46:	d15f      	bne.n	801bf08 <Argus_Dca_Update+0x6e8>
 801be48:	f897 c03e 	ldrb.w	ip, [r7, #62]	@ 0x3e
 801be4c:	f1bc 0f01 	cmp.w	ip, #1
 801be50:	bf38      	it	cc
 801be52:	f04f 0c01 	movcc.w	ip, #1
 801be56:	8bbb      	ldrh	r3, [r7, #28]
 801be58:	fb00 fe0c 	mul.w	lr, r0, ip
 801be5c:	f3c5 000e 	ubfx	r0, r5, #0, #15
 801be60:	fb03 f000 	mul.w	r0, r3, r0
 801be64:	0bc2      	lsrs	r2, r0, #15
 801be66:	0bed      	lsrs	r5, r5, #15
 801be68:	fb03 2205 	mla	r2, r3, r5, r2
 801be6c:	f3c0 3080 	ubfx	r0, r0, #14, #1
 801be70:	1813      	adds	r3, r2, r0
 801be72:	4573      	cmp	r3, lr
 801be74:	d34b      	bcc.n	801bf0e <Argus_Dca_Update+0x6ee>
 801be76:	fbb3 f3fe 	udiv	r3, r3, lr
 801be7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801be7e:	bf28      	it	cs
 801be80:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 801be84:	428b      	cmp	r3, r1
 801be86:	bf28      	it	cs
 801be88:	460b      	movcs	r3, r1
 801be8a:	817b      	strh	r3, [r7, #10]
 801be8c:	7b7b      	ldrb	r3, [r7, #13]
 801be8e:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 801be92:	2100      	movs	r1, #0
 801be94:	429a      	cmp	r2, r3
 801be96:	73f9      	strb	r1, [r7, #15]
 801be98:	d06f      	beq.n	801bf7a <Argus_Dca_Update+0x75a>
 801be9a:	2001      	movs	r0, #1
 801be9c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801be9e:	7cd1      	ldrb	r1, [r2, #19]
 801bea0:	4299      	cmp	r1, r3
 801bea2:	d306      	bcc.n	801beb2 <Argus_Dca_Update+0x692>
 801bea4:	8939      	ldrh	r1, [r7, #8]
 801bea6:	89d3      	ldrh	r3, [r2, #14]
 801bea8:	4299      	cmp	r1, r3
 801beaa:	d802      	bhi.n	801beb2 <Argus_Dca_Update+0x692>
 801beac:	7b3b      	ldrb	r3, [r7, #12]
 801beae:	b903      	cbnz	r3, 801beb2 <Argus_Dca_Update+0x692>
 801beb0:	73f8      	strb	r0, [r7, #15]
 801beb2:	4620      	mov	r0, r4
 801beb4:	b005      	add	sp, #20
 801beb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801beba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801bebe:	e71e      	b.n	801bcfe <Argus_Dca_Update+0x4de>
 801bec0:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 801bec4:	2000      	movs	r0, #0
 801bec6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801beca:	e000      	b.n	801bece <Argus_Dca_Update+0x6ae>
 801becc:	b152      	cbz	r2, 801bee4 <Argus_Dca_Update+0x6c4>
 801bece:	4293      	cmp	r3, r2
 801bed0:	bf9c      	itt	ls
 801bed2:	1ad2      	subls	r2, r2, r3
 801bed4:	4320      	orrls	r0, r4
 801bed6:	0864      	lsrs	r4, r4, #1
 801bed8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801bedc:	d1f6      	bne.n	801becc <Argus_Dca_Update+0x6ac>
 801bede:	4293      	cmp	r3, r2
 801bee0:	bf98      	it	ls
 801bee2:	3001      	addls	r0, #1
 801bee4:	2900      	cmp	r1, #0
 801bee6:	db45      	blt.n	801bf74 <Argus_Dca_Update+0x754>
 801bee8:	2800      	cmp	r0, #0
 801beea:	dbe6      	blt.n	801beba <Argus_Dca_Update+0x69a>
 801beec:	b283      	uxth	r3, r0
 801beee:	e706      	b.n	801bcfe <Argus_Dca_Update+0x4de>
 801bef0:	425b      	negs	r3, r3
 801bef2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801bef6:	f4ff aef3 	bcc.w	801bce0 <Argus_Dca_Update+0x4c0>
 801befa:	2b00      	cmp	r3, #0
 801befc:	dae0      	bge.n	801bec0 <Argus_Dca_Update+0x6a0>
 801befe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801bf02:	f44f 4400 	mov.w	r4, #32768	@ 0x8000
 801bf06:	e7dd      	b.n	801bec4 <Argus_Dca_Update+0x6a4>
 801bf08:	f04f 0c04 	mov.w	ip, #4
 801bf0c:	e7a3      	b.n	801be56 <Argus_Dca_Update+0x636>
 801bf0e:	459c      	cmp	ip, r3
 801bf10:	f200 80cf 	bhi.w	801c0b2 <Argus_Dca_Update+0x892>
 801bf14:	fbb3 f2fc 	udiv	r2, r3, ip
 801bf18:	0192      	lsls	r2, r2, #6
 801bf1a:	42b2      	cmp	r2, r6
 801bf1c:	bf28      	it	cs
 801bf1e:	4632      	movcs	r2, r6
 801bf20:	813a      	strh	r2, [r7, #8]
 801bf22:	2301      	movs	r3, #1
 801bf24:	e7ae      	b.n	801be84 <Argus_Dca_Update+0x664>
 801bf26:	2a00      	cmp	r2, #0
 801bf28:	da0e      	bge.n	801bf48 <Argus_Dca_Update+0x728>
 801bf2a:	428a      	cmp	r2, r1
 801bf2c:	f040 80f4 	bne.w	801c118 <Argus_Dca_Update+0x8f8>
 801bf30:	2800      	cmp	r0, #0
 801bf32:	461c      	mov	r4, r3
 801bf34:	da18      	bge.n	801bf68 <Argus_Dca_Update+0x748>
 801bf36:	4260      	negs	r0, r4
 801bf38:	e66a      	b.n	801bc10 <Argus_Dca_Update+0x3f0>
 801bf3a:	2900      	cmp	r1, #0
 801bf3c:	f000 8259 	beq.w	801c3f2 <Argus_Dca_Update+0xbd2>
 801bf40:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 801bf44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801bf48:	2400      	movs	r4, #0
 801bf4a:	e000      	b.n	801bf4e <Argus_Dca_Update+0x72e>
 801bf4c:	b151      	cbz	r1, 801bf64 <Argus_Dca_Update+0x744>
 801bf4e:	428a      	cmp	r2, r1
 801bf50:	bf9c      	itt	ls
 801bf52:	1a89      	subls	r1, r1, r2
 801bf54:	431c      	orrls	r4, r3
 801bf56:	085b      	lsrs	r3, r3, #1
 801bf58:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801bf5c:	d1f6      	bne.n	801bf4c <Argus_Dca_Update+0x72c>
 801bf5e:	4291      	cmp	r1, r2
 801bf60:	d300      	bcc.n	801bf64 <Argus_Dca_Update+0x744>
 801bf62:	3401      	adds	r4, #1
 801bf64:	2800      	cmp	r0, #0
 801bf66:	dbe6      	blt.n	801bf36 <Argus_Dca_Update+0x716>
 801bf68:	2c00      	cmp	r4, #0
 801bf6a:	bfac      	ite	ge
 801bf6c:	4620      	movge	r0, r4
 801bf6e:	f06f 4000 	mvnlt.w	r0, #2147483648	@ 0x80000000
 801bf72:	e64d      	b.n	801bc10 <Argus_Dca_Update+0x3f0>
 801bf74:	4243      	negs	r3, r0
 801bf76:	b29b      	uxth	r3, r3
 801bf78:	e6c1      	b.n	801bcfe <Argus_Dca_Update+0x4de>
 801bf7a:	8939      	ldrh	r1, [r7, #8]
 801bf7c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801bf7e:	4291      	cmp	r1, r2
 801bf80:	d18b      	bne.n	801be9a <Argus_Dca_Update+0x67a>
 801bf82:	7b3a      	ldrb	r2, [r7, #12]
 801bf84:	2a01      	cmp	r2, #1
 801bf86:	d188      	bne.n	801be9a <Argus_Dca_Update+0x67a>
 801bf88:	2202      	movs	r2, #2
 801bf8a:	73fa      	strb	r2, [r7, #15]
 801bf8c:	2003      	movs	r0, #3
 801bf8e:	e785      	b.n	801be9c <Argus_Dca_Update+0x67c>
 801bf90:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801bf94:	e61e      	b.n	801bbd4 <Argus_Dca_Update+0x3b4>
 801bf96:	f896 3092 	ldrb.w	r3, [r6, #146]	@ 0x92
 801bf9a:	2b02      	cmp	r3, #2
 801bf9c:	f000 8174 	beq.w	801c288 <Argus_Dca_Update+0xa68>
 801bfa0:	2b03      	cmp	r3, #3
 801bfa2:	f000 8168 	beq.w	801c276 <Argus_Dca_Update+0xa56>
 801bfa6:	2b01      	cmp	r3, #1
 801bfa8:	f000 80ed 	beq.w	801c186 <Argus_Dca_Update+0x966>
 801bfac:	4823      	ldr	r0, [pc, #140]	@ (801c03c <Argus_Dca_Update+0x81c>)
 801bfae:	f7f6 fff1 	bl	8012f94 <print>
 801bfb2:	2300      	movs	r3, #0
 801bfb4:	61bb      	str	r3, [r7, #24]
 801bfb6:	e158      	b.n	801c26a <Argus_Dca_Update+0xa4a>
 801bfb8:	2000      	movs	r0, #0
 801bfba:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 801bfbe:	e000      	b.n	801bfc2 <Argus_Dca_Update+0x7a2>
 801bfc0:	b151      	cbz	r1, 801bfd8 <Argus_Dca_Update+0x7b8>
 801bfc2:	4299      	cmp	r1, r3
 801bfc4:	bf24      	itt	cs
 801bfc6:	1ac9      	subcs	r1, r1, r3
 801bfc8:	4310      	orrcs	r0, r2
 801bfca:	0852      	lsrs	r2, r2, #1
 801bfcc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801bfd0:	d1f6      	bne.n	801bfc0 <Argus_Dca_Update+0x7a0>
 801bfd2:	4299      	cmp	r1, r3
 801bfd4:	d300      	bcc.n	801bfd8 <Argus_Dca_Update+0x7b8>
 801bfd6:	3001      	adds	r0, #1
 801bfd8:	2800      	cmp	r0, #0
 801bfda:	f6ff ae67 	blt.w	801bcac <Argus_Dca_Update+0x48c>
 801bfde:	b280      	uxth	r0, r0
 801bfe0:	e666      	b.n	801bcb0 <Argus_Dca_Update+0x490>
 801bfe2:	2400      	movs	r4, #0
 801bfe4:	1ac8      	subs	r0, r1, r3
 801bfe6:	b149      	cbz	r1, 801bffc <Argus_Dca_Update+0x7dc>
 801bfe8:	428b      	cmp	r3, r1
 801bfea:	d817      	bhi.n	801c01c <Argus_Dca_Update+0x7fc>
 801bfec:	4314      	orrs	r4, r2
 801bfee:	0852      	lsrs	r2, r2, #1
 801bff0:	ea4f 0140 	mov.w	r1, r0, lsl #1
 801bff4:	d1f6      	bne.n	801bfe4 <Argus_Dca_Update+0x7c4>
 801bff6:	428b      	cmp	r3, r1
 801bff8:	d800      	bhi.n	801bffc <Argus_Dca_Update+0x7dc>
 801bffa:	3401      	adds	r4, #1
 801bffc:	2c00      	cmp	r4, #0
 801bffe:	f6ff adc1 	blt.w	801bb84 <Argus_Dca_Update+0x364>
 801c002:	fab4 f384 	clz	r3, r4
 801c006:	f1c3 021e 	rsb	r2, r3, #30
 801c00a:	40d4      	lsrs	r4, r2
 801c00c:	f1c3 031f 	rsb	r3, r3, #31
 801c010:	2c03      	cmp	r4, #3
 801c012:	bf08      	it	eq
 801c014:	3301      	addeq	r3, #1
 801c016:	3b10      	subs	r3, #16
 801c018:	b2db      	uxtb	r3, r3
 801c01a:	e5b4      	b.n	801bb86 <Argus_Dca_Update+0x366>
 801c01c:	0852      	lsrs	r2, r2, #1
 801c01e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801c022:	d1df      	bne.n	801bfe4 <Argus_Dca_Update+0x7c4>
 801c024:	e7e7      	b.n	801bff6 <Argus_Dca_Update+0x7d6>
 801c026:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801c02a:	2000      	movs	r0, #0
 801c02c:	f649 4140 	movw	r1, #40000	@ 0x9c40
 801c030:	e007      	b.n	801c042 <Argus_Dca_Update+0x822>
 801c032:	bf00      	nop
 801c034:	80010000 	.word	0x80010000
 801c038:	80010001 	.word	0x80010001
 801c03c:	0802dffc 	.word	0x0802dffc
 801c040:	b151      	cbz	r1, 801c058 <Argus_Dca_Update+0x838>
 801c042:	428b      	cmp	r3, r1
 801c044:	bf9c      	itt	ls
 801c046:	1ac9      	subls	r1, r1, r3
 801c048:	4310      	orrls	r0, r2
 801c04a:	0852      	lsrs	r2, r2, #1
 801c04c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801c050:	d1f6      	bne.n	801c040 <Argus_Dca_Update+0x820>
 801c052:	4299      	cmp	r1, r3
 801c054:	bf28      	it	cs
 801c056:	3001      	addcs	r0, #1
 801c058:	2c00      	cmp	r4, #0
 801c05a:	f2c0 8092 	blt.w	801c182 <Argus_Dca_Update+0x962>
 801c05e:	2800      	cmp	r0, #0
 801c060:	bfb8      	it	lt
 801c062:	f06f 4000 	mvnlt.w	r0, #2147483648	@ 0x80000000
 801c066:	e5b5      	b.n	801bbd4 <Argus_Dca_Update+0x3b4>
 801c068:	425b      	negs	r3, r3
 801c06a:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 801c06e:	4293      	cmp	r3, r2
 801c070:	f67f ad9e 	bls.w	801bbb0 <Argus_Dca_Update+0x390>
 801c074:	2b00      	cmp	r3, #0
 801c076:	dad6      	bge.n	801c026 <Argus_Dca_Update+0x806>
 801c078:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801c07c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 801c080:	e7d3      	b.n	801c02a <Argus_Dca_Update+0x80a>
 801c082:	f896 306b 	ldrb.w	r3, [r6, #107]	@ 0x6b
 801c086:	08db      	lsrs	r3, r3, #3
 801c088:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 801c08c:	e5f1      	b.n	801bc72 <Argus_Dca_Update+0x452>
 801c08e:	f896 306c 	ldrb.w	r3, [r6, #108]	@ 0x6c
 801c092:	f896 206b 	ldrb.w	r2, [r6, #107]	@ 0x6b
 801c096:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801c09a:	eb03 03d2 	add.w	r3, r3, r2, lsr #3
 801c09e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 801c0a2:	e5e6      	b.n	801bc72 <Argus_Dca_Update+0x452>
 801c0a4:	f896 306c 	ldrb.w	r3, [r6, #108]	@ 0x6c
 801c0a8:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801c0ac:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 801c0b0:	e5df      	b.n	801bc72 <Argus_Dca_Update+0x452>
 801c0b2:	2200      	movs	r2, #0
 801c0b4:	2b03      	cmp	r3, #3
 801c0b6:	733a      	strb	r2, [r7, #12]
 801c0b8:	bf86      	itte	hi
 801c0ba:	089a      	lsrhi	r2, r3, #2
 801c0bc:	0192      	lslhi	r2, r2, #6
 801c0be:	2240      	movls	r2, #64	@ 0x40
 801c0c0:	e72b      	b.n	801bf1a <Argus_Dca_Update+0x6fa>
 801c0c2:	f1c9 0200 	rsb	r2, r9, #0
 801c0c6:	4594      	cmp	ip, r2
 801c0c8:	f63f ae50 	bhi.w	801bd6c <Argus_Dca_Update+0x54c>
 801c0cc:	2a00      	cmp	r2, #0
 801c0ce:	f2c0 8187 	blt.w	801c3e0 <Argus_Dca_Update+0xbc0>
 801c0d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801c0d6:	4696      	mov	lr, r2
 801c0d8:	4662      	mov	r2, ip
 801c0da:	f1bc 0f00 	cmp.w	ip, #0
 801c0de:	d00d      	beq.n	801c0fc <Argus_Dca_Update+0x8dc>
 801c0e0:	2200      	movs	r2, #0
 801c0e2:	e002      	b.n	801c0ea <Argus_Dca_Update+0x8ca>
 801c0e4:	f1bc 0f00 	cmp.w	ip, #0
 801c0e8:	d008      	beq.n	801c0fc <Argus_Dca_Update+0x8dc>
 801c0ea:	45e6      	cmp	lr, ip
 801c0ec:	bf9c      	itt	ls
 801c0ee:	ebac 0c0e 	subls.w	ip, ip, lr
 801c0f2:	431a      	orrls	r2, r3
 801c0f4:	085b      	lsrs	r3, r3, #1
 801c0f6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 801c0fa:	d1f3      	bne.n	801c0e4 <Argus_Dca_Update+0x8c4>
 801c0fc:	45e6      	cmp	lr, ip
 801c0fe:	bf98      	it	ls
 801c100:	3201      	addls	r2, #1
 801c102:	ea9a 0f09 	teq	sl, r9
 801c106:	d437      	bmi.n	801c178 <Argus_Dca_Update+0x958>
 801c108:	2a00      	cmp	r2, #0
 801c10a:	f2c0 8128 	blt.w	801c35e <Argus_Dca_Update+0xb3e>
 801c10e:	f5c2 3280 	rsb	r2, r2, #65536	@ 0x10000
 801c112:	f04f 0900 	mov.w	r9, #0
 801c116:	e63c      	b.n	801bd92 <Argus_Dca_Update+0x572>
 801c118:	f034 4300 	bics.w	r3, r4, #2147483648	@ 0x80000000
 801c11c:	f02c 4200 	bic.w	r2, ip, #2147483648	@ 0x80000000
 801c120:	f47f af12 	bne.w	801bf48 <Argus_Dca_Update+0x728>
 801c124:	461c      	mov	r4, r3
 801c126:	e71a      	b.n	801bf5e <Argus_Dca_Update+0x73e>
 801c128:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801c12c:	2100      	movs	r1, #0
 801c12e:	1aa0      	subs	r0, r4, r2
 801c130:	b14c      	cbz	r4, 801c146 <Argus_Dca_Update+0x926>
 801c132:	42a2      	cmp	r2, r4
 801c134:	d80c      	bhi.n	801c150 <Argus_Dca_Update+0x930>
 801c136:	4319      	orrs	r1, r3
 801c138:	085b      	lsrs	r3, r3, #1
 801c13a:	ea4f 0440 	mov.w	r4, r0, lsl #1
 801c13e:	d1f6      	bne.n	801c12e <Argus_Dca_Update+0x90e>
 801c140:	42a2      	cmp	r2, r4
 801c142:	d800      	bhi.n	801c146 <Argus_Dca_Update+0x926>
 801c144:	3101      	adds	r1, #1
 801c146:	2900      	cmp	r1, #0
 801c148:	f6ff ad03 	blt.w	801bb52 <Argus_Dca_Update+0x332>
 801c14c:	b289      	uxth	r1, r1
 801c14e:	e502      	b.n	801bb56 <Argus_Dca_Update+0x336>
 801c150:	085b      	lsrs	r3, r3, #1
 801c152:	ea4f 0444 	mov.w	r4, r4, lsl #1
 801c156:	d1ea      	bne.n	801c12e <Argus_Dca_Update+0x90e>
 801c158:	e7f2      	b.n	801c140 <Argus_Dca_Update+0x920>
 801c15a:	4aac      	ldr	r2, [pc, #688]	@ (801c40c <Argus_Dca_Update+0xbec>)
 801c15c:	e619      	b.n	801bd92 <Argus_Dca_Update+0x572>
 801c15e:	2a00      	cmp	r2, #0
 801c160:	dab9      	bge.n	801c0d6 <Argus_Dca_Update+0x8b6>
 801c162:	f03b 4300 	bics.w	r3, fp, #2147483648	@ 0x80000000
 801c166:	f000 80a9 	beq.w	801c2bc <Argus_Dca_Update+0xa9c>
 801c16a:	f1bc 0f00 	cmp.w	ip, #0
 801c16e:	d1b7      	bne.n	801c0e0 <Argus_Dca_Update+0x8c0>
 801c170:	f1b9 0f00 	cmp.w	r9, #0
 801c174:	4662      	mov	r2, ip
 801c176:	daca      	bge.n	801c10e <Argus_Dca_Update+0x8ee>
 801c178:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 801c17c:	f04f 0900 	mov.w	r9, #0
 801c180:	e607      	b.n	801bd92 <Argus_Dca_Update+0x572>
 801c182:	4240      	negs	r0, r0
 801c184:	e526      	b.n	801bbd4 <Argus_Dca_Update+0x3b4>
 801c186:	f896 306b 	ldrb.w	r3, [r6, #107]	@ 0x6b
 801c18a:	08d9      	lsrs	r1, r3, #3
 801c18c:	6972      	ldr	r2, [r6, #20]
 801c18e:	4ba0      	ldr	r3, [pc, #640]	@ (801c410 <Argus_Dca_Update+0xbf0>)
 801c190:	f1a2 00fa 	sub.w	r0, r2, #250	@ 0xfa
 801c194:	4298      	cmp	r0, r3
 801c196:	d866      	bhi.n	801c266 <Argus_Dca_Update+0xa46>
 801c198:	6874      	ldr	r4, [r6, #4]
 801c19a:	2cf9      	cmp	r4, #249	@ 0xf9
 801c19c:	d963      	bls.n	801c266 <Argus_Dca_Update+0xa46>
 801c19e:	f8b6 3084 	ldrh.w	r3, [r6, #132]	@ 0x84
 801c1a2:	ba5b      	rev16	r3, r3
 801c1a4:	f3c3 1049 	ubfx	r0, r3, #5, #10
 801c1a8:	f8b6 3063 	ldrh.w	r3, [r6, #99]	@ 0x63
 801c1ac:	ba5b      	rev16	r3, r3
 801c1ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801c1b2:	fb00 3303 	mla	r3, r0, r3, r3
 801c1b6:	fb01 f303 	mul.w	r3, r1, r3
 801c1ba:	f5b3 0ffa 	cmp.w	r3, #8192000	@ 0x7d0000
 801c1be:	d852      	bhi.n	801c266 <Argus_Dca_Update+0xa46>
 801c1c0:	429a      	cmp	r2, r3
 801c1c2:	d27d      	bcs.n	801c2c0 <Argus_Dca_Update+0xaa0>
 801c1c4:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 801c1c8:	0052      	lsls	r2, r2, #1
 801c1ca:	4293      	cmp	r3, r2
 801c1cc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801c1d0:	d8fa      	bhi.n	801c1c8 <Argus_Dca_Update+0x9a8>
 801c1d2:	2900      	cmp	r1, #0
 801c1d4:	f040 80e2 	bne.w	801c39c <Argus_Dca_Update+0xb7c>
 801c1d8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c1dc:	f8b5 0298 	ldrh.w	r0, [r5, #664]	@ 0x298
 801c1e0:	fba0 3203 	umull	r3, r2, r0, r3
 801c1e4:	fb00 2101 	mla	r1, r0, r1, r2
 801c1e8:	0bda      	lsrs	r2, r3, #15
 801c1ea:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 801c1ee:	f3c3 3380 	ubfx	r3, r3, #14, #1
 801c1f2:	4413      	add	r3, r2
 801c1f4:	0c1a      	lsrs	r2, r3, #16
 801c1f6:	fba4 1202 	umull	r1, r2, r4, r2
 801c1fa:	2a00      	cmp	r2, #0
 801c1fc:	f040 80ff 	bne.w	801c3fe <Argus_Dca_Update+0xbde>
 801c200:	fba3 3404 	umull	r3, r4, r3, r4
 801c204:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 801c208:	0c1b      	lsrs	r3, r3, #16
 801c20a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801c20e:	4413      	add	r3, r2
 801c210:	f06f 0201 	mvn.w	r2, #1
 801c214:	429a      	cmp	r2, r3
 801c216:	bf28      	it	cs
 801c218:	461a      	movcs	r2, r3
 801c21a:	61ba      	str	r2, [r7, #24]
 801c21c:	b32b      	cbz	r3, 801c26a <Argus_Dca_Update+0xa4a>
 801c21e:	0bd5      	lsrs	r5, r2, #15
 801c220:	f3c2 020e 	ubfx	r2, r2, #0, #15
 801c224:	8bbc      	ldrh	r4, [r7, #28]
 801c226:	f897 003e 	ldrb.w	r0, [r7, #62]	@ 0x3e
 801c22a:	f8b6 1104 	ldrh.w	r1, [r6, #260]	@ 0x104
 801c22e:	fb04 f202 	mul.w	r2, r4, r2
 801c232:	0bd3      	lsrs	r3, r2, #15
 801c234:	fb04 3305 	mla	r3, r4, r5, r3
 801c238:	f3c2 3280 	ubfx	r2, r2, #14, #1
 801c23c:	2801      	cmp	r0, #1
 801c23e:	4413      	add	r3, r2
 801c240:	ea4f 1291 	mov.w	r2, r1, lsr #6
 801c244:	bf38      	it	cc
 801c246:	2001      	movcc	r0, #1
 801c248:	2a01      	cmp	r2, #1
 801c24a:	bf38      	it	cc
 801c24c:	2201      	movcc	r2, #1
 801c24e:	fb00 f202 	mul.w	r2, r0, r2
 801c252:	4293      	cmp	r3, r2
 801c254:	d242      	bcs.n	801c2dc <Argus_Dca_Update+0xabc>
 801c256:	4298      	cmp	r0, r3
 801c258:	d936      	bls.n	801c2c8 <Argus_Dca_Update+0xaa8>
 801c25a:	486e      	ldr	r0, [pc, #440]	@ (801c414 <Argus_Dca_Update+0xbf4>)
 801c25c:	f7f6 fe9a 	bl	8012f94 <print>
 801c260:	f06f 0465 	mvn.w	r4, #101	@ 0x65
 801c264:	e557      	b.n	801bd16 <Argus_Dca_Update+0x4f6>
 801c266:	2300      	movs	r3, #0
 801c268:	61bb      	str	r3, [r7, #24]
 801c26a:	486b      	ldr	r0, [pc, #428]	@ (801c418 <Argus_Dca_Update+0xbf8>)
 801c26c:	f7f6 fe92 	bl	8012f94 <print>
 801c270:	f06f 0465 	mvn.w	r4, #101	@ 0x65
 801c274:	e54f      	b.n	801bd16 <Argus_Dca_Update+0x4f6>
 801c276:	f896 306c 	ldrb.w	r3, [r6, #108]	@ 0x6c
 801c27a:	f896 106b 	ldrb.w	r1, [r6, #107]	@ 0x6b
 801c27e:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801c282:	eb03 01d1 	add.w	r1, r3, r1, lsr #3
 801c286:	e781      	b.n	801c18c <Argus_Dca_Update+0x96c>
 801c288:	f896 306c 	ldrb.w	r3, [r6, #108]	@ 0x6c
 801c28c:	f3c3 0144 	ubfx	r1, r3, #1, #5
 801c290:	e77c      	b.n	801c18c <Argus_Dca_Update+0x96c>
 801c292:	084b      	lsrs	r3, r1, #1
 801c294:	ea4f 0251 	mov.w	r2, r1, lsr #1
 801c298:	bf18      	it	ne
 801c29a:	2200      	movne	r2, #0
 801c29c:	f47f ac36 	bne.w	801bb0c <Argus_Dca_Update+0x2ec>
 801c2a0:	7b30      	ldrb	r0, [r6, #12]
 801c2a2:	f1c0 0080 	rsb	r0, r0, #128	@ 0x80
 801c2a6:	b2c0      	uxtb	r0, r0
 801c2a8:	fbb0 f1f4 	udiv	r1, r0, r4
 801c2ac:	f887 1020 	strb.w	r1, [r7, #32]
 801c2b0:	e441      	b.n	801bb36 <Argus_Dca_Update+0x316>
 801c2b2:	084a      	lsrs	r2, r1, #1
 801c2b4:	2308      	movs	r3, #8
 801c2b6:	e43e      	b.n	801bb36 <Argus_Dca_Update+0x316>
 801c2b8:	2260      	movs	r2, #96	@ 0x60
 801c2ba:	e424      	b.n	801bb06 <Argus_Dca_Update+0x2e6>
 801c2bc:	461a      	mov	r2, r3
 801c2be:	e71d      	b.n	801c0fc <Argus_Dca_Update+0x8dc>
 801c2c0:	2b00      	cmp	r3, #0
 801c2c2:	d169      	bne.n	801c398 <Argus_Dca_Update+0xb78>
 801c2c4:	61bb      	str	r3, [r7, #24]
 801c2c6:	e7d0      	b.n	801c26a <Argus_Dca_Update+0xa4a>
 801c2c8:	fbb3 f3f0 	udiv	r3, r3, r0
 801c2cc:	019b      	lsls	r3, r3, #6
 801c2ce:	428b      	cmp	r3, r1
 801c2d0:	bf28      	it	cs
 801c2d2:	460b      	movcs	r3, r1
 801c2d4:	b29b      	uxth	r3, r3
 801c2d6:	4299      	cmp	r1, r3
 801c2d8:	bf28      	it	cs
 801c2da:	4619      	movcs	r1, r3
 801c2dc:	84b9      	strh	r1, [r7, #36]	@ 0x24
 801c2de:	2400      	movs	r4, #0
 801c2e0:	e519      	b.n	801bd16 <Argus_Dca_Update+0x4f6>
 801c2e2:	084a      	lsrs	r2, r1, #1
 801c2e4:	2310      	movs	r3, #16
 801c2e6:	e426      	b.n	801bb36 <Argus_Dca_Update+0x316>
 801c2e8:	7b30      	ldrb	r0, [r6, #12]
 801c2ea:	f1c0 0080 	rsb	r0, r0, #128	@ 0x80
 801c2ee:	b2c0      	uxtb	r0, r0
 801c2f0:	1a83      	subs	r3, r0, r2
 801c2f2:	b2db      	uxtb	r3, r3
 801c2f4:	fbb3 f3f4 	udiv	r3, r3, r4
 801c2f8:	f887 3020 	strb.w	r3, [r7, #32]
 801c2fc:	f7ff bb53 	b.w	801b9a6 <Argus_Dca_Update+0x186>
 801c300:	2210      	movs	r2, #16
 801c302:	e400      	b.n	801bb06 <Argus_Dca_Update+0x2e6>
 801c304:	2218      	movs	r2, #24
 801c306:	f7ff bbfe 	b.w	801bb06 <Argus_Dca_Update+0x2e6>
 801c30a:	084a      	lsrs	r2, r1, #1
 801c30c:	2318      	movs	r3, #24
 801c30e:	e412      	b.n	801bb36 <Argus_Dca_Update+0x316>
 801c310:	2220      	movs	r2, #32
 801c312:	f7ff bbf8 	b.w	801bb06 <Argus_Dca_Update+0x2e6>
 801c316:	084a      	lsrs	r2, r1, #1
 801c318:	2320      	movs	r3, #32
 801c31a:	e40c      	b.n	801bb36 <Argus_Dca_Update+0x316>
 801c31c:	084a      	lsrs	r2, r1, #1
 801c31e:	2328      	movs	r3, #40	@ 0x28
 801c320:	e409      	b.n	801bb36 <Argus_Dca_Update+0x316>
 801c322:	2228      	movs	r2, #40	@ 0x28
 801c324:	f7ff bbef 	b.w	801bb06 <Argus_Dca_Update+0x2e6>
 801c328:	084a      	lsrs	r2, r1, #1
 801c32a:	2330      	movs	r3, #48	@ 0x30
 801c32c:	e403      	b.n	801bb36 <Argus_Dca_Update+0x316>
 801c32e:	2230      	movs	r2, #48	@ 0x30
 801c330:	f7ff bbe9 	b.w	801bb06 <Argus_Dca_Update+0x2e6>
 801c334:	084a      	lsrs	r2, r1, #1
 801c336:	2338      	movs	r3, #56	@ 0x38
 801c338:	f7ff bbfd 	b.w	801bb36 <Argus_Dca_Update+0x316>
 801c33c:	2240      	movs	r2, #64	@ 0x40
 801c33e:	f7ff bbe2 	b.w	801bb06 <Argus_Dca_Update+0x2e6>
 801c342:	2238      	movs	r2, #56	@ 0x38
 801c344:	f7ff bbdf 	b.w	801bb06 <Argus_Dca_Update+0x2e6>
 801c348:	084a      	lsrs	r2, r1, #1
 801c34a:	2340      	movs	r3, #64	@ 0x40
 801c34c:	f7ff bbf3 	b.w	801bb36 <Argus_Dca_Update+0x316>
 801c350:	084a      	lsrs	r2, r1, #1
 801c352:	2348      	movs	r3, #72	@ 0x48
 801c354:	f7ff bbef 	b.w	801bb36 <Argus_Dca_Update+0x316>
 801c358:	2248      	movs	r2, #72	@ 0x48
 801c35a:	f7ff bbd4 	b.w	801bb06 <Argus_Dca_Update+0x2e6>
 801c35e:	4a2b      	ldr	r2, [pc, #172]	@ (801c40c <Argus_Dca_Update+0xbec>)
 801c360:	f04f 0900 	mov.w	r9, #0
 801c364:	e515      	b.n	801bd92 <Argus_Dca_Update+0x572>
 801c366:	084a      	lsrs	r2, r1, #1
 801c368:	2350      	movs	r3, #80	@ 0x50
 801c36a:	f7ff bbe4 	b.w	801bb36 <Argus_Dca_Update+0x316>
 801c36e:	2250      	movs	r2, #80	@ 0x50
 801c370:	f7ff bbc9 	b.w	801bb06 <Argus_Dca_Update+0x2e6>
 801c374:	084a      	lsrs	r2, r1, #1
 801c376:	2358      	movs	r3, #88	@ 0x58
 801c378:	f7ff bbdd 	b.w	801bb36 <Argus_Dca_Update+0x316>
 801c37c:	084a      	lsrs	r2, r1, #1
 801c37e:	2360      	movs	r3, #96	@ 0x60
 801c380:	f7ff bbd9 	b.w	801bb36 <Argus_Dca_Update+0x316>
 801c384:	2258      	movs	r2, #88	@ 0x58
 801c386:	f7ff bbbe 	b.w	801bb06 <Argus_Dca_Update+0x2e6>
 801c38a:	2268      	movs	r2, #104	@ 0x68
 801c38c:	f7ff bbbb 	b.w	801bb06 <Argus_Dca_Update+0x2e6>
 801c390:	084a      	lsrs	r2, r1, #1
 801c392:	2368      	movs	r3, #104	@ 0x68
 801c394:	f7ff bbcf 	b.w	801bb36 <Argus_Dca_Update+0x316>
 801c398:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 801c39c:	2000      	movs	r0, #0
 801c39e:	e000      	b.n	801c3a2 <Argus_Dca_Update+0xb82>
 801c3a0:	b153      	cbz	r3, 801c3b8 <Argus_Dca_Update+0xb98>
 801c3a2:	4293      	cmp	r3, r2
 801c3a4:	bf24      	itt	cs
 801c3a6:	1a9b      	subcs	r3, r3, r2
 801c3a8:	4308      	orrcs	r0, r1
 801c3aa:	0849      	lsrs	r1, r1, #1
 801c3ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801c3b0:	d1f6      	bne.n	801c3a0 <Argus_Dca_Update+0xb80>
 801c3b2:	429a      	cmp	r2, r3
 801c3b4:	d800      	bhi.n	801c3b8 <Argus_Dca_Update+0xb98>
 801c3b6:	3001      	adds	r0, #1
 801c3b8:	2800      	cmp	r0, #0
 801c3ba:	db1c      	blt.n	801c3f6 <Argus_Dca_Update+0xbd6>
 801c3bc:	4603      	mov	r3, r0
 801c3be:	17c1      	asrs	r1, r0, #31
 801c3c0:	e70c      	b.n	801c1dc <Argus_Dca_Update+0x9bc>
 801c3c2:	084a      	lsrs	r2, r1, #1
 801c3c4:	2378      	movs	r3, #120	@ 0x78
 801c3c6:	f7ff bbb6 	b.w	801bb36 <Argus_Dca_Update+0x316>
 801c3ca:	084a      	lsrs	r2, r1, #1
 801c3cc:	2370      	movs	r3, #112	@ 0x70
 801c3ce:	f7ff bbb2 	b.w	801bb36 <Argus_Dca_Update+0x316>
 801c3d2:	2270      	movs	r2, #112	@ 0x70
 801c3d4:	f7ff bb97 	b.w	801bb06 <Argus_Dca_Update+0x2e6>
 801c3d8:	46ce      	mov	lr, r9
 801c3da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801c3de:	e67b      	b.n	801c0d8 <Argus_Dca_Update+0x8b8>
 801c3e0:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 801c3e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801c3e8:	f1bc 0f00 	cmp.w	ip, #0
 801c3ec:	f47f ae78 	bne.w	801c0e0 <Argus_Dca_Update+0x8c0>
 801c3f0:	e6be      	b.n	801c170 <Argus_Dca_Update+0x950>
 801c3f2:	4608      	mov	r0, r1
 801c3f4:	e40c      	b.n	801bc10 <Argus_Dca_Update+0x3f0>
 801c3f6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c3fa:	2100      	movs	r1, #0
 801c3fc:	e6ee      	b.n	801c1dc <Argus_Dca_Update+0x9bc>
 801c3fe:	f06f 0301 	mvn.w	r3, #1
 801c402:	4d06      	ldr	r5, [pc, #24]	@ (801c41c <Argus_Dca_Update+0xbfc>)
 801c404:	61bb      	str	r3, [r7, #24]
 801c406:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801c40a:	e70b      	b.n	801c224 <Argus_Dca_Update+0xa04>
 801c40c:	80010001 	.word	0x80010001
 801c410:	000185a6 	.word	0x000185a6
 801c414:	0802e050 	.word	0x0802e050
 801c418:	0802e020 	.word	0x0802e020
 801c41c:	0001ffff 	.word	0x0001ffff

0801c420 <Argus_Dca_Apply>:
 801c420:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 801c422:	f993 3000 	ldrsb.w	r3, [r3]
 801c426:	b903      	cbnz	r3, 801c42a <Argus_Dca_Apply+0xa>
 801c428:	4770      	bx	lr
 801c42a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c42e:	8803      	ldrh	r3, [r0, #0]
 801c430:	460d      	mov	r5, r1
 801c432:	8901      	ldrh	r1, [r0, #8]
 801c434:	b29b      	uxth	r3, r3
 801c436:	428b      	cmp	r3, r1
 801c438:	b083      	sub	sp, #12
 801c43a:	4604      	mov	r4, r0
 801c43c:	d05e      	beq.n	801c4fc <Argus_Dca_Apply+0xdc>
 801c43e:	8803      	ldrh	r3, [r0, #0]
 801c440:	8802      	ldrh	r2, [r0, #0]
 801c442:	8826      	ldrh	r6, [r4, #0]
 801c444:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801c448:	b2b6      	uxth	r6, r6
 801c44a:	b290      	uxth	r0, r2
 801c44c:	42be      	cmp	r6, r7
 801c44e:	ea4f 0241 	mov.w	r2, r1, lsl #1
 801c452:	b29b      	uxth	r3, r3
 801c454:	f002 027e 	and.w	r2, r2, #126	@ 0x7e
 801c458:	ea4f 1191 	mov.w	r1, r1, lsr #6
 801c45c:	f000 80c8 	beq.w	801c5f0 <Argus_Dca_Apply+0x1d0>
 801c460:	005b      	lsls	r3, r3, #1
 801c462:	f013 037e 	ands.w	r3, r3, #126	@ 0x7e
 801c466:	f000 80b5 	beq.w	801c5d4 <Argus_Dca_Apply+0x1b4>
 801c46a:	2a00      	cmp	r2, #0
 801c46c:	f040 819a 	bne.w	801c7a4 <Argus_Dca_Apply+0x384>
 801c470:	2001      	movs	r0, #1
 801c472:	4281      	cmp	r1, r0
 801c474:	f04f 0280 	mov.w	r2, #128	@ 0x80
 801c478:	d00e      	beq.n	801c498 <Argus_Dca_Apply+0x78>
 801c47a:	f895 003d 	ldrb.w	r0, [r5, #61]	@ 0x3d
 801c47e:	f885 103e 	strb.w	r1, [r5, #62]	@ 0x3e
 801c482:	f020 0003 	bic.w	r0, r0, #3
 801c486:	ea40 2111 	orr.w	r1, r0, r1, lsr #8
 801c48a:	f885 103d 	strb.w	r1, [r5, #61]	@ 0x3d
 801c48e:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801c490:	6f81      	ldr	r1, [r0, #120]	@ 0x78
 801c492:	f041 0110 	orr.w	r1, r1, #16
 801c496:	6781      	str	r1, [r0, #120]	@ 0x78
 801c498:	429a      	cmp	r2, r3
 801c49a:	d02f      	beq.n	801c4fc <Argus_Dca_Apply+0xdc>
 801c49c:	2a80      	cmp	r2, #128	@ 0x80
 801c49e:	6e26      	ldr	r6, [r4, #96]	@ 0x60
 801c4a0:	f000 818b 	beq.w	801c7ba <Argus_Dca_Apply+0x39a>
 801c4a4:	f896 800a 	ldrb.w	r8, [r6, #10]
 801c4a8:	f894 7020 	ldrb.w	r7, [r4, #32]
 801c4ac:	fb17 f708 	smulbb	r7, r7, r8
 801c4b0:	b2ff      	uxtb	r7, r7
 801c4b2:	ea4f 51c8 	mov.w	r1, r8, lsl #23
 801c4b6:	f1b8 0f00 	cmp.w	r8, #0
 801c4ba:	f000 80a4 	beq.w	801c606 <Argus_Dca_Apply+0x1e6>
 801c4be:	fb02 f307 	mul.w	r3, r2, r7
 801c4c2:	428b      	cmp	r3, r1
 801c4c4:	f240 81e8 	bls.w	801c898 <Argus_Dca_Apply+0x478>
 801c4c8:	e7fe      	b.n	801c4c8 <Argus_Dca_Apply+0xa8>
 801c4ca:	f8d6 104d 	ldr.w	r1, [r6, #77]	@ 0x4d
 801c4ce:	f8d6 2051 	ldr.w	r2, [r6, #81]	@ 0x51
 801c4d2:	f8d6 3055 	ldr.w	r3, [r6, #85]	@ 0x55
 801c4d6:	f8d6 0059 	ldr.w	r0, [r6, #89]	@ 0x59
 801c4da:	f8c5 0037 	str.w	r0, [r5, #55]	@ 0x37
 801c4de:	f8c5 102b 	str.w	r1, [r5, #43]	@ 0x2b
 801c4e2:	f8c5 202f 	str.w	r2, [r5, #47]	@ 0x2f
 801c4e6:	f8c5 3033 	str.w	r3, [r5, #51]	@ 0x33
 801c4ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c4ec:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 801c4ee:	f042 0204 	orr.w	r2, r2, #4
 801c4f2:	679a      	str	r2, [r3, #120]	@ 0x78
 801c4f4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 801c4f6:	f042 0208 	orr.w	r2, r2, #8
 801c4fa:	679a      	str	r2, [r3, #120]	@ 0x78
 801c4fc:	7923      	ldrb	r3, [r4, #4]
 801c4fe:	7b21      	ldrb	r1, [r4, #12]
 801c500:	428b      	cmp	r3, r1
 801c502:	d025      	beq.n	801c550 <Argus_Dca_Apply+0x130>
 801c504:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801c506:	2901      	cmp	r1, #1
 801c508:	bf08      	it	eq
 801c50a:	f894 303e 	ldrbeq.w	r3, [r4, #62]	@ 0x3e
 801c50e:	f892 208e 	ldrb.w	r2, [r2, #142]	@ 0x8e
 801c512:	bf16      	itet	ne
 801c514:	2004      	movne	r0, #4
 801c516:	4618      	moveq	r0, r3
 801c518:	4603      	movne	r3, r0
 801c51a:	2a02      	cmp	r2, #2
 801c51c:	d063      	beq.n	801c5e6 <Argus_Dca_Apply+0x1c6>
 801c51e:	2a03      	cmp	r2, #3
 801c520:	d05e      	beq.n	801c5e0 <Argus_Dca_Apply+0x1c0>
 801c522:	2a01      	cmp	r2, #1
 801c524:	d06b      	beq.n	801c5fe <Argus_Dca_Apply+0x1de>
 801c526:	2300      	movs	r3, #0
 801c528:	461a      	mov	r2, r3
 801c52a:	f895 1045 	ldrb.w	r1, [r5, #69]	@ 0x45
 801c52e:	f001 0107 	and.w	r1, r1, #7
 801c532:	430a      	orrs	r2, r1
 801c534:	f895 1046 	ldrb.w	r1, [r5, #70]	@ 0x46
 801c538:	f885 2045 	strb.w	r2, [r5, #69]	@ 0x45
 801c53c:	f021 023e 	bic.w	r2, r1, #62	@ 0x3e
 801c540:	4313      	orrs	r3, r2
 801c542:	f885 3046 	strb.w	r3, [r5, #70]	@ 0x46
 801c546:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801c548:	6f93      	ldr	r3, [r2, #120]	@ 0x78
 801c54a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c54e:	6793      	str	r3, [r2, #120]	@ 0x78
 801c550:	7b61      	ldrb	r1, [r4, #13]
 801c552:	7ba0      	ldrb	r0, [r4, #14]
 801c554:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
 801c558:	4421      	add	r1, r4
 801c55a:	f891 303f 	ldrb.w	r3, [r1, #63]	@ 0x3f
 801c55e:	4403      	add	r3, r0
 801c560:	b2db      	uxtb	r3, r3
 801c562:	f002 013f 	and.w	r1, r2, #63	@ 0x3f
 801c566:	428b      	cmp	r3, r1
 801c568:	d00b      	beq.n	801c582 <Argus_Dca_Apply+0x162>
 801c56a:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 801c56e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c572:	4313      	orrs	r3, r2
 801c574:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
 801c578:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801c57a:	6f93      	ldr	r3, [r2, #120]	@ 0x78
 801c57c:	f043 0320 	orr.w	r3, r3, #32
 801c580:	6793      	str	r3, [r2, #120]	@ 0x78
 801c582:	8862      	ldrh	r2, [r4, #2]
 801c584:	8963      	ldrh	r3, [r4, #10]
 801c586:	b292      	uxth	r2, r2
 801c588:	429a      	cmp	r2, r3
 801c58a:	d016      	beq.n	801c5ba <Argus_Dca_Apply+0x19a>
 801c58c:	f895 005e 	ldrb.w	r0, [r5, #94]	@ 0x5e
 801c590:	f895 205f 	ldrb.w	r2, [r5, #95]	@ 0x5f
 801c594:	3b01      	subs	r3, #1
 801c596:	f3c3 01c6 	ubfx	r1, r3, #3, #7
 801c59a:	f002 021f 	and.w	r2, r2, #31
 801c59e:	f020 007f 	bic.w	r0, r0, #127	@ 0x7f
 801c5a2:	ea42 1343 	orr.w	r3, r2, r3, lsl #5
 801c5a6:	4301      	orrs	r1, r0
 801c5a8:	f885 105e 	strb.w	r1, [r5, #94]	@ 0x5e
 801c5ac:	f885 305f 	strb.w	r3, [r5, #95]	@ 0x5f
 801c5b0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801c5b2:	6f93      	ldr	r3, [r2, #120]	@ 0x78
 801c5b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801c5b8:	6793      	str	r3, [r2, #120]	@ 0x78
 801c5ba:	f7e9 ff95 	bl	80064e8 <IRQ_LOCK>
 801c5be:	f104 0308 	add.w	r3, r4, #8
 801c5c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c5c6:	e884 0003 	stmia.w	r4, {r0, r1}
 801c5ca:	b003      	add	sp, #12
 801c5cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5d0:	f7e9 bf68 	b.w	80064a4 <IRQ_UNLOCK>
 801c5d4:	0980      	lsrs	r0, r0, #6
 801c5d6:	2a00      	cmp	r2, #0
 801c5d8:	f040 80e9 	bne.w	801c7ae <Argus_Dca_Apply+0x38e>
 801c5dc:	2380      	movs	r3, #128	@ 0x80
 801c5de:	e748      	b.n	801c472 <Argus_Dca_Apply+0x52>
 801c5e0:	2901      	cmp	r1, #1
 801c5e2:	f000 8152 	beq.w	801c88a <Argus_Dca_Apply+0x46a>
 801c5e6:	005b      	lsls	r3, r3, #1
 801c5e8:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801c5ec:	2200      	movs	r2, #0
 801c5ee:	e79c      	b.n	801c52a <Argus_Dca_Apply+0x10a>
 801c5f0:	2a00      	cmp	r2, #0
 801c5f2:	f040 80d3 	bne.w	801c79c <Argus_Dca_Apply+0x37c>
 801c5f6:	2280      	movs	r2, #128	@ 0x80
 801c5f8:	f04f 33ff 	mov.w	r3, #4294967295
 801c5fc:	e73d      	b.n	801c47a <Argus_Dca_Apply+0x5a>
 801c5fe:	00db      	lsls	r3, r3, #3
 801c600:	b25a      	sxtb	r2, r3
 801c602:	2300      	movs	r3, #0
 801c604:	e791      	b.n	801c52a <Argus_Dca_Apply+0x10a>
 801c606:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 801c60a:	f896 b008 	ldrb.w	fp, [r6, #8]
 801c60e:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 801c610:	6af1      	ldr	r1, [r6, #44]	@ 0x2c
 801c612:	6b32      	ldr	r2, [r6, #48]	@ 0x30
 801c614:	6bb0      	ldr	r0, [r6, #56]	@ 0x38
 801c616:	f8c5 0016 	str.w	r0, [r5, #22]
 801c61a:	fb0a 7718 	mls	r7, sl, r8, r7
 801c61e:	44bb      	add	fp, r7
 801c620:	fa4f f98b 	sxtb.w	r9, fp
 801c624:	f1b9 0f00 	cmp.w	r9, #0
 801c628:	f8c5 3012 	str.w	r3, [r5, #18]
 801c62c:	f8c5 100a 	str.w	r1, [r5, #10]
 801c630:	f8c5 200e 	str.w	r2, [r5, #14]
 801c634:	f105 030a 	add.w	r3, r5, #10
 801c638:	dc6c      	bgt.n	801c714 <Argus_Dca_Apply+0x2f4>
 801c63a:	d00e      	beq.n	801c65a <Argus_Dca_Apply+0x23a>
 801c63c:	f109 0087 	add.w	r0, r9, #135	@ 0x87
 801c640:	10c2      	asrs	r2, r0, #3
 801c642:	f1c2 0210 	rsb	r2, r2, #16
 801c646:	eb03 00e0 	add.w	r0, r3, r0, asr #3
 801c64a:	21ff      	movs	r1, #255	@ 0xff
 801c64c:	9301      	str	r3, [sp, #4]
 801c64e:	f00d f880 	bl	8029752 <memset>
 801c652:	f01b 0f07 	tst.w	fp, #7
 801c656:	f040 8108 	bne.w	801c86a <Argus_Dca_Apply+0x44a>
 801c65a:	f996 2009 	ldrsb.w	r2, [r6, #9]
 801c65e:	7af3      	ldrb	r3, [r6, #11]
 801c660:	eb07 0902 	add.w	r9, r7, r2
 801c664:	b11b      	cbz	r3, 801c66e <Argus_Dca_Apply+0x24e>
 801c666:	f1ba 0f01 	cmp.w	sl, #1
 801c66a:	f000 8130 	beq.w	801c8ce <Argus_Dca_Apply+0x4ae>
 801c66e:	f8d6 2041 	ldr.w	r2, [r6, #65]	@ 0x41
 801c672:	f8d6 103d 	ldr.w	r1, [r6, #61]	@ 0x3d
 801c676:	f8d6 3045 	ldr.w	r3, [r6, #69]	@ 0x45
 801c67a:	f8d6 0049 	ldr.w	r0, [r6, #73]	@ 0x49
 801c67e:	f8c5 201f 	str.w	r2, [r5, #31]
 801c682:	fa4f f289 	sxtb.w	r2, r9
 801c686:	2a00      	cmp	r2, #0
 801c688:	f105 081b 	add.w	r8, r5, #27
 801c68c:	f8c5 0027 	str.w	r0, [r5, #39]	@ 0x27
 801c690:	f8c5 101b 	str.w	r1, [r5, #27]
 801c694:	f8c5 3023 	str.w	r3, [r5, #35]	@ 0x23
 801c698:	dc50      	bgt.n	801c73c <Argus_Dca_Apply+0x31c>
 801c69a:	f43f af16 	beq.w	801c4ca <Argus_Dca_Apply+0xaa>
 801c69e:	f102 0a87 	add.w	sl, r2, #135	@ 0x87
 801c6a2:	ea4f 0aea 	mov.w	sl, sl, asr #3
 801c6a6:	f102 0780 	add.w	r7, r2, #128	@ 0x80
 801c6aa:	21ff      	movs	r1, #255	@ 0xff
 801c6ac:	f1ca 0210 	rsb	r2, sl, #16
 801c6b0:	eb08 000a 	add.w	r0, r8, sl
 801c6b4:	9201      	str	r2, [sp, #4]
 801c6b6:	f00d f84c 	bl	8029752 <memset>
 801c6ba:	f019 0f07 	tst.w	r9, #7
 801c6be:	9a01      	ldr	r2, [sp, #4]
 801c6c0:	f000 80bc 	beq.w	801c83c <Argus_Dca_Apply+0x41c>
 801c6c4:	ea4f 09e7 	mov.w	r9, r7, asr #3
 801c6c8:	21ff      	movs	r1, #255	@ 0xff
 801c6ca:	f818 3009 	ldrb.w	r3, [r8, r9]
 801c6ce:	f007 0707 	and.w	r7, r7, #7
 801c6d2:	fa21 f707 	lsr.w	r7, r1, r7
 801c6d6:	433b      	orrs	r3, r7
 801c6d8:	f808 3009 	strb.w	r3, [r8, r9]
 801c6dc:	f8d6 0051 	ldr.w	r0, [r6, #81]	@ 0x51
 801c6e0:	f8d6 3055 	ldr.w	r3, [r6, #85]	@ 0x55
 801c6e4:	f8d6 c04d 	ldr.w	ip, [r6, #77]	@ 0x4d
 801c6e8:	f8d6 6059 	ldr.w	r6, [r6, #89]	@ 0x59
 801c6ec:	f8c5 6037 	str.w	r6, [r5, #55]	@ 0x37
 801c6f0:	f105 062b 	add.w	r6, r5, #43	@ 0x2b
 801c6f4:	f8c5 002f 	str.w	r0, [r5, #47]	@ 0x2f
 801c6f8:	f8c5 3033 	str.w	r3, [r5, #51]	@ 0x33
 801c6fc:	f8c5 c02b 	str.w	ip, [r5, #43]	@ 0x2b
 801c700:	eb06 000a 	add.w	r0, r6, sl
 801c704:	f00d f825 	bl	8029752 <memset>
 801c708:	f816 3009 	ldrb.w	r3, [r6, r9]
 801c70c:	431f      	orrs	r7, r3
 801c70e:	f806 7009 	strb.w	r7, [r6, r9]
 801c712:	e6ea      	b.n	801c4ea <Argus_Dca_Apply+0xca>
 801c714:	ea4f 09e9 	mov.w	r9, r9, asr #3
 801c718:	464a      	mov	r2, r9
 801c71a:	21ff      	movs	r1, #255	@ 0xff
 801c71c:	4618      	mov	r0, r3
 801c71e:	f00d f818 	bl	8029752 <memset>
 801c722:	f01b 0b07 	ands.w	fp, fp, #7
 801c726:	d098      	beq.n	801c65a <Argus_Dca_Apply+0x23a>
 801c728:	f810 2009 	ldrb.w	r2, [r0, r9]
 801c72c:	21ff      	movs	r1, #255	@ 0xff
 801c72e:	fa21 fb0b 	lsr.w	fp, r1, fp
 801c732:	ea62 020b 	orn	r2, r2, fp
 801c736:	f800 2009 	strb.w	r2, [r0, r9]
 801c73a:	e78e      	b.n	801c65a <Argus_Dca_Apply+0x23a>
 801c73c:	10d7      	asrs	r7, r2, #3
 801c73e:	463a      	mov	r2, r7
 801c740:	21ff      	movs	r1, #255	@ 0xff
 801c742:	4640      	mov	r0, r8
 801c744:	f00d f805 	bl	8029752 <memset>
 801c748:	f019 0907 	ands.w	r9, r9, #7
 801c74c:	d05f      	beq.n	801c80e <Argus_Dca_Apply+0x3ee>
 801c74e:	f818 3007 	ldrb.w	r3, [r8, r7]
 801c752:	21ff      	movs	r1, #255	@ 0xff
 801c754:	fa21 f909 	lsr.w	r9, r1, r9
 801c758:	ea63 0309 	orn	r3, r3, r9
 801c75c:	f808 3007 	strb.w	r3, [r8, r7]
 801c760:	f8d6 3055 	ldr.w	r3, [r6, #85]	@ 0x55
 801c764:	f8d6 004d 	ldr.w	r0, [r6, #77]	@ 0x4d
 801c768:	f8d6 2051 	ldr.w	r2, [r6, #81]	@ 0x51
 801c76c:	f8d6 6059 	ldr.w	r6, [r6, #89]	@ 0x59
 801c770:	f8c5 3033 	str.w	r3, [r5, #51]	@ 0x33
 801c774:	f105 032b 	add.w	r3, r5, #43	@ 0x2b
 801c778:	f8c5 002b 	str.w	r0, [r5, #43]	@ 0x2b
 801c77c:	f8c5 202f 	str.w	r2, [r5, #47]	@ 0x2f
 801c780:	f8c5 6037 	str.w	r6, [r5, #55]	@ 0x37
 801c784:	463a      	mov	r2, r7
 801c786:	4618      	mov	r0, r3
 801c788:	f00c ffe3 	bl	8029752 <memset>
 801c78c:	5dc2      	ldrb	r2, [r0, r7]
 801c78e:	ea6f 0909 	mvn.w	r9, r9
 801c792:	ea49 0902 	orr.w	r9, r9, r2
 801c796:	f800 9007 	strb.w	r9, [r0, r7]
 801c79a:	e6a6      	b.n	801c4ea <Argus_Dca_Apply+0xca>
 801c79c:	f04f 33ff 	mov.w	r3, #4294967295
 801c7a0:	2101      	movs	r1, #1
 801c7a2:	e66a      	b.n	801c47a <Argus_Dca_Apply+0x5a>
 801c7a4:	4293      	cmp	r3, r2
 801c7a6:	f43f aea9 	beq.w	801c4fc <Argus_Dca_Apply+0xdc>
 801c7aa:	6e26      	ldr	r6, [r4, #96]	@ 0x60
 801c7ac:	e67a      	b.n	801c4a4 <Argus_Dca_Apply+0x84>
 801c7ae:	2801      	cmp	r0, #1
 801c7b0:	f43f ae74 	beq.w	801c49c <Argus_Dca_Apply+0x7c>
 801c7b4:	2380      	movs	r3, #128	@ 0x80
 801c7b6:	2101      	movs	r1, #1
 801c7b8:	e65f      	b.n	801c47a <Argus_Dca_Apply+0x5a>
 801c7ba:	f8d6 202f 	ldr.w	r2, [r6, #47]	@ 0x2f
 801c7be:	f8d6 3033 	ldr.w	r3, [r6, #51]	@ 0x33
 801c7c2:	f8d6 102b 	ldr.w	r1, [r6, #43]	@ 0x2b
 801c7c6:	f8d6 0037 	ldr.w	r0, [r6, #55]	@ 0x37
 801c7ca:	f8c5 0015 	str.w	r0, [r5, #21]
 801c7ce:	f8c5 200d 	str.w	r2, [r5, #13]
 801c7d2:	f8c5 1009 	str.w	r1, [r5, #9]
 801c7d6:	f8c5 3011 	str.w	r3, [r5, #17]
 801c7da:	f896 303b 	ldrb.w	r3, [r6, #59]	@ 0x3b
 801c7de:	766b      	strb	r3, [r5, #25]
 801c7e0:	f105 021a 	add.w	r2, r5, #26
 801c7e4:	f106 033c 	add.w	r3, r6, #60	@ 0x3c
 801c7e8:	365c      	adds	r6, #92	@ 0x5c
 801c7ea:	681f      	ldr	r7, [r3, #0]
 801c7ec:	6858      	ldr	r0, [r3, #4]
 801c7ee:	6899      	ldr	r1, [r3, #8]
 801c7f0:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 801c7f4:	f8c2 c00c 	str.w	ip, [r2, #12]
 801c7f8:	3310      	adds	r3, #16
 801c7fa:	42b3      	cmp	r3, r6
 801c7fc:	6017      	str	r7, [r2, #0]
 801c7fe:	6050      	str	r0, [r2, #4]
 801c800:	6091      	str	r1, [r2, #8]
 801c802:	f102 0210 	add.w	r2, r2, #16
 801c806:	d1f0      	bne.n	801c7ea <Argus_Dca_Apply+0x3ca>
 801c808:	781b      	ldrb	r3, [r3, #0]
 801c80a:	7013      	strb	r3, [r2, #0]
 801c80c:	e66d      	b.n	801c4ea <Argus_Dca_Apply+0xca>
 801c80e:	f8d6 004d 	ldr.w	r0, [r6, #77]	@ 0x4d
 801c812:	f8d6 1051 	ldr.w	r1, [r6, #81]	@ 0x51
 801c816:	f8d6 3055 	ldr.w	r3, [r6, #85]	@ 0x55
 801c81a:	f8d6 6059 	ldr.w	r6, [r6, #89]	@ 0x59
 801c81e:	f8c5 6037 	str.w	r6, [r5, #55]	@ 0x37
 801c822:	f8c5 002b 	str.w	r0, [r5, #43]	@ 0x2b
 801c826:	f8c5 102f 	str.w	r1, [r5, #47]	@ 0x2f
 801c82a:	463a      	mov	r2, r7
 801c82c:	f8c5 3033 	str.w	r3, [r5, #51]	@ 0x33
 801c830:	21ff      	movs	r1, #255	@ 0xff
 801c832:	f105 002b 	add.w	r0, r5, #43	@ 0x2b
 801c836:	f00c ff8c 	bl	8029752 <memset>
 801c83a:	e656      	b.n	801c4ea <Argus_Dca_Apply+0xca>
 801c83c:	f8d6 004d 	ldr.w	r0, [r6, #77]	@ 0x4d
 801c840:	f8d6 1051 	ldr.w	r1, [r6, #81]	@ 0x51
 801c844:	f8d6 3055 	ldr.w	r3, [r6, #85]	@ 0x55
 801c848:	f8d6 6059 	ldr.w	r6, [r6, #89]	@ 0x59
 801c84c:	f8c5 002b 	str.w	r0, [r5, #43]	@ 0x2b
 801c850:	f105 002b 	add.w	r0, r5, #43	@ 0x2b
 801c854:	f8c5 102f 	str.w	r1, [r5, #47]	@ 0x2f
 801c858:	f8c5 6037 	str.w	r6, [r5, #55]	@ 0x37
 801c85c:	f8c5 3033 	str.w	r3, [r5, #51]	@ 0x33
 801c860:	21ff      	movs	r1, #255	@ 0xff
 801c862:	4450      	add	r0, sl
 801c864:	f00c ff75 	bl	8029752 <memset>
 801c868:	e63f      	b.n	801c4ea <Argus_Dca_Apply+0xca>
 801c86a:	f109 0980 	add.w	r9, r9, #128	@ 0x80
 801c86e:	ea4f 01e9 	mov.w	r1, r9, asr #3
 801c872:	9b01      	ldr	r3, [sp, #4]
 801c874:	f009 0907 	and.w	r9, r9, #7
 801c878:	5c58      	ldrb	r0, [r3, r1]
 801c87a:	22ff      	movs	r2, #255	@ 0xff
 801c87c:	fa22 f909 	lsr.w	r9, r2, r9
 801c880:	ea49 0900 	orr.w	r9, r9, r0
 801c884:	f803 9001 	strb.w	r9, [r3, r1]
 801c888:	e6e7      	b.n	801c65a <Argus_Dca_Apply+0x23a>
 801c88a:	0840      	lsrs	r0, r0, #1
 801c88c:	00c3      	lsls	r3, r0, #3
 801c88e:	0040      	lsls	r0, r0, #1
 801c890:	b25a      	sxtb	r2, r3
 801c892:	f000 033e 	and.w	r3, r0, #62	@ 0x3e
 801c896:	e648      	b.n	801c52a <Argus_Dca_Apply+0x10a>
 801c898:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801c89c:	2000      	movs	r0, #0
 801c89e:	eba3 0c01 	sub.w	ip, r3, r1
 801c8a2:	b14b      	cbz	r3, 801c8b8 <Argus_Dca_Apply+0x498>
 801c8a4:	4299      	cmp	r1, r3
 801c8a6:	d80d      	bhi.n	801c8c4 <Argus_Dca_Apply+0x4a4>
 801c8a8:	4310      	orrs	r0, r2
 801c8aa:	0852      	lsrs	r2, r2, #1
 801c8ac:	ea4f 034c 	mov.w	r3, ip, lsl #1
 801c8b0:	d1f5      	bne.n	801c89e <Argus_Dca_Apply+0x47e>
 801c8b2:	428b      	cmp	r3, r1
 801c8b4:	d300      	bcc.n	801c8b8 <Argus_Dca_Apply+0x498>
 801c8b6:	3001      	adds	r0, #1
 801c8b8:	2800      	cmp	r0, #0
 801c8ba:	bfac      	ite	ge
 801c8bc:	4682      	movge	sl, r0
 801c8be:	f06f 4a00 	mvnlt.w	sl, #2147483648	@ 0x80000000
 801c8c2:	e6a2      	b.n	801c60a <Argus_Dca_Apply+0x1ea>
 801c8c4:	0852      	lsrs	r2, r2, #1
 801c8c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801c8ca:	d1e8      	bne.n	801c89e <Argus_Dca_Apply+0x47e>
 801c8cc:	e7f1      	b.n	801c8b2 <Argus_Dca_Apply+0x492>
 801c8ce:	7a33      	ldrb	r3, [r6, #8]
 801c8d0:	1a9a      	subs	r2, r3, r2
 801c8d2:	4590      	cmp	r8, r2
 801c8d4:	443b      	add	r3, r7
 801c8d6:	f73f aeca 	bgt.w	801c66e <Argus_Dca_Apply+0x24e>
 801c8da:	eb08 0209 	add.w	r2, r8, r9
 801c8de:	1a9b      	subs	r3, r3, r2
 801c8e0:	e000      	b.n	801c8e4 <Argus_Dca_Apply+0x4c4>
 801c8e2:	4442      	add	r2, r8
 801c8e4:	ebb3 0308 	subs.w	r3, r3, r8
 801c8e8:	4691      	mov	r9, r2
 801c8ea:	dafa      	bge.n	801c8e2 <Argus_Dca_Apply+0x4c2>
 801c8ec:	e6bf      	b.n	801c66e <Argus_Dca_Apply+0x24e>
 801c8ee:	bf00      	nop

0801c8f0 <Argus_Dca_RecoverLaserFailure>:
 801c8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c8f2:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 801c8f4:	8b5c      	ldrh	r4, [r3, #26]
 801c8f6:	b083      	sub	sp, #12
 801c8f8:	b914      	cbnz	r4, 801c900 <Argus_Dca_RecoverLaserFailure+0x10>
 801c8fa:	2000      	movs	r0, #0
 801c8fc:	b003      	add	sp, #12
 801c8fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c900:	4605      	mov	r5, r0
 801c902:	a901      	add	r1, sp, #4
 801c904:	4668      	mov	r0, sp
 801c906:	f7ea f9d3 	bl	8006cb0 <Timer_GetCounterValue>
 801c90a:	4b2a      	ldr	r3, [pc, #168]	@ (801c9b4 <Argus_Dca_RecoverLaserFailure+0xc4>)
 801c90c:	6928      	ldr	r0, [r5, #16]
 801c90e:	9e00      	ldr	r6, [sp, #0]
 801c910:	fba3 2304 	umull	r2, r3, r3, r4
 801c914:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801c918:	099f      	lsrs	r7, r3, #6
 801c91a:	696a      	ldr	r2, [r5, #20]
 801c91c:	fb01 4417 	mls	r4, r1, r7, r4
 801c920:	fb01 2404 	mla	r4, r1, r4, r2
 801c924:	4924      	ldr	r1, [pc, #144]	@ (801c9b8 <Argus_Dca_RecoverLaserFailure+0xc8>)
 801c926:	9f01      	ldr	r7, [sp, #4]
 801c928:	428c      	cmp	r4, r1
 801c92a:	eb00 1393 	add.w	r3, r0, r3, lsr #6
 801c92e:	d813      	bhi.n	801c958 <Argus_Dca_RecoverLaserFailure+0x68>
 801c930:	4298      	cmp	r0, r3
 801c932:	d018      	beq.n	801c966 <Argus_Dca_RecoverLaserFailure+0x76>
 801c934:	bf34      	ite	cc
 801c936:	2101      	movcc	r1, #1
 801c938:	2100      	movcs	r1, #0
 801c93a:	b1f1      	cbz	r1, 801c97a <Argus_Dca_RecoverLaserFailure+0x8a>
 801c93c:	42b0      	cmp	r0, r6
 801c93e:	d017      	beq.n	801c970 <Argus_Dca_RecoverLaserFailure+0x80>
 801c940:	bf34      	ite	cc
 801c942:	2201      	movcc	r2, #1
 801c944:	2200      	movcs	r2, #0
 801c946:	b9fa      	cbnz	r2, 801c988 <Argus_Dca_RecoverLaserFailure+0x98>
 801c948:	f105 0010 	add.w	r0, r5, #16
 801c94c:	f105 0114 	add.w	r1, r5, #20
 801c950:	f7ea f9ae 	bl	8006cb0 <Timer_GetCounterValue>
 801c954:	2001      	movs	r0, #1
 801c956:	e7d1      	b.n	801c8fc <Argus_Dca_RecoverLaserFailure+0xc>
 801c958:	3301      	adds	r3, #1
 801c95a:	f5a4 2474 	sub.w	r4, r4, #999424	@ 0xf4000
 801c95e:	4298      	cmp	r0, r3
 801c960:	f5a4 7410 	sub.w	r4, r4, #576	@ 0x240
 801c964:	d1e6      	bne.n	801c934 <Argus_Dca_RecoverLaserFailure+0x44>
 801c966:	42a2      	cmp	r2, r4
 801c968:	bf8c      	ite	hi
 801c96a:	2100      	movhi	r1, #0
 801c96c:	2101      	movls	r1, #1
 801c96e:	e7e4      	b.n	801c93a <Argus_Dca_RecoverLaserFailure+0x4a>
 801c970:	42ba      	cmp	r2, r7
 801c972:	bf8c      	ite	hi
 801c974:	2200      	movhi	r2, #0
 801c976:	2201      	movls	r2, #1
 801c978:	e7e5      	b.n	801c946 <Argus_Dca_RecoverLaserFailure+0x56>
 801c97a:	42b0      	cmp	r0, r6
 801c97c:	d00c      	beq.n	801c998 <Argus_Dca_RecoverLaserFailure+0xa8>
 801c97e:	d3bc      	bcc.n	801c8fa <Argus_Dca_RecoverLaserFailure+0xa>
 801c980:	42b3      	cmp	r3, r6
 801c982:	d00c      	beq.n	801c99e <Argus_Dca_RecoverLaserFailure+0xae>
 801c984:	d2b9      	bcs.n	801c8fa <Argus_Dca_RecoverLaserFailure+0xa>
 801c986:	e7df      	b.n	801c948 <Argus_Dca_RecoverLaserFailure+0x58>
 801c988:	42b3      	cmp	r3, r6
 801c98a:	d00b      	beq.n	801c9a4 <Argus_Dca_RecoverLaserFailure+0xb4>
 801c98c:	bf34      	ite	cc
 801c98e:	2401      	movcc	r4, #1
 801c990:	2400      	movcs	r4, #0
 801c992:	2c00      	cmp	r4, #0
 801c994:	d0b1      	beq.n	801c8fa <Argus_Dca_RecoverLaserFailure+0xa>
 801c996:	e7d7      	b.n	801c948 <Argus_Dca_RecoverLaserFailure+0x58>
 801c998:	42ba      	cmp	r2, r7
 801c99a:	d9ae      	bls.n	801c8fa <Argus_Dca_RecoverLaserFailure+0xa>
 801c99c:	e7f0      	b.n	801c980 <Argus_Dca_RecoverLaserFailure+0x90>
 801c99e:	42a7      	cmp	r7, r4
 801c9a0:	d2d2      	bcs.n	801c948 <Argus_Dca_RecoverLaserFailure+0x58>
 801c9a2:	e7aa      	b.n	801c8fa <Argus_Dca_RecoverLaserFailure+0xa>
 801c9a4:	42a7      	cmp	r7, r4
 801c9a6:	bf34      	ite	cc
 801c9a8:	2400      	movcc	r4, #0
 801c9aa:	2401      	movcs	r4, #1
 801c9ac:	2c00      	cmp	r4, #0
 801c9ae:	d0a4      	beq.n	801c8fa <Argus_Dca_RecoverLaserFailure+0xa>
 801c9b0:	e7ca      	b.n	801c948 <Argus_Dca_RecoverLaserFailure+0x58>
 801c9b2:	bf00      	nop
 801c9b4:	10624dd3 	.word	0x10624dd3
 801c9b8:	000f423f 	.word	0x000f423f

0801c9bc <Argus_Dca_UpdateTimings>:
 801c9bc:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 801c9be:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 801c9c0:	681b      	ldr	r3, [r3, #0]
 801c9c2:	1a59      	subs	r1, r3, r1
 801c9c4:	428a      	cmp	r2, r1
 801c9c6:	da0e      	bge.n	801c9e6 <Argus_Dca_UpdateTimings+0x2a>
 801c9c8:	1a89      	subs	r1, r1, r2
 801c9ca:	17cb      	asrs	r3, r1, #31
 801c9cc:	019b      	lsls	r3, r3, #6
 801c9ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801c9d2:	f3c1 0c40 	ubfx	ip, r1, #1, #1
 801c9d6:	f3c1 0197 	ubfx	r1, r1, #2, #24
 801c9da:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
 801c9de:	4411      	add	r1, r2
 801c9e0:	4461      	add	r1, ip
 801c9e2:	6301      	str	r1, [r0, #48]	@ 0x30
 801c9e4:	4770      	bx	lr
 801c9e6:	1a51      	subs	r1, r2, r1
 801c9e8:	17cb      	asrs	r3, r1, #31
 801c9ea:	019b      	lsls	r3, r3, #6
 801c9ec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801c9f0:	f3c1 0c97 	ubfx	ip, r1, #2, #24
 801c9f4:	ea4c 6c03 	orr.w	ip, ip, r3, lsl #24
 801c9f8:	eba2 020c 	sub.w	r2, r2, ip
 801c9fc:	f3c1 0140 	ubfx	r1, r1, #1, #1
 801ca00:	1a51      	subs	r1, r2, r1
 801ca02:	6301      	str	r1, [r0, #48]	@ 0x30
 801ca04:	4770      	bx	lr
 801ca06:	bf00      	nop

0801ca08 <Argus_Dca_Evaluate>:
 801ca08:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 801ca0a:	f993 3000 	ldrsb.w	r3, [r3]
 801ca0e:	b903      	cbnz	r3, 801ca12 <Argus_Dca_Evaluate+0xa>
 801ca10:	4770      	bx	lr
 801ca12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca16:	4604      	mov	r4, r0
 801ca18:	b08f      	sub	sp, #60	@ 0x3c
 801ca1a:	460d      	mov	r5, r1
 801ca1c:	f7e9 fd64 	bl	80064e8 <IRQ_LOCK>
 801ca20:	e894 0003 	ldmia.w	r4, {r0, r1}
 801ca24:	ab0a      	add	r3, sp, #40	@ 0x28
 801ca26:	e883 0003 	stmia.w	r3, {r0, r1}
 801ca2a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801ca2e:	9303      	str	r3, [sp, #12]
 801ca30:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801ca34:	9306      	str	r3, [sp, #24]
 801ca36:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 801ca3a:	9305      	str	r3, [sp, #20]
 801ca3c:	f99d 302e 	ldrsb.w	r3, [sp, #46]	@ 0x2e
 801ca40:	9304      	str	r3, [sp, #16]
 801ca42:	8923      	ldrh	r3, [r4, #8]
 801ca44:	9300      	str	r3, [sp, #0]
 801ca46:	7b23      	ldrb	r3, [r4, #12]
 801ca48:	9301      	str	r3, [sp, #4]
 801ca4a:	7be3      	ldrb	r3, [r4, #15]
 801ca4c:	9302      	str	r3, [sp, #8]
 801ca4e:	f89d 802d 	ldrb.w	r8, [sp, #45]	@ 0x2d
 801ca52:	8967      	ldrh	r7, [r4, #10]
 801ca54:	f894 b00d 	ldrb.w	fp, [r4, #13]
 801ca58:	f994 600e 	ldrsb.w	r6, [r4, #14]
 801ca5c:	f7e9 fd22 	bl	80064a4 <IRQ_UNLOCK>
 801ca60:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 801ca62:	f990 3000 	ldrsb.w	r3, [r0]
 801ca66:	2b00      	cmp	r3, #0
 801ca68:	dd7e      	ble.n	801cb68 <Argus_Dca_Evaluate+0x160>
 801ca6a:	f895 31b0 	ldrb.w	r3, [r5, #432]	@ 0x1b0
 801ca6e:	9307      	str	r3, [sp, #28]
 801ca70:	07db      	lsls	r3, r3, #31
 801ca72:	f140 80d0 	bpl.w	801cc16 <Argus_Dca_Evaluate+0x20e>
 801ca76:	f8b5 c01c 	ldrh.w	ip, [r5, #28]
 801ca7a:	69aa      	ldr	r2, [r5, #24]
 801ca7c:	f8d4 e060 	ldr.w	lr, [r4, #96]	@ 0x60
 801ca80:	f1bc 0f40 	cmp.w	ip, #64	@ 0x40
 801ca84:	bf38      	it	cc
 801ca86:	f04f 0c40 	movcc.w	ip, #64	@ 0x40
 801ca8a:	f402 5900 	and.w	r9, r2, #8192	@ 0x2000
 801ca8e:	2300      	movs	r3, #0
 801ca90:	f8be 1014 	ldrh.w	r1, [lr, #20]
 801ca94:	fb0c fc01 	mul.w	ip, ip, r1
 801ca98:	ea4f 2cac 	mov.w	ip, ip, asr #10
 801ca9c:	f1b9 0f00 	cmp.w	r9, #0
 801caa0:	d107      	bne.n	801cab2 <Argus_Dca_Evaluate+0xaa>
 801caa2:	fa1f fc8c 	uxth.w	ip, ip
 801caa6:	ea4f 018c 	mov.w	r1, ip, lsl #2
 801caaa:	f894 c03e 	ldrb.w	ip, [r4, #62]	@ 0x3e
 801caae:	fbb1 fcfc 	udiv	ip, r1, ip
 801cab2:	fa1f fc8c 	uxth.w	ip, ip
 801cab6:	f105 0128 	add.w	r1, r5, #40	@ 0x28
 801caba:	f505 7ad4 	add.w	sl, r5, #424	@ 0x1a8
 801cabe:	e007      	b.n	801cad0 <Argus_Dca_Evaluate+0xc8>
 801cac0:	f010 0f02 	tst.w	r0, #2
 801cac4:	bf18      	it	ne
 801cac6:	2301      	movne	r3, #1
 801cac8:	310c      	adds	r1, #12
 801caca:	4551      	cmp	r1, sl
 801cacc:	f000 80c6 	beq.w	801cc5c <Argus_Dca_Evaluate+0x254>
 801cad0:	7a08      	ldrb	r0, [r1, #8]
 801cad2:	f010 0f01 	tst.w	r0, #1
 801cad6:	d1f7      	bne.n	801cac8 <Argus_Dca_Evaluate+0xc0>
 801cad8:	f8b1 9006 	ldrh.w	r9, [r1, #6]
 801cadc:	45e1      	cmp	r9, ip
 801cade:	d9ef      	bls.n	801cac0 <Argus_Dca_Evaluate+0xb8>
 801cae0:	6963      	ldr	r3, [r4, #20]
 801cae2:	2b00      	cmp	r3, #0
 801cae4:	f000 8198 	beq.w	801ce18 <Argus_Dca_Evaluate+0x410>
 801cae8:	a90d      	add	r1, sp, #52	@ 0x34
 801caea:	a80c      	add	r0, sp, #48	@ 0x30
 801caec:	f8be 9018 	ldrh.w	r9, [lr, #24]
 801caf0:	f7ea f8de 	bl	8006cb0 <Timer_GetCounterValue>
 801caf4:	4b85      	ldr	r3, [pc, #532]	@ (801cd0c <Argus_Dca_Evaluate+0x304>)
 801caf6:	4986      	ldr	r1, [pc, #536]	@ (801cd10 <Argus_Dca_Evaluate+0x308>)
 801caf8:	f8d4 e010 	ldr.w	lr, [r4, #16]
 801cafc:	fba3 3c09 	umull	r3, ip, r3, r9
 801cb00:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801cb04:	ea4f 109c 	mov.w	r0, ip, lsr #6
 801cb08:	6963      	ldr	r3, [r4, #20]
 801cb0a:	fb02 9010 	mls	r0, r2, r0, r9
 801cb0e:	fb02 3000 	mla	r0, r2, r0, r3
 801cb12:	4288      	cmp	r0, r1
 801cb14:	e9dd 920c 	ldrd	r9, r2, [sp, #48]	@ 0x30
 801cb18:	eb0e 1c9c 	add.w	ip, lr, ip, lsr #6
 801cb1c:	d905      	bls.n	801cb2a <Argus_Dca_Evaluate+0x122>
 801cb1e:	f5a0 2074 	sub.w	r0, r0, #999424	@ 0xf4000
 801cb22:	f10c 0c01 	add.w	ip, ip, #1
 801cb26:	f5a0 7010 	sub.w	r0, r0, #576	@ 0x240
 801cb2a:	45e6      	cmp	lr, ip
 801cb2c:	f000 8179 	beq.w	801ce22 <Argus_Dca_Evaluate+0x41a>
 801cb30:	bf34      	ite	cc
 801cb32:	2101      	movcc	r1, #1
 801cb34:	2100      	movcs	r1, #0
 801cb36:	2900      	cmp	r1, #0
 801cb38:	f000 81b0 	beq.w	801ce9c <Argus_Dca_Evaluate+0x494>
 801cb3c:	45ce      	cmp	lr, r9
 801cb3e:	f000 820e 	beq.w	801cf5e <Argus_Dca_Evaluate+0x556>
 801cb42:	bf34      	ite	cc
 801cb44:	2301      	movcc	r3, #1
 801cb46:	2300      	movcs	r3, #0
 801cb48:	b153      	cbz	r3, 801cb60 <Argus_Dca_Evaluate+0x158>
 801cb4a:	45cc      	cmp	ip, r9
 801cb4c:	f000 820c 	beq.w	801cf68 <Argus_Dca_Evaluate+0x560>
 801cb50:	bf34      	ite	cc
 801cb52:	2201      	movcc	r2, #1
 801cb54:	2200      	movcs	r2, #0
 801cb56:	f082 0201 	eor.w	r2, r2, #1
 801cb5a:	2a00      	cmp	r2, #0
 801cb5c:	f040 80c0 	bne.w	801cce0 <Argus_Dca_Evaluate+0x2d8>
 801cb60:	69aa      	ldr	r2, [r5, #24]
 801cb62:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 801cb66:	e000      	b.n	801cb6a <Argus_Dca_Evaluate+0x162>
 801cb68:	69aa      	ldr	r2, [r5, #24]
 801cb6a:	f8b5 31c4 	ldrh.w	r3, [r5, #452]	@ 0x1c4
 801cb6e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801cb72:	428b      	cmp	r3, r1
 801cb74:	d005      	beq.n	801cb82 <Argus_Dca_Evaluate+0x17a>
 801cb76:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 801cb78:	f8b1 00c2 	ldrh.w	r0, [r1, #194]	@ 0xc2
 801cb7c:	4298      	cmp	r0, r3
 801cb7e:	f0c0 816b 	bcc.w	801ce58 <Argus_Dca_Evaluate+0x450>
 801cb82:	0593      	lsls	r3, r2, #22
 801cb84:	61aa      	str	r2, [r5, #24]
 801cb86:	f100 80af 	bmi.w	801cce8 <Argus_Dca_Evaluate+0x2e0>
 801cb8a:	f012 0240 	ands.w	r2, r2, #64	@ 0x40
 801cb8e:	f040 8214 	bne.w	801cfba <Argus_Dca_Evaluate+0x5b2>
 801cb92:	682b      	ldr	r3, [r5, #0]
 801cb94:	1d99      	adds	r1, r3, #6
 801cb96:	d02a      	beq.n	801cbee <Argus_Dca_Evaluate+0x1e6>
 801cb98:	3372      	adds	r3, #114	@ 0x72
 801cb9a:	f000 8174 	beq.w	801ce86 <Argus_Dca_Evaluate+0x47e>
 801cb9e:	f8b5 31c0 	ldrh.w	r3, [r5, #448]	@ 0x1c0
 801cba2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801cba6:	4293      	cmp	r3, r2
 801cba8:	f000 8169 	beq.w	801ce7e <Argus_Dca_Evaluate+0x476>
 801cbac:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
 801cbae:	9804      	ldr	r0, [sp, #16]
 801cbb0:	eb04 0148 	add.w	r1, r4, r8, lsl #1
 801cbb4:	fb00 f002 	mul.w	r0, r0, r2
 801cbb8:	f8b1 2044 	ldrh.w	r2, [r1, #68]	@ 0x44
 801cbbc:	1ad2      	subs	r2, r2, r3
 801cbbe:	fa00 f282 	sxtah	r2, r0, r2
 801cbc2:	2a00      	cmp	r2, #0
 801cbc4:	f340 811e 	ble.w	801ce04 <Argus_Dca_Evaluate+0x3fc>
 801cbc8:	f8b1 e04c 	ldrh.w	lr, [r1, #76]	@ 0x4c
 801cbcc:	b292      	uxth	r2, r2
 801cbce:	fb0e f202 	mul.w	r2, lr, r2
 801cbd2:	f3c2 3ec0 	ubfx	lr, r2, #15, #1
 801cbd6:	eb0e 4212 	add.w	r2, lr, r2, lsr #16
 801cbda:	fa1f fe82 	uxth.w	lr, r2
 801cbde:	f8a5 e1c6 	strh.w	lr, [r5, #454]	@ 0x1c6
 801cbe2:	f8b5 c01c 	ldrh.w	ip, [r5, #28]
 801cbe6:	9a03      	ldr	r2, [sp, #12]
 801cbe8:	4594      	cmp	ip, r2
 801cbea:	f000 8097 	beq.w	801cd1c <Argus_Dca_Evaluate+0x314>
 801cbee:	f7e9 fc7b 	bl	80064e8 <IRQ_LOCK>
 801cbf2:	8863      	ldrh	r3, [r4, #2]
 801cbf4:	b29b      	uxth	r3, r3
 801cbf6:	b14b      	cbz	r3, 801cc0c <Argus_Dca_Evaluate+0x204>
 801cbf8:	9b00      	ldr	r3, [sp, #0]
 801cbfa:	8123      	strh	r3, [r4, #8]
 801cbfc:	9b01      	ldr	r3, [sp, #4]
 801cbfe:	7323      	strb	r3, [r4, #12]
 801cc00:	9b02      	ldr	r3, [sp, #8]
 801cc02:	8167      	strh	r7, [r4, #10]
 801cc04:	f884 b00d 	strb.w	fp, [r4, #13]
 801cc08:	73a6      	strb	r6, [r4, #14]
 801cc0a:	73e3      	strb	r3, [r4, #15]
 801cc0c:	b00f      	add	sp, #60	@ 0x3c
 801cc0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc12:	f7e9 bc47 	b.w	80064a4 <IRQ_UNLOCK>
 801cc16:	f8b5 a01c 	ldrh.w	sl, [r5, #28]
 801cc1a:	f8d4 e060 	ldr.w	lr, [r4, #96]	@ 0x60
 801cc1e:	69aa      	ldr	r2, [r5, #24]
 801cc20:	f8be 1016 	ldrh.w	r1, [lr, #22]
 801cc24:	f1ba 0f40 	cmp.w	sl, #64	@ 0x40
 801cc28:	46d4      	mov	ip, sl
 801cc2a:	bf38      	it	cc
 801cc2c:	f04f 0c40 	movcc.w	ip, #64	@ 0x40
 801cc30:	fb0c f101 	mul.w	r1, ip, r1
 801cc34:	f412 5900 	ands.w	r9, r2, #8192	@ 0x2000
 801cc38:	ea4f 21a1 	mov.w	r1, r1, asr #10
 801cc3c:	f000 80e5 	beq.w	801ce0a <Argus_Dca_Evaluate+0x402>
 801cc40:	f8b5 31ae 	ldrh.w	r3, [r5, #430]	@ 0x1ae
 801cc44:	b289      	uxth	r1, r1
 801cc46:	428b      	cmp	r3, r1
 801cc48:	f200 8177 	bhi.w	801cf3a <Argus_Dca_Evaluate+0x532>
 801cc4c:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 801cc4e:	4551      	cmp	r1, sl
 801cc50:	f000 812d 	beq.w	801ceae <Argus_Dca_Evaluate+0x4a6>
 801cc54:	9b07      	ldr	r3, [sp, #28]
 801cc56:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801cc5a:	e719      	b.n	801ca90 <Argus_Dca_Evaluate+0x88>
 801cc5c:	6961      	ldr	r1, [r4, #20]
 801cc5e:	b969      	cbnz	r1, 801cc7c <Argus_Dca_Evaluate+0x274>
 801cc60:	6921      	ldr	r1, [r4, #16]
 801cc62:	b959      	cbnz	r1, 801cc7c <Argus_Dca_Evaluate+0x274>
 801cc64:	2b00      	cmp	r3, #0
 801cc66:	d080      	beq.n	801cb6a <Argus_Dca_Evaluate+0x162>
 801cc68:	f104 0114 	add.w	r1, r4, #20
 801cc6c:	f104 0010 	add.w	r0, r4, #16
 801cc70:	f7ea f81e 	bl	8006cb0 <Timer_GetCounterValue>
 801cc74:	69aa      	ldr	r2, [r5, #24]
 801cc76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801cc7a:	e776      	b.n	801cb6a <Argus_Dca_Evaluate+0x162>
 801cc7c:	a90d      	add	r1, sp, #52	@ 0x34
 801cc7e:	a80c      	add	r0, sp, #48	@ 0x30
 801cc80:	f8be 9018 	ldrh.w	r9, [lr, #24]
 801cc84:	f7ea f814 	bl	8006cb0 <Timer_GetCounterValue>
 801cc88:	4920      	ldr	r1, [pc, #128]	@ (801cd0c <Argus_Dca_Evaluate+0x304>)
 801cc8a:	fba1 3109 	umull	r3, r1, r1, r9
 801cc8e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801cc92:	098a      	lsrs	r2, r1, #6
 801cc94:	6963      	ldr	r3, [r4, #20]
 801cc96:	fb00 9212 	mls	r2, r0, r2, r9
 801cc9a:	f8df 9074 	ldr.w	r9, [pc, #116]	@ 801cd10 <Argus_Dca_Evaluate+0x308>
 801cc9e:	fb00 3202 	mla	r2, r0, r2, r3
 801cca2:	6920      	ldr	r0, [r4, #16]
 801cca4:	454a      	cmp	r2, r9
 801cca6:	e9dd ce0c 	ldrd	ip, lr, [sp, #48]	@ 0x30
 801ccaa:	eb00 1191 	add.w	r1, r0, r1, lsr #6
 801ccae:	d904      	bls.n	801ccba <Argus_Dca_Evaluate+0x2b2>
 801ccb0:	f5a2 2274 	sub.w	r2, r2, #999424	@ 0xf4000
 801ccb4:	3101      	adds	r1, #1
 801ccb6:	f5a2 7210 	sub.w	r2, r2, #576	@ 0x240
 801ccba:	4288      	cmp	r0, r1
 801ccbc:	f000 80b6 	beq.w	801ce2c <Argus_Dca_Evaluate+0x424>
 801ccc0:	f080 80b7 	bcs.w	801ce32 <Argus_Dca_Evaluate+0x42a>
 801ccc4:	4560      	cmp	r0, ip
 801ccc6:	f000 8154 	beq.w	801cf72 <Argus_Dca_Evaluate+0x56a>
 801ccca:	bf34      	ite	cc
 801cccc:	2301      	movcc	r3, #1
 801ccce:	2300      	movcs	r3, #0
 801ccd0:	2b00      	cmp	r3, #0
 801ccd2:	f43f af45 	beq.w	801cb60 <Argus_Dca_Evaluate+0x158>
 801ccd6:	458c      	cmp	ip, r1
 801ccd8:	f000 815d 	beq.w	801cf96 <Argus_Dca_Evaluate+0x58e>
 801ccdc:	f63f af40 	bhi.w	801cb60 <Argus_Dca_Evaluate+0x158>
 801cce0:	69aa      	ldr	r2, [r5, #24]
 801cce2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801cce6:	e740      	b.n	801cb6a <Argus_Dca_Evaluate+0x162>
 801cce8:	f06f 0170 	mvn.w	r1, #112	@ 0x70
 801ccec:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801ccee:	6029      	str	r1, [r5, #0]
 801ccf0:	f002 fcfe 	bl	801f6f0 <Argus_Dev_SetError>
 801ccf4:	69ab      	ldr	r3, [r5, #24]
 801ccf6:	0658      	lsls	r0, r3, #25
 801ccf8:	bf4c      	ite	mi
 801ccfa:	4806      	ldrmi	r0, [pc, #24]	@ (801cd14 <Argus_Dca_Evaluate+0x30c>)
 801ccfc:	4806      	ldrpl	r0, [pc, #24]	@ (801cd18 <Argus_Dca_Evaluate+0x310>)
 801ccfe:	f7f6 f949 	bl	8012f94 <print>
 801cd02:	682b      	ldr	r3, [r5, #0]
 801cd04:	2b00      	cmp	r3, #0
 801cd06:	f47f af72 	bne.w	801cbee <Argus_Dca_Evaluate+0x1e6>
 801cd0a:	e748      	b.n	801cb9e <Argus_Dca_Evaluate+0x196>
 801cd0c:	10624dd3 	.word	0x10624dd3
 801cd10:	000f423f 	.word	0x000f423f
 801cd14:	0802e08c 	.word	0x0802e08c
 801cd18:	0802e120 	.word	0x0802e120
 801cd1c:	69aa      	ldr	r2, [r5, #24]
 801cd1e:	f3c2 3181 	ubfx	r1, r2, #14, #2
 801cd22:	4588      	cmp	r8, r1
 801cd24:	f47f af63 	bne.w	801cbee <Argus_Dca_Evaluate+0x1e6>
 801cd28:	9805      	ldr	r0, [sp, #20]
 801cd2a:	f3c2 3140 	ubfx	r1, r2, #13, #1
 801cd2e:	4281      	cmp	r1, r0
 801cd30:	f47f af5d 	bne.w	801cbee <Argus_Dca_Evaluate+0x1e6>
 801cd34:	8be9      	ldrh	r1, [r5, #30]
 801cd36:	9806      	ldr	r0, [sp, #24]
 801cd38:	4281      	cmp	r1, r0
 801cd3a:	f47f af58 	bne.w	801cbee <Argus_Dca_Evaluate+0x1e6>
 801cd3e:	eb04 0108 	add.w	r1, r4, r8
 801cd42:	f895 9023 	ldrb.w	r9, [r5, #35]	@ 0x23
 801cd46:	f891 103f 	ldrb.w	r1, [r1, #63]	@ 0x3f
 801cd4a:	9108      	str	r1, [sp, #32]
 801cd4c:	4608      	mov	r0, r1
 801cd4e:	9904      	ldr	r1, [sp, #16]
 801cd50:	1808      	adds	r0, r1, r0
 801cd52:	4548      	cmp	r0, r9
 801cd54:	f47f af4b 	bne.w	801cbee <Argus_Dca_Evaluate+0x1e6>
 801cd58:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801cd5c:	428b      	cmp	r3, r1
 801cd5e:	e9d4 a717 	ldrd	sl, r7, [r4, #92]	@ 0x5c
 801cd62:	f000 83e6 	beq.w	801d532 <Argus_Dca_Evaluate+0xb2a>
 801cd66:	eb04 0148 	add.w	r1, r4, r8, lsl #1
 801cd6a:	9e04      	ldr	r6, [sp, #16]
 801cd6c:	f8b1 1044 	ldrh.w	r1, [r1, #68]	@ 0x44
 801cd70:	9808      	ldr	r0, [sp, #32]
 801cd72:	1a59      	subs	r1, r3, r1
 801cd74:	b209      	sxth	r1, r1
 801cd76:	9107      	str	r1, [sp, #28]
 801cd78:	eb07 0148 	add.w	r1, r7, r8, lsl #1
 801cd7c:	fa50 f086 	uxtab	r0, r0, r6
 801cd80:	f8b1 10ca 	ldrh.w	r1, [r1, #202]	@ 0xca
 801cd84:	9106      	str	r1, [sp, #24]
 801cd86:	f99a 1000 	ldrsb.w	r1, [sl]
 801cd8a:	fa4f f980 	sxtb.w	r9, r0
 801cd8e:	2900      	cmp	r1, #0
 801cd90:	b2f0      	uxtb	r0, r6
 801cd92:	9002      	str	r0, [sp, #8]
 801cd94:	f340 8127 	ble.w	801cfe6 <Argus_Dca_Evaluate+0x5de>
 801cd98:	f994 0035 	ldrsb.w	r0, [r4, #53]	@ 0x35
 801cd9c:	eba0 0109 	sub.w	r1, r0, r9
 801cda0:	2901      	cmp	r1, #1
 801cda2:	9109      	str	r1, [sp, #36]	@ 0x24
 801cda4:	f340 841e 	ble.w	801d5e4 <Argus_Dca_Evaluate+0xbdc>
 801cda8:	4581      	cmp	r9, r0
 801cdaa:	f340 83f7 	ble.w	801d59c <Argus_Dca_Evaluate+0xb94>
 801cdae:	eba9 0100 	sub.w	r1, r9, r0
 801cdb2:	8fa6      	ldrh	r6, [r4, #60]	@ 0x3c
 801cdb4:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 801cdb6:	fb06 f101 	mul.w	r1, r6, r1
 801cdba:	1a18      	subs	r0, r3, r0
 801cdbc:	4288      	cmp	r0, r1
 801cdbe:	f2c0 83f8 	blt.w	801d5b2 <Argus_Dca_Evaluate+0xbaa>
 801cdc2:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801cdc6:	428a      	cmp	r2, r1
 801cdc8:	f340 839c 	ble.w	801d504 <Argus_Dca_Evaluate+0xafc>
 801cdcc:	f1b8 0f02 	cmp.w	r8, #2
 801cdd0:	f200 838f 	bhi.w	801d4f2 <Argus_Dca_Evaluate+0xaea>
 801cdd4:	eb07 0208 	add.w	r2, r7, r8
 801cdd8:	9904      	ldr	r1, [sp, #16]
 801cdda:	f892 20c6 	ldrb.w	r2, [r2, #198]	@ 0xc6
 801cdde:	4291      	cmp	r1, r2
 801cde0:	f280 8387 	bge.w	801d4f2 <Argus_Dca_Evaluate+0xaea>
 801cde4:	f89a 2014 	ldrb.w	r2, [sl, #20]
 801cde8:	4542      	cmp	r2, r8
 801cdea:	bf84      	itt	hi
 801cdec:	f108 0201 	addhi.w	r2, r8, #1
 801cdf0:	b2d2      	uxtbhi	r2, r2
 801cdf2:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
 801cdf6:	9a02      	ldr	r2, [sp, #8]
 801cdf8:	1e51      	subs	r1, r2, #1
 801cdfa:	b24a      	sxtb	r2, r1
 801cdfc:	9204      	str	r2, [sp, #16]
 801cdfe:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 801ce02:	e100      	b.n	801d006 <Argus_Dca_Evaluate+0x5fe>
 801ce04:	f04f 0e00 	mov.w	lr, #0
 801ce08:	e6e9      	b.n	801cbde <Argus_Dca_Evaluate+0x1d6>
 801ce0a:	b289      	uxth	r1, r1
 801ce0c:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 801ce10:	0089      	lsls	r1, r1, #2
 801ce12:	fbb1 f1f3 	udiv	r1, r1, r3
 801ce16:	e713      	b.n	801cc40 <Argus_Dca_Evaluate+0x238>
 801ce18:	6923      	ldr	r3, [r4, #16]
 801ce1a:	2b00      	cmp	r3, #0
 801ce1c:	f43f aea5 	beq.w	801cb6a <Argus_Dca_Evaluate+0x162>
 801ce20:	e662      	b.n	801cae8 <Argus_Dca_Evaluate+0xe0>
 801ce22:	4283      	cmp	r3, r0
 801ce24:	bf8c      	ite	hi
 801ce26:	2100      	movhi	r1, #0
 801ce28:	2101      	movls	r1, #1
 801ce2a:	e684      	b.n	801cb36 <Argus_Dca_Evaluate+0x12e>
 801ce2c:	4293      	cmp	r3, r2
 801ce2e:	f67f af49 	bls.w	801ccc4 <Argus_Dca_Evaluate+0x2bc>
 801ce32:	4560      	cmp	r0, ip
 801ce34:	f000 80a2 	beq.w	801cf7c <Argus_Dca_Evaluate+0x574>
 801ce38:	bf34      	ite	cc
 801ce3a:	2301      	movcc	r3, #1
 801ce3c:	2300      	movcs	r3, #0
 801ce3e:	2b00      	cmp	r3, #0
 801ce40:	f47f af4e 	bne.w	801cce0 <Argus_Dca_Evaluate+0x2d8>
 801ce44:	458c      	cmp	ip, r1
 801ce46:	f000 809e 	beq.w	801cf86 <Argus_Dca_Evaluate+0x57e>
 801ce4a:	bf8c      	ite	hi
 801ce4c:	2201      	movhi	r2, #1
 801ce4e:	2200      	movls	r2, #0
 801ce50:	2a00      	cmp	r2, #0
 801ce52:	f47f ae85 	bne.w	801cb60 <Argus_Dca_Evaluate+0x158>
 801ce56:	e743      	b.n	801cce0 <Argus_Dca_Evaluate+0x2d8>
 801ce58:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801ce5a:	f993 3000 	ldrsb.w	r3, [r3]
 801ce5e:	2b00      	cmp	r3, #0
 801ce60:	bfc8      	it	gt
 801ce62:	f991 60c0 	ldrsbgt.w	r6, [r1, #192]	@ 0xc0
 801ce66:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 801ce68:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801ce6a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801ce6e:	bfcc      	ite	gt
 801ce70:	f04f 0b00 	movgt.w	fp, #0
 801ce74:	2600      	movle	r6, #0
 801ce76:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 801ce7a:	678b      	str	r3, [r1, #120]	@ 0x78
 801ce7c:	e681      	b.n	801cb82 <Argus_Dca_Evaluate+0x17a>
 801ce7e:	f8a5 31c6 	strh.w	r3, [r5, #454]	@ 0x1c6
 801ce82:	469e      	mov	lr, r3
 801ce84:	e6ad      	b.n	801cbe2 <Argus_Dca_Evaluate+0x1da>
 801ce86:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801ce88:	f993 3000 	ldrsb.w	r3, [r3]
 801ce8c:	2b00      	cmp	r3, #0
 801ce8e:	f77f aeae 	ble.w	801cbee <Argus_Dca_Evaluate+0x1e6>
 801ce92:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 801ce94:	4693      	mov	fp, r2
 801ce96:	f993 60c0 	ldrsb.w	r6, [r3, #192]	@ 0xc0
 801ce9a:	e6a8      	b.n	801cbee <Argus_Dca_Evaluate+0x1e6>
 801ce9c:	45ce      	cmp	lr, r9
 801ce9e:	d056      	beq.n	801cf4e <Argus_Dca_Evaluate+0x546>
 801cea0:	bf34      	ite	cc
 801cea2:	2301      	movcc	r3, #1
 801cea4:	2300      	movcs	r3, #0
 801cea6:	2b00      	cmp	r3, #0
 801cea8:	f47f af1a 	bne.w	801cce0 <Argus_Dca_Evaluate+0x2d8>
 801ceac:	e64d      	b.n	801cb4a <Argus_Dca_Evaluate+0x142>
 801ceae:	f1b9 0f00 	cmp.w	r9, #0
 801ceb2:	d103      	bne.n	801cebc <Argus_Dca_Evaluate+0x4b4>
 801ceb4:	7ac1      	ldrb	r1, [r0, #11]
 801ceb6:	2900      	cmp	r1, #0
 801ceb8:	f47f aecc 	bne.w	801cc54 <Argus_Dca_Evaluate+0x24c>
 801cebc:	6963      	ldr	r3, [r4, #20]
 801cebe:	b91b      	cbnz	r3, 801cec8 <Argus_Dca_Evaluate+0x4c0>
 801cec0:	6923      	ldr	r3, [r4, #16]
 801cec2:	2b00      	cmp	r3, #0
 801cec4:	f43f aed0 	beq.w	801cc68 <Argus_Dca_Evaluate+0x260>
 801cec8:	a90d      	add	r1, sp, #52	@ 0x34
 801ceca:	a80c      	add	r0, sp, #48	@ 0x30
 801cecc:	f8be 9018 	ldrh.w	r9, [lr, #24]
 801ced0:	f7e9 feee 	bl	8006cb0 <Timer_GetCounterValue>
 801ced4:	49a7      	ldr	r1, [pc, #668]	@ (801d174 <Argus_Dca_Evaluate+0x76c>)
 801ced6:	f8d4 c014 	ldr.w	ip, [r4, #20]
 801ceda:	6920      	ldr	r0, [r4, #16]
 801cedc:	fba1 3109 	umull	r3, r1, r1, r9
 801cee0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801cee4:	098b      	lsrs	r3, r1, #6
 801cee6:	fb02 9313 	mls	r3, r2, r3, r9
 801ceea:	fb02 c303 	mla	r3, r2, r3, ip
 801ceee:	4aa2      	ldr	r2, [pc, #648]	@ (801d178 <Argus_Dca_Evaluate+0x770>)
 801cef0:	4293      	cmp	r3, r2
 801cef2:	e9dd 9e0c 	ldrd	r9, lr, [sp, #48]	@ 0x30
 801cef6:	eb00 1191 	add.w	r1, r0, r1, lsr #6
 801cefa:	d904      	bls.n	801cf06 <Argus_Dca_Evaluate+0x4fe>
 801cefc:	f5a3 2374 	sub.w	r3, r3, #999424	@ 0xf4000
 801cf00:	3101      	adds	r1, #1
 801cf02:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 801cf06:	4288      	cmp	r0, r1
 801cf08:	d052      	beq.n	801cfb0 <Argus_Dca_Evaluate+0x5a8>
 801cf0a:	bf34      	ite	cc
 801cf0c:	2201      	movcc	r2, #1
 801cf0e:	2200      	movcs	r2, #0
 801cf10:	2a00      	cmp	r2, #0
 801cf12:	d044      	beq.n	801cf9e <Argus_Dca_Evaluate+0x596>
 801cf14:	4548      	cmp	r0, r9
 801cf16:	d054      	beq.n	801cfc2 <Argus_Dca_Evaluate+0x5ba>
 801cf18:	bf34      	ite	cc
 801cf1a:	2201      	movcc	r2, #1
 801cf1c:	2200      	movcs	r2, #0
 801cf1e:	2a00      	cmp	r2, #0
 801cf20:	f43f ae1e 	beq.w	801cb60 <Argus_Dca_Evaluate+0x158>
 801cf24:	4589      	cmp	r9, r1
 801cf26:	d059      	beq.n	801cfdc <Argus_Dca_Evaluate+0x5d4>
 801cf28:	bf8c      	ite	hi
 801cf2a:	2301      	movhi	r3, #1
 801cf2c:	2300      	movls	r3, #0
 801cf2e:	f083 0301 	eor.w	r3, r3, #1
 801cf32:	2b00      	cmp	r3, #0
 801cf34:	f43f ae14 	beq.w	801cb60 <Argus_Dca_Evaluate+0x158>
 801cf38:	e6d2      	b.n	801cce0 <Argus_Dca_Evaluate+0x2d8>
 801cf3a:	6963      	ldr	r3, [r4, #20]
 801cf3c:	b91b      	cbnz	r3, 801cf46 <Argus_Dca_Evaluate+0x53e>
 801cf3e:	6923      	ldr	r3, [r4, #16]
 801cf40:	2b00      	cmp	r3, #0
 801cf42:	f43f ae12 	beq.w	801cb6a <Argus_Dca_Evaluate+0x162>
 801cf46:	2300      	movs	r3, #0
 801cf48:	e9c4 3304 	strd	r3, r3, [r4, #16]
 801cf4c:	e60d      	b.n	801cb6a <Argus_Dca_Evaluate+0x162>
 801cf4e:	4293      	cmp	r3, r2
 801cf50:	bf8c      	ite	hi
 801cf52:	2300      	movhi	r3, #0
 801cf54:	2301      	movls	r3, #1
 801cf56:	2b00      	cmp	r3, #0
 801cf58:	f47f aec2 	bne.w	801cce0 <Argus_Dca_Evaluate+0x2d8>
 801cf5c:	e5f5      	b.n	801cb4a <Argus_Dca_Evaluate+0x142>
 801cf5e:	4293      	cmp	r3, r2
 801cf60:	bf8c      	ite	hi
 801cf62:	2300      	movhi	r3, #0
 801cf64:	2301      	movls	r3, #1
 801cf66:	e5ef      	b.n	801cb48 <Argus_Dca_Evaluate+0x140>
 801cf68:	4282      	cmp	r2, r0
 801cf6a:	bf34      	ite	cc
 801cf6c:	2200      	movcc	r2, #0
 801cf6e:	2201      	movcs	r2, #1
 801cf70:	e5f1      	b.n	801cb56 <Argus_Dca_Evaluate+0x14e>
 801cf72:	4573      	cmp	r3, lr
 801cf74:	bf8c      	ite	hi
 801cf76:	2300      	movhi	r3, #0
 801cf78:	2301      	movls	r3, #1
 801cf7a:	e6a9      	b.n	801ccd0 <Argus_Dca_Evaluate+0x2c8>
 801cf7c:	4573      	cmp	r3, lr
 801cf7e:	bf8c      	ite	hi
 801cf80:	2300      	movhi	r3, #0
 801cf82:	2301      	movls	r3, #1
 801cf84:	e75b      	b.n	801ce3e <Argus_Dca_Evaluate+0x436>
 801cf86:	4596      	cmp	lr, r2
 801cf88:	bf34      	ite	cc
 801cf8a:	2200      	movcc	r2, #0
 801cf8c:	2201      	movcs	r2, #1
 801cf8e:	2a00      	cmp	r2, #0
 801cf90:	f47f ade6 	bne.w	801cb60 <Argus_Dca_Evaluate+0x158>
 801cf94:	e6a4      	b.n	801cce0 <Argus_Dca_Evaluate+0x2d8>
 801cf96:	4596      	cmp	lr, r2
 801cf98:	f4bf ade2 	bcs.w	801cb60 <Argus_Dca_Evaluate+0x158>
 801cf9c:	e6a0      	b.n	801cce0 <Argus_Dca_Evaluate+0x2d8>
 801cf9e:	4548      	cmp	r0, r9
 801cfa0:	d014      	beq.n	801cfcc <Argus_Dca_Evaluate+0x5c4>
 801cfa2:	bf34      	ite	cc
 801cfa4:	2201      	movcc	r2, #1
 801cfa6:	2200      	movcs	r2, #0
 801cfa8:	2a00      	cmp	r2, #0
 801cfaa:	f47f ae99 	bne.w	801cce0 <Argus_Dca_Evaluate+0x2d8>
 801cfae:	e7b9      	b.n	801cf24 <Argus_Dca_Evaluate+0x51c>
 801cfb0:	459c      	cmp	ip, r3
 801cfb2:	bf8c      	ite	hi
 801cfb4:	2200      	movhi	r2, #0
 801cfb6:	2201      	movls	r2, #1
 801cfb8:	e7aa      	b.n	801cf10 <Argus_Dca_Evaluate+0x508>
 801cfba:	f06f 036a 	mvn.w	r3, #106	@ 0x6a
 801cfbe:	602b      	str	r3, [r5, #0]
 801cfc0:	e615      	b.n	801cbee <Argus_Dca_Evaluate+0x1e6>
 801cfc2:	45f4      	cmp	ip, lr
 801cfc4:	bf8c      	ite	hi
 801cfc6:	2200      	movhi	r2, #0
 801cfc8:	2201      	movls	r2, #1
 801cfca:	e7a8      	b.n	801cf1e <Argus_Dca_Evaluate+0x516>
 801cfcc:	45f4      	cmp	ip, lr
 801cfce:	bf8c      	ite	hi
 801cfd0:	2200      	movhi	r2, #0
 801cfd2:	2201      	movls	r2, #1
 801cfd4:	2a00      	cmp	r2, #0
 801cfd6:	f47f ae83 	bne.w	801cce0 <Argus_Dca_Evaluate+0x2d8>
 801cfda:	e7a3      	b.n	801cf24 <Argus_Dca_Evaluate+0x51c>
 801cfdc:	4573      	cmp	r3, lr
 801cfde:	bf8c      	ite	hi
 801cfe0:	2300      	movhi	r3, #0
 801cfe2:	2301      	movls	r3, #1
 801cfe4:	e7a3      	b.n	801cf2e <Argus_Dca_Evaluate+0x526>
 801cfe6:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801cfea:	428a      	cmp	r2, r1
 801cfec:	f73f af03 	bgt.w	801cdf6 <Argus_Dca_Evaluate+0x3ee>
 801cff0:	9a06      	ldr	r2, [sp, #24]
 801cff2:	9907      	ldr	r1, [sp, #28]
 801cff4:	4252      	negs	r2, r2
 801cff6:	4291      	cmp	r1, r2
 801cff8:	da03      	bge.n	801d002 <Argus_Dca_Evaluate+0x5fa>
 801cffa:	9902      	ldr	r1, [sp, #8]
 801cffc:	3101      	adds	r1, #1
 801cffe:	b24a      	sxtb	r2, r1
 801d000:	9204      	str	r2, [sp, #16]
 801d002:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 801d006:	86e3      	strh	r3, [r4, #54]	@ 0x36
 801d008:	9b08      	ldr	r3, [sp, #32]
 801d00a:	9904      	ldr	r1, [sp, #16]
 801d00c:	f884 9035 	strb.w	r9, [r4, #53]	@ 0x35
 801d010:	1ad2      	subs	r2, r2, r3
 801d012:	f1c3 0301 	rsb	r3, r3, #1
 801d016:	428b      	cmp	r3, r1
 801d018:	bfb8      	it	lt
 801d01a:	460b      	movlt	r3, r1
 801d01c:	429a      	cmp	r2, r3
 801d01e:	bfa8      	it	ge
 801d020:	461a      	movge	r2, r3
 801d022:	b256      	sxtb	r6, r2
 801d024:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 801d026:	8460      	strh	r0, [r4, #34]	@ 0x22
 801d028:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 801d02c:	2b02      	cmp	r3, #2
 801d02e:	f000 814e 	beq.w	801d2ce <Argus_Dca_Evaluate+0x8c6>
 801d032:	2b01      	cmp	r3, #1
 801d034:	d104      	bne.n	801d040 <Argus_Dca_Evaluate+0x638>
 801d036:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801d03a:	4298      	cmp	r0, r3
 801d03c:	bf88      	it	hi
 801d03e:	8463      	strhhi	r3, [r4, #34]	@ 0x22
 801d040:	f99a 3000 	ldrsb.w	r3, [sl]
 801d044:	2b00      	cmp	r3, #0
 801d046:	dc62      	bgt.n	801d10e <Argus_Dca_Evaluate+0x706>
 801d048:	f89a 1013 	ldrb.w	r1, [sl, #19]
 801d04c:	f894 5034 	ldrb.w	r5, [r4, #52]	@ 0x34
 801d050:	9a00      	ldr	r2, [sp, #0]
 801d052:	e9d7 0324 	ldrd	r0, r3, [r7, #144]	@ 0x90
 801d056:	f3c2 128f 	ubfx	r2, r2, #6, #16
 801d05a:	2a01      	cmp	r2, #1
 801d05c:	bf38      	it	cc
 801d05e:	2201      	movcc	r2, #1
 801d060:	fb03 0002 	mla	r0, r3, r2, r0
 801d064:	4694      	mov	ip, r2
 801d066:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	@ 0x2c
 801d06a:	4293      	cmp	r3, r2
 801d06c:	bf28      	it	cs
 801d06e:	4613      	movcs	r3, r2
 801d070:	f3c0 3240 	ubfx	r2, r0, #13, #1
 801d074:	eb02 3090 	add.w	r0, r2, r0, lsr #14
 801d078:	fbb3 f7f0 	udiv	r7, r3, r0
 801d07c:	2f01      	cmp	r7, #1
 801d07e:	69a3      	ldr	r3, [r4, #24]
 801d080:	bf38      	it	cc
 801d082:	2701      	movcc	r7, #1
 801d084:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 801d088:	bf28      	it	cs
 801d08a:	f44f 6780 	movcs.w	r7, #1024	@ 0x400
 801d08e:	1c5a      	adds	r2, r3, #1
 801d090:	d026      	beq.n	801d0e0 <Argus_Dca_Evaluate+0x6d8>
 801d092:	9a01      	ldr	r2, [sp, #4]
 801d094:	f8b4 801c 	ldrh.w	r8, [r4, #28]
 801d098:	2a01      	cmp	r2, #1
 801d09a:	bf0c      	ite	eq
 801d09c:	f894 003e 	ldrbeq.w	r0, [r4, #62]	@ 0x3e
 801d0a0:	2004      	movne	r0, #4
 801d0a2:	2801      	cmp	r0, #1
 801d0a4:	bf38      	it	cc
 801d0a6:	2001      	movcc	r0, #1
 801d0a8:	fb0c f200 	mul.w	r2, ip, r0
 801d0ac:	f3c3 0c0e 	ubfx	ip, r3, #0, #15
 801d0b0:	fb08 fc0c 	mul.w	ip, r8, ip
 801d0b4:	ea4f 3ed3 	mov.w	lr, r3, lsr #15
 801d0b8:	ea4f 33dc 	mov.w	r3, ip, lsr #15
 801d0bc:	fb08 330e 	mla	r3, r8, lr, r3
 801d0c0:	f3cc 3c80 	ubfx	ip, ip, #14, #1
 801d0c4:	4463      	add	r3, ip
 801d0c6:	4293      	cmp	r3, r2
 801d0c8:	f0c0 8159 	bcc.w	801d37e <Argus_Dca_Evaluate+0x976>
 801d0cc:	fbb3 f3f2 	udiv	r3, r3, r2
 801d0d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801d0d4:	bf28      	it	cs
 801d0d6:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 801d0da:	429f      	cmp	r7, r3
 801d0dc:	bf28      	it	cs
 801d0de:	461f      	movcs	r7, r3
 801d0e0:	455d      	cmp	r5, fp
 801d0e2:	b2bf      	uxth	r7, r7
 801d0e4:	d03b      	beq.n	801d15e <Argus_Dca_Evaluate+0x756>
 801d0e6:	2300      	movs	r3, #0
 801d0e8:	9302      	str	r3, [sp, #8]
 801d0ea:	4559      	cmp	r1, fp
 801d0ec:	f4ff ad7f 	bcc.w	801cbee <Argus_Dca_Evaluate+0x1e6>
 801d0f0:	f8ba 300e 	ldrh.w	r3, [sl, #14]
 801d0f4:	9a00      	ldr	r2, [sp, #0]
 801d0f6:	4293      	cmp	r3, r2
 801d0f8:	f4ff ad79 	bcc.w	801cbee <Argus_Dca_Evaluate+0x1e6>
 801d0fc:	9b01      	ldr	r3, [sp, #4]
 801d0fe:	2b00      	cmp	r3, #0
 801d100:	f47f ad75 	bne.w	801cbee <Argus_Dca_Evaluate+0x1e6>
 801d104:	9b02      	ldr	r3, [sp, #8]
 801d106:	f043 0301 	orr.w	r3, r3, #1
 801d10a:	9302      	str	r3, [sp, #8]
 801d10c:	e56f      	b.n	801cbee <Argus_Dca_Evaluate+0x1e6>
 801d10e:	7b39      	ldrb	r1, [r7, #12]
 801d110:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 801d114:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801d118:	fb03 f101 	mul.w	r1, r3, r1
 801d11c:	f89a 300a 	ldrb.w	r3, [sl, #10]
 801d120:	2b02      	cmp	r3, #2
 801d122:	ea4f 2111 	mov.w	r1, r1, lsr #8
 801d126:	f105 0228 	add.w	r2, r5, #40	@ 0x28
 801d12a:	f04f 0b00 	mov.w	fp, #0
 801d12e:	d025      	beq.n	801d17c <Argus_Dca_Evaluate+0x774>
 801d130:	f505 70d4 	add.w	r0, r5, #424	@ 0x1a8
 801d134:	465b      	mov	r3, fp
 801d136:	e006      	b.n	801d146 <Argus_Dca_Evaluate+0x73e>
 801d138:	88d1      	ldrh	r1, [r2, #6]
 801d13a:	428b      	cmp	r3, r1
 801d13c:	bf38      	it	cc
 801d13e:	460b      	movcc	r3, r1
 801d140:	320c      	adds	r2, #12
 801d142:	4290      	cmp	r0, r2
 801d144:	d032      	beq.n	801d1ac <Argus_Dca_Evaluate+0x7a4>
 801d146:	7a11      	ldrb	r1, [r2, #8]
 801d148:	f011 0f11 	tst.w	r1, #17
 801d14c:	d1f8      	bne.n	801d140 <Argus_Dca_Evaluate+0x738>
 801d14e:	f011 0f02 	tst.w	r1, #2
 801d152:	f10b 0101 	add.w	r1, fp, #1
 801d156:	d0ef      	beq.n	801d138 <Argus_Dca_Evaluate+0x730>
 801d158:	fa5f fb81 	uxtb.w	fp, r1
 801d15c:	e7f0      	b.n	801d140 <Argus_Dca_Evaluate+0x738>
 801d15e:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 801d160:	9a00      	ldr	r2, [sp, #0]
 801d162:	4293      	cmp	r3, r2
 801d164:	d1bf      	bne.n	801d0e6 <Argus_Dca_Evaluate+0x6de>
 801d166:	9b01      	ldr	r3, [sp, #4]
 801d168:	2b01      	cmp	r3, #1
 801d16a:	bf0c      	ite	eq
 801d16c:	2302      	moveq	r3, #2
 801d16e:	2300      	movne	r3, #0
 801d170:	9302      	str	r3, [sp, #8]
 801d172:	e7ba      	b.n	801d0ea <Argus_Dca_Evaluate+0x6e2>
 801d174:	10624dd3 	.word	0x10624dd3
 801d178:	000f423f 	.word	0x000f423f
 801d17c:	f505 7cd4 	add.w	ip, r5, #424	@ 0x1a8
 801d180:	4658      	mov	r0, fp
 801d182:	465b      	mov	r3, fp
 801d184:	7a17      	ldrb	r7, [r2, #8]
 801d186:	f017 0f11 	tst.w	r7, #17
 801d18a:	d10a      	bne.n	801d1a2 <Argus_Dca_Evaluate+0x79a>
 801d18c:	f017 0f02 	tst.w	r7, #2
 801d190:	f10b 0701 	add.w	r7, fp, #1
 801d194:	bf0d      	iteet	eq
 801d196:	88d7      	ldrheq	r7, [r2, #6]
 801d198:	fa5f fb87 	uxtbne.w	fp, r7
 801d19c:	185b      	addne	r3, r3, r1
 801d19e:	19db      	addeq	r3, r3, r7
 801d1a0:	3001      	adds	r0, #1
 801d1a2:	320c      	adds	r2, #12
 801d1a4:	4594      	cmp	ip, r2
 801d1a6:	d1ed      	bne.n	801d184 <Argus_Dca_Evaluate+0x77c>
 801d1a8:	fbb3 f3f0 	udiv	r3, r3, r0
 801d1ac:	f8d5 21cc 	ldr.w	r2, [r5, #460]	@ 0x1cc
 801d1b0:	b29b      	uxth	r3, r3
 801d1b2:	b102      	cbz	r2, 801d1b6 <Argus_Dca_Evaluate+0x7ae>
 801d1b4:	8013      	strh	r3, [r2, #0]
 801d1b6:	9a05      	ldr	r2, [sp, #20]
 801d1b8:	f89a 9003 	ldrb.w	r9, [sl, #3]
 801d1bc:	2a01      	cmp	r2, #1
 801d1be:	bf08      	it	eq
 801d1c0:	f894 c03e 	ldrbeq.w	ip, [r4, #62]	@ 0x3e
 801d1c4:	9a03      	ldr	r2, [sp, #12]
 801d1c6:	bf18      	it	ne
 801d1c8:	f04f 0c04 	movne.w	ip, #4
 801d1cc:	fb0c f702 	mul.w	r7, ip, r2
 801d1d0:	45cb      	cmp	fp, r9
 801d1d2:	fa07 f708 	lsl.w	r7, r7, r8
 801d1d6:	f0c0 810e 	bcc.w	801d3f6 <Argus_Dca_Evaluate+0x9ee>
 801d1da:	f8ba 200e 	ldrh.w	r2, [sl, #14]
 801d1de:	f89a 1012 	ldrb.w	r1, [sl, #18]
 801d1e2:	0093      	lsls	r3, r2, #2
 801d1e4:	408b      	lsls	r3, r1
 801d1e6:	429f      	cmp	r7, r3
 801d1e8:	f200 8214 	bhi.w	801d614 <Argus_Dca_Evaluate+0xc0c>
 801d1ec:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 801d1ee:	8be0      	ldrh	r0, [r4, #30]
 801d1f0:	2701      	movs	r7, #1
 801d1f2:	45d9      	cmp	r9, fp
 801d1f4:	d803      	bhi.n	801d1fe <Argus_Dca_Evaluate+0x7f6>
 801d1f6:	69ab      	ldr	r3, [r5, #24]
 801d1f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801d1fc:	61ab      	str	r3, [r5, #24]
 801d1fe:	0043      	lsls	r3, r0, #1
 801d200:	4293      	cmp	r3, r2
 801d202:	f89a 0012 	ldrb.w	r0, [sl, #18]
 801d206:	f894 5034 	ldrb.w	r5, [r4, #52]	@ 0x34
 801d20a:	f89a e00b 	ldrb.w	lr, [sl, #11]
 801d20e:	bfb8      	it	lt
 801d210:	4613      	movlt	r3, r2
 801d212:	428b      	cmp	r3, r1
 801d214:	bfa8      	it	ge
 801d216:	460b      	movge	r3, r1
 801d218:	42a8      	cmp	r0, r5
 801d21a:	bf28      	it	cs
 801d21c:	4628      	movcs	r0, r5
 801d21e:	f10e 3cff 	add.w	ip, lr, #4294967295
 801d222:	f1be 0800 	subs.w	r8, lr, #0
 801d226:	4683      	mov	fp, r0
 801d228:	bf18      	it	ne
 801d22a:	f04f 0801 	movne.w	r8, #1
 801d22e:	f1dc 0000 	rsbs	r0, ip, #0
 801d232:	eb40 000c 	adc.w	r0, r0, ip
 801d236:	9001      	str	r0, [sp, #4]
 801d238:	f1be 0f00 	cmp.w	lr, #0
 801d23c:	f000 81fb 	beq.w	801d636 <Argus_Dca_Evaluate+0xc2e>
 801d240:	f894 003e 	ldrb.w	r0, [r4, #62]	@ 0x3e
 801d244:	fb00 f903 	mul.w	r9, r0, r3
 801d248:	fa09 f90b 	lsl.w	r9, r9, fp
 801d24c:	454f      	cmp	r7, r9
 801d24e:	4684      	mov	ip, r0
 801d250:	f080 81f9 	bcs.w	801d646 <Argus_Dca_Evaluate+0xc3e>
 801d254:	428a      	cmp	r2, r1
 801d256:	4613      	mov	r3, r2
 801d258:	bf28      	it	cs
 801d25a:	460b      	movcs	r3, r1
 801d25c:	f1be 0f01 	cmp.w	lr, #1
 801d260:	9300      	str	r3, [sp, #0]
 801d262:	bf18      	it	ne
 801d264:	2004      	movne	r0, #4
 801d266:	9b00      	ldr	r3, [sp, #0]
 801d268:	fb00 f303 	mul.w	r3, r0, r3
 801d26c:	fa03 f20b 	lsl.w	r2, r3, fp
 801d270:	4297      	cmp	r7, r2
 801d272:	f080 8242 	bcs.w	801d6fa <Argus_Dca_Evaluate+0xcf2>
 801d276:	fbb7 f3f3 	udiv	r3, r7, r3
 801d27a:	2b01      	cmp	r3, #1
 801d27c:	bf38      	it	cc
 801d27e:	2301      	movcc	r3, #1
 801d280:	461a      	mov	r2, r3
 801d282:	fab3 f383 	clz	r3, r3
 801d286:	f1c3 011e 	rsb	r1, r3, #30
 801d28a:	40ca      	lsrs	r2, r1
 801d28c:	f1c3 031f 	rsb	r3, r3, #31
 801d290:	f89a 1013 	ldrb.w	r1, [sl, #19]
 801d294:	2a03      	cmp	r2, #3
 801d296:	bf08      	it	eq
 801d298:	3301      	addeq	r3, #1
 801d29a:	428b      	cmp	r3, r1
 801d29c:	bf38      	it	cc
 801d29e:	460b      	movcc	r3, r1
 801d2a0:	455b      	cmp	r3, fp
 801d2a2:	bf28      	it	cs
 801d2a4:	465b      	movcs	r3, fp
 801d2a6:	fa5f fb83 	uxtb.w	fp, r3
 801d2aa:	eb04 030b 	add.w	r3, r4, fp
 801d2ae:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 801d2b2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 801d2b6:	6e27      	ldr	r7, [r4, #96]	@ 0x60
 801d2b8:	1ad2      	subs	r2, r2, r3
 801d2ba:	f1c3 0301 	rsb	r3, r3, #1
 801d2be:	429e      	cmp	r6, r3
 801d2c0:	bfb8      	it	lt
 801d2c2:	461e      	movlt	r6, r3
 801d2c4:	4296      	cmp	r6, r2
 801d2c6:	bfa8      	it	ge
 801d2c8:	4616      	movge	r6, r2
 801d2ca:	b276      	sxtb	r6, r6
 801d2cc:	e6c0      	b.n	801d050 <Argus_Dca_Evaluate+0x648>
 801d2ce:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 801d2d2:	2b00      	cmp	r3, #0
 801d2d4:	f000 81a4 	beq.w	801d620 <Argus_Dca_Evaluate+0xc18>
 801d2d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801d2dc:	4596      	cmp	lr, r2
 801d2de:	f000 819f 	beq.w	801d620 <Argus_Dca_Evaluate+0xc18>
 801d2e2:	fb03 f20e 	mul.w	r2, r3, lr
 801d2e6:	0192      	lsls	r2, r2, #6
 801d2e8:	f5c2 3280 	rsb	r2, r2, #65536	@ 0x10000
 801d2ec:	2a01      	cmp	r2, #1
 801d2ee:	bfb8      	it	lt
 801d2f0:	2201      	movlt	r2, #1
 801d2f2:	fab2 f382 	clz	r3, r2
 801d2f6:	f1c3 011e 	rsb	r1, r3, #30
 801d2fa:	40ca      	lsrs	r2, r1
 801d2fc:	f1c3 031f 	rsb	r3, r3, #31
 801d300:	2a03      	cmp	r2, #3
 801d302:	bf08      	it	eq
 801d304:	3301      	addeq	r3, #1
 801d306:	f1c3 0310 	rsb	r3, r3, #16
 801d30a:	b25b      	sxtb	r3, r3
 801d30c:	f8ba 2010 	ldrh.w	r2, [sl, #16]
 801d310:	b14b      	cbz	r3, 801d326 <Argus_Dca_Evaluate+0x91e>
 801d312:	2b20      	cmp	r3, #32
 801d314:	f200 8182 	bhi.w	801d61c <Argus_Dca_Evaluate+0xc14>
 801d318:	3b01      	subs	r3, #1
 801d31a:	fa22 f303 	lsr.w	r3, r2, r3
 801d31e:	f003 0201 	and.w	r2, r3, #1
 801d322:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 801d326:	f8ba 100c 	ldrh.w	r1, [sl, #12]
 801d32a:	b293      	uxth	r3, r2
 801d32c:	428b      	cmp	r3, r1
 801d32e:	bf38      	it	cc
 801d330:	460b      	movcc	r3, r1
 801d332:	4298      	cmp	r0, r3
 801d334:	bf88      	it	hi
 801d336:	8463      	strhhi	r3, [r4, #34]	@ 0x22
 801d338:	4561      	cmp	r1, ip
 801d33a:	d838      	bhi.n	801d3ae <Argus_Dca_Evaluate+0x9a6>
 801d33c:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
 801d340:	b353      	cbz	r3, 801d398 <Argus_Dca_Evaluate+0x990>
 801d342:	3b01      	subs	r3, #1
 801d344:	f884 3027 	strb.w	r3, [r4, #39]	@ 0x27
 801d348:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 801d34c:	f8ba 2010 	ldrh.w	r2, [sl, #16]
 801d350:	b14b      	cbz	r3, 801d366 <Argus_Dca_Evaluate+0x95e>
 801d352:	2b20      	cmp	r3, #32
 801d354:	f200 8167 	bhi.w	801d626 <Argus_Dca_Evaluate+0xc1e>
 801d358:	3b01      	subs	r3, #1
 801d35a:	fa22 f303 	lsr.w	r3, r2, r3
 801d35e:	f003 0201 	and.w	r2, r3, #1
 801d362:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 801d366:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801d36a:	b292      	uxth	r2, r2
 801d36c:	429a      	cmp	r2, r3
 801d36e:	f240 815c 	bls.w	801d62a <Argus_Dca_Evaluate+0xc22>
 801d372:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 801d374:	4291      	cmp	r1, r2
 801d376:	f67f ae63 	bls.w	801d040 <Argus_Dca_Evaluate+0x638>
 801d37a:	8462      	strh	r2, [r4, #34]	@ 0x22
 801d37c:	e660      	b.n	801d040 <Argus_Dca_Evaluate+0x638>
 801d37e:	4298      	cmp	r0, r3
 801d380:	d824      	bhi.n	801d3cc <Argus_Dca_Evaluate+0x9c4>
 801d382:	fbb3 f3f0 	udiv	r3, r3, r0
 801d386:	9a00      	ldr	r2, [sp, #0]
 801d388:	019b      	lsls	r3, r3, #6
 801d38a:	4293      	cmp	r3, r2
 801d38c:	bf28      	it	cs
 801d38e:	4613      	movcs	r3, r2
 801d390:	b29b      	uxth	r3, r3
 801d392:	9300      	str	r3, [sp, #0]
 801d394:	2301      	movs	r3, #1
 801d396:	e6a0      	b.n	801d0da <Argus_Dca_Evaluate+0x6d2>
 801d398:	f8b5 21c8 	ldrh.w	r2, [r5, #456]	@ 0x1c8
 801d39c:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 801d39e:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 801d3a2:	4291      	cmp	r1, r2
 801d3a4:	d91a      	bls.n	801d3dc <Argus_Dca_Evaluate+0x9d4>
 801d3a6:	b9bb      	cbnz	r3, 801d3d8 <Argus_Dca_Evaluate+0x9d0>
 801d3a8:	f8ba 2010 	ldrh.w	r2, [sl, #16]
 801d3ac:	e7db      	b.n	801d366 <Argus_Dca_Evaluate+0x95e>
 801d3ae:	2300      	movs	r3, #0
 801d3b0:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
 801d3b4:	f897 30d6 	ldrb.w	r3, [r7, #214]	@ 0xd6
 801d3b8:	f884 3027 	strb.w	r3, [r4, #39]	@ 0x27
 801d3bc:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801d3be:	f7fc fc1b 	bl	8019bf8 <Argus_Eval_ResetShotNoiseAmplitude>
 801d3c2:	e9d4 a717 	ldrd	sl, r7, [r4, #92]	@ 0x5c
 801d3c6:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 801d3ca:	e7bf      	b.n	801d34c <Argus_Dca_Evaluate+0x944>
 801d3cc:	2b03      	cmp	r3, #3
 801d3ce:	d90e      	bls.n	801d3ee <Argus_Dca_Evaluate+0x9e6>
 801d3d0:	2200      	movs	r2, #0
 801d3d2:	089b      	lsrs	r3, r3, #2
 801d3d4:	9201      	str	r2, [sp, #4]
 801d3d6:	e7d6      	b.n	801d386 <Argus_Dca_Evaluate+0x97e>
 801d3d8:	3b01      	subs	r3, #1
 801d3da:	e7e9      	b.n	801d3b0 <Argus_Dca_Evaluate+0x9a8>
 801d3dc:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 801d3de:	4291      	cmp	r1, r2
 801d3e0:	d2b4      	bcs.n	801d34c <Argus_Dca_Evaluate+0x944>
 801d3e2:	f894 2021 	ldrb.w	r2, [r4, #33]	@ 0x21
 801d3e6:	429a      	cmp	r2, r3
 801d3e8:	d9b0      	bls.n	801d34c <Argus_Dca_Evaluate+0x944>
 801d3ea:	3301      	adds	r3, #1
 801d3ec:	e7e0      	b.n	801d3b0 <Argus_Dca_Evaluate+0x9a8>
 801d3ee:	2300      	movs	r3, #0
 801d3f0:	9301      	str	r3, [sp, #4]
 801d3f2:	2301      	movs	r3, #1
 801d3f4:	e7c7      	b.n	801d386 <Argus_Dca_Evaluate+0x97e>
 801d3f6:	f89a 2002 	ldrb.w	r2, [sl, #2]
 801d3fa:	4593      	cmp	fp, r2
 801d3fc:	d305      	bcc.n	801d40a <Argus_Dca_Evaluate+0xa02>
 801d3fe:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 801d400:	f8ba 200e 	ldrh.w	r2, [sl, #14]
 801d404:	8be0      	ldrh	r0, [r4, #30]
 801d406:	08bf      	lsrs	r7, r7, #2
 801d408:	e6f3      	b.n	801d1f2 <Argus_Dca_Evaluate+0x7ea>
 801d40a:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801d40e:	4593      	cmp	fp, r2
 801d410:	d240      	bcs.n	801d494 <Argus_Dca_Evaluate+0xa8c>
 801d412:	f8ba 0008 	ldrh.w	r0, [sl, #8]
 801d416:	4283      	cmp	r3, r0
 801d418:	d83c      	bhi.n	801d494 <Argus_Dca_Evaluate+0xa8c>
 801d41a:	f1bb 0f00 	cmp.w	fp, #0
 801d41e:	d134      	bne.n	801d48a <Argus_Dca_Evaluate+0xa82>
 801d420:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801d424:	4293      	cmp	r3, r2
 801d426:	d830      	bhi.n	801d48a <Argus_Dca_Evaluate+0xa82>
 801d428:	f8ba 1006 	ldrh.w	r1, [sl, #6]
 801d42c:	4299      	cmp	r1, r3
 801d42e:	d920      	bls.n	801d472 <Argus_Dca_Evaluate+0xa6a>
 801d430:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 801d432:	9a03      	ldr	r2, [sp, #12]
 801d434:	4291      	cmp	r1, r2
 801d436:	d808      	bhi.n	801d44a <Argus_Dca_Evaluate+0xa42>
 801d438:	9a05      	ldr	r2, [sp, #20]
 801d43a:	2a00      	cmp	r2, #0
 801d43c:	f040 80c8 	bne.w	801d5d0 <Argus_Dca_Evaluate+0xbc8>
 801d440:	f89a 200b 	ldrb.w	r2, [sl, #11]
 801d444:	2a00      	cmp	r2, #0
 801d446:	f000 80c3 	beq.w	801d5d0 <Argus_Dca_Evaluate+0xbc8>
 801d44a:	2b02      	cmp	r3, #2
 801d44c:	bf38      	it	cc
 801d44e:	2302      	movcc	r3, #2
 801d450:	0319      	lsls	r1, r3, #12
 801d452:	0300      	lsls	r0, r0, #12
 801d454:	f7fd fca4 	bl	801ada0 <fp_div16.part.0>
 801d458:	fba0 3007 	umull	r3, r0, r0, r7
 801d45c:	0c1a      	lsrs	r2, r3, #16
 801d45e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 801d462:	f3c3 37c0 	ubfx	r7, r3, #15, #1
 801d466:	4417      	add	r7, r2
 801d468:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 801d46a:	f8ba 200e 	ldrh.w	r2, [sl, #14]
 801d46e:	8be0      	ldrh	r0, [r4, #30]
 801d470:	e6bf      	b.n	801d1f2 <Argus_Dca_Evaluate+0x7ea>
 801d472:	4293      	cmp	r3, r2
 801d474:	d209      	bcs.n	801d48a <Argus_Dca_Evaluate+0xa82>
 801d476:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 801d47a:	f89a 2012 	ldrb.w	r2, [sl, #18]
 801d47e:	4293      	cmp	r3, r2
 801d480:	bf28      	it	cs
 801d482:	4613      	movcs	r3, r2
 801d484:	4543      	cmp	r3, r8
 801d486:	d90f      	bls.n	801d4a8 <Argus_Dca_Evaluate+0xaa0>
 801d488:	007f      	lsls	r7, r7, #1
 801d48a:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 801d48c:	f8ba 200e 	ldrh.w	r2, [sl, #14]
 801d490:	8be0      	ldrh	r0, [r4, #30]
 801d492:	e6ae      	b.n	801d1f2 <Argus_Dca_Evaluate+0x7ea>
 801d494:	f89a 3012 	ldrb.w	r3, [sl, #18]
 801d498:	4543      	cmp	r3, r8
 801d49a:	d217      	bcs.n	801d4cc <Argus_Dca_Evaluate+0xac4>
 801d49c:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 801d49e:	f8ba 200e 	ldrh.w	r2, [sl, #14]
 801d4a2:	8be0      	ldrh	r0, [r4, #30]
 801d4a4:	087f      	lsrs	r7, r7, #1
 801d4a6:	e6a4      	b.n	801d1f2 <Argus_Dca_Evaluate+0x7ea>
 801d4a8:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 801d4aa:	9b03      	ldr	r3, [sp, #12]
 801d4ac:	4299      	cmp	r1, r3
 801d4ae:	d9ed      	bls.n	801d48c <Argus_Dca_Evaluate+0xa84>
 801d4b0:	9b03      	ldr	r3, [sp, #12]
 801d4b2:	8be0      	ldrh	r0, [r4, #30]
 801d4b4:	f8ba 200e 	ldrh.w	r2, [sl, #14]
 801d4b8:	2b3f      	cmp	r3, #63	@ 0x3f
 801d4ba:	bf94      	ite	ls
 801d4bc:	4603      	movls	r3, r0
 801d4be:	2340      	movhi	r3, #64	@ 0x40
 801d4c0:	fb0c f303 	mul.w	r3, ip, r3
 801d4c4:	fa03 f308 	lsl.w	r3, r3, r8
 801d4c8:	441f      	add	r7, r3
 801d4ca:	e692      	b.n	801d1f2 <Argus_Dca_Evaluate+0x7ea>
 801d4cc:	f8ba 200e 	ldrh.w	r2, [sl, #14]
 801d4d0:	9b03      	ldr	r3, [sp, #12]
 801d4d2:	429a      	cmp	r2, r3
 801d4d4:	f0c0 8132 	bcc.w	801d73c <Argus_Dca_Evaluate+0xd34>
 801d4d8:	9b05      	ldr	r3, [sp, #20]
 801d4da:	2b01      	cmp	r3, #1
 801d4dc:	f000 8129 	beq.w	801d732 <Argus_Dca_Evaluate+0xd2a>
 801d4e0:	f89a 1013 	ldrb.w	r1, [sl, #19]
 801d4e4:	4541      	cmp	r1, r8
 801d4e6:	f080 8096 	bcs.w	801d616 <Argus_Dca_Evaluate+0xc0e>
 801d4ea:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 801d4ec:	8be0      	ldrh	r0, [r4, #30]
 801d4ee:	087f      	lsrs	r7, r7, #1
 801d4f0:	e67f      	b.n	801d1f2 <Argus_Dca_Evaluate+0x7ea>
 801d4f2:	9a02      	ldr	r2, [sp, #8]
 801d4f4:	f884 8034 	strb.w	r8, [r4, #52]	@ 0x34
 801d4f8:	1e51      	subs	r1, r2, #1
 801d4fa:	b24a      	sxtb	r2, r1
 801d4fc:	9204      	str	r2, [sp, #16]
 801d4fe:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 801d502:	e580      	b.n	801d006 <Argus_Dca_Evaluate+0x5fe>
 801d504:	9a06      	ldr	r2, [sp, #24]
 801d506:	9907      	ldr	r1, [sp, #28]
 801d508:	4252      	negs	r2, r2
 801d50a:	4291      	cmp	r1, r2
 801d50c:	da30      	bge.n	801d570 <Argus_Dca_Evaluate+0xb68>
 801d50e:	f1b8 0f02 	cmp.w	r8, #2
 801d512:	d81b      	bhi.n	801d54c <Argus_Dca_Evaluate+0xb44>
 801d514:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 801d518:	f897 10c8 	ldrb.w	r1, [r7, #200]	@ 0xc8
 801d51c:	4411      	add	r1, r2
 801d51e:	b249      	sxtb	r1, r1
 801d520:	4589      	cmp	r9, r1
 801d522:	da08      	bge.n	801d536 <Argus_Dca_Evaluate+0xb2e>
 801d524:	9902      	ldr	r1, [sp, #8]
 801d526:	f884 8034 	strb.w	r8, [r4, #52]	@ 0x34
 801d52a:	3101      	adds	r1, #1
 801d52c:	b249      	sxtb	r1, r1
 801d52e:	9104      	str	r1, [sp, #16]
 801d530:	e569      	b.n	801d006 <Argus_Dca_Evaluate+0x5fe>
 801d532:	2600      	movs	r6, #0
 801d534:	e576      	b.n	801d024 <Argus_Dca_Evaluate+0x61c>
 801d536:	f89a 1013 	ldrb.w	r1, [sl, #19]
 801d53a:	4588      	cmp	r8, r1
 801d53c:	d10c      	bne.n	801d558 <Argus_Dca_Evaluate+0xb50>
 801d53e:	9902      	ldr	r1, [sp, #8]
 801d540:	f884 8034 	strb.w	r8, [r4, #52]	@ 0x34
 801d544:	3901      	subs	r1, #1
 801d546:	b249      	sxtb	r1, r1
 801d548:	9104      	str	r1, [sp, #16]
 801d54a:	e55c      	b.n	801d006 <Argus_Dca_Evaluate+0x5fe>
 801d54c:	f89a 1013 	ldrb.w	r1, [sl, #19]
 801d550:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 801d554:	4588      	cmp	r8, r1
 801d556:	d004      	beq.n	801d562 <Argus_Dca_Evaluate+0xb5a>
 801d558:	4588      	cmp	r8, r1
 801d55a:	bf84      	itt	hi
 801d55c:	f108 31ff 	addhi.w	r1, r8, #4294967295
 801d560:	b2c9      	uxtbhi	r1, r1
 801d562:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
 801d566:	9902      	ldr	r1, [sp, #8]
 801d568:	3101      	adds	r1, #1
 801d56a:	b249      	sxtb	r1, r1
 801d56c:	9104      	str	r1, [sp, #16]
 801d56e:	e54a      	b.n	801d006 <Argus_Dca_Evaluate+0x5fe>
 801d570:	f1b8 0f02 	cmp.w	r8, #2
 801d574:	d849      	bhi.n	801d60a <Argus_Dca_Evaluate+0xc02>
 801d576:	eb07 0208 	add.w	r2, r7, r8
 801d57a:	9904      	ldr	r1, [sp, #16]
 801d57c:	f892 20c6 	ldrb.w	r2, [r2, #198]	@ 0xc6
 801d580:	4291      	cmp	r1, r2
 801d582:	da42      	bge.n	801d60a <Argus_Dca_Evaluate+0xc02>
 801d584:	f89a 2014 	ldrb.w	r2, [sl, #20]
 801d588:	4542      	cmp	r2, r8
 801d58a:	bf84      	itt	hi
 801d58c:	f108 0201 	addhi.w	r2, r8, #1
 801d590:	b2d2      	uxtbhi	r2, r2
 801d592:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
 801d596:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 801d59a:	e534      	b.n	801d006 <Argus_Dca_Evaluate+0x5fe>
 801d59c:	f6bf ac11 	bge.w	801cdc2 <Argus_Dca_Evaluate+0x3ba>
 801d5a0:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 801d5a2:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 801d5a4:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801d5a6:	1ac0      	subs	r0, r0, r3
 801d5a8:	fb06 f101 	mul.w	r1, r6, r1
 801d5ac:	4288      	cmp	r0, r1
 801d5ae:	f6bf ac08 	bge.w	801cdc2 <Argus_Dca_Evaluate+0x3ba>
 801d5b2:	f1b8 0f00 	cmp.w	r8, #0
 801d5b6:	f040 8082 	bne.w	801d6be <Argus_Dca_Evaluate+0xcb6>
 801d5ba:	f884 8034 	strb.w	r8, [r4, #52]	@ 0x34
 801d5be:	f042 0220 	orr.w	r2, r2, #32
 801d5c2:	f997 10c0 	ldrsb.w	r1, [r7, #192]	@ 0xc0
 801d5c6:	61aa      	str	r2, [r5, #24]
 801d5c8:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 801d5cc:	9104      	str	r1, [sp, #16]
 801d5ce:	e51a      	b.n	801d006 <Argus_Dca_Evaluate+0x5fe>
 801d5d0:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 801d5d4:	4543      	cmp	r3, r8
 801d5d6:	f67f af59 	bls.w	801d48c <Argus_Dca_Evaluate+0xa84>
 801d5da:	f8ba 200e 	ldrh.w	r2, [sl, #14]
 801d5de:	8be0      	ldrh	r0, [r4, #30]
 801d5e0:	007f      	lsls	r7, r7, #1
 801d5e2:	e606      	b.n	801d1f2 <Argus_Dca_Evaluate+0x7ea>
 801d5e4:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 801d5e6:	f8b7 60c4 	ldrh.w	r6, [r7, #196]	@ 0xc4
 801d5ea:	1ac9      	subs	r1, r1, r3
 801d5ec:	42b1      	cmp	r1, r6
 801d5ee:	f77f abdb 	ble.w	801cda8 <Argus_Dca_Evaluate+0x3a0>
 801d5f2:	2100      	movs	r1, #0
 801d5f4:	f042 0220 	orr.w	r2, r2, #32
 801d5f8:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
 801d5fc:	f997 10c0 	ldrsb.w	r1, [r7, #192]	@ 0xc0
 801d600:	61aa      	str	r2, [r5, #24]
 801d602:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 801d606:	9104      	str	r1, [sp, #16]
 801d608:	e4fd      	b.n	801d006 <Argus_Dca_Evaluate+0x5fe>
 801d60a:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 801d60e:	f884 8034 	strb.w	r8, [r4, #52]	@ 0x34
 801d612:	e4f8      	b.n	801d006 <Argus_Dca_Evaluate+0x5fe>
 801d614:	461f      	mov	r7, r3
 801d616:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 801d618:	8be0      	ldrh	r0, [r4, #30]
 801d61a:	e5ea      	b.n	801d1f2 <Argus_Dca_Evaluate+0x7ea>
 801d61c:	2200      	movs	r2, #0
 801d61e:	e682      	b.n	801d326 <Argus_Dca_Evaluate+0x91e>
 801d620:	f8ba 100c 	ldrh.w	r1, [sl, #12]
 801d624:	e688      	b.n	801d338 <Argus_Dca_Evaluate+0x930>
 801d626:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801d62a:	461a      	mov	r2, r3
 801d62c:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 801d630:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
 801d634:	e69d      	b.n	801d372 <Argus_Dca_Evaluate+0x96a>
 801d636:	0098      	lsls	r0, r3, #2
 801d638:	fa00 f00b 	lsl.w	r0, r0, fp
 801d63c:	4287      	cmp	r7, r0
 801d63e:	f0c0 80a5 	bcc.w	801d78c <Argus_Dca_Evaluate+0xd84>
 801d642:	f04f 0c04 	mov.w	ip, #4
 801d646:	fb0c f201 	mul.w	r2, ip, r1
 801d64a:	fa02 f00b 	lsl.w	r0, r2, fp
 801d64e:	4287      	cmp	r7, r0
 801d650:	d918      	bls.n	801d684 <Argus_Dca_Evaluate+0xc7c>
 801d652:	fbb7 f7f2 	udiv	r7, r7, r2
 801d656:	fab7 f387 	clz	r3, r7
 801d65a:	f1c3 021e 	rsb	r2, r3, #30
 801d65e:	40d7      	lsrs	r7, r2
 801d660:	f1c3 031f 	rsb	r3, r3, #31
 801d664:	2f03      	cmp	r7, #3
 801d666:	bf08      	it	eq
 801d668:	3301      	addeq	r3, #1
 801d66a:	455b      	cmp	r3, fp
 801d66c:	bf38      	it	cc
 801d66e:	465b      	movcc	r3, fp
 801d670:	42ab      	cmp	r3, r5
 801d672:	bf28      	it	cs
 801d674:	462b      	movcs	r3, r5
 801d676:	e9cd 1800 	strd	r1, r8, [sp]
 801d67a:	fa5f fb83 	uxtb.w	fp, r3
 801d67e:	f89a 1013 	ldrb.w	r1, [sl, #19]
 801d682:	e612      	b.n	801d2aa <Argus_Dca_Evaluate+0x8a2>
 801d684:	fa0c fc0b 	lsl.w	ip, ip, fp
 801d688:	eb07 025c 	add.w	r2, r7, ip, lsr #1
 801d68c:	fbb2 f2fc 	udiv	r2, r2, ip
 801d690:	4293      	cmp	r3, r2
 801d692:	bf38      	it	cc
 801d694:	4613      	movcc	r3, r2
 801d696:	428b      	cmp	r3, r1
 801d698:	bf28      	it	cs
 801d69a:	460b      	movcs	r3, r1
 801d69c:	b29a      	uxth	r2, r3
 801d69e:	f022 013f 	bic.w	r1, r2, #63	@ 0x3f
 801d6a2:	f894 0020 	ldrb.w	r0, [r4, #32]
 801d6a6:	b1a1      	cbz	r1, 801d6d2 <Argus_Dca_Evaluate+0xcca>
 801d6a8:	f102 0320 	add.w	r3, r2, #32
 801d6ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 801d6b0:	b29b      	uxth	r3, r3
 801d6b2:	9300      	str	r3, [sp, #0]
 801d6b4:	f89a 1013 	ldrb.w	r1, [sl, #19]
 801d6b8:	f8cd 8004 	str.w	r8, [sp, #4]
 801d6bc:	e5f5      	b.n	801d2aa <Argus_Dca_Evaluate+0x8a2>
 801d6be:	f89a 2013 	ldrb.w	r2, [sl, #19]
 801d6c2:	4542      	cmp	r2, r8
 801d6c4:	bf3c      	itt	cc
 801d6c6:	f108 32ff 	addcc.w	r2, r8, #4294967295
 801d6ca:	b2d2      	uxtbcc	r2, r2
 801d6cc:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
 801d6d0:	e493      	b.n	801cffa <Argus_Dca_Evaluate+0x5f2>
 801d6d2:	0281      	lsls	r1, r0, #10
 801d6d4:	2800      	cmp	r0, #0
 801d6d6:	d053      	beq.n	801d780 <Argus_Dca_Evaluate+0xd78>
 801d6d8:	fb00 f303 	mul.w	r3, r0, r3
 801d6dc:	f3c3 1240 	ubfx	r2, r3, #5, #1
 801d6e0:	eb02 1393 	add.w	r3, r2, r3, lsr #6
 801d6e4:	2b01      	cmp	r3, #1
 801d6e6:	bf38      	it	cc
 801d6e8:	2301      	movcc	r3, #1
 801d6ea:	4618      	mov	r0, r3
 801d6ec:	f7fd fb58 	bl	801ada0 <fp_div16.part.0>
 801d6f0:	f894 5034 	ldrb.w	r5, [r4, #52]	@ 0x34
 801d6f4:	b283      	uxth	r3, r0
 801d6f6:	9300      	str	r3, [sp, #0]
 801d6f8:	e7dc      	b.n	801d6b4 <Argus_Dca_Evaluate+0xcac>
 801d6fa:	9a00      	ldr	r2, [sp, #0]
 801d6fc:	fa00 f00b 	lsl.w	r0, r0, fp
 801d700:	eb07 0350 	add.w	r3, r7, r0, lsr #1
 801d704:	fbb3 f3f0 	udiv	r3, r3, r0
 801d708:	4293      	cmp	r3, r2
 801d70a:	bf38      	it	cc
 801d70c:	4613      	movcc	r3, r2
 801d70e:	428b      	cmp	r3, r1
 801d710:	bf28      	it	cs
 801d712:	460b      	movcs	r3, r1
 801d714:	b29a      	uxth	r2, r3
 801d716:	f022 013f 	bic.w	r1, r2, #63	@ 0x3f
 801d71a:	f894 0020 	ldrb.w	r0, [r4, #32]
 801d71e:	b1d1      	cbz	r1, 801d756 <Argus_Dca_Evaluate+0xd4e>
 801d720:	f102 0320 	add.w	r3, r2, #32
 801d724:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 801d728:	b29b      	uxth	r3, r3
 801d72a:	f89a 1013 	ldrb.w	r1, [sl, #19]
 801d72e:	9300      	str	r3, [sp, #0]
 801d730:	e5bb      	b.n	801d2aa <Argus_Dca_Evaluate+0x8a2>
 801d732:	f89a 300b 	ldrb.w	r3, [sl, #11]
 801d736:	2b01      	cmp	r3, #1
 801d738:	f43f aed2 	beq.w	801d4e0 <Argus_Dca_Evaluate+0xad8>
 801d73c:	9b03      	ldr	r3, [sp, #12]
 801d73e:	8be0      	ldrh	r0, [r4, #30]
 801d740:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 801d742:	2b40      	cmp	r3, #64	@ 0x40
 801d744:	bf94      	ite	ls
 801d746:	4603      	movls	r3, r0
 801d748:	2340      	movhi	r3, #64	@ 0x40
 801d74a:	fb0c f303 	mul.w	r3, ip, r3
 801d74e:	fa03 f308 	lsl.w	r3, r3, r8
 801d752:	1aff      	subs	r7, r7, r3
 801d754:	e54d      	b.n	801d1f2 <Argus_Dca_Evaluate+0x7ea>
 801d756:	0281      	lsls	r1, r0, #10
 801d758:	b1a8      	cbz	r0, 801d786 <Argus_Dca_Evaluate+0xd7e>
 801d75a:	fb00 f303 	mul.w	r3, r0, r3
 801d75e:	f3c3 1240 	ubfx	r2, r3, #5, #1
 801d762:	eb02 1393 	add.w	r3, r2, r3, lsr #6
 801d766:	2b01      	cmp	r3, #1
 801d768:	bf38      	it	cc
 801d76a:	2301      	movcc	r3, #1
 801d76c:	4618      	mov	r0, r3
 801d76e:	f7fd fb17 	bl	801ada0 <fp_div16.part.0>
 801d772:	f894 5034 	ldrb.w	r5, [r4, #52]	@ 0x34
 801d776:	f89a 1013 	ldrb.w	r1, [sl, #19]
 801d77a:	b283      	uxth	r3, r0
 801d77c:	9300      	str	r3, [sp, #0]
 801d77e:	e594      	b.n	801d2aa <Argus_Dca_Evaluate+0x8a2>
 801d780:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801d784:	e7b6      	b.n	801d6f4 <Argus_Dca_Evaluate+0xcec>
 801d786:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801d78a:	e7f4      	b.n	801d776 <Argus_Dca_Evaluate+0xd6e>
 801d78c:	428a      	cmp	r2, r1
 801d78e:	4613      	mov	r3, r2
 801d790:	bf28      	it	cs
 801d792:	460b      	movcs	r3, r1
 801d794:	9300      	str	r3, [sp, #0]
 801d796:	2004      	movs	r0, #4
 801d798:	e565      	b.n	801d266 <Argus_Dca_Evaluate+0x85e>
 801d79a:	bf00      	nop

0801d79c <GetStatusCallback>:
 801d79c:	6008      	str	r0, [r1, #0]
 801d79e:	4770      	bx	lr

0801d7a0 <FinishDetuneClock>:
 801d7a0:	2800      	cmp	r0, #0
 801d7a2:	db06      	blt.n	801d7b2 <FinishDetuneClock+0x12>
 801d7a4:	f8d1 3104 	ldr.w	r3, [r1, #260]	@ 0x104
 801d7a8:	b113      	cbz	r3, 801d7b0 <FinishDetuneClock+0x10>
 801d7aa:	f8d1 1108 	ldr.w	r1, [r1, #264]	@ 0x108
 801d7ae:	4718      	bx	r3
 801d7b0:	4770      	bx	lr
 801d7b2:	b410      	push	{r4}
 801d7b4:	f891 30fd 	ldrb.w	r3, [r1, #253]	@ 0xfd
 801d7b8:	6f8c      	ldr	r4, [r1, #120]	@ 0x78
 801d7ba:	4a09      	ldr	r2, [pc, #36]	@ (801d7e0 <FinishDetuneClock+0x40>)
 801d7bc:	f043 0302 	orr.w	r3, r3, #2
 801d7c0:	f881 30fd 	strb.w	r3, [r1, #253]	@ 0xfd
 801d7c4:	f8d1 3104 	ldr.w	r3, [r1, #260]	@ 0x104
 801d7c8:	4322      	orrs	r2, r4
 801d7ca:	678a      	str	r2, [r1, #120]	@ 0x78
 801d7cc:	b123      	cbz	r3, 801d7d8 <FinishDetuneClock+0x38>
 801d7ce:	f8d1 1108 	ldr.w	r1, [r1, #264]	@ 0x108
 801d7d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d7d6:	4718      	bx	r3
 801d7d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d7dc:	4770      	bx	lr
 801d7de:	bf00      	nop
 801d7e0:	0003dffe 	.word	0x0003dffe

0801d7e4 <ChargePumpRamp>:
 801d7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d7e8:	1e06      	subs	r6, r0, #0
 801d7ea:	b084      	sub	sp, #16
 801d7ec:	460c      	mov	r4, r1
 801d7ee:	db07      	blt.n	801d800 <ChargePumpRamp+0x1c>
 801d7f0:	6f8f      	ldr	r7, [r1, #120]	@ 0x78
 801d7f2:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801d7f4:	f007 7700 	and.w	r7, r7, #33554432	@ 0x2000000
 801d7f8:	f003 0320 	and.w	r3, r3, #32
 801d7fc:	433b      	orrs	r3, r7
 801d7fe:	d105      	bne.n	801d80c <ChargePumpRamp+0x28>
 801d800:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 801d804:	b004      	add	sp, #16
 801d806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d80a:	4718      	bx	r3
 801d80c:	f891 80fb 	ldrb.w	r8, [r1, #251]	@ 0xfb
 801d810:	f8d1 311c 	ldr.w	r3, [r1, #284]	@ 0x11c
 801d814:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801d818:	f1b8 0f09 	cmp.w	r8, #9
 801d81c:	a903      	add	r1, sp, #12
 801d81e:	a802      	add	r0, sp, #8
 801d820:	bf94      	ite	ls
 801d822:	8bdd      	ldrhls	r5, [r3, #30]
 801d824:	8c1d      	ldrhhi	r5, [r3, #32]
 801d826:	f7e9 fa43 	bl	8006cb0 <Timer_GetCounterValue>
 801d82a:	f8d4 2118 	ldr.w	r2, [r4, #280]	@ 0x118
 801d82e:	f8df c138 	ldr.w	ip, [pc, #312]	@ 801d968 <ChargePumpRamp+0x184>
 801d832:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
 801d836:	18ab      	adds	r3, r5, r2
 801d838:	bf2c      	ite	cs
 801d83a:	2101      	movcs	r1, #1
 801d83c:	2100      	movcc	r1, #0
 801d83e:	4563      	cmp	r3, ip
 801d840:	e9dd 5e02 	ldrd	r5, lr, [sp, #8]
 801d844:	d94b      	bls.n	801d8de <ChargePumpRamp+0xfa>
 801d846:	f100 0c01 	add.w	ip, r0, #1
 801d84a:	4560      	cmp	r0, ip
 801d84c:	f5a3 2374 	sub.w	r3, r3, #999424	@ 0xf4000
 801d850:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 801d854:	bf2c      	ite	cs
 801d856:	2100      	movcs	r1, #0
 801d858:	2101      	movcc	r1, #1
 801d85a:	2900      	cmp	r1, #0
 801d85c:	d043      	beq.n	801d8e6 <ChargePumpRamp+0x102>
 801d85e:	42a8      	cmp	r0, r5
 801d860:	d06d      	beq.n	801d93e <ChargePumpRamp+0x15a>
 801d862:	bf34      	ite	cc
 801d864:	2201      	movcc	r2, #1
 801d866:	2200      	movcs	r2, #0
 801d868:	b12a      	cbz	r2, 801d876 <ChargePumpRamp+0x92>
 801d86a:	45ac      	cmp	ip, r5
 801d86c:	d05d      	beq.n	801d92a <ChargePumpRamp+0x146>
 801d86e:	bf34      	ite	cc
 801d870:	2301      	movcc	r3, #1
 801d872:	2300      	movcs	r3, #0
 801d874:	b30b      	cbz	r3, 801d8ba <ChargePumpRamp+0xd6>
 801d876:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	@ 0xfa
 801d87a:	f894 10fa 	ldrb.w	r1, [r4, #250]	@ 0xfa
 801d87e:	ba5b      	rev16	r3, r3
 801d880:	f3c3 1383 	ubfx	r3, r3, #6, #4
 801d884:	b3b7      	cbz	r7, 801d8f4 <ChargePumpRamp+0x110>
 801d886:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801d888:	f042 0220 	orr.w	r2, r2, #32
 801d88c:	67a2      	str	r2, [r4, #120]	@ 0x78
 801d88e:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801d890:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 801d894:	2700      	movs	r7, #0
 801d896:	67a2      	str	r2, [r4, #120]	@ 0x78
 801d898:	f3c3 0297 	ubfx	r2, r3, #2, #24
 801d89c:	f021 0103 	bic.w	r1, r1, #3
 801d8a0:	4311      	orrs	r1, r2
 801d8a2:	ea47 1383 	orr.w	r3, r7, r3, lsl #6
 801d8a6:	f884 10fa 	strb.w	r1, [r4, #250]	@ 0xfa
 801d8aa:	f884 30fb 	strb.w	r3, [r4, #251]	@ 0xfb
 801d8ae:	f504 718c 	add.w	r1, r4, #280	@ 0x118
 801d8b2:	f504 708a 	add.w	r0, r4, #276	@ 0x114
 801d8b6:	f7e9 f9fb 	bl	8006cb0 <Timer_GetCounterValue>
 801d8ba:	4621      	mov	r1, r4
 801d8bc:	230a      	movs	r3, #10
 801d8be:	f801 3ff8 	strb.w	r3, [r1, #248]!
 801d8c2:	4b28      	ldr	r3, [pc, #160]	@ (801d964 <ChargePumpRamp+0x180>)
 801d8c4:	2200      	movs	r2, #0
 801d8c6:	e9cd 3400 	strd	r3, r4, [sp]
 801d8ca:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801d8ce:	2305      	movs	r3, #5
 801d8d0:	f00a fccc 	bl	802826c <ADS_Transfer>
 801d8d4:	2800      	cmp	r0, #0
 801d8d6:	db93      	blt.n	801d800 <ChargePumpRamp+0x1c>
 801d8d8:	b004      	add	sp, #16
 801d8da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d8de:	f081 0101 	eor.w	r1, r1, #1
 801d8e2:	4684      	mov	ip, r0
 801d8e4:	e7b9      	b.n	801d85a <ChargePumpRamp+0x76>
 801d8e6:	42a8      	cmp	r0, r5
 801d8e8:	d026      	beq.n	801d938 <ChargePumpRamp+0x154>
 801d8ea:	d3e6      	bcc.n	801d8ba <ChargePumpRamp+0xd6>
 801d8ec:	45ac      	cmp	ip, r5
 801d8ee:	d02b      	beq.n	801d948 <ChargePumpRamp+0x164>
 801d8f0:	d2e3      	bcs.n	801d8ba <ChargePumpRamp+0xd6>
 801d8f2:	e7c0      	b.n	801d876 <ChargePumpRamp+0x92>
 801d8f4:	f8b4 204d 	ldrh.w	r2, [r4, #77]	@ 0x4d
 801d8f8:	ba52      	rev16	r2, r2
 801d8fa:	f3c2 1283 	ubfx	r2, r2, #6, #4
 801d8fe:	4293      	cmp	r3, r2
 801d900:	d004      	beq.n	801d90c <ChargePumpRamp+0x128>
 801d902:	f1b8 0f00 	cmp.w	r8, #0
 801d906:	bf08      	it	eq
 801d908:	4613      	moveq	r3, r2
 801d90a:	e7c5      	b.n	801d898 <ChargePumpRamp+0xb4>
 801d90c:	f894 204e 	ldrb.w	r2, [r4, #78]	@ 0x4e
 801d910:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801d914:	4590      	cmp	r8, r2
 801d916:	d020      	beq.n	801d95a <ChargePumpRamp+0x176>
 801d918:	db19      	blt.n	801d94e <ChargePumpRamp+0x16a>
 801d91a:	b10a      	cbz	r2, 801d920 <ChargePumpRamp+0x13c>
 801d91c:	f108 37ff 	add.w	r7, r8, #4294967295
 801d920:	42ba      	cmp	r2, r7
 801d922:	bfb8      	it	lt
 801d924:	463a      	movlt	r2, r7
 801d926:	b257      	sxtb	r7, r2
 801d928:	e7b6      	b.n	801d898 <ChargePumpRamp+0xb4>
 801d92a:	4573      	cmp	r3, lr
 801d92c:	bf8c      	ite	hi
 801d92e:	2300      	movhi	r3, #0
 801d930:	2301      	movls	r3, #1
 801d932:	2b00      	cmp	r3, #0
 801d934:	d0c1      	beq.n	801d8ba <ChargePumpRamp+0xd6>
 801d936:	e79e      	b.n	801d876 <ChargePumpRamp+0x92>
 801d938:	4572      	cmp	r2, lr
 801d93a:	d9be      	bls.n	801d8ba <ChargePumpRamp+0xd6>
 801d93c:	e7d6      	b.n	801d8ec <ChargePumpRamp+0x108>
 801d93e:	4572      	cmp	r2, lr
 801d940:	bf8c      	ite	hi
 801d942:	2200      	movhi	r2, #0
 801d944:	2201      	movls	r2, #1
 801d946:	e78f      	b.n	801d868 <ChargePumpRamp+0x84>
 801d948:	4573      	cmp	r3, lr
 801d94a:	d994      	bls.n	801d876 <ChargePumpRamp+0x92>
 801d94c:	e7b5      	b.n	801d8ba <ChargePumpRamp+0xd6>
 801d94e:	f108 0701 	add.w	r7, r8, #1
 801d952:	42ba      	cmp	r2, r7
 801d954:	bfa8      	it	ge
 801d956:	463a      	movge	r2, r7
 801d958:	e7e5      	b.n	801d926 <ChargePumpRamp+0x142>
 801d95a:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 801d95e:	4630      	mov	r0, r6
 801d960:	e750      	b.n	801d804 <ChargePumpRamp+0x20>
 801d962:	bf00      	nop
 801d964:	0801d7e5 	.word	0x0801d7e5
 801d968:	000f423f 	.word	0x000f423f

0801d96c <FinishIntegration>:
 801d96c:	1d83      	adds	r3, r0, #6
 801d96e:	b510      	push	{r4, lr}
 801d970:	4614      	mov	r4, r2
 801d972:	d10d      	bne.n	801d990 <FinishIntegration+0x24>
 801d974:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801d976:	4b1f      	ldr	r3, [pc, #124]	@ (801d9f4 <FinishIntegration+0x88>)
 801d978:	4313      	orrs	r3, r2
 801d97a:	67a3      	str	r3, [r4, #120]	@ 0x78
 801d97c:	f894 20fd 	ldrb.w	r2, [r4, #253]	@ 0xfd
 801d980:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801d982:	f042 0202 	orr.w	r2, r2, #2
 801d986:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801d98a:	f884 20fd 	strb.w	r2, [r4, #253]	@ 0xfd
 801d98e:	67a3      	str	r3, [r4, #120]	@ 0x78
 801d990:	22ab      	movs	r2, #171	@ 0xab
 801d992:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 801d996:	f884 2088 	strb.w	r2, [r4, #136]	@ 0x88
 801d99a:	0c0a      	lsrs	r2, r1, #16
 801d99c:	ba49      	rev16	r1, r1
 801d99e:	f884 2089 	strb.w	r2, [r4, #137]	@ 0x89
 801d9a2:	f8a4 108a 	strh.w	r1, [r4, #138]	@ 0x8a
 801d9a6:	b12b      	cbz	r3, 801d9b4 <FinishIntegration+0x48>
 801d9a8:	2200      	movs	r2, #0
 801d9aa:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 801d9ae:	f8c4 2104 	str.w	r2, [r4, #260]	@ 0x104
 801d9b2:	4798      	blx	r3
 801d9b4:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
 801d9b8:	f003 0382 	and.w	r3, r3, #130	@ 0x82
 801d9bc:	2b02      	cmp	r3, #2
 801d9be:	d000      	beq.n	801d9c2 <FinishIntegration+0x56>
 801d9c0:	bd10      	pop	{r4, pc}
 801d9c2:	f894 3064 	ldrb.w	r3, [r4, #100]	@ 0x64
 801d9c6:	f894 10fd 	ldrb.w	r1, [r4, #253]	@ 0xfd
 801d9ca:	f003 0203 	and.w	r2, r3, #3
 801d9ce:	3201      	adds	r2, #1
 801d9d0:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 801d9d4:	f023 0303 	bic.w	r3, r3, #3
 801d9d8:	f002 0203 	and.w	r2, r2, #3
 801d9dc:	4313      	orrs	r3, r2
 801d9de:	f021 010c 	bic.w	r1, r1, #12
 801d9e2:	f00c 020c 	and.w	r2, ip, #12
 801d9e6:	430a      	orrs	r2, r1
 801d9e8:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 801d9ec:	f884 20fd 	strb.w	r2, [r4, #253]	@ 0xfd
 801d9f0:	bd10      	pop	{r4, pc}
 801d9f2:	bf00      	nop
 801d9f4:	0003dffe 	.word	0x0003dffe

0801d9f8 <FinishStartIntegration>:
 801d9f8:	b508      	push	{r3, lr}
 801d9fa:	460b      	mov	r3, r1
 801d9fc:	1e01      	subs	r1, r0, #0
 801d9fe:	db10      	blt.n	801da22 <FinishStartIntegration+0x2a>
 801da00:	f893 108a 	ldrb.w	r1, [r3, #138]	@ 0x8a
 801da04:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 801da08:	0648      	lsls	r0, r1, #25
 801da0a:	bf4c      	ite	mi
 801da0c:	f042 0280 	orrmi.w	r2, r2, #128	@ 0x80
 801da10:	f022 0280 	bicpl.w	r2, r2, #128	@ 0x80
 801da14:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 801da18:	068a      	lsls	r2, r1, #26
 801da1a:	bf48      	it	mi
 801da1c:	2000      	movmi	r0, #0
 801da1e:	d510      	bpl.n	801da42 <FinishStartIntegration+0x4a>
 801da20:	bd08      	pop	{r3, pc}
 801da22:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 801da24:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 801da28:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 801da2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801da30:	6798      	str	r0, [r3, #120]	@ 0x78
 801da32:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 801da36:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 801da3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801da3e:	f00a ba77 	b.w	8027f30 <ADS_Abort>
 801da42:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 801da44:	4a0a      	ldr	r2, [pc, #40]	@ (801da70 <FinishStartIntegration+0x78>)
 801da46:	f893 10fd 	ldrb.w	r1, [r3, #253]	@ 0xfd
 801da4a:	4302      	orrs	r2, r0
 801da4c:	679a      	str	r2, [r3, #120]	@ 0x78
 801da4e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 801da50:	f041 0102 	orr.w	r1, r1, #2
 801da54:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 801da58:	f883 10fd 	strb.w	r1, [r3, #253]	@ 0xfd
 801da5c:	679a      	str	r2, [r3, #120]	@ 0x78
 801da5e:	f06f 0171 	mvn.w	r1, #113	@ 0x71
 801da62:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 801da66:	f00a fa63 	bl	8027f30 <ADS_Abort>
 801da6a:	f06f 0071 	mvn.w	r0, #113	@ 0x71
 801da6e:	bd08      	pop	{r3, pc}
 801da70:	0003dffe 	.word	0x0003dffe

0801da74 <DisableClock2>:
 801da74:	b510      	push	{r4, lr}
 801da76:	2800      	cmp	r0, #0
 801da78:	b082      	sub	sp, #8
 801da7a:	460c      	mov	r4, r1
 801da7c:	db17      	blt.n	801daae <DisableClock2+0x3a>
 801da7e:	f891 3058 	ldrb.w	r3, [r1, #88]	@ 0x58
 801da82:	4a13      	ldr	r2, [pc, #76]	@ (801dad0 <DisableClock2+0x5c>)
 801da84:	f023 0311 	bic.w	r3, r3, #17
 801da88:	2110      	movs	r1, #16
 801da8a:	f884 1088 	strb.w	r1, [r4, #136]	@ 0x88
 801da8e:	f884 3089 	strb.w	r3, [r4, #137]	@ 0x89
 801da92:	f104 0188 	add.w	r1, r4, #136	@ 0x88
 801da96:	e9cd 2400 	strd	r2, r4, [sp]
 801da9a:	2302      	movs	r3, #2
 801da9c:	2200      	movs	r2, #0
 801da9e:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801daa2:	f00a fbe3 	bl	802826c <ADS_Transfer>
 801daa6:	2800      	cmp	r0, #0
 801daa8:	db01      	blt.n	801daae <DisableClock2+0x3a>
 801daaa:	b002      	add	sp, #8
 801daac:	bd10      	pop	{r4, pc}
 801daae:	6823      	ldr	r3, [r4, #0]
 801dab0:	3371      	adds	r3, #113	@ 0x71
 801dab2:	bf1c      	itt	ne
 801dab4:	f06f 0371 	mvnne.w	r3, #113	@ 0x71
 801dab8:	6023      	strne	r3, [r4, #0]
 801daba:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 801dabe:	2b00      	cmp	r3, #0
 801dac0:	d0f3      	beq.n	801daaa <DisableClock2+0x36>
 801dac2:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 801dac6:	b002      	add	sp, #8
 801dac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dacc:	4718      	bx	r3
 801dace:	bf00      	nop
 801dad0:	0801db55 	.word	0x0801db55

0801dad4 <WriteBlockEnable2>:
 801dad4:	b510      	push	{r4, lr}
 801dad6:	2800      	cmp	r0, #0
 801dad8:	b082      	sub	sp, #8
 801dada:	460c      	mov	r4, r1
 801dadc:	db27      	blt.n	801db2e <WriteBlockEnable2+0x5a>
 801dade:	f891 3089 	ldrb.w	r3, [r1, #137]	@ 0x89
 801dae2:	06da      	lsls	r2, r3, #27
 801dae4:	d41c      	bmi.n	801db20 <WriteBlockEnable2+0x4c>
 801dae6:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 801daea:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 801daee:	4918      	ldr	r1, [pc, #96]	@ (801db50 <WriteBlockEnable2+0x7c>)
 801daf0:	f894 0058 	ldrb.w	r0, [r4, #88]	@ 0x58
 801daf4:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 801daf8:	f104 0288 	add.w	r2, r4, #136	@ 0x88
 801dafc:	f04f 0c10 	mov.w	ip, #16
 801db00:	f884 0089 	strb.w	r0, [r4, #137]	@ 0x89
 801db04:	f884 c088 	strb.w	ip, [r4, #136]	@ 0x88
 801db08:	2302      	movs	r3, #2
 801db0a:	e9cd 1400 	strd	r1, r4, [sp]
 801db0e:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801db12:	4611      	mov	r1, r2
 801db14:	f00a fbaa 	bl	802826c <ADS_Transfer>
 801db18:	2800      	cmp	r0, #0
 801db1a:	db08      	blt.n	801db2e <WriteBlockEnable2+0x5a>
 801db1c:	b002      	add	sp, #8
 801db1e:	bd10      	pop	{r4, pc}
 801db20:	07db      	lsls	r3, r3, #31
 801db22:	d4e0      	bmi.n	801dae6 <WriteBlockEnable2+0x12>
 801db24:	f891 30fd 	ldrb.w	r3, [r1, #253]	@ 0xfd
 801db28:	f043 0310 	orr.w	r3, r3, #16
 801db2c:	e7df      	b.n	801daee <WriteBlockEnable2+0x1a>
 801db2e:	6823      	ldr	r3, [r4, #0]
 801db30:	3371      	adds	r3, #113	@ 0x71
 801db32:	bf1c      	itt	ne
 801db34:	f06f 0371 	mvnne.w	r3, #113	@ 0x71
 801db38:	6023      	strne	r3, [r4, #0]
 801db3a:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 801db3e:	2b00      	cmp	r3, #0
 801db40:	d0ec      	beq.n	801db1c <WriteBlockEnable2+0x48>
 801db42:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 801db46:	b002      	add	sp, #8
 801db48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801db4c:	4718      	bx	r3
 801db4e:	bf00      	nop
 801db50:	0801ebed 	.word	0x0801ebed

0801db54 <ResetInternalClockDivider>:
 801db54:	b510      	push	{r4, lr}
 801db56:	2800      	cmp	r0, #0
 801db58:	b082      	sub	sp, #8
 801db5a:	460c      	mov	r4, r1
 801db5c:	db20      	blt.n	801dba0 <ResetInternalClockDivider+0x4c>
 801db5e:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801db60:	f891 205b 	ldrb.w	r2, [r1, #91]	@ 0x5b
 801db64:	f891 005a 	ldrb.w	r0, [r1, #90]	@ 0x5a
 801db68:	4915      	ldr	r1, [pc, #84]	@ (801dbc0 <ResetInternalClockDivider+0x6c>)
 801db6a:	f884 0089 	strb.w	r0, [r4, #137]	@ 0x89
 801db6e:	f022 0218 	bic.w	r2, r2, #24
 801db72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801db76:	f04f 0c12 	mov.w	ip, #18
 801db7a:	f884 208a 	strb.w	r2, [r4, #138]	@ 0x8a
 801db7e:	67a3      	str	r3, [r4, #120]	@ 0x78
 801db80:	f884 c088 	strb.w	ip, [r4, #136]	@ 0x88
 801db84:	2303      	movs	r3, #3
 801db86:	e9cd 1400 	strd	r1, r4, [sp]
 801db8a:	2200      	movs	r2, #0
 801db8c:	f104 0188 	add.w	r1, r4, #136	@ 0x88
 801db90:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801db94:	f00a fb6a 	bl	802826c <ADS_Transfer>
 801db98:	2800      	cmp	r0, #0
 801db9a:	db01      	blt.n	801dba0 <ResetInternalClockDivider+0x4c>
 801db9c:	b002      	add	sp, #8
 801db9e:	bd10      	pop	{r4, pc}
 801dba0:	6823      	ldr	r3, [r4, #0]
 801dba2:	3371      	adds	r3, #113	@ 0x71
 801dba4:	bf1c      	itt	ne
 801dba6:	f06f 0371 	mvnne.w	r3, #113	@ 0x71
 801dbaa:	6023      	strne	r3, [r4, #0]
 801dbac:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 801dbb0:	2b00      	cmp	r3, #0
 801dbb2:	d0f3      	beq.n	801db9c <ResetInternalClockDivider+0x48>
 801dbb4:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 801dbb8:	b002      	add	sp, #8
 801dbba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dbbe:	4718      	bx	r3
 801dbc0:	0801e419 	.word	0x0801e419

0801dbc4 <WriteRegisterConfiguration>:
 801dbc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dbc6:	2800      	cmp	r0, #0
 801dbc8:	b083      	sub	sp, #12
 801dbca:	460c      	mov	r4, r1
 801dbcc:	f2c0 82dc 	blt.w	801e188 <WriteRegisterConfiguration+0x5c4>
 801dbd0:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801dbd2:	f413 7300 	ands.w	r3, r3, #512	@ 0x200
 801dbd6:	f040 824e 	bne.w	801e076 <WriteRegisterConfiguration+0x4b2>
 801dbda:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801dbdc:	4d75      	ldr	r5, [pc, #468]	@ (801ddb4 <WriteRegisterConfiguration+0x1f0>)
 801dbde:	0796      	lsls	r6, r2, #30
 801dbe0:	f04f 0188 	mov.w	r1, #136	@ 0x88
 801dbe4:	f04f 0c09 	mov.w	ip, #9
 801dbe8:	f100 825b 	bmi.w	801e0a2 <WriteRegisterConfiguration+0x4de>
 801dbec:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801dbee:	0691      	lsls	r1, r2, #26
 801dbf0:	f100 826d 	bmi.w	801e0ce <WriteRegisterConfiguration+0x50a>
 801dbf4:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801dbf6:	0652      	lsls	r2, r2, #25
 801dbf8:	f100 8200 	bmi.w	801dffc <WriteRegisterConfiguration+0x438>
 801dbfc:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801dbfe:	0617      	lsls	r7, r2, #24
 801dc00:	f100 820d 	bmi.w	801e01e <WriteRegisterConfiguration+0x45a>
 801dc04:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801dc06:	0456      	lsls	r6, r2, #17
 801dc08:	f100 8221 	bmi.w	801e04e <WriteRegisterConfiguration+0x48a>
 801dc0c:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801dc0e:	0411      	lsls	r1, r2, #16
 801dc10:	d50b      	bpl.n	801dc2a <WriteRegisterConfiguration+0x66>
 801dc12:	18e2      	adds	r2, r4, r3
 801dc14:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 801dc16:	f8c2 1088 	str.w	r1, [r2, #136]	@ 0x88
 801dc1a:	211e      	movs	r1, #30
 801dc1c:	f882 1088 	strb.w	r1, [r2, #136]	@ 0x88
 801dc20:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801dc22:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801dc26:	3304      	adds	r3, #4
 801dc28:	67a2      	str	r2, [r4, #120]	@ 0x78
 801dc2a:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801dc2c:	03d2      	lsls	r2, r2, #15
 801dc2e:	d50b      	bpl.n	801dc48 <WriteRegisterConfiguration+0x84>
 801dc30:	18e2      	adds	r2, r4, r3
 801dc32:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801dc34:	f8c2 1088 	str.w	r1, [r2, #136]	@ 0x88
 801dc38:	2120      	movs	r1, #32
 801dc3a:	f882 1088 	strb.w	r1, [r2, #136]	@ 0x88
 801dc3e:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801dc40:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 801dc44:	3304      	adds	r3, #4
 801dc46:	67a2      	str	r2, [r4, #120]	@ 0x78
 801dc48:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801dc4a:	0397      	lsls	r7, r2, #14
 801dc4c:	d50b      	bpl.n	801dc66 <WriteRegisterConfiguration+0xa2>
 801dc4e:	18e2      	adds	r2, r4, r3
 801dc50:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801dc52:	f8c2 1088 	str.w	r1, [r2, #136]	@ 0x88
 801dc56:	2122      	movs	r1, #34	@ 0x22
 801dc58:	f882 1088 	strb.w	r1, [r2, #136]	@ 0x88
 801dc5c:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801dc5e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 801dc62:	3304      	adds	r3, #4
 801dc64:	67a2      	str	r2, [r4, #120]	@ 0x78
 801dc66:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801dc68:	0756      	lsls	r6, r2, #29
 801dc6a:	f140 8094 	bpl.w	801dd96 <WriteRegisterConfiguration+0x1d2>
 801dc6e:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801dc70:	0711      	lsls	r1, r2, #28
 801dc72:	d403      	bmi.n	801dc7c <WriteRegisterConfiguration+0xb8>
 801dc74:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801dc76:	06d2      	lsls	r2, r2, #27
 801dc78:	f140 8244 	bpl.w	801e104 <WriteRegisterConfiguration+0x540>
 801dc7c:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
 801dc80:	f011 0203 	ands.w	r2, r1, #3
 801dc84:	f040 8236 	bne.w	801e0f4 <WriteRegisterConfiguration+0x530>
 801dc88:	f894 c016 	ldrb.w	ip, [r4, #22]
 801dc8c:	7d66      	ldrb	r6, [r4, #21]
 801dc8e:	18e2      	adds	r2, r4, r3
 801dc90:	ea4f 0e5c 	mov.w	lr, ip, lsr #1
 801dc94:	ea4e 1ec6 	orr.w	lr, lr, r6, lsl #7
 801dc98:	f882 e089 	strb.w	lr, [r2, #137]	@ 0x89
 801dc9c:	ea4f 1ecc 	mov.w	lr, ip, lsl #7
 801dca0:	f894 c017 	ldrb.w	ip, [r4, #23]
 801dca4:	ea4e 0e5c 	orr.w	lr, lr, ip, lsr #1
 801dca8:	f882 e08a 	strb.w	lr, [r2, #138]	@ 0x8a
 801dcac:	ea4f 1ecc 	mov.w	lr, ip, lsl #7
 801dcb0:	f894 c018 	ldrb.w	ip, [r4, #24]
 801dcb4:	ea4e 0e5c 	orr.w	lr, lr, ip, lsr #1
 801dcb8:	f882 e08b 	strb.w	lr, [r2, #139]	@ 0x8b
 801dcbc:	ea4f 1ecc 	mov.w	lr, ip, lsl #7
 801dcc0:	f894 c019 	ldrb.w	ip, [r4, #25]
 801dcc4:	ea4e 0e5c 	orr.w	lr, lr, ip, lsr #1
 801dcc8:	f882 e08c 	strb.w	lr, [r2, #140]	@ 0x8c
 801dccc:	ea4f 1ecc 	mov.w	lr, ip, lsl #7
 801dcd0:	f894 c01a 	ldrb.w	ip, [r4, #26]
 801dcd4:	ea4e 0e5c 	orr.w	lr, lr, ip, lsr #1
 801dcd8:	f882 e08d 	strb.w	lr, [r2, #141]	@ 0x8d
 801dcdc:	ea4f 1ecc 	mov.w	lr, ip, lsl #7
 801dce0:	f894 c01b 	ldrb.w	ip, [r4, #27]
 801dce4:	ea4e 0e5c 	orr.w	lr, lr, ip, lsr #1
 801dce8:	f882 e08e 	strb.w	lr, [r2, #142]	@ 0x8e
 801dcec:	ea4f 1ecc 	mov.w	lr, ip, lsl #7
 801dcf0:	f894 c01c 	ldrb.w	ip, [r4, #28]
 801dcf4:	ea4e 0e5c 	orr.w	lr, lr, ip, lsr #1
 801dcf8:	f882 e08f 	strb.w	lr, [r2, #143]	@ 0x8f
 801dcfc:	ea4f 1ecc 	mov.w	lr, ip, lsl #7
 801dd00:	f894 c01d 	ldrb.w	ip, [r4, #29]
 801dd04:	ea4e 0e5c 	orr.w	lr, lr, ip, lsr #1
 801dd08:	f882 e090 	strb.w	lr, [r2, #144]	@ 0x90
 801dd0c:	ea4f 1ecc 	mov.w	lr, ip, lsl #7
 801dd10:	f894 c01e 	ldrb.w	ip, [r4, #30]
 801dd14:	ea4e 0e5c 	orr.w	lr, lr, ip, lsr #1
 801dd18:	f882 e091 	strb.w	lr, [r2, #145]	@ 0x91
 801dd1c:	ea4f 1ecc 	mov.w	lr, ip, lsl #7
 801dd20:	f894 c01f 	ldrb.w	ip, [r4, #31]
 801dd24:	ea4e 0e5c 	orr.w	lr, lr, ip, lsr #1
 801dd28:	f882 e092 	strb.w	lr, [r2, #146]	@ 0x92
 801dd2c:	ea4f 1ecc 	mov.w	lr, ip, lsl #7
 801dd30:	f894 c020 	ldrb.w	ip, [r4, #32]
 801dd34:	ea4e 0e5c 	orr.w	lr, lr, ip, lsr #1
 801dd38:	f882 e093 	strb.w	lr, [r2, #147]	@ 0x93
 801dd3c:	ea4f 1ecc 	mov.w	lr, ip, lsl #7
 801dd40:	f894 c021 	ldrb.w	ip, [r4, #33]	@ 0x21
 801dd44:	ea4e 0e5c 	orr.w	lr, lr, ip, lsr #1
 801dd48:	f882 e094 	strb.w	lr, [r2, #148]	@ 0x94
 801dd4c:	f894 6022 	ldrb.w	r6, [r4, #34]	@ 0x22
 801dd50:	ea4f 1ccc 	mov.w	ip, ip, lsl #7
 801dd54:	ea4c 0c56 	orr.w	ip, ip, r6, lsr #1
 801dd58:	f882 c095 	strb.w	ip, [r2, #149]	@ 0x95
 801dd5c:	f894 c023 	ldrb.w	ip, [r4, #35]	@ 0x23
 801dd60:	ea4f 0e5c 	mov.w	lr, ip, lsr #1
 801dd64:	ea4e 1ec6 	orr.w	lr, lr, r6, lsl #7
 801dd68:	f882 e096 	strb.w	lr, [r2, #150]	@ 0x96
 801dd6c:	f894 6024 	ldrb.w	r6, [r4, #36]	@ 0x24
 801dd70:	0849      	lsrs	r1, r1, #1
 801dd72:	ea4f 1ccc 	mov.w	ip, ip, lsl #7
 801dd76:	2704      	movs	r7, #4
 801dd78:	ea4c 0c56 	orr.w	ip, ip, r6, lsr #1
 801dd7c:	ea41 11c6 	orr.w	r1, r1, r6, lsl #7
 801dd80:	f882 c097 	strb.w	ip, [r2, #151]	@ 0x97
 801dd84:	f882 1098 	strb.w	r1, [r2, #152]	@ 0x98
 801dd88:	f882 7088 	strb.w	r7, [r2, #136]	@ 0x88
 801dd8c:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801dd8e:	f022 0204 	bic.w	r2, r2, #4
 801dd92:	3311      	adds	r3, #17
 801dd94:	67a2      	str	r2, [r4, #120]	@ 0x78
 801dd96:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801dd98:	0717      	lsls	r7, r2, #28
 801dd9a:	f140 8118 	bpl.w	801dfce <WriteRegisterConfiguration+0x40a>
 801dd9e:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801dda0:	06d6      	lsls	r6, r2, #27
 801dda2:	f140 81cd 	bpl.w	801e140 <WriteRegisterConfiguration+0x57c>
 801dda6:	f894 e046 	ldrb.w	lr, [r4, #70]	@ 0x46
 801ddaa:	f01e 0203 	ands.w	r2, lr, #3
 801ddae:	f040 810b 	bne.w	801dfc8 <WriteRegisterConfiguration+0x404>
 801ddb2:	e001      	b.n	801ddb8 <WriteRegisterConfiguration+0x1f4>
 801ddb4:	0801dbc5 	.word	0x0801dbc5
 801ddb8:	f894 1027 	ldrb.w	r1, [r4, #39]	@ 0x27
 801ddbc:	f894 6026 	ldrb.w	r6, [r4, #38]	@ 0x26
 801ddc0:	18e2      	adds	r2, r4, r3
 801ddc2:	0848      	lsrs	r0, r1, #1
 801ddc4:	ea40 10c6 	orr.w	r0, r0, r6, lsl #7
 801ddc8:	f882 0089 	strb.w	r0, [r2, #137]	@ 0x89
 801ddcc:	01c8      	lsls	r0, r1, #7
 801ddce:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801ddd2:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801ddd6:	f882 008a 	strb.w	r0, [r2, #138]	@ 0x8a
 801ddda:	01c8      	lsls	r0, r1, #7
 801dddc:	f894 1029 	ldrb.w	r1, [r4, #41]	@ 0x29
 801dde0:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801dde4:	f882 008b 	strb.w	r0, [r2, #139]	@ 0x8b
 801dde8:	01c8      	lsls	r0, r1, #7
 801ddea:	f894 102a 	ldrb.w	r1, [r4, #42]	@ 0x2a
 801ddee:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801ddf2:	f882 008c 	strb.w	r0, [r2, #140]	@ 0x8c
 801ddf6:	01c8      	lsls	r0, r1, #7
 801ddf8:	f894 102b 	ldrb.w	r1, [r4, #43]	@ 0x2b
 801ddfc:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801de00:	f882 008d 	strb.w	r0, [r2, #141]	@ 0x8d
 801de04:	01c8      	lsls	r0, r1, #7
 801de06:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801de0a:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801de0e:	f882 008e 	strb.w	r0, [r2, #142]	@ 0x8e
 801de12:	01c8      	lsls	r0, r1, #7
 801de14:	f894 102d 	ldrb.w	r1, [r4, #45]	@ 0x2d
 801de18:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801de1c:	f882 008f 	strb.w	r0, [r2, #143]	@ 0x8f
 801de20:	01c8      	lsls	r0, r1, #7
 801de22:	f894 102e 	ldrb.w	r1, [r4, #46]	@ 0x2e
 801de26:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801de2a:	f882 0090 	strb.w	r0, [r2, #144]	@ 0x90
 801de2e:	01c8      	lsls	r0, r1, #7
 801de30:	f894 102f 	ldrb.w	r1, [r4, #47]	@ 0x2f
 801de34:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801de38:	f882 0091 	strb.w	r0, [r2, #145]	@ 0x91
 801de3c:	01c8      	lsls	r0, r1, #7
 801de3e:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 801de42:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801de46:	f882 0092 	strb.w	r0, [r2, #146]	@ 0x92
 801de4a:	01c8      	lsls	r0, r1, #7
 801de4c:	f894 1031 	ldrb.w	r1, [r4, #49]	@ 0x31
 801de50:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801de54:	f882 0093 	strb.w	r0, [r2, #147]	@ 0x93
 801de58:	01c8      	lsls	r0, r1, #7
 801de5a:	f894 1032 	ldrb.w	r1, [r4, #50]	@ 0x32
 801de5e:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801de62:	f882 0094 	strb.w	r0, [r2, #148]	@ 0x94
 801de66:	01c8      	lsls	r0, r1, #7
 801de68:	f894 1033 	ldrb.w	r1, [r4, #51]	@ 0x33
 801de6c:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801de70:	f882 0095 	strb.w	r0, [r2, #149]	@ 0x95
 801de74:	01c8      	lsls	r0, r1, #7
 801de76:	f894 1034 	ldrb.w	r1, [r4, #52]	@ 0x34
 801de7a:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801de7e:	f882 0096 	strb.w	r0, [r2, #150]	@ 0x96
 801de82:	01c8      	lsls	r0, r1, #7
 801de84:	f894 1035 	ldrb.w	r1, [r4, #53]	@ 0x35
 801de88:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801de8c:	f882 0097 	strb.w	r0, [r2, #151]	@ 0x97
 801de90:	01c8      	lsls	r0, r1, #7
 801de92:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
 801de96:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801de9a:	f882 0098 	strb.w	r0, [r2, #152]	@ 0x98
 801de9e:	01c8      	lsls	r0, r1, #7
 801dea0:	f894 1037 	ldrb.w	r1, [r4, #55]	@ 0x37
 801dea4:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801dea8:	f882 0099 	strb.w	r0, [r2, #153]	@ 0x99
 801deac:	01c8      	lsls	r0, r1, #7
 801deae:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 801deb2:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801deb6:	f882 009a 	strb.w	r0, [r2, #154]	@ 0x9a
 801deba:	01c8      	lsls	r0, r1, #7
 801debc:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 801dec0:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801dec4:	f882 009b 	strb.w	r0, [r2, #155]	@ 0x9b
 801dec8:	01c8      	lsls	r0, r1, #7
 801deca:	f894 103a 	ldrb.w	r1, [r4, #58]	@ 0x3a
 801dece:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801ded2:	f882 009c 	strb.w	r0, [r2, #156]	@ 0x9c
 801ded6:	01c8      	lsls	r0, r1, #7
 801ded8:	f894 103b 	ldrb.w	r1, [r4, #59]	@ 0x3b
 801dedc:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801dee0:	f882 009d 	strb.w	r0, [r2, #157]	@ 0x9d
 801dee4:	01c8      	lsls	r0, r1, #7
 801dee6:	f894 103c 	ldrb.w	r1, [r4, #60]	@ 0x3c
 801deea:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801deee:	f882 009e 	strb.w	r0, [r2, #158]	@ 0x9e
 801def2:	01c8      	lsls	r0, r1, #7
 801def4:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
 801def8:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801defc:	f882 009f 	strb.w	r0, [r2, #159]	@ 0x9f
 801df00:	01c8      	lsls	r0, r1, #7
 801df02:	f894 103e 	ldrb.w	r1, [r4, #62]	@ 0x3e
 801df06:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801df0a:	f882 00a0 	strb.w	r0, [r2, #160]	@ 0xa0
 801df0e:	01c8      	lsls	r0, r1, #7
 801df10:	f894 103f 	ldrb.w	r1, [r4, #63]	@ 0x3f
 801df14:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801df18:	f882 00a1 	strb.w	r0, [r2, #161]	@ 0xa1
 801df1c:	01c8      	lsls	r0, r1, #7
 801df1e:	f894 1040 	ldrb.w	r1, [r4, #64]	@ 0x40
 801df22:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801df26:	f882 00a2 	strb.w	r0, [r2, #162]	@ 0xa2
 801df2a:	01c8      	lsls	r0, r1, #7
 801df2c:	f894 1041 	ldrb.w	r1, [r4, #65]	@ 0x41
 801df30:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801df34:	f882 00a3 	strb.w	r0, [r2, #163]	@ 0xa3
 801df38:	01c8      	lsls	r0, r1, #7
 801df3a:	f894 1042 	ldrb.w	r1, [r4, #66]	@ 0x42
 801df3e:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801df42:	f882 00a4 	strb.w	r0, [r2, #164]	@ 0xa4
 801df46:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 801df4a:	01c9      	lsls	r1, r1, #7
 801df4c:	ea41 0150 	orr.w	r1, r1, r0, lsr #1
 801df50:	f882 10a5 	strb.w	r1, [r2, #165]	@ 0xa5
 801df54:	ea4f 1cc0 	mov.w	ip, r0, lsl #7
 801df58:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 801df5c:	ea4c 0c50 	orr.w	ip, ip, r0, lsr #1
 801df60:	f882 c0a6 	strb.w	ip, [r2, #166]	@ 0xa6
 801df64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801df68:	01c0      	lsls	r0, r0, #7
 801df6a:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801df6e:	01c9      	lsls	r1, r1, #7
 801df70:	ea41 015e 	orr.w	r1, r1, lr, lsr #1
 801df74:	f882 10a8 	strb.w	r1, [r2, #168]	@ 0xa8
 801df78:	2106      	movs	r1, #6
 801df7a:	f882 00a7 	strb.w	r0, [r2, #167]	@ 0xa7
 801df7e:	f882 1088 	strb.w	r1, [r2, #136]	@ 0x88
 801df82:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801df84:	f022 0208 	bic.w	r2, r2, #8
 801df88:	3321      	adds	r3, #33	@ 0x21
 801df8a:	67a2      	str	r2, [r4, #120]	@ 0x78
 801df8c:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801df8e:	06d2      	lsls	r2, r2, #27
 801df90:	d50c      	bpl.n	801dfac <WriteRegisterConfiguration+0x3e8>
 801df92:	18e2      	adds	r2, r4, r3
 801df94:	f8d4 1047 	ldr.w	r1, [r4, #71]	@ 0x47
 801df98:	f8c2 1088 	str.w	r1, [r2, #136]	@ 0x88
 801df9c:	2108      	movs	r1, #8
 801df9e:	f882 1088 	strb.w	r1, [r2, #136]	@ 0x88
 801dfa2:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801dfa4:	f022 0210 	bic.w	r2, r2, #16
 801dfa8:	3304      	adds	r3, #4
 801dfaa:	67a2      	str	r2, [r4, #120]	@ 0x78
 801dfac:	f104 0288 	add.w	r2, r4, #136	@ 0x88
 801dfb0:	e9cd 5400 	strd	r5, r4, [sp]
 801dfb4:	4611      	mov	r1, r2
 801dfb6:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801dfba:	f00a f957 	bl	802826c <ADS_Transfer>
 801dfbe:	2800      	cmp	r0, #0
 801dfc0:	f2c0 80e2 	blt.w	801e188 <WriteRegisterConfiguration+0x5c4>
 801dfc4:	b003      	add	sp, #12
 801dfc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dfc8:	2a03      	cmp	r2, #3
 801dfca:	f43f aef5 	beq.w	801ddb8 <WriteRegisterConfiguration+0x1f4>
 801dfce:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801dfd0:	06d1      	lsls	r1, r2, #27
 801dfd2:	d4de      	bmi.n	801df92 <WriteRegisterConfiguration+0x3ce>
 801dfd4:	2b00      	cmp	r3, #0
 801dfd6:	d1e9      	bne.n	801dfac <WriteRegisterConfiguration+0x3e8>
 801dfd8:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 801dfdc:	f8d4 104b 	ldr.w	r1, [r4, #75]	@ 0x4b
 801dfe0:	f894 204f 	ldrb.w	r2, [r4, #79]	@ 0x4f
 801dfe4:	f8c4 10f8 	str.w	r1, [r4, #248]	@ 0xf8
 801dfe8:	f884 20fc 	strb.w	r2, [r4, #252]	@ 0xfc
 801dfec:	2b00      	cmp	r3, #0
 801dfee:	d0e9      	beq.n	801dfc4 <WriteRegisterConfiguration+0x400>
 801dff0:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 801dff4:	b003      	add	sp, #12
 801dff6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801dffa:	4718      	bx	r3
 801dffc:	18e2      	adds	r2, r4, r3
 801dffe:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 801e000:	f8c2 1088 	str.w	r1, [r2, #136]	@ 0x88
 801e004:	210c      	movs	r1, #12
 801e006:	f882 1088 	strb.w	r1, [r2, #136]	@ 0x88
 801e00a:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801e00c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801e010:	67a2      	str	r2, [r4, #120]	@ 0x78
 801e012:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801e014:	0617      	lsls	r7, r2, #24
 801e016:	f103 0304 	add.w	r3, r3, #4
 801e01a:	f57f adf3 	bpl.w	801dc04 <WriteRegisterConfiguration+0x40>
 801e01e:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 801e022:	18a6      	adds	r6, r4, r2
 801e024:	f8b4 c054 	ldrh.w	ip, [r4, #84]	@ 0x54
 801e028:	f894 7056 	ldrb.w	r7, [r4, #86]	@ 0x56
 801e02c:	f824 c002 	strh.w	ip, [r4, r2]
 801e030:	18e1      	adds	r1, r4, r3
 801e032:	70b7      	strb	r7, [r6, #2]
 801e034:	260e      	movs	r6, #14
 801e036:	f881 6088 	strb.w	r6, [r1, #136]	@ 0x88
 801e03a:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801e03c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801e040:	67a2      	str	r2, [r4, #120]	@ 0x78
 801e042:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801e044:	0456      	lsls	r6, r2, #17
 801e046:	f103 0303 	add.w	r3, r3, #3
 801e04a:	f57f addf 	bpl.w	801dc0c <WriteRegisterConfiguration+0x48>
 801e04e:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 801e052:	18a6      	adds	r6, r4, r2
 801e054:	f8b4 c069 	ldrh.w	ip, [r4, #105]	@ 0x69
 801e058:	f894 706b 	ldrb.w	r7, [r4, #107]	@ 0x6b
 801e05c:	f824 c002 	strh.w	ip, [r4, r2]
 801e060:	18e1      	adds	r1, r4, r3
 801e062:	70b7      	strb	r7, [r6, #2]
 801e064:	261c      	movs	r6, #28
 801e066:	f881 6088 	strb.w	r6, [r1, #136]	@ 0x88
 801e06a:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801e06c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 801e070:	3303      	adds	r3, #3
 801e072:	67a2      	str	r2, [r4, #120]	@ 0x78
 801e074:	e5ca      	b.n	801dc0c <WriteRegisterConfiguration+0x48>
 801e076:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801e078:	f8b1 105a 	ldrh.w	r1, [r1, #90]	@ 0x5a
 801e07c:	f8a4 1089 	strh.w	r1, [r4, #137]	@ 0x89
 801e080:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801e084:	2212      	movs	r2, #18
 801e086:	67a3      	str	r3, [r4, #120]	@ 0x78
 801e088:	f884 2088 	strb.w	r2, [r4, #136]	@ 0x88
 801e08c:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801e08e:	4d44      	ldr	r5, [pc, #272]	@ (801e1a0 <WriteRegisterConfiguration+0x5dc>)
 801e090:	0796      	lsls	r6, r2, #30
 801e092:	f04f 018b 	mov.w	r1, #139	@ 0x8b
 801e096:	f04f 0c0c 	mov.w	ip, #12
 801e09a:	f04f 0303 	mov.w	r3, #3
 801e09e:	f57f ada5 	bpl.w	801dbec <WriteRegisterConfiguration+0x28>
 801e0a2:	1862      	adds	r2, r4, r1
 801e0a4:	18e6      	adds	r6, r4, r3
 801e0a6:	4663      	mov	r3, ip
 801e0a8:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801e0ac:	6927      	ldr	r7, [r4, #16]
 801e0ae:	f844 c001 	str.w	ip, [r4, r1]
 801e0b2:	6057      	str	r7, [r2, #4]
 801e0b4:	7d21      	ldrb	r1, [r4, #20]
 801e0b6:	7211      	strb	r1, [r2, #8]
 801e0b8:	2202      	movs	r2, #2
 801e0ba:	f886 2088 	strb.w	r2, [r6, #136]	@ 0x88
 801e0be:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801e0c0:	f022 0202 	bic.w	r2, r2, #2
 801e0c4:	67a2      	str	r2, [r4, #120]	@ 0x78
 801e0c6:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801e0c8:	0691      	lsls	r1, r2, #26
 801e0ca:	f57f ad93 	bpl.w	801dbf4 <WriteRegisterConfiguration+0x30>
 801e0ce:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 801e0d2:	f8d4 104b 	ldr.w	r1, [r4, #75]	@ 0x4b
 801e0d6:	50a1      	str	r1, [r4, r2]
 801e0d8:	4422      	add	r2, r4
 801e0da:	f894 604f 	ldrb.w	r6, [r4, #79]	@ 0x4f
 801e0de:	7116      	strb	r6, [r2, #4]
 801e0e0:	18e1      	adds	r1, r4, r3
 801e0e2:	260a      	movs	r6, #10
 801e0e4:	f881 6088 	strb.w	r6, [r1, #136]	@ 0x88
 801e0e8:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801e0ea:	f022 0220 	bic.w	r2, r2, #32
 801e0ee:	3305      	adds	r3, #5
 801e0f0:	67a2      	str	r2, [r4, #120]	@ 0x78
 801e0f2:	e57f      	b.n	801dbf4 <WriteRegisterConfiguration+0x30>
 801e0f4:	2a03      	cmp	r2, #3
 801e0f6:	f43f adc7 	beq.w	801dc88 <WriteRegisterConfiguration+0xc4>
 801e0fa:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801e0fc:	0717      	lsls	r7, r2, #28
 801e0fe:	f57f af66 	bpl.w	801dfce <WriteRegisterConfiguration+0x40a>
 801e102:	e64c      	b.n	801dd9e <WriteRegisterConfiguration+0x1da>
 801e104:	f103 0188 	add.w	r1, r3, #136	@ 0x88
 801e108:	f8d4 e015 	ldr.w	lr, [r4, #21]
 801e10c:	f8d4 6021 	ldr.w	r6, [r4, #33]	@ 0x21
 801e110:	f8d4 c019 	ldr.w	ip, [r4, #25]
 801e114:	f8d4 701d 	ldr.w	r7, [r4, #29]
 801e118:	f844 e001 	str.w	lr, [r4, r1]
 801e11c:	1862      	adds	r2, r4, r1
 801e11e:	18e1      	adds	r1, r4, r3
 801e120:	f8c2 c004 	str.w	ip, [r2, #4]
 801e124:	6097      	str	r7, [r2, #8]
 801e126:	60d6      	str	r6, [r2, #12]
 801e128:	f894 6025 	ldrb.w	r6, [r4, #37]	@ 0x25
 801e12c:	7416      	strb	r6, [r2, #16]
 801e12e:	2604      	movs	r6, #4
 801e130:	f881 6088 	strb.w	r6, [r1, #136]	@ 0x88
 801e134:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801e136:	f022 0204 	bic.w	r2, r2, #4
 801e13a:	3311      	adds	r3, #17
 801e13c:	67a2      	str	r2, [r4, #120]	@ 0x78
 801e13e:	e62a      	b.n	801dd96 <WriteRegisterConfiguration+0x1d2>
 801e140:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 801e144:	f104 0126 	add.w	r1, r4, #38	@ 0x26
 801e148:	4422      	add	r2, r4
 801e14a:	f104 0746 	add.w	r7, r4, #70	@ 0x46
 801e14e:	f8d1 e000 	ldr.w	lr, [r1]
 801e152:	f8d1 c004 	ldr.w	ip, [r1, #4]
 801e156:	6888      	ldr	r0, [r1, #8]
 801e158:	68ce      	ldr	r6, [r1, #12]
 801e15a:	60d6      	str	r6, [r2, #12]
 801e15c:	3110      	adds	r1, #16
 801e15e:	42b9      	cmp	r1, r7
 801e160:	f8c2 e000 	str.w	lr, [r2]
 801e164:	f8c2 c004 	str.w	ip, [r2, #4]
 801e168:	6090      	str	r0, [r2, #8]
 801e16a:	f102 0210 	add.w	r2, r2, #16
 801e16e:	d1ee      	bne.n	801e14e <WriteRegisterConfiguration+0x58a>
 801e170:	7809      	ldrb	r1, [r1, #0]
 801e172:	7011      	strb	r1, [r2, #0]
 801e174:	18e2      	adds	r2, r4, r3
 801e176:	2106      	movs	r1, #6
 801e178:	f882 1088 	strb.w	r1, [r2, #136]	@ 0x88
 801e17c:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801e17e:	f022 0208 	bic.w	r2, r2, #8
 801e182:	3321      	adds	r3, #33	@ 0x21
 801e184:	67a2      	str	r2, [r4, #120]	@ 0x78
 801e186:	e701      	b.n	801df8c <WriteRegisterConfiguration+0x3c8>
 801e188:	6823      	ldr	r3, [r4, #0]
 801e18a:	3371      	adds	r3, #113	@ 0x71
 801e18c:	bf1c      	itt	ne
 801e18e:	f06f 0371 	mvnne.w	r3, #113	@ 0x71
 801e192:	6023      	strne	r3, [r4, #0]
 801e194:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 801e198:	2b00      	cmp	r3, #0
 801e19a:	f47f af29 	bne.w	801dff0 <WriteRegisterConfiguration+0x42c>
 801e19e:	e711      	b.n	801dfc4 <WriteRegisterConfiguration+0x400>
 801e1a0:	0801e1a5 	.word	0x0801e1a5

0801e1a4 <WriteRegisterConfigurationCheckDeviceConfig>:
 801e1a4:	2800      	cmp	r0, #0
 801e1a6:	db11      	blt.n	801e1cc <WriteRegisterConfigurationCheckDeviceConfig+0x28>
 801e1a8:	f891 208a 	ldrb.w	r2, [r1, #138]	@ 0x8a
 801e1ac:	f8d1 3100 	ldr.w	r3, [r1, #256]	@ 0x100
 801e1b0:	0650      	lsls	r0, r2, #25
 801e1b2:	bf4c      	ite	mi
 801e1b4:	f043 0380 	orrmi.w	r3, r3, #128	@ 0x80
 801e1b8:	f023 0380 	bicpl.w	r3, r3, #128	@ 0x80
 801e1bc:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
 801e1c0:	0693      	lsls	r3, r2, #26
 801e1c2:	bf48      	it	mi
 801e1c4:	2000      	movmi	r0, #0
 801e1c6:	d50e      	bpl.n	801e1e6 <WriteRegisterConfigurationCheckDeviceConfig+0x42>
 801e1c8:	f7ff bcfc 	b.w	801dbc4 <WriteRegisterConfiguration>
 801e1cc:	680b      	ldr	r3, [r1, #0]
 801e1ce:	3371      	adds	r3, #113	@ 0x71
 801e1d0:	bf1c      	itt	ne
 801e1d2:	f06f 0371 	mvnne.w	r3, #113	@ 0x71
 801e1d6:	600b      	strne	r3, [r1, #0]
 801e1d8:	f8d1 3104 	ldr.w	r3, [r1, #260]	@ 0x104
 801e1dc:	b113      	cbz	r3, 801e1e4 <WriteRegisterConfigurationCheckDeviceConfig+0x40>
 801e1de:	f8d1 1108 	ldr.w	r1, [r1, #264]	@ 0x108
 801e1e2:	4718      	bx	r3
 801e1e4:	4770      	bx	lr
 801e1e6:	6f88      	ldr	r0, [r1, #120]	@ 0x78
 801e1e8:	4b07      	ldr	r3, [pc, #28]	@ (801e208 <WriteRegisterConfigurationCheckDeviceConfig+0x64>)
 801e1ea:	f891 20fd 	ldrb.w	r2, [r1, #253]	@ 0xfd
 801e1ee:	4303      	orrs	r3, r0
 801e1f0:	678b      	str	r3, [r1, #120]	@ 0x78
 801e1f2:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801e1f4:	f042 0202 	orr.w	r2, r2, #2
 801e1f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801e1fc:	f881 20fd 	strb.w	r2, [r1, #253]	@ 0xfd
 801e200:	678b      	str	r3, [r1, #120]	@ 0x78
 801e202:	f06f 0071 	mvn.w	r0, #113	@ 0x71
 801e206:	e7df      	b.n	801e1c8 <WriteRegisterConfigurationCheckDeviceConfig+0x24>
 801e208:	0003dffe 	.word	0x0003dffe

0801e20c <WriteBlockEnable>:
 801e20c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e20e:	2800      	cmp	r0, #0
 801e210:	b085      	sub	sp, #20
 801e212:	460c      	mov	r4, r1
 801e214:	f2c0 809f 	blt.w	801e356 <WriteBlockEnable+0x14a>
 801e218:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801e21a:	05db      	lsls	r3, r3, #23
 801e21c:	d517      	bpl.n	801e24e <WriteBlockEnable+0x42>
 801e21e:	4b7a      	ldr	r3, [pc, #488]	@ (801e408 <WriteBlockEnable+0x1fc>)
 801e220:	f891 1058 	ldrb.w	r1, [r1, #88]	@ 0x58
 801e224:	f884 1089 	strb.w	r1, [r4, #137]	@ 0x89
 801e228:	f104 0288 	add.w	r2, r4, #136	@ 0x88
 801e22c:	2010      	movs	r0, #16
 801e22e:	f884 0088 	strb.w	r0, [r4, #136]	@ 0x88
 801e232:	4611      	mov	r1, r2
 801e234:	e9cd 3400 	strd	r3, r4, [sp]
 801e238:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801e23c:	2302      	movs	r3, #2
 801e23e:	f00a f815 	bl	802826c <ADS_Transfer>
 801e242:	1e03      	subs	r3, r0, #0
 801e244:	f2c0 80a5 	blt.w	801e392 <WriteBlockEnable+0x186>
 801e248:	4618      	mov	r0, r3
 801e24a:	b005      	add	sp, #20
 801e24c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e24e:	6f8e      	ldr	r6, [r1, #120]	@ 0x78
 801e250:	6f88      	ldr	r0, [r1, #120]	@ 0x78
 801e252:	4b6e      	ldr	r3, [pc, #440]	@ (801e40c <WriteBlockEnable+0x200>)
 801e254:	f006 7600 	and.w	r6, r6, #33554432	@ 0x2000000
 801e258:	f000 0020 	and.w	r0, r0, #32
 801e25c:	4330      	orrs	r0, r6
 801e25e:	e9c1 3143 	strd	r3, r1, [r1, #268]	@ 0x10c
 801e262:	f000 8091 	beq.w	801e388 <WriteBlockEnable+0x17c>
 801e266:	f891 70fb 	ldrb.w	r7, [r1, #251]	@ 0xfb
 801e26a:	f8d1 311c 	ldr.w	r3, [r1, #284]	@ 0x11c
 801e26e:	f007 073f 	and.w	r7, r7, #63	@ 0x3f
 801e272:	2f09      	cmp	r7, #9
 801e274:	a903      	add	r1, sp, #12
 801e276:	a802      	add	r0, sp, #8
 801e278:	bf94      	ite	ls
 801e27a:	8bdd      	ldrhls	r5, [r3, #30]
 801e27c:	8c1d      	ldrhhi	r5, [r3, #32]
 801e27e:	f7e8 fd17 	bl	8006cb0 <Timer_GetCounterValue>
 801e282:	f8d4 2118 	ldr.w	r2, [r4, #280]	@ 0x118
 801e286:	f8dd c008 	ldr.w	ip, [sp, #8]
 801e28a:	f8dd e00c 	ldr.w	lr, [sp, #12]
 801e28e:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
 801e292:	18ab      	adds	r3, r5, r2
 801e294:	4d5e      	ldr	r5, [pc, #376]	@ (801e410 <WriteBlockEnable+0x204>)
 801e296:	bf2c      	ite	cs
 801e298:	2101      	movcs	r1, #1
 801e29a:	2100      	movcc	r1, #0
 801e29c:	42ab      	cmp	r3, r5
 801e29e:	d94f      	bls.n	801e340 <WriteBlockEnable+0x134>
 801e2a0:	1c45      	adds	r5, r0, #1
 801e2a2:	42a8      	cmp	r0, r5
 801e2a4:	f5a3 2374 	sub.w	r3, r3, #999424	@ 0xf4000
 801e2a8:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 801e2ac:	bf2c      	ite	cs
 801e2ae:	2100      	movcs	r1, #0
 801e2b0:	2101      	movcc	r1, #1
 801e2b2:	2900      	cmp	r1, #0
 801e2b4:	d048      	beq.n	801e348 <WriteBlockEnable+0x13c>
 801e2b6:	4560      	cmp	r0, ip
 801e2b8:	f000 808a 	beq.w	801e3d0 <WriteBlockEnable+0x1c4>
 801e2bc:	bf34      	ite	cc
 801e2be:	2201      	movcc	r2, #1
 801e2c0:	2200      	movcs	r2, #0
 801e2c2:	b12a      	cbz	r2, 801e2d0 <WriteBlockEnable+0xc4>
 801e2c4:	4565      	cmp	r5, ip
 801e2c6:	d076      	beq.n	801e3b6 <WriteBlockEnable+0x1aa>
 801e2c8:	bf34      	ite	cc
 801e2ca:	2301      	movcc	r3, #1
 801e2cc:	2300      	movcs	r3, #0
 801e2ce:	b313      	cbz	r3, 801e316 <WriteBlockEnable+0x10a>
 801e2d0:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	@ 0xfa
 801e2d4:	f894 10fa 	ldrb.w	r1, [r4, #250]	@ 0xfa
 801e2d8:	ba5b      	rev16	r3, r3
 801e2da:	f3c3 1383 	ubfx	r3, r3, #6, #4
 801e2de:	2e00      	cmp	r6, #0
 801e2e0:	d047      	beq.n	801e372 <WriteBlockEnable+0x166>
 801e2e2:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801e2e4:	f042 0220 	orr.w	r2, r2, #32
 801e2e8:	67a2      	str	r2, [r4, #120]	@ 0x78
 801e2ea:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801e2ec:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 801e2f0:	2600      	movs	r6, #0
 801e2f2:	67a2      	str	r2, [r4, #120]	@ 0x78
 801e2f4:	f3c3 0297 	ubfx	r2, r3, #2, #24
 801e2f8:	f021 0103 	bic.w	r1, r1, #3
 801e2fc:	4311      	orrs	r1, r2
 801e2fe:	ea46 1383 	orr.w	r3, r6, r3, lsl #6
 801e302:	f884 10fa 	strb.w	r1, [r4, #250]	@ 0xfa
 801e306:	f884 30fb 	strb.w	r3, [r4, #251]	@ 0xfb
 801e30a:	f504 718c 	add.w	r1, r4, #280	@ 0x118
 801e30e:	f504 708a 	add.w	r0, r4, #276	@ 0x114
 801e312:	f7e8 fccd 	bl	8006cb0 <Timer_GetCounterValue>
 801e316:	4621      	mov	r1, r4
 801e318:	230a      	movs	r3, #10
 801e31a:	f801 3ff8 	strb.w	r3, [r1, #248]!
 801e31e:	4b3d      	ldr	r3, [pc, #244]	@ (801e414 <WriteBlockEnable+0x208>)
 801e320:	2200      	movs	r2, #0
 801e322:	e9cd 3400 	strd	r3, r4, [sp]
 801e326:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801e32a:	2305      	movs	r3, #5
 801e32c:	f009 ff9e 	bl	802826c <ADS_Transfer>
 801e330:	1e03      	subs	r3, r0, #0
 801e332:	da89      	bge.n	801e248 <WriteBlockEnable+0x3c>
 801e334:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 801e338:	b005      	add	sp, #20
 801e33a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801e33e:	4718      	bx	r3
 801e340:	f081 0101 	eor.w	r1, r1, #1
 801e344:	4605      	mov	r5, r0
 801e346:	e7b4      	b.n	801e2b2 <WriteBlockEnable+0xa6>
 801e348:	4560      	cmp	r0, ip
 801e34a:	d03e      	beq.n	801e3ca <WriteBlockEnable+0x1be>
 801e34c:	d3e3      	bcc.n	801e316 <WriteBlockEnable+0x10a>
 801e34e:	4565      	cmp	r5, ip
 801e350:	d038      	beq.n	801e3c4 <WriteBlockEnable+0x1b8>
 801e352:	d3bd      	bcc.n	801e2d0 <WriteBlockEnable+0xc4>
 801e354:	e7df      	b.n	801e316 <WriteBlockEnable+0x10a>
 801e356:	680b      	ldr	r3, [r1, #0]
 801e358:	3371      	adds	r3, #113	@ 0x71
 801e35a:	bf1c      	itt	ne
 801e35c:	f06f 0371 	mvnne.w	r3, #113	@ 0x71
 801e360:	600b      	strne	r3, [r1, #0]
 801e362:	f8d1 3104 	ldr.w	r3, [r1, #260]	@ 0x104
 801e366:	b113      	cbz	r3, 801e36e <WriteBlockEnable+0x162>
 801e368:	f8d1 1108 	ldr.w	r1, [r1, #264]	@ 0x108
 801e36c:	e7e4      	b.n	801e338 <WriteBlockEnable+0x12c>
 801e36e:	4603      	mov	r3, r0
 801e370:	e76a      	b.n	801e248 <WriteBlockEnable+0x3c>
 801e372:	f8b4 204d 	ldrh.w	r2, [r4, #77]	@ 0x4d
 801e376:	ba52      	rev16	r2, r2
 801e378:	f3c2 1283 	ubfx	r2, r2, #6, #4
 801e37c:	4293      	cmp	r3, r2
 801e37e:	d02c      	beq.n	801e3da <WriteBlockEnable+0x1ce>
 801e380:	2f00      	cmp	r7, #0
 801e382:	bf08      	it	eq
 801e384:	4613      	moveq	r3, r2
 801e386:	e7b5      	b.n	801e2f4 <WriteBlockEnable+0xe8>
 801e388:	b005      	add	sp, #20
 801e38a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801e38e:	f7ff bc19 	b.w	801dbc4 <WriteRegisterConfiguration>
 801e392:	6822      	ldr	r2, [r4, #0]
 801e394:	3271      	adds	r2, #113	@ 0x71
 801e396:	bf1c      	itt	ne
 801e398:	f06f 0271 	mvnne.w	r2, #113	@ 0x71
 801e39c:	6022      	strne	r2, [r4, #0]
 801e39e:	f8d4 2104 	ldr.w	r2, [r4, #260]	@ 0x104
 801e3a2:	2a00      	cmp	r2, #0
 801e3a4:	f43f af50 	beq.w	801e248 <WriteBlockEnable+0x3c>
 801e3a8:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 801e3ac:	4618      	mov	r0, r3
 801e3ae:	b005      	add	sp, #20
 801e3b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801e3b4:	4710      	bx	r2
 801e3b6:	4573      	cmp	r3, lr
 801e3b8:	bf8c      	ite	hi
 801e3ba:	2300      	movhi	r3, #0
 801e3bc:	2301      	movls	r3, #1
 801e3be:	2b00      	cmp	r3, #0
 801e3c0:	d0a9      	beq.n	801e316 <WriteBlockEnable+0x10a>
 801e3c2:	e785      	b.n	801e2d0 <WriteBlockEnable+0xc4>
 801e3c4:	4573      	cmp	r3, lr
 801e3c6:	d983      	bls.n	801e2d0 <WriteBlockEnable+0xc4>
 801e3c8:	e7a5      	b.n	801e316 <WriteBlockEnable+0x10a>
 801e3ca:	4572      	cmp	r2, lr
 801e3cc:	d9a3      	bls.n	801e316 <WriteBlockEnable+0x10a>
 801e3ce:	e7be      	b.n	801e34e <WriteBlockEnable+0x142>
 801e3d0:	4572      	cmp	r2, lr
 801e3d2:	bf8c      	ite	hi
 801e3d4:	2200      	movhi	r2, #0
 801e3d6:	2201      	movls	r2, #1
 801e3d8:	e773      	b.n	801e2c2 <WriteBlockEnable+0xb6>
 801e3da:	f894 204e 	ldrb.w	r2, [r4, #78]	@ 0x4e
 801e3de:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801e3e2:	4297      	cmp	r7, r2
 801e3e4:	d00c      	beq.n	801e400 <WriteBlockEnable+0x1f4>
 801e3e6:	da05      	bge.n	801e3f4 <WriteBlockEnable+0x1e8>
 801e3e8:	1c7e      	adds	r6, r7, #1
 801e3ea:	42b2      	cmp	r2, r6
 801e3ec:	bfa8      	it	ge
 801e3ee:	4632      	movge	r2, r6
 801e3f0:	b256      	sxtb	r6, r2
 801e3f2:	e77f      	b.n	801e2f4 <WriteBlockEnable+0xe8>
 801e3f4:	b102      	cbz	r2, 801e3f8 <WriteBlockEnable+0x1ec>
 801e3f6:	1e7e      	subs	r6, r7, #1
 801e3f8:	42b2      	cmp	r2, r6
 801e3fa:	bfb8      	it	lt
 801e3fc:	4632      	movlt	r2, r6
 801e3fe:	e7f7      	b.n	801e3f0 <WriteBlockEnable+0x1e4>
 801e400:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 801e404:	4630      	mov	r0, r6
 801e406:	e797      	b.n	801e338 <WriteBlockEnable+0x12c>
 801e408:	0801dad5 	.word	0x0801dad5
 801e40c:	0801dbc5 	.word	0x0801dbc5
 801e410:	000f423f 	.word	0x000f423f
 801e414:	0801d7e5 	.word	0x0801d7e5

0801e418 <WriteClockConfiguration>:
 801e418:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e41a:	2800      	cmp	r0, #0
 801e41c:	b085      	sub	sp, #20
 801e41e:	460c      	mov	r4, r1
 801e420:	f2c0 80da 	blt.w	801e5d8 <WriteClockConfiguration+0x1c0>
 801e424:	6f88      	ldr	r0, [r1, #120]	@ 0x78
 801e426:	f410 6080 	ands.w	r0, r0, #1024	@ 0x400
 801e42a:	d13a      	bne.n	801e4a2 <WriteClockConfiguration+0x8a>
 801e42c:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 801e42e:	0509      	lsls	r1, r1, #20
 801e430:	f04f 0609 	mov.w	r6, #9
 801e434:	f04f 078d 	mov.w	r7, #141	@ 0x8d
 801e438:	f04f 0304 	mov.w	r3, #4
 801e43c:	f04f 0288 	mov.w	r2, #136	@ 0x88
 801e440:	f04f 0505 	mov.w	r5, #5
 801e444:	d446      	bmi.n	801e4d4 <WriteClockConfiguration+0xbc>
 801e446:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 801e448:	04c9      	lsls	r1, r1, #19
 801e44a:	d457      	bmi.n	801e4fc <WriteClockConfiguration+0xe4>
 801e44c:	2800      	cmp	r0, #0
 801e44e:	f040 8139 	bne.w	801e6c4 <WriteClockConfiguration+0x2ac>
 801e452:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801e454:	05db      	lsls	r3, r3, #23
 801e456:	d56d      	bpl.n	801e534 <WriteClockConfiguration+0x11c>
 801e458:	4b9b      	ldr	r3, [pc, #620]	@ (801e6c8 <WriteClockConfiguration+0x2b0>)
 801e45a:	f894 1058 	ldrb.w	r1, [r4, #88]	@ 0x58
 801e45e:	f884 1089 	strb.w	r1, [r4, #137]	@ 0x89
 801e462:	f104 0288 	add.w	r2, r4, #136	@ 0x88
 801e466:	2010      	movs	r0, #16
 801e468:	f884 0088 	strb.w	r0, [r4, #136]	@ 0x88
 801e46c:	4611      	mov	r1, r2
 801e46e:	e9cd 3400 	strd	r3, r4, [sp]
 801e472:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801e476:	2302      	movs	r3, #2
 801e478:	f009 fef8 	bl	802826c <ADS_Transfer>
 801e47c:	1e03      	subs	r3, r0, #0
 801e47e:	da54      	bge.n	801e52a <WriteClockConfiguration+0x112>
 801e480:	6822      	ldr	r2, [r4, #0]
 801e482:	3271      	adds	r2, #113	@ 0x71
 801e484:	bf1c      	itt	ne
 801e486:	f06f 0271 	mvnne.w	r2, #113	@ 0x71
 801e48a:	6022      	strne	r2, [r4, #0]
 801e48c:	f8d4 2104 	ldr.w	r2, [r4, #260]	@ 0x104
 801e490:	2a00      	cmp	r2, #0
 801e492:	d04a      	beq.n	801e52a <WriteClockConfiguration+0x112>
 801e494:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 801e498:	4618      	mov	r0, r3
 801e49a:	b005      	add	sp, #20
 801e49c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801e4a0:	4710      	bx	r2
 801e4a2:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801e4a4:	6dc9      	ldr	r1, [r1, #92]	@ 0x5c
 801e4a6:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88
 801e4aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801e4ae:	67a3      	str	r3, [r4, #120]	@ 0x78
 801e4b0:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 801e4b2:	2214      	movs	r2, #20
 801e4b4:	0509      	lsls	r1, r1, #20
 801e4b6:	f884 2088 	strb.w	r2, [r4, #136]	@ 0x88
 801e4ba:	f04f 060d 	mov.w	r6, #13
 801e4be:	f04f 0791 	mov.w	r7, #145	@ 0x91
 801e4c2:	f04f 0308 	mov.w	r3, #8
 801e4c6:	f04f 028c 	mov.w	r2, #140	@ 0x8c
 801e4ca:	f04f 0509 	mov.w	r5, #9
 801e4ce:	f04f 0004 	mov.w	r0, #4
 801e4d2:	d5b8      	bpl.n	801e446 <WriteClockConfiguration+0x2e>
 801e4d4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 801e4d6:	50a3      	str	r3, [r4, r2]
 801e4d8:	4422      	add	r2, r4
 801e4da:	f894 3064 	ldrb.w	r3, [r4, #100]	@ 0x64
 801e4de:	7113      	strb	r3, [r2, #4]
 801e4e0:	4420      	add	r0, r4
 801e4e2:	2316      	movs	r3, #22
 801e4e4:	f880 3088 	strb.w	r3, [r0, #136]	@ 0x88
 801e4e8:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801e4ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801e4ee:	67a3      	str	r3, [r4, #120]	@ 0x78
 801e4f0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801e4f2:	04d8      	lsls	r0, r3, #19
 801e4f4:	d51c      	bpl.n	801e530 <WriteClockConfiguration+0x118>
 801e4f6:	463a      	mov	r2, r7
 801e4f8:	4633      	mov	r3, r6
 801e4fa:	4628      	mov	r0, r5
 801e4fc:	f8d4 1065 	ldr.w	r1, [r4, #101]	@ 0x65
 801e500:	50a1      	str	r1, [r4, r2]
 801e502:	4420      	add	r0, r4
 801e504:	2218      	movs	r2, #24
 801e506:	f880 2088 	strb.w	r2, [r0, #136]	@ 0x88
 801e50a:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801e50c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 801e510:	67a2      	str	r2, [r4, #120]	@ 0x78
 801e512:	496e      	ldr	r1, [pc, #440]	@ (801e6cc <WriteClockConfiguration+0x2b4>)
 801e514:	f104 0288 	add.w	r2, r4, #136	@ 0x88
 801e518:	e9cd 1400 	strd	r1, r4, [sp]
 801e51c:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801e520:	4611      	mov	r1, r2
 801e522:	f009 fea3 	bl	802826c <ADS_Transfer>
 801e526:	1e03      	subs	r3, r0, #0
 801e528:	dbaa      	blt.n	801e480 <WriteClockConfiguration+0x68>
 801e52a:	4618      	mov	r0, r3
 801e52c:	b005      	add	sp, #20
 801e52e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e530:	462b      	mov	r3, r5
 801e532:	e7ee      	b.n	801e512 <WriteClockConfiguration+0xfa>
 801e534:	6fa6      	ldr	r6, [r4, #120]	@ 0x78
 801e536:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801e538:	4a65      	ldr	r2, [pc, #404]	@ (801e6d0 <WriteClockConfiguration+0x2b8>)
 801e53a:	f006 7600 	and.w	r6, r6, #33554432	@ 0x2000000
 801e53e:	f003 0320 	and.w	r3, r3, #32
 801e542:	4333      	orrs	r3, r6
 801e544:	e9c4 2443 	strd	r2, r4, [r4, #268]	@ 0x10c
 801e548:	d057      	beq.n	801e5fa <WriteClockConfiguration+0x1e2>
 801e54a:	f894 70fb 	ldrb.w	r7, [r4, #251]	@ 0xfb
 801e54e:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
 801e552:	f007 073f 	and.w	r7, r7, #63	@ 0x3f
 801e556:	2f09      	cmp	r7, #9
 801e558:	a903      	add	r1, sp, #12
 801e55a:	a802      	add	r0, sp, #8
 801e55c:	bf94      	ite	ls
 801e55e:	8bdd      	ldrhls	r5, [r3, #30]
 801e560:	8c1d      	ldrhhi	r5, [r3, #32]
 801e562:	f7e8 fba5 	bl	8006cb0 <Timer_GetCounterValue>
 801e566:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
 801e56a:	f8dd c008 	ldr.w	ip, [sp, #8]
 801e56e:	f8dd e00c 	ldr.w	lr, [sp, #12]
 801e572:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
 801e576:	18e9      	adds	r1, r5, r3
 801e578:	4d56      	ldr	r5, [pc, #344]	@ (801e6d4 <WriteClockConfiguration+0x2bc>)
 801e57a:	bf2c      	ite	cs
 801e57c:	2201      	movcs	r2, #1
 801e57e:	2200      	movcc	r2, #0
 801e580:	42a9      	cmp	r1, r5
 801e582:	d940      	bls.n	801e606 <WriteClockConfiguration+0x1ee>
 801e584:	1c45      	adds	r5, r0, #1
 801e586:	42a8      	cmp	r0, r5
 801e588:	f5a1 2174 	sub.w	r1, r1, #999424	@ 0xf4000
 801e58c:	f5a1 7110 	sub.w	r1, r1, #576	@ 0x240
 801e590:	bf2c      	ite	cs
 801e592:	2200      	movcs	r2, #0
 801e594:	2201      	movcc	r2, #1
 801e596:	2a00      	cmp	r2, #0
 801e598:	d039      	beq.n	801e60e <WriteClockConfiguration+0x1f6>
 801e59a:	4584      	cmp	ip, r0
 801e59c:	d06b      	beq.n	801e676 <WriteClockConfiguration+0x25e>
 801e59e:	bf8c      	ite	hi
 801e5a0:	2301      	movhi	r3, #1
 801e5a2:	2300      	movls	r3, #0
 801e5a4:	2b00      	cmp	r3, #0
 801e5a6:	d038      	beq.n	801e61a <WriteClockConfiguration+0x202>
 801e5a8:	45ac      	cmp	ip, r5
 801e5aa:	d07c      	beq.n	801e6a6 <WriteClockConfiguration+0x28e>
 801e5ac:	bf8c      	ite	hi
 801e5ae:	2101      	movhi	r1, #1
 801e5b0:	2100      	movls	r1, #0
 801e5b2:	bb91      	cbnz	r1, 801e61a <WriteClockConfiguration+0x202>
 801e5b4:	4621      	mov	r1, r4
 801e5b6:	230a      	movs	r3, #10
 801e5b8:	f801 3ff8 	strb.w	r3, [r1, #248]!
 801e5bc:	4b46      	ldr	r3, [pc, #280]	@ (801e6d8 <WriteClockConfiguration+0x2c0>)
 801e5be:	2200      	movs	r2, #0
 801e5c0:	e9cd 3400 	strd	r3, r4, [sp]
 801e5c4:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801e5c8:	2305      	movs	r3, #5
 801e5ca:	f009 fe4f 	bl	802826c <ADS_Transfer>
 801e5ce:	1e03      	subs	r3, r0, #0
 801e5d0:	daab      	bge.n	801e52a <WriteClockConfiguration+0x112>
 801e5d2:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 801e5d6:	e00a      	b.n	801e5ee <WriteClockConfiguration+0x1d6>
 801e5d8:	680b      	ldr	r3, [r1, #0]
 801e5da:	3371      	adds	r3, #113	@ 0x71
 801e5dc:	bf1c      	itt	ne
 801e5de:	f06f 0371 	mvnne.w	r3, #113	@ 0x71
 801e5e2:	600b      	strne	r3, [r1, #0]
 801e5e4:	f8d1 3104 	ldr.w	r3, [r1, #260]	@ 0x104
 801e5e8:	b12b      	cbz	r3, 801e5f6 <WriteClockConfiguration+0x1de>
 801e5ea:	f8d1 1108 	ldr.w	r1, [r1, #264]	@ 0x108
 801e5ee:	b005      	add	sp, #20
 801e5f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801e5f4:	4718      	bx	r3
 801e5f6:	4603      	mov	r3, r0
 801e5f8:	e797      	b.n	801e52a <WriteClockConfiguration+0x112>
 801e5fa:	4621      	mov	r1, r4
 801e5fc:	b005      	add	sp, #20
 801e5fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801e602:	f7ff badf 	b.w	801dbc4 <WriteRegisterConfiguration>
 801e606:	f082 0201 	eor.w	r2, r2, #1
 801e60a:	4605      	mov	r5, r0
 801e60c:	e7c3      	b.n	801e596 <WriteClockConfiguration+0x17e>
 801e60e:	4584      	cmp	ip, r0
 801e610:	d036      	beq.n	801e680 <WriteClockConfiguration+0x268>
 801e612:	d8cf      	bhi.n	801e5b4 <WriteClockConfiguration+0x19c>
 801e614:	45ac      	cmp	ip, r5
 801e616:	d043      	beq.n	801e6a0 <WriteClockConfiguration+0x288>
 801e618:	d9cc      	bls.n	801e5b4 <WriteClockConfiguration+0x19c>
 801e61a:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	@ 0xfa
 801e61e:	f894 10fa 	ldrb.w	r1, [r4, #250]	@ 0xfa
 801e622:	ba5b      	rev16	r3, r3
 801e624:	f3c3 1383 	ubfx	r3, r3, #6, #4
 801e628:	b1d6      	cbz	r6, 801e660 <WriteClockConfiguration+0x248>
 801e62a:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801e62c:	f042 0220 	orr.w	r2, r2, #32
 801e630:	67a2      	str	r2, [r4, #120]	@ 0x78
 801e632:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801e634:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 801e638:	2600      	movs	r6, #0
 801e63a:	67a2      	str	r2, [r4, #120]	@ 0x78
 801e63c:	f3c3 0297 	ubfx	r2, r3, #2, #24
 801e640:	f021 0103 	bic.w	r1, r1, #3
 801e644:	4311      	orrs	r1, r2
 801e646:	ea46 1383 	orr.w	r3, r6, r3, lsl #6
 801e64a:	f884 10fa 	strb.w	r1, [r4, #250]	@ 0xfa
 801e64e:	f884 30fb 	strb.w	r3, [r4, #251]	@ 0xfb
 801e652:	f504 718c 	add.w	r1, r4, #280	@ 0x118
 801e656:	f504 708a 	add.w	r0, r4, #276	@ 0x114
 801e65a:	f7e8 fb29 	bl	8006cb0 <Timer_GetCounterValue>
 801e65e:	e7a9      	b.n	801e5b4 <WriteClockConfiguration+0x19c>
 801e660:	f8b4 204d 	ldrh.w	r2, [r4, #77]	@ 0x4d
 801e664:	ba52      	rev16	r2, r2
 801e666:	f3c2 1283 	ubfx	r2, r2, #6, #4
 801e66a:	4293      	cmp	r3, r2
 801e66c:	d00b      	beq.n	801e686 <WriteClockConfiguration+0x26e>
 801e66e:	2f00      	cmp	r7, #0
 801e670:	bf08      	it	eq
 801e672:	4613      	moveq	r3, r2
 801e674:	e7e2      	b.n	801e63c <WriteClockConfiguration+0x224>
 801e676:	459e      	cmp	lr, r3
 801e678:	bf34      	ite	cc
 801e67a:	2300      	movcc	r3, #0
 801e67c:	2301      	movcs	r3, #1
 801e67e:	e791      	b.n	801e5a4 <WriteClockConfiguration+0x18c>
 801e680:	459e      	cmp	lr, r3
 801e682:	d297      	bcs.n	801e5b4 <WriteClockConfiguration+0x19c>
 801e684:	e7c6      	b.n	801e614 <WriteClockConfiguration+0x1fc>
 801e686:	f894 204e 	ldrb.w	r2, [r4, #78]	@ 0x4e
 801e68a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801e68e:	4297      	cmp	r7, r2
 801e690:	d014      	beq.n	801e6bc <WriteClockConfiguration+0x2a4>
 801e692:	da0d      	bge.n	801e6b0 <WriteClockConfiguration+0x298>
 801e694:	1c7e      	adds	r6, r7, #1
 801e696:	42b2      	cmp	r2, r6
 801e698:	bfa8      	it	ge
 801e69a:	4632      	movge	r2, r6
 801e69c:	b256      	sxtb	r6, r2
 801e69e:	e7cd      	b.n	801e63c <WriteClockConfiguration+0x224>
 801e6a0:	4571      	cmp	r1, lr
 801e6a2:	d9ba      	bls.n	801e61a <WriteClockConfiguration+0x202>
 801e6a4:	e786      	b.n	801e5b4 <WriteClockConfiguration+0x19c>
 801e6a6:	4571      	cmp	r1, lr
 801e6a8:	bf8c      	ite	hi
 801e6aa:	2100      	movhi	r1, #0
 801e6ac:	2101      	movls	r1, #1
 801e6ae:	e780      	b.n	801e5b2 <WriteClockConfiguration+0x19a>
 801e6b0:	b102      	cbz	r2, 801e6b4 <WriteClockConfiguration+0x29c>
 801e6b2:	1e7e      	subs	r6, r7, #1
 801e6b4:	42b2      	cmp	r2, r6
 801e6b6:	bfb8      	it	lt
 801e6b8:	4632      	movlt	r2, r6
 801e6ba:	e7ef      	b.n	801e69c <WriteClockConfiguration+0x284>
 801e6bc:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 801e6c0:	4630      	mov	r0, r6
 801e6c2:	e794      	b.n	801e5ee <WriteClockConfiguration+0x1d6>
 801e6c4:	4603      	mov	r3, r0
 801e6c6:	e724      	b.n	801e512 <WriteClockConfiguration+0xfa>
 801e6c8:	0801dad5 	.word	0x0801dad5
 801e6cc:	0801e20d 	.word	0x0801e20d
 801e6d0:	0801dbc5 	.word	0x0801dbc5
 801e6d4:	000f423f 	.word	0x000f423f
 801e6d8:	0801d7e5 	.word	0x0801d7e5

0801e6dc <DisableClock.constprop.0>:
 801e6dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e6de:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 801e6e0:	4604      	mov	r4, r0
 801e6e2:	0558      	lsls	r0, r3, #21
 801e6e4:	b085      	sub	sp, #20
 801e6e6:	d402      	bmi.n	801e6ee <DisableClock.constprop.0+0x12>
 801e6e8:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801e6ea:	0519      	lsls	r1, r3, #20
 801e6ec:	d520      	bpl.n	801e730 <DisableClock.constprop.0+0x54>
 801e6ee:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801e6f0:	f894 2058 	ldrb.w	r2, [r4, #88]	@ 0x58
 801e6f4:	4980      	ldr	r1, [pc, #512]	@ (801e8f8 <DisableClock.constprop.0+0x21c>)
 801e6f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801e6fa:	67a3      	str	r3, [r4, #120]	@ 0x78
 801e6fc:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801e6fe:	f022 0201 	bic.w	r2, r2, #1
 801e702:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801e706:	2010      	movs	r0, #16
 801e708:	f884 0088 	strb.w	r0, [r4, #136]	@ 0x88
 801e70c:	f884 2089 	strb.w	r2, [r4, #137]	@ 0x89
 801e710:	67a3      	str	r3, [r4, #120]	@ 0x78
 801e712:	2200      	movs	r2, #0
 801e714:	e9cd 1400 	strd	r1, r4, [sp]
 801e718:	2302      	movs	r3, #2
 801e71a:	f104 0188 	add.w	r1, r4, #136	@ 0x88
 801e71e:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801e722:	f009 fda3 	bl	802826c <ADS_Transfer>
 801e726:	1e03      	subs	r3, r0, #0
 801e728:	db1c      	blt.n	801e764 <DisableClock.constprop.0+0x88>
 801e72a:	4618      	mov	r0, r3
 801e72c:	b005      	add	sp, #20
 801e72e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e730:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801e732:	04da      	lsls	r2, r3, #19
 801e734:	d4db      	bmi.n	801e6ee <DisableClock.constprop.0+0x12>
 801e736:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801e738:	05db      	lsls	r3, r3, #23
 801e73a:	d524      	bpl.n	801e786 <DisableClock.constprop.0+0xaa>
 801e73c:	4b6f      	ldr	r3, [pc, #444]	@ (801e8fc <DisableClock.constprop.0+0x220>)
 801e73e:	f894 1058 	ldrb.w	r1, [r4, #88]	@ 0x58
 801e742:	f884 1089 	strb.w	r1, [r4, #137]	@ 0x89
 801e746:	f104 0288 	add.w	r2, r4, #136	@ 0x88
 801e74a:	2010      	movs	r0, #16
 801e74c:	f884 0088 	strb.w	r0, [r4, #136]	@ 0x88
 801e750:	4611      	mov	r1, r2
 801e752:	e9cd 3400 	strd	r3, r4, [sp]
 801e756:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801e75a:	2302      	movs	r3, #2
 801e75c:	f009 fd86 	bl	802826c <ADS_Transfer>
 801e760:	1e03      	subs	r3, r0, #0
 801e762:	dae2      	bge.n	801e72a <DisableClock.constprop.0+0x4e>
 801e764:	6822      	ldr	r2, [r4, #0]
 801e766:	3271      	adds	r2, #113	@ 0x71
 801e768:	bf1c      	itt	ne
 801e76a:	f06f 0271 	mvnne.w	r2, #113	@ 0x71
 801e76e:	6022      	strne	r2, [r4, #0]
 801e770:	f8d4 2104 	ldr.w	r2, [r4, #260]	@ 0x104
 801e774:	2a00      	cmp	r2, #0
 801e776:	d0d8      	beq.n	801e72a <DisableClock.constprop.0+0x4e>
 801e778:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 801e77c:	4618      	mov	r0, r3
 801e77e:	b005      	add	sp, #20
 801e780:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801e784:	4710      	bx	r2
 801e786:	6fa6      	ldr	r6, [r4, #120]	@ 0x78
 801e788:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 801e78a:	4b5d      	ldr	r3, [pc, #372]	@ (801e900 <DisableClock.constprop.0+0x224>)
 801e78c:	f006 7600 	and.w	r6, r6, #33554432	@ 0x2000000
 801e790:	f000 0020 	and.w	r0, r0, #32
 801e794:	4330      	orrs	r0, r6
 801e796:	e9c4 3443 	strd	r3, r4, [r4, #268]	@ 0x10c
 801e79a:	d105      	bne.n	801e7a8 <DisableClock.constprop.0+0xcc>
 801e79c:	4621      	mov	r1, r4
 801e79e:	b005      	add	sp, #20
 801e7a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801e7a4:	f7ff ba0e 	b.w	801dbc4 <WriteRegisterConfiguration>
 801e7a8:	f894 70fb 	ldrb.w	r7, [r4, #251]	@ 0xfb
 801e7ac:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
 801e7b0:	f007 073f 	and.w	r7, r7, #63	@ 0x3f
 801e7b4:	2f09      	cmp	r7, #9
 801e7b6:	a903      	add	r1, sp, #12
 801e7b8:	a802      	add	r0, sp, #8
 801e7ba:	bf94      	ite	ls
 801e7bc:	8bdd      	ldrhls	r5, [r3, #30]
 801e7be:	8c1d      	ldrhhi	r5, [r3, #32]
 801e7c0:	f7e8 fa76 	bl	8006cb0 <Timer_GetCounterValue>
 801e7c4:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
 801e7c8:	f8dd c008 	ldr.w	ip, [sp, #8]
 801e7cc:	f8dd e00c 	ldr.w	lr, [sp, #12]
 801e7d0:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
 801e7d4:	18e9      	adds	r1, r5, r3
 801e7d6:	4d4b      	ldr	r5, [pc, #300]	@ (801e904 <DisableClock.constprop.0+0x228>)
 801e7d8:	bf2c      	ite	cs
 801e7da:	2201      	movcs	r2, #1
 801e7dc:	2200      	movcc	r2, #0
 801e7de:	42a9      	cmp	r1, r5
 801e7e0:	d84d      	bhi.n	801e87e <DisableClock.constprop.0+0x1a2>
 801e7e2:	f082 0201 	eor.w	r2, r2, #1
 801e7e6:	4605      	mov	r5, r0
 801e7e8:	b302      	cbz	r2, 801e82c <DisableClock.constprop.0+0x150>
 801e7ea:	4560      	cmp	r0, ip
 801e7ec:	d05f      	beq.n	801e8ae <DisableClock.constprop.0+0x1d2>
 801e7ee:	bf34      	ite	cc
 801e7f0:	2301      	movcc	r3, #1
 801e7f2:	2300      	movcs	r3, #0
 801e7f4:	b303      	cbz	r3, 801e838 <DisableClock.constprop.0+0x15c>
 801e7f6:	4565      	cmp	r5, ip
 801e7f8:	d06b      	beq.n	801e8d2 <DisableClock.constprop.0+0x1f6>
 801e7fa:	bf34      	ite	cc
 801e7fc:	2101      	movcc	r1, #1
 801e7fe:	2100      	movcs	r1, #0
 801e800:	b9d1      	cbnz	r1, 801e838 <DisableClock.constprop.0+0x15c>
 801e802:	4621      	mov	r1, r4
 801e804:	230a      	movs	r3, #10
 801e806:	f801 3ff8 	strb.w	r3, [r1, #248]!
 801e80a:	4b3f      	ldr	r3, [pc, #252]	@ (801e908 <DisableClock.constprop.0+0x22c>)
 801e80c:	2200      	movs	r2, #0
 801e80e:	e9cd 3400 	strd	r3, r4, [sp]
 801e812:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801e816:	2305      	movs	r3, #5
 801e818:	f009 fd28 	bl	802826c <ADS_Transfer>
 801e81c:	1e03      	subs	r3, r0, #0
 801e81e:	da84      	bge.n	801e72a <DisableClock.constprop.0+0x4e>
 801e820:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 801e824:	b005      	add	sp, #20
 801e826:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801e82a:	4718      	bx	r3
 801e82c:	4560      	cmp	r0, ip
 801e82e:	d03b      	beq.n	801e8a8 <DisableClock.constprop.0+0x1cc>
 801e830:	d3e7      	bcc.n	801e802 <DisableClock.constprop.0+0x126>
 801e832:	4565      	cmp	r5, ip
 801e834:	d052      	beq.n	801e8dc <DisableClock.constprop.0+0x200>
 801e836:	d2e4      	bcs.n	801e802 <DisableClock.constprop.0+0x126>
 801e838:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	@ 0xfa
 801e83c:	f894 10fa 	ldrb.w	r1, [r4, #250]	@ 0xfa
 801e840:	ba5b      	rev16	r3, r3
 801e842:	f3c3 1383 	ubfx	r3, r3, #6, #4
 801e846:	b326      	cbz	r6, 801e892 <DisableClock.constprop.0+0x1b6>
 801e848:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801e84a:	f042 0220 	orr.w	r2, r2, #32
 801e84e:	67a2      	str	r2, [r4, #120]	@ 0x78
 801e850:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801e852:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 801e856:	2600      	movs	r6, #0
 801e858:	67a2      	str	r2, [r4, #120]	@ 0x78
 801e85a:	f3c3 0297 	ubfx	r2, r3, #2, #24
 801e85e:	f021 0103 	bic.w	r1, r1, #3
 801e862:	430a      	orrs	r2, r1
 801e864:	ea46 1383 	orr.w	r3, r6, r3, lsl #6
 801e868:	f884 20fa 	strb.w	r2, [r4, #250]	@ 0xfa
 801e86c:	f884 30fb 	strb.w	r3, [r4, #251]	@ 0xfb
 801e870:	f504 718c 	add.w	r1, r4, #280	@ 0x118
 801e874:	f504 708a 	add.w	r0, r4, #276	@ 0x114
 801e878:	f7e8 fa1a 	bl	8006cb0 <Timer_GetCounterValue>
 801e87c:	e7c1      	b.n	801e802 <DisableClock.constprop.0+0x126>
 801e87e:	1c45      	adds	r5, r0, #1
 801e880:	42a8      	cmp	r0, r5
 801e882:	f5a1 2174 	sub.w	r1, r1, #999424	@ 0xf4000
 801e886:	f5a1 7110 	sub.w	r1, r1, #576	@ 0x240
 801e88a:	bf2c      	ite	cs
 801e88c:	2200      	movcs	r2, #0
 801e88e:	2201      	movcc	r2, #1
 801e890:	e7aa      	b.n	801e7e8 <DisableClock.constprop.0+0x10c>
 801e892:	f8b4 204d 	ldrh.w	r2, [r4, #77]	@ 0x4d
 801e896:	ba52      	rev16	r2, r2
 801e898:	f3c2 1283 	ubfx	r2, r2, #6, #4
 801e89c:	4293      	cmp	r3, r2
 801e89e:	d00b      	beq.n	801e8b8 <DisableClock.constprop.0+0x1dc>
 801e8a0:	2f00      	cmp	r7, #0
 801e8a2:	bf08      	it	eq
 801e8a4:	4613      	moveq	r3, r2
 801e8a6:	e7d8      	b.n	801e85a <DisableClock.constprop.0+0x17e>
 801e8a8:	4573      	cmp	r3, lr
 801e8aa:	d9aa      	bls.n	801e802 <DisableClock.constprop.0+0x126>
 801e8ac:	e7c1      	b.n	801e832 <DisableClock.constprop.0+0x156>
 801e8ae:	4573      	cmp	r3, lr
 801e8b0:	bf8c      	ite	hi
 801e8b2:	2300      	movhi	r3, #0
 801e8b4:	2301      	movls	r3, #1
 801e8b6:	e79d      	b.n	801e7f4 <DisableClock.constprop.0+0x118>
 801e8b8:	f894 204e 	ldrb.w	r2, [r4, #78]	@ 0x4e
 801e8bc:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801e8c0:	4297      	cmp	r7, r2
 801e8c2:	d014      	beq.n	801e8ee <DisableClock.constprop.0+0x212>
 801e8c4:	da0d      	bge.n	801e8e2 <DisableClock.constprop.0+0x206>
 801e8c6:	1c7e      	adds	r6, r7, #1
 801e8c8:	4296      	cmp	r6, r2
 801e8ca:	bfa8      	it	ge
 801e8cc:	4616      	movge	r6, r2
 801e8ce:	b276      	sxtb	r6, r6
 801e8d0:	e7c3      	b.n	801e85a <DisableClock.constprop.0+0x17e>
 801e8d2:	4571      	cmp	r1, lr
 801e8d4:	bf8c      	ite	hi
 801e8d6:	2100      	movhi	r1, #0
 801e8d8:	2101      	movls	r1, #1
 801e8da:	e791      	b.n	801e800 <DisableClock.constprop.0+0x124>
 801e8dc:	4571      	cmp	r1, lr
 801e8de:	d9ab      	bls.n	801e838 <DisableClock.constprop.0+0x15c>
 801e8e0:	e78f      	b.n	801e802 <DisableClock.constprop.0+0x126>
 801e8e2:	b102      	cbz	r2, 801e8e6 <DisableClock.constprop.0+0x20a>
 801e8e4:	1e7e      	subs	r6, r7, #1
 801e8e6:	4296      	cmp	r6, r2
 801e8e8:	bfb8      	it	lt
 801e8ea:	4616      	movlt	r6, r2
 801e8ec:	e7ef      	b.n	801e8ce <DisableClock.constprop.0+0x1f2>
 801e8ee:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 801e8f2:	4630      	mov	r0, r6
 801e8f4:	e796      	b.n	801e824 <DisableClock.constprop.0+0x148>
 801e8f6:	bf00      	nop
 801e8f8:	0801da75 	.word	0x0801da75
 801e8fc:	0801dad5 	.word	0x0801dad5
 801e900:	0801dbc5 	.word	0x0801dbc5
 801e904:	000f423f 	.word	0x000f423f
 801e908:	0801d7e5 	.word	0x0801d7e5

0801e90c <PollPllLocked>:
 801e90c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e90e:	4604      	mov	r4, r0
 801e910:	b085      	sub	sp, #20
 801e912:	a903      	add	r1, sp, #12
 801e914:	a802      	add	r0, sp, #8
 801e916:	f7e8 f9cb 	bl	8006cb0 <Timer_GetCounterValue>
 801e91a:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 801e91e:	4fae      	ldr	r7, [pc, #696]	@ (801ebd8 <PollPllLocked+0x2cc>)
 801e920:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 801e924:	f242 7310 	movw	r3, #10000	@ 0x2710
 801e928:	18d3      	adds	r3, r2, r3
 801e92a:	bf2c      	ite	cs
 801e92c:	2501      	movcs	r5, #1
 801e92e:	2500      	movcc	r5, #0
 801e930:	42bb      	cmp	r3, r7
 801e932:	e9dd 6102 	ldrd	r6, r1, [sp, #8]
 801e936:	d831      	bhi.n	801e99c <PollPllLocked+0x90>
 801e938:	f085 0501 	eor.w	r5, r5, #1
 801e93c:	4684      	mov	ip, r0
 801e93e:	2d00      	cmp	r5, #0
 801e940:	d053      	beq.n	801e9ea <PollPllLocked+0xde>
 801e942:	42b0      	cmp	r0, r6
 801e944:	d035      	beq.n	801e9b2 <PollPllLocked+0xa6>
 801e946:	d236      	bcs.n	801e9b6 <PollPllLocked+0xaa>
 801e948:	4566      	cmp	r6, ip
 801e94a:	d058      	beq.n	801e9fe <PollPllLocked+0xf2>
 801e94c:	bf8c      	ite	hi
 801e94e:	2301      	movhi	r3, #1
 801e950:	2300      	movls	r3, #0
 801e952:	f083 0301 	eor.w	r3, r3, #1
 801e956:	b373      	cbz	r3, 801e9b6 <PollPllLocked+0xaa>
 801e958:	f894 105b 	ldrb.w	r1, [r4, #91]	@ 0x5b
 801e95c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801e95e:	f8b4 0059 	ldrh.w	r0, [r4, #89]	@ 0x59
 801e962:	f8a4 0088 	strh.w	r0, [r4, #136]	@ 0x88
 801e966:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 801e96a:	f884 108a 	strb.w	r1, [r4, #138]	@ 0x8a
 801e96e:	499b      	ldr	r1, [pc, #620]	@ (801ebdc <PollPllLocked+0x2d0>)
 801e970:	f104 0288 	add.w	r2, r4, #136	@ 0x88
 801e974:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801e978:	2012      	movs	r0, #18
 801e97a:	f884 0088 	strb.w	r0, [r4, #136]	@ 0x88
 801e97e:	67a3      	str	r3, [r4, #120]	@ 0x78
 801e980:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801e984:	e9cd 1400 	strd	r1, r4, [sp]
 801e988:	2303      	movs	r3, #3
 801e98a:	4611      	mov	r1, r2
 801e98c:	f009 fc6e 	bl	802826c <ADS_Transfer>
 801e990:	1e03      	subs	r3, r0, #0
 801e992:	f2c0 80fb 	blt.w	801eb8c <PollPllLocked+0x280>
 801e996:	4618      	mov	r0, r3
 801e998:	b005      	add	sp, #20
 801e99a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e99c:	f100 0c01 	add.w	ip, r0, #1
 801e9a0:	4560      	cmp	r0, ip
 801e9a2:	f5a2 2371 	sub.w	r3, r2, #987136	@ 0xf1000
 801e9a6:	f5a3 6333 	sub.w	r3, r3, #2864	@ 0xb30
 801e9aa:	bf2c      	ite	cs
 801e9ac:	2500      	movcs	r5, #0
 801e9ae:	2501      	movcc	r5, #1
 801e9b0:	e7c5      	b.n	801e93e <PollPllLocked+0x32>
 801e9b2:	428a      	cmp	r2, r1
 801e9b4:	d9c8      	bls.n	801e948 <PollPllLocked+0x3c>
 801e9b6:	f894 3064 	ldrb.w	r3, [r4, #100]	@ 0x64
 801e9ba:	f894 10fd 	ldrb.w	r1, [r4, #253]	@ 0xfd
 801e9be:	1c5a      	adds	r2, r3, #1
 801e9c0:	f002 0203 	and.w	r2, r2, #3
 801e9c4:	f3c1 0181 	ubfx	r1, r1, #2, #2
 801e9c8:	4291      	cmp	r1, r2
 801e9ca:	d01d      	beq.n	801ea08 <PollPllLocked+0xfc>
 801e9cc:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 801e9ce:	f023 0303 	bic.w	r3, r3, #3
 801e9d2:	4313      	orrs	r3, r2
 801e9d4:	f441 6100 	orr.w	r1, r1, #2048	@ 0x800
 801e9d8:	4620      	mov	r0, r4
 801e9da:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 801e9de:	67a1      	str	r1, [r4, #120]	@ 0x78
 801e9e0:	b005      	add	sp, #20
 801e9e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801e9e6:	f7ff be79 	b.w	801e6dc <DisableClock.constprop.0>
 801e9ea:	42b0      	cmp	r0, r6
 801e9ec:	f000 809e 	beq.w	801eb2c <PollPllLocked+0x220>
 801e9f0:	bf34      	ite	cc
 801e9f2:	2201      	movcc	r2, #1
 801e9f4:	2200      	movcs	r2, #0
 801e9f6:	2a00      	cmp	r2, #0
 801e9f8:	d1ae      	bne.n	801e958 <PollPllLocked+0x4c>
 801e9fa:	4566      	cmp	r6, ip
 801e9fc:	d1a6      	bne.n	801e94c <PollPllLocked+0x40>
 801e9fe:	4299      	cmp	r1, r3
 801ea00:	bf34      	ite	cc
 801ea02:	2300      	movcc	r3, #0
 801ea04:	2301      	movcs	r3, #1
 801ea06:	e7a4      	b.n	801e952 <PollPllLocked+0x46>
 801ea08:	4875      	ldr	r0, [pc, #468]	@ (801ebe0 <PollPllLocked+0x2d4>)
 801ea0a:	f242 7110 	movw	r1, #10000	@ 0x2710
 801ea0e:	f7f4 fac1 	bl	8012f94 <print>
 801ea12:	6fa5      	ldr	r5, [r4, #120]	@ 0x78
 801ea14:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 801ea16:	4b73      	ldr	r3, [pc, #460]	@ (801ebe4 <PollPllLocked+0x2d8>)
 801ea18:	f8c4 310c 	str.w	r3, [r4, #268]	@ 0x10c
 801ea1c:	f005 7500 	and.w	r5, r5, #33554432	@ 0x2000000
 801ea20:	f000 0020 	and.w	r0, r0, #32
 801ea24:	4328      	orrs	r0, r5
 801ea26:	f8c4 4110 	str.w	r4, [r4, #272]	@ 0x110
 801ea2a:	f000 8092 	beq.w	801eb52 <PollPllLocked+0x246>
 801ea2e:	f894 60fb 	ldrb.w	r6, [r4, #251]	@ 0xfb
 801ea32:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
 801ea36:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 801ea3a:	2e09      	cmp	r6, #9
 801ea3c:	a903      	add	r1, sp, #12
 801ea3e:	a802      	add	r0, sp, #8
 801ea40:	bf94      	ite	ls
 801ea42:	8bdf      	ldrhls	r7, [r3, #30]
 801ea44:	8c1f      	ldrhhi	r7, [r3, #32]
 801ea46:	f7e8 f933 	bl	8006cb0 <Timer_GetCounterValue>
 801ea4a:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
 801ea4e:	f8dd c008 	ldr.w	ip, [sp, #8]
 801ea52:	9a03      	ldr	r2, [sp, #12]
 801ea54:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
 801ea58:	18f9      	adds	r1, r7, r3
 801ea5a:	4f5f      	ldr	r7, [pc, #380]	@ (801ebd8 <PollPllLocked+0x2cc>)
 801ea5c:	bf2c      	ite	cs
 801ea5e:	f04f 0e01 	movcs.w	lr, #1
 801ea62:	f04f 0e00 	movcc.w	lr, #0
 801ea66:	42b9      	cmp	r1, r7
 801ea68:	d84b      	bhi.n	801eb02 <PollPllLocked+0x1f6>
 801ea6a:	4607      	mov	r7, r0
 801ea6c:	f1be 0f00 	cmp.w	lr, #0
 801ea70:	d14f      	bne.n	801eb12 <PollPllLocked+0x206>
 801ea72:	4560      	cmp	r0, ip
 801ea74:	f000 80a1 	beq.w	801ebba <PollPllLocked+0x2ae>
 801ea78:	bf34      	ite	cc
 801ea7a:	2301      	movcc	r3, #1
 801ea7c:	2300      	movcs	r3, #0
 801ea7e:	b13b      	cbz	r3, 801ea90 <PollPllLocked+0x184>
 801ea80:	4567      	cmp	r7, ip
 801ea82:	d079      	beq.n	801eb78 <PollPllLocked+0x26c>
 801ea84:	bf34      	ite	cc
 801ea86:	2301      	movcc	r3, #1
 801ea88:	2300      	movcs	r3, #0
 801ea8a:	f083 0301 	eor.w	r3, r3, #1
 801ea8e:	bb13      	cbnz	r3, 801ead6 <PollPllLocked+0x1ca>
 801ea90:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	@ 0xfa
 801ea94:	f894 10fa 	ldrb.w	r1, [r4, #250]	@ 0xfa
 801ea98:	ba5b      	rev16	r3, r3
 801ea9a:	f3c3 1383 	ubfx	r3, r3, #6, #4
 801ea9e:	2d00      	cmp	r5, #0
 801eaa0:	d04c      	beq.n	801eb3c <PollPllLocked+0x230>
 801eaa2:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801eaa4:	f042 0220 	orr.w	r2, r2, #32
 801eaa8:	67a2      	str	r2, [r4, #120]	@ 0x78
 801eaaa:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801eaac:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 801eab0:	2500      	movs	r5, #0
 801eab2:	67a2      	str	r2, [r4, #120]	@ 0x78
 801eab4:	f3c3 0297 	ubfx	r2, r3, #2, #24
 801eab8:	f021 0103 	bic.w	r1, r1, #3
 801eabc:	4311      	orrs	r1, r2
 801eabe:	ea45 1383 	orr.w	r3, r5, r3, lsl #6
 801eac2:	f884 10fa 	strb.w	r1, [r4, #250]	@ 0xfa
 801eac6:	f884 30fb 	strb.w	r3, [r4, #251]	@ 0xfb
 801eaca:	f504 718c 	add.w	r1, r4, #280	@ 0x118
 801eace:	f504 708a 	add.w	r0, r4, #276	@ 0x114
 801ead2:	f7e8 f8ed 	bl	8006cb0 <Timer_GetCounterValue>
 801ead6:	4621      	mov	r1, r4
 801ead8:	230a      	movs	r3, #10
 801eada:	f801 3ff8 	strb.w	r3, [r1, #248]!
 801eade:	4b42      	ldr	r3, [pc, #264]	@ (801ebe8 <PollPllLocked+0x2dc>)
 801eae0:	2200      	movs	r2, #0
 801eae2:	e9cd 3400 	strd	r3, r4, [sp]
 801eae6:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801eaea:	2305      	movs	r3, #5
 801eaec:	f009 fbbe 	bl	802826c <ADS_Transfer>
 801eaf0:	1e03      	subs	r3, r0, #0
 801eaf2:	f6bf af50 	bge.w	801e996 <PollPllLocked+0x8a>
 801eaf6:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 801eafa:	b005      	add	sp, #20
 801eafc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801eb00:	4718      	bx	r3
 801eb02:	1c47      	adds	r7, r0, #1
 801eb04:	f5a1 2174 	sub.w	r1, r1, #999424	@ 0xf4000
 801eb08:	42b8      	cmp	r0, r7
 801eb0a:	f5a1 7110 	sub.w	r1, r1, #576	@ 0x240
 801eb0e:	d3b0      	bcc.n	801ea72 <PollPllLocked+0x166>
 801eb10:	2700      	movs	r7, #0
 801eb12:	4560      	cmp	r0, ip
 801eb14:	d04c      	beq.n	801ebb0 <PollPllLocked+0x2a4>
 801eb16:	bf34      	ite	cc
 801eb18:	2301      	movcc	r3, #1
 801eb1a:	2300      	movcs	r3, #0
 801eb1c:	2b00      	cmp	r3, #0
 801eb1e:	d1da      	bne.n	801ead6 <PollPllLocked+0x1ca>
 801eb20:	45bc      	cmp	ip, r7
 801eb22:	d02e      	beq.n	801eb82 <PollPllLocked+0x276>
 801eb24:	bf8c      	ite	hi
 801eb26:	2301      	movhi	r3, #1
 801eb28:	2300      	movls	r3, #0
 801eb2a:	e7ae      	b.n	801ea8a <PollPllLocked+0x17e>
 801eb2c:	428a      	cmp	r2, r1
 801eb2e:	bf8c      	ite	hi
 801eb30:	2200      	movhi	r2, #0
 801eb32:	2201      	movls	r2, #1
 801eb34:	2a00      	cmp	r2, #0
 801eb36:	f47f af0f 	bne.w	801e958 <PollPllLocked+0x4c>
 801eb3a:	e75e      	b.n	801e9fa <PollPllLocked+0xee>
 801eb3c:	f8b4 204d 	ldrh.w	r2, [r4, #77]	@ 0x4d
 801eb40:	ba52      	rev16	r2, r2
 801eb42:	f3c2 1283 	ubfx	r2, r2, #6, #4
 801eb46:	4293      	cmp	r3, r2
 801eb48:	d009      	beq.n	801eb5e <PollPllLocked+0x252>
 801eb4a:	2e00      	cmp	r6, #0
 801eb4c:	bf08      	it	eq
 801eb4e:	4613      	moveq	r3, r2
 801eb50:	e7b0      	b.n	801eab4 <PollPllLocked+0x1a8>
 801eb52:	4621      	mov	r1, r4
 801eb54:	b005      	add	sp, #20
 801eb56:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801eb5a:	f7ff b833 	b.w	801dbc4 <WriteRegisterConfiguration>
 801eb5e:	f894 204e 	ldrb.w	r2, [r4, #78]	@ 0x4e
 801eb62:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801eb66:	4296      	cmp	r6, r2
 801eb68:	d032      	beq.n	801ebd0 <PollPllLocked+0x2c4>
 801eb6a:	da2b      	bge.n	801ebc4 <PollPllLocked+0x2b8>
 801eb6c:	1c75      	adds	r5, r6, #1
 801eb6e:	42aa      	cmp	r2, r5
 801eb70:	bfa8      	it	ge
 801eb72:	462a      	movge	r2, r5
 801eb74:	b255      	sxtb	r5, r2
 801eb76:	e79d      	b.n	801eab4 <PollPllLocked+0x1a8>
 801eb78:	4291      	cmp	r1, r2
 801eb7a:	bf8c      	ite	hi
 801eb7c:	2300      	movhi	r3, #0
 801eb7e:	2301      	movls	r3, #1
 801eb80:	e783      	b.n	801ea8a <PollPllLocked+0x17e>
 801eb82:	428a      	cmp	r2, r1
 801eb84:	bf34      	ite	cc
 801eb86:	2300      	movcc	r3, #0
 801eb88:	2301      	movcs	r3, #1
 801eb8a:	e77e      	b.n	801ea8a <PollPllLocked+0x17e>
 801eb8c:	6822      	ldr	r2, [r4, #0]
 801eb8e:	3271      	adds	r2, #113	@ 0x71
 801eb90:	bf1c      	itt	ne
 801eb92:	f06f 0271 	mvnne.w	r2, #113	@ 0x71
 801eb96:	6022      	strne	r2, [r4, #0]
 801eb98:	f8d4 2104 	ldr.w	r2, [r4, #260]	@ 0x104
 801eb9c:	2a00      	cmp	r2, #0
 801eb9e:	f43f aefa 	beq.w	801e996 <PollPllLocked+0x8a>
 801eba2:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 801eba6:	4618      	mov	r0, r3
 801eba8:	b005      	add	sp, #20
 801ebaa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ebae:	4710      	bx	r2
 801ebb0:	4293      	cmp	r3, r2
 801ebb2:	bf8c      	ite	hi
 801ebb4:	2300      	movhi	r3, #0
 801ebb6:	2301      	movls	r3, #1
 801ebb8:	e7b0      	b.n	801eb1c <PollPllLocked+0x210>
 801ebba:	4293      	cmp	r3, r2
 801ebbc:	bf8c      	ite	hi
 801ebbe:	2300      	movhi	r3, #0
 801ebc0:	2301      	movls	r3, #1
 801ebc2:	e75c      	b.n	801ea7e <PollPllLocked+0x172>
 801ebc4:	b102      	cbz	r2, 801ebc8 <PollPllLocked+0x2bc>
 801ebc6:	1e75      	subs	r5, r6, #1
 801ebc8:	42aa      	cmp	r2, r5
 801ebca:	bfb8      	it	lt
 801ebcc:	462a      	movlt	r2, r5
 801ebce:	e7d1      	b.n	801eb74 <PollPllLocked+0x268>
 801ebd0:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 801ebd4:	4628      	mov	r0, r5
 801ebd6:	e790      	b.n	801eafa <PollPllLocked+0x1ee>
 801ebd8:	000f423f 	.word	0x000f423f
 801ebdc:	0801ee61 	.word	0x0801ee61
 801ebe0:	0802e180 	.word	0x0802e180
 801ebe4:	0801dbc5 	.word	0x0801dbc5
 801ebe8:	0801d7e5 	.word	0x0801d7e5

0801ebec <VerifyBlockEnable>:
 801ebec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ebee:	2800      	cmp	r0, #0
 801ebf0:	b085      	sub	sp, #20
 801ebf2:	460c      	mov	r4, r1
 801ebf4:	f2c0 80f7 	blt.w	801ede6 <VerifyBlockEnable+0x1fa>
 801ebf8:	f891 2089 	ldrb.w	r2, [r1, #137]	@ 0x89
 801ebfc:	f891 3058 	ldrb.w	r3, [r1, #88]	@ 0x58
 801ec00:	f012 0001 	ands.w	r0, r2, #1
 801ec04:	d058      	beq.n	801ecb8 <VerifyBlockEnable+0xcc>
 801ec06:	07d9      	lsls	r1, r3, #31
 801ec08:	d556      	bpl.n	801ecb8 <VerifyBlockEnable+0xcc>
 801ec0a:	4053      	eors	r3, r2
 801ec0c:	f013 0fef 	tst.w	r3, #239	@ 0xef
 801ec10:	bf0c      	ite	eq
 801ec12:	2301      	moveq	r3, #1
 801ec14:	2300      	movne	r3, #0
 801ec16:	2b00      	cmp	r3, #0
 801ec18:	f000 80bb 	beq.w	801ed92 <VerifyBlockEnable+0x1a6>
 801ec1c:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 801ec1e:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 801ec22:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 801ec26:	06d2      	lsls	r2, r2, #27
 801ec28:	67a1      	str	r1, [r4, #120]	@ 0x78
 801ec2a:	f003 0110 	and.w	r1, r3, #16
 801ec2e:	d448      	bmi.n	801ecc2 <VerifyBlockEnable+0xd6>
 801ec30:	f023 0310 	bic.w	r3, r3, #16
 801ec34:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801ec36:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 801ec3a:	6fa6      	ldr	r6, [r4, #120]	@ 0x78
 801ec3c:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 801ec3e:	4b84      	ldr	r3, [pc, #528]	@ (801ee50 <VerifyBlockEnable+0x264>)
 801ec40:	f006 7600 	and.w	r6, r6, #33554432	@ 0x2000000
 801ec44:	f000 0020 	and.w	r0, r0, #32
 801ec48:	4330      	orrs	r0, r6
 801ec4a:	e9c4 3443 	strd	r3, r4, [r4, #268]	@ 0x10c
 801ec4e:	d052      	beq.n	801ecf6 <VerifyBlockEnable+0x10a>
 801ec50:	f894 70fb 	ldrb.w	r7, [r4, #251]	@ 0xfb
 801ec54:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
 801ec58:	f007 073f 	and.w	r7, r7, #63	@ 0x3f
 801ec5c:	2f09      	cmp	r7, #9
 801ec5e:	a903      	add	r1, sp, #12
 801ec60:	a802      	add	r0, sp, #8
 801ec62:	bf94      	ite	ls
 801ec64:	8bdd      	ldrhls	r5, [r3, #30]
 801ec66:	8c1d      	ldrhhi	r5, [r3, #32]
 801ec68:	f7e8 f822 	bl	8006cb0 <Timer_GetCounterValue>
 801ec6c:	f8d4 1118 	ldr.w	r1, [r4, #280]	@ 0x118
 801ec70:	f8dd c008 	ldr.w	ip, [sp, #8]
 801ec74:	9a03      	ldr	r2, [sp, #12]
 801ec76:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
 801ec7a:	186b      	adds	r3, r5, r1
 801ec7c:	4d75      	ldr	r5, [pc, #468]	@ (801ee54 <VerifyBlockEnable+0x268>)
 801ec7e:	bf2c      	ite	cs
 801ec80:	f04f 0e01 	movcs.w	lr, #1
 801ec84:	f04f 0e00 	movcc.w	lr, #0
 801ec88:	42ab      	cmp	r3, r5
 801ec8a:	d93a      	bls.n	801ed02 <VerifyBlockEnable+0x116>
 801ec8c:	1c45      	adds	r5, r0, #1
 801ec8e:	f5a3 2374 	sub.w	r3, r3, #999424	@ 0xf4000
 801ec92:	42a8      	cmp	r0, r5
 801ec94:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 801ec98:	d237      	bcs.n	801ed0a <VerifyBlockEnable+0x11e>
 801ec9a:	4560      	cmp	r0, ip
 801ec9c:	f000 80bc 	beq.w	801ee18 <VerifyBlockEnable+0x22c>
 801eca0:	bf34      	ite	cc
 801eca2:	2101      	movcc	r1, #1
 801eca4:	2100      	movcs	r1, #0
 801eca6:	2900      	cmp	r1, #0
 801eca8:	d04f      	beq.n	801ed4a <VerifyBlockEnable+0x15e>
 801ecaa:	4565      	cmp	r5, ip
 801ecac:	f000 80af 	beq.w	801ee0e <VerifyBlockEnable+0x222>
 801ecb0:	bf34      	ite	cc
 801ecb2:	2301      	movcc	r3, #1
 801ecb4:	2300      	movcs	r3, #0
 801ecb6:	e044      	b.n	801ed42 <VerifyBlockEnable+0x156>
 801ecb8:	1ad3      	subs	r3, r2, r3
 801ecba:	fab3 f383 	clz	r3, r3
 801ecbe:	095b      	lsrs	r3, r3, #5
 801ecc0:	e7a9      	b.n	801ec16 <VerifyBlockEnable+0x2a>
 801ecc2:	2800      	cmp	r0, #0
 801ecc4:	d1b4      	bne.n	801ec30 <VerifyBlockEnable+0x44>
 801ecc6:	f043 0310 	orr.w	r3, r3, #16
 801ecca:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801eccc:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 801ecd0:	b109      	cbz	r1, 801ecd6 <VerifyBlockEnable+0xea>
 801ecd2:	0153      	lsls	r3, r2, #5
 801ecd4:	d5b1      	bpl.n	801ec3a <VerifyBlockEnable+0x4e>
 801ecd6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801ecd8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801ecdc:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801ece0:	f104 0184 	add.w	r1, r4, #132	@ 0x84
 801ece4:	67a3      	str	r3, [r4, #120]	@ 0x78
 801ece6:	f7e7 ffe3 	bl	8006cb0 <Timer_GetCounterValue>
 801ecea:	4620      	mov	r0, r4
 801ecec:	b005      	add	sp, #20
 801ecee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ecf2:	f7ff be0b 	b.w	801e90c <PollPllLocked>
 801ecf6:	4621      	mov	r1, r4
 801ecf8:	b005      	add	sp, #20
 801ecfa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ecfe:	f7fe bf61 	b.w	801dbc4 <WriteRegisterConfiguration>
 801ed02:	4605      	mov	r5, r0
 801ed04:	f1be 0f00 	cmp.w	lr, #0
 801ed08:	d0c7      	beq.n	801ec9a <VerifyBlockEnable+0xae>
 801ed0a:	4560      	cmp	r0, ip
 801ed0c:	d012      	beq.n	801ed34 <VerifyBlockEnable+0x148>
 801ed0e:	d213      	bcs.n	801ed38 <VerifyBlockEnable+0x14c>
 801ed10:	4621      	mov	r1, r4
 801ed12:	230a      	movs	r3, #10
 801ed14:	f801 3ff8 	strb.w	r3, [r1, #248]!
 801ed18:	4b4f      	ldr	r3, [pc, #316]	@ (801ee58 <VerifyBlockEnable+0x26c>)
 801ed1a:	2200      	movs	r2, #0
 801ed1c:	e9cd 3400 	strd	r3, r4, [sp]
 801ed20:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801ed24:	2305      	movs	r3, #5
 801ed26:	f009 faa1 	bl	802826c <ADS_Transfer>
 801ed2a:	1e03      	subs	r3, r0, #0
 801ed2c:	db6c      	blt.n	801ee08 <VerifyBlockEnable+0x21c>
 801ed2e:	4618      	mov	r0, r3
 801ed30:	b005      	add	sp, #20
 801ed32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ed34:	428a      	cmp	r2, r1
 801ed36:	d2eb      	bcs.n	801ed10 <VerifyBlockEnable+0x124>
 801ed38:	45ac      	cmp	ip, r5
 801ed3a:	d068      	beq.n	801ee0e <VerifyBlockEnable+0x222>
 801ed3c:	bf8c      	ite	hi
 801ed3e:	2301      	movhi	r3, #1
 801ed40:	2300      	movls	r3, #0
 801ed42:	f083 0301 	eor.w	r3, r3, #1
 801ed46:	2b00      	cmp	r3, #0
 801ed48:	d1e2      	bne.n	801ed10 <VerifyBlockEnable+0x124>
 801ed4a:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	@ 0xfa
 801ed4e:	f894 10fa 	ldrb.w	r1, [r4, #250]	@ 0xfa
 801ed52:	ba5b      	rev16	r3, r3
 801ed54:	f3c3 1383 	ubfx	r3, r3, #6, #4
 801ed58:	2e00      	cmp	r6, #0
 801ed5a:	d039      	beq.n	801edd0 <VerifyBlockEnable+0x1e4>
 801ed5c:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801ed5e:	f042 0220 	orr.w	r2, r2, #32
 801ed62:	67a2      	str	r2, [r4, #120]	@ 0x78
 801ed64:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801ed66:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 801ed6a:	2600      	movs	r6, #0
 801ed6c:	67a2      	str	r2, [r4, #120]	@ 0x78
 801ed6e:	f3c3 0297 	ubfx	r2, r3, #2, #24
 801ed72:	f021 0103 	bic.w	r1, r1, #3
 801ed76:	4311      	orrs	r1, r2
 801ed78:	ea46 1383 	orr.w	r3, r6, r3, lsl #6
 801ed7c:	f884 10fa 	strb.w	r1, [r4, #250]	@ 0xfa
 801ed80:	f884 30fb 	strb.w	r3, [r4, #251]	@ 0xfb
 801ed84:	f504 718c 	add.w	r1, r4, #280	@ 0x118
 801ed88:	f504 708a 	add.w	r0, r4, #276	@ 0x114
 801ed8c:	f7e7 ff90 	bl	8006cb0 <Timer_GetCounterValue>
 801ed90:	e7be      	b.n	801ed10 <VerifyBlockEnable+0x124>
 801ed92:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 801ed94:	4a31      	ldr	r2, [pc, #196]	@ (801ee5c <VerifyBlockEnable+0x270>)
 801ed96:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 801ed9a:	430a      	orrs	r2, r1
 801ed9c:	67a2      	str	r2, [r4, #120]	@ 0x78
 801ed9e:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801eda0:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 801eda4:	67a2      	str	r2, [r4, #120]	@ 0x78
 801eda6:	6822      	ldr	r2, [r4, #0]
 801eda8:	f043 0302 	orr.w	r3, r3, #2
 801edac:	3271      	adds	r2, #113	@ 0x71
 801edae:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 801edb2:	bf1c      	itt	ne
 801edb4:	f06f 0371 	mvnne.w	r3, #113	@ 0x71
 801edb8:	6023      	strne	r3, [r4, #0]
 801edba:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 801edbe:	b303      	cbz	r3, 801ee02 <VerifyBlockEnable+0x216>
 801edc0:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 801edc4:	f06f 0071 	mvn.w	r0, #113	@ 0x71
 801edc8:	b005      	add	sp, #20
 801edca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801edce:	4718      	bx	r3
 801edd0:	f8b4 204d 	ldrh.w	r2, [r4, #77]	@ 0x4d
 801edd4:	ba52      	rev16	r2, r2
 801edd6:	f3c2 1283 	ubfx	r2, r2, #6, #4
 801edda:	4293      	cmp	r3, r2
 801eddc:	d021      	beq.n	801ee22 <VerifyBlockEnable+0x236>
 801edde:	2f00      	cmp	r7, #0
 801ede0:	bf08      	it	eq
 801ede2:	4613      	moveq	r3, r2
 801ede4:	e7c3      	b.n	801ed6e <VerifyBlockEnable+0x182>
 801ede6:	680b      	ldr	r3, [r1, #0]
 801ede8:	3371      	adds	r3, #113	@ 0x71
 801edea:	bf1c      	itt	ne
 801edec:	f06f 0371 	mvnne.w	r3, #113	@ 0x71
 801edf0:	600b      	strne	r3, [r1, #0]
 801edf2:	f8d1 3104 	ldr.w	r3, [r1, #260]	@ 0x104
 801edf6:	b113      	cbz	r3, 801edfe <VerifyBlockEnable+0x212>
 801edf8:	f8d1 1108 	ldr.w	r1, [r1, #264]	@ 0x108
 801edfc:	e7e4      	b.n	801edc8 <VerifyBlockEnable+0x1dc>
 801edfe:	4603      	mov	r3, r0
 801ee00:	e795      	b.n	801ed2e <VerifyBlockEnable+0x142>
 801ee02:	f06f 0371 	mvn.w	r3, #113	@ 0x71
 801ee06:	e792      	b.n	801ed2e <VerifyBlockEnable+0x142>
 801ee08:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 801ee0c:	e7dc      	b.n	801edc8 <VerifyBlockEnable+0x1dc>
 801ee0e:	429a      	cmp	r2, r3
 801ee10:	bf34      	ite	cc
 801ee12:	2300      	movcc	r3, #0
 801ee14:	2301      	movcs	r3, #1
 801ee16:	e794      	b.n	801ed42 <VerifyBlockEnable+0x156>
 801ee18:	428a      	cmp	r2, r1
 801ee1a:	bf34      	ite	cc
 801ee1c:	2100      	movcc	r1, #0
 801ee1e:	2101      	movcs	r1, #1
 801ee20:	e741      	b.n	801eca6 <VerifyBlockEnable+0xba>
 801ee22:	f894 204e 	ldrb.w	r2, [r4, #78]	@ 0x4e
 801ee26:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801ee2a:	4297      	cmp	r7, r2
 801ee2c:	d00c      	beq.n	801ee48 <VerifyBlockEnable+0x25c>
 801ee2e:	da05      	bge.n	801ee3c <VerifyBlockEnable+0x250>
 801ee30:	1c7e      	adds	r6, r7, #1
 801ee32:	42b2      	cmp	r2, r6
 801ee34:	bfa8      	it	ge
 801ee36:	4632      	movge	r2, r6
 801ee38:	b256      	sxtb	r6, r2
 801ee3a:	e798      	b.n	801ed6e <VerifyBlockEnable+0x182>
 801ee3c:	b102      	cbz	r2, 801ee40 <VerifyBlockEnable+0x254>
 801ee3e:	1e7e      	subs	r6, r7, #1
 801ee40:	42b2      	cmp	r2, r6
 801ee42:	bfb8      	it	lt
 801ee44:	4632      	movlt	r2, r6
 801ee46:	e7f7      	b.n	801ee38 <VerifyBlockEnable+0x24c>
 801ee48:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 801ee4c:	4630      	mov	r0, r6
 801ee4e:	e7bb      	b.n	801edc8 <VerifyBlockEnable+0x1dc>
 801ee50:	0801dbc5 	.word	0x0801dbc5
 801ee54:	000f423f 	.word	0x000f423f
 801ee58:	0801d7e5 	.word	0x0801d7e5
 801ee5c:	0003dffe 	.word	0x0003dffe

0801ee60 <CheckPllLocked>:
 801ee60:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ee62:	2800      	cmp	r0, #0
 801ee64:	b085      	sub	sp, #20
 801ee66:	460c      	mov	r4, r1
 801ee68:	f2c0 8099 	blt.w	801ef9e <CheckPllLocked+0x13e>
 801ee6c:	f891 308a 	ldrb.w	r3, [r1, #138]	@ 0x8a
 801ee70:	f8d1 2100 	ldr.w	r2, [r1, #256]	@ 0x100
 801ee74:	0658      	lsls	r0, r3, #25
 801ee76:	f140 8086 	bpl.w	801ef86 <CheckPllLocked+0x126>
 801ee7a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801ee7e:	f8c1 2100 	str.w	r2, [r1, #256]	@ 0x100
 801ee82:	069a      	lsls	r2, r3, #26
 801ee84:	f140 80af 	bpl.w	801efe6 <CheckPllLocked+0x186>
 801ee88:	4886      	ldr	r0, [pc, #536]	@ (801f0a4 <CheckPllLocked+0x244>)
 801ee8a:	f891 30fd 	ldrb.w	r3, [r1, #253]	@ 0xfd
 801ee8e:	6f8e      	ldr	r6, [r1, #120]	@ 0x78
 801ee90:	f891 2064 	ldrb.w	r2, [r1, #100]	@ 0x64
 801ee94:	f8c1 010c 	str.w	r0, [r1, #268]	@ 0x10c
 801ee98:	6f88      	ldr	r0, [r1, #120]	@ 0x78
 801ee9a:	f002 0203 	and.w	r2, r2, #3
 801ee9e:	f023 030c 	bic.w	r3, r3, #12
 801eea2:	f006 7600 	and.w	r6, r6, #33554432	@ 0x2000000
 801eea6:	f000 0020 	and.w	r0, r0, #32
 801eeaa:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 801eeae:	4330      	orrs	r0, r6
 801eeb0:	f881 30fd 	strb.w	r3, [r1, #253]	@ 0xfd
 801eeb4:	f8c4 1110 	str.w	r1, [r4, #272]	@ 0x110
 801eeb8:	f000 80bc 	beq.w	801f034 <CheckPllLocked+0x1d4>
 801eebc:	f891 70fb 	ldrb.w	r7, [r1, #251]	@ 0xfb
 801eec0:	f8d1 311c 	ldr.w	r3, [r1, #284]	@ 0x11c
 801eec4:	f007 073f 	and.w	r7, r7, #63	@ 0x3f
 801eec8:	2f09      	cmp	r7, #9
 801eeca:	a903      	add	r1, sp, #12
 801eecc:	a802      	add	r0, sp, #8
 801eece:	bf94      	ite	ls
 801eed0:	8bdd      	ldrhls	r5, [r3, #30]
 801eed2:	8c1d      	ldrhhi	r5, [r3, #32]
 801eed4:	f7e7 feec 	bl	8006cb0 <Timer_GetCounterValue>
 801eed8:	f8d4 2118 	ldr.w	r2, [r4, #280]	@ 0x118
 801eedc:	f8dd c008 	ldr.w	ip, [sp, #8]
 801eee0:	f8dd e00c 	ldr.w	lr, [sp, #12]
 801eee4:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
 801eee8:	18ab      	adds	r3, r5, r2
 801eeea:	4d6f      	ldr	r5, [pc, #444]	@ (801f0a8 <CheckPllLocked+0x248>)
 801eeec:	bf2c      	ite	cs
 801eeee:	2101      	movcs	r1, #1
 801eef0:	2100      	movcc	r1, #0
 801eef2:	42ab      	cmp	r3, r5
 801eef4:	d862      	bhi.n	801efbc <CheckPllLocked+0x15c>
 801eef6:	f081 0101 	eor.w	r1, r1, #1
 801eefa:	4605      	mov	r5, r0
 801eefc:	2900      	cmp	r1, #0
 801eefe:	d06b      	beq.n	801efd8 <CheckPllLocked+0x178>
 801ef00:	4560      	cmp	r0, ip
 801ef02:	f000 80bb 	beq.w	801f07c <CheckPllLocked+0x21c>
 801ef06:	bf34      	ite	cc
 801ef08:	2201      	movcc	r2, #1
 801ef0a:	2200      	movcs	r2, #0
 801ef0c:	b132      	cbz	r2, 801ef1c <CheckPllLocked+0xbc>
 801ef0e:	4565      	cmp	r5, ip
 801ef10:	f000 80a5 	beq.w	801f05e <CheckPllLocked+0x1fe>
 801ef14:	bf34      	ite	cc
 801ef16:	2301      	movcc	r3, #1
 801ef18:	2300      	movcs	r3, #0
 801ef1a:	b313      	cbz	r3, 801ef62 <CheckPllLocked+0x102>
 801ef1c:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	@ 0xfa
 801ef20:	f894 10fa 	ldrb.w	r1, [r4, #250]	@ 0xfa
 801ef24:	ba5b      	rev16	r3, r3
 801ef26:	f3c3 1383 	ubfx	r3, r3, #6, #4
 801ef2a:	2e00      	cmp	r6, #0
 801ef2c:	d077      	beq.n	801f01e <CheckPllLocked+0x1be>
 801ef2e:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801ef30:	f042 0220 	orr.w	r2, r2, #32
 801ef34:	67a2      	str	r2, [r4, #120]	@ 0x78
 801ef36:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801ef38:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 801ef3c:	2600      	movs	r6, #0
 801ef3e:	67a2      	str	r2, [r4, #120]	@ 0x78
 801ef40:	f3c3 0297 	ubfx	r2, r3, #2, #24
 801ef44:	f021 0103 	bic.w	r1, r1, #3
 801ef48:	4311      	orrs	r1, r2
 801ef4a:	ea46 1383 	orr.w	r3, r6, r3, lsl #6
 801ef4e:	f884 10fa 	strb.w	r1, [r4, #250]	@ 0xfa
 801ef52:	f884 30fb 	strb.w	r3, [r4, #251]	@ 0xfb
 801ef56:	f504 718c 	add.w	r1, r4, #280	@ 0x118
 801ef5a:	f504 708a 	add.w	r0, r4, #276	@ 0x114
 801ef5e:	f7e7 fea7 	bl	8006cb0 <Timer_GetCounterValue>
 801ef62:	4621      	mov	r1, r4
 801ef64:	230a      	movs	r3, #10
 801ef66:	f801 3ff8 	strb.w	r3, [r1, #248]!
 801ef6a:	4b50      	ldr	r3, [pc, #320]	@ (801f0ac <CheckPllLocked+0x24c>)
 801ef6c:	2200      	movs	r2, #0
 801ef6e:	e9cd 3400 	strd	r3, r4, [sp]
 801ef72:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801ef76:	2305      	movs	r3, #5
 801ef78:	f009 f978 	bl	802826c <ADS_Transfer>
 801ef7c:	1e03      	subs	r3, r0, #0
 801ef7e:	db76      	blt.n	801f06e <CheckPllLocked+0x20e>
 801ef80:	4618      	mov	r0, r3
 801ef82:	b005      	add	sp, #20
 801ef84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ef86:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801ef8a:	069b      	lsls	r3, r3, #26
 801ef8c:	f8c1 2100 	str.w	r2, [r1, #256]	@ 0x100
 801ef90:	d529      	bpl.n	801efe6 <CheckPllLocked+0x186>
 801ef92:	4608      	mov	r0, r1
 801ef94:	b005      	add	sp, #20
 801ef96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ef9a:	f7ff bcb7 	b.w	801e90c <PollPllLocked>
 801ef9e:	680b      	ldr	r3, [r1, #0]
 801efa0:	3371      	adds	r3, #113	@ 0x71
 801efa2:	bf1c      	itt	ne
 801efa4:	f06f 0371 	mvnne.w	r3, #113	@ 0x71
 801efa8:	600b      	strne	r3, [r1, #0]
 801efaa:	f8d1 3104 	ldr.w	r3, [r1, #260]	@ 0x104
 801efae:	b17b      	cbz	r3, 801efd0 <CheckPllLocked+0x170>
 801efb0:	f8d1 1108 	ldr.w	r1, [r1, #264]	@ 0x108
 801efb4:	b005      	add	sp, #20
 801efb6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801efba:	4718      	bx	r3
 801efbc:	1c45      	adds	r5, r0, #1
 801efbe:	42a8      	cmp	r0, r5
 801efc0:	f5a3 2374 	sub.w	r3, r3, #999424	@ 0xf4000
 801efc4:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 801efc8:	bf2c      	ite	cs
 801efca:	2100      	movcs	r1, #0
 801efcc:	2101      	movcc	r1, #1
 801efce:	e795      	b.n	801eefc <CheckPllLocked+0x9c>
 801efd0:	4603      	mov	r3, r0
 801efd2:	4618      	mov	r0, r3
 801efd4:	b005      	add	sp, #20
 801efd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801efd8:	4560      	cmp	r0, ip
 801efda:	d04b      	beq.n	801f074 <CheckPllLocked+0x214>
 801efdc:	d3c1      	bcc.n	801ef62 <CheckPllLocked+0x102>
 801efde:	4565      	cmp	r5, ip
 801efe0:	d051      	beq.n	801f086 <CheckPllLocked+0x226>
 801efe2:	d2be      	bcs.n	801ef62 <CheckPllLocked+0x102>
 801efe4:	e79a      	b.n	801ef1c <CheckPllLocked+0xbc>
 801efe6:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 801efe8:	4a31      	ldr	r2, [pc, #196]	@ (801f0b0 <CheckPllLocked+0x250>)
 801efea:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 801efee:	430a      	orrs	r2, r1
 801eff0:	67a2      	str	r2, [r4, #120]	@ 0x78
 801eff2:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801eff4:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 801eff8:	67a2      	str	r2, [r4, #120]	@ 0x78
 801effa:	6822      	ldr	r2, [r4, #0]
 801effc:	f043 0302 	orr.w	r3, r3, #2
 801f000:	3271      	adds	r2, #113	@ 0x71
 801f002:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 801f006:	bf1c      	itt	ne
 801f008:	f06f 0371 	mvnne.w	r3, #113	@ 0x71
 801f00c:	6023      	strne	r3, [r4, #0]
 801f00e:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 801f012:	b1a3      	cbz	r3, 801f03e <CheckPllLocked+0x1de>
 801f014:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 801f018:	f06f 0071 	mvn.w	r0, #113	@ 0x71
 801f01c:	e7ca      	b.n	801efb4 <CheckPllLocked+0x154>
 801f01e:	f8b4 204d 	ldrh.w	r2, [r4, #77]	@ 0x4d
 801f022:	ba52      	rev16	r2, r2
 801f024:	f3c2 1283 	ubfx	r2, r2, #6, #4
 801f028:	4293      	cmp	r3, r2
 801f02a:	d00b      	beq.n	801f044 <CheckPllLocked+0x1e4>
 801f02c:	2f00      	cmp	r7, #0
 801f02e:	bf08      	it	eq
 801f030:	4613      	moveq	r3, r2
 801f032:	e785      	b.n	801ef40 <CheckPllLocked+0xe0>
 801f034:	b005      	add	sp, #20
 801f036:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801f03a:	f7fe bdc3 	b.w	801dbc4 <WriteRegisterConfiguration>
 801f03e:	f06f 0371 	mvn.w	r3, #113	@ 0x71
 801f042:	e79d      	b.n	801ef80 <CheckPllLocked+0x120>
 801f044:	f894 204e 	ldrb.w	r2, [r4, #78]	@ 0x4e
 801f048:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801f04c:	4297      	cmp	r7, r2
 801f04e:	d024      	beq.n	801f09a <CheckPllLocked+0x23a>
 801f050:	da1d      	bge.n	801f08e <CheckPllLocked+0x22e>
 801f052:	1c7e      	adds	r6, r7, #1
 801f054:	42b2      	cmp	r2, r6
 801f056:	bfa8      	it	ge
 801f058:	4632      	movge	r2, r6
 801f05a:	b256      	sxtb	r6, r2
 801f05c:	e770      	b.n	801ef40 <CheckPllLocked+0xe0>
 801f05e:	4573      	cmp	r3, lr
 801f060:	bf8c      	ite	hi
 801f062:	2300      	movhi	r3, #0
 801f064:	2301      	movls	r3, #1
 801f066:	2b00      	cmp	r3, #0
 801f068:	f47f af58 	bne.w	801ef1c <CheckPllLocked+0xbc>
 801f06c:	e779      	b.n	801ef62 <CheckPllLocked+0x102>
 801f06e:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 801f072:	e79f      	b.n	801efb4 <CheckPllLocked+0x154>
 801f074:	4572      	cmp	r2, lr
 801f076:	f67f af74 	bls.w	801ef62 <CheckPllLocked+0x102>
 801f07a:	e7b0      	b.n	801efde <CheckPllLocked+0x17e>
 801f07c:	4572      	cmp	r2, lr
 801f07e:	bf8c      	ite	hi
 801f080:	2200      	movhi	r2, #0
 801f082:	2201      	movls	r2, #1
 801f084:	e742      	b.n	801ef0c <CheckPllLocked+0xac>
 801f086:	4573      	cmp	r3, lr
 801f088:	f67f af48 	bls.w	801ef1c <CheckPllLocked+0xbc>
 801f08c:	e769      	b.n	801ef62 <CheckPllLocked+0x102>
 801f08e:	b102      	cbz	r2, 801f092 <CheckPllLocked+0x232>
 801f090:	1e7e      	subs	r6, r7, #1
 801f092:	42b2      	cmp	r2, r6
 801f094:	bfb8      	it	lt
 801f096:	4632      	movlt	r2, r6
 801f098:	e7df      	b.n	801f05a <CheckPllLocked+0x1fa>
 801f09a:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 801f09e:	4630      	mov	r0, r6
 801f0a0:	e788      	b.n	801efb4 <CheckPllLocked+0x154>
 801f0a2:	bf00      	nop
 801f0a4:	0801dbc5 	.word	0x0801dbc5
 801f0a8:	000f423f 	.word	0x000f423f
 801f0ac:	0801d7e5 	.word	0x0801d7e5
 801f0b0:	0003dffe 	.word	0x0003dffe

0801f0b4 <Argus_Dev_TestConnection>:
 801f0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f0b8:	2300      	movs	r3, #0
 801f0ba:	f8b0 1055 	ldrh.w	r1, [r0, #85]	@ 0x55
 801f0be:	f8a0 1089 	strh.w	r1, [r0, #137]	@ 0x89
 801f0c2:	f100 0588 	add.w	r5, r0, #136	@ 0x88
 801f0c6:	b082      	sub	sp, #8
 801f0c8:	220e      	movs	r2, #14
 801f0ca:	f500 7690 	add.w	r6, r0, #288	@ 0x120
 801f0ce:	f880 2088 	strb.w	r2, [r0, #136]	@ 0x88
 801f0d2:	4604      	mov	r4, r0
 801f0d4:	e9cd 3300 	strd	r3, r3, [sp]
 801f0d8:	462a      	mov	r2, r5
 801f0da:	2303      	movs	r3, #3
 801f0dc:	4629      	mov	r1, r5
 801f0de:	4630      	mov	r0, r6
 801f0e0:	f009 f8c4 	bl	802826c <ADS_Transfer>
 801f0e4:	2800      	cmp	r0, #0
 801f0e6:	db3c      	blt.n	801f162 <Argus_Dev_TestConnection+0xae>
 801f0e8:	2164      	movs	r1, #100	@ 0x64
 801f0ea:	4630      	mov	r0, r6
 801f0ec:	f008 ffa2 	bl	8028034 <ADS_AwaitIdle>
 801f0f0:	2800      	cmp	r0, #0
 801f0f2:	db36      	blt.n	801f162 <Argus_Dev_TestConnection+0xae>
 801f0f4:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 801f0f8:	f894 2089 	ldrb.w	r2, [r4, #137]	@ 0x89
 801f0fc:	f003 031f 	and.w	r3, r3, #31
 801f100:	f022 011f 	bic.w	r1, r2, #31
 801f104:	430b      	orrs	r3, r1
 801f106:	429a      	cmp	r2, r3
 801f108:	f104 0789 	add.w	r7, r4, #137	@ 0x89
 801f10c:	f104 0855 	add.w	r8, r4, #85	@ 0x55
 801f110:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 801f114:	d028      	beq.n	801f168 <Argus_Dev_TestConnection+0xb4>
 801f116:	2300      	movs	r3, #0
 801f118:	e9cd 3300 	strd	r3, r3, [sp]
 801f11c:	230e      	movs	r3, #14
 801f11e:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
 801f122:	462a      	mov	r2, r5
 801f124:	2303      	movs	r3, #3
 801f126:	4629      	mov	r1, r5
 801f128:	4630      	mov	r0, r6
 801f12a:	f009 f89f 	bl	802826c <ADS_Transfer>
 801f12e:	2800      	cmp	r0, #0
 801f130:	db17      	blt.n	801f162 <Argus_Dev_TestConnection+0xae>
 801f132:	2164      	movs	r1, #100	@ 0x64
 801f134:	4630      	mov	r0, r6
 801f136:	f008 ff7d 	bl	8028034 <ADS_AwaitIdle>
 801f13a:	2800      	cmp	r0, #0
 801f13c:	db11      	blt.n	801f162 <Argus_Dev_TestConnection+0xae>
 801f13e:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 801f142:	f894 2089 	ldrb.w	r2, [r4, #137]	@ 0x89
 801f146:	f003 031f 	and.w	r3, r3, #31
 801f14a:	f022 011f 	bic.w	r1, r2, #31
 801f14e:	430b      	orrs	r3, r1
 801f150:	429a      	cmp	r2, r3
 801f152:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 801f156:	d00d      	beq.n	801f174 <Argus_Dev_TestConnection+0xc0>
 801f158:	4809      	ldr	r0, [pc, #36]	@ (801f180 <Argus_Dev_TestConnection+0xcc>)
 801f15a:	f7f3 ff1b 	bl	8012f94 <print>
 801f15e:	f06f 0064 	mvn.w	r0, #100	@ 0x64
 801f162:	b002      	add	sp, #8
 801f164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f168:	787a      	ldrb	r2, [r7, #1]
 801f16a:	f898 3001 	ldrb.w	r3, [r8, #1]
 801f16e:	429a      	cmp	r2, r3
 801f170:	d1d1      	bne.n	801f116 <Argus_Dev_TestConnection+0x62>
 801f172:	e7f6      	b.n	801f162 <Argus_Dev_TestConnection+0xae>
 801f174:	787a      	ldrb	r2, [r7, #1]
 801f176:	f898 3001 	ldrb.w	r3, [r8, #1]
 801f17a:	429a      	cmp	r2, r3
 801f17c:	d1ec      	bne.n	801f158 <Argus_Dev_TestConnection+0xa4>
 801f17e:	e7f0      	b.n	801f162 <Argus_Dev_TestConnection+0xae>
 801f180:	0802e1d0 	.word	0x0802e1d0

0801f184 <Argus_Dev_Init>:
 801f184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f188:	4604      	mov	r4, r0
 801f18a:	b084      	sub	sp, #16
 801f18c:	460d      	mov	r5, r1
 801f18e:	4616      	mov	r6, r2
 801f190:	2100      	movs	r1, #0
 801f192:	f44f 72ec 	mov.w	r2, #472	@ 0x1d8
 801f196:	461f      	mov	r7, r3
 801f198:	f504 7890 	add.w	r8, r4, #288	@ 0x120
 801f19c:	f00a fad9 	bl	8029752 <memset>
 801f1a0:	2303      	movs	r3, #3
 801f1a2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f1a4:	6023      	str	r3, [r4, #0]
 801f1a6:	f8c4 51d4 	str.w	r5, [r4, #468]	@ 0x1d4
 801f1aa:	f8c4 711c 	str.w	r7, [r4, #284]	@ 0x11c
 801f1ae:	4640      	mov	r0, r8
 801f1b0:	f008 fc54 	bl	8027a5c <ADS_Init>
 801f1b4:	2800      	cmp	r0, #0
 801f1b6:	db3e      	blt.n	801f236 <Argus_Dev_Init+0xb2>
 801f1b8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f1ba:	9000      	str	r0, [sp, #0]
 801f1bc:	463b      	mov	r3, r7
 801f1be:	4632      	mov	r2, r6
 801f1c0:	4621      	mov	r1, r4
 801f1c2:	f504 70b4 	add.w	r0, r4, #360	@ 0x168
 801f1c6:	f7fb fe43 	bl	801ae50 <Argus_Dca_Init>
 801f1ca:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 801f1cc:	4a89      	ldr	r2, [pc, #548]	@ (801f3f4 <Argus_Dev_Init+0x270>)
 801f1ce:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 801f1d2:	430a      	orrs	r2, r1
 801f1d4:	67a2      	str	r2, [r4, #120]	@ 0x78
 801f1d6:	f043 0302 	orr.w	r3, r3, #2
 801f1da:	22bf      	movs	r2, #191	@ 0xbf
 801f1dc:	6825      	ldr	r5, [r4, #0]
 801f1de:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 801f1e2:	6022      	str	r2, [r4, #0]
 801f1e4:	4620      	mov	r0, r4
 801f1e6:	f7ff ff65 	bl	801f0b4 <Argus_Dev_TestConnection>
 801f1ea:	2800      	cmp	r0, #0
 801f1ec:	6025      	str	r5, [r4, #0]
 801f1ee:	f000 80a5 	beq.w	801f33c <Argus_Dev_Init+0x1b8>
 801f1f2:	da0e      	bge.n	801f212 <Argus_Dev_Init+0x8e>
 801f1f4:	f06f 0364 	mvn.w	r3, #100	@ 0x64
 801f1f8:	6023      	str	r3, [r4, #0]
 801f1fa:	b004      	add	sp, #16
 801f1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f200:	7aa3      	ldrb	r3, [r4, #10]
 801f202:	2202      	movs	r2, #2
 801f204:	2b07      	cmp	r3, #7
 801f206:	7222      	strb	r2, [r4, #8]
 801f208:	f200 80aa 	bhi.w	801f360 <Argus_Dev_Init+0x1dc>
 801f20c:	2b01      	cmp	r3, #1
 801f20e:	f200 80ab 	bhi.w	801f368 <Argus_Dev_Init+0x1e4>
 801f212:	4b79      	ldr	r3, [pc, #484]	@ (801f3f8 <Argus_Dev_Init+0x274>)
 801f214:	681b      	ldr	r3, [r3, #0]
 801f216:	f8ad 3008 	strh.w	r3, [sp, #8]
 801f21a:	0c1a      	lsrs	r2, r3, #16
 801f21c:	f88d 200a 	strb.w	r2, [sp, #10]
 801f220:	2500      	movs	r5, #0
 801f222:	aa02      	add	r2, sp, #8
 801f224:	e9cd 5500 	strd	r5, r5, [sp]
 801f228:	2303      	movs	r3, #3
 801f22a:	4611      	mov	r1, r2
 801f22c:	4640      	mov	r0, r8
 801f22e:	f009 f81d 	bl	802826c <ADS_Transfer>
 801f232:	2800      	cmp	r0, #0
 801f234:	da05      	bge.n	801f242 <Argus_Dev_Init+0xbe>
 801f236:	f06f 0306 	mvn.w	r3, #6
 801f23a:	6023      	str	r3, [r4, #0]
 801f23c:	b004      	add	sp, #16
 801f23e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f242:	2164      	movs	r1, #100	@ 0x64
 801f244:	4640      	mov	r0, r8
 801f246:	f008 fef5 	bl	8028034 <ADS_AwaitIdle>
 801f24a:	2800      	cmp	r0, #0
 801f24c:	dbf3      	blt.n	801f236 <Argus_Dev_Init+0xb2>
 801f24e:	f89d 300a 	ldrb.w	r3, [sp, #10]
 801f252:	9501      	str	r5, [sp, #4]
 801f254:	f043 0320 	orr.w	r3, r3, #32
 801f258:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801f25c:	f88d 300a 	strb.w	r3, [sp, #10]
 801f260:	aa02      	add	r2, sp, #8
 801f262:	2312      	movs	r3, #18
 801f264:	f88d 3008 	strb.w	r3, [sp, #8]
 801f268:	9500      	str	r5, [sp, #0]
 801f26a:	2303      	movs	r3, #3
 801f26c:	4611      	mov	r1, r2
 801f26e:	4640      	mov	r0, r8
 801f270:	f008 fffc 	bl	802826c <ADS_Transfer>
 801f274:	2800      	cmp	r0, #0
 801f276:	dbde      	blt.n	801f236 <Argus_Dev_Init+0xb2>
 801f278:	2164      	movs	r1, #100	@ 0x64
 801f27a:	4640      	mov	r0, r8
 801f27c:	f008 feda 	bl	8028034 <ADS_AwaitIdle>
 801f280:	2800      	cmp	r0, #0
 801f282:	dbd8      	blt.n	801f236 <Argus_Dev_Init+0xb2>
 801f284:	f89d 300a 	ldrb.w	r3, [sp, #10]
 801f288:	0698      	lsls	r0, r3, #26
 801f28a:	f140 80a9 	bpl.w	801f3e0 <Argus_Dev_Init+0x25c>
 801f28e:	f240 7301 	movw	r3, #1793	@ 0x701
 801f292:	aa02      	add	r2, sp, #8
 801f294:	9502      	str	r5, [sp, #8]
 801f296:	e9cd 5500 	strd	r5, r5, [sp]
 801f29a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801f29e:	260a      	movs	r6, #10
 801f2a0:	2305      	movs	r3, #5
 801f2a2:	4611      	mov	r1, r2
 801f2a4:	4640      	mov	r0, r8
 801f2a6:	f88d 500c 	strb.w	r5, [sp, #12]
 801f2aa:	f88d 6008 	strb.w	r6, [sp, #8]
 801f2ae:	f008 ffdd 	bl	802826c <ADS_Transfer>
 801f2b2:	2800      	cmp	r0, #0
 801f2b4:	dbbf      	blt.n	801f236 <Argus_Dev_Init+0xb2>
 801f2b6:	2164      	movs	r1, #100	@ 0x64
 801f2b8:	4640      	mov	r0, r8
 801f2ba:	f008 febb 	bl	8028034 <ADS_AwaitIdle>
 801f2be:	2800      	cmp	r0, #0
 801f2c0:	dbb9      	blt.n	801f236 <Argus_Dev_Init+0xb2>
 801f2c2:	f89d 200a 	ldrb.w	r2, [sp, #10]
 801f2c6:	f88d 6008 	strb.w	r6, [sp, #8]
 801f2ca:	f022 0203 	bic.w	r2, r2, #3
 801f2ce:	f88d 200a 	strb.w	r2, [sp, #10]
 801f2d2:	aa02      	add	r2, sp, #8
 801f2d4:	e9cd 5500 	strd	r5, r5, [sp]
 801f2d8:	2305      	movs	r3, #5
 801f2da:	4611      	mov	r1, r2
 801f2dc:	4640      	mov	r0, r8
 801f2de:	f88d 500b 	strb.w	r5, [sp, #11]
 801f2e2:	f008 ffc3 	bl	802826c <ADS_Transfer>
 801f2e6:	2800      	cmp	r0, #0
 801f2e8:	dba5      	blt.n	801f236 <Argus_Dev_Init+0xb2>
 801f2ea:	2164      	movs	r1, #100	@ 0x64
 801f2ec:	4640      	mov	r0, r8
 801f2ee:	f008 fea1 	bl	8028034 <ADS_AwaitIdle>
 801f2f2:	2800      	cmp	r0, #0
 801f2f4:	db9f      	blt.n	801f236 <Argus_Dev_Init+0xb2>
 801f2f6:	f104 0688 	add.w	r6, r4, #136	@ 0x88
 801f2fa:	f64c 7310 	movw	r3, #53008	@ 0xcf10
 801f2fe:	f8a4 3088 	strh.w	r3, [r4, #136]	@ 0x88
 801f302:	4632      	mov	r2, r6
 801f304:	e9cd 5500 	strd	r5, r5, [sp]
 801f308:	2302      	movs	r3, #2
 801f30a:	4631      	mov	r1, r6
 801f30c:	4640      	mov	r0, r8
 801f30e:	f008 ffad 	bl	802826c <ADS_Transfer>
 801f312:	2800      	cmp	r0, #0
 801f314:	db8f      	blt.n	801f236 <Argus_Dev_Init+0xb2>
 801f316:	2164      	movs	r1, #100	@ 0x64
 801f318:	4640      	mov	r0, r8
 801f31a:	f008 fe8b 	bl	8028034 <ADS_AwaitIdle>
 801f31e:	2800      	cmp	r0, #0
 801f320:	db89      	blt.n	801f236 <Argus_Dev_Init+0xb2>
 801f322:	f894 3089 	ldrb.w	r3, [r4, #137]	@ 0x89
 801f326:	07d9      	lsls	r1, r3, #31
 801f328:	bf48      	it	mi
 801f32a:	f023 0310 	bicmi.w	r3, r3, #16
 801f32e:	3bcf      	subs	r3, #207	@ 0xcf
 801f330:	bf18      	it	ne
 801f332:	2301      	movne	r3, #1
 801f334:	bb63      	cbnz	r3, 801f390 <Argus_Dev_Init+0x20c>
 801f336:	23c0      	movs	r3, #192	@ 0xc0
 801f338:	6023      	str	r3, [r4, #0]
 801f33a:	e77f      	b.n	801f23c <Argus_Dev_Init+0xb8>
 801f33c:	f894 3089 	ldrb.w	r3, [r4, #137]	@ 0x89
 801f340:	095b      	lsrs	r3, r3, #5
 801f342:	2b04      	cmp	r3, #4
 801f344:	d852      	bhi.n	801f3ec <Argus_Dev_Init+0x268>
 801f346:	a201      	add	r2, pc, #4	@ (adr r2, 801f34c <Argus_Dev_Init+0x1c8>)
 801f348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f34c:	0801f38b 	.word	0x0801f38b
 801f350:	0801f201 	.word	0x0801f201
 801f354:	0801f385 	.word	0x0801f385
 801f358:	0801f37f 	.word	0x0801f37f
 801f35c:	0801f379 	.word	0x0801f379
 801f360:	3b43      	subs	r3, #67	@ 0x43
 801f362:	2b04      	cmp	r3, #4
 801f364:	f63f af55 	bhi.w	801f212 <Argus_Dev_Init+0x8e>
 801f368:	4a24      	ldr	r2, [pc, #144]	@ (801f3fc <Argus_Dev_Init+0x278>)
 801f36a:	6863      	ldr	r3, [r4, #4]
 801f36c:	4293      	cmp	r3, r2
 801f36e:	bf8c      	ite	hi
 801f370:	2305      	movhi	r3, #5
 801f372:	2303      	movls	r3, #3
 801f374:	7223      	strb	r3, [r4, #8]
 801f376:	e74c      	b.n	801f212 <Argus_Dev_Init+0x8e>
 801f378:	2305      	movs	r3, #5
 801f37a:	7223      	strb	r3, [r4, #8]
 801f37c:	e749      	b.n	801f212 <Argus_Dev_Init+0x8e>
 801f37e:	2304      	movs	r3, #4
 801f380:	7223      	strb	r3, [r4, #8]
 801f382:	e746      	b.n	801f212 <Argus_Dev_Init+0x8e>
 801f384:	2303      	movs	r3, #3
 801f386:	7223      	strb	r3, [r4, #8]
 801f388:	e743      	b.n	801f212 <Argus_Dev_Init+0x8e>
 801f38a:	2301      	movs	r3, #1
 801f38c:	7223      	strb	r3, [r4, #8]
 801f38e:	e740      	b.n	801f212 <Argus_Dev_Init+0x8e>
 801f390:	2300      	movs	r3, #0
 801f392:	f64c 7210 	movw	r2, #53008	@ 0xcf10
 801f396:	f8a4 2088 	strh.w	r2, [r4, #136]	@ 0x88
 801f39a:	4631      	mov	r1, r6
 801f39c:	e9cd 3300 	strd	r3, r3, [sp]
 801f3a0:	4632      	mov	r2, r6
 801f3a2:	2302      	movs	r3, #2
 801f3a4:	4640      	mov	r0, r8
 801f3a6:	f008 ff61 	bl	802826c <ADS_Transfer>
 801f3aa:	2800      	cmp	r0, #0
 801f3ac:	f6ff af43 	blt.w	801f236 <Argus_Dev_Init+0xb2>
 801f3b0:	2164      	movs	r1, #100	@ 0x64
 801f3b2:	4640      	mov	r0, r8
 801f3b4:	f008 fe3e 	bl	8028034 <ADS_AwaitIdle>
 801f3b8:	2800      	cmp	r0, #0
 801f3ba:	f6ff af3c 	blt.w	801f236 <Argus_Dev_Init+0xb2>
 801f3be:	f894 3089 	ldrb.w	r3, [r4, #137]	@ 0x89
 801f3c2:	07da      	lsls	r2, r3, #31
 801f3c4:	bf48      	it	mi
 801f3c6:	f023 0310 	bicmi.w	r3, r3, #16
 801f3ca:	3bcf      	subs	r3, #207	@ 0xcf
 801f3cc:	bf18      	it	ne
 801f3ce:	2301      	movne	r3, #1
 801f3d0:	2b00      	cmp	r3, #0
 801f3d2:	d0b0      	beq.n	801f336 <Argus_Dev_Init+0x1b2>
 801f3d4:	480a      	ldr	r0, [pc, #40]	@ (801f400 <Argus_Dev_Init+0x27c>)
 801f3d6:	f7f3 fddd 	bl	8012f94 <print>
 801f3da:	f06f 0064 	mvn.w	r0, #100	@ 0x64
 801f3de:	e72a      	b.n	801f236 <Argus_Dev_Init+0xb2>
 801f3e0:	4808      	ldr	r0, [pc, #32]	@ (801f404 <Argus_Dev_Init+0x280>)
 801f3e2:	f7f3 fdd7 	bl	8012f94 <print>
 801f3e6:	f06f 0071 	mvn.w	r0, #113	@ 0x71
 801f3ea:	e724      	b.n	801f236 <Argus_Dev_Init+0xb2>
 801f3ec:	2300      	movs	r3, #0
 801f3ee:	7223      	strb	r3, [r4, #8]
 801f3f0:	e70f      	b.n	801f212 <Argus_Dev_Init+0x8e>
 801f3f2:	bf00      	nop
 801f3f4:	0003dffe 	.word	0x0003dffe
 801f3f8:	0802c304 	.word	0x0802c304
 801f3fc:	000493e0 	.word	0x000493e0
 801f400:	0802e24c 	.word	0x0802e24c
 801f404:	0802e20c 	.word	0x0802e20c

0801f408 <Argus_Dev_AwaitStatus>:
 801f408:	6803      	ldr	r3, [r0, #0]
 801f40a:	428b      	cmp	r3, r1
 801f40c:	f000 809b 	beq.w	801f546 <Argus_Dev_AwaitStatus+0x13e>
 801f410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f414:	f8d0 311c 	ldr.w	r3, [r0, #284]	@ 0x11c
 801f418:	4e4c      	ldr	r6, [pc, #304]	@ (801f54c <Argus_Dev_AwaitStatus+0x144>)
 801f41a:	681b      	ldr	r3, [r3, #0]
 801f41c:	f8df 9134 	ldr.w	r9, [pc, #308]	@ 801f554 <Argus_Dev_AwaitStatus+0x14c>
 801f420:	ea4f 2a53 	mov.w	sl, r3, lsr #9
 801f424:	b085      	sub	sp, #20
 801f426:	f50a 7a96 	add.w	sl, sl, #300	@ 0x12c
 801f42a:	4604      	mov	r4, r0
 801f42c:	460d      	mov	r5, r1
 801f42e:	4668      	mov	r0, sp
 801f430:	a901      	add	r1, sp, #4
 801f432:	fba6 260a 	umull	r2, r6, r6, sl
 801f436:	f7e7 fc3b 	bl	8006cb0 <Timer_GetCounterValue>
 801f43a:	09b6      	lsrs	r6, r6, #6
 801f43c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801f440:	fb03 a816 	mls	r8, r3, r6, sl
 801f444:	fb03 f808 	mul.w	r8, r3, r8
 801f448:	f504 7790 	add.w	r7, r4, #288	@ 0x120
 801f44c:	4638      	mov	r0, r7
 801f44e:	f008 fd87 	bl	8027f60 <ADS_CheckTimeout>
 801f452:	2800      	cmp	r0, #0
 801f454:	db39      	blt.n	801f4ca <Argus_Dev_AwaitStatus+0xc2>
 801f456:	6823      	ldr	r3, [r4, #0]
 801f458:	2b64      	cmp	r3, #100	@ 0x64
 801f45a:	d007      	beq.n	801f46c <Argus_Dev_AwaitStatus+0x64>
 801f45c:	dc38      	bgt.n	801f4d0 <Argus_Dev_AwaitStatus+0xc8>
 801f45e:	2b00      	cmp	r3, #0
 801f460:	d13c      	bne.n	801f4dc <Argus_Dev_AwaitStatus+0xd4>
 801f462:	4638      	mov	r0, r7
 801f464:	f008 fd6c 	bl	8027f40 <ADS_GetStatus>
 801f468:	2800      	cmp	r0, #0
 801f46a:	db2e      	blt.n	801f4ca <Argus_Dev_AwaitStatus+0xc2>
 801f46c:	6823      	ldr	r3, [r4, #0]
 801f46e:	42ab      	cmp	r3, r5
 801f470:	d03c      	beq.n	801f4ec <Argus_Dev_AwaitStatus+0xe4>
 801f472:	a903      	add	r1, sp, #12
 801f474:	a802      	add	r0, sp, #8
 801f476:	f7e7 fc1b 	bl	8006cb0 <Timer_GetCounterValue>
 801f47a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801f47e:	eb08 0302 	add.w	r3, r8, r2
 801f482:	454b      	cmp	r3, r9
 801f484:	f8dd c008 	ldr.w	ip, [sp, #8]
 801f488:	f8dd e00c 	ldr.w	lr, [sp, #12]
 801f48c:	eb06 0001 	add.w	r0, r6, r1
 801f490:	d904      	bls.n	801f49c <Argus_Dev_AwaitStatus+0x94>
 801f492:	f5a3 2374 	sub.w	r3, r3, #999424	@ 0xf4000
 801f496:	3001      	adds	r0, #1
 801f498:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 801f49c:	4281      	cmp	r1, r0
 801f49e:	d030      	beq.n	801f502 <Argus_Dev_AwaitStatus+0xfa>
 801f4a0:	bf34      	ite	cc
 801f4a2:	f04f 0b01 	movcc.w	fp, #1
 801f4a6:	f04f 0b00 	movcs.w	fp, #0
 801f4aa:	f1bb 0f00 	cmp.w	fp, #0
 801f4ae:	d021      	beq.n	801f4f4 <Argus_Dev_AwaitStatus+0xec>
 801f4b0:	4561      	cmp	r1, ip
 801f4b2:	d035      	beq.n	801f520 <Argus_Dev_AwaitStatus+0x118>
 801f4b4:	bf34      	ite	cc
 801f4b6:	2201      	movcc	r2, #1
 801f4b8:	2200      	movcs	r2, #0
 801f4ba:	bb4a      	cbnz	r2, 801f510 <Argus_Dev_AwaitStatus+0x108>
 801f4bc:	4824      	ldr	r0, [pc, #144]	@ (801f550 <Argus_Dev_AwaitStatus+0x148>)
 801f4be:	4652      	mov	r2, sl
 801f4c0:	4629      	mov	r1, r5
 801f4c2:	f7f3 fd67 	bl	8012f94 <print>
 801f4c6:	f06f 0005 	mvn.w	r0, #5
 801f4ca:	b005      	add	sp, #20
 801f4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4d0:	2bc0      	cmp	r3, #192	@ 0xc0
 801f4d2:	dc05      	bgt.n	801f4e0 <Argus_Dev_AwaitStatus+0xd8>
 801f4d4:	2bbe      	cmp	r3, #190	@ 0xbe
 801f4d6:	dcc9      	bgt.n	801f46c <Argus_Dev_AwaitStatus+0x64>
 801f4d8:	2b67      	cmp	r3, #103	@ 0x67
 801f4da:	d0c7      	beq.n	801f46c <Argus_Dev_AwaitStatus+0x64>
 801f4dc:	6820      	ldr	r0, [r4, #0]
 801f4de:	e7c3      	b.n	801f468 <Argus_Dev_AwaitStatus+0x60>
 801f4e0:	3bc3      	subs	r3, #195	@ 0xc3
 801f4e2:	2b01      	cmp	r3, #1
 801f4e4:	d8fa      	bhi.n	801f4dc <Argus_Dev_AwaitStatus+0xd4>
 801f4e6:	6823      	ldr	r3, [r4, #0]
 801f4e8:	42ab      	cmp	r3, r5
 801f4ea:	d1c2      	bne.n	801f472 <Argus_Dev_AwaitStatus+0x6a>
 801f4ec:	2000      	movs	r0, #0
 801f4ee:	b005      	add	sp, #20
 801f4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4f4:	4561      	cmp	r1, ip
 801f4f6:	d018      	beq.n	801f52a <Argus_Dev_AwaitStatus+0x122>
 801f4f8:	d3a8      	bcc.n	801f44c <Argus_Dev_AwaitStatus+0x44>
 801f4fa:	4584      	cmp	ip, r0
 801f4fc:	d019      	beq.n	801f532 <Argus_Dev_AwaitStatus+0x12a>
 801f4fe:	d9a5      	bls.n	801f44c <Argus_Dev_AwaitStatus+0x44>
 801f500:	e7dc      	b.n	801f4bc <Argus_Dev_AwaitStatus+0xb4>
 801f502:	429a      	cmp	r2, r3
 801f504:	bf8c      	ite	hi
 801f506:	f04f 0b00 	movhi.w	fp, #0
 801f50a:	f04f 0b01 	movls.w	fp, #1
 801f50e:	e7cc      	b.n	801f4aa <Argus_Dev_AwaitStatus+0xa2>
 801f510:	4584      	cmp	ip, r0
 801f512:	d011      	beq.n	801f538 <Argus_Dev_AwaitStatus+0x130>
 801f514:	bf8c      	ite	hi
 801f516:	2301      	movhi	r3, #1
 801f518:	2300      	movls	r3, #0
 801f51a:	2b00      	cmp	r3, #0
 801f51c:	d096      	beq.n	801f44c <Argus_Dev_AwaitStatus+0x44>
 801f51e:	e7cd      	b.n	801f4bc <Argus_Dev_AwaitStatus+0xb4>
 801f520:	4596      	cmp	lr, r2
 801f522:	bf34      	ite	cc
 801f524:	2200      	movcc	r2, #0
 801f526:	2201      	movcs	r2, #1
 801f528:	e7c7      	b.n	801f4ba <Argus_Dev_AwaitStatus+0xb2>
 801f52a:	4596      	cmp	lr, r2
 801f52c:	d28e      	bcs.n	801f44c <Argus_Dev_AwaitStatus+0x44>
 801f52e:	4584      	cmp	ip, r0
 801f530:	d1e5      	bne.n	801f4fe <Argus_Dev_AwaitStatus+0xf6>
 801f532:	459e      	cmp	lr, r3
 801f534:	d2c2      	bcs.n	801f4bc <Argus_Dev_AwaitStatus+0xb4>
 801f536:	e789      	b.n	801f44c <Argus_Dev_AwaitStatus+0x44>
 801f538:	459e      	cmp	lr, r3
 801f53a:	bf34      	ite	cc
 801f53c:	2300      	movcc	r3, #0
 801f53e:	2301      	movcs	r3, #1
 801f540:	2b00      	cmp	r3, #0
 801f542:	d083      	beq.n	801f44c <Argus_Dev_AwaitStatus+0x44>
 801f544:	e7ba      	b.n	801f4bc <Argus_Dev_AwaitStatus+0xb4>
 801f546:	2000      	movs	r0, #0
 801f548:	4770      	bx	lr
 801f54a:	bf00      	nop
 801f54c:	10624dd3 	.word	0x10624dd3
 801f550:	0802e280 	.word	0x0802e280
 801f554:	000f423f 	.word	0x000f423f

0801f558 <Argus_Dev_SetStatusSync>:
 801f558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f55c:	f8d0 311c 	ldr.w	r3, [r0, #284]	@ 0x11c
 801f560:	4e48      	ldr	r6, [pc, #288]	@ (801f684 <Argus_Dev_SetStatusSync+0x12c>)
 801f562:	681b      	ldr	r3, [r3, #0]
 801f564:	f8df 9124 	ldr.w	r9, [pc, #292]	@ 801f68c <Argus_Dev_SetStatusSync+0x134>
 801f568:	ea4f 2a53 	mov.w	sl, r3, lsr #9
 801f56c:	b085      	sub	sp, #20
 801f56e:	f50a 7a96 	add.w	sl, sl, #300	@ 0x12c
 801f572:	4605      	mov	r5, r0
 801f574:	468b      	mov	fp, r1
 801f576:	4668      	mov	r0, sp
 801f578:	a901      	add	r1, sp, #4
 801f57a:	fba6 260a 	umull	r2, r6, r6, sl
 801f57e:	f7e7 fb97 	bl	8006cb0 <Timer_GetCounterValue>
 801f582:	09b6      	lsrs	r6, r6, #6
 801f584:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801f588:	fb03 a716 	mls	r7, r3, r6, sl
 801f58c:	fb03 f707 	mul.w	r7, r3, r7
 801f590:	f505 7890 	add.w	r8, r5, #288	@ 0x120
 801f594:	f7e6 ffa8 	bl	80064e8 <IRQ_LOCK>
 801f598:	682c      	ldr	r4, [r5, #0]
 801f59a:	2c00      	cmp	r4, #0
 801f59c:	d041      	beq.n	801f622 <Argus_Dev_SetStatusSync+0xca>
 801f59e:	682b      	ldr	r3, [r5, #0]
 801f5a0:	2b00      	cmp	r3, #0
 801f5a2:	db68      	blt.n	801f676 <Argus_Dev_SetStatusSync+0x11e>
 801f5a4:	f7e6 ff7e 	bl	80064a4 <IRQ_UNLOCK>
 801f5a8:	4640      	mov	r0, r8
 801f5aa:	f008 fcd9 	bl	8027f60 <ADS_CheckTimeout>
 801f5ae:	1e04      	subs	r4, r0, #0
 801f5b0:	db28      	blt.n	801f604 <Argus_Dev_SetStatusSync+0xac>
 801f5b2:	a903      	add	r1, sp, #12
 801f5b4:	a802      	add	r0, sp, #8
 801f5b6:	f7e7 fb7b 	bl	8006cb0 <Timer_GetCounterValue>
 801f5ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 801f5be:	18bb      	adds	r3, r7, r2
 801f5c0:	454b      	cmp	r3, r9
 801f5c2:	e9dd 4c02 	ldrd	r4, ip, [sp, #8]
 801f5c6:	eb06 0001 	add.w	r0, r6, r1
 801f5ca:	d904      	bls.n	801f5d6 <Argus_Dev_SetStatusSync+0x7e>
 801f5cc:	f5a3 2374 	sub.w	r3, r3, #999424	@ 0xf4000
 801f5d0:	3001      	adds	r0, #1
 801f5d2:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 801f5d6:	4281      	cmp	r1, r0
 801f5d8:	d02b      	beq.n	801f632 <Argus_Dev_SetStatusSync+0xda>
 801f5da:	bf34      	ite	cc
 801f5dc:	f04f 0e01 	movcc.w	lr, #1
 801f5e0:	f04f 0e00 	movcs.w	lr, #0
 801f5e4:	f1be 0f00 	cmp.w	lr, #0
 801f5e8:	d010      	beq.n	801f60c <Argus_Dev_SetStatusSync+0xb4>
 801f5ea:	42a1      	cmp	r1, r4
 801f5ec:	d030      	beq.n	801f650 <Argus_Dev_SetStatusSync+0xf8>
 801f5ee:	bf34      	ite	cc
 801f5f0:	2201      	movcc	r2, #1
 801f5f2:	2200      	movcs	r2, #0
 801f5f4:	bb22      	cbnz	r2, 801f640 <Argus_Dev_SetStatusSync+0xe8>
 801f5f6:	4824      	ldr	r0, [pc, #144]	@ (801f688 <Argus_Dev_SetStatusSync+0x130>)
 801f5f8:	4652      	mov	r2, sl
 801f5fa:	4659      	mov	r1, fp
 801f5fc:	f7f3 fcca 	bl	8012f94 <print>
 801f600:	f06f 0405 	mvn.w	r4, #5
 801f604:	4620      	mov	r0, r4
 801f606:	b005      	add	sp, #20
 801f608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f60c:	42a1      	cmp	r1, r4
 801f60e:	d024      	beq.n	801f65a <Argus_Dev_SetStatusSync+0x102>
 801f610:	d3c0      	bcc.n	801f594 <Argus_Dev_SetStatusSync+0x3c>
 801f612:	42a0      	cmp	r0, r4
 801f614:	d025      	beq.n	801f662 <Argus_Dev_SetStatusSync+0x10a>
 801f616:	d3ee      	bcc.n	801f5f6 <Argus_Dev_SetStatusSync+0x9e>
 801f618:	f7e6 ff66 	bl	80064e8 <IRQ_LOCK>
 801f61c:	682c      	ldr	r4, [r5, #0]
 801f61e:	2c00      	cmp	r4, #0
 801f620:	d1bd      	bne.n	801f59e <Argus_Dev_SetStatusSync+0x46>
 801f622:	f8c5 b000 	str.w	fp, [r5]
 801f626:	f7e6 ff3d 	bl	80064a4 <IRQ_UNLOCK>
 801f62a:	4620      	mov	r0, r4
 801f62c:	b005      	add	sp, #20
 801f62e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f632:	429a      	cmp	r2, r3
 801f634:	bf8c      	ite	hi
 801f636:	f04f 0e00 	movhi.w	lr, #0
 801f63a:	f04f 0e01 	movls.w	lr, #1
 801f63e:	e7d1      	b.n	801f5e4 <Argus_Dev_SetStatusSync+0x8c>
 801f640:	42a0      	cmp	r0, r4
 801f642:	d011      	beq.n	801f668 <Argus_Dev_SetStatusSync+0x110>
 801f644:	bf34      	ite	cc
 801f646:	2301      	movcc	r3, #1
 801f648:	2300      	movcs	r3, #0
 801f64a:	2b00      	cmp	r3, #0
 801f64c:	d0a2      	beq.n	801f594 <Argus_Dev_SetStatusSync+0x3c>
 801f64e:	e7d2      	b.n	801f5f6 <Argus_Dev_SetStatusSync+0x9e>
 801f650:	4562      	cmp	r2, ip
 801f652:	bf8c      	ite	hi
 801f654:	2200      	movhi	r2, #0
 801f656:	2201      	movls	r2, #1
 801f658:	e7cc      	b.n	801f5f4 <Argus_Dev_SetStatusSync+0x9c>
 801f65a:	4562      	cmp	r2, ip
 801f65c:	d99a      	bls.n	801f594 <Argus_Dev_SetStatusSync+0x3c>
 801f65e:	42a0      	cmp	r0, r4
 801f660:	d1d9      	bne.n	801f616 <Argus_Dev_SetStatusSync+0xbe>
 801f662:	459c      	cmp	ip, r3
 801f664:	d2c7      	bcs.n	801f5f6 <Argus_Dev_SetStatusSync+0x9e>
 801f666:	e795      	b.n	801f594 <Argus_Dev_SetStatusSync+0x3c>
 801f668:	459c      	cmp	ip, r3
 801f66a:	bf34      	ite	cc
 801f66c:	2300      	movcc	r3, #0
 801f66e:	2301      	movcs	r3, #1
 801f670:	2b00      	cmp	r3, #0
 801f672:	d08f      	beq.n	801f594 <Argus_Dev_SetStatusSync+0x3c>
 801f674:	e7bf      	b.n	801f5f6 <Argus_Dev_SetStatusSync+0x9e>
 801f676:	682c      	ldr	r4, [r5, #0]
 801f678:	f7e6 ff14 	bl	80064a4 <IRQ_UNLOCK>
 801f67c:	4620      	mov	r0, r4
 801f67e:	b005      	add	sp, #20
 801f680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f684:	10624dd3 	.word	0x10624dd3
 801f688:	0802e2d8 	.word	0x0802e2d8
 801f68c:	000f423f 	.word	0x000f423f

0801f690 <Argus_Dev_SetStatus>:
 801f690:	b570      	push	{r4, r5, r6, lr}
 801f692:	4604      	mov	r4, r0
 801f694:	460e      	mov	r6, r1
 801f696:	f7e6 ff27 	bl	80064e8 <IRQ_LOCK>
 801f69a:	6825      	ldr	r5, [r4, #0]
 801f69c:	b925      	cbnz	r5, 801f6a8 <Argus_Dev_SetStatus+0x18>
 801f69e:	6026      	str	r6, [r4, #0]
 801f6a0:	f7e6 ff00 	bl	80064a4 <IRQ_UNLOCK>
 801f6a4:	4628      	mov	r0, r5
 801f6a6:	bd70      	pop	{r4, r5, r6, pc}
 801f6a8:	6823      	ldr	r3, [r4, #0]
 801f6aa:	3371      	adds	r3, #113	@ 0x71
 801f6ac:	d007      	beq.n	801f6be <Argus_Dev_SetStatus+0x2e>
 801f6ae:	6823      	ldr	r3, [r4, #0]
 801f6b0:	3372      	adds	r3, #114	@ 0x72
 801f6b2:	d00a      	beq.n	801f6ca <Argus_Dev_SetStatus+0x3a>
 801f6b4:	6825      	ldr	r5, [r4, #0]
 801f6b6:	f7e6 fef5 	bl	80064a4 <IRQ_UNLOCK>
 801f6ba:	4628      	mov	r0, r5
 801f6bc:	bd70      	pop	{r4, r5, r6, pc}
 801f6be:	f504 70b4 	add.w	r0, r4, #360	@ 0x168
 801f6c2:	f7fd f915 	bl	801c8f0 <Argus_Dca_RecoverLaserFailure>
 801f6c6:	2800      	cmp	r0, #0
 801f6c8:	d0f1      	beq.n	801f6ae <Argus_Dev_SetStatus+0x1e>
 801f6ca:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 801f6cc:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 801f6d0:	4a06      	ldr	r2, [pc, #24]	@ (801f6ec <Argus_Dev_SetStatus+0x5c>)
 801f6d2:	f043 0302 	orr.w	r3, r3, #2
 801f6d6:	430a      	orrs	r2, r1
 801f6d8:	67a2      	str	r2, [r4, #120]	@ 0x78
 801f6da:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 801f6de:	6026      	str	r6, [r4, #0]
 801f6e0:	2500      	movs	r5, #0
 801f6e2:	f7e6 fedf 	bl	80064a4 <IRQ_UNLOCK>
 801f6e6:	4628      	mov	r0, r5
 801f6e8:	bd70      	pop	{r4, r5, r6, pc}
 801f6ea:	bf00      	nop
 801f6ec:	0003dffe 	.word	0x0003dffe

0801f6f0 <Argus_Dev_SetError>:
 801f6f0:	6803      	ldr	r3, [r0, #0]
 801f6f2:	3371      	adds	r3, #113	@ 0x71
 801f6f4:	bf18      	it	ne
 801f6f6:	6001      	strne	r1, [r0, #0]
 801f6f8:	4770      	bx	lr
 801f6fa:	bf00      	nop

0801f6fc <Argus_Dev_ClearStatus>:
 801f6fc:	b538      	push	{r3, r4, r5, lr}
 801f6fe:	4604      	mov	r4, r0
 801f700:	460d      	mov	r5, r1
 801f702:	f7e6 fef1 	bl	80064e8 <IRQ_LOCK>
 801f706:	6823      	ldr	r3, [r4, #0]
 801f708:	42ab      	cmp	r3, r5
 801f70a:	d105      	bne.n	801f718 <Argus_Dev_ClearStatus+0x1c>
 801f70c:	2500      	movs	r5, #0
 801f70e:	6025      	str	r5, [r4, #0]
 801f710:	f7e6 fec8 	bl	80064a4 <IRQ_UNLOCK>
 801f714:	4628      	mov	r0, r5
 801f716:	bd38      	pop	{r3, r4, r5, pc}
 801f718:	f7e6 fec4 	bl	80064a4 <IRQ_UNLOCK>
 801f71c:	f04f 30ff 	mov.w	r0, #4294967295
 801f720:	bd38      	pop	{r3, r4, r5, pc}
 801f722:	bf00      	nop

0801f724 <Argus_Dev_GetStatus>:
 801f724:	b538      	push	{r3, r4, r5, lr}
 801f726:	f500 7590 	add.w	r5, r0, #288	@ 0x120
 801f72a:	4604      	mov	r4, r0
 801f72c:	4628      	mov	r0, r5
 801f72e:	f008 fc17 	bl	8027f60 <ADS_CheckTimeout>
 801f732:	2800      	cmp	r0, #0
 801f734:	db10      	blt.n	801f758 <Argus_Dev_GetStatus+0x34>
 801f736:	6823      	ldr	r3, [r4, #0]
 801f738:	2b64      	cmp	r3, #100	@ 0x64
 801f73a:	d011      	beq.n	801f760 <Argus_Dev_GetStatus+0x3c>
 801f73c:	dc05      	bgt.n	801f74a <Argus_Dev_GetStatus+0x26>
 801f73e:	b953      	cbnz	r3, 801f756 <Argus_Dev_GetStatus+0x32>
 801f740:	4628      	mov	r0, r5
 801f742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f746:	f008 bbfb 	b.w	8027f40 <ADS_GetStatus>
 801f74a:	2bc0      	cmp	r3, #192	@ 0xc0
 801f74c:	dc05      	bgt.n	801f75a <Argus_Dev_GetStatus+0x36>
 801f74e:	2bbe      	cmp	r3, #190	@ 0xbe
 801f750:	dc06      	bgt.n	801f760 <Argus_Dev_GetStatus+0x3c>
 801f752:	2b67      	cmp	r3, #103	@ 0x67
 801f754:	d004      	beq.n	801f760 <Argus_Dev_GetStatus+0x3c>
 801f756:	6820      	ldr	r0, [r4, #0]
 801f758:	bd38      	pop	{r3, r4, r5, pc}
 801f75a:	3bc3      	subs	r3, #195	@ 0xc3
 801f75c:	2b01      	cmp	r3, #1
 801f75e:	d8fa      	bhi.n	801f756 <Argus_Dev_GetStatus+0x32>
 801f760:	2002      	movs	r0, #2
 801f762:	bd38      	pop	{r3, r4, r5, pc}

0801f764 <Argus_Dev_Abort>:
 801f764:	f06f 0101 	mvn.w	r1, #1
 801f768:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 801f76c:	f008 bbe0 	b.w	8027f30 <ADS_Abort>

0801f770 <Argus_Dev_ReadData>:
 801f770:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 801f774:	f008 be60 	b.w	8028438 <ADS_ReadData>

0801f778 <Argus_Dev_CheckCfg>:
 801f778:	b510      	push	{r4, lr}
 801f77a:	7b41      	ldrb	r1, [r0, #13]
 801f77c:	1e4b      	subs	r3, r1, #1
 801f77e:	2b01      	cmp	r3, #1
 801f780:	f200 815e 	bhi.w	801fa40 <Argus_Dev_CheckCfg+0x2c8>
 801f784:	6801      	ldr	r1, [r0, #0]
 801f786:	4bce      	ldr	r3, [pc, #824]	@ (801fac0 <Argus_Dev_CheckCfg+0x348>)
 801f788:	f1a1 02fa 	sub.w	r2, r1, #250	@ 0xfa
 801f78c:	429a      	cmp	r2, r3
 801f78e:	f200 815d 	bhi.w	801fa4c <Argus_Dev_CheckCfg+0x2d4>
 801f792:	6901      	ldr	r1, [r0, #16]
 801f794:	4bcb      	ldr	r3, [pc, #812]	@ (801fac4 <Argus_Dev_CheckCfg+0x34c>)
 801f796:	f1a1 02fa 	sub.w	r2, r1, #250	@ 0xfa
 801f79a:	429a      	cmp	r2, r3
 801f79c:	f200 815e 	bhi.w	801fa5c <Argus_Dev_CheckCfg+0x2e4>
 801f7a0:	7a81      	ldrb	r1, [r0, #10]
 801f7a2:	1e8b      	subs	r3, r1, #2
 801f7a4:	2b7e      	cmp	r3, #126	@ 0x7e
 801f7a6:	f200 8173 	bhi.w	801fa90 <Argus_Dev_CheckCfg+0x318>
 801f7aa:	7a01      	ldrb	r1, [r0, #8]
 801f7ac:	2980      	cmp	r1, #128	@ 0x80
 801f7ae:	f200 81b5 	bhi.w	801fb1c <Argus_Dev_CheckCfg+0x3a4>
 801f7b2:	6844      	ldr	r4, [r0, #4]
 801f7b4:	4bc4      	ldr	r3, [pc, #784]	@ (801fac8 <Argus_Dev_CheckCfg+0x350>)
 801f7b6:	4ac5      	ldr	r2, [pc, #788]	@ (801facc <Argus_Dev_CheckCfg+0x354>)
 801f7b8:	4423      	add	r3, r4
 801f7ba:	4293      	cmp	r3, r2
 801f7bc:	f200 8176 	bhi.w	801faac <Argus_Dev_CheckCfg+0x334>
 801f7c0:	f890 3071 	ldrb.w	r3, [r0, #113]	@ 0x71
 801f7c4:	065a      	lsls	r2, r3, #25
 801f7c6:	f100 816b 	bmi.w	801faa0 <Argus_Dev_CheckCfg+0x328>
 801f7ca:	f990 2080 	ldrsb.w	r2, [r0, #128]	@ 0x80
 801f7ce:	2a00      	cmp	r2, #0
 801f7d0:	f2c0 81e8 	blt.w	801fba4 <Argus_Dev_CheckCfg+0x42c>
 801f7d4:	069b      	lsls	r3, r3, #26
 801f7d6:	f140 8155 	bpl.w	801fa84 <Argus_Dev_CheckCfg+0x30c>
 801f7da:	f890 308e 	ldrb.w	r3, [r0, #142]	@ 0x8e
 801f7de:	3b01      	subs	r3, #1
 801f7e0:	2b02      	cmp	r3, #2
 801f7e2:	f200 8149 	bhi.w	801fa78 <Argus_Dev_CheckCfg+0x300>
 801f7e6:	f8b0 305f 	ldrh.w	r3, [r0, #95]	@ 0x5f
 801f7ea:	ba5b      	rev16	r3, r3
 801f7ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801f7f0:	2b00      	cmp	r3, #0
 801f7f2:	f000 813b 	beq.w	801fa6c <Argus_Dev_CheckCfg+0x2f4>
 801f7f6:	f890 3081 	ldrb.w	r3, [r0, #129]	@ 0x81
 801f7fa:	f3c3 0343 	ubfx	r3, r3, #1, #4
 801f7fe:	2b03      	cmp	r3, #3
 801f800:	f040 8117 	bne.w	801fa32 <Argus_Dev_CheckCfg+0x2ba>
 801f804:	f8b0 208b 	ldrh.w	r2, [r0, #139]	@ 0x8b
 801f808:	f890 c087 	ldrb.w	ip, [r0, #135]	@ 0x87
 801f80c:	ba52      	rev16	r2, r2
 801f80e:	f3c2 034e 	ubfx	r3, r2, #1, #15
 801f812:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 801f816:	b292      	uxth	r2, r2
 801f818:	1ad2      	subs	r2, r2, r3
 801f81a:	0891      	lsrs	r1, r2, #2
 801f81c:	f890 3088 	ldrb.w	r3, [r0, #136]	@ 0x88
 801f820:	f001 3133 	and.w	r1, r1, #858993459	@ 0x33333333
 801f824:	f002 3233 	and.w	r2, r2, #858993459	@ 0x33333333
 801f828:	440a      	add	r2, r1
 801f82a:	021b      	lsls	r3, r3, #8
 801f82c:	f890 1089 	ldrb.w	r1, [r0, #137]	@ 0x89
 801f830:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 801f834:	430b      	orrs	r3, r1
 801f836:	0859      	lsrs	r1, r3, #1
 801f838:	f001 3155 	and.w	r1, r1, #1431655765	@ 0x55555555
 801f83c:	1a5b      	subs	r3, r3, r1
 801f83e:	f003 3133 	and.w	r1, r3, #858993459	@ 0x33333333
 801f842:	089b      	lsrs	r3, r3, #2
 801f844:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 801f848:	4419      	add	r1, r3
 801f84a:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 801f84e:	f890 c083 	ldrb.w	ip, [r0, #131]	@ 0x83
 801f852:	021b      	lsls	r3, r3, #8
 801f854:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 801f858:	f890 c085 	ldrb.w	ip, [r0, #133]	@ 0x85
 801f85c:	ea43 030c 	orr.w	r3, r3, ip
 801f860:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801f864:	f00c 3c55 	and.w	ip, ip, #1431655765	@ 0x55555555
 801f868:	eba3 030c 	sub.w	r3, r3, ip
 801f86c:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 801f870:	f00c 3c33 	and.w	ip, ip, #858993459	@ 0x33333333
 801f874:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 801f878:	eb01 1111 	add.w	r1, r1, r1, lsr #4
 801f87c:	4463      	add	r3, ip
 801f87e:	f001 310f 	and.w	r1, r1, #252645135	@ 0xf0f0f0f
 801f882:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 801f886:	eb02 1212 	add.w	r2, r2, r2, lsr #4
 801f88a:	eb01 2101 	add.w	r1, r1, r1, lsl #8
 801f88e:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 801f892:	f002 320f 	and.w	r2, r2, #252645135	@ 0xf0f0f0f
 801f896:	eb01 4101 	add.w	r1, r1, r1, lsl #16
 801f89a:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 801f89e:	eb02 2202 	add.w	r2, r2, r2, lsl #8
 801f8a2:	0e09      	lsrs	r1, r1, #24
 801f8a4:	eb03 4303 	add.w	r3, r3, r3, lsl #16
 801f8a8:	eb02 4202 	add.w	r2, r2, r2, lsl #16
 801f8ac:	eb01 6313 	add.w	r3, r1, r3, lsr #24
 801f8b0:	eb03 6212 	add.w	r2, r3, r2, lsr #24
 801f8b4:	0092      	lsls	r2, r2, #2
 801f8b6:	2a84      	cmp	r2, #132	@ 0x84
 801f8b8:	f200 814a 	bhi.w	801fb50 <Argus_Dev_CheckCfg+0x3d8>
 801f8bc:	f8d0 1094 	ldr.w	r1, [r0, #148]	@ 0x94
 801f8c0:	2963      	cmp	r1, #99	@ 0x63
 801f8c2:	f240 813f 	bls.w	801fb44 <Argus_Dev_CheckCfg+0x3cc>
 801f8c6:	f8d0 1090 	ldr.w	r1, [r0, #144]	@ 0x90
 801f8ca:	2900      	cmp	r1, #0
 801f8cc:	f000 8158 	beq.w	801fb80 <Argus_Dev_CheckCfg+0x408>
 801f8d0:	f8b0 1098 	ldrh.w	r1, [r0, #152]	@ 0x98
 801f8d4:	2900      	cmp	r1, #0
 801f8d6:	f000 814d 	beq.w	801fb74 <Argus_Dev_CheckCfg+0x3fc>
 801f8da:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 801f8de:	2b00      	cmp	r3, #0
 801f8e0:	f000 812a 	beq.w	801fb38 <Argus_Dev_CheckCfg+0x3c0>
 801f8e4:	f890 109d 	ldrb.w	r1, [r0, #157]	@ 0x9d
 801f8e8:	2907      	cmp	r1, #7
 801f8ea:	f200 811f 	bhi.w	801fb2c <Argus_Dev_CheckCfg+0x3b4>
 801f8ee:	f890 109e 	ldrb.w	r1, [r0, #158]	@ 0x9e
 801f8f2:	2907      	cmp	r1, #7
 801f8f4:	f200 8138 	bhi.w	801fb68 <Argus_Dev_CheckCfg+0x3f0>
 801f8f8:	f890 109f 	ldrb.w	r1, [r0, #159]	@ 0x9f
 801f8fc:	2903      	cmp	r1, #3
 801f8fe:	f200 812d 	bhi.w	801fb5c <Argus_Dev_CheckCfg+0x3e4>
 801f902:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	@ 0xa0
 801f906:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801f90a:	4299      	cmp	r1, r3
 801f90c:	f200 8144 	bhi.w	801fb98 <Argus_Dev_CheckCfg+0x420>
 801f910:	f890 10a8 	ldrb.w	r1, [r0, #168]	@ 0xa8
 801f914:	2902      	cmp	r1, #2
 801f916:	f200 8139 	bhi.w	801fb8c <Argus_Dev_CheckCfg+0x414>
 801f91a:	f3c4 1380 	ubfx	r3, r4, #6, #1
 801f91e:	f8d0 20b8 	ldr.w	r2, [r0, #184]	@ 0xb8
 801f922:	eb03 13d4 	add.w	r3, r3, r4, lsr #7
 801f926:	f004 0101 	and.w	r1, r4, #1
 801f92a:	429a      	cmp	r2, r3
 801f92c:	eb01 0454 	add.w	r4, r1, r4, lsr #1
 801f930:	d360      	bcc.n	801f9f4 <Argus_Dev_CheckCfg+0x27c>
 801f932:	42a2      	cmp	r2, r4
 801f934:	d85e      	bhi.n	801f9f4 <Argus_Dev_CheckCfg+0x27c>
 801f936:	f8b0 20b0 	ldrh.w	r2, [r0, #176]	@ 0xb0
 801f93a:	f102 3cff 	add.w	ip, r2, #4294967295
 801f93e:	fa1f fc8c 	uxth.w	ip, ip
 801f942:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801f946:	458c      	cmp	ip, r1
 801f948:	d85d      	bhi.n	801fa06 <Argus_Dev_CheckCfg+0x28e>
 801f94a:	f8b0 20b4 	ldrh.w	r2, [r0, #180]	@ 0xb4
 801f94e:	f102 3cff 	add.w	ip, r2, #4294967295
 801f952:	fa1f fc8c 	uxth.w	ip, ip
 801f956:	458c      	cmp	ip, r1
 801f958:	d85e      	bhi.n	801fa18 <Argus_Dev_CheckCfg+0x2a0>
 801f95a:	f8d0 20bc 	ldr.w	r2, [r0, #188]	@ 0xbc
 801f95e:	429a      	cmp	r2, r3
 801f960:	d34f      	bcc.n	801fa02 <Argus_Dev_CheckCfg+0x28a>
 801f962:	42a2      	cmp	r2, r4
 801f964:	d84d      	bhi.n	801fa02 <Argus_Dev_CheckCfg+0x28a>
 801f966:	f8b0 20b2 	ldrh.w	r2, [r0, #178]	@ 0xb2
 801f96a:	1e53      	subs	r3, r2, #1
 801f96c:	b29b      	uxth	r3, r3
 801f96e:	428b      	cmp	r3, r1
 801f970:	d85b      	bhi.n	801fa2a <Argus_Dev_CheckCfg+0x2b2>
 801f972:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	@ 0xb6
 801f976:	1e53      	subs	r3, r2, #1
 801f978:	b29b      	uxth	r3, r3
 801f97a:	428b      	cmp	r3, r1
 801f97c:	d857      	bhi.n	801fa2e <Argus_Dev_CheckCfg+0x2b6>
 801f97e:	f890 30d4 	ldrb.w	r3, [r0, #212]	@ 0xd4
 801f982:	2b02      	cmp	r3, #2
 801f984:	d01c      	beq.n	801f9c0 <Argus_Dev_CheckCfg+0x248>
 801f986:	f890 30e0 	ldrb.w	r3, [r0, #224]	@ 0xe0
 801f98a:	b1bb      	cbz	r3, 801f9bc <Argus_Dev_CheckCfg+0x244>
 801f98c:	f8d0 30ec 	ldr.w	r3, [r0, #236]	@ 0xec
 801f990:	2b00      	cmp	r3, #0
 801f992:	f000 810d 	beq.w	801fbb0 <Argus_Dev_CheckCfg+0x438>
 801f996:	f990 30e2 	ldrsb.w	r3, [r0, #226]	@ 0xe2
 801f99a:	2b00      	cmp	r3, #0
 801f99c:	f2c0 8126 	blt.w	801fbec <Argus_Dev_CheckCfg+0x474>
 801f9a0:	f8b0 30e8 	ldrh.w	r3, [r0, #232]	@ 0xe8
 801f9a4:	2b00      	cmp	r3, #0
 801f9a6:	f000 8109 	beq.w	801fbbc <Argus_Dev_CheckCfg+0x444>
 801f9aa:	f8b0 20e6 	ldrh.w	r2, [r0, #230]	@ 0xe6
 801f9ae:	4293      	cmp	r3, r2
 801f9b0:	f200 810a 	bhi.w	801fbc8 <Argus_Dev_CheckCfg+0x450>
 801f9b4:	f8b0 30e4 	ldrh.w	r3, [r0, #228]	@ 0xe4
 801f9b8:	4293      	cmp	r3, r2
 801f9ba:	d315      	bcc.n	801f9e8 <Argus_Dev_CheckCfg+0x270>
 801f9bc:	2000      	movs	r0, #0
 801f9be:	bd10      	pop	{r4, pc}
 801f9c0:	f8d0 30dc 	ldr.w	r3, [r0, #220]	@ 0xdc
 801f9c4:	2b00      	cmp	r3, #0
 801f9c6:	f000 8105 	beq.w	801fbd4 <Argus_Dev_CheckCfg+0x45c>
 801f9ca:	f8b0 30da 	ldrh.w	r3, [r0, #218]	@ 0xda
 801f9ce:	2b00      	cmp	r3, #0
 801f9d0:	f000 8106 	beq.w	801fbe0 <Argus_Dev_CheckCfg+0x468>
 801f9d4:	f8b0 20d8 	ldrh.w	r2, [r0, #216]	@ 0xd8
 801f9d8:	429a      	cmp	r2, r3
 801f9da:	d2d4      	bcs.n	801f986 <Argus_Dev_CheckCfg+0x20e>
 801f9dc:	483c      	ldr	r0, [pc, #240]	@ (801fad0 <Argus_Dev_CheckCfg+0x358>)
 801f9de:	f7f3 fad9 	bl	8012f94 <print>
 801f9e2:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801f9e6:	bd10      	pop	{r4, pc}
 801f9e8:	483a      	ldr	r0, [pc, #232]	@ (801fad4 <Argus_Dev_CheckCfg+0x35c>)
 801f9ea:	f7f3 fad3 	bl	8012f94 <print>
 801f9ee:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801f9f2:	bd10      	pop	{r4, pc}
 801f9f4:	4938      	ldr	r1, [pc, #224]	@ (801fad8 <Argus_Dev_CheckCfg+0x360>)
 801f9f6:	4839      	ldr	r0, [pc, #228]	@ (801fadc <Argus_Dev_CheckCfg+0x364>)
 801f9f8:	f7f3 facc 	bl	8012f94 <print>
 801f9fc:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801fa00:	bd10      	pop	{r4, pc}
 801fa02:	4937      	ldr	r1, [pc, #220]	@ (801fae0 <Argus_Dev_CheckCfg+0x368>)
 801fa04:	e7f7      	b.n	801f9f6 <Argus_Dev_CheckCfg+0x27e>
 801fa06:	4934      	ldr	r1, [pc, #208]	@ (801fad8 <Argus_Dev_CheckCfg+0x360>)
 801fa08:	4836      	ldr	r0, [pc, #216]	@ (801fae4 <Argus_Dev_CheckCfg+0x36c>)
 801fa0a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 801fa0e:	f7f3 fac1 	bl	8012f94 <print>
 801fa12:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801fa16:	bd10      	pop	{r4, pc}
 801fa18:	492f      	ldr	r1, [pc, #188]	@ (801fad8 <Argus_Dev_CheckCfg+0x360>)
 801fa1a:	4833      	ldr	r0, [pc, #204]	@ (801fae8 <Argus_Dev_CheckCfg+0x370>)
 801fa1c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 801fa20:	f7f3 fab8 	bl	8012f94 <print>
 801fa24:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801fa28:	bd10      	pop	{r4, pc}
 801fa2a:	492d      	ldr	r1, [pc, #180]	@ (801fae0 <Argus_Dev_CheckCfg+0x368>)
 801fa2c:	e7ec      	b.n	801fa08 <Argus_Dev_CheckCfg+0x290>
 801fa2e:	492c      	ldr	r1, [pc, #176]	@ (801fae0 <Argus_Dev_CheckCfg+0x368>)
 801fa30:	e7f3      	b.n	801fa1a <Argus_Dev_CheckCfg+0x2a2>
 801fa32:	2104      	movs	r1, #4
 801fa34:	482d      	ldr	r0, [pc, #180]	@ (801faec <Argus_Dev_CheckCfg+0x374>)
 801fa36:	f7f3 faad 	bl	8012f94 <print>
 801fa3a:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801fa3e:	bd10      	pop	{r4, pc}
 801fa40:	482b      	ldr	r0, [pc, #172]	@ (801faf0 <Argus_Dev_CheckCfg+0x378>)
 801fa42:	f7f3 faa7 	bl	8012f94 <print>
 801fa46:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801fa4a:	bd10      	pop	{r4, pc}
 801fa4c:	33fa      	adds	r3, #250	@ 0xfa
 801fa4e:	22fa      	movs	r2, #250	@ 0xfa
 801fa50:	4828      	ldr	r0, [pc, #160]	@ (801faf4 <Argus_Dev_CheckCfg+0x37c>)
 801fa52:	f7f3 fa9f 	bl	8012f94 <print>
 801fa56:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801fa5a:	bd10      	pop	{r4, pc}
 801fa5c:	33fa      	adds	r3, #250	@ 0xfa
 801fa5e:	22fa      	movs	r2, #250	@ 0xfa
 801fa60:	4825      	ldr	r0, [pc, #148]	@ (801faf8 <Argus_Dev_CheckCfg+0x380>)
 801fa62:	f7f3 fa97 	bl	8012f94 <print>
 801fa66:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801fa6a:	bd10      	pop	{r4, pc}
 801fa6c:	4823      	ldr	r0, [pc, #140]	@ (801fafc <Argus_Dev_CheckCfg+0x384>)
 801fa6e:	f7f3 fa91 	bl	8012f94 <print>
 801fa72:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801fa76:	bd10      	pop	{r4, pc}
 801fa78:	4821      	ldr	r0, [pc, #132]	@ (801fb00 <Argus_Dev_CheckCfg+0x388>)
 801fa7a:	f7f3 fa8b 	bl	8012f94 <print>
 801fa7e:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801fa82:	bd10      	pop	{r4, pc}
 801fa84:	481f      	ldr	r0, [pc, #124]	@ (801fb04 <Argus_Dev_CheckCfg+0x38c>)
 801fa86:	f7f3 fa85 	bl	8012f94 <print>
 801fa8a:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801fa8e:	bd10      	pop	{r4, pc}
 801fa90:	2380      	movs	r3, #128	@ 0x80
 801fa92:	2202      	movs	r2, #2
 801fa94:	481c      	ldr	r0, [pc, #112]	@ (801fb08 <Argus_Dev_CheckCfg+0x390>)
 801fa96:	f7f3 fa7d 	bl	8012f94 <print>
 801fa9a:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801fa9e:	bd10      	pop	{r4, pc}
 801faa0:	481a      	ldr	r0, [pc, #104]	@ (801fb0c <Argus_Dev_CheckCfg+0x394>)
 801faa2:	f7f3 fa77 	bl	8012f94 <print>
 801faa6:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801faaa:	bd10      	pop	{r4, pc}
 801faac:	4b18      	ldr	r3, [pc, #96]	@ (801fb10 <Argus_Dev_CheckCfg+0x398>)
 801faae:	4a19      	ldr	r2, [pc, #100]	@ (801fb14 <Argus_Dev_CheckCfg+0x39c>)
 801fab0:	4819      	ldr	r0, [pc, #100]	@ (801fb18 <Argus_Dev_CheckCfg+0x3a0>)
 801fab2:	4621      	mov	r1, r4
 801fab4:	f7f3 fa6e 	bl	8012f94 <print>
 801fab8:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801fabc:	bd10      	pop	{r4, pc}
 801fabe:	bf00      	nop
 801fac0:	00030c46 	.word	0x00030c46
 801fac4:	000185a6 	.word	0x000185a6
 801fac8:	feced300 	.word	0xfeced300
 801facc:	00989680 	.word	0x00989680
 801fad0:	0802ea24 	.word	0x0802ea24
 801fad4:	0802ebc8 	.word	0x0802ebc8
 801fad8:	0802e338 	.word	0x0802e338
 801fadc:	0802e87c 	.word	0x0802e87c
 801fae0:	0802e334 	.word	0x0802e334
 801fae4:	0802e8dc 	.word	0x0802e8dc
 801fae8:	0802e93c 	.word	0x0802e93c
 801faec:	0802e5cc 	.word	0x0802e5cc
 801faf0:	0802e33c 	.word	0x0802e33c
 801faf4:	0802e368 	.word	0x0802e368
 801faf8:	0802e3a8 	.word	0x0802e3a8
 801fafc:	0802e58c 	.word	0x0802e58c
 801fb00:	0802e568 	.word	0x0802e568
 801fb04:	0802e534 	.word	0x0802e534
 801fb08:	0802e3ec 	.word	0x0802e3ec
 801fb0c:	0802e4d0 	.word	0x0802e4d0
 801fb10:	01c9c380 	.word	0x01c9c380
 801fb14:	01312d00 	.word	0x01312d00
 801fb18:	0802e474 	.word	0x0802e474
 801fb1c:	2380      	movs	r3, #128	@ 0x80
 801fb1e:	2200      	movs	r2, #0
 801fb20:	4835      	ldr	r0, [pc, #212]	@ (801fbf8 <Argus_Dev_CheckCfg+0x480>)
 801fb22:	f7f3 fa37 	bl	8012f94 <print>
 801fb26:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801fb2a:	bd10      	pop	{r4, pc}
 801fb2c:	4833      	ldr	r0, [pc, #204]	@ (801fbfc <Argus_Dev_CheckCfg+0x484>)
 801fb2e:	f7f3 fa31 	bl	8012f94 <print>
 801fb32:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801fb36:	bd10      	pop	{r4, pc}
 801fb38:	4831      	ldr	r0, [pc, #196]	@ (801fc00 <Argus_Dev_CheckCfg+0x488>)
 801fb3a:	f7f3 fa2b 	bl	8012f94 <print>
 801fb3e:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801fb42:	bd10      	pop	{r4, pc}
 801fb44:	482f      	ldr	r0, [pc, #188]	@ (801fc04 <Argus_Dev_CheckCfg+0x48c>)
 801fb46:	f7f3 fa25 	bl	8012f94 <print>
 801fb4a:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801fb4e:	bd10      	pop	{r4, pc}
 801fb50:	482d      	ldr	r0, [pc, #180]	@ (801fc08 <Argus_Dev_CheckCfg+0x490>)
 801fb52:	f7f3 fa1f 	bl	8012f94 <print>
 801fb56:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801fb5a:	bd10      	pop	{r4, pc}
 801fb5c:	482b      	ldr	r0, [pc, #172]	@ (801fc0c <Argus_Dev_CheckCfg+0x494>)
 801fb5e:	f7f3 fa19 	bl	8012f94 <print>
 801fb62:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801fb66:	bd10      	pop	{r4, pc}
 801fb68:	4829      	ldr	r0, [pc, #164]	@ (801fc10 <Argus_Dev_CheckCfg+0x498>)
 801fb6a:	f7f3 fa13 	bl	8012f94 <print>
 801fb6e:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801fb72:	bd10      	pop	{r4, pc}
 801fb74:	4827      	ldr	r0, [pc, #156]	@ (801fc14 <Argus_Dev_CheckCfg+0x49c>)
 801fb76:	f7f3 fa0d 	bl	8012f94 <print>
 801fb7a:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801fb7e:	bd10      	pop	{r4, pc}
 801fb80:	4825      	ldr	r0, [pc, #148]	@ (801fc18 <Argus_Dev_CheckCfg+0x4a0>)
 801fb82:	f7f3 fa07 	bl	8012f94 <print>
 801fb86:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801fb8a:	bd10      	pop	{r4, pc}
 801fb8c:	4823      	ldr	r0, [pc, #140]	@ (801fc1c <Argus_Dev_CheckCfg+0x4a4>)
 801fb8e:	f7f3 fa01 	bl	8012f94 <print>
 801fb92:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801fb96:	bd10      	pop	{r4, pc}
 801fb98:	4821      	ldr	r0, [pc, #132]	@ (801fc20 <Argus_Dev_CheckCfg+0x4a8>)
 801fb9a:	f7f3 f9fb 	bl	8012f94 <print>
 801fb9e:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801fba2:	bd10      	pop	{r4, pc}
 801fba4:	481f      	ldr	r0, [pc, #124]	@ (801fc24 <Argus_Dev_CheckCfg+0x4ac>)
 801fba6:	f7f3 f9f5 	bl	8012f94 <print>
 801fbaa:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801fbae:	bd10      	pop	{r4, pc}
 801fbb0:	481d      	ldr	r0, [pc, #116]	@ (801fc28 <Argus_Dev_CheckCfg+0x4b0>)
 801fbb2:	f7f3 f9ef 	bl	8012f94 <print>
 801fbb6:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801fbba:	bd10      	pop	{r4, pc}
 801fbbc:	481b      	ldr	r0, [pc, #108]	@ (801fc2c <Argus_Dev_CheckCfg+0x4b4>)
 801fbbe:	f7f3 f9e9 	bl	8012f94 <print>
 801fbc2:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801fbc6:	bd10      	pop	{r4, pc}
 801fbc8:	4819      	ldr	r0, [pc, #100]	@ (801fc30 <Argus_Dev_CheckCfg+0x4b8>)
 801fbca:	f7f3 f9e3 	bl	8012f94 <print>
 801fbce:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801fbd2:	bd10      	pop	{r4, pc}
 801fbd4:	4817      	ldr	r0, [pc, #92]	@ (801fc34 <Argus_Dev_CheckCfg+0x4bc>)
 801fbd6:	f7f3 f9dd 	bl	8012f94 <print>
 801fbda:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801fbde:	bd10      	pop	{r4, pc}
 801fbe0:	4815      	ldr	r0, [pc, #84]	@ (801fc38 <Argus_Dev_CheckCfg+0x4c0>)
 801fbe2:	f7f3 f9d7 	bl	8012f94 <print>
 801fbe6:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801fbea:	bd10      	pop	{r4, pc}
 801fbec:	4813      	ldr	r0, [pc, #76]	@ (801fc3c <Argus_Dev_CheckCfg+0x4c4>)
 801fbee:	f7f3 f9d1 	bl	8012f94 <print>
 801fbf2:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801fbf6:	bd10      	pop	{r4, pc}
 801fbf8:	0802e430 	.word	0x0802e430
 801fbfc:	0802e734 	.word	0x0802e734
 801fc00:	0802e6f4 	.word	0x0802e6f4
 801fc04:	0802e624 	.word	0x0802e624
 801fc08:	0802e5f4 	.word	0x0802e5f4
 801fc0c:	0802e7bc 	.word	0x0802e7bc
 801fc10:	0802e774 	.word	0x0802e774
 801fc14:	0802e6a8 	.word	0x0802e6a8
 801fc18:	0802e664 	.word	0x0802e664
 801fc1c:	0802e84c 	.word	0x0802e84c
 801fc20:	0802e804 	.word	0x0802e804
 801fc24:	0802e504 	.word	0x0802e504
 801fc28:	0802ea78 	.word	0x0802ea78
 801fc2c:	0802eb10 	.word	0x0802eb10
 801fc30:	0802eb5c 	.word	0x0802eb5c
 801fc34:	0802e99c 	.word	0x0802e99c
 801fc38:	0802e9e4 	.word	0x0802e9e4
 801fc3c:	0802eabc 	.word	0x0802eabc

0801fc40 <Argus_Dev_PrepareCfg>:
 801fc40:	f7fb bace 	b.w	801b1e0 <Argus_Dca_PrepareCfg>

0801fc44 <Argus_Dev_Update>:
 801fc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc48:	4683      	mov	fp, r0
 801fc4a:	4608      	mov	r0, r1
 801fc4c:	f8db 111c 	ldr.w	r1, [fp, #284]	@ 0x11c
 801fc50:	4613      	mov	r3, r2
 801fc52:	b091      	sub	sp, #68	@ 0x44
 801fc54:	e9cd 3002 	strd	r3, r0, [sp, #8]
 801fc58:	3122      	adds	r1, #34	@ 0x22
 801fc5a:	226c      	movs	r2, #108	@ 0x6c
 801fc5c:	4604      	mov	r4, r0
 801fc5e:	f10b 000c 	add.w	r0, fp, #12
 801fc62:	f009 fe0e 	bl	8029882 <memcpy>
 801fc66:	f8db 2078 	ldr.w	r2, [fp, #120]	@ 0x78
 801fc6a:	4bbc      	ldr	r3, [pc, #752]	@ (801ff5c <Argus_Dev_Update+0x318>)
 801fc6c:	f89b 10fd 	ldrb.w	r1, [fp, #253]	@ 0xfd
 801fc70:	4313      	orrs	r3, r2
 801fc72:	f8cb 3078 	str.w	r3, [fp, #120]	@ 0x78
 801fc76:	f8db 2078 	ldr.w	r2, [fp, #120]	@ 0x78
 801fc7a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 801fc7e:	f8cb 2078 	str.w	r2, [fp, #120]	@ 0x78
 801fc82:	f894 2021 	ldrb.w	r2, [r4, #33]	@ 0x21
 801fc86:	2a00      	cmp	r2, #0
 801fc88:	f000 81df 	beq.w	802004a <Argus_Dev_Update+0x406>
 801fc8c:	f021 0301 	bic.w	r3, r1, #1
 801fc90:	f043 0302 	orr.w	r3, r3, #2
 801fc94:	f89b 2064 	ldrb.w	r2, [fp, #100]	@ 0x64
 801fc98:	9802      	ldr	r0, [sp, #8]
 801fc9a:	f023 030c 	bic.w	r3, r3, #12
 801fc9e:	f002 0203 	and.w	r2, r2, #3
 801fca2:	ea43 0282 	orr.w	r2, r3, r2, lsl #2
 801fca6:	f8bb 305d 	ldrh.w	r3, [fp, #93]	@ 0x5d
 801fcaa:	f88b 20fd 	strb.w	r2, [fp, #253]	@ 0xfd
 801fcae:	f990 1296 	ldrsb.w	r1, [r0, #662]	@ 0x296
 801fcb2:	f89b 205e 	ldrb.w	r2, [fp, #94]	@ 0x5e
 801fcb6:	ba5b      	rev16	r3, r3
 801fcb8:	f3c3 1385 	ubfx	r3, r3, #6, #6
 801fcbc:	440b      	add	r3, r1
 801fcbe:	f383 0306 	usat	r3, #6, r3
 801fcc2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801fcc6:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 801fcca:	f88b 205e 	strb.w	r2, [fp, #94]	@ 0x5e
 801fcce:	f89b 205d 	ldrb.w	r2, [fp, #93]	@ 0x5d
 801fcd2:	f3c3 0397 	ubfx	r3, r3, #2, #24
 801fcd6:	f022 020f 	bic.w	r2, r2, #15
 801fcda:	4313      	orrs	r3, r2
 801fcdc:	f88b 305d 	strb.w	r3, [fp, #93]	@ 0x5d
 801fce0:	f990 129c 	ldrsb.w	r1, [r0, #668]	@ 0x29c
 801fce4:	f89b 204f 	ldrb.w	r2, [fp, #79]	@ 0x4f
 801fce8:	1d0e      	adds	r6, r1, #4
 801fcea:	f000 8272 	beq.w	80201d2 <Argus_Dev_Update+0x58e>
 801fcee:	f3c2 0343 	ubfx	r3, r2, #1, #4
 801fcf2:	440b      	add	r3, r1
 801fcf4:	2b0e      	cmp	r3, #14
 801fcf6:	bfdd      	ittte	le
 801fcf8:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 801fcfc:	005b      	lslle	r3, r3, #1
 801fcfe:	b25b      	sxtble	r3, r3
 801fd00:	231e      	movgt	r3, #30
 801fd02:	f022 021e 	bic.w	r2, r2, #30
 801fd06:	4313      	orrs	r3, r2
 801fd08:	f88b 304f 	strb.w	r3, [fp, #79]	@ 0x4f
 801fd0c:	9b03      	ldr	r3, [sp, #12]
 801fd0e:	781b      	ldrb	r3, [r3, #0]
 801fd10:	075d      	lsls	r5, r3, #29
 801fd12:	f140 8191 	bpl.w	8020038 <Argus_Dev_Update+0x3f4>
 801fd16:	f89b 3072 	ldrb.w	r3, [fp, #114]	@ 0x72
 801fd1a:	f89b 2071 	ldrb.w	r2, [fp, #113]	@ 0x71
 801fd1e:	9802      	ldr	r0, [sp, #8]
 801fd20:	021b      	lsls	r3, r3, #8
 801fd22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801fd26:	f89b 2073 	ldrb.w	r2, [fp, #115]	@ 0x73
 801fd2a:	f890 429e 	ldrb.w	r4, [r0, #670]	@ 0x29e
 801fd2e:	f890 e01b 	ldrb.w	lr, [r0, #27]
 801fd32:	f890 529d 	ldrb.w	r5, [r0, #669]	@ 0x29d
 801fd36:	940b      	str	r4, [sp, #44]	@ 0x2c
 801fd38:	4313      	orrs	r3, r2
 801fd3a:	f8bb 2075 	ldrh.w	r2, [fp, #117]	@ 0x75
 801fd3e:	9309      	str	r3, [sp, #36]	@ 0x24
 801fd40:	ba52      	rev16	r2, r2
 801fd42:	b292      	uxth	r2, r2
 801fd44:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801fd48:	0a13      	lsrs	r3, r2, #8
 801fd4a:	0f91      	lsrs	r1, r2, #30
 801fd4c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 801fd50:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 801fd54:	0d91      	lsrs	r1, r2, #22
 801fd56:	f001 01c0 	and.w	r1, r1, #192	@ 0xc0
 801fd5a:	430b      	orrs	r3, r1
 801fd5c:	0891      	lsrs	r1, r2, #2
 801fd5e:	f401 7140 	and.w	r1, r1, #768	@ 0x300
 801fd62:	430b      	orrs	r3, r1
 801fd64:	0c11      	lsrs	r1, r2, #16
 801fd66:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 801fd6a:	430b      	orrs	r3, r1
 801fd6c:	0111      	lsls	r1, r2, #4
 801fd6e:	f401 5140 	and.w	r1, r1, #12288	@ 0x3000
 801fd72:	430b      	orrs	r3, r1
 801fd74:	0a91      	lsrs	r1, r2, #10
 801fd76:	f401 4140 	and.w	r1, r1, #49152	@ 0xc000
 801fd7a:	430b      	orrs	r3, r1
 801fd7c:	0291      	lsls	r1, r2, #10
 801fd7e:	f401 3140 	and.w	r1, r1, #196608	@ 0x30000
 801fd82:	430b      	orrs	r3, r1
 801fd84:	0911      	lsrs	r1, r2, #4
 801fd86:	f401 2140 	and.w	r1, r1, #786432	@ 0xc0000
 801fd8a:	430b      	orrs	r3, r1
 801fd8c:	0411      	lsls	r1, r2, #16
 801fd8e:	f401 1140 	and.w	r1, r1, #3145728	@ 0x300000
 801fd92:	430b      	orrs	r3, r1
 801fd94:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 801fd98:	f3c2 3181 	ubfx	r1, r2, #14, #2
 801fd9c:	430b      	orrs	r3, r1
 801fd9e:	f40a 0a40 	and.w	sl, sl, #12582912	@ 0xc00000
 801fda2:	ea4a 0a03 	orr.w	sl, sl, r3
 801fda6:	0593      	lsls	r3, r2, #22
 801fda8:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 801fdac:	ea43 0a0a 	orr.w	sl, r3, sl
 801fdb0:	0213      	lsls	r3, r2, #8
 801fdb2:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 801fdb6:	ea43 030a 	orr.w	r3, r3, sl
 801fdba:	7e81      	ldrb	r1, [r0, #26]
 801fdbc:	950a      	str	r5, [sp, #40]	@ 0x28
 801fdbe:	ea4f 7a02 	mov.w	sl, r2, lsl #28
 801fdc2:	eba4 070e 	sub.w	r7, r4, lr
 801fdc6:	f00a 5a40 	and.w	sl, sl, #805306368	@ 0x30000000
 801fdca:	ea4a 0a03 	orr.w	sl, sl, r3
 801fdce:	b2ff      	uxtb	r7, r7
 801fdd0:	1a6b      	subs	r3, r5, r1
 801fdd2:	433b      	orrs	r3, r7
 801fdd4:	0c10      	lsrs	r0, r2, #16
 801fdd6:	b2db      	uxtb	r3, r3
 801fdd8:	ea4a 7a80 	orr.w	sl, sl, r0, lsl #30
 801fddc:	2b00      	cmp	r3, #0
 801fdde:	f000 81fa 	beq.w	80201d6 <Argus_Dev_Update+0x592>
 801fde2:	1b4b      	subs	r3, r1, r5
 801fde4:	ebae 0104 	sub.w	r1, lr, r4
 801fde8:	b2c8      	uxtb	r0, r1
 801fdea:	b2db      	uxtb	r3, r3
 801fdec:	f100 0901 	add.w	r9, r0, #1
 801fdf0:	f100 0c02 	add.w	ip, r0, #2
 801fdf4:	1cc4      	adds	r4, r0, #3
 801fdf6:	b249      	sxtb	r1, r1
 801fdf8:	9004      	str	r0, [sp, #16]
 801fdfa:	1e58      	subs	r0, r3, #1
 801fdfc:	9108      	str	r1, [sp, #32]
 801fdfe:	b2c1      	uxtb	r1, r0
 801fe00:	fa5f f089 	uxtb.w	r0, r9
 801fe04:	900c      	str	r0, [sp, #48]	@ 0x30
 801fe06:	fa4f f089 	sxtb.w	r0, r9
 801fe0a:	9005      	str	r0, [sp, #20]
 801fe0c:	fa5f f08c 	uxtb.w	r0, ip
 801fe10:	9001      	str	r0, [sp, #4]
 801fe12:	fa4f f08c 	sxtb.w	r0, ip
 801fe16:	9006      	str	r0, [sp, #24]
 801fe18:	b2e0      	uxtb	r0, r4
 801fe1a:	f00e 0e01 	and.w	lr, lr, #1
 801fe1e:	9100      	str	r1, [sp, #0]
 801fe20:	900d      	str	r0, [sp, #52]	@ 0x34
 801fe22:	f103 0801 	add.w	r8, r3, #1
 801fe26:	2600      	movs	r6, #0
 801fe28:	b264      	sxtb	r4, r4
 801fe2a:	f007 0701 	and.w	r7, r7, #1
 801fe2e:	9800      	ldr	r0, [sp, #0]
 801fe30:	920e      	str	r2, [sp, #56]	@ 0x38
 801fe32:	f8cd e000 	str.w	lr, [sp]
 801fe36:	fa5f f588 	uxtb.w	r5, r8
 801fe3a:	e9dd e90c 	ldrd	lr, r9, [sp, #48]	@ 0x30
 801fe3e:	9407      	str	r4, [sp, #28]
 801fe40:	46b4      	mov	ip, r6
 801fe42:	f8cd b03c 	str.w	fp, [sp, #60]	@ 0x3c
 801fe46:	b25a      	sxtb	r2, r3
 801fe48:	2f00      	cmp	r7, #0
 801fe4a:	d073      	beq.n	801ff34 <Argus_Dev_Update+0x2f0>
 801fe4c:	9900      	ldr	r1, [sp, #0]
 801fe4e:	2900      	cmp	r1, #0
 801fe50:	f040 810d 	bne.w	802006e <Argus_Dev_Update+0x42a>
 801fe54:	b26c      	sxtb	r4, r5
 801fe56:	46ab      	mov	fp, r5
 801fe58:	f1bb 0f07 	cmp.w	fp, #7
 801fe5c:	d80d      	bhi.n	801fe7a <Argus_Dev_Update+0x236>
 801fe5e:	9904      	ldr	r1, [sp, #16]
 801fe60:	2903      	cmp	r1, #3
 801fe62:	d80a      	bhi.n	801fe7a <Argus_Dev_Update+0x236>
 801fe64:	9908      	ldr	r1, [sp, #32]
 801fe66:	ea41 0484 	orr.w	r4, r1, r4, lsl #2
 801fe6a:	fa2a f404 	lsr.w	r4, sl, r4
 801fe6e:	07e1      	lsls	r1, r4, #31
 801fe70:	d503      	bpl.n	801fe7a <Argus_Dev_Update+0x236>
 801fe72:	2401      	movs	r4, #1
 801fe74:	40b4      	lsls	r4, r6
 801fe76:	ea4c 0c04 	orr.w	ip, ip, r4
 801fe7a:	9900      	ldr	r1, [sp, #0]
 801fe7c:	2900      	cmp	r1, #0
 801fe7e:	f000 80f0 	beq.w	8020062 <Argus_Dev_Update+0x41e>
 801fe82:	b244      	sxtb	r4, r0
 801fe84:	4683      	mov	fp, r0
 801fe86:	f1bb 0f07 	cmp.w	fp, #7
 801fe8a:	d813      	bhi.n	801feb4 <Argus_Dev_Update+0x270>
 801fe8c:	f1be 0f03 	cmp.w	lr, #3
 801fe90:	d80d      	bhi.n	801feae <Argus_Dev_Update+0x26a>
 801fe92:	9905      	ldr	r1, [sp, #20]
 801fe94:	ea41 0484 	orr.w	r4, r1, r4, lsl #2
 801fe98:	fa2a f404 	lsr.w	r4, sl, r4
 801fe9c:	07e4      	lsls	r4, r4, #31
 801fe9e:	d506      	bpl.n	801feae <Argus_Dev_Update+0x26a>
 801fea0:	f046 0b01 	orr.w	fp, r6, #1
 801fea4:	2401      	movs	r4, #1
 801fea6:	fa04 f40b 	lsl.w	r4, r4, fp
 801feaa:	ea4c 0c04 	orr.w	ip, ip, r4
 801feae:	2f00      	cmp	r7, #0
 801feb0:	f000 80ce 	beq.w	8020050 <Argus_Dev_Update+0x40c>
 801feb4:	9900      	ldr	r1, [sp, #0]
 801feb6:	2900      	cmp	r1, #0
 801feb8:	f040 80d6 	bne.w	8020068 <Argus_Dev_Update+0x424>
 801febc:	b26c      	sxtb	r4, r5
 801febe:	46ab      	mov	fp, r5
 801fec0:	f1bb 0f07 	cmp.w	fp, #7
 801fec4:	d811      	bhi.n	801feea <Argus_Dev_Update+0x2a6>
 801fec6:	9901      	ldr	r1, [sp, #4]
 801fec8:	2903      	cmp	r1, #3
 801feca:	d80d      	bhi.n	801fee8 <Argus_Dev_Update+0x2a4>
 801fecc:	9906      	ldr	r1, [sp, #24]
 801fece:	ea41 0484 	orr.w	r4, r1, r4, lsl #2
 801fed2:	fa2a f404 	lsr.w	r4, sl, r4
 801fed6:	07e1      	lsls	r1, r4, #31
 801fed8:	d506      	bpl.n	801fee8 <Argus_Dev_Update+0x2a4>
 801feda:	f046 0b02 	orr.w	fp, r6, #2
 801fede:	2401      	movs	r4, #1
 801fee0:	fa04 f40b 	lsl.w	r4, r4, fp
 801fee4:	ea4c 0c04 	orr.w	ip, ip, r4
 801fee8:	b11f      	cbz	r7, 801fef2 <Argus_Dev_Update+0x2ae>
 801feea:	9900      	ldr	r1, [sp, #0]
 801feec:	b109      	cbz	r1, 801fef2 <Argus_Dev_Update+0x2ae>
 801feee:	b242      	sxtb	r2, r0
 801fef0:	4603      	mov	r3, r0
 801fef2:	2b07      	cmp	r3, #7
 801fef4:	d80f      	bhi.n	801ff16 <Argus_Dev_Update+0x2d2>
 801fef6:	f1b9 0f03 	cmp.w	r9, #3
 801fefa:	d80c      	bhi.n	801ff16 <Argus_Dev_Update+0x2d2>
 801fefc:	9b07      	ldr	r3, [sp, #28]
 801fefe:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 801ff02:	fa2a f303 	lsr.w	r3, sl, r3
 801ff06:	07db      	lsls	r3, r3, #31
 801ff08:	d505      	bpl.n	801ff16 <Argus_Dev_Update+0x2d2>
 801ff0a:	f046 0203 	orr.w	r2, r6, #3
 801ff0e:	2301      	movs	r3, #1
 801ff10:	4093      	lsls	r3, r2
 801ff12:	ea4c 0c03 	orr.w	ip, ip, r3
 801ff16:	3604      	adds	r6, #4
 801ff18:	3001      	adds	r0, #1
 801ff1a:	3501      	adds	r5, #1
 801ff1c:	2e20      	cmp	r6, #32
 801ff1e:	fa5f f388 	uxtb.w	r3, r8
 801ff22:	b2c0      	uxtb	r0, r0
 801ff24:	b2ed      	uxtb	r5, r5
 801ff26:	f000 80a5 	beq.w	8020074 <Argus_Dev_Update+0x430>
 801ff2a:	f103 0801 	add.w	r8, r3, #1
 801ff2e:	b25a      	sxtb	r2, r3
 801ff30:	2f00      	cmp	r7, #0
 801ff32:	d18b      	bne.n	801fe4c <Argus_Dev_Update+0x208>
 801ff34:	2b07      	cmp	r3, #7
 801ff36:	d8ee      	bhi.n	801ff16 <Argus_Dev_Update+0x2d2>
 801ff38:	9904      	ldr	r1, [sp, #16]
 801ff3a:	2903      	cmp	r1, #3
 801ff3c:	f200 8143 	bhi.w	80201c6 <Argus_Dev_Update+0x582>
 801ff40:	9908      	ldr	r1, [sp, #32]
 801ff42:	ea41 0482 	orr.w	r4, r1, r2, lsl #2
 801ff46:	fa2a f404 	lsr.w	r4, sl, r4
 801ff4a:	07e4      	lsls	r4, r4, #31
 801ff4c:	d503      	bpl.n	801ff56 <Argus_Dev_Update+0x312>
 801ff4e:	2401      	movs	r4, #1
 801ff50:	40b4      	lsls	r4, r6
 801ff52:	ea4c 0c04 	orr.w	ip, ip, r4
 801ff56:	4614      	mov	r4, r2
 801ff58:	e798      	b.n	801fe8c <Argus_Dev_Update+0x248>
 801ff5a:	bf00      	nop
 801ff5c:	0003dffe 	.word	0x0003dffe
 801ff60:	2301      	movs	r3, #1
 801ff62:	ea4c 0c8e 	orr.w	ip, ip, lr, lsl #2
 801ff66:	fa03 fc0c 	lsl.w	ip, r3, ip
 801ff6a:	ea41 010c 	orr.w	r1, r1, ip
 801ff6e:	fa21 f203 	lsr.w	r2, r1, r3
 801ff72:	f002 3255 	and.w	r2, r2, #1431655765	@ 0x55555555
 801ff76:	1a8a      	subs	r2, r1, r2
 801ff78:	0893      	lsrs	r3, r2, #2
 801ff7a:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 801ff7e:	f002 3233 	and.w	r2, r2, #858993459	@ 0x33333333
 801ff82:	4413      	add	r3, r2
 801ff84:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 801ff88:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 801ff8c:	9a00      	ldr	r2, [sp, #0]
 801ff8e:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 801ff92:	eb03 4303 	add.w	r3, r3, r3, lsl #16
 801ff96:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
 801ff9a:	f200 80bc 	bhi.w	8020116 <Argus_Dev_Update+0x4d2>
 801ff9e:	f8dd b010 	ldr.w	fp, [sp, #16]
 801ffa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ffa4:	0c1b      	lsrs	r3, r3, #16
 801ffa6:	f88b 3071 	strb.w	r3, [fp, #113]	@ 0x71
 801ffaa:	0c0a      	lsrs	r2, r1, #16
 801ffac:	0d8b      	lsrs	r3, r1, #22
 801ffae:	f003 030c 	and.w	r3, r3, #12
 801ffb2:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 801ffb6:	431a      	orrs	r2, r3
 801ffb8:	0a8b      	lsrs	r3, r1, #10
 801ffba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801ffbe:	431a      	orrs	r2, r3
 801ffc0:	090b      	lsrs	r3, r1, #4
 801ffc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801ffc6:	431a      	orrs	r2, r3
 801ffc8:	008b      	lsls	r3, r1, #2
 801ffca:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 801ffce:	431a      	orrs	r2, r3
 801ffd0:	020b      	lsls	r3, r1, #8
 801ffd2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 801ffd6:	431a      	orrs	r2, r3
 801ffd8:	038b      	lsls	r3, r1, #14
 801ffda:	b29b      	uxth	r3, r3
 801ffdc:	431a      	orrs	r2, r3
 801ffde:	0f8b      	lsrs	r3, r1, #30
 801ffe0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801ffe4:	0a0b      	lsrs	r3, r1, #8
 801ffe6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 801ffea:	431a      	orrs	r2, r3
 801ffec:	088b      	lsrs	r3, r1, #2
 801ffee:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 801fff2:	431a      	orrs	r2, r3
 801fff4:	010b      	lsls	r3, r1, #4
 801fff6:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 801fffa:	431a      	orrs	r2, r3
 801fffc:	028b      	lsls	r3, r1, #10
 801fffe:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8020002:	431a      	orrs	r2, r3
 8020004:	040b      	lsls	r3, r1, #16
 8020006:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 802000a:	431a      	orrs	r2, r3
 802000c:	058b      	lsls	r3, r1, #22
 802000e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8020012:	431a      	orrs	r2, r3
 8020014:	088b      	lsrs	r3, r1, #2
 8020016:	ea42 7283 	orr.w	r2, r2, r3, lsl #30
 802001a:	f3c1 7301 	ubfx	r3, r1, #28, #2
 802001e:	4313      	orrs	r3, r2
 8020020:	0a12      	lsrs	r2, r2, #8
 8020022:	f88b 2075 	strb.w	r2, [fp, #117]	@ 0x75
 8020026:	f88b 3076 	strb.w	r3, [fp, #118]	@ 0x76
 802002a:	0c1a      	lsrs	r2, r3, #16
 802002c:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8020030:	f88b 2073 	strb.w	r2, [fp, #115]	@ 0x73
 8020034:	f88b 3072 	strb.w	r3, [fp, #114]	@ 0x72
 8020038:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 802003c:	f50b 70b4 	add.w	r0, fp, #360	@ 0x168
 8020040:	b011      	add	sp, #68	@ 0x44
 8020042:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020046:	f7fb bbeb 	b.w	801b820 <Argus_Dca_Update>
 802004a:	f041 0302 	orr.w	r3, r1, #2
 802004e:	e621      	b.n	801fc94 <Argus_Dev_Update+0x50>
 8020050:	2b07      	cmp	r3, #7
 8020052:	f63f af60 	bhi.w	801ff16 <Argus_Dev_Update+0x2d2>
 8020056:	9901      	ldr	r1, [sp, #4]
 8020058:	2903      	cmp	r1, #3
 802005a:	f63f af4c 	bhi.w	801fef6 <Argus_Dev_Update+0x2b2>
 802005e:	4614      	mov	r4, r2
 8020060:	e734      	b.n	801fecc <Argus_Dev_Update+0x288>
 8020062:	469b      	mov	fp, r3
 8020064:	4614      	mov	r4, r2
 8020066:	e70e      	b.n	801fe86 <Argus_Dev_Update+0x242>
 8020068:	469b      	mov	fp, r3
 802006a:	4614      	mov	r4, r2
 802006c:	e728      	b.n	801fec0 <Argus_Dev_Update+0x27c>
 802006e:	469b      	mov	fp, r3
 8020070:	4614      	mov	r4, r2
 8020072:	e6f1      	b.n	801fe58 <Argus_Dev_Update+0x214>
 8020074:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020076:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 802007a:	4661      	mov	r1, ip
 802007c:	0853      	lsrs	r3, r2, #1
 802007e:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8020082:	1ad2      	subs	r2, r2, r3
 8020084:	0893      	lsrs	r3, r2, #2
 8020086:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 802008a:	f002 3233 	and.w	r2, r2, #858993459	@ 0x33333333
 802008e:	4413      	add	r3, r2
 8020090:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 8020094:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8020098:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 802009c:	eb03 4303 	add.w	r3, r3, r3, lsl #16
 80200a0:	0e18      	lsrs	r0, r3, #24
 80200a2:	2820      	cmp	r0, #32
 80200a4:	9000      	str	r0, [sp, #0]
 80200a6:	f000 8098 	beq.w	80201da <Argus_Dev_Update+0x596>
 80200aa:	084b      	lsrs	r3, r1, #1
 80200ac:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 80200b0:	1acb      	subs	r3, r1, r3
 80200b2:	089a      	lsrs	r2, r3, #2
 80200b4:	f002 3233 	and.w	r2, r2, #858993459	@ 0x33333333
 80200b8:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 80200bc:	4413      	add	r3, r2
 80200be:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 80200c2:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 80200c6:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 80200ca:	eb03 4303 	add.w	r3, r3, r3, lsl #16
 80200ce:	ebb0 6f13 	cmp.w	r0, r3, lsr #24
 80200d2:	f67f af66 	bls.w	801ffa2 <Argus_Dev_Update+0x35e>
 80200d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80200d8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80200da:	f8cd b010 	str.w	fp, [sp, #16]
 80200de:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
 80200e2:	005b      	lsls	r3, r3, #1
 80200e4:	9301      	str	r3, [sp, #4]
 80200e6:	f1c2 0a01 	rsb	sl, r2, #1
 80200ea:	f1c2 0902 	rsb	r9, r2, #2
 80200ee:	f1c2 0803 	rsb	r8, r2, #3
 80200f2:	0053      	lsls	r3, r2, #1
 80200f4:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 80200f8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80200fc:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8020100:	fb03 f303 	mul.w	r3, r3, r3
 8020104:	fb0a fa0a 	mul.w	sl, sl, sl
 8020108:	fb09 f909 	mul.w	r9, r9, r9
 802010c:	fb08 f808 	mul.w	r8, r8, r8
 8020110:	f002 0401 	and.w	r4, r2, #1
 8020114:	469b      	mov	fp, r3
 8020116:	f04f 3cff 	mov.w	ip, #4294967295
 802011a:	9801      	ldr	r0, [sp, #4]
 802011c:	2200      	movs	r2, #0
 802011e:	46e6      	mov	lr, ip
 8020120:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 8020124:	e03f      	b.n	80201a6 <Argus_Dev_Update+0x562>
 8020126:	1c47      	adds	r7, r0, #1
 8020128:	fb07 b707 	mla	r7, r7, r7, fp
 802012c:	42b7      	cmp	r7, r6
 802012e:	da03      	bge.n	8020138 <Argus_Dev_Update+0x4f4>
 8020130:	463e      	mov	r6, r7
 8020132:	46ae      	mov	lr, r5
 8020134:	f04f 0c00 	mov.w	ip, #0
 8020138:	f043 0701 	orr.w	r7, r3, #1
 802013c:	fa21 f707 	lsr.w	r7, r1, r7
 8020140:	07ff      	lsls	r7, r7, #31
 8020142:	d40a      	bmi.n	802015a <Argus_Dev_Update+0x516>
 8020144:	2c00      	cmp	r4, #0
 8020146:	d13a      	bne.n	80201be <Argus_Dev_Update+0x57a>
 8020148:	1e47      	subs	r7, r0, #1
 802014a:	fb07 a707 	mla	r7, r7, r7, sl
 802014e:	42b7      	cmp	r7, r6
 8020150:	da03      	bge.n	802015a <Argus_Dev_Update+0x516>
 8020152:	463e      	mov	r6, r7
 8020154:	46ae      	mov	lr, r5
 8020156:	f04f 0c01 	mov.w	ip, #1
 802015a:	f043 0702 	orr.w	r7, r3, #2
 802015e:	fa21 f707 	lsr.w	r7, r1, r7
 8020162:	07ff      	lsls	r7, r7, #31
 8020164:	d409      	bmi.n	802017a <Argus_Dev_Update+0x536>
 8020166:	b364      	cbz	r4, 80201c2 <Argus_Dev_Update+0x57e>
 8020168:	1c47      	adds	r7, r0, #1
 802016a:	fb07 9707 	mla	r7, r7, r7, r9
 802016e:	42b7      	cmp	r7, r6
 8020170:	da03      	bge.n	802017a <Argus_Dev_Update+0x536>
 8020172:	463e      	mov	r6, r7
 8020174:	46ae      	mov	lr, r5
 8020176:	f04f 0c02 	mov.w	ip, #2
 802017a:	f043 0303 	orr.w	r3, r3, #3
 802017e:	fa21 f303 	lsr.w	r3, r1, r3
 8020182:	07df      	lsls	r7, r3, #31
 8020184:	d409      	bmi.n	802019a <Argus_Dev_Update+0x556>
 8020186:	b9c4      	cbnz	r4, 80201ba <Argus_Dev_Update+0x576>
 8020188:	1e43      	subs	r3, r0, #1
 802018a:	fb03 8303 	mla	r3, r3, r3, r8
 802018e:	42b3      	cmp	r3, r6
 8020190:	da03      	bge.n	802019a <Argus_Dev_Update+0x556>
 8020192:	46ae      	mov	lr, r5
 8020194:	461e      	mov	r6, r3
 8020196:	f04f 0c03 	mov.w	ip, #3
 802019a:	3201      	adds	r2, #1
 802019c:	2a08      	cmp	r2, #8
 802019e:	f100 0002 	add.w	r0, r0, #2
 80201a2:	f43f aedd 	beq.w	801ff60 <Argus_Dev_Update+0x31c>
 80201a6:	0093      	lsls	r3, r2, #2
 80201a8:	fa21 f703 	lsr.w	r7, r1, r3
 80201ac:	07ff      	lsls	r7, r7, #31
 80201ae:	b255      	sxtb	r5, r2
 80201b0:	d4c2      	bmi.n	8020138 <Argus_Dev_Update+0x4f4>
 80201b2:	2c00      	cmp	r4, #0
 80201b4:	d1b7      	bne.n	8020126 <Argus_Dev_Update+0x4e2>
 80201b6:	4607      	mov	r7, r0
 80201b8:	e7b6      	b.n	8020128 <Argus_Dev_Update+0x4e4>
 80201ba:	4603      	mov	r3, r0
 80201bc:	e7e5      	b.n	802018a <Argus_Dev_Update+0x546>
 80201be:	4607      	mov	r7, r0
 80201c0:	e7c3      	b.n	802014a <Argus_Dev_Update+0x506>
 80201c2:	4607      	mov	r7, r0
 80201c4:	e7d1      	b.n	802016a <Argus_Dev_Update+0x526>
 80201c6:	f1be 0f03 	cmp.w	lr, #3
 80201ca:	f63f af41 	bhi.w	8020050 <Argus_Dev_Update+0x40c>
 80201ce:	4614      	mov	r4, r2
 80201d0:	e65f      	b.n	801fe92 <Argus_Dev_Update+0x24e>
 80201d2:	2300      	movs	r3, #0
 80201d4:	e595      	b.n	801fd02 <Argus_Dev_Update+0xbe>
 80201d6:	4651      	mov	r1, sl
 80201d8:	e750      	b.n	802007c <Argus_Dev_Update+0x438>
 80201da:	f04f 31ff 	mov.w	r1, #4294967295
 80201de:	e6e0      	b.n	801ffa2 <Argus_Dev_Update+0x35e>

080201e0 <Argus_Dev_UpdateLaserTemperatureCompensation>:
 80201e0:	b530      	push	{r4, r5, lr}
 80201e2:	f8d0 411c 	ldr.w	r4, [r0, #284]	@ 0x11c
 80201e6:	f8b4 c067 	ldrh.w	ip, [r4, #103]	@ 0x67
 80201ea:	f894 e068 	ldrb.w	lr, [r4, #104]	@ 0x68
 80201ee:	fa9c fc9c 	rev16.w	ip, ip
 80201f2:	f41c 6ff8 	tst.w	ip, #1984	@ 0x7c0
 80201f6:	f3cc 1384 	ubfx	r3, ip, #6, #5
 80201fa:	d028      	beq.n	802024e <Argus_Dev_UpdateLaserTemperatureCompensation+0x6e>
 80201fc:	fb01 f503 	mul.w	r5, r1, r3
 8020200:	f3c5 33c0 	ubfx	r3, r5, #15, #1
 8020204:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 8020208:	2b01      	cmp	r3, #1
 802020a:	f8b0 c051 	ldrh.w	ip, [r0, #81]	@ 0x51
 802020e:	bf38      	it	cc
 8020210:	2301      	movcc	r3, #1
 8020212:	2b1f      	cmp	r3, #31
 8020214:	fa9c fc9c 	rev16.w	ip, ip
 8020218:	f3cc 1c84 	ubfx	ip, ip, #6, #5
 802021c:	bf28      	it	cs
 802021e:	231f      	movcs	r3, #31
 8020220:	4563      	cmp	r3, ip
 8020222:	d014      	beq.n	802024e <Argus_Dev_UpdateLaserTemperatureCompensation+0x6e>
 8020224:	f890 5052 	ldrb.w	r5, [r0, #82]	@ 0x52
 8020228:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 802022c:	ea45 1583 	orr.w	r5, r5, r3, lsl #6
 8020230:	f880 5052 	strb.w	r5, [r0, #82]	@ 0x52
 8020234:	f890 5051 	ldrb.w	r5, [r0, #81]	@ 0x51
 8020238:	f3c3 0397 	ubfx	r3, r3, #2, #24
 802023c:	f025 0507 	bic.w	r5, r5, #7
 8020240:	432b      	orrs	r3, r5
 8020242:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
 8020246:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8020248:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802024c:	6783      	str	r3, [r0, #120]	@ 0x78
 802024e:	f894 3069 	ldrb.w	r3, [r4, #105]	@ 0x69
 8020252:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 8020256:	f413 7ff8 	tst.w	r3, #496	@ 0x1f0
 802025a:	f3c3 1404 	ubfx	r4, r3, #4, #5
 802025e:	d027      	beq.n	80202b0 <Argus_Dev_UpdateLaserTemperatureCompensation+0xd0>
 8020260:	fb01 f404 	mul.w	r4, r1, r4
 8020264:	f3c4 31c0 	ubfx	r1, r4, #15, #1
 8020268:	eb01 4114 	add.w	r1, r1, r4, lsr #16
 802026c:	2901      	cmp	r1, #1
 802026e:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
 8020272:	bf38      	it	cc
 8020274:	2101      	movcc	r1, #1
 8020276:	291f      	cmp	r1, #31
 8020278:	ba5b      	rev16	r3, r3
 802027a:	bf28      	it	cs
 802027c:	211f      	movcs	r1, #31
 802027e:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8020282:	4299      	cmp	r1, r3
 8020284:	d014      	beq.n	80202b0 <Argus_Dev_UpdateLaserTemperatureCompensation+0xd0>
 8020286:	f890 4053 	ldrb.w	r4, [r0, #83]	@ 0x53
 802028a:	f890 3052 	ldrb.w	r3, [r0, #82]	@ 0x52
 802028e:	f004 040f 	and.w	r4, r4, #15
 8020292:	ea44 1401 	orr.w	r4, r4, r1, lsl #4
 8020296:	f880 4053 	strb.w	r4, [r0, #83]	@ 0x53
 802029a:	6f84      	ldr	r4, [r0, #120]	@ 0x78
 802029c:	f023 0301 	bic.w	r3, r3, #1
 80202a0:	f3c1 1117 	ubfx	r1, r1, #4, #24
 80202a4:	4319      	orrs	r1, r3
 80202a6:	f044 0440 	orr.w	r4, r4, #64	@ 0x40
 80202aa:	f880 1052 	strb.w	r1, [r0, #82]	@ 0x52
 80202ae:	6784      	str	r4, [r0, #120]	@ 0x78
 80202b0:	0852      	lsrs	r2, r2, #1
 80202b2:	2a01      	cmp	r2, #1
 80202b4:	bf38      	it	cc
 80202b6:	2201      	movcc	r2, #1
 80202b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80202bc:	429a      	cmp	r2, r3
 80202be:	bf28      	it	cs
 80202c0:	461a      	movcs	r2, r3
 80202c2:	f8a0 2184 	strh.w	r2, [r0, #388]	@ 0x184
 80202c6:	bd30      	pop	{r4, r5, pc}

080202c8 <Argus_Dev_GetPixelCount>:
 80202c8:	f890 208c 	ldrb.w	r2, [r0, #140]	@ 0x8c
 80202cc:	f890 c08b 	ldrb.w	ip, [r0, #139]	@ 0x8b
 80202d0:	f8b0 308f 	ldrh.w	r3, [r0, #143]	@ 0x8f
 80202d4:	f890 108d 	ldrb.w	r1, [r0, #141]	@ 0x8d
 80202d8:	0210      	lsls	r0, r2, #8
 80202da:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80202de:	ba5b      	rev16	r3, r3
 80202e0:	4308      	orrs	r0, r1
 80202e2:	b29b      	uxth	r3, r3
 80202e4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80202e8:	085a      	lsrs	r2, r3, #1
 80202ea:	f002 3255 	and.w	r2, r2, #1431655765	@ 0x55555555
 80202ee:	1a9b      	subs	r3, r3, r2
 80202f0:	089a      	lsrs	r2, r3, #2
 80202f2:	f002 3233 	and.w	r2, r2, #858993459	@ 0x33333333
 80202f6:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 80202fa:	4413      	add	r3, r2
 80202fc:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 8020300:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8020304:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 8020308:	eb03 4303 	add.w	r3, r3, r3, lsl #16
 802030c:	f3c0 4000 	ubfx	r0, r0, #16, #1
 8020310:	eb00 6013 	add.w	r0, r0, r3, lsr #24
 8020314:	4770      	bx	lr
 8020316:	bf00      	nop

08020318 <Argus_Dev_GetFrameConfig>:
 8020318:	f890 3072 	ldrb.w	r3, [r0, #114]	@ 0x72
 802031c:	f890 c071 	ldrb.w	ip, [r0, #113]	@ 0x71
 8020320:	f8b0 2075 	ldrh.w	r2, [r0, #117]	@ 0x75
 8020324:	b570      	push	{r4, r5, r6, lr}
 8020326:	021b      	lsls	r3, r3, #8
 8020328:	f890 4073 	ldrb.w	r4, [r0, #115]	@ 0x73
 802032c:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8020330:	ba52      	rev16	r2, r2
 8020332:	4323      	orrs	r3, r4
 8020334:	b292      	uxth	r2, r2
 8020336:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 802033a:	f8d0 41c4 	ldr.w	r4, [r0, #452]	@ 0x1c4
 802033e:	604a      	str	r2, [r1, #4]
 8020340:	f890 206e 	ldrb.w	r2, [r0, #110]	@ 0x6e
 8020344:	f890 c06d 	ldrb.w	ip, [r0, #109]	@ 0x6d
 8020348:	0212      	lsls	r2, r2, #8
 802034a:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 802034e:	f890 c06f 	ldrb.w	ip, [r0, #111]	@ 0x6f
 8020352:	0c1b      	lsrs	r3, r3, #16
 8020354:	ea42 020c 	orr.w	r2, r2, ip
 8020358:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 802035c:	608b      	str	r3, [r1, #8]
 802035e:	f8b0 306a 	ldrh.w	r3, [r0, #106]	@ 0x6a
 8020362:	ba5b      	rev16	r3, r3
 8020364:	f3c3 1349 	ubfx	r3, r3, #5, #10
 8020368:	3301      	adds	r3, #1
 802036a:	824b      	strh	r3, [r1, #18]
 802036c:	f994 4000 	ldrsb.w	r4, [r4]
 8020370:	2c00      	cmp	r4, #0
 8020372:	d05b      	beq.n	802042c <Argus_Dev_GetFrameConfig+0x114>
 8020374:	f8b0 3168 	ldrh.w	r3, [r0, #360]	@ 0x168
 8020378:	b29b      	uxth	r3, r3
 802037a:	820b      	strh	r3, [r1, #16]
 802037c:	f890 304e 	ldrb.w	r3, [r0, #78]	@ 0x4e
 8020380:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020384:	75cb      	strb	r3, [r1, #23]
 8020386:	f8d0 211c 	ldr.w	r2, [r0, #284]	@ 0x11c
 802038a:	f892 308e 	ldrb.w	r3, [r2, #142]	@ 0x8e
 802038e:	2b02      	cmp	r3, #2
 8020390:	f000 8093 	beq.w	80204ba <Argus_Dev_GetFrameConfig+0x1a2>
 8020394:	2b03      	cmp	r3, #3
 8020396:	d071      	beq.n	802047c <Argus_Dev_GetFrameConfig+0x164>
 8020398:	2b01      	cmp	r3, #1
 802039a:	d05a      	beq.n	8020452 <Argus_Dev_GetFrameConfig+0x13a>
 802039c:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 80203a0:	079e      	lsls	r6, r3, #30
 80203a2:	d53d      	bpl.n	8020420 <Argus_Dev_GetFrameConfig+0x108>
 80203a4:	f892 c0a8 	ldrb.w	ip, [r2, #168]	@ 0xa8
 80203a8:	075d      	lsls	r5, r3, #29
 80203aa:	bf4b      	itete	mi
 80203ac:	eb02 024c 	addmi.w	r2, r2, ip, lsl #1
 80203b0:	f10c 0c57 	addpl.w	ip, ip, #87	@ 0x57
 80203b4:	f8b2 c0b2 	ldrhmi.w	ip, [r2, #178]	@ 0xb2
 80203b8:	f832 c01c 	ldrhpl.w	ip, [r2, ip, lsl #1]
 80203bc:	f8b0 2063 	ldrh.w	r2, [r0, #99]	@ 0x63
 80203c0:	ba52      	rev16	r2, r2
 80203c2:	f3c2 124a 	ubfx	r2, r2, #5, #11
 80203c6:	eba2 020c 	sub.w	r2, r2, ip
 80203ca:	f890 c064 	ldrb.w	ip, [r0, #100]	@ 0x64
 80203ce:	760a      	strb	r2, [r1, #24]
 80203d0:	f00c 0203 	and.w	r2, ip, #3
 80203d4:	764a      	strb	r2, [r1, #25]
 80203d6:	60cb      	str	r3, [r1, #12]
 80203d8:	b1ec      	cbz	r4, 8020416 <Argus_Dev_GetFrameConfig+0xfe>
 80203da:	f890 216f 	ldrb.w	r2, [r0, #367]	@ 0x16f
 80203de:	07d4      	lsls	r4, r2, #31
 80203e0:	f890 216f 	ldrb.w	r2, [r0, #367]	@ 0x16f
 80203e4:	f890 416d 	ldrb.w	r4, [r0, #365]	@ 0x16d
 80203e8:	bf4c      	ite	mi
 80203ea:	f443 3380 	orrmi.w	r3, r3, #65536	@ 0x10000
 80203ee:	f423 3380 	bicpl.w	r3, r3, #65536	@ 0x10000
 80203f2:	0792      	lsls	r2, r2, #30
 80203f4:	f890 216c 	ldrb.w	r2, [r0, #364]	@ 0x16c
 80203f8:	bf4c      	ite	mi
 80203fa:	f443 3300 	orrmi.w	r3, r3, #131072	@ 0x20000
 80203fe:	f423 3300 	bicpl.w	r3, r3, #131072	@ 0x20000
 8020402:	03a4      	lsls	r4, r4, #14
 8020404:	b2a4      	uxth	r4, r4
 8020406:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 802040a:	0352      	lsls	r2, r2, #13
 802040c:	4323      	orrs	r3, r4
 802040e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8020412:	4313      	orrs	r3, r2
 8020414:	60cb      	str	r3, [r1, #12]
 8020416:	f890 3088 	ldrb.w	r3, [r0, #136]	@ 0x88
 802041a:	2bab      	cmp	r3, #171	@ 0xab
 802041c:	d00d      	beq.n	802043a <Argus_Dev_GetFrameConfig+0x122>
 802041e:	bd70      	pop	{r4, r5, r6, pc}
 8020420:	f8b2 2079 	ldrh.w	r2, [r2, #121]	@ 0x79
 8020424:	ba52      	rev16	r2, r2
 8020426:	f3c2 1c4a 	ubfx	ip, r2, #5, #11
 802042a:	e7c7      	b.n	80203bc <Argus_Dev_GetFrameConfig+0xa4>
 802042c:	f8b0 3049 	ldrh.w	r3, [r0, #73]	@ 0x49
 8020430:	ba5b      	rev16	r3, r3
 8020432:	b29b      	uxth	r3, r3
 8020434:	019b      	lsls	r3, r3, #6
 8020436:	b29b      	uxth	r3, r3
 8020438:	e79f      	b.n	802037a <Argus_Dev_GetFrameConfig+0x62>
 802043a:	f890 308a 	ldrb.w	r3, [r0, #138]	@ 0x8a
 802043e:	f890 4089 	ldrb.w	r4, [r0, #137]	@ 0x89
 8020442:	f890 208b 	ldrb.w	r2, [r0, #139]	@ 0x8b
 8020446:	021b      	lsls	r3, r3, #8
 8020448:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 802044c:	4313      	orrs	r3, r2
 802044e:	600b      	str	r3, [r1, #0]
 8020450:	bd70      	pop	{r4, r5, r6, pc}
 8020452:	f890 6051 	ldrb.w	r6, [r0, #81]	@ 0x51
 8020456:	4b23      	ldr	r3, [pc, #140]	@ (80204e4 <Argus_Dev_GetFrameConfig+0x1cc>)
 8020458:	ea4f 0cd6 	mov.w	ip, r6, lsr #3
 802045c:	fb03 fc0c 	mul.w	ip, r3, ip
 8020460:	f3cc 25c0 	ubfx	r5, ip, #11, #1
 8020464:	eb05 3c1c 	add.w	ip, r5, ip, lsr #12
 8020468:	f8a1 c014 	strh.w	ip, [r1, #20]
 802046c:	f890 3052 	ldrb.w	r3, [r0, #82]	@ 0x52
 8020470:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8020474:	f3c3 1384 	ubfx	r3, r3, #6, #5
 8020478:	758b      	strb	r3, [r1, #22]
 802047a:	e78f      	b.n	802039c <Argus_Dev_GetFrameConfig+0x84>
 802047c:	f8b0 3051 	ldrh.w	r3, [r0, #81]	@ 0x51
 8020480:	f890 6052 	ldrb.w	r6, [r0, #82]	@ 0x52
 8020484:	f890 5051 	ldrb.w	r5, [r0, #81]	@ 0x51
 8020488:	ba5b      	rev16	r3, r3
 802048a:	f3c3 1e84 	ubfx	lr, r3, #6, #5
 802048e:	f3c6 0c44 	ubfx	ip, r6, #1, #5
 8020492:	4b14      	ldr	r3, [pc, #80]	@ (80204e4 <Argus_Dev_GetFrameConfig+0x1cc>)
 8020494:	eb0c 0cd5 	add.w	ip, ip, r5, lsr #3
 8020498:	fb03 fc0c 	mul.w	ip, r3, ip
 802049c:	f3cc 25c0 	ubfx	r5, ip, #11, #1
 80204a0:	eb05 3c1c 	add.w	ip, r5, ip, lsr #12
 80204a4:	f8a1 c014 	strh.w	ip, [r1, #20]
 80204a8:	f890 3053 	ldrb.w	r3, [r0, #83]	@ 0x53
 80204ac:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 80204b0:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80204b4:	4473      	add	r3, lr
 80204b6:	758b      	strb	r3, [r1, #22]
 80204b8:	e770      	b.n	802039c <Argus_Dev_GetFrameConfig+0x84>
 80204ba:	f890 6052 	ldrb.w	r6, [r0, #82]	@ 0x52
 80204be:	4b09      	ldr	r3, [pc, #36]	@ (80204e4 <Argus_Dev_GetFrameConfig+0x1cc>)
 80204c0:	f3c6 0c44 	ubfx	ip, r6, #1, #5
 80204c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80204c8:	f3cc 25c0 	ubfx	r5, ip, #11, #1
 80204cc:	eb05 3c1c 	add.w	ip, r5, ip, lsr #12
 80204d0:	f8a1 c014 	strh.w	ip, [r1, #20]
 80204d4:	f890 3053 	ldrb.w	r3, [r0, #83]	@ 0x53
 80204d8:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 80204dc:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80204e0:	758b      	strb	r3, [r1, #22]
 80204e2:	e75b      	b.n	802039c <Argus_Dev_GetFrameConfig+0x84>
 80204e4:	0001c28f 	.word	0x0001c28f

080204e8 <Argus_Dev_GetModule>:
 80204e8:	7a80      	ldrb	r0, [r0, #10]
 80204ea:	4770      	bx	lr

080204ec <Argus_Dev_GetChipID>:
 80204ec:	6840      	ldr	r0, [r0, #4]
 80204ee:	4770      	bx	lr

080204f0 <Argus_Dev_GetChipVersion>:
 80204f0:	7a00      	ldrb	r0, [r0, #8]
 80204f2:	4770      	bx	lr

080204f4 <Argus_Dev_GetLaserType>:
 80204f4:	7a40      	ldrb	r0, [r0, #9]
 80204f6:	4770      	bx	lr

080204f8 <Argus_Dev_Apply>:
 80204f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80204fc:	4604      	mov	r4, r0
 80204fe:	f8d0 011c 	ldr.w	r0, [r0, #284]	@ 0x11c
 8020502:	e9c4 2341 	strd	r2, r3, [r4, #260]	@ 0x104
 8020506:	7f43      	ldrb	r3, [r0, #29]
 8020508:	b1a3      	cbz	r3, 8020534 <Argus_Dev_Apply+0x3c>
 802050a:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 802050e:	f003 0201 	and.w	r2, r3, #1
 8020512:	4291      	cmp	r1, r2
 8020514:	d025      	beq.n	8020562 <Argus_Dev_Apply+0x6a>
 8020516:	f890 206e 	ldrb.w	r2, [r0, #110]	@ 0x6e
 802051a:	b9d9      	cbnz	r1, 8020554 <Argus_Dev_Apply+0x5c>
 802051c:	f884 2058 	strb.w	r2, [r4, #88]	@ 0x58
 8020520:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8020524:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8020526:	f023 0302 	bic.w	r3, r3, #2
 802052a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 802052e:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 8020532:	67a2      	str	r2, [r4, #120]	@ 0x78
 8020534:	f504 70b4 	add.w	r0, r4, #360	@ 0x168
 8020538:	f104 010c 	add.w	r1, r4, #12
 802053c:	f7fb ff70 	bl	801c420 <Argus_Dca_Apply>
 8020540:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8020542:	b9a8      	cbnz	r0, 8020570 <Argus_Dev_Apply+0x78>
 8020544:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 8020548:	b1d3      	cbz	r3, 8020580 <Argus_Dev_Apply+0x88>
 802054a:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 802054e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020552:	4718      	bx	r3
 8020554:	f062 0277 	orn	r2, r2, #119	@ 0x77
 8020558:	f884 2058 	strb.w	r2, [r4, #88]	@ 0x58
 802055c:	f043 0301 	orr.w	r3, r3, #1
 8020560:	e7e0      	b.n	8020524 <Argus_Dev_Apply+0x2c>
 8020562:	079d      	lsls	r5, r3, #30
 8020564:	d5e6      	bpl.n	8020534 <Argus_Dev_Apply+0x3c>
 8020566:	f890 206e 	ldrb.w	r2, [r0, #110]	@ 0x6e
 802056a:	2900      	cmp	r1, #0
 802056c:	d0d6      	beq.n	802051c <Argus_Dev_Apply+0x24>
 802056e:	e7f1      	b.n	8020554 <Argus_Dev_Apply+0x5c>
 8020570:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8020572:	01da      	lsls	r2, r3, #7
 8020574:	d407      	bmi.n	8020586 <Argus_Dev_Apply+0x8e>
 8020576:	4620      	mov	r0, r4
 8020578:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802057c:	f7fe b8ae 	b.w	801e6dc <DisableClock.constprop.0>
 8020580:	4618      	mov	r0, r3
 8020582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020586:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8020588:	f8d4 511c 	ldr.w	r5, [r4, #284]	@ 0x11c
 802058c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8020590:	67a3      	str	r3, [r4, #120]	@ 0x78
 8020592:	f895 30a8 	ldrb.w	r3, [r5, #168]	@ 0xa8
 8020596:	2b00      	cmp	r3, #0
 8020598:	d060      	beq.n	802065c <Argus_Dev_Apply+0x164>
 802059a:	f8d4 7100 	ldr.w	r7, [r4, #256]	@ 0x100
 802059e:	686e      	ldr	r6, [r5, #4]
 80205a0:	f103 3eff 	add.w	lr, r3, #4294967295
 80205a4:	332d      	adds	r3, #45	@ 0x2d
 80205a6:	f047 0202 	orr.w	r2, r7, #2
 80205aa:	2e00      	cmp	r6, #0
 80205ac:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
 80205b0:	4631      	mov	r1, r6
 80205b2:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80205b6:	d059      	beq.n	802066c <Argus_Dev_Apply+0x174>
 80205b8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80205bc:	4690      	mov	r8, r2
 80205be:	db5d      	blt.n	802067c <Argus_Dev_Apply+0x184>
 80205c0:	42b2      	cmp	r2, r6
 80205c2:	f240 8091 	bls.w	80206e8 <Argus_Dev_Apply+0x1f0>
 80205c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80205ca:	4608      	mov	r0, r1
 80205cc:	0049      	lsls	r1, r1, #1
 80205ce:	428a      	cmp	r2, r1
 80205d0:	469c      	mov	ip, r3
 80205d2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80205d6:	d8f8      	bhi.n	80205ca <Argus_Dev_Apply+0xd2>
 80205d8:	2b00      	cmp	r3, #0
 80205da:	d16f      	bne.n	80206bc <Argus_Dev_Apply+0x1c4>
 80205dc:	ea92 0f06 	teq	r2, r6
 80205e0:	bf54      	ite	pl
 80205e2:	f06f 4100 	mvnpl.w	r1, #2147483648	@ 0x80000000
 80205e6:	f04f 4100 	movmi.w	r1, #2147483648	@ 0x80000000
 80205ea:	f8d4 01d4 	ldr.w	r0, [r4, #468]	@ 0x1d4
 80205ee:	67e1      	str	r1, [r4, #124]	@ 0x7c
 80205f0:	077b      	lsls	r3, r7, #29
 80205f2:	bf4c      	ite	mi
 80205f4:	eb05 054e 	addmi.w	r5, r5, lr, lsl #1
 80205f8:	f10e 0e58 	addpl.w	lr, lr, #88	@ 0x58
 80205fc:	f9b0 6028 	ldrsh.w	r6, [r0, #40]	@ 0x28
 8020600:	bf4c      	ite	mi
 8020602:	f8b5 50b4 	ldrhmi.w	r5, [r5, #180]	@ 0xb4
 8020606:	f835 501e 	ldrhpl.w	r5, [r5, lr, lsl #1]
 802060a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 802060e:	429e      	cmp	r6, r3
 8020610:	d02f      	beq.n	8020672 <Argus_Dev_Apply+0x17a>
 8020612:	f002 fcf3 	bl	8022ffc <Argus_Cal_GetCalibrationPtr>
 8020616:	7e02      	ldrb	r2, [r0, #24]
 8020618:	fb12 f206 	smulbb	r2, r2, r6
 802061c:	10d2      	asrs	r2, r2, #3
 802061e:	fb05 f102 	mul.w	r1, r5, r2
 8020622:	2900      	cmp	r1, #0
 8020624:	da58      	bge.n	80206d8 <Argus_Dev_Apply+0x1e0>
 8020626:	4249      	negs	r1, r1
 8020628:	f3c1 5280 	ubfx	r2, r1, #22, #1
 802062c:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 8020630:	4252      	negs	r2, r2
 8020632:	b251      	sxtb	r1, r2
 8020634:	1a69      	subs	r1, r5, r1
 8020636:	b2d3      	uxtb	r3, r2
 8020638:	f894 2064 	ldrb.w	r2, [r4, #100]	@ 0x64
 802063c:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 802063e:	1aeb      	subs	r3, r5, r3
 8020640:	f002 021f 	and.w	r2, r2, #31
 8020644:	f3c1 01d7 	ubfx	r1, r1, #3, #24
 8020648:	ea42 1343 	orr.w	r3, r2, r3, lsl #5
 802064c:	f440 6000 	orr.w	r0, r0, #2048	@ 0x800
 8020650:	f884 1063 	strb.w	r1, [r4, #99]	@ 0x63
 8020654:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 8020658:	67a0      	str	r0, [r4, #120]	@ 0x78
 802065a:	e78c      	b.n	8020576 <Argus_Dev_Apply+0x7e>
 802065c:	f8d4 2100 	ldr.w	r2, [r4, #256]	@ 0x100
 8020660:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8020662:	f022 0206 	bic.w	r2, r2, #6
 8020666:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
 802066a:	e784      	b.n	8020576 <Argus_Dev_Apply+0x7e>
 802066c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8020670:	e7bb      	b.n	80205ea <Argus_Dev_Apply+0xf2>
 8020672:	f002 fcc3 	bl	8022ffc <Argus_Cal_GetCalibrationPtr>
 8020676:	4629      	mov	r1, r5
 8020678:	2300      	movs	r3, #0
 802067a:	e7dd      	b.n	8020638 <Argus_Dev_Apply+0x140>
 802067c:	4271      	negs	r1, r6
 802067e:	428a      	cmp	r2, r1
 8020680:	d8a1      	bhi.n	80205c6 <Argus_Dev_Apply+0xce>
 8020682:	2900      	cmp	r1, #0
 8020684:	db34      	blt.n	80206f0 <Argus_Dev_Apply+0x1f8>
 8020686:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 802068a:	4608      	mov	r0, r1
 802068c:	4611      	mov	r1, r2
 802068e:	b152      	cbz	r2, 80206a6 <Argus_Dev_Apply+0x1ae>
 8020690:	2100      	movs	r1, #0
 8020692:	e000      	b.n	8020696 <Argus_Dev_Apply+0x19e>
 8020694:	b13a      	cbz	r2, 80206a6 <Argus_Dev_Apply+0x1ae>
 8020696:	4282      	cmp	r2, r0
 8020698:	bf24      	itt	cs
 802069a:	1a12      	subcs	r2, r2, r0
 802069c:	4319      	orrcs	r1, r3
 802069e:	085b      	lsrs	r3, r3, #1
 80206a0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80206a4:	d1f6      	bne.n	8020694 <Argus_Dev_Apply+0x19c>
 80206a6:	4282      	cmp	r2, r0
 80206a8:	bf28      	it	cs
 80206aa:	3101      	addcs	r1, #1
 80206ac:	ea98 0f06 	teq	r8, r6
 80206b0:	d40e      	bmi.n	80206d0 <Argus_Dev_Apply+0x1d8>
 80206b2:	2900      	cmp	r1, #0
 80206b4:	bfb8      	it	lt
 80206b6:	f06f 4100 	mvnlt.w	r1, #2147483648	@ 0x80000000
 80206ba:	e796      	b.n	80205ea <Argus_Dev_Apply+0xf2>
 80206bc:	2900      	cmp	r1, #0
 80206be:	dae4      	bge.n	802068a <Argus_Dev_Apply+0x192>
 80206c0:	f03c 4300 	bics.w	r3, ip, #2147483648	@ 0x80000000
 80206c4:	d006      	beq.n	80206d4 <Argus_Dev_Apply+0x1dc>
 80206c6:	2a00      	cmp	r2, #0
 80206c8:	d1e2      	bne.n	8020690 <Argus_Dev_Apply+0x198>
 80206ca:	2e00      	cmp	r6, #0
 80206cc:	4611      	mov	r1, r2
 80206ce:	da8c      	bge.n	80205ea <Argus_Dev_Apply+0xf2>
 80206d0:	4249      	negs	r1, r1
 80206d2:	e78a      	b.n	80205ea <Argus_Dev_Apply+0xf2>
 80206d4:	4619      	mov	r1, r3
 80206d6:	e7e6      	b.n	80206a6 <Argus_Dev_Apply+0x1ae>
 80206d8:	f3c1 5280 	ubfx	r2, r1, #22, #1
 80206dc:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 80206e0:	b251      	sxtb	r1, r2
 80206e2:	1a69      	subs	r1, r5, r1
 80206e4:	b2d3      	uxtb	r3, r2
 80206e6:	e7a7      	b.n	8020638 <Argus_Dev_Apply+0x140>
 80206e8:	4630      	mov	r0, r6
 80206ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80206ee:	e7cd      	b.n	802068c <Argus_Dev_Apply+0x194>
 80206f0:	0848      	lsrs	r0, r1, #1
 80206f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80206f6:	e7e6      	b.n	80206c6 <Argus_Dev_Apply+0x1ce>

080206f8 <Argus_Dev_ApplySync>:
 80206f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80206fa:	b087      	sub	sp, #28
 80206fc:	2302      	movs	r3, #2
 80206fe:	4604      	mov	r4, r0
 8020700:	460d      	mov	r5, r1
 8020702:	a802      	add	r0, sp, #8
 8020704:	a903      	add	r1, sp, #12
 8020706:	9301      	str	r3, [sp, #4]
 8020708:	f7e6 fad2 	bl	8006cb0 <Timer_GetCounterValue>
 802070c:	4a2d      	ldr	r2, [pc, #180]	@ (80207c4 <Argus_Dev_ApplySync+0xcc>)
 802070e:	ab01      	add	r3, sp, #4
 8020710:	4629      	mov	r1, r5
 8020712:	4620      	mov	r0, r4
 8020714:	f7ff fef0 	bl	80204f8 <Argus_Dev_Apply>
 8020718:	2800      	cmp	r0, #0
 802071a:	db1f      	blt.n	802075c <Argus_Dev_ApplySync+0x64>
 802071c:	4d2a      	ldr	r5, [pc, #168]	@ (80207c8 <Argus_Dev_ApplySync+0xd0>)
 802071e:	a905      	add	r1, sp, #20
 8020720:	a804      	add	r0, sp, #16
 8020722:	f7e6 fac5 	bl	8006cb0 <Timer_GetCounterValue>
 8020726:	e9dd 3403 	ldrd	r3, r4, [sp, #12]
 802072a:	42ab      	cmp	r3, r5
 802072c:	9e05      	ldr	r6, [sp, #20]
 802072e:	9a02      	ldr	r2, [sp, #8]
 8020730:	d820      	bhi.n	8020774 <Argus_Dev_ApplySync+0x7c>
 8020732:	1c50      	adds	r0, r2, #1
 8020734:	4282      	cmp	r2, r0
 8020736:	4619      	mov	r1, r3
 8020738:	d023      	beq.n	8020782 <Argus_Dev_ApplySync+0x8a>
 802073a:	bf34      	ite	cc
 802073c:	2701      	movcc	r7, #1
 802073e:	2700      	movcs	r7, #0
 8020740:	b177      	cbz	r7, 8020760 <Argus_Dev_ApplySync+0x68>
 8020742:	42a2      	cmp	r2, r4
 8020744:	d02a      	beq.n	802079c <Argus_Dev_ApplySync+0xa4>
 8020746:	bf34      	ite	cc
 8020748:	2301      	movcc	r3, #1
 802074a:	2300      	movcs	r3, #0
 802074c:	b9f3      	cbnz	r3, 802078c <Argus_Dev_ApplySync+0x94>
 802074e:	481f      	ldr	r0, [pc, #124]	@ (80207cc <Argus_Dev_ApplySync+0xd4>)
 8020750:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8020754:	f7f2 fc1e 	bl	8012f94 <print>
 8020758:	f06f 0005 	mvn.w	r0, #5
 802075c:	b007      	add	sp, #28
 802075e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020760:	42a2      	cmp	r2, r4
 8020762:	d020      	beq.n	80207a6 <Argus_Dev_ApplySync+0xae>
 8020764:	d302      	bcc.n	802076c <Argus_Dev_ApplySync+0x74>
 8020766:	42a0      	cmp	r0, r4
 8020768:	d021      	beq.n	80207ae <Argus_Dev_ApplySync+0xb6>
 802076a:	d3f0      	bcc.n	802074e <Argus_Dev_ApplySync+0x56>
 802076c:	9801      	ldr	r0, [sp, #4]
 802076e:	2802      	cmp	r0, #2
 8020770:	d0d5      	beq.n	802071e <Argus_Dev_ApplySync+0x26>
 8020772:	e7f3      	b.n	802075c <Argus_Dev_ApplySync+0x64>
 8020774:	1c90      	adds	r0, r2, #2
 8020776:	f5a3 2174 	sub.w	r1, r3, #999424	@ 0xf4000
 802077a:	4282      	cmp	r2, r0
 802077c:	f5a1 7110 	sub.w	r1, r1, #576	@ 0x240
 8020780:	d1db      	bne.n	802073a <Argus_Dev_ApplySync+0x42>
 8020782:	428b      	cmp	r3, r1
 8020784:	bf8c      	ite	hi
 8020786:	2700      	movhi	r7, #0
 8020788:	2701      	movls	r7, #1
 802078a:	e7d9      	b.n	8020740 <Argus_Dev_ApplySync+0x48>
 802078c:	42a0      	cmp	r0, r4
 802078e:	d011      	beq.n	80207b4 <Argus_Dev_ApplySync+0xbc>
 8020790:	bf34      	ite	cc
 8020792:	2101      	movcc	r1, #1
 8020794:	2100      	movcs	r1, #0
 8020796:	2900      	cmp	r1, #0
 8020798:	d0e8      	beq.n	802076c <Argus_Dev_ApplySync+0x74>
 802079a:	e7d8      	b.n	802074e <Argus_Dev_ApplySync+0x56>
 802079c:	42b3      	cmp	r3, r6
 802079e:	bf8c      	ite	hi
 80207a0:	2300      	movhi	r3, #0
 80207a2:	2301      	movls	r3, #1
 80207a4:	e7d2      	b.n	802074c <Argus_Dev_ApplySync+0x54>
 80207a6:	42b3      	cmp	r3, r6
 80207a8:	d9e0      	bls.n	802076c <Argus_Dev_ApplySync+0x74>
 80207aa:	42a0      	cmp	r0, r4
 80207ac:	d1dd      	bne.n	802076a <Argus_Dev_ApplySync+0x72>
 80207ae:	428e      	cmp	r6, r1
 80207b0:	d2cd      	bcs.n	802074e <Argus_Dev_ApplySync+0x56>
 80207b2:	e7db      	b.n	802076c <Argus_Dev_ApplySync+0x74>
 80207b4:	428e      	cmp	r6, r1
 80207b6:	bf34      	ite	cc
 80207b8:	2100      	movcc	r1, #0
 80207ba:	2101      	movcs	r1, #1
 80207bc:	2900      	cmp	r1, #0
 80207be:	d0d5      	beq.n	802076c <Argus_Dev_ApplySync+0x74>
 80207c0:	e7c5      	b.n	802074e <Argus_Dev_ApplySync+0x56>
 80207c2:	bf00      	nop
 80207c4:	0801d79d 	.word	0x0801d79d
 80207c8:	000f423f 	.word	0x000f423f
 80207cc:	0802ec34 	.word	0x0802ec34

080207d0 <Argus_Dev_RecoverFromError>:
 80207d0:	b570      	push	{r4, r5, r6, lr}
 80207d2:	f500 7690 	add.w	r6, r0, #288	@ 0x120
 80207d6:	4604      	mov	r4, r0
 80207d8:	f7e5 fe86 	bl	80064e8 <IRQ_LOCK>
 80207dc:	4630      	mov	r0, r6
 80207de:	f007 fbbf 	bl	8027f60 <ADS_CheckTimeout>
 80207e2:	1e05      	subs	r5, r0, #0
 80207e4:	db08      	blt.n	80207f8 <Argus_Dev_RecoverFromError+0x28>
 80207e6:	6823      	ldr	r3, [r4, #0]
 80207e8:	2b64      	cmp	r3, #100	@ 0x64
 80207ea:	d042      	beq.n	8020872 <Argus_Dev_RecoverFromError+0xa2>
 80207ec:	dc31      	bgt.n	8020852 <Argus_Dev_RecoverFromError+0x82>
 80207ee:	bbb3      	cbnz	r3, 802085e <Argus_Dev_RecoverFromError+0x8e>
 80207f0:	4630      	mov	r0, r6
 80207f2:	f007 fba5 	bl	8027f40 <ADS_GetStatus>
 80207f6:	4605      	mov	r5, r0
 80207f8:	1deb      	adds	r3, r5, #7
 80207fa:	d033      	beq.n	8020864 <Argus_Dev_RecoverFromError+0x94>
 80207fc:	f115 0f65 	cmn.w	r5, #101	@ 0x65
 8020800:	d030      	beq.n	8020864 <Argus_Dev_RecoverFromError+0x94>
 8020802:	2d00      	cmp	r5, #0
 8020804:	da35      	bge.n	8020872 <Argus_Dev_RecoverFromError+0xa2>
 8020806:	2300      	movs	r3, #0
 8020808:	6023      	str	r3, [r4, #0]
 802080a:	f7e5 fe6d 	bl	80064e8 <IRQ_LOCK>
 802080e:	6823      	ldr	r3, [r4, #0]
 8020810:	bba3      	cbnz	r3, 802087c <Argus_Dev_RecoverFromError+0xac>
 8020812:	23c0      	movs	r3, #192	@ 0xc0
 8020814:	6023      	str	r3, [r4, #0]
 8020816:	f7e5 fe45 	bl	80064a4 <IRQ_UNLOCK>
 802081a:	f7e5 fe43 	bl	80064a4 <IRQ_UNLOCK>
 802081e:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8020820:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 8020824:	4a23      	ldr	r2, [pc, #140]	@ (80208b4 <Argus_Dev_RecoverFromError+0xe4>)
 8020826:	f043 0302 	orr.w	r3, r3, #2
 802082a:	430a      	orrs	r2, r1
 802082c:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 8020830:	2101      	movs	r1, #1
 8020832:	67a2      	str	r2, [r4, #120]	@ 0x78
 8020834:	4620      	mov	r0, r4
 8020836:	f7ff ff5f 	bl	80206f8 <Argus_Dev_ApplySync>
 802083a:	4605      	mov	r5, r0
 802083c:	f7e5 fe54 	bl	80064e8 <IRQ_LOCK>
 8020840:	6823      	ldr	r3, [r4, #0]
 8020842:	2bc0      	cmp	r3, #192	@ 0xc0
 8020844:	d10e      	bne.n	8020864 <Argus_Dev_RecoverFromError+0x94>
 8020846:	2300      	movs	r3, #0
 8020848:	6023      	str	r3, [r4, #0]
 802084a:	f7e5 fe2b 	bl	80064a4 <IRQ_UNLOCK>
 802084e:	4628      	mov	r0, r5
 8020850:	bd70      	pop	{r4, r5, r6, pc}
 8020852:	2bc0      	cmp	r3, #192	@ 0xc0
 8020854:	dc0a      	bgt.n	802086c <Argus_Dev_RecoverFromError+0x9c>
 8020856:	2bbe      	cmp	r3, #190	@ 0xbe
 8020858:	dc0b      	bgt.n	8020872 <Argus_Dev_RecoverFromError+0xa2>
 802085a:	2b67      	cmp	r3, #103	@ 0x67
 802085c:	d009      	beq.n	8020872 <Argus_Dev_RecoverFromError+0xa2>
 802085e:	6825      	ldr	r5, [r4, #0]
 8020860:	1deb      	adds	r3, r5, #7
 8020862:	d1cb      	bne.n	80207fc <Argus_Dev_RecoverFromError+0x2c>
 8020864:	f7e5 fe1e 	bl	80064a4 <IRQ_UNLOCK>
 8020868:	4628      	mov	r0, r5
 802086a:	bd70      	pop	{r4, r5, r6, pc}
 802086c:	3bc3      	subs	r3, #195	@ 0xc3
 802086e:	2b01      	cmp	r3, #1
 8020870:	d8f5      	bhi.n	802085e <Argus_Dev_RecoverFromError+0x8e>
 8020872:	2500      	movs	r5, #0
 8020874:	f7e5 fe16 	bl	80064a4 <IRQ_UNLOCK>
 8020878:	4628      	mov	r0, r5
 802087a:	bd70      	pop	{r4, r5, r6, pc}
 802087c:	6823      	ldr	r3, [r4, #0]
 802087e:	3371      	adds	r3, #113	@ 0x71
 8020880:	d004      	beq.n	802088c <Argus_Dev_RecoverFromError+0xbc>
 8020882:	6823      	ldr	r3, [r4, #0]
 8020884:	3372      	adds	r3, #114	@ 0x72
 8020886:	d007      	beq.n	8020898 <Argus_Dev_RecoverFromError+0xc8>
 8020888:	6823      	ldr	r3, [r4, #0]
 802088a:	e7c4      	b.n	8020816 <Argus_Dev_RecoverFromError+0x46>
 802088c:	f504 70b4 	add.w	r0, r4, #360	@ 0x168
 8020890:	f7fc f82e 	bl	801c8f0 <Argus_Dca_RecoverLaserFailure>
 8020894:	2800      	cmp	r0, #0
 8020896:	d0f4      	beq.n	8020882 <Argus_Dev_RecoverFromError+0xb2>
 8020898:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 802089a:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 802089e:	4a05      	ldr	r2, [pc, #20]	@ (80208b4 <Argus_Dev_RecoverFromError+0xe4>)
 80208a0:	f043 0302 	orr.w	r3, r3, #2
 80208a4:	430a      	orrs	r2, r1
 80208a6:	21c0      	movs	r1, #192	@ 0xc0
 80208a8:	67a2      	str	r2, [r4, #120]	@ 0x78
 80208aa:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 80208ae:	6021      	str	r1, [r4, #0]
 80208b0:	e7b1      	b.n	8020816 <Argus_Dev_RecoverFromError+0x46>
 80208b2:	bf00      	nop
 80208b4:	0003dffe 	.word	0x0003dffe

080208b8 <Argus_Dev_ChargePumpRamp>:
 80208b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80208ba:	6f86      	ldr	r6, [r0, #120]	@ 0x78
 80208bc:	4604      	mov	r4, r0
 80208be:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 80208c0:	f006 7600 	and.w	r6, r6, #33554432	@ 0x2000000
 80208c4:	f000 0020 	and.w	r0, r0, #32
 80208c8:	4330      	orrs	r0, r6
 80208ca:	e9c4 1243 	strd	r1, r2, [r4, #268]	@ 0x10c
 80208ce:	b085      	sub	sp, #20
 80208d0:	d105      	bne.n	80208de <Argus_Dev_ChargePumpRamp+0x26>
 80208d2:	460b      	mov	r3, r1
 80208d4:	4611      	mov	r1, r2
 80208d6:	b005      	add	sp, #20
 80208d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80208dc:	4718      	bx	r3
 80208de:	f894 70fb 	ldrb.w	r7, [r4, #251]	@ 0xfb
 80208e2:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
 80208e6:	f007 073f 	and.w	r7, r7, #63	@ 0x3f
 80208ea:	2f09      	cmp	r7, #9
 80208ec:	a802      	add	r0, sp, #8
 80208ee:	a903      	add	r1, sp, #12
 80208f0:	bf94      	ite	ls
 80208f2:	8bdd      	ldrhls	r5, [r3, #30]
 80208f4:	8c1d      	ldrhhi	r5, [r3, #32]
 80208f6:	f7e6 f9db 	bl	8006cb0 <Timer_GetCounterValue>
 80208fa:	f8d4 2118 	ldr.w	r2, [r4, #280]	@ 0x118
 80208fe:	f8dd c008 	ldr.w	ip, [sp, #8]
 8020902:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8020906:	f8d4 1114 	ldr.w	r1, [r4, #276]	@ 0x114
 802090a:	18ab      	adds	r3, r5, r2
 802090c:	4d4a      	ldr	r5, [pc, #296]	@ (8020a38 <Argus_Dev_ChargePumpRamp+0x180>)
 802090e:	bf2c      	ite	cs
 8020910:	2001      	movcs	r0, #1
 8020912:	2000      	movcc	r0, #0
 8020914:	42ab      	cmp	r3, r5
 8020916:	d949      	bls.n	80209ac <Argus_Dev_ChargePumpRamp+0xf4>
 8020918:	1c4d      	adds	r5, r1, #1
 802091a:	42a9      	cmp	r1, r5
 802091c:	f5a3 2374 	sub.w	r3, r3, #999424	@ 0xf4000
 8020920:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8020924:	bf2c      	ite	cs
 8020926:	2000      	movcs	r0, #0
 8020928:	2001      	movcc	r0, #1
 802092a:	2800      	cmp	r0, #0
 802092c:	d042      	beq.n	80209b4 <Argus_Dev_ChargePumpRamp+0xfc>
 802092e:	4561      	cmp	r1, ip
 8020930:	d058      	beq.n	80209e4 <Argus_Dev_ChargePumpRamp+0x12c>
 8020932:	bf34      	ite	cc
 8020934:	2201      	movcc	r2, #1
 8020936:	2200      	movcs	r2, #0
 8020938:	b12a      	cbz	r2, 8020946 <Argus_Dev_ChargePumpRamp+0x8e>
 802093a:	4565      	cmp	r5, ip
 802093c:	d065      	beq.n	8020a0a <Argus_Dev_ChargePumpRamp+0x152>
 802093e:	bf34      	ite	cc
 8020940:	2301      	movcc	r3, #1
 8020942:	2300      	movcs	r3, #0
 8020944:	b30b      	cbz	r3, 802098a <Argus_Dev_ChargePumpRamp+0xd2>
 8020946:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	@ 0xfa
 802094a:	f894 10fa 	ldrb.w	r1, [r4, #250]	@ 0xfa
 802094e:	ba5b      	rev16	r3, r3
 8020950:	f3c3 1383 	ubfx	r3, r3, #6, #4
 8020954:	b3ae      	cbz	r6, 80209c2 <Argus_Dev_ChargePumpRamp+0x10a>
 8020956:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8020958:	f042 0220 	orr.w	r2, r2, #32
 802095c:	67a2      	str	r2, [r4, #120]	@ 0x78
 802095e:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8020960:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8020964:	2600      	movs	r6, #0
 8020966:	67a2      	str	r2, [r4, #120]	@ 0x78
 8020968:	f3c3 0297 	ubfx	r2, r3, #2, #24
 802096c:	f021 0103 	bic.w	r1, r1, #3
 8020970:	4311      	orrs	r1, r2
 8020972:	ea46 1383 	orr.w	r3, r6, r3, lsl #6
 8020976:	f884 10fa 	strb.w	r1, [r4, #250]	@ 0xfa
 802097a:	f884 30fb 	strb.w	r3, [r4, #251]	@ 0xfb
 802097e:	f504 718c 	add.w	r1, r4, #280	@ 0x118
 8020982:	f504 708a 	add.w	r0, r4, #276	@ 0x114
 8020986:	f7e6 f993 	bl	8006cb0 <Timer_GetCounterValue>
 802098a:	4621      	mov	r1, r4
 802098c:	230a      	movs	r3, #10
 802098e:	f801 3ff8 	strb.w	r3, [r1, #248]!
 8020992:	4b2a      	ldr	r3, [pc, #168]	@ (8020a3c <Argus_Dev_ChargePumpRamp+0x184>)
 8020994:	2200      	movs	r2, #0
 8020996:	e9cd 3400 	strd	r3, r4, [sp]
 802099a:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 802099e:	2305      	movs	r3, #5
 80209a0:	f007 fc64 	bl	802826c <ADS_Transfer>
 80209a4:	2800      	cmp	r0, #0
 80209a6:	db17      	blt.n	80209d8 <Argus_Dev_ChargePumpRamp+0x120>
 80209a8:	b005      	add	sp, #20
 80209aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80209ac:	f080 0001 	eor.w	r0, r0, #1
 80209b0:	460d      	mov	r5, r1
 80209b2:	e7ba      	b.n	802092a <Argus_Dev_ChargePumpRamp+0x72>
 80209b4:	4561      	cmp	r1, ip
 80209b6:	d032      	beq.n	8020a1e <Argus_Dev_ChargePumpRamp+0x166>
 80209b8:	d3e7      	bcc.n	802098a <Argus_Dev_ChargePumpRamp+0xd2>
 80209ba:	4565      	cmp	r5, ip
 80209bc:	d02c      	beq.n	8020a18 <Argus_Dev_ChargePumpRamp+0x160>
 80209be:	d2e4      	bcs.n	802098a <Argus_Dev_ChargePumpRamp+0xd2>
 80209c0:	e7c1      	b.n	8020946 <Argus_Dev_ChargePumpRamp+0x8e>
 80209c2:	f8b4 204d 	ldrh.w	r2, [r4, #77]	@ 0x4d
 80209c6:	ba52      	rev16	r2, r2
 80209c8:	f3c2 1283 	ubfx	r2, r2, #6, #4
 80209cc:	4293      	cmp	r3, r2
 80209ce:	d00e      	beq.n	80209ee <Argus_Dev_ChargePumpRamp+0x136>
 80209d0:	2f00      	cmp	r7, #0
 80209d2:	bf08      	it	eq
 80209d4:	4613      	moveq	r3, r2
 80209d6:	e7c7      	b.n	8020968 <Argus_Dev_ChargePumpRamp+0xb0>
 80209d8:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 80209dc:	b005      	add	sp, #20
 80209de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80209e2:	4718      	bx	r3
 80209e4:	4572      	cmp	r2, lr
 80209e6:	bf8c      	ite	hi
 80209e8:	2200      	movhi	r2, #0
 80209ea:	2201      	movls	r2, #1
 80209ec:	e7a4      	b.n	8020938 <Argus_Dev_ChargePumpRamp+0x80>
 80209ee:	f894 204e 	ldrb.w	r2, [r4, #78]	@ 0x4e
 80209f2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80209f6:	4297      	cmp	r7, r2
 80209f8:	d019      	beq.n	8020a2e <Argus_Dev_ChargePumpRamp+0x176>
 80209fa:	db13      	blt.n	8020a24 <Argus_Dev_ChargePumpRamp+0x16c>
 80209fc:	b102      	cbz	r2, 8020a00 <Argus_Dev_ChargePumpRamp+0x148>
 80209fe:	1e7e      	subs	r6, r7, #1
 8020a00:	42b2      	cmp	r2, r6
 8020a02:	bfb8      	it	lt
 8020a04:	4632      	movlt	r2, r6
 8020a06:	b256      	sxtb	r6, r2
 8020a08:	e7ae      	b.n	8020968 <Argus_Dev_ChargePumpRamp+0xb0>
 8020a0a:	4573      	cmp	r3, lr
 8020a0c:	bf8c      	ite	hi
 8020a0e:	2300      	movhi	r3, #0
 8020a10:	2301      	movls	r3, #1
 8020a12:	2b00      	cmp	r3, #0
 8020a14:	d197      	bne.n	8020946 <Argus_Dev_ChargePumpRamp+0x8e>
 8020a16:	e7b8      	b.n	802098a <Argus_Dev_ChargePumpRamp+0xd2>
 8020a18:	4573      	cmp	r3, lr
 8020a1a:	d994      	bls.n	8020946 <Argus_Dev_ChargePumpRamp+0x8e>
 8020a1c:	e7b5      	b.n	802098a <Argus_Dev_ChargePumpRamp+0xd2>
 8020a1e:	4572      	cmp	r2, lr
 8020a20:	d9b3      	bls.n	802098a <Argus_Dev_ChargePumpRamp+0xd2>
 8020a22:	e7ca      	b.n	80209ba <Argus_Dev_ChargePumpRamp+0x102>
 8020a24:	1c7e      	adds	r6, r7, #1
 8020a26:	42b2      	cmp	r2, r6
 8020a28:	bfa8      	it	ge
 8020a2a:	4632      	movge	r2, r6
 8020a2c:	e7eb      	b.n	8020a06 <Argus_Dev_ChargePumpRamp+0x14e>
 8020a2e:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 8020a32:	4630      	mov	r0, r6
 8020a34:	e74f      	b.n	80208d6 <Argus_Dev_ChargePumpRamp+0x1e>
 8020a36:	bf00      	nop
 8020a38:	000f423f 	.word	0x000f423f
 8020a3c:	0801d7e5 	.word	0x0801d7e5

08020a40 <Argus_Dev_StartIntegration>:
 8020a40:	b530      	push	{r4, r5, lr}
 8020a42:	e9c0 1241 	strd	r1, r2, [r0, #260]	@ 0x104
 8020a46:	f8d0 511c 	ldr.w	r5, [r0, #284]	@ 0x11c
 8020a4a:	7f2b      	ldrb	r3, [r5, #28]
 8020a4c:	b085      	sub	sp, #20
 8020a4e:	4604      	mov	r4, r0
 8020a50:	2b00      	cmp	r3, #0
 8020a52:	d04a      	beq.n	8020aea <Argus_Dev_StartIntegration+0xaa>
 8020a54:	f8b0 006a 	ldrh.w	r0, [r0, #106]	@ 0x6a
 8020a58:	f8b4 2049 	ldrh.w	r2, [r4, #73]	@ 0x49
 8020a5c:	ba40      	rev16	r0, r0
 8020a5e:	ba52      	rev16	r2, r2
 8020a60:	f3c0 1049 	ubfx	r0, r0, #5, #10
 8020a64:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8020a68:	f3c2 0109 	ubfx	r1, r2, #0, #10
 8020a6c:	fb00 3303 	mla	r3, r0, r3, r3
 8020a70:	e9d5 2024 	ldrd	r2, r0, [r5, #144]	@ 0x90
 8020a74:	fb00 2201 	mla	r2, r0, r1, r2
 8020a78:	fba3 3202 	umull	r3, r2, r3, r2
 8020a7c:	f8d4 0100 	ldr.w	r0, [r4, #256]	@ 0x100
 8020a80:	0d99      	lsrs	r1, r3, #22
 8020a82:	ea41 2182 	orr.w	r1, r1, r2, lsl #10
 8020a86:	f3c3 5340 	ubfx	r3, r3, #21, #1
 8020a8a:	0785      	lsls	r5, r0, #30
 8020a8c:	440b      	add	r3, r1
 8020a8e:	d41c      	bmi.n	8020aca <Argus_Dev_StartIntegration+0x8a>
 8020a90:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8020a92:	f8b4 005a 	ldrh.w	r0, [r4, #90]	@ 0x5a
 8020a96:	f8a4 0089 	strh.w	r0, [r4, #137]	@ 0x89
 8020a9a:	f421 7100 	bic.w	r1, r1, #512	@ 0x200
 8020a9e:	67a1      	str	r1, [r4, #120]	@ 0x78
 8020aa0:	4830      	ldr	r0, [pc, #192]	@ (8020b64 <Argus_Dev_StartIntegration+0x124>)
 8020aa2:	4931      	ldr	r1, [pc, #196]	@ (8020b68 <Argus_Dev_StartIntegration+0x128>)
 8020aa4:	f104 0288 	add.w	r2, r4, #136	@ 0x88
 8020aa8:	2513      	movs	r5, #19
 8020aaa:	f884 5088 	strb.w	r5, [r4, #136]	@ 0x88
 8020aae:	e9cd 3100 	strd	r3, r1, [sp]
 8020ab2:	e9cd 0402 	strd	r0, r4, [sp, #8]
 8020ab6:	2303      	movs	r3, #3
 8020ab8:	4611      	mov	r1, r2
 8020aba:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 8020abe:	f007 fb55 	bl	802816c <ADS_TransferWithStart>
 8020ac2:	2800      	cmp	r0, #0
 8020ac4:	db14      	blt.n	8020af0 <Argus_Dev_StartIntegration+0xb0>
 8020ac6:	b005      	add	sp, #20
 8020ac8:	bd30      	pop	{r4, r5, pc}
 8020aca:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8020acc:	0741      	lsls	r1, r0, #29
 8020ace:	bf4c      	ite	mi
 8020ad0:	f5c2 3280 	rsbmi	r2, r2, #65536	@ 0x10000
 8020ad4:	f502 3280 	addpl.w	r2, r2, #65536	@ 0x10000
 8020ad8:	fba2 3203 	umull	r3, r2, r2, r3
 8020adc:	0c19      	lsrs	r1, r3, #16
 8020ade:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8020ae2:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8020ae6:	440b      	add	r3, r1
 8020ae8:	e7d2      	b.n	8020a90 <Argus_Dev_StartIntegration+0x50>
 8020aea:	f04f 33ff 	mov.w	r3, #4294967295
 8020aee:	e7cf      	b.n	8020a90 <Argus_Dev_StartIntegration+0x50>
 8020af0:	1d83      	adds	r3, r0, #6
 8020af2:	d10d      	bne.n	8020b10 <Argus_Dev_StartIntegration+0xd0>
 8020af4:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8020af6:	4b1d      	ldr	r3, [pc, #116]	@ (8020b6c <Argus_Dev_StartIntegration+0x12c>)
 8020af8:	f894 20fd 	ldrb.w	r2, [r4, #253]	@ 0xfd
 8020afc:	430b      	orrs	r3, r1
 8020afe:	67a3      	str	r3, [r4, #120]	@ 0x78
 8020b00:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8020b02:	f042 0202 	orr.w	r2, r2, #2
 8020b06:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8020b0a:	f884 20fd 	strb.w	r2, [r4, #253]	@ 0xfd
 8020b0e:	67a3      	str	r3, [r4, #120]	@ 0x78
 8020b10:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 8020b14:	22ab      	movs	r2, #171	@ 0xab
 8020b16:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
 8020b1a:	b12b      	cbz	r3, 8020b28 <Argus_Dev_StartIntegration+0xe8>
 8020b1c:	2200      	movs	r2, #0
 8020b1e:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 8020b22:	f8c4 2104 	str.w	r2, [r4, #260]	@ 0x104
 8020b26:	4798      	blx	r3
 8020b28:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
 8020b2c:	f003 0382 	and.w	r3, r3, #130	@ 0x82
 8020b30:	2b02      	cmp	r3, #2
 8020b32:	d1c8      	bne.n	8020ac6 <Argus_Dev_StartIntegration+0x86>
 8020b34:	f894 3064 	ldrb.w	r3, [r4, #100]	@ 0x64
 8020b38:	f894 10fd 	ldrb.w	r1, [r4, #253]	@ 0xfd
 8020b3c:	f003 0203 	and.w	r2, r3, #3
 8020b40:	3201      	adds	r2, #1
 8020b42:	0095      	lsls	r5, r2, #2
 8020b44:	f023 0303 	bic.w	r3, r3, #3
 8020b48:	f002 0203 	and.w	r2, r2, #3
 8020b4c:	4313      	orrs	r3, r2
 8020b4e:	f021 010c 	bic.w	r1, r1, #12
 8020b52:	f005 020c 	and.w	r2, r5, #12
 8020b56:	430a      	orrs	r2, r1
 8020b58:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 8020b5c:	f884 20fd 	strb.w	r2, [r4, #253]	@ 0xfd
 8020b60:	e7b1      	b.n	8020ac6 <Argus_Dev_StartIntegration+0x86>
 8020b62:	bf00      	nop
 8020b64:	0801d96d 	.word	0x0801d96d
 8020b68:	0801d9f9 	.word	0x0801d9f9
 8020b6c:	0003dffe 	.word	0x0003dffe

08020b70 <Argus_Dev_CheckDeviceConfigRegister>:
 8020b70:	788b      	ldrb	r3, [r1, #2]
 8020b72:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8020b76:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8020b7a:	bf14      	ite	ne
 8020b7c:	f043 0380 	orrne.w	r3, r3, #128	@ 0x80
 8020b80:	f023 0380 	biceq.w	r3, r3, #128	@ 0x80
 8020b84:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 8020b88:	788b      	ldrb	r3, [r1, #2]
 8020b8a:	069b      	lsls	r3, r3, #26
 8020b8c:	d501      	bpl.n	8020b92 <Argus_Dev_CheckDeviceConfigRegister+0x22>
 8020b8e:	2000      	movs	r0, #0
 8020b90:	4770      	bx	lr
 8020b92:	6f81      	ldr	r1, [r0, #120]	@ 0x78
 8020b94:	4b07      	ldr	r3, [pc, #28]	@ (8020bb4 <Argus_Dev_CheckDeviceConfigRegister+0x44>)
 8020b96:	f890 20fd 	ldrb.w	r2, [r0, #253]	@ 0xfd
 8020b9a:	430b      	orrs	r3, r1
 8020b9c:	6783      	str	r3, [r0, #120]	@ 0x78
 8020b9e:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8020ba0:	f042 0202 	orr.w	r2, r2, #2
 8020ba4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8020ba8:	f880 20fd 	strb.w	r2, [r0, #253]	@ 0xfd
 8020bac:	6783      	str	r3, [r0, #120]	@ 0x78
 8020bae:	f06f 0071 	mvn.w	r0, #113	@ 0x71
 8020bb2:	4770      	bx	lr
 8020bb4:	0003dffe 	.word	0x0003dffe

08020bb8 <Argus_Dev_DetuneClock>:
 8020bb8:	b570      	push	{r4, r5, r6, lr}
 8020bba:	f8d0 5100 	ldr.w	r5, [r0, #256]	@ 0x100
 8020bbe:	f8c0 1104 	str.w	r1, [r0, #260]	@ 0x104
 8020bc2:	4604      	mov	r4, r0
 8020bc4:	f8c0 2108 	str.w	r2, [r0, #264]	@ 0x108
 8020bc8:	f015 0002 	ands.w	r0, r5, #2
 8020bcc:	b082      	sub	sp, #8
 8020bce:	d107      	bne.n	8020be0 <Argus_Dev_DetuneClock+0x28>
 8020bd0:	460b      	mov	r3, r1
 8020bd2:	2900      	cmp	r1, #0
 8020bd4:	d071      	beq.n	8020cba <Argus_Dev_DetuneClock+0x102>
 8020bd6:	4611      	mov	r1, r2
 8020bd8:	b002      	add	sp, #8
 8020bda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020bde:	4718      	bx	r3
 8020be0:	f085 0504 	eor.w	r5, r5, #4
 8020be4:	07a8      	lsls	r0, r5, #30
 8020be6:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
 8020bea:	f8c4 5100 	str.w	r5, [r4, #256]	@ 0x100
 8020bee:	d567      	bpl.n	8020cc0 <Argus_Dev_DetuneClock+0x108>
 8020bf0:	f893 20a8 	ldrb.w	r2, [r3, #168]	@ 0xa8
 8020bf4:	f8d4 01d4 	ldr.w	r0, [r4, #468]	@ 0x1d4
 8020bf8:	0769      	lsls	r1, r5, #29
 8020bfa:	bf4c      	ite	mi
 8020bfc:	eb03 0342 	addmi.w	r3, r3, r2, lsl #1
 8020c00:	3257      	addpl	r2, #87	@ 0x57
 8020c02:	f9b0 6028 	ldrsh.w	r6, [r0, #40]	@ 0x28
 8020c06:	bf4c      	ite	mi
 8020c08:	f8b3 50b2 	ldrhmi.w	r5, [r3, #178]	@ 0xb2
 8020c0c:	f833 5012 	ldrhpl.w	r5, [r3, r2, lsl #1]
 8020c10:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8020c14:	429e      	cmp	r6, r3
 8020c16:	d060      	beq.n	8020cda <Argus_Dev_DetuneClock+0x122>
 8020c18:	f002 f9f0 	bl	8022ffc <Argus_Cal_GetCalibrationPtr>
 8020c1c:	7e02      	ldrb	r2, [r0, #24]
 8020c1e:	fb12 f206 	smulbb	r2, r2, r6
 8020c22:	10d2      	asrs	r2, r2, #3
 8020c24:	fb05 f202 	mul.w	r2, r5, r2
 8020c28:	2a00      	cmp	r2, #0
 8020c2a:	da61      	bge.n	8020cf0 <Argus_Dev_DetuneClock+0x138>
 8020c2c:	4253      	negs	r3, r2
 8020c2e:	f3c3 5280 	ubfx	r2, r3, #22, #1
 8020c32:	eb02 52d3 	add.w	r2, r2, r3, lsr #23
 8020c36:	4252      	negs	r2, r2
 8020c38:	b251      	sxtb	r1, r2
 8020c3a:	1a69      	subs	r1, r5, r1
 8020c3c:	b2d3      	uxtb	r3, r2
 8020c3e:	f894 2064 	ldrb.w	r2, [r4, #100]	@ 0x64
 8020c42:	f3c1 01d7 	ubfx	r1, r1, #3, #24
 8020c46:	f884 1063 	strb.w	r1, [r4, #99]	@ 0x63
 8020c4a:	f8b4 1057 	ldrh.w	r1, [r4, #87]	@ 0x57
 8020c4e:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8020c50:	f8c4 008a 	str.w	r0, [r4, #138]	@ 0x8a
 8020c54:	f002 021f 	and.w	r2, r2, #31
 8020c58:	1aeb      	subs	r3, r5, r3
 8020c5a:	ea42 1343 	orr.w	r3, r2, r3, lsl #5
 8020c5e:	4828      	ldr	r0, [pc, #160]	@ (8020d00 <Argus_Dev_DetuneClock+0x148>)
 8020c60:	f8a4 108f 	strh.w	r1, [r4, #143]	@ 0x8f
 8020c64:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8020c68:	f022 0210 	bic.w	r2, r2, #16
 8020c6c:	2110      	movs	r1, #16
 8020c6e:	2516      	movs	r5, #22
 8020c70:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 8020c74:	f884 308e 	strb.w	r3, [r4, #142]	@ 0x8e
 8020c78:	f884 2089 	strb.w	r2, [r4, #137]	@ 0x89
 8020c7c:	f884 1088 	strb.w	r1, [r4, #136]	@ 0x88
 8020c80:	f884 108f 	strb.w	r1, [r4, #143]	@ 0x8f
 8020c84:	f884 508a 	strb.w	r5, [r4, #138]	@ 0x8a
 8020c88:	2309      	movs	r3, #9
 8020c8a:	e9cd 0400 	strd	r0, r4, [sp]
 8020c8e:	2200      	movs	r2, #0
 8020c90:	f104 0188 	add.w	r1, r4, #136	@ 0x88
 8020c94:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 8020c98:	f007 fae8 	bl	802826c <ADS_Transfer>
 8020c9c:	1e03      	subs	r3, r0, #0
 8020c9e:	da0c      	bge.n	8020cba <Argus_Dev_DetuneClock+0x102>
 8020ca0:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8020ca2:	4918      	ldr	r1, [pc, #96]	@ (8020d04 <Argus_Dev_DetuneClock+0x14c>)
 8020ca4:	4311      	orrs	r1, r2
 8020ca6:	f894 20fd 	ldrb.w	r2, [r4, #253]	@ 0xfd
 8020caa:	67a1      	str	r1, [r4, #120]	@ 0x78
 8020cac:	f042 0202 	orr.w	r2, r2, #2
 8020cb0:	f884 20fd 	strb.w	r2, [r4, #253]	@ 0xfd
 8020cb4:	f8d4 2104 	ldr.w	r2, [r4, #260]	@ 0x104
 8020cb8:	b9a2      	cbnz	r2, 8020ce4 <Argus_Dev_DetuneClock+0x12c>
 8020cba:	4618      	mov	r0, r3
 8020cbc:	b002      	add	sp, #8
 8020cbe:	bd70      	pop	{r4, r5, r6, pc}
 8020cc0:	f8b3 3079 	ldrh.w	r3, [r3, #121]	@ 0x79
 8020cc4:	f8d4 01d4 	ldr.w	r0, [r4, #468]	@ 0x1d4
 8020cc8:	ba5b      	rev16	r3, r3
 8020cca:	f9b0 6028 	ldrsh.w	r6, [r0, #40]	@ 0x28
 8020cce:	f3c3 154a 	ubfx	r5, r3, #5, #11
 8020cd2:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8020cd6:	429e      	cmp	r6, r3
 8020cd8:	d19e      	bne.n	8020c18 <Argus_Dev_DetuneClock+0x60>
 8020cda:	f002 f98f 	bl	8022ffc <Argus_Cal_GetCalibrationPtr>
 8020cde:	4629      	mov	r1, r5
 8020ce0:	2300      	movs	r3, #0
 8020ce2:	e7ac      	b.n	8020c3e <Argus_Dev_DetuneClock+0x86>
 8020ce4:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 8020ce8:	b002      	add	sp, #8
 8020cea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020cee:	4710      	bx	r2
 8020cf0:	f3c2 5180 	ubfx	r1, r2, #22, #1
 8020cf4:	eb01 52d2 	add.w	r2, r1, r2, lsr #23
 8020cf8:	b251      	sxtb	r1, r2
 8020cfa:	1a69      	subs	r1, r5, r1
 8020cfc:	b2d3      	uxtb	r3, r2
 8020cfe:	e79e      	b.n	8020c3e <Argus_Dev_DetuneClock+0x86>
 8020d00:	0801d7a1 	.word	0x0801d7a1
 8020d04:	0003dffe 	.word	0x0003dffe

08020d08 <Argus_Dev_ReadEEPROM>:
 8020d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d0c:	2300      	movs	r3, #0
 8020d0e:	b095      	sub	sp, #84	@ 0x54
 8020d10:	600b      	str	r3, [r1, #0]
 8020d12:	604b      	str	r3, [r1, #4]
 8020d14:	608b      	str	r3, [r1, #8]
 8020d16:	60cb      	str	r3, [r1, #12]
 8020d18:	e9cd 3300 	strd	r3, r3, [sp]
 8020d1c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8020d20:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8020d24:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8020d28:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8020d2c:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8020d30:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
 8020d34:	f890 305b 	ldrb.w	r3, [r0, #91]	@ 0x5b
 8020d38:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 8020d3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020d3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8020d42:	f023 0320 	bic.w	r3, r3, #32
 8020d46:	6782      	str	r2, [r0, #120]	@ 0x78
 8020d48:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8020d4c:	aa0e      	add	r2, sp, #56	@ 0x38
 8020d4e:	2312      	movs	r3, #18
 8020d50:	460e      	mov	r6, r1
 8020d52:	f500 7790 	add.w	r7, r0, #288	@ 0x120
 8020d56:	f8b0 1059 	ldrh.w	r1, [r0, #89]	@ 0x59
 8020d5a:	f8ad 1038 	strh.w	r1, [sp, #56]	@ 0x38
 8020d5e:	4604      	mov	r4, r0
 8020d60:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
 8020d64:	f100 0b59 	add.w	fp, r0, #89	@ 0x59
 8020d68:	2303      	movs	r3, #3
 8020d6a:	4611      	mov	r1, r2
 8020d6c:	4638      	mov	r0, r7
 8020d6e:	f007 fa7d 	bl	802826c <ADS_Transfer>
 8020d72:	1e05      	subs	r5, r0, #0
 8020d74:	db4d      	blt.n	8020e12 <Argus_Dev_ReadEEPROM+0x10a>
 8020d76:	2164      	movs	r1, #100	@ 0x64
 8020d78:	4638      	mov	r0, r7
 8020d7a:	f007 f95b 	bl	8028034 <ADS_AwaitIdle>
 8020d7e:	1e05      	subs	r5, r0, #0
 8020d80:	db4b      	blt.n	8020e1a <Argus_Dev_ReadEEPROM+0x112>
 8020d82:	f89d 203a 	ldrb.w	r2, [sp, #58]	@ 0x3a
 8020d86:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
 8020d8a:	0651      	lsls	r1, r2, #25
 8020d8c:	bf4c      	ite	mi
 8020d8e:	f043 0380 	orrmi.w	r3, r3, #128	@ 0x80
 8020d92:	f023 0380 	bicpl.w	r3, r3, #128	@ 0x80
 8020d96:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
 8020d9a:	0693      	lsls	r3, r2, #26
 8020d9c:	f140 8119 	bpl.w	8020fd2 <Argus_Dev_ReadEEPROM+0x2ca>
 8020da0:	a902      	add	r1, sp, #8
 8020da2:	4638      	mov	r0, r7
 8020da4:	f007 fbbc 	bl	8028520 <ADS_ReadEEPROM>
 8020da8:	a906      	add	r1, sp, #24
 8020daa:	4682      	mov	sl, r0
 8020dac:	4638      	mov	r0, r7
 8020dae:	f007 fbb7 	bl	8028520 <ADS_ReadEEPROM>
 8020db2:	a90a      	add	r1, sp, #40	@ 0x28
 8020db4:	4680      	mov	r8, r0
 8020db6:	4638      	mov	r0, r7
 8020db8:	f007 fbb2 	bl	8028520 <ADS_ReadEEPROM>
 8020dbc:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8020dc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8020dc4:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8020dc8:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8020dca:	2200      	movs	r2, #0
 8020dcc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8020dd0:	67a3      	str	r3, [r4, #120]	@ 0x78
 8020dd2:	e9cd 2200 	strd	r2, r2, [sp]
 8020dd6:	f8b4 3059 	ldrh.w	r3, [r4, #89]	@ 0x59
 8020dda:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8020dde:	2312      	movs	r3, #18
 8020de0:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
 8020de4:	4681      	mov	r9, r0
 8020de6:	2303      	movs	r3, #3
 8020de8:	a90e      	add	r1, sp, #56	@ 0x38
 8020dea:	4638      	mov	r0, r7
 8020dec:	f007 fa3e 	bl	802826c <ADS_Transfer>
 8020df0:	1e05      	subs	r5, r0, #0
 8020df2:	db05      	blt.n	8020e00 <Argus_Dev_ReadEEPROM+0xf8>
 8020df4:	4638      	mov	r0, r7
 8020df6:	2164      	movs	r1, #100	@ 0x64
 8020df8:	f007 f91c 	bl	8028034 <ADS_AwaitIdle>
 8020dfc:	1e05      	subs	r5, r0, #0
 8020dfe:	db61      	blt.n	8020ec4 <Argus_Dev_ReadEEPROM+0x1bc>
 8020e00:	9b02      	ldr	r3, [sp, #8]
 8020e02:	9a06      	ldr	r2, [sp, #24]
 8020e04:	4293      	cmp	r3, r2
 8020e06:	d010      	beq.n	8020e2a <Argus_Dev_ReadEEPROM+0x122>
 8020e08:	487a      	ldr	r0, [pc, #488]	@ (8020ff4 <Argus_Dev_ReadEEPROM+0x2ec>)
 8020e0a:	f7f2 f8c3 	bl	8012f94 <print>
 8020e0e:	f06f 056c 	mvn.w	r5, #108	@ 0x6c
 8020e12:	4628      	mov	r0, r5
 8020e14:	b015      	add	sp, #84	@ 0x54
 8020e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e1a:	4629      	mov	r1, r5
 8020e1c:	4876      	ldr	r0, [pc, #472]	@ (8020ff8 <Argus_Dev_ReadEEPROM+0x2f0>)
 8020e1e:	f7f2 f8b9 	bl	8012f94 <print>
 8020e22:	4628      	mov	r0, r5
 8020e24:	b015      	add	sp, #84	@ 0x54
 8020e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e2a:	9a03      	ldr	r2, [sp, #12]
 8020e2c:	9907      	ldr	r1, [sp, #28]
 8020e2e:	428a      	cmp	r2, r1
 8020e30:	d1ea      	bne.n	8020e08 <Argus_Dev_ReadEEPROM+0x100>
 8020e32:	9904      	ldr	r1, [sp, #16]
 8020e34:	9808      	ldr	r0, [sp, #32]
 8020e36:	4281      	cmp	r1, r0
 8020e38:	d1e6      	bne.n	8020e08 <Argus_Dev_ReadEEPROM+0x100>
 8020e3a:	9f05      	ldr	r7, [sp, #20]
 8020e3c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020e3e:	4287      	cmp	r7, r0
 8020e40:	d1e2      	bne.n	8020e08 <Argus_Dev_ReadEEPROM+0x100>
 8020e42:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020e44:	4283      	cmp	r3, r0
 8020e46:	d1df      	bne.n	8020e08 <Argus_Dev_ReadEEPROM+0x100>
 8020e48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020e4a:	429a      	cmp	r2, r3
 8020e4c:	d1dc      	bne.n	8020e08 <Argus_Dev_ReadEEPROM+0x100>
 8020e4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020e50:	4299      	cmp	r1, r3
 8020e52:	d1d9      	bne.n	8020e08 <Argus_Dev_ReadEEPROM+0x100>
 8020e54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020e56:	429f      	cmp	r7, r3
 8020e58:	d1d6      	bne.n	8020e08 <Argus_Dev_ReadEEPROM+0x100>
 8020e5a:	f1ba 0f6d 	cmp.w	sl, #109	@ 0x6d
 8020e5e:	f04f 0300 	mov.w	r3, #0
 8020e62:	d04c      	beq.n	8020efe <Argus_Dev_ReadEEPROM+0x1f6>
 8020e64:	f1b8 0f6d 	cmp.w	r8, #109	@ 0x6d
 8020e68:	d049      	beq.n	8020efe <Argus_Dev_ReadEEPROM+0x1f6>
 8020e6a:	f1b9 0f6d 	cmp.w	r9, #109	@ 0x6d
 8020e6e:	d046      	beq.n	8020efe <Argus_Dev_ReadEEPROM+0x1f6>
 8020e70:	af02      	add	r7, sp, #8
 8020e72:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
 8020e76:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
 8020e7a:	9312      	str	r3, [sp, #72]	@ 0x48
 8020e7c:	f8ad 304c 	strh.w	r3, [sp, #76]	@ 0x4c
 8020e80:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8020e82:	6030      	str	r0, [r6, #0]
 8020e84:	6071      	str	r1, [r6, #4]
 8020e86:	60f3      	str	r3, [r6, #12]
 8020e88:	60b2      	str	r2, [r6, #8]
 8020e8a:	4631      	mov	r1, r6
 8020e8c:	a80e      	add	r0, sp, #56	@ 0x38
 8020e8e:	f7f2 f8b9 	bl	8013004 <EEPROM_Decode>
 8020e92:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	@ 0x4a
 8020e96:	2b01      	cmp	r3, #1
 8020e98:	d059      	beq.n	8020f4e <Argus_Dev_ReadEEPROM+0x246>
 8020e9a:	2b00      	cmp	r3, #0
 8020e9c:	d137      	bne.n	8020f0e <Argus_Dev_ReadEEPROM+0x206>
 8020e9e:	4630      	mov	r0, r6
 8020ea0:	f9bd 704c 	ldrsh.w	r7, [sp, #76]	@ 0x4c
 8020ea4:	f7f2 f87a 	bl	8012f9c <EEPROM_ReadChipId>
 8020ea8:	6060      	str	r0, [r4, #4]
 8020eaa:	4630      	mov	r0, r6
 8020eac:	f7f2 f884 	bl	8012fb8 <EEPROM_ReadModule>
 8020eb0:	1e43      	subs	r3, r0, #1
 8020eb2:	72a0      	strb	r0, [r4, #10]
 8020eb4:	2b06      	cmp	r3, #6
 8020eb6:	d80e      	bhi.n	8020ed6 <Argus_Dev_ReadEEPROM+0x1ce>
 8020eb8:	e8df f003 	tbb	[pc, r3]
 8020ebc:	1709090b 	.word	0x1709090b
 8020ec0:	0909      	.short	0x0909
 8020ec2:	09          	.byte	0x09
 8020ec3:	00          	.byte	0x00
 8020ec4:	4629      	mov	r1, r5
 8020ec6:	484d      	ldr	r0, [pc, #308]	@ (8020ffc <Argus_Dev_ReadEEPROM+0x2f4>)
 8020ec8:	f7f2 f864 	bl	8012f94 <print>
 8020ecc:	e798      	b.n	8020e00 <Argus_Dev_ReadEEPROM+0xf8>
 8020ece:	2f00      	cmp	r7, #0
 8020ed0:	d13a      	bne.n	8020f48 <Argus_Dev_ReadEEPROM+0x240>
 8020ed2:	2301      	movs	r3, #1
 8020ed4:	7263      	strb	r3, [r4, #9]
 8020ed6:	7a23      	ldrb	r3, [r4, #8]
 8020ed8:	2b02      	cmp	r3, #2
 8020eda:	d073      	beq.n	8020fc4 <Argus_Dev_ReadEEPROM+0x2bc>
 8020edc:	2b02      	cmp	r3, #2
 8020ede:	d807      	bhi.n	8020ef0 <Argus_Dev_ReadEEPROM+0x1e8>
 8020ee0:	2b01      	cmp	r3, #1
 8020ee2:	d096      	beq.n	8020e12 <Argus_Dev_ReadEEPROM+0x10a>
 8020ee4:	2300      	movs	r3, #0
 8020ee6:	7223      	strb	r3, [r4, #8]
 8020ee8:	e793      	b.n	8020e12 <Argus_Dev_ReadEEPROM+0x10a>
 8020eea:	2303      	movs	r3, #3
 8020eec:	7263      	strb	r3, [r4, #9]
 8020eee:	e7f2      	b.n	8020ed6 <Argus_Dev_ReadEEPROM+0x1ce>
 8020ef0:	3b03      	subs	r3, #3
 8020ef2:	2b02      	cmp	r3, #2
 8020ef4:	d8f6      	bhi.n	8020ee4 <Argus_Dev_ReadEEPROM+0x1dc>
 8020ef6:	4628      	mov	r0, r5
 8020ef8:	b015      	add	sp, #84	@ 0x54
 8020efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020efe:	4840      	ldr	r0, [pc, #256]	@ (8021000 <Argus_Dev_ReadEEPROM+0x2f8>)
 8020f00:	f7f2 f848 	bl	8012f94 <print>
 8020f04:	256d      	movs	r5, #109	@ 0x6d
 8020f06:	4628      	mov	r0, r5
 8020f08:	b015      	add	sp, #84	@ 0x54
 8020f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f0e:	4630      	mov	r0, r6
 8020f10:	f7f2 f844 	bl	8012f9c <EEPROM_ReadChipId>
 8020f14:	6060      	str	r0, [r4, #4]
 8020f16:	4630      	mov	r0, r6
 8020f18:	f7f2 f84e 	bl	8012fb8 <EEPROM_ReadModule>
 8020f1c:	1e43      	subs	r3, r0, #1
 8020f1e:	72a0      	strb	r0, [r4, #10]
 8020f20:	2b06      	cmp	r3, #6
 8020f22:	d8d8      	bhi.n	8020ed6 <Argus_Dev_ReadEEPROM+0x1ce>
 8020f24:	a201      	add	r2, pc, #4	@ (adr r2, 8020f2c <Argus_Dev_ReadEEPROM+0x224>)
 8020f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020f2a:	bf00      	nop
 8020f2c:	08020ed3 	.word	0x08020ed3
 8020f30:	08020f49 	.word	0x08020f49
 8020f34:	08020f49 	.word	0x08020f49
 8020f38:	08020eeb 	.word	0x08020eeb
 8020f3c:	08020f49 	.word	0x08020f49
 8020f40:	08020f49 	.word	0x08020f49
 8020f44:	08020f49 	.word	0x08020f49
 8020f48:	2302      	movs	r3, #2
 8020f4a:	7263      	strb	r3, [r4, #9]
 8020f4c:	e7c3      	b.n	8020ed6 <Argus_Dev_ReadEEPROM+0x1ce>
 8020f4e:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	@ 0x4c
 8020f52:	2b03      	cmp	r3, #3
 8020f54:	d1db      	bne.n	8020f0e <Argus_Dev_ReadEEPROM+0x206>
 8020f56:	4630      	mov	r0, r6
 8020f58:	f7f2 f820 	bl	8012f9c <EEPROM_ReadChipId>
 8020f5c:	6060      	str	r0, [r4, #4]
 8020f5e:	4630      	mov	r0, r6
 8020f60:	f7f2 f82a 	bl	8012fb8 <EEPROM_ReadModule>
 8020f64:	1e43      	subs	r3, r0, #1
 8020f66:	72a0      	strb	r0, [r4, #10]
 8020f68:	2b06      	cmp	r3, #6
 8020f6a:	d8b4      	bhi.n	8020ed6 <Argus_Dev_ReadEEPROM+0x1ce>
 8020f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8020f74 <Argus_Dev_ReadEEPROM+0x26c>)
 8020f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020f72:	bf00      	nop
 8020f74:	08020ed3 	.word	0x08020ed3
 8020f78:	08020f91 	.word	0x08020f91
 8020f7c:	08020f91 	.word	0x08020f91
 8020f80:	08020fbb 	.word	0x08020fbb
 8020f84:	08020f91 	.word	0x08020f91
 8020f88:	08020f91 	.word	0x08020f91
 8020f8c:	08020f91 	.word	0x08020f91
 8020f90:	7a23      	ldrb	r3, [r4, #8]
 8020f92:	2204      	movs	r2, #4
 8020f94:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8020f98:	2b02      	cmp	r3, #2
 8020f9a:	7262      	strb	r2, [r4, #9]
 8020f9c:	72a0      	strb	r0, [r4, #10]
 8020f9e:	d19d      	bne.n	8020edc <Argus_Dev_ReadEEPROM+0x1d4>
 8020fa0:	7aa3      	ldrb	r3, [r4, #10]
 8020fa2:	3b43      	subs	r3, #67	@ 0x43
 8020fa4:	2b04      	cmp	r3, #4
 8020fa6:	f63f af34 	bhi.w	8020e12 <Argus_Dev_ReadEEPROM+0x10a>
 8020faa:	4a16      	ldr	r2, [pc, #88]	@ (8021004 <Argus_Dev_ReadEEPROM+0x2fc>)
 8020fac:	6863      	ldr	r3, [r4, #4]
 8020fae:	4293      	cmp	r3, r2
 8020fb0:	bf8c      	ite	hi
 8020fb2:	2305      	movhi	r3, #5
 8020fb4:	2303      	movls	r3, #3
 8020fb6:	7223      	strb	r3, [r4, #8]
 8020fb8:	e72b      	b.n	8020e12 <Argus_Dev_ReadEEPROM+0x10a>
 8020fba:	f244 4305 	movw	r3, #17413	@ 0x4405
 8020fbe:	f8a4 3009 	strh.w	r3, [r4, #9]
 8020fc2:	e788      	b.n	8020ed6 <Argus_Dev_ReadEEPROM+0x1ce>
 8020fc4:	7aa3      	ldrb	r3, [r4, #10]
 8020fc6:	2b07      	cmp	r3, #7
 8020fc8:	d8eb      	bhi.n	8020fa2 <Argus_Dev_ReadEEPROM+0x29a>
 8020fca:	2b01      	cmp	r3, #1
 8020fcc:	f67f af21 	bls.w	8020e12 <Argus_Dev_ReadEEPROM+0x10a>
 8020fd0:	e7eb      	b.n	8020faa <Argus_Dev_ReadEEPROM+0x2a2>
 8020fd2:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8020fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8021008 <Argus_Dev_ReadEEPROM+0x300>)
 8020fd6:	f894 20fd 	ldrb.w	r2, [r4, #253]	@ 0xfd
 8020fda:	430b      	orrs	r3, r1
 8020fdc:	67a3      	str	r3, [r4, #120]	@ 0x78
 8020fde:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8020fe0:	f042 0202 	orr.w	r2, r2, #2
 8020fe4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8020fe8:	f884 20fd 	strb.w	r2, [r4, #253]	@ 0xfd
 8020fec:	67a3      	str	r3, [r4, #120]	@ 0x78
 8020fee:	f06f 0571 	mvn.w	r5, #113	@ 0x71
 8020ff2:	e70e      	b.n	8020e12 <Argus_Dev_ReadEEPROM+0x10a>
 8020ff4:	0802ece8 	.word	0x0802ece8
 8020ff8:	0802ec74 	.word	0x0802ec74
 8020ffc:	0802ecac 	.word	0x0802ecac
 8021000:	0802edc4 	.word	0x0802edc4
 8021004:	000493e0 	.word	0x000493e0
 8021008:	0003dffe 	.word	0x0003dffe

0802100c <GetStatusCallback>:
 802100c:	6008      	str	r0, [r1, #0]
 802100e:	4770      	bx	lr

08021010 <AuxMeasurementFinish>:
 8021010:	f8d2 3104 	ldr.w	r3, [r2, #260]	@ 0x104
 8021014:	b143      	cbz	r3, 8021028 <AuxMeasurementFinish+0x18>
 8021016:	b410      	push	{r4}
 8021018:	2400      	movs	r4, #0
 802101a:	f8c2 4104 	str.w	r4, [r2, #260]	@ 0x104
 802101e:	f8d2 1108 	ldr.w	r1, [r2, #264]	@ 0x108
 8021022:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021026:	4718      	bx	r3
 8021028:	4770      	bx	lr
 802102a:	bf00      	nop

0802102c <AuxMeasurementStarted>:
 802102c:	2800      	cmp	r0, #0
 802102e:	b508      	push	{r3, lr}
 8021030:	460b      	mov	r3, r1
 8021032:	da09      	bge.n	8021048 <AuxMeasurementStarted+0x1c>
 8021034:	6f88      	ldr	r0, [r1, #120]	@ 0x78
 8021036:	f891 20fd 	ldrb.w	r2, [r1, #253]	@ 0xfd
 802103a:	4909      	ldr	r1, [pc, #36]	@ (8021060 <AuxMeasurementStarted+0x34>)
 802103c:	f042 0202 	orr.w	r2, r2, #2
 8021040:	4301      	orrs	r1, r0
 8021042:	6799      	str	r1, [r3, #120]	@ 0x78
 8021044:	f883 20fd 	strb.w	r2, [r3, #253]	@ 0xfd
 8021048:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 802104a:	0592      	lsls	r2, r2, #22
 802104c:	d401      	bmi.n	8021052 <AuxMeasurementStarted+0x26>
 802104e:	2000      	movs	r0, #0
 8021050:	bd08      	pop	{r3, pc}
 8021052:	f103 0188 	add.w	r1, r3, #136	@ 0x88
 8021056:	4618      	mov	r0, r3
 8021058:	f7ff fd8a 	bl	8020b70 <Argus_Dev_CheckDeviceConfigRegister>
 802105c:	2000      	movs	r0, #0
 802105e:	bd08      	pop	{r3, pc}
 8021060:	0003dffe 	.word	0x0003dffe

08021064 <ChargePumpRampSync.constprop.0>:
 8021064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021066:	b087      	sub	sp, #28
 8021068:	2300      	movs	r3, #0
 802106a:	2202      	movs	r2, #2
 802106c:	4604      	mov	r4, r0
 802106e:	a903      	add	r1, sp, #12
 8021070:	a802      	add	r0, sp, #8
 8021072:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8021076:	9201      	str	r2, [sp, #4]
 8021078:	f7e5 fe1a 	bl	8006cb0 <Timer_GetCounterValue>
 802107c:	4929      	ldr	r1, [pc, #164]	@ (8021124 <ChargePumpRampSync.constprop.0+0xc0>)
 802107e:	aa01      	add	r2, sp, #4
 8021080:	4620      	mov	r0, r4
 8021082:	f7ff fc19 	bl	80208b8 <Argus_Dev_ChargePumpRamp>
 8021086:	2800      	cmp	r0, #0
 8021088:	db22      	blt.n	80210d0 <ChargePumpRampSync.constprop.0+0x6c>
 802108a:	4c27      	ldr	r4, [pc, #156]	@ (8021128 <ChargePumpRampSync.constprop.0+0xc4>)
 802108c:	4d27      	ldr	r5, [pc, #156]	@ (802112c <ChargePumpRampSync.constprop.0+0xc8>)
 802108e:	a804      	add	r0, sp, #16
 8021090:	a905      	add	r1, sp, #20
 8021092:	f7e5 fe0d 	bl	8006cb0 <Timer_GetCounterValue>
 8021096:	e9dd 2603 	ldrd	r2, r6, [sp, #12]
 802109a:	1913      	adds	r3, r2, r4
 802109c:	bf2c      	ite	cs
 802109e:	2001      	movcs	r0, #1
 80210a0:	2000      	movcc	r0, #0
 80210a2:	42ab      	cmp	r3, r5
 80210a4:	9f05      	ldr	r7, [sp, #20]
 80210a6:	9902      	ldr	r1, [sp, #8]
 80210a8:	d814      	bhi.n	80210d4 <ChargePumpRampSync.constprop.0+0x70>
 80210aa:	f080 0001 	eor.w	r0, r0, #1
 80210ae:	468c      	mov	ip, r1
 80210b0:	b1d8      	cbz	r0, 80210ea <ChargePumpRampSync.constprop.0+0x86>
 80210b2:	42b1      	cmp	r1, r6
 80210b4:	d023      	beq.n	80210fe <ChargePumpRampSync.constprop.0+0x9a>
 80210b6:	bf34      	ite	cc
 80210b8:	2201      	movcc	r2, #1
 80210ba:	2200      	movcs	r2, #0
 80210bc:	b1da      	cbz	r2, 80210f6 <ChargePumpRampSync.constprop.0+0x92>
 80210be:	45b4      	cmp	ip, r6
 80210c0:	d02b      	beq.n	802111a <ChargePumpRampSync.constprop.0+0xb6>
 80210c2:	bf34      	ite	cc
 80210c4:	2301      	movcc	r3, #1
 80210c6:	2300      	movcs	r3, #0
 80210c8:	b9ab      	cbnz	r3, 80210f6 <ChargePumpRampSync.constprop.0+0x92>
 80210ca:	9801      	ldr	r0, [sp, #4]
 80210cc:	2802      	cmp	r0, #2
 80210ce:	d0de      	beq.n	802108e <ChargePumpRampSync.constprop.0+0x2a>
 80210d0:	b007      	add	sp, #28
 80210d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80210d4:	f101 0c01 	add.w	ip, r1, #1
 80210d8:	4561      	cmp	r1, ip
 80210da:	f5a2 235b 	sub.w	r3, r2, #897024	@ 0xdb000
 80210de:	f5a3 633a 	sub.w	r3, r3, #2976	@ 0xba0
 80210e2:	bf2c      	ite	cs
 80210e4:	2000      	movcs	r0, #0
 80210e6:	2001      	movcc	r0, #1
 80210e8:	e7e2      	b.n	80210b0 <ChargePumpRampSync.constprop.0+0x4c>
 80210ea:	42b1      	cmp	r1, r6
 80210ec:	d00c      	beq.n	8021108 <ChargePumpRampSync.constprop.0+0xa4>
 80210ee:	d3ec      	bcc.n	80210ca <ChargePumpRampSync.constprop.0+0x66>
 80210f0:	45b4      	cmp	ip, r6
 80210f2:	d00d      	beq.n	8021110 <ChargePumpRampSync.constprop.0+0xac>
 80210f4:	d2e9      	bcs.n	80210ca <ChargePumpRampSync.constprop.0+0x66>
 80210f6:	f06f 0005 	mvn.w	r0, #5
 80210fa:	b007      	add	sp, #28
 80210fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80210fe:	42ba      	cmp	r2, r7
 8021100:	bf8c      	ite	hi
 8021102:	2200      	movhi	r2, #0
 8021104:	2201      	movls	r2, #1
 8021106:	e7d9      	b.n	80210bc <ChargePumpRampSync.constprop.0+0x58>
 8021108:	42ba      	cmp	r2, r7
 802110a:	d9de      	bls.n	80210ca <ChargePumpRampSync.constprop.0+0x66>
 802110c:	45b4      	cmp	ip, r6
 802110e:	d1f1      	bne.n	80210f4 <ChargePumpRampSync.constprop.0+0x90>
 8021110:	42bb      	cmp	r3, r7
 8021112:	d8da      	bhi.n	80210ca <ChargePumpRampSync.constprop.0+0x66>
 8021114:	f06f 0005 	mvn.w	r0, #5
 8021118:	e7ef      	b.n	80210fa <ChargePumpRampSync.constprop.0+0x96>
 802111a:	42bb      	cmp	r3, r7
 802111c:	bf8c      	ite	hi
 802111e:	2300      	movhi	r3, #0
 8021120:	2301      	movls	r3, #1
 8021122:	e7d1      	b.n	80210c8 <ChargePumpRampSync.constprop.0+0x64>
 8021124:	0802100d 	.word	0x0802100d
 8021128:	000186a0 	.word	0x000186a0
 802112c:	000f423f 	.word	0x000f423f

08021130 <Argus_Dev_BglMeasurement>:
 8021130:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8021132:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021136:	f043 0310 	orr.w	r3, r3, #16
 802113a:	2500      	movs	r5, #0
 802113c:	800d      	strh	r5, [r1, #0]
 802113e:	6783      	str	r3, [r0, #120]	@ 0x78
 8021140:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8021142:	f890 904e 	ldrb.w	r9, [r0, #78]	@ 0x4e
 8021146:	f880 509c 	strb.w	r5, [r0, #156]	@ 0x9c
 802114a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 802114e:	6783      	str	r3, [r0, #120]	@ 0x78
 8021150:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8021152:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8021156:	6783      	str	r3, [r0, #120]	@ 0x78
 8021158:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 802115a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 802115e:	6783      	str	r3, [r0, #120]	@ 0x78
 8021160:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8021162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021166:	6783      	str	r3, [r0, #120]	@ 0x78
 8021168:	f8d0 3047 	ldr.w	r3, [r0, #71]	@ 0x47
 802116c:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
 8021170:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8021174:	f023 0303 	bic.w	r3, r3, #3
 8021178:	f880 308a 	strb.w	r3, [r0, #138]	@ 0x8a
 802117c:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 802117e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021182:	6783      	str	r3, [r0, #120]	@ 0x78
 8021184:	f890 3056 	ldrb.w	r3, [r0, #86]	@ 0x56
 8021188:	f023 0301 	bic.w	r3, r3, #1
 802118c:	f880 309a 	strb.w	r3, [r0, #154]	@ 0x9a
 8021190:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 8021192:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
 8021196:	f8b0 3054 	ldrh.w	r3, [r0, #84]	@ 0x54
 802119a:	f8a0 3098 	strh.w	r3, [r0, #152]	@ 0x98
 802119e:	4b96      	ldr	r3, [pc, #600]	@ (80213f8 <Argus_Dev_BglMeasurement+0x2c8>)
 80211a0:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
 80211a4:	2301      	movs	r3, #1
 80211a6:	f880 308b 	strb.w	r3, [r0, #139]	@ 0x8b
 80211aa:	2308      	movs	r3, #8
 80211ac:	f880 3088 	strb.w	r3, [r0, #136]	@ 0x88
 80211b0:	231e      	movs	r3, #30
 80211b2:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
 80211b6:	f64f 7322 	movw	r3, #65314	@ 0xff22
 80211ba:	f8a0 3094 	strh.w	r3, [r0, #148]	@ 0x94
 80211be:	460e      	mov	r6, r1
 80211c0:	230e      	movs	r3, #14
 80211c2:	21ff      	movs	r1, #255	@ 0xff
 80211c4:	f880 1096 	strb.w	r1, [r0, #150]	@ 0x96
 80211c8:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
 80211cc:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80211ce:	f880 509d 	strb.w	r5, [r0, #157]	@ 0x9d
 80211d2:	f3c3 6303 	ubfx	r3, r3, #24, #4
 80211d6:	f880 309e 	strb.w	r3, [r0, #158]	@ 0x9e
 80211da:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 80211dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80211e0:	6783      	str	r3, [r0, #120]	@ 0x78
 80211e2:	f8b0 3069 	ldrh.w	r3, [r0, #105]	@ 0x69
 80211e6:	f8a0 309f 	strh.w	r3, [r0, #159]	@ 0x9f
 80211ea:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 80211ee:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80211f2:	f043 0301 	orr.w	r3, r3, #1
 80211f6:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 80211fa:	f890 306b 	ldrb.w	r3, [r0, #107]	@ 0x6b
 80211fe:	f003 03e1 	and.w	r3, r3, #225	@ 0xe1
 8021202:	f063 031f 	orn	r3, r3, #31
 8021206:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
 802120a:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 802120c:	f043 0308 	orr.w	r3, r3, #8
 8021210:	6783      	str	r3, [r0, #120]	@ 0x78
 8021212:	230c      	movs	r3, #12
 8021214:	f880 309b 	strb.w	r3, [r0, #155]	@ 0x9b
 8021218:	231c      	movs	r3, #28
 802121a:	4604      	mov	r4, r0
 802121c:	b083      	sub	sp, #12
 802121e:	f100 0788 	add.w	r7, r0, #136	@ 0x88
 8021222:	f880 309f 	strb.w	r3, [r0, #159]	@ 0x9f
 8021226:	2221      	movs	r2, #33	@ 0x21
 8021228:	30a2      	adds	r0, #162	@ 0xa2
 802122a:	f008 fa92 	bl	8029752 <memset>
 802122e:	e9cd 5500 	strd	r5, r5, [sp]
 8021232:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8021234:	f043 0320 	orr.w	r3, r3, #32
 8021238:	67a3      	str	r3, [r4, #120]	@ 0x78
 802123a:	f029 033f 	bic.w	r3, r9, #63	@ 0x3f
 802123e:	f043 030f 	orr.w	r3, r3, #15
 8021242:	f884 304e 	strb.w	r3, [r4, #78]	@ 0x4e
 8021246:	2306      	movs	r3, #6
 8021248:	f884 30a2 	strb.w	r3, [r4, #162]	@ 0xa2
 802124c:	f504 7890 	add.w	r8, r4, #288	@ 0x120
 8021250:	f104 03c3 	add.w	r3, r4, #195	@ 0xc3
 8021254:	1bdb      	subs	r3, r3, r7
 8021256:	462a      	mov	r2, r5
 8021258:	4639      	mov	r1, r7
 802125a:	4640      	mov	r0, r8
 802125c:	f007 f806 	bl	802826c <ADS_Transfer>
 8021260:	2800      	cmp	r0, #0
 8021262:	f2c0 80ba 	blt.w	80213da <Argus_Dev_BglMeasurement+0x2aa>
 8021266:	2164      	movs	r1, #100	@ 0x64
 8021268:	4640      	mov	r0, r8
 802126a:	f006 fee3 	bl	8028034 <ADS_AwaitIdle>
 802126e:	2800      	cmp	r0, #0
 8021270:	f2c0 80b3 	blt.w	80213da <Argus_Dev_BglMeasurement+0x2aa>
 8021274:	4620      	mov	r0, r4
 8021276:	f7ff fef5 	bl	8021064 <ChargePumpRampSync.constprop.0>
 802127a:	2800      	cmp	r0, #0
 802127c:	f2c0 80ad 	blt.w	80213da <Argus_Dev_BglMeasurement+0x2aa>
 8021280:	495e      	ldr	r1, [pc, #376]	@ (80213fc <Argus_Dev_BglMeasurement+0x2cc>)
 8021282:	9500      	str	r5, [sp, #0]
 8021284:	462b      	mov	r3, r5
 8021286:	462a      	mov	r2, r5
 8021288:	4640      	mov	r0, r8
 802128a:	f007 f859 	bl	8028340 <ADS_Start>
 802128e:	2800      	cmp	r0, #0
 8021290:	f2c0 80a3 	blt.w	80213da <Argus_Dev_BglMeasurement+0x2aa>
 8021294:	2164      	movs	r1, #100	@ 0x64
 8021296:	4640      	mov	r0, r8
 8021298:	f006 fecc 	bl	8028034 <ADS_AwaitIdle>
 802129c:	2800      	cmp	r0, #0
 802129e:	f2c0 809c 	blt.w	80213da <Argus_Dev_BglMeasurement+0x2aa>
 80212a2:	9500      	str	r5, [sp, #0]
 80212a4:	462b      	mov	r3, r5
 80212a6:	2221      	movs	r2, #33	@ 0x21
 80212a8:	4639      	mov	r1, r7
 80212aa:	4640      	mov	r0, r8
 80212ac:	f007 f8c4 	bl	8028438 <ADS_ReadData>
 80212b0:	2800      	cmp	r0, #0
 80212b2:	f2c0 8092 	blt.w	80213da <Argus_Dev_BglMeasurement+0x2aa>
 80212b6:	2164      	movs	r1, #100	@ 0x64
 80212b8:	4640      	mov	r0, r8
 80212ba:	f006 febb 	bl	8028034 <ADS_AwaitIdle>
 80212be:	2800      	cmp	r0, #0
 80212c0:	f2c0 808b 	blt.w	80213da <Argus_Dev_BglMeasurement+0x2aa>
 80212c4:	46a3      	mov	fp, r4
 80212c6:	f104 0a63 	add.w	sl, r4, #99	@ 0x63
 80212ca:	4622      	mov	r2, r4
 80212cc:	f892 308a 	ldrb.w	r3, [r2, #138]	@ 0x8a
 80212d0:	f892 1089 	ldrb.w	r1, [r2, #137]	@ 0x89
 80212d4:	021b      	lsls	r3, r3, #8
 80212d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80212da:	f892 108b 	ldrb.w	r1, [r2, #139]	@ 0x8b
 80212de:	3203      	adds	r2, #3
 80212e0:	430b      	orrs	r3, r1
 80212e2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80212e6:	4552      	cmp	r2, sl
 80212e8:	eba5 0503 	sub.w	r5, r5, r3
 80212ec:	d1ee      	bne.n	80212cc <Argus_Dev_BglMeasurement+0x19c>
 80212ee:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80212f0:	f043 0308 	orr.w	r3, r3, #8
 80212f4:	2200      	movs	r2, #0
 80212f6:	67a3      	str	r3, [r4, #120]	@ 0x78
 80212f8:	f04f 33ff 	mov.w	r3, #4294967295
 80212fc:	f8c4 2099 	str.w	r2, [r4, #153]	@ 0x99
 8021300:	f8c4 209d 	str.w	r2, [r4, #157]	@ 0x9d
 8021304:	f8c4 20a1 	str.w	r2, [r4, #161]	@ 0xa1
 8021308:	f8c4 20a5 	str.w	r2, [r4, #165]	@ 0xa5
 802130c:	e9cd 2200 	strd	r2, r2, [sp]
 8021310:	f8c4 3089 	str.w	r3, [r4, #137]	@ 0x89
 8021314:	f8c4 308d 	str.w	r3, [r4, #141]	@ 0x8d
 8021318:	f8c4 3091 	str.w	r3, [r4, #145]	@ 0x91
 802131c:	f8c4 3095 	str.w	r3, [r4, #149]	@ 0x95
 8021320:	2306      	movs	r3, #6
 8021322:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
 8021326:	f104 03a9 	add.w	r3, r4, #169	@ 0xa9
 802132a:	1bdb      	subs	r3, r3, r7
 802132c:	4639      	mov	r1, r7
 802132e:	4640      	mov	r0, r8
 8021330:	f006 ff9c 	bl	802826c <ADS_Transfer>
 8021334:	2800      	cmp	r0, #0
 8021336:	db50      	blt.n	80213da <Argus_Dev_BglMeasurement+0x2aa>
 8021338:	2164      	movs	r1, #100	@ 0x64
 802133a:	4640      	mov	r0, r8
 802133c:	f006 fe7a 	bl	8028034 <ADS_AwaitIdle>
 8021340:	2800      	cmp	r0, #0
 8021342:	f04f 0200 	mov.w	r2, #0
 8021346:	db48      	blt.n	80213da <Argus_Dev_BglMeasurement+0x2aa>
 8021348:	492c      	ldr	r1, [pc, #176]	@ (80213fc <Argus_Dev_BglMeasurement+0x2cc>)
 802134a:	9200      	str	r2, [sp, #0]
 802134c:	4613      	mov	r3, r2
 802134e:	4640      	mov	r0, r8
 8021350:	f006 fff6 	bl	8028340 <ADS_Start>
 8021354:	2800      	cmp	r0, #0
 8021356:	db40      	blt.n	80213da <Argus_Dev_BglMeasurement+0x2aa>
 8021358:	2164      	movs	r1, #100	@ 0x64
 802135a:	4640      	mov	r0, r8
 802135c:	f006 fe6a 	bl	8028034 <ADS_AwaitIdle>
 8021360:	2800      	cmp	r0, #0
 8021362:	f04f 0200 	mov.w	r2, #0
 8021366:	db38      	blt.n	80213da <Argus_Dev_BglMeasurement+0x2aa>
 8021368:	9200      	str	r2, [sp, #0]
 802136a:	4613      	mov	r3, r2
 802136c:	4639      	mov	r1, r7
 802136e:	2221      	movs	r2, #33	@ 0x21
 8021370:	4640      	mov	r0, r8
 8021372:	f007 f861 	bl	8028438 <ADS_ReadData>
 8021376:	2800      	cmp	r0, #0
 8021378:	db2f      	blt.n	80213da <Argus_Dev_BglMeasurement+0x2aa>
 802137a:	4640      	mov	r0, r8
 802137c:	2164      	movs	r1, #100	@ 0x64
 802137e:	f006 fe59 	bl	8028034 <ADS_AwaitIdle>
 8021382:	2800      	cmp	r0, #0
 8021384:	db29      	blt.n	80213da <Argus_Dev_BglMeasurement+0x2aa>
 8021386:	f89b 308a 	ldrb.w	r3, [fp, #138]	@ 0x8a
 802138a:	f89b 2089 	ldrb.w	r2, [fp, #137]	@ 0x89
 802138e:	021b      	lsls	r3, r3, #8
 8021390:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021394:	f89b 208b 	ldrb.w	r2, [fp, #139]	@ 0x8b
 8021398:	f10b 0b03 	add.w	fp, fp, #3
 802139c:	4313      	orrs	r3, r2
 802139e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80213a2:	45d3      	cmp	fp, sl
 80213a4:	441d      	add	r5, r3
 80213a6:	d1ee      	bne.n	8021386 <Argus_Dev_BglMeasurement+0x256>
 80213a8:	2d00      	cmp	r5, #0
 80213aa:	db23      	blt.n	80213f4 <Argus_Dev_BglMeasurement+0x2c4>
 80213ac:	012b      	lsls	r3, r5, #4
 80213ae:	f44f 7204 	mov.w	r2, #528	@ 0x210
 80213b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80213b6:	b29b      	uxth	r3, r3
 80213b8:	8033      	strh	r3, [r6, #0]
 80213ba:	f894 304e 	ldrb.w	r3, [r4, #78]	@ 0x4e
 80213be:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80213c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80213c4:	f009 093f 	and.w	r9, r9, #63	@ 0x3f
 80213c8:	f042 0220 	orr.w	r2, r2, #32
 80213cc:	ea43 0909 	orr.w	r9, r3, r9
 80213d0:	67a2      	str	r2, [r4, #120]	@ 0x78
 80213d2:	f884 904e 	strb.w	r9, [r4, #78]	@ 0x4e
 80213d6:	2000      	movs	r0, #0
 80213d8:	e009      	b.n	80213ee <Argus_Dev_BglMeasurement+0x2be>
 80213da:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 80213dc:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 80213e0:	4a07      	ldr	r2, [pc, #28]	@ (8021400 <Argus_Dev_BglMeasurement+0x2d0>)
 80213e2:	f043 0302 	orr.w	r3, r3, #2
 80213e6:	430a      	orrs	r2, r1
 80213e8:	67a2      	str	r2, [r4, #120]	@ 0x78
 80213ea:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 80213ee:	b003      	add	sp, #12
 80213f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80213f4:	2300      	movs	r3, #0
 80213f6:	e7df      	b.n	80213b8 <Argus_Dev_BglMeasurement+0x288>
 80213f8:	ffff0120 	.word	0xffff0120
 80213fc:	000186a0 	.word	0x000186a0
 8021400:	0003dffe 	.word	0x0003dffe

08021404 <Argus_Dev_VsubMeasurement>:
 8021404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021408:	b08b      	sub	sp, #44	@ 0x2c
 802140a:	460d      	mov	r5, r1
 802140c:	9105      	str	r1, [sp, #20]
 802140e:	2100      	movs	r1, #0
 8021410:	8029      	strh	r1, [r5, #0]
 8021412:	f890 104e 	ldrb.w	r1, [r0, #78]	@ 0x4e
 8021416:	4699      	mov	r9, r3
 8021418:	f001 033f 	and.w	r3, r1, #63	@ 0x3f
 802141c:	4293      	cmp	r3, r2
 802141e:	4604      	mov	r4, r0
 8021420:	9304      	str	r3, [sp, #16]
 8021422:	d00a      	beq.n	802143a <Argus_Dev_VsubMeasurement+0x36>
 8021424:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8021426:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 802142a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 802142e:	430a      	orrs	r2, r1
 8021430:	f043 0320 	orr.w	r3, r3, #32
 8021434:	f880 204e 	strb.w	r2, [r0, #78]	@ 0x4e
 8021438:	6783      	str	r3, [r0, #120]	@ 0x78
 802143a:	4620      	mov	r0, r4
 802143c:	f7ff fe12 	bl	8021064 <ChargePumpRampSync.constprop.0>
 8021440:	2800      	cmp	r0, #0
 8021442:	f2c0 8181 	blt.w	8021748 <Argus_Dev_VsubMeasurement+0x344>
 8021446:	f1b9 0f00 	cmp.w	r9, #0
 802144a:	f000 809b 	beq.w	8021584 <Argus_Dev_VsubMeasurement+0x180>
 802144e:	2700      	movs	r7, #0
 8021450:	f8d4 211c 	ldr.w	r2, [r4, #284]	@ 0x11c
 8021454:	f8df b3d0 	ldr.w	fp, [pc, #976]	@ 8021828 <Argus_Dev_VsubMeasurement+0x424>
 8021458:	46b8      	mov	r8, r7
 802145a:	f104 0588 	add.w	r5, r4, #136	@ 0x88
 802145e:	f104 0a59 	add.w	sl, r4, #89	@ 0x59
 8021462:	f8b2 00a0 	ldrh.w	r0, [r2, #160]	@ 0xa0
 8021466:	2800      	cmp	r0, #0
 8021468:	f040 80a0 	bne.w	80215ac <Argus_Dev_VsubMeasurement+0x1a8>
 802146c:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 8021470:	b13b      	cbz	r3, 8021482 <Argus_Dev_VsubMeasurement+0x7e>
 8021472:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 8021476:	f8c4 0104 	str.w	r0, [r4, #260]	@ 0x104
 802147a:	4798      	blx	r3
 802147c:	2800      	cmp	r0, #0
 802147e:	f2c0 8163 	blt.w	8021748 <Argus_Dev_VsubMeasurement+0x344>
 8021482:	f504 7690 	add.w	r6, r4, #288	@ 0x120
 8021486:	2164      	movs	r1, #100	@ 0x64
 8021488:	4630      	mov	r0, r6
 802148a:	f006 fdd3 	bl	8028034 <ADS_AwaitIdle>
 802148e:	2800      	cmp	r0, #0
 8021490:	f2c0 815a 	blt.w	8021748 <Argus_Dev_VsubMeasurement+0x344>
 8021494:	2300      	movs	r3, #0
 8021496:	9300      	str	r3, [sp, #0]
 8021498:	2205      	movs	r2, #5
 802149a:	4629      	mov	r1, r5
 802149c:	4630      	mov	r0, r6
 802149e:	f006 ffcb 	bl	8028438 <ADS_ReadData>
 80214a2:	2800      	cmp	r0, #0
 80214a4:	f2c0 8150 	blt.w	8021748 <Argus_Dev_VsubMeasurement+0x344>
 80214a8:	2164      	movs	r1, #100	@ 0x64
 80214aa:	4630      	mov	r0, r6
 80214ac:	f006 fdc2 	bl	8028034 <ADS_AwaitIdle>
 80214b0:	2800      	cmp	r0, #0
 80214b2:	f2c0 8149 	blt.w	8021748 <Argus_Dev_VsubMeasurement+0x344>
 80214b6:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
 80214ba:	4629      	mov	r1, r5
 80214bc:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	@ 0xa0
 80214c0:	a806      	add	r0, sp, #24
 80214c2:	f7f7 fdd9 	bl	8019078 <Argus_Eval_ApplyAuxEvaluation>
 80214c6:	f8d4 31c4 	ldr.w	r3, [r4, #452]	@ 0x1c4
 80214ca:	f993 2000 	ldrsb.w	r2, [r3]
 80214ce:	b302      	cbz	r2, 8021512 <Argus_Dev_VsubMeasurement+0x10e>
 80214d0:	f894 316f 	ldrb.w	r3, [r4, #367]	@ 0x16f
 80214d4:	f894 016f 	ldrb.w	r0, [r4, #367]	@ 0x16f
 80214d8:	f894 216d 	ldrb.w	r2, [r4, #365]	@ 0x16d
 80214dc:	f003 0301 	and.w	r3, r3, #1
 80214e0:	2b00      	cmp	r3, #0
 80214e2:	f894 316c 	ldrb.w	r3, [r4, #364]	@ 0x16c
 80214e6:	ea4f 3282 	mov.w	r2, r2, lsl #14
 80214ea:	ea4f 3343 	mov.w	r3, r3, lsl #13
 80214ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80214f2:	b292      	uxth	r2, r2
 80214f4:	ea42 0203 	orr.w	r2, r2, r3
 80214f8:	bf19      	ittee	ne
 80214fa:	f44f 3140 	movne.w	r1, #196608	@ 0x30000
 80214fe:	f44f 3380 	movne.w	r3, #65536	@ 0x10000
 8021502:	2300      	moveq	r3, #0
 8021504:	f44f 3100 	moveq.w	r1, #131072	@ 0x20000
 8021508:	f010 0f02 	tst.w	r0, #2
 802150c:	bf18      	it	ne
 802150e:	460b      	movne	r3, r1
 8021510:	431a      	orrs	r2, r3
 8021512:	a906      	add	r1, sp, #24
 8021514:	f8d4 01d4 	ldr.w	r0, [r4, #468]	@ 0x1d4
 8021518:	f003 f92a 	bl	8024770 <Argus_Cal_ApplyAuxCalibration>
 802151c:	f8d4 211c 	ldr.w	r2, [r4, #284]	@ 0x11c
 8021520:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8021524:	f8b2 30c2 	ldrh.w	r3, [r2, #194]	@ 0xc2
 8021528:	4299      	cmp	r1, r3
 802152a:	f200 8129 	bhi.w	8021780 <Argus_Dev_VsubMeasurement+0x37c>
 802152e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8021532:	2f00      	cmp	r7, #0
 8021534:	f040 8115 	bne.w	8021762 <Argus_Dev_VsubMeasurement+0x35e>
 8021538:	eba3 0108 	sub.w	r1, r3, r8
 802153c:	2920      	cmp	r1, #32
 802153e:	f300 8113 	bgt.w	8021768 <Argus_Dev_VsubMeasurement+0x364>
 8021542:	eba8 0703 	sub.w	r7, r8, r3
 8021546:	2f20      	cmp	r7, #32
 8021548:	bfcc      	ite	gt
 802154a:	2700      	movgt	r7, #0
 802154c:	2701      	movle	r7, #1
 802154e:	4698      	mov	r8, r3
 8021550:	454f      	cmp	r7, r9
 8021552:	d386      	bcc.n	8021462 <Argus_Dev_VsubMeasurement+0x5e>
 8021554:	ea5f 4909 	movs.w	r9, r9, lsl #16
 8021558:	4641      	mov	r1, r8
 802155a:	f100 814a 	bmi.w	80217f2 <Argus_Dev_VsubMeasurement+0x3ee>
 802155e:	45c8      	cmp	r8, r9
 8021560:	464a      	mov	r2, r9
 8021562:	f240 813d 	bls.w	80217e0 <Argus_Dev_VsubMeasurement+0x3dc>
 8021566:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 802156a:	4610      	mov	r0, r2
 802156c:	0052      	lsls	r2, r2, #1
 802156e:	4590      	cmp	r8, r2
 8021570:	461d      	mov	r5, r3
 8021572:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8021576:	d8f8      	bhi.n	802156a <Argus_Dev_VsubMeasurement+0x166>
 8021578:	2b00      	cmp	r3, #0
 802157a:	f040 8109 	bne.w	8021790 <Argus_Dev_VsubMeasurement+0x38c>
 802157e:	ea98 0f09 	teq	r8, r9
 8021582:	d401      	bmi.n	8021588 <Argus_Dev_VsubMeasurement+0x184>
 8021584:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8021588:	9a05      	ldr	r2, [sp, #20]
 802158a:	9904      	ldr	r1, [sp, #16]
 802158c:	8013      	strh	r3, [r2, #0]
 802158e:	f894 304e 	ldrb.w	r3, [r4, #78]	@ 0x4e
 8021592:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8021594:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8021598:	f042 0220 	orr.w	r2, r2, #32
 802159c:	430b      	orrs	r3, r1
 802159e:	2000      	movs	r0, #0
 80215a0:	67a2      	str	r2, [r4, #120]	@ 0x78
 80215a2:	f884 304e 	strb.w	r3, [r4, #78]	@ 0x4e
 80215a6:	b00b      	add	sp, #44	@ 0x2c
 80215a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80215ac:	f8ba 3000 	ldrh.w	r3, [sl]
 80215b0:	f89a 1002 	ldrb.w	r1, [sl, #2]
 80215b4:	802b      	strh	r3, [r5, #0]
 80215b6:	2312      	movs	r3, #18
 80215b8:	70a9      	strb	r1, [r5, #2]
 80215ba:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
 80215be:	f892 109e 	ldrb.w	r1, [r2, #158]	@ 0x9e
 80215c2:	f894 308a 	ldrb.w	r3, [r4, #138]	@ 0x8a
 80215c6:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 80215c8:	f001 0107 	and.w	r1, r1, #7
 80215cc:	f023 0307 	bic.w	r3, r3, #7
 80215d0:	430b      	orrs	r3, r1
 80215d2:	b25b      	sxtb	r3, r3
 80215d4:	f884 308a 	strb.w	r3, [r4, #138]	@ 0x8a
 80215d8:	f892 109f 	ldrb.w	r1, [r2, #159]	@ 0x9f
 80215dc:	00c9      	lsls	r1, r1, #3
 80215de:	f023 0318 	bic.w	r3, r3, #24
 80215e2:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 80215e6:	f001 0118 	and.w	r1, r1, #24
 80215ea:	430b      	orrs	r3, r1
 80215ec:	67a0      	str	r0, [r4, #120]	@ 0x78
 80215ee:	f884 308a 	strb.w	r3, [r4, #138]	@ 0x8a
 80215f2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80215f4:	069e      	lsls	r6, r3, #26
 80215f6:	d404      	bmi.n	8021602 <Argus_Dev_VsubMeasurement+0x1fe>
 80215f8:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 80215fc:	09d9      	lsrs	r1, r3, #7
 80215fe:	f040 80b5 	bne.w	802176c <Argus_Dev_VsubMeasurement+0x368>
 8021602:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8021604:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 8021608:	210a      	movs	r1, #10
 802160a:	f884 108b 	strb.w	r1, [r4, #139]	@ 0x8b
 802160e:	f892 109c 	ldrb.w	r1, [r2, #156]	@ 0x9c
 8021612:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021616:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 802161a:	b25b      	sxtb	r3, r3
 802161c:	f884 308c 	strb.w	r3, [r4, #140]	@ 0x8c
 8021620:	f892 209d 	ldrb.w	r2, [r2, #157]	@ 0x9d
 8021624:	0112      	lsls	r2, r2, #4
 8021626:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 802162a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 802162e:	4313      	orrs	r3, r2
 8021630:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8021632:	f884 308c 	strb.w	r3, [r4, #140]	@ 0x8c
 8021636:	f042 0220 	orr.w	r2, r2, #32
 802163a:	67a2      	str	r2, [r4, #120]	@ 0x78
 802163c:	f104 0390 	add.w	r3, r4, #144	@ 0x90
 8021640:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8021642:	0410      	lsls	r0, r2, #16
 8021644:	d40a      	bmi.n	802165c <Argus_Dev_VsubMeasurement+0x258>
 8021646:	f894 206e 	ldrb.w	r2, [r4, #110]	@ 0x6e
 802164a:	f894 106d 	ldrb.w	r1, [r4, #109]	@ 0x6d
 802164e:	0212      	lsls	r2, r2, #8
 8021650:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8021654:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8021658:	430a      	orrs	r2, r1
 802165a:	d006      	beq.n	802166a <Argus_Dev_VsubMeasurement+0x266>
 802165c:	221e      	movs	r2, #30
 802165e:	f843 2b04 	str.w	r2, [r3], #4
 8021662:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8021664:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8021668:	67a2      	str	r2, [r4, #120]	@ 0x78
 802166a:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 802166c:	03d1      	lsls	r1, r2, #15
 802166e:	d40c      	bmi.n	802168a <Argus_Dev_VsubMeasurement+0x286>
 8021670:	f894 2072 	ldrb.w	r2, [r4, #114]	@ 0x72
 8021674:	f894 1071 	ldrb.w	r1, [r4, #113]	@ 0x71
 8021678:	0212      	lsls	r2, r2, #8
 802167a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 802167e:	f894 1073 	ldrb.w	r1, [r4, #115]	@ 0x73
 8021682:	430a      	orrs	r2, r1
 8021684:	f5b2 0f66 	cmp.w	r2, #15073280	@ 0xe60000
 8021688:	d007      	beq.n	802169a <Argus_Dev_VsubMeasurement+0x296>
 802168a:	f24e 6220 	movw	r2, #58912	@ 0xe620
 802168e:	f843 2b04 	str.w	r2, [r3], #4
 8021692:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8021694:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8021698:	67a2      	str	r2, [r4, #120]	@ 0x78
 802169a:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 802169c:	0392      	lsls	r2, r2, #14
 802169e:	d402      	bmi.n	80216a6 <Argus_Dev_VsubMeasurement+0x2a2>
 80216a0:	f8b4 2075 	ldrh.w	r2, [r4, #117]	@ 0x75
 80216a4:	b152      	cbz	r2, 80216bc <Argus_Dev_VsubMeasurement+0x2b8>
 80216a6:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 80216a8:	601a      	str	r2, [r3, #0]
 80216aa:	2222      	movs	r2, #34	@ 0x22
 80216ac:	801a      	strh	r2, [r3, #0]
 80216ae:	2200      	movs	r2, #0
 80216b0:	709a      	strb	r2, [r3, #2]
 80216b2:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80216b4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80216b8:	3304      	adds	r3, #4
 80216ba:	67a2      	str	r2, [r4, #120]	@ 0x78
 80216bc:	2600      	movs	r6, #0
 80216be:	2208      	movs	r2, #8
 80216c0:	f8a3 6001 	strh.w	r6, [r3, #1]
 80216c4:	70de      	strb	r6, [r3, #3]
 80216c6:	701a      	strb	r2, [r3, #0]
 80216c8:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80216ca:	f894 106b 	ldrb.w	r1, [r4, #107]	@ 0x6b
 80216ce:	f042 0210 	orr.w	r2, r2, #16
 80216d2:	67a2      	str	r2, [r4, #120]	@ 0x78
 80216d4:	f8b4 2069 	ldrh.w	r2, [r4, #105]	@ 0x69
 80216d8:	809a      	strh	r2, [r3, #4]
 80216da:	f001 01e1 	and.w	r1, r1, #225	@ 0xe1
 80216de:	221c      	movs	r2, #28
 80216e0:	7199      	strb	r1, [r3, #6]
 80216e2:	711a      	strb	r2, [r3, #4]
 80216e4:	f8d4 211c 	ldr.w	r2, [r4, #284]	@ 0x11c
 80216e8:	7958      	ldrb	r0, [r3, #5]
 80216ea:	f8b2 20a0 	ldrh.w	r2, [r2, #160]	@ 0xa0
 80216ee:	3a01      	subs	r2, #1
 80216f0:	f020 007f 	bic.w	r0, r0, #127	@ 0x7f
 80216f4:	f3c2 02c6 	ubfx	r2, r2, #3, #7
 80216f8:	4302      	orrs	r2, r0
 80216fa:	b252      	sxtb	r2, r2
 80216fc:	715a      	strb	r2, [r3, #5]
 80216fe:	f8d4 011c 	ldr.w	r0, [r4, #284]	@ 0x11c
 8021702:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	@ 0xa0
 8021706:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 802170a:	715a      	strb	r2, [r3, #5]
 802170c:	f001 011f 	and.w	r1, r1, #31
 8021710:	1e42      	subs	r2, r0, #1
 8021712:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
 8021716:	9602      	str	r6, [sp, #8]
 8021718:	7199      	strb	r1, [r3, #6]
 802171a:	9403      	str	r4, [sp, #12]
 802171c:	f8cd b004 	str.w	fp, [sp, #4]
 8021720:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8021722:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8021726:	67a2      	str	r2, [r4, #120]	@ 0x78
 8021728:	f8d4 211c 	ldr.w	r2, [r4, #284]	@ 0x11c
 802172c:	3307      	adds	r3, #7
 802172e:	f8d2 20a4 	ldr.w	r2, [r2, #164]	@ 0xa4
 8021732:	9200      	str	r2, [sp, #0]
 8021734:	1b5b      	subs	r3, r3, r5
 8021736:	462a      	mov	r2, r5
 8021738:	4629      	mov	r1, r5
 802173a:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 802173e:	f006 fd15 	bl	802816c <ADS_TransferWithStart>
 8021742:	2800      	cmp	r0, #0
 8021744:	f6bf ae9d 	bge.w	8021482 <Argus_Dev_VsubMeasurement+0x7e>
 8021748:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 802174a:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 802174e:	4a34      	ldr	r2, [pc, #208]	@ (8021820 <Argus_Dev_VsubMeasurement+0x41c>)
 8021750:	f043 0302 	orr.w	r3, r3, #2
 8021754:	430a      	orrs	r2, r1
 8021756:	67a2      	str	r2, [r4, #120]	@ 0x78
 8021758:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 802175c:	b00b      	add	sp, #44	@ 0x2c
 802175e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021762:	3701      	adds	r7, #1
 8021764:	4498      	add	r8, r3
 8021766:	e6f3      	b.n	8021550 <Argus_Dev_VsubMeasurement+0x14c>
 8021768:	4698      	mov	r8, r3
 802176a:	e67a      	b.n	8021462 <Argus_Dev_VsubMeasurement+0x5e>
 802176c:	f892 109d 	ldrb.w	r1, [r2, #157]	@ 0x9d
 8021770:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8021774:	4299      	cmp	r1, r3
 8021776:	f47f af44 	bne.w	8021602 <Argus_Dev_VsubMeasurement+0x1fe>
 802177a:	f104 038b 	add.w	r3, r4, #139	@ 0x8b
 802177e:	e75f      	b.n	8021640 <Argus_Dev_VsubMeasurement+0x23c>
 8021780:	4828      	ldr	r0, [pc, #160]	@ (8021824 <Argus_Dev_VsubMeasurement+0x420>)
 8021782:	f7f1 fc07 	bl	8012f94 <print>
 8021786:	f06f 006e 	mvn.w	r0, #110	@ 0x6e
 802178a:	b00b      	add	sp, #44	@ 0x2c
 802178c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021790:	2a00      	cmp	r2, #0
 8021792:	db20      	blt.n	80217d6 <Argus_Dev_VsubMeasurement+0x3d2>
 8021794:	f1b8 0f00 	cmp.w	r8, #0
 8021798:	d035      	beq.n	8021806 <Argus_Dev_VsubMeasurement+0x402>
 802179a:	2000      	movs	r0, #0
 802179c:	e000      	b.n	80217a0 <Argus_Dev_VsubMeasurement+0x39c>
 802179e:	b151      	cbz	r1, 80217b6 <Argus_Dev_VsubMeasurement+0x3b2>
 80217a0:	428a      	cmp	r2, r1
 80217a2:	bf9c      	itt	ls
 80217a4:	1a89      	subls	r1, r1, r2
 80217a6:	4318      	orrls	r0, r3
 80217a8:	085b      	lsrs	r3, r3, #1
 80217aa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80217ae:	d1f6      	bne.n	802179e <Argus_Dev_VsubMeasurement+0x39a>
 80217b0:	4291      	cmp	r1, r2
 80217b2:	bf28      	it	cs
 80217b4:	3001      	addcs	r0, #1
 80217b6:	ea98 0f09 	teq	r8, r9
 80217ba:	d428      	bmi.n	802180e <Argus_Dev_VsubMeasurement+0x40a>
 80217bc:	f1b0 0800 	subs.w	r8, r0, #0
 80217c0:	f6ff aee0 	blt.w	8021584 <Argus_Dev_VsubMeasurement+0x180>
 80217c4:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80217c8:	4598      	cmp	r8, r3
 80217ca:	f73f aedb 	bgt.w	8021584 <Argus_Dev_VsubMeasurement+0x180>
 80217ce:	ea28 73e8 	bic.w	r3, r8, r8, asr #31
 80217d2:	b29b      	uxth	r3, r3
 80217d4:	e6d8      	b.n	8021588 <Argus_Dev_VsubMeasurement+0x184>
 80217d6:	f035 4300 	bics.w	r3, r5, #2147483648	@ 0x80000000
 80217da:	d007      	beq.n	80217ec <Argus_Dev_VsubMeasurement+0x3e8>
 80217dc:	4602      	mov	r2, r0
 80217de:	e7d9      	b.n	8021794 <Argus_Dev_VsubMeasurement+0x390>
 80217e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80217e4:	f1b8 0f00 	cmp.w	r8, #0
 80217e8:	d1d7      	bne.n	802179a <Argus_Dev_VsubMeasurement+0x396>
 80217ea:	e7f0      	b.n	80217ce <Argus_Dev_VsubMeasurement+0x3ca>
 80217ec:	4602      	mov	r2, r0
 80217ee:	4618      	mov	r0, r3
 80217f0:	e7de      	b.n	80217b0 <Argus_Dev_VsubMeasurement+0x3ac>
 80217f2:	f1c9 0200 	rsb	r2, r9, #0
 80217f6:	4590      	cmp	r8, r2
 80217f8:	f63f aeb5 	bhi.w	8021566 <Argus_Dev_VsubMeasurement+0x162>
 80217fc:	2a00      	cmp	r2, #0
 80217fe:	db09      	blt.n	8021814 <Argus_Dev_VsubMeasurement+0x410>
 8021800:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8021804:	e7c6      	b.n	8021794 <Argus_Dev_VsubMeasurement+0x390>
 8021806:	f1b9 0f00 	cmp.w	r9, #0
 802180a:	dae0      	bge.n	80217ce <Argus_Dev_VsubMeasurement+0x3ca>
 802180c:	4640      	mov	r0, r8
 802180e:	f1c0 0800 	rsb	r8, r0, #0
 8021812:	e7d7      	b.n	80217c4 <Argus_Dev_VsubMeasurement+0x3c0>
 8021814:	0850      	lsrs	r0, r2, #1
 8021816:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 802181a:	4602      	mov	r2, r0
 802181c:	e7ba      	b.n	8021794 <Argus_Dev_VsubMeasurement+0x390>
 802181e:	bf00      	nop
 8021820:	0003dffe 	.word	0x0003dffe
 8021824:	0802ee5c 	.word	0x0802ee5c
 8021828:	0802102d 	.word	0x0802102d

0802182c <Argus_Dev_StartAuxMeasurement>:
 802182c:	b570      	push	{r4, r5, r6, lr}
 802182e:	f8d0 511c 	ldr.w	r5, [r0, #284]	@ 0x11c
 8021832:	4604      	mov	r4, r0
 8021834:	f8b5 00a0 	ldrh.w	r0, [r5, #160]	@ 0xa0
 8021838:	b084      	sub	sp, #16
 802183a:	e9c4 1241 	strd	r1, r2, [r4, #260]	@ 0x104
 802183e:	b950      	cbnz	r0, 8021856 <Argus_Dev_StartAuxMeasurement+0x2a>
 8021840:	460b      	mov	r3, r1
 8021842:	2900      	cmp	r1, #0
 8021844:	f000 80db 	beq.w	80219fe <Argus_Dev_StartAuxMeasurement+0x1d2>
 8021848:	4611      	mov	r1, r2
 802184a:	f8c4 0104 	str.w	r0, [r4, #260]	@ 0x104
 802184e:	b004      	add	sp, #16
 8021850:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021854:	4718      	bx	r3
 8021856:	f8b4 1059 	ldrh.w	r1, [r4, #89]	@ 0x59
 802185a:	f8a4 1088 	strh.w	r1, [r4, #136]	@ 0x88
 802185e:	f104 0288 	add.w	r2, r4, #136	@ 0x88
 8021862:	f894 305b 	ldrb.w	r3, [r4, #91]	@ 0x5b
 8021866:	7093      	strb	r3, [r2, #2]
 8021868:	2112      	movs	r1, #18
 802186a:	f884 1088 	strb.w	r1, [r4, #136]	@ 0x88
 802186e:	f895 109e 	ldrb.w	r1, [r5, #158]	@ 0x9e
 8021872:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8021876:	f001 0107 	and.w	r1, r1, #7
 802187a:	430b      	orrs	r3, r1
 802187c:	b25b      	sxtb	r3, r3
 802187e:	f884 308a 	strb.w	r3, [r4, #138]	@ 0x8a
 8021882:	f895 109f 	ldrb.w	r1, [r5, #159]	@ 0x9f
 8021886:	00c9      	lsls	r1, r1, #3
 8021888:	f001 0118 	and.w	r1, r1, #24
 802188c:	f023 0318 	bic.w	r3, r3, #24
 8021890:	430b      	orrs	r3, r1
 8021892:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8021894:	f884 308a 	strb.w	r3, [r4, #138]	@ 0x8a
 8021898:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 802189c:	67a1      	str	r1, [r4, #120]	@ 0x78
 802189e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80218a0:	069e      	lsls	r6, r3, #26
 80218a2:	d404      	bmi.n	80218ae <Argus_Dev_StartAuxMeasurement+0x82>
 80218a4:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 80218a8:	09d9      	lsrs	r1, r3, #7
 80218aa:	f040 80b3 	bne.w	8021a14 <Argus_Dev_StartAuxMeasurement+0x1e8>
 80218ae:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80218b0:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
 80218b4:	230a      	movs	r3, #10
 80218b6:	f884 308b 	strb.w	r3, [r4, #139]	@ 0x8b
 80218ba:	f895 009c 	ldrb.w	r0, [r5, #156]	@ 0x9c
 80218be:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 80218c2:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
 80218c6:	b25b      	sxtb	r3, r3
 80218c8:	f884 308c 	strb.w	r3, [r4, #140]	@ 0x8c
 80218cc:	f895 109d 	ldrb.w	r1, [r5, #157]	@ 0x9d
 80218d0:	0109      	lsls	r1, r1, #4
 80218d2:	f001 0170 	and.w	r1, r1, #112	@ 0x70
 80218d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80218da:	430b      	orrs	r3, r1
 80218dc:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 80218de:	f884 308c 	strb.w	r3, [r4, #140]	@ 0x8c
 80218e2:	f041 0120 	orr.w	r1, r1, #32
 80218e6:	67a1      	str	r1, [r4, #120]	@ 0x78
 80218e8:	f104 0390 	add.w	r3, r4, #144	@ 0x90
 80218ec:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 80218ee:	040d      	lsls	r5, r1, #16
 80218f0:	d40a      	bmi.n	8021908 <Argus_Dev_StartAuxMeasurement+0xdc>
 80218f2:	f894 106e 	ldrb.w	r1, [r4, #110]	@ 0x6e
 80218f6:	f894 006d 	ldrb.w	r0, [r4, #109]	@ 0x6d
 80218fa:	0209      	lsls	r1, r1, #8
 80218fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8021900:	f894 006f 	ldrb.w	r0, [r4, #111]	@ 0x6f
 8021904:	4301      	orrs	r1, r0
 8021906:	d006      	beq.n	8021916 <Argus_Dev_StartAuxMeasurement+0xea>
 8021908:	211e      	movs	r1, #30
 802190a:	f843 1b04 	str.w	r1, [r3], #4
 802190e:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8021910:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8021914:	67a1      	str	r1, [r4, #120]	@ 0x78
 8021916:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8021918:	03c8      	lsls	r0, r1, #15
 802191a:	d40c      	bmi.n	8021936 <Argus_Dev_StartAuxMeasurement+0x10a>
 802191c:	f894 1072 	ldrb.w	r1, [r4, #114]	@ 0x72
 8021920:	f894 0071 	ldrb.w	r0, [r4, #113]	@ 0x71
 8021924:	0209      	lsls	r1, r1, #8
 8021926:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 802192a:	f894 0073 	ldrb.w	r0, [r4, #115]	@ 0x73
 802192e:	4301      	orrs	r1, r0
 8021930:	f5b1 0f66 	cmp.w	r1, #15073280	@ 0xe60000
 8021934:	d007      	beq.n	8021946 <Argus_Dev_StartAuxMeasurement+0x11a>
 8021936:	f24e 6120 	movw	r1, #58912	@ 0xe620
 802193a:	f843 1b04 	str.w	r1, [r3], #4
 802193e:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8021940:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8021944:	67a1      	str	r1, [r4, #120]	@ 0x78
 8021946:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8021948:	0389      	lsls	r1, r1, #14
 802194a:	d402      	bmi.n	8021952 <Argus_Dev_StartAuxMeasurement+0x126>
 802194c:	f8b4 1075 	ldrh.w	r1, [r4, #117]	@ 0x75
 8021950:	b151      	cbz	r1, 8021968 <Argus_Dev_StartAuxMeasurement+0x13c>
 8021952:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8021954:	6018      	str	r0, [r3, #0]
 8021956:	2122      	movs	r1, #34	@ 0x22
 8021958:	8019      	strh	r1, [r3, #0]
 802195a:	2100      	movs	r1, #0
 802195c:	7099      	strb	r1, [r3, #2]
 802195e:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8021960:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8021964:	3304      	adds	r3, #4
 8021966:	67a1      	str	r1, [r4, #120]	@ 0x78
 8021968:	2500      	movs	r5, #0
 802196a:	2108      	movs	r1, #8
 802196c:	f8a3 5001 	strh.w	r5, [r3, #1]
 8021970:	70dd      	strb	r5, [r3, #3]
 8021972:	7019      	strb	r1, [r3, #0]
 8021974:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8021976:	f8b4 0069 	ldrh.w	r0, [r4, #105]	@ 0x69
 802197a:	f041 0110 	orr.w	r1, r1, #16
 802197e:	67a1      	str	r1, [r4, #120]	@ 0x78
 8021980:	f894 106b 	ldrb.w	r1, [r4, #107]	@ 0x6b
 8021984:	8098      	strh	r0, [r3, #4]
 8021986:	f001 01e1 	and.w	r1, r1, #225	@ 0xe1
 802198a:	7199      	strb	r1, [r3, #6]
 802198c:	f001 001f 	and.w	r0, r1, #31
 8021990:	211c      	movs	r1, #28
 8021992:	7119      	strb	r1, [r3, #4]
 8021994:	f8d4 111c 	ldr.w	r1, [r4, #284]	@ 0x11c
 8021998:	f893 c005 	ldrb.w	ip, [r3, #5]
 802199c:	f8b1 10a0 	ldrh.w	r1, [r1, #160]	@ 0xa0
 80219a0:	3901      	subs	r1, #1
 80219a2:	f02c 0c7f 	bic.w	ip, ip, #127	@ 0x7f
 80219a6:	f3c1 01c6 	ubfx	r1, r1, #3, #7
 80219aa:	ea41 010c 	orr.w	r1, r1, ip
 80219ae:	b249      	sxtb	r1, r1
 80219b0:	7159      	strb	r1, [r3, #5]
 80219b2:	f8d4 611c 	ldr.w	r6, [r4, #284]	@ 0x11c
 80219b6:	f8b6 c0a0 	ldrh.w	ip, [r6, #160]	@ 0xa0
 80219ba:	f061 017f 	orn	r1, r1, #127	@ 0x7f
 80219be:	7159      	strb	r1, [r3, #5]
 80219c0:	f10c 31ff 	add.w	r1, ip, #4294967295
 80219c4:	ea40 1141 	orr.w	r1, r0, r1, lsl #5
 80219c8:	7199      	strb	r1, [r3, #6]
 80219ca:	9403      	str	r4, [sp, #12]
 80219cc:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 80219ce:	4816      	ldr	r0, [pc, #88]	@ (8021a28 <Argus_Dev_StartAuxMeasurement+0x1fc>)
 80219d0:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 80219d4:	67a1      	str	r1, [r4, #120]	@ 0x78
 80219d6:	f8d4 111c 	ldr.w	r1, [r4, #284]	@ 0x11c
 80219da:	9002      	str	r0, [sp, #8]
 80219dc:	4813      	ldr	r0, [pc, #76]	@ (8021a2c <Argus_Dev_StartAuxMeasurement+0x200>)
 80219de:	9001      	str	r0, [sp, #4]
 80219e0:	f8d1 10a4 	ldr.w	r1, [r1, #164]	@ 0xa4
 80219e4:	9100      	str	r1, [sp, #0]
 80219e6:	3307      	adds	r3, #7
 80219e8:	1a9b      	subs	r3, r3, r2
 80219ea:	4611      	mov	r1, r2
 80219ec:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 80219f0:	f006 fbbc 	bl	802816c <ADS_TransferWithStart>
 80219f4:	1e03      	subs	r3, r0, #0
 80219f6:	da02      	bge.n	80219fe <Argus_Dev_StartAuxMeasurement+0x1d2>
 80219f8:	f8d4 2104 	ldr.w	r2, [r4, #260]	@ 0x104
 80219fc:	b912      	cbnz	r2, 8021a04 <Argus_Dev_StartAuxMeasurement+0x1d8>
 80219fe:	4618      	mov	r0, r3
 8021a00:	b004      	add	sp, #16
 8021a02:	bd70      	pop	{r4, r5, r6, pc}
 8021a04:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 8021a08:	f8c4 5104 	str.w	r5, [r4, #260]	@ 0x104
 8021a0c:	b004      	add	sp, #16
 8021a0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021a12:	4710      	bx	r2
 8021a14:	f895 109d 	ldrb.w	r1, [r5, #157]	@ 0x9d
 8021a18:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8021a1c:	4299      	cmp	r1, r3
 8021a1e:	f47f af46 	bne.w	80218ae <Argus_Dev_StartAuxMeasurement+0x82>
 8021a22:	f104 038b 	add.w	r3, r4, #139	@ 0x8b
 8021a26:	e761      	b.n	80218ec <Argus_Dev_StartAuxMeasurement+0xc0>
 8021a28:	08021011 	.word	0x08021011
 8021a2c:	0802102d 	.word	0x0802102d

08021a30 <Argus_Cfg_Init>:
 8021a30:	b538      	push	{r3, r4, r5, lr}
 8021a32:	4604      	mov	r4, r0
 8021a34:	460d      	mov	r5, r1
 8021a36:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8021a3a:	2100      	movs	r1, #0
 8021a3c:	f007 fe89 	bl	8029752 <memset>
 8021a40:	f8c4 5128 	str.w	r5, [r4, #296]	@ 0x128
 8021a44:	bd38      	pop	{r3, r4, r5, pc}
 8021a46:	bf00      	nop

08021a48 <Argus_Cfg_GetConfiguration>:
 8021a48:	460b      	mov	r3, r1
 8021a4a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8021a4e:	4601      	mov	r1, r0
 8021a50:	4618      	mov	r0, r3
 8021a52:	f007 bf16 	b.w	8029882 <memcpy>
 8021a56:	bf00      	nop

08021a58 <Argus_Cfg_GetConfigurationPtr>:
 8021a58:	4770      	bx	lr
 8021a5a:	bf00      	nop

08021a5c <Argus_Cfg_CheckConfiguration>:
 8021a5c:	b538      	push	{r3, r4, r5, lr}
 8021a5e:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8021a62:	4604      	mov	r4, r0
 8021a64:	b1b3      	cbz	r3, 8021a94 <Argus_Cfg_CheckConfiguration+0x38>
 8021a66:	f8b0 1104 	ldrh.w	r1, [r0, #260]	@ 0x104
 8021a6a:	f8b0 509c 	ldrh.w	r5, [r0, #156]	@ 0x9c
 8021a6e:	e9d0 2325 	ldrd	r2, r3, [r0, #148]	@ 0x94
 8021a72:	0989      	lsrs	r1, r1, #6
 8021a74:	2901      	cmp	r1, #1
 8021a76:	bf38      	it	cc
 8021a78:	2101      	movcc	r1, #1
 8021a7a:	fb03 2101 	mla	r1, r3, r1, r2
 8021a7e:	6843      	ldr	r3, [r0, #4]
 8021a80:	1b5a      	subs	r2, r3, r5
 8021a82:	f3c1 3040 	ubfx	r0, r1, #13, #1
 8021a86:	eba2 3291 	sub.w	r2, r2, r1, lsr #14
 8021a8a:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8021a8e:	1a12      	subs	r2, r2, r0
 8021a90:	4291      	cmp	r1, r2
 8021a92:	dc13      	bgt.n	8021abc <Argus_Cfg_CheckConfiguration+0x60>
 8021a94:	1d25      	adds	r5, r4, #4
 8021a96:	4628      	mov	r0, r5
 8021a98:	f7fd fe6e 	bl	801f778 <Argus_Dev_CheckCfg>
 8021a9c:	2800      	cmp	r0, #0
 8021a9e:	db0c      	blt.n	8021aba <Argus_Cfg_CheckConfiguration+0x5e>
 8021aa0:	4629      	mov	r1, r5
 8021aa2:	f104 00f4 	add.w	r0, r4, #244	@ 0xf4
 8021aa6:	f7f9 f9ff 	bl	801aea8 <Argus_Dca_CheckCfg>
 8021aaa:	2800      	cmp	r0, #0
 8021aac:	db05      	blt.n	8021aba <Argus_Cfg_CheckConfiguration+0x5e>
 8021aae:	f504 7086 	add.w	r0, r4, #268	@ 0x10c
 8021ab2:	f7f8 f96f 	bl	8019d94 <Argus_Pba_CheckCfg>
 8021ab6:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 8021aba:	bd38      	pop	{r3, r4, r5, pc}
 8021abc:	4801      	ldr	r0, [pc, #4]	@ (8021ac4 <Argus_Cfg_CheckConfiguration+0x68>)
 8021abe:	f7f1 fa69 	bl	8012f94 <print>
 8021ac2:	e7e7      	b.n	8021a94 <Argus_Cfg_CheckConfiguration+0x38>
 8021ac4:	0802eea4 	.word	0x0802eea4

08021ac8 <Argus_Cfg_CopyConfiguration>:
 8021ac8:	b510      	push	{r4, lr}
 8021aca:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8021ace:	4604      	mov	r4, r0
 8021ad0:	f007 fed7 	bl	8029882 <memcpy>
 8021ad4:	4620      	mov	r0, r4
 8021ad6:	f7fe f8b3 	bl	801fc40 <Argus_Dev_PrepareCfg>
 8021ada:	4620      	mov	r0, r4
 8021adc:	bd10      	pop	{r4, pc}
 8021ade:	bf00      	nop

08021ae0 <Argus_Cfg_GetMeasurementMode>:
 8021ae0:	7800      	ldrb	r0, [r0, #0]
 8021ae2:	4770      	bx	lr

08021ae4 <Argus_Cfg_TestConnection>:
 8021ae4:	b538      	push	{r3, r4, r5, lr}
 8021ae6:	21bf      	movs	r1, #191	@ 0xbf
 8021ae8:	4604      	mov	r4, r0
 8021aea:	f8d0 0128 	ldr.w	r0, [r0, #296]	@ 0x128
 8021aee:	f7fd fd33 	bl	801f558 <Argus_Dev_SetStatusSync>
 8021af2:	b970      	cbnz	r0, 8021b12 <Argus_Cfg_TestConnection+0x2e>
 8021af4:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 8021af8:	f7fd fadc 	bl	801f0b4 <Argus_Dev_TestConnection>
 8021afc:	1e05      	subs	r5, r0, #0
 8021afe:	bfb8      	it	lt
 8021b00:	f06f 0564 	mvnlt.w	r5, #100	@ 0x64
 8021b04:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 8021b08:	21bf      	movs	r1, #191	@ 0xbf
 8021b0a:	f7fd fdf7 	bl	801f6fc <Argus_Dev_ClearStatus>
 8021b0e:	4628      	mov	r0, r5
 8021b10:	bd38      	pop	{r3, r4, r5, pc}
 8021b12:	2502      	movs	r5, #2
 8021b14:	4628      	mov	r0, r5
 8021b16:	bd38      	pop	{r3, r4, r5, pc}

08021b18 <Argus_GetDefaultCfg>:
 8021b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b1c:	f649 4440 	movw	r4, #40000	@ 0x9c40
 8021b20:	f890 e10c 	ldrb.w	lr, [r0, #268]	@ 0x10c
 8021b24:	6044      	str	r4, [r0, #4]
 8021b26:	2a05      	cmp	r2, #5
 8021b28:	f04f 0402 	mov.w	r4, #2
 8021b2c:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 8021b30:	f880 410d 	strb.w	r4, [r0, #269]	@ 0x10d
 8021b34:	f04e 0e01 	orr.w	lr, lr, #1
 8021b38:	f000 8457 	beq.w	80223ea <Argus_GetDefaultCfg+0x8d2>
 8021b3c:	2a04      	cmp	r2, #4
 8021b3e:	f000 8250 	beq.w	8021fe2 <Argus_GetDefaultCfg+0x4ca>
 8021b42:	4cd6      	ldr	r4, [pc, #856]	@ (8021e9c <Argus_GetDefaultCfg+0x384>)
 8021b44:	4dd6      	ldr	r5, [pc, #856]	@ (8021ea0 <Argus_GetDefaultCfg+0x388>)
 8021b46:	2a03      	cmp	r2, #3
 8021b48:	bf18      	it	ne
 8021b4a:	462c      	movne	r4, r5
 8021b4c:	f8c0 4124 	str.w	r4, [r0, #292]	@ 0x124
 8021b50:	f011 0401 	ands.w	r4, r1, #1
 8021b54:	f000 8565 	beq.w	8022622 <Argus_GetDefaultCfg+0xb0a>
 8021b58:	2580      	movs	r5, #128	@ 0x80
 8021b5a:	f8a0 5110 	strh.w	r5, [r0, #272]	@ 0x110
 8021b5e:	2a03      	cmp	r2, #3
 8021b60:	f04f 0550 	mov.w	r5, #80	@ 0x50
 8021b64:	f8a0 5112 	strh.w	r5, [r0, #274]	@ 0x112
 8021b68:	f000 8565 	beq.w	8022636 <Argus_GetDefaultCfg+0xb1e>
 8021b6c:	f243 353d 	movw	r5, #13117	@ 0x333d
 8021b70:	fa4f fe8e 	sxtb.w	lr, lr
 8021b74:	f8a0 510e 	strh.w	r5, [r0, #270]	@ 0x10e
 8021b78:	2c00      	cmp	r4, #0
 8021b7a:	f000 8249 	beq.w	8022010 <Argus_GetDefaultCfg+0x4f8>
 8021b7e:	4dc9      	ldr	r5, [pc, #804]	@ (8021ea4 <Argus_GetDefaultCfg+0x38c>)
 8021b80:	f8c0 511a 	str.w	r5, [r0, #282]	@ 0x11a
 8021b84:	2514      	movs	r5, #20
 8021b86:	f880 5118 	strb.w	r5, [r0, #280]	@ 0x118
 8021b8a:	251f      	movs	r5, #31
 8021b8c:	f880 5119 	strb.w	r5, [r0, #281]	@ 0x119
 8021b90:	4dc5      	ldr	r5, [pc, #788]	@ (8021ea8 <Argus_GetDefaultCfg+0x390>)
 8021b92:	f8c0 5120 	str.w	r5, [r0, #288]	@ 0x120
 8021b96:	2a05      	cmp	r2, #5
 8021b98:	f04f 0503 	mov.w	r5, #3
 8021b9c:	f880 511f 	strb.w	r5, [r0, #287]	@ 0x11f
 8021ba0:	f000 83e4 	beq.w	802236c <Argus_GetDefaultCfg+0x854>
 8021ba4:	2502      	movs	r5, #2
 8021ba6:	2a04      	cmp	r2, #4
 8021ba8:	f880 511e 	strb.w	r5, [r0, #286]	@ 0x11e
 8021bac:	f000 844d 	beq.w	802244a <Argus_GetDefaultCfg+0x932>
 8021bb0:	2a03      	cmp	r2, #3
 8021bb2:	f040 86cc 	bne.w	802294e <Argus_GetDefaultCfg+0xe36>
 8021bb6:	f04e 0e30 	orr.w	lr, lr, #48	@ 0x30
 8021bba:	f44f 557a 	mov.w	r5, #16000	@ 0x3e80
 8021bbe:	f880 e10c 	strb.w	lr, [r0, #268]	@ 0x10c
 8021bc2:	f8a0 5114 	strh.w	r5, [r0, #276]	@ 0x114
 8021bc6:	2c00      	cmp	r4, #0
 8021bc8:	f040 87d6 	bne.w	8022b78 <Argus_GetDefaultCfg+0x1060>
 8021bcc:	2560      	movs	r5, #96	@ 0x60
 8021bce:	f8a0 5116 	strh.w	r5, [r0, #278]	@ 0x116
 8021bd2:	2a00      	cmp	r2, #0
 8021bd4:	f040 8447 	bne.w	8022466 <Argus_GetDefaultCfg+0x94e>
 8021bd8:	f240 15ff 	movw	r5, #511	@ 0x1ff
 8021bdc:	f8a0 50f4 	strh.w	r5, [r0, #244]	@ 0xf4
 8021be0:	2503      	movs	r5, #3
 8021be2:	f880 50f6 	strb.w	r5, [r0, #246]	@ 0xf6
 8021be6:	2510      	movs	r5, #16
 8021be8:	f880 50f7 	strb.w	r5, [r0, #247]	@ 0xf7
 8021bec:	4daf      	ldr	r5, [pc, #700]	@ (8021eac <Argus_GetDefaultCfg+0x394>)
 8021bee:	f8c0 50f8 	str.w	r5, [r0, #248]	@ 0xf8
 8021bf2:	f44f 5548 	mov.w	r5, #12800	@ 0x3200
 8021bf6:	f8a0 50fc 	strh.w	r5, [r0, #252]	@ 0xfc
 8021bfa:	f44f 7680 	mov.w	r6, #256	@ 0x100
 8021bfe:	2501      	movs	r5, #1
 8021c00:	f880 50fe 	strb.w	r5, [r0, #254]	@ 0xfe
 8021c04:	f8a0 6100 	strh.w	r6, [r0, #256]	@ 0x100
 8021c08:	2c00      	cmp	r4, #0
 8021c0a:	f000 84a2 	beq.w	8022552 <Argus_GetDefaultCfg+0xa3a>
 8021c0e:	260d      	movs	r6, #13
 8021c10:	f8a0 6102 	strh.w	r6, [r0, #258]	@ 0x102
 8021c14:	f44f 6680 	mov.w	r6, #1024	@ 0x400
 8021c18:	f8a0 6104 	strh.w	r6, [r0, #260]	@ 0x104
 8021c1c:	2602      	movs	r6, #2
 8021c1e:	f880 60ff 	strb.w	r6, [r0, #255]	@ 0xff
 8021c22:	2a00      	cmp	r2, #0
 8021c24:	f040 8463 	bne.w	80224ee <Argus_GetDefaultCfg+0x9d6>
 8021c28:	f880 5021 	strb.w	r5, [r0, #33]	@ 0x21
 8021c2c:	2508      	movs	r5, #8
 8021c2e:	7305      	strb	r5, [r0, #12]
 8021c30:	81c5      	strh	r5, [r0, #14]
 8021c32:	4d9f      	ldr	r5, [pc, #636]	@ (8021eb0 <Argus_GetDefaultCfg+0x398>)
 8021c34:	6085      	str	r5, [r0, #8]
 8021c36:	4d9f      	ldr	r5, [pc, #636]	@ (8021eb4 <Argus_GetDefaultCfg+0x39c>)
 8021c38:	f8c0 5022 	str.w	r5, [r0, #34]	@ 0x22
 8021c3c:	f04f 554c 	mov.w	r5, #855638016	@ 0x33000000
 8021c40:	f8c0 5106 	str.w	r5, [r0, #262]	@ 0x106
 8021c44:	f240 2566 	movw	r5, #614	@ 0x266
 8021c48:	8205      	strh	r5, [r0, #16]
 8021c4a:	2550      	movs	r5, #80	@ 0x50
 8021c4c:	f880 6092 	strb.w	r6, [r0, #146]	@ 0x92
 8021c50:	8245      	strh	r5, [r0, #18]
 8021c52:	f04f 0c02 	mov.w	ip, #2
 8021c56:	4d98      	ldr	r5, [pc, #608]	@ (8021eb8 <Argus_GetDefaultCfg+0x3a0>)
 8021c58:	f8df a278 	ldr.w	sl, [pc, #632]	@ 8021ed4 <Argus_GetDefaultCfg+0x3bc>
 8021c5c:	e9c0 a506 	strd	sl, r5, [r0, #24]
 8021c60:	2500      	movs	r5, #0
 8021c62:	7345      	strb	r5, [r0, #13]
 8021c64:	f649 4540 	movw	r5, #40000	@ 0x9c40
 8021c68:	6145      	str	r5, [r0, #20]
 8021c6a:	2540      	movs	r5, #64	@ 0x40
 8021c6c:	f880 5020 	strb.w	r5, [r0, #32]
 8021c70:	4e92      	ldr	r6, [pc, #584]	@ (8021ebc <Argus_GetDefaultCfg+0x3a4>)
 8021c72:	4d93      	ldr	r5, [pc, #588]	@ (8021ec0 <Argus_GetDefaultCfg+0x3a8>)
 8021c74:	e9c0 6525 	strd	r6, r5, [r0, #148]	@ 0x94
 8021c78:	f44f 7616 	mov.w	r6, #600	@ 0x258
 8021c7c:	f8a0 609c 	strh.w	r6, [r0, #156]	@ 0x9c
 8021c80:	f240 7601 	movw	r6, #1793	@ 0x701
 8021c84:	f8a0 60a0 	strh.w	r6, [r0, #160]	@ 0xa0
 8021c88:	2603      	movs	r6, #3
 8021c8a:	f880 60a2 	strb.w	r6, [r0, #162]	@ 0xa2
 8021c8e:	4e8d      	ldr	r6, [pc, #564]	@ (8021ec4 <Argus_GetDefaultCfg+0x3ac>)
 8021c90:	f880 c0d8 	strb.w	ip, [r0, #216]	@ 0xd8
 8021c94:	f8c0 60d0 	str.w	r6, [r0, #208]	@ 0xd0
 8021c98:	f8df c23c 	ldr.w	ip, [pc, #572]	@ 8021ed8 <Argus_GetDefaultCfg+0x3c0>
 8021c9c:	4e8a      	ldr	r6, [pc, #552]	@ (8021ec8 <Argus_GetDefaultCfg+0x3b0>)
 8021c9e:	f880 40a3 	strb.w	r4, [r0, #163]	@ 0xa3
 8021ca2:	e9c0 c631 	strd	ip, r6, [r0, #196]	@ 0xc4
 8021ca6:	f44f 7c96 	mov.w	ip, #300	@ 0x12c
 8021caa:	f8c0 c0a8 	str.w	ip, [r0, #168]	@ 0xa8
 8021cae:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8021cb2:	f8a0 c0ce 	strh.w	ip, [r0, #206]	@ 0xce
 8021cb6:	f44f 6c16 	mov.w	ip, #2400	@ 0x960
 8021cba:	f8a0 c0d4 	strh.w	ip, [r0, #212]	@ 0xd4
 8021cbe:	f04f 0c03 	mov.w	ip, #3
 8021cc2:	f880 c0cc 	strb.w	ip, [r0, #204]	@ 0xcc
 8021cc6:	f04f 0c33 	mov.w	ip, #51	@ 0x33
 8021cca:	2c00      	cmp	r4, #0
 8021ccc:	f880 c0d9 	strb.w	ip, [r0, #217]	@ 0xd9
 8021cd0:	f04f 0c05 	mov.w	ip, #5
 8021cd4:	f880 c0da 	strb.w	ip, [r0, #218]	@ 0xda
 8021cd8:	bf14      	ite	ne
 8021cda:	f04f 0c18 	movne.w	ip, #24
 8021cde:	f04f 0c20 	moveq.w	ip, #32
 8021ce2:	f8a0 c0de 	strh.w	ip, [r0, #222]	@ 0xde
 8021ce6:	f04f 0604 	mov.w	r6, #4
 8021cea:	bf14      	ite	ne
 8021cec:	f04f 0c30 	movne.w	ip, #48	@ 0x30
 8021cf0:	f04f 0c40 	moveq.w	ip, #64	@ 0x40
 8021cf4:	2a05      	cmp	r2, #5
 8021cf6:	f8a0 60a4 	strh.w	r6, [r0, #164]	@ 0xa4
 8021cfa:	f8a0 c0dc 	strh.w	ip, [r0, #220]	@ 0xdc
 8021cfe:	f000 838a 	beq.w	8022416 <Argus_GetDefaultCfg+0x8fe>
 8021d02:	2a04      	cmp	r2, #4
 8021d04:	f880 60db 	strb.w	r6, [r0, #219]	@ 0xdb
 8021d08:	f000 8613 	beq.w	8022932 <Argus_GetDefaultCfg+0xe1a>
 8021d0c:	2a03      	cmp	r2, #3
 8021d0e:	f000 8512 	beq.w	8022736 <Argus_GetDefaultCfg+0xc1e>
 8021d12:	4e6e      	ldr	r6, [pc, #440]	@ (8021ecc <Argus_GetDefaultCfg+0x3b4>)
 8021d14:	f8c0 60e0 	str.w	r6, [r0, #224]	@ 0xe0
 8021d18:	f8c0 60f0 	str.w	r6, [r0, #240]	@ 0xf0
 8021d1c:	4e6c      	ldr	r6, [pc, #432]	@ (8021ed0 <Argus_GetDefaultCfg+0x3b8>)
 8021d1e:	f8c0 60e8 	str.w	r6, [r0, #232]	@ 0xe8
 8021d22:	f44f 7ca0 	mov.w	ip, #320	@ 0x140
 8021d26:	2601      	movs	r6, #1
 8021d28:	f8a0 c0ec 	strh.w	ip, [r0, #236]	@ 0xec
 8021d2c:	42b2      	cmp	r2, r6
 8021d2e:	f241 4c0d 	movw	ip, #5133	@ 0x140d
 8021d32:	f880 60e4 	strb.w	r6, [r0, #228]	@ 0xe4
 8021d36:	f8a0 c0e5 	strh.w	ip, [r0, #229]	@ 0xe5
 8021d3a:	f040 8721 	bne.w	8022b80 <Argus_GetDefaultCfg+0x1068>
 8021d3e:	4616      	mov	r6, r2
 8021d40:	46a4      	mov	ip, r4
 8021d42:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8021edc <Argus_GetDefaultCfg+0x3c4>
 8021d46:	f880 c0ac 	strb.w	ip, [r0, #172]	@ 0xac
 8021d4a:	f8df c194 	ldr.w	ip, [pc, #404]	@ 8021ee0 <Argus_GetDefaultCfg+0x3c8>
 8021d4e:	f8df 9194 	ldr.w	r9, [pc, #404]	@ 8021ee4 <Argus_GetDefaultCfg+0x3cc>
 8021d52:	e9c0 8c2c 	strd	r8, ip, [r0, #176]	@ 0xb0
 8021d56:	f5ac 0c00 	sub.w	ip, ip, #8388608	@ 0x800000
 8021d5a:	f5ac 7c82 	sub.w	ip, ip, #260	@ 0x104
 8021d5e:	f8c0 c0b8 	str.w	ip, [r0, #184]	@ 0xb8
 8021d62:	f8df c184 	ldr.w	ip, [pc, #388]	@ 8021ee8 <Argus_GetDefaultCfg+0x3d0>
 8021d66:	e9c0 9c2f 	strd	r9, ip, [r0, #188]	@ 0xbc
 8021d6a:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8021eec <Argus_GetDefaultCfg+0x3d4>
 8021d6e:	f8c0 c02b 	str.w	ip, [r0, #43]	@ 0x2b
 8021d72:	f04f 0c55 	mov.w	ip, #85	@ 0x55
 8021d76:	f880 c0ad 	strb.w	ip, [r0, #173]	@ 0xad
 8021d7a:	f64a 2c55 	movw	ip, #43605	@ 0xaa55
 8021d7e:	f8a0 c0ae 	strh.w	ip, [r0, #174]	@ 0xae
 8021d82:	f04f 0c00 	mov.w	ip, #0
 8021d86:	f8c0 c027 	str.w	ip, [r0, #39]	@ 0x27
 8021d8a:	2a01      	cmp	r2, #1
 8021d8c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8021d90:	f880 c030 	strb.w	ip, [r0, #48]	@ 0x30
 8021d94:	f000 81ca 	beq.w	802212c <Argus_GetDefaultCfg+0x614>
 8021d98:	2c00      	cmp	r4, #0
 8021d9a:	bf18      	it	ne
 8021d9c:	f04f 0cf0 	movne.w	ip, #240	@ 0xf0
 8021da0:	f04f 38f0 	mov.w	r8, #4042322160	@ 0xf0f0f0f0
 8021da4:	2a03      	cmp	r2, #3
 8021da6:	e9c0 880d 	strd	r8, r8, [r0, #52]	@ 0x34
 8021daa:	f880 c031 	strb.w	ip, [r0, #49]	@ 0x31
 8021dae:	f880 c032 	strb.w	ip, [r0, #50]	@ 0x32
 8021db2:	f880 c033 	strb.w	ip, [r0, #51]	@ 0x33
 8021db6:	f8c0 803c 	str.w	r8, [r0, #60]	@ 0x3c
 8021dba:	f000 81ba 	beq.w	8022132 <Argus_GetDefaultCfg+0x61a>
 8021dbe:	2a01      	cmp	r2, #1
 8021dc0:	f000 81ad 	beq.w	802211e <Argus_GetDefaultCfg+0x606>
 8021dc4:	2c00      	cmp	r4, #0
 8021dc6:	f040 81aa 	bne.w	802211e <Argus_GetDefaultCfg+0x606>
 8021dca:	f64f 78ff 	movw	r8, #65535	@ 0xffff
 8021dce:	f8a0 8041 	strh.w	r8, [r0, #65]	@ 0x41
 8021dd2:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 8021dd6:	f880 c051 	strb.w	ip, [r0, #81]	@ 0x51
 8021dda:	f880 c052 	strb.w	ip, [r0, #82]	@ 0x52
 8021dde:	f880 c053 	strb.w	ip, [r0, #83]	@ 0x53
 8021de2:	f04f 3c0f 	mov.w	ip, #252645135	@ 0xf0f0f0f
 8021de6:	e9c0 cc11 	strd	ip, ip, [r0, #68]	@ 0x44
 8021dea:	f8c0 c04c 	str.w	ip, [r0, #76]	@ 0x4c
 8021dee:	f04f 3cf0 	mov.w	ip, #4042322160	@ 0xf0f0f0f0
 8021df2:	e9c0 cc15 	strd	ip, ip, [r0, #84]	@ 0x54
 8021df6:	f880 8043 	strb.w	r8, [r0, #67]	@ 0x43
 8021dfa:	f8c0 c05c 	str.w	ip, [r0, #92]	@ 0x5c
 8021dfe:	f04f 08f0 	mov.w	r8, #240	@ 0xf0
 8021e02:	f04f 0c0f 	mov.w	ip, #15
 8021e06:	2a01      	cmp	r2, #1
 8021e08:	f880 c050 	strb.w	ip, [r0, #80]	@ 0x50
 8021e0c:	f880 8060 	strb.w	r8, [r0, #96]	@ 0x60
 8021e10:	f040 815c 	bne.w	80220cc <Argus_GetDefaultCfg+0x5b4>
 8021e14:	fa4f f981 	sxtb.w	r9, r1
 8021e18:	f880 c068 	strb.w	ip, [r0, #104]	@ 0x68
 8021e1c:	ea4f 0c49 	mov.w	ip, r9, lsl #1
 8021e20:	f00c 0c02 	and.w	ip, ip, #2
 8021e24:	f04c 0c01 	orr.w	ip, ip, #1
 8021e28:	f880 c069 	strb.w	ip, [r0, #105]	@ 0x69
 8021e2c:	ea4f 1cc9 	mov.w	ip, r9, lsl #7
 8021e30:	2c00      	cmp	r4, #0
 8021e32:	f04c 0c04 	orr.w	ip, ip, #4
 8021e36:	f880 c063 	strb.w	ip, [r0, #99]	@ 0x63
 8021e3a:	bf14      	ite	ne
 8021e3c:	f06f 0c07 	mvnne.w	ip, #7
 8021e40:	f06f 0c7f 	mvneq.w	ip, #127	@ 0x7f
 8021e44:	f04c 0c02 	orr.w	ip, ip, #2
 8021e48:	f880 c06b 	strb.w	ip, [r0, #107]	@ 0x6b
 8021e4c:	bf14      	ite	ne
 8021e4e:	f04f 0c04 	movne.w	ip, #4
 8021e52:	f04f 0c02 	moveq.w	ip, #2
 8021e56:	f890 806d 	ldrb.w	r8, [r0, #109]	@ 0x6d
 8021e5a:	f880 c062 	strb.w	ip, [r0, #98]	@ 0x62
 8021e5e:	f04f 0c10 	mov.w	ip, #16
 8021e62:	f04f 0b00 	mov.w	fp, #0
 8021e66:	f880 c064 	strb.w	ip, [r0, #100]	@ 0x64
 8021e6a:	f245 1cfe 	movw	ip, #20990	@ 0x51fe
 8021e6e:	f008 080f 	and.w	r8, r8, #15
 8021e72:	f880 b06c 	strb.w	fp, [r0, #108]	@ 0x6c
 8021e76:	f8a0 c066 	strh.w	ip, [r0, #102]	@ 0x66
 8021e7a:	f04f 0a02 	mov.w	sl, #2
 8021e7e:	fa5f fc88 	uxtb.w	ip, r8
 8021e82:	2f01      	cmp	r7, #1
 8021e84:	f880 c06d 	strb.w	ip, [r0, #109]	@ 0x6d
 8021e88:	d132      	bne.n	8021ef0 <Argus_GetDefaultCfg+0x3d8>
 8021e8a:	f02b 0b01 	bic.w	fp, fp, #1
 8021e8e:	f008 080f 	and.w	r8, r8, #15
 8021e92:	f880 b06c 	strb.w	fp, [r0, #108]	@ 0x6c
 8021e96:	f048 0ca0 	orr.w	ip, r8, #160	@ 0xa0
 8021e9a:	e029      	b.n	8021ef0 <Argus_GetDefaultCfg+0x3d8>
 8021e9c:	f000999f 	.word	0xf000999f
 8021ea0:	50009999 	.word	0x50009999
 8021ea4:	20000ccd 	.word	0x20000ccd
 8021ea8:	fffccccd 	.word	0xfffccccd
 8021eac:	12c01680 	.word	0x12c01680
 8021eb0:	016e3600 	.word	0x016e3600
 8021eb4:	003201f4 	.word	0x003201f4
 8021eb8:	13880064 	.word	0x13880064
 8021ebc:	0043199a 	.word	0x0043199a
 8021ec0:	00022b85 	.word	0x00022b85
 8021ec4:	06400190 	.word	0x06400190
 8021ec8:	04060c80 	.word	0x04060c80
 8021ecc:	50009fff 	.word	0x50009fff
 8021ed0:	10e014a0 	.word	0x10e014a0
 8021ed4:	00800140 	.word	0x00800140
 8021ed8:	dac0b305 	.word	0xdac0b305
 8021edc:	0fa080c0 	.word	0x0fa080c0
 8021ee0:	04430491 	.word	0x04430491
 8021ee4:	005b8d80 	.word	0x005b8d80
 8021ee8:	002dc6c0 	.word	0x002dc6c0
 8021eec:	20640000 	.word	0x20640000
 8021ef0:	f890 806f 	ldrb.w	r8, [r0, #111]	@ 0x6f
 8021ef4:	f048 081e 	orr.w	r8, r8, #30
 8021ef8:	f028 0801 	bic.w	r8, r8, #1
 8021efc:	2c00      	cmp	r4, #0
 8021efe:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8021f02:	f880 806f 	strb.w	r8, [r0, #111]	@ 0x6f
 8021f06:	f009 0908 	and.w	r9, r9, #8
 8021f0a:	bf14      	ite	ne
 8021f0c:	f04f 0803 	movne.w	r8, #3
 8021f10:	f04f 0806 	moveq.w	r8, #6
 8021f14:	ea49 0908 	orr.w	r9, r9, r8
 8021f18:	f02c 0c0a 	bic.w	ip, ip, #10
 8021f1c:	f04f 080f 	mov.w	r8, #15
 8021f20:	ea4a 0c0c 	orr.w	ip, sl, ip
 8021f24:	f880 8070 	strb.w	r8, [r0, #112]	@ 0x70
 8021f28:	f890 a078 	ldrb.w	sl, [r0, #120]	@ 0x78
 8021f2c:	f04f 0812 	mov.w	r8, #18
 8021f30:	f880 8072 	strb.w	r8, [r0, #114]	@ 0x72
 8021f34:	f084 0801 	eor.w	r8, r4, #1
 8021f38:	f04c 0c04 	orr.w	ip, ip, #4
 8021f3c:	f00a 0a3f 	and.w	sl, sl, #63	@ 0x3f
 8021f40:	f880 8074 	strb.w	r8, [r0, #116]	@ 0x74
 8021f44:	f04f 0808 	mov.w	r8, #8
 8021f48:	f00c 0cf6 	and.w	ip, ip, #246	@ 0xf6
 8021f4c:	f049 0920 	orr.w	r9, r9, #32
 8021f50:	f880 8077 	strb.w	r8, [r0, #119]	@ 0x77
 8021f54:	2b01      	cmp	r3, #1
 8021f56:	f04a 0880 	orr.w	r8, sl, #128	@ 0x80
 8021f5a:	f880 c06d 	strb.w	ip, [r0, #109]	@ 0x6d
 8021f5e:	f880 9075 	strb.w	r9, [r0, #117]	@ 0x75
 8021f62:	f880 8078 	strb.w	r8, [r0, #120]	@ 0x78
 8021f66:	d104      	bne.n	8021f72 <Argus_GetDefaultCfg+0x45a>
 8021f68:	230c      	movs	r3, #12
 8021f6a:	f04a 08c0 	orr.w	r8, sl, #192	@ 0xc0
 8021f6e:	f880 3077 	strb.w	r3, [r0, #119]	@ 0x77
 8021f72:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 8021f76:	2c00      	cmp	r4, #0
 8021f78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8021f7c:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
 8021f80:	bf14      	ite	ne
 8021f82:	2340      	movne	r3, #64	@ 0x40
 8021f84:	f06f 037f 	mvneq.w	r3, #127	@ 0x7f
 8021f88:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8021f8c:	f880 307b 	strb.w	r3, [r0, #123]	@ 0x7b
 8021f90:	2321      	movs	r3, #33	@ 0x21
 8021f92:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
 8021f96:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8021f9a:	f8a0 307c 	strh.w	r3, [r0, #124]	@ 0x7c
 8021f9e:	23e9      	movs	r3, #233	@ 0xe9
 8021fa0:	f008 08d0 	and.w	r8, r8, #208	@ 0xd0
 8021fa4:	f880 307e 	strb.w	r3, [r0, #126]	@ 0x7e
 8021fa8:	2300      	movs	r3, #0
 8021faa:	f048 0810 	orr.w	r8, r8, #16
 8021fae:	f880 3081 	strb.w	r3, [r0, #129]	@ 0x81
 8021fb2:	2a04      	cmp	r2, #4
 8021fb4:	f04f 0303 	mov.w	r3, #3
 8021fb8:	f880 8078 	strb.w	r8, [r0, #120]	@ 0x78
 8021fbc:	f880 3082 	strb.w	r3, [r0, #130]	@ 0x82
 8021fc0:	d02e      	beq.n	8022020 <Argus_GetDefaultCfg+0x508>
 8021fc2:	2a01      	cmp	r2, #1
 8021fc4:	f000 830c 	beq.w	80225e0 <Argus_GetDefaultCfg+0xac8>
 8021fc8:	b352      	cbz	r2, 8022020 <Argus_GetDefaultCfg+0x508>
 8021fca:	2c00      	cmp	r4, #0
 8021fcc:	f000 8362 	beq.w	8022694 <Argus_GetDefaultCfg+0xb7c>
 8021fd0:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
 8021fd4:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 8021fd8:	f003 031f 	and.w	r3, r3, #31
 8021fdc:	f043 0320 	orr.w	r3, r3, #32
 8021fe0:	e029      	b.n	8022036 <Argus_GetDefaultCfg+0x51e>
 8021fe2:	4cd8      	ldr	r4, [pc, #864]	@ (8022344 <Argus_GetDefaultCfg+0x82c>)
 8021fe4:	f8c0 4124 	str.w	r4, [r0, #292]	@ 0x124
 8021fe8:	4cd7      	ldr	r4, [pc, #860]	@ (8022348 <Argus_GetDefaultCfg+0x830>)
 8021fea:	f8c0 4110 	str.w	r4, [r0, #272]	@ 0x110
 8021fee:	f011 0401 	ands.w	r4, r1, #1
 8021ff2:	f040 834a 	bne.w	802268a <Argus_GetDefaultCfg+0xb72>
 8021ff6:	2580      	movs	r5, #128	@ 0x80
 8021ff8:	f880 510e 	strb.w	r5, [r0, #270]	@ 0x10e
 8021ffc:	2566      	movs	r5, #102	@ 0x66
 8021ffe:	f04e 0e40 	orr.w	lr, lr, #64	@ 0x40
 8022002:	f880 510f 	strb.w	r5, [r0, #271]	@ 0x10f
 8022006:	fa4f fe8e 	sxtb.w	lr, lr
 802200a:	2c00      	cmp	r4, #0
 802200c:	f47f adb7 	bne.w	8021b7e <Argus_GetDefaultCfg+0x66>
 8022010:	4dce      	ldr	r5, [pc, #824]	@ (802234c <Argus_GetDefaultCfg+0x834>)
 8022012:	f8c0 511a 	str.w	r5, [r0, #282]	@ 0x11a
 8022016:	251f      	movs	r5, #31
 8022018:	f880 5118 	strb.w	r5, [r0, #280]	@ 0x118
 802201c:	2529      	movs	r5, #41	@ 0x29
 802201e:	e5b5      	b.n	8021b8c <Argus_GetDefaultCfg+0x74>
 8022020:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 8022024:	f04f 0802 	mov.w	r8, #2
 8022028:	f003 031f 	and.w	r3, r3, #31
 802202c:	f880 8084 	strb.w	r8, [r0, #132]	@ 0x84
 8022030:	b10c      	cbz	r4, 8022036 <Argus_GetDefaultCfg+0x51e>
 8022032:	f063 031f 	orn	r3, r3, #31
 8022036:	f04f 0800 	mov.w	r8, #0
 802203a:	f023 031e 	bic.w	r3, r3, #30
 802203e:	f8a0 8087 	strh.w	r8, [r0, #135]	@ 0x87
 8022042:	f880 8089 	strb.w	r8, [r0, #137]	@ 0x89
 8022046:	f043 0806 	orr.w	r8, r3, #6
 802204a:	f880 8085 	strb.w	r8, [r0, #133]	@ 0x85
 802204e:	f64f 7801 	movw	r8, #65281	@ 0xff01
 8022052:	f8a0 808b 	strh.w	r8, [r0, #139]	@ 0x8b
 8022056:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 802205a:	f880 808d 	strb.w	r8, [r0, #141]	@ 0x8d
 802205e:	f64f 78ff 	movw	r8, #65535	@ 0xffff
 8022062:	f8a0 808f 	strh.w	r8, [r0, #143]	@ 0x8f
 8022066:	f04f 0804 	mov.w	r8, #4
 802206a:	4547      	cmp	r7, r8
 802206c:	f880 8091 	strb.w	r8, [r0, #145]	@ 0x91
 8022070:	f000 80ab 	beq.w	80221ca <Argus_GetDefaultCfg+0x6b2>
 8022074:	074b      	lsls	r3, r1, #29
 8022076:	d527      	bpl.n	80220c8 <Argus_GetDefaultCfg+0x5b0>
 8022078:	2300      	movs	r3, #0
 802207a:	f880 3109 	strb.w	r3, [r0, #265]	@ 0x109
 802207e:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8022082:	f880 30e4 	strb.w	r3, [r0, #228]	@ 0xe4
 8022086:	f880 30ac 	strb.w	r3, [r0, #172]	@ 0xac
 802208a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 802208e:	4ab0      	ldr	r2, [pc, #704]	@ (8022350 <Argus_GetDefaultCfg+0x838>)
 8022090:	f8a0 308f 	strh.w	r3, [r0, #143]	@ 0x8f
 8022094:	f240 114d 	movw	r1, #333	@ 0x14d
 8022098:	4bae      	ldr	r3, [pc, #696]	@ (8022354 <Argus_GetDefaultCfg+0x83c>)
 802209a:	6041      	str	r1, [r0, #4]
 802209c:	f44f 41f8 	mov.w	r1, #31744	@ 0x7c00
 80220a0:	2c00      	cmp	r4, #0
 80220a2:	bf18      	it	ne
 80220a4:	4613      	movne	r3, r2
 80220a6:	f8c0 5098 	str.w	r5, [r0, #152]	@ 0x98
 80220aa:	f8a0 108c 	strh.w	r1, [r0, #140]	@ 0x8c
 80220ae:	2501      	movs	r5, #1
 80220b0:	21fa      	movs	r1, #250	@ 0xfa
 80220b2:	2202      	movs	r2, #2
 80220b4:	f880 60d8 	strb.w	r6, [r0, #216]	@ 0xd8
 80220b8:	f880 510d 	strb.w	r5, [r0, #269]	@ 0x10d
 80220bc:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
 80220c0:	f8a0 109c 	strh.w	r1, [r0, #156]	@ 0x9c
 80220c4:	f8a0 20a4 	strh.w	r2, [r0, #164]	@ 0xa4
 80220c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80220cc:	f8df c298 	ldr.w	ip, [pc, #664]	@ 8022368 <Argus_GetDefaultCfg+0x850>
 80220d0:	f8c0 c066 	str.w	ip, [r0, #102]	@ 0x66
 80220d4:	f104 0c03 	add.w	ip, r4, #3
 80220d8:	f880 c062 	strb.w	ip, [r0, #98]	@ 0x62
 80220dc:	f04f 0c84 	mov.w	ip, #132	@ 0x84
 80220e0:	f880 c063 	strb.w	ip, [r0, #99]	@ 0x63
 80220e4:	f04f 0c10 	mov.w	ip, #16
 80220e8:	f880 c064 	strb.w	ip, [r0, #100]	@ 0x64
 80220ec:	2a04      	cmp	r2, #4
 80220ee:	f04f 0c00 	mov.w	ip, #0
 80220f2:	f880 c06b 	strb.w	ip, [r0, #107]	@ 0x6b
 80220f6:	f040 827f 	bne.w	80225f8 <Argus_GetDefaultCfg+0xae0>
 80220fa:	f890 806d 	ldrb.w	r8, [r0, #109]	@ 0x6d
 80220fe:	4564      	cmp	r4, ip
 8022100:	f008 080f 	and.w	r8, r8, #15
 8022104:	bf14      	ite	ne
 8022106:	f04f 0b20 	movne.w	fp, #32
 802210a:	f04f 0b1c 	moveq.w	fp, #28
 802210e:	46e2      	mov	sl, ip
 8022110:	f048 0850 	orr.w	r8, r8, #80	@ 0x50
 8022114:	f880 b06c 	strb.w	fp, [r0, #108]	@ 0x6c
 8022118:	fa4f f981 	sxtb.w	r9, r1
 802211c:	e6af      	b.n	8021e7e <Argus_GetDefaultCfg+0x366>
 802211e:	f640 780f 	movw	r8, #3855	@ 0xf0f
 8022122:	f8a0 8041 	strh.w	r8, [r0, #65]	@ 0x41
 8022126:	f04f 080f 	mov.w	r8, #15
 802212a:	e654      	b.n	8021dd6 <Argus_GetDefaultCfg+0x2be>
 802212c:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8022130:	e636      	b.n	8021da0 <Argus_GetDefaultCfg+0x288>
 8022132:	f04f 3c0f 	mov.w	ip, #252645135	@ 0xf0f0f0f
 8022136:	2c00      	cmp	r4, #0
 8022138:	e9c0 cc11 	strd	ip, ip, [r0, #68]	@ 0x44
 802213c:	f8c0 c04c 	str.w	ip, [r0, #76]	@ 0x4c
 8022140:	bf14      	ite	ne
 8022142:	f04f 0c0f 	movne.w	ip, #15
 8022146:	f04f 0cff 	moveq.w	ip, #255	@ 0xff
 802214a:	f880 c041 	strb.w	ip, [r0, #65]	@ 0x41
 802214e:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
 8022152:	f04f 0c0f 	mov.w	ip, #15
 8022156:	f880 c043 	strb.w	ip, [r0, #67]	@ 0x43
 802215a:	f880 c050 	strb.w	ip, [r0, #80]	@ 0x50
 802215e:	bf14      	ite	ne
 8022160:	f04f 0cf0 	movne.w	ip, #240	@ 0xf0
 8022164:	f04f 0cff 	moveq.w	ip, #255	@ 0xff
 8022168:	f880 c051 	strb.w	ip, [r0, #81]	@ 0x51
 802216c:	f880 c052 	strb.w	ip, [r0, #82]	@ 0x52
 8022170:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8022174:	f880 c053 	strb.w	ip, [r0, #83]	@ 0x53
 8022178:	f880 c060 	strb.w	ip, [r0, #96]	@ 0x60
 802217c:	f8df c1e8 	ldr.w	ip, [pc, #488]	@ 8022368 <Argus_GetDefaultCfg+0x850>
 8022180:	f8c0 c066 	str.w	ip, [r0, #102]	@ 0x66
 8022184:	f104 0c03 	add.w	ip, r4, #3
 8022188:	f880 c062 	strb.w	ip, [r0, #98]	@ 0x62
 802218c:	f04f 0c84 	mov.w	ip, #132	@ 0x84
 8022190:	f880 c063 	strb.w	ip, [r0, #99]	@ 0x63
 8022194:	e9c0 8815 	strd	r8, r8, [r0, #84]	@ 0x54
 8022198:	f04f 0c10 	mov.w	ip, #16
 802219c:	f880 c064 	strb.w	ip, [r0, #100]	@ 0x64
 80221a0:	f04f 0c00 	mov.w	ip, #0
 80221a4:	f8c0 805c 	str.w	r8, [r0, #92]	@ 0x5c
 80221a8:	f880 c06b 	strb.w	ip, [r0, #107]	@ 0x6b
 80221ac:	fa4f f981 	sxtb.w	r9, r1
 80221b0:	f890 806d 	ldrb.w	r8, [r0, #109]	@ 0x6d
 80221b4:	f04f 0b3f 	mov.w	fp, #63	@ 0x3f
 80221b8:	f008 080f 	and.w	r8, r8, #15
 80221bc:	f048 0840 	orr.w	r8, r8, #64	@ 0x40
 80221c0:	f880 b06c 	strb.w	fp, [r0, #108]	@ 0x6c
 80221c4:	f04f 0a00 	mov.w	sl, #0
 80221c8:	e659      	b.n	8021e7e <Argus_GetDefaultCfg+0x366>
 80221ca:	2a05      	cmp	r2, #5
 80221cc:	f000 82cb 	beq.w	8022766 <Argus_GetDefaultCfg+0xc4e>
 80221d0:	2a04      	cmp	r2, #4
 80221d2:	f000 8289 	beq.w	80226e8 <Argus_GetDefaultCfg+0xbd0>
 80221d6:	2a03      	cmp	r2, #3
 80221d8:	f000 83e7 	beq.w	80229aa <Argus_GetDefaultCfg+0xe92>
 80221dc:	2c00      	cmp	r4, #0
 80221de:	f000 8405 	beq.w	80229ec <Argus_GetDefaultCfg+0xed4>
 80221e2:	4f5d      	ldr	r7, [pc, #372]	@ (8022358 <Argus_GetDefaultCfg+0x840>)
 80221e4:	f8c0 7110 	str.w	r7, [r0, #272]	@ 0x110
 80221e8:	f507 4795 	add.w	r7, r7, #19072	@ 0x4a80
 80221ec:	f8c0 7114 	str.w	r7, [r0, #276]	@ 0x114
 80221f0:	2702      	movs	r7, #2
 80221f2:	7447      	strb	r7, [r0, #17]
 80221f4:	2a01      	cmp	r2, #1
 80221f6:	f04f 0703 	mov.w	r7, #3
 80221fa:	f880 e10c 	strb.w	lr, [r0, #268]	@ 0x10c
 80221fe:	f880 7092 	strb.w	r7, [r0, #146]	@ 0x92
 8022202:	f000 827f 	beq.w	8022704 <Argus_GetDefaultCfg+0xbec>
 8022206:	2750      	movs	r7, #80	@ 0x50
 8022208:	2a03      	cmp	r2, #3
 802220a:	8247      	strh	r7, [r0, #18]
 802220c:	f040 82bb 	bne.w	8022786 <Argus_GetDefaultCfg+0xc6e>
 8022210:	010a      	lsls	r2, r1, #4
 8022212:	f002 0210 	and.w	r2, r2, #16
 8022216:	7342      	strb	r2, [r0, #13]
 8022218:	2208      	movs	r2, #8
 802221a:	7382      	strb	r2, [r0, #14]
 802221c:	2220      	movs	r2, #32
 802221e:	7302      	strb	r2, [r0, #12]
 8022220:	4a4e      	ldr	r2, [pc, #312]	@ (802235c <Argus_GetDefaultCfg+0x844>)
 8022222:	f8c0 2098 	str.w	r2, [r0, #152]	@ 0x98
 8022226:	4a4e      	ldr	r2, [pc, #312]	@ (8022360 <Argus_GetDefaultCfg+0x848>)
 8022228:	6182      	str	r2, [r0, #24]
 802222a:	2720      	movs	r7, #32
 802222c:	2240      	movs	r2, #64	@ 0x40
 802222e:	f8a0 20dc 	strh.w	r2, [r0, #220]	@ 0xdc
 8022232:	2202      	movs	r2, #2
 8022234:	f8a0 70de 	strh.w	r7, [r0, #222]	@ 0xde
 8022238:	f880 20ac 	strb.w	r2, [r0, #172]	@ 0xac
 802223c:	2c00      	cmp	r4, #0
 802223e:	f000 8468 	beq.w	8022b12 <Argus_GetDefaultCfg+0xffa>
 8022242:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8022246:	f8a0 2031 	strh.w	r2, [r0, #49]	@ 0x31
 802224a:	f880 2033 	strb.w	r2, [r0, #51]	@ 0x33
 802224e:	4a45      	ldr	r2, [pc, #276]	@ (8022364 <Argus_GetDefaultCfg+0x84c>)
 8022250:	f8c0 20f8 	str.w	r2, [r0, #248]	@ 0xf8
 8022254:	f44f 5261 	mov.w	r2, #14400	@ 0x3840
 8022258:	f8a0 20fc 	strh.w	r2, [r0, #252]	@ 0xfc
 802225c:	2210      	movs	r2, #16
 802225e:	f8a0 2102 	strh.w	r2, [r0, #258]	@ 0x102
 8022262:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8022266:	f8a0 2104 	strh.w	r2, [r0, #260]	@ 0x104
 802226a:	f242 0264 	movw	r2, #8292	@ 0x2064
 802226e:	f8a0 202d 	strh.w	r2, [r0, #45]	@ 0x2d
 8022272:	f04f 0ef0 	mov.w	lr, #240	@ 0xf0
 8022276:	4267      	negs	r7, r4
 8022278:	22f0      	movs	r2, #240	@ 0xf0
 802227a:	b2ff      	uxtb	r7, r7
 802227c:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 8022280:	f880 e034 	strb.w	lr, [r0, #52]	@ 0x34
 8022284:	f880 e036 	strb.w	lr, [r0, #54]	@ 0x36
 8022288:	f880 e038 	strb.w	lr, [r0, #56]	@ 0x38
 802228c:	f880 e03a 	strb.w	lr, [r0, #58]	@ 0x3a
 8022290:	f880 e03c 	strb.w	lr, [r0, #60]	@ 0x3c
 8022294:	f880 e03e 	strb.w	lr, [r0, #62]	@ 0x3e
 8022298:	f880 7041 	strb.w	r7, [r0, #65]	@ 0x41
 802229c:	f880 2035 	strb.w	r2, [r0, #53]	@ 0x35
 80222a0:	f880 2037 	strb.w	r2, [r0, #55]	@ 0x37
 80222a4:	f880 2039 	strb.w	r2, [r0, #57]	@ 0x39
 80222a8:	f880 8042 	strb.w	r8, [r0, #66]	@ 0x42
 80222ac:	2c00      	cmp	r4, #0
 80222ae:	f000 8407 	beq.w	8022ac0 <Argus_GetDefaultCfg+0xfa8>
 80222b2:	f880 7052 	strb.w	r7, [r0, #82]	@ 0x52
 80222b6:	f640 770f 	movw	r7, #3855	@ 0xf0f
 80222ba:	f8a0 7043 	strh.w	r7, [r0, #67]	@ 0x43
 80222be:	f8a0 704a 	strh.w	r7, [r0, #74]	@ 0x4a
 80222c2:	f04f 370f 	mov.w	r7, #252645135	@ 0xf0f0f0f
 80222c6:	f8c0 7045 	str.w	r7, [r0, #69]	@ 0x45
 80222ca:	64c7      	str	r7, [r0, #76]	@ 0x4c
 80222cc:	270f      	movs	r7, #15
 80222ce:	f880 7049 	strb.w	r7, [r0, #73]	@ 0x49
 80222d2:	f64f 770f 	movw	r7, #65295	@ 0xff0f
 80222d6:	f880 e053 	strb.w	lr, [r0, #83]	@ 0x53
 80222da:	f880 2054 	strb.w	r2, [r0, #84]	@ 0x54
 80222de:	f880 e055 	strb.w	lr, [r0, #85]	@ 0x55
 80222e2:	f880 2056 	strb.w	r2, [r0, #86]	@ 0x56
 80222e6:	f880 e057 	strb.w	lr, [r0, #87]	@ 0x57
 80222ea:	f880 2058 	strb.w	r2, [r0, #88]	@ 0x58
 80222ee:	f880 e059 	strb.w	lr, [r0, #89]	@ 0x59
 80222f2:	f8a0 7050 	strh.w	r7, [r0, #80]	@ 0x50
 80222f6:	f880 205a 	strb.w	r2, [r0, #90]	@ 0x5a
 80222fa:	f880 205c 	strb.w	r2, [r0, #92]	@ 0x5c
 80222fe:	f880 205e 	strb.w	r2, [r0, #94]	@ 0x5e
 8022302:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
 8022306:	f1c4 0206 	rsb	r2, r4, #6
 802230a:	f880 2062 	strb.w	r2, [r0, #98]	@ 0x62
 802230e:	2284      	movs	r2, #132	@ 0x84
 8022310:	f00c 0c0f 	and.w	ip, ip, #15
 8022314:	f880 2063 	strb.w	r2, [r0, #99]	@ 0x63
 8022318:	22fa      	movs	r2, #250	@ 0xfa
 802231a:	2c00      	cmp	r4, #0
 802231c:	f06c 0c5f 	orn	ip, ip, #95	@ 0x5f
 8022320:	f880 206b 	strb.w	r2, [r0, #107]	@ 0x6b
 8022324:	f04f 02be 	mov.w	r2, #190	@ 0xbe
 8022328:	f880 206c 	strb.w	r2, [r0, #108]	@ 0x6c
 802232c:	f880 c06d 	strb.w	ip, [r0, #109]	@ 0x6d
 8022330:	f880 e05b 	strb.w	lr, [r0, #91]	@ 0x5b
 8022334:	f880 e05d 	strb.w	lr, [r0, #93]	@ 0x5d
 8022338:	f880 e05f 	strb.w	lr, [r0, #95]	@ 0x5f
 802233c:	bf14      	ite	ne
 802233e:	220f      	movne	r2, #15
 8022340:	2215      	moveq	r2, #21
 8022342:	e2eb      	b.n	802291c <Argus_GetDefaultCfg+0xe04>
 8022344:	f0009999 	.word	0xf0009999
 8022348:	01e00280 	.word	0x01e00280
 802234c:	20000f5c 	.word	0x20000f5c
 8022350:	0016e666 	.word	0x0016e666
 8022354:	001c4ccd 	.word	0x001c4ccd
 8022358:	00500080 	.word	0x00500080
 802235c:	0002828f 	.word	0x0002828f
 8022360:	00c001e0 	.word	0x00c001e0
 8022364:	12c01680 	.word	0x12c01680
 8022368:	010f51fe 	.word	0x010f51fe
 802236c:	2500      	movs	r5, #0
 802236e:	f880 511e 	strb.w	r5, [r0, #286]	@ 0x11e
 8022372:	46ac      	mov	ip, r5
 8022374:	2502      	movs	r5, #2
 8022376:	f880 50ff 	strb.w	r5, [r0, #255]	@ 0xff
 802237a:	f880 5092 	strb.w	r5, [r0, #146]	@ 0x92
 802237e:	4dcf      	ldr	r5, [pc, #828]	@ (80226bc <Argus_GetDefaultCfg+0xba4>)
 8022380:	f8df 8358 	ldr.w	r8, [pc, #856]	@ 80226dc <Argus_GetDefaultCfg+0xbc4>
 8022384:	f8c0 5114 	str.w	r5, [r0, #276]	@ 0x114
 8022388:	4dcd      	ldr	r5, [pc, #820]	@ (80226c0 <Argus_GetDefaultCfg+0xba8>)
 802238a:	f880 e10c 	strb.w	lr, [r0, #268]	@ 0x10c
 802238e:	e9c0 853d 	strd	r8, r5, [r0, #244]	@ 0xf4
 8022392:	4dcc      	ldr	r5, [pc, #816]	@ (80226c4 <Argus_GetDefaultCfg+0xbac>)
 8022394:	f8c0 5106 	str.w	r5, [r0, #262]	@ 0x106
 8022398:	4dcb      	ldr	r5, [pc, #812]	@ (80226c8 <Argus_GetDefaultCfg+0xbb0>)
 802239a:	6085      	str	r5, [r0, #8]
 802239c:	f44f 5548 	mov.w	r5, #12800	@ 0x3200
 80223a0:	f8a0 50fc 	strh.w	r5, [r0, #252]	@ 0xfc
 80223a4:	2501      	movs	r5, #1
 80223a6:	2c00      	cmp	r4, #0
 80223a8:	f880 50fe 	strb.w	r5, [r0, #254]	@ 0xfe
 80223ac:	f44f 7580 	mov.w	r5, #256	@ 0x100
 80223b0:	f8a0 5100 	strh.w	r5, [r0, #256]	@ 0x100
 80223b4:	bf14      	ite	ne
 80223b6:	2509      	movne	r5, #9
 80223b8:	250b      	moveq	r5, #11
 80223ba:	f8a0 5102 	strh.w	r5, [r0, #258]	@ 0x102
 80223be:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 80223c2:	f8a0 5104 	strh.w	r5, [r0, #260]	@ 0x104
 80223c6:	f240 2566 	movw	r5, #614	@ 0x266
 80223ca:	8205      	strh	r5, [r0, #16]
 80223cc:	2c00      	cmp	r4, #0
 80223ce:	f000 8141 	beq.w	8022654 <Argus_GetDefaultCfg+0xb3c>
 80223d2:	2508      	movs	r5, #8
 80223d4:	7305      	strb	r5, [r0, #12]
 80223d6:	81c5      	strh	r5, [r0, #14]
 80223d8:	4dbc      	ldr	r5, [pc, #752]	@ (80226cc <Argus_GetDefaultCfg+0xbb4>)
 80223da:	f8c0 5022 	str.w	r5, [r0, #34]	@ 0x22
 80223de:	2540      	movs	r5, #64	@ 0x40
 80223e0:	8245      	strh	r5, [r0, #18]
 80223e2:	2501      	movs	r5, #1
 80223e4:	f880 5021 	strb.w	r5, [r0, #33]	@ 0x21
 80223e8:	e435      	b.n	8021c56 <Argus_GetDefaultCfg+0x13e>
 80223ea:	2400      	movs	r4, #0
 80223ec:	f8c0 4124 	str.w	r4, [r0, #292]	@ 0x124
 80223f0:	f011 0401 	ands.w	r4, r1, #1
 80223f4:	f040 8129 	bne.w	802264a <Argus_GetDefaultCfg+0xb32>
 80223f8:	2580      	movs	r5, #128	@ 0x80
 80223fa:	f8a0 5110 	strh.w	r5, [r0, #272]	@ 0x110
 80223fe:	2560      	movs	r5, #96	@ 0x60
 8022400:	f8a0 5112 	strh.w	r5, [r0, #274]	@ 0x112
 8022404:	f04e 0e40 	orr.w	lr, lr, #64	@ 0x40
 8022408:	2500      	movs	r5, #0
 802240a:	fa4f fe8e 	sxtb.w	lr, lr
 802240e:	f8a0 510e 	strh.w	r5, [r0, #270]	@ 0x10e
 8022412:	f7ff bbb1 	b.w	8021b78 <Argus_GetDefaultCfg+0x60>
 8022416:	f8df c2c8 	ldr.w	ip, [pc, #712]	@ 80226e0 <Argus_GetDefaultCfg+0xbc8>
 802241a:	f8c0 c0e8 	str.w	ip, [r0, #232]	@ 0xe8
 802241e:	2600      	movs	r6, #0
 8022420:	f04f 0c06 	mov.w	ip, #6
 8022424:	f8c0 60e0 	str.w	r6, [r0, #224]	@ 0xe0
 8022428:	f880 60e4 	strb.w	r6, [r0, #228]	@ 0xe4
 802242c:	f8c0 60f0 	str.w	r6, [r0, #240]	@ 0xf0
 8022430:	f880 c0db 	strb.w	ip, [r0, #219]	@ 0xdb
 8022434:	f44f 7ca0 	mov.w	ip, #320	@ 0x140
 8022438:	f8a0 c0ec 	strh.w	ip, [r0, #236]	@ 0xec
 802243c:	f241 4c0d 	movw	ip, #5133	@ 0x140d
 8022440:	f8a0 c0e5 	strh.w	ip, [r0, #229]	@ 0xe5
 8022444:	f04f 0c01 	mov.w	ip, #1
 8022448:	e47b      	b.n	8021d42 <Argus_GetDefaultCfg+0x22a>
 802244a:	f04e 0e30 	orr.w	lr, lr, #48	@ 0x30
 802244e:	f44f 557a 	mov.w	r5, #16000	@ 0x3e80
 8022452:	f880 e10c 	strb.w	lr, [r0, #268]	@ 0x10c
 8022456:	f8a0 5114 	strh.w	r5, [r0, #276]	@ 0x114
 802245a:	2c00      	cmp	r4, #0
 802245c:	f040 8108 	bne.w	8022670 <Argus_GetDefaultCfg+0xb58>
 8022460:	2560      	movs	r5, #96	@ 0x60
 8022462:	f8a0 5116 	strh.w	r5, [r0, #278]	@ 0x116
 8022466:	f240 1501 	movw	r5, #257	@ 0x101
 802246a:	2a04      	cmp	r2, #4
 802246c:	f8a0 50f4 	strh.w	r5, [r0, #244]	@ 0xf4
 8022470:	f000 8105 	beq.w	802267e <Argus_GetDefaultCfg+0xb66>
 8022474:	2a03      	cmp	r2, #3
 8022476:	f040 8389 	bne.w	8022b8c <Argus_GetDefaultCfg+0x1074>
 802247a:	4d91      	ldr	r5, [pc, #580]	@ (80226c0 <Argus_GetDefaultCfg+0xba8>)
 802247c:	f8c0 50f8 	str.w	r5, [r0, #248]	@ 0xf8
 8022480:	f240 3501 	movw	r5, #769	@ 0x301
 8022484:	f8a0 50f6 	strh.w	r5, [r0, #246]	@ 0xf6
 8022488:	f44f 5548 	mov.w	r5, #12800	@ 0x3200
 802248c:	f8a0 50fc 	strh.w	r5, [r0, #252]	@ 0xfc
 8022490:	2501      	movs	r5, #1
 8022492:	f880 50fe 	strb.w	r5, [r0, #254]	@ 0xfe
 8022496:	f44f 7580 	mov.w	r5, #256	@ 0x100
 802249a:	f8a0 5100 	strh.w	r5, [r0, #256]	@ 0x100
 802249e:	2c00      	cmp	r4, #0
 80224a0:	f000 8263 	beq.w	802296a <Argus_GetDefaultCfg+0xe52>
 80224a4:	2502      	movs	r5, #2
 80224a6:	f880 50ff 	strb.w	r5, [r0, #255]	@ 0xff
 80224aa:	f880 5092 	strb.w	r5, [r0, #146]	@ 0x92
 80224ae:	4d88      	ldr	r5, [pc, #544]	@ (80226d0 <Argus_GetDefaultCfg+0xbb8>)
 80224b0:	f8c0 5102 	str.w	r5, [r0, #258]	@ 0x102
 80224b4:	4d83      	ldr	r5, [pc, #524]	@ (80226c4 <Argus_GetDefaultCfg+0xbac>)
 80224b6:	f8c0 5106 	str.w	r5, [r0, #262]	@ 0x106
 80224ba:	4d83      	ldr	r5, [pc, #524]	@ (80226c8 <Argus_GetDefaultCfg+0xbb0>)
 80224bc:	6085      	str	r5, [r0, #8]
 80224be:	f240 2566 	movw	r5, #614	@ 0x266
 80224c2:	8205      	strh	r5, [r0, #16]
 80224c4:	2c00      	cmp	r4, #0
 80224c6:	f000 8367 	beq.w	8022b98 <Argus_GetDefaultCfg+0x1080>
 80224ca:	4d80      	ldr	r5, [pc, #512]	@ (80226cc <Argus_GetDefaultCfg+0xbb4>)
 80224cc:	f8c0 5022 	str.w	r5, [r0, #34]	@ 0x22
 80224d0:	2550      	movs	r5, #80	@ 0x50
 80224d2:	8245      	strh	r5, [r0, #18]
 80224d4:	2501      	movs	r5, #1
 80224d6:	f880 5021 	strb.w	r5, [r0, #33]	@ 0x21
 80224da:	2a01      	cmp	r2, #1
 80224dc:	f04f 0508 	mov.w	r5, #8
 80224e0:	7385      	strb	r5, [r0, #14]
 80224e2:	d020      	beq.n	8022526 <Argus_GetDefaultCfg+0xa0e>
 80224e4:	7305      	strb	r5, [r0, #12]
 80224e6:	2500      	movs	r5, #0
 80224e8:	73c5      	strb	r5, [r0, #15]
 80224ea:	f7ff bbb2 	b.w	8021c52 <Argus_GetDefaultCfg+0x13a>
 80224ee:	4d75      	ldr	r5, [pc, #468]	@ (80226c4 <Argus_GetDefaultCfg+0xbac>)
 80224f0:	f8c0 5106 	str.w	r5, [r0, #262]	@ 0x106
 80224f4:	2a01      	cmp	r2, #1
 80224f6:	f04f 0502 	mov.w	r5, #2
 80224fa:	7445      	strb	r5, [r0, #17]
 80224fc:	f040 8246 	bne.w	802298c <Argus_GetDefaultCfg+0xe74>
 8022500:	4d71      	ldr	r5, [pc, #452]	@ (80226c8 <Argus_GetDefaultCfg+0xbb0>)
 8022502:	6085      	str	r5, [r0, #8]
 8022504:	2566      	movs	r5, #102	@ 0x66
 8022506:	f880 2092 	strb.w	r2, [r0, #146]	@ 0x92
 802250a:	7405      	strb	r5, [r0, #16]
 802250c:	2c00      	cmp	r4, #0
 802250e:	f000 80ca 	beq.w	80226a6 <Argus_GetDefaultCfg+0xb8e>
 8022512:	4d6e      	ldr	r5, [pc, #440]	@ (80226cc <Argus_GetDefaultCfg+0xbb4>)
 8022514:	f8c0 5022 	str.w	r5, [r0, #34]	@ 0x22
 8022518:	2550      	movs	r5, #80	@ 0x50
 802251a:	8245      	strh	r5, [r0, #18]
 802251c:	2508      	movs	r5, #8
 802251e:	f880 2021 	strb.w	r2, [r0, #33]	@ 0x21
 8022522:	7385      	strb	r5, [r0, #14]
 8022524:	2508      	movs	r5, #8
 8022526:	7305      	strb	r5, [r0, #12]
 8022528:	2500      	movs	r5, #0
 802252a:	f8df 81b8 	ldr.w	r8, [pc, #440]	@ 80226e4 <Argus_GetDefaultCfg+0xbcc>
 802252e:	73c5      	strb	r5, [r0, #15]
 8022530:	4d68      	ldr	r5, [pc, #416]	@ (80226d4 <Argus_GetDefaultCfg+0xbbc>)
 8022532:	e9c0 8506 	strd	r8, r5, [r0, #24]
 8022536:	2500      	movs	r5, #0
 8022538:	7345      	strb	r5, [r0, #13]
 802253a:	f649 4540 	movw	r5, #40000	@ 0x9c40
 802253e:	6145      	str	r5, [r0, #20]
 8022540:	2540      	movs	r5, #64	@ 0x40
 8022542:	f880 5020 	strb.w	r5, [r0, #32]
 8022546:	f04f 0c02 	mov.w	ip, #2
 802254a:	2c00      	cmp	r4, #0
 802254c:	d038      	beq.n	80225c0 <Argus_GetDefaultCfg+0xaa8>
 802254e:	f7ff bb8f 	b.w	8021c70 <Argus_GetDefaultCfg+0x158>
 8022552:	260b      	movs	r6, #11
 8022554:	f8a0 6102 	strh.w	r6, [r0, #258]	@ 0x102
 8022558:	f44f 6680 	mov.w	r6, #1024	@ 0x400
 802255c:	f8a0 6104 	strh.w	r6, [r0, #260]	@ 0x104
 8022560:	2602      	movs	r6, #2
 8022562:	f880 60ff 	strb.w	r6, [r0, #255]	@ 0xff
 8022566:	2a00      	cmp	r2, #0
 8022568:	d1c1      	bne.n	80224ee <Argus_GetDefaultCfg+0x9d6>
 802256a:	f880 5021 	strb.w	r5, [r0, #33]	@ 0x21
 802256e:	4d56      	ldr	r5, [pc, #344]	@ (80226c8 <Argus_GetDefaultCfg+0xbb0>)
 8022570:	6085      	str	r5, [r0, #8]
 8022572:	4d56      	ldr	r5, [pc, #344]	@ (80226cc <Argus_GetDefaultCfg+0xbb4>)
 8022574:	f8c0 5022 	str.w	r5, [r0, #34]	@ 0x22
 8022578:	f04f 554c 	mov.w	r5, #855638016	@ 0x33000000
 802257c:	f8c0 5106 	str.w	r5, [r0, #262]	@ 0x106
 8022580:	f240 2566 	movw	r5, #614	@ 0x266
 8022584:	8205      	strh	r5, [r0, #16]
 8022586:	2560      	movs	r5, #96	@ 0x60
 8022588:	8245      	strh	r5, [r0, #18]
 802258a:	2508      	movs	r5, #8
 802258c:	f880 6092 	strb.w	r6, [r0, #146]	@ 0x92
 8022590:	7385      	strb	r5, [r0, #14]
 8022592:	2520      	movs	r5, #32
 8022594:	2a03      	cmp	r2, #3
 8022596:	7305      	strb	r5, [r0, #12]
 8022598:	f04f 0500 	mov.w	r5, #0
 802259c:	73c5      	strb	r5, [r0, #15]
 802259e:	f04f 0c02 	mov.w	ip, #2
 80225a2:	bf0c      	ite	eq
 80225a4:	2510      	moveq	r5, #16
 80225a6:	2518      	movne	r5, #24
 80225a8:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 80226e4 <Argus_GetDefaultCfg+0xbcc>
 80225ac:	7345      	strb	r5, [r0, #13]
 80225ae:	4d49      	ldr	r5, [pc, #292]	@ (80226d4 <Argus_GetDefaultCfg+0xbbc>)
 80225b0:	e9c0 9506 	strd	r9, r5, [r0, #24]
 80225b4:	f649 4540 	movw	r5, #40000	@ 0x9c40
 80225b8:	6145      	str	r5, [r0, #20]
 80225ba:	2540      	movs	r5, #64	@ 0x40
 80225bc:	f880 5020 	strb.w	r5, [r0, #32]
 80225c0:	4d45      	ldr	r5, [pc, #276]	@ (80226d8 <Argus_GetDefaultCfg+0xbc0>)
 80225c2:	f44f 06a6 	mov.w	r6, #5439488	@ 0x530000
 80225c6:	e9c0 6525 	strd	r6, r5, [r0, #148]	@ 0x94
 80225ca:	f44f 7616 	mov.w	r6, #600	@ 0x258
 80225ce:	f8a0 609c 	strh.w	r6, [r0, #156]	@ 0x9c
 80225d2:	f240 7601 	movw	r6, #1793	@ 0x701
 80225d6:	f8a0 60a0 	strh.w	r6, [r0, #160]	@ 0xa0
 80225da:	2606      	movs	r6, #6
 80225dc:	f7ff bb55 	b.w	8021c8a <Argus_GetDefaultCfg+0x172>
 80225e0:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
 80225e4:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 80225e8:	f003 031f 	and.w	r3, r3, #31
 80225ec:	2c00      	cmp	r4, #0
 80225ee:	f47f acf5 	bne.w	8021fdc <Argus_GetDefaultCfg+0x4c4>
 80225f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80225f6:	e51e      	b.n	8022036 <Argus_GetDefaultCfg+0x51e>
 80225f8:	2a00      	cmp	r2, #0
 80225fa:	f040 82a6 	bne.w	8022b4a <Argus_GetDefaultCfg+0x1032>
 80225fe:	2c00      	cmp	r4, #0
 8022600:	f890 806d 	ldrb.w	r8, [r0, #109]	@ 0x6d
 8022604:	bf14      	ite	ne
 8022606:	f04f 0b20 	movne.w	fp, #32
 802260a:	f04f 0b1c 	moveq.w	fp, #28
 802260e:	f008 080f 	and.w	r8, r8, #15
 8022612:	f880 b06c 	strb.w	fp, [r0, #108]	@ 0x6c
 8022616:	fa4f f981 	sxtb.w	r9, r1
 802261a:	4692      	mov	sl, r2
 802261c:	f048 0850 	orr.w	r8, r8, #80	@ 0x50
 8022620:	e42d      	b.n	8021e7e <Argus_GetDefaultCfg+0x366>
 8022622:	25a0      	movs	r5, #160	@ 0xa0
 8022624:	f8a0 5110 	strh.w	r5, [r0, #272]	@ 0x110
 8022628:	2a03      	cmp	r2, #3
 802262a:	f04f 0560 	mov.w	r5, #96	@ 0x60
 802262e:	f8a0 5112 	strh.w	r5, [r0, #274]	@ 0x112
 8022632:	f47f aa9b 	bne.w	8021b6c <Argus_GetDefaultCfg+0x54>
 8022636:	f04e 0e40 	orr.w	lr, lr, #64	@ 0x40
 802263a:	f44f 45cd 	mov.w	r5, #26240	@ 0x6680
 802263e:	fa4f fe8e 	sxtb.w	lr, lr
 8022642:	f8a0 510e 	strh.w	r5, [r0, #270]	@ 0x10e
 8022646:	f7ff ba97 	b.w	8021b78 <Argus_GetDefaultCfg+0x60>
 802264a:	2560      	movs	r5, #96	@ 0x60
 802264c:	f8a0 5110 	strh.w	r5, [r0, #272]	@ 0x110
 8022650:	2540      	movs	r5, #64	@ 0x40
 8022652:	e6d5      	b.n	8022400 <Argus_GetDefaultCfg+0x8e8>
 8022654:	4d1d      	ldr	r5, [pc, #116]	@ (80226cc <Argus_GetDefaultCfg+0xbb4>)
 8022656:	f8c0 5022 	str.w	r5, [r0, #34]	@ 0x22
 802265a:	2560      	movs	r5, #96	@ 0x60
 802265c:	8245      	strh	r5, [r0, #18]
 802265e:	2501      	movs	r5, #1
 8022660:	f880 5021 	strb.w	r5, [r0, #33]	@ 0x21
 8022664:	2520      	movs	r5, #32
 8022666:	7305      	strb	r5, [r0, #12]
 8022668:	2508      	movs	r5, #8
 802266a:	81c5      	strh	r5, [r0, #14]
 802266c:	2518      	movs	r5, #24
 802266e:	e79b      	b.n	80225a8 <Argus_GetDefaultCfg+0xa90>
 8022670:	2550      	movs	r5, #80	@ 0x50
 8022672:	f8a0 5116 	strh.w	r5, [r0, #278]	@ 0x116
 8022676:	f240 1501 	movw	r5, #257	@ 0x101
 802267a:	f8a0 50f4 	strh.w	r5, [r0, #244]	@ 0xf4
 802267e:	2501      	movs	r5, #1
 8022680:	f880 50f6 	strb.w	r5, [r0, #246]	@ 0xf6
 8022684:	2503      	movs	r5, #3
 8022686:	f7ff baaf 	b.w	8021be8 <Argus_GetDefaultCfg+0xd0>
 802268a:	253d      	movs	r5, #61	@ 0x3d
 802268c:	f880 510e 	strb.w	r5, [r0, #270]	@ 0x10e
 8022690:	2533      	movs	r5, #51	@ 0x33
 8022692:	e4b4      	b.n	8021ffe <Argus_GetDefaultCfg+0x4e6>
 8022694:	f990 3085 	ldrsb.w	r3, [r0, #133]	@ 0x85
 8022698:	f04f 0801 	mov.w	r8, #1
 802269c:	f063 031f 	orn	r3, r3, #31
 80226a0:	f880 8084 	strb.w	r8, [r0, #132]	@ 0x84
 80226a4:	e4c7      	b.n	8022036 <Argus_GetDefaultCfg+0x51e>
 80226a6:	4d09      	ldr	r5, [pc, #36]	@ (80226cc <Argus_GetDefaultCfg+0xbb4>)
 80226a8:	f8c0 5022 	str.w	r5, [r0, #34]	@ 0x22
 80226ac:	2560      	movs	r5, #96	@ 0x60
 80226ae:	8245      	strh	r5, [r0, #18]
 80226b0:	2508      	movs	r5, #8
 80226b2:	f880 2021 	strb.w	r2, [r0, #33]	@ 0x21
 80226b6:	7385      	strb	r5, [r0, #14]
 80226b8:	e734      	b.n	8022524 <Argus_GetDefaultCfg+0xa0c>
 80226ba:	bf00      	nop
 80226bc:	00503e80 	.word	0x00503e80
 80226c0:	12c01680 	.word	0x12c01680
 80226c4:	33030002 	.word	0x33030002
 80226c8:	016e3600 	.word	0x016e3600
 80226cc:	003201f4 	.word	0x003201f4
 80226d0:	0400000d 	.word	0x0400000d
 80226d4:	13880064 	.word	0x13880064
 80226d8:	0002828f 	.word	0x0002828f
 80226dc:	1f030101 	.word	0x1f030101
 80226e0:	10e014a0 	.word	0x10e014a0
 80226e4:	00800140 	.word	0x00800140
 80226e8:	4fd0      	ldr	r7, [pc, #832]	@ (8022a2c <Argus_GetDefaultCfg+0xf14>)
 80226ea:	f8c0 7110 	str.w	r7, [r0, #272]	@ 0x110
 80226ee:	f507 4795 	add.w	r7, r7, #19072	@ 0x4a80
 80226f2:	f8c0 7114 	str.w	r7, [r0, #276]	@ 0x114
 80226f6:	2702      	movs	r7, #2
 80226f8:	7447      	strb	r7, [r0, #17]
 80226fa:	2703      	movs	r7, #3
 80226fc:	f880 e10c 	strb.w	lr, [r0, #268]	@ 0x10c
 8022700:	f880 7092 	strb.w	r7, [r0, #146]	@ 0x92
 8022704:	2750      	movs	r7, #80	@ 0x50
 8022706:	8247      	strh	r7, [r0, #18]
 8022708:	2708      	movs	r7, #8
 802270a:	7387      	strb	r7, [r0, #14]
 802270c:	2c00      	cmp	r4, #0
 802270e:	f000 808d 	beq.w	802282c <Argus_GetDefaultCfg+0xd14>
 8022712:	4fc7      	ldr	r7, [pc, #796]	@ (8022a30 <Argus_GetDefaultCfg+0xf18>)
 8022714:	f8c0 7098 	str.w	r7, [r0, #152]	@ 0x98
 8022718:	4fc6      	ldr	r7, [pc, #792]	@ (8022a34 <Argus_GetDefaultCfg+0xf1c>)
 802271a:	6187      	str	r7, [r0, #24]
 802271c:	4fc6      	ldr	r7, [pc, #792]	@ (8022a38 <Argus_GetDefaultCfg+0xf20>)
 802271e:	f8c0 70dc 	str.w	r7, [r0, #220]	@ 0xdc
 8022722:	2a03      	cmp	r2, #3
 8022724:	f44f 57c1 	mov.w	r7, #6176	@ 0x1820
 8022728:	8187      	strh	r7, [r0, #12]
 802272a:	f040 8173 	bne.w	8022a14 <Argus_GetDefaultCfg+0xefc>
 802272e:	2202      	movs	r2, #2
 8022730:	f880 20ac 	strb.w	r2, [r0, #172]	@ 0xac
 8022734:	e585      	b.n	8022242 <Argus_GetDefaultCfg+0x72a>
 8022736:	f8df c330 	ldr.w	ip, [pc, #816]	@ 8022a68 <Argus_GetDefaultCfg+0xf50>
 802273a:	4ec0      	ldr	r6, [pc, #768]	@ (8022a3c <Argus_GetDefaultCfg+0xf24>)
 802273c:	f8c0 c0e8 	str.w	ip, [r0, #232]	@ 0xe8
 8022740:	f44f 7ca0 	mov.w	ip, #320	@ 0x140
 8022744:	f8c0 60e0 	str.w	r6, [r0, #224]	@ 0xe0
 8022748:	f8c0 60f0 	str.w	r6, [r0, #240]	@ 0xf0
 802274c:	f8a0 c0ec 	strh.w	ip, [r0, #236]	@ 0xec
 8022750:	2601      	movs	r6, #1
 8022752:	f241 4c0d 	movw	ip, #5133	@ 0x140d
 8022756:	f8a0 c0e5 	strh.w	ip, [r0, #229]	@ 0xe5
 802275a:	f880 60e4 	strb.w	r6, [r0, #228]	@ 0xe4
 802275e:	f04f 0c02 	mov.w	ip, #2
 8022762:	f7ff baee 	b.w	8021d42 <Argus_GetDefaultCfg+0x22a>
 8022766:	2c00      	cmp	r4, #0
 8022768:	d04b      	beq.n	8022802 <Argus_GetDefaultCfg+0xcea>
 802276a:	4ab5      	ldr	r2, [pc, #724]	@ (8022a40 <Argus_GetDefaultCfg+0xf28>)
 802276c:	f8df 82fc 	ldr.w	r8, [pc, #764]	@ 8022a6c <Argus_GetDefaultCfg+0xf54>
 8022770:	f880 e10c 	strb.w	lr, [r0, #268]	@ 0x10c
 8022774:	e9c0 8244 	strd	r8, r2, [r0, #272]	@ 0x110
 8022778:	2202      	movs	r2, #2
 802277a:	7442      	strb	r2, [r0, #17]
 802277c:	2203      	movs	r2, #3
 802277e:	f880 2092 	strb.w	r2, [r0, #146]	@ 0x92
 8022782:	2250      	movs	r2, #80	@ 0x50
 8022784:	8242      	strh	r2, [r0, #18]
 8022786:	4aaa      	ldr	r2, [pc, #680]	@ (8022a30 <Argus_GetDefaultCfg+0xf18>)
 8022788:	f8c0 2098 	str.w	r2, [r0, #152]	@ 0x98
 802278c:	4aa9      	ldr	r2, [pc, #676]	@ (8022a34 <Argus_GetDefaultCfg+0xf1c>)
 802278e:	6182      	str	r2, [r0, #24]
 8022790:	4aa9      	ldr	r2, [pc, #676]	@ (8022a38 <Argus_GetDefaultCfg+0xf20>)
 8022792:	f8c0 20dc 	str.w	r2, [r0, #220]	@ 0xdc
 8022796:	4aab      	ldr	r2, [pc, #684]	@ (8022a44 <Argus_GetDefaultCfg+0xf2c>)
 8022798:	f8c0 20f8 	str.w	r2, [r0, #248]	@ 0xf8
 802279c:	f44f 52c1 	mov.w	r2, #6176	@ 0x1820
 80227a0:	8182      	strh	r2, [r0, #12]
 80227a2:	2208      	movs	r2, #8
 80227a4:	7382      	strb	r2, [r0, #14]
 80227a6:	2201      	movs	r2, #1
 80227a8:	f880 20ac 	strb.w	r2, [r0, #172]	@ 0xac
 80227ac:	f44f 5261 	mov.w	r2, #14400	@ 0x3840
 80227b0:	f8a0 20fc 	strh.w	r2, [r0, #252]	@ 0xfc
 80227b4:	2c00      	cmp	r4, #0
 80227b6:	d051      	beq.n	802285c <Argus_GetDefaultCfg+0xd44>
 80227b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80227bc:	f8a0 2031 	strh.w	r2, [r0, #49]	@ 0x31
 80227c0:	f880 2033 	strb.w	r2, [r0, #51]	@ 0x33
 80227c4:	f8a0 2041 	strh.w	r2, [r0, #65]	@ 0x41
 80227c8:	f880 2043 	strb.w	r2, [r0, #67]	@ 0x43
 80227cc:	22f0      	movs	r2, #240	@ 0xf0
 80227ce:	270f      	movs	r7, #15
 80227d0:	f880 203a 	strb.w	r2, [r0, #58]	@ 0x3a
 80227d4:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
 80227d8:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
 80227dc:	4696      	mov	lr, r2
 80227de:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 80227e2:	6342      	str	r2, [r0, #52]	@ 0x34
 80227e4:	4690      	mov	r8, r2
 80227e6:	f880 7044 	strb.w	r7, [r0, #68]	@ 0x44
 80227ea:	463a      	mov	r2, r7
 80227ec:	4f96      	ldr	r7, [pc, #600]	@ (8022a48 <Argus_GetDefaultCfg+0xf30>)
 80227ee:	f8c0 7102 	str.w	r7, [r0, #258]	@ 0x102
 80227f2:	f242 0764 	movw	r7, #8292	@ 0x2064
 80227f6:	f8a0 702d 	strh.w	r7, [r0, #45]	@ 0x2d
 80227fa:	f24f 07f0 	movw	r7, #61680	@ 0xf0f0
 80227fe:	8707      	strh	r7, [r0, #56]	@ 0x38
 8022800:	e04e      	b.n	80228a0 <Argus_GetDefaultCfg+0xd88>
 8022802:	4f92      	ldr	r7, [pc, #584]	@ (8022a4c <Argus_GetDefaultCfg+0xf34>)
 8022804:	f8c0 7110 	str.w	r7, [r0, #272]	@ 0x110
 8022808:	f507 4795 	add.w	r7, r7, #19072	@ 0x4a80
 802280c:	f8c0 7114 	str.w	r7, [r0, #276]	@ 0x114
 8022810:	2702      	movs	r7, #2
 8022812:	7447      	strb	r7, [r0, #17]
 8022814:	2703      	movs	r7, #3
 8022816:	f880 e10c 	strb.w	lr, [r0, #268]	@ 0x10c
 802281a:	f880 7092 	strb.w	r7, [r0, #146]	@ 0x92
 802281e:	2760      	movs	r7, #96	@ 0x60
 8022820:	2a03      	cmp	r2, #3
 8022822:	8247      	strh	r7, [r0, #18]
 8022824:	f000 8143 	beq.w	8022aae <Argus_GetDefaultCfg+0xf96>
 8022828:	2708      	movs	r7, #8
 802282a:	7387      	strb	r7, [r0, #14]
 802282c:	4f80      	ldr	r7, [pc, #512]	@ (8022a30 <Argus_GetDefaultCfg+0xf18>)
 802282e:	f8c0 7098 	str.w	r7, [r0, #152]	@ 0x98
 8022832:	4f80      	ldr	r7, [pc, #512]	@ (8022a34 <Argus_GetDefaultCfg+0xf1c>)
 8022834:	6187      	str	r7, [r0, #24]
 8022836:	4f86      	ldr	r7, [pc, #536]	@ (8022a50 <Argus_GetDefaultCfg+0xf38>)
 8022838:	f8c0 70dc 	str.w	r7, [r0, #220]	@ 0xdc
 802283c:	2a03      	cmp	r2, #3
 802283e:	f644 0750 	movw	r7, #18512	@ 0x4850
 8022842:	8187      	strh	r7, [r0, #12]
 8022844:	f000 8162 	beq.w	8022b0c <Argus_GetDefaultCfg+0xff4>
 8022848:	4a7e      	ldr	r2, [pc, #504]	@ (8022a44 <Argus_GetDefaultCfg+0xf2c>)
 802284a:	f8c0 20f8 	str.w	r2, [r0, #248]	@ 0xf8
 802284e:	2201      	movs	r2, #1
 8022850:	f880 20ac 	strb.w	r2, [r0, #172]	@ 0xac
 8022854:	f44f 5261 	mov.w	r2, #14400	@ 0x3840
 8022858:	f8a0 20fc 	strh.w	r2, [r0, #252]	@ 0xfc
 802285c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8022860:	f8a0 2031 	strh.w	r2, [r0, #49]	@ 0x31
 8022864:	f880 2033 	strb.w	r2, [r0, #51]	@ 0x33
 8022868:	8702      	strh	r2, [r0, #56]	@ 0x38
 802286a:	f8a0 2041 	strh.w	r2, [r0, #65]	@ 0x41
 802286e:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8022872:	f04f 32ff 	mov.w	r2, #4294967295
 8022876:	6342      	str	r2, [r0, #52]	@ 0x34
 8022878:	f880 2043 	strb.w	r2, [r0, #67]	@ 0x43
 802287c:	4690      	mov	r8, r2
 802287e:	22f0      	movs	r2, #240	@ 0xf0
 8022880:	f880 203a 	strb.w	r2, [r0, #58]	@ 0x3a
 8022884:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
 8022888:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
 802288c:	4a71      	ldr	r2, [pc, #452]	@ (8022a54 <Argus_GetDefaultCfg+0xf3c>)
 802288e:	f8c0 2102 	str.w	r2, [r0, #258]	@ 0x102
 8022892:	f04f 0eff 	mov.w	lr, #255	@ 0xff
 8022896:	f242 0264 	movw	r2, #8292	@ 0x2064
 802289a:	f8a0 202d 	strh.w	r2, [r0, #45]	@ 0x2d
 802289e:	4672      	mov	r2, lr
 80228a0:	2700      	movs	r7, #0
 80228a2:	f362 0707 	bfi	r7, r2, #0, #8
 80228a6:	f362 270f 	bfi	r7, r2, #8, #8
 80228aa:	f362 4717 	bfi	r7, r2, #16, #8
 80228ae:	f362 671f 	bfi	r7, r2, #24, #8
 80228b2:	f880 2049 	strb.w	r2, [r0, #73]	@ 0x49
 80228b6:	f640 720f 	movw	r2, #3855	@ 0xf0f
 80228ba:	f8c0 7045 	str.w	r7, [r0, #69]	@ 0x45
 80228be:	f8a0 204a 	strh.w	r2, [r0, #74]	@ 0x4a
 80228c2:	f04f 370f 	mov.w	r7, #252645135	@ 0xf0f0f0f
 80228c6:	f06f 02f0 	mvn.w	r2, #240	@ 0xf0
 80228ca:	e9c0 7213 	strd	r7, r2, [r0, #76]	@ 0x4c
 80228ce:	f24f 02f0 	movw	r2, #61680	@ 0xf0f0
 80228d2:	f8a0 205a 	strh.w	r2, [r0, #90]	@ 0x5a
 80228d6:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 80228da:	2c00      	cmp	r4, #0
 80228dc:	65c2      	str	r2, [r0, #92]	@ 0x5c
 80228de:	f04f 02f0 	mov.w	r2, #240	@ 0xf0
 80228e2:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
 80228e6:	bf14      	ite	ne
 80228e8:	2205      	movne	r2, #5
 80228ea:	2203      	moveq	r2, #3
 80228ec:	f880 2062 	strb.w	r2, [r0, #98]	@ 0x62
 80228f0:	2284      	movs	r2, #132	@ 0x84
 80228f2:	f00c 0c0f 	and.w	ip, ip, #15
 80228f6:	f880 2063 	strb.w	r2, [r0, #99]	@ 0x63
 80228fa:	22fa      	movs	r2, #250	@ 0xfa
 80228fc:	f06c 0c5f 	orn	ip, ip, #95	@ 0x5f
 8022900:	f880 206b 	strb.w	r2, [r0, #107]	@ 0x6b
 8022904:	22be      	movs	r2, #190	@ 0xbe
 8022906:	f880 206c 	strb.w	r2, [r0, #108]	@ 0x6c
 802290a:	f8c0 8055 	str.w	r8, [r0, #85]	@ 0x55
 802290e:	f880 c06d 	strb.w	ip, [r0, #109]	@ 0x6d
 8022912:	f880 e054 	strb.w	lr, [r0, #84]	@ 0x54
 8022916:	f880 e059 	strb.w	lr, [r0, #89]	@ 0x59
 802291a:	220f      	movs	r2, #15
 802291c:	f063 0319 	orn	r3, r3, #25
 8022920:	f880 3085 	strb.w	r3, [r0, #133]	@ 0x85
 8022924:	2301      	movs	r3, #1
 8022926:	f880 2070 	strb.w	r2, [r0, #112]	@ 0x70
 802292a:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
 802292e:	f7ff bba1 	b.w	8022074 <Argus_GetDefaultCfg+0x55c>
 8022932:	f8df c108 	ldr.w	ip, [pc, #264]	@ 8022a3c <Argus_GetDefaultCfg+0xf24>
 8022936:	f8c0 c0e0 	str.w	ip, [r0, #224]	@ 0xe0
 802293a:	2601      	movs	r6, #1
 802293c:	f8c0 c0f0 	str.w	ip, [r0, #240]	@ 0xf0
 8022940:	f8df c124 	ldr.w	ip, [pc, #292]	@ 8022a68 <Argus_GetDefaultCfg+0xf50>
 8022944:	f880 60e4 	strb.w	r6, [r0, #228]	@ 0xe4
 8022948:	f8c0 c0e8 	str.w	ip, [r0, #232]	@ 0xe8
 802294c:	e572      	b.n	8022434 <Argus_GetDefaultCfg+0x91c>
 802294e:	f44f 557a 	mov.w	r5, #16000	@ 0x3e80
 8022952:	f04e 0e20 	orr.w	lr, lr, #32
 8022956:	f8a0 5114 	strh.w	r5, [r0, #276]	@ 0x114
 802295a:	f880 e10c 	strb.w	lr, [r0, #268]	@ 0x10c
 802295e:	2550      	movs	r5, #80	@ 0x50
 8022960:	2c00      	cmp	r4, #0
 8022962:	f47f a934 	bne.w	8021bce <Argus_GetDefaultCfg+0xb6>
 8022966:	f7ff b931 	b.w	8021bcc <Argus_GetDefaultCfg+0xb4>
 802296a:	2502      	movs	r5, #2
 802296c:	f880 50ff 	strb.w	r5, [r0, #255]	@ 0xff
 8022970:	7445      	strb	r5, [r0, #17]
 8022972:	f105 554c 	add.w	r5, r5, #855638016	@ 0x33000000
 8022976:	f505 3540 	add.w	r5, r5, #196608	@ 0x30000
 802297a:	f8c0 5106 	str.w	r5, [r0, #262]	@ 0x106
 802297e:	250b      	movs	r5, #11
 8022980:	f8a0 5102 	strh.w	r5, [r0, #258]	@ 0x102
 8022984:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 8022988:	f8a0 5104 	strh.w	r5, [r0, #260]	@ 0x104
 802298c:	4d32      	ldr	r5, [pc, #200]	@ (8022a58 <Argus_GetDefaultCfg+0xf40>)
 802298e:	6085      	str	r5, [r0, #8]
 8022990:	2666      	movs	r6, #102	@ 0x66
 8022992:	2502      	movs	r5, #2
 8022994:	2a05      	cmp	r2, #5
 8022996:	f880 5092 	strb.w	r5, [r0, #146]	@ 0x92
 802299a:	7406      	strb	r6, [r0, #16]
 802299c:	f47f ad92 	bne.w	80224c4 <Argus_GetDefaultCfg+0x9ac>
 80229a0:	46ac      	mov	ip, r5
 80229a2:	2c00      	cmp	r4, #0
 80229a4:	f47f ad15 	bne.w	80223d2 <Argus_GetDefaultCfg+0x8ba>
 80229a8:	e654      	b.n	8022654 <Argus_GetDefaultCfg+0xb3c>
 80229aa:	2c00      	cmp	r4, #0
 80229ac:	d164      	bne.n	8022a78 <Argus_GetDefaultCfg+0xf60>
 80229ae:	f880 2092 	strb.w	r2, [r0, #146]	@ 0x92
 80229b2:	010a      	lsls	r2, r1, #4
 80229b4:	f002 0210 	and.w	r2, r2, #16
 80229b8:	ea42 0e0e 	orr.w	lr, r2, lr
 80229bc:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8022a70 <Argus_GetDefaultCfg+0xf58>
 80229c0:	7342      	strb	r2, [r0, #13]
 80229c2:	4a26      	ldr	r2, [pc, #152]	@ (8022a5c <Argus_GetDefaultCfg+0xf44>)
 80229c4:	f880 e10c 	strb.w	lr, [r0, #268]	@ 0x10c
 80229c8:	e9c0 8244 	strd	r8, r2, [r0, #272]	@ 0x110
 80229cc:	2201      	movs	r2, #1
 80229ce:	7442      	strb	r2, [r0, #17]
 80229d0:	2280      	movs	r2, #128	@ 0x80
 80229d2:	8242      	strh	r2, [r0, #18]
 80229d4:	2210      	movs	r2, #16
 80229d6:	7382      	strb	r2, [r0, #14]
 80229d8:	2220      	movs	r2, #32
 80229da:	7302      	strb	r2, [r0, #12]
 80229dc:	4a20      	ldr	r2, [pc, #128]	@ (8022a60 <Argus_GetDefaultCfg+0xf48>)
 80229de:	f8c0 2098 	str.w	r2, [r0, #152]	@ 0x98
 80229e2:	4a14      	ldr	r2, [pc, #80]	@ (8022a34 <Argus_GetDefaultCfg+0xf1c>)
 80229e4:	6182      	str	r2, [r0, #24]
 80229e6:	2730      	movs	r7, #48	@ 0x30
 80229e8:	2260      	movs	r2, #96	@ 0x60
 80229ea:	e420      	b.n	802222e <Argus_GetDefaultCfg+0x716>
 80229ec:	4f1d      	ldr	r7, [pc, #116]	@ (8022a64 <Argus_GetDefaultCfg+0xf4c>)
 80229ee:	f880 e10c 	strb.w	lr, [r0, #268]	@ 0x10c
 80229f2:	f8df e080 	ldr.w	lr, [pc, #128]	@ 8022a74 <Argus_GetDefaultCfg+0xf5c>
 80229f6:	e9c0 e744 	strd	lr, r7, [r0, #272]	@ 0x110
 80229fa:	2702      	movs	r7, #2
 80229fc:	7447      	strb	r7, [r0, #17]
 80229fe:	2a04      	cmp	r2, #4
 8022a00:	f04f 0703 	mov.w	r7, #3
 8022a04:	f880 7092 	strb.w	r7, [r0, #146]	@ 0x92
 8022a08:	f000 80bd 	beq.w	8022b86 <Argus_GetDefaultCfg+0x106e>
 8022a0c:	2a01      	cmp	r2, #1
 8022a0e:	f47f af06 	bne.w	802281e <Argus_GetDefaultCfg+0xd06>
 8022a12:	e677      	b.n	8022704 <Argus_GetDefaultCfg+0xbec>
 8022a14:	4a0b      	ldr	r2, [pc, #44]	@ (8022a44 <Argus_GetDefaultCfg+0xf2c>)
 8022a16:	f8c0 20f8 	str.w	r2, [r0, #248]	@ 0xf8
 8022a1a:	2201      	movs	r2, #1
 8022a1c:	f880 20ac 	strb.w	r2, [r0, #172]	@ 0xac
 8022a20:	f44f 5261 	mov.w	r2, #14400	@ 0x3840
 8022a24:	f8a0 20fc 	strh.w	r2, [r0, #252]	@ 0xfc
 8022a28:	e6c6      	b.n	80227b8 <Argus_GetDefaultCfg+0xca0>
 8022a2a:	bf00      	nop
 8022a2c:	00500080 	.word	0x00500080
 8022a30:	0002828f 	.word	0x0002828f
 8022a34:	00c001e0 	.word	0x00c001e0
 8022a38:	00200040 	.word	0x00200040
 8022a3c:	f000ffff 	.word	0xf000ffff
 8022a40:	00504b00 	.word	0x00504b00
 8022a44:	12c01680 	.word	0x12c01680
 8022a48:	04000010 	.word	0x04000010
 8022a4c:	00600080 	.word	0x00600080
 8022a50:	00300060 	.word	0x00300060
 8022a54:	0800000b 	.word	0x0800000b
 8022a58:	016e3600 	.word	0x016e3600
 8022a5c:	00804b00 	.word	0x00804b00
 8022a60:	0003828f 	.word	0x0003828f
 8022a64:	00604b00 	.word	0x00604b00
 8022a68:	10e014a0 	.word	0x10e014a0
 8022a6c:	00500070 	.word	0x00500070
 8022a70:	008000c0 	.word	0x008000c0
 8022a74:	006000a0 	.word	0x006000a0
 8022a78:	f880 2092 	strb.w	r2, [r0, #146]	@ 0x92
 8022a7c:	010a      	lsls	r2, r1, #4
 8022a7e:	f002 0210 	and.w	r2, r2, #16
 8022a82:	ea42 0e0e 	orr.w	lr, r2, lr
 8022a86:	7342      	strb	r2, [r0, #13]
 8022a88:	4a4b      	ldr	r2, [pc, #300]	@ (8022bb8 <Argus_GetDefaultCfg+0x10a0>)
 8022a8a:	f8c0 2110 	str.w	r2, [r0, #272]	@ 0x110
 8022a8e:	f502 4295 	add.w	r2, r2, #19072	@ 0x4a80
 8022a92:	f8c0 2114 	str.w	r2, [r0, #276]	@ 0x114
 8022a96:	2202      	movs	r2, #2
 8022a98:	7442      	strb	r2, [r0, #17]
 8022a9a:	2250      	movs	r2, #80	@ 0x50
 8022a9c:	8242      	strh	r2, [r0, #18]
 8022a9e:	2208      	movs	r2, #8
 8022aa0:	7382      	strb	r2, [r0, #14]
 8022aa2:	2220      	movs	r2, #32
 8022aa4:	f880 e10c 	strb.w	lr, [r0, #268]	@ 0x10c
 8022aa8:	7302      	strb	r2, [r0, #12]
 8022aaa:	f7ff bbb9 	b.w	8022220 <Argus_GetDefaultCfg+0x708>
 8022aae:	010a      	lsls	r2, r1, #4
 8022ab0:	f002 0210 	and.w	r2, r2, #16
 8022ab4:	7342      	strb	r2, [r0, #13]
 8022ab6:	2210      	movs	r2, #16
 8022ab8:	7382      	strb	r2, [r0, #14]
 8022aba:	2220      	movs	r2, #32
 8022abc:	7302      	strb	r2, [r0, #12]
 8022abe:	e78d      	b.n	80229dc <Argus_GetDefaultCfg+0xec4>
 8022ac0:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 8022ac4:	f8a0 2043 	strh.w	r2, [r0, #67]	@ 0x43
 8022ac8:	f04f 22ff 	mov.w	r2, #4278255360	@ 0xff00ff00
 8022acc:	f8c0 2045 	str.w	r2, [r0, #69]	@ 0x45
 8022ad0:	f04f 12ff 	mov.w	r2, #16711935	@ 0xff00ff
 8022ad4:	64c2      	str	r2, [r0, #76]	@ 0x4c
 8022ad6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8022ada:	f8a0 2050 	strh.w	r2, [r0, #80]	@ 0x50
 8022ade:	f8a0 804a 	strh.w	r8, [r0, #74]	@ 0x4a
 8022ae2:	f880 7052 	strb.w	r7, [r0, #82]	@ 0x52
 8022ae6:	f880 4049 	strb.w	r4, [r0, #73]	@ 0x49
 8022aea:	f880 e053 	strb.w	lr, [r0, #83]	@ 0x53
 8022aee:	f880 4054 	strb.w	r4, [r0, #84]	@ 0x54
 8022af2:	f880 e055 	strb.w	lr, [r0, #85]	@ 0x55
 8022af6:	f880 4056 	strb.w	r4, [r0, #86]	@ 0x56
 8022afa:	f880 e057 	strb.w	lr, [r0, #87]	@ 0x57
 8022afe:	f880 4058 	strb.w	r4, [r0, #88]	@ 0x58
 8022b02:	f880 e059 	strb.w	lr, [r0, #89]	@ 0x59
 8022b06:	4622      	mov	r2, r4
 8022b08:	f7ff bbf5 	b.w	80222f6 <Argus_GetDefaultCfg+0x7de>
 8022b0c:	2202      	movs	r2, #2
 8022b0e:	f880 20ac 	strb.w	r2, [r0, #172]	@ 0xac
 8022b12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8022b16:	f8a0 2031 	strh.w	r2, [r0, #49]	@ 0x31
 8022b1a:	f880 2033 	strb.w	r2, [r0, #51]	@ 0x33
 8022b1e:	4a27      	ldr	r2, [pc, #156]	@ (8022bbc <Argus_GetDefaultCfg+0x10a4>)
 8022b20:	f8c0 20f8 	str.w	r2, [r0, #248]	@ 0xf8
 8022b24:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8022b28:	f8a0 20fc 	strh.w	r2, [r0, #252]	@ 0xfc
 8022b2c:	220b      	movs	r2, #11
 8022b2e:	f8a0 2102 	strh.w	r2, [r0, #258]	@ 0x102
 8022b32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8022b36:	f8a0 2104 	strh.w	r2, [r0, #260]	@ 0x104
 8022b3a:	f244 02c8 	movw	r2, #16584	@ 0x40c8
 8022b3e:	f8a0 202d 	strh.w	r2, [r0, #45]	@ 0x2d
 8022b42:	f04f 0eff 	mov.w	lr, #255	@ 0xff
 8022b46:	f7ff bb96 	b.w	8022276 <Argus_GetDefaultCfg+0x75e>
 8022b4a:	2a01      	cmp	r2, #1
 8022b4c:	fa4f f981 	sxtb.w	r9, r1
 8022b50:	f63f ab2e 	bhi.w	80221b0 <Argus_GetDefaultCfg+0x698>
 8022b54:	f890 806d 	ldrb.w	r8, [r0, #109]	@ 0x6d
 8022b58:	f04f 0b3e 	mov.w	fp, #62	@ 0x3e
 8022b5c:	46e2      	mov	sl, ip
 8022b5e:	f008 080f 	and.w	r8, r8, #15
 8022b62:	f880 b06c 	strb.w	fp, [r0, #108]	@ 0x6c
 8022b66:	f43f a98a 	beq.w	8021e7e <Argus_GetDefaultCfg+0x366>
 8022b6a:	2a00      	cmp	r2, #0
 8022b6c:	f43f ad56 	beq.w	802261c <Argus_GetDefaultCfg+0xb04>
 8022b70:	f048 0840 	orr.w	r8, r8, #64	@ 0x40
 8022b74:	f7ff b983 	b.w	8021e7e <Argus_GetDefaultCfg+0x366>
 8022b78:	2550      	movs	r5, #80	@ 0x50
 8022b7a:	f8a0 5116 	strh.w	r5, [r0, #278]	@ 0x116
 8022b7e:	e472      	b.n	8022466 <Argus_GetDefaultCfg+0x94e>
 8022b80:	46b4      	mov	ip, r6
 8022b82:	f7ff b8de 	b.w	8021d42 <Argus_GetDefaultCfg+0x22a>
 8022b86:	2750      	movs	r7, #80	@ 0x50
 8022b88:	8247      	strh	r7, [r0, #18]
 8022b8a:	e64d      	b.n	8022828 <Argus_GetDefaultCfg+0xd10>
 8022b8c:	2503      	movs	r5, #3
 8022b8e:	f880 50f6 	strb.w	r5, [r0, #246]	@ 0xf6
 8022b92:	2510      	movs	r5, #16
 8022b94:	f7ff b828 	b.w	8021be8 <Argus_GetDefaultCfg+0xd0>
 8022b98:	4d09      	ldr	r5, [pc, #36]	@ (8022bc0 <Argus_GetDefaultCfg+0x10a8>)
 8022b9a:	f8c0 5022 	str.w	r5, [r0, #34]	@ 0x22
 8022b9e:	2560      	movs	r5, #96	@ 0x60
 8022ba0:	8245      	strh	r5, [r0, #18]
 8022ba2:	2501      	movs	r5, #1
 8022ba4:	f880 5021 	strb.w	r5, [r0, #33]	@ 0x21
 8022ba8:	2a01      	cmp	r2, #1
 8022baa:	f04f 0508 	mov.w	r5, #8
 8022bae:	7385      	strb	r5, [r0, #14]
 8022bb0:	f47f acef 	bne.w	8022592 <Argus_GetDefaultCfg+0xa7a>
 8022bb4:	e4b6      	b.n	8022524 <Argus_GetDefaultCfg+0xa0c>
 8022bb6:	bf00      	nop
 8022bb8:	00500080 	.word	0x00500080
 8022bbc:	1c2021c0 	.word	0x1c2021c0
 8022bc0:	003201f4 	.word	0x003201f4

08022bc4 <Argus_OnGetDefaultConfiguration>:
 8022bc4:	4770      	bx	lr
 8022bc6:	bf00      	nop

08022bc8 <Argus_Cfg_GetDefaultConfiguration>:
 8022bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022bcc:	b082      	sub	sp, #8
 8022bce:	2902      	cmp	r1, #2
 8022bd0:	f89d 8020 	ldrb.w	r8, [sp, #32]
 8022bd4:	460c      	mov	r4, r1
 8022bd6:	4607      	mov	r7, r0
 8022bd8:	4615      	mov	r5, r2
 8022bda:	461e      	mov	r6, r3
 8022bdc:	d92f      	bls.n	8022c3e <Argus_Cfg_GetDefaultConfiguration+0x76>
 8022bde:	1f4b      	subs	r3, r1, #5
 8022be0:	2b01      	cmp	r3, #1
 8022be2:	d82e      	bhi.n	8022c42 <Argus_Cfg_GetDefaultConfiguration+0x7a>
 8022be4:	2d07      	cmp	r5, #7
 8022be6:	d903      	bls.n	8022bf0 <Argus_Cfg_GetDefaultConfiguration+0x28>
 8022be8:	f1a5 0343 	sub.w	r3, r5, #67	@ 0x43
 8022bec:	2b04      	cmp	r3, #4
 8022bee:	d860      	bhi.n	8022cb2 <Argus_Cfg_GetDefaultConfiguration+0xea>
 8022bf0:	2e00      	cmp	r6, #0
 8022bf2:	d053      	beq.n	8022c9c <Argus_Cfg_GetDefaultConfiguration+0xd4>
 8022bf4:	1e73      	subs	r3, r6, #1
 8022bf6:	2b04      	cmp	r3, #4
 8022bf8:	d828      	bhi.n	8022c4c <Argus_Cfg_GetDefaultConfiguration+0x84>
 8022bfa:	f1b8 0f00 	cmp.w	r8, #0
 8022bfe:	d02a      	beq.n	8022c56 <Argus_Cfg_GetDefaultConfiguration+0x8e>
 8022c00:	f108 33ff 	add.w	r3, r8, #4294967295
 8022c04:	2b04      	cmp	r3, #4
 8022c06:	d832      	bhi.n	8022c6e <Argus_Cfg_GetDefaultConfiguration+0xa6>
 8022c08:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8022c0c:	2100      	movs	r1, #0
 8022c0e:	4638      	mov	r0, r7
 8022c10:	f006 fd9f 	bl	8029752 <memset>
 8022c14:	4638      	mov	r0, r7
 8022c16:	703c      	strb	r4, [r7, #0]
 8022c18:	4633      	mov	r3, r6
 8022c1a:	f005 023f 	and.w	r2, r5, #63	@ 0x3f
 8022c1e:	4621      	mov	r1, r4
 8022c20:	f8cd 8000 	str.w	r8, [sp]
 8022c24:	f7fe ff78 	bl	8021b18 <Argus_GetDefaultCfg>
 8022c28:	f8cd 8000 	str.w	r8, [sp]
 8022c2c:	4633      	mov	r3, r6
 8022c2e:	462a      	mov	r2, r5
 8022c30:	4621      	mov	r1, r4
 8022c32:	f7ff ffc7 	bl	8022bc4 <Argus_OnGetDefaultConfiguration>
 8022c36:	2000      	movs	r0, #0
 8022c38:	b002      	add	sp, #8
 8022c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022c3e:	2900      	cmp	r1, #0
 8022c40:	d1d0      	bne.n	8022be4 <Argus_Cfg_GetDefaultConfiguration+0x1c>
 8022c42:	f06f 0068 	mvn.w	r0, #104	@ 0x68
 8022c46:	b002      	add	sp, #8
 8022c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022c4c:	f06f 00c5 	mvn.w	r0, #197	@ 0xc5
 8022c50:	b002      	add	sp, #8
 8022c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022c56:	2d43      	cmp	r5, #67	@ 0x43
 8022c58:	d028      	beq.n	8022cac <Argus_Cfg_GetDefaultConfiguration+0xe4>
 8022c5a:	d814      	bhi.n	8022c86 <Argus_Cfg_GetDefaultConfiguration+0xbe>
 8022c5c:	2d02      	cmp	r5, #2
 8022c5e:	d90b      	bls.n	8022c78 <Argus_Cfg_GetDefaultConfiguration+0xb0>
 8022c60:	2d04      	cmp	r5, #4
 8022c62:	bf0c      	ite	eq
 8022c64:	f04f 0803 	moveq.w	r8, #3
 8022c68:	f04f 0802 	movne.w	r8, #2
 8022c6c:	e7cc      	b.n	8022c08 <Argus_Cfg_GetDefaultConfiguration+0x40>
 8022c6e:	f06f 00c4 	mvn.w	r0, #196	@ 0xc4
 8022c72:	b002      	add	sp, #8
 8022c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022c78:	2d00      	cmp	r5, #0
 8022c7a:	bf14      	ite	ne
 8022c7c:	f04f 0801 	movne.w	r8, #1
 8022c80:	f04f 0802 	moveq.w	r8, #2
 8022c84:	e7c0      	b.n	8022c08 <Argus_Cfg_GetDefaultConfiguration+0x40>
 8022c86:	2d44      	cmp	r5, #68	@ 0x44
 8022c88:	d00d      	beq.n	8022ca6 <Argus_Cfg_GetDefaultConfiguration+0xde>
 8022c8a:	f1a5 0345 	sub.w	r3, r5, #69	@ 0x45
 8022c8e:	2b02      	cmp	r3, #2
 8022c90:	bf94      	ite	ls
 8022c92:	f04f 0804 	movls.w	r8, #4
 8022c96:	f04f 0802 	movhi.w	r8, #2
 8022c9a:	e7b5      	b.n	8022c08 <Argus_Cfg_GetDefaultConfiguration+0x40>
 8022c9c:	2603      	movs	r6, #3
 8022c9e:	f1b8 0f00 	cmp.w	r8, #0
 8022ca2:	d1ad      	bne.n	8022c00 <Argus_Cfg_GetDefaultConfiguration+0x38>
 8022ca4:	e7d7      	b.n	8022c56 <Argus_Cfg_GetDefaultConfiguration+0x8e>
 8022ca6:	f04f 0805 	mov.w	r8, #5
 8022caa:	e7ad      	b.n	8022c08 <Argus_Cfg_GetDefaultConfiguration+0x40>
 8022cac:	f04f 0804 	mov.w	r8, #4
 8022cb0:	e7aa      	b.n	8022c08 <Argus_Cfg_GetDefaultConfiguration+0x40>
 8022cb2:	f06f 00c6 	mvn.w	r0, #198	@ 0xc6
 8022cb6:	e7c6      	b.n	8022c46 <Argus_Cfg_GetDefaultConfiguration+0x7e>

08022cb8 <Argus_Cfg_GetCurrentDefaultConfiguration>:
 8022cb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022cbc:	4605      	mov	r5, r0
 8022cbe:	b083      	sub	sp, #12
 8022cc0:	f8d0 0128 	ldr.w	r0, [r0, #296]	@ 0x128
 8022cc4:	4688      	mov	r8, r1
 8022cc6:	4616      	mov	r6, r2
 8022cc8:	f7fd fc12 	bl	80204f0 <Argus_Dev_GetChipVersion>
 8022ccc:	2800      	cmp	r0, #0
 8022cce:	d072      	beq.n	8022db6 <Argus_Cfg_GetCurrentDefaultConfiguration+0xfe>
 8022cd0:	4607      	mov	r7, r0
 8022cd2:	f8d5 0128 	ldr.w	r0, [r5, #296]	@ 0x128
 8022cd6:	f7fd fc0d 	bl	80204f4 <Argus_Dev_GetLaserType>
 8022cda:	4604      	mov	r4, r0
 8022cdc:	f8d5 0128 	ldr.w	r0, [r5, #296]	@ 0x128
 8022ce0:	f7fd fc02 	bl	80204e8 <Argus_Dev_GetModule>
 8022ce4:	2e02      	cmp	r6, #2
 8022ce6:	4605      	mov	r5, r0
 8022ce8:	46a1      	mov	r9, r4
 8022cea:	d912      	bls.n	8022d12 <Argus_Cfg_GetCurrentDefaultConfiguration+0x5a>
 8022cec:	1f73      	subs	r3, r6, #5
 8022cee:	2b01      	cmp	r3, #1
 8022cf0:	d811      	bhi.n	8022d16 <Argus_Cfg_GetCurrentDefaultConfiguration+0x5e>
 8022cf2:	2d07      	cmp	r5, #7
 8022cf4:	d904      	bls.n	8022d00 <Argus_Cfg_GetCurrentDefaultConfiguration+0x48>
 8022cf6:	f1a5 0343 	sub.w	r3, r5, #67	@ 0x43
 8022cfa:	b2db      	uxtb	r3, r3
 8022cfc:	2b04      	cmp	r3, #4
 8022cfe:	d85d      	bhi.n	8022dbc <Argus_Cfg_GetCurrentDefaultConfiguration+0x104>
 8022d00:	1e7b      	subs	r3, r7, #1
 8022d02:	b2db      	uxtb	r3, r3
 8022d04:	2b04      	cmp	r3, #4
 8022d06:	d90b      	bls.n	8022d20 <Argus_Cfg_GetCurrentDefaultConfiguration+0x68>
 8022d08:	f06f 00c5 	mvn.w	r0, #197	@ 0xc5
 8022d0c:	b003      	add	sp, #12
 8022d0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022d12:	2e00      	cmp	r6, #0
 8022d14:	d1ed      	bne.n	8022cf2 <Argus_Cfg_GetCurrentDefaultConfiguration+0x3a>
 8022d16:	f06f 0068 	mvn.w	r0, #104	@ 0x68
 8022d1a:	b003      	add	sp, #12
 8022d1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022d20:	b1fc      	cbz	r4, 8022d62 <Argus_Cfg_GetCurrentDefaultConfiguration+0xaa>
 8022d22:	3c01      	subs	r4, #1
 8022d24:	b2e4      	uxtb	r4, r4
 8022d26:	2c04      	cmp	r4, #4
 8022d28:	d827      	bhi.n	8022d7a <Argus_Cfg_GetCurrentDefaultConfiguration+0xc2>
 8022d2a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8022d2e:	2100      	movs	r1, #0
 8022d30:	4640      	mov	r0, r8
 8022d32:	f006 fd0e 	bl	8029752 <memset>
 8022d36:	4640      	mov	r0, r8
 8022d38:	f888 6000 	strb.w	r6, [r8]
 8022d3c:	463b      	mov	r3, r7
 8022d3e:	f005 023f 	and.w	r2, r5, #63	@ 0x3f
 8022d42:	4631      	mov	r1, r6
 8022d44:	f8cd 9000 	str.w	r9, [sp]
 8022d48:	f7fe fee6 	bl	8021b18 <Argus_GetDefaultCfg>
 8022d4c:	f8cd 9000 	str.w	r9, [sp]
 8022d50:	463b      	mov	r3, r7
 8022d52:	462a      	mov	r2, r5
 8022d54:	4631      	mov	r1, r6
 8022d56:	f7ff ff35 	bl	8022bc4 <Argus_OnGetDefaultConfiguration>
 8022d5a:	2000      	movs	r0, #0
 8022d5c:	b003      	add	sp, #12
 8022d5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022d62:	2d43      	cmp	r5, #67	@ 0x43
 8022d64:	d024      	beq.n	8022db0 <Argus_Cfg_GetCurrentDefaultConfiguration+0xf8>
 8022d66:	d814      	bhi.n	8022d92 <Argus_Cfg_GetCurrentDefaultConfiguration+0xda>
 8022d68:	2d02      	cmp	r5, #2
 8022d6a:	d90b      	bls.n	8022d84 <Argus_Cfg_GetCurrentDefaultConfiguration+0xcc>
 8022d6c:	2d04      	cmp	r5, #4
 8022d6e:	bf0c      	ite	eq
 8022d70:	f04f 0903 	moveq.w	r9, #3
 8022d74:	f04f 0902 	movne.w	r9, #2
 8022d78:	e7d7      	b.n	8022d2a <Argus_Cfg_GetCurrentDefaultConfiguration+0x72>
 8022d7a:	f06f 00c4 	mvn.w	r0, #196	@ 0xc4
 8022d7e:	b003      	add	sp, #12
 8022d80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022d84:	2d00      	cmp	r5, #0
 8022d86:	bf14      	ite	ne
 8022d88:	f04f 0901 	movne.w	r9, #1
 8022d8c:	f04f 0902 	moveq.w	r9, #2
 8022d90:	e7cb      	b.n	8022d2a <Argus_Cfg_GetCurrentDefaultConfiguration+0x72>
 8022d92:	2d44      	cmp	r5, #68	@ 0x44
 8022d94:	d009      	beq.n	8022daa <Argus_Cfg_GetCurrentDefaultConfiguration+0xf2>
 8022d96:	f1a5 0345 	sub.w	r3, r5, #69	@ 0x45
 8022d9a:	b2db      	uxtb	r3, r3
 8022d9c:	2b03      	cmp	r3, #3
 8022d9e:	bf34      	ite	cc
 8022da0:	f04f 0904 	movcc.w	r9, #4
 8022da4:	f04f 0902 	movcs.w	r9, #2
 8022da8:	e7bf      	b.n	8022d2a <Argus_Cfg_GetCurrentDefaultConfiguration+0x72>
 8022daa:	f04f 0905 	mov.w	r9, #5
 8022dae:	e7bc      	b.n	8022d2a <Argus_Cfg_GetCurrentDefaultConfiguration+0x72>
 8022db0:	f04f 0904 	mov.w	r9, #4
 8022db4:	e7b9      	b.n	8022d2a <Argus_Cfg_GetCurrentDefaultConfiguration+0x72>
 8022db6:	f06f 0064 	mvn.w	r0, #100	@ 0x64
 8022dba:	e7ae      	b.n	8022d1a <Argus_Cfg_GetCurrentDefaultConfiguration+0x62>
 8022dbc:	f06f 00c6 	mvn.w	r0, #198	@ 0xc6
 8022dc0:	e7ab      	b.n	8022d1a <Argus_Cfg_GetCurrentDefaultConfiguration+0x62>
 8022dc2:	bf00      	nop

08022dc4 <UpdateAPDVoltage>:
 8022dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022dc6:	f9b0 2028 	ldrsh.w	r2, [r0, #40]	@ 0x28
 8022dca:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8022dce:	429a      	cmp	r2, r3
 8022dd0:	b085      	sub	sp, #20
 8022dd2:	4684      	mov	ip, r0
 8022dd4:	f000 80a3 	beq.w	8022f1e <UpdateAPDVoltage+0x15a>
 8022dd8:	1110      	asrs	r0, r2, #4
 8022dda:	f891 2267 	ldrb.w	r2, [r1, #615]	@ 0x267
 8022dde:	f891 e290 	ldrb.w	lr, [r1, #656]	@ 0x290
 8022de2:	f891 3291 	ldrb.w	r3, [r1, #657]	@ 0x291
 8022de6:	fb12 f200 	smulbb	r2, r2, r0
 8022dea:	2a00      	cmp	r2, #0
 8022dec:	f280 8090 	bge.w	8022f10 <UpdateAPDVoltage+0x14c>
 8022df0:	4252      	negs	r2, r2
 8022df2:	f3c2 2080 	ubfx	r0, r2, #10, #1
 8022df6:	eb00 22d2 	add.w	r2, r0, r2, lsr #11
 8022dfa:	1a9b      	subs	r3, r3, r2
 8022dfc:	b2db      	uxtb	r3, r3
 8022dfe:	4573      	cmp	r3, lr
 8022e00:	f89c 202b 	ldrb.w	r2, [ip, #43]	@ 0x2b
 8022e04:	bf38      	it	cc
 8022e06:	4673      	movcc	r3, lr
 8022e08:	429a      	cmp	r2, r3
 8022e0a:	d07f      	beq.n	8022f0c <UpdateAPDVoltage+0x148>
 8022e0c:	f8dc 2020 	ldr.w	r2, [ip, #32]
 8022e10:	f88c 302b 	strb.w	r3, [ip, #43]	@ 0x2b
 8022e14:	ebae 0003 	sub.w	r0, lr, r3
 8022e18:	fb02 f400 	mul.w	r4, r2, r0
 8022e1c:	2c00      	cmp	r4, #0
 8022e1e:	f8b1 628e 	ldrh.w	r6, [r1, #654]	@ 0x28e
 8022e22:	f88d e004 	strb.w	lr, [sp, #4]
 8022e26:	f88d 3007 	strb.w	r3, [sp, #7]
 8022e2a:	f2c0 8084 	blt.w	8022f36 <UpdateAPDVoltage+0x172>
 8022e2e:	f3c4 32c0 	ubfx	r2, r4, #15, #1
 8022e32:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 8022e36:	f8dc 4024 	ldr.w	r4, [ip, #36]	@ 0x24
 8022e3a:	441a      	add	r2, r3
 8022e3c:	fb00 f404 	mul.w	r4, r0, r4
 8022e40:	b2d2      	uxtb	r2, r2
 8022e42:	2c00      	cmp	r4, #0
 8022e44:	f88d 2005 	strb.w	r2, [sp, #5]
 8022e48:	db6e      	blt.n	8022f28 <UpdateAPDVoltage+0x164>
 8022e4a:	f3c4 30c0 	ubfx	r0, r4, #15, #1
 8022e4e:	eb00 4014 	add.w	r0, r0, r4, lsr #16
 8022e52:	f8b1 428c 	ldrh.w	r4, [r1, #652]	@ 0x28c
 8022e56:	f8b1 5262 	ldrh.w	r5, [r1, #610]	@ 0x262
 8022e5a:	f891 7266 	ldrb.w	r7, [r1, #614]	@ 0x266
 8022e5e:	f8ad 4008 	strh.w	r4, [sp, #8]
 8022e62:	1b2d      	subs	r5, r5, r4
 8022e64:	fb95 f5f6 	sdiv	r5, r5, r6
 8022e68:	4475      	add	r5, lr
 8022e6a:	42bd      	cmp	r5, r7
 8022e6c:	bfa8      	it	ge
 8022e6e:	463d      	movge	r5, r7
 8022e70:	4418      	add	r0, r3
 8022e72:	b2c0      	uxtb	r0, r0
 8022e74:	42ab      	cmp	r3, r5
 8022e76:	bfc8      	it	gt
 8022e78:	f88d 5007 	strbgt.w	r5, [sp, #7]
 8022e7c:	42a8      	cmp	r0, r5
 8022e7e:	f88d 0006 	strb.w	r0, [sp, #6]
 8022e82:	bfc8      	it	gt
 8022e84:	f88d 5006 	strbgt.w	r5, [sp, #6]
 8022e88:	42aa      	cmp	r2, r5
 8022e8a:	bfc8      	it	gt
 8022e8c:	f88d 5005 	strbgt.w	r5, [sp, #5]
 8022e90:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8022e94:	f891 0293 	ldrb.w	r0, [r1, #659]	@ 0x293
 8022e98:	eba3 030e 	sub.w	r3, r3, lr
 8022e9c:	fb06 4303 	mla	r3, r6, r3, r4
 8022ea0:	f8ad 300a 	strh.w	r3, [sp, #10]
 8022ea4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8022ea8:	eba3 030e 	sub.w	r3, r3, lr
 8022eac:	fb06 4303 	mla	r3, r6, r3, r4
 8022eb0:	f8ad 300c 	strh.w	r3, [sp, #12]
 8022eb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8022eb8:	fb06 f000 	mul.w	r0, r6, r0
 8022ebc:	0280      	lsls	r0, r0, #10
 8022ebe:	eba3 0e0e 	sub.w	lr, r3, lr
 8022ec2:	fb06 440e 	mla	r4, r6, lr, r4
 8022ec6:	2800      	cmp	r0, #0
 8022ec8:	f8ad 400e 	strh.w	r4, [sp, #14]
 8022ecc:	d03a      	beq.n	8022f44 <UpdateAPDVoltage+0x180>
 8022ece:	db54      	blt.n	8022f7a <UpdateAPDVoltage+0x1b6>
 8022ed0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8022ed4:	4602      	mov	r2, r0
 8022ed6:	da38      	bge.n	8022f4a <UpdateAPDVoltage+0x186>
 8022ed8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8022edc:	0052      	lsls	r2, r2, #1
 8022ede:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8022ee2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8022ee6:	d3f9      	bcc.n	8022edc <UpdateAPDVoltage+0x118>
 8022ee8:	bb8b      	cbnz	r3, 8022f4e <UpdateAPDVoltage+0x18a>
 8022eea:	43c4      	mvns	r4, r0
 8022eec:	0fe4      	lsrs	r4, r4, #31
 8022eee:	4264      	negs	r4, r4
 8022ef0:	b2a4      	uxth	r4, r4
 8022ef2:	ab02      	add	r3, sp, #8
 8022ef4:	cb03      	ldmia	r3!, {r0, r1}
 8022ef6:	f8dc 34c0 	ldr.w	r3, [ip, #1216]	@ 0x4c0
 8022efa:	9a01      	ldr	r2, [sp, #4]
 8022efc:	f8ac 402c 	strh.w	r4, [ip, #44]	@ 0x2c
 8022f00:	f8c3 21a7 	str.w	r2, [r3, #423]	@ 0x1a7
 8022f04:	f8c3 01ac 	str.w	r0, [r3, #428]	@ 0x1ac
 8022f08:	f8c3 11b0 	str.w	r1, [r3, #432]	@ 0x1b0
 8022f0c:	b005      	add	sp, #20
 8022f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022f10:	f3c2 2080 	ubfx	r0, r2, #10, #1
 8022f14:	eb00 22d2 	add.w	r2, r0, r2, lsr #11
 8022f18:	4413      	add	r3, r2
 8022f1a:	b2db      	uxtb	r3, r3
 8022f1c:	e76f      	b.n	8022dfe <UpdateAPDVoltage+0x3a>
 8022f1e:	f891 e290 	ldrb.w	lr, [r1, #656]	@ 0x290
 8022f22:	f891 3291 	ldrb.w	r3, [r1, #657]	@ 0x291
 8022f26:	e76a      	b.n	8022dfe <UpdateAPDVoltage+0x3a>
 8022f28:	4264      	negs	r4, r4
 8022f2a:	f3c4 30c0 	ubfx	r0, r4, #15, #1
 8022f2e:	eb00 4014 	add.w	r0, r0, r4, lsr #16
 8022f32:	4240      	negs	r0, r0
 8022f34:	e78d      	b.n	8022e52 <UpdateAPDVoltage+0x8e>
 8022f36:	4264      	negs	r4, r4
 8022f38:	f3c4 32c0 	ubfx	r2, r4, #15, #1
 8022f3c:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 8022f40:	4252      	negs	r2, r2
 8022f42:	e778      	b.n	8022e36 <UpdateAPDVoltage+0x72>
 8022f44:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8022f48:	e7d3      	b.n	8022ef2 <UpdateAPDVoltage+0x12e>
 8022f4a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8022f4e:	2400      	movs	r4, #0
 8022f50:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8022f54:	e000      	b.n	8022f58 <UpdateAPDVoltage+0x194>
 8022f56:	b151      	cbz	r1, 8022f6e <UpdateAPDVoltage+0x1aa>
 8022f58:	4291      	cmp	r1, r2
 8022f5a:	bf24      	itt	cs
 8022f5c:	1a89      	subcs	r1, r1, r2
 8022f5e:	431c      	orrcs	r4, r3
 8022f60:	085b      	lsrs	r3, r3, #1
 8022f62:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8022f66:	d1f6      	bne.n	8022f56 <UpdateAPDVoltage+0x192>
 8022f68:	428a      	cmp	r2, r1
 8022f6a:	bf98      	it	ls
 8022f6c:	3401      	addls	r4, #1
 8022f6e:	2800      	cmp	r0, #0
 8022f70:	db0e      	blt.n	8022f90 <UpdateAPDVoltage+0x1cc>
 8022f72:	2c00      	cmp	r4, #0
 8022f74:	dbe6      	blt.n	8022f44 <UpdateAPDVoltage+0x180>
 8022f76:	b2a4      	uxth	r4, r4
 8022f78:	e7bb      	b.n	8022ef2 <UpdateAPDVoltage+0x12e>
 8022f7a:	4242      	negs	r2, r0
 8022f7c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8022f80:	d3aa      	bcc.n	8022ed8 <UpdateAPDVoltage+0x114>
 8022f82:	2a00      	cmp	r2, #0
 8022f84:	dae1      	bge.n	8022f4a <UpdateAPDVoltage+0x186>
 8022f86:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8022f8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8022f8e:	e7de      	b.n	8022f4e <UpdateAPDVoltage+0x18a>
 8022f90:	4264      	negs	r4, r4
 8022f92:	b2a4      	uxth	r4, r4
 8022f94:	e7ad      	b.n	8022ef2 <UpdateAPDVoltage+0x12e>
 8022f96:	bf00      	nop

08022f98 <Argus_Cal_Init>:
 8022f98:	b538      	push	{r3, r4, r5, lr}
 8022f9a:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 8022f9e:	4604      	mov	r4, r0
 8022fa0:	460d      	mov	r5, r1
 8022fa2:	2100      	movs	r1, #0
 8022fa4:	f006 fbd5 	bl	8029752 <memset>
 8022fa8:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8022fac:	f8c4 54c0 	str.w	r5, [r4, #1216]	@ 0x4c0
 8022fb0:	8523      	strh	r3, [r4, #40]	@ 0x28
 8022fb2:	bd38      	pop	{r3, r4, r5, pc}

08022fb4 <Argus_Cal_ReadEEPROMData>:
 8022fb4:	f500 71fa 	add.w	r1, r0, #500	@ 0x1f4
 8022fb8:	f8d0 04c0 	ldr.w	r0, [r0, #1216]	@ 0x4c0
 8022fbc:	f7fd bea4 	b.w	8020d08 <Argus_Dev_ReadEEPROM>

08022fc0 <Argus_Cal_ReadNVMData>:
 8022fc0:	b530      	push	{r4, r5, lr}
 8022fc2:	b083      	sub	sp, #12
 8022fc4:	4604      	mov	r4, r0
 8022fc6:	f8d0 04c0 	ldr.w	r0, [r0, #1216]	@ 0x4c0
 8022fca:	9101      	str	r1, [sp, #4]
 8022fcc:	f7fd fa8c 	bl	80204e8 <Argus_Dev_GetModule>
 8022fd0:	4605      	mov	r5, r0
 8022fd2:	f8d4 04c0 	ldr.w	r0, [r4, #1216]	@ 0x4c0
 8022fd6:	f7fd fa89 	bl	80204ec <Argus_Dev_GetChipID>
 8022fda:	9a01      	ldr	r2, [sp, #4]
 8022fdc:	4601      	mov	r1, r0
 8022fde:	4628      	mov	r0, r5
 8022fe0:	b003      	add	sp, #12
 8022fe2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022fe6:	f004 b9af 	b.w	8027348 <Argus_Cal_ReadCalibrationFromNVM>
 8022fea:	bf00      	nop

08022fec <Argus_Cal_GetCalibration>:
 8022fec:	460b      	mov	r3, r1
 8022fee:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8022ff2:	f500 7101 	add.w	r1, r0, #516	@ 0x204
 8022ff6:	4618      	mov	r0, r3
 8022ff8:	f006 bc43 	b.w	8029882 <memcpy>

08022ffc <Argus_Cal_GetCalibrationPtr>:
 8022ffc:	f500 7001 	add.w	r0, r0, #516	@ 0x204
 8023000:	4770      	bx	lr
 8023002:	bf00      	nop

08023004 <Argus_Cal_ComposeCalibrationData>:
 8023004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023006:	4603      	mov	r3, r0
 8023008:	b087      	sub	sp, #28
 802300a:	460c      	mov	r4, r1
 802300c:	4668      	mov	r0, sp
 802300e:	f503 71fa 	add.w	r1, r3, #500	@ 0x1f4
 8023012:	f7ef fff7 	bl	8013004 <EEPROM_Decode>
 8023016:	2800      	cmp	r0, #0
 8023018:	f2c0 80c8 	blt.w	80231ac <Argus_Cal_ComposeCalibrationData+0x1a8>
 802301c:	f8d4 3288 	ldr.w	r3, [r4, #648]	@ 0x288
 8023020:	07de      	lsls	r6, r3, #31
 8023022:	d407      	bmi.n	8023034 <Argus_Cal_ComposeCalibrationData+0x30>
 8023024:	f99d 100e 	ldrsb.w	r1, [sp, #14]
 8023028:	f8b4 225e 	ldrh.w	r2, [r4, #606]	@ 0x25e
 802302c:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 8023030:	f8a4 228c 	strh.w	r2, [r4, #652]	@ 0x28c
 8023034:	079d      	lsls	r5, r3, #30
 8023036:	d407      	bmi.n	8023048 <Argus_Cal_ComposeCalibrationData+0x44>
 8023038:	f99d 100f 	ldrsb.w	r1, [sp, #15]
 802303c:	f8b4 2260 	ldrh.w	r2, [r4, #608]	@ 0x260
 8023040:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8023044:	f8a4 228e 	strh.w	r2, [r4, #654]	@ 0x28e
 8023048:	0759      	lsls	r1, r3, #29
 802304a:	d406      	bmi.n	802305a <Argus_Cal_ComposeCalibrationData+0x56>
 802304c:	f894 2264 	ldrb.w	r2, [r4, #612]	@ 0x264
 8023050:	f89d 1009 	ldrb.w	r1, [sp, #9]
 8023054:	440a      	add	r2, r1
 8023056:	f884 2290 	strb.w	r2, [r4, #656]	@ 0x290
 802305a:	071a      	lsls	r2, r3, #28
 802305c:	d406      	bmi.n	802306c <Argus_Cal_ComposeCalibrationData+0x68>
 802305e:	f894 2265 	ldrb.w	r2, [r4, #613]	@ 0x265
 8023062:	f89d 100a 	ldrb.w	r1, [sp, #10]
 8023066:	440a      	add	r2, r1
 8023068:	f884 2291 	strb.w	r2, [r4, #657]	@ 0x291
 802306c:	06df      	lsls	r7, r3, #27
 802306e:	d40b      	bmi.n	8023088 <Argus_Cal_ComposeCalibrationData+0x84>
 8023070:	f89d 2000 	ldrb.w	r2, [sp]
 8023074:	2a01      	cmp	r2, #1
 8023076:	f000 809b 	beq.w	80231b0 <Argus_Cal_ComposeCalibrationData+0x1ac>
 802307a:	f894 2268 	ldrb.w	r2, [r4, #616]	@ 0x268
 802307e:	f89d 100b 	ldrb.w	r1, [sp, #11]
 8023082:	440a      	add	r2, r1
 8023084:	f884 2292 	strb.w	r2, [r4, #658]	@ 0x292
 8023088:	069e      	lsls	r6, r3, #26
 802308a:	d406      	bmi.n	802309a <Argus_Cal_ComposeCalibrationData+0x96>
 802308c:	f894 2269 	ldrb.w	r2, [r4, #617]	@ 0x269
 8023090:	f89d 100d 	ldrb.w	r1, [sp, #13]
 8023094:	440a      	add	r2, r1
 8023096:	f884 2293 	strb.w	r2, [r4, #659]	@ 0x293
 802309a:	065d      	lsls	r5, r3, #25
 802309c:	d408      	bmi.n	80230b0 <Argus_Cal_ComposeCalibrationData+0xac>
 802309e:	f99d 200c 	ldrsb.w	r2, [sp, #12]
 80230a2:	f8b4 126a 	ldrh.w	r1, [r4, #618]	@ 0x26a
 80230a6:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 80230aa:	440a      	add	r2, r1
 80230ac:	f8a4 2294 	strh.w	r2, [r4, #660]	@ 0x294
 80230b0:	0559      	lsls	r1, r3, #21
 80230b2:	d420      	bmi.n	80230f6 <Argus_Cal_ComposeCalibrationData+0xf2>
 80230b4:	f99d 1010 	ldrsb.w	r1, [sp, #16]
 80230b8:	f504 721d 	add.w	r2, r4, #628	@ 0x274
 80230bc:	4322      	orrs	r2, r4
 80230be:	eb01 1141 	add.w	r1, r1, r1, lsl #5
 80230c2:	f012 0207 	ands.w	r2, r2, #7
 80230c6:	b289      	uxth	r1, r1
 80230c8:	d17e      	bne.n	80231c8 <Argus_Cal_ComposeCalibrationData+0x1c4>
 80230ca:	e9d4 659d 	ldrd	r6, r5, [r4, #628]	@ 0x274
 80230ce:	eb01 0c06 	add.w	ip, r1, r6
 80230d2:	4617      	mov	r7, r2
 80230d4:	eb01 4616 	add.w	r6, r1, r6, lsr #16
 80230d8:	f36c 020f 	bfi	r2, ip, #0, #16
 80230dc:	f366 421f 	bfi	r2, r6, #16, #16
 80230e0:	f8c4 22a0 	str.w	r2, [r4, #672]	@ 0x2a0
 80230e4:	194a      	adds	r2, r1, r5
 80230e6:	f362 070f 	bfi	r7, r2, #0, #16
 80230ea:	eb01 4115 	add.w	r1, r1, r5, lsr #16
 80230ee:	f361 471f 	bfi	r7, r1, #16, #16
 80230f2:	f8c4 72a4 	str.w	r7, [r4, #676]	@ 0x2a4
 80230f6:	041a      	lsls	r2, r3, #16
 80230f8:	d407      	bmi.n	802310a <Argus_Cal_ComposeCalibrationData+0x106>
 80230fa:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80230fe:	f8b4 227c 	ldrh.w	r2, [r4, #636]	@ 0x27c
 8023102:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8023106:	f8a4 229a 	strh.w	r2, [r4, #666]	@ 0x29a
 802310a:	051f      	lsls	r7, r3, #20
 802310c:	bf5c      	itt	pl
 802310e:	f89d 2001 	ldrbpl.w	r2, [sp, #1]
 8023112:	f884 2296 	strbpl.w	r2, [r4, #662]	@ 0x296
 8023116:	04de      	lsls	r6, r3, #19
 8023118:	bf5c      	itt	pl
 802311a:	f89d 2002 	ldrbpl.w	r2, [sp, #2]
 802311e:	f884 2297 	strbpl.w	r2, [r4, #663]	@ 0x297
 8023122:	049d      	lsls	r5, r3, #18
 8023124:	d40b      	bmi.n	802313e <Argus_Cal_ComposeCalibrationData+0x13a>
 8023126:	f99d 2003 	ldrsb.w	r2, [sp, #3]
 802312a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 802312e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8023132:	ebc2 1282 	rsb	r2, r2, r2, lsl #6
 8023136:	f5a2 4200 	sub.w	r2, r2, #32768	@ 0x8000
 802313a:	f8a4 2298 	strh.w	r2, [r4, #664]	@ 0x298
 802313e:	2b00      	cmp	r3, #0
 8023140:	db07      	blt.n	8023152 <Argus_Cal_ComposeCalibrationData+0x14e>
 8023142:	f99d 2007 	ldrsb.w	r2, [sp, #7]
 8023146:	8861      	ldrh	r1, [r4, #2]
 8023148:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 802314c:	440a      	add	r2, r1
 802314e:	f8a4 22a8 	strh.w	r2, [r4, #680]	@ 0x2a8
 8023152:	03d9      	lsls	r1, r3, #15
 8023154:	bf5c      	itt	pl
 8023156:	f89d 2008 	ldrbpl.w	r2, [sp, #8]
 802315a:	f884 229c 	strbpl.w	r2, [r4, #668]	@ 0x29c
 802315e:	045a      	lsls	r2, r3, #17
 8023160:	d412      	bmi.n	8023188 <Argus_Cal_ComposeCalibrationData+0x184>
 8023162:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8023166:	8b66      	ldrh	r6, [r4, #26]
 8023168:	7ea1      	ldrb	r1, [r4, #26]
 802316a:	7ee5      	ldrb	r5, [r4, #27]
 802316c:	f8a4 629d 	strh.w	r6, [r4, #669]	@ 0x29d
 8023170:	3a01      	subs	r2, #1
 8023172:	2a06      	cmp	r2, #6
 8023174:	d808      	bhi.n	8023188 <Argus_Cal_ComposeCalibrationData+0x184>
 8023176:	e8df f002 	tbb	[pc, r2]
 802317a:	4004      	.short	0x4004
 802317c:	564f4b44 	.word	0x564f4b44
 8023180:	3c          	.byte	0x3c
 8023181:	00          	.byte	0x00
 8023182:	3d01      	subs	r5, #1
 8023184:	f884 529e 	strb.w	r5, [r4, #670]	@ 0x29e
 8023188:	039b      	lsls	r3, r3, #14
 802318a:	d40f      	bmi.n	80231ac <Argus_Cal_ComposeCalibrationData+0x1a8>
 802318c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8023190:	f8b4 2226 	ldrh.w	r2, [r4, #550]	@ 0x226
 8023194:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8023198:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802319c:	f8b4 3228 	ldrh.w	r3, [r4, #552]	@ 0x228
 80231a0:	f8a4 22aa 	strh.w	r2, [r4, #682]	@ 0x2aa
 80231a4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80231a8:	f8a4 32ac 	strh.w	r3, [r4, #684]	@ 0x2ac
 80231ac:	b007      	add	sp, #28
 80231ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80231b0:	f89d 100b 	ldrb.w	r1, [sp, #11]
 80231b4:	f894 2268 	ldrb.w	r2, [r4, #616]	@ 0x268
 80231b8:	069e      	lsls	r6, r3, #26
 80231ba:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80231be:	f884 2292 	strb.w	r2, [r4, #658]	@ 0x292
 80231c2:	f53f af6a 	bmi.w	802309a <Argus_Cal_ComposeCalibrationData+0x96>
 80231c6:	e761      	b.n	802308c <Argus_Cal_ComposeCalibrationData+0x88>
 80231c8:	f8b4 2274 	ldrh.w	r2, [r4, #628]	@ 0x274
 80231cc:	440a      	add	r2, r1
 80231ce:	f8a4 22a0 	strh.w	r2, [r4, #672]	@ 0x2a0
 80231d2:	f8b4 2276 	ldrh.w	r2, [r4, #630]	@ 0x276
 80231d6:	440a      	add	r2, r1
 80231d8:	f8a4 22a2 	strh.w	r2, [r4, #674]	@ 0x2a2
 80231dc:	f8b4 2278 	ldrh.w	r2, [r4, #632]	@ 0x278
 80231e0:	440a      	add	r2, r1
 80231e2:	f8a4 22a4 	strh.w	r2, [r4, #676]	@ 0x2a4
 80231e6:	f8b4 227a 	ldrh.w	r2, [r4, #634]	@ 0x27a
 80231ea:	4411      	add	r1, r2
 80231ec:	f8a4 12a6 	strh.w	r1, [r4, #678]	@ 0x2a6
 80231f0:	e781      	b.n	80230f6 <Argus_Cal_ComposeCalibrationData+0xf2>
 80231f2:	3901      	subs	r1, #1
 80231f4:	f884 129d 	strb.w	r1, [r4, #669]	@ 0x29d
 80231f8:	e7c6      	b.n	8023188 <Argus_Cal_ComposeCalibrationData+0x184>
 80231fa:	3501      	adds	r5, #1
 80231fc:	f884 529e 	strb.w	r5, [r4, #670]	@ 0x29e
 8023200:	e7c2      	b.n	8023188 <Argus_Cal_ComposeCalibrationData+0x184>
 8023202:	3101      	adds	r1, #1
 8023204:	3d01      	subs	r5, #1
 8023206:	f884 129d 	strb.w	r1, [r4, #669]	@ 0x29d
 802320a:	f884 529e 	strb.w	r5, [r4, #670]	@ 0x29e
 802320e:	e7bb      	b.n	8023188 <Argus_Cal_ComposeCalibrationData+0x184>
 8023210:	3101      	adds	r1, #1
 8023212:	f884 129d 	strb.w	r1, [r4, #669]	@ 0x29d
 8023216:	e7b7      	b.n	8023188 <Argus_Cal_ComposeCalibrationData+0x184>
 8023218:	3101      	adds	r1, #1
 802321a:	3501      	adds	r5, #1
 802321c:	f884 129d 	strb.w	r1, [r4, #669]	@ 0x29d
 8023220:	f884 529e 	strb.w	r5, [r4, #670]	@ 0x29e
 8023224:	e7b0      	b.n	8023188 <Argus_Cal_ComposeCalibrationData+0x184>
 8023226:	3901      	subs	r1, #1
 8023228:	3d01      	subs	r5, #1
 802322a:	f884 129d 	strb.w	r1, [r4, #669]	@ 0x29d
 802322e:	f884 529e 	strb.w	r5, [r4, #670]	@ 0x29e
 8023232:	e7a9      	b.n	8023188 <Argus_Cal_ComposeCalibrationData+0x184>

08023234 <Argus_Cal_CheckCalibration>:
 8023234:	b508      	push	{r3, lr}
 8023236:	f890 129d 	ldrb.w	r1, [r0, #669]	@ 0x29d
 802323a:	2907      	cmp	r1, #7
 802323c:	d857      	bhi.n	80232ee <Argus_Cal_CheckCalibration+0xba>
 802323e:	f890 129e 	ldrb.w	r1, [r0, #670]	@ 0x29e
 8023242:	2903      	cmp	r1, #3
 8023244:	d84d      	bhi.n	80232e2 <Argus_Cal_CheckCalibration+0xae>
 8023246:	f890 3292 	ldrb.w	r3, [r0, #658]	@ 0x292
 802324a:	2b00      	cmp	r3, #0
 802324c:	d05b      	beq.n	8023306 <Argus_Cal_CheckCalibration+0xd2>
 802324e:	f890 3293 	ldrb.w	r3, [r0, #659]	@ 0x293
 8023252:	2b00      	cmp	r3, #0
 8023254:	d051      	beq.n	80232fa <Argus_Cal_CheckCalibration+0xc6>
 8023256:	f890 1266 	ldrb.w	r1, [r0, #614]	@ 0x266
 802325a:	293f      	cmp	r1, #63	@ 0x3f
 802325c:	d85f      	bhi.n	802331e <Argus_Cal_CheckCalibration+0xea>
 802325e:	f990 1272 	ldrsb.w	r1, [r0, #626]	@ 0x272
 8023262:	f990 2273 	ldrsb.w	r2, [r0, #627]	@ 0x273
 8023266:	4291      	cmp	r1, r2
 8023268:	da53      	bge.n	8023312 <Argus_Cal_CheckCalibration+0xde>
 802326a:	f890 2265 	ldrb.w	r2, [r0, #613]	@ 0x265
 802326e:	2a3f      	cmp	r2, #63	@ 0x3f
 8023270:	d861      	bhi.n	8023336 <Argus_Cal_CheckCalibration+0x102>
 8023272:	f890 1264 	ldrb.w	r1, [r0, #612]	@ 0x264
 8023276:	428a      	cmp	r2, r1
 8023278:	d957      	bls.n	802332a <Argus_Cal_CheckCalibration+0xf6>
 802327a:	f9b0 325e 	ldrsh.w	r3, [r0, #606]	@ 0x25e
 802327e:	f8b0 125e 	ldrh.w	r1, [r0, #606]	@ 0x25e
 8023282:	2b00      	cmp	r3, #0
 8023284:	da1f      	bge.n	80232c6 <Argus_Cal_CheckCalibration+0x92>
 8023286:	f890 2291 	ldrb.w	r2, [r0, #657]	@ 0x291
 802328a:	2a3f      	cmp	r2, #63	@ 0x3f
 802328c:	d85a      	bhi.n	8023344 <Argus_Cal_CheckCalibration+0x110>
 802328e:	f890 1290 	ldrb.w	r1, [r0, #656]	@ 0x290
 8023292:	428a      	cmp	r2, r1
 8023294:	d95d      	bls.n	8023352 <Argus_Cal_CheckCalibration+0x11e>
 8023296:	f9b0 328c 	ldrsh.w	r3, [r0, #652]	@ 0x28c
 802329a:	f8b0 128c 	ldrh.w	r1, [r0, #652]	@ 0x28c
 802329e:	2b00      	cmp	r3, #0
 80232a0:	da18      	bge.n	80232d4 <Argus_Cal_CheckCalibration+0xa0>
 80232a2:	f8b0 328e 	ldrh.w	r3, [r0, #654]	@ 0x28e
 80232a6:	2b00      	cmp	r3, #0
 80232a8:	d059      	beq.n	802335e <Argus_Cal_CheckCalibration+0x12a>
 80232aa:	f8b0 3282 	ldrh.w	r3, [r0, #642]	@ 0x282
 80232ae:	2b00      	cmp	r3, #0
 80232b0:	d05b      	beq.n	802336a <Argus_Cal_CheckCalibration+0x136>
 80232b2:	7e43      	ldrb	r3, [r0, #25]
 80232b4:	2000      	movs	r0, #0
 80232b6:	b103      	cbz	r3, 80232ba <Argus_Cal_CheckCalibration+0x86>
 80232b8:	bd08      	pop	{r3, pc}
 80232ba:	482f      	ldr	r0, [pc, #188]	@ (8023378 <Argus_Cal_CheckCalibration+0x144>)
 80232bc:	f7ef fe6a 	bl	8012f94 <print>
 80232c0:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 80232c4:	bd08      	pop	{r3, pc}
 80232c6:	0909      	lsrs	r1, r1, #4
 80232c8:	482c      	ldr	r0, [pc, #176]	@ (802337c <Argus_Cal_CheckCalibration+0x148>)
 80232ca:	f7ef fe63 	bl	8012f94 <print>
 80232ce:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 80232d2:	bd08      	pop	{r3, pc}
 80232d4:	0909      	lsrs	r1, r1, #4
 80232d6:	482a      	ldr	r0, [pc, #168]	@ (8023380 <Argus_Cal_CheckCalibration+0x14c>)
 80232d8:	f7ef fe5c 	bl	8012f94 <print>
 80232dc:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 80232e0:	bd08      	pop	{r3, pc}
 80232e2:	4828      	ldr	r0, [pc, #160]	@ (8023384 <Argus_Cal_CheckCalibration+0x150>)
 80232e4:	f7ef fe56 	bl	8012f94 <print>
 80232e8:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 80232ec:	bd08      	pop	{r3, pc}
 80232ee:	4826      	ldr	r0, [pc, #152]	@ (8023388 <Argus_Cal_CheckCalibration+0x154>)
 80232f0:	f7ef fe50 	bl	8012f94 <print>
 80232f4:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 80232f8:	bd08      	pop	{r3, pc}
 80232fa:	4824      	ldr	r0, [pc, #144]	@ (802338c <Argus_Cal_CheckCalibration+0x158>)
 80232fc:	f7ef fe4a 	bl	8012f94 <print>
 8023300:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8023304:	bd08      	pop	{r3, pc}
 8023306:	4822      	ldr	r0, [pc, #136]	@ (8023390 <Argus_Cal_CheckCalibration+0x15c>)
 8023308:	f7ef fe44 	bl	8012f94 <print>
 802330c:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8023310:	bd08      	pop	{r3, pc}
 8023312:	4820      	ldr	r0, [pc, #128]	@ (8023394 <Argus_Cal_CheckCalibration+0x160>)
 8023314:	f7ef fe3e 	bl	8012f94 <print>
 8023318:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 802331c:	bd08      	pop	{r3, pc}
 802331e:	481e      	ldr	r0, [pc, #120]	@ (8023398 <Argus_Cal_CheckCalibration+0x164>)
 8023320:	f7ef fe38 	bl	8012f94 <print>
 8023324:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8023328:	bd08      	pop	{r3, pc}
 802332a:	481c      	ldr	r0, [pc, #112]	@ (802339c <Argus_Cal_CheckCalibration+0x168>)
 802332c:	f7ef fe32 	bl	8012f94 <print>
 8023330:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8023334:	bd08      	pop	{r3, pc}
 8023336:	4611      	mov	r1, r2
 8023338:	4819      	ldr	r0, [pc, #100]	@ (80233a0 <Argus_Cal_CheckCalibration+0x16c>)
 802333a:	f7ef fe2b 	bl	8012f94 <print>
 802333e:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8023342:	bd08      	pop	{r3, pc}
 8023344:	4611      	mov	r1, r2
 8023346:	4817      	ldr	r0, [pc, #92]	@ (80233a4 <Argus_Cal_CheckCalibration+0x170>)
 8023348:	f7ef fe24 	bl	8012f94 <print>
 802334c:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8023350:	bd08      	pop	{r3, pc}
 8023352:	4815      	ldr	r0, [pc, #84]	@ (80233a8 <Argus_Cal_CheckCalibration+0x174>)
 8023354:	f7ef fe1e 	bl	8012f94 <print>
 8023358:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 802335c:	bd08      	pop	{r3, pc}
 802335e:	4813      	ldr	r0, [pc, #76]	@ (80233ac <Argus_Cal_CheckCalibration+0x178>)
 8023360:	f7ef fe18 	bl	8012f94 <print>
 8023364:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8023368:	bd08      	pop	{r3, pc}
 802336a:	4811      	ldr	r0, [pc, #68]	@ (80233b0 <Argus_Cal_CheckCalibration+0x17c>)
 802336c:	f7ef fe12 	bl	8012f94 <print>
 8023370:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8023374:	bd08      	pop	{r3, pc}
 8023376:	bf00      	nop
 8023378:	0802f2dc 	.word	0x0802f2dc
 802337c:	0802f198 	.word	0x0802f198
 8023380:	0802f240 	.word	0x0802f240
 8023384:	0802effc 	.word	0x0802effc
 8023388:	0802efcc 	.word	0x0802efcc
 802338c:	0802f05c 	.word	0x0802f05c
 8023390:	0802f02c 	.word	0x0802f02c
 8023394:	0802f0c0 	.word	0x0802f0c0
 8023398:	0802f08c 	.word	0x0802f08c
 802339c:	0802f160 	.word	0x0802f160
 80233a0:	0802f128 	.word	0x0802f128
 80233a4:	0802f1d0 	.word	0x0802f1d0
 80233a8:	0802f208 	.word	0x0802f208
 80233ac:	0802f278 	.word	0x0802f278
 80233b0:	0802f2ac 	.word	0x0802f2ac

080233b4 <Argus_Cal_CopyCalibration>:
 80233b4:	b508      	push	{r3, lr}
 80233b6:	f500 7301 	add.w	r3, r0, #516	@ 0x204
 80233ba:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 80233be:	4618      	mov	r0, r3
 80233c0:	f006 fa5f 	bl	8029882 <memcpy>
 80233c4:	bd08      	pop	{r3, pc}
 80233c6:	bf00      	nop

080233c8 <Argus_Cal_GetGainValues>:
 80233c8:	b570      	push	{r4, r5, r6, lr}
 80233ca:	4605      	mov	r5, r0
 80233cc:	4608      	mov	r0, r1
 80233ce:	f005 fae3 	bl	8028998 <fp_log16>
 80233d2:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
 80233d6:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
 80233da:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 80233de:	f240 8093 	bls.w	8023508 <Argus_Cal_GetGainValues+0x140>
 80233e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80233e6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80233ea:	4694      	mov	ip, r2
 80233ec:	0052      	lsls	r2, r2, #1
 80233ee:	428a      	cmp	r2, r1
 80233f0:	461c      	mov	r4, r3
 80233f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80233f6:	d3f8      	bcc.n	80233ea <Argus_Cal_GetGainValues+0x22>
 80233f8:	2b00      	cmp	r3, #0
 80233fa:	d17b      	bne.n	80234f4 <Argus_Cal_GetGainValues+0x12c>
 80233fc:	2800      	cmp	r0, #0
 80233fe:	bfac      	ite	ge
 8023400:	f06f 4000 	mvnge.w	r0, #2147483648	@ 0x80000000
 8023404:	f04f 4000 	movlt.w	r0, #2147483648	@ 0x80000000
 8023408:	f005 fa14 	bl	8028834 <fp_exp16>
 802340c:	f44f 03c8 	mov.w	r3, #6553600	@ 0x640000
 8023410:	2800      	cmp	r0, #0
 8023412:	60eb      	str	r3, [r5, #12]
 8023414:	4684      	mov	ip, r0
 8023416:	f000 8094 	beq.w	8023542 <Argus_Cal_GetGainValues+0x17a>
 802341a:	db48      	blt.n	80234ae <Argus_Cal_GetGainValues+0xe6>
 802341c:	f5b0 0fc8 	cmp.w	r0, #6553600	@ 0x640000
 8023420:	4601      	mov	r1, r0
 8023422:	f080 8114 	bcs.w	802364e <Argus_Cal_GetGainValues+0x286>
 8023426:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 802342a:	0049      	lsls	r1, r1, #1
 802342c:	f5b1 0fc8 	cmp.w	r1, #6553600	@ 0x640000
 8023430:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8023434:	d3f9      	bcc.n	802342a <Argus_Cal_GetGainValues+0x62>
 8023436:	2a00      	cmp	r2, #0
 8023438:	d144      	bne.n	80234c4 <Argus_Cal_GetGainValues+0xfc>
 802343a:	2800      	cmp	r0, #0
 802343c:	f2c0 810f 	blt.w	802365e <Argus_Cal_GetGainValues+0x296>
 8023440:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8023444:	461e      	mov	r6, r3
 8023446:	60ab      	str	r3, [r5, #8]
 8023448:	2800      	cmp	r0, #0
 802344a:	f280 80eb 	bge.w	8023624 <Argus_Cal_GetGainValues+0x25c>
 802344e:	4241      	negs	r1, r0
 8023450:	4299      	cmp	r1, r3
 8023452:	bf28      	it	cs
 8023454:	f44f 3480 	movcs.w	r4, #65536	@ 0x10000
 8023458:	d279      	bcs.n	802354e <Argus_Cal_GetGainValues+0x186>
 802345a:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 802345e:	0049      	lsls	r1, r1, #1
 8023460:	4299      	cmp	r1, r3
 8023462:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8023466:	d3fa      	bcc.n	802345e <Argus_Cal_GetGainValues+0x96>
 8023468:	2c00      	cmp	r4, #0
 802346a:	d170      	bne.n	802354e <Argus_Cal_GetGainValues+0x186>
 802346c:	ea90 0f06 	teq	r0, r6
 8023470:	f100 80fb 	bmi.w	802366a <Argus_Cal_GetGainValues+0x2a2>
 8023474:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8023478:	461c      	mov	r4, r3
 802347a:	606b      	str	r3, [r5, #4]
 802347c:	461a      	mov	r2, r3
 802347e:	2800      	cmp	r0, #0
 8023480:	f2c0 8082 	blt.w	8023588 <Argus_Cal_GetGainValues+0x1c0>
 8023484:	4290      	cmp	r0, r2
 8023486:	f080 80e5 	bcs.w	8023654 <Argus_Cal_GetGainValues+0x28c>
 802348a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 802348e:	0040      	lsls	r0, r0, #1
 8023490:	4290      	cmp	r0, r2
 8023492:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8023496:	d3fa      	bcc.n	802348e <Argus_Cal_GetGainValues+0xc6>
 8023498:	2b00      	cmp	r3, #0
 802349a:	d17c      	bne.n	8023596 <Argus_Cal_GetGainValues+0x1ce>
 802349c:	ea9c 0f04 	teq	ip, r4
 80234a0:	bf54      	ite	pl
 80234a2:	f06f 4100 	mvnpl.w	r1, #2147483648	@ 0x80000000
 80234a6:	f04f 4100 	movmi.w	r1, #2147483648	@ 0x80000000
 80234aa:	6029      	str	r1, [r5, #0]
 80234ac:	bd70      	pop	{r4, r5, r6, pc}
 80234ae:	4241      	negs	r1, r0
 80234b0:	f5b1 0fc8 	cmp.w	r1, #6553600	@ 0x640000
 80234b4:	d3b7      	bcc.n	8023426 <Argus_Cal_GetGainValues+0x5e>
 80234b6:	2900      	cmp	r1, #0
 80234b8:	f280 80c9 	bge.w	802364e <Argus_Cal_GetGainValues+0x286>
 80234bc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80234c0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80234c4:	2300      	movs	r3, #0
 80234c6:	f44f 04c8 	mov.w	r4, #6553600	@ 0x640000
 80234ca:	e000      	b.n	80234ce <Argus_Cal_GetGainValues+0x106>
 80234cc:	b154      	cbz	r4, 80234e4 <Argus_Cal_GetGainValues+0x11c>
 80234ce:	428c      	cmp	r4, r1
 80234d0:	bf24      	itt	cs
 80234d2:	1a64      	subcs	r4, r4, r1
 80234d4:	4313      	orrcs	r3, r2
 80234d6:	0852      	lsrs	r2, r2, #1
 80234d8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80234dc:	d1f6      	bne.n	80234cc <Argus_Cal_GetGainValues+0x104>
 80234de:	428c      	cmp	r4, r1
 80234e0:	bf28      	it	cs
 80234e2:	3301      	addcs	r3, #1
 80234e4:	2800      	cmp	r0, #0
 80234e6:	f2c0 8094 	blt.w	8023612 <Argus_Cal_GetGainValues+0x24a>
 80234ea:	2b00      	cmp	r3, #0
 80234ec:	461e      	mov	r6, r3
 80234ee:	dba7      	blt.n	8023440 <Argus_Cal_GetGainValues+0x78>
 80234f0:	60ab      	str	r3, [r5, #8]
 80234f2:	e7a9      	b.n	8023448 <Argus_Cal_GetGainValues+0x80>
 80234f4:	2a00      	cmp	r2, #0
 80234f6:	da0e      	bge.n	8023516 <Argus_Cal_GetGainValues+0x14e>
 80234f8:	428a      	cmp	r2, r1
 80234fa:	f040 8083 	bne.w	8023604 <Argus_Cal_GetGainValues+0x23c>
 80234fe:	2800      	cmp	r0, #0
 8023500:	461c      	mov	r4, r3
 8023502:	da18      	bge.n	8023536 <Argus_Cal_GetGainValues+0x16e>
 8023504:	4260      	negs	r0, r4
 8023506:	e77f      	b.n	8023408 <Argus_Cal_GetGainValues+0x40>
 8023508:	2900      	cmp	r1, #0
 802350a:	f000 80b4 	beq.w	8023676 <Argus_Cal_GetGainValues+0x2ae>
 802350e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8023512:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8023516:	2400      	movs	r4, #0
 8023518:	e000      	b.n	802351c <Argus_Cal_GetGainValues+0x154>
 802351a:	b151      	cbz	r1, 8023532 <Argus_Cal_GetGainValues+0x16a>
 802351c:	428a      	cmp	r2, r1
 802351e:	bf9c      	itt	ls
 8023520:	1a89      	subls	r1, r1, r2
 8023522:	431c      	orrls	r4, r3
 8023524:	085b      	lsrs	r3, r3, #1
 8023526:	ea4f 0141 	mov.w	r1, r1, lsl #1
 802352a:	d1f6      	bne.n	802351a <Argus_Cal_GetGainValues+0x152>
 802352c:	428a      	cmp	r2, r1
 802352e:	d800      	bhi.n	8023532 <Argus_Cal_GetGainValues+0x16a>
 8023530:	3401      	adds	r4, #1
 8023532:	2800      	cmp	r0, #0
 8023534:	dbe6      	blt.n	8023504 <Argus_Cal_GetGainValues+0x13c>
 8023536:	2c00      	cmp	r4, #0
 8023538:	bfac      	ite	ge
 802353a:	4620      	movge	r0, r4
 802353c:	f06f 4000 	mvnlt.w	r0, #2147483648	@ 0x80000000
 8023540:	e762      	b.n	8023408 <Argus_Cal_GetGainValues+0x40>
 8023542:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8023546:	e9c5 1101 	strd	r1, r1, [r5, #4]
 802354a:	6029      	str	r1, [r5, #0]
 802354c:	bd70      	pop	{r4, r5, r6, pc}
 802354e:	2900      	cmp	r1, #0
 8023550:	db3c      	blt.n	80235cc <Argus_Cal_GetGainValues+0x204>
 8023552:	461a      	mov	r2, r3
 8023554:	b153      	cbz	r3, 802356c <Argus_Cal_GetGainValues+0x1a4>
 8023556:	2200      	movs	r2, #0
 8023558:	e000      	b.n	802355c <Argus_Cal_GetGainValues+0x194>
 802355a:	b13b      	cbz	r3, 802356c <Argus_Cal_GetGainValues+0x1a4>
 802355c:	4299      	cmp	r1, r3
 802355e:	bf9c      	itt	ls
 8023560:	1a5b      	subls	r3, r3, r1
 8023562:	4322      	orrls	r2, r4
 8023564:	0864      	lsrs	r4, r4, #1
 8023566:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802356a:	d1f6      	bne.n	802355a <Argus_Cal_GetGainValues+0x192>
 802356c:	428b      	cmp	r3, r1
 802356e:	d300      	bcc.n	8023572 <Argus_Cal_GetGainValues+0x1aa>
 8023570:	3201      	adds	r2, #1
 8023572:	ea90 0f06 	teq	r0, r6
 8023576:	d45c      	bmi.n	8023632 <Argus_Cal_GetGainValues+0x26a>
 8023578:	2a00      	cmp	r2, #0
 802357a:	4614      	mov	r4, r2
 802357c:	f6ff af7a 	blt.w	8023474 <Argus_Cal_GetGainValues+0xac>
 8023580:	2800      	cmp	r0, #0
 8023582:	606a      	str	r2, [r5, #4]
 8023584:	f6bf af7e 	bge.w	8023484 <Argus_Cal_GetGainValues+0xbc>
 8023588:	4240      	negs	r0, r0
 802358a:	4290      	cmp	r0, r2
 802358c:	bf28      	it	cs
 802358e:	f44f 3380 	movcs.w	r3, #65536	@ 0x10000
 8023592:	f4ff af7a 	bcc.w	802348a <Argus_Cal_GetGainValues+0xc2>
 8023596:	2800      	cmp	r0, #0
 8023598:	db25      	blt.n	80235e6 <Argus_Cal_GetGainValues+0x21e>
 802359a:	4611      	mov	r1, r2
 802359c:	b152      	cbz	r2, 80235b4 <Argus_Cal_GetGainValues+0x1ec>
 802359e:	2100      	movs	r1, #0
 80235a0:	e000      	b.n	80235a4 <Argus_Cal_GetGainValues+0x1dc>
 80235a2:	b13a      	cbz	r2, 80235b4 <Argus_Cal_GetGainValues+0x1ec>
 80235a4:	4290      	cmp	r0, r2
 80235a6:	bf9c      	itt	ls
 80235a8:	1a12      	subls	r2, r2, r0
 80235aa:	4319      	orrls	r1, r3
 80235ac:	085b      	lsrs	r3, r3, #1
 80235ae:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80235b2:	d1f6      	bne.n	80235a2 <Argus_Cal_GetGainValues+0x1da>
 80235b4:	4282      	cmp	r2, r0
 80235b6:	d300      	bcc.n	80235ba <Argus_Cal_GetGainValues+0x1f2>
 80235b8:	3101      	adds	r1, #1
 80235ba:	ea9c 0f04 	teq	ip, r4
 80235be:	d41f      	bmi.n	8023600 <Argus_Cal_GetGainValues+0x238>
 80235c0:	2900      	cmp	r1, #0
 80235c2:	bfb8      	it	lt
 80235c4:	f06f 4100 	mvnlt.w	r1, #2147483648	@ 0x80000000
 80235c8:	6029      	str	r1, [r5, #0]
 80235ca:	bd70      	pop	{r4, r5, r6, pc}
 80235cc:	428b      	cmp	r3, r1
 80235ce:	d23a      	bcs.n	8023646 <Argus_Cal_GetGainValues+0x27e>
 80235d0:	0864      	lsrs	r4, r4, #1
 80235d2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80235d6:	d040      	beq.n	802365a <Argus_Cal_GetGainValues+0x292>
 80235d8:	2b00      	cmp	r3, #0
 80235da:	d1bc      	bne.n	8023556 <Argus_Cal_GetGainValues+0x18e>
 80235dc:	ea90 0f06 	teq	r0, r6
 80235e0:	d44b      	bmi.n	802367a <Argus_Cal_GetGainValues+0x2b2>
 80235e2:	461a      	mov	r2, r3
 80235e4:	e7c8      	b.n	8023578 <Argus_Cal_GetGainValues+0x1b0>
 80235e6:	4290      	cmp	r0, r2
 80235e8:	d92b      	bls.n	8023642 <Argus_Cal_GetGainValues+0x27a>
 80235ea:	085b      	lsrs	r3, r3, #1
 80235ec:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80235f0:	d02b      	beq.n	802364a <Argus_Cal_GetGainValues+0x282>
 80235f2:	2a00      	cmp	r2, #0
 80235f4:	d1d3      	bne.n	802359e <Argus_Cal_GetGainValues+0x1d6>
 80235f6:	ea9c 0f04 	teq	ip, r4
 80235fa:	4611      	mov	r1, r2
 80235fc:	f57f af55 	bpl.w	80234aa <Argus_Cal_GetGainValues+0xe2>
 8023600:	4249      	negs	r1, r1
 8023602:	e752      	b.n	80234aa <Argus_Cal_GetGainValues+0xe2>
 8023604:	f034 4300 	bics.w	r3, r4, #2147483648	@ 0x80000000
 8023608:	f02c 4200 	bic.w	r2, ip, #2147483648	@ 0x80000000
 802360c:	d183      	bne.n	8023516 <Argus_Cal_GetGainValues+0x14e>
 802360e:	461c      	mov	r4, r3
 8023610:	e78c      	b.n	802352c <Argus_Cal_GetGainValues+0x164>
 8023612:	425e      	negs	r6, r3
 8023614:	ea13 0326 	ands.w	r3, r3, r6, asr #32
 8023618:	bf38      	it	cc
 802361a:	4633      	movcc	r3, r6
 802361c:	2800      	cmp	r0, #0
 802361e:	60ae      	str	r6, [r5, #8]
 8023620:	f6ff af15 	blt.w	802344e <Argus_Cal_GetGainValues+0x86>
 8023624:	4298      	cmp	r0, r3
 8023626:	4601      	mov	r1, r0
 8023628:	f4ff af17 	bcc.w	802345a <Argus_Cal_GetGainValues+0x92>
 802362c:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8023630:	e78f      	b.n	8023552 <Argus_Cal_GetGainValues+0x18a>
 8023632:	4253      	negs	r3, r2
 8023634:	2b00      	cmp	r3, #0
 8023636:	606b      	str	r3, [r5, #4]
 8023638:	461c      	mov	r4, r3
 802363a:	f6ff af20 	blt.w	802347e <Argus_Cal_GetGainValues+0xb6>
 802363e:	461a      	mov	r2, r3
 8023640:	e71d      	b.n	802347e <Argus_Cal_GetGainValues+0xb6>
 8023642:	4619      	mov	r1, r3
 8023644:	e7b9      	b.n	80235ba <Argus_Cal_GetGainValues+0x1f2>
 8023646:	4622      	mov	r2, r4
 8023648:	e793      	b.n	8023572 <Argus_Cal_GetGainValues+0x1aa>
 802364a:	4619      	mov	r1, r3
 802364c:	e7b2      	b.n	80235b4 <Argus_Cal_GetGainValues+0x1ec>
 802364e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8023652:	e737      	b.n	80234c4 <Argus_Cal_GetGainValues+0xfc>
 8023654:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8023658:	e79f      	b.n	802359a <Argus_Cal_GetGainValues+0x1d2>
 802365a:	4622      	mov	r2, r4
 802365c:	e786      	b.n	802356c <Argus_Cal_GetGainValues+0x1a4>
 802365e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8023662:	4613      	mov	r3, r2
 8023664:	60aa      	str	r2, [r5, #8]
 8023666:	4616      	mov	r6, r2
 8023668:	e6ee      	b.n	8023448 <Argus_Cal_GetGainValues+0x80>
 802366a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 802366e:	461a      	mov	r2, r3
 8023670:	606b      	str	r3, [r5, #4]
 8023672:	461c      	mov	r4, r3
 8023674:	e703      	b.n	802347e <Argus_Cal_GetGainValues+0xb6>
 8023676:	4608      	mov	r0, r1
 8023678:	e6c6      	b.n	8023408 <Argus_Cal_GetGainValues+0x40>
 802367a:	606b      	str	r3, [r5, #4]
 802367c:	461c      	mov	r4, r3
 802367e:	461a      	mov	r2, r3
 8023680:	e6fd      	b.n	802347e <Argus_Cal_GetGainValues+0xb6>
 8023682:	bf00      	nop

08023684 <Argus_Cal_GetTotalXtalkVectorTable>:
 8023684:	b538      	push	{r3, r4, r5, lr}
 8023686:	4605      	mov	r5, r0
 8023688:	4614      	mov	r4, r2
 802368a:	f001 ffaf 	bl	80255ec <Argus_Cal_GetInternalXtalkVectorTable>
 802368e:	2800      	cmp	r0, #0
 8023690:	f2c0 81be 	blt.w	8023a10 <Argus_Cal_GetTotalXtalkVectorTable+0x38c>
 8023694:	462b      	mov	r3, r5
 8023696:	4622      	mov	r2, r4
 8023698:	f505 7e80 	add.w	lr, r5, #256	@ 0x100
 802369c:	8819      	ldrh	r1, [r3, #0]
 802369e:	f8b2 4122 	ldrh.w	r4, [r2, #290]	@ 0x122
 80236a2:	f8b3 c002 	ldrh.w	ip, [r3, #2]
 80236a6:	4421      	add	r1, r4
 80236a8:	8019      	strh	r1, [r3, #0]
 80236aa:	f8b2 4124 	ldrh.w	r4, [r2, #292]	@ 0x124
 80236ae:	8899      	ldrh	r1, [r3, #4]
 80236b0:	44a4      	add	ip, r4
 80236b2:	f8a3 c002 	strh.w	ip, [r3, #2]
 80236b6:	f8b2 4126 	ldrh.w	r4, [r2, #294]	@ 0x126
 80236ba:	f8b3 c006 	ldrh.w	ip, [r3, #6]
 80236be:	4421      	add	r1, r4
 80236c0:	8099      	strh	r1, [r3, #4]
 80236c2:	f8b2 4128 	ldrh.w	r4, [r2, #296]	@ 0x128
 80236c6:	8919      	ldrh	r1, [r3, #8]
 80236c8:	44a4      	add	ip, r4
 80236ca:	f8a3 c006 	strh.w	ip, [r3, #6]
 80236ce:	f8b2 412a 	ldrh.w	r4, [r2, #298]	@ 0x12a
 80236d2:	f8b3 c00a 	ldrh.w	ip, [r3, #10]
 80236d6:	4421      	add	r1, r4
 80236d8:	8119      	strh	r1, [r3, #8]
 80236da:	f8b2 412c 	ldrh.w	r4, [r2, #300]	@ 0x12c
 80236de:	8999      	ldrh	r1, [r3, #12]
 80236e0:	44a4      	add	ip, r4
 80236e2:	f8a3 c00a 	strh.w	ip, [r3, #10]
 80236e6:	f8b2 412e 	ldrh.w	r4, [r2, #302]	@ 0x12e
 80236ea:	f8b3 c00e 	ldrh.w	ip, [r3, #14]
 80236ee:	4421      	add	r1, r4
 80236f0:	8199      	strh	r1, [r3, #12]
 80236f2:	f8b2 4130 	ldrh.w	r4, [r2, #304]	@ 0x130
 80236f6:	8a19      	ldrh	r1, [r3, #16]
 80236f8:	44a4      	add	ip, r4
 80236fa:	f8a3 c00e 	strh.w	ip, [r3, #14]
 80236fe:	f8b2 4132 	ldrh.w	r4, [r2, #306]	@ 0x132
 8023702:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 8023706:	4421      	add	r1, r4
 8023708:	8219      	strh	r1, [r3, #16]
 802370a:	f8b2 4134 	ldrh.w	r4, [r2, #308]	@ 0x134
 802370e:	8a99      	ldrh	r1, [r3, #20]
 8023710:	44a4      	add	ip, r4
 8023712:	f8a3 c012 	strh.w	ip, [r3, #18]
 8023716:	f8b2 4136 	ldrh.w	r4, [r2, #310]	@ 0x136
 802371a:	3380      	adds	r3, #128	@ 0x80
 802371c:	4421      	add	r1, r4
 802371e:	f823 1c6c 	strh.w	r1, [r3, #-108]
 8023722:	f8b2 4138 	ldrh.w	r4, [r2, #312]	@ 0x138
 8023726:	f833 1c6a 	ldrh.w	r1, [r3, #-106]
 802372a:	f833 cc68 	ldrh.w	ip, [r3, #-104]
 802372e:	4421      	add	r1, r4
 8023730:	f823 1c6a 	strh.w	r1, [r3, #-106]
 8023734:	f8b2 413a 	ldrh.w	r4, [r2, #314]	@ 0x13a
 8023738:	f833 1c66 	ldrh.w	r1, [r3, #-102]
 802373c:	44a4      	add	ip, r4
 802373e:	f823 cc68 	strh.w	ip, [r3, #-104]
 8023742:	f8b2 413c 	ldrh.w	r4, [r2, #316]	@ 0x13c
 8023746:	f833 cc64 	ldrh.w	ip, [r3, #-100]
 802374a:	4421      	add	r1, r4
 802374c:	f823 1c66 	strh.w	r1, [r3, #-102]
 8023750:	f8b2 413e 	ldrh.w	r4, [r2, #318]	@ 0x13e
 8023754:	f833 1c62 	ldrh.w	r1, [r3, #-98]
 8023758:	44a4      	add	ip, r4
 802375a:	f823 cc64 	strh.w	ip, [r3, #-100]
 802375e:	f8b2 4140 	ldrh.w	r4, [r2, #320]	@ 0x140
 8023762:	f833 cc60 	ldrh.w	ip, [r3, #-96]
 8023766:	4421      	add	r1, r4
 8023768:	f823 1c62 	strh.w	r1, [r3, #-98]
 802376c:	f8b2 4142 	ldrh.w	r4, [r2, #322]	@ 0x142
 8023770:	f833 1c5e 	ldrh.w	r1, [r3, #-94]
 8023774:	44a4      	add	ip, r4
 8023776:	f823 cc60 	strh.w	ip, [r3, #-96]
 802377a:	f8b2 4144 	ldrh.w	r4, [r2, #324]	@ 0x144
 802377e:	f833 cc5c 	ldrh.w	ip, [r3, #-92]
 8023782:	4421      	add	r1, r4
 8023784:	f823 1c5e 	strh.w	r1, [r3, #-94]
 8023788:	f8b2 4146 	ldrh.w	r4, [r2, #326]	@ 0x146
 802378c:	f833 1c5a 	ldrh.w	r1, [r3, #-90]
 8023790:	44a4      	add	ip, r4
 8023792:	f823 cc5c 	strh.w	ip, [r3, #-92]
 8023796:	f8b2 4148 	ldrh.w	r4, [r2, #328]	@ 0x148
 802379a:	f833 cc58 	ldrh.w	ip, [r3, #-88]
 802379e:	4421      	add	r1, r4
 80237a0:	f823 1c5a 	strh.w	r1, [r3, #-90]
 80237a4:	f8b2 414a 	ldrh.w	r4, [r2, #330]	@ 0x14a
 80237a8:	f833 1c56 	ldrh.w	r1, [r3, #-86]
 80237ac:	44a4      	add	ip, r4
 80237ae:	f823 cc58 	strh.w	ip, [r3, #-88]
 80237b2:	f8b2 414c 	ldrh.w	r4, [r2, #332]	@ 0x14c
 80237b6:	3280      	adds	r2, #128	@ 0x80
 80237b8:	4421      	add	r1, r4
 80237ba:	f823 1c56 	strh.w	r1, [r3, #-86]
 80237be:	f8b2 40ce 	ldrh.w	r4, [r2, #206]	@ 0xce
 80237c2:	f833 1c54 	ldrh.w	r1, [r3, #-84]
 80237c6:	f833 cc52 	ldrh.w	ip, [r3, #-82]
 80237ca:	4421      	add	r1, r4
 80237cc:	f823 1c54 	strh.w	r1, [r3, #-84]
 80237d0:	f8b2 40d0 	ldrh.w	r4, [r2, #208]	@ 0xd0
 80237d4:	f833 1c50 	ldrh.w	r1, [r3, #-80]
 80237d8:	44a4      	add	ip, r4
 80237da:	f823 cc52 	strh.w	ip, [r3, #-82]
 80237de:	f8b2 40d2 	ldrh.w	r4, [r2, #210]	@ 0xd2
 80237e2:	f833 cc4e 	ldrh.w	ip, [r3, #-78]
 80237e6:	4421      	add	r1, r4
 80237e8:	f823 1c50 	strh.w	r1, [r3, #-80]
 80237ec:	f8b2 40d4 	ldrh.w	r4, [r2, #212]	@ 0xd4
 80237f0:	f833 1c4c 	ldrh.w	r1, [r3, #-76]
 80237f4:	44a4      	add	ip, r4
 80237f6:	f823 cc4e 	strh.w	ip, [r3, #-78]
 80237fa:	f8b2 40d6 	ldrh.w	r4, [r2, #214]	@ 0xd6
 80237fe:	f833 cc4a 	ldrh.w	ip, [r3, #-74]
 8023802:	4421      	add	r1, r4
 8023804:	f823 1c4c 	strh.w	r1, [r3, #-76]
 8023808:	f8b2 40d8 	ldrh.w	r4, [r2, #216]	@ 0xd8
 802380c:	f833 1c48 	ldrh.w	r1, [r3, #-72]
 8023810:	44a4      	add	ip, r4
 8023812:	f823 cc4a 	strh.w	ip, [r3, #-74]
 8023816:	f8b2 40da 	ldrh.w	r4, [r2, #218]	@ 0xda
 802381a:	f833 cc46 	ldrh.w	ip, [r3, #-70]
 802381e:	4421      	add	r1, r4
 8023820:	f823 1c48 	strh.w	r1, [r3, #-72]
 8023824:	f8b2 40dc 	ldrh.w	r4, [r2, #220]	@ 0xdc
 8023828:	f833 1c44 	ldrh.w	r1, [r3, #-68]
 802382c:	44a4      	add	ip, r4
 802382e:	f823 cc46 	strh.w	ip, [r3, #-70]
 8023832:	f8b2 40de 	ldrh.w	r4, [r2, #222]	@ 0xde
 8023836:	f833 cc42 	ldrh.w	ip, [r3, #-66]
 802383a:	4421      	add	r1, r4
 802383c:	f823 1c44 	strh.w	r1, [r3, #-68]
 8023840:	f8b2 40e0 	ldrh.w	r4, [r2, #224]	@ 0xe0
 8023844:	f833 1c40 	ldrh.w	r1, [r3, #-64]
 8023848:	44a4      	add	ip, r4
 802384a:	f823 cc42 	strh.w	ip, [r3, #-66]
 802384e:	f8b2 40e2 	ldrh.w	r4, [r2, #226]	@ 0xe2
 8023852:	4421      	add	r1, r4
 8023854:	f823 1c40 	strh.w	r1, [r3, #-64]
 8023858:	f8b2 40e4 	ldrh.w	r4, [r2, #228]	@ 0xe4
 802385c:	f833 1c3e 	ldrh.w	r1, [r3, #-62]
 8023860:	f833 cc3c 	ldrh.w	ip, [r3, #-60]
 8023864:	4421      	add	r1, r4
 8023866:	f823 1c3e 	strh.w	r1, [r3, #-62]
 802386a:	f8b2 40e6 	ldrh.w	r4, [r2, #230]	@ 0xe6
 802386e:	f833 1c3a 	ldrh.w	r1, [r3, #-58]
 8023872:	44a4      	add	ip, r4
 8023874:	f823 cc3c 	strh.w	ip, [r3, #-60]
 8023878:	f8b2 40e8 	ldrh.w	r4, [r2, #232]	@ 0xe8
 802387c:	f833 cc38 	ldrh.w	ip, [r3, #-56]
 8023880:	4421      	add	r1, r4
 8023882:	f823 1c3a 	strh.w	r1, [r3, #-58]
 8023886:	f8b2 40ea 	ldrh.w	r4, [r2, #234]	@ 0xea
 802388a:	f833 1c36 	ldrh.w	r1, [r3, #-54]
 802388e:	44a4      	add	ip, r4
 8023890:	f823 cc38 	strh.w	ip, [r3, #-56]
 8023894:	f8b2 40ec 	ldrh.w	r4, [r2, #236]	@ 0xec
 8023898:	f833 cc34 	ldrh.w	ip, [r3, #-52]
 802389c:	4421      	add	r1, r4
 802389e:	f823 1c36 	strh.w	r1, [r3, #-54]
 80238a2:	f8b2 40ee 	ldrh.w	r4, [r2, #238]	@ 0xee
 80238a6:	f833 1c32 	ldrh.w	r1, [r3, #-50]
 80238aa:	44a4      	add	ip, r4
 80238ac:	f823 cc34 	strh.w	ip, [r3, #-52]
 80238b0:	f8b2 40f0 	ldrh.w	r4, [r2, #240]	@ 0xf0
 80238b4:	f833 cc30 	ldrh.w	ip, [r3, #-48]
 80238b8:	4421      	add	r1, r4
 80238ba:	f823 1c32 	strh.w	r1, [r3, #-50]
 80238be:	f8b2 40f2 	ldrh.w	r4, [r2, #242]	@ 0xf2
 80238c2:	f833 1c2e 	ldrh.w	r1, [r3, #-46]
 80238c6:	44a4      	add	ip, r4
 80238c8:	f823 cc30 	strh.w	ip, [r3, #-48]
 80238cc:	f8b2 40f4 	ldrh.w	r4, [r2, #244]	@ 0xf4
 80238d0:	f833 cc2c 	ldrh.w	ip, [r3, #-44]
 80238d4:	4421      	add	r1, r4
 80238d6:	f823 1c2e 	strh.w	r1, [r3, #-46]
 80238da:	f8b2 40f6 	ldrh.w	r4, [r2, #246]	@ 0xf6
 80238de:	f833 1c2a 	ldrh.w	r1, [r3, #-42]
 80238e2:	44a4      	add	ip, r4
 80238e4:	f823 cc2c 	strh.w	ip, [r3, #-44]
 80238e8:	f8b2 40f8 	ldrh.w	r4, [r2, #248]	@ 0xf8
 80238ec:	4421      	add	r1, r4
 80238ee:	f823 1c2a 	strh.w	r1, [r3, #-42]
 80238f2:	f8b2 40fa 	ldrh.w	r4, [r2, #250]	@ 0xfa
 80238f6:	f833 1c28 	ldrh.w	r1, [r3, #-40]
 80238fa:	f833 cc26 	ldrh.w	ip, [r3, #-38]
 80238fe:	4421      	add	r1, r4
 8023900:	f823 1c28 	strh.w	r1, [r3, #-40]
 8023904:	f8b2 40fc 	ldrh.w	r4, [r2, #252]	@ 0xfc
 8023908:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 802390c:	44a4      	add	ip, r4
 802390e:	f823 cc26 	strh.w	ip, [r3, #-38]
 8023912:	f8b2 40fe 	ldrh.w	r4, [r2, #254]	@ 0xfe
 8023916:	f833 cc22 	ldrh.w	ip, [r3, #-34]
 802391a:	4421      	add	r1, r4
 802391c:	f823 1c24 	strh.w	r1, [r3, #-36]
 8023920:	f8b2 4100 	ldrh.w	r4, [r2, #256]	@ 0x100
 8023924:	f833 1c20 	ldrh.w	r1, [r3, #-32]
 8023928:	44a4      	add	ip, r4
 802392a:	f823 cc22 	strh.w	ip, [r3, #-34]
 802392e:	f8b2 4102 	ldrh.w	r4, [r2, #258]	@ 0x102
 8023932:	f833 cc1e 	ldrh.w	ip, [r3, #-30]
 8023936:	4421      	add	r1, r4
 8023938:	f823 1c20 	strh.w	r1, [r3, #-32]
 802393c:	f8b2 4104 	ldrh.w	r4, [r2, #260]	@ 0x104
 8023940:	f833 1c1c 	ldrh.w	r1, [r3, #-28]
 8023944:	44a4      	add	ip, r4
 8023946:	f823 cc1e 	strh.w	ip, [r3, #-30]
 802394a:	f8b2 4106 	ldrh.w	r4, [r2, #262]	@ 0x106
 802394e:	f833 cc1a 	ldrh.w	ip, [r3, #-26]
 8023952:	4421      	add	r1, r4
 8023954:	f823 1c1c 	strh.w	r1, [r3, #-28]
 8023958:	f8b2 4108 	ldrh.w	r4, [r2, #264]	@ 0x108
 802395c:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8023960:	44a4      	add	ip, r4
 8023962:	f823 cc1a 	strh.w	ip, [r3, #-26]
 8023966:	f8b2 410a 	ldrh.w	r4, [r2, #266]	@ 0x10a
 802396a:	f833 cc16 	ldrh.w	ip, [r3, #-22]
 802396e:	4421      	add	r1, r4
 8023970:	f823 1c18 	strh.w	r1, [r3, #-24]
 8023974:	f8b2 410c 	ldrh.w	r4, [r2, #268]	@ 0x10c
 8023978:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 802397c:	44a4      	add	ip, r4
 802397e:	f823 cc16 	strh.w	ip, [r3, #-22]
 8023982:	f8b2 410e 	ldrh.w	r4, [r2, #270]	@ 0x10e
 8023986:	4421      	add	r1, r4
 8023988:	f823 1c14 	strh.w	r1, [r3, #-20]
 802398c:	f8b2 4110 	ldrh.w	r4, [r2, #272]	@ 0x110
 8023990:	f833 1c12 	ldrh.w	r1, [r3, #-18]
 8023994:	f833 cc10 	ldrh.w	ip, [r3, #-16]
 8023998:	4421      	add	r1, r4
 802399a:	f823 1c12 	strh.w	r1, [r3, #-18]
 802399e:	f8b2 4112 	ldrh.w	r4, [r2, #274]	@ 0x112
 80239a2:	f833 1c0e 	ldrh.w	r1, [r3, #-14]
 80239a6:	44a4      	add	ip, r4
 80239a8:	f823 cc10 	strh.w	ip, [r3, #-16]
 80239ac:	f8b2 4114 	ldrh.w	r4, [r2, #276]	@ 0x114
 80239b0:	f833 cc0c 	ldrh.w	ip, [r3, #-12]
 80239b4:	4421      	add	r1, r4
 80239b6:	f823 1c0e 	strh.w	r1, [r3, #-14]
 80239ba:	f8b2 4116 	ldrh.w	r4, [r2, #278]	@ 0x116
 80239be:	f833 1c0a 	ldrh.w	r1, [r3, #-10]
 80239c2:	44a4      	add	ip, r4
 80239c4:	f823 cc0c 	strh.w	ip, [r3, #-12]
 80239c8:	f8b2 4118 	ldrh.w	r4, [r2, #280]	@ 0x118
 80239cc:	f833 cc08 	ldrh.w	ip, [r3, #-8]
 80239d0:	4421      	add	r1, r4
 80239d2:	f823 1c0a 	strh.w	r1, [r3, #-10]
 80239d6:	f8b2 411a 	ldrh.w	r4, [r2, #282]	@ 0x11a
 80239da:	f833 1c06 	ldrh.w	r1, [r3, #-6]
 80239de:	44a4      	add	ip, r4
 80239e0:	f823 cc08 	strh.w	ip, [r3, #-8]
 80239e4:	f8b2 411c 	ldrh.w	r4, [r2, #284]	@ 0x11c
 80239e8:	f833 cc04 	ldrh.w	ip, [r3, #-4]
 80239ec:	4421      	add	r1, r4
 80239ee:	f823 1c06 	strh.w	r1, [r3, #-6]
 80239f2:	f8b2 411e 	ldrh.w	r4, [r2, #286]	@ 0x11e
 80239f6:	f833 1c02 	ldrh.w	r1, [r3, #-2]
 80239fa:	44a4      	add	ip, r4
 80239fc:	f823 cc04 	strh.w	ip, [r3, #-4]
 8023a00:	f8b2 4120 	ldrh.w	r4, [r2, #288]	@ 0x120
 8023a04:	4573      	cmp	r3, lr
 8023a06:	4421      	add	r1, r4
 8023a08:	f823 1c02 	strh.w	r1, [r3, #-2]
 8023a0c:	f47f ae46 	bne.w	802369c <Argus_Cal_GetTotalXtalkVectorTable+0x18>
 8023a10:	bd38      	pop	{r3, r4, r5, pc}
 8023a12:	bf00      	nop

08023a14 <Argus_Cal_Update>:
 8023a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a18:	b0c7      	sub	sp, #284	@ 0x11c
 8023a1a:	4607      	mov	r7, r0
 8023a1c:	f8d0 04c0 	ldr.w	r0, [r0, #1216]	@ 0x4c0
 8023a20:	9100      	str	r1, [sp, #0]
 8023a22:	4688      	mov	r8, r1
 8023a24:	4616      	mov	r6, r2
 8023a26:	f7fc fd65 	bl	80204f4 <Argus_Dev_GetLaserType>
 8023a2a:	ac06      	add	r4, sp, #24
 8023a2c:	4603      	mov	r3, r0
 8023a2e:	4632      	mov	r2, r6
 8023a30:	4641      	mov	r1, r8
 8023a32:	4620      	mov	r0, r4
 8023a34:	f7ff fe26 	bl	8023684 <Argus_Cal_GetTotalXtalkVectorTable>
 8023a38:	4605      	mov	r5, r0
 8023a3a:	2800      	cmp	r0, #0
 8023a3c:	f040 834a 	bne.w	80240d4 <Argus_Cal_Update+0x6c0>
 8023a40:	f8b8 0104 	ldrh.w	r0, [r8, #260]	@ 0x104
 8023a44:	4639      	mov	r1, r7
 8023a46:	e039      	b.n	8023abc <Argus_Cal_Update+0xa8>
 8023a48:	f3c2 2e40 	ubfx	lr, r2, #9, #1
 8023a4c:	eb0e 2292 	add.w	r2, lr, r2, lsr #10
 8023a50:	eb03 0e0c 	add.w	lr, r3, ip
 8023a54:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 8023a58:	864a      	strh	r2, [r1, #50]	@ 0x32
 8023a5a:	f9be 2002 	ldrsh.w	r2, [lr, #2]
 8023a5e:	fb00 f202 	mul.w	r2, r0, r2
 8023a62:	2a00      	cmp	r2, #0
 8023a64:	f2c0 8341 	blt.w	80240ea <Argus_Cal_Update+0x6d6>
 8023a68:	f3c2 2e40 	ubfx	lr, r2, #9, #1
 8023a6c:	eb0e 2292 	add.w	r2, lr, r2, lsr #10
 8023a70:	eb03 0e0c 	add.w	lr, r3, ip
 8023a74:	f10e 0e20 	add.w	lr, lr, #32
 8023a78:	868a      	strh	r2, [r1, #52]	@ 0x34
 8023a7a:	f934 202e 	ldrsh.w	r2, [r4, lr, lsl #2]
 8023a7e:	fb00 f202 	mul.w	r2, r0, r2
 8023a82:	2a00      	cmp	r2, #0
 8023a84:	f2c0 832a 	blt.w	80240dc <Argus_Cal_Update+0x6c8>
 8023a88:	f3c2 2e40 	ubfx	lr, r2, #9, #1
 8023a8c:	eb0e 2292 	add.w	r2, lr, r2, lsr #10
 8023a90:	4463      	add	r3, ip
 8023a92:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8023a96:	f8a1 20b6 	strh.w	r2, [r1, #182]	@ 0xb6
 8023a9a:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	@ 0x82
 8023a9e:	fb00 f303 	mul.w	r3, r0, r3
 8023aa2:	2b00      	cmp	r3, #0
 8023aa4:	db1d      	blt.n	8023ae2 <Argus_Cal_Update+0xce>
 8023aa6:	f3c3 2240 	ubfx	r2, r3, #9, #1
 8023aaa:	3501      	adds	r5, #1
 8023aac:	eb02 2393 	add.w	r3, r2, r3, lsr #10
 8023ab0:	2d20      	cmp	r5, #32
 8023ab2:	f8a1 30b8 	strh.w	r3, [r1, #184]	@ 0xb8
 8023ab6:	f101 0104 	add.w	r1, r1, #4
 8023aba:	d01f      	beq.n	8023afc <Argus_Cal_Update+0xe8>
 8023abc:	f005 0c03 	and.w	ip, r5, #3
 8023ac0:	f025 0303 	bic.w	r3, r5, #3
 8023ac4:	eb03 020c 	add.w	r2, r3, ip
 8023ac8:	f934 2022 	ldrsh.w	r2, [r4, r2, lsl #2]
 8023acc:	fb00 f202 	mul.w	r2, r0, r2
 8023ad0:	2a00      	cmp	r2, #0
 8023ad2:	dab9      	bge.n	8023a48 <Argus_Cal_Update+0x34>
 8023ad4:	4252      	negs	r2, r2
 8023ad6:	f3c2 2e40 	ubfx	lr, r2, #9, #1
 8023ada:	eb0e 2292 	add.w	r2, lr, r2, lsr #10
 8023ade:	4252      	negs	r2, r2
 8023ae0:	e7b6      	b.n	8023a50 <Argus_Cal_Update+0x3c>
 8023ae2:	425b      	negs	r3, r3
 8023ae4:	f3c3 2240 	ubfx	r2, r3, #9, #1
 8023ae8:	eb02 2393 	add.w	r3, r2, r3, lsr #10
 8023aec:	3501      	adds	r5, #1
 8023aee:	425b      	negs	r3, r3
 8023af0:	2d20      	cmp	r5, #32
 8023af2:	f8a1 30b8 	strh.w	r3, [r1, #184]	@ 0xb8
 8023af6:	f101 0104 	add.w	r1, r1, #4
 8023afa:	d1df      	bne.n	8023abc <Argus_Cal_Update+0xa8>
 8023afc:	f9b6 2222 	ldrsh.w	r2, [r6, #546]	@ 0x222
 8023b00:	fb00 f302 	mul.w	r3, r0, r2
 8023b04:	2b00      	cmp	r3, #0
 8023b06:	f2c0 82f7 	blt.w	80240f8 <Argus_Cal_Update+0x6e4>
 8023b0a:	f3c3 2240 	ubfx	r2, r3, #9, #1
 8023b0e:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 8023b12:	f9b6 3224 	ldrsh.w	r3, [r6, #548]	@ 0x224
 8023b16:	fb03 f000 	mul.w	r0, r3, r0
 8023b1a:	b212      	sxth	r2, r2
 8023b1c:	2800      	cmp	r0, #0
 8023b1e:	f8a7 20b2 	strh.w	r2, [r7, #178]	@ 0xb2
 8023b22:	f2c0 82f0 	blt.w	8024106 <Argus_Cal_Update+0x6f2>
 8023b26:	f3c0 2340 	ubfx	r3, r0, #9, #1
 8023b2a:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 8023b2e:	b21b      	sxth	r3, r3
 8023b30:	2100      	movs	r1, #0
 8023b32:	f8a7 2136 	strh.w	r2, [r7, #310]	@ 0x136
 8023b36:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
 8023b3a:	2220      	movs	r2, #32
 8023b3c:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
 8023b40:	f507 70a1 	add.w	r0, r7, #322	@ 0x142
 8023b44:	f005 fe05 	bl	8029752 <memset>
 8023b48:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8023b4c:	f8a7 3162 	strh.w	r3, [r7, #354]	@ 0x162
 8023b50:	2300      	movs	r3, #0
 8023b52:	f887 3164 	strb.w	r3, [r7, #356]	@ 0x164
 8023b56:	f8d7 04c0 	ldr.w	r0, [r7, #1216]	@ 0x4c0
 8023b5a:	f7fc fcc5 	bl	80204e8 <Argus_Dev_GetModule>
 8023b5e:	9900      	ldr	r1, [sp, #0]
 8023b60:	4603      	mov	r3, r0
 8023b62:	4632      	mov	r2, r6
 8023b64:	4620      	mov	r0, r4
 8023b66:	f001 fbc9 	bl	80252fc <Argus_Cal_GetInternalPixelRangeOffsets>
 8023b6a:	1e05      	subs	r5, r0, #0
 8023b6c:	f2c0 82b2 	blt.w	80240d4 <Argus_Cal_Update+0x6c0>
 8023b70:	f8b4 a012 	ldrh.w	sl, [r4, #18]
 8023b74:	f8b4 e000 	ldrh.w	lr, [r4]
 8023b78:	f8ad a004 	strh.w	sl, [sp, #4]
 8023b7c:	f8b6 a01c 	ldrh.w	sl, [r6, #28]
 8023b80:	f8b4 c002 	ldrh.w	ip, [r4, #2]
 8023b84:	88a0      	ldrh	r0, [r4, #4]
 8023b86:	f8b4 9006 	ldrh.w	r9, [r4, #6]
 8023b8a:	8921      	ldrh	r1, [r4, #8]
 8023b8c:	8962      	ldrh	r2, [r4, #10]
 8023b8e:	89a3      	ldrh	r3, [r4, #12]
 8023b90:	f8b4 800e 	ldrh.w	r8, [r4, #14]
 8023b94:	f8b4 b010 	ldrh.w	fp, [r4, #16]
 8023b98:	44d6      	add	lr, sl
 8023b9a:	f8a4 e000 	strh.w	lr, [r4]
 8023b9e:	f8b6 e01e 	ldrh.w	lr, [r6, #30]
 8023ba2:	44f4      	add	ip, lr
 8023ba4:	f8a4 c002 	strh.w	ip, [r4, #2]
 8023ba8:	f8b6 c020 	ldrh.w	ip, [r6, #32]
 8023bac:	4460      	add	r0, ip
 8023bae:	80a0      	strh	r0, [r4, #4]
 8023bb0:	8c70      	ldrh	r0, [r6, #34]	@ 0x22
 8023bb2:	4481      	add	r9, r0
 8023bb4:	8cb0      	ldrh	r0, [r6, #36]	@ 0x24
 8023bb6:	f8a4 9006 	strh.w	r9, [r4, #6]
 8023bba:	4401      	add	r1, r0
 8023bbc:	8121      	strh	r1, [r4, #8]
 8023bbe:	8cf1      	ldrh	r1, [r6, #38]	@ 0x26
 8023bc0:	440a      	add	r2, r1
 8023bc2:	8162      	strh	r2, [r4, #10]
 8023bc4:	8d32      	ldrh	r2, [r6, #40]	@ 0x28
 8023bc6:	4413      	add	r3, r2
 8023bc8:	81a3      	strh	r3, [r4, #12]
 8023bca:	8d73      	ldrh	r3, [r6, #42]	@ 0x2a
 8023bcc:	9a01      	ldr	r2, [sp, #4]
 8023bce:	4498      	add	r8, r3
 8023bd0:	8db3      	ldrh	r3, [r6, #44]	@ 0x2c
 8023bd2:	f8a4 800e 	strh.w	r8, [r4, #14]
 8023bd6:	449b      	add	fp, r3
 8023bd8:	8df3      	ldrh	r3, [r6, #46]	@ 0x2e
 8023bda:	f8a4 b010 	strh.w	fp, [r4, #16]
 8023bde:	4413      	add	r3, r2
 8023be0:	8263      	strh	r3, [r4, #18]
 8023be2:	8e33      	ldrh	r3, [r6, #48]	@ 0x30
 8023be4:	8aa2      	ldrh	r2, [r4, #20]
 8023be6:	f8b4 a016 	ldrh.w	sl, [r4, #22]
 8023bea:	f8b4 9018 	ldrh.w	r9, [r4, #24]
 8023bee:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8023bf2:	f8b4 e01c 	ldrh.w	lr, [r4, #28]
 8023bf6:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
 8023bfa:	8c20      	ldrh	r0, [r4, #32]
 8023bfc:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 8023bfe:	f8b4 b026 	ldrh.w	fp, [r4, #38]	@ 0x26
 8023c02:	4413      	add	r3, r2
 8023c04:	82a3      	strh	r3, [r4, #20]
 8023c06:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8023c08:	f8ad 3004 	strh.w	r3, [sp, #4]
 8023c0c:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8023c0e:	8ca2      	ldrh	r2, [r4, #36]	@ 0x24
 8023c10:	4453      	add	r3, sl
 8023c12:	82e3      	strh	r3, [r4, #22]
 8023c14:	8eb3      	ldrh	r3, [r6, #52]	@ 0x34
 8023c16:	444b      	add	r3, r9
 8023c18:	8323      	strh	r3, [r4, #24]
 8023c1a:	8ef3      	ldrh	r3, [r6, #54]	@ 0x36
 8023c1c:	4498      	add	r8, r3
 8023c1e:	8f33      	ldrh	r3, [r6, #56]	@ 0x38
 8023c20:	f8a4 801a 	strh.w	r8, [r4, #26]
 8023c24:	449e      	add	lr, r3
 8023c26:	8f73      	ldrh	r3, [r6, #58]	@ 0x3a
 8023c28:	f8a4 e01c 	strh.w	lr, [r4, #28]
 8023c2c:	449c      	add	ip, r3
 8023c2e:	8fb3      	ldrh	r3, [r6, #60]	@ 0x3c
 8023c30:	f8a4 c01e 	strh.w	ip, [r4, #30]
 8023c34:	4418      	add	r0, r3
 8023c36:	8ff3      	ldrh	r3, [r6, #62]	@ 0x3e
 8023c38:	8420      	strh	r0, [r4, #32]
 8023c3a:	4419      	add	r1, r3
 8023c3c:	f8b6 3040 	ldrh.w	r3, [r6, #64]	@ 0x40
 8023c40:	8461      	strh	r1, [r4, #34]	@ 0x22
 8023c42:	441a      	add	r2, r3
 8023c44:	f8b6 3042 	ldrh.w	r3, [r6, #66]	@ 0x42
 8023c48:	84a2      	strh	r2, [r4, #36]	@ 0x24
 8023c4a:	449b      	add	fp, r3
 8023c4c:	f8a4 b026 	strh.w	fp, [r4, #38]	@ 0x26
 8023c50:	f8b6 3044 	ldrh.w	r3, [r6, #68]	@ 0x44
 8023c54:	9a01      	ldr	r2, [sp, #4]
 8023c56:	f8b4 a02c 	ldrh.w	sl, [r4, #44]	@ 0x2c
 8023c5a:	f8b4 902e 	ldrh.w	r9, [r4, #46]	@ 0x2e
 8023c5e:	f8b4 8030 	ldrh.w	r8, [r4, #48]	@ 0x30
 8023c62:	f8b4 e032 	ldrh.w	lr, [r4, #50]	@ 0x32
 8023c66:	f8b4 c034 	ldrh.w	ip, [r4, #52]	@ 0x34
 8023c6a:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8023c6c:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 8023c6e:	f8b4 b03c 	ldrh.w	fp, [r4, #60]	@ 0x3c
 8023c72:	4413      	add	r3, r2
 8023c74:	8523      	strh	r3, [r4, #40]	@ 0x28
 8023c76:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8023c78:	f8b6 3046 	ldrh.w	r3, [r6, #70]	@ 0x46
 8023c7c:	4413      	add	r3, r2
 8023c7e:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8023c80:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8023c82:	f8ad 3004 	strh.w	r3, [sp, #4]
 8023c86:	f8b6 3048 	ldrh.w	r3, [r6, #72]	@ 0x48
 8023c8a:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
 8023c8c:	4453      	add	r3, sl
 8023c8e:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8023c90:	f8b6 304a 	ldrh.w	r3, [r6, #74]	@ 0x4a
 8023c94:	444b      	add	r3, r9
 8023c96:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 8023c98:	f8b6 304c 	ldrh.w	r3, [r6, #76]	@ 0x4c
 8023c9c:	4498      	add	r8, r3
 8023c9e:	f8b6 304e 	ldrh.w	r3, [r6, #78]	@ 0x4e
 8023ca2:	f8a4 8030 	strh.w	r8, [r4, #48]	@ 0x30
 8023ca6:	449e      	add	lr, r3
 8023ca8:	f8b6 3050 	ldrh.w	r3, [r6, #80]	@ 0x50
 8023cac:	f8a4 e032 	strh.w	lr, [r4, #50]	@ 0x32
 8023cb0:	449c      	add	ip, r3
 8023cb2:	f8b6 3052 	ldrh.w	r3, [r6, #82]	@ 0x52
 8023cb6:	f8a4 c034 	strh.w	ip, [r4, #52]	@ 0x34
 8023cba:	4418      	add	r0, r3
 8023cbc:	f8b6 3054 	ldrh.w	r3, [r6, #84]	@ 0x54
 8023cc0:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8023cc2:	4419      	add	r1, r3
 8023cc4:	f8b6 3056 	ldrh.w	r3, [r6, #86]	@ 0x56
 8023cc8:	8721      	strh	r1, [r4, #56]	@ 0x38
 8023cca:	441a      	add	r2, r3
 8023ccc:	8762      	strh	r2, [r4, #58]	@ 0x3a
 8023cce:	f8b4 8054 	ldrh.w	r8, [r4, #84]	@ 0x54
 8023cd2:	9a01      	ldr	r2, [sp, #4]
 8023cd4:	f8b4 a042 	ldrh.w	sl, [r4, #66]	@ 0x42
 8023cd8:	f8ad 8004 	strh.w	r8, [sp, #4]
 8023cdc:	f8b6 805e 	ldrh.w	r8, [r6, #94]	@ 0x5e
 8023ce0:	f8b4 9044 	ldrh.w	r9, [r4, #68]	@ 0x44
 8023ce4:	f8b4 e046 	ldrh.w	lr, [r4, #70]	@ 0x46
 8023ce8:	f8b4 c048 	ldrh.w	ip, [r4, #72]	@ 0x48
 8023cec:	f8b6 3058 	ldrh.w	r3, [r6, #88]	@ 0x58
 8023cf0:	f8b4 004a 	ldrh.w	r0, [r4, #74]	@ 0x4a
 8023cf4:	f8b4 104c 	ldrh.w	r1, [r4, #76]	@ 0x4c
 8023cf8:	44d0      	add	r8, sl
 8023cfa:	f8a4 8042 	strh.w	r8, [r4, #66]	@ 0x42
 8023cfe:	f8b6 8060 	ldrh.w	r8, [r6, #96]	@ 0x60
 8023d02:	44c8      	add	r8, r9
 8023d04:	f8a4 8044 	strh.w	r8, [r4, #68]	@ 0x44
 8023d08:	f8b6 8062 	ldrh.w	r8, [r6, #98]	@ 0x62
 8023d0c:	44c6      	add	lr, r8
 8023d0e:	f8a4 e046 	strh.w	lr, [r4, #70]	@ 0x46
 8023d12:	f8b6 e064 	ldrh.w	lr, [r6, #100]	@ 0x64
 8023d16:	44f4      	add	ip, lr
 8023d18:	f8a4 c048 	strh.w	ip, [r4, #72]	@ 0x48
 8023d1c:	f8b6 c066 	ldrh.w	ip, [r6, #102]	@ 0x66
 8023d20:	449b      	add	fp, r3
 8023d22:	f8b6 305a 	ldrh.w	r3, [r6, #90]	@ 0x5a
 8023d26:	f8a4 b03c 	strh.w	fp, [r4, #60]	@ 0x3c
 8023d2a:	4460      	add	r0, ip
 8023d2c:	4413      	add	r3, r2
 8023d2e:	f8a4 004a 	strh.w	r0, [r4, #74]	@ 0x4a
 8023d32:	f8b6 0068 	ldrh.w	r0, [r6, #104]	@ 0x68
 8023d36:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 8023d3a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8023d3c:	f8b6 305c 	ldrh.w	r3, [r6, #92]	@ 0x5c
 8023d40:	f8b4 b052 	ldrh.w	fp, [r4, #82]	@ 0x52
 8023d44:	4401      	add	r1, r0
 8023d46:	4413      	add	r3, r2
 8023d48:	f8a4 104c 	strh.w	r1, [r4, #76]	@ 0x4c
 8023d4c:	f8b4 204e 	ldrh.w	r2, [r4, #78]	@ 0x4e
 8023d50:	f8b6 106a 	ldrh.w	r1, [r6, #106]	@ 0x6a
 8023d54:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
 8023d58:	440a      	add	r2, r1
 8023d5a:	f8b4 3050 	ldrh.w	r3, [r4, #80]	@ 0x50
 8023d5e:	f8a4 204e 	strh.w	r2, [r4, #78]	@ 0x4e
 8023d62:	f8b6 206c 	ldrh.w	r2, [r6, #108]	@ 0x6c
 8023d66:	f8b4 a06a 	ldrh.w	sl, [r4, #106]	@ 0x6a
 8023d6a:	f8b4 9058 	ldrh.w	r9, [r4, #88]	@ 0x58
 8023d6e:	f8b4 805a 	ldrh.w	r8, [r4, #90]	@ 0x5a
 8023d72:	f8b4 e05c 	ldrh.w	lr, [r4, #92]	@ 0x5c
 8023d76:	f8b4 c05e 	ldrh.w	ip, [r4, #94]	@ 0x5e
 8023d7a:	f8b4 0060 	ldrh.w	r0, [r4, #96]	@ 0x60
 8023d7e:	f8b4 1062 	ldrh.w	r1, [r4, #98]	@ 0x62
 8023d82:	4413      	add	r3, r2
 8023d84:	9a01      	ldr	r2, [sp, #4]
 8023d86:	f8ad a004 	strh.w	sl, [sp, #4]
 8023d8a:	f8b6 a074 	ldrh.w	sl, [r6, #116]	@ 0x74
 8023d8e:	f8a4 3050 	strh.w	r3, [r4, #80]	@ 0x50
 8023d92:	44d1      	add	r9, sl
 8023d94:	f8a4 9058 	strh.w	r9, [r4, #88]	@ 0x58
 8023d98:	f8b6 9076 	ldrh.w	r9, [r6, #118]	@ 0x76
 8023d9c:	f8b6 306e 	ldrh.w	r3, [r6, #110]	@ 0x6e
 8023da0:	44c8      	add	r8, r9
 8023da2:	f8a4 805a 	strh.w	r8, [r4, #90]	@ 0x5a
 8023da6:	f8b6 8078 	ldrh.w	r8, [r6, #120]	@ 0x78
 8023daa:	44c6      	add	lr, r8
 8023dac:	f8a4 e05c 	strh.w	lr, [r4, #92]	@ 0x5c
 8023db0:	f8b6 e07a 	ldrh.w	lr, [r6, #122]	@ 0x7a
 8023db4:	44f4      	add	ip, lr
 8023db6:	449b      	add	fp, r3
 8023db8:	f8a4 c05e 	strh.w	ip, [r4, #94]	@ 0x5e
 8023dbc:	f8b6 3070 	ldrh.w	r3, [r6, #112]	@ 0x70
 8023dc0:	f8b6 c07c 	ldrh.w	ip, [r6, #124]	@ 0x7c
 8023dc4:	f8a4 b052 	strh.w	fp, [r4, #82]	@ 0x52
 8023dc8:	4413      	add	r3, r2
 8023dca:	4460      	add	r0, ip
 8023dcc:	f8b6 2072 	ldrh.w	r2, [r6, #114]	@ 0x72
 8023dd0:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 8023dd4:	f8a4 0060 	strh.w	r0, [r4, #96]	@ 0x60
 8023dd8:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 8023ddc:	f8b6 007e 	ldrh.w	r0, [r6, #126]	@ 0x7e
 8023de0:	f8b4 b068 	ldrh.w	fp, [r4, #104]	@ 0x68
 8023de4:	4413      	add	r3, r2
 8023de6:	4401      	add	r1, r0
 8023de8:	f8b4 2064 	ldrh.w	r2, [r4, #100]	@ 0x64
 8023dec:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
 8023df0:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 8023df4:	f8a4 1062 	strh.w	r1, [r4, #98]	@ 0x62
 8023df8:	f8b6 1080 	ldrh.w	r1, [r6, #128]	@ 0x80
 8023dfc:	f8b4 a06e 	ldrh.w	sl, [r4, #110]	@ 0x6e
 8023e00:	f8b4 9070 	ldrh.w	r9, [r4, #112]	@ 0x70
 8023e04:	f8b4 8072 	ldrh.w	r8, [r4, #114]	@ 0x72
 8023e08:	f8b4 e074 	ldrh.w	lr, [r4, #116]	@ 0x74
 8023e0c:	f8b4 c076 	ldrh.w	ip, [r4, #118]	@ 0x76
 8023e10:	f8b4 0078 	ldrh.w	r0, [r4, #120]	@ 0x78
 8023e14:	440a      	add	r2, r1
 8023e16:	f8a4 2064 	strh.w	r2, [r4, #100]	@ 0x64
 8023e1a:	f8b6 2082 	ldrh.w	r2, [r6, #130]	@ 0x82
 8023e1e:	f8b4 107a 	ldrh.w	r1, [r4, #122]	@ 0x7a
 8023e22:	4413      	add	r3, r2
 8023e24:	f8a4 3066 	strh.w	r3, [r4, #102]	@ 0x66
 8023e28:	f8b6 3084 	ldrh.w	r3, [r6, #132]	@ 0x84
 8023e2c:	9a01      	ldr	r2, [sp, #4]
 8023e2e:	449b      	add	fp, r3
 8023e30:	f8a4 b068 	strh.w	fp, [r4, #104]	@ 0x68
 8023e34:	f8b6 b08a 	ldrh.w	fp, [r6, #138]	@ 0x8a
 8023e38:	f8b6 3086 	ldrh.w	r3, [r6, #134]	@ 0x86
 8023e3c:	44da      	add	sl, fp
 8023e3e:	f8a4 a06e 	strh.w	sl, [r4, #110]	@ 0x6e
 8023e42:	f8b6 a08c 	ldrh.w	sl, [r6, #140]	@ 0x8c
 8023e46:	44d1      	add	r9, sl
 8023e48:	f8a4 9070 	strh.w	r9, [r4, #112]	@ 0x70
 8023e4c:	f8b6 908e 	ldrh.w	r9, [r6, #142]	@ 0x8e
 8023e50:	44c8      	add	r8, r9
 8023e52:	f8a4 8072 	strh.w	r8, [r4, #114]	@ 0x72
 8023e56:	f8b6 8090 	ldrh.w	r8, [r6, #144]	@ 0x90
 8023e5a:	44c6      	add	lr, r8
 8023e5c:	f8a4 e074 	strh.w	lr, [r4, #116]	@ 0x74
 8023e60:	f8b6 e092 	ldrh.w	lr, [r6, #146]	@ 0x92
 8023e64:	4413      	add	r3, r2
 8023e66:	44f4      	add	ip, lr
 8023e68:	f8b6 2088 	ldrh.w	r2, [r6, #136]	@ 0x88
 8023e6c:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
 8023e70:	f8a4 c076 	strh.w	ip, [r4, #118]	@ 0x76
 8023e74:	f8b4 306c 	ldrh.w	r3, [r4, #108]	@ 0x6c
 8023e78:	f8b6 c094 	ldrh.w	ip, [r6, #148]	@ 0x94
 8023e7c:	4413      	add	r3, r2
 8023e7e:	4460      	add	r0, ip
 8023e80:	f8b4 207c 	ldrh.w	r2, [r4, #124]	@ 0x7c
 8023e84:	f8a4 306c 	strh.w	r3, [r4, #108]	@ 0x6c
 8023e88:	f8b4 307e 	ldrh.w	r3, [r4, #126]	@ 0x7e
 8023e8c:	f8a4 0078 	strh.w	r0, [r4, #120]	@ 0x78
 8023e90:	f8b6 0096 	ldrh.w	r0, [r6, #150]	@ 0x96
 8023e94:	4401      	add	r1, r0
 8023e96:	f8a4 107a 	strh.w	r1, [r4, #122]	@ 0x7a
 8023e9a:	f8b6 1098 	ldrh.w	r1, [r6, #152]	@ 0x98
 8023e9e:	440a      	add	r2, r1
 8023ea0:	f8a4 207c 	strh.w	r2, [r4, #124]	@ 0x7c
 8023ea4:	f8b6 209a 	ldrh.w	r2, [r6, #154]	@ 0x9a
 8023ea8:	4413      	add	r3, r2
 8023eaa:	f8a4 307e 	strh.w	r3, [r4, #126]	@ 0x7e
 8023eae:	f040 8111 	bne.w	80240d4 <Argus_Cal_Update+0x6c0>
 8023eb2:	f507 72b2 	add.w	r2, r7, #356	@ 0x164
 8023eb6:	462b      	mov	r3, r5
 8023eb8:	f834 1013 	ldrh.w	r1, [r4, r3, lsl #1]
 8023ebc:	f822 1f02 	strh.w	r1, [r2, #2]!
 8023ec0:	3301      	adds	r3, #1
 8023ec2:	2b20      	cmp	r3, #32
 8023ec4:	d1f8      	bne.n	8023eb8 <Argus_Cal_Update+0x4a4>
 8023ec6:	f9b7 02a0 	ldrsh.w	r0, [r7, #672]	@ 0x2a0
 8023eca:	f8a7 01a6 	strh.w	r0, [r7, #422]	@ 0x1a6
 8023ece:	f507 72d3 	add.w	r2, r7, #422	@ 0x1a6
 8023ed2:	2300      	movs	r3, #0
 8023ed4:	f103 0120 	add.w	r1, r3, #32
 8023ed8:	3301      	adds	r3, #1
 8023eda:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 8023ede:	f822 1f02 	strh.w	r1, [r2, #2]!
 8023ee2:	2b20      	cmp	r3, #32
 8023ee4:	d1f6      	bne.n	8023ed4 <Argus_Cal_Update+0x4c0>
 8023ee6:	f8a7 01e8 	strh.w	r0, [r7, #488]	@ 0x1e8
 8023eea:	f896 1292 	ldrb.w	r1, [r6, #658]	@ 0x292
 8023eee:	a802      	add	r0, sp, #8
 8023ef0:	0389      	lsls	r1, r1, #14
 8023ef2:	f7ff fa69 	bl	80233c8 <Argus_Cal_GetGainValues>
 8023ef6:	f10d 0808 	add.w	r8, sp, #8
 8023efa:	46a1      	mov	r9, r4
 8023efc:	9802      	ldr	r0, [sp, #8]
 8023efe:	f858 3b04 	ldr.w	r3, [r8], #4
 8023f02:	f5c0 3040 	rsb	r0, r0, #196608	@ 0x30000
 8023f06:	4418      	add	r0, r3
 8023f08:	f004 fd46 	bl	8028998 <fp_log16>
 8023f0c:	4544      	cmp	r4, r8
 8023f0e:	f849 0b04 	str.w	r0, [r9], #4
 8023f12:	d1f3      	bne.n	8023efc <Argus_Cal_Update+0x4e8>
 8023f14:	e9d4 9100 	ldrd	r9, r1, [r4]
 8023f18:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8023f1c:	eba1 0208 	sub.w	r2, r1, r8
 8023f20:	eba9 0308 	sub.w	r3, r9, r8
 8023f24:	4692      	mov	sl, r2
 8023f26:	469e      	mov	lr, r3
 8023f28:	2b00      	cmp	r3, #0
 8023f2a:	f000 80f3 	beq.w	8024114 <Argus_Cal_Update+0x700>
 8023f2e:	2a00      	cmp	r2, #0
 8023f30:	bfb8      	it	lt
 8023f32:	eba8 0201 	sublt.w	r2, r8, r1
 8023f36:	2b00      	cmp	r3, #0
 8023f38:	f2c0 816d 	blt.w	8024216 <Argus_Cal_Update+0x802>
 8023f3c:	4293      	cmp	r3, r2
 8023f3e:	4618      	mov	r0, r3
 8023f40:	bf28      	it	cs
 8023f42:	f44f 3180 	movcs.w	r1, #65536	@ 0x10000
 8023f46:	f080 816f 	bcs.w	8024228 <Argus_Cal_Update+0x814>
 8023f4a:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8023f4e:	0040      	lsls	r0, r0, #1
 8023f50:	4290      	cmp	r0, r2
 8023f52:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8023f56:	d3fa      	bcc.n	8023f4e <Argus_Cal_Update+0x53a>
 8023f58:	2900      	cmp	r1, #0
 8023f5a:	f040 8163 	bne.w	8024224 <Argus_Cal_Update+0x810>
 8023f5e:	ea9a 0f03 	teq	sl, r3
 8023f62:	bf4c      	ite	mi
 8023f64:	f04f 4c00 	movmi.w	ip, #2147483648	@ 0x80000000
 8023f68:	f06f 4c00 	mvnpl.w	ip, #2147483648	@ 0x80000000
 8023f6c:	68a1      	ldr	r1, [r4, #8]
 8023f6e:	f8c7 c020 	str.w	ip, [r7, #32]
 8023f72:	eba1 0208 	sub.w	r2, r1, r8
 8023f76:	2a00      	cmp	r2, #0
 8023f78:	4614      	mov	r4, r2
 8023f7a:	da01      	bge.n	8023f80 <Argus_Cal_Update+0x56c>
 8023f7c:	eba8 0201 	sub.w	r2, r8, r1
 8023f80:	2b00      	cmp	r3, #0
 8023f82:	f2c0 8127 	blt.w	80241d4 <Argus_Cal_Update+0x7c0>
 8023f86:	4293      	cmp	r3, r2
 8023f88:	f080 820b 	bcs.w	80243a2 <Argus_Cal_Update+0x98e>
 8023f8c:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8023f90:	005b      	lsls	r3, r3, #1
 8023f92:	4293      	cmp	r3, r2
 8023f94:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8023f98:	d3fa      	bcc.n	8023f90 <Argus_Cal_Update+0x57c>
 8023f9a:	2900      	cmp	r1, #0
 8023f9c:	f040 8122 	bne.w	80241e4 <Argus_Cal_Update+0x7d0>
 8023fa0:	ea9e 0f04 	teq	lr, r4
 8023fa4:	f100 80c4 	bmi.w	8024130 <Argus_Cal_Update+0x71c>
 8023fa8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8023fac:	9b00      	ldr	r3, [sp, #0]
 8023fae:	6278      	str	r0, [r7, #36]	@ 0x24
 8023fb0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8023fb4:	2b00      	cmp	r3, #0
 8023fb6:	f040 80c6 	bne.w	8024146 <Argus_Cal_Update+0x732>
 8023fba:	f8c7 302e 	str.w	r3, [r7, #46]	@ 0x2e
 8023fbe:	4631      	mov	r1, r6
 8023fc0:	4638      	mov	r0, r7
 8023fc2:	f7fe feff 	bl	8022dc4 <UpdateAPDVoltage>
 8023fc6:	f9b7 e028 	ldrsh.w	lr, [r7, #40]	@ 0x28
 8023fca:	f996 3272 	ldrsb.w	r3, [r6, #626]	@ 0x272
 8023fce:	f996 8273 	ldrsb.w	r8, [r6, #627]	@ 0x273
 8023fd2:	f896 426e 	ldrb.w	r4, [r6, #622]	@ 0x26e
 8023fd6:	f896 c271 	ldrb.w	ip, [r6, #625]	@ 0x271
 8023fda:	f896 226c 	ldrb.w	r2, [r6, #620]	@ 0x26c
 8023fde:	f896 126f 	ldrb.w	r1, [r6, #623]	@ 0x26f
 8023fe2:	f896 926d 	ldrb.w	r9, [r6, #621]	@ 0x26d
 8023fe6:	f896 a270 	ldrb.w	sl, [r6, #624]	@ 0x270
 8023fea:	f8d7 04c0 	ldr.w	r0, [r7, #1216]	@ 0x4c0
 8023fee:	f647 7bff 	movw	fp, #32767	@ 0x7fff
 8023ff2:	45de      	cmp	lr, fp
 8023ff4:	f1a3 031e 	sub.w	r3, r3, #30
 8023ff8:	bf14      	ite	ne
 8023ffa:	ea4f 2e2e 	movne.w	lr, lr, asr #8
 8023ffe:	46ae      	moveq	lr, r5
 8024000:	4573      	cmp	r3, lr
 8024002:	f1a8 081e 	sub.w	r8, r8, #30
 8024006:	bfb8      	it	lt
 8024008:	4673      	movlt	r3, lr
 802400a:	4598      	cmp	r8, r3
 802400c:	bfa8      	it	ge
 802400e:	4698      	movge	r8, r3
 8024010:	fb08 f30c 	mul.w	r3, r8, ip
 8024014:	fb08 f404 	mul.w	r4, r8, r4
 8024018:	eb03 1aca 	add.w	sl, r3, sl, lsl #7
 802401c:	eb04 19c9 	add.w	r9, r4, r9, lsl #7
 8024020:	02cb      	lsls	r3, r1, #11
 8024022:	02d1      	lsls	r1, r2, #11
 8024024:	fb08 330a 	mla	r3, r8, sl, r3
 8024028:	fb08 1109 	mla	r1, r8, r9, r1
 802402c:	fb08 f203 	mul.w	r2, r8, r3
 8024030:	fb08 f101 	mul.w	r1, r8, r1
 8024034:	f102 7280 	add.w	r2, r2, #16777216	@ 0x1000000
 8024038:	f101 7180 	add.w	r1, r1, #16777216	@ 0x1000000
 802403c:	1212      	asrs	r2, r2, #8
 802403e:	1209      	asrs	r1, r1, #8
 8024040:	f7fc f8ce 	bl	80201e0 <Argus_Dev_UpdateLaserTemperatureCompensation>
 8024044:	9b00      	ldr	r3, [sp, #0]
 8024046:	4ab5      	ldr	r2, [pc, #724]	@ (802431c <Argus_Cal_Update+0x908>)
 8024048:	685b      	ldr	r3, [r3, #4]
 802404a:	08db      	lsrs	r3, r3, #3
 802404c:	fba2 2303 	umull	r2, r3, r2, r3
 8024050:	f3c3 1387 	ubfx	r3, r3, #6, #8
 8024054:	2b01      	cmp	r3, #1
 8024056:	bf98      	it	ls
 8024058:	2303      	movls	r3, #3
 802405a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 802405e:	7e71      	ldrb	r1, [r6, #25]
 8024060:	2940      	cmp	r1, #64	@ 0x40
 8024062:	d068      	beq.n	8024136 <Argus_Cal_Update+0x722>
 8024064:	0288      	lsls	r0, r1, #10
 8024066:	f004 fc97 	bl	8028998 <fp_log16>
 802406a:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
 802406e:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
 8024072:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8024076:	f240 8176 	bls.w	8024366 <Argus_Cal_Update+0x952>
 802407a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 802407e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8024082:	4616      	mov	r6, r2
 8024084:	0052      	lsls	r2, r2, #1
 8024086:	428a      	cmp	r2, r1
 8024088:	461c      	mov	r4, r3
 802408a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802408e:	d3f8      	bcc.n	8024082 <Argus_Cal_Update+0x66e>
 8024090:	2b00      	cmp	r3, #0
 8024092:	f040 8135 	bne.w	8024300 <Argus_Cal_Update+0x8ec>
 8024096:	2800      	cmp	r0, #0
 8024098:	bfac      	ite	ge
 802409a:	f06f 4800 	mvnge.w	r8, #2147483648	@ 0x80000000
 802409e:	f04f 4800 	movlt.w	r8, #2147483648	@ 0x80000000
 80240a2:	1e7e      	subs	r6, r7, #1
 80240a4:	f107 091f 	add.w	r9, r7, #31
 80240a8:	2400      	movs	r4, #0
 80240aa:	4620      	mov	r0, r4
 80240ac:	f004 fbc2 	bl	8028834 <fp_exp16>
 80240b0:	f3c0 2340 	ubfx	r3, r0, #9, #1
 80240b4:	eb03 2090 	add.w	r0, r3, r0, lsr #10
 80240b8:	2801      	cmp	r0, #1
 80240ba:	bf38      	it	cc
 80240bc:	2001      	movcc	r0, #1
 80240be:	28ff      	cmp	r0, #255	@ 0xff
 80240c0:	bf28      	it	cs
 80240c2:	20ff      	movcs	r0, #255	@ 0xff
 80240c4:	f806 0f01 	strb.w	r0, [r6, #1]!
 80240c8:	45b1      	cmp	r9, r6
 80240ca:	4444      	add	r4, r8
 80240cc:	d1ed      	bne.n	80240aa <Argus_Cal_Update+0x696>
 80240ce:	2300      	movs	r3, #0
 80240d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80240d4:	4628      	mov	r0, r5
 80240d6:	b047      	add	sp, #284	@ 0x11c
 80240d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80240dc:	4252      	negs	r2, r2
 80240de:	f3c2 2e40 	ubfx	lr, r2, #9, #1
 80240e2:	eb0e 2292 	add.w	r2, lr, r2, lsr #10
 80240e6:	4252      	negs	r2, r2
 80240e8:	e4d2      	b.n	8023a90 <Argus_Cal_Update+0x7c>
 80240ea:	4252      	negs	r2, r2
 80240ec:	f3c2 2e40 	ubfx	lr, r2, #9, #1
 80240f0:	eb0e 2292 	add.w	r2, lr, r2, lsr #10
 80240f4:	4252      	negs	r2, r2
 80240f6:	e4bb      	b.n	8023a70 <Argus_Cal_Update+0x5c>
 80240f8:	425b      	negs	r3, r3
 80240fa:	f3c3 2240 	ubfx	r2, r3, #9, #1
 80240fe:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 8024102:	4252      	negs	r2, r2
 8024104:	e505      	b.n	8023b12 <Argus_Cal_Update+0xfe>
 8024106:	4240      	negs	r0, r0
 8024108:	f3c0 2340 	ubfx	r3, r0, #9, #1
 802410c:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 8024110:	425b      	negs	r3, r3
 8024112:	e50c      	b.n	8023b2e <Argus_Cal_Update+0x11a>
 8024114:	68a3      	ldr	r3, [r4, #8]
 8024116:	2a00      	cmp	r2, #0
 8024118:	eba3 0808 	sub.w	r8, r3, r8
 802411c:	bfb4      	ite	lt
 802411e:	f04f 4300 	movlt.w	r3, #2147483648	@ 0x80000000
 8024122:	f06f 4300 	mvnge.w	r3, #2147483648	@ 0x80000000
 8024126:	f1b8 0f00 	cmp.w	r8, #0
 802412a:	623b      	str	r3, [r7, #32]
 802412c:	f6bf af3c 	bge.w	8023fa8 <Argus_Cal_Update+0x594>
 8024130:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8024134:	e73a      	b.n	8023fac <Argus_Cal_Update+0x598>
 8024136:	2220      	movs	r2, #32
 8024138:	4638      	mov	r0, r7
 802413a:	f005 fb0a 	bl	8029752 <memset>
 802413e:	2300      	movs	r3, #0
 8024140:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8024144:	e7c6      	b.n	80240d4 <Argus_Cal_Update+0x6c0>
 8024146:	9a00      	ldr	r2, [sp, #0]
 8024148:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802414c:	f8d3 10b8 	ldr.w	r1, [r3, #184]	@ 0xb8
 8024150:	4b73      	ldr	r3, [pc, #460]	@ (8024320 <Argus_Cal_Update+0x90c>)
 8024152:	2900      	cmp	r1, #0
 8024154:	468c      	mov	ip, r1
 8024156:	bfb8      	it	lt
 8024158:	4249      	neglt	r1, r1
 802415a:	4299      	cmp	r1, r3
 802415c:	f240 8131 	bls.w	80243c2 <Argus_Cal_Update+0x9ae>
 8024160:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8024164:	461c      	mov	r4, r3
 8024166:	005b      	lsls	r3, r3, #1
 8024168:	428b      	cmp	r3, r1
 802416a:	4610      	mov	r0, r2
 802416c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8024170:	d3f8      	bcc.n	8024164 <Argus_Cal_Update+0x750>
 8024172:	2a00      	cmp	r2, #0
 8024174:	f040 8095 	bne.w	80242a2 <Argus_Cal_Update+0x88e>
 8024178:	f1bc 0f00 	cmp.w	ip, #0
 802417c:	f2c0 8155 	blt.w	802442a <Argus_Cal_Update+0xa16>
 8024180:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8024184:	4618      	mov	r0, r3
 8024186:	469c      	mov	ip, r3
 8024188:	f8b6 2280 	ldrh.w	r2, [r6, #640]	@ 0x280
 802418c:	f8b6 4282 	ldrh.w	r4, [r6, #642]	@ 0x282
 8024190:	fba2 2303 	umull	r2, r3, r2, r3
 8024194:	f3c2 33c0 	ubfx	r3, r2, #15, #1
 8024198:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 802419c:	f1bc 0f00 	cmp.w	ip, #0
 80241a0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80241a2:	4623      	mov	r3, r4
 80241a4:	f280 812e 	bge.w	8024404 <Argus_Cal_Update+0x9f0>
 80241a8:	4240      	negs	r0, r0
 80241aa:	4298      	cmp	r0, r3
 80241ac:	f080 8115 	bcs.w	80243da <Argus_Cal_Update+0x9c6>
 80241b0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80241b4:	0040      	lsls	r0, r0, #1
 80241b6:	4298      	cmp	r0, r3
 80241b8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80241bc:	d3fa      	bcc.n	80241b4 <Argus_Cal_Update+0x7a0>
 80241be:	2a00      	cmp	r2, #0
 80241c0:	f040 80d8 	bne.w	8024374 <Argus_Cal_Update+0x960>
 80241c4:	ea84 030c 	eor.w	r3, r4, ip
 80241c8:	43db      	mvns	r3, r3
 80241ca:	0fdb      	lsrs	r3, r3, #31
 80241cc:	425b      	negs	r3, r3
 80241ce:	b29b      	uxth	r3, r3
 80241d0:	863b      	strh	r3, [r7, #48]	@ 0x30
 80241d2:	e6f4      	b.n	8023fbe <Argus_Cal_Update+0x5aa>
 80241d4:	eba8 0309 	sub.w	r3, r8, r9
 80241d8:	4293      	cmp	r3, r2
 80241da:	bf28      	it	cs
 80241dc:	f44f 3180 	movcs.w	r1, #65536	@ 0x10000
 80241e0:	f4ff aed4 	bcc.w	8023f8c <Argus_Cal_Update+0x578>
 80241e4:	2b00      	cmp	r3, #0
 80241e6:	db3b      	blt.n	8024260 <Argus_Cal_Update+0x84c>
 80241e8:	4610      	mov	r0, r2
 80241ea:	b152      	cbz	r2, 8024202 <Argus_Cal_Update+0x7ee>
 80241ec:	2000      	movs	r0, #0
 80241ee:	e000      	b.n	80241f2 <Argus_Cal_Update+0x7de>
 80241f0:	b13a      	cbz	r2, 8024202 <Argus_Cal_Update+0x7ee>
 80241f2:	4293      	cmp	r3, r2
 80241f4:	bf9c      	itt	ls
 80241f6:	1ad2      	subls	r2, r2, r3
 80241f8:	4308      	orrls	r0, r1
 80241fa:	0849      	lsrs	r1, r1, #1
 80241fc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8024200:	d1f6      	bne.n	80241f0 <Argus_Cal_Update+0x7dc>
 8024202:	4293      	cmp	r3, r2
 8024204:	d800      	bhi.n	8024208 <Argus_Cal_Update+0x7f4>
 8024206:	3001      	adds	r0, #1
 8024208:	ea9e 0f04 	teq	lr, r4
 802420c:	d436      	bmi.n	802427c <Argus_Cal_Update+0x868>
 802420e:	2800      	cmp	r0, #0
 8024210:	f6bf aecc 	bge.w	8023fac <Argus_Cal_Update+0x598>
 8024214:	e6c8      	b.n	8023fa8 <Argus_Cal_Update+0x594>
 8024216:	eba8 0009 	sub.w	r0, r8, r9
 802421a:	4290      	cmp	r0, r2
 802421c:	f4ff ae95 	bcc.w	8023f4a <Argus_Cal_Update+0x536>
 8024220:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8024224:	2800      	cmp	r0, #0
 8024226:	db2b      	blt.n	8024280 <Argus_Cal_Update+0x86c>
 8024228:	4694      	mov	ip, r2
 802422a:	b162      	cbz	r2, 8024246 <Argus_Cal_Update+0x832>
 802422c:	f04f 0c00 	mov.w	ip, #0
 8024230:	e000      	b.n	8024234 <Argus_Cal_Update+0x820>
 8024232:	b142      	cbz	r2, 8024246 <Argus_Cal_Update+0x832>
 8024234:	4290      	cmp	r0, r2
 8024236:	bf9c      	itt	ls
 8024238:	1a12      	subls	r2, r2, r0
 802423a:	ea4c 0c01 	orrls.w	ip, ip, r1
 802423e:	0849      	lsrs	r1, r1, #1
 8024240:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8024244:	d1f5      	bne.n	8024232 <Argus_Cal_Update+0x81e>
 8024246:	4282      	cmp	r2, r0
 8024248:	d301      	bcc.n	802424e <Argus_Cal_Update+0x83a>
 802424a:	f10c 0c01 	add.w	ip, ip, #1
 802424e:	ea9a 0f03 	teq	sl, r3
 8024252:	d423      	bmi.n	802429c <Argus_Cal_Update+0x888>
 8024254:	f1bc 0f00 	cmp.w	ip, #0
 8024258:	bfb8      	it	lt
 802425a:	f06f 4c00 	mvnlt.w	ip, #2147483648	@ 0x80000000
 802425e:	e685      	b.n	8023f6c <Argus_Cal_Update+0x558>
 8024260:	4293      	cmp	r3, r2
 8024262:	d977      	bls.n	8024354 <Argus_Cal_Update+0x940>
 8024264:	0849      	lsrs	r1, r1, #1
 8024266:	ea4f 0353 	mov.w	r3, r3, lsr #1
 802426a:	f000 80d0 	beq.w	802440e <Argus_Cal_Update+0x9fa>
 802426e:	2a00      	cmp	r2, #0
 8024270:	d1bc      	bne.n	80241ec <Argus_Cal_Update+0x7d8>
 8024272:	ea9e 0f04 	teq	lr, r4
 8024276:	4610      	mov	r0, r2
 8024278:	f57f ae98 	bpl.w	8023fac <Argus_Cal_Update+0x598>
 802427c:	4240      	negs	r0, r0
 802427e:	e695      	b.n	8023fac <Argus_Cal_Update+0x598>
 8024280:	4282      	cmp	r2, r0
 8024282:	d265      	bcs.n	8024350 <Argus_Cal_Update+0x93c>
 8024284:	0849      	lsrs	r1, r1, #1
 8024286:	ea4f 0050 	mov.w	r0, r0, lsr #1
 802428a:	f000 80c2 	beq.w	8024412 <Argus_Cal_Update+0x9fe>
 802428e:	2a00      	cmp	r2, #0
 8024290:	d1cc      	bne.n	802422c <Argus_Cal_Update+0x818>
 8024292:	ea9a 0f03 	teq	sl, r3
 8024296:	4694      	mov	ip, r2
 8024298:	f57f ae68 	bpl.w	8023f6c <Argus_Cal_Update+0x558>
 802429c:	f1cc 0c00 	rsb	ip, ip, #0
 80242a0:	e664      	b.n	8023f6c <Argus_Cal_Update+0x558>
 80242a2:	2b00      	cmp	r3, #0
 80242a4:	da08      	bge.n	80242b8 <Argus_Cal_Update+0x8a4>
 80242a6:	428b      	cmp	r3, r1
 80242a8:	f000 8084 	beq.w	80243b4 <Argus_Cal_Update+0x9a0>
 80242ac:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80242b0:	f024 4300 	bic.w	r3, r4, #2147483648	@ 0x80000000
 80242b4:	f000 80af 	beq.w	8024416 <Argus_Cal_Update+0xa02>
 80242b8:	2000      	movs	r0, #0
 80242ba:	e000      	b.n	80242be <Argus_Cal_Update+0x8aa>
 80242bc:	b151      	cbz	r1, 80242d4 <Argus_Cal_Update+0x8c0>
 80242be:	4299      	cmp	r1, r3
 80242c0:	bf24      	itt	cs
 80242c2:	1ac9      	subcs	r1, r1, r3
 80242c4:	4310      	orrcs	r0, r2
 80242c6:	0852      	lsrs	r2, r2, #1
 80242c8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80242cc:	d1f6      	bne.n	80242bc <Argus_Cal_Update+0x8a8>
 80242ce:	4299      	cmp	r1, r3
 80242d0:	d300      	bcc.n	80242d4 <Argus_Cal_Update+0x8c0>
 80242d2:	3001      	adds	r0, #1
 80242d4:	f1bc 0f00 	cmp.w	ip, #0
 80242d8:	db67      	blt.n	80243aa <Argus_Cal_Update+0x996>
 80242da:	2800      	cmp	r0, #0
 80242dc:	4684      	mov	ip, r0
 80242de:	db6b      	blt.n	80243b8 <Argus_Cal_Update+0x9a4>
 80242e0:	f8b6 3280 	ldrh.w	r3, [r6, #640]	@ 0x280
 80242e4:	f8b6 4282 	ldrh.w	r4, [r6, #642]	@ 0x282
 80242e8:	fba3 3200 	umull	r3, r2, r3, r0
 80242ec:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80242f0:	eb02 4313 	add.w	r3, r2, r3, lsr #16
 80242f4:	2800      	cmp	r0, #0
 80242f6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80242f8:	d17e      	bne.n	80243f8 <Argus_Cal_Update+0x9e4>
 80242fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80242fe:	e767      	b.n	80241d0 <Argus_Cal_Update+0x7bc>
 8024300:	2a00      	cmp	r2, #0
 8024302:	da07      	bge.n	8024314 <Argus_Cal_Update+0x900>
 8024304:	428a      	cmp	r2, r1
 8024306:	d053      	beq.n	80243b0 <Argus_Cal_Update+0x99c>
 8024308:	f034 4300 	bics.w	r3, r4, #2147483648	@ 0x80000000
 802430c:	f026 4200 	bic.w	r2, r6, #2147483648	@ 0x80000000
 8024310:	f000 8083 	beq.w	802441a <Argus_Cal_Update+0xa06>
 8024314:	f04f 0800 	mov.w	r8, #0
 8024318:	e005      	b.n	8024326 <Argus_Cal_Update+0x912>
 802431a:	bf00      	nop
 802431c:	192add01 	.word	0x192add01
 8024320:	002dc6c0 	.word	0x002dc6c0
 8024324:	b161      	cbz	r1, 8024340 <Argus_Cal_Update+0x92c>
 8024326:	4291      	cmp	r1, r2
 8024328:	bf24      	itt	cs
 802432a:	1a89      	subcs	r1, r1, r2
 802432c:	ea48 0803 	orrcs.w	r8, r8, r3
 8024330:	085b      	lsrs	r3, r3, #1
 8024332:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8024336:	d1f5      	bne.n	8024324 <Argus_Cal_Update+0x910>
 8024338:	4291      	cmp	r1, r2
 802433a:	d301      	bcc.n	8024340 <Argus_Cal_Update+0x92c>
 802433c:	f108 0801 	add.w	r8, r8, #1
 8024340:	2800      	cmp	r0, #0
 8024342:	db0d      	blt.n	8024360 <Argus_Cal_Update+0x94c>
 8024344:	f1b8 0f00 	cmp.w	r8, #0
 8024348:	bfb8      	it	lt
 802434a:	f06f 4800 	mvnlt.w	r8, #2147483648	@ 0x80000000
 802434e:	e6a8      	b.n	80240a2 <Argus_Cal_Update+0x68e>
 8024350:	468c      	mov	ip, r1
 8024352:	e77c      	b.n	802424e <Argus_Cal_Update+0x83a>
 8024354:	4608      	mov	r0, r1
 8024356:	e757      	b.n	8024208 <Argus_Cal_Update+0x7f4>
 8024358:	2800      	cmp	r0, #0
 802435a:	4688      	mov	r8, r1
 802435c:	f6bf aea1 	bge.w	80240a2 <Argus_Cal_Update+0x68e>
 8024360:	f1c8 0800 	rsb	r8, r8, #0
 8024364:	e69d      	b.n	80240a2 <Argus_Cal_Update+0x68e>
 8024366:	2900      	cmp	r1, #0
 8024368:	d0f6      	beq.n	8024358 <Argus_Cal_Update+0x944>
 802436a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 802436e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8024372:	e7cf      	b.n	8024314 <Argus_Cal_Update+0x900>
 8024374:	2b00      	cmp	r3, #0
 8024376:	d052      	beq.n	802441e <Argus_Cal_Update+0xa0a>
 8024378:	2100      	movs	r1, #0
 802437a:	e000      	b.n	802437e <Argus_Cal_Update+0x96a>
 802437c:	b153      	cbz	r3, 8024394 <Argus_Cal_Update+0x980>
 802437e:	4283      	cmp	r3, r0
 8024380:	bf24      	itt	cs
 8024382:	1a1b      	subcs	r3, r3, r0
 8024384:	4311      	orrcs	r1, r2
 8024386:	0852      	lsrs	r2, r2, #1
 8024388:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802438c:	d1f6      	bne.n	802437c <Argus_Cal_Update+0x968>
 802438e:	4283      	cmp	r3, r0
 8024390:	bf28      	it	cs
 8024392:	3101      	addcs	r1, #1
 8024394:	ea94 0f0c 	teq	r4, ip
 8024398:	d42b      	bmi.n	80243f2 <Argus_Cal_Update+0x9de>
 802439a:	2900      	cmp	r1, #0
 802439c:	dbad      	blt.n	80242fa <Argus_Cal_Update+0x8e6>
 802439e:	b28b      	uxth	r3, r1
 80243a0:	e716      	b.n	80241d0 <Argus_Cal_Update+0x7bc>
 80243a2:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 80243a6:	e71f      	b.n	80241e8 <Argus_Cal_Update+0x7d4>
 80243a8:	4608      	mov	r0, r1
 80243aa:	4240      	negs	r0, r0
 80243ac:	4684      	mov	ip, r0
 80243ae:	e797      	b.n	80242e0 <Argus_Cal_Update+0x8cc>
 80243b0:	4698      	mov	r8, r3
 80243b2:	e7c5      	b.n	8024340 <Argus_Cal_Update+0x92c>
 80243b4:	4610      	mov	r0, r2
 80243b6:	e78d      	b.n	80242d4 <Argus_Cal_Update+0x8c0>
 80243b8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80243bc:	4618      	mov	r0, r3
 80243be:	469c      	mov	ip, r3
 80243c0:	e6e2      	b.n	8024188 <Argus_Cal_Update+0x774>
 80243c2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80243c6:	2900      	cmp	r1, #0
 80243c8:	f47f af76 	bne.w	80242b8 <Argus_Cal_Update+0x8a4>
 80243cc:	ea9c 0f03 	teq	ip, r3
 80243d0:	d4ea      	bmi.n	80243a8 <Argus_Cal_Update+0x994>
 80243d2:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 80243d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80243d8:	e6fa      	b.n	80241d0 <Argus_Cal_Update+0x7bc>
 80243da:	2800      	cmp	r0, #0
 80243dc:	bfa8      	it	ge
 80243de:	f44f 3280 	movge.w	r2, #65536	@ 0x10000
 80243e2:	da03      	bge.n	80243ec <Argus_Cal_Update+0x9d8>
 80243e4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80243e8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80243ec:	2b00      	cmp	r3, #0
 80243ee:	d1c3      	bne.n	8024378 <Argus_Cal_Update+0x964>
 80243f0:	4619      	mov	r1, r3
 80243f2:	424b      	negs	r3, r1
 80243f4:	b29b      	uxth	r3, r3
 80243f6:	e6eb      	b.n	80241d0 <Argus_Cal_Update+0x7bc>
 80243f8:	4623      	mov	r3, r4
 80243fa:	f6ff aed5 	blt.w	80241a8 <Argus_Cal_Update+0x794>
 80243fe:	4284      	cmp	r4, r0
 8024400:	f63f aed6 	bhi.w	80241b0 <Argus_Cal_Update+0x79c>
 8024404:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8024408:	2b00      	cmp	r3, #0
 802440a:	d1b5      	bne.n	8024378 <Argus_Cal_Update+0x964>
 802440c:	e6e0      	b.n	80241d0 <Argus_Cal_Update+0x7bc>
 802440e:	4608      	mov	r0, r1
 8024410:	e6f7      	b.n	8024202 <Argus_Cal_Update+0x7ee>
 8024412:	468c      	mov	ip, r1
 8024414:	e717      	b.n	8024246 <Argus_Cal_Update+0x832>
 8024416:	4610      	mov	r0, r2
 8024418:	e759      	b.n	80242ce <Argus_Cal_Update+0x8ba>
 802441a:	4698      	mov	r8, r3
 802441c:	e78c      	b.n	8024338 <Argus_Cal_Update+0x924>
 802441e:	f1bc 0f00 	cmp.w	ip, #0
 8024422:	f6bf aed5 	bge.w	80241d0 <Argus_Cal_Update+0x7bc>
 8024426:	4619      	mov	r1, r3
 8024428:	e7e3      	b.n	80243f2 <Argus_Cal_Update+0x9de>
 802442a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 802442e:	4618      	mov	r0, r3
 8024430:	469c      	mov	ip, r3
 8024432:	e6a9      	b.n	8024188 <Argus_Cal_Update+0x774>

08024434 <Argus_Cal_ApplyFrequencyTemperatureCompensation>:
 8024434:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	@ 0x28
 8024438:	b530      	push	{r4, r5, lr}
 802443a:	f647 74ff 	movw	r4, #32767	@ 0x7fff
 802443e:	42a3      	cmp	r3, r4
 8024440:	d05c      	beq.n	80244fc <Argus_Cal_ApplyFrequencyTemperatureCompensation+0xc8>
 8024442:	f890 421c 	ldrb.w	r4, [r0, #540]	@ 0x21c
 8024446:	2c00      	cmp	r4, #0
 8024448:	d058      	beq.n	80244fc <Argus_Cal_ApplyFrequencyTemperatureCompensation+0xc8>
 802444a:	f8d0 54c0 	ldr.w	r5, [r0, #1216]	@ 0x4c0
 802444e:	68c8      	ldr	r0, [r1, #12]
 8024450:	f010 0f02 	tst.w	r0, #2
 8024454:	d138      	bne.n	80244c8 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x94>
 8024456:	f8d5 011c 	ldr.w	r0, [r5, #284]	@ 0x11c
 802445a:	f8b0 0079 	ldrh.w	r0, [r0, #121]	@ 0x79
 802445e:	fb14 f303 	smulbb	r3, r4, r3
 8024462:	ba40      	rev16	r0, r0
 8024464:	2b00      	cmp	r3, #0
 8024466:	f3c0 104a 	ubfx	r0, r0, #5, #11
 802446a:	db40      	blt.n	80244ee <Argus_Cal_ApplyFrequencyTemperatureCompensation+0xba>
 802446c:	f3c3 2440 	ubfx	r4, r3, #9, #1
 8024470:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8024474:	f991 c018 	ldrsb.w	ip, [r1, #24]
 8024478:	f5c4 3480 	rsb	r4, r4, #65536	@ 0x10000
 802447c:	4484      	add	ip, r0
 802447e:	fb00 f404 	mul.w	r4, r0, r4
 8024482:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8024486:	2c00      	cmp	r4, #0
 8024488:	d057      	beq.n	802453a <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x106>
 802448a:	ea8c 70ec 	eor.w	r0, ip, ip, asr #31
 802448e:	eba0 70ec 	sub.w	r0, r0, ip, asr #31
 8024492:	4284      	cmp	r4, r0
 8024494:	4621      	mov	r1, r4
 8024496:	d266      	bcs.n	8024566 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x132>
 8024498:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 802449c:	460d      	mov	r5, r1
 802449e:	0049      	lsls	r1, r1, #1
 80244a0:	4281      	cmp	r1, r0
 80244a2:	469e      	mov	lr, r3
 80244a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80244a8:	d3f8      	bcc.n	802449c <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x68>
 80244aa:	bb4b      	cbnz	r3, 8024500 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0xcc>
 80244ac:	ea9c 0f04 	teq	ip, r4
 80244b0:	d446      	bmi.n	8024540 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x10c>
 80244b2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80244b6:	fba2 2303 	umull	r2, r3, r2, r3
 80244ba:	0c11      	lsrs	r1, r2, #16
 80244bc:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 80244c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80244c4:	4408      	add	r0, r1
 80244c6:	bd30      	pop	{r4, r5, pc}
 80244c8:	f8d5 511c 	ldr.w	r5, [r5, #284]	@ 0x11c
 80244cc:	f895 c0a8 	ldrb.w	ip, [r5, #168]	@ 0xa8
 80244d0:	0740      	lsls	r0, r0, #29
 80244d2:	bf4c      	ite	mi
 80244d4:	eb05 054c 	addmi.w	r5, r5, ip, lsl #1
 80244d8:	f10c 0c57 	addpl.w	ip, ip, #87	@ 0x57
 80244dc:	fb14 f303 	smulbb	r3, r4, r3
 80244e0:	bf4c      	ite	mi
 80244e2:	f8b5 00b2 	ldrhmi.w	r0, [r5, #178]	@ 0xb2
 80244e6:	f835 001c 	ldrhpl.w	r0, [r5, ip, lsl #1]
 80244ea:	2b00      	cmp	r3, #0
 80244ec:	dabe      	bge.n	802446c <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x38>
 80244ee:	425b      	negs	r3, r3
 80244f0:	f3c3 2440 	ubfx	r4, r3, #9, #1
 80244f4:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 80244f8:	4264      	negs	r4, r4
 80244fa:	e7bb      	b.n	8024474 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x40>
 80244fc:	4610      	mov	r0, r2
 80244fe:	bd30      	pop	{r4, r5, pc}
 8024500:	2900      	cmp	r1, #0
 8024502:	da1f      	bge.n	8024544 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x110>
 8024504:	4281      	cmp	r1, r0
 8024506:	d02c      	beq.n	8024562 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x12e>
 8024508:	f03e 4300 	bics.w	r3, lr, #2147483648	@ 0x80000000
 802450c:	4629      	mov	r1, r5
 802450e:	d119      	bne.n	8024544 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x110>
 8024510:	469e      	mov	lr, r3
 8024512:	4281      	cmp	r1, r0
 8024514:	d801      	bhi.n	802451a <Argus_Cal_ApplyFrequencyTemperatureCompensation+0xe6>
 8024516:	f10e 0e01 	add.w	lr, lr, #1
 802451a:	ea9c 0f04 	teq	ip, r4
 802451e:	d42a      	bmi.n	8024576 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x142>
 8024520:	f1be 0f00 	cmp.w	lr, #0
 8024524:	dbc5      	blt.n	80244b2 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x7e>
 8024526:	fba2 e20e 	umull	lr, r2, r2, lr
 802452a:	ea4f 401e 	mov.w	r0, lr, lsr #16
 802452e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8024532:	f3ce 3ec0 	ubfx	lr, lr, #15, #1
 8024536:	4470      	add	r0, lr
 8024538:	bd30      	pop	{r4, r5, pc}
 802453a:	f1bc 0f00 	cmp.w	ip, #0
 802453e:	dab8      	bge.n	80244b2 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x7e>
 8024540:	03d0      	lsls	r0, r2, #15
 8024542:	bd30      	pop	{r4, r5, pc}
 8024544:	f04f 0e00 	mov.w	lr, #0
 8024548:	e001      	b.n	802454e <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x11a>
 802454a:	2800      	cmp	r0, #0
 802454c:	d0e5      	beq.n	802451a <Argus_Cal_ApplyFrequencyTemperatureCompensation+0xe6>
 802454e:	4288      	cmp	r0, r1
 8024550:	bf24      	itt	cs
 8024552:	1a40      	subcs	r0, r0, r1
 8024554:	ea4e 0e03 	orrcs.w	lr, lr, r3
 8024558:	085b      	lsrs	r3, r3, #1
 802455a:	ea4f 0040 	mov.w	r0, r0, lsl #1
 802455e:	d1f4      	bne.n	802454a <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x116>
 8024560:	e7d7      	b.n	8024512 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0xde>
 8024562:	469e      	mov	lr, r3
 8024564:	e7d9      	b.n	802451a <Argus_Cal_ApplyFrequencyTemperatureCompensation+0xe6>
 8024566:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 802456a:	2800      	cmp	r0, #0
 802456c:	d1ea      	bne.n	8024544 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x110>
 802456e:	ea9c 0f04 	teq	ip, r4
 8024572:	d5a8      	bpl.n	80244c6 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x92>
 8024574:	4686      	mov	lr, r0
 8024576:	f1ce 0300 	rsb	r3, lr, #0
 802457a:	fba3 3202 	umull	r3, r2, r3, r2
 802457e:	0c18      	lsrs	r0, r3, #16
 8024580:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8024584:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8024588:	4418      	add	r0, r3
 802458a:	bd30      	pop	{r4, r5, pc}

0802458c <Argus_Cal_GetGlobalRangeOffset>:
 802458c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802458e:	f9b0 7028 	ldrsh.w	r7, [r0, #40]	@ 0x28
 8024592:	f9b0 54ac 	ldrsh.w	r5, [r0, #1196]	@ 0x4ac
 8024596:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 802459a:	429f      	cmp	r7, r3
 802459c:	4604      	mov	r4, r0
 802459e:	460e      	mov	r6, r1
 80245a0:	d05d      	beq.n	802465e <Argus_Cal_GetGlobalRangeOffset+0xd2>
 80245a2:	f3c1 3142 	ubfx	r1, r1, #13, #3
 80245a6:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80245aa:	2f00      	cmp	r7, #0
 80245ac:	bfc8      	it	gt
 80245ae:	3101      	addgt	r1, #1
 80245b0:	f991 320c 	ldrsb.w	r3, [r1, #524]	@ 0x20c
 80245b4:	fb13 f307 	smulbb	r3, r3, r7
 80245b8:	2b00      	cmp	r3, #0
 80245ba:	ea4f 3796 	mov.w	r7, r6, lsr #14
 80245be:	da2f      	bge.n	8024620 <Argus_Cal_GetGlobalRangeOffset+0x94>
 80245c0:	425b      	negs	r3, r3
 80245c2:	f3c3 2100 	ubfx	r1, r3, #8, #1
 80245c6:	eb01 2353 	add.w	r3, r1, r3, lsr #9
 80245ca:	1aed      	subs	r5, r5, r3
 80245cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80245d0:	429a      	cmp	r2, r3
 80245d2:	d01e      	beq.n	8024612 <Argus_Cal_GetGlobalRangeOffset+0x86>
 80245d4:	f8b4 0490 	ldrh.w	r0, [r4, #1168]	@ 0x490
 80245d8:	1a82      	subs	r2, r0, r2
 80245da:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
 80245dc:	fb02 f000 	mul.w	r0, r2, r0
 80245e0:	1100      	asrs	r0, r0, #4
 80245e2:	f004 f927 	bl	8028834 <fp_exp16>
 80245e6:	f9b4 3498 	ldrsh.w	r3, [r4, #1176]	@ 0x498
 80245ea:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 80245ee:	bf28      	it	cs
 80245f0:	f44f 3000 	movcs.w	r0, #131072	@ 0x20000
 80245f4:	2b00      	cmp	r3, #0
 80245f6:	db25      	blt.n	8024644 <Argus_Cal_GetGlobalRangeOffset+0xb8>
 80245f8:	17d9      	asrs	r1, r3, #31
 80245fa:	fba3 3200 	umull	r3, r2, r3, r0
 80245fe:	fb00 2001 	mla	r0, r0, r1, r2
 8024602:	0c1a      	lsrs	r2, r3, #16
 8024604:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8024608:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 802460c:	4413      	add	r3, r2
 802460e:	fa05 f583 	sxtah	r5, r5, r3
 8024612:	04b3      	lsls	r3, r6, #18
 8024614:	d50a      	bpl.n	802462c <Argus_Cal_GetGlobalRangeOffset+0xa0>
 8024616:	f9b4 02a4 	ldrsh.w	r0, [r4, #676]	@ 0x2a4
 802461a:	4428      	add	r0, r5
 802461c:	01c0      	lsls	r0, r0, #7
 802461e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024620:	f3c3 2100 	ubfx	r1, r3, #8, #1
 8024624:	eb01 2353 	add.w	r3, r1, r3, lsr #9
 8024628:	441d      	add	r5, r3
 802462a:	e7cf      	b.n	80245cc <Argus_Cal_GetGlobalRangeOffset+0x40>
 802462c:	f007 0703 	and.w	r7, r7, #3
 8024630:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 8024634:	f9b4 32a2 	ldrsh.w	r3, [r4, #674]	@ 0x2a2
 8024638:	f9b7 04a4 	ldrsh.w	r0, [r7, #1188]	@ 0x4a4
 802463c:	441d      	add	r5, r3
 802463e:	4428      	add	r0, r5
 8024640:	01c0      	lsls	r0, r0, #7
 8024642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024644:	425b      	negs	r3, r3
 8024646:	17d9      	asrs	r1, r3, #31
 8024648:	fba3 3200 	umull	r3, r2, r3, r0
 802464c:	fb00 2001 	mla	r0, r0, r1, r2
 8024650:	0c1a      	lsrs	r2, r3, #16
 8024652:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8024656:	f343 33c0 	sbfx	r3, r3, #15, #1
 802465a:	1a9b      	subs	r3, r3, r2
 802465c:	e7d7      	b.n	802460e <Argus_Cal_GetGlobalRangeOffset+0x82>
 802465e:	0b8f      	lsrs	r7, r1, #14
 8024660:	e7b4      	b.n	80245cc <Argus_Cal_GetGlobalRangeOffset+0x40>
 8024662:	bf00      	nop

08024664 <Argus_Cal_ApplyPixelOffsetCompensation>:
 8024664:	698b      	ldr	r3, [r1, #24]
 8024666:	f013 0f08 	tst.w	r3, #8
 802466a:	bf14      	ite	ne
 802466c:	f04f 0c09 	movne.w	ip, #9
 8024670:	f04f 0ca1 	moveq.w	ip, #161	@ 0xa1
 8024674:	049b      	lsls	r3, r3, #18
 8024676:	bf4c      	ite	mi
 8024678:	f500 72d4 	addmi.w	r2, r0, #424	@ 0x1a8
 802467c:	f500 72b3 	addpl.w	r2, r0, #358	@ 0x166
 8024680:	f101 0334 	add.w	r3, r1, #52	@ 0x34
 8024684:	f501 70e0 	add.w	r0, r1, #448	@ 0x1c0
 8024688:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 802468c:	ea1c 0f01 	tst.w	ip, r1
 8024690:	d119      	bne.n	80246c6 <Argus_Cal_ApplyPixelOffsetCompensation+0x62>
 8024692:	b500      	push	{lr}
 8024694:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 8024698:	f9b2 e000 	ldrsh.w	lr, [r2]
 802469c:	eba1 11ce 	sub.w	r1, r1, lr, lsl #7
 80246a0:	f843 1c0c 	str.w	r1, [r3, #-12]
 80246a4:	330c      	adds	r3, #12
 80246a6:	4283      	cmp	r3, r0
 80246a8:	f102 0202 	add.w	r2, r2, #2
 80246ac:	d009      	beq.n	80246c2 <Argus_Cal_ApplyPixelOffsetCompensation+0x5e>
 80246ae:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 80246b2:	ea1c 0f01 	tst.w	ip, r1
 80246b6:	d0ed      	beq.n	8024694 <Argus_Cal_ApplyPixelOffsetCompensation+0x30>
 80246b8:	330c      	adds	r3, #12
 80246ba:	4283      	cmp	r3, r0
 80246bc:	f102 0202 	add.w	r2, r2, #2
 80246c0:	d1f5      	bne.n	80246ae <Argus_Cal_ApplyPixelOffsetCompensation+0x4a>
 80246c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80246c6:	330c      	adds	r3, #12
 80246c8:	4283      	cmp	r3, r0
 80246ca:	f102 0202 	add.w	r2, r2, #2
 80246ce:	d1db      	bne.n	8024688 <Argus_Cal_ApplyPixelOffsetCompensation+0x24>
 80246d0:	4770      	bx	lr
 80246d2:	bf00      	nop

080246d4 <Argus_Cal_ApplyTempCalibration>:
 80246d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80246d8:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	@ 0x28
 80246dc:	f647 77ff 	movw	r7, #32767	@ 0x7fff
 80246e0:	42bb      	cmp	r3, r7
 80246e2:	d042      	beq.n	802476a <Argus_Cal_ApplyTempCalibration+0x96>
 80246e4:	4604      	mov	r4, r0
 80246e6:	f500 7101 	add.w	r1, r0, #516	@ 0x204
 80246ea:	f7fe fb6b 	bl	8022dc4 <UpdateAPDVoltage>
 80246ee:	f9b4 1028 	ldrsh.w	r1, [r4, #40]	@ 0x28
 80246f2:	f994 5476 	ldrsb.w	r5, [r4, #1142]	@ 0x476
 80246f6:	f894 6471 	ldrb.w	r6, [r4, #1137]	@ 0x471
 80246fa:	f894 8474 	ldrb.w	r8, [r4, #1140]	@ 0x474
 80246fe:	f894 3470 	ldrb.w	r3, [r4, #1136]	@ 0x470
 8024702:	f894 c472 	ldrb.w	ip, [r4, #1138]	@ 0x472
 8024706:	f894 2473 	ldrb.w	r2, [r4, #1139]	@ 0x473
 802470a:	f894 e475 	ldrb.w	lr, [r4, #1141]	@ 0x475
 802470e:	f994 9477 	ldrsb.w	r9, [r4, #1143]	@ 0x477
 8024712:	f8d4 04c0 	ldr.w	r0, [r4, #1216]	@ 0x4c0
 8024716:	42b9      	cmp	r1, r7
 8024718:	bf14      	ite	ne
 802471a:	120c      	asrne	r4, r1, #8
 802471c:	2400      	moveq	r4, #0
 802471e:	f1a5 011e 	sub.w	r1, r5, #30
 8024722:	42a1      	cmp	r1, r4
 8024724:	bfb8      	it	lt
 8024726:	4621      	movlt	r1, r4
 8024728:	f1a9 041e 	sub.w	r4, r9, #30
 802472c:	42a1      	cmp	r1, r4
 802472e:	bfa8      	it	ge
 8024730:	4621      	movge	r1, r4
 8024732:	fb01 fe0e 	mul.w	lr, r1, lr
 8024736:	fb01 f40c 	mul.w	r4, r1, ip
 802473a:	eb0e 1ec8 	add.w	lr, lr, r8, lsl #7
 802473e:	eb04 14c6 	add.w	r4, r4, r6, lsl #7
 8024742:	02d2      	lsls	r2, r2, #11
 8024744:	02db      	lsls	r3, r3, #11
 8024746:	fb01 220e 	mla	r2, r1, lr, r2
 802474a:	fb01 3304 	mla	r3, r1, r4, r3
 802474e:	fb01 f202 	mul.w	r2, r1, r2
 8024752:	fb03 f101 	mul.w	r1, r3, r1
 8024756:	f102 7280 	add.w	r2, r2, #16777216	@ 0x1000000
 802475a:	f101 7180 	add.w	r1, r1, #16777216	@ 0x1000000
 802475e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024762:	1212      	asrs	r2, r2, #8
 8024764:	1209      	asrs	r1, r1, #8
 8024766:	f7fb bd3b 	b.w	80201e0 <Argus_Dev_UpdateLaserTemperatureCompensation>
 802476a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802476e:	bf00      	nop

08024770 <Argus_Cal_ApplyAuxCalibration>:
 8024770:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8024774:	b570      	push	{r4, r5, r6, lr}
 8024776:	f647 74ff 	movw	r4, #32767	@ 0x7fff
 802477a:	42a3      	cmp	r3, r4
 802477c:	f000 80d1 	beq.w	8024922 <Argus_Cal_ApplyAuxCalibration+0x1b2>
 8024780:	f8b0 c49e 	ldrh.w	ip, [r0, #1182]	@ 0x49e
 8024784:	f8b0 4482 	ldrh.w	r4, [r0, #1154]	@ 0x482
 8024788:	f5ac 4c00 	sub.w	ip, ip, #32768	@ 0x8000
 802478c:	eba3 030c 	sub.w	r3, r3, ip
 8024790:	fb04 f303 	mul.w	r3, r4, r3
 8024794:	2b00      	cmp	r3, #0
 8024796:	f2c0 80bd 	blt.w	8024914 <Argus_Cal_ApplyAuxCalibration+0x1a4>
 802479a:	f3c3 2c80 	ubfx	ip, r3, #10, #1
 802479e:	eb0c 23d3 	add.w	r3, ip, r3, lsr #11
 80247a2:	4c89      	ldr	r4, [pc, #548]	@ (80249c8 <Argus_Cal_ApplyAuxCalibration+0x258>)
 80247a4:	42a3      	cmp	r3, r4
 80247a6:	f647 75ff 	movw	r5, #32767	@ 0x7fff
 80247aa:	bfb8      	it	lt
 80247ac:	4623      	movlt	r3, r4
 80247ae:	f9b0 4028 	ldrsh.w	r4, [r0, #40]	@ 0x28
 80247b2:	42ab      	cmp	r3, r5
 80247b4:	bfa8      	it	ge
 80247b6:	462b      	movge	r3, r5
 80247b8:	42ac      	cmp	r4, r5
 80247ba:	d00d      	beq.n	80247d8 <Argus_Cal_ApplyAuxCalibration+0x68>
 80247bc:	f890 502a 	ldrb.w	r5, [r0, #42]	@ 0x2a
 80247c0:	b155      	cbz	r5, 80247d8 <Argus_Cal_ApplyAuxCalibration+0x68>
 80247c2:	1b1b      	subs	r3, r3, r4
 80247c4:	0224      	lsls	r4, r4, #8
 80247c6:	fb05 4303 	mla	r3, r5, r3, r4
 80247ca:	2b00      	cmp	r3, #0
 80247cc:	f2c0 80e6 	blt.w	802499c <Argus_Cal_ApplyAuxCalibration+0x22c>
 80247d0:	f3c3 14c0 	ubfx	r4, r3, #7, #1
 80247d4:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 80247d8:	b21b      	sxth	r3, r3
 80247da:	111c      	asrs	r4, r3, #4
 80247dc:	f504 74f0 	add.w	r4, r4, #480	@ 0x1e0
 80247e0:	8503      	strh	r3, [r0, #40]	@ 0x28
 80247e2:	804c      	strh	r4, [r1, #2]
 80247e4:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 80247e8:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 80247ec:	45a6      	cmp	lr, r4
 80247ee:	d043      	beq.n	8024878 <Argus_Cal_ApplyAuxCalibration+0x108>
 80247f0:	f5ae 4c00 	sub.w	ip, lr, #32768	@ 0x8000
 80247f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80247f8:	f1bc 0f00 	cmp.w	ip, #0
 80247fc:	f890 4488 	ldrb.w	r4, [r0, #1160]	@ 0x488
 8024800:	f2c0 8091 	blt.w	8024926 <Argus_Cal_ApplyAuxCalibration+0x1b6>
 8024804:	fa1f f58c 	uxth.w	r5, ip
 8024808:	fb04 f505 	mul.w	r5, r4, r5
 802480c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8024810:	fb04 fc0c 	mul.w	ip, r4, ip
 8024814:	0d2c      	lsrs	r4, r5, #20
 8024816:	eb04 141c 	add.w	r4, r4, ip, lsr #4
 802481a:	f3cc 0cc0 	ubfx	ip, ip, #3, #1
 802481e:	44a4      	add	ip, r4
 8024820:	f3c5 45c0 	ubfx	r5, r5, #19, #1
 8024824:	44ac      	add	ip, r5
 8024826:	44f4      	add	ip, lr
 8024828:	ea2c 7eec 	bic.w	lr, ip, ip, asr #31
 802482c:	f64f 74fe 	movw	r4, #65534	@ 0xfffe
 8024830:	45a6      	cmp	lr, r4
 8024832:	8dc6      	ldrh	r6, [r0, #46]	@ 0x2e
 8024834:	bfa8      	it	ge
 8024836:	46a6      	movge	lr, r4
 8024838:	f8a1 e004 	strh.w	lr, [r1, #4]
 802483c:	b1e6      	cbz	r6, 8024878 <Argus_Cal_ApplyAuxCalibration+0x108>
 802483e:	f64f 74fd 	movw	r4, #65533	@ 0xfffd
 8024842:	45a4      	cmp	ip, r4
 8024844:	dc18      	bgt.n	8024878 <Argus_Cal_ApplyAuxCalibration+0x108>
 8024846:	0752      	lsls	r2, r2, #29
 8024848:	f8b0 c490 	ldrh.w	ip, [r0, #1168]	@ 0x490
 802484c:	8e05      	ldrh	r5, [r0, #48]	@ 0x30
 802484e:	f100 80ac 	bmi.w	80249aa <Argus_Cal_ApplyAuxCalibration+0x23a>
 8024852:	f1a5 0210 	sub.w	r2, r5, #16
 8024856:	fb0e f202 	mul.w	r2, lr, r2
 802485a:	f105 0410 	add.w	r4, r5, #16
 802485e:	fb06 2214 	mls	r2, r6, r4, r2
 8024862:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 8024866:	fb92 f2f5 	sdiv	r2, r2, r5
 802486a:	b292      	uxth	r2, r2
 802486c:	f64f 74fe 	movw	r4, #65534	@ 0xfffe
 8024870:	42a2      	cmp	r2, r4
 8024872:	bf28      	it	cs
 8024874:	4622      	movcs	r2, r4
 8024876:	808a      	strh	r2, [r1, #4]
 8024878:	f8b1 c000 	ldrh.w	ip, [r1]
 802487c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8024880:	4594      	cmp	ip, r2
 8024882:	d020      	beq.n	80248c6 <Argus_Cal_ApplyAuxCalibration+0x156>
 8024884:	f5ac 4200 	sub.w	r2, ip, #32768	@ 0x8000
 8024888:	fb03 f202 	mul.w	r2, r3, r2
 802488c:	2a00      	cmp	r2, #0
 802488e:	f890 5488 	ldrb.w	r5, [r0, #1160]	@ 0x488
 8024892:	db5e      	blt.n	8024952 <Argus_Cal_ApplyAuxCalibration+0x1e2>
 8024894:	b294      	uxth	r4, r2
 8024896:	fb05 f404 	mul.w	r4, r5, r4
 802489a:	0c12      	lsrs	r2, r2, #16
 802489c:	fb05 f202 	mul.w	r2, r5, r2
 80248a0:	ea4f 5e14 	mov.w	lr, r4, lsr #20
 80248a4:	eb0e 1e12 	add.w	lr, lr, r2, lsr #4
 80248a8:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 80248ac:	4472      	add	r2, lr
 80248ae:	f3c4 44c0 	ubfx	r4, r4, #19, #1
 80248b2:	4422      	add	r2, r4
 80248b4:	4462      	add	r2, ip
 80248b6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80248ba:	f64f 74fe 	movw	r4, #65534	@ 0xfffe
 80248be:	42a2      	cmp	r2, r4
 80248c0:	bfa8      	it	ge
 80248c2:	4622      	movge	r2, r4
 80248c4:	800a      	strh	r2, [r1, #0]
 80248c6:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 80248ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80248ce:	4594      	cmp	ip, r2
 80248d0:	d01f      	beq.n	8024912 <Argus_Cal_ApplyAuxCalibration+0x1a2>
 80248d2:	f5ac 4200 	sub.w	r2, ip, #32768	@ 0x8000
 80248d6:	fb02 f303 	mul.w	r3, r2, r3
 80248da:	2b00      	cmp	r3, #0
 80248dc:	f890 2488 	ldrb.w	r2, [r0, #1160]	@ 0x488
 80248e0:	db4a      	blt.n	8024978 <Argus_Cal_ApplyAuxCalibration+0x208>
 80248e2:	0c18      	lsrs	r0, r3, #16
 80248e4:	b29b      	uxth	r3, r3
 80248e6:	fb02 f303 	mul.w	r3, r2, r3
 80248ea:	fb02 f000 	mul.w	r0, r2, r0
 80248ee:	0d1a      	lsrs	r2, r3, #20
 80248f0:	eb02 1210 	add.w	r2, r2, r0, lsr #4
 80248f4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 80248f8:	4402      	add	r2, r0
 80248fa:	f3c3 43c0 	ubfx	r3, r3, #19, #1
 80248fe:	4413      	add	r3, r2
 8024900:	4463      	add	r3, ip
 8024902:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024906:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 802490a:	4293      	cmp	r3, r2
 802490c:	bfa8      	it	ge
 802490e:	4613      	movge	r3, r2
 8024910:	80cb      	strh	r3, [r1, #6]
 8024912:	bd70      	pop	{r4, r5, r6, pc}
 8024914:	425b      	negs	r3, r3
 8024916:	f3c3 2c80 	ubfx	ip, r3, #10, #1
 802491a:	eb0c 23d3 	add.w	r3, ip, r3, lsr #11
 802491e:	425b      	negs	r3, r3
 8024920:	e73f      	b.n	80247a2 <Argus_Cal_ApplyAuxCalibration+0x32>
 8024922:	8503      	strh	r3, [r0, #40]	@ 0x28
 8024924:	e75e      	b.n	80247e4 <Argus_Cal_ApplyAuxCalibration+0x74>
 8024926:	f1cc 0c00 	rsb	ip, ip, #0
 802492a:	fa1f f58c 	uxth.w	r5, ip
 802492e:	fb04 f505 	mul.w	r5, r4, r5
 8024932:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8024936:	fb04 fc0c 	mul.w	ip, r4, ip
 802493a:	0d2c      	lsrs	r4, r5, #20
 802493c:	eb04 141c 	add.w	r4, r4, ip, lsr #4
 8024940:	f3cc 0cc0 	ubfx	ip, ip, #3, #1
 8024944:	44a4      	add	ip, r4
 8024946:	f3c5 45c0 	ubfx	r5, r5, #19, #1
 802494a:	44ac      	add	ip, r5
 802494c:	f1cc 0c00 	rsb	ip, ip, #0
 8024950:	e769      	b.n	8024826 <Argus_Cal_ApplyAuxCalibration+0xb6>
 8024952:	4252      	negs	r2, r2
 8024954:	b294      	uxth	r4, r2
 8024956:	fb05 f404 	mul.w	r4, r5, r4
 802495a:	0c12      	lsrs	r2, r2, #16
 802495c:	fb05 f202 	mul.w	r2, r5, r2
 8024960:	ea4f 5e14 	mov.w	lr, r4, lsr #20
 8024964:	eb0e 1e12 	add.w	lr, lr, r2, lsr #4
 8024968:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 802496c:	4472      	add	r2, lr
 802496e:	f3c4 44c0 	ubfx	r4, r4, #19, #1
 8024972:	4422      	add	r2, r4
 8024974:	4252      	negs	r2, r2
 8024976:	e79d      	b.n	80248b4 <Argus_Cal_ApplyAuxCalibration+0x144>
 8024978:	425b      	negs	r3, r3
 802497a:	0c18      	lsrs	r0, r3, #16
 802497c:	b29b      	uxth	r3, r3
 802497e:	fb02 f303 	mul.w	r3, r2, r3
 8024982:	fb02 f000 	mul.w	r0, r2, r0
 8024986:	0d1a      	lsrs	r2, r3, #20
 8024988:	eb02 1210 	add.w	r2, r2, r0, lsr #4
 802498c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8024990:	4402      	add	r2, r0
 8024992:	f3c3 43c0 	ubfx	r3, r3, #19, #1
 8024996:	4413      	add	r3, r2
 8024998:	425b      	negs	r3, r3
 802499a:	e7b1      	b.n	8024900 <Argus_Cal_ApplyAuxCalibration+0x190>
 802499c:	425b      	negs	r3, r3
 802499e:	f3c3 14c0 	ubfx	r4, r3, #7, #1
 80249a2:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 80249a6:	425b      	negs	r3, r3
 80249a8:	e716      	b.n	80247d8 <Argus_Cal_ApplyAuxCalibration+0x68>
 80249aa:	f1a5 0410 	sub.w	r4, r5, #16
 80249ae:	fb06 f404 	mul.w	r4, r6, r4
 80249b2:	f105 0210 	add.w	r2, r5, #16
 80249b6:	fb0e 4202 	mla	r2, lr, r2, r4
 80249ba:	eba2 120c 	sub.w	r2, r2, ip, lsl #4
 80249be:	fb92 f2f5 	sdiv	r2, r2, r5
 80249c2:	b292      	uxth	r2, r2
 80249c4:	e752      	b.n	802486c <Argus_Cal_ApplyAuxCalibration+0xfc>
 80249c6:	bf00      	nop
 80249c8:	ffff8000 	.word	0xffff8000

080249cc <Argus_Cal_UpdateLddXtalkVectors>:
 80249cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80249d0:	b089      	sub	sp, #36	@ 0x24
 80249d2:	460c      	mov	r4, r1
 80249d4:	9105      	str	r1, [sp, #20]
 80249d6:	f9b0 1028 	ldrsh.w	r1, [r0, #40]	@ 0x28
 80249da:	69a4      	ldr	r4, [r4, #24]
 80249dc:	9107      	str	r1, [sp, #28]
 80249de:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80249e2:	4299      	cmp	r1, r3
 80249e4:	9404      	str	r4, [sp, #16]
 80249e6:	4691      	mov	r9, r2
 80249e8:	f000 813f 	beq.w	8024c6a <Argus_Cal_UpdateLddXtalkVectors+0x29e>
 80249ec:	f8d0 54c0 	ldr.w	r5, [r0, #1216]	@ 0x4c0
 80249f0:	f8d5 21c4 	ldr.w	r2, [r5, #452]	@ 0x1c4
 80249f4:	f3c4 0380 	ubfx	r3, r4, #2, #1
 80249f8:	8a14      	ldrh	r4, [r2, #16]
 80249fa:	2900      	cmp	r1, #0
 80249fc:	fb04 f201 	mul.w	r2, r4, r1
 8024a00:	bfd4      	ite	le
 8024a02:	2600      	movle	r6, #0
 8024a04:	2601      	movgt	r6, #1
 8024a06:	2a00      	cmp	r2, #0
 8024a08:	f280 8129 	bge.w	8024c5e <Argus_Cal_UpdateLddXtalkVectors+0x292>
 8024a0c:	4252      	negs	r2, r2
 8024a0e:	f3c2 2140 	ubfx	r1, r2, #9, #1
 8024a12:	eb01 2292 	add.w	r2, r1, r2, lsr #10
 8024a16:	4252      	negs	r2, r2
 8024a18:	b212      	sxth	r2, r2
 8024a1a:	eb06 0743 	add.w	r7, r6, r3, lsl #1
 8024a1e:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 8024a22:	005b      	lsls	r3, r3, #1
 8024a24:	f9b7 1430 	ldrsh.w	r1, [r7, #1072]	@ 0x430
 8024a28:	fb02 fc01 	mul.w	ip, r2, r1
 8024a2c:	f1bc 0f00 	cmp.w	ip, #0
 8024a30:	f280 8128 	bge.w	8024c84 <Argus_Cal_UpdateLddXtalkVectors+0x2b8>
 8024a34:	f1cc 0c00 	rsb	ip, ip, #0
 8024a38:	f3cc 4180 	ubfx	r1, ip, #18, #1
 8024a3c:	eb01 41dc 	add.w	r1, r1, ip, lsr #19
 8024a40:	4249      	negs	r1, r1
 8024a42:	4249      	negs	r1, r1
 8024a44:	f8a0 113a 	strh.w	r1, [r0, #314]	@ 0x13a
 8024a48:	f9b7 1432 	ldrsh.w	r1, [r7, #1074]	@ 0x432
 8024a4c:	fb02 f101 	mul.w	r1, r2, r1
 8024a50:	2900      	cmp	r1, #0
 8024a52:	f2c0 812a 	blt.w	8024caa <Argus_Cal_UpdateLddXtalkVectors+0x2de>
 8024a56:	f3c1 4780 	ubfx	r7, r1, #18, #1
 8024a5a:	eb07 41d1 	add.w	r1, r7, r1, lsr #19
 8024a5e:	4249      	negs	r1, r1
 8024a60:	f8a0 113c 	strh.w	r1, [r0, #316]	@ 0x13c
 8024a64:	1999      	adds	r1, r3, r6
 8024a66:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8024a6a:	f9b1 1434 	ldrsh.w	r1, [r1, #1076]	@ 0x434
 8024a6e:	fb02 f101 	mul.w	r1, r2, r1
 8024a72:	2900      	cmp	r1, #0
 8024a74:	f2c0 8112 	blt.w	8024c9c <Argus_Cal_UpdateLddXtalkVectors+0x2d0>
 8024a78:	f3c1 4780 	ubfx	r7, r1, #18, #1
 8024a7c:	eb07 41d1 	add.w	r1, r7, r1, lsr #19
 8024a80:	4433      	add	r3, r6
 8024a82:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8024a86:	4249      	negs	r1, r1
 8024a88:	f9b3 3436 	ldrsh.w	r3, [r3, #1078]	@ 0x436
 8024a8c:	f8a0 113e 	strh.w	r1, [r0, #318]	@ 0x13e
 8024a90:	fb03 f202 	mul.w	r2, r3, r2
 8024a94:	2a00      	cmp	r2, #0
 8024a96:	f2c0 80fa 	blt.w	8024c8e <Argus_Cal_UpdateLddXtalkVectors+0x2c2>
 8024a9a:	f3c2 4380 	ubfx	r3, r2, #18, #1
 8024a9e:	eb03 42d2 	add.w	r2, r3, r2, lsr #19
 8024aa2:	f8d5 511c 	ldr.w	r5, [r5, #284]	@ 0x11c
 8024aa6:	f895 30e0 	ldrb.w	r3, [r5, #224]	@ 0xe0
 8024aaa:	4252      	negs	r2, r2
 8024aac:	f8a0 2140 	strh.w	r2, [r0, #320]	@ 0x140
 8024ab0:	2b00      	cmp	r3, #0
 8024ab2:	f000 8101 	beq.w	8024cb8 <Argus_Cal_UpdateLddXtalkVectors+0x2ec>
 8024ab6:	2700      	movs	r7, #0
 8024ab8:	9b05      	ldr	r3, [sp, #20]
 8024aba:	463e      	mov	r6, r7
 8024abc:	463a      	mov	r2, r7
 8024abe:	f893 1030 	ldrb.w	r1, [r3, #48]	@ 0x30
 8024ac2:	f011 0f01 	tst.w	r1, #1
 8024ac6:	d110      	bne.n	8024aea <Argus_Cal_UpdateLddXtalkVectors+0x11e>
 8024ac8:	0789      	lsls	r1, r1, #30
 8024aca:	f100 8191 	bmi.w	8024df0 <Argus_Cal_UpdateLddXtalkVectors+0x424>
 8024ace:	f8b3 c032 	ldrh.w	ip, [r3, #50]	@ 0x32
 8024ad2:	f8d5 10ec 	ldr.w	r1, [r5, #236]	@ 0xec
 8024ad6:	4566      	cmp	r6, ip
 8024ad8:	fa21 f102 	lsr.w	r1, r1, r2
 8024adc:	bf38      	it	cc
 8024ade:	4666      	movcc	r6, ip
 8024ae0:	07c9      	lsls	r1, r1, #31
 8024ae2:	d502      	bpl.n	8024aea <Argus_Cal_UpdateLddXtalkVectors+0x11e>
 8024ae4:	4567      	cmp	r7, ip
 8024ae6:	bf38      	it	cc
 8024ae8:	4667      	movcc	r7, ip
 8024aea:	3201      	adds	r2, #1
 8024aec:	2a20      	cmp	r2, #32
 8024aee:	f103 030c 	add.w	r3, r3, #12
 8024af2:	d1e4      	bne.n	8024abe <Argus_Cal_UpdateLddXtalkVectors+0xf2>
 8024af4:	9b05      	ldr	r3, [sp, #20]
 8024af6:	8b9a      	ldrh	r2, [r3, #28]
 8024af8:	0293      	lsls	r3, r2, #10
 8024afa:	b16a      	cbz	r2, 8024b18 <Argus_Cal_UpdateLddXtalkVectors+0x14c>
 8024afc:	429c      	cmp	r4, r3
 8024afe:	4621      	mov	r1, r4
 8024b00:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8024b04:	f240 8177 	bls.w	8024df6 <Argus_Cal_UpdateLddXtalkVectors+0x42a>
 8024b08:	005b      	lsls	r3, r3, #1
 8024b0a:	429c      	cmp	r4, r3
 8024b0c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8024b10:	d8fa      	bhi.n	8024b08 <Argus_Cal_UpdateLddXtalkVectors+0x13c>
 8024b12:	2a00      	cmp	r2, #0
 8024b14:	f040 816f 	bne.w	8024df6 <Argus_Cal_UpdateLddXtalkVectors+0x42a>
 8024b18:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8024b1c:	f890 3164 	ldrb.w	r3, [r0, #356]	@ 0x164
 8024b20:	fb04 f606 	mul.w	r6, r4, r6
 8024b24:	09b6      	lsrs	r6, r6, #6
 8024b26:	2b00      	cmp	r3, #0
 8024b28:	f000 80d2 	beq.w	8024cd0 <Argus_Cal_UpdateLddXtalkVectors+0x304>
 8024b2c:	9b04      	ldr	r3, [sp, #16]
 8024b2e:	039a      	lsls	r2, r3, #14
 8024b30:	f100 8179 	bmi.w	8024e26 <Argus_Cal_UpdateLddXtalkVectors+0x45a>
 8024b34:	2300      	movs	r3, #0
 8024b36:	f880 3164 	strb.w	r3, [r0, #356]	@ 0x164
 8024b3a:	9b07      	ldr	r3, [sp, #28]
 8024b3c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8024b40:	4293      	cmp	r3, r2
 8024b42:	f000 8089 	beq.w	8024c58 <Argus_Cal_UpdateLddXtalkVectors+0x28c>
 8024b46:	f9b0 3162 	ldrsh.w	r3, [r0, #354]	@ 0x162
 8024b4a:	4293      	cmp	r3, r2
 8024b4c:	f000 8084 	beq.w	8024c58 <Argus_Cal_UpdateLddXtalkVectors+0x28c>
 8024b50:	9a07      	ldr	r2, [sp, #28]
 8024b52:	1ad3      	subs	r3, r2, r3
 8024b54:	2b00      	cmp	r3, #0
 8024b56:	bfb8      	it	lt
 8024b58:	425b      	neglt	r3, r3
 8024b5a:	f995 20e2 	ldrsb.w	r2, [r5, #226]	@ 0xe2
 8024b5e:	b21b      	sxth	r3, r3
 8024b60:	ebb3 2f02 	cmp.w	r3, r2, lsl #8
 8024b64:	dd78      	ble.n	8024c58 <Argus_Cal_UpdateLddXtalkVectors+0x28c>
 8024b66:	9b04      	ldr	r3, [sp, #16]
 8024b68:	f895 20e1 	ldrb.w	r2, [r5, #225]	@ 0xe1
 8024b6c:	f003 0306 	and.w	r3, r3, #6
 8024b70:	f1a3 0306 	sub.w	r3, r3, #6
 8024b74:	fab3 f383 	clz	r3, r3
 8024b78:	095b      	lsrs	r3, r3, #5
 8024b7a:	eb00 1403 	add.w	r4, r0, r3, lsl #4
 8024b7e:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8024b82:	f9b4 1142 	ldrsh.w	r1, [r4, #322]	@ 0x142
 8024b86:	b292      	uxth	r2, r2
 8024b88:	fb02 f101 	mul.w	r1, r2, r1
 8024b8c:	2900      	cmp	r1, #0
 8024b8e:	bfbb      	ittet	lt
 8024b90:	4249      	neglt	r1, r1
 8024b92:	0a09      	lsrlt	r1, r1, #8
 8024b94:	0a09      	lsrge	r1, r1, #8
 8024b96:	4249      	neglt	r1, r1
 8024b98:	f8a4 1142 	strh.w	r1, [r4, #322]	@ 0x142
 8024b9c:	f9b4 1144 	ldrsh.w	r1, [r4, #324]	@ 0x144
 8024ba0:	fb02 f101 	mul.w	r1, r2, r1
 8024ba4:	2900      	cmp	r1, #0
 8024ba6:	bfbb      	ittet	lt
 8024ba8:	4249      	neglt	r1, r1
 8024baa:	0a09      	lsrlt	r1, r1, #8
 8024bac:	0a09      	lsrge	r1, r1, #8
 8024bae:	4249      	neglt	r1, r1
 8024bb0:	009b      	lsls	r3, r3, #2
 8024bb2:	f8a4 1144 	strh.w	r1, [r4, #324]	@ 0x144
 8024bb6:	1c5c      	adds	r4, r3, #1
 8024bb8:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8024bbc:	f9b4 1142 	ldrsh.w	r1, [r4, #322]	@ 0x142
 8024bc0:	fb02 f101 	mul.w	r1, r2, r1
 8024bc4:	2900      	cmp	r1, #0
 8024bc6:	bfbb      	ittet	lt
 8024bc8:	4249      	neglt	r1, r1
 8024bca:	0a09      	lsrlt	r1, r1, #8
 8024bcc:	0a09      	lsrge	r1, r1, #8
 8024bce:	4249      	neglt	r1, r1
 8024bd0:	f8a4 1142 	strh.w	r1, [r4, #322]	@ 0x142
 8024bd4:	f9b4 1144 	ldrsh.w	r1, [r4, #324]	@ 0x144
 8024bd8:	fb02 f101 	mul.w	r1, r2, r1
 8024bdc:	2900      	cmp	r1, #0
 8024bde:	bfbb      	ittet	lt
 8024be0:	4249      	neglt	r1, r1
 8024be2:	0a09      	lsrlt	r1, r1, #8
 8024be4:	0a09      	lsrge	r1, r1, #8
 8024be6:	4249      	neglt	r1, r1
 8024be8:	f8a4 1144 	strh.w	r1, [r4, #324]	@ 0x144
 8024bec:	1c9c      	adds	r4, r3, #2
 8024bee:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8024bf2:	3303      	adds	r3, #3
 8024bf4:	f9b4 1142 	ldrsh.w	r1, [r4, #322]	@ 0x142
 8024bf8:	fb02 f101 	mul.w	r1, r2, r1
 8024bfc:	2900      	cmp	r1, #0
 8024bfe:	bfbb      	ittet	lt
 8024c00:	4249      	neglt	r1, r1
 8024c02:	0a09      	lsrlt	r1, r1, #8
 8024c04:	0a09      	lsrge	r1, r1, #8
 8024c06:	4249      	neglt	r1, r1
 8024c08:	f8a4 1142 	strh.w	r1, [r4, #322]	@ 0x142
 8024c0c:	f9b4 1144 	ldrsh.w	r1, [r4, #324]	@ 0x144
 8024c10:	fb02 f101 	mul.w	r1, r2, r1
 8024c14:	2900      	cmp	r1, #0
 8024c16:	bfbb      	ittet	lt
 8024c18:	4249      	neglt	r1, r1
 8024c1a:	0a09      	lsrlt	r1, r1, #8
 8024c1c:	0a09      	lsrge	r1, r1, #8
 8024c1e:	4249      	neglt	r1, r1
 8024c20:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8024c24:	f8a4 1144 	strh.w	r1, [r4, #324]	@ 0x144
 8024c28:	f9b0 3142 	ldrsh.w	r3, [r0, #322]	@ 0x142
 8024c2c:	fb02 f303 	mul.w	r3, r2, r3
 8024c30:	2b00      	cmp	r3, #0
 8024c32:	bfbd      	ittte	lt
 8024c34:	425b      	neglt	r3, r3
 8024c36:	0a1b      	lsrlt	r3, r3, #8
 8024c38:	4259      	neglt	r1, r3
 8024c3a:	0a19      	lsrge	r1, r3, #8
 8024c3c:	f9b0 3144 	ldrsh.w	r3, [r0, #324]	@ 0x144
 8024c40:	f8a0 1142 	strh.w	r1, [r0, #322]	@ 0x142
 8024c44:	fb03 f202 	mul.w	r2, r3, r2
 8024c48:	2a00      	cmp	r2, #0
 8024c4a:	bfbd      	ittte	lt
 8024c4c:	4252      	neglt	r2, r2
 8024c4e:	0a12      	lsrlt	r2, r2, #8
 8024c50:	4252      	neglt	r2, r2
 8024c52:	0a12      	lsrge	r2, r2, #8
 8024c54:	f8a0 2144 	strh.w	r2, [r0, #324]	@ 0x144
 8024c58:	b009      	add	sp, #36	@ 0x24
 8024c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024c5e:	f3c2 2140 	ubfx	r1, r2, #9, #1
 8024c62:	eb01 2292 	add.w	r2, r1, r2, lsr #10
 8024c66:	b212      	sxth	r2, r2
 8024c68:	e6d7      	b.n	8024a1a <Argus_Cal_UpdateLddXtalkVectors+0x4e>
 8024c6a:	f8d0 54c0 	ldr.w	r5, [r0, #1216]	@ 0x4c0
 8024c6e:	f8d5 21c4 	ldr.w	r2, [r5, #452]	@ 0x1c4
 8024c72:	f3c4 0380 	ubfx	r3, r4, #2, #1
 8024c76:	8a14      	ldrh	r4, [r2, #16]
 8024c78:	2200      	movs	r2, #0
 8024c7a:	eb00 1703 	add.w	r7, r0, r3, lsl #4
 8024c7e:	4616      	mov	r6, r2
 8024c80:	005b      	lsls	r3, r3, #1
 8024c82:	4694      	mov	ip, r2
 8024c84:	f3cc 4180 	ubfx	r1, ip, #18, #1
 8024c88:	eb01 41dc 	add.w	r1, r1, ip, lsr #19
 8024c8c:	e6d9      	b.n	8024a42 <Argus_Cal_UpdateLddXtalkVectors+0x76>
 8024c8e:	4252      	negs	r2, r2
 8024c90:	f3c2 4380 	ubfx	r3, r2, #18, #1
 8024c94:	eb03 42d2 	add.w	r2, r3, r2, lsr #19
 8024c98:	4252      	negs	r2, r2
 8024c9a:	e702      	b.n	8024aa2 <Argus_Cal_UpdateLddXtalkVectors+0xd6>
 8024c9c:	4249      	negs	r1, r1
 8024c9e:	f3c1 4780 	ubfx	r7, r1, #18, #1
 8024ca2:	eb07 41d1 	add.w	r1, r7, r1, lsr #19
 8024ca6:	4249      	negs	r1, r1
 8024ca8:	e6ea      	b.n	8024a80 <Argus_Cal_UpdateLddXtalkVectors+0xb4>
 8024caa:	4249      	negs	r1, r1
 8024cac:	f3c1 4780 	ubfx	r7, r1, #18, #1
 8024cb0:	eb07 41d1 	add.w	r1, r7, r1, lsr #19
 8024cb4:	4249      	negs	r1, r1
 8024cb6:	e6d2      	b.n	8024a5e <Argus_Cal_UpdateLddXtalkVectors+0x92>
 8024cb8:	f890 3164 	ldrb.w	r3, [r0, #356]	@ 0x164
 8024cbc:	2b00      	cmp	r3, #0
 8024cbe:	d0cb      	beq.n	8024c58 <Argus_Cal_UpdateLddXtalkVectors+0x28c>
 8024cc0:	9b04      	ldr	r3, [sp, #16]
 8024cc2:	9a05      	ldr	r2, [sp, #20]
 8024cc4:	f043 0301 	orr.w	r3, r3, #1
 8024cc8:	6193      	str	r3, [r2, #24]
 8024cca:	b009      	add	sp, #36	@ 0x24
 8024ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024cd0:	9b04      	ldr	r3, [sp, #16]
 8024cd2:	039b      	lsls	r3, r3, #14
 8024cd4:	f57f af31 	bpl.w	8024b3a <Argus_Cal_UpdateLddXtalkVectors+0x16e>
 8024cd8:	f8b5 30e6 	ldrh.w	r3, [r5, #230]	@ 0xe6
 8024cdc:	429e      	cmp	r6, r3
 8024cde:	f4bf af2c 	bcs.w	8024b3a <Argus_Cal_UpdateLddXtalkVectors+0x16e>
 8024ce2:	f8b5 30e8 	ldrh.w	r3, [r5, #232]	@ 0xe8
 8024ce6:	429f      	cmp	r7, r3
 8024ce8:	f4bf af27 	bcs.w	8024b3a <Argus_Cal_UpdateLddXtalkVectors+0x16e>
 8024cec:	2301      	movs	r3, #1
 8024cee:	f880 3164 	strb.w	r3, [r0, #356]	@ 0x164
 8024cf2:	9b04      	ldr	r3, [sp, #16]
 8024cf4:	f003 0306 	and.w	r3, r3, #6
 8024cf8:	f1a3 0306 	sub.w	r3, r3, #6
 8024cfc:	fab3 f383 	clz	r3, r3
 8024d00:	095b      	lsrs	r3, r3, #5
 8024d02:	eb03 1243 	add.w	r2, r3, r3, lsl #5
 8024d06:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8024d0a:	0092      	lsls	r2, r2, #2
 8024d0c:	9303      	str	r3, [sp, #12]
 8024d0e:	f8d5 30ec 	ldr.w	r3, [r5, #236]	@ 0xec
 8024d12:	9300      	str	r3, [sp, #0]
 8024d14:	3232      	adds	r2, #50	@ 0x32
 8024d16:	f895 30e1 	ldrb.w	r3, [r5, #225]	@ 0xe1
 8024d1a:	9202      	str	r2, [sp, #8]
 8024d1c:	9306      	str	r3, [sp, #24]
 8024d1e:	f04f 0b00 	mov.w	fp, #0
 8024d22:	4682      	mov	sl, r0
 8024d24:	f00b 0301 	and.w	r3, fp, #1
 8024d28:	2100      	movs	r1, #0
 8024d2a:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8024d2e:	9301      	str	r3, [sp, #4]
 8024d30:	4688      	mov	r8, r1
 8024d32:	468e      	mov	lr, r1
 8024d34:	468c      	mov	ip, r1
 8024d36:	e035      	b.n	8024da4 <Argus_Cal_UpdateLddXtalkVectors+0x3d8>
 8024d38:	0cbd      	lsrs	r5, r7, #18
 8024d3a:	eb05 0590 	add.w	r5, r5, r0, lsr #2
 8024d3e:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8024d42:	4428      	add	r0, r5
 8024d44:	f3c7 4340 	ubfx	r3, r7, #17, #1
 8024d48:	4403      	add	r3, r0
 8024d4a:	6877      	ldr	r7, [r6, #4]
 8024d4c:	b2be      	uxth	r6, r7
 8024d4e:	0c38      	lsrs	r0, r7, #16
 8024d50:	2f00      	cmp	r7, #0
 8024d52:	f1c7 0500 	rsb	r5, r7, #0
 8024d56:	fb04 f606 	mul.w	r6, r4, r6
 8024d5a:	fb04 f000 	mul.w	r0, r4, r0
 8024d5e:	db6d      	blt.n	8024e3c <Argus_Cal_UpdateLddXtalkVectors+0x470>
 8024d60:	0cb5      	lsrs	r5, r6, #18
 8024d62:	eb05 0590 	add.w	r5, r5, r0, lsr #2
 8024d66:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8024d6a:	4428      	add	r0, r5
 8024d6c:	f3c6 4640 	ubfx	r6, r6, #17, #1
 8024d70:	4406      	add	r6, r0
 8024d72:	9802      	ldr	r0, [sp, #8]
 8024d74:	9f01      	ldr	r7, [sp, #4]
 8024d76:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8024d7a:	eb0a 0502 	add.w	r5, sl, r2
 8024d7e:	f93a 0002 	ldrsh.w	r0, [sl, r2]
 8024d82:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8024d86:	f9b7 513a 	ldrsh.w	r5, [r7, #314]	@ 0x13a
 8024d8a:	4428      	add	r0, r5
 8024d8c:	4418      	add	r0, r3
 8024d8e:	f9b7 313c 	ldrsh.w	r3, [r7, #316]	@ 0x13c
 8024d92:	441a      	add	r2, r3
 8024d94:	4416      	add	r6, r2
 8024d96:	f10c 0c01 	add.w	ip, ip, #1
 8024d9a:	4486      	add	lr, r0
 8024d9c:	44b0      	add	r8, r6
 8024d9e:	3104      	adds	r1, #4
 8024da0:	2920      	cmp	r1, #32
 8024da2:	d05c      	beq.n	8024e5e <Argus_Cal_UpdateLddXtalkVectors+0x492>
 8024da4:	9b00      	ldr	r3, [sp, #0]
 8024da6:	ea4b 0201 	orr.w	r2, fp, r1
 8024daa:	40d3      	lsrs	r3, r2
 8024dac:	f013 0f01 	tst.w	r3, #1
 8024db0:	eb09 06c2 	add.w	r6, r9, r2, lsl #3
 8024db4:	d0f3      	beq.n	8024d9e <Argus_Cal_UpdateLddXtalkVectors+0x3d2>
 8024db6:	f859 0032 	ldr.w	r0, [r9, r2, lsl #3]
 8024dba:	b287      	uxth	r7, r0
 8024dbc:	4245      	negs	r5, r0
 8024dbe:	2800      	cmp	r0, #0
 8024dc0:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8024dc4:	fb04 f707 	mul.w	r7, r4, r7
 8024dc8:	fb04 f000 	mul.w	r0, r4, r0
 8024dcc:	dab4      	bge.n	8024d38 <Argus_Cal_UpdateLddXtalkVectors+0x36c>
 8024dce:	b2a8      	uxth	r0, r5
 8024dd0:	fb04 f000 	mul.w	r0, r4, r0
 8024dd4:	0c2d      	lsrs	r5, r5, #16
 8024dd6:	fb04 f505 	mul.w	r5, r4, r5
 8024dda:	0c83      	lsrs	r3, r0, #18
 8024ddc:	eb03 0395 	add.w	r3, r3, r5, lsr #2
 8024de0:	f3c5 0540 	ubfx	r5, r5, #1, #1
 8024de4:	441d      	add	r5, r3
 8024de6:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8024dea:	4405      	add	r5, r0
 8024dec:	426b      	negs	r3, r5
 8024dee:	e7ac      	b.n	8024d4a <Argus_Cal_UpdateLddXtalkVectors+0x37e>
 8024df0:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8024df4:	e67e      	b.n	8024af4 <Argus_Cal_UpdateLddXtalkVectors+0x128>
 8024df6:	2400      	movs	r4, #0
 8024df8:	eba1 0c03 	sub.w	ip, r1, r3
 8024dfc:	b149      	cbz	r1, 8024e12 <Argus_Cal_UpdateLddXtalkVectors+0x446>
 8024dfe:	428b      	cmp	r3, r1
 8024e00:	d80c      	bhi.n	8024e1c <Argus_Cal_UpdateLddXtalkVectors+0x450>
 8024e02:	4314      	orrs	r4, r2
 8024e04:	0852      	lsrs	r2, r2, #1
 8024e06:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8024e0a:	d1f5      	bne.n	8024df8 <Argus_Cal_UpdateLddXtalkVectors+0x42c>
 8024e0c:	428b      	cmp	r3, r1
 8024e0e:	d800      	bhi.n	8024e12 <Argus_Cal_UpdateLddXtalkVectors+0x446>
 8024e10:	3401      	adds	r4, #1
 8024e12:	2c00      	cmp	r4, #0
 8024e14:	f6ff ae80 	blt.w	8024b18 <Argus_Cal_UpdateLddXtalkVectors+0x14c>
 8024e18:	b2a4      	uxth	r4, r4
 8024e1a:	e67f      	b.n	8024b1c <Argus_Cal_UpdateLddXtalkVectors+0x150>
 8024e1c:	0852      	lsrs	r2, r2, #1
 8024e1e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8024e22:	d1e9      	bne.n	8024df8 <Argus_Cal_UpdateLddXtalkVectors+0x42c>
 8024e24:	e7f2      	b.n	8024e0c <Argus_Cal_UpdateLddXtalkVectors+0x440>
 8024e26:	f8b5 30e4 	ldrh.w	r3, [r5, #228]	@ 0xe4
 8024e2a:	429e      	cmp	r6, r3
 8024e2c:	f63f ae82 	bhi.w	8024b34 <Argus_Cal_UpdateLddXtalkVectors+0x168>
 8024e30:	f8b5 30e8 	ldrh.w	r3, [r5, #232]	@ 0xe8
 8024e34:	429f      	cmp	r7, r3
 8024e36:	f67f af5c 	bls.w	8024cf2 <Argus_Cal_UpdateLddXtalkVectors+0x326>
 8024e3a:	e67b      	b.n	8024b34 <Argus_Cal_UpdateLddXtalkVectors+0x168>
 8024e3c:	b2a8      	uxth	r0, r5
 8024e3e:	fb04 f000 	mul.w	r0, r4, r0
 8024e42:	0c2d      	lsrs	r5, r5, #16
 8024e44:	fb04 f505 	mul.w	r5, r4, r5
 8024e48:	0c86      	lsrs	r6, r0, #18
 8024e4a:	eb06 0695 	add.w	r6, r6, r5, lsr #2
 8024e4e:	f3c5 0540 	ubfx	r5, r5, #1, #1
 8024e52:	4435      	add	r5, r6
 8024e54:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8024e58:	182e      	adds	r6, r5, r0
 8024e5a:	4276      	negs	r6, r6
 8024e5c:	e789      	b.n	8024d72 <Argus_Cal_UpdateLddXtalkVectors+0x3a6>
 8024e5e:	9a06      	ldr	r2, [sp, #24]
 8024e60:	fb9e fefc 	sdiv	lr, lr, ip
 8024e64:	f1ce 0e00 	rsb	lr, lr, #0
 8024e68:	9b03      	ldr	r3, [sp, #12]
 8024e6a:	fb98 f7fc 	sdiv	r7, r8, ip
 8024e6e:	fa0f fe8e 	sxth.w	lr, lr
 8024e72:	b3aa      	cbz	r2, 8024ee0 <Argus_Cal_UpdateLddXtalkVectors+0x514>
 8024e74:	f9b3 3142 	ldrsh.w	r3, [r3, #322]	@ 0x142
 8024e78:	ebae 0e03 	sub.w	lr, lr, r3
 8024e7c:	021b      	lsls	r3, r3, #8
 8024e7e:	fb02 3e0e 	mla	lr, r2, lr, r3
 8024e82:	f1be 0f00 	cmp.w	lr, #0
 8024e86:	db37      	blt.n	8024ef8 <Argus_Cal_UpdateLddXtalkVectors+0x52c>
 8024e88:	f3ce 13c0 	ubfx	r3, lr, #7, #1
 8024e8c:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8024e90:	9b03      	ldr	r3, [sp, #12]
 8024e92:	427a      	negs	r2, r7
 8024e94:	f9b3 1144 	ldrsh.w	r1, [r3, #324]	@ 0x144
 8024e98:	f8a3 e142 	strh.w	lr, [r3, #322]	@ 0x142
 8024e9c:	b212      	sxth	r2, r2
 8024e9e:	1a52      	subs	r2, r2, r1
 8024ea0:	020b      	lsls	r3, r1, #8
 8024ea2:	9906      	ldr	r1, [sp, #24]
 8024ea4:	fb01 3202 	mla	r2, r1, r2, r3
 8024ea8:	2a00      	cmp	r2, #0
 8024eaa:	db1e      	blt.n	8024eea <Argus_Cal_UpdateLddXtalkVectors+0x51e>
 8024eac:	f3c2 13c0 	ubfx	r3, r2, #7, #1
 8024eb0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024eb4:	b21b      	sxth	r3, r3
 8024eb6:	9a03      	ldr	r2, [sp, #12]
 8024eb8:	f10b 0b01 	add.w	fp, fp, #1
 8024ebc:	f8a2 3144 	strh.w	r3, [r2, #324]	@ 0x144
 8024ec0:	f1bb 0f04 	cmp.w	fp, #4
 8024ec4:	f102 0304 	add.w	r3, r2, #4
 8024ec8:	9303      	str	r3, [sp, #12]
 8024eca:	f47f af2b 	bne.w	8024d24 <Argus_Cal_UpdateLddXtalkVectors+0x358>
 8024ece:	9b07      	ldr	r3, [sp, #28]
 8024ed0:	f8aa 3162 	strh.w	r3, [sl, #354]	@ 0x162
 8024ed4:	9b04      	ldr	r3, [sp, #16]
 8024ed6:	9a05      	ldr	r2, [sp, #20]
 8024ed8:	f043 0301 	orr.w	r3, r3, #1
 8024edc:	6193      	str	r3, [r2, #24]
 8024ede:	e6f4      	b.n	8024cca <Argus_Cal_UpdateLddXtalkVectors+0x2fe>
 8024ee0:	427f      	negs	r7, r7
 8024ee2:	f8a3 e142 	strh.w	lr, [r3, #322]	@ 0x142
 8024ee6:	b23b      	sxth	r3, r7
 8024ee8:	e7e5      	b.n	8024eb6 <Argus_Cal_UpdateLddXtalkVectors+0x4ea>
 8024eea:	4252      	negs	r2, r2
 8024eec:	f3c2 13c0 	ubfx	r3, r2, #7, #1
 8024ef0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024ef4:	425b      	negs	r3, r3
 8024ef6:	e7dd      	b.n	8024eb4 <Argus_Cal_UpdateLddXtalkVectors+0x4e8>
 8024ef8:	f1ce 0e00 	rsb	lr, lr, #0
 8024efc:	f3ce 13c0 	ubfx	r3, lr, #7, #1
 8024f00:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8024f04:	f1ce 0e00 	rsb	lr, lr, #0
 8024f08:	e7c2      	b.n	8024e90 <Argus_Cal_UpdateLddXtalkVectors+0x4c4>
 8024f0a:	bf00      	nop

08024f0c <Argus_Cal_GetXtalkVectors>:
 8024f0c:	f9b0 c13a 	ldrsh.w	ip, [r0, #314]	@ 0x13a
 8024f10:	b510      	push	{r4, lr}
 8024f12:	f1bc 0f00 	cmp.w	ip, #0
 8024f16:	9c02      	ldr	r4, [sp, #8]
 8024f18:	f2c0 81d3 	blt.w	80252c2 <Argus_Cal_GetXtalkVectors+0x3b6>
 8024f1c:	b161      	cbz	r1, 8024f38 <Argus_Cal_GetXtalkVectors+0x2c>
 8024f1e:	2920      	cmp	r1, #32
 8024f20:	f200 81e3 	bhi.w	80252ea <Argus_Cal_GetXtalkVectors+0x3de>
 8024f24:	f101 3eff 	add.w	lr, r1, #4294967295
 8024f28:	fa2c fc0e 	lsr.w	ip, ip, lr
 8024f2c:	f00c 0e01 	and.w	lr, ip, #1
 8024f30:	eb0e 0c5c 	add.w	ip, lr, ip, lsr #1
 8024f34:	fa0f fc8c 	sxth.w	ip, ip
 8024f38:	f8a3 c000 	strh.w	ip, [r3]
 8024f3c:	f9b0 c13c 	ldrsh.w	ip, [r0, #316]	@ 0x13c
 8024f40:	f1bc 0f00 	cmp.w	ip, #0
 8024f44:	f2c0 81a6 	blt.w	8025294 <Argus_Cal_GetXtalkVectors+0x388>
 8024f48:	b161      	cbz	r1, 8024f64 <Argus_Cal_GetXtalkVectors+0x58>
 8024f4a:	2920      	cmp	r1, #32
 8024f4c:	f200 81b6 	bhi.w	80252bc <Argus_Cal_GetXtalkVectors+0x3b0>
 8024f50:	f101 3eff 	add.w	lr, r1, #4294967295
 8024f54:	fa2c fc0e 	lsr.w	ip, ip, lr
 8024f58:	f00c 0e01 	and.w	lr, ip, #1
 8024f5c:	eb0e 0c5c 	add.w	ip, lr, ip, lsr #1
 8024f60:	fa0f fc8c 	sxth.w	ip, ip
 8024f64:	f8a3 c002 	strh.w	ip, [r3, #2]
 8024f68:	f9b0 c13e 	ldrsh.w	ip, [r0, #318]	@ 0x13e
 8024f6c:	f1bc 0f00 	cmp.w	ip, #0
 8024f70:	f2c0 8175 	blt.w	802525e <Argus_Cal_GetXtalkVectors+0x352>
 8024f74:	b161      	cbz	r1, 8024f90 <Argus_Cal_GetXtalkVectors+0x84>
 8024f76:	2920      	cmp	r1, #32
 8024f78:	f200 8185 	bhi.w	8025286 <Argus_Cal_GetXtalkVectors+0x37a>
 8024f7c:	f101 3eff 	add.w	lr, r1, #4294967295
 8024f80:	fa2c fc0e 	lsr.w	ip, ip, lr
 8024f84:	f00c 0e01 	and.w	lr, ip, #1
 8024f88:	eb0e 0c5c 	add.w	ip, lr, ip, lsr #1
 8024f8c:	fa0f fc8c 	sxth.w	ip, ip
 8024f90:	f8a3 c004 	strh.w	ip, [r3, #4]
 8024f94:	f9b0 c140 	ldrsh.w	ip, [r0, #320]	@ 0x140
 8024f98:	f1bc 0f00 	cmp.w	ip, #0
 8024f9c:	f2c0 8119 	blt.w	80251d2 <Argus_Cal_GetXtalkVectors+0x2c6>
 8024fa0:	b161      	cbz	r1, 8024fbc <Argus_Cal_GetXtalkVectors+0xb0>
 8024fa2:	2920      	cmp	r1, #32
 8024fa4:	f200 8158 	bhi.w	8025258 <Argus_Cal_GetXtalkVectors+0x34c>
 8024fa8:	f101 3eff 	add.w	lr, r1, #4294967295
 8024fac:	fa2c fc0e 	lsr.w	ip, ip, lr
 8024fb0:	f00c 0e01 	and.w	lr, ip, #1
 8024fb4:	eb0e 0c5c 	add.w	ip, lr, ip, lsr #1
 8024fb8:	fa0f fc8c 	sxth.w	ip, ip
 8024fbc:	f8a3 c006 	strh.w	ip, [r3, #6]
 8024fc0:	eb00 1c02 	add.w	ip, r0, r2, lsl #4
 8024fc4:	f9bc 3142 	ldrsh.w	r3, [ip, #322]	@ 0x142
 8024fc8:	2b00      	cmp	r3, #0
 8024fca:	f2c0 811e 	blt.w	802520a <Argus_Cal_GetXtalkVectors+0x2fe>
 8024fce:	b159      	cbz	r1, 8024fe8 <Argus_Cal_GetXtalkVectors+0xdc>
 8024fd0:	2920      	cmp	r1, #32
 8024fd2:	f200 815d 	bhi.w	8025290 <Argus_Cal_GetXtalkVectors+0x384>
 8024fd6:	f101 3eff 	add.w	lr, r1, #4294967295
 8024fda:	fa23 f30e 	lsr.w	r3, r3, lr
 8024fde:	f003 0e01 	and.w	lr, r3, #1
 8024fe2:	eb0e 0353 	add.w	r3, lr, r3, lsr #1
 8024fe6:	b21b      	sxth	r3, r3
 8024fe8:	8023      	strh	r3, [r4, #0]
 8024fea:	f9bc 3144 	ldrsh.w	r3, [ip, #324]	@ 0x144
 8024fee:	2b00      	cmp	r3, #0
 8024ff0:	f2c0 8121 	blt.w	8025236 <Argus_Cal_GetXtalkVectors+0x32a>
 8024ff4:	b159      	cbz	r1, 802500e <Argus_Cal_GetXtalkVectors+0x102>
 8024ff6:	2920      	cmp	r1, #32
 8024ff8:	f200 8148 	bhi.w	802528c <Argus_Cal_GetXtalkVectors+0x380>
 8024ffc:	f101 3cff 	add.w	ip, r1, #4294967295
 8025000:	fa23 f30c 	lsr.w	r3, r3, ip
 8025004:	f003 0c01 	and.w	ip, r3, #1
 8025008:	eb0c 0353 	add.w	r3, ip, r3, lsr #1
 802500c:	b21b      	sxth	r3, r3
 802500e:	0092      	lsls	r2, r2, #2
 8025010:	f102 0c01 	add.w	ip, r2, #1
 8025014:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8025018:	8063      	strh	r3, [r4, #2]
 802501a:	f9bc 3142 	ldrsh.w	r3, [ip, #322]	@ 0x142
 802501e:	2b00      	cmp	r3, #0
 8025020:	f2c0 80c4 	blt.w	80251ac <Argus_Cal_GetXtalkVectors+0x2a0>
 8025024:	b159      	cbz	r1, 802503e <Argus_Cal_GetXtalkVectors+0x132>
 8025026:	2920      	cmp	r1, #32
 8025028:	f200 80d1 	bhi.w	80251ce <Argus_Cal_GetXtalkVectors+0x2c2>
 802502c:	f101 3eff 	add.w	lr, r1, #4294967295
 8025030:	fa23 f30e 	lsr.w	r3, r3, lr
 8025034:	f003 0e01 	and.w	lr, r3, #1
 8025038:	eb0e 0353 	add.w	r3, lr, r3, lsr #1
 802503c:	b21b      	sxth	r3, r3
 802503e:	80a3      	strh	r3, [r4, #4]
 8025040:	f9bc 3144 	ldrsh.w	r3, [ip, #324]	@ 0x144
 8025044:	2b00      	cmp	r3, #0
 8025046:	f2c0 809e 	blt.w	8025186 <Argus_Cal_GetXtalkVectors+0x27a>
 802504a:	b159      	cbz	r1, 8025064 <Argus_Cal_GetXtalkVectors+0x158>
 802504c:	2920      	cmp	r1, #32
 802504e:	f200 80ab 	bhi.w	80251a8 <Argus_Cal_GetXtalkVectors+0x29c>
 8025052:	f101 3cff 	add.w	ip, r1, #4294967295
 8025056:	fa23 f30c 	lsr.w	r3, r3, ip
 802505a:	f003 0c01 	and.w	ip, r3, #1
 802505e:	eb0c 0353 	add.w	r3, ip, r3, lsr #1
 8025062:	b21b      	sxth	r3, r3
 8025064:	f102 0c02 	add.w	ip, r2, #2
 8025068:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 802506c:	80e3      	strh	r3, [r4, #6]
 802506e:	f9bc 3142 	ldrsh.w	r3, [ip, #322]	@ 0x142
 8025072:	2b00      	cmp	r3, #0
 8025074:	db75      	blt.n	8025162 <Argus_Cal_GetXtalkVectors+0x256>
 8025076:	b159      	cbz	r1, 8025090 <Argus_Cal_GetXtalkVectors+0x184>
 8025078:	2920      	cmp	r1, #32
 802507a:	f200 8082 	bhi.w	8025182 <Argus_Cal_GetXtalkVectors+0x276>
 802507e:	f101 3eff 	add.w	lr, r1, #4294967295
 8025082:	fa23 f30e 	lsr.w	r3, r3, lr
 8025086:	f003 0e01 	and.w	lr, r3, #1
 802508a:	eb0e 0353 	add.w	r3, lr, r3, lsr #1
 802508e:	b21b      	sxth	r3, r3
 8025090:	8123      	strh	r3, [r4, #8]
 8025092:	f9bc 3144 	ldrsh.w	r3, [ip, #324]	@ 0x144
 8025096:	2b00      	cmp	r3, #0
 8025098:	db51      	blt.n	802513e <Argus_Cal_GetXtalkVectors+0x232>
 802509a:	b151      	cbz	r1, 80250b2 <Argus_Cal_GetXtalkVectors+0x1a6>
 802509c:	2920      	cmp	r1, #32
 802509e:	d85e      	bhi.n	802515e <Argus_Cal_GetXtalkVectors+0x252>
 80250a0:	f101 3cff 	add.w	ip, r1, #4294967295
 80250a4:	fa23 f30c 	lsr.w	r3, r3, ip
 80250a8:	f003 0c01 	and.w	ip, r3, #1
 80250ac:	eb0c 0353 	add.w	r3, ip, r3, lsr #1
 80250b0:	b21b      	sxth	r3, r3
 80250b2:	3203      	adds	r2, #3
 80250b4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80250b8:	8163      	strh	r3, [r4, #10]
 80250ba:	f9b2 3142 	ldrsh.w	r3, [r2, #322]	@ 0x142
 80250be:	2b00      	cmp	r3, #0
 80250c0:	db2d      	blt.n	802511e <Argus_Cal_GetXtalkVectors+0x212>
 80250c2:	b141      	cbz	r1, 80250d6 <Argus_Cal_GetXtalkVectors+0x1ca>
 80250c4:	2920      	cmp	r1, #32
 80250c6:	d838      	bhi.n	802513a <Argus_Cal_GetXtalkVectors+0x22e>
 80250c8:	1e48      	subs	r0, r1, #1
 80250ca:	40c3      	lsrs	r3, r0
 80250cc:	f003 0001 	and.w	r0, r3, #1
 80250d0:	eb00 0353 	add.w	r3, r0, r3, lsr #1
 80250d4:	b21b      	sxth	r3, r3
 80250d6:	81a3      	strh	r3, [r4, #12]
 80250d8:	f9b2 3144 	ldrsh.w	r3, [r2, #324]	@ 0x144
 80250dc:	2b00      	cmp	r3, #0
 80250de:	db0c      	blt.n	80250fa <Argus_Cal_GetXtalkVectors+0x1ee>
 80250e0:	b149      	cbz	r1, 80250f6 <Argus_Cal_GetXtalkVectors+0x1ea>
 80250e2:	2920      	cmp	r1, #32
 80250e4:	d818      	bhi.n	8025118 <Argus_Cal_GetXtalkVectors+0x20c>
 80250e6:	3901      	subs	r1, #1
 80250e8:	fa23 f101 	lsr.w	r1, r3, r1
 80250ec:	f001 0301 	and.w	r3, r1, #1
 80250f0:	eb03 0151 	add.w	r1, r3, r1, lsr #1
 80250f4:	b20b      	sxth	r3, r1
 80250f6:	81e3      	strh	r3, [r4, #14]
 80250f8:	bd10      	pop	{r4, pc}
 80250fa:	425a      	negs	r2, r3
 80250fc:	2900      	cmp	r1, #0
 80250fe:	d0fa      	beq.n	80250f6 <Argus_Cal_GetXtalkVectors+0x1ea>
 8025100:	2920      	cmp	r1, #32
 8025102:	d809      	bhi.n	8025118 <Argus_Cal_GetXtalkVectors+0x20c>
 8025104:	1e4b      	subs	r3, r1, #1
 8025106:	40da      	lsrs	r2, r3
 8025108:	f002 0301 	and.w	r3, r2, #1
 802510c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8025110:	425b      	negs	r3, r3
 8025112:	b21b      	sxth	r3, r3
 8025114:	81e3      	strh	r3, [r4, #14]
 8025116:	bd10      	pop	{r4, pc}
 8025118:	2300      	movs	r3, #0
 802511a:	81e3      	strh	r3, [r4, #14]
 802511c:	bd10      	pop	{r4, pc}
 802511e:	4258      	negs	r0, r3
 8025120:	2900      	cmp	r1, #0
 8025122:	d0d8      	beq.n	80250d6 <Argus_Cal_GetXtalkVectors+0x1ca>
 8025124:	2920      	cmp	r1, #32
 8025126:	d808      	bhi.n	802513a <Argus_Cal_GetXtalkVectors+0x22e>
 8025128:	1e4b      	subs	r3, r1, #1
 802512a:	40d8      	lsrs	r0, r3
 802512c:	f000 0301 	and.w	r3, r0, #1
 8025130:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8025134:	425b      	negs	r3, r3
 8025136:	b21b      	sxth	r3, r3
 8025138:	e7cd      	b.n	80250d6 <Argus_Cal_GetXtalkVectors+0x1ca>
 802513a:	2300      	movs	r3, #0
 802513c:	e7cb      	b.n	80250d6 <Argus_Cal_GetXtalkVectors+0x1ca>
 802513e:	f1c3 0c00 	rsb	ip, r3, #0
 8025142:	2900      	cmp	r1, #0
 8025144:	d0b5      	beq.n	80250b2 <Argus_Cal_GetXtalkVectors+0x1a6>
 8025146:	2920      	cmp	r1, #32
 8025148:	d809      	bhi.n	802515e <Argus_Cal_GetXtalkVectors+0x252>
 802514a:	1e4b      	subs	r3, r1, #1
 802514c:	fa2c fc03 	lsr.w	ip, ip, r3
 8025150:	f00c 0301 	and.w	r3, ip, #1
 8025154:	eb03 035c 	add.w	r3, r3, ip, lsr #1
 8025158:	425b      	negs	r3, r3
 802515a:	b21b      	sxth	r3, r3
 802515c:	e7a9      	b.n	80250b2 <Argus_Cal_GetXtalkVectors+0x1a6>
 802515e:	2300      	movs	r3, #0
 8025160:	e7a7      	b.n	80250b2 <Argus_Cal_GetXtalkVectors+0x1a6>
 8025162:	f1c3 0e00 	rsb	lr, r3, #0
 8025166:	2900      	cmp	r1, #0
 8025168:	d092      	beq.n	8025090 <Argus_Cal_GetXtalkVectors+0x184>
 802516a:	2920      	cmp	r1, #32
 802516c:	d809      	bhi.n	8025182 <Argus_Cal_GetXtalkVectors+0x276>
 802516e:	1e4b      	subs	r3, r1, #1
 8025170:	fa2e fe03 	lsr.w	lr, lr, r3
 8025174:	f00e 0301 	and.w	r3, lr, #1
 8025178:	eb03 035e 	add.w	r3, r3, lr, lsr #1
 802517c:	425b      	negs	r3, r3
 802517e:	b21b      	sxth	r3, r3
 8025180:	e786      	b.n	8025090 <Argus_Cal_GetXtalkVectors+0x184>
 8025182:	2300      	movs	r3, #0
 8025184:	e784      	b.n	8025090 <Argus_Cal_GetXtalkVectors+0x184>
 8025186:	f1c3 0c00 	rsb	ip, r3, #0
 802518a:	2900      	cmp	r1, #0
 802518c:	f43f af6a 	beq.w	8025064 <Argus_Cal_GetXtalkVectors+0x158>
 8025190:	2920      	cmp	r1, #32
 8025192:	d809      	bhi.n	80251a8 <Argus_Cal_GetXtalkVectors+0x29c>
 8025194:	1e4b      	subs	r3, r1, #1
 8025196:	fa2c fc03 	lsr.w	ip, ip, r3
 802519a:	f00c 0301 	and.w	r3, ip, #1
 802519e:	eb03 035c 	add.w	r3, r3, ip, lsr #1
 80251a2:	425b      	negs	r3, r3
 80251a4:	b21b      	sxth	r3, r3
 80251a6:	e75d      	b.n	8025064 <Argus_Cal_GetXtalkVectors+0x158>
 80251a8:	2300      	movs	r3, #0
 80251aa:	e75b      	b.n	8025064 <Argus_Cal_GetXtalkVectors+0x158>
 80251ac:	f1c3 0e00 	rsb	lr, r3, #0
 80251b0:	2900      	cmp	r1, #0
 80251b2:	f43f af44 	beq.w	802503e <Argus_Cal_GetXtalkVectors+0x132>
 80251b6:	2920      	cmp	r1, #32
 80251b8:	d809      	bhi.n	80251ce <Argus_Cal_GetXtalkVectors+0x2c2>
 80251ba:	1e4b      	subs	r3, r1, #1
 80251bc:	fa2e fe03 	lsr.w	lr, lr, r3
 80251c0:	f00e 0301 	and.w	r3, lr, #1
 80251c4:	eb03 035e 	add.w	r3, r3, lr, lsr #1
 80251c8:	425b      	negs	r3, r3
 80251ca:	b21b      	sxth	r3, r3
 80251cc:	e737      	b.n	802503e <Argus_Cal_GetXtalkVectors+0x132>
 80251ce:	2300      	movs	r3, #0
 80251d0:	e735      	b.n	802503e <Argus_Cal_GetXtalkVectors+0x132>
 80251d2:	f1cc 0e00 	rsb	lr, ip, #0
 80251d6:	2900      	cmp	r1, #0
 80251d8:	f43f aef0 	beq.w	8024fbc <Argus_Cal_GetXtalkVectors+0xb0>
 80251dc:	2920      	cmp	r1, #32
 80251de:	d83b      	bhi.n	8025258 <Argus_Cal_GetXtalkVectors+0x34c>
 80251e0:	f101 3cff 	add.w	ip, r1, #4294967295
 80251e4:	fa2e fe0c 	lsr.w	lr, lr, ip
 80251e8:	f00e 0c01 	and.w	ip, lr, #1
 80251ec:	eb0c 0c5e 	add.w	ip, ip, lr, lsr #1
 80251f0:	f1cc 0c00 	rsb	ip, ip, #0
 80251f4:	fa0f fc8c 	sxth.w	ip, ip
 80251f8:	f8a3 c006 	strh.w	ip, [r3, #6]
 80251fc:	eb00 1c02 	add.w	ip, r0, r2, lsl #4
 8025200:	f9bc 3142 	ldrsh.w	r3, [ip, #322]	@ 0x142
 8025204:	2b00      	cmp	r3, #0
 8025206:	f6bf aee2 	bge.w	8024fce <Argus_Cal_GetXtalkVectors+0xc2>
 802520a:	f1c3 0e00 	rsb	lr, r3, #0
 802520e:	2900      	cmp	r1, #0
 8025210:	f43f aeea 	beq.w	8024fe8 <Argus_Cal_GetXtalkVectors+0xdc>
 8025214:	2920      	cmp	r1, #32
 8025216:	d83b      	bhi.n	8025290 <Argus_Cal_GetXtalkVectors+0x384>
 8025218:	1e4b      	subs	r3, r1, #1
 802521a:	fa2e fe03 	lsr.w	lr, lr, r3
 802521e:	f00e 0301 	and.w	r3, lr, #1
 8025222:	eb03 035e 	add.w	r3, r3, lr, lsr #1
 8025226:	425b      	negs	r3, r3
 8025228:	b21b      	sxth	r3, r3
 802522a:	8023      	strh	r3, [r4, #0]
 802522c:	f9bc 3144 	ldrsh.w	r3, [ip, #324]	@ 0x144
 8025230:	2b00      	cmp	r3, #0
 8025232:	f6bf aedf 	bge.w	8024ff4 <Argus_Cal_GetXtalkVectors+0xe8>
 8025236:	f1c3 0c00 	rsb	ip, r3, #0
 802523a:	2900      	cmp	r1, #0
 802523c:	f43f aee7 	beq.w	802500e <Argus_Cal_GetXtalkVectors+0x102>
 8025240:	2920      	cmp	r1, #32
 8025242:	d823      	bhi.n	802528c <Argus_Cal_GetXtalkVectors+0x380>
 8025244:	1e4b      	subs	r3, r1, #1
 8025246:	fa2c fc03 	lsr.w	ip, ip, r3
 802524a:	f00c 0301 	and.w	r3, ip, #1
 802524e:	eb03 035c 	add.w	r3, r3, ip, lsr #1
 8025252:	425b      	negs	r3, r3
 8025254:	b21b      	sxth	r3, r3
 8025256:	e6da      	b.n	802500e <Argus_Cal_GetXtalkVectors+0x102>
 8025258:	f04f 0c00 	mov.w	ip, #0
 802525c:	e6ae      	b.n	8024fbc <Argus_Cal_GetXtalkVectors+0xb0>
 802525e:	f1cc 0e00 	rsb	lr, ip, #0
 8025262:	2900      	cmp	r1, #0
 8025264:	f43f ae94 	beq.w	8024f90 <Argus_Cal_GetXtalkVectors+0x84>
 8025268:	2920      	cmp	r1, #32
 802526a:	d80c      	bhi.n	8025286 <Argus_Cal_GetXtalkVectors+0x37a>
 802526c:	f101 3cff 	add.w	ip, r1, #4294967295
 8025270:	fa2e fe0c 	lsr.w	lr, lr, ip
 8025274:	f00e 0c01 	and.w	ip, lr, #1
 8025278:	eb0c 0c5e 	add.w	ip, ip, lr, lsr #1
 802527c:	f1cc 0c00 	rsb	ip, ip, #0
 8025280:	fa0f fc8c 	sxth.w	ip, ip
 8025284:	e684      	b.n	8024f90 <Argus_Cal_GetXtalkVectors+0x84>
 8025286:	f04f 0c00 	mov.w	ip, #0
 802528a:	e681      	b.n	8024f90 <Argus_Cal_GetXtalkVectors+0x84>
 802528c:	2300      	movs	r3, #0
 802528e:	e6be      	b.n	802500e <Argus_Cal_GetXtalkVectors+0x102>
 8025290:	2300      	movs	r3, #0
 8025292:	e6a9      	b.n	8024fe8 <Argus_Cal_GetXtalkVectors+0xdc>
 8025294:	f1cc 0e00 	rsb	lr, ip, #0
 8025298:	2900      	cmp	r1, #0
 802529a:	f43f ae63 	beq.w	8024f64 <Argus_Cal_GetXtalkVectors+0x58>
 802529e:	2920      	cmp	r1, #32
 80252a0:	d80c      	bhi.n	80252bc <Argus_Cal_GetXtalkVectors+0x3b0>
 80252a2:	f101 3cff 	add.w	ip, r1, #4294967295
 80252a6:	fa2e fe0c 	lsr.w	lr, lr, ip
 80252aa:	f00e 0c01 	and.w	ip, lr, #1
 80252ae:	eb0c 0c5e 	add.w	ip, ip, lr, lsr #1
 80252b2:	f1cc 0c00 	rsb	ip, ip, #0
 80252b6:	fa0f fc8c 	sxth.w	ip, ip
 80252ba:	e653      	b.n	8024f64 <Argus_Cal_GetXtalkVectors+0x58>
 80252bc:	f04f 0c00 	mov.w	ip, #0
 80252c0:	e650      	b.n	8024f64 <Argus_Cal_GetXtalkVectors+0x58>
 80252c2:	f1cc 0e00 	rsb	lr, ip, #0
 80252c6:	2900      	cmp	r1, #0
 80252c8:	f43f ae36 	beq.w	8024f38 <Argus_Cal_GetXtalkVectors+0x2c>
 80252cc:	2920      	cmp	r1, #32
 80252ce:	d80c      	bhi.n	80252ea <Argus_Cal_GetXtalkVectors+0x3de>
 80252d0:	f101 3cff 	add.w	ip, r1, #4294967295
 80252d4:	fa2e fe0c 	lsr.w	lr, lr, ip
 80252d8:	f00e 0c01 	and.w	ip, lr, #1
 80252dc:	eb0c 0c5e 	add.w	ip, ip, lr, lsr #1
 80252e0:	f1cc 0c00 	rsb	ip, ip, #0
 80252e4:	fa0f fc8c 	sxth.w	ip, ip
 80252e8:	e626      	b.n	8024f38 <Argus_Cal_GetXtalkVectors+0x2c>
 80252ea:	f04f 0c00 	mov.w	ip, #0
 80252ee:	e623      	b.n	8024f38 <Argus_Cal_GetXtalkVectors+0x2c>

080252f0 <Argus_OnGetDefaultCalibration>:
 80252f0:	4770      	bx	lr
 80252f2:	bf00      	nop

080252f4 <Argus_GetPixelRangeOffsets_Callback>:
 80252f4:	2280      	movs	r2, #128	@ 0x80
 80252f6:	2100      	movs	r1, #0
 80252f8:	f004 ba2b 	b.w	8029752 <memset>

080252fc <Argus_Cal_GetInternalPixelRangeOffsets>:
 80252fc:	b570      	push	{r4, r5, r6, lr}
 80252fe:	4604      	mov	r4, r0
 8025300:	2b47      	cmp	r3, #71	@ 0x47
 8025302:	d849      	bhi.n	8025398 <Argus_Cal_GetInternalPixelRangeOffsets+0x9c>
 8025304:	e8df f013 	tbh	[pc, r3, lsl #1]
 8025308:	004b0151 	.word	0x004b0151
 802530c:	004b004b 	.word	0x004b004b
 8025310:	004b0148 	.word	0x004b0148
 8025314:	004b004b 	.word	0x004b004b
 8025318:	00480048 	.word	0x00480048
 802531c:	00480048 	.word	0x00480048
 8025320:	00480048 	.word	0x00480048
 8025324:	00480048 	.word	0x00480048
 8025328:	00480048 	.word	0x00480048
 802532c:	00480048 	.word	0x00480048
 8025330:	00480048 	.word	0x00480048
 8025334:	00480048 	.word	0x00480048
 8025338:	00480048 	.word	0x00480048
 802533c:	00480048 	.word	0x00480048
 8025340:	00480048 	.word	0x00480048
 8025344:	00480048 	.word	0x00480048
 8025348:	00480048 	.word	0x00480048
 802534c:	00480048 	.word	0x00480048
 8025350:	00480048 	.word	0x00480048
 8025354:	00480048 	.word	0x00480048
 8025358:	00480048 	.word	0x00480048
 802535c:	00480048 	.word	0x00480048
 8025360:	00480048 	.word	0x00480048
 8025364:	00480048 	.word	0x00480048
 8025368:	00480048 	.word	0x00480048
 802536c:	00480048 	.word	0x00480048
 8025370:	00480048 	.word	0x00480048
 8025374:	00480048 	.word	0x00480048
 8025378:	00480048 	.word	0x00480048
 802537c:	00480048 	.word	0x00480048
 8025380:	00480048 	.word	0x00480048
 8025384:	00480048 	.word	0x00480048
 8025388:	00480048 	.word	0x00480048
 802538c:	004b0048 	.word	0x004b0048
 8025390:	004b0148 	.word	0x004b0148
 8025394:	004b004b 	.word	0x004b004b
 8025398:	f06f 00c6 	mvn.w	r0, #198	@ 0xc6
 802539c:	bd70      	pop	{r4, r5, r6, pc}
 802539e:	f891 107b 	ldrb.w	r1, [r1, #123]	@ 0x7b
 80253a2:	0989      	lsrs	r1, r1, #6
 80253a4:	2902      	cmp	r1, #2
 80253a6:	f000 8110 	beq.w	80255ca <Argus_Cal_GetInternalPixelRangeOffsets+0x2ce>
 80253aa:	4e8e      	ldr	r6, [pc, #568]	@ (80255e4 <Argus_Cal_GetInternalPixelRangeOffsets+0x2e8>)
 80253ac:	2903      	cmp	r1, #3
 80253ae:	f000 8106 	beq.w	80255be <Argus_Cal_GetInternalPixelRangeOffsets+0x2c2>
 80253b2:	2900      	cmp	r1, #0
 80253b4:	f000 8111 	beq.w	80255da <Argus_Cal_GetInternalPixelRangeOffsets+0x2de>
 80253b8:	2500      	movs	r5, #0
 80253ba:	2280      	movs	r2, #128	@ 0x80
 80253bc:	2100      	movs	r1, #0
 80253be:	4620      	mov	r0, r4
 80253c0:	f004 f9c7 	bl	8029752 <memset>
 80253c4:	2e00      	cmp	r6, #0
 80253c6:	f000 80e5 	beq.w	8025594 <Argus_Cal_GetInternalPixelRangeOffsets+0x298>
 80253ca:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 80253ce:	f936 3015 	ldrsh.w	r3, [r6, r5, lsl #1]
 80253d2:	8023      	strh	r3, [r4, #0]
 80253d4:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 80253d8:	8063      	strh	r3, [r4, #2]
 80253da:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 80253de:	80a3      	strh	r3, [r4, #4]
 80253e0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 80253e4:	80e3      	strh	r3, [r4, #6]
 80253e6:	f9b2 3010 	ldrsh.w	r3, [r2, #16]
 80253ea:	8123      	strh	r3, [r4, #8]
 80253ec:	f9b2 3014 	ldrsh.w	r3, [r2, #20]
 80253f0:	8163      	strh	r3, [r4, #10]
 80253f2:	f9b2 3018 	ldrsh.w	r3, [r2, #24]
 80253f6:	81a3      	strh	r3, [r4, #12]
 80253f8:	f9b2 301c 	ldrsh.w	r3, [r2, #28]
 80253fc:	81e3      	strh	r3, [r4, #14]
 80253fe:	f9b2 3020 	ldrsh.w	r3, [r2, #32]
 8025402:	8223      	strh	r3, [r4, #16]
 8025404:	f9b2 3024 	ldrsh.w	r3, [r2, #36]	@ 0x24
 8025408:	8263      	strh	r3, [r4, #18]
 802540a:	f9b2 3028 	ldrsh.w	r3, [r2, #40]	@ 0x28
 802540e:	82a3      	strh	r3, [r4, #20]
 8025410:	f9b2 302c 	ldrsh.w	r3, [r2, #44]	@ 0x2c
 8025414:	82e3      	strh	r3, [r4, #22]
 8025416:	f9b2 3030 	ldrsh.w	r3, [r2, #48]	@ 0x30
 802541a:	8323      	strh	r3, [r4, #24]
 802541c:	f9b2 3034 	ldrsh.w	r3, [r2, #52]	@ 0x34
 8025420:	8363      	strh	r3, [r4, #26]
 8025422:	f9b2 3038 	ldrsh.w	r3, [r2, #56]	@ 0x38
 8025426:	83a3      	strh	r3, [r4, #28]
 8025428:	f9b2 303c 	ldrsh.w	r3, [r2, #60]	@ 0x3c
 802542c:	83e3      	strh	r3, [r4, #30]
 802542e:	f9b2 3040 	ldrsh.w	r3, [r2, #64]	@ 0x40
 8025432:	8423      	strh	r3, [r4, #32]
 8025434:	f9b2 3044 	ldrsh.w	r3, [r2, #68]	@ 0x44
 8025438:	8463      	strh	r3, [r4, #34]	@ 0x22
 802543a:	f9b2 3048 	ldrsh.w	r3, [r2, #72]	@ 0x48
 802543e:	84a3      	strh	r3, [r4, #36]	@ 0x24
 8025440:	f9b2 304c 	ldrsh.w	r3, [r2, #76]	@ 0x4c
 8025444:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8025446:	f9b2 3050 	ldrsh.w	r3, [r2, #80]	@ 0x50
 802544a:	8523      	strh	r3, [r4, #40]	@ 0x28
 802544c:	f9b2 3054 	ldrsh.w	r3, [r2, #84]	@ 0x54
 8025450:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8025452:	f9b2 3058 	ldrsh.w	r3, [r2, #88]	@ 0x58
 8025456:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8025458:	f9b2 305c 	ldrsh.w	r3, [r2, #92]	@ 0x5c
 802545c:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 802545e:	f9b2 3060 	ldrsh.w	r3, [r2, #96]	@ 0x60
 8025462:	8623      	strh	r3, [r4, #48]	@ 0x30
 8025464:	f9b2 3064 	ldrsh.w	r3, [r2, #100]	@ 0x64
 8025468:	8663      	strh	r3, [r4, #50]	@ 0x32
 802546a:	f9b2 3068 	ldrsh.w	r3, [r2, #104]	@ 0x68
 802546e:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8025470:	f9b2 306c 	ldrsh.w	r3, [r2, #108]	@ 0x6c
 8025474:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8025476:	f9b2 3070 	ldrsh.w	r3, [r2, #112]	@ 0x70
 802547a:	8723      	strh	r3, [r4, #56]	@ 0x38
 802547c:	f9b2 3074 	ldrsh.w	r3, [r2, #116]	@ 0x74
 8025480:	8763      	strh	r3, [r4, #58]	@ 0x3a
 8025482:	f9b2 3078 	ldrsh.w	r3, [r2, #120]	@ 0x78
 8025486:	87a3      	strh	r3, [r4, #60]	@ 0x3c
 8025488:	f9b2 307c 	ldrsh.w	r3, [r2, #124]	@ 0x7c
 802548c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 802548e:	3540      	adds	r5, #64	@ 0x40
 8025490:	eb06 0345 	add.w	r3, r6, r5, lsl #1
 8025494:	f936 2015 	ldrsh.w	r2, [r6, r5, lsl #1]
 8025498:	f8a4 2040 	strh.w	r2, [r4, #64]	@ 0x40
 802549c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80254a0:	f8a4 2042 	strh.w	r2, [r4, #66]	@ 0x42
 80254a4:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80254a8:	f8a4 2044 	strh.w	r2, [r4, #68]	@ 0x44
 80254ac:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80254b0:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 80254b4:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80254b8:	f8a4 2048 	strh.w	r2, [r4, #72]	@ 0x48
 80254bc:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80254c0:	f8a4 204a 	strh.w	r2, [r4, #74]	@ 0x4a
 80254c4:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 80254c8:	f8a4 204c 	strh.w	r2, [r4, #76]	@ 0x4c
 80254cc:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 80254d0:	f8a4 204e 	strh.w	r2, [r4, #78]	@ 0x4e
 80254d4:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 80254d8:	f8a4 2050 	strh.w	r2, [r4, #80]	@ 0x50
 80254dc:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 80254e0:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
 80254e4:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	@ 0x28
 80254e8:	f8a4 2054 	strh.w	r2, [r4, #84]	@ 0x54
 80254ec:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	@ 0x2c
 80254f0:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
 80254f4:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80254f8:	f8a4 2058 	strh.w	r2, [r4, #88]	@ 0x58
 80254fc:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	@ 0x34
 8025500:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 8025504:	f9b3 2038 	ldrsh.w	r2, [r3, #56]	@ 0x38
 8025508:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 802550c:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	@ 0x3c
 8025510:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 8025514:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	@ 0x40
 8025518:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
 802551c:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	@ 0x44
 8025520:	f8a4 2062 	strh.w	r2, [r4, #98]	@ 0x62
 8025524:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	@ 0x48
 8025528:	f8a4 2064 	strh.w	r2, [r4, #100]	@ 0x64
 802552c:	f9b3 204c 	ldrsh.w	r2, [r3, #76]	@ 0x4c
 8025530:	f8a4 2066 	strh.w	r2, [r4, #102]	@ 0x66
 8025534:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	@ 0x50
 8025538:	f8a4 2068 	strh.w	r2, [r4, #104]	@ 0x68
 802553c:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	@ 0x54
 8025540:	f8a4 206a 	strh.w	r2, [r4, #106]	@ 0x6a
 8025544:	f9b3 2058 	ldrsh.w	r2, [r3, #88]	@ 0x58
 8025548:	f8a4 206c 	strh.w	r2, [r4, #108]	@ 0x6c
 802554c:	f9b3 205c 	ldrsh.w	r2, [r3, #92]	@ 0x5c
 8025550:	f8a4 206e 	strh.w	r2, [r4, #110]	@ 0x6e
 8025554:	f9b3 2060 	ldrsh.w	r2, [r3, #96]	@ 0x60
 8025558:	f8a4 2070 	strh.w	r2, [r4, #112]	@ 0x70
 802555c:	f9b3 2064 	ldrsh.w	r2, [r3, #100]	@ 0x64
 8025560:	f8a4 2072 	strh.w	r2, [r4, #114]	@ 0x72
 8025564:	f9b3 2068 	ldrsh.w	r2, [r3, #104]	@ 0x68
 8025568:	f8a4 2074 	strh.w	r2, [r4, #116]	@ 0x74
 802556c:	f9b3 206c 	ldrsh.w	r2, [r3, #108]	@ 0x6c
 8025570:	f8a4 2076 	strh.w	r2, [r4, #118]	@ 0x76
 8025574:	f9b3 2070 	ldrsh.w	r2, [r3, #112]	@ 0x70
 8025578:	f8a4 2078 	strh.w	r2, [r4, #120]	@ 0x78
 802557c:	f9b3 2074 	ldrsh.w	r2, [r3, #116]	@ 0x74
 8025580:	f8a4 207a 	strh.w	r2, [r4, #122]	@ 0x7a
 8025584:	f9b3 2078 	ldrsh.w	r2, [r3, #120]	@ 0x78
 8025588:	f8a4 207c 	strh.w	r2, [r4, #124]	@ 0x7c
 802558c:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	@ 0x7c
 8025590:	f8a4 307e 	strh.w	r3, [r4, #126]	@ 0x7e
 8025594:	2000      	movs	r0, #0
 8025596:	bd70      	pop	{r4, r5, r6, pc}
 8025598:	f891 107b 	ldrb.w	r1, [r1, #123]	@ 0x7b
 802559c:	4e12      	ldr	r6, [pc, #72]	@ (80255e8 <Argus_Cal_GetInternalPixelRangeOffsets+0x2ec>)
 802559e:	0989      	lsrs	r1, r1, #6
 80255a0:	2902      	cmp	r1, #2
 80255a2:	f47f af03 	bne.w	80253ac <Argus_Cal_GetInternalPixelRangeOffsets+0xb0>
 80255a6:	2501      	movs	r5, #1
 80255a8:	e707      	b.n	80253ba <Argus_Cal_GetInternalPixelRangeOffsets+0xbe>
 80255aa:	f891 107b 	ldrb.w	r1, [r1, #123]	@ 0x7b
 80255ae:	0989      	lsrs	r1, r1, #6
 80255b0:	2902      	cmp	r1, #2
 80255b2:	d004      	beq.n	80255be <Argus_Cal_GetInternalPixelRangeOffsets+0x2c2>
 80255b4:	2903      	cmp	r1, #3
 80255b6:	f04f 0600 	mov.w	r6, #0
 80255ba:	f47f aefa 	bne.w	80253b2 <Argus_Cal_GetInternalPixelRangeOffsets+0xb6>
 80255be:	2280      	movs	r2, #128	@ 0x80
 80255c0:	2100      	movs	r1, #0
 80255c2:	4620      	mov	r0, r4
 80255c4:	f004 f8c5 	bl	8029752 <memset>
 80255c8:	e7e4      	b.n	8025594 <Argus_Cal_GetInternalPixelRangeOffsets+0x298>
 80255ca:	2280      	movs	r2, #128	@ 0x80
 80255cc:	2100      	movs	r1, #0
 80255ce:	4620      	mov	r0, r4
 80255d0:	f004 f8bf 	bl	8029752 <memset>
 80255d4:	4e03      	ldr	r6, [pc, #12]	@ (80255e4 <Argus_Cal_GetInternalPixelRangeOffsets+0x2e8>)
 80255d6:	2501      	movs	r5, #1
 80255d8:	e6f7      	b.n	80253ca <Argus_Cal_GetInternalPixelRangeOffsets+0xce>
 80255da:	2280      	movs	r2, #128	@ 0x80
 80255dc:	4620      	mov	r0, r4
 80255de:	f004 f8b8 	bl	8029752 <memset>
 80255e2:	e7d7      	b.n	8025594 <Argus_Cal_GetInternalPixelRangeOffsets+0x298>
 80255e4:	0802f334 	.word	0x0802f334
 80255e8:	0802f434 	.word	0x0802f434

080255ec <Argus_Cal_GetInternalXtalkVectorTable>:
 80255ec:	2b05      	cmp	r3, #5
 80255ee:	f200 80c0 	bhi.w	8025772 <Argus_Cal_GetInternalXtalkVectorTable+0x186>
 80255f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80255f6:	4615      	mov	r5, r2
 80255f8:	4a5f      	ldr	r2, [pc, #380]	@ (8025778 <Argus_Cal_GetInternalXtalkVectorTable+0x18c>)
 80255fa:	f891 80ac 	ldrb.w	r8, [r1, #172]	@ 0xac
 80255fe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8025602:	f891 307b 	ldrb.w	r3, [r1, #123]	@ 0x7b
 8025606:	099e      	lsrs	r6, r3, #6
 8025608:	2e02      	cmp	r6, #2
 802560a:	b083      	sub	sp, #12
 802560c:	4607      	mov	r7, r0
 802560e:	f000 80ae 	beq.w	802576e <Argus_Cal_GetInternalXtalkVectorTable+0x182>
 8025612:	2e03      	cmp	r6, #3
 8025614:	f000 80a8 	beq.w	8025768 <Argus_Cal_GetInternalXtalkVectorTable+0x17c>
 8025618:	2e00      	cmp	r6, #0
 802561a:	f000 80a6 	beq.w	802576a <Argus_Cal_GetInternalXtalkVectorTable+0x17e>
 802561e:	2600      	movs	r6, #0
 8025620:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8025624:	2100      	movs	r1, #0
 8025626:	4638      	mov	r0, r7
 8025628:	f004 f893 	bl	8029752 <memset>
 802562c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8025630:	eb03 0c08 	add.w	ip, r3, r8
 8025634:	f9b5 62ac 	ldrsh.w	r6, [r5, #684]	@ 0x2ac
 8025638:	f895 222a 	ldrb.w	r2, [r5, #554]	@ 0x22a
 802563c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8025640:	f507 79c0 	add.w	r9, r7, #384	@ 0x180
 8025644:	f9b5 72aa 	ldrsh.w	r7, [r5, #682]	@ 0x2aa
 8025648:	9300      	str	r3, [sp, #0]
 802564a:	f895 322b 	ldrb.w	r3, [r5, #555]	@ 0x22b
 802564e:	4279      	negs	r1, r7
 8025650:	f1c6 0e00 	rsb	lr, r6, #0
 8025654:	fb8e e003 	smull	lr, r0, lr, r3
 8025658:	fb81 1a02 	smull	r1, sl, r1, r2
 802565c:	fb86 3803 	smull	r3, r8, r6, r3
 8025660:	fb87 2b02 	smull	r2, fp, r7, r2
 8025664:	9001      	str	r0, [sp, #4]
 8025666:	4640      	mov	r0, r8
 8025668:	ea4f 18d2 	mov.w	r8, r2, lsr #7
 802566c:	ea48 684b 	orr.w	r8, r8, fp, lsl #25
 8025670:	f3c2 1280 	ubfx	r2, r2, #6, #1
 8025674:	4490      	add	r8, r2
 8025676:	09ca      	lsrs	r2, r1, #7
 8025678:	ea42 624a 	orr.w	r2, r2, sl, lsl #25
 802567c:	f341 1180 	sbfx	r1, r1, #6, #1
 8025680:	1a8a      	subs	r2, r1, r2
 8025682:	ea38 0827 	bics.w	r8, r8, r7, asr #32
 8025686:	bf28      	it	cs
 8025688:	4690      	movcs	r8, r2
 802568a:	09da      	lsrs	r2, r3, #7
 802568c:	ea42 6240 	orr.w	r2, r2, r0, lsl #25
 8025690:	f3c3 1780 	ubfx	r7, r3, #6, #1
 8025694:	9801      	ldr	r0, [sp, #4]
 8025696:	4417      	add	r7, r2
 8025698:	ea4f 12de 	mov.w	r2, lr, lsr #7
 802569c:	ea42 6240 	orr.w	r2, r2, r0, lsl #25
 80256a0:	f34e 1380 	sbfx	r3, lr, #6, #1
 80256a4:	1a9b      	subs	r3, r3, r2
 80256a6:	ea37 0726 	bics.w	r7, r7, r6, asr #32
 80256aa:	bf28      	it	cs
 80256ac:	461f      	movcs	r7, r3
 80256ae:	9800      	ldr	r0, [sp, #0]
 80256b0:	b239      	sxth	r1, r7
 80256b2:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 80256b6:	fa0f f688 	sxth.w	r6, r8
 80256ba:	fa1f fe88 	uxth.w	lr, r8
 80256be:	b2bf      	uxth	r7, r7
 80256c0:	f1a0 0380 	sub.w	r3, r0, #128	@ 0x80
 80256c4:	4662      	mov	r2, ip
 80256c6:	e037      	b.n	8025738 <Argus_Cal_GetInternalXtalkVectorTable+0x14c>
 80256c8:	f995 829c 	ldrsb.w	r8, [r5, #668]	@ 0x29c
 80256cc:	f118 0f04 	cmn.w	r8, #4
 80256d0:	d036      	beq.n	8025740 <Argus_Cal_GetInternalXtalkVectorTable+0x154>
 80256d2:	f8b2 8000 	ldrh.w	r8, [r2]
 80256d6:	44f0      	add	r8, lr
 80256d8:	f8a3 8000 	strh.w	r8, [r3]
 80256dc:	f8b2 8002 	ldrh.w	r8, [r2, #2]
 80256e0:	809e      	strh	r6, [r3, #4]
 80256e2:	44b8      	add	r8, r7
 80256e4:	80d9      	strh	r1, [r3, #6]
 80256e6:	f8a3 8002 	strh.w	r8, [r3, #2]
 80256ea:	f8b2 8018 	ldrh.w	r8, [r2, #24]
 80256ee:	44f0      	add	r8, lr
 80256f0:	f8a3 8004 	strh.w	r8, [r3, #4]
 80256f4:	f8b2 801a 	ldrh.w	r8, [r2, #26]
 80256f8:	811e      	strh	r6, [r3, #8]
 80256fa:	44b8      	add	r8, r7
 80256fc:	8159      	strh	r1, [r3, #10]
 80256fe:	f8a3 8006 	strh.w	r8, [r3, #6]
 8025702:	f8b2 8030 	ldrh.w	r8, [r2, #48]	@ 0x30
 8025706:	44f0      	add	r8, lr
 8025708:	f8a3 8008 	strh.w	r8, [r3, #8]
 802570c:	f8b2 8032 	ldrh.w	r8, [r2, #50]	@ 0x32
 8025710:	819e      	strh	r6, [r3, #12]
 8025712:	44b8      	add	r8, r7
 8025714:	81d9      	strh	r1, [r3, #14]
 8025716:	f8a3 800a 	strh.w	r8, [r3, #10]
 802571a:	f8b2 8048 	ldrh.w	r8, [r2, #72]	@ 0x48
 802571e:	44f0      	add	r8, lr
 8025720:	f8a3 800c 	strh.w	r8, [r3, #12]
 8025724:	f8b2 804a 	ldrh.w	r8, [r2, #74]	@ 0x4a
 8025728:	44b8      	add	r8, r7
 802572a:	f8a3 800e 	strh.w	r8, [r3, #14]
 802572e:	3310      	adds	r3, #16
 8025730:	4298      	cmp	r0, r3
 8025732:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8025736:	d00e      	beq.n	8025756 <Argus_Cal_GetInternalXtalkVectorTable+0x16a>
 8025738:	801e      	strh	r6, [r3, #0]
 802573a:	8059      	strh	r1, [r3, #2]
 802573c:	2c00      	cmp	r4, #0
 802573e:	d1c3      	bne.n	80256c8 <Argus_Cal_GetInternalXtalkVectorTable+0xdc>
 8025740:	809e      	strh	r6, [r3, #4]
 8025742:	80d9      	strh	r1, [r3, #6]
 8025744:	811e      	strh	r6, [r3, #8]
 8025746:	8159      	strh	r1, [r3, #10]
 8025748:	819e      	strh	r6, [r3, #12]
 802574a:	81d9      	strh	r1, [r3, #14]
 802574c:	3310      	adds	r3, #16
 802574e:	4298      	cmp	r0, r3
 8025750:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8025754:	d1f0      	bne.n	8025738 <Argus_Cal_GetInternalXtalkVectorTable+0x14c>
 8025756:	3080      	adds	r0, #128	@ 0x80
 8025758:	4581      	cmp	r9, r0
 802575a:	f50c 7c40 	add.w	ip, ip, #768	@ 0x300
 802575e:	d1af      	bne.n	80256c0 <Argus_Cal_GetInternalXtalkVectorTable+0xd4>
 8025760:	2000      	movs	r0, #0
 8025762:	b003      	add	sp, #12
 8025764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025768:	2600      	movs	r6, #0
 802576a:	4634      	mov	r4, r6
 802576c:	e758      	b.n	8025620 <Argus_Cal_GetInternalXtalkVectorTable+0x34>
 802576e:	2601      	movs	r6, #1
 8025770:	e756      	b.n	8025620 <Argus_Cal_GetInternalXtalkVectorTable+0x34>
 8025772:	f06f 00c6 	mvn.w	r0, #198	@ 0xc6
 8025776:	4770      	bx	lr
 8025778:	0802f31c 	.word	0x0802f31c

0802577c <Argus_Cal_GetDefaultCalibration>:
 802577c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025780:	b082      	sub	sp, #8
 8025782:	2902      	cmp	r1, #2
 8025784:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 8025788:	460e      	mov	r6, r1
 802578a:	4604      	mov	r4, r0
 802578c:	4617      	mov	r7, r2
 802578e:	4698      	mov	r8, r3
 8025790:	d96c      	bls.n	802586c <Argus_Cal_GetDefaultCalibration+0xf0>
 8025792:	1f4b      	subs	r3, r1, #5
 8025794:	2b01      	cmp	r3, #1
 8025796:	d86b      	bhi.n	8025870 <Argus_Cal_GetDefaultCalibration+0xf4>
 8025798:	2f07      	cmp	r7, #7
 802579a:	d904      	bls.n	80257a6 <Argus_Cal_GetDefaultCalibration+0x2a>
 802579c:	f1a7 0343 	sub.w	r3, r7, #67	@ 0x43
 80257a0:	2b04      	cmp	r3, #4
 80257a2:	f200 83ac 	bhi.w	8025efe <Argus_Cal_GetDefaultCalibration+0x782>
 80257a6:	f1b8 0f00 	cmp.w	r8, #0
 80257aa:	f000 83a2 	beq.w	8025ef2 <Argus_Cal_GetDefaultCalibration+0x776>
 80257ae:	f108 33ff 	add.w	r3, r8, #4294967295
 80257b2:	2b04      	cmp	r3, #4
 80257b4:	d861      	bhi.n	802587a <Argus_Cal_GetDefaultCalibration+0xfe>
 80257b6:	2d00      	cmp	r5, #0
 80257b8:	d064      	beq.n	8025884 <Argus_Cal_GetDefaultCalibration+0x108>
 80257ba:	1e6b      	subs	r3, r5, #1
 80257bc:	2b04      	cmp	r3, #4
 80257be:	f200 82e7 	bhi.w	8025d90 <Argus_Cal_GetDefaultCalibration+0x614>
 80257c2:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 80257c6:	2100      	movs	r1, #0
 80257c8:	4620      	mov	r0, r4
 80257ca:	f003 ffc2 	bl	8029752 <memset>
 80257ce:	f104 00a2 	add.w	r0, r4, #162	@ 0xa2
 80257d2:	2f47      	cmp	r7, #71	@ 0x47
 80257d4:	f200 8393 	bhi.w	8025efe <Argus_Cal_GetDefaultCalibration+0x782>
 80257d8:	e8df f017 	tbh	[pc, r7, lsl #1]
 80257dc:	03a502eb 	.word	0x03a502eb
 80257e0:	03a503a5 	.word	0x03a503a5
 80257e4:	03a50068 	.word	0x03a50068
 80257e8:	03a503a5 	.word	0x03a503a5
 80257ec:	03910391 	.word	0x03910391
 80257f0:	03910391 	.word	0x03910391
 80257f4:	03910391 	.word	0x03910391
 80257f8:	03910391 	.word	0x03910391
 80257fc:	03910391 	.word	0x03910391
 8025800:	03910391 	.word	0x03910391
 8025804:	03910391 	.word	0x03910391
 8025808:	03910391 	.word	0x03910391
 802580c:	03910391 	.word	0x03910391
 8025810:	03910391 	.word	0x03910391
 8025814:	03910391 	.word	0x03910391
 8025818:	03910391 	.word	0x03910391
 802581c:	03910391 	.word	0x03910391
 8025820:	03910391 	.word	0x03910391
 8025824:	03910391 	.word	0x03910391
 8025828:	03910391 	.word	0x03910391
 802582c:	03910391 	.word	0x03910391
 8025830:	03910391 	.word	0x03910391
 8025834:	03910391 	.word	0x03910391
 8025838:	03910391 	.word	0x03910391
 802583c:	03910391 	.word	0x03910391
 8025840:	03910391 	.word	0x03910391
 8025844:	03910391 	.word	0x03910391
 8025848:	03910391 	.word	0x03910391
 802584c:	03910391 	.word	0x03910391
 8025850:	03910391 	.word	0x03910391
 8025854:	03910391 	.word	0x03910391
 8025858:	03910391 	.word	0x03910391
 802585c:	03910391 	.word	0x03910391
 8025860:	03a50391 	.word	0x03a50391
 8025864:	03a50068 	.word	0x03a50068
 8025868:	03a503a5 	.word	0x03a503a5
 802586c:	2900      	cmp	r1, #0
 802586e:	d193      	bne.n	8025798 <Argus_Cal_GetDefaultCalibration+0x1c>
 8025870:	f06f 0068 	mvn.w	r0, #104	@ 0x68
 8025874:	b002      	add	sp, #8
 8025876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802587a:	f06f 00c5 	mvn.w	r0, #197	@ 0xc5
 802587e:	b002      	add	sp, #8
 8025880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025884:	2f43      	cmp	r7, #67	@ 0x43
 8025886:	f000 8343 	beq.w	8025f10 <Argus_Cal_GetDefaultCalibration+0x794>
 802588a:	f200 8329 	bhi.w	8025ee0 <Argus_Cal_GetDefaultCalibration+0x764>
 802588e:	2f02      	cmp	r7, #2
 8025890:	f240 8283 	bls.w	8025d9a <Argus_Cal_GetDefaultCalibration+0x61e>
 8025894:	2f04      	cmp	r7, #4
 8025896:	f040 834e 	bne.w	8025f36 <Argus_Cal_GetDefaultCalibration+0x7ba>
 802589a:	2503      	movs	r5, #3
 802589c:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 80258a0:	2100      	movs	r1, #0
 80258a2:	4620      	mov	r0, r4
 80258a4:	f003 ff55 	bl	8029752 <memset>
 80258a8:	f104 00a2 	add.w	r0, r4, #162	@ 0xa2
 80258ac:	2100      	movs	r1, #0
 80258ae:	2280      	movs	r2, #128	@ 0x80
 80258b0:	f003 ff4f 	bl	8029752 <memset>
 80258b4:	48c1      	ldr	r0, [pc, #772]	@ (8025bbc <Argus_Cal_GetDefaultCalibration+0x440>)
 80258b6:	f3c6 0140 	ubfx	r1, r6, #1, #1
 80258ba:	ea4f 0e41 	mov.w	lr, r1, lsl #1
 80258be:	f104 03a0 	add.w	r3, r4, #160	@ 0xa0
 80258c2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80258c6:	f04f 0c00 	mov.w	ip, #0
 80258ca:	f931 203c 	ldrsh.w	r2, [r1, ip, lsl #3]
 80258ce:	f823 2f02 	strh.w	r2, [r3, #2]!
 80258d2:	f10c 0c01 	add.w	ip, ip, #1
 80258d6:	f1bc 0f20 	cmp.w	ip, #32
 80258da:	d1f6      	bne.n	80258ca <Argus_Cal_GetDefaultCalibration+0x14e>
 80258dc:	4470      	add	r0, lr
 80258de:	f104 0ce0 	add.w	ip, r4, #224	@ 0xe0
 80258e2:	f504 7290 	add.w	r2, r4, #288	@ 0x120
 80258e6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80258ea:	f82c 3f02 	strh.w	r3, [ip, #2]!
 80258ee:	4562      	cmp	r2, ip
 80258f0:	f100 0008 	add.w	r0, r0, #8
 80258f4:	d1f7      	bne.n	80258e6 <Argus_Cal_GetDefaultCalibration+0x16a>
 80258f6:	f016 0201 	ands.w	r2, r6, #1
 80258fa:	f007 033f 	and.w	r3, r7, #63	@ 0x3f
 80258fe:	f000 8262 	beq.w	8025dc6 <Argus_Cal_GetDefaultCalibration+0x64a>
 8025902:	f44f 4060 	mov.w	r0, #57344	@ 0xe000
 8025906:	2b05      	cmp	r3, #5
 8025908:	80e0      	strh	r0, [r4, #6]
 802590a:	f000 879b 	beq.w	8026844 <Argus_Cal_GetDefaultCalibration+0x10c8>
 802590e:	2b04      	cmp	r3, #4
 8025910:	f000 83be 	beq.w	8026090 <Argus_Cal_GetDefaultCalibration+0x914>
 8025914:	2b03      	cmp	r3, #3
 8025916:	f001 80a3 	beq.w	8026a60 <Argus_Cal_GetDefaultCalibration+0x12e4>
 802591a:	2a00      	cmp	r2, #0
 802591c:	f000 831c 	beq.w	8025f58 <Argus_Cal_GetDefaultCalibration+0x7dc>
 8025920:	f244 610b 	movw	r1, #17931	@ 0x460b
 8025924:	2d01      	cmp	r5, #1
 8025926:	8061      	strh	r1, [r4, #2]
 8025928:	f040 831c 	bne.w	8025f64 <Argus_Cal_GetDefaultCalibration+0x7e8>
 802592c:	f244 6176 	movw	r1, #18038	@ 0x4676
 8025930:	2b05      	cmp	r3, #5
 8025932:	8061      	strh	r1, [r4, #2]
 8025934:	f040 8316 	bne.w	8025f64 <Argus_Cal_GetDefaultCalibration+0x7e8>
 8025938:	2a00      	cmp	r2, #0
 802593a:	bf14      	ite	ne
 802593c:	2133      	movne	r1, #51	@ 0x33
 802593e:	2138      	moveq	r1, #56	@ 0x38
 8025940:	2d01      	cmp	r5, #1
 8025942:	7221      	strb	r1, [r4, #8]
 8025944:	f000 8479 	beq.w	802623a <Argus_Cal_GetDefaultCalibration+0xabe>
 8025948:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 802594c:	7261      	strb	r1, [r4, #9]
 802594e:	2a00      	cmp	r2, #0
 8025950:	bf14      	ite	ne
 8025952:	2135      	movne	r1, #53	@ 0x35
 8025954:	213d      	moveq	r1, #61	@ 0x3d
 8025956:	2d01      	cmp	r5, #1
 8025958:	72a1      	strb	r1, [r4, #10]
 802595a:	d101      	bne.n	8025960 <Argus_Cal_GetDefaultCalibration+0x1e4>
 802595c:	212e      	movs	r1, #46	@ 0x2e
 802595e:	72a1      	strb	r1, [r4, #10]
 8025960:	2a00      	cmp	r2, #0
 8025962:	bf14      	ite	ne
 8025964:	2158      	movne	r1, #88	@ 0x58
 8025966:	2152      	moveq	r1, #82	@ 0x52
 8025968:	2d01      	cmp	r5, #1
 802596a:	72e1      	strb	r1, [r4, #11]
 802596c:	f001 801b 	beq.w	80269a6 <Argus_Cal_GetDefaultCalibration+0x122a>
 8025970:	2a00      	cmp	r2, #0
 8025972:	bf14      	ite	ne
 8025974:	2121      	movne	r1, #33	@ 0x21
 8025976:	2129      	moveq	r1, #41	@ 0x29
 8025978:	2d01      	cmp	r5, #1
 802597a:	7321      	strb	r1, [r4, #12]
 802597c:	f001 8023 	beq.w	80269c6 <Argus_Cal_GetDefaultCalibration+0x124a>
 8025980:	f102 014f 	add.w	r1, r2, #79	@ 0x4f
 8025984:	7361      	strb	r1, [r4, #13]
 8025986:	2a00      	cmp	r2, #0
 8025988:	bf14      	ite	ne
 802598a:	2122      	movne	r1, #34	@ 0x22
 802598c:	2129      	moveq	r1, #41	@ 0x29
 802598e:	2d01      	cmp	r5, #1
 8025990:	73a1      	strb	r1, [r4, #14]
 8025992:	d101      	bne.n	8025998 <Argus_Cal_GetDefaultCalibration+0x21c>
 8025994:	2118      	movs	r1, #24
 8025996:	73a1      	strb	r1, [r4, #14]
 8025998:	2a00      	cmp	r2, #0
 802599a:	bf14      	ite	ne
 802599c:	2127      	movne	r1, #39	@ 0x27
 802599e:	212b      	moveq	r1, #43	@ 0x2b
 80259a0:	2d01      	cmp	r5, #1
 80259a2:	73e1      	strb	r1, [r4, #15]
 80259a4:	d101      	bne.n	80259aa <Argus_Cal_GetDefaultCalibration+0x22e>
 80259a6:	211d      	movs	r1, #29
 80259a8:	73e1      	strb	r1, [r4, #15]
 80259aa:	2a00      	cmp	r2, #0
 80259ac:	bf14      	ite	ne
 80259ae:	2115      	movne	r1, #21
 80259b0:	2120      	moveq	r1, #32
 80259b2:	2d01      	cmp	r5, #1
 80259b4:	7421      	strb	r1, [r4, #16]
 80259b6:	f000 87c8 	beq.w	802694a <Argus_Cal_GetDefaultCalibration+0x11ce>
 80259ba:	2a00      	cmp	r2, #0
 80259bc:	bf14      	ite	ne
 80259be:	2151      	movne	r1, #81	@ 0x51
 80259c0:	2149      	moveq	r1, #73	@ 0x49
 80259c2:	2d01      	cmp	r5, #1
 80259c4:	7461      	strb	r1, [r4, #17]
 80259c6:	f000 87d0 	beq.w	802696a <Argus_Cal_GetDefaultCalibration+0x11ee>
 80259ca:	2a00      	cmp	r2, #0
 80259cc:	bf14      	ite	ne
 80259ce:	2117      	movne	r1, #23
 80259d0:	2120      	moveq	r1, #32
 80259d2:	2d01      	cmp	r5, #1
 80259d4:	74a1      	strb	r1, [r4, #18]
 80259d6:	f000 8789 	beq.w	80268ec <Argus_Cal_GetDefaultCalibration+0x1170>
 80259da:	2a00      	cmp	r2, #0
 80259dc:	bf14      	ite	ne
 80259de:	2126      	movne	r1, #38	@ 0x26
 80259e0:	212b      	moveq	r1, #43	@ 0x2b
 80259e2:	2d01      	cmp	r5, #1
 80259e4:	74e1      	strb	r1, [r4, #19]
 80259e6:	f000 8791 	beq.w	802690c <Argus_Cal_GetDefaultCalibration+0x1190>
 80259ea:	2a00      	cmp	r2, #0
 80259ec:	bf14      	ite	ne
 80259ee:	2114      	movne	r1, #20
 80259f0:	211f      	moveq	r1, #31
 80259f2:	2d01      	cmp	r5, #1
 80259f4:	7521      	strb	r1, [r4, #20]
 80259f6:	f000 876a 	beq.w	80268ce <Argus_Cal_GetDefaultCalibration+0x1152>
 80259fa:	2a00      	cmp	r2, #0
 80259fc:	f001 8052 	beq.w	8026aa4 <Argus_Cal_GetDefaultCalibration+0x1328>
 8025a00:	2151      	movs	r1, #81	@ 0x51
 8025a02:	7561      	strb	r1, [r4, #21]
 8025a04:	2115      	movs	r1, #21
 8025a06:	2d01      	cmp	r5, #1
 8025a08:	75a1      	strb	r1, [r4, #22]
 8025a0a:	f001 8282 	beq.w	8026f12 <Argus_Cal_GetDefaultCalibration+0x1796>
 8025a0e:	2a00      	cmp	r2, #0
 8025a10:	f001 8259 	beq.w	8026ec6 <Argus_Cal_GetDefaultCalibration+0x174a>
 8025a14:	496a      	ldr	r1, [pc, #424]	@ (8025bc0 <Argus_Cal_GetDefaultCalibration+0x444>)
 8025a16:	61a1      	str	r1, [r4, #24]
 8025a18:	2128      	movs	r1, #40	@ 0x28
 8025a1a:	75e1      	strb	r1, [r4, #23]
 8025a1c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8025a20:	8021      	strh	r1, [r4, #0]
 8025a22:	1e19      	subs	r1, r3, #0
 8025a24:	bf18      	it	ne
 8025a26:	2101      	movne	r1, #1
 8025a28:	f884 124c 	strb.w	r1, [r4, #588]	@ 0x24c
 8025a2c:	f884 1258 	strb.w	r1, [r4, #600]	@ 0x258
 8025a30:	4964      	ldr	r1, [pc, #400]	@ (8025bc4 <Argus_Cal_GetDefaultCalibration+0x448>)
 8025a32:	e9c4 1194 	strd	r1, r1, [r4, #592]	@ 0x250
 8025a36:	2110      	movs	r1, #16
 8025a38:	f8a4 124e 	strh.w	r1, [r4, #590]	@ 0x24e
 8025a3c:	219a      	movs	r1, #154	@ 0x9a
 8025a3e:	f884 124d 	strb.w	r1, [r4, #589]	@ 0x24d
 8025a42:	f06f 113c 	mvn.w	r1, #3932220	@ 0x3c003c
 8025a46:	f8c4 125a 	str.w	r1, [r4, #602]	@ 0x25a
 8025a4a:	f644 41cd 	movw	r1, #19661	@ 0x4ccd
 8025a4e:	f8a4 109c 	strh.w	r1, [r4, #156]	@ 0x9c
 8025a52:	2b05      	cmp	r3, #5
 8025a54:	f248 0180 	movw	r1, #32896	@ 0x8080
 8025a58:	f8a4 122a 	strh.w	r1, [r4, #554]	@ 0x22a
 8025a5c:	f000 83a7 	beq.w	80261ae <Argus_Cal_GetDefaultCalibration+0xa32>
 8025a60:	f06f 09a3 	mvn.w	r9, #163	@ 0xa3
 8025a64:	f06f 0ef5 	mvn.w	lr, #245	@ 0xf5
 8025a68:	2b04      	cmp	r3, #4
 8025a6a:	f000 8586 	beq.w	802657a <Argus_Cal_GetDefaultCalibration+0xdfe>
 8025a6e:	2a00      	cmp	r2, #0
 8025a70:	f000 85c9 	beq.w	8026606 <Argus_Cal_GetDefaultCalibration+0xe8a>
 8025a74:	f44f 7135 	mov.w	r1, #724	@ 0x2d4
 8025a78:	2d01      	cmp	r5, #1
 8025a7a:	f8a4 1234 	strh.w	r1, [r4, #564]	@ 0x234
 8025a7e:	f001 819a 	beq.w	8026db6 <Argus_Cal_GetDefaultCalibration+0x163a>
 8025a82:	2b04      	cmp	r3, #4
 8025a84:	f001 8122 	beq.w	8026ccc <Argus_Cal_GetDefaultCalibration+0x1550>
 8025a88:	2a00      	cmp	r2, #0
 8025a8a:	f040 85da 	bne.w	8026642 <Argus_Cal_GetDefaultCalibration+0xec6>
 8025a8e:	f240 2189 	movw	r1, #649	@ 0x289
 8025a92:	2d01      	cmp	r5, #1
 8025a94:	f8a4 1236 	strh.w	r1, [r4, #566]	@ 0x236
 8025a98:	f001 8103 	beq.w	8026ca2 <Argus_Cal_GetDefaultCalibration+0x1526>
 8025a9c:	2b05      	cmp	r3, #5
 8025a9e:	f000 8398 	beq.w	80261d2 <Argus_Cal_GetDefaultCalibration+0xa56>
 8025aa2:	2b04      	cmp	r3, #4
 8025aa4:	f001 811d 	beq.w	8026ce2 <Argus_Cal_GetDefaultCalibration+0x1566>
 8025aa8:	2a00      	cmp	r2, #0
 8025aaa:	f040 85cd 	bne.w	8026648 <Argus_Cal_GetDefaultCalibration+0xecc>
 8025aae:	f240 115b 	movw	r1, #347	@ 0x15b
 8025ab2:	2d01      	cmp	r5, #1
 8025ab4:	f8a4 1238 	strh.w	r1, [r4, #568]	@ 0x238
 8025ab8:	f001 8227 	beq.w	8026f0a <Argus_Cal_GetDefaultCalibration+0x178e>
 8025abc:	2b05      	cmp	r3, #5
 8025abe:	f000 8370 	beq.w	80261a2 <Argus_Cal_GetDefaultCalibration+0xa26>
 8025ac2:	2b04      	cmp	r3, #4
 8025ac4:	f001 8151 	beq.w	8026d6a <Argus_Cal_GetDefaultCalibration+0x15ee>
 8025ac8:	2a00      	cmp	r2, #0
 8025aca:	f040 853c 	bne.w	8026546 <Argus_Cal_GetDefaultCalibration+0xdca>
 8025ace:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8025ad2:	2d01      	cmp	r5, #1
 8025ad4:	f8a4 123a 	strh.w	r1, [r4, #570]	@ 0x23a
 8025ad8:	f001 80e0 	beq.w	8026c9c <Argus_Cal_GetDefaultCalibration+0x1520>
 8025adc:	2b05      	cmp	r3, #5
 8025ade:	f000 838f 	beq.w	8026200 <Argus_Cal_GetDefaultCalibration+0xa84>
 8025ae2:	2b04      	cmp	r3, #4
 8025ae4:	f001 80c9 	beq.w	8026c7a <Argus_Cal_GetDefaultCalibration+0x14fe>
 8025ae8:	2a00      	cmp	r2, #0
 8025aea:	f000 8348 	beq.w	802617e <Argus_Cal_GetDefaultCalibration+0xa02>
 8025aee:	f240 31a6 	movw	r1, #934	@ 0x3a6
 8025af2:	2d01      	cmp	r5, #1
 8025af4:	f8a4 122c 	strh.w	r1, [r4, #556]	@ 0x22c
 8025af8:	f001 8212 	beq.w	8026f20 <Argus_Cal_GetDefaultCalibration+0x17a4>
 8025afc:	2b05      	cmp	r3, #5
 8025afe:	f000 8390 	beq.w	8026222 <Argus_Cal_GetDefaultCalibration+0xaa6>
 8025b02:	2b04      	cmp	r3, #4
 8025b04:	f001 81bb 	beq.w	8026e7e <Argus_Cal_GetDefaultCalibration+0x1702>
 8025b08:	2a00      	cmp	r2, #0
 8025b0a:	f040 85de 	bne.w	80266ca <Argus_Cal_GetDefaultCalibration+0xf4e>
 8025b0e:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8025b12:	2d01      	cmp	r5, #1
 8025b14:	f8a4 122e 	strh.w	r1, [r4, #558]	@ 0x22e
 8025b18:	f001 8096 	beq.w	8026c48 <Argus_Cal_GetDefaultCalibration+0x14cc>
 8025b1c:	2b05      	cmp	r3, #5
 8025b1e:	f000 8364 	beq.w	80261ea <Argus_Cal_GetDefaultCalibration+0xa6e>
 8025b22:	2b04      	cmp	r3, #4
 8025b24:	f001 809e 	beq.w	8026c64 <Argus_Cal_GetDefaultCalibration+0x14e8>
 8025b28:	2a00      	cmp	r2, #0
 8025b2a:	f040 85c1 	bne.w	80266b0 <Argus_Cal_GetDefaultCalibration+0xf34>
 8025b2e:	f240 51a5 	movw	r1, #1445	@ 0x5a5
 8025b32:	2d01      	cmp	r5, #1
 8025b34:	f8a4 1230 	strh.w	r1, [r4, #560]	@ 0x230
 8025b38:	f001 819b 	beq.w	8026e72 <Argus_Cal_GetDefaultCalibration+0x16f6>
 8025b3c:	2b05      	cmp	r3, #5
 8025b3e:	f000 836a 	beq.w	8026216 <Argus_Cal_GetDefaultCalibration+0xa9a>
 8025b42:	2b04      	cmp	r3, #4
 8025b44:	f001 81b3 	beq.w	8026eae <Argus_Cal_GetDefaultCalibration+0x1732>
 8025b48:	2a00      	cmp	r2, #0
 8025b4a:	f040 85d8 	bne.w	80266fe <Argus_Cal_GetDefaultCalibration+0xf82>
 8025b4e:	f240 3196 	movw	r1, #918	@ 0x396
 8025b52:	2d01      	cmp	r5, #1
 8025b54:	f8a4 1232 	strh.w	r1, [r4, #562]	@ 0x232
 8025b58:	f001 818e 	beq.w	8026e78 <Argus_Cal_GetDefaultCalibration+0x16fc>
 8025b5c:	2b05      	cmp	r3, #5
 8025b5e:	f000 834a 	beq.w	80261f6 <Argus_Cal_GetDefaultCalibration+0xa7a>
 8025b62:	2b04      	cmp	r3, #4
 8025b64:	f001 8197 	beq.w	8026e96 <Argus_Cal_GetDefaultCalibration+0x171a>
 8025b68:	2a00      	cmp	r2, #0
 8025b6a:	f040 85bb 	bne.w	80266e4 <Argus_Cal_GetDefaultCalibration+0xf68>
 8025b6e:	2145      	movs	r1, #69	@ 0x45
 8025b70:	2d01      	cmp	r5, #1
 8025b72:	f8a4 1244 	strh.w	r1, [r4, #580]	@ 0x244
 8025b76:	f001 80c8 	beq.w	8026d0a <Argus_Cal_GetDefaultCalibration+0x158e>
 8025b7a:	2b05      	cmp	r3, #5
 8025b7c:	f000 8345 	beq.w	802620a <Argus_Cal_GetDefaultCalibration+0xa8e>
 8025b80:	2b04      	cmp	r3, #4
 8025b82:	f001 80d1 	beq.w	8026d28 <Argus_Cal_GetDefaultCalibration+0x15ac>
 8025b86:	2a00      	cmp	r2, #0
 8025b88:	f040 84c3 	bne.w	8026512 <Argus_Cal_GetDefaultCalibration+0xd96>
 8025b8c:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8025b90:	2d01      	cmp	r5, #1
 8025b92:	f8a4 1246 	strh.w	r1, [r4, #582]	@ 0x246
 8025b96:	f001 81a8 	beq.w	8026eea <Argus_Cal_GetDefaultCalibration+0x176e>
 8025b9a:	2b05      	cmp	r3, #5
 8025b9c:	f000 831f 	beq.w	80261de <Argus_Cal_GetDefaultCalibration+0xa62>
 8025ba0:	2b04      	cmp	r3, #4
 8025ba2:	f001 81a6 	beq.w	8026ef2 <Argus_Cal_GetDefaultCalibration+0x1776>
 8025ba6:	2a00      	cmp	r2, #0
 8025ba8:	f040 85b6 	bne.w	8026718 <Argus_Cal_GetDefaultCalibration+0xf9c>
 8025bac:	f240 2147 	movw	r1, #583	@ 0x247
 8025bb0:	2d01      	cmp	r5, #1
 8025bb2:	f8a4 1248 	strh.w	r1, [r4, #584]	@ 0x248
 8025bb6:	f001 8044 	beq.w	8026c42 <Argus_Cal_GetDefaultCalibration+0x14c6>
 8025bba:	e005      	b.n	8025bc8 <Argus_Cal_GetDefaultCalibration+0x44c>
 8025bbc:	08030e34 	.word	0x08030e34
 8025bc0:	0205711a 	.word	0x0205711a
 8025bc4:	ff5cff0a 	.word	0xff5cff0a
 8025bc8:	2b05      	cmp	r3, #5
 8025bca:	f000 8341 	beq.w	8026250 <Argus_Cal_GetDefaultCalibration+0xad4>
 8025bce:	2b04      	cmp	r3, #4
 8025bd0:	f001 80d6 	beq.w	8026d80 <Argus_Cal_GetDefaultCalibration+0x1604>
 8025bd4:	2a00      	cmp	r2, #0
 8025bd6:	f040 8551 	bne.w	802667c <Argus_Cal_GetDefaultCalibration+0xf00>
 8025bda:	f240 51d3 	movw	r1, #1491	@ 0x5d3
 8025bde:	2d01      	cmp	r5, #1
 8025be0:	f8a4 124a 	strh.w	r1, [r4, #586]	@ 0x24a
 8025be4:	f001 8097 	beq.w	8026d16 <Argus_Cal_GetDefaultCalibration+0x159a>
 8025be8:	2b05      	cmp	r3, #5
 8025bea:	f000 832b 	beq.w	8026244 <Argus_Cal_GetDefaultCalibration+0xac8>
 8025bee:	2b04      	cmp	r3, #4
 8025bf0:	f001 80b0 	beq.w	8026d54 <Argus_Cal_GetDefaultCalibration+0x15d8>
 8025bf4:	2a00      	cmp	r2, #0
 8025bf6:	f040 8534 	bne.w	8026662 <Argus_Cal_GetDefaultCalibration+0xee6>
 8025bfa:	f240 4171 	movw	r1, #1137	@ 0x471
 8025bfe:	2d01      	cmp	r5, #1
 8025c00:	f8a4 123c 	strh.w	r1, [r4, #572]	@ 0x23c
 8025c04:	f001 8084 	beq.w	8026d10 <Argus_Cal_GetDefaultCalibration+0x1594>
 8025c08:	2b05      	cmp	r3, #5
 8025c0a:	f000 838e 	beq.w	802632a <Argus_Cal_GetDefaultCalibration+0xbae>
 8025c0e:	2b04      	cmp	r3, #4
 8025c10:	f001 801d 	beq.w	8026c4e <Argus_Cal_GetDefaultCalibration+0x14d2>
 8025c14:	2a00      	cmp	r2, #0
 8025c16:	f040 853e 	bne.w	8026696 <Argus_Cal_GetDefaultCalibration+0xf1a>
 8025c1a:	f240 3151 	movw	r1, #849	@ 0x351
 8025c1e:	2d01      	cmp	r5, #1
 8025c20:	f8a4 123e 	strh.w	r1, [r4, #574]	@ 0x23e
 8025c24:	f001 807d 	beq.w	8026d22 <Argus_Cal_GetDefaultCalibration+0x15a6>
 8025c28:	2b05      	cmp	r3, #5
 8025c2a:	f000 8300 	beq.w	802622e <Argus_Cal_GetDefaultCalibration+0xab2>
 8025c2e:	2b04      	cmp	r3, #4
 8025c30:	f001 8085 	beq.w	8026d3e <Argus_Cal_GetDefaultCalibration+0x15c2>
 8025c34:	2a00      	cmp	r2, #0
 8025c36:	f040 8479 	bne.w	802652c <Argus_Cal_GetDefaultCalibration+0xdb0>
 8025c3a:	f240 511f 	movw	r1, #1311	@ 0x51f
 8025c3e:	2d01      	cmp	r5, #1
 8025c40:	f8a4 1240 	strh.w	r1, [r4, #576]	@ 0x240
 8025c44:	f001 806a 	beq.w	8026d1c <Argus_Cal_GetDefaultCalibration+0x15a0>
 8025c48:	2b05      	cmp	r3, #5
 8025c4a:	f000 82a4 	beq.w	8026196 <Argus_Cal_GetDefaultCalibration+0xa1a>
 8025c4e:	2b04      	cmp	r3, #4
 8025c50:	f001 80a1 	beq.w	8026d96 <Argus_Cal_GetDefaultCalibration+0x161a>
 8025c54:	2a00      	cmp	r2, #0
 8025c56:	f040 8483 	bne.w	8026560 <Argus_Cal_GetDefaultCalibration+0xde4>
 8025c5a:	f240 31f1 	movw	r1, #1009	@ 0x3f1
 8025c5e:	2d01      	cmp	r5, #1
 8025c60:	f8a4 1242 	strh.w	r1, [r4, #578]	@ 0x242
 8025c64:	f001 813d 	beq.w	8026ee2 <Argus_Cal_GetDefaultCalibration+0x1766>
 8025c68:	2b04      	cmp	r3, #4
 8025c6a:	f000 83e7 	beq.w	802643c <Argus_Cal_GetDefaultCalibration+0xcc0>
 8025c6e:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8025c72:	2b01      	cmp	r3, #1
 8025c74:	f8c4 1222 	str.w	r1, [r4, #546]	@ 0x222
 8025c78:	f040 8370 	bne.w	802635c <Argus_Cal_GetDefaultCalibration+0xbe0>
 8025c7c:	f640 4ccd 	movw	ip, #3277	@ 0xccd
 8025c80:	f1a8 0104 	sub.w	r1, r8, #4
 8025c84:	f8a4 c26a 	strh.w	ip, [r4, #618]	@ 0x26a
 8025c88:	f04f 0c18 	mov.w	ip, #24
 8025c8c:	b2c9      	uxtb	r1, r1
 8025c8e:	f884 c269 	strb.w	ip, [r4, #617]	@ 0x269
 8025c92:	f44f 5cc2 	mov.w	ip, #6208	@ 0x1840
 8025c96:	f8a4 c267 	strh.w	ip, [r4, #615]	@ 0x267
 8025c9a:	2901      	cmp	r1, #1
 8025c9c:	f04f 0c0d 	mov.w	ip, #13
 8025ca0:	f884 c264 	strb.w	ip, [r4, #612]	@ 0x264
 8025ca4:	f240 8236 	bls.w	8026114 <Argus_Cal_GetDefaultCalibration+0x998>
 8025ca8:	f8df c29c 	ldr.w	ip, [pc, #668]	@ 8025f48 <Argus_Cal_GetDefaultCalibration+0x7cc>
 8025cac:	f8c4 c25e 	str.w	ip, [r4, #606]	@ 0x25e
 8025cb0:	f243 0c28 	movw	ip, #12328	@ 0x3028
 8025cb4:	f8a4 c265 	strh.w	ip, [r4, #613]	@ 0x265
 8025cb8:	f44f 4c7a 	mov.w	ip, #64000	@ 0xfa00
 8025cbc:	f8a4 c262 	strh.w	ip, [r4, #610]	@ 0x262
 8025cc0:	2a00      	cmp	r2, #0
 8025cc2:	f000 873b 	beq.w	8026b3c <Argus_Cal_GetDefaultCalibration+0x13c0>
 8025cc6:	f241 3c0c 	movw	ip, #4876	@ 0x130c
 8025cca:	2d01      	cmp	r5, #1
 8025ccc:	f8a4 c274 	strh.w	ip, [r4, #628]	@ 0x274
 8025cd0:	f001 82e5 	beq.w	802729e <Argus_Cal_GetDefaultCalibration+0x1b22>
 8025cd4:	2b04      	cmp	r3, #4
 8025cd6:	f000 83e8 	beq.w	80264aa <Argus_Cal_GetDefaultCalibration+0xd2e>
 8025cda:	2b03      	cmp	r3, #3
 8025cdc:	f000 8372 	beq.w	80263c4 <Argus_Cal_GetDefaultCalibration+0xc48>
 8025ce0:	2a00      	cmp	r2, #0
 8025ce2:	f000 8755 	beq.w	8026b90 <Argus_Cal_GetDefaultCalibration+0x1414>
 8025ce6:	f241 2cca 	movw	ip, #4810	@ 0x12ca
 8025cea:	2d01      	cmp	r5, #1
 8025cec:	f8a4 c276 	strh.w	ip, [r4, #630]	@ 0x276
 8025cf0:	f000 8732 	beq.w	8026b58 <Argus_Cal_GetDefaultCalibration+0x13dc>
 8025cf4:	f241 2c43 	movw	ip, #4675	@ 0x1243
 8025cf8:	f8a4 c278 	strh.w	ip, [r4, #632]	@ 0x278
 8025cfc:	f241 1c65 	movw	ip, #4453	@ 0x1165
 8025d00:	f8a4 c27a 	strh.w	ip, [r4, #634]	@ 0x27a
 8025d04:	f8df c244 	ldr.w	ip, [pc, #580]	@ 8025f4c <Argus_Cal_GetDefaultCalibration+0x7d0>
 8025d08:	f8c4 c26c 	str.w	ip, [r4, #620]	@ 0x26c
 8025d0c:	f04f 0c04 	mov.w	ip, #4
 8025d10:	f884 c270 	strb.w	ip, [r4, #624]	@ 0x270
 8025d14:	f04f 0c02 	mov.w	ip, #2
 8025d18:	2901      	cmp	r1, #1
 8025d1a:	bf8c      	ite	hi
 8025d1c:	2109      	movhi	r1, #9
 8025d1e:	2100      	movls	r1, #0
 8025d20:	f884 1284 	strb.w	r1, [r4, #644]	@ 0x284
 8025d24:	4985      	ldr	r1, [pc, #532]	@ (8025f3c <Argus_Cal_GetDefaultCalibration+0x7c0>)
 8025d26:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8025f50 <Argus_Cal_GetDefaultCalibration+0x7d4>
 8025d2a:	f8c4 1280 	str.w	r1, [r4, #640]	@ 0x280
 8025d2e:	4984      	ldr	r1, [pc, #528]	@ (8025f40 <Argus_Cal_GetDefaultCalibration+0x7c4>)
 8025d30:	f884 c271 	strb.w	ip, [r4, #625]	@ 0x271
 8025d34:	e9c4 a1ac 	strd	sl, r1, [r4, #688]	@ 0x2b0
 8025d38:	f8df c218 	ldr.w	ip, [pc, #536]	@ 8025f54 <Argus_Cal_GetDefaultCalibration+0x7d8>
 8025d3c:	f8c4 c27c 	str.w	ip, [r4, #636]	@ 0x27c
 8025d40:	2125      	movs	r1, #37	@ 0x25
 8025d42:	f244 1cf1 	movw	ip, #16881	@ 0x41f1
 8025d46:	f884 12b8 	strb.w	r1, [r4, #696]	@ 0x2b8
 8025d4a:	2d04      	cmp	r5, #4
 8025d4c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8025d50:	f8a4 c272 	strh.w	ip, [r4, #626]	@ 0x272
 8025d54:	f8a4 12ba 	strh.w	r1, [r4, #698]	@ 0x2ba
 8025d58:	f000 8280 	beq.w	802625c <Argus_Cal_GetDefaultCalibration+0xae0>
 8025d5c:	0773      	lsls	r3, r6, #29
 8025d5e:	bf44      	itt	mi
 8025d60:	2300      	movmi	r3, #0
 8025d62:	f884 3258 	strbmi.w	r3, [r4, #600]	@ 0x258
 8025d66:	f104 001c 	add.w	r0, r4, #28
 8025d6a:	4631      	mov	r1, r6
 8025d6c:	f7ff fac2 	bl	80252f4 <Argus_GetPixelRangeOffsets_Callback>
 8025d70:	4631      	mov	r1, r6
 8025d72:	f504 7091 	add.w	r0, r4, #290	@ 0x122
 8025d76:	f7e0 fb85 	bl	8006484 <Argus_GetCrosstalkVectorTable_Callback>
 8025d7a:	4620      	mov	r0, r4
 8025d7c:	9500      	str	r5, [sp, #0]
 8025d7e:	4643      	mov	r3, r8
 8025d80:	463a      	mov	r2, r7
 8025d82:	4631      	mov	r1, r6
 8025d84:	f7ff fab4 	bl	80252f0 <Argus_OnGetDefaultCalibration>
 8025d88:	2000      	movs	r0, #0
 8025d8a:	b002      	add	sp, #8
 8025d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025d90:	f06f 00c4 	mvn.w	r0, #196	@ 0xc4
 8025d94:	b002      	add	sp, #8
 8025d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025d9a:	2f00      	cmp	r7, #0
 8025d9c:	f040 80b6 	bne.w	8025f0c <Argus_Cal_GetDefaultCalibration+0x790>
 8025da0:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8025da4:	4639      	mov	r1, r7
 8025da6:	4620      	mov	r0, r4
 8025da8:	f003 fcd3 	bl	8029752 <memset>
 8025dac:	2502      	movs	r5, #2
 8025dae:	f104 00a2 	add.w	r0, r4, #162	@ 0xa2
 8025db2:	2280      	movs	r2, #128	@ 0x80
 8025db4:	2100      	movs	r1, #0
 8025db6:	f003 fccc 	bl	8029752 <memset>
 8025dba:	f016 0201 	ands.w	r2, r6, #1
 8025dbe:	f007 033f 	and.w	r3, r7, #63	@ 0x3f
 8025dc2:	f47f ad9e 	bne.w	8025902 <Argus_Cal_GetDefaultCalibration+0x186>
 8025dc6:	f64e 40cd 	movw	r0, #60621	@ 0xeccd
 8025dca:	2b05      	cmp	r3, #5
 8025dcc:	80e0      	strh	r0, [r4, #6]
 8025dce:	f000 8557 	beq.w	8026880 <Argus_Cal_GetDefaultCalibration+0x1104>
 8025dd2:	2b04      	cmp	r3, #4
 8025dd4:	f47f ad9e 	bne.w	8025914 <Argus_Cal_GetDefaultCalibration+0x198>
 8025dd8:	f644 41d8 	movw	r1, #19672	@ 0x4cd8
 8025ddc:	2d01      	cmp	r5, #1
 8025dde:	8061      	strh	r1, [r4, #2]
 8025de0:	f43f ada4 	beq.w	802592c <Argus_Cal_GetDefaultCalibration+0x1b0>
 8025de4:	2113      	movs	r1, #19
 8025de6:	7221      	strb	r1, [r4, #8]
 8025de8:	2a00      	cmp	r2, #0
 8025dea:	f000 8766 	beq.w	8026cba <Argus_Cal_GetDefaultCalibration+0x153e>
 8025dee:	2137      	movs	r1, #55	@ 0x37
 8025df0:	2d01      	cmp	r5, #1
 8025df2:	7261      	strb	r1, [r4, #9]
 8025df4:	f000 8223 	beq.w	802623e <Argus_Cal_GetDefaultCalibration+0xac2>
 8025df8:	210c      	movs	r1, #12
 8025dfa:	72a1      	strb	r1, [r4, #10]
 8025dfc:	2a00      	cmp	r2, #0
 8025dfe:	bf14      	ite	ne
 8025e00:	212e      	movne	r1, #46	@ 0x2e
 8025e02:	f06f 0107 	mvneq.w	r1, #7
 8025e06:	2d01      	cmp	r5, #1
 8025e08:	72e1      	strb	r1, [r4, #11]
 8025e0a:	f000 8648 	beq.w	8026a9e <Argus_Cal_GetDefaultCalibration+0x1322>
 8025e0e:	2a00      	cmp	r2, #0
 8025e10:	bf14      	ite	ne
 8025e12:	f06f 010b 	mvnne.w	r1, #11
 8025e16:	f06f 010f 	mvneq.w	r1, #15
 8025e1a:	2d01      	cmp	r5, #1
 8025e1c:	7321      	strb	r1, [r4, #12]
 8025e1e:	f000 8144 	beq.w	80260aa <Argus_Cal_GetDefaultCalibration+0x92e>
 8025e22:	2a00      	cmp	r2, #0
 8025e24:	f000 8768 	beq.w	8026cf8 <Argus_Cal_GetDefaultCalibration+0x157c>
 8025e28:	2104      	movs	r1, #4
 8025e2a:	2d01      	cmp	r5, #1
 8025e2c:	7361      	strb	r1, [r4, #13]
 8025e2e:	f000 86d9 	beq.w	8026be4 <Argus_Cal_GetDefaultCalibration+0x1468>
 8025e32:	f06f 0115 	mvn.w	r1, #21
 8025e36:	73a1      	strb	r1, [r4, #14]
 8025e38:	2a00      	cmp	r2, #0
 8025e3a:	bf14      	ite	ne
 8025e3c:	f06f 0107 	mvnne.w	r1, #7
 8025e40:	f06f 0128 	mvneq.w	r1, #40	@ 0x28
 8025e44:	2d01      	cmp	r5, #1
 8025e46:	73e1      	strb	r1, [r4, #15]
 8025e48:	f000 86bf 	beq.w	8026bca <Argus_Cal_GetDefaultCalibration+0x144e>
 8025e4c:	2a00      	cmp	r2, #0
 8025e4e:	bf14      	ite	ne
 8025e50:	f06f 011f 	mvnne.w	r1, #31
 8025e54:	f06f 012c 	mvneq.w	r1, #44	@ 0x2c
 8025e58:	2d01      	cmp	r5, #1
 8025e5a:	7421      	strb	r1, [r4, #16]
 8025e5c:	f000 86b2 	beq.w	8026bc4 <Argus_Cal_GetDefaultCalibration+0x1448>
 8025e60:	2a00      	cmp	r2, #0
 8025e62:	bf14      	ite	ne
 8025e64:	f06f 0103 	mvnne.w	r1, #3
 8025e68:	f06f 0110 	mvneq.w	r1, #16
 8025e6c:	2d01      	cmp	r5, #1
 8025e6e:	7461      	strb	r1, [r4, #17]
 8025e70:	f000 86d9 	beq.w	8026c26 <Argus_Cal_GetDefaultCalibration+0x14aa>
 8025e74:	2a00      	cmp	r2, #0
 8025e76:	bf14      	ite	ne
 8025e78:	f06f 0130 	mvnne.w	r1, #48	@ 0x30
 8025e7c:	f06f 0145 	mvneq.w	r1, #69	@ 0x45
 8025e80:	2d01      	cmp	r5, #1
 8025e82:	74a1      	strb	r1, [r4, #18]
 8025e84:	f000 85e9 	beq.w	8026a5a <Argus_Cal_GetDefaultCalibration+0x12de>
 8025e88:	2a00      	cmp	r2, #0
 8025e8a:	bf14      	ite	ne
 8025e8c:	f06f 0106 	mvnne.w	r1, #6
 8025e90:	f06f 0134 	mvneq.w	r1, #52	@ 0x34
 8025e94:	2d01      	cmp	r5, #1
 8025e96:	74e1      	strb	r1, [r4, #19]
 8025e98:	f000 8691 	beq.w	8026bbe <Argus_Cal_GetDefaultCalibration+0x1442>
 8025e9c:	2a00      	cmp	r2, #0
 8025e9e:	bf14      	ite	ne
 8025ea0:	f06f 0125 	mvnne.w	r1, #37	@ 0x25
 8025ea4:	f06f 012c 	mvneq.w	r1, #44	@ 0x2c
 8025ea8:	2d01      	cmp	r5, #1
 8025eaa:	7521      	strb	r1, [r4, #20]
 8025eac:	f000 8112 	beq.w	80260d4 <Argus_Cal_GetDefaultCalibration+0x958>
 8025eb0:	2a00      	cmp	r2, #0
 8025eb2:	f000 86f9 	beq.w	8026ca8 <Argus_Cal_GetDefaultCalibration+0x152c>
 8025eb6:	21f7      	movs	r1, #247	@ 0xf7
 8025eb8:	2d01      	cmp	r5, #1
 8025eba:	7561      	strb	r1, [r4, #21]
 8025ebc:	f000 8114 	beq.w	80260e8 <Argus_Cal_GetDefaultCalibration+0x96c>
 8025ec0:	f06f 0130 	mvn.w	r1, #48	@ 0x30
 8025ec4:	75a1      	strb	r1, [r4, #22]
 8025ec6:	2a00      	cmp	r2, #0
 8025ec8:	bf14      	ite	ne
 8025eca:	f06f 010f 	mvnne.w	r1, #15
 8025ece:	f06f 0140 	mvneq.w	r1, #64	@ 0x40
 8025ed2:	2d01      	cmp	r5, #1
 8025ed4:	75e1      	strb	r1, [r4, #23]
 8025ed6:	f040 80af 	bne.w	8026038 <Argus_Cal_GetDefaultCalibration+0x8bc>
 8025eda:	2122      	movs	r1, #34	@ 0x22
 8025edc:	75e1      	strb	r1, [r4, #23]
 8025ede:	e0ab      	b.n	8026038 <Argus_Cal_GetDefaultCalibration+0x8bc>
 8025ee0:	2f44      	cmp	r7, #68	@ 0x44
 8025ee2:	d011      	beq.n	8025f08 <Argus_Cal_GetDefaultCalibration+0x78c>
 8025ee4:	f1a7 0345 	sub.w	r3, r7, #69	@ 0x45
 8025ee8:	2b02      	cmp	r3, #2
 8025eea:	bf94      	ite	ls
 8025eec:	2504      	movls	r5, #4
 8025eee:	2502      	movhi	r5, #2
 8025ef0:	e467      	b.n	80257c2 <Argus_Cal_GetDefaultCalibration+0x46>
 8025ef2:	f04f 0803 	mov.w	r8, #3
 8025ef6:	2d00      	cmp	r5, #0
 8025ef8:	f47f ac5f 	bne.w	80257ba <Argus_Cal_GetDefaultCalibration+0x3e>
 8025efc:	e4c2      	b.n	8025884 <Argus_Cal_GetDefaultCalibration+0x108>
 8025efe:	f06f 00c6 	mvn.w	r0, #198	@ 0xc6
 8025f02:	b002      	add	sp, #8
 8025f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025f08:	2505      	movs	r5, #5
 8025f0a:	e4c7      	b.n	802589c <Argus_Cal_GetDefaultCalibration+0x120>
 8025f0c:	2501      	movs	r5, #1
 8025f0e:	e458      	b.n	80257c2 <Argus_Cal_GetDefaultCalibration+0x46>
 8025f10:	4629      	mov	r1, r5
 8025f12:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8025f16:	4620      	mov	r0, r4
 8025f18:	f003 fc1b 	bl	8029752 <memset>
 8025f1c:	2504      	movs	r5, #4
 8025f1e:	4809      	ldr	r0, [pc, #36]	@ (8025f44 <Argus_Cal_GetDefaultCalibration+0x7c8>)
 8025f20:	f3c6 0140 	ubfx	r1, r6, #1, #1
 8025f24:	e4c9      	b.n	80258ba <Argus_Cal_GetDefaultCalibration+0x13e>
 8025f26:	2100      	movs	r1, #0
 8025f28:	2280      	movs	r2, #128	@ 0x80
 8025f2a:	f003 fc12 	bl	8029752 <memset>
 8025f2e:	4805      	ldr	r0, [pc, #20]	@ (8025f44 <Argus_Cal_GetDefaultCalibration+0x7c8>)
 8025f30:	f3c6 0140 	ubfx	r1, r6, #1, #1
 8025f34:	e4c1      	b.n	80258ba <Argus_Cal_GetDefaultCalibration+0x13e>
 8025f36:	2502      	movs	r5, #2
 8025f38:	e443      	b.n	80257c2 <Argus_Cal_GetDefaultCalibration+0x46>
 8025f3a:	bf00      	nop
 8025f3c:	06400040 	.word	0x06400040
 8025f40:	02300100 	.word	0x02300100
 8025f44:	08030d34 	.word	0x08030d34
 8025f48:	01e0b860 	.word	0x01e0b860
 8025f4c:	11030c30 	.word	0x11030c30
 8025f50:	01401388 	.word	0x01401388
 8025f54:	60009560 	.word	0x60009560
 8025f58:	f244 71e5 	movw	r1, #18405	@ 0x47e5
 8025f5c:	2d01      	cmp	r5, #1
 8025f5e:	8061      	strh	r1, [r4, #2]
 8025f60:	f001 818d 	beq.w	802727e <Argus_Cal_GetDefaultCalibration+0x1b02>
 8025f64:	2b04      	cmp	r3, #4
 8025f66:	f000 8478 	beq.w	802685a <Argus_Cal_GetDefaultCalibration+0x10de>
 8025f6a:	2b03      	cmp	r3, #3
 8025f6c:	f001 8180 	beq.w	8027270 <Argus_Cal_GetDefaultCalibration+0x1af4>
 8025f70:	2a00      	cmp	r2, #0
 8025f72:	f000 861c 	beq.w	8026bae <Argus_Cal_GetDefaultCalibration+0x1432>
 8025f76:	212d      	movs	r1, #45	@ 0x2d
 8025f78:	2d01      	cmp	r5, #1
 8025f7a:	7221      	strb	r1, [r4, #8]
 8025f7c:	f000 8472 	beq.w	8026864 <Argus_Cal_GetDefaultCalibration+0x10e8>
 8025f80:	216c      	movs	r1, #108	@ 0x6c
 8025f82:	7261      	strb	r1, [r4, #9]
 8025f84:	2b05      	cmp	r3, #5
 8025f86:	f43f ace2 	beq.w	802594e <Argus_Cal_GetDefaultCalibration+0x1d2>
 8025f8a:	2b04      	cmp	r3, #4
 8025f8c:	f000 87d1 	beq.w	8026f32 <Argus_Cal_GetDefaultCalibration+0x17b6>
 8025f90:	2b03      	cmp	r3, #3
 8025f92:	f001 8160 	beq.w	8027256 <Argus_Cal_GetDefaultCalibration+0x1ada>
 8025f96:	2a00      	cmp	r2, #0
 8025f98:	bf14      	ite	ne
 8025f9a:	213e      	movne	r1, #62	@ 0x3e
 8025f9c:	213b      	moveq	r1, #59	@ 0x3b
 8025f9e:	2d01      	cmp	r5, #1
 8025fa0:	72a1      	strb	r1, [r4, #10]
 8025fa2:	f000 84f3 	beq.w	802698c <Argus_Cal_GetDefaultCalibration+0x1210>
 8025fa6:	2a00      	cmp	r2, #0
 8025fa8:	f000 85a1 	beq.w	8026aee <Argus_Cal_GetDefaultCalibration+0x1372>
 8025fac:	2166      	movs	r1, #102	@ 0x66
 8025fae:	72e1      	strb	r1, [r4, #11]
 8025fb0:	211b      	movs	r1, #27
 8025fb2:	7321      	strb	r1, [r4, #12]
 8025fb4:	2b04      	cmp	r3, #4
 8025fb6:	f43f af34 	beq.w	8025e22 <Argus_Cal_GetDefaultCalibration+0x6a6>
 8025fba:	2b03      	cmp	r3, #3
 8025fbc:	f000 8520 	beq.w	8026a00 <Argus_Cal_GetDefaultCalibration+0x1284>
 8025fc0:	2a00      	cmp	r2, #0
 8025fc2:	bf14      	ite	ne
 8025fc4:	2147      	movne	r1, #71	@ 0x47
 8025fc6:	2149      	moveq	r1, #73	@ 0x49
 8025fc8:	2d01      	cmp	r5, #1
 8025fca:	7361      	strb	r1, [r4, #13]
 8025fcc:	f000 861f 	beq.w	8026c0e <Argus_Cal_GetDefaultCalibration+0x1492>
 8025fd0:	f1c2 0127 	rsb	r1, r2, #39	@ 0x27
 8025fd4:	73a1      	strb	r1, [r4, #14]
 8025fd6:	2b03      	cmp	r3, #3
 8025fd8:	f000 851c 	beq.w	8026a14 <Argus_Cal_GetDefaultCalibration+0x1298>
 8025fdc:	2a00      	cmp	r2, #0
 8025fde:	bf14      	ite	ne
 8025fe0:	2133      	movne	r1, #51	@ 0x33
 8025fe2:	2135      	moveq	r1, #53	@ 0x35
 8025fe4:	2d01      	cmp	r5, #1
 8025fe6:	73e1      	strb	r1, [r4, #15]
 8025fe8:	f000 84a6 	beq.w	8026938 <Argus_Cal_GetDefaultCalibration+0x11bc>
 8025fec:	2a00      	cmp	r2, #0
 8025fee:	f000 8595 	beq.w	8026b1c <Argus_Cal_GetDefaultCalibration+0x13a0>
 8025ff2:	210e      	movs	r1, #14
 8025ff4:	7421      	strb	r1, [r4, #16]
 8025ff6:	2146      	movs	r1, #70	@ 0x46
 8025ff8:	7461      	strb	r1, [r4, #17]
 8025ffa:	f1c2 0116 	rsb	r1, r2, #22
 8025ffe:	74a1      	strb	r1, [r4, #18]
 8026000:	2a00      	cmp	r2, #0
 8026002:	f000 8594 	beq.w	8026b2e <Argus_Cal_GetDefaultCalibration+0x13b2>
 8026006:	2133      	movs	r1, #51	@ 0x33
 8026008:	74e1      	strb	r1, [r4, #19]
 802600a:	210e      	movs	r1, #14
 802600c:	7521      	strb	r1, [r4, #20]
 802600e:	2148      	movs	r1, #72	@ 0x48
 8026010:	7561      	strb	r1, [r4, #21]
 8026012:	2a00      	cmp	r2, #0
 8026014:	f000 8574 	beq.w	8026b00 <Argus_Cal_GetDefaultCalibration+0x1384>
 8026018:	2114      	movs	r1, #20
 802601a:	75a1      	strb	r1, [r4, #22]
 802601c:	2b04      	cmp	r3, #4
 802601e:	f43f af52 	beq.w	8025ec6 <Argus_Cal_GetDefaultCalibration+0x74a>
 8026022:	2b03      	cmp	r3, #3
 8026024:	f000 84e2 	beq.w	80269ec <Argus_Cal_GetDefaultCalibration+0x1270>
 8026028:	2a00      	cmp	r2, #0
 802602a:	bf14      	ite	ne
 802602c:	2133      	movne	r1, #51	@ 0x33
 802602e:	2138      	moveq	r1, #56	@ 0x38
 8026030:	2d01      	cmp	r5, #1
 8026032:	75e1      	strb	r1, [r4, #23]
 8026034:	f000 8778 	beq.w	8026f28 <Argus_Cal_GetDefaultCalibration+0x17ac>
 8026038:	49bf      	ldr	r1, [pc, #764]	@ (8026338 <Argus_Cal_GetDefaultCalibration+0xbbc>)
 802603a:	61a1      	str	r1, [r4, #24]
 802603c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8026040:	8021      	strh	r1, [r4, #0]
 8026042:	1e19      	subs	r1, r3, #0
 8026044:	bf18      	it	ne
 8026046:	2101      	movne	r1, #1
 8026048:	f884 124c 	strb.w	r1, [r4, #588]	@ 0x24c
 802604c:	2a00      	cmp	r2, #0
 802604e:	f47f aced 	bne.w	8025a2c <Argus_Cal_GetDefaultCalibration+0x2b0>
 8026052:	f884 1258 	strb.w	r1, [r4, #600]	@ 0x258
 8026056:	49b9      	ldr	r1, [pc, #740]	@ (802633c <Argus_Cal_GetDefaultCalibration+0xbc0>)
 8026058:	e9c4 1194 	strd	r1, r1, [r4, #592]	@ 0x250
 802605c:	2110      	movs	r1, #16
 802605e:	f8a4 124e 	strh.w	r1, [r4, #590]	@ 0x24e
 8026062:	219a      	movs	r1, #154	@ 0x9a
 8026064:	f884 124d 	strb.w	r1, [r4, #589]	@ 0x24d
 8026068:	f06f 1128 	mvn.w	r1, #2621480	@ 0x280028
 802606c:	f8c4 125a 	str.w	r1, [r4, #602]	@ 0x25a
 8026070:	f246 6166 	movw	r1, #26214	@ 0x6666
 8026074:	f8a4 109c 	strh.w	r1, [r4, #156]	@ 0x9c
 8026078:	2b05      	cmp	r3, #5
 802607a:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 802607e:	f8a4 122a 	strh.w	r1, [r4, #554]	@ 0x22a
 8026082:	f000 8403 	beq.w	802688c <Argus_Cal_GetDefaultCalibration+0x1110>
 8026086:	f06f 0938 	mvn.w	r9, #56	@ 0x38
 802608a:	f06f 0ecc 	mvn.w	lr, #204	@ 0xcc
 802608e:	e4eb      	b.n	8025a68 <Argus_Cal_GetDefaultCalibration+0x2ec>
 8026090:	f644 118a 	movw	r1, #18826	@ 0x498a
 8026094:	e6a2      	b.n	8025ddc <Argus_Cal_GetDefaultCalibration+0x660>
 8026096:	2a00      	cmp	r2, #0
 8026098:	bf14      	ite	ne
 802609a:	f06f 0115 	mvnne.w	r1, #21
 802609e:	f06f 011e 	mvneq.w	r1, #30
 80260a2:	2d01      	cmp	r5, #1
 80260a4:	7321      	strb	r1, [r4, #12]
 80260a6:	f040 84ab 	bne.w	8026a00 <Argus_Cal_GetDefaultCalibration+0x1284>
 80260aa:	21fe      	movs	r1, #254	@ 0xfe
 80260ac:	7321      	strb	r1, [r4, #12]
 80260ae:	e781      	b.n	8025fb4 <Argus_Cal_GetDefaultCalibration+0x838>
 80260b0:	2a00      	cmp	r2, #0
 80260b2:	bf14      	ite	ne
 80260b4:	212d      	movne	r1, #45	@ 0x2d
 80260b6:	2130      	moveq	r1, #48	@ 0x30
 80260b8:	2d01      	cmp	r5, #1
 80260ba:	74e1      	strb	r1, [r4, #19]
 80260bc:	f000 857f 	beq.w	8026bbe <Argus_Cal_GetDefaultCalibration+0x1442>
 80260c0:	2a00      	cmp	r2, #0
 80260c2:	bf14      	ite	ne
 80260c4:	f06f 0125 	mvnne.w	r1, #37	@ 0x25
 80260c8:	f06f 0130 	mvneq.w	r1, #48	@ 0x30
 80260cc:	2d01      	cmp	r5, #1
 80260ce:	7521      	strb	r1, [r4, #20]
 80260d0:	f040 8482 	bne.w	80269d8 <Argus_Cal_GetDefaultCalibration+0x125c>
 80260d4:	21f2      	movs	r1, #242	@ 0xf2
 80260d6:	7521      	strb	r1, [r4, #20]
 80260d8:	2b04      	cmp	r3, #4
 80260da:	f43f aee9 	beq.w	8025eb0 <Argus_Cal_GetDefaultCalibration+0x734>
 80260de:	2b03      	cmp	r3, #3
 80260e0:	f000 847a 	beq.w	80269d8 <Argus_Cal_GetDefaultCalibration+0x125c>
 80260e4:	2148      	movs	r1, #72	@ 0x48
 80260e6:	7561      	strb	r1, [r4, #21]
 80260e8:	211f      	movs	r1, #31
 80260ea:	2b05      	cmp	r3, #5
 80260ec:	7561      	strb	r1, [r4, #21]
 80260ee:	d104      	bne.n	80260fa <Argus_Cal_GetDefaultCalibration+0x97e>
 80260f0:	2a00      	cmp	r2, #0
 80260f2:	f47f ac87 	bne.w	8025a04 <Argus_Cal_GetDefaultCalibration+0x288>
 80260f6:	211e      	movs	r1, #30
 80260f8:	e485      	b.n	8025a06 <Argus_Cal_GetDefaultCalibration+0x28a>
 80260fa:	2b04      	cmp	r3, #4
 80260fc:	f000 8725 	beq.w	8026f4a <Argus_Cal_GetDefaultCalibration+0x17ce>
 8026100:	2b03      	cmp	r3, #3
 8026102:	f001 80c0 	beq.w	8027286 <Argus_Cal_GetDefaultCalibration+0x1b0a>
 8026106:	2a00      	cmp	r2, #0
 8026108:	f000 84fa 	beq.w	8026b00 <Argus_Cal_GetDefaultCalibration+0x1384>
 802610c:	f1c2 010e 	rsb	r1, r2, #14
 8026110:	75a1      	strb	r1, [r4, #22]
 8026112:	e783      	b.n	802601c <Argus_Cal_GetDefaultCalibration+0x8a0>
 8026114:	f8df c23c 	ldr.w	ip, [pc, #572]	@ 8026354 <Argus_Cal_GetDefaultCalibration+0xbd8>
 8026118:	f8c4 c25e 	str.w	ip, [r4, #606]	@ 0x25e
 802611c:	f04f 0c07 	mov.w	ip, #7
 8026120:	f884 c264 	strb.w	ip, [r4, #612]	@ 0x264
 8026124:	f243 0c28 	movw	ip, #12328	@ 0x3028
 8026128:	f8a4 c265 	strh.w	ip, [r4, #613]	@ 0x265
 802612c:	2b05      	cmp	r3, #5
 802612e:	f44f 4c7a 	mov.w	ip, #64000	@ 0xfa00
 8026132:	f8a4 c262 	strh.w	ip, [r4, #610]	@ 0x262
 8026136:	f040 832a 	bne.w	802678e <Argus_Cal_GetDefaultCalibration+0x1012>
 802613a:	f241 3c5e 	movw	ip, #4958	@ 0x135e
 802613e:	f241 2aa3 	movw	sl, #4771	@ 0x12a3
 8026142:	2a00      	cmp	r2, #0
 8026144:	bf08      	it	eq
 8026146:	46d4      	moveq	ip, sl
 8026148:	2d01      	cmp	r5, #1
 802614a:	f8a4 c274 	strh.w	ip, [r4, #628]	@ 0x274
 802614e:	f000 830a 	beq.w	8026766 <Argus_Cal_GetDefaultCalibration+0xfea>
 8026152:	2a00      	cmp	r2, #0
 8026154:	f000 830e 	beq.w	8026774 <Argus_Cal_GetDefaultCalibration+0xff8>
 8026158:	f241 3c3b 	movw	ip, #4923	@ 0x133b
 802615c:	f8a4 c276 	strh.w	ip, [r4, #630]	@ 0x276
 8026160:	f241 3c4d 	movw	ip, #4941	@ 0x134d
 8026164:	2d01      	cmp	r5, #1
 8026166:	f8a4 c278 	strh.w	ip, [r4, #632]	@ 0x278
 802616a:	f000 82e9 	beq.w	8026740 <Argus_Cal_GetDefaultCalibration+0xfc4>
 802616e:	2a00      	cmp	r2, #0
 8026170:	f000 858e 	beq.w	8026c90 <Argus_Cal_GetDefaultCalibration+0x1514>
 8026174:	f241 3c44 	movw	ip, #4932	@ 0x1344
 8026178:	f8a4 c27a 	strh.w	ip, [r4, #634]	@ 0x27a
 802617c:	e5c2      	b.n	8025d04 <Argus_Cal_GetDefaultCalibration+0x588>
 802617e:	f240 4133 	movw	r1, #1075	@ 0x433
 8026182:	2d01      	cmp	r5, #1
 8026184:	f8a4 122c 	strh.w	r1, [r4, #556]	@ 0x22c
 8026188:	f47f acb8 	bne.w	8025afc <Argus_Cal_GetDefaultCalibration+0x380>
 802618c:	f44f 7150 	mov.w	r1, #832	@ 0x340
 8026190:	f8a4 122c 	strh.w	r1, [r4, #556]	@ 0x22c
 8026194:	e4b2      	b.n	8025afc <Argus_Cal_GetDefaultCalibration+0x380>
 8026196:	2a00      	cmp	r2, #0
 8026198:	f040 838d 	bne.w	80268b6 <Argus_Cal_GetDefaultCalibration+0x113a>
 802619c:	f44f 7162 	mov.w	r1, #904	@ 0x388
 80261a0:	e55d      	b.n	8025c5e <Argus_Cal_GetDefaultCalibration+0x4e2>
 80261a2:	2a00      	cmp	r2, #0
 80261a4:	f040 8381 	bne.w	80268aa <Argus_Cal_GetDefaultCalibration+0x112e>
 80261a8:	f240 31a9 	movw	r1, #937	@ 0x3a9
 80261ac:	e491      	b.n	8025ad2 <Argus_Cal_GetDefaultCalibration+0x356>
 80261ae:	f240 21a3 	movw	r1, #675	@ 0x2a3
 80261b2:	2d01      	cmp	r5, #1
 80261b4:	f8a4 1234 	strh.w	r1, [r4, #564]	@ 0x234
 80261b8:	f000 85f9 	beq.w	8026dae <Argus_Cal_GetDefaultCalibration+0x1632>
 80261bc:	f06f 0ef5 	mvn.w	lr, #245	@ 0xf5
 80261c0:	f06f 09a3 	mvn.w	r9, #163	@ 0xa3
 80261c4:	2a00      	cmp	r2, #0
 80261c6:	f000 836c 	beq.w	80268a2 <Argus_Cal_GetDefaultCalibration+0x1126>
 80261ca:	f640 0138 	movw	r1, #2104	@ 0x838
 80261ce:	f8a4 1236 	strh.w	r1, [r4, #566]	@ 0x236
 80261d2:	2a00      	cmp	r2, #0
 80261d4:	f040 836c 	bne.w	80268b0 <Argus_Cal_GetDefaultCalibration+0x1134>
 80261d8:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 80261dc:	e469      	b.n	8025ab2 <Argus_Cal_GetDefaultCalibration+0x336>
 80261de:	2a00      	cmp	r2, #0
 80261e0:	f040 82df 	bne.w	80267a2 <Argus_Cal_GetDefaultCalibration+0x1026>
 80261e4:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80261e8:	e4e2      	b.n	8025bb0 <Argus_Cal_GetDefaultCalibration+0x434>
 80261ea:	2a00      	cmp	r2, #0
 80261ec:	f040 836c 	bne.w	80268c8 <Argus_Cal_GetDefaultCalibration+0x114c>
 80261f0:	f240 5125 	movw	r1, #1317	@ 0x525
 80261f4:	e49d      	b.n	8025b32 <Argus_Cal_GetDefaultCalibration+0x3b6>
 80261f6:	2a00      	cmp	r2, #0
 80261f8:	f040 82cd 	bne.w	8026796 <Argus_Cal_GetDefaultCalibration+0x101a>
 80261fc:	21a7      	movs	r1, #167	@ 0xa7
 80261fe:	e4b7      	b.n	8025b70 <Argus_Cal_GetDefaultCalibration+0x3f4>
 8026200:	2a00      	cmp	r2, #0
 8026202:	d0bc      	beq.n	802617e <Argus_Cal_GetDefaultCalibration+0xa02>
 8026204:	f240 314a 	movw	r1, #842	@ 0x34a
 8026208:	e473      	b.n	8025af2 <Argus_Cal_GetDefaultCalibration+0x376>
 802620a:	2a00      	cmp	r2, #0
 802620c:	f040 8359 	bne.w	80268c2 <Argus_Cal_GetDefaultCalibration+0x1146>
 8026210:	f240 31b3 	movw	r1, #947	@ 0x3b3
 8026214:	e4bc      	b.n	8025b90 <Argus_Cal_GetDefaultCalibration+0x414>
 8026216:	2a00      	cmp	r2, #0
 8026218:	f040 8350 	bne.w	80268bc <Argus_Cal_GetDefaultCalibration+0x1140>
 802621c:	f240 21c7 	movw	r1, #711	@ 0x2c7
 8026220:	e497      	b.n	8025b52 <Argus_Cal_GetDefaultCalibration+0x3d6>
 8026222:	2a00      	cmp	r2, #0
 8026224:	f040 82c3 	bne.w	80267ae <Argus_Cal_GetDefaultCalibration+0x1032>
 8026228:	f44f 7127 	mov.w	r1, #668	@ 0x29c
 802622c:	e471      	b.n	8025b12 <Argus_Cal_GetDefaultCalibration+0x396>
 802622e:	2a00      	cmp	r2, #0
 8026230:	f040 8329 	bne.w	8026886 <Argus_Cal_GetDefaultCalibration+0x110a>
 8026234:	f240 4192 	movw	r1, #1170	@ 0x492
 8026238:	e501      	b.n	8025c3e <Argus_Cal_GetDefaultCalibration+0x4c2>
 802623a:	2117      	movs	r1, #23
 802623c:	7221      	strb	r1, [r4, #8]
 802623e:	214a      	movs	r1, #74	@ 0x4a
 8026240:	7261      	strb	r1, [r4, #9]
 8026242:	e69f      	b.n	8025f84 <Argus_Cal_GetDefaultCalibration+0x808>
 8026244:	2a00      	cmp	r2, #0
 8026246:	f040 82a9 	bne.w	802679c <Argus_Cal_GetDefaultCalibration+0x1020>
 802624a:	f240 31de 	movw	r1, #990	@ 0x3de
 802624e:	e4d6      	b.n	8025bfe <Argus_Cal_GetDefaultCalibration+0x482>
 8026250:	2a00      	cmp	r2, #0
 8026252:	f040 82ff 	bne.w	8026854 <Argus_Cal_GetDefaultCalibration+0x10d8>
 8026256:	f240 5181 	movw	r1, #1409	@ 0x581
 802625a:	e4c0      	b.n	8025bde <Argus_Cal_GetDefaultCalibration+0x462>
 802625c:	2b03      	cmp	r3, #3
 802625e:	f000 85bd 	beq.w	8026ddc <Argus_Cal_GetDefaultCalibration+0x1660>
 8026262:	2100      	movs	r1, #0
 8026264:	2b05      	cmp	r3, #5
 8026266:	80e0      	strh	r0, [r4, #6]
 8026268:	80a1      	strh	r1, [r4, #4]
 802626a:	f040 841d 	bne.w	8026aa8 <Argus_Cal_GetDefaultCalibration+0x132c>
 802626e:	2a00      	cmp	r2, #0
 8026270:	f000 8743 	beq.w	80270fa <Argus_Cal_GetDefaultCalibration+0x197e>
 8026274:	4932      	ldr	r1, [pc, #200]	@ (8026340 <Argus_Cal_GetDefaultCalibration+0xbc4>)
 8026276:	f8df c0e0 	ldr.w	ip, [pc, #224]	@ 8026358 <Argus_Cal_GetDefaultCalibration+0xbdc>
 802627a:	75a3      	strb	r3, [r4, #22]
 802627c:	e9c4 c102 	strd	ip, r1, [r4, #8]
 8026280:	4930      	ldr	r1, [pc, #192]	@ (8026344 <Argus_Cal_GetDefaultCalibration+0xbc8>)
 8026282:	6121      	str	r1, [r4, #16]
 8026284:	f244 1141 	movw	r1, #16705	@ 0x4141
 8026288:	8061      	strh	r1, [r4, #2]
 802628a:	f645 41f2 	movw	r1, #23794	@ 0x5cf2
 802628e:	82a1      	strh	r1, [r4, #20]
 8026290:	2120      	movs	r1, #32
 8026292:	75e1      	strb	r1, [r4, #23]
 8026294:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8026298:	8021      	strh	r1, [r4, #0]
 802629a:	f8a4 e250 	strh.w	lr, [r4, #592]	@ 0x250
 802629e:	f8a4 e254 	strh.w	lr, [r4, #596]	@ 0x254
 80262a2:	f8a4 9252 	strh.w	r9, [r4, #594]	@ 0x252
 80262a6:	f8a4 9256 	strh.w	r9, [r4, #598]	@ 0x256
 80262aa:	2a00      	cmp	r2, #0
 80262ac:	f000 8664 	beq.w	8026f78 <Argus_Cal_GetDefaultCalibration+0x17fc>
 80262b0:	f243 3233 	movw	r2, #13107	@ 0x3333
 80262b4:	2b05      	cmp	r3, #5
 80262b6:	f8a4 209c 	strh.w	r2, [r4, #156]	@ 0x9c
 80262ba:	f040 8412 	bne.w	8026ae2 <Argus_Cal_GetDefaultCalibration+0x1366>
 80262be:	4b22      	ldr	r3, [pc, #136]	@ (8026348 <Argus_Cal_GetDefaultCalibration+0xbcc>)
 80262c0:	f8c4 3274 	str.w	r3, [r4, #628]	@ 0x274
 80262c4:	f46f 71a0 	mvn.w	r1, #320	@ 0x140
 80262c8:	f5a3 0326 	sub.w	r3, r3, #10878976	@ 0xa60000
 80262cc:	440b      	add	r3, r1
 80262ce:	f8c4 3278 	str.w	r3, [r4, #632]	@ 0x278
 80262d2:	4b1e      	ldr	r3, [pc, #120]	@ (802634c <Argus_Cal_GetDefaultCalibration+0xbd0>)
 80262d4:	491e      	ldr	r1, [pc, #120]	@ (8026350 <Argus_Cal_GetDefaultCalibration+0xbd4>)
 80262d6:	f46f 7096 	mvn.w	r0, #300	@ 0x12c
 80262da:	e9c4 1391 	strd	r1, r3, [r4, #580]	@ 0x244
 80262de:	f5a3 13b8 	sub.w	r3, r3, #1507328	@ 0x170000
 80262e2:	4403      	add	r3, r0
 80262e4:	f8c4 322c 	str.w	r3, [r4, #556]	@ 0x22c
 80262e8:	f503 03f8 	add.w	r3, r3, #8126464	@ 0x7c0000
 80262ec:	f503 73f1 	add.w	r3, r3, #482	@ 0x1e2
 80262f0:	f8c4 3230 	str.w	r3, [r4, #560]	@ 0x230
 80262f4:	f46f 7c34 	mvn.w	ip, #720	@ 0x2d0
 80262f8:	f1a3 732c 	sub.w	r3, r3, #45088768	@ 0x2b00000
 80262fc:	4463      	add	r3, ip
 80262fe:	f8c4 3234 	str.w	r3, [r4, #564]	@ 0x234
 8026302:	f103 73d5 	add.w	r3, r3, #27918336	@ 0x1aa0000
 8026306:	f203 139d 	addw	r3, r3, #413	@ 0x19d
 802630a:	f8c4 3238 	str.w	r3, [r4, #568]	@ 0x238
 802630e:	f103 63de 	add.w	r3, r3, #116391936	@ 0x6f00000
 8026312:	3358      	adds	r3, #88	@ 0x58
 8026314:	f8c4 323c 	str.w	r3, [r4, #572]	@ 0x23c
 8026318:	f240 73ae 	movw	r3, #1966	@ 0x7ae
 802631c:	f8a4 3240 	strh.w	r3, [r4, #576]	@ 0x240
 8026320:	f241 637d 	movw	r3, #5757	@ 0x167d
 8026324:	f8a4 3242 	strh.w	r3, [r4, #578]	@ 0x242
 8026328:	e518      	b.n	8025d5c <Argus_Cal_GetDefaultCalibration+0x5e0>
 802632a:	2a00      	cmp	r2, #0
 802632c:	f040 823c 	bne.w	80267a8 <Argus_Cal_GetDefaultCalibration+0x102c>
 8026330:	f240 21c1 	movw	r1, #705	@ 0x2c1
 8026334:	e473      	b.n	8025c1e <Argus_Cal_GetDefaultCalibration+0x4a2>
 8026336:	bf00      	nop
 8026338:	0205711a 	.word	0x0205711a
 802633c:	ffc7ff33 	.word	0xffc7ff33
 8026340:	1d114f06 	.word	0x1d114f06
 8026344:	21065ef4 	.word	0x21065ef4
 8026348:	08ae0997 	.word	0x08ae0997
 802634c:	0fe306e9 	.word	0x0fe306e9
 8026350:	10620635 	.word	0x10620635
 8026354:	01e0b860 	.word	0x01e0b860
 8026358:	5c39992e 	.word	0x5c39992e
 802635c:	f240 4c19 	movw	ip, #1049	@ 0x419
 8026360:	f1a8 0104 	sub.w	r1, r8, #4
 8026364:	f8a4 c26a 	strh.w	ip, [r4, #618]	@ 0x26a
 8026368:	f04f 0c28 	mov.w	ip, #40	@ 0x28
 802636c:	b2c9      	uxtb	r1, r1
 802636e:	f884 c269 	strb.w	ip, [r4, #617]	@ 0x269
 8026372:	f44f 5caa 	mov.w	ip, #5440	@ 0x1540
 8026376:	f8a4 c267 	strh.w	ip, [r4, #615]	@ 0x267
 802637a:	2901      	cmp	r1, #1
 802637c:	f04f 0c0e 	mov.w	ip, #14
 8026380:	f884 c264 	strb.w	ip, [r4, #612]	@ 0x264
 8026384:	f67f aec6 	bls.w	8026114 <Argus_Cal_GetDefaultCalibration+0x998>
 8026388:	f8df ca44 	ldr.w	ip, [pc, #2628]	@ 8026dd0 <Argus_Cal_GetDefaultCalibration+0x1654>
 802638c:	f8c4 c25e 	str.w	ip, [r4, #606]	@ 0x25e
 8026390:	f243 0c28 	movw	ip, #12328	@ 0x3028
 8026394:	f8a4 c265 	strh.w	ip, [r4, #613]	@ 0x265
 8026398:	2b05      	cmp	r3, #5
 802639a:	f44f 4c7a 	mov.w	ip, #64000	@ 0xfa00
 802639e:	f8a4 c262 	strh.w	ip, [r4, #610]	@ 0x262
 80263a2:	f43f aeca 	beq.w	802613a <Argus_Cal_GetDefaultCalibration+0x9be>
 80263a6:	2b03      	cmp	r3, #3
 80263a8:	f47f ac8a 	bne.w	8025cc0 <Argus_Cal_GetDefaultCalibration+0x544>
 80263ac:	f241 6cb5 	movw	ip, #5813	@ 0x16b5
 80263b0:	f641 2a5a 	movw	sl, #6746	@ 0x1a5a
 80263b4:	2a00      	cmp	r2, #0
 80263b6:	bf08      	it	eq
 80263b8:	46d4      	moveq	ip, sl
 80263ba:	2d01      	cmp	r5, #1
 80263bc:	f8a4 c274 	strh.w	ip, [r4, #628]	@ 0x274
 80263c0:	f000 8439 	beq.w	8026c36 <Argus_Cal_GetDefaultCalibration+0x14ba>
 80263c4:	f241 6cba 	movw	ip, #5818	@ 0x16ba
 80263c8:	f641 2a56 	movw	sl, #6742	@ 0x1a56
 80263cc:	2a00      	cmp	r2, #0
 80263ce:	bf08      	it	eq
 80263d0:	46d4      	moveq	ip, sl
 80263d2:	2d01      	cmp	r5, #1
 80263d4:	f8a4 c276 	strh.w	ip, [r4, #630]	@ 0x276
 80263d8:	f000 8428 	beq.w	8026c2c <Argus_Cal_GetDefaultCalibration+0x14b0>
 80263dc:	2a00      	cmp	r2, #0
 80263de:	f000 85bf 	beq.w	8026f60 <Argus_Cal_GetDefaultCalibration+0x17e4>
 80263e2:	f241 6c6b 	movw	ip, #5739	@ 0x166b
 80263e6:	f8a4 c278 	strh.w	ip, [r4, #632]	@ 0x278
 80263ea:	f241 6c5f 	movw	ip, #5727	@ 0x165f
 80263ee:	f641 1aed 	movw	sl, #6637	@ 0x19ed
 80263f2:	2a00      	cmp	r2, #0
 80263f4:	bf08      	it	eq
 80263f6:	46d4      	moveq	ip, sl
 80263f8:	2d01      	cmp	r5, #1
 80263fa:	f8a4 c27a 	strh.w	ip, [r4, #634]	@ 0x27a
 80263fe:	f47f ac81 	bne.w	8025d04 <Argus_Cal_GetDefaultCalibration+0x588>
 8026402:	f1a3 0c03 	sub.w	ip, r3, #3
 8026406:	f1bc 0f01 	cmp.w	ip, #1
 802640a:	f240 8775 	bls.w	80272f8 <Argus_Cal_GetDefaultCalibration+0x1b7c>
 802640e:	f241 0c85 	movw	ip, #4229	@ 0x1085
 8026412:	f640 7aff 	movw	sl, #4095	@ 0xfff
 8026416:	2a00      	cmp	r2, #0
 8026418:	bf08      	it	eq
 802641a:	46d4      	moveq	ip, sl
 802641c:	2b04      	cmp	r3, #4
 802641e:	f8a4 c27a 	strh.w	ip, [r4, #634]	@ 0x27a
 8026422:	f47f ac6f 	bne.w	8025d04 <Argus_Cal_GetDefaultCalibration+0x588>
 8026426:	f8df c9ac 	ldr.w	ip, [pc, #2476]	@ 8026dd4 <Argus_Cal_GetDefaultCalibration+0x1658>
 802642a:	f8c4 c26c 	str.w	ip, [r4, #620]	@ 0x26c
 802642e:	f04f 0c1d 	mov.w	ip, #29
 8026432:	f884 c270 	strb.w	ip, [r4, #624]	@ 0x270
 8026436:	f04f 0c2f 	mov.w	ip, #47	@ 0x2f
 802643a:	e46d      	b.n	8025d18 <Argus_Cal_GetDefaultCalibration+0x59c>
 802643c:	2a00      	cmp	r2, #0
 802643e:	f000 81fc 	beq.w	802683a <Argus_Cal_GetDefaultCalibration+0x10be>
 8026442:	2118      	movs	r1, #24
 8026444:	f8a4 1222 	strh.w	r1, [r4, #546]	@ 0x222
 8026448:	2168      	movs	r1, #104	@ 0x68
 802644a:	f240 4c19 	movw	ip, #1049	@ 0x419
 802644e:	f8a4 1224 	strh.w	r1, [r4, #548]	@ 0x224
 8026452:	f8a4 c26a 	strh.w	ip, [r4, #618]	@ 0x26a
 8026456:	f1a8 0104 	sub.w	r1, r8, #4
 802645a:	f04f 0c28 	mov.w	ip, #40	@ 0x28
 802645e:	b2c9      	uxtb	r1, r1
 8026460:	f884 c269 	strb.w	ip, [r4, #617]	@ 0x269
 8026464:	f44f 5caa 	mov.w	ip, #5440	@ 0x1540
 8026468:	f8a4 c267 	strh.w	ip, [r4, #615]	@ 0x267
 802646c:	2901      	cmp	r1, #1
 802646e:	f04f 0c0e 	mov.w	ip, #14
 8026472:	f884 c264 	strb.w	ip, [r4, #612]	@ 0x264
 8026476:	f67f ae4d 	bls.w	8026114 <Argus_Cal_GetDefaultCalibration+0x998>
 802647a:	f8df c954 	ldr.w	ip, [pc, #2388]	@ 8026dd0 <Argus_Cal_GetDefaultCalibration+0x1654>
 802647e:	f8c4 c25e 	str.w	ip, [r4, #606]	@ 0x25e
 8026482:	f243 0c28 	movw	ip, #12328	@ 0x3028
 8026486:	f8a4 c265 	strh.w	ip, [r4, #613]	@ 0x265
 802648a:	f44f 4c7a 	mov.w	ip, #64000	@ 0xfa00
 802648e:	f8a4 c262 	strh.w	ip, [r4, #610]	@ 0x262
 8026492:	f640 7cfb 	movw	ip, #4091	@ 0xffb
 8026496:	f640 7a41 	movw	sl, #3905	@ 0xf41
 802649a:	2a00      	cmp	r2, #0
 802649c:	bf08      	it	eq
 802649e:	46d4      	moveq	ip, sl
 80264a0:	2d01      	cmp	r5, #1
 80264a2:	f8a4 c274 	strh.w	ip, [r4, #628]	@ 0x274
 80264a6:	f000 83c6 	beq.w	8026c36 <Argus_Cal_GetDefaultCalibration+0x14ba>
 80264aa:	f241 0c79 	movw	ip, #4217	@ 0x1079
 80264ae:	f640 6adf 	movw	sl, #3807	@ 0xedf
 80264b2:	2a00      	cmp	r2, #0
 80264b4:	bf08      	it	eq
 80264b6:	46d4      	moveq	ip, sl
 80264b8:	2d01      	cmp	r5, #1
 80264ba:	f8a4 c276 	strh.w	ip, [r4, #630]	@ 0x276
 80264be:	f000 83b5 	beq.w	8026c2c <Argus_Cal_GetDefaultCalibration+0x14b0>
 80264c2:	f640 7cdd 	movw	ip, #4061	@ 0xfdd
 80264c6:	f640 6a66 	movw	sl, #3686	@ 0xe66
 80264ca:	2a00      	cmp	r2, #0
 80264cc:	bf08      	it	eq
 80264ce:	46d4      	moveq	ip, sl
 80264d0:	2d01      	cmp	r5, #1
 80264d2:	f8a4 c278 	strh.w	ip, [r4, #632]	@ 0x278
 80264d6:	f000 8133 	beq.w	8026740 <Argus_Cal_GetDefaultCalibration+0xfc4>
 80264da:	2b04      	cmp	r3, #4
 80264dc:	d10e      	bne.n	80264fc <Argus_Cal_GetDefaultCalibration+0xd80>
 80264de:	2a00      	cmp	r2, #0
 80264e0:	f640 6c07 	movw	ip, #3591	@ 0xe07
 80264e4:	bf18      	it	ne
 80264e6:	f44f 6c75 	movne.w	ip, #3920	@ 0xf50
 80264ea:	2d01      	cmp	r5, #1
 80264ec:	f8a4 c27a 	strh.w	ip, [r4, #634]	@ 0x27a
 80264f0:	d199      	bne.n	8026426 <Argus_Cal_GetDefaultCalibration+0xcaa>
 80264f2:	f241 0c85 	movw	ip, #4229	@ 0x1085
 80264f6:	f8a4 c27a 	strh.w	ip, [r4, #634]	@ 0x27a
 80264fa:	e794      	b.n	8026426 <Argus_Cal_GetDefaultCalibration+0xcaa>
 80264fc:	2b03      	cmp	r3, #3
 80264fe:	f43f af74 	beq.w	80263ea <Argus_Cal_GetDefaultCalibration+0xc6e>
 8026502:	f241 1c65 	movw	ip, #4453	@ 0x1165
 8026506:	f241 2a7b 	movw	sl, #4731	@ 0x127b
 802650a:	2a00      	cmp	r2, #0
 802650c:	bf08      	it	eq
 802650e:	46d4      	moveq	ip, sl
 8026510:	e772      	b.n	80263f8 <Argus_Cal_GetDefaultCalibration+0xc7c>
 8026512:	f640 21eb 	movw	r1, #2795	@ 0xaeb
 8026516:	2d01      	cmp	r5, #1
 8026518:	f8a4 1246 	strh.w	r1, [r4, #582]	@ 0x246
 802651c:	f47f ab3d 	bne.w	8025b9a <Argus_Cal_GetDefaultCalibration+0x41e>
 8026520:	f640 3185 	movw	r1, #2949	@ 0xb85
 8026524:	f8a4 1246 	strh.w	r1, [r4, #582]	@ 0x246
 8026528:	f7ff bb37 	b.w	8025b9a <Argus_Cal_GetDefaultCalibration+0x41e>
 802652c:	f240 513f 	movw	r1, #1343	@ 0x53f
 8026530:	2d01      	cmp	r5, #1
 8026532:	f8a4 1240 	strh.w	r1, [r4, #576]	@ 0x240
 8026536:	f47f ab87 	bne.w	8025c48 <Argus_Cal_GetDefaultCalibration+0x4cc>
 802653a:	f44f 61fe 	mov.w	r1, #2032	@ 0x7f0
 802653e:	f8a4 1240 	strh.w	r1, [r4, #576]	@ 0x240
 8026542:	f7ff bb81 	b.w	8025c48 <Argus_Cal_GetDefaultCalibration+0x4cc>
 8026546:	f640 3154 	movw	r1, #2900	@ 0xb54
 802654a:	2d01      	cmp	r5, #1
 802654c:	f8a4 123a 	strh.w	r1, [r4, #570]	@ 0x23a
 8026550:	f47f aac4 	bne.w	8025adc <Argus_Cal_GetDefaultCalibration+0x360>
 8026554:	f44f 6144 	mov.w	r1, #3136	@ 0xc40
 8026558:	f8a4 123a 	strh.w	r1, [r4, #570]	@ 0x23a
 802655c:	f7ff babe 	b.w	8025adc <Argus_Cal_GetDefaultCalibration+0x360>
 8026560:	f44f 6112 	mov.w	r1, #2336	@ 0x920
 8026564:	2d01      	cmp	r5, #1
 8026566:	f8a4 1242 	strh.w	r1, [r4, #578]	@ 0x242
 802656a:	f47f ab7d 	bne.w	8025c68 <Argus_Cal_GetDefaultCalibration+0x4ec>
 802656e:	f44f 6144 	mov.w	r1, #3136	@ 0xc40
 8026572:	f8a4 1242 	strh.w	r1, [r4, #578]	@ 0x242
 8026576:	f7ff bb77 	b.w	8025c68 <Argus_Cal_GetDefaultCalibration+0x4ec>
 802657a:	2a00      	cmp	r2, #0
 802657c:	f000 811a 	beq.w	80267b4 <Argus_Cal_GetDefaultCalibration+0x1038>
 8026580:	f640 01b4 	movw	r1, #2228	@ 0x8b4
 8026584:	2d01      	cmp	r5, #1
 8026586:	f8a4 1234 	strh.w	r1, [r4, #564]	@ 0x234
 802658a:	d045      	beq.n	8026618 <Argus_Cal_GetDefaultCalibration+0xe9c>
 802658c:	f640 717d 	movw	r1, #3965	@ 0xf7d
 8026590:	f8a4 1236 	strh.w	r1, [r4, #566]	@ 0x236
 8026594:	f640 113b 	movw	r1, #2363	@ 0x93b
 8026598:	f8a4 1238 	strh.w	r1, [r4, #568]	@ 0x238
 802659c:	f640 6107 	movw	r1, #3591	@ 0xe07
 80265a0:	f8a4 123a 	strh.w	r1, [r4, #570]	@ 0x23a
 80265a4:	f240 2172 	movw	r1, #626	@ 0x272
 80265a8:	f8a4 122c 	strh.w	r1, [r4, #556]	@ 0x22c
 80265ac:	f44f 61d7 	mov.w	r1, #1720	@ 0x6b8
 80265b0:	f8a4 122e 	strh.w	r1, [r4, #558]	@ 0x22e
 80265b4:	f240 317f 	movw	r1, #895	@ 0x37f
 80265b8:	f8a4 1230 	strh.w	r1, [r4, #560]	@ 0x230
 80265bc:	f240 61ed 	movw	r1, #1773	@ 0x6ed
 80265c0:	f8a4 1232 	strh.w	r1, [r4, #562]	@ 0x232
 80265c4:	f640 217f 	movw	r1, #2687	@ 0xa7f
 80265c8:	f8a4 1244 	strh.w	r1, [r4, #580]	@ 0x244
 80265cc:	f241 419c 	movw	r1, #5276	@ 0x149c
 80265d0:	f8a4 1246 	strh.w	r1, [r4, #582]	@ 0x246
 80265d4:	f44f 612a 	mov.w	r1, #2720	@ 0xaa0
 80265d8:	f8a4 1248 	strh.w	r1, [r4, #584]	@ 0x248
 80265dc:	f640 51a8 	movw	r1, #3496	@ 0xda8
 80265e0:	f8a4 124a 	strh.w	r1, [r4, #586]	@ 0x24a
 80265e4:	f240 4171 	movw	r1, #1137	@ 0x471
 80265e8:	f8a4 123c 	strh.w	r1, [r4, #572]	@ 0x23c
 80265ec:	f640 2196 	movw	r1, #2710	@ 0xa96
 80265f0:	f8a4 123e 	strh.w	r1, [r4, #574]	@ 0x23e
 80265f4:	f240 31fb 	movw	r1, #1019	@ 0x3fb
 80265f8:	f8a4 1240 	strh.w	r1, [r4, #576]	@ 0x240
 80265fc:	f640 11ff 	movw	r1, #2559	@ 0x9ff
 8026600:	f8a4 1242 	strh.w	r1, [r4, #578]	@ 0x242
 8026604:	e71d      	b.n	8026442 <Argus_Cal_GetDefaultCalibration+0xcc6>
 8026606:	f64f 712e 	movw	r1, #65326	@ 0xff2e
 802660a:	2d01      	cmp	r5, #1
 802660c:	f8a4 1234 	strh.w	r1, [r4, #564]	@ 0x234
 8026610:	f47f aa37 	bne.w	8025a82 <Argus_Cal_GetDefaultCalibration+0x306>
 8026614:	f44f 7150 	mov.w	r1, #832	@ 0x340
 8026618:	2b05      	cmp	r3, #5
 802661a:	f8a4 1234 	strh.w	r1, [r4, #564]	@ 0x234
 802661e:	f47f aa30 	bne.w	8025a82 <Argus_Cal_GetDefaultCalibration+0x306>
 8026622:	2a00      	cmp	r2, #0
 8026624:	f000 813d 	beq.w	80268a2 <Argus_Cal_GetDefaultCalibration+0x1126>
 8026628:	f640 0138 	movw	r1, #2104	@ 0x838
 802662c:	2d01      	cmp	r5, #1
 802662e:	f8a4 1236 	strh.w	r1, [r4, #566]	@ 0x236
 8026632:	f47f aa33 	bne.w	8025a9c <Argus_Cal_GetDefaultCalibration+0x320>
 8026636:	f640 3185 	movw	r1, #2949	@ 0xb85
 802663a:	f8a4 1236 	strh.w	r1, [r4, #566]	@ 0x236
 802663e:	f7ff ba2d 	b.w	8025a9c <Argus_Cal_GetDefaultCalibration+0x320>
 8026642:	f640 016f 	movw	r1, #2159	@ 0x86f
 8026646:	e7f1      	b.n	802662c <Argus_Cal_GetDefaultCalibration+0xeb0>
 8026648:	f44f 61ac 	mov.w	r1, #1376	@ 0x560
 802664c:	2d01      	cmp	r5, #1
 802664e:	f8a4 1238 	strh.w	r1, [r4, #568]	@ 0x238
 8026652:	f47f aa33 	bne.w	8025abc <Argus_Cal_GetDefaultCalibration+0x340>
 8026656:	f44f 61fe 	mov.w	r1, #2032	@ 0x7f0
 802665a:	f8a4 1238 	strh.w	r1, [r4, #568]	@ 0x238
 802665e:	f7ff ba2d 	b.w	8025abc <Argus_Cal_GetDefaultCalibration+0x340>
 8026662:	f44f 7174 	mov.w	r1, #976	@ 0x3d0
 8026666:	2d01      	cmp	r5, #1
 8026668:	f8a4 123c 	strh.w	r1, [r4, #572]	@ 0x23c
 802666c:	f47f aacc 	bne.w	8025c08 <Argus_Cal_GetDefaultCalibration+0x48c>
 8026670:	f240 5143 	movw	r1, #1347	@ 0x543
 8026674:	f8a4 123c 	strh.w	r1, [r4, #572]	@ 0x23c
 8026678:	f7ff bac6 	b.w	8025c08 <Argus_Cal_GetDefaultCalibration+0x48c>
 802667c:	f640 1152 	movw	r1, #2386	@ 0x952
 8026680:	2d01      	cmp	r5, #1
 8026682:	f8a4 124a 	strh.w	r1, [r4, #586]	@ 0x24a
 8026686:	f47f aaaf 	bne.w	8025be8 <Argus_Cal_GetDefaultCalibration+0x46c>
 802668a:	f44f 6144 	mov.w	r1, #3136	@ 0xc40
 802668e:	f8a4 124a 	strh.w	r1, [r4, #586]	@ 0x24a
 8026692:	f7ff baa9 	b.w	8025be8 <Argus_Cal_GetDefaultCalibration+0x46c>
 8026696:	f640 31de 	movw	r1, #3038	@ 0xbde
 802669a:	2d01      	cmp	r5, #1
 802669c:	f8a4 123e 	strh.w	r1, [r4, #574]	@ 0x23e
 80266a0:	f47f aac2 	bne.w	8025c28 <Argus_Cal_GetDefaultCalibration+0x4ac>
 80266a4:	f640 3185 	movw	r1, #2949	@ 0xb85
 80266a8:	f8a4 123e 	strh.w	r1, [r4, #574]	@ 0x23e
 80266ac:	f7ff babc 	b.w	8025c28 <Argus_Cal_GetDefaultCalibration+0x4ac>
 80266b0:	f240 416a 	movw	r1, #1130	@ 0x46a
 80266b4:	2d01      	cmp	r5, #1
 80266b6:	f8a4 1230 	strh.w	r1, [r4, #560]	@ 0x230
 80266ba:	f47f aa3f 	bne.w	8025b3c <Argus_Cal_GetDefaultCalibration+0x3c0>
 80266be:	f44f 61fe 	mov.w	r1, #2032	@ 0x7f0
 80266c2:	f8a4 1230 	strh.w	r1, [r4, #560]	@ 0x230
 80266c6:	f7ff ba39 	b.w	8025b3c <Argus_Cal_GetDefaultCalibration+0x3c0>
 80266ca:	f44f 61f5 	mov.w	r1, #1960	@ 0x7a8
 80266ce:	2d01      	cmp	r5, #1
 80266d0:	f8a4 122e 	strh.w	r1, [r4, #558]	@ 0x22e
 80266d4:	f47f aa22 	bne.w	8025b1c <Argus_Cal_GetDefaultCalibration+0x3a0>
 80266d8:	f640 3185 	movw	r1, #2949	@ 0xb85
 80266dc:	f8a4 122e 	strh.w	r1, [r4, #558]	@ 0x22e
 80266e0:	f7ff ba1c 	b.w	8025b1c <Argus_Cal_GetDefaultCalibration+0x3a0>
 80266e4:	f44f 7174 	mov.w	r1, #976	@ 0x3d0
 80266e8:	2d01      	cmp	r5, #1
 80266ea:	f8a4 1244 	strh.w	r1, [r4, #580]	@ 0x244
 80266ee:	f47f aa44 	bne.w	8025b7a <Argus_Cal_GetDefaultCalibration+0x3fe>
 80266f2:	f240 5143 	movw	r1, #1347	@ 0x543
 80266f6:	f8a4 1244 	strh.w	r1, [r4, #580]	@ 0x244
 80266fa:	f7ff ba3e 	b.w	8025b7a <Argus_Cal_GetDefaultCalibration+0x3fe>
 80266fe:	f640 11e2 	movw	r1, #2530	@ 0x9e2
 8026702:	2d01      	cmp	r5, #1
 8026704:	f8a4 1232 	strh.w	r1, [r4, #562]	@ 0x232
 8026708:	f47f aa28 	bne.w	8025b5c <Argus_Cal_GetDefaultCalibration+0x3e0>
 802670c:	f44f 6144 	mov.w	r1, #3136	@ 0xc40
 8026710:	f8a4 1232 	strh.w	r1, [r4, #562]	@ 0x232
 8026714:	f7ff ba22 	b.w	8025b5c <Argus_Cal_GetDefaultCalibration+0x3e0>
 8026718:	f240 711e 	movw	r1, #1822	@ 0x71e
 802671c:	2d01      	cmp	r5, #1
 802671e:	f8a4 1248 	strh.w	r1, [r4, #584]	@ 0x248
 8026722:	f47f aa51 	bne.w	8025bc8 <Argus_Cal_GetDefaultCalibration+0x44c>
 8026726:	f44f 61fe 	mov.w	r1, #2032	@ 0x7f0
 802672a:	f8a4 1248 	strh.w	r1, [r4, #584]	@ 0x248
 802672e:	f7ff ba4b 	b.w	8025bc8 <Argus_Cal_GetDefaultCalibration+0x44c>
 8026732:	f241 0c0f 	movw	ip, #4111	@ 0x100f
 8026736:	2b05      	cmp	r3, #5
 8026738:	f8a4 c276 	strh.w	ip, [r4, #630]	@ 0x276
 802673c:	f040 8215 	bne.w	8026b6a <Argus_Cal_GetDefaultCalibration+0x13ee>
 8026740:	f241 0c78 	movw	ip, #4216	@ 0x1078
 8026744:	2b05      	cmp	r3, #5
 8026746:	f8a4 c278 	strh.w	ip, [r4, #632]	@ 0x278
 802674a:	f47f aec6 	bne.w	80264da <Argus_Cal_GetDefaultCalibration+0xd5e>
 802674e:	f241 3c44 	movw	ip, #4932	@ 0x1344
 8026752:	f241 3af9 	movw	sl, #5113	@ 0x13f9
 8026756:	2a00      	cmp	r2, #0
 8026758:	bf08      	it	eq
 802675a:	46d4      	moveq	ip, sl
 802675c:	f8a4 c27a 	strh.w	ip, [r4, #634]	@ 0x27a
 8026760:	f241 0c85 	movw	ip, #4229	@ 0x1085
 8026764:	e65a      	b.n	802641c <Argus_Cal_GetDefaultCalibration+0xca0>
 8026766:	f241 0ce6 	movw	ip, #4326	@ 0x10e6
 802676a:	f8a4 c274 	strh.w	ip, [r4, #628]	@ 0x274
 802676e:	2a00      	cmp	r2, #0
 8026770:	f040 81f2 	bne.w	8026b58 <Argus_Cal_GetDefaultCalibration+0x13dc>
 8026774:	f241 2c79 	movw	ip, #4729	@ 0x1279
 8026778:	2d01      	cmp	r5, #1
 802677a:	f8a4 c276 	strh.w	ip, [r4, #630]	@ 0x276
 802677e:	d103      	bne.n	8026788 <Argus_Cal_GetDefaultCalibration+0x100c>
 8026780:	f241 0cb9 	movw	ip, #4281	@ 0x10b9
 8026784:	f8a4 c276 	strh.w	ip, [r4, #630]	@ 0x276
 8026788:	f241 3c11 	movw	ip, #4881	@ 0x1311
 802678c:	e4ea      	b.n	8026164 <Argus_Cal_GetDefaultCalibration+0x9e8>
 802678e:	2b04      	cmp	r3, #4
 8026790:	f47f ae09 	bne.w	80263a6 <Argus_Cal_GetDefaultCalibration+0xc2a>
 8026794:	e67d      	b.n	8026492 <Argus_Cal_GetDefaultCalibration+0xd16>
 8026796:	f240 31ca 	movw	r1, #970	@ 0x3ca
 802679a:	e7a5      	b.n	80266e8 <Argus_Cal_GetDefaultCalibration+0xf6c>
 802679c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80267a0:	e761      	b.n	8026666 <Argus_Cal_GetDefaultCalibration+0xeea>
 80267a2:	f240 6166 	movw	r1, #1638	@ 0x666
 80267a6:	e7b9      	b.n	802671c <Argus_Cal_GetDefaultCalibration+0xfa0>
 80267a8:	f640 317b 	movw	r1, #2939	@ 0xb7b
 80267ac:	e775      	b.n	802669a <Argus_Cal_GetDefaultCalibration+0xf1e>
 80267ae:	f240 718a 	movw	r1, #1930	@ 0x78a
 80267b2:	e78c      	b.n	80266ce <Argus_Cal_GetDefaultCalibration+0xf52>
 80267b4:	f240 51c3 	movw	r1, #1475	@ 0x5c3
 80267b8:	2d01      	cmp	r5, #1
 80267ba:	f8a4 1234 	strh.w	r1, [r4, #564]	@ 0x234
 80267be:	f43f af2b 	beq.w	8026618 <Argus_Cal_GetDefaultCalibration+0xe9c>
 80267c2:	f640 112a 	movw	r1, #2346	@ 0x92a
 80267c6:	f8a4 1236 	strh.w	r1, [r4, #566]	@ 0x236
 80267ca:	f240 6139 	movw	r1, #1593	@ 0x639
 80267ce:	f8a4 1238 	strh.w	r1, [r4, #568]	@ 0x238
 80267d2:	f240 61fd 	movw	r1, #1789	@ 0x6fd
 80267d6:	f8a4 123a 	strh.w	r1, [r4, #570]	@ 0x23a
 80267da:	f240 4161 	movw	r1, #1121	@ 0x461
 80267de:	f8a4 122c 	strh.w	r1, [r4, #556]	@ 0x22c
 80267e2:	f240 1193 	movw	r1, #403	@ 0x193
 80267e6:	f8a4 122e 	strh.w	r1, [r4, #558]	@ 0x22e
 80267ea:	f240 7117 	movw	r1, #1815	@ 0x717
 80267ee:	f8a4 1230 	strh.w	r1, [r4, #560]	@ 0x230
 80267f2:	f240 414a 	movw	r1, #1098	@ 0x44a
 80267f6:	f8a4 1232 	strh.w	r1, [r4, #562]	@ 0x232
 80267fa:	f240 713b 	movw	r1, #1851	@ 0x73b
 80267fe:	f8a4 1244 	strh.w	r1, [r4, #580]	@ 0x244
 8026802:	f640 3154 	movw	r1, #2900	@ 0xb54
 8026806:	f8a4 1246 	strh.w	r1, [r4, #582]	@ 0x246
 802680a:	f640 212d 	movw	r1, #2605	@ 0xa2d
 802680e:	f8a4 1248 	strh.w	r1, [r4, #584]	@ 0x248
 8026812:	f640 416e 	movw	r1, #3182	@ 0xc6e
 8026816:	f8a4 124a 	strh.w	r1, [r4, #586]	@ 0x24a
 802681a:	f240 4119 	movw	r1, #1049	@ 0x419
 802681e:	f8a4 123c 	strh.w	r1, [r4, #572]	@ 0x23c
 8026822:	f240 2127 	movw	r1, #551	@ 0x227
 8026826:	f8a4 123e 	strh.w	r1, [r4, #574]	@ 0x23e
 802682a:	f240 51a5 	movw	r1, #1445	@ 0x5a5
 802682e:	f8a4 1240 	strh.w	r1, [r4, #576]	@ 0x240
 8026832:	f240 3129 	movw	r1, #809	@ 0x329
 8026836:	f8a4 1242 	strh.w	r1, [r4, #578]	@ 0x242
 802683a:	2100      	movs	r1, #0
 802683c:	f8a4 1222 	strh.w	r1, [r4, #546]	@ 0x222
 8026840:	2140      	movs	r1, #64	@ 0x40
 8026842:	e602      	b.n	802644a <Argus_Cal_GetDefaultCalibration+0xcce>
 8026844:	f244 515d 	movw	r1, #17757	@ 0x455d
 8026848:	2d01      	cmp	r5, #1
 802684a:	8061      	strh	r1, [r4, #2]
 802684c:	f47f a874 	bne.w	8025938 <Argus_Cal_GetDefaultCalibration+0x1bc>
 8026850:	f7ff b86c 	b.w	802592c <Argus_Cal_GetDefaultCalibration+0x1b0>
 8026854:	f640 01c1 	movw	r1, #2241	@ 0x8c1
 8026858:	e712      	b.n	8026680 <Argus_Cal_GetDefaultCalibration+0xf04>
 802685a:	2113      	movs	r1, #19
 802685c:	2d01      	cmp	r5, #1
 802685e:	7221      	strb	r1, [r4, #8]
 8026860:	f47f aac2 	bne.w	8025de8 <Argus_Cal_GetDefaultCalibration+0x66c>
 8026864:	2117      	movs	r1, #23
 8026866:	7221      	strb	r1, [r4, #8]
 8026868:	2b04      	cmp	r3, #4
 802686a:	f43f aabd 	beq.w	8025de8 <Argus_Cal_GetDefaultCalibration+0x66c>
 802686e:	2b03      	cmp	r3, #3
 8026870:	f000 8103 	beq.w	8026a7a <Argus_Cal_GetDefaultCalibration+0x12fe>
 8026874:	2a00      	cmp	r2, #0
 8026876:	bf14      	ite	ne
 8026878:	216c      	movne	r1, #108	@ 0x6c
 802687a:	2172      	moveq	r1, #114	@ 0x72
 802687c:	7261      	strb	r1, [r4, #9]
 802687e:	e4de      	b.n	802623e <Argus_Cal_GetDefaultCalibration+0xac2>
 8026880:	f644 11b8 	movw	r1, #18872	@ 0x49b8
 8026884:	e7e0      	b.n	8026848 <Argus_Cal_GetDefaultCalibration+0x10cc>
 8026886:	f240 41b6 	movw	r1, #1206	@ 0x4b6
 802688a:	e651      	b.n	8026530 <Argus_Cal_GetDefaultCalibration+0xdb4>
 802688c:	f64f 7124 	movw	r1, #65316	@ 0xff24
 8026890:	2d01      	cmp	r5, #1
 8026892:	f8a4 1234 	strh.w	r1, [r4, #564]	@ 0x234
 8026896:	f000 8510 	beq.w	80272ba <Argus_Cal_GetDefaultCalibration+0x1b3e>
 802689a:	f06f 0ecc 	mvn.w	lr, #204	@ 0xcc
 802689e:	f06f 0938 	mvn.w	r9, #56	@ 0x38
 80268a2:	f44f 7115 	mov.w	r1, #596	@ 0x254
 80268a6:	f7ff b8f4 	b.w	8025a92 <Argus_Cal_GetDefaultCalibration+0x316>
 80268aa:	f640 21eb 	movw	r1, #2795	@ 0xaeb
 80268ae:	e64c      	b.n	802654a <Argus_Cal_GetDefaultCalibration+0xdce>
 80268b0:	f240 41d7 	movw	r1, #1239	@ 0x4d7
 80268b4:	e6ca      	b.n	802664c <Argus_Cal_GetDefaultCalibration+0xed0>
 80268b6:	f640 01a1 	movw	r1, #2209	@ 0x8a1
 80268ba:	e653      	b.n	8026564 <Argus_Cal_GetDefaultCalibration+0xde8>
 80268bc:	f640 01f6 	movw	r1, #2294	@ 0x8f6
 80268c0:	e71f      	b.n	8026702 <Argus_Cal_GetDefaultCalibration+0xf86>
 80268c2:	f640 2189 	movw	r1, #2697	@ 0xa89
 80268c6:	e626      	b.n	8026516 <Argus_Cal_GetDefaultCalibration+0xd9a>
 80268c8:	f240 31ee 	movw	r1, #1006	@ 0x3ee
 80268cc:	e6f2      	b.n	80266b4 <Argus_Cal_GetDefaultCalibration+0xf38>
 80268ce:	21f2      	movs	r1, #242	@ 0xf2
 80268d0:	2b05      	cmp	r3, #5
 80268d2:	7521      	strb	r1, [r4, #20]
 80268d4:	f47f ac00 	bne.w	80260d8 <Argus_Cal_GetDefaultCalibration+0x95c>
 80268d8:	2a00      	cmp	r2, #0
 80268da:	f000 80e3 	beq.w	8026aa4 <Argus_Cal_GetDefaultCalibration+0x1328>
 80268de:	2151      	movs	r1, #81	@ 0x51
 80268e0:	2d01      	cmp	r5, #1
 80268e2:	7561      	strb	r1, [r4, #21]
 80268e4:	f47f ac04 	bne.w	80260f0 <Argus_Cal_GetDefaultCalibration+0x974>
 80268e8:	f7ff bbfe 	b.w	80260e8 <Argus_Cal_GetDefaultCalibration+0x96c>
 80268ec:	2110      	movs	r1, #16
 80268ee:	2b05      	cmp	r3, #5
 80268f0:	74a1      	strb	r1, [r4, #18]
 80268f2:	f43f a872 	beq.w	80259da <Argus_Cal_GetDefaultCalibration+0x25e>
 80268f6:	2b04      	cmp	r3, #4
 80268f8:	f43f aac6 	beq.w	8025e88 <Argus_Cal_GetDefaultCalibration+0x70c>
 80268fc:	2b03      	cmp	r3, #3
 80268fe:	f43f abd7 	beq.w	80260b0 <Argus_Cal_GetDefaultCalibration+0x934>
 8026902:	2a00      	cmp	r2, #0
 8026904:	f000 8113 	beq.w	8026b2e <Argus_Cal_GetDefaultCalibration+0x13b2>
 8026908:	2133      	movs	r1, #51	@ 0x33
 802690a:	74e1      	strb	r1, [r4, #19]
 802690c:	2122      	movs	r1, #34	@ 0x22
 802690e:	2b05      	cmp	r3, #5
 8026910:	74e1      	strb	r1, [r4, #19]
 8026912:	f43f a86a 	beq.w	80259ea <Argus_Cal_GetDefaultCalibration+0x26e>
 8026916:	2b04      	cmp	r3, #4
 8026918:	f43f aac0 	beq.w	8025e9c <Argus_Cal_GetDefaultCalibration+0x720>
 802691c:	2b03      	cmp	r3, #3
 802691e:	f43f abcf 	beq.w	80260c0 <Argus_Cal_GetDefaultCalibration+0x944>
 8026922:	210e      	movs	r1, #14
 8026924:	7521      	strb	r1, [r4, #20]
 8026926:	2a00      	cmp	r2, #0
 8026928:	d1d1      	bne.n	80268ce <Argus_Cal_GetDefaultCalibration+0x1152>
 802692a:	21f6      	movs	r1, #246	@ 0xf6
 802692c:	2b05      	cmp	r3, #5
 802692e:	7521      	strb	r1, [r4, #20]
 8026930:	f47f abd2 	bne.w	80260d8 <Argus_Cal_GetDefaultCalibration+0x95c>
 8026934:	f7ff bbd8 	b.w	80260e8 <Argus_Cal_GetDefaultCalibration+0x96c>
 8026938:	f102 011c 	add.w	r1, r2, #28
 802693c:	2b05      	cmp	r3, #5
 802693e:	73e1      	strb	r1, [r4, #15]
 8026940:	f43f a833 	beq.w	80259aa <Argus_Cal_GetDefaultCalibration+0x22e>
 8026944:	2a00      	cmp	r2, #0
 8026946:	f000 80e9 	beq.w	8026b1c <Argus_Cal_GetDefaultCalibration+0x13a0>
 802694a:	f06f 010b 	mvn.w	r1, #11
 802694e:	2b05      	cmp	r3, #5
 8026950:	7421      	strb	r1, [r4, #16]
 8026952:	f43f a832 	beq.w	80259ba <Argus_Cal_GetDefaultCalibration+0x23e>
 8026956:	2b04      	cmp	r3, #4
 8026958:	f43f aa82 	beq.w	8025e60 <Argus_Cal_GetDefaultCalibration+0x6e4>
 802695c:	2b03      	cmp	r3, #3
 802695e:	d06b      	beq.n	8026a38 <Argus_Cal_GetDefaultCalibration+0x12bc>
 8026960:	2a00      	cmp	r2, #0
 8026962:	f000 8497 	beq.w	8027294 <Argus_Cal_GetDefaultCalibration+0x1b18>
 8026966:	2146      	movs	r1, #70	@ 0x46
 8026968:	7461      	strb	r1, [r4, #17]
 802696a:	211d      	movs	r1, #29
 802696c:	2b05      	cmp	r3, #5
 802696e:	7461      	strb	r1, [r4, #17]
 8026970:	f43f a82b 	beq.w	80259ca <Argus_Cal_GetDefaultCalibration+0x24e>
 8026974:	2b04      	cmp	r3, #4
 8026976:	f43f aa7d 	beq.w	8025e74 <Argus_Cal_GetDefaultCalibration+0x6f8>
 802697a:	2b03      	cmp	r3, #3
 802697c:	d064      	beq.n	8026a48 <Argus_Cal_GetDefaultCalibration+0x12cc>
 802697e:	f1c2 0116 	rsb	r1, r2, #22
 8026982:	74a1      	strb	r1, [r4, #18]
 8026984:	2a00      	cmp	r2, #0
 8026986:	d1b1      	bne.n	80268ec <Argus_Cal_GetDefaultCalibration+0x1170>
 8026988:	210e      	movs	r1, #14
 802698a:	e7b0      	b.n	80268ee <Argus_Cal_GetDefaultCalibration+0x1172>
 802698c:	f102 012d 	add.w	r1, r2, #45	@ 0x2d
 8026990:	72a1      	strb	r1, [r4, #10]
 8026992:	2b04      	cmp	r3, #4
 8026994:	f43f aa32 	beq.w	8025dfc <Argus_Cal_GetDefaultCalibration+0x680>
 8026998:	2b03      	cmp	r3, #3
 802699a:	d078      	beq.n	8026a8e <Argus_Cal_GetDefaultCalibration+0x1312>
 802699c:	2a00      	cmp	r2, #0
 802699e:	f000 80a6 	beq.w	8026aee <Argus_Cal_GetDefaultCalibration+0x1372>
 80269a2:	2166      	movs	r1, #102	@ 0x66
 80269a4:	72e1      	strb	r1, [r4, #11]
 80269a6:	214f      	movs	r1, #79	@ 0x4f
 80269a8:	2b05      	cmp	r3, #5
 80269aa:	72e1      	strb	r1, [r4, #11]
 80269ac:	f43e afe0 	beq.w	8025970 <Argus_Cal_GetDefaultCalibration+0x1f4>
 80269b0:	2b04      	cmp	r3, #4
 80269b2:	f43f aa2c 	beq.w	8025e0e <Argus_Cal_GetDefaultCalibration+0x692>
 80269b6:	2b03      	cmp	r3, #3
 80269b8:	f43f ab6d 	beq.w	8026096 <Argus_Cal_GetDefaultCalibration+0x91a>
 80269bc:	2a00      	cmp	r2, #0
 80269be:	f000 8476 	beq.w	80272ae <Argus_Cal_GetDefaultCalibration+0x1b32>
 80269c2:	211b      	movs	r1, #27
 80269c4:	7321      	strb	r1, [r4, #12]
 80269c6:	21fe      	movs	r1, #254	@ 0xfe
 80269c8:	2b05      	cmp	r3, #5
 80269ca:	7321      	strb	r1, [r4, #12]
 80269cc:	f47f aaf2 	bne.w	8025fb4 <Argus_Cal_GetDefaultCalibration+0x838>
 80269d0:	211b      	movs	r1, #27
 80269d2:	7361      	strb	r1, [r4, #13]
 80269d4:	f7fe bfd7 	b.w	8025986 <Argus_Cal_GetDefaultCalibration+0x20a>
 80269d8:	2a00      	cmp	r2, #0
 80269da:	f000 82c5 	beq.w	8026f68 <Argus_Cal_GetDefaultCalibration+0x17ec>
 80269de:	2130      	movs	r1, #48	@ 0x30
 80269e0:	2d01      	cmp	r5, #1
 80269e2:	7561      	strb	r1, [r4, #21]
 80269e4:	f43f ab80 	beq.w	80260e8 <Argus_Cal_GetDefaultCalibration+0x96c>
 80269e8:	2100      	movs	r1, #0
 80269ea:	75a1      	strb	r1, [r4, #22]
 80269ec:	2a00      	cmp	r2, #0
 80269ee:	bf14      	ite	ne
 80269f0:	212d      	movne	r1, #45	@ 0x2d
 80269f2:	2130      	moveq	r1, #48	@ 0x30
 80269f4:	2d01      	cmp	r5, #1
 80269f6:	75e1      	strb	r1, [r4, #23]
 80269f8:	f47f ab1e 	bne.w	8026038 <Argus_Cal_GetDefaultCalibration+0x8bc>
 80269fc:	f7ff ba6d 	b.w	8025eda <Argus_Cal_GetDefaultCalibration+0x75e>
 8026a00:	2a00      	cmp	r2, #0
 8026a02:	f000 82f0 	beq.w	8026fe6 <Argus_Cal_GetDefaultCalibration+0x186a>
 8026a06:	212c      	movs	r1, #44	@ 0x2c
 8026a08:	2d01      	cmp	r5, #1
 8026a0a:	7361      	strb	r1, [r4, #13]
 8026a0c:	f000 80ea 	beq.w	8026be4 <Argus_Cal_GetDefaultCalibration+0x1468>
 8026a10:	2114      	movs	r1, #20
 8026a12:	73a1      	strb	r1, [r4, #14]
 8026a14:	2a00      	cmp	r2, #0
 8026a16:	bf14      	ite	ne
 8026a18:	2129      	movne	r1, #41	@ 0x29
 8026a1a:	212b      	moveq	r1, #43	@ 0x2b
 8026a1c:	2d01      	cmp	r5, #1
 8026a1e:	73e1      	strb	r1, [r4, #15]
 8026a20:	f000 80d3 	beq.w	8026bca <Argus_Cal_GetDefaultCalibration+0x144e>
 8026a24:	2a00      	cmp	r2, #0
 8026a26:	bf14      	ite	ne
 8026a28:	f06f 0124 	mvnne.w	r1, #36	@ 0x24
 8026a2c:	f06f 012b 	mvneq.w	r1, #43	@ 0x2b
 8026a30:	2d01      	cmp	r5, #1
 8026a32:	7421      	strb	r1, [r4, #16]
 8026a34:	f000 80c6 	beq.w	8026bc4 <Argus_Cal_GetDefaultCalibration+0x1448>
 8026a38:	2a00      	cmp	r2, #0
 8026a3a:	bf14      	ite	ne
 8026a3c:	212f      	movne	r1, #47	@ 0x2f
 8026a3e:	2136      	moveq	r1, #54	@ 0x36
 8026a40:	2d01      	cmp	r5, #1
 8026a42:	7461      	strb	r1, [r4, #17]
 8026a44:	f000 80ef 	beq.w	8026c26 <Argus_Cal_GetDefaultCalibration+0x14aa>
 8026a48:	2a00      	cmp	r2, #0
 8026a4a:	bf14      	ite	ne
 8026a4c:	2103      	movne	r1, #3
 8026a4e:	f06f 0101 	mvneq.w	r1, #1
 8026a52:	2d01      	cmp	r5, #1
 8026a54:	74a1      	strb	r1, [r4, #18]
 8026a56:	f47f ab2b 	bne.w	80260b0 <Argus_Cal_GetDefaultCalibration+0x934>
 8026a5a:	2110      	movs	r1, #16
 8026a5c:	74a1      	strb	r1, [r4, #18]
 8026a5e:	e74a      	b.n	80268f6 <Argus_Cal_GetDefaultCalibration+0x117a>
 8026a60:	f244 5170 	movw	r1, #17776	@ 0x4570
 8026a64:	f244 6c65 	movw	ip, #18021	@ 0x4665
 8026a68:	2a00      	cmp	r2, #0
 8026a6a:	bf08      	it	eq
 8026a6c:	4661      	moveq	r1, ip
 8026a6e:	2d01      	cmp	r5, #1
 8026a70:	8061      	strh	r1, [r4, #2]
 8026a72:	f43e af5b 	beq.w	802592c <Argus_Cal_GetDefaultCalibration+0x1b0>
 8026a76:	1f51      	subs	r1, r2, #5
 8026a78:	7221      	strb	r1, [r4, #8]
 8026a7a:	2a00      	cmp	r2, #0
 8026a7c:	f000 82ba 	beq.w	8026ff4 <Argus_Cal_GetDefaultCalibration+0x1878>
 8026a80:	2154      	movs	r1, #84	@ 0x54
 8026a82:	2d01      	cmp	r5, #1
 8026a84:	7261      	strb	r1, [r4, #9]
 8026a86:	f43f abda 	beq.w	802623e <Argus_Cal_GetDefaultCalibration+0xac2>
 8026a8a:	212c      	movs	r1, #44	@ 0x2c
 8026a8c:	72a1      	strb	r1, [r4, #10]
 8026a8e:	2a00      	cmp	r2, #0
 8026a90:	bf14      	ite	ne
 8026a92:	2153      	movne	r1, #83	@ 0x53
 8026a94:	2156      	moveq	r1, #86	@ 0x56
 8026a96:	2d01      	cmp	r5, #1
 8026a98:	72e1      	strb	r1, [r4, #11]
 8026a9a:	f47f aafc 	bne.w	8026096 <Argus_Cal_GetDefaultCalibration+0x91a>
 8026a9e:	214f      	movs	r1, #79	@ 0x4f
 8026aa0:	72e1      	strb	r1, [r4, #11]
 8026aa2:	e785      	b.n	80269b0 <Argus_Cal_GetDefaultCalibration+0x1234>
 8026aa4:	214a      	movs	r1, #74	@ 0x4a
 8026aa6:	e71b      	b.n	80268e0 <Argus_Cal_GetDefaultCalibration+0x1164>
 8026aa8:	49c4      	ldr	r1, [pc, #784]	@ (8026dbc <Argus_Cal_GetDefaultCalibration+0x1640>)
 8026aaa:	f8df c32c 	ldr.w	ip, [pc, #812]	@ 8026dd8 <Argus_Cal_GetDefaultCalibration+0x165c>
 8026aae:	f46f 7a86 	mvn.w	sl, #268	@ 0x10c
 8026ab2:	e9c4 c102 	strd	ip, r1, [r4, #8]
 8026ab6:	f5a1 1188 	sub.w	r1, r1, #1114112	@ 0x110000
 8026aba:	4451      	add	r1, sl
 8026abc:	6121      	str	r1, [r4, #16]
 8026abe:	f5a1 417e 	sub.w	r1, r1, #65024	@ 0xfe00
 8026ac2:	6161      	str	r1, [r4, #20]
 8026ac4:	2b04      	cmp	r3, #4
 8026ac6:	49be      	ldr	r1, [pc, #760]	@ (8026dc0 <Argus_Cal_GetDefaultCalibration+0x1644>)
 8026ac8:	6021      	str	r1, [r4, #0]
 8026aca:	f47f abe6 	bne.w	802629a <Argus_Cal_GetDefaultCalibration+0xb1e>
 8026ace:	4bbd      	ldr	r3, [pc, #756]	@ (8026dc4 <Argus_Cal_GetDefaultCalibration+0x1648>)
 8026ad0:	e9c4 3394 	strd	r3, r3, [r4, #592]	@ 0x250
 8026ad4:	f243 3333 	movw	r3, #13107	@ 0x3333
 8026ad8:	f8a4 309c 	strh.w	r3, [r4, #156]	@ 0x9c
 8026adc:	2a00      	cmp	r2, #0
 8026ade:	f000 8278 	beq.w	8026fd2 <Argus_Cal_GetDefaultCalibration+0x1856>
 8026ae2:	4ab9      	ldr	r2, [pc, #740]	@ (8026dc8 <Argus_Cal_GetDefaultCalibration+0x164c>)
 8026ae4:	4bb9      	ldr	r3, [pc, #740]	@ (8026dcc <Argus_Cal_GetDefaultCalibration+0x1650>)
 8026ae6:	e9c4 239d 	strd	r2, r3, [r4, #628]	@ 0x274
 8026aea:	f7ff bbf2 	b.w	80262d2 <Argus_Cal_GetDefaultCalibration+0xb56>
 8026aee:	2161      	movs	r1, #97	@ 0x61
 8026af0:	2d01      	cmp	r5, #1
 8026af2:	72e1      	strb	r1, [r4, #11]
 8026af4:	f000 83e7 	beq.w	80272c6 <Argus_Cal_GetDefaultCalibration+0x1b4a>
 8026af8:	211d      	movs	r1, #29
 8026afa:	7321      	strb	r1, [r4, #12]
 8026afc:	f7ff ba5a 	b.w	8025fb4 <Argus_Cal_GetDefaultCalibration+0x838>
 8026b00:	2112      	movs	r1, #18
 8026b02:	2d01      	cmp	r5, #1
 8026b04:	75a1      	strb	r1, [r4, #22]
 8026b06:	f47f aa89 	bne.w	802601c <Argus_Cal_GetDefaultCalibration+0x8a0>
 8026b0a:	210e      	movs	r1, #14
 8026b0c:	2b05      	cmp	r3, #5
 8026b0e:	75a1      	strb	r1, [r4, #22]
 8026b10:	f47f aa84 	bne.w	802601c <Argus_Cal_GetDefaultCalibration+0x8a0>
 8026b14:	212c      	movs	r1, #44	@ 0x2c
 8026b16:	75e1      	strb	r1, [r4, #23]
 8026b18:	f7ff b9df 	b.w	8025eda <Argus_Cal_GetDefaultCalibration+0x75e>
 8026b1c:	2110      	movs	r1, #16
 8026b1e:	2d01      	cmp	r5, #1
 8026b20:	7421      	strb	r1, [r4, #16]
 8026b22:	f000 83d3 	beq.w	80272cc <Argus_Cal_GetDefaultCalibration+0x1b50>
 8026b26:	2148      	movs	r1, #72	@ 0x48
 8026b28:	7461      	strb	r1, [r4, #17]
 8026b2a:	f7ff ba66 	b.w	8025ffa <Argus_Cal_GetDefaultCalibration+0x87e>
 8026b2e:	2136      	movs	r1, #54	@ 0x36
 8026b30:	2d01      	cmp	r5, #1
 8026b32:	74e1      	strb	r1, [r4, #19]
 8026b34:	f47f aa69 	bne.w	802600a <Argus_Cal_GetDefaultCalibration+0x88e>
 8026b38:	211f      	movs	r1, #31
 8026b3a:	e6e8      	b.n	802690e <Argus_Cal_GetDefaultCalibration+0x1192>
 8026b3c:	f241 2c59 	movw	ip, #4697	@ 0x1259
 8026b40:	2d01      	cmp	r5, #1
 8026b42:	f8a4 c274 	strh.w	ip, [r4, #628]	@ 0x274
 8026b46:	f47f a8c5 	bne.w	8025cd4 <Argus_Cal_GetDefaultCalibration+0x558>
 8026b4a:	f640 7ce5 	movw	ip, #4069	@ 0xfe5
 8026b4e:	2b05      	cmp	r3, #5
 8026b50:	f8a4 c274 	strh.w	ip, [r4, #628]	@ 0x274
 8026b54:	f47f a8be 	bne.w	8025cd4 <Argus_Cal_GetDefaultCalibration+0x558>
 8026b58:	f241 0cb9 	movw	ip, #4281	@ 0x10b9
 8026b5c:	2b05      	cmp	r3, #5
 8026b5e:	f8a4 c276 	strh.w	ip, [r4, #630]	@ 0x276
 8026b62:	d010      	beq.n	8026b86 <Argus_Cal_GetDefaultCalibration+0x140a>
 8026b64:	2b04      	cmp	r3, #4
 8026b66:	f43f acac 	beq.w	80264c2 <Argus_Cal_GetDefaultCalibration+0xd46>
 8026b6a:	2b03      	cmp	r3, #3
 8026b6c:	f000 83bb 	beq.w	80272e6 <Argus_Cal_GetDefaultCalibration+0x1b6a>
 8026b70:	2a00      	cmp	r2, #0
 8026b72:	f000 83af 	beq.w	80272d4 <Argus_Cal_GetDefaultCalibration+0x1b58>
 8026b76:	f241 0c78 	movw	ip, #4216	@ 0x1078
 8026b7a:	2b05      	cmp	r3, #5
 8026b7c:	f8a4 c278 	strh.w	ip, [r4, #632]	@ 0x278
 8026b80:	f47f acab 	bne.w	80264da <Argus_Cal_GetDefaultCalibration+0xd5e>
 8026b84:	e5ec      	b.n	8026760 <Argus_Cal_GetDefaultCalibration+0xfe4>
 8026b86:	2a00      	cmp	r2, #0
 8026b88:	f43f adfe 	beq.w	8026788 <Argus_Cal_GetDefaultCalibration+0x100c>
 8026b8c:	f7ff bae8 	b.w	8026160 <Argus_Cal_GetDefaultCalibration+0x9e4>
 8026b90:	f241 2c8a 	movw	ip, #4746	@ 0x128a
 8026b94:	2d01      	cmp	r5, #1
 8026b96:	f8a4 c276 	strh.w	ip, [r4, #630]	@ 0x276
 8026b9a:	f43f adca 	beq.w	8026732 <Argus_Cal_GetDefaultCalibration+0xfb6>
 8026b9e:	f241 2c7e 	movw	ip, #4734	@ 0x127e
 8026ba2:	f8a4 c278 	strh.w	ip, [r4, #632]	@ 0x278
 8026ba6:	f241 2c7b 	movw	ip, #4731	@ 0x127b
 8026baa:	f7ff b8a9 	b.w	8025d00 <Argus_Cal_GetDefaultCalibration+0x584>
 8026bae:	212f      	movs	r1, #47	@ 0x2f
 8026bb0:	2d01      	cmp	r5, #1
 8026bb2:	7221      	strb	r1, [r4, #8]
 8026bb4:	f000 8358 	beq.w	8027268 <Argus_Cal_GetDefaultCalibration+0x1aec>
 8026bb8:	2172      	movs	r1, #114	@ 0x72
 8026bba:	f7ff b9e2 	b.w	8025f82 <Argus_Cal_GetDefaultCalibration+0x806>
 8026bbe:	2122      	movs	r1, #34	@ 0x22
 8026bc0:	74e1      	strb	r1, [r4, #19]
 8026bc2:	e6a8      	b.n	8026916 <Argus_Cal_GetDefaultCalibration+0x119a>
 8026bc4:	21f4      	movs	r1, #244	@ 0xf4
 8026bc6:	7421      	strb	r1, [r4, #16]
 8026bc8:	e6c5      	b.n	8026956 <Argus_Cal_GetDefaultCalibration+0x11da>
 8026bca:	211d      	movs	r1, #29
 8026bcc:	2b04      	cmp	r3, #4
 8026bce:	73e1      	strb	r1, [r4, #15]
 8026bd0:	f43f a93c 	beq.w	8025e4c <Argus_Cal_GetDefaultCalibration+0x6d0>
 8026bd4:	2b03      	cmp	r3, #3
 8026bd6:	f43f af25 	beq.w	8026a24 <Argus_Cal_GetDefaultCalibration+0x12a8>
 8026bda:	2a00      	cmp	r2, #0
 8026bdc:	d09e      	beq.n	8026b1c <Argus_Cal_GetDefaultCalibration+0x13a0>
 8026bde:	210e      	movs	r1, #14
 8026be0:	7421      	strb	r1, [r4, #16]
 8026be2:	e6b2      	b.n	802694a <Argus_Cal_GetDefaultCalibration+0x11ce>
 8026be4:	211b      	movs	r1, #27
 8026be6:	2b05      	cmp	r3, #5
 8026be8:	7361      	strb	r1, [r4, #13]
 8026bea:	f43e aecc 	beq.w	8025986 <Argus_Cal_GetDefaultCalibration+0x20a>
 8026bee:	2b04      	cmp	r3, #4
 8026bf0:	d112      	bne.n	8026c18 <Argus_Cal_GetDefaultCalibration+0x149c>
 8026bf2:	2a00      	cmp	r2, #0
 8026bf4:	bf14      	ite	ne
 8026bf6:	f06f 0115 	mvnne.w	r1, #21
 8026bfa:	f06f 013e 	mvneq.w	r1, #62	@ 0x3e
 8026bfe:	73a1      	strb	r1, [r4, #14]
 8026c00:	2118      	movs	r1, #24
 8026c02:	73a1      	strb	r1, [r4, #14]
 8026c04:	2b04      	cmp	r3, #4
 8026c06:	f47f a9e6 	bne.w	8025fd6 <Argus_Cal_GetDefaultCalibration+0x85a>
 8026c0a:	f7ff b915 	b.w	8025e38 <Argus_Cal_GetDefaultCalibration+0x6bc>
 8026c0e:	211b      	movs	r1, #27
 8026c10:	2b05      	cmp	r3, #5
 8026c12:	7361      	strb	r1, [r4, #13]
 8026c14:	f43e aeb7 	beq.w	8025986 <Argus_Cal_GetDefaultCalibration+0x20a>
 8026c18:	2b03      	cmp	r3, #3
 8026c1a:	f000 8316 	beq.w	802724a <Argus_Cal_GetDefaultCalibration+0x1ace>
 8026c1e:	f1c2 0119 	rsb	r1, r2, #25
 8026c22:	73a1      	strb	r1, [r4, #14]
 8026c24:	e7ee      	b.n	8026c04 <Argus_Cal_GetDefaultCalibration+0x1488>
 8026c26:	211d      	movs	r1, #29
 8026c28:	7461      	strb	r1, [r4, #17]
 8026c2a:	e6a3      	b.n	8026974 <Argus_Cal_GetDefaultCalibration+0x11f8>
 8026c2c:	f241 0cb9 	movw	ip, #4281	@ 0x10b9
 8026c30:	f8a4 c276 	strh.w	ip, [r4, #630]	@ 0x276
 8026c34:	e796      	b.n	8026b64 <Argus_Cal_GetDefaultCalibration+0x13e8>
 8026c36:	f241 0ce6 	movw	ip, #4326	@ 0x10e6
 8026c3a:	f8a4 c274 	strh.w	ip, [r4, #628]	@ 0x274
 8026c3e:	f7ff b849 	b.w	8025cd4 <Argus_Cal_GetDefaultCalibration+0x558>
 8026c42:	f240 6153 	movw	r1, #1619	@ 0x653
 8026c46:	e570      	b.n	802672a <Argus_Cal_GetDefaultCalibration+0xfae>
 8026c48:	f240 41c3 	movw	r1, #1219	@ 0x4c3
 8026c4c:	e546      	b.n	80266dc <Argus_Cal_GetDefaultCalibration+0xf60>
 8026c4e:	2a00      	cmp	r2, #0
 8026c50:	f000 82f2 	beq.w	8027238 <Argus_Cal_GetDefaultCalibration+0x1abc>
 8026c54:	f640 2196 	movw	r1, #2710	@ 0xa96
 8026c58:	2d01      	cmp	r5, #1
 8026c5a:	f8a4 123e 	strh.w	r1, [r4, #574]	@ 0x23e
 8026c5e:	f43f ad23 	beq.w	80266a8 <Argus_Cal_GetDefaultCalibration+0xf2c>
 8026c62:	e4c7      	b.n	80265f4 <Argus_Cal_GetDefaultCalibration+0xe78>
 8026c64:	2a00      	cmp	r2, #0
 8026c66:	f000 82de 	beq.w	8027226 <Argus_Cal_GetDefaultCalibration+0x1aaa>
 8026c6a:	f240 317f 	movw	r1, #895	@ 0x37f
 8026c6e:	2d01      	cmp	r5, #1
 8026c70:	f8a4 1230 	strh.w	r1, [r4, #560]	@ 0x230
 8026c74:	f43f ad25 	beq.w	80266c2 <Argus_Cal_GetDefaultCalibration+0xf46>
 8026c78:	e4a0      	b.n	80265bc <Argus_Cal_GetDefaultCalibration+0xe40>
 8026c7a:	2a00      	cmp	r2, #0
 8026c7c:	f000 82ca 	beq.w	8027214 <Argus_Cal_GetDefaultCalibration+0x1a98>
 8026c80:	f240 2172 	movw	r1, #626	@ 0x272
 8026c84:	2d01      	cmp	r5, #1
 8026c86:	f8a4 122c 	strh.w	r1, [r4, #556]	@ 0x22c
 8026c8a:	f43f aa81 	beq.w	8026190 <Argus_Cal_GetDefaultCalibration+0xa14>
 8026c8e:	e48d      	b.n	80265ac <Argus_Cal_GetDefaultCalibration+0xe30>
 8026c90:	f241 3cf9 	movw	ip, #5113	@ 0x13f9
 8026c94:	f8a4 c27a 	strh.w	ip, [r4, #634]	@ 0x27a
 8026c98:	f7ff b834 	b.w	8025d04 <Argus_Cal_GetDefaultCalibration+0x588>
 8026c9c:	f240 6125 	movw	r1, #1573	@ 0x625
 8026ca0:	e45a      	b.n	8026558 <Argus_Cal_GetDefaultCalibration+0xddc>
 8026ca2:	f240 41c3 	movw	r1, #1219	@ 0x4c3
 8026ca6:	e4c8      	b.n	802663a <Argus_Cal_GetDefaultCalibration+0xebe>
 8026ca8:	21ed      	movs	r1, #237	@ 0xed
 8026caa:	2d01      	cmp	r5, #1
 8026cac:	7561      	strb	r1, [r4, #21]
 8026cae:	f43f aa1b 	beq.w	80260e8 <Argus_Cal_GetDefaultCalibration+0x96c>
 8026cb2:	f06f 0149 	mvn.w	r1, #73	@ 0x49
 8026cb6:	f7ff b905 	b.w	8025ec4 <Argus_Cal_GetDefaultCalibration+0x748>
 8026cba:	212a      	movs	r1, #42	@ 0x2a
 8026cbc:	2d01      	cmp	r5, #1
 8026cbe:	7261      	strb	r1, [r4, #9]
 8026cc0:	f43f aabd 	beq.w	802623e <Argus_Cal_GetDefaultCalibration+0xac2>
 8026cc4:	f06f 010d 	mvn.w	r1, #13
 8026cc8:	f7ff b897 	b.w	8025dfa <Argus_Cal_GetDefaultCalibration+0x67e>
 8026ccc:	2a00      	cmp	r2, #0
 8026cce:	f000 828c 	beq.w	80271ea <Argus_Cal_GetDefaultCalibration+0x1a6e>
 8026cd2:	f640 717d 	movw	r1, #3965	@ 0xf7d
 8026cd6:	2d01      	cmp	r5, #1
 8026cd8:	f8a4 1236 	strh.w	r1, [r4, #566]	@ 0x236
 8026cdc:	f43f acad 	beq.w	802663a <Argus_Cal_GetDefaultCalibration+0xebe>
 8026ce0:	e458      	b.n	8026594 <Argus_Cal_GetDefaultCalibration+0xe18>
 8026ce2:	2a00      	cmp	r2, #0
 8026ce4:	f000 8266 	beq.w	80271b4 <Argus_Cal_GetDefaultCalibration+0x1a38>
 8026ce8:	f640 113b 	movw	r1, #2363	@ 0x93b
 8026cec:	2d01      	cmp	r5, #1
 8026cee:	f8a4 1238 	strh.w	r1, [r4, #568]	@ 0x238
 8026cf2:	f43f acb2 	beq.w	802665a <Argus_Cal_GetDefaultCalibration+0xede>
 8026cf6:	e451      	b.n	802659c <Argus_Cal_GetDefaultCalibration+0xe20>
 8026cf8:	21f8      	movs	r1, #248	@ 0xf8
 8026cfa:	2d01      	cmp	r5, #1
 8026cfc:	7361      	strb	r1, [r4, #13]
 8026cfe:	f43f af71 	beq.w	8026be4 <Argus_Cal_GetDefaultCalibration+0x1468>
 8026d02:	f06f 013e 	mvn.w	r1, #62	@ 0x3e
 8026d06:	f7ff b896 	b.w	8025e36 <Argus_Cal_GetDefaultCalibration+0x6ba>
 8026d0a:	f44f 7150 	mov.w	r1, #832	@ 0x340
 8026d0e:	e4f2      	b.n	80266f6 <Argus_Cal_GetDefaultCalibration+0xf7a>
 8026d10:	f44f 7150 	mov.w	r1, #832	@ 0x340
 8026d14:	e4ae      	b.n	8026674 <Argus_Cal_GetDefaultCalibration+0xef8>
 8026d16:	f240 6125 	movw	r1, #1573	@ 0x625
 8026d1a:	e4b8      	b.n	802668e <Argus_Cal_GetDefaultCalibration+0xf12>
 8026d1c:	f240 6153 	movw	r1, #1619	@ 0x653
 8026d20:	e40d      	b.n	802653e <Argus_Cal_GetDefaultCalibration+0xdc2>
 8026d22:	f240 41c3 	movw	r1, #1219	@ 0x4c3
 8026d26:	e4bf      	b.n	80266a8 <Argus_Cal_GetDefaultCalibration+0xf2c>
 8026d28:	2a00      	cmp	r2, #0
 8026d2a:	f000 81b9 	beq.w	80270a0 <Argus_Cal_GetDefaultCalibration+0x1924>
 8026d2e:	f241 419c 	movw	r1, #5276	@ 0x149c
 8026d32:	2d01      	cmp	r5, #1
 8026d34:	f8a4 1246 	strh.w	r1, [r4, #582]	@ 0x246
 8026d38:	f43f abf4 	beq.w	8026524 <Argus_Cal_GetDefaultCalibration+0xda8>
 8026d3c:	e44a      	b.n	80265d4 <Argus_Cal_GetDefaultCalibration+0xe58>
 8026d3e:	2a00      	cmp	r2, #0
 8026d40:	f000 81b7 	beq.w	80270b2 <Argus_Cal_GetDefaultCalibration+0x1936>
 8026d44:	f240 31fb 	movw	r1, #1019	@ 0x3fb
 8026d48:	2d01      	cmp	r5, #1
 8026d4a:	f8a4 1240 	strh.w	r1, [r4, #576]	@ 0x240
 8026d4e:	f43f abf6 	beq.w	802653e <Argus_Cal_GetDefaultCalibration+0xdc2>
 8026d52:	e453      	b.n	80265fc <Argus_Cal_GetDefaultCalibration+0xe80>
 8026d54:	2a00      	cmp	r2, #0
 8026d56:	f000 81be 	beq.w	80270d6 <Argus_Cal_GetDefaultCalibration+0x195a>
 8026d5a:	f240 4171 	movw	r1, #1137	@ 0x471
 8026d5e:	2d01      	cmp	r5, #1
 8026d60:	f8a4 123c 	strh.w	r1, [r4, #572]	@ 0x23c
 8026d64:	f43f ac86 	beq.w	8026674 <Argus_Cal_GetDefaultCalibration+0xef8>
 8026d68:	e440      	b.n	80265ec <Argus_Cal_GetDefaultCalibration+0xe70>
 8026d6a:	2a00      	cmp	r2, #0
 8026d6c:	f000 81aa 	beq.w	80270c4 <Argus_Cal_GetDefaultCalibration+0x1948>
 8026d70:	f640 6107 	movw	r1, #3591	@ 0xe07
 8026d74:	2d01      	cmp	r5, #1
 8026d76:	f8a4 123a 	strh.w	r1, [r4, #570]	@ 0x23a
 8026d7a:	f43f abed 	beq.w	8026558 <Argus_Cal_GetDefaultCalibration+0xddc>
 8026d7e:	e411      	b.n	80265a4 <Argus_Cal_GetDefaultCalibration+0xe28>
 8026d80:	2a00      	cmp	r2, #0
 8026d82:	f000 81b1 	beq.w	80270e8 <Argus_Cal_GetDefaultCalibration+0x196c>
 8026d86:	f640 51a8 	movw	r1, #3496	@ 0xda8
 8026d8a:	2d01      	cmp	r5, #1
 8026d8c:	f8a4 124a 	strh.w	r1, [r4, #586]	@ 0x24a
 8026d90:	f43f ac7d 	beq.w	802668e <Argus_Cal_GetDefaultCalibration+0xf12>
 8026d94:	e426      	b.n	80265e4 <Argus_Cal_GetDefaultCalibration+0xe68>
 8026d96:	2a00      	cmp	r2, #0
 8026d98:	f000 8230 	beq.w	80271fc <Argus_Cal_GetDefaultCalibration+0x1a80>
 8026d9c:	f640 11ff 	movw	r1, #2559	@ 0x9ff
 8026da0:	2d01      	cmp	r5, #1
 8026da2:	f8a4 1242 	strh.w	r1, [r4, #578]	@ 0x242
 8026da6:	f43f abe4 	beq.w	8026572 <Argus_Cal_GetDefaultCalibration+0xdf6>
 8026daa:	f7ff bb4a 	b.w	8026442 <Argus_Cal_GetDefaultCalibration+0xcc6>
 8026dae:	f06f 09a3 	mvn.w	r9, #163	@ 0xa3
 8026db2:	f06f 0ef5 	mvn.w	lr, #245	@ 0xf5
 8026db6:	f240 5143 	movw	r1, #1347	@ 0x543
 8026dba:	e42d      	b.n	8026618 <Argus_Cal_GetDefaultCalibration+0xe9c>
 8026dbc:	3326471b 	.word	0x3326471b
 8026dc0:	460b8000 	.word	0x460b8000
 8026dc4:	ff5cff0a 	.word	0xff5cff0a
 8026dc8:	12ca130c 	.word	0x12ca130c
 8026dcc:	11651243 	.word	0x11651243
 8026dd0:	01e0b860 	.word	0x01e0b860
 8026dd4:	42433062 	.word	0x42433062
 8026dd8:	663e6c2d 	.word	0x663e6c2d
 8026ddc:	2a00      	cmp	r2, #0
 8026dde:	f000 8110 	beq.w	8027002 <Argus_Cal_GetDefaultCalibration+0x1886>
 8026de2:	4bd5      	ldr	r3, [pc, #852]	@ (8027138 <Argus_Cal_GetDefaultCalibration+0x19bc>)
 8026de4:	6023      	str	r3, [r4, #0]
 8026de6:	f103 53d9 	add.w	r3, r3, #455081984	@ 0x1b200000
 8026dea:	f503 13d7 	add.w	r3, r3, #1761280	@ 0x1ae000
 8026dee:	f603 3318 	addw	r3, r3, #2840	@ 0xb18
 8026df2:	4ad2      	ldr	r2, [pc, #840]	@ (802713c <Argus_Cal_GetDefaultCalibration+0x19c0>)
 8026df4:	60a3      	str	r3, [r4, #8]
 8026df6:	4bd2      	ldr	r3, [pc, #840]	@ (8027140 <Argus_Cal_GetDefaultCalibration+0x19c4>)
 8026df8:	48d2      	ldr	r0, [pc, #840]	@ (8027144 <Argus_Cal_GetDefaultCalibration+0x19c8>)
 8026dfa:	f8a4 e250 	strh.w	lr, [r4, #592]	@ 0x250
 8026dfe:	e9c4 2303 	strd	r2, r3, [r4, #12]
 8026e02:	4bd1      	ldr	r3, [pc, #836]	@ (8027148 <Argus_Cal_GetDefaultCalibration+0x19cc>)
 8026e04:	6163      	str	r3, [r4, #20]
 8026e06:	4bd1      	ldr	r3, [pc, #836]	@ (802714c <Argus_Cal_GetDefaultCalibration+0x19d0>)
 8026e08:	f8c4 3274 	str.w	r3, [r4, #628]	@ 0x274
 8026e0c:	f5a3 0315 	sub.w	r3, r3, #9764864	@ 0x950000
 8026e10:	3b1c      	subs	r3, #28
 8026e12:	f8c4 3278 	str.w	r3, [r4, #632]	@ 0x278
 8026e16:	4bce      	ldr	r3, [pc, #824]	@ (8027150 <Argus_Cal_GetDefaultCalibration+0x19d4>)
 8026e18:	f8c4 322c 	str.w	r3, [r4, #556]	@ 0x22c
 8026e1c:	f503 136c 	add.w	r3, r3, #3866624	@ 0x3b0000
 8026e20:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8026e24:	f8c4 3230 	str.w	r3, [r4, #560]	@ 0x230
 8026e28:	4bca      	ldr	r3, [pc, #808]	@ (8027154 <Argus_Cal_GetDefaultCalibration+0x19d8>)
 8026e2a:	f8a4 e254 	strh.w	lr, [r4, #596]	@ 0x254
 8026e2e:	e9c4 0391 	strd	r0, r3, [r4, #580]	@ 0x244
 8026e32:	4bc9      	ldr	r3, [pc, #804]	@ (8027158 <Argus_Cal_GetDefaultCalibration+0x19dc>)
 8026e34:	f8c4 3236 	str.w	r3, [r4, #566]	@ 0x236
 8026e38:	f503 03d2 	add.w	r3, r3, #6881280	@ 0x690000
 8026e3c:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8026e40:	f8c4 323a 	str.w	r3, [r4, #570]	@ 0x23a
 8026e44:	f103 73cf 	add.w	r3, r3, #27131904	@ 0x19e0000
 8026e48:	330f      	adds	r3, #15
 8026e4a:	f8c4 323e 	str.w	r3, [r4, #574]	@ 0x23e
 8026e4e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8026e52:	6063      	str	r3, [r4, #4]
 8026e54:	f243 3333 	movw	r3, #13107	@ 0x3333
 8026e58:	f8a4 309c 	strh.w	r3, [r4, #156]	@ 0x9c
 8026e5c:	2361      	movs	r3, #97	@ 0x61
 8026e5e:	f8a4 3234 	strh.w	r3, [r4, #564]	@ 0x234
 8026e62:	f8a4 9252 	strh.w	r9, [r4, #594]	@ 0x252
 8026e66:	f8a4 9256 	strh.w	r9, [r4, #598]	@ 0x256
 8026e6a:	f640 73f3 	movw	r3, #4083	@ 0xff3
 8026e6e:	f7ff ba59 	b.w	8026324 <Argus_Cal_GetDefaultCalibration+0xba8>
 8026e72:	f240 6153 	movw	r1, #1619	@ 0x653
 8026e76:	e424      	b.n	80266c2 <Argus_Cal_GetDefaultCalibration+0xf46>
 8026e78:	f240 6125 	movw	r1, #1573	@ 0x625
 8026e7c:	e448      	b.n	8026710 <Argus_Cal_GetDefaultCalibration+0xf94>
 8026e7e:	2a00      	cmp	r2, #0
 8026e80:	f000 8150 	beq.w	8027124 <Argus_Cal_GetDefaultCalibration+0x19a8>
 8026e84:	f44f 61d7 	mov.w	r1, #1720	@ 0x6b8
 8026e88:	2d01      	cmp	r5, #1
 8026e8a:	f8a4 122e 	strh.w	r1, [r4, #558]	@ 0x22e
 8026e8e:	f43f ac25 	beq.w	80266dc <Argus_Cal_GetDefaultCalibration+0xf60>
 8026e92:	f7ff bb8f 	b.w	80265b4 <Argus_Cal_GetDefaultCalibration+0xe38>
 8026e96:	2a00      	cmp	r2, #0
 8026e98:	f000 8195 	beq.w	80271c6 <Argus_Cal_GetDefaultCalibration+0x1a4a>
 8026e9c:	f640 217f 	movw	r1, #2687	@ 0xa7f
 8026ea0:	2d01      	cmp	r5, #1
 8026ea2:	f8a4 1244 	strh.w	r1, [r4, #580]	@ 0x244
 8026ea6:	f43f ac26 	beq.w	80266f6 <Argus_Cal_GetDefaultCalibration+0xf7a>
 8026eaa:	f7ff bb8f 	b.w	80265cc <Argus_Cal_GetDefaultCalibration+0xe50>
 8026eae:	2a00      	cmp	r2, #0
 8026eb0:	f000 8192 	beq.w	80271d8 <Argus_Cal_GetDefaultCalibration+0x1a5c>
 8026eb4:	f240 61ed 	movw	r1, #1773	@ 0x6ed
 8026eb8:	2d01      	cmp	r5, #1
 8026eba:	f8a4 1232 	strh.w	r1, [r4, #562]	@ 0x232
 8026ebe:	f43f ac27 	beq.w	8026710 <Argus_Cal_GetDefaultCalibration+0xf94>
 8026ec2:	f7ff bb7f 	b.w	80265c4 <Argus_Cal_GetDefaultCalibration+0xe48>
 8026ec6:	49a5      	ldr	r1, [pc, #660]	@ (802715c <Argus_Cal_GetDefaultCalibration+0x19e0>)
 8026ec8:	61a1      	str	r1, [r4, #24]
 8026eca:	212c      	movs	r1, #44	@ 0x2c
 8026ecc:	75e1      	strb	r1, [r4, #23]
 8026ece:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8026ed2:	8021      	strh	r1, [r4, #0]
 8026ed4:	1e19      	subs	r1, r3, #0
 8026ed6:	bf18      	it	ne
 8026ed8:	2101      	movne	r1, #1
 8026eda:	f884 124c 	strb.w	r1, [r4, #588]	@ 0x24c
 8026ede:	f7ff b8b8 	b.w	8026052 <Argus_Cal_GetDefaultCalibration+0x8d6>
 8026ee2:	f240 6125 	movw	r1, #1573	@ 0x625
 8026ee6:	f7ff bb44 	b.w	8026572 <Argus_Cal_GetDefaultCalibration+0xdf6>
 8026eea:	f240 41c3 	movw	r1, #1219	@ 0x4c3
 8026eee:	f7ff bb19 	b.w	8026524 <Argus_Cal_GetDefaultCalibration+0xda8>
 8026ef2:	2a00      	cmp	r2, #0
 8026ef4:	f000 80cb 	beq.w	802708e <Argus_Cal_GetDefaultCalibration+0x1912>
 8026ef8:	f44f 612a 	mov.w	r1, #2720	@ 0xaa0
 8026efc:	2d01      	cmp	r5, #1
 8026efe:	f8a4 1248 	strh.w	r1, [r4, #584]	@ 0x248
 8026f02:	f43f ac12 	beq.w	802672a <Argus_Cal_GetDefaultCalibration+0xfae>
 8026f06:	f7ff bb69 	b.w	80265dc <Argus_Cal_GetDefaultCalibration+0xe60>
 8026f0a:	f240 6153 	movw	r1, #1619	@ 0x653
 8026f0e:	f7ff bba4 	b.w	802665a <Argus_Cal_GetDefaultCalibration+0xede>
 8026f12:	210d      	movs	r1, #13
 8026f14:	75a1      	strb	r1, [r4, #22]
 8026f16:	2a00      	cmp	r2, #0
 8026f18:	f43f adfc 	beq.w	8026b14 <Argus_Cal_GetDefaultCalibration+0x1398>
 8026f1c:	f7fe bfdd 	b.w	8025eda <Argus_Cal_GetDefaultCalibration+0x75e>
 8026f20:	f240 5143 	movw	r1, #1347	@ 0x543
 8026f24:	f7ff b934 	b.w	8026190 <Argus_Cal_GetDefaultCalibration+0xa14>
 8026f28:	f102 0121 	add.w	r1, r2, #33	@ 0x21
 8026f2c:	75e1      	strb	r1, [r4, #23]
 8026f2e:	f7ff b883 	b.w	8026038 <Argus_Cal_GetDefaultCalibration+0x8bc>
 8026f32:	2a00      	cmp	r2, #0
 8026f34:	bf14      	ite	ne
 8026f36:	210c      	movne	r1, #12
 8026f38:	f06f 010d 	mvneq.w	r1, #13
 8026f3c:	2d01      	cmp	r5, #1
 8026f3e:	72a1      	strb	r1, [r4, #10]
 8026f40:	f47e af5c 	bne.w	8025dfc <Argus_Cal_GetDefaultCalibration+0x680>
 8026f44:	212e      	movs	r1, #46	@ 0x2e
 8026f46:	72a1      	strb	r1, [r4, #10]
 8026f48:	e523      	b.n	8026992 <Argus_Cal_GetDefaultCalibration+0x1216>
 8026f4a:	2a00      	cmp	r2, #0
 8026f4c:	bf14      	ite	ne
 8026f4e:	f06f 0130 	mvnne.w	r1, #48	@ 0x30
 8026f52:	f06f 0149 	mvneq.w	r1, #73	@ 0x49
 8026f56:	75a1      	strb	r1, [r4, #22]
 8026f58:	210d      	movs	r1, #13
 8026f5a:	75a1      	strb	r1, [r4, #22]
 8026f5c:	f7ff b85e 	b.w	802601c <Argus_Cal_GetDefaultCalibration+0x8a0>
 8026f60:	f641 2c0a 	movw	ip, #6666	@ 0x1a0a
 8026f64:	f7ff bab4 	b.w	80264d0 <Argus_Cal_GetDefaultCalibration+0xd54>
 8026f68:	2136      	movs	r1, #54	@ 0x36
 8026f6a:	2d01      	cmp	r5, #1
 8026f6c:	7561      	strb	r1, [r4, #21]
 8026f6e:	f43f a8bb 	beq.w	80260e8 <Argus_Cal_GetDefaultCalibration+0x96c>
 8026f72:	f06f 0103 	mvn.w	r1, #3
 8026f76:	e538      	b.n	80269ea <Argus_Cal_GetDefaultCalibration+0x126e>
 8026f78:	f644 42cd 	movw	r2, #19661	@ 0x4ccd
 8026f7c:	2b05      	cmp	r3, #5
 8026f7e:	f8a4 209c 	strh.w	r2, [r4, #156]	@ 0x9c
 8026f82:	d126      	bne.n	8026fd2 <Argus_Cal_GetDefaultCalibration+0x1856>
 8026f84:	4b76      	ldr	r3, [pc, #472]	@ (8027160 <Argus_Cal_GetDefaultCalibration+0x19e4>)
 8026f86:	f8c4 3274 	str.w	r3, [r4, #628]	@ 0x274
 8026f8a:	f46f 7298 	mvn.w	r2, #304	@ 0x130
 8026f8e:	f1a3 73a4 	sub.w	r3, r3, #21495808	@ 0x1480000
 8026f92:	4413      	add	r3, r2
 8026f94:	f8c4 3278 	str.w	r3, [r4, #632]	@ 0x278
 8026f98:	4b72      	ldr	r3, [pc, #456]	@ (8027164 <Argus_Cal_GetDefaultCalibration+0x19e8>)
 8026f9a:	f8c4 3244 	str.w	r3, [r4, #580]	@ 0x244
 8026f9e:	f503 033a 	add.w	r3, r3, #12189696	@ 0xba0000
 8026fa2:	33cb      	adds	r3, #203	@ 0xcb
 8026fa4:	f8df e1f8 	ldr.w	lr, [pc, #504]	@ 80271a0 <Argus_Cal_GetDefaultCalibration+0x1a24>
 8026fa8:	f8c4 3248 	str.w	r3, [r4, #584]	@ 0x248
 8026fac:	4b6e      	ldr	r3, [pc, #440]	@ (8027168 <Argus_Cal_GetDefaultCalibration+0x19ec>)
 8026fae:	f8df 91f4 	ldr.w	r9, [pc, #500]	@ 80271a4 <Argus_Cal_GetDefaultCalibration+0x1a28>
 8026fb2:	e9c4 e38b 	strd	lr, r3, [r4, #556]	@ 0x22c
 8026fb6:	4b6d      	ldr	r3, [pc, #436]	@ (802716c <Argus_Cal_GetDefaultCalibration+0x19f0>)
 8026fb8:	e9c4 938d 	strd	r9, r3, [r4, #564]	@ 0x234
 8026fbc:	4b6c      	ldr	r3, [pc, #432]	@ (8027170 <Argus_Cal_GetDefaultCalibration+0x19f4>)
 8026fbe:	f8c4 323c 	str.w	r3, [r4, #572]	@ 0x23c
 8026fc2:	f240 13b7 	movw	r3, #439	@ 0x1b7
 8026fc6:	f8a4 3240 	strh.w	r3, [r4, #576]	@ 0x240
 8026fca:	f240 73ec 	movw	r3, #2028	@ 0x7ec
 8026fce:	f7ff b9a9 	b.w	8026324 <Argus_Cal_GetDefaultCalibration+0xba8>
 8026fd2:	4b68      	ldr	r3, [pc, #416]	@ (8027174 <Argus_Cal_GetDefaultCalibration+0x19f8>)
 8026fd4:	f8c4 3274 	str.w	r3, [r4, #628]	@ 0x274
 8026fd8:	f5a3 236f 	sub.w	r3, r3, #978944	@ 0xef000
 8026fdc:	f6a3 73db 	subw	r3, r3, #4059	@ 0xfdb
 8026fe0:	f8c4 3278 	str.w	r3, [r4, #632]	@ 0x278
 8026fe4:	e7d8      	b.n	8026f98 <Argus_Cal_GetDefaultCalibration+0x181c>
 8026fe6:	2133      	movs	r1, #51	@ 0x33
 8026fe8:	2d01      	cmp	r5, #1
 8026fea:	7361      	strb	r1, [r4, #13]
 8026fec:	f43f adfa 	beq.w	8026be4 <Argus_Cal_GetDefaultCalibration+0x1468>
 8026ff0:	2111      	movs	r1, #17
 8026ff2:	e50e      	b.n	8026a12 <Argus_Cal_GetDefaultCalibration+0x1296>
 8026ff4:	215e      	movs	r1, #94	@ 0x5e
 8026ff6:	2d01      	cmp	r5, #1
 8026ff8:	7261      	strb	r1, [r4, #9]
 8026ffa:	f43f a920 	beq.w	802623e <Argus_Cal_GetDefaultCalibration+0xac2>
 8026ffe:	212a      	movs	r1, #42	@ 0x2a
 8027000:	e544      	b.n	8026a8c <Argus_Cal_GetDefaultCalibration+0x1310>
 8027002:	4b5d      	ldr	r3, [pc, #372]	@ (8027178 <Argus_Cal_GetDefaultCalibration+0x19fc>)
 8027004:	f8a4 e250 	strh.w	lr, [r4, #592]	@ 0x250
 8027008:	f8a4 e254 	strh.w	lr, [r4, #596]	@ 0x254
 802700c:	f8df e198 	ldr.w	lr, [pc, #408]	@ 80271a8 <Argus_Cal_GetDefaultCalibration+0x1a2c>
 8027010:	f8a4 9252 	strh.w	r9, [r4, #594]	@ 0x252
 8027014:	e9c4 e300 	strd	lr, r3, [r4]
 8027018:	f1a3 43d1 	sub.w	r3, r3, #1753219072	@ 0x68800000
 802701c:	f5a3 33b5 	sub.w	r3, r3, #92672	@ 0x16a00
 8027020:	3bda      	subs	r3, #218	@ 0xda
 8027022:	60a3      	str	r3, [r4, #8]
 8027024:	4b55      	ldr	r3, [pc, #340]	@ (802717c <Argus_Cal_GetDefaultCalibration+0x1a00>)
 8027026:	60e3      	str	r3, [r4, #12]
 8027028:	f103 2306 	add.w	r3, r3, #100664832	@ 0x6000600
 802702c:	f503 0376 	add.w	r3, r3, #16121856	@ 0xf60000
 8027030:	33fa      	adds	r3, #250	@ 0xfa
 8027032:	6123      	str	r3, [r4, #16]
 8027034:	f1a3 7382 	sub.w	r3, r3, #17039360	@ 0x1040000
 8027038:	3b01      	subs	r3, #1
 802703a:	6163      	str	r3, [r4, #20]
 802703c:	4b50      	ldr	r3, [pc, #320]	@ (8027180 <Argus_Cal_GetDefaultCalibration+0x1a04>)
 802703e:	f8c4 3274 	str.w	r3, [r4, #628]	@ 0x274
 8027042:	f5a3 03d2 	sub.w	r3, r3, #6881280	@ 0x690000
 8027046:	3b43      	subs	r3, #67	@ 0x43
 8027048:	f8a4 9256 	strh.w	r9, [r4, #598]	@ 0x256
 802704c:	f8c4 3278 	str.w	r3, [r4, #632]	@ 0x278
 8027050:	f8df 9158 	ldr.w	r9, [pc, #344]	@ 80271ac <Argus_Cal_GetDefaultCalibration+0x1a30>
 8027054:	4b4b      	ldr	r3, [pc, #300]	@ (8027184 <Argus_Cal_GetDefaultCalibration+0x1a08>)
 8027056:	f8df a158 	ldr.w	sl, [pc, #344]	@ 80271b0 <Argus_Cal_GetDefaultCalibration+0x1a34>
 802705a:	e9c4 938b 	strd	r9, r3, [r4, #556]	@ 0x22c
 802705e:	4b4a      	ldr	r3, [pc, #296]	@ (8027188 <Argus_Cal_GetDefaultCalibration+0x1a0c>)
 8027060:	e9c4 a391 	strd	sl, r3, [r4, #580]	@ 0x244
 8027064:	4b49      	ldr	r3, [pc, #292]	@ (802718c <Argus_Cal_GetDefaultCalibration+0x1a10>)
 8027066:	f8c4 3236 	str.w	r3, [r4, #566]	@ 0x236
 802706a:	4b49      	ldr	r3, [pc, #292]	@ (8027190 <Argus_Cal_GetDefaultCalibration+0x1a14>)
 802706c:	f8c4 323a 	str.w	r3, [r4, #570]	@ 0x23a
 8027070:	4b48      	ldr	r3, [pc, #288]	@ (8027194 <Argus_Cal_GetDefaultCalibration+0x1a18>)
 8027072:	f8c4 323e 	str.w	r3, [r4, #574]	@ 0x23e
 8027076:	f246 6366 	movw	r3, #26214	@ 0x6666
 802707a:	f8a4 309c 	strh.w	r3, [r4, #156]	@ 0x9c
 802707e:	f64f 63fc 	movw	r3, #65276	@ 0xfefc
 8027082:	f8a4 3234 	strh.w	r3, [r4, #564]	@ 0x234
 8027086:	f240 63f6 	movw	r3, #1782	@ 0x6f6
 802708a:	f7ff b94b 	b.w	8026324 <Argus_Cal_GetDefaultCalibration+0xba8>
 802708e:	f640 212d 	movw	r1, #2605	@ 0xa2d
 8027092:	2d01      	cmp	r5, #1
 8027094:	f8a4 1248 	strh.w	r1, [r4, #584]	@ 0x248
 8027098:	f43f ab47 	beq.w	802672a <Argus_Cal_GetDefaultCalibration+0xfae>
 802709c:	f7ff bbb9 	b.w	8026812 <Argus_Cal_GetDefaultCalibration+0x1096>
 80270a0:	f640 3154 	movw	r1, #2900	@ 0xb54
 80270a4:	2d01      	cmp	r5, #1
 80270a6:	f8a4 1246 	strh.w	r1, [r4, #582]	@ 0x246
 80270aa:	f43f aa3b 	beq.w	8026524 <Argus_Cal_GetDefaultCalibration+0xda8>
 80270ae:	f7ff bbac 	b.w	802680a <Argus_Cal_GetDefaultCalibration+0x108e>
 80270b2:	f240 51a5 	movw	r1, #1445	@ 0x5a5
 80270b6:	2d01      	cmp	r5, #1
 80270b8:	f8a4 1240 	strh.w	r1, [r4, #576]	@ 0x240
 80270bc:	f43f aa3f 	beq.w	802653e <Argus_Cal_GetDefaultCalibration+0xdc2>
 80270c0:	f7ff bbb7 	b.w	8026832 <Argus_Cal_GetDefaultCalibration+0x10b6>
 80270c4:	f240 61fd 	movw	r1, #1789	@ 0x6fd
 80270c8:	2d01      	cmp	r5, #1
 80270ca:	f8a4 123a 	strh.w	r1, [r4, #570]	@ 0x23a
 80270ce:	f43f aa43 	beq.w	8026558 <Argus_Cal_GetDefaultCalibration+0xddc>
 80270d2:	f7ff bb82 	b.w	80267da <Argus_Cal_GetDefaultCalibration+0x105e>
 80270d6:	f240 4119 	movw	r1, #1049	@ 0x419
 80270da:	2d01      	cmp	r5, #1
 80270dc:	f8a4 123c 	strh.w	r1, [r4, #572]	@ 0x23c
 80270e0:	f43f aac8 	beq.w	8026674 <Argus_Cal_GetDefaultCalibration+0xef8>
 80270e4:	f7ff bb9d 	b.w	8026822 <Argus_Cal_GetDefaultCalibration+0x10a6>
 80270e8:	f640 416e 	movw	r1, #3182	@ 0xc6e
 80270ec:	2d01      	cmp	r5, #1
 80270ee:	f8a4 124a 	strh.w	r1, [r4, #586]	@ 0x24a
 80270f2:	f43f aacc 	beq.w	802668e <Argus_Cal_GetDefaultCalibration+0xf12>
 80270f6:	f7ff bb90 	b.w	802681a <Argus_Cal_GetDefaultCalibration+0x109e>
 80270fa:	4927      	ldr	r1, [pc, #156]	@ (8027198 <Argus_Cal_GetDefaultCalibration+0x1a1c>)
 80270fc:	4827      	ldr	r0, [pc, #156]	@ (802719c <Argus_Cal_GetDefaultCalibration+0x1a20>)
 80270fe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8027102:	f501 0176 	add.w	r1, r1, #16121856	@ 0xf60000
 8027106:	f501 417b 	add.w	r1, r1, #64256	@ 0xfb00
 802710a:	31f9      	adds	r1, #249	@ 0xf9
 802710c:	6121      	str	r1, [r4, #16]
 802710e:	f244 4175 	movw	r1, #17525	@ 0x4475
 8027112:	8061      	strh	r1, [r4, #2]
 8027114:	f644 6105 	movw	r1, #19973	@ 0x4e05
 8027118:	82a1      	strh	r1, [r4, #20]
 802711a:	2118      	movs	r1, #24
 802711c:	75a1      	strb	r1, [r4, #22]
 802711e:	211d      	movs	r1, #29
 8027120:	f7ff b8b7 	b.w	8026292 <Argus_Cal_GetDefaultCalibration+0xb16>
 8027124:	f240 1193 	movw	r1, #403	@ 0x193
 8027128:	2d01      	cmp	r5, #1
 802712a:	f8a4 122e 	strh.w	r1, [r4, #558]	@ 0x22e
 802712e:	f43f aad5 	beq.w	80266dc <Argus_Cal_GetDefaultCalibration+0xf60>
 8027132:	f7ff bb5a 	b.w	80267ea <Argus_Cal_GetDefaultCalibration+0x106e>
 8027136:	bf00      	nop
 8027138:	44fa8000 	.word	0x44fa8000
 802713c:	32204308 	.word	0x32204308
 8027140:	30114200 	.word	0x30114200
 8027144:	0c600178 	.word	0x0c600178
 8027148:	2f1044fd 	.word	0x2f1044fd
 802714c:	0f970f79 	.word	0x0f970f79
 8027150:	09300652 	.word	0x09300652
 8027154:	0c0f05c9 	.word	0x0c0f05c9
 8027158:	0432096e 	.word	0x0432096e
 802715c:	0205711a 	.word	0x0205711a
 8027160:	077e07ff 	.word	0x077e07ff
 8027164:	0382ff91 	.word	0x0382ff91
 8027168:	090d017c 	.word	0x090d017c
 802716c:	018c00e9 	.word	0x018c00e9
 8027170:	09db01aa 	.word	0x09db01aa
 8027174:	128a1259 	.word	0x128a1259
 8027178:	d5c3e000 	.word	0xd5c3e000
 802717c:	3d2d5712 	.word	0x3d2d5712
 8027180:	13db13b7 	.word	0x13db13b7
 8027184:	065bff1b 	.word	0x065bff1b
 8027188:	02faff92 	.word	0x02faff92
 802718c:	ffac009c 	.word	0xffac009c
 8027190:	00120129 	.word	0x00120129
 8027194:	ffd60891 	.word	0xffd60891
 8027198:	1e205508 	.word	0x1e205508
 802719c:	533c900d 	.word	0x533c900d
 80271a0:	059ffcea 	.word	0x059ffcea
 80271a4:	ffaefe60 	.word	0xffaefe60
 80271a8:	447e8148 	.word	0x447e8148
 80271ac:	06fcfdb4 	.word	0x06fcfdb4
 80271b0:	025100be 	.word	0x025100be
 80271b4:	f240 6139 	movw	r1, #1593	@ 0x639
 80271b8:	2d01      	cmp	r5, #1
 80271ba:	f8a4 1238 	strh.w	r1, [r4, #568]	@ 0x238
 80271be:	f43f aa4c 	beq.w	802665a <Argus_Cal_GetDefaultCalibration+0xede>
 80271c2:	f7ff bb06 	b.w	80267d2 <Argus_Cal_GetDefaultCalibration+0x1056>
 80271c6:	f240 713b 	movw	r1, #1851	@ 0x73b
 80271ca:	2d01      	cmp	r5, #1
 80271cc:	f8a4 1244 	strh.w	r1, [r4, #580]	@ 0x244
 80271d0:	f43f aa91 	beq.w	80266f6 <Argus_Cal_GetDefaultCalibration+0xf7a>
 80271d4:	f7ff bb15 	b.w	8026802 <Argus_Cal_GetDefaultCalibration+0x1086>
 80271d8:	f240 414a 	movw	r1, #1098	@ 0x44a
 80271dc:	2d01      	cmp	r5, #1
 80271de:	f8a4 1232 	strh.w	r1, [r4, #562]	@ 0x232
 80271e2:	f43f aa95 	beq.w	8026710 <Argus_Cal_GetDefaultCalibration+0xf94>
 80271e6:	f7ff bb08 	b.w	80267fa <Argus_Cal_GetDefaultCalibration+0x107e>
 80271ea:	f640 112a 	movw	r1, #2346	@ 0x92a
 80271ee:	2d01      	cmp	r5, #1
 80271f0:	f8a4 1236 	strh.w	r1, [r4, #566]	@ 0x236
 80271f4:	f43f aa21 	beq.w	802663a <Argus_Cal_GetDefaultCalibration+0xebe>
 80271f8:	f7ff bae7 	b.w	80267ca <Argus_Cal_GetDefaultCalibration+0x104e>
 80271fc:	f240 3129 	movw	r1, #809	@ 0x329
 8027200:	2d01      	cmp	r5, #1
 8027202:	f8a4 1242 	strh.w	r1, [r4, #578]	@ 0x242
 8027206:	bf08      	it	eq
 8027208:	f240 3126 	movweq	r1, #806	@ 0x326
 802720c:	f43f a9b1 	beq.w	8026572 <Argus_Cal_GetDefaultCalibration+0xdf6>
 8027210:	f7ff bb13 	b.w	802683a <Argus_Cal_GetDefaultCalibration+0x10be>
 8027214:	f240 4161 	movw	r1, #1121	@ 0x461
 8027218:	2d01      	cmp	r5, #1
 802721a:	f8a4 122c 	strh.w	r1, [r4, #556]	@ 0x22c
 802721e:	f43e afb7 	beq.w	8026190 <Argus_Cal_GetDefaultCalibration+0xa14>
 8027222:	f7ff bade 	b.w	80267e2 <Argus_Cal_GetDefaultCalibration+0x1066>
 8027226:	f240 7117 	movw	r1, #1815	@ 0x717
 802722a:	2d01      	cmp	r5, #1
 802722c:	f8a4 1230 	strh.w	r1, [r4, #560]	@ 0x230
 8027230:	f43f aa47 	beq.w	80266c2 <Argus_Cal_GetDefaultCalibration+0xf46>
 8027234:	f7ff badd 	b.w	80267f2 <Argus_Cal_GetDefaultCalibration+0x1076>
 8027238:	f240 2127 	movw	r1, #551	@ 0x227
 802723c:	2d01      	cmp	r5, #1
 802723e:	f8a4 123e 	strh.w	r1, [r4, #574]	@ 0x23e
 8027242:	f43f aa31 	beq.w	80266a8 <Argus_Cal_GetDefaultCalibration+0xf2c>
 8027246:	f7ff baf0 	b.w	802682a <Argus_Cal_GetDefaultCalibration+0x10ae>
 802724a:	2a00      	cmp	r2, #0
 802724c:	bf14      	ite	ne
 802724e:	2114      	movne	r1, #20
 8027250:	2111      	moveq	r1, #17
 8027252:	73a1      	strb	r1, [r4, #14]
 8027254:	e4d4      	b.n	8026c00 <Argus_Cal_GetDefaultCalibration+0x1484>
 8027256:	2a00      	cmp	r2, #0
 8027258:	bf14      	ite	ne
 802725a:	212c      	movne	r1, #44	@ 0x2c
 802725c:	212a      	moveq	r1, #42	@ 0x2a
 802725e:	2d01      	cmp	r5, #1
 8027260:	72a1      	strb	r1, [r4, #10]
 8027262:	f43f ae6f 	beq.w	8026f44 <Argus_Cal_GetDefaultCalibration+0x17c8>
 8027266:	e412      	b.n	8026a8e <Argus_Cal_GetDefaultCalibration+0x1312>
 8027268:	210f      	movs	r1, #15
 802726a:	7221      	strb	r1, [r4, #8]
 802726c:	f7ff bafc 	b.w	8026868 <Argus_Cal_GetDefaultCalibration+0x10ec>
 8027270:	1f51      	subs	r1, r2, #5
 8027272:	2d01      	cmp	r5, #1
 8027274:	7221      	strb	r1, [r4, #8]
 8027276:	f43f aaf5 	beq.w	8026864 <Argus_Cal_GetDefaultCalibration+0x10e8>
 802727a:	f7ff bbfe 	b.w	8026a7a <Argus_Cal_GetDefaultCalibration+0x12fe>
 802727e:	f644 01bb 	movw	r1, #18619	@ 0x48bb
 8027282:	f7fe bb55 	b.w	8025930 <Argus_Cal_GetDefaultCalibration+0x1b4>
 8027286:	2a00      	cmp	r2, #0
 8027288:	bf14      	ite	ne
 802728a:	2100      	movne	r1, #0
 802728c:	f06f 0103 	mvneq.w	r1, #3
 8027290:	75a1      	strb	r1, [r4, #22]
 8027292:	e661      	b.n	8026f58 <Argus_Cal_GetDefaultCalibration+0x17dc>
 8027294:	2148      	movs	r1, #72	@ 0x48
 8027296:	7461      	strb	r1, [r4, #17]
 8027298:	211b      	movs	r1, #27
 802729a:	f7ff bb67 	b.w	802696c <Argus_Cal_GetDefaultCalibration+0x11f0>
 802729e:	f241 0ce6 	movw	ip, #4326	@ 0x10e6
 80272a2:	2b05      	cmp	r3, #5
 80272a4:	f8a4 c274 	strh.w	ip, [r4, #628]	@ 0x274
 80272a8:	f47e ad14 	bne.w	8025cd4 <Argus_Cal_GetDefaultCalibration+0x558>
 80272ac:	e454      	b.n	8026b58 <Argus_Cal_GetDefaultCalibration+0x13dc>
 80272ae:	2b05      	cmp	r3, #5
 80272b0:	7325      	strb	r5, [r4, #12]
 80272b2:	f47e ae7f 	bne.w	8025fb4 <Argus_Cal_GetDefaultCalibration+0x838>
 80272b6:	f7ff bb8b 	b.w	80269d0 <Argus_Cal_GetDefaultCalibration+0x1254>
 80272ba:	f06f 0938 	mvn.w	r9, #56	@ 0x38
 80272be:	f06f 0ecc 	mvn.w	lr, #204	@ 0xcc
 80272c2:	f7ff b9a7 	b.w	8026614 <Argus_Cal_GetDefaultCalibration+0xe98>
 80272c6:	2143      	movs	r1, #67	@ 0x43
 80272c8:	f7ff bb6e 	b.w	80269a8 <Argus_Cal_GetDefaultCalibration+0x122c>
 80272cc:	f06f 0106 	mvn.w	r1, #6
 80272d0:	f7ff bb3d 	b.w	802694e <Argus_Cal_GetDefaultCalibration+0x11d2>
 80272d4:	f241 0c1b 	movw	ip, #4123	@ 0x101b
 80272d8:	2b05      	cmp	r3, #5
 80272da:	f8a4 c278 	strh.w	ip, [r4, #632]	@ 0x278
 80272de:	f47f a8fc 	bne.w	80264da <Argus_Cal_GetDefaultCalibration+0xd5e>
 80272e2:	f7ff ba3d 	b.w	8026760 <Argus_Cal_GetDefaultCalibration+0xfe4>
 80272e6:	2a00      	cmp	r2, #0
 80272e8:	f43f ae3a 	beq.w	8026f60 <Argus_Cal_GetDefaultCalibration+0x17e4>
 80272ec:	f241 0c78 	movw	ip, #4216	@ 0x1078
 80272f0:	f8a4 c278 	strh.w	ip, [r4, #632]	@ 0x278
 80272f4:	f7ff b879 	b.w	80263ea <Argus_Cal_GetDefaultCalibration+0xc6e>
 80272f8:	f241 0c85 	movw	ip, #4229	@ 0x1085
 80272fc:	f8a4 c27a 	strh.w	ip, [r4, #634]	@ 0x27a
 8027300:	f7fe bd00 	b.w	8025d04 <Argus_Cal_GetDefaultCalibration+0x588>

08027304 <Argus_Cal_GetCurrentDefaultCalibration>:
 8027304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027306:	4604      	mov	r4, r0
 8027308:	b083      	sub	sp, #12
 802730a:	f8d0 04c0 	ldr.w	r0, [r0, #1216]	@ 0x4c0
 802730e:	460f      	mov	r7, r1
 8027310:	4616      	mov	r6, r2
 8027312:	f7f9 f8ed 	bl	80204f0 <Argus_Dev_GetChipVersion>
 8027316:	b198      	cbz	r0, 8027340 <Argus_Cal_GetCurrentDefaultCalibration+0x3c>
 8027318:	4605      	mov	r5, r0
 802731a:	f8d4 04c0 	ldr.w	r0, [r4, #1216]	@ 0x4c0
 802731e:	f7f9 f8e9 	bl	80204f4 <Argus_Dev_GetLaserType>
 8027322:	4603      	mov	r3, r0
 8027324:	f8d4 04c0 	ldr.w	r0, [r4, #1216]	@ 0x4c0
 8027328:	461c      	mov	r4, r3
 802732a:	f7f9 f8dd 	bl	80204e8 <Argus_Dev_GetModule>
 802732e:	9400      	str	r4, [sp, #0]
 8027330:	4602      	mov	r2, r0
 8027332:	462b      	mov	r3, r5
 8027334:	4631      	mov	r1, r6
 8027336:	4638      	mov	r0, r7
 8027338:	f7fe fa20 	bl	802577c <Argus_Cal_GetDefaultCalibration>
 802733c:	b003      	add	sp, #12
 802733e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027340:	f06f 0064 	mvn.w	r0, #100	@ 0x64
 8027344:	e7fa      	b.n	802733c <Argus_Cal_GetCurrentDefaultCalibration+0x38>
 8027346:	bf00      	nop

08027348 <Argus_Cal_ReadCalibrationFromNVM>:
 8027348:	2300      	movs	r3, #0
 802734a:	f8c2 3288 	str.w	r3, [r2, #648]	@ 0x288
 802734e:	b338      	cbz	r0, 80273a0 <Argus_Cal_ReadCalibrationFromNVM+0x58>
 8027350:	b331      	cbz	r1, 80273a0 <Argus_Cal_ReadCalibrationFromNVM+0x58>
 8027352:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027356:	f5ad 7d41 	sub.w	sp, sp, #772	@ 0x304
 802735a:	ea41 6480 	orr.w	r4, r1, r0, lsl #26
 802735e:	4615      	mov	r5, r2
 8027360:	4619      	mov	r1, r3
 8027362:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8027366:	a801      	add	r0, sp, #4
 8027368:	9300      	str	r3, [sp, #0]
 802736a:	f002 f9f2 	bl	8029752 <memset>
 802736e:	466a      	mov	r2, sp
 8027370:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8027374:	4620      	mov	r0, r4
 8027376:	f7df f8d5 	bl	8006524 <NVM_ReadBlock>
 802737a:	f110 0f09 	cmn.w	r0, #9
 802737e:	d00a      	beq.n	8027396 <Argus_Cal_ReadCalibrationFromNVM+0x4e>
 8027380:	2800      	cmp	r0, #0
 8027382:	db54      	blt.n	802742e <Argus_Cal_ReadCalibrationFromNVM+0xe6>
 8027384:	9b00      	ldr	r3, [sp, #0]
 8027386:	ba1e      	rev	r6, r3
 8027388:	f7ec fd88 	bl	8013e9c <Argus_GetAPIVersion>
 802738c:	42b0      	cmp	r0, r6
 802738e:	d009      	beq.n	80273a4 <Argus_Cal_ReadCalibrationFromNVM+0x5c>
 8027390:	2600      	movs	r6, #0
 8027392:	f8c5 6288 	str.w	r6, [r5, #648]	@ 0x288
 8027396:	2000      	movs	r0, #0
 8027398:	f50d 7d41 	add.w	sp, sp, #772	@ 0x304
 802739c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80273a0:	2000      	movs	r0, #0
 80273a2:	4770      	bx	lr
 80273a4:	9b01      	ldr	r3, [sp, #4]
 80273a6:	ba1b      	rev	r3, r3
 80273a8:	429c      	cmp	r4, r3
 80273aa:	d1f1      	bne.n	8027390 <Argus_Cal_ReadCalibrationFromNVM+0x48>
 80273ac:	9e02      	ldr	r6, [sp, #8]
 80273ae:	f026 4380 	bic.w	r3, r6, #1073741824	@ 0x40000000
 80273b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80273b6:	f006 4980 	and.w	r9, r6, #1073741824	@ 0x40000000
 80273ba:	f406 2880 	and.w	r8, r6, #262144	@ 0x40000
 80273be:	b1c3      	cbz	r3, 80273f2 <Argus_Cal_ReadCalibrationFromNVM+0xaa>
 80273c0:	f10d 0e0c 	add.w	lr, sp, #12
 80273c4:	f505 7c23 	add.w	ip, r5, #652	@ 0x28c
 80273c8:	af0b      	add	r7, sp, #44	@ 0x2c
 80273ca:	4674      	mov	r4, lr
 80273cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80273ce:	42bc      	cmp	r4, r7
 80273d0:	f10c 0c10 	add.w	ip, ip, #16
 80273d4:	f10e 0e10 	add.w	lr, lr, #16
 80273d8:	f84c 0c10 	str.w	r0, [ip, #-16]
 80273dc:	f84c 1c0c 	str.w	r1, [ip, #-12]
 80273e0:	f84c 2c08 	str.w	r2, [ip, #-8]
 80273e4:	f84c 3c04 	str.w	r3, [ip, #-4]
 80273e8:	d1ef      	bne.n	80273ca <Argus_Cal_ReadCalibrationFromNVM+0x82>
 80273ea:	f8de 0000 	ldr.w	r0, [lr]
 80273ee:	f8cc 0000 	str.w	r0, [ip]
 80273f2:	f1b9 0f00 	cmp.w	r9, #0
 80273f6:	d00a      	beq.n	802740e <Argus_Cal_ReadCalibrationFromNVM+0xc6>
 80273f8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 80273fc:	f8a5 309e 	strh.w	r3, [r5, #158]	@ 0x9e
 8027400:	2280      	movs	r2, #128	@ 0x80
 8027402:	f10d 0132 	add.w	r1, sp, #50	@ 0x32
 8027406:	f105 001c 	add.w	r0, r5, #28
 802740a:	f002 fa3a 	bl	8029882 <memcpy>
 802740e:	f1b8 0f00 	cmp.w	r8, #0
 8027412:	d0be      	beq.n	8027392 <Argus_Cal_ReadCalibrationFromNVM+0x4a>
 8027414:	f8dd 30b2 	ldr.w	r3, [sp, #178]	@ 0xb2
 8027418:	f8c5 3222 	str.w	r3, [r5, #546]	@ 0x222
 802741c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8027420:	f10d 01b6 	add.w	r1, sp, #182	@ 0xb6
 8027424:	f505 7091 	add.w	r0, r5, #290	@ 0x122
 8027428:	f002 fa2b 	bl	8029882 <memcpy>
 802742c:	e7b1      	b.n	8027392 <Argus_Cal_ReadCalibrationFromNVM+0x4a>
 802742e:	f110 0f62 	cmn.w	r0, #98	@ 0x62
 8027432:	d1b1      	bne.n	8027398 <Argus_Cal_ReadCalibrationFromNVM+0x50>
 8027434:	e7ac      	b.n	8027390 <Argus_Cal_ReadCalibrationFromNVM+0x48>
 8027436:	bf00      	nop

08027438 <Argus_Cal_WriteCalibrationToNVM>:
 8027438:	2800      	cmp	r0, #0
 802743a:	f000 80a0 	beq.w	802757e <Argus_Cal_WriteCalibrationToNVM+0x146>
 802743e:	b570      	push	{r4, r5, r6, lr}
 8027440:	460d      	mov	r5, r1
 8027442:	f5ad 7d40 	sub.w	sp, sp, #768	@ 0x300
 8027446:	2900      	cmp	r1, #0
 8027448:	f000 8095 	beq.w	8027576 <Argus_Cal_WriteCalibrationToNVM+0x13e>
 802744c:	2100      	movs	r1, #0
 802744e:	ea45 6580 	orr.w	r5, r5, r0, lsl #26
 8027452:	4614      	mov	r4, r2
 8027454:	a801      	add	r0, sp, #4
 8027456:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 802745a:	9100      	str	r1, [sp, #0]
 802745c:	f002 f979 	bl	8029752 <memset>
 8027460:	466a      	mov	r2, sp
 8027462:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8027466:	4628      	mov	r0, r5
 8027468:	f7df f85c 	bl	8006524 <NVM_ReadBlock>
 802746c:	f110 0f09 	cmn.w	r0, #9
 8027470:	f000 8081 	beq.w	8027576 <Argus_Cal_WriteCalibrationToNVM+0x13e>
 8027474:	2800      	cmp	r0, #0
 8027476:	f2c0 80da 	blt.w	802762e <Argus_Cal_WriteCalibrationToNVM+0x1f6>
 802747a:	9b00      	ldr	r3, [sp, #0]
 802747c:	ba1e      	rev	r6, r3
 802747e:	f7ec fd0d 	bl	8013e9c <Argus_GetAPIVersion>
 8027482:	42b0      	cmp	r0, r6
 8027484:	f000 80c9 	beq.w	802761a <Argus_Cal_WriteCalibrationToNVM+0x1e2>
 8027488:	f44f 7240 	mov.w	r2, #768	@ 0x300
 802748c:	2100      	movs	r1, #0
 802748e:	4668      	mov	r0, sp
 8027490:	f002 f95f 	bl	8029752 <memset>
 8027494:	f8d4 3288 	ldr.w	r3, [r4, #648]	@ 0x288
 8027498:	2b00      	cmp	r3, #0
 802749a:	d06c      	beq.n	8027576 <Argus_Cal_WriteCalibrationToNVM+0x13e>
 802749c:	f10d 0307 	add.w	r3, sp, #7
 80274a0:	f204 2187 	addw	r1, r4, #647	@ 0x287
 80274a4:	f10d 0c2f 	add.w	ip, sp, #47	@ 0x2f
 80274a8:	2600      	movs	r6, #0
 80274aa:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80274ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80274b2:	4290      	cmp	r0, r2
 80274b4:	bf1c      	itt	ne
 80274b6:	701a      	strbne	r2, [r3, #0]
 80274b8:	2601      	movne	r6, #1
 80274ba:	4563      	cmp	r3, ip
 80274bc:	d1f5      	bne.n	80274aa <Argus_Cal_WriteCalibrationToNVM+0x72>
 80274be:	f894 309e 	ldrb.w	r3, [r4, #158]	@ 0x9e
 80274c2:	f89d 2030 	ldrb.w	r2, [sp, #48]	@ 0x30
 80274c6:	429a      	cmp	r2, r3
 80274c8:	bf18      	it	ne
 80274ca:	f88d 3030 	strbne.w	r3, [sp, #48]	@ 0x30
 80274ce:	f89d 2031 	ldrb.w	r2, [sp, #49]	@ 0x31
 80274d2:	f894 309f 	ldrb.w	r3, [r4, #159]	@ 0x9f
 80274d6:	bf18      	it	ne
 80274d8:	2601      	movne	r6, #1
 80274da:	429a      	cmp	r2, r3
 80274dc:	bf1c      	itt	ne
 80274de:	f88d 3031 	strbne.w	r3, [sp, #49]	@ 0x31
 80274e2:	2601      	movne	r6, #1
 80274e4:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 80274e8:	f104 021b 	add.w	r2, r4, #27
 80274ec:	f10d 0cb1 	add.w	ip, sp, #177	@ 0xb1
 80274f0:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80274f4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80274f8:	4288      	cmp	r0, r1
 80274fa:	bf1c      	itt	ne
 80274fc:	7019      	strbne	r1, [r3, #0]
 80274fe:	2601      	movne	r6, #1
 8027500:	4563      	cmp	r3, ip
 8027502:	d1f5      	bne.n	80274f0 <Argus_Cal_WriteCalibrationToNVM+0xb8>
 8027504:	f894 3222 	ldrb.w	r3, [r4, #546]	@ 0x222
 8027508:	f89d 20b2 	ldrb.w	r2, [sp, #178]	@ 0xb2
 802750c:	429a      	cmp	r2, r3
 802750e:	bf18      	it	ne
 8027510:	f88d 30b2 	strbne.w	r3, [sp, #178]	@ 0xb2
 8027514:	f89d 20b3 	ldrb.w	r2, [sp, #179]	@ 0xb3
 8027518:	f894 3223 	ldrb.w	r3, [r4, #547]	@ 0x223
 802751c:	bf18      	it	ne
 802751e:	2601      	movne	r6, #1
 8027520:	429a      	cmp	r2, r3
 8027522:	bf18      	it	ne
 8027524:	f88d 30b3 	strbne.w	r3, [sp, #179]	@ 0xb3
 8027528:	f89d 20b4 	ldrb.w	r2, [sp, #180]	@ 0xb4
 802752c:	f894 3224 	ldrb.w	r3, [r4, #548]	@ 0x224
 8027530:	bf18      	it	ne
 8027532:	2601      	movne	r6, #1
 8027534:	429a      	cmp	r2, r3
 8027536:	bf18      	it	ne
 8027538:	f88d 30b4 	strbne.w	r3, [sp, #180]	@ 0xb4
 802753c:	f89d 20b5 	ldrb.w	r2, [sp, #181]	@ 0xb5
 8027540:	f894 3225 	ldrb.w	r3, [r4, #549]	@ 0x225
 8027544:	bf18      	it	ne
 8027546:	2601      	movne	r6, #1
 8027548:	429a      	cmp	r2, r3
 802754a:	bf18      	it	ne
 802754c:	f88d 30b5 	strbne.w	r3, [sp, #181]	@ 0xb5
 8027550:	f204 1121 	addw	r1, r4, #289	@ 0x121
 8027554:	bf18      	it	ne
 8027556:	2601      	movne	r6, #1
 8027558:	f10d 03b5 	add.w	r3, sp, #181	@ 0xb5
 802755c:	f20d 14b5 	addw	r4, sp, #437	@ 0x1b5
 8027560:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8027564:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8027568:	4290      	cmp	r0, r2
 802756a:	bf1c      	itt	ne
 802756c:	701a      	strbne	r2, [r3, #0]
 802756e:	2601      	movne	r6, #1
 8027570:	429c      	cmp	r4, r3
 8027572:	d1f5      	bne.n	8027560 <Argus_Cal_WriteCalibrationToNVM+0x128>
 8027574:	b92e      	cbnz	r6, 8027582 <Argus_Cal_WriteCalibrationToNVM+0x14a>
 8027576:	2000      	movs	r0, #0
 8027578:	f50d 7d40 	add.w	sp, sp, #768	@ 0x300
 802757c:	bd70      	pop	{r4, r5, r6, pc}
 802757e:	2000      	movs	r0, #0
 8027580:	4770      	bx	lr
 8027582:	f7ec fc8b 	bl	8013e9c <Argus_GetAPIVersion>
 8027586:	f89d 3000 	ldrb.w	r3, [sp]
 802758a:	0e02      	lsrs	r2, r0, #24
 802758c:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
 8027590:	bf18      	it	ne
 8027592:	f88d 2000 	strbne.w	r2, [sp]
 8027596:	f89d 2001 	ldrb.w	r2, [sp, #1]
 802759a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 802759e:	429a      	cmp	r2, r3
 80275a0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80275a4:	bf18      	it	ne
 80275a6:	f88d 3001 	strbne.w	r3, [sp, #1]
 80275aa:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80275ae:	429a      	cmp	r2, r3
 80275b0:	bf18      	it	ne
 80275b2:	f88d 3002 	strbne.w	r3, [sp, #2]
 80275b6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80275ba:	b2c0      	uxtb	r0, r0
 80275bc:	4283      	cmp	r3, r0
 80275be:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80275c2:	bf18      	it	ne
 80275c4:	f88d 0003 	strbne.w	r0, [sp, #3]
 80275c8:	0e2a      	lsrs	r2, r5, #24
 80275ca:	ebb3 6f15 	cmp.w	r3, r5, lsr #24
 80275ce:	bf18      	it	ne
 80275d0:	f88d 2004 	strbne.w	r2, [sp, #4]
 80275d4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80275d8:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80275dc:	429a      	cmp	r2, r3
 80275de:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80275e2:	bf18      	it	ne
 80275e4:	f88d 3005 	strbne.w	r3, [sp, #5]
 80275e8:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80275ec:	429a      	cmp	r2, r3
 80275ee:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80275f2:	bf18      	it	ne
 80275f4:	f88d 3006 	strbne.w	r3, [sp, #6]
 80275f8:	b2eb      	uxtb	r3, r5
 80275fa:	429a      	cmp	r2, r3
 80275fc:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8027600:	466a      	mov	r2, sp
 8027602:	4628      	mov	r0, r5
 8027604:	bf18      	it	ne
 8027606:	f88d 3007 	strbne.w	r3, [sp, #7]
 802760a:	f7de ff7d 	bl	8006508 <NVM_WriteBlock>
 802760e:	f110 0f09 	cmn.w	r0, #9
 8027612:	d0b0      	beq.n	8027576 <Argus_Cal_WriteCalibrationToNVM+0x13e>
 8027614:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 8027618:	e7ae      	b.n	8027578 <Argus_Cal_WriteCalibrationToNVM+0x140>
 802761a:	9b01      	ldr	r3, [sp, #4]
 802761c:	ba1b      	rev	r3, r3
 802761e:	429d      	cmp	r5, r3
 8027620:	f47f af32 	bne.w	8027488 <Argus_Cal_WriteCalibrationToNVM+0x50>
 8027624:	9b02      	ldr	r3, [sp, #8]
 8027626:	2b00      	cmp	r3, #0
 8027628:	f47f af38 	bne.w	802749c <Argus_Cal_WriteCalibrationToNVM+0x64>
 802762c:	e732      	b.n	8027494 <Argus_Cal_WriteCalibrationToNVM+0x5c>
 802762e:	f110 0f62 	cmn.w	r0, #98	@ 0x62
 8027632:	d1a1      	bne.n	8027578 <Argus_Cal_WriteCalibrationToNVM+0x140>
 8027634:	e728      	b.n	8027488 <Argus_Cal_WriteCalibrationToNVM+0x50>
 8027636:	bf00      	nop

08027638 <ADS_TriggerNextTransfer.part.0>:
 8027638:	b5f0      	push	{r4, r5, r6, r7, lr}
 802763a:	b083      	sub	sp, #12
 802763c:	f7de ff54 	bl	80064e8 <IRQ_LOCK>
 8027640:	4b17      	ldr	r3, [pc, #92]	@ (80276a0 <ADS_TriggerNextTransfer.part.0+0x68>)
 8027642:	681c      	ldr	r4, [r3, #0]
 8027644:	69a2      	ldr	r2, [r4, #24]
 8027646:	601a      	str	r2, [r3, #0]
 8027648:	f7de ff2c 	bl	80064a4 <IRQ_UNLOCK>
 802764c:	e9d4 6303 	ldrd	r6, r3, [r4, #12]
 8027650:	e9d4 0500 	ldrd	r0, r5, [r4]
 8027654:	4913      	ldr	r1, [pc, #76]	@ (80276a4 <ADS_TriggerNextTransfer.part.0+0x6c>)
 8027656:	68a2      	ldr	r2, [r4, #8]
 8027658:	6967      	ldr	r7, [r4, #20]
 802765a:	9100      	str	r1, [sp, #0]
 802765c:	9501      	str	r5, [sp, #4]
 802765e:	4631      	mov	r1, r6
 8027660:	f7df f972 	bl	8006948 <S2PI_TransferFrame>
 8027664:	b958      	cbnz	r0, 802767e <ADS_TriggerNextTransfer.part.0+0x46>
 8027666:	b90f      	cbnz	r7, 802766c <ADS_TriggerNextTransfer.part.0+0x34>
 8027668:	b003      	add	sp, #12
 802766a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802766c:	f105 010c 	add.w	r1, r5, #12
 8027670:	f105 0008 	add.w	r0, r5, #8
 8027674:	f7df fb1c 	bl	8006cb0 <Timer_GetCounterValue>
 8027678:	606f      	str	r7, [r5, #4]
 802767a:	b003      	add	sp, #12
 802767c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802767e:	4604      	mov	r4, r0
 8027680:	7831      	ldrb	r1, [r6, #0]
 8027682:	4809      	ldr	r0, [pc, #36]	@ (80276a8 <ADS_TriggerNextTransfer.part.0+0x70>)
 8027684:	4622      	mov	r2, r4
 8027686:	f7eb fc85 	bl	8012f94 <print>
 802768a:	2200      	movs	r2, #0
 802768c:	2302      	movs	r3, #2
 802768e:	4629      	mov	r1, r5
 8027690:	4620      	mov	r0, r4
 8027692:	642a      	str	r2, [r5, #64]	@ 0x40
 8027694:	602b      	str	r3, [r5, #0]
 8027696:	b003      	add	sp, #12
 8027698:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 802769c:	f000 b806 	b.w	80276ac <ADS_SPI_Callback>
 80276a0:	240036c4 	.word	0x240036c4
 80276a4:	080276ad 	.word	0x080276ad
 80276a8:	08030f34 	.word	0x08030f34

080276ac <ADS_SPI_Callback>:
 80276ac:	b570      	push	{r4, r5, r6, lr}
 80276ae:	460c      	mov	r4, r1
 80276b0:	4605      	mov	r5, r0
 80276b2:	f7de ff19 	bl	80064e8 <IRQ_LOCK>
 80276b6:	6823      	ldr	r3, [r4, #0]
 80276b8:	2b02      	cmp	r3, #2
 80276ba:	d02f      	beq.n	802771c <ADS_SPI_Callback+0x70>
 80276bc:	6823      	ldr	r3, [r4, #0]
 80276be:	2b64      	cmp	r3, #100	@ 0x64
 80276c0:	bf04      	itt	eq
 80276c2:	2367      	moveq	r3, #103	@ 0x67
 80276c4:	6023      	streq	r3, [r4, #0]
 80276c6:	1cab      	adds	r3, r5, #2
 80276c8:	bf1d      	ittte	ne
 80276ca:	2300      	movne	r3, #0
 80276cc:	6be6      	ldrne	r6, [r4, #60]	@ 0x3c
 80276ce:	63e3      	strne	r3, [r4, #60]	@ 0x3c
 80276d0:	2600      	moveq	r6, #0
 80276d2:	f7de fee7 	bl	80064a4 <IRQ_UNLOCK>
 80276d6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80276d8:	b18b      	cbz	r3, 80276fe <ADS_SPI_Callback+0x52>
 80276da:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80276dc:	1e51      	subs	r1, r2, #1
 80276de:	6361      	str	r1, [r4, #52]	@ 0x34
 80276e0:	b152      	cbz	r2, 80276f8 <ADS_SPI_Callback+0x4c>
 80276e2:	781a      	ldrb	r2, [r3, #0]
 80276e4:	43d2      	mvns	r2, r2
 80276e6:	701a      	strb	r2, [r3, #0]
 80276e8:	e9d4 230d 	ldrd	r2, r3, [r4, #52]	@ 0x34
 80276ec:	3301      	adds	r3, #1
 80276ee:	1e51      	subs	r1, r2, #1
 80276f0:	e9c4 130d 	strd	r1, r3, [r4, #52]	@ 0x34
 80276f4:	2a00      	cmp	r2, #0
 80276f6:	d1f4      	bne.n	80276e2 <ADS_SPI_Callback+0x36>
 80276f8:	2300      	movs	r3, #0
 80276fa:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 80276fe:	f7de fef3 	bl	80064e8 <IRQ_LOCK>
 8027702:	4b0a      	ldr	r3, [pc, #40]	@ (802772c <ADS_SPI_Callback+0x80>)
 8027704:	681b      	ldr	r3, [r3, #0]
 8027706:	b163      	cbz	r3, 8027722 <ADS_SPI_Callback+0x76>
 8027708:	f7ff ff96 	bl	8027638 <ADS_TriggerNextTransfer.part.0>
 802770c:	f7de feca 	bl	80064a4 <IRQ_UNLOCK>
 8027710:	b116      	cbz	r6, 8027718 <ADS_SPI_Callback+0x6c>
 8027712:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8027714:	4628      	mov	r0, r5
 8027716:	47b0      	blx	r6
 8027718:	4628      	mov	r0, r5
 802771a:	bd70      	pop	{r4, r5, r6, pc}
 802771c:	2300      	movs	r3, #0
 802771e:	6023      	str	r3, [r4, #0]
 8027720:	e7d1      	b.n	80276c6 <ADS_SPI_Callback+0x1a>
 8027722:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8027724:	f7df f9f4 	bl	8006b10 <S2PI_ReleaseMutex>
 8027728:	e7f0      	b.n	802770c <ADS_SPI_Callback+0x60>
 802772a:	bf00      	nop
 802772c:	240036c4 	.word	0x240036c4

08027730 <ADS_Abort.part.0>:
 8027730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027734:	4605      	mov	r5, r0
 8027736:	f06f 0201 	mvn.w	r2, #1
 802773a:	2300      	movs	r3, #0
 802773c:	6002      	str	r2, [r0, #0]
 802773e:	b082      	sub	sp, #8
 8027740:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8027742:	606b      	str	r3, [r5, #4]
 8027744:	4689      	mov	r9, r1
 8027746:	f7df f9f3 	bl	8006b30 <S2PI_Abort>
 802774a:	1e04      	subs	r4, r0, #0
 802774c:	f2c0 80a7 	blt.w	802789e <ADS_Abort.part.0+0x16e>
 8027750:	a901      	add	r1, sp, #4
 8027752:	4668      	mov	r0, sp
 8027754:	f7df faac 	bl	8006cb0 <Timer_GetCounterValue>
 8027758:	e9dd 6700 	ldrd	r6, r7, [sp]
 802775c:	4b54      	ldr	r3, [pc, #336]	@ (80278b0 <ADS_Abort.part.0+0x180>)
 802775e:	eb17 0803 	adds.w	r8, r7, r3
 8027762:	4b54      	ldr	r3, [pc, #336]	@ (80278b4 <ADS_Abort.part.0+0x184>)
 8027764:	bf2c      	ite	cs
 8027766:	f04f 0a01 	movcs.w	sl, #1
 802776a:	f04f 0a00 	movcc.w	sl, #0
 802776e:	4598      	cmp	r8, r3
 8027770:	d934      	bls.n	80277dc <ADS_Abort.part.0+0xac>
 8027772:	f5a7 2a5b 	sub.w	sl, r7, #897024	@ 0xdb000
 8027776:	f5aa 6a3a 	sub.w	sl, sl, #2976	@ 0xba0
 802777a:	f106 0801 	add.w	r8, r6, #1
 802777e:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8027780:	f7df f8ae 	bl	80068e0 <S2PI_CycleCsPin>
 8027784:	a901      	add	r1, sp, #4
 8027786:	4604      	mov	r4, r0
 8027788:	4668      	mov	r0, sp
 802778a:	f7df fa91 	bl	8006cb0 <Timer_GetCounterValue>
 802778e:	45b0      	cmp	r8, r6
 8027790:	e9dd 3100 	ldrd	r3, r1, [sp]
 8027794:	d948      	bls.n	8027828 <ADS_Abort.part.0+0xf8>
 8027796:	42b3      	cmp	r3, r6
 8027798:	d052      	beq.n	8027840 <ADS_Abort.part.0+0x110>
 802779a:	d853      	bhi.n	8027844 <ADS_Abort.part.0+0x114>
 802779c:	2c00      	cmp	r4, #0
 802779e:	db3a      	blt.n	8027816 <ADS_Abort.part.0+0xe6>
 80277a0:	682b      	ldr	r3, [r5, #0]
 80277a2:	3302      	adds	r3, #2
 80277a4:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80277a6:	bf18      	it	ne
 80277a8:	682c      	ldrne	r4, [r5, #0]
 80277aa:	f04f 0100 	mov.w	r1, #0
 80277ae:	bf08      	it	eq
 80277b0:	2400      	moveq	r4, #0
 80277b2:	6029      	str	r1, [r5, #0]
 80277b4:	6429      	str	r1, [r5, #64]	@ 0x40
 80277b6:	b113      	cbz	r3, 80277be <ADS_Abort.part.0+0x8e>
 80277b8:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 80277ba:	4648      	mov	r0, r9
 80277bc:	4798      	blx	r3
 80277be:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80277c0:	2200      	movs	r2, #0
 80277c2:	63ea      	str	r2, [r5, #60]	@ 0x3c
 80277c4:	b113      	cbz	r3, 80277cc <ADS_Abort.part.0+0x9c>
 80277c6:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 80277c8:	4648      	mov	r0, r9
 80277ca:	4798      	blx	r3
 80277cc:	4620      	mov	r0, r4
 80277ce:	b002      	add	sp, #8
 80277d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80277d4:	42b1      	cmp	r1, r6
 80277d6:	d049      	beq.n	802786c <ADS_Abort.part.0+0x13c>
 80277d8:	2c02      	cmp	r4, #2
 80277da:	d1df      	bne.n	802779c <ADS_Abort.part.0+0x6c>
 80277dc:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80277de:	f7df f87f 	bl	80068e0 <S2PI_CycleCsPin>
 80277e2:	a901      	add	r1, sp, #4
 80277e4:	4604      	mov	r4, r0
 80277e6:	4668      	mov	r0, sp
 80277e8:	f7df fa62 	bl	8006cb0 <Timer_GetCounterValue>
 80277ec:	e9dd 1200 	ldrd	r1, r2, [sp]
 80277f0:	f1ba 0f00 	cmp.w	sl, #0
 80277f4:	d1ee      	bne.n	80277d4 <ADS_Abort.part.0+0xa4>
 80277f6:	42b1      	cmp	r1, r6
 80277f8:	d033      	beq.n	8027862 <ADS_Abort.part.0+0x132>
 80277fa:	bf8c      	ite	hi
 80277fc:	2301      	movhi	r3, #1
 80277fe:	2300      	movls	r3, #0
 8027800:	2b00      	cmp	r3, #0
 8027802:	d0cb      	beq.n	802779c <ADS_Abort.part.0+0x6c>
 8027804:	42b1      	cmp	r1, r6
 8027806:	d043      	beq.n	8027890 <ADS_Abort.part.0+0x160>
 8027808:	bf8c      	ite	hi
 802780a:	2201      	movhi	r2, #1
 802780c:	2200      	movls	r2, #0
 802780e:	2a00      	cmp	r2, #0
 8027810:	d0e2      	beq.n	80277d8 <ADS_Abort.part.0+0xa8>
 8027812:	2c00      	cmp	r4, #0
 8027814:	dac4      	bge.n	80277a0 <ADS_Abort.part.0+0x70>
 8027816:	4828      	ldr	r0, [pc, #160]	@ (80278b8 <ADS_Abort.part.0+0x188>)
 8027818:	4621      	mov	r1, r4
 802781a:	f7eb fbbb 	bl	8012f94 <print>
 802781e:	682b      	ldr	r3, [r5, #0]
 8027820:	3302      	adds	r3, #2
 8027822:	bf08      	it	eq
 8027824:	602c      	streq	r4, [r5, #0]
 8027826:	e7bb      	b.n	80277a0 <ADS_Abort.part.0+0x70>
 8027828:	42b3      	cmp	r3, r6
 802782a:	d015      	beq.n	8027858 <ADS_Abort.part.0+0x128>
 802782c:	bf8c      	ite	hi
 802782e:	2201      	movhi	r2, #1
 8027830:	2200      	movls	r2, #0
 8027832:	b912      	cbnz	r2, 802783a <ADS_Abort.part.0+0x10a>
 8027834:	4598      	cmp	r8, r3
 8027836:	d025      	beq.n	8027884 <ADS_Abort.part.0+0x154>
 8027838:	d3b0      	bcc.n	802779c <ADS_Abort.part.0+0x6c>
 802783a:	2c02      	cmp	r4, #2
 802783c:	d09f      	beq.n	802777e <ADS_Abort.part.0+0x4e>
 802783e:	e7ad      	b.n	802779c <ADS_Abort.part.0+0x6c>
 8027840:	42b9      	cmp	r1, r7
 8027842:	d3ab      	bcc.n	802779c <ADS_Abort.part.0+0x6c>
 8027844:	4598      	cmp	r8, r3
 8027846:	d016      	beq.n	8027876 <ADS_Abort.part.0+0x146>
 8027848:	bf34      	ite	cc
 802784a:	2101      	movcc	r1, #1
 802784c:	2100      	movcs	r1, #0
 802784e:	2900      	cmp	r1, #0
 8027850:	d1a4      	bne.n	802779c <ADS_Abort.part.0+0x6c>
 8027852:	2c02      	cmp	r4, #2
 8027854:	d093      	beq.n	802777e <ADS_Abort.part.0+0x4e>
 8027856:	e7a1      	b.n	802779c <ADS_Abort.part.0+0x6c>
 8027858:	42b9      	cmp	r1, r7
 802785a:	bf34      	ite	cc
 802785c:	2200      	movcc	r2, #0
 802785e:	2201      	movcs	r2, #1
 8027860:	e7e7      	b.n	8027832 <ADS_Abort.part.0+0x102>
 8027862:	42ba      	cmp	r2, r7
 8027864:	bf34      	ite	cc
 8027866:	2300      	movcc	r3, #0
 8027868:	2301      	movcs	r3, #1
 802786a:	e7c9      	b.n	8027800 <ADS_Abort.part.0+0xd0>
 802786c:	42ba      	cmp	r2, r7
 802786e:	d2b3      	bcs.n	80277d8 <ADS_Abort.part.0+0xa8>
 8027870:	4590      	cmp	r8, r2
 8027872:	d993      	bls.n	802779c <ADS_Abort.part.0+0x6c>
 8027874:	e7b0      	b.n	80277d8 <ADS_Abort.part.0+0xa8>
 8027876:	458a      	cmp	sl, r1
 8027878:	bf8c      	ite	hi
 802787a:	2100      	movhi	r1, #0
 802787c:	2101      	movls	r1, #1
 802787e:	2900      	cmp	r1, #0
 8027880:	d0e7      	beq.n	8027852 <ADS_Abort.part.0+0x122>
 8027882:	e78b      	b.n	802779c <ADS_Abort.part.0+0x6c>
 8027884:	458a      	cmp	sl, r1
 8027886:	d989      	bls.n	802779c <ADS_Abort.part.0+0x6c>
 8027888:	2c02      	cmp	r4, #2
 802788a:	f43f af78 	beq.w	802777e <ADS_Abort.part.0+0x4e>
 802788e:	e785      	b.n	802779c <ADS_Abort.part.0+0x6c>
 8027890:	4590      	cmp	r8, r2
 8027892:	bf8c      	ite	hi
 8027894:	2200      	movhi	r2, #0
 8027896:	2201      	movls	r2, #1
 8027898:	2a00      	cmp	r2, #0
 802789a:	d09d      	beq.n	80277d8 <ADS_Abort.part.0+0xa8>
 802789c:	e7b9      	b.n	8027812 <ADS_Abort.part.0+0xe2>
 802789e:	4807      	ldr	r0, [pc, #28]	@ (80278bc <ADS_Abort.part.0+0x18c>)
 80278a0:	4621      	mov	r1, r4
 80278a2:	f7eb fb77 	bl	8012f94 <print>
 80278a6:	682b      	ldr	r3, [r5, #0]
 80278a8:	3302      	adds	r3, #2
 80278aa:	bf08      	it	eq
 80278ac:	602c      	streq	r4, [r5, #0]
 80278ae:	e74f      	b.n	8027750 <ADS_Abort.part.0+0x20>
 80278b0:	000186a0 	.word	0x000186a0
 80278b4:	000f423f 	.word	0x000f423f
 80278b8:	08030fb4 	.word	0x08030fb4
 80278bc:	08030f7c 	.word	0x08030f7c

080278c0 <ADS_AwaitIdle.constprop.0>:
 80278c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80278c4:	4606      	mov	r6, r0
 80278c6:	b084      	sub	sp, #16
 80278c8:	a901      	add	r1, sp, #4
 80278ca:	4668      	mov	r0, sp
 80278cc:	f7df f9f0 	bl	8006cb0 <Timer_GetCounterValue>
 80278d0:	6833      	ldr	r3, [r6, #0]
 80278d2:	4c3a      	ldr	r4, [pc, #232]	@ (80279bc <ADS_AwaitIdle.constprop.0+0xfc>)
 80278d4:	4d3a      	ldr	r5, [pc, #232]	@ (80279c0 <ADS_AwaitIdle.constprop.0+0x100>)
 80278d6:	2b00      	cmp	r3, #0
 80278d8:	d047      	beq.n	802796a <ADS_AwaitIdle.constprop.0+0xaa>
 80278da:	6833      	ldr	r3, [r6, #0]
 80278dc:	2b67      	cmp	r3, #103	@ 0x67
 80278de:	d049      	beq.n	8027974 <ADS_AwaitIdle.constprop.0+0xb4>
 80278e0:	6833      	ldr	r3, [r6, #0]
 80278e2:	2b64      	cmp	r3, #100	@ 0x64
 80278e4:	d046      	beq.n	8027974 <ADS_AwaitIdle.constprop.0+0xb4>
 80278e6:	6837      	ldr	r7, [r6, #0]
 80278e8:	a802      	add	r0, sp, #8
 80278ea:	a903      	add	r1, sp, #12
 80278ec:	f7df f9e0 	bl	8006cb0 <Timer_GetCounterValue>
 80278f0:	e9dd 2c01 	ldrd	r2, ip, [sp, #4]
 80278f4:	1913      	adds	r3, r2, r4
 80278f6:	bf2c      	ite	cs
 80278f8:	2001      	movcs	r0, #1
 80278fa:	2000      	movcc	r0, #0
 80278fc:	42ab      	cmp	r3, r5
 80278fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8027902:	9900      	ldr	r1, [sp, #0]
 8027904:	d81b      	bhi.n	802793e <ADS_AwaitIdle.constprop.0+0x7e>
 8027906:	f080 0001 	eor.w	r0, r0, #1
 802790a:	468e      	mov	lr, r1
 802790c:	b310      	cbz	r0, 8027954 <ADS_AwaitIdle.constprop.0+0x94>
 802790e:	4561      	cmp	r1, ip
 8027910:	d03a      	beq.n	8027988 <ADS_AwaitIdle.constprop.0+0xc8>
 8027912:	bf34      	ite	cc
 8027914:	2201      	movcc	r2, #1
 8027916:	2200      	movcs	r2, #0
 8027918:	bb72      	cbnz	r2, 8027978 <ADS_AwaitIdle.constprop.0+0xb8>
 802791a:	482a      	ldr	r0, [pc, #168]	@ (80279c4 <ADS_AwaitIdle.constprop.0+0x104>)
 802791c:	2164      	movs	r1, #100	@ 0x64
 802791e:	f7eb fb39 	bl	8012f94 <print>
 8027922:	6833      	ldr	r3, [r6, #0]
 8027924:	3302      	adds	r3, #2
 8027926:	d042      	beq.n	80279ae <ADS_AwaitIdle.constprop.0+0xee>
 8027928:	f06f 0105 	mvn.w	r1, #5
 802792c:	4630      	mov	r0, r6
 802792e:	f7ff feff 	bl	8027730 <ADS_Abort.part.0>
 8027932:	f06f 0705 	mvn.w	r7, #5
 8027936:	4638      	mov	r0, r7
 8027938:	b004      	add	sp, #16
 802793a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802793e:	f101 0e01 	add.w	lr, r1, #1
 8027942:	4571      	cmp	r1, lr
 8027944:	f5a2 235b 	sub.w	r3, r2, #897024	@ 0xdb000
 8027948:	f5a3 633a 	sub.w	r3, r3, #2976	@ 0xba0
 802794c:	bf2c      	ite	cs
 802794e:	2000      	movcs	r0, #0
 8027950:	2001      	movcc	r0, #1
 8027952:	e7db      	b.n	802790c <ADS_AwaitIdle.constprop.0+0x4c>
 8027954:	4561      	cmp	r1, ip
 8027956:	d01c      	beq.n	8027992 <ADS_AwaitIdle.constprop.0+0xd2>
 8027958:	d302      	bcc.n	8027960 <ADS_AwaitIdle.constprop.0+0xa0>
 802795a:	45e6      	cmp	lr, ip
 802795c:	d01d      	beq.n	802799a <ADS_AwaitIdle.constprop.0+0xda>
 802795e:	d3dc      	bcc.n	802791a <ADS_AwaitIdle.constprop.0+0x5a>
 8027960:	2f02      	cmp	r7, #2
 8027962:	d1e8      	bne.n	8027936 <ADS_AwaitIdle.constprop.0+0x76>
 8027964:	6833      	ldr	r3, [r6, #0]
 8027966:	2b00      	cmp	r3, #0
 8027968:	d1b7      	bne.n	80278da <ADS_AwaitIdle.constprop.0+0x1a>
 802796a:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 802796c:	f7de fecc 	bl	8006708 <S2PI_GetStatus>
 8027970:	4607      	mov	r7, r0
 8027972:	e7b9      	b.n	80278e8 <ADS_AwaitIdle.constprop.0+0x28>
 8027974:	2702      	movs	r7, #2
 8027976:	e7b7      	b.n	80278e8 <ADS_AwaitIdle.constprop.0+0x28>
 8027978:	45e6      	cmp	lr, ip
 802797a:	d011      	beq.n	80279a0 <ADS_AwaitIdle.constprop.0+0xe0>
 802797c:	bf34      	ite	cc
 802797e:	2301      	movcc	r3, #1
 8027980:	2300      	movcs	r3, #0
 8027982:	2b00      	cmp	r3, #0
 8027984:	d0ec      	beq.n	8027960 <ADS_AwaitIdle.constprop.0+0xa0>
 8027986:	e7c8      	b.n	802791a <ADS_AwaitIdle.constprop.0+0x5a>
 8027988:	4542      	cmp	r2, r8
 802798a:	bf8c      	ite	hi
 802798c:	2200      	movhi	r2, #0
 802798e:	2201      	movls	r2, #1
 8027990:	e7c2      	b.n	8027918 <ADS_AwaitIdle.constprop.0+0x58>
 8027992:	4542      	cmp	r2, r8
 8027994:	d9e4      	bls.n	8027960 <ADS_AwaitIdle.constprop.0+0xa0>
 8027996:	45e6      	cmp	lr, ip
 8027998:	d1e1      	bne.n	802795e <ADS_AwaitIdle.constprop.0+0x9e>
 802799a:	4543      	cmp	r3, r8
 802799c:	d9bd      	bls.n	802791a <ADS_AwaitIdle.constprop.0+0x5a>
 802799e:	e7df      	b.n	8027960 <ADS_AwaitIdle.constprop.0+0xa0>
 80279a0:	4543      	cmp	r3, r8
 80279a2:	bf8c      	ite	hi
 80279a4:	2300      	movhi	r3, #0
 80279a6:	2301      	movls	r3, #1
 80279a8:	2b00      	cmp	r3, #0
 80279aa:	d0d9      	beq.n	8027960 <ADS_AwaitIdle.constprop.0+0xa0>
 80279ac:	e7b5      	b.n	802791a <ADS_AwaitIdle.constprop.0+0x5a>
 80279ae:	f06f 0705 	mvn.w	r7, #5
 80279b2:	4638      	mov	r0, r7
 80279b4:	b004      	add	sp, #16
 80279b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80279ba:	bf00      	nop
 80279bc:	000186a0 	.word	0x000186a0
 80279c0:	000f423f 	.word	0x000f423f
 80279c4:	08030fe8 	.word	0x08030fe8

080279c8 <ADS_IRQ_Callback>:
 80279c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80279ca:	4604      	mov	r4, r0
 80279cc:	b083      	sub	sp, #12
 80279ce:	f7de fd8b 	bl	80064e8 <IRQ_LOCK>
 80279d2:	6823      	ldr	r3, [r4, #0]
 80279d4:	2b67      	cmp	r3, #103	@ 0x67
 80279d6:	d004      	beq.n	80279e2 <ADS_IRQ_Callback+0x1a>
 80279d8:	b003      	add	sp, #12
 80279da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80279de:	f7de bd61 	b.w	80064a4 <IRQ_UNLOCK>
 80279e2:	2300      	movs	r3, #0
 80279e4:	6023      	str	r3, [r4, #0]
 80279e6:	a901      	add	r1, sp, #4
 80279e8:	4668      	mov	r0, sp
 80279ea:	f7df f961 	bl	8006cb0 <Timer_GetCounterValue>
 80279ee:	9901      	ldr	r1, [sp, #4]
 80279f0:	68e3      	ldr	r3, [r4, #12]
 80279f2:	9a00      	ldr	r2, [sp, #0]
 80279f4:	68a5      	ldr	r5, [r4, #8]
 80279f6:	4299      	cmp	r1, r3
 80279f8:	bf3c      	itt	cc
 80279fa:	f102 32ff 	addcc.w	r2, r2, #4294967295
 80279fe:	f501 2174 	addcc.w	r1, r1, #999424	@ 0xf4000
 8027a02:	eba2 0505 	sub.w	r5, r2, r5
 8027a06:	f241 02c5 	movw	r2, #4293	@ 0x10c5
 8027a0a:	bf38      	it	cc
 8027a0c:	f501 7110 	addcc.w	r1, r1, #576	@ 0x240
 8027a10:	4295      	cmp	r5, r2
 8027a12:	eba1 0303 	sub.w	r3, r1, r3
 8027a16:	d811      	bhi.n	8027a3c <ADS_IRQ_Callback+0x74>
 8027a18:	490e      	ldr	r1, [pc, #56]	@ (8027a54 <ADS_IRQ_Callback+0x8c>)
 8027a1a:	fb01 3505 	mla	r5, r1, r5, r3
 8027a1e:	6c27      	ldr	r7, [r4, #64]	@ 0x40
 8027a20:	2600      	movs	r6, #0
 8027a22:	6426      	str	r6, [r4, #64]	@ 0x40
 8027a24:	6066      	str	r6, [r4, #4]
 8027a26:	f7de fd3d 	bl	80064a4 <IRQ_UNLOCK>
 8027a2a:	b18f      	cbz	r7, 8027a50 <ADS_IRQ_Callback+0x88>
 8027a2c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8027a2e:	4629      	mov	r1, r5
 8027a30:	4630      	mov	r0, r6
 8027a32:	463b      	mov	r3, r7
 8027a34:	b003      	add	sp, #12
 8027a36:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8027a3a:	4718      	bx	r3
 8027a3c:	f241 02c6 	movw	r2, #4294	@ 0x10c6
 8027a40:	4295      	cmp	r5, r2
 8027a42:	d102      	bne.n	8027a4a <ADS_IRQ_Callback+0x82>
 8027a44:	4a04      	ldr	r2, [pc, #16]	@ (8027a58 <ADS_IRQ_Callback+0x90>)
 8027a46:	4293      	cmp	r3, r2
 8027a48:	d9e6      	bls.n	8027a18 <ADS_IRQ_Callback+0x50>
 8027a4a:	f04f 35ff 	mov.w	r5, #4294967295
 8027a4e:	e7e6      	b.n	8027a1e <ADS_IRQ_Callback+0x56>
 8027a50:	b003      	add	sp, #12
 8027a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027a54:	000f4240 	.word	0x000f4240
 8027a58:	000ec27e 	.word	0x000ec27e

08027a5c <ADS_Init>:
 8027a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027a5e:	2303      	movs	r3, #3
 8027a60:	b08b      	sub	sp, #44	@ 0x2c
 8027a62:	4604      	mov	r4, r0
 8027a64:	6003      	str	r3, [r0, #0]
 8027a66:	2900      	cmp	r1, #0
 8027a68:	f000 822d 	beq.w	8027ec6 <ADS_Init+0x46a>
 8027a6c:	460b      	mov	r3, r1
 8027a6e:	4602      	mov	r2, r0
 8027a70:	4906      	ldr	r1, [pc, #24]	@ (8027a8c <ADS_Init+0x30>)
 8027a72:	9303      	str	r3, [sp, #12]
 8027a74:	4618      	mov	r0, r3
 8027a76:	f7df f891 	bl	8006b9c <S2PI_SetIrqCallback>
 8027a7a:	9b03      	ldr	r3, [sp, #12]
 8027a7c:	4605      	mov	r5, r0
 8027a7e:	b138      	cbz	r0, 8027a90 <ADS_Init+0x34>
 8027a80:	f06f 0306 	mvn.w	r3, #6
 8027a84:	6023      	str	r3, [r4, #0]
 8027a86:	4628      	mov	r0, r5
 8027a88:	b00b      	add	sp, #44	@ 0x2c
 8027a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027a8c:	080279c9 	.word	0x080279c9
 8027a90:	48b1      	ldr	r0, [pc, #708]	@ (8027d58 <ADS_Init+0x2fc>)
 8027a92:	4ab2      	ldr	r2, [pc, #712]	@ (8027d5c <ADS_Init+0x300>)
 8027a94:	4fb2      	ldr	r7, [pc, #712]	@ (8027d60 <ADS_Init+0x304>)
 8027a96:	4eb3      	ldr	r6, [pc, #716]	@ (8027d64 <ADS_Init+0x308>)
 8027a98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8027a9a:	6025      	str	r5, [r4, #0]
 8027a9c:	2310      	movs	r3, #16
 8027a9e:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
 8027aa2:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8027aa6:	e9cd 7605 	strd	r7, r6, [sp, #20]
 8027aaa:	e9cd 0207 	strd	r0, r2, [sp, #28]
 8027aae:	f7de fd1b 	bl	80064e8 <IRQ_LOCK>
 8027ab2:	6823      	ldr	r3, [r4, #0]
 8027ab4:	2b00      	cmp	r3, #0
 8027ab6:	f040 8188 	bne.w	8027dca <ADS_Init+0x36e>
 8027aba:	2302      	movs	r3, #2
 8027abc:	6023      	str	r3, [r4, #0]
 8027abe:	f7de fcf1 	bl	80064a4 <IRQ_UNLOCK>
 8027ac2:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8027ac6:	6465      	str	r5, [r4, #68]	@ 0x44
 8027ac8:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 8027acc:	2b00      	cmp	r3, #0
 8027ace:	f040 814f 	bne.w	8027d70 <ADS_Init+0x314>
 8027ad2:	f7de fd09 	bl	80064e8 <IRQ_LOCK>
 8027ad6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8027ad8:	f7de fff8 	bl	8006acc <S2PI_TryGetMutex>
 8027adc:	4606      	mov	r6, r0
 8027ade:	2800      	cmp	r0, #0
 8027ae0:	f000 8152 	beq.w	8027d88 <ADS_Init+0x32c>
 8027ae4:	2200      	movs	r2, #0
 8027ae6:	ab05      	add	r3, sp, #20
 8027ae8:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8027aec:	499e      	ldr	r1, [pc, #632]	@ (8027d68 <ADS_Init+0x30c>)
 8027aee:	6262      	str	r2, [r4, #36]	@ 0x24
 8027af0:	2311      	movs	r3, #17
 8027af2:	6223      	str	r3, [r4, #32]
 8027af4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8027af6:	6123      	str	r3, [r4, #16]
 8027af8:	680b      	ldr	r3, [r1, #0]
 8027afa:	6164      	str	r4, [r4, #20]
 8027afc:	62a2      	str	r2, [r4, #40]	@ 0x28
 8027afe:	2b00      	cmp	r3, #0
 8027b00:	f000 815f 	beq.w	8027dc2 <ADS_Init+0x366>
 8027b04:	461a      	mov	r2, r3
 8027b06:	699b      	ldr	r3, [r3, #24]
 8027b08:	2b00      	cmp	r3, #0
 8027b0a:	d1fb      	bne.n	8027b04 <ADS_Init+0xa8>
 8027b0c:	f104 0310 	add.w	r3, r4, #16
 8027b10:	6193      	str	r3, [r2, #24]
 8027b12:	f7de fcc7 	bl	80064a4 <IRQ_UNLOCK>
 8027b16:	4620      	mov	r0, r4
 8027b18:	f7ff fed2 	bl	80278c0 <ADS_AwaitIdle.constprop.0>
 8027b1c:	2800      	cmp	r0, #0
 8027b1e:	f2c0 815a 	blt.w	8027dd6 <ADS_Init+0x37a>
 8027b22:	2300      	movs	r3, #0
 8027b24:	2204      	movs	r2, #4
 8027b26:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8027b2a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8027b2e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8027b32:	f88d 2014 	strb.w	r2, [sp, #20]
 8027b36:	f7de fcd7 	bl	80064e8 <IRQ_LOCK>
 8027b3a:	6826      	ldr	r6, [r4, #0]
 8027b3c:	2e00      	cmp	r6, #0
 8027b3e:	f040 8150 	bne.w	8027de2 <ADS_Init+0x386>
 8027b42:	2302      	movs	r3, #2
 8027b44:	6023      	str	r3, [r4, #0]
 8027b46:	f7de fcad 	bl	80064a4 <IRQ_UNLOCK>
 8027b4a:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8027b4e:	6466      	str	r6, [r4, #68]	@ 0x44
 8027b50:	e9c4 660f 	strd	r6, r6, [r4, #60]	@ 0x3c
 8027b54:	b11b      	cbz	r3, 8027b5e <ADS_Init+0x102>
 8027b56:	2311      	movs	r3, #17
 8027b58:	aa05      	add	r2, sp, #20
 8027b5a:	e9c4 320d 	strd	r3, r2, [r4, #52]	@ 0x34
 8027b5e:	f7de fcc3 	bl	80064e8 <IRQ_LOCK>
 8027b62:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8027b64:	f7de ffb2 	bl	8006acc <S2PI_TryGetMutex>
 8027b68:	4606      	mov	r6, r0
 8027b6a:	2800      	cmp	r0, #0
 8027b6c:	f000 8183 	beq.w	8027e76 <ADS_Init+0x41a>
 8027b70:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8027b72:	6122      	str	r2, [r4, #16]
 8027b74:	4a7c      	ldr	r2, [pc, #496]	@ (8027d68 <ADS_Init+0x30c>)
 8027b76:	6164      	str	r4, [r4, #20]
 8027b78:	2300      	movs	r3, #0
 8027b7a:	2111      	movs	r1, #17
 8027b7c:	6263      	str	r3, [r4, #36]	@ 0x24
 8027b7e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8027b80:	6813      	ldr	r3, [r2, #0]
 8027b82:	6221      	str	r1, [r4, #32]
 8027b84:	a905      	add	r1, sp, #20
 8027b86:	e9c4 1106 	strd	r1, r1, [r4, #24]
 8027b8a:	2b00      	cmp	r3, #0
 8027b8c:	f000 8190 	beq.w	8027eb0 <ADS_Init+0x454>
 8027b90:	461a      	mov	r2, r3
 8027b92:	699b      	ldr	r3, [r3, #24]
 8027b94:	2b00      	cmp	r3, #0
 8027b96:	d1fb      	bne.n	8027b90 <ADS_Init+0x134>
 8027b98:	f104 0310 	add.w	r3, r4, #16
 8027b9c:	6193      	str	r3, [r2, #24]
 8027b9e:	f7de fc81 	bl	80064a4 <IRQ_UNLOCK>
 8027ba2:	4620      	mov	r0, r4
 8027ba4:	f7ff fe8c 	bl	80278c0 <ADS_AwaitIdle.constprop.0>
 8027ba8:	2800      	cmp	r0, #0
 8027baa:	f2c0 8114 	blt.w	8027dd6 <ADS_Init+0x37a>
 8027bae:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8027bb2:	2bfe      	cmp	r3, #254	@ 0xfe
 8027bb4:	bf0c      	ite	eq
 8027bb6:	2201      	moveq	r2, #1
 8027bb8:	2200      	movne	r2, #0
 8027bba:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 8027bbe:	f000 8117 	beq.w	8027df0 <ADS_Init+0x394>
 8027bc2:	2b01      	cmp	r3, #1
 8027bc4:	f040 8151 	bne.w	8027e6a <ADS_Init+0x40e>
 8027bc8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8027bcc:	2b02      	cmp	r3, #2
 8027bce:	f040 814c 	bne.w	8027e6a <ADS_Init+0x40e>
 8027bd2:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8027bd6:	2b03      	cmp	r3, #3
 8027bd8:	f040 8147 	bne.w	8027e6a <ADS_Init+0x40e>
 8027bdc:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8027be0:	2b04      	cmp	r3, #4
 8027be2:	f040 8142 	bne.w	8027e6a <ADS_Init+0x40e>
 8027be6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8027bea:	2b05      	cmp	r3, #5
 8027bec:	f040 813d 	bne.w	8027e6a <ADS_Init+0x40e>
 8027bf0:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8027bf4:	2b06      	cmp	r3, #6
 8027bf6:	f040 8138 	bne.w	8027e6a <ADS_Init+0x40e>
 8027bfa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8027bfe:	2b07      	cmp	r3, #7
 8027c00:	f040 8133 	bne.w	8027e6a <ADS_Init+0x40e>
 8027c04:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8027c08:	2b08      	cmp	r3, #8
 8027c0a:	f040 812e 	bne.w	8027e6a <ADS_Init+0x40e>
 8027c0e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8027c12:	2b09      	cmp	r3, #9
 8027c14:	f040 8129 	bne.w	8027e6a <ADS_Init+0x40e>
 8027c18:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8027c1c:	2b0a      	cmp	r3, #10
 8027c1e:	f040 8124 	bne.w	8027e6a <ADS_Init+0x40e>
 8027c22:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8027c26:	2b0b      	cmp	r3, #11
 8027c28:	f040 811f 	bne.w	8027e6a <ADS_Init+0x40e>
 8027c2c:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8027c30:	2b0c      	cmp	r3, #12
 8027c32:	f040 811a 	bne.w	8027e6a <ADS_Init+0x40e>
 8027c36:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8027c3a:	2b0d      	cmp	r3, #13
 8027c3c:	f040 8115 	bne.w	8027e6a <ADS_Init+0x40e>
 8027c40:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 8027c44:	2b0e      	cmp	r3, #14
 8027c46:	f040 8110 	bne.w	8027e6a <ADS_Init+0x40e>
 8027c4a:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8027c4e:	2b0f      	cmp	r3, #15
 8027c50:	f040 810b 	bne.w	8027e6a <ADS_Init+0x40e>
 8027c54:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8027c58:	2b10      	cmp	r3, #16
 8027c5a:	f040 8106 	bne.w	8027e6a <ADS_Init+0x40e>
 8027c5e:	2300      	movs	r3, #0
 8027c60:	2204      	movs	r2, #4
 8027c62:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8027c66:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8027c6a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8027c6e:	f88d 2014 	strb.w	r2, [sp, #20]
 8027c72:	f7de fc39 	bl	80064e8 <IRQ_LOCK>
 8027c76:	6826      	ldr	r6, [r4, #0]
 8027c78:	2e00      	cmp	r6, #0
 8027c7a:	f040 811d 	bne.w	8027eb8 <ADS_Init+0x45c>
 8027c7e:	2302      	movs	r3, #2
 8027c80:	6023      	str	r3, [r4, #0]
 8027c82:	f7de fc0f 	bl	80064a4 <IRQ_UNLOCK>
 8027c86:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8027c8a:	6466      	str	r6, [r4, #68]	@ 0x44
 8027c8c:	e9c4 660f 	strd	r6, r6, [r4, #60]	@ 0x3c
 8027c90:	b11b      	cbz	r3, 8027c9a <ADS_Init+0x23e>
 8027c92:	2311      	movs	r3, #17
 8027c94:	aa05      	add	r2, sp, #20
 8027c96:	e9c4 320d 	strd	r3, r2, [r4, #52]	@ 0x34
 8027c9a:	f7de fc25 	bl	80064e8 <IRQ_LOCK>
 8027c9e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8027ca0:	f7de ff14 	bl	8006acc <S2PI_TryGetMutex>
 8027ca4:	4606      	mov	r6, r0
 8027ca6:	2800      	cmp	r0, #0
 8027ca8:	f000 8116 	beq.w	8027ed8 <ADS_Init+0x47c>
 8027cac:	2111      	movs	r1, #17
 8027cae:	6221      	str	r1, [r4, #32]
 8027cb0:	a905      	add	r1, sp, #20
 8027cb2:	e9c4 1106 	strd	r1, r1, [r4, #24]
 8027cb6:	492c      	ldr	r1, [pc, #176]	@ (8027d68 <ADS_Init+0x30c>)
 8027cb8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8027cba:	6123      	str	r3, [r4, #16]
 8027cbc:	680b      	ldr	r3, [r1, #0]
 8027cbe:	6164      	str	r4, [r4, #20]
 8027cc0:	2200      	movs	r2, #0
 8027cc2:	6262      	str	r2, [r4, #36]	@ 0x24
 8027cc4:	62a2      	str	r2, [r4, #40]	@ 0x28
 8027cc6:	2b00      	cmp	r3, #0
 8027cc8:	f000 8123 	beq.w	8027f12 <ADS_Init+0x4b6>
 8027ccc:	461a      	mov	r2, r3
 8027cce:	699b      	ldr	r3, [r3, #24]
 8027cd0:	2b00      	cmp	r3, #0
 8027cd2:	d1fb      	bne.n	8027ccc <ADS_Init+0x270>
 8027cd4:	f104 0310 	add.w	r3, r4, #16
 8027cd8:	6193      	str	r3, [r2, #24]
 8027cda:	f7de fbe3 	bl	80064a4 <IRQ_UNLOCK>
 8027cde:	4620      	mov	r0, r4
 8027ce0:	f7ff fdee 	bl	80278c0 <ADS_AwaitIdle.constprop.0>
 8027ce4:	2800      	cmp	r0, #0
 8027ce6:	db76      	blt.n	8027dd6 <ADS_Init+0x37a>
 8027ce8:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8027cec:	bb73      	cbnz	r3, 8027d4c <ADS_Init+0x2f0>
 8027cee:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8027cf2:	bb5b      	cbnz	r3, 8027d4c <ADS_Init+0x2f0>
 8027cf4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8027cf8:	bb43      	cbnz	r3, 8027d4c <ADS_Init+0x2f0>
 8027cfa:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8027cfe:	bb2b      	cbnz	r3, 8027d4c <ADS_Init+0x2f0>
 8027d00:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8027d04:	bb13      	cbnz	r3, 8027d4c <ADS_Init+0x2f0>
 8027d06:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8027d0a:	b9fb      	cbnz	r3, 8027d4c <ADS_Init+0x2f0>
 8027d0c:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8027d10:	b9e3      	cbnz	r3, 8027d4c <ADS_Init+0x2f0>
 8027d12:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8027d16:	b9cb      	cbnz	r3, 8027d4c <ADS_Init+0x2f0>
 8027d18:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8027d1c:	b9b3      	cbnz	r3, 8027d4c <ADS_Init+0x2f0>
 8027d1e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8027d22:	b99b      	cbnz	r3, 8027d4c <ADS_Init+0x2f0>
 8027d24:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8027d28:	b983      	cbnz	r3, 8027d4c <ADS_Init+0x2f0>
 8027d2a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8027d2e:	b96b      	cbnz	r3, 8027d4c <ADS_Init+0x2f0>
 8027d30:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8027d34:	b953      	cbnz	r3, 8027d4c <ADS_Init+0x2f0>
 8027d36:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 8027d3a:	b93b      	cbnz	r3, 8027d4c <ADS_Init+0x2f0>
 8027d3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8027d40:	b923      	cbnz	r3, 8027d4c <ADS_Init+0x2f0>
 8027d42:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8027d46:	2b00      	cmp	r3, #0
 8027d48:	f43f ae9d 	beq.w	8027a86 <ADS_Init+0x2a>
 8027d4c:	4807      	ldr	r0, [pc, #28]	@ (8027d6c <ADS_Init+0x310>)
 8027d4e:	f7eb f921 	bl	8012f94 <print>
 8027d52:	f06f 0564 	mvn.w	r5, #100	@ 0x64
 8027d56:	e03f      	b.n	8027dd8 <ADS_Init+0x37c>
 8027d58:	0b0a0908 	.word	0x0b0a0908
 8027d5c:	0f0e0d0c 	.word	0x0f0e0d0c
 8027d60:	03020104 	.word	0x03020104
 8027d64:	07060504 	.word	0x07060504
 8027d68:	240036c4 	.word	0x240036c4
 8027d6c:	080310d4 	.word	0x080310d4
 8027d70:	2311      	movs	r3, #17
 8027d72:	e9c4 350d 	strd	r3, r5, [r4, #52]	@ 0x34
 8027d76:	f7de fbb7 	bl	80064e8 <IRQ_LOCK>
 8027d7a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8027d7c:	f7de fea6 	bl	8006acc <S2PI_TryGetMutex>
 8027d80:	4606      	mov	r6, r0
 8027d82:	2800      	cmp	r0, #0
 8027d84:	f47f aeae 	bne.w	8027ae4 <ADS_Init+0x88>
 8027d88:	f7de fb8c 	bl	80064a4 <IRQ_UNLOCK>
 8027d8c:	4b63      	ldr	r3, [pc, #396]	@ (8027f1c <ADS_Init+0x4c0>)
 8027d8e:	e9cd 3400 	strd	r3, r4, [sp]
 8027d92:	4632      	mov	r2, r6
 8027d94:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8027d96:	2311      	movs	r3, #17
 8027d98:	a905      	add	r1, sp, #20
 8027d9a:	f7de fdd5 	bl	8006948 <S2PI_TransferFrame>
 8027d9e:	4607      	mov	r7, r0
 8027da0:	2800      	cmp	r0, #0
 8027da2:	f43f aeb8 	beq.w	8027b16 <ADS_Init+0xba>
 8027da6:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8027daa:	4602      	mov	r2, r0
 8027dac:	485c      	ldr	r0, [pc, #368]	@ (8027f20 <ADS_Init+0x4c4>)
 8027dae:	f7eb f8f1 	bl	8012f94 <print>
 8027db2:	2302      	movs	r3, #2
 8027db4:	6426      	str	r6, [r4, #64]	@ 0x40
 8027db6:	6023      	str	r3, [r4, #0]
 8027db8:	4621      	mov	r1, r4
 8027dba:	4638      	mov	r0, r7
 8027dbc:	f7ff fc76 	bl	80276ac <ADS_SPI_Callback>
 8027dc0:	e006      	b.n	8027dd0 <ADS_Init+0x374>
 8027dc2:	f104 0310 	add.w	r3, r4, #16
 8027dc6:	600b      	str	r3, [r1, #0]
 8027dc8:	e6a3      	b.n	8027b12 <ADS_Init+0xb6>
 8027dca:	f7de fb6b 	bl	80064a4 <IRQ_UNLOCK>
 8027dce:	6820      	ldr	r0, [r4, #0]
 8027dd0:	2800      	cmp	r0, #0
 8027dd2:	f6bf aea0 	bge.w	8027b16 <ADS_Init+0xba>
 8027dd6:	4605      	mov	r5, r0
 8027dd8:	4629      	mov	r1, r5
 8027dda:	4852      	ldr	r0, [pc, #328]	@ (8027f24 <ADS_Init+0x4c8>)
 8027ddc:	f7eb f8da 	bl	8012f94 <print>
 8027de0:	e64e      	b.n	8027a80 <ADS_Init+0x24>
 8027de2:	f7de fb5f 	bl	80064a4 <IRQ_UNLOCK>
 8027de6:	6820      	ldr	r0, [r4, #0]
 8027de8:	2800      	cmp	r0, #0
 8027dea:	f6bf aeda 	bge.w	8027ba2 <ADS_Init+0x146>
 8027dee:	e7f2      	b.n	8027dd6 <ADS_Init+0x37a>
 8027df0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8027df4:	2bfd      	cmp	r3, #253	@ 0xfd
 8027df6:	d138      	bne.n	8027e6a <ADS_Init+0x40e>
 8027df8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8027dfc:	2bfc      	cmp	r3, #252	@ 0xfc
 8027dfe:	d134      	bne.n	8027e6a <ADS_Init+0x40e>
 8027e00:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8027e04:	2bfb      	cmp	r3, #251	@ 0xfb
 8027e06:	d130      	bne.n	8027e6a <ADS_Init+0x40e>
 8027e08:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8027e0c:	2bfa      	cmp	r3, #250	@ 0xfa
 8027e0e:	d12c      	bne.n	8027e6a <ADS_Init+0x40e>
 8027e10:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8027e14:	2bf9      	cmp	r3, #249	@ 0xf9
 8027e16:	d128      	bne.n	8027e6a <ADS_Init+0x40e>
 8027e18:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8027e1c:	2bf8      	cmp	r3, #248	@ 0xf8
 8027e1e:	d124      	bne.n	8027e6a <ADS_Init+0x40e>
 8027e20:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8027e24:	2bf7      	cmp	r3, #247	@ 0xf7
 8027e26:	d120      	bne.n	8027e6a <ADS_Init+0x40e>
 8027e28:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8027e2c:	2bf6      	cmp	r3, #246	@ 0xf6
 8027e2e:	d11c      	bne.n	8027e6a <ADS_Init+0x40e>
 8027e30:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8027e34:	2bf5      	cmp	r3, #245	@ 0xf5
 8027e36:	d118      	bne.n	8027e6a <ADS_Init+0x40e>
 8027e38:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8027e3c:	2bf4      	cmp	r3, #244	@ 0xf4
 8027e3e:	d114      	bne.n	8027e6a <ADS_Init+0x40e>
 8027e40:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8027e44:	2bf3      	cmp	r3, #243	@ 0xf3
 8027e46:	d110      	bne.n	8027e6a <ADS_Init+0x40e>
 8027e48:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8027e4c:	2bf2      	cmp	r3, #242	@ 0xf2
 8027e4e:	d10c      	bne.n	8027e6a <ADS_Init+0x40e>
 8027e50:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 8027e54:	2bf1      	cmp	r3, #241	@ 0xf1
 8027e56:	d108      	bne.n	8027e6a <ADS_Init+0x40e>
 8027e58:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8027e5c:	2bf0      	cmp	r3, #240	@ 0xf0
 8027e5e:	d104      	bne.n	8027e6a <ADS_Init+0x40e>
 8027e60:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8027e64:	2bef      	cmp	r3, #239	@ 0xef
 8027e66:	f43f aefa 	beq.w	8027c5e <ADS_Init+0x202>
 8027e6a:	482f      	ldr	r0, [pc, #188]	@ (8027f28 <ADS_Init+0x4cc>)
 8027e6c:	f7eb f892 	bl	8012f94 <print>
 8027e70:	f06f 0564 	mvn.w	r5, #100	@ 0x64
 8027e74:	e7b0      	b.n	8027dd8 <ADS_Init+0x37c>
 8027e76:	f7de fb15 	bl	80064a4 <IRQ_UNLOCK>
 8027e7a:	4b28      	ldr	r3, [pc, #160]	@ (8027f1c <ADS_Init+0x4c0>)
 8027e7c:	e9cd 3400 	strd	r3, r4, [sp]
 8027e80:	aa05      	add	r2, sp, #20
 8027e82:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8027e84:	2311      	movs	r3, #17
 8027e86:	4611      	mov	r1, r2
 8027e88:	f7de fd5e 	bl	8006948 <S2PI_TransferFrame>
 8027e8c:	4607      	mov	r7, r0
 8027e8e:	2800      	cmp	r0, #0
 8027e90:	f43f ae87 	beq.w	8027ba2 <ADS_Init+0x146>
 8027e94:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8027e98:	4602      	mov	r2, r0
 8027e9a:	4821      	ldr	r0, [pc, #132]	@ (8027f20 <ADS_Init+0x4c4>)
 8027e9c:	f7eb f87a 	bl	8012f94 <print>
 8027ea0:	2302      	movs	r3, #2
 8027ea2:	6426      	str	r6, [r4, #64]	@ 0x40
 8027ea4:	6023      	str	r3, [r4, #0]
 8027ea6:	4621      	mov	r1, r4
 8027ea8:	4638      	mov	r0, r7
 8027eaa:	f7ff fbff 	bl	80276ac <ADS_SPI_Callback>
 8027eae:	e79b      	b.n	8027de8 <ADS_Init+0x38c>
 8027eb0:	f104 0310 	add.w	r3, r4, #16
 8027eb4:	6013      	str	r3, [r2, #0]
 8027eb6:	e672      	b.n	8027b9e <ADS_Init+0x142>
 8027eb8:	f7de faf4 	bl	80064a4 <IRQ_UNLOCK>
 8027ebc:	6820      	ldr	r0, [r4, #0]
 8027ebe:	2800      	cmp	r0, #0
 8027ec0:	f6bf af0d 	bge.w	8027cde <ADS_Init+0x282>
 8027ec4:	e787      	b.n	8027dd6 <ADS_Init+0x37a>
 8027ec6:	4819      	ldr	r0, [pc, #100]	@ (8027f2c <ADS_Init+0x4d0>)
 8027ec8:	f7eb f864 	bl	8012f94 <print>
 8027ecc:	f06f 0306 	mvn.w	r3, #6
 8027ed0:	6023      	str	r3, [r4, #0]
 8027ed2:	f06f 0567 	mvn.w	r5, #103	@ 0x67
 8027ed6:	e5d6      	b.n	8027a86 <ADS_Init+0x2a>
 8027ed8:	f7de fae4 	bl	80064a4 <IRQ_UNLOCK>
 8027edc:	4b0f      	ldr	r3, [pc, #60]	@ (8027f1c <ADS_Init+0x4c0>)
 8027ede:	e9cd 3400 	strd	r3, r4, [sp]
 8027ee2:	aa05      	add	r2, sp, #20
 8027ee4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8027ee6:	2311      	movs	r3, #17
 8027ee8:	4611      	mov	r1, r2
 8027eea:	f7de fd2d 	bl	8006948 <S2PI_TransferFrame>
 8027eee:	4607      	mov	r7, r0
 8027ef0:	2800      	cmp	r0, #0
 8027ef2:	f43f aef4 	beq.w	8027cde <ADS_Init+0x282>
 8027ef6:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8027efa:	4602      	mov	r2, r0
 8027efc:	4808      	ldr	r0, [pc, #32]	@ (8027f20 <ADS_Init+0x4c4>)
 8027efe:	f7eb f849 	bl	8012f94 <print>
 8027f02:	2302      	movs	r3, #2
 8027f04:	6426      	str	r6, [r4, #64]	@ 0x40
 8027f06:	6023      	str	r3, [r4, #0]
 8027f08:	4621      	mov	r1, r4
 8027f0a:	4638      	mov	r0, r7
 8027f0c:	f7ff fbce 	bl	80276ac <ADS_SPI_Callback>
 8027f10:	e7d5      	b.n	8027ebe <ADS_Init+0x462>
 8027f12:	f104 0310 	add.w	r3, r4, #16
 8027f16:	600b      	str	r3, [r1, #0]
 8027f18:	e6df      	b.n	8027cda <ADS_Init+0x27e>
 8027f1a:	bf00      	nop
 8027f1c:	080276ad 	.word	0x080276ad
 8027f20:	08030f34 	.word	0x08030f34
 8027f24:	08031158 	.word	0x08031158
 8027f28:	08031058 	.word	0x08031058
 8027f2c:	08031030 	.word	0x08031030

08027f30 <ADS_Abort>:
 8027f30:	6803      	ldr	r3, [r0, #0]
 8027f32:	3302      	adds	r3, #2
 8027f34:	d001      	beq.n	8027f3a <ADS_Abort+0xa>
 8027f36:	f7ff bbfb 	b.w	8027730 <ADS_Abort.part.0>
 8027f3a:	2000      	movs	r0, #0
 8027f3c:	4770      	bx	lr
 8027f3e:	bf00      	nop

08027f40 <ADS_GetStatus>:
 8027f40:	6803      	ldr	r3, [r0, #0]
 8027f42:	b14b      	cbz	r3, 8027f58 <ADS_GetStatus+0x18>
 8027f44:	6803      	ldr	r3, [r0, #0]
 8027f46:	2b67      	cmp	r3, #103	@ 0x67
 8027f48:	d004      	beq.n	8027f54 <ADS_GetStatus+0x14>
 8027f4a:	6803      	ldr	r3, [r0, #0]
 8027f4c:	2b64      	cmp	r3, #100	@ 0x64
 8027f4e:	d001      	beq.n	8027f54 <ADS_GetStatus+0x14>
 8027f50:	6800      	ldr	r0, [r0, #0]
 8027f52:	4770      	bx	lr
 8027f54:	2002      	movs	r0, #2
 8027f56:	4770      	bx	lr
 8027f58:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8027f5a:	f7de bbd5 	b.w	8006708 <S2PI_GetStatus>
 8027f5e:	bf00      	nop

08027f60 <ADS_CheckTimeout>:
 8027f60:	b570      	push	{r4, r5, r6, lr}
 8027f62:	4604      	mov	r4, r0
 8027f64:	b084      	sub	sp, #16
 8027f66:	f7de fabf 	bl	80064e8 <IRQ_LOCK>
 8027f6a:	6863      	ldr	r3, [r4, #4]
 8027f6c:	b31b      	cbz	r3, 8027fb6 <ADS_CheckTimeout+0x56>
 8027f6e:	a903      	add	r1, sp, #12
 8027f70:	a802      	add	r0, sp, #8
 8027f72:	e9d4 6502 	ldrd	r6, r5, [r4, #8]
 8027f76:	f7de fe9b 	bl	8006cb0 <Timer_GetCounterValue>
 8027f7a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8027f7e:	4295      	cmp	r5, r2
 8027f80:	bf82      	ittt	hi
 8027f82:	f502 2274 	addhi.w	r2, r2, #999424	@ 0xf4000
 8027f86:	f502 7210 	addhi.w	r2, r2, #576	@ 0x240
 8027f8a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8027f8e:	1b9b      	subs	r3, r3, r6
 8027f90:	1b55      	subs	r5, r2, r5
 8027f92:	f241 02c5 	movw	r2, #4293	@ 0x10c5
 8027f96:	4293      	cmp	r3, r2
 8027f98:	d812      	bhi.n	8027fc0 <ADS_CheckTimeout+0x60>
 8027f9a:	4923      	ldr	r1, [pc, #140]	@ (8028028 <ADS_CheckTimeout+0xc8>)
 8027f9c:	6862      	ldr	r2, [r4, #4]
 8027f9e:	fb01 5503 	mla	r5, r1, r3, r5
 8027fa2:	42aa      	cmp	r2, r5
 8027fa4:	d807      	bhi.n	8027fb6 <ADS_CheckTimeout+0x56>
 8027fa6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8027fa8:	f7de fe1a 	bl	8006be0 <S2PI_ReadIrqPin>
 8027fac:	b118      	cbz	r0, 8027fb6 <ADS_CheckTimeout+0x56>
 8027fae:	6863      	ldr	r3, [r4, #4]
 8027fb0:	ebb5 0f43 	cmp.w	r5, r3, lsl #1
 8027fb4:	d211      	bcs.n	8027fda <ADS_CheckTimeout+0x7a>
 8027fb6:	f7de fa75 	bl	80064a4 <IRQ_UNLOCK>
 8027fba:	2000      	movs	r0, #0
 8027fbc:	b004      	add	sp, #16
 8027fbe:	bd70      	pop	{r4, r5, r6, pc}
 8027fc0:	f241 02c6 	movw	r2, #4294	@ 0x10c6
 8027fc4:	4293      	cmp	r3, r2
 8027fc6:	d027      	beq.n	8028018 <ADS_CheckTimeout+0xb8>
 8027fc8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8027fca:	6863      	ldr	r3, [r4, #4]
 8027fcc:	f7de fe08 	bl	8006be0 <S2PI_ReadIrqPin>
 8027fd0:	2800      	cmp	r0, #0
 8027fd2:	d0f0      	beq.n	8027fb6 <ADS_CheckTimeout+0x56>
 8027fd4:	6863      	ldr	r3, [r4, #4]
 8027fd6:	f04f 35ff 	mov.w	r5, #4294967295
 8027fda:	2300      	movs	r3, #0
 8027fdc:	6862      	ldr	r2, [r4, #4]
 8027fde:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 8027fe0:	6063      	str	r3, [r4, #4]
 8027fe2:	6423      	str	r3, [r4, #64]	@ 0x40
 8027fe4:	9201      	str	r2, [sp, #4]
 8027fe6:	f7de fa5d 	bl	80064a4 <IRQ_UNLOCK>
 8027fea:	9a01      	ldr	r2, [sp, #4]
 8027fec:	480f      	ldr	r0, [pc, #60]	@ (802802c <ADS_CheckTimeout+0xcc>)
 8027fee:	4629      	mov	r1, r5
 8027ff0:	f7ea ffd0 	bl	8012f94 <print>
 8027ff4:	6823      	ldr	r3, [r4, #0]
 8027ff6:	3302      	adds	r3, #2
 8027ff8:	d004      	beq.n	8028004 <ADS_CheckTimeout+0xa4>
 8027ffa:	f06f 0105 	mvn.w	r1, #5
 8027ffe:	4620      	mov	r0, r4
 8028000:	f7ff fb96 	bl	8027730 <ADS_Abort.part.0>
 8028004:	b166      	cbz	r6, 8028020 <ADS_CheckTimeout+0xc0>
 8028006:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8028008:	4629      	mov	r1, r5
 802800a:	f06f 0005 	mvn.w	r0, #5
 802800e:	47b0      	blx	r6
 8028010:	f06f 0005 	mvn.w	r0, #5
 8028014:	b004      	add	sp, #16
 8028016:	bd70      	pop	{r4, r5, r6, pc}
 8028018:	4a05      	ldr	r2, [pc, #20]	@ (8028030 <ADS_CheckTimeout+0xd0>)
 802801a:	4295      	cmp	r5, r2
 802801c:	d9bd      	bls.n	8027f9a <ADS_CheckTimeout+0x3a>
 802801e:	e7d3      	b.n	8027fc8 <ADS_CheckTimeout+0x68>
 8028020:	f06f 0005 	mvn.w	r0, #5
 8028024:	e7ca      	b.n	8027fbc <ADS_CheckTimeout+0x5c>
 8028026:	bf00      	nop
 8028028:	000f4240 	.word	0x000f4240
 802802c:	08031190 	.word	0x08031190
 8028030:	000ec27e 	.word	0x000ec27e

08028034 <ADS_AwaitIdle>:
 8028034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028038:	4d49      	ldr	r5, [pc, #292]	@ (8028160 <ADS_AwaitIdle+0x12c>)
 802803a:	4f4a      	ldr	r7, [pc, #296]	@ (8028164 <ADS_AwaitIdle+0x130>)
 802803c:	b084      	sub	sp, #16
 802803e:	4688      	mov	r8, r1
 8028040:	4681      	mov	r9, r0
 8028042:	a901      	add	r1, sp, #4
 8028044:	4668      	mov	r0, sp
 8028046:	fba5 2508 	umull	r2, r5, r5, r8
 802804a:	f7de fe31 	bl	8006cb0 <Timer_GetCounterValue>
 802804e:	09ad      	lsrs	r5, r5, #6
 8028050:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8028054:	fb03 8615 	mls	r6, r3, r5, r8
 8028058:	fb03 f606 	mul.w	r6, r3, r6
 802805c:	f8d9 3000 	ldr.w	r3, [r9]
 8028060:	2b00      	cmp	r3, #0
 8028062:	d04b      	beq.n	80280fc <ADS_AwaitIdle+0xc8>
 8028064:	f8d9 3000 	ldr.w	r3, [r9]
 8028068:	2b67      	cmp	r3, #103	@ 0x67
 802806a:	d054      	beq.n	8028116 <ADS_AwaitIdle+0xe2>
 802806c:	f8d9 3000 	ldr.w	r3, [r9]
 8028070:	2b64      	cmp	r3, #100	@ 0x64
 8028072:	d050      	beq.n	8028116 <ADS_AwaitIdle+0xe2>
 8028074:	f8d9 a000 	ldr.w	sl, [r9]
 8028078:	a903      	add	r1, sp, #12
 802807a:	a802      	add	r0, sp, #8
 802807c:	f7de fe18 	bl	8006cb0 <Timer_GetCounterValue>
 8028080:	e9dd 4200 	ldrd	r4, r2, [sp]
 8028084:	18b3      	adds	r3, r6, r2
 8028086:	42bb      	cmp	r3, r7
 8028088:	e9dd 0c02 	ldrd	r0, ip, [sp, #8]
 802808c:	eb05 0104 	add.w	r1, r5, r4
 8028090:	d904      	bls.n	802809c <ADS_AwaitIdle+0x68>
 8028092:	f5a3 2374 	sub.w	r3, r3, #999424	@ 0xf4000
 8028096:	3101      	adds	r1, #1
 8028098:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 802809c:	428c      	cmp	r4, r1
 802809e:	d033      	beq.n	8028108 <ADS_AwaitIdle+0xd4>
 80280a0:	bf34      	ite	cc
 80280a2:	f04f 0e01 	movcc.w	lr, #1
 80280a6:	f04f 0e00 	movcs.w	lr, #0
 80280aa:	f1be 0f00 	cmp.w	lr, #0
 80280ae:	d018      	beq.n	80280e2 <ADS_AwaitIdle+0xae>
 80280b0:	42a0      	cmp	r0, r4
 80280b2:	d042      	beq.n	802813a <ADS_AwaitIdle+0x106>
 80280b4:	bf8c      	ite	hi
 80280b6:	2201      	movhi	r2, #1
 80280b8:	2200      	movls	r2, #0
 80280ba:	bb7a      	cbnz	r2, 802811c <ADS_AwaitIdle+0xe8>
 80280bc:	482a      	ldr	r0, [pc, #168]	@ (8028168 <ADS_AwaitIdle+0x134>)
 80280be:	4641      	mov	r1, r8
 80280c0:	f7ea ff68 	bl	8012f94 <print>
 80280c4:	f8d9 3000 	ldr.w	r3, [r9]
 80280c8:	3302      	adds	r3, #2
 80280ca:	d042      	beq.n	8028152 <ADS_AwaitIdle+0x11e>
 80280cc:	f06f 0105 	mvn.w	r1, #5
 80280d0:	4648      	mov	r0, r9
 80280d2:	f7ff fb2d 	bl	8027730 <ADS_Abort.part.0>
 80280d6:	f06f 0a05 	mvn.w	sl, #5
 80280da:	4650      	mov	r0, sl
 80280dc:	b004      	add	sp, #16
 80280de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80280e2:	42a0      	cmp	r0, r4
 80280e4:	d022      	beq.n	802812c <ADS_AwaitIdle+0xf8>
 80280e6:	d802      	bhi.n	80280ee <ADS_AwaitIdle+0xba>
 80280e8:	4288      	cmp	r0, r1
 80280ea:	d023      	beq.n	8028134 <ADS_AwaitIdle+0x100>
 80280ec:	d8e6      	bhi.n	80280bc <ADS_AwaitIdle+0x88>
 80280ee:	f1ba 0f02 	cmp.w	sl, #2
 80280f2:	d1f2      	bne.n	80280da <ADS_AwaitIdle+0xa6>
 80280f4:	f8d9 3000 	ldr.w	r3, [r9]
 80280f8:	2b00      	cmp	r3, #0
 80280fa:	d1b3      	bne.n	8028064 <ADS_AwaitIdle+0x30>
 80280fc:	f8d9 002c 	ldr.w	r0, [r9, #44]	@ 0x2c
 8028100:	f7de fb02 	bl	8006708 <S2PI_GetStatus>
 8028104:	4682      	mov	sl, r0
 8028106:	e7b7      	b.n	8028078 <ADS_AwaitIdle+0x44>
 8028108:	429a      	cmp	r2, r3
 802810a:	bf8c      	ite	hi
 802810c:	f04f 0e00 	movhi.w	lr, #0
 8028110:	f04f 0e01 	movls.w	lr, #1
 8028114:	e7c9      	b.n	80280aa <ADS_AwaitIdle+0x76>
 8028116:	f04f 0a02 	mov.w	sl, #2
 802811a:	e7ad      	b.n	8028078 <ADS_AwaitIdle+0x44>
 802811c:	4288      	cmp	r0, r1
 802811e:	d011      	beq.n	8028144 <ADS_AwaitIdle+0x110>
 8028120:	bf8c      	ite	hi
 8028122:	2301      	movhi	r3, #1
 8028124:	2300      	movls	r3, #0
 8028126:	2b00      	cmp	r3, #0
 8028128:	d0e1      	beq.n	80280ee <ADS_AwaitIdle+0xba>
 802812a:	e7c7      	b.n	80280bc <ADS_AwaitIdle+0x88>
 802812c:	4562      	cmp	r2, ip
 802812e:	d9de      	bls.n	80280ee <ADS_AwaitIdle+0xba>
 8028130:	4288      	cmp	r0, r1
 8028132:	d1db      	bne.n	80280ec <ADS_AwaitIdle+0xb8>
 8028134:	459c      	cmp	ip, r3
 8028136:	d2c1      	bcs.n	80280bc <ADS_AwaitIdle+0x88>
 8028138:	e7d9      	b.n	80280ee <ADS_AwaitIdle+0xba>
 802813a:	4562      	cmp	r2, ip
 802813c:	bf8c      	ite	hi
 802813e:	2200      	movhi	r2, #0
 8028140:	2201      	movls	r2, #1
 8028142:	e7ba      	b.n	80280ba <ADS_AwaitIdle+0x86>
 8028144:	459c      	cmp	ip, r3
 8028146:	bf34      	ite	cc
 8028148:	2300      	movcc	r3, #0
 802814a:	2301      	movcs	r3, #1
 802814c:	2b00      	cmp	r3, #0
 802814e:	d0ce      	beq.n	80280ee <ADS_AwaitIdle+0xba>
 8028150:	e7b4      	b.n	80280bc <ADS_AwaitIdle+0x88>
 8028152:	f06f 0a05 	mvn.w	sl, #5
 8028156:	4650      	mov	r0, sl
 8028158:	b004      	add	sp, #16
 802815a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802815e:	bf00      	nop
 8028160:	10624dd3 	.word	0x10624dd3
 8028164:	000f423f 	.word	0x000f423f
 8028168:	08030fe8 	.word	0x08030fe8

0802816c <ADS_TransferWithStart>:
 802816c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028170:	b085      	sub	sp, #20
 8028172:	4604      	mov	r4, r0
 8028174:	461d      	mov	r5, r3
 8028176:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028178:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 802817c:	9303      	str	r3, [sp, #12]
 802817e:	e9dd b910 	ldrd	fp, r9, [sp, #64]	@ 0x40
 8028182:	468a      	mov	sl, r1
 8028184:	4616      	mov	r6, r2
 8028186:	f7de f9af 	bl	80064e8 <IRQ_LOCK>
 802818a:	6827      	ldr	r7, [r4, #0]
 802818c:	2f00      	cmp	r7, #0
 802818e:	d14b      	bne.n	8028228 <ADS_TransferWithStart+0xbc>
 8028190:	2302      	movs	r3, #2
 8028192:	6023      	str	r3, [r4, #0]
 8028194:	f7de f986 	bl	80064a4 <IRQ_UNLOCK>
 8028198:	9b03      	ldr	r3, [sp, #12]
 802819a:	63e3      	str	r3, [r4, #60]	@ 0x3c
 802819c:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80281a0:	f8c4 b040 	str.w	fp, [r4, #64]	@ 0x40
 80281a4:	f8c4 9044 	str.w	r9, [r4, #68]	@ 0x44
 80281a8:	b10b      	cbz	r3, 80281ae <ADS_TransferWithStart+0x42>
 80281aa:	e9c4 560d 	strd	r5, r6, [r4, #52]	@ 0x34
 80281ae:	f1b8 0f00 	cmp.w	r8, #0
 80281b2:	d001      	beq.n	80281b8 <ADS_TransferWithStart+0x4c>
 80281b4:	2364      	movs	r3, #100	@ 0x64
 80281b6:	6023      	str	r3, [r4, #0]
 80281b8:	f7de f996 	bl	80064e8 <IRQ_LOCK>
 80281bc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80281be:	f7de fc85 	bl	8006acc <S2PI_TryGetMutex>
 80281c2:	4681      	mov	r9, r0
 80281c4:	b1b8      	cbz	r0, 80281f6 <ADS_TransferWithStart+0x8a>
 80281c6:	4926      	ldr	r1, [pc, #152]	@ (8028260 <ADS_TransferWithStart+0xf4>)
 80281c8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80281ca:	6123      	str	r3, [r4, #16]
 80281cc:	680b      	ldr	r3, [r1, #0]
 80281ce:	6164      	str	r4, [r4, #20]
 80281d0:	2000      	movs	r0, #0
 80281d2:	e9c4 6a06 	strd	r6, sl, [r4, #24]
 80281d6:	e9c4 5808 	strd	r5, r8, [r4, #32]
 80281da:	62a0      	str	r0, [r4, #40]	@ 0x28
 80281dc:	b35b      	cbz	r3, 8028236 <ADS_TransferWithStart+0xca>
 80281de:	4619      	mov	r1, r3
 80281e0:	699b      	ldr	r3, [r3, #24]
 80281e2:	2b00      	cmp	r3, #0
 80281e4:	d1fb      	bne.n	80281de <ADS_TransferWithStart+0x72>
 80281e6:	3410      	adds	r4, #16
 80281e8:	618c      	str	r4, [r1, #24]
 80281ea:	f7de f95b 	bl	80064a4 <IRQ_UNLOCK>
 80281ee:	4638      	mov	r0, r7
 80281f0:	b005      	add	sp, #20
 80281f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80281f6:	f7de f955 	bl	80064a4 <IRQ_UNLOCK>
 80281fa:	491a      	ldr	r1, [pc, #104]	@ (8028264 <ADS_TransferWithStart+0xf8>)
 80281fc:	9100      	str	r1, [sp, #0]
 80281fe:	9401      	str	r4, [sp, #4]
 8028200:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8028202:	462b      	mov	r3, r5
 8028204:	4632      	mov	r2, r6
 8028206:	4651      	mov	r1, sl
 8028208:	f7de fb9e 	bl	8006948 <S2PI_TransferFrame>
 802820c:	4607      	mov	r7, r0
 802820e:	b9a8      	cbnz	r0, 802823c <ADS_TransferWithStart+0xd0>
 8028210:	f1b8 0f00 	cmp.w	r8, #0
 8028214:	d0eb      	beq.n	80281ee <ADS_TransferWithStart+0x82>
 8028216:	f104 010c 	add.w	r1, r4, #12
 802821a:	f104 0008 	add.w	r0, r4, #8
 802821e:	f7de fd47 	bl	8006cb0 <Timer_GetCounterValue>
 8028222:	f8c4 8004 	str.w	r8, [r4, #4]
 8028226:	e7e2      	b.n	80281ee <ADS_TransferWithStart+0x82>
 8028228:	f7de f93c 	bl	80064a4 <IRQ_UNLOCK>
 802822c:	6827      	ldr	r7, [r4, #0]
 802822e:	4638      	mov	r0, r7
 8028230:	b005      	add	sp, #20
 8028232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028236:	3410      	adds	r4, #16
 8028238:	600c      	str	r4, [r1, #0]
 802823a:	e7d6      	b.n	80281ea <ADS_TransferWithStart+0x7e>
 802823c:	f89a 1000 	ldrb.w	r1, [sl]
 8028240:	4602      	mov	r2, r0
 8028242:	4809      	ldr	r0, [pc, #36]	@ (8028268 <ADS_TransferWithStart+0xfc>)
 8028244:	f7ea fea6 	bl	8012f94 <print>
 8028248:	2302      	movs	r3, #2
 802824a:	4621      	mov	r1, r4
 802824c:	4638      	mov	r0, r7
 802824e:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
 8028252:	6023      	str	r3, [r4, #0]
 8028254:	b005      	add	sp, #20
 8028256:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802825a:	f7ff ba27 	b.w	80276ac <ADS_SPI_Callback>
 802825e:	bf00      	nop
 8028260:	240036c4 	.word	0x240036c4
 8028264:	080276ad 	.word	0x080276ad
 8028268:	08030f34 	.word	0x08030f34

0802826c <ADS_Transfer>:
 802826c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028270:	4604      	mov	r4, r0
 8028272:	b082      	sub	sp, #8
 8028274:	4689      	mov	r9, r1
 8028276:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8028278:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 802827c:	4690      	mov	r8, r2
 802827e:	461f      	mov	r7, r3
 8028280:	f7de f932 	bl	80064e8 <IRQ_LOCK>
 8028284:	6825      	ldr	r5, [r4, #0]
 8028286:	2d00      	cmp	r5, #0
 8028288:	d14a      	bne.n	8028320 <ADS_Transfer+0xb4>
 802828a:	2302      	movs	r3, #2
 802828c:	6023      	str	r3, [r4, #0]
 802828e:	f7de f909 	bl	80064a4 <IRQ_UNLOCK>
 8028292:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8028296:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8028298:	e9c4 5a10 	strd	r5, sl, [r4, #64]	@ 0x40
 802829c:	b10b      	cbz	r3, 80282a2 <ADS_Transfer+0x36>
 802829e:	e9c4 780d 	strd	r7, r8, [r4, #52]	@ 0x34
 80282a2:	f7de f921 	bl	80064e8 <IRQ_LOCK>
 80282a6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80282a8:	f7de fc10 	bl	8006acc <S2PI_TryGetMutex>
 80282ac:	4606      	mov	r6, r0
 80282ae:	b1c8      	cbz	r0, 80282e4 <ADS_Transfer+0x78>
 80282b0:	4920      	ldr	r1, [pc, #128]	@ (8028334 <ADS_Transfer+0xc8>)
 80282b2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80282b4:	6123      	str	r3, [r4, #16]
 80282b6:	680b      	ldr	r3, [r1, #0]
 80282b8:	f8c4 8018 	str.w	r8, [r4, #24]
 80282bc:	2200      	movs	r2, #0
 80282be:	e9c4 9707 	strd	r9, r7, [r4, #28]
 80282c2:	6262      	str	r2, [r4, #36]	@ 0x24
 80282c4:	6164      	str	r4, [r4, #20]
 80282c6:	62a2      	str	r2, [r4, #40]	@ 0x28
 80282c8:	2b00      	cmp	r3, #0
 80282ca:	d030      	beq.n	802832e <ADS_Transfer+0xc2>
 80282cc:	461a      	mov	r2, r3
 80282ce:	699b      	ldr	r3, [r3, #24]
 80282d0:	2b00      	cmp	r3, #0
 80282d2:	d1fb      	bne.n	80282cc <ADS_Transfer+0x60>
 80282d4:	3410      	adds	r4, #16
 80282d6:	6194      	str	r4, [r2, #24]
 80282d8:	f7de f8e4 	bl	80064a4 <IRQ_UNLOCK>
 80282dc:	4628      	mov	r0, r5
 80282de:	b002      	add	sp, #8
 80282e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80282e4:	f7de f8de 	bl	80064a4 <IRQ_UNLOCK>
 80282e8:	4913      	ldr	r1, [pc, #76]	@ (8028338 <ADS_Transfer+0xcc>)
 80282ea:	9100      	str	r1, [sp, #0]
 80282ec:	9401      	str	r4, [sp, #4]
 80282ee:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80282f0:	463b      	mov	r3, r7
 80282f2:	4642      	mov	r2, r8
 80282f4:	4649      	mov	r1, r9
 80282f6:	f7de fb27 	bl	8006948 <S2PI_TransferFrame>
 80282fa:	4605      	mov	r5, r0
 80282fc:	2800      	cmp	r0, #0
 80282fe:	d0ed      	beq.n	80282dc <ADS_Transfer+0x70>
 8028300:	f899 1000 	ldrb.w	r1, [r9]
 8028304:	4602      	mov	r2, r0
 8028306:	480d      	ldr	r0, [pc, #52]	@ (802833c <ADS_Transfer+0xd0>)
 8028308:	f7ea fe44 	bl	8012f94 <print>
 802830c:	2302      	movs	r3, #2
 802830e:	4621      	mov	r1, r4
 8028310:	4628      	mov	r0, r5
 8028312:	6426      	str	r6, [r4, #64]	@ 0x40
 8028314:	6023      	str	r3, [r4, #0]
 8028316:	b002      	add	sp, #8
 8028318:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802831c:	f7ff b9c6 	b.w	80276ac <ADS_SPI_Callback>
 8028320:	f7de f8c0 	bl	80064a4 <IRQ_UNLOCK>
 8028324:	6825      	ldr	r5, [r4, #0]
 8028326:	4628      	mov	r0, r5
 8028328:	b002      	add	sp, #8
 802832a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802832e:	3410      	adds	r4, #16
 8028330:	600c      	str	r4, [r1, #0]
 8028332:	e7d1      	b.n	80282d8 <ADS_Transfer+0x6c>
 8028334:	240036c4 	.word	0x240036c4
 8028338:	080276ad 	.word	0x080276ad
 802833c:	08030f34 	.word	0x08030f34

08028340 <ADS_Start>:
 8028340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028344:	4604      	mov	r4, r0
 8028346:	b082      	sub	sp, #8
 8028348:	460e      	mov	r6, r1
 802834a:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 802834e:	4617      	mov	r7, r2
 8028350:	4698      	mov	r8, r3
 8028352:	f7de f8c9 	bl	80064e8 <IRQ_LOCK>
 8028356:	6825      	ldr	r5, [r4, #0]
 8028358:	2d00      	cmp	r5, #0
 802835a:	d14b      	bne.n	80283f4 <ADS_Start+0xb4>
 802835c:	f04f 0a02 	mov.w	sl, #2
 8028360:	f8c4 a000 	str.w	sl, [r4]
 8028364:	f7de f89e 	bl	80064a4 <IRQ_UNLOCK>
 8028368:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 802836c:	f8c4 9044 	str.w	r9, [r4, #68]	@ 0x44
 8028370:	e9c4 780f 	strd	r7, r8, [r4, #60]	@ 0x3c
 8028374:	b10b      	cbz	r3, 802837a <ADS_Start+0x3a>
 8028376:	e9c4 a50d 	strd	sl, r5, [r4, #52]	@ 0x34
 802837a:	b10e      	cbz	r6, 8028380 <ADS_Start+0x40>
 802837c:	2364      	movs	r3, #100	@ 0x64
 802837e:	6023      	str	r3, [r4, #0]
 8028380:	f7de f8b2 	bl	80064e8 <IRQ_LOCK>
 8028384:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8028386:	f7de fba1 	bl	8006acc <S2PI_TryGetMutex>
 802838a:	4607      	mov	r7, r0
 802838c:	b1c8      	cbz	r0, 80283c2 <ADS_Start+0x82>
 802838e:	4a26      	ldr	r2, [pc, #152]	@ (8028428 <ADS_Start+0xe8>)
 8028390:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8028392:	6121      	str	r1, [r4, #16]
 8028394:	2300      	movs	r3, #0
 8028396:	e9c4 3206 	strd	r3, r2, [r4, #24]
 802839a:	2202      	movs	r2, #2
 802839c:	6222      	str	r2, [r4, #32]
 802839e:	4a23      	ldr	r2, [pc, #140]	@ (802842c <ADS_Start+0xec>)
 80283a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80283a2:	6813      	ldr	r3, [r2, #0]
 80283a4:	6266      	str	r6, [r4, #36]	@ 0x24
 80283a6:	6164      	str	r4, [r4, #20]
 80283a8:	b35b      	cbz	r3, 8028402 <ADS_Start+0xc2>
 80283aa:	461a      	mov	r2, r3
 80283ac:	699b      	ldr	r3, [r3, #24]
 80283ae:	2b00      	cmp	r3, #0
 80283b0:	d1fb      	bne.n	80283aa <ADS_Start+0x6a>
 80283b2:	3410      	adds	r4, #16
 80283b4:	6194      	str	r4, [r2, #24]
 80283b6:	f7de f875 	bl	80064a4 <IRQ_UNLOCK>
 80283ba:	4628      	mov	r0, r5
 80283bc:	b002      	add	sp, #8
 80283be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80283c2:	f7de f86f 	bl	80064a4 <IRQ_UNLOCK>
 80283c6:	4b1a      	ldr	r3, [pc, #104]	@ (8028430 <ADS_Start+0xf0>)
 80283c8:	f8df 805c 	ldr.w	r8, [pc, #92]	@ 8028428 <ADS_Start+0xe8>
 80283cc:	e9cd 3400 	strd	r3, r4, [sp]
 80283d0:	463a      	mov	r2, r7
 80283d2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80283d4:	2302      	movs	r3, #2
 80283d6:	4641      	mov	r1, r8
 80283d8:	f7de fab6 	bl	8006948 <S2PI_TransferFrame>
 80283dc:	4605      	mov	r5, r0
 80283de:	b998      	cbnz	r0, 8028408 <ADS_Start+0xc8>
 80283e0:	2e00      	cmp	r6, #0
 80283e2:	d0ea      	beq.n	80283ba <ADS_Start+0x7a>
 80283e4:	f104 010c 	add.w	r1, r4, #12
 80283e8:	f104 0008 	add.w	r0, r4, #8
 80283ec:	f7de fc60 	bl	8006cb0 <Timer_GetCounterValue>
 80283f0:	6066      	str	r6, [r4, #4]
 80283f2:	e7e2      	b.n	80283ba <ADS_Start+0x7a>
 80283f4:	f7de f856 	bl	80064a4 <IRQ_UNLOCK>
 80283f8:	6825      	ldr	r5, [r4, #0]
 80283fa:	4628      	mov	r0, r5
 80283fc:	b002      	add	sp, #8
 80283fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028402:	3410      	adds	r4, #16
 8028404:	6014      	str	r4, [r2, #0]
 8028406:	e7d6      	b.n	80283b6 <ADS_Start+0x76>
 8028408:	f898 1000 	ldrb.w	r1, [r8]
 802840c:	4602      	mov	r2, r0
 802840e:	4809      	ldr	r0, [pc, #36]	@ (8028434 <ADS_Start+0xf4>)
 8028410:	f7ea fdc0 	bl	8012f94 <print>
 8028414:	2302      	movs	r3, #2
 8028416:	4621      	mov	r1, r4
 8028418:	4628      	mov	r0, r5
 802841a:	6427      	str	r7, [r4, #64]	@ 0x40
 802841c:	6023      	str	r3, [r4, #0]
 802841e:	b002      	add	sp, #8
 8028420:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028424:	f7ff b942 	b.w	80276ac <ADS_SPI_Callback>
 8028428:	24000068 	.word	0x24000068
 802842c:	240036c4 	.word	0x240036c4
 8028430:	080276ad 	.word	0x080276ad
 8028434:	08030f34 	.word	0x08030f34

08028438 <ADS_ReadData>:
 8028438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802843c:	4698      	mov	r8, r3
 802843e:	b083      	sub	sp, #12
 8028440:	1e53      	subs	r3, r2, #1
 8028442:	2b83      	cmp	r3, #131	@ 0x83
 8028444:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8028448:	d860      	bhi.n	802850c <ADS_ReadData+0xd4>
 802844a:	4604      	mov	r4, r0
 802844c:	2324      	movs	r3, #36	@ 0x24
 802844e:	700b      	strb	r3, [r1, #0]
 8028450:	4615      	mov	r5, r2
 8028452:	460e      	mov	r6, r1
 8028454:	f7de f848 	bl	80064e8 <IRQ_LOCK>
 8028458:	6827      	ldr	r7, [r4, #0]
 802845a:	2f00      	cmp	r7, #0
 802845c:	d14c      	bne.n	80284f8 <ADS_ReadData+0xc0>
 802845e:	2302      	movs	r3, #2
 8028460:	6023      	str	r3, [r4, #0]
 8028462:	f7de f81f 	bl	80064a4 <IRQ_UNLOCK>
 8028466:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 802846a:	f8c4 9044 	str.w	r9, [r4, #68]	@ 0x44
 802846e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8028472:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 8028476:	3501      	adds	r5, #1
 8028478:	b10b      	cbz	r3, 802847e <ADS_ReadData+0x46>
 802847a:	e9c4 560d 	strd	r5, r6, [r4, #52]	@ 0x34
 802847e:	f7de f833 	bl	80064e8 <IRQ_LOCK>
 8028482:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8028484:	f7de fb22 	bl	8006acc <S2PI_TryGetMutex>
 8028488:	4680      	mov	r8, r0
 802848a:	b1b8      	cbz	r0, 80284bc <ADS_ReadData+0x84>
 802848c:	4921      	ldr	r1, [pc, #132]	@ (8028514 <ADS_ReadData+0xdc>)
 802848e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8028490:	6123      	str	r3, [r4, #16]
 8028492:	680b      	ldr	r3, [r1, #0]
 8028494:	6225      	str	r5, [r4, #32]
 8028496:	2200      	movs	r2, #0
 8028498:	e9c4 6606 	strd	r6, r6, [r4, #24]
 802849c:	6262      	str	r2, [r4, #36]	@ 0x24
 802849e:	6164      	str	r4, [r4, #20]
 80284a0:	62a2      	str	r2, [r4, #40]	@ 0x28
 80284a2:	b383      	cbz	r3, 8028506 <ADS_ReadData+0xce>
 80284a4:	461a      	mov	r2, r3
 80284a6:	699b      	ldr	r3, [r3, #24]
 80284a8:	2b00      	cmp	r3, #0
 80284aa:	d1fb      	bne.n	80284a4 <ADS_ReadData+0x6c>
 80284ac:	3410      	adds	r4, #16
 80284ae:	6194      	str	r4, [r2, #24]
 80284b0:	f7dd fff8 	bl	80064a4 <IRQ_UNLOCK>
 80284b4:	4638      	mov	r0, r7
 80284b6:	b003      	add	sp, #12
 80284b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80284bc:	f7dd fff2 	bl	80064a4 <IRQ_UNLOCK>
 80284c0:	4b15      	ldr	r3, [pc, #84]	@ (8028518 <ADS_ReadData+0xe0>)
 80284c2:	e9cd 3400 	strd	r3, r4, [sp]
 80284c6:	4632      	mov	r2, r6
 80284c8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80284ca:	462b      	mov	r3, r5
 80284cc:	4631      	mov	r1, r6
 80284ce:	f7de fa3b 	bl	8006948 <S2PI_TransferFrame>
 80284d2:	4607      	mov	r7, r0
 80284d4:	2800      	cmp	r0, #0
 80284d6:	d0ed      	beq.n	80284b4 <ADS_ReadData+0x7c>
 80284d8:	7831      	ldrb	r1, [r6, #0]
 80284da:	4602      	mov	r2, r0
 80284dc:	480f      	ldr	r0, [pc, #60]	@ (802851c <ADS_ReadData+0xe4>)
 80284de:	f7ea fd59 	bl	8012f94 <print>
 80284e2:	2302      	movs	r3, #2
 80284e4:	4621      	mov	r1, r4
 80284e6:	4638      	mov	r0, r7
 80284e8:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
 80284ec:	6023      	str	r3, [r4, #0]
 80284ee:	b003      	add	sp, #12
 80284f0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80284f4:	f7ff b8da 	b.w	80276ac <ADS_SPI_Callback>
 80284f8:	f7dd ffd4 	bl	80064a4 <IRQ_UNLOCK>
 80284fc:	6827      	ldr	r7, [r4, #0]
 80284fe:	4638      	mov	r0, r7
 8028500:	b003      	add	sp, #12
 8028502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028506:	3410      	adds	r4, #16
 8028508:	600c      	str	r4, [r1, #0]
 802850a:	e7d1      	b.n	80284b0 <ADS_ReadData+0x78>
 802850c:	f06f 0704 	mvn.w	r7, #4
 8028510:	e7d0      	b.n	80284b4 <ADS_ReadData+0x7c>
 8028512:	bf00      	nop
 8028514:	240036c4 	.word	0x240036c4
 8028518:	080276ad 	.word	0x080276ad
 802851c:	08030f34 	.word	0x08030f34

08028520 <ADS_ReadEEPROM>:
 8028520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8028524:	4604      	mov	r4, r0
 8028526:	b087      	sub	sp, #28
 8028528:	4668      	mov	r0, sp
 802852a:	4688      	mov	r8, r1
 802852c:	a901      	add	r1, sp, #4
 802852e:	f7de fbbf 	bl	8006cb0 <Timer_GetCounterValue>
 8028532:	f7dd ffd9 	bl	80064e8 <IRQ_LOCK>
 8028536:	6823      	ldr	r3, [r4, #0]
 8028538:	f8df 9150 	ldr.w	r9, [pc, #336]	@ 802868c <ADS_ReadEEPROM+0x16c>
 802853c:	4f52      	ldr	r7, [pc, #328]	@ (8028688 <ADS_ReadEEPROM+0x168>)
 802853e:	f241 06c5 	movw	r6, #4293	@ 0x10c5
 8028542:	b35b      	cbz	r3, 802859c <ADS_ReadEEPROM+0x7c>
 8028544:	6825      	ldr	r5, [r4, #0]
 8028546:	f7dd ffad 	bl	80064a4 <IRQ_UNLOCK>
 802854a:	a903      	add	r1, sp, #12
 802854c:	a802      	add	r0, sp, #8
 802854e:	f7de fbaf 	bl	8006cb0 <Timer_GetCounterValue>
 8028552:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8028556:	9903      	ldr	r1, [sp, #12]
 8028558:	9b00      	ldr	r3, [sp, #0]
 802855a:	428a      	cmp	r2, r1
 802855c:	bf82      	ittt	hi
 802855e:	f501 2174 	addhi.w	r1, r1, #999424	@ 0xf4000
 8028562:	f100 30ff 	addhi.w	r0, r0, #4294967295
 8028566:	f501 7110 	addhi.w	r1, r1, #576	@ 0x240
 802856a:	1ac3      	subs	r3, r0, r3
 802856c:	1a8a      	subs	r2, r1, r2
 802856e:	42b3      	cmp	r3, r6
 8028570:	f242 710f 	movw	r1, #9999	@ 0x270f
 8028574:	f241 0cc6 	movw	ip, #4294	@ 0x10c6
 8028578:	fb07 2003 	mla	r0, r7, r3, r2
 802857c:	d907      	bls.n	802858e <ADS_ReadEEPROM+0x6e>
 802857e:	4563      	cmp	r3, ip
 8028580:	d003      	beq.n	802858a <ADS_ReadEEPROM+0x6a>
 8028582:	4628      	mov	r0, r5
 8028584:	b007      	add	sp, #28
 8028586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802858a:	454a      	cmp	r2, r9
 802858c:	d8f9      	bhi.n	8028582 <ADS_ReadEEPROM+0x62>
 802858e:	4288      	cmp	r0, r1
 8028590:	d8f7      	bhi.n	8028582 <ADS_ReadEEPROM+0x62>
 8028592:	f7dd ffa9 	bl	80064e8 <IRQ_LOCK>
 8028596:	6823      	ldr	r3, [r4, #0]
 8028598:	2b00      	cmp	r3, #0
 802859a:	d1d3      	bne.n	8028544 <ADS_ReadEEPROM+0x24>
 802859c:	2302      	movs	r3, #2
 802859e:	6023      	str	r3, [r4, #0]
 80285a0:	f7dd ff80 	bl	80064a4 <IRQ_UNLOCK>
 80285a4:	a901      	add	r1, sp, #4
 80285a6:	4668      	mov	r0, sp
 80285a8:	f7de fb82 	bl	8006cb0 <Timer_GetCounterValue>
 80285ac:	4f37      	ldr	r7, [pc, #220]	@ (802868c <ADS_ReadEEPROM+0x16c>)
 80285ae:	4d36      	ldr	r5, [pc, #216]	@ (8028688 <ADS_ReadEEPROM+0x168>)
 80285b0:	f241 06c5 	movw	r6, #4293	@ 0x10c5
 80285b4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80285b6:	f7de fa89 	bl	8006acc <S2PI_TryGetMutex>
 80285ba:	4603      	mov	r3, r0
 80285bc:	a903      	add	r1, sp, #12
 80285be:	a802      	add	r0, sp, #8
 80285c0:	b313      	cbz	r3, 8028608 <ADS_ReadEEPROM+0xe8>
 80285c2:	f7de fb75 	bl	8006cb0 <Timer_GetCounterValue>
 80285c6:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 80285ca:	9903      	ldr	r1, [sp, #12]
 80285cc:	9b00      	ldr	r3, [sp, #0]
 80285ce:	4291      	cmp	r1, r2
 80285d0:	bf3e      	ittt	cc
 80285d2:	f501 2174 	addcc.w	r1, r1, #999424	@ 0xf4000
 80285d6:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80285da:	f501 7110 	addcc.w	r1, r1, #576	@ 0x240
 80285de:	1ac3      	subs	r3, r0, r3
 80285e0:	1a8a      	subs	r2, r1, r2
 80285e2:	42b3      	cmp	r3, r6
 80285e4:	f242 710f 	movw	r1, #9999	@ 0x270f
 80285e8:	f241 0cc6 	movw	ip, #4294	@ 0x10c6
 80285ec:	fb05 2003 	mla	r0, r5, r3, r2
 80285f0:	d903      	bls.n	80285fa <ADS_ReadEEPROM+0xda>
 80285f2:	4563      	cmp	r3, ip
 80285f4:	d103      	bne.n	80285fe <ADS_ReadEEPROM+0xde>
 80285f6:	42ba      	cmp	r2, r7
 80285f8:	d801      	bhi.n	80285fe <ADS_ReadEEPROM+0xde>
 80285fa:	4288      	cmp	r0, r1
 80285fc:	d9da      	bls.n	80285b4 <ADS_ReadEEPROM+0x94>
 80285fe:	2502      	movs	r5, #2
 8028600:	4628      	mov	r0, r5
 8028602:	b007      	add	sp, #28
 8028604:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028608:	e9cd 3302 	strd	r3, r3, [sp, #8]
 802860c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8028610:	af02      	add	r7, sp, #8
 8028612:	461e      	mov	r6, r3
 8028614:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8028616:	463a      	mov	r2, r7
 8028618:	b2f1      	uxtb	r1, r6
 802861a:	f7ea fc09 	bl	8012e30 <EEPROM_Read>
 802861e:	4605      	mov	r5, r0
 8028620:	bb18      	cbnz	r0, 802866a <ADS_ReadEEPROM+0x14a>
 8028622:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8028626:	3601      	adds	r6, #1
 8028628:	b113      	cbz	r3, 8028630 <ADS_ReadEEPROM+0x110>
 802862a:	783b      	ldrb	r3, [r7, #0]
 802862c:	43db      	mvns	r3, r3
 802862e:	703b      	strb	r3, [r7, #0]
 8028630:	2e10      	cmp	r6, #16
 8028632:	f107 0701 	add.w	r7, r7, #1
 8028636:	d1ed      	bne.n	8028614 <ADS_ReadEEPROM+0xf4>
 8028638:	4641      	mov	r1, r8
 802863a:	a802      	add	r0, sp, #8
 802863c:	f7ea f838 	bl	80126b0 <hamming_decode>
 8028640:	2800      	cmp	r0, #0
 8028642:	bf18      	it	ne
 8028644:	256d      	movne	r5, #109	@ 0x6d
 8028646:	f89d 3017 	ldrb.w	r3, [sp, #23]
 802864a:	2200      	movs	r2, #0
 802864c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8028650:	f888 300f 	strb.w	r3, [r8, #15]
 8028654:	6022      	str	r2, [r4, #0]
 8028656:	f7dd ff47 	bl	80064e8 <IRQ_LOCK>
 802865a:	4b0d      	ldr	r3, [pc, #52]	@ (8028690 <ADS_ReadEEPROM+0x170>)
 802865c:	681b      	ldr	r3, [r3, #0]
 802865e:	b173      	cbz	r3, 802867e <ADS_ReadEEPROM+0x15e>
 8028660:	f7fe ffea 	bl	8027638 <ADS_TriggerNextTransfer.part.0>
 8028664:	f7dd ff1e 	bl	80064a4 <IRQ_UNLOCK>
 8028668:	e78b      	b.n	8028582 <ADS_ReadEEPROM+0x62>
 802866a:	4631      	mov	r1, r6
 802866c:	4602      	mov	r2, r0
 802866e:	4809      	ldr	r0, [pc, #36]	@ (8028694 <ADS_ReadEEPROM+0x174>)
 8028670:	f7ea fc90 	bl	8012f94 <print>
 8028674:	4641      	mov	r1, r8
 8028676:	a802      	add	r0, sp, #8
 8028678:	f7ea f81a 	bl	80126b0 <hamming_decode>
 802867c:	e7e3      	b.n	8028646 <ADS_ReadEEPROM+0x126>
 802867e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8028680:	f7de fa46 	bl	8006b10 <S2PI_ReleaseMutex>
 8028684:	e7ee      	b.n	8028664 <ADS_ReadEEPROM+0x144>
 8028686:	bf00      	nop
 8028688:	000f4240 	.word	0x000f4240
 802868c:	000ec27e 	.word	0x000ec27e
 8028690:	240036c4 	.word	0x240036c4
 8028694:	080311d4 	.word	0x080311d4

08028698 <fp_exp24>:
 8028698:	4b60      	ldr	r3, [pc, #384]	@ (802881c <fp_exp24+0x184>)
 802869a:	4403      	add	r3, r0
 802869c:	2b00      	cmp	r3, #0
 802869e:	4602      	mov	r2, r0
 80286a0:	f2c0 80b6 	blt.w	8028810 <fp_exp24+0x178>
 80286a4:	2000      	movs	r0, #0
 80286a6:	461a      	mov	r2, r3
 80286a8:	4601      	mov	r1, r0
 80286aa:	4b5d      	ldr	r3, [pc, #372]	@ (8028820 <fp_exp24+0x188>)
 80286ac:	4413      	add	r3, r2
 80286ae:	2b00      	cmp	r3, #0
 80286b0:	bfb8      	it	lt
 80286b2:	4613      	movlt	r3, r2
 80286b4:	4a5b      	ldr	r2, [pc, #364]	@ (8028824 <fp_exp24+0x18c>)
 80286b6:	441a      	add	r2, r3
 80286b8:	bfb8      	it	lt
 80286ba:	4608      	movlt	r0, r1
 80286bc:	2a00      	cmp	r2, #0
 80286be:	bfa8      	it	ge
 80286c0:	4613      	movge	r3, r2
 80286c2:	4a59      	ldr	r2, [pc, #356]	@ (8028828 <fp_exp24+0x190>)
 80286c4:	441a      	add	r2, r3
 80286c6:	bfa8      	it	ge
 80286c8:	0080      	lslge	r0, r0, #2
 80286ca:	2a00      	cmp	r2, #0
 80286cc:	bfa8      	it	ge
 80286ce:	4613      	movge	r3, r2
 80286d0:	4a56      	ldr	r2, [pc, #344]	@ (802882c <fp_exp24+0x194>)
 80286d2:	441a      	add	r2, r3
 80286d4:	bfa8      	it	ge
 80286d6:	0040      	lslge	r0, r0, #1
 80286d8:	2a00      	cmp	r2, #0
 80286da:	bfa8      	it	ge
 80286dc:	4613      	movge	r3, r2
 80286de:	4a54      	ldr	r2, [pc, #336]	@ (8028830 <fp_exp24+0x198>)
 80286e0:	441a      	add	r2, r3
 80286e2:	bfa8      	it	ge
 80286e4:	eb00 0050 	addge.w	r0, r0, r0, lsr #1
 80286e8:	2a00      	cmp	r2, #0
 80286ea:	bfa8      	it	ge
 80286ec:	4613      	movge	r3, r2
 80286ee:	f5a3 12f1 	sub.w	r2, r3, #1974272	@ 0x1e2000
 80286f2:	f2a2 7207 	subw	r2, r2, #1799	@ 0x707
 80286f6:	bfa8      	it	ge
 80286f8:	eb00 0090 	addge.w	r0, r0, r0, lsr #2
 80286fc:	2a00      	cmp	r2, #0
 80286fe:	bfa8      	it	ge
 8028700:	4613      	movge	r3, r2
 8028702:	f5a3 2278 	sub.w	r2, r3, #1015808	@ 0xf8000
 8028706:	f5a2 62a3 	sub.w	r2, r2, #1304	@ 0x518
 802870a:	bfa8      	it	ge
 802870c:	eb00 00d0 	addge.w	r0, r0, r0, lsr #3
 8028710:	2a00      	cmp	r2, #0
 8028712:	bfa8      	it	ge
 8028714:	4613      	movge	r3, r2
 8028716:	f5a3 22fc 	sub.w	r2, r3, #516096	@ 0x7e000
 802871a:	f1a2 02a7 	sub.w	r2, r2, #167	@ 0xa7
 802871e:	bfa8      	it	ge
 8028720:	eb00 1010 	addge.w	r0, r0, r0, lsr #4
 8028724:	2a00      	cmp	r2, #0
 8028726:	bfa8      	it	ge
 8028728:	4613      	movge	r3, r2
 802872a:	f5a3 327e 	sub.w	r2, r3, #260096	@ 0x3f800
 802872e:	f1a2 0215 	sub.w	r2, r2, #21
 8028732:	bfa8      	it	ge
 8028734:	eb00 1050 	addge.w	r0, r0, r0, lsr #5
 8028738:	2a00      	cmp	r2, #0
 802873a:	bfa8      	it	ge
 802873c:	4613      	movge	r3, r2
 802873e:	f5a3 32ff 	sub.w	r2, r3, #130560	@ 0x1fe00
 8028742:	f1a2 0203 	sub.w	r2, r2, #3
 8028746:	bfa8      	it	ge
 8028748:	eb00 1090 	addge.w	r0, r0, r0, lsr #6
 802874c:	2a00      	cmp	r2, #0
 802874e:	bfa8      	it	ge
 8028750:	4613      	movge	r3, r2
 8028752:	f5a3 427f 	sub.w	r2, r3, #65280	@ 0xff00
 8028756:	f1a2 0280 	sub.w	r2, r2, #128	@ 0x80
 802875a:	bfa8      	it	ge
 802875c:	eb00 10d0 	addge.w	r0, r0, r0, lsr #7
 8028760:	2a00      	cmp	r2, #0
 8028762:	bfa8      	it	ge
 8028764:	4613      	movge	r3, r2
 8028766:	f5a3 42ff 	sub.w	r2, r3, #32640	@ 0x7f80
 802876a:	f1a2 0260 	sub.w	r2, r2, #96	@ 0x60
 802876e:	bfa8      	it	ge
 8028770:	eb00 2010 	addge.w	r0, r0, r0, lsr #8
 8028774:	2a00      	cmp	r2, #0
 8028776:	bfa8      	it	ge
 8028778:	4613      	movge	r3, r2
 802877a:	f5a3 527f 	sub.w	r2, r3, #16320	@ 0x3fc0
 802877e:	f1a2 0238 	sub.w	r2, r2, #56	@ 0x38
 8028782:	bfa8      	it	ge
 8028784:	eb00 2050 	addge.w	r0, r0, r0, lsr #9
 8028788:	2a00      	cmp	r2, #0
 802878a:	bfa8      	it	ge
 802878c:	4613      	movge	r3, r2
 802878e:	f5a3 52ff 	sub.w	r2, r3, #8160	@ 0x1fe0
 8028792:	f1a2 021e 	sub.w	r2, r2, #30
 8028796:	bfa8      	it	ge
 8028798:	eb00 2090 	addge.w	r0, r0, r0, lsr #10
 802879c:	2a00      	cmp	r2, #0
 802879e:	bfa4      	itt	ge
 80287a0:	4613      	movge	r3, r2
 80287a2:	eb00 20d0 	addge.w	r0, r0, r0, lsr #11
 80287a6:	04d9      	lsls	r1, r3, #19
 80287a8:	bf48      	it	mi
 80287aa:	eb00 3010 	addmi.w	r0, r0, r0, lsr #12
 80287ae:	051a      	lsls	r2, r3, #20
 80287b0:	bf48      	it	mi
 80287b2:	eb00 3050 	addmi.w	r0, r0, r0, lsr #13
 80287b6:	0559      	lsls	r1, r3, #21
 80287b8:	bf48      	it	mi
 80287ba:	eb00 3090 	addmi.w	r0, r0, r0, lsr #14
 80287be:	059a      	lsls	r2, r3, #22
 80287c0:	bf48      	it	mi
 80287c2:	eb00 30d0 	addmi.w	r0, r0, r0, lsr #15
 80287c6:	05d9      	lsls	r1, r3, #23
 80287c8:	bf48      	it	mi
 80287ca:	eb00 4010 	addmi.w	r0, r0, r0, lsr #16
 80287ce:	061a      	lsls	r2, r3, #24
 80287d0:	bf48      	it	mi
 80287d2:	eb00 4050 	addmi.w	r0, r0, r0, lsr #17
 80287d6:	0659      	lsls	r1, r3, #25
 80287d8:	bf48      	it	mi
 80287da:	eb00 4090 	addmi.w	r0, r0, r0, lsr #18
 80287de:	069a      	lsls	r2, r3, #26
 80287e0:	bf48      	it	mi
 80287e2:	eb00 40d0 	addmi.w	r0, r0, r0, lsr #19
 80287e6:	06d9      	lsls	r1, r3, #27
 80287e8:	bf48      	it	mi
 80287ea:	eb00 5010 	addmi.w	r0, r0, r0, lsr #20
 80287ee:	071a      	lsls	r2, r3, #28
 80287f0:	bf48      	it	mi
 80287f2:	eb00 5050 	addmi.w	r0, r0, r0, lsr #21
 80287f6:	0759      	lsls	r1, r3, #29
 80287f8:	bf48      	it	mi
 80287fa:	eb00 5090 	addmi.w	r0, r0, r0, lsr #22
 80287fe:	079a      	lsls	r2, r3, #30
 8028800:	bf48      	it	mi
 8028802:	eb00 50d0 	addmi.w	r0, r0, r0, lsr #23
 8028806:	07db      	lsls	r3, r3, #31
 8028808:	bf48      	it	mi
 802880a:	eb00 6010 	addmi.w	r0, r0, r0, lsr #24
 802880e:	4770      	bx	lr
 8028810:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8028814:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8028818:	e747      	b.n	80286aa <fp_exp24+0x12>
 802881a:	bf00      	nop
 802881c:	fa746f40 	.word	0xfa746f40
 8028820:	fd3a37a0 	.word	0xfd3a37a0
 8028824:	fe9d1bd0 	.word	0xfe9d1bd0
 8028828:	ff4e8de8 	.word	0xff4e8de8
 802882c:	ff983370 	.word	0xff983370
 8028830:	ffc6e010 	.word	0xffc6e010

08028834 <fp_exp16>:
 8028834:	b1c8      	cbz	r0, 802886a <fp_exp16+0x36>
 8028836:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 802883a:	d046      	beq.n	80288ca <fp_exp16+0x96>
 802883c:	b508      	push	{r3, lr}
 802883e:	4b51      	ldr	r3, [pc, #324]	@ (8028984 <fp_exp16+0x150>)
 8028840:	4298      	cmp	r0, r3
 8028842:	dc1f      	bgt.n	8028884 <fp_exp16+0x50>
 8028844:	4b50      	ldr	r3, [pc, #320]	@ (8028988 <fp_exp16+0x154>)
 8028846:	4298      	cmp	r0, r3
 8028848:	db12      	blt.n	8028870 <fp_exp16+0x3c>
 802884a:	2800      	cmp	r0, #0
 802884c:	dd1d      	ble.n	802888a <fp_exp16+0x56>
 802884e:	4b4f      	ldr	r3, [pc, #316]	@ (802898c <fp_exp16+0x158>)
 8028850:	ebb3 2f00 	cmp.w	r3, r0, lsl #8
 8028854:	ea4f 2200 	mov.w	r2, r0, lsl #8
 8028858:	db0c      	blt.n	8028874 <fp_exp16+0x40>
 802885a:	4610      	mov	r0, r2
 802885c:	f7ff ff1c 	bl	8028698 <fp_exp24>
 8028860:	f3c0 13c0 	ubfx	r3, r0, #7, #1
 8028864:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8028868:	bd08      	pop	{r3, pc}
 802886a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 802886e:	4770      	bx	lr
 8028870:	2000      	movs	r0, #0
 8028872:	bd08      	pop	{r3, pc}
 8028874:	01c0      	lsls	r0, r0, #7
 8028876:	f7ff ff0f 	bl	8028698 <fp_exp24>
 802887a:	fba0 3000 	umull	r3, r0, r0, r0
 802887e:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8028882:	bd08      	pop	{r3, pc}
 8028884:	f04f 30ff 	mov.w	r0, #4294967295
 8028888:	bd08      	pop	{r3, pc}
 802888a:	4a40      	ldr	r2, [pc, #256]	@ (802898c <fp_exp16+0x158>)
 802888c:	4243      	negs	r3, r0
 802888e:	ebb2 2f03 	cmp.w	r2, r3, lsl #8
 8028892:	ea4f 2003 	mov.w	r0, r3, lsl #8
 8028896:	db1a      	blt.n	80288ce <fp_exp16+0x9a>
 8028898:	f7ff fefe 	bl	8028698 <fp_exp24>
 802889c:	f000 0201 	and.w	r2, r0, #1
 80288a0:	eb02 0350 	add.w	r3, r2, r0, lsr #1
 80288a4:	2b00      	cmp	r3, #0
 80288a6:	469c      	mov	ip, r3
 80288a8:	d00c      	beq.n	80288c4 <fp_exp16+0x90>
 80288aa:	db29      	blt.n	8028900 <fp_exp16+0xcc>
 80288ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80288b0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80288b4:	d228      	bcs.n	8028908 <fp_exp16+0xd4>
 80288b6:	005b      	lsls	r3, r3, #1
 80288b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80288bc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80288c0:	d3f9      	bcc.n	80288b6 <fp_exp16+0x82>
 80288c2:	bb0a      	cbnz	r2, 8028908 <fp_exp16+0xd4>
 80288c4:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80288c8:	bd08      	pop	{r3, pc}
 80288ca:	4831      	ldr	r0, [pc, #196]	@ (8028990 <fp_exp16+0x15c>)
 80288cc:	4770      	bx	lr
 80288ce:	01d8      	lsls	r0, r3, #7
 80288d0:	f7ff fee2 	bl	8028698 <fp_exp24>
 80288d4:	f000 0301 	and.w	r3, r0, #1
 80288d8:	eb03 0050 	add.w	r0, r3, r0, lsr #1
 80288dc:	2800      	cmp	r0, #0
 80288de:	4684      	mov	ip, r0
 80288e0:	d00c      	beq.n	80288fc <fp_exp16+0xc8>
 80288e2:	db29      	blt.n	8028938 <fp_exp16+0x104>
 80288e4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80288e8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80288ec:	d228      	bcs.n	8028940 <fp_exp16+0x10c>
 80288ee:	0040      	lsls	r0, r0, #1
 80288f0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80288f4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80288f8:	d3f9      	bcc.n	80288ee <fp_exp16+0xba>
 80288fa:	bb0a      	cbnz	r2, 8028940 <fp_exp16+0x10c>
 80288fc:	4825      	ldr	r0, [pc, #148]	@ (8028994 <fp_exp16+0x160>)
 80288fe:	bd08      	pop	{r3, pc}
 8028900:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8028904:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8028908:	2000      	movs	r0, #0
 802890a:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
 802890e:	e000      	b.n	8028912 <fp_exp16+0xde>
 8028910:	b151      	cbz	r1, 8028928 <fp_exp16+0xf4>
 8028912:	428b      	cmp	r3, r1
 8028914:	bf9c      	itt	ls
 8028916:	1ac9      	subls	r1, r1, r3
 8028918:	4310      	orrls	r0, r2
 802891a:	0852      	lsrs	r2, r2, #1
 802891c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8028920:	d1f6      	bne.n	8028910 <fp_exp16+0xdc>
 8028922:	4299      	cmp	r1, r3
 8028924:	bf28      	it	cs
 8028926:	3001      	addcs	r0, #1
 8028928:	f1bc 0f00 	cmp.w	ip, #0
 802892c:	db28      	blt.n	8028980 <fp_exp16+0x14c>
 802892e:	2800      	cmp	r0, #0
 8028930:	bfb8      	it	lt
 8028932:	f06f 4000 	mvnlt.w	r0, #2147483648	@ 0x80000000
 8028936:	bd08      	pop	{r3, pc}
 8028938:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 802893c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8028940:	2300      	movs	r3, #0
 8028942:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
 8028946:	e000      	b.n	802894a <fp_exp16+0x116>
 8028948:	b151      	cbz	r1, 8028960 <fp_exp16+0x12c>
 802894a:	4281      	cmp	r1, r0
 802894c:	bf24      	itt	cs
 802894e:	1a09      	subcs	r1, r1, r0
 8028950:	4313      	orrcs	r3, r2
 8028952:	0852      	lsrs	r2, r2, #1
 8028954:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8028958:	d1f6      	bne.n	8028948 <fp_exp16+0x114>
 802895a:	4281      	cmp	r1, r0
 802895c:	bf28      	it	cs
 802895e:	3301      	addcs	r3, #1
 8028960:	f1bc 0f00 	cmp.w	ip, #0
 8028964:	db0a      	blt.n	802897c <fp_exp16+0x148>
 8028966:	2b00      	cmp	r3, #0
 8028968:	dbc8      	blt.n	80288fc <fp_exp16+0xc8>
 802896a:	fba3 3203 	umull	r3, r2, r3, r3
 802896e:	0c18      	lsrs	r0, r3, #16
 8028970:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8028974:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8028978:	4418      	add	r0, r3
 802897a:	bd08      	pop	{r3, pc}
 802897c:	425b      	negs	r3, r3
 802897e:	e7f4      	b.n	802896a <fp_exp16+0x136>
 8028980:	4240      	negs	r0, r0
 8028982:	bd08      	pop	{r3, pc}
 8028984:	000b1721 	.word	0x000b1721
 8028988:	fff4e8df 	.word	0xfff4e8df
 802898c:	058b90be 	.word	0x058b90be
 8028990:	0002b7e1 	.word	0x0002b7e1
 8028994:	ffff0000 	.word	0xffff0000

08028998 <fp_log16>:
 8028998:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 802899c:	f000 809a 	beq.w	8028ad4 <fp_log16+0x13c>
 80289a0:	4b50      	ldr	r3, [pc, #320]	@ (8028ae4 <fp_log16+0x14c>)
 80289a2:	4298      	cmp	r0, r3
 80289a4:	f000 8098 	beq.w	8028ad8 <fp_log16+0x140>
 80289a8:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 80289ac:	f200 8085 	bhi.w	8028aba <fp_log16+0x122>
 80289b0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80289b4:	f080 8093 	bcs.w	8028ade <fp_log16+0x146>
 80289b8:	4b4b      	ldr	r3, [pc, #300]	@ (8028ae8 <fp_log16+0x150>)
 80289ba:	4a4c      	ldr	r2, [pc, #304]	@ (8028aec <fp_log16+0x154>)
 80289bc:	0400      	lsls	r0, r0, #16
 80289be:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80289c2:	bf34      	ite	cc
 80289c4:	0200      	lslcc	r0, r0, #8
 80289c6:	4613      	movcs	r3, r2
 80289c8:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
 80289cc:	d205      	bcs.n	80289da <fp_log16+0x42>
 80289ce:	f1a3 7331 	sub.w	r3, r3, #46399488	@ 0x2c40000
 80289d2:	f5a3 33e4 	sub.w	r3, r3, #116736	@ 0x1c800
 80289d6:	0100      	lsls	r0, r0, #4
 80289d8:	3b60      	subs	r3, #96	@ 0x60
 80289da:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 80289de:	d205      	bcs.n	80289ec <fp_log16+0x54>
 80289e0:	f1a3 73b1 	sub.w	r3, r3, #23199744	@ 0x1620000
 80289e4:	f5a3 4364 	sub.w	r3, r3, #58368	@ 0xe400
 80289e8:	0080      	lsls	r0, r0, #2
 80289ea:	3b30      	subs	r3, #48	@ 0x30
 80289ec:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80289f0:	d206      	bcs.n	8028a00 <fp_log16+0x68>
 80289f2:	f103 437f 	add.w	r3, r3, #4278190080	@ 0xff000000
 80289f6:	f503 039d 	add.w	r3, r3, #5144576	@ 0x4e8000
 80289fa:	0040      	lsls	r0, r0, #1
 80289fc:	f603 53e8 	addw	r3, r3, #3560	@ 0xde8
 8028a00:	eb10 0250 	adds.w	r2, r0, r0, lsr #1
 8028a04:	d405      	bmi.n	8028a12 <fp_log16+0x7a>
 8028a06:	f5a3 03cf 	sub.w	r3, r3, #6782976	@ 0x678000
 8028a0a:	f5a3 4399 	sub.w	r3, r3, #19584	@ 0x4c80
 8028a0e:	3b10      	subs	r3, #16
 8028a10:	4610      	mov	r0, r2
 8028a12:	eb10 0290 	adds.w	r2, r0, r0, lsr #2
 8028a16:	d405      	bmi.n	8028a24 <fp_log16+0x8c>
 8028a18:	f5a3 1364 	sub.w	r3, r3, #3735552	@ 0x390000
 8028a1c:	f5a3 53ff 	sub.w	r3, r3, #8160	@ 0x1fe0
 8028a20:	3b10      	subs	r3, #16
 8028a22:	4610      	mov	r0, r2
 8028a24:	eb10 02d0 	adds.w	r2, r0, r0, lsr #3
 8028a28:	d404      	bmi.n	8028a34 <fp_log16+0x9c>
 8028a2a:	f5a3 13f1 	sub.w	r3, r3, #1974272	@ 0x1e2000
 8028a2e:	f2a3 7307 	subw	r3, r3, #1799	@ 0x707
 8028a32:	4610      	mov	r0, r2
 8028a34:	eb10 1210 	adds.w	r2, r0, r0, lsr #4
 8028a38:	d404      	bmi.n	8028a44 <fp_log16+0xac>
 8028a3a:	f5a3 2378 	sub.w	r3, r3, #1015808	@ 0xf8000
 8028a3e:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8028a42:	4610      	mov	r0, r2
 8028a44:	eb10 1250 	adds.w	r2, r0, r0, lsr #5
 8028a48:	d403      	bmi.n	8028a52 <fp_log16+0xba>
 8028a4a:	f5a3 23fc 	sub.w	r3, r3, #516096	@ 0x7e000
 8028a4e:	3ba7      	subs	r3, #167	@ 0xa7
 8028a50:	4610      	mov	r0, r2
 8028a52:	eb10 1290 	adds.w	r2, r0, r0, lsr #6
 8028a56:	d403      	bmi.n	8028a60 <fp_log16+0xc8>
 8028a58:	f5a3 337e 	sub.w	r3, r3, #260096	@ 0x3f800
 8028a5c:	3b15      	subs	r3, #21
 8028a5e:	4610      	mov	r0, r2
 8028a60:	eb10 12d0 	adds.w	r2, r0, r0, lsr #7
 8028a64:	d403      	bmi.n	8028a6e <fp_log16+0xd6>
 8028a66:	f5a3 33ff 	sub.w	r3, r3, #130560	@ 0x1fe00
 8028a6a:	3b03      	subs	r3, #3
 8028a6c:	4610      	mov	r0, r2
 8028a6e:	eb10 2210 	adds.w	r2, r0, r0, lsr #8
 8028a72:	d403      	bmi.n	8028a7c <fp_log16+0xe4>
 8028a74:	f5a3 437f 	sub.w	r3, r3, #65280	@ 0xff00
 8028a78:	3b80      	subs	r3, #128	@ 0x80
 8028a7a:	4610      	mov	r0, r2
 8028a7c:	eb10 2250 	adds.w	r2, r0, r0, lsr #9
 8028a80:	d403      	bmi.n	8028a8a <fp_log16+0xf2>
 8028a82:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 8028a86:	3b60      	subs	r3, #96	@ 0x60
 8028a88:	4610      	mov	r0, r2
 8028a8a:	eb10 2290 	adds.w	r2, r0, r0, lsr #10
 8028a8e:	d403      	bmi.n	8028a98 <fp_log16+0x100>
 8028a90:	f5a3 537f 	sub.w	r3, r3, #16320	@ 0x3fc0
 8028a94:	3b38      	subs	r3, #56	@ 0x38
 8028a96:	4610      	mov	r0, r2
 8028a98:	eb10 22d0 	adds.w	r2, r0, r0, lsr #11
 8028a9c:	d403      	bmi.n	8028aa6 <fp_log16+0x10e>
 8028a9e:	f5a3 53ff 	sub.w	r3, r3, #8160	@ 0x1fe0
 8028aa2:	3b1e      	subs	r3, #30
 8028aa4:	4610      	mov	r0, r2
 8028aa6:	f1c0 4000 	rsb	r0, r0, #2147483648	@ 0x80000000
 8028aaa:	ebb3 10d0 	subs.w	r0, r3, r0, lsr #7
 8028aae:	d40a      	bmi.n	8028ac6 <fp_log16+0x12e>
 8028ab0:	f3c0 13c0 	ubfx	r3, r0, #7, #1
 8028ab4:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8028ab8:	4770      	bx	lr
 8028aba:	f000 0201 	and.w	r2, r0, #1
 8028abe:	4b0c      	ldr	r3, [pc, #48]	@ (8028af0 <fp_log16+0x158>)
 8028ac0:	eb02 0050 	add.w	r0, r2, r0, lsr #1
 8028ac4:	e792      	b.n	80289ec <fp_log16+0x54>
 8028ac6:	4240      	negs	r0, r0
 8028ac8:	f3c0 13c0 	ubfx	r3, r0, #7, #1
 8028acc:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8028ad0:	4240      	negs	r0, r0
 8028ad2:	4770      	bx	lr
 8028ad4:	2000      	movs	r0, #0
 8028ad6:	4770      	bx	lr
 8028ad8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8028adc:	4770      	bx	lr
 8028ade:	4b05      	ldr	r3, [pc, #20]	@ (8028af4 <fp_log16+0x15c>)
 8028ae0:	4a05      	ldr	r2, [pc, #20]	@ (8028af8 <fp_log16+0x160>)
 8028ae2:	e76c      	b.n	80289be <fp_log16+0x26>
 8028ae4:	0002b7e1 	.word	0x0002b7e1
 8028ae8:	f9c2fd29 	.word	0xf9c2fd29
 8028aec:	ff4e8de9 	.word	0xff4e8de9
 8028af0:	0b172180 	.word	0x0b172180
 8028af4:	04da1ea8 	.word	0x04da1ea8
 8028af8:	0a65af68 	.word	0x0a65af68

08028afc <_ZdlPvj>:
 8028afc:	f000 b800 	b.w	8028b00 <_ZdlPv>

08028b00 <_ZdlPv>:
 8028b00:	f000 b808 	b.w	8028b14 <free>

08028b04 <malloc>:
 8028b04:	4b02      	ldr	r3, [pc, #8]	@ (8028b10 <malloc+0xc>)
 8028b06:	4601      	mov	r1, r0
 8028b08:	6818      	ldr	r0, [r3, #0]
 8028b0a:	f000 b82d 	b.w	8028b68 <_malloc_r>
 8028b0e:	bf00      	nop
 8028b10:	24000078 	.word	0x24000078

08028b14 <free>:
 8028b14:	4b02      	ldr	r3, [pc, #8]	@ (8028b20 <free+0xc>)
 8028b16:	4601      	mov	r1, r0
 8028b18:	6818      	ldr	r0, [r3, #0]
 8028b1a:	f001 bc9f 	b.w	802a45c <_free_r>
 8028b1e:	bf00      	nop
 8028b20:	24000078 	.word	0x24000078

08028b24 <sbrk_aligned>:
 8028b24:	b570      	push	{r4, r5, r6, lr}
 8028b26:	4e0f      	ldr	r6, [pc, #60]	@ (8028b64 <sbrk_aligned+0x40>)
 8028b28:	460c      	mov	r4, r1
 8028b2a:	6831      	ldr	r1, [r6, #0]
 8028b2c:	4605      	mov	r5, r0
 8028b2e:	b911      	cbnz	r1, 8028b36 <sbrk_aligned+0x12>
 8028b30:	f000 fe50 	bl	80297d4 <_sbrk_r>
 8028b34:	6030      	str	r0, [r6, #0]
 8028b36:	4621      	mov	r1, r4
 8028b38:	4628      	mov	r0, r5
 8028b3a:	f000 fe4b 	bl	80297d4 <_sbrk_r>
 8028b3e:	1c43      	adds	r3, r0, #1
 8028b40:	d103      	bne.n	8028b4a <sbrk_aligned+0x26>
 8028b42:	f04f 34ff 	mov.w	r4, #4294967295
 8028b46:	4620      	mov	r0, r4
 8028b48:	bd70      	pop	{r4, r5, r6, pc}
 8028b4a:	1cc4      	adds	r4, r0, #3
 8028b4c:	f024 0403 	bic.w	r4, r4, #3
 8028b50:	42a0      	cmp	r0, r4
 8028b52:	d0f8      	beq.n	8028b46 <sbrk_aligned+0x22>
 8028b54:	1a21      	subs	r1, r4, r0
 8028b56:	4628      	mov	r0, r5
 8028b58:	f000 fe3c 	bl	80297d4 <_sbrk_r>
 8028b5c:	3001      	adds	r0, #1
 8028b5e:	d1f2      	bne.n	8028b46 <sbrk_aligned+0x22>
 8028b60:	e7ef      	b.n	8028b42 <sbrk_aligned+0x1e>
 8028b62:	bf00      	nop
 8028b64:	240036c8 	.word	0x240036c8

08028b68 <_malloc_r>:
 8028b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028b6c:	1ccd      	adds	r5, r1, #3
 8028b6e:	f025 0503 	bic.w	r5, r5, #3
 8028b72:	3508      	adds	r5, #8
 8028b74:	2d0c      	cmp	r5, #12
 8028b76:	bf38      	it	cc
 8028b78:	250c      	movcc	r5, #12
 8028b7a:	2d00      	cmp	r5, #0
 8028b7c:	4606      	mov	r6, r0
 8028b7e:	db01      	blt.n	8028b84 <_malloc_r+0x1c>
 8028b80:	42a9      	cmp	r1, r5
 8028b82:	d904      	bls.n	8028b8e <_malloc_r+0x26>
 8028b84:	230c      	movs	r3, #12
 8028b86:	6033      	str	r3, [r6, #0]
 8028b88:	2000      	movs	r0, #0
 8028b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028b8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8028c64 <_malloc_r+0xfc>
 8028b92:	f000 f869 	bl	8028c68 <__malloc_lock>
 8028b96:	f8d8 3000 	ldr.w	r3, [r8]
 8028b9a:	461c      	mov	r4, r3
 8028b9c:	bb44      	cbnz	r4, 8028bf0 <_malloc_r+0x88>
 8028b9e:	4629      	mov	r1, r5
 8028ba0:	4630      	mov	r0, r6
 8028ba2:	f7ff ffbf 	bl	8028b24 <sbrk_aligned>
 8028ba6:	1c43      	adds	r3, r0, #1
 8028ba8:	4604      	mov	r4, r0
 8028baa:	d158      	bne.n	8028c5e <_malloc_r+0xf6>
 8028bac:	f8d8 4000 	ldr.w	r4, [r8]
 8028bb0:	4627      	mov	r7, r4
 8028bb2:	2f00      	cmp	r7, #0
 8028bb4:	d143      	bne.n	8028c3e <_malloc_r+0xd6>
 8028bb6:	2c00      	cmp	r4, #0
 8028bb8:	d04b      	beq.n	8028c52 <_malloc_r+0xea>
 8028bba:	6823      	ldr	r3, [r4, #0]
 8028bbc:	4639      	mov	r1, r7
 8028bbe:	4630      	mov	r0, r6
 8028bc0:	eb04 0903 	add.w	r9, r4, r3
 8028bc4:	f000 fe06 	bl	80297d4 <_sbrk_r>
 8028bc8:	4581      	cmp	r9, r0
 8028bca:	d142      	bne.n	8028c52 <_malloc_r+0xea>
 8028bcc:	6821      	ldr	r1, [r4, #0]
 8028bce:	1a6d      	subs	r5, r5, r1
 8028bd0:	4629      	mov	r1, r5
 8028bd2:	4630      	mov	r0, r6
 8028bd4:	f7ff ffa6 	bl	8028b24 <sbrk_aligned>
 8028bd8:	3001      	adds	r0, #1
 8028bda:	d03a      	beq.n	8028c52 <_malloc_r+0xea>
 8028bdc:	6823      	ldr	r3, [r4, #0]
 8028bde:	442b      	add	r3, r5
 8028be0:	6023      	str	r3, [r4, #0]
 8028be2:	f8d8 3000 	ldr.w	r3, [r8]
 8028be6:	685a      	ldr	r2, [r3, #4]
 8028be8:	bb62      	cbnz	r2, 8028c44 <_malloc_r+0xdc>
 8028bea:	f8c8 7000 	str.w	r7, [r8]
 8028bee:	e00f      	b.n	8028c10 <_malloc_r+0xa8>
 8028bf0:	6822      	ldr	r2, [r4, #0]
 8028bf2:	1b52      	subs	r2, r2, r5
 8028bf4:	d420      	bmi.n	8028c38 <_malloc_r+0xd0>
 8028bf6:	2a0b      	cmp	r2, #11
 8028bf8:	d917      	bls.n	8028c2a <_malloc_r+0xc2>
 8028bfa:	1961      	adds	r1, r4, r5
 8028bfc:	42a3      	cmp	r3, r4
 8028bfe:	6025      	str	r5, [r4, #0]
 8028c00:	bf18      	it	ne
 8028c02:	6059      	strne	r1, [r3, #4]
 8028c04:	6863      	ldr	r3, [r4, #4]
 8028c06:	bf08      	it	eq
 8028c08:	f8c8 1000 	streq.w	r1, [r8]
 8028c0c:	5162      	str	r2, [r4, r5]
 8028c0e:	604b      	str	r3, [r1, #4]
 8028c10:	4630      	mov	r0, r6
 8028c12:	f000 f82f 	bl	8028c74 <__malloc_unlock>
 8028c16:	f104 000b 	add.w	r0, r4, #11
 8028c1a:	1d23      	adds	r3, r4, #4
 8028c1c:	f020 0007 	bic.w	r0, r0, #7
 8028c20:	1ac2      	subs	r2, r0, r3
 8028c22:	bf1c      	itt	ne
 8028c24:	1a1b      	subne	r3, r3, r0
 8028c26:	50a3      	strne	r3, [r4, r2]
 8028c28:	e7af      	b.n	8028b8a <_malloc_r+0x22>
 8028c2a:	6862      	ldr	r2, [r4, #4]
 8028c2c:	42a3      	cmp	r3, r4
 8028c2e:	bf0c      	ite	eq
 8028c30:	f8c8 2000 	streq.w	r2, [r8]
 8028c34:	605a      	strne	r2, [r3, #4]
 8028c36:	e7eb      	b.n	8028c10 <_malloc_r+0xa8>
 8028c38:	4623      	mov	r3, r4
 8028c3a:	6864      	ldr	r4, [r4, #4]
 8028c3c:	e7ae      	b.n	8028b9c <_malloc_r+0x34>
 8028c3e:	463c      	mov	r4, r7
 8028c40:	687f      	ldr	r7, [r7, #4]
 8028c42:	e7b6      	b.n	8028bb2 <_malloc_r+0x4a>
 8028c44:	461a      	mov	r2, r3
 8028c46:	685b      	ldr	r3, [r3, #4]
 8028c48:	42a3      	cmp	r3, r4
 8028c4a:	d1fb      	bne.n	8028c44 <_malloc_r+0xdc>
 8028c4c:	2300      	movs	r3, #0
 8028c4e:	6053      	str	r3, [r2, #4]
 8028c50:	e7de      	b.n	8028c10 <_malloc_r+0xa8>
 8028c52:	230c      	movs	r3, #12
 8028c54:	6033      	str	r3, [r6, #0]
 8028c56:	4630      	mov	r0, r6
 8028c58:	f000 f80c 	bl	8028c74 <__malloc_unlock>
 8028c5c:	e794      	b.n	8028b88 <_malloc_r+0x20>
 8028c5e:	6005      	str	r5, [r0, #0]
 8028c60:	e7d6      	b.n	8028c10 <_malloc_r+0xa8>
 8028c62:	bf00      	nop
 8028c64:	240036cc 	.word	0x240036cc

08028c68 <__malloc_lock>:
 8028c68:	4801      	ldr	r0, [pc, #4]	@ (8028c70 <__malloc_lock+0x8>)
 8028c6a:	f000 be00 	b.w	802986e <__retarget_lock_acquire_recursive>
 8028c6e:	bf00      	nop
 8028c70:	24003810 	.word	0x24003810

08028c74 <__malloc_unlock>:
 8028c74:	4801      	ldr	r0, [pc, #4]	@ (8028c7c <__malloc_unlock+0x8>)
 8028c76:	f000 bdfb 	b.w	8029870 <__retarget_lock_release_recursive>
 8028c7a:	bf00      	nop
 8028c7c:	24003810 	.word	0x24003810

08028c80 <__cvt>:
 8028c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028c82:	ed2d 8b02 	vpush	{d8}
 8028c86:	eeb0 8b40 	vmov.f64	d8, d0
 8028c8a:	b085      	sub	sp, #20
 8028c8c:	4617      	mov	r7, r2
 8028c8e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8028c90:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8028c92:	ee18 2a90 	vmov	r2, s17
 8028c96:	f025 0520 	bic.w	r5, r5, #32
 8028c9a:	2a00      	cmp	r2, #0
 8028c9c:	bfb6      	itet	lt
 8028c9e:	222d      	movlt	r2, #45	@ 0x2d
 8028ca0:	2200      	movge	r2, #0
 8028ca2:	eeb1 8b40 	vneglt.f64	d8, d0
 8028ca6:	2d46      	cmp	r5, #70	@ 0x46
 8028ca8:	460c      	mov	r4, r1
 8028caa:	701a      	strb	r2, [r3, #0]
 8028cac:	d004      	beq.n	8028cb8 <__cvt+0x38>
 8028cae:	2d45      	cmp	r5, #69	@ 0x45
 8028cb0:	d100      	bne.n	8028cb4 <__cvt+0x34>
 8028cb2:	3401      	adds	r4, #1
 8028cb4:	2102      	movs	r1, #2
 8028cb6:	e000      	b.n	8028cba <__cvt+0x3a>
 8028cb8:	2103      	movs	r1, #3
 8028cba:	ab03      	add	r3, sp, #12
 8028cbc:	9301      	str	r3, [sp, #4]
 8028cbe:	ab02      	add	r3, sp, #8
 8028cc0:	9300      	str	r3, [sp, #0]
 8028cc2:	4622      	mov	r2, r4
 8028cc4:	4633      	mov	r3, r6
 8028cc6:	eeb0 0b48 	vmov.f64	d0, d8
 8028cca:	f000 fe71 	bl	80299b0 <_dtoa_r>
 8028cce:	2d47      	cmp	r5, #71	@ 0x47
 8028cd0:	d114      	bne.n	8028cfc <__cvt+0x7c>
 8028cd2:	07fb      	lsls	r3, r7, #31
 8028cd4:	d50a      	bpl.n	8028cec <__cvt+0x6c>
 8028cd6:	1902      	adds	r2, r0, r4
 8028cd8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8028cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028ce0:	bf08      	it	eq
 8028ce2:	9203      	streq	r2, [sp, #12]
 8028ce4:	2130      	movs	r1, #48	@ 0x30
 8028ce6:	9b03      	ldr	r3, [sp, #12]
 8028ce8:	4293      	cmp	r3, r2
 8028cea:	d319      	bcc.n	8028d20 <__cvt+0xa0>
 8028cec:	9b03      	ldr	r3, [sp, #12]
 8028cee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8028cf0:	1a1b      	subs	r3, r3, r0
 8028cf2:	6013      	str	r3, [r2, #0]
 8028cf4:	b005      	add	sp, #20
 8028cf6:	ecbd 8b02 	vpop	{d8}
 8028cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028cfc:	2d46      	cmp	r5, #70	@ 0x46
 8028cfe:	eb00 0204 	add.w	r2, r0, r4
 8028d02:	d1e9      	bne.n	8028cd8 <__cvt+0x58>
 8028d04:	7803      	ldrb	r3, [r0, #0]
 8028d06:	2b30      	cmp	r3, #48	@ 0x30
 8028d08:	d107      	bne.n	8028d1a <__cvt+0x9a>
 8028d0a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8028d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028d12:	bf1c      	itt	ne
 8028d14:	f1c4 0401 	rsbne	r4, r4, #1
 8028d18:	6034      	strne	r4, [r6, #0]
 8028d1a:	6833      	ldr	r3, [r6, #0]
 8028d1c:	441a      	add	r2, r3
 8028d1e:	e7db      	b.n	8028cd8 <__cvt+0x58>
 8028d20:	1c5c      	adds	r4, r3, #1
 8028d22:	9403      	str	r4, [sp, #12]
 8028d24:	7019      	strb	r1, [r3, #0]
 8028d26:	e7de      	b.n	8028ce6 <__cvt+0x66>

08028d28 <__exponent>:
 8028d28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028d2a:	2900      	cmp	r1, #0
 8028d2c:	bfba      	itte	lt
 8028d2e:	4249      	neglt	r1, r1
 8028d30:	232d      	movlt	r3, #45	@ 0x2d
 8028d32:	232b      	movge	r3, #43	@ 0x2b
 8028d34:	2909      	cmp	r1, #9
 8028d36:	7002      	strb	r2, [r0, #0]
 8028d38:	7043      	strb	r3, [r0, #1]
 8028d3a:	dd29      	ble.n	8028d90 <__exponent+0x68>
 8028d3c:	f10d 0307 	add.w	r3, sp, #7
 8028d40:	461d      	mov	r5, r3
 8028d42:	270a      	movs	r7, #10
 8028d44:	461a      	mov	r2, r3
 8028d46:	fbb1 f6f7 	udiv	r6, r1, r7
 8028d4a:	fb07 1416 	mls	r4, r7, r6, r1
 8028d4e:	3430      	adds	r4, #48	@ 0x30
 8028d50:	f802 4c01 	strb.w	r4, [r2, #-1]
 8028d54:	460c      	mov	r4, r1
 8028d56:	2c63      	cmp	r4, #99	@ 0x63
 8028d58:	f103 33ff 	add.w	r3, r3, #4294967295
 8028d5c:	4631      	mov	r1, r6
 8028d5e:	dcf1      	bgt.n	8028d44 <__exponent+0x1c>
 8028d60:	3130      	adds	r1, #48	@ 0x30
 8028d62:	1e94      	subs	r4, r2, #2
 8028d64:	f803 1c01 	strb.w	r1, [r3, #-1]
 8028d68:	1c41      	adds	r1, r0, #1
 8028d6a:	4623      	mov	r3, r4
 8028d6c:	42ab      	cmp	r3, r5
 8028d6e:	d30a      	bcc.n	8028d86 <__exponent+0x5e>
 8028d70:	f10d 0309 	add.w	r3, sp, #9
 8028d74:	1a9b      	subs	r3, r3, r2
 8028d76:	42ac      	cmp	r4, r5
 8028d78:	bf88      	it	hi
 8028d7a:	2300      	movhi	r3, #0
 8028d7c:	3302      	adds	r3, #2
 8028d7e:	4403      	add	r3, r0
 8028d80:	1a18      	subs	r0, r3, r0
 8028d82:	b003      	add	sp, #12
 8028d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028d86:	f813 6b01 	ldrb.w	r6, [r3], #1
 8028d8a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8028d8e:	e7ed      	b.n	8028d6c <__exponent+0x44>
 8028d90:	2330      	movs	r3, #48	@ 0x30
 8028d92:	3130      	adds	r1, #48	@ 0x30
 8028d94:	7083      	strb	r3, [r0, #2]
 8028d96:	70c1      	strb	r1, [r0, #3]
 8028d98:	1d03      	adds	r3, r0, #4
 8028d9a:	e7f1      	b.n	8028d80 <__exponent+0x58>
 8028d9c:	0000      	movs	r0, r0
	...

08028da0 <_printf_float>:
 8028da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028da4:	b08d      	sub	sp, #52	@ 0x34
 8028da6:	460c      	mov	r4, r1
 8028da8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8028dac:	4616      	mov	r6, r2
 8028dae:	461f      	mov	r7, r3
 8028db0:	4605      	mov	r5, r0
 8028db2:	f000 fcd7 	bl	8029764 <_localeconv_r>
 8028db6:	f8d0 b000 	ldr.w	fp, [r0]
 8028dba:	4658      	mov	r0, fp
 8028dbc:	f7d7 faf8 	bl	80003b0 <strlen>
 8028dc0:	2300      	movs	r3, #0
 8028dc2:	930a      	str	r3, [sp, #40]	@ 0x28
 8028dc4:	f8d8 3000 	ldr.w	r3, [r8]
 8028dc8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8028dcc:	6822      	ldr	r2, [r4, #0]
 8028dce:	9005      	str	r0, [sp, #20]
 8028dd0:	3307      	adds	r3, #7
 8028dd2:	f023 0307 	bic.w	r3, r3, #7
 8028dd6:	f103 0108 	add.w	r1, r3, #8
 8028dda:	f8c8 1000 	str.w	r1, [r8]
 8028dde:	ed93 0b00 	vldr	d0, [r3]
 8028de2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8029040 <_printf_float+0x2a0>
 8028de6:	eeb0 7bc0 	vabs.f64	d7, d0
 8028dea:	eeb4 7b46 	vcmp.f64	d7, d6
 8028dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028df2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8028df6:	dd24      	ble.n	8028e42 <_printf_float+0xa2>
 8028df8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8028dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028e00:	d502      	bpl.n	8028e08 <_printf_float+0x68>
 8028e02:	232d      	movs	r3, #45	@ 0x2d
 8028e04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8028e08:	498f      	ldr	r1, [pc, #572]	@ (8029048 <_printf_float+0x2a8>)
 8028e0a:	4b90      	ldr	r3, [pc, #576]	@ (802904c <_printf_float+0x2ac>)
 8028e0c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8028e10:	bf94      	ite	ls
 8028e12:	4688      	movls	r8, r1
 8028e14:	4698      	movhi	r8, r3
 8028e16:	f022 0204 	bic.w	r2, r2, #4
 8028e1a:	2303      	movs	r3, #3
 8028e1c:	6123      	str	r3, [r4, #16]
 8028e1e:	6022      	str	r2, [r4, #0]
 8028e20:	f04f 0a00 	mov.w	sl, #0
 8028e24:	9700      	str	r7, [sp, #0]
 8028e26:	4633      	mov	r3, r6
 8028e28:	aa0b      	add	r2, sp, #44	@ 0x2c
 8028e2a:	4621      	mov	r1, r4
 8028e2c:	4628      	mov	r0, r5
 8028e2e:	f000 f9d1 	bl	80291d4 <_printf_common>
 8028e32:	3001      	adds	r0, #1
 8028e34:	f040 8089 	bne.w	8028f4a <_printf_float+0x1aa>
 8028e38:	f04f 30ff 	mov.w	r0, #4294967295
 8028e3c:	b00d      	add	sp, #52	@ 0x34
 8028e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028e42:	eeb4 0b40 	vcmp.f64	d0, d0
 8028e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028e4a:	d709      	bvc.n	8028e60 <_printf_float+0xc0>
 8028e4c:	ee10 3a90 	vmov	r3, s1
 8028e50:	2b00      	cmp	r3, #0
 8028e52:	bfbc      	itt	lt
 8028e54:	232d      	movlt	r3, #45	@ 0x2d
 8028e56:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8028e5a:	497d      	ldr	r1, [pc, #500]	@ (8029050 <_printf_float+0x2b0>)
 8028e5c:	4b7d      	ldr	r3, [pc, #500]	@ (8029054 <_printf_float+0x2b4>)
 8028e5e:	e7d5      	b.n	8028e0c <_printf_float+0x6c>
 8028e60:	6863      	ldr	r3, [r4, #4]
 8028e62:	1c59      	adds	r1, r3, #1
 8028e64:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8028e68:	d139      	bne.n	8028ede <_printf_float+0x13e>
 8028e6a:	2306      	movs	r3, #6
 8028e6c:	6063      	str	r3, [r4, #4]
 8028e6e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8028e72:	2300      	movs	r3, #0
 8028e74:	6022      	str	r2, [r4, #0]
 8028e76:	9303      	str	r3, [sp, #12]
 8028e78:	ab0a      	add	r3, sp, #40	@ 0x28
 8028e7a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8028e7e:	ab09      	add	r3, sp, #36	@ 0x24
 8028e80:	9300      	str	r3, [sp, #0]
 8028e82:	6861      	ldr	r1, [r4, #4]
 8028e84:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8028e88:	4628      	mov	r0, r5
 8028e8a:	f7ff fef9 	bl	8028c80 <__cvt>
 8028e8e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8028e92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028e94:	4680      	mov	r8, r0
 8028e96:	d129      	bne.n	8028eec <_printf_float+0x14c>
 8028e98:	1cc8      	adds	r0, r1, #3
 8028e9a:	db02      	blt.n	8028ea2 <_printf_float+0x102>
 8028e9c:	6863      	ldr	r3, [r4, #4]
 8028e9e:	4299      	cmp	r1, r3
 8028ea0:	dd41      	ble.n	8028f26 <_printf_float+0x186>
 8028ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8028ea6:	fa5f f989 	uxtb.w	r9, r9
 8028eaa:	3901      	subs	r1, #1
 8028eac:	464a      	mov	r2, r9
 8028eae:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8028eb2:	9109      	str	r1, [sp, #36]	@ 0x24
 8028eb4:	f7ff ff38 	bl	8028d28 <__exponent>
 8028eb8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8028eba:	1813      	adds	r3, r2, r0
 8028ebc:	2a01      	cmp	r2, #1
 8028ebe:	4682      	mov	sl, r0
 8028ec0:	6123      	str	r3, [r4, #16]
 8028ec2:	dc02      	bgt.n	8028eca <_printf_float+0x12a>
 8028ec4:	6822      	ldr	r2, [r4, #0]
 8028ec6:	07d2      	lsls	r2, r2, #31
 8028ec8:	d501      	bpl.n	8028ece <_printf_float+0x12e>
 8028eca:	3301      	adds	r3, #1
 8028ecc:	6123      	str	r3, [r4, #16]
 8028ece:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8028ed2:	2b00      	cmp	r3, #0
 8028ed4:	d0a6      	beq.n	8028e24 <_printf_float+0x84>
 8028ed6:	232d      	movs	r3, #45	@ 0x2d
 8028ed8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8028edc:	e7a2      	b.n	8028e24 <_printf_float+0x84>
 8028ede:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8028ee2:	d1c4      	bne.n	8028e6e <_printf_float+0xce>
 8028ee4:	2b00      	cmp	r3, #0
 8028ee6:	d1c2      	bne.n	8028e6e <_printf_float+0xce>
 8028ee8:	2301      	movs	r3, #1
 8028eea:	e7bf      	b.n	8028e6c <_printf_float+0xcc>
 8028eec:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8028ef0:	d9db      	bls.n	8028eaa <_printf_float+0x10a>
 8028ef2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8028ef6:	d118      	bne.n	8028f2a <_printf_float+0x18a>
 8028ef8:	2900      	cmp	r1, #0
 8028efa:	6863      	ldr	r3, [r4, #4]
 8028efc:	dd0b      	ble.n	8028f16 <_printf_float+0x176>
 8028efe:	6121      	str	r1, [r4, #16]
 8028f00:	b913      	cbnz	r3, 8028f08 <_printf_float+0x168>
 8028f02:	6822      	ldr	r2, [r4, #0]
 8028f04:	07d0      	lsls	r0, r2, #31
 8028f06:	d502      	bpl.n	8028f0e <_printf_float+0x16e>
 8028f08:	3301      	adds	r3, #1
 8028f0a:	440b      	add	r3, r1
 8028f0c:	6123      	str	r3, [r4, #16]
 8028f0e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8028f10:	f04f 0a00 	mov.w	sl, #0
 8028f14:	e7db      	b.n	8028ece <_printf_float+0x12e>
 8028f16:	b913      	cbnz	r3, 8028f1e <_printf_float+0x17e>
 8028f18:	6822      	ldr	r2, [r4, #0]
 8028f1a:	07d2      	lsls	r2, r2, #31
 8028f1c:	d501      	bpl.n	8028f22 <_printf_float+0x182>
 8028f1e:	3302      	adds	r3, #2
 8028f20:	e7f4      	b.n	8028f0c <_printf_float+0x16c>
 8028f22:	2301      	movs	r3, #1
 8028f24:	e7f2      	b.n	8028f0c <_printf_float+0x16c>
 8028f26:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8028f2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028f2c:	4299      	cmp	r1, r3
 8028f2e:	db05      	blt.n	8028f3c <_printf_float+0x19c>
 8028f30:	6823      	ldr	r3, [r4, #0]
 8028f32:	6121      	str	r1, [r4, #16]
 8028f34:	07d8      	lsls	r0, r3, #31
 8028f36:	d5ea      	bpl.n	8028f0e <_printf_float+0x16e>
 8028f38:	1c4b      	adds	r3, r1, #1
 8028f3a:	e7e7      	b.n	8028f0c <_printf_float+0x16c>
 8028f3c:	2900      	cmp	r1, #0
 8028f3e:	bfd4      	ite	le
 8028f40:	f1c1 0202 	rsble	r2, r1, #2
 8028f44:	2201      	movgt	r2, #1
 8028f46:	4413      	add	r3, r2
 8028f48:	e7e0      	b.n	8028f0c <_printf_float+0x16c>
 8028f4a:	6823      	ldr	r3, [r4, #0]
 8028f4c:	055a      	lsls	r2, r3, #21
 8028f4e:	d407      	bmi.n	8028f60 <_printf_float+0x1c0>
 8028f50:	6923      	ldr	r3, [r4, #16]
 8028f52:	4642      	mov	r2, r8
 8028f54:	4631      	mov	r1, r6
 8028f56:	4628      	mov	r0, r5
 8028f58:	47b8      	blx	r7
 8028f5a:	3001      	adds	r0, #1
 8028f5c:	d12a      	bne.n	8028fb4 <_printf_float+0x214>
 8028f5e:	e76b      	b.n	8028e38 <_printf_float+0x98>
 8028f60:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8028f64:	f240 80e0 	bls.w	8029128 <_printf_float+0x388>
 8028f68:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8028f6c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8028f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028f74:	d133      	bne.n	8028fde <_printf_float+0x23e>
 8028f76:	4a38      	ldr	r2, [pc, #224]	@ (8029058 <_printf_float+0x2b8>)
 8028f78:	2301      	movs	r3, #1
 8028f7a:	4631      	mov	r1, r6
 8028f7c:	4628      	mov	r0, r5
 8028f7e:	47b8      	blx	r7
 8028f80:	3001      	adds	r0, #1
 8028f82:	f43f af59 	beq.w	8028e38 <_printf_float+0x98>
 8028f86:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8028f8a:	4543      	cmp	r3, r8
 8028f8c:	db02      	blt.n	8028f94 <_printf_float+0x1f4>
 8028f8e:	6823      	ldr	r3, [r4, #0]
 8028f90:	07d8      	lsls	r0, r3, #31
 8028f92:	d50f      	bpl.n	8028fb4 <_printf_float+0x214>
 8028f94:	9b05      	ldr	r3, [sp, #20]
 8028f96:	465a      	mov	r2, fp
 8028f98:	4631      	mov	r1, r6
 8028f9a:	4628      	mov	r0, r5
 8028f9c:	47b8      	blx	r7
 8028f9e:	3001      	adds	r0, #1
 8028fa0:	f43f af4a 	beq.w	8028e38 <_printf_float+0x98>
 8028fa4:	f04f 0900 	mov.w	r9, #0
 8028fa8:	f108 38ff 	add.w	r8, r8, #4294967295
 8028fac:	f104 0a1a 	add.w	sl, r4, #26
 8028fb0:	45c8      	cmp	r8, r9
 8028fb2:	dc09      	bgt.n	8028fc8 <_printf_float+0x228>
 8028fb4:	6823      	ldr	r3, [r4, #0]
 8028fb6:	079b      	lsls	r3, r3, #30
 8028fb8:	f100 8107 	bmi.w	80291ca <_printf_float+0x42a>
 8028fbc:	68e0      	ldr	r0, [r4, #12]
 8028fbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028fc0:	4298      	cmp	r0, r3
 8028fc2:	bfb8      	it	lt
 8028fc4:	4618      	movlt	r0, r3
 8028fc6:	e739      	b.n	8028e3c <_printf_float+0x9c>
 8028fc8:	2301      	movs	r3, #1
 8028fca:	4652      	mov	r2, sl
 8028fcc:	4631      	mov	r1, r6
 8028fce:	4628      	mov	r0, r5
 8028fd0:	47b8      	blx	r7
 8028fd2:	3001      	adds	r0, #1
 8028fd4:	f43f af30 	beq.w	8028e38 <_printf_float+0x98>
 8028fd8:	f109 0901 	add.w	r9, r9, #1
 8028fdc:	e7e8      	b.n	8028fb0 <_printf_float+0x210>
 8028fde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028fe0:	2b00      	cmp	r3, #0
 8028fe2:	dc3b      	bgt.n	802905c <_printf_float+0x2bc>
 8028fe4:	4a1c      	ldr	r2, [pc, #112]	@ (8029058 <_printf_float+0x2b8>)
 8028fe6:	2301      	movs	r3, #1
 8028fe8:	4631      	mov	r1, r6
 8028fea:	4628      	mov	r0, r5
 8028fec:	47b8      	blx	r7
 8028fee:	3001      	adds	r0, #1
 8028ff0:	f43f af22 	beq.w	8028e38 <_printf_float+0x98>
 8028ff4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8028ff8:	ea59 0303 	orrs.w	r3, r9, r3
 8028ffc:	d102      	bne.n	8029004 <_printf_float+0x264>
 8028ffe:	6823      	ldr	r3, [r4, #0]
 8029000:	07d9      	lsls	r1, r3, #31
 8029002:	d5d7      	bpl.n	8028fb4 <_printf_float+0x214>
 8029004:	9b05      	ldr	r3, [sp, #20]
 8029006:	465a      	mov	r2, fp
 8029008:	4631      	mov	r1, r6
 802900a:	4628      	mov	r0, r5
 802900c:	47b8      	blx	r7
 802900e:	3001      	adds	r0, #1
 8029010:	f43f af12 	beq.w	8028e38 <_printf_float+0x98>
 8029014:	f04f 0a00 	mov.w	sl, #0
 8029018:	f104 0b1a 	add.w	fp, r4, #26
 802901c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802901e:	425b      	negs	r3, r3
 8029020:	4553      	cmp	r3, sl
 8029022:	dc01      	bgt.n	8029028 <_printf_float+0x288>
 8029024:	464b      	mov	r3, r9
 8029026:	e794      	b.n	8028f52 <_printf_float+0x1b2>
 8029028:	2301      	movs	r3, #1
 802902a:	465a      	mov	r2, fp
 802902c:	4631      	mov	r1, r6
 802902e:	4628      	mov	r0, r5
 8029030:	47b8      	blx	r7
 8029032:	3001      	adds	r0, #1
 8029034:	f43f af00 	beq.w	8028e38 <_printf_float+0x98>
 8029038:	f10a 0a01 	add.w	sl, sl, #1
 802903c:	e7ee      	b.n	802901c <_printf_float+0x27c>
 802903e:	bf00      	nop
 8029040:	ffffffff 	.word	0xffffffff
 8029044:	7fefffff 	.word	0x7fefffff
 8029048:	08031215 	.word	0x08031215
 802904c:	08031219 	.word	0x08031219
 8029050:	0803121d 	.word	0x0803121d
 8029054:	08031221 	.word	0x08031221
 8029058:	08031225 	.word	0x08031225
 802905c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802905e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8029062:	4553      	cmp	r3, sl
 8029064:	bfa8      	it	ge
 8029066:	4653      	movge	r3, sl
 8029068:	2b00      	cmp	r3, #0
 802906a:	4699      	mov	r9, r3
 802906c:	dc37      	bgt.n	80290de <_printf_float+0x33e>
 802906e:	2300      	movs	r3, #0
 8029070:	9307      	str	r3, [sp, #28]
 8029072:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8029076:	f104 021a 	add.w	r2, r4, #26
 802907a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802907c:	9907      	ldr	r1, [sp, #28]
 802907e:	9306      	str	r3, [sp, #24]
 8029080:	eba3 0309 	sub.w	r3, r3, r9
 8029084:	428b      	cmp	r3, r1
 8029086:	dc31      	bgt.n	80290ec <_printf_float+0x34c>
 8029088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802908a:	459a      	cmp	sl, r3
 802908c:	dc3b      	bgt.n	8029106 <_printf_float+0x366>
 802908e:	6823      	ldr	r3, [r4, #0]
 8029090:	07da      	lsls	r2, r3, #31
 8029092:	d438      	bmi.n	8029106 <_printf_float+0x366>
 8029094:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029096:	ebaa 0903 	sub.w	r9, sl, r3
 802909a:	9b06      	ldr	r3, [sp, #24]
 802909c:	ebaa 0303 	sub.w	r3, sl, r3
 80290a0:	4599      	cmp	r9, r3
 80290a2:	bfa8      	it	ge
 80290a4:	4699      	movge	r9, r3
 80290a6:	f1b9 0f00 	cmp.w	r9, #0
 80290aa:	dc34      	bgt.n	8029116 <_printf_float+0x376>
 80290ac:	f04f 0800 	mov.w	r8, #0
 80290b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80290b4:	f104 0b1a 	add.w	fp, r4, #26
 80290b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80290ba:	ebaa 0303 	sub.w	r3, sl, r3
 80290be:	eba3 0309 	sub.w	r3, r3, r9
 80290c2:	4543      	cmp	r3, r8
 80290c4:	f77f af76 	ble.w	8028fb4 <_printf_float+0x214>
 80290c8:	2301      	movs	r3, #1
 80290ca:	465a      	mov	r2, fp
 80290cc:	4631      	mov	r1, r6
 80290ce:	4628      	mov	r0, r5
 80290d0:	47b8      	blx	r7
 80290d2:	3001      	adds	r0, #1
 80290d4:	f43f aeb0 	beq.w	8028e38 <_printf_float+0x98>
 80290d8:	f108 0801 	add.w	r8, r8, #1
 80290dc:	e7ec      	b.n	80290b8 <_printf_float+0x318>
 80290de:	4642      	mov	r2, r8
 80290e0:	4631      	mov	r1, r6
 80290e2:	4628      	mov	r0, r5
 80290e4:	47b8      	blx	r7
 80290e6:	3001      	adds	r0, #1
 80290e8:	d1c1      	bne.n	802906e <_printf_float+0x2ce>
 80290ea:	e6a5      	b.n	8028e38 <_printf_float+0x98>
 80290ec:	2301      	movs	r3, #1
 80290ee:	4631      	mov	r1, r6
 80290f0:	4628      	mov	r0, r5
 80290f2:	9206      	str	r2, [sp, #24]
 80290f4:	47b8      	blx	r7
 80290f6:	3001      	adds	r0, #1
 80290f8:	f43f ae9e 	beq.w	8028e38 <_printf_float+0x98>
 80290fc:	9b07      	ldr	r3, [sp, #28]
 80290fe:	9a06      	ldr	r2, [sp, #24]
 8029100:	3301      	adds	r3, #1
 8029102:	9307      	str	r3, [sp, #28]
 8029104:	e7b9      	b.n	802907a <_printf_float+0x2da>
 8029106:	9b05      	ldr	r3, [sp, #20]
 8029108:	465a      	mov	r2, fp
 802910a:	4631      	mov	r1, r6
 802910c:	4628      	mov	r0, r5
 802910e:	47b8      	blx	r7
 8029110:	3001      	adds	r0, #1
 8029112:	d1bf      	bne.n	8029094 <_printf_float+0x2f4>
 8029114:	e690      	b.n	8028e38 <_printf_float+0x98>
 8029116:	9a06      	ldr	r2, [sp, #24]
 8029118:	464b      	mov	r3, r9
 802911a:	4442      	add	r2, r8
 802911c:	4631      	mov	r1, r6
 802911e:	4628      	mov	r0, r5
 8029120:	47b8      	blx	r7
 8029122:	3001      	adds	r0, #1
 8029124:	d1c2      	bne.n	80290ac <_printf_float+0x30c>
 8029126:	e687      	b.n	8028e38 <_printf_float+0x98>
 8029128:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 802912c:	f1b9 0f01 	cmp.w	r9, #1
 8029130:	dc01      	bgt.n	8029136 <_printf_float+0x396>
 8029132:	07db      	lsls	r3, r3, #31
 8029134:	d536      	bpl.n	80291a4 <_printf_float+0x404>
 8029136:	2301      	movs	r3, #1
 8029138:	4642      	mov	r2, r8
 802913a:	4631      	mov	r1, r6
 802913c:	4628      	mov	r0, r5
 802913e:	47b8      	blx	r7
 8029140:	3001      	adds	r0, #1
 8029142:	f43f ae79 	beq.w	8028e38 <_printf_float+0x98>
 8029146:	9b05      	ldr	r3, [sp, #20]
 8029148:	465a      	mov	r2, fp
 802914a:	4631      	mov	r1, r6
 802914c:	4628      	mov	r0, r5
 802914e:	47b8      	blx	r7
 8029150:	3001      	adds	r0, #1
 8029152:	f43f ae71 	beq.w	8028e38 <_printf_float+0x98>
 8029156:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 802915a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802915e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029162:	f109 39ff 	add.w	r9, r9, #4294967295
 8029166:	d018      	beq.n	802919a <_printf_float+0x3fa>
 8029168:	464b      	mov	r3, r9
 802916a:	f108 0201 	add.w	r2, r8, #1
 802916e:	4631      	mov	r1, r6
 8029170:	4628      	mov	r0, r5
 8029172:	47b8      	blx	r7
 8029174:	3001      	adds	r0, #1
 8029176:	d10c      	bne.n	8029192 <_printf_float+0x3f2>
 8029178:	e65e      	b.n	8028e38 <_printf_float+0x98>
 802917a:	2301      	movs	r3, #1
 802917c:	465a      	mov	r2, fp
 802917e:	4631      	mov	r1, r6
 8029180:	4628      	mov	r0, r5
 8029182:	47b8      	blx	r7
 8029184:	3001      	adds	r0, #1
 8029186:	f43f ae57 	beq.w	8028e38 <_printf_float+0x98>
 802918a:	f108 0801 	add.w	r8, r8, #1
 802918e:	45c8      	cmp	r8, r9
 8029190:	dbf3      	blt.n	802917a <_printf_float+0x3da>
 8029192:	4653      	mov	r3, sl
 8029194:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8029198:	e6dc      	b.n	8028f54 <_printf_float+0x1b4>
 802919a:	f04f 0800 	mov.w	r8, #0
 802919e:	f104 0b1a 	add.w	fp, r4, #26
 80291a2:	e7f4      	b.n	802918e <_printf_float+0x3ee>
 80291a4:	2301      	movs	r3, #1
 80291a6:	4642      	mov	r2, r8
 80291a8:	e7e1      	b.n	802916e <_printf_float+0x3ce>
 80291aa:	2301      	movs	r3, #1
 80291ac:	464a      	mov	r2, r9
 80291ae:	4631      	mov	r1, r6
 80291b0:	4628      	mov	r0, r5
 80291b2:	47b8      	blx	r7
 80291b4:	3001      	adds	r0, #1
 80291b6:	f43f ae3f 	beq.w	8028e38 <_printf_float+0x98>
 80291ba:	f108 0801 	add.w	r8, r8, #1
 80291be:	68e3      	ldr	r3, [r4, #12]
 80291c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80291c2:	1a5b      	subs	r3, r3, r1
 80291c4:	4543      	cmp	r3, r8
 80291c6:	dcf0      	bgt.n	80291aa <_printf_float+0x40a>
 80291c8:	e6f8      	b.n	8028fbc <_printf_float+0x21c>
 80291ca:	f04f 0800 	mov.w	r8, #0
 80291ce:	f104 0919 	add.w	r9, r4, #25
 80291d2:	e7f4      	b.n	80291be <_printf_float+0x41e>

080291d4 <_printf_common>:
 80291d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80291d8:	4616      	mov	r6, r2
 80291da:	4698      	mov	r8, r3
 80291dc:	688a      	ldr	r2, [r1, #8]
 80291de:	690b      	ldr	r3, [r1, #16]
 80291e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80291e4:	4293      	cmp	r3, r2
 80291e6:	bfb8      	it	lt
 80291e8:	4613      	movlt	r3, r2
 80291ea:	6033      	str	r3, [r6, #0]
 80291ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80291f0:	4607      	mov	r7, r0
 80291f2:	460c      	mov	r4, r1
 80291f4:	b10a      	cbz	r2, 80291fa <_printf_common+0x26>
 80291f6:	3301      	adds	r3, #1
 80291f8:	6033      	str	r3, [r6, #0]
 80291fa:	6823      	ldr	r3, [r4, #0]
 80291fc:	0699      	lsls	r1, r3, #26
 80291fe:	bf42      	ittt	mi
 8029200:	6833      	ldrmi	r3, [r6, #0]
 8029202:	3302      	addmi	r3, #2
 8029204:	6033      	strmi	r3, [r6, #0]
 8029206:	6825      	ldr	r5, [r4, #0]
 8029208:	f015 0506 	ands.w	r5, r5, #6
 802920c:	d106      	bne.n	802921c <_printf_common+0x48>
 802920e:	f104 0a19 	add.w	sl, r4, #25
 8029212:	68e3      	ldr	r3, [r4, #12]
 8029214:	6832      	ldr	r2, [r6, #0]
 8029216:	1a9b      	subs	r3, r3, r2
 8029218:	42ab      	cmp	r3, r5
 802921a:	dc26      	bgt.n	802926a <_printf_common+0x96>
 802921c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8029220:	6822      	ldr	r2, [r4, #0]
 8029222:	3b00      	subs	r3, #0
 8029224:	bf18      	it	ne
 8029226:	2301      	movne	r3, #1
 8029228:	0692      	lsls	r2, r2, #26
 802922a:	d42b      	bmi.n	8029284 <_printf_common+0xb0>
 802922c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8029230:	4641      	mov	r1, r8
 8029232:	4638      	mov	r0, r7
 8029234:	47c8      	blx	r9
 8029236:	3001      	adds	r0, #1
 8029238:	d01e      	beq.n	8029278 <_printf_common+0xa4>
 802923a:	6823      	ldr	r3, [r4, #0]
 802923c:	6922      	ldr	r2, [r4, #16]
 802923e:	f003 0306 	and.w	r3, r3, #6
 8029242:	2b04      	cmp	r3, #4
 8029244:	bf02      	ittt	eq
 8029246:	68e5      	ldreq	r5, [r4, #12]
 8029248:	6833      	ldreq	r3, [r6, #0]
 802924a:	1aed      	subeq	r5, r5, r3
 802924c:	68a3      	ldr	r3, [r4, #8]
 802924e:	bf0c      	ite	eq
 8029250:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8029254:	2500      	movne	r5, #0
 8029256:	4293      	cmp	r3, r2
 8029258:	bfc4      	itt	gt
 802925a:	1a9b      	subgt	r3, r3, r2
 802925c:	18ed      	addgt	r5, r5, r3
 802925e:	2600      	movs	r6, #0
 8029260:	341a      	adds	r4, #26
 8029262:	42b5      	cmp	r5, r6
 8029264:	d11a      	bne.n	802929c <_printf_common+0xc8>
 8029266:	2000      	movs	r0, #0
 8029268:	e008      	b.n	802927c <_printf_common+0xa8>
 802926a:	2301      	movs	r3, #1
 802926c:	4652      	mov	r2, sl
 802926e:	4641      	mov	r1, r8
 8029270:	4638      	mov	r0, r7
 8029272:	47c8      	blx	r9
 8029274:	3001      	adds	r0, #1
 8029276:	d103      	bne.n	8029280 <_printf_common+0xac>
 8029278:	f04f 30ff 	mov.w	r0, #4294967295
 802927c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029280:	3501      	adds	r5, #1
 8029282:	e7c6      	b.n	8029212 <_printf_common+0x3e>
 8029284:	18e1      	adds	r1, r4, r3
 8029286:	1c5a      	adds	r2, r3, #1
 8029288:	2030      	movs	r0, #48	@ 0x30
 802928a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802928e:	4422      	add	r2, r4
 8029290:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8029294:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8029298:	3302      	adds	r3, #2
 802929a:	e7c7      	b.n	802922c <_printf_common+0x58>
 802929c:	2301      	movs	r3, #1
 802929e:	4622      	mov	r2, r4
 80292a0:	4641      	mov	r1, r8
 80292a2:	4638      	mov	r0, r7
 80292a4:	47c8      	blx	r9
 80292a6:	3001      	adds	r0, #1
 80292a8:	d0e6      	beq.n	8029278 <_printf_common+0xa4>
 80292aa:	3601      	adds	r6, #1
 80292ac:	e7d9      	b.n	8029262 <_printf_common+0x8e>
	...

080292b0 <_printf_i>:
 80292b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80292b4:	7e0f      	ldrb	r7, [r1, #24]
 80292b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80292b8:	2f78      	cmp	r7, #120	@ 0x78
 80292ba:	4691      	mov	r9, r2
 80292bc:	4680      	mov	r8, r0
 80292be:	460c      	mov	r4, r1
 80292c0:	469a      	mov	sl, r3
 80292c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80292c6:	d807      	bhi.n	80292d8 <_printf_i+0x28>
 80292c8:	2f62      	cmp	r7, #98	@ 0x62
 80292ca:	d80a      	bhi.n	80292e2 <_printf_i+0x32>
 80292cc:	2f00      	cmp	r7, #0
 80292ce:	f000 80d2 	beq.w	8029476 <_printf_i+0x1c6>
 80292d2:	2f58      	cmp	r7, #88	@ 0x58
 80292d4:	f000 80b9 	beq.w	802944a <_printf_i+0x19a>
 80292d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80292dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80292e0:	e03a      	b.n	8029358 <_printf_i+0xa8>
 80292e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80292e6:	2b15      	cmp	r3, #21
 80292e8:	d8f6      	bhi.n	80292d8 <_printf_i+0x28>
 80292ea:	a101      	add	r1, pc, #4	@ (adr r1, 80292f0 <_printf_i+0x40>)
 80292ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80292f0:	08029349 	.word	0x08029349
 80292f4:	0802935d 	.word	0x0802935d
 80292f8:	080292d9 	.word	0x080292d9
 80292fc:	080292d9 	.word	0x080292d9
 8029300:	080292d9 	.word	0x080292d9
 8029304:	080292d9 	.word	0x080292d9
 8029308:	0802935d 	.word	0x0802935d
 802930c:	080292d9 	.word	0x080292d9
 8029310:	080292d9 	.word	0x080292d9
 8029314:	080292d9 	.word	0x080292d9
 8029318:	080292d9 	.word	0x080292d9
 802931c:	0802945d 	.word	0x0802945d
 8029320:	08029387 	.word	0x08029387
 8029324:	08029417 	.word	0x08029417
 8029328:	080292d9 	.word	0x080292d9
 802932c:	080292d9 	.word	0x080292d9
 8029330:	0802947f 	.word	0x0802947f
 8029334:	080292d9 	.word	0x080292d9
 8029338:	08029387 	.word	0x08029387
 802933c:	080292d9 	.word	0x080292d9
 8029340:	080292d9 	.word	0x080292d9
 8029344:	0802941f 	.word	0x0802941f
 8029348:	6833      	ldr	r3, [r6, #0]
 802934a:	1d1a      	adds	r2, r3, #4
 802934c:	681b      	ldr	r3, [r3, #0]
 802934e:	6032      	str	r2, [r6, #0]
 8029350:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8029354:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8029358:	2301      	movs	r3, #1
 802935a:	e09d      	b.n	8029498 <_printf_i+0x1e8>
 802935c:	6833      	ldr	r3, [r6, #0]
 802935e:	6820      	ldr	r0, [r4, #0]
 8029360:	1d19      	adds	r1, r3, #4
 8029362:	6031      	str	r1, [r6, #0]
 8029364:	0606      	lsls	r6, r0, #24
 8029366:	d501      	bpl.n	802936c <_printf_i+0xbc>
 8029368:	681d      	ldr	r5, [r3, #0]
 802936a:	e003      	b.n	8029374 <_printf_i+0xc4>
 802936c:	0645      	lsls	r5, r0, #25
 802936e:	d5fb      	bpl.n	8029368 <_printf_i+0xb8>
 8029370:	f9b3 5000 	ldrsh.w	r5, [r3]
 8029374:	2d00      	cmp	r5, #0
 8029376:	da03      	bge.n	8029380 <_printf_i+0xd0>
 8029378:	232d      	movs	r3, #45	@ 0x2d
 802937a:	426d      	negs	r5, r5
 802937c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8029380:	4859      	ldr	r0, [pc, #356]	@ (80294e8 <_printf_i+0x238>)
 8029382:	230a      	movs	r3, #10
 8029384:	e011      	b.n	80293aa <_printf_i+0xfa>
 8029386:	6821      	ldr	r1, [r4, #0]
 8029388:	6833      	ldr	r3, [r6, #0]
 802938a:	0608      	lsls	r0, r1, #24
 802938c:	f853 5b04 	ldr.w	r5, [r3], #4
 8029390:	d402      	bmi.n	8029398 <_printf_i+0xe8>
 8029392:	0649      	lsls	r1, r1, #25
 8029394:	bf48      	it	mi
 8029396:	b2ad      	uxthmi	r5, r5
 8029398:	2f6f      	cmp	r7, #111	@ 0x6f
 802939a:	4853      	ldr	r0, [pc, #332]	@ (80294e8 <_printf_i+0x238>)
 802939c:	6033      	str	r3, [r6, #0]
 802939e:	bf14      	ite	ne
 80293a0:	230a      	movne	r3, #10
 80293a2:	2308      	moveq	r3, #8
 80293a4:	2100      	movs	r1, #0
 80293a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80293aa:	6866      	ldr	r6, [r4, #4]
 80293ac:	60a6      	str	r6, [r4, #8]
 80293ae:	2e00      	cmp	r6, #0
 80293b0:	bfa2      	ittt	ge
 80293b2:	6821      	ldrge	r1, [r4, #0]
 80293b4:	f021 0104 	bicge.w	r1, r1, #4
 80293b8:	6021      	strge	r1, [r4, #0]
 80293ba:	b90d      	cbnz	r5, 80293c0 <_printf_i+0x110>
 80293bc:	2e00      	cmp	r6, #0
 80293be:	d04b      	beq.n	8029458 <_printf_i+0x1a8>
 80293c0:	4616      	mov	r6, r2
 80293c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80293c6:	fb03 5711 	mls	r7, r3, r1, r5
 80293ca:	5dc7      	ldrb	r7, [r0, r7]
 80293cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80293d0:	462f      	mov	r7, r5
 80293d2:	42bb      	cmp	r3, r7
 80293d4:	460d      	mov	r5, r1
 80293d6:	d9f4      	bls.n	80293c2 <_printf_i+0x112>
 80293d8:	2b08      	cmp	r3, #8
 80293da:	d10b      	bne.n	80293f4 <_printf_i+0x144>
 80293dc:	6823      	ldr	r3, [r4, #0]
 80293de:	07df      	lsls	r7, r3, #31
 80293e0:	d508      	bpl.n	80293f4 <_printf_i+0x144>
 80293e2:	6923      	ldr	r3, [r4, #16]
 80293e4:	6861      	ldr	r1, [r4, #4]
 80293e6:	4299      	cmp	r1, r3
 80293e8:	bfde      	ittt	le
 80293ea:	2330      	movle	r3, #48	@ 0x30
 80293ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80293f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80293f4:	1b92      	subs	r2, r2, r6
 80293f6:	6122      	str	r2, [r4, #16]
 80293f8:	f8cd a000 	str.w	sl, [sp]
 80293fc:	464b      	mov	r3, r9
 80293fe:	aa03      	add	r2, sp, #12
 8029400:	4621      	mov	r1, r4
 8029402:	4640      	mov	r0, r8
 8029404:	f7ff fee6 	bl	80291d4 <_printf_common>
 8029408:	3001      	adds	r0, #1
 802940a:	d14a      	bne.n	80294a2 <_printf_i+0x1f2>
 802940c:	f04f 30ff 	mov.w	r0, #4294967295
 8029410:	b004      	add	sp, #16
 8029412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029416:	6823      	ldr	r3, [r4, #0]
 8029418:	f043 0320 	orr.w	r3, r3, #32
 802941c:	6023      	str	r3, [r4, #0]
 802941e:	4833      	ldr	r0, [pc, #204]	@ (80294ec <_printf_i+0x23c>)
 8029420:	2778      	movs	r7, #120	@ 0x78
 8029422:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8029426:	6823      	ldr	r3, [r4, #0]
 8029428:	6831      	ldr	r1, [r6, #0]
 802942a:	061f      	lsls	r7, r3, #24
 802942c:	f851 5b04 	ldr.w	r5, [r1], #4
 8029430:	d402      	bmi.n	8029438 <_printf_i+0x188>
 8029432:	065f      	lsls	r7, r3, #25
 8029434:	bf48      	it	mi
 8029436:	b2ad      	uxthmi	r5, r5
 8029438:	6031      	str	r1, [r6, #0]
 802943a:	07d9      	lsls	r1, r3, #31
 802943c:	bf44      	itt	mi
 802943e:	f043 0320 	orrmi.w	r3, r3, #32
 8029442:	6023      	strmi	r3, [r4, #0]
 8029444:	b11d      	cbz	r5, 802944e <_printf_i+0x19e>
 8029446:	2310      	movs	r3, #16
 8029448:	e7ac      	b.n	80293a4 <_printf_i+0xf4>
 802944a:	4827      	ldr	r0, [pc, #156]	@ (80294e8 <_printf_i+0x238>)
 802944c:	e7e9      	b.n	8029422 <_printf_i+0x172>
 802944e:	6823      	ldr	r3, [r4, #0]
 8029450:	f023 0320 	bic.w	r3, r3, #32
 8029454:	6023      	str	r3, [r4, #0]
 8029456:	e7f6      	b.n	8029446 <_printf_i+0x196>
 8029458:	4616      	mov	r6, r2
 802945a:	e7bd      	b.n	80293d8 <_printf_i+0x128>
 802945c:	6833      	ldr	r3, [r6, #0]
 802945e:	6825      	ldr	r5, [r4, #0]
 8029460:	6961      	ldr	r1, [r4, #20]
 8029462:	1d18      	adds	r0, r3, #4
 8029464:	6030      	str	r0, [r6, #0]
 8029466:	062e      	lsls	r6, r5, #24
 8029468:	681b      	ldr	r3, [r3, #0]
 802946a:	d501      	bpl.n	8029470 <_printf_i+0x1c0>
 802946c:	6019      	str	r1, [r3, #0]
 802946e:	e002      	b.n	8029476 <_printf_i+0x1c6>
 8029470:	0668      	lsls	r0, r5, #25
 8029472:	d5fb      	bpl.n	802946c <_printf_i+0x1bc>
 8029474:	8019      	strh	r1, [r3, #0]
 8029476:	2300      	movs	r3, #0
 8029478:	6123      	str	r3, [r4, #16]
 802947a:	4616      	mov	r6, r2
 802947c:	e7bc      	b.n	80293f8 <_printf_i+0x148>
 802947e:	6833      	ldr	r3, [r6, #0]
 8029480:	1d1a      	adds	r2, r3, #4
 8029482:	6032      	str	r2, [r6, #0]
 8029484:	681e      	ldr	r6, [r3, #0]
 8029486:	6862      	ldr	r2, [r4, #4]
 8029488:	2100      	movs	r1, #0
 802948a:	4630      	mov	r0, r6
 802948c:	f7d6 ff40 	bl	8000310 <memchr>
 8029490:	b108      	cbz	r0, 8029496 <_printf_i+0x1e6>
 8029492:	1b80      	subs	r0, r0, r6
 8029494:	6060      	str	r0, [r4, #4]
 8029496:	6863      	ldr	r3, [r4, #4]
 8029498:	6123      	str	r3, [r4, #16]
 802949a:	2300      	movs	r3, #0
 802949c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80294a0:	e7aa      	b.n	80293f8 <_printf_i+0x148>
 80294a2:	6923      	ldr	r3, [r4, #16]
 80294a4:	4632      	mov	r2, r6
 80294a6:	4649      	mov	r1, r9
 80294a8:	4640      	mov	r0, r8
 80294aa:	47d0      	blx	sl
 80294ac:	3001      	adds	r0, #1
 80294ae:	d0ad      	beq.n	802940c <_printf_i+0x15c>
 80294b0:	6823      	ldr	r3, [r4, #0]
 80294b2:	079b      	lsls	r3, r3, #30
 80294b4:	d413      	bmi.n	80294de <_printf_i+0x22e>
 80294b6:	68e0      	ldr	r0, [r4, #12]
 80294b8:	9b03      	ldr	r3, [sp, #12]
 80294ba:	4298      	cmp	r0, r3
 80294bc:	bfb8      	it	lt
 80294be:	4618      	movlt	r0, r3
 80294c0:	e7a6      	b.n	8029410 <_printf_i+0x160>
 80294c2:	2301      	movs	r3, #1
 80294c4:	4632      	mov	r2, r6
 80294c6:	4649      	mov	r1, r9
 80294c8:	4640      	mov	r0, r8
 80294ca:	47d0      	blx	sl
 80294cc:	3001      	adds	r0, #1
 80294ce:	d09d      	beq.n	802940c <_printf_i+0x15c>
 80294d0:	3501      	adds	r5, #1
 80294d2:	68e3      	ldr	r3, [r4, #12]
 80294d4:	9903      	ldr	r1, [sp, #12]
 80294d6:	1a5b      	subs	r3, r3, r1
 80294d8:	42ab      	cmp	r3, r5
 80294da:	dcf2      	bgt.n	80294c2 <_printf_i+0x212>
 80294dc:	e7eb      	b.n	80294b6 <_printf_i+0x206>
 80294de:	2500      	movs	r5, #0
 80294e0:	f104 0619 	add.w	r6, r4, #25
 80294e4:	e7f5      	b.n	80294d2 <_printf_i+0x222>
 80294e6:	bf00      	nop
 80294e8:	08031227 	.word	0x08031227
 80294ec:	08031238 	.word	0x08031238

080294f0 <std>:
 80294f0:	2300      	movs	r3, #0
 80294f2:	b510      	push	{r4, lr}
 80294f4:	4604      	mov	r4, r0
 80294f6:	e9c0 3300 	strd	r3, r3, [r0]
 80294fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80294fe:	6083      	str	r3, [r0, #8]
 8029500:	8181      	strh	r1, [r0, #12]
 8029502:	6643      	str	r3, [r0, #100]	@ 0x64
 8029504:	81c2      	strh	r2, [r0, #14]
 8029506:	6183      	str	r3, [r0, #24]
 8029508:	4619      	mov	r1, r3
 802950a:	2208      	movs	r2, #8
 802950c:	305c      	adds	r0, #92	@ 0x5c
 802950e:	f000 f920 	bl	8029752 <memset>
 8029512:	4b0d      	ldr	r3, [pc, #52]	@ (8029548 <std+0x58>)
 8029514:	6263      	str	r3, [r4, #36]	@ 0x24
 8029516:	4b0d      	ldr	r3, [pc, #52]	@ (802954c <std+0x5c>)
 8029518:	62a3      	str	r3, [r4, #40]	@ 0x28
 802951a:	4b0d      	ldr	r3, [pc, #52]	@ (8029550 <std+0x60>)
 802951c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802951e:	4b0d      	ldr	r3, [pc, #52]	@ (8029554 <std+0x64>)
 8029520:	6323      	str	r3, [r4, #48]	@ 0x30
 8029522:	4b0d      	ldr	r3, [pc, #52]	@ (8029558 <std+0x68>)
 8029524:	6224      	str	r4, [r4, #32]
 8029526:	429c      	cmp	r4, r3
 8029528:	d006      	beq.n	8029538 <std+0x48>
 802952a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802952e:	4294      	cmp	r4, r2
 8029530:	d002      	beq.n	8029538 <std+0x48>
 8029532:	33d0      	adds	r3, #208	@ 0xd0
 8029534:	429c      	cmp	r4, r3
 8029536:	d105      	bne.n	8029544 <std+0x54>
 8029538:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802953c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029540:	f000 b994 	b.w	802986c <__retarget_lock_init_recursive>
 8029544:	bd10      	pop	{r4, pc}
 8029546:	bf00      	nop
 8029548:	08029699 	.word	0x08029699
 802954c:	080296bb 	.word	0x080296bb
 8029550:	080296f3 	.word	0x080296f3
 8029554:	08029717 	.word	0x08029717
 8029558:	240036d0 	.word	0x240036d0

0802955c <stdio_exit_handler>:
 802955c:	4a02      	ldr	r2, [pc, #8]	@ (8029568 <stdio_exit_handler+0xc>)
 802955e:	4903      	ldr	r1, [pc, #12]	@ (802956c <stdio_exit_handler+0x10>)
 8029560:	4803      	ldr	r0, [pc, #12]	@ (8029570 <stdio_exit_handler+0x14>)
 8029562:	f000 b869 	b.w	8029638 <_fwalk_sglue>
 8029566:	bf00      	nop
 8029568:	2400006c 	.word	0x2400006c
 802956c:	0802af81 	.word	0x0802af81
 8029570:	2400007c 	.word	0x2400007c

08029574 <cleanup_stdio>:
 8029574:	6841      	ldr	r1, [r0, #4]
 8029576:	4b0c      	ldr	r3, [pc, #48]	@ (80295a8 <cleanup_stdio+0x34>)
 8029578:	4299      	cmp	r1, r3
 802957a:	b510      	push	{r4, lr}
 802957c:	4604      	mov	r4, r0
 802957e:	d001      	beq.n	8029584 <cleanup_stdio+0x10>
 8029580:	f001 fcfe 	bl	802af80 <_fflush_r>
 8029584:	68a1      	ldr	r1, [r4, #8]
 8029586:	4b09      	ldr	r3, [pc, #36]	@ (80295ac <cleanup_stdio+0x38>)
 8029588:	4299      	cmp	r1, r3
 802958a:	d002      	beq.n	8029592 <cleanup_stdio+0x1e>
 802958c:	4620      	mov	r0, r4
 802958e:	f001 fcf7 	bl	802af80 <_fflush_r>
 8029592:	68e1      	ldr	r1, [r4, #12]
 8029594:	4b06      	ldr	r3, [pc, #24]	@ (80295b0 <cleanup_stdio+0x3c>)
 8029596:	4299      	cmp	r1, r3
 8029598:	d004      	beq.n	80295a4 <cleanup_stdio+0x30>
 802959a:	4620      	mov	r0, r4
 802959c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80295a0:	f001 bcee 	b.w	802af80 <_fflush_r>
 80295a4:	bd10      	pop	{r4, pc}
 80295a6:	bf00      	nop
 80295a8:	240036d0 	.word	0x240036d0
 80295ac:	24003738 	.word	0x24003738
 80295b0:	240037a0 	.word	0x240037a0

080295b4 <global_stdio_init.part.0>:
 80295b4:	b510      	push	{r4, lr}
 80295b6:	4b0b      	ldr	r3, [pc, #44]	@ (80295e4 <global_stdio_init.part.0+0x30>)
 80295b8:	4c0b      	ldr	r4, [pc, #44]	@ (80295e8 <global_stdio_init.part.0+0x34>)
 80295ba:	4a0c      	ldr	r2, [pc, #48]	@ (80295ec <global_stdio_init.part.0+0x38>)
 80295bc:	601a      	str	r2, [r3, #0]
 80295be:	4620      	mov	r0, r4
 80295c0:	2200      	movs	r2, #0
 80295c2:	2104      	movs	r1, #4
 80295c4:	f7ff ff94 	bl	80294f0 <std>
 80295c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80295cc:	2201      	movs	r2, #1
 80295ce:	2109      	movs	r1, #9
 80295d0:	f7ff ff8e 	bl	80294f0 <std>
 80295d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80295d8:	2202      	movs	r2, #2
 80295da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80295de:	2112      	movs	r1, #18
 80295e0:	f7ff bf86 	b.w	80294f0 <std>
 80295e4:	24003808 	.word	0x24003808
 80295e8:	240036d0 	.word	0x240036d0
 80295ec:	0802955d 	.word	0x0802955d

080295f0 <__sfp_lock_acquire>:
 80295f0:	4801      	ldr	r0, [pc, #4]	@ (80295f8 <__sfp_lock_acquire+0x8>)
 80295f2:	f000 b93c 	b.w	802986e <__retarget_lock_acquire_recursive>
 80295f6:	bf00      	nop
 80295f8:	24003811 	.word	0x24003811

080295fc <__sfp_lock_release>:
 80295fc:	4801      	ldr	r0, [pc, #4]	@ (8029604 <__sfp_lock_release+0x8>)
 80295fe:	f000 b937 	b.w	8029870 <__retarget_lock_release_recursive>
 8029602:	bf00      	nop
 8029604:	24003811 	.word	0x24003811

08029608 <__sinit>:
 8029608:	b510      	push	{r4, lr}
 802960a:	4604      	mov	r4, r0
 802960c:	f7ff fff0 	bl	80295f0 <__sfp_lock_acquire>
 8029610:	6a23      	ldr	r3, [r4, #32]
 8029612:	b11b      	cbz	r3, 802961c <__sinit+0x14>
 8029614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029618:	f7ff bff0 	b.w	80295fc <__sfp_lock_release>
 802961c:	4b04      	ldr	r3, [pc, #16]	@ (8029630 <__sinit+0x28>)
 802961e:	6223      	str	r3, [r4, #32]
 8029620:	4b04      	ldr	r3, [pc, #16]	@ (8029634 <__sinit+0x2c>)
 8029622:	681b      	ldr	r3, [r3, #0]
 8029624:	2b00      	cmp	r3, #0
 8029626:	d1f5      	bne.n	8029614 <__sinit+0xc>
 8029628:	f7ff ffc4 	bl	80295b4 <global_stdio_init.part.0>
 802962c:	e7f2      	b.n	8029614 <__sinit+0xc>
 802962e:	bf00      	nop
 8029630:	08029575 	.word	0x08029575
 8029634:	24003808 	.word	0x24003808

08029638 <_fwalk_sglue>:
 8029638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802963c:	4607      	mov	r7, r0
 802963e:	4688      	mov	r8, r1
 8029640:	4614      	mov	r4, r2
 8029642:	2600      	movs	r6, #0
 8029644:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8029648:	f1b9 0901 	subs.w	r9, r9, #1
 802964c:	d505      	bpl.n	802965a <_fwalk_sglue+0x22>
 802964e:	6824      	ldr	r4, [r4, #0]
 8029650:	2c00      	cmp	r4, #0
 8029652:	d1f7      	bne.n	8029644 <_fwalk_sglue+0xc>
 8029654:	4630      	mov	r0, r6
 8029656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802965a:	89ab      	ldrh	r3, [r5, #12]
 802965c:	2b01      	cmp	r3, #1
 802965e:	d907      	bls.n	8029670 <_fwalk_sglue+0x38>
 8029660:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8029664:	3301      	adds	r3, #1
 8029666:	d003      	beq.n	8029670 <_fwalk_sglue+0x38>
 8029668:	4629      	mov	r1, r5
 802966a:	4638      	mov	r0, r7
 802966c:	47c0      	blx	r8
 802966e:	4306      	orrs	r6, r0
 8029670:	3568      	adds	r5, #104	@ 0x68
 8029672:	e7e9      	b.n	8029648 <_fwalk_sglue+0x10>

08029674 <iprintf>:
 8029674:	b40f      	push	{r0, r1, r2, r3}
 8029676:	b507      	push	{r0, r1, r2, lr}
 8029678:	4906      	ldr	r1, [pc, #24]	@ (8029694 <iprintf+0x20>)
 802967a:	ab04      	add	r3, sp, #16
 802967c:	6808      	ldr	r0, [r1, #0]
 802967e:	f853 2b04 	ldr.w	r2, [r3], #4
 8029682:	6881      	ldr	r1, [r0, #8]
 8029684:	9301      	str	r3, [sp, #4]
 8029686:	f001 fadf 	bl	802ac48 <_vfiprintf_r>
 802968a:	b003      	add	sp, #12
 802968c:	f85d eb04 	ldr.w	lr, [sp], #4
 8029690:	b004      	add	sp, #16
 8029692:	4770      	bx	lr
 8029694:	24000078 	.word	0x24000078

08029698 <__sread>:
 8029698:	b510      	push	{r4, lr}
 802969a:	460c      	mov	r4, r1
 802969c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80296a0:	f000 f886 	bl	80297b0 <_read_r>
 80296a4:	2800      	cmp	r0, #0
 80296a6:	bfab      	itete	ge
 80296a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80296aa:	89a3      	ldrhlt	r3, [r4, #12]
 80296ac:	181b      	addge	r3, r3, r0
 80296ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80296b2:	bfac      	ite	ge
 80296b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80296b6:	81a3      	strhlt	r3, [r4, #12]
 80296b8:	bd10      	pop	{r4, pc}

080296ba <__swrite>:
 80296ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80296be:	461f      	mov	r7, r3
 80296c0:	898b      	ldrh	r3, [r1, #12]
 80296c2:	05db      	lsls	r3, r3, #23
 80296c4:	4605      	mov	r5, r0
 80296c6:	460c      	mov	r4, r1
 80296c8:	4616      	mov	r6, r2
 80296ca:	d505      	bpl.n	80296d8 <__swrite+0x1e>
 80296cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80296d0:	2302      	movs	r3, #2
 80296d2:	2200      	movs	r2, #0
 80296d4:	f000 f85a 	bl	802978c <_lseek_r>
 80296d8:	89a3      	ldrh	r3, [r4, #12]
 80296da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80296de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80296e2:	81a3      	strh	r3, [r4, #12]
 80296e4:	4632      	mov	r2, r6
 80296e6:	463b      	mov	r3, r7
 80296e8:	4628      	mov	r0, r5
 80296ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80296ee:	f000 b881 	b.w	80297f4 <_write_r>

080296f2 <__sseek>:
 80296f2:	b510      	push	{r4, lr}
 80296f4:	460c      	mov	r4, r1
 80296f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80296fa:	f000 f847 	bl	802978c <_lseek_r>
 80296fe:	1c43      	adds	r3, r0, #1
 8029700:	89a3      	ldrh	r3, [r4, #12]
 8029702:	bf15      	itete	ne
 8029704:	6560      	strne	r0, [r4, #84]	@ 0x54
 8029706:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802970a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802970e:	81a3      	strheq	r3, [r4, #12]
 8029710:	bf18      	it	ne
 8029712:	81a3      	strhne	r3, [r4, #12]
 8029714:	bd10      	pop	{r4, pc}

08029716 <__sclose>:
 8029716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802971a:	f000 b827 	b.w	802976c <_close_r>

0802971e <memmove>:
 802971e:	4288      	cmp	r0, r1
 8029720:	b510      	push	{r4, lr}
 8029722:	eb01 0402 	add.w	r4, r1, r2
 8029726:	d902      	bls.n	802972e <memmove+0x10>
 8029728:	4284      	cmp	r4, r0
 802972a:	4623      	mov	r3, r4
 802972c:	d807      	bhi.n	802973e <memmove+0x20>
 802972e:	1e43      	subs	r3, r0, #1
 8029730:	42a1      	cmp	r1, r4
 8029732:	d008      	beq.n	8029746 <memmove+0x28>
 8029734:	f811 2b01 	ldrb.w	r2, [r1], #1
 8029738:	f803 2f01 	strb.w	r2, [r3, #1]!
 802973c:	e7f8      	b.n	8029730 <memmove+0x12>
 802973e:	4402      	add	r2, r0
 8029740:	4601      	mov	r1, r0
 8029742:	428a      	cmp	r2, r1
 8029744:	d100      	bne.n	8029748 <memmove+0x2a>
 8029746:	bd10      	pop	{r4, pc}
 8029748:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802974c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8029750:	e7f7      	b.n	8029742 <memmove+0x24>

08029752 <memset>:
 8029752:	4402      	add	r2, r0
 8029754:	4603      	mov	r3, r0
 8029756:	4293      	cmp	r3, r2
 8029758:	d100      	bne.n	802975c <memset+0xa>
 802975a:	4770      	bx	lr
 802975c:	f803 1b01 	strb.w	r1, [r3], #1
 8029760:	e7f9      	b.n	8029756 <memset+0x4>
	...

08029764 <_localeconv_r>:
 8029764:	4800      	ldr	r0, [pc, #0]	@ (8029768 <_localeconv_r+0x4>)
 8029766:	4770      	bx	lr
 8029768:	240001b8 	.word	0x240001b8

0802976c <_close_r>:
 802976c:	b538      	push	{r3, r4, r5, lr}
 802976e:	4d06      	ldr	r5, [pc, #24]	@ (8029788 <_close_r+0x1c>)
 8029770:	2300      	movs	r3, #0
 8029772:	4604      	mov	r4, r0
 8029774:	4608      	mov	r0, r1
 8029776:	602b      	str	r3, [r5, #0]
 8029778:	f7de f9cb 	bl	8007b12 <_close>
 802977c:	1c43      	adds	r3, r0, #1
 802977e:	d102      	bne.n	8029786 <_close_r+0x1a>
 8029780:	682b      	ldr	r3, [r5, #0]
 8029782:	b103      	cbz	r3, 8029786 <_close_r+0x1a>
 8029784:	6023      	str	r3, [r4, #0]
 8029786:	bd38      	pop	{r3, r4, r5, pc}
 8029788:	2400380c 	.word	0x2400380c

0802978c <_lseek_r>:
 802978c:	b538      	push	{r3, r4, r5, lr}
 802978e:	4d07      	ldr	r5, [pc, #28]	@ (80297ac <_lseek_r+0x20>)
 8029790:	4604      	mov	r4, r0
 8029792:	4608      	mov	r0, r1
 8029794:	4611      	mov	r1, r2
 8029796:	2200      	movs	r2, #0
 8029798:	602a      	str	r2, [r5, #0]
 802979a:	461a      	mov	r2, r3
 802979c:	f7de f9e0 	bl	8007b60 <_lseek>
 80297a0:	1c43      	adds	r3, r0, #1
 80297a2:	d102      	bne.n	80297aa <_lseek_r+0x1e>
 80297a4:	682b      	ldr	r3, [r5, #0]
 80297a6:	b103      	cbz	r3, 80297aa <_lseek_r+0x1e>
 80297a8:	6023      	str	r3, [r4, #0]
 80297aa:	bd38      	pop	{r3, r4, r5, pc}
 80297ac:	2400380c 	.word	0x2400380c

080297b0 <_read_r>:
 80297b0:	b538      	push	{r3, r4, r5, lr}
 80297b2:	4d07      	ldr	r5, [pc, #28]	@ (80297d0 <_read_r+0x20>)
 80297b4:	4604      	mov	r4, r0
 80297b6:	4608      	mov	r0, r1
 80297b8:	4611      	mov	r1, r2
 80297ba:	2200      	movs	r2, #0
 80297bc:	602a      	str	r2, [r5, #0]
 80297be:	461a      	mov	r2, r3
 80297c0:	f7de f96e 	bl	8007aa0 <_read>
 80297c4:	1c43      	adds	r3, r0, #1
 80297c6:	d102      	bne.n	80297ce <_read_r+0x1e>
 80297c8:	682b      	ldr	r3, [r5, #0]
 80297ca:	b103      	cbz	r3, 80297ce <_read_r+0x1e>
 80297cc:	6023      	str	r3, [r4, #0]
 80297ce:	bd38      	pop	{r3, r4, r5, pc}
 80297d0:	2400380c 	.word	0x2400380c

080297d4 <_sbrk_r>:
 80297d4:	b538      	push	{r3, r4, r5, lr}
 80297d6:	4d06      	ldr	r5, [pc, #24]	@ (80297f0 <_sbrk_r+0x1c>)
 80297d8:	2300      	movs	r3, #0
 80297da:	4604      	mov	r4, r0
 80297dc:	4608      	mov	r0, r1
 80297de:	602b      	str	r3, [r5, #0]
 80297e0:	f7de f9cc 	bl	8007b7c <_sbrk>
 80297e4:	1c43      	adds	r3, r0, #1
 80297e6:	d102      	bne.n	80297ee <_sbrk_r+0x1a>
 80297e8:	682b      	ldr	r3, [r5, #0]
 80297ea:	b103      	cbz	r3, 80297ee <_sbrk_r+0x1a>
 80297ec:	6023      	str	r3, [r4, #0]
 80297ee:	bd38      	pop	{r3, r4, r5, pc}
 80297f0:	2400380c 	.word	0x2400380c

080297f4 <_write_r>:
 80297f4:	b538      	push	{r3, r4, r5, lr}
 80297f6:	4d07      	ldr	r5, [pc, #28]	@ (8029814 <_write_r+0x20>)
 80297f8:	4604      	mov	r4, r0
 80297fa:	4608      	mov	r0, r1
 80297fc:	4611      	mov	r1, r2
 80297fe:	2200      	movs	r2, #0
 8029800:	602a      	str	r2, [r5, #0]
 8029802:	461a      	mov	r2, r3
 8029804:	f7de f969 	bl	8007ada <_write>
 8029808:	1c43      	adds	r3, r0, #1
 802980a:	d102      	bne.n	8029812 <_write_r+0x1e>
 802980c:	682b      	ldr	r3, [r5, #0]
 802980e:	b103      	cbz	r3, 8029812 <_write_r+0x1e>
 8029810:	6023      	str	r3, [r4, #0]
 8029812:	bd38      	pop	{r3, r4, r5, pc}
 8029814:	2400380c 	.word	0x2400380c

08029818 <__errno>:
 8029818:	4b01      	ldr	r3, [pc, #4]	@ (8029820 <__errno+0x8>)
 802981a:	6818      	ldr	r0, [r3, #0]
 802981c:	4770      	bx	lr
 802981e:	bf00      	nop
 8029820:	24000078 	.word	0x24000078

08029824 <__libc_init_array>:
 8029824:	b570      	push	{r4, r5, r6, lr}
 8029826:	4d0d      	ldr	r5, [pc, #52]	@ (802985c <__libc_init_array+0x38>)
 8029828:	4c0d      	ldr	r4, [pc, #52]	@ (8029860 <__libc_init_array+0x3c>)
 802982a:	1b64      	subs	r4, r4, r5
 802982c:	10a4      	asrs	r4, r4, #2
 802982e:	2600      	movs	r6, #0
 8029830:	42a6      	cmp	r6, r4
 8029832:	d109      	bne.n	8029848 <__libc_init_array+0x24>
 8029834:	4d0b      	ldr	r5, [pc, #44]	@ (8029864 <__libc_init_array+0x40>)
 8029836:	4c0c      	ldr	r4, [pc, #48]	@ (8029868 <__libc_init_array+0x44>)
 8029838:	f001 fd16 	bl	802b268 <_init>
 802983c:	1b64      	subs	r4, r4, r5
 802983e:	10a4      	asrs	r4, r4, #2
 8029840:	2600      	movs	r6, #0
 8029842:	42a6      	cmp	r6, r4
 8029844:	d105      	bne.n	8029852 <__libc_init_array+0x2e>
 8029846:	bd70      	pop	{r4, r5, r6, pc}
 8029848:	f855 3b04 	ldr.w	r3, [r5], #4
 802984c:	4798      	blx	r3
 802984e:	3601      	adds	r6, #1
 8029850:	e7ee      	b.n	8029830 <__libc_init_array+0xc>
 8029852:	f855 3b04 	ldr.w	r3, [r5], #4
 8029856:	4798      	blx	r3
 8029858:	3601      	adds	r6, #1
 802985a:	e7f2      	b.n	8029842 <__libc_init_array+0x1e>
 802985c:	08031554 	.word	0x08031554
 8029860:	08031554 	.word	0x08031554
 8029864:	08031554 	.word	0x08031554
 8029868:	0803155c 	.word	0x0803155c

0802986c <__retarget_lock_init_recursive>:
 802986c:	4770      	bx	lr

0802986e <__retarget_lock_acquire_recursive>:
 802986e:	4770      	bx	lr

08029870 <__retarget_lock_release_recursive>:
 8029870:	4770      	bx	lr

08029872 <strcpy>:
 8029872:	4603      	mov	r3, r0
 8029874:	f811 2b01 	ldrb.w	r2, [r1], #1
 8029878:	f803 2b01 	strb.w	r2, [r3], #1
 802987c:	2a00      	cmp	r2, #0
 802987e:	d1f9      	bne.n	8029874 <strcpy+0x2>
 8029880:	4770      	bx	lr

08029882 <memcpy>:
 8029882:	440a      	add	r2, r1
 8029884:	4291      	cmp	r1, r2
 8029886:	f100 33ff 	add.w	r3, r0, #4294967295
 802988a:	d100      	bne.n	802988e <memcpy+0xc>
 802988c:	4770      	bx	lr
 802988e:	b510      	push	{r4, lr}
 8029890:	f811 4b01 	ldrb.w	r4, [r1], #1
 8029894:	f803 4f01 	strb.w	r4, [r3, #1]!
 8029898:	4291      	cmp	r1, r2
 802989a:	d1f9      	bne.n	8029890 <memcpy+0xe>
 802989c:	bd10      	pop	{r4, pc}

0802989e <quorem>:
 802989e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80298a2:	6903      	ldr	r3, [r0, #16]
 80298a4:	690c      	ldr	r4, [r1, #16]
 80298a6:	42a3      	cmp	r3, r4
 80298a8:	4607      	mov	r7, r0
 80298aa:	db7e      	blt.n	80299aa <quorem+0x10c>
 80298ac:	3c01      	subs	r4, #1
 80298ae:	f101 0814 	add.w	r8, r1, #20
 80298b2:	00a3      	lsls	r3, r4, #2
 80298b4:	f100 0514 	add.w	r5, r0, #20
 80298b8:	9300      	str	r3, [sp, #0]
 80298ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80298be:	9301      	str	r3, [sp, #4]
 80298c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80298c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80298c8:	3301      	adds	r3, #1
 80298ca:	429a      	cmp	r2, r3
 80298cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80298d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80298d4:	d32e      	bcc.n	8029934 <quorem+0x96>
 80298d6:	f04f 0a00 	mov.w	sl, #0
 80298da:	46c4      	mov	ip, r8
 80298dc:	46ae      	mov	lr, r5
 80298de:	46d3      	mov	fp, sl
 80298e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80298e4:	b298      	uxth	r0, r3
 80298e6:	fb06 a000 	mla	r0, r6, r0, sl
 80298ea:	0c02      	lsrs	r2, r0, #16
 80298ec:	0c1b      	lsrs	r3, r3, #16
 80298ee:	fb06 2303 	mla	r3, r6, r3, r2
 80298f2:	f8de 2000 	ldr.w	r2, [lr]
 80298f6:	b280      	uxth	r0, r0
 80298f8:	b292      	uxth	r2, r2
 80298fa:	1a12      	subs	r2, r2, r0
 80298fc:	445a      	add	r2, fp
 80298fe:	f8de 0000 	ldr.w	r0, [lr]
 8029902:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8029906:	b29b      	uxth	r3, r3
 8029908:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 802990c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8029910:	b292      	uxth	r2, r2
 8029912:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8029916:	45e1      	cmp	r9, ip
 8029918:	f84e 2b04 	str.w	r2, [lr], #4
 802991c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8029920:	d2de      	bcs.n	80298e0 <quorem+0x42>
 8029922:	9b00      	ldr	r3, [sp, #0]
 8029924:	58eb      	ldr	r3, [r5, r3]
 8029926:	b92b      	cbnz	r3, 8029934 <quorem+0x96>
 8029928:	9b01      	ldr	r3, [sp, #4]
 802992a:	3b04      	subs	r3, #4
 802992c:	429d      	cmp	r5, r3
 802992e:	461a      	mov	r2, r3
 8029930:	d32f      	bcc.n	8029992 <quorem+0xf4>
 8029932:	613c      	str	r4, [r7, #16]
 8029934:	4638      	mov	r0, r7
 8029936:	f001 f855 	bl	802a9e4 <__mcmp>
 802993a:	2800      	cmp	r0, #0
 802993c:	db25      	blt.n	802998a <quorem+0xec>
 802993e:	4629      	mov	r1, r5
 8029940:	2000      	movs	r0, #0
 8029942:	f858 2b04 	ldr.w	r2, [r8], #4
 8029946:	f8d1 c000 	ldr.w	ip, [r1]
 802994a:	fa1f fe82 	uxth.w	lr, r2
 802994e:	fa1f f38c 	uxth.w	r3, ip
 8029952:	eba3 030e 	sub.w	r3, r3, lr
 8029956:	4403      	add	r3, r0
 8029958:	0c12      	lsrs	r2, r2, #16
 802995a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 802995e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8029962:	b29b      	uxth	r3, r3
 8029964:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8029968:	45c1      	cmp	r9, r8
 802996a:	f841 3b04 	str.w	r3, [r1], #4
 802996e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8029972:	d2e6      	bcs.n	8029942 <quorem+0xa4>
 8029974:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8029978:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802997c:	b922      	cbnz	r2, 8029988 <quorem+0xea>
 802997e:	3b04      	subs	r3, #4
 8029980:	429d      	cmp	r5, r3
 8029982:	461a      	mov	r2, r3
 8029984:	d30b      	bcc.n	802999e <quorem+0x100>
 8029986:	613c      	str	r4, [r7, #16]
 8029988:	3601      	adds	r6, #1
 802998a:	4630      	mov	r0, r6
 802998c:	b003      	add	sp, #12
 802998e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029992:	6812      	ldr	r2, [r2, #0]
 8029994:	3b04      	subs	r3, #4
 8029996:	2a00      	cmp	r2, #0
 8029998:	d1cb      	bne.n	8029932 <quorem+0x94>
 802999a:	3c01      	subs	r4, #1
 802999c:	e7c6      	b.n	802992c <quorem+0x8e>
 802999e:	6812      	ldr	r2, [r2, #0]
 80299a0:	3b04      	subs	r3, #4
 80299a2:	2a00      	cmp	r2, #0
 80299a4:	d1ef      	bne.n	8029986 <quorem+0xe8>
 80299a6:	3c01      	subs	r4, #1
 80299a8:	e7ea      	b.n	8029980 <quorem+0xe2>
 80299aa:	2000      	movs	r0, #0
 80299ac:	e7ee      	b.n	802998c <quorem+0xee>
	...

080299b0 <_dtoa_r>:
 80299b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80299b4:	ed2d 8b02 	vpush	{d8}
 80299b8:	69c7      	ldr	r7, [r0, #28]
 80299ba:	b091      	sub	sp, #68	@ 0x44
 80299bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80299c0:	ec55 4b10 	vmov	r4, r5, d0
 80299c4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80299c6:	9107      	str	r1, [sp, #28]
 80299c8:	4681      	mov	r9, r0
 80299ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80299cc:	930d      	str	r3, [sp, #52]	@ 0x34
 80299ce:	b97f      	cbnz	r7, 80299f0 <_dtoa_r+0x40>
 80299d0:	2010      	movs	r0, #16
 80299d2:	f7ff f897 	bl	8028b04 <malloc>
 80299d6:	4602      	mov	r2, r0
 80299d8:	f8c9 001c 	str.w	r0, [r9, #28]
 80299dc:	b920      	cbnz	r0, 80299e8 <_dtoa_r+0x38>
 80299de:	4ba0      	ldr	r3, [pc, #640]	@ (8029c60 <_dtoa_r+0x2b0>)
 80299e0:	21ef      	movs	r1, #239	@ 0xef
 80299e2:	48a0      	ldr	r0, [pc, #640]	@ (8029c64 <_dtoa_r+0x2b4>)
 80299e4:	f7dd fcec 	bl	80073c0 <__assert_func>
 80299e8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80299ec:	6007      	str	r7, [r0, #0]
 80299ee:	60c7      	str	r7, [r0, #12]
 80299f0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80299f4:	6819      	ldr	r1, [r3, #0]
 80299f6:	b159      	cbz	r1, 8029a10 <_dtoa_r+0x60>
 80299f8:	685a      	ldr	r2, [r3, #4]
 80299fa:	604a      	str	r2, [r1, #4]
 80299fc:	2301      	movs	r3, #1
 80299fe:	4093      	lsls	r3, r2
 8029a00:	608b      	str	r3, [r1, #8]
 8029a02:	4648      	mov	r0, r9
 8029a04:	f000 fdb4 	bl	802a570 <_Bfree>
 8029a08:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8029a0c:	2200      	movs	r2, #0
 8029a0e:	601a      	str	r2, [r3, #0]
 8029a10:	1e2b      	subs	r3, r5, #0
 8029a12:	bfbb      	ittet	lt
 8029a14:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8029a18:	9303      	strlt	r3, [sp, #12]
 8029a1a:	2300      	movge	r3, #0
 8029a1c:	2201      	movlt	r2, #1
 8029a1e:	bfac      	ite	ge
 8029a20:	6033      	strge	r3, [r6, #0]
 8029a22:	6032      	strlt	r2, [r6, #0]
 8029a24:	4b90      	ldr	r3, [pc, #576]	@ (8029c68 <_dtoa_r+0x2b8>)
 8029a26:	9e03      	ldr	r6, [sp, #12]
 8029a28:	43b3      	bics	r3, r6
 8029a2a:	d110      	bne.n	8029a4e <_dtoa_r+0x9e>
 8029a2c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8029a2e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8029a32:	6013      	str	r3, [r2, #0]
 8029a34:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8029a38:	4323      	orrs	r3, r4
 8029a3a:	f000 84de 	beq.w	802a3fa <_dtoa_r+0xa4a>
 8029a3e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8029a40:	4f8a      	ldr	r7, [pc, #552]	@ (8029c6c <_dtoa_r+0x2bc>)
 8029a42:	2b00      	cmp	r3, #0
 8029a44:	f000 84e0 	beq.w	802a408 <_dtoa_r+0xa58>
 8029a48:	1cfb      	adds	r3, r7, #3
 8029a4a:	f000 bcdb 	b.w	802a404 <_dtoa_r+0xa54>
 8029a4e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8029a52:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8029a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029a5a:	d10a      	bne.n	8029a72 <_dtoa_r+0xc2>
 8029a5c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8029a5e:	2301      	movs	r3, #1
 8029a60:	6013      	str	r3, [r2, #0]
 8029a62:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8029a64:	b113      	cbz	r3, 8029a6c <_dtoa_r+0xbc>
 8029a66:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8029a68:	4b81      	ldr	r3, [pc, #516]	@ (8029c70 <_dtoa_r+0x2c0>)
 8029a6a:	6013      	str	r3, [r2, #0]
 8029a6c:	4f81      	ldr	r7, [pc, #516]	@ (8029c74 <_dtoa_r+0x2c4>)
 8029a6e:	f000 bccb 	b.w	802a408 <_dtoa_r+0xa58>
 8029a72:	aa0e      	add	r2, sp, #56	@ 0x38
 8029a74:	a90f      	add	r1, sp, #60	@ 0x3c
 8029a76:	4648      	mov	r0, r9
 8029a78:	eeb0 0b48 	vmov.f64	d0, d8
 8029a7c:	f001 f862 	bl	802ab44 <__d2b>
 8029a80:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8029a84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8029a86:	9001      	str	r0, [sp, #4]
 8029a88:	2b00      	cmp	r3, #0
 8029a8a:	d045      	beq.n	8029b18 <_dtoa_r+0x168>
 8029a8c:	eeb0 7b48 	vmov.f64	d7, d8
 8029a90:	ee18 1a90 	vmov	r1, s17
 8029a94:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8029a98:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8029a9c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8029aa0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8029aa4:	2500      	movs	r5, #0
 8029aa6:	ee07 1a90 	vmov	s15, r1
 8029aaa:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8029aae:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8029c48 <_dtoa_r+0x298>
 8029ab2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8029ab6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8029c50 <_dtoa_r+0x2a0>
 8029aba:	eea7 6b05 	vfma.f64	d6, d7, d5
 8029abe:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8029c58 <_dtoa_r+0x2a8>
 8029ac2:	ee07 3a90 	vmov	s15, r3
 8029ac6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8029aca:	eeb0 7b46 	vmov.f64	d7, d6
 8029ace:	eea4 7b05 	vfma.f64	d7, d4, d5
 8029ad2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8029ad6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8029ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029ade:	ee16 8a90 	vmov	r8, s13
 8029ae2:	d508      	bpl.n	8029af6 <_dtoa_r+0x146>
 8029ae4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8029ae8:	eeb4 6b47 	vcmp.f64	d6, d7
 8029aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029af0:	bf18      	it	ne
 8029af2:	f108 38ff 	addne.w	r8, r8, #4294967295
 8029af6:	f1b8 0f16 	cmp.w	r8, #22
 8029afa:	d82b      	bhi.n	8029b54 <_dtoa_r+0x1a4>
 8029afc:	495e      	ldr	r1, [pc, #376]	@ (8029c78 <_dtoa_r+0x2c8>)
 8029afe:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8029b02:	ed91 7b00 	vldr	d7, [r1]
 8029b06:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8029b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029b0e:	d501      	bpl.n	8029b14 <_dtoa_r+0x164>
 8029b10:	f108 38ff 	add.w	r8, r8, #4294967295
 8029b14:	2100      	movs	r1, #0
 8029b16:	e01e      	b.n	8029b56 <_dtoa_r+0x1a6>
 8029b18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8029b1a:	4413      	add	r3, r2
 8029b1c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8029b20:	2920      	cmp	r1, #32
 8029b22:	bfc1      	itttt	gt
 8029b24:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8029b28:	408e      	lslgt	r6, r1
 8029b2a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8029b2e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8029b32:	bfd6      	itet	le
 8029b34:	f1c1 0120 	rsble	r1, r1, #32
 8029b38:	4331      	orrgt	r1, r6
 8029b3a:	fa04 f101 	lslle.w	r1, r4, r1
 8029b3e:	ee07 1a90 	vmov	s15, r1
 8029b42:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8029b46:	3b01      	subs	r3, #1
 8029b48:	ee17 1a90 	vmov	r1, s15
 8029b4c:	2501      	movs	r5, #1
 8029b4e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8029b52:	e7a8      	b.n	8029aa6 <_dtoa_r+0xf6>
 8029b54:	2101      	movs	r1, #1
 8029b56:	1ad2      	subs	r2, r2, r3
 8029b58:	1e53      	subs	r3, r2, #1
 8029b5a:	9306      	str	r3, [sp, #24]
 8029b5c:	bf45      	ittet	mi
 8029b5e:	f1c2 0301 	rsbmi	r3, r2, #1
 8029b62:	9305      	strmi	r3, [sp, #20]
 8029b64:	2300      	movpl	r3, #0
 8029b66:	2300      	movmi	r3, #0
 8029b68:	bf4c      	ite	mi
 8029b6a:	9306      	strmi	r3, [sp, #24]
 8029b6c:	9305      	strpl	r3, [sp, #20]
 8029b6e:	f1b8 0f00 	cmp.w	r8, #0
 8029b72:	910c      	str	r1, [sp, #48]	@ 0x30
 8029b74:	db18      	blt.n	8029ba8 <_dtoa_r+0x1f8>
 8029b76:	9b06      	ldr	r3, [sp, #24]
 8029b78:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8029b7c:	4443      	add	r3, r8
 8029b7e:	9306      	str	r3, [sp, #24]
 8029b80:	2300      	movs	r3, #0
 8029b82:	9a07      	ldr	r2, [sp, #28]
 8029b84:	2a09      	cmp	r2, #9
 8029b86:	d849      	bhi.n	8029c1c <_dtoa_r+0x26c>
 8029b88:	2a05      	cmp	r2, #5
 8029b8a:	bfc4      	itt	gt
 8029b8c:	3a04      	subgt	r2, #4
 8029b8e:	9207      	strgt	r2, [sp, #28]
 8029b90:	9a07      	ldr	r2, [sp, #28]
 8029b92:	f1a2 0202 	sub.w	r2, r2, #2
 8029b96:	bfcc      	ite	gt
 8029b98:	2400      	movgt	r4, #0
 8029b9a:	2401      	movle	r4, #1
 8029b9c:	2a03      	cmp	r2, #3
 8029b9e:	d848      	bhi.n	8029c32 <_dtoa_r+0x282>
 8029ba0:	e8df f002 	tbb	[pc, r2]
 8029ba4:	3a2c2e0b 	.word	0x3a2c2e0b
 8029ba8:	9b05      	ldr	r3, [sp, #20]
 8029baa:	2200      	movs	r2, #0
 8029bac:	eba3 0308 	sub.w	r3, r3, r8
 8029bb0:	9305      	str	r3, [sp, #20]
 8029bb2:	920a      	str	r2, [sp, #40]	@ 0x28
 8029bb4:	f1c8 0300 	rsb	r3, r8, #0
 8029bb8:	e7e3      	b.n	8029b82 <_dtoa_r+0x1d2>
 8029bba:	2200      	movs	r2, #0
 8029bbc:	9208      	str	r2, [sp, #32]
 8029bbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8029bc0:	2a00      	cmp	r2, #0
 8029bc2:	dc39      	bgt.n	8029c38 <_dtoa_r+0x288>
 8029bc4:	f04f 0b01 	mov.w	fp, #1
 8029bc8:	46da      	mov	sl, fp
 8029bca:	465a      	mov	r2, fp
 8029bcc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8029bd0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8029bd4:	2100      	movs	r1, #0
 8029bd6:	2004      	movs	r0, #4
 8029bd8:	f100 0614 	add.w	r6, r0, #20
 8029bdc:	4296      	cmp	r6, r2
 8029bde:	d930      	bls.n	8029c42 <_dtoa_r+0x292>
 8029be0:	6079      	str	r1, [r7, #4]
 8029be2:	4648      	mov	r0, r9
 8029be4:	9304      	str	r3, [sp, #16]
 8029be6:	f000 fc83 	bl	802a4f0 <_Balloc>
 8029bea:	9b04      	ldr	r3, [sp, #16]
 8029bec:	4607      	mov	r7, r0
 8029bee:	2800      	cmp	r0, #0
 8029bf0:	d146      	bne.n	8029c80 <_dtoa_r+0x2d0>
 8029bf2:	4b22      	ldr	r3, [pc, #136]	@ (8029c7c <_dtoa_r+0x2cc>)
 8029bf4:	4602      	mov	r2, r0
 8029bf6:	f240 11af 	movw	r1, #431	@ 0x1af
 8029bfa:	e6f2      	b.n	80299e2 <_dtoa_r+0x32>
 8029bfc:	2201      	movs	r2, #1
 8029bfe:	e7dd      	b.n	8029bbc <_dtoa_r+0x20c>
 8029c00:	2200      	movs	r2, #0
 8029c02:	9208      	str	r2, [sp, #32]
 8029c04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8029c06:	eb08 0b02 	add.w	fp, r8, r2
 8029c0a:	f10b 0a01 	add.w	sl, fp, #1
 8029c0e:	4652      	mov	r2, sl
 8029c10:	2a01      	cmp	r2, #1
 8029c12:	bfb8      	it	lt
 8029c14:	2201      	movlt	r2, #1
 8029c16:	e7db      	b.n	8029bd0 <_dtoa_r+0x220>
 8029c18:	2201      	movs	r2, #1
 8029c1a:	e7f2      	b.n	8029c02 <_dtoa_r+0x252>
 8029c1c:	2401      	movs	r4, #1
 8029c1e:	2200      	movs	r2, #0
 8029c20:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8029c24:	f04f 3bff 	mov.w	fp, #4294967295
 8029c28:	2100      	movs	r1, #0
 8029c2a:	46da      	mov	sl, fp
 8029c2c:	2212      	movs	r2, #18
 8029c2e:	9109      	str	r1, [sp, #36]	@ 0x24
 8029c30:	e7ce      	b.n	8029bd0 <_dtoa_r+0x220>
 8029c32:	2201      	movs	r2, #1
 8029c34:	9208      	str	r2, [sp, #32]
 8029c36:	e7f5      	b.n	8029c24 <_dtoa_r+0x274>
 8029c38:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8029c3c:	46da      	mov	sl, fp
 8029c3e:	465a      	mov	r2, fp
 8029c40:	e7c6      	b.n	8029bd0 <_dtoa_r+0x220>
 8029c42:	3101      	adds	r1, #1
 8029c44:	0040      	lsls	r0, r0, #1
 8029c46:	e7c7      	b.n	8029bd8 <_dtoa_r+0x228>
 8029c48:	636f4361 	.word	0x636f4361
 8029c4c:	3fd287a7 	.word	0x3fd287a7
 8029c50:	8b60c8b3 	.word	0x8b60c8b3
 8029c54:	3fc68a28 	.word	0x3fc68a28
 8029c58:	509f79fb 	.word	0x509f79fb
 8029c5c:	3fd34413 	.word	0x3fd34413
 8029c60:	08031256 	.word	0x08031256
 8029c64:	0803126d 	.word	0x0803126d
 8029c68:	7ff00000 	.word	0x7ff00000
 8029c6c:	08031252 	.word	0x08031252
 8029c70:	08031226 	.word	0x08031226
 8029c74:	08031225 	.word	0x08031225
 8029c78:	08031368 	.word	0x08031368
 8029c7c:	080312c5 	.word	0x080312c5
 8029c80:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8029c84:	f1ba 0f0e 	cmp.w	sl, #14
 8029c88:	6010      	str	r0, [r2, #0]
 8029c8a:	d86f      	bhi.n	8029d6c <_dtoa_r+0x3bc>
 8029c8c:	2c00      	cmp	r4, #0
 8029c8e:	d06d      	beq.n	8029d6c <_dtoa_r+0x3bc>
 8029c90:	f1b8 0f00 	cmp.w	r8, #0
 8029c94:	f340 80c2 	ble.w	8029e1c <_dtoa_r+0x46c>
 8029c98:	4aca      	ldr	r2, [pc, #808]	@ (8029fc4 <_dtoa_r+0x614>)
 8029c9a:	f008 010f 	and.w	r1, r8, #15
 8029c9e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8029ca2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8029ca6:	ed92 7b00 	vldr	d7, [r2]
 8029caa:	ea4f 1128 	mov.w	r1, r8, asr #4
 8029cae:	f000 80a9 	beq.w	8029e04 <_dtoa_r+0x454>
 8029cb2:	4ac5      	ldr	r2, [pc, #788]	@ (8029fc8 <_dtoa_r+0x618>)
 8029cb4:	ed92 6b08 	vldr	d6, [r2, #32]
 8029cb8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8029cbc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8029cc0:	f001 010f 	and.w	r1, r1, #15
 8029cc4:	2203      	movs	r2, #3
 8029cc6:	48c0      	ldr	r0, [pc, #768]	@ (8029fc8 <_dtoa_r+0x618>)
 8029cc8:	2900      	cmp	r1, #0
 8029cca:	f040 809d 	bne.w	8029e08 <_dtoa_r+0x458>
 8029cce:	ed9d 6b02 	vldr	d6, [sp, #8]
 8029cd2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8029cd6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8029cda:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8029cdc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8029ce0:	2900      	cmp	r1, #0
 8029ce2:	f000 80c1 	beq.w	8029e68 <_dtoa_r+0x4b8>
 8029ce6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8029cea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8029cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029cf2:	f140 80b9 	bpl.w	8029e68 <_dtoa_r+0x4b8>
 8029cf6:	f1ba 0f00 	cmp.w	sl, #0
 8029cfa:	f000 80b5 	beq.w	8029e68 <_dtoa_r+0x4b8>
 8029cfe:	f1bb 0f00 	cmp.w	fp, #0
 8029d02:	dd31      	ble.n	8029d68 <_dtoa_r+0x3b8>
 8029d04:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8029d08:	ee27 7b06 	vmul.f64	d7, d7, d6
 8029d0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8029d10:	f108 31ff 	add.w	r1, r8, #4294967295
 8029d14:	9104      	str	r1, [sp, #16]
 8029d16:	3201      	adds	r2, #1
 8029d18:	465c      	mov	r4, fp
 8029d1a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8029d1e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8029d22:	ee07 2a90 	vmov	s15, r2
 8029d26:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8029d2a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8029d2e:	ee15 2a90 	vmov	r2, s11
 8029d32:	ec51 0b15 	vmov	r0, r1, d5
 8029d36:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8029d3a:	2c00      	cmp	r4, #0
 8029d3c:	f040 8098 	bne.w	8029e70 <_dtoa_r+0x4c0>
 8029d40:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8029d44:	ee36 6b47 	vsub.f64	d6, d6, d7
 8029d48:	ec41 0b17 	vmov	d7, r0, r1
 8029d4c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8029d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029d54:	f300 8261 	bgt.w	802a21a <_dtoa_r+0x86a>
 8029d58:	eeb1 7b47 	vneg.f64	d7, d7
 8029d5c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8029d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029d64:	f100 80f5 	bmi.w	8029f52 <_dtoa_r+0x5a2>
 8029d68:	ed8d 8b02 	vstr	d8, [sp, #8]
 8029d6c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029d6e:	2a00      	cmp	r2, #0
 8029d70:	f2c0 812c 	blt.w	8029fcc <_dtoa_r+0x61c>
 8029d74:	f1b8 0f0e 	cmp.w	r8, #14
 8029d78:	f300 8128 	bgt.w	8029fcc <_dtoa_r+0x61c>
 8029d7c:	4b91      	ldr	r3, [pc, #580]	@ (8029fc4 <_dtoa_r+0x614>)
 8029d7e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8029d82:	ed93 6b00 	vldr	d6, [r3]
 8029d86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029d88:	2b00      	cmp	r3, #0
 8029d8a:	da03      	bge.n	8029d94 <_dtoa_r+0x3e4>
 8029d8c:	f1ba 0f00 	cmp.w	sl, #0
 8029d90:	f340 80d2 	ble.w	8029f38 <_dtoa_r+0x588>
 8029d94:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8029d98:	ed9d 7b02 	vldr	d7, [sp, #8]
 8029d9c:	463e      	mov	r6, r7
 8029d9e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8029da2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8029da6:	ee15 3a10 	vmov	r3, s10
 8029daa:	3330      	adds	r3, #48	@ 0x30
 8029dac:	f806 3b01 	strb.w	r3, [r6], #1
 8029db0:	1bf3      	subs	r3, r6, r7
 8029db2:	459a      	cmp	sl, r3
 8029db4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8029db8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8029dbc:	f040 80f8 	bne.w	8029fb0 <_dtoa_r+0x600>
 8029dc0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8029dc4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8029dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029dcc:	f300 80dd 	bgt.w	8029f8a <_dtoa_r+0x5da>
 8029dd0:	eeb4 7b46 	vcmp.f64	d7, d6
 8029dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029dd8:	d104      	bne.n	8029de4 <_dtoa_r+0x434>
 8029dda:	ee15 3a10 	vmov	r3, s10
 8029dde:	07db      	lsls	r3, r3, #31
 8029de0:	f100 80d3 	bmi.w	8029f8a <_dtoa_r+0x5da>
 8029de4:	9901      	ldr	r1, [sp, #4]
 8029de6:	4648      	mov	r0, r9
 8029de8:	f000 fbc2 	bl	802a570 <_Bfree>
 8029dec:	2300      	movs	r3, #0
 8029dee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8029df0:	7033      	strb	r3, [r6, #0]
 8029df2:	f108 0301 	add.w	r3, r8, #1
 8029df6:	6013      	str	r3, [r2, #0]
 8029df8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8029dfa:	2b00      	cmp	r3, #0
 8029dfc:	f000 8304 	beq.w	802a408 <_dtoa_r+0xa58>
 8029e00:	601e      	str	r6, [r3, #0]
 8029e02:	e301      	b.n	802a408 <_dtoa_r+0xa58>
 8029e04:	2202      	movs	r2, #2
 8029e06:	e75e      	b.n	8029cc6 <_dtoa_r+0x316>
 8029e08:	07cc      	lsls	r4, r1, #31
 8029e0a:	d504      	bpl.n	8029e16 <_dtoa_r+0x466>
 8029e0c:	ed90 6b00 	vldr	d6, [r0]
 8029e10:	3201      	adds	r2, #1
 8029e12:	ee27 7b06 	vmul.f64	d7, d7, d6
 8029e16:	1049      	asrs	r1, r1, #1
 8029e18:	3008      	adds	r0, #8
 8029e1a:	e755      	b.n	8029cc8 <_dtoa_r+0x318>
 8029e1c:	d022      	beq.n	8029e64 <_dtoa_r+0x4b4>
 8029e1e:	f1c8 0100 	rsb	r1, r8, #0
 8029e22:	4a68      	ldr	r2, [pc, #416]	@ (8029fc4 <_dtoa_r+0x614>)
 8029e24:	f001 000f 	and.w	r0, r1, #15
 8029e28:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8029e2c:	ed92 7b00 	vldr	d7, [r2]
 8029e30:	ee28 7b07 	vmul.f64	d7, d8, d7
 8029e34:	ed8d 7b02 	vstr	d7, [sp, #8]
 8029e38:	4863      	ldr	r0, [pc, #396]	@ (8029fc8 <_dtoa_r+0x618>)
 8029e3a:	1109      	asrs	r1, r1, #4
 8029e3c:	2400      	movs	r4, #0
 8029e3e:	2202      	movs	r2, #2
 8029e40:	b929      	cbnz	r1, 8029e4e <_dtoa_r+0x49e>
 8029e42:	2c00      	cmp	r4, #0
 8029e44:	f43f af49 	beq.w	8029cda <_dtoa_r+0x32a>
 8029e48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8029e4c:	e745      	b.n	8029cda <_dtoa_r+0x32a>
 8029e4e:	07ce      	lsls	r6, r1, #31
 8029e50:	d505      	bpl.n	8029e5e <_dtoa_r+0x4ae>
 8029e52:	ed90 6b00 	vldr	d6, [r0]
 8029e56:	3201      	adds	r2, #1
 8029e58:	2401      	movs	r4, #1
 8029e5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8029e5e:	1049      	asrs	r1, r1, #1
 8029e60:	3008      	adds	r0, #8
 8029e62:	e7ed      	b.n	8029e40 <_dtoa_r+0x490>
 8029e64:	2202      	movs	r2, #2
 8029e66:	e738      	b.n	8029cda <_dtoa_r+0x32a>
 8029e68:	f8cd 8010 	str.w	r8, [sp, #16]
 8029e6c:	4654      	mov	r4, sl
 8029e6e:	e754      	b.n	8029d1a <_dtoa_r+0x36a>
 8029e70:	4a54      	ldr	r2, [pc, #336]	@ (8029fc4 <_dtoa_r+0x614>)
 8029e72:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8029e76:	ed12 4b02 	vldr	d4, [r2, #-8]
 8029e7a:	9a08      	ldr	r2, [sp, #32]
 8029e7c:	ec41 0b17 	vmov	d7, r0, r1
 8029e80:	443c      	add	r4, r7
 8029e82:	b34a      	cbz	r2, 8029ed8 <_dtoa_r+0x528>
 8029e84:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8029e88:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8029e8c:	463e      	mov	r6, r7
 8029e8e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8029e92:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8029e96:	ee35 7b47 	vsub.f64	d7, d5, d7
 8029e9a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8029e9e:	ee14 2a90 	vmov	r2, s9
 8029ea2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8029ea6:	3230      	adds	r2, #48	@ 0x30
 8029ea8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8029eac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8029eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029eb4:	f806 2b01 	strb.w	r2, [r6], #1
 8029eb8:	d438      	bmi.n	8029f2c <_dtoa_r+0x57c>
 8029eba:	ee32 5b46 	vsub.f64	d5, d2, d6
 8029ebe:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8029ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029ec6:	d462      	bmi.n	8029f8e <_dtoa_r+0x5de>
 8029ec8:	42a6      	cmp	r6, r4
 8029eca:	f43f af4d 	beq.w	8029d68 <_dtoa_r+0x3b8>
 8029ece:	ee27 7b03 	vmul.f64	d7, d7, d3
 8029ed2:	ee26 6b03 	vmul.f64	d6, d6, d3
 8029ed6:	e7e0      	b.n	8029e9a <_dtoa_r+0x4ea>
 8029ed8:	4621      	mov	r1, r4
 8029eda:	463e      	mov	r6, r7
 8029edc:	ee27 7b04 	vmul.f64	d7, d7, d4
 8029ee0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8029ee4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8029ee8:	ee14 2a90 	vmov	r2, s9
 8029eec:	3230      	adds	r2, #48	@ 0x30
 8029eee:	f806 2b01 	strb.w	r2, [r6], #1
 8029ef2:	42a6      	cmp	r6, r4
 8029ef4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8029ef8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8029efc:	d119      	bne.n	8029f32 <_dtoa_r+0x582>
 8029efe:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8029f02:	ee37 4b05 	vadd.f64	d4, d7, d5
 8029f06:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8029f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029f0e:	dc3e      	bgt.n	8029f8e <_dtoa_r+0x5de>
 8029f10:	ee35 5b47 	vsub.f64	d5, d5, d7
 8029f14:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8029f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029f1c:	f57f af24 	bpl.w	8029d68 <_dtoa_r+0x3b8>
 8029f20:	460e      	mov	r6, r1
 8029f22:	3901      	subs	r1, #1
 8029f24:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8029f28:	2b30      	cmp	r3, #48	@ 0x30
 8029f2a:	d0f9      	beq.n	8029f20 <_dtoa_r+0x570>
 8029f2c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8029f30:	e758      	b.n	8029de4 <_dtoa_r+0x434>
 8029f32:	ee26 6b03 	vmul.f64	d6, d6, d3
 8029f36:	e7d5      	b.n	8029ee4 <_dtoa_r+0x534>
 8029f38:	d10b      	bne.n	8029f52 <_dtoa_r+0x5a2>
 8029f3a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8029f3e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8029f42:	ed9d 7b02 	vldr	d7, [sp, #8]
 8029f46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8029f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029f4e:	f2c0 8161 	blt.w	802a214 <_dtoa_r+0x864>
 8029f52:	2400      	movs	r4, #0
 8029f54:	4625      	mov	r5, r4
 8029f56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029f58:	43db      	mvns	r3, r3
 8029f5a:	9304      	str	r3, [sp, #16]
 8029f5c:	463e      	mov	r6, r7
 8029f5e:	f04f 0800 	mov.w	r8, #0
 8029f62:	4621      	mov	r1, r4
 8029f64:	4648      	mov	r0, r9
 8029f66:	f000 fb03 	bl	802a570 <_Bfree>
 8029f6a:	2d00      	cmp	r5, #0
 8029f6c:	d0de      	beq.n	8029f2c <_dtoa_r+0x57c>
 8029f6e:	f1b8 0f00 	cmp.w	r8, #0
 8029f72:	d005      	beq.n	8029f80 <_dtoa_r+0x5d0>
 8029f74:	45a8      	cmp	r8, r5
 8029f76:	d003      	beq.n	8029f80 <_dtoa_r+0x5d0>
 8029f78:	4641      	mov	r1, r8
 8029f7a:	4648      	mov	r0, r9
 8029f7c:	f000 faf8 	bl	802a570 <_Bfree>
 8029f80:	4629      	mov	r1, r5
 8029f82:	4648      	mov	r0, r9
 8029f84:	f000 faf4 	bl	802a570 <_Bfree>
 8029f88:	e7d0      	b.n	8029f2c <_dtoa_r+0x57c>
 8029f8a:	f8cd 8010 	str.w	r8, [sp, #16]
 8029f8e:	4633      	mov	r3, r6
 8029f90:	461e      	mov	r6, r3
 8029f92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8029f96:	2a39      	cmp	r2, #57	@ 0x39
 8029f98:	d106      	bne.n	8029fa8 <_dtoa_r+0x5f8>
 8029f9a:	429f      	cmp	r7, r3
 8029f9c:	d1f8      	bne.n	8029f90 <_dtoa_r+0x5e0>
 8029f9e:	9a04      	ldr	r2, [sp, #16]
 8029fa0:	3201      	adds	r2, #1
 8029fa2:	9204      	str	r2, [sp, #16]
 8029fa4:	2230      	movs	r2, #48	@ 0x30
 8029fa6:	703a      	strb	r2, [r7, #0]
 8029fa8:	781a      	ldrb	r2, [r3, #0]
 8029faa:	3201      	adds	r2, #1
 8029fac:	701a      	strb	r2, [r3, #0]
 8029fae:	e7bd      	b.n	8029f2c <_dtoa_r+0x57c>
 8029fb0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8029fb4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8029fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029fbc:	f47f aeef 	bne.w	8029d9e <_dtoa_r+0x3ee>
 8029fc0:	e710      	b.n	8029de4 <_dtoa_r+0x434>
 8029fc2:	bf00      	nop
 8029fc4:	08031368 	.word	0x08031368
 8029fc8:	08031340 	.word	0x08031340
 8029fcc:	9908      	ldr	r1, [sp, #32]
 8029fce:	2900      	cmp	r1, #0
 8029fd0:	f000 80e3 	beq.w	802a19a <_dtoa_r+0x7ea>
 8029fd4:	9907      	ldr	r1, [sp, #28]
 8029fd6:	2901      	cmp	r1, #1
 8029fd8:	f300 80c8 	bgt.w	802a16c <_dtoa_r+0x7bc>
 8029fdc:	2d00      	cmp	r5, #0
 8029fde:	f000 80c1 	beq.w	802a164 <_dtoa_r+0x7b4>
 8029fe2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8029fe6:	9e05      	ldr	r6, [sp, #20]
 8029fe8:	461c      	mov	r4, r3
 8029fea:	9304      	str	r3, [sp, #16]
 8029fec:	9b05      	ldr	r3, [sp, #20]
 8029fee:	4413      	add	r3, r2
 8029ff0:	9305      	str	r3, [sp, #20]
 8029ff2:	9b06      	ldr	r3, [sp, #24]
 8029ff4:	2101      	movs	r1, #1
 8029ff6:	4413      	add	r3, r2
 8029ff8:	4648      	mov	r0, r9
 8029ffa:	9306      	str	r3, [sp, #24]
 8029ffc:	f000 fb6c 	bl	802a6d8 <__i2b>
 802a000:	9b04      	ldr	r3, [sp, #16]
 802a002:	4605      	mov	r5, r0
 802a004:	b166      	cbz	r6, 802a020 <_dtoa_r+0x670>
 802a006:	9a06      	ldr	r2, [sp, #24]
 802a008:	2a00      	cmp	r2, #0
 802a00a:	dd09      	ble.n	802a020 <_dtoa_r+0x670>
 802a00c:	42b2      	cmp	r2, r6
 802a00e:	9905      	ldr	r1, [sp, #20]
 802a010:	bfa8      	it	ge
 802a012:	4632      	movge	r2, r6
 802a014:	1a89      	subs	r1, r1, r2
 802a016:	9105      	str	r1, [sp, #20]
 802a018:	9906      	ldr	r1, [sp, #24]
 802a01a:	1ab6      	subs	r6, r6, r2
 802a01c:	1a8a      	subs	r2, r1, r2
 802a01e:	9206      	str	r2, [sp, #24]
 802a020:	b1fb      	cbz	r3, 802a062 <_dtoa_r+0x6b2>
 802a022:	9a08      	ldr	r2, [sp, #32]
 802a024:	2a00      	cmp	r2, #0
 802a026:	f000 80bc 	beq.w	802a1a2 <_dtoa_r+0x7f2>
 802a02a:	b19c      	cbz	r4, 802a054 <_dtoa_r+0x6a4>
 802a02c:	4629      	mov	r1, r5
 802a02e:	4622      	mov	r2, r4
 802a030:	4648      	mov	r0, r9
 802a032:	930b      	str	r3, [sp, #44]	@ 0x2c
 802a034:	f000 fc10 	bl	802a858 <__pow5mult>
 802a038:	9a01      	ldr	r2, [sp, #4]
 802a03a:	4601      	mov	r1, r0
 802a03c:	4605      	mov	r5, r0
 802a03e:	4648      	mov	r0, r9
 802a040:	f000 fb60 	bl	802a704 <__multiply>
 802a044:	9901      	ldr	r1, [sp, #4]
 802a046:	9004      	str	r0, [sp, #16]
 802a048:	4648      	mov	r0, r9
 802a04a:	f000 fa91 	bl	802a570 <_Bfree>
 802a04e:	9a04      	ldr	r2, [sp, #16]
 802a050:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a052:	9201      	str	r2, [sp, #4]
 802a054:	1b1a      	subs	r2, r3, r4
 802a056:	d004      	beq.n	802a062 <_dtoa_r+0x6b2>
 802a058:	9901      	ldr	r1, [sp, #4]
 802a05a:	4648      	mov	r0, r9
 802a05c:	f000 fbfc 	bl	802a858 <__pow5mult>
 802a060:	9001      	str	r0, [sp, #4]
 802a062:	2101      	movs	r1, #1
 802a064:	4648      	mov	r0, r9
 802a066:	f000 fb37 	bl	802a6d8 <__i2b>
 802a06a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a06c:	4604      	mov	r4, r0
 802a06e:	2b00      	cmp	r3, #0
 802a070:	f000 81d0 	beq.w	802a414 <_dtoa_r+0xa64>
 802a074:	461a      	mov	r2, r3
 802a076:	4601      	mov	r1, r0
 802a078:	4648      	mov	r0, r9
 802a07a:	f000 fbed 	bl	802a858 <__pow5mult>
 802a07e:	9b07      	ldr	r3, [sp, #28]
 802a080:	2b01      	cmp	r3, #1
 802a082:	4604      	mov	r4, r0
 802a084:	f300 8095 	bgt.w	802a1b2 <_dtoa_r+0x802>
 802a088:	9b02      	ldr	r3, [sp, #8]
 802a08a:	2b00      	cmp	r3, #0
 802a08c:	f040 808b 	bne.w	802a1a6 <_dtoa_r+0x7f6>
 802a090:	9b03      	ldr	r3, [sp, #12]
 802a092:	f3c3 0213 	ubfx	r2, r3, #0, #20
 802a096:	2a00      	cmp	r2, #0
 802a098:	f040 8087 	bne.w	802a1aa <_dtoa_r+0x7fa>
 802a09c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 802a0a0:	0d12      	lsrs	r2, r2, #20
 802a0a2:	0512      	lsls	r2, r2, #20
 802a0a4:	2a00      	cmp	r2, #0
 802a0a6:	f000 8082 	beq.w	802a1ae <_dtoa_r+0x7fe>
 802a0aa:	9b05      	ldr	r3, [sp, #20]
 802a0ac:	3301      	adds	r3, #1
 802a0ae:	9305      	str	r3, [sp, #20]
 802a0b0:	9b06      	ldr	r3, [sp, #24]
 802a0b2:	3301      	adds	r3, #1
 802a0b4:	9306      	str	r3, [sp, #24]
 802a0b6:	2301      	movs	r3, #1
 802a0b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 802a0ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a0bc:	2b00      	cmp	r3, #0
 802a0be:	f000 81af 	beq.w	802a420 <_dtoa_r+0xa70>
 802a0c2:	6922      	ldr	r2, [r4, #16]
 802a0c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 802a0c8:	6910      	ldr	r0, [r2, #16]
 802a0ca:	f000 fab9 	bl	802a640 <__hi0bits>
 802a0ce:	f1c0 0020 	rsb	r0, r0, #32
 802a0d2:	9b06      	ldr	r3, [sp, #24]
 802a0d4:	4418      	add	r0, r3
 802a0d6:	f010 001f 	ands.w	r0, r0, #31
 802a0da:	d076      	beq.n	802a1ca <_dtoa_r+0x81a>
 802a0dc:	f1c0 0220 	rsb	r2, r0, #32
 802a0e0:	2a04      	cmp	r2, #4
 802a0e2:	dd69      	ble.n	802a1b8 <_dtoa_r+0x808>
 802a0e4:	9b05      	ldr	r3, [sp, #20]
 802a0e6:	f1c0 001c 	rsb	r0, r0, #28
 802a0ea:	4403      	add	r3, r0
 802a0ec:	9305      	str	r3, [sp, #20]
 802a0ee:	9b06      	ldr	r3, [sp, #24]
 802a0f0:	4406      	add	r6, r0
 802a0f2:	4403      	add	r3, r0
 802a0f4:	9306      	str	r3, [sp, #24]
 802a0f6:	9b05      	ldr	r3, [sp, #20]
 802a0f8:	2b00      	cmp	r3, #0
 802a0fa:	dd05      	ble.n	802a108 <_dtoa_r+0x758>
 802a0fc:	9901      	ldr	r1, [sp, #4]
 802a0fe:	461a      	mov	r2, r3
 802a100:	4648      	mov	r0, r9
 802a102:	f000 fc03 	bl	802a90c <__lshift>
 802a106:	9001      	str	r0, [sp, #4]
 802a108:	9b06      	ldr	r3, [sp, #24]
 802a10a:	2b00      	cmp	r3, #0
 802a10c:	dd05      	ble.n	802a11a <_dtoa_r+0x76a>
 802a10e:	4621      	mov	r1, r4
 802a110:	461a      	mov	r2, r3
 802a112:	4648      	mov	r0, r9
 802a114:	f000 fbfa 	bl	802a90c <__lshift>
 802a118:	4604      	mov	r4, r0
 802a11a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a11c:	2b00      	cmp	r3, #0
 802a11e:	d056      	beq.n	802a1ce <_dtoa_r+0x81e>
 802a120:	9801      	ldr	r0, [sp, #4]
 802a122:	4621      	mov	r1, r4
 802a124:	f000 fc5e 	bl	802a9e4 <__mcmp>
 802a128:	2800      	cmp	r0, #0
 802a12a:	da50      	bge.n	802a1ce <_dtoa_r+0x81e>
 802a12c:	f108 33ff 	add.w	r3, r8, #4294967295
 802a130:	9304      	str	r3, [sp, #16]
 802a132:	9901      	ldr	r1, [sp, #4]
 802a134:	2300      	movs	r3, #0
 802a136:	220a      	movs	r2, #10
 802a138:	4648      	mov	r0, r9
 802a13a:	f000 fa3b 	bl	802a5b4 <__multadd>
 802a13e:	9b08      	ldr	r3, [sp, #32]
 802a140:	9001      	str	r0, [sp, #4]
 802a142:	2b00      	cmp	r3, #0
 802a144:	f000 816e 	beq.w	802a424 <_dtoa_r+0xa74>
 802a148:	4629      	mov	r1, r5
 802a14a:	2300      	movs	r3, #0
 802a14c:	220a      	movs	r2, #10
 802a14e:	4648      	mov	r0, r9
 802a150:	f000 fa30 	bl	802a5b4 <__multadd>
 802a154:	f1bb 0f00 	cmp.w	fp, #0
 802a158:	4605      	mov	r5, r0
 802a15a:	dc64      	bgt.n	802a226 <_dtoa_r+0x876>
 802a15c:	9b07      	ldr	r3, [sp, #28]
 802a15e:	2b02      	cmp	r3, #2
 802a160:	dc3e      	bgt.n	802a1e0 <_dtoa_r+0x830>
 802a162:	e060      	b.n	802a226 <_dtoa_r+0x876>
 802a164:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802a166:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 802a16a:	e73c      	b.n	8029fe6 <_dtoa_r+0x636>
 802a16c:	f10a 34ff 	add.w	r4, sl, #4294967295
 802a170:	42a3      	cmp	r3, r4
 802a172:	bfbf      	itttt	lt
 802a174:	1ae2      	sublt	r2, r4, r3
 802a176:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 802a178:	189b      	addlt	r3, r3, r2
 802a17a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 802a17c:	bfae      	itee	ge
 802a17e:	1b1c      	subge	r4, r3, r4
 802a180:	4623      	movlt	r3, r4
 802a182:	2400      	movlt	r4, #0
 802a184:	f1ba 0f00 	cmp.w	sl, #0
 802a188:	bfb5      	itete	lt
 802a18a:	9a05      	ldrlt	r2, [sp, #20]
 802a18c:	9e05      	ldrge	r6, [sp, #20]
 802a18e:	eba2 060a 	sublt.w	r6, r2, sl
 802a192:	4652      	movge	r2, sl
 802a194:	bfb8      	it	lt
 802a196:	2200      	movlt	r2, #0
 802a198:	e727      	b.n	8029fea <_dtoa_r+0x63a>
 802a19a:	9e05      	ldr	r6, [sp, #20]
 802a19c:	9d08      	ldr	r5, [sp, #32]
 802a19e:	461c      	mov	r4, r3
 802a1a0:	e730      	b.n	802a004 <_dtoa_r+0x654>
 802a1a2:	461a      	mov	r2, r3
 802a1a4:	e758      	b.n	802a058 <_dtoa_r+0x6a8>
 802a1a6:	2300      	movs	r3, #0
 802a1a8:	e786      	b.n	802a0b8 <_dtoa_r+0x708>
 802a1aa:	9b02      	ldr	r3, [sp, #8]
 802a1ac:	e784      	b.n	802a0b8 <_dtoa_r+0x708>
 802a1ae:	920b      	str	r2, [sp, #44]	@ 0x2c
 802a1b0:	e783      	b.n	802a0ba <_dtoa_r+0x70a>
 802a1b2:	2300      	movs	r3, #0
 802a1b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 802a1b6:	e784      	b.n	802a0c2 <_dtoa_r+0x712>
 802a1b8:	d09d      	beq.n	802a0f6 <_dtoa_r+0x746>
 802a1ba:	9b05      	ldr	r3, [sp, #20]
 802a1bc:	321c      	adds	r2, #28
 802a1be:	4413      	add	r3, r2
 802a1c0:	9305      	str	r3, [sp, #20]
 802a1c2:	9b06      	ldr	r3, [sp, #24]
 802a1c4:	4416      	add	r6, r2
 802a1c6:	4413      	add	r3, r2
 802a1c8:	e794      	b.n	802a0f4 <_dtoa_r+0x744>
 802a1ca:	4602      	mov	r2, r0
 802a1cc:	e7f5      	b.n	802a1ba <_dtoa_r+0x80a>
 802a1ce:	f1ba 0f00 	cmp.w	sl, #0
 802a1d2:	f8cd 8010 	str.w	r8, [sp, #16]
 802a1d6:	46d3      	mov	fp, sl
 802a1d8:	dc21      	bgt.n	802a21e <_dtoa_r+0x86e>
 802a1da:	9b07      	ldr	r3, [sp, #28]
 802a1dc:	2b02      	cmp	r3, #2
 802a1de:	dd1e      	ble.n	802a21e <_dtoa_r+0x86e>
 802a1e0:	f1bb 0f00 	cmp.w	fp, #0
 802a1e4:	f47f aeb7 	bne.w	8029f56 <_dtoa_r+0x5a6>
 802a1e8:	4621      	mov	r1, r4
 802a1ea:	465b      	mov	r3, fp
 802a1ec:	2205      	movs	r2, #5
 802a1ee:	4648      	mov	r0, r9
 802a1f0:	f000 f9e0 	bl	802a5b4 <__multadd>
 802a1f4:	4601      	mov	r1, r0
 802a1f6:	4604      	mov	r4, r0
 802a1f8:	9801      	ldr	r0, [sp, #4]
 802a1fa:	f000 fbf3 	bl	802a9e4 <__mcmp>
 802a1fe:	2800      	cmp	r0, #0
 802a200:	f77f aea9 	ble.w	8029f56 <_dtoa_r+0x5a6>
 802a204:	463e      	mov	r6, r7
 802a206:	2331      	movs	r3, #49	@ 0x31
 802a208:	f806 3b01 	strb.w	r3, [r6], #1
 802a20c:	9b04      	ldr	r3, [sp, #16]
 802a20e:	3301      	adds	r3, #1
 802a210:	9304      	str	r3, [sp, #16]
 802a212:	e6a4      	b.n	8029f5e <_dtoa_r+0x5ae>
 802a214:	f8cd 8010 	str.w	r8, [sp, #16]
 802a218:	4654      	mov	r4, sl
 802a21a:	4625      	mov	r5, r4
 802a21c:	e7f2      	b.n	802a204 <_dtoa_r+0x854>
 802a21e:	9b08      	ldr	r3, [sp, #32]
 802a220:	2b00      	cmp	r3, #0
 802a222:	f000 8103 	beq.w	802a42c <_dtoa_r+0xa7c>
 802a226:	2e00      	cmp	r6, #0
 802a228:	dd05      	ble.n	802a236 <_dtoa_r+0x886>
 802a22a:	4629      	mov	r1, r5
 802a22c:	4632      	mov	r2, r6
 802a22e:	4648      	mov	r0, r9
 802a230:	f000 fb6c 	bl	802a90c <__lshift>
 802a234:	4605      	mov	r5, r0
 802a236:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a238:	2b00      	cmp	r3, #0
 802a23a:	d058      	beq.n	802a2ee <_dtoa_r+0x93e>
 802a23c:	6869      	ldr	r1, [r5, #4]
 802a23e:	4648      	mov	r0, r9
 802a240:	f000 f956 	bl	802a4f0 <_Balloc>
 802a244:	4606      	mov	r6, r0
 802a246:	b928      	cbnz	r0, 802a254 <_dtoa_r+0x8a4>
 802a248:	4b82      	ldr	r3, [pc, #520]	@ (802a454 <_dtoa_r+0xaa4>)
 802a24a:	4602      	mov	r2, r0
 802a24c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 802a250:	f7ff bbc7 	b.w	80299e2 <_dtoa_r+0x32>
 802a254:	692a      	ldr	r2, [r5, #16]
 802a256:	3202      	adds	r2, #2
 802a258:	0092      	lsls	r2, r2, #2
 802a25a:	f105 010c 	add.w	r1, r5, #12
 802a25e:	300c      	adds	r0, #12
 802a260:	f7ff fb0f 	bl	8029882 <memcpy>
 802a264:	2201      	movs	r2, #1
 802a266:	4631      	mov	r1, r6
 802a268:	4648      	mov	r0, r9
 802a26a:	f000 fb4f 	bl	802a90c <__lshift>
 802a26e:	1c7b      	adds	r3, r7, #1
 802a270:	9305      	str	r3, [sp, #20]
 802a272:	eb07 030b 	add.w	r3, r7, fp
 802a276:	9309      	str	r3, [sp, #36]	@ 0x24
 802a278:	9b02      	ldr	r3, [sp, #8]
 802a27a:	f003 0301 	and.w	r3, r3, #1
 802a27e:	46a8      	mov	r8, r5
 802a280:	9308      	str	r3, [sp, #32]
 802a282:	4605      	mov	r5, r0
 802a284:	9b05      	ldr	r3, [sp, #20]
 802a286:	9801      	ldr	r0, [sp, #4]
 802a288:	4621      	mov	r1, r4
 802a28a:	f103 3bff 	add.w	fp, r3, #4294967295
 802a28e:	f7ff fb06 	bl	802989e <quorem>
 802a292:	4641      	mov	r1, r8
 802a294:	9002      	str	r0, [sp, #8]
 802a296:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 802a29a:	9801      	ldr	r0, [sp, #4]
 802a29c:	f000 fba2 	bl	802a9e4 <__mcmp>
 802a2a0:	462a      	mov	r2, r5
 802a2a2:	9006      	str	r0, [sp, #24]
 802a2a4:	4621      	mov	r1, r4
 802a2a6:	4648      	mov	r0, r9
 802a2a8:	f000 fbb8 	bl	802aa1c <__mdiff>
 802a2ac:	68c2      	ldr	r2, [r0, #12]
 802a2ae:	4606      	mov	r6, r0
 802a2b0:	b9fa      	cbnz	r2, 802a2f2 <_dtoa_r+0x942>
 802a2b2:	4601      	mov	r1, r0
 802a2b4:	9801      	ldr	r0, [sp, #4]
 802a2b6:	f000 fb95 	bl	802a9e4 <__mcmp>
 802a2ba:	4602      	mov	r2, r0
 802a2bc:	4631      	mov	r1, r6
 802a2be:	4648      	mov	r0, r9
 802a2c0:	920a      	str	r2, [sp, #40]	@ 0x28
 802a2c2:	f000 f955 	bl	802a570 <_Bfree>
 802a2c6:	9b07      	ldr	r3, [sp, #28]
 802a2c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802a2ca:	9e05      	ldr	r6, [sp, #20]
 802a2cc:	ea43 0102 	orr.w	r1, r3, r2
 802a2d0:	9b08      	ldr	r3, [sp, #32]
 802a2d2:	4319      	orrs	r1, r3
 802a2d4:	d10f      	bne.n	802a2f6 <_dtoa_r+0x946>
 802a2d6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 802a2da:	d028      	beq.n	802a32e <_dtoa_r+0x97e>
 802a2dc:	9b06      	ldr	r3, [sp, #24]
 802a2de:	2b00      	cmp	r3, #0
 802a2e0:	dd02      	ble.n	802a2e8 <_dtoa_r+0x938>
 802a2e2:	9b02      	ldr	r3, [sp, #8]
 802a2e4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 802a2e8:	f88b a000 	strb.w	sl, [fp]
 802a2ec:	e639      	b.n	8029f62 <_dtoa_r+0x5b2>
 802a2ee:	4628      	mov	r0, r5
 802a2f0:	e7bd      	b.n	802a26e <_dtoa_r+0x8be>
 802a2f2:	2201      	movs	r2, #1
 802a2f4:	e7e2      	b.n	802a2bc <_dtoa_r+0x90c>
 802a2f6:	9b06      	ldr	r3, [sp, #24]
 802a2f8:	2b00      	cmp	r3, #0
 802a2fa:	db04      	blt.n	802a306 <_dtoa_r+0x956>
 802a2fc:	9907      	ldr	r1, [sp, #28]
 802a2fe:	430b      	orrs	r3, r1
 802a300:	9908      	ldr	r1, [sp, #32]
 802a302:	430b      	orrs	r3, r1
 802a304:	d120      	bne.n	802a348 <_dtoa_r+0x998>
 802a306:	2a00      	cmp	r2, #0
 802a308:	ddee      	ble.n	802a2e8 <_dtoa_r+0x938>
 802a30a:	9901      	ldr	r1, [sp, #4]
 802a30c:	2201      	movs	r2, #1
 802a30e:	4648      	mov	r0, r9
 802a310:	f000 fafc 	bl	802a90c <__lshift>
 802a314:	4621      	mov	r1, r4
 802a316:	9001      	str	r0, [sp, #4]
 802a318:	f000 fb64 	bl	802a9e4 <__mcmp>
 802a31c:	2800      	cmp	r0, #0
 802a31e:	dc03      	bgt.n	802a328 <_dtoa_r+0x978>
 802a320:	d1e2      	bne.n	802a2e8 <_dtoa_r+0x938>
 802a322:	f01a 0f01 	tst.w	sl, #1
 802a326:	d0df      	beq.n	802a2e8 <_dtoa_r+0x938>
 802a328:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 802a32c:	d1d9      	bne.n	802a2e2 <_dtoa_r+0x932>
 802a32e:	2339      	movs	r3, #57	@ 0x39
 802a330:	f88b 3000 	strb.w	r3, [fp]
 802a334:	4633      	mov	r3, r6
 802a336:	461e      	mov	r6, r3
 802a338:	3b01      	subs	r3, #1
 802a33a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 802a33e:	2a39      	cmp	r2, #57	@ 0x39
 802a340:	d053      	beq.n	802a3ea <_dtoa_r+0xa3a>
 802a342:	3201      	adds	r2, #1
 802a344:	701a      	strb	r2, [r3, #0]
 802a346:	e60c      	b.n	8029f62 <_dtoa_r+0x5b2>
 802a348:	2a00      	cmp	r2, #0
 802a34a:	dd07      	ble.n	802a35c <_dtoa_r+0x9ac>
 802a34c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 802a350:	d0ed      	beq.n	802a32e <_dtoa_r+0x97e>
 802a352:	f10a 0301 	add.w	r3, sl, #1
 802a356:	f88b 3000 	strb.w	r3, [fp]
 802a35a:	e602      	b.n	8029f62 <_dtoa_r+0x5b2>
 802a35c:	9b05      	ldr	r3, [sp, #20]
 802a35e:	9a05      	ldr	r2, [sp, #20]
 802a360:	f803 ac01 	strb.w	sl, [r3, #-1]
 802a364:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a366:	4293      	cmp	r3, r2
 802a368:	d029      	beq.n	802a3be <_dtoa_r+0xa0e>
 802a36a:	9901      	ldr	r1, [sp, #4]
 802a36c:	2300      	movs	r3, #0
 802a36e:	220a      	movs	r2, #10
 802a370:	4648      	mov	r0, r9
 802a372:	f000 f91f 	bl	802a5b4 <__multadd>
 802a376:	45a8      	cmp	r8, r5
 802a378:	9001      	str	r0, [sp, #4]
 802a37a:	f04f 0300 	mov.w	r3, #0
 802a37e:	f04f 020a 	mov.w	r2, #10
 802a382:	4641      	mov	r1, r8
 802a384:	4648      	mov	r0, r9
 802a386:	d107      	bne.n	802a398 <_dtoa_r+0x9e8>
 802a388:	f000 f914 	bl	802a5b4 <__multadd>
 802a38c:	4680      	mov	r8, r0
 802a38e:	4605      	mov	r5, r0
 802a390:	9b05      	ldr	r3, [sp, #20]
 802a392:	3301      	adds	r3, #1
 802a394:	9305      	str	r3, [sp, #20]
 802a396:	e775      	b.n	802a284 <_dtoa_r+0x8d4>
 802a398:	f000 f90c 	bl	802a5b4 <__multadd>
 802a39c:	4629      	mov	r1, r5
 802a39e:	4680      	mov	r8, r0
 802a3a0:	2300      	movs	r3, #0
 802a3a2:	220a      	movs	r2, #10
 802a3a4:	4648      	mov	r0, r9
 802a3a6:	f000 f905 	bl	802a5b4 <__multadd>
 802a3aa:	4605      	mov	r5, r0
 802a3ac:	e7f0      	b.n	802a390 <_dtoa_r+0x9e0>
 802a3ae:	f1bb 0f00 	cmp.w	fp, #0
 802a3b2:	bfcc      	ite	gt
 802a3b4:	465e      	movgt	r6, fp
 802a3b6:	2601      	movle	r6, #1
 802a3b8:	443e      	add	r6, r7
 802a3ba:	f04f 0800 	mov.w	r8, #0
 802a3be:	9901      	ldr	r1, [sp, #4]
 802a3c0:	2201      	movs	r2, #1
 802a3c2:	4648      	mov	r0, r9
 802a3c4:	f000 faa2 	bl	802a90c <__lshift>
 802a3c8:	4621      	mov	r1, r4
 802a3ca:	9001      	str	r0, [sp, #4]
 802a3cc:	f000 fb0a 	bl	802a9e4 <__mcmp>
 802a3d0:	2800      	cmp	r0, #0
 802a3d2:	dcaf      	bgt.n	802a334 <_dtoa_r+0x984>
 802a3d4:	d102      	bne.n	802a3dc <_dtoa_r+0xa2c>
 802a3d6:	f01a 0f01 	tst.w	sl, #1
 802a3da:	d1ab      	bne.n	802a334 <_dtoa_r+0x984>
 802a3dc:	4633      	mov	r3, r6
 802a3de:	461e      	mov	r6, r3
 802a3e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802a3e4:	2a30      	cmp	r2, #48	@ 0x30
 802a3e6:	d0fa      	beq.n	802a3de <_dtoa_r+0xa2e>
 802a3e8:	e5bb      	b.n	8029f62 <_dtoa_r+0x5b2>
 802a3ea:	429f      	cmp	r7, r3
 802a3ec:	d1a3      	bne.n	802a336 <_dtoa_r+0x986>
 802a3ee:	9b04      	ldr	r3, [sp, #16]
 802a3f0:	3301      	adds	r3, #1
 802a3f2:	9304      	str	r3, [sp, #16]
 802a3f4:	2331      	movs	r3, #49	@ 0x31
 802a3f6:	703b      	strb	r3, [r7, #0]
 802a3f8:	e5b3      	b.n	8029f62 <_dtoa_r+0x5b2>
 802a3fa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802a3fc:	4f16      	ldr	r7, [pc, #88]	@ (802a458 <_dtoa_r+0xaa8>)
 802a3fe:	b11b      	cbz	r3, 802a408 <_dtoa_r+0xa58>
 802a400:	f107 0308 	add.w	r3, r7, #8
 802a404:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 802a406:	6013      	str	r3, [r2, #0]
 802a408:	4638      	mov	r0, r7
 802a40a:	b011      	add	sp, #68	@ 0x44
 802a40c:	ecbd 8b02 	vpop	{d8}
 802a410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a414:	9b07      	ldr	r3, [sp, #28]
 802a416:	2b01      	cmp	r3, #1
 802a418:	f77f ae36 	ble.w	802a088 <_dtoa_r+0x6d8>
 802a41c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a41e:	930b      	str	r3, [sp, #44]	@ 0x2c
 802a420:	2001      	movs	r0, #1
 802a422:	e656      	b.n	802a0d2 <_dtoa_r+0x722>
 802a424:	f1bb 0f00 	cmp.w	fp, #0
 802a428:	f77f aed7 	ble.w	802a1da <_dtoa_r+0x82a>
 802a42c:	463e      	mov	r6, r7
 802a42e:	9801      	ldr	r0, [sp, #4]
 802a430:	4621      	mov	r1, r4
 802a432:	f7ff fa34 	bl	802989e <quorem>
 802a436:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 802a43a:	f806 ab01 	strb.w	sl, [r6], #1
 802a43e:	1bf2      	subs	r2, r6, r7
 802a440:	4593      	cmp	fp, r2
 802a442:	ddb4      	ble.n	802a3ae <_dtoa_r+0x9fe>
 802a444:	9901      	ldr	r1, [sp, #4]
 802a446:	2300      	movs	r3, #0
 802a448:	220a      	movs	r2, #10
 802a44a:	4648      	mov	r0, r9
 802a44c:	f000 f8b2 	bl	802a5b4 <__multadd>
 802a450:	9001      	str	r0, [sp, #4]
 802a452:	e7ec      	b.n	802a42e <_dtoa_r+0xa7e>
 802a454:	080312c5 	.word	0x080312c5
 802a458:	08031249 	.word	0x08031249

0802a45c <_free_r>:
 802a45c:	b538      	push	{r3, r4, r5, lr}
 802a45e:	4605      	mov	r5, r0
 802a460:	2900      	cmp	r1, #0
 802a462:	d041      	beq.n	802a4e8 <_free_r+0x8c>
 802a464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802a468:	1f0c      	subs	r4, r1, #4
 802a46a:	2b00      	cmp	r3, #0
 802a46c:	bfb8      	it	lt
 802a46e:	18e4      	addlt	r4, r4, r3
 802a470:	f7fe fbfa 	bl	8028c68 <__malloc_lock>
 802a474:	4a1d      	ldr	r2, [pc, #116]	@ (802a4ec <_free_r+0x90>)
 802a476:	6813      	ldr	r3, [r2, #0]
 802a478:	b933      	cbnz	r3, 802a488 <_free_r+0x2c>
 802a47a:	6063      	str	r3, [r4, #4]
 802a47c:	6014      	str	r4, [r2, #0]
 802a47e:	4628      	mov	r0, r5
 802a480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a484:	f7fe bbf6 	b.w	8028c74 <__malloc_unlock>
 802a488:	42a3      	cmp	r3, r4
 802a48a:	d908      	bls.n	802a49e <_free_r+0x42>
 802a48c:	6820      	ldr	r0, [r4, #0]
 802a48e:	1821      	adds	r1, r4, r0
 802a490:	428b      	cmp	r3, r1
 802a492:	bf01      	itttt	eq
 802a494:	6819      	ldreq	r1, [r3, #0]
 802a496:	685b      	ldreq	r3, [r3, #4]
 802a498:	1809      	addeq	r1, r1, r0
 802a49a:	6021      	streq	r1, [r4, #0]
 802a49c:	e7ed      	b.n	802a47a <_free_r+0x1e>
 802a49e:	461a      	mov	r2, r3
 802a4a0:	685b      	ldr	r3, [r3, #4]
 802a4a2:	b10b      	cbz	r3, 802a4a8 <_free_r+0x4c>
 802a4a4:	42a3      	cmp	r3, r4
 802a4a6:	d9fa      	bls.n	802a49e <_free_r+0x42>
 802a4a8:	6811      	ldr	r1, [r2, #0]
 802a4aa:	1850      	adds	r0, r2, r1
 802a4ac:	42a0      	cmp	r0, r4
 802a4ae:	d10b      	bne.n	802a4c8 <_free_r+0x6c>
 802a4b0:	6820      	ldr	r0, [r4, #0]
 802a4b2:	4401      	add	r1, r0
 802a4b4:	1850      	adds	r0, r2, r1
 802a4b6:	4283      	cmp	r3, r0
 802a4b8:	6011      	str	r1, [r2, #0]
 802a4ba:	d1e0      	bne.n	802a47e <_free_r+0x22>
 802a4bc:	6818      	ldr	r0, [r3, #0]
 802a4be:	685b      	ldr	r3, [r3, #4]
 802a4c0:	6053      	str	r3, [r2, #4]
 802a4c2:	4408      	add	r0, r1
 802a4c4:	6010      	str	r0, [r2, #0]
 802a4c6:	e7da      	b.n	802a47e <_free_r+0x22>
 802a4c8:	d902      	bls.n	802a4d0 <_free_r+0x74>
 802a4ca:	230c      	movs	r3, #12
 802a4cc:	602b      	str	r3, [r5, #0]
 802a4ce:	e7d6      	b.n	802a47e <_free_r+0x22>
 802a4d0:	6820      	ldr	r0, [r4, #0]
 802a4d2:	1821      	adds	r1, r4, r0
 802a4d4:	428b      	cmp	r3, r1
 802a4d6:	bf04      	itt	eq
 802a4d8:	6819      	ldreq	r1, [r3, #0]
 802a4da:	685b      	ldreq	r3, [r3, #4]
 802a4dc:	6063      	str	r3, [r4, #4]
 802a4de:	bf04      	itt	eq
 802a4e0:	1809      	addeq	r1, r1, r0
 802a4e2:	6021      	streq	r1, [r4, #0]
 802a4e4:	6054      	str	r4, [r2, #4]
 802a4e6:	e7ca      	b.n	802a47e <_free_r+0x22>
 802a4e8:	bd38      	pop	{r3, r4, r5, pc}
 802a4ea:	bf00      	nop
 802a4ec:	240036cc 	.word	0x240036cc

0802a4f0 <_Balloc>:
 802a4f0:	b570      	push	{r4, r5, r6, lr}
 802a4f2:	69c6      	ldr	r6, [r0, #28]
 802a4f4:	4604      	mov	r4, r0
 802a4f6:	460d      	mov	r5, r1
 802a4f8:	b976      	cbnz	r6, 802a518 <_Balloc+0x28>
 802a4fa:	2010      	movs	r0, #16
 802a4fc:	f7fe fb02 	bl	8028b04 <malloc>
 802a500:	4602      	mov	r2, r0
 802a502:	61e0      	str	r0, [r4, #28]
 802a504:	b920      	cbnz	r0, 802a510 <_Balloc+0x20>
 802a506:	4b18      	ldr	r3, [pc, #96]	@ (802a568 <_Balloc+0x78>)
 802a508:	4818      	ldr	r0, [pc, #96]	@ (802a56c <_Balloc+0x7c>)
 802a50a:	216b      	movs	r1, #107	@ 0x6b
 802a50c:	f7dc ff58 	bl	80073c0 <__assert_func>
 802a510:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802a514:	6006      	str	r6, [r0, #0]
 802a516:	60c6      	str	r6, [r0, #12]
 802a518:	69e6      	ldr	r6, [r4, #28]
 802a51a:	68f3      	ldr	r3, [r6, #12]
 802a51c:	b183      	cbz	r3, 802a540 <_Balloc+0x50>
 802a51e:	69e3      	ldr	r3, [r4, #28]
 802a520:	68db      	ldr	r3, [r3, #12]
 802a522:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802a526:	b9b8      	cbnz	r0, 802a558 <_Balloc+0x68>
 802a528:	2101      	movs	r1, #1
 802a52a:	fa01 f605 	lsl.w	r6, r1, r5
 802a52e:	1d72      	adds	r2, r6, #5
 802a530:	0092      	lsls	r2, r2, #2
 802a532:	4620      	mov	r0, r4
 802a534:	f000 fde0 	bl	802b0f8 <_calloc_r>
 802a538:	b160      	cbz	r0, 802a554 <_Balloc+0x64>
 802a53a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802a53e:	e00e      	b.n	802a55e <_Balloc+0x6e>
 802a540:	2221      	movs	r2, #33	@ 0x21
 802a542:	2104      	movs	r1, #4
 802a544:	4620      	mov	r0, r4
 802a546:	f000 fdd7 	bl	802b0f8 <_calloc_r>
 802a54a:	69e3      	ldr	r3, [r4, #28]
 802a54c:	60f0      	str	r0, [r6, #12]
 802a54e:	68db      	ldr	r3, [r3, #12]
 802a550:	2b00      	cmp	r3, #0
 802a552:	d1e4      	bne.n	802a51e <_Balloc+0x2e>
 802a554:	2000      	movs	r0, #0
 802a556:	bd70      	pop	{r4, r5, r6, pc}
 802a558:	6802      	ldr	r2, [r0, #0]
 802a55a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802a55e:	2300      	movs	r3, #0
 802a560:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802a564:	e7f7      	b.n	802a556 <_Balloc+0x66>
 802a566:	bf00      	nop
 802a568:	08031256 	.word	0x08031256
 802a56c:	080312d6 	.word	0x080312d6

0802a570 <_Bfree>:
 802a570:	b570      	push	{r4, r5, r6, lr}
 802a572:	69c6      	ldr	r6, [r0, #28]
 802a574:	4605      	mov	r5, r0
 802a576:	460c      	mov	r4, r1
 802a578:	b976      	cbnz	r6, 802a598 <_Bfree+0x28>
 802a57a:	2010      	movs	r0, #16
 802a57c:	f7fe fac2 	bl	8028b04 <malloc>
 802a580:	4602      	mov	r2, r0
 802a582:	61e8      	str	r0, [r5, #28]
 802a584:	b920      	cbnz	r0, 802a590 <_Bfree+0x20>
 802a586:	4b09      	ldr	r3, [pc, #36]	@ (802a5ac <_Bfree+0x3c>)
 802a588:	4809      	ldr	r0, [pc, #36]	@ (802a5b0 <_Bfree+0x40>)
 802a58a:	218f      	movs	r1, #143	@ 0x8f
 802a58c:	f7dc ff18 	bl	80073c0 <__assert_func>
 802a590:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802a594:	6006      	str	r6, [r0, #0]
 802a596:	60c6      	str	r6, [r0, #12]
 802a598:	b13c      	cbz	r4, 802a5aa <_Bfree+0x3a>
 802a59a:	69eb      	ldr	r3, [r5, #28]
 802a59c:	6862      	ldr	r2, [r4, #4]
 802a59e:	68db      	ldr	r3, [r3, #12]
 802a5a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802a5a4:	6021      	str	r1, [r4, #0]
 802a5a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802a5aa:	bd70      	pop	{r4, r5, r6, pc}
 802a5ac:	08031256 	.word	0x08031256
 802a5b0:	080312d6 	.word	0x080312d6

0802a5b4 <__multadd>:
 802a5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a5b8:	690d      	ldr	r5, [r1, #16]
 802a5ba:	4607      	mov	r7, r0
 802a5bc:	460c      	mov	r4, r1
 802a5be:	461e      	mov	r6, r3
 802a5c0:	f101 0c14 	add.w	ip, r1, #20
 802a5c4:	2000      	movs	r0, #0
 802a5c6:	f8dc 3000 	ldr.w	r3, [ip]
 802a5ca:	b299      	uxth	r1, r3
 802a5cc:	fb02 6101 	mla	r1, r2, r1, r6
 802a5d0:	0c1e      	lsrs	r6, r3, #16
 802a5d2:	0c0b      	lsrs	r3, r1, #16
 802a5d4:	fb02 3306 	mla	r3, r2, r6, r3
 802a5d8:	b289      	uxth	r1, r1
 802a5da:	3001      	adds	r0, #1
 802a5dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802a5e0:	4285      	cmp	r5, r0
 802a5e2:	f84c 1b04 	str.w	r1, [ip], #4
 802a5e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802a5ea:	dcec      	bgt.n	802a5c6 <__multadd+0x12>
 802a5ec:	b30e      	cbz	r6, 802a632 <__multadd+0x7e>
 802a5ee:	68a3      	ldr	r3, [r4, #8]
 802a5f0:	42ab      	cmp	r3, r5
 802a5f2:	dc19      	bgt.n	802a628 <__multadd+0x74>
 802a5f4:	6861      	ldr	r1, [r4, #4]
 802a5f6:	4638      	mov	r0, r7
 802a5f8:	3101      	adds	r1, #1
 802a5fa:	f7ff ff79 	bl	802a4f0 <_Balloc>
 802a5fe:	4680      	mov	r8, r0
 802a600:	b928      	cbnz	r0, 802a60e <__multadd+0x5a>
 802a602:	4602      	mov	r2, r0
 802a604:	4b0c      	ldr	r3, [pc, #48]	@ (802a638 <__multadd+0x84>)
 802a606:	480d      	ldr	r0, [pc, #52]	@ (802a63c <__multadd+0x88>)
 802a608:	21ba      	movs	r1, #186	@ 0xba
 802a60a:	f7dc fed9 	bl	80073c0 <__assert_func>
 802a60e:	6922      	ldr	r2, [r4, #16]
 802a610:	3202      	adds	r2, #2
 802a612:	f104 010c 	add.w	r1, r4, #12
 802a616:	0092      	lsls	r2, r2, #2
 802a618:	300c      	adds	r0, #12
 802a61a:	f7ff f932 	bl	8029882 <memcpy>
 802a61e:	4621      	mov	r1, r4
 802a620:	4638      	mov	r0, r7
 802a622:	f7ff ffa5 	bl	802a570 <_Bfree>
 802a626:	4644      	mov	r4, r8
 802a628:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802a62c:	3501      	adds	r5, #1
 802a62e:	615e      	str	r6, [r3, #20]
 802a630:	6125      	str	r5, [r4, #16]
 802a632:	4620      	mov	r0, r4
 802a634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a638:	080312c5 	.word	0x080312c5
 802a63c:	080312d6 	.word	0x080312d6

0802a640 <__hi0bits>:
 802a640:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 802a644:	4603      	mov	r3, r0
 802a646:	bf36      	itet	cc
 802a648:	0403      	lslcc	r3, r0, #16
 802a64a:	2000      	movcs	r0, #0
 802a64c:	2010      	movcc	r0, #16
 802a64e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 802a652:	bf3c      	itt	cc
 802a654:	021b      	lslcc	r3, r3, #8
 802a656:	3008      	addcc	r0, #8
 802a658:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 802a65c:	bf3c      	itt	cc
 802a65e:	011b      	lslcc	r3, r3, #4
 802a660:	3004      	addcc	r0, #4
 802a662:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802a666:	bf3c      	itt	cc
 802a668:	009b      	lslcc	r3, r3, #2
 802a66a:	3002      	addcc	r0, #2
 802a66c:	2b00      	cmp	r3, #0
 802a66e:	db05      	blt.n	802a67c <__hi0bits+0x3c>
 802a670:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 802a674:	f100 0001 	add.w	r0, r0, #1
 802a678:	bf08      	it	eq
 802a67a:	2020      	moveq	r0, #32
 802a67c:	4770      	bx	lr

0802a67e <__lo0bits>:
 802a67e:	6803      	ldr	r3, [r0, #0]
 802a680:	4602      	mov	r2, r0
 802a682:	f013 0007 	ands.w	r0, r3, #7
 802a686:	d00b      	beq.n	802a6a0 <__lo0bits+0x22>
 802a688:	07d9      	lsls	r1, r3, #31
 802a68a:	d421      	bmi.n	802a6d0 <__lo0bits+0x52>
 802a68c:	0798      	lsls	r0, r3, #30
 802a68e:	bf49      	itett	mi
 802a690:	085b      	lsrmi	r3, r3, #1
 802a692:	089b      	lsrpl	r3, r3, #2
 802a694:	2001      	movmi	r0, #1
 802a696:	6013      	strmi	r3, [r2, #0]
 802a698:	bf5c      	itt	pl
 802a69a:	6013      	strpl	r3, [r2, #0]
 802a69c:	2002      	movpl	r0, #2
 802a69e:	4770      	bx	lr
 802a6a0:	b299      	uxth	r1, r3
 802a6a2:	b909      	cbnz	r1, 802a6a8 <__lo0bits+0x2a>
 802a6a4:	0c1b      	lsrs	r3, r3, #16
 802a6a6:	2010      	movs	r0, #16
 802a6a8:	b2d9      	uxtb	r1, r3
 802a6aa:	b909      	cbnz	r1, 802a6b0 <__lo0bits+0x32>
 802a6ac:	3008      	adds	r0, #8
 802a6ae:	0a1b      	lsrs	r3, r3, #8
 802a6b0:	0719      	lsls	r1, r3, #28
 802a6b2:	bf04      	itt	eq
 802a6b4:	091b      	lsreq	r3, r3, #4
 802a6b6:	3004      	addeq	r0, #4
 802a6b8:	0799      	lsls	r1, r3, #30
 802a6ba:	bf04      	itt	eq
 802a6bc:	089b      	lsreq	r3, r3, #2
 802a6be:	3002      	addeq	r0, #2
 802a6c0:	07d9      	lsls	r1, r3, #31
 802a6c2:	d403      	bmi.n	802a6cc <__lo0bits+0x4e>
 802a6c4:	085b      	lsrs	r3, r3, #1
 802a6c6:	f100 0001 	add.w	r0, r0, #1
 802a6ca:	d003      	beq.n	802a6d4 <__lo0bits+0x56>
 802a6cc:	6013      	str	r3, [r2, #0]
 802a6ce:	4770      	bx	lr
 802a6d0:	2000      	movs	r0, #0
 802a6d2:	4770      	bx	lr
 802a6d4:	2020      	movs	r0, #32
 802a6d6:	4770      	bx	lr

0802a6d8 <__i2b>:
 802a6d8:	b510      	push	{r4, lr}
 802a6da:	460c      	mov	r4, r1
 802a6dc:	2101      	movs	r1, #1
 802a6de:	f7ff ff07 	bl	802a4f0 <_Balloc>
 802a6e2:	4602      	mov	r2, r0
 802a6e4:	b928      	cbnz	r0, 802a6f2 <__i2b+0x1a>
 802a6e6:	4b05      	ldr	r3, [pc, #20]	@ (802a6fc <__i2b+0x24>)
 802a6e8:	4805      	ldr	r0, [pc, #20]	@ (802a700 <__i2b+0x28>)
 802a6ea:	f240 1145 	movw	r1, #325	@ 0x145
 802a6ee:	f7dc fe67 	bl	80073c0 <__assert_func>
 802a6f2:	2301      	movs	r3, #1
 802a6f4:	6144      	str	r4, [r0, #20]
 802a6f6:	6103      	str	r3, [r0, #16]
 802a6f8:	bd10      	pop	{r4, pc}
 802a6fa:	bf00      	nop
 802a6fc:	080312c5 	.word	0x080312c5
 802a700:	080312d6 	.word	0x080312d6

0802a704 <__multiply>:
 802a704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a708:	4614      	mov	r4, r2
 802a70a:	690a      	ldr	r2, [r1, #16]
 802a70c:	6923      	ldr	r3, [r4, #16]
 802a70e:	429a      	cmp	r2, r3
 802a710:	bfa8      	it	ge
 802a712:	4623      	movge	r3, r4
 802a714:	460f      	mov	r7, r1
 802a716:	bfa4      	itt	ge
 802a718:	460c      	movge	r4, r1
 802a71a:	461f      	movge	r7, r3
 802a71c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802a720:	f8d7 9010 	ldr.w	r9, [r7, #16]
 802a724:	68a3      	ldr	r3, [r4, #8]
 802a726:	6861      	ldr	r1, [r4, #4]
 802a728:	eb0a 0609 	add.w	r6, sl, r9
 802a72c:	42b3      	cmp	r3, r6
 802a72e:	b085      	sub	sp, #20
 802a730:	bfb8      	it	lt
 802a732:	3101      	addlt	r1, #1
 802a734:	f7ff fedc 	bl	802a4f0 <_Balloc>
 802a738:	b930      	cbnz	r0, 802a748 <__multiply+0x44>
 802a73a:	4602      	mov	r2, r0
 802a73c:	4b44      	ldr	r3, [pc, #272]	@ (802a850 <__multiply+0x14c>)
 802a73e:	4845      	ldr	r0, [pc, #276]	@ (802a854 <__multiply+0x150>)
 802a740:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 802a744:	f7dc fe3c 	bl	80073c0 <__assert_func>
 802a748:	f100 0514 	add.w	r5, r0, #20
 802a74c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802a750:	462b      	mov	r3, r5
 802a752:	2200      	movs	r2, #0
 802a754:	4543      	cmp	r3, r8
 802a756:	d321      	bcc.n	802a79c <__multiply+0x98>
 802a758:	f107 0114 	add.w	r1, r7, #20
 802a75c:	f104 0214 	add.w	r2, r4, #20
 802a760:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 802a764:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 802a768:	9302      	str	r3, [sp, #8]
 802a76a:	1b13      	subs	r3, r2, r4
 802a76c:	3b15      	subs	r3, #21
 802a76e:	f023 0303 	bic.w	r3, r3, #3
 802a772:	3304      	adds	r3, #4
 802a774:	f104 0715 	add.w	r7, r4, #21
 802a778:	42ba      	cmp	r2, r7
 802a77a:	bf38      	it	cc
 802a77c:	2304      	movcc	r3, #4
 802a77e:	9301      	str	r3, [sp, #4]
 802a780:	9b02      	ldr	r3, [sp, #8]
 802a782:	9103      	str	r1, [sp, #12]
 802a784:	428b      	cmp	r3, r1
 802a786:	d80c      	bhi.n	802a7a2 <__multiply+0x9e>
 802a788:	2e00      	cmp	r6, #0
 802a78a:	dd03      	ble.n	802a794 <__multiply+0x90>
 802a78c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802a790:	2b00      	cmp	r3, #0
 802a792:	d05b      	beq.n	802a84c <__multiply+0x148>
 802a794:	6106      	str	r6, [r0, #16]
 802a796:	b005      	add	sp, #20
 802a798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a79c:	f843 2b04 	str.w	r2, [r3], #4
 802a7a0:	e7d8      	b.n	802a754 <__multiply+0x50>
 802a7a2:	f8b1 a000 	ldrh.w	sl, [r1]
 802a7a6:	f1ba 0f00 	cmp.w	sl, #0
 802a7aa:	d024      	beq.n	802a7f6 <__multiply+0xf2>
 802a7ac:	f104 0e14 	add.w	lr, r4, #20
 802a7b0:	46a9      	mov	r9, r5
 802a7b2:	f04f 0c00 	mov.w	ip, #0
 802a7b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 802a7ba:	f8d9 3000 	ldr.w	r3, [r9]
 802a7be:	fa1f fb87 	uxth.w	fp, r7
 802a7c2:	b29b      	uxth	r3, r3
 802a7c4:	fb0a 330b 	mla	r3, sl, fp, r3
 802a7c8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 802a7cc:	f8d9 7000 	ldr.w	r7, [r9]
 802a7d0:	4463      	add	r3, ip
 802a7d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802a7d6:	fb0a c70b 	mla	r7, sl, fp, ip
 802a7da:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 802a7de:	b29b      	uxth	r3, r3
 802a7e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802a7e4:	4572      	cmp	r2, lr
 802a7e6:	f849 3b04 	str.w	r3, [r9], #4
 802a7ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802a7ee:	d8e2      	bhi.n	802a7b6 <__multiply+0xb2>
 802a7f0:	9b01      	ldr	r3, [sp, #4]
 802a7f2:	f845 c003 	str.w	ip, [r5, r3]
 802a7f6:	9b03      	ldr	r3, [sp, #12]
 802a7f8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 802a7fc:	3104      	adds	r1, #4
 802a7fe:	f1b9 0f00 	cmp.w	r9, #0
 802a802:	d021      	beq.n	802a848 <__multiply+0x144>
 802a804:	682b      	ldr	r3, [r5, #0]
 802a806:	f104 0c14 	add.w	ip, r4, #20
 802a80a:	46ae      	mov	lr, r5
 802a80c:	f04f 0a00 	mov.w	sl, #0
 802a810:	f8bc b000 	ldrh.w	fp, [ip]
 802a814:	f8be 7002 	ldrh.w	r7, [lr, #2]
 802a818:	fb09 770b 	mla	r7, r9, fp, r7
 802a81c:	4457      	add	r7, sl
 802a81e:	b29b      	uxth	r3, r3
 802a820:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802a824:	f84e 3b04 	str.w	r3, [lr], #4
 802a828:	f85c 3b04 	ldr.w	r3, [ip], #4
 802a82c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802a830:	f8be 3000 	ldrh.w	r3, [lr]
 802a834:	fb09 330a 	mla	r3, r9, sl, r3
 802a838:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 802a83c:	4562      	cmp	r2, ip
 802a83e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802a842:	d8e5      	bhi.n	802a810 <__multiply+0x10c>
 802a844:	9f01      	ldr	r7, [sp, #4]
 802a846:	51eb      	str	r3, [r5, r7]
 802a848:	3504      	adds	r5, #4
 802a84a:	e799      	b.n	802a780 <__multiply+0x7c>
 802a84c:	3e01      	subs	r6, #1
 802a84e:	e79b      	b.n	802a788 <__multiply+0x84>
 802a850:	080312c5 	.word	0x080312c5
 802a854:	080312d6 	.word	0x080312d6

0802a858 <__pow5mult>:
 802a858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a85c:	4615      	mov	r5, r2
 802a85e:	f012 0203 	ands.w	r2, r2, #3
 802a862:	4607      	mov	r7, r0
 802a864:	460e      	mov	r6, r1
 802a866:	d007      	beq.n	802a878 <__pow5mult+0x20>
 802a868:	4c25      	ldr	r4, [pc, #148]	@ (802a900 <__pow5mult+0xa8>)
 802a86a:	3a01      	subs	r2, #1
 802a86c:	2300      	movs	r3, #0
 802a86e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802a872:	f7ff fe9f 	bl	802a5b4 <__multadd>
 802a876:	4606      	mov	r6, r0
 802a878:	10ad      	asrs	r5, r5, #2
 802a87a:	d03d      	beq.n	802a8f8 <__pow5mult+0xa0>
 802a87c:	69fc      	ldr	r4, [r7, #28]
 802a87e:	b97c      	cbnz	r4, 802a8a0 <__pow5mult+0x48>
 802a880:	2010      	movs	r0, #16
 802a882:	f7fe f93f 	bl	8028b04 <malloc>
 802a886:	4602      	mov	r2, r0
 802a888:	61f8      	str	r0, [r7, #28]
 802a88a:	b928      	cbnz	r0, 802a898 <__pow5mult+0x40>
 802a88c:	4b1d      	ldr	r3, [pc, #116]	@ (802a904 <__pow5mult+0xac>)
 802a88e:	481e      	ldr	r0, [pc, #120]	@ (802a908 <__pow5mult+0xb0>)
 802a890:	f240 11b3 	movw	r1, #435	@ 0x1b3
 802a894:	f7dc fd94 	bl	80073c0 <__assert_func>
 802a898:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802a89c:	6004      	str	r4, [r0, #0]
 802a89e:	60c4      	str	r4, [r0, #12]
 802a8a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 802a8a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802a8a8:	b94c      	cbnz	r4, 802a8be <__pow5mult+0x66>
 802a8aa:	f240 2171 	movw	r1, #625	@ 0x271
 802a8ae:	4638      	mov	r0, r7
 802a8b0:	f7ff ff12 	bl	802a6d8 <__i2b>
 802a8b4:	2300      	movs	r3, #0
 802a8b6:	f8c8 0008 	str.w	r0, [r8, #8]
 802a8ba:	4604      	mov	r4, r0
 802a8bc:	6003      	str	r3, [r0, #0]
 802a8be:	f04f 0900 	mov.w	r9, #0
 802a8c2:	07eb      	lsls	r3, r5, #31
 802a8c4:	d50a      	bpl.n	802a8dc <__pow5mult+0x84>
 802a8c6:	4631      	mov	r1, r6
 802a8c8:	4622      	mov	r2, r4
 802a8ca:	4638      	mov	r0, r7
 802a8cc:	f7ff ff1a 	bl	802a704 <__multiply>
 802a8d0:	4631      	mov	r1, r6
 802a8d2:	4680      	mov	r8, r0
 802a8d4:	4638      	mov	r0, r7
 802a8d6:	f7ff fe4b 	bl	802a570 <_Bfree>
 802a8da:	4646      	mov	r6, r8
 802a8dc:	106d      	asrs	r5, r5, #1
 802a8de:	d00b      	beq.n	802a8f8 <__pow5mult+0xa0>
 802a8e0:	6820      	ldr	r0, [r4, #0]
 802a8e2:	b938      	cbnz	r0, 802a8f4 <__pow5mult+0x9c>
 802a8e4:	4622      	mov	r2, r4
 802a8e6:	4621      	mov	r1, r4
 802a8e8:	4638      	mov	r0, r7
 802a8ea:	f7ff ff0b 	bl	802a704 <__multiply>
 802a8ee:	6020      	str	r0, [r4, #0]
 802a8f0:	f8c0 9000 	str.w	r9, [r0]
 802a8f4:	4604      	mov	r4, r0
 802a8f6:	e7e4      	b.n	802a8c2 <__pow5mult+0x6a>
 802a8f8:	4630      	mov	r0, r6
 802a8fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a8fe:	bf00      	nop
 802a900:	08031330 	.word	0x08031330
 802a904:	08031256 	.word	0x08031256
 802a908:	080312d6 	.word	0x080312d6

0802a90c <__lshift>:
 802a90c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a910:	460c      	mov	r4, r1
 802a912:	6849      	ldr	r1, [r1, #4]
 802a914:	6923      	ldr	r3, [r4, #16]
 802a916:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802a91a:	68a3      	ldr	r3, [r4, #8]
 802a91c:	4607      	mov	r7, r0
 802a91e:	4691      	mov	r9, r2
 802a920:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802a924:	f108 0601 	add.w	r6, r8, #1
 802a928:	42b3      	cmp	r3, r6
 802a92a:	db0b      	blt.n	802a944 <__lshift+0x38>
 802a92c:	4638      	mov	r0, r7
 802a92e:	f7ff fddf 	bl	802a4f0 <_Balloc>
 802a932:	4605      	mov	r5, r0
 802a934:	b948      	cbnz	r0, 802a94a <__lshift+0x3e>
 802a936:	4602      	mov	r2, r0
 802a938:	4b28      	ldr	r3, [pc, #160]	@ (802a9dc <__lshift+0xd0>)
 802a93a:	4829      	ldr	r0, [pc, #164]	@ (802a9e0 <__lshift+0xd4>)
 802a93c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 802a940:	f7dc fd3e 	bl	80073c0 <__assert_func>
 802a944:	3101      	adds	r1, #1
 802a946:	005b      	lsls	r3, r3, #1
 802a948:	e7ee      	b.n	802a928 <__lshift+0x1c>
 802a94a:	2300      	movs	r3, #0
 802a94c:	f100 0114 	add.w	r1, r0, #20
 802a950:	f100 0210 	add.w	r2, r0, #16
 802a954:	4618      	mov	r0, r3
 802a956:	4553      	cmp	r3, sl
 802a958:	db33      	blt.n	802a9c2 <__lshift+0xb6>
 802a95a:	6920      	ldr	r0, [r4, #16]
 802a95c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802a960:	f104 0314 	add.w	r3, r4, #20
 802a964:	f019 091f 	ands.w	r9, r9, #31
 802a968:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802a96c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802a970:	d02b      	beq.n	802a9ca <__lshift+0xbe>
 802a972:	f1c9 0e20 	rsb	lr, r9, #32
 802a976:	468a      	mov	sl, r1
 802a978:	2200      	movs	r2, #0
 802a97a:	6818      	ldr	r0, [r3, #0]
 802a97c:	fa00 f009 	lsl.w	r0, r0, r9
 802a980:	4310      	orrs	r0, r2
 802a982:	f84a 0b04 	str.w	r0, [sl], #4
 802a986:	f853 2b04 	ldr.w	r2, [r3], #4
 802a98a:	459c      	cmp	ip, r3
 802a98c:	fa22 f20e 	lsr.w	r2, r2, lr
 802a990:	d8f3      	bhi.n	802a97a <__lshift+0x6e>
 802a992:	ebac 0304 	sub.w	r3, ip, r4
 802a996:	3b15      	subs	r3, #21
 802a998:	f023 0303 	bic.w	r3, r3, #3
 802a99c:	3304      	adds	r3, #4
 802a99e:	f104 0015 	add.w	r0, r4, #21
 802a9a2:	4584      	cmp	ip, r0
 802a9a4:	bf38      	it	cc
 802a9a6:	2304      	movcc	r3, #4
 802a9a8:	50ca      	str	r2, [r1, r3]
 802a9aa:	b10a      	cbz	r2, 802a9b0 <__lshift+0xa4>
 802a9ac:	f108 0602 	add.w	r6, r8, #2
 802a9b0:	3e01      	subs	r6, #1
 802a9b2:	4638      	mov	r0, r7
 802a9b4:	612e      	str	r6, [r5, #16]
 802a9b6:	4621      	mov	r1, r4
 802a9b8:	f7ff fdda 	bl	802a570 <_Bfree>
 802a9bc:	4628      	mov	r0, r5
 802a9be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a9c2:	f842 0f04 	str.w	r0, [r2, #4]!
 802a9c6:	3301      	adds	r3, #1
 802a9c8:	e7c5      	b.n	802a956 <__lshift+0x4a>
 802a9ca:	3904      	subs	r1, #4
 802a9cc:	f853 2b04 	ldr.w	r2, [r3], #4
 802a9d0:	f841 2f04 	str.w	r2, [r1, #4]!
 802a9d4:	459c      	cmp	ip, r3
 802a9d6:	d8f9      	bhi.n	802a9cc <__lshift+0xc0>
 802a9d8:	e7ea      	b.n	802a9b0 <__lshift+0xa4>
 802a9da:	bf00      	nop
 802a9dc:	080312c5 	.word	0x080312c5
 802a9e0:	080312d6 	.word	0x080312d6

0802a9e4 <__mcmp>:
 802a9e4:	690a      	ldr	r2, [r1, #16]
 802a9e6:	4603      	mov	r3, r0
 802a9e8:	6900      	ldr	r0, [r0, #16]
 802a9ea:	1a80      	subs	r0, r0, r2
 802a9ec:	b530      	push	{r4, r5, lr}
 802a9ee:	d10e      	bne.n	802aa0e <__mcmp+0x2a>
 802a9f0:	3314      	adds	r3, #20
 802a9f2:	3114      	adds	r1, #20
 802a9f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 802a9f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 802a9fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 802aa00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 802aa04:	4295      	cmp	r5, r2
 802aa06:	d003      	beq.n	802aa10 <__mcmp+0x2c>
 802aa08:	d205      	bcs.n	802aa16 <__mcmp+0x32>
 802aa0a:	f04f 30ff 	mov.w	r0, #4294967295
 802aa0e:	bd30      	pop	{r4, r5, pc}
 802aa10:	42a3      	cmp	r3, r4
 802aa12:	d3f3      	bcc.n	802a9fc <__mcmp+0x18>
 802aa14:	e7fb      	b.n	802aa0e <__mcmp+0x2a>
 802aa16:	2001      	movs	r0, #1
 802aa18:	e7f9      	b.n	802aa0e <__mcmp+0x2a>
	...

0802aa1c <__mdiff>:
 802aa1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802aa20:	4689      	mov	r9, r1
 802aa22:	4606      	mov	r6, r0
 802aa24:	4611      	mov	r1, r2
 802aa26:	4648      	mov	r0, r9
 802aa28:	4614      	mov	r4, r2
 802aa2a:	f7ff ffdb 	bl	802a9e4 <__mcmp>
 802aa2e:	1e05      	subs	r5, r0, #0
 802aa30:	d112      	bne.n	802aa58 <__mdiff+0x3c>
 802aa32:	4629      	mov	r1, r5
 802aa34:	4630      	mov	r0, r6
 802aa36:	f7ff fd5b 	bl	802a4f0 <_Balloc>
 802aa3a:	4602      	mov	r2, r0
 802aa3c:	b928      	cbnz	r0, 802aa4a <__mdiff+0x2e>
 802aa3e:	4b3f      	ldr	r3, [pc, #252]	@ (802ab3c <__mdiff+0x120>)
 802aa40:	f240 2137 	movw	r1, #567	@ 0x237
 802aa44:	483e      	ldr	r0, [pc, #248]	@ (802ab40 <__mdiff+0x124>)
 802aa46:	f7dc fcbb 	bl	80073c0 <__assert_func>
 802aa4a:	2301      	movs	r3, #1
 802aa4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802aa50:	4610      	mov	r0, r2
 802aa52:	b003      	add	sp, #12
 802aa54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802aa58:	bfbc      	itt	lt
 802aa5a:	464b      	movlt	r3, r9
 802aa5c:	46a1      	movlt	r9, r4
 802aa5e:	4630      	mov	r0, r6
 802aa60:	f8d9 1004 	ldr.w	r1, [r9, #4]
 802aa64:	bfba      	itte	lt
 802aa66:	461c      	movlt	r4, r3
 802aa68:	2501      	movlt	r5, #1
 802aa6a:	2500      	movge	r5, #0
 802aa6c:	f7ff fd40 	bl	802a4f0 <_Balloc>
 802aa70:	4602      	mov	r2, r0
 802aa72:	b918      	cbnz	r0, 802aa7c <__mdiff+0x60>
 802aa74:	4b31      	ldr	r3, [pc, #196]	@ (802ab3c <__mdiff+0x120>)
 802aa76:	f240 2145 	movw	r1, #581	@ 0x245
 802aa7a:	e7e3      	b.n	802aa44 <__mdiff+0x28>
 802aa7c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 802aa80:	6926      	ldr	r6, [r4, #16]
 802aa82:	60c5      	str	r5, [r0, #12]
 802aa84:	f109 0310 	add.w	r3, r9, #16
 802aa88:	f109 0514 	add.w	r5, r9, #20
 802aa8c:	f104 0e14 	add.w	lr, r4, #20
 802aa90:	f100 0b14 	add.w	fp, r0, #20
 802aa94:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 802aa98:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 802aa9c:	9301      	str	r3, [sp, #4]
 802aa9e:	46d9      	mov	r9, fp
 802aaa0:	f04f 0c00 	mov.w	ip, #0
 802aaa4:	9b01      	ldr	r3, [sp, #4]
 802aaa6:	f85e 0b04 	ldr.w	r0, [lr], #4
 802aaaa:	f853 af04 	ldr.w	sl, [r3, #4]!
 802aaae:	9301      	str	r3, [sp, #4]
 802aab0:	fa1f f38a 	uxth.w	r3, sl
 802aab4:	4619      	mov	r1, r3
 802aab6:	b283      	uxth	r3, r0
 802aab8:	1acb      	subs	r3, r1, r3
 802aaba:	0c00      	lsrs	r0, r0, #16
 802aabc:	4463      	add	r3, ip
 802aabe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 802aac2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 802aac6:	b29b      	uxth	r3, r3
 802aac8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 802aacc:	4576      	cmp	r6, lr
 802aace:	f849 3b04 	str.w	r3, [r9], #4
 802aad2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802aad6:	d8e5      	bhi.n	802aaa4 <__mdiff+0x88>
 802aad8:	1b33      	subs	r3, r6, r4
 802aada:	3b15      	subs	r3, #21
 802aadc:	f023 0303 	bic.w	r3, r3, #3
 802aae0:	3415      	adds	r4, #21
 802aae2:	3304      	adds	r3, #4
 802aae4:	42a6      	cmp	r6, r4
 802aae6:	bf38      	it	cc
 802aae8:	2304      	movcc	r3, #4
 802aaea:	441d      	add	r5, r3
 802aaec:	445b      	add	r3, fp
 802aaee:	461e      	mov	r6, r3
 802aaf0:	462c      	mov	r4, r5
 802aaf2:	4544      	cmp	r4, r8
 802aaf4:	d30e      	bcc.n	802ab14 <__mdiff+0xf8>
 802aaf6:	f108 0103 	add.w	r1, r8, #3
 802aafa:	1b49      	subs	r1, r1, r5
 802aafc:	f021 0103 	bic.w	r1, r1, #3
 802ab00:	3d03      	subs	r5, #3
 802ab02:	45a8      	cmp	r8, r5
 802ab04:	bf38      	it	cc
 802ab06:	2100      	movcc	r1, #0
 802ab08:	440b      	add	r3, r1
 802ab0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802ab0e:	b191      	cbz	r1, 802ab36 <__mdiff+0x11a>
 802ab10:	6117      	str	r7, [r2, #16]
 802ab12:	e79d      	b.n	802aa50 <__mdiff+0x34>
 802ab14:	f854 1b04 	ldr.w	r1, [r4], #4
 802ab18:	46e6      	mov	lr, ip
 802ab1a:	0c08      	lsrs	r0, r1, #16
 802ab1c:	fa1c fc81 	uxtah	ip, ip, r1
 802ab20:	4471      	add	r1, lr
 802ab22:	eb00 402c 	add.w	r0, r0, ip, asr #16
 802ab26:	b289      	uxth	r1, r1
 802ab28:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 802ab2c:	f846 1b04 	str.w	r1, [r6], #4
 802ab30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802ab34:	e7dd      	b.n	802aaf2 <__mdiff+0xd6>
 802ab36:	3f01      	subs	r7, #1
 802ab38:	e7e7      	b.n	802ab0a <__mdiff+0xee>
 802ab3a:	bf00      	nop
 802ab3c:	080312c5 	.word	0x080312c5
 802ab40:	080312d6 	.word	0x080312d6

0802ab44 <__d2b>:
 802ab44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802ab48:	460f      	mov	r7, r1
 802ab4a:	2101      	movs	r1, #1
 802ab4c:	ec59 8b10 	vmov	r8, r9, d0
 802ab50:	4616      	mov	r6, r2
 802ab52:	f7ff fccd 	bl	802a4f0 <_Balloc>
 802ab56:	4604      	mov	r4, r0
 802ab58:	b930      	cbnz	r0, 802ab68 <__d2b+0x24>
 802ab5a:	4602      	mov	r2, r0
 802ab5c:	4b23      	ldr	r3, [pc, #140]	@ (802abec <__d2b+0xa8>)
 802ab5e:	4824      	ldr	r0, [pc, #144]	@ (802abf0 <__d2b+0xac>)
 802ab60:	f240 310f 	movw	r1, #783	@ 0x30f
 802ab64:	f7dc fc2c 	bl	80073c0 <__assert_func>
 802ab68:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802ab6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802ab70:	b10d      	cbz	r5, 802ab76 <__d2b+0x32>
 802ab72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802ab76:	9301      	str	r3, [sp, #4]
 802ab78:	f1b8 0300 	subs.w	r3, r8, #0
 802ab7c:	d023      	beq.n	802abc6 <__d2b+0x82>
 802ab7e:	4668      	mov	r0, sp
 802ab80:	9300      	str	r3, [sp, #0]
 802ab82:	f7ff fd7c 	bl	802a67e <__lo0bits>
 802ab86:	e9dd 1200 	ldrd	r1, r2, [sp]
 802ab8a:	b1d0      	cbz	r0, 802abc2 <__d2b+0x7e>
 802ab8c:	f1c0 0320 	rsb	r3, r0, #32
 802ab90:	fa02 f303 	lsl.w	r3, r2, r3
 802ab94:	430b      	orrs	r3, r1
 802ab96:	40c2      	lsrs	r2, r0
 802ab98:	6163      	str	r3, [r4, #20]
 802ab9a:	9201      	str	r2, [sp, #4]
 802ab9c:	9b01      	ldr	r3, [sp, #4]
 802ab9e:	61a3      	str	r3, [r4, #24]
 802aba0:	2b00      	cmp	r3, #0
 802aba2:	bf0c      	ite	eq
 802aba4:	2201      	moveq	r2, #1
 802aba6:	2202      	movne	r2, #2
 802aba8:	6122      	str	r2, [r4, #16]
 802abaa:	b1a5      	cbz	r5, 802abd6 <__d2b+0x92>
 802abac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 802abb0:	4405      	add	r5, r0
 802abb2:	603d      	str	r5, [r7, #0]
 802abb4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 802abb8:	6030      	str	r0, [r6, #0]
 802abba:	4620      	mov	r0, r4
 802abbc:	b003      	add	sp, #12
 802abbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802abc2:	6161      	str	r1, [r4, #20]
 802abc4:	e7ea      	b.n	802ab9c <__d2b+0x58>
 802abc6:	a801      	add	r0, sp, #4
 802abc8:	f7ff fd59 	bl	802a67e <__lo0bits>
 802abcc:	9b01      	ldr	r3, [sp, #4]
 802abce:	6163      	str	r3, [r4, #20]
 802abd0:	3020      	adds	r0, #32
 802abd2:	2201      	movs	r2, #1
 802abd4:	e7e8      	b.n	802aba8 <__d2b+0x64>
 802abd6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802abda:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 802abde:	6038      	str	r0, [r7, #0]
 802abe0:	6918      	ldr	r0, [r3, #16]
 802abe2:	f7ff fd2d 	bl	802a640 <__hi0bits>
 802abe6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802abea:	e7e5      	b.n	802abb8 <__d2b+0x74>
 802abec:	080312c5 	.word	0x080312c5
 802abf0:	080312d6 	.word	0x080312d6

0802abf4 <__sfputc_r>:
 802abf4:	6893      	ldr	r3, [r2, #8]
 802abf6:	3b01      	subs	r3, #1
 802abf8:	2b00      	cmp	r3, #0
 802abfa:	b410      	push	{r4}
 802abfc:	6093      	str	r3, [r2, #8]
 802abfe:	da08      	bge.n	802ac12 <__sfputc_r+0x1e>
 802ac00:	6994      	ldr	r4, [r2, #24]
 802ac02:	42a3      	cmp	r3, r4
 802ac04:	db01      	blt.n	802ac0a <__sfputc_r+0x16>
 802ac06:	290a      	cmp	r1, #10
 802ac08:	d103      	bne.n	802ac12 <__sfputc_r+0x1e>
 802ac0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ac0e:	f000 b9df 	b.w	802afd0 <__swbuf_r>
 802ac12:	6813      	ldr	r3, [r2, #0]
 802ac14:	1c58      	adds	r0, r3, #1
 802ac16:	6010      	str	r0, [r2, #0]
 802ac18:	7019      	strb	r1, [r3, #0]
 802ac1a:	4608      	mov	r0, r1
 802ac1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ac20:	4770      	bx	lr

0802ac22 <__sfputs_r>:
 802ac22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ac24:	4606      	mov	r6, r0
 802ac26:	460f      	mov	r7, r1
 802ac28:	4614      	mov	r4, r2
 802ac2a:	18d5      	adds	r5, r2, r3
 802ac2c:	42ac      	cmp	r4, r5
 802ac2e:	d101      	bne.n	802ac34 <__sfputs_r+0x12>
 802ac30:	2000      	movs	r0, #0
 802ac32:	e007      	b.n	802ac44 <__sfputs_r+0x22>
 802ac34:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ac38:	463a      	mov	r2, r7
 802ac3a:	4630      	mov	r0, r6
 802ac3c:	f7ff ffda 	bl	802abf4 <__sfputc_r>
 802ac40:	1c43      	adds	r3, r0, #1
 802ac42:	d1f3      	bne.n	802ac2c <__sfputs_r+0xa>
 802ac44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802ac48 <_vfiprintf_r>:
 802ac48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ac4c:	460d      	mov	r5, r1
 802ac4e:	b09d      	sub	sp, #116	@ 0x74
 802ac50:	4614      	mov	r4, r2
 802ac52:	4698      	mov	r8, r3
 802ac54:	4606      	mov	r6, r0
 802ac56:	b118      	cbz	r0, 802ac60 <_vfiprintf_r+0x18>
 802ac58:	6a03      	ldr	r3, [r0, #32]
 802ac5a:	b90b      	cbnz	r3, 802ac60 <_vfiprintf_r+0x18>
 802ac5c:	f7fe fcd4 	bl	8029608 <__sinit>
 802ac60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802ac62:	07d9      	lsls	r1, r3, #31
 802ac64:	d405      	bmi.n	802ac72 <_vfiprintf_r+0x2a>
 802ac66:	89ab      	ldrh	r3, [r5, #12]
 802ac68:	059a      	lsls	r2, r3, #22
 802ac6a:	d402      	bmi.n	802ac72 <_vfiprintf_r+0x2a>
 802ac6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802ac6e:	f7fe fdfe 	bl	802986e <__retarget_lock_acquire_recursive>
 802ac72:	89ab      	ldrh	r3, [r5, #12]
 802ac74:	071b      	lsls	r3, r3, #28
 802ac76:	d501      	bpl.n	802ac7c <_vfiprintf_r+0x34>
 802ac78:	692b      	ldr	r3, [r5, #16]
 802ac7a:	b99b      	cbnz	r3, 802aca4 <_vfiprintf_r+0x5c>
 802ac7c:	4629      	mov	r1, r5
 802ac7e:	4630      	mov	r0, r6
 802ac80:	f000 f9e4 	bl	802b04c <__swsetup_r>
 802ac84:	b170      	cbz	r0, 802aca4 <_vfiprintf_r+0x5c>
 802ac86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802ac88:	07dc      	lsls	r4, r3, #31
 802ac8a:	d504      	bpl.n	802ac96 <_vfiprintf_r+0x4e>
 802ac8c:	f04f 30ff 	mov.w	r0, #4294967295
 802ac90:	b01d      	add	sp, #116	@ 0x74
 802ac92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ac96:	89ab      	ldrh	r3, [r5, #12]
 802ac98:	0598      	lsls	r0, r3, #22
 802ac9a:	d4f7      	bmi.n	802ac8c <_vfiprintf_r+0x44>
 802ac9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802ac9e:	f7fe fde7 	bl	8029870 <__retarget_lock_release_recursive>
 802aca2:	e7f3      	b.n	802ac8c <_vfiprintf_r+0x44>
 802aca4:	2300      	movs	r3, #0
 802aca6:	9309      	str	r3, [sp, #36]	@ 0x24
 802aca8:	2320      	movs	r3, #32
 802acaa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802acae:	f8cd 800c 	str.w	r8, [sp, #12]
 802acb2:	2330      	movs	r3, #48	@ 0x30
 802acb4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802ae64 <_vfiprintf_r+0x21c>
 802acb8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802acbc:	f04f 0901 	mov.w	r9, #1
 802acc0:	4623      	mov	r3, r4
 802acc2:	469a      	mov	sl, r3
 802acc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 802acc8:	b10a      	cbz	r2, 802acce <_vfiprintf_r+0x86>
 802acca:	2a25      	cmp	r2, #37	@ 0x25
 802accc:	d1f9      	bne.n	802acc2 <_vfiprintf_r+0x7a>
 802acce:	ebba 0b04 	subs.w	fp, sl, r4
 802acd2:	d00b      	beq.n	802acec <_vfiprintf_r+0xa4>
 802acd4:	465b      	mov	r3, fp
 802acd6:	4622      	mov	r2, r4
 802acd8:	4629      	mov	r1, r5
 802acda:	4630      	mov	r0, r6
 802acdc:	f7ff ffa1 	bl	802ac22 <__sfputs_r>
 802ace0:	3001      	adds	r0, #1
 802ace2:	f000 80a7 	beq.w	802ae34 <_vfiprintf_r+0x1ec>
 802ace6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802ace8:	445a      	add	r2, fp
 802acea:	9209      	str	r2, [sp, #36]	@ 0x24
 802acec:	f89a 3000 	ldrb.w	r3, [sl]
 802acf0:	2b00      	cmp	r3, #0
 802acf2:	f000 809f 	beq.w	802ae34 <_vfiprintf_r+0x1ec>
 802acf6:	2300      	movs	r3, #0
 802acf8:	f04f 32ff 	mov.w	r2, #4294967295
 802acfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802ad00:	f10a 0a01 	add.w	sl, sl, #1
 802ad04:	9304      	str	r3, [sp, #16]
 802ad06:	9307      	str	r3, [sp, #28]
 802ad08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802ad0c:	931a      	str	r3, [sp, #104]	@ 0x68
 802ad0e:	4654      	mov	r4, sl
 802ad10:	2205      	movs	r2, #5
 802ad12:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ad16:	4853      	ldr	r0, [pc, #332]	@ (802ae64 <_vfiprintf_r+0x21c>)
 802ad18:	f7d5 fafa 	bl	8000310 <memchr>
 802ad1c:	9a04      	ldr	r2, [sp, #16]
 802ad1e:	b9d8      	cbnz	r0, 802ad58 <_vfiprintf_r+0x110>
 802ad20:	06d1      	lsls	r1, r2, #27
 802ad22:	bf44      	itt	mi
 802ad24:	2320      	movmi	r3, #32
 802ad26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802ad2a:	0713      	lsls	r3, r2, #28
 802ad2c:	bf44      	itt	mi
 802ad2e:	232b      	movmi	r3, #43	@ 0x2b
 802ad30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802ad34:	f89a 3000 	ldrb.w	r3, [sl]
 802ad38:	2b2a      	cmp	r3, #42	@ 0x2a
 802ad3a:	d015      	beq.n	802ad68 <_vfiprintf_r+0x120>
 802ad3c:	9a07      	ldr	r2, [sp, #28]
 802ad3e:	4654      	mov	r4, sl
 802ad40:	2000      	movs	r0, #0
 802ad42:	f04f 0c0a 	mov.w	ip, #10
 802ad46:	4621      	mov	r1, r4
 802ad48:	f811 3b01 	ldrb.w	r3, [r1], #1
 802ad4c:	3b30      	subs	r3, #48	@ 0x30
 802ad4e:	2b09      	cmp	r3, #9
 802ad50:	d94b      	bls.n	802adea <_vfiprintf_r+0x1a2>
 802ad52:	b1b0      	cbz	r0, 802ad82 <_vfiprintf_r+0x13a>
 802ad54:	9207      	str	r2, [sp, #28]
 802ad56:	e014      	b.n	802ad82 <_vfiprintf_r+0x13a>
 802ad58:	eba0 0308 	sub.w	r3, r0, r8
 802ad5c:	fa09 f303 	lsl.w	r3, r9, r3
 802ad60:	4313      	orrs	r3, r2
 802ad62:	9304      	str	r3, [sp, #16]
 802ad64:	46a2      	mov	sl, r4
 802ad66:	e7d2      	b.n	802ad0e <_vfiprintf_r+0xc6>
 802ad68:	9b03      	ldr	r3, [sp, #12]
 802ad6a:	1d19      	adds	r1, r3, #4
 802ad6c:	681b      	ldr	r3, [r3, #0]
 802ad6e:	9103      	str	r1, [sp, #12]
 802ad70:	2b00      	cmp	r3, #0
 802ad72:	bfbb      	ittet	lt
 802ad74:	425b      	neglt	r3, r3
 802ad76:	f042 0202 	orrlt.w	r2, r2, #2
 802ad7a:	9307      	strge	r3, [sp, #28]
 802ad7c:	9307      	strlt	r3, [sp, #28]
 802ad7e:	bfb8      	it	lt
 802ad80:	9204      	strlt	r2, [sp, #16]
 802ad82:	7823      	ldrb	r3, [r4, #0]
 802ad84:	2b2e      	cmp	r3, #46	@ 0x2e
 802ad86:	d10a      	bne.n	802ad9e <_vfiprintf_r+0x156>
 802ad88:	7863      	ldrb	r3, [r4, #1]
 802ad8a:	2b2a      	cmp	r3, #42	@ 0x2a
 802ad8c:	d132      	bne.n	802adf4 <_vfiprintf_r+0x1ac>
 802ad8e:	9b03      	ldr	r3, [sp, #12]
 802ad90:	1d1a      	adds	r2, r3, #4
 802ad92:	681b      	ldr	r3, [r3, #0]
 802ad94:	9203      	str	r2, [sp, #12]
 802ad96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802ad9a:	3402      	adds	r4, #2
 802ad9c:	9305      	str	r3, [sp, #20]
 802ad9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802ae74 <_vfiprintf_r+0x22c>
 802ada2:	7821      	ldrb	r1, [r4, #0]
 802ada4:	2203      	movs	r2, #3
 802ada6:	4650      	mov	r0, sl
 802ada8:	f7d5 fab2 	bl	8000310 <memchr>
 802adac:	b138      	cbz	r0, 802adbe <_vfiprintf_r+0x176>
 802adae:	9b04      	ldr	r3, [sp, #16]
 802adb0:	eba0 000a 	sub.w	r0, r0, sl
 802adb4:	2240      	movs	r2, #64	@ 0x40
 802adb6:	4082      	lsls	r2, r0
 802adb8:	4313      	orrs	r3, r2
 802adba:	3401      	adds	r4, #1
 802adbc:	9304      	str	r3, [sp, #16]
 802adbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 802adc2:	4829      	ldr	r0, [pc, #164]	@ (802ae68 <_vfiprintf_r+0x220>)
 802adc4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802adc8:	2206      	movs	r2, #6
 802adca:	f7d5 faa1 	bl	8000310 <memchr>
 802adce:	2800      	cmp	r0, #0
 802add0:	d03f      	beq.n	802ae52 <_vfiprintf_r+0x20a>
 802add2:	4b26      	ldr	r3, [pc, #152]	@ (802ae6c <_vfiprintf_r+0x224>)
 802add4:	bb1b      	cbnz	r3, 802ae1e <_vfiprintf_r+0x1d6>
 802add6:	9b03      	ldr	r3, [sp, #12]
 802add8:	3307      	adds	r3, #7
 802adda:	f023 0307 	bic.w	r3, r3, #7
 802adde:	3308      	adds	r3, #8
 802ade0:	9303      	str	r3, [sp, #12]
 802ade2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ade4:	443b      	add	r3, r7
 802ade6:	9309      	str	r3, [sp, #36]	@ 0x24
 802ade8:	e76a      	b.n	802acc0 <_vfiprintf_r+0x78>
 802adea:	fb0c 3202 	mla	r2, ip, r2, r3
 802adee:	460c      	mov	r4, r1
 802adf0:	2001      	movs	r0, #1
 802adf2:	e7a8      	b.n	802ad46 <_vfiprintf_r+0xfe>
 802adf4:	2300      	movs	r3, #0
 802adf6:	3401      	adds	r4, #1
 802adf8:	9305      	str	r3, [sp, #20]
 802adfa:	4619      	mov	r1, r3
 802adfc:	f04f 0c0a 	mov.w	ip, #10
 802ae00:	4620      	mov	r0, r4
 802ae02:	f810 2b01 	ldrb.w	r2, [r0], #1
 802ae06:	3a30      	subs	r2, #48	@ 0x30
 802ae08:	2a09      	cmp	r2, #9
 802ae0a:	d903      	bls.n	802ae14 <_vfiprintf_r+0x1cc>
 802ae0c:	2b00      	cmp	r3, #0
 802ae0e:	d0c6      	beq.n	802ad9e <_vfiprintf_r+0x156>
 802ae10:	9105      	str	r1, [sp, #20]
 802ae12:	e7c4      	b.n	802ad9e <_vfiprintf_r+0x156>
 802ae14:	fb0c 2101 	mla	r1, ip, r1, r2
 802ae18:	4604      	mov	r4, r0
 802ae1a:	2301      	movs	r3, #1
 802ae1c:	e7f0      	b.n	802ae00 <_vfiprintf_r+0x1b8>
 802ae1e:	ab03      	add	r3, sp, #12
 802ae20:	9300      	str	r3, [sp, #0]
 802ae22:	462a      	mov	r2, r5
 802ae24:	4b12      	ldr	r3, [pc, #72]	@ (802ae70 <_vfiprintf_r+0x228>)
 802ae26:	a904      	add	r1, sp, #16
 802ae28:	4630      	mov	r0, r6
 802ae2a:	f7fd ffb9 	bl	8028da0 <_printf_float>
 802ae2e:	4607      	mov	r7, r0
 802ae30:	1c78      	adds	r0, r7, #1
 802ae32:	d1d6      	bne.n	802ade2 <_vfiprintf_r+0x19a>
 802ae34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802ae36:	07d9      	lsls	r1, r3, #31
 802ae38:	d405      	bmi.n	802ae46 <_vfiprintf_r+0x1fe>
 802ae3a:	89ab      	ldrh	r3, [r5, #12]
 802ae3c:	059a      	lsls	r2, r3, #22
 802ae3e:	d402      	bmi.n	802ae46 <_vfiprintf_r+0x1fe>
 802ae40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802ae42:	f7fe fd15 	bl	8029870 <__retarget_lock_release_recursive>
 802ae46:	89ab      	ldrh	r3, [r5, #12]
 802ae48:	065b      	lsls	r3, r3, #25
 802ae4a:	f53f af1f 	bmi.w	802ac8c <_vfiprintf_r+0x44>
 802ae4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802ae50:	e71e      	b.n	802ac90 <_vfiprintf_r+0x48>
 802ae52:	ab03      	add	r3, sp, #12
 802ae54:	9300      	str	r3, [sp, #0]
 802ae56:	462a      	mov	r2, r5
 802ae58:	4b05      	ldr	r3, [pc, #20]	@ (802ae70 <_vfiprintf_r+0x228>)
 802ae5a:	a904      	add	r1, sp, #16
 802ae5c:	4630      	mov	r0, r6
 802ae5e:	f7fe fa27 	bl	80292b0 <_printf_i>
 802ae62:	e7e4      	b.n	802ae2e <_vfiprintf_r+0x1e6>
 802ae64:	08031430 	.word	0x08031430
 802ae68:	0803143a 	.word	0x0803143a
 802ae6c:	08028da1 	.word	0x08028da1
 802ae70:	0802ac23 	.word	0x0802ac23
 802ae74:	08031436 	.word	0x08031436

0802ae78 <__sflush_r>:
 802ae78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802ae7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ae80:	0716      	lsls	r6, r2, #28
 802ae82:	4605      	mov	r5, r0
 802ae84:	460c      	mov	r4, r1
 802ae86:	d454      	bmi.n	802af32 <__sflush_r+0xba>
 802ae88:	684b      	ldr	r3, [r1, #4]
 802ae8a:	2b00      	cmp	r3, #0
 802ae8c:	dc02      	bgt.n	802ae94 <__sflush_r+0x1c>
 802ae8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802ae90:	2b00      	cmp	r3, #0
 802ae92:	dd48      	ble.n	802af26 <__sflush_r+0xae>
 802ae94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802ae96:	2e00      	cmp	r6, #0
 802ae98:	d045      	beq.n	802af26 <__sflush_r+0xae>
 802ae9a:	2300      	movs	r3, #0
 802ae9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802aea0:	682f      	ldr	r7, [r5, #0]
 802aea2:	6a21      	ldr	r1, [r4, #32]
 802aea4:	602b      	str	r3, [r5, #0]
 802aea6:	d030      	beq.n	802af0a <__sflush_r+0x92>
 802aea8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802aeaa:	89a3      	ldrh	r3, [r4, #12]
 802aeac:	0759      	lsls	r1, r3, #29
 802aeae:	d505      	bpl.n	802aebc <__sflush_r+0x44>
 802aeb0:	6863      	ldr	r3, [r4, #4]
 802aeb2:	1ad2      	subs	r2, r2, r3
 802aeb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802aeb6:	b10b      	cbz	r3, 802aebc <__sflush_r+0x44>
 802aeb8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802aeba:	1ad2      	subs	r2, r2, r3
 802aebc:	2300      	movs	r3, #0
 802aebe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802aec0:	6a21      	ldr	r1, [r4, #32]
 802aec2:	4628      	mov	r0, r5
 802aec4:	47b0      	blx	r6
 802aec6:	1c43      	adds	r3, r0, #1
 802aec8:	89a3      	ldrh	r3, [r4, #12]
 802aeca:	d106      	bne.n	802aeda <__sflush_r+0x62>
 802aecc:	6829      	ldr	r1, [r5, #0]
 802aece:	291d      	cmp	r1, #29
 802aed0:	d82b      	bhi.n	802af2a <__sflush_r+0xb2>
 802aed2:	4a2a      	ldr	r2, [pc, #168]	@ (802af7c <__sflush_r+0x104>)
 802aed4:	410a      	asrs	r2, r1
 802aed6:	07d6      	lsls	r6, r2, #31
 802aed8:	d427      	bmi.n	802af2a <__sflush_r+0xb2>
 802aeda:	2200      	movs	r2, #0
 802aedc:	6062      	str	r2, [r4, #4]
 802aede:	04d9      	lsls	r1, r3, #19
 802aee0:	6922      	ldr	r2, [r4, #16]
 802aee2:	6022      	str	r2, [r4, #0]
 802aee4:	d504      	bpl.n	802aef0 <__sflush_r+0x78>
 802aee6:	1c42      	adds	r2, r0, #1
 802aee8:	d101      	bne.n	802aeee <__sflush_r+0x76>
 802aeea:	682b      	ldr	r3, [r5, #0]
 802aeec:	b903      	cbnz	r3, 802aef0 <__sflush_r+0x78>
 802aeee:	6560      	str	r0, [r4, #84]	@ 0x54
 802aef0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802aef2:	602f      	str	r7, [r5, #0]
 802aef4:	b1b9      	cbz	r1, 802af26 <__sflush_r+0xae>
 802aef6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802aefa:	4299      	cmp	r1, r3
 802aefc:	d002      	beq.n	802af04 <__sflush_r+0x8c>
 802aefe:	4628      	mov	r0, r5
 802af00:	f7ff faac 	bl	802a45c <_free_r>
 802af04:	2300      	movs	r3, #0
 802af06:	6363      	str	r3, [r4, #52]	@ 0x34
 802af08:	e00d      	b.n	802af26 <__sflush_r+0xae>
 802af0a:	2301      	movs	r3, #1
 802af0c:	4628      	mov	r0, r5
 802af0e:	47b0      	blx	r6
 802af10:	4602      	mov	r2, r0
 802af12:	1c50      	adds	r0, r2, #1
 802af14:	d1c9      	bne.n	802aeaa <__sflush_r+0x32>
 802af16:	682b      	ldr	r3, [r5, #0]
 802af18:	2b00      	cmp	r3, #0
 802af1a:	d0c6      	beq.n	802aeaa <__sflush_r+0x32>
 802af1c:	2b1d      	cmp	r3, #29
 802af1e:	d001      	beq.n	802af24 <__sflush_r+0xac>
 802af20:	2b16      	cmp	r3, #22
 802af22:	d11e      	bne.n	802af62 <__sflush_r+0xea>
 802af24:	602f      	str	r7, [r5, #0]
 802af26:	2000      	movs	r0, #0
 802af28:	e022      	b.n	802af70 <__sflush_r+0xf8>
 802af2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802af2e:	b21b      	sxth	r3, r3
 802af30:	e01b      	b.n	802af6a <__sflush_r+0xf2>
 802af32:	690f      	ldr	r7, [r1, #16]
 802af34:	2f00      	cmp	r7, #0
 802af36:	d0f6      	beq.n	802af26 <__sflush_r+0xae>
 802af38:	0793      	lsls	r3, r2, #30
 802af3a:	680e      	ldr	r6, [r1, #0]
 802af3c:	bf08      	it	eq
 802af3e:	694b      	ldreq	r3, [r1, #20]
 802af40:	600f      	str	r7, [r1, #0]
 802af42:	bf18      	it	ne
 802af44:	2300      	movne	r3, #0
 802af46:	eba6 0807 	sub.w	r8, r6, r7
 802af4a:	608b      	str	r3, [r1, #8]
 802af4c:	f1b8 0f00 	cmp.w	r8, #0
 802af50:	dde9      	ble.n	802af26 <__sflush_r+0xae>
 802af52:	6a21      	ldr	r1, [r4, #32]
 802af54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802af56:	4643      	mov	r3, r8
 802af58:	463a      	mov	r2, r7
 802af5a:	4628      	mov	r0, r5
 802af5c:	47b0      	blx	r6
 802af5e:	2800      	cmp	r0, #0
 802af60:	dc08      	bgt.n	802af74 <__sflush_r+0xfc>
 802af62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802af66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802af6a:	81a3      	strh	r3, [r4, #12]
 802af6c:	f04f 30ff 	mov.w	r0, #4294967295
 802af70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802af74:	4407      	add	r7, r0
 802af76:	eba8 0800 	sub.w	r8, r8, r0
 802af7a:	e7e7      	b.n	802af4c <__sflush_r+0xd4>
 802af7c:	dfbffffe 	.word	0xdfbffffe

0802af80 <_fflush_r>:
 802af80:	b538      	push	{r3, r4, r5, lr}
 802af82:	690b      	ldr	r3, [r1, #16]
 802af84:	4605      	mov	r5, r0
 802af86:	460c      	mov	r4, r1
 802af88:	b913      	cbnz	r3, 802af90 <_fflush_r+0x10>
 802af8a:	2500      	movs	r5, #0
 802af8c:	4628      	mov	r0, r5
 802af8e:	bd38      	pop	{r3, r4, r5, pc}
 802af90:	b118      	cbz	r0, 802af9a <_fflush_r+0x1a>
 802af92:	6a03      	ldr	r3, [r0, #32]
 802af94:	b90b      	cbnz	r3, 802af9a <_fflush_r+0x1a>
 802af96:	f7fe fb37 	bl	8029608 <__sinit>
 802af9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802af9e:	2b00      	cmp	r3, #0
 802afa0:	d0f3      	beq.n	802af8a <_fflush_r+0xa>
 802afa2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802afa4:	07d0      	lsls	r0, r2, #31
 802afa6:	d404      	bmi.n	802afb2 <_fflush_r+0x32>
 802afa8:	0599      	lsls	r1, r3, #22
 802afaa:	d402      	bmi.n	802afb2 <_fflush_r+0x32>
 802afac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802afae:	f7fe fc5e 	bl	802986e <__retarget_lock_acquire_recursive>
 802afb2:	4628      	mov	r0, r5
 802afb4:	4621      	mov	r1, r4
 802afb6:	f7ff ff5f 	bl	802ae78 <__sflush_r>
 802afba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802afbc:	07da      	lsls	r2, r3, #31
 802afbe:	4605      	mov	r5, r0
 802afc0:	d4e4      	bmi.n	802af8c <_fflush_r+0xc>
 802afc2:	89a3      	ldrh	r3, [r4, #12]
 802afc4:	059b      	lsls	r3, r3, #22
 802afc6:	d4e1      	bmi.n	802af8c <_fflush_r+0xc>
 802afc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802afca:	f7fe fc51 	bl	8029870 <__retarget_lock_release_recursive>
 802afce:	e7dd      	b.n	802af8c <_fflush_r+0xc>

0802afd0 <__swbuf_r>:
 802afd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802afd2:	460e      	mov	r6, r1
 802afd4:	4614      	mov	r4, r2
 802afd6:	4605      	mov	r5, r0
 802afd8:	b118      	cbz	r0, 802afe2 <__swbuf_r+0x12>
 802afda:	6a03      	ldr	r3, [r0, #32]
 802afdc:	b90b      	cbnz	r3, 802afe2 <__swbuf_r+0x12>
 802afde:	f7fe fb13 	bl	8029608 <__sinit>
 802afe2:	69a3      	ldr	r3, [r4, #24]
 802afe4:	60a3      	str	r3, [r4, #8]
 802afe6:	89a3      	ldrh	r3, [r4, #12]
 802afe8:	071a      	lsls	r2, r3, #28
 802afea:	d501      	bpl.n	802aff0 <__swbuf_r+0x20>
 802afec:	6923      	ldr	r3, [r4, #16]
 802afee:	b943      	cbnz	r3, 802b002 <__swbuf_r+0x32>
 802aff0:	4621      	mov	r1, r4
 802aff2:	4628      	mov	r0, r5
 802aff4:	f000 f82a 	bl	802b04c <__swsetup_r>
 802aff8:	b118      	cbz	r0, 802b002 <__swbuf_r+0x32>
 802affa:	f04f 37ff 	mov.w	r7, #4294967295
 802affe:	4638      	mov	r0, r7
 802b000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b002:	6823      	ldr	r3, [r4, #0]
 802b004:	6922      	ldr	r2, [r4, #16]
 802b006:	1a98      	subs	r0, r3, r2
 802b008:	6963      	ldr	r3, [r4, #20]
 802b00a:	b2f6      	uxtb	r6, r6
 802b00c:	4283      	cmp	r3, r0
 802b00e:	4637      	mov	r7, r6
 802b010:	dc05      	bgt.n	802b01e <__swbuf_r+0x4e>
 802b012:	4621      	mov	r1, r4
 802b014:	4628      	mov	r0, r5
 802b016:	f7ff ffb3 	bl	802af80 <_fflush_r>
 802b01a:	2800      	cmp	r0, #0
 802b01c:	d1ed      	bne.n	802affa <__swbuf_r+0x2a>
 802b01e:	68a3      	ldr	r3, [r4, #8]
 802b020:	3b01      	subs	r3, #1
 802b022:	60a3      	str	r3, [r4, #8]
 802b024:	6823      	ldr	r3, [r4, #0]
 802b026:	1c5a      	adds	r2, r3, #1
 802b028:	6022      	str	r2, [r4, #0]
 802b02a:	701e      	strb	r6, [r3, #0]
 802b02c:	6962      	ldr	r2, [r4, #20]
 802b02e:	1c43      	adds	r3, r0, #1
 802b030:	429a      	cmp	r2, r3
 802b032:	d004      	beq.n	802b03e <__swbuf_r+0x6e>
 802b034:	89a3      	ldrh	r3, [r4, #12]
 802b036:	07db      	lsls	r3, r3, #31
 802b038:	d5e1      	bpl.n	802affe <__swbuf_r+0x2e>
 802b03a:	2e0a      	cmp	r6, #10
 802b03c:	d1df      	bne.n	802affe <__swbuf_r+0x2e>
 802b03e:	4621      	mov	r1, r4
 802b040:	4628      	mov	r0, r5
 802b042:	f7ff ff9d 	bl	802af80 <_fflush_r>
 802b046:	2800      	cmp	r0, #0
 802b048:	d0d9      	beq.n	802affe <__swbuf_r+0x2e>
 802b04a:	e7d6      	b.n	802affa <__swbuf_r+0x2a>

0802b04c <__swsetup_r>:
 802b04c:	b538      	push	{r3, r4, r5, lr}
 802b04e:	4b29      	ldr	r3, [pc, #164]	@ (802b0f4 <__swsetup_r+0xa8>)
 802b050:	4605      	mov	r5, r0
 802b052:	6818      	ldr	r0, [r3, #0]
 802b054:	460c      	mov	r4, r1
 802b056:	b118      	cbz	r0, 802b060 <__swsetup_r+0x14>
 802b058:	6a03      	ldr	r3, [r0, #32]
 802b05a:	b90b      	cbnz	r3, 802b060 <__swsetup_r+0x14>
 802b05c:	f7fe fad4 	bl	8029608 <__sinit>
 802b060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b064:	0719      	lsls	r1, r3, #28
 802b066:	d422      	bmi.n	802b0ae <__swsetup_r+0x62>
 802b068:	06da      	lsls	r2, r3, #27
 802b06a:	d407      	bmi.n	802b07c <__swsetup_r+0x30>
 802b06c:	2209      	movs	r2, #9
 802b06e:	602a      	str	r2, [r5, #0]
 802b070:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802b074:	81a3      	strh	r3, [r4, #12]
 802b076:	f04f 30ff 	mov.w	r0, #4294967295
 802b07a:	e033      	b.n	802b0e4 <__swsetup_r+0x98>
 802b07c:	0758      	lsls	r0, r3, #29
 802b07e:	d512      	bpl.n	802b0a6 <__swsetup_r+0x5a>
 802b080:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802b082:	b141      	cbz	r1, 802b096 <__swsetup_r+0x4a>
 802b084:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802b088:	4299      	cmp	r1, r3
 802b08a:	d002      	beq.n	802b092 <__swsetup_r+0x46>
 802b08c:	4628      	mov	r0, r5
 802b08e:	f7ff f9e5 	bl	802a45c <_free_r>
 802b092:	2300      	movs	r3, #0
 802b094:	6363      	str	r3, [r4, #52]	@ 0x34
 802b096:	89a3      	ldrh	r3, [r4, #12]
 802b098:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802b09c:	81a3      	strh	r3, [r4, #12]
 802b09e:	2300      	movs	r3, #0
 802b0a0:	6063      	str	r3, [r4, #4]
 802b0a2:	6923      	ldr	r3, [r4, #16]
 802b0a4:	6023      	str	r3, [r4, #0]
 802b0a6:	89a3      	ldrh	r3, [r4, #12]
 802b0a8:	f043 0308 	orr.w	r3, r3, #8
 802b0ac:	81a3      	strh	r3, [r4, #12]
 802b0ae:	6923      	ldr	r3, [r4, #16]
 802b0b0:	b94b      	cbnz	r3, 802b0c6 <__swsetup_r+0x7a>
 802b0b2:	89a3      	ldrh	r3, [r4, #12]
 802b0b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802b0b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802b0bc:	d003      	beq.n	802b0c6 <__swsetup_r+0x7a>
 802b0be:	4621      	mov	r1, r4
 802b0c0:	4628      	mov	r0, r5
 802b0c2:	f000 f872 	bl	802b1aa <__smakebuf_r>
 802b0c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b0ca:	f013 0201 	ands.w	r2, r3, #1
 802b0ce:	d00a      	beq.n	802b0e6 <__swsetup_r+0x9a>
 802b0d0:	2200      	movs	r2, #0
 802b0d2:	60a2      	str	r2, [r4, #8]
 802b0d4:	6962      	ldr	r2, [r4, #20]
 802b0d6:	4252      	negs	r2, r2
 802b0d8:	61a2      	str	r2, [r4, #24]
 802b0da:	6922      	ldr	r2, [r4, #16]
 802b0dc:	b942      	cbnz	r2, 802b0f0 <__swsetup_r+0xa4>
 802b0de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802b0e2:	d1c5      	bne.n	802b070 <__swsetup_r+0x24>
 802b0e4:	bd38      	pop	{r3, r4, r5, pc}
 802b0e6:	0799      	lsls	r1, r3, #30
 802b0e8:	bf58      	it	pl
 802b0ea:	6962      	ldrpl	r2, [r4, #20]
 802b0ec:	60a2      	str	r2, [r4, #8]
 802b0ee:	e7f4      	b.n	802b0da <__swsetup_r+0x8e>
 802b0f0:	2000      	movs	r0, #0
 802b0f2:	e7f7      	b.n	802b0e4 <__swsetup_r+0x98>
 802b0f4:	24000078 	.word	0x24000078

0802b0f8 <_calloc_r>:
 802b0f8:	b570      	push	{r4, r5, r6, lr}
 802b0fa:	fba1 5402 	umull	r5, r4, r1, r2
 802b0fe:	b93c      	cbnz	r4, 802b110 <_calloc_r+0x18>
 802b100:	4629      	mov	r1, r5
 802b102:	f7fd fd31 	bl	8028b68 <_malloc_r>
 802b106:	4606      	mov	r6, r0
 802b108:	b928      	cbnz	r0, 802b116 <_calloc_r+0x1e>
 802b10a:	2600      	movs	r6, #0
 802b10c:	4630      	mov	r0, r6
 802b10e:	bd70      	pop	{r4, r5, r6, pc}
 802b110:	220c      	movs	r2, #12
 802b112:	6002      	str	r2, [r0, #0]
 802b114:	e7f9      	b.n	802b10a <_calloc_r+0x12>
 802b116:	462a      	mov	r2, r5
 802b118:	4621      	mov	r1, r4
 802b11a:	f7fe fb1a 	bl	8029752 <memset>
 802b11e:	e7f5      	b.n	802b10c <_calloc_r+0x14>

0802b120 <__ascii_mbtowc>:
 802b120:	b082      	sub	sp, #8
 802b122:	b901      	cbnz	r1, 802b126 <__ascii_mbtowc+0x6>
 802b124:	a901      	add	r1, sp, #4
 802b126:	b142      	cbz	r2, 802b13a <__ascii_mbtowc+0x1a>
 802b128:	b14b      	cbz	r3, 802b13e <__ascii_mbtowc+0x1e>
 802b12a:	7813      	ldrb	r3, [r2, #0]
 802b12c:	600b      	str	r3, [r1, #0]
 802b12e:	7812      	ldrb	r2, [r2, #0]
 802b130:	1e10      	subs	r0, r2, #0
 802b132:	bf18      	it	ne
 802b134:	2001      	movne	r0, #1
 802b136:	b002      	add	sp, #8
 802b138:	4770      	bx	lr
 802b13a:	4610      	mov	r0, r2
 802b13c:	e7fb      	b.n	802b136 <__ascii_mbtowc+0x16>
 802b13e:	f06f 0001 	mvn.w	r0, #1
 802b142:	e7f8      	b.n	802b136 <__ascii_mbtowc+0x16>

0802b144 <__ascii_wctomb>:
 802b144:	4603      	mov	r3, r0
 802b146:	4608      	mov	r0, r1
 802b148:	b141      	cbz	r1, 802b15c <__ascii_wctomb+0x18>
 802b14a:	2aff      	cmp	r2, #255	@ 0xff
 802b14c:	d904      	bls.n	802b158 <__ascii_wctomb+0x14>
 802b14e:	228a      	movs	r2, #138	@ 0x8a
 802b150:	601a      	str	r2, [r3, #0]
 802b152:	f04f 30ff 	mov.w	r0, #4294967295
 802b156:	4770      	bx	lr
 802b158:	700a      	strb	r2, [r1, #0]
 802b15a:	2001      	movs	r0, #1
 802b15c:	4770      	bx	lr

0802b15e <__swhatbuf_r>:
 802b15e:	b570      	push	{r4, r5, r6, lr}
 802b160:	460c      	mov	r4, r1
 802b162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b166:	2900      	cmp	r1, #0
 802b168:	b096      	sub	sp, #88	@ 0x58
 802b16a:	4615      	mov	r5, r2
 802b16c:	461e      	mov	r6, r3
 802b16e:	da0d      	bge.n	802b18c <__swhatbuf_r+0x2e>
 802b170:	89a3      	ldrh	r3, [r4, #12]
 802b172:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802b176:	f04f 0100 	mov.w	r1, #0
 802b17a:	bf14      	ite	ne
 802b17c:	2340      	movne	r3, #64	@ 0x40
 802b17e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802b182:	2000      	movs	r0, #0
 802b184:	6031      	str	r1, [r6, #0]
 802b186:	602b      	str	r3, [r5, #0]
 802b188:	b016      	add	sp, #88	@ 0x58
 802b18a:	bd70      	pop	{r4, r5, r6, pc}
 802b18c:	466a      	mov	r2, sp
 802b18e:	f000 f849 	bl	802b224 <_fstat_r>
 802b192:	2800      	cmp	r0, #0
 802b194:	dbec      	blt.n	802b170 <__swhatbuf_r+0x12>
 802b196:	9901      	ldr	r1, [sp, #4]
 802b198:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802b19c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802b1a0:	4259      	negs	r1, r3
 802b1a2:	4159      	adcs	r1, r3
 802b1a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802b1a8:	e7eb      	b.n	802b182 <__swhatbuf_r+0x24>

0802b1aa <__smakebuf_r>:
 802b1aa:	898b      	ldrh	r3, [r1, #12]
 802b1ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802b1ae:	079d      	lsls	r5, r3, #30
 802b1b0:	4606      	mov	r6, r0
 802b1b2:	460c      	mov	r4, r1
 802b1b4:	d507      	bpl.n	802b1c6 <__smakebuf_r+0x1c>
 802b1b6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802b1ba:	6023      	str	r3, [r4, #0]
 802b1bc:	6123      	str	r3, [r4, #16]
 802b1be:	2301      	movs	r3, #1
 802b1c0:	6163      	str	r3, [r4, #20]
 802b1c2:	b003      	add	sp, #12
 802b1c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b1c6:	ab01      	add	r3, sp, #4
 802b1c8:	466a      	mov	r2, sp
 802b1ca:	f7ff ffc8 	bl	802b15e <__swhatbuf_r>
 802b1ce:	9f00      	ldr	r7, [sp, #0]
 802b1d0:	4605      	mov	r5, r0
 802b1d2:	4639      	mov	r1, r7
 802b1d4:	4630      	mov	r0, r6
 802b1d6:	f7fd fcc7 	bl	8028b68 <_malloc_r>
 802b1da:	b948      	cbnz	r0, 802b1f0 <__smakebuf_r+0x46>
 802b1dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b1e0:	059a      	lsls	r2, r3, #22
 802b1e2:	d4ee      	bmi.n	802b1c2 <__smakebuf_r+0x18>
 802b1e4:	f023 0303 	bic.w	r3, r3, #3
 802b1e8:	f043 0302 	orr.w	r3, r3, #2
 802b1ec:	81a3      	strh	r3, [r4, #12]
 802b1ee:	e7e2      	b.n	802b1b6 <__smakebuf_r+0xc>
 802b1f0:	89a3      	ldrh	r3, [r4, #12]
 802b1f2:	6020      	str	r0, [r4, #0]
 802b1f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802b1f8:	81a3      	strh	r3, [r4, #12]
 802b1fa:	9b01      	ldr	r3, [sp, #4]
 802b1fc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802b200:	b15b      	cbz	r3, 802b21a <__smakebuf_r+0x70>
 802b202:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b206:	4630      	mov	r0, r6
 802b208:	f000 f81e 	bl	802b248 <_isatty_r>
 802b20c:	b128      	cbz	r0, 802b21a <__smakebuf_r+0x70>
 802b20e:	89a3      	ldrh	r3, [r4, #12]
 802b210:	f023 0303 	bic.w	r3, r3, #3
 802b214:	f043 0301 	orr.w	r3, r3, #1
 802b218:	81a3      	strh	r3, [r4, #12]
 802b21a:	89a3      	ldrh	r3, [r4, #12]
 802b21c:	431d      	orrs	r5, r3
 802b21e:	81a5      	strh	r5, [r4, #12]
 802b220:	e7cf      	b.n	802b1c2 <__smakebuf_r+0x18>
	...

0802b224 <_fstat_r>:
 802b224:	b538      	push	{r3, r4, r5, lr}
 802b226:	4d07      	ldr	r5, [pc, #28]	@ (802b244 <_fstat_r+0x20>)
 802b228:	2300      	movs	r3, #0
 802b22a:	4604      	mov	r4, r0
 802b22c:	4608      	mov	r0, r1
 802b22e:	4611      	mov	r1, r2
 802b230:	602b      	str	r3, [r5, #0]
 802b232:	f7dc fc7a 	bl	8007b2a <_fstat>
 802b236:	1c43      	adds	r3, r0, #1
 802b238:	d102      	bne.n	802b240 <_fstat_r+0x1c>
 802b23a:	682b      	ldr	r3, [r5, #0]
 802b23c:	b103      	cbz	r3, 802b240 <_fstat_r+0x1c>
 802b23e:	6023      	str	r3, [r4, #0]
 802b240:	bd38      	pop	{r3, r4, r5, pc}
 802b242:	bf00      	nop
 802b244:	2400380c 	.word	0x2400380c

0802b248 <_isatty_r>:
 802b248:	b538      	push	{r3, r4, r5, lr}
 802b24a:	4d06      	ldr	r5, [pc, #24]	@ (802b264 <_isatty_r+0x1c>)
 802b24c:	2300      	movs	r3, #0
 802b24e:	4604      	mov	r4, r0
 802b250:	4608      	mov	r0, r1
 802b252:	602b      	str	r3, [r5, #0]
 802b254:	f7dc fc79 	bl	8007b4a <_isatty>
 802b258:	1c43      	adds	r3, r0, #1
 802b25a:	d102      	bne.n	802b262 <_isatty_r+0x1a>
 802b25c:	682b      	ldr	r3, [r5, #0]
 802b25e:	b103      	cbz	r3, 802b262 <_isatty_r+0x1a>
 802b260:	6023      	str	r3, [r4, #0]
 802b262:	bd38      	pop	{r3, r4, r5, pc}
 802b264:	2400380c 	.word	0x2400380c

0802b268 <_init>:
 802b268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b26a:	bf00      	nop
 802b26c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b26e:	bc08      	pop	{r3}
 802b270:	469e      	mov	lr, r3
 802b272:	4770      	bx	lr

0802b274 <_fini>:
 802b274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b276:	bf00      	nop
 802b278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b27a:	bc08      	pop	{r3}
 802b27c:	469e      	mov	lr, r3
 802b27e:	4770      	bx	lr
