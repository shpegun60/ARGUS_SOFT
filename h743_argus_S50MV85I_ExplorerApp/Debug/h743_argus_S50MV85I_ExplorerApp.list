
h743_argus_S50MV85I_ExplorerApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002c808  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006384  0802cad8  0802cad8  0002dad8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08032e5c  08032e5c  00033e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08032e64  08032e64  00033e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000008  08032e6c  08032e6c  00033e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000234  24000000  08032e74  00034000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000035e0  24000234  080330a8  00034234  2**2
                  ALLOC
  8 ._user_heap_stack 00007004  24003814  080330a8  00034814  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00034234  2**0
                  CONTENTS, READONLY
 10 .debug_info   00030588  00000000  00000000  00034262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000724e  00000000  00000000  000647ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002230  00000000  00000000  0006ba38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000019fb  00000000  00000000  0006dc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039b94  00000000  00000000  0006f663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003561a  00000000  00000000  000a91f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001638bf  00000000  00000000  000de811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      0000008c  00000000  00000000  002420d0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009924  00000000  00000000  0024215c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007d  00000000  00000000  0024ba80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000234 	.word	0x24000234
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0802cac0 	.word	0x0802cac0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000238 	.word	0x24000238
 800030c:	0802cac0 	.word	0x0802cac0

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_ldivmod>:
 8000738:	b97b      	cbnz	r3, 800075a <__aeabi_ldivmod+0x22>
 800073a:	b972      	cbnz	r2, 800075a <__aeabi_ldivmod+0x22>
 800073c:	2900      	cmp	r1, #0
 800073e:	bfbe      	ittt	lt
 8000740:	2000      	movlt	r0, #0
 8000742:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000746:	e006      	blt.n	8000756 <__aeabi_ldivmod+0x1e>
 8000748:	bf08      	it	eq
 800074a:	2800      	cmpeq	r0, #0
 800074c:	bf1c      	itt	ne
 800074e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000752:	f04f 30ff 	movne.w	r0, #4294967295
 8000756:	f000 b9ed 	b.w	8000b34 <__aeabi_idiv0>
 800075a:	f1ad 0c08 	sub.w	ip, sp, #8
 800075e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000762:	2900      	cmp	r1, #0
 8000764:	db09      	blt.n	800077a <__aeabi_ldivmod+0x42>
 8000766:	2b00      	cmp	r3, #0
 8000768:	db1a      	blt.n	80007a0 <__aeabi_ldivmod+0x68>
 800076a:	f000 f885 	bl	8000878 <__udivmoddi4>
 800076e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000772:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000776:	b004      	add	sp, #16
 8000778:	4770      	bx	lr
 800077a:	4240      	negs	r0, r0
 800077c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000780:	2b00      	cmp	r3, #0
 8000782:	db1b      	blt.n	80007bc <__aeabi_ldivmod+0x84>
 8000784:	f000 f878 	bl	8000878 <__udivmoddi4>
 8000788:	f8dd e004 	ldr.w	lr, [sp, #4]
 800078c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000790:	b004      	add	sp, #16
 8000792:	4240      	negs	r0, r0
 8000794:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000798:	4252      	negs	r2, r2
 800079a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800079e:	4770      	bx	lr
 80007a0:	4252      	negs	r2, r2
 80007a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007a6:	f000 f867 	bl	8000878 <__udivmoddi4>
 80007aa:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007b2:	b004      	add	sp, #16
 80007b4:	4240      	negs	r0, r0
 80007b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ba:	4770      	bx	lr
 80007bc:	4252      	negs	r2, r2
 80007be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c2:	f000 f859 	bl	8000878 <__udivmoddi4>
 80007c6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007ce:	b004      	add	sp, #16
 80007d0:	4252      	negs	r2, r2
 80007d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007d6:	4770      	bx	lr

080007d8 <__aeabi_uldivmod>:
 80007d8:	b953      	cbnz	r3, 80007f0 <__aeabi_uldivmod+0x18>
 80007da:	b94a      	cbnz	r2, 80007f0 <__aeabi_uldivmod+0x18>
 80007dc:	2900      	cmp	r1, #0
 80007de:	bf08      	it	eq
 80007e0:	2800      	cmpeq	r0, #0
 80007e2:	bf1c      	itt	ne
 80007e4:	f04f 31ff 	movne.w	r1, #4294967295
 80007e8:	f04f 30ff 	movne.w	r0, #4294967295
 80007ec:	f000 b9a2 	b.w	8000b34 <__aeabi_idiv0>
 80007f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f8:	f000 f83e 	bl	8000878 <__udivmoddi4>
 80007fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000800:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000804:	b004      	add	sp, #16
 8000806:	4770      	bx	lr

08000808 <__aeabi_d2lz>:
 8000808:	b508      	push	{r3, lr}
 800080a:	4602      	mov	r2, r0
 800080c:	460b      	mov	r3, r1
 800080e:	ec43 2b17 	vmov	d7, r2, r3
 8000812:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800081a:	d403      	bmi.n	8000824 <__aeabi_d2lz+0x1c>
 800081c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000820:	f000 b80a 	b.w	8000838 <__aeabi_d2ulz>
 8000824:	eeb1 7b47 	vneg.f64	d7, d7
 8000828:	ec51 0b17 	vmov	r0, r1, d7
 800082c:	f000 f804 	bl	8000838 <__aeabi_d2ulz>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	bd08      	pop	{r3, pc}

08000838 <__aeabi_d2ulz>:
 8000838:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000868 <__aeabi_d2ulz+0x30>
 800083c:	ec41 0b17 	vmov	d7, r0, r1
 8000840:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000870 <__aeabi_d2ulz+0x38>
 8000844:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000848:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800084c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000850:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000854:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000858:	ee16 1a10 	vmov	r1, s12
 800085c:	ee17 0a90 	vmov	r0, s15
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	f3af 8000 	nop.w
 8000868:	00000000 	.word	0x00000000
 800086c:	3df00000 	.word	0x3df00000
 8000870:	00000000 	.word	0x00000000
 8000874:	41f00000 	.word	0x41f00000

08000878 <__udivmoddi4>:
 8000878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800087c:	9d08      	ldr	r5, [sp, #32]
 800087e:	460c      	mov	r4, r1
 8000880:	2b00      	cmp	r3, #0
 8000882:	d14e      	bne.n	8000922 <__udivmoddi4+0xaa>
 8000884:	4694      	mov	ip, r2
 8000886:	458c      	cmp	ip, r1
 8000888:	4686      	mov	lr, r0
 800088a:	fab2 f282 	clz	r2, r2
 800088e:	d962      	bls.n	8000956 <__udivmoddi4+0xde>
 8000890:	b14a      	cbz	r2, 80008a6 <__udivmoddi4+0x2e>
 8000892:	f1c2 0320 	rsb	r3, r2, #32
 8000896:	4091      	lsls	r1, r2
 8000898:	fa20 f303 	lsr.w	r3, r0, r3
 800089c:	fa0c fc02 	lsl.w	ip, ip, r2
 80008a0:	4319      	orrs	r1, r3
 80008a2:	fa00 fe02 	lsl.w	lr, r0, r2
 80008a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008aa:	fa1f f68c 	uxth.w	r6, ip
 80008ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80008b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008b6:	fb07 1114 	mls	r1, r7, r4, r1
 80008ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008be:	fb04 f106 	mul.w	r1, r4, r6
 80008c2:	4299      	cmp	r1, r3
 80008c4:	d90a      	bls.n	80008dc <__udivmoddi4+0x64>
 80008c6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ca:	f104 30ff 	add.w	r0, r4, #4294967295
 80008ce:	f080 8112 	bcs.w	8000af6 <__udivmoddi4+0x27e>
 80008d2:	4299      	cmp	r1, r3
 80008d4:	f240 810f 	bls.w	8000af6 <__udivmoddi4+0x27e>
 80008d8:	3c02      	subs	r4, #2
 80008da:	4463      	add	r3, ip
 80008dc:	1a59      	subs	r1, r3, r1
 80008de:	fa1f f38e 	uxth.w	r3, lr
 80008e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80008e6:	fb07 1110 	mls	r1, r7, r0, r1
 80008ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ee:	fb00 f606 	mul.w	r6, r0, r6
 80008f2:	429e      	cmp	r6, r3
 80008f4:	d90a      	bls.n	800090c <__udivmoddi4+0x94>
 80008f6:	eb1c 0303 	adds.w	r3, ip, r3
 80008fa:	f100 31ff 	add.w	r1, r0, #4294967295
 80008fe:	f080 80fc 	bcs.w	8000afa <__udivmoddi4+0x282>
 8000902:	429e      	cmp	r6, r3
 8000904:	f240 80f9 	bls.w	8000afa <__udivmoddi4+0x282>
 8000908:	4463      	add	r3, ip
 800090a:	3802      	subs	r0, #2
 800090c:	1b9b      	subs	r3, r3, r6
 800090e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000912:	2100      	movs	r1, #0
 8000914:	b11d      	cbz	r5, 800091e <__udivmoddi4+0xa6>
 8000916:	40d3      	lsrs	r3, r2
 8000918:	2200      	movs	r2, #0
 800091a:	e9c5 3200 	strd	r3, r2, [r5]
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	428b      	cmp	r3, r1
 8000924:	d905      	bls.n	8000932 <__udivmoddi4+0xba>
 8000926:	b10d      	cbz	r5, 800092c <__udivmoddi4+0xb4>
 8000928:	e9c5 0100 	strd	r0, r1, [r5]
 800092c:	2100      	movs	r1, #0
 800092e:	4608      	mov	r0, r1
 8000930:	e7f5      	b.n	800091e <__udivmoddi4+0xa6>
 8000932:	fab3 f183 	clz	r1, r3
 8000936:	2900      	cmp	r1, #0
 8000938:	d146      	bne.n	80009c8 <__udivmoddi4+0x150>
 800093a:	42a3      	cmp	r3, r4
 800093c:	d302      	bcc.n	8000944 <__udivmoddi4+0xcc>
 800093e:	4290      	cmp	r0, r2
 8000940:	f0c0 80f0 	bcc.w	8000b24 <__udivmoddi4+0x2ac>
 8000944:	1a86      	subs	r6, r0, r2
 8000946:	eb64 0303 	sbc.w	r3, r4, r3
 800094a:	2001      	movs	r0, #1
 800094c:	2d00      	cmp	r5, #0
 800094e:	d0e6      	beq.n	800091e <__udivmoddi4+0xa6>
 8000950:	e9c5 6300 	strd	r6, r3, [r5]
 8000954:	e7e3      	b.n	800091e <__udivmoddi4+0xa6>
 8000956:	2a00      	cmp	r2, #0
 8000958:	f040 8090 	bne.w	8000a7c <__udivmoddi4+0x204>
 800095c:	eba1 040c 	sub.w	r4, r1, ip
 8000960:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000964:	fa1f f78c 	uxth.w	r7, ip
 8000968:	2101      	movs	r1, #1
 800096a:	fbb4 f6f8 	udiv	r6, r4, r8
 800096e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000972:	fb08 4416 	mls	r4, r8, r6, r4
 8000976:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800097a:	fb07 f006 	mul.w	r0, r7, r6
 800097e:	4298      	cmp	r0, r3
 8000980:	d908      	bls.n	8000994 <__udivmoddi4+0x11c>
 8000982:	eb1c 0303 	adds.w	r3, ip, r3
 8000986:	f106 34ff 	add.w	r4, r6, #4294967295
 800098a:	d202      	bcs.n	8000992 <__udivmoddi4+0x11a>
 800098c:	4298      	cmp	r0, r3
 800098e:	f200 80cd 	bhi.w	8000b2c <__udivmoddi4+0x2b4>
 8000992:	4626      	mov	r6, r4
 8000994:	1a1c      	subs	r4, r3, r0
 8000996:	fa1f f38e 	uxth.w	r3, lr
 800099a:	fbb4 f0f8 	udiv	r0, r4, r8
 800099e:	fb08 4410 	mls	r4, r8, r0, r4
 80009a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009a6:	fb00 f707 	mul.w	r7, r0, r7
 80009aa:	429f      	cmp	r7, r3
 80009ac:	d908      	bls.n	80009c0 <__udivmoddi4+0x148>
 80009ae:	eb1c 0303 	adds.w	r3, ip, r3
 80009b2:	f100 34ff 	add.w	r4, r0, #4294967295
 80009b6:	d202      	bcs.n	80009be <__udivmoddi4+0x146>
 80009b8:	429f      	cmp	r7, r3
 80009ba:	f200 80b0 	bhi.w	8000b1e <__udivmoddi4+0x2a6>
 80009be:	4620      	mov	r0, r4
 80009c0:	1bdb      	subs	r3, r3, r7
 80009c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009c6:	e7a5      	b.n	8000914 <__udivmoddi4+0x9c>
 80009c8:	f1c1 0620 	rsb	r6, r1, #32
 80009cc:	408b      	lsls	r3, r1
 80009ce:	fa22 f706 	lsr.w	r7, r2, r6
 80009d2:	431f      	orrs	r7, r3
 80009d4:	fa20 fc06 	lsr.w	ip, r0, r6
 80009d8:	fa04 f301 	lsl.w	r3, r4, r1
 80009dc:	ea43 030c 	orr.w	r3, r3, ip
 80009e0:	40f4      	lsrs	r4, r6
 80009e2:	fa00 f801 	lsl.w	r8, r0, r1
 80009e6:	0c38      	lsrs	r0, r7, #16
 80009e8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009ec:	fbb4 fef0 	udiv	lr, r4, r0
 80009f0:	fa1f fc87 	uxth.w	ip, r7
 80009f4:	fb00 441e 	mls	r4, r0, lr, r4
 80009f8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009fc:	fb0e f90c 	mul.w	r9, lr, ip
 8000a00:	45a1      	cmp	r9, r4
 8000a02:	fa02 f201 	lsl.w	r2, r2, r1
 8000a06:	d90a      	bls.n	8000a1e <__udivmoddi4+0x1a6>
 8000a08:	193c      	adds	r4, r7, r4
 8000a0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a0e:	f080 8084 	bcs.w	8000b1a <__udivmoddi4+0x2a2>
 8000a12:	45a1      	cmp	r9, r4
 8000a14:	f240 8081 	bls.w	8000b1a <__udivmoddi4+0x2a2>
 8000a18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a1c:	443c      	add	r4, r7
 8000a1e:	eba4 0409 	sub.w	r4, r4, r9
 8000a22:	fa1f f983 	uxth.w	r9, r3
 8000a26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000a2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a36:	45a4      	cmp	ip, r4
 8000a38:	d907      	bls.n	8000a4a <__udivmoddi4+0x1d2>
 8000a3a:	193c      	adds	r4, r7, r4
 8000a3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a40:	d267      	bcs.n	8000b12 <__udivmoddi4+0x29a>
 8000a42:	45a4      	cmp	ip, r4
 8000a44:	d965      	bls.n	8000b12 <__udivmoddi4+0x29a>
 8000a46:	3b02      	subs	r3, #2
 8000a48:	443c      	add	r4, r7
 8000a4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000a52:	eba4 040c 	sub.w	r4, r4, ip
 8000a56:	429c      	cmp	r4, r3
 8000a58:	46ce      	mov	lr, r9
 8000a5a:	469c      	mov	ip, r3
 8000a5c:	d351      	bcc.n	8000b02 <__udivmoddi4+0x28a>
 8000a5e:	d04e      	beq.n	8000afe <__udivmoddi4+0x286>
 8000a60:	b155      	cbz	r5, 8000a78 <__udivmoddi4+0x200>
 8000a62:	ebb8 030e 	subs.w	r3, r8, lr
 8000a66:	eb64 040c 	sbc.w	r4, r4, ip
 8000a6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a6e:	40cb      	lsrs	r3, r1
 8000a70:	431e      	orrs	r6, r3
 8000a72:	40cc      	lsrs	r4, r1
 8000a74:	e9c5 6400 	strd	r6, r4, [r5]
 8000a78:	2100      	movs	r1, #0
 8000a7a:	e750      	b.n	800091e <__udivmoddi4+0xa6>
 8000a7c:	f1c2 0320 	rsb	r3, r2, #32
 8000a80:	fa20 f103 	lsr.w	r1, r0, r3
 8000a84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a88:	fa24 f303 	lsr.w	r3, r4, r3
 8000a8c:	4094      	lsls	r4, r2
 8000a8e:	430c      	orrs	r4, r1
 8000a90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a98:	fa1f f78c 	uxth.w	r7, ip
 8000a9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa0:	fb08 3110 	mls	r1, r8, r0, r3
 8000aa4:	0c23      	lsrs	r3, r4, #16
 8000aa6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aaa:	fb00 f107 	mul.w	r1, r0, r7
 8000aae:	4299      	cmp	r1, r3
 8000ab0:	d908      	bls.n	8000ac4 <__udivmoddi4+0x24c>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000aba:	d22c      	bcs.n	8000b16 <__udivmoddi4+0x29e>
 8000abc:	4299      	cmp	r1, r3
 8000abe:	d92a      	bls.n	8000b16 <__udivmoddi4+0x29e>
 8000ac0:	3802      	subs	r0, #2
 8000ac2:	4463      	add	r3, ip
 8000ac4:	1a5b      	subs	r3, r3, r1
 8000ac6:	b2a4      	uxth	r4, r4
 8000ac8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000acc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ad0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ad4:	fb01 f307 	mul.w	r3, r1, r7
 8000ad8:	42a3      	cmp	r3, r4
 8000ada:	d908      	bls.n	8000aee <__udivmoddi4+0x276>
 8000adc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ae0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ae4:	d213      	bcs.n	8000b0e <__udivmoddi4+0x296>
 8000ae6:	42a3      	cmp	r3, r4
 8000ae8:	d911      	bls.n	8000b0e <__udivmoddi4+0x296>
 8000aea:	3902      	subs	r1, #2
 8000aec:	4464      	add	r4, ip
 8000aee:	1ae4      	subs	r4, r4, r3
 8000af0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000af4:	e739      	b.n	800096a <__udivmoddi4+0xf2>
 8000af6:	4604      	mov	r4, r0
 8000af8:	e6f0      	b.n	80008dc <__udivmoddi4+0x64>
 8000afa:	4608      	mov	r0, r1
 8000afc:	e706      	b.n	800090c <__udivmoddi4+0x94>
 8000afe:	45c8      	cmp	r8, r9
 8000b00:	d2ae      	bcs.n	8000a60 <__udivmoddi4+0x1e8>
 8000b02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b0a:	3801      	subs	r0, #1
 8000b0c:	e7a8      	b.n	8000a60 <__udivmoddi4+0x1e8>
 8000b0e:	4631      	mov	r1, r6
 8000b10:	e7ed      	b.n	8000aee <__udivmoddi4+0x276>
 8000b12:	4603      	mov	r3, r0
 8000b14:	e799      	b.n	8000a4a <__udivmoddi4+0x1d2>
 8000b16:	4630      	mov	r0, r6
 8000b18:	e7d4      	b.n	8000ac4 <__udivmoddi4+0x24c>
 8000b1a:	46d6      	mov	lr, sl
 8000b1c:	e77f      	b.n	8000a1e <__udivmoddi4+0x1a6>
 8000b1e:	4463      	add	r3, ip
 8000b20:	3802      	subs	r0, #2
 8000b22:	e74d      	b.n	80009c0 <__udivmoddi4+0x148>
 8000b24:	4606      	mov	r6, r0
 8000b26:	4623      	mov	r3, r4
 8000b28:	4608      	mov	r0, r1
 8000b2a:	e70f      	b.n	800094c <__udivmoddi4+0xd4>
 8000b2c:	3e02      	subs	r6, #2
 8000b2e:	4463      	add	r3, ip
 8000b30:	e730      	b.n	8000994 <__udivmoddi4+0x11c>
 8000b32:	bf00      	nop

08000b34 <__aeabi_idiv0>:
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <RxCmd_SoftwareInfo>:
/*******************************************************************************
 * Software Information Commands
 ******************************************************************************/

static status_t RxCmd_SoftwareInfo(sci_device_t deviceID, sci_frame_t * frame)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	6039      	str	r1, [r7, #0]
 8000b42:	71fb      	strb	r3, [r7, #7]
    (void)frame; // unused parameter
    return SCI_SendCommand(deviceID, CMD_SOFTWARE_INFO, 0, 0);
 8000b44:	79f8      	ldrb	r0, [r7, #7]
 8000b46:	2300      	movs	r3, #0
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2105      	movs	r1, #5
 8000b4c:	f004 f92c 	bl	8004da8 <SCI_SendCommand>
 8000b50:	4603      	mov	r3, r0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <TxCmd_SoftwareInfo>:
static status_t TxCmd_SoftwareInfo(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param,
                                   sci_data_t data)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08c      	sub	sp, #48	@ 0x30
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	4603      	mov	r3, r0
 8000b6a:	73fb      	strb	r3, [r7, #15]
    (void)param;
    (void)data;

    SCI_Frame_Queue32u(frame, EXPLORER_VERSION);
 8000b6c:	495e      	ldr	r1, [pc, #376]	@ (8000ce8 <TxCmd_SoftwareInfo+0x18c>)
 8000b6e:	68b8      	ldr	r0, [r7, #8]
 8000b70:	f005 fa72 	bl	8006058 <SCI_Frame_Queue32u>
    SCI_Frame_Queue32u(frame, Argus_GetAPIVersion());
 8000b74:	f014 fdba 	bl	80156ec <Argus_GetAPIVersion>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	68b8      	ldr	r0, [r7, #8]
 8000b7e:	f005 fa6b 	bl	8006058 <SCI_Frame_Queue32u>

    if (deviceID == 0)
 8000b82:	7bfb      	ldrb	r3, [r7, #15]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d143      	bne.n	8000c10 <TxCmd_SoftwareInfo+0xb4>
    {
        const uint8_t deviceCount = ExplorerApp_GetInitializedExplorerCount();
 8000b88:	f003 fc68 	bl	800445c <ExplorerApp_GetInitializedExplorerCount>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        SCI_Frame_Queue08u(frame, deviceCount);
 8000b92:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000b96:	4619      	mov	r1, r3
 8000b98:	68b8      	ldr	r0, [r7, #8]
 8000b9a:	f005 f9f1 	bl	8005f80 <SCI_Frame_Queue08u>
        for (deviceID = EXPLORER_DEVICE_ID_MIN; deviceID <= EXPLORER_DEVICE_ID_MAX; deviceID++)
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	73fb      	strb	r3, [r7, #15]
 8000ba2:	e031      	b.n	8000c08 <TxCmd_SoftwareInfo+0xac>
        {

            argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8000ba4:	7bfb      	ldrb	r3, [r7, #15]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f003 fbd8 	bl	800435c <ExplorerApp_GetArgusPtr>
 8000bac:	61f8      	str	r0, [r7, #28]
            if (argus == NULL) continue;
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d025      	beq.n	8000c00 <TxCmd_SoftwareInfo+0xa4>

            SCI_Frame_Queue08u(frame, deviceID);
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	68b8      	ldr	r0, [r7, #8]
 8000bba:	f005 f9e1 	bl	8005f80 <SCI_Frame_Queue08u>
            SCI_Frame_Queue08u(frame, Argus_GetModuleVersion(argus));
 8000bbe:	69f8      	ldr	r0, [r7, #28]
 8000bc0:	f014 fd9c 	bl	80156fc <Argus_GetModuleVersion>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	68b8      	ldr	r0, [r7, #8]
 8000bca:	f005 f9d9 	bl	8005f80 <SCI_Frame_Queue08u>
            SCI_Frame_Queue08u(frame, Argus_GetChipVersion(argus));
 8000bce:	69f8      	ldr	r0, [r7, #28]
 8000bd0:	f014 fdb4 	bl	801573c <Argus_GetChipVersion>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	68b8      	ldr	r0, [r7, #8]
 8000bda:	f005 f9d1 	bl	8005f80 <SCI_Frame_Queue08u>
            SCI_Frame_Queue08u(frame, Argus_GetLaserType(argus));
 8000bde:	69f8      	ldr	r0, [r7, #28]
 8000be0:	f014 fdcc 	bl	801577c <Argus_GetLaserType>
 8000be4:	4603      	mov	r3, r0
 8000be6:	4619      	mov	r1, r3
 8000be8:	68b8      	ldr	r0, [r7, #8]
 8000bea:	f005 f9c9 	bl	8005f80 <SCI_Frame_Queue08u>
            SCI_Frame_Queue24u(frame, Argus_GetChipID(argus));
 8000bee:	69f8      	ldr	r0, [r7, #28]
 8000bf0:	f014 fde4 	bl	80157bc <Argus_GetChipID>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	68b8      	ldr	r0, [r7, #8]
 8000bfa:	f005 f9ff 	bl	8005ffc <SCI_Frame_Queue24u>
 8000bfe:	e000      	b.n	8000c02 <TxCmd_SoftwareInfo+0xa6>
            if (argus == NULL) continue;
 8000c00:	bf00      	nop
        for (deviceID = EXPLORER_DEVICE_ID_MIN; deviceID <= EXPLORER_DEVICE_ID_MAX; deviceID++)
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
 8000c04:	3301      	adds	r3, #1
 8000c06:	73fb      	strb	r3, [r7, #15]
 8000c08:	7bfb      	ldrb	r3, [r7, #15]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d9ca      	bls.n	8000ba4 <TxCmd_SoftwareInfo+0x48>
 8000c0e:	e041      	b.n	8000c94 <TxCmd_SoftwareInfo+0x138>
        }
    }
    else
    {
        SCI_Frame_Queue08u(frame, 1);
 8000c10:	2101      	movs	r1, #1
 8000c12:	68b8      	ldr	r0, [r7, #8]
 8000c14:	f005 f9b4 	bl	8005f80 <SCI_Frame_Queue08u>
        SCI_Frame_Queue08u(frame, deviceID);
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	68b8      	ldr	r0, [r7, #8]
 8000c1e:	f005 f9af 	bl	8005f80 <SCI_Frame_Queue08u>
        argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f003 fb99 	bl	800435c <ExplorerApp_GetArgusPtr>
 8000c2a:	6278      	str	r0, [r7, #36]	@ 0x24
        if (argus != NULL)
 8000c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d020      	beq.n	8000c74 <TxCmd_SoftwareInfo+0x118>
        {
            SCI_Frame_Queue08u(frame, Argus_GetModuleVersion(argus));
 8000c32:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000c34:	f014 fd62 	bl	80156fc <Argus_GetModuleVersion>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	68b8      	ldr	r0, [r7, #8]
 8000c3e:	f005 f99f 	bl	8005f80 <SCI_Frame_Queue08u>
            SCI_Frame_Queue08u(frame, Argus_GetChipVersion(argus));
 8000c42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000c44:	f014 fd7a 	bl	801573c <Argus_GetChipVersion>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	68b8      	ldr	r0, [r7, #8]
 8000c4e:	f005 f997 	bl	8005f80 <SCI_Frame_Queue08u>
            SCI_Frame_Queue08u(frame, Argus_GetLaserType(argus));
 8000c52:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000c54:	f014 fd92 	bl	801577c <Argus_GetLaserType>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	68b8      	ldr	r0, [r7, #8]
 8000c5e:	f005 f98f 	bl	8005f80 <SCI_Frame_Queue08u>
            SCI_Frame_Queue24u(frame, Argus_GetChipID(argus));
 8000c62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000c64:	f014 fdaa 	bl	80157bc <Argus_GetChipID>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	68b8      	ldr	r0, [r7, #8]
 8000c6e:	f005 f9c5 	bl	8005ffc <SCI_Frame_Queue24u>
 8000c72:	e00f      	b.n	8000c94 <TxCmd_SoftwareInfo+0x138>
        }
        else
        {
            SCI_Frame_Queue08u(frame, 0);
 8000c74:	2100      	movs	r1, #0
 8000c76:	68b8      	ldr	r0, [r7, #8]
 8000c78:	f005 f982 	bl	8005f80 <SCI_Frame_Queue08u>
            SCI_Frame_Queue08u(frame, 0);
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	68b8      	ldr	r0, [r7, #8]
 8000c80:	f005 f97e 	bl	8005f80 <SCI_Frame_Queue08u>
            SCI_Frame_Queue08u(frame, 0);
 8000c84:	2100      	movs	r1, #0
 8000c86:	68b8      	ldr	r0, [r7, #8]
 8000c88:	f005 f97a 	bl	8005f80 <SCI_Frame_Queue08u>
            SCI_Frame_Queue24u(frame, 0);
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	68b8      	ldr	r0, [r7, #8]
 8000c90:	f005 f9b4 	bl	8005ffc <SCI_Frame_Queue24u>
        }
    }

    char const * name = "AFBR-S50 Explorer App - ";
 8000c94:	4b15      	ldr	r3, [pc, #84]	@ (8000cec <TxCmd_SoftwareInfo+0x190>)
 8000c96:	61bb      	str	r3, [r7, #24]
    for (char const * c = name; *c != '\0'; c++)
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c9c:	e008      	b.n	8000cb0 <TxCmd_SoftwareInfo+0x154>
    {
        SCI_Frame_PutChar(*c, frame);
 8000c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	68b9      	ldr	r1, [r7, #8]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f005 fba4 	bl	80063f2 <SCI_Frame_PutChar>
    for (char const * c = name; *c != '\0'; c++)
 8000caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cac:	3301      	adds	r3, #1
 8000cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d1f2      	bne.n	8000c9e <TxCmd_SoftwareInfo+0x142>
    }
    char const * build = Argus_GetBuildNumber();
 8000cb8:	f014 fd1c 	bl	80156f4 <Argus_GetBuildNumber>
 8000cbc:	6178      	str	r0, [r7, #20]
    for (char const * c = build; *c != '\0'; c++)
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cc2:	e008      	b.n	8000cd6 <TxCmd_SoftwareInfo+0x17a>
    {
        SCI_Frame_PutChar(*c, frame);
 8000cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	68b9      	ldr	r1, [r7, #8]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f005 fb91 	bl	80063f2 <SCI_Frame_PutChar>
    for (char const * c = build; *c != '\0'; c++)
 8000cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d1f2      	bne.n	8000cc4 <TxCmd_SoftwareInfo+0x168>
    }

    return STATUS_OK;
 8000cde:	2300      	movs	r3, #0
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3730      	adds	r7, #48	@ 0x30
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	01050006 	.word	0x01050006
 8000cec:	0802cad8 	.word	0x0802cad8

08000cf0 <RxCmd_SoftwareVersion>:

static status_t RxCmd_SoftwareVersion(sci_device_t deviceID, sci_frame_t * frame)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	71fb      	strb	r3, [r7, #7]
    (void)frame; // unused parameter
    return SCI_SendCommand(deviceID, CMD_SOFTWARE_VERSION, 0, 0);
 8000cfc:	79f8      	ldrb	r0, [r7, #7]
 8000cfe:	2300      	movs	r3, #0
 8000d00:	2200      	movs	r2, #0
 8000d02:	210c      	movs	r1, #12
 8000d04:	f004 f850 	bl	8004da8 <SCI_SendCommand>
 8000d08:	4603      	mov	r3, r0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <TxCmd_SoftwareVersion>:
static status_t TxCmd_SoftwareVersion(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
 8000d1c:	603b      	str	r3, [r7, #0]
 8000d1e:	4603      	mov	r3, r0
 8000d20:	73fb      	strb	r3, [r7, #15]
    (void)param;
    (void)data;
    (void)deviceID;
    SCI_Frame_Queue32u(frame, Argus_GetAPIVersion());
 8000d22:	f014 fce3 	bl	80156ec <Argus_GetAPIVersion>
 8000d26:	4603      	mov	r3, r0
 8000d28:	4619      	mov	r1, r3
 8000d2a:	68b8      	ldr	r0, [r7, #8]
 8000d2c:	f005 f994 	bl	8006058 <SCI_Frame_Queue32u>

    char const * build = Argus_GetBuildNumber();
 8000d30:	f014 fce0 	bl	80156f4 <Argus_GetBuildNumber>
 8000d34:	6138      	str	r0, [r7, #16]
    for(char const * c = build; *c != '\0'; c++)
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	e008      	b.n	8000d4e <TxCmd_SoftwareVersion+0x3c>
    {
        SCI_Frame_PutChar(*c, frame);
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	68b9      	ldr	r1, [r7, #8]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f005 fb55 	bl	80063f2 <SCI_Frame_PutChar>
    for(char const * c = build; *c != '\0'; c++)
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d1f2      	bne.n	8000d3c <TxCmd_SoftwareVersion+0x2a>
    }
    return STATUS_OK;
 8000d56:	2300      	movs	r3, #0
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <RxCmd_ModuleType>:

static status_t RxCmd_ModuleType(sci_device_t deviceID, sci_frame_t * frame)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	71fb      	strb	r3, [r7, #7]
    (void)frame; // unused parameter
    return SCI_SendCommand(deviceID, CMD_MODULE_TYPE, 0, 0);
 8000d6c:	79f8      	ldrb	r0, [r7, #7]
 8000d6e:	2300      	movs	r3, #0
 8000d70:	2200      	movs	r2, #0
 8000d72:	210e      	movs	r1, #14
 8000d74:	f004 f818 	bl	8004da8 <SCI_SendCommand>
 8000d78:	4603      	mov	r3, r0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <TxCmd_ModuleType>:
static status_t TxCmd_ModuleType(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	4603      	mov	r3, r0
 8000d90:	73fb      	strb	r3, [r7, #15]
    (void)param;
    (void)data;
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f003 fae1 	bl	800435c <ExplorerApp_GetArgusPtr>
 8000d9a:	6178      	str	r0, [r7, #20]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d102      	bne.n	8000da8 <TxCmd_ModuleType+0x26>
 8000da2:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8000da6:	e018      	b.n	8000dda <TxCmd_ModuleType+0x58>
    SCI_Frame_Queue08u(frame, Argus_GetModuleVersion(argus));
 8000da8:	6978      	ldr	r0, [r7, #20]
 8000daa:	f014 fca7 	bl	80156fc <Argus_GetModuleVersion>
 8000dae:	4603      	mov	r3, r0
 8000db0:	4619      	mov	r1, r3
 8000db2:	68b8      	ldr	r0, [r7, #8]
 8000db4:	f005 f8e4 	bl	8005f80 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, Argus_GetChipVersion(argus));
 8000db8:	6978      	ldr	r0, [r7, #20]
 8000dba:	f014 fcbf 	bl	801573c <Argus_GetChipVersion>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	68b8      	ldr	r0, [r7, #8]
 8000dc4:	f005 f8dc 	bl	8005f80 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, Argus_GetLaserType(argus));
 8000dc8:	6978      	ldr	r0, [r7, #20]
 8000dca:	f014 fcd7 	bl	801577c <Argus_GetLaserType>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	68b8      	ldr	r0, [r7, #8]
 8000dd4:	f005 f8d4 	bl	8005f80 <SCI_Frame_Queue08u>
    return STATUS_OK;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <RxCmd_ModuleUID>:
static status_t RxCmd_ModuleUID(sci_device_t deviceID, sci_frame_t * frame)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	6039      	str	r1, [r7, #0]
 8000dec:	71fb      	strb	r3, [r7, #7]
    (void)frame; // unused parameter
    return SCI_SendCommand(deviceID, CMD_MODULE_UID, 0, 0);
 8000dee:	79f8      	ldrb	r0, [r7, #7]
 8000df0:	2300      	movs	r3, #0
 8000df2:	2200      	movs	r2, #0
 8000df4:	210f      	movs	r1, #15
 8000df6:	f003 ffd7 	bl	8004da8 <SCI_SendCommand>
 8000dfa:	4603      	mov	r3, r0
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <TxCmd_ModuleUID>:
static status_t TxCmd_ModuleUID(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	4603      	mov	r3, r0
 8000e12:	73fb      	strb	r3, [r7, #15]
    (void)param;
    (void)data;
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f003 faa0 	bl	800435c <ExplorerApp_GetArgusPtr>
 8000e1c:	6178      	str	r0, [r7, #20]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d102      	bne.n	8000e2a <TxCmd_ModuleUID+0x26>
 8000e24:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8000e28:	e008      	b.n	8000e3c <TxCmd_ModuleUID+0x38>
    SCI_Frame_Queue24u(frame, Argus_GetChipID(argus));
 8000e2a:	6978      	ldr	r0, [r7, #20]
 8000e2c:	f014 fcc6 	bl	80157bc <Argus_GetChipID>
 8000e30:	4603      	mov	r3, r0
 8000e32:	4619      	mov	r1, r3
 8000e34:	68b8      	ldr	r0, [r7, #8]
 8000e36:	f005 f8e1 	bl	8005ffc <SCI_Frame_Queue24u>
    return STATUS_OK;
 8000e3a:	2300      	movs	r3, #0
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <RxCmd_MeasurementStop>:

/*******************************************************************************
 * Device Control Commands
 ******************************************************************************/
static status_t RxCmd_MeasurementStop(sci_device_t deviceID, sci_frame_t * frame)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	71fb      	strb	r3, [r7, #7]
    (void)frame; // unused parameter
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f003 fa82 	bl	800435c <ExplorerApp_GetArgusPtr>
 8000e58:	60f8      	str	r0, [r7, #12]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d102      	bne.n	8000e66 <RxCmd_MeasurementStop+0x22>
 8000e60:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8000e64:	e003      	b.n	8000e6e <RxCmd_MeasurementStop+0x2a>
    return ExplorerApp_StopTimerMeasurement(argus);
 8000e66:	68f8      	ldr	r0, [r7, #12]
 8000e68:	f003 fd1e 	bl	80048a8 <ExplorerApp_StopTimerMeasurement>
 8000e6c:	4603      	mov	r3, r0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <RxCmd_MeasurementSingle>:
static status_t RxCmd_MeasurementSingle(sci_device_t deviceID, sci_frame_t * frame)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b084      	sub	sp, #16
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	6039      	str	r1, [r7, #0]
 8000e80:	71fb      	strb	r3, [r7, #7]
    (void)frame; // unused parameter
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f003 fa69 	bl	800435c <ExplorerApp_GetArgusPtr>
 8000e8a:	60f8      	str	r0, [r7, #12]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d102      	bne.n	8000e98 <RxCmd_MeasurementSingle+0x22>
 8000e92:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8000e96:	e003      	b.n	8000ea0 <RxCmd_MeasurementSingle+0x2a>
    return ExplorerApp_SingleMeasurement(argus);
 8000e98:	68f8      	ldr	r0, [r7, #12]
 8000e9a:	f003 fd21 	bl	80048e0 <ExplorerApp_SingleMeasurement>
 8000e9e:	4603      	mov	r3, r0
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <RxCmd_MeasurementAuto>:
static status_t RxCmd_MeasurementAuto(sci_device_t deviceID, sci_frame_t * frame)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	71fb      	strb	r3, [r7, #7]
    (void)frame; // unused parameter
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f003 fa50 	bl	800435c <ExplorerApp_GetArgusPtr>
 8000ebc:	60f8      	str	r0, [r7, #12]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d102      	bne.n	8000eca <RxCmd_MeasurementAuto+0x22>
 8000ec4:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8000ec8:	e003      	b.n	8000ed2 <RxCmd_MeasurementAuto+0x2a>
    return ExplorerApp_StartTimerMeasurement(argus);
 8000eca:	68f8      	ldr	r0, [r7, #12]
 8000ecc:	f003 fcca 	bl	8004864 <ExplorerApp_StartTimerMeasurement>
 8000ed0:	4603      	mov	r3, r0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <RxCmd_MeasurementCalibration>:
static status_t RxCmd_MeasurementCalibration(sci_device_t deviceID, sci_frame_t * frame)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b086      	sub	sp, #24
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	6039      	str	r1, [r7, #0]
 8000ee4:	71fb      	strb	r3, [r7, #7]
    explorer_cal_sequence_t seq = (explorer_cal_sequence_t) SCI_Frame_Dequeue08u(frame);
 8000ee6:	6838      	ldr	r0, [r7, #0]
 8000ee8:	f005 fa38 	bl	800635c <SCI_Frame_Dequeue08u>
 8000eec:	4603      	mov	r3, r0
 8000eee:	74fb      	strb	r3, [r7, #19]

    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f003 fa32 	bl	800435c <ExplorerApp_GetArgusPtr>
 8000ef8:	60f8      	str	r0, [r7, #12]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d102      	bne.n	8000f06 <RxCmd_MeasurementCalibration+0x2c>
 8000f00:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8000f04:	e01e      	b.n	8000f44 <RxCmd_MeasurementCalibration+0x6a>

    switch (seq)
 8000f06:	7cfb      	ldrb	r3, [r7, #19]
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d002      	beq.n	8000f12 <RxCmd_MeasurementCalibration+0x38>
 8000f0c:	2b05      	cmp	r3, #5
 8000f0e:	d005      	beq.n	8000f1c <RxCmd_MeasurementCalibration+0x42>
 8000f10:	e016      	b.n	8000f40 <RxCmd_MeasurementCalibration+0x66>
    {
        case CALIBRATION_SEQUENCE_XTALK:
            return ExplorerApp_ExecuteXtalkCalibrationSequence(argus);
 8000f12:	68f8      	ldr	r0, [r7, #12]
 8000f14:	f002 ff2e 	bl	8003d74 <ExplorerApp_ExecuteXtalkCalibrationSequence>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	e013      	b.n	8000f44 <RxCmd_MeasurementCalibration+0x6a>

        case CALIBRATION_SEQUENCE_OFFSETS:
        {
            q9_22_t target = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
            if (SCI_Frame_BytesToRead(frame) > 1)
 8000f20:	6838      	ldr	r0, [r7, #0]
 8000f22:	f004 ff6b 	bl	8005dfc <SCI_Frame_BytesToRead>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d903      	bls.n	8000f34 <RxCmd_MeasurementCalibration+0x5a>
                target = SCI_Frame_Dequeue32s(frame);
 8000f2c:	6838      	ldr	r0, [r7, #0]
 8000f2e:	f005 f9ee 	bl	800630e <SCI_Frame_Dequeue32s>
 8000f32:	6178      	str	r0, [r7, #20]
            return ExplorerApp_ExecuteOffsetsCalibrationSequence(argus, target);
 8000f34:	6979      	ldr	r1, [r7, #20]
 8000f36:	68f8      	ldr	r0, [r7, #12]
 8000f38:	f002 ff50 	bl	8003ddc <ExplorerApp_ExecuteOffsetsCalibrationSequence>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	e001      	b.n	8000f44 <RxCmd_MeasurementCalibration+0x6a>
        }
        default:
            return ERROR_SCI_INVALID_CMD_PARAMETER;
 8000f40:	f06f 03d5 	mvn.w	r3, #213	@ 0xd5
    }
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3718      	adds	r7, #24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <RxCmd_DeviceReinit>:
static status_t RxCmd_DeviceReinit(sci_device_t deviceID, sci_frame_t * frame)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	6039      	str	r1, [r7, #0]
 8000f56:	71fb      	strb	r3, [r7, #7]
    explorer_t * explorer = ExplorerApp_GetExplorerPtr(deviceID);
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f003 fa22 	bl	80043a4 <ExplorerApp_GetExplorerPtr>
 8000f60:	60b8      	str	r0, [r7, #8]
    if (explorer == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d102      	bne.n	8000f6e <RxCmd_DeviceReinit+0x22>
 8000f68:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8000f6c:	e012      	b.n	8000f94 <RxCmd_DeviceReinit+0x48>

    argus_mode_t mode = 0; // 0 uses current mode
 8000f6e:	2300      	movs	r3, #0
 8000f70:	73fb      	strb	r3, [r7, #15]
    if (SCI_Frame_BytesToRead(frame) > 1)
 8000f72:	6838      	ldr	r0, [r7, #0]
 8000f74:	f004 ff42 	bl	8005dfc <SCI_Frame_BytesToRead>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d904      	bls.n	8000f88 <RxCmd_DeviceReinit+0x3c>
        mode = SCI_Frame_Dequeue08s(frame);
 8000f7e:	6838      	ldr	r0, [r7, #0]
 8000f80:	f005 f9a0 	bl	80062c4 <SCI_Frame_Dequeue08s>
 8000f84:	4603      	mov	r3, r0
 8000f86:	73fb      	strb	r3, [r7, #15]

    return ExplorerApp_DeviceReinit(explorer, mode);
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	68b8      	ldr	r0, [r7, #8]
 8000f8e:	f003 fb7f 	bl	8004690 <ExplorerApp_DeviceReinit>
 8000f92:	4603      	mov	r3, r0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <RxCmd_DeviceAbort>:
static status_t RxCmd_DeviceAbort(sci_device_t deviceID, sci_frame_t * frame)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	6039      	str	r1, [r7, #0]
 8000fa6:	71fb      	strb	r3, [r7, #7]
    (void)frame; // unused parameter
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f003 f9d6 	bl	800435c <ExplorerApp_GetArgusPtr>
 8000fb0:	60f8      	str	r0, [r7, #12]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d102      	bne.n	8000fbe <RxCmd_DeviceAbort+0x22>
 8000fb8:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8000fbc:	e003      	b.n	8000fc6 <RxCmd_DeviceAbort+0x2a>
    return ExplorerApp_DeviceAbort(argus);
 8000fbe:	68f8      	ldr	r0, [r7, #12]
 8000fc0:	f003 fcb2 	bl	8004928 <ExplorerApp_DeviceAbort>
 8000fc4:	4603      	mov	r3, r0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <ExplorerAPI_InitGeneral>:

/*******************************************************************************
 * Init Code
 ******************************************************************************/
status_t ExplorerAPI_InitGeneral()
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
    status_t status;

    status = SCI_SetRxTxCommand(CMD_SOFTWARE_INFO, RxCmd_SoftwareInfo, (sci_tx_cmd_fct_t)TxCmd_SoftwareInfo);
 8000fd6:	4a36      	ldr	r2, [pc, #216]	@ (80010b0 <ExplorerAPI_InitGeneral+0xe0>)
 8000fd8:	4936      	ldr	r1, [pc, #216]	@ (80010b4 <ExplorerAPI_InitGeneral+0xe4>)
 8000fda:	2005      	movs	r0, #5
 8000fdc:	f003 fd66 	bl	8004aac <SCI_SetRxTxCommand>
 8000fe0:	6078      	str	r0, [r7, #4]
    if(status < STATUS_OK) return status;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	da01      	bge.n	8000fec <ExplorerAPI_InitGeneral+0x1c>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	e05d      	b.n	80010a8 <ExplorerAPI_InitGeneral+0xd8>
    status = SCI_SetRxTxCommand(CMD_SOFTWARE_VERSION, RxCmd_SoftwareVersion, (sci_tx_cmd_fct_t)TxCmd_SoftwareVersion);
 8000fec:	4a32      	ldr	r2, [pc, #200]	@ (80010b8 <ExplorerAPI_InitGeneral+0xe8>)
 8000fee:	4933      	ldr	r1, [pc, #204]	@ (80010bc <ExplorerAPI_InitGeneral+0xec>)
 8000ff0:	200c      	movs	r0, #12
 8000ff2:	f003 fd5b 	bl	8004aac <SCI_SetRxTxCommand>
 8000ff6:	6078      	str	r0, [r7, #4]
    if(status < STATUS_OK) return status;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	da01      	bge.n	8001002 <ExplorerAPI_InitGeneral+0x32>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	e052      	b.n	80010a8 <ExplorerAPI_InitGeneral+0xd8>
    status = SCI_SetRxTxCommand(CMD_MODULE_TYPE, RxCmd_ModuleType, (sci_tx_cmd_fct_t)TxCmd_ModuleType);
 8001002:	4a2f      	ldr	r2, [pc, #188]	@ (80010c0 <ExplorerAPI_InitGeneral+0xf0>)
 8001004:	492f      	ldr	r1, [pc, #188]	@ (80010c4 <ExplorerAPI_InitGeneral+0xf4>)
 8001006:	200e      	movs	r0, #14
 8001008:	f003 fd50 	bl	8004aac <SCI_SetRxTxCommand>
 800100c:	6078      	str	r0, [r7, #4]
    if(status < STATUS_OK) return status;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	da01      	bge.n	8001018 <ExplorerAPI_InitGeneral+0x48>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	e047      	b.n	80010a8 <ExplorerAPI_InitGeneral+0xd8>
    status = SCI_SetRxTxCommand(CMD_MODULE_UID, RxCmd_ModuleUID, (sci_tx_cmd_fct_t)TxCmd_ModuleUID);
 8001018:	4a2b      	ldr	r2, [pc, #172]	@ (80010c8 <ExplorerAPI_InitGeneral+0xf8>)
 800101a:	492c      	ldr	r1, [pc, #176]	@ (80010cc <ExplorerAPI_InitGeneral+0xfc>)
 800101c:	200f      	movs	r0, #15
 800101e:	f003 fd45 	bl	8004aac <SCI_SetRxTxCommand>
 8001022:	6078      	str	r0, [r7, #4]
    if(status < STATUS_OK) return status;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	da01      	bge.n	800102e <ExplorerAPI_InitGeneral+0x5e>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	e03c      	b.n	80010a8 <ExplorerAPI_InitGeneral+0xd8>

    status = SCI_SetRxCommand(CMD_MEASUREMENT_STOP, RxCmd_MeasurementStop);
 800102e:	4928      	ldr	r1, [pc, #160]	@ (80010d0 <ExplorerAPI_InitGeneral+0x100>)
 8001030:	2012      	movs	r0, #18
 8001032:	f003 fd07 	bl	8004a44 <SCI_SetRxCommand>
 8001036:	6078      	str	r0, [r7, #4]
    if(status < STATUS_OK) return status;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	da01      	bge.n	8001042 <ExplorerAPI_InitGeneral+0x72>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	e032      	b.n	80010a8 <ExplorerAPI_InitGeneral+0xd8>
    status = SCI_SetRxCommand(CMD_MEASUREMENT_SINGLE_SHOT, RxCmd_MeasurementSingle);
 8001042:	4924      	ldr	r1, [pc, #144]	@ (80010d4 <ExplorerAPI_InitGeneral+0x104>)
 8001044:	2010      	movs	r0, #16
 8001046:	f003 fcfd 	bl	8004a44 <SCI_SetRxCommand>
 800104a:	6078      	str	r0, [r7, #4]
    if(status < STATUS_OK) return status;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	da01      	bge.n	8001056 <ExplorerAPI_InitGeneral+0x86>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	e028      	b.n	80010a8 <ExplorerAPI_InitGeneral+0xd8>
    status = SCI_SetRxCommand(CMD_MEASUREMENT_START, RxCmd_MeasurementAuto);
 8001056:	4920      	ldr	r1, [pc, #128]	@ (80010d8 <ExplorerAPI_InitGeneral+0x108>)
 8001058:	2011      	movs	r0, #17
 800105a:	f003 fcf3 	bl	8004a44 <SCI_SetRxCommand>
 800105e:	6078      	str	r0, [r7, #4]
    if(status < STATUS_OK) return status;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	da01      	bge.n	800106a <ExplorerAPI_InitGeneral+0x9a>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	e01e      	b.n	80010a8 <ExplorerAPI_InitGeneral+0xd8>
    status = SCI_SetRxCommand(CMD_MEASUREMENT_CALIBRATION, RxCmd_MeasurementCalibration);
 800106a:	491c      	ldr	r1, [pc, #112]	@ (80010dc <ExplorerAPI_InitGeneral+0x10c>)
 800106c:	2018      	movs	r0, #24
 800106e:	f003 fce9 	bl	8004a44 <SCI_SetRxCommand>
 8001072:	6078      	str	r0, [r7, #4]
    if(status < STATUS_OK) return status;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	da01      	bge.n	800107e <ExplorerAPI_InitGeneral+0xae>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	e014      	b.n	80010a8 <ExplorerAPI_InitGeneral+0xd8>
    status = SCI_SetRxCommand(CMD_DEVICE_REINIT, RxCmd_DeviceReinit);
 800107e:	4918      	ldr	r1, [pc, #96]	@ (80010e0 <ExplorerAPI_InitGeneral+0x110>)
 8001080:	2015      	movs	r0, #21
 8001082:	f003 fcdf 	bl	8004a44 <SCI_SetRxCommand>
 8001086:	6078      	str	r0, [r7, #4]
    if(status < STATUS_OK) return status;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	da01      	bge.n	8001092 <ExplorerAPI_InitGeneral+0xc2>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	e00a      	b.n	80010a8 <ExplorerAPI_InitGeneral+0xd8>
    status = SCI_SetRxCommand(CMD_DEVICE_ABORT, RxCmd_DeviceAbort);
 8001092:	4914      	ldr	r1, [pc, #80]	@ (80010e4 <ExplorerAPI_InitGeneral+0x114>)
 8001094:	2013      	movs	r0, #19
 8001096:	f003 fcd5 	bl	8004a44 <SCI_SetRxCommand>
 800109a:	6078      	str	r0, [r7, #4]
    if(status < STATUS_OK) return status;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	da01      	bge.n	80010a6 <ExplorerAPI_InitGeneral+0xd6>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	e000      	b.n	80010a8 <ExplorerAPI_InitGeneral+0xd8>

    return status;
 80010a6:	687b      	ldr	r3, [r7, #4]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	08000b5d 	.word	0x08000b5d
 80010b4:	08000b39 	.word	0x08000b39
 80010b8:	08000d13 	.word	0x08000d13
 80010bc:	08000cf1 	.word	0x08000cf1
 80010c0:	08000d83 	.word	0x08000d83
 80010c4:	08000d61 	.word	0x08000d61
 80010c8:	08000e05 	.word	0x08000e05
 80010cc:	08000de3 	.word	0x08000de3
 80010d0:	08000e45 	.word	0x08000e45
 80010d4:	08000e77 	.word	0x08000e77
 80010d8:	08000ea9 	.word	0x08000ea9
 80010dc:	08000edb 	.word	0x08000edb
 80010e0:	08000f4d 	.word	0x08000f4d
 80010e4:	08000f9d 	.word	0x08000f9d

080010e8 <Serialize_Cal_P2PXtalk>:
/*******************************************************************************
 * Parsing Functions
 ******************************************************************************/

static void Serialize_Cal_P2PXtalk(sci_frame_t * frame, argus_cal_p2pxtalk_t const * cal)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
    /* Electrical Pixel-To-Pixel Crosstalk */
    const argus_cal_electrical_p2pxtalk_t * ecal = &cal->Electrical;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	60fb      	str	r3, [r7, #12]
    SCI_Frame_Queue08u(frame, ecal->Enabled);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	4619      	mov	r1, r3
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f004 ff3f 	bl	8005f80 <SCI_Frame_Queue08u>
    SCI_Frame_Queue16s(frame, ecal->KcFactorS);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001108:	4619      	mov	r1, r3
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f004 fff0 	bl	80060f0 <SCI_Frame_Queue16s>
    SCI_Frame_Queue16s(frame, ecal->KcFactorC);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001116:	4619      	mov	r1, r3
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f004 ffe9 	bl	80060f0 <SCI_Frame_Queue16s>
    SCI_Frame_Queue16s(frame, ecal->KcFactorSRefPx);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001124:	4619      	mov	r1, r3
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f004 ffe2 	bl	80060f0 <SCI_Frame_Queue16s>
    SCI_Frame_Queue16s(frame, ecal->KcFactorCRefPx);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001132:	4619      	mov	r1, r3
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f004 ffdb 	bl	80060f0 <SCI_Frame_Queue16s>
    SCI_Frame_Queue08u(frame, ecal->RelativeThreshold);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	785b      	ldrb	r3, [r3, #1]
 800113e:	4619      	mov	r1, r3
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f004 ff1d 	bl	8005f80 <SCI_Frame_Queue08u>
    SCI_Frame_Queue16u(frame, ecal->AbsoluteTreshold);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	885b      	ldrh	r3, [r3, #2]
 800114a:	4619      	mov	r1, r3
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f004 ff3c 	bl	8005fca <SCI_Frame_Queue16u>

    /* Optical Pixel-To-Pixel Crosstalk */
    const argus_cal_optical_p2pxtalk_t * ocal = &cal->Optical;
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	330c      	adds	r3, #12
 8001156:	60bb      	str	r3, [r7, #8]
    SCI_Frame_Queue08u(frame, ocal->Enabled);
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	4619      	mov	r1, r3
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f004 ff0e 	bl	8005f80 <SCI_Frame_Queue08u>
    SCI_Frame_Queue16s(frame, ocal->CouplingCoeffS);
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800116a:	4619      	mov	r1, r3
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f004 ffbf 	bl	80060f0 <SCI_Frame_Queue16s>
    SCI_Frame_Queue16s(frame, ocal->CouplingCoeffC);
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001178:	4619      	mov	r1, r3
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f004 ffb8 	bl	80060f0 <SCI_Frame_Queue16s>
}
 8001180:	bf00      	nop
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <Deserialize_Cal_P2PXtalk>:
static void Deserialize_Cal_P2PXtalk(sci_frame_t * frame, argus_cal_p2pxtalk_t * cal)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
    argus_cal_electrical_p2pxtalk_t * ecal = &cal->Electrical;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	60fb      	str	r3, [r7, #12]

    /* Electrical Pixel-To-Pixel Crosstalk */
    ecal->Enabled = SCI_Frame_Dequeue08u(frame);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f005 f8e0 	bl	800635c <SCI_Frame_Dequeue08u>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	bf14      	ite	ne
 80011a2:	2301      	movne	r3, #1
 80011a4:	2300      	moveq	r3, #0
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	701a      	strb	r2, [r3, #0]
    ecal->KcFactorS = SCI_Frame_Dequeue16s(frame);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f005 f896 	bl	80062de <SCI_Frame_Dequeue16s>
 80011b2:	4603      	mov	r3, r0
 80011b4:	461a      	mov	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	809a      	strh	r2, [r3, #4]
    ecal->KcFactorC = SCI_Frame_Dequeue16s(frame);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f005 f88f 	bl	80062de <SCI_Frame_Dequeue16s>
 80011c0:	4603      	mov	r3, r0
 80011c2:	461a      	mov	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	80da      	strh	r2, [r3, #6]
    ecal->KcFactorSRefPx = SCI_Frame_Dequeue16s(frame);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f005 f888 	bl	80062de <SCI_Frame_Dequeue16s>
 80011ce:	4603      	mov	r3, r0
 80011d0:	461a      	mov	r2, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	811a      	strh	r2, [r3, #8]
    ecal->KcFactorCRefPx = SCI_Frame_Dequeue16s(frame);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f005 f881 	bl	80062de <SCI_Frame_Dequeue16s>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	815a      	strh	r2, [r3, #10]
    ecal->RelativeThreshold = SCI_Frame_Dequeue08u(frame);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f005 f8b9 	bl	800635c <SCI_Frame_Dequeue08u>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	705a      	strb	r2, [r3, #1]
    ecal->AbsoluteTreshold = SCI_Frame_Dequeue16u(frame);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f005 f8be 	bl	8006374 <SCI_Frame_Dequeue16u>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	805a      	strh	r2, [r3, #2]

    /* Optical Pixel-To-Pixel Crosstalk */
    argus_cal_optical_p2pxtalk_t * ocal = &cal->Optical;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	330c      	adds	r3, #12
 8001204:	60bb      	str	r3, [r7, #8]
    ocal->Enabled = SCI_Frame_Dequeue08u(frame);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f005 f8a8 	bl	800635c <SCI_Frame_Dequeue08u>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	bf14      	ite	ne
 8001212:	2301      	movne	r3, #1
 8001214:	2300      	moveq	r3, #0
 8001216:	b2da      	uxtb	r2, r3
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	701a      	strb	r2, [r3, #0]
    ocal->CouplingCoeffS = SCI_Frame_Dequeue16s(frame);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f005 f85e 	bl	80062de <SCI_Frame_Dequeue16s>
 8001222:	4603      	mov	r3, r0
 8001224:	461a      	mov	r2, r3
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	805a      	strh	r2, [r3, #2]
    ocal->CouplingCoeffC = SCI_Frame_Dequeue16s(frame);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f005 f857 	bl	80062de <SCI_Frame_Dequeue16s>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	809a      	strh	r2, [r3, #4]
}
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <RxCmd_CalGlobalRangeOffsets>:
/*******************************************************************************
 * Command Functions
 ******************************************************************************/

static status_t RxCmd_CalGlobalRangeOffsets(sci_device_t deviceID, sci_frame_t * frame)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	6039      	str	r1, [r7, #0]
 800124a:	71fb      	strb	r3, [r7, #7]
    if (SCI_Frame_BytesToRead(frame) > 1)
 800124c:	6838      	ldr	r0, [r7, #0]
 800124e:	f004 fdd5 	bl	8005dfc <SCI_Frame_BytesToRead>
 8001252:	4603      	mov	r3, r0
 8001254:	2b01      	cmp	r3, #1
 8001256:	d92a      	bls.n	80012ae <RxCmd_CalGlobalRangeOffsets+0x6e>
    {
        /* Master sending data... */
        q0_15_t offset_low = SCI_Frame_Dequeue16s(frame);
 8001258:	6838      	ldr	r0, [r7, #0]
 800125a:	f005 f840 	bl	80062de <SCI_Frame_Dequeue16s>
 800125e:	4603      	mov	r3, r0
 8001260:	82fb      	strh	r3, [r7, #22]
        q0_15_t offset_high = SCI_Frame_Dequeue16s(frame);
 8001262:	6838      	ldr	r0, [r7, #0]
 8001264:	f005 f83b 	bl	80062de <SCI_Frame_Dequeue16s>
 8001268:	4603      	mov	r3, r0
 800126a:	82bb      	strh	r3, [r7, #20]
        argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	4618      	mov	r0, r3
 8001270:	f003 f874 	bl	800435c <ExplorerApp_GetArgusPtr>
 8001274:	6138      	str	r0, [r7, #16]
        if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d102      	bne.n	8001282 <RxCmd_CalGlobalRangeOffsets+0x42>
 800127c:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8001280:	e01c      	b.n	80012bc <RxCmd_CalGlobalRangeOffsets+0x7c>
        bool resume = ExplorerApp_SuspendTimerMeasurement(argus);
 8001282:	6938      	ldr	r0, [r7, #16]
 8001284:	f003 fac2 	bl	800480c <ExplorerApp_SuspendTimerMeasurement>
 8001288:	4603      	mov	r3, r0
 800128a:	73fb      	strb	r3, [r7, #15]
        status_t status = Argus_SetCalibrationGlobalRangeOffsets(argus, offset_low, offset_high);
 800128c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001290:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001294:	4619      	mov	r1, r3
 8001296:	6938      	ldr	r0, [r7, #16]
 8001298:	f014 fe9e 	bl	8015fd8 <Argus_SetCalibrationGlobalRangeOffsets>
 800129c:	60b8      	str	r0, [r7, #8]
        if (resume) ExplorerApp_StartTimerMeasurement(argus);
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d002      	beq.n	80012aa <RxCmd_CalGlobalRangeOffsets+0x6a>
 80012a4:	6938      	ldr	r0, [r7, #16]
 80012a6:	f003 fadd 	bl	8004864 <ExplorerApp_StartTimerMeasurement>
        return status;
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	e006      	b.n	80012bc <RxCmd_CalGlobalRangeOffsets+0x7c>
    }
    else
    {
        /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CALIBRATION_GLOBAL_RANGE_OFFSET, 0, 0);
 80012ae:	79f8      	ldrb	r0, [r7, #7]
 80012b0:	2300      	movs	r3, #0
 80012b2:	2200      	movs	r2, #0
 80012b4:	2161      	movs	r1, #97	@ 0x61
 80012b6:	f003 fd77 	bl	8004da8 <SCI_SendCommand>
 80012ba:	4603      	mov	r3, r0
    }
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <TxCmd_CalGlobalRangeOffsets>:
static status_t TxCmd_CalGlobalRangeOffsets(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b088      	sub	sp, #32
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	4603      	mov	r3, r0
 80012d2:	73fb      	strb	r3, [r7, #15]
    (void)data;
    (void)param;

    status_t status = STATUS_OK;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
    q0_15_t offset_high, offset_low;
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	4618      	mov	r0, r3
 80012dc:	f003 f83e 	bl	800435c <ExplorerApp_GetArgusPtr>
 80012e0:	61b8      	str	r0, [r7, #24]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d102      	bne.n	80012ee <TxCmd_CalGlobalRangeOffsets+0x2a>
 80012e8:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 80012ec:	e015      	b.n	800131a <TxCmd_CalGlobalRangeOffsets+0x56>
    status = Argus_GetCalibrationGlobalRangeOffsets(argus, &offset_low, &offset_high);
 80012ee:	f107 0216 	add.w	r2, r7, #22
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	69b8      	ldr	r0, [r7, #24]
 80012fa:	f014 febd 	bl	8016078 <Argus_GetCalibrationGlobalRangeOffsets>
 80012fe:	61f8      	str	r0, [r7, #28]
    SCI_Frame_Queue16s(frame, offset_low);
 8001300:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001304:	4619      	mov	r1, r3
 8001306:	68b8      	ldr	r0, [r7, #8]
 8001308:	f004 fef2 	bl	80060f0 <SCI_Frame_Queue16s>
    SCI_Frame_Queue16s(frame, offset_high);
 800130c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001310:	4619      	mov	r1, r3
 8001312:	68b8      	ldr	r0, [r7, #8]
 8001314:	f004 feec 	bl	80060f0 <SCI_Frame_Queue16s>
    return status;
 8001318:	69fb      	ldr	r3, [r7, #28]
}
 800131a:	4618      	mov	r0, r3
 800131c:	3720      	adds	r7, #32
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <RxCmd_CalPixelRangeOffsets>:

static status_t RxCmd_CalPixelRangeOffsets(sci_device_t deviceID, sci_frame_t * frame)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b0a8      	sub	sp, #160	@ 0xa0
 8001326:	af00      	add	r7, sp, #0
 8001328:	4603      	mov	r3, r0
 800132a:	6039      	str	r1, [r7, #0]
 800132c:	71fb      	strb	r3, [r7, #7]
    if (SCI_Frame_BytesToRead(frame) > 1)
 800132e:	6838      	ldr	r0, [r7, #0]
 8001330:	f004 fd64 	bl	8005dfc <SCI_Frame_BytesToRead>
 8001334:	4603      	mov	r3, r0
 8001336:	2b01      	cmp	r3, #1
 8001338:	d963      	bls.n	8001402 <RxCmd_CalPixelRangeOffsets+0xe0>
    {
        /* Master sending data... */
        argus_cal_offset_table_t offsets;
        for (uint_fast8_t p = 0; p < ARGUS_DCA_POWER_STAGE_COUNT; ++p)
 800133a:	2300      	movs	r3, #0
 800133c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001340:	e033      	b.n	80013aa <RxCmd_CalPixelRangeOffsets+0x88>
        {
            for (uint_fast8_t x = 0; x < ARGUS_PIXELS_X; ++x)
 8001342:	2300      	movs	r3, #0
 8001344:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001348:	e026      	b.n	8001398 <RxCmd_CalPixelRangeOffsets+0x76>
            {
                for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 800134a:	2300      	movs	r3, #0
 800134c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001350:	e019      	b.n	8001386 <RxCmd_CalPixelRangeOffsets+0x64>
                {
                    offsets.Table[p][x][y] = SCI_Frame_Dequeue16s(frame);
 8001352:	6838      	ldr	r0, [r7, #0]
 8001354:	f004 ffc3 	bl	80062de <SCI_Frame_Dequeue16s>
 8001358:	4603      	mov	r3, r0
 800135a:	4619      	mov	r1, r3
 800135c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001360:	00da      	lsls	r2, r3, #3
 8001362:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001366:	4413      	add	r3, r2
 8001368:	009a      	lsls	r2, r3, #2
 800136a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800136e:	4413      	add	r3, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	33a0      	adds	r3, #160	@ 0xa0
 8001374:	443b      	add	r3, r7
 8001376:	460a      	mov	r2, r1
 8001378:	f823 2c98 	strh.w	r2, [r3, #-152]
                for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 800137c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001380:	3301      	adds	r3, #1
 8001382:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001386:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800138a:	2b03      	cmp	r3, #3
 800138c:	d9e1      	bls.n	8001352 <RxCmd_CalPixelRangeOffsets+0x30>
            for (uint_fast8_t x = 0; x < ARGUS_PIXELS_X; ++x)
 800138e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001392:	3301      	adds	r3, #1
 8001394:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001398:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800139c:	2b07      	cmp	r3, #7
 800139e:	d9d4      	bls.n	800134a <RxCmd_CalPixelRangeOffsets+0x28>
        for (uint_fast8_t p = 0; p < ARGUS_DCA_POWER_STAGE_COUNT; ++p)
 80013a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80013a4:	3301      	adds	r3, #1
 80013a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80013aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d9c7      	bls.n	8001342 <RxCmd_CalPixelRangeOffsets+0x20>
                }
            }
        }
        argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f002 ffd1 	bl	800435c <ExplorerApp_GetArgusPtr>
 80013ba:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
        if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 80013be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d102      	bne.n	80013cc <RxCmd_CalPixelRangeOffsets+0xaa>
 80013c6:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 80013ca:	e021      	b.n	8001410 <RxCmd_CalPixelRangeOffsets+0xee>
        bool resume = ExplorerApp_SuspendTimerMeasurement(argus);
 80013cc:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80013d0:	f003 fa1c 	bl	800480c <ExplorerApp_SuspendTimerMeasurement>
 80013d4:	4603      	mov	r3, r0
 80013d6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
        status_t status = Argus_SetCalibrationPixelRangeOffsets(argus, &offsets);
 80013da:	f107 0308 	add.w	r3, r7, #8
 80013de:	4619      	mov	r1, r3
 80013e0:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80013e4:	f014 fe7a 	bl	80160dc <Argus_SetCalibrationPixelRangeOffsets>
 80013e8:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
        if (resume) ExplorerApp_StartTimerMeasurement(argus);
 80013ec:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <RxCmd_CalPixelRangeOffsets+0xda>
 80013f4:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80013f8:	f003 fa34 	bl	8004864 <ExplorerApp_StartTimerMeasurement>
        return status;
 80013fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001400:	e006      	b.n	8001410 <RxCmd_CalPixelRangeOffsets+0xee>

    }
    else
    {
        /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CALIBRATION_PIXEL_RANGE_OFFSETS, 0, 0);
 8001402:	79f8      	ldrb	r0, [r7, #7]
 8001404:	2300      	movs	r3, #0
 8001406:	2200      	movs	r2, #0
 8001408:	2167      	movs	r1, #103	@ 0x67
 800140a:	f003 fccd 	bl	8004da8 <SCI_SendCommand>
 800140e:	4603      	mov	r3, r0
    }
}
 8001410:	4618      	mov	r0, r3
 8001412:	37a0      	adds	r7, #160	@ 0xa0
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <TxCmd_CalPixelRangeOffsets>:
static status_t TxCmd_CalPixelRangeOffsets(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b0aa      	sub	sp, #168	@ 0xa8
 800141c:	af00      	add	r7, sp, #0
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	4603      	mov	r3, r0
 8001426:	73fb      	strb	r3, [r7, #15]
    (void)data;
    (void)param;

    status_t status = STATUS_OK;
 8001428:	2300      	movs	r3, #0
 800142a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    argus_cal_offset_table_t offsets;
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	4618      	mov	r0, r3
 8001432:	f002 ff93 	bl	800435c <ExplorerApp_GetArgusPtr>
 8001436:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 800143a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800143e:	2b00      	cmp	r3, #0
 8001440:	d102      	bne.n	8001448 <TxCmd_CalPixelRangeOffsets+0x30>
 8001442:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8001446:	e044      	b.n	80014d2 <TxCmd_CalPixelRangeOffsets+0xba>
    status = Argus_GetCalibrationPixelRangeOffsets(argus, &offsets);
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	4619      	mov	r1, r3
 800144e:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8001452:	f014 fe97 	bl	8016184 <Argus_GetCalibrationPixelRangeOffsets>
 8001456:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
    for (uint_fast8_t p = 0; p < ARGUS_DCA_POWER_STAGE_COUNT; ++p)
 800145a:	2300      	movs	r3, #0
 800145c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001460:	e031      	b.n	80014c6 <TxCmd_CalPixelRangeOffsets+0xae>
    {
        for (uint_fast8_t x = 0; x < ARGUS_PIXELS_X; ++x)
 8001462:	2300      	movs	r3, #0
 8001464:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001468:	e024      	b.n	80014b4 <TxCmd_CalPixelRangeOffsets+0x9c>
        {
            for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 800146a:	2300      	movs	r3, #0
 800146c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001470:	e017      	b.n	80014a2 <TxCmd_CalPixelRangeOffsets+0x8a>
            {
                SCI_Frame_Queue16s(frame, offsets.Table[p][x][y]);
 8001472:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001476:	00da      	lsls	r2, r3, #3
 8001478:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800147c:	4413      	add	r3, r2
 800147e:	009a      	lsls	r2, r3, #2
 8001480:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001484:	4413      	add	r3, r2
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	33a8      	adds	r3, #168	@ 0xa8
 800148a:	443b      	add	r3, r7
 800148c:	f933 3c94 	ldrsh.w	r3, [r3, #-148]
 8001490:	4619      	mov	r1, r3
 8001492:	68b8      	ldr	r0, [r7, #8]
 8001494:	f004 fe2c 	bl	80060f0 <SCI_Frame_Queue16s>
            for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 8001498:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800149c:	3301      	adds	r3, #1
 800149e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80014a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	d9e3      	bls.n	8001472 <TxCmd_CalPixelRangeOffsets+0x5a>
        for (uint_fast8_t x = 0; x < ARGUS_PIXELS_X; ++x)
 80014aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80014ae:	3301      	adds	r3, #1
 80014b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80014b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80014b8:	2b07      	cmp	r3, #7
 80014ba:	d9d6      	bls.n	800146a <TxCmd_CalPixelRangeOffsets+0x52>
    for (uint_fast8_t p = 0; p < ARGUS_DCA_POWER_STAGE_COUNT; ++p)
 80014bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80014c0:	3301      	adds	r3, #1
 80014c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80014c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d9c9      	bls.n	8001462 <TxCmd_CalPixelRangeOffsets+0x4a>
            }
        }
    }
    return status;
 80014ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	37a8      	adds	r7, #168	@ 0xa8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <RxCmd_CalResetPixelRangeOffsets>:

static status_t RxCmd_CalResetPixelRangeOffsets(sci_device_t deviceID, sci_frame_t * frame)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b084      	sub	sp, #16
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	6039      	str	r1, [r7, #0]
 80014e4:	71fb      	strb	r3, [r7, #7]
    (void)frame;
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f002 ff37 	bl	800435c <ExplorerApp_GetArgusPtr>
 80014ee:	60f8      	str	r0, [r7, #12]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d102      	bne.n	80014fc <RxCmd_CalResetPixelRangeOffsets+0x22>
 80014f6:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 80014fa:	e003      	b.n	8001504 <RxCmd_CalResetPixelRangeOffsets+0x2a>
    return Argus_ResetCalibrationPixelRangeOffsets(argus);
 80014fc:	68f8      	ldr	r0, [r7, #12]
 80014fe:	f014 fe6b 	bl	80161d8 <Argus_ResetCalibrationPixelRangeOffsets>
 8001502:	4603      	mov	r3, r0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <RxCmd_CalRangeOffsetSeqSampleTime>:

static status_t RxCmd_CalRangeOffsetSeqSampleTime(sci_device_t deviceID, sci_frame_t * frame)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	6039      	str	r1, [r7, #0]
 8001516:	71fb      	strb	r3, [r7, #7]
    if (SCI_Frame_BytesToRead(frame) > 1)
 8001518:	6838      	ldr	r0, [r7, #0]
 800151a:	f004 fc6f 	bl	8005dfc <SCI_Frame_BytesToRead>
 800151e:	4603      	mov	r3, r0
 8001520:	2b01      	cmp	r3, #1
 8001522:	d922      	bls.n	800156a <RxCmd_CalRangeOffsetSeqSampleTime+0x5e>
    {
        /* Master sending data... */
        uint16_t time = SCI_Frame_Dequeue16u(frame);
 8001524:	6838      	ldr	r0, [r7, #0]
 8001526:	f004 ff25 	bl	8006374 <SCI_Frame_Dequeue16u>
 800152a:	4603      	mov	r3, r0
 800152c:	82fb      	strh	r3, [r7, #22]
        argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	4618      	mov	r0, r3
 8001532:	f002 ff13 	bl	800435c <ExplorerApp_GetArgusPtr>
 8001536:	6138      	str	r0, [r7, #16]
        if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d102      	bne.n	8001544 <RxCmd_CalRangeOffsetSeqSampleTime+0x38>
 800153e:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8001542:	e019      	b.n	8001578 <RxCmd_CalRangeOffsetSeqSampleTime+0x6c>
        bool resume = ExplorerApp_SuspendTimerMeasurement(argus);
 8001544:	6938      	ldr	r0, [r7, #16]
 8001546:	f003 f961 	bl	800480c <ExplorerApp_SuspendTimerMeasurement>
 800154a:	4603      	mov	r3, r0
 800154c:	73fb      	strb	r3, [r7, #15]
        status_t status = Argus_SetCalibrationRangeOffsetSequenceSampleTime(argus, time);
 800154e:	8afb      	ldrh	r3, [r7, #22]
 8001550:	4619      	mov	r1, r3
 8001552:	6938      	ldr	r0, [r7, #16]
 8001554:	f014 fe96 	bl	8016284 <Argus_SetCalibrationRangeOffsetSequenceSampleTime>
 8001558:	60b8      	str	r0, [r7, #8]
        if (resume) ExplorerApp_StartTimerMeasurement(argus);
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d002      	beq.n	8001566 <RxCmd_CalRangeOffsetSeqSampleTime+0x5a>
 8001560:	6938      	ldr	r0, [r7, #16]
 8001562:	f003 f97f 	bl	8004864 <ExplorerApp_StartTimerMeasurement>
        return status;
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	e006      	b.n	8001578 <RxCmd_CalRangeOffsetSeqSampleTime+0x6c>

    }
    else
    {
        /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CALIBRATION_RANGE_OFFSET_SAMPLE_TIME, 0, 0);
 800156a:	79f8      	ldrb	r0, [r7, #7]
 800156c:	2300      	movs	r3, #0
 800156e:	2200      	movs	r2, #0
 8001570:	2169      	movs	r1, #105	@ 0x69
 8001572:	f003 fc19 	bl	8004da8 <SCI_SendCommand>
 8001576:	4603      	mov	r3, r0
    }
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <TxCmd_CalRangeOffsetSeqSampleTime>:
static status_t TxCmd_CalRangeOffsetSeqSampleTime(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	4603      	mov	r3, r0
 800158e:	73fb      	strb	r3, [r7, #15]
    (void)data;
    (void)param;

    status_t status = STATUS_OK;
 8001590:	2300      	movs	r3, #0
 8001592:	61fb      	str	r3, [r7, #28]
    uint16_t time;
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	4618      	mov	r0, r3
 8001598:	f002 fee0 	bl	800435c <ExplorerApp_GetArgusPtr>
 800159c:	61b8      	str	r0, [r7, #24]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d102      	bne.n	80015aa <TxCmd_CalRangeOffsetSeqSampleTime+0x2a>
 80015a4:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 80015a8:	e00c      	b.n	80015c4 <TxCmd_CalRangeOffsetSeqSampleTime+0x44>
    status = Argus_GetCalibrationRangeOffsetSequenceSampleTime(argus, &time);
 80015aa:	f107 0316 	add.w	r3, r7, #22
 80015ae:	4619      	mov	r1, r3
 80015b0:	69b8      	ldr	r0, [r7, #24]
 80015b2:	f014 feb5 	bl	8016320 <Argus_GetCalibrationRangeOffsetSequenceSampleTime>
 80015b6:	61f8      	str	r0, [r7, #28]
    SCI_Frame_Queue16u(frame, time);
 80015b8:	8afb      	ldrh	r3, [r7, #22]
 80015ba:	4619      	mov	r1, r3
 80015bc:	68b8      	ldr	r0, [r7, #8]
 80015be:	f004 fd04 	bl	8005fca <SCI_Frame_Queue16u>
    return status;
 80015c2:	69fb      	ldr	r3, [r7, #28]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3720      	adds	r7, #32
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <RxCmd_CalXtalkPixel2Pixel>:

static status_t RxCmd_CalXtalkPixel2Pixel(sci_device_t deviceID, sci_frame_t * frame)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	@ 0x28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	6039      	str	r1, [r7, #0]
 80015d6:	71fb      	strb	r3, [r7, #7]
    if (SCI_Frame_BytesToRead(frame) > 1)
 80015d8:	6838      	ldr	r0, [r7, #0]
 80015da:	f004 fc0f 	bl	8005dfc <SCI_Frame_BytesToRead>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d92e      	bls.n	8001642 <RxCmd_CalXtalkPixel2Pixel+0x76>
    {
        /* Master sending data... */
        argus_cal_p2pxtalk_t cal = { 0 };
 80015e4:	f107 0308 	add.w	r3, r7, #8
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	821a      	strh	r2, [r3, #16]
        Deserialize_Cal_P2PXtalk(frame, &cal);
 80015f4:	f107 0308 	add.w	r3, r7, #8
 80015f8:	4619      	mov	r1, r3
 80015fa:	6838      	ldr	r0, [r7, #0]
 80015fc:	f7ff fdc4 	bl	8001188 <Deserialize_Cal_P2PXtalk>
        argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	4618      	mov	r0, r3
 8001604:	f002 feaa 	bl	800435c <ExplorerApp_GetArgusPtr>
 8001608:	6278      	str	r0, [r7, #36]	@ 0x24
        if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 800160a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160c:	2b00      	cmp	r3, #0
 800160e:	d102      	bne.n	8001616 <RxCmd_CalXtalkPixel2Pixel+0x4a>
 8001610:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8001614:	e01c      	b.n	8001650 <RxCmd_CalXtalkPixel2Pixel+0x84>
        bool resume = ExplorerApp_SuspendTimerMeasurement(argus);
 8001616:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001618:	f003 f8f8 	bl	800480c <ExplorerApp_SuspendTimerMeasurement>
 800161c:	4603      	mov	r3, r0
 800161e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        status_t status = Argus_SetCalibrationCrosstalkPixel2Pixel(argus, &cal);
 8001622:	f107 0308 	add.w	r3, r7, #8
 8001626:	4619      	mov	r1, r3
 8001628:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800162a:	f015 f865 	bl	80166f8 <Argus_SetCalibrationCrosstalkPixel2Pixel>
 800162e:	61f8      	str	r0, [r7, #28]
        if (resume) ExplorerApp_StartTimerMeasurement(argus);
 8001630:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001634:	2b00      	cmp	r3, #0
 8001636:	d002      	beq.n	800163e <RxCmd_CalXtalkPixel2Pixel+0x72>
 8001638:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800163a:	f003 f913 	bl	8004864 <ExplorerApp_StartTimerMeasurement>
        return status;
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	e006      	b.n	8001650 <RxCmd_CalXtalkPixel2Pixel+0x84>
    }
    else
    {
        /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CALIBRATION_XTALK_PIXEL_2_PIXEL, 0, 0);
 8001642:	79f8      	ldrb	r0, [r7, #7]
 8001644:	2300      	movs	r3, #0
 8001646:	2200      	movs	r2, #0
 8001648:	2166      	movs	r1, #102	@ 0x66
 800164a:	f003 fbad 	bl	8004da8 <SCI_SendCommand>
 800164e:	4603      	mov	r3, r0
    }
}
 8001650:	4618      	mov	r0, r3
 8001652:	3728      	adds	r7, #40	@ 0x28
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <TxCmd_CalXtalkPixel2Pixel>:
static status_t TxCmd_CalXtalkPixel2Pixel(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08c      	sub	sp, #48	@ 0x30
 800165c:	af00      	add	r7, sp, #0
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	4603      	mov	r3, r0
 8001666:	73fb      	strb	r3, [r7, #15]
    (void)data;
    (void)param;

    status_t status = STATUS_OK;
 8001668:	2300      	movs	r3, #0
 800166a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    argus_cal_p2pxtalk_t cal = { 0 };
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	821a      	strh	r2, [r3, #16]
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	4618      	mov	r0, r3
 8001680:	f002 fe6c 	bl	800435c <ExplorerApp_GetArgusPtr>
 8001684:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8001686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001688:	2b00      	cmp	r3, #0
 800168a:	d102      	bne.n	8001692 <TxCmd_CalXtalkPixel2Pixel+0x3a>
 800168c:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8001690:	e00d      	b.n	80016ae <TxCmd_CalXtalkPixel2Pixel+0x56>
    status = Argus_GetCalibrationCrosstalkPixel2Pixel(argus, &cal);
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4619      	mov	r1, r3
 8001698:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800169a:	f015 f883 	bl	80167a4 <Argus_GetCalibrationCrosstalkPixel2Pixel>
 800169e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    Serialize_Cal_P2PXtalk(frame, &cal);
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	4619      	mov	r1, r3
 80016a6:	68b8      	ldr	r0, [r7, #8]
 80016a8:	f7ff fd1e 	bl	80010e8 <Serialize_Cal_P2PXtalk>
    return status;
 80016ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3730      	adds	r7, #48	@ 0x30
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <RxCmd_CalXtalkVectorTable>:

static status_t RxCmd_CalXtalkVectorTable(sci_device_t deviceID, sci_frame_t * frame)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b0c8      	sub	sp, #288	@ 0x120
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	4602      	mov	r2, r0
 80016be:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80016c2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80016c6:	6019      	str	r1, [r3, #0]
 80016c8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80016cc:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80016d0:	701a      	strb	r2, [r3, #0]
    if (SCI_Frame_BytesToRead(frame) > 1)
 80016d2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80016d6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80016da:	6818      	ldr	r0, [r3, #0]
 80016dc:	f004 fb8e 	bl	8005dfc <SCI_Frame_BytesToRead>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	f240 8088 	bls.w	80017f8 <RxCmd_CalXtalkVectorTable+0x142>
    {
        /* Master sending data... */
        argus_cal_xtalk_table_t xtalk;
        for (uint_fast8_t f = 0; f < ARGUS_DFM_FRAME_COUNT; ++f)
 80016e8:	2300      	movs	r3, #0
 80016ea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80016ee:	e053      	b.n	8001798 <RxCmd_CalXtalkVectorTable+0xe2>
        {
            for (uint_fast8_t x = 0; x < ARGUS_PIXELS_X; ++x)
 80016f0:	2300      	movs	r3, #0
 80016f2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80016f6:	e046      	b.n	8001786 <RxCmd_CalXtalkVectorTable+0xd0>
            {
                for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80016fe:	e039      	b.n	8001774 <RxCmd_CalXtalkVectorTable+0xbe>
                {
                    xtalk.Table[f][x][y].dS = SCI_Frame_Dequeue16s(frame);
 8001700:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001704:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001708:	6818      	ldr	r0, [r3, #0]
 800170a:	f004 fde8 	bl	80062de <SCI_Frame_Dequeue16s>
 800170e:	4603      	mov	r3, r0
 8001710:	4618      	mov	r0, r3
 8001712:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001716:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800171a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800171e:	00d1      	lsls	r1, r2, #3
 8001720:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001724:	440a      	add	r2, r1
 8001726:	0091      	lsls	r1, r2, #2
 8001728:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800172c:	440a      	add	r2, r1
 800172e:	4601      	mov	r1, r0
 8001730:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
                    xtalk.Table[f][x][y].dC = SCI_Frame_Dequeue16s(frame);
 8001734:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001738:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800173c:	6818      	ldr	r0, [r3, #0]
 800173e:	f004 fdce 	bl	80062de <SCI_Frame_Dequeue16s>
 8001742:	4603      	mov	r3, r0
 8001744:	4618      	mov	r0, r3
 8001746:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800174a:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 800174e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001752:	00d9      	lsls	r1, r3, #3
 8001754:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001758:	440b      	add	r3, r1
 800175a:	0099      	lsls	r1, r3, #2
 800175c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001760:	440b      	add	r3, r1
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	4602      	mov	r2, r0
 8001768:	805a      	strh	r2, [r3, #2]
                for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 800176a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800176e:	3301      	adds	r3, #1
 8001770:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001778:	2b03      	cmp	r3, #3
 800177a:	d9c1      	bls.n	8001700 <RxCmd_CalXtalkVectorTable+0x4a>
            for (uint_fast8_t x = 0; x < ARGUS_PIXELS_X; ++x)
 800177c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001780:	3301      	adds	r3, #1
 8001782:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001786:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800178a:	2b07      	cmp	r3, #7
 800178c:	d9b4      	bls.n	80016f8 <RxCmd_CalXtalkVectorTable+0x42>
        for (uint_fast8_t f = 0; f < ARGUS_DFM_FRAME_COUNT; ++f)
 800178e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001792:	3301      	adds	r3, #1
 8001794:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001798:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800179c:	2b01      	cmp	r3, #1
 800179e:	d9a7      	bls.n	80016f0 <RxCmd_CalXtalkVectorTable+0x3a>
                }
            }
        }
        argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 80017a0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80017a4:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f002 fdd6 	bl	800435c <ExplorerApp_GetArgusPtr>
 80017b0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
        if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 80017b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d102      	bne.n	80017c2 <RxCmd_CalXtalkVectorTable+0x10c>
 80017bc:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 80017c0:	e025      	b.n	800180e <RxCmd_CalXtalkVectorTable+0x158>
        bool resume = ExplorerApp_SuspendTimerMeasurement(argus);
 80017c2:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 80017c6:	f003 f821 	bl	800480c <ExplorerApp_SuspendTimerMeasurement>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        status_t status = Argus_SetCalibrationCrosstalkVectorTable(argus, &xtalk);
 80017d0:	f107 0308 	add.w	r3, r7, #8
 80017d4:	4619      	mov	r1, r3
 80017d6:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 80017da:	f014 fdc9 	bl	8016370 <Argus_SetCalibrationCrosstalkVectorTable>
 80017de:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
        if (resume) ExplorerApp_StartTimerMeasurement(argus);
 80017e2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <RxCmd_CalXtalkVectorTable+0x13c>
 80017ea:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 80017ee:	f003 f839 	bl	8004864 <ExplorerApp_StartTimerMeasurement>
        return status;
 80017f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80017f6:	e00a      	b.n	800180e <RxCmd_CalXtalkVectorTable+0x158>

    }
    else
    {
        /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CALIBRATION_XTALK_VECTOR_TABLE, 0, 0);
 80017f8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80017fc:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8001800:	7818      	ldrb	r0, [r3, #0]
 8001802:	2300      	movs	r3, #0
 8001804:	2200      	movs	r2, #0
 8001806:	2162      	movs	r1, #98	@ 0x62
 8001808:	f003 face 	bl	8004da8 <SCI_SendCommand>
 800180c:	4603      	mov	r3, r0
    }
}
 800180e:	4618      	mov	r0, r3
 8001810:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <TxCmd_CalXtalkVectorTable>:
static status_t TxCmd_CalXtalkVectorTable(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 8001818:	b590      	push	{r4, r7, lr}
 800181a:	b0cb      	sub	sp, #300	@ 0x12c
 800181c:	af00      	add	r7, sp, #0
 800181e:	4604      	mov	r4, r0
 8001820:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 8001824:	f5a0 7090 	sub.w	r0, r0, #288	@ 0x120
 8001828:	6001      	str	r1, [r0, #0]
 800182a:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 800182e:	f5a1 7192 	sub.w	r1, r1, #292	@ 0x124
 8001832:	600a      	str	r2, [r1, #0]
 8001834:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8001838:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001842:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8001846:	4622      	mov	r2, r4
 8001848:	701a      	strb	r2, [r3, #0]
    (void)data;
    (void)param;

    status_t status = STATUS_OK;
 800184a:	2300      	movs	r3, #0
 800184c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    argus_cal_xtalk_table_t xtalk;
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8001850:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001854:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f002 fd7e 	bl	800435c <ExplorerApp_GetArgusPtr>
 8001860:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8001864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001868:	2b00      	cmp	r3, #0
 800186a:	d102      	bne.n	8001872 <TxCmd_CalXtalkVectorTable+0x5a>
 800186c:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8001870:	e063      	b.n	800193a <TxCmd_CalXtalkVectorTable+0x122>
    status = Argus_GetCalibrationCrosstalkVectorTable(argus, &xtalk);
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	4619      	mov	r1, r3
 8001878:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 800187c:	f014 fdce 	bl	801641c <Argus_GetCalibrationCrosstalkVectorTable>
 8001880:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
    for (uint_fast8_t f = 0; f < ARGUS_DFM_FRAME_COUNT; ++f)
 8001884:	2300      	movs	r3, #0
 8001886:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800188a:	e050      	b.n	800192e <TxCmd_CalXtalkVectorTable+0x116>
    {
        for (uint_fast8_t x = 0; x < ARGUS_PIXELS_X; ++x)
 800188c:	2300      	movs	r3, #0
 800188e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001892:	e043      	b.n	800191c <TxCmd_CalXtalkVectorTable+0x104>
        {
            for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 8001894:	2300      	movs	r3, #0
 8001896:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800189a:	e036      	b.n	800190a <TxCmd_CalXtalkVectorTable+0xf2>
            {
                SCI_Frame_Queue16s(frame, xtalk.Table[f][x][y].dS);
 800189c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80018a0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80018a4:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80018a8:	00d1      	lsls	r1, r2, #3
 80018aa:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80018ae:	440a      	add	r2, r1
 80018b0:	0091      	lsls	r1, r2, #2
 80018b2:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80018b6:	440a      	add	r2, r1
 80018b8:	f933 2022 	ldrsh.w	r2, [r3, r2, lsl #2]
 80018bc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80018c0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80018c4:	4611      	mov	r1, r2
 80018c6:	6818      	ldr	r0, [r3, #0]
 80018c8:	f004 fc12 	bl	80060f0 <SCI_Frame_Queue16s>
                SCI_Frame_Queue16s(frame, xtalk.Table[f][x][y].dC);
 80018cc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80018d0:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 80018d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80018d8:	00d9      	lsls	r1, r3, #3
 80018da:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80018de:	440b      	add	r3, r1
 80018e0:	0099      	lsls	r1, r3, #2
 80018e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80018e6:	440b      	add	r3, r1
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80018f0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80018f4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80018f8:	4611      	mov	r1, r2
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	f004 fbf8 	bl	80060f0 <SCI_Frame_Queue16s>
            for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 8001900:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001904:	3301      	adds	r3, #1
 8001906:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800190a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800190e:	2b03      	cmp	r3, #3
 8001910:	d9c4      	bls.n	800189c <TxCmd_CalXtalkVectorTable+0x84>
        for (uint_fast8_t x = 0; x < ARGUS_PIXELS_X; ++x)
 8001912:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001916:	3301      	adds	r3, #1
 8001918:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800191c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001920:	2b07      	cmp	r3, #7
 8001922:	d9b7      	bls.n	8001894 <TxCmd_CalXtalkVectorTable+0x7c>
    for (uint_fast8_t f = 0; f < ARGUS_DFM_FRAME_COUNT; ++f)
 8001924:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001928:	3301      	adds	r3, #1
 800192a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800192e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001932:	2b01      	cmp	r3, #1
 8001934:	d9aa      	bls.n	800188c <TxCmd_CalXtalkVectorTable+0x74>
            }
        }
    }
    return status;
 8001936:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 800193a:	4618      	mov	r0, r3
 800193c:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 8001940:	46bd      	mov	sp, r7
 8001942:	bd90      	pop	{r4, r7, pc}

08001944 <RxCmd_CalXtalkResetVectorTable>:

static status_t RxCmd_CalXtalkResetVectorTable(sci_device_t deviceID, sci_frame_t * frame)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	6039      	str	r1, [r7, #0]
 800194e:	71fb      	strb	r3, [r7, #7]
    (void)frame;
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	4618      	mov	r0, r3
 8001954:	f002 fd02 	bl	800435c <ExplorerApp_GetArgusPtr>
 8001958:	60f8      	str	r0, [r7, #12]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d102      	bne.n	8001966 <RxCmd_CalXtalkResetVectorTable+0x22>
 8001960:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8001964:	e003      	b.n	800196e <RxCmd_CalXtalkResetVectorTable+0x2a>
    return Argus_ResetCalibrationCrosstalkVectorTable(argus);
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	f014 fd82 	bl	8016470 <Argus_ResetCalibrationCrosstalkVectorTable>
 800196c:	4603      	mov	r3, r0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <RxCmd_CalXtalkSeqSampleTime>:

static status_t RxCmd_CalXtalkSeqSampleTime(sci_device_t deviceID, sci_frame_t * frame)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b086      	sub	sp, #24
 800197a:	af00      	add	r7, sp, #0
 800197c:	4603      	mov	r3, r0
 800197e:	6039      	str	r1, [r7, #0]
 8001980:	71fb      	strb	r3, [r7, #7]
    if (SCI_Frame_BytesToRead(frame) > 1)
 8001982:	6838      	ldr	r0, [r7, #0]
 8001984:	f004 fa3a 	bl	8005dfc <SCI_Frame_BytesToRead>
 8001988:	4603      	mov	r3, r0
 800198a:	2b01      	cmp	r3, #1
 800198c:	d922      	bls.n	80019d4 <RxCmd_CalXtalkSeqSampleTime+0x5e>
    {
        /* Master sending data... */
        uint16_t time = SCI_Frame_Dequeue16u(frame);
 800198e:	6838      	ldr	r0, [r7, #0]
 8001990:	f004 fcf0 	bl	8006374 <SCI_Frame_Dequeue16u>
 8001994:	4603      	mov	r3, r0
 8001996:	82fb      	strh	r3, [r7, #22]
        argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	4618      	mov	r0, r3
 800199c:	f002 fcde 	bl	800435c <ExplorerApp_GetArgusPtr>
 80019a0:	6138      	str	r0, [r7, #16]
        if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <RxCmd_CalXtalkSeqSampleTime+0x38>
 80019a8:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 80019ac:	e019      	b.n	80019e2 <RxCmd_CalXtalkSeqSampleTime+0x6c>
        bool resume = ExplorerApp_SuspendTimerMeasurement(argus);
 80019ae:	6938      	ldr	r0, [r7, #16]
 80019b0:	f002 ff2c 	bl	800480c <ExplorerApp_SuspendTimerMeasurement>
 80019b4:	4603      	mov	r3, r0
 80019b6:	73fb      	strb	r3, [r7, #15]
        status_t status = Argus_SetCalibrationCrosstalkSequenceSampleTime(argus, time);
 80019b8:	8afb      	ldrh	r3, [r7, #22]
 80019ba:	4619      	mov	r1, r3
 80019bc:	6938      	ldr	r0, [r7, #16]
 80019be:	f014 fdaf 	bl	8016520 <Argus_SetCalibrationCrosstalkSequenceSampleTime>
 80019c2:	60b8      	str	r0, [r7, #8]
        if (resume) ExplorerApp_StartTimerMeasurement(argus);
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d002      	beq.n	80019d0 <RxCmd_CalXtalkSeqSampleTime+0x5a>
 80019ca:	6938      	ldr	r0, [r7, #16]
 80019cc:	f002 ff4a 	bl	8004864 <ExplorerApp_StartTimerMeasurement>
        return status;
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	e006      	b.n	80019e2 <RxCmd_CalXtalkSeqSampleTime+0x6c>

    }
    else
    {
        /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CALIBRATION_XTALK_SAMPLE_TIME, 0, 0);
 80019d4:	79f8      	ldrb	r0, [r7, #7]
 80019d6:	2300      	movs	r3, #0
 80019d8:	2200      	movs	r2, #0
 80019da:	2164      	movs	r1, #100	@ 0x64
 80019dc:	f003 f9e4 	bl	8004da8 <SCI_SendCommand>
 80019e0:	4603      	mov	r3, r0
    }
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <TxCmd_CalXtalkSeqSampleTime>:
static status_t TxCmd_CalXtalkSeqSampleTime(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b088      	sub	sp, #32
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
 80019f4:	603b      	str	r3, [r7, #0]
 80019f6:	4603      	mov	r3, r0
 80019f8:	73fb      	strb	r3, [r7, #15]
    (void)data;
    (void)param;

    status_t status = STATUS_OK;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
    uint16_t time;
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f002 fcab 	bl	800435c <ExplorerApp_GetArgusPtr>
 8001a06:	61b8      	str	r0, [r7, #24]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d102      	bne.n	8001a14 <TxCmd_CalXtalkSeqSampleTime+0x2a>
 8001a0e:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8001a12:	e00c      	b.n	8001a2e <TxCmd_CalXtalkSeqSampleTime+0x44>
    status = Argus_GetCalibrationCrosstalkSequenceSampleTime(argus, &time);
 8001a14:	f107 0316 	add.w	r3, r7, #22
 8001a18:	4619      	mov	r1, r3
 8001a1a:	69b8      	ldr	r0, [r7, #24]
 8001a1c:	f014 fdce 	bl	80165bc <Argus_GetCalibrationCrosstalkSequenceSampleTime>
 8001a20:	61f8      	str	r0, [r7, #28]
    SCI_Frame_Queue16u(frame, time);
 8001a22:	8afb      	ldrh	r3, [r7, #22]
 8001a24:	4619      	mov	r1, r3
 8001a26:	68b8      	ldr	r0, [r7, #8]
 8001a28:	f004 facf 	bl	8005fca <SCI_Frame_Queue16u>
    return status;
 8001a2c:	69fb      	ldr	r3, [r7, #28]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3720      	adds	r7, #32
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <RxCmd_CalXtalkSeqMaxAmplitude>:

static status_t RxCmd_CalXtalkSeqMaxAmplitude(sci_device_t deviceID, sci_frame_t * frame)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b086      	sub	sp, #24
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	6039      	str	r1, [r7, #0]
 8001a40:	71fb      	strb	r3, [r7, #7]
    if (SCI_Frame_BytesToRead(frame) > 1)
 8001a42:	6838      	ldr	r0, [r7, #0]
 8001a44:	f004 f9da 	bl	8005dfc <SCI_Frame_BytesToRead>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d922      	bls.n	8001a94 <RxCmd_CalXtalkSeqMaxAmplitude+0x5e>
    {
        /* Master sending data... */
        uq12_4_t ampl = SCI_Frame_Dequeue16u(frame);
 8001a4e:	6838      	ldr	r0, [r7, #0]
 8001a50:	f004 fc90 	bl	8006374 <SCI_Frame_Dequeue16u>
 8001a54:	4603      	mov	r3, r0
 8001a56:	82fb      	strh	r3, [r7, #22]
        argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f002 fc7e 	bl	800435c <ExplorerApp_GetArgusPtr>
 8001a60:	6138      	str	r0, [r7, #16]
        if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d102      	bne.n	8001a6e <RxCmd_CalXtalkSeqMaxAmplitude+0x38>
 8001a68:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8001a6c:	e019      	b.n	8001aa2 <RxCmd_CalXtalkSeqMaxAmplitude+0x6c>
        bool resume = ExplorerApp_SuspendTimerMeasurement(argus);
 8001a6e:	6938      	ldr	r0, [r7, #16]
 8001a70:	f002 fecc 	bl	800480c <ExplorerApp_SuspendTimerMeasurement>
 8001a74:	4603      	mov	r3, r0
 8001a76:	73fb      	strb	r3, [r7, #15]
        status_t status = Argus_SetCalibrationCrosstalkSequenceAmplitudeThreshold(argus, ampl);
 8001a78:	8afb      	ldrh	r3, [r7, #22]
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	6938      	ldr	r0, [r7, #16]
 8001a7e:	f014 fdc5 	bl	801660c <Argus_SetCalibrationCrosstalkSequenceAmplitudeThreshold>
 8001a82:	60b8      	str	r0, [r7, #8]
        if (resume) ExplorerApp_StartTimerMeasurement(argus);
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d002      	beq.n	8001a90 <RxCmd_CalXtalkSeqMaxAmplitude+0x5a>
 8001a8a:	6938      	ldr	r0, [r7, #16]
 8001a8c:	f002 feea 	bl	8004864 <ExplorerApp_StartTimerMeasurement>
        return status;
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	e006      	b.n	8001aa2 <RxCmd_CalXtalkSeqMaxAmplitude+0x6c>
    }
    else
    {
        /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CALIBRATION_XTALK_MAX_AMPLITUDE, 0, 0);
 8001a94:	79f8      	ldrb	r0, [r7, #7]
 8001a96:	2300      	movs	r3, #0
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2165      	movs	r1, #101	@ 0x65
 8001a9c:	f003 f984 	bl	8004da8 <SCI_SendCommand>
 8001aa0:	4603      	mov	r3, r0
    }
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <TxCmd_CalXtalkSeqMaxAmplitude>:
static status_t TxCmd_CalXtalkSeqMaxAmplitude(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b088      	sub	sp, #32
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
 8001ab4:	603b      	str	r3, [r7, #0]
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	73fb      	strb	r3, [r7, #15]
    (void)data;
    (void)param;

    status_t status = STATUS_OK;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
    uq12_4_t ampl;
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f002 fc4b 	bl	800435c <ExplorerApp_GetArgusPtr>
 8001ac6:	61b8      	str	r0, [r7, #24]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d102      	bne.n	8001ad4 <TxCmd_CalXtalkSeqMaxAmplitude+0x2a>
 8001ace:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8001ad2:	e00c      	b.n	8001aee <TxCmd_CalXtalkSeqMaxAmplitude+0x44>
    status = Argus_GetCalibrationCrosstalkSequenceAmplitudeThreshold(argus, &ampl);
 8001ad4:	f107 0316 	add.w	r3, r7, #22
 8001ad8:	4619      	mov	r1, r3
 8001ada:	69b8      	ldr	r0, [r7, #24]
 8001adc:	f014 fde4 	bl	80166a8 <Argus_GetCalibrationCrosstalkSequenceAmplitudeThreshold>
 8001ae0:	61f8      	str	r0, [r7, #28]
    SCI_Frame_Queue16u(frame, ampl);
 8001ae2:	8afb      	ldrh	r3, [r7, #22]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	68b8      	ldr	r0, [r7, #8]
 8001ae8:	f004 fa6f 	bl	8005fca <SCI_Frame_Queue16u>
    return status;
 8001aec:	69fb      	ldr	r3, [r7, #28]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3720      	adds	r7, #32
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <ExplorerAPI_InitCal>:

/*******************************************************************************
 * Init Code
 ******************************************************************************/
status_t ExplorerAPI_InitCal()
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
    status_t status;
    status = SCI_SetRxTxCommand(CMD_CALIBRATION_GLOBAL_RANGE_OFFSET, RxCmd_CalGlobalRangeOffsets, TxCmd_CalGlobalRangeOffsets);
 8001afe:	4a33      	ldr	r2, [pc, #204]	@ (8001bcc <ExplorerAPI_InitCal+0xd4>)
 8001b00:	4933      	ldr	r1, [pc, #204]	@ (8001bd0 <ExplorerAPI_InitCal+0xd8>)
 8001b02:	2061      	movs	r0, #97	@ 0x61
 8001b04:	f002 ffd2 	bl	8004aac <SCI_SetRxTxCommand>
 8001b08:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	da01      	bge.n	8001b14 <ExplorerAPI_InitCal+0x1c>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	e056      	b.n	8001bc2 <ExplorerAPI_InitCal+0xca>
    status = SCI_SetRxTxCommand(CMD_CALIBRATION_PIXEL_RANGE_OFFSETS, RxCmd_CalPixelRangeOffsets, TxCmd_CalPixelRangeOffsets);
 8001b14:	4a2f      	ldr	r2, [pc, #188]	@ (8001bd4 <ExplorerAPI_InitCal+0xdc>)
 8001b16:	4930      	ldr	r1, [pc, #192]	@ (8001bd8 <ExplorerAPI_InitCal+0xe0>)
 8001b18:	2067      	movs	r0, #103	@ 0x67
 8001b1a:	f002 ffc7 	bl	8004aac <SCI_SetRxTxCommand>
 8001b1e:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	da01      	bge.n	8001b2a <ExplorerAPI_InitCal+0x32>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	e04b      	b.n	8001bc2 <ExplorerAPI_InitCal+0xca>
    status = SCI_SetRxCommand(CMD_CALIBRATION_PIXEL_RANGE_OFFSETS_RESET, RxCmd_CalResetPixelRangeOffsets);
 8001b2a:	492c      	ldr	r1, [pc, #176]	@ (8001bdc <ExplorerAPI_InitCal+0xe4>)
 8001b2c:	2068      	movs	r0, #104	@ 0x68
 8001b2e:	f002 ff89 	bl	8004a44 <SCI_SetRxCommand>
 8001b32:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	da01      	bge.n	8001b3e <ExplorerAPI_InitCal+0x46>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	e041      	b.n	8001bc2 <ExplorerAPI_InitCal+0xca>
    status = SCI_SetRxTxCommand(CMD_CALIBRATION_RANGE_OFFSET_SAMPLE_TIME, RxCmd_CalRangeOffsetSeqSampleTime, TxCmd_CalRangeOffsetSeqSampleTime);
 8001b3e:	4a28      	ldr	r2, [pc, #160]	@ (8001be0 <ExplorerAPI_InitCal+0xe8>)
 8001b40:	4928      	ldr	r1, [pc, #160]	@ (8001be4 <ExplorerAPI_InitCal+0xec>)
 8001b42:	2069      	movs	r0, #105	@ 0x69
 8001b44:	f002 ffb2 	bl	8004aac <SCI_SetRxTxCommand>
 8001b48:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	da01      	bge.n	8001b54 <ExplorerAPI_InitCal+0x5c>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	e036      	b.n	8001bc2 <ExplorerAPI_InitCal+0xca>
    status = SCI_SetRxTxCommand(CMD_CALIBRATION_XTALK_VECTOR_TABLE, RxCmd_CalXtalkVectorTable, TxCmd_CalXtalkVectorTable);
 8001b54:	4a24      	ldr	r2, [pc, #144]	@ (8001be8 <ExplorerAPI_InitCal+0xf0>)
 8001b56:	4925      	ldr	r1, [pc, #148]	@ (8001bec <ExplorerAPI_InitCal+0xf4>)
 8001b58:	2062      	movs	r0, #98	@ 0x62
 8001b5a:	f002 ffa7 	bl	8004aac <SCI_SetRxTxCommand>
 8001b5e:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	da01      	bge.n	8001b6a <ExplorerAPI_InitCal+0x72>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	e02b      	b.n	8001bc2 <ExplorerAPI_InitCal+0xca>
    status = SCI_SetRxCommand(CMD_CALIBRATION_XTALK_RESET_VECTOR_TABLE, RxCmd_CalXtalkResetVectorTable);
 8001b6a:	4921      	ldr	r1, [pc, #132]	@ (8001bf0 <ExplorerAPI_InitCal+0xf8>)
 8001b6c:	2063      	movs	r0, #99	@ 0x63
 8001b6e:	f002 ff69 	bl	8004a44 <SCI_SetRxCommand>
 8001b72:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	da01      	bge.n	8001b7e <ExplorerAPI_InitCal+0x86>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	e021      	b.n	8001bc2 <ExplorerAPI_InitCal+0xca>
    status = SCI_SetRxTxCommand(CMD_CALIBRATION_XTALK_SAMPLE_TIME, RxCmd_CalXtalkSeqSampleTime, TxCmd_CalXtalkSeqSampleTime);
 8001b7e:	4a1d      	ldr	r2, [pc, #116]	@ (8001bf4 <ExplorerAPI_InitCal+0xfc>)
 8001b80:	491d      	ldr	r1, [pc, #116]	@ (8001bf8 <ExplorerAPI_InitCal+0x100>)
 8001b82:	2064      	movs	r0, #100	@ 0x64
 8001b84:	f002 ff92 	bl	8004aac <SCI_SetRxTxCommand>
 8001b88:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	da01      	bge.n	8001b94 <ExplorerAPI_InitCal+0x9c>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	e016      	b.n	8001bc2 <ExplorerAPI_InitCal+0xca>
    status = SCI_SetRxTxCommand(CMD_CALIBRATION_XTALK_MAX_AMPLITUDE, RxCmd_CalXtalkSeqMaxAmplitude, TxCmd_CalXtalkSeqMaxAmplitude);
 8001b94:	4a19      	ldr	r2, [pc, #100]	@ (8001bfc <ExplorerAPI_InitCal+0x104>)
 8001b96:	491a      	ldr	r1, [pc, #104]	@ (8001c00 <ExplorerAPI_InitCal+0x108>)
 8001b98:	2065      	movs	r0, #101	@ 0x65
 8001b9a:	f002 ff87 	bl	8004aac <SCI_SetRxTxCommand>
 8001b9e:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	da01      	bge.n	8001baa <ExplorerAPI_InitCal+0xb2>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	e00b      	b.n	8001bc2 <ExplorerAPI_InitCal+0xca>
    status = SCI_SetRxTxCommand(CMD_CALIBRATION_XTALK_PIXEL_2_PIXEL, RxCmd_CalXtalkPixel2Pixel, TxCmd_CalXtalkPixel2Pixel);
 8001baa:	4a16      	ldr	r2, [pc, #88]	@ (8001c04 <ExplorerAPI_InitCal+0x10c>)
 8001bac:	4916      	ldr	r1, [pc, #88]	@ (8001c08 <ExplorerAPI_InitCal+0x110>)
 8001bae:	2066      	movs	r0, #102	@ 0x66
 8001bb0:	f002 ff7c 	bl	8004aac <SCI_SetRxTxCommand>
 8001bb4:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	da01      	bge.n	8001bc0 <ExplorerAPI_InitCal+0xc8>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	e000      	b.n	8001bc2 <ExplorerAPI_InitCal+0xca>

    return status;
 8001bc0:	687b      	ldr	r3, [r7, #4]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	080012c5 	.word	0x080012c5
 8001bd0:	08001241 	.word	0x08001241
 8001bd4:	08001419 	.word	0x08001419
 8001bd8:	08001323 	.word	0x08001323
 8001bdc:	080014db 	.word	0x080014db
 8001be0:	08001581 	.word	0x08001581
 8001be4:	0800150d 	.word	0x0800150d
 8001be8:	08001819 	.word	0x08001819
 8001bec:	080016b7 	.word	0x080016b7
 8001bf0:	08001945 	.word	0x08001945
 8001bf4:	080019eb 	.word	0x080019eb
 8001bf8:	08001977 	.word	0x08001977
 8001bfc:	08001aab 	.word	0x08001aab
 8001c00:	08001a37 	.word	0x08001a37
 8001c04:	08001659 	.word	0x08001659
 8001c08:	080015cd 	.word	0x080015cd

08001c0c <Serialize_Cfg_DCA>:
/*******************************************************************************
 * Parsing Functions
 ******************************************************************************/

static void Serialize_Cfg_DCA(sci_frame_t * frame, argus_cfg_dca_t const * dcacfg)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
    SCI_Frame_Queue08u(frame, (uint8_t)((dcacfg->Enabled > 0 ? 1U : 0U)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	f993 3000 	ldrsb.w	r3, [r3]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	dd01      	ble.n	8001c24 <Serialize_Cfg_DCA+0x18>
 8001c20:	2201      	movs	r2, #1
 8001c22:	e000      	b.n	8001c26 <Serialize_Cfg_DCA+0x1a>
 8001c24:	2200      	movs	r2, #0
                                      | (dcacfg->Enabled < 0 ? 2U : 0U)));
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	f993 3000 	ldrsb.w	r3, [r3]
    SCI_Frame_Queue08u(frame, (uint8_t)((dcacfg->Enabled > 0 ? 1U : 0U)
 8001c2c:	119b      	asrs	r3, r3, #6
 8001c2e:	b25b      	sxtb	r3, r3
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f004 f99e 	bl	8005f80 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, dcacfg->SatPxThLin);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	785b      	ldrb	r3, [r3, #1]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f004 f998 	bl	8005f80 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, dcacfg->SatPxThExp);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	789b      	ldrb	r3, [r3, #2]
 8001c54:	4619      	mov	r1, r3
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f004 f992 	bl	8005f80 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, dcacfg->SatPxThRst);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	78db      	ldrb	r3, [r3, #3]
 8001c60:	4619      	mov	r1, r3
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f004 f98c 	bl	8005f80 <SCI_Frame_Queue08u>
    SCI_Frame_Queue16u(frame, dcacfg->Atarget);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	889b      	ldrh	r3, [r3, #4]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f004 f9ab 	bl	8005fca <SCI_Frame_Queue16u>
    SCI_Frame_Queue16u(frame, dcacfg->AthLow);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	88db      	ldrh	r3, [r3, #6]
 8001c78:	4619      	mov	r1, r3
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f004 f9a5 	bl	8005fca <SCI_Frame_Queue16u>
    SCI_Frame_Queue16u(frame, dcacfg->AthHigh);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	891b      	ldrh	r3, [r3, #8]
 8001c84:	4619      	mov	r1, r3
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f004 f99f 	bl	8005fca <SCI_Frame_Queue16u>
    SCI_Frame_Queue08u(frame, dcacfg->AmplitudeMode);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	7a9b      	ldrb	r3, [r3, #10]
 8001c90:	4619      	mov	r1, r3
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f004 f974 	bl	8005f80 <SCI_Frame_Queue08u>
    SCI_Frame_Queue16u(frame, dcacfg->DepthNom);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	899b      	ldrh	r3, [r3, #12]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f004 f993 	bl	8005fca <SCI_Frame_Queue16u>
    SCI_Frame_Queue16u(frame, dcacfg->DepthMin);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	89db      	ldrh	r3, [r3, #14]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f004 f98d 	bl	8005fca <SCI_Frame_Queue16u>
    SCI_Frame_Queue16u(frame, dcacfg->DepthMax);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	8a1b      	ldrh	r3, [r3, #16]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f004 f987 	bl	8005fca <SCI_Frame_Queue16u>
    SCI_Frame_Queue08u(frame, dcacfg->Power);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	7adb      	ldrb	r3, [r3, #11]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f004 f95c 	bl	8005f80 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, dcacfg->GainNom);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	7c9b      	ldrb	r3, [r3, #18]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f004 f956 	bl	8005f80 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, dcacfg->GainMin);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	7cdb      	ldrb	r3, [r3, #19]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f004 f950 	bl	8005f80 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, dcacfg->GainMax);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	7d1b      	ldrb	r3, [r3, #20]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f004 f94a 	bl	8005f80 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, dcacfg->PowerSavingRatio);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	7d5b      	ldrb	r3, [r3, #21]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f004 f944 	bl	8005f80 <SCI_Frame_Queue08u>
}
 8001cf8:	bf00      	nop
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <Deserialize_Cfg_DCA>:
static void Deserialize_Cfg_DCA(sci_frame_t * frame, argus_cfg_dca_t * dcacfg)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
    /* Dynamic Configuration Adaption. */
    uint8_t tmp = SCI_Frame_Dequeue08u(frame);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f004 fb26 	bl	800635c <SCI_Frame_Dequeue08u>
 8001d10:	4603      	mov	r3, r0
 8001d12:	73fb      	strb	r3, [r7, #15]
    dcacfg->Enabled = (tmp & 1U) ? 1 : (tmp & 2U) ? -1 : 0;
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d109      	bne.n	8001d32 <Deserialize_Cfg_DCA+0x32>
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d002      	beq.n	8001d2e <Deserialize_Cfg_DCA+0x2e>
 8001d28:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2c:	e002      	b.n	8001d34 <Deserialize_Cfg_DCA+0x34>
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e000      	b.n	8001d34 <Deserialize_Cfg_DCA+0x34>
 8001d32:	2301      	movs	r3, #1
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	7013      	strb	r3, [r2, #0]
    dcacfg->SatPxThLin = SCI_Frame_Dequeue08u(frame);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f004 fb0f 	bl	800635c <SCI_Frame_Dequeue08u>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	461a      	mov	r2, r3
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	705a      	strb	r2, [r3, #1]
    dcacfg->SatPxThExp = SCI_Frame_Dequeue08u(frame);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f004 fb08 	bl	800635c <SCI_Frame_Dequeue08u>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	461a      	mov	r2, r3
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	709a      	strb	r2, [r3, #2]
    dcacfg->SatPxThRst = SCI_Frame_Dequeue08u(frame);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f004 fb01 	bl	800635c <SCI_Frame_Dequeue08u>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	70da      	strb	r2, [r3, #3]
    dcacfg->Atarget = SCI_Frame_Dequeue16u(frame);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f004 fb06 	bl	8006374 <SCI_Frame_Dequeue16u>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	809a      	strh	r2, [r3, #4]
    dcacfg->AthLow = SCI_Frame_Dequeue16u(frame);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f004 faff 	bl	8006374 <SCI_Frame_Dequeue16u>
 8001d76:	4603      	mov	r3, r0
 8001d78:	461a      	mov	r2, r3
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	80da      	strh	r2, [r3, #6]
    dcacfg->AthHigh = SCI_Frame_Dequeue16u(frame);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f004 faf8 	bl	8006374 <SCI_Frame_Dequeue16u>
 8001d84:	4603      	mov	r3, r0
 8001d86:	461a      	mov	r2, r3
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	811a      	strh	r2, [r3, #8]
    dcacfg->AmplitudeMode = SCI_Frame_Dequeue08u(frame);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f004 fae5 	bl	800635c <SCI_Frame_Dequeue08u>
 8001d92:	4603      	mov	r3, r0
 8001d94:	461a      	mov	r2, r3
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	729a      	strb	r2, [r3, #10]
    dcacfg->DepthNom = SCI_Frame_Dequeue16u(frame);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f004 faea 	bl	8006374 <SCI_Frame_Dequeue16u>
 8001da0:	4603      	mov	r3, r0
 8001da2:	461a      	mov	r2, r3
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	819a      	strh	r2, [r3, #12]
    dcacfg->DepthMin = SCI_Frame_Dequeue16u(frame);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f004 fae3 	bl	8006374 <SCI_Frame_Dequeue16u>
 8001dae:	4603      	mov	r3, r0
 8001db0:	461a      	mov	r2, r3
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	81da      	strh	r2, [r3, #14]
    dcacfg->DepthMax = SCI_Frame_Dequeue16u(frame);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f004 fadc 	bl	8006374 <SCI_Frame_Dequeue16u>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	821a      	strh	r2, [r3, #16]
    dcacfg->Power = SCI_Frame_Dequeue08u(frame);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f004 fac9 	bl	800635c <SCI_Frame_Dequeue08u>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	461a      	mov	r2, r3
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	72da      	strb	r2, [r3, #11]
    dcacfg->GainNom = SCI_Frame_Dequeue08u(frame);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f004 fac2 	bl	800635c <SCI_Frame_Dequeue08u>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	461a      	mov	r2, r3
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	749a      	strb	r2, [r3, #18]
    dcacfg->GainMin = SCI_Frame_Dequeue08u(frame);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f004 fabb 	bl	800635c <SCI_Frame_Dequeue08u>
 8001de6:	4603      	mov	r3, r0
 8001de8:	461a      	mov	r2, r3
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	74da      	strb	r2, [r3, #19]
    dcacfg->GainMax = SCI_Frame_Dequeue08u(frame);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f004 fab4 	bl	800635c <SCI_Frame_Dequeue08u>
 8001df4:	4603      	mov	r3, r0
 8001df6:	461a      	mov	r2, r3
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	751a      	strb	r2, [r3, #20]
    dcacfg->PowerSavingRatio = SCI_Frame_Dequeue08u(frame);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f004 faad 	bl	800635c <SCI_Frame_Dequeue08u>
 8001e02:	4603      	mov	r3, r0
 8001e04:	461a      	mov	r2, r3
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	755a      	strb	r2, [r3, #21]
}
 8001e0a:	bf00      	nop
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <Serialize_Cfg_PBA>:

static void Serialize_Cfg_PBA(sci_frame_t * frame, argus_cfg_pba_t const * pba)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
    assert(frame != 0);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d105      	bne.n	8001e30 <Serialize_Cfg_PBA+0x1c>
 8001e24:	4b50      	ldr	r3, [pc, #320]	@ (8001f68 <Serialize_Cfg_PBA+0x154>)
 8001e26:	4a51      	ldr	r2, [pc, #324]	@ (8001f6c <Serialize_Cfg_PBA+0x158>)
 8001e28:	216e      	movs	r1, #110	@ 0x6e
 8001e2a:	4851      	ldr	r0, [pc, #324]	@ (8001f70 <Serialize_Cfg_PBA+0x15c>)
 8001e2c:	f005 fd3c 	bl	80078a8 <__assert_func>
    assert(pba != 0);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d105      	bne.n	8001e42 <Serialize_Cfg_PBA+0x2e>
 8001e36:	4b4f      	ldr	r3, [pc, #316]	@ (8001f74 <Serialize_Cfg_PBA+0x160>)
 8001e38:	4a4c      	ldr	r2, [pc, #304]	@ (8001f6c <Serialize_Cfg_PBA+0x158>)
 8001e3a:	216f      	movs	r1, #111	@ 0x6f
 8001e3c:	484c      	ldr	r0, [pc, #304]	@ (8001f70 <Serialize_Cfg_PBA+0x15c>)
 8001e3e:	f005 fd33 	bl	80078a8 <__assert_func>

    SCI_Frame_Queue08u(frame, !!(pba->Enabled & PBA_ENABLE));
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	bf14      	ite	ne
 8001e4e:	2301      	movne	r3, #1
 8001e50:	2300      	moveq	r3, #0
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	4619      	mov	r1, r3
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f004 f892 	bl	8005f80 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, !!(pba->Enabled & PBA_ENABLE_GOLDPX_FALLBACK_MODE));
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	f003 0320 	and.w	r3, r3, #32
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	bf14      	ite	ne
 8001e68:	2301      	movne	r3, #1
 8001e6a:	2300      	moveq	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	4619      	mov	r1, r3
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f004 f885 	bl	8005f80 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, !!(pba->Enabled & PBA_ENABLE_GOLDPX_PRIORITY_MODE));
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	f003 0310 	and.w	r3, r3, #16
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	bf14      	ite	ne
 8001e82:	2301      	movne	r3, #1
 8001e84:	2300      	moveq	r3, #0
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	4619      	mov	r1, r3
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f004 f878 	bl	8005f80 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, !!(pba->Enabled & PBA_ENABLE_MIN_DIST_SCOPE));
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	bf14      	ite	ne
 8001e9c:	2301      	movne	r3, #1
 8001e9e:	2300      	moveq	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f004 f86b 	bl	8005f80 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, pba->AveragingMode);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	785b      	ldrb	r3, [r3, #1]
 8001eae:	4619      	mov	r1, r3
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f004 f865 	bl	8005f80 <SCI_Frame_Queue08u>
    SCI_Frame_Queue32u(frame, pba->PrefilterMask);
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	4619      	mov	r1, r3
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f004 f8cb 	bl	8006058 <SCI_Frame_Queue32u>
    SCI_Frame_Queue16u(frame, pba->AbsoluteAmplitudeExclusion);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	88db      	ldrh	r3, [r3, #6]
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f004 f87e 	bl	8005fca <SCI_Frame_Queue16u>
    SCI_Frame_Queue16u(frame, pba->AbsoluteAmplitudeInclusion);
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	889b      	ldrh	r3, [r3, #4]
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f004 f878 	bl	8005fca <SCI_Frame_Queue16u>
    SCI_Frame_Queue08u(frame, pba->RelativeAmplitudeExclusion);
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	78db      	ldrb	r3, [r3, #3]
 8001ede:	4619      	mov	r1, r3
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f004 f84d 	bl	8005f80 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, pba->RelativeAmplitudeInclusion);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	789b      	ldrb	r3, [r3, #2]
 8001eea:	4619      	mov	r1, r3
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f004 f847 	bl	8005f80 <SCI_Frame_Queue08u>
    SCI_Frame_Queue32s(frame, pba->AbsoluteMinimumDistanceThreshold);
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f004 f92f 	bl	800615c <SCI_Frame_Queue32s>
    SCI_Frame_Queue16u(frame, pba->AbsoluteDistanceScopeExclusion);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	8a1b      	ldrh	r3, [r3, #16]
 8001f02:	4619      	mov	r1, r3
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f004 f860 	bl	8005fca <SCI_Frame_Queue16u>
    SCI_Frame_Queue16u(frame, pba->AbsoluteDistanceScopeInclusion);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	89db      	ldrh	r3, [r3, #14]
 8001f0e:	4619      	mov	r1, r3
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f004 f85a 	bl	8005fca <SCI_Frame_Queue16u>
    SCI_Frame_Queue08u(frame, pba->RelativeDistanceScopeExclusion);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	7b5b      	ldrb	r3, [r3, #13]
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f004 f82f 	bl	8005f80 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, pba->RelativeDistanceScopeInclusion);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	7b1b      	ldrb	r3, [r3, #12]
 8001f26:	4619      	mov	r1, r3
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f004 f829 	bl	8005f80 <SCI_Frame_Queue08u>
    SCI_Frame_Queue16u(frame, pba->GoldenPixelPriorityAmplitudeExclusion);
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	895b      	ldrh	r3, [r3, #10]
 8001f32:	4619      	mov	r1, r3
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f004 f848 	bl	8005fca <SCI_Frame_Queue16u>
    SCI_Frame_Queue16u(frame, pba->GoldenPixelPriorityAmplitudeInclusion);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	891b      	ldrh	r3, [r3, #8]
 8001f3e:	4619      	mov	r1, r3
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f004 f842 	bl	8005fca <SCI_Frame_Queue16u>
    SCI_Frame_Queue08u(frame, pba->GoldenPixelSaturationFilterPixelThreshold);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	7c9b      	ldrb	r3, [r3, #18]
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f004 f817 	bl	8005f80 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, pba->GoldenPixelOutOfSyncAgeThreshold);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	7cdb      	ldrb	r3, [r3, #19]
 8001f56:	4619      	mov	r1, r3
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f004 f811 	bl	8005f80 <SCI_Frame_Queue08u>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	0802caf4 	.word	0x0802caf4
 8001f6c:	0802db88 	.word	0x0802db88
 8001f70:	0802cb00 	.word	0x0802cb00
 8001f74:	0802cb30 	.word	0x0802cb30

08001f78 <Deserialize_Cfg_PBA>:
static void Deserialize_Cfg_PBA(sci_frame_t * frame, argus_cfg_pba_t * pba)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
    assert(frame != 0);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d105      	bne.n	8001f94 <Deserialize_Cfg_PBA+0x1c>
 8001f88:	4b62      	ldr	r3, [pc, #392]	@ (8002114 <Deserialize_Cfg_PBA+0x19c>)
 8001f8a:	4a63      	ldr	r2, [pc, #396]	@ (8002118 <Deserialize_Cfg_PBA+0x1a0>)
 8001f8c:	2187      	movs	r1, #135	@ 0x87
 8001f8e:	4863      	ldr	r0, [pc, #396]	@ (800211c <Deserialize_Cfg_PBA+0x1a4>)
 8001f90:	f005 fc8a 	bl	80078a8 <__assert_func>
    assert(pba != 0);
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d105      	bne.n	8001fa6 <Deserialize_Cfg_PBA+0x2e>
 8001f9a:	4b61      	ldr	r3, [pc, #388]	@ (8002120 <Deserialize_Cfg_PBA+0x1a8>)
 8001f9c:	4a5e      	ldr	r2, [pc, #376]	@ (8002118 <Deserialize_Cfg_PBA+0x1a0>)
 8001f9e:	2188      	movs	r1, #136	@ 0x88
 8001fa0:	485e      	ldr	r0, [pc, #376]	@ (800211c <Deserialize_Cfg_PBA+0x1a4>)
 8001fa2:	f005 fc81 	bl	80078a8 <__assert_func>

    pba->Enabled = 0;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
    pba->Enabled |= SCI_Frame_Dequeue08u(frame) ? PBA_ENABLE : 0;
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f004 f9d5 	bl	800635c <SCI_Frame_Dequeue08u>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	bf14      	ite	ne
 8001fb8:	2301      	movne	r3, #1
 8001fba:	2300      	moveq	r3, #0
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	b25a      	sxtb	r2, r3
 8001fc6:	b24b      	sxtb	r3, r1
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	b25b      	sxtb	r3, r3
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	701a      	strb	r2, [r3, #0]
    pba->Enabled |= SCI_Frame_Dequeue08u(frame) ? PBA_ENABLE_GOLDPX_FALLBACK_MODE : 0;
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f004 f9c2 	bl	800635c <SCI_Frame_Dequeue08u>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <Deserialize_Cfg_PBA+0x6a>
 8001fde:	2120      	movs	r1, #32
 8001fe0:	e000      	b.n	8001fe4 <Deserialize_Cfg_PBA+0x6c>
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	b25a      	sxtb	r2, r3
 8001fea:	b24b      	sxtb	r3, r1
 8001fec:	4313      	orrs	r3, r2
 8001fee:	b25b      	sxtb	r3, r3
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	701a      	strb	r2, [r3, #0]
    pba->Enabled |= SCI_Frame_Dequeue08u(frame) ? PBA_ENABLE_GOLDPX_PRIORITY_MODE : 0;
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f004 f9b0 	bl	800635c <SCI_Frame_Dequeue08u>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <Deserialize_Cfg_PBA+0x8e>
 8002002:	2110      	movs	r1, #16
 8002004:	e000      	b.n	8002008 <Deserialize_Cfg_PBA+0x90>
 8002006:	2100      	movs	r1, #0
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	b25a      	sxtb	r2, r3
 800200e:	b24b      	sxtb	r3, r1
 8002010:	4313      	orrs	r3, r2
 8002012:	b25b      	sxtb	r3, r3
 8002014:	b2da      	uxtb	r2, r3
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	701a      	strb	r2, [r3, #0]
    pba->Enabled |= SCI_Frame_Dequeue08u(frame) ? PBA_ENABLE_MIN_DIST_SCOPE : 0;
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f004 f99e 	bl	800635c <SCI_Frame_Dequeue08u>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <Deserialize_Cfg_PBA+0xb2>
 8002026:	2140      	movs	r1, #64	@ 0x40
 8002028:	e000      	b.n	800202c <Deserialize_Cfg_PBA+0xb4>
 800202a:	2100      	movs	r1, #0
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	b25a      	sxtb	r2, r3
 8002032:	b24b      	sxtb	r3, r1
 8002034:	4313      	orrs	r3, r2
 8002036:	b25b      	sxtb	r3, r3
 8002038:	b2da      	uxtb	r2, r3
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	701a      	strb	r2, [r3, #0]
    pba->AveragingMode = SCI_Frame_Dequeue08u(frame);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f004 f98c 	bl	800635c <SCI_Frame_Dequeue08u>
 8002044:	4603      	mov	r3, r0
 8002046:	461a      	mov	r2, r3
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	705a      	strb	r2, [r3, #1]
    pba->PrefilterMask = SCI_Frame_Dequeue32u(frame);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f004 f9a9 	bl	80063a4 <SCI_Frame_Dequeue32u>
 8002052:	4602      	mov	r2, r0
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	619a      	str	r2, [r3, #24]
    pba->AbsoluteAmplitudeExclusion = SCI_Frame_Dequeue16u(frame);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f004 f98b 	bl	8006374 <SCI_Frame_Dequeue16u>
 800205e:	4603      	mov	r3, r0
 8002060:	461a      	mov	r2, r3
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	80da      	strh	r2, [r3, #6]
    pba->AbsoluteAmplitudeInclusion = SCI_Frame_Dequeue16u(frame);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f004 f984 	bl	8006374 <SCI_Frame_Dequeue16u>
 800206c:	4603      	mov	r3, r0
 800206e:	461a      	mov	r2, r3
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	809a      	strh	r2, [r3, #4]
    pba->RelativeAmplitudeExclusion = SCI_Frame_Dequeue08u(frame);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f004 f971 	bl	800635c <SCI_Frame_Dequeue08u>
 800207a:	4603      	mov	r3, r0
 800207c:	461a      	mov	r2, r3
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	70da      	strb	r2, [r3, #3]
    pba->RelativeAmplitudeInclusion = SCI_Frame_Dequeue08u(frame);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f004 f96a 	bl	800635c <SCI_Frame_Dequeue08u>
 8002088:	4603      	mov	r3, r0
 800208a:	461a      	mov	r2, r3
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	709a      	strb	r2, [r3, #2]
    pba->AbsoluteMinimumDistanceThreshold = SCI_Frame_Dequeue32s(frame);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f004 f93c 	bl	800630e <SCI_Frame_Dequeue32s>
 8002096:	4602      	mov	r2, r0
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	615a      	str	r2, [r3, #20]
    pba->AbsoluteDistanceScopeExclusion = SCI_Frame_Dequeue16u(frame);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f004 f969 	bl	8006374 <SCI_Frame_Dequeue16u>
 80020a2:	4603      	mov	r3, r0
 80020a4:	461a      	mov	r2, r3
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	821a      	strh	r2, [r3, #16]
    pba->AbsoluteDistanceScopeInclusion = SCI_Frame_Dequeue16u(frame);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f004 f962 	bl	8006374 <SCI_Frame_Dequeue16u>
 80020b0:	4603      	mov	r3, r0
 80020b2:	461a      	mov	r2, r3
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	81da      	strh	r2, [r3, #14]
    pba->RelativeDistanceScopeExclusion = SCI_Frame_Dequeue08u(frame);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f004 f94f 	bl	800635c <SCI_Frame_Dequeue08u>
 80020be:	4603      	mov	r3, r0
 80020c0:	461a      	mov	r2, r3
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	735a      	strb	r2, [r3, #13]
    pba->RelativeDistanceScopeInclusion = SCI_Frame_Dequeue08u(frame);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f004 f948 	bl	800635c <SCI_Frame_Dequeue08u>
 80020cc:	4603      	mov	r3, r0
 80020ce:	461a      	mov	r2, r3
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	731a      	strb	r2, [r3, #12]
    pba->GoldenPixelPriorityAmplitudeExclusion = SCI_Frame_Dequeue16u(frame);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f004 f94d 	bl	8006374 <SCI_Frame_Dequeue16u>
 80020da:	4603      	mov	r3, r0
 80020dc:	461a      	mov	r2, r3
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	815a      	strh	r2, [r3, #10]
    pba->GoldenPixelPriorityAmplitudeInclusion = SCI_Frame_Dequeue16u(frame);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f004 f946 	bl	8006374 <SCI_Frame_Dequeue16u>
 80020e8:	4603      	mov	r3, r0
 80020ea:	461a      	mov	r2, r3
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	811a      	strh	r2, [r3, #8]
    pba->GoldenPixelSaturationFilterPixelThreshold = SCI_Frame_Dequeue08u(frame);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f004 f933 	bl	800635c <SCI_Frame_Dequeue08u>
 80020f6:	4603      	mov	r3, r0
 80020f8:	461a      	mov	r2, r3
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	749a      	strb	r2, [r3, #18]
    pba->GoldenPixelOutOfSyncAgeThreshold = SCI_Frame_Dequeue08u(frame);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f004 f92c 	bl	800635c <SCI_Frame_Dequeue08u>
 8002104:	4603      	mov	r3, r0
 8002106:	461a      	mov	r2, r3
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	74da      	strb	r2, [r3, #19]
}
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	0802caf4 	.word	0x0802caf4
 8002118:	0802db9c 	.word	0x0802db9c
 800211c:	0802cb00 	.word	0x0802cb00
 8002120:	0802cb30 	.word	0x0802cb30

08002124 <RxCmd_CfgMeasurementMode>:
/*******************************************************************************
 * Command Functions
 ******************************************************************************/

static status_t RxCmd_CfgMeasurementMode(sci_device_t deviceID, sci_frame_t * frame)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	6039      	str	r1, [r7, #0]
 800212e:	71fb      	strb	r3, [r7, #7]
    if (SCI_Frame_BytesToRead(frame) > 1)
 8002130:	6838      	ldr	r0, [r7, #0]
 8002132:	f003 fe63 	bl	8005dfc <SCI_Frame_BytesToRead>
 8002136:	4603      	mov	r3, r0
 8002138:	2b01      	cmp	r3, #1
 800213a:	d916      	bls.n	800216a <RxCmd_CfgMeasurementMode+0x46>
    {
        /* Master sending data... */
        explorer_t * explorer = ExplorerApp_GetExplorerPtr(deviceID);
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	4618      	mov	r0, r3
 8002140:	f002 f930 	bl	80043a4 <ExplorerApp_GetExplorerPtr>
 8002144:	60f8      	str	r0, [r7, #12]
        if (explorer == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d102      	bne.n	8002152 <RxCmd_CfgMeasurementMode+0x2e>
 800214c:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8002150:	e012      	b.n	8002178 <RxCmd_CfgMeasurementMode+0x54>

        argus_mode_t mode = SCI_Frame_Dequeue08s(frame);
 8002152:	6838      	ldr	r0, [r7, #0]
 8002154:	f004 f8b6 	bl	80062c4 <SCI_Frame_Dequeue08s>
 8002158:	4603      	mov	r3, r0
 800215a:	72fb      	strb	r3, [r7, #11]
        return ExplorerApp_SetDeviceMeasurementMode(explorer, mode);
 800215c:	7afb      	ldrb	r3, [r7, #11]
 800215e:	4619      	mov	r1, r3
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f001 ffbb 	bl	80040dc <ExplorerApp_SetDeviceMeasurementMode>
 8002166:	4603      	mov	r3, r0
 8002168:	e006      	b.n	8002178 <RxCmd_CfgMeasurementMode+0x54>
    }
    else
    {
        /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CONFIGURATION_MEASUREMENT_MODE, 0, 0);
 800216a:	79f8      	ldrb	r0, [r7, #7]
 800216c:	2300      	movs	r3, #0
 800216e:	2200      	movs	r2, #0
 8002170:	2142      	movs	r1, #66	@ 0x42
 8002172:	f002 fe19 	bl	8004da8 <SCI_SendCommand>
 8002176:	4603      	mov	r3, r0
    }
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <TxCmd_CfgMeasurementMode>:
static status_t TxCmd_CfgMeasurementMode(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af00      	add	r7, sp, #0
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607a      	str	r2, [r7, #4]
 800218a:	603b      	str	r3, [r7, #0]
 800218c:	4603      	mov	r3, r0
 800218e:	73fb      	strb	r3, [r7, #15]
    (void)param;
    (void)data;

    argus_mode_t mode;
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8002190:	7bfb      	ldrb	r3, [r7, #15]
 8002192:	4618      	mov	r0, r3
 8002194:	f002 f8e2 	bl	800435c <ExplorerApp_GetArgusPtr>
 8002198:	61f8      	str	r0, [r7, #28]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d102      	bne.n	80021a6 <TxCmd_CfgMeasurementMode+0x26>
 80021a0:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 80021a4:	e00c      	b.n	80021c0 <TxCmd_CfgMeasurementMode+0x40>
    status_t status = Argus_GetMeasurementMode(argus, &mode);
 80021a6:	f107 0317 	add.w	r3, r7, #23
 80021aa:	4619      	mov	r1, r3
 80021ac:	69f8      	ldr	r0, [r7, #28]
 80021ae:	f013 fb93 	bl	80158d8 <Argus_GetMeasurementMode>
 80021b2:	61b8      	str	r0, [r7, #24]
    SCI_Frame_Queue08u(frame, mode);
 80021b4:	7dfb      	ldrb	r3, [r7, #23]
 80021b6:	4619      	mov	r1, r3
 80021b8:	68b8      	ldr	r0, [r7, #8]
 80021ba:	f003 fee1 	bl	8005f80 <SCI_Frame_Queue08u>

    return status;
 80021be:	69bb      	ldr	r3, [r7, #24]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3720      	adds	r7, #32
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <RxCmd_CfgDataOutputMode>:

static status_t RxCmd_CfgDataOutputMode(sci_device_t deviceID, sci_frame_t * frame)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	6039      	str	r1, [r7, #0]
 80021d2:	71fb      	strb	r3, [r7, #7]
    if (SCI_Frame_BytesToRead(frame) > 1)
 80021d4:	6838      	ldr	r0, [r7, #0]
 80021d6:	f003 fe11 	bl	8005dfc <SCI_Frame_BytesToRead>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d91d      	bls.n	800221c <RxCmd_CfgDataOutputMode+0x54>
    {
        /* Master sending data... */
        explorer_t * explorer = ExplorerApp_GetExplorerPtr(deviceID);
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f002 f8de 	bl	80043a4 <ExplorerApp_GetExplorerPtr>
 80021e8:	6178      	str	r0, [r7, #20]
        if (explorer == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d102      	bne.n	80021f6 <RxCmd_CfgDataOutputMode+0x2e>
 80021f0:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 80021f4:	e019      	b.n	800222a <RxCmd_CfgDataOutputMode+0x62>

        explorer_cfg_t cfg;
        ExplorerApp_GetConfiguration(explorer, &cfg);
 80021f6:	f107 030c 	add.w	r3, r7, #12
 80021fa:	4619      	mov	r1, r3
 80021fc:	6978      	ldr	r0, [r7, #20]
 80021fe:	f001 fe7f 	bl	8003f00 <ExplorerApp_GetConfiguration>
        cfg.DataOutputMode = SCI_Frame_Dequeue08u(frame);
 8002202:	6838      	ldr	r0, [r7, #0]
 8002204:	f004 f8aa 	bl	800635c <SCI_Frame_Dequeue08u>
 8002208:	4603      	mov	r3, r0
 800220a:	747b      	strb	r3, [r7, #17]
        return ExplorerApp_SetConfiguration(explorer, &cfg);
 800220c:	f107 030c 	add.w	r3, r7, #12
 8002210:	4619      	mov	r1, r3
 8002212:	6978      	ldr	r0, [r7, #20]
 8002214:	f001 feaa 	bl	8003f6c <ExplorerApp_SetConfiguration>
 8002218:	4603      	mov	r3, r0
 800221a:	e006      	b.n	800222a <RxCmd_CfgDataOutputMode+0x62>
    }
    else
    {
        /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CONFIGURATION_DATA_OUTPUT_MODE, 0, 0);
 800221c:	79f8      	ldrb	r0, [r7, #7]
 800221e:	2300      	movs	r3, #0
 8002220:	2200      	movs	r2, #0
 8002222:	2141      	movs	r1, #65	@ 0x41
 8002224:	f002 fdc0 	bl	8004da8 <SCI_SendCommand>
 8002228:	4603      	mov	r3, r0
    }
}
 800222a:	4618      	mov	r0, r3
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <TxCmd_CfgDataOutputMode>:
static status_t TxCmd_CfgDataOutputMode(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b088      	sub	sp, #32
 8002236:	af00      	add	r7, sp, #0
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
 800223c:	603b      	str	r3, [r7, #0]
 800223e:	4603      	mov	r3, r0
 8002240:	73fb      	strb	r3, [r7, #15]
    (void)param;
    (void)data;

    explorer_t * explorer = ExplorerApp_GetExplorerPtr(deviceID);
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	4618      	mov	r0, r3
 8002246:	f002 f8ad 	bl	80043a4 <ExplorerApp_GetExplorerPtr>
 800224a:	61f8      	str	r0, [r7, #28]
    if (explorer == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d102      	bne.n	8002258 <TxCmd_CfgDataOutputMode+0x26>
 8002252:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8002256:	e00c      	b.n	8002272 <TxCmd_CfgDataOutputMode+0x40>

    explorer_cfg_t cfg;
    ExplorerApp_GetConfiguration(explorer, &cfg);
 8002258:	f107 0314 	add.w	r3, r7, #20
 800225c:	4619      	mov	r1, r3
 800225e:	69f8      	ldr	r0, [r7, #28]
 8002260:	f001 fe4e 	bl	8003f00 <ExplorerApp_GetConfiguration>
    SCI_Frame_Queue08u(frame, cfg.DataOutputMode);
 8002264:	7e7b      	ldrb	r3, [r7, #25]
 8002266:	b2db      	uxtb	r3, r3
 8002268:	4619      	mov	r1, r3
 800226a:	68b8      	ldr	r0, [r7, #8]
 800226c:	f003 fe88 	bl	8005f80 <SCI_Frame_Queue08u>
    return STATUS_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3720      	adds	r7, #32
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <RxCmd_CfgFrameTime>:

static status_t RxCmd_CfgFrameTime(sci_device_t deviceID, sci_frame_t * frame)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b086      	sub	sp, #24
 800227e:	af00      	add	r7, sp, #0
 8002280:	4603      	mov	r3, r0
 8002282:	6039      	str	r1, [r7, #0]
 8002284:	71fb      	strb	r3, [r7, #7]
    if (SCI_Frame_BytesToRead(frame) > 1)
 8002286:	6838      	ldr	r0, [r7, #0]
 8002288:	f003 fdb8 	bl	8005dfc <SCI_Frame_BytesToRead>
 800228c:	4603      	mov	r3, r0
 800228e:	2b01      	cmp	r3, #1
 8002290:	d920      	bls.n	80022d4 <RxCmd_CfgFrameTime+0x5a>
    {
        /* Master sending data... */
        uint32_t frameTime = SCI_Frame_Dequeue32u(frame);
 8002292:	6838      	ldr	r0, [r7, #0]
 8002294:	f004 f886 	bl	80063a4 <SCI_Frame_Dequeue32u>
 8002298:	6178      	str	r0, [r7, #20]
        argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	4618      	mov	r0, r3
 800229e:	f002 f85d 	bl	800435c <ExplorerApp_GetArgusPtr>
 80022a2:	6138      	str	r0, [r7, #16]
        if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d102      	bne.n	80022b0 <RxCmd_CfgFrameTime+0x36>
 80022aa:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 80022ae:	e018      	b.n	80022e2 <RxCmd_CfgFrameTime+0x68>
        bool resume = ExplorerApp_SuspendTimerMeasurement(argus);
 80022b0:	6938      	ldr	r0, [r7, #16]
 80022b2:	f002 faab 	bl	800480c <ExplorerApp_SuspendTimerMeasurement>
 80022b6:	4603      	mov	r3, r0
 80022b8:	73fb      	strb	r3, [r7, #15]
        status_t status = Argus_SetConfigurationFrameTime(argus, frameTime);
 80022ba:	6979      	ldr	r1, [r7, #20]
 80022bc:	6938      	ldr	r0, [r7, #16]
 80022be:	f013 fb2f 	bl	8015920 <Argus_SetConfigurationFrameTime>
 80022c2:	60b8      	str	r0, [r7, #8]
        if (resume) ExplorerApp_StartTimerMeasurement(argus);
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d002      	beq.n	80022d0 <RxCmd_CfgFrameTime+0x56>
 80022ca:	6938      	ldr	r0, [r7, #16]
 80022cc:	f002 faca 	bl	8004864 <ExplorerApp_StartTimerMeasurement>
        return status;
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	e006      	b.n	80022e2 <RxCmd_CfgFrameTime+0x68>
    }
    else
    {
        /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CONFIGURATION_FRAME_TIME, 0, 0);
 80022d4:	79f8      	ldrb	r0, [r7, #7]
 80022d6:	2300      	movs	r3, #0
 80022d8:	2200      	movs	r2, #0
 80022da:	2143      	movs	r1, #67	@ 0x43
 80022dc:	f002 fd64 	bl	8004da8 <SCI_SendCommand>
 80022e0:	4603      	mov	r3, r0
    }
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <TxCmd_CfgFrameTime>:
static status_t TxCmd_CfgFrameTime(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b088      	sub	sp, #32
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
 80022f4:	603b      	str	r3, [r7, #0]
 80022f6:	4603      	mov	r3, r0
 80022f8:	73fb      	strb	r3, [r7, #15]
    (void) param;
    (void) data;

    uint32_t frameTime = 0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
 8002300:	4618      	mov	r0, r3
 8002302:	f002 f82b 	bl	800435c <ExplorerApp_GetArgusPtr>
 8002306:	61f8      	str	r0, [r7, #28]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d102      	bne.n	8002314 <TxCmd_CfgFrameTime+0x2a>
 800230e:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8002312:	e00c      	b.n	800232e <TxCmd_CfgFrameTime+0x44>
    status_t status = Argus_GetConfigurationFrameTime(argus, &frameTime);
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	4619      	mov	r1, r3
 800231a:	69f8      	ldr	r0, [r7, #28]
 800231c:	f013 fb48 	bl	80159b0 <Argus_GetConfigurationFrameTime>
 8002320:	61b8      	str	r0, [r7, #24]
    SCI_Frame_Queue32u(frame, frameTime);
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	4619      	mov	r1, r3
 8002326:	68b8      	ldr	r0, [r7, #8]
 8002328:	f003 fe96 	bl	8006058 <SCI_Frame_Queue32u>
    return status;
 800232c:	69bb      	ldr	r3, [r7, #24]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3720      	adds	r7, #32
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <RxCmd_CfgSmartPowerSaveEnabled>:

static status_t RxCmd_CfgSmartPowerSaveEnabled(sci_device_t deviceID, sci_frame_t * frame)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b086      	sub	sp, #24
 800233a:	af00      	add	r7, sp, #0
 800233c:	4603      	mov	r3, r0
 800233e:	6039      	str	r1, [r7, #0]
 8002340:	71fb      	strb	r3, [r7, #7]
    if (SCI_Frame_BytesToRead(frame) > 1)
 8002342:	6838      	ldr	r0, [r7, #0]
 8002344:	f003 fd5a 	bl	8005dfc <SCI_Frame_BytesToRead>
 8002348:	4603      	mov	r3, r0
 800234a:	2b01      	cmp	r3, #1
 800234c:	d926      	bls.n	800239c <RxCmd_CfgSmartPowerSaveEnabled+0x66>
    {
        /* Master sending data... */
        bool enabled = SCI_Frame_Dequeue08u(frame) != 0;
 800234e:	6838      	ldr	r0, [r7, #0]
 8002350:	f004 f804 	bl	800635c <SCI_Frame_Dequeue08u>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	bf14      	ite	ne
 800235a:	2301      	movne	r3, #1
 800235c:	2300      	moveq	r3, #0
 800235e:	75fb      	strb	r3, [r7, #23]
        argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	4618      	mov	r0, r3
 8002364:	f001 fffa 	bl	800435c <ExplorerApp_GetArgusPtr>
 8002368:	6138      	str	r0, [r7, #16]
        if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d102      	bne.n	8002376 <RxCmd_CfgSmartPowerSaveEnabled+0x40>
 8002370:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8002374:	e019      	b.n	80023aa <RxCmd_CfgSmartPowerSaveEnabled+0x74>
        bool resume = ExplorerApp_SuspendTimerMeasurement(argus);
 8002376:	6938      	ldr	r0, [r7, #16]
 8002378:	f002 fa48 	bl	800480c <ExplorerApp_SuspendTimerMeasurement>
 800237c:	4603      	mov	r3, r0
 800237e:	73fb      	strb	r3, [r7, #15]
        status_t status = Argus_SetConfigurationSmartPowerSaveEnabled(argus, enabled);
 8002380:	7dfb      	ldrb	r3, [r7, #23]
 8002382:	4619      	mov	r1, r3
 8002384:	6938      	ldr	r0, [r7, #16]
 8002386:	f013 fc8f 	bl	8015ca8 <Argus_SetConfigurationSmartPowerSaveEnabled>
 800238a:	60b8      	str	r0, [r7, #8]
        if (resume) ExplorerApp_StartTimerMeasurement(argus);
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d002      	beq.n	8002398 <RxCmd_CfgSmartPowerSaveEnabled+0x62>
 8002392:	6938      	ldr	r0, [r7, #16]
 8002394:	f002 fa66 	bl	8004864 <ExplorerApp_StartTimerMeasurement>
        return status;
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	e006      	b.n	80023aa <RxCmd_CfgSmartPowerSaveEnabled+0x74>
    }
    else
    {
        /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CONFIGURATION_SMART_POWER_SAVE, 0, 0);
 800239c:	79f8      	ldrb	r0, [r7, #7]
 800239e:	2300      	movs	r3, #0
 80023a0:	2200      	movs	r2, #0
 80023a2:	2145      	movs	r1, #69	@ 0x45
 80023a4:	f002 fd00 	bl	8004da8 <SCI_SendCommand>
 80023a8:	4603      	mov	r3, r0
    }
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <TxCmd_CfgSmartPowerSaveEnabled>:
static status_t TxCmd_CfgSmartPowerSaveEnabled(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b088      	sub	sp, #32
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	603b      	str	r3, [r7, #0]
 80023be:	4603      	mov	r3, r0
 80023c0:	73fb      	strb	r3, [r7, #15]
    (void) data;
    (void) param;

    bool enabled = 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	75fb      	strb	r3, [r7, #23]
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f001 ffc7 	bl	800435c <ExplorerApp_GetArgusPtr>
 80023ce:	61f8      	str	r0, [r7, #28]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d102      	bne.n	80023dc <TxCmd_CfgSmartPowerSaveEnabled+0x2a>
 80023d6:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 80023da:	e00c      	b.n	80023f6 <TxCmd_CfgSmartPowerSaveEnabled+0x44>
    status_t status = Argus_GetConfigurationSmartPowerSaveEnabled(argus, &enabled);
 80023dc:	f107 0317 	add.w	r3, r7, #23
 80023e0:	4619      	mov	r1, r3
 80023e2:	69f8      	ldr	r0, [r7, #28]
 80023e4:	f013 fcaa 	bl	8015d3c <Argus_GetConfigurationSmartPowerSaveEnabled>
 80023e8:	61b8      	str	r0, [r7, #24]
    SCI_Frame_Queue08u(frame, enabled);
 80023ea:	7dfb      	ldrb	r3, [r7, #23]
 80023ec:	4619      	mov	r1, r3
 80023ee:	68b8      	ldr	r0, [r7, #8]
 80023f0:	f003 fdc6 	bl	8005f80 <SCI_Frame_Queue08u>

    return status;
 80023f4:	69bb      	ldr	r3, [r7, #24]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3720      	adds	r7, #32
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <RxCmd_CfgDualFrequencyMode>:

static status_t RxCmd_CfgDualFrequencyMode(sci_device_t deviceID, sci_frame_t * frame)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b086      	sub	sp, #24
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	6039      	str	r1, [r7, #0]
 8002408:	71fb      	strb	r3, [r7, #7]
    if (SCI_Frame_BytesToRead(frame) > 1)
 800240a:	6838      	ldr	r0, [r7, #0]
 800240c:	f003 fcf6 	bl	8005dfc <SCI_Frame_BytesToRead>
 8002410:	4603      	mov	r3, r0
 8002412:	2b01      	cmp	r3, #1
 8002414:	d925      	bls.n	8002462 <RxCmd_CfgDualFrequencyMode+0x64>
    {
        /* Master sending data... */
        argus_dfm_mode_t dfm = SCI_Frame_Dequeue08u(frame);
 8002416:	6838      	ldr	r0, [r7, #0]
 8002418:	f003 ffa0 	bl	800635c <SCI_Frame_Dequeue08u>
 800241c:	4603      	mov	r3, r0
 800241e:	75fb      	strb	r3, [r7, #23]
        argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	4618      	mov	r0, r3
 8002424:	f001 ff9a 	bl	800435c <ExplorerApp_GetArgusPtr>
 8002428:	6138      	str	r0, [r7, #16]
        if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d102      	bne.n	8002436 <RxCmd_CfgDualFrequencyMode+0x38>
 8002430:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8002434:	e01c      	b.n	8002470 <RxCmd_CfgDualFrequencyMode+0x72>
        bool resume = ExplorerApp_SuspendTimerMeasurement(argus);
 8002436:	6938      	ldr	r0, [r7, #16]
 8002438:	f002 f9e8 	bl	800480c <ExplorerApp_SuspendTimerMeasurement>
 800243c:	4603      	mov	r3, r0
 800243e:	73fb      	strb	r3, [r7, #15]
        status_t status = Argus_SetConfigurationDFMMode(argus, dfm);
 8002440:	7dfb      	ldrb	r3, [r7, #23]
 8002442:	4619      	mov	r1, r3
 8002444:	6938      	ldr	r0, [r7, #16]
 8002446:	f013 fad9 	bl	80159fc <Argus_SetConfigurationDFMMode>
 800244a:	60b8      	str	r0, [r7, #8]
        ExplorerApp_DisplayUnambiguousRange(argus);
 800244c:	6938      	ldr	r0, [r7, #16]
 800244e:	f002 fa87 	bl	8004960 <ExplorerApp_DisplayUnambiguousRange>
        if (resume) ExplorerApp_StartTimerMeasurement(argus);
 8002452:	7bfb      	ldrb	r3, [r7, #15]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <RxCmd_CfgDualFrequencyMode+0x60>
 8002458:	6938      	ldr	r0, [r7, #16]
 800245a:	f002 fa03 	bl	8004864 <ExplorerApp_StartTimerMeasurement>
        return status;
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	e006      	b.n	8002470 <RxCmd_CfgDualFrequencyMode+0x72>
    }
    else
    {
        /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CONFIGURATION_DUAL_FREQUENCY_MODE, 0, 0);
 8002462:	79f8      	ldrb	r0, [r7, #7]
 8002464:	2300      	movs	r3, #0
 8002466:	2200      	movs	r2, #0
 8002468:	2144      	movs	r1, #68	@ 0x44
 800246a:	f002 fc9d 	bl	8004da8 <SCI_SendCommand>
 800246e:	4603      	mov	r3, r0
    }
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <TxCmd_CfgDualFrequencyMode>:
static status_t TxCmd_CfgDualFrequencyMode(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af00      	add	r7, sp, #0
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
 8002482:	603b      	str	r3, [r7, #0]
 8002484:	4603      	mov	r3, r0
 8002486:	73fb      	strb	r3, [r7, #15]
    (void) data;
    (void) param;

    argus_dfm_mode_t dfm;
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	4618      	mov	r0, r3
 800248c:	f001 ff66 	bl	800435c <ExplorerApp_GetArgusPtr>
 8002490:	61f8      	str	r0, [r7, #28]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d102      	bne.n	800249e <TxCmd_CfgDualFrequencyMode+0x26>
 8002498:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 800249c:	e00c      	b.n	80024b8 <TxCmd_CfgDualFrequencyMode+0x40>
    status_t status = Argus_GetConfigurationDFMMode(argus, &dfm);
 800249e:	f107 0317 	add.w	r3, r7, #23
 80024a2:	4619      	mov	r1, r3
 80024a4:	69f8      	ldr	r0, [r7, #28]
 80024a6:	f013 faf3 	bl	8015a90 <Argus_GetConfigurationDFMMode>
 80024aa:	61b8      	str	r0, [r7, #24]
    SCI_Frame_Queue08u(frame, dfm);
 80024ac:	7dfb      	ldrb	r3, [r7, #23]
 80024ae:	4619      	mov	r1, r3
 80024b0:	68b8      	ldr	r0, [r7, #8]
 80024b2:	f003 fd65 	bl	8005f80 <SCI_Frame_Queue08u>

    return status;
 80024b6:	69bb      	ldr	r3, [r7, #24]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3720      	adds	r7, #32
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <RxCmd_CfgShotNoiseMonitor>:

static status_t RxCmd_CfgShotNoiseMonitor(sci_device_t deviceID, sci_frame_t * frame)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	6039      	str	r1, [r7, #0]
 80024ca:	71fb      	strb	r3, [r7, #7]
    if (SCI_Frame_BytesToRead(frame) > 1)
 80024cc:	6838      	ldr	r0, [r7, #0]
 80024ce:	f003 fc95 	bl	8005dfc <SCI_Frame_BytesToRead>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d922      	bls.n	800251e <RxCmd_CfgShotNoiseMonitor+0x5e>
    {
        /* Master sending data... */
        argus_snm_mode_t snm = SCI_Frame_Dequeue08u(frame);
 80024d8:	6838      	ldr	r0, [r7, #0]
 80024da:	f003 ff3f 	bl	800635c <SCI_Frame_Dequeue08u>
 80024de:	4603      	mov	r3, r0
 80024e0:	75fb      	strb	r3, [r7, #23]
        argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f001 ff39 	bl	800435c <ExplorerApp_GetArgusPtr>
 80024ea:	6138      	str	r0, [r7, #16]
        if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d102      	bne.n	80024f8 <RxCmd_CfgShotNoiseMonitor+0x38>
 80024f2:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 80024f6:	e019      	b.n	800252c <RxCmd_CfgShotNoiseMonitor+0x6c>
        bool resume = ExplorerApp_SuspendTimerMeasurement(argus);
 80024f8:	6938      	ldr	r0, [r7, #16]
 80024fa:	f002 f987 	bl	800480c <ExplorerApp_SuspendTimerMeasurement>
 80024fe:	4603      	mov	r3, r0
 8002500:	73fb      	strb	r3, [r7, #15]
        status_t status = Argus_SetConfigurationShotNoiseMonitorMode(argus, snm);
 8002502:	7dfb      	ldrb	r3, [r7, #23]
 8002504:	4619      	mov	r1, r3
 8002506:	6938      	ldr	r0, [r7, #16]
 8002508:	f013 faea 	bl	8015ae0 <Argus_SetConfigurationShotNoiseMonitorMode>
 800250c:	60b8      	str	r0, [r7, #8]
        if (resume) ExplorerApp_StartTimerMeasurement(argus);
 800250e:	7bfb      	ldrb	r3, [r7, #15]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <RxCmd_CfgShotNoiseMonitor+0x5a>
 8002514:	6938      	ldr	r0, [r7, #16]
 8002516:	f002 f9a5 	bl	8004864 <ExplorerApp_StartTimerMeasurement>
        return status;
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	e006      	b.n	800252c <RxCmd_CfgShotNoiseMonitor+0x6c>
    }
    else
    {
        /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CONFIGURATION_SHOT_NOISE_MONITOR_MODE, 0, 0);
 800251e:	79f8      	ldrb	r0, [r7, #7]
 8002520:	2300      	movs	r3, #0
 8002522:	2200      	movs	r2, #0
 8002524:	2146      	movs	r1, #70	@ 0x46
 8002526:	f002 fc3f 	bl	8004da8 <SCI_SendCommand>
 800252a:	4603      	mov	r3, r0
    }
}
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <TxCmd_CfgShotNoiseMonitor>:
static status_t TxCmd_CfgShotNoiseMonitor(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b088      	sub	sp, #32
 8002538:	af00      	add	r7, sp, #0
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	607a      	str	r2, [r7, #4]
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	4603      	mov	r3, r0
 8002542:	73fb      	strb	r3, [r7, #15]
    (void) data;
    (void) param;

    argus_snm_mode_t snm;
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	4618      	mov	r0, r3
 8002548:	f001 ff08 	bl	800435c <ExplorerApp_GetArgusPtr>
 800254c:	61f8      	str	r0, [r7, #28]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d102      	bne.n	800255a <TxCmd_CfgShotNoiseMonitor+0x26>
 8002554:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8002558:	e00c      	b.n	8002574 <TxCmd_CfgShotNoiseMonitor+0x40>
    status_t status = Argus_GetConfigurationShotNoiseMonitorMode(argus, &snm);
 800255a:	f107 0317 	add.w	r3, r7, #23
 800255e:	4619      	mov	r1, r3
 8002560:	69f8      	ldr	r0, [r7, #28]
 8002562:	f013 fb07 	bl	8015b74 <Argus_GetConfigurationShotNoiseMonitorMode>
 8002566:	61b8      	str	r0, [r7, #24]
    SCI_Frame_Queue08u(frame, snm);
 8002568:	7dfb      	ldrb	r3, [r7, #23]
 800256a:	4619      	mov	r1, r3
 800256c:	68b8      	ldr	r0, [r7, #8]
 800256e:	f003 fd07 	bl	8005f80 <SCI_Frame_Queue08u>

    return status;
 8002572:	69bb      	ldr	r3, [r7, #24]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3720      	adds	r7, #32
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <RxCmd_CfgXtalkMonitor>:

static status_t RxCmd_CfgXtalkMonitor(sci_device_t deviceID, sci_frame_t * frame)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	6039      	str	r1, [r7, #0]
 8002586:	71fb      	strb	r3, [r7, #7]
    if (SCI_Frame_BytesToRead(frame) > 1)
 8002588:	6838      	ldr	r0, [r7, #0]
 800258a:	f003 fc37 	bl	8005dfc <SCI_Frame_BytesToRead>
 800258e:	4603      	mov	r3, r0
 8002590:	2b01      	cmp	r3, #1
 8002592:	d926      	bls.n	80025e2 <RxCmd_CfgXtalkMonitor+0x66>
    {
        /* Master sending data... */
        bool xtm = SCI_Frame_Dequeue08u(frame);
 8002594:	6838      	ldr	r0, [r7, #0]
 8002596:	f003 fee1 	bl	800635c <SCI_Frame_Dequeue08u>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	bf14      	ite	ne
 80025a0:	2301      	movne	r3, #1
 80025a2:	2300      	moveq	r3, #0
 80025a4:	75fb      	strb	r3, [r7, #23]
        argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f001 fed7 	bl	800435c <ExplorerApp_GetArgusPtr>
 80025ae:	6138      	str	r0, [r7, #16]
        if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d102      	bne.n	80025bc <RxCmd_CfgXtalkMonitor+0x40>
 80025b6:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 80025ba:	e019      	b.n	80025f0 <RxCmd_CfgXtalkMonitor+0x74>
        bool resume = ExplorerApp_SuspendTimerMeasurement(argus);
 80025bc:	6938      	ldr	r0, [r7, #16]
 80025be:	f002 f925 	bl	800480c <ExplorerApp_SuspendTimerMeasurement>
 80025c2:	4603      	mov	r3, r0
 80025c4:	73fb      	strb	r3, [r7, #15]
        status_t status = Argus_SetConfigurationCrosstalkMonitorMode(argus, xtm);
 80025c6:	7dfb      	ldrb	r3, [r7, #23]
 80025c8:	4619      	mov	r1, r3
 80025ca:	6938      	ldr	r0, [r7, #16]
 80025cc:	f013 fafa 	bl	8015bc4 <Argus_SetConfigurationCrosstalkMonitorMode>
 80025d0:	60b8      	str	r0, [r7, #8]
        if (resume) ExplorerApp_StartTimerMeasurement(argus);
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <RxCmd_CfgXtalkMonitor+0x62>
 80025d8:	6938      	ldr	r0, [r7, #16]
 80025da:	f002 f943 	bl	8004864 <ExplorerApp_StartTimerMeasurement>
        return status;
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	e006      	b.n	80025f0 <RxCmd_CfgXtalkMonitor+0x74>
    }
    else
    {
        /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CONFIGURATION_XTALK_MONITOR_MODE, 0, 0);
 80025e2:	79f8      	ldrb	r0, [r7, #7]
 80025e4:	2300      	movs	r3, #0
 80025e6:	2200      	movs	r2, #0
 80025e8:	2147      	movs	r1, #71	@ 0x47
 80025ea:	f002 fbdd 	bl	8004da8 <SCI_SendCommand>
 80025ee:	4603      	mov	r3, r0
    }
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <TxCmd_CfgXtalkMonitor>:
static status_t TxCmd_CfgXtalkMonitor(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b088      	sub	sp, #32
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	607a      	str	r2, [r7, #4]
 8002602:	603b      	str	r3, [r7, #0]
 8002604:	4603      	mov	r3, r0
 8002606:	73fb      	strb	r3, [r7, #15]
    (void) data;
    (void) param;

    bool xtm;
    argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	4618      	mov	r0, r3
 800260c:	f001 fea6 	bl	800435c <ExplorerApp_GetArgusPtr>
 8002610:	61f8      	str	r0, [r7, #28]
    if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d102      	bne.n	800261e <TxCmd_CfgXtalkMonitor+0x26>
 8002618:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 800261c:	e00c      	b.n	8002638 <TxCmd_CfgXtalkMonitor+0x40>
    status_t status = Argus_GetConfigurationCrosstalkMonitorMode(argus, &xtm);
 800261e:	f107 0317 	add.w	r3, r7, #23
 8002622:	4619      	mov	r1, r3
 8002624:	69f8      	ldr	r0, [r7, #28]
 8002626:	f013 fb17 	bl	8015c58 <Argus_GetConfigurationCrosstalkMonitorMode>
 800262a:	61b8      	str	r0, [r7, #24]
    SCI_Frame_Queue08u(frame, xtm);
 800262c:	7dfb      	ldrb	r3, [r7, #23]
 800262e:	4619      	mov	r1, r3
 8002630:	68b8      	ldr	r0, [r7, #8]
 8002632:	f003 fca5 	bl	8005f80 <SCI_Frame_Queue08u>

    return status;
 8002636:	69bb      	ldr	r3, [r7, #24]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3720      	adds	r7, #32
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <RxCmd_CfgDca>:
static status_t RxCmd_CfgDca(sci_device_t deviceID, sci_frame_t * frame)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08c      	sub	sp, #48	@ 0x30
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	6039      	str	r1, [r7, #0]
 800264a:	71fb      	strb	r3, [r7, #7]
    if (SCI_Frame_BytesToRead(frame) > 1)
 800264c:	6838      	ldr	r0, [r7, #0]
 800264e:	f003 fbd5 	bl	8005dfc <SCI_Frame_BytesToRead>
 8002652:	4603      	mov	r3, r0
 8002654:	2b01      	cmp	r3, #1
 8002656:	d92f      	bls.n	80026b8 <RxCmd_CfgDca+0x78>
    {
        /* Master sending data... */
        argus_cfg_dca_t dca = { 0 };
 8002658:	f107 030c 	add.w	r3, r7, #12
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	60da      	str	r2, [r3, #12]
 8002666:	611a      	str	r2, [r3, #16]
 8002668:	829a      	strh	r2, [r3, #20]
        Deserialize_Cfg_DCA(frame, &dca);
 800266a:	f107 030c 	add.w	r3, r7, #12
 800266e:	4619      	mov	r1, r3
 8002670:	6838      	ldr	r0, [r7, #0]
 8002672:	f7ff fb45 	bl	8001d00 <Deserialize_Cfg_DCA>
        argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	4618      	mov	r0, r3
 800267a:	f001 fe6f 	bl	800435c <ExplorerApp_GetArgusPtr>
 800267e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8002680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002682:	2b00      	cmp	r3, #0
 8002684:	d102      	bne.n	800268c <RxCmd_CfgDca+0x4c>
 8002686:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 800268a:	e01c      	b.n	80026c6 <RxCmd_CfgDca+0x86>
        bool resume = ExplorerApp_SuspendTimerMeasurement(argus);
 800268c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800268e:	f002 f8bd 	bl	800480c <ExplorerApp_SuspendTimerMeasurement>
 8002692:	4603      	mov	r3, r0
 8002694:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        status_t status = Argus_SetConfigurationDynamicAdaption(argus, &dca);
 8002698:	f107 030c 	add.w	r3, r7, #12
 800269c:	4619      	mov	r1, r3
 800269e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80026a0:	f013 fb76 	bl	8015d90 <Argus_SetConfigurationDynamicAdaption>
 80026a4:	6278      	str	r0, [r7, #36]	@ 0x24
        if (resume) ExplorerApp_StartTimerMeasurement(argus);
 80026a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d002      	beq.n	80026b4 <RxCmd_CfgDca+0x74>
 80026ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80026b0:	f002 f8d8 	bl	8004864 <ExplorerApp_StartTimerMeasurement>
        return status;
 80026b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b6:	e006      	b.n	80026c6 <RxCmd_CfgDca+0x86>
    }
    else
    {
        /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CONFIGURATION_DCA, 0, 0);
 80026b8:	79f8      	ldrb	r0, [r7, #7]
 80026ba:	2300      	movs	r3, #0
 80026bc:	2200      	movs	r2, #0
 80026be:	2152      	movs	r1, #82	@ 0x52
 80026c0:	f002 fb72 	bl	8004da8 <SCI_SendCommand>
 80026c4:	4603      	mov	r3, r0
    }
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3730      	adds	r7, #48	@ 0x30
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <TxCmd_CfgDca>:
static status_t TxCmd_CfgDca(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b08c      	sub	sp, #48	@ 0x30
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
 80026d8:	603b      	str	r3, [r7, #0]
 80026da:	4603      	mov	r3, r0
 80026dc:	73fb      	strb	r3, [r7, #15]
    (void) param;
    status_t status = STATUS_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (data == 0)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d121      	bne.n	800272c <TxCmd_CfgDca+0x5e>
    {
        argus_cfg_dca_t dca = { 0 };
 80026e8:	f107 0310 	add.w	r3, r7, #16
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	605a      	str	r2, [r3, #4]
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	60da      	str	r2, [r3, #12]
 80026f6:	611a      	str	r2, [r3, #16]
 80026f8:	829a      	strh	r2, [r3, #20]
        argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f001 fe2d 	bl	800435c <ExplorerApp_GetArgusPtr>
 8002702:	62b8      	str	r0, [r7, #40]	@ 0x28
        if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8002704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002706:	2b00      	cmp	r3, #0
 8002708:	d102      	bne.n	8002710 <TxCmd_CfgDca+0x42>
 800270a:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 800270e:	e012      	b.n	8002736 <TxCmd_CfgDca+0x68>
        status = Argus_GetConfigurationDynamicAdaption(argus, &dca);
 8002710:	f107 0310 	add.w	r3, r7, #16
 8002714:	4619      	mov	r1, r3
 8002716:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002718:	f013 fb98 	bl	8015e4c <Argus_GetConfigurationDynamicAdaption>
 800271c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        Serialize_Cfg_DCA(frame, &dca);
 800271e:	f107 0310 	add.w	r3, r7, #16
 8002722:	4619      	mov	r1, r3
 8002724:	68b8      	ldr	r0, [r7, #8]
 8002726:	f7ff fa71 	bl	8001c0c <Serialize_Cfg_DCA>
 800272a:	e003      	b.n	8002734 <TxCmd_CfgDca+0x66>
    }
    else
    {
        Serialize_Cfg_DCA(frame, (argus_cfg_dca_t*) data);
 800272c:	6839      	ldr	r1, [r7, #0]
 800272e:	68b8      	ldr	r0, [r7, #8]
 8002730:	f7ff fa6c 	bl	8001c0c <Serialize_Cfg_DCA>
    }

    return status;
 8002734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002736:	4618      	mov	r0, r3
 8002738:	3730      	adds	r7, #48	@ 0x30
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <RxCmd_CfgPba>:

static status_t RxCmd_CfgPba(sci_device_t deviceID, sci_frame_t * frame)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b08c      	sub	sp, #48	@ 0x30
 8002742:	af00      	add	r7, sp, #0
 8002744:	4603      	mov	r3, r0
 8002746:	6039      	str	r1, [r7, #0]
 8002748:	71fb      	strb	r3, [r7, #7]
    if (SCI_Frame_BytesToRead(frame) > 1)
 800274a:	6838      	ldr	r0, [r7, #0]
 800274c:	f003 fb56 	bl	8005dfc <SCI_Frame_BytesToRead>
 8002750:	4603      	mov	r3, r0
 8002752:	2b01      	cmp	r3, #1
 8002754:	d930      	bls.n	80027b8 <RxCmd_CfgPba+0x7a>
    {
        /* Master sending data... */
        argus_cfg_pba_t pba = { 0 };
 8002756:	f107 0308 	add.w	r3, r7, #8
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	605a      	str	r2, [r3, #4]
 8002760:	609a      	str	r2, [r3, #8]
 8002762:	60da      	str	r2, [r3, #12]
 8002764:	611a      	str	r2, [r3, #16]
 8002766:	615a      	str	r2, [r3, #20]
 8002768:	619a      	str	r2, [r3, #24]
        Deserialize_Cfg_PBA(frame, &pba);
 800276a:	f107 0308 	add.w	r3, r7, #8
 800276e:	4619      	mov	r1, r3
 8002770:	6838      	ldr	r0, [r7, #0]
 8002772:	f7ff fc01 	bl	8001f78 <Deserialize_Cfg_PBA>
        argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	4618      	mov	r0, r3
 800277a:	f001 fdef 	bl	800435c <ExplorerApp_GetArgusPtr>
 800277e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8002780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002782:	2b00      	cmp	r3, #0
 8002784:	d102      	bne.n	800278c <RxCmd_CfgPba+0x4e>
 8002786:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 800278a:	e01c      	b.n	80027c6 <RxCmd_CfgPba+0x88>
        bool resume = ExplorerApp_SuspendTimerMeasurement(argus);
 800278c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800278e:	f002 f83d 	bl	800480c <ExplorerApp_SuspendTimerMeasurement>
 8002792:	4603      	mov	r3, r0
 8002794:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        status_t status = Argus_SetConfigurationPixelBinning(argus, &pba);
 8002798:	f107 0308 	add.w	r3, r7, #8
 800279c:	4619      	mov	r1, r3
 800279e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80027a0:	f013 fb8a 	bl	8015eb8 <Argus_SetConfigurationPixelBinning>
 80027a4:	6278      	str	r0, [r7, #36]	@ 0x24
        if (resume) ExplorerApp_StartTimerMeasurement(argus);
 80027a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <RxCmd_CfgPba+0x76>
 80027ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80027b0:	f002 f858 	bl	8004864 <ExplorerApp_StartTimerMeasurement>
        return status;
 80027b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b6:	e006      	b.n	80027c6 <RxCmd_CfgPba+0x88>

    }
    else
    {
        /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CONFIGURATION_PBA, 0, 0);
 80027b8:	79f8      	ldrb	r0, [r7, #7]
 80027ba:	2300      	movs	r3, #0
 80027bc:	2200      	movs	r2, #0
 80027be:	2154      	movs	r1, #84	@ 0x54
 80027c0:	f002 faf2 	bl	8004da8 <SCI_SendCommand>
 80027c4:	4603      	mov	r3, r0
    }
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3730      	adds	r7, #48	@ 0x30
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <TxCmd_CfgPba>:
static status_t TxCmd_CfgPba(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, void const * data)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b08e      	sub	sp, #56	@ 0x38
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	603b      	str	r3, [r7, #0]
 80027da:	4603      	mov	r3, r0
 80027dc:	73fb      	strb	r3, [r7, #15]
    (void) param;
    status_t status = STATUS_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	637b      	str	r3, [r7, #52]	@ 0x34
    if (data == 0)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d122      	bne.n	800282e <TxCmd_CfgPba+0x60>
    {
        argus_cfg_pba_t pba = { 0 };
 80027e8:	f107 0314 	add.w	r3, r7, #20
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	611a      	str	r2, [r3, #16]
 80027f8:	615a      	str	r2, [r3, #20]
 80027fa:	619a      	str	r2, [r3, #24]
        argus_hnd_t * argus = ExplorerApp_GetArgusPtr(deviceID);
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
 80027fe:	4618      	mov	r0, r3
 8002800:	f001 fdac 	bl	800435c <ExplorerApp_GetArgusPtr>
 8002804:	6338      	str	r0, [r7, #48]	@ 0x30
        if (argus == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8002806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002808:	2b00      	cmp	r3, #0
 800280a:	d102      	bne.n	8002812 <TxCmd_CfgPba+0x44>
 800280c:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8002810:	e012      	b.n	8002838 <TxCmd_CfgPba+0x6a>
        status = Argus_GetConfigurationPixelBinning(argus, &pba);
 8002812:	f107 0314 	add.w	r3, r7, #20
 8002816:	4619      	mov	r1, r3
 8002818:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800281a:	f013 fba3 	bl	8015f64 <Argus_GetConfigurationPixelBinning>
 800281e:	6378      	str	r0, [r7, #52]	@ 0x34
        Serialize_Cfg_PBA(frame, &pba);
 8002820:	f107 0314 	add.w	r3, r7, #20
 8002824:	4619      	mov	r1, r3
 8002826:	68b8      	ldr	r0, [r7, #8]
 8002828:	f7ff faf4 	bl	8001e14 <Serialize_Cfg_PBA>
 800282c:	e003      	b.n	8002836 <TxCmd_CfgPba+0x68>
    }
    else
    {
        Serialize_Cfg_PBA(frame, (argus_cfg_pba_t*) data);
 800282e:	6839      	ldr	r1, [r7, #0]
 8002830:	68b8      	ldr	r0, [r7, #8]
 8002832:	f7ff faef 	bl	8001e14 <Serialize_Cfg_PBA>
    }

    return status;
 8002836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002838:	4618      	mov	r0, r3
 800283a:	3738      	adds	r7, #56	@ 0x38
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <RxCmd_CfgSpi>:

static status_t RxCmd_CfgSpi(sci_device_t deviceID, sci_frame_t * frame)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	6039      	str	r1, [r7, #0]
 800284a:	71fb      	strb	r3, [r7, #7]
    if (SCI_Frame_BytesToRead(frame) > 1)
 800284c:	6838      	ldr	r0, [r7, #0]
 800284e:	f003 fad5 	bl	8005dfc <SCI_Frame_BytesToRead>
 8002852:	4603      	mov	r3, r0
 8002854:	2b01      	cmp	r3, #1
 8002856:	d91d      	bls.n	8002894 <RxCmd_CfgSpi+0x54>
    {
        /* Master sending data... */
        explorer_t * explorer = ExplorerApp_GetExplorerPtr(deviceID);
 8002858:	79fb      	ldrb	r3, [r7, #7]
 800285a:	4618      	mov	r0, r3
 800285c:	f001 fda2 	bl	80043a4 <ExplorerApp_GetExplorerPtr>
 8002860:	6178      	str	r0, [r7, #20]
        if (explorer == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d102      	bne.n	800286e <RxCmd_CfgSpi+0x2e>
 8002868:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 800286c:	e019      	b.n	80028a2 <RxCmd_CfgSpi+0x62>

        explorer_cfg_t cfg;
        ExplorerApp_GetConfiguration(explorer, &cfg);
 800286e:	f107 030c 	add.w	r3, r7, #12
 8002872:	4619      	mov	r1, r3
 8002874:	6978      	ldr	r0, [r7, #20]
 8002876:	f001 fb43 	bl	8003f00 <ExplorerApp_GetConfiguration>
        cfg.SPIBaudRate = SCI_Frame_Dequeue32u(frame);
 800287a:	6838      	ldr	r0, [r7, #0]
 800287c:	f003 fd92 	bl	80063a4 <SCI_Frame_Dequeue32u>
 8002880:	4603      	mov	r3, r0
 8002882:	60fb      	str	r3, [r7, #12]
        return ExplorerApp_SetConfiguration(explorer, &cfg);
 8002884:	f107 030c 	add.w	r3, r7, #12
 8002888:	4619      	mov	r1, r3
 800288a:	6978      	ldr	r0, [r7, #20]
 800288c:	f001 fb6e 	bl	8003f6c <ExplorerApp_SetConfiguration>
 8002890:	4603      	mov	r3, r0
 8002892:	e006      	b.n	80028a2 <RxCmd_CfgSpi+0x62>
    }
    else
    {
        /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CONFIGURATION_SPI, 0, 0);
 8002894:	79f8      	ldrb	r0, [r7, #7]
 8002896:	2300      	movs	r3, #0
 8002898:	2200      	movs	r2, #0
 800289a:	2158      	movs	r1, #88	@ 0x58
 800289c:	f002 fa84 	bl	8004da8 <SCI_SendCommand>
 80028a0:	4603      	mov	r3, r0
    }
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <TxCmd_CfgSpi>:
static status_t TxCmd_CfgSpi(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b088      	sub	sp, #32
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
 80028b4:	603b      	str	r3, [r7, #0]
 80028b6:	4603      	mov	r3, r0
 80028b8:	73fb      	strb	r3, [r7, #15]
    (void)param;
    (void)data;

    explorer_t * explorer = ExplorerApp_GetExplorerPtr(deviceID);
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	4618      	mov	r0, r3
 80028be:	f001 fd71 	bl	80043a4 <ExplorerApp_GetExplorerPtr>
 80028c2:	61f8      	str	r0, [r7, #28]
    if (explorer == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d102      	bne.n	80028d0 <TxCmd_CfgSpi+0x26>
 80028ca:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 80028ce:	e00b      	b.n	80028e8 <TxCmd_CfgSpi+0x3e>

    explorer_cfg_t cfg;
    ExplorerApp_GetConfiguration(explorer, &cfg);
 80028d0:	f107 0314 	add.w	r3, r7, #20
 80028d4:	4619      	mov	r1, r3
 80028d6:	69f8      	ldr	r0, [r7, #28]
 80028d8:	f001 fb12 	bl	8003f00 <ExplorerApp_GetConfiguration>
    SCI_Frame_Queue32u(frame, cfg.SPIBaudRate);
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	4619      	mov	r1, r3
 80028e0:	68b8      	ldr	r0, [r7, #8]
 80028e2:	f003 fbb9 	bl	8006058 <SCI_Frame_Queue32u>
    return STATUS_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3720      	adds	r7, #32
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <RxCmd_CfgUart>:

static status_t RxCmd_CfgUart(sci_device_t deviceID, sci_frame_t * frame)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	6039      	str	r1, [r7, #0]
 80028fa:	71fb      	strb	r3, [r7, #7]
#if AFBR_SCI_USB
    (void) deviceID;
    (void) frame;
    return ERROR_NOT_SUPPORTED;
#else
    if(SCI_Frame_BytesToRead(frame) > 1)
 80028fc:	6838      	ldr	r0, [r7, #0]
 80028fe:	f003 fa7d 	bl	8005dfc <SCI_Frame_BytesToRead>
 8002902:	4603      	mov	r3, r0
 8002904:	2b01      	cmp	r3, #1
 8002906:	d908      	bls.n	800291a <RxCmd_CfgUart+0x2a>
    {   /* Master sending data... */
        const uint32_t baudRate = SCI_Frame_Dequeue32u(frame);
 8002908:	6838      	ldr	r0, [r7, #0]
 800290a:	f003 fd4b 	bl	80063a4 <SCI_Frame_Dequeue32u>
 800290e:	60f8      	str	r0, [r7, #12]
        return UART_CheckBaudRate(baudRate);
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f004 fd27 	bl	8007364 <UART_CheckBaudRate>
 8002916:	4603      	mov	r3, r0
 8002918:	e006      	b.n	8002928 <RxCmd_CfgUart+0x38>
    }
    else
    {   /* Master is requesting data... */
        return SCI_SendCommand(deviceID, CMD_CONFIGURATION_UART, 0, 0);
 800291a:	79f8      	ldrb	r0, [r7, #7]
 800291c:	2300      	movs	r3, #0
 800291e:	2200      	movs	r2, #0
 8002920:	2159      	movs	r1, #89	@ 0x59
 8002922:	f002 fa41 	bl	8004da8 <SCI_SendCommand>
 8002926:	4603      	mov	r3, r0
    }
#endif
}
 8002928:	4618      	mov	r0, r3
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <PrxCmd_CfgUart>:
static status_t PrxCmd_CfgUart(sci_device_t deviceID, sci_frame_t *frame)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	6039      	str	r1, [r7, #0]
 800293a:	71fb      	strb	r3, [r7, #7]

#if AFBR_SCI_USB
    (void) frame;
    return ERROR_NOT_SUPPORTED;
#else
    if (SCI_Frame_BytesToRead(frame) > 1)
 800293c:	6838      	ldr	r0, [r7, #0]
 800293e:	f003 fa5d 	bl	8005dfc <SCI_Frame_BytesToRead>
 8002942:	4603      	mov	r3, r0
 8002944:	2b01      	cmp	r3, #1
 8002946:	d917      	bls.n	8002978 <PrxCmd_CfgUart+0x48>
    { /* Master sending data... */
        const uint32_t baudRate = SCI_Frame_Dequeue32u(frame);
 8002948:	6838      	ldr	r0, [r7, #0]
 800294a:	f003 fd2b 	bl	80063a4 <SCI_Frame_Dequeue32u>
 800294e:	60b8      	str	r0, [r7, #8]
        status_t status = STATUS_BUSY;
 8002950:	2302      	movs	r3, #2
 8002952:	60fb      	str	r3, [r7, #12]
        while (status == STATUS_BUSY)
 8002954:	e003      	b.n	800295e <PrxCmd_CfgUart+0x2e>
        {
            status = UART_SetBaudRate(baudRate);
 8002956:	68b8      	ldr	r0, [r7, #8]
 8002958:	f004 fd3a 	bl	80073d0 <UART_SetBaudRate>
 800295c:	60f8      	str	r0, [r7, #12]
        while (status == STATUS_BUSY)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2b02      	cmp	r3, #2
 8002962:	d0f8      	beq.n	8002956 <PrxCmd_CfgUart+0x26>
        }
        assert(status == STATUS_OK);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d006      	beq.n	8002978 <PrxCmd_CfgUart+0x48>
 800296a:	4b06      	ldr	r3, [pc, #24]	@ (8002984 <PrxCmd_CfgUart+0x54>)
 800296c:	4a06      	ldr	r2, [pc, #24]	@ (8002988 <PrxCmd_CfgUart+0x58>)
 800296e:	f240 211d 	movw	r1, #541	@ 0x21d
 8002972:	4806      	ldr	r0, [pc, #24]	@ (800298c <PrxCmd_CfgUart+0x5c>)
 8002974:	f004 ff98 	bl	80078a8 <__assert_func>
    }
    return STATUS_OK;
 8002978:	2300      	movs	r3, #0
#endif
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	0802cb3c 	.word	0x0802cb3c
 8002988:	0802dbb0 	.word	0x0802dbb0
 800298c:	0802cb00 	.word	0x0802cb00

08002990 <TxCmd_CfgUart>:
static status_t TxCmd_CfgUart(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	60b9      	str	r1, [r7, #8]
 8002998:	607a      	str	r2, [r7, #4]
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	4603      	mov	r3, r0
 800299e:	73fb      	strb	r3, [r7, #15]
    (void) data;
#if AFBR_SCI_USB
    (void) frame;
    return ERROR_NOT_SUPPORTED;
#else
    const uint32_t baudRate = UART_GetBaudRate();
 80029a0:	f004 fcd4 	bl	800734c <UART_GetBaudRate>
 80029a4:	6178      	str	r0, [r7, #20]
    SCI_Frame_Queue32u(frame, baudRate);
 80029a6:	6979      	ldr	r1, [r7, #20]
 80029a8:	68b8      	ldr	r0, [r7, #8]
 80029aa:	f003 fb55 	bl	8006058 <SCI_Frame_Queue32u>
    return STATUS_OK;
 80029ae:	2300      	movs	r3, #0
#endif
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <ExplorerAPI_InitCfg>:

/*******************************************************************************
 * Init Code
 ******************************************************************************/
status_t ExplorerAPI_InitCfg(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
    status_t status;
    status = SCI_SetRxTxCommand(CMD_CONFIGURATION_DATA_OUTPUT_MODE, RxCmd_CfgDataOutputMode, TxCmd_CfgDataOutputMode);
 80029be:	4a3f      	ldr	r2, [pc, #252]	@ (8002abc <ExplorerAPI_InitCfg+0x104>)
 80029c0:	493f      	ldr	r1, [pc, #252]	@ (8002ac0 <ExplorerAPI_InitCfg+0x108>)
 80029c2:	2041      	movs	r0, #65	@ 0x41
 80029c4:	f002 f872 	bl	8004aac <SCI_SetRxTxCommand>
 80029c8:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	da01      	bge.n	80029d4 <ExplorerAPI_InitCfg+0x1c>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	e06f      	b.n	8002ab4 <ExplorerAPI_InitCfg+0xfc>
    status = SCI_SetRxTxCommand(CMD_CONFIGURATION_MEASUREMENT_MODE, RxCmd_CfgMeasurementMode, TxCmd_CfgMeasurementMode);
 80029d4:	4a3b      	ldr	r2, [pc, #236]	@ (8002ac4 <ExplorerAPI_InitCfg+0x10c>)
 80029d6:	493c      	ldr	r1, [pc, #240]	@ (8002ac8 <ExplorerAPI_InitCfg+0x110>)
 80029d8:	2042      	movs	r0, #66	@ 0x42
 80029da:	f002 f867 	bl	8004aac <SCI_SetRxTxCommand>
 80029de:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	da01      	bge.n	80029ea <ExplorerAPI_InitCfg+0x32>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	e064      	b.n	8002ab4 <ExplorerAPI_InitCfg+0xfc>
    status = SCI_SetRxTxCommand(CMD_CONFIGURATION_FRAME_TIME, RxCmd_CfgFrameTime, TxCmd_CfgFrameTime);
 80029ea:	4a38      	ldr	r2, [pc, #224]	@ (8002acc <ExplorerAPI_InitCfg+0x114>)
 80029ec:	4938      	ldr	r1, [pc, #224]	@ (8002ad0 <ExplorerAPI_InitCfg+0x118>)
 80029ee:	2043      	movs	r0, #67	@ 0x43
 80029f0:	f002 f85c 	bl	8004aac <SCI_SetRxTxCommand>
 80029f4:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	da01      	bge.n	8002a00 <ExplorerAPI_InitCfg+0x48>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	e059      	b.n	8002ab4 <ExplorerAPI_InitCfg+0xfc>
    status = SCI_SetRxTxCommand(CMD_CONFIGURATION_DUAL_FREQUENCY_MODE, RxCmd_CfgDualFrequencyMode, TxCmd_CfgDualFrequencyMode);
 8002a00:	4a34      	ldr	r2, [pc, #208]	@ (8002ad4 <ExplorerAPI_InitCfg+0x11c>)
 8002a02:	4935      	ldr	r1, [pc, #212]	@ (8002ad8 <ExplorerAPI_InitCfg+0x120>)
 8002a04:	2044      	movs	r0, #68	@ 0x44
 8002a06:	f002 f851 	bl	8004aac <SCI_SetRxTxCommand>
 8002a0a:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	da01      	bge.n	8002a16 <ExplorerAPI_InitCfg+0x5e>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	e04e      	b.n	8002ab4 <ExplorerAPI_InitCfg+0xfc>
    status = SCI_SetRxTxCommand(CMD_CONFIGURATION_SHOT_NOISE_MONITOR_MODE, RxCmd_CfgShotNoiseMonitor, TxCmd_CfgShotNoiseMonitor);
 8002a16:	4a31      	ldr	r2, [pc, #196]	@ (8002adc <ExplorerAPI_InitCfg+0x124>)
 8002a18:	4931      	ldr	r1, [pc, #196]	@ (8002ae0 <ExplorerAPI_InitCfg+0x128>)
 8002a1a:	2046      	movs	r0, #70	@ 0x46
 8002a1c:	f002 f846 	bl	8004aac <SCI_SetRxTxCommand>
 8002a20:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	da01      	bge.n	8002a2c <ExplorerAPI_InitCfg+0x74>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	e043      	b.n	8002ab4 <ExplorerAPI_InitCfg+0xfc>
    status = SCI_SetRxTxCommand(CMD_CONFIGURATION_XTALK_MONITOR_MODE, RxCmd_CfgXtalkMonitor, TxCmd_CfgXtalkMonitor);
 8002a2c:	4a2d      	ldr	r2, [pc, #180]	@ (8002ae4 <ExplorerAPI_InitCfg+0x12c>)
 8002a2e:	492e      	ldr	r1, [pc, #184]	@ (8002ae8 <ExplorerAPI_InitCfg+0x130>)
 8002a30:	2047      	movs	r0, #71	@ 0x47
 8002a32:	f002 f83b 	bl	8004aac <SCI_SetRxTxCommand>
 8002a36:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	da01      	bge.n	8002a42 <ExplorerAPI_InitCfg+0x8a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	e038      	b.n	8002ab4 <ExplorerAPI_InitCfg+0xfc>
    status = SCI_SetRxTxCommand(CMD_CONFIGURATION_SMART_POWER_SAVE, RxCmd_CfgSmartPowerSaveEnabled, TxCmd_CfgSmartPowerSaveEnabled);
 8002a42:	4a2a      	ldr	r2, [pc, #168]	@ (8002aec <ExplorerAPI_InitCfg+0x134>)
 8002a44:	492a      	ldr	r1, [pc, #168]	@ (8002af0 <ExplorerAPI_InitCfg+0x138>)
 8002a46:	2045      	movs	r0, #69	@ 0x45
 8002a48:	f002 f830 	bl	8004aac <SCI_SetRxTxCommand>
 8002a4c:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	da01      	bge.n	8002a58 <ExplorerAPI_InitCfg+0xa0>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	e02d      	b.n	8002ab4 <ExplorerAPI_InitCfg+0xfc>
    status = SCI_SetRxTxCommand(CMD_CONFIGURATION_DCA, RxCmd_CfgDca, TxCmd_CfgDca);
 8002a58:	4a26      	ldr	r2, [pc, #152]	@ (8002af4 <ExplorerAPI_InitCfg+0x13c>)
 8002a5a:	4927      	ldr	r1, [pc, #156]	@ (8002af8 <ExplorerAPI_InitCfg+0x140>)
 8002a5c:	2052      	movs	r0, #82	@ 0x52
 8002a5e:	f002 f825 	bl	8004aac <SCI_SetRxTxCommand>
 8002a62:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	da01      	bge.n	8002a6e <ExplorerAPI_InitCfg+0xb6>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	e022      	b.n	8002ab4 <ExplorerAPI_InitCfg+0xfc>
    status = SCI_SetRxTxCommand(CMD_CONFIGURATION_PBA, RxCmd_CfgPba, TxCmd_CfgPba);
 8002a6e:	4a23      	ldr	r2, [pc, #140]	@ (8002afc <ExplorerAPI_InitCfg+0x144>)
 8002a70:	4923      	ldr	r1, [pc, #140]	@ (8002b00 <ExplorerAPI_InitCfg+0x148>)
 8002a72:	2054      	movs	r0, #84	@ 0x54
 8002a74:	f002 f81a 	bl	8004aac <SCI_SetRxTxCommand>
 8002a78:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	da01      	bge.n	8002a84 <ExplorerAPI_InitCfg+0xcc>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	e017      	b.n	8002ab4 <ExplorerAPI_InitCfg+0xfc>
    status = SCI_SetRxTxCommand(CMD_CONFIGURATION_SPI, RxCmd_CfgSpi, TxCmd_CfgSpi);
 8002a84:	4a1f      	ldr	r2, [pc, #124]	@ (8002b04 <ExplorerAPI_InitCfg+0x14c>)
 8002a86:	4920      	ldr	r1, [pc, #128]	@ (8002b08 <ExplorerAPI_InitCfg+0x150>)
 8002a88:	2058      	movs	r0, #88	@ 0x58
 8002a8a:	f002 f80f 	bl	8004aac <SCI_SetRxTxCommand>
 8002a8e:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	da01      	bge.n	8002a9a <ExplorerAPI_InitCfg+0xe2>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	e00c      	b.n	8002ab4 <ExplorerAPI_InitCfg+0xfc>
    status = SCI_SetCommand(CMD_CONFIGURATION_UART, RxCmd_CfgUart, TxCmd_CfgUart, PrxCmd_CfgUart);
 8002a9a:	4b1c      	ldr	r3, [pc, #112]	@ (8002b0c <ExplorerAPI_InitCfg+0x154>)
 8002a9c:	4a1c      	ldr	r2, [pc, #112]	@ (8002b10 <ExplorerAPI_InitCfg+0x158>)
 8002a9e:	491d      	ldr	r1, [pc, #116]	@ (8002b14 <ExplorerAPI_InitCfg+0x15c>)
 8002aa0:	2059      	movs	r0, #89	@ 0x59
 8002aa2:	f002 f815 	bl	8004ad0 <SCI_SetCommand>
 8002aa6:	6078      	str	r0, [r7, #4]
    if(status < STATUS_OK) return status;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	da01      	bge.n	8002ab2 <ExplorerAPI_InitCfg+0xfa>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	e000      	b.n	8002ab4 <ExplorerAPI_InitCfg+0xfc>


    return status;
 8002ab2:	687b      	ldr	r3, [r7, #4]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	08002233 	.word	0x08002233
 8002ac0:	080021c9 	.word	0x080021c9
 8002ac4:	08002181 	.word	0x08002181
 8002ac8:	08002125 	.word	0x08002125
 8002acc:	080022eb 	.word	0x080022eb
 8002ad0:	0800227b 	.word	0x0800227b
 8002ad4:	08002479 	.word	0x08002479
 8002ad8:	080023ff 	.word	0x080023ff
 8002adc:	08002535 	.word	0x08002535
 8002ae0:	080024c1 	.word	0x080024c1
 8002ae4:	080025f9 	.word	0x080025f9
 8002ae8:	0800257d 	.word	0x0800257d
 8002aec:	080023b3 	.word	0x080023b3
 8002af0:	08002337 	.word	0x08002337
 8002af4:	080026cf 	.word	0x080026cf
 8002af8:	08002641 	.word	0x08002641
 8002afc:	080027cf 	.word	0x080027cf
 8002b00:	0800273f 	.word	0x0800273f
 8002b04:	080028ab 	.word	0x080028ab
 8002b08:	08002841 	.word	0x08002841
 8002b0c:	08002931 	.word	0x08002931
 8002b10:	08002991 	.word	0x08002991
 8002b14:	080028f1 	.word	0x080028f1

08002b18 <Serialize_MeasurementData_Generic>:

/*******************************************************************************
 * Parsing Functions
 ******************************************************************************/
static void Serialize_MeasurementData_Generic(sci_frame_t * frame, argus_results_t const * res, sci_cmd_t type)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	4613      	mov	r3, r2
 8002b24:	71fb      	strb	r3, [r7, #7]
    (void) type; // unused

    assert(res->Status >= INT16_MIN && res->Status <= INT16_MAX);
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8002b2e:	db04      	blt.n	8002b3a <Serialize_MeasurementData_Generic+0x22>
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b38:	db05      	blt.n	8002b46 <Serialize_MeasurementData_Generic+0x2e>
 8002b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b68 <Serialize_MeasurementData_Generic+0x50>)
 8002b3c:	4a0b      	ldr	r2, [pc, #44]	@ (8002b6c <Serialize_MeasurementData_Generic+0x54>)
 8002b3e:	2148      	movs	r1, #72	@ 0x48
 8002b40:	480b      	ldr	r0, [pc, #44]	@ (8002b70 <Serialize_MeasurementData_Generic+0x58>)
 8002b42:	f004 feb1 	bl	80078a8 <__assert_func>

    SCI_Frame_Queue16s(frame, (int16_t)res->Status);
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	b21b      	sxth	r3, r3
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f003 face 	bl	80060f0 <SCI_Frame_Queue16s>
    SCI_Frame_Queue_Time(frame, &res->TimeStamp);
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	3304      	adds	r3, #4
 8002b58:	4619      	mov	r1, r3
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f003 fb22 	bl	80061a4 <SCI_Frame_Queue_Time>
}
 8002b60:	bf00      	nop
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	0802cb50 	.word	0x0802cb50
 8002b6c:	0802dbc0 	.word	0x0802dbc0
 8002b70:	0802cb88 	.word	0x0802cb88

08002b74 <Serialize_MeasurementData_FrameConfig>:
static void Serialize_MeasurementData_FrameConfig(sci_frame_t * frame, argus_results_t const * res, sci_cmd_t type)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	71fb      	strb	r3, [r7, #7]
    SCI_Frame_Queue32u(frame, res->Frame.State);
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	4619      	mov	r1, r3
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f003 fa65 	bl	8006058 <SCI_Frame_Queue32u>

    if (type != CMD_MEASUREMENT_DATA_1D || res->Debug != 0)
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	2b36      	cmp	r3, #54	@ 0x36
 8002b92:	d104      	bne.n	8002b9e <Serialize_MeasurementData_FrameConfig+0x2a>
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d01e      	beq.n	8002bdc <Serialize_MeasurementData_FrameConfig+0x68>
    {
        SCI_Frame_Queue16u(frame, (uint16_t) res->Frame.DigitalIntegrationDepth);
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	8bdb      	ldrh	r3, [r3, #30]
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f003 fa10 	bl	8005fca <SCI_Frame_Queue16u>
        SCI_Frame_Queue16u(frame, (uint16_t) res->Frame.AnalogIntegrationDepth);
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	8b9b      	ldrh	r3, [r3, #28]
 8002bae:	4619      	mov	r1, r3
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f003 fa0a 	bl	8005fca <SCI_Frame_Queue16u>
        SCI_Frame_Queue16u(frame, (uint16_t) res->Frame.OutputPower);
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	8c1b      	ldrh	r3, [r3, #32]
 8002bba:	4619      	mov	r1, r3
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f003 fa04 	bl	8005fca <SCI_Frame_Queue16u>
        SCI_Frame_Queue08u(frame, (uint8_t) res->Frame.PixelGain);
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8002bc8:	4619      	mov	r1, r3
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f003 f9d8 	bl	8005f80 <SCI_Frame_Queue08u>
        SCI_Frame_Queue32u(frame, (uint32_t) res->Frame.PxEnMask);
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f003 fa3e 	bl	8006058 <SCI_Frame_Queue32u>
    }

    if (type != CMD_MEASUREMENT_DATA_1D)
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
 8002bde:	2b36      	cmp	r3, #54	@ 0x36
 8002be0:	d006      	beq.n	8002bf0 <Serialize_MeasurementData_FrameConfig+0x7c>
    {
        SCI_Frame_Queue32u(frame, (uint32_t) res->Frame.ChEnMask);
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	4619      	mov	r1, r3
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f003 fa35 	bl	8006058 <SCI_Frame_Queue32u>
            PIXELN_ENABLE(sat_msk, n);
        }
        SCI_Frame_Queue32u(frame, bin_msk);
        SCI_Frame_Queue32u(frame, sat_msk);
    }
}
 8002bee:	e03e      	b.n	8002c6e <Serialize_MeasurementData_FrameConfig+0xfa>
    else if (res->Debug != 0) // 1D + Debug Mode
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d039      	beq.n	8002c6e <Serialize_MeasurementData_FrameConfig+0xfa>
        uint32_t bin_msk = 0xFFFFFFFFU;
 8002bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfe:	61fb      	str	r3, [r7, #28]
        uint32_t sat_msk = 0x00000000U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	61bb      	str	r3, [r7, #24]
        uint8_t n = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	75fb      	strb	r3, [r7, #23]
        for (const argus_pixel_t * px = res->Pixels; px < &res->PixelRef; ++px, ++n)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	3328      	adds	r3, #40	@ 0x28
 8002c0c:	613b      	str	r3, [r7, #16]
 8002c0e:	e020      	b.n	8002c52 <Serialize_MeasurementData_FrameConfig+0xde>
            if (!(px->Status & (PIXEL_OFF | PIXEL_BIN_EXCL)))
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	7a1b      	ldrb	r3, [r3, #8]
 8002c14:	f003 0305 	and.w	r3, r3, #5
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d107      	bne.n	8002c2c <Serialize_MeasurementData_FrameConfig+0xb8>
            PIXELN_DISABLE(bin_msk, n);
 8002c1c:	7dfb      	ldrb	r3, [r7, #23]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69fa      	ldr	r2, [r7, #28]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61fb      	str	r3, [r7, #28]
            if (px->Status & PIXEL_SAT)
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	7a1b      	ldrb	r3, [r3, #8]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d006      	beq.n	8002c46 <Serialize_MeasurementData_FrameConfig+0xd2>
            PIXELN_ENABLE(sat_msk, n);
 8002c38:	7dfb      	ldrb	r3, [r7, #23]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        for (const argus_pixel_t * px = res->Pixels; px < &res->PixelRef; ++px, ++n)
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	330c      	adds	r3, #12
 8002c4a:	613b      	str	r3, [r7, #16]
 8002c4c:	7dfb      	ldrb	r3, [r7, #23]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	75fb      	strb	r3, [r7, #23]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d3d8      	bcc.n	8002c10 <Serialize_MeasurementData_FrameConfig+0x9c>
        SCI_Frame_Queue32u(frame, bin_msk);
 8002c5e:	69f9      	ldr	r1, [r7, #28]
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f003 f9f9 	bl	8006058 <SCI_Frame_Queue32u>
        SCI_Frame_Queue32u(frame, sat_msk);
 8002c66:	69b9      	ldr	r1, [r7, #24]
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f003 f9f5 	bl	8006058 <SCI_Frame_Queue32u>
}
 8002c6e:	bf00      	nop
 8002c70:	3720      	adds	r7, #32
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <Serialize_MeasurementData_RawData>:
static void Serialize_MeasurementData_RawData(sci_frame_t * frame, argus_results_t const * res, sci_cmd_t type)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b088      	sub	sp, #32
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	60f8      	str	r0, [r7, #12]
 8002c7e:	60b9      	str	r1, [r7, #8]
 8002c80:	4613      	mov	r3, r2
 8002c82:	71fb      	strb	r3, [r7, #7]
    if (type != CMD_MEASUREMENT_DATA_FULL || res->Debug == 0) return;
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	2b32      	cmp	r3, #50	@ 0x32
 8002c88:	d14e      	bne.n	8002d28 <Serialize_MeasurementData_RawData+0xb2>
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d049      	beq.n	8002d28 <Serialize_MeasurementData_RawData+0xb2>

    SCI_Frame_Queue08u(frame, ARGUS_PHASECOUNT);
 8002c94:	2104      	movs	r1, #4
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f003 f972 	bl	8005f80 <SCI_Frame_Queue08u>

    /* Raw Samples */
    uint32_t const * data = res->Debug->Data;
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	61fb      	str	r3, [r7, #28]

    uint32_t msk = res->Frame.PxEnMask;
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	61bb      	str	r3, [r7, #24]
    while (msk)
 8002cac:	e018      	b.n	8002ce0 <Serialize_MeasurementData_RawData+0x6a>
    {
        if (msk & 1)
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d010      	beq.n	8002cda <Serialize_MeasurementData_RawData+0x64>
        {
            for (uint_fast8_t p = 0; p < ARGUS_PHASECOUNT; ++p)
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	e00a      	b.n	8002cd4 <Serialize_MeasurementData_RawData+0x5e>
            {
                SCI_Frame_Queue24u(frame, *(data++));
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	1d1a      	adds	r2, r3, #4
 8002cc2:	61fa      	str	r2, [r7, #28]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f003 f997 	bl	8005ffc <SCI_Frame_Queue24u>
            for (uint_fast8_t p = 0; p < ARGUS_PHASECOUNT; ++p)
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d9f1      	bls.n	8002cbe <Serialize_MeasurementData_RawData+0x48>
            }
        }
        msk >>= 1U;
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	085b      	lsrs	r3, r3, #1
 8002cde:	61bb      	str	r3, [r7, #24]
    while (msk)
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1e3      	bne.n	8002cae <Serialize_MeasurementData_RawData+0x38>
    }

    msk = res->Frame.ChEnMask;
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	61bb      	str	r3, [r7, #24]
    while (msk)
 8002cec:	e018      	b.n	8002d20 <Serialize_MeasurementData_RawData+0xaa>
    {
        if (msk & 1)
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d010      	beq.n	8002d1a <Serialize_MeasurementData_RawData+0xa4>
        {
            for (uint_fast8_t p = 0; p < ARGUS_PHASECOUNT; ++p)
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	e00a      	b.n	8002d14 <Serialize_MeasurementData_RawData+0x9e>
            {
                SCI_Frame_Queue24u(frame, *(data++));
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	1d1a      	adds	r2, r3, #4
 8002d02:	61fa      	str	r2, [r7, #28]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4619      	mov	r1, r3
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f003 f977 	bl	8005ffc <SCI_Frame_Queue24u>
            for (uint_fast8_t p = 0; p < ARGUS_PHASECOUNT; ++p)
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	3301      	adds	r3, #1
 8002d12:	613b      	str	r3, [r7, #16]
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	2b03      	cmp	r3, #3
 8002d18:	d9f1      	bls.n	8002cfe <Serialize_MeasurementData_RawData+0x88>
            }
        }
        msk >>= 1U;
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	085b      	lsrs	r3, r3, #1
 8002d1e:	61bb      	str	r3, [r7, #24]
    while (msk)
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1e3      	bne.n	8002cee <Serialize_MeasurementData_RawData+0x78>
 8002d26:	e000      	b.n	8002d2a <Serialize_MeasurementData_RawData+0xb4>
    if (type != CMD_MEASUREMENT_DATA_FULL || res->Debug == 0) return;
 8002d28:	bf00      	nop
    }
}
 8002d2a:	3720      	adds	r7, #32
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <Serialize_MeasurementData_3D>:
static void Serialize_MeasurementData_3D(sci_frame_t * frame, argus_results_t const * res, sci_cmd_t type)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08c      	sub	sp, #48	@ 0x30
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	71fb      	strb	r3, [r7, #7]
    if (type == CMD_MEASUREMENT_DATA_1D) return;
 8002d3e:	79fb      	ldrb	r3, [r7, #7]
 8002d40:	2b36      	cmp	r3, #54	@ 0x36
 8002d42:	f000 814f 	beq.w	8002fe4 <Serialize_MeasurementData_3D+0x2b4>

    for (uint_fast8_t x = 0; x < ARGUS_PIXELS_X; ++x)
 8002d46:	2300      	movs	r3, #0
 8002d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d4a:	e033      	b.n	8002db4 <Serialize_MeasurementData_3D+0x84>
    {
        for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d50:	e02a      	b.n	8002da8 <Serialize_MeasurementData_3D+0x78>
        {
            if (!(res->Pixel[x][y].Status & PIXEL_OFF))
 8002d52:	68b8      	ldr	r0, [r7, #8]
 8002d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d58:	461a      	mov	r2, r3
 8002d5a:	0052      	lsls	r2, r2, #1
 8002d5c:	441a      	add	r2, r3
 8002d5e:	0093      	lsls	r3, r2, #2
 8002d60:	461a      	mov	r2, r3
 8002d62:	460b      	mov	r3, r1
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	440b      	add	r3, r1
 8002d68:	011b      	lsls	r3, r3, #4
 8002d6a:	4413      	add	r3, r2
 8002d6c:	4403      	add	r3, r0
 8002d6e:	3330      	adds	r3, #48	@ 0x30
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d113      	bne.n	8002da2 <Serialize_MeasurementData_3D+0x72>
            {
                SCI_Frame_Queue08u(frame, res->Pixel[x][y].Status);
 8002d7a:	68b8      	ldr	r0, [r7, #8]
 8002d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d80:	461a      	mov	r2, r3
 8002d82:	0052      	lsls	r2, r2, #1
 8002d84:	441a      	add	r2, r3
 8002d86:	0093      	lsls	r3, r2, #2
 8002d88:	461a      	mov	r2, r3
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	440b      	add	r3, r1
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	4413      	add	r3, r2
 8002d94:	4403      	add	r3, r0
 8002d96:	3330      	adds	r3, #48	@ 0x30
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f003 f8ef 	bl	8005f80 <SCI_Frame_Queue08u>
        for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 8002da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da4:	3301      	adds	r3, #1
 8002da6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d9d1      	bls.n	8002d52 <Serialize_MeasurementData_3D+0x22>
    for (uint_fast8_t x = 0; x < ARGUS_PIXELS_X; ++x)
 8002dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002db0:	3301      	adds	r3, #1
 8002db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002db6:	2b07      	cmp	r3, #7
 8002db8:	d9c8      	bls.n	8002d4c <Serialize_MeasurementData_3D+0x1c>
            }
        }
    }
    if (!(res->PixelRef.Status & PIXEL_OFF))
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	f893 31b0 	ldrb.w	r3, [r3, #432]	@ 0x1b0
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d106      	bne.n	8002dd6 <Serialize_MeasurementData_3D+0xa6>
    {
        SCI_Frame_Queue08u(frame, res->PixelRef.Status);
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f893 31b0 	ldrb.w	r3, [r3, #432]	@ 0x1b0
 8002dce:	4619      	mov	r1, r3
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f003 f8d5 	bl	8005f80 <SCI_Frame_Queue08u>
    }

    for (uint_fast8_t x = 0; x < ARGUS_PIXELS_X; ++x)
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dda:	e04e      	b.n	8002e7a <Serialize_MeasurementData_3D+0x14a>
    {
        for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 8002ddc:	2300      	movs	r3, #0
 8002dde:	623b      	str	r3, [r7, #32]
 8002de0:	e045      	b.n	8002e6e <Serialize_MeasurementData_3D+0x13e>
        {
            if (!(res->Pixel[x][y].Status & PIXEL_OFF))
 8002de2:	68b8      	ldr	r0, [r7, #8]
 8002de4:	6a3b      	ldr	r3, [r7, #32]
 8002de6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002de8:	461a      	mov	r2, r3
 8002dea:	0052      	lsls	r2, r2, #1
 8002dec:	441a      	add	r2, r3
 8002dee:	0093      	lsls	r3, r2, #2
 8002df0:	461a      	mov	r2, r3
 8002df2:	460b      	mov	r3, r1
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	440b      	add	r3, r1
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	4413      	add	r3, r2
 8002dfc:	4403      	add	r3, r0
 8002dfe:	3330      	adds	r3, #48	@ 0x30
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d12e      	bne.n	8002e68 <Serialize_MeasurementData_3D+0x138>
            {
                SCI_Frame_Queue24s(frame, PARSE_RANGE(res->Pixel[x][y].Range));
 8002e0a:	68b8      	ldr	r0, [r7, #8]
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e10:	461a      	mov	r2, r3
 8002e12:	0052      	lsls	r2, r2, #1
 8002e14:	441a      	add	r2, r3
 8002e16:	0093      	lsls	r3, r2, #2
 8002e18:	461a      	mov	r2, r3
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	440b      	add	r3, r1
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	4413      	add	r3, r2
 8002e24:	4403      	add	r3, r0
 8002e26:	3328      	adds	r3, #40	@ 0x28
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d015      	beq.n	8002e5e <Serialize_MeasurementData_3D+0x12e>
 8002e32:	68b8      	ldr	r0, [r7, #8]
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e38:	461a      	mov	r2, r3
 8002e3a:	0052      	lsls	r2, r2, #1
 8002e3c:	441a      	add	r2, r3
 8002e3e:	0093      	lsls	r3, r2, #2
 8002e40:	461a      	mov	r2, r3
 8002e42:	460b      	mov	r3, r1
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	440b      	add	r3, r1
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	4413      	add	r3, r2
 8002e4c:	4403      	add	r3, r0
 8002e4e:	3328      	adds	r3, #40	@ 0x28
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2108      	movs	r1, #8
 8002e54:	4618      	mov	r0, r3
 8002e56:	f010 fff3 	bl	8013e40 <fp_rnds>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	e000      	b.n	8002e60 <Serialize_MeasurementData_3D+0x130>
 8002e5e:	4b63      	ldr	r3, [pc, #396]	@ (8002fec <Serialize_MeasurementData_3D+0x2bc>)
 8002e60:	4619      	mov	r1, r3
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f003 f95d 	bl	8006122 <SCI_Frame_Queue24s>
        for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	623b      	str	r3, [r7, #32]
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	2b03      	cmp	r3, #3
 8002e72:	d9b6      	bls.n	8002de2 <Serialize_MeasurementData_3D+0xb2>
    for (uint_fast8_t x = 0; x < ARGUS_PIXELS_X; ++x)
 8002e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e76:	3301      	adds	r3, #1
 8002e78:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7c:	2b07      	cmp	r3, #7
 8002e7e:	d9ad      	bls.n	8002ddc <Serialize_MeasurementData_3D+0xac>
            }
        }
    }
    if (!(res->PixelRef.Status & PIXEL_OFF))
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	f893 31b0 	ldrb.w	r3, [r3, #432]	@ 0x1b0
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d114      	bne.n	8002eb8 <Serialize_MeasurementData_3D+0x188>
    {
        SCI_Frame_Queue24s(frame, PARSE_RANGE(res->PixelRef.Range));
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 8002e94:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d008      	beq.n	8002eae <Serialize_MeasurementData_3D+0x17e>
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 8002ea2:	2108      	movs	r1, #8
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f010 ffcb 	bl	8013e40 <fp_rnds>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	e000      	b.n	8002eb0 <Serialize_MeasurementData_3D+0x180>
 8002eae:	4b4f      	ldr	r3, [pc, #316]	@ (8002fec <Serialize_MeasurementData_3D+0x2bc>)
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f003 f935 	bl	8006122 <SCI_Frame_Queue24s>
    }

    for (uint_fast8_t x = 0; x < ARGUS_PIXELS_X; ++x)
 8002eb8:	2300      	movs	r3, #0
 8002eba:	61fb      	str	r3, [r7, #28]
 8002ebc:	e033      	b.n	8002f26 <Serialize_MeasurementData_3D+0x1f6>
    {
        for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61bb      	str	r3, [r7, #24]
 8002ec2:	e02a      	b.n	8002f1a <Serialize_MeasurementData_3D+0x1ea>
        {
            if (!(res->Pixel[x][y].Status & PIXEL_OFF))
 8002ec4:	68b8      	ldr	r0, [r7, #8]
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	69f9      	ldr	r1, [r7, #28]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	0052      	lsls	r2, r2, #1
 8002ece:	441a      	add	r2, r3
 8002ed0:	0093      	lsls	r3, r2, #2
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	440b      	add	r3, r1
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	4413      	add	r3, r2
 8002ede:	4403      	add	r3, r0
 8002ee0:	3330      	adds	r3, #48	@ 0x30
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d113      	bne.n	8002f14 <Serialize_MeasurementData_3D+0x1e4>
            {
                SCI_Frame_Queue16u(frame, res->Pixel[x][y].Amplitude);
 8002eec:	68b8      	ldr	r0, [r7, #8]
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	69f9      	ldr	r1, [r7, #28]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	0052      	lsls	r2, r2, #1
 8002ef6:	441a      	add	r2, r3
 8002ef8:	0093      	lsls	r3, r2, #2
 8002efa:	461a      	mov	r2, r3
 8002efc:	460b      	mov	r3, r1
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	440b      	add	r3, r1
 8002f02:	011b      	lsls	r3, r3, #4
 8002f04:	4413      	add	r3, r2
 8002f06:	4403      	add	r3, r0
 8002f08:	332e      	adds	r3, #46	@ 0x2e
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f003 f85b 	bl	8005fca <SCI_Frame_Queue16u>
        for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	3301      	adds	r3, #1
 8002f18:	61bb      	str	r3, [r7, #24]
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	d9d1      	bls.n	8002ec4 <Serialize_MeasurementData_3D+0x194>
    for (uint_fast8_t x = 0; x < ARGUS_PIXELS_X; ++x)
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	3301      	adds	r3, #1
 8002f24:	61fb      	str	r3, [r7, #28]
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	2b07      	cmp	r3, #7
 8002f2a:	d9c8      	bls.n	8002ebe <Serialize_MeasurementData_3D+0x18e>
            }
        }
    }
    if (!(res->PixelRef.Status & PIXEL_OFF))
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f893 31b0 	ldrb.w	r3, [r3, #432]	@ 0x1b0
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d106      	bne.n	8002f48 <Serialize_MeasurementData_3D+0x218>
    {
        SCI_Frame_Queue16u(frame, res->PixelRef.Amplitude);
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	f8b3 31ae 	ldrh.w	r3, [r3, #430]	@ 0x1ae
 8002f40:	4619      	mov	r1, r3
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f003 f841 	bl	8005fca <SCI_Frame_Queue16u>
    }

    if (res->Debug != 0) // if debug mode is enabled
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d049      	beq.n	8002fe6 <Serialize_MeasurementData_3D+0x2b6>
    {
        for (uint_fast8_t x = 0; x < ARGUS_PIXELS_X; ++x)
 8002f52:	2300      	movs	r3, #0
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	e033      	b.n	8002fc0 <Serialize_MeasurementData_3D+0x290>
        {
            for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 8002f58:	2300      	movs	r3, #0
 8002f5a:	613b      	str	r3, [r7, #16]
 8002f5c:	e02a      	b.n	8002fb4 <Serialize_MeasurementData_3D+0x284>
            {
                if (!(res->Pixel[x][y].Status & PIXEL_OFF))
 8002f5e:	68b8      	ldr	r0, [r7, #8]
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	6979      	ldr	r1, [r7, #20]
 8002f64:	461a      	mov	r2, r3
 8002f66:	0052      	lsls	r2, r2, #1
 8002f68:	441a      	add	r2, r3
 8002f6a:	0093      	lsls	r3, r2, #2
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	460b      	mov	r3, r1
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	440b      	add	r3, r1
 8002f74:	011b      	lsls	r3, r3, #4
 8002f76:	4413      	add	r3, r2
 8002f78:	4403      	add	r3, r0
 8002f7a:	3330      	adds	r3, #48	@ 0x30
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d113      	bne.n	8002fae <Serialize_MeasurementData_3D+0x27e>
                {
                    SCI_Frame_Queue16u(frame, res->Pixel[x][y].Phase);
 8002f86:	68b8      	ldr	r0, [r7, #8]
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	6979      	ldr	r1, [r7, #20]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	0052      	lsls	r2, r2, #1
 8002f90:	441a      	add	r2, r3
 8002f92:	0093      	lsls	r3, r2, #2
 8002f94:	461a      	mov	r2, r3
 8002f96:	460b      	mov	r3, r1
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	440b      	add	r3, r1
 8002f9c:	011b      	lsls	r3, r3, #4
 8002f9e:	4413      	add	r3, r2
 8002fa0:	4403      	add	r3, r0
 8002fa2:	332c      	adds	r3, #44	@ 0x2c
 8002fa4:	881b      	ldrh	r3, [r3, #0]
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f003 f80e 	bl	8005fca <SCI_Frame_Queue16u>
            for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	d9d1      	bls.n	8002f5e <Serialize_MeasurementData_3D+0x22e>
        for (uint_fast8_t x = 0; x < ARGUS_PIXELS_X; ++x)
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	2b07      	cmp	r3, #7
 8002fc4:	d9c8      	bls.n	8002f58 <Serialize_MeasurementData_3D+0x228>
                }
            }
        }
        if (!(res->PixelRef.Status & PIXEL_OFF))
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	f893 31b0 	ldrb.w	r3, [r3, #432]	@ 0x1b0
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d108      	bne.n	8002fe6 <Serialize_MeasurementData_3D+0x2b6>
        {
            SCI_Frame_Queue16u(frame, res->PixelRef.Phase);
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	@ 0x1ac
 8002fda:	4619      	mov	r1, r3
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f002 fff4 	bl	8005fca <SCI_Frame_Queue16u>
 8002fe2:	e000      	b.n	8002fe6 <Serialize_MeasurementData_3D+0x2b6>
    if (type == CMD_MEASUREMENT_DATA_1D) return;
 8002fe4:	bf00      	nop
        }
    }
}
 8002fe6:	3730      	adds	r7, #48	@ 0x30
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	007fffff 	.word	0x007fffff

08002ff0 <Serialize_MeasurementData_1D>:

static void Serialize_MeasurementData_1D(sci_frame_t * frame, argus_results_t const * res, sci_cmd_t type)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	71fb      	strb	r3, [r7, #7]
    if (type == CMD_MEASUREMENT_DATA_3D) return;
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	2b34      	cmp	r3, #52	@ 0x34
 8003002:	d023      	beq.n	800304c <Serialize_MeasurementData_1D+0x5c>

    SCI_Frame_Queue24s(frame, PARSE_RANGE(res->Bin.Range));
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 800300a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800300e:	4293      	cmp	r3, r2
 8003010:	d008      	beq.n	8003024 <Serialize_MeasurementData_1D+0x34>
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 8003018:	2108      	movs	r1, #8
 800301a:	4618      	mov	r0, r3
 800301c:	f010 ff10 	bl	8013e40 <fp_rnds>
 8003020:	4603      	mov	r3, r0
 8003022:	e000      	b.n	8003026 <Serialize_MeasurementData_1D+0x36>
 8003024:	4b0b      	ldr	r3, [pc, #44]	@ (8003054 <Serialize_MeasurementData_1D+0x64>)
 8003026:	4619      	mov	r1, r3
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f003 f87a 	bl	8006122 <SCI_Frame_Queue24s>
    SCI_Frame_Queue16u(frame, res->Bin.Amplitude);
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f8b3 31b8 	ldrh.w	r3, [r3, #440]	@ 0x1b8
 8003034:	4619      	mov	r1, r3
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f002 ffc7 	bl	8005fca <SCI_Frame_Queue16u>
    SCI_Frame_Queue08u(frame, res->Bin.SignalQuality);
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f893 31ba 	ldrb.w	r3, [r3, #442]	@ 0x1ba
 8003042:	4619      	mov	r1, r3
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f002 ff9b 	bl	8005f80 <SCI_Frame_Queue08u>
 800304a:	e000      	b.n	800304e <Serialize_MeasurementData_1D+0x5e>
    if (type == CMD_MEASUREMENT_DATA_3D) return;
 800304c:	bf00      	nop
}
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	007fffff 	.word	0x007fffff

08003058 <Serialize_MeasurementData_Aux>:
static void Serialize_MeasurementData_Aux(sci_frame_t * frame, argus_results_t const * res, sci_cmd_t type)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	4613      	mov	r3, r2
 8003064:	71fb      	strb	r3, [r7, #7]
    if (type != CMD_MEASUREMENT_DATA_FULL && res->Debug == 0) return;
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	2b32      	cmp	r3, #50	@ 0x32
 800306a:	d004      	beq.n	8003076 <Serialize_MeasurementData_Aux+0x1e>
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 8003072:	2b00      	cmp	r3, #0
 8003074:	d031      	beq.n	80030da <Serialize_MeasurementData_Aux+0x82>

    SCI_Frame_Queue16u(frame, res->Auxiliary.VDD);
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	f8b3 31bc 	ldrh.w	r3, [r3, #444]	@ 0x1bc
 800307c:	4619      	mov	r1, r3
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f002 ffa3 	bl	8005fca <SCI_Frame_Queue16u>
    SCI_Frame_Queue16u(frame, res->Auxiliary.VDDL);
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f8b3 31c2 	ldrh.w	r3, [r3, #450]	@ 0x1c2
 800308a:	4619      	mov	r1, r3
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f002 ff9c 	bl	8005fca <SCI_Frame_Queue16u>
    SCI_Frame_Queue16u(frame, res->Auxiliary.VSUB);
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f8b3 31c0 	ldrh.w	r3, [r3, #448]	@ 0x1c0
 8003098:	4619      	mov	r1, r3
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f002 ff95 	bl	8005fca <SCI_Frame_Queue16u>
    SCI_Frame_Queue16u(frame, res->Auxiliary.IAPD);
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f8b3 31c4 	ldrh.w	r3, [r3, #452]	@ 0x1c4
 80030a6:	4619      	mov	r1, r3
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f002 ff8e 	bl	8005fca <SCI_Frame_Queue16u>
    SCI_Frame_Queue16s(frame, res->Auxiliary.TEMP);
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	@ 0x1be
 80030b4:	4619      	mov	r1, r3
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f003 f81a 	bl	80060f0 <SCI_Frame_Queue16s>
    SCI_Frame_Queue16u(frame, res->Auxiliary.BGL);
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	@ 0x1c6
 80030c2:	4619      	mov	r1, r3
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f002 ff80 	bl	8005fca <SCI_Frame_Queue16u>
    SCI_Frame_Queue16u(frame, res->Auxiliary.SNA);
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	f8b3 31c8 	ldrh.w	r3, [r3, #456]	@ 0x1c8
 80030d0:	4619      	mov	r1, r3
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f002 ff79 	bl	8005fca <SCI_Frame_Queue16u>
 80030d8:	e000      	b.n	80030dc <Serialize_MeasurementData_Aux+0x84>
    if (type != CMD_MEASUREMENT_DATA_FULL && res->Debug == 0) return;
 80030da:	bf00      	nop
}
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <Serialize_MeasurementData_Debug>:
static void Serialize_MeasurementData_Debug(sci_frame_t * frame, argus_results_t const * res, sci_cmd_t type)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b086      	sub	sp, #24
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	60f8      	str	r0, [r7, #12]
 80030ea:	60b9      	str	r1, [r7, #8]
 80030ec:	4613      	mov	r3, r2
 80030ee:	71fb      	strb	r3, [r7, #7]
    (void) type; // unused
    if (res->Debug == 0) return;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d069      	beq.n	80031ce <Serialize_MeasurementData_Debug+0xec>

    SCI_Frame_Queue32u(frame, res->Frame.IntegrationTime);
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	4619      	mov	r1, r3
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f002 ffa9 	bl	8006058 <SCI_Frame_Queue32u>
    SCI_Frame_Queue08u(frame, res->Frame.BiasCurrent);
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800310c:	4619      	mov	r1, r3
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f002 ff36 	bl	8005f80 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08s(frame, res->Frame.PllOffset);
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f993 3024 	ldrsb.w	r3, [r3, #36]	@ 0x24
 800311a:	4619      	mov	r1, r3
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f002 ffbf 	bl	80060a0 <SCI_Frame_Queue08s>
    SCI_Frame_Queue08u(frame, res->Frame.PllCtrlCur);
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003128:	4619      	mov	r1, r3
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f002 ff28 	bl	8005f80 <SCI_Frame_Queue08u>

    SCI_Frame_Queue16u(frame, res->Debug->DCAAmplitude);
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	4619      	mov	r1, r3
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f002 ff45 	bl	8005fca <SCI_Frame_Queue16u>

    /* Crosstalk Values */
    for (uint_fast8_t y = 0; y < (ARGUS_PIXELS_Y >> 1); ++y)
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	e01c      	b.n	8003180 <Serialize_MeasurementData_Debug+0x9e>
    {
        SCI_Frame_Queue16s(frame, res->Debug->XtalkPredictor[y].dS);
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	f8d3 21cc 	ldr.w	r2, [r3, #460]	@ 0x1cc
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	3384      	adds	r3, #132	@ 0x84
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003158:	4619      	mov	r1, r3
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f002 ffc8 	bl	80060f0 <SCI_Frame_Queue16s>
        SCI_Frame_Queue16s(frame, res->Debug->XtalkPredictor[y].dC);
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f8d3 21cc 	ldr.w	r2, [r3, #460]	@ 0x1cc
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	3384      	adds	r3, #132	@ 0x84
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003172:	4619      	mov	r1, r3
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f002 ffbb 	bl	80060f0 <SCI_Frame_Queue16s>
    for (uint_fast8_t y = 0; y < (ARGUS_PIXELS_Y >> 1); ++y)
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	3301      	adds	r3, #1
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d9df      	bls.n	8003146 <Serialize_MeasurementData_Debug+0x64>
    }
    for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 8003186:	2300      	movs	r3, #0
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	e01c      	b.n	80031c6 <Serialize_MeasurementData_Debug+0xe4>
    {
        SCI_Frame_Queue16s(frame, res->Debug->XtalkMonitor[y].dS);
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f8d3 21cc 	ldr.w	r2, [r3, #460]	@ 0x1cc
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	3386      	adds	r3, #134	@ 0x86
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800319e:	4619      	mov	r1, r3
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f002 ffa5 	bl	80060f0 <SCI_Frame_Queue16s>
        SCI_Frame_Queue16s(frame, res->Debug->XtalkMonitor[y].dC);
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	f8d3 21cc 	ldr.w	r2, [r3, #460]	@ 0x1cc
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	3386      	adds	r3, #134	@ 0x86
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80031b8:	4619      	mov	r1, r3
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f002 ff98 	bl	80060f0 <SCI_Frame_Queue16s>
    for (uint_fast8_t y = 0; y < ARGUS_PIXELS_Y; ++y)
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	3301      	adds	r3, #1
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	2b03      	cmp	r3, #3
 80031ca:	d9df      	bls.n	800318c <Serialize_MeasurementData_Debug+0xaa>
 80031cc:	e000      	b.n	80031d0 <Serialize_MeasurementData_Debug+0xee>
    if (res->Debug == 0) return;
 80031ce:	bf00      	nop
    }
}
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
	...

080031d8 <Serialize_MeasurementData>:
static void Serialize_MeasurementData(sci_frame_t * frame, argus_results_t const * res, sci_cmd_t type)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	4613      	mov	r3, r2
 80031e4:	71fb      	strb	r3, [r7, #7]
    assert((type == CMD_MEASUREMENT_DATA_FULL) ||
 80031e6:	79fb      	ldrb	r3, [r7, #7]
 80031e8:	2b32      	cmp	r3, #50	@ 0x32
 80031ea:	d015      	beq.n	8003218 <Serialize_MeasurementData+0x40>
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	2b31      	cmp	r3, #49	@ 0x31
 80031f0:	d012      	beq.n	8003218 <Serialize_MeasurementData+0x40>
 80031f2:	79fb      	ldrb	r3, [r7, #7]
 80031f4:	2b34      	cmp	r3, #52	@ 0x34
 80031f6:	d00f      	beq.n	8003218 <Serialize_MeasurementData+0x40>
 80031f8:	79fb      	ldrb	r3, [r7, #7]
 80031fa:	2b33      	cmp	r3, #51	@ 0x33
 80031fc:	d00c      	beq.n	8003218 <Serialize_MeasurementData+0x40>
 80031fe:	79fb      	ldrb	r3, [r7, #7]
 8003200:	2b36      	cmp	r3, #54	@ 0x36
 8003202:	d009      	beq.n	8003218 <Serialize_MeasurementData+0x40>
 8003204:	79fb      	ldrb	r3, [r7, #7]
 8003206:	2b35      	cmp	r3, #53	@ 0x35
 8003208:	d006      	beq.n	8003218 <Serialize_MeasurementData+0x40>
 800320a:	4b2c      	ldr	r3, [pc, #176]	@ (80032bc <Serialize_MeasurementData+0xe4>)
 800320c:	4a2c      	ldr	r2, [pc, #176]	@ (80032c0 <Serialize_MeasurementData+0xe8>)
 800320e:	f240 1103 	movw	r1, #259	@ 0x103
 8003212:	482c      	ldr	r0, [pc, #176]	@ (80032c4 <Serialize_MeasurementData+0xec>)
 8003214:	f004 fb48 	bl	80078a8 <__assert_func>

    /* For message types w/ DEBUG, the res.Debug structure must be available!
     * For message types w/o DEBUG, the res.Debug structure must be null!
     * DEBUG types are odd, i.e. check for (type & 0x01).
     * Not DEBUG types are even, i.e. check for !(type & 0x01). */
    assert(((type & 0x01) && (res->Debug != 0)) || (!(type & 0x01) && (res->Debug == 0)));
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d004      	beq.n	800322c <Serialize_MeasurementData+0x54>
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 8003228:	2b00      	cmp	r3, #0
 800322a:	d110      	bne.n	800324e <Serialize_MeasurementData+0x76>
 800322c:	79fb      	ldrb	r3, [r7, #7]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d104      	bne.n	8003240 <Serialize_MeasurementData+0x68>
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 800323c:	2b00      	cmp	r3, #0
 800323e:	d006      	beq.n	800324e <Serialize_MeasurementData+0x76>
 8003240:	4b21      	ldr	r3, [pc, #132]	@ (80032c8 <Serialize_MeasurementData+0xf0>)
 8003242:	4a1f      	ldr	r2, [pc, #124]	@ (80032c0 <Serialize_MeasurementData+0xe8>)
 8003244:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8003248:	481e      	ldr	r0, [pc, #120]	@ (80032c4 <Serialize_MeasurementData+0xec>)
 800324a:	f004 fb2d 	bl	80078a8 <__assert_func>

    /* remove _DEBUG, its determined by res.Debug */
    if (type & 0x01) type++;
 800324e:	79fb      	ldrb	r3, [r7, #7]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	d002      	beq.n	800325e <Serialize_MeasurementData+0x86>
 8003258:	79fb      	ldrb	r3, [r7, #7]
 800325a:	3301      	adds	r3, #1
 800325c:	71fb      	strb	r3, [r7, #7]

    Serialize_MeasurementData_Generic(frame, res, type);
 800325e:	79fb      	ldrb	r3, [r7, #7]
 8003260:	461a      	mov	r2, r3
 8003262:	68b9      	ldr	r1, [r7, #8]
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f7ff fc57 	bl	8002b18 <Serialize_MeasurementData_Generic>
    Serialize_MeasurementData_FrameConfig(frame, res, type);
 800326a:	79fb      	ldrb	r3, [r7, #7]
 800326c:	461a      	mov	r2, r3
 800326e:	68b9      	ldr	r1, [r7, #8]
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f7ff fc7f 	bl	8002b74 <Serialize_MeasurementData_FrameConfig>
    Serialize_MeasurementData_RawData(frame, res, type);
 8003276:	79fb      	ldrb	r3, [r7, #7]
 8003278:	461a      	mov	r2, r3
 800327a:	68b9      	ldr	r1, [r7, #8]
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f7ff fcfa 	bl	8002c76 <Serialize_MeasurementData_RawData>
    Serialize_MeasurementData_3D(frame, res, type);
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	461a      	mov	r2, r3
 8003286:	68b9      	ldr	r1, [r7, #8]
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f7ff fd51 	bl	8002d30 <Serialize_MeasurementData_3D>
    Serialize_MeasurementData_1D(frame, res, type);
 800328e:	79fb      	ldrb	r3, [r7, #7]
 8003290:	461a      	mov	r2, r3
 8003292:	68b9      	ldr	r1, [r7, #8]
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f7ff feab 	bl	8002ff0 <Serialize_MeasurementData_1D>
    Serialize_MeasurementData_Aux(frame, res, type);
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	461a      	mov	r2, r3
 800329e:	68b9      	ldr	r1, [r7, #8]
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f7ff fed9 	bl	8003058 <Serialize_MeasurementData_Aux>
    Serialize_MeasurementData_Debug(frame, res, type);
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	461a      	mov	r2, r3
 80032aa:	68b9      	ldr	r1, [r7, #8]
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f7ff ff18 	bl	80030e2 <Serialize_MeasurementData_Debug>
}
 80032b2:	bf00      	nop
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	0802cbbc 	.word	0x0802cbbc
 80032c0:	0802dbe4 	.word	0x0802dbe4
 80032c4:	0802cb88 	.word	0x0802cb88
 80032c8:	0802ccb0 	.word	0x0802ccb0

080032cc <TxCmd_MeasurementDataFullDebug>:
/*******************************************************************************
 * Command Functions
 ******************************************************************************/

static status_t TxCmd_MeasurementDataFullDebug(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	607a      	str	r2, [r7, #4]
 80032d6:	603b      	str	r3, [r7, #0]
 80032d8:	4603      	mov	r3, r0
 80032da:	73fb      	strb	r3, [r7, #15]
    (void)param;
    (void)deviceID; /* deviceID is selected through the 'data' parameter, which corresponds to the desired device */
    assert(frame != 0);
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d106      	bne.n	80032f0 <TxCmd_MeasurementDataFullDebug+0x24>
 80032e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003310 <TxCmd_MeasurementDataFullDebug+0x44>)
 80032e4:	4a0b      	ldr	r2, [pc, #44]	@ (8003314 <TxCmd_MeasurementDataFullDebug+0x48>)
 80032e6:	f240 1125 	movw	r1, #293	@ 0x125
 80032ea:	480b      	ldr	r0, [pc, #44]	@ (8003318 <TxCmd_MeasurementDataFullDebug+0x4c>)
 80032ec:	f004 fadc 	bl	80078a8 <__assert_func>
    if (data == 0) return ERROR_INVALID_ARGUMENT;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d102      	bne.n	80032fc <TxCmd_MeasurementDataFullDebug+0x30>
 80032f6:	f06f 0304 	mvn.w	r3, #4
 80032fa:	e005      	b.n	8003308 <TxCmd_MeasurementDataFullDebug+0x3c>
    Serialize_MeasurementData(frame, (argus_results_t const *) data, CMD_MEASUREMENT_DATA_FULL_DEBUG);
 80032fc:	2231      	movs	r2, #49	@ 0x31
 80032fe:	6839      	ldr	r1, [r7, #0]
 8003300:	68b8      	ldr	r0, [r7, #8]
 8003302:	f7ff ff69 	bl	80031d8 <Serialize_MeasurementData>
    return STATUS_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	0802cd00 	.word	0x0802cd00
 8003314:	0802dc00 	.word	0x0802dc00
 8003318:	0802cb88 	.word	0x0802cb88

0800331c <TxCmd_MeasurementDataFull>:

static status_t TxCmd_MeasurementDataFull(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	60b9      	str	r1, [r7, #8]
 8003324:	607a      	str	r2, [r7, #4]
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	4603      	mov	r3, r0
 800332a:	73fb      	strb	r3, [r7, #15]
    (void)param;
    (void)deviceID; /* deviceID is selected through the 'data' parameter, which corresponds to the desired device */
    assert(frame != 0);
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d106      	bne.n	8003340 <TxCmd_MeasurementDataFull+0x24>
 8003332:	4b0b      	ldr	r3, [pc, #44]	@ (8003360 <TxCmd_MeasurementDataFull+0x44>)
 8003334:	4a0b      	ldr	r2, [pc, #44]	@ (8003364 <TxCmd_MeasurementDataFull+0x48>)
 8003336:	f240 112f 	movw	r1, #303	@ 0x12f
 800333a:	480b      	ldr	r0, [pc, #44]	@ (8003368 <TxCmd_MeasurementDataFull+0x4c>)
 800333c:	f004 fab4 	bl	80078a8 <__assert_func>
    if (data == 0) return ERROR_INVALID_ARGUMENT;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d102      	bne.n	800334c <TxCmd_MeasurementDataFull+0x30>
 8003346:	f06f 0304 	mvn.w	r3, #4
 800334a:	e005      	b.n	8003358 <TxCmd_MeasurementDataFull+0x3c>
    Serialize_MeasurementData(frame, (argus_results_t const *) data, CMD_MEASUREMENT_DATA_FULL);
 800334c:	2232      	movs	r2, #50	@ 0x32
 800334e:	6839      	ldr	r1, [r7, #0]
 8003350:	68b8      	ldr	r0, [r7, #8]
 8003352:	f7ff ff41 	bl	80031d8 <Serialize_MeasurementData>
    return STATUS_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	0802cd00 	.word	0x0802cd00
 8003364:	0802dc20 	.word	0x0802dc20
 8003368:	0802cb88 	.word	0x0802cb88

0800336c <TxCmd_MeasurementData3DDebug>:

static status_t TxCmd_MeasurementData3DDebug(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	607a      	str	r2, [r7, #4]
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	4603      	mov	r3, r0
 800337a:	73fb      	strb	r3, [r7, #15]
    (void)param;
    (void)deviceID; /* deviceID is selected through the 'data' parameter, which corresponds to the desired device */
    assert(frame != 0);
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d106      	bne.n	8003390 <TxCmd_MeasurementData3DDebug+0x24>
 8003382:	4b0b      	ldr	r3, [pc, #44]	@ (80033b0 <TxCmd_MeasurementData3DDebug+0x44>)
 8003384:	4a0b      	ldr	r2, [pc, #44]	@ (80033b4 <TxCmd_MeasurementData3DDebug+0x48>)
 8003386:	f240 1139 	movw	r1, #313	@ 0x139
 800338a:	480b      	ldr	r0, [pc, #44]	@ (80033b8 <TxCmd_MeasurementData3DDebug+0x4c>)
 800338c:	f004 fa8c 	bl	80078a8 <__assert_func>
    if (data == 0) return ERROR_INVALID_ARGUMENT;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d102      	bne.n	800339c <TxCmd_MeasurementData3DDebug+0x30>
 8003396:	f06f 0304 	mvn.w	r3, #4
 800339a:	e005      	b.n	80033a8 <TxCmd_MeasurementData3DDebug+0x3c>
    Serialize_MeasurementData(frame, (argus_results_t const *) data, CMD_MEASUREMENT_DATA_3D_DEBUG);
 800339c:	2233      	movs	r2, #51	@ 0x33
 800339e:	6839      	ldr	r1, [r7, #0]
 80033a0:	68b8      	ldr	r0, [r7, #8]
 80033a2:	f7ff ff19 	bl	80031d8 <Serialize_MeasurementData>
    return STATUS_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	0802cd00 	.word	0x0802cd00
 80033b4:	0802dc3c 	.word	0x0802dc3c
 80033b8:	0802cb88 	.word	0x0802cb88

080033bc <TxCmd_MeasurementData3D>:

static status_t TxCmd_MeasurementData3D(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	607a      	str	r2, [r7, #4]
 80033c6:	603b      	str	r3, [r7, #0]
 80033c8:	4603      	mov	r3, r0
 80033ca:	73fb      	strb	r3, [r7, #15]
    (void)param;
    (void)deviceID; /* deviceID is selected through the 'data' parameter, which corresponds to the desired device */
    assert(frame != 0);
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d106      	bne.n	80033e0 <TxCmd_MeasurementData3D+0x24>
 80033d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003400 <TxCmd_MeasurementData3D+0x44>)
 80033d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003404 <TxCmd_MeasurementData3D+0x48>)
 80033d6:	f240 1143 	movw	r1, #323	@ 0x143
 80033da:	480b      	ldr	r0, [pc, #44]	@ (8003408 <TxCmd_MeasurementData3D+0x4c>)
 80033dc:	f004 fa64 	bl	80078a8 <__assert_func>
    if (data == 0) return ERROR_INVALID_ARGUMENT;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d102      	bne.n	80033ec <TxCmd_MeasurementData3D+0x30>
 80033e6:	f06f 0304 	mvn.w	r3, #4
 80033ea:	e005      	b.n	80033f8 <TxCmd_MeasurementData3D+0x3c>
    Serialize_MeasurementData(frame, (argus_results_t const *) data, CMD_MEASUREMENT_DATA_3D);
 80033ec:	2234      	movs	r2, #52	@ 0x34
 80033ee:	6839      	ldr	r1, [r7, #0]
 80033f0:	68b8      	ldr	r0, [r7, #8]
 80033f2:	f7ff fef1 	bl	80031d8 <Serialize_MeasurementData>
    return STATUS_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	0802cd00 	.word	0x0802cd00
 8003404:	0802dc5c 	.word	0x0802dc5c
 8003408:	0802cb88 	.word	0x0802cb88

0800340c <TxCmd_MeasurementData1DDebug>:

static status_t TxCmd_MeasurementData1DDebug(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	60b9      	str	r1, [r7, #8]
 8003414:	607a      	str	r2, [r7, #4]
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	4603      	mov	r3, r0
 800341a:	73fb      	strb	r3, [r7, #15]
    (void)param;
    (void)deviceID; /* deviceID is selected through the 'data' parameter, which corresponds to the desired device */
    assert(frame != 0);
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d106      	bne.n	8003430 <TxCmd_MeasurementData1DDebug+0x24>
 8003422:	4b0b      	ldr	r3, [pc, #44]	@ (8003450 <TxCmd_MeasurementData1DDebug+0x44>)
 8003424:	4a0b      	ldr	r2, [pc, #44]	@ (8003454 <TxCmd_MeasurementData1DDebug+0x48>)
 8003426:	f240 114d 	movw	r1, #333	@ 0x14d
 800342a:	480b      	ldr	r0, [pc, #44]	@ (8003458 <TxCmd_MeasurementData1DDebug+0x4c>)
 800342c:	f004 fa3c 	bl	80078a8 <__assert_func>
    if (data == 0) return ERROR_INVALID_ARGUMENT;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d102      	bne.n	800343c <TxCmd_MeasurementData1DDebug+0x30>
 8003436:	f06f 0304 	mvn.w	r3, #4
 800343a:	e005      	b.n	8003448 <TxCmd_MeasurementData1DDebug+0x3c>
    Serialize_MeasurementData(frame, (argus_results_t const *) data, CMD_MEASUREMENT_DATA_1D_DEBUG);
 800343c:	2235      	movs	r2, #53	@ 0x35
 800343e:	6839      	ldr	r1, [r7, #0]
 8003440:	68b8      	ldr	r0, [r7, #8]
 8003442:	f7ff fec9 	bl	80031d8 <Serialize_MeasurementData>
    return STATUS_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	0802cd00 	.word	0x0802cd00
 8003454:	0802dc74 	.word	0x0802dc74
 8003458:	0802cb88 	.word	0x0802cb88

0800345c <TxCmd_MeasurementData1D>:

static status_t TxCmd_MeasurementData1D(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_data_t data)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	60b9      	str	r1, [r7, #8]
 8003464:	607a      	str	r2, [r7, #4]
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	4603      	mov	r3, r0
 800346a:	73fb      	strb	r3, [r7, #15]
    (void)param;
    (void)deviceID; /* deviceID is selected through the 'data' parameter, which corresponds to the desired device */
    assert(frame != 0);
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d106      	bne.n	8003480 <TxCmd_MeasurementData1D+0x24>
 8003472:	4b0b      	ldr	r3, [pc, #44]	@ (80034a0 <TxCmd_MeasurementData1D+0x44>)
 8003474:	4a0b      	ldr	r2, [pc, #44]	@ (80034a4 <TxCmd_MeasurementData1D+0x48>)
 8003476:	f240 1157 	movw	r1, #343	@ 0x157
 800347a:	480b      	ldr	r0, [pc, #44]	@ (80034a8 <TxCmd_MeasurementData1D+0x4c>)
 800347c:	f004 fa14 	bl	80078a8 <__assert_func>
    if (data == 0) return ERROR_INVALID_ARGUMENT;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d102      	bne.n	800348c <TxCmd_MeasurementData1D+0x30>
 8003486:	f06f 0304 	mvn.w	r3, #4
 800348a:	e005      	b.n	8003498 <TxCmd_MeasurementData1D+0x3c>
    Serialize_MeasurementData(frame, (argus_results_t const *) data, CMD_MEASUREMENT_DATA_1D);
 800348c:	2236      	movs	r2, #54	@ 0x36
 800348e:	6839      	ldr	r1, [r7, #0]
 8003490:	68b8      	ldr	r0, [r7, #8]
 8003492:	f7ff fea1 	bl	80031d8 <Serialize_MeasurementData>
    return STATUS_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	0802cd00 	.word	0x0802cd00
 80034a4:	0802dc94 	.word	0x0802dc94
 80034a8:	0802cb88 	.word	0x0802cb88

080034ac <ExplorerAPI_InitData>:

/*******************************************************************************
 * Init Code
 ******************************************************************************/
status_t ExplorerAPI_InitData(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
    status_t
    status = SCI_SetTxCommand(CMD_MEASUREMENT_DATA_FULL_DEBUG, TxCmd_MeasurementDataFullDebug);
 80034b2:	4920      	ldr	r1, [pc, #128]	@ (8003534 <ExplorerAPI_InitData+0x88>)
 80034b4:	2031      	movs	r0, #49	@ 0x31
 80034b6:	f001 fae8 	bl	8004a8a <SCI_SetTxCommand>
 80034ba:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	da01      	bge.n	80034c6 <ExplorerAPI_InitData+0x1a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	e032      	b.n	800352c <ExplorerAPI_InitData+0x80>
    status = SCI_SetTxCommand(CMD_MEASUREMENT_DATA_FULL, TxCmd_MeasurementDataFull);
 80034c6:	491c      	ldr	r1, [pc, #112]	@ (8003538 <ExplorerAPI_InitData+0x8c>)
 80034c8:	2032      	movs	r0, #50	@ 0x32
 80034ca:	f001 fade 	bl	8004a8a <SCI_SetTxCommand>
 80034ce:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	da01      	bge.n	80034da <ExplorerAPI_InitData+0x2e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	e028      	b.n	800352c <ExplorerAPI_InitData+0x80>
    status = SCI_SetTxCommand(CMD_MEASUREMENT_DATA_1D_DEBUG, TxCmd_MeasurementData1DDebug);
 80034da:	4918      	ldr	r1, [pc, #96]	@ (800353c <ExplorerAPI_InitData+0x90>)
 80034dc:	2035      	movs	r0, #53	@ 0x35
 80034de:	f001 fad4 	bl	8004a8a <SCI_SetTxCommand>
 80034e2:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	da01      	bge.n	80034ee <ExplorerAPI_InitData+0x42>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	e01e      	b.n	800352c <ExplorerAPI_InitData+0x80>
    status = SCI_SetTxCommand(CMD_MEASUREMENT_DATA_1D, TxCmd_MeasurementData1D);
 80034ee:	4914      	ldr	r1, [pc, #80]	@ (8003540 <ExplorerAPI_InitData+0x94>)
 80034f0:	2036      	movs	r0, #54	@ 0x36
 80034f2:	f001 faca 	bl	8004a8a <SCI_SetTxCommand>
 80034f6:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	da01      	bge.n	8003502 <ExplorerAPI_InitData+0x56>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	e014      	b.n	800352c <ExplorerAPI_InitData+0x80>
    status = SCI_SetTxCommand(CMD_MEASUREMENT_DATA_3D_DEBUG, TxCmd_MeasurementData3DDebug);
 8003502:	4910      	ldr	r1, [pc, #64]	@ (8003544 <ExplorerAPI_InitData+0x98>)
 8003504:	2033      	movs	r0, #51	@ 0x33
 8003506:	f001 fac0 	bl	8004a8a <SCI_SetTxCommand>
 800350a:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	da01      	bge.n	8003516 <ExplorerAPI_InitData+0x6a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	e00a      	b.n	800352c <ExplorerAPI_InitData+0x80>
    status = SCI_SetTxCommand(CMD_MEASUREMENT_DATA_3D, TxCmd_MeasurementData3D);
 8003516:	490c      	ldr	r1, [pc, #48]	@ (8003548 <ExplorerAPI_InitData+0x9c>)
 8003518:	2034      	movs	r0, #52	@ 0x34
 800351a:	f001 fab6 	bl	8004a8a <SCI_SetTxCommand>
 800351e:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	da01      	bge.n	800352a <ExplorerAPI_InitData+0x7e>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	e000      	b.n	800352c <ExplorerAPI_InitData+0x80>

    return status;
 800352a:	687b      	ldr	r3, [r7, #4]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	080032cd 	.word	0x080032cd
 8003538:	0800331d 	.word	0x0800331d
 800353c:	0800340d 	.word	0x0800340d
 8003540:	0800345d 	.word	0x0800345d
 8003544:	0800336d 	.word	0x0800336d
 8003548:	080033bd 	.word	0x080033bd

0800354c <argus_explorer_app>:
 *          This function should never be exited.
 *
 * @return  Function never returns...
 *****************************************************************************/
void argus_explorer_app(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
    ExplorerApp_Init();
 8003550:	f000 f834 	bl	80035bc <ExplorerApp_Init>
    ExplorerApp_Run();
 8003554:	f000 f980 	bl	8003858 <ExplorerApp_Run>
}
 8003558:	bf00      	nop
 800355a:	bd80      	pop	{r7, pc}

0800355c <ExplorerApp_InitCommands>:

/*******************************************************************************
 * Code
 ******************************************************************************/
static status_t ExplorerApp_InitCommands()
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
    status_t status = SCI_Init();
 8003562:	f001 fa15 	bl	8004990 <SCI_Init>
 8003566:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	da01      	bge.n	8003572 <ExplorerApp_InitCommands+0x16>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	e020      	b.n	80035b4 <ExplorerApp_InitCommands+0x58>

    status = ExplorerAPI_InitGeneral();
 8003572:	f7fd fd2d 	bl	8000fd0 <ExplorerAPI_InitGeneral>
 8003576:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	da01      	bge.n	8003582 <ExplorerApp_InitCommands+0x26>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	e018      	b.n	80035b4 <ExplorerApp_InitCommands+0x58>

    status = ExplorerAPI_InitData();
 8003582:	f7ff ff93 	bl	80034ac <ExplorerAPI_InitData>
 8003586:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	da01      	bge.n	8003592 <ExplorerApp_InitCommands+0x36>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	e010      	b.n	80035b4 <ExplorerApp_InitCommands+0x58>

    status = ExplorerAPI_InitCfg();
 8003592:	f7ff fa11 	bl	80029b8 <ExplorerAPI_InitCfg>
 8003596:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	da01      	bge.n	80035a2 <ExplorerApp_InitCommands+0x46>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	e008      	b.n	80035b4 <ExplorerApp_InitCommands+0x58>

    status = ExplorerAPI_InitCal();
 80035a2:	f7fe faa9 	bl	8001af8 <ExplorerAPI_InitCal>
 80035a6:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	da01      	bge.n	80035b2 <ExplorerApp_InitCommands+0x56>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	e000      	b.n	80035b4 <ExplorerApp_InitCommands+0x58>

    return status;
 80035b2:	687b      	ldr	r3, [r7, #4]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <ExplorerApp_Init>:

status_t ExplorerApp_Init()
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
    //Debug_ResetStackUsage();

    /* Initialize the board hardware /w watchdog timer disabled */
    status_t status = Board_Init();
 80035c2:	f003 f9b7 	bl	8006934 <Board_Init>
 80035c6:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	da09      	bge.n	80035e2 <ExplorerApp_Init+0x26>
    {
        error_log("Board initialization failed, error code: %d", status);
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	4824      	ldr	r0, [pc, #144]	@ (8003664 <ExplorerApp_Init+0xa8>)
 80035d2:	f002 ff9b 	bl	800650c <print>
        assert(0);
 80035d6:	4b24      	ldr	r3, [pc, #144]	@ (8003668 <ExplorerApp_Init+0xac>)
 80035d8:	4a24      	ldr	r2, [pc, #144]	@ (800366c <ExplorerApp_Init+0xb0>)
 80035da:	2173      	movs	r1, #115	@ 0x73
 80035dc:	4824      	ldr	r0, [pc, #144]	@ (8003670 <ExplorerApp_Init+0xb4>)
 80035de:	f004 f963 	bl	80078a8 <__assert_func>
#if defined(CPU_MKL46Z256VLH4) || defined(CPU_MKL46Z256VLL4) || defined(CPU_MKL46Z256VMC4) || defined(CPU_MKL46Z256VMP4)
    SLCD_DisplayBar();
#endif

    /* Initialize the systems communication interface. */
    status = ExplorerApp_InitCommands();
 80035e2:	f7ff ffbb 	bl	800355c <ExplorerApp_InitCommands>
 80035e6:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	da05      	bge.n	80035fa <ExplorerApp_Init+0x3e>
    {
        assert(0);
 80035ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003668 <ExplorerApp_Init+0xac>)
 80035f0:	4a1e      	ldr	r2, [pc, #120]	@ (800366c <ExplorerApp_Init+0xb0>)
 80035f2:	217f      	movs	r1, #127	@ 0x7f
 80035f4:	481e      	ldr	r0, [pc, #120]	@ (8003670 <ExplorerApp_Init+0xb4>)
 80035f6:	f004 f957 	bl	80078a8 <__assert_func>
        return status;
    }

    /* Initialize the AFBR-S50 Explorer task scheduler. */
    status = ExplorerApp_InitTasks();
 80035fa:	f000 f87b 	bl	80036f4 <ExplorerApp_InitTasks>
 80035fe:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	da05      	bge.n	8003612 <ExplorerApp_Init+0x56>
    {
        assert(0);
 8003606:	4b18      	ldr	r3, [pc, #96]	@ (8003668 <ExplorerApp_Init+0xac>)
 8003608:	4a18      	ldr	r2, [pc, #96]	@ (800366c <ExplorerApp_Init+0xb0>)
 800360a:	2187      	movs	r1, #135	@ 0x87
 800360c:	4818      	ldr	r0, [pc, #96]	@ (8003670 <ExplorerApp_Init+0xb4>)
 800360e:	f004 f94b 	bl	80078a8 <__assert_func>
        return status;
    }

    /* Initialize Devices */
    uint8_t devicesFound = 0;
 8003612:	2300      	movs	r3, #0
 8003614:	70fb      	strb	r3, [r7, #3]
    for (uint8_t deviceID = 1; deviceID <= EXPLORER_DEVICE_ID_MAX; deviceID++)
 8003616:	2301      	movs	r3, #1
 8003618:	70bb      	strb	r3, [r7, #2]
 800361a:	e010      	b.n	800363e <ExplorerApp_Init+0x82>
    {
        status = ExplorerApp_InitExplorer(deviceID);
 800361c:	78bb      	ldrb	r3, [r7, #2]
 800361e:	4618      	mov	r0, r3
 8003620:	f001 f86c 	bl	80046fc <ExplorerApp_InitExplorer>
 8003624:	6078      	str	r0, [r7, #4]
        if (status == STATUS_OK)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d105      	bne.n	8003638 <ExplorerApp_Init+0x7c>
        {
            devicesFound++;
 800362c:	78fb      	ldrb	r3, [r7, #3]
 800362e:	3301      	adds	r3, #1
 8003630:	70fb      	strb	r3, [r7, #3]
            if (devicesFound == EXPLORER_DEVICE_COUNT) break;
 8003632:	78fb      	ldrb	r3, [r7, #3]
 8003634:	2b02      	cmp	r3, #2
 8003636:	d006      	beq.n	8003646 <ExplorerApp_Init+0x8a>
    for (uint8_t deviceID = 1; deviceID <= EXPLORER_DEVICE_ID_MAX; deviceID++)
 8003638:	78bb      	ldrb	r3, [r7, #2]
 800363a:	3301      	adds	r3, #1
 800363c:	70bb      	strb	r3, [r7, #2]
 800363e:	78bb      	ldrb	r3, [r7, #2]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d9eb      	bls.n	800361c <ExplorerApp_Init+0x60>
 8003644:	e000      	b.n	8003648 <ExplorerApp_Init+0x8c>
            if (devicesFound == EXPLORER_DEVICE_COUNT) break;
 8003646:	bf00      	nop
        }
    }

    if (devicesFound == 0)
 8003648:	78fb      	ldrb	r3, [r7, #3]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d105      	bne.n	800365a <ExplorerApp_Init+0x9e>
    {
        assert(0);
 800364e:	4b06      	ldr	r3, [pc, #24]	@ (8003668 <ExplorerApp_Init+0xac>)
 8003650:	4a06      	ldr	r2, [pc, #24]	@ (800366c <ExplorerApp_Init+0xb0>)
 8003652:	2199      	movs	r1, #153	@ 0x99
 8003654:	4806      	ldr	r0, [pc, #24]	@ (8003670 <ExplorerApp_Init+0xb4>)
 8003656:	f004 f927 	bl	80078a8 <__assert_func>
        return ERROR_ARGUS_NOT_CONNECTED;
    }

    return status;
 800365a:	687b      	ldr	r3, [r7, #4]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	0802cd0c 	.word	0x0802cd0c
 8003668:	0802cd40 	.word	0x0802cd40
 800366c:	0802dcac 	.word	0x0802dcac
 8003670:	0802cd44 	.word	0x0802cd44

08003674 <GetSystemStatus>:

status_t GetSystemStatus(sci_device_t deviceID)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	4603      	mov	r3, r0
 800367c:	71fb      	strb	r3, [r7, #7]
    explorer_t * explorer = ExplorerApp_GetExplorerPtr(deviceID);
 800367e:	79fb      	ldrb	r3, [r7, #7]
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fe8f 	bl	80043a4 <ExplorerApp_GetExplorerPtr>
 8003686:	60b8      	str	r0, [r7, #8]
    if (explorer == NULL) return ERROR_EXPLORER_UNINITIALIZED_DEVICE_ADDRESS;
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d102      	bne.n	8003694 <GetSystemStatus+0x20>
 800368e:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8003692:	e022      	b.n	80036da <GetSystemStatus+0x66>

    assert(explorer != NULL);
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d105      	bne.n	80036a6 <GetSystemStatus+0x32>
 800369a:	4b12      	ldr	r3, [pc, #72]	@ (80036e4 <GetSystemStatus+0x70>)
 800369c:	4a12      	ldr	r2, [pc, #72]	@ (80036e8 <GetSystemStatus+0x74>)
 800369e:	21a5      	movs	r1, #165	@ 0xa5
 80036a0:	4812      	ldr	r0, [pc, #72]	@ (80036ec <GetSystemStatus+0x78>)
 80036a2:	f004 f901 	bl	80078a8 <__assert_func>
    assert(explorer->Argus != NULL);
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d105      	bne.n	80036ba <GetSystemStatus+0x46>
 80036ae:	4b10      	ldr	r3, [pc, #64]	@ (80036f0 <GetSystemStatus+0x7c>)
 80036b0:	4a0d      	ldr	r2, [pc, #52]	@ (80036e8 <GetSystemStatus+0x74>)
 80036b2:	21a6      	movs	r1, #166	@ 0xa6
 80036b4:	480d      	ldr	r0, [pc, #52]	@ (80036ec <GetSystemStatus+0x78>)
 80036b6:	f004 f8f7 	bl	80078a8 <__assert_func>

    status_t status = Argus_GetStatus(explorer->Argus);
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	4618      	mov	r0, r3
 80036c0:	f011 fce4 	bl	801508c <Argus_GetStatus>
 80036c4:	60f8      	str	r0, [r7, #12]

    if (status == STATUS_IDLE)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d105      	bne.n	80036d8 <GetSystemStatus+0x64>
    {
        status = Argus_Ping(explorer->Argus);
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f011 ffb5 	bl	8015640 <Argus_Ping>
 80036d6:	60f8      	str	r0, [r7, #12]
    }

    return status;
 80036d8:	68fb      	ldr	r3, [r7, #12]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	0802cd6c 	.word	0x0802cd6c
 80036e8:	0802dcc0 	.word	0x0802dcc0
 80036ec:	0802cd44 	.word	0x0802cd44
 80036f0:	0802cd80 	.word	0x0802cd80

080036f4 <ExplorerApp_InitTasks>:
/*******************************************************************************
 * Code
 ******************************************************************************/

status_t ExplorerApp_InitTasks()
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af02      	add	r7, sp, #8
    /* Initialize the task scheduler module. */
    myScheduler = Scheduler_Init();
 80036fa:	f002 ff51 	bl	80065a0 <Scheduler_Init>
 80036fe:	4603      	mov	r3, r0
 8003700:	4a3f      	ldr	r2, [pc, #252]	@ (8003800 <ExplorerApp_InitTasks+0x10c>)
 8003702:	6013      	str	r3, [r2, #0]
    assert(myScheduler != NULL);
 8003704:	4b3e      	ldr	r3, [pc, #248]	@ (8003800 <ExplorerApp_InitTasks+0x10c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d105      	bne.n	8003718 <ExplorerApp_InitTasks+0x24>
 800370c:	4b3d      	ldr	r3, [pc, #244]	@ (8003804 <ExplorerApp_InitTasks+0x110>)
 800370e:	4a3e      	ldr	r2, [pc, #248]	@ (8003808 <ExplorerApp_InitTasks+0x114>)
 8003710:	21c2      	movs	r1, #194	@ 0xc2
 8003712:	483e      	ldr	r0, [pc, #248]	@ (800380c <ExplorerApp_InitTasks+0x118>)
 8003714:	f004 f8c8 	bl	80078a8 <__assert_func>
    if (myScheduler == NULL) return ERROR_FAIL;
 8003718:	4b39      	ldr	r3, [pc, #228]	@ (8003800 <ExplorerApp_InitTasks+0x10c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d102      	bne.n	8003726 <ExplorerApp_InitTasks+0x32>
 8003720:	f04f 33ff 	mov.w	r3, #4294967295
 8003724:	e068      	b.n	80037f8 <ExplorerApp_InitTasks+0x104>

    /* Add tasks. */
    status_t
    status = Scheduler_AddTask(myScheduler, (task_function_t)Task_Error, TASK_ERROR, EventQ_Error,
 8003726:	4b36      	ldr	r3, [pc, #216]	@ (8003800 <ExplorerApp_InitTasks+0x10c>)
 8003728:	6818      	ldr	r0, [r3, #0]
 800372a:	4b39      	ldr	r3, [pc, #228]	@ (8003810 <ExplorerApp_InitTasks+0x11c>)
 800372c:	9301      	str	r3, [sp, #4]
 800372e:	2306      	movs	r3, #6
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	4b38      	ldr	r3, [pc, #224]	@ (8003814 <ExplorerApp_InitTasks+0x120>)
 8003734:	2207      	movs	r2, #7
 8003736:	4938      	ldr	r1, [pc, #224]	@ (8003818 <ExplorerApp_InitTasks+0x124>)
 8003738:	f002 ff3e 	bl	80065b8 <Scheduler_AddTask>
 800373c:	6078      	str	r0, [r7, #4]
                               sizeof(EventQ_Error) / sizeof(EventQ_Error[0]), "Error");
    if (status < STATUS_OK) return status;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	da01      	bge.n	8003748 <ExplorerApp_InitTasks+0x54>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	e057      	b.n	80037f8 <ExplorerApp_InitTasks+0x104>

    status = Scheduler_AddTask(myScheduler, (task_function_t)Task_EvaluateMeasurementData, TASK_EVAL_DAT, EventQ_EvalData,
 8003748:	4b2d      	ldr	r3, [pc, #180]	@ (8003800 <ExplorerApp_InitTasks+0x10c>)
 800374a:	6818      	ldr	r0, [r3, #0]
 800374c:	4b33      	ldr	r3, [pc, #204]	@ (800381c <ExplorerApp_InitTasks+0x128>)
 800374e:	9301      	str	r3, [sp, #4]
 8003750:	2306      	movs	r3, #6
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	4b32      	ldr	r3, [pc, #200]	@ (8003820 <ExplorerApp_InitTasks+0x12c>)
 8003756:	2201      	movs	r2, #1
 8003758:	4932      	ldr	r1, [pc, #200]	@ (8003824 <ExplorerApp_InitTasks+0x130>)
 800375a:	f002 ff2d 	bl	80065b8 <Scheduler_AddTask>
 800375e:	6078      	str	r0, [r7, #4]
                               sizeof(EventQ_EvalData) / sizeof(EventQ_EvalData[0]), "Evaluate");
    if (status < STATUS_OK) return status;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	da01      	bge.n	800376a <ExplorerApp_InitTasks+0x76>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	e046      	b.n	80037f8 <ExplorerApp_InitTasks+0x104>

    status = Scheduler_AddTask(myScheduler, (task_function_t)Task_SendMeasurementData, TASK_SEND_DAT, EventQ_SendResults,
 800376a:	4b25      	ldr	r3, [pc, #148]	@ (8003800 <ExplorerApp_InitTasks+0x10c>)
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	4b2e      	ldr	r3, [pc, #184]	@ (8003828 <ExplorerApp_InitTasks+0x134>)
 8003770:	9301      	str	r3, [sp, #4]
 8003772:	2306      	movs	r3, #6
 8003774:	9300      	str	r3, [sp, #0]
 8003776:	4b2d      	ldr	r3, [pc, #180]	@ (800382c <ExplorerApp_InitTasks+0x138>)
 8003778:	2202      	movs	r2, #2
 800377a:	492d      	ldr	r1, [pc, #180]	@ (8003830 <ExplorerApp_InitTasks+0x13c>)
 800377c:	f002 ff1c 	bl	80065b8 <Scheduler_AddTask>
 8003780:	6078      	str	r0, [r7, #4]
                               sizeof(EventQ_SendResults) / sizeof(EventQ_SendResults[0]), "Data Streaming");
    if (status < STATUS_OK) return status;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	da01      	bge.n	800378c <ExplorerApp_InitTasks+0x98>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	e035      	b.n	80037f8 <ExplorerApp_InitTasks+0x104>

    status = Scheduler_AddTask(myScheduler, (task_function_t)Task_HandleCommand, TASK_HNDL_CMD, EventQ_HandleCommand,
 800378c:	4b1c      	ldr	r3, [pc, #112]	@ (8003800 <ExplorerApp_InitTasks+0x10c>)
 800378e:	6818      	ldr	r0, [r3, #0]
 8003790:	4b28      	ldr	r3, [pc, #160]	@ (8003834 <ExplorerApp_InitTasks+0x140>)
 8003792:	9301      	str	r3, [sp, #4]
 8003794:	230c      	movs	r3, #12
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	4b27      	ldr	r3, [pc, #156]	@ (8003838 <ExplorerApp_InitTasks+0x144>)
 800379a:	2206      	movs	r2, #6
 800379c:	4927      	ldr	r1, [pc, #156]	@ (800383c <ExplorerApp_InitTasks+0x148>)
 800379e:	f002 ff0b 	bl	80065b8 <Scheduler_AddTask>
 80037a2:	6078      	str	r0, [r7, #4]
                               sizeof(EventQ_HandleCommand) / sizeof(EventQ_HandleCommand[0]), "Handle SCI Command");
    if (status < STATUS_OK) return status;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	da01      	bge.n	80037ae <ExplorerApp_InitTasks+0xba>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	e024      	b.n	80037f8 <ExplorerApp_InitTasks+0x104>

    status = Scheduler_AddTask(myScheduler, (task_function_t)Task_Idle, TASK_IDLE, EventQ_Idle,
 80037ae:	4b14      	ldr	r3, [pc, #80]	@ (8003800 <ExplorerApp_InitTasks+0x10c>)
 80037b0:	6818      	ldr	r0, [r3, #0]
 80037b2:	4b23      	ldr	r3, [pc, #140]	@ (8003840 <ExplorerApp_InitTasks+0x14c>)
 80037b4:	9301      	str	r3, [sp, #4]
 80037b6:	2306      	movs	r3, #6
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	4b22      	ldr	r3, [pc, #136]	@ (8003844 <ExplorerApp_InitTasks+0x150>)
 80037bc:	2200      	movs	r2, #0
 80037be:	4922      	ldr	r1, [pc, #136]	@ (8003848 <ExplorerApp_InitTasks+0x154>)
 80037c0:	f002 fefa 	bl	80065b8 <Scheduler_AddTask>
 80037c4:	6078      	str	r0, [r7, #4]
                               sizeof(EventQ_Idle) / sizeof(EventQ_Idle[0]), "Idle");
    if (status < STATUS_OK) return status;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	da01      	bge.n	80037d0 <ExplorerApp_InitTasks+0xdc>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	e013      	b.n	80037f8 <ExplorerApp_InitTasks+0x104>

    /* Install SCI callbacks. */
    SCI_SetRxCommandCallback(SCI_RxCommandCallbackHandler);
 80037d0:	481e      	ldr	r0, [pc, #120]	@ (800384c <ExplorerApp_InitTasks+0x158>)
 80037d2:	f001 f917 	bl	8004a04 <SCI_SetRxCommandCallback>
    SCI_SetErrorCallback(SCI_ErrorCallbackHandler);
 80037d6:	481e      	ldr	r0, [pc, #120]	@ (8003850 <ExplorerApp_InitTasks+0x15c>)
 80037d8:	f001 f924 	bl	8004a24 <SCI_SetErrorCallback>

    static idle_event_t idle_event = { 0 };
    status = Scheduler_PostEvent(myScheduler, TASK_IDLE, &idle_event);
 80037dc:	4b08      	ldr	r3, [pc, #32]	@ (8003800 <ExplorerApp_InitTasks+0x10c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a1c      	ldr	r2, [pc, #112]	@ (8003854 <ExplorerApp_InitTasks+0x160>)
 80037e2:	2100      	movs	r1, #0
 80037e4:	4618      	mov	r0, r3
 80037e6:	f002 ff41 	bl	800666c <Scheduler_PostEvent>
 80037ea:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	da01      	bge.n	80037f6 <ExplorerApp_InitTasks+0x102>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	e000      	b.n	80037f8 <ExplorerApp_InitTasks+0x104>

    return status;
 80037f6:	687b      	ldr	r3, [r7, #4]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	24000250 	.word	0x24000250
 8003804:	0802cd98 	.word	0x0802cd98
 8003808:	0802dcd0 	.word	0x0802dcd0
 800380c:	0802cdac 	.word	0x0802cdac
 8003810:	0802cdd8 	.word	0x0802cdd8
 8003814:	24000254 	.word	0x24000254
 8003818:	08003b79 	.word	0x08003b79
 800381c:	0802cde0 	.word	0x0802cde0
 8003820:	2400029c 	.word	0x2400029c
 8003824:	080038d1 	.word	0x080038d1
 8003828:	0802cdec 	.word	0x0802cdec
 800382c:	24000284 	.word	0x24000284
 8003830:	080039e9 	.word	0x080039e9
 8003834:	0802cdfc 	.word	0x0802cdfc
 8003838:	240002b4 	.word	0x240002b4
 800383c:	08003b41 	.word	0x08003b41
 8003840:	0802ce10 	.word	0x0802ce10
 8003844:	2400026c 	.word	0x2400026c
 8003848:	08003ba1 	.word	0x08003ba1
 800384c:	08003d19 	.word	0x08003d19
 8003850:	08003cfd 	.word	0x08003cfd
 8003854:	240002e4 	.word	0x240002e4

08003858 <ExplorerApp_Run>:

void ExplorerApp_Run(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
//#if DEBUG
//  ExplorerApp_StartTimerMeasurement();
//#endif
    Scheduler_Run(myScheduler); // never returns
 800385c:	4b03      	ldr	r3, [pc, #12]	@ (800386c <ExplorerApp_Run+0x14>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4618      	mov	r0, r3
 8003862:	f002 ff79 	bl	8006758 <Scheduler_Run>
}
 8003866:	bf00      	nop
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	24000250 	.word	0x24000250

08003870 <ExplorerApp_SwitchContext>:

void ExplorerApp_SwitchContext(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
    Scheduler_SwitchContext(myScheduler);
 8003874:	4b03      	ldr	r3, [pc, #12]	@ (8003884 <ExplorerApp_SwitchContext+0x14>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f002 ff85 	bl	8006788 <Scheduler_SwitchContext>
}
 800387e:	bf00      	nop
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	24000250 	.word	0x24000250

08003888 <OnError>:

static status_t OnError(status_t status, char *message)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
    static error_event_t event = { 0 };
    event.Status = status;
 8003892:	4a0b      	ldr	r2, [pc, #44]	@ (80038c0 <OnError+0x38>)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6013      	str	r3, [r2, #0]
    Time_GetNow(&event.TimeStamp);
 8003898:	480a      	ldr	r0, [pc, #40]	@ (80038c4 <OnError+0x3c>)
 800389a:	f010 fbd7 	bl	801404c <Time_GetNow>
    strcpy(event.String, message);
 800389e:	6839      	ldr	r1, [r7, #0]
 80038a0:	4809      	ldr	r0, [pc, #36]	@ (80038c8 <OnError+0x40>)
 80038a2:	f027 fc12 	bl	802b0ca <strcpy>
    Scheduler_PostEvent(myScheduler, TASK_ERROR, &event);
 80038a6:	4b09      	ldr	r3, [pc, #36]	@ (80038cc <OnError+0x44>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a05      	ldr	r2, [pc, #20]	@ (80038c0 <OnError+0x38>)
 80038ac:	2107      	movs	r1, #7
 80038ae:	4618      	mov	r0, r3
 80038b0:	f002 fedc 	bl	800666c <Scheduler_PostEvent>
    return status;
 80038b4:	687b      	ldr	r3, [r7, #4]
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	240002f0 	.word	0x240002f0
 80038c4:	240002f4 	.word	0x240002f4
 80038c8:	240002fc 	.word	0x240002fc
 80038cc:	24000250 	.word	0x24000250

080038d0 <Task_EvaluateMeasurementData>:

/*******************************************************************************
 * Tasks
 ******************************************************************************/
static void Task_EvaluateMeasurementData(argus_hnd_t * argus)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08a      	sub	sp, #40	@ 0x28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
    assert(argus != NULL);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <Task_EvaluateMeasurementData+0x1c>
 80038de:	4b3b      	ldr	r3, [pc, #236]	@ (80039cc <Task_EvaluateMeasurementData+0xfc>)
 80038e0:	4a3b      	ldr	r2, [pc, #236]	@ (80039d0 <Task_EvaluateMeasurementData+0x100>)
 80038e2:	f240 1103 	movw	r1, #259	@ 0x103
 80038e6:	483b      	ldr	r0, [pc, #236]	@ (80039d4 <Task_EvaluateMeasurementData+0x104>)
 80038e8:	f003 ffde 	bl	80078a8 <__assert_func>
    DEBUG_TASK_EVALUATEDATA_ENTER;

    static argus_resultsbuffer_t buffer[ARGUSRESULTBUFFER_SIZE] = {{0}};

    /* Find free data buffer. */
    argus_resultsbuffer_t * buf = 0;
 80038ec:	2300      	movs	r3, #0
 80038ee:	627b      	str	r3, [r7, #36]	@ 0x24
    for(uint8_t i = 0; i < ARGUSRESULTBUFFER_SIZE; ++i)
 80038f0:	2300      	movs	r3, #0
 80038f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038f6:	e015      	b.n	8003924 <Task_EvaluateMeasurementData+0x54>
    {
        if(buffer[i].Status == BUFFER_EMTPY)
 80038f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80038fc:	4a36      	ldr	r2, [pc, #216]	@ (80039d8 <Task_EvaluateMeasurementData+0x108>)
 80038fe:	029b      	lsls	r3, r3, #10
 8003900:	4413      	add	r3, r2
 8003902:	3301      	adds	r3, #1
 8003904:	f993 3000 	ldrsb.w	r3, [r3]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d106      	bne.n	800391a <Task_EvaluateMeasurementData+0x4a>
        {
            buf = &buffer[i];
 800390c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003910:	029b      	lsls	r3, r3, #10
 8003912:	4a31      	ldr	r2, [pc, #196]	@ (80039d8 <Task_EvaluateMeasurementData+0x108>)
 8003914:	4413      	add	r3, r2
 8003916:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003918:	e008      	b.n	800392c <Task_EvaluateMeasurementData+0x5c>
    for(uint8_t i = 0; i < ARGUSRESULTBUFFER_SIZE; ++i)
 800391a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800391e:	3301      	adds	r3, #1
 8003920:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003924:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003928:	2b03      	cmp	r3, #3
 800392a:	d9e5      	bls.n	80038f8 <Task_EvaluateMeasurementData+0x28>
        }
    }
    assert(buf != 0); // no buffer found! should never happen
 800392c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392e:	2b00      	cmp	r3, #0
 8003930:	d106      	bne.n	8003940 <Task_EvaluateMeasurementData+0x70>
 8003932:	4b2a      	ldr	r3, [pc, #168]	@ (80039dc <Task_EvaluateMeasurementData+0x10c>)
 8003934:	4a26      	ldr	r2, [pc, #152]	@ (80039d0 <Task_EvaluateMeasurementData+0x100>)
 8003936:	f44f 7189 	mov.w	r1, #274	@ 0x112
 800393a:	4826      	ldr	r0, [pc, #152]	@ (80039d4 <Task_EvaluateMeasurementData+0x104>)
 800393c:	f003 ffb4 	bl	80078a8 <__assert_func>
    buf->Status = BUFFER_BUSY;
 8003940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003942:	2201      	movs	r2, #1
 8003944:	705a      	strb	r2, [r3, #1]

    /* Evaluate data. */
    explorer_t * explorer = ExplorerApp_GetExplorerPtrFromArgus(argus);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 fd50 	bl	80043ec <ExplorerApp_GetExplorerPtrFromArgus>
 800394c:	61f8      	str	r0, [r7, #28]
    buf->DataOutputMode = ExplorerApp_GetDataOutputMode(explorer);
 800394e:	69f8      	ldr	r0, [r7, #28]
 8003950:	f000 fc10 	bl	8004174 <ExplorerApp_GetDataOutputMode>
 8003954:	4603      	mov	r3, r0
 8003956:	461a      	mov	r2, r3
 8003958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395a:	709a      	strb	r2, [r3, #2]
    const bool isDebugStreamingMode = !(buf->DataOutputMode & 0x01);
 800395c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395e:	789b      	ldrb	r3, [r3, #2]
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b00      	cmp	r3, #0
 8003966:	bf0c      	ite	eq
 8003968:	2301      	moveq	r3, #1
 800396a:	2300      	movne	r3, #0
 800396c:	76fb      	strb	r3, [r7, #27]
    argus_results_t * res = &buf->Result;
 800396e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003970:	3304      	adds	r3, #4
 8003972:	617b      	str	r3, [r7, #20]
    argus_results_debug_t * dbg = isDebugStreamingMode ? &buf->DebugResults : NULL;
 8003974:	7efb      	ldrb	r3, [r7, #27]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <Task_EvaluateMeasurementData+0xb2>
 800397a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397c:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8003980:	e000      	b.n	8003984 <Task_EvaluateMeasurementData+0xb4>
 8003982:	2300      	movs	r3, #0
 8003984:	613b      	str	r3, [r7, #16]

    status_t status = Argus_EvaluateDataDebug(argus, res, dbg);
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	6979      	ldr	r1, [r7, #20]
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f011 fe1c 	bl	80155c8 <Argus_EvaluateDataDebug>
 8003990:	60f8      	str	r0, [r7, #12]
    if (status < STATUS_OK) OnError(status, "Evaluation Task failed");
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2b00      	cmp	r3, #0
 8003996:	da03      	bge.n	80039a0 <Task_EvaluateMeasurementData+0xd0>
 8003998:	4911      	ldr	r1, [pc, #68]	@ (80039e0 <Task_EvaluateMeasurementData+0x110>)
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f7ff ff74 	bl	8003888 <OnError>

    buf->Status = BUFFER_FULL;
 80039a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a2:	2202      	movs	r2, #2
 80039a4:	705a      	strb	r2, [r3, #1]
    buf->deviceID = ExplorerApp_GetDeviceID(explorer);
 80039a6:	69f8      	ldr	r0, [r7, #28]
 80039a8:	f000 fda0 	bl	80044ec <ExplorerApp_GetDeviceID>
 80039ac:	4603      	mov	r3, r0
 80039ae:	461a      	mov	r2, r3
 80039b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b2:	701a      	strb	r2, [r3, #0]

    Scheduler_PostEvent(myScheduler, TASK_SEND_DAT, buf);
 80039b4:	4b0b      	ldr	r3, [pc, #44]	@ (80039e4 <Task_EvaluateMeasurementData+0x114>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ba:	2102      	movs	r1, #2
 80039bc:	4618      	mov	r0, r3
 80039be:	f002 fe55 	bl	800666c <Scheduler_PostEvent>

    DEBUG_TASK_EVALUATEDATA_LEAVE;
}
 80039c2:	bf00      	nop
 80039c4:	3728      	adds	r7, #40	@ 0x28
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	0802ce18 	.word	0x0802ce18
 80039d0:	0802dce8 	.word	0x0802dce8
 80039d4:	0802cdac 	.word	0x0802cdac
 80039d8:	2400037c 	.word	0x2400037c
 80039dc:	0802ce28 	.word	0x0802ce28
 80039e0:	0802ce34 	.word	0x0802ce34
 80039e4:	24000250 	.word	0x24000250

080039e8 <Task_SendMeasurementData>:

static void Task_SendMeasurementData(argus_resultsbuffer_t * buffer)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
    DEBUG_TASK_SENDRESULTS_ENTER;
    assert(buffer != 0);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d106      	bne.n	8003a04 <Task_SendMeasurementData+0x1c>
 80039f6:	4b4c      	ldr	r3, [pc, #304]	@ (8003b28 <Task_SendMeasurementData+0x140>)
 80039f8:	4a4c      	ldr	r2, [pc, #304]	@ (8003b2c <Task_SendMeasurementData+0x144>)
 80039fa:	f44f 7195 	mov.w	r1, #298	@ 0x12a
 80039fe:	484c      	ldr	r0, [pc, #304]	@ (8003b30 <Task_SendMeasurementData+0x148>)
 8003a00:	f003 ff52 	bl	80078a8 <__assert_func>

    assert((buffer->DataOutputMode == DATA_OUTPUT_STREAMING_FULL) ||
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	789b      	ldrb	r3, [r3, #2]
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d01a      	beq.n	8003a42 <Task_SendMeasurementData+0x5a>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	789b      	ldrb	r3, [r3, #2]
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d016      	beq.n	8003a42 <Task_SendMeasurementData+0x5a>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	789b      	ldrb	r3, [r3, #2]
 8003a18:	2b05      	cmp	r3, #5
 8003a1a:	d012      	beq.n	8003a42 <Task_SendMeasurementData+0x5a>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	789b      	ldrb	r3, [r3, #2]
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d00e      	beq.n	8003a42 <Task_SendMeasurementData+0x5a>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	789b      	ldrb	r3, [r3, #2]
 8003a28:	2b07      	cmp	r3, #7
 8003a2a:	d00a      	beq.n	8003a42 <Task_SendMeasurementData+0x5a>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	789b      	ldrb	r3, [r3, #2]
 8003a30:	2b06      	cmp	r3, #6
 8003a32:	d006      	beq.n	8003a42 <Task_SendMeasurementData+0x5a>
 8003a34:	4b3f      	ldr	r3, [pc, #252]	@ (8003b34 <Task_SendMeasurementData+0x14c>)
 8003a36:	4a3d      	ldr	r2, [pc, #244]	@ (8003b2c <Task_SendMeasurementData+0x144>)
 8003a38:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8003a3c:	483c      	ldr	r0, [pc, #240]	@ (8003b30 <Task_SendMeasurementData+0x148>)
 8003a3e:	f003 ff33 	bl	80078a8 <__assert_func>

    /* For message modes w/ DEBUG, the Result.Debug structure pointer must be available!
     * For message modes w/o DEBUG, the Result.Debug structure pointer must be null!
     * DEBUG modes are even, i.e. check for !(mode & 0x01).
     * Not DEBUG modes are odd, i.e. check for (mode & 0x01). */
    assert((!(buffer->DataOutputMode & 0x01) && (buffer->Result.Debug != 0)) ||
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	789b      	ldrb	r3, [r3, #2]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d104      	bne.n	8003a58 <Task_SendMeasurementData+0x70>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d111      	bne.n	8003a7c <Task_SendMeasurementData+0x94>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	789b      	ldrb	r3, [r3, #2]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d004      	beq.n	8003a6e <Task_SendMeasurementData+0x86>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d006      	beq.n	8003a7c <Task_SendMeasurementData+0x94>
 8003a6e:	4b32      	ldr	r3, [pc, #200]	@ (8003b38 <Task_SendMeasurementData+0x150>)
 8003a70:	4a2e      	ldr	r2, [pc, #184]	@ (8003b2c <Task_SendMeasurementData+0x144>)
 8003a72:	f240 1137 	movw	r1, #311	@ 0x137
 8003a76:	482e      	ldr	r0, [pc, #184]	@ (8003b30 <Task_SendMeasurementData+0x148>)
 8003a78:	f003 ff16 	bl	80078a8 <__assert_func>
           ((buffer->DataOutputMode & 0x01) && (buffer->Result.Debug == 0)));

    switch (buffer->DataOutputMode)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	789b      	ldrb	r3, [r3, #2]
 8003a80:	3b02      	subs	r3, #2
 8003a82:	2b05      	cmp	r3, #5
 8003a84:	d844      	bhi.n	8003b10 <Task_SendMeasurementData+0x128>
 8003a86:	a201      	add	r2, pc, #4	@ (adr r2, 8003a8c <Task_SendMeasurementData+0xa4>)
 8003a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8c:	08003ab7 	.word	0x08003ab7
 8003a90:	08003aa5 	.word	0x08003aa5
 8003a94:	08003adb 	.word	0x08003adb
 8003a98:	08003ac9 	.word	0x08003ac9
 8003a9c:	08003aff 	.word	0x08003aff
 8003aa0:	08003aed 	.word	0x08003aed
    {
        case DATA_OUTPUT_STREAMING_FULL:
            SCI_SendCommand(buffer->deviceID, CMD_MEASUREMENT_DATA_FULL, 0, &(buffer->Result));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	7818      	ldrb	r0, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3304      	adds	r3, #4
 8003aac:	2200      	movs	r2, #0
 8003aae:	2132      	movs	r1, #50	@ 0x32
 8003ab0:	f001 f97a 	bl	8004da8 <SCI_SendCommand>
            break;
 8003ab4:	e031      	b.n	8003b1a <Task_SendMeasurementData+0x132>
        case DATA_OUTPUT_STREAMING_FULL_DEBUG:
            SCI_SendCommand(buffer->deviceID, CMD_MEASUREMENT_DATA_FULL_DEBUG, 0, &(buffer->Result));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	7818      	ldrb	r0, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3304      	adds	r3, #4
 8003abe:	2200      	movs	r2, #0
 8003ac0:	2131      	movs	r1, #49	@ 0x31
 8003ac2:	f001 f971 	bl	8004da8 <SCI_SendCommand>
            break;
 8003ac6:	e028      	b.n	8003b1a <Task_SendMeasurementData+0x132>
        case DATA_OUTPUT_STREAMING_3D:
            SCI_SendCommand(buffer->deviceID, CMD_MEASUREMENT_DATA_3D, 0, &(buffer->Result));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	7818      	ldrb	r0, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3304      	adds	r3, #4
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2134      	movs	r1, #52	@ 0x34
 8003ad4:	f001 f968 	bl	8004da8 <SCI_SendCommand>
            break;
 8003ad8:	e01f      	b.n	8003b1a <Task_SendMeasurementData+0x132>
        case DATA_OUTPUT_STREAMING_3D_DEBUG:
            SCI_SendCommand(buffer->deviceID, CMD_MEASUREMENT_DATA_3D_DEBUG, 0, &(buffer->Result));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	7818      	ldrb	r0, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	2133      	movs	r1, #51	@ 0x33
 8003ae6:	f001 f95f 	bl	8004da8 <SCI_SendCommand>
            break;
 8003aea:	e016      	b.n	8003b1a <Task_SendMeasurementData+0x132>
        case DATA_OUTPUT_STREAMING_1D:
            SCI_SendCommand(buffer->deviceID, CMD_MEASUREMENT_DATA_1D, 0, &(buffer->Result));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	7818      	ldrb	r0, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3304      	adds	r3, #4
 8003af4:	2200      	movs	r2, #0
 8003af6:	2136      	movs	r1, #54	@ 0x36
 8003af8:	f001 f956 	bl	8004da8 <SCI_SendCommand>
            break;
 8003afc:	e00d      	b.n	8003b1a <Task_SendMeasurementData+0x132>
        case DATA_OUTPUT_STREAMING_1D_DEBUG:
            SCI_SendCommand(buffer->deviceID, CMD_MEASUREMENT_DATA_1D_DEBUG, 0, &(buffer->Result));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	7818      	ldrb	r0, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	3304      	adds	r3, #4
 8003b06:	2200      	movs	r2, #0
 8003b08:	2135      	movs	r1, #53	@ 0x35
 8003b0a:	f001 f94d 	bl	8004da8 <SCI_SendCommand>
            break;
 8003b0e:	e004      	b.n	8003b1a <Task_SendMeasurementData+0x132>
        default:
            OnError(ERROR_FAIL, "Invalid Data Output Mode!");
 8003b10:	490a      	ldr	r1, [pc, #40]	@ (8003b3c <Task_SendMeasurementData+0x154>)
 8003b12:	f04f 30ff 	mov.w	r0, #4294967295
 8003b16:	f7ff feb7 	bl	8003888 <OnError>
    }

    buffer->Status = BUFFER_EMTPY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	705a      	strb	r2, [r3, #1]
    DEBUG_TASK_SENDRESULTS_LEAVE;
}
 8003b20:	bf00      	nop
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	0802ce4c 	.word	0x0802ce4c
 8003b2c:	0802dd08 	.word	0x0802dd08
 8003b30:	0802cdac 	.word	0x0802cdac
 8003b34:	0802ce58 	.word	0x0802ce58
 8003b38:	0802cfbc 	.word	0x0802cfbc
 8003b3c:	0802d044 	.word	0x0802d044

08003b40 <Task_HandleCommand>:

static void Task_HandleCommand(sci_frame_t * frame)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
    DEBUG_TASK_HANDLECMD_ENTER;
    assert(frame != NULL);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d106      	bne.n	8003b5c <Task_HandleCommand+0x1c>
 8003b4e:	4b07      	ldr	r3, [pc, #28]	@ (8003b6c <Task_HandleCommand+0x2c>)
 8003b50:	4a07      	ldr	r2, [pc, #28]	@ (8003b70 <Task_HandleCommand+0x30>)
 8003b52:	f240 1159 	movw	r1, #345	@ 0x159
 8003b56:	4807      	ldr	r0, [pc, #28]	@ (8003b74 <Task_HandleCommand+0x34>)
 8003b58:	f003 fea6 	bl	80078a8 <__assert_func>
    SCI_InvokeRxCommand(frame);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f001 f81d 	bl	8004b9c <SCI_InvokeRxCommand>
    DEBUG_TASK_HANDLECMD_LEAVE;
}
 8003b62:	bf00      	nop
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	0802d060 	.word	0x0802d060
 8003b70:	0802dd24 	.word	0x0802dd24
 8003b74:	0802cdac 	.word	0x0802cdac

08003b78 <Task_Error>:

static void Task_Error(error_event_t * e)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
#if AFBR_SCI_USB
    if (e->Status == ERROR_USB_TIMEOUT) return;
#endif

    error_log("%s, error code: %d", e->String, e->Status);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f103 010c 	add.w	r1, r3, #12
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	4803      	ldr	r0, [pc, #12]	@ (8003b9c <Task_Error+0x24>)
 8003b8e:	f002 fcbd 	bl	800650c <print>
#if defined(CPU_MKL46Z256VLH4) || defined(CPU_MKL46Z256VLL4) || defined(CPU_MKL46Z256VMC4) || defined(CPU_MKL46Z256VMP4)
    SLCD_DisplayDecimalSigned((int16_t)e->Status);
#endif
}
 8003b92:	bf00      	nop
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	0802d070 	.word	0x0802d070

08003ba0 <Task_Idle>:

static void Task_Idle(idle_event_t * e)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b088      	sub	sp, #32
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
    assert(e != NULL);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d106      	bne.n	8003bbc <Task_Idle+0x1c>
 8003bae:	4b39      	ldr	r3, [pc, #228]	@ (8003c94 <Task_Idle+0xf4>)
 8003bb0:	4a39      	ldr	r2, [pc, #228]	@ (8003c98 <Task_Idle+0xf8>)
 8003bb2:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8003bb6:	4839      	ldr	r0, [pc, #228]	@ (8003c9c <Task_Idle+0xfc>)
 8003bb8:	f003 fe76 	bl	80078a8 <__assert_func>
     * Called when no other events/tasks are pending.
     * Checks the device status and enables the red LED in case of any error.
     * If the device is idle for a longer period of time, a ping is sent to
     * verify if the device is still connected. */

    uint8_t devCount = ExplorerApp_GetInitializedExplorerCount();
 8003bbc:	f000 fc4e 	bl	800445c <ExplorerApp_GetInitializedExplorerCount>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	75fb      	strb	r3, [r7, #23]
    bool foundActiveDevice = false;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	77fb      	strb	r3, [r7, #31]

    for (uint8_t i = 0; i < devCount; i++)
 8003bc8:	2300      	movs	r3, #0
 8003bca:	77bb      	strb	r3, [r7, #30]
 8003bcc:	e04f      	b.n	8003c6e <Task_Idle+0xce>
    {
        explorer_t * explorer = ExplorerApp_GetInitializedExplorer(i);
 8003bce:	7fbb      	ldrb	r3, [r7, #30]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f000 fc65 	bl	80044a0 <ExplorerApp_GetInitializedExplorer>
 8003bd6:	6138      	str	r0, [r7, #16]
        status_t status = Argus_GetStatus(explorer->Argus);
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f011 fa55 	bl	801508c <Argus_GetStatus>
 8003be2:	61b8      	str	r0, [r7, #24]
        if (e->Status != status)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d002      	beq.n	8003bf4 <Task_Idle+0x54>
        {
            e->Status = status;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	609a      	str	r2, [r3, #8]
#endif
        }

        /* Trigger a ping from time to time if the device is idle
         * Disable the ping if in DEBUG mode. */
        bool isDbgModeEnabled = ExplorerApp_GetDebugModeEnabled(explorer);
 8003bf4:	6938      	ldr	r0, [r7, #16]
 8003bf6:	f000 f931 	bl	8003e5c <ExplorerApp_GetDebugModeEnabled>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	73fb      	strb	r3, [r7, #15]
        if ((!isDbgModeEnabled) && (status == STATUS_IDLE))
 8003bfe:	7bfb      	ldrb	r3, [r7, #15]
 8003c00:	f083 0301 	eor.w	r3, r3, #1
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d022      	beq.n	8003c50 <Task_Idle+0xb0>
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d11f      	bne.n	8003c50 <Task_Idle+0xb0>
        {
            uint32_t timeout = PING_PERIOD_MS / devCount;
 8003c10:	7dfb      	ldrb	r3, [r7, #23]
 8003c12:	f240 124d 	movw	r2, #333	@ 0x14d
 8003c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1a:	60bb      	str	r3, [r7, #8]
            if (Time_CheckTimeoutMSec(&e->PingTime, timeout))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68b9      	ldr	r1, [r7, #8]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f010 fa57 	bl	80140d4 <Time_CheckTimeoutMSec>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d016      	beq.n	8003c5a <Task_Idle+0xba>
            {
                Time_GetNow(&e->PingTime);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f010 fa0c 	bl	801404c <Time_GetNow>

                status = Argus_Ping(explorer->Argus);
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f011 fd01 	bl	8015640 <Argus_Ping>
 8003c3e:	61b8      	str	r0, [r7, #24]
                if (status < STATUS_OK)
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	da09      	bge.n	8003c5a <Task_Idle+0xba>
                {
                    OnError(status, "Ping failed! Device has been disconnected!");
 8003c46:	4916      	ldr	r1, [pc, #88]	@ (8003ca0 <Task_Idle+0x100>)
 8003c48:	69b8      	ldr	r0, [r7, #24]
 8003c4a:	f7ff fe1d 	bl	8003888 <OnError>
        {
 8003c4e:	e004      	b.n	8003c5a <Task_Idle+0xba>
                }
            }
        }
        else
        {
            Time_GetNow(&e->PingTime);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f010 f9fa 	bl	801404c <Time_GetNow>
 8003c58:	e000      	b.n	8003c5c <Task_Idle+0xbc>
        {
 8003c5a:	bf00      	nop
        }

        if (status != ERROR_NOT_INITIALIZED) foundActiveDevice = true;
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	f113 0f07 	cmn.w	r3, #7
 8003c62:	d001      	beq.n	8003c68 <Task_Idle+0xc8>
 8003c64:	2301      	movs	r3, #1
 8003c66:	77fb      	strb	r3, [r7, #31]
    for (uint8_t i = 0; i < devCount; i++)
 8003c68:	7fbb      	ldrb	r3, [r7, #30]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	77bb      	strb	r3, [r7, #30]
 8003c6e:	7fba      	ldrb	r2, [r7, #30]
 8003c70:	7dfb      	ldrb	r3, [r7, #23]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d3ab      	bcc.n	8003bce <Task_Idle+0x2e>
    }

    if (foundActiveDevice)
 8003c76:	7ffb      	ldrb	r3, [r7, #31]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d006      	beq.n	8003c8a <Task_Idle+0xea>
        Scheduler_PostEvent(myScheduler, TASK_IDLE, e);
 8003c7c:	4b09      	ldr	r3, [pc, #36]	@ (8003ca4 <Task_Idle+0x104>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	2100      	movs	r1, #0
 8003c84:	4618      	mov	r0, r3
 8003c86:	f002 fcf1 	bl	800666c <Scheduler_PostEvent>

    DEBUG_TASK_IDLE_LEAVE;
}
 8003c8a:	bf00      	nop
 8003c8c:	3720      	adds	r7, #32
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	0802d08c 	.word	0x0802d08c
 8003c98:	0802dd38 	.word	0x0802dd38
 8003c9c:	0802cdac 	.word	0x0802cdac
 8003ca0:	0802d098 	.word	0x0802d098
 8003ca4:	24000250 	.word	0x24000250

08003ca8 <ExplorerApp_MeasurementReadyCallback>:

/*******************************************************************************
 * Callback functions
 ******************************************************************************/
status_t ExplorerApp_MeasurementReadyCallback(status_t status, argus_hnd_t * argus)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
    if(status < STATUS_OK)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	da05      	bge.n	8003cc4 <ExplorerApp_MeasurementReadyCallback+0x1c>
    {
        return OnError(status, "The measurement task execution failed");
 8003cb8:	490d      	ldr	r1, [pc, #52]	@ (8003cf0 <ExplorerApp_MeasurementReadyCallback+0x48>)
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7ff fde4 	bl	8003888 <OnError>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	e011      	b.n	8003ce8 <ExplorerApp_MeasurementReadyCallback+0x40>
    }

    /* post event for evaluating results */
    status = Scheduler_PostEvent(myScheduler, TASK_EVAL_DAT, argus);
 8003cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf4 <ExplorerApp_MeasurementReadyCallback+0x4c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	2101      	movs	r1, #1
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f002 fccd 	bl	800666c <Scheduler_PostEvent>
 8003cd2:	6078      	str	r0, [r7, #4]

    if(status < STATUS_OK)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	da05      	bge.n	8003ce6 <ExplorerApp_MeasurementReadyCallback+0x3e>
    {
        return OnError(status, "Posting Evaluation Task Error");
 8003cda:	4907      	ldr	r1, [pc, #28]	@ (8003cf8 <ExplorerApp_MeasurementReadyCallback+0x50>)
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7ff fdd3 	bl	8003888 <OnError>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	e000      	b.n	8003ce8 <ExplorerApp_MeasurementReadyCallback+0x40>
    }
    return status;
 8003ce6:	687b      	ldr	r3, [r7, #4]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	0802d0c4 	.word	0x0802d0c4
 8003cf4:	24000250 	.word	0x24000250
 8003cf8:	0802d0ec 	.word	0x0802d0ec

08003cfc <SCI_ErrorCallbackHandler>:

static void SCI_ErrorCallbackHandler(status_t status)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
    OnError(status, "SCI Error");
 8003d04:	4903      	ldr	r1, [pc, #12]	@ (8003d14 <SCI_ErrorCallbackHandler+0x18>)
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7ff fdbe 	bl	8003888 <OnError>
}
 8003d0c:	bf00      	nop
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	0802d10c 	.word	0x0802d10c

08003d18 <SCI_RxCommandCallbackHandler>:

static status_t SCI_RxCommandCallbackHandler(sci_frame_t * cmd)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
    assert(cmd);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d106      	bne.n	8003d34 <SCI_RxCommandCallbackHandler+0x1c>
 8003d26:	4b0e      	ldr	r3, [pc, #56]	@ (8003d60 <SCI_RxCommandCallbackHandler+0x48>)
 8003d28:	4a0e      	ldr	r2, [pc, #56]	@ (8003d64 <SCI_RxCommandCallbackHandler+0x4c>)
 8003d2a:	f240 11c7 	movw	r1, #455	@ 0x1c7
 8003d2e:	480e      	ldr	r0, [pc, #56]	@ (8003d68 <SCI_RxCommandCallbackHandler+0x50>)
 8003d30:	f003 fdba 	bl	80078a8 <__assert_func>
    task_event_t * const event = (task_event_t * const)cmd;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	60fb      	str	r3, [r7, #12]
    status_t status = Scheduler_PostEvent(myScheduler, TASK_HNDL_CMD, event);
 8003d38:	4b0c      	ldr	r3, [pc, #48]	@ (8003d6c <SCI_RxCommandCallbackHandler+0x54>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	2106      	movs	r1, #6
 8003d40:	4618      	mov	r0, r3
 8003d42:	f002 fc93 	bl	800666c <Scheduler_PostEvent>
 8003d46:	60b8      	str	r0, [r7, #8]
    if(status < STATUS_OK)
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	da03      	bge.n	8003d56 <SCI_RxCommandCallbackHandler+0x3e>
    {
        OnError(status, "Command Receive Task Error");
 8003d4e:	4908      	ldr	r1, [pc, #32]	@ (8003d70 <SCI_RxCommandCallbackHandler+0x58>)
 8003d50:	68b8      	ldr	r0, [r7, #8]
 8003d52:	f7ff fd99 	bl	8003888 <OnError>
    }
    return status;
 8003d56:	68bb      	ldr	r3, [r7, #8]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	0802d118 	.word	0x0802d118
 8003d64:	0802dd44 	.word	0x0802dd44
 8003d68:	0802cdac 	.word	0x0802cdac
 8003d6c:	24000250 	.word	0x24000250
 8003d70:	0802d11c 	.word	0x0802d11c

08003d74 <ExplorerApp_ExecuteXtalkCalibrationSequence>:
/*******************************************************************************
 * Functions
 ******************************************************************************/

status_t ExplorerApp_ExecuteXtalkCalibrationSequence(argus_hnd_t * argus)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
    assert(argus != NULL);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d105      	bne.n	8003d8e <ExplorerApp_ExecuteXtalkCalibrationSequence+0x1a>
 8003d82:	4b13      	ldr	r3, [pc, #76]	@ (8003dd0 <ExplorerApp_ExecuteXtalkCalibrationSequence+0x5c>)
 8003d84:	4a13      	ldr	r2, [pc, #76]	@ (8003dd4 <ExplorerApp_ExecuteXtalkCalibrationSequence+0x60>)
 8003d86:	2145      	movs	r1, #69	@ 0x45
 8003d88:	4813      	ldr	r0, [pc, #76]	@ (8003dd8 <ExplorerApp_ExecuteXtalkCalibrationSequence+0x64>)
 8003d8a:	f003 fd8d 	bl	80078a8 <__assert_func>

    bool resume = ExplorerApp_SuspendTimerMeasurement(argus);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 fd3c 	bl	800480c <ExplorerApp_SuspendTimerMeasurement>
 8003d94:	4603      	mov	r3, r0
 8003d96:	73fb      	strb	r3, [r7, #15]

    status_t status = Argus_ExecuteXtalkCalibrationSequence(argus);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f011 fad7 	bl	801534c <Argus_ExecuteXtalkCalibrationSequence>
 8003d9e:	60b8      	str	r0, [r7, #8]
    if (status < STATUS_OK) return status;
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	da01      	bge.n	8003daa <ExplorerApp_ExecuteXtalkCalibrationSequence+0x36>
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	e00d      	b.n	8003dc6 <ExplorerApp_ExecuteXtalkCalibrationSequence+0x52>

    do
    {
        status = Argus_GetStatus(argus);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f011 f96e 	bl	801508c <Argus_GetStatus>
 8003db0:	60b8      	str	r0, [r7, #8]
    } while (status > STATUS_IDLE);
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	dcf8      	bgt.n	8003daa <ExplorerApp_ExecuteXtalkCalibrationSequence+0x36>

    if (resume) ExplorerApp_StartTimerMeasurement(argus);
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <ExplorerApp_ExecuteXtalkCalibrationSequence+0x50>
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 fd50 	bl	8004864 <ExplorerApp_StartTimerMeasurement>

    return status;
 8003dc4:	68bb      	ldr	r3, [r7, #8]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	0802d138 	.word	0x0802d138
 8003dd4:	0802dd64 	.word	0x0802dd64
 8003dd8:	0802d148 	.word	0x0802d148

08003ddc <ExplorerApp_ExecuteOffsetsCalibrationSequence>:

status_t ExplorerApp_ExecuteOffsetsCalibrationSequence(argus_hnd_t * argus, q9_22_t targetRange)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
    assert(argus != NULL);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d105      	bne.n	8003df8 <ExplorerApp_ExecuteOffsetsCalibrationSequence+0x1c>
 8003dec:	4b18      	ldr	r3, [pc, #96]	@ (8003e50 <ExplorerApp_ExecuteOffsetsCalibrationSequence+0x74>)
 8003dee:	4a19      	ldr	r2, [pc, #100]	@ (8003e54 <ExplorerApp_ExecuteOffsetsCalibrationSequence+0x78>)
 8003df0:	2158      	movs	r1, #88	@ 0x58
 8003df2:	4819      	ldr	r0, [pc, #100]	@ (8003e58 <ExplorerApp_ExecuteOffsetsCalibrationSequence+0x7c>)
 8003df4:	f003 fd58 	bl	80078a8 <__assert_func>

    bool resume = ExplorerApp_SuspendTimerMeasurement(argus);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fd07 	bl	800480c <ExplorerApp_SuspendTimerMeasurement>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	72fb      	strb	r3, [r7, #11]

    status_t status = STATUS_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	60fb      	str	r3, [r7, #12]
    if (targetRange <= 0)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	dc04      	bgt.n	8003e16 <ExplorerApp_ExecuteOffsetsCalibrationSequence+0x3a>
    {
        status = Argus_ExecuteRelativeRangeOffsetCalibrationSequence(argus);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f011 fafb 	bl	8015408 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence>
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	e004      	b.n	8003e20 <ExplorerApp_ExecuteOffsetsCalibrationSequence+0x44>
    }
    else
    {
        status = Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence(argus, targetRange);
 8003e16:	6839      	ldr	r1, [r7, #0]
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f011 fb55 	bl	80154c8 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence>
 8003e1e:	60f8      	str	r0, [r7, #12]
    }
    if (status < STATUS_OK) return status;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	da01      	bge.n	8003e2a <ExplorerApp_ExecuteOffsetsCalibrationSequence+0x4e>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	e00d      	b.n	8003e46 <ExplorerApp_ExecuteOffsetsCalibrationSequence+0x6a>

    do
    {
        status = Argus_GetStatus(argus);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f011 f92e 	bl	801508c <Argus_GetStatus>
 8003e30:	60f8      	str	r0, [r7, #12]
    } while (status > STATUS_IDLE);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	dcf8      	bgt.n	8003e2a <ExplorerApp_ExecuteOffsetsCalibrationSequence+0x4e>

    if (resume) ExplorerApp_StartTimerMeasurement(argus);
 8003e38:	7afb      	ldrb	r3, [r7, #11]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <ExplorerApp_ExecuteOffsetsCalibrationSequence+0x68>
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 fd10 	bl	8004864 <ExplorerApp_StartTimerMeasurement>

    return status;
 8003e44:	68fb      	ldr	r3, [r7, #12]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	0802d138 	.word	0x0802d138
 8003e54:	0802dd90 	.word	0x0802dd90
 8003e58:	0802d148 	.word	0x0802d148

08003e5c <ExplorerApp_GetDebugModeEnabled>:
/*******************************************************************************
 * Functions
 ******************************************************************************/

bool ExplorerApp_GetDebugModeEnabled(explorer_t * explorer)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
    return (bool)explorer->Configuration.DebugMode;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	7a1b      	ldrb	r3, [r3, #8]
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	bf14      	ite	ne
 8003e6e:	2301      	movne	r3, #1
 8003e70:	2300      	moveq	r3, #0
 8003e72:	b2db      	uxtb	r3, r3
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <ExplorerApp_SetDebugMode>:

status_t ExplorerApp_SetDebugMode(explorer_t * explorer, bool debugMode)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	70fb      	strb	r3, [r7, #3]
    assert(explorer != NULL);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d105      	bne.n	8003e9e <ExplorerApp_SetDebugMode+0x1e>
 8003e92:	4b07      	ldr	r3, [pc, #28]	@ (8003eb0 <ExplorerApp_SetDebugMode+0x30>)
 8003e94:	4a07      	ldr	r2, [pc, #28]	@ (8003eb4 <ExplorerApp_SetDebugMode+0x34>)
 8003e96:	214b      	movs	r1, #75	@ 0x4b
 8003e98:	4807      	ldr	r0, [pc, #28]	@ (8003eb8 <ExplorerApp_SetDebugMode+0x38>)
 8003e9a:	f003 fd05 	bl	80078a8 <__assert_func>
    explorer->Configuration.DebugMode = debugMode;
 8003e9e:	78fa      	ldrb	r2, [r7, #3]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	721a      	strb	r2, [r3, #8]

    return STATUS_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	0802d174 	.word	0x0802d174
 8003eb4:	0802ddc0 	.word	0x0802ddc0
 8003eb8:	0802d188 	.word	0x0802d188

08003ebc <ExplorerApp_GetDefaultConfiguration>:

void ExplorerApp_GetDefaultConfiguration(explorer_cfg_t * cfg)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
    assert(cfg != 0);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d105      	bne.n	8003ed6 <ExplorerApp_GetDefaultConfiguration+0x1a>
 8003eca:	4b09      	ldr	r3, [pc, #36]	@ (8003ef0 <ExplorerApp_GetDefaultConfiguration+0x34>)
 8003ecc:	4a09      	ldr	r2, [pc, #36]	@ (8003ef4 <ExplorerApp_GetDefaultConfiguration+0x38>)
 8003ece:	2153      	movs	r1, #83	@ 0x53
 8003ed0:	4809      	ldr	r0, [pc, #36]	@ (8003ef8 <ExplorerApp_GetDefaultConfiguration+0x3c>)
 8003ed2:	f003 fce9 	bl	80078a8 <__assert_func>

    cfg->SPIBaudRate = SPI_BAUDRATE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a08      	ldr	r2, [pc, #32]	@ (8003efc <ExplorerApp_GetDefaultConfiguration+0x40>)
 8003eda:	601a      	str	r2, [r3, #0]

#if defined(DEBUG)
    cfg->DebugMode = true;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	711a      	strb	r2, [r3, #4]
#else
    cfg->DebugMode = false;
#endif
    cfg->DataOutputMode = DATA_OUTPUT_STREAMING_FULL;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2203      	movs	r2, #3
 8003ee6:	715a      	strb	r2, [r3, #5]
}
 8003ee8:	bf00      	nop
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	0802d1b4 	.word	0x0802d1b4
 8003ef4:	0802dddc 	.word	0x0802dddc
 8003ef8:	0802d188 	.word	0x0802d188
 8003efc:	01406f40 	.word	0x01406f40

08003f00 <ExplorerApp_GetConfiguration>:

void ExplorerApp_GetConfiguration(explorer_t * explorer, explorer_cfg_t * cfg)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
    assert(explorer != NULL);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d105      	bne.n	8003f1c <ExplorerApp_GetConfiguration+0x1c>
 8003f10:	4b11      	ldr	r3, [pc, #68]	@ (8003f58 <ExplorerApp_GetConfiguration+0x58>)
 8003f12:	4a12      	ldr	r2, [pc, #72]	@ (8003f5c <ExplorerApp_GetConfiguration+0x5c>)
 8003f14:	2161      	movs	r1, #97	@ 0x61
 8003f16:	4812      	ldr	r0, [pc, #72]	@ (8003f60 <ExplorerApp_GetConfiguration+0x60>)
 8003f18:	f003 fcc6 	bl	80078a8 <__assert_func>
    assert(explorer->Argus != NULL);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d105      	bne.n	8003f30 <ExplorerApp_GetConfiguration+0x30>
 8003f24:	4b0f      	ldr	r3, [pc, #60]	@ (8003f64 <ExplorerApp_GetConfiguration+0x64>)
 8003f26:	4a0d      	ldr	r2, [pc, #52]	@ (8003f5c <ExplorerApp_GetConfiguration+0x5c>)
 8003f28:	2162      	movs	r1, #98	@ 0x62
 8003f2a:	480d      	ldr	r0, [pc, #52]	@ (8003f60 <ExplorerApp_GetConfiguration+0x60>)
 8003f2c:	f003 fcbc 	bl	80078a8 <__assert_func>
    assert(cfg != NULL);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d105      	bne.n	8003f42 <ExplorerApp_GetConfiguration+0x42>
 8003f36:	4b0c      	ldr	r3, [pc, #48]	@ (8003f68 <ExplorerApp_GetConfiguration+0x68>)
 8003f38:	4a08      	ldr	r2, [pc, #32]	@ (8003f5c <ExplorerApp_GetConfiguration+0x5c>)
 8003f3a:	2163      	movs	r1, #99	@ 0x63
 8003f3c:	4808      	ldr	r0, [pc, #32]	@ (8003f60 <ExplorerApp_GetConfiguration+0x60>)
 8003f3e:	f003 fcb3 	bl	80078a8 <__assert_func>

    memcpy(cfg, &explorer->Configuration, sizeof(explorer_cfg_t));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	3304      	adds	r3, #4
 8003f46:	2208      	movs	r2, #8
 8003f48:	4619      	mov	r1, r3
 8003f4a:	6838      	ldr	r0, [r7, #0]
 8003f4c:	f027 f8c5 	bl	802b0da <memcpy>
}
 8003f50:	bf00      	nop
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	0802d174 	.word	0x0802d174
 8003f5c:	0802de00 	.word	0x0802de00
 8003f60:	0802d188 	.word	0x0802d188
 8003f64:	0802d1c0 	.word	0x0802d1c0
 8003f68:	0802d1d8 	.word	0x0802d1d8

08003f6c <ExplorerApp_SetConfiguration>:

status_t ExplorerApp_SetConfiguration(explorer_t * explorer, explorer_cfg_t * cfg)
{
 8003f6c:	b590      	push	{r4, r7, lr}
 8003f6e:	b087      	sub	sp, #28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
    assert(explorer != NULL);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d105      	bne.n	8003f88 <ExplorerApp_SetConfiguration+0x1c>
 8003f7c:	4b4e      	ldr	r3, [pc, #312]	@ (80040b8 <ExplorerApp_SetConfiguration+0x14c>)
 8003f7e:	4a4f      	ldr	r2, [pc, #316]	@ (80040bc <ExplorerApp_SetConfiguration+0x150>)
 8003f80:	216a      	movs	r1, #106	@ 0x6a
 8003f82:	484f      	ldr	r0, [pc, #316]	@ (80040c0 <ExplorerApp_SetConfiguration+0x154>)
 8003f84:	f003 fc90 	bl	80078a8 <__assert_func>
    assert(explorer->Argus != NULL);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d105      	bne.n	8003f9c <ExplorerApp_SetConfiguration+0x30>
 8003f90:	4b4c      	ldr	r3, [pc, #304]	@ (80040c4 <ExplorerApp_SetConfiguration+0x158>)
 8003f92:	4a4a      	ldr	r2, [pc, #296]	@ (80040bc <ExplorerApp_SetConfiguration+0x150>)
 8003f94:	216b      	movs	r1, #107	@ 0x6b
 8003f96:	484a      	ldr	r0, [pc, #296]	@ (80040c0 <ExplorerApp_SetConfiguration+0x154>)
 8003f98:	f003 fc86 	bl	80078a8 <__assert_func>

    if (cfg->DataOutputMode != DATA_OUTPUT_STREAMING_1D &&
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	795b      	ldrb	r3, [r3, #5]
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b07      	cmp	r3, #7
 8003fa4:	d022      	beq.n	8003fec <ExplorerApp_SetConfiguration+0x80>
        cfg->DataOutputMode != DATA_OUTPUT_STREAMING_3D &&
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	795b      	ldrb	r3, [r3, #5]
 8003faa:	b2db      	uxtb	r3, r3
    if (cfg->DataOutputMode != DATA_OUTPUT_STREAMING_1D &&
 8003fac:	2b05      	cmp	r3, #5
 8003fae:	d01d      	beq.n	8003fec <ExplorerApp_SetConfiguration+0x80>
        cfg->DataOutputMode != DATA_OUTPUT_STREAMING_FULL &&
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	795b      	ldrb	r3, [r3, #5]
 8003fb4:	b2db      	uxtb	r3, r3
        cfg->DataOutputMode != DATA_OUTPUT_STREAMING_3D &&
 8003fb6:	2b03      	cmp	r3, #3
 8003fb8:	d018      	beq.n	8003fec <ExplorerApp_SetConfiguration+0x80>
        cfg->DataOutputMode != DATA_OUTPUT_STREAMING_1D_DEBUG &&
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	795b      	ldrb	r3, [r3, #5]
 8003fbe:	b2db      	uxtb	r3, r3
        cfg->DataOutputMode != DATA_OUTPUT_STREAMING_FULL &&
 8003fc0:	2b06      	cmp	r3, #6
 8003fc2:	d013      	beq.n	8003fec <ExplorerApp_SetConfiguration+0x80>
        cfg->DataOutputMode != DATA_OUTPUT_STREAMING_3D_DEBUG &&
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	795b      	ldrb	r3, [r3, #5]
 8003fc8:	b2db      	uxtb	r3, r3
        cfg->DataOutputMode != DATA_OUTPUT_STREAMING_1D_DEBUG &&
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d00e      	beq.n	8003fec <ExplorerApp_SetConfiguration+0x80>
        cfg->DataOutputMode != DATA_OUTPUT_STREAMING_FULL_DEBUG)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	795b      	ldrb	r3, [r3, #5]
 8003fd2:	b2db      	uxtb	r3, r3
        cfg->DataOutputMode != DATA_OUTPUT_STREAMING_3D_DEBUG &&
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d009      	beq.n	8003fec <ExplorerApp_SetConfiguration+0x80>
    {
        error_log("Explorer configuration failed: the data output mode (%d) is unknown.",
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	795b      	ldrb	r3, [r3, #5]
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4839      	ldr	r0, [pc, #228]	@ (80040c8 <ExplorerApp_SetConfiguration+0x15c>)
 8003fe2:	f002 fa93 	bl	800650c <print>
                  cfg->DataOutputMode);
        return ERROR_INVALID_ARGUMENT;
 8003fe6:	f06f 0304 	mvn.w	r3, #4
 8003fea:	e060      	b.n	80040ae <ExplorerApp_SetConfiguration+0x142>
    }

    if (cfg->SPIBaudRate > SPI_MAX_BAUDRATE)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a36      	ldr	r2, [pc, #216]	@ (80040cc <ExplorerApp_SetConfiguration+0x160>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d909      	bls.n	800400a <ExplorerApp_SetConfiguration+0x9e>
    {
        error_log("Explorer configuration failed: the SPI baud rate (%d) is too large.\n"
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a34      	ldr	r2, [pc, #208]	@ (80040cc <ExplorerApp_SetConfiguration+0x160>)
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4834      	ldr	r0, [pc, #208]	@ (80040d0 <ExplorerApp_SetConfiguration+0x164>)
 8004000:	f002 fa84 	bl	800650c <print>
                  "It is reset to maximum value of %d bps.",
                  cfg->SPIBaudRate, SPI_MAX_BAUDRATE);
        cfg->SPIBaudRate = SPI_MAX_BAUDRATE;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	4a31      	ldr	r2, [pc, #196]	@ (80040cc <ExplorerApp_SetConfiguration+0x160>)
 8004008:	601a      	str	r2, [r3, #0]
    }

    if (explorer->Configuration.SPIBaudRate != cfg->SPIBaudRate)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	429a      	cmp	r2, r3
 8004014:	d031      	beq.n	800407a <ExplorerApp_SetConfiguration+0x10e>
    {
        const s2pi_slave_t slave = Argus_GetSPISlave(explorer->Argus);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	4618      	mov	r0, r3
 800401c:	f011 fbee 	bl	80157fc <Argus_GetSPISlave>
 8004020:	6178      	str	r0, [r7, #20]

        const status_t status = S2PI_SetBaudRate(slave, cfg->SPIBaudRate);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4619      	mov	r1, r3
 8004028:	6978      	ldr	r0, [r7, #20]
 800402a:	f002 fd97 	bl	8006b5c <S2PI_SetBaudRate>
 800402e:	6138      	str	r0, [r7, #16]
        if (status != STATUS_OK)
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d01b      	beq.n	800406e <ExplorerApp_SetConfiguration+0x102>
        {
            /* Check if the actual baud rate is within 10 % of the desired baud rate. */
            if (status == ERROR_S2PI_INVALID_BAUDRATE)
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f113 0f36 	cmn.w	r3, #54	@ 0x36
 800403c:	d10b      	bne.n	8004056 <ExplorerApp_SetConfiguration+0xea>
                error_log("S2PI: The requested baud rate (%d bps) is not supported! "
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	681c      	ldr	r4, [r3, #0]
 8004042:	6978      	ldr	r0, [r7, #20]
 8004044:	f002 fdba 	bl	8006bbc <S2PI_GetBaudRate>
 8004048:	4603      	mov	r3, r0
 800404a:	461a      	mov	r2, r3
 800404c:	4621      	mov	r1, r4
 800404e:	4821      	ldr	r0, [pc, #132]	@ (80040d4 <ExplorerApp_SetConfiguration+0x168>)
 8004050:	f002 fa5c 	bl	800650c <print>
 8004054:	e003      	b.n	800405e <ExplorerApp_SetConfiguration+0xf2>
                          "The actual baud rate is %d bps.",
                          cfg->SPIBaudRate, S2PI_GetBaudRate(slave));
            else
                error_log("S2PI: Setting the new baud rate failed, "
 8004056:	6939      	ldr	r1, [r7, #16]
 8004058:	481f      	ldr	r0, [pc, #124]	@ (80040d8 <ExplorerApp_SetConfiguration+0x16c>)
 800405a:	f002 fa57 	bl	800650c <print>
                          "error code: %d", status);

            /* Reset baud rate to last setting. */
            S2PI_SetBaudRate(slave, explorer->Configuration.SPIBaudRate);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	4619      	mov	r1, r3
 8004064:	6978      	ldr	r0, [r7, #20]
 8004066:	f002 fd79 	bl	8006b5c <S2PI_SetBaudRate>
            return status;
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	e01f      	b.n	80040ae <ExplorerApp_SetConfiguration+0x142>
        }
        cfg->SPIBaudRate = S2PI_GetBaudRate(slave);
 800406e:	6978      	ldr	r0, [r7, #20]
 8004070:	f002 fda4 	bl	8006bbc <S2PI_GetBaudRate>
 8004074:	4602      	mov	r2, r0
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	601a      	str	r2, [r3, #0]
        //print("S2PI: Baud Rate set to %d bps.", cfg->SPIBaudRate);
    }

    explorer_cfg_t backup_cfg;
    ExplorerApp_GetConfiguration(explorer, &backup_cfg);
 800407a:	f107 0308 	add.w	r3, r7, #8
 800407e:	4619      	mov	r1, r3
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7ff ff3d 	bl	8003f00 <ExplorerApp_GetConfiguration>
    memcpy(&explorer->Configuration, cfg, sizeof(explorer_cfg_t));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	3304      	adds	r3, #4
 800408a:	2208      	movs	r2, #8
 800408c:	6839      	ldr	r1, [r7, #0]
 800408e:	4618      	mov	r0, r3
 8004090:	f027 f823 	bl	802b0da <memcpy>

    return ExplorerApp_SetDebugMode(explorer, cfg->DebugMode);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	791b      	ldrb	r3, [r3, #4]
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	bf14      	ite	ne
 800409e:	2301      	movne	r3, #1
 80040a0:	2300      	moveq	r3, #0
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	4619      	mov	r1, r3
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff feea 	bl	8003e80 <ExplorerApp_SetDebugMode>
 80040ac:	4603      	mov	r3, r0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	371c      	adds	r7, #28
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd90      	pop	{r4, r7, pc}
 80040b6:	bf00      	nop
 80040b8:	0802d174 	.word	0x0802d174
 80040bc:	0802de20 	.word	0x0802de20
 80040c0:	0802d188 	.word	0x0802d188
 80040c4:	0802d1c0 	.word	0x0802d1c0
 80040c8:	0802d1e4 	.word	0x0802d1e4
 80040cc:	01406f40 	.word	0x01406f40
 80040d0:	0802d234 	.word	0x0802d234
 80040d4:	0802d2a8 	.word	0x0802d2a8
 80040d8:	0802d30c 	.word	0x0802d30c

080040dc <ExplorerApp_SetDeviceMeasurementMode>:

status_t ExplorerApp_SetDeviceMeasurementMode(explorer_t * explorer, argus_mode_t mode)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	460b      	mov	r3, r1
 80040e6:	70fb      	strb	r3, [r7, #3]
    assert(explorer != NULL);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d105      	bne.n	80040fa <ExplorerApp_SetDeviceMeasurementMode+0x1e>
 80040ee:	4b1d      	ldr	r3, [pc, #116]	@ (8004164 <ExplorerApp_SetDeviceMeasurementMode+0x88>)
 80040f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004168 <ExplorerApp_SetDeviceMeasurementMode+0x8c>)
 80040f2:	21a2      	movs	r1, #162	@ 0xa2
 80040f4:	481d      	ldr	r0, [pc, #116]	@ (800416c <ExplorerApp_SetDeviceMeasurementMode+0x90>)
 80040f6:	f003 fbd7 	bl	80078a8 <__assert_func>
    assert(explorer->Argus != NULL);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d105      	bne.n	800410e <ExplorerApp_SetDeviceMeasurementMode+0x32>
 8004102:	4b1b      	ldr	r3, [pc, #108]	@ (8004170 <ExplorerApp_SetDeviceMeasurementMode+0x94>)
 8004104:	4a18      	ldr	r2, [pc, #96]	@ (8004168 <ExplorerApp_SetDeviceMeasurementMode+0x8c>)
 8004106:	21a3      	movs	r1, #163	@ 0xa3
 8004108:	4818      	ldr	r0, [pc, #96]	@ (800416c <ExplorerApp_SetDeviceMeasurementMode+0x90>)
 800410a:	f003 fbcd 	bl	80078a8 <__assert_func>

    explorer_cfg_t ecfg = { 0 };
 800410e:	f107 030c 	add.w	r3, r7, #12
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	605a      	str	r2, [r3, #4]
    ExplorerApp_GetConfiguration(explorer, &ecfg);
 8004118:	f107 030c 	add.w	r3, r7, #12
 800411c:	4619      	mov	r1, r3
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7ff feee 	bl	8003f00 <ExplorerApp_GetConfiguration>

    argus_hnd_t * argus = explorer->Argus;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	61fb      	str	r3, [r7, #28]

    bool resume = ExplorerApp_SuspendTimerMeasurement(argus);
 800412a:	69f8      	ldr	r0, [r7, #28]
 800412c:	f000 fb6e 	bl	800480c <ExplorerApp_SuspendTimerMeasurement>
 8004130:	4603      	mov	r3, r0
 8004132:	76fb      	strb	r3, [r7, #27]
    status_t status = Argus_SetMeasurementMode(argus, mode);
 8004134:	78fb      	ldrb	r3, [r7, #3]
 8004136:	4619      	mov	r1, r3
 8004138:	69f8      	ldr	r0, [r7, #28]
 800413a:	f011 fb6b 	bl	8015814 <Argus_SetMeasurementMode>
 800413e:	6178      	str	r0, [r7, #20]
    ExplorerApp_ResetDefaultDataStreamingMode(explorer);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f831 	bl	80041a8 <ExplorerApp_ResetDefaultDataStreamingMode>
    ExplorerApp_DisplayUnambiguousRange(argus);
 8004146:	69f8      	ldr	r0, [r7, #28]
 8004148:	f000 fc0a 	bl	8004960 <ExplorerApp_DisplayUnambiguousRange>
    if (resume) ExplorerApp_StartTimerMeasurement(argus);
 800414c:	7efb      	ldrb	r3, [r7, #27]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <ExplorerApp_SetDeviceMeasurementMode+0x7c>
 8004152:	69f8      	ldr	r0, [r7, #28]
 8004154:	f000 fb86 	bl	8004864 <ExplorerApp_StartTimerMeasurement>
    return status;
 8004158:	697b      	ldr	r3, [r7, #20]
}
 800415a:	4618      	mov	r0, r3
 800415c:	3720      	adds	r7, #32
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	0802d174 	.word	0x0802d174
 8004168:	0802de40 	.word	0x0802de40
 800416c:	0802d188 	.word	0x0802d188
 8004170:	0802d1c0 	.word	0x0802d1c0

08004174 <ExplorerApp_GetDataOutputMode>:
    if (resume) ExplorerApp_StartTimerMeasurement(argus);
    return status;
}

data_output_mode_t ExplorerApp_GetDataOutputMode(explorer_t * explorer)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
    assert(explorer != NULL);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d105      	bne.n	800418e <ExplorerApp_GetDataOutputMode+0x1a>
 8004182:	4b06      	ldr	r3, [pc, #24]	@ (800419c <ExplorerApp_GetDataOutputMode+0x28>)
 8004184:	4a06      	ldr	r2, [pc, #24]	@ (80041a0 <ExplorerApp_GetDataOutputMode+0x2c>)
 8004186:	21c3      	movs	r1, #195	@ 0xc3
 8004188:	4806      	ldr	r0, [pc, #24]	@ (80041a4 <ExplorerApp_GetDataOutputMode+0x30>)
 800418a:	f003 fb8d 	bl	80078a8 <__assert_func>
    return explorer->Configuration.DataOutputMode;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	7a5b      	ldrb	r3, [r3, #9]
 8004192:	b2db      	uxtb	r3, r3
}
 8004194:	4618      	mov	r0, r3
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	0802d174 	.word	0x0802d174
 80041a0:	0802de68 	.word	0x0802de68
 80041a4:	0802d188 	.word	0x0802d188

080041a8 <ExplorerApp_ResetDefaultDataStreamingMode>:

void ExplorerApp_ResetDefaultDataStreamingMode(explorer_t * explorer)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
    assert(explorer != NULL);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d105      	bne.n	80041c2 <ExplorerApp_ResetDefaultDataStreamingMode+0x1a>
 80041b6:	4b15      	ldr	r3, [pc, #84]	@ (800420c <ExplorerApp_ResetDefaultDataStreamingMode+0x64>)
 80041b8:	4a15      	ldr	r2, [pc, #84]	@ (8004210 <ExplorerApp_ResetDefaultDataStreamingMode+0x68>)
 80041ba:	21c9      	movs	r1, #201	@ 0xc9
 80041bc:	4815      	ldr	r0, [pc, #84]	@ (8004214 <ExplorerApp_ResetDefaultDataStreamingMode+0x6c>)
 80041be:	f003 fb73 	bl	80078a8 <__assert_func>
    assert(explorer->Argus != NULL);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d105      	bne.n	80041d6 <ExplorerApp_ResetDefaultDataStreamingMode+0x2e>
 80041ca:	4b13      	ldr	r3, [pc, #76]	@ (8004218 <ExplorerApp_ResetDefaultDataStreamingMode+0x70>)
 80041cc:	4a10      	ldr	r2, [pc, #64]	@ (8004210 <ExplorerApp_ResetDefaultDataStreamingMode+0x68>)
 80041ce:	21ca      	movs	r1, #202	@ 0xca
 80041d0:	4810      	ldr	r0, [pc, #64]	@ (8004214 <ExplorerApp_ResetDefaultDataStreamingMode+0x6c>)
 80041d2:	f003 fb69 	bl	80078a8 <__assert_func>

    argus_mode_t mode = ARGUS_MODE_SHORT_RANGE;
 80041d6:	2301      	movs	r3, #1
 80041d8:	73fb      	strb	r3, [r7, #15]
    if (Argus_GetMeasurementMode(explorer->Argus, &mode) == STATUS_OK)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f107 020f 	add.w	r2, r7, #15
 80041e2:	4611      	mov	r1, r2
 80041e4:	4618      	mov	r0, r3
 80041e6:	f011 fb77 	bl	80158d8 <Argus_GetMeasurementMode>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d109      	bne.n	8004204 <ExplorerApp_ResetDefaultDataStreamingMode+0x5c>
    {
        explorer->Configuration.DataOutputMode = (mode & ARGUS_MODE_FLAG_HIGH_SPEED) ?
 80041f0:	7bfb      	ldrb	r3, [r7, #15]
 80041f2:	f003 0304 	and.w	r3, r3, #4
                DATA_OUTPUT_STREAMING_1D : DATA_OUTPUT_STREAMING_FULL;
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <ExplorerApp_ResetDefaultDataStreamingMode+0x56>
 80041fa:	2207      	movs	r2, #7
 80041fc:	e000      	b.n	8004200 <ExplorerApp_ResetDefaultDataStreamingMode+0x58>
 80041fe:	2203      	movs	r2, #3
        explorer->Configuration.DataOutputMode = (mode & ARGUS_MODE_FLAG_HIGH_SPEED) ?
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	725a      	strb	r2, [r3, #9]
    }
}
 8004204:	bf00      	nop
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	0802d174 	.word	0x0802d174
 8004210:	0802de88 	.word	0x0802de88
 8004214:	0802d188 	.word	0x0802d188
 8004218:	0802d1c0 	.word	0x0802d1c0

0800421c <CheckConnectedDevice>:
/*******************************************************************************
 * Local Functions
 ******************************************************************************/

static status_t CheckConnectedDevice(sci_device_t slave)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08e      	sub	sp, #56	@ 0x38
 8004220:	af02      	add	r7, sp, #8
 8004222:	4603      	mov	r3, r0
 8004224:	71fb      	strb	r3, [r7, #7]
    status_t status = STATUS_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	62fb      	str	r3, [r7, #44]	@ 0x2c

    uint8_t data[17U] = {0};
 800422a:	2300      	movs	r3, #0
 800422c:	617b      	str	r3, [r7, #20]
 800422e:	f107 0318 	add.w	r3, r7, #24
 8004232:	2200      	movs	r2, #0
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	605a      	str	r2, [r3, #4]
 8004238:	609a      	str	r2, [r3, #8]
 800423a:	731a      	strb	r2, [r3, #12]
    for (uint8_t i = 1; i < 17U; ++i) data[i] = i;
 800423c:	2301      	movs	r3, #1
 800423e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004242:	e00c      	b.n	800425e <CheckConnectedDevice+0x42>
 8004244:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004248:	3330      	adds	r3, #48	@ 0x30
 800424a:	443b      	add	r3, r7
 800424c:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8004250:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8004254:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004258:	3301      	adds	r3, #1
 800425a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800425e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004262:	2b10      	cmp	r3, #16
 8004264:	d9ee      	bls.n	8004244 <CheckConnectedDevice+0x28>

    for (uint8_t n = 0; n < 2; n++)
 8004266:	2300      	movs	r3, #0
 8004268:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800426c:	e03a      	b.n	80042e4 <CheckConnectedDevice+0xc8>
    {
        data[0] = 0x04;
 800426e:	2304      	movs	r3, #4
 8004270:	753b      	strb	r3, [r7, #20]
        status = S2PI_TransferFrame(slave, data, data, 17U, 0, 0);
 8004272:	79f8      	ldrb	r0, [r7, #7]
 8004274:	f107 0214 	add.w	r2, r7, #20
 8004278:	f107 0114 	add.w	r1, r7, #20
 800427c:	2300      	movs	r3, #0
 800427e:	9301      	str	r3, [sp, #4]
 8004280:	2300      	movs	r3, #0
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	2311      	movs	r3, #17
 8004286:	f002 fdd3 	bl	8006e30 <S2PI_TransferFrame>
 800428a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (status < STATUS_OK)
 800428c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800428e:	2b00      	cmp	r3, #0
 8004290:	da01      	bge.n	8004296 <CheckConnectedDevice+0x7a>
        {
            return status;
 8004292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004294:	e05e      	b.n	8004354 <CheckConnectedDevice+0x138>
        }

        ltc_t start;
        Time_GetNow(&start);
 8004296:	f107 030c 	add.w	r3, r7, #12
 800429a:	4618      	mov	r0, r3
 800429c:	f00f fed6 	bl	801404c <Time_GetNow>
        do
        {
            status = S2PI_GetStatus(slave);
 80042a0:	79fb      	ldrb	r3, [r7, #7]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f002 fca4 	bl	8006bf0 <S2PI_GetStatus>
 80042a8:	62f8      	str	r0, [r7, #44]	@ 0x2c
            if (Time_CheckTimeoutMSec(&start, 100))
 80042aa:	f107 030c 	add.w	r3, r7, #12
 80042ae:	2164      	movs	r1, #100	@ 0x64
 80042b0:	4618      	mov	r0, r3
 80042b2:	f00f ff0f 	bl	80140d4 <Time_CheckTimeoutMSec>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d002      	beq.n	80042c2 <CheckConnectedDevice+0xa6>
            {
                status = ERROR_TIMEOUT;
 80042bc:	f06f 0305 	mvn.w	r3, #5
 80042c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
        }
        while (status == STATUS_BUSY);
 80042c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d0eb      	beq.n	80042a0 <CheckConnectedDevice+0x84>

        if (status < STATUS_OK)
 80042c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	da05      	bge.n	80042da <CheckConnectedDevice+0xbe>
        {
            S2PI_Abort(slave);
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f002 fea1 	bl	8007018 <S2PI_Abort>
            return status;
 80042d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d8:	e03c      	b.n	8004354 <CheckConnectedDevice+0x138>
    for (uint8_t n = 0; n < 2; n++)
 80042da:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80042de:	3301      	adds	r3, #1
 80042e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80042e4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d9c0      	bls.n	800426e <CheckConnectedDevice+0x52>
        }
    }

    bool hasData = true;
 80042ec:	2301      	movs	r3, #1
 80042ee:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    for (uint8_t i = 1; i < 17U; ++i)
 80042f2:	2301      	movs	r3, #1
 80042f4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80042f8:	e020      	b.n	800433c <CheckConnectedDevice+0x120>
    {
        uint8_t j = ~i; // devices w/ inverted MISO
 80042fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80042fe:	43db      	mvns	r3, r3
 8004300:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if ((data[i] != i) && (data[i] != j))
 8004304:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004308:	3330      	adds	r3, #48	@ 0x30
 800430a:	443b      	add	r3, r7
 800430c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8004310:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004314:	429a      	cmp	r2, r3
 8004316:	d00c      	beq.n	8004332 <CheckConnectedDevice+0x116>
 8004318:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800431c:	3330      	adds	r3, #48	@ 0x30
 800431e:	443b      	add	r3, r7
 8004320:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8004324:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004328:	429a      	cmp	r2, r3
 800432a:	d002      	beq.n	8004332 <CheckConnectedDevice+0x116>
            hasData = false;
 800432c:	2300      	movs	r3, #0
 800432e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    for (uint8_t i = 1; i < 17U; ++i)
 8004332:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004336:	3301      	adds	r3, #1
 8004338:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 800433c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004340:	2b10      	cmp	r3, #16
 8004342:	d9da      	bls.n	80042fa <CheckConnectedDevice+0xde>
    }

    if (hasData) return STATUS_OK;
 8004344:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <CheckConnectedDevice+0x134>
 800434c:	2300      	movs	r3, #0
 800434e:	e001      	b.n	8004354 <CheckConnectedDevice+0x138>

    return ERROR_ARGUS_NOT_CONNECTED;
 8004350:	f06f 0364 	mvn.w	r3, #100	@ 0x64
}
 8004354:	4618      	mov	r0, r3
 8004356:	3730      	adds	r7, #48	@ 0x30
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <ExplorerApp_GetArgusPtr>:
/*******************************************************************************
 * Functions
 ******************************************************************************/

argus_hnd_t * ExplorerApp_GetArgusPtr(sci_device_t deviceID)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	4603      	mov	r3, r0
 8004364:	71fb      	strb	r3, [r7, #7]
    assert(deviceID <= EXPLORER_DEVICE_ID_MAX);
 8004366:	79fb      	ldrb	r3, [r7, #7]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d905      	bls.n	8004378 <ExplorerApp_GetArgusPtr+0x1c>
 800436c:	4b0a      	ldr	r3, [pc, #40]	@ (8004398 <ExplorerApp_GetArgusPtr+0x3c>)
 800436e:	4a0b      	ldr	r2, [pc, #44]	@ (800439c <ExplorerApp_GetArgusPtr+0x40>)
 8004370:	217b      	movs	r1, #123	@ 0x7b
 8004372:	480b      	ldr	r0, [pc, #44]	@ (80043a0 <ExplorerApp_GetArgusPtr+0x44>)
 8004374:	f003 fa98 	bl	80078a8 <__assert_func>
    explorer_t * explorer = ExplorerApp_GetExplorerPtr(deviceID);
 8004378:	79fb      	ldrb	r3, [r7, #7]
 800437a:	4618      	mov	r0, r3
 800437c:	f000 f812 	bl	80043a4 <ExplorerApp_GetExplorerPtr>
 8004380:	60f8      	str	r0, [r7, #12]
//    assert(explorer != NULL && explorer->Argus != NULL);
    return explorer != NULL ? explorer->Argus : NULL;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d002      	beq.n	800438e <ExplorerApp_GetArgusPtr+0x32>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	e000      	b.n	8004390 <ExplorerApp_GetArgusPtr+0x34>
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	0802d34c 	.word	0x0802d34c
 800439c:	0802deb4 	.word	0x0802deb4
 80043a0:	0802d370 	.word	0x0802d370

080043a4 <ExplorerApp_GetExplorerPtr>:

explorer_t * ExplorerApp_GetExplorerPtr(sci_device_t deviceID)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	4603      	mov	r3, r0
 80043ac:	71fb      	strb	r3, [r7, #7]
    assert(deviceID <= EXPLORER_DEVICE_ID_MAX);
 80043ae:	79fb      	ldrb	r3, [r7, #7]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d905      	bls.n	80043c0 <ExplorerApp_GetExplorerPtr+0x1c>
 80043b4:	4b09      	ldr	r3, [pc, #36]	@ (80043dc <ExplorerApp_GetExplorerPtr+0x38>)
 80043b6:	4a0a      	ldr	r2, [pc, #40]	@ (80043e0 <ExplorerApp_GetExplorerPtr+0x3c>)
 80043b8:	2183      	movs	r1, #131	@ 0x83
 80043ba:	480a      	ldr	r0, [pc, #40]	@ (80043e4 <ExplorerApp_GetExplorerPtr+0x40>)
 80043bc:	f003 fa74 	bl	80078a8 <__assert_func>
    return (deviceID <= EXPLORER_DEVICE_ID_MAX) ? explorerIDMap[deviceID] : NULL;
 80043c0:	79fb      	ldrb	r3, [r7, #7]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d804      	bhi.n	80043d0 <ExplorerApp_GetExplorerPtr+0x2c>
 80043c6:	79fb      	ldrb	r3, [r7, #7]
 80043c8:	4a07      	ldr	r2, [pc, #28]	@ (80043e8 <ExplorerApp_GetExplorerPtr+0x44>)
 80043ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043ce:	e000      	b.n	80043d2 <ExplorerApp_GetExplorerPtr+0x2e>
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	0802d34c 	.word	0x0802d34c
 80043e0:	0802decc 	.word	0x0802decc
 80043e4:	0802d370 	.word	0x0802d370
 80043e8:	2400139c 	.word	0x2400139c

080043ec <ExplorerApp_GetExplorerPtrFromArgus>:

explorer_t * ExplorerApp_GetExplorerPtrFromArgus(argus_hnd_t * argus)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
    assert(argus != NULL);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d105      	bne.n	8004406 <ExplorerApp_GetExplorerPtrFromArgus+0x1a>
 80043fa:	4b13      	ldr	r3, [pc, #76]	@ (8004448 <ExplorerApp_GetExplorerPtrFromArgus+0x5c>)
 80043fc:	4a13      	ldr	r2, [pc, #76]	@ (800444c <ExplorerApp_GetExplorerPtrFromArgus+0x60>)
 80043fe:	2189      	movs	r1, #137	@ 0x89
 8004400:	4813      	ldr	r0, [pc, #76]	@ (8004450 <ExplorerApp_GetExplorerPtrFromArgus+0x64>)
 8004402:	f003 fa51 	bl	80078a8 <__assert_func>

    for (uint8_t i = 0; i < EXPLORER_DEVICE_COUNT; i++)
 8004406:	2300      	movs	r3, #0
 8004408:	73fb      	strb	r3, [r7, #15]
 800440a:	e010      	b.n	800442e <ExplorerApp_GetExplorerPtrFromArgus+0x42>
    {
        if (explorerArray[i].Argus == argus)
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	4a11      	ldr	r2, [pc, #68]	@ (8004454 <ExplorerApp_GetExplorerPtrFromArgus+0x68>)
 8004410:	011b      	lsls	r3, r3, #4
 8004412:	4413      	add	r3, r2
 8004414:	330c      	adds	r3, #12
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	429a      	cmp	r2, r3
 800441c:	d104      	bne.n	8004428 <ExplorerApp_GetExplorerPtrFromArgus+0x3c>
            return &explorerArray[i];
 800441e:	7bfb      	ldrb	r3, [r7, #15]
 8004420:	011b      	lsls	r3, r3, #4
 8004422:	4a0c      	ldr	r2, [pc, #48]	@ (8004454 <ExplorerApp_GetExplorerPtrFromArgus+0x68>)
 8004424:	4413      	add	r3, r2
 8004426:	e00b      	b.n	8004440 <ExplorerApp_GetExplorerPtrFromArgus+0x54>
    for (uint8_t i = 0; i < EXPLORER_DEVICE_COUNT; i++)
 8004428:	7bfb      	ldrb	r3, [r7, #15]
 800442a:	3301      	adds	r3, #1
 800442c:	73fb      	strb	r3, [r7, #15]
 800442e:	7bfb      	ldrb	r3, [r7, #15]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d9eb      	bls.n	800440c <ExplorerApp_GetExplorerPtrFromArgus+0x20>
    }

    assert(0);
 8004434:	4b08      	ldr	r3, [pc, #32]	@ (8004458 <ExplorerApp_GetExplorerPtrFromArgus+0x6c>)
 8004436:	4a05      	ldr	r2, [pc, #20]	@ (800444c <ExplorerApp_GetExplorerPtrFromArgus+0x60>)
 8004438:	2191      	movs	r1, #145	@ 0x91
 800443a:	4805      	ldr	r0, [pc, #20]	@ (8004450 <ExplorerApp_GetExplorerPtrFromArgus+0x64>)
 800443c:	f003 fa34 	bl	80078a8 <__assert_func>
    return NULL;
}
 8004440:	4618      	mov	r0, r3
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	0802d39c 	.word	0x0802d39c
 800444c:	0802dee8 	.word	0x0802dee8
 8004450:	0802d370 	.word	0x0802d370
 8004454:	2400137c 	.word	0x2400137c
 8004458:	0802d3ac 	.word	0x0802d3ac

0800445c <ExplorerApp_GetInitializedExplorerCount>:

uint8_t ExplorerApp_GetInitializedExplorerCount()
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
    uint8_t count = 0;
 8004462:	2300      	movs	r3, #0
 8004464:	71fb      	strb	r3, [r7, #7]
    for (uint8_t idx = 0; idx < EXPLORER_DEVICE_COUNT; ++idx)
 8004466:	2300      	movs	r3, #0
 8004468:	71bb      	strb	r3, [r7, #6]
 800446a:	e00d      	b.n	8004488 <ExplorerApp_GetInitializedExplorerCount+0x2c>
    {
        if (explorerArray[idx].Argus != NULL)
 800446c:	79bb      	ldrb	r3, [r7, #6]
 800446e:	4a0b      	ldr	r2, [pc, #44]	@ (800449c <ExplorerApp_GetInitializedExplorerCount+0x40>)
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	4413      	add	r3, r2
 8004474:	330c      	adds	r3, #12
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d002      	beq.n	8004482 <ExplorerApp_GetInitializedExplorerCount+0x26>
            count++;
 800447c:	79fb      	ldrb	r3, [r7, #7]
 800447e:	3301      	adds	r3, #1
 8004480:	71fb      	strb	r3, [r7, #7]
    for (uint8_t idx = 0; idx < EXPLORER_DEVICE_COUNT; ++idx)
 8004482:	79bb      	ldrb	r3, [r7, #6]
 8004484:	3301      	adds	r3, #1
 8004486:	71bb      	strb	r3, [r7, #6]
 8004488:	79bb      	ldrb	r3, [r7, #6]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d9ee      	bls.n	800446c <ExplorerApp_GetInitializedExplorerCount+0x10>
    }
    return count;
 800448e:	79fb      	ldrb	r3, [r7, #7]
}
 8004490:	4618      	mov	r0, r3
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	2400137c 	.word	0x2400137c

080044a0 <ExplorerApp_GetInitializedExplorer>:

explorer_t * ExplorerApp_GetInitializedExplorer(uint8_t index)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	4603      	mov	r3, r0
 80044a8:	71fb      	strb	r3, [r7, #7]
    assert(index < EXPLORER_DEVICE_COUNT);
 80044aa:	79fb      	ldrb	r3, [r7, #7]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d905      	bls.n	80044bc <ExplorerApp_GetInitializedExplorer+0x1c>
 80044b0:	4b0a      	ldr	r3, [pc, #40]	@ (80044dc <ExplorerApp_GetInitializedExplorer+0x3c>)
 80044b2:	4a0b      	ldr	r2, [pc, #44]	@ (80044e0 <ExplorerApp_GetInitializedExplorer+0x40>)
 80044b4:	21a2      	movs	r1, #162	@ 0xa2
 80044b6:	480b      	ldr	r0, [pc, #44]	@ (80044e4 <ExplorerApp_GetInitializedExplorer+0x44>)
 80044b8:	f003 f9f6 	bl	80078a8 <__assert_func>

    explorer_t * explorer = &explorerArray[index];
 80044bc:	79fb      	ldrb	r3, [r7, #7]
 80044be:	011b      	lsls	r3, r3, #4
 80044c0:	4a09      	ldr	r2, [pc, #36]	@ (80044e8 <ExplorerApp_GetInitializedExplorer+0x48>)
 80044c2:	4413      	add	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]
    return explorer->Argus != NULL ? explorer : NULL;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <ExplorerApp_GetInitializedExplorer+0x32>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	e000      	b.n	80044d4 <ExplorerApp_GetInitializedExplorer+0x34>
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	0802d3b0 	.word	0x0802d3b0
 80044e0:	0802df0c 	.word	0x0802df0c
 80044e4:	0802d370 	.word	0x0802d370
 80044e8:	2400137c 	.word	0x2400137c

080044ec <ExplorerApp_GetDeviceID>:

sci_device_t ExplorerApp_GetDeviceID(explorer_t * explorer)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
    assert(explorer != NULL);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d105      	bne.n	8004506 <ExplorerApp_GetDeviceID+0x1a>
 80044fa:	4b06      	ldr	r3, [pc, #24]	@ (8004514 <ExplorerApp_GetDeviceID+0x28>)
 80044fc:	4a06      	ldr	r2, [pc, #24]	@ (8004518 <ExplorerApp_GetDeviceID+0x2c>)
 80044fe:	21aa      	movs	r1, #170	@ 0xaa
 8004500:	4806      	ldr	r0, [pc, #24]	@ (800451c <ExplorerApp_GetDeviceID+0x30>)
 8004502:	f003 f9d1 	bl	80078a8 <__assert_func>
    return explorer->DeviceID;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	781b      	ldrb	r3, [r3, #0]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	0802d3d0 	.word	0x0802d3d0
 8004518:	0802df30 	.word	0x0802df30
 800451c:	0802d370 	.word	0x0802d370

08004520 <ExplorerApp_InitDevice>:

status_t ExplorerApp_InitDevice(explorer_t * explorer, argus_mode_t mode, bool reinit)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b08a      	sub	sp, #40	@ 0x28
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	70fb      	strb	r3, [r7, #3]
 800452c:	4613      	mov	r3, r2
 800452e:	70bb      	strb	r3, [r7, #2]
    assert(explorer != NULL);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d105      	bne.n	8004542 <ExplorerApp_InitDevice+0x22>
 8004536:	4b4d      	ldr	r3, [pc, #308]	@ (800466c <ExplorerApp_InitDevice+0x14c>)
 8004538:	4a4d      	ldr	r2, [pc, #308]	@ (8004670 <ExplorerApp_InitDevice+0x150>)
 800453a:	21b0      	movs	r1, #176	@ 0xb0
 800453c:	484d      	ldr	r0, [pc, #308]	@ (8004674 <ExplorerApp_InitDevice+0x154>)
 800453e:	f003 f9b3 	bl	80078a8 <__assert_func>

    if (explorer->Argus == NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d111      	bne.n	800456e <ExplorerApp_InitDevice+0x4e>
    {
        explorer->Argus = Argus_CreateHandle();
 800454a:	f010 fd8d 	bl	8015068 <Argus_CreateHandle>
 800454e:	4602      	mov	r2, r0
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	60da      	str	r2, [r3, #12]
        if (explorer->Argus == NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d108      	bne.n	800456e <ExplorerApp_InitDevice+0x4e>
        {
            error_log("Failed to allocate the memory for the AFBR-S50 API handle.");
 800455c:	4846      	ldr	r0, [pc, #280]	@ (8004678 <ExplorerApp_InitDevice+0x158>)
 800455e:	f001 ffd5 	bl	800650c <print>
            assert(0);
 8004562:	4b46      	ldr	r3, [pc, #280]	@ (800467c <ExplorerApp_InitDevice+0x15c>)
 8004564:	4a42      	ldr	r2, [pc, #264]	@ (8004670 <ExplorerApp_InitDevice+0x150>)
 8004566:	21b8      	movs	r1, #184	@ 0xb8
 8004568:	4842      	ldr	r0, [pc, #264]	@ (8004674 <ExplorerApp_InitDevice+0x154>)
 800456a:	f003 f99d 	bl	80078a8 <__assert_func>
            return ERROR_FAIL;
        }
    }

    sci_device_t slave = S2PI_SLAVE_NONE;
 800456e:	2300      	movs	r3, #0
 8004570:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (reinit)
 8004574:	78bb      	ldrb	r3, [r7, #2]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d016      	beq.n	80045a8 <ExplorerApp_InitDevice+0x88>
    {
        slave = (sci_device_t)Argus_GetSPISlave(explorer->Argus);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	4618      	mov	r0, r3
 8004580:	f011 f93c 	bl	80157fc <Argus_GetSPISlave>
 8004584:	4603      	mov	r3, r0
 8004586:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        status_t status = Argus_Deinit(explorer->Argus);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	4618      	mov	r0, r3
 8004590:	f010 fd24 	bl	8014fdc <Argus_Deinit>
 8004594:	6238      	str	r0, [r7, #32]
        if (status < STATUS_OK)
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	2b00      	cmp	r3, #0
 800459a:	da05      	bge.n	80045a8 <ExplorerApp_InitDevice+0x88>
        {
            error_log("Failed to de-initialize the AFBR-S50 API handle, "
 800459c:	6a39      	ldr	r1, [r7, #32]
 800459e:	4838      	ldr	r0, [pc, #224]	@ (8004680 <ExplorerApp_InitDevice+0x160>)
 80045a0:	f001 ffb4 	bl	800650c <print>
                      "error code: %d", status);
            return status;
 80045a4:	6a3b      	ldr	r3, [r7, #32]
 80045a6:	e05d      	b.n	8004664 <ExplorerApp_InitDevice+0x144>
        }
    }

    if (slave == S2PI_SLAVE_NONE)
 80045a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d116      	bne.n	80045de <ExplorerApp_InitDevice+0xbe>
    {
        slave = explorer->DeviceID;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        /* Check for device connection in terms of slave and baud rate. */
        status_t status = CheckConnectedDevice(slave);
 80045b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045bc:	4618      	mov	r0, r3
 80045be:	f7ff fe2d 	bl	800421c <CheckConnectedDevice>
 80045c2:	61f8      	str	r0, [r7, #28]
        if (status < STATUS_OK)
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	da09      	bge.n	80045de <ExplorerApp_InitDevice+0xbe>
        {
            Argus_DestroyHandle(explorer->Argus);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f010 fd40 	bl	8015054 <Argus_DestroyHandle>
            explorer->Argus = NULL;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	60da      	str	r2, [r3, #12]
            /* Do not print error here as this happens upon initialization
             * while searching for devices. */
            // error_log("No suitable device connected, error code: %d", status);
            return status;
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	e042      	b.n	8004664 <ExplorerApp_InitDevice+0x144>
        }
    }

    assert(slave != S2PI_SLAVE_NONE);
 80045de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d105      	bne.n	80045f2 <ExplorerApp_InitDevice+0xd2>
 80045e6:	4b27      	ldr	r3, [pc, #156]	@ (8004684 <ExplorerApp_InitDevice+0x164>)
 80045e8:	4a21      	ldr	r2, [pc, #132]	@ (8004670 <ExplorerApp_InitDevice+0x150>)
 80045ea:	21db      	movs	r1, #219	@ 0xdb
 80045ec:	4821      	ldr	r0, [pc, #132]	@ (8004674 <ExplorerApp_InitDevice+0x154>)
 80045ee:	f003 f95b 	bl	80078a8 <__assert_func>

    /* Device initialization */
    ltc_t start = Time_Now();
 80045f2:	f107 030c 	add.w	r3, r7, #12
 80045f6:	4618      	mov	r0, r3
 80045f8:	f00f fd2c 	bl	8014054 <Time_Now>
    status_t status = Argus_InitMode(explorer->Argus, slave, mode);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8004604:	78fa      	ldrb	r2, [r7, #3]
 8004606:	4618      	mov	r0, r3
 8004608:	f010 fbaa 	bl	8014d60 <Argus_InitMode>
 800460c:	61b8      	str	r0, [r7, #24]
    uint32_t elapsed = Time_GetElapsedUSec(&start);
 800460e:	f107 030c 	add.w	r3, r7, #12
 8004612:	4618      	mov	r0, r3
 8004614:	f00f fd2e 	bl	8014074 <Time_GetElapsedUSec>
 8004618:	6178      	str	r0, [r7, #20]
    print("Init Time: %d us", elapsed);
 800461a:	6979      	ldr	r1, [r7, #20]
 800461c:	481a      	ldr	r0, [pc, #104]	@ (8004688 <ExplorerApp_InitDevice+0x168>)
 800461e:	f001 ff75 	bl	800650c <print>
    if (status == ERROR_ARGUS_UNKNOWN_MODULE) status = STATUS_OK; // ignore unknown modules
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	f113 0fc7 	cmn.w	r3, #199	@ 0xc7
 8004628:	d102      	bne.n	8004630 <ExplorerApp_InitDevice+0x110>
 800462a:	2300      	movs	r3, #0
 800462c:	61bb      	str	r3, [r7, #24]
 800462e:	e010      	b.n	8004652 <ExplorerApp_InitDevice+0x132>
    else if (status < STATUS_OK)
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	2b00      	cmp	r3, #0
 8004634:	da0d      	bge.n	8004652 <ExplorerApp_InitDevice+0x132>
    {
        Argus_DestroyHandle(explorer->Argus);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	4618      	mov	r0, r3
 800463c:	f010 fd0a 	bl	8015054 <Argus_DestroyHandle>
        explorer->Argus = NULL;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	60da      	str	r2, [r3, #12]
        error_log("Failed to initialize AFBR-S50 API, error code: %d", status);
 8004646:	69b9      	ldr	r1, [r7, #24]
 8004648:	4810      	ldr	r0, [pc, #64]	@ (800468c <ExplorerApp_InitDevice+0x16c>)
 800464a:	f001 ff5f 	bl	800650c <print>
        return status;
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	e008      	b.n	8004664 <ExplorerApp_InitDevice+0x144>
    }

    ExplorerApp_ResetDefaultDataStreamingMode(explorer);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7ff fda8 	bl	80041a8 <ExplorerApp_ResetDefaultDataStreamingMode>
    ExplorerApp_DisplayUnambiguousRange(explorer->Argus);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	4618      	mov	r0, r3
 800465e:	f000 f97f 	bl	8004960 <ExplorerApp_DisplayUnambiguousRange>

    return STATUS_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3728      	adds	r7, #40	@ 0x28
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	0802d3d0 	.word	0x0802d3d0
 8004670:	0802df48 	.word	0x0802df48
 8004674:	0802d370 	.word	0x0802d370
 8004678:	0802d3e4 	.word	0x0802d3e4
 800467c:	0802d3ac 	.word	0x0802d3ac
 8004680:	0802d428 	.word	0x0802d428
 8004684:	0802d470 	.word	0x0802d470
 8004688:	0802d48c 	.word	0x0802d48c
 800468c:	0802d4a0 	.word	0x0802d4a0

08004690 <ExplorerApp_DeviceReinit>:

status_t ExplorerApp_DeviceReinit(explorer_t * explorer, argus_mode_t mode)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	460b      	mov	r3, r1
 800469a:	70fb      	strb	r3, [r7, #3]
    assert(explorer != NULL);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d105      	bne.n	80046ae <ExplorerApp_DeviceReinit+0x1e>
 80046a2:	4b12      	ldr	r3, [pc, #72]	@ (80046ec <ExplorerApp_DeviceReinit+0x5c>)
 80046a4:	4a12      	ldr	r2, [pc, #72]	@ (80046f0 <ExplorerApp_DeviceReinit+0x60>)
 80046a6:	21f3      	movs	r1, #243	@ 0xf3
 80046a8:	4812      	ldr	r0, [pc, #72]	@ (80046f4 <ExplorerApp_DeviceReinit+0x64>)
 80046aa:	f003 f8fd 	bl	80078a8 <__assert_func>
    assert(explorer->Argus != NULL);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d105      	bne.n	80046c2 <ExplorerApp_DeviceReinit+0x32>
 80046b6:	4b10      	ldr	r3, [pc, #64]	@ (80046f8 <ExplorerApp_DeviceReinit+0x68>)
 80046b8:	4a0d      	ldr	r2, [pc, #52]	@ (80046f0 <ExplorerApp_DeviceReinit+0x60>)
 80046ba:	21f4      	movs	r1, #244	@ 0xf4
 80046bc:	480d      	ldr	r0, [pc, #52]	@ (80046f4 <ExplorerApp_DeviceReinit+0x64>)
 80046be:	f003 f8f3 	bl	80078a8 <__assert_func>

    status_t status = ExplorerApp_InitDevice(explorer, mode, true);
 80046c2:	78fb      	ldrb	r3, [r7, #3]
 80046c4:	2201      	movs	r2, #1
 80046c6:	4619      	mov	r1, r3
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7ff ff29 	bl	8004520 <ExplorerApp_InitDevice>
 80046ce:	60f8      	str	r0, [r7, #12]
    ExplorerApp_ResetDefaultDataStreamingMode(explorer);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f7ff fd69 	bl	80041a8 <ExplorerApp_ResetDefaultDataStreamingMode>
    ExplorerApp_DisplayUnambiguousRange(explorer->Argus);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 f940 	bl	8004960 <ExplorerApp_DisplayUnambiguousRange>
    return status;
 80046e0:	68fb      	ldr	r3, [r7, #12]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	0802d3d0 	.word	0x0802d3d0
 80046f0:	0802df60 	.word	0x0802df60
 80046f4:	0802d370 	.word	0x0802d370
 80046f8:	0802d4dc 	.word	0x0802d4dc

080046fc <ExplorerApp_InitExplorer>:

status_t ExplorerApp_InitExplorer(sci_device_t deviceID)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	4603      	mov	r3, r0
 8004704:	71fb      	strb	r3, [r7, #7]
    assert(deviceID > 0u);
 8004706:	79fb      	ldrb	r3, [r7, #7]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d105      	bne.n	8004718 <ExplorerApp_InitExplorer+0x1c>
 800470c:	4b38      	ldr	r3, [pc, #224]	@ (80047f0 <ExplorerApp_InitExplorer+0xf4>)
 800470e:	4a39      	ldr	r2, [pc, #228]	@ (80047f4 <ExplorerApp_InitExplorer+0xf8>)
 8004710:	21fe      	movs	r1, #254	@ 0xfe
 8004712:	4839      	ldr	r0, [pc, #228]	@ (80047f8 <ExplorerApp_InitExplorer+0xfc>)
 8004714:	f003 f8c8 	bl	80078a8 <__assert_func>
    status_t status;

    /* ensure the uninitialized device starts with a null mapping */
    assert(explorerIDMap[deviceID] == NULL);
 8004718:	79fb      	ldrb	r3, [r7, #7]
 800471a:	4a38      	ldr	r2, [pc, #224]	@ (80047fc <ExplorerApp_InitExplorer+0x100>)
 800471c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d006      	beq.n	8004732 <ExplorerApp_InitExplorer+0x36>
 8004724:	4b36      	ldr	r3, [pc, #216]	@ (8004800 <ExplorerApp_InitExplorer+0x104>)
 8004726:	4a33      	ldr	r2, [pc, #204]	@ (80047f4 <ExplorerApp_InitExplorer+0xf8>)
 8004728:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800472c:	4832      	ldr	r0, [pc, #200]	@ (80047f8 <ExplorerApp_InitExplorer+0xfc>)
 800472e:	f003 f8bb 	bl	80078a8 <__assert_func>

    /* Slaves 1,5 and 2,6 are connected to the same pins on some boards  (5 and
    * 6 are legacy boards). Thus, we do not allow slaves 5 or 6 if slaves 1 or 2
    * respectively are already initialized. */
    if (deviceID > 4)
 8004732:	79fb      	ldrb	r3, [r7, #7]
 8004734:	2b04      	cmp	r3, #4
 8004736:	d909      	bls.n	800474c <ExplorerApp_InitExplorer+0x50>
    {
        if (explorerIDMap[deviceID - 4] != NULL)
 8004738:	79fb      	ldrb	r3, [r7, #7]
 800473a:	3b04      	subs	r3, #4
 800473c:	4a2f      	ldr	r2, [pc, #188]	@ (80047fc <ExplorerApp_InitExplorer+0x100>)
 800473e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <ExplorerApp_InitExplorer+0x50>
            return ERROR_NOT_SUPPORTED;
 8004746:	f06f 0307 	mvn.w	r3, #7
 800474a:	e04d      	b.n	80047e8 <ExplorerApp_InitExplorer+0xec>
    }

    /* find an unused memory block and allocate it for that instance. */
    explorer_t * pExplorer = NULL;
 800474c:	2300      	movs	r3, #0
 800474e:	617b      	str	r3, [r7, #20]
    for (uint8_t idx = 0; idx < EXPLORER_DEVICE_COUNT; idx++)
 8004750:	2300      	movs	r3, #0
 8004752:	74fb      	strb	r3, [r7, #19]
 8004754:	e010      	b.n	8004778 <ExplorerApp_InitExplorer+0x7c>
    {
        if (explorerArray[idx].Argus == NULL)
 8004756:	7cfb      	ldrb	r3, [r7, #19]
 8004758:	4a2a      	ldr	r2, [pc, #168]	@ (8004804 <ExplorerApp_InitExplorer+0x108>)
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	4413      	add	r3, r2
 800475e:	330c      	adds	r3, #12
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d105      	bne.n	8004772 <ExplorerApp_InitExplorer+0x76>
        {
            pExplorer = &explorerArray[idx];
 8004766:	7cfb      	ldrb	r3, [r7, #19]
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	4a26      	ldr	r2, [pc, #152]	@ (8004804 <ExplorerApp_InitExplorer+0x108>)
 800476c:	4413      	add	r3, r2
 800476e:	617b      	str	r3, [r7, #20]
            break;
 8004770:	e005      	b.n	800477e <ExplorerApp_InitExplorer+0x82>
    for (uint8_t idx = 0; idx < EXPLORER_DEVICE_COUNT; idx++)
 8004772:	7cfb      	ldrb	r3, [r7, #19]
 8004774:	3301      	adds	r3, #1
 8004776:	74fb      	strb	r3, [r7, #19]
 8004778:	7cfb      	ldrb	r3, [r7, #19]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d9eb      	bls.n	8004756 <ExplorerApp_InitExplorer+0x5a>
        }
    }

    /* Make sure there is an empty Explorer object available. */
    if (pExplorer == NULL)
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d105      	bne.n	8004790 <ExplorerApp_InitExplorer+0x94>
    {
        error_log("Failed to allocate an empty explorer object for the AFBR-S50 API instance.");
 8004784:	4820      	ldr	r0, [pc, #128]	@ (8004808 <ExplorerApp_InitExplorer+0x10c>)
 8004786:	f001 fec1 	bl	800650c <print>
        return ERROR_FAIL;
 800478a:	f04f 33ff 	mov.w	r3, #4294967295
 800478e:	e02b      	b.n	80047e8 <ExplorerApp_InitExplorer+0xec>
    }

    pExplorer->DeviceID = deviceID;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	79fa      	ldrb	r2, [r7, #7]
 8004794:	701a      	strb	r2, [r3, #0]
    ExplorerApp_GetDefaultConfiguration(&pExplorer->Configuration);
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	3304      	adds	r3, #4
 800479a:	4618      	mov	r0, r3
 800479c:	f7ff fb8e 	bl	8003ebc <ExplorerApp_GetDefaultConfiguration>

    /* Initialize connected devices. */
    status = ExplorerApp_InitDevice(pExplorer, 0, false);
 80047a0:	2200      	movs	r2, #0
 80047a2:	2100      	movs	r1, #0
 80047a4:	6978      	ldr	r0, [r7, #20]
 80047a6:	f7ff febb 	bl	8004520 <ExplorerApp_InitDevice>
 80047aa:	60f8      	str	r0, [r7, #12]
    if (status < STATUS_OK) return status;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	da01      	bge.n	80047b6 <ExplorerApp_InitExplorer+0xba>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	e018      	b.n	80047e8 <ExplorerApp_InitExplorer+0xec>

    status = ExplorerApp_SetConfiguration(pExplorer, &pExplorer->Configuration);
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	3304      	adds	r3, #4
 80047ba:	4619      	mov	r1, r3
 80047bc:	6978      	ldr	r0, [r7, #20]
 80047be:	f7ff fbd5 	bl	8003f6c <ExplorerApp_SetConfiguration>
 80047c2:	60f8      	str	r0, [r7, #12]
    if (status < STATUS_OK) return status;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	da01      	bge.n	80047ce <ExplorerApp_InitExplorer+0xd2>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	e00c      	b.n	80047e8 <ExplorerApp_InitExplorer+0xec>

    /* Only once all checks are completed map the Explorer device to its ID for usage
     * deviceID starts with 1, so a mapping is needed.
     * deviceID 0 is reserved for default device */
    explorerIDMap[deviceID] = pExplorer;
 80047ce:	79fb      	ldrb	r3, [r7, #7]
 80047d0:	490a      	ldr	r1, [pc, #40]	@ (80047fc <ExplorerApp_InitExplorer+0x100>)
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if (explorerIDMap[0] == NULL)
 80047d8:	4b08      	ldr	r3, [pc, #32]	@ (80047fc <ExplorerApp_InitExplorer+0x100>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d102      	bne.n	80047e6 <ExplorerApp_InitExplorer+0xea>
    {
        explorerIDMap[0] = pExplorer;
 80047e0:	4a06      	ldr	r2, [pc, #24]	@ (80047fc <ExplorerApp_InitExplorer+0x100>)
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	6013      	str	r3, [r2, #0]
    }

    return status;
 80047e6:	68fb      	ldr	r3, [r7, #12]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	0802d4f4 	.word	0x0802d4f4
 80047f4:	0802df7c 	.word	0x0802df7c
 80047f8:	0802d370 	.word	0x0802d370
 80047fc:	2400139c 	.word	0x2400139c
 8004800:	0802d504 	.word	0x0802d504
 8004804:	2400137c 	.word	0x2400137c
 8004808:	0802d524 	.word	0x0802d524

0800480c <ExplorerApp_SuspendTimerMeasurement>:
/*******************************************************************************
 * Local functions
 ******************************************************************************/

bool ExplorerApp_SuspendTimerMeasurement(argus_hnd_t * argus)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
    assert(argus != NULL);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d105      	bne.n	8004826 <ExplorerApp_SuspendTimerMeasurement+0x1a>
 800481a:	4b0f      	ldr	r3, [pc, #60]	@ (8004858 <ExplorerApp_SuspendTimerMeasurement+0x4c>)
 800481c:	4a0f      	ldr	r2, [pc, #60]	@ (800485c <ExplorerApp_SuspendTimerMeasurement+0x50>)
 800481e:	2149      	movs	r1, #73	@ 0x49
 8004820:	480f      	ldr	r0, [pc, #60]	@ (8004860 <ExplorerApp_SuspendTimerMeasurement+0x54>)
 8004822:	f003 f841 	bl	80078a8 <__assert_func>

    bool resume = Argus_IsTimerMeasurementActive(argus);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f010 fc7c 	bl	8015124 <Argus_IsTimerMeasurementActive>
 800482c:	4603      	mov	r3, r0
 800482e:	73fb      	strb	r3, [r7, #15]
    if (resume) Argus_StopMeasurementTimer(argus);
 8004830:	7bfb      	ldrb	r3, [r7, #15]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d005      	beq.n	8004842 <ExplorerApp_SuspendTimerMeasurement+0x36>
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f010 fcea 	bl	8015210 <Argus_StopMeasurementTimer>

    while (Argus_IsDataEvaluationPending(argus))
 800483c:	e001      	b.n	8004842 <ExplorerApp_SuspendTimerMeasurement+0x36>
        ExplorerApp_SwitchContext(); // let evaluation task run...
 800483e:	f7ff f817 	bl	8003870 <ExplorerApp_SwitchContext>
    while (Argus_IsDataEvaluationPending(argus))
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f010 fc46 	bl	80150d4 <Argus_IsDataEvaluationPending>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1f7      	bne.n	800483e <ExplorerApp_SuspendTimerMeasurement+0x32>

    return resume;
 800484e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	0802d578 	.word	0x0802d578
 800485c:	0802df98 	.word	0x0802df98
 8004860:	0802d588 	.word	0x0802d588

08004864 <ExplorerApp_StartTimerMeasurement>:

status_t ExplorerApp_StartTimerMeasurement(argus_hnd_t * argus)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
    assert(argus != NULL);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d105      	bne.n	800487e <ExplorerApp_StartTimerMeasurement+0x1a>
 8004872:	4b09      	ldr	r3, [pc, #36]	@ (8004898 <ExplorerApp_StartTimerMeasurement+0x34>)
 8004874:	4a09      	ldr	r2, [pc, #36]	@ (800489c <ExplorerApp_StartTimerMeasurement+0x38>)
 8004876:	2156      	movs	r1, #86	@ 0x56
 8004878:	4809      	ldr	r0, [pc, #36]	@ (80048a0 <ExplorerApp_StartTimerMeasurement+0x3c>)
 800487a:	f003 f815 	bl	80078a8 <__assert_func>

    status_t status = Argus_StartMeasurementTimer(argus, ExplorerApp_MeasurementReadyCallback);
 800487e:	4909      	ldr	r1, [pc, #36]	@ (80048a4 <ExplorerApp_StartTimerMeasurement+0x40>)
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f010 fc77 	bl	8015174 <Argus_StartMeasurementTimer>
 8004886:	60f8      	str	r0, [r7, #12]
    ExplorerApp_DisplayUnambiguousRange(argus);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f869 	bl	8004960 <ExplorerApp_DisplayUnambiguousRange>
    return status;
 800488e:	68fb      	ldr	r3, [r7, #12]
}
 8004890:	4618      	mov	r0, r3
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	0802d578 	.word	0x0802d578
 800489c:	0802dfbc 	.word	0x0802dfbc
 80048a0:	0802d588 	.word	0x0802d588
 80048a4:	08003ca9 	.word	0x08003ca9

080048a8 <ExplorerApp_StopTimerMeasurement>:

status_t ExplorerApp_StopTimerMeasurement(argus_hnd_t * argus)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
    assert(argus != NULL);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d105      	bne.n	80048c2 <ExplorerApp_StopTimerMeasurement+0x1a>
 80048b6:	4b07      	ldr	r3, [pc, #28]	@ (80048d4 <ExplorerApp_StopTimerMeasurement+0x2c>)
 80048b8:	4a07      	ldr	r2, [pc, #28]	@ (80048d8 <ExplorerApp_StopTimerMeasurement+0x30>)
 80048ba:	215f      	movs	r1, #95	@ 0x5f
 80048bc:	4807      	ldr	r0, [pc, #28]	@ (80048dc <ExplorerApp_StopTimerMeasurement+0x34>)
 80048be:	f002 fff3 	bl	80078a8 <__assert_func>

    return Argus_StopMeasurementTimer(argus);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f010 fca4 	bl	8015210 <Argus_StopMeasurementTimer>
 80048c8:	4603      	mov	r3, r0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	0802d578 	.word	0x0802d578
 80048d8:	0802dfe0 	.word	0x0802dfe0
 80048dc:	0802d588 	.word	0x0802d588

080048e0 <ExplorerApp_SingleMeasurement>:

status_t ExplorerApp_SingleMeasurement(argus_hnd_t * argus)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
    assert(argus != NULL);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d105      	bne.n	80048fa <ExplorerApp_SingleMeasurement+0x1a>
 80048ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004918 <ExplorerApp_SingleMeasurement+0x38>)
 80048f0:	4a0a      	ldr	r2, [pc, #40]	@ (800491c <ExplorerApp_SingleMeasurement+0x3c>)
 80048f2:	2166      	movs	r1, #102	@ 0x66
 80048f4:	480a      	ldr	r0, [pc, #40]	@ (8004920 <ExplorerApp_SingleMeasurement+0x40>)
 80048f6:	f002 ffd7 	bl	80078a8 <__assert_func>

    status_t status = STATUS_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	60fb      	str	r3, [r7, #12]
    do
    {
        status = Argus_TriggerMeasurement(argus, ExplorerApp_MeasurementReadyCallback);
 80048fe:	4909      	ldr	r1, [pc, #36]	@ (8004924 <ExplorerApp_SingleMeasurement+0x44>)
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f010 fcd1 	bl	80152a8 <Argus_TriggerMeasurement>
 8004906:	60f8      	str	r0, [r7, #12]
    } while (status == STATUS_ARGUS_POWERLIMIT);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2b69      	cmp	r3, #105	@ 0x69
 800490c:	d0f7      	beq.n	80048fe <ExplorerApp_SingleMeasurement+0x1e>
    return status;
 800490e:	68fb      	ldr	r3, [r7, #12]
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	0802d578 	.word	0x0802d578
 800491c:	0802e004 	.word	0x0802e004
 8004920:	0802d588 	.word	0x0802d588
 8004924:	08003ca9 	.word	0x08003ca9

08004928 <ExplorerApp_DeviceAbort>:

status_t ExplorerApp_DeviceAbort(argus_hnd_t * argus)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
    assert(argus != NULL);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d105      	bne.n	8004942 <ExplorerApp_DeviceAbort+0x1a>
 8004936:	4b07      	ldr	r3, [pc, #28]	@ (8004954 <ExplorerApp_DeviceAbort+0x2c>)
 8004938:	4a07      	ldr	r2, [pc, #28]	@ (8004958 <ExplorerApp_DeviceAbort+0x30>)
 800493a:	2172      	movs	r1, #114	@ 0x72
 800493c:	4807      	ldr	r0, [pc, #28]	@ (800495c <ExplorerApp_DeviceAbort+0x34>)
 800493e:	f002 ffb3 	bl	80078a8 <__assert_func>

    return Argus_Abort(argus);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f010 fe22 	bl	801558c <Argus_Abort>
 8004948:	4603      	mov	r3, r0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	0802d578 	.word	0x0802d578
 8004958:	0802e024 	.word	0x0802e024
 800495c:	0802d588 	.word	0x0802d588

08004960 <ExplorerApp_DisplayUnambiguousRange>:

void ExplorerApp_DisplayUnambiguousRange(argus_hnd_t * argus)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
    assert(argus != NULL);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d105      	bne.n	800497a <ExplorerApp_DisplayUnambiguousRange+0x1a>
 800496e:	4b05      	ldr	r3, [pc, #20]	@ (8004984 <ExplorerApp_DisplayUnambiguousRange+0x24>)
 8004970:	4a05      	ldr	r2, [pc, #20]	@ (8004988 <ExplorerApp_DisplayUnambiguousRange+0x28>)
 8004972:	2179      	movs	r1, #121	@ 0x79
 8004974:	4805      	ldr	r0, [pc, #20]	@ (800498c <ExplorerApp_DisplayUnambiguousRange+0x2c>)
 8004976:	f002 ff97 	bl	80078a8 <__assert_func>
        SLCD_SetDecimalPointPosition(decPos);
    }
#else
    (void) argus;
#endif
}
 800497a:	bf00      	nop
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	0802d578 	.word	0x0802d578
 8004988:	0802e03c 	.word	0x0802e03c
 800498c:	0802d588 	.word	0x0802d588

08004990 <SCI_Init>:

/*******************************************************************************
 * Code
 ******************************************************************************/
status_t SCI_Init(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
    status_t status = STATUS_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	603b      	str	r3, [r7, #0]

    for(uint_fast8_t i = 0; i < SCI_MAX_COMMANDS; ++i)
 800499a:	2300      	movs	r3, #0
 800499c:	607b      	str	r3, [r7, #4]
 800499e:	e016      	b.n	80049ce <SCI_Init+0x3e>
    {
        myCCB[i].cmd = CMD_INVALID;
 80049a0:	4a17      	ldr	r2, [pc, #92]	@ (8004a00 <SCI_Init+0x70>)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	011b      	lsls	r3, r3, #4
 80049a6:	4413      	add	r3, r2
 80049a8:	2200      	movs	r2, #0
 80049aa:	701a      	strb	r2, [r3, #0]
        myCCB[i].rxfct = 0;
 80049ac:	4a14      	ldr	r2, [pc, #80]	@ (8004a00 <SCI_Init+0x70>)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	011b      	lsls	r3, r3, #4
 80049b2:	4413      	add	r3, r2
 80049b4:	3308      	adds	r3, #8
 80049b6:	2200      	movs	r2, #0
 80049b8:	601a      	str	r2, [r3, #0]
        myCCB[i].txfct = 0;
 80049ba:	4a11      	ldr	r2, [pc, #68]	@ (8004a00 <SCI_Init+0x70>)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	4413      	add	r3, r2
 80049c2:	3304      	adds	r3, #4
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]
    for(uint_fast8_t i = 0; i < SCI_MAX_COMMANDS; ++i)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	3301      	adds	r3, #1
 80049cc:	607b      	str	r3, [r7, #4]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80049d2:	d9e5      	bls.n	80049a0 <SCI_Init+0x10>
    }

    status = SCI_DataLink_Init();
 80049d4:	f000 fb8e 	bl	80050f4 <SCI_DataLink_Init>
 80049d8:	6038      	str	r0, [r7, #0]
    if(status < STATUS_OK)  return status;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	da01      	bge.n	80049e4 <SCI_Init+0x54>
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	e008      	b.n	80049f6 <SCI_Init+0x66>

    status = SCI_CMD_Init();
 80049e4:	f000 faec 	bl	8004fc0 <SCI_CMD_Init>
 80049e8:	6038      	str	r0, [r7, #0]
    if(status < STATUS_OK)  return status;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	da01      	bge.n	80049f4 <SCI_Init+0x64>
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	e000      	b.n	80049f6 <SCI_Init+0x66>

    return status;
 80049f4:	683b      	ldr	r3, [r7, #0]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	240013a4 	.word	0x240013a4

08004a04 <SCI_SetRxCommandCallback>:

void SCI_SetRxCommandCallback(sci_rx_cmd_cb_t cb)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
    SCI_RxCallback = cb;
 8004a0c:	4a04      	ldr	r2, [pc, #16]	@ (8004a20 <SCI_SetRxCommandCallback+0x1c>)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6013      	str	r3, [r2, #0]
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	240030c4 	.word	0x240030c4

08004a24 <SCI_SetErrorCallback>:
void SCI_RemoveRxCommandCallback(void)
{
    SCI_RxCallback = 0;
}
void SCI_SetErrorCallback(sci_error_cb_t cb)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
    SCI_ErrorCallback = cb;
 8004a2c:	4a04      	ldr	r2, [pc, #16]	@ (8004a40 <SCI_SetErrorCallback+0x1c>)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6013      	str	r3, [r2, #0]
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	240030c8 	.word	0x240030c8

08004a44 <SCI_SetRxCommand>:
{
    SCI_ErrorCallback = 0;
}

status_t SCI_SetRxCommand(sci_cmd_t cmd, sci_rx_cmd_fct_t rxfct)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	6039      	str	r1, [r7, #0]
 8004a4e:	71fb      	strb	r3, [r7, #7]
    return SCI_SetCommand(cmd, rxfct, 0, 0);
 8004a50:	79f8      	ldrb	r0, [r7, #7]
 8004a52:	2300      	movs	r3, #0
 8004a54:	2200      	movs	r2, #0
 8004a56:	6839      	ldr	r1, [r7, #0]
 8004a58:	f000 f83a 	bl	8004ad0 <SCI_SetCommand>
 8004a5c:	4603      	mov	r3, r0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <SCI_SetPostRxCommand>:
status_t SCI_SetPostRxCommand(sci_cmd_t cmd, sci_rx_cmd_fct_t rxfct, sci_rx_cmd_fct_t pfct)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b084      	sub	sp, #16
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	60b9      	str	r1, [r7, #8]
 8004a70:	607a      	str	r2, [r7, #4]
 8004a72:	73fb      	strb	r3, [r7, #15]
    return SCI_SetCommand(cmd, rxfct, 0, pfct);
 8004a74:	7bf8      	ldrb	r0, [r7, #15]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	68b9      	ldr	r1, [r7, #8]
 8004a7c:	f000 f828 	bl	8004ad0 <SCI_SetCommand>
 8004a80:	4603      	mov	r3, r0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <SCI_SetTxCommand>:
status_t SCI_SetTxCommand(sci_cmd_t cmd, sci_tx_cmd_fct_t txfct)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b082      	sub	sp, #8
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	4603      	mov	r3, r0
 8004a92:	6039      	str	r1, [r7, #0]
 8004a94:	71fb      	strb	r3, [r7, #7]
    return SCI_SetCommand(cmd, 0, txfct, 0);
 8004a96:	79f8      	ldrb	r0, [r7, #7]
 8004a98:	2300      	movs	r3, #0
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	f000 f817 	bl	8004ad0 <SCI_SetCommand>
 8004aa2:	4603      	mov	r3, r0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3708      	adds	r7, #8
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <SCI_SetRxTxCommand>:
status_t SCI_SetRxTxCommand(sci_cmd_t cmd,
                            sci_rx_cmd_fct_t rxfct,
                            sci_tx_cmd_fct_t txfct)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
 8004ab8:	73fb      	strb	r3, [r7, #15]
    return SCI_SetCommand(cmd, rxfct, txfct, 0);
 8004aba:	7bf8      	ldrb	r0, [r7, #15]
 8004abc:	2300      	movs	r3, #0
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	68b9      	ldr	r1, [r7, #8]
 8004ac2:	f000 f805 	bl	8004ad0 <SCI_SetCommand>
 8004ac6:	4603      	mov	r3, r0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <SCI_SetCommand>:
status_t SCI_SetCommand(sci_cmd_t cmd,
                        sci_rx_cmd_fct_t rxfct,
                        sci_tx_cmd_fct_t txfct,
                        sci_rx_cmd_fct_t pfct)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60b9      	str	r1, [r7, #8]
 8004ad8:	607a      	str	r2, [r7, #4]
 8004ada:	603b      	str	r3, [r7, #0]
 8004adc:	4603      	mov	r3, r0
 8004ade:	73fb      	strb	r3, [r7, #15]
    if ((cmd == CMD_INVALID) || SCI_CMD_IS_EXTENDED_CMD(cmd))
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <SCI_SetCommand+0x1e>
 8004ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	da02      	bge.n	8004af4 <SCI_SetCommand+0x24>
        return ERROR_SCI_INVALID_CMD_CODE;
 8004aee:	f06f 03d4 	mvn.w	r3, #212	@ 0xd4
 8004af2:	e04b      	b.n	8004b8c <SCI_SetCommand+0xbc>

    if (!rxfct && !txfct && !pfct)
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d108      	bne.n	8004b0c <SCI_SetCommand+0x3c>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d105      	bne.n	8004b0c <SCI_SetCommand+0x3c>
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d102      	bne.n	8004b0c <SCI_SetCommand+0x3c>
        return ERROR_INVALID_ARGUMENT;
 8004b06:	f06f 0304 	mvn.w	r3, #4
 8004b0a:	e03f      	b.n	8004b8c <SCI_SetCommand+0xbc>

    for (uint_fast8_t i = 0; i < SCI_MAX_COMMANDS; ++i)
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	617b      	str	r3, [r7, #20]
 8004b10:	e037      	b.n	8004b82 <SCI_SetCommand+0xb2>
    {
        if (myCCB[i].cmd == CMD_INVALID ||
 8004b12:	4a21      	ldr	r2, [pc, #132]	@ (8004b98 <SCI_SetCommand+0xc8>)
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	011b      	lsls	r3, r3, #4
 8004b18:	4413      	add	r3, r2
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d007      	beq.n	8004b30 <SCI_SetCommand+0x60>
            myCCB[i].cmd == cmd)
 8004b20:	4a1d      	ldr	r2, [pc, #116]	@ (8004b98 <SCI_SetCommand+0xc8>)
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	011b      	lsls	r3, r3, #4
 8004b26:	4413      	add	r3, r2
 8004b28:	781b      	ldrb	r3, [r3, #0]
        if (myCCB[i].cmd == CMD_INVALID ||
 8004b2a:	7bfa      	ldrb	r2, [r7, #15]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d125      	bne.n	8004b7c <SCI_SetCommand+0xac>
        {
            myCCB[i].cmd = cmd;
 8004b30:	4a19      	ldr	r2, [pc, #100]	@ (8004b98 <SCI_SetCommand+0xc8>)
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	011b      	lsls	r3, r3, #4
 8004b36:	4413      	add	r3, r2
 8004b38:	7bfa      	ldrb	r2, [r7, #15]
 8004b3a:	701a      	strb	r2, [r3, #0]
            if (rxfct != 0) myCCB[i].rxfct = rxfct;
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d006      	beq.n	8004b50 <SCI_SetCommand+0x80>
 8004b42:	4a15      	ldr	r2, [pc, #84]	@ (8004b98 <SCI_SetCommand+0xc8>)
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	011b      	lsls	r3, r3, #4
 8004b48:	4413      	add	r3, r2
 8004b4a:	3308      	adds	r3, #8
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	601a      	str	r2, [r3, #0]
            if (txfct != 0) myCCB[i].txfct = txfct;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d006      	beq.n	8004b64 <SCI_SetCommand+0x94>
 8004b56:	4a10      	ldr	r2, [pc, #64]	@ (8004b98 <SCI_SetCommand+0xc8>)
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	011b      	lsls	r3, r3, #4
 8004b5c:	4413      	add	r3, r2
 8004b5e:	3304      	adds	r3, #4
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	601a      	str	r2, [r3, #0]
            if (pfct != 0) myCCB[i].pfct = pfct;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d006      	beq.n	8004b78 <SCI_SetCommand+0xa8>
 8004b6a:	4a0b      	ldr	r2, [pc, #44]	@ (8004b98 <SCI_SetCommand+0xc8>)
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	011b      	lsls	r3, r3, #4
 8004b70:	4413      	add	r3, r2
 8004b72:	330c      	adds	r3, #12
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	601a      	str	r2, [r3, #0]
            return STATUS_OK;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	e007      	b.n	8004b8c <SCI_SetCommand+0xbc>
    for (uint_fast8_t i = 0; i < SCI_MAX_COMMANDS; ++i)
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	617b      	str	r3, [r7, #20]
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b86:	d9c4      	bls.n	8004b12 <SCI_SetCommand+0x42>
        }
    }
    return ERROR_SCI_BUFFER_FULL;
 8004b88:	f06f 03d7 	mvn.w	r3, #215	@ 0xd7
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	371c      	adds	r7, #28
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	240013a4 	.word	0x240013a4

08004b9c <SCI_InvokeRxCommand>:
        }
    }
    return ERROR_SCI_UNKNOWN_COMMAND;
}
status_t SCI_InvokeRxCommand(sci_frame_t * frame)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b08a      	sub	sp, #40	@ 0x28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
    assert(frame != 0);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d105      	bne.n	8004bb6 <SCI_InvokeRxCommand+0x1a>
 8004baa:	4b7b      	ldr	r3, [pc, #492]	@ (8004d98 <SCI_InvokeRxCommand+0x1fc>)
 8004bac:	4a7b      	ldr	r2, [pc, #492]	@ (8004d9c <SCI_InvokeRxCommand+0x200>)
 8004bae:	21cf      	movs	r1, #207	@ 0xcf
 8004bb0:	487b      	ldr	r0, [pc, #492]	@ (8004da0 <SCI_InvokeRxCommand+0x204>)
 8004bb2:	f002 fe79 	bl	80078a8 <__assert_func>

    /* Check CRC checksum. */
    status_t status = SCI_DataLink_CheckRxFrame(frame);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fc4e 	bl	8005458 <SCI_DataLink_CheckRxFrame>
 8004bbc:	6278      	str	r0, [r7, #36]	@ 0x24

    /* Get command code. */
    sci_cmd_t cmd = (sci_cmd_t) SCI_Frame_Dequeue08u(frame);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f001 fbcc 	bl	800635c <SCI_Frame_Dequeue08u>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	74fb      	strb	r3, [r7, #19]

    /* Check whether it's an extended or basic command:
     * extended = with device ID, for multi-device addressing
     * basic = simple, just consider the default device */
    sci_device_t deviceID = DEVICEID_DEFAULT;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (SCI_CMD_IS_EXTENDED_CMD(cmd))
 8004bce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	da0c      	bge.n	8004bf0 <SCI_InvokeRxCommand+0x54>
    {
        /* New Protocol Mode:
         * Determine the device that must process the command.
         * Assume the ID is valid - only app has the device count and can check if necessary */
        deviceID = SCI_Frame_Dequeue08u(frame);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f001 fbc0 	bl	800635c <SCI_Frame_Dequeue08u>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

        /* If the device ID is 0 (default), use the first available device. This is required
         * to ensure proper DeviceID in all command/response packets from this point onwards */
        if (deviceID == DEVICEID_DEFAULT)
 8004be2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d102      	bne.n	8004bf0 <SCI_InvokeRxCommand+0x54>
            deviceID = DEVICEID_FIRST_VALID;
 8004bea:	2301      	movs	r3, #1
 8004bec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    /* There is no validity check for the DeviceID because the SCI layer doesn't
     * have the required information on the valid Devices connected. Thus it will
     * simply forward the received DeviceID to the upper layers. */

    /* If CRC fails */
    if (status < STATUS_OK)
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	da0b      	bge.n	8004c0e <SCI_InvokeRxCommand+0x72>
    {
        SCI_DataLink_ReleaseFrames(frame);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fcde 	bl	80055b8 <SCI_DataLink_ReleaseFrames>
        SCI_SendNotAcknowledge(deviceID, cmd, status);
 8004bfc:	7cf9      	ldrb	r1, [r7, #19]
 8004bfe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c04:	4618      	mov	r0, r3
 8004c06:	f001 fc41 	bl	800648c <SCI_SendNotAcknowledge>
        return status;
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0c:	e0c0      	b.n	8004d90 <SCI_InvokeRxCommand+0x1f4>
    }

    /* If command is unknown. */
    if ((cmd & 0x7FU) == CMD_INVALID)
 8004c0e:	7cfb      	ldrb	r3, [r7, #19]
 8004c10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10d      	bne.n	8004c34 <SCI_InvokeRxCommand+0x98>
    {
        SCI_DataLink_ReleaseFrames(frame);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 fccd 	bl	80055b8 <SCI_DataLink_ReleaseFrames>
        SCI_SendNotAcknowledge(deviceID, cmd, ERROR_SCI_INVALID_CMD_CODE);
 8004c1e:	7cf9      	ldrb	r1, [r7, #19]
 8004c20:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c24:	f06f 02d4 	mvn.w	r2, #212	@ 0xd4
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f001 fc2f 	bl	800648c <SCI_SendNotAcknowledge>
        return ERROR_SCI_INVALID_CMD_CODE;
 8004c2e:	f06f 03d4 	mvn.w	r3, #212	@ 0xd4
 8004c32:	e0ad      	b.n	8004d90 <SCI_InvokeRxCommand+0x1f4>
    }

    /* Find the command function. */
    sci_rx_cmd_fct_t rxfct = 0;
 8004c34:	2300      	movs	r3, #0
 8004c36:	61fb      	str	r3, [r7, #28]
    sci_rx_cmd_fct_t pfct = 0;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	61bb      	str	r3, [r7, #24]
    for (uint_fast8_t i = 0; i < SCI_MAX_COMMANDS; ++i)
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	617b      	str	r3, [r7, #20]
 8004c40:	e01c      	b.n	8004c7c <SCI_InvokeRxCommand+0xe0>
    {
        if (myCCB[i].cmd == (cmd & 0x7FU))
 8004c42:	4a58      	ldr	r2, [pc, #352]	@ (8004da4 <SCI_InvokeRxCommand+0x208>)
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	011b      	lsls	r3, r3, #4
 8004c48:	4413      	add	r3, r2
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	7cfb      	ldrb	r3, [r7, #19]
 8004c50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d10e      	bne.n	8004c76 <SCI_InvokeRxCommand+0xda>
        {
            rxfct = myCCB[i].rxfct;
 8004c58:	4a52      	ldr	r2, [pc, #328]	@ (8004da4 <SCI_InvokeRxCommand+0x208>)
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	011b      	lsls	r3, r3, #4
 8004c5e:	4413      	add	r3, r2
 8004c60:	3308      	adds	r3, #8
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	61fb      	str	r3, [r7, #28]
            pfct = myCCB[i].pfct;
 8004c66:	4a4f      	ldr	r2, [pc, #316]	@ (8004da4 <SCI_InvokeRxCommand+0x208>)
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	011b      	lsls	r3, r3, #4
 8004c6c:	4413      	add	r3, r2
 8004c6e:	330c      	adds	r3, #12
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	61bb      	str	r3, [r7, #24]
            break;
 8004c74:	e005      	b.n	8004c82 <SCI_InvokeRxCommand+0xe6>
    for (uint_fast8_t i = 0; i < SCI_MAX_COMMANDS; ++i)
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	617b      	str	r3, [r7, #20]
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c80:	d9df      	bls.n	8004c42 <SCI_InvokeRxCommand+0xa6>
        }
    }

    /* If command function was not found. */
    if (!rxfct)
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10d      	bne.n	8004ca4 <SCI_InvokeRxCommand+0x108>
    {
        SCI_DataLink_ReleaseFrames(frame);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 fc95 	bl	80055b8 <SCI_DataLink_ReleaseFrames>
        SCI_SendNotAcknowledge(deviceID, cmd, ERROR_SCI_UNKNOWN_COMMAND);
 8004c8e:	7cf9      	ldrb	r1, [r7, #19]
 8004c90:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c94:	f06f 02d2 	mvn.w	r2, #210	@ 0xd2
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f001 fbf7 	bl	800648c <SCI_SendNotAcknowledge>
        return ERROR_SCI_UNKNOWN_COMMAND;
 8004c9e:	f06f 03d2 	mvn.w	r3, #210	@ 0xd2
 8004ca2:	e075      	b.n	8004d90 <SCI_InvokeRxCommand+0x1f4>
    }

    /* Invoke the RX command function. */
    status = rxfct(deviceID, frame);
 8004ca4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	6879      	ldr	r1, [r7, #4]
 8004cac:	4610      	mov	r0, r2
 8004cae:	4798      	blx	r3
 8004cb0:	6278      	str	r0, [r7, #36]	@ 0x24
    if (status < STATUS_OK)
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	da0b      	bge.n	8004cd0 <SCI_InvokeRxCommand+0x134>
    {
        SCI_DataLink_ReleaseFrames(frame);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 fc7d 	bl	80055b8 <SCI_DataLink_ReleaseFrames>
        SCI_SendNotAcknowledge(deviceID, cmd, status);
 8004cbe:	7cf9      	ldrb	r1, [r7, #19]
 8004cc0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004cc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f001 fbe0 	bl	800648c <SCI_SendNotAcknowledge>
        return status;
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cce:	e05f      	b.n	8004d90 <SCI_InvokeRxCommand+0x1f4>
    }

    /* Check if all data has been consumed. (only CRC must be left) */
    uint32_t bytesToRead = SCI_Frame_BytesToRead(frame);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f001 f893 	bl	8005dfc <SCI_Frame_BytesToRead>
 8004cd6:	60f8      	str	r0, [r7, #12]
    if (bytesToRead < 1)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10d      	bne.n	8004cfa <SCI_InvokeRxCommand+0x15e>
    {
        SCI_DataLink_ReleaseFrames(frame);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 fc6a 	bl	80055b8 <SCI_DataLink_ReleaseFrames>
        SCI_SendNotAcknowledge(deviceID, cmd, ERROR_SCI_FRAME_TOO_SHORT);
 8004ce4:	7cf9      	ldrb	r1, [r7, #19]
 8004ce6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004cea:	f06f 02dc 	mvn.w	r2, #220	@ 0xdc
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f001 fbcc 	bl	800648c <SCI_SendNotAcknowledge>
        return ERROR_SCI_FRAME_TOO_SHORT;
 8004cf4:	f06f 03dc 	mvn.w	r3, #220	@ 0xdc
 8004cf8:	e04a      	b.n	8004d90 <SCI_InvokeRxCommand+0x1f4>
    }

    else if (bytesToRead > 1)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d90d      	bls.n	8004d1c <SCI_InvokeRxCommand+0x180>
    {
        SCI_DataLink_ReleaseFrames(frame);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fc59 	bl	80055b8 <SCI_DataLink_ReleaseFrames>
        SCI_SendNotAcknowledge(deviceID, cmd, ERROR_SCI_FRAME_TOO_LONG);
 8004d06:	7cf9      	ldrb	r1, [r7, #19]
 8004d08:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d0c:	f06f 02dd 	mvn.w	r2, #221	@ 0xdd
 8004d10:	4618      	mov	r0, r3
 8004d12:	f001 fbbb 	bl	800648c <SCI_SendNotAcknowledge>
        return ERROR_SCI_FRAME_TOO_LONG;
 8004d16:	f06f 03dd 	mvn.w	r3, #221	@ 0xdd
 8004d1a:	e039      	b.n	8004d90 <SCI_InvokeRxCommand+0x1f4>
    }

    /* Send acknowledge. */
    status = SCI_SendAcknowledge(deviceID, cmd);
 8004d1c:	7cfa      	ldrb	r2, [r7, #19]
 8004d1e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d22:	4611      	mov	r1, r2
 8004d24:	4618      	mov	r0, r3
 8004d26:	f001 fb77 	bl	8006418 <SCI_SendAcknowledge>
 8004d2a:	6278      	str	r0, [r7, #36]	@ 0x24
    if (status < STATUS_OK)
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	da0c      	bge.n	8004d4c <SCI_InvokeRxCommand+0x1b0>
    {
        SCI_DataLink_ReleaseFrames(frame);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fc40 	bl	80055b8 <SCI_DataLink_ReleaseFrames>
        SCI_SendNotAcknowledge(deviceID, cmd, ERROR_FAIL);
 8004d38:	7cf9      	ldrb	r1, [r7, #19]
 8004d3a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d42:	4618      	mov	r0, r3
 8004d44:	f001 fba2 	bl	800648c <SCI_SendNotAcknowledge>
        return status;
 8004d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d4a:	e021      	b.n	8004d90 <SCI_InvokeRxCommand+0x1f4>
    }

    /* Run post function if available. */
    if (pfct)
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d01a      	beq.n	8004d88 <SCI_InvokeRxCommand+0x1ec>
    {
        SCI_DataLink_ResetRxFrames(frame);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 fc45 	bl	80055e2 <SCI_DataLink_ResetRxFrames>
        SCI_Frame_Dequeue08u(frame); // skip command
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f001 faff 	bl	800635c <SCI_Frame_Dequeue08u>
        if (SCI_CMD_IS_EXTENDED_CMD(cmd))
 8004d5e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	da04      	bge.n	8004d70 <SCI_InvokeRxCommand+0x1d4>
            SCI_Frame_Dequeue08u(frame); // skip address
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f001 faf8 	bl	800635c <SCI_Frame_Dequeue08u>
        while (SCI_DataLink_IsTxBusy()) __asm("nop");
 8004d6c:	e000      	b.n	8004d70 <SCI_InvokeRxCommand+0x1d4>
 8004d6e:	bf00      	nop
 8004d70:	f000 fd94 	bl	800589c <SCI_DataLink_IsTxBusy>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1f9      	bne.n	8004d6e <SCI_InvokeRxCommand+0x1d2>
        status = pfct(deviceID, frame);
 8004d7a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	6879      	ldr	r1, [r7, #4]
 8004d82:	4610      	mov	r0, r2
 8004d84:	4798      	blx	r3
 8004d86:	6278      	str	r0, [r7, #36]	@ 0x24
    }

    /* Release frames. */
    SCI_DataLink_ReleaseFrames(frame);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 fc15 	bl	80055b8 <SCI_DataLink_ReleaseFrames>

    return status;
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3728      	adds	r7, #40	@ 0x28
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	0802d5b4 	.word	0x0802d5b4
 8004d9c:	0802e060 	.word	0x0802e060
 8004da0:	0802d5c0 	.word	0x0802d5c0
 8004da4:	240013a4 	.word	0x240013a4

08004da8 <SCI_SendCommand>:

status_t SCI_SendCommand(sci_device_t deviceID, sci_cmd_t cmd, sci_param_t param, sci_data_t data)
{
 8004da8:	b590      	push	{r4, r7, lr}
 8004daa:	b089      	sub	sp, #36	@ 0x24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60ba      	str	r2, [r7, #8]
 8004db0:	607b      	str	r3, [r7, #4]
 8004db2:	4603      	mov	r3, r0
 8004db4:	73fb      	strb	r3, [r7, #15]
 8004db6:	460b      	mov	r3, r1
 8004db8:	73bb      	strb	r3, [r7, #14]
    if ((cmd == CMD_INVALID) || SCI_CMD_IS_EXTENDED_CMD(cmd))
 8004dba:	7bbb      	ldrb	r3, [r7, #14]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d003      	beq.n	8004dc8 <SCI_SendCommand+0x20>
 8004dc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	da02      	bge.n	8004dce <SCI_SendCommand+0x26>
        return ERROR_SCI_INVALID_CMD_CODE;
 8004dc8:	f06f 03d4 	mvn.w	r3, #212	@ 0xd4
 8004dcc:	e054      	b.n	8004e78 <SCI_SendCommand+0xd0>

    /* Find the command function. */
    sci_tx_cmd_fct_t fct = 0;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	61fb      	str	r3, [r7, #28]
    for (uint_fast8_t i = 0; i < SCI_MAX_COMMANDS; ++i)
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	61bb      	str	r3, [r7, #24]
 8004dd6:	e012      	b.n	8004dfe <SCI_SendCommand+0x56>
    {
        if (myCCB[i].cmd == cmd)
 8004dd8:	4a29      	ldr	r2, [pc, #164]	@ (8004e80 <SCI_SendCommand+0xd8>)
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	011b      	lsls	r3, r3, #4
 8004dde:	4413      	add	r3, r2
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	7bba      	ldrb	r2, [r7, #14]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d107      	bne.n	8004df8 <SCI_SendCommand+0x50>
        {
            fct = myCCB[i].txfct;
 8004de8:	4a25      	ldr	r2, [pc, #148]	@ (8004e80 <SCI_SendCommand+0xd8>)
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	011b      	lsls	r3, r3, #4
 8004dee:	4413      	add	r3, r2
 8004df0:	3304      	adds	r3, #4
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	61fb      	str	r3, [r7, #28]
            break;
 8004df6:	e005      	b.n	8004e04 <SCI_SendCommand+0x5c>
    for (uint_fast8_t i = 0; i < SCI_MAX_COMMANDS; ++i)
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	61bb      	str	r3, [r7, #24]
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e02:	d9e9      	bls.n	8004dd8 <SCI_SendCommand+0x30>
        }
    }

    /* If command function was not found. */
    if (!fct)
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d102      	bne.n	8004e10 <SCI_SendCommand+0x68>
    {
        return ERROR_SCI_UNKNOWN_COMMAND;
 8004e0a:	f06f 03d2 	mvn.w	r3, #210	@ 0xd2
 8004e0e:	e033      	b.n	8004e78 <SCI_SendCommand+0xd0>
    }

    sci_frame_t * frame = SCI_DataLink_RequestTxFrame(true);
 8004e10:	2001      	movs	r0, #1
 8004e12:	f000 fc3f 	bl	8005694 <SCI_DataLink_RequestTxFrame>
 8004e16:	6178      	str	r0, [r7, #20]
    if (!frame) return ERROR_SCI_BUFFER_FULL;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d102      	bne.n	8004e24 <SCI_SendCommand+0x7c>
 8004e1e:	f06f 03d7 	mvn.w	r3, #215	@ 0xd7
 8004e22:	e029      	b.n	8004e78 <SCI_SendCommand+0xd0>

    if (deviceID > 0)
 8004e24:	7bfb      	ldrb	r3, [r7, #15]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00d      	beq.n	8004e46 <SCI_SendCommand+0x9e>
    {
        SCI_Frame_Queue08u(frame, cmd | 0x80);
 8004e2a:	7bbb      	ldrb	r3, [r7, #14]
 8004e2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	4619      	mov	r1, r3
 8004e34:	6978      	ldr	r0, [r7, #20]
 8004e36:	f001 f8a3 	bl	8005f80 <SCI_Frame_Queue08u>
        SCI_Frame_Queue08u(frame, deviceID);
 8004e3a:	7bfb      	ldrb	r3, [r7, #15]
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	6978      	ldr	r0, [r7, #20]
 8004e40:	f001 f89e 	bl	8005f80 <SCI_Frame_Queue08u>
 8004e44:	e004      	b.n	8004e50 <SCI_SendCommand+0xa8>
    }
    else
    {
        SCI_Frame_Queue08u(frame, cmd);
 8004e46:	7bbb      	ldrb	r3, [r7, #14]
 8004e48:	4619      	mov	r1, r3
 8004e4a:	6978      	ldr	r0, [r7, #20]
 8004e4c:	f001 f898 	bl	8005f80 <SCI_Frame_Queue08u>
    }

    /* Invoke the TX command function. */
    status_t status = fct(deviceID, frame, param, data);
 8004e50:	7bf8      	ldrb	r0, [r7, #15]
 8004e52:	69fc      	ldr	r4, [r7, #28]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	6979      	ldr	r1, [r7, #20]
 8004e5a:	47a0      	blx	r4
 8004e5c:	6138      	str	r0, [r7, #16]
    if (status < STATUS_OK)
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	da04      	bge.n	8004e6e <SCI_SendCommand+0xc6>
    {
        SCI_DataLink_ReleaseFrames(frame);
 8004e64:	6978      	ldr	r0, [r7, #20]
 8004e66:	f000 fba7 	bl	80055b8 <SCI_DataLink_ReleaseFrames>
        return status;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	e004      	b.n	8004e78 <SCI_SendCommand+0xd0>
    }

    return SCI_DataLink_SendTxFrame(frame, false);
 8004e6e:	2100      	movs	r1, #0
 8004e70:	6978      	ldr	r0, [r7, #20]
 8004e72:	f000 fd29 	bl	80058c8 <SCI_DataLink_SendTxFrame>
 8004e76:	4603      	mov	r3, r0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3724      	adds	r7, #36	@ 0x24
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd90      	pop	{r4, r7, pc}
 8004e80:	240013a4 	.word	0x240013a4

08004e84 <RxCmd_Ping>:

/*******************************************************************************
 * Ping Message Command
 ******************************************************************************/
static status_t RxCmd_Ping(sci_device_t deviceID, sci_frame_t * frame)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	6039      	str	r1, [r7, #0]
 8004e8e:	71fb      	strb	r3, [r7, #7]
    (void) frame;
    (void)deviceID;

    return STATUS_OK; // do nothing, just send an acknowledge
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <RxCmd_StatusReport>:
status_t SCI_SendStatusReport(sci_device_t deviceID, status_t status)
{
    return SCI_SendCommand(deviceID, CMD_STATUS_REPORT, 0, &status);
}
static status_t RxCmd_StatusReport(sci_device_t deviceID, sci_frame_t * frame)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b084      	sub	sp, #16
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	6039      	str	r1, [r7, #0]
 8004ea8:	71fb      	strb	r3, [r7, #7]
    (void) frame; // unused;

    status_t status = GetSystemStatus(deviceID);
 8004eaa:	79fb      	ldrb	r3, [r7, #7]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fe fbe1 	bl	8003674 <GetSystemStatus>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	60fb      	str	r3, [r7, #12]
    return SCI_SendCommand(deviceID, CMD_STATUS_REPORT, 0, &status);
 8004eb6:	f107 030c 	add.w	r3, r7, #12
 8004eba:	79f8      	ldrb	r0, [r7, #7]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	2107      	movs	r1, #7
 8004ec0:	f7ff ff72 	bl	8004da8 <SCI_SendCommand>
 8004ec4:	4603      	mov	r3, r0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <TxCmd_StatusReport>:
static status_t TxCmd_StatusReport(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, status_t const * status)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b086      	sub	sp, #24
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
 8004ed8:	603b      	str	r3, [r7, #0]
 8004eda:	4603      	mov	r3, r0
 8004edc:	73fb      	strb	r3, [r7, #15]
    (void)param;
    (void)deviceID;

    if(!status) return ERROR_INVALID_ARGUMENT;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d102      	bne.n	8004eea <TxCmd_StatusReport+0x1c>
 8004ee4:	f06f 0304 	mvn.w	r3, #4
 8004ee8:	e011      	b.n	8004f0e <TxCmd_StatusReport+0x40>
    ltc_t t_now;
    Time_GetNow(&t_now);
 8004eea:	f107 0310 	add.w	r3, r7, #16
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f00f f8ac 	bl	801404c <Time_GetNow>
    SCI_Frame_Queue_Time(frame, &t_now);
 8004ef4:	f107 0310 	add.w	r3, r7, #16
 8004ef8:	4619      	mov	r1, r3
 8004efa:	68b8      	ldr	r0, [r7, #8]
 8004efc:	f001 f952 	bl	80061a4 <SCI_Frame_Queue_Time>
    SCI_Frame_Queue32s(frame, (int32_t)(*status));
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4619      	mov	r1, r3
 8004f06:	68b8      	ldr	r0, [r7, #8]
 8004f08:	f001 f928 	bl	800615c <SCI_Frame_Queue32s>
    return STATUS_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3718      	adds	r7, #24
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <RxCmd_TestMessage>:

/*******************************************************************************
 * Test Message Command
 ******************************************************************************/
static status_t RxCmd_TestMessage(sci_device_t deviceID, sci_frame_t * frame)
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b082      	sub	sp, #8
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	6039      	str	r1, [r7, #0]
 8004f20:	71fb      	strb	r3, [r7, #7]
    return SCI_SendCommand(deviceID, CMD_TEST_MESSAGE, 0, frame);
 8004f22:	79f8      	ldrb	r0, [r7, #7]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	2200      	movs	r2, #0
 8004f28:	2104      	movs	r1, #4
 8004f2a:	f7ff ff3d 	bl	8004da8 <SCI_SendCommand>
 8004f2e:	4603      	mov	r3, r0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <TxCmd_TestMessage>:
static status_t TxCmd_TestMessage(sci_device_t deviceID, sci_frame_t * frame, sci_param_t param, sci_frame_t * msg)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60b9      	str	r1, [r7, #8]
 8004f40:	607a      	str	r2, [r7, #4]
 8004f42:	603b      	str	r3, [r7, #0]
 8004f44:	4603      	mov	r3, r0
 8004f46:	73fb      	strb	r3, [r7, #15]
    (void)param;
    (void)deviceID;

    while (SCI_Frame_BytesToRead(msg) > 1)
 8004f48:	e007      	b.n	8004f5a <TxCmd_TestMessage+0x22>
        SCI_Frame_Queue08u(frame, SCI_Frame_Dequeue08u(msg));
 8004f4a:	6838      	ldr	r0, [r7, #0]
 8004f4c:	f001 fa06 	bl	800635c <SCI_Frame_Dequeue08u>
 8004f50:	4603      	mov	r3, r0
 8004f52:	4619      	mov	r1, r3
 8004f54:	68b8      	ldr	r0, [r7, #8]
 8004f56:	f001 f813 	bl	8005f80 <SCI_Frame_Queue08u>
    while (SCI_Frame_BytesToRead(msg) > 1)
 8004f5a:	6838      	ldr	r0, [r7, #0]
 8004f5c:	f000 ff4e 	bl	8005dfc <SCI_Frame_BytesToRead>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d8f1      	bhi.n	8004f4a <TxCmd_TestMessage+0x12>

    return STATUS_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <RxCmd_SystemReset>:
/*******************************************************************************
 * Reset System Command
 ******************************************************************************/
#include "utility/time.h"
static status_t RxCmd_SystemReset(sci_device_t deviceID, sci_frame_t * frame)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	4603      	mov	r3, r0
 8004f78:	6039      	str	r1, [r7, #0]
 8004f7a:	71fb      	strb	r3, [r7, #7]
    /* No need to consider device ID, this is a system-wide reset */
    (void)deviceID;

    if(0xDEADC0DE != SCI_Frame_Dequeue32u(frame))
 8004f7c:	6838      	ldr	r0, [r7, #0]
 8004f7e:	f001 fa11 	bl	80063a4 <SCI_Frame_Dequeue32u>
 8004f82:	4603      	mov	r3, r0
 8004f84:	4a05      	ldr	r2, [pc, #20]	@ (8004f9c <RxCmd_SystemReset+0x2c>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d002      	beq.n	8004f90 <RxCmd_SystemReset+0x20>
    {
        return ERROR_SCI_INVALID_CMD_PARAMETER;
 8004f8a:	f06f 03d5 	mvn.w	r3, #213	@ 0xd5
 8004f8e:	e000      	b.n	8004f92 <RxCmd_SystemReset+0x22>
    }
    return STATUS_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	deadc0de 	.word	0xdeadc0de

08004fa0 <PrxCmd_SystemReset>:
static status_t PrxCmd_SystemReset(sci_device_t deviceID, sci_frame_t * frame)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	6039      	str	r1, [r7, #0]
 8004faa:	71fb      	strb	r3, [r7, #7]
    (void)deviceID;
    (void)frame;

    Time_DelayMSec(10);
 8004fac:	200a      	movs	r0, #10
 8004fae:	f00f f93f 	bl	8014230 <Time_DelayMSec>
    Board_Reset();
 8004fb2:	f001 fce9 	bl	8006988 <Board_Reset>
    return STATUS_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3708      	adds	r7, #8
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <SCI_CMD_Init>:

/*******************************************************************************
 * Initialization
 ******************************************************************************/
status_t SCI_CMD_Init(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
    status_t status = STATUS_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	607b      	str	r3, [r7, #4]

    status = SCI_SetRxCommand(CMD_PING, RxCmd_Ping);
 8004fca:	4918      	ldr	r1, [pc, #96]	@ (800502c <SCI_CMD_Init+0x6c>)
 8004fcc:	2001      	movs	r0, #1
 8004fce:	f7ff fd39 	bl	8004a44 <SCI_SetRxCommand>
 8004fd2:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	da01      	bge.n	8004fde <SCI_CMD_Init+0x1e>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	e021      	b.n	8005022 <SCI_CMD_Init+0x62>

    status = SCI_SetRxTxCommand(CMD_TEST_MESSAGE, RxCmd_TestMessage, (sci_tx_cmd_fct_t)TxCmd_TestMessage);
 8004fde:	4a14      	ldr	r2, [pc, #80]	@ (8005030 <SCI_CMD_Init+0x70>)
 8004fe0:	4914      	ldr	r1, [pc, #80]	@ (8005034 <SCI_CMD_Init+0x74>)
 8004fe2:	2004      	movs	r0, #4
 8004fe4:	f7ff fd62 	bl	8004aac <SCI_SetRxTxCommand>
 8004fe8:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	da01      	bge.n	8004ff4 <SCI_CMD_Init+0x34>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	e016      	b.n	8005022 <SCI_CMD_Init+0x62>

    status = SCI_SetPostRxCommand(CMD_SYSTEM_RESET, RxCmd_SystemReset, PrxCmd_SystemReset);
 8004ff4:	4a10      	ldr	r2, [pc, #64]	@ (8005038 <SCI_CMD_Init+0x78>)
 8004ff6:	4911      	ldr	r1, [pc, #68]	@ (800503c <SCI_CMD_Init+0x7c>)
 8004ff8:	2008      	movs	r0, #8
 8004ffa:	f7ff fd34 	bl	8004a66 <SCI_SetPostRxCommand>
 8004ffe:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	da01      	bge.n	800500a <SCI_CMD_Init+0x4a>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	e00b      	b.n	8005022 <SCI_CMD_Init+0x62>

    status = SCI_SetRxTxCommand(CMD_STATUS_REPORT, RxCmd_StatusReport, (sci_tx_cmd_fct_t)TxCmd_StatusReport);
 800500a:	4a0d      	ldr	r2, [pc, #52]	@ (8005040 <SCI_CMD_Init+0x80>)
 800500c:	490d      	ldr	r1, [pc, #52]	@ (8005044 <SCI_CMD_Init+0x84>)
 800500e:	2007      	movs	r0, #7
 8005010:	f7ff fd4c 	bl	8004aac <SCI_SetRxTxCommand>
 8005014:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) return status;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	da01      	bge.n	8005020 <SCI_CMD_Init+0x60>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	e000      	b.n	8005022 <SCI_CMD_Init+0x62>

    return status;
 8005020:	687b      	ldr	r3, [r7, #4]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	08004e85 	.word	0x08004e85
 8005030:	08004f39 	.word	0x08004f39
 8005034:	08004f17 	.word	0x08004f17
 8005038:	08004fa1 	.word	0x08004fa1
 800503c:	08004f71 	.word	0x08004f71
 8005040:	08004ecf 	.word	0x08004ecf
 8005044:	08004e9f 	.word	0x08004e9f

08005048 <SCI_CRC8_Init>:

/*******************************************************************************
 * Code
 ******************************************************************************/
void SCI_CRC8_Init(void)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
    // prepare CRC lookup table
    for (unsigned int i = 0; i < 256; i++)
 800504e:	2300      	movs	r3, #0
 8005050:	607b      	str	r3, [r7, #4]
 8005052:	e021      	b.n	8005098 <SCI_CRC8_Init+0x50>
    {
        uint8_t b = (uint8_t)i;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	70fb      	strb	r3, [r7, #3]
        for (uint8_t j = 0; j < 8; j++)
 8005058:	2300      	movs	r3, #0
 800505a:	70bb      	strb	r3, [r7, #2]
 800505c:	e011      	b.n	8005082 <SCI_CRC8_Init+0x3a>
        {
            if ((b & 0x80U) != 0)
 800505e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005062:	2b00      	cmp	r3, #0
 8005064:	da07      	bge.n	8005076 <SCI_CRC8_Init+0x2e>
            {
                b = (uint8_t)(b << 1U);
 8005066:	78fb      	ldrb	r3, [r7, #3]
 8005068:	005b      	lsls	r3, r3, #1
 800506a:	70fb      	strb	r3, [r7, #3]
                b ^= CRC8GENERATOR;
 800506c:	78fb      	ldrb	r3, [r7, #3]
 800506e:	f083 031d 	eor.w	r3, r3, #29
 8005072:	70fb      	strb	r3, [r7, #3]
 8005074:	e002      	b.n	800507c <SCI_CRC8_Init+0x34>
            }
            else
            {
                b = (uint8_t)(b << 1U);
 8005076:	78fb      	ldrb	r3, [r7, #3]
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	70fb      	strb	r3, [r7, #3]
        for (uint8_t j = 0; j < 8; j++)
 800507c:	78bb      	ldrb	r3, [r7, #2]
 800507e:	3301      	adds	r3, #1
 8005080:	70bb      	strb	r3, [r7, #2]
 8005082:	78bb      	ldrb	r3, [r7, #2]
 8005084:	2b07      	cmp	r3, #7
 8005086:	d9ea      	bls.n	800505e <SCI_CRC8_Init+0x16>
            }
        }
        /* store CRC value in lookup table */
        myCRC8Lookup[i] = b;
 8005088:	4a08      	ldr	r2, [pc, #32]	@ (80050ac <SCI_CRC8_Init+0x64>)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4413      	add	r3, r2
 800508e:	78fa      	ldrb	r2, [r7, #3]
 8005090:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < 256; i++)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3301      	adds	r3, #1
 8005096:	607b      	str	r3, [r7, #4]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2bff      	cmp	r3, #255	@ 0xff
 800509c:	d9da      	bls.n	8005054 <SCI_CRC8_Init+0xc>
    }
}
 800509e:	bf00      	nop
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	24001ba4 	.word	0x24001ba4

080050b0 <SCI_CRC8_Compute>:

uint8_t SCI_CRC8_Compute(uint8_t crc, const uint8_t * data, size_t length)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	4603      	mov	r3, r0
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
 80050bc:	73fb      	strb	r3, [r7, #15]
    // CRC8_SAE_J1850_ZERO
    while (length--)
 80050be:	e00a      	b.n	80050d6 <SCI_CRC8_Compute+0x26>
        crc = myCRC8Lookup[crc ^ (*data++)];
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	60ba      	str	r2, [r7, #8]
 80050c6:	781a      	ldrb	r2, [r3, #0]
 80050c8:	7bfb      	ldrb	r3, [r7, #15]
 80050ca:	4053      	eors	r3, r2
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	461a      	mov	r2, r3
 80050d0:	4b07      	ldr	r3, [pc, #28]	@ (80050f0 <SCI_CRC8_Compute+0x40>)
 80050d2:	5c9b      	ldrb	r3, [r3, r2]
 80050d4:	73fb      	strb	r3, [r7, #15]
    while (length--)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	1e5a      	subs	r2, r3, #1
 80050da:	607a      	str	r2, [r7, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1ef      	bne.n	80050c0 <SCI_CRC8_Compute+0x10>
    return crc;
 80050e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	24001ba4 	.word	0x24001ba4

080050f4 <SCI_DataLink_Init>:

/*******************************************************************************
 * Code
 ******************************************************************************/
status_t SCI_DataLink_Init(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
    status_t status = STATUS_OK;
 80050fa:	2300      	movs	r3, #0
 80050fc:	603b      	str	r3, [r7, #0]
    SCI_CurrentTxFrame = 0;
 80050fe:	4b29      	ldr	r3, [pc, #164]	@ (80051a4 <SCI_DataLink_Init+0xb0>)
 8005100:	2200      	movs	r2, #0
 8005102:	601a      	str	r2, [r3, #0]

    for (uint8_t i = 0; i < SCI_FRAME_BUF_CT; ++i)
 8005104:	2300      	movs	r3, #0
 8005106:	71fb      	strb	r3, [r7, #7]
 8005108:	e021      	b.n	800514e <SCI_DataLink_Init+0x5a>
    {
        SCI_FrameBuffer[i].Buffer = SCI_DataBuffer + (i * SCI_FRAME_SIZE);
 800510a:	79fb      	ldrb	r3, [r7, #7]
 800510c:	019b      	lsls	r3, r3, #6
 800510e:	4619      	mov	r1, r3
 8005110:	79fb      	ldrb	r3, [r7, #7]
 8005112:	4a25      	ldr	r2, [pc, #148]	@ (80051a8 <SCI_DataLink_Init+0xb4>)
 8005114:	440a      	add	r2, r1
 8005116:	4925      	ldr	r1, [pc, #148]	@ (80051ac <SCI_DataLink_Init+0xb8>)
 8005118:	011b      	lsls	r3, r3, #4
 800511a:	440b      	add	r3, r1
 800511c:	3308      	adds	r3, #8
 800511e:	601a      	str	r2, [r3, #0]
        SCI_FrameBuffer[i].RdPtr = 0;
 8005120:	79fb      	ldrb	r3, [r7, #7]
 8005122:	4a22      	ldr	r2, [pc, #136]	@ (80051ac <SCI_DataLink_Init+0xb8>)
 8005124:	011b      	lsls	r3, r3, #4
 8005126:	4413      	add	r3, r2
 8005128:	3304      	adds	r3, #4
 800512a:	2200      	movs	r2, #0
 800512c:	601a      	str	r2, [r3, #0]
        SCI_FrameBuffer[i].WrPtr = 0;
 800512e:	79fb      	ldrb	r3, [r7, #7]
 8005130:	4a1e      	ldr	r2, [pc, #120]	@ (80051ac <SCI_DataLink_Init+0xb8>)
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	4413      	add	r3, r2
 8005136:	2200      	movs	r2, #0
 8005138:	601a      	str	r2, [r3, #0]
        SCI_FrameBuffer[i].Next = 0;
 800513a:	79fb      	ldrb	r3, [r7, #7]
 800513c:	4a1b      	ldr	r2, [pc, #108]	@ (80051ac <SCI_DataLink_Init+0xb8>)
 800513e:	011b      	lsls	r3, r3, #4
 8005140:	4413      	add	r3, r2
 8005142:	330c      	adds	r3, #12
 8005144:	2200      	movs	r2, #0
 8005146:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < SCI_FRAME_BUF_CT; ++i)
 8005148:	79fb      	ldrb	r3, [r7, #7]
 800514a:	3301      	adds	r3, #1
 800514c:	71fb      	strb	r3, [r7, #7]
 800514e:	79fb      	ldrb	r3, [r7, #7]
 8005150:	2b3f      	cmp	r3, #63	@ 0x3f
 8005152:	d9da      	bls.n	800510a <SCI_DataLink_Init+0x16>
    }

    SCI_RxFrameQueue.Load = 0;
 8005154:	4b16      	ldr	r3, [pc, #88]	@ (80051b0 <SCI_DataLink_Init+0xbc>)
 8005156:	2200      	movs	r2, #0
 8005158:	609a      	str	r2, [r3, #8]
    SCI_RxFrameQueue.Head = SCI_FrameBuffer;
 800515a:	4b15      	ldr	r3, [pc, #84]	@ (80051b0 <SCI_DataLink_Init+0xbc>)
 800515c:	4a13      	ldr	r2, [pc, #76]	@ (80051ac <SCI_DataLink_Init+0xb8>)
 800515e:	605a      	str	r2, [r3, #4]
    SCI_RxFrameQueue.Buff = SCI_FrameBuffer;
 8005160:	4b13      	ldr	r3, [pc, #76]	@ (80051b0 <SCI_DataLink_Init+0xbc>)
 8005162:	4a12      	ldr	r2, [pc, #72]	@ (80051ac <SCI_DataLink_Init+0xb8>)
 8005164:	601a      	str	r2, [r3, #0]
    SCI_RxFrameQueue.Size = SCI_FRAME_BUF_RX_CT;
 8005166:	4b12      	ldr	r3, [pc, #72]	@ (80051b0 <SCI_DataLink_Init+0xbc>)
 8005168:	2220      	movs	r2, #32
 800516a:	60da      	str	r2, [r3, #12]

    SCI_TxFrameQueue.Load = 0;
 800516c:	4b11      	ldr	r3, [pc, #68]	@ (80051b4 <SCI_DataLink_Init+0xc0>)
 800516e:	2200      	movs	r2, #0
 8005170:	609a      	str	r2, [r3, #8]
    SCI_TxFrameQueue.Head = SCI_FrameBuffer + SCI_FRAME_BUF_RX_CT;
 8005172:	4a11      	ldr	r2, [pc, #68]	@ (80051b8 <SCI_DataLink_Init+0xc4>)
 8005174:	4b0f      	ldr	r3, [pc, #60]	@ (80051b4 <SCI_DataLink_Init+0xc0>)
 8005176:	605a      	str	r2, [r3, #4]
    SCI_TxFrameQueue.Buff = SCI_FrameBuffer + SCI_FRAME_BUF_RX_CT;
 8005178:	4a0f      	ldr	r2, [pc, #60]	@ (80051b8 <SCI_DataLink_Init+0xc4>)
 800517a:	4b0e      	ldr	r3, [pc, #56]	@ (80051b4 <SCI_DataLink_Init+0xc0>)
 800517c:	601a      	str	r2, [r3, #0]
    SCI_TxFrameQueue.Size = SCI_FRAME_BUF_TX_CT;
 800517e:	4b0d      	ldr	r3, [pc, #52]	@ (80051b4 <SCI_DataLink_Init+0xc0>)
 8005180:	2220      	movs	r2, #32
 8005182:	60da      	str	r2, [r3, #12]

    SCI_CRC8_Init();
 8005184:	f7ff ff60 	bl	8005048 <SCI_CRC8_Init>
    USB_DeviceApplicationInit();
    USB_SetRxCallback(RxCallback);
    USB_SetErrorCallback(RaiseError);
    Time_DelayMSec(100);
#else
    status = UART_Init();
 8005188:	f002 f8ce 	bl	8007328 <UART_Init>
 800518c:	6038      	str	r0, [r7, #0]
    UART_SetRxCallback(RxCallback);
 800518e:	480b      	ldr	r0, [pc, #44]	@ (80051bc <SCI_DataLink_Init+0xc8>)
 8005190:	f002 f9d2 	bl	8007538 <UART_SetRxCallback>
    UART_SetErrorCallback(RaiseError);
 8005194:	480a      	ldr	r0, [pc, #40]	@ (80051c0 <SCI_DataLink_Init+0xcc>)
 8005196:	f002 f9ff 	bl	8007598 <UART_SetErrorCallback>
#endif

    return status;
 800519a:	683b      	ldr	r3, [r7, #0]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	240030cc 	.word	0x240030cc
 80051a8:	24001ca4 	.word	0x24001ca4
 80051ac:	24002ca4 	.word	0x24002ca4
 80051b0:	240030a4 	.word	0x240030a4
 80051b4:	240030b4 	.word	0x240030b4
 80051b8:	24002ea4 	.word	0x24002ea4
 80051bc:	080051e9 	.word	0x080051e9
 80051c0:	080051c5 	.word	0x080051c5

080051c4 <RaiseError>:

/*******************************************************************************
 * IRQ handler
 ******************************************************************************/
static inline void RaiseError(status_t error)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
    if (SCI_ErrorCallback)
 80051cc:	4b05      	ldr	r3, [pc, #20]	@ (80051e4 <RaiseError+0x20>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d003      	beq.n	80051dc <RaiseError+0x18>
        SCI_ErrorCallback(error);
 80051d4:	4b03      	ldr	r3, [pc, #12]	@ (80051e4 <RaiseError+0x20>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	4798      	blx	r3
}
 80051dc:	bf00      	nop
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	240030c8 	.word	0x240030c8

080051e8 <RxCallback>:


/* Interrupt service routine for the receiving data from the serial port; */
static void RxCallback(uint8_t const *data, uint32_t size)
{
 80051e8:	b590      	push	{r4, r7, lr}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
    static bool escapeNextByte = false; /*!< Flag for byte stuffing */
    static sci_frame_t *f = 0; /*!< the current buffer in the queue. */
    static sci_frame_t *f0 = 0; /*!< the first buffer in the queue. */

    for (uint8_t const *d = data; d < data + size; ++d)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	617b      	str	r3, [r7, #20]
 80051f6:	e112      	b.n	800541e <RxCallback+0x236>
    {
        uint8_t rx = *d;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	74fb      	strb	r3, [r7, #19]
        if (escapeNextByte)
 80051fe:	4b8e      	ldr	r3, [pc, #568]	@ (8005438 <RxCallback+0x250>)
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d02c      	beq.n	8005260 <RxCallback+0x78>
        {
            escapeNextByte = false;
 8005206:	4b8c      	ldr	r3, [pc, #560]	@ (8005438 <RxCallback+0x250>)
 8005208:	2200      	movs	r2, #0
 800520a:	701a      	strb	r2, [r3, #0]

            /* Error Handling for the escape byte */
            rx = (uint8_t)(~rx);
 800520c:	7cfb      	ldrb	r3, [r7, #19]
 800520e:	43db      	mvns	r3, r3
 8005210:	74fb      	strb	r3, [r7, #19]
            if (f0)
 8005212:	4b8a      	ldr	r3, [pc, #552]	@ (800543c <RxCallback+0x254>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 80b1 	beq.w	800537e <RxCallback+0x196>
            {
                if ((rx != SCI_ESCAPE_BYTE) &&
 800521c:	7cfb      	ldrb	r3, [r7, #19]
 800521e:	2b1b      	cmp	r3, #27
 8005220:	f000 80ad 	beq.w	800537e <RxCallback+0x196>
 8005224:	7cfb      	ldrb	r3, [r7, #19]
 8005226:	2b02      	cmp	r3, #2
 8005228:	f000 80a9 	beq.w	800537e <RxCallback+0x196>
                    (rx != SCI_START_BYTE) &&
 800522c:	7cfb      	ldrb	r3, [r7, #19]
 800522e:	2b03      	cmp	r3, #3
 8005230:	f000 80a5 	beq.w	800537e <RxCallback+0x196>
                    (rx != SCI_STOP_BYTE))
                {
                    /* Reset f0 */
                    SCI_DataLink_ReleaseFrames(f0);
 8005234:	4b81      	ldr	r3, [pc, #516]	@ (800543c <RxCallback+0x254>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4618      	mov	r0, r3
 800523a:	f000 f9bd 	bl	80055b8 <SCI_DataLink_ReleaseFrames>
                    f0 = 0;
 800523e:	4b7f      	ldr	r3, [pc, #508]	@ (800543c <RxCallback+0x254>)
 8005240:	2200      	movs	r2, #0
 8005242:	601a      	str	r2, [r3, #0]
                    f = 0;
 8005244:	4b7e      	ldr	r3, [pc, #504]	@ (8005440 <RxCallback+0x258>)
 8005246:	2200      	movs	r2, #0
 8005248:	601a      	str	r2, [r3, #0]

                    /* send an NAK with error code to the host */
                    SCI_SendNotAcknowledge(0, CMD_INVALID, ERROR_SCI_INVALID_ESCAPE_BYTE);
 800524a:	f06f 02db 	mvn.w	r2, #219	@ 0xdb
 800524e:	2100      	movs	r1, #0
 8005250:	2000      	movs	r0, #0
 8005252:	f001 f91b 	bl	800648c <SCI_SendNotAcknowledge>
                    RaiseError(ERROR_SCI_INVALID_ESCAPE_BYTE);
 8005256:	f06f 00db 	mvn.w	r0, #219	@ 0xdb
 800525a:	f7ff ffb3 	bl	80051c4 <RaiseError>
                    continue;
 800525e:	e0db      	b.n	8005418 <RxCallback+0x230>
                }
            }
        }
        else
        {
            if (rx == SCI_ESCAPE_BYTE)
 8005260:	7cfb      	ldrb	r3, [r7, #19]
 8005262:	2b1b      	cmp	r3, #27
 8005264:	d103      	bne.n	800526e <RxCallback+0x86>
            {
                /* Escape byte: ignore following control bytes. */
                escapeNextByte = true;
 8005266:	4b74      	ldr	r3, [pc, #464]	@ (8005438 <RxCallback+0x250>)
 8005268:	2201      	movs	r2, #1
 800526a:	701a      	strb	r2, [r3, #0]
                continue;
 800526c:	e0d4      	b.n	8005418 <RxCallback+0x230>
            }
            else if (rx == SCI_START_BYTE)
 800526e:	7cfb      	ldrb	r3, [r7, #19]
 8005270:	2b02      	cmp	r3, #2
 8005272:	d132      	bne.n	80052da <RxCallback+0xf2>
            {
                /* Start byte: start a new command. */
                if (f0)
 8005274:	4b71      	ldr	r3, [pc, #452]	@ (800543c <RxCallback+0x254>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d014      	beq.n	80052a6 <RxCallback+0xbe>
                {
                    /* Invalid Start Byte: already within an active frame -> reset f0 */
                    SCI_DataLink_ReleaseFrames(f0);
 800527c:	4b6f      	ldr	r3, [pc, #444]	@ (800543c <RxCallback+0x254>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4618      	mov	r0, r3
 8005282:	f000 f999 	bl	80055b8 <SCI_DataLink_ReleaseFrames>
                    f0 = 0;
 8005286:	4b6d      	ldr	r3, [pc, #436]	@ (800543c <RxCallback+0x254>)
 8005288:	2200      	movs	r2, #0
 800528a:	601a      	str	r2, [r3, #0]
                    f = 0;
 800528c:	4b6c      	ldr	r3, [pc, #432]	@ (8005440 <RxCallback+0x258>)
 800528e:	2200      	movs	r2, #0
 8005290:	601a      	str	r2, [r3, #0]

                    /* send an NAK with error code to the host */
                    SCI_SendNotAcknowledge(0, CMD_INVALID, ERROR_SCI_INVALID_START_BYTE);
 8005292:	f06f 02d8 	mvn.w	r2, #216	@ 0xd8
 8005296:	2100      	movs	r1, #0
 8005298:	2000      	movs	r0, #0
 800529a:	f001 f8f7 	bl	800648c <SCI_SendNotAcknowledge>
                    RaiseError(ERROR_SCI_INVALID_START_BYTE);
 800529e:	f06f 00d8 	mvn.w	r0, #216	@ 0xd8
 80052a2:	f7ff ff8f 	bl	80051c4 <RaiseError>
                }

                f0 = SCI_DataLink_RequestFrame(&SCI_RxFrameQueue);
 80052a6:	4867      	ldr	r0, [pc, #412]	@ (8005444 <RxCallback+0x25c>)
 80052a8:	f000 f9b1 	bl	800560e <SCI_DataLink_RequestFrame>
 80052ac:	4603      	mov	r3, r0
 80052ae:	4a63      	ldr	r2, [pc, #396]	@ (800543c <RxCallback+0x254>)
 80052b0:	6013      	str	r3, [r2, #0]

                if (!f0)
 80052b2:	4b62      	ldr	r3, [pc, #392]	@ (800543c <RxCallback+0x254>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10a      	bne.n	80052d0 <RxCallback+0xe8>
                {
                    /* send an NAK with error code to the host */
                    SCI_SendNotAcknowledge(0, CMD_INVALID, ERROR_SCI_RX_BUFFER_FULL);
 80052ba:	f06f 02da 	mvn.w	r2, #218	@ 0xda
 80052be:	2100      	movs	r1, #0
 80052c0:	2000      	movs	r0, #0
 80052c2:	f001 f8e3 	bl	800648c <SCI_SendNotAcknowledge>
                    RaiseError(ERROR_SCI_RX_BUFFER_FULL);
 80052c6:	f06f 00da 	mvn.w	r0, #218	@ 0xda
 80052ca:	f7ff ff7b 	bl	80051c4 <RaiseError>
                    continue;
 80052ce:	e0a3      	b.n	8005418 <RxCallback+0x230>
                }

                f = f0;
 80052d0:	4b5a      	ldr	r3, [pc, #360]	@ (800543c <RxCallback+0x254>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a5a      	ldr	r2, [pc, #360]	@ (8005440 <RxCallback+0x258>)
 80052d6:	6013      	str	r3, [r2, #0]
                continue;
 80052d8:	e09e      	b.n	8005418 <RxCallback+0x230>
            }
            else if (rx == SCI_STOP_BYTE)
 80052da:	7cfb      	ldrb	r3, [r7, #19]
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d14e      	bne.n	800537e <RxCallback+0x196>
            {
                /* Stop byte: command completed. */
                if (!f0)
 80052e0:	4b56      	ldr	r3, [pc, #344]	@ (800543c <RxCallback+0x254>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 8096 	beq.w	8005416 <RxCallback+0x22e>
                    /* Invalid stop byte outside of an active frame received: ignore */
                    continue;
                }

                /* Check data length: minimal 2 bytes required (Command + CRC) */
                if (f0->WrPtr - f0->Buffer < 2)
 80052ea:	4b54      	ldr	r3, [pc, #336]	@ (800543c <RxCallback+0x254>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	4b52      	ldr	r3, [pc, #328]	@ (800543c <RxCallback+0x254>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	dc15      	bgt.n	8005328 <RxCallback+0x140>
                {
                    /* Release the frame */
                    SCI_DataLink_ReleaseFrames(f0);
 80052fc:	4b4f      	ldr	r3, [pc, #316]	@ (800543c <RxCallback+0x254>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4618      	mov	r0, r3
 8005302:	f000 f959 	bl	80055b8 <SCI_DataLink_ReleaseFrames>
                    f0 = 0;
 8005306:	4b4d      	ldr	r3, [pc, #308]	@ (800543c <RxCallback+0x254>)
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]
                    f = 0;
 800530c:	4b4c      	ldr	r3, [pc, #304]	@ (8005440 <RxCallback+0x258>)
 800530e:	2200      	movs	r2, #0
 8005310:	601a      	str	r2, [r3, #0]

                    /* send an NAK with error code to the host */
                    SCI_SendNotAcknowledge(0, CMD_INVALID, ERROR_SCI_FRAME_TOO_SHORT);
 8005312:	f06f 02dc 	mvn.w	r2, #220	@ 0xdc
 8005316:	2100      	movs	r1, #0
 8005318:	2000      	movs	r0, #0
 800531a:	f001 f8b7 	bl	800648c <SCI_SendNotAcknowledge>
                    RaiseError(ERROR_SCI_FRAME_TOO_SHORT);
 800531e:	f06f 00dc 	mvn.w	r0, #220	@ 0xdc
 8005322:	f7ff ff4f 	bl	80051c4 <RaiseError>
                    continue;
 8005326:	e077      	b.n	8005418 <RxCallback+0x230>
                }

                if (SCI_RxCallback)
 8005328:	4b47      	ldr	r3, [pc, #284]	@ (8005448 <RxCallback+0x260>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00e      	beq.n	800534e <RxCallback+0x166>
                {
                    /* Invoke callback. */
                    if (SCI_RxCallback(f0) != STATUS_OK)
 8005330:	4b45      	ldr	r3, [pc, #276]	@ (8005448 <RxCallback+0x260>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a41      	ldr	r2, [pc, #260]	@ (800543c <RxCallback+0x254>)
 8005336:	6812      	ldr	r2, [r2, #0]
 8005338:	4610      	mov	r0, r2
 800533a:	4798      	blx	r3
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d016      	beq.n	8005370 <RxCallback+0x188>
                    {
                        SCI_DataLink_ReleaseFrames(f0);
 8005342:	4b3e      	ldr	r3, [pc, #248]	@ (800543c <RxCallback+0x254>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4618      	mov	r0, r3
 8005348:	f000 f936 	bl	80055b8 <SCI_DataLink_ReleaseFrames>
 800534c:	e010      	b.n	8005370 <RxCallback+0x188>
                    }
                }
                else
                {
                    /* Invoke command directly if no callback. */
                    status_t status = SCI_InvokeRxCommand(f0);
 800534e:	4b3b      	ldr	r3, [pc, #236]	@ (800543c <RxCallback+0x254>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4618      	mov	r0, r3
 8005354:	f7ff fc22 	bl	8004b9c <SCI_InvokeRxCommand>
 8005358:	60f8      	str	r0, [r7, #12]
                    if (status != STATUS_OK)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d007      	beq.n	8005370 <RxCallback+0x188>
                    {
                        SCI_DataLink_ReleaseFrames(f0);
 8005360:	4b36      	ldr	r3, [pc, #216]	@ (800543c <RxCallback+0x254>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4618      	mov	r0, r3
 8005366:	f000 f927 	bl	80055b8 <SCI_DataLink_ReleaseFrames>
                        RaiseError(status);
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f7ff ff2a 	bl	80051c4 <RaiseError>
                    }
                }

                f0 = 0;
 8005370:	4b32      	ldr	r3, [pc, #200]	@ (800543c <RxCallback+0x254>)
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]
                f = 0;
 8005376:	4b32      	ldr	r3, [pc, #200]	@ (8005440 <RxCallback+0x258>)
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]
                continue;
 800537c:	e04c      	b.n	8005418 <RxCallback+0x230>
            }
        }

        if (f)
 800537e:	4b30      	ldr	r3, [pc, #192]	@ (8005440 <RxCallback+0x258>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d048      	beq.n	8005418 <RxCallback+0x230>
        {
            /* Check if frame is full and queue another frame. */
            if (f->WrPtr - f->Buffer == SCI_FRAME_SIZE)
 8005386:	4b2e      	ldr	r3, [pc, #184]	@ (8005440 <RxCallback+0x258>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	4b2c      	ldr	r3, [pc, #176]	@ (8005440 <RxCallback+0x258>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b40      	cmp	r3, #64	@ 0x40
 8005396:	d126      	bne.n	80053e6 <RxCallback+0x1fe>
            {
                f->Next = SCI_DataLink_RequestFrame(&SCI_RxFrameQueue);
 8005398:	4b29      	ldr	r3, [pc, #164]	@ (8005440 <RxCallback+0x258>)
 800539a:	681c      	ldr	r4, [r3, #0]
 800539c:	4829      	ldr	r0, [pc, #164]	@ (8005444 <RxCallback+0x25c>)
 800539e:	f000 f936 	bl	800560e <SCI_DataLink_RequestFrame>
 80053a2:	4603      	mov	r3, r0
 80053a4:	60e3      	str	r3, [r4, #12]

                if (!f->Next)
 80053a6:	4b26      	ldr	r3, [pc, #152]	@ (8005440 <RxCallback+0x258>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d115      	bne.n	80053dc <RxCallback+0x1f4>
                {
                    /* Reset f0 */
                    SCI_DataLink_ReleaseFrames(f0);
 80053b0:	4b22      	ldr	r3, [pc, #136]	@ (800543c <RxCallback+0x254>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f000 f8ff 	bl	80055b8 <SCI_DataLink_ReleaseFrames>
                    f0 = 0;
 80053ba:	4b20      	ldr	r3, [pc, #128]	@ (800543c <RxCallback+0x254>)
 80053bc:	2200      	movs	r2, #0
 80053be:	601a      	str	r2, [r3, #0]
                    f = 0;
 80053c0:	4b1f      	ldr	r3, [pc, #124]	@ (8005440 <RxCallback+0x258>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	601a      	str	r2, [r3, #0]

                    /* send an NAK with error code to the host */
                    SCI_SendNotAcknowledge(0, CMD_INVALID, ERROR_SCI_RX_BUFFER_FULL);
 80053c6:	f06f 02da 	mvn.w	r2, #218	@ 0xda
 80053ca:	2100      	movs	r1, #0
 80053cc:	2000      	movs	r0, #0
 80053ce:	f001 f85d 	bl	800648c <SCI_SendNotAcknowledge>
                    RaiseError(ERROR_SCI_RX_BUFFER_FULL);
 80053d2:	f06f 00da 	mvn.w	r0, #218	@ 0xda
 80053d6:	f7ff fef5 	bl	80051c4 <RaiseError>
                    continue;
 80053da:	e01d      	b.n	8005418 <RxCallback+0x230>
                }

                f = f->Next;
 80053dc:	4b18      	ldr	r3, [pc, #96]	@ (8005440 <RxCallback+0x258>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	4a17      	ldr	r2, [pc, #92]	@ (8005440 <RxCallback+0x258>)
 80053e4:	6013      	str	r3, [r2, #0]
            }

            /* Save byte into command buffer. */
            assert(f->WrPtr - f->Buffer < SCI_FRAME_SIZE);
 80053e6:	4b16      	ldr	r3, [pc, #88]	@ (8005440 <RxCallback+0x258>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	4b14      	ldr	r3, [pc, #80]	@ (8005440 <RxCallback+0x258>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b3f      	cmp	r3, #63	@ 0x3f
 80053f6:	dd06      	ble.n	8005406 <RxCallback+0x21e>
 80053f8:	4b14      	ldr	r3, [pc, #80]	@ (800544c <RxCallback+0x264>)
 80053fa:	4a15      	ldr	r2, [pc, #84]	@ (8005450 <RxCallback+0x268>)
 80053fc:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8005400:	4814      	ldr	r0, [pc, #80]	@ (8005454 <RxCallback+0x26c>)
 8005402:	f002 fa51 	bl	80078a8 <__assert_func>
            *(f->WrPtr++) = rx;
 8005406:	4b0e      	ldr	r3, [pc, #56]	@ (8005440 <RxCallback+0x258>)
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	6813      	ldr	r3, [r2, #0]
 800540c:	1c59      	adds	r1, r3, #1
 800540e:	6011      	str	r1, [r2, #0]
 8005410:	7cfa      	ldrb	r2, [r7, #19]
 8005412:	701a      	strb	r2, [r3, #0]
 8005414:	e000      	b.n	8005418 <RxCallback+0x230>
                    continue;
 8005416:	bf00      	nop
    for (uint8_t const *d = data; d < data + size; ++d)
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	3301      	adds	r3, #1
 800541c:	617b      	str	r3, [r7, #20]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	4413      	add	r3, r2
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	429a      	cmp	r2, r3
 8005428:	f4ff aee6 	bcc.w	80051f8 <RxCallback+0x10>
        }
    }
}
 800542c:	bf00      	nop
 800542e:	bf00      	nop
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	bd90      	pop	{r4, r7, pc}
 8005436:	bf00      	nop
 8005438:	240030d0 	.word	0x240030d0
 800543c:	240030d4 	.word	0x240030d4
 8005440:	240030d8 	.word	0x240030d8
 8005444:	240030a4 	.word	0x240030a4
 8005448:	240030c4 	.word	0x240030c4
 800544c:	0802d5e4 	.word	0x0802d5e4
 8005450:	0802e074 	.word	0x0802e074
 8005454:	0802d60c 	.word	0x0802d60c

08005458 <SCI_DataLink_CheckRxFrame>:

status_t SCI_DataLink_CheckRxFrame(sci_frame_t * frame)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
    assert(frame != 0);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d106      	bne.n	8005474 <SCI_DataLink_CheckRxFrame+0x1c>
 8005466:	4b22      	ldr	r3, [pc, #136]	@ (80054f0 <SCI_DataLink_CheckRxFrame+0x98>)
 8005468:	4a22      	ldr	r2, [pc, #136]	@ (80054f4 <SCI_DataLink_CheckRxFrame+0x9c>)
 800546a:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800546e:	4822      	ldr	r0, [pc, #136]	@ (80054f8 <SCI_DataLink_CheckRxFrame+0xa0>)
 8005470:	f002 fa1a 	bl	80078a8 <__assert_func>
    assert(frame->Buffer <= frame->RdPtr);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	429a      	cmp	r2, r3
 800547e:	d906      	bls.n	800548e <SCI_DataLink_CheckRxFrame+0x36>
 8005480:	4b1e      	ldr	r3, [pc, #120]	@ (80054fc <SCI_DataLink_CheckRxFrame+0xa4>)
 8005482:	4a1c      	ldr	r2, [pc, #112]	@ (80054f4 <SCI_DataLink_CheckRxFrame+0x9c>)
 8005484:	f240 115d 	movw	r1, #349	@ 0x15d
 8005488:	481b      	ldr	r0, [pc, #108]	@ (80054f8 <SCI_DataLink_CheckRxFrame+0xa0>)
 800548a:	f002 fa0d 	bl	80078a8 <__assert_func>
    assert(frame->RdPtr <= frame->WrPtr);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	429a      	cmp	r2, r3
 8005498:	d906      	bls.n	80054a8 <SCI_DataLink_CheckRxFrame+0x50>
 800549a:	4b19      	ldr	r3, [pc, #100]	@ (8005500 <SCI_DataLink_CheckRxFrame+0xa8>)
 800549c:	4a15      	ldr	r2, [pc, #84]	@ (80054f4 <SCI_DataLink_CheckRxFrame+0x9c>)
 800549e:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 80054a2:	4815      	ldr	r0, [pc, #84]	@ (80054f8 <SCI_DataLink_CheckRxFrame+0xa0>)
 80054a4:	f002 fa00 	bl	80078a8 <__assert_func>
    assert(frame->WrPtr <= frame->Buffer + SCI_FRAME_SIZE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	3340      	adds	r3, #64	@ 0x40
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d906      	bls.n	80054c4 <SCI_DataLink_CheckRxFrame+0x6c>
 80054b6:	4b13      	ldr	r3, [pc, #76]	@ (8005504 <SCI_DataLink_CheckRxFrame+0xac>)
 80054b8:	4a0e      	ldr	r2, [pc, #56]	@ (80054f4 <SCI_DataLink_CheckRxFrame+0x9c>)
 80054ba:	f240 115f 	movw	r1, #351	@ 0x15f
 80054be:	480e      	ldr	r0, [pc, #56]	@ (80054f8 <SCI_DataLink_CheckRxFrame+0xa0>)
 80054c0:	f002 f9f2 	bl	80078a8 <__assert_func>

    const uint32_t CRC_r = SCI_DataLink_GetCRC(frame);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 fb09 	bl	8005adc <SCI_DataLink_GetCRC>
 80054ca:	4603      	mov	r3, r0
 80054cc:	60fb      	str	r3, [r7, #12]
    const uint32_t CRC_c = SCI_DataLink_CalcCRC(frame);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 fb38 	bl	8005b44 <SCI_DataLink_CalcCRC>
 80054d4:	4603      	mov	r3, r0
 80054d6:	60bb      	str	r3, [r7, #8]

    if (CRC_c != CRC_r)
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d002      	beq.n	80054e6 <SCI_DataLink_CheckRxFrame+0x8e>
    {
//      error_log("received command %02x, CRC failed! %08x != %08x",
//                frame->Buffer[0], CRC_r, CRC_c);
        return ERROR_SCI_CRC_FAILED;
 80054e0:	f06f 03d6 	mvn.w	r3, #214	@ 0xd6
 80054e4:	e000      	b.n	80054e8 <SCI_DataLink_CheckRxFrame+0x90>
    }

    return STATUS_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	0802d638 	.word	0x0802d638
 80054f4:	0802e080 	.word	0x0802e080
 80054f8:	0802d60c 	.word	0x0802d60c
 80054fc:	0802d644 	.word	0x0802d644
 8005500:	0802d664 	.word	0x0802d664
 8005504:	0802d684 	.word	0x0802d684

08005508 <SCI_DataLink_ReleaseFrame>:

/* Releases only the current frame and but not the next frames. */
static inline void SCI_DataLink_ReleaseFrame(sci_frame_t * frame)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
    assert(frame != 0);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d106      	bne.n	8005524 <SCI_DataLink_ReleaseFrame+0x1c>
 8005516:	4b20      	ldr	r3, [pc, #128]	@ (8005598 <SCI_DataLink_ReleaseFrame+0x90>)
 8005518:	4a20      	ldr	r2, [pc, #128]	@ (800559c <SCI_DataLink_ReleaseFrame+0x94>)
 800551a:	f240 1171 	movw	r1, #369	@ 0x171
 800551e:	4820      	ldr	r0, [pc, #128]	@ (80055a0 <SCI_DataLink_ReleaseFrame+0x98>)
 8005520:	f002 f9c2 	bl	80078a8 <__assert_func>

    IRQ_LOCK();
 8005524:	f001 fa56 	bl	80069d4 <IRQ_LOCK>
    if (frame->WrPtr != 0)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d02d      	beq.n	800558c <SCI_DataLink_ReleaseFrame+0x84>
    {
        frame->WrPtr = 0;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]
        frame->RdPtr = 0;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	605a      	str	r2, [r3, #4]
        frame->Next = 0;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	60da      	str	r2, [r3, #12]
        if (frame < SCI_FrameBuffer + SCI_FRAME_BUF_RX_CT)
 8005542:	4a18      	ldr	r2, [pc, #96]	@ (80055a4 <SCI_DataLink_ReleaseFrame+0x9c>)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4293      	cmp	r3, r2
 8005548:	d210      	bcs.n	800556c <SCI_DataLink_ReleaseFrame+0x64>
        {
            assert(SCI_RxFrameQueue.Load);
 800554a:	4b17      	ldr	r3, [pc, #92]	@ (80055a8 <SCI_DataLink_ReleaseFrame+0xa0>)
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d106      	bne.n	8005560 <SCI_DataLink_ReleaseFrame+0x58>
 8005552:	4b16      	ldr	r3, [pc, #88]	@ (80055ac <SCI_DataLink_ReleaseFrame+0xa4>)
 8005554:	4a11      	ldr	r2, [pc, #68]	@ (800559c <SCI_DataLink_ReleaseFrame+0x94>)
 8005556:	f240 117b 	movw	r1, #379	@ 0x17b
 800555a:	4811      	ldr	r0, [pc, #68]	@ (80055a0 <SCI_DataLink_ReleaseFrame+0x98>)
 800555c:	f002 f9a4 	bl	80078a8 <__assert_func>
            SCI_RxFrameQueue.Load--;
 8005560:	4b11      	ldr	r3, [pc, #68]	@ (80055a8 <SCI_DataLink_ReleaseFrame+0xa0>)
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	3b01      	subs	r3, #1
 8005566:	4a10      	ldr	r2, [pc, #64]	@ (80055a8 <SCI_DataLink_ReleaseFrame+0xa0>)
 8005568:	6093      	str	r3, [r2, #8]
 800556a:	e00f      	b.n	800558c <SCI_DataLink_ReleaseFrame+0x84>
        }
        else
        {
            assert(SCI_TxFrameQueue.Load);
 800556c:	4b10      	ldr	r3, [pc, #64]	@ (80055b0 <SCI_DataLink_ReleaseFrame+0xa8>)
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d106      	bne.n	8005582 <SCI_DataLink_ReleaseFrame+0x7a>
 8005574:	4b0f      	ldr	r3, [pc, #60]	@ (80055b4 <SCI_DataLink_ReleaseFrame+0xac>)
 8005576:	4a09      	ldr	r2, [pc, #36]	@ (800559c <SCI_DataLink_ReleaseFrame+0x94>)
 8005578:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800557c:	4808      	ldr	r0, [pc, #32]	@ (80055a0 <SCI_DataLink_ReleaseFrame+0x98>)
 800557e:	f002 f993 	bl	80078a8 <__assert_func>
            SCI_TxFrameQueue.Load--;
 8005582:	4b0b      	ldr	r3, [pc, #44]	@ (80055b0 <SCI_DataLink_ReleaseFrame+0xa8>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	3b01      	subs	r3, #1
 8005588:	4a09      	ldr	r2, [pc, #36]	@ (80055b0 <SCI_DataLink_ReleaseFrame+0xa8>)
 800558a:	6093      	str	r3, [r2, #8]
        }
    }
    IRQ_UNLOCK();
 800558c:	f001 fa00 	bl	8006990 <IRQ_UNLOCK>
}
 8005590:	bf00      	nop
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	0802d638 	.word	0x0802d638
 800559c:	0802e09c 	.word	0x0802e09c
 80055a0:	0802d60c 	.word	0x0802d60c
 80055a4:	24002ea4 	.word	0x24002ea4
 80055a8:	240030a4 	.word	0x240030a4
 80055ac:	0802d6b4 	.word	0x0802d6b4
 80055b0:	240030b4 	.word	0x240030b4
 80055b4:	0802d6cc 	.word	0x0802d6cc

080055b8 <SCI_DataLink_ReleaseFrames>:

void SCI_DataLink_ReleaseFrames(sci_frame_t * frame)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
    sci_frame_t * fnext;
    while (frame != 0)
 80055c0:	e007      	b.n	80055d2 <SCI_DataLink_ReleaseFrames+0x1a>
    {
        fnext = frame->Next;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	60fb      	str	r3, [r7, #12]
        SCI_DataLink_ReleaseFrame(frame);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7ff ff9d 	bl	8005508 <SCI_DataLink_ReleaseFrame>
        frame = fnext;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	607b      	str	r3, [r7, #4]
    while (frame != 0)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1f4      	bne.n	80055c2 <SCI_DataLink_ReleaseFrames+0xa>
    }
}
 80055d8:	bf00      	nop
 80055da:	bf00      	nop
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <SCI_DataLink_ResetRxFrames>:

void SCI_DataLink_ResetRxFrames(sci_frame_t * frame)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
    while (frame != 0)
 80055ea:	e006      	b.n	80055fa <SCI_DataLink_ResetRxFrames+0x18>
    {
        frame->RdPtr = frame->Buffer;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	605a      	str	r2, [r3, #4]
        frame = frame->Next;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	607b      	str	r3, [r7, #4]
    while (frame != 0)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1f5      	bne.n	80055ec <SCI_DataLink_ResetRxFrames+0xa>
    }
}
 8005600:	bf00      	nop
 8005602:	bf00      	nop
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <SCI_DataLink_RequestFrame>:

static sci_frame_t * SCI_DataLink_RequestFrame(sci_frame_queue_t * queue)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b084      	sub	sp, #16
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
    sci_frame_t * frame = 0;
 8005616:	2300      	movs	r3, #0
 8005618:	60fb      	str	r3, [r7, #12]

    IRQ_LOCK();
 800561a:	f001 f9db 	bl	80069d4 <IRQ_LOCK>
    if (!(queue->Load < queue->Size))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	689a      	ldr	r2, [r3, #8]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	429a      	cmp	r2, r3
 8005628:	d303      	bcc.n	8005632 <SCI_DataLink_RequestFrame+0x24>
    {
        IRQ_UNLOCK();
 800562a:	f001 f9b1 	bl	8006990 <IRQ_UNLOCK>
        return 0; // no free buffers!!
 800562e:	2300      	movs	r3, #0
 8005630:	e02b      	b.n	800568a <SCI_DataLink_RequestFrame+0x7c>
    }
    queue->Load++;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	1c5a      	adds	r2, r3, #1
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	609a      	str	r2, [r3, #8]

    /* scan for free buffer. */
    do
    {
        frame = queue->Head++;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f103 0110 	add.w	r1, r3, #16
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	6051      	str	r1, [r2, #4]
 8005648:	60fb      	str	r3, [r7, #12]
        if (queue->Head == queue->Buff + queue->Size)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6819      	ldr	r1, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	011b      	lsls	r3, r3, #4
 8005658:	440b      	add	r3, r1
 800565a:	429a      	cmp	r2, r3
 800565c:	d103      	bne.n	8005666 <SCI_DataLink_RequestFrame+0x58>
        {
            queue->Head = queue->Buff;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	605a      	str	r2, [r3, #4]
        }
    } while (frame->WrPtr != 0);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1e6      	bne.n	800563c <SCI_DataLink_RequestFrame+0x2e>

    /* setup buffer */
    frame->Next = 0;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	60da      	str	r2, [r3, #12]
    frame->RdPtr = frame->Buffer; //0;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	605a      	str	r2, [r3, #4]
    frame->WrPtr = frame->Buffer;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	689a      	ldr	r2, [r3, #8]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	601a      	str	r2, [r3, #0]

    IRQ_UNLOCK();
 8005684:	f001 f984 	bl	8006990 <IRQ_UNLOCK>
    return frame;
 8005688:	68fb      	ldr	r3, [r7, #12]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
	...

08005694 <SCI_DataLink_RequestTxFrame>:

sci_frame_t * SCI_DataLink_RequestTxFrame(bool queueStartByte)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	4603      	mov	r3, r0
 800569c:	71fb      	strb	r3, [r7, #7]
    sci_frame_t * frame = 0;
 800569e:	2300      	movs	r3, #0
 80056a0:	617b      	str	r3, [r7, #20]
    ltc_t start = { 0 };
 80056a2:	f107 030c 	add.w	r3, r7, #12
 80056a6:	2200      	movs	r2, #0
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	605a      	str	r2, [r3, #4]
    Time_GetNow(&start);
 80056ac:	f107 030c 	add.w	r3, r7, #12
 80056b0:	4618      	mov	r0, r3
 80056b2:	f00e fccb 	bl	801404c <Time_GetNow>

    while ((frame = SCI_DataLink_RequestFrame(&SCI_TxFrameQueue)) == 0)
 80056b6:	e019      	b.n	80056ec <SCI_DataLink_RequestTxFrame+0x58>
            /* USB send timeout occurred! */
            RaiseError(ERROR_USB_TIMEOUT);
            continue;
        }
#endif
        if (SCI_CurrentTxFrame == 0)
 80056b8:	4b16      	ldr	r3, [pc, #88]	@ (8005714 <SCI_DataLink_RequestTxFrame+0x80>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d105      	bne.n	80056cc <SCI_DataLink_RequestTxFrame+0x38>
        {
//          BREAKPOINT();
            /* No buffers available and not sending!!! */
            RaiseError(ERROR_SCI_TX_BUFFER_EXCEEDANCE);
 80056c0:	f06f 00de 	mvn.w	r0, #222	@ 0xde
 80056c4:	f7ff fd7e 	bl	80051c4 <RaiseError>
            return 0;
 80056c8:	2300      	movs	r3, #0
 80056ca:	e01e      	b.n	800570a <SCI_DataLink_RequestTxFrame+0x76>
        }

        if (Time_CheckTimeoutMSec(&start, SCI_TX_TIMEOUT_MSEC))
 80056cc:	f107 030c 	add.w	r3, r7, #12
 80056d0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80056d4:	4618      	mov	r0, r3
 80056d6:	f00e fcfd 	bl	80140d4 <Time_CheckTimeoutMSec>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d005      	beq.n	80056ec <SCI_DataLink_RequestTxFrame+0x58>
        {
//          BREAKPOINT();
            /* Timeout: sending but no buffers available within given time!!! */
            RaiseError(ERROR_SCI_BUFFER_FULL);
 80056e0:	f06f 00d7 	mvn.w	r0, #215	@ 0xd7
 80056e4:	f7ff fd6e 	bl	80051c4 <RaiseError>
            return 0;
 80056e8:	2300      	movs	r3, #0
 80056ea:	e00e      	b.n	800570a <SCI_DataLink_RequestTxFrame+0x76>
    while ((frame = SCI_DataLink_RequestFrame(&SCI_TxFrameQueue)) == 0)
 80056ec:	480a      	ldr	r0, [pc, #40]	@ (8005718 <SCI_DataLink_RequestTxFrame+0x84>)
 80056ee:	f7ff ff8e 	bl	800560e <SCI_DataLink_RequestFrame>
 80056f2:	6178      	str	r0, [r7, #20]
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d0de      	beq.n	80056b8 <SCI_DataLink_RequestTxFrame+0x24>
        }
    }

    if (queueStartByte)
 80056fa:	79fb      	ldrb	r3, [r7, #7]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d003      	beq.n	8005708 <SCI_DataLink_RequestTxFrame+0x74>
    {
        /* add start byte */
        SCI_Frame_SetByte(frame, SCI_START_BYTE);
 8005700:	2102      	movs	r1, #2
 8005702:	6978      	ldr	r0, [r7, #20]
 8005704:	f000 fbc4 	bl	8005e90 <SCI_Frame_SetByte>
    }

    return frame;
 8005708:	697b      	ldr	r3, [r7, #20]
}
 800570a:	4618      	mov	r0, r3
 800570c:	3718      	adds	r7, #24
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	240030cc 	.word	0x240030cc
 8005718:	240030b4 	.word	0x240030b4

0800571c <TxCallback>:

static void TxCallback(status_t status, sci_frame_t * frame)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
    assert(frame != 0);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d106      	bne.n	800573a <TxCallback+0x1e>
 800572c:	4b2a      	ldr	r3, [pc, #168]	@ (80057d8 <TxCallback+0xbc>)
 800572e:	4a2b      	ldr	r2, [pc, #172]	@ (80057dc <TxCallback+0xc0>)
 8005730:	f44f 71f3 	mov.w	r1, #486	@ 0x1e6
 8005734:	482a      	ldr	r0, [pc, #168]	@ (80057e0 <TxCallback+0xc4>)
 8005736:	f002 f8b7 	bl	80078a8 <__assert_func>
    assert(frame->WrPtr != 0);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d106      	bne.n	8005750 <TxCallback+0x34>
 8005742:	4b28      	ldr	r3, [pc, #160]	@ (80057e4 <TxCallback+0xc8>)
 8005744:	4a25      	ldr	r2, [pc, #148]	@ (80057dc <TxCallback+0xc0>)
 8005746:	f240 11e7 	movw	r1, #487	@ 0x1e7
 800574a:	4825      	ldr	r0, [pc, #148]	@ (80057e0 <TxCallback+0xc4>)
 800574c:	f002 f8ac 	bl	80078a8 <__assert_func>
    assert(SCI_CurrentTxFrame == frame);
 8005750:	4b25      	ldr	r3, [pc, #148]	@ (80057e8 <TxCallback+0xcc>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	683a      	ldr	r2, [r7, #0]
 8005756:	429a      	cmp	r2, r3
 8005758:	d006      	beq.n	8005768 <TxCallback+0x4c>
 800575a:	4b24      	ldr	r3, [pc, #144]	@ (80057ec <TxCallback+0xd0>)
 800575c:	4a1f      	ldr	r2, [pc, #124]	@ (80057dc <TxCallback+0xc0>)
 800575e:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8005762:	481f      	ldr	r0, [pc, #124]	@ (80057e0 <TxCallback+0xc4>)
 8005764:	f002 f8a0 	bl	80078a8 <__assert_func>
    /* Release the frame at the beginning of the queue.
     * If an error has occurred, also remove the subsequent
     * frames that belong to the current message. */
    do
    {
        sci_frame_t * next_frame = frame->Next;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	60fb      	str	r3, [r7, #12]
        SCI_DataLink_ReleaseFrame(frame);
 800576e:	6838      	ldr	r0, [r7, #0]
 8005770:	f7ff feca 	bl	8005508 <SCI_DataLink_ReleaseFrame>
        frame = next_frame;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	603b      	str	r3, [r7, #0]
    }
    while ((status < STATUS_OK) &&
           (frame != 0) &&
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	da08      	bge.n	8005790 <TxCallback+0x74>
    while ((status < STATUS_OK) &&
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d005      	beq.n	8005790 <TxCallback+0x74>
           (!SCI_Frame_IsStartFrame(frame)));
 8005784:	6838      	ldr	r0, [r7, #0]
 8005786:	f000 fb63 	bl	8005e50 <SCI_Frame_IsStartFrame>
 800578a:	4603      	mov	r3, r0
           (frame != 0) &&
 800578c:	2b00      	cmp	r3, #0
 800578e:	d0eb      	beq.n	8005768 <TxCallback+0x4c>

    /* Check for errors and invoke the error callback. */
    if (status < STATUS_OK && status != ERROR_ABORTED)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	da06      	bge.n	80057a4 <TxCallback+0x88>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f113 0f02 	cmn.w	r3, #2
 800579c:	d002      	beq.n	80057a4 <TxCallback+0x88>
    {
        RaiseError(status);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7ff fd10 	bl	80051c4 <RaiseError>
    }

    SCI_CurrentTxFrame = frame;
 80057a4:	4a10      	ldr	r2, [pc, #64]	@ (80057e8 <TxCallback+0xcc>)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	6013      	str	r3, [r2, #0]

    /* Send the next frame in the queue. */
    if (frame != 0)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00f      	beq.n	80057d0 <TxCallback+0xb4>
    {
        status = SCI_DataLink_SendFrame(frame);
 80057b0:	6838      	ldr	r0, [r7, #0]
 80057b2:	f000 f81d 	bl	80057f0 <SCI_DataLink_SendFrame>
 80057b6:	6078      	str	r0, [r7, #4]
        if (status < STATUS_OK)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	da08      	bge.n	80057d0 <TxCallback+0xb4>
        {
            SCI_CurrentTxFrame = 0;
 80057be:	4b0a      	ldr	r3, [pc, #40]	@ (80057e8 <TxCallback+0xcc>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	601a      	str	r2, [r3, #0]
            SCI_DataLink_ReleaseFrames(frame);
 80057c4:	6838      	ldr	r0, [r7, #0]
 80057c6:	f7ff fef7 	bl	80055b8 <SCI_DataLink_ReleaseFrames>
            RaiseError(status);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7ff fcfa 	bl	80051c4 <RaiseError>
        }
    }
}
 80057d0:	bf00      	nop
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	0802d638 	.word	0x0802d638
 80057dc:	0802e0b8 	.word	0x0802e0b8
 80057e0:	0802d60c 	.word	0x0802d60c
 80057e4:	0802d6e4 	.word	0x0802d6e4
 80057e8:	240030cc 	.word	0x240030cc
 80057ec:	0802d6f8 	.word	0x0802d6f8

080057f0 <SCI_DataLink_SendFrame>:

static inline status_t SCI_DataLink_SendFrame(sci_frame_t * frame)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
    assert(frame != 0);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d106      	bne.n	800580c <SCI_DataLink_SendFrame+0x1c>
 80057fe:	4b20      	ldr	r3, [pc, #128]	@ (8005880 <SCI_DataLink_SendFrame+0x90>)
 8005800:	4a20      	ldr	r2, [pc, #128]	@ (8005884 <SCI_DataLink_SendFrame+0x94>)
 8005802:	f240 210e 	movw	r1, #526	@ 0x20e
 8005806:	4820      	ldr	r0, [pc, #128]	@ (8005888 <SCI_DataLink_SendFrame+0x98>)
 8005808:	f002 f84e 	bl	80078a8 <__assert_func>
    assert(frame->Buffer == frame->RdPtr);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689a      	ldr	r2, [r3, #8]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	429a      	cmp	r2, r3
 8005816:	d006      	beq.n	8005826 <SCI_DataLink_SendFrame+0x36>
 8005818:	4b1c      	ldr	r3, [pc, #112]	@ (800588c <SCI_DataLink_SendFrame+0x9c>)
 800581a:	4a1a      	ldr	r2, [pc, #104]	@ (8005884 <SCI_DataLink_SendFrame+0x94>)
 800581c:	f240 210f 	movw	r1, #527	@ 0x20f
 8005820:	4819      	ldr	r0, [pc, #100]	@ (8005888 <SCI_DataLink_SendFrame+0x98>)
 8005822:	f002 f841 	bl	80078a8 <__assert_func>
    assert(frame->RdPtr <= frame->WrPtr);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	429a      	cmp	r2, r3
 8005830:	d906      	bls.n	8005840 <SCI_DataLink_SendFrame+0x50>
 8005832:	4b17      	ldr	r3, [pc, #92]	@ (8005890 <SCI_DataLink_SendFrame+0xa0>)
 8005834:	4a13      	ldr	r2, [pc, #76]	@ (8005884 <SCI_DataLink_SendFrame+0x94>)
 8005836:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800583a:	4813      	ldr	r0, [pc, #76]	@ (8005888 <SCI_DataLink_SendFrame+0x98>)
 800583c:	f002 f834 	bl	80078a8 <__assert_func>
    assert(frame->WrPtr <= frame->Buffer + SCI_FRAME_SIZE);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	3340      	adds	r3, #64	@ 0x40
 800584a:	429a      	cmp	r2, r3
 800584c:	d906      	bls.n	800585c <SCI_DataLink_SendFrame+0x6c>
 800584e:	4b11      	ldr	r3, [pc, #68]	@ (8005894 <SCI_DataLink_SendFrame+0xa4>)
 8005850:	4a0c      	ldr	r2, [pc, #48]	@ (8005884 <SCI_DataLink_SendFrame+0x94>)
 8005852:	f240 2111 	movw	r1, #529	@ 0x211
 8005856:	480c      	ldr	r0, [pc, #48]	@ (8005888 <SCI_DataLink_SendFrame+0x98>)
 8005858:	f002 f826 	bl	80078a8 <__assert_func>
    return USB_SendBuffer(frame->Buffer,
                          (size_t) (frame->WrPtr - frame->Buffer),
                          (usb_tx_callback_t) TxCallback,
                          frame);
#else
    return UART_SendBuffer(frame->Buffer,
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6898      	ldr	r0, [r3, #8]
                           (size_t) (frame->WrPtr - frame->Buffer),
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	1ad3      	subs	r3, r2, r3
    return UART_SendBuffer(frame->Buffer,
 800586a:	4619      	mov	r1, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a0a      	ldr	r2, [pc, #40]	@ (8005898 <SCI_DataLink_SendFrame+0xa8>)
 8005870:	f001 fdf4 	bl	800745c <UART_SendBuffer>
 8005874:	4603      	mov	r3, r0
                           (uart_tx_callback_t) TxCallback,
                           frame);
#endif
}
 8005876:	4618      	mov	r0, r3
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	0802d638 	.word	0x0802d638
 8005884:	0802e0c4 	.word	0x0802e0c4
 8005888:	0802d60c 	.word	0x0802d60c
 800588c:	0802d714 	.word	0x0802d714
 8005890:	0802d664 	.word	0x0802d664
 8005894:	0802d684 	.word	0x0802d684
 8005898:	0800571d 	.word	0x0800571d

0800589c <SCI_DataLink_IsTxBusy>:

bool SCI_DataLink_IsTxBusy(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
#if AFBR_SCI_USB
    return (SCI_CurrentTxFrame != 0) || USB_IsTxBusy();
#else
    return (SCI_CurrentTxFrame != 0) || UART_IsTxBusy();
 80058a0:	4b08      	ldr	r3, [pc, #32]	@ (80058c4 <SCI_DataLink_IsTxBusy+0x28>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d104      	bne.n	80058b2 <SCI_DataLink_IsTxBusy+0x16>
 80058a8:	f001 fdcc 	bl	8007444 <UART_IsTxBusy>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <SCI_DataLink_IsTxBusy+0x1a>
 80058b2:	2301      	movs	r3, #1
 80058b4:	e000      	b.n	80058b8 <SCI_DataLink_IsTxBusy+0x1c>
 80058b6:	2300      	movs	r3, #0
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	b2db      	uxtb	r3, r3
#endif
}
 80058be:	4618      	mov	r0, r3
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	240030cc 	.word	0x240030cc

080058c8 <SCI_DataLink_SendTxFrame>:

status_t SCI_DataLink_SendTxFrame(sci_frame_t * frame, bool high_priority)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	460b      	mov	r3, r1
 80058d2:	70fb      	strb	r3, [r7, #3]
    assert(frame != 0);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d106      	bne.n	80058e8 <SCI_DataLink_SendTxFrame+0x20>
 80058da:	4b75      	ldr	r3, [pc, #468]	@ (8005ab0 <SCI_DataLink_SendTxFrame+0x1e8>)
 80058dc:	4a75      	ldr	r2, [pc, #468]	@ (8005ab4 <SCI_DataLink_SendTxFrame+0x1ec>)
 80058de:	f240 212a 	movw	r1, #554	@ 0x22a
 80058e2:	4875      	ldr	r0, [pc, #468]	@ (8005ab8 <SCI_DataLink_SendTxFrame+0x1f0>)
 80058e4:	f001 ffe0 	bl	80078a8 <__assert_func>
    assert(frame->Buffer == frame->RdPtr);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689a      	ldr	r2, [r3, #8]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d006      	beq.n	8005902 <SCI_DataLink_SendTxFrame+0x3a>
 80058f4:	4b71      	ldr	r3, [pc, #452]	@ (8005abc <SCI_DataLink_SendTxFrame+0x1f4>)
 80058f6:	4a6f      	ldr	r2, [pc, #444]	@ (8005ab4 <SCI_DataLink_SendTxFrame+0x1ec>)
 80058f8:	f240 212b 	movw	r1, #555	@ 0x22b
 80058fc:	486e      	ldr	r0, [pc, #440]	@ (8005ab8 <SCI_DataLink_SendTxFrame+0x1f0>)
 80058fe:	f001 ffd3 	bl	80078a8 <__assert_func>
    assert(frame->RdPtr < frame->WrPtr);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	429a      	cmp	r2, r3
 800590c:	d306      	bcc.n	800591c <SCI_DataLink_SendTxFrame+0x54>
 800590e:	4b6c      	ldr	r3, [pc, #432]	@ (8005ac0 <SCI_DataLink_SendTxFrame+0x1f8>)
 8005910:	4a68      	ldr	r2, [pc, #416]	@ (8005ab4 <SCI_DataLink_SendTxFrame+0x1ec>)
 8005912:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 8005916:	4868      	ldr	r0, [pc, #416]	@ (8005ab8 <SCI_DataLink_SendTxFrame+0x1f0>)
 8005918:	f001 ffc6 	bl	80078a8 <__assert_func>
    assert(frame->WrPtr <= frame->Buffer + SCI_FRAME_SIZE);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	3340      	adds	r3, #64	@ 0x40
 8005926:	429a      	cmp	r2, r3
 8005928:	d906      	bls.n	8005938 <SCI_DataLink_SendTxFrame+0x70>
 800592a:	4b66      	ldr	r3, [pc, #408]	@ (8005ac4 <SCI_DataLink_SendTxFrame+0x1fc>)
 800592c:	4a61      	ldr	r2, [pc, #388]	@ (8005ab4 <SCI_DataLink_SendTxFrame+0x1ec>)
 800592e:	f240 212d 	movw	r1, #557	@ 0x22d
 8005932:	4861      	ldr	r0, [pc, #388]	@ (8005ab8 <SCI_DataLink_SendTxFrame+0x1f0>)
 8005934:	f001 ffb8 	bl	80078a8 <__assert_func>

    status_t status = STATUS_OK;
 8005938:	2300      	movs	r3, #0
 800593a:	617b      	str	r3, [r7, #20]

    /* queue CRC and stop byte */
    SCI_Frame_QueueCRC(frame);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 f979 	bl	8005c34 <SCI_Frame_QueueCRC>
    SCI_Frame_SetByte(frame, SCI_STOP_BYTE);
 8005942:	2103      	movs	r1, #3
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 faa3 	bl	8005e90 <SCI_Frame_SetByte>

    /* Lock interrupts such that the current TX frame
     * does not finish while the new one is enqueued. */
    IRQ_LOCK();
 800594a:	f001 f843 	bl	80069d4 <IRQ_LOCK>
    if (SCI_CurrentTxFrame != 0)
 800594e:	4b5e      	ldr	r3, [pc, #376]	@ (8005ac8 <SCI_DataLink_SendTxFrame+0x200>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	f000 8090 	beq.w	8005a78 <SCI_DataLink_SendTxFrame+0x1b0>
    {
        sci_frame_t * last_frame = (sci_frame_t*) SCI_CurrentTxFrame;
 8005958:	4b5b      	ldr	r3, [pc, #364]	@ (8005ac8 <SCI_DataLink_SendTxFrame+0x200>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	613b      	str	r3, [r7, #16]

        if (high_priority)
 800595e:	78fb      	ldrb	r3, [r7, #3]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d04d      	beq.n	8005a00 <SCI_DataLink_SendTxFrame+0x138>
        {
            /* find end of current frame */
            while ((last_frame->Next != 0) && !SCI_Frame_IsStartFrame(last_frame->Next))
 8005964:	e002      	b.n	800596c <SCI_DataLink_SendTxFrame+0xa4>
            //while ((*(last_frame->WrPtr - 1) != SCI_STOP_BYTE) && (last_frame->Next != 0))
            {
                last_frame = last_frame->Next;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	613b      	str	r3, [r7, #16]
            while ((last_frame->Next != 0) && !SCI_Frame_IsStartFrame(last_frame->Next))
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d007      	beq.n	8005984 <SCI_DataLink_SendTxFrame+0xbc>
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	4618      	mov	r0, r3
 800597a:	f000 fa69 	bl	8005e50 <SCI_Frame_IsStartFrame>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d0f0      	beq.n	8005966 <SCI_DataLink_SendTxFrame+0x9e>
            }

            assert(last_frame != 0);
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d106      	bne.n	8005998 <SCI_DataLink_SendTxFrame+0xd0>
 800598a:	4b50      	ldr	r3, [pc, #320]	@ (8005acc <SCI_DataLink_SendTxFrame+0x204>)
 800598c:	4a49      	ldr	r2, [pc, #292]	@ (8005ab4 <SCI_DataLink_SendTxFrame+0x1ec>)
 800598e:	f240 2145 	movw	r1, #581	@ 0x245
 8005992:	4849      	ldr	r0, [pc, #292]	@ (8005ab8 <SCI_DataLink_SendTxFrame+0x1f0>)
 8005994:	f001 ff88 	bl	80078a8 <__assert_func>
            assert(last_frame->Buffer == last_frame->RdPtr);
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	689a      	ldr	r2, [r3, #8]
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d006      	beq.n	80059b2 <SCI_DataLink_SendTxFrame+0xea>
 80059a4:	4b4a      	ldr	r3, [pc, #296]	@ (8005ad0 <SCI_DataLink_SendTxFrame+0x208>)
 80059a6:	4a43      	ldr	r2, [pc, #268]	@ (8005ab4 <SCI_DataLink_SendTxFrame+0x1ec>)
 80059a8:	f240 2146 	movw	r1, #582	@ 0x246
 80059ac:	4842      	ldr	r0, [pc, #264]	@ (8005ab8 <SCI_DataLink_SendTxFrame+0x1f0>)
 80059ae:	f001 ff7b 	bl	80078a8 <__assert_func>
            assert(last_frame->RdPtr < last_frame->WrPtr);
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d306      	bcc.n	80059cc <SCI_DataLink_SendTxFrame+0x104>
 80059be:	4b45      	ldr	r3, [pc, #276]	@ (8005ad4 <SCI_DataLink_SendTxFrame+0x20c>)
 80059c0:	4a3c      	ldr	r2, [pc, #240]	@ (8005ab4 <SCI_DataLink_SendTxFrame+0x1ec>)
 80059c2:	f240 2147 	movw	r1, #583	@ 0x247
 80059c6:	483c      	ldr	r0, [pc, #240]	@ (8005ab8 <SCI_DataLink_SendTxFrame+0x1f0>)
 80059c8:	f001 ff6e 	bl	80078a8 <__assert_func>
            assert(last_frame->WrPtr <= last_frame->Buffer + SCI_FRAME_SIZE);
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	3340      	adds	r3, #64	@ 0x40
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d906      	bls.n	80059e8 <SCI_DataLink_SendTxFrame+0x120>
 80059da:	4b3f      	ldr	r3, [pc, #252]	@ (8005ad8 <SCI_DataLink_SendTxFrame+0x210>)
 80059dc:	4a35      	ldr	r2, [pc, #212]	@ (8005ab4 <SCI_DataLink_SendTxFrame+0x1ec>)
 80059de:	f44f 7112 	mov.w	r1, #584	@ 0x248
 80059e2:	4835      	ldr	r0, [pc, #212]	@ (8005ab8 <SCI_DataLink_SendTxFrame+0x1f0>)
 80059e4:	f001 ff60 	bl	80078a8 <__assert_func>

            sci_frame_t * next_frame = last_frame->Next;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	60fb      	str	r3, [r7, #12]

            /* Enqueue frame to the end of the current frame. */
            last_frame->Next = frame;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	60da      	str	r2, [r3, #12]

            /* set remaining frame to be queued. */
            frame = next_frame;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	607b      	str	r3, [r7, #4]
        }


        /* find end of queue . */
        while (last_frame->Next != 0)
 80059f8:	e002      	b.n	8005a00 <SCI_DataLink_SendTxFrame+0x138>
        {
            last_frame = last_frame->Next;
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	613b      	str	r3, [r7, #16]
        while (last_frame->Next != 0)
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1f8      	bne.n	80059fa <SCI_DataLink_SendTxFrame+0x132>
        }

        assert(last_frame != 0);
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d106      	bne.n	8005a1c <SCI_DataLink_SendTxFrame+0x154>
 8005a0e:	4b2f      	ldr	r3, [pc, #188]	@ (8005acc <SCI_DataLink_SendTxFrame+0x204>)
 8005a10:	4a28      	ldr	r2, [pc, #160]	@ (8005ab4 <SCI_DataLink_SendTxFrame+0x1ec>)
 8005a12:	f240 215a 	movw	r1, #602	@ 0x25a
 8005a16:	4828      	ldr	r0, [pc, #160]	@ (8005ab8 <SCI_DataLink_SendTxFrame+0x1f0>)
 8005a18:	f001 ff46 	bl	80078a8 <__assert_func>
        assert(last_frame->Buffer == last_frame->RdPtr);
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	689a      	ldr	r2, [r3, #8]
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d006      	beq.n	8005a36 <SCI_DataLink_SendTxFrame+0x16e>
 8005a28:	4b29      	ldr	r3, [pc, #164]	@ (8005ad0 <SCI_DataLink_SendTxFrame+0x208>)
 8005a2a:	4a22      	ldr	r2, [pc, #136]	@ (8005ab4 <SCI_DataLink_SendTxFrame+0x1ec>)
 8005a2c:	f240 215b 	movw	r1, #603	@ 0x25b
 8005a30:	4821      	ldr	r0, [pc, #132]	@ (8005ab8 <SCI_DataLink_SendTxFrame+0x1f0>)
 8005a32:	f001 ff39 	bl	80078a8 <__assert_func>
        assert(last_frame->RdPtr < last_frame->WrPtr);
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	685a      	ldr	r2, [r3, #4]
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d306      	bcc.n	8005a50 <SCI_DataLink_SendTxFrame+0x188>
 8005a42:	4b24      	ldr	r3, [pc, #144]	@ (8005ad4 <SCI_DataLink_SendTxFrame+0x20c>)
 8005a44:	4a1b      	ldr	r2, [pc, #108]	@ (8005ab4 <SCI_DataLink_SendTxFrame+0x1ec>)
 8005a46:	f44f 7117 	mov.w	r1, #604	@ 0x25c
 8005a4a:	481b      	ldr	r0, [pc, #108]	@ (8005ab8 <SCI_DataLink_SendTxFrame+0x1f0>)
 8005a4c:	f001 ff2c 	bl	80078a8 <__assert_func>
        assert(last_frame->WrPtr <= last_frame->Buffer + SCI_FRAME_SIZE);
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	3340      	adds	r3, #64	@ 0x40
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d906      	bls.n	8005a6c <SCI_DataLink_SendTxFrame+0x1a4>
 8005a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8005ad8 <SCI_DataLink_SendTxFrame+0x210>)
 8005a60:	4a14      	ldr	r2, [pc, #80]	@ (8005ab4 <SCI_DataLink_SendTxFrame+0x1ec>)
 8005a62:	f240 215d 	movw	r1, #605	@ 0x25d
 8005a66:	4814      	ldr	r0, [pc, #80]	@ (8005ab8 <SCI_DataLink_SendTxFrame+0x1f0>)
 8005a68:	f001 ff1e 	bl	80078a8 <__assert_func>

        /* Enqueue frame to the queue. */
        last_frame->Next = frame;
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	60da      	str	r2, [r3, #12]

        IRQ_UNLOCK();
 8005a72:	f000 ff8d 	bl	8006990 <IRQ_UNLOCK>
 8005a76:	e015      	b.n	8005aa4 <SCI_DataLink_SendTxFrame+0x1dc>
    }
    else
    {
        /* Send data if TX line is free. */
        SCI_CurrentTxFrame = frame;
 8005a78:	4a13      	ldr	r2, [pc, #76]	@ (8005ac8 <SCI_DataLink_SendTxFrame+0x200>)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6013      	str	r3, [r2, #0]

        IRQ_UNLOCK();
 8005a7e:	f000 ff87 	bl	8006990 <IRQ_UNLOCK>

        status = SCI_DataLink_SendFrame(frame);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7ff feb4 	bl	80057f0 <SCI_DataLink_SendFrame>
 8005a88:	6178      	str	r0, [r7, #20]
        if (status < STATUS_OK)
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	da09      	bge.n	8005aa4 <SCI_DataLink_SendTxFrame+0x1dc>
        {
            SCI_CurrentTxFrame = 0;
 8005a90:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac8 <SCI_DataLink_SendTxFrame+0x200>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	601a      	str	r2, [r3, #0]
            SCI_DataLink_ReleaseFrames(frame);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7ff fd8e 	bl	80055b8 <SCI_DataLink_ReleaseFrames>
            BREAKPOINT();
 8005a9c:	be00      	bkpt	0x0000
            RaiseError(status);
 8005a9e:	6978      	ldr	r0, [r7, #20]
 8005aa0:	f7ff fb90 	bl	80051c4 <RaiseError>
        }
    }

    return status;
 8005aa4:	697b      	ldr	r3, [r7, #20]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3718      	adds	r7, #24
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	0802d638 	.word	0x0802d638
 8005ab4:	0802e0dc 	.word	0x0802e0dc
 8005ab8:	0802d60c 	.word	0x0802d60c
 8005abc:	0802d714 	.word	0x0802d714
 8005ac0:	0802d734 	.word	0x0802d734
 8005ac4:	0802d684 	.word	0x0802d684
 8005ac8:	240030cc 	.word	0x240030cc
 8005acc:	0802d750 	.word	0x0802d750
 8005ad0:	0802d760 	.word	0x0802d760
 8005ad4:	0802d788 	.word	0x0802d788
 8005ad8:	0802d7b0 	.word	0x0802d7b0

08005adc <SCI_DataLink_GetCRC>:

static uint8_t SCI_DataLink_GetCRC(sci_frame_t const * frame)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
    assert(frame != 0);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d106      	bne.n	8005af8 <SCI_DataLink_GetCRC+0x1c>
 8005aea:	4b13      	ldr	r3, [pc, #76]	@ (8005b38 <SCI_DataLink_GetCRC+0x5c>)
 8005aec:	4a13      	ldr	r2, [pc, #76]	@ (8005b3c <SCI_DataLink_GetCRC+0x60>)
 8005aee:	f240 217a 	movw	r1, #634	@ 0x27a
 8005af2:	4813      	ldr	r0, [pc, #76]	@ (8005b40 <SCI_DataLink_GetCRC+0x64>)
 8005af4:	f001 fed8 	bl	80078a8 <__assert_func>

    sci_frame_t const * frame2 = frame;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	60fb      	str	r3, [r7, #12]

    while (frame->Next != 0)
 8005afc:	e004      	b.n	8005b08 <SCI_DataLink_GetCRC+0x2c>
    {
        frame2 = frame;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	60fb      	str	r3, [r7, #12]
        frame = frame->Next;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	607b      	str	r3, [r7, #4]
    while (frame->Next != 0)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1f6      	bne.n	8005afe <SCI_DataLink_GetCRC+0x22>
    }

    if (frame->WrPtr > frame->Buffer)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d904      	bls.n	8005b26 <SCI_DataLink_GetCRC+0x4a>
        return *(frame->WrPtr - 1);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005b24:	e003      	b.n	8005b2e <SCI_DataLink_GetCRC+0x52>
    else
        return *(frame2->WrPtr - 1);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	0802d638 	.word	0x0802d638
 8005b3c:	0802e0f8 	.word	0x0802e0f8
 8005b40:	0802d60c 	.word	0x0802d60c

08005b44 <SCI_DataLink_CalcCRC>:

static uint8_t SCI_DataLink_CalcCRC(sci_frame_t const * frame)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
    assert(frame != 0);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d106      	bne.n	8005b60 <SCI_DataLink_CalcCRC+0x1c>
 8005b52:	4b32      	ldr	r3, [pc, #200]	@ (8005c1c <SCI_DataLink_CalcCRC+0xd8>)
 8005b54:	4a32      	ldr	r2, [pc, #200]	@ (8005c20 <SCI_DataLink_CalcCRC+0xdc>)
 8005b56:	f44f 7123 	mov.w	r1, #652	@ 0x28c
 8005b5a:	4832      	ldr	r0, [pc, #200]	@ (8005c24 <SCI_DataLink_CalcCRC+0xe0>)
 8005b5c:	f001 fea4 	bl	80078a8 <__assert_func>
    assert(frame->Buffer <= frame->RdPtr);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689a      	ldr	r2, [r3, #8]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d906      	bls.n	8005b7a <SCI_DataLink_CalcCRC+0x36>
 8005b6c:	4b2e      	ldr	r3, [pc, #184]	@ (8005c28 <SCI_DataLink_CalcCRC+0xe4>)
 8005b6e:	4a2c      	ldr	r2, [pc, #176]	@ (8005c20 <SCI_DataLink_CalcCRC+0xdc>)
 8005b70:	f240 218d 	movw	r1, #653	@ 0x28d
 8005b74:	482b      	ldr	r0, [pc, #172]	@ (8005c24 <SCI_DataLink_CalcCRC+0xe0>)
 8005b76:	f001 fe97 	bl	80078a8 <__assert_func>
    assert(frame->RdPtr <= frame->WrPtr);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d906      	bls.n	8005b94 <SCI_DataLink_CalcCRC+0x50>
 8005b86:	4b29      	ldr	r3, [pc, #164]	@ (8005c2c <SCI_DataLink_CalcCRC+0xe8>)
 8005b88:	4a25      	ldr	r2, [pc, #148]	@ (8005c20 <SCI_DataLink_CalcCRC+0xdc>)
 8005b8a:	f240 218e 	movw	r1, #654	@ 0x28e
 8005b8e:	4825      	ldr	r0, [pc, #148]	@ (8005c24 <SCI_DataLink_CalcCRC+0xe0>)
 8005b90:	f001 fe8a 	bl	80078a8 <__assert_func>
    assert(frame->WrPtr <= frame->Buffer + SCI_FRAME_SIZE);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	3340      	adds	r3, #64	@ 0x40
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d906      	bls.n	8005bb0 <SCI_DataLink_CalcCRC+0x6c>
 8005ba2:	4b23      	ldr	r3, [pc, #140]	@ (8005c30 <SCI_DataLink_CalcCRC+0xec>)
 8005ba4:	4a1e      	ldr	r2, [pc, #120]	@ (8005c20 <SCI_DataLink_CalcCRC+0xdc>)
 8005ba6:	f240 218f 	movw	r1, #655	@ 0x28f
 8005baa:	481e      	ldr	r0, [pc, #120]	@ (8005c24 <SCI_DataLink_CalcCRC+0xe0>)
 8005bac:	f001 fe7c 	bl	80078a8 <__assert_func>

    /* Total frame length (- CRC length). */
    int32_t len_data = SCI_Frame_TotalFrameLength(frame) - 1;
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 f8ed 	bl	8005d90 <SCI_Frame_TotalFrameLength>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	617b      	str	r3, [r7, #20]
//      error_log("received command %#02x, data size to short! %08x != %08x",
//                frame->Buffer[0]);
//  }

    /* Calculate the CRC for all frames in the queue. */
    uint8_t crc = 0;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	74fb      	strb	r3, [r7, #19]
    while (len_data > 0)
 8005bc0:	e023      	b.n	8005c0a <SCI_DataLink_CalcCRC+0xc6>
    {
        int32_t len_frame = frame->WrPtr - frame->Buffer;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	60fb      	str	r3, [r7, #12]
        if (len_data > len_frame)
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	dd09      	ble.n	8005bea <SCI_DataLink_CalcCRC+0xa6>
            crc = SCI_CRC8_Compute(crc, frame->Buffer, (size_t) len_frame);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6899      	ldr	r1, [r3, #8]
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	7cfb      	ldrb	r3, [r7, #19]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7ff fa66 	bl	80050b0 <SCI_CRC8_Compute>
 8005be4:	4603      	mov	r3, r0
 8005be6:	74fb      	strb	r3, [r7, #19]
 8005be8:	e008      	b.n	8005bfc <SCI_DataLink_CalcCRC+0xb8>
        else
            crc = SCI_CRC8_Compute(crc, frame->Buffer, (size_t) len_data);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6899      	ldr	r1, [r3, #8]
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	7cfb      	ldrb	r3, [r7, #19]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7ff fa5c 	bl	80050b0 <SCI_CRC8_Compute>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	74fb      	strb	r3, [r7, #19]

        len_data -= len_frame;
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	617b      	str	r3, [r7, #20]
        frame = frame->Next;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	607b      	str	r3, [r7, #4]
    while (len_data > 0)
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	dcd8      	bgt.n	8005bc2 <SCI_DataLink_CalcCRC+0x7e>
    }
    return crc;
 8005c10:	7cfb      	ldrb	r3, [r7, #19]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3718      	adds	r7, #24
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	0802d638 	.word	0x0802d638
 8005c20:	0802e10c 	.word	0x0802e10c
 8005c24:	0802d60c 	.word	0x0802d60c
 8005c28:	0802d644 	.word	0x0802d644
 8005c2c:	0802d664 	.word	0x0802d664
 8005c30:	0802d684 	.word	0x0802d684

08005c34 <SCI_Frame_QueueCRC>:

static void SCI_Frame_QueueCRC(sci_frame_t * frame)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
    assert(frame != 0);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d106      	bne.n	8005c50 <SCI_Frame_QueueCRC+0x1c>
 8005c42:	4b4c      	ldr	r3, [pc, #304]	@ (8005d74 <SCI_Frame_QueueCRC+0x140>)
 8005c44:	4a4c      	ldr	r2, [pc, #304]	@ (8005d78 <SCI_Frame_QueueCRC+0x144>)
 8005c46:	f240 21ad 	movw	r1, #685	@ 0x2ad
 8005c4a:	484c      	ldr	r0, [pc, #304]	@ (8005d7c <SCI_Frame_QueueCRC+0x148>)
 8005c4c:	f001 fe2c 	bl	80078a8 <__assert_func>
    assert(frame->Buffer == frame->RdPtr);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d006      	beq.n	8005c6a <SCI_Frame_QueueCRC+0x36>
 8005c5c:	4b48      	ldr	r3, [pc, #288]	@ (8005d80 <SCI_Frame_QueueCRC+0x14c>)
 8005c5e:	4a46      	ldr	r2, [pc, #280]	@ (8005d78 <SCI_Frame_QueueCRC+0x144>)
 8005c60:	f240 21ae 	movw	r1, #686	@ 0x2ae
 8005c64:	4845      	ldr	r0, [pc, #276]	@ (8005d7c <SCI_Frame_QueueCRC+0x148>)
 8005c66:	f001 fe1f 	bl	80078a8 <__assert_func>
    assert(frame->RdPtr <= frame->WrPtr);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d906      	bls.n	8005c84 <SCI_Frame_QueueCRC+0x50>
 8005c76:	4b43      	ldr	r3, [pc, #268]	@ (8005d84 <SCI_Frame_QueueCRC+0x150>)
 8005c78:	4a3f      	ldr	r2, [pc, #252]	@ (8005d78 <SCI_Frame_QueueCRC+0x144>)
 8005c7a:	f240 21af 	movw	r1, #687	@ 0x2af
 8005c7e:	483f      	ldr	r0, [pc, #252]	@ (8005d7c <SCI_Frame_QueueCRC+0x148>)
 8005c80:	f001 fe12 	bl	80078a8 <__assert_func>
    assert(frame->WrPtr <= frame->Buffer + SCI_FRAME_SIZE);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	3340      	adds	r3, #64	@ 0x40
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d906      	bls.n	8005ca0 <SCI_Frame_QueueCRC+0x6c>
 8005c92:	4b3d      	ldr	r3, [pc, #244]	@ (8005d88 <SCI_Frame_QueueCRC+0x154>)
 8005c94:	4a38      	ldr	r2, [pc, #224]	@ (8005d78 <SCI_Frame_QueueCRC+0x144>)
 8005c96:	f44f 712c 	mov.w	r1, #688	@ 0x2b0
 8005c9a:	4838      	ldr	r0, [pc, #224]	@ (8005d7c <SCI_Frame_QueueCRC+0x148>)
 8005c9c:	f001 fe04 	bl	80078a8 <__assert_func>
    assert(frame->Buffer[0] == SCI_START_BYTE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d006      	beq.n	8005cb8 <SCI_Frame_QueueCRC+0x84>
 8005caa:	4b38      	ldr	r3, [pc, #224]	@ (8005d8c <SCI_Frame_QueueCRC+0x158>)
 8005cac:	4a32      	ldr	r2, [pc, #200]	@ (8005d78 <SCI_Frame_QueueCRC+0x144>)
 8005cae:	f240 21b1 	movw	r1, #689	@ 0x2b1
 8005cb2:	4832      	ldr	r0, [pc, #200]	@ (8005d7c <SCI_Frame_QueueCRC+0x148>)
 8005cb4:	f001 fdf8 	bl	80078a8 <__assert_func>

    uint8_t crc = 0;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	75fb      	strb	r3, [r7, #23]

    uint_fast8_t escape = 0;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	613b      	str	r3, [r7, #16]

    /* Ignore the start byte in the first frame. */
    frame->RdPtr = frame->Buffer + 1;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	1c5a      	adds	r2, r3, #1
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	605a      	str	r2, [r3, #4]

    while (frame != 0)
 8005cca:	e04a      	b.n	8005d62 <SCI_Frame_QueueCRC+0x12e>
    {
        /* Calculate byte-wise CRC and heed byte stuffing. */
        while (frame->RdPtr < frame->WrPtr)
        {
            if (!escape && *frame->RdPtr == SCI_ESCAPE_BYTE)
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d107      	bne.n	8005ce2 <SCI_Frame_QueueCRC+0xae>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	2b1b      	cmp	r3, #27
 8005cda:	d102      	bne.n	8005ce2 <SCI_Frame_QueueCRC+0xae>
            {
                escape = !0;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	613b      	str	r3, [r7, #16]
 8005ce0:	e01d      	b.n	8005d1e <SCI_Frame_QueueCRC+0xea>
            }
            else
            {
                if (escape)
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d011      	beq.n	8005d0c <SCI_Frame_QueueCRC+0xd8>
                {
                    escape = 0;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	613b      	str	r3, [r7, #16]
                    uint8_t byte = (uint8_t) (~(*frame->RdPtr));
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	43db      	mvns	r3, r3
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	73fb      	strb	r3, [r7, #15]
                    crc = SCI_CRC8_Compute(crc, &byte, 1);
 8005cf8:	f107 010f 	add.w	r1, r7, #15
 8005cfc:	7dfb      	ldrb	r3, [r7, #23]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7ff f9d5 	bl	80050b0 <SCI_CRC8_Compute>
 8005d06:	4603      	mov	r3, r0
 8005d08:	75fb      	strb	r3, [r7, #23]
 8005d0a:	e008      	b.n	8005d1e <SCI_Frame_QueueCRC+0xea>
                }
                else
                {
                    crc = SCI_CRC8_Compute(crc, frame->RdPtr, 1);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6859      	ldr	r1, [r3, #4]
 8005d10:	7dfb      	ldrb	r3, [r7, #23]
 8005d12:	2201      	movs	r2, #1
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7ff f9cb 	bl	80050b0 <SCI_CRC8_Compute>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	75fb      	strb	r3, [r7, #23]
                }
            }
            frame->RdPtr++;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	1c5a      	adds	r2, r3, #1
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	605a      	str	r2, [r3, #4]
        while (frame->RdPtr < frame->WrPtr)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d3cb      	bcc.n	8005ccc <SCI_Frame_QueueCRC+0x98>
        }

        /* Iterate through queued frames and queue CRC in last frame. */
        frame->RdPtr = frame->Buffer;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	605a      	str	r2, [r3, #4]
        if (frame->Next != 0)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d007      	beq.n	8005d54 <SCI_Frame_QueueCRC+0x120>
        {
            frame = frame->Next;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	607b      	str	r3, [r7, #4]
            frame->RdPtr = frame->Buffer;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	689a      	ldr	r2, [r3, #8]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	605a      	str	r2, [r3, #4]
 8005d52:	e006      	b.n	8005d62 <SCI_Frame_QueueCRC+0x12e>
        }
        else
        {
            /* Enqueue the CRC. */
            SCI_Frame_Queue08u(frame, crc);
 8005d54:	7dfb      	ldrb	r3, [r7, #23]
 8005d56:	4619      	mov	r1, r3
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 f911 	bl	8005f80 <SCI_Frame_Queue08u>
            frame = 0;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	607b      	str	r3, [r7, #4]
    while (frame != 0)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1df      	bne.n	8005d28 <SCI_Frame_QueueCRC+0xf4>
        }
    }
}
 8005d68:	bf00      	nop
 8005d6a:	bf00      	nop
 8005d6c:	3718      	adds	r7, #24
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	0802d638 	.word	0x0802d638
 8005d78:	0802e124 	.word	0x0802e124
 8005d7c:	0802d60c 	.word	0x0802d60c
 8005d80:	0802d714 	.word	0x0802d714
 8005d84:	0802d664 	.word	0x0802d664
 8005d88:	0802d684 	.word	0x0802d684
 8005d8c:	0802d7ec 	.word	0x0802d7ec

08005d90 <SCI_Frame_TotalFrameLength>:
#include "sci_crc8.h"
#include "sci_status.h"
#include <assert.h>

int32_t SCI_Frame_TotalFrameLength(sci_frame_t const * frame)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
    assert(frame != 0);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d105      	bne.n	8005daa <SCI_Frame_TotalFrameLength+0x1a>
 8005d9e:	4b13      	ldr	r3, [pc, #76]	@ (8005dec <SCI_Frame_TotalFrameLength+0x5c>)
 8005da0:	4a13      	ldr	r2, [pc, #76]	@ (8005df0 <SCI_Frame_TotalFrameLength+0x60>)
 8005da2:	2134      	movs	r1, #52	@ 0x34
 8005da4:	4813      	ldr	r0, [pc, #76]	@ (8005df4 <SCI_Frame_TotalFrameLength+0x64>)
 8005da6:	f001 fd7f 	bl	80078a8 <__assert_func>
    assert(frame->WrPtr != 0);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d105      	bne.n	8005dbe <SCI_Frame_TotalFrameLength+0x2e>
 8005db2:	4b11      	ldr	r3, [pc, #68]	@ (8005df8 <SCI_Frame_TotalFrameLength+0x68>)
 8005db4:	4a0e      	ldr	r2, [pc, #56]	@ (8005df0 <SCI_Frame_TotalFrameLength+0x60>)
 8005db6:	2135      	movs	r1, #53	@ 0x35
 8005db8:	480e      	ldr	r0, [pc, #56]	@ (8005df4 <SCI_Frame_TotalFrameLength+0x64>)
 8005dba:	f001 fd75 	bl	80078a8 <__assert_func>

    /* Find total frame length. */
    int32_t len_data = 0;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60fb      	str	r3, [r7, #12]
    while (frame != 0)
 8005dc2:	e00a      	b.n	8005dda <SCI_Frame_TotalFrameLength+0x4a>
    {
        len_data += frame->WrPtr - frame->Buffer;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	60fb      	str	r3, [r7, #12]
        frame = frame->Next;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	607b      	str	r3, [r7, #4]
    while (frame != 0)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1f1      	bne.n	8005dc4 <SCI_Frame_TotalFrameLength+0x34>
    }
    return len_data;
 8005de0:	68fb      	ldr	r3, [r7, #12]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	0802d810 	.word	0x0802d810
 8005df0:	0802e138 	.word	0x0802e138
 8005df4:	0802d81c 	.word	0x0802d81c
 8005df8:	0802d848 	.word	0x0802d848

08005dfc <SCI_Frame_BytesToRead>:
uint32_t SCI_Frame_BytesToRead(sci_frame_t const * frame)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
    assert(frame != 0);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d105      	bne.n	8005e16 <SCI_Frame_BytesToRead+0x1a>
 8005e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8005e44 <SCI_Frame_BytesToRead+0x48>)
 8005e0c:	4a0e      	ldr	r2, [pc, #56]	@ (8005e48 <SCI_Frame_BytesToRead+0x4c>)
 8005e0e:	2142      	movs	r1, #66	@ 0x42
 8005e10:	480e      	ldr	r0, [pc, #56]	@ (8005e4c <SCI_Frame_BytesToRead+0x50>)
 8005e12:	f001 fd49 	bl	80078a8 <__assert_func>
    uint32_t length = 0;
 8005e16:	2300      	movs	r3, #0
 8005e18:	60fb      	str	r3, [r7, #12]
    while (frame != 0)
 8005e1a:	e00b      	b.n	8005e34 <SCI_Frame_BytesToRead+0x38>
    {
        length += (uint32_t)(frame->WrPtr - frame->RdPtr);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	461a      	mov	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]
        frame = frame->Next;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	607b      	str	r3, [r7, #4]
    while (frame != 0)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1f0      	bne.n	8005e1c <SCI_Frame_BytesToRead+0x20>
    }
    return length;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	0802d810 	.word	0x0802d810
 8005e48:	0802e154 	.word	0x0802e154
 8005e4c:	0802d81c 	.word	0x0802d81c

08005e50 <SCI_Frame_IsStartFrame>:
uint8_t SCI_Frame_IsStartFrame(sci_frame_t const * frame)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
    assert(frame != 0);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d105      	bne.n	8005e6a <SCI_Frame_IsStartFrame+0x1a>
 8005e5e:	4b09      	ldr	r3, [pc, #36]	@ (8005e84 <SCI_Frame_IsStartFrame+0x34>)
 8005e60:	4a09      	ldr	r2, [pc, #36]	@ (8005e88 <SCI_Frame_IsStartFrame+0x38>)
 8005e62:	214d      	movs	r1, #77	@ 0x4d
 8005e64:	4809      	ldr	r0, [pc, #36]	@ (8005e8c <SCI_Frame_IsStartFrame+0x3c>)
 8005e66:	f001 fd1f 	bl	80078a8 <__assert_func>
    return frame->Buffer[0] == SCI_START_BYTE;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	bf0c      	ite	eq
 8005e74:	2301      	moveq	r3, #1
 8005e76:	2300      	movne	r3, #0
 8005e78:	b2db      	uxtb	r3, r3
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	0802d810 	.word	0x0802d810
 8005e88:	0802e16c 	.word	0x0802e16c
 8005e8c:	0802d81c 	.word	0x0802d81c

08005e90 <SCI_Frame_SetByte>:

void SCI_Frame_SetByte(sci_frame_t * frame, uint8_t byte)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	460b      	mov	r3, r1
 8005e9a:	70fb      	strb	r3, [r7, #3]
    assert(frame != 0);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d108      	bne.n	8005eb4 <SCI_Frame_SetByte+0x24>
 8005ea2:	4b31      	ldr	r3, [pc, #196]	@ (8005f68 <SCI_Frame_SetByte+0xd8>)
 8005ea4:	4a31      	ldr	r2, [pc, #196]	@ (8005f6c <SCI_Frame_SetByte+0xdc>)
 8005ea6:	2153      	movs	r1, #83	@ 0x53
 8005ea8:	4831      	ldr	r0, [pc, #196]	@ (8005f70 <SCI_Frame_SetByte+0xe0>)
 8005eaa:	f001 fcfd 	bl	80078a8 <__assert_func>

    /* Iterate to the last frame in the queue. */
    while (frame->Next != 0)
    {
        frame = frame->Next;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	607b      	str	r3, [r7, #4]
    while (frame->Next != 0)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1f8      	bne.n	8005eae <SCI_Frame_SetByte+0x1e>
    }

    /* Check if frame is full and enqueue another one. */
    if (frame->WrPtr - frame->Buffer == SCI_FRAME_SIZE)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	2b40      	cmp	r3, #64	@ 0x40
 8005ec8:	d114      	bne.n	8005ef4 <SCI_Frame_SetByte+0x64>
    {
        frame->Next = SCI_DataLink_RequestTxFrame(false);
 8005eca:	2000      	movs	r0, #0
 8005ecc:	f7ff fbe2 	bl	8005694 <SCI_DataLink_RequestTxFrame>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	60da      	str	r2, [r3, #12]
        frame = frame->Next;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	607b      	str	r3, [r7, #4]
        assert(frame != 0);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d105      	bne.n	8005eee <SCI_Frame_SetByte+0x5e>
 8005ee2:	4b21      	ldr	r3, [pc, #132]	@ (8005f68 <SCI_Frame_SetByte+0xd8>)
 8005ee4:	4a21      	ldr	r2, [pc, #132]	@ (8005f6c <SCI_Frame_SetByte+0xdc>)
 8005ee6:	2160      	movs	r1, #96	@ 0x60
 8005ee8:	4821      	ldr	r0, [pc, #132]	@ (8005f70 <SCI_Frame_SetByte+0xe0>)
 8005eea:	f001 fcdd 	bl	80078a8 <__assert_func>
        if (!frame) return;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d035      	beq.n	8005f60 <SCI_Frame_SetByte+0xd0>
    }

    assert(frame != 0);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d105      	bne.n	8005f06 <SCI_Frame_SetByte+0x76>
 8005efa:	4b1b      	ldr	r3, [pc, #108]	@ (8005f68 <SCI_Frame_SetByte+0xd8>)
 8005efc:	4a1b      	ldr	r2, [pc, #108]	@ (8005f6c <SCI_Frame_SetByte+0xdc>)
 8005efe:	2164      	movs	r1, #100	@ 0x64
 8005f00:	481b      	ldr	r0, [pc, #108]	@ (8005f70 <SCI_Frame_SetByte+0xe0>)
 8005f02:	f001 fcd1 	bl	80078a8 <__assert_func>
    assert(frame->Buffer == frame->RdPtr);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	689a      	ldr	r2, [r3, #8]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d005      	beq.n	8005f1e <SCI_Frame_SetByte+0x8e>
 8005f12:	4b18      	ldr	r3, [pc, #96]	@ (8005f74 <SCI_Frame_SetByte+0xe4>)
 8005f14:	4a15      	ldr	r2, [pc, #84]	@ (8005f6c <SCI_Frame_SetByte+0xdc>)
 8005f16:	2165      	movs	r1, #101	@ 0x65
 8005f18:	4815      	ldr	r0, [pc, #84]	@ (8005f70 <SCI_Frame_SetByte+0xe0>)
 8005f1a:	f001 fcc5 	bl	80078a8 <__assert_func>
    assert(frame->RdPtr <= frame->WrPtr);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d905      	bls.n	8005f36 <SCI_Frame_SetByte+0xa6>
 8005f2a:	4b13      	ldr	r3, [pc, #76]	@ (8005f78 <SCI_Frame_SetByte+0xe8>)
 8005f2c:	4a0f      	ldr	r2, [pc, #60]	@ (8005f6c <SCI_Frame_SetByte+0xdc>)
 8005f2e:	2166      	movs	r1, #102	@ 0x66
 8005f30:	480f      	ldr	r0, [pc, #60]	@ (8005f70 <SCI_Frame_SetByte+0xe0>)
 8005f32:	f001 fcb9 	bl	80078a8 <__assert_func>
    assert(frame->WrPtr <= frame->Buffer + SCI_FRAME_SIZE);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	3340      	adds	r3, #64	@ 0x40
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d905      	bls.n	8005f50 <SCI_Frame_SetByte+0xc0>
 8005f44:	4b0d      	ldr	r3, [pc, #52]	@ (8005f7c <SCI_Frame_SetByte+0xec>)
 8005f46:	4a09      	ldr	r2, [pc, #36]	@ (8005f6c <SCI_Frame_SetByte+0xdc>)
 8005f48:	2167      	movs	r1, #103	@ 0x67
 8005f4a:	4809      	ldr	r0, [pc, #36]	@ (8005f70 <SCI_Frame_SetByte+0xe0>)
 8005f4c:	f001 fcac 	bl	80078a8 <__assert_func>

    *(frame->WrPtr++) = byte;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	1c59      	adds	r1, r3, #1
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	6011      	str	r1, [r2, #0]
 8005f5a:	78fa      	ldrb	r2, [r7, #3]
 8005f5c:	701a      	strb	r2, [r3, #0]
 8005f5e:	e000      	b.n	8005f62 <SCI_Frame_SetByte+0xd2>
        if (!frame) return;
 8005f60:	bf00      	nop
}
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	0802d810 	.word	0x0802d810
 8005f6c:	0802e184 	.word	0x0802e184
 8005f70:	0802d81c 	.word	0x0802d81c
 8005f74:	0802d85c 	.word	0x0802d85c
 8005f78:	0802d87c 	.word	0x0802d87c
 8005f7c:	0802d89c 	.word	0x0802d89c

08005f80 <SCI_Frame_Queue08u>:

void SCI_Frame_Queue08u(sci_frame_t * frame, uint8_t data)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	70fb      	strb	r3, [r7, #3]
    if (data == SCI_START_BYTE || data == SCI_STOP_BYTE || data == SCI_ESCAPE_BYTE)
 8005f8c:	78fb      	ldrb	r3, [r7, #3]
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d005      	beq.n	8005f9e <SCI_Frame_Queue08u+0x1e>
 8005f92:	78fb      	ldrb	r3, [r7, #3]
 8005f94:	2b03      	cmp	r3, #3
 8005f96:	d002      	beq.n	8005f9e <SCI_Frame_Queue08u+0x1e>
 8005f98:	78fb      	ldrb	r3, [r7, #3]
 8005f9a:	2b1b      	cmp	r3, #27
 8005f9c:	d10b      	bne.n	8005fb6 <SCI_Frame_Queue08u+0x36>
    {
        SCI_Frame_SetByte(frame, SCI_ESCAPE_BYTE);
 8005f9e:	211b      	movs	r1, #27
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7ff ff75 	bl	8005e90 <SCI_Frame_SetByte>
        SCI_Frame_SetByte(frame, (uint8_t)(~data));
 8005fa6:	78fb      	ldrb	r3, [r7, #3]
 8005fa8:	43db      	mvns	r3, r3
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	4619      	mov	r1, r3
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7ff ff6e 	bl	8005e90 <SCI_Frame_SetByte>
 8005fb4:	e005      	b.n	8005fc2 <SCI_Frame_Queue08u+0x42>
    }
    else
    {
        SCI_Frame_SetByte(frame, (uint8_t)data);
 8005fb6:	78fb      	ldrb	r3, [r7, #3]
 8005fb8:	4619      	mov	r1, r3
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7ff ff68 	bl	8005e90 <SCI_Frame_SetByte>
    }
}
 8005fc0:	bf00      	nop
 8005fc2:	bf00      	nop
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <SCI_Frame_Queue16u>:
void SCI_Frame_Queue16u(sci_frame_t * frame, uint16_t data)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b082      	sub	sp, #8
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	807b      	strh	r3, [r7, #2]
    SCI_Frame_Queue08u(frame, (uint8_t)(data >> 8));
 8005fd6:	887b      	ldrh	r3, [r7, #2]
 8005fd8:	0a1b      	lsrs	r3, r3, #8
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	4619      	mov	r1, r3
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7ff ffcd 	bl	8005f80 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, (uint8_t)(data >> 0));
 8005fe6:	887b      	ldrh	r3, [r7, #2]
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	4619      	mov	r1, r3
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f7ff ffc7 	bl	8005f80 <SCI_Frame_Queue08u>
}
 8005ff2:	bf00      	nop
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
	...

08005ffc <SCI_Frame_Queue24u>:
void SCI_Frame_Queue24u(sci_frame_t * frame, uint32_t data)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
    assert(data < 0x01000000U);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800600c:	d305      	bcc.n	800601a <SCI_Frame_Queue24u+0x1e>
 800600e:	4b0f      	ldr	r3, [pc, #60]	@ (800604c <SCI_Frame_Queue24u+0x50>)
 8006010:	4a0f      	ldr	r2, [pc, #60]	@ (8006050 <SCI_Frame_Queue24u+0x54>)
 8006012:	217f      	movs	r1, #127	@ 0x7f
 8006014:	480f      	ldr	r0, [pc, #60]	@ (8006054 <SCI_Frame_Queue24u+0x58>)
 8006016:	f001 fc47 	bl	80078a8 <__assert_func>
    SCI_Frame_Queue08u(frame, (uint8_t)(data >> 16));
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	0c1b      	lsrs	r3, r3, #16
 800601e:	b2db      	uxtb	r3, r3
 8006020:	4619      	mov	r1, r3
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f7ff ffac 	bl	8005f80 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, (uint8_t)(data >> 8));
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	0a1b      	lsrs	r3, r3, #8
 800602c:	b2db      	uxtb	r3, r3
 800602e:	4619      	mov	r1, r3
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f7ff ffa5 	bl	8005f80 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, (uint8_t)(data >> 0));
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	b2db      	uxtb	r3, r3
 800603a:	4619      	mov	r1, r3
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f7ff ff9f 	bl	8005f80 <SCI_Frame_Queue08u>
}
 8006042:	bf00      	nop
 8006044:	3708      	adds	r7, #8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	0802d8cc 	.word	0x0802d8cc
 8006050:	0802e198 	.word	0x0802e198
 8006054:	0802d81c 	.word	0x0802d81c

08006058 <SCI_Frame_Queue32u>:
void SCI_Frame_Queue32u(sci_frame_t * frame, uint32_t data)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
    SCI_Frame_Queue08u(frame, (uint8_t)(data >> 24));
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	0e1b      	lsrs	r3, r3, #24
 8006066:	b2db      	uxtb	r3, r3
 8006068:	4619      	mov	r1, r3
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f7ff ff88 	bl	8005f80 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, (uint8_t)(data >> 16));
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	0c1b      	lsrs	r3, r3, #16
 8006074:	b2db      	uxtb	r3, r3
 8006076:	4619      	mov	r1, r3
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f7ff ff81 	bl	8005f80 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, (uint8_t)(data >> 8));
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	0a1b      	lsrs	r3, r3, #8
 8006082:	b2db      	uxtb	r3, r3
 8006084:	4619      	mov	r1, r3
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7ff ff7a 	bl	8005f80 <SCI_Frame_Queue08u>
    SCI_Frame_Queue08u(frame, (uint8_t)(data >> 0));
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	b2db      	uxtb	r3, r3
 8006090:	4619      	mov	r1, r3
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7ff ff74 	bl	8005f80 <SCI_Frame_Queue08u>
}
 8006098:	bf00      	nop
 800609a:	3708      	adds	r7, #8
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <SCI_Frame_Queue08s>:
void SCI_Frame_Queue08s(sci_frame_t * frame, int8_t data)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	460b      	mov	r3, r1
 80060aa:	70fb      	strb	r3, [r7, #3]
    if (data == SCI_START_BYTE || data == SCI_STOP_BYTE || data == SCI_ESCAPE_BYTE)
 80060ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d007      	beq.n	80060c4 <SCI_Frame_Queue08s+0x24>
 80060b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060b8:	2b03      	cmp	r3, #3
 80060ba:	d003      	beq.n	80060c4 <SCI_Frame_Queue08s+0x24>
 80060bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060c0:	2b1b      	cmp	r3, #27
 80060c2:	d10b      	bne.n	80060dc <SCI_Frame_Queue08s+0x3c>
    {
        SCI_Frame_SetByte(frame, SCI_ESCAPE_BYTE);
 80060c4:	211b      	movs	r1, #27
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7ff fee2 	bl	8005e90 <SCI_Frame_SetByte>
        SCI_Frame_SetByte(frame, (uint8_t)(~data));
 80060cc:	78fb      	ldrb	r3, [r7, #3]
 80060ce:	43db      	mvns	r3, r3
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	4619      	mov	r1, r3
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f7ff fedb 	bl	8005e90 <SCI_Frame_SetByte>
 80060da:	e005      	b.n	80060e8 <SCI_Frame_Queue08s+0x48>
    }
    else
    {
        SCI_Frame_SetByte(frame, (uint8_t)data);
 80060dc:	78fb      	ldrb	r3, [r7, #3]
 80060de:	4619      	mov	r1, r3
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f7ff fed5 	bl	8005e90 <SCI_Frame_SetByte>
    }
}
 80060e6:	bf00      	nop
 80060e8:	bf00      	nop
 80060ea:	3708      	adds	r7, #8
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <SCI_Frame_Queue16s>:
void SCI_Frame_Queue16s(sci_frame_t * frame, int16_t data)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	460b      	mov	r3, r1
 80060fa:	807b      	strh	r3, [r7, #2]
    SCI_Frame_Queue08s(frame, (int8_t)(data >> 8));
 80060fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006100:	121b      	asrs	r3, r3, #8
 8006102:	b21b      	sxth	r3, r3
 8006104:	b25b      	sxtb	r3, r3
 8006106:	4619      	mov	r1, r3
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f7ff ffc9 	bl	80060a0 <SCI_Frame_Queue08s>
    SCI_Frame_Queue08s(frame, (int8_t)(data >> 0));
 800610e:	887b      	ldrh	r3, [r7, #2]
 8006110:	b25b      	sxtb	r3, r3
 8006112:	4619      	mov	r1, r3
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f7ff ffc3 	bl	80060a0 <SCI_Frame_Queue08s>
}
 800611a:	bf00      	nop
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <SCI_Frame_Queue24s>:
void SCI_Frame_Queue24s(sci_frame_t * frame, int32_t data)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b082      	sub	sp, #8
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	6039      	str	r1, [r7, #0]
    SCI_Frame_Queue08s(frame, (int8_t)(data >> 16));
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	141b      	asrs	r3, r3, #16
 8006130:	b25b      	sxtb	r3, r3
 8006132:	4619      	mov	r1, r3
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f7ff ffb3 	bl	80060a0 <SCI_Frame_Queue08s>
    SCI_Frame_Queue08s(frame, (int8_t)(data >> 8));
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	121b      	asrs	r3, r3, #8
 800613e:	b25b      	sxtb	r3, r3
 8006140:	4619      	mov	r1, r3
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7ff ffac 	bl	80060a0 <SCI_Frame_Queue08s>
    SCI_Frame_Queue08s(frame, (int8_t)(data >> 0));
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	b25b      	sxtb	r3, r3
 800614c:	4619      	mov	r1, r3
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7ff ffa6 	bl	80060a0 <SCI_Frame_Queue08s>
}
 8006154:	bf00      	nop
 8006156:	3708      	adds	r7, #8
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <SCI_Frame_Queue32s>:
void SCI_Frame_Queue32s(sci_frame_t * frame, int32_t data)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
    SCI_Frame_Queue08s(frame, (int8_t)(data >> 24));
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	161b      	asrs	r3, r3, #24
 800616a:	b25b      	sxtb	r3, r3
 800616c:	4619      	mov	r1, r3
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7ff ff96 	bl	80060a0 <SCI_Frame_Queue08s>
    SCI_Frame_Queue08s(frame, (int8_t)(data >> 16));
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	141b      	asrs	r3, r3, #16
 8006178:	b25b      	sxtb	r3, r3
 800617a:	4619      	mov	r1, r3
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f7ff ff8f 	bl	80060a0 <SCI_Frame_Queue08s>
    SCI_Frame_Queue08s(frame, (int8_t)(data >> 8));
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	121b      	asrs	r3, r3, #8
 8006186:	b25b      	sxtb	r3, r3
 8006188:	4619      	mov	r1, r3
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f7ff ff88 	bl	80060a0 <SCI_Frame_Queue08s>
    SCI_Frame_Queue08s(frame, (int8_t)(data >> 0));
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	b25b      	sxtb	r3, r3
 8006194:	4619      	mov	r1, r3
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7ff ff82 	bl	80060a0 <SCI_Frame_Queue08s>
}
 800619c:	bf00      	nop
 800619e:	3708      	adds	r7, #8
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <SCI_Frame_Queue_Time>:

void SCI_Frame_Queue_Time(sci_frame_t * frame, ltc_t const * t)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
    assert(frame != 0);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d105      	bne.n	80061c0 <SCI_Frame_Queue_Time+0x1c>
 80061b4:	4b10      	ldr	r3, [pc, #64]	@ (80061f8 <SCI_Frame_Queue_Time+0x54>)
 80061b6:	4a11      	ldr	r2, [pc, #68]	@ (80061fc <SCI_Frame_Queue_Time+0x58>)
 80061b8:	21ac      	movs	r1, #172	@ 0xac
 80061ba:	4811      	ldr	r0, [pc, #68]	@ (8006200 <SCI_Frame_Queue_Time+0x5c>)
 80061bc:	f001 fb74 	bl	80078a8 <__assert_func>
    assert(t != 0);
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d105      	bne.n	80061d2 <SCI_Frame_Queue_Time+0x2e>
 80061c6:	4b0f      	ldr	r3, [pc, #60]	@ (8006204 <SCI_Frame_Queue_Time+0x60>)
 80061c8:	4a0c      	ldr	r2, [pc, #48]	@ (80061fc <SCI_Frame_Queue_Time+0x58>)
 80061ca:	21ad      	movs	r1, #173	@ 0xad
 80061cc:	480c      	ldr	r0, [pc, #48]	@ (8006200 <SCI_Frame_Queue_Time+0x5c>)
 80061ce:	f001 fb6b 	bl	80078a8 <__assert_func>
    SCI_Frame_Queue32u(frame, t->sec);          // s
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4619      	mov	r1, r3
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f7ff ff3d 	bl	8006058 <SCI_Frame_Queue32u>
    SCI_Frame_Queue16u(frame, (uint16_t)(t->usec >> 4U));   // µs / 16
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	091b      	lsrs	r3, r3, #4
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	4619      	mov	r1, r3
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f7ff feee 	bl	8005fca <SCI_Frame_Queue16u>
}
 80061ee:	bf00      	nop
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	0802d810 	.word	0x0802d810
 80061fc:	0802e1ac 	.word	0x0802e1ac
 8006200:	0802d81c 	.word	0x0802d81c
 8006204:	0802d8e0 	.word	0x0802d8e0

08006208 <SCI_Frame_GetByte>:

static inline uint8_t SCI_Frame_GetByte(sci_frame_t * frame)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
    assert(frame != 0);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d105      	bne.n	8006222 <SCI_Frame_GetByte+0x1a>
 8006216:	4b24      	ldr	r3, [pc, #144]	@ (80062a8 <SCI_Frame_GetByte+0xa0>)
 8006218:	4a24      	ldr	r2, [pc, #144]	@ (80062ac <SCI_Frame_GetByte+0xa4>)
 800621a:	21b4      	movs	r1, #180	@ 0xb4
 800621c:	4824      	ldr	r0, [pc, #144]	@ (80062b0 <SCI_Frame_GetByte+0xa8>)
 800621e:	f001 fb43 	bl	80078a8 <__assert_func>
    assert(frame->Buffer <= frame->RdPtr);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	689a      	ldr	r2, [r3, #8]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	429a      	cmp	r2, r3
 800622c:	d905      	bls.n	800623a <SCI_Frame_GetByte+0x32>
 800622e:	4b21      	ldr	r3, [pc, #132]	@ (80062b4 <SCI_Frame_GetByte+0xac>)
 8006230:	4a1e      	ldr	r2, [pc, #120]	@ (80062ac <SCI_Frame_GetByte+0xa4>)
 8006232:	21b5      	movs	r1, #181	@ 0xb5
 8006234:	481e      	ldr	r0, [pc, #120]	@ (80062b0 <SCI_Frame_GetByte+0xa8>)
 8006236:	f001 fb37 	bl	80078a8 <__assert_func>
    assert(frame->RdPtr <= frame->WrPtr);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	429a      	cmp	r2, r3
 8006244:	d905      	bls.n	8006252 <SCI_Frame_GetByte+0x4a>
 8006246:	4b1c      	ldr	r3, [pc, #112]	@ (80062b8 <SCI_Frame_GetByte+0xb0>)
 8006248:	4a18      	ldr	r2, [pc, #96]	@ (80062ac <SCI_Frame_GetByte+0xa4>)
 800624a:	21b6      	movs	r1, #182	@ 0xb6
 800624c:	4818      	ldr	r0, [pc, #96]	@ (80062b0 <SCI_Frame_GetByte+0xa8>)
 800624e:	f001 fb2b 	bl	80078a8 <__assert_func>
    assert(frame->WrPtr <= frame->Buffer + SCI_FRAME_SIZE);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	3340      	adds	r3, #64	@ 0x40
 800625c:	429a      	cmp	r2, r3
 800625e:	d912      	bls.n	8006286 <SCI_Frame_GetByte+0x7e>
 8006260:	4b16      	ldr	r3, [pc, #88]	@ (80062bc <SCI_Frame_GetByte+0xb4>)
 8006262:	4a12      	ldr	r2, [pc, #72]	@ (80062ac <SCI_Frame_GetByte+0xa4>)
 8006264:	21b7      	movs	r1, #183	@ 0xb7
 8006266:	4812      	ldr	r0, [pc, #72]	@ (80062b0 <SCI_Frame_GetByte+0xa8>)
 8006268:	f001 fb1e 	bl	80078a8 <__assert_func>

    /* Skip all completely read frames. */
    while (frame->WrPtr == frame->RdPtr)
    {
        assert(frame->Next != 0);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d105      	bne.n	8006280 <SCI_Frame_GetByte+0x78>
 8006274:	4b12      	ldr	r3, [pc, #72]	@ (80062c0 <SCI_Frame_GetByte+0xb8>)
 8006276:	4a0d      	ldr	r2, [pc, #52]	@ (80062ac <SCI_Frame_GetByte+0xa4>)
 8006278:	21bc      	movs	r1, #188	@ 0xbc
 800627a:	480d      	ldr	r0, [pc, #52]	@ (80062b0 <SCI_Frame_GetByte+0xa8>)
 800627c:	f001 fb14 	bl	80078a8 <__assert_func>
        frame = frame->Next;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	607b      	str	r3, [r7, #4]
    while (frame->WrPtr == frame->RdPtr)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	429a      	cmp	r2, r3
 8006290:	d0ec      	beq.n	800626c <SCI_Frame_GetByte+0x64>
    }
    return *(frame->RdPtr++);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	1c59      	adds	r1, r3, #1
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	6051      	str	r1, [r2, #4]
 800629c:	781b      	ldrb	r3, [r3, #0]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	0802d810 	.word	0x0802d810
 80062ac:	0802e1c4 	.word	0x0802e1c4
 80062b0:	0802d81c 	.word	0x0802d81c
 80062b4:	0802d8e8 	.word	0x0802d8e8
 80062b8:	0802d87c 	.word	0x0802d87c
 80062bc:	0802d89c 	.word	0x0802d89c
 80062c0:	0802d908 	.word	0x0802d908

080062c4 <SCI_Frame_Dequeue08s>:
int8_t SCI_Frame_Dequeue08s(sci_frame_t * frame)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
    return (int8_t)SCI_Frame_GetByte(frame);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f7ff ff9b 	bl	8006208 <SCI_Frame_GetByte>
 80062d2:	4603      	mov	r3, r0
 80062d4:	b25b      	sxtb	r3, r3
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <SCI_Frame_Dequeue16s>:
int16_t SCI_Frame_Dequeue16s(sci_frame_t * frame)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b084      	sub	sp, #16
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
    uint_fast16_t
    val  = (uint_fast16_t)(SCI_Frame_GetByte(frame) << 8U);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7ff ff8e 	bl	8006208 <SCI_Frame_GetByte>
 80062ec:	4603      	mov	r3, r0
 80062ee:	021b      	lsls	r3, r3, #8
 80062f0:	60fb      	str	r3, [r7, #12]
    val |= (uint_fast16_t)(SCI_Frame_GetByte(frame) << 0U);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7ff ff88 	bl	8006208 <SCI_Frame_GetByte>
 80062f8:	4603      	mov	r3, r0
 80062fa:	461a      	mov	r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	4313      	orrs	r3, r2
 8006300:	60fb      	str	r3, [r7, #12]
    return (int16_t)val;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	b21b      	sxth	r3, r3
}
 8006306:	4618      	mov	r0, r3
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <SCI_Frame_Dequeue32s>:
    val |= (uint32_t)(SCI_Frame_GetByte(frame) <<  8U);
    val |= (uint32_t)(SCI_Frame_GetByte(frame) <<  0U);
    return (int32_t)val;
}
int32_t SCI_Frame_Dequeue32s(sci_frame_t * frame)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b084      	sub	sp, #16
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
    uint32_t
    val  = (uint32_t)(SCI_Frame_GetByte(frame) << 24U);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7ff ff76 	bl	8006208 <SCI_Frame_GetByte>
 800631c:	4603      	mov	r3, r0
 800631e:	061b      	lsls	r3, r3, #24
 8006320:	60fb      	str	r3, [r7, #12]
    val |= (uint32_t)(SCI_Frame_GetByte(frame) << 16U);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7ff ff70 	bl	8006208 <SCI_Frame_GetByte>
 8006328:	4603      	mov	r3, r0
 800632a:	041b      	lsls	r3, r3, #16
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	4313      	orrs	r3, r2
 8006330:	60fb      	str	r3, [r7, #12]
    val |= (uint32_t)(SCI_Frame_GetByte(frame) <<  8U);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7ff ff68 	bl	8006208 <SCI_Frame_GetByte>
 8006338:	4603      	mov	r3, r0
 800633a:	021b      	lsls	r3, r3, #8
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	4313      	orrs	r3, r2
 8006340:	60fb      	str	r3, [r7, #12]
    val |= (uint32_t)(SCI_Frame_GetByte(frame) <<  0U);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7ff ff60 	bl	8006208 <SCI_Frame_GetByte>
 8006348:	4603      	mov	r3, r0
 800634a:	461a      	mov	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	4313      	orrs	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]
    return (int32_t)val;
 8006352:	68fb      	ldr	r3, [r7, #12]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <SCI_Frame_Dequeue08u>:
uint8_t SCI_Frame_Dequeue08u(sci_frame_t * frame)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
    return (uint8_t)SCI_Frame_GetByte(frame);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f7ff ff4f 	bl	8006208 <SCI_Frame_GetByte>
 800636a:	4603      	mov	r3, r0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3708      	adds	r7, #8
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <SCI_Frame_Dequeue16u>:
uint16_t SCI_Frame_Dequeue16u(sci_frame_t * frame)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
    uint_fast16_t // uint16_t raises warning
    val  = (uint_fast16_t)(SCI_Frame_GetByte(frame) <<  8U);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f7ff ff43 	bl	8006208 <SCI_Frame_GetByte>
 8006382:	4603      	mov	r3, r0
 8006384:	021b      	lsls	r3, r3, #8
 8006386:	60fb      	str	r3, [r7, #12]
    val |= (uint_fast16_t)(SCI_Frame_GetByte(frame) <<  0U);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f7ff ff3d 	bl	8006208 <SCI_Frame_GetByte>
 800638e:	4603      	mov	r3, r0
 8006390:	461a      	mov	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	4313      	orrs	r3, r2
 8006396:	60fb      	str	r3, [r7, #12]
    return (uint16_t)val;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	b29b      	uxth	r3, r3
}
 800639c:	4618      	mov	r0, r3
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <SCI_Frame_Dequeue32u>:
    val |= (uint32_t)(SCI_Frame_GetByte(frame) <<  8U);
    val |= (uint32_t)(SCI_Frame_GetByte(frame) <<  0U);
    return val;
}
uint32_t SCI_Frame_Dequeue32u(sci_frame_t * frame)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
    uint32_t
    val  = (uint32_t)(SCI_Frame_GetByte(frame) << 24U);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7ff ff2b 	bl	8006208 <SCI_Frame_GetByte>
 80063b2:	4603      	mov	r3, r0
 80063b4:	061b      	lsls	r3, r3, #24
 80063b6:	60fb      	str	r3, [r7, #12]
    val |= (uint32_t)(SCI_Frame_GetByte(frame) << 16U);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f7ff ff25 	bl	8006208 <SCI_Frame_GetByte>
 80063be:	4603      	mov	r3, r0
 80063c0:	041b      	lsls	r3, r3, #16
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	60fb      	str	r3, [r7, #12]
    val |= (uint32_t)(SCI_Frame_GetByte(frame) <<  8U);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7ff ff1d 	bl	8006208 <SCI_Frame_GetByte>
 80063ce:	4603      	mov	r3, r0
 80063d0:	021b      	lsls	r3, r3, #8
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	60fb      	str	r3, [r7, #12]
    val |= (uint32_t)(SCI_Frame_GetByte(frame) <<  0U);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f7ff ff15 	bl	8006208 <SCI_Frame_GetByte>
 80063de:	4603      	mov	r3, r0
 80063e0:	461a      	mov	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]
    return val;
 80063e8:	68fb      	ldr	r3, [r7, #12]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <SCI_Frame_PutChar>:

void SCI_Frame_PutChar(char c, void * frame)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b082      	sub	sp, #8
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	4603      	mov	r3, r0
 80063fa:	6039      	str	r1, [r7, #0]
 80063fc:	71fb      	strb	r3, [r7, #7]
    if (c == '\r') return;
 80063fe:	79fb      	ldrb	r3, [r7, #7]
 8006400:	2b0d      	cmp	r3, #13
 8006402:	d005      	beq.n	8006410 <SCI_Frame_PutChar+0x1e>
    SCI_Frame_Queue08u((sci_frame_t*)frame, (uint8_t)c);
 8006404:	79fb      	ldrb	r3, [r7, #7]
 8006406:	4619      	mov	r1, r3
 8006408:	6838      	ldr	r0, [r7, #0]
 800640a:	f7ff fdb9 	bl	8005f80 <SCI_Frame_Queue08u>
 800640e:	e000      	b.n	8006412 <SCI_Frame_PutChar+0x20>
    if (c == '\r') return;
 8006410:	bf00      	nop
}
 8006412:	3708      	adds	r7, #8
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <SCI_SendAcknowledge>:
/*******************************************************************************
 * Code
 ******************************************************************************/

status_t SCI_SendAcknowledge(sci_device_t deviceID, sci_cmd_t cmd)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	4603      	mov	r3, r0
 8006420:	460a      	mov	r2, r1
 8006422:	71fb      	strb	r3, [r7, #7]
 8006424:	4613      	mov	r3, r2
 8006426:	71bb      	strb	r3, [r7, #6]
    sci_frame_t * frame = SCI_DataLink_RequestTxFrame(true);
 8006428:	2001      	movs	r0, #1
 800642a:	f7ff f933 	bl	8005694 <SCI_DataLink_RequestTxFrame>
 800642e:	60f8      	str	r0, [r7, #12]
    if (!frame) return ERROR_SCI_BUFFER_FULL;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d102      	bne.n	800643c <SCI_SendAcknowledge+0x24>
 8006436:	f06f 03d7 	mvn.w	r3, #215	@ 0xd7
 800643a:	e023      	b.n	8006484 <SCI_SendAcknowledge+0x6c>

    if (SCI_CMD_IS_EXTENDED_CMD(cmd))
 800643c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006440:	2b00      	cmp	r3, #0
 8006442:	da11      	bge.n	8006468 <SCI_SendAcknowledge+0x50>
    {
        SCI_Frame_Queue08u(frame, CMD_ACKNOWLEDGE | 0x80);
 8006444:	218a      	movs	r1, #138	@ 0x8a
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f7ff fd9a 	bl	8005f80 <SCI_Frame_Queue08u>
        SCI_Frame_Queue08u(frame, deviceID);
 800644c:	79fb      	ldrb	r3, [r7, #7]
 800644e:	4619      	mov	r1, r3
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f7ff fd95 	bl	8005f80 <SCI_Frame_Queue08u>
        SCI_Frame_Queue08u(frame, cmd | 0x80);
 8006456:	79bb      	ldrb	r3, [r7, #6]
 8006458:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800645c:	b2db      	uxtb	r3, r3
 800645e:	4619      	mov	r1, r3
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f7ff fd8d 	bl	8005f80 <SCI_Frame_Queue08u>
 8006466:	e008      	b.n	800647a <SCI_SendAcknowledge+0x62>
    }
    else
    {
        SCI_Frame_Queue08u(frame, CMD_ACKNOWLEDGE);
 8006468:	210a      	movs	r1, #10
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f7ff fd88 	bl	8005f80 <SCI_Frame_Queue08u>
        SCI_Frame_Queue08u(frame, cmd);
 8006470:	79bb      	ldrb	r3, [r7, #6]
 8006472:	4619      	mov	r1, r3
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f7ff fd83 	bl	8005f80 <SCI_Frame_Queue08u>
    }
    return SCI_DataLink_SendTxFrame(frame, true);
 800647a:	2101      	movs	r1, #1
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f7ff fa23 	bl	80058c8 <SCI_DataLink_SendTxFrame>
 8006482:	4603      	mov	r3, r0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <SCI_SendNotAcknowledge>:

status_t SCI_SendNotAcknowledge(sci_device_t deviceID, sci_cmd_t cmd, status_t reason)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	4603      	mov	r3, r0
 8006494:	603a      	str	r2, [r7, #0]
 8006496:	71fb      	strb	r3, [r7, #7]
 8006498:	460b      	mov	r3, r1
 800649a:	71bb      	strb	r3, [r7, #6]
    sci_frame_t * frame = SCI_DataLink_RequestTxFrame(true);
 800649c:	2001      	movs	r0, #1
 800649e:	f7ff f8f9 	bl	8005694 <SCI_DataLink_RequestTxFrame>
 80064a2:	60f8      	str	r0, [r7, #12]
    if (!frame) return ERROR_SCI_BUFFER_FULL;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d102      	bne.n	80064b0 <SCI_SendNotAcknowledge+0x24>
 80064aa:	f06f 03d7 	mvn.w	r3, #215	@ 0xd7
 80064ae:	e029      	b.n	8006504 <SCI_SendNotAcknowledge+0x78>

    if (SCI_CMD_IS_EXTENDED_CMD(cmd))
 80064b0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	da11      	bge.n	80064dc <SCI_SendNotAcknowledge+0x50>
    {
        SCI_Frame_Queue08u(frame, CMD_NOT_ACKNOWLEDGE | 0x80);
 80064b8:	218b      	movs	r1, #139	@ 0x8b
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f7ff fd60 	bl	8005f80 <SCI_Frame_Queue08u>
        SCI_Frame_Queue08u(frame, deviceID);
 80064c0:	79fb      	ldrb	r3, [r7, #7]
 80064c2:	4619      	mov	r1, r3
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f7ff fd5b 	bl	8005f80 <SCI_Frame_Queue08u>
        SCI_Frame_Queue08u(frame, cmd | 0x80);
 80064ca:	79bb      	ldrb	r3, [r7, #6]
 80064cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	4619      	mov	r1, r3
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f7ff fd53 	bl	8005f80 <SCI_Frame_Queue08u>
 80064da:	e008      	b.n	80064ee <SCI_SendNotAcknowledge+0x62>
    }
    else
    {
        SCI_Frame_Queue08u(frame, CMD_NOT_ACKNOWLEDGE);
 80064dc:	210b      	movs	r1, #11
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f7ff fd4e 	bl	8005f80 <SCI_Frame_Queue08u>
        SCI_Frame_Queue08u(frame, cmd);
 80064e4:	79bb      	ldrb	r3, [r7, #6]
 80064e6:	4619      	mov	r1, r3
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f7ff fd49 	bl	8005f80 <SCI_Frame_Queue08u>
    }
    SCI_Frame_Queue16s(frame, (int16_t)reason);
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	b21b      	sxth	r3, r3
 80064f2:	4619      	mov	r1, r3
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f7ff fdfb 	bl	80060f0 <SCI_Frame_Queue16s>
    return SCI_DataLink_SendTxFrame(frame, true);
 80064fa:	2101      	movs	r1, #1
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f7ff f9e3 	bl	80058c8 <SCI_DataLink_SendTxFrame>
 8006502:	4603      	mov	r3, r0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <print>:
    return status;
}


status_t print(const char  *fmt_s, ...)
{
 800650c:	b40f      	push	{r0, r1, r2, r3}
 800650e:	b580      	push	{r7, lr}
 8006510:	b082      	sub	sp, #8
 8006512:	af00      	add	r7, sp, #0
    va_list  ap;
    va_start(ap, fmt_s);
 8006514:	f107 0314 	add.w	r3, r7, #20
 8006518:	603b      	str	r3, [r7, #0]
    status_t status = vprint(fmt_s, ap);
 800651a:	6839      	ldr	r1, [r7, #0]
 800651c:	6938      	ldr	r0, [r7, #16]
 800651e:	f000 f809 	bl	8006534 <vprint>
 8006522:	6078      	str	r0, [r7, #4]
    va_end(ap);
    return status;
 8006524:	687b      	ldr	r3, [r7, #4]
}
 8006526:	4618      	mov	r0, r3
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006530:	b004      	add	sp, #16
 8006532:	4770      	bx	lr

08006534 <vprint>:
static inline status_t vprint(const char *fmt_s, va_list ap)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
    /* sending a log message in formated printf style */

    sci_frame_t * frame = SCI_DataLink_RequestTxFrame(true);
 800653e:	2001      	movs	r0, #1
 8006540:	f7ff f8a8 	bl	8005694 <SCI_DataLink_RequestTxFrame>
 8006544:	6178      	str	r0, [r7, #20]
    if(!frame) return ERROR_SCI_BUFFER_FULL;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d102      	bne.n	8006552 <vprint+0x1e>
 800654c:	f06f 03d7 	mvn.w	r3, #215	@ 0xd7
 8006550:	e020      	b.n	8006594 <vprint+0x60>

    SCI_Frame_Queue08u(frame, CMD_LOG_MESSAGE);
 8006552:	2106      	movs	r1, #6
 8006554:	6978      	ldr	r0, [r7, #20]
 8006556:	f7ff fd13 	bl	8005f80 <SCI_Frame_Queue08u>

#if SCI_LOG_TIMESTAMP
    ltc_t t_now;
    Time_GetNow(&t_now);
 800655a:	f107 0308 	add.w	r3, r7, #8
 800655e:	4618      	mov	r0, r3
 8006560:	f00d fd74 	bl	801404c <Time_GetNow>
    SCI_Frame_Queue_Time(frame, &t_now);
 8006564:	f107 0308 	add.w	r3, r7, #8
 8006568:	4619      	mov	r1, r3
 800656a:	6978      	ldr	r0, [r7, #20]
 800656c:	f7ff fe1a 	bl	80061a4 <SCI_Frame_Queue_Time>
#endif

    int len = vfctprintf(SCI_Frame_PutChar, frame, fmt_s, ap);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	6979      	ldr	r1, [r7, #20]
 8006576:	4809      	ldr	r0, [pc, #36]	@ (800659c <vprint+0x68>)
 8006578:	f002 fb62 	bl	8008c40 <vfctprintf>
 800657c:	6138      	str	r0, [r7, #16]
    if (len < 0) return ERROR_FAIL;
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	2b00      	cmp	r3, #0
 8006582:	da02      	bge.n	800658a <vprint+0x56>
 8006584:	f04f 33ff 	mov.w	r3, #4294967295
 8006588:	e004      	b.n	8006594 <vprint+0x60>

    return SCI_DataLink_SendTxFrame(frame, false);
 800658a:	2100      	movs	r1, #0
 800658c:	6978      	ldr	r0, [r7, #20]
 800658e:	f7ff f99b 	bl	80058c8 <SCI_DataLink_SendTxFrame>
 8006592:	4603      	mov	r3, r0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3718      	adds	r7, #24
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	080063f3 	.word	0x080063f3

080065a0 <Scheduler_Init>:

/*******************************************************************************
 * Code
 ******************************************************************************/
scheduler_t * Scheduler_Init(void)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	af00      	add	r7, sp, #0
    // static instance of the scheduler; might be replaced by malloc.
    static scheduler_t me;
    memset(&me, 0, sizeof(scheduler_t));
 80065a4:	22ec      	movs	r2, #236	@ 0xec
 80065a6:	2100      	movs	r1, #0
 80065a8:	4802      	ldr	r0, [pc, #8]	@ (80065b4 <Scheduler_Init+0x14>)
 80065aa:	f024 fcfe 	bl	802afaa <memset>
    return &me;
 80065ae:	4b01      	ldr	r3, [pc, #4]	@ (80065b4 <Scheduler_Init+0x14>)
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	240030dc 	.word	0x240030dc

080065b8 <Scheduler_AddTask>:
                           task_function_t task,
                           task_prio_t priority,
                           task_event_t eventQ,
                           size_t eventQSize,
                           const char * name)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	603b      	str	r3, [r7, #0]
 80065c4:	4613      	mov	r3, r2
 80065c6:	71fb      	strb	r3, [r7, #7]
    assert(me != NULL);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d105      	bne.n	80065da <Scheduler_AddTask+0x22>
 80065ce:	4b24      	ldr	r3, [pc, #144]	@ (8006660 <Scheduler_AddTask+0xa8>)
 80065d0:	4a24      	ldr	r2, [pc, #144]	@ (8006664 <Scheduler_AddTask+0xac>)
 80065d2:	2170      	movs	r1, #112	@ 0x70
 80065d4:	4824      	ldr	r0, [pc, #144]	@ (8006668 <Scheduler_AddTask+0xb0>)
 80065d6:	f001 f967 	bl	80078a8 <__assert_func>
    if (!task) return ERROR_INVALID_ARGUMENT;
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d102      	bne.n	80065e6 <Scheduler_AddTask+0x2e>
 80065e0:	f06f 0304 	mvn.w	r3, #4
 80065e4:	e038      	b.n	8006658 <Scheduler_AddTask+0xa0>
    if (!eventQ) return ERROR_INVALID_ARGUMENT;
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d102      	bne.n	80065f2 <Scheduler_AddTask+0x3a>
 80065ec:	f06f 0304 	mvn.w	r3, #4
 80065f0:	e032      	b.n	8006658 <Scheduler_AddTask+0xa0>
    if (!(eventQSize > 0)) return ERROR_INVALID_ARGUMENT;
 80065f2:	6a3b      	ldr	r3, [r7, #32]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d102      	bne.n	80065fe <Scheduler_AddTask+0x46>
 80065f8:	f06f 0304 	mvn.w	r3, #4
 80065fc:	e02c      	b.n	8006658 <Scheduler_AddTask+0xa0>
    if (!(priority < SCHEDULER_MAX_TASKS)) return ERROR_INVALID_ARGUMENT;
 80065fe:	79fb      	ldrb	r3, [r7, #7]
 8006600:	2b07      	cmp	r3, #7
 8006602:	d902      	bls.n	800660a <Scheduler_AddTask+0x52>
 8006604:	f06f 0304 	mvn.w	r3, #4
 8006608:	e026      	b.n	8006658 <Scheduler_AddTask+0xa0>

    taskcontrolblock_t * tcb = &me->TCB[priority];
 800660a:	79fa      	ldrb	r2, [r7, #7]
 800660c:	4613      	mov	r3, r2
 800660e:	00db      	lsls	r3, r3, #3
 8006610:	1a9b      	subs	r3, r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	3308      	adds	r3, #8
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	4413      	add	r3, r2
 800661a:	3304      	adds	r3, #4
 800661c:	617b      	str	r3, [r7, #20]

    if (tcb->Task != 0) return ERROR_INVALID_ARGUMENT; // check if task isn't used right now
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d002      	beq.n	800662c <Scheduler_AddTask+0x74>
 8006626:	f06f 0304 	mvn.w	r3, #4
 800662a:	e015      	b.n	8006658 <Scheduler_AddTask+0xa0>

    tcb->Task = task;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	601a      	str	r2, [r3, #0]
    tcb->EQ_Buff = eventQ;
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	605a      	str	r2, [r3, #4]
    tcb->EQ_Head = eventQ;
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	683a      	ldr	r2, [r7, #0]
 800663c:	609a      	str	r2, [r3, #8]
    tcb->EQ_Tail = eventQ;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	683a      	ldr	r2, [r7, #0]
 8006642:	60da      	str	r2, [r3, #12]
    tcb->EQ_Size = eventQSize;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	6a3a      	ldr	r2, [r7, #32]
 8006648:	611a      	str	r2, [r3, #16]
    tcb->EQ_Load = 0;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	2200      	movs	r2, #0
 800664e:	615a      	str	r2, [r3, #20]
    tcb->Name = name;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006654:	619a      	str	r2, [r3, #24]

    return STATUS_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3718      	adds	r7, #24
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	0802d91c 	.word	0x0802d91c
 8006664:	0802e1e8 	.word	0x0802e1e8
 8006668:	0802d928 	.word	0x0802d928

0800666c <Scheduler_PostEvent>:

status_t Scheduler_PostEvent(scheduler_t * const me,
                             task_prio_t priority,
                             task_event_t event)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	460b      	mov	r3, r1
 8006676:	607a      	str	r2, [r7, #4]
 8006678:	72fb      	strb	r3, [r7, #11]
    assert(me != NULL);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d105      	bne.n	800668c <Scheduler_PostEvent+0x20>
 8006680:	4b31      	ldr	r3, [pc, #196]	@ (8006748 <Scheduler_PostEvent+0xdc>)
 8006682:	4a32      	ldr	r2, [pc, #200]	@ (800674c <Scheduler_PostEvent+0xe0>)
 8006684:	2189      	movs	r1, #137	@ 0x89
 8006686:	4832      	ldr	r0, [pc, #200]	@ (8006750 <Scheduler_PostEvent+0xe4>)
 8006688:	f001 f90e 	bl	80078a8 <__assert_func>
    assert(event != NULL);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d105      	bne.n	800669e <Scheduler_PostEvent+0x32>
 8006692:	4b30      	ldr	r3, [pc, #192]	@ (8006754 <Scheduler_PostEvent+0xe8>)
 8006694:	4a2d      	ldr	r2, [pc, #180]	@ (800674c <Scheduler_PostEvent+0xe0>)
 8006696:	218a      	movs	r1, #138	@ 0x8a
 8006698:	482d      	ldr	r0, [pc, #180]	@ (8006750 <Scheduler_PostEvent+0xe4>)
 800669a:	f001 f905 	bl	80078a8 <__assert_func>

    if (!(priority < SCHEDULER_MAX_TASKS)) return ERROR_INVALID_ARGUMENT;
 800669e:	7afb      	ldrb	r3, [r7, #11]
 80066a0:	2b07      	cmp	r3, #7
 80066a2:	d902      	bls.n	80066aa <Scheduler_PostEvent+0x3e>
 80066a4:	f06f 0304 	mvn.w	r3, #4
 80066a8:	e049      	b.n	800673e <Scheduler_PostEvent+0xd2>

    taskcontrolblock_t * tcb = &me->TCB[priority];
 80066aa:	7afa      	ldrb	r2, [r7, #11]
 80066ac:	4613      	mov	r3, r2
 80066ae:	00db      	lsls	r3, r3, #3
 80066b0:	1a9b      	subs	r3, r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	3308      	adds	r3, #8
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	4413      	add	r3, r2
 80066ba:	3304      	adds	r3, #4
 80066bc:	617b      	str	r3, [r7, #20]
    if (tcb->Task == 0) return ERROR_NOT_INITIALIZED;
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d102      	bne.n	80066cc <Scheduler_PostEvent+0x60>
 80066c6:	f06f 0306 	mvn.w	r3, #6
 80066ca:	e038      	b.n	800673e <Scheduler_PostEvent+0xd2>

    IRQ_LOCK();
 80066cc:	f000 f982 	bl	80069d4 <IRQ_LOCK>
    if (tcb->EQ_Load < tcb->EQ_Size) // check if queue is not full
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	695a      	ldr	r2, [r3, #20]
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d22c      	bcs.n	8006736 <Scheduler_PostEvent+0xca>
    {
        *tcb->EQ_Head = event;
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	601a      	str	r2, [r3, #0]
        if ((++tcb->EQ_Head) == tcb->EQ_Buff + tcb->EQ_Size) tcb->EQ_Head = tcb->EQ_Buff;
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	1d1a      	adds	r2, r3, #4
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	609a      	str	r2, [r3, #8]
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	689a      	ldr	r2, [r3, #8]
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	6859      	ldr	r1, [r3, #4]
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	440b      	add	r3, r1
 80066fe:	429a      	cmp	r2, r3
 8006700:	d103      	bne.n	800670a <Scheduler_PostEvent+0x9e>
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	609a      	str	r2, [r3, #8]
        if ((++tcb->EQ_Load) == (uint32_t)1U) me->PendingFlags |= (1U << priority);
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	1c5a      	adds	r2, r3, #1
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	615a      	str	r2, [r3, #20]
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	2b01      	cmp	r3, #1
 800671a:	d108      	bne.n	800672e <Scheduler_PostEvent+0xc2>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	7afb      	ldrb	r3, [r7, #11]
 8006722:	2101      	movs	r1, #1
 8006724:	fa01 f303 	lsl.w	r3, r1, r3
 8006728:	431a      	orrs	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	601a      	str	r2, [r3, #0]
        IRQ_UNLOCK();
 800672e:	f000 f92f 	bl	8006990 <IRQ_UNLOCK>
    {
        IRQ_UNLOCK();
        return ERROR_TASK_QUEUE_FULL;
    }

    return STATUS_OK;
 8006732:	2300      	movs	r3, #0
 8006734:	e003      	b.n	800673e <Scheduler_PostEvent+0xd2>
        IRQ_UNLOCK();
 8006736:	f000 f92b 	bl	8006990 <IRQ_UNLOCK>
        return ERROR_TASK_QUEUE_FULL;
 800673a:	f06f 03e6 	mvn.w	r3, #230	@ 0xe6
}
 800673e:	4618      	mov	r0, r3
 8006740:	3718      	adds	r7, #24
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	0802d91c 	.word	0x0802d91c
 800674c:	0802e1fc 	.word	0x0802e1fc
 8006750:	0802d928 	.word	0x0802d928
 8006754:	0802d958 	.word	0x0802d958

08006758 <Scheduler_Run>:
    assert(me != NULL);
    return !((me->PendingFlags & (1U << priority)) == 0);
}

void Scheduler_Run(scheduler_t * const me)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
    assert(me != NULL);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d105      	bne.n	8006772 <Scheduler_Run+0x1a>
 8006766:	4b05      	ldr	r3, [pc, #20]	@ (800677c <Scheduler_Run+0x24>)
 8006768:	4a05      	ldr	r2, [pc, #20]	@ (8006780 <Scheduler_Run+0x28>)
 800676a:	21ae      	movs	r1, #174	@ 0xae
 800676c:	4805      	ldr	r0, [pc, #20]	@ (8006784 <Scheduler_Run+0x2c>)
 800676e:	f001 f89b 	bl	80078a8 <__assert_func>
    for (;;)
    {
        ScheduleNext(me);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f83c 	bl	80067f0 <ScheduleNext>
 8006778:	e7fb      	b.n	8006772 <Scheduler_Run+0x1a>
 800677a:	bf00      	nop
 800677c:	0802d91c 	.word	0x0802d91c
 8006780:	0802e210 	.word	0x0802e210
 8006784:	0802d928 	.word	0x0802d928

08006788 <Scheduler_SwitchContext>:
    }
}

void Scheduler_SwitchContext(scheduler_t * const me)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
    assert(me != NULL);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d105      	bne.n	80067a2 <Scheduler_SwitchContext+0x1a>
 8006796:	4b13      	ldr	r3, [pc, #76]	@ (80067e4 <Scheduler_SwitchContext+0x5c>)
 8006798:	4a13      	ldr	r2, [pc, #76]	@ (80067e8 <Scheduler_SwitchContext+0x60>)
 800679a:	21b7      	movs	r1, #183	@ 0xb7
 800679c:	4813      	ldr	r0, [pc, #76]	@ (80067ec <Scheduler_SwitchContext+0x64>)
 800679e:	f001 f883 	bl	80078a8 <__assert_func>
    task_prio_t prio = me->CurrentTask;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	7a1b      	ldrb	r3, [r3, #8]
 80067a6:	73fb      	strb	r3, [r7, #15]
    me->MaskingFlags |= (uint32_t)(1U << prio); /* mask current task */
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
 80067ae:	2101      	movs	r1, #1
 80067b0:	fa01 f303 	lsl.w	r3, r1, r3
 80067b4:	431a      	orrs	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	605a      	str	r2, [r3, #4]
    ScheduleNext(me); /* execute pending lower priority tasks */
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f818 	bl	80067f0 <ScheduleNext>
    me->MaskingFlags &= (uint32_t)(~(1U << prio)); /* unmask current task */
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685a      	ldr	r2, [r3, #4]
 80067c4:	7bfb      	ldrb	r3, [r7, #15]
 80067c6:	2101      	movs	r1, #1
 80067c8:	fa01 f303 	lsl.w	r3, r1, r3
 80067cc:	43db      	mvns	r3, r3
 80067ce:	401a      	ands	r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	605a      	str	r2, [r3, #4]
    me->CurrentTask = prio;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	7bfa      	ldrb	r2, [r7, #15]
 80067d8:	721a      	strb	r2, [r3, #8]
}
 80067da:	bf00      	nop
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	0802d91c 	.word	0x0802d91c
 80067e8:	0802e230 	.word	0x0802e230
 80067ec:	0802d928 	.word	0x0802d928

080067f0 <ScheduleNext>:

static inline void ScheduleNext(scheduler_t * const me)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
    assert(me != NULL);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d105      	bne.n	800680a <ScheduleNext+0x1a>
 80067fe:	4b3c      	ldr	r3, [pc, #240]	@ (80068f0 <ScheduleNext+0x100>)
 8006800:	4a3c      	ldr	r2, [pc, #240]	@ (80068f4 <ScheduleNext+0x104>)
 8006802:	21c1      	movs	r1, #193	@ 0xc1
 8006804:	483c      	ldr	r0, [pc, #240]	@ (80068f8 <ScheduleNext+0x108>)
 8006806:	f001 f84f 	bl	80078a8 <__assert_func>
    uint32_t pending = (uint32_t)(me->PendingFlags & ~(me->MaskingFlags));
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	43db      	mvns	r3, r3
 8006814:	4013      	ands	r3, r2
 8006816:	617b      	str	r3, [r7, #20]

    if (pending)
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d064      	beq.n	80068e8 <ScheduleNext+0xf8>
    {
        /* Get highest pending and not masked priority. */
        uint8_t prio = 0;
 800681e:	2300      	movs	r3, #0
 8006820:	74fb      	strb	r3, [r7, #19]
        while (pending & ~0xFU)
 8006822:	e005      	b.n	8006830 <ScheduleNext+0x40>
        {
            pending >>= 4U;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	091b      	lsrs	r3, r3, #4
 8006828:	617b      	str	r3, [r7, #20]
            prio += 4U;
 800682a:	7cfb      	ldrb	r3, [r7, #19]
 800682c:	3304      	adds	r3, #4
 800682e:	74fb      	strb	r3, [r7, #19]
        while (pending & ~0xFU)
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	2b0f      	cmp	r3, #15
 8006834:	d8f6      	bhi.n	8006824 <ScheduleNext+0x34>
        }
        prio += myLog2Lookup[pending];
 8006836:	4a31      	ldr	r2, [pc, #196]	@ (80068fc <ScheduleNext+0x10c>)
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	4413      	add	r3, r2
 800683c:	781a      	ldrb	r2, [r3, #0]
 800683e:	7cfb      	ldrb	r3, [r7, #19]
 8006840:	4413      	add	r3, r2
 8006842:	74fb      	strb	r3, [r7, #19]
        assert(prio < SCHEDULER_MAX_TASKS);
 8006844:	7cfb      	ldrb	r3, [r7, #19]
 8006846:	2b07      	cmp	r3, #7
 8006848:	d905      	bls.n	8006856 <ScheduleNext+0x66>
 800684a:	4b2d      	ldr	r3, [pc, #180]	@ (8006900 <ScheduleNext+0x110>)
 800684c:	4a29      	ldr	r2, [pc, #164]	@ (80068f4 <ScheduleNext+0x104>)
 800684e:	21ce      	movs	r1, #206	@ 0xce
 8006850:	4829      	ldr	r0, [pc, #164]	@ (80068f8 <ScheduleNext+0x108>)
 8006852:	f001 f829 	bl	80078a8 <__assert_func>

        taskcontrolblock_t * tcb = &me->TCB[prio];
 8006856:	7cfa      	ldrb	r2, [r7, #19]
 8006858:	4613      	mov	r3, r2
 800685a:	00db      	lsls	r3, r3, #3
 800685c:	1a9b      	subs	r3, r3, r2
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	3308      	adds	r3, #8
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	4413      	add	r3, r2
 8006866:	3304      	adds	r3, #4
 8006868:	60fb      	str	r3, [r7, #12]
        assert(tcb->Task != 0);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d105      	bne.n	800687e <ScheduleNext+0x8e>
 8006872:	4b24      	ldr	r3, [pc, #144]	@ (8006904 <ScheduleNext+0x114>)
 8006874:	4a1f      	ldr	r2, [pc, #124]	@ (80068f4 <ScheduleNext+0x104>)
 8006876:	21d1      	movs	r1, #209	@ 0xd1
 8006878:	481f      	ldr	r0, [pc, #124]	@ (80068f8 <ScheduleNext+0x108>)
 800687a:	f001 f815 	bl	80078a8 <__assert_func>

        task_event_t event = *tcb->EQ_Tail;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	60bb      	str	r3, [r7, #8]

        /* Get next event from queue. */
        if ((++tcb->EQ_Tail) == tcb->EQ_Buff + tcb->EQ_Size)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	1d1a      	adds	r2, r3, #4
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	60da      	str	r2, [r3, #12]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	68da      	ldr	r2, [r3, #12]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6859      	ldr	r1, [r3, #4]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	440b      	add	r3, r1
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d103      	bne.n	80068ac <ScheduleNext+0xbc>
            tcb->EQ_Tail = tcb->EQ_Buff;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	685a      	ldr	r2, [r3, #4]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	60da      	str	r2, [r3, #12]

        IRQ_LOCK();
 80068ac:	f000 f892 	bl	80069d4 <IRQ_LOCK>

        /* Clear pending flag if event queue is empty. */
        if ((--tcb->EQ_Load) == (size_t)0)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	1e5a      	subs	r2, r3, #1
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	615a      	str	r2, [r3, #20]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d109      	bne.n	80068d6 <ScheduleNext+0xe6>
            me->PendingFlags &= (uint32_t)(~(1U << prio));
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	7cfb      	ldrb	r3, [r7, #19]
 80068c8:	2101      	movs	r1, #1
 80068ca:	fa01 f303 	lsl.w	r3, r1, r3
 80068ce:	43db      	mvns	r3, r3
 80068d0:	401a      	ands	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	601a      	str	r2, [r3, #0]

        me->CurrentTask = prio;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	7cfa      	ldrb	r2, [r7, #19]
 80068da:	721a      	strb	r2, [r3, #8]

        IRQ_UNLOCK();
 80068dc:	f000 f858 	bl	8006990 <IRQ_UNLOCK>
#if PROFILING
        OnTaskStart(prio);
#endif

        /* Execute the task. */
        tcb->Task(event);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68b8      	ldr	r0, [r7, #8]
 80068e6:	4798      	blx	r3

#if PROFILING
        OnTaskFinished(prio, status);
#endif
    }
}
 80068e8:	bf00      	nop
 80068ea:	3718      	adds	r7, #24
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	0802d91c 	.word	0x0802d91c
 80068f4:	0802e220 	.word	0x0802e220
 80068f8:	0802d928 	.word	0x0802d928
 80068fc:	0802e1d8 	.word	0x0802e1d8
 8006900:	0802d968 	.word	0x0802d968
 8006904:	0802d984 	.word	0x0802d984

08006908 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8006908:	b480      	push	{r7}
 800690a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800690c:	f3bf 8f4f 	dsb	sy
}
 8006910:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006912:	4b06      	ldr	r3, [pc, #24]	@ (800692c <__NVIC_SystemReset+0x24>)
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800691a:	4904      	ldr	r1, [pc, #16]	@ (800692c <__NVIC_SystemReset+0x24>)
 800691c:	4b04      	ldr	r3, [pc, #16]	@ (8006930 <__NVIC_SystemReset+0x28>)
 800691e:	4313      	orrs	r3, r2
 8006920:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006922:	f3bf 8f4f 	dsb	sy
}
 8006926:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006928:	bf00      	nop
 800692a:	e7fd      	b.n	8006928 <__NVIC_SystemReset+0x20>
 800692c:	e000ed00 	.word	0xe000ed00
 8006930:	05fa0004 	.word	0x05fa0004

08006934 <Board_Init>:

#include "utility/debug.h" // declaration of print() and error_log()


status_t Board_Init(void)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
    /* Initialize timer required by the API. */
    Timer_Init();
 800693a:	f000 fc15 	bl	8007168 <Timer_Init>

    /* Initialize UART for print functionality. */
    status_t status = UART_Init();
 800693e:	f000 fcf3 	bl	8007328 <UART_Init>
 8006942:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) {
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	da05      	bge.n	8006956 <Board_Init+0x22>
        error_log("UART driver initialization failed, error code: %d", status);
 800694a:	6879      	ldr	r1, [r7, #4]
 800694c:	480b      	ldr	r0, [pc, #44]	@ (800697c <Board_Init+0x48>)
 800694e:	f7ff fddd 	bl	800650c <print>
        return status;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	e00e      	b.n	8006974 <Board_Init+0x40>
    }

    /* Initialize the S2PI hardware required by the API. */
    status = S2PI_Init(SPI_DEFAULT_SLAVE, SPI_BAUDRATE);
 8006956:	490a      	ldr	r1, [pc, #40]	@ (8006980 <Board_Init+0x4c>)
 8006958:	2001      	movs	r0, #1
 800695a:	f000 f865 	bl	8006a28 <S2PI_Init>
 800695e:	6078      	str	r0, [r7, #4]
    if (status < STATUS_OK) {
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	da05      	bge.n	8006972 <Board_Init+0x3e>
        error_log("S2PI driver initialization failed, error code: %d", status);
 8006966:	6879      	ldr	r1, [r7, #4]
 8006968:	4806      	ldr	r0, [pc, #24]	@ (8006984 <Board_Init+0x50>)
 800696a:	f7ff fdcf 	bl	800650c <print>
        return status;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	e000      	b.n	8006974 <Board_Init+0x40>
//    {
//        error_log("Flash driver initialization failed, error code: %d", status);
//        return status;
//    }
//
    return STATUS_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	0802d994 	.word	0x0802d994
 8006980:	01406f40 	.word	0x01406f40
 8006984:	0802d9d0 	.word	0x0802d9d0

08006988 <Board_Reset>:

void Board_Reset(void)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	af00      	add	r7, sp, #0
    NVIC_SystemReset();
 800698c:	f7ff ffbc 	bl	8006908 <__NVIC_SystemReset>

08006990 <IRQ_UNLOCK>:
 *          Can only be executed in Privileged modes.
 *
 * @return  -
 *****************************************************************************/
void IRQ_UNLOCK(void)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	af00      	add	r7, sp, #0
    assert(g_irq_lock_ct > 0);
 8006994:	4b0b      	ldr	r3, [pc, #44]	@ (80069c4 <IRQ_UNLOCK+0x34>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	dc05      	bgt.n	80069a8 <IRQ_UNLOCK+0x18>
 800699c:	4b0a      	ldr	r3, [pc, #40]	@ (80069c8 <IRQ_UNLOCK+0x38>)
 800699e:	4a0b      	ldr	r2, [pc, #44]	@ (80069cc <IRQ_UNLOCK+0x3c>)
 80069a0:	2137      	movs	r1, #55	@ 0x37
 80069a2:	480b      	ldr	r0, [pc, #44]	@ (80069d0 <IRQ_UNLOCK+0x40>)
 80069a4:	f000 ff80 	bl	80078a8 <__assert_func>
    if (--g_irq_lock_ct <= 0)
 80069a8:	4b06      	ldr	r3, [pc, #24]	@ (80069c4 <IRQ_UNLOCK+0x34>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	3b01      	subs	r3, #1
 80069ae:	4a05      	ldr	r2, [pc, #20]	@ (80069c4 <IRQ_UNLOCK+0x34>)
 80069b0:	6013      	str	r3, [r2, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	dc04      	bgt.n	80069c0 <IRQ_UNLOCK+0x30>
    {
        g_irq_lock_ct = 0;
 80069b6:	4b03      	ldr	r3, [pc, #12]	@ (80069c4 <IRQ_UNLOCK+0x34>)
 80069b8:	2200      	movs	r2, #0
 80069ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80069bc:	b662      	cpsie	i
}
 80069be:	bf00      	nop
        __enable_irq();
    }
}
 80069c0:	bf00      	nop
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	240031c8 	.word	0x240031c8
 80069c8:	0802da0c 	.word	0x0802da0c
 80069cc:	0802e248 	.word	0x0802e248
 80069d0:	0802da20 	.word	0x0802da20

080069d4 <IRQ_LOCK>:
 *          Can only be executed in Privileged modes.
 *
 * @return  -
 *****************************************************************************/
void IRQ_LOCK(void)
{
 80069d4:	b480      	push	{r7}
 80069d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80069d8:	b672      	cpsid	i
}
 80069da:	bf00      	nop
    __disable_irq();
    ++g_irq_lock_ct;
 80069dc:	4b04      	ldr	r3, [pc, #16]	@ (80069f0 <IRQ_LOCK+0x1c>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3301      	adds	r3, #1
 80069e2:	4a03      	ldr	r2, [pc, #12]	@ (80069f0 <IRQ_LOCK+0x1c>)
 80069e4:	6013      	str	r3, [r2, #0]
}
 80069e6:	bf00      	nop
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr
 80069f0:	240031c8 	.word	0x240031c8

080069f4 <NVM_WriteBlock>:
/*******************************************************************************
 * Code
 ******************************************************************************/

status_t NVM_WriteBlock(uint32_t device_id, uint32_t block_size, uint8_t const * buf)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
//    memcpy(&(data[NVM_HEADER_SIZE]), buf, block_size);
//
//    /* Write Data. */
//    return Flash_Write(FLASH_API_BLOCK_INDEX, slot_idx, data, FLASH_BLOCK_SIZE);
	/////////////////////////////////////////////////////////
	return STATUS_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3714      	adds	r7, #20
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <NVM_ReadBlock>:

status_t NVM_ReadBlock(uint32_t device_id, uint32_t block_size, uint8_t * buf)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b085      	sub	sp, #20
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	60f8      	str	r0, [r7, #12]
 8006a16:	60b9      	str	r1, [r7, #8]
 8006a18:	607a      	str	r2, [r7, #4]
//    /* Reset buffer in case of any error. */
//    memset(buf, 0, block_size);
//    return status;

	/////////////////////////////////////////////////////////
	return STATUS_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3714      	adds	r7, #20
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <S2PI_Init>:
 * Code
 ******************************************************************************/


status_t S2PI_Init(s2pi_slave_t defaultSlave, uint32_t baudRate_Bps)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
    S2PI_InitPins();
 8006a32:	f000 f815 	bl	8006a60 <S2PI_InitPins>

    if (defaultSlave < 0) {
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	da01      	bge.n	8006a40 <S2PI_Init+0x18>
        defaultSlave = S2PI_SLAVE1;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	607b      	str	r3, [r7, #4]
    }

    if (defaultSlave > S2PI_SLAVE_COUNT) {
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	dd02      	ble.n	8006a4c <S2PI_Init+0x24>
        return ERROR_S2PI_INVALID_SLAVE;
 8006a46:	f06f 0336 	mvn.w	r3, #54	@ 0x36
 8006a4a:	e004      	b.n	8006a56 <S2PI_Init+0x2e>
    }

    return S2PI_SetBaudRate(defaultSlave, baudRate_Bps);
 8006a4c:	6839      	ldr	r1, [r7, #0]
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f884 	bl	8006b5c <S2PI_SetBaudRate>
 8006a54:	4603      	mov	r3, r0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3708      	adds	r7, #8
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
	...

08006a60 <S2PI_InitPins>:


static inline void S2PI_InitPins()
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	af00      	add	r7, sp, #0
    /* Initializes Pins: MOSI/MISO/CLK */
    S2PI_SetGPIOMode(true);
 8006a64:	2001      	movs	r0, #1
 8006a66:	f000 f837 	bl	8006ad8 <S2PI_SetGPIOMode>
    S2PI_SetGPIOMode(false);
 8006a6a:	2000      	movs	r0, #0
 8006a6c:	f000 f834 	bl	8006ad8 <S2PI_SetGPIOMode>

    myS2PIHnd.SlaveIrqMapping[S2PI_SLAVE1] = S2PI_IRQ1_GPIO_PIN;
 8006a70:	4b04      	ldr	r3, [pc, #16]	@ (8006a84 <S2PI_InitPins+0x24>)
 8006a72:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006a76:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* S2PI_SLAVE_COUNT >= 4 */

    /* The 4X board equipped with power switches require some delay
     * until the devices have finished the power-on-reset (POR).
     * Must be >= 2ms (?) */
    Time_DelayMSec(3);
 8006a78:	2003      	movs	r0, #3
 8006a7a:	f00d fbd9 	bl	8014230 <Time_DelayMSec>
}
 8006a7e:	bf00      	nop
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	24000000 	.word	0x24000000

08006a88 <S2PI_SetSlaveInternal>:

static inline status_t S2PI_SetSlaveInternal(s2pi_slave_t slave)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
    switch (slave)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d112      	bne.n	8006abc <S2PI_SetSlaveInternal+0x34>
    {
        case S2PI_SLAVE1:
            myS2PIHnd.GPIOs[S2PI_CS].Port = S2PI_CS1_GPIO;
 8006a96:	4b0d      	ldr	r3, [pc, #52]	@ (8006acc <S2PI_SetSlaveInternal+0x44>)
 8006a98:	4a0d      	ldr	r2, [pc, #52]	@ (8006ad0 <S2PI_SetSlaveInternal+0x48>)
 8006a9a:	635a      	str	r2, [r3, #52]	@ 0x34
            myS2PIHnd.GPIOs[S2PI_CS].Pin = S2PI_CS1_GPIO_PIN;
 8006a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8006acc <S2PI_SetSlaveInternal+0x44>)
 8006a9e:	2210      	movs	r2, #16
 8006aa0:	639a      	str	r2, [r3, #56]	@ 0x38
            myS2PIHnd.GPIOs[S2PI_IRQ].Port = S2PI_IRQ1_GPIO;
 8006aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8006acc <S2PI_SetSlaveInternal+0x44>)
 8006aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8006ad4 <S2PI_SetSlaveInternal+0x4c>)
 8006aa6:	64da      	str	r2, [r3, #76]	@ 0x4c
            myS2PIHnd.GPIOs[S2PI_IRQ].Pin = S2PI_IRQ1_GPIO_PIN;
 8006aa8:	4b08      	ldr	r3, [pc, #32]	@ (8006acc <S2PI_SetSlaveInternal+0x44>)
 8006aaa:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006aae:	651a      	str	r2, [r3, #80]	@ 0x50
            break;
 8006ab0:	bf00      	nop

        default:
            return ERROR_S2PI_INVALID_SLAVE;
    }

    myS2PIHnd.Slave = slave;
 8006ab2:	4a06      	ldr	r2, [pc, #24]	@ (8006acc <S2PI_SetSlaveInternal+0x44>)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6053      	str	r3, [r2, #4]

    return STATUS_OK;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	e001      	b.n	8006ac0 <S2PI_SetSlaveInternal+0x38>
            return ERROR_S2PI_INVALID_SLAVE;
 8006abc:	f06f 0336 	mvn.w	r3, #54	@ 0x36
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr
 8006acc:	24000000 	.word	0x24000000
 8006ad0:	58020000 	.word	0x58020000
 8006ad4:	58020400 	.word	0x58020400

08006ad8 <S2PI_SetGPIOMode>:
 * @brief   Sets the mode in which the S2PI pins operate.
 * @details This is a helper function to switch the modes between SPI and GPIO.
 * @param   gpio_mode Enables the GPIO mode: true for GPIO, false for SPI.
 *****************************************************************************/
static inline void S2PI_SetGPIOMode(bool gpio_mode)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b088      	sub	sp, #32
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	4603      	mov	r3, r0
 8006ae0:	71fb      	strb	r3, [r7, #7]
    GPIO_InitTypeDef  GPIO_InitStruct;
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = myS2PIHnd.SpiAlternate;
 8006aea:	4b1b      	ldr	r3, [pc, #108]	@ (8006b58 <S2PI_SetGPIOMode+0x80>)
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	61fb      	str	r3, [r7, #28]

    /* *** OUTPUT pins *** */
    GPIO_InitStruct.Mode      = gpio_mode ? GPIO_MODE_OUTPUT_PP : GPIO_MODE_AF_PP;
 8006af0:	79fb      	ldrb	r3, [r7, #7]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <S2PI_SetGPIOMode+0x22>
 8006af6:	2301      	movs	r3, #1
 8006af8:	e000      	b.n	8006afc <S2PI_SetGPIOMode+0x24>
 8006afa:	2302      	movs	r3, #2
 8006afc:	613b      	str	r3, [r7, #16]

    /* SPI CLK */
    GPIO_InitStruct.Pin       = myS2PIHnd.GPIOs[S2PI_CLK].Pin;
 8006afe:	4b16      	ldr	r3, [pc, #88]	@ (8006b58 <S2PI_SetGPIOMode+0x80>)
 8006b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b02:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(myS2PIHnd.GPIOs[S2PI_CLK].Port, &GPIO_InitStruct);
 8006b04:	4b14      	ldr	r3, [pc, #80]	@ (8006b58 <S2PI_SetGPIOMode+0x80>)
 8006b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b08:	f107 020c 	add.w	r2, r7, #12
 8006b0c:	4611      	mov	r1, r2
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f005 ffee 	bl	800caf0 <HAL_GPIO_Init>

    /* SPI MOSI */
    GPIO_InitStruct.Pin      = myS2PIHnd.GPIOs[S2PI_MOSI].Pin;
 8006b14:	4b10      	ldr	r3, [pc, #64]	@ (8006b58 <S2PI_SetGPIOMode+0x80>)
 8006b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b18:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(myS2PIHnd.GPIOs[S2PI_MOSI].Port, &GPIO_InitStruct);
 8006b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8006b58 <S2PI_SetGPIOMode+0x80>)
 8006b1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b1e:	f107 020c 	add.w	r2, r7, #12
 8006b22:	4611      	mov	r1, r2
 8006b24:	4618      	mov	r0, r3
 8006b26:	f005 ffe3 	bl	800caf0 <HAL_GPIO_Init>

    /* *** INPUT pins *** */
    GPIO_InitStruct.Mode      = gpio_mode ? GPIO_MODE_INPUT : GPIO_MODE_AF_PP;
 8006b2a:	79fb      	ldrb	r3, [r7, #7]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d001      	beq.n	8006b34 <S2PI_SetGPIOMode+0x5c>
 8006b30:	2300      	movs	r3, #0
 8006b32:	e000      	b.n	8006b36 <S2PI_SetGPIOMode+0x5e>
 8006b34:	2302      	movs	r3, #2
 8006b36:	613b      	str	r3, [r7, #16]

    /* SPI MISO */
    GPIO_InitStruct.Pin       = myS2PIHnd.GPIOs[S2PI_MISO].Pin;
 8006b38:	4b07      	ldr	r3, [pc, #28]	@ (8006b58 <S2PI_SetGPIOMode+0x80>)
 8006b3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b3c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(myS2PIHnd.GPIOs[S2PI_MISO].Port, &GPIO_InitStruct);
 8006b3e:	4b06      	ldr	r3, [pc, #24]	@ (8006b58 <S2PI_SetGPIOMode+0x80>)
 8006b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b42:	f107 020c 	add.w	r2, r7, #12
 8006b46:	4611      	mov	r1, r2
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f005 ffd1 	bl	800caf0 <HAL_GPIO_Init>
}
 8006b4e:	bf00      	nop
 8006b50:	3720      	adds	r7, #32
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	24000000 	.word	0x24000000

08006b5c <S2PI_SetBaudRate>:

status_t S2PI_SetBaudRate(s2pi_slave_t slave, uint32_t baudRate_Bps)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
    (void) slave; // not used in this implementation

    uint32_t prescaler = 0;
 8006b66:	2300      	movs	r3, #0
 8006b68:	60fb      	str	r3, [r7, #12]
    /* Determine the maximum value of the prescaler */
    for (; prescaler < 8; ++prescaler) {
 8006b6a:	e00c      	b.n	8006b86 <S2PI_SetBaudRate+0x2a>
    	const uint32_t baud = S2PI_REF_CLK >> (prescaler + 1);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	4a10      	ldr	r2, [pc, #64]	@ (8006bb4 <S2PI_SetBaudRate+0x58>)
 8006b72:	fa22 f303 	lsr.w	r3, r2, r3
 8006b76:	60bb      	str	r3, [r7, #8]
        if (baud <= baudRate_Bps) {
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d906      	bls.n	8006b8e <S2PI_SetBaudRate+0x32>
    for (; prescaler < 8; ++prescaler) {
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	3301      	adds	r3, #1
 8006b84:	60fb      	str	r3, [r7, #12]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2b07      	cmp	r3, #7
 8006b8a:	d9ef      	bls.n	8006b6c <S2PI_SetBaudRate+0x10>
 8006b8c:	e000      	b.n	8006b90 <S2PI_SetBaudRate+0x34>
            break;
 8006b8e:	bf00      	nop
        }
    }

    S2PI_SET_PRESCALAR(prescaler);
 8006b90:	4b09      	ldr	r3, [pc, #36]	@ (8006bb8 <S2PI_SetBaudRate+0x5c>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	071a      	lsls	r2, r3, #28
 8006b9e:	4b06      	ldr	r3, [pc, #24]	@ (8006bb8 <S2PI_SetBaudRate+0x5c>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	609a      	str	r2, [r3, #8]
    return STATUS_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3714      	adds	r7, #20
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	07b06240 	.word	0x07b06240
 8006bb8:	240032f0 	.word	0x240032f0

08006bbc <S2PI_GetBaudRate>:

uint32_t S2PI_GetBaudRate(s2pi_slave_t slave)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
    (void) slave; // not used in this implementation
    uint32_t prescaler = S2PI_GET_PRESCALAR();
 8006bc4:	4b08      	ldr	r3, [pc, #32]	@ (8006be8 <S2PI_GetBaudRate+0x2c>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	0f1b      	lsrs	r3, r3, #28
 8006bcc:	f003 0307 	and.w	r3, r3, #7
 8006bd0:	60fb      	str	r3, [r7, #12]
    return S2PI_REF_CLK >> (prescaler + 1);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	4a05      	ldr	r2, [pc, #20]	@ (8006bec <S2PI_GetBaudRate+0x30>)
 8006bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3714      	adds	r7, #20
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	240032f0 	.word	0x240032f0
 8006bec:	07b06240 	.word	0x07b06240

08006bf0 <S2PI_GetStatus>:

status_t S2PI_GetStatus(s2pi_slave_t slave)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
    (void) slave; // not used in this implementation
    return myS2PIHnd.Status;
 8006bf8:	4b03      	ldr	r3, [pc, #12]	@ (8006c08 <S2PI_GetStatus+0x18>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr
 8006c08:	24000000 	.word	0x24000000

08006c0c <S2PI_CaptureGpioControl>:

status_t S2PI_CaptureGpioControl(s2pi_slave_t slave)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
    (void) slave; // not used in this implementation

    /* Check if something is ongoing. */
    IRQ_LOCK();
 8006c14:	f7ff fede 	bl	80069d4 <IRQ_LOCK>
    status_t status = myS2PIHnd.Status;
 8006c18:	4b0f      	ldr	r3, [pc, #60]	@ (8006c58 <S2PI_CaptureGpioControl+0x4c>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	60fb      	str	r3, [r7, #12]
    if (status != STATUS_IDLE) {
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d003      	beq.n	8006c2c <S2PI_CaptureGpioControl+0x20>
        IRQ_UNLOCK();
 8006c24:	f7ff feb4 	bl	8006990 <IRQ_UNLOCK>
        return status;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	e011      	b.n	8006c50 <S2PI_CaptureGpioControl+0x44>
    }
    myS2PIHnd.Status = STATUS_S2PI_GPIO_MODE;
 8006c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c58 <S2PI_CaptureGpioControl+0x4c>)
 8006c2e:	2233      	movs	r2, #51	@ 0x33
 8006c30:	601a      	str	r2, [r3, #0]
    IRQ_UNLOCK();
 8006c32:	f7ff fead 	bl	8006990 <IRQ_UNLOCK>

    /* Note: Clock must be HI after capturing */
    HAL_GPIO_WritePin(myS2PIHnd.GPIOs[S2PI_CLK].Port, myS2PIHnd.GPIOs[S2PI_CLK].Pin, GPIO_PIN_SET);
 8006c36:	4b08      	ldr	r3, [pc, #32]	@ (8006c58 <S2PI_CaptureGpioControl+0x4c>)
 8006c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c3a:	4a07      	ldr	r2, [pc, #28]	@ (8006c58 <S2PI_CaptureGpioControl+0x4c>)
 8006c3c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006c3e:	b291      	uxth	r1, r2
 8006c40:	2201      	movs	r2, #1
 8006c42:	4618      	mov	r0, r3
 8006c44:	f006 f914 	bl	800ce70 <HAL_GPIO_WritePin>

    S2PI_SetGPIOMode(true);
 8006c48:	2001      	movs	r0, #1
 8006c4a:	f7ff ff45 	bl	8006ad8 <S2PI_SetGPIOMode>

    return STATUS_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	24000000 	.word	0x24000000

08006c5c <S2PI_ReleaseGpioControl>:

status_t S2PI_ReleaseGpioControl(s2pi_slave_t slave)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
    (void) slave; // not used in this implementation

    /* Check if something is ongoing. */
    IRQ_LOCK();
 8006c64:	f7ff feb6 	bl	80069d4 <IRQ_LOCK>
    status_t status = myS2PIHnd.Status;
 8006c68:	4b0b      	ldr	r3, [pc, #44]	@ (8006c98 <S2PI_ReleaseGpioControl+0x3c>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	60fb      	str	r3, [r7, #12]
    if (status != STATUS_S2PI_GPIO_MODE)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2b33      	cmp	r3, #51	@ 0x33
 8006c72:	d003      	beq.n	8006c7c <S2PI_ReleaseGpioControl+0x20>
    {
        IRQ_UNLOCK();
 8006c74:	f7ff fe8c 	bl	8006990 <IRQ_UNLOCK>
        return status;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	e008      	b.n	8006c8e <S2PI_ReleaseGpioControl+0x32>
    }
    myS2PIHnd.Status = STATUS_IDLE;
 8006c7c:	4b06      	ldr	r3, [pc, #24]	@ (8006c98 <S2PI_ReleaseGpioControl+0x3c>)
 8006c7e:	2200      	movs	r2, #0
 8006c80:	601a      	str	r2, [r3, #0]
    IRQ_UNLOCK();
 8006c82:	f7ff fe85 	bl	8006990 <IRQ_UNLOCK>

    S2PI_SetGPIOMode(false);
 8006c86:	2000      	movs	r0, #0
 8006c88:	f7ff ff26 	bl	8006ad8 <S2PI_SetGPIOMode>

    return STATUS_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	24000000 	.word	0x24000000

08006c9c <S2PI_WriteGpioPin>:

status_t S2PI_WriteGpioPin(s2pi_slave_t slave, s2pi_pin_t pin, uint32_t value)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b086      	sub	sp, #24
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	607a      	str	r2, [r7, #4]
 8006ca8:	72fb      	strb	r3, [r7, #11]
    /* Check if pin is valid. */
    if (pin > S2PI_IRQ || value > 1) {
 8006caa:	7afb      	ldrb	r3, [r7, #11]
 8006cac:	2b04      	cmp	r3, #4
 8006cae:	d802      	bhi.n	8006cb6 <S2PI_WriteGpioPin+0x1a>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d902      	bls.n	8006cbc <S2PI_WriteGpioPin+0x20>
    	return ERROR_INVALID_ARGUMENT;
 8006cb6:	f06f 0304 	mvn.w	r3, #4
 8006cba:	e033      	b.n	8006d24 <S2PI_WriteGpioPin+0x88>
    }

    /* Check if in GPIO mode. */
    if(myS2PIHnd.Status != STATUS_S2PI_GPIO_MODE) {
 8006cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8006d2c <S2PI_WriteGpioPin+0x90>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2b33      	cmp	r3, #51	@ 0x33
 8006cc2:	d002      	beq.n	8006cca <S2PI_WriteGpioPin+0x2e>
        return ERROR_S2PI_INVALID_STATE;
 8006cc4:	f06f 0334 	mvn.w	r3, #52	@ 0x34
 8006cc8:	e02c      	b.n	8006d24 <S2PI_WriteGpioPin+0x88>
    }

    if (pin == S2PI_CS) {
 8006cca:	7afb      	ldrb	r3, [r7, #11]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d113      	bne.n	8006cf8 <S2PI_WriteGpioPin+0x5c>
        GPIO_PinState pinState = value ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	bf14      	ite	ne
 8006cd6:	2301      	movne	r3, #1
 8006cd8:	2300      	moveq	r3, #0
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	75fb      	strb	r3, [r7, #23]
        switch (slave)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d106      	bne.n	8006cf2 <S2PI_WriteGpioPin+0x56>
        {
            case S2PI_SLAVE1:
                HAL_GPIO_WritePin(S2PI_CS1_GPIO, S2PI_CS1_GPIO_PIN, pinState);
 8006ce4:	7dfb      	ldrb	r3, [r7, #23]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	2110      	movs	r1, #16
 8006cea:	4811      	ldr	r0, [pc, #68]	@ (8006d30 <S2PI_WriteGpioPin+0x94>)
 8006cec:	f006 f8c0 	bl	800ce70 <HAL_GPIO_WritePin>
                break;
 8006cf0:	e014      	b.n	8006d1c <S2PI_WriteGpioPin+0x80>
                HAL_GPIO_WritePin(S2PI_CS4_GPIO, S2PI_CS4_GPIO_PIN, pinState);
                break;
#endif /* S2PI_SLAVE_COUNT >= 4 */

            default:
                return ERROR_S2PI_INVALID_SLAVE;
 8006cf2:	f06f 0336 	mvn.w	r3, #54	@ 0x36
 8006cf6:	e015      	b.n	8006d24 <S2PI_WriteGpioPin+0x88>
        }
    } else {
        HAL_GPIO_WritePin(myS2PIHnd.GPIOs[pin].Port, myS2PIHnd.GPIOs[pin].Pin, value);
 8006cf8:	7afb      	ldrb	r3, [r7, #11]
 8006cfa:	4a0c      	ldr	r2, [pc, #48]	@ (8006d2c <S2PI_WriteGpioPin+0x90>)
 8006cfc:	3305      	adds	r3, #5
 8006cfe:	00db      	lsls	r3, r3, #3
 8006d00:	4413      	add	r3, r2
 8006d02:	6858      	ldr	r0, [r3, #4]
 8006d04:	7afb      	ldrb	r3, [r7, #11]
 8006d06:	4a09      	ldr	r2, [pc, #36]	@ (8006d2c <S2PI_WriteGpioPin+0x90>)
 8006d08:	3305      	adds	r3, #5
 8006d0a:	00db      	lsls	r3, r3, #3
 8006d0c:	4413      	add	r3, r2
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	b2d2      	uxtb	r2, r2
 8006d16:	4619      	mov	r1, r3
 8006d18:	f006 f8aa 	bl	800ce70 <HAL_GPIO_WritePin>
    }

    S2PI_GPIO_DELAY();
 8006d1c:	200a      	movs	r0, #10
 8006d1e:	f00d fa29 	bl	8014174 <Time_DelayUSec>

    return STATUS_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3718      	adds	r7, #24
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	24000000 	.word	0x24000000
 8006d30:	58020000 	.word	0x58020000

08006d34 <S2PI_ReadGpioPin>:

status_t S2PI_ReadGpioPin(s2pi_slave_t slave, s2pi_pin_t pin, uint32_t * value)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	607a      	str	r2, [r7, #4]
 8006d40:	72fb      	strb	r3, [r7, #11]
    /* Check if pin is valid. */
    if (pin > S2PI_IRQ || !value)
 8006d42:	7afb      	ldrb	r3, [r7, #11]
 8006d44:	2b04      	cmp	r3, #4
 8006d46:	d802      	bhi.n	8006d4e <S2PI_ReadGpioPin+0x1a>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d102      	bne.n	8006d54 <S2PI_ReadGpioPin+0x20>
        return ERROR_INVALID_ARGUMENT;
 8006d4e:	f06f 0304 	mvn.w	r3, #4
 8006d52:	e031      	b.n	8006db8 <S2PI_ReadGpioPin+0x84>

    /* Check if in GPIO mode. */
    if(myS2PIHnd.Status != STATUS_S2PI_GPIO_MODE)
 8006d54:	4b1a      	ldr	r3, [pc, #104]	@ (8006dc0 <S2PI_ReadGpioPin+0x8c>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b33      	cmp	r3, #51	@ 0x33
 8006d5a:	d002      	beq.n	8006d62 <S2PI_ReadGpioPin+0x2e>
        return ERROR_S2PI_INVALID_STATE;
 8006d5c:	f06f 0334 	mvn.w	r3, #52	@ 0x34
 8006d60:	e02a      	b.n	8006db8 <S2PI_ReadGpioPin+0x84>

    if (pin == S2PI_CS) {
 8006d62:	7afb      	ldrb	r3, [r7, #11]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d10e      	bne.n	8006d86 <S2PI_ReadGpioPin+0x52>
        switch (slave)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d108      	bne.n	8006d80 <S2PI_ReadGpioPin+0x4c>
        {
            case S2PI_SLAVE1:
                *value = HAL_GPIO_ReadPin(S2PI_CS1_GPIO, S2PI_CS1_GPIO_PIN);
 8006d6e:	2110      	movs	r1, #16
 8006d70:	4814      	ldr	r0, [pc, #80]	@ (8006dc4 <S2PI_ReadGpioPin+0x90>)
 8006d72:	f006 f865 	bl	800ce40 <HAL_GPIO_ReadPin>
 8006d76:	4603      	mov	r3, r0
 8006d78:	461a      	mov	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	601a      	str	r2, [r3, #0]
                break;
 8006d7e:	e017      	b.n	8006db0 <S2PI_ReadGpioPin+0x7c>
                *value = HAL_GPIO_ReadPin(S2PI_CS4_GPIO, S2PI_CS4_GPIO_PIN);
                break;
#endif /* S2PI_SLAVE_COUNT >= 4 */

            default:
                return ERROR_S2PI_INVALID_SLAVE;
 8006d80:	f06f 0336 	mvn.w	r3, #54	@ 0x36
 8006d84:	e018      	b.n	8006db8 <S2PI_ReadGpioPin+0x84>
        }
    } else {
        *value = HAL_GPIO_ReadPin(myS2PIHnd.GPIOs[pin].Port, myS2PIHnd.GPIOs[pin].Pin);
 8006d86:	7afb      	ldrb	r3, [r7, #11]
 8006d88:	4a0d      	ldr	r2, [pc, #52]	@ (8006dc0 <S2PI_ReadGpioPin+0x8c>)
 8006d8a:	3305      	adds	r3, #5
 8006d8c:	00db      	lsls	r3, r3, #3
 8006d8e:	4413      	add	r3, r2
 8006d90:	685a      	ldr	r2, [r3, #4]
 8006d92:	7afb      	ldrb	r3, [r7, #11]
 8006d94:	490a      	ldr	r1, [pc, #40]	@ (8006dc0 <S2PI_ReadGpioPin+0x8c>)
 8006d96:	3305      	adds	r3, #5
 8006d98:	00db      	lsls	r3, r3, #3
 8006d9a:	440b      	add	r3, r1
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	4619      	mov	r1, r3
 8006da2:	4610      	mov	r0, r2
 8006da4:	f006 f84c 	bl	800ce40 <HAL_GPIO_ReadPin>
 8006da8:	4603      	mov	r3, r0
 8006daa:	461a      	mov	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	601a      	str	r2, [r3, #0]
    }

    S2PI_GPIO_DELAY();
 8006db0:	200a      	movs	r0, #10
 8006db2:	f00d f9df 	bl	8014174 <Time_DelayUSec>

    return STATUS_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	24000000 	.word	0x24000000
 8006dc4:	58020000 	.word	0x58020000

08006dc8 <S2PI_CycleCsPin>:

status_t S2PI_CycleCsPin(s2pi_slave_t slave)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
    /* Check the driver status. */
    IRQ_LOCK();
 8006dd0:	f7ff fe00 	bl	80069d4 <IRQ_LOCK>
    status_t status = myS2PIHnd.Status;
 8006dd4:	4b14      	ldr	r3, [pc, #80]	@ (8006e28 <S2PI_CycleCsPin+0x60>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	60fb      	str	r3, [r7, #12]
    if ( status != STATUS_IDLE ) {
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d003      	beq.n	8006de8 <S2PI_CycleCsPin+0x20>
        IRQ_UNLOCK();
 8006de0:	f7ff fdd6 	bl	8006990 <IRQ_UNLOCK>
        return status;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	e01b      	b.n	8006e20 <S2PI_CycleCsPin+0x58>
    }

    myS2PIHnd.Status = STATUS_BUSY;
 8006de8:	4b0f      	ldr	r3, [pc, #60]	@ (8006e28 <S2PI_CycleCsPin+0x60>)
 8006dea:	2202      	movs	r2, #2
 8006dec:	601a      	str	r2, [r3, #0]
    IRQ_UNLOCK();
 8006dee:	f7ff fdcf 	bl	8006990 <IRQ_UNLOCK>

    status = STATUS_OK;
 8006df2:	2300      	movs	r3, #0
 8006df4:	60fb      	str	r3, [r7, #12]
    switch (slave)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d10a      	bne.n	8006e12 <S2PI_CycleCsPin+0x4a>
    {
        case S2PI_SLAVE1:
            HAL_GPIO_WritePin(S2PI_CS1_GPIO, S2PI_CS1_GPIO_PIN, GPIO_PIN_RESET);
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	2110      	movs	r1, #16
 8006e00:	480a      	ldr	r0, [pc, #40]	@ (8006e2c <S2PI_CycleCsPin+0x64>)
 8006e02:	f006 f835 	bl	800ce70 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(S2PI_CS1_GPIO, S2PI_CS1_GPIO_PIN, GPIO_PIN_SET);
 8006e06:	2201      	movs	r2, #1
 8006e08:	2110      	movs	r1, #16
 8006e0a:	4808      	ldr	r0, [pc, #32]	@ (8006e2c <S2PI_CycleCsPin+0x64>)
 8006e0c:	f006 f830 	bl	800ce70 <HAL_GPIO_WritePin>
            break;
 8006e10:	e002      	b.n	8006e18 <S2PI_CycleCsPin+0x50>
            HAL_GPIO_WritePin(S2PI_CS4_GPIO, S2PI_CS4_GPIO_PIN, GPIO_PIN_SET);
            break;
#endif /* S2PI_SLAVE_COUNT >= 4 */

        default:
            status = ERROR_S2PI_INVALID_SLAVE;
 8006e12:	f06f 0336 	mvn.w	r3, #54	@ 0x36
 8006e16:	60fb      	str	r3, [r7, #12]
    }

    myS2PIHnd.Status = STATUS_IDLE;
 8006e18:	4b03      	ldr	r3, [pc, #12]	@ (8006e28 <S2PI_CycleCsPin+0x60>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	601a      	str	r2, [r3, #0]

    return status;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	24000000 	.word	0x24000000
 8006e2c:	58020000 	.word	0x58020000

08006e30 <S2PI_TransferFrame>:
                            uint8_t const * txData,
                            uint8_t * rxData,
                            size_t frameSize,
                            s2pi_callback_t callback,
                            void * callbackData)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b086      	sub	sp, #24
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
 8006e3c:	603b      	str	r3, [r7, #0]
    /* Verify arguments. */
    if (!txData || frameSize == 0 || frameSize > UINT16_MAX) {
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d006      	beq.n	8006e52 <S2PI_TransferFrame+0x22>
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d003      	beq.n	8006e52 <S2PI_TransferFrame+0x22>
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e50:	d302      	bcc.n	8006e58 <S2PI_TransferFrame+0x28>
        return ERROR_INVALID_ARGUMENT;
 8006e52:	f06f 0304 	mvn.w	r3, #4
 8006e56:	e048      	b.n	8006eea <S2PI_TransferFrame+0xba>
    }

    /* Check the driver status, lock if idle. */
    IRQ_LOCK();
 8006e58:	f7ff fdbc 	bl	80069d4 <IRQ_LOCK>
    status_t status = myS2PIHnd.Status;
 8006e5c:	4b25      	ldr	r3, [pc, #148]	@ (8006ef4 <S2PI_TransferFrame+0xc4>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	613b      	str	r3, [r7, #16]
    if (status != STATUS_IDLE) {
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d003      	beq.n	8006e70 <S2PI_TransferFrame+0x40>
        IRQ_UNLOCK();
 8006e68:	f7ff fd92 	bl	8006990 <IRQ_UNLOCK>
        return status;
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	e03c      	b.n	8006eea <S2PI_TransferFrame+0xba>
    }

    myS2PIHnd.Status = STATUS_BUSY;
 8006e70:	4b20      	ldr	r3, [pc, #128]	@ (8006ef4 <S2PI_TransferFrame+0xc4>)
 8006e72:	2202      	movs	r2, #2
 8006e74:	601a      	str	r2, [r3, #0]
    IRQ_UNLOCK();
 8006e76:	f7ff fd8b 	bl	8006990 <IRQ_UNLOCK>

    /* Set the callback information */
    myS2PIHnd.Callback = callback;
 8006e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8006ef4 <S2PI_TransferFrame+0xc4>)
 8006e7c:	6a3b      	ldr	r3, [r7, #32]
 8006e7e:	6093      	str	r3, [r2, #8]
    myS2PIHnd.CallbackData = callbackData;
 8006e80:	4a1c      	ldr	r2, [pc, #112]	@ (8006ef4 <S2PI_TransferFrame+0xc4>)
 8006e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e84:	60d3      	str	r3, [r2, #12]

    /* Manually set the chip select (active low) */
    status = S2PI_SetSlaveInternal(slave);
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f7ff fdfe 	bl	8006a88 <S2PI_SetSlaveInternal>
 8006e8c:	6138      	str	r0, [r7, #16]
    if (status == STATUS_OK) {
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d108      	bne.n	8006ea6 <S2PI_TransferFrame+0x76>
        HAL_GPIO_WritePin(myS2PIHnd.GPIOs[S2PI_CS].Port, myS2PIHnd.GPIOs[S2PI_CS].Pin, GPIO_PIN_RESET);
 8006e94:	4b17      	ldr	r3, [pc, #92]	@ (8006ef4 <S2PI_TransferFrame+0xc4>)
 8006e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e98:	4a16      	ldr	r2, [pc, #88]	@ (8006ef4 <S2PI_TransferFrame+0xc4>)
 8006e9a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006e9c:	b291      	uxth	r1, r2
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f005 ffe5 	bl	800ce70 <HAL_GPIO_WritePin>
    }

    HAL_StatusTypeDef hal_error;

    /* Lock interrupts to prevent completion interrupt before setup is complete */
    IRQ_LOCK();
 8006ea6:	f7ff fd95 	bl	80069d4 <IRQ_LOCK>

    if (rxData) {
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d009      	beq.n	8006ec4 <S2PI_TransferFrame+0x94>
        hal_error = HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t *) txData, rxData, (uint16_t) frameSize);
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	68b9      	ldr	r1, [r7, #8]
 8006eb8:	480f      	ldr	r0, [pc, #60]	@ (8006ef8 <S2PI_TransferFrame+0xc8>)
 8006eba:	f008 ffd5 	bl	800fe68 <HAL_SPI_TransmitReceive_DMA>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	75fb      	strb	r3, [r7, #23]
 8006ec2:	e008      	b.n	8006ed6 <S2PI_TransferFrame+0xa6>
    } else {
        hal_error = HAL_SPI_Transmit_DMA(&hspi1, (uint8_t *) txData, (uint16_t) frameSize);
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	461a      	mov	r2, r3
 8006eca:	68b9      	ldr	r1, [r7, #8]
 8006ecc:	480a      	ldr	r0, [pc, #40]	@ (8006ef8 <S2PI_TransferFrame+0xc8>)
 8006ece:	f008 fe89 	bl	800fbe4 <HAL_SPI_Transmit_DMA>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	75fb      	strb	r3, [r7, #23]
    }

    IRQ_UNLOCK();
 8006ed6:	f7ff fd5b 	bl	8006990 <IRQ_UNLOCK>

    if (hal_error != HAL_OK) {
 8006eda:	7dfb      	ldrb	r3, [r7, #23]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d003      	beq.n	8006ee8 <S2PI_TransferFrame+0xb8>
        //return ERROR_FAIL;
        return -1000-hal_error;
 8006ee0:	7dfa      	ldrb	r2, [r7, #23]
 8006ee2:	4b06      	ldr	r3, [pc, #24]	@ (8006efc <S2PI_TransferFrame+0xcc>)
 8006ee4:	1a9b      	subs	r3, r3, r2
 8006ee6:	e000      	b.n	8006eea <S2PI_TransferFrame+0xba>
    }

    return status;
 8006ee8:	693b      	ldr	r3, [r7, #16]
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3718      	adds	r7, #24
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	24000000 	.word	0x24000000
 8006ef8:	240032f0 	.word	0x240032f0
 8006efc:	fffffc18 	.word	0xfffffc18

08006f00 <S2PI_CompleteTransfer>:
 *          for the next transfer, if required.
 * @param   status The status to be provided to the callback funcition.
 * @return  Returns the status received from the callback function
 ****************************************************************************/
static inline status_t S2PI_CompleteTransfer(status_t status)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
    myS2PIHnd.Status = STATUS_IDLE;
 8006f08:	4b10      	ldr	r3, [pc, #64]	@ (8006f4c <S2PI_CompleteTransfer+0x4c>)
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	601a      	str	r2, [r3, #0]

    /* Deactivate CS (set high), as we use GPIO pin */
    HAL_GPIO_WritePin(myS2PIHnd.GPIOs[S2PI_CS].Port, myS2PIHnd.GPIOs[S2PI_CS].Pin, GPIO_PIN_SET);
 8006f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8006f4c <S2PI_CompleteTransfer+0x4c>)
 8006f10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f12:	4a0e      	ldr	r2, [pc, #56]	@ (8006f4c <S2PI_CompleteTransfer+0x4c>)
 8006f14:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006f16:	b291      	uxth	r1, r2
 8006f18:	2201      	movs	r2, #1
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f005 ffa8 	bl	800ce70 <HAL_GPIO_WritePin>

    /* Invoke callback if there is one */
    if (myS2PIHnd.Callback != 0) {
 8006f20:	4b0a      	ldr	r3, [pc, #40]	@ (8006f4c <S2PI_CompleteTransfer+0x4c>)
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00c      	beq.n	8006f42 <S2PI_CompleteTransfer+0x42>
        s2pi_callback_t callback = myS2PIHnd.Callback;
 8006f28:	4b08      	ldr	r3, [pc, #32]	@ (8006f4c <S2PI_CompleteTransfer+0x4c>)
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	60fb      	str	r3, [r7, #12]
        myS2PIHnd.Callback = 0;
 8006f2e:	4b07      	ldr	r3, [pc, #28]	@ (8006f4c <S2PI_CompleteTransfer+0x4c>)
 8006f30:	2200      	movs	r2, #0
 8006f32:	609a      	str	r2, [r3, #8]
        status = callback(status, myS2PIHnd.CallbackData);
 8006f34:	4b05      	ldr	r3, [pc, #20]	@ (8006f4c <S2PI_CompleteTransfer+0x4c>)
 8006f36:	68da      	ldr	r2, [r3, #12]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	4611      	mov	r1, r2
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	4798      	blx	r3
 8006f40:	6078      	str	r0, [r7, #4]
    }

    return status;
 8006f42:	687b      	ldr	r3, [r7, #4]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	24000000 	.word	0x24000000

08006f50 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *         the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
    S2PI_CompleteTransfer(STATUS_OK);
 8006f58:	2000      	movs	r0, #0
 8006f5a:	f7ff ffd1 	bl	8006f00 <S2PI_CompleteTransfer>
}
 8006f5e:	bf00      	nop
 8006f60:	3708      	adds	r7, #8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <SPI_DMATransmitReceiveCpltDelayed>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
void SPI_DMATransmitReceiveCpltDelayed(DMA_HandleTypeDef *hdma)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b084      	sub	sp, #16
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
    SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f72:	60fb      	str	r3, [r7, #12]
    HAL_SPI_TxCpltCallback(hspi);
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f7ff ffeb 	bl	8006f50 <HAL_SPI_TxCpltCallback>
}
 8006f7a:	bf00      	nop
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
	...

08006f84 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
    /* The problem we have here is that the next SPI transfer is set up in the interrupt.
     * The default implementation always connects this callback with the RX DMA complete interrupt.
     * However, the order of TX and RX interrupts is not specified.
     * If we perform the callback before both interrupts are done, the next SPI transfer will fail. */
    if ( hspi->hdmatx->Lock == HAL_UNLOCKED ) { /* TX Interrupt already received */
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006f90:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d103      	bne.n	8006fa0 <HAL_SPI_TxRxCpltCallback+0x1c>
        HAL_SPI_TxCpltCallback(hspi);
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f7ff ffd9 	bl	8006f50 <HAL_SPI_TxCpltCallback>
    } else { /* There is still the TX DMA Interrupt we have to wait for */
        hspi->hdmatx->XferCpltCallback = SPI_DMATransmitReceiveCpltDelayed;
    }
}
 8006f9e:	e003      	b.n	8006fa8 <HAL_SPI_TxRxCpltCallback+0x24>
        hspi->hdmatx->XferCpltCallback = SPI_DMATransmitReceiveCpltDelayed;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006fa4:	4a02      	ldr	r2, [pc, #8]	@ (8006fb0 <HAL_SPI_TxRxCpltCallback+0x2c>)
 8006fa6:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8006fa8:	bf00      	nop
 8006faa:	3708      	adds	r7, #8
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	08006f67 	.word	0x08006f67

08006fb4 <S2PI_TryGetMutex>:

status_t S2PI_TryGetMutex(s2pi_slave_t slave)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
    (void) slave; // not used in this implementation

    status_t retVal;

    IRQ_LOCK();
 8006fbc:	f7ff fd0a 	bl	80069d4 <IRQ_LOCK>
    if (!myS2PIHnd.SpiMutexBlocked) {
 8006fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8006ff4 <S2PI_TryGetMutex+0x40>)
 8006fc2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	f083 0301 	eor.w	r3, r3, #1
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d006      	beq.n	8006fe0 <S2PI_TryGetMutex+0x2c>
        myS2PIHnd.SpiMutexBlocked = true;
 8006fd2:	4b08      	ldr	r3, [pc, #32]	@ (8006ff4 <S2PI_TryGetMutex+0x40>)
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        retVal = STATUS_OK;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	60fb      	str	r3, [r7, #12]
 8006fde:	e001      	b.n	8006fe4 <S2PI_TryGetMutex+0x30>
    } else {
        retVal = STATUS_BUSY;
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	60fb      	str	r3, [r7, #12]
    }
    IRQ_UNLOCK();
 8006fe4:	f7ff fcd4 	bl	8006990 <IRQ_UNLOCK>

    return retVal;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	24000000 	.word	0x24000000

08006ff8 <S2PI_ReleaseMutex>:

void S2PI_ReleaseMutex(s2pi_slave_t slave)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
    (void) slave; // not used in this implementation

    myS2PIHnd.SpiMutexBlocked = false;
 8007000:	4b04      	ldr	r3, [pc, #16]	@ (8007014 <S2PI_ReleaseMutex+0x1c>)
 8007002:	2200      	movs	r2, #0
 8007004:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr
 8007014:	24000000 	.word	0x24000000

08007018 <S2PI_Abort>:

status_t S2PI_Abort(s2pi_slave_t slave)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
    (void) slave; // not used in this implementation

    status_t status = myS2PIHnd.Status;
 8007020:	4b10      	ldr	r3, [pc, #64]	@ (8007064 <S2PI_Abort+0x4c>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	60fb      	str	r3, [r7, #12]

    /* Check if something is ongoing. */
    if(status == STATUS_IDLE) {
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d101      	bne.n	8007030 <S2PI_Abort+0x18>
        return STATUS_OK;
 800702c:	2300      	movs	r3, #0
 800702e:	e014      	b.n	800705a <S2PI_Abort+0x42>
    }

    /* Abort SPI transfer. */
    if(status == STATUS_BUSY) {
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2b02      	cmp	r3, #2
 8007034:	d105      	bne.n	8007042 <S2PI_Abort+0x2a>
        HAL_SPI_Abort(&hspi1);
 8007036:	480c      	ldr	r0, [pc, #48]	@ (8007068 <S2PI_Abort+0x50>)
 8007038:	f009 f8bc 	bl	80101b4 <HAL_SPI_Abort>
        myS2PIHnd.Status = STATUS_IDLE;
 800703c:	4b09      	ldr	r3, [pc, #36]	@ (8007064 <S2PI_Abort+0x4c>)
 800703e:	2200      	movs	r2, #0
 8007040:	601a      	str	r2, [r3, #0]
    }

    status = S2PI_CompleteTransfer(ERROR_ABORTED);
 8007042:	f06f 0001 	mvn.w	r0, #1
 8007046:	f7ff ff5b 	bl	8006f00 <S2PI_CompleteTransfer>
 800704a:	60f8      	str	r0, [r7, #12]
    if(status == ERROR_ABORTED) status = STATUS_OK;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f113 0f02 	cmn.w	r3, #2
 8007052:	d101      	bne.n	8007058 <S2PI_Abort+0x40>
 8007054:	2300      	movs	r3, #0
 8007056:	60fb      	str	r3, [r7, #12]

    return STATUS_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	24000000 	.word	0x24000000
 8007068:	240032f0 	.word	0x240032f0

0800706c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
    S2PI_CompleteTransfer(ERROR_FAIL);
 8007074:	f04f 30ff 	mov.w	r0, #4294967295
 8007078:	f7ff ff42 	bl	8006f00 <S2PI_CompleteTransfer>
}
 800707c:	bf00      	nop
 800707e:	3708      	adds	r7, #8
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <S2PI_SetIrqCallback>:

status_t S2PI_SetIrqCallback(s2pi_slave_t slave,
                             s2pi_irq_callback_t callback,
                             void * callbackData)
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
    if (slave > S2PI_SLAVE_COUNT) {
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2b01      	cmp	r3, #1
 8007094:	dd02      	ble.n	800709c <S2PI_SetIrqCallback+0x18>
        return ERROR_S2PI_INVALID_SLAVE;
 8007096:	f06f 0336 	mvn.w	r3, #54	@ 0x36
 800709a:	e00c      	b.n	80070b6 <S2PI_SetIrqCallback+0x32>
    }

    myS2PIHnd.IrqCallback[slave] = callback;
 800709c:	4909      	ldr	r1, [pc, #36]	@ (80070c4 <S2PI_SetIrqCallback+0x40>)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	3304      	adds	r3, #4
 80070a2:	68ba      	ldr	r2, [r7, #8]
 80070a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    myS2PIHnd.IrqCallbackData[slave] = callbackData;
 80070a8:	4906      	ldr	r1, [pc, #24]	@ (80070c4 <S2PI_SetIrqCallback+0x40>)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	3306      	adds	r3, #6
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return STATUS_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3714      	adds	r7, #20
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	24000000 	.word	0x24000000

080070c8 <S2PI_ReadIrqPin>:

uint32_t S2PI_ReadIrqPin(s2pi_slave_t slave)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
    /* NOTE: this must return 0 if an interrupt is pending, i.e. if
     * the interrupt is pending AND the pin is in low state. */
    switch (slave)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d111      	bne.n	80070fa <S2PI_ReadIrqPin+0x32>
    {
        case S2PI_SLAVE1:
            return !(HAL_NVIC_GetPendingIRQ(S2PI_IRQ1_EXTI)
 80070d6:	2028      	movs	r0, #40	@ 0x28
 80070d8:	f002 feb6 	bl	8009e48 <HAL_NVIC_GetPendingIRQ>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d007      	beq.n	80070f2 <S2PI_ReadIrqPin+0x2a>
                     && !HAL_GPIO_ReadPin(S2PI_IRQ1_GPIO, S2PI_IRQ1_GPIO_PIN));
 80070e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80070e6:	4807      	ldr	r0, [pc, #28]	@ (8007104 <S2PI_ReadIrqPin+0x3c>)
 80070e8:	f005 feaa 	bl	800ce40 <HAL_GPIO_ReadPin>
 80070ec:	4603      	mov	r3, r0
            return !(HAL_NVIC_GetPendingIRQ(S2PI_IRQ1_EXTI)
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d001      	beq.n	80070f6 <S2PI_ReadIrqPin+0x2e>
 80070f2:	2301      	movs	r3, #1
 80070f4:	e002      	b.n	80070fc <S2PI_ReadIrqPin+0x34>
 80070f6:	2300      	movs	r3, #0
 80070f8:	e000      	b.n	80070fc <S2PI_ReadIrqPin+0x34>
            return !(HAL_NVIC_GetPendingIRQ(S2PI_IRQ4_EXTI)
                     && !HAL_GPIO_ReadPin(S2PI_IRQ4_GPIO, S2PI_IRQ4_GPIO_PIN));
#endif /* S2PI_SLAVE_COUNT >= 4 */

        default:
            return 1U;
 80070fa:	2301      	movs	r3, #1
    }
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	58020400 	.word	0x58020400

08007108 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	4603      	mov	r3, r0
 8007110:	80fb      	strh	r3, [r7, #6]
    for (uint_fast8_t slaveID = 1; slaveID <= S2PI_SLAVE_COUNT; slaveID++)
 8007112:	2301      	movs	r3, #1
 8007114:	617b      	str	r3, [r7, #20]
 8007116:	e01d      	b.n	8007154 <HAL_GPIO_EXTI_Callback+0x4c>
    {
        if (GPIO_Pin == myS2PIHnd.SlaveIrqMapping[slaveID])
 8007118:	88fa      	ldrh	r2, [r7, #6]
 800711a:	4912      	ldr	r1, [pc, #72]	@ (8007164 <HAL_GPIO_EXTI_Callback+0x5c>)
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	3308      	adds	r3, #8
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	440b      	add	r3, r1
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	429a      	cmp	r2, r3
 8007128:	d111      	bne.n	800714e <HAL_GPIO_EXTI_Callback+0x46>
        {
            /* Interrupt for slaveID has been fired */
            s2pi_irq_callback_t cb = myS2PIHnd.IrqCallback[slaveID];
 800712a:	4a0e      	ldr	r2, [pc, #56]	@ (8007164 <HAL_GPIO_EXTI_Callback+0x5c>)
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	3304      	adds	r3, #4
 8007130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007134:	613b      	str	r3, [r7, #16]
            void * cbParam = myS2PIHnd.IrqCallbackData[slaveID];
 8007136:	4a0b      	ldr	r2, [pc, #44]	@ (8007164 <HAL_GPIO_EXTI_Callback+0x5c>)
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	3306      	adds	r3, #6
 800713c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007140:	60fb      	str	r3, [r7, #12]

            if (cb) {
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d002      	beq.n	800714e <HAL_GPIO_EXTI_Callback+0x46>
                /* Invoke corresponding callback */
                cb(cbParam);
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	4798      	blx	r3
    for (uint_fast8_t slaveID = 1; slaveID <= S2PI_SLAVE_COUNT; slaveID++)
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	3301      	adds	r3, #1
 8007152:	617b      	str	r3, [r7, #20]
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d9de      	bls.n	8007118 <HAL_GPIO_EXTI_Callback+0x10>
            }
        }
    }
}
 800715a:	bf00      	nop
 800715c:	bf00      	nop
 800715e:	3718      	adds	r7, #24
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	24000000 	.word	0x24000000

08007168 <Timer_Init>:
/*!***************************************************************************
 * @brief   Initializes the timer hardware.
 * @return  -
 *****************************************************************************/
void Timer_Init(void)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	af00      	add	r7, sp, #0
    /* Start the timers relevant for the LTC */
    HAL_TIM_Base_Start(LTC_TIMER);
 800716c:	4808      	ldr	r0, [pc, #32]	@ (8007190 <Timer_Init+0x28>)
 800716e:	f009 fd1b 	bl	8010ba8 <HAL_TIM_Base_Start>

    PIT_TIMER_FREEZE_ON_DEBUG();
 8007172:	4b08      	ldr	r3, [pc, #32]	@ (8007194 <Timer_Init+0x2c>)
 8007174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007176:	4a07      	ldr	r2, [pc, #28]	@ (8007194 <Timer_Init+0x2c>)
 8007178:	f043 0310 	orr.w	r3, r3, #16
 800717c:	63d3      	str	r3, [r2, #60]	@ 0x3c
	LTC_TIMER_FREEZE_ON_DEBUG();
 800717e:	4b05      	ldr	r3, [pc, #20]	@ (8007194 <Timer_Init+0x2c>)
 8007180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007182:	4a04      	ldr	r2, [pc, #16]	@ (8007194 <Timer_Init+0x2c>)
 8007184:	f043 0308 	orr.w	r3, r3, #8
 8007188:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800718a:	bf00      	nop
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	2400346c 	.word	0x2400346c
 8007194:	5c001000 	.word	0x5c001000

08007198 <Timer_GetCounterValue>:
 * @param   lct A pointer to the low counter value bits representing current
 *                time in microseconds. Range: 0, .., 999999 µsec
 * @return  -
 *****************************************************************************/
void Timer_GetCounterValue(uint32_t * hct, uint32_t * lct)
{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
//    }
//    while (*lct > __HAL_TIM_GET_COUNTER(&htim2));


	// Shpegun60 optimization on one timer warning!!!!  it wraps after 4294.967296 seconds,
	const uint32_t cnt = __HAL_TIM_GET_COUNTER(LTC_TIMER);
 80071a2:	4b0e      	ldr	r3, [pc, #56]	@ (80071dc <Timer_GetCounterValue+0x44>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a8:	60fb      	str	r3, [r7, #12]
	*lct = cnt % 1000000U;
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	4b0c      	ldr	r3, [pc, #48]	@ (80071e0 <Timer_GetCounterValue+0x48>)
 80071ae:	fba3 1302 	umull	r1, r3, r3, r2
 80071b2:	0c9b      	lsrs	r3, r3, #18
 80071b4:	490b      	ldr	r1, [pc, #44]	@ (80071e4 <Timer_GetCounterValue+0x4c>)
 80071b6:	fb01 f303 	mul.w	r3, r1, r3
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	683a      	ldr	r2, [r7, #0]
 80071be:	6013      	str	r3, [r2, #0]
	*hct = cnt / 1000000U;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	4a07      	ldr	r2, [pc, #28]	@ (80071e0 <Timer_GetCounterValue+0x48>)
 80071c4:	fba2 2303 	umull	r2, r3, r2, r3
 80071c8:	0c9a      	lsrs	r2, r3, #18
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	601a      	str	r2, [r3, #0]
}
 80071ce:	bf00      	nop
 80071d0:	3714      	adds	r7, #20
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	2400346c 	.word	0x2400346c
 80071e0:	431bde83 	.word	0x431bde83
 80071e4:	000f4240 	.word	0x000f4240

080071e8 <Timer_SetInterval>:
 * @param   param An abstract parameter to be passed to the callback. This is
 *                  also the identifier of the given interval.
 * @return  Returns the \link #status_t status\endlink (#STATUS_OK on success).
 *****************************************************************************/
status_t Timer_SetInterval(uint32_t dt_microseconds, void * param)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
    assert(dt_microseconds == 0 || dt_microseconds > 100);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d008      	beq.n	800720a <Timer_SetInterval+0x22>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2b64      	cmp	r3, #100	@ 0x64
 80071fc:	d805      	bhi.n	800720a <Timer_SetInterval+0x22>
 80071fe:	4b2d      	ldr	r3, [pc, #180]	@ (80072b4 <Timer_SetInterval+0xcc>)
 8007200:	4a2d      	ldr	r2, [pc, #180]	@ (80072b8 <Timer_SetInterval+0xd0>)
 8007202:	2180      	movs	r1, #128	@ 0x80
 8007204:	482d      	ldr	r0, [pc, #180]	@ (80072bc <Timer_SetInterval+0xd4>)
 8007206:	f000 fb4f 	bl	80078a8 <__assert_func>

    /* Disable interrupt and timer */
    callback_param_ = 0;
 800720a:	4b2d      	ldr	r3, [pc, #180]	@ (80072c0 <Timer_SetInterval+0xd8>)
 800720c:	2200      	movs	r2, #0
 800720e:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Stop_IT(PIT_TIMER);
 8007210:	482c      	ldr	r0, [pc, #176]	@ (80072c4 <Timer_SetInterval+0xdc>)
 8007212:	f009 fdcd 	bl	8010db0 <HAL_TIM_Base_Stop_IT>
    __HAL_TIM_CLEAR_IT(PIT_TIMER, TIM_IT_UPDATE);
 8007216:	4b2b      	ldr	r3, [pc, #172]	@ (80072c4 <Timer_SetInterval+0xdc>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f06f 0201 	mvn.w	r2, #1
 800721e:	611a      	str	r2, [r3, #16]

    if (dt_microseconds) {
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d041      	beq.n	80072aa <Timer_SetInterval+0xc2>
        /* Determine the prescaler and counter period values such that
         * the period fits into 16-bits. */
        uint32_t prescaler = (PIT_TIMER_BUS_CLK() / 1000000U);
 8007226:	f006 fdcb 	bl	800ddc0 <HAL_RCC_GetPCLK1Freq>
 800722a:	4603      	mov	r3, r0
 800722c:	005b      	lsls	r3, r3, #1
 800722e:	4a26      	ldr	r2, [pc, #152]	@ (80072c8 <Timer_SetInterval+0xe0>)
 8007230:	fba2 2303 	umull	r2, r3, r2, r3
 8007234:	0c9b      	lsrs	r3, r3, #18
 8007236:	60fb      	str	r3, [r7, #12]
        uint32_t period = dt_microseconds;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	60bb      	str	r3, [r7, #8]

        while (period > 0xFFFF) {
 800723c:	e005      	b.n	800724a <Timer_SetInterval+0x62>
            period >>= 1U;
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	085b      	lsrs	r3, r3, #1
 8007242:	60bb      	str	r3, [r7, #8]
            prescaler <<= 1U;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	005b      	lsls	r3, r3, #1
 8007248:	60fb      	str	r3, [r7, #12]
        while (period > 0xFFFF) {
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007250:	d2f5      	bcs.n	800723e <Timer_SetInterval+0x56>
        }

        assert(prescaler < 0x10000U);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007258:	d305      	bcc.n	8007266 <Timer_SetInterval+0x7e>
 800725a:	4b1c      	ldr	r3, [pc, #112]	@ (80072cc <Timer_SetInterval+0xe4>)
 800725c:	4a16      	ldr	r2, [pc, #88]	@ (80072b8 <Timer_SetInterval+0xd0>)
 800725e:	2192      	movs	r1, #146	@ 0x92
 8007260:	4816      	ldr	r0, [pc, #88]	@ (80072bc <Timer_SetInterval+0xd4>)
 8007262:	f000 fb21 	bl	80078a8 <__assert_func>

        /* Set prescaler and period values and reset counter. */
        __HAL_TIM_SET_PRESCALER(PIT_TIMER, prescaler - 1);
 8007266:	4b17      	ldr	r3, [pc, #92]	@ (80072c4 <Timer_SetInterval+0xdc>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	3a01      	subs	r2, #1
 800726e:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(PIT_TIMER, period - 1);
 8007270:	4b14      	ldr	r3, [pc, #80]	@ (80072c4 <Timer_SetInterval+0xdc>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	3a01      	subs	r2, #1
 8007278:	62da      	str	r2, [r3, #44]	@ 0x2c
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	3b01      	subs	r3, #1
 800727e:	4a11      	ldr	r2, [pc, #68]	@ (80072c4 <Timer_SetInterval+0xdc>)
 8007280:	60d3      	str	r3, [r2, #12]
        __HAL_TIM_SET_COUNTER(PIT_TIMER, period - 1);
 8007282:	4b10      	ldr	r3, [pc, #64]	@ (80072c4 <Timer_SetInterval+0xdc>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	3a01      	subs	r2, #1
 800728a:	625a      	str	r2, [r3, #36]	@ 0x24
        /* The following generates an update event that triggers and update
         * of the auto-reload into the internal shadow registers. This is
         * required to update the timer configuration before the next update
         * event (i.e. under/overflow). Unfortunately this also generates
         * and immediate interrupt which is cleared in the next statement. */
        HAL_TIM_GenerateEvent(PIT_TIMER, TIM_EVENTSOURCE_UPDATE);
 800728c:	2101      	movs	r1, #1
 800728e:	480d      	ldr	r0, [pc, #52]	@ (80072c4 <Timer_SetInterval+0xdc>)
 8007290:	f009 fec4 	bl	801101c <HAL_TIM_GenerateEvent>
        __HAL_TIM_CLEAR_IT(PIT_TIMER, TIM_IT_UPDATE); // clear interrupt
 8007294:	4b0b      	ldr	r3, [pc, #44]	@ (80072c4 <Timer_SetInterval+0xdc>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f06f 0201 	mvn.w	r2, #1
 800729c:	611a      	str	r2, [r3, #16]

        /* Enable interrupt and timer */
        callback_param_ = param;
 800729e:	4a08      	ldr	r2, [pc, #32]	@ (80072c0 <Timer_SetInterval+0xd8>)
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	6013      	str	r3, [r2, #0]
        HAL_TIM_Base_Start_IT(PIT_TIMER);
 80072a4:	4807      	ldr	r0, [pc, #28]	@ (80072c4 <Timer_SetInterval+0xdc>)
 80072a6:	f009 fcfd 	bl	8010ca4 <HAL_TIM_Base_Start_IT>
    }

    return STATUS_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	0802da3c 	.word	0x0802da3c
 80072b8:	0802e254 	.word	0x0802e254
 80072bc:	0802da6c 	.word	0x0802da6c
 80072c0:	240031cc 	.word	0x240031cc
 80072c4:	240034b8 	.word	0x240034b8
 80072c8:	431bde83 	.word	0x431bde83
 80072cc:	0802da88 	.word	0x0802da88

080072d0 <Timer_SetCallback>:
 *          Passing a zero-pointer removes and disables the callback.
 * @param   f The timer callback function.
 * @return  Returns the \link #status_t status\endlink (#STATUS_OK on success).
 *****************************************************************************/
status_t Timer_SetCallback(timer_cb_t f)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
    timer_callback_ = f;
 80072d8:	4a04      	ldr	r2, [pc, #16]	@ (80072ec <Timer_SetCallback+0x1c>)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6013      	str	r3, [r2, #0]
    return STATUS_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr
 80072ec:	240031d0 	.word	0x240031d0

080072f0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
    /* Trigger callback if the interrupt belongs to TIM4 and there is a callback */
    if ((htim == PIT_TIMER) && timer_callback_)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a08      	ldr	r2, [pc, #32]	@ (800731c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d109      	bne.n	8007314 <HAL_TIM_PeriodElapsedCallback+0x24>
 8007300:	4b07      	ldr	r3, [pc, #28]	@ (8007320 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d005      	beq.n	8007314 <HAL_TIM_PeriodElapsedCallback+0x24>
    {
        timer_callback_(callback_param_);
 8007308:	4b05      	ldr	r3, [pc, #20]	@ (8007320 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a05      	ldr	r2, [pc, #20]	@ (8007324 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800730e:	6812      	ldr	r2, [r2, #0]
 8007310:	4610      	mov	r0, r2
 8007312:	4798      	blx	r3
    }
}
 8007314:	bf00      	nop
 8007316:	3708      	adds	r7, #8
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	240034b8 	.word	0x240034b8
 8007320:	240031d0 	.word	0x240031d0
 8007324:	240031cc 	.word	0x240031cc

08007328 <UART_Init>:
 *          (UART or LPSCI) bus and DMA module
 * @param   -
 * @return  Returns the \link #status_t status\endlink (#STATUS_OK on success).
 *****************************************************************************/
status_t UART_Init(void)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(ARGUS_UART, rxBuffer1, RX_BUFFER_SIZE);
 800732c:	2280      	movs	r2, #128	@ 0x80
 800732e:	4905      	ldr	r1, [pc, #20]	@ (8007344 <UART_Init+0x1c>)
 8007330:	4805      	ldr	r0, [pc, #20]	@ (8007348 <UART_Init+0x20>)
 8007332:	f00a fa95 	bl	8011860 <HAL_UART_Receive_DMA>
	UART_SetRxCallback(0);
 8007336:	2000      	movs	r0, #0
 8007338:	f000 f8fe 	bl	8007538 <UART_SetRxCallback>

	return STATUS_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	240031e8 	.word	0x240031e8
 8007348:	24003504 	.word	0x24003504

0800734c <UART_GetBaudRate>:
#if !NO_DIRECT_UART_PRINT
#define UART_Print print
#endif

uart_baud_rates_t UART_GetBaudRate(void)
{
 800734c:	b480      	push	{r7}
 800734e:	af00      	add	r7, sp, #0
	return ARGUS_UART->Init.BaudRate;
 8007350:	4b03      	ldr	r3, [pc, #12]	@ (8007360 <UART_GetBaudRate+0x14>)
 8007352:	685b      	ldr	r3, [r3, #4]
}
 8007354:	4618      	mov	r0, r3
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	24003504 	.word	0x24003504

08007364 <UART_CheckBaudRate>:
status_t UART_CheckBaudRate(uart_baud_rates_t baudRate)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
	if (!IS_UART_BAUDRATE(baudRate)) {
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a14      	ldr	r2, [pc, #80]	@ (80073c0 <UART_CheckBaudRate+0x5c>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d902      	bls.n	800737a <UART_CheckBaudRate+0x16>
		return ERROR_UART_BAUDRATE_NOT_SUPPORTED;
 8007374:	f06f 0346 	mvn.w	r3, #70	@ 0x46
 8007378:	e01b      	b.n	80073b2 <UART_CheckBaudRate+0x4e>
	}

	switch (baudRate)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a11      	ldr	r2, [pc, #68]	@ (80073c4 <UART_CheckBaudRate+0x60>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d013      	beq.n	80073aa <UART_CheckBaudRate+0x46>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a0f      	ldr	r2, [pc, #60]	@ (80073c4 <UART_CheckBaudRate+0x60>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d811      	bhi.n	80073ae <UART_CheckBaudRate+0x4a>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a0e      	ldr	r2, [pc, #56]	@ (80073c8 <UART_CheckBaudRate+0x64>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d00b      	beq.n	80073aa <UART_CheckBaudRate+0x46>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a0c      	ldr	r2, [pc, #48]	@ (80073c8 <UART_CheckBaudRate+0x64>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d809      	bhi.n	80073ae <UART_CheckBaudRate+0x4a>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 80073a0:	d003      	beq.n	80073aa <UART_CheckBaudRate+0x46>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a09      	ldr	r2, [pc, #36]	@ (80073cc <UART_CheckBaudRate+0x68>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d101      	bne.n	80073ae <UART_CheckBaudRate+0x4a>
	{
	case UART_115200_BPS:
	case UART_500000_BPS:
	case UART_1000000_BPS:
	case UART_2000000_BPS:
		return STATUS_OK;
 80073aa:	2300      	movs	r3, #0
 80073ac:	e001      	b.n	80073b2 <UART_CheckBaudRate+0x4e>

	case UART_INVALID_BPS:
	default:
		return ERROR_UART_BAUDRATE_NOT_SUPPORTED;
 80073ae:	f06f 0346 	mvn.w	r3, #70	@ 0x46
	}
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	370c      	adds	r7, #12
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	00bebc20 	.word	0x00bebc20
 80073c4:	001e8480 	.word	0x001e8480
 80073c8:	000f4240 	.word	0x000f4240
 80073cc:	0007a120 	.word	0x0007a120

080073d0 <UART_SetBaudRate>:
status_t UART_SetBaudRate(uart_baud_rates_t baudRate)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
	status_t status = UART_CheckBaudRate(baudRate);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f7ff ffc3 	bl	8007364 <UART_CheckBaudRate>
 80073de:	60f8      	str	r0, [r7, #12]
	if (status != STATUS_OK) return status;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d001      	beq.n	80073ea <UART_SetBaudRate+0x1a>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	e022      	b.n	8007430 <UART_SetBaudRate+0x60>

	/* Check module state; TX line must be idle to rest baud rate... */
	IRQ_LOCK();
 80073ea:	f7ff faf3 	bl	80069d4 <IRQ_LOCK>
	if (isTxBusy_)
 80073ee:	4b12      	ldr	r3, [pc, #72]	@ (8007438 <UART_SetBaudRate+0x68>)
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d003      	beq.n	8007400 <UART_SetBaudRate+0x30>
	{
		IRQ_UNLOCK();
 80073f8:	f7ff faca 	bl	8006990 <IRQ_UNLOCK>
		return STATUS_BUSY;
 80073fc:	2302      	movs	r3, #2
 80073fe:	e017      	b.n	8007430 <UART_SetBaudRate+0x60>
	}
	isTxBusy_ = true;
 8007400:	4b0d      	ldr	r3, [pc, #52]	@ (8007438 <UART_SetBaudRate+0x68>)
 8007402:	2201      	movs	r2, #1
 8007404:	701a      	strb	r2, [r3, #0]
	IRQ_UNLOCK();
 8007406:	f7ff fac3 	bl	8006990 <IRQ_UNLOCK>

	/* remove callback and disable RX line. */
	uart_rx_callback_t callback = rxCallback_;
 800740a:	4b0c      	ldr	r3, [pc, #48]	@ (800743c <UART_SetBaudRate+0x6c>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	60bb      	str	r3, [r7, #8]
	UART_SetRxCallback(0);
 8007410:	2000      	movs	r0, #0
 8007412:	f000 f891 	bl	8007538 <UART_SetRxCallback>

	/* Obtain correct baud rate setting value. */
	ARGUS_UART->Init.BaudRate = baudRate;
 8007416:	4a0a      	ldr	r2, [pc, #40]	@ (8007440 <UART_SetBaudRate+0x70>)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6053      	str	r3, [r2, #4]
	HAL_UART_Init(ARGUS_UART);
 800741c:	4808      	ldr	r0, [pc, #32]	@ (8007440 <UART_SetBaudRate+0x70>)
 800741e:	f00a f94f 	bl	80116c0 <HAL_UART_Init>

	/* Add callback and enable RX line again. */
	UART_SetRxCallback(callback);
 8007422:	68b8      	ldr	r0, [r7, #8]
 8007424:	f000 f888 	bl	8007538 <UART_SetRxCallback>

	isTxBusy_ = false;
 8007428:	4b03      	ldr	r3, [pc, #12]	@ (8007438 <UART_SetBaudRate+0x68>)
 800742a:	2200      	movs	r2, #0
 800742c:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	240031d4 	.word	0x240031d4
 800743c:	240031e0 	.word	0x240031e0
 8007440:	24003504 	.word	0x24003504

08007444 <UART_IsTxBusy>:

bool UART_IsTxBusy(void)
{
 8007444:	b480      	push	{r7}
 8007446:	af00      	add	r7, sp, #0
	return isTxBusy_;
 8007448:	4b03      	ldr	r3, [pc, #12]	@ (8007458 <UART_IsTxBusy+0x14>)
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	b2db      	uxtb	r3, r3
}
 800744e:	4618      	mov	r0, r3
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr
 8007458:	240031d4 	.word	0x240031d4

0800745c <UART_SendBuffer>:
 *           - #STATUS_BUSY on Tx line busy
 *           - #ERROR_NOT_INITIALIZED
 *           - #ERROR_INVALID_ARGUMENT
 *****************************************************************************/
status_t UART_SendBuffer(uint8_t const *txBuff, size_t txSize, uart_tx_callback_t f, void *state)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
 8007468:	603b      	str	r3, [r7, #0]
	/* Verify arguments. */
	if (!txBuff || txSize == 0)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d002      	beq.n	8007476 <UART_SendBuffer+0x1a>
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d102      	bne.n	800747c <UART_SendBuffer+0x20>
		return ERROR_INVALID_ARGUMENT;
 8007476:	f06f 0304 	mvn.w	r3, #4
 800747a:	e026      	b.n	80074ca <UART_SendBuffer+0x6e>

	/* Lock interrupts to prevent completion interrupt before setup is complete */
	IRQ_LOCK();
 800747c:	f7ff faaa 	bl	80069d4 <IRQ_LOCK>
	if (isTxBusy_)
 8007480:	4b14      	ldr	r3, [pc, #80]	@ (80074d4 <UART_SendBuffer+0x78>)
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <UART_SendBuffer+0x36>
	{
		IRQ_UNLOCK();
 800748a:	f7ff fa81 	bl	8006990 <IRQ_UNLOCK>
		return STATUS_BUSY;
 800748e:	2302      	movs	r3, #2
 8007490:	e01b      	b.n	80074ca <UART_SendBuffer+0x6e>
	}

	/* Set Tx Busy Status. */
	isTxBusy_ = true;
 8007492:	4b10      	ldr	r3, [pc, #64]	@ (80074d4 <UART_SendBuffer+0x78>)
 8007494:	2201      	movs	r2, #1
 8007496:	701a      	strb	r2, [r3, #0]
	txCallback_ = f;
 8007498:	4a0f      	ldr	r2, [pc, #60]	@ (80074d8 <UART_SendBuffer+0x7c>)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6013      	str	r3, [r2, #0]
	txCallbackState_ = state;
 800749e:	4a0f      	ldr	r2, [pc, #60]	@ (80074dc <UART_SendBuffer+0x80>)
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	6013      	str	r3, [r2, #0]

	HAL_StatusTypeDef hal_error = HAL_UART_Transmit_DMA(ARGUS_UART, (uint8_t*) txBuff, txSize);
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	461a      	mov	r2, r3
 80074aa:	68f9      	ldr	r1, [r7, #12]
 80074ac:	480c      	ldr	r0, [pc, #48]	@ (80074e0 <UART_SendBuffer+0x84>)
 80074ae:	f00a f957 	bl	8011760 <HAL_UART_Transmit_DMA>
 80074b2:	4603      	mov	r3, r0
 80074b4:	75fb      	strb	r3, [r7, #23]
	IRQ_UNLOCK(); // this must come after HAL_UART_Transmit_DMA to avoid race conditions w/ IRQs
 80074b6:	f7ff fa6b 	bl	8006990 <IRQ_UNLOCK>

	if (hal_error != HAL_OK)
 80074ba:	7dfb      	ldrb	r3, [r7, #23]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d003      	beq.n	80074c8 <UART_SendBuffer+0x6c>
	{
		//return ERROR_FAIL;
		return -1000 - hal_error;
 80074c0:	7dfa      	ldrb	r2, [r7, #23]
 80074c2:	4b08      	ldr	r3, [pc, #32]	@ (80074e4 <UART_SendBuffer+0x88>)
 80074c4:	1a9b      	subs	r3, r3, r2
 80074c6:	e000      	b.n	80074ca <UART_SendBuffer+0x6e>
	}

	return STATUS_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3718      	adds	r7, #24
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	240031d4 	.word	0x240031d4
 80074d8:	240031d8 	.word	0x240031d8
 80074dc:	240031dc 	.word	0x240031dc
 80074e0:	24003504 	.word	0x24003504
 80074e4:	fffffc18 	.word	0xfffffc18

080074e8 <HAL_UART_TxCpltCallback>:
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
	void *state = txCallbackState_;
 80074f0:	4b0e      	ldr	r3, [pc, #56]	@ (800752c <HAL_UART_TxCpltCallback+0x44>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	617b      	str	r3, [r7, #20]
	const uart_tx_callback_t callback = txCallback_;
 80074f6:	4b0e      	ldr	r3, [pc, #56]	@ (8007530 <HAL_UART_TxCpltCallback+0x48>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	613b      	str	r3, [r7, #16]
	const status_t status = huart->gState == HAL_UART_STATE_ERROR ? ERROR_FAIL : STATUS_OK;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007502:	2be0      	cmp	r3, #224	@ 0xe0
 8007504:	d102      	bne.n	800750c <HAL_UART_TxCpltCallback+0x24>
 8007506:	f04f 33ff 	mov.w	r3, #4294967295
 800750a:	e000      	b.n	800750e <HAL_UART_TxCpltCallback+0x26>
 800750c:	2300      	movs	r3, #0
 800750e:	60fb      	str	r3, [r7, #12]

	isTxBusy_ = false;
 8007510:	4b08      	ldr	r3, [pc, #32]	@ (8007534 <HAL_UART_TxCpltCallback+0x4c>)
 8007512:	2200      	movs	r2, #0
 8007514:	701a      	strb	r2, [r3, #0]

	if (callback) callback(status, state);
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d003      	beq.n	8007524 <HAL_UART_TxCpltCallback+0x3c>
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	6979      	ldr	r1, [r7, #20]
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	4798      	blx	r3
}
 8007524:	bf00      	nop
 8007526:	3718      	adds	r7, #24
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	240031dc 	.word	0x240031dc
 8007530:	240031d8 	.word	0x240031d8
 8007534:	240031d4 	.word	0x240031d4

08007538 <UART_SetRxCallback>:

void UART_SetRxCallback(uart_rx_callback_t f)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
	rxCallback_ = f;
 8007540:	4a12      	ldr	r2, [pc, #72]	@ (800758c <UART_SetRxCallback+0x54>)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6013      	str	r3, [r2, #0]

	/* Start receiving */
	if (f)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d00d      	beq.n	8007568 <UART_SetRxCallback+0x30>
	{
		HAL_UART_Receive_DMA(ARGUS_UART, rxBuffer1, RX_BUFFER_SIZE); // Start receiving via DMA
 800754c:	2280      	movs	r2, #128	@ 0x80
 800754e:	4910      	ldr	r1, [pc, #64]	@ (8007590 <UART_SetRxCallback+0x58>)
 8007550:	4810      	ldr	r0, [pc, #64]	@ (8007594 <UART_SetRxCallback+0x5c>)
 8007552:	f00a f985 	bl	8011860 <HAL_UART_Receive_DMA>
		__HAL_UART_ENABLE_IT(ARGUS_UART, UART_IT_IDLE);  // Enable serial port idle interrupt
 8007556:	4b0f      	ldr	r3, [pc, #60]	@ (8007594 <UART_SetRxCallback+0x5c>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	4b0d      	ldr	r3, [pc, #52]	@ (8007594 <UART_SetRxCallback+0x5c>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f042 0210 	orr.w	r2, r2, #16
 8007564:	601a      	str	r2, [r3, #0]
	{
		HAL_UART_AbortReceive(ARGUS_UART);
		HAL_UART_RxCpltCallback(ARGUS_UART);
		__HAL_UART_DISABLE_IT(ARGUS_UART, UART_IT_IDLE);  // Disable serial port idle interrupt
	}
}
 8007566:	e00d      	b.n	8007584 <UART_SetRxCallback+0x4c>
		HAL_UART_AbortReceive(ARGUS_UART);
 8007568:	480a      	ldr	r0, [pc, #40]	@ (8007594 <UART_SetRxCallback+0x5c>)
 800756a:	f00a f9c5 	bl	80118f8 <HAL_UART_AbortReceive>
		HAL_UART_RxCpltCallback(ARGUS_UART);
 800756e:	4809      	ldr	r0, [pc, #36]	@ (8007594 <UART_SetRxCallback+0x5c>)
 8007570:	f000 f83c 	bl	80075ec <HAL_UART_RxCpltCallback>
		__HAL_UART_DISABLE_IT(ARGUS_UART, UART_IT_IDLE);  // Disable serial port idle interrupt
 8007574:	4b07      	ldr	r3, [pc, #28]	@ (8007594 <UART_SetRxCallback+0x5c>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	4b06      	ldr	r3, [pc, #24]	@ (8007594 <UART_SetRxCallback+0x5c>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f022 0210 	bic.w	r2, r2, #16
 8007582:	601a      	str	r2, [r3, #0]
}
 8007584:	bf00      	nop
 8007586:	3708      	adds	r7, #8
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	240031e0 	.word	0x240031e0
 8007590:	240031e8 	.word	0x240031e8
 8007594:	24003504 	.word	0x24003504

08007598 <UART_SetErrorCallback>:

void UART_SetErrorCallback(uart_error_callback_t f)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
	errorCallback_ = f;
 80075a0:	4a04      	ldr	r2, [pc, #16]	@ (80075b4 <UART_SetErrorCallback+0x1c>)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6013      	str	r3, [r2, #0]
}
 80075a6:	bf00      	nop
 80075a8:	370c      	adds	r7, #12
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	240031e4 	.word	0x240031e4

080075b8 <USER_UART_IRQHandler>:

void USER_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
	if (RESET != __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	69db      	ldr	r3, [r3, #28]
 80075c6:	f003 0310 	and.w	r3, r3, #16
 80075ca:	2b10      	cmp	r3, #16
 80075cc:	d109      	bne.n	80075e2 <USER_UART_IRQHandler+0x2a>
	{
		// On idle interruption
		__HAL_UART_CLEAR_IDLEFLAG(huart); // Clear idle interrupt sign
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	2210      	movs	r2, #16
 80075d4:	621a      	str	r2, [r3, #32]
		HAL_UART_AbortReceive(huart);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f00a f98e 	bl	80118f8 <HAL_UART_AbortReceive>
		HAL_UART_RxCpltCallback(huart);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 f805 	bl	80075ec <HAL_UART_RxCpltCallback>
	}
}
 80075e2:	bf00      	nop
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
	...

080075ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b086      	sub	sp, #24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
	assert(huart->pRxBuffPtr == rxBuffer1 || huart->pRxBuffPtr == rxBuffer2);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075f8:	4a5c      	ldr	r2, [pc, #368]	@ (800776c <HAL_UART_RxCpltCallback+0x180>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d00b      	beq.n	8007616 <HAL_UART_RxCpltCallback+0x2a>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007602:	4a5b      	ldr	r2, [pc, #364]	@ (8007770 <HAL_UART_RxCpltCallback+0x184>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d006      	beq.n	8007616 <HAL_UART_RxCpltCallback+0x2a>
 8007608:	4b5a      	ldr	r3, [pc, #360]	@ (8007774 <HAL_UART_RxCpltCallback+0x188>)
 800760a:	4a5b      	ldr	r2, [pc, #364]	@ (8007778 <HAL_UART_RxCpltCallback+0x18c>)
 800760c:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8007610:	485a      	ldr	r0, [pc, #360]	@ (800777c <HAL_UART_RxCpltCallback+0x190>)
 8007612:	f000 f949 	bl	80078a8 <__assert_func>

	uint32_t size = RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a58      	ldr	r2, [pc, #352]	@ (8007780 <HAL_UART_RxCpltCallback+0x194>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d068      	beq.n	80076f6 <HAL_UART_RxCpltCallback+0x10a>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a55      	ldr	r2, [pc, #340]	@ (8007784 <HAL_UART_RxCpltCallback+0x198>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d061      	beq.n	80076f6 <HAL_UART_RxCpltCallback+0x10a>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a53      	ldr	r2, [pc, #332]	@ (8007788 <HAL_UART_RxCpltCallback+0x19c>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d05a      	beq.n	80076f6 <HAL_UART_RxCpltCallback+0x10a>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a50      	ldr	r2, [pc, #320]	@ (800778c <HAL_UART_RxCpltCallback+0x1a0>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d053      	beq.n	80076f6 <HAL_UART_RxCpltCallback+0x10a>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a4e      	ldr	r2, [pc, #312]	@ (8007790 <HAL_UART_RxCpltCallback+0x1a4>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d04c      	beq.n	80076f6 <HAL_UART_RxCpltCallback+0x10a>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a4b      	ldr	r2, [pc, #300]	@ (8007794 <HAL_UART_RxCpltCallback+0x1a8>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d045      	beq.n	80076f6 <HAL_UART_RxCpltCallback+0x10a>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a49      	ldr	r2, [pc, #292]	@ (8007798 <HAL_UART_RxCpltCallback+0x1ac>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d03e      	beq.n	80076f6 <HAL_UART_RxCpltCallback+0x10a>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a46      	ldr	r2, [pc, #280]	@ (800779c <HAL_UART_RxCpltCallback+0x1b0>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d037      	beq.n	80076f6 <HAL_UART_RxCpltCallback+0x10a>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a44      	ldr	r2, [pc, #272]	@ (80077a0 <HAL_UART_RxCpltCallback+0x1b4>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d030      	beq.n	80076f6 <HAL_UART_RxCpltCallback+0x10a>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a41      	ldr	r2, [pc, #260]	@ (80077a4 <HAL_UART_RxCpltCallback+0x1b8>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d029      	beq.n	80076f6 <HAL_UART_RxCpltCallback+0x10a>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a3f      	ldr	r2, [pc, #252]	@ (80077a8 <HAL_UART_RxCpltCallback+0x1bc>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d022      	beq.n	80076f6 <HAL_UART_RxCpltCallback+0x10a>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a3c      	ldr	r2, [pc, #240]	@ (80077ac <HAL_UART_RxCpltCallback+0x1c0>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d01b      	beq.n	80076f6 <HAL_UART_RxCpltCallback+0x10a>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a3a      	ldr	r2, [pc, #232]	@ (80077b0 <HAL_UART_RxCpltCallback+0x1c4>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d014      	beq.n	80076f6 <HAL_UART_RxCpltCallback+0x10a>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a37      	ldr	r2, [pc, #220]	@ (80077b4 <HAL_UART_RxCpltCallback+0x1c8>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d00d      	beq.n	80076f6 <HAL_UART_RxCpltCallback+0x10a>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a35      	ldr	r2, [pc, #212]	@ (80077b8 <HAL_UART_RxCpltCallback+0x1cc>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d006      	beq.n	80076f6 <HAL_UART_RxCpltCallback+0x10a>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a32      	ldr	r2, [pc, #200]	@ (80077bc <HAL_UART_RxCpltCallback+0x1d0>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d107      	bne.n	8007706 <HAL_UART_RxCpltCallback+0x11a>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8007704:	e006      	b.n	8007714 <HAL_UART_RxCpltCallback+0x128>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8007714:	617b      	str	r3, [r7, #20]
	uint8_t * curr = huart->pRxBuffPtr;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800771a:	613b      	str	r3, [r7, #16]
	uint8_t * next = huart->pRxBuffPtr == rxBuffer1 ? rxBuffer2 : rxBuffer1;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007720:	4a12      	ldr	r2, [pc, #72]	@ (800776c <HAL_UART_RxCpltCallback+0x180>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d101      	bne.n	800772a <HAL_UART_RxCpltCallback+0x13e>
 8007726:	4b12      	ldr	r3, [pc, #72]	@ (8007770 <HAL_UART_RxCpltCallback+0x184>)
 8007728:	e000      	b.n	800772c <HAL_UART_RxCpltCallback+0x140>
 800772a:	4b10      	ldr	r3, [pc, #64]	@ (800776c <HAL_UART_RxCpltCallback+0x180>)
 800772c:	60fb      	str	r3, [r7, #12]

	HAL_StatusTypeDef rtn = HAL_UART_Receive_DMA(huart, next, RX_BUFFER_SIZE);
 800772e:	2280      	movs	r2, #128	@ 0x80
 8007730:	68f9      	ldr	r1, [r7, #12]
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f00a f894 	bl	8011860 <HAL_UART_Receive_DMA>
 8007738:	4603      	mov	r3, r0
 800773a:	72fb      	strb	r3, [r7, #11]
	if (rtn != HAL_OK || huart->gState == HAL_UART_STATE_ERROR)
 800773c:	7afb      	ldrb	r3, [r7, #11]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d104      	bne.n	800774c <HAL_UART_RxCpltCallback+0x160>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007748:	2be0      	cmp	r3, #224	@ 0xe0
 800774a:	d102      	bne.n	8007752 <HAL_UART_RxCpltCallback+0x166>
	{
		HAL_UART_ErrorCallback(huart);
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 f839 	bl	80077c4 <HAL_UART_ErrorCallback>
	}

	if (rxCallback_)
 8007752:	4b1b      	ldr	r3, [pc, #108]	@ (80077c0 <HAL_UART_RxCpltCallback+0x1d4>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d004      	beq.n	8007764 <HAL_UART_RxCpltCallback+0x178>
		rxCallback_(curr, size);
 800775a:	4b19      	ldr	r3, [pc, #100]	@ (80077c0 <HAL_UART_RxCpltCallback+0x1d4>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	6979      	ldr	r1, [r7, #20]
 8007760:	6938      	ldr	r0, [r7, #16]
 8007762:	4798      	blx	r3
}
 8007764:	bf00      	nop
 8007766:	3718      	adds	r7, #24
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	240031e8 	.word	0x240031e8
 8007770:	24003268 	.word	0x24003268
 8007774:	0802daa0 	.word	0x0802daa0
 8007778:	0802e268 	.word	0x0802e268
 800777c:	0802dae4 	.word	0x0802dae4
 8007780:	40020010 	.word	0x40020010
 8007784:	40020028 	.word	0x40020028
 8007788:	40020040 	.word	0x40020040
 800778c:	40020058 	.word	0x40020058
 8007790:	40020070 	.word	0x40020070
 8007794:	40020088 	.word	0x40020088
 8007798:	400200a0 	.word	0x400200a0
 800779c:	400200b8 	.word	0x400200b8
 80077a0:	40020410 	.word	0x40020410
 80077a4:	40020428 	.word	0x40020428
 80077a8:	40020440 	.word	0x40020440
 80077ac:	40020458 	.word	0x40020458
 80077b0:	40020470 	.word	0x40020470
 80077b4:	40020488 	.word	0x40020488
 80077b8:	400204a0 	.word	0x400204a0
 80077bc:	400204b8 	.word	0x400204b8
 80077c0:	240031e0 	.word	0x240031e0

080077c4 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
	status_t status = ERROR_FAIL;
 80077cc:	f04f 33ff 	mov.w	r3, #4294967295
 80077d0:	60fb      	str	r3, [r7, #12]

	if (huart->ErrorCode & HAL_UART_ERROR_ORE)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077d8:	f003 0308 	and.w	r3, r3, #8
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d003      	beq.n	80077e8 <HAL_UART_ErrorCallback+0x24>
		status = ERROR_UART_RX_OVERRUN;
 80077e0:	f06f 0347 	mvn.w	r3, #71	@ 0x47
 80077e4:	60fb      	str	r3, [r7, #12]
 80077e6:	e051      	b.n	800788c <HAL_UART_ErrorCallback+0xc8>
	else if (huart->ErrorCode & HAL_UART_ERROR_FE)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077ee:	f003 0304 	and.w	r3, r3, #4
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d003      	beq.n	80077fe <HAL_UART_ErrorCallback+0x3a>
		status = ERROR_UART_FRAMING_ERR;
 80077f6:	f06f 0349 	mvn.w	r3, #73	@ 0x49
 80077fa:	60fb      	str	r3, [r7, #12]
 80077fc:	e046      	b.n	800788c <HAL_UART_ErrorCallback+0xc8>
	else if (huart->ErrorCode & HAL_UART_ERROR_NE)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007804:	f003 0302 	and.w	r3, r3, #2
 8007808:	2b00      	cmp	r3, #0
 800780a:	d003      	beq.n	8007814 <HAL_UART_ErrorCallback+0x50>
		status = ERROR_UART_RX_NOISE;
 800780c:	f06f 0348 	mvn.w	r3, #72	@ 0x48
 8007810:	60fb      	str	r3, [r7, #12]
 8007812:	e03b      	b.n	800788c <HAL_UART_ErrorCallback+0xc8>
	else if (huart->ErrorCode & HAL_UART_ERROR_DMA)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800781a:	f003 0310 	and.w	r3, r3, #16
 800781e:	2b00      	cmp	r3, #0
 8007820:	d003      	beq.n	800782a <HAL_UART_ErrorCallback+0x66>
		status = ERROR_UART_TX_DMA_ERR;
 8007822:	f06f 034a 	mvn.w	r3, #74	@ 0x4a
 8007826:	60fb      	str	r3, [r7, #12]
 8007828:	e030      	b.n	800788c <HAL_UART_ErrorCallback+0xc8>
	else if (huart->gState == HAL_UART_STATE_BUSY)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007830:	2b24      	cmp	r3, #36	@ 0x24
 8007832:	d102      	bne.n	800783a <HAL_UART_ErrorCallback+0x76>
		status = STATUS_BUSY;
 8007834:	2302      	movs	r3, #2
 8007836:	60fb      	str	r3, [r7, #12]
 8007838:	e028      	b.n	800788c <HAL_UART_ErrorCallback+0xc8>
	else if (huart->gState == HAL_UART_STATE_BUSY_RX)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007840:	2b22      	cmp	r3, #34	@ 0x22
 8007842:	d102      	bne.n	800784a <HAL_UART_ErrorCallback+0x86>
		status = STATUS_BUSY;
 8007844:	2302      	movs	r3, #2
 8007846:	60fb      	str	r3, [r7, #12]
 8007848:	e020      	b.n	800788c <HAL_UART_ErrorCallback+0xc8>
	else if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007850:	2b21      	cmp	r3, #33	@ 0x21
 8007852:	d102      	bne.n	800785a <HAL_UART_ErrorCallback+0x96>
		status = STATUS_BUSY;
 8007854:	2302      	movs	r3, #2
 8007856:	60fb      	str	r3, [r7, #12]
 8007858:	e018      	b.n	800788c <HAL_UART_ErrorCallback+0xc8>
	else if (huart->gState == HAL_UART_STATE_BUSY_TX_RX)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007860:	2b23      	cmp	r3, #35	@ 0x23
 8007862:	d102      	bne.n	800786a <HAL_UART_ErrorCallback+0xa6>
		status = STATUS_BUSY;
 8007864:	2302      	movs	r3, #2
 8007866:	60fb      	str	r3, [r7, #12]
 8007868:	e010      	b.n	800788c <HAL_UART_ErrorCallback+0xc8>
	else if (huart->gState == HAL_UART_STATE_ERROR)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007870:	2be0      	cmp	r3, #224	@ 0xe0
 8007872:	d103      	bne.n	800787c <HAL_UART_ErrorCallback+0xb8>
		status = ERROR_FAIL;
 8007874:	f04f 33ff 	mov.w	r3, #4294967295
 8007878:	60fb      	str	r3, [r7, #12]
 800787a:	e007      	b.n	800788c <HAL_UART_ErrorCallback+0xc8>
	else if (huart->gState == HAL_UART_STATE_TIMEOUT)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007882:	2ba0      	cmp	r3, #160	@ 0xa0
 8007884:	d102      	bne.n	800788c <HAL_UART_ErrorCallback+0xc8>
		status = ERROR_TIMEOUT;
 8007886:	f06f 0305 	mvn.w	r3, #5
 800788a:	60fb      	str	r3, [r7, #12]

	if (errorCallback_)
 800788c:	4b05      	ldr	r3, [pc, #20]	@ (80078a4 <HAL_UART_ErrorCallback+0xe0>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d003      	beq.n	800789c <HAL_UART_ErrorCallback+0xd8>
		errorCallback_(status);
 8007894:	4b03      	ldr	r3, [pc, #12]	@ (80078a4 <HAL_UART_ErrorCallback+0xe0>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	4798      	blx	r3
}
 800789c:	bf00      	nop
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	240031e4 	.word	0x240031e4

080078a8 <__assert_func>:
    }
}

__attribute__((naked)) // avoid stack usage (no return from assert!)
void __assert_func(const char *file, int line, const char *func, const char *failedExpr)
{
 80078a8:	460c      	mov	r4, r1
 80078aa:	4619      	mov	r1, r3
    static bool is_asserting = false;
    if (!is_asserting)
 80078ac:	4b12      	ldr	r3, [pc, #72]	@ (80078f8 <__assert_func+0x50>)
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	f083 0301 	eor.w	r3, r3, #1
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d018      	beq.n	80078ec <__assert_func+0x44>
    {
        BREAKPOINT();
 80078ba:	be00      	bkpt	0x0000
        is_asserting = true;
 80078bc:	4b0e      	ldr	r3, [pc, #56]	@ (80078f8 <__assert_func+0x50>)
 80078be:	2501      	movs	r5, #1
 80078c0:	701d      	strb	r5, [r3, #0]
#endif

        /* Try to send message to master.
         * Note that sending via USB fails if the assert is called e.g. from
         * the HardFault handler. */
        print("ASSERT: expression \"%s\" failed;\n"
 80078c2:	9200      	str	r2, [sp, #0]
 80078c4:	4623      	mov	r3, r4
 80078c6:	4602      	mov	r2, r0
 80078c8:	480c      	ldr	r0, [pc, #48]	@ (80078fc <__assert_func+0x54>)
 80078ca:	f7fe fe1f 	bl	800650c <print>
              "function \"%s\";\n",
              failedExpr, file, line, func);

        /* Wait for sending print statement */
        static volatile uint32_t i = 0;
        for (i = 0; i < 1000000; i++) __asm("nop");
 80078ce:	4b0c      	ldr	r3, [pc, #48]	@ (8007900 <__assert_func+0x58>)
 80078d0:	2200      	movs	r2, #0
 80078d2:	601a      	str	r2, [r3, #0]
 80078d4:	e005      	b.n	80078e2 <__assert_func+0x3a>
 80078d6:	bf00      	nop
 80078d8:	4b09      	ldr	r3, [pc, #36]	@ (8007900 <__assert_func+0x58>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	3301      	adds	r3, #1
 80078de:	4a08      	ldr	r2, [pc, #32]	@ (8007900 <__assert_func+0x58>)
 80078e0:	6013      	str	r3, [r2, #0]
 80078e2:	4b07      	ldr	r3, [pc, #28]	@ (8007900 <__assert_func+0x58>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a07      	ldr	r2, [pc, #28]	@ (8007904 <__assert_func+0x5c>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d9f4      	bls.n	80078d6 <__assert_func+0x2e>
    }

    /* Stop or Reset. */
    BREAKPOINT();
 80078ec:	be00      	bkpt	0x0000
    Board_Reset();
 80078ee:	f7ff f84b 	bl	8006988 <Board_Reset>
    for (;;) __asm("nop");
 80078f2:	bf00      	nop
 80078f4:	e7fd      	b.n	80078f2 <__assert_func+0x4a>
 80078f6:	bf00      	nop
 80078f8:	240032e8 	.word	0x240032e8
 80078fc:	0802db00 	.word	0x0802db00
 8007900:	240032ec 	.word	0x240032ec
 8007904:	000f423f 	.word	0x000f423f

08007908 <get_bit_access>:

// This is unnecessary in C99, since compound initializers can be used,
// but: 1. Some compilers are finicky about this; 2. Some people may want to convert this to C89;
// 3. If you try to use it as C++, only C++20 supports compound literals
static inline double_with_bit_access get_bit_access(double x)
{
 8007908:	b480      	push	{r7}
 800790a:	b087      	sub	sp, #28
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	ed87 0b00 	vstr	d0, [r7]
  double_with_bit_access dwba;
  dwba.F = x;
 8007914:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007918:	e9c7 2304 	strd	r2, r3, [r7, #16]
  return dwba;
 800791c:	68f9      	ldr	r1, [r7, #12]
 800791e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007922:	e9c1 2300 	strd	r2, r3, [r1]
}
 8007926:	68f8      	ldr	r0, [r7, #12]
 8007928:	371c      	adds	r7, #28
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr

08007932 <get_sign>:

static inline int get_sign(double x)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b084      	sub	sp, #16
 8007936:	af00      	add	r7, sp, #0
 8007938:	ed87 0b00 	vstr	d0, [r7]
  // The sign is stored in the highest bit
  return get_bit_access(x).U >> (DOUBLE_SIZE_IN_BITS - 1);
 800793c:	f107 0308 	add.w	r3, r7, #8
 8007940:	ed97 0b00 	vldr	d0, [r7]
 8007944:	4618      	mov	r0, r3
 8007946:	f7ff ffdf 	bl	8007908 <get_bit_access>
 800794a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800794e:	f04f 0200 	mov.w	r2, #0
 8007952:	f04f 0300 	mov.w	r3, #0
 8007956:	0fca      	lsrs	r2, r1, #31
 8007958:	2300      	movs	r3, #0
 800795a:	4613      	mov	r3, r2
}
 800795c:	4618      	mov	r0, r3
 800795e:	3710      	adds	r7, #16
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	60b9      	str	r1, [r7, #8]
 800796c:	607a      	str	r2, [r7, #4]
 800796e:	603b      	str	r3, [r7, #0]
 8007970:	4603      	mov	r3, r0
 8007972:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8007974:	bf00      	nop
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <_out_fct>:
}


// internal output function wrapper
static inline void _out_fct(char character, void* buffer, size_t idx, size_t maxlen)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	60b9      	str	r1, [r7, #8]
 8007988:	607a      	str	r2, [r7, #4]
 800798a:	603b      	str	r3, [r7, #0]
 800798c:	4603      	mov	r3, r0
 800798e:	73fb      	strb	r3, [r7, #15]
  (void)idx; (void)maxlen;
  if (character) {
 8007990:	7bfb      	ldrb	r3, [r7, #15]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d006      	beq.n	80079a4 <_out_fct+0x24>
    // buffer is the output fct pointer
    ((out_fct_wrap_type*)buffer)->fct(character, ((out_fct_wrap_type*)buffer)->arg);
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	6851      	ldr	r1, [r2, #4]
 800799e:	7bfa      	ldrb	r2, [r7, #15]
 80079a0:	4610      	mov	r0, r2
 80079a2:	4798      	blx	r3
  }
}
 80079a4:	bf00      	nop
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <_strnlen_s>:


// internal secure strlen
// @return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	60fb      	str	r3, [r7, #12]
 80079ba:	e002      	b.n	80079c2 <_strnlen_s+0x16>
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	3301      	adds	r3, #1
 80079c0:	60fb      	str	r3, [r7, #12]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d004      	beq.n	80079d4 <_strnlen_s+0x28>
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	1e5a      	subs	r2, r3, #1
 80079ce:	603a      	str	r2, [r7, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d1f3      	bne.n	80079bc <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	1ad3      	subs	r3, r2, r3
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3714      	adds	r7, #20
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <_is_digit>:


// internal test if char is a digit (0-9)
// @return true if char is a digit
static inline bool _is_digit(char ch)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	4603      	mov	r3, r0
 80079ee:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 80079f0:	79fb      	ldrb	r3, [r7, #7]
 80079f2:	2b2f      	cmp	r3, #47	@ 0x2f
 80079f4:	d904      	bls.n	8007a00 <_is_digit+0x1a>
 80079f6:	79fb      	ldrb	r3, [r7, #7]
 80079f8:	2b39      	cmp	r3, #57	@ 0x39
 80079fa:	d801      	bhi.n	8007a00 <_is_digit+0x1a>
 80079fc:	2301      	movs	r3, #1
 80079fe:	e000      	b.n	8007a02 <_is_digit+0x1c>
 8007a00:	2300      	movs	r3, #0
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	b2db      	uxtb	r3, r3
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8007a20:	e00e      	b.n	8007a40 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	4613      	mov	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4413      	add	r3, r2
 8007a2a:	005b      	lsls	r3, r3, #1
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	1c59      	adds	r1, r3, #1
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	6011      	str	r1, [r2, #0]
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	4403      	add	r3, r0
 8007a3c:	3b30      	subs	r3, #48	@ 0x30
 8007a3e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7ff ffcd 	bl	80079e6 <_is_digit>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1e7      	bne.n	8007a22 <_atoi+0xe>
  }
  return i;
 8007a52:	68fb      	ldr	r3, [r7, #12]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3710      	adds	r7, #16
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8007a5c:	b590      	push	{r4, r7, lr}
 8007a5e:	b087      	sub	sp, #28
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]
 8007a68:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8007a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a70:	f003 0302 	and.w	r3, r3, #2
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d125      	bne.n	8007ac4 <_out_rev+0x68>
 8007a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a7a:	f003 0301 	and.w	r3, r3, #1
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d120      	bne.n	8007ac4 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8007a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a84:	617b      	str	r3, [r7, #20]
 8007a86:	e00a      	b.n	8007a9e <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	1c53      	adds	r3, r2, #1
 8007a8c:	607b      	str	r3, [r7, #4]
 8007a8e:	68fc      	ldr	r4, [r7, #12]
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	68b9      	ldr	r1, [r7, #8]
 8007a94:	2020      	movs	r0, #32
 8007a96:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	617b      	str	r3, [r7, #20]
 8007a9e:	697a      	ldr	r2, [r7, #20]
 8007aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d3f0      	bcc.n	8007a88 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8007aa6:	e00d      	b.n	8007ac4 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8007aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007aae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ab2:	4413      	add	r3, r2
 8007ab4:	7818      	ldrb	r0, [r3, #0]
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	1c53      	adds	r3, r2, #1
 8007aba:	607b      	str	r3, [r7, #4]
 8007abc:	68fc      	ldr	r4, [r7, #12]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	68b9      	ldr	r1, [r7, #8]
 8007ac2:	47a0      	blx	r4
  while (len) {
 8007ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1ee      	bne.n	8007aa8 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8007aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007acc:	f003 0302 	and.w	r3, r3, #2
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00e      	beq.n	8007af2 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8007ad4:	e007      	b.n	8007ae6 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	1c53      	adds	r3, r2, #1
 8007ada:	607b      	str	r3, [r7, #4]
 8007adc:	68fc      	ldr	r4, [r7, #12]
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	68b9      	ldr	r1, [r7, #8]
 8007ae2:	2020      	movs	r0, #32
 8007ae4:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d8f1      	bhi.n	8007ad6 <_out_rev+0x7a>
    }
  }

  return idx;
 8007af2:	687b      	ldr	r3, [r7, #4]
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	371c      	adds	r7, #28
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd90      	pop	{r4, r7, pc}

08007afc <print_integer_finalization>:


// Invoked by print_integer after the actual number has been printed, performing necessary
// work on the number's prefix (as the number is initially printed in reverse order)
static size_t print_integer_finalization(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, numeric_base_t base, unsigned int precision, unsigned int width, unsigned int flags)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b08a      	sub	sp, #40	@ 0x28
 8007b00:	af04      	add	r7, sp, #16
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	607a      	str	r2, [r7, #4]
 8007b08:	603b      	str	r3, [r7, #0]
  size_t unpadded_len = len;
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b0c:	617b      	str	r3, [r7, #20]

  // pad with leading zeros
  {
    if (!(flags & FLAGS_LEFT)) {
 8007b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b10:	f003 0302 	and.w	r3, r3, #2
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d12f      	bne.n	8007b78 <print_integer_finalization+0x7c>
      if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8007b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d018      	beq.n	8007b50 <print_integer_finalization+0x54>
 8007b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b20:	f003 0301 	and.w	r3, r3, #1
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d013      	beq.n	8007b50 <print_integer_finalization+0x54>
 8007b28:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d104      	bne.n	8007b3a <print_integer_finalization+0x3e>
 8007b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b32:	f003 030c 	and.w	r3, r3, #12
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00a      	beq.n	8007b50 <print_integer_finalization+0x54>
        width--;
 8007b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINT_INTEGER_BUFFER_SIZE)) {
 8007b40:	e006      	b.n	8007b50 <print_integer_finalization+0x54>
        buf[len++] = '0';
 8007b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b44:	1c5a      	adds	r2, r3, #1
 8007b46:	627a      	str	r2, [r7, #36]	@ 0x24
 8007b48:	6a3a      	ldr	r2, [r7, #32]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	2230      	movs	r2, #48	@ 0x30
 8007b4e:	701a      	strb	r2, [r3, #0]
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINT_INTEGER_BUFFER_SIZE)) {
 8007b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00e      	beq.n	8007b78 <print_integer_finalization+0x7c>
 8007b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d20a      	bcs.n	8007b78 <print_integer_finalization+0x7c>
 8007b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b64:	2b1f      	cmp	r3, #31
 8007b66:	d9ec      	bls.n	8007b42 <print_integer_finalization+0x46>
      }
    }

    while ((len < precision) && (len < PRINT_INTEGER_BUFFER_SIZE)) {
 8007b68:	e006      	b.n	8007b78 <print_integer_finalization+0x7c>
      buf[len++] = '0';
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6c:	1c5a      	adds	r2, r3, #1
 8007b6e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007b70:	6a3a      	ldr	r2, [r7, #32]
 8007b72:	4413      	add	r3, r2
 8007b74:	2230      	movs	r2, #48	@ 0x30
 8007b76:	701a      	strb	r2, [r3, #0]
    while ((len < precision) && (len < PRINT_INTEGER_BUFFER_SIZE)) {
 8007b78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d202      	bcs.n	8007b86 <print_integer_finalization+0x8a>
 8007b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b82:	2b1f      	cmp	r3, #31
 8007b84:	d9f1      	bls.n	8007b6a <print_integer_finalization+0x6e>
    }

    if (base == BASE_OCTAL && (len > unpadded_len)) {
 8007b86:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007b8a:	2b08      	cmp	r3, #8
 8007b8c:	d107      	bne.n	8007b9e <print_integer_finalization+0xa2>
 8007b8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d903      	bls.n	8007b9e <print_integer_finalization+0xa2>
      // Since we've written some zeros, we've satisfied the alternative format leading space requirement
      flags &= ~FLAGS_HASH;
 8007b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b98:	f023 0310 	bic.w	r3, r3, #16
 8007b9c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }
  }

  // handle hash
  if (flags & (FLAGS_HASH | FLAGS_POINTER)) {
 8007b9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ba0:	f241 0310 	movw	r3, #4112	@ 0x1010
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d064      	beq.n	8007c74 <print_integer_finalization+0x178>
    if (!(flags & FLAGS_PRECISION) && len && ((len == precision) || (len == width))) {
 8007baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d11f      	bne.n	8007bf4 <print_integer_finalization+0xf8>
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d01c      	beq.n	8007bf4 <print_integer_finalization+0xf8>
 8007bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d003      	beq.n	8007bca <print_integer_finalization+0xce>
 8007bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d114      	bne.n	8007bf4 <print_integer_finalization+0xf8>
      // Let's take back some padding digits to fit in what will eventually
      // be the format-specific prefix
      if (unpadded_len < len) {
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d202      	bcs.n	8007bd8 <print_integer_finalization+0xdc>
        len--;
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (len && (base == BASE_HEX)) {
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00a      	beq.n	8007bf4 <print_integer_finalization+0xf8>
 8007bde:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007be2:	2b10      	cmp	r3, #16
 8007be4:	d106      	bne.n	8007bf4 <print_integer_finalization+0xf8>
        if (unpadded_len < len) {
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d202      	bcs.n	8007bf4 <print_integer_finalization+0xf8>
          len--;
 8007bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINT_INTEGER_BUFFER_SIZE)) {
 8007bf4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007bf8:	2b10      	cmp	r3, #16
 8007bfa:	d10f      	bne.n	8007c1c <print_integer_finalization+0x120>
 8007bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bfe:	f003 0320 	and.w	r3, r3, #32
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10a      	bne.n	8007c1c <print_integer_finalization+0x120>
 8007c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c08:	2b1f      	cmp	r3, #31
 8007c0a:	d807      	bhi.n	8007c1c <print_integer_finalization+0x120>
      buf[len++] = 'x';
 8007c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c0e:	1c5a      	adds	r2, r3, #1
 8007c10:	627a      	str	r2, [r7, #36]	@ 0x24
 8007c12:	6a3a      	ldr	r2, [r7, #32]
 8007c14:	4413      	add	r3, r2
 8007c16:	2278      	movs	r2, #120	@ 0x78
 8007c18:	701a      	strb	r2, [r3, #0]
 8007c1a:	e021      	b.n	8007c60 <print_integer_finalization+0x164>
    }
    else if ((base == BASE_HEX) && (flags & FLAGS_UPPERCASE) && (len < PRINT_INTEGER_BUFFER_SIZE)) {
 8007c1c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007c20:	2b10      	cmp	r3, #16
 8007c22:	d10f      	bne.n	8007c44 <print_integer_finalization+0x148>
 8007c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c26:	f003 0320 	and.w	r3, r3, #32
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00a      	beq.n	8007c44 <print_integer_finalization+0x148>
 8007c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c30:	2b1f      	cmp	r3, #31
 8007c32:	d807      	bhi.n	8007c44 <print_integer_finalization+0x148>
      buf[len++] = 'X';
 8007c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c36:	1c5a      	adds	r2, r3, #1
 8007c38:	627a      	str	r2, [r7, #36]	@ 0x24
 8007c3a:	6a3a      	ldr	r2, [r7, #32]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	2258      	movs	r2, #88	@ 0x58
 8007c40:	701a      	strb	r2, [r3, #0]
 8007c42:	e00d      	b.n	8007c60 <print_integer_finalization+0x164>
    }
    else if ((base == BASE_BINARY) && (len < PRINT_INTEGER_BUFFER_SIZE)) {
 8007c44:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	d109      	bne.n	8007c60 <print_integer_finalization+0x164>
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c4e:	2b1f      	cmp	r3, #31
 8007c50:	d806      	bhi.n	8007c60 <print_integer_finalization+0x164>
      buf[len++] = 'b';
 8007c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c54:	1c5a      	adds	r2, r3, #1
 8007c56:	627a      	str	r2, [r7, #36]	@ 0x24
 8007c58:	6a3a      	ldr	r2, [r7, #32]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	2262      	movs	r2, #98	@ 0x62
 8007c5e:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINT_INTEGER_BUFFER_SIZE) {
 8007c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c62:	2b1f      	cmp	r3, #31
 8007c64:	d806      	bhi.n	8007c74 <print_integer_finalization+0x178>
      buf[len++] = '0';
 8007c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c68:	1c5a      	adds	r2, r3, #1
 8007c6a:	627a      	str	r2, [r7, #36]	@ 0x24
 8007c6c:	6a3a      	ldr	r2, [r7, #32]
 8007c6e:	4413      	add	r3, r2
 8007c70:	2230      	movs	r2, #48	@ 0x30
 8007c72:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINT_INTEGER_BUFFER_SIZE) {
 8007c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c76:	2b1f      	cmp	r3, #31
 8007c78:	d824      	bhi.n	8007cc4 <print_integer_finalization+0x1c8>
    if (negative) {
 8007c7a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d007      	beq.n	8007c92 <print_integer_finalization+0x196>
      buf[len++] = '-';
 8007c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c84:	1c5a      	adds	r2, r3, #1
 8007c86:	627a      	str	r2, [r7, #36]	@ 0x24
 8007c88:	6a3a      	ldr	r2, [r7, #32]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	222d      	movs	r2, #45	@ 0x2d
 8007c8e:	701a      	strb	r2, [r3, #0]
 8007c90:	e018      	b.n	8007cc4 <print_integer_finalization+0x1c8>
    }
    else if (flags & FLAGS_PLUS) {
 8007c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c94:	f003 0304 	and.w	r3, r3, #4
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d007      	beq.n	8007cac <print_integer_finalization+0x1b0>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9e:	1c5a      	adds	r2, r3, #1
 8007ca0:	627a      	str	r2, [r7, #36]	@ 0x24
 8007ca2:	6a3a      	ldr	r2, [r7, #32]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	222b      	movs	r2, #43	@ 0x2b
 8007ca8:	701a      	strb	r2, [r3, #0]
 8007caa:	e00b      	b.n	8007cc4 <print_integer_finalization+0x1c8>
    }
    else if (flags & FLAGS_SPACE) {
 8007cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cae:	f003 0308 	and.w	r3, r3, #8
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d006      	beq.n	8007cc4 <print_integer_finalization+0x1c8>
      buf[len++] = ' ';
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb8:	1c5a      	adds	r2, r3, #1
 8007cba:	627a      	str	r2, [r7, #36]	@ 0x24
 8007cbc:	6a3a      	ldr	r2, [r7, #32]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	2220      	movs	r2, #32
 8007cc2:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8007cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc6:	9303      	str	r3, [sp, #12]
 8007cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cca:	9302      	str	r3, [sp, #8]
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cce:	9301      	str	r3, [sp, #4]
 8007cd0:	6a3b      	ldr	r3, [r7, #32]
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	68b9      	ldr	r1, [r7, #8]
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f7ff febe 	bl	8007a5c <_out_rev>
 8007ce0:	4603      	mov	r3, r0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3718      	adds	r7, #24
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <print_integer>:

// An internal itoa-like function
static size_t print_integer(out_fct_type out, char* buffer, size_t idx, size_t maxlen, printf_unsigned_value_t value, bool negative, numeric_base_t base, unsigned int precision, unsigned int width, unsigned int flags)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b096      	sub	sp, #88	@ 0x58
 8007cee:	af08      	add	r7, sp, #32
 8007cf0:	60f8      	str	r0, [r7, #12]
 8007cf2:	60b9      	str	r1, [r7, #8]
 8007cf4:	607a      	str	r2, [r7, #4]
 8007cf6:	603b      	str	r3, [r7, #0]
  char buf[PRINT_INTEGER_BUFFER_SIZE];
  size_t len = 0U;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!value) {
 8007cfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d11a      	bne.n	8007d38 <print_integer+0x4e>
    if ( !(flags & FLAGS_PRECISION) ) {
 8007d02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d10c      	bne.n	8007d26 <print_integer+0x3c>
      buf[len++] = '0';
 8007d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d0e:	1c5a      	adds	r2, r3, #1
 8007d10:	637a      	str	r2, [r7, #52]	@ 0x34
 8007d12:	3338      	adds	r3, #56	@ 0x38
 8007d14:	443b      	add	r3, r7
 8007d16:	2230      	movs	r2, #48	@ 0x30
 8007d18:	f803 2c28 	strb.w	r2, [r3, #-40]
      flags &= ~FLAGS_HASH;
 8007d1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d1e:	f023 0310 	bic.w	r3, r3, #16
 8007d22:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d24:	e03c      	b.n	8007da0 <print_integer+0xb6>
      // We drop this flag this since either the alternative and regular modes of the specifier
      // don't differ on 0 values, or (in the case of octal) we've already provided the special
      // handling for this mode.
    }
    else if (base == BASE_HEX) {
 8007d26:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8007d2a:	2b10      	cmp	r3, #16
 8007d2c:	d138      	bne.n	8007da0 <print_integer+0xb6>
      flags &= ~FLAGS_HASH;
 8007d2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d30:	f023 0310 	bic.w	r3, r3, #16
 8007d34:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d36:	e033      	b.n	8007da0 <print_integer+0xb6>
      // don't differ on 0 values
    }
  }
  else {
    do {
      const char digit = (char)(value % base);
 8007d38:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8007d3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d3e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d42:	fb01 f202 	mul.w	r2, r1, r2
 8007d46:	1a9b      	subs	r3, r3, r2
 8007d48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
 8007d4c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007d50:	2b09      	cmp	r3, #9
 8007d52:	d804      	bhi.n	8007d5e <print_integer+0x74>
 8007d54:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007d58:	3330      	adds	r3, #48	@ 0x30
 8007d5a:	b2da      	uxtb	r2, r3
 8007d5c:	e00d      	b.n	8007d7a <print_integer+0x90>
 8007d5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d60:	f003 0320 	and.w	r3, r3, #32
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d001      	beq.n	8007d6c <print_integer+0x82>
 8007d68:	2241      	movs	r2, #65	@ 0x41
 8007d6a:	e000      	b.n	8007d6e <print_integer+0x84>
 8007d6c:	2261      	movs	r2, #97	@ 0x61
 8007d6e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007d72:	4413      	add	r3, r2
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	3b0a      	subs	r3, #10
 8007d78:	b2da      	uxtb	r2, r3
 8007d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d7c:	1c59      	adds	r1, r3, #1
 8007d7e:	6379      	str	r1, [r7, #52]	@ 0x34
 8007d80:	3338      	adds	r3, #56	@ 0x38
 8007d82:	443b      	add	r3, r7
 8007d84:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8007d88:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8007d8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d92:	643b      	str	r3, [r7, #64]	@ 0x40
    } while (value && (len < PRINT_INTEGER_BUFFER_SIZE));
 8007d94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d002      	beq.n	8007da0 <print_integer+0xb6>
 8007d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d9c:	2b1f      	cmp	r3, #31
 8007d9e:	d9cb      	bls.n	8007d38 <print_integer+0x4e>
  }

  return print_integer_finalization(out, buffer, idx, maxlen, buf, len, negative, base, precision, width, flags);
 8007da0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007da2:	9306      	str	r3, [sp, #24]
 8007da4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007da6:	9305      	str	r3, [sp, #20]
 8007da8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007daa:	9304      	str	r3, [sp, #16]
 8007dac:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8007db0:	9303      	str	r3, [sp, #12]
 8007db2:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8007db6:	9302      	str	r3, [sp, #8]
 8007db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dba:	9301      	str	r3, [sp, #4]
 8007dbc:	f107 0310 	add.w	r3, r7, #16
 8007dc0:	9300      	str	r3, [sp, #0]
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	68b9      	ldr	r1, [r7, #8]
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f7ff fe97 	bl	8007afc <print_integer_finalization>
 8007dce:	4603      	mov	r3, r0
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3738      	adds	r7, #56	@ 0x38
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <get_components>:

// Break up a double number - which is known to be a finite non-negative number -
// into its base-10 parts: integral - before the decimal point, and fractional - after it.
// Taken the precision into account, but does not change it even internally.
static struct double_components get_components(double number, unsigned int precision)
{
 8007dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ddc:	b094      	sub	sp, #80	@ 0x50
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6278      	str	r0, [r7, #36]	@ 0x24
 8007de2:	ed87 0b06 	vstr	d0, [r7, #24]
 8007de6:	6239      	str	r1, [r7, #32]
  struct double_components number_;
  number_.is_negative = get_sign(number);
 8007de8:	ed97 0b06 	vldr	d0, [r7, #24]
 8007dec:	f7ff fda1 	bl	8007932 <get_sign>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	bf14      	ite	ne
 8007df6:	2301      	movne	r3, #1
 8007df8:	2300      	moveq	r3, #0
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  double abs_number = (number_.is_negative) ? -number : number;
 8007e00:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d004      	beq.n	8007e12 <get_components+0x3a>
 8007e08:	ed97 7b06 	vldr	d7, [r7, #24]
 8007e0c:	eeb1 7b47 	vneg.f64	d7, d7
 8007e10:	e001      	b.n	8007e16 <get_components+0x3e>
 8007e12:	ed97 7b06 	vldr	d7, [r7, #24]
 8007e16:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
  number_.integral = (int_fast64_t)abs_number;
 8007e1a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8007e1e:	f7f8 fcf3 	bl	8000808 <__aeabi_d2lz>
 8007e22:	4602      	mov	r2, r0
 8007e24:	460b      	mov	r3, r1
 8007e26:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  double remainder = (abs_number - number_.integral) * powers_of_10[precision];
 8007e2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007e2e:	4610      	mov	r0, r2
 8007e30:	4619      	mov	r1, r3
 8007e32:	f7f8 fc53 	bl	80006dc <__aeabi_l2d>
 8007e36:	ec41 0b16 	vmov	d6, r0, r1
 8007e3a:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8007e3e:	ee37 6b46 	vsub.f64	d6, d7, d6
 8007e42:	4a62      	ldr	r2, [pc, #392]	@ (8007fcc <get_components+0x1f4>)
 8007e44:	6a3b      	ldr	r3, [r7, #32]
 8007e46:	00db      	lsls	r3, r3, #3
 8007e48:	4413      	add	r3, r2
 8007e4a:	ed93 7b00 	vldr	d7, [r3]
 8007e4e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007e52:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
  number_.fractional = (int_fast64_t)remainder;
 8007e56:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8007e5a:	f7f8 fcd5 	bl	8000808 <__aeabi_d2lz>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	460b      	mov	r3, r1
 8007e62:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

  remainder -= (double) number_.fractional;
 8007e66:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007e6a:	4610      	mov	r0, r2
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	f7f8 fc35 	bl	80006dc <__aeabi_l2d>
 8007e72:	ec41 0b16 	vmov	d6, r0, r1
 8007e76:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8007e7a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007e7e:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40

  if (remainder > 0.5) {
 8007e82:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8007e86:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8007e8a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e92:	dd2f      	ble.n	8007ef4 <get_components+0x11c>
    ++number_.fractional;
 8007e94:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007e98:	1c51      	adds	r1, r2, #1
 8007e9a:	6139      	str	r1, [r7, #16]
 8007e9c:	f143 0300 	adc.w	r3, r3, #0
 8007ea0:	617b      	str	r3, [r7, #20]
 8007ea2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007ea6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    // handle rollover, e.g. case 0.99 with precision 1 is 1.0
    if ((double) number_.fractional >= powers_of_10[precision]) {
 8007eaa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007eae:	4610      	mov	r0, r2
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	f7f8 fc13 	bl	80006dc <__aeabi_l2d>
 8007eb6:	ec41 0b16 	vmov	d6, r0, r1
 8007eba:	4a44      	ldr	r2, [pc, #272]	@ (8007fcc <get_components+0x1f4>)
 8007ebc:	6a3b      	ldr	r3, [r7, #32]
 8007ebe:	00db      	lsls	r3, r3, #3
 8007ec0:	4413      	add	r3, r2
 8007ec2:	ed93 7b00 	vldr	d7, [r3]
 8007ec6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ece:	db32      	blt.n	8007f36 <get_components+0x15e>
      number_.fractional = 0;
 8007ed0:	f04f 0200 	mov.w	r2, #0
 8007ed4:	f04f 0300 	mov.w	r3, #0
 8007ed8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
      ++number_.integral;
 8007edc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007ee0:	1c51      	adds	r1, r2, #1
 8007ee2:	60b9      	str	r1, [r7, #8]
 8007ee4:	f143 0300 	adc.w	r3, r3, #0
 8007ee8:	60fb      	str	r3, [r7, #12]
 8007eea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007eee:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8007ef2:	e020      	b.n	8007f36 <get_components+0x15e>
    }
  }
  else if (remainder == 0.5) {
 8007ef4:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8007ef8:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8007efc:	eeb4 7b46 	vcmp.f64	d7, d6
 8007f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f04:	d117      	bne.n	8007f36 <get_components+0x15e>
    if ((number_.fractional == 0U) || (number_.fractional & 1U)) {
 8007f06:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	d008      	beq.n	8007f20 <get_components+0x148>
 8007f0e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007f12:	f002 0801 	and.w	r8, r2, #1
 8007f16:	f04f 0900 	mov.w	r9, #0
 8007f1a:	ea58 0309 	orrs.w	r3, r8, r9
 8007f1e:	d00a      	beq.n	8007f36 <get_components+0x15e>
      // if halfway, round up if odd OR if last digit is 0
      ++number_.fractional;
 8007f20:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007f24:	1c51      	adds	r1, r2, #1
 8007f26:	6039      	str	r1, [r7, #0]
 8007f28:	f143 0300 	adc.w	r3, r3, #0
 8007f2c:	607b      	str	r3, [r7, #4]
 8007f2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f32:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    }
  }

  if (precision == 0U) {
 8007f36:	6a3b      	ldr	r3, [r7, #32]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d137      	bne.n	8007fac <get_components+0x1d4>
    remainder = abs_number - (double) number_.integral;
 8007f3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007f40:	4610      	mov	r0, r2
 8007f42:	4619      	mov	r1, r3
 8007f44:	f7f8 fbca 	bl	80006dc <__aeabi_l2d>
 8007f48:	ec41 0b16 	vmov	d6, r0, r1
 8007f4c:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8007f50:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007f54:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
    if ((!(remainder < 0.5) || (remainder > 0.5)) && (number_.integral & 1)) {
 8007f58:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8007f5c:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8007f60:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f68:	bf4c      	ite	mi
 8007f6a:	2301      	movmi	r3, #1
 8007f6c:	2300      	movpl	r3, #0
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	f083 0301 	eor.w	r3, r3, #1
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d108      	bne.n	8007f8c <get_components+0x1b4>
 8007f7a:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8007f7e:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8007f82:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f8a:	dd0f      	ble.n	8007fac <get_components+0x1d4>
 8007f8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007f90:	f002 0401 	and.w	r4, r2, #1
 8007f94:	2500      	movs	r5, #0
 8007f96:	ea54 0305 	orrs.w	r3, r4, r5
 8007f9a:	d007      	beq.n	8007fac <get_components+0x1d4>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++number_.integral;
 8007f9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007fa0:	f112 0a01 	adds.w	sl, r2, #1
 8007fa4:	f143 0b00 	adc.w	fp, r3, #0
 8007fa8:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	@ 0x28
    }
  }
  return number_;
 8007fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fae:	461d      	mov	r5, r3
 8007fb0:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8007fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007fb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007fbc:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8007fc0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007fc2:	3750      	adds	r7, #80	@ 0x50
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fca:	bf00      	nop
 8007fcc:	0802e280 	.word	0x0802e280

08007fd0 <sprint_broken_up_decimal>:
#endif

static size_t sprint_broken_up_decimal(
  struct double_components number_, out_fct_type out, char *buffer, size_t idx, size_t maxlen, unsigned int precision,
  unsigned int width, unsigned int flags, char *buf, size_t len)
{
 8007fd0:	b084      	sub	sp, #16
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b088      	sub	sp, #32
 8007fd6:	af04      	add	r7, sp, #16
 8007fd8:	f107 0c18 	add.w	ip, r7, #24
 8007fdc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  if (precision != 0U) {
 8007fe0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	f000 8086 	beq.w	80080f4 <sprint_broken_up_decimal+0x124>
    // do fractional part, as an unsigned number

    unsigned int count = precision;
 8007fe8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fea:	60fb      	str	r3, [r7, #12]

    if ((flags & FLAGS_ADAPT_EXP) && !(flags & FLAGS_HASH)) {
 8007fec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d029      	beq.n	800804a <sprint_broken_up_decimal+0x7a>
 8007ff6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ff8:	f003 0310 	and.w	r3, r3, #16
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d124      	bne.n	800804a <sprint_broken_up_decimal+0x7a>
      // %g/%G mandates we skip the trailing 0 digits...
      if (number_.fractional > 0) {
 8008000:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008004:	2a01      	cmp	r2, #1
 8008006:	f173 0300 	sbcs.w	r3, r3, #0
 800800a:	db1e      	blt.n	800804a <sprint_broken_up_decimal+0x7a>
        while(true) {
          int_fast64_t digit = number_.fractional % 10U;
 800800c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008010:	f04f 020a 	mov.w	r2, #10
 8008014:	f04f 0300 	mov.w	r3, #0
 8008018:	f7f8 fb8e 	bl	8000738 <__aeabi_ldivmod>
 800801c:	e9c7 2300 	strd	r2, r3, [r7]
          if (digit != 0) {
 8008020:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008024:	4313      	orrs	r3, r2
 8008026:	d10f      	bne.n	8008048 <sprint_broken_up_decimal+0x78>
            break;
          }
          --count;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	3b01      	subs	r3, #1
 800802c:	60fb      	str	r3, [r7, #12]
          number_.fractional /= 10U;
 800802e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008032:	f04f 020a 	mov.w	r2, #10
 8008036:	f04f 0300 	mov.w	r3, #0
 800803a:	f7f8 fb7d 	bl	8000738 <__aeabi_ldivmod>
 800803e:	4602      	mov	r2, r0
 8008040:	460b      	mov	r3, r1
 8008042:	e9c7 2308 	strd	r2, r3, [r7, #32]
        while(true) {
 8008046:	e7e1      	b.n	800800c <sprint_broken_up_decimal+0x3c>
            break;
 8008048:	bf00      	nop
      }
      // ... and even the decimal point if there are no
      // non-zero fractional part digits (see below)
    }

    if (number_.fractional > 0 || !(flags & FLAGS_ADAPT_EXP) || (flags & FLAGS_HASH) ) {
 800804a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800804e:	2a01      	cmp	r2, #1
 8008050:	f173 0300 	sbcs.w	r3, r3, #0
 8008054:	da2e      	bge.n	80080b4 <sprint_broken_up_decimal+0xe4>
 8008056:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008058:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800805c:	2b00      	cmp	r3, #0
 800805e:	d029      	beq.n	80080b4 <sprint_broken_up_decimal+0xe4>
 8008060:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008062:	f003 0310 	and.w	r3, r3, #16
 8008066:	2b00      	cmp	r3, #0
 8008068:	d075      	beq.n	8008156 <sprint_broken_up_decimal+0x186>
      while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800806a:	e023      	b.n	80080b4 <sprint_broken_up_decimal+0xe4>
        --count;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	3b01      	subs	r3, #1
 8008070:	60fb      	str	r3, [r7, #12]
        buf[len++] = (char)('0' + number_.fractional % 10U);
 8008072:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008076:	f04f 020a 	mov.w	r2, #10
 800807a:	f04f 0300 	mov.w	r3, #0
 800807e:	f7f8 fb5b 	bl	8000738 <__aeabi_ldivmod>
 8008082:	b2d2      	uxtb	r2, r2
 8008084:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008086:	1c59      	adds	r1, r3, #1
 8008088:	6539      	str	r1, [r7, #80]	@ 0x50
 800808a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800808c:	440b      	add	r3, r1
 800808e:	3230      	adds	r2, #48	@ 0x30
 8008090:	b2d2      	uxtb	r2, r2
 8008092:	701a      	strb	r2, [r3, #0]
        if (!(number_.fractional /= 10U)) {
 8008094:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008098:	f04f 020a 	mov.w	r2, #10
 800809c:	f04f 0300 	mov.w	r3, #0
 80080a0:	f7f8 fb4a 	bl	8000738 <__aeabi_ldivmod>
 80080a4:	4602      	mov	r2, r0
 80080a6:	460b      	mov	r3, r1
 80080a8:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80080ac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	d003      	beq.n	80080bc <sprint_broken_up_decimal+0xec>
      while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80080b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080b6:	2b1f      	cmp	r3, #31
 80080b8:	d9d8      	bls.n	800806c <sprint_broken_up_decimal+0x9c>
 80080ba:	e008      	b.n	80080ce <sprint_broken_up_decimal+0xfe>
          break;
 80080bc:	bf00      	nop
        }
      }
      // add extra 0s
      while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80080be:	e006      	b.n	80080ce <sprint_broken_up_decimal+0xfe>
        buf[len++] = '0';
 80080c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080c2:	1c5a      	adds	r2, r3, #1
 80080c4:	653a      	str	r2, [r7, #80]	@ 0x50
 80080c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80080c8:	4413      	add	r3, r2
 80080ca:	2230      	movs	r2, #48	@ 0x30
 80080cc:	701a      	strb	r2, [r3, #0]
      while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80080ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080d0:	2b1f      	cmp	r3, #31
 80080d2:	d804      	bhi.n	80080de <sprint_broken_up_decimal+0x10e>
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	1e5a      	subs	r2, r3, #1
 80080d8:	60fa      	str	r2, [r7, #12]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1f0      	bne.n	80080c0 <sprint_broken_up_decimal+0xf0>
      }
      if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80080de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080e0:	2b1f      	cmp	r3, #31
 80080e2:	d838      	bhi.n	8008156 <sprint_broken_up_decimal+0x186>
        buf[len++] = '.';
 80080e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080e6:	1c5a      	adds	r2, r3, #1
 80080e8:	653a      	str	r2, [r7, #80]	@ 0x50
 80080ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80080ec:	4413      	add	r3, r2
 80080ee:	222e      	movs	r2, #46	@ 0x2e
 80080f0:	701a      	strb	r2, [r3, #0]
 80080f2:	e030      	b.n	8008156 <sprint_broken_up_decimal+0x186>
      }
    }
  }
  else {
    if (flags & FLAGS_HASH) {
 80080f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080f6:	f003 0310 	and.w	r3, r3, #16
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d02b      	beq.n	8008156 <sprint_broken_up_decimal+0x186>
      if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80080fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008100:	2b1f      	cmp	r3, #31
 8008102:	d828      	bhi.n	8008156 <sprint_broken_up_decimal+0x186>
        buf[len++] = '.';
 8008104:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008106:	1c5a      	adds	r2, r3, #1
 8008108:	653a      	str	r2, [r7, #80]	@ 0x50
 800810a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800810c:	4413      	add	r3, r2
 800810e:	222e      	movs	r2, #46	@ 0x2e
 8008110:	701a      	strb	r2, [r3, #0]
    }
  }

  // Write the integer part of the number (it comes after the fractional
  // since the character order is reversed)
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8008112:	e020      	b.n	8008156 <sprint_broken_up_decimal+0x186>
    buf[len++] = (char)('0' + (number_.integral % 10));
 8008114:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008118:	f04f 020a 	mov.w	r2, #10
 800811c:	f04f 0300 	mov.w	r3, #0
 8008120:	f7f8 fb0a 	bl	8000738 <__aeabi_ldivmod>
 8008124:	b2d2      	uxtb	r2, r2
 8008126:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008128:	1c59      	adds	r1, r3, #1
 800812a:	6539      	str	r1, [r7, #80]	@ 0x50
 800812c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800812e:	440b      	add	r3, r1
 8008130:	3230      	adds	r2, #48	@ 0x30
 8008132:	b2d2      	uxtb	r2, r2
 8008134:	701a      	strb	r2, [r3, #0]
    if (!(number_.integral /= 10)) {
 8008136:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800813a:	f04f 020a 	mov.w	r2, #10
 800813e:	f04f 0300 	mov.w	r3, #0
 8008142:	f7f8 faf9 	bl	8000738 <__aeabi_ldivmod>
 8008146:	4602      	mov	r2, r0
 8008148:	460b      	mov	r3, r1
 800814a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800814e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008152:	4313      	orrs	r3, r2
 8008154:	d003      	beq.n	800815e <sprint_broken_up_decimal+0x18e>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8008156:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008158:	2b1f      	cmp	r3, #31
 800815a:	d9db      	bls.n	8008114 <sprint_broken_up_decimal+0x144>
 800815c:	e000      	b.n	8008160 <sprint_broken_up_decimal+0x190>
      break;
 800815e:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8008160:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008162:	f003 0302 	and.w	r3, r3, #2
 8008166:	2b00      	cmp	r3, #0
 8008168:	d122      	bne.n	80081b0 <sprint_broken_up_decimal+0x1e0>
 800816a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800816c:	f003 0301 	and.w	r3, r3, #1
 8008170:	2b00      	cmp	r3, #0
 8008172:	d01d      	beq.n	80081b0 <sprint_broken_up_decimal+0x1e0>
    if (width && (number_.is_negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8008174:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008176:	2b00      	cmp	r3, #0
 8008178:	d013      	beq.n	80081a2 <sprint_broken_up_decimal+0x1d2>
 800817a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800817e:	2b00      	cmp	r3, #0
 8008180:	d104      	bne.n	800818c <sprint_broken_up_decimal+0x1bc>
 8008182:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008184:	f003 030c 	and.w	r3, r3, #12
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00a      	beq.n	80081a2 <sprint_broken_up_decimal+0x1d2>
      width--;
 800818c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800818e:	3b01      	subs	r3, #1
 8008190:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8008192:	e006      	b.n	80081a2 <sprint_broken_up_decimal+0x1d2>
      buf[len++] = '0';
 8008194:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008196:	1c5a      	adds	r2, r3, #1
 8008198:	653a      	str	r2, [r7, #80]	@ 0x50
 800819a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800819c:	4413      	add	r3, r2
 800819e:	2230      	movs	r2, #48	@ 0x30
 80081a0:	701a      	strb	r2, [r3, #0]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80081a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80081a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d202      	bcs.n	80081b0 <sprint_broken_up_decimal+0x1e0>
 80081aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081ac:	2b1f      	cmp	r3, #31
 80081ae:	d9f1      	bls.n	8008194 <sprint_broken_up_decimal+0x1c4>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80081b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081b2:	2b1f      	cmp	r3, #31
 80081b4:	d824      	bhi.n	8008200 <sprint_broken_up_decimal+0x230>
    if (number_.is_negative) {
 80081b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d007      	beq.n	80081ce <sprint_broken_up_decimal+0x1fe>
      buf[len++] = '-';
 80081be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081c0:	1c5a      	adds	r2, r3, #1
 80081c2:	653a      	str	r2, [r7, #80]	@ 0x50
 80081c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80081c6:	4413      	add	r3, r2
 80081c8:	222d      	movs	r2, #45	@ 0x2d
 80081ca:	701a      	strb	r2, [r3, #0]
 80081cc:	e018      	b.n	8008200 <sprint_broken_up_decimal+0x230>
    }
    else if (flags & FLAGS_PLUS) {
 80081ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081d0:	f003 0304 	and.w	r3, r3, #4
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d007      	beq.n	80081e8 <sprint_broken_up_decimal+0x218>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80081d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081da:	1c5a      	adds	r2, r3, #1
 80081dc:	653a      	str	r2, [r7, #80]	@ 0x50
 80081de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80081e0:	4413      	add	r3, r2
 80081e2:	222b      	movs	r2, #43	@ 0x2b
 80081e4:	701a      	strb	r2, [r3, #0]
 80081e6:	e00b      	b.n	8008200 <sprint_broken_up_decimal+0x230>
    }
    else if (flags & FLAGS_SPACE) {
 80081e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081ea:	f003 0308 	and.w	r3, r3, #8
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d006      	beq.n	8008200 <sprint_broken_up_decimal+0x230>
      buf[len++] = ' ';
 80081f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081f4:	1c5a      	adds	r2, r3, #1
 80081f6:	653a      	str	r2, [r7, #80]	@ 0x50
 80081f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80081fa:	4413      	add	r3, r2
 80081fc:	2220      	movs	r2, #32
 80081fe:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8008200:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008202:	9303      	str	r3, [sp, #12]
 8008204:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008206:	9302      	str	r3, [sp, #8]
 8008208:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800820a:	9301      	str	r3, [sp, #4]
 800820c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800820e:	9300      	str	r3, [sp, #0]
 8008210:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008212:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008214:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008216:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008218:	f7ff fc20 	bl	8007a5c <_out_rev>
 800821c:	4603      	mov	r3, r0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008228:	b004      	add	sp, #16
 800822a:	4770      	bx	lr

0800822c <sprint_decimal_number>:

      // internal ftoa for fixed decimal floating point
static size_t sprint_decimal_number(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double number, unsigned int precision, unsigned int width, unsigned int flags, char* buf, size_t len)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b098      	sub	sp, #96	@ 0x60
 8008230:	af0c      	add	r7, sp, #48	@ 0x30
 8008232:	6178      	str	r0, [r7, #20]
 8008234:	6139      	str	r1, [r7, #16]
 8008236:	60fa      	str	r2, [r7, #12]
 8008238:	60bb      	str	r3, [r7, #8]
 800823a:	ed87 0b00 	vstr	d0, [r7]
  struct double_components value_ = get_components(number, precision);
 800823e:	f107 0318 	add.w	r3, r7, #24
 8008242:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008244:	ed97 0b00 	vldr	d0, [r7]
 8008248:	4618      	mov	r0, r3
 800824a:	f7ff fdc5 	bl	8007dd8 <get_components>
  return sprint_broken_up_decimal(value_, out, buffer, idx, maxlen, precision, width, flags, buf, len);
 800824e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008250:	930a      	str	r3, [sp, #40]	@ 0x28
 8008252:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008254:	9309      	str	r3, [sp, #36]	@ 0x24
 8008256:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008258:	9308      	str	r3, [sp, #32]
 800825a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800825c:	9307      	str	r3, [sp, #28]
 800825e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008260:	9306      	str	r3, [sp, #24]
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	9305      	str	r3, [sp, #20]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	9304      	str	r3, [sp, #16]
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	9303      	str	r3, [sp, #12]
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	9302      	str	r3, [sp, #8]
 8008272:	466a      	mov	r2, sp
 8008274:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008278:	e893 0003 	ldmia.w	r3, {r0, r1}
 800827c:	e882 0003 	stmia.w	r2, {r0, r1}
 8008280:	f107 0318 	add.w	r3, r7, #24
 8008284:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008286:	f7ff fea3 	bl	8007fd0 <sprint_broken_up_decimal>
 800828a:	4603      	mov	r3, r0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3730      	adds	r7, #48	@ 0x30
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	0000      	movs	r0, r0
	...

08008298 <sprint_floating_point>:
}
#endif  // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS


static size_t sprint_floating_point(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int precision, unsigned int width, unsigned int flags, bool prefer_exponential)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b096      	sub	sp, #88	@ 0x58
 800829c:	af06      	add	r7, sp, #24
 800829e:	6178      	str	r0, [r7, #20]
 80082a0:	6139      	str	r1, [r7, #16]
 80082a2:	60fa      	str	r2, [r7, #12]
 80082a4:	60bb      	str	r3, [r7, #8]
 80082a6:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 80082aa:	2300      	movs	r3, #0
 80082ac:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // test for special values
  if (value != value)
 80082ae:	ed97 6b00 	vldr	d6, [r7]
 80082b2:	ed97 7b00 	vldr	d7, [r7]
 80082b6:	eeb4 6b47 	vcmp.f64	d6, d7
 80082ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082be:	d00f      	beq.n	80082e0 <sprint_floating_point+0x48>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80082c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082c2:	9303      	str	r3, [sp, #12]
 80082c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082c6:	9302      	str	r3, [sp, #8]
 80082c8:	2303      	movs	r3, #3
 80082ca:	9301      	str	r3, [sp, #4]
 80082cc:	4b52      	ldr	r3, [pc, #328]	@ (8008418 <sprint_floating_point+0x180>)
 80082ce:	9300      	str	r3, [sp, #0]
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	68fa      	ldr	r2, [r7, #12]
 80082d4:	6939      	ldr	r1, [r7, #16]
 80082d6:	6978      	ldr	r0, [r7, #20]
 80082d8:	f7ff fbc0 	bl	8007a5c <_out_rev>
 80082dc:	4603      	mov	r3, r0
 80082de:	e087      	b.n	80083f0 <sprint_floating_point+0x158>
  if (value < -DBL_MAX)
 80082e0:	ed97 7b00 	vldr	d7, [r7]
 80082e4:	ed9f 6b44 	vldr	d6, [pc, #272]	@ 80083f8 <sprint_floating_point+0x160>
 80082e8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80082ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082f0:	d50f      	bpl.n	8008312 <sprint_floating_point+0x7a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80082f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082f4:	9303      	str	r3, [sp, #12]
 80082f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082f8:	9302      	str	r3, [sp, #8]
 80082fa:	2304      	movs	r3, #4
 80082fc:	9301      	str	r3, [sp, #4]
 80082fe:	4b47      	ldr	r3, [pc, #284]	@ (800841c <sprint_floating_point+0x184>)
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	6939      	ldr	r1, [r7, #16]
 8008308:	6978      	ldr	r0, [r7, #20]
 800830a:	f7ff fba7 	bl	8007a5c <_out_rev>
 800830e:	4603      	mov	r3, r0
 8008310:	e06e      	b.n	80083f0 <sprint_floating_point+0x158>
  if (value > DBL_MAX)
 8008312:	ed97 7b00 	vldr	d7, [r7]
 8008316:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8008400 <sprint_floating_point+0x168>
 800831a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800831e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008322:	dd1d      	ble.n	8008360 <sprint_floating_point+0xc8>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8008324:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008326:	f003 0304 	and.w	r3, r3, #4
 800832a:	2b00      	cmp	r3, #0
 800832c:	d001      	beq.n	8008332 <sprint_floating_point+0x9a>
 800832e:	4b3c      	ldr	r3, [pc, #240]	@ (8008420 <sprint_floating_point+0x188>)
 8008330:	e000      	b.n	8008334 <sprint_floating_point+0x9c>
 8008332:	4b3c      	ldr	r3, [pc, #240]	@ (8008424 <sprint_floating_point+0x18c>)
 8008334:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008336:	f002 0204 	and.w	r2, r2, #4
 800833a:	2a00      	cmp	r2, #0
 800833c:	d001      	beq.n	8008342 <sprint_floating_point+0xaa>
 800833e:	2204      	movs	r2, #4
 8008340:	e000      	b.n	8008344 <sprint_floating_point+0xac>
 8008342:	2203      	movs	r2, #3
 8008344:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008346:	9103      	str	r1, [sp, #12]
 8008348:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800834a:	9102      	str	r1, [sp, #8]
 800834c:	9201      	str	r2, [sp, #4]
 800834e:	9300      	str	r3, [sp, #0]
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	6939      	ldr	r1, [r7, #16]
 8008356:	6978      	ldr	r0, [r7, #20]
 8008358:	f7ff fb80 	bl	8007a5c <_out_rev>
 800835c:	4603      	mov	r3, r0
 800835e:	e047      	b.n	80083f0 <sprint_floating_point+0x158>

  if (!prefer_exponential && ((value > PRINTF_FLOAT_NOTATION_THRESHOLD) || (value < -PRINTF_FLOAT_NOTATION_THRESHOLD))) {
 8008360:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8008364:	f083 0301 	eor.w	r3, r3, #1
 8008368:	b2db      	uxtb	r3, r3
 800836a:	2b00      	cmp	r3, #0
 800836c:	d013      	beq.n	8008396 <sprint_floating_point+0xfe>
 800836e:	ed97 7b00 	vldr	d7, [r7]
 8008372:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 8008408 <sprint_floating_point+0x170>
 8008376:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800837a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800837e:	dc08      	bgt.n	8008392 <sprint_floating_point+0xfa>
 8008380:	ed97 7b00 	vldr	d7, [r7]
 8008384:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 8008410 <sprint_floating_point+0x178>
 8008388:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800838c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008390:	d501      	bpl.n	8008396 <sprint_floating_point+0xfe>
    // printing hundreds of characters, overflowing any fixed internal buffer and necessitating a more complicated
    // implementation.
#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
    return sprint_exponential_number(out, buffer, idx, maxlen, value, precision, width, flags, buf, len);
#else
    return 0U;
 8008392:	2300      	movs	r3, #0
 8008394:	e02c      	b.n	80083f0 <sprint_floating_point+0x158>
#endif
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8008396:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008398:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800839c:	2b00      	cmp	r3, #0
 800839e:	d10d      	bne.n	80083bc <sprint_floating_point+0x124>
    precision = PRINTF_DEFAULT_FLOAT_PRECISION;
 80083a0:	2306      	movs	r3, #6
 80083a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

  // limit precision so that our integer holding the fractional part does not overflow
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (precision > PRINTF_MAX_SUPPORTED_PRECISION)) {
 80083a4:	e00a      	b.n	80083bc <sprint_floating_point+0x124>
    buf[len++] = '0'; // This respects the precision in terms of result length only
 80083a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083a8:	1c5a      	adds	r2, r3, #1
 80083aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80083ac:	3340      	adds	r3, #64	@ 0x40
 80083ae:	443b      	add	r3, r7
 80083b0:	2230      	movs	r2, #48	@ 0x30
 80083b2:	f803 2c24 	strb.w	r2, [r3, #-36]
    precision--;
 80083b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083b8:	3b01      	subs	r3, #1
 80083ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (precision > PRINTF_MAX_SUPPORTED_PRECISION)) {
 80083bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083be:	2b1f      	cmp	r3, #31
 80083c0:	d802      	bhi.n	80083c8 <sprint_floating_point+0x130>
 80083c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083c4:	2b11      	cmp	r3, #17
 80083c6:	d8ee      	bhi.n	80083a6 <sprint_floating_point+0x10e>
  return
#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
    prefer_exponential ?
      sprint_exponential_number(out, buffer, idx, maxlen, value, precision, width, flags, buf, len) :
#endif
      sprint_decimal_number(out, buffer, idx, maxlen, value, precision, width, flags, buf, len);
 80083c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083ca:	9304      	str	r3, [sp, #16]
 80083cc:	f107 031c 	add.w	r3, r7, #28
 80083d0:	9303      	str	r3, [sp, #12]
 80083d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083d4:	9302      	str	r3, [sp, #8]
 80083d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083d8:	9301      	str	r3, [sp, #4]
 80083da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	ed97 0b00 	vldr	d0, [r7]
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	6939      	ldr	r1, [r7, #16]
 80083e8:	6978      	ldr	r0, [r7, #20]
 80083ea:	f7ff ff1f 	bl	800822c <sprint_decimal_number>
 80083ee:	4603      	mov	r3, r0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3740      	adds	r7, #64	@ 0x40
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	ffffffff 	.word	0xffffffff
 80083fc:	ffefffff 	.word	0xffefffff
 8008400:	ffffffff 	.word	0xffffffff
 8008404:	7fefffff 	.word	0x7fefffff
 8008408:	00000000 	.word	0x00000000
 800840c:	41cdcd65 	.word	0x41cdcd65
 8008410:	00000000 	.word	0x00000000
 8008414:	c1cdcd65 	.word	0xc1cdcd65
 8008418:	0802db48 	.word	0x0802db48
 800841c:	0802db4c 	.word	0x0802db4c
 8008420:	0802db54 	.word	0x0802db54
 8008424:	0802db5c 	.word	0x0802db5c

08008428 <_vsnprintf>:

#endif  // (PRINTF_SUPPORT_DECIMAL_SPECIFIERS || PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS)

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8008428:	b590      	push	{r4, r7, lr}
 800842a:	b09b      	sub	sp, #108	@ 0x6c
 800842c:	af06      	add	r7, sp, #24
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
 8008434:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8008436:	2300      	movs	r3, #0
 8008438:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!buffer) {
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	2b00      	cmp	r3, #0
 800843e:	f040 83e4 	bne.w	8008c0a <_vsnprintf+0x7e2>
    // use null output function
    out = _out_null;
 8008442:	4b9f      	ldr	r3, [pc, #636]	@ (80086c0 <_vsnprintf+0x298>)
 8008444:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 8008446:	e3e0      	b.n	8008c0a <_vsnprintf+0x7e2>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	2b25      	cmp	r3, #37	@ 0x25
 800844e:	d00c      	beq.n	800846a <_vsnprintf+0x42>
      // no
      out(*format, buffer, idx++, maxlen);
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	7818      	ldrb	r0, [r3, #0]
 8008454:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008456:	1c53      	adds	r3, r2, #1
 8008458:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800845a:	68fc      	ldr	r4, [r7, #12]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	68b9      	ldr	r1, [r7, #8]
 8008460:	47a0      	blx	r4
      format++;
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	3301      	adds	r3, #1
 8008466:	603b      	str	r3, [r7, #0]
      continue;
 8008468:	e3cf      	b.n	8008c0a <_vsnprintf+0x7e2>
    }
    else {
      // yes, evaluate it
      format++;
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	3301      	adds	r3, #1
 800846e:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 8008470:	2300      	movs	r3, #0
 8008472:	64fb      	str	r3, [r7, #76]	@ 0x4c
    do {
      switch (*format) {
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	3b20      	subs	r3, #32
 800847a:	2b10      	cmp	r3, #16
 800847c:	d856      	bhi.n	800852c <_vsnprintf+0x104>
 800847e:	a201      	add	r2, pc, #4	@ (adr r2, 8008484 <_vsnprintf+0x5c>)
 8008480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008484:	08008505 	.word	0x08008505
 8008488:	0800852d 	.word	0x0800852d
 800848c:	0800852d 	.word	0x0800852d
 8008490:	08008519 	.word	0x08008519
 8008494:	0800852d 	.word	0x0800852d
 8008498:	0800852d 	.word	0x0800852d
 800849c:	0800852d 	.word	0x0800852d
 80084a0:	0800852d 	.word	0x0800852d
 80084a4:	0800852d 	.word	0x0800852d
 80084a8:	0800852d 	.word	0x0800852d
 80084ac:	0800852d 	.word	0x0800852d
 80084b0:	080084f1 	.word	0x080084f1
 80084b4:	0800852d 	.word	0x0800852d
 80084b8:	080084dd 	.word	0x080084dd
 80084bc:	0800852d 	.word	0x0800852d
 80084c0:	0800852d 	.word	0x0800852d
 80084c4:	080084c9 	.word	0x080084c9
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80084c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084ca:	f043 0301 	orr.w	r3, r3, #1
 80084ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	3301      	adds	r3, #1
 80084d4:	603b      	str	r3, [r7, #0]
 80084d6:	2301      	movs	r3, #1
 80084d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80084da:	e02a      	b.n	8008532 <_vsnprintf+0x10a>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 80084dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084de:	f043 0302 	orr.w	r3, r3, #2
 80084e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	3301      	adds	r3, #1
 80084e8:	603b      	str	r3, [r7, #0]
 80084ea:	2301      	movs	r3, #1
 80084ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80084ee:	e020      	b.n	8008532 <_vsnprintf+0x10a>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 80084f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084f2:	f043 0304 	orr.w	r3, r3, #4
 80084f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	3301      	adds	r3, #1
 80084fc:	603b      	str	r3, [r7, #0]
 80084fe:	2301      	movs	r3, #1
 8008500:	643b      	str	r3, [r7, #64]	@ 0x40
 8008502:	e016      	b.n	8008532 <_vsnprintf+0x10a>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8008504:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008506:	f043 0308 	orr.w	r3, r3, #8
 800850a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	3301      	adds	r3, #1
 8008510:	603b      	str	r3, [r7, #0]
 8008512:	2301      	movs	r3, #1
 8008514:	643b      	str	r3, [r7, #64]	@ 0x40
 8008516:	e00c      	b.n	8008532 <_vsnprintf+0x10a>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8008518:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800851a:	f043 0310 	orr.w	r3, r3, #16
 800851e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	3301      	adds	r3, #1
 8008524:	603b      	str	r3, [r7, #0]
 8008526:	2301      	movs	r3, #1
 8008528:	643b      	str	r3, [r7, #64]	@ 0x40
 800852a:	e002      	b.n	8008532 <_vsnprintf+0x10a>
        default :                                   n = 0U; break;
 800852c:	2300      	movs	r3, #0
 800852e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008530:	bf00      	nop
      }
    } while (n);
 8008532:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008534:	2b00      	cmp	r3, #0
 8008536:	d19d      	bne.n	8008474 <_vsnprintf+0x4c>

    // evaluate width field
    width = 0U;
 8008538:	2300      	movs	r3, #0
 800853a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (_is_digit(*format)) {
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	4618      	mov	r0, r3
 8008542:	f7ff fa50 	bl	80079e6 <_is_digit>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d005      	beq.n	8008558 <_vsnprintf+0x130>
      width = _atoi(&format);
 800854c:	463b      	mov	r3, r7
 800854e:	4618      	mov	r0, r3
 8008550:	f7ff fa60 	bl	8007a14 <_atoi>
 8008554:	64b8      	str	r0, [r7, #72]	@ 0x48
 8008556:	e018      	b.n	800858a <_vsnprintf+0x162>
    }
    else if (*format == '*') {
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	2b2a      	cmp	r3, #42	@ 0x2a
 800855e:	d114      	bne.n	800858a <_vsnprintf+0x162>
      const int w = va_arg(va, int);
 8008560:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008562:	1d1a      	adds	r2, r3, #4
 8008564:	663a      	str	r2, [r7, #96]	@ 0x60
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	62bb      	str	r3, [r7, #40]	@ 0x28
      if (w < 0) {
 800856a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800856c:	2b00      	cmp	r3, #0
 800856e:	da07      	bge.n	8008580 <_vsnprintf+0x158>
        flags |= FLAGS_LEFT;    // reverse padding
 8008570:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008572:	f043 0302 	orr.w	r3, r3, #2
 8008576:	64fb      	str	r3, [r7, #76]	@ 0x4c
        width = (unsigned int)-w;
 8008578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800857a:	425b      	negs	r3, r3
 800857c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800857e:	e001      	b.n	8008584 <_vsnprintf+0x15c>
      }
      else {
        width = (unsigned int)w;
 8008580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008582:	64bb      	str	r3, [r7, #72]	@ 0x48
      }
      format++;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	3301      	adds	r3, #1
 8008588:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 800858a:	2300      	movs	r3, #0
 800858c:	647b      	str	r3, [r7, #68]	@ 0x44
    if (*format == '.') {
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	2b2e      	cmp	r3, #46	@ 0x2e
 8008594:	d124      	bne.n	80085e0 <_vsnprintf+0x1b8>
      flags |= FLAGS_PRECISION;
 8008596:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008598:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800859c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      format++;
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	3301      	adds	r3, #1
 80085a2:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7ff fa1c 	bl	80079e6 <_is_digit>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d005      	beq.n	80085c0 <_vsnprintf+0x198>
        precision = _atoi(&format);
 80085b4:	463b      	mov	r3, r7
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7ff fa2c 	bl	8007a14 <_atoi>
 80085bc:	6478      	str	r0, [r7, #68]	@ 0x44
 80085be:	e00f      	b.n	80085e0 <_vsnprintf+0x1b8>
      }
      else if (*format == '*') {
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80085c6:	d10b      	bne.n	80085e0 <_vsnprintf+0x1b8>
        const int precision_ = (int)va_arg(va, int);
 80085c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80085ca:	1d1a      	adds	r2, r3, #4
 80085cc:	663a      	str	r2, [r7, #96]	@ 0x60
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	627b      	str	r3, [r7, #36]	@ 0x24
        precision = precision_ > 0 ? (unsigned int)precision_ : 0U;
 80085d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80085d8:	647b      	str	r3, [r7, #68]	@ 0x44
        format++;
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	3301      	adds	r3, #1
 80085de:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	3b68      	subs	r3, #104	@ 0x68
 80085e6:	2b12      	cmp	r3, #18
 80085e8:	d866      	bhi.n	80086b8 <_vsnprintf+0x290>
 80085ea:	a201      	add	r2, pc, #4	@ (adr r2, 80085f0 <_vsnprintf+0x1c8>)
 80085ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f0:	08008663 	.word	0x08008663
 80085f4:	080086b9 	.word	0x080086b9
 80085f8:	08008699 	.word	0x08008699
 80085fc:	080086b9 	.word	0x080086b9
 8008600:	0800863d 	.word	0x0800863d
 8008604:	080086b9 	.word	0x080086b9
 8008608:	080086b9 	.word	0x080086b9
 800860c:	080086b9 	.word	0x080086b9
 8008610:	080086b9 	.word	0x080086b9
 8008614:	080086b9 	.word	0x080086b9
 8008618:	080086b9 	.word	0x080086b9
 800861c:	080086b9 	.word	0x080086b9
 8008620:	08008689 	.word	0x08008689
 8008624:	080086b9 	.word	0x080086b9
 8008628:	080086b9 	.word	0x080086b9
 800862c:	080086b9 	.word	0x080086b9
 8008630:	080086b9 	.word	0x080086b9
 8008634:	080086b9 	.word	0x080086b9
 8008638:	080086a9 	.word	0x080086a9
      case 'l' :
        flags |= FLAGS_LONG;
 800863c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800863e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008642:	64fb      	str	r3, [r7, #76]	@ 0x4c
        format++;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	3301      	adds	r3, #1
 8008648:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	2b6c      	cmp	r3, #108	@ 0x6c
 8008650:	d134      	bne.n	80086bc <_vsnprintf+0x294>
          flags |= FLAGS_LONG_LONG;
 8008652:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008654:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008658:	64fb      	str	r3, [r7, #76]	@ 0x4c
          format++;
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	3301      	adds	r3, #1
 800865e:	603b      	str	r3, [r7, #0]
        }
        break;
 8008660:	e02c      	b.n	80086bc <_vsnprintf+0x294>
      case 'h' :
        flags |= FLAGS_SHORT;
 8008662:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008664:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008668:	64fb      	str	r3, [r7, #76]	@ 0x4c
        format++;
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	3301      	adds	r3, #1
 800866e:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	2b68      	cmp	r3, #104	@ 0x68
 8008676:	d125      	bne.n	80086c4 <_vsnprintf+0x29c>
          flags |= FLAGS_CHAR;
 8008678:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800867a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800867e:	64fb      	str	r3, [r7, #76]	@ 0x4c
          format++;
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	3301      	adds	r3, #1
 8008684:	603b      	str	r3, [r7, #0]
        }
        break;
 8008686:	e01d      	b.n	80086c4 <_vsnprintf+0x29c>
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8008688:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800868a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800868e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        format++;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	3301      	adds	r3, #1
 8008694:	603b      	str	r3, [r7, #0]
        break;
 8008696:	e016      	b.n	80086c6 <_vsnprintf+0x29e>
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8008698:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800869a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800869e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        format++;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	3301      	adds	r3, #1
 80086a4:	603b      	str	r3, [r7, #0]
        break;
 80086a6:	e00e      	b.n	80086c6 <_vsnprintf+0x29e>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80086a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
        format++;
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	3301      	adds	r3, #1
 80086b4:	603b      	str	r3, [r7, #0]
        break;
 80086b6:	e006      	b.n	80086c6 <_vsnprintf+0x29e>
      default:
        break;
 80086b8:	bf00      	nop
 80086ba:	e004      	b.n	80086c6 <_vsnprintf+0x29e>
        break;
 80086bc:	bf00      	nop
 80086be:	e002      	b.n	80086c6 <_vsnprintf+0x29e>
 80086c0:	08007965 	.word	0x08007965
        break;
 80086c4:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	2b78      	cmp	r3, #120	@ 0x78
 80086cc:	f300 8290 	bgt.w	8008bf0 <_vsnprintf+0x7c8>
 80086d0:	2b69      	cmp	r3, #105	@ 0x69
 80086d2:	da0b      	bge.n	80086ec <_vsnprintf+0x2c4>
 80086d4:	2b25      	cmp	r3, #37	@ 0x25
 80086d6:	f000 827f 	beq.w	8008bd8 <_vsnprintf+0x7b0>
 80086da:	2b25      	cmp	r3, #37	@ 0x25
 80086dc:	f2c0 8288 	blt.w	8008bf0 <_vsnprintf+0x7c8>
 80086e0:	2b66      	cmp	r3, #102	@ 0x66
 80086e2:	f300 8285 	bgt.w	8008bf0 <_vsnprintf+0x7c8>
 80086e6:	2b46      	cmp	r3, #70	@ 0x46
 80086e8:	da23      	bge.n	8008732 <_vsnprintf+0x30a>
 80086ea:	e281      	b.n	8008bf0 <_vsnprintf+0x7c8>
 80086ec:	3b69      	subs	r3, #105	@ 0x69
 80086ee:	2201      	movs	r2, #1
 80086f0:	fa02 f303 	lsl.w	r3, r2, r3
 80086f4:	f249 0241 	movw	r2, #36929	@ 0x9041
 80086f8:	401a      	ands	r2, r3
 80086fa:	2a00      	cmp	r2, #0
 80086fc:	bf14      	ite	ne
 80086fe:	2201      	movne	r2, #1
 8008700:	2200      	moveq	r2, #0
 8008702:	b2d2      	uxtb	r2, r2
 8008704:	2a00      	cmp	r2, #0
 8008706:	d15d      	bne.n	80087c4 <_vsnprintf+0x39c>
 8008708:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 800870c:	2a00      	cmp	r2, #0
 800870e:	bf14      	ite	ne
 8008710:	2201      	movne	r2, #1
 8008712:	2200      	moveq	r2, #0
 8008714:	b2d2      	uxtb	r2, r2
 8008716:	2a00      	cmp	r2, #0
 8008718:	f040 8227 	bne.w	8008b6a <_vsnprintf+0x742>
 800871c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008720:	2b00      	cmp	r3, #0
 8008722:	bf14      	ite	ne
 8008724:	2301      	movne	r3, #1
 8008726:	2300      	moveq	r3, #0
 8008728:	b2db      	uxtb	r3, r3
 800872a:	2b00      	cmp	r3, #0
 800872c:	f040 81a8 	bne.w	8008a80 <_vsnprintf+0x658>
 8008730:	e25e      	b.n	8008bf0 <_vsnprintf+0x7c8>
 8008732:	3b46      	subs	r3, #70	@ 0x46
 8008734:	2b20      	cmp	r3, #32
 8008736:	f200 825b 	bhi.w	8008bf0 <_vsnprintf+0x7c8>
 800873a:	a201      	add	r2, pc, #4	@ (adr r2, 8008740 <_vsnprintf+0x318>)
 800873c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008740:	080089c1 	.word	0x080089c1
 8008744:	08008bf1 	.word	0x08008bf1
 8008748:	08008bf1 	.word	0x08008bf1
 800874c:	08008bf1 	.word	0x08008bf1
 8008750:	08008bf1 	.word	0x08008bf1
 8008754:	08008bf1 	.word	0x08008bf1
 8008758:	08008bf1 	.word	0x08008bf1
 800875c:	08008bf1 	.word	0x08008bf1
 8008760:	08008bf1 	.word	0x08008bf1
 8008764:	08008bf1 	.word	0x08008bf1
 8008768:	08008bf1 	.word	0x08008bf1
 800876c:	08008bf1 	.word	0x08008bf1
 8008770:	08008bf1 	.word	0x08008bf1
 8008774:	08008bf1 	.word	0x08008bf1
 8008778:	08008bf1 	.word	0x08008bf1
 800877c:	08008bf1 	.word	0x08008bf1
 8008780:	08008bf1 	.word	0x08008bf1
 8008784:	08008bf1 	.word	0x08008bf1
 8008788:	080087c5 	.word	0x080087c5
 800878c:	08008bf1 	.word	0x08008bf1
 8008790:	08008bf1 	.word	0x08008bf1
 8008794:	08008bf1 	.word	0x08008bf1
 8008798:	08008bf1 	.word	0x08008bf1
 800879c:	08008bf1 	.word	0x08008bf1
 80087a0:	08008bf1 	.word	0x08008bf1
 80087a4:	08008bf1 	.word	0x08008bf1
 80087a8:	08008bf1 	.word	0x08008bf1
 80087ac:	08008bf1 	.word	0x08008bf1
 80087b0:	080087c5 	.word	0x080087c5
 80087b4:	08008a0d 	.word	0x08008a0d
 80087b8:	080087c5 	.word	0x080087c5
 80087bc:	08008bf1 	.word	0x08008bf1
 80087c0:	080089c1 	.word	0x080089c1
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        numeric_base_t base;
        if (*format == 'x' || *format == 'X') {
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	2b78      	cmp	r3, #120	@ 0x78
 80087ca:	d003      	beq.n	80087d4 <_vsnprintf+0x3ac>
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	2b58      	cmp	r3, #88	@ 0x58
 80087d2:	d103      	bne.n	80087dc <_vsnprintf+0x3b4>
          base = BASE_HEX;
 80087d4:	2310      	movs	r3, #16
 80087d6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80087da:	e016      	b.n	800880a <_vsnprintf+0x3e2>
        }
        else if (*format == 'o') {
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	2b6f      	cmp	r3, #111	@ 0x6f
 80087e2:	d103      	bne.n	80087ec <_vsnprintf+0x3c4>
          base =  BASE_OCTAL;
 80087e4:	2308      	movs	r3, #8
 80087e6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80087ea:	e00e      	b.n	800880a <_vsnprintf+0x3e2>
        }
        else if (*format == 'b') {
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	2b62      	cmp	r3, #98	@ 0x62
 80087f2:	d103      	bne.n	80087fc <_vsnprintf+0x3d4>
          base =  BASE_BINARY;
 80087f4:	2302      	movs	r3, #2
 80087f6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80087fa:	e006      	b.n	800880a <_vsnprintf+0x3e2>
        }
        else {
          base = BASE_DECIMAL;
 80087fc:	230a      	movs	r3, #10
 80087fe:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8008802:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008804:	f023 0310 	bic.w	r3, r3, #16
 8008808:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }
        // uppercase
        if (*format == 'X') {
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	2b58      	cmp	r3, #88	@ 0x58
 8008810:	d103      	bne.n	800881a <_vsnprintf+0x3f2>
          flags |= FLAGS_UPPERCASE;
 8008812:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008814:	f043 0320 	orr.w	r3, r3, #32
 8008818:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	2b69      	cmp	r3, #105	@ 0x69
 8008820:	d007      	beq.n	8008832 <_vsnprintf+0x40a>
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	2b64      	cmp	r3, #100	@ 0x64
 8008828:	d003      	beq.n	8008832 <_vsnprintf+0x40a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800882a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800882c:	f023 030c 	bic.w	r3, r3, #12
 8008830:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8008832:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008834:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008838:	2b00      	cmp	r3, #0
 800883a:	d003      	beq.n	8008844 <_vsnprintf+0x41c>
          flags &= ~FLAGS_ZEROPAD;
 800883c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800883e:	f023 0301 	bic.w	r3, r3, #1
 8008842:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	2b69      	cmp	r3, #105	@ 0x69
 800884a:	d003      	beq.n	8008854 <_vsnprintf+0x42c>
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	2b64      	cmp	r3, #100	@ 0x64
 8008852:	d160      	bne.n	8008916 <_vsnprintf+0x4ee>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8008854:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008856:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800885a:	2b00      	cmp	r3, #0
 800885c:	f040 80ac 	bne.w	80089b8 <_vsnprintf+0x590>
#if PRINTF_SUPPORT_LONG_LONG
            const long long value = va_arg(va, long long);
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
#endif
          }
          else if (flags & FLAGS_LONG) {
 8008860:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008866:	2b00      	cmp	r3, #0
 8008868:	d01f      	beq.n	80088aa <_vsnprintf+0x482>
            const long value = va_arg(va, long);
 800886a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800886c:	1d1a      	adds	r2, r3, #4
 800886e:	663a      	str	r2, [r7, #96]	@ 0x60
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	617b      	str	r3, [r7, #20]
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	2b00      	cmp	r3, #0
 8008878:	bfb8      	it	lt
 800887a:	425b      	neglt	r3, r3
 800887c:	4619      	mov	r1, r3
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	0fdb      	lsrs	r3, r3, #31
 8008882:	b2db      	uxtb	r3, r3
 8008884:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008886:	9205      	str	r2, [sp, #20]
 8008888:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800888a:	9204      	str	r2, [sp, #16]
 800888c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800888e:	9203      	str	r2, [sp, #12]
 8008890:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8008894:	9202      	str	r2, [sp, #8]
 8008896:	9301      	str	r3, [sp, #4]
 8008898:	9100      	str	r1, [sp, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800889e:	68b9      	ldr	r1, [r7, #8]
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f7ff fa22 	bl	8007cea <print_integer>
 80088a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
          if (flags & FLAGS_LONG_LONG) {
 80088a8:	e086      	b.n	80089b8 <_vsnprintf+0x590>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (signed char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80088aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d005      	beq.n	80088c0 <_vsnprintf+0x498>
 80088b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088b6:	1d1a      	adds	r2, r3, #4
 80088b8:	663a      	str	r2, [r7, #96]	@ 0x60
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	b25b      	sxtb	r3, r3
 80088be:	e00e      	b.n	80088de <_vsnprintf+0x4b6>
 80088c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d005      	beq.n	80088d6 <_vsnprintf+0x4ae>
 80088ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088cc:	1d1a      	adds	r2, r3, #4
 80088ce:	663a      	str	r2, [r7, #96]	@ 0x60
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	b21b      	sxth	r3, r3
 80088d4:	e003      	b.n	80088de <_vsnprintf+0x4b6>
 80088d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088d8:	1d1a      	adds	r2, r3, #4
 80088da:	663a      	str	r2, [r7, #96]	@ 0x60
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	61bb      	str	r3, [r7, #24]
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 80088e0:	69bb      	ldr	r3, [r7, #24]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	bfb8      	it	lt
 80088e6:	425b      	neglt	r3, r3
 80088e8:	4619      	mov	r1, r3
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	0fdb      	lsrs	r3, r3, #31
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80088f2:	9205      	str	r2, [sp, #20]
 80088f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80088f6:	9204      	str	r2, [sp, #16]
 80088f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088fa:	9203      	str	r2, [sp, #12]
 80088fc:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8008900:	9202      	str	r2, [sp, #8]
 8008902:	9301      	str	r3, [sp, #4]
 8008904:	9100      	str	r1, [sp, #0]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800890a:	68b9      	ldr	r1, [r7, #8]
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	f7ff f9ec 	bl	8007cea <print_integer>
 8008912:	63f8      	str	r0, [r7, #60]	@ 0x3c
          if (flags & FLAGS_LONG_LONG) {
 8008914:	e050      	b.n	80089b8 <_vsnprintf+0x590>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8008916:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008918:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800891c:	2b00      	cmp	r3, #0
 800891e:	d14b      	bne.n	80089b8 <_vsnprintf+0x590>
#if PRINTF_SUPPORT_LONG_LONG
            idx = print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) va_arg(va, unsigned long long), false, base, precision, width, flags);
#endif
          }
          else if (flags & FLAGS_LONG) {
 8008920:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008926:	2b00      	cmp	r3, #0
 8008928:	d017      	beq.n	800895a <_vsnprintf+0x532>
            idx = print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) va_arg(va, unsigned long), false, base, precision, width, flags);
 800892a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800892c:	1d1a      	adds	r2, r3, #4
 800892e:	663a      	str	r2, [r7, #96]	@ 0x60
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008934:	9205      	str	r2, [sp, #20]
 8008936:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008938:	9204      	str	r2, [sp, #16]
 800893a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800893c:	9203      	str	r2, [sp, #12]
 800893e:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8008942:	9202      	str	r2, [sp, #8]
 8008944:	2200      	movs	r2, #0
 8008946:	9201      	str	r2, [sp, #4]
 8008948:	9300      	str	r3, [sp, #0]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800894e:	68b9      	ldr	r1, [r7, #8]
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f7ff f9ca 	bl	8007cea <print_integer>
 8008956:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8008958:	e02e      	b.n	80089b8 <_vsnprintf+0x590>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800895a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800895c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008960:	2b00      	cmp	r3, #0
 8008962:	d005      	beq.n	8008970 <_vsnprintf+0x548>
 8008964:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008966:	1d1a      	adds	r2, r3, #4
 8008968:	663a      	str	r2, [r7, #96]	@ 0x60
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	b2db      	uxtb	r3, r3
 800896e:	e00e      	b.n	800898e <_vsnprintf+0x566>
 8008970:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008976:	2b00      	cmp	r3, #0
 8008978:	d005      	beq.n	8008986 <_vsnprintf+0x55e>
 800897a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800897c:	1d1a      	adds	r2, r3, #4
 800897e:	663a      	str	r2, [r7, #96]	@ 0x60
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	b29b      	uxth	r3, r3
 8008984:	e003      	b.n	800898e <_vsnprintf+0x566>
 8008986:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008988:	1d1a      	adds	r2, r3, #4
 800898a:	663a      	str	r2, [r7, #96]	@ 0x60
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	61fb      	str	r3, [r7, #28]
            idx = print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) value, false, base, precision, width, flags);
 8008990:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008992:	9305      	str	r3, [sp, #20]
 8008994:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008996:	9304      	str	r3, [sp, #16]
 8008998:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800899a:	9303      	str	r3, [sp, #12]
 800899c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80089a0:	9302      	str	r3, [sp, #8]
 80089a2:	2300      	movs	r3, #0
 80089a4:	9301      	str	r3, [sp, #4]
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	9300      	str	r3, [sp, #0]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80089ae:	68b9      	ldr	r1, [r7, #8]
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	f7ff f99a 	bl	8007cea <print_integer>
 80089b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
          }
        }
        format++;
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	3301      	adds	r3, #1
 80089bc:	603b      	str	r3, [r7, #0]
        break;
 80089be:	e124      	b.n	8008c0a <_vsnprintf+0x7e2>
      }
#if PRINTF_SUPPORT_DECIMAL_SPECIFIERS
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	2b46      	cmp	r3, #70	@ 0x46
 80089c6:	d103      	bne.n	80089d0 <_vsnprintf+0x5a8>
 80089c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089ca:	f043 0320 	orr.w	r3, r3, #32
 80089ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
        idx = sprint_floating_point(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags, PRINTF_PREFER_DECIMAL);
 80089d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089d2:	3307      	adds	r3, #7
 80089d4:	f023 0307 	bic.w	r3, r3, #7
 80089d8:	f103 0208 	add.w	r2, r3, #8
 80089dc:	663a      	str	r2, [r7, #96]	@ 0x60
 80089de:	ed93 7b00 	vldr	d7, [r3]
 80089e2:	2300      	movs	r3, #0
 80089e4:	9303      	str	r3, [sp, #12]
 80089e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089e8:	9302      	str	r3, [sp, #8]
 80089ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80089ec:	9301      	str	r3, [sp, #4]
 80089ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089f0:	9300      	str	r3, [sp, #0]
 80089f2:	eeb0 0b47 	vmov.f64	d0, d7
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80089fa:	68b9      	ldr	r1, [r7, #8]
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f7ff fc4b 	bl	8008298 <sprint_floating_point>
 8008a02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        format++;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	3301      	adds	r3, #1
 8008a08:	603b      	str	r3, [r7, #0]
        break;
 8008a0a:	e0fe      	b.n	8008c0a <_vsnprintf+0x7e2>
        idx = sprint_floating_point(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags, PRINTF_PREFER_EXPONENTIAL);
        format++;
        break;
#endif  // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
      case 'c' : {
        unsigned int l = 1U;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	637b      	str	r3, [r7, #52]	@ 0x34
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8008a10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a12:	f003 0302 	and.w	r3, r3, #2
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d10e      	bne.n	8008a38 <_vsnprintf+0x610>
          while (l++ < width) {
 8008a1a:	e007      	b.n	8008a2c <_vsnprintf+0x604>
            out(' ', buffer, idx++, maxlen);
 8008a1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008a1e:	1c53      	adds	r3, r2, #1
 8008a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a22:	68fc      	ldr	r4, [r7, #12]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	68b9      	ldr	r1, [r7, #8]
 8008a28:	2020      	movs	r0, #32
 8008a2a:	47a0      	blx	r4
          while (l++ < width) {
 8008a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a2e:	1c5a      	adds	r2, r3, #1
 8008a30:	637a      	str	r2, [r7, #52]	@ 0x34
 8008a32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d8f1      	bhi.n	8008a1c <_vsnprintf+0x5f4>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8008a38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a3a:	1d1a      	adds	r2, r3, #4
 8008a3c:	663a      	str	r2, [r7, #96]	@ 0x60
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	b2d8      	uxtb	r0, r3
 8008a42:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008a44:	1c53      	adds	r3, r2, #1
 8008a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a48:	68fc      	ldr	r4, [r7, #12]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	68b9      	ldr	r1, [r7, #8]
 8008a4e:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8008a50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a52:	f003 0302 	and.w	r3, r3, #2
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00e      	beq.n	8008a78 <_vsnprintf+0x650>
          while (l++ < width) {
 8008a5a:	e007      	b.n	8008a6c <_vsnprintf+0x644>
            out(' ', buffer, idx++, maxlen);
 8008a5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008a5e:	1c53      	adds	r3, r2, #1
 8008a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a62:	68fc      	ldr	r4, [r7, #12]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	68b9      	ldr	r1, [r7, #8]
 8008a68:	2020      	movs	r0, #32
 8008a6a:	47a0      	blx	r4
          while (l++ < width) {
 8008a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a6e:	1c5a      	adds	r2, r3, #1
 8008a70:	637a      	str	r2, [r7, #52]	@ 0x34
 8008a72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d8f1      	bhi.n	8008a5c <_vsnprintf+0x634>
          }
        }
        format++;
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	603b      	str	r3, [r7, #0]
        break;
 8008a7e:	e0c4      	b.n	8008c0a <_vsnprintf+0x7e2>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8008a80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a82:	1d1a      	adds	r2, r3, #4
 8008a84:	663a      	str	r2, [r7, #96]	@ 0x60
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	633b      	str	r3, [r7, #48]	@ 0x30
        if (p == NULL) {
 8008a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d10f      	bne.n	8008ab0 <_vsnprintf+0x688>
          idx = _out_rev(out, buffer, idx, maxlen, ")llun(", 6, width, flags);
 8008a90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a92:	9303      	str	r3, [sp, #12]
 8008a94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a96:	9302      	str	r3, [sp, #8]
 8008a98:	2306      	movs	r3, #6
 8008a9a:	9301      	str	r3, [sp, #4]
 8008a9c:	4b66      	ldr	r3, [pc, #408]	@ (8008c38 <_vsnprintf+0x810>)
 8008a9e:	9300      	str	r3, [sp, #0]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008aa4:	68b9      	ldr	r1, [r7, #8]
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	f7fe ffd8 	bl	8007a5c <_out_rev>
 8008aac:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8008aae:	e058      	b.n	8008b62 <_vsnprintf+0x73a>
        }
        else {
          unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8008ab0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d001      	beq.n	8008aba <_vsnprintf+0x692>
 8008ab6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ab8:	e001      	b.n	8008abe <_vsnprintf+0x696>
 8008aba:	f04f 33ff 	mov.w	r3, #4294967295
 8008abe:	4619      	mov	r1, r3
 8008ac0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ac2:	f7fe ff73 	bl	80079ac <_strnlen_s>
 8008ac6:	62f8      	str	r0, [r7, #44]	@ 0x2c
          // pre padding
          if (flags & FLAGS_PRECISION) {
 8008ac8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d005      	beq.n	8008ade <_vsnprintf+0x6b6>
            l = (l < precision ? l : precision);
 8008ad2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ad4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	bf28      	it	cs
 8008ada:	4613      	movcs	r3, r2
 8008adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
          }
          if (!(flags & FLAGS_LEFT)) {
 8008ade:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ae0:	f003 0302 	and.w	r3, r3, #2
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d11a      	bne.n	8008b1e <_vsnprintf+0x6f6>
            while (l++ < width) {
 8008ae8:	e007      	b.n	8008afa <_vsnprintf+0x6d2>
              out(' ', buffer, idx++, maxlen);
 8008aea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008aec:	1c53      	adds	r3, r2, #1
 8008aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008af0:	68fc      	ldr	r4, [r7, #12]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	68b9      	ldr	r1, [r7, #8]
 8008af6:	2020      	movs	r0, #32
 8008af8:	47a0      	blx	r4
            while (l++ < width) {
 8008afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008afc:	1c5a      	adds	r2, r3, #1
 8008afe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d8f1      	bhi.n	8008aea <_vsnprintf+0x6c2>
            }
          }
          // string output
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8008b06:	e00a      	b.n	8008b1e <_vsnprintf+0x6f6>
            out(*(p++), buffer, idx++, maxlen);
 8008b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0a:	1c5a      	adds	r2, r3, #1
 8008b0c:	633a      	str	r2, [r7, #48]	@ 0x30
 8008b0e:	7818      	ldrb	r0, [r3, #0]
 8008b10:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008b12:	1c53      	adds	r3, r2, #1
 8008b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b16:	68fc      	ldr	r4, [r7, #12]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	68b9      	ldr	r1, [r7, #8]
 8008b1c:	47a0      	blx	r4
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8008b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d009      	beq.n	8008b3a <_vsnprintf+0x712>
 8008b26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d0eb      	beq.n	8008b08 <_vsnprintf+0x6e0>
 8008b30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b32:	1e5a      	subs	r2, r3, #1
 8008b34:	647a      	str	r2, [r7, #68]	@ 0x44
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1e6      	bne.n	8008b08 <_vsnprintf+0x6e0>
          }
          // post padding
          if (flags & FLAGS_LEFT) {
 8008b3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b3c:	f003 0302 	and.w	r3, r3, #2
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00e      	beq.n	8008b62 <_vsnprintf+0x73a>
            while (l++ < width) {
 8008b44:	e007      	b.n	8008b56 <_vsnprintf+0x72e>
              out(' ', buffer, idx++, maxlen);
 8008b46:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008b48:	1c53      	adds	r3, r2, #1
 8008b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b4c:	68fc      	ldr	r4, [r7, #12]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	68b9      	ldr	r1, [r7, #8]
 8008b52:	2020      	movs	r0, #32
 8008b54:	47a0      	blx	r4
            while (l++ < width) {
 8008b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b58:	1c5a      	adds	r2, r3, #1
 8008b5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d8f1      	bhi.n	8008b46 <_vsnprintf+0x71e>
            }
          }
        }
        format++;
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	3301      	adds	r3, #1
 8008b66:	603b      	str	r3, [r7, #0]
        break;
 8008b68:	e04f      	b.n	8008c0a <_vsnprintf+0x7e2>
      }

      case 'p' : {
        width = sizeof(void*) * 2U + 2; // 2 hex chars per byte + the "0x" prefix
 8008b6a:	230a      	movs	r3, #10
 8008b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
        flags |= FLAGS_ZEROPAD | FLAGS_POINTER;
 8008b6e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008b70:	f241 0301 	movw	r3, #4097	@ 0x1001
 8008b74:	4313      	orrs	r3, r2
 8008b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
        uintptr_t value = (uintptr_t)va_arg(va, void*);
 8008b78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b7a:	1d1a      	adds	r2, r3, #4
 8008b7c:	663a      	str	r2, [r7, #96]	@ 0x60
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	623b      	str	r3, [r7, #32]
        idx = (value == (uintptr_t) NULL) ?
          _out_rev(out, buffer, idx, maxlen, ")lin(", 5, width, flags) :
 8008b82:	6a3b      	ldr	r3, [r7, #32]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d10f      	bne.n	8008ba8 <_vsnprintf+0x780>
 8008b88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b8a:	9303      	str	r3, [sp, #12]
 8008b8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b8e:	9302      	str	r3, [sp, #8]
 8008b90:	2305      	movs	r3, #5
 8008b92:	9301      	str	r3, [sp, #4]
 8008b94:	4b29      	ldr	r3, [pc, #164]	@ (8008c3c <_vsnprintf+0x814>)
 8008b96:	9300      	str	r3, [sp, #0]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008b9c:	68b9      	ldr	r1, [r7, #8]
 8008b9e:	68f8      	ldr	r0, [r7, #12]
 8008ba0:	f7fe ff5c 	bl	8007a5c <_out_rev>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	e012      	b.n	8008bce <_vsnprintf+0x7a6>
          print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) value, false, BASE_HEX, precision, width, flags);
 8008ba8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008baa:	9305      	str	r3, [sp, #20]
 8008bac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008bae:	9304      	str	r3, [sp, #16]
 8008bb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bb2:	9303      	str	r3, [sp, #12]
 8008bb4:	2310      	movs	r3, #16
 8008bb6:	9302      	str	r3, [sp, #8]
 8008bb8:	2300      	movs	r3, #0
 8008bba:	9301      	str	r3, [sp, #4]
 8008bbc:	6a3b      	ldr	r3, [r7, #32]
 8008bbe:	9300      	str	r3, [sp, #0]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008bc4:	68b9      	ldr	r1, [r7, #8]
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f7ff f88f 	bl	8007cea <print_integer>
 8008bcc:	4603      	mov	r3, r0
        idx = (value == (uintptr_t) NULL) ?
 8008bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        format++;
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	603b      	str	r3, [r7, #0]
        break;
 8008bd6:	e018      	b.n	8008c0a <_vsnprintf+0x7e2>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8008bd8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008bda:	1c53      	adds	r3, r2, #1
 8008bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bde:	68fc      	ldr	r4, [r7, #12]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	68b9      	ldr	r1, [r7, #8]
 8008be4:	2025      	movs	r0, #37	@ 0x25
 8008be6:	47a0      	blx	r4
        format++;
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	3301      	adds	r3, #1
 8008bec:	603b      	str	r3, [r7, #0]
        break;
 8008bee:	e00c      	b.n	8008c0a <_vsnprintf+0x7e2>

      default :
        out(*format, buffer, idx++, maxlen);
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	7818      	ldrb	r0, [r3, #0]
 8008bf4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008bf6:	1c53      	adds	r3, r2, #1
 8008bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bfa:	68fc      	ldr	r4, [r7, #12]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	68b9      	ldr	r1, [r7, #8]
 8008c00:	47a0      	blx	r4
        format++;
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	3301      	adds	r3, #1
 8008c06:	603b      	str	r3, [r7, #0]
        break;
 8008c08:	bf00      	nop
  while (*format)
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f47f ac1a 	bne.w	8008448 <_vsnprintf+0x20>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8008c14:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d302      	bcc.n	8008c22 <_vsnprintf+0x7fa>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	1e5a      	subs	r2, r3, #1
 8008c20:	e000      	b.n	8008c24 <_vsnprintf+0x7fc>
 8008c22:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008c24:	68fc      	ldr	r4, [r7, #12]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	68b9      	ldr	r1, [r7, #8]
 8008c2a:	2000      	movs	r0, #0
 8008c2c:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8008c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3754      	adds	r7, #84	@ 0x54
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd90      	pop	{r4, r7, pc}
 8008c38:	0802db60 	.word	0x0802db60
 8008c3c:	0802db68 	.word	0x0802db68

08008c40 <vfctprintf>:
  va_end(va);
  return ret;
}

int vfctprintf(void (*out)(char character, void* arg), void* arg, const char* format, va_list va)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b088      	sub	sp, #32
 8008c44:	af02      	add	r7, sp, #8
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	607a      	str	r2, [r7, #4]
 8008c4c:	603b      	str	r3, [r7, #0]
  const out_fct_wrap_type out_fct_wrap = { out, arg };
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	613b      	str	r3, [r7, #16]
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	617b      	str	r3, [r7, #20]
  return _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
 8008c56:	f107 0110 	add.w	r1, r7, #16
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	9300      	str	r3, [sp, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f04f 32ff 	mov.w	r2, #4294967295
 8008c64:	4803      	ldr	r0, [pc, #12]	@ (8008c74 <vfctprintf+0x34>)
 8008c66:	f7ff fbdf 	bl	8008428 <_vsnprintf>
 8008c6a:	4603      	mov	r3, r0
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3718      	adds	r7, #24
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	08007981 	.word	0x08007981

08008c78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008c7e:	4b19      	ldr	r3, [pc, #100]	@ (8008ce4 <MX_DMA_Init+0x6c>)
 8008c80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008c84:	4a17      	ldr	r2, [pc, #92]	@ (8008ce4 <MX_DMA_Init+0x6c>)
 8008c86:	f043 0301 	orr.w	r3, r3, #1
 8008c8a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8008c8e:	4b15      	ldr	r3, [pc, #84]	@ (8008ce4 <MX_DMA_Init+0x6c>)
 8008c90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008c94:	f003 0301 	and.w	r3, r3, #1
 8008c98:	607b      	str	r3, [r7, #4]
 8008c9a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	200b      	movs	r0, #11
 8008ca2:	f001 f824 	bl	8009cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8008ca6:	200b      	movs	r0, #11
 8008ca8:	f001 f83b 	bl	8009d22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8008cac:	2200      	movs	r2, #0
 8008cae:	2100      	movs	r1, #0
 8008cb0:	200c      	movs	r0, #12
 8008cb2:	f001 f81c 	bl	8009cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8008cb6:	200c      	movs	r0, #12
 8008cb8:	f001 f833 	bl	8009d22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	200d      	movs	r0, #13
 8008cc2:	f001 f814 	bl	8009cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8008cc6:	200d      	movs	r0, #13
 8008cc8:	f001 f82b 	bl	8009d22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8008ccc:	2200      	movs	r2, #0
 8008cce:	2100      	movs	r1, #0
 8008cd0:	200e      	movs	r0, #14
 8008cd2:	f001 f80c 	bl	8009cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8008cd6:	200e      	movs	r0, #14
 8008cd8:	f001 f823 	bl	8009d22 <HAL_NVIC_EnableIRQ>

}
 8008cdc:	bf00      	nop
 8008cde:	3708      	adds	r7, #8
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}
 8008ce4:	58024400 	.word	0x58024400

08008ce8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b088      	sub	sp, #32
 8008cec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cee:	f107 030c 	add.w	r3, r7, #12
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	601a      	str	r2, [r3, #0]
 8008cf6:	605a      	str	r2, [r3, #4]
 8008cf8:	609a      	str	r2, [r3, #8]
 8008cfa:	60da      	str	r2, [r3, #12]
 8008cfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cfe:	4b2d      	ldr	r3, [pc, #180]	@ (8008db4 <MX_GPIO_Init+0xcc>)
 8008d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d04:	4a2b      	ldr	r2, [pc, #172]	@ (8008db4 <MX_GPIO_Init+0xcc>)
 8008d06:	f043 0301 	orr.w	r3, r3, #1
 8008d0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008d0e:	4b29      	ldr	r3, [pc, #164]	@ (8008db4 <MX_GPIO_Init+0xcc>)
 8008d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d14:	f003 0301 	and.w	r3, r3, #1
 8008d18:	60bb      	str	r3, [r7, #8]
 8008d1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d1c:	4b25      	ldr	r3, [pc, #148]	@ (8008db4 <MX_GPIO_Init+0xcc>)
 8008d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d22:	4a24      	ldr	r2, [pc, #144]	@ (8008db4 <MX_GPIO_Init+0xcc>)
 8008d24:	f043 0302 	orr.w	r3, r3, #2
 8008d28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008d2c:	4b21      	ldr	r3, [pc, #132]	@ (8008db4 <MX_GPIO_Init+0xcc>)
 8008d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d32:	f003 0302 	and.w	r3, r3, #2
 8008d36:	607b      	str	r3, [r7, #4]
 8008d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008d3a:	4b1e      	ldr	r3, [pc, #120]	@ (8008db4 <MX_GPIO_Init+0xcc>)
 8008d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d40:	4a1c      	ldr	r2, [pc, #112]	@ (8008db4 <MX_GPIO_Init+0xcc>)
 8008d42:	f043 0308 	orr.w	r3, r3, #8
 8008d46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8008db4 <MX_GPIO_Init+0xcc>)
 8008d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d50:	f003 0308 	and.w	r3, r3, #8
 8008d54:	603b      	str	r3, [r7, #0]
 8008d56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S50MV85I_SPI_NSS_GPIO_Port, S50MV85I_SPI_NSS_Pin, GPIO_PIN_SET);
 8008d58:	2201      	movs	r2, #1
 8008d5a:	2110      	movs	r1, #16
 8008d5c:	4816      	ldr	r0, [pc, #88]	@ (8008db8 <MX_GPIO_Init+0xd0>)
 8008d5e:	f004 f887 	bl	800ce70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S50MV85I_SPI_NSS_Pin;
 8008d62:	2310      	movs	r3, #16
 8008d64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d66:	2301      	movs	r3, #1
 8008d68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d6e:	2303      	movs	r3, #3
 8008d70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(S50MV85I_SPI_NSS_GPIO_Port, &GPIO_InitStruct);
 8008d72:	f107 030c 	add.w	r3, r7, #12
 8008d76:	4619      	mov	r1, r3
 8008d78:	480f      	ldr	r0, [pc, #60]	@ (8008db8 <MX_GPIO_Init+0xd0>)
 8008d7a:	f003 feb9 	bl	800caf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S50MV85I_IRQ_Pin;
 8008d7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008d84:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8008d88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(S50MV85I_IRQ_GPIO_Port, &GPIO_InitStruct);
 8008d8e:	f107 030c 	add.w	r3, r7, #12
 8008d92:	4619      	mov	r1, r3
 8008d94:	4809      	ldr	r0, [pc, #36]	@ (8008dbc <MX_GPIO_Init+0xd4>)
 8008d96:	f003 feab 	bl	800caf0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	2102      	movs	r1, #2
 8008d9e:	2028      	movs	r0, #40	@ 0x28
 8008da0:	f000 ffa5 	bl	8009cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008da4:	2028      	movs	r0, #40	@ 0x28
 8008da6:	f000 ffbc 	bl	8009d22 <HAL_NVIC_EnableIRQ>

}
 8008daa:	bf00      	nop
 8008dac:	3720      	adds	r7, #32
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	58024400 	.word	0x58024400
 8008db8:	58020000 	.word	0x58020000
 8008dbc:	58020400 	.word	0x58020400

08008dc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8008dc4:	f000 f88c 	bl	8008ee0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008dc8:	f000 fdde 	bl	8009988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008dcc:	f000 f818 	bl	8008e00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008dd0:	f7ff ff8a 	bl	8008ce8 <MX_GPIO_Init>
  MX_DMA_Init();
 8008dd4:	f7ff ff50 	bl	8008c78 <MX_DMA_Init>
  MX_SPI1_Init();
 8008dd8:	f000 f8b4 	bl	8008f44 <MX_SPI1_Init>
  MX_TIM5_Init();
 8008ddc:	f000 fba8 	bl	8009530 <MX_TIM5_Init>
  MX_TIM6_Init();
 8008de0:	f000 fbfe 	bl	80095e0 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8008de4:	f000 fc7c 	bl	80096e0 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  app_main();
 8008de8:	f00a fe38 	bl	8013a5c <app_main>

  while (1)
  {
	  printf("STM32 PANIC!!!!!!\n\t");
 8008dec:	4803      	ldr	r0, [pc, #12]	@ (8008dfc <main+0x3c>)
 8008dee:	f022 f86d 	bl	802aecc <iprintf>
	  HAL_Delay(100);
 8008df2:	2064      	movs	r0, #100	@ 0x64
 8008df4:	f000 fe5a 	bl	8009aac <HAL_Delay>
	  printf("STM32 PANIC!!!!!!\n\t");
 8008df8:	bf00      	nop
 8008dfa:	e7f7      	b.n	8008dec <main+0x2c>
 8008dfc:	0802db70 	.word	0x0802db70

08008e00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b09c      	sub	sp, #112	@ 0x70
 8008e04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008e06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e0a:	224c      	movs	r2, #76	@ 0x4c
 8008e0c:	2100      	movs	r1, #0
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f022 f8cb 	bl	802afaa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008e14:	1d3b      	adds	r3, r7, #4
 8008e16:	2220      	movs	r2, #32
 8008e18:	2100      	movs	r1, #0
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f022 f8c5 	bl	802afaa <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8008e20:	2002      	movs	r0, #2
 8008e22:	f004 f859 	bl	800ced8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8008e26:	2300      	movs	r3, #0
 8008e28:	603b      	str	r3, [r7, #0]
 8008e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8008edc <SystemClock_Config+0xdc>)
 8008e2c:	699b      	ldr	r3, [r3, #24]
 8008e2e:	4a2b      	ldr	r2, [pc, #172]	@ (8008edc <SystemClock_Config+0xdc>)
 8008e30:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8008e34:	6193      	str	r3, [r2, #24]
 8008e36:	4b29      	ldr	r3, [pc, #164]	@ (8008edc <SystemClock_Config+0xdc>)
 8008e38:	699b      	ldr	r3, [r3, #24]
 8008e3a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008e3e:	603b      	str	r3, [r7, #0]
 8008e40:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8008e42:	bf00      	nop
 8008e44:	4b25      	ldr	r3, [pc, #148]	@ (8008edc <SystemClock_Config+0xdc>)
 8008e46:	699b      	ldr	r3, [r3, #24]
 8008e48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008e4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e50:	d1f8      	bne.n	8008e44 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008e52:	2302      	movs	r3, #2
 8008e54:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8008e56:	2301      	movs	r3, #1
 8008e58:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8008e5a:	2340      	movs	r3, #64	@ 0x40
 8008e5c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008e5e:	2302      	movs	r3, #2
 8008e60:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008e62:	2300      	movs	r3, #0
 8008e64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8008e66:	2304      	movs	r3, #4
 8008e68:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 8008e6a:	2322      	movs	r3, #34	@ 0x22
 8008e6c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8008e72:	2302      	movs	r3, #2
 8008e74:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8008e76:	2302      	movs	r3, #2
 8008e78:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8008e7a:	230c      	movs	r3, #12
 8008e7c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8008e82:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8008e86:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008e88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f004 f85d 	bl	800cf4c <HAL_RCC_OscConfig>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d001      	beq.n	8008e9c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8008e98:	f000 f84e 	bl	8008f38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008e9c:	233f      	movs	r3, #63	@ 0x3f
 8008e9e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008ea0:	2303      	movs	r3, #3
 8008ea2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8008ea8:	2308      	movs	r3, #8
 8008eaa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8008eac:	2340      	movs	r3, #64	@ 0x40
 8008eae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8008eb0:	2340      	movs	r3, #64	@ 0x40
 8008eb2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8008eb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008eb8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8008eba:	2340      	movs	r3, #64	@ 0x40
 8008ebc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8008ebe:	1d3b      	adds	r3, r7, #4
 8008ec0:	2103      	movs	r1, #3
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f004 fc1c 	bl	800d700 <HAL_RCC_ClockConfig>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d001      	beq.n	8008ed2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8008ece:	f000 f833 	bl	8008f38 <Error_Handler>
  }
}
 8008ed2:	bf00      	nop
 8008ed4:	3770      	adds	r7, #112	@ 0x70
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	58024800 	.word	0x58024800

08008ee0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8008ee6:	463b      	mov	r3, r7
 8008ee8:	2200      	movs	r2, #0
 8008eea:	601a      	str	r2, [r3, #0]
 8008eec:	605a      	str	r2, [r3, #4]
 8008eee:	609a      	str	r2, [r3, #8]
 8008ef0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8008ef2:	f000 ff31 	bl	8009d58 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8008efa:	2300      	movs	r3, #0
 8008efc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8008efe:	2300      	movs	r3, #0
 8008f00:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8008f02:	231f      	movs	r3, #31
 8008f04:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8008f06:	2387      	movs	r3, #135	@ 0x87
 8008f08:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8008f12:	2301      	movs	r3, #1
 8008f14:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8008f16:	2301      	movs	r3, #1
 8008f18:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8008f22:	463b      	mov	r3, r7
 8008f24:	4618      	mov	r0, r3
 8008f26:	f000 ff4f 	bl	8009dc8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8008f2a:	2004      	movs	r0, #4
 8008f2c:	f000 ff2c 	bl	8009d88 <HAL_MPU_Enable>

}
 8008f30:	bf00      	nop
 8008f32:	3710      	adds	r7, #16
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008f3c:	b672      	cpsid	i
}
 8008f3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008f40:	bf00      	nop
 8008f42:	e7fd      	b.n	8008f40 <Error_Handler+0x8>

08008f44 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8008f48:	4b29      	ldr	r3, [pc, #164]	@ (8008ff0 <MX_SPI1_Init+0xac>)
 8008f4a:	4a2a      	ldr	r2, [pc, #168]	@ (8008ff4 <MX_SPI1_Init+0xb0>)
 8008f4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008f4e:	4b28      	ldr	r3, [pc, #160]	@ (8008ff0 <MX_SPI1_Init+0xac>)
 8008f50:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8008f54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008f56:	4b26      	ldr	r3, [pc, #152]	@ (8008ff0 <MX_SPI1_Init+0xac>)
 8008f58:	2200      	movs	r2, #0
 8008f5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008f5c:	4b24      	ldr	r3, [pc, #144]	@ (8008ff0 <MX_SPI1_Init+0xac>)
 8008f5e:	2207      	movs	r2, #7
 8008f60:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8008f62:	4b23      	ldr	r3, [pc, #140]	@ (8008ff0 <MX_SPI1_Init+0xac>)
 8008f64:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8008f68:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008f6a:	4b21      	ldr	r3, [pc, #132]	@ (8008ff0 <MX_SPI1_Init+0xac>)
 8008f6c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008f70:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008f72:	4b1f      	ldr	r3, [pc, #124]	@ (8008ff0 <MX_SPI1_Init+0xac>)
 8008f74:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8008f78:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8008f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8008ff0 <MX_SPI1_Init+0xac>)
 8008f7c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8008f80:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008f82:	4b1b      	ldr	r3, [pc, #108]	@ (8008ff0 <MX_SPI1_Init+0xac>)
 8008f84:	2200      	movs	r2, #0
 8008f86:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008f88:	4b19      	ldr	r3, [pc, #100]	@ (8008ff0 <MX_SPI1_Init+0xac>)
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f8e:	4b18      	ldr	r3, [pc, #96]	@ (8008ff0 <MX_SPI1_Init+0xac>)
 8008f90:	2200      	movs	r2, #0
 8008f92:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8008f94:	4b16      	ldr	r3, [pc, #88]	@ (8008ff0 <MX_SPI1_Init+0xac>)
 8008f96:	2200      	movs	r2, #0
 8008f98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008f9a:	4b15      	ldr	r3, [pc, #84]	@ (8008ff0 <MX_SPI1_Init+0xac>)
 8008f9c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008fa0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8008fa2:	4b13      	ldr	r3, [pc, #76]	@ (8008ff0 <MX_SPI1_Init+0xac>)
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8008fa8:	4b11      	ldr	r3, [pc, #68]	@ (8008ff0 <MX_SPI1_Init+0xac>)
 8008faa:	2200      	movs	r2, #0
 8008fac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8008fae:	4b10      	ldr	r3, [pc, #64]	@ (8008ff0 <MX_SPI1_Init+0xac>)
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8008fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8008ff0 <MX_SPI1_Init+0xac>)
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8008fba:	4b0d      	ldr	r3, [pc, #52]	@ (8008ff0 <MX_SPI1_Init+0xac>)
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8008fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8008ff0 <MX_SPI1_Init+0xac>)
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8008fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8008ff0 <MX_SPI1_Init+0xac>)
 8008fc8:	2200      	movs	r2, #0
 8008fca:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 8008fcc:	4b08      	ldr	r3, [pc, #32]	@ (8008ff0 <MX_SPI1_Init+0xac>)
 8008fce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008fd2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8008fd4:	4b06      	ldr	r3, [pc, #24]	@ (8008ff0 <MX_SPI1_Init+0xac>)
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008fda:	4805      	ldr	r0, [pc, #20]	@ (8008ff0 <MX_SPI1_Init+0xac>)
 8008fdc:	f006 fcde 	bl	800f99c <HAL_SPI_Init>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d001      	beq.n	8008fea <MX_SPI1_Init+0xa6>
  {
    Error_Handler();
 8008fe6:	f7ff ffa7 	bl	8008f38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008fea:	bf00      	nop
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	240032f0 	.word	0x240032f0
 8008ff4:	40013000 	.word	0x40013000

08008ff8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b0b8      	sub	sp, #224	@ 0xe0
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009000:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8009004:	2200      	movs	r2, #0
 8009006:	601a      	str	r2, [r3, #0]
 8009008:	605a      	str	r2, [r3, #4]
 800900a:	609a      	str	r2, [r3, #8]
 800900c:	60da      	str	r2, [r3, #12]
 800900e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009010:	f107 0310 	add.w	r3, r7, #16
 8009014:	22b8      	movs	r2, #184	@ 0xb8
 8009016:	2100      	movs	r1, #0
 8009018:	4618      	mov	r0, r3
 800901a:	f021 ffc6 	bl	802afaa <memset>
  if(spiHandle->Instance==SPI1)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a60      	ldr	r2, [pc, #384]	@ (80091a4 <HAL_SPI_MspInit+0x1ac>)
 8009024:	4293      	cmp	r3, r2
 8009026:	f040 80b8 	bne.w	800919a <HAL_SPI_MspInit+0x1a2>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800902a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800902e:	f04f 0300 	mov.w	r3, #0
 8009032:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 32;
 8009036:	2320      	movs	r3, #32
 8009038:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 129;
 800903a:	2381      	movs	r3, #129	@ 0x81
 800903c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800903e:	2302      	movs	r3, #2
 8009040:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8009042:	2302      	movs	r3, #2
 8009044:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8009046:	2302      	movs	r3, #2
 8009048:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 800904a:	2340      	movs	r3, #64	@ 0x40
 800904c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800904e:	2300      	movs	r3, #0
 8009050:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8009052:	2300      	movs	r3, #0
 8009054:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8009056:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800905a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800905c:	f107 0310 	add.w	r3, r7, #16
 8009060:	4618      	mov	r0, r3
 8009062:	f004 fed9 	bl	800de18 <HAL_RCCEx_PeriphCLKConfig>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d001      	beq.n	8009070 <HAL_SPI_MspInit+0x78>
    {
      Error_Handler();
 800906c:	f7ff ff64 	bl	8008f38 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009070:	4b4d      	ldr	r3, [pc, #308]	@ (80091a8 <HAL_SPI_MspInit+0x1b0>)
 8009072:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009076:	4a4c      	ldr	r2, [pc, #304]	@ (80091a8 <HAL_SPI_MspInit+0x1b0>)
 8009078:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800907c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009080:	4b49      	ldr	r3, [pc, #292]	@ (80091a8 <HAL_SPI_MspInit+0x1b0>)
 8009082:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009086:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800908a:	60fb      	str	r3, [r7, #12]
 800908c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800908e:	4b46      	ldr	r3, [pc, #280]	@ (80091a8 <HAL_SPI_MspInit+0x1b0>)
 8009090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009094:	4a44      	ldr	r2, [pc, #272]	@ (80091a8 <HAL_SPI_MspInit+0x1b0>)
 8009096:	f043 0302 	orr.w	r3, r3, #2
 800909a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800909e:	4b42      	ldr	r3, [pc, #264]	@ (80091a8 <HAL_SPI_MspInit+0x1b0>)
 80090a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80090a4:	f003 0302 	and.w	r3, r3, #2
 80090a8:	60bb      	str	r3, [r7, #8]
 80090aa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB3(JTDO/TRACESWO)     ------> SPI1_SCK
    PB4(NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = S50MV85I_SPI_SCK_Pin|S50MV85I_SPI_MISO_Pin|S50MV85I_SPI_MOSI_Pin;
 80090ac:	2338      	movs	r3, #56	@ 0x38
 80090ae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090b2:	2302      	movs	r3, #2
 80090b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090b8:	2300      	movs	r3, #0
 80090ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090be:	2300      	movs	r3, #0
 80090c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80090c4:	2305      	movs	r3, #5
 80090c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80090ca:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80090ce:	4619      	mov	r1, r3
 80090d0:	4836      	ldr	r0, [pc, #216]	@ (80091ac <HAL_SPI_MspInit+0x1b4>)
 80090d2:	f003 fd0d 	bl	800caf0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 80090d6:	4b36      	ldr	r3, [pc, #216]	@ (80091b0 <HAL_SPI_MspInit+0x1b8>)
 80090d8:	4a36      	ldr	r2, [pc, #216]	@ (80091b4 <HAL_SPI_MspInit+0x1bc>)
 80090da:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80090dc:	4b34      	ldr	r3, [pc, #208]	@ (80091b0 <HAL_SPI_MspInit+0x1b8>)
 80090de:	2225      	movs	r2, #37	@ 0x25
 80090e0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80090e2:	4b33      	ldr	r3, [pc, #204]	@ (80091b0 <HAL_SPI_MspInit+0x1b8>)
 80090e4:	2200      	movs	r2, #0
 80090e6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80090e8:	4b31      	ldr	r3, [pc, #196]	@ (80091b0 <HAL_SPI_MspInit+0x1b8>)
 80090ea:	2200      	movs	r2, #0
 80090ec:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80090ee:	4b30      	ldr	r3, [pc, #192]	@ (80091b0 <HAL_SPI_MspInit+0x1b8>)
 80090f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80090f4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80090f6:	4b2e      	ldr	r3, [pc, #184]	@ (80091b0 <HAL_SPI_MspInit+0x1b8>)
 80090f8:	2200      	movs	r2, #0
 80090fa:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80090fc:	4b2c      	ldr	r3, [pc, #176]	@ (80091b0 <HAL_SPI_MspInit+0x1b8>)
 80090fe:	2200      	movs	r2, #0
 8009100:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8009102:	4b2b      	ldr	r3, [pc, #172]	@ (80091b0 <HAL_SPI_MspInit+0x1b8>)
 8009104:	2200      	movs	r2, #0
 8009106:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009108:	4b29      	ldr	r3, [pc, #164]	@ (80091b0 <HAL_SPI_MspInit+0x1b8>)
 800910a:	2200      	movs	r2, #0
 800910c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800910e:	4b28      	ldr	r3, [pc, #160]	@ (80091b0 <HAL_SPI_MspInit+0x1b8>)
 8009110:	2200      	movs	r2, #0
 8009112:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8009114:	4826      	ldr	r0, [pc, #152]	@ (80091b0 <HAL_SPI_MspInit+0x1b8>)
 8009116:	f000 fea7 	bl	8009e68 <HAL_DMA_Init>
 800911a:	4603      	mov	r3, r0
 800911c:	2b00      	cmp	r3, #0
 800911e:	d001      	beq.n	8009124 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8009120:	f7ff ff0a 	bl	8008f38 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4a22      	ldr	r2, [pc, #136]	@ (80091b0 <HAL_SPI_MspInit+0x1b8>)
 8009128:	67da      	str	r2, [r3, #124]	@ 0x7c
 800912a:	4a21      	ldr	r2, [pc, #132]	@ (80091b0 <HAL_SPI_MspInit+0x1b8>)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 8009130:	4b21      	ldr	r3, [pc, #132]	@ (80091b8 <HAL_SPI_MspInit+0x1c0>)
 8009132:	4a22      	ldr	r2, [pc, #136]	@ (80091bc <HAL_SPI_MspInit+0x1c4>)
 8009134:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8009136:	4b20      	ldr	r3, [pc, #128]	@ (80091b8 <HAL_SPI_MspInit+0x1c0>)
 8009138:	2226      	movs	r2, #38	@ 0x26
 800913a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800913c:	4b1e      	ldr	r3, [pc, #120]	@ (80091b8 <HAL_SPI_MspInit+0x1c0>)
 800913e:	2240      	movs	r2, #64	@ 0x40
 8009140:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009142:	4b1d      	ldr	r3, [pc, #116]	@ (80091b8 <HAL_SPI_MspInit+0x1c0>)
 8009144:	2200      	movs	r2, #0
 8009146:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009148:	4b1b      	ldr	r3, [pc, #108]	@ (80091b8 <HAL_SPI_MspInit+0x1c0>)
 800914a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800914e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009150:	4b19      	ldr	r3, [pc, #100]	@ (80091b8 <HAL_SPI_MspInit+0x1c0>)
 8009152:	2200      	movs	r2, #0
 8009154:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009156:	4b18      	ldr	r3, [pc, #96]	@ (80091b8 <HAL_SPI_MspInit+0x1c0>)
 8009158:	2200      	movs	r2, #0
 800915a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800915c:	4b16      	ldr	r3, [pc, #88]	@ (80091b8 <HAL_SPI_MspInit+0x1c0>)
 800915e:	2200      	movs	r2, #0
 8009160:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009162:	4b15      	ldr	r3, [pc, #84]	@ (80091b8 <HAL_SPI_MspInit+0x1c0>)
 8009164:	2200      	movs	r2, #0
 8009166:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009168:	4b13      	ldr	r3, [pc, #76]	@ (80091b8 <HAL_SPI_MspInit+0x1c0>)
 800916a:	2200      	movs	r2, #0
 800916c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800916e:	4812      	ldr	r0, [pc, #72]	@ (80091b8 <HAL_SPI_MspInit+0x1c0>)
 8009170:	f000 fe7a 	bl	8009e68 <HAL_DMA_Init>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d001      	beq.n	800917e <HAL_SPI_MspInit+0x186>
    {
      Error_Handler();
 800917a:	f7ff fedd 	bl	8008f38 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4a0d      	ldr	r2, [pc, #52]	@ (80091b8 <HAL_SPI_MspInit+0x1c0>)
 8009182:	679a      	str	r2, [r3, #120]	@ 0x78
 8009184:	4a0c      	ldr	r2, [pc, #48]	@ (80091b8 <HAL_SPI_MspInit+0x1c0>)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 800918a:	2200      	movs	r2, #0
 800918c:	2101      	movs	r1, #1
 800918e:	2023      	movs	r0, #35	@ 0x23
 8009190:	f000 fdad 	bl	8009cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8009194:	2023      	movs	r0, #35	@ 0x23
 8009196:	f000 fdc4 	bl	8009d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800919a:	bf00      	nop
 800919c:	37e0      	adds	r7, #224	@ 0xe0
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	40013000 	.word	0x40013000
 80091a8:	58024400 	.word	0x58024400
 80091ac:	58020400 	.word	0x58020400
 80091b0:	24003378 	.word	0x24003378
 80091b4:	40020010 	.word	0x40020010
 80091b8:	240033f0 	.word	0x240033f0
 80091bc:	40020028 	.word	0x40020028

080091c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80091c6:	4b0a      	ldr	r3, [pc, #40]	@ (80091f0 <HAL_MspInit+0x30>)
 80091c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80091cc:	4a08      	ldr	r2, [pc, #32]	@ (80091f0 <HAL_MspInit+0x30>)
 80091ce:	f043 0302 	orr.w	r3, r3, #2
 80091d2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80091d6:	4b06      	ldr	r3, [pc, #24]	@ (80091f0 <HAL_MspInit+0x30>)
 80091d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80091dc:	f003 0302 	and.w	r3, r3, #2
 80091e0:	607b      	str	r3, [r7, #4]
 80091e2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80091e4:	bf00      	nop
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr
 80091f0:	58024400 	.word	0x58024400

080091f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80091f4:	b480      	push	{r7}
 80091f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80091f8:	bf00      	nop
 80091fa:	e7fd      	b.n	80091f8 <NMI_Handler+0x4>

080091fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80091fc:	b480      	push	{r7}
 80091fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009200:	bf00      	nop
 8009202:	e7fd      	b.n	8009200 <HardFault_Handler+0x4>

08009204 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009204:	b480      	push	{r7}
 8009206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009208:	bf00      	nop
 800920a:	e7fd      	b.n	8009208 <MemManage_Handler+0x4>

0800920c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800920c:	b480      	push	{r7}
 800920e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009210:	bf00      	nop
 8009212:	e7fd      	b.n	8009210 <BusFault_Handler+0x4>

08009214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009214:	b480      	push	{r7}
 8009216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009218:	bf00      	nop
 800921a:	e7fd      	b.n	8009218 <UsageFault_Handler+0x4>

0800921c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800921c:	b480      	push	{r7}
 800921e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009220:	bf00      	nop
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr

0800922a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800922a:	b480      	push	{r7}
 800922c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800922e:	bf00      	nop
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009238:	b480      	push	{r7}
 800923a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800923c:	bf00      	nop
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr

08009246 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009246:	b580      	push	{r7, lr}
 8009248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	HAL_SYSTICK_Callback();
 800924a:	f00a fc67 	bl	8013b1c <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800924e:	f000 fc0d 	bl	8009a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009252:	bf00      	nop
 8009254:	bd80      	pop	{r7, pc}
	...

08009258 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800925c:	4802      	ldr	r0, [pc, #8]	@ (8009268 <DMA1_Stream0_IRQHandler+0x10>)
 800925e:	f002 f929 	bl	800b4b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8009262:	bf00      	nop
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	24003378 	.word	0x24003378

0800926c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8009270:	4802      	ldr	r0, [pc, #8]	@ (800927c <DMA1_Stream1_IRQHandler+0x10>)
 8009272:	f002 f91f 	bl	800b4b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8009276:	bf00      	nop
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	240033f0 	.word	0x240033f0

08009280 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8009284:	4802      	ldr	r0, [pc, #8]	@ (8009290 <DMA1_Stream2_IRQHandler+0x10>)
 8009286:	f002 f915 	bl	800b4b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800928a:	bf00      	nop
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	24003598 	.word	0x24003598

08009294 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8009298:	4802      	ldr	r0, [pc, #8]	@ (80092a4 <DMA1_Stream3_IRQHandler+0x10>)
 800929a:	f002 f90b 	bl	800b4b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800929e:	bf00      	nop
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	24003610 	.word	0x24003610

080092a8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80092ac:	4802      	ldr	r0, [pc, #8]	@ (80092b8 <SPI1_IRQHandler+0x10>)
 80092ae:	f007 f86f 	bl	8010390 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80092b2:	bf00      	nop
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	240032f0 	.word	0x240032f0

080092bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80092c0:	4803      	ldr	r0, [pc, #12]	@ (80092d0 <USART3_IRQHandler+0x14>)
 80092c2:	f008 fbcf 	bl	8011a64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  USER_UART_IRQHandler(&huart3);
 80092c6:	4802      	ldr	r0, [pc, #8]	@ (80092d0 <USART3_IRQHandler+0x14>)
 80092c8:	f7fe f976 	bl	80075b8 <USER_UART_IRQHandler>
  /* USER CODE END USART3_IRQn 1 */
}
 80092cc:	bf00      	nop
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	24003504 	.word	0x24003504

080092d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S50MV85I_IRQ_Pin);
 80092d8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80092dc:	f003 fde1 	bl	800cea2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80092e0:	bf00      	nop
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80092e8:	4802      	ldr	r0, [pc, #8]	@ (80092f4 <TIM6_DAC_IRQHandler+0x10>)
 80092ea:	f007 fd90 	bl	8010e0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80092ee:	bf00      	nop
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	240034b8 	.word	0x240034b8

080092f8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b086      	sub	sp, #24
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009304:	2300      	movs	r3, #0
 8009306:	617b      	str	r3, [r7, #20]
 8009308:	e00a      	b.n	8009320 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800930a:	f3af 8000 	nop.w
 800930e:	4601      	mov	r1, r0
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	1c5a      	adds	r2, r3, #1
 8009314:	60ba      	str	r2, [r7, #8]
 8009316:	b2ca      	uxtb	r2, r1
 8009318:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	3301      	adds	r3, #1
 800931e:	617b      	str	r3, [r7, #20]
 8009320:	697a      	ldr	r2, [r7, #20]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	429a      	cmp	r2, r3
 8009326:	dbf0      	blt.n	800930a <_read+0x12>
  }

  return len;
 8009328:	687b      	ldr	r3, [r7, #4]
}
 800932a:	4618      	mov	r0, r3
 800932c:	3718      	adds	r7, #24
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b086      	sub	sp, #24
 8009336:	af00      	add	r7, sp, #0
 8009338:	60f8      	str	r0, [r7, #12]
 800933a:	60b9      	str	r1, [r7, #8]
 800933c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800933e:	2300      	movs	r3, #0
 8009340:	617b      	str	r3, [r7, #20]
 8009342:	e009      	b.n	8009358 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	1c5a      	adds	r2, r3, #1
 8009348:	60ba      	str	r2, [r7, #8]
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	4618      	mov	r0, r3
 800934e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	3301      	adds	r3, #1
 8009356:	617b      	str	r3, [r7, #20]
 8009358:	697a      	ldr	r2, [r7, #20]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	429a      	cmp	r2, r3
 800935e:	dbf1      	blt.n	8009344 <_write+0x12>
  }
  return len;
 8009360:	687b      	ldr	r3, [r7, #4]
}
 8009362:	4618      	mov	r0, r3
 8009364:	3718      	adds	r7, #24
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <_close>:

int _close(int file)
{
 800936a:	b480      	push	{r7}
 800936c:	b083      	sub	sp, #12
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009372:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009376:	4618      	mov	r0, r3
 8009378:	370c      	adds	r7, #12
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr

08009382 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009382:	b480      	push	{r7}
 8009384:	b083      	sub	sp, #12
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009392:	605a      	str	r2, [r3, #4]
  return 0;
 8009394:	2300      	movs	r3, #0
}
 8009396:	4618      	mov	r0, r3
 8009398:	370c      	adds	r7, #12
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr

080093a2 <_isatty>:

int _isatty(int file)
{
 80093a2:	b480      	push	{r7}
 80093a4:	b083      	sub	sp, #12
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80093aa:	2301      	movs	r3, #1
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b085      	sub	sp, #20
 80093bc:	af00      	add	r7, sp, #0
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	60b9      	str	r1, [r7, #8]
 80093c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3714      	adds	r7, #20
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr
	...

080093d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b086      	sub	sp, #24
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80093dc:	4a14      	ldr	r2, [pc, #80]	@ (8009430 <_sbrk+0x5c>)
 80093de:	4b15      	ldr	r3, [pc, #84]	@ (8009434 <_sbrk+0x60>)
 80093e0:	1ad3      	subs	r3, r2, r3
 80093e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80093e8:	4b13      	ldr	r3, [pc, #76]	@ (8009438 <_sbrk+0x64>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d102      	bne.n	80093f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80093f0:	4b11      	ldr	r3, [pc, #68]	@ (8009438 <_sbrk+0x64>)
 80093f2:	4a12      	ldr	r2, [pc, #72]	@ (800943c <_sbrk+0x68>)
 80093f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80093f6:	4b10      	ldr	r3, [pc, #64]	@ (8009438 <_sbrk+0x64>)
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4413      	add	r3, r2
 80093fe:	693a      	ldr	r2, [r7, #16]
 8009400:	429a      	cmp	r2, r3
 8009402:	d207      	bcs.n	8009414 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009404:	f021 fe34 	bl	802b070 <__errno>
 8009408:	4603      	mov	r3, r0
 800940a:	220c      	movs	r2, #12
 800940c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800940e:	f04f 33ff 	mov.w	r3, #4294967295
 8009412:	e009      	b.n	8009428 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009414:	4b08      	ldr	r3, [pc, #32]	@ (8009438 <_sbrk+0x64>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800941a:	4b07      	ldr	r3, [pc, #28]	@ (8009438 <_sbrk+0x64>)
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	4413      	add	r3, r2
 8009422:	4a05      	ldr	r2, [pc, #20]	@ (8009438 <_sbrk+0x64>)
 8009424:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009426:	68fb      	ldr	r3, [r7, #12]
}
 8009428:	4618      	mov	r0, r3
 800942a:	3718      	adds	r7, #24
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}
 8009430:	24050000 	.word	0x24050000
 8009434:	00005000 	.word	0x00005000
 8009438:	24003468 	.word	0x24003468
 800943c:	24003818 	.word	0x24003818

08009440 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009440:	b480      	push	{r7}
 8009442:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009444:	4b32      	ldr	r3, [pc, #200]	@ (8009510 <SystemInit+0xd0>)
 8009446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800944a:	4a31      	ldr	r2, [pc, #196]	@ (8009510 <SystemInit+0xd0>)
 800944c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009450:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8009454:	4b2f      	ldr	r3, [pc, #188]	@ (8009514 <SystemInit+0xd4>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f003 030f 	and.w	r3, r3, #15
 800945c:	2b06      	cmp	r3, #6
 800945e:	d807      	bhi.n	8009470 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8009460:	4b2c      	ldr	r3, [pc, #176]	@ (8009514 <SystemInit+0xd4>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f023 030f 	bic.w	r3, r3, #15
 8009468:	4a2a      	ldr	r2, [pc, #168]	@ (8009514 <SystemInit+0xd4>)
 800946a:	f043 0307 	orr.w	r3, r3, #7
 800946e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8009470:	4b29      	ldr	r3, [pc, #164]	@ (8009518 <SystemInit+0xd8>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a28      	ldr	r2, [pc, #160]	@ (8009518 <SystemInit+0xd8>)
 8009476:	f043 0301 	orr.w	r3, r3, #1
 800947a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800947c:	4b26      	ldr	r3, [pc, #152]	@ (8009518 <SystemInit+0xd8>)
 800947e:	2200      	movs	r2, #0
 8009480:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8009482:	4b25      	ldr	r3, [pc, #148]	@ (8009518 <SystemInit+0xd8>)
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	4924      	ldr	r1, [pc, #144]	@ (8009518 <SystemInit+0xd8>)
 8009488:	4b24      	ldr	r3, [pc, #144]	@ (800951c <SystemInit+0xdc>)
 800948a:	4013      	ands	r3, r2
 800948c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800948e:	4b21      	ldr	r3, [pc, #132]	@ (8009514 <SystemInit+0xd4>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f003 0308 	and.w	r3, r3, #8
 8009496:	2b00      	cmp	r3, #0
 8009498:	d007      	beq.n	80094aa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800949a:	4b1e      	ldr	r3, [pc, #120]	@ (8009514 <SystemInit+0xd4>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f023 030f 	bic.w	r3, r3, #15
 80094a2:	4a1c      	ldr	r2, [pc, #112]	@ (8009514 <SystemInit+0xd4>)
 80094a4:	f043 0307 	orr.w	r3, r3, #7
 80094a8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80094aa:	4b1b      	ldr	r3, [pc, #108]	@ (8009518 <SystemInit+0xd8>)
 80094ac:	2200      	movs	r2, #0
 80094ae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80094b0:	4b19      	ldr	r3, [pc, #100]	@ (8009518 <SystemInit+0xd8>)
 80094b2:	2200      	movs	r2, #0
 80094b4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80094b6:	4b18      	ldr	r3, [pc, #96]	@ (8009518 <SystemInit+0xd8>)
 80094b8:	2200      	movs	r2, #0
 80094ba:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80094bc:	4b16      	ldr	r3, [pc, #88]	@ (8009518 <SystemInit+0xd8>)
 80094be:	4a18      	ldr	r2, [pc, #96]	@ (8009520 <SystemInit+0xe0>)
 80094c0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80094c2:	4b15      	ldr	r3, [pc, #84]	@ (8009518 <SystemInit+0xd8>)
 80094c4:	4a17      	ldr	r2, [pc, #92]	@ (8009524 <SystemInit+0xe4>)
 80094c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80094c8:	4b13      	ldr	r3, [pc, #76]	@ (8009518 <SystemInit+0xd8>)
 80094ca:	4a17      	ldr	r2, [pc, #92]	@ (8009528 <SystemInit+0xe8>)
 80094cc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80094ce:	4b12      	ldr	r3, [pc, #72]	@ (8009518 <SystemInit+0xd8>)
 80094d0:	2200      	movs	r2, #0
 80094d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80094d4:	4b10      	ldr	r3, [pc, #64]	@ (8009518 <SystemInit+0xd8>)
 80094d6:	4a14      	ldr	r2, [pc, #80]	@ (8009528 <SystemInit+0xe8>)
 80094d8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80094da:	4b0f      	ldr	r3, [pc, #60]	@ (8009518 <SystemInit+0xd8>)
 80094dc:	2200      	movs	r2, #0
 80094de:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80094e0:	4b0d      	ldr	r3, [pc, #52]	@ (8009518 <SystemInit+0xd8>)
 80094e2:	4a11      	ldr	r2, [pc, #68]	@ (8009528 <SystemInit+0xe8>)
 80094e4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80094e6:	4b0c      	ldr	r3, [pc, #48]	@ (8009518 <SystemInit+0xd8>)
 80094e8:	2200      	movs	r2, #0
 80094ea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80094ec:	4b0a      	ldr	r3, [pc, #40]	@ (8009518 <SystemInit+0xd8>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a09      	ldr	r2, [pc, #36]	@ (8009518 <SystemInit+0xd8>)
 80094f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80094f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80094f8:	4b07      	ldr	r3, [pc, #28]	@ (8009518 <SystemInit+0xd8>)
 80094fa:	2200      	movs	r2, #0
 80094fc:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80094fe:	4b0b      	ldr	r3, [pc, #44]	@ (800952c <SystemInit+0xec>)
 8009500:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8009504:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8009506:	bf00      	nop
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr
 8009510:	e000ed00 	.word	0xe000ed00
 8009514:	52002000 	.word	0x52002000
 8009518:	58024400 	.word	0x58024400
 800951c:	eaf6ed7f 	.word	0xeaf6ed7f
 8009520:	02020200 	.word	0x02020200
 8009524:	01ff0000 	.word	0x01ff0000
 8009528:	01010280 	.word	0x01010280
 800952c:	52004000 	.word	0x52004000

08009530 <MX_TIM5_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b088      	sub	sp, #32
 8009534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009536:	f107 0310 	add.w	r3, r7, #16
 800953a:	2200      	movs	r2, #0
 800953c:	601a      	str	r2, [r3, #0]
 800953e:	605a      	str	r2, [r3, #4]
 8009540:	609a      	str	r2, [r3, #8]
 8009542:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009544:	1d3b      	adds	r3, r7, #4
 8009546:	2200      	movs	r2, #0
 8009548:	601a      	str	r2, [r3, #0]
 800954a:	605a      	str	r2, [r3, #4]
 800954c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800954e:	4b21      	ldr	r3, [pc, #132]	@ (80095d4 <MX_TIM5_Init+0xa4>)
 8009550:	4a21      	ldr	r2, [pc, #132]	@ (80095d8 <MX_TIM5_Init+0xa8>)
 8009552:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = (TIM5_BUS_CLK / 1000000) - 1;
 8009554:	f004 fc34 	bl	800ddc0 <HAL_RCC_GetPCLK1Freq>
 8009558:	4603      	mov	r3, r0
 800955a:	005b      	lsls	r3, r3, #1
 800955c:	4a1f      	ldr	r2, [pc, #124]	@ (80095dc <MX_TIM5_Init+0xac>)
 800955e:	fba2 2303 	umull	r2, r3, r2, r3
 8009562:	0c9b      	lsrs	r3, r3, #18
 8009564:	3b01      	subs	r3, #1
 8009566:	4a1b      	ldr	r2, [pc, #108]	@ (80095d4 <MX_TIM5_Init+0xa4>)
 8009568:	6053      	str	r3, [r2, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800956a:	4b1a      	ldr	r3, [pc, #104]	@ (80095d4 <MX_TIM5_Init+0xa4>)
 800956c:	2200      	movs	r2, #0
 800956e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8009570:	4b18      	ldr	r3, [pc, #96]	@ (80095d4 <MX_TIM5_Init+0xa4>)
 8009572:	f04f 32ff 	mov.w	r2, #4294967295
 8009576:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009578:	4b16      	ldr	r3, [pc, #88]	@ (80095d4 <MX_TIM5_Init+0xa4>)
 800957a:	2200      	movs	r2, #0
 800957c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800957e:	4b15      	ldr	r3, [pc, #84]	@ (80095d4 <MX_TIM5_Init+0xa4>)
 8009580:	2200      	movs	r2, #0
 8009582:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8009584:	4813      	ldr	r0, [pc, #76]	@ (80095d4 <MX_TIM5_Init+0xa4>)
 8009586:	f007 fab8 	bl	8010afa <HAL_TIM_Base_Init>
 800958a:	4603      	mov	r3, r0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d001      	beq.n	8009594 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8009590:	f7ff fcd2 	bl	8008f38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009594:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009598:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800959a:	f107 0310 	add.w	r3, r7, #16
 800959e:	4619      	mov	r1, r3
 80095a0:	480c      	ldr	r0, [pc, #48]	@ (80095d4 <MX_TIM5_Init+0xa4>)
 80095a2:	f007 fd63 	bl	801106c <HAL_TIM_ConfigClockSource>
 80095a6:	4603      	mov	r3, r0
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d001      	beq.n	80095b0 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 80095ac:	f7ff fcc4 	bl	8008f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80095b0:	2320      	movs	r3, #32
 80095b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80095b4:	2300      	movs	r3, #0
 80095b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80095b8:	1d3b      	adds	r3, r7, #4
 80095ba:	4619      	mov	r1, r3
 80095bc:	4805      	ldr	r0, [pc, #20]	@ (80095d4 <MX_TIM5_Init+0xa4>)
 80095be:	f007 ffc5 	bl	801154c <HAL_TIMEx_MasterConfigSynchronization>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d001      	beq.n	80095cc <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80095c8:	f7ff fcb6 	bl	8008f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80095cc:	bf00      	nop
 80095ce:	3720      	adds	r7, #32
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	2400346c 	.word	0x2400346c
 80095d8:	40000c00 	.word	0x40000c00
 80095dc:	431bde83 	.word	0x431bde83

080095e0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80095e6:	1d3b      	adds	r3, r7, #4
 80095e8:	2200      	movs	r2, #0
 80095ea:	601a      	str	r2, [r3, #0]
 80095ec:	605a      	str	r2, [r3, #4]
 80095ee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80095f0:	4b18      	ldr	r3, [pc, #96]	@ (8009654 <MX_TIM6_Init+0x74>)
 80095f2:	4a19      	ldr	r2, [pc, #100]	@ (8009658 <MX_TIM6_Init+0x78>)
 80095f4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = (TIM6_BUS_CLK / 1000000) - 1;
 80095f6:	f004 fbe3 	bl	800ddc0 <HAL_RCC_GetPCLK1Freq>
 80095fa:	4603      	mov	r3, r0
 80095fc:	005b      	lsls	r3, r3, #1
 80095fe:	4a17      	ldr	r2, [pc, #92]	@ (800965c <MX_TIM6_Init+0x7c>)
 8009600:	fba2 2303 	umull	r2, r3, r2, r3
 8009604:	0c9b      	lsrs	r3, r3, #18
 8009606:	3b01      	subs	r3, #1
 8009608:	4a12      	ldr	r2, [pc, #72]	@ (8009654 <MX_TIM6_Init+0x74>)
 800960a:	6053      	str	r3, [r2, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800960c:	4b11      	ldr	r3, [pc, #68]	@ (8009654 <MX_TIM6_Init+0x74>)
 800960e:	2200      	movs	r2, #0
 8009610:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8009612:	4b10      	ldr	r3, [pc, #64]	@ (8009654 <MX_TIM6_Init+0x74>)
 8009614:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009618:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800961a:	4b0e      	ldr	r3, [pc, #56]	@ (8009654 <MX_TIM6_Init+0x74>)
 800961c:	2200      	movs	r2, #0
 800961e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8009620:	480c      	ldr	r0, [pc, #48]	@ (8009654 <MX_TIM6_Init+0x74>)
 8009622:	f007 fa6a 	bl	8010afa <HAL_TIM_Base_Init>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d001      	beq.n	8009630 <MX_TIM6_Init+0x50>
  {
    Error_Handler();
 800962c:	f7ff fc84 	bl	8008f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8009630:	2310      	movs	r3, #16
 8009632:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009634:	2300      	movs	r3, #0
 8009636:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8009638:	1d3b      	adds	r3, r7, #4
 800963a:	4619      	mov	r1, r3
 800963c:	4805      	ldr	r0, [pc, #20]	@ (8009654 <MX_TIM6_Init+0x74>)
 800963e:	f007 ff85 	bl	801154c <HAL_TIMEx_MasterConfigSynchronization>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d001      	beq.n	800964c <MX_TIM6_Init+0x6c>
  {
    Error_Handler();
 8009648:	f7ff fc76 	bl	8008f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800964c:	bf00      	nop
 800964e:	3710      	adds	r7, #16
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}
 8009654:	240034b8 	.word	0x240034b8
 8009658:	40001000 	.word	0x40001000
 800965c:	431bde83 	.word	0x431bde83

08009660 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a19      	ldr	r2, [pc, #100]	@ (80096d4 <HAL_TIM_Base_MspInit+0x74>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d10f      	bne.n	8009692 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8009672:	4b19      	ldr	r3, [pc, #100]	@ (80096d8 <HAL_TIM_Base_MspInit+0x78>)
 8009674:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009678:	4a17      	ldr	r2, [pc, #92]	@ (80096d8 <HAL_TIM_Base_MspInit+0x78>)
 800967a:	f043 0308 	orr.w	r3, r3, #8
 800967e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009682:	4b15      	ldr	r3, [pc, #84]	@ (80096d8 <HAL_TIM_Base_MspInit+0x78>)
 8009684:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009688:	f003 0308 	and.w	r3, r3, #8
 800968c:	60fb      	str	r3, [r7, #12]
 800968e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8009690:	e01b      	b.n	80096ca <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM6)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a11      	ldr	r2, [pc, #68]	@ (80096dc <HAL_TIM_Base_MspInit+0x7c>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d116      	bne.n	80096ca <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800969c:	4b0e      	ldr	r3, [pc, #56]	@ (80096d8 <HAL_TIM_Base_MspInit+0x78>)
 800969e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80096a2:	4a0d      	ldr	r2, [pc, #52]	@ (80096d8 <HAL_TIM_Base_MspInit+0x78>)
 80096a4:	f043 0310 	orr.w	r3, r3, #16
 80096a8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80096ac:	4b0a      	ldr	r3, [pc, #40]	@ (80096d8 <HAL_TIM_Base_MspInit+0x78>)
 80096ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80096b2:	f003 0310 	and.w	r3, r3, #16
 80096b6:	60bb      	str	r3, [r7, #8]
 80096b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 80096ba:	2200      	movs	r2, #0
 80096bc:	2103      	movs	r1, #3
 80096be:	2036      	movs	r0, #54	@ 0x36
 80096c0:	f000 fb15 	bl	8009cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80096c4:	2036      	movs	r0, #54	@ 0x36
 80096c6:	f000 fb2c 	bl	8009d22 <HAL_NVIC_EnableIRQ>
}
 80096ca:	bf00      	nop
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	40000c00 	.word	0x40000c00
 80096d8:	58024400 	.word	0x58024400
 80096dc:	40001000 	.word	0x40001000

080096e0 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80096e4:	4b26      	ldr	r3, [pc, #152]	@ (8009780 <MX_USART3_UART_Init+0xa0>)
 80096e6:	4a27      	ldr	r2, [pc, #156]	@ (8009784 <MX_USART3_UART_Init+0xa4>)
 80096e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80096ea:	4b25      	ldr	r3, [pc, #148]	@ (8009780 <MX_USART3_UART_Init+0xa0>)
 80096ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80096f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80096f2:	4b23      	ldr	r3, [pc, #140]	@ (8009780 <MX_USART3_UART_Init+0xa0>)
 80096f4:	2200      	movs	r2, #0
 80096f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80096f8:	4b21      	ldr	r3, [pc, #132]	@ (8009780 <MX_USART3_UART_Init+0xa0>)
 80096fa:	2200      	movs	r2, #0
 80096fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80096fe:	4b20      	ldr	r3, [pc, #128]	@ (8009780 <MX_USART3_UART_Init+0xa0>)
 8009700:	2200      	movs	r2, #0
 8009702:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8009704:	4b1e      	ldr	r3, [pc, #120]	@ (8009780 <MX_USART3_UART_Init+0xa0>)
 8009706:	220c      	movs	r2, #12
 8009708:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800970a:	4b1d      	ldr	r3, [pc, #116]	@ (8009780 <MX_USART3_UART_Init+0xa0>)
 800970c:	2200      	movs	r2, #0
 800970e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8009710:	4b1b      	ldr	r3, [pc, #108]	@ (8009780 <MX_USART3_UART_Init+0xa0>)
 8009712:	2200      	movs	r2, #0
 8009714:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009716:	4b1a      	ldr	r3, [pc, #104]	@ (8009780 <MX_USART3_UART_Init+0xa0>)
 8009718:	2200      	movs	r2, #0
 800971a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800971c:	4b18      	ldr	r3, [pc, #96]	@ (8009780 <MX_USART3_UART_Init+0xa0>)
 800971e:	2200      	movs	r2, #0
 8009720:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8009722:	4b17      	ldr	r3, [pc, #92]	@ (8009780 <MX_USART3_UART_Init+0xa0>)
 8009724:	2230      	movs	r2, #48	@ 0x30
 8009726:	629a      	str	r2, [r3, #40]	@ 0x28
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8009728:	4b15      	ldr	r3, [pc, #84]	@ (8009780 <MX_USART3_UART_Init+0xa0>)
 800972a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800972e:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart3.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8009730:	4b13      	ldr	r3, [pc, #76]	@ (8009780 <MX_USART3_UART_Init+0xa0>)
 8009732:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009736:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8009738:	4811      	ldr	r0, [pc, #68]	@ (8009780 <MX_USART3_UART_Init+0xa0>)
 800973a:	f007 ffc1 	bl	80116c0 <HAL_UART_Init>
 800973e:	4603      	mov	r3, r0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d001      	beq.n	8009748 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8009744:	f7ff fbf8 	bl	8008f38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009748:	2100      	movs	r1, #0
 800974a:	480d      	ldr	r0, [pc, #52]	@ (8009780 <MX_USART3_UART_Init+0xa0>)
 800974c:	f00a f8bc 	bl	80138c8 <HAL_UARTEx_SetTxFifoThreshold>
 8009750:	4603      	mov	r3, r0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d001      	beq.n	800975a <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8009756:	f7ff fbef 	bl	8008f38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800975a:	2100      	movs	r1, #0
 800975c:	4808      	ldr	r0, [pc, #32]	@ (8009780 <MX_USART3_UART_Init+0xa0>)
 800975e:	f00a f8f1 	bl	8013944 <HAL_UARTEx_SetRxFifoThreshold>
 8009762:	4603      	mov	r3, r0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d001      	beq.n	800976c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8009768:	f7ff fbe6 	bl	8008f38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800976c:	4804      	ldr	r0, [pc, #16]	@ (8009780 <MX_USART3_UART_Init+0xa0>)
 800976e:	f00a f872 	bl	8013856 <HAL_UARTEx_DisableFifoMode>
 8009772:	4603      	mov	r3, r0
 8009774:	2b00      	cmp	r3, #0
 8009776:	d001      	beq.n	800977c <MX_USART3_UART_Init+0x9c>
  {
    Error_Handler();
 8009778:	f7ff fbde 	bl	8008f38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800977c:	bf00      	nop
 800977e:	bd80      	pop	{r7, pc}
 8009780:	24003504 	.word	0x24003504
 8009784:	40004800 	.word	0x40004800

08009788 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b0b8      	sub	sp, #224	@ 0xe0
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009790:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8009794:	2200      	movs	r2, #0
 8009796:	601a      	str	r2, [r3, #0]
 8009798:	605a      	str	r2, [r3, #4]
 800979a:	609a      	str	r2, [r3, #8]
 800979c:	60da      	str	r2, [r3, #12]
 800979e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80097a0:	f107 0310 	add.w	r3, r7, #16
 80097a4:	22b8      	movs	r2, #184	@ 0xb8
 80097a6:	2100      	movs	r1, #0
 80097a8:	4618      	mov	r0, r3
 80097aa:	f021 fbfe 	bl	802afaa <memset>
  if(uartHandle->Instance==USART3)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a59      	ldr	r2, [pc, #356]	@ (8009918 <HAL_UART_MspInit+0x190>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	f040 80aa 	bne.w	800990e <HAL_UART_MspInit+0x186>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80097ba:	f04f 0202 	mov.w	r2, #2
 80097be:	f04f 0300 	mov.w	r3, #0
 80097c2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80097c6:	2300      	movs	r3, #0
 80097c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80097cc:	f107 0310 	add.w	r3, r7, #16
 80097d0:	4618      	mov	r0, r3
 80097d2:	f004 fb21 	bl	800de18 <HAL_RCCEx_PeriphCLKConfig>
 80097d6:	4603      	mov	r3, r0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d001      	beq.n	80097e0 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80097dc:	f7ff fbac 	bl	8008f38 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80097e0:	4b4e      	ldr	r3, [pc, #312]	@ (800991c <HAL_UART_MspInit+0x194>)
 80097e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80097e6:	4a4d      	ldr	r2, [pc, #308]	@ (800991c <HAL_UART_MspInit+0x194>)
 80097e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80097ec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80097f0:	4b4a      	ldr	r3, [pc, #296]	@ (800991c <HAL_UART_MspInit+0x194>)
 80097f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80097f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80097fa:	60fb      	str	r3, [r7, #12]
 80097fc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80097fe:	4b47      	ldr	r3, [pc, #284]	@ (800991c <HAL_UART_MspInit+0x194>)
 8009800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009804:	4a45      	ldr	r2, [pc, #276]	@ (800991c <HAL_UART_MspInit+0x194>)
 8009806:	f043 0308 	orr.w	r3, r3, #8
 800980a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800980e:	4b43      	ldr	r3, [pc, #268]	@ (800991c <HAL_UART_MspInit+0x194>)
 8009810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009814:	f003 0308 	and.w	r3, r3, #8
 8009818:	60bb      	str	r3, [r7, #8]
 800981a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800981c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8009820:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009824:	2302      	movs	r3, #2
 8009826:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800982a:	2300      	movs	r3, #0
 800982c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009830:	2300      	movs	r3, #0
 8009832:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8009836:	2307      	movs	r3, #7
 8009838:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800983c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8009840:	4619      	mov	r1, r3
 8009842:	4837      	ldr	r0, [pc, #220]	@ (8009920 <HAL_UART_MspInit+0x198>)
 8009844:	f003 f954 	bl	800caf0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream2;
 8009848:	4b36      	ldr	r3, [pc, #216]	@ (8009924 <HAL_UART_MspInit+0x19c>)
 800984a:	4a37      	ldr	r2, [pc, #220]	@ (8009928 <HAL_UART_MspInit+0x1a0>)
 800984c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800984e:	4b35      	ldr	r3, [pc, #212]	@ (8009924 <HAL_UART_MspInit+0x19c>)
 8009850:	222d      	movs	r2, #45	@ 0x2d
 8009852:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009854:	4b33      	ldr	r3, [pc, #204]	@ (8009924 <HAL_UART_MspInit+0x19c>)
 8009856:	2200      	movs	r2, #0
 8009858:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800985a:	4b32      	ldr	r3, [pc, #200]	@ (8009924 <HAL_UART_MspInit+0x19c>)
 800985c:	2200      	movs	r2, #0
 800985e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009860:	4b30      	ldr	r3, [pc, #192]	@ (8009924 <HAL_UART_MspInit+0x19c>)
 8009862:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009866:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009868:	4b2e      	ldr	r3, [pc, #184]	@ (8009924 <HAL_UART_MspInit+0x19c>)
 800986a:	2200      	movs	r2, #0
 800986c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800986e:	4b2d      	ldr	r3, [pc, #180]	@ (8009924 <HAL_UART_MspInit+0x19c>)
 8009870:	2200      	movs	r2, #0
 8009872:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8009874:	4b2b      	ldr	r3, [pc, #172]	@ (8009924 <HAL_UART_MspInit+0x19c>)
 8009876:	2200      	movs	r2, #0
 8009878:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800987a:	4b2a      	ldr	r3, [pc, #168]	@ (8009924 <HAL_UART_MspInit+0x19c>)
 800987c:	2200      	movs	r2, #0
 800987e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009880:	4b28      	ldr	r3, [pc, #160]	@ (8009924 <HAL_UART_MspInit+0x19c>)
 8009882:	2200      	movs	r2, #0
 8009884:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8009886:	4827      	ldr	r0, [pc, #156]	@ (8009924 <HAL_UART_MspInit+0x19c>)
 8009888:	f000 faee 	bl	8009e68 <HAL_DMA_Init>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d001      	beq.n	8009896 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8009892:	f7ff fb51 	bl	8008f38 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	4a22      	ldr	r2, [pc, #136]	@ (8009924 <HAL_UART_MspInit+0x19c>)
 800989a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800989e:	4a21      	ldr	r2, [pc, #132]	@ (8009924 <HAL_UART_MspInit+0x19c>)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80098a4:	4b21      	ldr	r3, [pc, #132]	@ (800992c <HAL_UART_MspInit+0x1a4>)
 80098a6:	4a22      	ldr	r2, [pc, #136]	@ (8009930 <HAL_UART_MspInit+0x1a8>)
 80098a8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80098aa:	4b20      	ldr	r3, [pc, #128]	@ (800992c <HAL_UART_MspInit+0x1a4>)
 80098ac:	222e      	movs	r2, #46	@ 0x2e
 80098ae:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80098b0:	4b1e      	ldr	r3, [pc, #120]	@ (800992c <HAL_UART_MspInit+0x1a4>)
 80098b2:	2240      	movs	r2, #64	@ 0x40
 80098b4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80098b6:	4b1d      	ldr	r3, [pc, #116]	@ (800992c <HAL_UART_MspInit+0x1a4>)
 80098b8:	2200      	movs	r2, #0
 80098ba:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80098bc:	4b1b      	ldr	r3, [pc, #108]	@ (800992c <HAL_UART_MspInit+0x1a4>)
 80098be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80098c2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80098c4:	4b19      	ldr	r3, [pc, #100]	@ (800992c <HAL_UART_MspInit+0x1a4>)
 80098c6:	2200      	movs	r2, #0
 80098c8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80098ca:	4b18      	ldr	r3, [pc, #96]	@ (800992c <HAL_UART_MspInit+0x1a4>)
 80098cc:	2200      	movs	r2, #0
 80098ce:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80098d0:	4b16      	ldr	r3, [pc, #88]	@ (800992c <HAL_UART_MspInit+0x1a4>)
 80098d2:	2200      	movs	r2, #0
 80098d4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80098d6:	4b15      	ldr	r3, [pc, #84]	@ (800992c <HAL_UART_MspInit+0x1a4>)
 80098d8:	2200      	movs	r2, #0
 80098da:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80098dc:	4b13      	ldr	r3, [pc, #76]	@ (800992c <HAL_UART_MspInit+0x1a4>)
 80098de:	2200      	movs	r2, #0
 80098e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80098e2:	4812      	ldr	r0, [pc, #72]	@ (800992c <HAL_UART_MspInit+0x1a4>)
 80098e4:	f000 fac0 	bl	8009e68 <HAL_DMA_Init>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d001      	beq.n	80098f2 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 80098ee:	f7ff fb23 	bl	8008f38 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4a0d      	ldr	r2, [pc, #52]	@ (800992c <HAL_UART_MspInit+0x1a4>)
 80098f6:	67da      	str	r2, [r3, #124]	@ 0x7c
 80098f8:	4a0c      	ldr	r2, [pc, #48]	@ (800992c <HAL_UART_MspInit+0x1a4>)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80098fe:	2200      	movs	r2, #0
 8009900:	2100      	movs	r1, #0
 8009902:	2027      	movs	r0, #39	@ 0x27
 8009904:	f000 f9f3 	bl	8009cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8009908:	2027      	movs	r0, #39	@ 0x27
 800990a:	f000 fa0a 	bl	8009d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800990e:	bf00      	nop
 8009910:	37e0      	adds	r7, #224	@ 0xe0
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	40004800 	.word	0x40004800
 800991c:	58024400 	.word	0x58024400
 8009920:	58020c00 	.word	0x58020c00
 8009924:	24003598 	.word	0x24003598
 8009928:	40020040 	.word	0x40020040
 800992c:	24003610 	.word	0x24003610
 8009930:	40020058 	.word	0x40020058

08009934 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8009934:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800996c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8009938:	f7ff fd82 	bl	8009440 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800993c:	480c      	ldr	r0, [pc, #48]	@ (8009970 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800993e:	490d      	ldr	r1, [pc, #52]	@ (8009974 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009940:	4a0d      	ldr	r2, [pc, #52]	@ (8009978 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009944:	e002      	b.n	800994c <LoopCopyDataInit>

08009946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800994a:	3304      	adds	r3, #4

0800994c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800994c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800994e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009950:	d3f9      	bcc.n	8009946 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009952:	4a0a      	ldr	r2, [pc, #40]	@ (800997c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009954:	4c0a      	ldr	r4, [pc, #40]	@ (8009980 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009958:	e001      	b.n	800995e <LoopFillZerobss>

0800995a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800995a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800995c:	3204      	adds	r2, #4

0800995e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800995e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009960:	d3fb      	bcc.n	800995a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009962:	f021 fb8b 	bl	802b07c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009966:	f7ff fa2b 	bl	8008dc0 <main>
  bx  lr
 800996a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800996c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8009970:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8009974:	24000234 	.word	0x24000234
  ldr r2, =_sidata
 8009978:	08032e74 	.word	0x08032e74
  ldr r2, =_sbss
 800997c:	24000234 	.word	0x24000234
  ldr r4, =_ebss
 8009980:	24003814 	.word	0x24003814

08009984 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009984:	e7fe      	b.n	8009984 <ADC3_IRQHandler>
	...

08009988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800998e:	2003      	movs	r0, #3
 8009990:	f000 f9a2 	bl	8009cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009994:	f004 f86a 	bl	800da6c <HAL_RCC_GetSysClockFreq>
 8009998:	4602      	mov	r2, r0
 800999a:	4b15      	ldr	r3, [pc, #84]	@ (80099f0 <HAL_Init+0x68>)
 800999c:	699b      	ldr	r3, [r3, #24]
 800999e:	0a1b      	lsrs	r3, r3, #8
 80099a0:	f003 030f 	and.w	r3, r3, #15
 80099a4:	4913      	ldr	r1, [pc, #76]	@ (80099f4 <HAL_Init+0x6c>)
 80099a6:	5ccb      	ldrb	r3, [r1, r3]
 80099a8:	f003 031f 	and.w	r3, r3, #31
 80099ac:	fa22 f303 	lsr.w	r3, r2, r3
 80099b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80099b2:	4b0f      	ldr	r3, [pc, #60]	@ (80099f0 <HAL_Init+0x68>)
 80099b4:	699b      	ldr	r3, [r3, #24]
 80099b6:	f003 030f 	and.w	r3, r3, #15
 80099ba:	4a0e      	ldr	r2, [pc, #56]	@ (80099f4 <HAL_Init+0x6c>)
 80099bc:	5cd3      	ldrb	r3, [r2, r3]
 80099be:	f003 031f 	and.w	r3, r3, #31
 80099c2:	687a      	ldr	r2, [r7, #4]
 80099c4:	fa22 f303 	lsr.w	r3, r2, r3
 80099c8:	4a0b      	ldr	r2, [pc, #44]	@ (80099f8 <HAL_Init+0x70>)
 80099ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80099cc:	4a0b      	ldr	r2, [pc, #44]	@ (80099fc <HAL_Init+0x74>)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80099d2:	200f      	movs	r0, #15
 80099d4:	f000 f814 	bl	8009a00 <HAL_InitTick>
 80099d8:	4603      	mov	r3, r0
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d001      	beq.n	80099e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	e002      	b.n	80099e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80099e2:	f7ff fbed 	bl	80091c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3708      	adds	r7, #8
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	58024400 	.word	0x58024400
 80099f4:	0802e310 	.word	0x0802e310
 80099f8:	2400005c 	.word	0x2400005c
 80099fc:	24000058 	.word	0x24000058

08009a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b082      	sub	sp, #8
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8009a08:	4b15      	ldr	r3, [pc, #84]	@ (8009a60 <HAL_InitTick+0x60>)
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d101      	bne.n	8009a14 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8009a10:	2301      	movs	r3, #1
 8009a12:	e021      	b.n	8009a58 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8009a14:	4b13      	ldr	r3, [pc, #76]	@ (8009a64 <HAL_InitTick+0x64>)
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	4b11      	ldr	r3, [pc, #68]	@ (8009a60 <HAL_InitTick+0x60>)
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8009a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f000 f987 	bl	8009d3e <HAL_SYSTICK_Config>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d001      	beq.n	8009a3a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8009a36:	2301      	movs	r3, #1
 8009a38:	e00e      	b.n	8009a58 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2b0f      	cmp	r3, #15
 8009a3e:	d80a      	bhi.n	8009a56 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009a40:	2200      	movs	r2, #0
 8009a42:	6879      	ldr	r1, [r7, #4]
 8009a44:	f04f 30ff 	mov.w	r0, #4294967295
 8009a48:	f000 f951 	bl	8009cee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009a4c:	4a06      	ldr	r2, [pc, #24]	@ (8009a68 <HAL_InitTick+0x68>)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009a52:	2300      	movs	r3, #0
 8009a54:	e000      	b.n	8009a58 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8009a56:	2301      	movs	r3, #1
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3708      	adds	r7, #8
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	24000064 	.word	0x24000064
 8009a64:	24000058 	.word	0x24000058
 8009a68:	24000060 	.word	0x24000060

08009a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009a70:	4b06      	ldr	r3, [pc, #24]	@ (8009a8c <HAL_IncTick+0x20>)
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	461a      	mov	r2, r3
 8009a76:	4b06      	ldr	r3, [pc, #24]	@ (8009a90 <HAL_IncTick+0x24>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4413      	add	r3, r2
 8009a7c:	4a04      	ldr	r2, [pc, #16]	@ (8009a90 <HAL_IncTick+0x24>)
 8009a7e:	6013      	str	r3, [r2, #0]
}
 8009a80:	bf00      	nop
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr
 8009a8a:	bf00      	nop
 8009a8c:	24000064 	.word	0x24000064
 8009a90:	24003688 	.word	0x24003688

08009a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009a94:	b480      	push	{r7}
 8009a96:	af00      	add	r7, sp, #0
  return uwTick;
 8009a98:	4b03      	ldr	r3, [pc, #12]	@ (8009aa8 <HAL_GetTick+0x14>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr
 8009aa6:	bf00      	nop
 8009aa8:	24003688 	.word	0x24003688

08009aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009ab4:	f7ff ffee 	bl	8009a94 <HAL_GetTick>
 8009ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ac4:	d005      	beq.n	8009ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8009af0 <HAL_Delay+0x44>)
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	461a      	mov	r2, r3
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	4413      	add	r3, r2
 8009ad0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009ad2:	bf00      	nop
 8009ad4:	f7ff ffde 	bl	8009a94 <HAL_GetTick>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	1ad3      	subs	r3, r2, r3
 8009ade:	68fa      	ldr	r2, [r7, #12]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d8f7      	bhi.n	8009ad4 <HAL_Delay+0x28>
  {
  }
}
 8009ae4:	bf00      	nop
 8009ae6:	bf00      	nop
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	24000064 	.word	0x24000064

08009af4 <__NVIC_SetPriorityGrouping>:
{
 8009af4:	b480      	push	{r7}
 8009af6:	b085      	sub	sp, #20
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f003 0307 	and.w	r3, r3, #7
 8009b02:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009b04:	4b0b      	ldr	r3, [pc, #44]	@ (8009b34 <__NVIC_SetPriorityGrouping+0x40>)
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009b0a:	68ba      	ldr	r2, [r7, #8]
 8009b0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009b10:	4013      	ands	r3, r2
 8009b12:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8009b1c:	4b06      	ldr	r3, [pc, #24]	@ (8009b38 <__NVIC_SetPriorityGrouping+0x44>)
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009b22:	4a04      	ldr	r2, [pc, #16]	@ (8009b34 <__NVIC_SetPriorityGrouping+0x40>)
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	60d3      	str	r3, [r2, #12]
}
 8009b28:	bf00      	nop
 8009b2a:	3714      	adds	r7, #20
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr
 8009b34:	e000ed00 	.word	0xe000ed00
 8009b38:	05fa0000 	.word	0x05fa0000

08009b3c <__NVIC_GetPriorityGrouping>:
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009b40:	4b04      	ldr	r3, [pc, #16]	@ (8009b54 <__NVIC_GetPriorityGrouping+0x18>)
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	0a1b      	lsrs	r3, r3, #8
 8009b46:	f003 0307 	and.w	r3, r3, #7
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr
 8009b54:	e000ed00 	.word	0xe000ed00

08009b58 <__NVIC_EnableIRQ>:
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	4603      	mov	r3, r0
 8009b60:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009b62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	db0b      	blt.n	8009b82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009b6a:	88fb      	ldrh	r3, [r7, #6]
 8009b6c:	f003 021f 	and.w	r2, r3, #31
 8009b70:	4907      	ldr	r1, [pc, #28]	@ (8009b90 <__NVIC_EnableIRQ+0x38>)
 8009b72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009b76:	095b      	lsrs	r3, r3, #5
 8009b78:	2001      	movs	r0, #1
 8009b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8009b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009b82:	bf00      	nop
 8009b84:	370c      	adds	r7, #12
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	e000e100 	.word	0xe000e100

08009b94 <__NVIC_GetPendingIRQ>:
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009b9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	db0e      	blt.n	8009bc4 <__NVIC_GetPendingIRQ+0x30>
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8009ba6:	4a0b      	ldr	r2, [pc, #44]	@ (8009bd4 <__NVIC_GetPendingIRQ+0x40>)
 8009ba8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009bac:	095b      	lsrs	r3, r3, #5
 8009bae:	3340      	adds	r3, #64	@ 0x40
 8009bb0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009bb4:	88fb      	ldrh	r3, [r7, #6]
 8009bb6:	f003 031f 	and.w	r3, r3, #31
 8009bba:	fa22 f303 	lsr.w	r3, r2, r3
 8009bbe:	f003 0301 	and.w	r3, r3, #1
 8009bc2:	e000      	b.n	8009bc6 <__NVIC_GetPendingIRQ+0x32>
    return(0U);
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	370c      	adds	r7, #12
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop
 8009bd4:	e000e100 	.word	0xe000e100

08009bd8 <__NVIC_SetPriority>:
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	4603      	mov	r3, r0
 8009be0:	6039      	str	r1, [r7, #0]
 8009be2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009be4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	db0a      	blt.n	8009c02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	b2da      	uxtb	r2, r3
 8009bf0:	490c      	ldr	r1, [pc, #48]	@ (8009c24 <__NVIC_SetPriority+0x4c>)
 8009bf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009bf6:	0112      	lsls	r2, r2, #4
 8009bf8:	b2d2      	uxtb	r2, r2
 8009bfa:	440b      	add	r3, r1
 8009bfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009c00:	e00a      	b.n	8009c18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	b2da      	uxtb	r2, r3
 8009c06:	4908      	ldr	r1, [pc, #32]	@ (8009c28 <__NVIC_SetPriority+0x50>)
 8009c08:	88fb      	ldrh	r3, [r7, #6]
 8009c0a:	f003 030f 	and.w	r3, r3, #15
 8009c0e:	3b04      	subs	r3, #4
 8009c10:	0112      	lsls	r2, r2, #4
 8009c12:	b2d2      	uxtb	r2, r2
 8009c14:	440b      	add	r3, r1
 8009c16:	761a      	strb	r2, [r3, #24]
}
 8009c18:	bf00      	nop
 8009c1a:	370c      	adds	r7, #12
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr
 8009c24:	e000e100 	.word	0xe000e100
 8009c28:	e000ed00 	.word	0xe000ed00

08009c2c <NVIC_EncodePriority>:
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b089      	sub	sp, #36	@ 0x24
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	60b9      	str	r1, [r7, #8]
 8009c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f003 0307 	and.w	r3, r3, #7
 8009c3e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009c40:	69fb      	ldr	r3, [r7, #28]
 8009c42:	f1c3 0307 	rsb	r3, r3, #7
 8009c46:	2b04      	cmp	r3, #4
 8009c48:	bf28      	it	cs
 8009c4a:	2304      	movcs	r3, #4
 8009c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009c4e:	69fb      	ldr	r3, [r7, #28]
 8009c50:	3304      	adds	r3, #4
 8009c52:	2b06      	cmp	r3, #6
 8009c54:	d902      	bls.n	8009c5c <NVIC_EncodePriority+0x30>
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	3b03      	subs	r3, #3
 8009c5a:	e000      	b.n	8009c5e <NVIC_EncodePriority+0x32>
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009c60:	f04f 32ff 	mov.w	r2, #4294967295
 8009c64:	69bb      	ldr	r3, [r7, #24]
 8009c66:	fa02 f303 	lsl.w	r3, r2, r3
 8009c6a:	43da      	mvns	r2, r3
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	401a      	ands	r2, r3
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009c74:	f04f 31ff 	mov.w	r1, #4294967295
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8009c7e:	43d9      	mvns	r1, r3
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009c84:	4313      	orrs	r3, r2
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3724      	adds	r7, #36	@ 0x24
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr
	...

08009c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009ca4:	d301      	bcc.n	8009caa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	e00f      	b.n	8009cca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009caa:	4a0a      	ldr	r2, [pc, #40]	@ (8009cd4 <SysTick_Config+0x40>)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009cb2:	210f      	movs	r1, #15
 8009cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb8:	f7ff ff8e 	bl	8009bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009cbc:	4b05      	ldr	r3, [pc, #20]	@ (8009cd4 <SysTick_Config+0x40>)
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009cc2:	4b04      	ldr	r3, [pc, #16]	@ (8009cd4 <SysTick_Config+0x40>)
 8009cc4:	2207      	movs	r2, #7
 8009cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009cc8:	2300      	movs	r3, #0
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3708      	adds	r7, #8
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	e000e010 	.word	0xe000e010

08009cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f7ff ff07 	bl	8009af4 <__NVIC_SetPriorityGrouping>
}
 8009ce6:	bf00      	nop
 8009ce8:	3708      	adds	r7, #8
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b086      	sub	sp, #24
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	60b9      	str	r1, [r7, #8]
 8009cf8:	607a      	str	r2, [r7, #4]
 8009cfa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009cfc:	f7ff ff1e 	bl	8009b3c <__NVIC_GetPriorityGrouping>
 8009d00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	68b9      	ldr	r1, [r7, #8]
 8009d06:	6978      	ldr	r0, [r7, #20]
 8009d08:	f7ff ff90 	bl	8009c2c <NVIC_EncodePriority>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009d12:	4611      	mov	r1, r2
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7ff ff5f 	bl	8009bd8 <__NVIC_SetPriority>
}
 8009d1a:	bf00      	nop
 8009d1c:	3718      	adds	r7, #24
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b082      	sub	sp, #8
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	4603      	mov	r3, r0
 8009d2a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009d2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7ff ff11 	bl	8009b58 <__NVIC_EnableIRQ>
}
 8009d36:	bf00      	nop
 8009d38:	3708      	adds	r7, #8
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b082      	sub	sp, #8
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f7ff ffa4 	bl	8009c94 <SysTick_Config>
 8009d4c:	4603      	mov	r3, r0
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3708      	adds	r7, #8
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
	...

08009d58 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8009d5c:	f3bf 8f5f 	dmb	sy
}
 8009d60:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8009d62:	4b07      	ldr	r3, [pc, #28]	@ (8009d80 <HAL_MPU_Disable+0x28>)
 8009d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d66:	4a06      	ldr	r2, [pc, #24]	@ (8009d80 <HAL_MPU_Disable+0x28>)
 8009d68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d6c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8009d6e:	4b05      	ldr	r3, [pc, #20]	@ (8009d84 <HAL_MPU_Disable+0x2c>)
 8009d70:	2200      	movs	r2, #0
 8009d72:	605a      	str	r2, [r3, #4]
}
 8009d74:	bf00      	nop
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
 8009d7e:	bf00      	nop
 8009d80:	e000ed00 	.word	0xe000ed00
 8009d84:	e000ed90 	.word	0xe000ed90

08009d88 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8009d90:	4a0b      	ldr	r2, [pc, #44]	@ (8009dc0 <HAL_MPU_Enable+0x38>)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f043 0301 	orr.w	r3, r3, #1
 8009d98:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8009d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8009dc4 <HAL_MPU_Enable+0x3c>)
 8009d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d9e:	4a09      	ldr	r2, [pc, #36]	@ (8009dc4 <HAL_MPU_Enable+0x3c>)
 8009da0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009da4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8009da6:	f3bf 8f4f 	dsb	sy
}
 8009daa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009dac:	f3bf 8f6f 	isb	sy
}
 8009db0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8009db2:	bf00      	nop
 8009db4:	370c      	adds	r7, #12
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop
 8009dc0:	e000ed90 	.word	0xe000ed90
 8009dc4:	e000ed00 	.word	0xe000ed00

08009dc8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	785a      	ldrb	r2, [r3, #1]
 8009dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8009e44 <HAL_MPU_ConfigRegion+0x7c>)
 8009dd6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8009dd8:	4b1a      	ldr	r3, [pc, #104]	@ (8009e44 <HAL_MPU_ConfigRegion+0x7c>)
 8009dda:	691b      	ldr	r3, [r3, #16]
 8009ddc:	4a19      	ldr	r2, [pc, #100]	@ (8009e44 <HAL_MPU_ConfigRegion+0x7c>)
 8009dde:	f023 0301 	bic.w	r3, r3, #1
 8009de2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8009de4:	4a17      	ldr	r2, [pc, #92]	@ (8009e44 <HAL_MPU_ConfigRegion+0x7c>)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	7b1b      	ldrb	r3, [r3, #12]
 8009df0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	7adb      	ldrb	r3, [r3, #11]
 8009df6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009df8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	7a9b      	ldrb	r3, [r3, #10]
 8009dfe:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8009e00:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	7b5b      	ldrb	r3, [r3, #13]
 8009e06:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8009e08:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	7b9b      	ldrb	r3, [r3, #14]
 8009e0e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8009e10:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	7bdb      	ldrb	r3, [r3, #15]
 8009e16:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8009e18:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	7a5b      	ldrb	r3, [r3, #9]
 8009e1e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8009e20:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	7a1b      	ldrb	r3, [r3, #8]
 8009e26:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8009e28:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8009e2a:	687a      	ldr	r2, [r7, #4]
 8009e2c:	7812      	ldrb	r2, [r2, #0]
 8009e2e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009e30:	4a04      	ldr	r2, [pc, #16]	@ (8009e44 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8009e32:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009e34:	6113      	str	r3, [r2, #16]
}
 8009e36:	bf00      	nop
 8009e38:	370c      	adds	r7, #12
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr
 8009e42:	bf00      	nop
 8009e44:	e000ed90 	.word	0xe000ed90

08009e48 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval status  - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	4603      	mov	r3, r0
 8009e50:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 8009e52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009e56:	4618      	mov	r0, r3
 8009e58:	f7ff fe9c 	bl	8009b94 <__NVIC_GetPendingIRQ>
 8009e5c:	4603      	mov	r3, r0
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3708      	adds	r7, #8
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
	...

08009e68 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b086      	sub	sp, #24
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8009e70:	f7ff fe10 	bl	8009a94 <HAL_GetTick>
 8009e74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d101      	bne.n	8009e80 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	e312      	b.n	800a4a6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a66      	ldr	r2, [pc, #408]	@ (800a020 <HAL_DMA_Init+0x1b8>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d04a      	beq.n	8009f20 <HAL_DMA_Init+0xb8>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a65      	ldr	r2, [pc, #404]	@ (800a024 <HAL_DMA_Init+0x1bc>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d045      	beq.n	8009f20 <HAL_DMA_Init+0xb8>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a63      	ldr	r2, [pc, #396]	@ (800a028 <HAL_DMA_Init+0x1c0>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d040      	beq.n	8009f20 <HAL_DMA_Init+0xb8>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4a62      	ldr	r2, [pc, #392]	@ (800a02c <HAL_DMA_Init+0x1c4>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d03b      	beq.n	8009f20 <HAL_DMA_Init+0xb8>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a60      	ldr	r2, [pc, #384]	@ (800a030 <HAL_DMA_Init+0x1c8>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d036      	beq.n	8009f20 <HAL_DMA_Init+0xb8>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a5f      	ldr	r2, [pc, #380]	@ (800a034 <HAL_DMA_Init+0x1cc>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d031      	beq.n	8009f20 <HAL_DMA_Init+0xb8>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a5d      	ldr	r2, [pc, #372]	@ (800a038 <HAL_DMA_Init+0x1d0>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d02c      	beq.n	8009f20 <HAL_DMA_Init+0xb8>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a5c      	ldr	r2, [pc, #368]	@ (800a03c <HAL_DMA_Init+0x1d4>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d027      	beq.n	8009f20 <HAL_DMA_Init+0xb8>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4a5a      	ldr	r2, [pc, #360]	@ (800a040 <HAL_DMA_Init+0x1d8>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d022      	beq.n	8009f20 <HAL_DMA_Init+0xb8>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a59      	ldr	r2, [pc, #356]	@ (800a044 <HAL_DMA_Init+0x1dc>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d01d      	beq.n	8009f20 <HAL_DMA_Init+0xb8>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a57      	ldr	r2, [pc, #348]	@ (800a048 <HAL_DMA_Init+0x1e0>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d018      	beq.n	8009f20 <HAL_DMA_Init+0xb8>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4a56      	ldr	r2, [pc, #344]	@ (800a04c <HAL_DMA_Init+0x1e4>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d013      	beq.n	8009f20 <HAL_DMA_Init+0xb8>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a54      	ldr	r2, [pc, #336]	@ (800a050 <HAL_DMA_Init+0x1e8>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d00e      	beq.n	8009f20 <HAL_DMA_Init+0xb8>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a53      	ldr	r2, [pc, #332]	@ (800a054 <HAL_DMA_Init+0x1ec>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d009      	beq.n	8009f20 <HAL_DMA_Init+0xb8>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a51      	ldr	r2, [pc, #324]	@ (800a058 <HAL_DMA_Init+0x1f0>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d004      	beq.n	8009f20 <HAL_DMA_Init+0xb8>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a50      	ldr	r2, [pc, #320]	@ (800a05c <HAL_DMA_Init+0x1f4>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d101      	bne.n	8009f24 <HAL_DMA_Init+0xbc>
 8009f20:	2301      	movs	r3, #1
 8009f22:	e000      	b.n	8009f26 <HAL_DMA_Init+0xbe>
 8009f24:	2300      	movs	r3, #0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	f000 813c 	beq.w	800a1a4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2202      	movs	r2, #2
 8009f30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4a37      	ldr	r2, [pc, #220]	@ (800a020 <HAL_DMA_Init+0x1b8>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d04a      	beq.n	8009fdc <HAL_DMA_Init+0x174>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a36      	ldr	r2, [pc, #216]	@ (800a024 <HAL_DMA_Init+0x1bc>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d045      	beq.n	8009fdc <HAL_DMA_Init+0x174>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4a34      	ldr	r2, [pc, #208]	@ (800a028 <HAL_DMA_Init+0x1c0>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d040      	beq.n	8009fdc <HAL_DMA_Init+0x174>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	4a33      	ldr	r2, [pc, #204]	@ (800a02c <HAL_DMA_Init+0x1c4>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d03b      	beq.n	8009fdc <HAL_DMA_Init+0x174>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4a31      	ldr	r2, [pc, #196]	@ (800a030 <HAL_DMA_Init+0x1c8>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d036      	beq.n	8009fdc <HAL_DMA_Init+0x174>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4a30      	ldr	r2, [pc, #192]	@ (800a034 <HAL_DMA_Init+0x1cc>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d031      	beq.n	8009fdc <HAL_DMA_Init+0x174>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4a2e      	ldr	r2, [pc, #184]	@ (800a038 <HAL_DMA_Init+0x1d0>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d02c      	beq.n	8009fdc <HAL_DMA_Init+0x174>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4a2d      	ldr	r2, [pc, #180]	@ (800a03c <HAL_DMA_Init+0x1d4>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d027      	beq.n	8009fdc <HAL_DMA_Init+0x174>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a2b      	ldr	r2, [pc, #172]	@ (800a040 <HAL_DMA_Init+0x1d8>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d022      	beq.n	8009fdc <HAL_DMA_Init+0x174>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a2a      	ldr	r2, [pc, #168]	@ (800a044 <HAL_DMA_Init+0x1dc>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d01d      	beq.n	8009fdc <HAL_DMA_Init+0x174>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a28      	ldr	r2, [pc, #160]	@ (800a048 <HAL_DMA_Init+0x1e0>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d018      	beq.n	8009fdc <HAL_DMA_Init+0x174>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a27      	ldr	r2, [pc, #156]	@ (800a04c <HAL_DMA_Init+0x1e4>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d013      	beq.n	8009fdc <HAL_DMA_Init+0x174>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a25      	ldr	r2, [pc, #148]	@ (800a050 <HAL_DMA_Init+0x1e8>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d00e      	beq.n	8009fdc <HAL_DMA_Init+0x174>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4a24      	ldr	r2, [pc, #144]	@ (800a054 <HAL_DMA_Init+0x1ec>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d009      	beq.n	8009fdc <HAL_DMA_Init+0x174>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a22      	ldr	r2, [pc, #136]	@ (800a058 <HAL_DMA_Init+0x1f0>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d004      	beq.n	8009fdc <HAL_DMA_Init+0x174>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a21      	ldr	r2, [pc, #132]	@ (800a05c <HAL_DMA_Init+0x1f4>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d108      	bne.n	8009fee <HAL_DMA_Init+0x186>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f022 0201 	bic.w	r2, r2, #1
 8009fea:	601a      	str	r2, [r3, #0]
 8009fec:	e007      	b.n	8009ffe <HAL_DMA_Init+0x196>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f022 0201 	bic.w	r2, r2, #1
 8009ffc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009ffe:	e02f      	b.n	800a060 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a000:	f7ff fd48 	bl	8009a94 <HAL_GetTick>
 800a004:	4602      	mov	r2, r0
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	1ad3      	subs	r3, r2, r3
 800a00a:	2b05      	cmp	r3, #5
 800a00c:	d928      	bls.n	800a060 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2220      	movs	r2, #32
 800a012:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2203      	movs	r2, #3
 800a018:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800a01c:	2301      	movs	r3, #1
 800a01e:	e242      	b.n	800a4a6 <HAL_DMA_Init+0x63e>
 800a020:	40020010 	.word	0x40020010
 800a024:	40020028 	.word	0x40020028
 800a028:	40020040 	.word	0x40020040
 800a02c:	40020058 	.word	0x40020058
 800a030:	40020070 	.word	0x40020070
 800a034:	40020088 	.word	0x40020088
 800a038:	400200a0 	.word	0x400200a0
 800a03c:	400200b8 	.word	0x400200b8
 800a040:	40020410 	.word	0x40020410
 800a044:	40020428 	.word	0x40020428
 800a048:	40020440 	.word	0x40020440
 800a04c:	40020458 	.word	0x40020458
 800a050:	40020470 	.word	0x40020470
 800a054:	40020488 	.word	0x40020488
 800a058:	400204a0 	.word	0x400204a0
 800a05c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f003 0301 	and.w	r3, r3, #1
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d1c8      	bne.n	800a000 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a076:	697a      	ldr	r2, [r7, #20]
 800a078:	4b83      	ldr	r3, [pc, #524]	@ (800a288 <HAL_DMA_Init+0x420>)
 800a07a:	4013      	ands	r3, r2
 800a07c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800a086:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	691b      	ldr	r3, [r3, #16]
 800a08c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a092:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	699b      	ldr	r3, [r3, #24]
 800a098:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a09e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6a1b      	ldr	r3, [r3, #32]
 800a0a4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800a0a6:	697a      	ldr	r2, [r7, #20]
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0b0:	2b04      	cmp	r3, #4
 800a0b2:	d107      	bne.n	800a0c4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	697a      	ldr	r2, [r7, #20]
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	2b28      	cmp	r3, #40	@ 0x28
 800a0ca:	d903      	bls.n	800a0d4 <HAL_DMA_Init+0x26c>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a0d2:	d91f      	bls.n	800a114 <HAL_DMA_Init+0x2ac>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	2b3e      	cmp	r3, #62	@ 0x3e
 800a0da:	d903      	bls.n	800a0e4 <HAL_DMA_Init+0x27c>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	2b42      	cmp	r3, #66	@ 0x42
 800a0e2:	d917      	bls.n	800a114 <HAL_DMA_Init+0x2ac>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	2b46      	cmp	r3, #70	@ 0x46
 800a0ea:	d903      	bls.n	800a0f4 <HAL_DMA_Init+0x28c>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	2b48      	cmp	r3, #72	@ 0x48
 800a0f2:	d90f      	bls.n	800a114 <HAL_DMA_Init+0x2ac>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	2b4e      	cmp	r3, #78	@ 0x4e
 800a0fa:	d903      	bls.n	800a104 <HAL_DMA_Init+0x29c>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	2b52      	cmp	r3, #82	@ 0x52
 800a102:	d907      	bls.n	800a114 <HAL_DMA_Init+0x2ac>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	2b73      	cmp	r3, #115	@ 0x73
 800a10a:	d905      	bls.n	800a118 <HAL_DMA_Init+0x2b0>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	2b77      	cmp	r3, #119	@ 0x77
 800a112:	d801      	bhi.n	800a118 <HAL_DMA_Init+0x2b0>
 800a114:	2301      	movs	r3, #1
 800a116:	e000      	b.n	800a11a <HAL_DMA_Init+0x2b2>
 800a118:	2300      	movs	r3, #0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d003      	beq.n	800a126 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a124:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	697a      	ldr	r2, [r7, #20]
 800a12c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	695b      	ldr	r3, [r3, #20]
 800a134:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	f023 0307 	bic.w	r3, r3, #7
 800a13c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a142:	697a      	ldr	r2, [r7, #20]
 800a144:	4313      	orrs	r3, r2
 800a146:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a14c:	2b04      	cmp	r3, #4
 800a14e:	d117      	bne.n	800a180 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a154:	697a      	ldr	r2, [r7, #20]
 800a156:	4313      	orrs	r3, r2
 800a158:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d00e      	beq.n	800a180 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f002 fb3a 	bl	800c7dc <DMA_CheckFifoParam>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d008      	beq.n	800a180 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2240      	movs	r2, #64	@ 0x40
 800a172:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2201      	movs	r2, #1
 800a178:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800a17c:	2301      	movs	r3, #1
 800a17e:	e192      	b.n	800a4a6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	697a      	ldr	r2, [r7, #20]
 800a186:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f002 fa75 	bl	800c678 <DMA_CalcBaseAndBitshift>
 800a18e:	4603      	mov	r3, r0
 800a190:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a196:	f003 031f 	and.w	r3, r3, #31
 800a19a:	223f      	movs	r2, #63	@ 0x3f
 800a19c:	409a      	lsls	r2, r3
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	609a      	str	r2, [r3, #8]
 800a1a2:	e0c8      	b.n	800a336 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a38      	ldr	r2, [pc, #224]	@ (800a28c <HAL_DMA_Init+0x424>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d022      	beq.n	800a1f4 <HAL_DMA_Init+0x38c>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	4a37      	ldr	r2, [pc, #220]	@ (800a290 <HAL_DMA_Init+0x428>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d01d      	beq.n	800a1f4 <HAL_DMA_Init+0x38c>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a35      	ldr	r2, [pc, #212]	@ (800a294 <HAL_DMA_Init+0x42c>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d018      	beq.n	800a1f4 <HAL_DMA_Init+0x38c>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a34      	ldr	r2, [pc, #208]	@ (800a298 <HAL_DMA_Init+0x430>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d013      	beq.n	800a1f4 <HAL_DMA_Init+0x38c>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a32      	ldr	r2, [pc, #200]	@ (800a29c <HAL_DMA_Init+0x434>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d00e      	beq.n	800a1f4 <HAL_DMA_Init+0x38c>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a31      	ldr	r2, [pc, #196]	@ (800a2a0 <HAL_DMA_Init+0x438>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d009      	beq.n	800a1f4 <HAL_DMA_Init+0x38c>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a2f      	ldr	r2, [pc, #188]	@ (800a2a4 <HAL_DMA_Init+0x43c>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d004      	beq.n	800a1f4 <HAL_DMA_Init+0x38c>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a2e      	ldr	r2, [pc, #184]	@ (800a2a8 <HAL_DMA_Init+0x440>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d101      	bne.n	800a1f8 <HAL_DMA_Init+0x390>
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	e000      	b.n	800a1fa <HAL_DMA_Init+0x392>
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	f000 8092 	beq.w	800a324 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a21      	ldr	r2, [pc, #132]	@ (800a28c <HAL_DMA_Init+0x424>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d021      	beq.n	800a24e <HAL_DMA_Init+0x3e6>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4a20      	ldr	r2, [pc, #128]	@ (800a290 <HAL_DMA_Init+0x428>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d01c      	beq.n	800a24e <HAL_DMA_Init+0x3e6>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a1e      	ldr	r2, [pc, #120]	@ (800a294 <HAL_DMA_Init+0x42c>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d017      	beq.n	800a24e <HAL_DMA_Init+0x3e6>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	4a1d      	ldr	r2, [pc, #116]	@ (800a298 <HAL_DMA_Init+0x430>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d012      	beq.n	800a24e <HAL_DMA_Init+0x3e6>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a1b      	ldr	r2, [pc, #108]	@ (800a29c <HAL_DMA_Init+0x434>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d00d      	beq.n	800a24e <HAL_DMA_Init+0x3e6>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4a1a      	ldr	r2, [pc, #104]	@ (800a2a0 <HAL_DMA_Init+0x438>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d008      	beq.n	800a24e <HAL_DMA_Init+0x3e6>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4a18      	ldr	r2, [pc, #96]	@ (800a2a4 <HAL_DMA_Init+0x43c>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d003      	beq.n	800a24e <HAL_DMA_Init+0x3e6>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4a17      	ldr	r2, [pc, #92]	@ (800a2a8 <HAL_DMA_Init+0x440>)
 800a24c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2202      	movs	r2, #2
 800a252:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2200      	movs	r2, #0
 800a25a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800a266:	697a      	ldr	r2, [r7, #20]
 800a268:	4b10      	ldr	r3, [pc, #64]	@ (800a2ac <HAL_DMA_Init+0x444>)
 800a26a:	4013      	ands	r3, r2
 800a26c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	689b      	ldr	r3, [r3, #8]
 800a272:	2b40      	cmp	r3, #64	@ 0x40
 800a274:	d01c      	beq.n	800a2b0 <HAL_DMA_Init+0x448>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	2b80      	cmp	r3, #128	@ 0x80
 800a27c:	d102      	bne.n	800a284 <HAL_DMA_Init+0x41c>
 800a27e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a282:	e016      	b.n	800a2b2 <HAL_DMA_Init+0x44a>
 800a284:	2300      	movs	r3, #0
 800a286:	e014      	b.n	800a2b2 <HAL_DMA_Init+0x44a>
 800a288:	fe10803f 	.word	0xfe10803f
 800a28c:	58025408 	.word	0x58025408
 800a290:	5802541c 	.word	0x5802541c
 800a294:	58025430 	.word	0x58025430
 800a298:	58025444 	.word	0x58025444
 800a29c:	58025458 	.word	0x58025458
 800a2a0:	5802546c 	.word	0x5802546c
 800a2a4:	58025480 	.word	0x58025480
 800a2a8:	58025494 	.word	0x58025494
 800a2ac:	fffe000f 	.word	0xfffe000f
 800a2b0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	68d2      	ldr	r2, [r2, #12]
 800a2b6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800a2b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	691b      	ldr	r3, [r3, #16]
 800a2be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800a2c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	695b      	ldr	r3, [r3, #20]
 800a2c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800a2c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	699b      	ldr	r3, [r3, #24]
 800a2ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800a2d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	69db      	ldr	r3, [r3, #28]
 800a2d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800a2d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6a1b      	ldr	r3, [r3, #32]
 800a2de:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800a2e0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800a2e2:	697a      	ldr	r2, [r7, #20]
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	697a      	ldr	r2, [r7, #20]
 800a2ee:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	4b6e      	ldr	r3, [pc, #440]	@ (800a4b0 <HAL_DMA_Init+0x648>)
 800a2f8:	4413      	add	r3, r2
 800a2fa:	4a6e      	ldr	r2, [pc, #440]	@ (800a4b4 <HAL_DMA_Init+0x64c>)
 800a2fc:	fba2 2303 	umull	r2, r3, r2, r3
 800a300:	091b      	lsrs	r3, r3, #4
 800a302:	009a      	lsls	r2, r3, #2
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f002 f9b5 	bl	800c678 <DMA_CalcBaseAndBitshift>
 800a30e:	4603      	mov	r3, r0
 800a310:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a316:	f003 031f 	and.w	r3, r3, #31
 800a31a:	2201      	movs	r2, #1
 800a31c:	409a      	lsls	r2, r3
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	605a      	str	r2, [r3, #4]
 800a322:	e008      	b.n	800a336 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2240      	movs	r2, #64	@ 0x40
 800a328:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2203      	movs	r2, #3
 800a32e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800a332:	2301      	movs	r3, #1
 800a334:	e0b7      	b.n	800a4a6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a5f      	ldr	r2, [pc, #380]	@ (800a4b8 <HAL_DMA_Init+0x650>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d072      	beq.n	800a426 <HAL_DMA_Init+0x5be>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a5d      	ldr	r2, [pc, #372]	@ (800a4bc <HAL_DMA_Init+0x654>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d06d      	beq.n	800a426 <HAL_DMA_Init+0x5be>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a5c      	ldr	r2, [pc, #368]	@ (800a4c0 <HAL_DMA_Init+0x658>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d068      	beq.n	800a426 <HAL_DMA_Init+0x5be>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a5a      	ldr	r2, [pc, #360]	@ (800a4c4 <HAL_DMA_Init+0x65c>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d063      	beq.n	800a426 <HAL_DMA_Init+0x5be>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a59      	ldr	r2, [pc, #356]	@ (800a4c8 <HAL_DMA_Init+0x660>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d05e      	beq.n	800a426 <HAL_DMA_Init+0x5be>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a57      	ldr	r2, [pc, #348]	@ (800a4cc <HAL_DMA_Init+0x664>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d059      	beq.n	800a426 <HAL_DMA_Init+0x5be>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4a56      	ldr	r2, [pc, #344]	@ (800a4d0 <HAL_DMA_Init+0x668>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d054      	beq.n	800a426 <HAL_DMA_Init+0x5be>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a54      	ldr	r2, [pc, #336]	@ (800a4d4 <HAL_DMA_Init+0x66c>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d04f      	beq.n	800a426 <HAL_DMA_Init+0x5be>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a53      	ldr	r2, [pc, #332]	@ (800a4d8 <HAL_DMA_Init+0x670>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d04a      	beq.n	800a426 <HAL_DMA_Init+0x5be>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4a51      	ldr	r2, [pc, #324]	@ (800a4dc <HAL_DMA_Init+0x674>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d045      	beq.n	800a426 <HAL_DMA_Init+0x5be>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a50      	ldr	r2, [pc, #320]	@ (800a4e0 <HAL_DMA_Init+0x678>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d040      	beq.n	800a426 <HAL_DMA_Init+0x5be>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a4e      	ldr	r2, [pc, #312]	@ (800a4e4 <HAL_DMA_Init+0x67c>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d03b      	beq.n	800a426 <HAL_DMA_Init+0x5be>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4a4d      	ldr	r2, [pc, #308]	@ (800a4e8 <HAL_DMA_Init+0x680>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d036      	beq.n	800a426 <HAL_DMA_Init+0x5be>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a4b      	ldr	r2, [pc, #300]	@ (800a4ec <HAL_DMA_Init+0x684>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d031      	beq.n	800a426 <HAL_DMA_Init+0x5be>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a4a      	ldr	r2, [pc, #296]	@ (800a4f0 <HAL_DMA_Init+0x688>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d02c      	beq.n	800a426 <HAL_DMA_Init+0x5be>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a48      	ldr	r2, [pc, #288]	@ (800a4f4 <HAL_DMA_Init+0x68c>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d027      	beq.n	800a426 <HAL_DMA_Init+0x5be>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a47      	ldr	r2, [pc, #284]	@ (800a4f8 <HAL_DMA_Init+0x690>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d022      	beq.n	800a426 <HAL_DMA_Init+0x5be>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4a45      	ldr	r2, [pc, #276]	@ (800a4fc <HAL_DMA_Init+0x694>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d01d      	beq.n	800a426 <HAL_DMA_Init+0x5be>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a44      	ldr	r2, [pc, #272]	@ (800a500 <HAL_DMA_Init+0x698>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d018      	beq.n	800a426 <HAL_DMA_Init+0x5be>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4a42      	ldr	r2, [pc, #264]	@ (800a504 <HAL_DMA_Init+0x69c>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d013      	beq.n	800a426 <HAL_DMA_Init+0x5be>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4a41      	ldr	r2, [pc, #260]	@ (800a508 <HAL_DMA_Init+0x6a0>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d00e      	beq.n	800a426 <HAL_DMA_Init+0x5be>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a3f      	ldr	r2, [pc, #252]	@ (800a50c <HAL_DMA_Init+0x6a4>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d009      	beq.n	800a426 <HAL_DMA_Init+0x5be>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4a3e      	ldr	r2, [pc, #248]	@ (800a510 <HAL_DMA_Init+0x6a8>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d004      	beq.n	800a426 <HAL_DMA_Init+0x5be>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a3c      	ldr	r2, [pc, #240]	@ (800a514 <HAL_DMA_Init+0x6ac>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d101      	bne.n	800a42a <HAL_DMA_Init+0x5c2>
 800a426:	2301      	movs	r3, #1
 800a428:	e000      	b.n	800a42c <HAL_DMA_Init+0x5c4>
 800a42a:	2300      	movs	r3, #0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d032      	beq.n	800a496 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f002 fa4f 	bl	800c8d4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	689b      	ldr	r3, [r3, #8]
 800a43a:	2b80      	cmp	r3, #128	@ 0x80
 800a43c:	d102      	bne.n	800a444 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2200      	movs	r2, #0
 800a442:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	685a      	ldr	r2, [r3, #4]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a44c:	b2d2      	uxtb	r2, r2
 800a44e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800a458:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d010      	beq.n	800a484 <HAL_DMA_Init+0x61c>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	2b08      	cmp	r3, #8
 800a468:	d80c      	bhi.n	800a484 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f002 facc 	bl	800ca08 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a474:	2200      	movs	r2, #0
 800a476:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800a480:	605a      	str	r2, [r3, #4]
 800a482:	e008      	b.n	800a496 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2200      	movs	r2, #0
 800a49a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800a4a4:	2300      	movs	r3, #0
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3718      	adds	r7, #24
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	a7fdabf8 	.word	0xa7fdabf8
 800a4b4:	cccccccd 	.word	0xcccccccd
 800a4b8:	40020010 	.word	0x40020010
 800a4bc:	40020028 	.word	0x40020028
 800a4c0:	40020040 	.word	0x40020040
 800a4c4:	40020058 	.word	0x40020058
 800a4c8:	40020070 	.word	0x40020070
 800a4cc:	40020088 	.word	0x40020088
 800a4d0:	400200a0 	.word	0x400200a0
 800a4d4:	400200b8 	.word	0x400200b8
 800a4d8:	40020410 	.word	0x40020410
 800a4dc:	40020428 	.word	0x40020428
 800a4e0:	40020440 	.word	0x40020440
 800a4e4:	40020458 	.word	0x40020458
 800a4e8:	40020470 	.word	0x40020470
 800a4ec:	40020488 	.word	0x40020488
 800a4f0:	400204a0 	.word	0x400204a0
 800a4f4:	400204b8 	.word	0x400204b8
 800a4f8:	58025408 	.word	0x58025408
 800a4fc:	5802541c 	.word	0x5802541c
 800a500:	58025430 	.word	0x58025430
 800a504:	58025444 	.word	0x58025444
 800a508:	58025458 	.word	0x58025458
 800a50c:	5802546c 	.word	0x5802546c
 800a510:	58025480 	.word	0x58025480
 800a514:	58025494 	.word	0x58025494

0800a518 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b086      	sub	sp, #24
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	60f8      	str	r0, [r7, #12]
 800a520:	60b9      	str	r1, [r7, #8]
 800a522:	607a      	str	r2, [r7, #4]
 800a524:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a526:	2300      	movs	r3, #0
 800a528:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d101      	bne.n	800a534 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800a530:	2301      	movs	r3, #1
 800a532:	e226      	b.n	800a982 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d101      	bne.n	800a542 <HAL_DMA_Start_IT+0x2a>
 800a53e:	2302      	movs	r3, #2
 800a540:	e21f      	b.n	800a982 <HAL_DMA_Start_IT+0x46a>
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2201      	movs	r2, #1
 800a546:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a550:	b2db      	uxtb	r3, r3
 800a552:	2b01      	cmp	r3, #1
 800a554:	f040 820a 	bne.w	800a96c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2202      	movs	r2, #2
 800a55c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2200      	movs	r2, #0
 800a564:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a68      	ldr	r2, [pc, #416]	@ (800a70c <HAL_DMA_Start_IT+0x1f4>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d04a      	beq.n	800a606 <HAL_DMA_Start_IT+0xee>
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a66      	ldr	r2, [pc, #408]	@ (800a710 <HAL_DMA_Start_IT+0x1f8>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d045      	beq.n	800a606 <HAL_DMA_Start_IT+0xee>
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4a65      	ldr	r2, [pc, #404]	@ (800a714 <HAL_DMA_Start_IT+0x1fc>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d040      	beq.n	800a606 <HAL_DMA_Start_IT+0xee>
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a63      	ldr	r2, [pc, #396]	@ (800a718 <HAL_DMA_Start_IT+0x200>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d03b      	beq.n	800a606 <HAL_DMA_Start_IT+0xee>
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a62      	ldr	r2, [pc, #392]	@ (800a71c <HAL_DMA_Start_IT+0x204>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d036      	beq.n	800a606 <HAL_DMA_Start_IT+0xee>
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a60      	ldr	r2, [pc, #384]	@ (800a720 <HAL_DMA_Start_IT+0x208>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d031      	beq.n	800a606 <HAL_DMA_Start_IT+0xee>
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a5f      	ldr	r2, [pc, #380]	@ (800a724 <HAL_DMA_Start_IT+0x20c>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d02c      	beq.n	800a606 <HAL_DMA_Start_IT+0xee>
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a5d      	ldr	r2, [pc, #372]	@ (800a728 <HAL_DMA_Start_IT+0x210>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d027      	beq.n	800a606 <HAL_DMA_Start_IT+0xee>
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a5c      	ldr	r2, [pc, #368]	@ (800a72c <HAL_DMA_Start_IT+0x214>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d022      	beq.n	800a606 <HAL_DMA_Start_IT+0xee>
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a5a      	ldr	r2, [pc, #360]	@ (800a730 <HAL_DMA_Start_IT+0x218>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d01d      	beq.n	800a606 <HAL_DMA_Start_IT+0xee>
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a59      	ldr	r2, [pc, #356]	@ (800a734 <HAL_DMA_Start_IT+0x21c>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d018      	beq.n	800a606 <HAL_DMA_Start_IT+0xee>
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4a57      	ldr	r2, [pc, #348]	@ (800a738 <HAL_DMA_Start_IT+0x220>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d013      	beq.n	800a606 <HAL_DMA_Start_IT+0xee>
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4a56      	ldr	r2, [pc, #344]	@ (800a73c <HAL_DMA_Start_IT+0x224>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d00e      	beq.n	800a606 <HAL_DMA_Start_IT+0xee>
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a54      	ldr	r2, [pc, #336]	@ (800a740 <HAL_DMA_Start_IT+0x228>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d009      	beq.n	800a606 <HAL_DMA_Start_IT+0xee>
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	4a53      	ldr	r2, [pc, #332]	@ (800a744 <HAL_DMA_Start_IT+0x22c>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d004      	beq.n	800a606 <HAL_DMA_Start_IT+0xee>
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a51      	ldr	r2, [pc, #324]	@ (800a748 <HAL_DMA_Start_IT+0x230>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d108      	bne.n	800a618 <HAL_DMA_Start_IT+0x100>
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f022 0201 	bic.w	r2, r2, #1
 800a614:	601a      	str	r2, [r3, #0]
 800a616:	e007      	b.n	800a628 <HAL_DMA_Start_IT+0x110>
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f022 0201 	bic.w	r2, r2, #1
 800a626:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	68b9      	ldr	r1, [r7, #8]
 800a62e:	68f8      	ldr	r0, [r7, #12]
 800a630:	f001 fe76 	bl	800c320 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4a34      	ldr	r2, [pc, #208]	@ (800a70c <HAL_DMA_Start_IT+0x1f4>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d04a      	beq.n	800a6d4 <HAL_DMA_Start_IT+0x1bc>
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a33      	ldr	r2, [pc, #204]	@ (800a710 <HAL_DMA_Start_IT+0x1f8>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d045      	beq.n	800a6d4 <HAL_DMA_Start_IT+0x1bc>
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4a31      	ldr	r2, [pc, #196]	@ (800a714 <HAL_DMA_Start_IT+0x1fc>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d040      	beq.n	800a6d4 <HAL_DMA_Start_IT+0x1bc>
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4a30      	ldr	r2, [pc, #192]	@ (800a718 <HAL_DMA_Start_IT+0x200>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d03b      	beq.n	800a6d4 <HAL_DMA_Start_IT+0x1bc>
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4a2e      	ldr	r2, [pc, #184]	@ (800a71c <HAL_DMA_Start_IT+0x204>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d036      	beq.n	800a6d4 <HAL_DMA_Start_IT+0x1bc>
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a2d      	ldr	r2, [pc, #180]	@ (800a720 <HAL_DMA_Start_IT+0x208>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d031      	beq.n	800a6d4 <HAL_DMA_Start_IT+0x1bc>
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a2b      	ldr	r2, [pc, #172]	@ (800a724 <HAL_DMA_Start_IT+0x20c>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d02c      	beq.n	800a6d4 <HAL_DMA_Start_IT+0x1bc>
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a2a      	ldr	r2, [pc, #168]	@ (800a728 <HAL_DMA_Start_IT+0x210>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d027      	beq.n	800a6d4 <HAL_DMA_Start_IT+0x1bc>
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a28      	ldr	r2, [pc, #160]	@ (800a72c <HAL_DMA_Start_IT+0x214>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d022      	beq.n	800a6d4 <HAL_DMA_Start_IT+0x1bc>
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a27      	ldr	r2, [pc, #156]	@ (800a730 <HAL_DMA_Start_IT+0x218>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d01d      	beq.n	800a6d4 <HAL_DMA_Start_IT+0x1bc>
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a25      	ldr	r2, [pc, #148]	@ (800a734 <HAL_DMA_Start_IT+0x21c>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d018      	beq.n	800a6d4 <HAL_DMA_Start_IT+0x1bc>
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a24      	ldr	r2, [pc, #144]	@ (800a738 <HAL_DMA_Start_IT+0x220>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d013      	beq.n	800a6d4 <HAL_DMA_Start_IT+0x1bc>
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a22      	ldr	r2, [pc, #136]	@ (800a73c <HAL_DMA_Start_IT+0x224>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d00e      	beq.n	800a6d4 <HAL_DMA_Start_IT+0x1bc>
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a21      	ldr	r2, [pc, #132]	@ (800a740 <HAL_DMA_Start_IT+0x228>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d009      	beq.n	800a6d4 <HAL_DMA_Start_IT+0x1bc>
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4a1f      	ldr	r2, [pc, #124]	@ (800a744 <HAL_DMA_Start_IT+0x22c>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d004      	beq.n	800a6d4 <HAL_DMA_Start_IT+0x1bc>
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4a1e      	ldr	r2, [pc, #120]	@ (800a748 <HAL_DMA_Start_IT+0x230>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d101      	bne.n	800a6d8 <HAL_DMA_Start_IT+0x1c0>
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	e000      	b.n	800a6da <HAL_DMA_Start_IT+0x1c2>
 800a6d8:	2300      	movs	r3, #0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d036      	beq.n	800a74c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f023 021e 	bic.w	r2, r3, #30
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f042 0216 	orr.w	r2, r2, #22
 800a6f0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d03e      	beq.n	800a778 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f042 0208 	orr.w	r2, r2, #8
 800a708:	601a      	str	r2, [r3, #0]
 800a70a:	e035      	b.n	800a778 <HAL_DMA_Start_IT+0x260>
 800a70c:	40020010 	.word	0x40020010
 800a710:	40020028 	.word	0x40020028
 800a714:	40020040 	.word	0x40020040
 800a718:	40020058 	.word	0x40020058
 800a71c:	40020070 	.word	0x40020070
 800a720:	40020088 	.word	0x40020088
 800a724:	400200a0 	.word	0x400200a0
 800a728:	400200b8 	.word	0x400200b8
 800a72c:	40020410 	.word	0x40020410
 800a730:	40020428 	.word	0x40020428
 800a734:	40020440 	.word	0x40020440
 800a738:	40020458 	.word	0x40020458
 800a73c:	40020470 	.word	0x40020470
 800a740:	40020488 	.word	0x40020488
 800a744:	400204a0 	.word	0x400204a0
 800a748:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f023 020e 	bic.w	r2, r3, #14
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f042 020a 	orr.w	r2, r2, #10
 800a75e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a764:	2b00      	cmp	r3, #0
 800a766:	d007      	beq.n	800a778 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	681a      	ldr	r2, [r3, #0]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f042 0204 	orr.w	r2, r2, #4
 800a776:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a83      	ldr	r2, [pc, #524]	@ (800a98c <HAL_DMA_Start_IT+0x474>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d072      	beq.n	800a868 <HAL_DMA_Start_IT+0x350>
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4a82      	ldr	r2, [pc, #520]	@ (800a990 <HAL_DMA_Start_IT+0x478>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d06d      	beq.n	800a868 <HAL_DMA_Start_IT+0x350>
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a80      	ldr	r2, [pc, #512]	@ (800a994 <HAL_DMA_Start_IT+0x47c>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d068      	beq.n	800a868 <HAL_DMA_Start_IT+0x350>
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4a7f      	ldr	r2, [pc, #508]	@ (800a998 <HAL_DMA_Start_IT+0x480>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d063      	beq.n	800a868 <HAL_DMA_Start_IT+0x350>
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a7d      	ldr	r2, [pc, #500]	@ (800a99c <HAL_DMA_Start_IT+0x484>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d05e      	beq.n	800a868 <HAL_DMA_Start_IT+0x350>
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4a7c      	ldr	r2, [pc, #496]	@ (800a9a0 <HAL_DMA_Start_IT+0x488>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d059      	beq.n	800a868 <HAL_DMA_Start_IT+0x350>
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4a7a      	ldr	r2, [pc, #488]	@ (800a9a4 <HAL_DMA_Start_IT+0x48c>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d054      	beq.n	800a868 <HAL_DMA_Start_IT+0x350>
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4a79      	ldr	r2, [pc, #484]	@ (800a9a8 <HAL_DMA_Start_IT+0x490>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d04f      	beq.n	800a868 <HAL_DMA_Start_IT+0x350>
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	4a77      	ldr	r2, [pc, #476]	@ (800a9ac <HAL_DMA_Start_IT+0x494>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d04a      	beq.n	800a868 <HAL_DMA_Start_IT+0x350>
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a76      	ldr	r2, [pc, #472]	@ (800a9b0 <HAL_DMA_Start_IT+0x498>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d045      	beq.n	800a868 <HAL_DMA_Start_IT+0x350>
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a74      	ldr	r2, [pc, #464]	@ (800a9b4 <HAL_DMA_Start_IT+0x49c>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d040      	beq.n	800a868 <HAL_DMA_Start_IT+0x350>
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4a73      	ldr	r2, [pc, #460]	@ (800a9b8 <HAL_DMA_Start_IT+0x4a0>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d03b      	beq.n	800a868 <HAL_DMA_Start_IT+0x350>
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4a71      	ldr	r2, [pc, #452]	@ (800a9bc <HAL_DMA_Start_IT+0x4a4>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d036      	beq.n	800a868 <HAL_DMA_Start_IT+0x350>
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4a70      	ldr	r2, [pc, #448]	@ (800a9c0 <HAL_DMA_Start_IT+0x4a8>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d031      	beq.n	800a868 <HAL_DMA_Start_IT+0x350>
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4a6e      	ldr	r2, [pc, #440]	@ (800a9c4 <HAL_DMA_Start_IT+0x4ac>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d02c      	beq.n	800a868 <HAL_DMA_Start_IT+0x350>
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4a6d      	ldr	r2, [pc, #436]	@ (800a9c8 <HAL_DMA_Start_IT+0x4b0>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d027      	beq.n	800a868 <HAL_DMA_Start_IT+0x350>
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a6b      	ldr	r2, [pc, #428]	@ (800a9cc <HAL_DMA_Start_IT+0x4b4>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d022      	beq.n	800a868 <HAL_DMA_Start_IT+0x350>
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4a6a      	ldr	r2, [pc, #424]	@ (800a9d0 <HAL_DMA_Start_IT+0x4b8>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d01d      	beq.n	800a868 <HAL_DMA_Start_IT+0x350>
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a68      	ldr	r2, [pc, #416]	@ (800a9d4 <HAL_DMA_Start_IT+0x4bc>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d018      	beq.n	800a868 <HAL_DMA_Start_IT+0x350>
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a67      	ldr	r2, [pc, #412]	@ (800a9d8 <HAL_DMA_Start_IT+0x4c0>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d013      	beq.n	800a868 <HAL_DMA_Start_IT+0x350>
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a65      	ldr	r2, [pc, #404]	@ (800a9dc <HAL_DMA_Start_IT+0x4c4>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d00e      	beq.n	800a868 <HAL_DMA_Start_IT+0x350>
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a64      	ldr	r2, [pc, #400]	@ (800a9e0 <HAL_DMA_Start_IT+0x4c8>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d009      	beq.n	800a868 <HAL_DMA_Start_IT+0x350>
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a62      	ldr	r2, [pc, #392]	@ (800a9e4 <HAL_DMA_Start_IT+0x4cc>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d004      	beq.n	800a868 <HAL_DMA_Start_IT+0x350>
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a61      	ldr	r2, [pc, #388]	@ (800a9e8 <HAL_DMA_Start_IT+0x4d0>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d101      	bne.n	800a86c <HAL_DMA_Start_IT+0x354>
 800a868:	2301      	movs	r3, #1
 800a86a:	e000      	b.n	800a86e <HAL_DMA_Start_IT+0x356>
 800a86c:	2300      	movs	r3, #0
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d01a      	beq.n	800a8a8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d007      	beq.n	800a890 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a88a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a88e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a894:	2b00      	cmp	r3, #0
 800a896:	d007      	beq.n	800a8a8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a8a6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a37      	ldr	r2, [pc, #220]	@ (800a98c <HAL_DMA_Start_IT+0x474>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d04a      	beq.n	800a948 <HAL_DMA_Start_IT+0x430>
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a36      	ldr	r2, [pc, #216]	@ (800a990 <HAL_DMA_Start_IT+0x478>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d045      	beq.n	800a948 <HAL_DMA_Start_IT+0x430>
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a34      	ldr	r2, [pc, #208]	@ (800a994 <HAL_DMA_Start_IT+0x47c>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d040      	beq.n	800a948 <HAL_DMA_Start_IT+0x430>
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a33      	ldr	r2, [pc, #204]	@ (800a998 <HAL_DMA_Start_IT+0x480>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d03b      	beq.n	800a948 <HAL_DMA_Start_IT+0x430>
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a31      	ldr	r2, [pc, #196]	@ (800a99c <HAL_DMA_Start_IT+0x484>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d036      	beq.n	800a948 <HAL_DMA_Start_IT+0x430>
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4a30      	ldr	r2, [pc, #192]	@ (800a9a0 <HAL_DMA_Start_IT+0x488>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d031      	beq.n	800a948 <HAL_DMA_Start_IT+0x430>
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a2e      	ldr	r2, [pc, #184]	@ (800a9a4 <HAL_DMA_Start_IT+0x48c>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d02c      	beq.n	800a948 <HAL_DMA_Start_IT+0x430>
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4a2d      	ldr	r2, [pc, #180]	@ (800a9a8 <HAL_DMA_Start_IT+0x490>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d027      	beq.n	800a948 <HAL_DMA_Start_IT+0x430>
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a2b      	ldr	r2, [pc, #172]	@ (800a9ac <HAL_DMA_Start_IT+0x494>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d022      	beq.n	800a948 <HAL_DMA_Start_IT+0x430>
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a2a      	ldr	r2, [pc, #168]	@ (800a9b0 <HAL_DMA_Start_IT+0x498>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d01d      	beq.n	800a948 <HAL_DMA_Start_IT+0x430>
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a28      	ldr	r2, [pc, #160]	@ (800a9b4 <HAL_DMA_Start_IT+0x49c>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d018      	beq.n	800a948 <HAL_DMA_Start_IT+0x430>
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4a27      	ldr	r2, [pc, #156]	@ (800a9b8 <HAL_DMA_Start_IT+0x4a0>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d013      	beq.n	800a948 <HAL_DMA_Start_IT+0x430>
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4a25      	ldr	r2, [pc, #148]	@ (800a9bc <HAL_DMA_Start_IT+0x4a4>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d00e      	beq.n	800a948 <HAL_DMA_Start_IT+0x430>
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4a24      	ldr	r2, [pc, #144]	@ (800a9c0 <HAL_DMA_Start_IT+0x4a8>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d009      	beq.n	800a948 <HAL_DMA_Start_IT+0x430>
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4a22      	ldr	r2, [pc, #136]	@ (800a9c4 <HAL_DMA_Start_IT+0x4ac>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d004      	beq.n	800a948 <HAL_DMA_Start_IT+0x430>
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4a21      	ldr	r2, [pc, #132]	@ (800a9c8 <HAL_DMA_Start_IT+0x4b0>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d108      	bne.n	800a95a <HAL_DMA_Start_IT+0x442>
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f042 0201 	orr.w	r2, r2, #1
 800a956:	601a      	str	r2, [r3, #0]
 800a958:	e012      	b.n	800a980 <HAL_DMA_Start_IT+0x468>
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	681a      	ldr	r2, [r3, #0]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f042 0201 	orr.w	r2, r2, #1
 800a968:	601a      	str	r2, [r3, #0]
 800a96a:	e009      	b.n	800a980 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a972:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2200      	movs	r2, #0
 800a978:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800a97c:	2301      	movs	r3, #1
 800a97e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a980:	7dfb      	ldrb	r3, [r7, #23]
}
 800a982:	4618      	mov	r0, r3
 800a984:	3718      	adds	r7, #24
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop
 800a98c:	40020010 	.word	0x40020010
 800a990:	40020028 	.word	0x40020028
 800a994:	40020040 	.word	0x40020040
 800a998:	40020058 	.word	0x40020058
 800a99c:	40020070 	.word	0x40020070
 800a9a0:	40020088 	.word	0x40020088
 800a9a4:	400200a0 	.word	0x400200a0
 800a9a8:	400200b8 	.word	0x400200b8
 800a9ac:	40020410 	.word	0x40020410
 800a9b0:	40020428 	.word	0x40020428
 800a9b4:	40020440 	.word	0x40020440
 800a9b8:	40020458 	.word	0x40020458
 800a9bc:	40020470 	.word	0x40020470
 800a9c0:	40020488 	.word	0x40020488
 800a9c4:	400204a0 	.word	0x400204a0
 800a9c8:	400204b8 	.word	0x400204b8
 800a9cc:	58025408 	.word	0x58025408
 800a9d0:	5802541c 	.word	0x5802541c
 800a9d4:	58025430 	.word	0x58025430
 800a9d8:	58025444 	.word	0x58025444
 800a9dc:	58025458 	.word	0x58025458
 800a9e0:	5802546c 	.word	0x5802546c
 800a9e4:	58025480 	.word	0x58025480
 800a9e8:	58025494 	.word	0x58025494

0800a9ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b086      	sub	sp, #24
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800a9f4:	f7ff f84e 	bl	8009a94 <HAL_GetTick>
 800a9f8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d101      	bne.n	800aa04 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800aa00:	2301      	movs	r3, #1
 800aa02:	e2dc      	b.n	800afbe <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	2b02      	cmp	r3, #2
 800aa0e:	d008      	beq.n	800aa22 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2280      	movs	r2, #128	@ 0x80
 800aa14:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	e2cd      	b.n	800afbe <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4a76      	ldr	r2, [pc, #472]	@ (800ac00 <HAL_DMA_Abort+0x214>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d04a      	beq.n	800aac2 <HAL_DMA_Abort+0xd6>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4a74      	ldr	r2, [pc, #464]	@ (800ac04 <HAL_DMA_Abort+0x218>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d045      	beq.n	800aac2 <HAL_DMA_Abort+0xd6>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4a73      	ldr	r2, [pc, #460]	@ (800ac08 <HAL_DMA_Abort+0x21c>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d040      	beq.n	800aac2 <HAL_DMA_Abort+0xd6>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4a71      	ldr	r2, [pc, #452]	@ (800ac0c <HAL_DMA_Abort+0x220>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d03b      	beq.n	800aac2 <HAL_DMA_Abort+0xd6>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4a70      	ldr	r2, [pc, #448]	@ (800ac10 <HAL_DMA_Abort+0x224>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d036      	beq.n	800aac2 <HAL_DMA_Abort+0xd6>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a6e      	ldr	r2, [pc, #440]	@ (800ac14 <HAL_DMA_Abort+0x228>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d031      	beq.n	800aac2 <HAL_DMA_Abort+0xd6>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	4a6d      	ldr	r2, [pc, #436]	@ (800ac18 <HAL_DMA_Abort+0x22c>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d02c      	beq.n	800aac2 <HAL_DMA_Abort+0xd6>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a6b      	ldr	r2, [pc, #428]	@ (800ac1c <HAL_DMA_Abort+0x230>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d027      	beq.n	800aac2 <HAL_DMA_Abort+0xd6>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4a6a      	ldr	r2, [pc, #424]	@ (800ac20 <HAL_DMA_Abort+0x234>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d022      	beq.n	800aac2 <HAL_DMA_Abort+0xd6>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a68      	ldr	r2, [pc, #416]	@ (800ac24 <HAL_DMA_Abort+0x238>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d01d      	beq.n	800aac2 <HAL_DMA_Abort+0xd6>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4a67      	ldr	r2, [pc, #412]	@ (800ac28 <HAL_DMA_Abort+0x23c>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d018      	beq.n	800aac2 <HAL_DMA_Abort+0xd6>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a65      	ldr	r2, [pc, #404]	@ (800ac2c <HAL_DMA_Abort+0x240>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d013      	beq.n	800aac2 <HAL_DMA_Abort+0xd6>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4a64      	ldr	r2, [pc, #400]	@ (800ac30 <HAL_DMA_Abort+0x244>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d00e      	beq.n	800aac2 <HAL_DMA_Abort+0xd6>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a62      	ldr	r2, [pc, #392]	@ (800ac34 <HAL_DMA_Abort+0x248>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d009      	beq.n	800aac2 <HAL_DMA_Abort+0xd6>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a61      	ldr	r2, [pc, #388]	@ (800ac38 <HAL_DMA_Abort+0x24c>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d004      	beq.n	800aac2 <HAL_DMA_Abort+0xd6>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a5f      	ldr	r2, [pc, #380]	@ (800ac3c <HAL_DMA_Abort+0x250>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d101      	bne.n	800aac6 <HAL_DMA_Abort+0xda>
 800aac2:	2301      	movs	r3, #1
 800aac4:	e000      	b.n	800aac8 <HAL_DMA_Abort+0xdc>
 800aac6:	2300      	movs	r3, #0
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d013      	beq.n	800aaf4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	681a      	ldr	r2, [r3, #0]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f022 021e 	bic.w	r2, r2, #30
 800aada:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	695a      	ldr	r2, [r3, #20]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800aaea:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	617b      	str	r3, [r7, #20]
 800aaf2:	e00a      	b.n	800ab0a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f022 020e 	bic.w	r2, r2, #14
 800ab02:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a3c      	ldr	r2, [pc, #240]	@ (800ac00 <HAL_DMA_Abort+0x214>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d072      	beq.n	800abfa <HAL_DMA_Abort+0x20e>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a3a      	ldr	r2, [pc, #232]	@ (800ac04 <HAL_DMA_Abort+0x218>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d06d      	beq.n	800abfa <HAL_DMA_Abort+0x20e>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4a39      	ldr	r2, [pc, #228]	@ (800ac08 <HAL_DMA_Abort+0x21c>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d068      	beq.n	800abfa <HAL_DMA_Abort+0x20e>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a37      	ldr	r2, [pc, #220]	@ (800ac0c <HAL_DMA_Abort+0x220>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d063      	beq.n	800abfa <HAL_DMA_Abort+0x20e>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4a36      	ldr	r2, [pc, #216]	@ (800ac10 <HAL_DMA_Abort+0x224>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d05e      	beq.n	800abfa <HAL_DMA_Abort+0x20e>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4a34      	ldr	r2, [pc, #208]	@ (800ac14 <HAL_DMA_Abort+0x228>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d059      	beq.n	800abfa <HAL_DMA_Abort+0x20e>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4a33      	ldr	r2, [pc, #204]	@ (800ac18 <HAL_DMA_Abort+0x22c>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d054      	beq.n	800abfa <HAL_DMA_Abort+0x20e>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4a31      	ldr	r2, [pc, #196]	@ (800ac1c <HAL_DMA_Abort+0x230>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d04f      	beq.n	800abfa <HAL_DMA_Abort+0x20e>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4a30      	ldr	r2, [pc, #192]	@ (800ac20 <HAL_DMA_Abort+0x234>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d04a      	beq.n	800abfa <HAL_DMA_Abort+0x20e>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	4a2e      	ldr	r2, [pc, #184]	@ (800ac24 <HAL_DMA_Abort+0x238>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d045      	beq.n	800abfa <HAL_DMA_Abort+0x20e>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4a2d      	ldr	r2, [pc, #180]	@ (800ac28 <HAL_DMA_Abort+0x23c>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d040      	beq.n	800abfa <HAL_DMA_Abort+0x20e>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4a2b      	ldr	r2, [pc, #172]	@ (800ac2c <HAL_DMA_Abort+0x240>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d03b      	beq.n	800abfa <HAL_DMA_Abort+0x20e>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4a2a      	ldr	r2, [pc, #168]	@ (800ac30 <HAL_DMA_Abort+0x244>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d036      	beq.n	800abfa <HAL_DMA_Abort+0x20e>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4a28      	ldr	r2, [pc, #160]	@ (800ac34 <HAL_DMA_Abort+0x248>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d031      	beq.n	800abfa <HAL_DMA_Abort+0x20e>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4a27      	ldr	r2, [pc, #156]	@ (800ac38 <HAL_DMA_Abort+0x24c>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d02c      	beq.n	800abfa <HAL_DMA_Abort+0x20e>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4a25      	ldr	r2, [pc, #148]	@ (800ac3c <HAL_DMA_Abort+0x250>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d027      	beq.n	800abfa <HAL_DMA_Abort+0x20e>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4a24      	ldr	r2, [pc, #144]	@ (800ac40 <HAL_DMA_Abort+0x254>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d022      	beq.n	800abfa <HAL_DMA_Abort+0x20e>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a22      	ldr	r2, [pc, #136]	@ (800ac44 <HAL_DMA_Abort+0x258>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d01d      	beq.n	800abfa <HAL_DMA_Abort+0x20e>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4a21      	ldr	r2, [pc, #132]	@ (800ac48 <HAL_DMA_Abort+0x25c>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d018      	beq.n	800abfa <HAL_DMA_Abort+0x20e>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4a1f      	ldr	r2, [pc, #124]	@ (800ac4c <HAL_DMA_Abort+0x260>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d013      	beq.n	800abfa <HAL_DMA_Abort+0x20e>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	4a1e      	ldr	r2, [pc, #120]	@ (800ac50 <HAL_DMA_Abort+0x264>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d00e      	beq.n	800abfa <HAL_DMA_Abort+0x20e>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a1c      	ldr	r2, [pc, #112]	@ (800ac54 <HAL_DMA_Abort+0x268>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d009      	beq.n	800abfa <HAL_DMA_Abort+0x20e>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4a1b      	ldr	r2, [pc, #108]	@ (800ac58 <HAL_DMA_Abort+0x26c>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d004      	beq.n	800abfa <HAL_DMA_Abort+0x20e>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	4a19      	ldr	r2, [pc, #100]	@ (800ac5c <HAL_DMA_Abort+0x270>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d132      	bne.n	800ac60 <HAL_DMA_Abort+0x274>
 800abfa:	2301      	movs	r3, #1
 800abfc:	e031      	b.n	800ac62 <HAL_DMA_Abort+0x276>
 800abfe:	bf00      	nop
 800ac00:	40020010 	.word	0x40020010
 800ac04:	40020028 	.word	0x40020028
 800ac08:	40020040 	.word	0x40020040
 800ac0c:	40020058 	.word	0x40020058
 800ac10:	40020070 	.word	0x40020070
 800ac14:	40020088 	.word	0x40020088
 800ac18:	400200a0 	.word	0x400200a0
 800ac1c:	400200b8 	.word	0x400200b8
 800ac20:	40020410 	.word	0x40020410
 800ac24:	40020428 	.word	0x40020428
 800ac28:	40020440 	.word	0x40020440
 800ac2c:	40020458 	.word	0x40020458
 800ac30:	40020470 	.word	0x40020470
 800ac34:	40020488 	.word	0x40020488
 800ac38:	400204a0 	.word	0x400204a0
 800ac3c:	400204b8 	.word	0x400204b8
 800ac40:	58025408 	.word	0x58025408
 800ac44:	5802541c 	.word	0x5802541c
 800ac48:	58025430 	.word	0x58025430
 800ac4c:	58025444 	.word	0x58025444
 800ac50:	58025458 	.word	0x58025458
 800ac54:	5802546c 	.word	0x5802546c
 800ac58:	58025480 	.word	0x58025480
 800ac5c:	58025494 	.word	0x58025494
 800ac60:	2300      	movs	r3, #0
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d007      	beq.n	800ac76 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ac74:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4a6d      	ldr	r2, [pc, #436]	@ (800ae30 <HAL_DMA_Abort+0x444>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d04a      	beq.n	800ad16 <HAL_DMA_Abort+0x32a>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4a6b      	ldr	r2, [pc, #428]	@ (800ae34 <HAL_DMA_Abort+0x448>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d045      	beq.n	800ad16 <HAL_DMA_Abort+0x32a>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4a6a      	ldr	r2, [pc, #424]	@ (800ae38 <HAL_DMA_Abort+0x44c>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d040      	beq.n	800ad16 <HAL_DMA_Abort+0x32a>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a68      	ldr	r2, [pc, #416]	@ (800ae3c <HAL_DMA_Abort+0x450>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d03b      	beq.n	800ad16 <HAL_DMA_Abort+0x32a>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	4a67      	ldr	r2, [pc, #412]	@ (800ae40 <HAL_DMA_Abort+0x454>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d036      	beq.n	800ad16 <HAL_DMA_Abort+0x32a>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4a65      	ldr	r2, [pc, #404]	@ (800ae44 <HAL_DMA_Abort+0x458>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d031      	beq.n	800ad16 <HAL_DMA_Abort+0x32a>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4a64      	ldr	r2, [pc, #400]	@ (800ae48 <HAL_DMA_Abort+0x45c>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d02c      	beq.n	800ad16 <HAL_DMA_Abort+0x32a>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a62      	ldr	r2, [pc, #392]	@ (800ae4c <HAL_DMA_Abort+0x460>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d027      	beq.n	800ad16 <HAL_DMA_Abort+0x32a>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4a61      	ldr	r2, [pc, #388]	@ (800ae50 <HAL_DMA_Abort+0x464>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d022      	beq.n	800ad16 <HAL_DMA_Abort+0x32a>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4a5f      	ldr	r2, [pc, #380]	@ (800ae54 <HAL_DMA_Abort+0x468>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d01d      	beq.n	800ad16 <HAL_DMA_Abort+0x32a>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a5e      	ldr	r2, [pc, #376]	@ (800ae58 <HAL_DMA_Abort+0x46c>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d018      	beq.n	800ad16 <HAL_DMA_Abort+0x32a>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4a5c      	ldr	r2, [pc, #368]	@ (800ae5c <HAL_DMA_Abort+0x470>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d013      	beq.n	800ad16 <HAL_DMA_Abort+0x32a>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4a5b      	ldr	r2, [pc, #364]	@ (800ae60 <HAL_DMA_Abort+0x474>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d00e      	beq.n	800ad16 <HAL_DMA_Abort+0x32a>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4a59      	ldr	r2, [pc, #356]	@ (800ae64 <HAL_DMA_Abort+0x478>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d009      	beq.n	800ad16 <HAL_DMA_Abort+0x32a>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a58      	ldr	r2, [pc, #352]	@ (800ae68 <HAL_DMA_Abort+0x47c>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d004      	beq.n	800ad16 <HAL_DMA_Abort+0x32a>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a56      	ldr	r2, [pc, #344]	@ (800ae6c <HAL_DMA_Abort+0x480>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d108      	bne.n	800ad28 <HAL_DMA_Abort+0x33c>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f022 0201 	bic.w	r2, r2, #1
 800ad24:	601a      	str	r2, [r3, #0]
 800ad26:	e007      	b.n	800ad38 <HAL_DMA_Abort+0x34c>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	681a      	ldr	r2, [r3, #0]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f022 0201 	bic.w	r2, r2, #1
 800ad36:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800ad38:	e013      	b.n	800ad62 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ad3a:	f7fe feab 	bl	8009a94 <HAL_GetTick>
 800ad3e:	4602      	mov	r2, r0
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	1ad3      	subs	r3, r2, r3
 800ad44:	2b05      	cmp	r3, #5
 800ad46:	d90c      	bls.n	800ad62 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2220      	movs	r2, #32
 800ad4c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2203      	movs	r2, #3
 800ad52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e12d      	b.n	800afbe <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f003 0301 	and.w	r3, r3, #1
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d1e5      	bne.n	800ad3a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	4a2f      	ldr	r2, [pc, #188]	@ (800ae30 <HAL_DMA_Abort+0x444>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d04a      	beq.n	800ae0e <HAL_DMA_Abort+0x422>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4a2d      	ldr	r2, [pc, #180]	@ (800ae34 <HAL_DMA_Abort+0x448>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d045      	beq.n	800ae0e <HAL_DMA_Abort+0x422>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a2c      	ldr	r2, [pc, #176]	@ (800ae38 <HAL_DMA_Abort+0x44c>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d040      	beq.n	800ae0e <HAL_DMA_Abort+0x422>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a2a      	ldr	r2, [pc, #168]	@ (800ae3c <HAL_DMA_Abort+0x450>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d03b      	beq.n	800ae0e <HAL_DMA_Abort+0x422>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a29      	ldr	r2, [pc, #164]	@ (800ae40 <HAL_DMA_Abort+0x454>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d036      	beq.n	800ae0e <HAL_DMA_Abort+0x422>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4a27      	ldr	r2, [pc, #156]	@ (800ae44 <HAL_DMA_Abort+0x458>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d031      	beq.n	800ae0e <HAL_DMA_Abort+0x422>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	4a26      	ldr	r2, [pc, #152]	@ (800ae48 <HAL_DMA_Abort+0x45c>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d02c      	beq.n	800ae0e <HAL_DMA_Abort+0x422>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4a24      	ldr	r2, [pc, #144]	@ (800ae4c <HAL_DMA_Abort+0x460>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d027      	beq.n	800ae0e <HAL_DMA_Abort+0x422>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	4a23      	ldr	r2, [pc, #140]	@ (800ae50 <HAL_DMA_Abort+0x464>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d022      	beq.n	800ae0e <HAL_DMA_Abort+0x422>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a21      	ldr	r2, [pc, #132]	@ (800ae54 <HAL_DMA_Abort+0x468>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d01d      	beq.n	800ae0e <HAL_DMA_Abort+0x422>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a20      	ldr	r2, [pc, #128]	@ (800ae58 <HAL_DMA_Abort+0x46c>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d018      	beq.n	800ae0e <HAL_DMA_Abort+0x422>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a1e      	ldr	r2, [pc, #120]	@ (800ae5c <HAL_DMA_Abort+0x470>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d013      	beq.n	800ae0e <HAL_DMA_Abort+0x422>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a1d      	ldr	r2, [pc, #116]	@ (800ae60 <HAL_DMA_Abort+0x474>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d00e      	beq.n	800ae0e <HAL_DMA_Abort+0x422>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a1b      	ldr	r2, [pc, #108]	@ (800ae64 <HAL_DMA_Abort+0x478>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d009      	beq.n	800ae0e <HAL_DMA_Abort+0x422>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4a1a      	ldr	r2, [pc, #104]	@ (800ae68 <HAL_DMA_Abort+0x47c>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d004      	beq.n	800ae0e <HAL_DMA_Abort+0x422>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4a18      	ldr	r2, [pc, #96]	@ (800ae6c <HAL_DMA_Abort+0x480>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d101      	bne.n	800ae12 <HAL_DMA_Abort+0x426>
 800ae0e:	2301      	movs	r3, #1
 800ae10:	e000      	b.n	800ae14 <HAL_DMA_Abort+0x428>
 800ae12:	2300      	movs	r3, #0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d02b      	beq.n	800ae70 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae1c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae22:	f003 031f 	and.w	r3, r3, #31
 800ae26:	223f      	movs	r2, #63	@ 0x3f
 800ae28:	409a      	lsls	r2, r3
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	609a      	str	r2, [r3, #8]
 800ae2e:	e02a      	b.n	800ae86 <HAL_DMA_Abort+0x49a>
 800ae30:	40020010 	.word	0x40020010
 800ae34:	40020028 	.word	0x40020028
 800ae38:	40020040 	.word	0x40020040
 800ae3c:	40020058 	.word	0x40020058
 800ae40:	40020070 	.word	0x40020070
 800ae44:	40020088 	.word	0x40020088
 800ae48:	400200a0 	.word	0x400200a0
 800ae4c:	400200b8 	.word	0x400200b8
 800ae50:	40020410 	.word	0x40020410
 800ae54:	40020428 	.word	0x40020428
 800ae58:	40020440 	.word	0x40020440
 800ae5c:	40020458 	.word	0x40020458
 800ae60:	40020470 	.word	0x40020470
 800ae64:	40020488 	.word	0x40020488
 800ae68:	400204a0 	.word	0x400204a0
 800ae6c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae74:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae7a:	f003 031f 	and.w	r3, r3, #31
 800ae7e:	2201      	movs	r2, #1
 800ae80:	409a      	lsls	r2, r3
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4a4f      	ldr	r2, [pc, #316]	@ (800afc8 <HAL_DMA_Abort+0x5dc>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d072      	beq.n	800af76 <HAL_DMA_Abort+0x58a>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4a4d      	ldr	r2, [pc, #308]	@ (800afcc <HAL_DMA_Abort+0x5e0>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d06d      	beq.n	800af76 <HAL_DMA_Abort+0x58a>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4a4c      	ldr	r2, [pc, #304]	@ (800afd0 <HAL_DMA_Abort+0x5e4>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d068      	beq.n	800af76 <HAL_DMA_Abort+0x58a>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	4a4a      	ldr	r2, [pc, #296]	@ (800afd4 <HAL_DMA_Abort+0x5e8>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d063      	beq.n	800af76 <HAL_DMA_Abort+0x58a>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4a49      	ldr	r2, [pc, #292]	@ (800afd8 <HAL_DMA_Abort+0x5ec>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d05e      	beq.n	800af76 <HAL_DMA_Abort+0x58a>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	4a47      	ldr	r2, [pc, #284]	@ (800afdc <HAL_DMA_Abort+0x5f0>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d059      	beq.n	800af76 <HAL_DMA_Abort+0x58a>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4a46      	ldr	r2, [pc, #280]	@ (800afe0 <HAL_DMA_Abort+0x5f4>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d054      	beq.n	800af76 <HAL_DMA_Abort+0x58a>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4a44      	ldr	r2, [pc, #272]	@ (800afe4 <HAL_DMA_Abort+0x5f8>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d04f      	beq.n	800af76 <HAL_DMA_Abort+0x58a>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4a43      	ldr	r2, [pc, #268]	@ (800afe8 <HAL_DMA_Abort+0x5fc>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d04a      	beq.n	800af76 <HAL_DMA_Abort+0x58a>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a41      	ldr	r2, [pc, #260]	@ (800afec <HAL_DMA_Abort+0x600>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d045      	beq.n	800af76 <HAL_DMA_Abort+0x58a>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4a40      	ldr	r2, [pc, #256]	@ (800aff0 <HAL_DMA_Abort+0x604>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d040      	beq.n	800af76 <HAL_DMA_Abort+0x58a>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4a3e      	ldr	r2, [pc, #248]	@ (800aff4 <HAL_DMA_Abort+0x608>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d03b      	beq.n	800af76 <HAL_DMA_Abort+0x58a>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	4a3d      	ldr	r2, [pc, #244]	@ (800aff8 <HAL_DMA_Abort+0x60c>)
 800af04:	4293      	cmp	r3, r2
 800af06:	d036      	beq.n	800af76 <HAL_DMA_Abort+0x58a>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4a3b      	ldr	r2, [pc, #236]	@ (800affc <HAL_DMA_Abort+0x610>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d031      	beq.n	800af76 <HAL_DMA_Abort+0x58a>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a3a      	ldr	r2, [pc, #232]	@ (800b000 <HAL_DMA_Abort+0x614>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d02c      	beq.n	800af76 <HAL_DMA_Abort+0x58a>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4a38      	ldr	r2, [pc, #224]	@ (800b004 <HAL_DMA_Abort+0x618>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d027      	beq.n	800af76 <HAL_DMA_Abort+0x58a>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4a37      	ldr	r2, [pc, #220]	@ (800b008 <HAL_DMA_Abort+0x61c>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d022      	beq.n	800af76 <HAL_DMA_Abort+0x58a>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a35      	ldr	r2, [pc, #212]	@ (800b00c <HAL_DMA_Abort+0x620>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d01d      	beq.n	800af76 <HAL_DMA_Abort+0x58a>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	4a34      	ldr	r2, [pc, #208]	@ (800b010 <HAL_DMA_Abort+0x624>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d018      	beq.n	800af76 <HAL_DMA_Abort+0x58a>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a32      	ldr	r2, [pc, #200]	@ (800b014 <HAL_DMA_Abort+0x628>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d013      	beq.n	800af76 <HAL_DMA_Abort+0x58a>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	4a31      	ldr	r2, [pc, #196]	@ (800b018 <HAL_DMA_Abort+0x62c>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d00e      	beq.n	800af76 <HAL_DMA_Abort+0x58a>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4a2f      	ldr	r2, [pc, #188]	@ (800b01c <HAL_DMA_Abort+0x630>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d009      	beq.n	800af76 <HAL_DMA_Abort+0x58a>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	4a2e      	ldr	r2, [pc, #184]	@ (800b020 <HAL_DMA_Abort+0x634>)
 800af68:	4293      	cmp	r3, r2
 800af6a:	d004      	beq.n	800af76 <HAL_DMA_Abort+0x58a>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4a2c      	ldr	r2, [pc, #176]	@ (800b024 <HAL_DMA_Abort+0x638>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d101      	bne.n	800af7a <HAL_DMA_Abort+0x58e>
 800af76:	2301      	movs	r3, #1
 800af78:	e000      	b.n	800af7c <HAL_DMA_Abort+0x590>
 800af7a:	2300      	movs	r3, #0
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d015      	beq.n	800afac <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af84:	687a      	ldr	r2, [r7, #4]
 800af86:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800af88:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d00c      	beq.n	800afac <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af96:	681a      	ldr	r2, [r3, #0]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800afa0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afa6:	687a      	ldr	r2, [r7, #4]
 800afa8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800afaa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2201      	movs	r2, #1
 800afb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800afbc:	2300      	movs	r3, #0
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3718      	adds	r7, #24
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}
 800afc6:	bf00      	nop
 800afc8:	40020010 	.word	0x40020010
 800afcc:	40020028 	.word	0x40020028
 800afd0:	40020040 	.word	0x40020040
 800afd4:	40020058 	.word	0x40020058
 800afd8:	40020070 	.word	0x40020070
 800afdc:	40020088 	.word	0x40020088
 800afe0:	400200a0 	.word	0x400200a0
 800afe4:	400200b8 	.word	0x400200b8
 800afe8:	40020410 	.word	0x40020410
 800afec:	40020428 	.word	0x40020428
 800aff0:	40020440 	.word	0x40020440
 800aff4:	40020458 	.word	0x40020458
 800aff8:	40020470 	.word	0x40020470
 800affc:	40020488 	.word	0x40020488
 800b000:	400204a0 	.word	0x400204a0
 800b004:	400204b8 	.word	0x400204b8
 800b008:	58025408 	.word	0x58025408
 800b00c:	5802541c 	.word	0x5802541c
 800b010:	58025430 	.word	0x58025430
 800b014:	58025444 	.word	0x58025444
 800b018:	58025458 	.word	0x58025458
 800b01c:	5802546c 	.word	0x5802546c
 800b020:	58025480 	.word	0x58025480
 800b024:	58025494 	.word	0x58025494

0800b028 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d101      	bne.n	800b03a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800b036:	2301      	movs	r3, #1
 800b038:	e237      	b.n	800b4aa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b040:	b2db      	uxtb	r3, r3
 800b042:	2b02      	cmp	r3, #2
 800b044:	d004      	beq.n	800b050 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2280      	movs	r2, #128	@ 0x80
 800b04a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800b04c:	2301      	movs	r3, #1
 800b04e:	e22c      	b.n	800b4aa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4a5c      	ldr	r2, [pc, #368]	@ (800b1c8 <HAL_DMA_Abort_IT+0x1a0>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d04a      	beq.n	800b0f0 <HAL_DMA_Abort_IT+0xc8>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	4a5b      	ldr	r2, [pc, #364]	@ (800b1cc <HAL_DMA_Abort_IT+0x1a4>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d045      	beq.n	800b0f0 <HAL_DMA_Abort_IT+0xc8>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4a59      	ldr	r2, [pc, #356]	@ (800b1d0 <HAL_DMA_Abort_IT+0x1a8>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d040      	beq.n	800b0f0 <HAL_DMA_Abort_IT+0xc8>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	4a58      	ldr	r2, [pc, #352]	@ (800b1d4 <HAL_DMA_Abort_IT+0x1ac>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d03b      	beq.n	800b0f0 <HAL_DMA_Abort_IT+0xc8>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4a56      	ldr	r2, [pc, #344]	@ (800b1d8 <HAL_DMA_Abort_IT+0x1b0>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d036      	beq.n	800b0f0 <HAL_DMA_Abort_IT+0xc8>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	4a55      	ldr	r2, [pc, #340]	@ (800b1dc <HAL_DMA_Abort_IT+0x1b4>)
 800b088:	4293      	cmp	r3, r2
 800b08a:	d031      	beq.n	800b0f0 <HAL_DMA_Abort_IT+0xc8>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4a53      	ldr	r2, [pc, #332]	@ (800b1e0 <HAL_DMA_Abort_IT+0x1b8>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d02c      	beq.n	800b0f0 <HAL_DMA_Abort_IT+0xc8>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4a52      	ldr	r2, [pc, #328]	@ (800b1e4 <HAL_DMA_Abort_IT+0x1bc>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d027      	beq.n	800b0f0 <HAL_DMA_Abort_IT+0xc8>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a50      	ldr	r2, [pc, #320]	@ (800b1e8 <HAL_DMA_Abort_IT+0x1c0>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d022      	beq.n	800b0f0 <HAL_DMA_Abort_IT+0xc8>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4a4f      	ldr	r2, [pc, #316]	@ (800b1ec <HAL_DMA_Abort_IT+0x1c4>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d01d      	beq.n	800b0f0 <HAL_DMA_Abort_IT+0xc8>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	4a4d      	ldr	r2, [pc, #308]	@ (800b1f0 <HAL_DMA_Abort_IT+0x1c8>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d018      	beq.n	800b0f0 <HAL_DMA_Abort_IT+0xc8>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	4a4c      	ldr	r2, [pc, #304]	@ (800b1f4 <HAL_DMA_Abort_IT+0x1cc>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d013      	beq.n	800b0f0 <HAL_DMA_Abort_IT+0xc8>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	4a4a      	ldr	r2, [pc, #296]	@ (800b1f8 <HAL_DMA_Abort_IT+0x1d0>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d00e      	beq.n	800b0f0 <HAL_DMA_Abort_IT+0xc8>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4a49      	ldr	r2, [pc, #292]	@ (800b1fc <HAL_DMA_Abort_IT+0x1d4>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d009      	beq.n	800b0f0 <HAL_DMA_Abort_IT+0xc8>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4a47      	ldr	r2, [pc, #284]	@ (800b200 <HAL_DMA_Abort_IT+0x1d8>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d004      	beq.n	800b0f0 <HAL_DMA_Abort_IT+0xc8>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4a46      	ldr	r2, [pc, #280]	@ (800b204 <HAL_DMA_Abort_IT+0x1dc>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d101      	bne.n	800b0f4 <HAL_DMA_Abort_IT+0xcc>
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	e000      	b.n	800b0f6 <HAL_DMA_Abort_IT+0xce>
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	f000 8086 	beq.w	800b208 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2204      	movs	r2, #4
 800b100:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4a2f      	ldr	r2, [pc, #188]	@ (800b1c8 <HAL_DMA_Abort_IT+0x1a0>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d04a      	beq.n	800b1a4 <HAL_DMA_Abort_IT+0x17c>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	4a2e      	ldr	r2, [pc, #184]	@ (800b1cc <HAL_DMA_Abort_IT+0x1a4>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d045      	beq.n	800b1a4 <HAL_DMA_Abort_IT+0x17c>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4a2c      	ldr	r2, [pc, #176]	@ (800b1d0 <HAL_DMA_Abort_IT+0x1a8>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d040      	beq.n	800b1a4 <HAL_DMA_Abort_IT+0x17c>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	4a2b      	ldr	r2, [pc, #172]	@ (800b1d4 <HAL_DMA_Abort_IT+0x1ac>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d03b      	beq.n	800b1a4 <HAL_DMA_Abort_IT+0x17c>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4a29      	ldr	r2, [pc, #164]	@ (800b1d8 <HAL_DMA_Abort_IT+0x1b0>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d036      	beq.n	800b1a4 <HAL_DMA_Abort_IT+0x17c>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4a28      	ldr	r2, [pc, #160]	@ (800b1dc <HAL_DMA_Abort_IT+0x1b4>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d031      	beq.n	800b1a4 <HAL_DMA_Abort_IT+0x17c>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4a26      	ldr	r2, [pc, #152]	@ (800b1e0 <HAL_DMA_Abort_IT+0x1b8>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d02c      	beq.n	800b1a4 <HAL_DMA_Abort_IT+0x17c>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	4a25      	ldr	r2, [pc, #148]	@ (800b1e4 <HAL_DMA_Abort_IT+0x1bc>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d027      	beq.n	800b1a4 <HAL_DMA_Abort_IT+0x17c>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a23      	ldr	r2, [pc, #140]	@ (800b1e8 <HAL_DMA_Abort_IT+0x1c0>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d022      	beq.n	800b1a4 <HAL_DMA_Abort_IT+0x17c>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4a22      	ldr	r2, [pc, #136]	@ (800b1ec <HAL_DMA_Abort_IT+0x1c4>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d01d      	beq.n	800b1a4 <HAL_DMA_Abort_IT+0x17c>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4a20      	ldr	r2, [pc, #128]	@ (800b1f0 <HAL_DMA_Abort_IT+0x1c8>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d018      	beq.n	800b1a4 <HAL_DMA_Abort_IT+0x17c>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4a1f      	ldr	r2, [pc, #124]	@ (800b1f4 <HAL_DMA_Abort_IT+0x1cc>)
 800b178:	4293      	cmp	r3, r2
 800b17a:	d013      	beq.n	800b1a4 <HAL_DMA_Abort_IT+0x17c>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4a1d      	ldr	r2, [pc, #116]	@ (800b1f8 <HAL_DMA_Abort_IT+0x1d0>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d00e      	beq.n	800b1a4 <HAL_DMA_Abort_IT+0x17c>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	4a1c      	ldr	r2, [pc, #112]	@ (800b1fc <HAL_DMA_Abort_IT+0x1d4>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d009      	beq.n	800b1a4 <HAL_DMA_Abort_IT+0x17c>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	4a1a      	ldr	r2, [pc, #104]	@ (800b200 <HAL_DMA_Abort_IT+0x1d8>)
 800b196:	4293      	cmp	r3, r2
 800b198:	d004      	beq.n	800b1a4 <HAL_DMA_Abort_IT+0x17c>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4a19      	ldr	r2, [pc, #100]	@ (800b204 <HAL_DMA_Abort_IT+0x1dc>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d108      	bne.n	800b1b6 <HAL_DMA_Abort_IT+0x18e>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f022 0201 	bic.w	r2, r2, #1
 800b1b2:	601a      	str	r2, [r3, #0]
 800b1b4:	e178      	b.n	800b4a8 <HAL_DMA_Abort_IT+0x480>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	681a      	ldr	r2, [r3, #0]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f022 0201 	bic.w	r2, r2, #1
 800b1c4:	601a      	str	r2, [r3, #0]
 800b1c6:	e16f      	b.n	800b4a8 <HAL_DMA_Abort_IT+0x480>
 800b1c8:	40020010 	.word	0x40020010
 800b1cc:	40020028 	.word	0x40020028
 800b1d0:	40020040 	.word	0x40020040
 800b1d4:	40020058 	.word	0x40020058
 800b1d8:	40020070 	.word	0x40020070
 800b1dc:	40020088 	.word	0x40020088
 800b1e0:	400200a0 	.word	0x400200a0
 800b1e4:	400200b8 	.word	0x400200b8
 800b1e8:	40020410 	.word	0x40020410
 800b1ec:	40020428 	.word	0x40020428
 800b1f0:	40020440 	.word	0x40020440
 800b1f4:	40020458 	.word	0x40020458
 800b1f8:	40020470 	.word	0x40020470
 800b1fc:	40020488 	.word	0x40020488
 800b200:	400204a0 	.word	0x400204a0
 800b204:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f022 020e 	bic.w	r2, r2, #14
 800b216:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	4a6c      	ldr	r2, [pc, #432]	@ (800b3d0 <HAL_DMA_Abort_IT+0x3a8>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d04a      	beq.n	800b2b8 <HAL_DMA_Abort_IT+0x290>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	4a6b      	ldr	r2, [pc, #428]	@ (800b3d4 <HAL_DMA_Abort_IT+0x3ac>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d045      	beq.n	800b2b8 <HAL_DMA_Abort_IT+0x290>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4a69      	ldr	r2, [pc, #420]	@ (800b3d8 <HAL_DMA_Abort_IT+0x3b0>)
 800b232:	4293      	cmp	r3, r2
 800b234:	d040      	beq.n	800b2b8 <HAL_DMA_Abort_IT+0x290>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	4a68      	ldr	r2, [pc, #416]	@ (800b3dc <HAL_DMA_Abort_IT+0x3b4>)
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d03b      	beq.n	800b2b8 <HAL_DMA_Abort_IT+0x290>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	4a66      	ldr	r2, [pc, #408]	@ (800b3e0 <HAL_DMA_Abort_IT+0x3b8>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d036      	beq.n	800b2b8 <HAL_DMA_Abort_IT+0x290>
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	4a65      	ldr	r2, [pc, #404]	@ (800b3e4 <HAL_DMA_Abort_IT+0x3bc>)
 800b250:	4293      	cmp	r3, r2
 800b252:	d031      	beq.n	800b2b8 <HAL_DMA_Abort_IT+0x290>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4a63      	ldr	r2, [pc, #396]	@ (800b3e8 <HAL_DMA_Abort_IT+0x3c0>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d02c      	beq.n	800b2b8 <HAL_DMA_Abort_IT+0x290>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4a62      	ldr	r2, [pc, #392]	@ (800b3ec <HAL_DMA_Abort_IT+0x3c4>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d027      	beq.n	800b2b8 <HAL_DMA_Abort_IT+0x290>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	4a60      	ldr	r2, [pc, #384]	@ (800b3f0 <HAL_DMA_Abort_IT+0x3c8>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	d022      	beq.n	800b2b8 <HAL_DMA_Abort_IT+0x290>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	4a5f      	ldr	r2, [pc, #380]	@ (800b3f4 <HAL_DMA_Abort_IT+0x3cc>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d01d      	beq.n	800b2b8 <HAL_DMA_Abort_IT+0x290>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a5d      	ldr	r2, [pc, #372]	@ (800b3f8 <HAL_DMA_Abort_IT+0x3d0>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d018      	beq.n	800b2b8 <HAL_DMA_Abort_IT+0x290>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4a5c      	ldr	r2, [pc, #368]	@ (800b3fc <HAL_DMA_Abort_IT+0x3d4>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d013      	beq.n	800b2b8 <HAL_DMA_Abort_IT+0x290>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4a5a      	ldr	r2, [pc, #360]	@ (800b400 <HAL_DMA_Abort_IT+0x3d8>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d00e      	beq.n	800b2b8 <HAL_DMA_Abort_IT+0x290>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4a59      	ldr	r2, [pc, #356]	@ (800b404 <HAL_DMA_Abort_IT+0x3dc>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d009      	beq.n	800b2b8 <HAL_DMA_Abort_IT+0x290>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4a57      	ldr	r2, [pc, #348]	@ (800b408 <HAL_DMA_Abort_IT+0x3e0>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d004      	beq.n	800b2b8 <HAL_DMA_Abort_IT+0x290>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	4a56      	ldr	r2, [pc, #344]	@ (800b40c <HAL_DMA_Abort_IT+0x3e4>)
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d108      	bne.n	800b2ca <HAL_DMA_Abort_IT+0x2a2>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f022 0201 	bic.w	r2, r2, #1
 800b2c6:	601a      	str	r2, [r3, #0]
 800b2c8:	e007      	b.n	800b2da <HAL_DMA_Abort_IT+0x2b2>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	681a      	ldr	r2, [r3, #0]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f022 0201 	bic.w	r2, r2, #1
 800b2d8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4a3c      	ldr	r2, [pc, #240]	@ (800b3d0 <HAL_DMA_Abort_IT+0x3a8>)
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d072      	beq.n	800b3ca <HAL_DMA_Abort_IT+0x3a2>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4a3a      	ldr	r2, [pc, #232]	@ (800b3d4 <HAL_DMA_Abort_IT+0x3ac>)
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d06d      	beq.n	800b3ca <HAL_DMA_Abort_IT+0x3a2>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4a39      	ldr	r2, [pc, #228]	@ (800b3d8 <HAL_DMA_Abort_IT+0x3b0>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d068      	beq.n	800b3ca <HAL_DMA_Abort_IT+0x3a2>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4a37      	ldr	r2, [pc, #220]	@ (800b3dc <HAL_DMA_Abort_IT+0x3b4>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d063      	beq.n	800b3ca <HAL_DMA_Abort_IT+0x3a2>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4a36      	ldr	r2, [pc, #216]	@ (800b3e0 <HAL_DMA_Abort_IT+0x3b8>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d05e      	beq.n	800b3ca <HAL_DMA_Abort_IT+0x3a2>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4a34      	ldr	r2, [pc, #208]	@ (800b3e4 <HAL_DMA_Abort_IT+0x3bc>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d059      	beq.n	800b3ca <HAL_DMA_Abort_IT+0x3a2>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4a33      	ldr	r2, [pc, #204]	@ (800b3e8 <HAL_DMA_Abort_IT+0x3c0>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d054      	beq.n	800b3ca <HAL_DMA_Abort_IT+0x3a2>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	4a31      	ldr	r2, [pc, #196]	@ (800b3ec <HAL_DMA_Abort_IT+0x3c4>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d04f      	beq.n	800b3ca <HAL_DMA_Abort_IT+0x3a2>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	4a30      	ldr	r2, [pc, #192]	@ (800b3f0 <HAL_DMA_Abort_IT+0x3c8>)
 800b330:	4293      	cmp	r3, r2
 800b332:	d04a      	beq.n	800b3ca <HAL_DMA_Abort_IT+0x3a2>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	4a2e      	ldr	r2, [pc, #184]	@ (800b3f4 <HAL_DMA_Abort_IT+0x3cc>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d045      	beq.n	800b3ca <HAL_DMA_Abort_IT+0x3a2>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	4a2d      	ldr	r2, [pc, #180]	@ (800b3f8 <HAL_DMA_Abort_IT+0x3d0>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d040      	beq.n	800b3ca <HAL_DMA_Abort_IT+0x3a2>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4a2b      	ldr	r2, [pc, #172]	@ (800b3fc <HAL_DMA_Abort_IT+0x3d4>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d03b      	beq.n	800b3ca <HAL_DMA_Abort_IT+0x3a2>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	4a2a      	ldr	r2, [pc, #168]	@ (800b400 <HAL_DMA_Abort_IT+0x3d8>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d036      	beq.n	800b3ca <HAL_DMA_Abort_IT+0x3a2>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	4a28      	ldr	r2, [pc, #160]	@ (800b404 <HAL_DMA_Abort_IT+0x3dc>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d031      	beq.n	800b3ca <HAL_DMA_Abort_IT+0x3a2>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	4a27      	ldr	r2, [pc, #156]	@ (800b408 <HAL_DMA_Abort_IT+0x3e0>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d02c      	beq.n	800b3ca <HAL_DMA_Abort_IT+0x3a2>
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4a25      	ldr	r2, [pc, #148]	@ (800b40c <HAL_DMA_Abort_IT+0x3e4>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d027      	beq.n	800b3ca <HAL_DMA_Abort_IT+0x3a2>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	4a24      	ldr	r2, [pc, #144]	@ (800b410 <HAL_DMA_Abort_IT+0x3e8>)
 800b380:	4293      	cmp	r3, r2
 800b382:	d022      	beq.n	800b3ca <HAL_DMA_Abort_IT+0x3a2>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	4a22      	ldr	r2, [pc, #136]	@ (800b414 <HAL_DMA_Abort_IT+0x3ec>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d01d      	beq.n	800b3ca <HAL_DMA_Abort_IT+0x3a2>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	4a21      	ldr	r2, [pc, #132]	@ (800b418 <HAL_DMA_Abort_IT+0x3f0>)
 800b394:	4293      	cmp	r3, r2
 800b396:	d018      	beq.n	800b3ca <HAL_DMA_Abort_IT+0x3a2>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4a1f      	ldr	r2, [pc, #124]	@ (800b41c <HAL_DMA_Abort_IT+0x3f4>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d013      	beq.n	800b3ca <HAL_DMA_Abort_IT+0x3a2>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	4a1e      	ldr	r2, [pc, #120]	@ (800b420 <HAL_DMA_Abort_IT+0x3f8>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d00e      	beq.n	800b3ca <HAL_DMA_Abort_IT+0x3a2>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4a1c      	ldr	r2, [pc, #112]	@ (800b424 <HAL_DMA_Abort_IT+0x3fc>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d009      	beq.n	800b3ca <HAL_DMA_Abort_IT+0x3a2>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4a1b      	ldr	r2, [pc, #108]	@ (800b428 <HAL_DMA_Abort_IT+0x400>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d004      	beq.n	800b3ca <HAL_DMA_Abort_IT+0x3a2>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4a19      	ldr	r2, [pc, #100]	@ (800b42c <HAL_DMA_Abort_IT+0x404>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d132      	bne.n	800b430 <HAL_DMA_Abort_IT+0x408>
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	e031      	b.n	800b432 <HAL_DMA_Abort_IT+0x40a>
 800b3ce:	bf00      	nop
 800b3d0:	40020010 	.word	0x40020010
 800b3d4:	40020028 	.word	0x40020028
 800b3d8:	40020040 	.word	0x40020040
 800b3dc:	40020058 	.word	0x40020058
 800b3e0:	40020070 	.word	0x40020070
 800b3e4:	40020088 	.word	0x40020088
 800b3e8:	400200a0 	.word	0x400200a0
 800b3ec:	400200b8 	.word	0x400200b8
 800b3f0:	40020410 	.word	0x40020410
 800b3f4:	40020428 	.word	0x40020428
 800b3f8:	40020440 	.word	0x40020440
 800b3fc:	40020458 	.word	0x40020458
 800b400:	40020470 	.word	0x40020470
 800b404:	40020488 	.word	0x40020488
 800b408:	400204a0 	.word	0x400204a0
 800b40c:	400204b8 	.word	0x400204b8
 800b410:	58025408 	.word	0x58025408
 800b414:	5802541c 	.word	0x5802541c
 800b418:	58025430 	.word	0x58025430
 800b41c:	58025444 	.word	0x58025444
 800b420:	58025458 	.word	0x58025458
 800b424:	5802546c 	.word	0x5802546c
 800b428:	58025480 	.word	0x58025480
 800b42c:	58025494 	.word	0x58025494
 800b430:	2300      	movs	r3, #0
 800b432:	2b00      	cmp	r3, #0
 800b434:	d028      	beq.n	800b488 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b440:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b444:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b44a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b450:	f003 031f 	and.w	r3, r3, #31
 800b454:	2201      	movs	r2, #1
 800b456:	409a      	lsls	r2, r3
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800b464:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d00c      	beq.n	800b488 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b472:	681a      	ldr	r2, [r3, #0]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b478:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b47c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800b486:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2201      	movs	r2, #1
 800b48c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2200      	movs	r2, #0
 800b494:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d003      	beq.n	800b4a8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800b4a8:	2300      	movs	r3, #0
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop

0800b4b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b08a      	sub	sp, #40	@ 0x28
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b4c0:	4b67      	ldr	r3, [pc, #412]	@ (800b660 <HAL_DMA_IRQHandler+0x1ac>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	4a67      	ldr	r2, [pc, #412]	@ (800b664 <HAL_DMA_IRQHandler+0x1b0>)
 800b4c6:	fba2 2303 	umull	r2, r3, r2, r3
 800b4ca:	0a9b      	lsrs	r3, r3, #10
 800b4cc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b4d2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b4d8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800b4da:	6a3b      	ldr	r3, [r7, #32]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800b4e0:	69fb      	ldr	r3, [r7, #28]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4a5f      	ldr	r2, [pc, #380]	@ (800b668 <HAL_DMA_IRQHandler+0x1b4>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d04a      	beq.n	800b586 <HAL_DMA_IRQHandler+0xd2>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4a5d      	ldr	r2, [pc, #372]	@ (800b66c <HAL_DMA_IRQHandler+0x1b8>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d045      	beq.n	800b586 <HAL_DMA_IRQHandler+0xd2>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a5c      	ldr	r2, [pc, #368]	@ (800b670 <HAL_DMA_IRQHandler+0x1bc>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d040      	beq.n	800b586 <HAL_DMA_IRQHandler+0xd2>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a5a      	ldr	r2, [pc, #360]	@ (800b674 <HAL_DMA_IRQHandler+0x1c0>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d03b      	beq.n	800b586 <HAL_DMA_IRQHandler+0xd2>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4a59      	ldr	r2, [pc, #356]	@ (800b678 <HAL_DMA_IRQHandler+0x1c4>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d036      	beq.n	800b586 <HAL_DMA_IRQHandler+0xd2>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4a57      	ldr	r2, [pc, #348]	@ (800b67c <HAL_DMA_IRQHandler+0x1c8>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d031      	beq.n	800b586 <HAL_DMA_IRQHandler+0xd2>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4a56      	ldr	r2, [pc, #344]	@ (800b680 <HAL_DMA_IRQHandler+0x1cc>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d02c      	beq.n	800b586 <HAL_DMA_IRQHandler+0xd2>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4a54      	ldr	r2, [pc, #336]	@ (800b684 <HAL_DMA_IRQHandler+0x1d0>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d027      	beq.n	800b586 <HAL_DMA_IRQHandler+0xd2>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a53      	ldr	r2, [pc, #332]	@ (800b688 <HAL_DMA_IRQHandler+0x1d4>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d022      	beq.n	800b586 <HAL_DMA_IRQHandler+0xd2>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a51      	ldr	r2, [pc, #324]	@ (800b68c <HAL_DMA_IRQHandler+0x1d8>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d01d      	beq.n	800b586 <HAL_DMA_IRQHandler+0xd2>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4a50      	ldr	r2, [pc, #320]	@ (800b690 <HAL_DMA_IRQHandler+0x1dc>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d018      	beq.n	800b586 <HAL_DMA_IRQHandler+0xd2>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a4e      	ldr	r2, [pc, #312]	@ (800b694 <HAL_DMA_IRQHandler+0x1e0>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d013      	beq.n	800b586 <HAL_DMA_IRQHandler+0xd2>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	4a4d      	ldr	r2, [pc, #308]	@ (800b698 <HAL_DMA_IRQHandler+0x1e4>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d00e      	beq.n	800b586 <HAL_DMA_IRQHandler+0xd2>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a4b      	ldr	r2, [pc, #300]	@ (800b69c <HAL_DMA_IRQHandler+0x1e8>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d009      	beq.n	800b586 <HAL_DMA_IRQHandler+0xd2>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4a4a      	ldr	r2, [pc, #296]	@ (800b6a0 <HAL_DMA_IRQHandler+0x1ec>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	d004      	beq.n	800b586 <HAL_DMA_IRQHandler+0xd2>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4a48      	ldr	r2, [pc, #288]	@ (800b6a4 <HAL_DMA_IRQHandler+0x1f0>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d101      	bne.n	800b58a <HAL_DMA_IRQHandler+0xd6>
 800b586:	2301      	movs	r3, #1
 800b588:	e000      	b.n	800b58c <HAL_DMA_IRQHandler+0xd8>
 800b58a:	2300      	movs	r3, #0
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	f000 842b 	beq.w	800bde8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b596:	f003 031f 	and.w	r3, r3, #31
 800b59a:	2208      	movs	r2, #8
 800b59c:	409a      	lsls	r2, r3
 800b59e:	69bb      	ldr	r3, [r7, #24]
 800b5a0:	4013      	ands	r3, r2
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	f000 80a2 	beq.w	800b6ec <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4a2e      	ldr	r2, [pc, #184]	@ (800b668 <HAL_DMA_IRQHandler+0x1b4>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d04a      	beq.n	800b648 <HAL_DMA_IRQHandler+0x194>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	4a2d      	ldr	r2, [pc, #180]	@ (800b66c <HAL_DMA_IRQHandler+0x1b8>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d045      	beq.n	800b648 <HAL_DMA_IRQHandler+0x194>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4a2b      	ldr	r2, [pc, #172]	@ (800b670 <HAL_DMA_IRQHandler+0x1bc>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d040      	beq.n	800b648 <HAL_DMA_IRQHandler+0x194>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4a2a      	ldr	r2, [pc, #168]	@ (800b674 <HAL_DMA_IRQHandler+0x1c0>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d03b      	beq.n	800b648 <HAL_DMA_IRQHandler+0x194>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4a28      	ldr	r2, [pc, #160]	@ (800b678 <HAL_DMA_IRQHandler+0x1c4>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d036      	beq.n	800b648 <HAL_DMA_IRQHandler+0x194>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	4a27      	ldr	r2, [pc, #156]	@ (800b67c <HAL_DMA_IRQHandler+0x1c8>)
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d031      	beq.n	800b648 <HAL_DMA_IRQHandler+0x194>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	4a25      	ldr	r2, [pc, #148]	@ (800b680 <HAL_DMA_IRQHandler+0x1cc>)
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d02c      	beq.n	800b648 <HAL_DMA_IRQHandler+0x194>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	4a24      	ldr	r2, [pc, #144]	@ (800b684 <HAL_DMA_IRQHandler+0x1d0>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d027      	beq.n	800b648 <HAL_DMA_IRQHandler+0x194>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4a22      	ldr	r2, [pc, #136]	@ (800b688 <HAL_DMA_IRQHandler+0x1d4>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d022      	beq.n	800b648 <HAL_DMA_IRQHandler+0x194>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	4a21      	ldr	r2, [pc, #132]	@ (800b68c <HAL_DMA_IRQHandler+0x1d8>)
 800b608:	4293      	cmp	r3, r2
 800b60a:	d01d      	beq.n	800b648 <HAL_DMA_IRQHandler+0x194>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4a1f      	ldr	r2, [pc, #124]	@ (800b690 <HAL_DMA_IRQHandler+0x1dc>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d018      	beq.n	800b648 <HAL_DMA_IRQHandler+0x194>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4a1e      	ldr	r2, [pc, #120]	@ (800b694 <HAL_DMA_IRQHandler+0x1e0>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d013      	beq.n	800b648 <HAL_DMA_IRQHandler+0x194>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	4a1c      	ldr	r2, [pc, #112]	@ (800b698 <HAL_DMA_IRQHandler+0x1e4>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d00e      	beq.n	800b648 <HAL_DMA_IRQHandler+0x194>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	4a1b      	ldr	r2, [pc, #108]	@ (800b69c <HAL_DMA_IRQHandler+0x1e8>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d009      	beq.n	800b648 <HAL_DMA_IRQHandler+0x194>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4a19      	ldr	r2, [pc, #100]	@ (800b6a0 <HAL_DMA_IRQHandler+0x1ec>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d004      	beq.n	800b648 <HAL_DMA_IRQHandler+0x194>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	4a18      	ldr	r2, [pc, #96]	@ (800b6a4 <HAL_DMA_IRQHandler+0x1f0>)
 800b644:	4293      	cmp	r3, r2
 800b646:	d12f      	bne.n	800b6a8 <HAL_DMA_IRQHandler+0x1f4>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f003 0304 	and.w	r3, r3, #4
 800b652:	2b00      	cmp	r3, #0
 800b654:	bf14      	ite	ne
 800b656:	2301      	movne	r3, #1
 800b658:	2300      	moveq	r3, #0
 800b65a:	b2db      	uxtb	r3, r3
 800b65c:	e02e      	b.n	800b6bc <HAL_DMA_IRQHandler+0x208>
 800b65e:	bf00      	nop
 800b660:	24000058 	.word	0x24000058
 800b664:	1b4e81b5 	.word	0x1b4e81b5
 800b668:	40020010 	.word	0x40020010
 800b66c:	40020028 	.word	0x40020028
 800b670:	40020040 	.word	0x40020040
 800b674:	40020058 	.word	0x40020058
 800b678:	40020070 	.word	0x40020070
 800b67c:	40020088 	.word	0x40020088
 800b680:	400200a0 	.word	0x400200a0
 800b684:	400200b8 	.word	0x400200b8
 800b688:	40020410 	.word	0x40020410
 800b68c:	40020428 	.word	0x40020428
 800b690:	40020440 	.word	0x40020440
 800b694:	40020458 	.word	0x40020458
 800b698:	40020470 	.word	0x40020470
 800b69c:	40020488 	.word	0x40020488
 800b6a0:	400204a0 	.word	0x400204a0
 800b6a4:	400204b8 	.word	0x400204b8
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f003 0308 	and.w	r3, r3, #8
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	bf14      	ite	ne
 800b6b6:	2301      	movne	r3, #1
 800b6b8:	2300      	moveq	r3, #0
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d015      	beq.n	800b6ec <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	681a      	ldr	r2, [r3, #0]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f022 0204 	bic.w	r2, r2, #4
 800b6ce:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b6d4:	f003 031f 	and.w	r3, r3, #31
 800b6d8:	2208      	movs	r2, #8
 800b6da:	409a      	lsls	r2, r3
 800b6dc:	6a3b      	ldr	r3, [r7, #32]
 800b6de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6e4:	f043 0201 	orr.w	r2, r3, #1
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b6f0:	f003 031f 	and.w	r3, r3, #31
 800b6f4:	69ba      	ldr	r2, [r7, #24]
 800b6f6:	fa22 f303 	lsr.w	r3, r2, r3
 800b6fa:	f003 0301 	and.w	r3, r3, #1
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d06e      	beq.n	800b7e0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	4a69      	ldr	r2, [pc, #420]	@ (800b8ac <HAL_DMA_IRQHandler+0x3f8>)
 800b708:	4293      	cmp	r3, r2
 800b70a:	d04a      	beq.n	800b7a2 <HAL_DMA_IRQHandler+0x2ee>
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	4a67      	ldr	r2, [pc, #412]	@ (800b8b0 <HAL_DMA_IRQHandler+0x3fc>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d045      	beq.n	800b7a2 <HAL_DMA_IRQHandler+0x2ee>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	4a66      	ldr	r2, [pc, #408]	@ (800b8b4 <HAL_DMA_IRQHandler+0x400>)
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d040      	beq.n	800b7a2 <HAL_DMA_IRQHandler+0x2ee>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	4a64      	ldr	r2, [pc, #400]	@ (800b8b8 <HAL_DMA_IRQHandler+0x404>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d03b      	beq.n	800b7a2 <HAL_DMA_IRQHandler+0x2ee>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	4a63      	ldr	r2, [pc, #396]	@ (800b8bc <HAL_DMA_IRQHandler+0x408>)
 800b730:	4293      	cmp	r3, r2
 800b732:	d036      	beq.n	800b7a2 <HAL_DMA_IRQHandler+0x2ee>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	4a61      	ldr	r2, [pc, #388]	@ (800b8c0 <HAL_DMA_IRQHandler+0x40c>)
 800b73a:	4293      	cmp	r3, r2
 800b73c:	d031      	beq.n	800b7a2 <HAL_DMA_IRQHandler+0x2ee>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	4a60      	ldr	r2, [pc, #384]	@ (800b8c4 <HAL_DMA_IRQHandler+0x410>)
 800b744:	4293      	cmp	r3, r2
 800b746:	d02c      	beq.n	800b7a2 <HAL_DMA_IRQHandler+0x2ee>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	4a5e      	ldr	r2, [pc, #376]	@ (800b8c8 <HAL_DMA_IRQHandler+0x414>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d027      	beq.n	800b7a2 <HAL_DMA_IRQHandler+0x2ee>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	4a5d      	ldr	r2, [pc, #372]	@ (800b8cc <HAL_DMA_IRQHandler+0x418>)
 800b758:	4293      	cmp	r3, r2
 800b75a:	d022      	beq.n	800b7a2 <HAL_DMA_IRQHandler+0x2ee>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4a5b      	ldr	r2, [pc, #364]	@ (800b8d0 <HAL_DMA_IRQHandler+0x41c>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d01d      	beq.n	800b7a2 <HAL_DMA_IRQHandler+0x2ee>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4a5a      	ldr	r2, [pc, #360]	@ (800b8d4 <HAL_DMA_IRQHandler+0x420>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d018      	beq.n	800b7a2 <HAL_DMA_IRQHandler+0x2ee>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4a58      	ldr	r2, [pc, #352]	@ (800b8d8 <HAL_DMA_IRQHandler+0x424>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d013      	beq.n	800b7a2 <HAL_DMA_IRQHandler+0x2ee>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	4a57      	ldr	r2, [pc, #348]	@ (800b8dc <HAL_DMA_IRQHandler+0x428>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d00e      	beq.n	800b7a2 <HAL_DMA_IRQHandler+0x2ee>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4a55      	ldr	r2, [pc, #340]	@ (800b8e0 <HAL_DMA_IRQHandler+0x42c>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d009      	beq.n	800b7a2 <HAL_DMA_IRQHandler+0x2ee>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4a54      	ldr	r2, [pc, #336]	@ (800b8e4 <HAL_DMA_IRQHandler+0x430>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d004      	beq.n	800b7a2 <HAL_DMA_IRQHandler+0x2ee>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	4a52      	ldr	r2, [pc, #328]	@ (800b8e8 <HAL_DMA_IRQHandler+0x434>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d10a      	bne.n	800b7b8 <HAL_DMA_IRQHandler+0x304>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	695b      	ldr	r3, [r3, #20]
 800b7a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	bf14      	ite	ne
 800b7b0:	2301      	movne	r3, #1
 800b7b2:	2300      	moveq	r3, #0
 800b7b4:	b2db      	uxtb	r3, r3
 800b7b6:	e003      	b.n	800b7c0 <HAL_DMA_IRQHandler+0x30c>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	2300      	movs	r3, #0
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d00d      	beq.n	800b7e0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7c8:	f003 031f 	and.w	r3, r3, #31
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	409a      	lsls	r2, r3
 800b7d0:	6a3b      	ldr	r3, [r7, #32]
 800b7d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b7d8:	f043 0202 	orr.w	r2, r3, #2
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7e4:	f003 031f 	and.w	r3, r3, #31
 800b7e8:	2204      	movs	r2, #4
 800b7ea:	409a      	lsls	r2, r3
 800b7ec:	69bb      	ldr	r3, [r7, #24]
 800b7ee:	4013      	ands	r3, r2
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	f000 808f 	beq.w	800b914 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	4a2c      	ldr	r2, [pc, #176]	@ (800b8ac <HAL_DMA_IRQHandler+0x3f8>)
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	d04a      	beq.n	800b896 <HAL_DMA_IRQHandler+0x3e2>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4a2a      	ldr	r2, [pc, #168]	@ (800b8b0 <HAL_DMA_IRQHandler+0x3fc>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d045      	beq.n	800b896 <HAL_DMA_IRQHandler+0x3e2>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	4a29      	ldr	r2, [pc, #164]	@ (800b8b4 <HAL_DMA_IRQHandler+0x400>)
 800b810:	4293      	cmp	r3, r2
 800b812:	d040      	beq.n	800b896 <HAL_DMA_IRQHandler+0x3e2>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4a27      	ldr	r2, [pc, #156]	@ (800b8b8 <HAL_DMA_IRQHandler+0x404>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d03b      	beq.n	800b896 <HAL_DMA_IRQHandler+0x3e2>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	4a26      	ldr	r2, [pc, #152]	@ (800b8bc <HAL_DMA_IRQHandler+0x408>)
 800b824:	4293      	cmp	r3, r2
 800b826:	d036      	beq.n	800b896 <HAL_DMA_IRQHandler+0x3e2>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	4a24      	ldr	r2, [pc, #144]	@ (800b8c0 <HAL_DMA_IRQHandler+0x40c>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d031      	beq.n	800b896 <HAL_DMA_IRQHandler+0x3e2>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4a23      	ldr	r2, [pc, #140]	@ (800b8c4 <HAL_DMA_IRQHandler+0x410>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d02c      	beq.n	800b896 <HAL_DMA_IRQHandler+0x3e2>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4a21      	ldr	r2, [pc, #132]	@ (800b8c8 <HAL_DMA_IRQHandler+0x414>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d027      	beq.n	800b896 <HAL_DMA_IRQHandler+0x3e2>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a20      	ldr	r2, [pc, #128]	@ (800b8cc <HAL_DMA_IRQHandler+0x418>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d022      	beq.n	800b896 <HAL_DMA_IRQHandler+0x3e2>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4a1e      	ldr	r2, [pc, #120]	@ (800b8d0 <HAL_DMA_IRQHandler+0x41c>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d01d      	beq.n	800b896 <HAL_DMA_IRQHandler+0x3e2>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4a1d      	ldr	r2, [pc, #116]	@ (800b8d4 <HAL_DMA_IRQHandler+0x420>)
 800b860:	4293      	cmp	r3, r2
 800b862:	d018      	beq.n	800b896 <HAL_DMA_IRQHandler+0x3e2>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4a1b      	ldr	r2, [pc, #108]	@ (800b8d8 <HAL_DMA_IRQHandler+0x424>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d013      	beq.n	800b896 <HAL_DMA_IRQHandler+0x3e2>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4a1a      	ldr	r2, [pc, #104]	@ (800b8dc <HAL_DMA_IRQHandler+0x428>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d00e      	beq.n	800b896 <HAL_DMA_IRQHandler+0x3e2>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4a18      	ldr	r2, [pc, #96]	@ (800b8e0 <HAL_DMA_IRQHandler+0x42c>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d009      	beq.n	800b896 <HAL_DMA_IRQHandler+0x3e2>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4a17      	ldr	r2, [pc, #92]	@ (800b8e4 <HAL_DMA_IRQHandler+0x430>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	d004      	beq.n	800b896 <HAL_DMA_IRQHandler+0x3e2>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a15      	ldr	r2, [pc, #84]	@ (800b8e8 <HAL_DMA_IRQHandler+0x434>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d12a      	bne.n	800b8ec <HAL_DMA_IRQHandler+0x438>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f003 0302 	and.w	r3, r3, #2
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	bf14      	ite	ne
 800b8a4:	2301      	movne	r3, #1
 800b8a6:	2300      	moveq	r3, #0
 800b8a8:	b2db      	uxtb	r3, r3
 800b8aa:	e023      	b.n	800b8f4 <HAL_DMA_IRQHandler+0x440>
 800b8ac:	40020010 	.word	0x40020010
 800b8b0:	40020028 	.word	0x40020028
 800b8b4:	40020040 	.word	0x40020040
 800b8b8:	40020058 	.word	0x40020058
 800b8bc:	40020070 	.word	0x40020070
 800b8c0:	40020088 	.word	0x40020088
 800b8c4:	400200a0 	.word	0x400200a0
 800b8c8:	400200b8 	.word	0x400200b8
 800b8cc:	40020410 	.word	0x40020410
 800b8d0:	40020428 	.word	0x40020428
 800b8d4:	40020440 	.word	0x40020440
 800b8d8:	40020458 	.word	0x40020458
 800b8dc:	40020470 	.word	0x40020470
 800b8e0:	40020488 	.word	0x40020488
 800b8e4:	400204a0 	.word	0x400204a0
 800b8e8:	400204b8 	.word	0x400204b8
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d00d      	beq.n	800b914 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8fc:	f003 031f 	and.w	r3, r3, #31
 800b900:	2204      	movs	r2, #4
 800b902:	409a      	lsls	r2, r3
 800b904:	6a3b      	ldr	r3, [r7, #32]
 800b906:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b90c:	f043 0204 	orr.w	r2, r3, #4
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b918:	f003 031f 	and.w	r3, r3, #31
 800b91c:	2210      	movs	r2, #16
 800b91e:	409a      	lsls	r2, r3
 800b920:	69bb      	ldr	r3, [r7, #24]
 800b922:	4013      	ands	r3, r2
 800b924:	2b00      	cmp	r3, #0
 800b926:	f000 80a6 	beq.w	800ba76 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4a85      	ldr	r2, [pc, #532]	@ (800bb44 <HAL_DMA_IRQHandler+0x690>)
 800b930:	4293      	cmp	r3, r2
 800b932:	d04a      	beq.n	800b9ca <HAL_DMA_IRQHandler+0x516>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	4a83      	ldr	r2, [pc, #524]	@ (800bb48 <HAL_DMA_IRQHandler+0x694>)
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d045      	beq.n	800b9ca <HAL_DMA_IRQHandler+0x516>
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	4a82      	ldr	r2, [pc, #520]	@ (800bb4c <HAL_DMA_IRQHandler+0x698>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d040      	beq.n	800b9ca <HAL_DMA_IRQHandler+0x516>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4a80      	ldr	r2, [pc, #512]	@ (800bb50 <HAL_DMA_IRQHandler+0x69c>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d03b      	beq.n	800b9ca <HAL_DMA_IRQHandler+0x516>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	4a7f      	ldr	r2, [pc, #508]	@ (800bb54 <HAL_DMA_IRQHandler+0x6a0>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	d036      	beq.n	800b9ca <HAL_DMA_IRQHandler+0x516>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	4a7d      	ldr	r2, [pc, #500]	@ (800bb58 <HAL_DMA_IRQHandler+0x6a4>)
 800b962:	4293      	cmp	r3, r2
 800b964:	d031      	beq.n	800b9ca <HAL_DMA_IRQHandler+0x516>
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	4a7c      	ldr	r2, [pc, #496]	@ (800bb5c <HAL_DMA_IRQHandler+0x6a8>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d02c      	beq.n	800b9ca <HAL_DMA_IRQHandler+0x516>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	4a7a      	ldr	r2, [pc, #488]	@ (800bb60 <HAL_DMA_IRQHandler+0x6ac>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d027      	beq.n	800b9ca <HAL_DMA_IRQHandler+0x516>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	4a79      	ldr	r2, [pc, #484]	@ (800bb64 <HAL_DMA_IRQHandler+0x6b0>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d022      	beq.n	800b9ca <HAL_DMA_IRQHandler+0x516>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	4a77      	ldr	r2, [pc, #476]	@ (800bb68 <HAL_DMA_IRQHandler+0x6b4>)
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d01d      	beq.n	800b9ca <HAL_DMA_IRQHandler+0x516>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	4a76      	ldr	r2, [pc, #472]	@ (800bb6c <HAL_DMA_IRQHandler+0x6b8>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d018      	beq.n	800b9ca <HAL_DMA_IRQHandler+0x516>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	4a74      	ldr	r2, [pc, #464]	@ (800bb70 <HAL_DMA_IRQHandler+0x6bc>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d013      	beq.n	800b9ca <HAL_DMA_IRQHandler+0x516>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	4a73      	ldr	r2, [pc, #460]	@ (800bb74 <HAL_DMA_IRQHandler+0x6c0>)
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d00e      	beq.n	800b9ca <HAL_DMA_IRQHandler+0x516>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	4a71      	ldr	r2, [pc, #452]	@ (800bb78 <HAL_DMA_IRQHandler+0x6c4>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d009      	beq.n	800b9ca <HAL_DMA_IRQHandler+0x516>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4a70      	ldr	r2, [pc, #448]	@ (800bb7c <HAL_DMA_IRQHandler+0x6c8>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d004      	beq.n	800b9ca <HAL_DMA_IRQHandler+0x516>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4a6e      	ldr	r2, [pc, #440]	@ (800bb80 <HAL_DMA_IRQHandler+0x6cc>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d10a      	bne.n	800b9e0 <HAL_DMA_IRQHandler+0x52c>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f003 0308 	and.w	r3, r3, #8
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	bf14      	ite	ne
 800b9d8:	2301      	movne	r3, #1
 800b9da:	2300      	moveq	r3, #0
 800b9dc:	b2db      	uxtb	r3, r3
 800b9de:	e009      	b.n	800b9f4 <HAL_DMA_IRQHandler+0x540>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f003 0304 	and.w	r3, r3, #4
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	bf14      	ite	ne
 800b9ee:	2301      	movne	r3, #1
 800b9f0:	2300      	moveq	r3, #0
 800b9f2:	b2db      	uxtb	r3, r3
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d03e      	beq.n	800ba76 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9fc:	f003 031f 	and.w	r3, r3, #31
 800ba00:	2210      	movs	r2, #16
 800ba02:	409a      	lsls	r2, r3
 800ba04:	6a3b      	ldr	r3, [r7, #32]
 800ba06:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d018      	beq.n	800ba48 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d108      	bne.n	800ba36 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d024      	beq.n	800ba76 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	4798      	blx	r3
 800ba34:	e01f      	b.n	800ba76 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d01b      	beq.n	800ba76 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	4798      	blx	r3
 800ba46:	e016      	b.n	800ba76 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d107      	bne.n	800ba66 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	681a      	ldr	r2, [r3, #0]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f022 0208 	bic.w	r2, r2, #8
 800ba64:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d003      	beq.n	800ba76 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba7a:	f003 031f 	and.w	r3, r3, #31
 800ba7e:	2220      	movs	r2, #32
 800ba80:	409a      	lsls	r2, r3
 800ba82:	69bb      	ldr	r3, [r7, #24]
 800ba84:	4013      	ands	r3, r2
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	f000 8110 	beq.w	800bcac <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	4a2c      	ldr	r2, [pc, #176]	@ (800bb44 <HAL_DMA_IRQHandler+0x690>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d04a      	beq.n	800bb2c <HAL_DMA_IRQHandler+0x678>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4a2b      	ldr	r2, [pc, #172]	@ (800bb48 <HAL_DMA_IRQHandler+0x694>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d045      	beq.n	800bb2c <HAL_DMA_IRQHandler+0x678>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4a29      	ldr	r2, [pc, #164]	@ (800bb4c <HAL_DMA_IRQHandler+0x698>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d040      	beq.n	800bb2c <HAL_DMA_IRQHandler+0x678>
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	4a28      	ldr	r2, [pc, #160]	@ (800bb50 <HAL_DMA_IRQHandler+0x69c>)
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d03b      	beq.n	800bb2c <HAL_DMA_IRQHandler+0x678>
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4a26      	ldr	r2, [pc, #152]	@ (800bb54 <HAL_DMA_IRQHandler+0x6a0>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d036      	beq.n	800bb2c <HAL_DMA_IRQHandler+0x678>
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	4a25      	ldr	r2, [pc, #148]	@ (800bb58 <HAL_DMA_IRQHandler+0x6a4>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d031      	beq.n	800bb2c <HAL_DMA_IRQHandler+0x678>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	4a23      	ldr	r2, [pc, #140]	@ (800bb5c <HAL_DMA_IRQHandler+0x6a8>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d02c      	beq.n	800bb2c <HAL_DMA_IRQHandler+0x678>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	4a22      	ldr	r2, [pc, #136]	@ (800bb60 <HAL_DMA_IRQHandler+0x6ac>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d027      	beq.n	800bb2c <HAL_DMA_IRQHandler+0x678>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4a20      	ldr	r2, [pc, #128]	@ (800bb64 <HAL_DMA_IRQHandler+0x6b0>)
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d022      	beq.n	800bb2c <HAL_DMA_IRQHandler+0x678>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	4a1f      	ldr	r2, [pc, #124]	@ (800bb68 <HAL_DMA_IRQHandler+0x6b4>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d01d      	beq.n	800bb2c <HAL_DMA_IRQHandler+0x678>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	4a1d      	ldr	r2, [pc, #116]	@ (800bb6c <HAL_DMA_IRQHandler+0x6b8>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d018      	beq.n	800bb2c <HAL_DMA_IRQHandler+0x678>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	4a1c      	ldr	r2, [pc, #112]	@ (800bb70 <HAL_DMA_IRQHandler+0x6bc>)
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d013      	beq.n	800bb2c <HAL_DMA_IRQHandler+0x678>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	4a1a      	ldr	r2, [pc, #104]	@ (800bb74 <HAL_DMA_IRQHandler+0x6c0>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d00e      	beq.n	800bb2c <HAL_DMA_IRQHandler+0x678>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	4a19      	ldr	r2, [pc, #100]	@ (800bb78 <HAL_DMA_IRQHandler+0x6c4>)
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d009      	beq.n	800bb2c <HAL_DMA_IRQHandler+0x678>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	4a17      	ldr	r2, [pc, #92]	@ (800bb7c <HAL_DMA_IRQHandler+0x6c8>)
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d004      	beq.n	800bb2c <HAL_DMA_IRQHandler+0x678>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	4a16      	ldr	r2, [pc, #88]	@ (800bb80 <HAL_DMA_IRQHandler+0x6cc>)
 800bb28:	4293      	cmp	r3, r2
 800bb2a:	d12b      	bne.n	800bb84 <HAL_DMA_IRQHandler+0x6d0>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f003 0310 	and.w	r3, r3, #16
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	bf14      	ite	ne
 800bb3a:	2301      	movne	r3, #1
 800bb3c:	2300      	moveq	r3, #0
 800bb3e:	b2db      	uxtb	r3, r3
 800bb40:	e02a      	b.n	800bb98 <HAL_DMA_IRQHandler+0x6e4>
 800bb42:	bf00      	nop
 800bb44:	40020010 	.word	0x40020010
 800bb48:	40020028 	.word	0x40020028
 800bb4c:	40020040 	.word	0x40020040
 800bb50:	40020058 	.word	0x40020058
 800bb54:	40020070 	.word	0x40020070
 800bb58:	40020088 	.word	0x40020088
 800bb5c:	400200a0 	.word	0x400200a0
 800bb60:	400200b8 	.word	0x400200b8
 800bb64:	40020410 	.word	0x40020410
 800bb68:	40020428 	.word	0x40020428
 800bb6c:	40020440 	.word	0x40020440
 800bb70:	40020458 	.word	0x40020458
 800bb74:	40020470 	.word	0x40020470
 800bb78:	40020488 	.word	0x40020488
 800bb7c:	400204a0 	.word	0x400204a0
 800bb80:	400204b8 	.word	0x400204b8
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f003 0302 	and.w	r3, r3, #2
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	bf14      	ite	ne
 800bb92:	2301      	movne	r3, #1
 800bb94:	2300      	moveq	r3, #0
 800bb96:	b2db      	uxtb	r3, r3
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	f000 8087 	beq.w	800bcac <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bba2:	f003 031f 	and.w	r3, r3, #31
 800bba6:	2220      	movs	r2, #32
 800bba8:	409a      	lsls	r2, r3
 800bbaa:	6a3b      	ldr	r3, [r7, #32]
 800bbac:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800bbb4:	b2db      	uxtb	r3, r3
 800bbb6:	2b04      	cmp	r3, #4
 800bbb8:	d139      	bne.n	800bc2e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	681a      	ldr	r2, [r3, #0]
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f022 0216 	bic.w	r2, r2, #22
 800bbc8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	695a      	ldr	r2, [r3, #20]
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bbd8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d103      	bne.n	800bbea <HAL_DMA_IRQHandler+0x736>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d007      	beq.n	800bbfa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	681a      	ldr	r2, [r3, #0]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f022 0208 	bic.w	r2, r2, #8
 800bbf8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bbfe:	f003 031f 	and.w	r3, r3, #31
 800bc02:	223f      	movs	r2, #63	@ 0x3f
 800bc04:	409a      	lsls	r2, r3
 800bc06:	6a3b      	ldr	r3, [r7, #32]
 800bc08:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2200      	movs	r2, #0
 800bc16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	f000 834a 	beq.w	800c2b8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	4798      	blx	r3
          }
          return;
 800bc2c:	e344      	b.n	800c2b8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d018      	beq.n	800bc6e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d108      	bne.n	800bc5c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d02c      	beq.n	800bcac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	4798      	blx	r3
 800bc5a:	e027      	b.n	800bcac <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d023      	beq.n	800bcac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	4798      	blx	r3
 800bc6c:	e01e      	b.n	800bcac <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d10f      	bne.n	800bc9c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	681a      	ldr	r2, [r3, #0]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f022 0210 	bic.w	r2, r2, #16
 800bc8a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2201      	movs	r2, #1
 800bc90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2200      	movs	r2, #0
 800bc98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d003      	beq.n	800bcac <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	f000 8306 	beq.w	800c2c2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcba:	f003 0301 	and.w	r3, r3, #1
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	f000 8088 	beq.w	800bdd4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2204      	movs	r2, #4
 800bcc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	4a7a      	ldr	r2, [pc, #488]	@ (800bebc <HAL_DMA_IRQHandler+0xa08>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d04a      	beq.n	800bd6c <HAL_DMA_IRQHandler+0x8b8>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	4a79      	ldr	r2, [pc, #484]	@ (800bec0 <HAL_DMA_IRQHandler+0xa0c>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d045      	beq.n	800bd6c <HAL_DMA_IRQHandler+0x8b8>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a77      	ldr	r2, [pc, #476]	@ (800bec4 <HAL_DMA_IRQHandler+0xa10>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d040      	beq.n	800bd6c <HAL_DMA_IRQHandler+0x8b8>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	4a76      	ldr	r2, [pc, #472]	@ (800bec8 <HAL_DMA_IRQHandler+0xa14>)
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d03b      	beq.n	800bd6c <HAL_DMA_IRQHandler+0x8b8>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	4a74      	ldr	r2, [pc, #464]	@ (800becc <HAL_DMA_IRQHandler+0xa18>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d036      	beq.n	800bd6c <HAL_DMA_IRQHandler+0x8b8>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4a73      	ldr	r2, [pc, #460]	@ (800bed0 <HAL_DMA_IRQHandler+0xa1c>)
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d031      	beq.n	800bd6c <HAL_DMA_IRQHandler+0x8b8>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4a71      	ldr	r2, [pc, #452]	@ (800bed4 <HAL_DMA_IRQHandler+0xa20>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d02c      	beq.n	800bd6c <HAL_DMA_IRQHandler+0x8b8>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	4a70      	ldr	r2, [pc, #448]	@ (800bed8 <HAL_DMA_IRQHandler+0xa24>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d027      	beq.n	800bd6c <HAL_DMA_IRQHandler+0x8b8>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4a6e      	ldr	r2, [pc, #440]	@ (800bedc <HAL_DMA_IRQHandler+0xa28>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d022      	beq.n	800bd6c <HAL_DMA_IRQHandler+0x8b8>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	4a6d      	ldr	r2, [pc, #436]	@ (800bee0 <HAL_DMA_IRQHandler+0xa2c>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d01d      	beq.n	800bd6c <HAL_DMA_IRQHandler+0x8b8>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	4a6b      	ldr	r2, [pc, #428]	@ (800bee4 <HAL_DMA_IRQHandler+0xa30>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d018      	beq.n	800bd6c <HAL_DMA_IRQHandler+0x8b8>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	4a6a      	ldr	r2, [pc, #424]	@ (800bee8 <HAL_DMA_IRQHandler+0xa34>)
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d013      	beq.n	800bd6c <HAL_DMA_IRQHandler+0x8b8>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	4a68      	ldr	r2, [pc, #416]	@ (800beec <HAL_DMA_IRQHandler+0xa38>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d00e      	beq.n	800bd6c <HAL_DMA_IRQHandler+0x8b8>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	4a67      	ldr	r2, [pc, #412]	@ (800bef0 <HAL_DMA_IRQHandler+0xa3c>)
 800bd54:	4293      	cmp	r3, r2
 800bd56:	d009      	beq.n	800bd6c <HAL_DMA_IRQHandler+0x8b8>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	4a65      	ldr	r2, [pc, #404]	@ (800bef4 <HAL_DMA_IRQHandler+0xa40>)
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d004      	beq.n	800bd6c <HAL_DMA_IRQHandler+0x8b8>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	4a64      	ldr	r2, [pc, #400]	@ (800bef8 <HAL_DMA_IRQHandler+0xa44>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d108      	bne.n	800bd7e <HAL_DMA_IRQHandler+0x8ca>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	681a      	ldr	r2, [r3, #0]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f022 0201 	bic.w	r2, r2, #1
 800bd7a:	601a      	str	r2, [r3, #0]
 800bd7c:	e007      	b.n	800bd8e <HAL_DMA_IRQHandler+0x8da>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	681a      	ldr	r2, [r3, #0]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f022 0201 	bic.w	r2, r2, #1
 800bd8c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	3301      	adds	r3, #1
 800bd92:	60fb      	str	r3, [r7, #12]
 800bd94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d307      	bcc.n	800bdaa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f003 0301 	and.w	r3, r3, #1
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d1f2      	bne.n	800bd8e <HAL_DMA_IRQHandler+0x8da>
 800bda8:	e000      	b.n	800bdac <HAL_DMA_IRQHandler+0x8f8>
            break;
 800bdaa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f003 0301 	and.w	r3, r3, #1
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d004      	beq.n	800bdc4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2203      	movs	r2, #3
 800bdbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800bdc2:	e003      	b.n	800bdcc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2200      	movs	r2, #0
 800bdd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	f000 8272 	beq.w	800c2c2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	4798      	blx	r3
 800bde6:	e26c      	b.n	800c2c2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	4a43      	ldr	r2, [pc, #268]	@ (800befc <HAL_DMA_IRQHandler+0xa48>)
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d022      	beq.n	800be38 <HAL_DMA_IRQHandler+0x984>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	4a42      	ldr	r2, [pc, #264]	@ (800bf00 <HAL_DMA_IRQHandler+0xa4c>)
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	d01d      	beq.n	800be38 <HAL_DMA_IRQHandler+0x984>
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	4a40      	ldr	r2, [pc, #256]	@ (800bf04 <HAL_DMA_IRQHandler+0xa50>)
 800be02:	4293      	cmp	r3, r2
 800be04:	d018      	beq.n	800be38 <HAL_DMA_IRQHandler+0x984>
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	4a3f      	ldr	r2, [pc, #252]	@ (800bf08 <HAL_DMA_IRQHandler+0xa54>)
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d013      	beq.n	800be38 <HAL_DMA_IRQHandler+0x984>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	4a3d      	ldr	r2, [pc, #244]	@ (800bf0c <HAL_DMA_IRQHandler+0xa58>)
 800be16:	4293      	cmp	r3, r2
 800be18:	d00e      	beq.n	800be38 <HAL_DMA_IRQHandler+0x984>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	4a3c      	ldr	r2, [pc, #240]	@ (800bf10 <HAL_DMA_IRQHandler+0xa5c>)
 800be20:	4293      	cmp	r3, r2
 800be22:	d009      	beq.n	800be38 <HAL_DMA_IRQHandler+0x984>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	4a3a      	ldr	r2, [pc, #232]	@ (800bf14 <HAL_DMA_IRQHandler+0xa60>)
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d004      	beq.n	800be38 <HAL_DMA_IRQHandler+0x984>
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	4a39      	ldr	r2, [pc, #228]	@ (800bf18 <HAL_DMA_IRQHandler+0xa64>)
 800be34:	4293      	cmp	r3, r2
 800be36:	d101      	bne.n	800be3c <HAL_DMA_IRQHandler+0x988>
 800be38:	2301      	movs	r3, #1
 800be3a:	e000      	b.n	800be3e <HAL_DMA_IRQHandler+0x98a>
 800be3c:	2300      	movs	r3, #0
 800be3e:	2b00      	cmp	r3, #0
 800be40:	f000 823f 	beq.w	800c2c2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be50:	f003 031f 	and.w	r3, r3, #31
 800be54:	2204      	movs	r2, #4
 800be56:	409a      	lsls	r2, r3
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	4013      	ands	r3, r2
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	f000 80cd 	beq.w	800bffc <HAL_DMA_IRQHandler+0xb48>
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	f003 0304 	and.w	r3, r3, #4
 800be68:	2b00      	cmp	r3, #0
 800be6a:	f000 80c7 	beq.w	800bffc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be72:	f003 031f 	and.w	r3, r3, #31
 800be76:	2204      	movs	r2, #4
 800be78:	409a      	lsls	r2, r3
 800be7a:	69fb      	ldr	r3, [r7, #28]
 800be7c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800be84:	2b00      	cmp	r3, #0
 800be86:	d049      	beq.n	800bf1c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d109      	bne.n	800bea6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800be96:	2b00      	cmp	r3, #0
 800be98:	f000 8210 	beq.w	800c2bc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800bea4:	e20a      	b.n	800c2bc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800beaa:	2b00      	cmp	r3, #0
 800beac:	f000 8206 	beq.w	800c2bc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800beb8:	e200      	b.n	800c2bc <HAL_DMA_IRQHandler+0xe08>
 800beba:	bf00      	nop
 800bebc:	40020010 	.word	0x40020010
 800bec0:	40020028 	.word	0x40020028
 800bec4:	40020040 	.word	0x40020040
 800bec8:	40020058 	.word	0x40020058
 800becc:	40020070 	.word	0x40020070
 800bed0:	40020088 	.word	0x40020088
 800bed4:	400200a0 	.word	0x400200a0
 800bed8:	400200b8 	.word	0x400200b8
 800bedc:	40020410 	.word	0x40020410
 800bee0:	40020428 	.word	0x40020428
 800bee4:	40020440 	.word	0x40020440
 800bee8:	40020458 	.word	0x40020458
 800beec:	40020470 	.word	0x40020470
 800bef0:	40020488 	.word	0x40020488
 800bef4:	400204a0 	.word	0x400204a0
 800bef8:	400204b8 	.word	0x400204b8
 800befc:	58025408 	.word	0x58025408
 800bf00:	5802541c 	.word	0x5802541c
 800bf04:	58025430 	.word	0x58025430
 800bf08:	58025444 	.word	0x58025444
 800bf0c:	58025458 	.word	0x58025458
 800bf10:	5802546c 	.word	0x5802546c
 800bf14:	58025480 	.word	0x58025480
 800bf18:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	f003 0320 	and.w	r3, r3, #32
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d160      	bne.n	800bfe8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4a7f      	ldr	r2, [pc, #508]	@ (800c128 <HAL_DMA_IRQHandler+0xc74>)
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	d04a      	beq.n	800bfc6 <HAL_DMA_IRQHandler+0xb12>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	4a7d      	ldr	r2, [pc, #500]	@ (800c12c <HAL_DMA_IRQHandler+0xc78>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d045      	beq.n	800bfc6 <HAL_DMA_IRQHandler+0xb12>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	4a7c      	ldr	r2, [pc, #496]	@ (800c130 <HAL_DMA_IRQHandler+0xc7c>)
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d040      	beq.n	800bfc6 <HAL_DMA_IRQHandler+0xb12>
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	4a7a      	ldr	r2, [pc, #488]	@ (800c134 <HAL_DMA_IRQHandler+0xc80>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d03b      	beq.n	800bfc6 <HAL_DMA_IRQHandler+0xb12>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	4a79      	ldr	r2, [pc, #484]	@ (800c138 <HAL_DMA_IRQHandler+0xc84>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d036      	beq.n	800bfc6 <HAL_DMA_IRQHandler+0xb12>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	4a77      	ldr	r2, [pc, #476]	@ (800c13c <HAL_DMA_IRQHandler+0xc88>)
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d031      	beq.n	800bfc6 <HAL_DMA_IRQHandler+0xb12>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4a76      	ldr	r2, [pc, #472]	@ (800c140 <HAL_DMA_IRQHandler+0xc8c>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d02c      	beq.n	800bfc6 <HAL_DMA_IRQHandler+0xb12>
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	4a74      	ldr	r2, [pc, #464]	@ (800c144 <HAL_DMA_IRQHandler+0xc90>)
 800bf72:	4293      	cmp	r3, r2
 800bf74:	d027      	beq.n	800bfc6 <HAL_DMA_IRQHandler+0xb12>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	4a73      	ldr	r2, [pc, #460]	@ (800c148 <HAL_DMA_IRQHandler+0xc94>)
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d022      	beq.n	800bfc6 <HAL_DMA_IRQHandler+0xb12>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4a71      	ldr	r2, [pc, #452]	@ (800c14c <HAL_DMA_IRQHandler+0xc98>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d01d      	beq.n	800bfc6 <HAL_DMA_IRQHandler+0xb12>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	4a70      	ldr	r2, [pc, #448]	@ (800c150 <HAL_DMA_IRQHandler+0xc9c>)
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d018      	beq.n	800bfc6 <HAL_DMA_IRQHandler+0xb12>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4a6e      	ldr	r2, [pc, #440]	@ (800c154 <HAL_DMA_IRQHandler+0xca0>)
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	d013      	beq.n	800bfc6 <HAL_DMA_IRQHandler+0xb12>
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	4a6d      	ldr	r2, [pc, #436]	@ (800c158 <HAL_DMA_IRQHandler+0xca4>)
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	d00e      	beq.n	800bfc6 <HAL_DMA_IRQHandler+0xb12>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	4a6b      	ldr	r2, [pc, #428]	@ (800c15c <HAL_DMA_IRQHandler+0xca8>)
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	d009      	beq.n	800bfc6 <HAL_DMA_IRQHandler+0xb12>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	4a6a      	ldr	r2, [pc, #424]	@ (800c160 <HAL_DMA_IRQHandler+0xcac>)
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d004      	beq.n	800bfc6 <HAL_DMA_IRQHandler+0xb12>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4a68      	ldr	r2, [pc, #416]	@ (800c164 <HAL_DMA_IRQHandler+0xcb0>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d108      	bne.n	800bfd8 <HAL_DMA_IRQHandler+0xb24>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	681a      	ldr	r2, [r3, #0]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	f022 0208 	bic.w	r2, r2, #8
 800bfd4:	601a      	str	r2, [r3, #0]
 800bfd6:	e007      	b.n	800bfe8 <HAL_DMA_IRQHandler+0xb34>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	681a      	ldr	r2, [r3, #0]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f022 0204 	bic.w	r2, r2, #4
 800bfe6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	f000 8165 	beq.w	800c2bc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800bffa:	e15f      	b.n	800c2bc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c000:	f003 031f 	and.w	r3, r3, #31
 800c004:	2202      	movs	r2, #2
 800c006:	409a      	lsls	r2, r3
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	4013      	ands	r3, r2
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	f000 80c5 	beq.w	800c19c <HAL_DMA_IRQHandler+0xce8>
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	f003 0302 	and.w	r3, r3, #2
 800c018:	2b00      	cmp	r3, #0
 800c01a:	f000 80bf 	beq.w	800c19c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c022:	f003 031f 	and.w	r3, r3, #31
 800c026:	2202      	movs	r2, #2
 800c028:	409a      	lsls	r2, r3
 800c02a:	69fb      	ldr	r3, [r7, #28]
 800c02c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c034:	2b00      	cmp	r3, #0
 800c036:	d018      	beq.n	800c06a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d109      	bne.n	800c056 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c046:	2b00      	cmp	r3, #0
 800c048:	f000 813a 	beq.w	800c2c0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c054:	e134      	b.n	800c2c0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	f000 8130 	beq.w	800c2c0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c068:	e12a      	b.n	800c2c0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	f003 0320 	and.w	r3, r3, #32
 800c070:	2b00      	cmp	r3, #0
 800c072:	f040 8089 	bne.w	800c188 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	4a2b      	ldr	r2, [pc, #172]	@ (800c128 <HAL_DMA_IRQHandler+0xc74>)
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d04a      	beq.n	800c116 <HAL_DMA_IRQHandler+0xc62>
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	4a29      	ldr	r2, [pc, #164]	@ (800c12c <HAL_DMA_IRQHandler+0xc78>)
 800c086:	4293      	cmp	r3, r2
 800c088:	d045      	beq.n	800c116 <HAL_DMA_IRQHandler+0xc62>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	4a28      	ldr	r2, [pc, #160]	@ (800c130 <HAL_DMA_IRQHandler+0xc7c>)
 800c090:	4293      	cmp	r3, r2
 800c092:	d040      	beq.n	800c116 <HAL_DMA_IRQHandler+0xc62>
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	4a26      	ldr	r2, [pc, #152]	@ (800c134 <HAL_DMA_IRQHandler+0xc80>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d03b      	beq.n	800c116 <HAL_DMA_IRQHandler+0xc62>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	4a25      	ldr	r2, [pc, #148]	@ (800c138 <HAL_DMA_IRQHandler+0xc84>)
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d036      	beq.n	800c116 <HAL_DMA_IRQHandler+0xc62>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4a23      	ldr	r2, [pc, #140]	@ (800c13c <HAL_DMA_IRQHandler+0xc88>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d031      	beq.n	800c116 <HAL_DMA_IRQHandler+0xc62>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	4a22      	ldr	r2, [pc, #136]	@ (800c140 <HAL_DMA_IRQHandler+0xc8c>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d02c      	beq.n	800c116 <HAL_DMA_IRQHandler+0xc62>
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4a20      	ldr	r2, [pc, #128]	@ (800c144 <HAL_DMA_IRQHandler+0xc90>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d027      	beq.n	800c116 <HAL_DMA_IRQHandler+0xc62>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	4a1f      	ldr	r2, [pc, #124]	@ (800c148 <HAL_DMA_IRQHandler+0xc94>)
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d022      	beq.n	800c116 <HAL_DMA_IRQHandler+0xc62>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	4a1d      	ldr	r2, [pc, #116]	@ (800c14c <HAL_DMA_IRQHandler+0xc98>)
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	d01d      	beq.n	800c116 <HAL_DMA_IRQHandler+0xc62>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	4a1c      	ldr	r2, [pc, #112]	@ (800c150 <HAL_DMA_IRQHandler+0xc9c>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d018      	beq.n	800c116 <HAL_DMA_IRQHandler+0xc62>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4a1a      	ldr	r2, [pc, #104]	@ (800c154 <HAL_DMA_IRQHandler+0xca0>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d013      	beq.n	800c116 <HAL_DMA_IRQHandler+0xc62>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	4a19      	ldr	r2, [pc, #100]	@ (800c158 <HAL_DMA_IRQHandler+0xca4>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d00e      	beq.n	800c116 <HAL_DMA_IRQHandler+0xc62>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	4a17      	ldr	r2, [pc, #92]	@ (800c15c <HAL_DMA_IRQHandler+0xca8>)
 800c0fe:	4293      	cmp	r3, r2
 800c100:	d009      	beq.n	800c116 <HAL_DMA_IRQHandler+0xc62>
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	4a16      	ldr	r2, [pc, #88]	@ (800c160 <HAL_DMA_IRQHandler+0xcac>)
 800c108:	4293      	cmp	r3, r2
 800c10a:	d004      	beq.n	800c116 <HAL_DMA_IRQHandler+0xc62>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	4a14      	ldr	r2, [pc, #80]	@ (800c164 <HAL_DMA_IRQHandler+0xcb0>)
 800c112:	4293      	cmp	r3, r2
 800c114:	d128      	bne.n	800c168 <HAL_DMA_IRQHandler+0xcb4>
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	681a      	ldr	r2, [r3, #0]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f022 0214 	bic.w	r2, r2, #20
 800c124:	601a      	str	r2, [r3, #0]
 800c126:	e027      	b.n	800c178 <HAL_DMA_IRQHandler+0xcc4>
 800c128:	40020010 	.word	0x40020010
 800c12c:	40020028 	.word	0x40020028
 800c130:	40020040 	.word	0x40020040
 800c134:	40020058 	.word	0x40020058
 800c138:	40020070 	.word	0x40020070
 800c13c:	40020088 	.word	0x40020088
 800c140:	400200a0 	.word	0x400200a0
 800c144:	400200b8 	.word	0x400200b8
 800c148:	40020410 	.word	0x40020410
 800c14c:	40020428 	.word	0x40020428
 800c150:	40020440 	.word	0x40020440
 800c154:	40020458 	.word	0x40020458
 800c158:	40020470 	.word	0x40020470
 800c15c:	40020488 	.word	0x40020488
 800c160:	400204a0 	.word	0x400204a0
 800c164:	400204b8 	.word	0x400204b8
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	681a      	ldr	r2, [r3, #0]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f022 020a 	bic.w	r2, r2, #10
 800c176:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2201      	movs	r2, #1
 800c17c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2200      	movs	r2, #0
 800c184:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	f000 8097 	beq.w	800c2c0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c19a:	e091      	b.n	800c2c0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c1a0:	f003 031f 	and.w	r3, r3, #31
 800c1a4:	2208      	movs	r2, #8
 800c1a6:	409a      	lsls	r2, r3
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	4013      	ands	r3, r2
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	f000 8088 	beq.w	800c2c2 <HAL_DMA_IRQHandler+0xe0e>
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	f003 0308 	and.w	r3, r3, #8
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	f000 8082 	beq.w	800c2c2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	4a41      	ldr	r2, [pc, #260]	@ (800c2c8 <HAL_DMA_IRQHandler+0xe14>)
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d04a      	beq.n	800c25e <HAL_DMA_IRQHandler+0xdaa>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	4a3f      	ldr	r2, [pc, #252]	@ (800c2cc <HAL_DMA_IRQHandler+0xe18>)
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d045      	beq.n	800c25e <HAL_DMA_IRQHandler+0xdaa>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	4a3e      	ldr	r2, [pc, #248]	@ (800c2d0 <HAL_DMA_IRQHandler+0xe1c>)
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d040      	beq.n	800c25e <HAL_DMA_IRQHandler+0xdaa>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	4a3c      	ldr	r2, [pc, #240]	@ (800c2d4 <HAL_DMA_IRQHandler+0xe20>)
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d03b      	beq.n	800c25e <HAL_DMA_IRQHandler+0xdaa>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	4a3b      	ldr	r2, [pc, #236]	@ (800c2d8 <HAL_DMA_IRQHandler+0xe24>)
 800c1ec:	4293      	cmp	r3, r2
 800c1ee:	d036      	beq.n	800c25e <HAL_DMA_IRQHandler+0xdaa>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	4a39      	ldr	r2, [pc, #228]	@ (800c2dc <HAL_DMA_IRQHandler+0xe28>)
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d031      	beq.n	800c25e <HAL_DMA_IRQHandler+0xdaa>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	4a38      	ldr	r2, [pc, #224]	@ (800c2e0 <HAL_DMA_IRQHandler+0xe2c>)
 800c200:	4293      	cmp	r3, r2
 800c202:	d02c      	beq.n	800c25e <HAL_DMA_IRQHandler+0xdaa>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4a36      	ldr	r2, [pc, #216]	@ (800c2e4 <HAL_DMA_IRQHandler+0xe30>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d027      	beq.n	800c25e <HAL_DMA_IRQHandler+0xdaa>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	4a35      	ldr	r2, [pc, #212]	@ (800c2e8 <HAL_DMA_IRQHandler+0xe34>)
 800c214:	4293      	cmp	r3, r2
 800c216:	d022      	beq.n	800c25e <HAL_DMA_IRQHandler+0xdaa>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	4a33      	ldr	r2, [pc, #204]	@ (800c2ec <HAL_DMA_IRQHandler+0xe38>)
 800c21e:	4293      	cmp	r3, r2
 800c220:	d01d      	beq.n	800c25e <HAL_DMA_IRQHandler+0xdaa>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	4a32      	ldr	r2, [pc, #200]	@ (800c2f0 <HAL_DMA_IRQHandler+0xe3c>)
 800c228:	4293      	cmp	r3, r2
 800c22a:	d018      	beq.n	800c25e <HAL_DMA_IRQHandler+0xdaa>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	4a30      	ldr	r2, [pc, #192]	@ (800c2f4 <HAL_DMA_IRQHandler+0xe40>)
 800c232:	4293      	cmp	r3, r2
 800c234:	d013      	beq.n	800c25e <HAL_DMA_IRQHandler+0xdaa>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	4a2f      	ldr	r2, [pc, #188]	@ (800c2f8 <HAL_DMA_IRQHandler+0xe44>)
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d00e      	beq.n	800c25e <HAL_DMA_IRQHandler+0xdaa>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	4a2d      	ldr	r2, [pc, #180]	@ (800c2fc <HAL_DMA_IRQHandler+0xe48>)
 800c246:	4293      	cmp	r3, r2
 800c248:	d009      	beq.n	800c25e <HAL_DMA_IRQHandler+0xdaa>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	4a2c      	ldr	r2, [pc, #176]	@ (800c300 <HAL_DMA_IRQHandler+0xe4c>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d004      	beq.n	800c25e <HAL_DMA_IRQHandler+0xdaa>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	4a2a      	ldr	r2, [pc, #168]	@ (800c304 <HAL_DMA_IRQHandler+0xe50>)
 800c25a:	4293      	cmp	r3, r2
 800c25c:	d108      	bne.n	800c270 <HAL_DMA_IRQHandler+0xdbc>
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	681a      	ldr	r2, [r3, #0]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f022 021c 	bic.w	r2, r2, #28
 800c26c:	601a      	str	r2, [r3, #0]
 800c26e:	e007      	b.n	800c280 <HAL_DMA_IRQHandler+0xdcc>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	681a      	ldr	r2, [r3, #0]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f022 020e 	bic.w	r2, r2, #14
 800c27e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c284:	f003 031f 	and.w	r3, r3, #31
 800c288:	2201      	movs	r2, #1
 800c28a:	409a      	lsls	r2, r3
 800c28c:	69fb      	ldr	r3, [r7, #28]
 800c28e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2201      	movs	r2, #1
 800c294:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2201      	movs	r2, #1
 800c29a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d009      	beq.n	800c2c2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	4798      	blx	r3
 800c2b6:	e004      	b.n	800c2c2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800c2b8:	bf00      	nop
 800c2ba:	e002      	b.n	800c2c2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c2bc:	bf00      	nop
 800c2be:	e000      	b.n	800c2c2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c2c0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800c2c2:	3728      	adds	r7, #40	@ 0x28
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	40020010 	.word	0x40020010
 800c2cc:	40020028 	.word	0x40020028
 800c2d0:	40020040 	.word	0x40020040
 800c2d4:	40020058 	.word	0x40020058
 800c2d8:	40020070 	.word	0x40020070
 800c2dc:	40020088 	.word	0x40020088
 800c2e0:	400200a0 	.word	0x400200a0
 800c2e4:	400200b8 	.word	0x400200b8
 800c2e8:	40020410 	.word	0x40020410
 800c2ec:	40020428 	.word	0x40020428
 800c2f0:	40020440 	.word	0x40020440
 800c2f4:	40020458 	.word	0x40020458
 800c2f8:	40020470 	.word	0x40020470
 800c2fc:	40020488 	.word	0x40020488
 800c300:	400204a0 	.word	0x400204a0
 800c304:	400204b8 	.word	0x400204b8

0800c308 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800c308:	b480      	push	{r7}
 800c30a:	b083      	sub	sp, #12
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800c314:	4618      	mov	r0, r3
 800c316:	370c      	adds	r7, #12
 800c318:	46bd      	mov	sp, r7
 800c31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31e:	4770      	bx	lr

0800c320 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c320:	b480      	push	{r7}
 800c322:	b087      	sub	sp, #28
 800c324:	af00      	add	r7, sp, #0
 800c326:	60f8      	str	r0, [r7, #12]
 800c328:	60b9      	str	r1, [r7, #8]
 800c32a:	607a      	str	r2, [r7, #4]
 800c32c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c332:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c338:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	4a7f      	ldr	r2, [pc, #508]	@ (800c53c <DMA_SetConfig+0x21c>)
 800c340:	4293      	cmp	r3, r2
 800c342:	d072      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	4a7d      	ldr	r2, [pc, #500]	@ (800c540 <DMA_SetConfig+0x220>)
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d06d      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	4a7c      	ldr	r2, [pc, #496]	@ (800c544 <DMA_SetConfig+0x224>)
 800c354:	4293      	cmp	r3, r2
 800c356:	d068      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	4a7a      	ldr	r2, [pc, #488]	@ (800c548 <DMA_SetConfig+0x228>)
 800c35e:	4293      	cmp	r3, r2
 800c360:	d063      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	4a79      	ldr	r2, [pc, #484]	@ (800c54c <DMA_SetConfig+0x22c>)
 800c368:	4293      	cmp	r3, r2
 800c36a:	d05e      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	4a77      	ldr	r2, [pc, #476]	@ (800c550 <DMA_SetConfig+0x230>)
 800c372:	4293      	cmp	r3, r2
 800c374:	d059      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	4a76      	ldr	r2, [pc, #472]	@ (800c554 <DMA_SetConfig+0x234>)
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d054      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	4a74      	ldr	r2, [pc, #464]	@ (800c558 <DMA_SetConfig+0x238>)
 800c386:	4293      	cmp	r3, r2
 800c388:	d04f      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	4a73      	ldr	r2, [pc, #460]	@ (800c55c <DMA_SetConfig+0x23c>)
 800c390:	4293      	cmp	r3, r2
 800c392:	d04a      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	4a71      	ldr	r2, [pc, #452]	@ (800c560 <DMA_SetConfig+0x240>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d045      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	4a70      	ldr	r2, [pc, #448]	@ (800c564 <DMA_SetConfig+0x244>)
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d040      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4a6e      	ldr	r2, [pc, #440]	@ (800c568 <DMA_SetConfig+0x248>)
 800c3ae:	4293      	cmp	r3, r2
 800c3b0:	d03b      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	4a6d      	ldr	r2, [pc, #436]	@ (800c56c <DMA_SetConfig+0x24c>)
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d036      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	4a6b      	ldr	r2, [pc, #428]	@ (800c570 <DMA_SetConfig+0x250>)
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d031      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	4a6a      	ldr	r2, [pc, #424]	@ (800c574 <DMA_SetConfig+0x254>)
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d02c      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4a68      	ldr	r2, [pc, #416]	@ (800c578 <DMA_SetConfig+0x258>)
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	d027      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4a67      	ldr	r2, [pc, #412]	@ (800c57c <DMA_SetConfig+0x25c>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d022      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4a65      	ldr	r2, [pc, #404]	@ (800c580 <DMA_SetConfig+0x260>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d01d      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	4a64      	ldr	r2, [pc, #400]	@ (800c584 <DMA_SetConfig+0x264>)
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	d018      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	4a62      	ldr	r2, [pc, #392]	@ (800c588 <DMA_SetConfig+0x268>)
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d013      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	4a61      	ldr	r2, [pc, #388]	@ (800c58c <DMA_SetConfig+0x26c>)
 800c408:	4293      	cmp	r3, r2
 800c40a:	d00e      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4a5f      	ldr	r2, [pc, #380]	@ (800c590 <DMA_SetConfig+0x270>)
 800c412:	4293      	cmp	r3, r2
 800c414:	d009      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	4a5e      	ldr	r2, [pc, #376]	@ (800c594 <DMA_SetConfig+0x274>)
 800c41c:	4293      	cmp	r3, r2
 800c41e:	d004      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	4a5c      	ldr	r2, [pc, #368]	@ (800c598 <DMA_SetConfig+0x278>)
 800c426:	4293      	cmp	r3, r2
 800c428:	d101      	bne.n	800c42e <DMA_SetConfig+0x10e>
 800c42a:	2301      	movs	r3, #1
 800c42c:	e000      	b.n	800c430 <DMA_SetConfig+0x110>
 800c42e:	2300      	movs	r3, #0
 800c430:	2b00      	cmp	r3, #0
 800c432:	d00d      	beq.n	800c450 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c438:	68fa      	ldr	r2, [r7, #12]
 800c43a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800c43c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c442:	2b00      	cmp	r3, #0
 800c444:	d004      	beq.n	800c450 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c44a:	68fa      	ldr	r2, [r7, #12]
 800c44c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c44e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4a39      	ldr	r2, [pc, #228]	@ (800c53c <DMA_SetConfig+0x21c>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d04a      	beq.n	800c4f0 <DMA_SetConfig+0x1d0>
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	4a38      	ldr	r2, [pc, #224]	@ (800c540 <DMA_SetConfig+0x220>)
 800c460:	4293      	cmp	r3, r2
 800c462:	d045      	beq.n	800c4f0 <DMA_SetConfig+0x1d0>
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	4a36      	ldr	r2, [pc, #216]	@ (800c544 <DMA_SetConfig+0x224>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d040      	beq.n	800c4f0 <DMA_SetConfig+0x1d0>
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	4a35      	ldr	r2, [pc, #212]	@ (800c548 <DMA_SetConfig+0x228>)
 800c474:	4293      	cmp	r3, r2
 800c476:	d03b      	beq.n	800c4f0 <DMA_SetConfig+0x1d0>
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	4a33      	ldr	r2, [pc, #204]	@ (800c54c <DMA_SetConfig+0x22c>)
 800c47e:	4293      	cmp	r3, r2
 800c480:	d036      	beq.n	800c4f0 <DMA_SetConfig+0x1d0>
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	4a32      	ldr	r2, [pc, #200]	@ (800c550 <DMA_SetConfig+0x230>)
 800c488:	4293      	cmp	r3, r2
 800c48a:	d031      	beq.n	800c4f0 <DMA_SetConfig+0x1d0>
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	4a30      	ldr	r2, [pc, #192]	@ (800c554 <DMA_SetConfig+0x234>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d02c      	beq.n	800c4f0 <DMA_SetConfig+0x1d0>
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	4a2f      	ldr	r2, [pc, #188]	@ (800c558 <DMA_SetConfig+0x238>)
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d027      	beq.n	800c4f0 <DMA_SetConfig+0x1d0>
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	4a2d      	ldr	r2, [pc, #180]	@ (800c55c <DMA_SetConfig+0x23c>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d022      	beq.n	800c4f0 <DMA_SetConfig+0x1d0>
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	4a2c      	ldr	r2, [pc, #176]	@ (800c560 <DMA_SetConfig+0x240>)
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d01d      	beq.n	800c4f0 <DMA_SetConfig+0x1d0>
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	4a2a      	ldr	r2, [pc, #168]	@ (800c564 <DMA_SetConfig+0x244>)
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d018      	beq.n	800c4f0 <DMA_SetConfig+0x1d0>
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	4a29      	ldr	r2, [pc, #164]	@ (800c568 <DMA_SetConfig+0x248>)
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d013      	beq.n	800c4f0 <DMA_SetConfig+0x1d0>
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	4a27      	ldr	r2, [pc, #156]	@ (800c56c <DMA_SetConfig+0x24c>)
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	d00e      	beq.n	800c4f0 <DMA_SetConfig+0x1d0>
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4a26      	ldr	r2, [pc, #152]	@ (800c570 <DMA_SetConfig+0x250>)
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d009      	beq.n	800c4f0 <DMA_SetConfig+0x1d0>
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4a24      	ldr	r2, [pc, #144]	@ (800c574 <DMA_SetConfig+0x254>)
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d004      	beq.n	800c4f0 <DMA_SetConfig+0x1d0>
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	4a23      	ldr	r2, [pc, #140]	@ (800c578 <DMA_SetConfig+0x258>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d101      	bne.n	800c4f4 <DMA_SetConfig+0x1d4>
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	e000      	b.n	800c4f6 <DMA_SetConfig+0x1d6>
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d059      	beq.n	800c5ae <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4fe:	f003 031f 	and.w	r3, r3, #31
 800c502:	223f      	movs	r2, #63	@ 0x3f
 800c504:	409a      	lsls	r2, r3
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	681a      	ldr	r2, [r3, #0]
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800c518:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	683a      	ldr	r2, [r7, #0]
 800c520:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	689b      	ldr	r3, [r3, #8]
 800c526:	2b40      	cmp	r3, #64	@ 0x40
 800c528:	d138      	bne.n	800c59c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	687a      	ldr	r2, [r7, #4]
 800c530:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	68ba      	ldr	r2, [r7, #8]
 800c538:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800c53a:	e086      	b.n	800c64a <DMA_SetConfig+0x32a>
 800c53c:	40020010 	.word	0x40020010
 800c540:	40020028 	.word	0x40020028
 800c544:	40020040 	.word	0x40020040
 800c548:	40020058 	.word	0x40020058
 800c54c:	40020070 	.word	0x40020070
 800c550:	40020088 	.word	0x40020088
 800c554:	400200a0 	.word	0x400200a0
 800c558:	400200b8 	.word	0x400200b8
 800c55c:	40020410 	.word	0x40020410
 800c560:	40020428 	.word	0x40020428
 800c564:	40020440 	.word	0x40020440
 800c568:	40020458 	.word	0x40020458
 800c56c:	40020470 	.word	0x40020470
 800c570:	40020488 	.word	0x40020488
 800c574:	400204a0 	.word	0x400204a0
 800c578:	400204b8 	.word	0x400204b8
 800c57c:	58025408 	.word	0x58025408
 800c580:	5802541c 	.word	0x5802541c
 800c584:	58025430 	.word	0x58025430
 800c588:	58025444 	.word	0x58025444
 800c58c:	58025458 	.word	0x58025458
 800c590:	5802546c 	.word	0x5802546c
 800c594:	58025480 	.word	0x58025480
 800c598:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	68ba      	ldr	r2, [r7, #8]
 800c5a2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	687a      	ldr	r2, [r7, #4]
 800c5aa:	60da      	str	r2, [r3, #12]
}
 800c5ac:	e04d      	b.n	800c64a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	4a29      	ldr	r2, [pc, #164]	@ (800c658 <DMA_SetConfig+0x338>)
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	d022      	beq.n	800c5fe <DMA_SetConfig+0x2de>
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	4a27      	ldr	r2, [pc, #156]	@ (800c65c <DMA_SetConfig+0x33c>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d01d      	beq.n	800c5fe <DMA_SetConfig+0x2de>
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	4a26      	ldr	r2, [pc, #152]	@ (800c660 <DMA_SetConfig+0x340>)
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d018      	beq.n	800c5fe <DMA_SetConfig+0x2de>
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	4a24      	ldr	r2, [pc, #144]	@ (800c664 <DMA_SetConfig+0x344>)
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d013      	beq.n	800c5fe <DMA_SetConfig+0x2de>
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	4a23      	ldr	r2, [pc, #140]	@ (800c668 <DMA_SetConfig+0x348>)
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	d00e      	beq.n	800c5fe <DMA_SetConfig+0x2de>
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	4a21      	ldr	r2, [pc, #132]	@ (800c66c <DMA_SetConfig+0x34c>)
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	d009      	beq.n	800c5fe <DMA_SetConfig+0x2de>
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	4a20      	ldr	r2, [pc, #128]	@ (800c670 <DMA_SetConfig+0x350>)
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d004      	beq.n	800c5fe <DMA_SetConfig+0x2de>
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	4a1e      	ldr	r2, [pc, #120]	@ (800c674 <DMA_SetConfig+0x354>)
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	d101      	bne.n	800c602 <DMA_SetConfig+0x2e2>
 800c5fe:	2301      	movs	r3, #1
 800c600:	e000      	b.n	800c604 <DMA_SetConfig+0x2e4>
 800c602:	2300      	movs	r3, #0
 800c604:	2b00      	cmp	r3, #0
 800c606:	d020      	beq.n	800c64a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c60c:	f003 031f 	and.w	r3, r3, #31
 800c610:	2201      	movs	r2, #1
 800c612:	409a      	lsls	r2, r3
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	683a      	ldr	r2, [r7, #0]
 800c61e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	2b40      	cmp	r3, #64	@ 0x40
 800c626:	d108      	bne.n	800c63a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	687a      	ldr	r2, [r7, #4]
 800c62e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	68ba      	ldr	r2, [r7, #8]
 800c636:	60da      	str	r2, [r3, #12]
}
 800c638:	e007      	b.n	800c64a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	68ba      	ldr	r2, [r7, #8]
 800c640:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	687a      	ldr	r2, [r7, #4]
 800c648:	60da      	str	r2, [r3, #12]
}
 800c64a:	bf00      	nop
 800c64c:	371c      	adds	r7, #28
 800c64e:	46bd      	mov	sp, r7
 800c650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c654:	4770      	bx	lr
 800c656:	bf00      	nop
 800c658:	58025408 	.word	0x58025408
 800c65c:	5802541c 	.word	0x5802541c
 800c660:	58025430 	.word	0x58025430
 800c664:	58025444 	.word	0x58025444
 800c668:	58025458 	.word	0x58025458
 800c66c:	5802546c 	.word	0x5802546c
 800c670:	58025480 	.word	0x58025480
 800c674:	58025494 	.word	0x58025494

0800c678 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c678:	b480      	push	{r7}
 800c67a:	b085      	sub	sp, #20
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	4a42      	ldr	r2, [pc, #264]	@ (800c790 <DMA_CalcBaseAndBitshift+0x118>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d04a      	beq.n	800c720 <DMA_CalcBaseAndBitshift+0xa8>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	4a41      	ldr	r2, [pc, #260]	@ (800c794 <DMA_CalcBaseAndBitshift+0x11c>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d045      	beq.n	800c720 <DMA_CalcBaseAndBitshift+0xa8>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4a3f      	ldr	r2, [pc, #252]	@ (800c798 <DMA_CalcBaseAndBitshift+0x120>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d040      	beq.n	800c720 <DMA_CalcBaseAndBitshift+0xa8>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	4a3e      	ldr	r2, [pc, #248]	@ (800c79c <DMA_CalcBaseAndBitshift+0x124>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d03b      	beq.n	800c720 <DMA_CalcBaseAndBitshift+0xa8>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	4a3c      	ldr	r2, [pc, #240]	@ (800c7a0 <DMA_CalcBaseAndBitshift+0x128>)
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d036      	beq.n	800c720 <DMA_CalcBaseAndBitshift+0xa8>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	4a3b      	ldr	r2, [pc, #236]	@ (800c7a4 <DMA_CalcBaseAndBitshift+0x12c>)
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	d031      	beq.n	800c720 <DMA_CalcBaseAndBitshift+0xa8>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4a39      	ldr	r2, [pc, #228]	@ (800c7a8 <DMA_CalcBaseAndBitshift+0x130>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d02c      	beq.n	800c720 <DMA_CalcBaseAndBitshift+0xa8>
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4a38      	ldr	r2, [pc, #224]	@ (800c7ac <DMA_CalcBaseAndBitshift+0x134>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d027      	beq.n	800c720 <DMA_CalcBaseAndBitshift+0xa8>
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	4a36      	ldr	r2, [pc, #216]	@ (800c7b0 <DMA_CalcBaseAndBitshift+0x138>)
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d022      	beq.n	800c720 <DMA_CalcBaseAndBitshift+0xa8>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	4a35      	ldr	r2, [pc, #212]	@ (800c7b4 <DMA_CalcBaseAndBitshift+0x13c>)
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d01d      	beq.n	800c720 <DMA_CalcBaseAndBitshift+0xa8>
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	4a33      	ldr	r2, [pc, #204]	@ (800c7b8 <DMA_CalcBaseAndBitshift+0x140>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d018      	beq.n	800c720 <DMA_CalcBaseAndBitshift+0xa8>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	4a32      	ldr	r2, [pc, #200]	@ (800c7bc <DMA_CalcBaseAndBitshift+0x144>)
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d013      	beq.n	800c720 <DMA_CalcBaseAndBitshift+0xa8>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	4a30      	ldr	r2, [pc, #192]	@ (800c7c0 <DMA_CalcBaseAndBitshift+0x148>)
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d00e      	beq.n	800c720 <DMA_CalcBaseAndBitshift+0xa8>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	4a2f      	ldr	r2, [pc, #188]	@ (800c7c4 <DMA_CalcBaseAndBitshift+0x14c>)
 800c708:	4293      	cmp	r3, r2
 800c70a:	d009      	beq.n	800c720 <DMA_CalcBaseAndBitshift+0xa8>
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	4a2d      	ldr	r2, [pc, #180]	@ (800c7c8 <DMA_CalcBaseAndBitshift+0x150>)
 800c712:	4293      	cmp	r3, r2
 800c714:	d004      	beq.n	800c720 <DMA_CalcBaseAndBitshift+0xa8>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4a2c      	ldr	r2, [pc, #176]	@ (800c7cc <DMA_CalcBaseAndBitshift+0x154>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d101      	bne.n	800c724 <DMA_CalcBaseAndBitshift+0xac>
 800c720:	2301      	movs	r3, #1
 800c722:	e000      	b.n	800c726 <DMA_CalcBaseAndBitshift+0xae>
 800c724:	2300      	movs	r3, #0
 800c726:	2b00      	cmp	r3, #0
 800c728:	d024      	beq.n	800c774 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	b2db      	uxtb	r3, r3
 800c730:	3b10      	subs	r3, #16
 800c732:	4a27      	ldr	r2, [pc, #156]	@ (800c7d0 <DMA_CalcBaseAndBitshift+0x158>)
 800c734:	fba2 2303 	umull	r2, r3, r2, r3
 800c738:	091b      	lsrs	r3, r3, #4
 800c73a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f003 0307 	and.w	r3, r3, #7
 800c742:	4a24      	ldr	r2, [pc, #144]	@ (800c7d4 <DMA_CalcBaseAndBitshift+0x15c>)
 800c744:	5cd3      	ldrb	r3, [r2, r3]
 800c746:	461a      	mov	r2, r3
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	2b03      	cmp	r3, #3
 800c750:	d908      	bls.n	800c764 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	461a      	mov	r2, r3
 800c758:	4b1f      	ldr	r3, [pc, #124]	@ (800c7d8 <DMA_CalcBaseAndBitshift+0x160>)
 800c75a:	4013      	ands	r3, r2
 800c75c:	1d1a      	adds	r2, r3, #4
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	659a      	str	r2, [r3, #88]	@ 0x58
 800c762:	e00d      	b.n	800c780 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	461a      	mov	r2, r3
 800c76a:	4b1b      	ldr	r3, [pc, #108]	@ (800c7d8 <DMA_CalcBaseAndBitshift+0x160>)
 800c76c:	4013      	ands	r3, r2
 800c76e:	687a      	ldr	r2, [r7, #4]
 800c770:	6593      	str	r3, [r2, #88]	@ 0x58
 800c772:	e005      	b.n	800c780 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800c784:	4618      	mov	r0, r3
 800c786:	3714      	adds	r7, #20
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr
 800c790:	40020010 	.word	0x40020010
 800c794:	40020028 	.word	0x40020028
 800c798:	40020040 	.word	0x40020040
 800c79c:	40020058 	.word	0x40020058
 800c7a0:	40020070 	.word	0x40020070
 800c7a4:	40020088 	.word	0x40020088
 800c7a8:	400200a0 	.word	0x400200a0
 800c7ac:	400200b8 	.word	0x400200b8
 800c7b0:	40020410 	.word	0x40020410
 800c7b4:	40020428 	.word	0x40020428
 800c7b8:	40020440 	.word	0x40020440
 800c7bc:	40020458 	.word	0x40020458
 800c7c0:	40020470 	.word	0x40020470
 800c7c4:	40020488 	.word	0x40020488
 800c7c8:	400204a0 	.word	0x400204a0
 800c7cc:	400204b8 	.word	0x400204b8
 800c7d0:	aaaaaaab 	.word	0xaaaaaaab
 800c7d4:	0802e320 	.word	0x0802e320
 800c7d8:	fffffc00 	.word	0xfffffc00

0800c7dc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b085      	sub	sp, #20
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	699b      	ldr	r3, [r3, #24]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d120      	bne.n	800c832 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7f4:	2b03      	cmp	r3, #3
 800c7f6:	d858      	bhi.n	800c8aa <DMA_CheckFifoParam+0xce>
 800c7f8:	a201      	add	r2, pc, #4	@ (adr r2, 800c800 <DMA_CheckFifoParam+0x24>)
 800c7fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7fe:	bf00      	nop
 800c800:	0800c811 	.word	0x0800c811
 800c804:	0800c823 	.word	0x0800c823
 800c808:	0800c811 	.word	0x0800c811
 800c80c:	0800c8ab 	.word	0x0800c8ab
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c814:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d048      	beq.n	800c8ae <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800c81c:	2301      	movs	r3, #1
 800c81e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c820:	e045      	b.n	800c8ae <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c826:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800c82a:	d142      	bne.n	800c8b2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800c82c:	2301      	movs	r3, #1
 800c82e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c830:	e03f      	b.n	800c8b2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	699b      	ldr	r3, [r3, #24]
 800c836:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c83a:	d123      	bne.n	800c884 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c840:	2b03      	cmp	r3, #3
 800c842:	d838      	bhi.n	800c8b6 <DMA_CheckFifoParam+0xda>
 800c844:	a201      	add	r2, pc, #4	@ (adr r2, 800c84c <DMA_CheckFifoParam+0x70>)
 800c846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c84a:	bf00      	nop
 800c84c:	0800c85d 	.word	0x0800c85d
 800c850:	0800c863 	.word	0x0800c863
 800c854:	0800c85d 	.word	0x0800c85d
 800c858:	0800c875 	.word	0x0800c875
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800c85c:	2301      	movs	r3, #1
 800c85e:	73fb      	strb	r3, [r7, #15]
        break;
 800c860:	e030      	b.n	800c8c4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c866:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d025      	beq.n	800c8ba <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800c86e:	2301      	movs	r3, #1
 800c870:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c872:	e022      	b.n	800c8ba <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c878:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800c87c:	d11f      	bne.n	800c8be <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800c87e:	2301      	movs	r3, #1
 800c880:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c882:	e01c      	b.n	800c8be <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c888:	2b02      	cmp	r3, #2
 800c88a:	d902      	bls.n	800c892 <DMA_CheckFifoParam+0xb6>
 800c88c:	2b03      	cmp	r3, #3
 800c88e:	d003      	beq.n	800c898 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800c890:	e018      	b.n	800c8c4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800c892:	2301      	movs	r3, #1
 800c894:	73fb      	strb	r3, [r7, #15]
        break;
 800c896:	e015      	b.n	800c8c4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c89c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d00e      	beq.n	800c8c2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	73fb      	strb	r3, [r7, #15]
    break;
 800c8a8:	e00b      	b.n	800c8c2 <DMA_CheckFifoParam+0xe6>
        break;
 800c8aa:	bf00      	nop
 800c8ac:	e00a      	b.n	800c8c4 <DMA_CheckFifoParam+0xe8>
        break;
 800c8ae:	bf00      	nop
 800c8b0:	e008      	b.n	800c8c4 <DMA_CheckFifoParam+0xe8>
        break;
 800c8b2:	bf00      	nop
 800c8b4:	e006      	b.n	800c8c4 <DMA_CheckFifoParam+0xe8>
        break;
 800c8b6:	bf00      	nop
 800c8b8:	e004      	b.n	800c8c4 <DMA_CheckFifoParam+0xe8>
        break;
 800c8ba:	bf00      	nop
 800c8bc:	e002      	b.n	800c8c4 <DMA_CheckFifoParam+0xe8>
        break;
 800c8be:	bf00      	nop
 800c8c0:	e000      	b.n	800c8c4 <DMA_CheckFifoParam+0xe8>
    break;
 800c8c2:	bf00      	nop
    }
  }

  return status;
 800c8c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3714      	adds	r7, #20
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d0:	4770      	bx	lr
 800c8d2:	bf00      	nop

0800c8d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b085      	sub	sp, #20
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	4a38      	ldr	r2, [pc, #224]	@ (800c9c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	d022      	beq.n	800c932 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4a36      	ldr	r2, [pc, #216]	@ (800c9cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d01d      	beq.n	800c932 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	4a35      	ldr	r2, [pc, #212]	@ (800c9d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d018      	beq.n	800c932 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	4a33      	ldr	r2, [pc, #204]	@ (800c9d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800c906:	4293      	cmp	r3, r2
 800c908:	d013      	beq.n	800c932 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	4a32      	ldr	r2, [pc, #200]	@ (800c9d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800c910:	4293      	cmp	r3, r2
 800c912:	d00e      	beq.n	800c932 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	4a30      	ldr	r2, [pc, #192]	@ (800c9dc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d009      	beq.n	800c932 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	4a2f      	ldr	r2, [pc, #188]	@ (800c9e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800c924:	4293      	cmp	r3, r2
 800c926:	d004      	beq.n	800c932 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	4a2d      	ldr	r2, [pc, #180]	@ (800c9e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800c92e:	4293      	cmp	r3, r2
 800c930:	d101      	bne.n	800c936 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800c932:	2301      	movs	r3, #1
 800c934:	e000      	b.n	800c938 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800c936:	2300      	movs	r3, #0
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d01a      	beq.n	800c972 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	b2db      	uxtb	r3, r3
 800c942:	3b08      	subs	r3, #8
 800c944:	4a28      	ldr	r2, [pc, #160]	@ (800c9e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800c946:	fba2 2303 	umull	r2, r3, r2, r3
 800c94a:	091b      	lsrs	r3, r3, #4
 800c94c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800c94e:	68fa      	ldr	r2, [r7, #12]
 800c950:	4b26      	ldr	r3, [pc, #152]	@ (800c9ec <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800c952:	4413      	add	r3, r2
 800c954:	009b      	lsls	r3, r3, #2
 800c956:	461a      	mov	r2, r3
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	4a24      	ldr	r2, [pc, #144]	@ (800c9f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800c960:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	f003 031f 	and.w	r3, r3, #31
 800c968:	2201      	movs	r2, #1
 800c96a:	409a      	lsls	r2, r3
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800c970:	e024      	b.n	800c9bc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	b2db      	uxtb	r3, r3
 800c978:	3b10      	subs	r3, #16
 800c97a:	4a1e      	ldr	r2, [pc, #120]	@ (800c9f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800c97c:	fba2 2303 	umull	r2, r3, r2, r3
 800c980:	091b      	lsrs	r3, r3, #4
 800c982:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	4a1c      	ldr	r2, [pc, #112]	@ (800c9f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800c988:	4293      	cmp	r3, r2
 800c98a:	d806      	bhi.n	800c99a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	4a1b      	ldr	r2, [pc, #108]	@ (800c9fc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800c990:	4293      	cmp	r3, r2
 800c992:	d902      	bls.n	800c99a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	3308      	adds	r3, #8
 800c998:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800c99a:	68fa      	ldr	r2, [r7, #12]
 800c99c:	4b18      	ldr	r3, [pc, #96]	@ (800ca00 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800c99e:	4413      	add	r3, r2
 800c9a0:	009b      	lsls	r3, r3, #2
 800c9a2:	461a      	mov	r2, r3
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	4a16      	ldr	r2, [pc, #88]	@ (800ca04 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800c9ac:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	f003 031f 	and.w	r3, r3, #31
 800c9b4:	2201      	movs	r2, #1
 800c9b6:	409a      	lsls	r2, r3
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800c9bc:	bf00      	nop
 800c9be:	3714      	adds	r7, #20
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c6:	4770      	bx	lr
 800c9c8:	58025408 	.word	0x58025408
 800c9cc:	5802541c 	.word	0x5802541c
 800c9d0:	58025430 	.word	0x58025430
 800c9d4:	58025444 	.word	0x58025444
 800c9d8:	58025458 	.word	0x58025458
 800c9dc:	5802546c 	.word	0x5802546c
 800c9e0:	58025480 	.word	0x58025480
 800c9e4:	58025494 	.word	0x58025494
 800c9e8:	cccccccd 	.word	0xcccccccd
 800c9ec:	16009600 	.word	0x16009600
 800c9f0:	58025880 	.word	0x58025880
 800c9f4:	aaaaaaab 	.word	0xaaaaaaab
 800c9f8:	400204b8 	.word	0x400204b8
 800c9fc:	4002040f 	.word	0x4002040f
 800ca00:	10008200 	.word	0x10008200
 800ca04:	40020880 	.word	0x40020880

0800ca08 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b085      	sub	sp, #20
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	b2db      	uxtb	r3, r3
 800ca16:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d04a      	beq.n	800cab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	2b08      	cmp	r3, #8
 800ca22:	d847      	bhi.n	800cab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	4a25      	ldr	r2, [pc, #148]	@ (800cac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d022      	beq.n	800ca74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	4a24      	ldr	r2, [pc, #144]	@ (800cac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800ca34:	4293      	cmp	r3, r2
 800ca36:	d01d      	beq.n	800ca74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4a22      	ldr	r2, [pc, #136]	@ (800cac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d018      	beq.n	800ca74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	4a21      	ldr	r2, [pc, #132]	@ (800cacc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d013      	beq.n	800ca74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	4a1f      	ldr	r2, [pc, #124]	@ (800cad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800ca52:	4293      	cmp	r3, r2
 800ca54:	d00e      	beq.n	800ca74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	4a1e      	ldr	r2, [pc, #120]	@ (800cad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d009      	beq.n	800ca74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4a1c      	ldr	r2, [pc, #112]	@ (800cad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d004      	beq.n	800ca74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4a1b      	ldr	r2, [pc, #108]	@ (800cadc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d101      	bne.n	800ca78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800ca74:	2301      	movs	r3, #1
 800ca76:	e000      	b.n	800ca7a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800ca78:	2300      	movs	r3, #0
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d00a      	beq.n	800ca94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800ca7e:	68fa      	ldr	r2, [r7, #12]
 800ca80:	4b17      	ldr	r3, [pc, #92]	@ (800cae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800ca82:	4413      	add	r3, r2
 800ca84:	009b      	lsls	r3, r3, #2
 800ca86:	461a      	mov	r2, r3
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	4a15      	ldr	r2, [pc, #84]	@ (800cae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800ca90:	671a      	str	r2, [r3, #112]	@ 0x70
 800ca92:	e009      	b.n	800caa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800ca94:	68fa      	ldr	r2, [r7, #12]
 800ca96:	4b14      	ldr	r3, [pc, #80]	@ (800cae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800ca98:	4413      	add	r3, r2
 800ca9a:	009b      	lsls	r3, r3, #2
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	4a11      	ldr	r2, [pc, #68]	@ (800caec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800caa6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	3b01      	subs	r3, #1
 800caac:	2201      	movs	r2, #1
 800caae:	409a      	lsls	r2, r3
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800cab4:	bf00      	nop
 800cab6:	3714      	adds	r7, #20
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr
 800cac0:	58025408 	.word	0x58025408
 800cac4:	5802541c 	.word	0x5802541c
 800cac8:	58025430 	.word	0x58025430
 800cacc:	58025444 	.word	0x58025444
 800cad0:	58025458 	.word	0x58025458
 800cad4:	5802546c 	.word	0x5802546c
 800cad8:	58025480 	.word	0x58025480
 800cadc:	58025494 	.word	0x58025494
 800cae0:	1600963f 	.word	0x1600963f
 800cae4:	58025940 	.word	0x58025940
 800cae8:	1000823f 	.word	0x1000823f
 800caec:	40020940 	.word	0x40020940

0800caf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b089      	sub	sp, #36	@ 0x24
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
 800caf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800cafa:	2300      	movs	r3, #0
 800cafc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800cafe:	4b86      	ldr	r3, [pc, #536]	@ (800cd18 <HAL_GPIO_Init+0x228>)
 800cb00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800cb02:	e18c      	b.n	800ce1e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	681a      	ldr	r2, [r3, #0]
 800cb08:	2101      	movs	r1, #1
 800cb0a:	69fb      	ldr	r3, [r7, #28]
 800cb0c:	fa01 f303 	lsl.w	r3, r1, r3
 800cb10:	4013      	ands	r3, r2
 800cb12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	f000 817e 	beq.w	800ce18 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	f003 0303 	and.w	r3, r3, #3
 800cb24:	2b01      	cmp	r3, #1
 800cb26:	d005      	beq.n	800cb34 <HAL_GPIO_Init+0x44>
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	685b      	ldr	r3, [r3, #4]
 800cb2c:	f003 0303 	and.w	r3, r3, #3
 800cb30:	2b02      	cmp	r3, #2
 800cb32:	d130      	bne.n	800cb96 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	689b      	ldr	r3, [r3, #8]
 800cb38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800cb3a:	69fb      	ldr	r3, [r7, #28]
 800cb3c:	005b      	lsls	r3, r3, #1
 800cb3e:	2203      	movs	r2, #3
 800cb40:	fa02 f303 	lsl.w	r3, r2, r3
 800cb44:	43db      	mvns	r3, r3
 800cb46:	69ba      	ldr	r2, [r7, #24]
 800cb48:	4013      	ands	r3, r2
 800cb4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	68da      	ldr	r2, [r3, #12]
 800cb50:	69fb      	ldr	r3, [r7, #28]
 800cb52:	005b      	lsls	r3, r3, #1
 800cb54:	fa02 f303 	lsl.w	r3, r2, r3
 800cb58:	69ba      	ldr	r2, [r7, #24]
 800cb5a:	4313      	orrs	r3, r2
 800cb5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	69ba      	ldr	r2, [r7, #24]
 800cb62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	685b      	ldr	r3, [r3, #4]
 800cb68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	69fb      	ldr	r3, [r7, #28]
 800cb6e:	fa02 f303 	lsl.w	r3, r2, r3
 800cb72:	43db      	mvns	r3, r3
 800cb74:	69ba      	ldr	r2, [r7, #24]
 800cb76:	4013      	ands	r3, r2
 800cb78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	091b      	lsrs	r3, r3, #4
 800cb80:	f003 0201 	and.w	r2, r3, #1
 800cb84:	69fb      	ldr	r3, [r7, #28]
 800cb86:	fa02 f303 	lsl.w	r3, r2, r3
 800cb8a:	69ba      	ldr	r2, [r7, #24]
 800cb8c:	4313      	orrs	r3, r2
 800cb8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	69ba      	ldr	r2, [r7, #24]
 800cb94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	685b      	ldr	r3, [r3, #4]
 800cb9a:	f003 0303 	and.w	r3, r3, #3
 800cb9e:	2b03      	cmp	r3, #3
 800cba0:	d017      	beq.n	800cbd2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	68db      	ldr	r3, [r3, #12]
 800cba6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800cba8:	69fb      	ldr	r3, [r7, #28]
 800cbaa:	005b      	lsls	r3, r3, #1
 800cbac:	2203      	movs	r2, #3
 800cbae:	fa02 f303 	lsl.w	r3, r2, r3
 800cbb2:	43db      	mvns	r3, r3
 800cbb4:	69ba      	ldr	r2, [r7, #24]
 800cbb6:	4013      	ands	r3, r2
 800cbb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	689a      	ldr	r2, [r3, #8]
 800cbbe:	69fb      	ldr	r3, [r7, #28]
 800cbc0:	005b      	lsls	r3, r3, #1
 800cbc2:	fa02 f303 	lsl.w	r3, r2, r3
 800cbc6:	69ba      	ldr	r2, [r7, #24]
 800cbc8:	4313      	orrs	r3, r2
 800cbca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	69ba      	ldr	r2, [r7, #24]
 800cbd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	685b      	ldr	r3, [r3, #4]
 800cbd6:	f003 0303 	and.w	r3, r3, #3
 800cbda:	2b02      	cmp	r3, #2
 800cbdc:	d123      	bne.n	800cc26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800cbde:	69fb      	ldr	r3, [r7, #28]
 800cbe0:	08da      	lsrs	r2, r3, #3
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	3208      	adds	r2, #8
 800cbe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800cbec:	69fb      	ldr	r3, [r7, #28]
 800cbee:	f003 0307 	and.w	r3, r3, #7
 800cbf2:	009b      	lsls	r3, r3, #2
 800cbf4:	220f      	movs	r2, #15
 800cbf6:	fa02 f303 	lsl.w	r3, r2, r3
 800cbfa:	43db      	mvns	r3, r3
 800cbfc:	69ba      	ldr	r2, [r7, #24]
 800cbfe:	4013      	ands	r3, r2
 800cc00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	691a      	ldr	r2, [r3, #16]
 800cc06:	69fb      	ldr	r3, [r7, #28]
 800cc08:	f003 0307 	and.w	r3, r3, #7
 800cc0c:	009b      	lsls	r3, r3, #2
 800cc0e:	fa02 f303 	lsl.w	r3, r2, r3
 800cc12:	69ba      	ldr	r2, [r7, #24]
 800cc14:	4313      	orrs	r3, r2
 800cc16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800cc18:	69fb      	ldr	r3, [r7, #28]
 800cc1a:	08da      	lsrs	r2, r3, #3
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	3208      	adds	r2, #8
 800cc20:	69b9      	ldr	r1, [r7, #24]
 800cc22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800cc2c:	69fb      	ldr	r3, [r7, #28]
 800cc2e:	005b      	lsls	r3, r3, #1
 800cc30:	2203      	movs	r2, #3
 800cc32:	fa02 f303 	lsl.w	r3, r2, r3
 800cc36:	43db      	mvns	r3, r3
 800cc38:	69ba      	ldr	r2, [r7, #24]
 800cc3a:	4013      	ands	r3, r2
 800cc3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	f003 0203 	and.w	r2, r3, #3
 800cc46:	69fb      	ldr	r3, [r7, #28]
 800cc48:	005b      	lsls	r3, r3, #1
 800cc4a:	fa02 f303 	lsl.w	r3, r2, r3
 800cc4e:	69ba      	ldr	r2, [r7, #24]
 800cc50:	4313      	orrs	r3, r2
 800cc52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	69ba      	ldr	r2, [r7, #24]
 800cc58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	f000 80d8 	beq.w	800ce18 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cc68:	4b2c      	ldr	r3, [pc, #176]	@ (800cd1c <HAL_GPIO_Init+0x22c>)
 800cc6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cc6e:	4a2b      	ldr	r2, [pc, #172]	@ (800cd1c <HAL_GPIO_Init+0x22c>)
 800cc70:	f043 0302 	orr.w	r3, r3, #2
 800cc74:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800cc78:	4b28      	ldr	r3, [pc, #160]	@ (800cd1c <HAL_GPIO_Init+0x22c>)
 800cc7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cc7e:	f003 0302 	and.w	r3, r3, #2
 800cc82:	60fb      	str	r3, [r7, #12]
 800cc84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800cc86:	4a26      	ldr	r2, [pc, #152]	@ (800cd20 <HAL_GPIO_Init+0x230>)
 800cc88:	69fb      	ldr	r3, [r7, #28]
 800cc8a:	089b      	lsrs	r3, r3, #2
 800cc8c:	3302      	adds	r3, #2
 800cc8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800cc94:	69fb      	ldr	r3, [r7, #28]
 800cc96:	f003 0303 	and.w	r3, r3, #3
 800cc9a:	009b      	lsls	r3, r3, #2
 800cc9c:	220f      	movs	r2, #15
 800cc9e:	fa02 f303 	lsl.w	r3, r2, r3
 800cca2:	43db      	mvns	r3, r3
 800cca4:	69ba      	ldr	r2, [r7, #24]
 800cca6:	4013      	ands	r3, r2
 800cca8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	4a1d      	ldr	r2, [pc, #116]	@ (800cd24 <HAL_GPIO_Init+0x234>)
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d04a      	beq.n	800cd48 <HAL_GPIO_Init+0x258>
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	4a1c      	ldr	r2, [pc, #112]	@ (800cd28 <HAL_GPIO_Init+0x238>)
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d02b      	beq.n	800cd12 <HAL_GPIO_Init+0x222>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	4a1b      	ldr	r2, [pc, #108]	@ (800cd2c <HAL_GPIO_Init+0x23c>)
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d025      	beq.n	800cd0e <HAL_GPIO_Init+0x21e>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	4a1a      	ldr	r2, [pc, #104]	@ (800cd30 <HAL_GPIO_Init+0x240>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d01f      	beq.n	800cd0a <HAL_GPIO_Init+0x21a>
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	4a19      	ldr	r2, [pc, #100]	@ (800cd34 <HAL_GPIO_Init+0x244>)
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d019      	beq.n	800cd06 <HAL_GPIO_Init+0x216>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	4a18      	ldr	r2, [pc, #96]	@ (800cd38 <HAL_GPIO_Init+0x248>)
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d013      	beq.n	800cd02 <HAL_GPIO_Init+0x212>
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	4a17      	ldr	r2, [pc, #92]	@ (800cd3c <HAL_GPIO_Init+0x24c>)
 800ccde:	4293      	cmp	r3, r2
 800cce0:	d00d      	beq.n	800ccfe <HAL_GPIO_Init+0x20e>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	4a16      	ldr	r2, [pc, #88]	@ (800cd40 <HAL_GPIO_Init+0x250>)
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d007      	beq.n	800ccfa <HAL_GPIO_Init+0x20a>
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	4a15      	ldr	r2, [pc, #84]	@ (800cd44 <HAL_GPIO_Init+0x254>)
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d101      	bne.n	800ccf6 <HAL_GPIO_Init+0x206>
 800ccf2:	2309      	movs	r3, #9
 800ccf4:	e029      	b.n	800cd4a <HAL_GPIO_Init+0x25a>
 800ccf6:	230a      	movs	r3, #10
 800ccf8:	e027      	b.n	800cd4a <HAL_GPIO_Init+0x25a>
 800ccfa:	2307      	movs	r3, #7
 800ccfc:	e025      	b.n	800cd4a <HAL_GPIO_Init+0x25a>
 800ccfe:	2306      	movs	r3, #6
 800cd00:	e023      	b.n	800cd4a <HAL_GPIO_Init+0x25a>
 800cd02:	2305      	movs	r3, #5
 800cd04:	e021      	b.n	800cd4a <HAL_GPIO_Init+0x25a>
 800cd06:	2304      	movs	r3, #4
 800cd08:	e01f      	b.n	800cd4a <HAL_GPIO_Init+0x25a>
 800cd0a:	2303      	movs	r3, #3
 800cd0c:	e01d      	b.n	800cd4a <HAL_GPIO_Init+0x25a>
 800cd0e:	2302      	movs	r3, #2
 800cd10:	e01b      	b.n	800cd4a <HAL_GPIO_Init+0x25a>
 800cd12:	2301      	movs	r3, #1
 800cd14:	e019      	b.n	800cd4a <HAL_GPIO_Init+0x25a>
 800cd16:	bf00      	nop
 800cd18:	58000080 	.word	0x58000080
 800cd1c:	58024400 	.word	0x58024400
 800cd20:	58000400 	.word	0x58000400
 800cd24:	58020000 	.word	0x58020000
 800cd28:	58020400 	.word	0x58020400
 800cd2c:	58020800 	.word	0x58020800
 800cd30:	58020c00 	.word	0x58020c00
 800cd34:	58021000 	.word	0x58021000
 800cd38:	58021400 	.word	0x58021400
 800cd3c:	58021800 	.word	0x58021800
 800cd40:	58021c00 	.word	0x58021c00
 800cd44:	58022400 	.word	0x58022400
 800cd48:	2300      	movs	r3, #0
 800cd4a:	69fa      	ldr	r2, [r7, #28]
 800cd4c:	f002 0203 	and.w	r2, r2, #3
 800cd50:	0092      	lsls	r2, r2, #2
 800cd52:	4093      	lsls	r3, r2
 800cd54:	69ba      	ldr	r2, [r7, #24]
 800cd56:	4313      	orrs	r3, r2
 800cd58:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800cd5a:	4938      	ldr	r1, [pc, #224]	@ (800ce3c <HAL_GPIO_Init+0x34c>)
 800cd5c:	69fb      	ldr	r3, [r7, #28]
 800cd5e:	089b      	lsrs	r3, r3, #2
 800cd60:	3302      	adds	r3, #2
 800cd62:	69ba      	ldr	r2, [r7, #24]
 800cd64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800cd68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	43db      	mvns	r3, r3
 800cd74:	69ba      	ldr	r2, [r7, #24]
 800cd76:	4013      	ands	r3, r2
 800cd78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d003      	beq.n	800cd8e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800cd86:	69ba      	ldr	r2, [r7, #24]
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	4313      	orrs	r3, r2
 800cd8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800cd8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cd92:	69bb      	ldr	r3, [r7, #24]
 800cd94:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800cd96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cd9a:	685b      	ldr	r3, [r3, #4]
 800cd9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800cd9e:	693b      	ldr	r3, [r7, #16]
 800cda0:	43db      	mvns	r3, r3
 800cda2:	69ba      	ldr	r2, [r7, #24]
 800cda4:	4013      	ands	r3, r2
 800cda6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d003      	beq.n	800cdbc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800cdb4:	69ba      	ldr	r2, [r7, #24]
 800cdb6:	693b      	ldr	r3, [r7, #16]
 800cdb8:	4313      	orrs	r3, r2
 800cdba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800cdbc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cdc0:	69bb      	ldr	r3, [r7, #24]
 800cdc2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	685b      	ldr	r3, [r3, #4]
 800cdc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	43db      	mvns	r3, r3
 800cdce:	69ba      	ldr	r2, [r7, #24]
 800cdd0:	4013      	ands	r3, r2
 800cdd2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	685b      	ldr	r3, [r3, #4]
 800cdd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d003      	beq.n	800cde8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800cde0:	69ba      	ldr	r2, [r7, #24]
 800cde2:	693b      	ldr	r3, [r7, #16]
 800cde4:	4313      	orrs	r3, r2
 800cde6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	69ba      	ldr	r2, [r7, #24]
 800cdec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	43db      	mvns	r3, r3
 800cdf8:	69ba      	ldr	r2, [r7, #24]
 800cdfa:	4013      	ands	r3, r2
 800cdfc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	685b      	ldr	r3, [r3, #4]
 800ce02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d003      	beq.n	800ce12 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800ce0a:	69ba      	ldr	r2, [r7, #24]
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	4313      	orrs	r3, r2
 800ce10:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	69ba      	ldr	r2, [r7, #24]
 800ce16:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800ce18:	69fb      	ldr	r3, [r7, #28]
 800ce1a:	3301      	adds	r3, #1
 800ce1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	681a      	ldr	r2, [r3, #0]
 800ce22:	69fb      	ldr	r3, [r7, #28]
 800ce24:	fa22 f303 	lsr.w	r3, r2, r3
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	f47f ae6b 	bne.w	800cb04 <HAL_GPIO_Init+0x14>
  }
}
 800ce2e:	bf00      	nop
 800ce30:	bf00      	nop
 800ce32:	3724      	adds	r7, #36	@ 0x24
 800ce34:	46bd      	mov	sp, r7
 800ce36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3a:	4770      	bx	lr
 800ce3c:	58000400 	.word	0x58000400

0800ce40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b085      	sub	sp, #20
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
 800ce48:	460b      	mov	r3, r1
 800ce4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	691a      	ldr	r2, [r3, #16]
 800ce50:	887b      	ldrh	r3, [r7, #2]
 800ce52:	4013      	ands	r3, r2
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d002      	beq.n	800ce5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ce58:	2301      	movs	r3, #1
 800ce5a:	73fb      	strb	r3, [r7, #15]
 800ce5c:	e001      	b.n	800ce62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ce62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3714      	adds	r7, #20
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6e:	4770      	bx	lr

0800ce70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ce70:	b480      	push	{r7}
 800ce72:	b083      	sub	sp, #12
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	460b      	mov	r3, r1
 800ce7a:	807b      	strh	r3, [r7, #2]
 800ce7c:	4613      	mov	r3, r2
 800ce7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ce80:	787b      	ldrb	r3, [r7, #1]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d003      	beq.n	800ce8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ce86:	887a      	ldrh	r2, [r7, #2]
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800ce8c:	e003      	b.n	800ce96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800ce8e:	887b      	ldrh	r3, [r7, #2]
 800ce90:	041a      	lsls	r2, r3, #16
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	619a      	str	r2, [r3, #24]
}
 800ce96:	bf00      	nop
 800ce98:	370c      	adds	r7, #12
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea0:	4770      	bx	lr

0800cea2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800cea2:	b580      	push	{r7, lr}
 800cea4:	b082      	sub	sp, #8
 800cea6:	af00      	add	r7, sp, #0
 800cea8:	4603      	mov	r3, r0
 800ceaa:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800ceac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ceb0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800ceb4:	88fb      	ldrh	r3, [r7, #6]
 800ceb6:	4013      	ands	r3, r2
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d008      	beq.n	800cece <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800cebc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cec0:	88fb      	ldrh	r3, [r7, #6]
 800cec2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800cec6:	88fb      	ldrh	r3, [r7, #6]
 800cec8:	4618      	mov	r0, r3
 800ceca:	f7fa f91d 	bl	8007108 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800cece:	bf00      	nop
 800ced0:	3708      	adds	r7, #8
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}
	...

0800ced8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b084      	sub	sp, #16
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800cee0:	4b19      	ldr	r3, [pc, #100]	@ (800cf48 <HAL_PWREx_ConfigSupply+0x70>)
 800cee2:	68db      	ldr	r3, [r3, #12]
 800cee4:	f003 0304 	and.w	r3, r3, #4
 800cee8:	2b04      	cmp	r3, #4
 800ceea:	d00a      	beq.n	800cf02 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800ceec:	4b16      	ldr	r3, [pc, #88]	@ (800cf48 <HAL_PWREx_ConfigSupply+0x70>)
 800ceee:	68db      	ldr	r3, [r3, #12]
 800cef0:	f003 0307 	and.w	r3, r3, #7
 800cef4:	687a      	ldr	r2, [r7, #4]
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d001      	beq.n	800cefe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800cefa:	2301      	movs	r3, #1
 800cefc:	e01f      	b.n	800cf3e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800cefe:	2300      	movs	r3, #0
 800cf00:	e01d      	b.n	800cf3e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800cf02:	4b11      	ldr	r3, [pc, #68]	@ (800cf48 <HAL_PWREx_ConfigSupply+0x70>)
 800cf04:	68db      	ldr	r3, [r3, #12]
 800cf06:	f023 0207 	bic.w	r2, r3, #7
 800cf0a:	490f      	ldr	r1, [pc, #60]	@ (800cf48 <HAL_PWREx_ConfigSupply+0x70>)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	4313      	orrs	r3, r2
 800cf10:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800cf12:	f7fc fdbf 	bl	8009a94 <HAL_GetTick>
 800cf16:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800cf18:	e009      	b.n	800cf2e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800cf1a:	f7fc fdbb 	bl	8009a94 <HAL_GetTick>
 800cf1e:	4602      	mov	r2, r0
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	1ad3      	subs	r3, r2, r3
 800cf24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cf28:	d901      	bls.n	800cf2e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	e007      	b.n	800cf3e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800cf2e:	4b06      	ldr	r3, [pc, #24]	@ (800cf48 <HAL_PWREx_ConfigSupply+0x70>)
 800cf30:	685b      	ldr	r3, [r3, #4]
 800cf32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cf36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cf3a:	d1ee      	bne.n	800cf1a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800cf3c:	2300      	movs	r3, #0
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3710      	adds	r7, #16
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
 800cf46:	bf00      	nop
 800cf48:	58024800 	.word	0x58024800

0800cf4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b08c      	sub	sp, #48	@ 0x30
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d101      	bne.n	800cf5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	e3c8      	b.n	800d6f0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f003 0301 	and.w	r3, r3, #1
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	f000 8087 	beq.w	800d07a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cf6c:	4b88      	ldr	r3, [pc, #544]	@ (800d190 <HAL_RCC_OscConfig+0x244>)
 800cf6e:	691b      	ldr	r3, [r3, #16]
 800cf70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cf74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cf76:	4b86      	ldr	r3, [pc, #536]	@ (800d190 <HAL_RCC_OscConfig+0x244>)
 800cf78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800cf7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf7e:	2b10      	cmp	r3, #16
 800cf80:	d007      	beq.n	800cf92 <HAL_RCC_OscConfig+0x46>
 800cf82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf84:	2b18      	cmp	r3, #24
 800cf86:	d110      	bne.n	800cfaa <HAL_RCC_OscConfig+0x5e>
 800cf88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf8a:	f003 0303 	and.w	r3, r3, #3
 800cf8e:	2b02      	cmp	r3, #2
 800cf90:	d10b      	bne.n	800cfaa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cf92:	4b7f      	ldr	r3, [pc, #508]	@ (800d190 <HAL_RCC_OscConfig+0x244>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d06c      	beq.n	800d078 <HAL_RCC_OscConfig+0x12c>
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	685b      	ldr	r3, [r3, #4]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d168      	bne.n	800d078 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	e3a2      	b.n	800d6f0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	685b      	ldr	r3, [r3, #4]
 800cfae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cfb2:	d106      	bne.n	800cfc2 <HAL_RCC_OscConfig+0x76>
 800cfb4:	4b76      	ldr	r3, [pc, #472]	@ (800d190 <HAL_RCC_OscConfig+0x244>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	4a75      	ldr	r2, [pc, #468]	@ (800d190 <HAL_RCC_OscConfig+0x244>)
 800cfba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cfbe:	6013      	str	r3, [r2, #0]
 800cfc0:	e02e      	b.n	800d020 <HAL_RCC_OscConfig+0xd4>
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	685b      	ldr	r3, [r3, #4]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d10c      	bne.n	800cfe4 <HAL_RCC_OscConfig+0x98>
 800cfca:	4b71      	ldr	r3, [pc, #452]	@ (800d190 <HAL_RCC_OscConfig+0x244>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	4a70      	ldr	r2, [pc, #448]	@ (800d190 <HAL_RCC_OscConfig+0x244>)
 800cfd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cfd4:	6013      	str	r3, [r2, #0]
 800cfd6:	4b6e      	ldr	r3, [pc, #440]	@ (800d190 <HAL_RCC_OscConfig+0x244>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	4a6d      	ldr	r2, [pc, #436]	@ (800d190 <HAL_RCC_OscConfig+0x244>)
 800cfdc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cfe0:	6013      	str	r3, [r2, #0]
 800cfe2:	e01d      	b.n	800d020 <HAL_RCC_OscConfig+0xd4>
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	685b      	ldr	r3, [r3, #4]
 800cfe8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cfec:	d10c      	bne.n	800d008 <HAL_RCC_OscConfig+0xbc>
 800cfee:	4b68      	ldr	r3, [pc, #416]	@ (800d190 <HAL_RCC_OscConfig+0x244>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	4a67      	ldr	r2, [pc, #412]	@ (800d190 <HAL_RCC_OscConfig+0x244>)
 800cff4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cff8:	6013      	str	r3, [r2, #0]
 800cffa:	4b65      	ldr	r3, [pc, #404]	@ (800d190 <HAL_RCC_OscConfig+0x244>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	4a64      	ldr	r2, [pc, #400]	@ (800d190 <HAL_RCC_OscConfig+0x244>)
 800d000:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d004:	6013      	str	r3, [r2, #0]
 800d006:	e00b      	b.n	800d020 <HAL_RCC_OscConfig+0xd4>
 800d008:	4b61      	ldr	r3, [pc, #388]	@ (800d190 <HAL_RCC_OscConfig+0x244>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	4a60      	ldr	r2, [pc, #384]	@ (800d190 <HAL_RCC_OscConfig+0x244>)
 800d00e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d012:	6013      	str	r3, [r2, #0]
 800d014:	4b5e      	ldr	r3, [pc, #376]	@ (800d190 <HAL_RCC_OscConfig+0x244>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	4a5d      	ldr	r2, [pc, #372]	@ (800d190 <HAL_RCC_OscConfig+0x244>)
 800d01a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d01e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	685b      	ldr	r3, [r3, #4]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d013      	beq.n	800d050 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d028:	f7fc fd34 	bl	8009a94 <HAL_GetTick>
 800d02c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d02e:	e008      	b.n	800d042 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d030:	f7fc fd30 	bl	8009a94 <HAL_GetTick>
 800d034:	4602      	mov	r2, r0
 800d036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d038:	1ad3      	subs	r3, r2, r3
 800d03a:	2b64      	cmp	r3, #100	@ 0x64
 800d03c:	d901      	bls.n	800d042 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800d03e:	2303      	movs	r3, #3
 800d040:	e356      	b.n	800d6f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d042:	4b53      	ldr	r3, [pc, #332]	@ (800d190 <HAL_RCC_OscConfig+0x244>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d0f0      	beq.n	800d030 <HAL_RCC_OscConfig+0xe4>
 800d04e:	e014      	b.n	800d07a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d050:	f7fc fd20 	bl	8009a94 <HAL_GetTick>
 800d054:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d056:	e008      	b.n	800d06a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d058:	f7fc fd1c 	bl	8009a94 <HAL_GetTick>
 800d05c:	4602      	mov	r2, r0
 800d05e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d060:	1ad3      	subs	r3, r2, r3
 800d062:	2b64      	cmp	r3, #100	@ 0x64
 800d064:	d901      	bls.n	800d06a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800d066:	2303      	movs	r3, #3
 800d068:	e342      	b.n	800d6f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d06a:	4b49      	ldr	r3, [pc, #292]	@ (800d190 <HAL_RCC_OscConfig+0x244>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d072:	2b00      	cmp	r3, #0
 800d074:	d1f0      	bne.n	800d058 <HAL_RCC_OscConfig+0x10c>
 800d076:	e000      	b.n	800d07a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f003 0302 	and.w	r3, r3, #2
 800d082:	2b00      	cmp	r3, #0
 800d084:	f000 808c 	beq.w	800d1a0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d088:	4b41      	ldr	r3, [pc, #260]	@ (800d190 <HAL_RCC_OscConfig+0x244>)
 800d08a:	691b      	ldr	r3, [r3, #16]
 800d08c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d090:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d092:	4b3f      	ldr	r3, [pc, #252]	@ (800d190 <HAL_RCC_OscConfig+0x244>)
 800d094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d096:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800d098:	6a3b      	ldr	r3, [r7, #32]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d007      	beq.n	800d0ae <HAL_RCC_OscConfig+0x162>
 800d09e:	6a3b      	ldr	r3, [r7, #32]
 800d0a0:	2b18      	cmp	r3, #24
 800d0a2:	d137      	bne.n	800d114 <HAL_RCC_OscConfig+0x1c8>
 800d0a4:	69fb      	ldr	r3, [r7, #28]
 800d0a6:	f003 0303 	and.w	r3, r3, #3
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d132      	bne.n	800d114 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d0ae:	4b38      	ldr	r3, [pc, #224]	@ (800d190 <HAL_RCC_OscConfig+0x244>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f003 0304 	and.w	r3, r3, #4
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d005      	beq.n	800d0c6 <HAL_RCC_OscConfig+0x17a>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	68db      	ldr	r3, [r3, #12]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d101      	bne.n	800d0c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	e314      	b.n	800d6f0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d0c6:	4b32      	ldr	r3, [pc, #200]	@ (800d190 <HAL_RCC_OscConfig+0x244>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	f023 0219 	bic.w	r2, r3, #25
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	68db      	ldr	r3, [r3, #12]
 800d0d2:	492f      	ldr	r1, [pc, #188]	@ (800d190 <HAL_RCC_OscConfig+0x244>)
 800d0d4:	4313      	orrs	r3, r2
 800d0d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0d8:	f7fc fcdc 	bl	8009a94 <HAL_GetTick>
 800d0dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d0de:	e008      	b.n	800d0f2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d0e0:	f7fc fcd8 	bl	8009a94 <HAL_GetTick>
 800d0e4:	4602      	mov	r2, r0
 800d0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0e8:	1ad3      	subs	r3, r2, r3
 800d0ea:	2b02      	cmp	r3, #2
 800d0ec:	d901      	bls.n	800d0f2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800d0ee:	2303      	movs	r3, #3
 800d0f0:	e2fe      	b.n	800d6f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d0f2:	4b27      	ldr	r3, [pc, #156]	@ (800d190 <HAL_RCC_OscConfig+0x244>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f003 0304 	and.w	r3, r3, #4
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d0f0      	beq.n	800d0e0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d0fe:	4b24      	ldr	r3, [pc, #144]	@ (800d190 <HAL_RCC_OscConfig+0x244>)
 800d100:	685b      	ldr	r3, [r3, #4]
 800d102:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	691b      	ldr	r3, [r3, #16]
 800d10a:	061b      	lsls	r3, r3, #24
 800d10c:	4920      	ldr	r1, [pc, #128]	@ (800d190 <HAL_RCC_OscConfig+0x244>)
 800d10e:	4313      	orrs	r3, r2
 800d110:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d112:	e045      	b.n	800d1a0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	68db      	ldr	r3, [r3, #12]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d026      	beq.n	800d16a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d11c:	4b1c      	ldr	r3, [pc, #112]	@ (800d190 <HAL_RCC_OscConfig+0x244>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	f023 0219 	bic.w	r2, r3, #25
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	68db      	ldr	r3, [r3, #12]
 800d128:	4919      	ldr	r1, [pc, #100]	@ (800d190 <HAL_RCC_OscConfig+0x244>)
 800d12a:	4313      	orrs	r3, r2
 800d12c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d12e:	f7fc fcb1 	bl	8009a94 <HAL_GetTick>
 800d132:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d134:	e008      	b.n	800d148 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d136:	f7fc fcad 	bl	8009a94 <HAL_GetTick>
 800d13a:	4602      	mov	r2, r0
 800d13c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d13e:	1ad3      	subs	r3, r2, r3
 800d140:	2b02      	cmp	r3, #2
 800d142:	d901      	bls.n	800d148 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800d144:	2303      	movs	r3, #3
 800d146:	e2d3      	b.n	800d6f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d148:	4b11      	ldr	r3, [pc, #68]	@ (800d190 <HAL_RCC_OscConfig+0x244>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	f003 0304 	and.w	r3, r3, #4
 800d150:	2b00      	cmp	r3, #0
 800d152:	d0f0      	beq.n	800d136 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d154:	4b0e      	ldr	r3, [pc, #56]	@ (800d190 <HAL_RCC_OscConfig+0x244>)
 800d156:	685b      	ldr	r3, [r3, #4]
 800d158:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	691b      	ldr	r3, [r3, #16]
 800d160:	061b      	lsls	r3, r3, #24
 800d162:	490b      	ldr	r1, [pc, #44]	@ (800d190 <HAL_RCC_OscConfig+0x244>)
 800d164:	4313      	orrs	r3, r2
 800d166:	604b      	str	r3, [r1, #4]
 800d168:	e01a      	b.n	800d1a0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d16a:	4b09      	ldr	r3, [pc, #36]	@ (800d190 <HAL_RCC_OscConfig+0x244>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	4a08      	ldr	r2, [pc, #32]	@ (800d190 <HAL_RCC_OscConfig+0x244>)
 800d170:	f023 0301 	bic.w	r3, r3, #1
 800d174:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d176:	f7fc fc8d 	bl	8009a94 <HAL_GetTick>
 800d17a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d17c:	e00a      	b.n	800d194 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d17e:	f7fc fc89 	bl	8009a94 <HAL_GetTick>
 800d182:	4602      	mov	r2, r0
 800d184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d186:	1ad3      	subs	r3, r2, r3
 800d188:	2b02      	cmp	r3, #2
 800d18a:	d903      	bls.n	800d194 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800d18c:	2303      	movs	r3, #3
 800d18e:	e2af      	b.n	800d6f0 <HAL_RCC_OscConfig+0x7a4>
 800d190:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d194:	4b96      	ldr	r3, [pc, #600]	@ (800d3f0 <HAL_RCC_OscConfig+0x4a4>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f003 0304 	and.w	r3, r3, #4
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d1ee      	bne.n	800d17e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f003 0310 	and.w	r3, r3, #16
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d06a      	beq.n	800d282 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d1ac:	4b90      	ldr	r3, [pc, #576]	@ (800d3f0 <HAL_RCC_OscConfig+0x4a4>)
 800d1ae:	691b      	ldr	r3, [r3, #16]
 800d1b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d1b4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d1b6:	4b8e      	ldr	r3, [pc, #568]	@ (800d3f0 <HAL_RCC_OscConfig+0x4a4>)
 800d1b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1ba:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800d1bc:	69bb      	ldr	r3, [r7, #24]
 800d1be:	2b08      	cmp	r3, #8
 800d1c0:	d007      	beq.n	800d1d2 <HAL_RCC_OscConfig+0x286>
 800d1c2:	69bb      	ldr	r3, [r7, #24]
 800d1c4:	2b18      	cmp	r3, #24
 800d1c6:	d11b      	bne.n	800d200 <HAL_RCC_OscConfig+0x2b4>
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	f003 0303 	and.w	r3, r3, #3
 800d1ce:	2b01      	cmp	r3, #1
 800d1d0:	d116      	bne.n	800d200 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d1d2:	4b87      	ldr	r3, [pc, #540]	@ (800d3f0 <HAL_RCC_OscConfig+0x4a4>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d005      	beq.n	800d1ea <HAL_RCC_OscConfig+0x29e>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	69db      	ldr	r3, [r3, #28]
 800d1e2:	2b80      	cmp	r3, #128	@ 0x80
 800d1e4:	d001      	beq.n	800d1ea <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	e282      	b.n	800d6f0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d1ea:	4b81      	ldr	r3, [pc, #516]	@ (800d3f0 <HAL_RCC_OscConfig+0x4a4>)
 800d1ec:	68db      	ldr	r3, [r3, #12]
 800d1ee:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6a1b      	ldr	r3, [r3, #32]
 800d1f6:	061b      	lsls	r3, r3, #24
 800d1f8:	497d      	ldr	r1, [pc, #500]	@ (800d3f0 <HAL_RCC_OscConfig+0x4a4>)
 800d1fa:	4313      	orrs	r3, r2
 800d1fc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d1fe:	e040      	b.n	800d282 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	69db      	ldr	r3, [r3, #28]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d023      	beq.n	800d250 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800d208:	4b79      	ldr	r3, [pc, #484]	@ (800d3f0 <HAL_RCC_OscConfig+0x4a4>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	4a78      	ldr	r2, [pc, #480]	@ (800d3f0 <HAL_RCC_OscConfig+0x4a4>)
 800d20e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d212:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d214:	f7fc fc3e 	bl	8009a94 <HAL_GetTick>
 800d218:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d21a:	e008      	b.n	800d22e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d21c:	f7fc fc3a 	bl	8009a94 <HAL_GetTick>
 800d220:	4602      	mov	r2, r0
 800d222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d224:	1ad3      	subs	r3, r2, r3
 800d226:	2b02      	cmp	r3, #2
 800d228:	d901      	bls.n	800d22e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800d22a:	2303      	movs	r3, #3
 800d22c:	e260      	b.n	800d6f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d22e:	4b70      	ldr	r3, [pc, #448]	@ (800d3f0 <HAL_RCC_OscConfig+0x4a4>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d236:	2b00      	cmp	r3, #0
 800d238:	d0f0      	beq.n	800d21c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d23a:	4b6d      	ldr	r3, [pc, #436]	@ (800d3f0 <HAL_RCC_OscConfig+0x4a4>)
 800d23c:	68db      	ldr	r3, [r3, #12]
 800d23e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6a1b      	ldr	r3, [r3, #32]
 800d246:	061b      	lsls	r3, r3, #24
 800d248:	4969      	ldr	r1, [pc, #420]	@ (800d3f0 <HAL_RCC_OscConfig+0x4a4>)
 800d24a:	4313      	orrs	r3, r2
 800d24c:	60cb      	str	r3, [r1, #12]
 800d24e:	e018      	b.n	800d282 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800d250:	4b67      	ldr	r3, [pc, #412]	@ (800d3f0 <HAL_RCC_OscConfig+0x4a4>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	4a66      	ldr	r2, [pc, #408]	@ (800d3f0 <HAL_RCC_OscConfig+0x4a4>)
 800d256:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d25a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d25c:	f7fc fc1a 	bl	8009a94 <HAL_GetTick>
 800d260:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d262:	e008      	b.n	800d276 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d264:	f7fc fc16 	bl	8009a94 <HAL_GetTick>
 800d268:	4602      	mov	r2, r0
 800d26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d26c:	1ad3      	subs	r3, r2, r3
 800d26e:	2b02      	cmp	r3, #2
 800d270:	d901      	bls.n	800d276 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800d272:	2303      	movs	r3, #3
 800d274:	e23c      	b.n	800d6f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d276:	4b5e      	ldr	r3, [pc, #376]	@ (800d3f0 <HAL_RCC_OscConfig+0x4a4>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d1f0      	bne.n	800d264 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	f003 0308 	and.w	r3, r3, #8
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d036      	beq.n	800d2fc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	695b      	ldr	r3, [r3, #20]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d019      	beq.n	800d2ca <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d296:	4b56      	ldr	r3, [pc, #344]	@ (800d3f0 <HAL_RCC_OscConfig+0x4a4>)
 800d298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d29a:	4a55      	ldr	r2, [pc, #340]	@ (800d3f0 <HAL_RCC_OscConfig+0x4a4>)
 800d29c:	f043 0301 	orr.w	r3, r3, #1
 800d2a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d2a2:	f7fc fbf7 	bl	8009a94 <HAL_GetTick>
 800d2a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d2a8:	e008      	b.n	800d2bc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d2aa:	f7fc fbf3 	bl	8009a94 <HAL_GetTick>
 800d2ae:	4602      	mov	r2, r0
 800d2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2b2:	1ad3      	subs	r3, r2, r3
 800d2b4:	2b02      	cmp	r3, #2
 800d2b6:	d901      	bls.n	800d2bc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800d2b8:	2303      	movs	r3, #3
 800d2ba:	e219      	b.n	800d6f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d2bc:	4b4c      	ldr	r3, [pc, #304]	@ (800d3f0 <HAL_RCC_OscConfig+0x4a4>)
 800d2be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d2c0:	f003 0302 	and.w	r3, r3, #2
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d0f0      	beq.n	800d2aa <HAL_RCC_OscConfig+0x35e>
 800d2c8:	e018      	b.n	800d2fc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d2ca:	4b49      	ldr	r3, [pc, #292]	@ (800d3f0 <HAL_RCC_OscConfig+0x4a4>)
 800d2cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d2ce:	4a48      	ldr	r2, [pc, #288]	@ (800d3f0 <HAL_RCC_OscConfig+0x4a4>)
 800d2d0:	f023 0301 	bic.w	r3, r3, #1
 800d2d4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d2d6:	f7fc fbdd 	bl	8009a94 <HAL_GetTick>
 800d2da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d2dc:	e008      	b.n	800d2f0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d2de:	f7fc fbd9 	bl	8009a94 <HAL_GetTick>
 800d2e2:	4602      	mov	r2, r0
 800d2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2e6:	1ad3      	subs	r3, r2, r3
 800d2e8:	2b02      	cmp	r3, #2
 800d2ea:	d901      	bls.n	800d2f0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800d2ec:	2303      	movs	r3, #3
 800d2ee:	e1ff      	b.n	800d6f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d2f0:	4b3f      	ldr	r3, [pc, #252]	@ (800d3f0 <HAL_RCC_OscConfig+0x4a4>)
 800d2f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d2f4:	f003 0302 	and.w	r3, r3, #2
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d1f0      	bne.n	800d2de <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	f003 0320 	and.w	r3, r3, #32
 800d304:	2b00      	cmp	r3, #0
 800d306:	d036      	beq.n	800d376 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	699b      	ldr	r3, [r3, #24]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d019      	beq.n	800d344 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d310:	4b37      	ldr	r3, [pc, #220]	@ (800d3f0 <HAL_RCC_OscConfig+0x4a4>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	4a36      	ldr	r2, [pc, #216]	@ (800d3f0 <HAL_RCC_OscConfig+0x4a4>)
 800d316:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d31a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d31c:	f7fc fbba 	bl	8009a94 <HAL_GetTick>
 800d320:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d322:	e008      	b.n	800d336 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d324:	f7fc fbb6 	bl	8009a94 <HAL_GetTick>
 800d328:	4602      	mov	r2, r0
 800d32a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d32c:	1ad3      	subs	r3, r2, r3
 800d32e:	2b02      	cmp	r3, #2
 800d330:	d901      	bls.n	800d336 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800d332:	2303      	movs	r3, #3
 800d334:	e1dc      	b.n	800d6f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d336:	4b2e      	ldr	r3, [pc, #184]	@ (800d3f0 <HAL_RCC_OscConfig+0x4a4>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d0f0      	beq.n	800d324 <HAL_RCC_OscConfig+0x3d8>
 800d342:	e018      	b.n	800d376 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d344:	4b2a      	ldr	r3, [pc, #168]	@ (800d3f0 <HAL_RCC_OscConfig+0x4a4>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	4a29      	ldr	r2, [pc, #164]	@ (800d3f0 <HAL_RCC_OscConfig+0x4a4>)
 800d34a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d34e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d350:	f7fc fba0 	bl	8009a94 <HAL_GetTick>
 800d354:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d356:	e008      	b.n	800d36a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d358:	f7fc fb9c 	bl	8009a94 <HAL_GetTick>
 800d35c:	4602      	mov	r2, r0
 800d35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d360:	1ad3      	subs	r3, r2, r3
 800d362:	2b02      	cmp	r3, #2
 800d364:	d901      	bls.n	800d36a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800d366:	2303      	movs	r3, #3
 800d368:	e1c2      	b.n	800d6f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d36a:	4b21      	ldr	r3, [pc, #132]	@ (800d3f0 <HAL_RCC_OscConfig+0x4a4>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d372:	2b00      	cmp	r3, #0
 800d374:	d1f0      	bne.n	800d358 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	f003 0304 	and.w	r3, r3, #4
 800d37e:	2b00      	cmp	r3, #0
 800d380:	f000 8086 	beq.w	800d490 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d384:	4b1b      	ldr	r3, [pc, #108]	@ (800d3f4 <HAL_RCC_OscConfig+0x4a8>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	4a1a      	ldr	r2, [pc, #104]	@ (800d3f4 <HAL_RCC_OscConfig+0x4a8>)
 800d38a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d38e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d390:	f7fc fb80 	bl	8009a94 <HAL_GetTick>
 800d394:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d396:	e008      	b.n	800d3aa <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d398:	f7fc fb7c 	bl	8009a94 <HAL_GetTick>
 800d39c:	4602      	mov	r2, r0
 800d39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3a0:	1ad3      	subs	r3, r2, r3
 800d3a2:	2b64      	cmp	r3, #100	@ 0x64
 800d3a4:	d901      	bls.n	800d3aa <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800d3a6:	2303      	movs	r3, #3
 800d3a8:	e1a2      	b.n	800d6f0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d3aa:	4b12      	ldr	r3, [pc, #72]	@ (800d3f4 <HAL_RCC_OscConfig+0x4a8>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d0f0      	beq.n	800d398 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	689b      	ldr	r3, [r3, #8]
 800d3ba:	2b01      	cmp	r3, #1
 800d3bc:	d106      	bne.n	800d3cc <HAL_RCC_OscConfig+0x480>
 800d3be:	4b0c      	ldr	r3, [pc, #48]	@ (800d3f0 <HAL_RCC_OscConfig+0x4a4>)
 800d3c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3c2:	4a0b      	ldr	r2, [pc, #44]	@ (800d3f0 <HAL_RCC_OscConfig+0x4a4>)
 800d3c4:	f043 0301 	orr.w	r3, r3, #1
 800d3c8:	6713      	str	r3, [r2, #112]	@ 0x70
 800d3ca:	e032      	b.n	800d432 <HAL_RCC_OscConfig+0x4e6>
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	689b      	ldr	r3, [r3, #8]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d111      	bne.n	800d3f8 <HAL_RCC_OscConfig+0x4ac>
 800d3d4:	4b06      	ldr	r3, [pc, #24]	@ (800d3f0 <HAL_RCC_OscConfig+0x4a4>)
 800d3d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3d8:	4a05      	ldr	r2, [pc, #20]	@ (800d3f0 <HAL_RCC_OscConfig+0x4a4>)
 800d3da:	f023 0301 	bic.w	r3, r3, #1
 800d3de:	6713      	str	r3, [r2, #112]	@ 0x70
 800d3e0:	4b03      	ldr	r3, [pc, #12]	@ (800d3f0 <HAL_RCC_OscConfig+0x4a4>)
 800d3e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3e4:	4a02      	ldr	r2, [pc, #8]	@ (800d3f0 <HAL_RCC_OscConfig+0x4a4>)
 800d3e6:	f023 0304 	bic.w	r3, r3, #4
 800d3ea:	6713      	str	r3, [r2, #112]	@ 0x70
 800d3ec:	e021      	b.n	800d432 <HAL_RCC_OscConfig+0x4e6>
 800d3ee:	bf00      	nop
 800d3f0:	58024400 	.word	0x58024400
 800d3f4:	58024800 	.word	0x58024800
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	689b      	ldr	r3, [r3, #8]
 800d3fc:	2b05      	cmp	r3, #5
 800d3fe:	d10c      	bne.n	800d41a <HAL_RCC_OscConfig+0x4ce>
 800d400:	4b83      	ldr	r3, [pc, #524]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d404:	4a82      	ldr	r2, [pc, #520]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d406:	f043 0304 	orr.w	r3, r3, #4
 800d40a:	6713      	str	r3, [r2, #112]	@ 0x70
 800d40c:	4b80      	ldr	r3, [pc, #512]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d40e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d410:	4a7f      	ldr	r2, [pc, #508]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d412:	f043 0301 	orr.w	r3, r3, #1
 800d416:	6713      	str	r3, [r2, #112]	@ 0x70
 800d418:	e00b      	b.n	800d432 <HAL_RCC_OscConfig+0x4e6>
 800d41a:	4b7d      	ldr	r3, [pc, #500]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d41c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d41e:	4a7c      	ldr	r2, [pc, #496]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d420:	f023 0301 	bic.w	r3, r3, #1
 800d424:	6713      	str	r3, [r2, #112]	@ 0x70
 800d426:	4b7a      	ldr	r3, [pc, #488]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d42a:	4a79      	ldr	r2, [pc, #484]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d42c:	f023 0304 	bic.w	r3, r3, #4
 800d430:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	689b      	ldr	r3, [r3, #8]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d015      	beq.n	800d466 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d43a:	f7fc fb2b 	bl	8009a94 <HAL_GetTick>
 800d43e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d440:	e00a      	b.n	800d458 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d442:	f7fc fb27 	bl	8009a94 <HAL_GetTick>
 800d446:	4602      	mov	r2, r0
 800d448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d44a:	1ad3      	subs	r3, r2, r3
 800d44c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d450:	4293      	cmp	r3, r2
 800d452:	d901      	bls.n	800d458 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800d454:	2303      	movs	r3, #3
 800d456:	e14b      	b.n	800d6f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d458:	4b6d      	ldr	r3, [pc, #436]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d45a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d45c:	f003 0302 	and.w	r3, r3, #2
 800d460:	2b00      	cmp	r3, #0
 800d462:	d0ee      	beq.n	800d442 <HAL_RCC_OscConfig+0x4f6>
 800d464:	e014      	b.n	800d490 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d466:	f7fc fb15 	bl	8009a94 <HAL_GetTick>
 800d46a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d46c:	e00a      	b.n	800d484 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d46e:	f7fc fb11 	bl	8009a94 <HAL_GetTick>
 800d472:	4602      	mov	r2, r0
 800d474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d476:	1ad3      	subs	r3, r2, r3
 800d478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d901      	bls.n	800d484 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800d480:	2303      	movs	r3, #3
 800d482:	e135      	b.n	800d6f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d484:	4b62      	ldr	r3, [pc, #392]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d488:	f003 0302 	and.w	r3, r3, #2
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d1ee      	bne.n	800d46e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d494:	2b00      	cmp	r3, #0
 800d496:	f000 812a 	beq.w	800d6ee <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800d49a:	4b5d      	ldr	r3, [pc, #372]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d49c:	691b      	ldr	r3, [r3, #16]
 800d49e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d4a2:	2b18      	cmp	r3, #24
 800d4a4:	f000 80ba 	beq.w	800d61c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4ac:	2b02      	cmp	r3, #2
 800d4ae:	f040 8095 	bne.w	800d5dc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d4b2:	4b57      	ldr	r3, [pc, #348]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	4a56      	ldr	r2, [pc, #344]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d4b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d4bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d4be:	f7fc fae9 	bl	8009a94 <HAL_GetTick>
 800d4c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d4c4:	e008      	b.n	800d4d8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d4c6:	f7fc fae5 	bl	8009a94 <HAL_GetTick>
 800d4ca:	4602      	mov	r2, r0
 800d4cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ce:	1ad3      	subs	r3, r2, r3
 800d4d0:	2b02      	cmp	r3, #2
 800d4d2:	d901      	bls.n	800d4d8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800d4d4:	2303      	movs	r3, #3
 800d4d6:	e10b      	b.n	800d6f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d4d8:	4b4d      	ldr	r3, [pc, #308]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d1f0      	bne.n	800d4c6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d4e4:	4b4a      	ldr	r3, [pc, #296]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d4e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d4e8:	4b4a      	ldr	r3, [pc, #296]	@ (800d614 <HAL_RCC_OscConfig+0x6c8>)
 800d4ea:	4013      	ands	r3, r2
 800d4ec:	687a      	ldr	r2, [r7, #4]
 800d4ee:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800d4f0:	687a      	ldr	r2, [r7, #4]
 800d4f2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d4f4:	0112      	lsls	r2, r2, #4
 800d4f6:	430a      	orrs	r2, r1
 800d4f8:	4945      	ldr	r1, [pc, #276]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d4fa:	4313      	orrs	r3, r2
 800d4fc:	628b      	str	r3, [r1, #40]	@ 0x28
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d502:	3b01      	subs	r3, #1
 800d504:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d50c:	3b01      	subs	r3, #1
 800d50e:	025b      	lsls	r3, r3, #9
 800d510:	b29b      	uxth	r3, r3
 800d512:	431a      	orrs	r2, r3
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d518:	3b01      	subs	r3, #1
 800d51a:	041b      	lsls	r3, r3, #16
 800d51c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d520:	431a      	orrs	r2, r3
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d526:	3b01      	subs	r3, #1
 800d528:	061b      	lsls	r3, r3, #24
 800d52a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d52e:	4938      	ldr	r1, [pc, #224]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d530:	4313      	orrs	r3, r2
 800d532:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800d534:	4b36      	ldr	r3, [pc, #216]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d538:	4a35      	ldr	r2, [pc, #212]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d53a:	f023 0301 	bic.w	r3, r3, #1
 800d53e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d540:	4b33      	ldr	r3, [pc, #204]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d542:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d544:	4b34      	ldr	r3, [pc, #208]	@ (800d618 <HAL_RCC_OscConfig+0x6cc>)
 800d546:	4013      	ands	r3, r2
 800d548:	687a      	ldr	r2, [r7, #4]
 800d54a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d54c:	00d2      	lsls	r2, r2, #3
 800d54e:	4930      	ldr	r1, [pc, #192]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d550:	4313      	orrs	r3, r2
 800d552:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800d554:	4b2e      	ldr	r3, [pc, #184]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d558:	f023 020c 	bic.w	r2, r3, #12
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d560:	492b      	ldr	r1, [pc, #172]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d562:	4313      	orrs	r3, r2
 800d564:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800d566:	4b2a      	ldr	r3, [pc, #168]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d56a:	f023 0202 	bic.w	r2, r3, #2
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d572:	4927      	ldr	r1, [pc, #156]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d574:	4313      	orrs	r3, r2
 800d576:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d578:	4b25      	ldr	r3, [pc, #148]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d57a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d57c:	4a24      	ldr	r2, [pc, #144]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d57e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d582:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d584:	4b22      	ldr	r3, [pc, #136]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d588:	4a21      	ldr	r2, [pc, #132]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d58a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d58e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d590:	4b1f      	ldr	r3, [pc, #124]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d594:	4a1e      	ldr	r2, [pc, #120]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d596:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d59a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800d59c:	4b1c      	ldr	r3, [pc, #112]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d59e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5a0:	4a1b      	ldr	r2, [pc, #108]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d5a2:	f043 0301 	orr.w	r3, r3, #1
 800d5a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d5a8:	4b19      	ldr	r3, [pc, #100]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	4a18      	ldr	r2, [pc, #96]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d5ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d5b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d5b4:	f7fc fa6e 	bl	8009a94 <HAL_GetTick>
 800d5b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d5ba:	e008      	b.n	800d5ce <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d5bc:	f7fc fa6a 	bl	8009a94 <HAL_GetTick>
 800d5c0:	4602      	mov	r2, r0
 800d5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5c4:	1ad3      	subs	r3, r2, r3
 800d5c6:	2b02      	cmp	r3, #2
 800d5c8:	d901      	bls.n	800d5ce <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800d5ca:	2303      	movs	r3, #3
 800d5cc:	e090      	b.n	800d6f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d5ce:	4b10      	ldr	r3, [pc, #64]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d0f0      	beq.n	800d5bc <HAL_RCC_OscConfig+0x670>
 800d5da:	e088      	b.n	800d6ee <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d5dc:	4b0c      	ldr	r3, [pc, #48]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	4a0b      	ldr	r2, [pc, #44]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d5e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d5e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d5e8:	f7fc fa54 	bl	8009a94 <HAL_GetTick>
 800d5ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d5ee:	e008      	b.n	800d602 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d5f0:	f7fc fa50 	bl	8009a94 <HAL_GetTick>
 800d5f4:	4602      	mov	r2, r0
 800d5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5f8:	1ad3      	subs	r3, r2, r3
 800d5fa:	2b02      	cmp	r3, #2
 800d5fc:	d901      	bls.n	800d602 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800d5fe:	2303      	movs	r3, #3
 800d600:	e076      	b.n	800d6f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d602:	4b03      	ldr	r3, [pc, #12]	@ (800d610 <HAL_RCC_OscConfig+0x6c4>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d1f0      	bne.n	800d5f0 <HAL_RCC_OscConfig+0x6a4>
 800d60e:	e06e      	b.n	800d6ee <HAL_RCC_OscConfig+0x7a2>
 800d610:	58024400 	.word	0x58024400
 800d614:	fffffc0c 	.word	0xfffffc0c
 800d618:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d61c:	4b36      	ldr	r3, [pc, #216]	@ (800d6f8 <HAL_RCC_OscConfig+0x7ac>)
 800d61e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d620:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d622:	4b35      	ldr	r3, [pc, #212]	@ (800d6f8 <HAL_RCC_OscConfig+0x7ac>)
 800d624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d626:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d62c:	2b01      	cmp	r3, #1
 800d62e:	d031      	beq.n	800d694 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d630:	693b      	ldr	r3, [r7, #16]
 800d632:	f003 0203 	and.w	r2, r3, #3
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d63a:	429a      	cmp	r2, r3
 800d63c:	d12a      	bne.n	800d694 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d63e:	693b      	ldr	r3, [r7, #16]
 800d640:	091b      	lsrs	r3, r3, #4
 800d642:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d64a:	429a      	cmp	r2, r3
 800d64c:	d122      	bne.n	800d694 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d658:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d65a:	429a      	cmp	r2, r3
 800d65c:	d11a      	bne.n	800d694 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	0a5b      	lsrs	r3, r3, #9
 800d662:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d66a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d111      	bne.n	800d694 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	0c1b      	lsrs	r3, r3, #16
 800d674:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d67c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d67e:	429a      	cmp	r2, r3
 800d680:	d108      	bne.n	800d694 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	0e1b      	lsrs	r3, r3, #24
 800d686:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d68e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d690:	429a      	cmp	r2, r3
 800d692:	d001      	beq.n	800d698 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800d694:	2301      	movs	r3, #1
 800d696:	e02b      	b.n	800d6f0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800d698:	4b17      	ldr	r3, [pc, #92]	@ (800d6f8 <HAL_RCC_OscConfig+0x7ac>)
 800d69a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d69c:	08db      	lsrs	r3, r3, #3
 800d69e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d6a2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d6a8:	693a      	ldr	r2, [r7, #16]
 800d6aa:	429a      	cmp	r2, r3
 800d6ac:	d01f      	beq.n	800d6ee <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800d6ae:	4b12      	ldr	r3, [pc, #72]	@ (800d6f8 <HAL_RCC_OscConfig+0x7ac>)
 800d6b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6b2:	4a11      	ldr	r2, [pc, #68]	@ (800d6f8 <HAL_RCC_OscConfig+0x7ac>)
 800d6b4:	f023 0301 	bic.w	r3, r3, #1
 800d6b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d6ba:	f7fc f9eb 	bl	8009a94 <HAL_GetTick>
 800d6be:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800d6c0:	bf00      	nop
 800d6c2:	f7fc f9e7 	bl	8009a94 <HAL_GetTick>
 800d6c6:	4602      	mov	r2, r0
 800d6c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6ca:	4293      	cmp	r3, r2
 800d6cc:	d0f9      	beq.n	800d6c2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d6ce:	4b0a      	ldr	r3, [pc, #40]	@ (800d6f8 <HAL_RCC_OscConfig+0x7ac>)
 800d6d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d6d2:	4b0a      	ldr	r3, [pc, #40]	@ (800d6fc <HAL_RCC_OscConfig+0x7b0>)
 800d6d4:	4013      	ands	r3, r2
 800d6d6:	687a      	ldr	r2, [r7, #4]
 800d6d8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d6da:	00d2      	lsls	r2, r2, #3
 800d6dc:	4906      	ldr	r1, [pc, #24]	@ (800d6f8 <HAL_RCC_OscConfig+0x7ac>)
 800d6de:	4313      	orrs	r3, r2
 800d6e0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800d6e2:	4b05      	ldr	r3, [pc, #20]	@ (800d6f8 <HAL_RCC_OscConfig+0x7ac>)
 800d6e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6e6:	4a04      	ldr	r2, [pc, #16]	@ (800d6f8 <HAL_RCC_OscConfig+0x7ac>)
 800d6e8:	f043 0301 	orr.w	r3, r3, #1
 800d6ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800d6ee:	2300      	movs	r3, #0
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3730      	adds	r7, #48	@ 0x30
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}
 800d6f8:	58024400 	.word	0x58024400
 800d6fc:	ffff0007 	.word	0xffff0007

0800d700 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b086      	sub	sp, #24
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
 800d708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d101      	bne.n	800d714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d710:	2301      	movs	r3, #1
 800d712:	e19c      	b.n	800da4e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d714:	4b8a      	ldr	r3, [pc, #552]	@ (800d940 <HAL_RCC_ClockConfig+0x240>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	f003 030f 	and.w	r3, r3, #15
 800d71c:	683a      	ldr	r2, [r7, #0]
 800d71e:	429a      	cmp	r2, r3
 800d720:	d910      	bls.n	800d744 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d722:	4b87      	ldr	r3, [pc, #540]	@ (800d940 <HAL_RCC_ClockConfig+0x240>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	f023 020f 	bic.w	r2, r3, #15
 800d72a:	4985      	ldr	r1, [pc, #532]	@ (800d940 <HAL_RCC_ClockConfig+0x240>)
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	4313      	orrs	r3, r2
 800d730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d732:	4b83      	ldr	r3, [pc, #524]	@ (800d940 <HAL_RCC_ClockConfig+0x240>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	f003 030f 	and.w	r3, r3, #15
 800d73a:	683a      	ldr	r2, [r7, #0]
 800d73c:	429a      	cmp	r2, r3
 800d73e:	d001      	beq.n	800d744 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d740:	2301      	movs	r3, #1
 800d742:	e184      	b.n	800da4e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	f003 0304 	and.w	r3, r3, #4
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d010      	beq.n	800d772 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	691a      	ldr	r2, [r3, #16]
 800d754:	4b7b      	ldr	r3, [pc, #492]	@ (800d944 <HAL_RCC_ClockConfig+0x244>)
 800d756:	699b      	ldr	r3, [r3, #24]
 800d758:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d75c:	429a      	cmp	r2, r3
 800d75e:	d908      	bls.n	800d772 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d760:	4b78      	ldr	r3, [pc, #480]	@ (800d944 <HAL_RCC_ClockConfig+0x244>)
 800d762:	699b      	ldr	r3, [r3, #24]
 800d764:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	691b      	ldr	r3, [r3, #16]
 800d76c:	4975      	ldr	r1, [pc, #468]	@ (800d944 <HAL_RCC_ClockConfig+0x244>)
 800d76e:	4313      	orrs	r3, r2
 800d770:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	f003 0308 	and.w	r3, r3, #8
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d010      	beq.n	800d7a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	695a      	ldr	r2, [r3, #20]
 800d782:	4b70      	ldr	r3, [pc, #448]	@ (800d944 <HAL_RCC_ClockConfig+0x244>)
 800d784:	69db      	ldr	r3, [r3, #28]
 800d786:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d78a:	429a      	cmp	r2, r3
 800d78c:	d908      	bls.n	800d7a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d78e:	4b6d      	ldr	r3, [pc, #436]	@ (800d944 <HAL_RCC_ClockConfig+0x244>)
 800d790:	69db      	ldr	r3, [r3, #28]
 800d792:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	695b      	ldr	r3, [r3, #20]
 800d79a:	496a      	ldr	r1, [pc, #424]	@ (800d944 <HAL_RCC_ClockConfig+0x244>)
 800d79c:	4313      	orrs	r3, r2
 800d79e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	f003 0310 	and.w	r3, r3, #16
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d010      	beq.n	800d7ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	699a      	ldr	r2, [r3, #24]
 800d7b0:	4b64      	ldr	r3, [pc, #400]	@ (800d944 <HAL_RCC_ClockConfig+0x244>)
 800d7b2:	69db      	ldr	r3, [r3, #28]
 800d7b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d908      	bls.n	800d7ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d7bc:	4b61      	ldr	r3, [pc, #388]	@ (800d944 <HAL_RCC_ClockConfig+0x244>)
 800d7be:	69db      	ldr	r3, [r3, #28]
 800d7c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	699b      	ldr	r3, [r3, #24]
 800d7c8:	495e      	ldr	r1, [pc, #376]	@ (800d944 <HAL_RCC_ClockConfig+0x244>)
 800d7ca:	4313      	orrs	r3, r2
 800d7cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	f003 0320 	and.w	r3, r3, #32
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d010      	beq.n	800d7fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	69da      	ldr	r2, [r3, #28]
 800d7de:	4b59      	ldr	r3, [pc, #356]	@ (800d944 <HAL_RCC_ClockConfig+0x244>)
 800d7e0:	6a1b      	ldr	r3, [r3, #32]
 800d7e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	d908      	bls.n	800d7fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d7ea:	4b56      	ldr	r3, [pc, #344]	@ (800d944 <HAL_RCC_ClockConfig+0x244>)
 800d7ec:	6a1b      	ldr	r3, [r3, #32]
 800d7ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	69db      	ldr	r3, [r3, #28]
 800d7f6:	4953      	ldr	r1, [pc, #332]	@ (800d944 <HAL_RCC_ClockConfig+0x244>)
 800d7f8:	4313      	orrs	r3, r2
 800d7fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	f003 0302 	and.w	r3, r3, #2
 800d804:	2b00      	cmp	r3, #0
 800d806:	d010      	beq.n	800d82a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	68da      	ldr	r2, [r3, #12]
 800d80c:	4b4d      	ldr	r3, [pc, #308]	@ (800d944 <HAL_RCC_ClockConfig+0x244>)
 800d80e:	699b      	ldr	r3, [r3, #24]
 800d810:	f003 030f 	and.w	r3, r3, #15
 800d814:	429a      	cmp	r2, r3
 800d816:	d908      	bls.n	800d82a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d818:	4b4a      	ldr	r3, [pc, #296]	@ (800d944 <HAL_RCC_ClockConfig+0x244>)
 800d81a:	699b      	ldr	r3, [r3, #24]
 800d81c:	f023 020f 	bic.w	r2, r3, #15
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	68db      	ldr	r3, [r3, #12]
 800d824:	4947      	ldr	r1, [pc, #284]	@ (800d944 <HAL_RCC_ClockConfig+0x244>)
 800d826:	4313      	orrs	r3, r2
 800d828:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	f003 0301 	and.w	r3, r3, #1
 800d832:	2b00      	cmp	r3, #0
 800d834:	d055      	beq.n	800d8e2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d836:	4b43      	ldr	r3, [pc, #268]	@ (800d944 <HAL_RCC_ClockConfig+0x244>)
 800d838:	699b      	ldr	r3, [r3, #24]
 800d83a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	689b      	ldr	r3, [r3, #8]
 800d842:	4940      	ldr	r1, [pc, #256]	@ (800d944 <HAL_RCC_ClockConfig+0x244>)
 800d844:	4313      	orrs	r3, r2
 800d846:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	685b      	ldr	r3, [r3, #4]
 800d84c:	2b02      	cmp	r3, #2
 800d84e:	d107      	bne.n	800d860 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d850:	4b3c      	ldr	r3, [pc, #240]	@ (800d944 <HAL_RCC_ClockConfig+0x244>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d121      	bne.n	800d8a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d85c:	2301      	movs	r3, #1
 800d85e:	e0f6      	b.n	800da4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	685b      	ldr	r3, [r3, #4]
 800d864:	2b03      	cmp	r3, #3
 800d866:	d107      	bne.n	800d878 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d868:	4b36      	ldr	r3, [pc, #216]	@ (800d944 <HAL_RCC_ClockConfig+0x244>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d870:	2b00      	cmp	r3, #0
 800d872:	d115      	bne.n	800d8a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d874:	2301      	movs	r3, #1
 800d876:	e0ea      	b.n	800da4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	685b      	ldr	r3, [r3, #4]
 800d87c:	2b01      	cmp	r3, #1
 800d87e:	d107      	bne.n	800d890 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d880:	4b30      	ldr	r3, [pc, #192]	@ (800d944 <HAL_RCC_ClockConfig+0x244>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d109      	bne.n	800d8a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d88c:	2301      	movs	r3, #1
 800d88e:	e0de      	b.n	800da4e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d890:	4b2c      	ldr	r3, [pc, #176]	@ (800d944 <HAL_RCC_ClockConfig+0x244>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	f003 0304 	and.w	r3, r3, #4
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d101      	bne.n	800d8a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d89c:	2301      	movs	r3, #1
 800d89e:	e0d6      	b.n	800da4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d8a0:	4b28      	ldr	r3, [pc, #160]	@ (800d944 <HAL_RCC_ClockConfig+0x244>)
 800d8a2:	691b      	ldr	r3, [r3, #16]
 800d8a4:	f023 0207 	bic.w	r2, r3, #7
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	685b      	ldr	r3, [r3, #4]
 800d8ac:	4925      	ldr	r1, [pc, #148]	@ (800d944 <HAL_RCC_ClockConfig+0x244>)
 800d8ae:	4313      	orrs	r3, r2
 800d8b0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d8b2:	f7fc f8ef 	bl	8009a94 <HAL_GetTick>
 800d8b6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d8b8:	e00a      	b.n	800d8d0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d8ba:	f7fc f8eb 	bl	8009a94 <HAL_GetTick>
 800d8be:	4602      	mov	r2, r0
 800d8c0:	697b      	ldr	r3, [r7, #20]
 800d8c2:	1ad3      	subs	r3, r2, r3
 800d8c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d8c8:	4293      	cmp	r3, r2
 800d8ca:	d901      	bls.n	800d8d0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800d8cc:	2303      	movs	r3, #3
 800d8ce:	e0be      	b.n	800da4e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d8d0:	4b1c      	ldr	r3, [pc, #112]	@ (800d944 <HAL_RCC_ClockConfig+0x244>)
 800d8d2:	691b      	ldr	r3, [r3, #16]
 800d8d4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	685b      	ldr	r3, [r3, #4]
 800d8dc:	00db      	lsls	r3, r3, #3
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	d1eb      	bne.n	800d8ba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	f003 0302 	and.w	r3, r3, #2
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d010      	beq.n	800d910 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	68da      	ldr	r2, [r3, #12]
 800d8f2:	4b14      	ldr	r3, [pc, #80]	@ (800d944 <HAL_RCC_ClockConfig+0x244>)
 800d8f4:	699b      	ldr	r3, [r3, #24]
 800d8f6:	f003 030f 	and.w	r3, r3, #15
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d208      	bcs.n	800d910 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d8fe:	4b11      	ldr	r3, [pc, #68]	@ (800d944 <HAL_RCC_ClockConfig+0x244>)
 800d900:	699b      	ldr	r3, [r3, #24]
 800d902:	f023 020f 	bic.w	r2, r3, #15
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	68db      	ldr	r3, [r3, #12]
 800d90a:	490e      	ldr	r1, [pc, #56]	@ (800d944 <HAL_RCC_ClockConfig+0x244>)
 800d90c:	4313      	orrs	r3, r2
 800d90e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d910:	4b0b      	ldr	r3, [pc, #44]	@ (800d940 <HAL_RCC_ClockConfig+0x240>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f003 030f 	and.w	r3, r3, #15
 800d918:	683a      	ldr	r2, [r7, #0]
 800d91a:	429a      	cmp	r2, r3
 800d91c:	d214      	bcs.n	800d948 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d91e:	4b08      	ldr	r3, [pc, #32]	@ (800d940 <HAL_RCC_ClockConfig+0x240>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	f023 020f 	bic.w	r2, r3, #15
 800d926:	4906      	ldr	r1, [pc, #24]	@ (800d940 <HAL_RCC_ClockConfig+0x240>)
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	4313      	orrs	r3, r2
 800d92c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d92e:	4b04      	ldr	r3, [pc, #16]	@ (800d940 <HAL_RCC_ClockConfig+0x240>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	f003 030f 	and.w	r3, r3, #15
 800d936:	683a      	ldr	r2, [r7, #0]
 800d938:	429a      	cmp	r2, r3
 800d93a:	d005      	beq.n	800d948 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800d93c:	2301      	movs	r3, #1
 800d93e:	e086      	b.n	800da4e <HAL_RCC_ClockConfig+0x34e>
 800d940:	52002000 	.word	0x52002000
 800d944:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	f003 0304 	and.w	r3, r3, #4
 800d950:	2b00      	cmp	r3, #0
 800d952:	d010      	beq.n	800d976 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	691a      	ldr	r2, [r3, #16]
 800d958:	4b3f      	ldr	r3, [pc, #252]	@ (800da58 <HAL_RCC_ClockConfig+0x358>)
 800d95a:	699b      	ldr	r3, [r3, #24]
 800d95c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d960:	429a      	cmp	r2, r3
 800d962:	d208      	bcs.n	800d976 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d964:	4b3c      	ldr	r3, [pc, #240]	@ (800da58 <HAL_RCC_ClockConfig+0x358>)
 800d966:	699b      	ldr	r3, [r3, #24]
 800d968:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	691b      	ldr	r3, [r3, #16]
 800d970:	4939      	ldr	r1, [pc, #228]	@ (800da58 <HAL_RCC_ClockConfig+0x358>)
 800d972:	4313      	orrs	r3, r2
 800d974:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	f003 0308 	and.w	r3, r3, #8
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d010      	beq.n	800d9a4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	695a      	ldr	r2, [r3, #20]
 800d986:	4b34      	ldr	r3, [pc, #208]	@ (800da58 <HAL_RCC_ClockConfig+0x358>)
 800d988:	69db      	ldr	r3, [r3, #28]
 800d98a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d98e:	429a      	cmp	r2, r3
 800d990:	d208      	bcs.n	800d9a4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d992:	4b31      	ldr	r3, [pc, #196]	@ (800da58 <HAL_RCC_ClockConfig+0x358>)
 800d994:	69db      	ldr	r3, [r3, #28]
 800d996:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	695b      	ldr	r3, [r3, #20]
 800d99e:	492e      	ldr	r1, [pc, #184]	@ (800da58 <HAL_RCC_ClockConfig+0x358>)
 800d9a0:	4313      	orrs	r3, r2
 800d9a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	f003 0310 	and.w	r3, r3, #16
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d010      	beq.n	800d9d2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	699a      	ldr	r2, [r3, #24]
 800d9b4:	4b28      	ldr	r3, [pc, #160]	@ (800da58 <HAL_RCC_ClockConfig+0x358>)
 800d9b6:	69db      	ldr	r3, [r3, #28]
 800d9b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d9bc:	429a      	cmp	r2, r3
 800d9be:	d208      	bcs.n	800d9d2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d9c0:	4b25      	ldr	r3, [pc, #148]	@ (800da58 <HAL_RCC_ClockConfig+0x358>)
 800d9c2:	69db      	ldr	r3, [r3, #28]
 800d9c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	699b      	ldr	r3, [r3, #24]
 800d9cc:	4922      	ldr	r1, [pc, #136]	@ (800da58 <HAL_RCC_ClockConfig+0x358>)
 800d9ce:	4313      	orrs	r3, r2
 800d9d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	f003 0320 	and.w	r3, r3, #32
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d010      	beq.n	800da00 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	69da      	ldr	r2, [r3, #28]
 800d9e2:	4b1d      	ldr	r3, [pc, #116]	@ (800da58 <HAL_RCC_ClockConfig+0x358>)
 800d9e4:	6a1b      	ldr	r3, [r3, #32]
 800d9e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d208      	bcs.n	800da00 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d9ee:	4b1a      	ldr	r3, [pc, #104]	@ (800da58 <HAL_RCC_ClockConfig+0x358>)
 800d9f0:	6a1b      	ldr	r3, [r3, #32]
 800d9f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	69db      	ldr	r3, [r3, #28]
 800d9fa:	4917      	ldr	r1, [pc, #92]	@ (800da58 <HAL_RCC_ClockConfig+0x358>)
 800d9fc:	4313      	orrs	r3, r2
 800d9fe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800da00:	f000 f834 	bl	800da6c <HAL_RCC_GetSysClockFreq>
 800da04:	4602      	mov	r2, r0
 800da06:	4b14      	ldr	r3, [pc, #80]	@ (800da58 <HAL_RCC_ClockConfig+0x358>)
 800da08:	699b      	ldr	r3, [r3, #24]
 800da0a:	0a1b      	lsrs	r3, r3, #8
 800da0c:	f003 030f 	and.w	r3, r3, #15
 800da10:	4912      	ldr	r1, [pc, #72]	@ (800da5c <HAL_RCC_ClockConfig+0x35c>)
 800da12:	5ccb      	ldrb	r3, [r1, r3]
 800da14:	f003 031f 	and.w	r3, r3, #31
 800da18:	fa22 f303 	lsr.w	r3, r2, r3
 800da1c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800da1e:	4b0e      	ldr	r3, [pc, #56]	@ (800da58 <HAL_RCC_ClockConfig+0x358>)
 800da20:	699b      	ldr	r3, [r3, #24]
 800da22:	f003 030f 	and.w	r3, r3, #15
 800da26:	4a0d      	ldr	r2, [pc, #52]	@ (800da5c <HAL_RCC_ClockConfig+0x35c>)
 800da28:	5cd3      	ldrb	r3, [r2, r3]
 800da2a:	f003 031f 	and.w	r3, r3, #31
 800da2e:	693a      	ldr	r2, [r7, #16]
 800da30:	fa22 f303 	lsr.w	r3, r2, r3
 800da34:	4a0a      	ldr	r2, [pc, #40]	@ (800da60 <HAL_RCC_ClockConfig+0x360>)
 800da36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800da38:	4a0a      	ldr	r2, [pc, #40]	@ (800da64 <HAL_RCC_ClockConfig+0x364>)
 800da3a:	693b      	ldr	r3, [r7, #16]
 800da3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800da3e:	4b0a      	ldr	r3, [pc, #40]	@ (800da68 <HAL_RCC_ClockConfig+0x368>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	4618      	mov	r0, r3
 800da44:	f7fb ffdc 	bl	8009a00 <HAL_InitTick>
 800da48:	4603      	mov	r3, r0
 800da4a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800da4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3718      	adds	r7, #24
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}
 800da56:	bf00      	nop
 800da58:	58024400 	.word	0x58024400
 800da5c:	0802e310 	.word	0x0802e310
 800da60:	2400005c 	.word	0x2400005c
 800da64:	24000058 	.word	0x24000058
 800da68:	24000060 	.word	0x24000060

0800da6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800da6c:	b480      	push	{r7}
 800da6e:	b089      	sub	sp, #36	@ 0x24
 800da70:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800da72:	4bb3      	ldr	r3, [pc, #716]	@ (800dd40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800da74:	691b      	ldr	r3, [r3, #16]
 800da76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800da7a:	2b18      	cmp	r3, #24
 800da7c:	f200 8155 	bhi.w	800dd2a <HAL_RCC_GetSysClockFreq+0x2be>
 800da80:	a201      	add	r2, pc, #4	@ (adr r2, 800da88 <HAL_RCC_GetSysClockFreq+0x1c>)
 800da82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da86:	bf00      	nop
 800da88:	0800daed 	.word	0x0800daed
 800da8c:	0800dd2b 	.word	0x0800dd2b
 800da90:	0800dd2b 	.word	0x0800dd2b
 800da94:	0800dd2b 	.word	0x0800dd2b
 800da98:	0800dd2b 	.word	0x0800dd2b
 800da9c:	0800dd2b 	.word	0x0800dd2b
 800daa0:	0800dd2b 	.word	0x0800dd2b
 800daa4:	0800dd2b 	.word	0x0800dd2b
 800daa8:	0800db13 	.word	0x0800db13
 800daac:	0800dd2b 	.word	0x0800dd2b
 800dab0:	0800dd2b 	.word	0x0800dd2b
 800dab4:	0800dd2b 	.word	0x0800dd2b
 800dab8:	0800dd2b 	.word	0x0800dd2b
 800dabc:	0800dd2b 	.word	0x0800dd2b
 800dac0:	0800dd2b 	.word	0x0800dd2b
 800dac4:	0800dd2b 	.word	0x0800dd2b
 800dac8:	0800db19 	.word	0x0800db19
 800dacc:	0800dd2b 	.word	0x0800dd2b
 800dad0:	0800dd2b 	.word	0x0800dd2b
 800dad4:	0800dd2b 	.word	0x0800dd2b
 800dad8:	0800dd2b 	.word	0x0800dd2b
 800dadc:	0800dd2b 	.word	0x0800dd2b
 800dae0:	0800dd2b 	.word	0x0800dd2b
 800dae4:	0800dd2b 	.word	0x0800dd2b
 800dae8:	0800db1f 	.word	0x0800db1f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800daec:	4b94      	ldr	r3, [pc, #592]	@ (800dd40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	f003 0320 	and.w	r3, r3, #32
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d009      	beq.n	800db0c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800daf8:	4b91      	ldr	r3, [pc, #580]	@ (800dd40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	08db      	lsrs	r3, r3, #3
 800dafe:	f003 0303 	and.w	r3, r3, #3
 800db02:	4a90      	ldr	r2, [pc, #576]	@ (800dd44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800db04:	fa22 f303 	lsr.w	r3, r2, r3
 800db08:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800db0a:	e111      	b.n	800dd30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800db0c:	4b8d      	ldr	r3, [pc, #564]	@ (800dd44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800db0e:	61bb      	str	r3, [r7, #24]
      break;
 800db10:	e10e      	b.n	800dd30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800db12:	4b8d      	ldr	r3, [pc, #564]	@ (800dd48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800db14:	61bb      	str	r3, [r7, #24]
      break;
 800db16:	e10b      	b.n	800dd30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800db18:	4b8c      	ldr	r3, [pc, #560]	@ (800dd4c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800db1a:	61bb      	str	r3, [r7, #24]
      break;
 800db1c:	e108      	b.n	800dd30 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800db1e:	4b88      	ldr	r3, [pc, #544]	@ (800dd40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800db20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db22:	f003 0303 	and.w	r3, r3, #3
 800db26:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800db28:	4b85      	ldr	r3, [pc, #532]	@ (800dd40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800db2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db2c:	091b      	lsrs	r3, r3, #4
 800db2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800db32:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800db34:	4b82      	ldr	r3, [pc, #520]	@ (800dd40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800db36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db38:	f003 0301 	and.w	r3, r3, #1
 800db3c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800db3e:	4b80      	ldr	r3, [pc, #512]	@ (800dd40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800db40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db42:	08db      	lsrs	r3, r3, #3
 800db44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800db48:	68fa      	ldr	r2, [r7, #12]
 800db4a:	fb02 f303 	mul.w	r3, r2, r3
 800db4e:	ee07 3a90 	vmov	s15, r3
 800db52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db56:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800db5a:	693b      	ldr	r3, [r7, #16]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	f000 80e1 	beq.w	800dd24 <HAL_RCC_GetSysClockFreq+0x2b8>
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	2b02      	cmp	r3, #2
 800db66:	f000 8083 	beq.w	800dc70 <HAL_RCC_GetSysClockFreq+0x204>
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	2b02      	cmp	r3, #2
 800db6e:	f200 80a1 	bhi.w	800dcb4 <HAL_RCC_GetSysClockFreq+0x248>
 800db72:	697b      	ldr	r3, [r7, #20]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d003      	beq.n	800db80 <HAL_RCC_GetSysClockFreq+0x114>
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	2b01      	cmp	r3, #1
 800db7c:	d056      	beq.n	800dc2c <HAL_RCC_GetSysClockFreq+0x1c0>
 800db7e:	e099      	b.n	800dcb4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800db80:	4b6f      	ldr	r3, [pc, #444]	@ (800dd40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	f003 0320 	and.w	r3, r3, #32
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d02d      	beq.n	800dbe8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800db8c:	4b6c      	ldr	r3, [pc, #432]	@ (800dd40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	08db      	lsrs	r3, r3, #3
 800db92:	f003 0303 	and.w	r3, r3, #3
 800db96:	4a6b      	ldr	r2, [pc, #428]	@ (800dd44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800db98:	fa22 f303 	lsr.w	r3, r2, r3
 800db9c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	ee07 3a90 	vmov	s15, r3
 800dba4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dba8:	693b      	ldr	r3, [r7, #16]
 800dbaa:	ee07 3a90 	vmov	s15, r3
 800dbae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dbb6:	4b62      	ldr	r3, [pc, #392]	@ (800dd40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dbb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbbe:	ee07 3a90 	vmov	s15, r3
 800dbc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dbc6:	ed97 6a02 	vldr	s12, [r7, #8]
 800dbca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800dd50 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dbce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dbd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dbd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dbda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dbde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dbe2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800dbe6:	e087      	b.n	800dcf8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dbe8:	693b      	ldr	r3, [r7, #16]
 800dbea:	ee07 3a90 	vmov	s15, r3
 800dbee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbf2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800dd54 <HAL_RCC_GetSysClockFreq+0x2e8>
 800dbf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dbfa:	4b51      	ldr	r3, [pc, #324]	@ (800dd40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dbfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc02:	ee07 3a90 	vmov	s15, r3
 800dc06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc0a:	ed97 6a02 	vldr	s12, [r7, #8]
 800dc0e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800dd50 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dc12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dc1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800dc2a:	e065      	b.n	800dcf8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dc2c:	693b      	ldr	r3, [r7, #16]
 800dc2e:	ee07 3a90 	vmov	s15, r3
 800dc32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc36:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800dd58 <HAL_RCC_GetSysClockFreq+0x2ec>
 800dc3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc3e:	4b40      	ldr	r3, [pc, #256]	@ (800dd40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dc40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc46:	ee07 3a90 	vmov	s15, r3
 800dc4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc4e:	ed97 6a02 	vldr	s12, [r7, #8]
 800dc52:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800dd50 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dc56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dc62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800dc6e:	e043      	b.n	800dcf8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dc70:	693b      	ldr	r3, [r7, #16]
 800dc72:	ee07 3a90 	vmov	s15, r3
 800dc76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc7a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800dd5c <HAL_RCC_GetSysClockFreq+0x2f0>
 800dc7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc82:	4b2f      	ldr	r3, [pc, #188]	@ (800dd40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dc84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc8a:	ee07 3a90 	vmov	s15, r3
 800dc8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc92:	ed97 6a02 	vldr	s12, [r7, #8]
 800dc96:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800dd50 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dc9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dca2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dcaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800dcb2:	e021      	b.n	800dcf8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	ee07 3a90 	vmov	s15, r3
 800dcba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcbe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800dd58 <HAL_RCC_GetSysClockFreq+0x2ec>
 800dcc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dcc6:	4b1e      	ldr	r3, [pc, #120]	@ (800dd40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dcc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dcca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcce:	ee07 3a90 	vmov	s15, r3
 800dcd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dcd6:	ed97 6a02 	vldr	s12, [r7, #8]
 800dcda:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800dd50 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dcde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dce6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dcea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dcee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcf2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800dcf6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800dcf8:	4b11      	ldr	r3, [pc, #68]	@ (800dd40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dcfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dcfc:	0a5b      	lsrs	r3, r3, #9
 800dcfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd02:	3301      	adds	r3, #1
 800dd04:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	ee07 3a90 	vmov	s15, r3
 800dd0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800dd10:	edd7 6a07 	vldr	s13, [r7, #28]
 800dd14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd1c:	ee17 3a90 	vmov	r3, s15
 800dd20:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800dd22:	e005      	b.n	800dd30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800dd24:	2300      	movs	r3, #0
 800dd26:	61bb      	str	r3, [r7, #24]
      break;
 800dd28:	e002      	b.n	800dd30 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800dd2a:	4b07      	ldr	r3, [pc, #28]	@ (800dd48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800dd2c:	61bb      	str	r3, [r7, #24]
      break;
 800dd2e:	bf00      	nop
  }

  return sysclockfreq;
 800dd30:	69bb      	ldr	r3, [r7, #24]
}
 800dd32:	4618      	mov	r0, r3
 800dd34:	3724      	adds	r7, #36	@ 0x24
 800dd36:	46bd      	mov	sp, r7
 800dd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3c:	4770      	bx	lr
 800dd3e:	bf00      	nop
 800dd40:	58024400 	.word	0x58024400
 800dd44:	03d09000 	.word	0x03d09000
 800dd48:	003d0900 	.word	0x003d0900
 800dd4c:	017d7840 	.word	0x017d7840
 800dd50:	46000000 	.word	0x46000000
 800dd54:	4c742400 	.word	0x4c742400
 800dd58:	4a742400 	.word	0x4a742400
 800dd5c:	4bbebc20 	.word	0x4bbebc20

0800dd60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b082      	sub	sp, #8
 800dd64:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800dd66:	f7ff fe81 	bl	800da6c <HAL_RCC_GetSysClockFreq>
 800dd6a:	4602      	mov	r2, r0
 800dd6c:	4b10      	ldr	r3, [pc, #64]	@ (800ddb0 <HAL_RCC_GetHCLKFreq+0x50>)
 800dd6e:	699b      	ldr	r3, [r3, #24]
 800dd70:	0a1b      	lsrs	r3, r3, #8
 800dd72:	f003 030f 	and.w	r3, r3, #15
 800dd76:	490f      	ldr	r1, [pc, #60]	@ (800ddb4 <HAL_RCC_GetHCLKFreq+0x54>)
 800dd78:	5ccb      	ldrb	r3, [r1, r3]
 800dd7a:	f003 031f 	and.w	r3, r3, #31
 800dd7e:	fa22 f303 	lsr.w	r3, r2, r3
 800dd82:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dd84:	4b0a      	ldr	r3, [pc, #40]	@ (800ddb0 <HAL_RCC_GetHCLKFreq+0x50>)
 800dd86:	699b      	ldr	r3, [r3, #24]
 800dd88:	f003 030f 	and.w	r3, r3, #15
 800dd8c:	4a09      	ldr	r2, [pc, #36]	@ (800ddb4 <HAL_RCC_GetHCLKFreq+0x54>)
 800dd8e:	5cd3      	ldrb	r3, [r2, r3]
 800dd90:	f003 031f 	and.w	r3, r3, #31
 800dd94:	687a      	ldr	r2, [r7, #4]
 800dd96:	fa22 f303 	lsr.w	r3, r2, r3
 800dd9a:	4a07      	ldr	r2, [pc, #28]	@ (800ddb8 <HAL_RCC_GetHCLKFreq+0x58>)
 800dd9c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800dd9e:	4a07      	ldr	r2, [pc, #28]	@ (800ddbc <HAL_RCC_GetHCLKFreq+0x5c>)
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800dda4:	4b04      	ldr	r3, [pc, #16]	@ (800ddb8 <HAL_RCC_GetHCLKFreq+0x58>)
 800dda6:	681b      	ldr	r3, [r3, #0]
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3708      	adds	r7, #8
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}
 800ddb0:	58024400 	.word	0x58024400
 800ddb4:	0802e310 	.word	0x0802e310
 800ddb8:	2400005c 	.word	0x2400005c
 800ddbc:	24000058 	.word	0x24000058

0800ddc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ddc4:	f7ff ffcc 	bl	800dd60 <HAL_RCC_GetHCLKFreq>
 800ddc8:	4602      	mov	r2, r0
 800ddca:	4b06      	ldr	r3, [pc, #24]	@ (800dde4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ddcc:	69db      	ldr	r3, [r3, #28]
 800ddce:	091b      	lsrs	r3, r3, #4
 800ddd0:	f003 0307 	and.w	r3, r3, #7
 800ddd4:	4904      	ldr	r1, [pc, #16]	@ (800dde8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ddd6:	5ccb      	ldrb	r3, [r1, r3]
 800ddd8:	f003 031f 	and.w	r3, r3, #31
 800dddc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	bd80      	pop	{r7, pc}
 800dde4:	58024400 	.word	0x58024400
 800dde8:	0802e310 	.word	0x0802e310

0800ddec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ddf0:	f7ff ffb6 	bl	800dd60 <HAL_RCC_GetHCLKFreq>
 800ddf4:	4602      	mov	r2, r0
 800ddf6:	4b06      	ldr	r3, [pc, #24]	@ (800de10 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ddf8:	69db      	ldr	r3, [r3, #28]
 800ddfa:	0a1b      	lsrs	r3, r3, #8
 800ddfc:	f003 0307 	and.w	r3, r3, #7
 800de00:	4904      	ldr	r1, [pc, #16]	@ (800de14 <HAL_RCC_GetPCLK2Freq+0x28>)
 800de02:	5ccb      	ldrb	r3, [r1, r3]
 800de04:	f003 031f 	and.w	r3, r3, #31
 800de08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800de0c:	4618      	mov	r0, r3
 800de0e:	bd80      	pop	{r7, pc}
 800de10:	58024400 	.word	0x58024400
 800de14:	0802e310 	.word	0x0802e310

0800de18 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800de18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800de1c:	b0c6      	sub	sp, #280	@ 0x118
 800de1e:	af00      	add	r7, sp, #0
 800de20:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800de24:	2300      	movs	r3, #0
 800de26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800de2a:	2300      	movs	r3, #0
 800de2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800de30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de38:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800de3c:	2500      	movs	r5, #0
 800de3e:	ea54 0305 	orrs.w	r3, r4, r5
 800de42:	d049      	beq.n	800ded8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800de44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800de4a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800de4e:	d02f      	beq.n	800deb0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800de50:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800de54:	d828      	bhi.n	800dea8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800de56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800de5a:	d01a      	beq.n	800de92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800de5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800de60:	d822      	bhi.n	800dea8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800de62:	2b00      	cmp	r3, #0
 800de64:	d003      	beq.n	800de6e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800de66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800de6a:	d007      	beq.n	800de7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800de6c:	e01c      	b.n	800dea8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800de6e:	4bab      	ldr	r3, [pc, #684]	@ (800e11c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800de70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de72:	4aaa      	ldr	r2, [pc, #680]	@ (800e11c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800de74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800de78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800de7a:	e01a      	b.n	800deb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800de7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de80:	3308      	adds	r3, #8
 800de82:	2102      	movs	r1, #2
 800de84:	4618      	mov	r0, r3
 800de86:	f001 fc25 	bl	800f6d4 <RCCEx_PLL2_Config>
 800de8a:	4603      	mov	r3, r0
 800de8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800de90:	e00f      	b.n	800deb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800de92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de96:	3328      	adds	r3, #40	@ 0x28
 800de98:	2102      	movs	r1, #2
 800de9a:	4618      	mov	r0, r3
 800de9c:	f001 fccc 	bl	800f838 <RCCEx_PLL3_Config>
 800dea0:	4603      	mov	r3, r0
 800dea2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800dea6:	e004      	b.n	800deb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dea8:	2301      	movs	r3, #1
 800deaa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800deae:	e000      	b.n	800deb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800deb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800deb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d10a      	bne.n	800ded0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800deba:	4b98      	ldr	r3, [pc, #608]	@ (800e11c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800debc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800debe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800dec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dec6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dec8:	4a94      	ldr	r2, [pc, #592]	@ (800e11c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800deca:	430b      	orrs	r3, r1
 800decc:	6513      	str	r3, [r2, #80]	@ 0x50
 800dece:	e003      	b.n	800ded8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ded0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ded4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ded8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800dee4:	f04f 0900 	mov.w	r9, #0
 800dee8:	ea58 0309 	orrs.w	r3, r8, r9
 800deec:	d047      	beq.n	800df7e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800deee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800def2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800def4:	2b04      	cmp	r3, #4
 800def6:	d82a      	bhi.n	800df4e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800def8:	a201      	add	r2, pc, #4	@ (adr r2, 800df00 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800defa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800defe:	bf00      	nop
 800df00:	0800df15 	.word	0x0800df15
 800df04:	0800df23 	.word	0x0800df23
 800df08:	0800df39 	.word	0x0800df39
 800df0c:	0800df57 	.word	0x0800df57
 800df10:	0800df57 	.word	0x0800df57
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800df14:	4b81      	ldr	r3, [pc, #516]	@ (800e11c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800df16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df18:	4a80      	ldr	r2, [pc, #512]	@ (800e11c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800df1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800df1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800df20:	e01a      	b.n	800df58 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800df22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df26:	3308      	adds	r3, #8
 800df28:	2100      	movs	r1, #0
 800df2a:	4618      	mov	r0, r3
 800df2c:	f001 fbd2 	bl	800f6d4 <RCCEx_PLL2_Config>
 800df30:	4603      	mov	r3, r0
 800df32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800df36:	e00f      	b.n	800df58 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800df38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df3c:	3328      	adds	r3, #40	@ 0x28
 800df3e:	2100      	movs	r1, #0
 800df40:	4618      	mov	r0, r3
 800df42:	f001 fc79 	bl	800f838 <RCCEx_PLL3_Config>
 800df46:	4603      	mov	r3, r0
 800df48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800df4c:	e004      	b.n	800df58 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800df4e:	2301      	movs	r3, #1
 800df50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800df54:	e000      	b.n	800df58 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800df56:	bf00      	nop
    }

    if (ret == HAL_OK)
 800df58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d10a      	bne.n	800df76 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800df60:	4b6e      	ldr	r3, [pc, #440]	@ (800e11c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800df62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df64:	f023 0107 	bic.w	r1, r3, #7
 800df68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df6e:	4a6b      	ldr	r2, [pc, #428]	@ (800e11c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800df70:	430b      	orrs	r3, r1
 800df72:	6513      	str	r3, [r2, #80]	@ 0x50
 800df74:	e003      	b.n	800df7e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800df7a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800df7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df86:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800df8a:	f04f 0b00 	mov.w	fp, #0
 800df8e:	ea5a 030b 	orrs.w	r3, sl, fp
 800df92:	d05b      	beq.n	800e04c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800df94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800df9c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800dfa0:	d03b      	beq.n	800e01a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800dfa2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800dfa6:	d834      	bhi.n	800e012 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800dfa8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800dfac:	d037      	beq.n	800e01e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800dfae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800dfb2:	d82e      	bhi.n	800e012 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800dfb4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800dfb8:	d033      	beq.n	800e022 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800dfba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800dfbe:	d828      	bhi.n	800e012 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800dfc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dfc4:	d01a      	beq.n	800dffc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800dfc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dfca:	d822      	bhi.n	800e012 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d003      	beq.n	800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800dfd0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dfd4:	d007      	beq.n	800dfe6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800dfd6:	e01c      	b.n	800e012 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dfd8:	4b50      	ldr	r3, [pc, #320]	@ (800e11c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dfda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfdc:	4a4f      	ldr	r2, [pc, #316]	@ (800e11c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dfde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dfe2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dfe4:	e01e      	b.n	800e024 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dfe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfea:	3308      	adds	r3, #8
 800dfec:	2100      	movs	r1, #0
 800dfee:	4618      	mov	r0, r3
 800dff0:	f001 fb70 	bl	800f6d4 <RCCEx_PLL2_Config>
 800dff4:	4603      	mov	r3, r0
 800dff6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800dffa:	e013      	b.n	800e024 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e000:	3328      	adds	r3, #40	@ 0x28
 800e002:	2100      	movs	r1, #0
 800e004:	4618      	mov	r0, r3
 800e006:	f001 fc17 	bl	800f838 <RCCEx_PLL3_Config>
 800e00a:	4603      	mov	r3, r0
 800e00c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e010:	e008      	b.n	800e024 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800e012:	2301      	movs	r3, #1
 800e014:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e018:	e004      	b.n	800e024 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800e01a:	bf00      	nop
 800e01c:	e002      	b.n	800e024 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800e01e:	bf00      	nop
 800e020:	e000      	b.n	800e024 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800e022:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e024:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d10b      	bne.n	800e044 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800e02c:	4b3b      	ldr	r3, [pc, #236]	@ (800e11c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e02e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e030:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800e034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e038:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e03c:	4a37      	ldr	r2, [pc, #220]	@ (800e11c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e03e:	430b      	orrs	r3, r1
 800e040:	6593      	str	r3, [r2, #88]	@ 0x58
 800e042:	e003      	b.n	800e04c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e044:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e048:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800e04c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e054:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800e058:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800e05c:	2300      	movs	r3, #0
 800e05e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800e062:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800e066:	460b      	mov	r3, r1
 800e068:	4313      	orrs	r3, r2
 800e06a:	d05d      	beq.n	800e128 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800e06c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e070:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e074:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800e078:	d03b      	beq.n	800e0f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800e07a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800e07e:	d834      	bhi.n	800e0ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800e080:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e084:	d037      	beq.n	800e0f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800e086:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e08a:	d82e      	bhi.n	800e0ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800e08c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e090:	d033      	beq.n	800e0fa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800e092:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e096:	d828      	bhi.n	800e0ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800e098:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e09c:	d01a      	beq.n	800e0d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800e09e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e0a2:	d822      	bhi.n	800e0ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d003      	beq.n	800e0b0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800e0a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e0ac:	d007      	beq.n	800e0be <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800e0ae:	e01c      	b.n	800e0ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e0b0:	4b1a      	ldr	r3, [pc, #104]	@ (800e11c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e0b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0b4:	4a19      	ldr	r2, [pc, #100]	@ (800e11c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e0b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e0ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e0bc:	e01e      	b.n	800e0fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e0be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0c2:	3308      	adds	r3, #8
 800e0c4:	2100      	movs	r1, #0
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f001 fb04 	bl	800f6d4 <RCCEx_PLL2_Config>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800e0d2:	e013      	b.n	800e0fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e0d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0d8:	3328      	adds	r3, #40	@ 0x28
 800e0da:	2100      	movs	r1, #0
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f001 fbab 	bl	800f838 <RCCEx_PLL3_Config>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e0e8:	e008      	b.n	800e0fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e0f0:	e004      	b.n	800e0fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800e0f2:	bf00      	nop
 800e0f4:	e002      	b.n	800e0fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800e0f6:	bf00      	nop
 800e0f8:	e000      	b.n	800e0fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800e0fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e0fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e100:	2b00      	cmp	r3, #0
 800e102:	d10d      	bne.n	800e120 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800e104:	4b05      	ldr	r3, [pc, #20]	@ (800e11c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e108:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800e10c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e110:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e114:	4a01      	ldr	r2, [pc, #4]	@ (800e11c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e116:	430b      	orrs	r3, r1
 800e118:	6593      	str	r3, [r2, #88]	@ 0x58
 800e11a:	e005      	b.n	800e128 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800e11c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e120:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e124:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800e128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e130:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800e134:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800e138:	2300      	movs	r3, #0
 800e13a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e13e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800e142:	460b      	mov	r3, r1
 800e144:	4313      	orrs	r3, r2
 800e146:	d03a      	beq.n	800e1be <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800e148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e14c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e14e:	2b30      	cmp	r3, #48	@ 0x30
 800e150:	d01f      	beq.n	800e192 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800e152:	2b30      	cmp	r3, #48	@ 0x30
 800e154:	d819      	bhi.n	800e18a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800e156:	2b20      	cmp	r3, #32
 800e158:	d00c      	beq.n	800e174 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800e15a:	2b20      	cmp	r3, #32
 800e15c:	d815      	bhi.n	800e18a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d019      	beq.n	800e196 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800e162:	2b10      	cmp	r3, #16
 800e164:	d111      	bne.n	800e18a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e166:	4baa      	ldr	r3, [pc, #680]	@ (800e410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e16a:	4aa9      	ldr	r2, [pc, #676]	@ (800e410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e16c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e170:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800e172:	e011      	b.n	800e198 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e178:	3308      	adds	r3, #8
 800e17a:	2102      	movs	r1, #2
 800e17c:	4618      	mov	r0, r3
 800e17e:	f001 faa9 	bl	800f6d4 <RCCEx_PLL2_Config>
 800e182:	4603      	mov	r3, r0
 800e184:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800e188:	e006      	b.n	800e198 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e18a:	2301      	movs	r3, #1
 800e18c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e190:	e002      	b.n	800e198 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800e192:	bf00      	nop
 800e194:	e000      	b.n	800e198 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800e196:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e198:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d10a      	bne.n	800e1b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800e1a0:	4b9b      	ldr	r3, [pc, #620]	@ (800e410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e1a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e1a4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800e1a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e1ae:	4a98      	ldr	r2, [pc, #608]	@ (800e410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e1b0:	430b      	orrs	r3, r1
 800e1b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e1b4:	e003      	b.n	800e1be <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e1ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800e1be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800e1ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e1d4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800e1d8:	460b      	mov	r3, r1
 800e1da:	4313      	orrs	r3, r2
 800e1dc:	d051      	beq.n	800e282 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800e1de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e1e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e1e8:	d035      	beq.n	800e256 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800e1ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e1ee:	d82e      	bhi.n	800e24e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800e1f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e1f4:	d031      	beq.n	800e25a <HAL_RCCEx_PeriphCLKConfig+0x442>
 800e1f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e1fa:	d828      	bhi.n	800e24e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800e1fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e200:	d01a      	beq.n	800e238 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800e202:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e206:	d822      	bhi.n	800e24e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d003      	beq.n	800e214 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800e20c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e210:	d007      	beq.n	800e222 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800e212:	e01c      	b.n	800e24e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e214:	4b7e      	ldr	r3, [pc, #504]	@ (800e410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e218:	4a7d      	ldr	r2, [pc, #500]	@ (800e410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e21a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e21e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e220:	e01c      	b.n	800e25c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e226:	3308      	adds	r3, #8
 800e228:	2100      	movs	r1, #0
 800e22a:	4618      	mov	r0, r3
 800e22c:	f001 fa52 	bl	800f6d4 <RCCEx_PLL2_Config>
 800e230:	4603      	mov	r3, r0
 800e232:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e236:	e011      	b.n	800e25c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e23c:	3328      	adds	r3, #40	@ 0x28
 800e23e:	2100      	movs	r1, #0
 800e240:	4618      	mov	r0, r3
 800e242:	f001 faf9 	bl	800f838 <RCCEx_PLL3_Config>
 800e246:	4603      	mov	r3, r0
 800e248:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e24c:	e006      	b.n	800e25c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e24e:	2301      	movs	r3, #1
 800e250:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e254:	e002      	b.n	800e25c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800e256:	bf00      	nop
 800e258:	e000      	b.n	800e25c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800e25a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e25c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e260:	2b00      	cmp	r3, #0
 800e262:	d10a      	bne.n	800e27a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800e264:	4b6a      	ldr	r3, [pc, #424]	@ (800e410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e266:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e268:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800e26c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e272:	4a67      	ldr	r2, [pc, #412]	@ (800e410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e274:	430b      	orrs	r3, r1
 800e276:	6513      	str	r3, [r2, #80]	@ 0x50
 800e278:	e003      	b.n	800e282 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e27a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e27e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800e282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e28a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800e28e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e292:	2300      	movs	r3, #0
 800e294:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e298:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800e29c:	460b      	mov	r3, r1
 800e29e:	4313      	orrs	r3, r2
 800e2a0:	d053      	beq.n	800e34a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800e2a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e2a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e2ac:	d033      	beq.n	800e316 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800e2ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e2b2:	d82c      	bhi.n	800e30e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e2b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e2b8:	d02f      	beq.n	800e31a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800e2ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e2be:	d826      	bhi.n	800e30e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e2c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e2c4:	d02b      	beq.n	800e31e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800e2c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e2ca:	d820      	bhi.n	800e30e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e2cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e2d0:	d012      	beq.n	800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800e2d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e2d6:	d81a      	bhi.n	800e30e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d022      	beq.n	800e322 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800e2dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e2e0:	d115      	bne.n	800e30e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e2e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2e6:	3308      	adds	r3, #8
 800e2e8:	2101      	movs	r1, #1
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f001 f9f2 	bl	800f6d4 <RCCEx_PLL2_Config>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e2f6:	e015      	b.n	800e324 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e2f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2fc:	3328      	adds	r3, #40	@ 0x28
 800e2fe:	2101      	movs	r1, #1
 800e300:	4618      	mov	r0, r3
 800e302:	f001 fa99 	bl	800f838 <RCCEx_PLL3_Config>
 800e306:	4603      	mov	r3, r0
 800e308:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e30c:	e00a      	b.n	800e324 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e30e:	2301      	movs	r3, #1
 800e310:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e314:	e006      	b.n	800e324 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800e316:	bf00      	nop
 800e318:	e004      	b.n	800e324 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800e31a:	bf00      	nop
 800e31c:	e002      	b.n	800e324 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800e31e:	bf00      	nop
 800e320:	e000      	b.n	800e324 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800e322:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e324:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d10a      	bne.n	800e342 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e32c:	4b38      	ldr	r3, [pc, #224]	@ (800e410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e32e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e330:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800e334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e33a:	4a35      	ldr	r2, [pc, #212]	@ (800e410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e33c:	430b      	orrs	r3, r1
 800e33e:	6513      	str	r3, [r2, #80]	@ 0x50
 800e340:	e003      	b.n	800e34a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e342:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e346:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e34a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e352:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800e356:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e35a:	2300      	movs	r3, #0
 800e35c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e360:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800e364:	460b      	mov	r3, r1
 800e366:	4313      	orrs	r3, r2
 800e368:	d058      	beq.n	800e41c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800e36a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e36e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e372:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e376:	d033      	beq.n	800e3e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800e378:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e37c:	d82c      	bhi.n	800e3d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e37e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e382:	d02f      	beq.n	800e3e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800e384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e388:	d826      	bhi.n	800e3d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e38a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e38e:	d02b      	beq.n	800e3e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800e390:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e394:	d820      	bhi.n	800e3d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e396:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e39a:	d012      	beq.n	800e3c2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800e39c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e3a0:	d81a      	bhi.n	800e3d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d022      	beq.n	800e3ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800e3a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e3aa:	d115      	bne.n	800e3d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e3ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3b0:	3308      	adds	r3, #8
 800e3b2:	2101      	movs	r1, #1
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f001 f98d 	bl	800f6d4 <RCCEx_PLL2_Config>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e3c0:	e015      	b.n	800e3ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e3c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3c6:	3328      	adds	r3, #40	@ 0x28
 800e3c8:	2101      	movs	r1, #1
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f001 fa34 	bl	800f838 <RCCEx_PLL3_Config>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e3d6:	e00a      	b.n	800e3ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800e3d8:	2301      	movs	r3, #1
 800e3da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e3de:	e006      	b.n	800e3ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800e3e0:	bf00      	nop
 800e3e2:	e004      	b.n	800e3ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800e3e4:	bf00      	nop
 800e3e6:	e002      	b.n	800e3ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800e3e8:	bf00      	nop
 800e3ea:	e000      	b.n	800e3ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800e3ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e3ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d10e      	bne.n	800e414 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800e3f6:	4b06      	ldr	r3, [pc, #24]	@ (800e410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e3f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e3fa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800e3fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e402:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e406:	4a02      	ldr	r2, [pc, #8]	@ (800e410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e408:	430b      	orrs	r3, r1
 800e40a:	6593      	str	r3, [r2, #88]	@ 0x58
 800e40c:	e006      	b.n	800e41c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800e40e:	bf00      	nop
 800e410:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e414:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e418:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e41c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e424:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800e428:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e42c:	2300      	movs	r3, #0
 800e42e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e432:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800e436:	460b      	mov	r3, r1
 800e438:	4313      	orrs	r3, r2
 800e43a:	d037      	beq.n	800e4ac <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800e43c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e440:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e442:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e446:	d00e      	beq.n	800e466 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800e448:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e44c:	d816      	bhi.n	800e47c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d018      	beq.n	800e484 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800e452:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e456:	d111      	bne.n	800e47c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e458:	4bc4      	ldr	r3, [pc, #784]	@ (800e76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e45a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e45c:	4ac3      	ldr	r2, [pc, #780]	@ (800e76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e45e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e462:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e464:	e00f      	b.n	800e486 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e46a:	3308      	adds	r3, #8
 800e46c:	2101      	movs	r1, #1
 800e46e:	4618      	mov	r0, r3
 800e470:	f001 f930 	bl	800f6d4 <RCCEx_PLL2_Config>
 800e474:	4603      	mov	r3, r0
 800e476:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e47a:	e004      	b.n	800e486 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e47c:	2301      	movs	r3, #1
 800e47e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e482:	e000      	b.n	800e486 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800e484:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e486:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d10a      	bne.n	800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e48e:	4bb7      	ldr	r3, [pc, #732]	@ (800e76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e492:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800e496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e49a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e49c:	4ab3      	ldr	r2, [pc, #716]	@ (800e76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e49e:	430b      	orrs	r3, r1
 800e4a0:	6513      	str	r3, [r2, #80]	@ 0x50
 800e4a2:	e003      	b.n	800e4ac <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e4a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e4a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e4ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4b4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800e4b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e4bc:	2300      	movs	r3, #0
 800e4be:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e4c2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800e4c6:	460b      	mov	r3, r1
 800e4c8:	4313      	orrs	r3, r2
 800e4ca:	d039      	beq.n	800e540 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800e4cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e4d2:	2b03      	cmp	r3, #3
 800e4d4:	d81c      	bhi.n	800e510 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800e4d6:	a201      	add	r2, pc, #4	@ (adr r2, 800e4dc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800e4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4dc:	0800e519 	.word	0x0800e519
 800e4e0:	0800e4ed 	.word	0x0800e4ed
 800e4e4:	0800e4fb 	.word	0x0800e4fb
 800e4e8:	0800e519 	.word	0x0800e519
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e4ec:	4b9f      	ldr	r3, [pc, #636]	@ (800e76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e4ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4f0:	4a9e      	ldr	r2, [pc, #632]	@ (800e76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e4f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e4f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e4f8:	e00f      	b.n	800e51a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e4fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4fe:	3308      	adds	r3, #8
 800e500:	2102      	movs	r1, #2
 800e502:	4618      	mov	r0, r3
 800e504:	f001 f8e6 	bl	800f6d4 <RCCEx_PLL2_Config>
 800e508:	4603      	mov	r3, r0
 800e50a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e50e:	e004      	b.n	800e51a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e510:	2301      	movs	r3, #1
 800e512:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e516:	e000      	b.n	800e51a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800e518:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e51a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d10a      	bne.n	800e538 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e522:	4b92      	ldr	r3, [pc, #584]	@ (800e76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e526:	f023 0103 	bic.w	r1, r3, #3
 800e52a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e52e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e530:	4a8e      	ldr	r2, [pc, #568]	@ (800e76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e532:	430b      	orrs	r3, r1
 800e534:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e536:	e003      	b.n	800e540 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e538:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e53c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e548:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800e54c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e550:	2300      	movs	r3, #0
 800e552:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e556:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800e55a:	460b      	mov	r3, r1
 800e55c:	4313      	orrs	r3, r2
 800e55e:	f000 8099 	beq.w	800e694 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e562:	4b83      	ldr	r3, [pc, #524]	@ (800e770 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	4a82      	ldr	r2, [pc, #520]	@ (800e770 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e568:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e56c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e56e:	f7fb fa91 	bl	8009a94 <HAL_GetTick>
 800e572:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e576:	e00b      	b.n	800e590 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e578:	f7fb fa8c 	bl	8009a94 <HAL_GetTick>
 800e57c:	4602      	mov	r2, r0
 800e57e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800e582:	1ad3      	subs	r3, r2, r3
 800e584:	2b64      	cmp	r3, #100	@ 0x64
 800e586:	d903      	bls.n	800e590 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800e588:	2303      	movs	r3, #3
 800e58a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e58e:	e005      	b.n	800e59c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e590:	4b77      	ldr	r3, [pc, #476]	@ (800e770 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d0ed      	beq.n	800e578 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800e59c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d173      	bne.n	800e68c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e5a4:	4b71      	ldr	r3, [pc, #452]	@ (800e76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e5a6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e5a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e5b0:	4053      	eors	r3, r2
 800e5b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d015      	beq.n	800e5e6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e5ba:	4b6c      	ldr	r3, [pc, #432]	@ (800e76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e5bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e5be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e5c2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e5c6:	4b69      	ldr	r3, [pc, #420]	@ (800e76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e5c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e5ca:	4a68      	ldr	r2, [pc, #416]	@ (800e76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e5cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e5d0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e5d2:	4b66      	ldr	r3, [pc, #408]	@ (800e76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e5d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e5d6:	4a65      	ldr	r2, [pc, #404]	@ (800e76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e5d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e5dc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800e5de:	4a63      	ldr	r2, [pc, #396]	@ (800e76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e5e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e5e4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e5e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e5ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e5f2:	d118      	bne.n	800e626 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e5f4:	f7fb fa4e 	bl	8009a94 <HAL_GetTick>
 800e5f8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e5fc:	e00d      	b.n	800e61a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e5fe:	f7fb fa49 	bl	8009a94 <HAL_GetTick>
 800e602:	4602      	mov	r2, r0
 800e604:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800e608:	1ad2      	subs	r2, r2, r3
 800e60a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e60e:	429a      	cmp	r2, r3
 800e610:	d903      	bls.n	800e61a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800e612:	2303      	movs	r3, #3
 800e614:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800e618:	e005      	b.n	800e626 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e61a:	4b54      	ldr	r3, [pc, #336]	@ (800e76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e61c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e61e:	f003 0302 	and.w	r3, r3, #2
 800e622:	2b00      	cmp	r3, #0
 800e624:	d0eb      	beq.n	800e5fe <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800e626:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d129      	bne.n	800e682 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e62e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e632:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e636:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e63a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e63e:	d10e      	bne.n	800e65e <HAL_RCCEx_PeriphCLKConfig+0x846>
 800e640:	4b4a      	ldr	r3, [pc, #296]	@ (800e76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e642:	691b      	ldr	r3, [r3, #16]
 800e644:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800e648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e64c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e650:	091a      	lsrs	r2, r3, #4
 800e652:	4b48      	ldr	r3, [pc, #288]	@ (800e774 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800e654:	4013      	ands	r3, r2
 800e656:	4a45      	ldr	r2, [pc, #276]	@ (800e76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e658:	430b      	orrs	r3, r1
 800e65a:	6113      	str	r3, [r2, #16]
 800e65c:	e005      	b.n	800e66a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800e65e:	4b43      	ldr	r3, [pc, #268]	@ (800e76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e660:	691b      	ldr	r3, [r3, #16]
 800e662:	4a42      	ldr	r2, [pc, #264]	@ (800e76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e664:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e668:	6113      	str	r3, [r2, #16]
 800e66a:	4b40      	ldr	r3, [pc, #256]	@ (800e76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e66c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800e66e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e672:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e676:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e67a:	4a3c      	ldr	r2, [pc, #240]	@ (800e76c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e67c:	430b      	orrs	r3, r1
 800e67e:	6713      	str	r3, [r2, #112]	@ 0x70
 800e680:	e008      	b.n	800e694 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e682:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e686:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e68a:	e003      	b.n	800e694 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e68c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e690:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e69c:	f002 0301 	and.w	r3, r2, #1
 800e6a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e6aa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800e6ae:	460b      	mov	r3, r1
 800e6b0:	4313      	orrs	r3, r2
 800e6b2:	f000 808f 	beq.w	800e7d4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800e6b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e6bc:	2b28      	cmp	r3, #40	@ 0x28
 800e6be:	d871      	bhi.n	800e7a4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800e6c0:	a201      	add	r2, pc, #4	@ (adr r2, 800e6c8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800e6c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6c6:	bf00      	nop
 800e6c8:	0800e7ad 	.word	0x0800e7ad
 800e6cc:	0800e7a5 	.word	0x0800e7a5
 800e6d0:	0800e7a5 	.word	0x0800e7a5
 800e6d4:	0800e7a5 	.word	0x0800e7a5
 800e6d8:	0800e7a5 	.word	0x0800e7a5
 800e6dc:	0800e7a5 	.word	0x0800e7a5
 800e6e0:	0800e7a5 	.word	0x0800e7a5
 800e6e4:	0800e7a5 	.word	0x0800e7a5
 800e6e8:	0800e779 	.word	0x0800e779
 800e6ec:	0800e7a5 	.word	0x0800e7a5
 800e6f0:	0800e7a5 	.word	0x0800e7a5
 800e6f4:	0800e7a5 	.word	0x0800e7a5
 800e6f8:	0800e7a5 	.word	0x0800e7a5
 800e6fc:	0800e7a5 	.word	0x0800e7a5
 800e700:	0800e7a5 	.word	0x0800e7a5
 800e704:	0800e7a5 	.word	0x0800e7a5
 800e708:	0800e78f 	.word	0x0800e78f
 800e70c:	0800e7a5 	.word	0x0800e7a5
 800e710:	0800e7a5 	.word	0x0800e7a5
 800e714:	0800e7a5 	.word	0x0800e7a5
 800e718:	0800e7a5 	.word	0x0800e7a5
 800e71c:	0800e7a5 	.word	0x0800e7a5
 800e720:	0800e7a5 	.word	0x0800e7a5
 800e724:	0800e7a5 	.word	0x0800e7a5
 800e728:	0800e7ad 	.word	0x0800e7ad
 800e72c:	0800e7a5 	.word	0x0800e7a5
 800e730:	0800e7a5 	.word	0x0800e7a5
 800e734:	0800e7a5 	.word	0x0800e7a5
 800e738:	0800e7a5 	.word	0x0800e7a5
 800e73c:	0800e7a5 	.word	0x0800e7a5
 800e740:	0800e7a5 	.word	0x0800e7a5
 800e744:	0800e7a5 	.word	0x0800e7a5
 800e748:	0800e7ad 	.word	0x0800e7ad
 800e74c:	0800e7a5 	.word	0x0800e7a5
 800e750:	0800e7a5 	.word	0x0800e7a5
 800e754:	0800e7a5 	.word	0x0800e7a5
 800e758:	0800e7a5 	.word	0x0800e7a5
 800e75c:	0800e7a5 	.word	0x0800e7a5
 800e760:	0800e7a5 	.word	0x0800e7a5
 800e764:	0800e7a5 	.word	0x0800e7a5
 800e768:	0800e7ad 	.word	0x0800e7ad
 800e76c:	58024400 	.word	0x58024400
 800e770:	58024800 	.word	0x58024800
 800e774:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e77c:	3308      	adds	r3, #8
 800e77e:	2101      	movs	r1, #1
 800e780:	4618      	mov	r0, r3
 800e782:	f000 ffa7 	bl	800f6d4 <RCCEx_PLL2_Config>
 800e786:	4603      	mov	r3, r0
 800e788:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e78c:	e00f      	b.n	800e7ae <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e78e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e792:	3328      	adds	r3, #40	@ 0x28
 800e794:	2101      	movs	r1, #1
 800e796:	4618      	mov	r0, r3
 800e798:	f001 f84e 	bl	800f838 <RCCEx_PLL3_Config>
 800e79c:	4603      	mov	r3, r0
 800e79e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e7a2:	e004      	b.n	800e7ae <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e7a4:	2301      	movs	r3, #1
 800e7a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e7aa:	e000      	b.n	800e7ae <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800e7ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e7ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d10a      	bne.n	800e7cc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e7b6:	4bbf      	ldr	r3, [pc, #764]	@ (800eab4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e7b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e7ba:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800e7be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e7c4:	4abb      	ldr	r2, [pc, #748]	@ (800eab4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e7c6:	430b      	orrs	r3, r1
 800e7c8:	6553      	str	r3, [r2, #84]	@ 0x54
 800e7ca:	e003      	b.n	800e7d4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e7cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e7d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e7d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7dc:	f002 0302 	and.w	r3, r2, #2
 800e7e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e7ea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800e7ee:	460b      	mov	r3, r1
 800e7f0:	4313      	orrs	r3, r2
 800e7f2:	d041      	beq.n	800e878 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800e7f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e7fa:	2b05      	cmp	r3, #5
 800e7fc:	d824      	bhi.n	800e848 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800e7fe:	a201      	add	r2, pc, #4	@ (adr r2, 800e804 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800e800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e804:	0800e851 	.word	0x0800e851
 800e808:	0800e81d 	.word	0x0800e81d
 800e80c:	0800e833 	.word	0x0800e833
 800e810:	0800e851 	.word	0x0800e851
 800e814:	0800e851 	.word	0x0800e851
 800e818:	0800e851 	.word	0x0800e851
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e81c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e820:	3308      	adds	r3, #8
 800e822:	2101      	movs	r1, #1
 800e824:	4618      	mov	r0, r3
 800e826:	f000 ff55 	bl	800f6d4 <RCCEx_PLL2_Config>
 800e82a:	4603      	mov	r3, r0
 800e82c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e830:	e00f      	b.n	800e852 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e836:	3328      	adds	r3, #40	@ 0x28
 800e838:	2101      	movs	r1, #1
 800e83a:	4618      	mov	r0, r3
 800e83c:	f000 fffc 	bl	800f838 <RCCEx_PLL3_Config>
 800e840:	4603      	mov	r3, r0
 800e842:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e846:	e004      	b.n	800e852 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e848:	2301      	movs	r3, #1
 800e84a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e84e:	e000      	b.n	800e852 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800e850:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e852:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e856:	2b00      	cmp	r3, #0
 800e858:	d10a      	bne.n	800e870 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800e85a:	4b96      	ldr	r3, [pc, #600]	@ (800eab4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e85c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e85e:	f023 0107 	bic.w	r1, r3, #7
 800e862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e866:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e868:	4a92      	ldr	r2, [pc, #584]	@ (800eab4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e86a:	430b      	orrs	r3, r1
 800e86c:	6553      	str	r3, [r2, #84]	@ 0x54
 800e86e:	e003      	b.n	800e878 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e870:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e874:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e880:	f002 0304 	and.w	r3, r2, #4
 800e884:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e888:	2300      	movs	r3, #0
 800e88a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e88e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800e892:	460b      	mov	r3, r1
 800e894:	4313      	orrs	r3, r2
 800e896:	d044      	beq.n	800e922 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800e898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e89c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e8a0:	2b05      	cmp	r3, #5
 800e8a2:	d825      	bhi.n	800e8f0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800e8a4:	a201      	add	r2, pc, #4	@ (adr r2, 800e8ac <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800e8a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8aa:	bf00      	nop
 800e8ac:	0800e8f9 	.word	0x0800e8f9
 800e8b0:	0800e8c5 	.word	0x0800e8c5
 800e8b4:	0800e8db 	.word	0x0800e8db
 800e8b8:	0800e8f9 	.word	0x0800e8f9
 800e8bc:	0800e8f9 	.word	0x0800e8f9
 800e8c0:	0800e8f9 	.word	0x0800e8f9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e8c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8c8:	3308      	adds	r3, #8
 800e8ca:	2101      	movs	r1, #1
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f000 ff01 	bl	800f6d4 <RCCEx_PLL2_Config>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e8d8:	e00f      	b.n	800e8fa <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e8da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8de:	3328      	adds	r3, #40	@ 0x28
 800e8e0:	2101      	movs	r1, #1
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	f000 ffa8 	bl	800f838 <RCCEx_PLL3_Config>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e8ee:	e004      	b.n	800e8fa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e8f0:	2301      	movs	r3, #1
 800e8f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e8f6:	e000      	b.n	800e8fa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800e8f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e8fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d10b      	bne.n	800e91a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e902:	4b6c      	ldr	r3, [pc, #432]	@ (800eab4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e906:	f023 0107 	bic.w	r1, r3, #7
 800e90a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e90e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e912:	4a68      	ldr	r2, [pc, #416]	@ (800eab4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e914:	430b      	orrs	r3, r1
 800e916:	6593      	str	r3, [r2, #88]	@ 0x58
 800e918:	e003      	b.n	800e922 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e91a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e91e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e92a:	f002 0320 	and.w	r3, r2, #32
 800e92e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e932:	2300      	movs	r3, #0
 800e934:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e938:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800e93c:	460b      	mov	r3, r1
 800e93e:	4313      	orrs	r3, r2
 800e940:	d055      	beq.n	800e9ee <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800e942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e946:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e94a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e94e:	d033      	beq.n	800e9b8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800e950:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e954:	d82c      	bhi.n	800e9b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e95a:	d02f      	beq.n	800e9bc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800e95c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e960:	d826      	bhi.n	800e9b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e962:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e966:	d02b      	beq.n	800e9c0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800e968:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e96c:	d820      	bhi.n	800e9b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e96e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e972:	d012      	beq.n	800e99a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800e974:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e978:	d81a      	bhi.n	800e9b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d022      	beq.n	800e9c4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800e97e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e982:	d115      	bne.n	800e9b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e988:	3308      	adds	r3, #8
 800e98a:	2100      	movs	r1, #0
 800e98c:	4618      	mov	r0, r3
 800e98e:	f000 fea1 	bl	800f6d4 <RCCEx_PLL2_Config>
 800e992:	4603      	mov	r3, r0
 800e994:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e998:	e015      	b.n	800e9c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e99a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e99e:	3328      	adds	r3, #40	@ 0x28
 800e9a0:	2102      	movs	r1, #2
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	f000 ff48 	bl	800f838 <RCCEx_PLL3_Config>
 800e9a8:	4603      	mov	r3, r0
 800e9aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e9ae:	e00a      	b.n	800e9c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e9b0:	2301      	movs	r3, #1
 800e9b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e9b6:	e006      	b.n	800e9c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800e9b8:	bf00      	nop
 800e9ba:	e004      	b.n	800e9c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800e9bc:	bf00      	nop
 800e9be:	e002      	b.n	800e9c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800e9c0:	bf00      	nop
 800e9c2:	e000      	b.n	800e9c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800e9c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e9c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d10b      	bne.n	800e9e6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e9ce:	4b39      	ldr	r3, [pc, #228]	@ (800eab4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e9d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9d2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800e9d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e9de:	4a35      	ldr	r2, [pc, #212]	@ (800eab4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e9e0:	430b      	orrs	r3, r1
 800e9e2:	6553      	str	r3, [r2, #84]	@ 0x54
 800e9e4:	e003      	b.n	800e9ee <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e9e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e9ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e9ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9f6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800e9fa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e9fe:	2300      	movs	r3, #0
 800ea00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ea04:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800ea08:	460b      	mov	r3, r1
 800ea0a:	4313      	orrs	r3, r2
 800ea0c:	d058      	beq.n	800eac0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ea0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ea16:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ea1a:	d033      	beq.n	800ea84 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800ea1c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ea20:	d82c      	bhi.n	800ea7c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ea22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ea26:	d02f      	beq.n	800ea88 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800ea28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ea2c:	d826      	bhi.n	800ea7c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ea2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ea32:	d02b      	beq.n	800ea8c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800ea34:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ea38:	d820      	bhi.n	800ea7c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ea3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ea3e:	d012      	beq.n	800ea66 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800ea40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ea44:	d81a      	bhi.n	800ea7c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d022      	beq.n	800ea90 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800ea4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ea4e:	d115      	bne.n	800ea7c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ea50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea54:	3308      	adds	r3, #8
 800ea56:	2100      	movs	r1, #0
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f000 fe3b 	bl	800f6d4 <RCCEx_PLL2_Config>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ea64:	e015      	b.n	800ea92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ea66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea6a:	3328      	adds	r3, #40	@ 0x28
 800ea6c:	2102      	movs	r1, #2
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f000 fee2 	bl	800f838 <RCCEx_PLL3_Config>
 800ea74:	4603      	mov	r3, r0
 800ea76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ea7a:	e00a      	b.n	800ea92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ea82:	e006      	b.n	800ea92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ea84:	bf00      	nop
 800ea86:	e004      	b.n	800ea92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ea88:	bf00      	nop
 800ea8a:	e002      	b.n	800ea92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ea8c:	bf00      	nop
 800ea8e:	e000      	b.n	800ea92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ea90:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ea92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d10e      	bne.n	800eab8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ea9a:	4b06      	ldr	r3, [pc, #24]	@ (800eab4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ea9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea9e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800eaa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eaa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800eaaa:	4a02      	ldr	r2, [pc, #8]	@ (800eab4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800eaac:	430b      	orrs	r3, r1
 800eaae:	6593      	str	r3, [r2, #88]	@ 0x58
 800eab0:	e006      	b.n	800eac0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800eab2:	bf00      	nop
 800eab4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eab8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eabc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800eac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800eacc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ead0:	2300      	movs	r3, #0
 800ead2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ead6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800eada:	460b      	mov	r3, r1
 800eadc:	4313      	orrs	r3, r2
 800eade:	d055      	beq.n	800eb8c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800eae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eae4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800eae8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800eaec:	d033      	beq.n	800eb56 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800eaee:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800eaf2:	d82c      	bhi.n	800eb4e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800eaf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eaf8:	d02f      	beq.n	800eb5a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800eafa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eafe:	d826      	bhi.n	800eb4e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800eb00:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800eb04:	d02b      	beq.n	800eb5e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800eb06:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800eb0a:	d820      	bhi.n	800eb4e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800eb0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800eb10:	d012      	beq.n	800eb38 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800eb12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800eb16:	d81a      	bhi.n	800eb4e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d022      	beq.n	800eb62 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800eb1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eb20:	d115      	bne.n	800eb4e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eb22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb26:	3308      	adds	r3, #8
 800eb28:	2100      	movs	r1, #0
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f000 fdd2 	bl	800f6d4 <RCCEx_PLL2_Config>
 800eb30:	4603      	mov	r3, r0
 800eb32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800eb36:	e015      	b.n	800eb64 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800eb38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb3c:	3328      	adds	r3, #40	@ 0x28
 800eb3e:	2102      	movs	r1, #2
 800eb40:	4618      	mov	r0, r3
 800eb42:	f000 fe79 	bl	800f838 <RCCEx_PLL3_Config>
 800eb46:	4603      	mov	r3, r0
 800eb48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800eb4c:	e00a      	b.n	800eb64 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eb4e:	2301      	movs	r3, #1
 800eb50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800eb54:	e006      	b.n	800eb64 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800eb56:	bf00      	nop
 800eb58:	e004      	b.n	800eb64 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800eb5a:	bf00      	nop
 800eb5c:	e002      	b.n	800eb64 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800eb5e:	bf00      	nop
 800eb60:	e000      	b.n	800eb64 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800eb62:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eb64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d10b      	bne.n	800eb84 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800eb6c:	4ba0      	ldr	r3, [pc, #640]	@ (800edf0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800eb6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eb70:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800eb74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800eb7c:	4a9c      	ldr	r2, [pc, #624]	@ (800edf0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800eb7e:	430b      	orrs	r3, r1
 800eb80:	6593      	str	r3, [r2, #88]	@ 0x58
 800eb82:	e003      	b.n	800eb8c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eb88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800eb8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb94:	f002 0308 	and.w	r3, r2, #8
 800eb98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800eba2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800eba6:	460b      	mov	r3, r1
 800eba8:	4313      	orrs	r3, r2
 800ebaa:	d01e      	beq.n	800ebea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800ebac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ebb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ebb8:	d10c      	bne.n	800ebd4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ebba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebbe:	3328      	adds	r3, #40	@ 0x28
 800ebc0:	2102      	movs	r1, #2
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f000 fe38 	bl	800f838 <RCCEx_PLL3_Config>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d002      	beq.n	800ebd4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800ebce:	2301      	movs	r3, #1
 800ebd0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800ebd4:	4b86      	ldr	r3, [pc, #536]	@ (800edf0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ebd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ebd8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ebdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ebe4:	4a82      	ldr	r2, [pc, #520]	@ (800edf0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ebe6:	430b      	orrs	r3, r1
 800ebe8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ebea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf2:	f002 0310 	and.w	r3, r2, #16
 800ebf6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ec00:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800ec04:	460b      	mov	r3, r1
 800ec06:	4313      	orrs	r3, r2
 800ec08:	d01e      	beq.n	800ec48 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800ec0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ec12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ec16:	d10c      	bne.n	800ec32 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ec18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec1c:	3328      	adds	r3, #40	@ 0x28
 800ec1e:	2102      	movs	r1, #2
 800ec20:	4618      	mov	r0, r3
 800ec22:	f000 fe09 	bl	800f838 <RCCEx_PLL3_Config>
 800ec26:	4603      	mov	r3, r0
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d002      	beq.n	800ec32 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800ec2c:	2301      	movs	r3, #1
 800ec2e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ec32:	4b6f      	ldr	r3, [pc, #444]	@ (800edf0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ec34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ec36:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ec3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ec42:	4a6b      	ldr	r2, [pc, #428]	@ (800edf0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ec44:	430b      	orrs	r3, r1
 800ec46:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ec48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec50:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800ec54:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ec56:	2300      	movs	r3, #0
 800ec58:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ec5a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800ec5e:	460b      	mov	r3, r1
 800ec60:	4313      	orrs	r3, r2
 800ec62:	d03e      	beq.n	800ece2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ec64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ec6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ec70:	d022      	beq.n	800ecb8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800ec72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ec76:	d81b      	bhi.n	800ecb0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d003      	beq.n	800ec84 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800ec7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ec80:	d00b      	beq.n	800ec9a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800ec82:	e015      	b.n	800ecb0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ec84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec88:	3308      	adds	r3, #8
 800ec8a:	2100      	movs	r1, #0
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f000 fd21 	bl	800f6d4 <RCCEx_PLL2_Config>
 800ec92:	4603      	mov	r3, r0
 800ec94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ec98:	e00f      	b.n	800ecba <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ec9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec9e:	3328      	adds	r3, #40	@ 0x28
 800eca0:	2102      	movs	r1, #2
 800eca2:	4618      	mov	r0, r3
 800eca4:	f000 fdc8 	bl	800f838 <RCCEx_PLL3_Config>
 800eca8:	4603      	mov	r3, r0
 800ecaa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ecae:	e004      	b.n	800ecba <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ecb6:	e000      	b.n	800ecba <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800ecb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ecba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d10b      	bne.n	800ecda <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ecc2:	4b4b      	ldr	r3, [pc, #300]	@ (800edf0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ecc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ecc6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800ecca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ecce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ecd2:	4a47      	ldr	r2, [pc, #284]	@ (800edf0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ecd4:	430b      	orrs	r3, r1
 800ecd6:	6593      	str	r3, [r2, #88]	@ 0x58
 800ecd8:	e003      	b.n	800ece2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ecda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ecde:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ece2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ece6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecea:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800ecee:	673b      	str	r3, [r7, #112]	@ 0x70
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	677b      	str	r3, [r7, #116]	@ 0x74
 800ecf4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800ecf8:	460b      	mov	r3, r1
 800ecfa:	4313      	orrs	r3, r2
 800ecfc:	d03b      	beq.n	800ed76 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ecfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ed06:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ed0a:	d01f      	beq.n	800ed4c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800ed0c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ed10:	d818      	bhi.n	800ed44 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800ed12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ed16:	d003      	beq.n	800ed20 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800ed18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ed1c:	d007      	beq.n	800ed2e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800ed1e:	e011      	b.n	800ed44 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ed20:	4b33      	ldr	r3, [pc, #204]	@ (800edf0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ed22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed24:	4a32      	ldr	r2, [pc, #200]	@ (800edf0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ed26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ed2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ed2c:	e00f      	b.n	800ed4e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ed2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed32:	3328      	adds	r3, #40	@ 0x28
 800ed34:	2101      	movs	r1, #1
 800ed36:	4618      	mov	r0, r3
 800ed38:	f000 fd7e 	bl	800f838 <RCCEx_PLL3_Config>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800ed42:	e004      	b.n	800ed4e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ed44:	2301      	movs	r3, #1
 800ed46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ed4a:	e000      	b.n	800ed4e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800ed4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ed4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d10b      	bne.n	800ed6e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ed56:	4b26      	ldr	r3, [pc, #152]	@ (800edf0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ed58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed5a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ed5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ed66:	4a22      	ldr	r2, [pc, #136]	@ (800edf0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ed68:	430b      	orrs	r3, r1
 800ed6a:	6553      	str	r3, [r2, #84]	@ 0x54
 800ed6c:	e003      	b.n	800ed76 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ed72:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ed76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed7e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800ed82:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ed84:	2300      	movs	r3, #0
 800ed86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ed88:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800ed8c:	460b      	mov	r3, r1
 800ed8e:	4313      	orrs	r3, r2
 800ed90:	d034      	beq.n	800edfc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ed92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d003      	beq.n	800eda4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800ed9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eda0:	d007      	beq.n	800edb2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800eda2:	e011      	b.n	800edc8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eda4:	4b12      	ldr	r3, [pc, #72]	@ (800edf0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800eda6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eda8:	4a11      	ldr	r2, [pc, #68]	@ (800edf0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800edaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800edae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800edb0:	e00e      	b.n	800edd0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800edb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800edb6:	3308      	adds	r3, #8
 800edb8:	2102      	movs	r1, #2
 800edba:	4618      	mov	r0, r3
 800edbc:	f000 fc8a 	bl	800f6d4 <RCCEx_PLL2_Config>
 800edc0:	4603      	mov	r3, r0
 800edc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800edc6:	e003      	b.n	800edd0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800edc8:	2301      	movs	r3, #1
 800edca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800edce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800edd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d10d      	bne.n	800edf4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800edd8:	4b05      	ldr	r3, [pc, #20]	@ (800edf0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800edda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eddc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ede0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ede4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ede6:	4a02      	ldr	r2, [pc, #8]	@ (800edf0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ede8:	430b      	orrs	r3, r1
 800edea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800edec:	e006      	b.n	800edfc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800edee:	bf00      	nop
 800edf0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800edf4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800edf8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800edfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee04:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800ee08:	663b      	str	r3, [r7, #96]	@ 0x60
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	667b      	str	r3, [r7, #100]	@ 0x64
 800ee0e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800ee12:	460b      	mov	r3, r1
 800ee14:	4313      	orrs	r3, r2
 800ee16:	d00c      	beq.n	800ee32 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ee18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee1c:	3328      	adds	r3, #40	@ 0x28
 800ee1e:	2102      	movs	r1, #2
 800ee20:	4618      	mov	r0, r3
 800ee22:	f000 fd09 	bl	800f838 <RCCEx_PLL3_Config>
 800ee26:	4603      	mov	r3, r0
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d002      	beq.n	800ee32 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800ee2c:	2301      	movs	r3, #1
 800ee2e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ee32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee3a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800ee3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ee40:	2300      	movs	r3, #0
 800ee42:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ee44:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800ee48:	460b      	mov	r3, r1
 800ee4a:	4313      	orrs	r3, r2
 800ee4c:	d036      	beq.n	800eebc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ee4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ee58:	d018      	beq.n	800ee8c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800ee5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ee5e:	d811      	bhi.n	800ee84 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ee60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ee64:	d014      	beq.n	800ee90 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800ee66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ee6a:	d80b      	bhi.n	800ee84 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d011      	beq.n	800ee94 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800ee70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ee74:	d106      	bne.n	800ee84 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ee76:	4bb7      	ldr	r3, [pc, #732]	@ (800f154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ee78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee7a:	4ab6      	ldr	r2, [pc, #728]	@ (800f154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ee7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ee80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ee82:	e008      	b.n	800ee96 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ee84:	2301      	movs	r3, #1
 800ee86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ee8a:	e004      	b.n	800ee96 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ee8c:	bf00      	nop
 800ee8e:	e002      	b.n	800ee96 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ee90:	bf00      	nop
 800ee92:	e000      	b.n	800ee96 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ee94:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ee96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d10a      	bne.n	800eeb4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ee9e:	4bad      	ldr	r3, [pc, #692]	@ (800f154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800eea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eea2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800eea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eeaa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eeac:	4aa9      	ldr	r2, [pc, #676]	@ (800f154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800eeae:	430b      	orrs	r3, r1
 800eeb0:	6553      	str	r3, [r2, #84]	@ 0x54
 800eeb2:	e003      	b.n	800eebc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eeb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eeb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800eebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eec4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800eec8:	653b      	str	r3, [r7, #80]	@ 0x50
 800eeca:	2300      	movs	r3, #0
 800eecc:	657b      	str	r3, [r7, #84]	@ 0x54
 800eece:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800eed2:	460b      	mov	r3, r1
 800eed4:	4313      	orrs	r3, r2
 800eed6:	d009      	beq.n	800eeec <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800eed8:	4b9e      	ldr	r3, [pc, #632]	@ (800f154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800eeda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eedc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800eee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eee6:	4a9b      	ldr	r2, [pc, #620]	@ (800f154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800eee8:	430b      	orrs	r3, r1
 800eeea:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800eeec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800eef8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eefa:	2300      	movs	r3, #0
 800eefc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eefe:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800ef02:	460b      	mov	r3, r1
 800ef04:	4313      	orrs	r3, r2
 800ef06:	d009      	beq.n	800ef1c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ef08:	4b92      	ldr	r3, [pc, #584]	@ (800f154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ef0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ef0c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800ef10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ef16:	4a8f      	ldr	r2, [pc, #572]	@ (800f154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ef18:	430b      	orrs	r3, r1
 800ef1a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ef1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef24:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800ef28:	643b      	str	r3, [r7, #64]	@ 0x40
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ef2e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800ef32:	460b      	mov	r3, r1
 800ef34:	4313      	orrs	r3, r2
 800ef36:	d00e      	beq.n	800ef56 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ef38:	4b86      	ldr	r3, [pc, #536]	@ (800f154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ef3a:	691b      	ldr	r3, [r3, #16]
 800ef3c:	4a85      	ldr	r2, [pc, #532]	@ (800f154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ef3e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ef42:	6113      	str	r3, [r2, #16]
 800ef44:	4b83      	ldr	r3, [pc, #524]	@ (800f154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ef46:	6919      	ldr	r1, [r3, #16]
 800ef48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ef50:	4a80      	ldr	r2, [pc, #512]	@ (800f154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ef52:	430b      	orrs	r3, r1
 800ef54:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ef56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef5e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800ef62:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ef64:	2300      	movs	r3, #0
 800ef66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef68:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800ef6c:	460b      	mov	r3, r1
 800ef6e:	4313      	orrs	r3, r2
 800ef70:	d009      	beq.n	800ef86 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ef72:	4b78      	ldr	r3, [pc, #480]	@ (800f154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ef74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ef76:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800ef7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef80:	4a74      	ldr	r2, [pc, #464]	@ (800f154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ef82:	430b      	orrs	r3, r1
 800ef84:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ef86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef8e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800ef92:	633b      	str	r3, [r7, #48]	@ 0x30
 800ef94:	2300      	movs	r3, #0
 800ef96:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef98:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800ef9c:	460b      	mov	r3, r1
 800ef9e:	4313      	orrs	r3, r2
 800efa0:	d00a      	beq.n	800efb8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800efa2:	4b6c      	ldr	r3, [pc, #432]	@ (800f154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800efa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800efa6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800efaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800efb2:	4a68      	ldr	r2, [pc, #416]	@ (800f154 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800efb4:	430b      	orrs	r3, r1
 800efb6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800efb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc0:	2100      	movs	r1, #0
 800efc2:	62b9      	str	r1, [r7, #40]	@ 0x28
 800efc4:	f003 0301 	and.w	r3, r3, #1
 800efc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800efca:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800efce:	460b      	mov	r3, r1
 800efd0:	4313      	orrs	r3, r2
 800efd2:	d011      	beq.n	800eff8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800efd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efd8:	3308      	adds	r3, #8
 800efda:	2100      	movs	r1, #0
 800efdc:	4618      	mov	r0, r3
 800efde:	f000 fb79 	bl	800f6d4 <RCCEx_PLL2_Config>
 800efe2:	4603      	mov	r3, r0
 800efe4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800efe8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800efec:	2b00      	cmp	r3, #0
 800efee:	d003      	beq.n	800eff8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eff0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eff4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800eff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800effc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f000:	2100      	movs	r1, #0
 800f002:	6239      	str	r1, [r7, #32]
 800f004:	f003 0302 	and.w	r3, r3, #2
 800f008:	627b      	str	r3, [r7, #36]	@ 0x24
 800f00a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800f00e:	460b      	mov	r3, r1
 800f010:	4313      	orrs	r3, r2
 800f012:	d011      	beq.n	800f038 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f018:	3308      	adds	r3, #8
 800f01a:	2101      	movs	r1, #1
 800f01c:	4618      	mov	r0, r3
 800f01e:	f000 fb59 	bl	800f6d4 <RCCEx_PLL2_Config>
 800f022:	4603      	mov	r3, r0
 800f024:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800f028:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d003      	beq.n	800f038 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f030:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f034:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800f038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f040:	2100      	movs	r1, #0
 800f042:	61b9      	str	r1, [r7, #24]
 800f044:	f003 0304 	and.w	r3, r3, #4
 800f048:	61fb      	str	r3, [r7, #28]
 800f04a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800f04e:	460b      	mov	r3, r1
 800f050:	4313      	orrs	r3, r2
 800f052:	d011      	beq.n	800f078 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f058:	3308      	adds	r3, #8
 800f05a:	2102      	movs	r1, #2
 800f05c:	4618      	mov	r0, r3
 800f05e:	f000 fb39 	bl	800f6d4 <RCCEx_PLL2_Config>
 800f062:	4603      	mov	r3, r0
 800f064:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800f068:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d003      	beq.n	800f078 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f070:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f074:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800f078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f080:	2100      	movs	r1, #0
 800f082:	6139      	str	r1, [r7, #16]
 800f084:	f003 0308 	and.w	r3, r3, #8
 800f088:	617b      	str	r3, [r7, #20]
 800f08a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800f08e:	460b      	mov	r3, r1
 800f090:	4313      	orrs	r3, r2
 800f092:	d011      	beq.n	800f0b8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f098:	3328      	adds	r3, #40	@ 0x28
 800f09a:	2100      	movs	r1, #0
 800f09c:	4618      	mov	r0, r3
 800f09e:	f000 fbcb 	bl	800f838 <RCCEx_PLL3_Config>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800f0a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d003      	beq.n	800f0b8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f0b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f0b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800f0b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c0:	2100      	movs	r1, #0
 800f0c2:	60b9      	str	r1, [r7, #8]
 800f0c4:	f003 0310 	and.w	r3, r3, #16
 800f0c8:	60fb      	str	r3, [r7, #12]
 800f0ca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f0ce:	460b      	mov	r3, r1
 800f0d0:	4313      	orrs	r3, r2
 800f0d2:	d011      	beq.n	800f0f8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f0d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0d8:	3328      	adds	r3, #40	@ 0x28
 800f0da:	2101      	movs	r1, #1
 800f0dc:	4618      	mov	r0, r3
 800f0de:	f000 fbab 	bl	800f838 <RCCEx_PLL3_Config>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800f0e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d003      	beq.n	800f0f8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f0f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f0f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800f0f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f100:	2100      	movs	r1, #0
 800f102:	6039      	str	r1, [r7, #0]
 800f104:	f003 0320 	and.w	r3, r3, #32
 800f108:	607b      	str	r3, [r7, #4]
 800f10a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f10e:	460b      	mov	r3, r1
 800f110:	4313      	orrs	r3, r2
 800f112:	d011      	beq.n	800f138 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f118:	3328      	adds	r3, #40	@ 0x28
 800f11a:	2102      	movs	r1, #2
 800f11c:	4618      	mov	r0, r3
 800f11e:	f000 fb8b 	bl	800f838 <RCCEx_PLL3_Config>
 800f122:	4603      	mov	r3, r0
 800f124:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800f128:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d003      	beq.n	800f138 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f130:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f134:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800f138:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d101      	bne.n	800f144 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800f140:	2300      	movs	r3, #0
 800f142:	e000      	b.n	800f146 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800f144:	2301      	movs	r3, #1
}
 800f146:	4618      	mov	r0, r3
 800f148:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800f14c:	46bd      	mov	sp, r7
 800f14e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f152:	bf00      	nop
 800f154:	58024400 	.word	0x58024400

0800f158 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800f15c:	f7fe fe00 	bl	800dd60 <HAL_RCC_GetHCLKFreq>
 800f160:	4602      	mov	r2, r0
 800f162:	4b06      	ldr	r3, [pc, #24]	@ (800f17c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800f164:	6a1b      	ldr	r3, [r3, #32]
 800f166:	091b      	lsrs	r3, r3, #4
 800f168:	f003 0307 	and.w	r3, r3, #7
 800f16c:	4904      	ldr	r1, [pc, #16]	@ (800f180 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800f16e:	5ccb      	ldrb	r3, [r1, r3]
 800f170:	f003 031f 	and.w	r3, r3, #31
 800f174:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800f178:	4618      	mov	r0, r3
 800f17a:	bd80      	pop	{r7, pc}
 800f17c:	58024400 	.word	0x58024400
 800f180:	0802e310 	.word	0x0802e310

0800f184 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800f184:	b480      	push	{r7}
 800f186:	b089      	sub	sp, #36	@ 0x24
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f18c:	4ba1      	ldr	r3, [pc, #644]	@ (800f414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f18e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f190:	f003 0303 	and.w	r3, r3, #3
 800f194:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800f196:	4b9f      	ldr	r3, [pc, #636]	@ (800f414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f19a:	0b1b      	lsrs	r3, r3, #12
 800f19c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f1a0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800f1a2:	4b9c      	ldr	r3, [pc, #624]	@ (800f414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f1a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1a6:	091b      	lsrs	r3, r3, #4
 800f1a8:	f003 0301 	and.w	r3, r3, #1
 800f1ac:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800f1ae:	4b99      	ldr	r3, [pc, #612]	@ (800f414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f1b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f1b2:	08db      	lsrs	r3, r3, #3
 800f1b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f1b8:	693a      	ldr	r2, [r7, #16]
 800f1ba:	fb02 f303 	mul.w	r3, r2, r3
 800f1be:	ee07 3a90 	vmov	s15, r3
 800f1c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f1c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800f1ca:	697b      	ldr	r3, [r7, #20]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	f000 8111 	beq.w	800f3f4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800f1d2:	69bb      	ldr	r3, [r7, #24]
 800f1d4:	2b02      	cmp	r3, #2
 800f1d6:	f000 8083 	beq.w	800f2e0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800f1da:	69bb      	ldr	r3, [r7, #24]
 800f1dc:	2b02      	cmp	r3, #2
 800f1de:	f200 80a1 	bhi.w	800f324 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800f1e2:	69bb      	ldr	r3, [r7, #24]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d003      	beq.n	800f1f0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800f1e8:	69bb      	ldr	r3, [r7, #24]
 800f1ea:	2b01      	cmp	r3, #1
 800f1ec:	d056      	beq.n	800f29c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800f1ee:	e099      	b.n	800f324 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f1f0:	4b88      	ldr	r3, [pc, #544]	@ (800f414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	f003 0320 	and.w	r3, r3, #32
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d02d      	beq.n	800f258 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f1fc:	4b85      	ldr	r3, [pc, #532]	@ (800f414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	08db      	lsrs	r3, r3, #3
 800f202:	f003 0303 	and.w	r3, r3, #3
 800f206:	4a84      	ldr	r2, [pc, #528]	@ (800f418 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800f208:	fa22 f303 	lsr.w	r3, r2, r3
 800f20c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f20e:	68bb      	ldr	r3, [r7, #8]
 800f210:	ee07 3a90 	vmov	s15, r3
 800f214:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f218:	697b      	ldr	r3, [r7, #20]
 800f21a:	ee07 3a90 	vmov	s15, r3
 800f21e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f226:	4b7b      	ldr	r3, [pc, #492]	@ (800f414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f22a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f22e:	ee07 3a90 	vmov	s15, r3
 800f232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f236:	ed97 6a03 	vldr	s12, [r7, #12]
 800f23a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800f41c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f23e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f246:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f24a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f24e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f252:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f256:	e087      	b.n	800f368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f258:	697b      	ldr	r3, [r7, #20]
 800f25a:	ee07 3a90 	vmov	s15, r3
 800f25e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f262:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800f420 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800f266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f26a:	4b6a      	ldr	r3, [pc, #424]	@ (800f414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f26c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f26e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f272:	ee07 3a90 	vmov	s15, r3
 800f276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f27a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f27e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800f41c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f28a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f28e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f292:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f296:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f29a:	e065      	b.n	800f368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f29c:	697b      	ldr	r3, [r7, #20]
 800f29e:	ee07 3a90 	vmov	s15, r3
 800f2a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f2a6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800f424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f2aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f2ae:	4b59      	ldr	r3, [pc, #356]	@ (800f414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f2b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2b6:	ee07 3a90 	vmov	s15, r3
 800f2ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f2be:	ed97 6a03 	vldr	s12, [r7, #12]
 800f2c2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800f41c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f2c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f2ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f2ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f2d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f2d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f2da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f2de:	e043      	b.n	800f368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f2e0:	697b      	ldr	r3, [r7, #20]
 800f2e2:	ee07 3a90 	vmov	s15, r3
 800f2e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f2ea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800f428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800f2ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f2f2:	4b48      	ldr	r3, [pc, #288]	@ (800f414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f2f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2fa:	ee07 3a90 	vmov	s15, r3
 800f2fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f302:	ed97 6a03 	vldr	s12, [r7, #12]
 800f306:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800f41c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f30a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f30e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f312:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f31a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f31e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f322:	e021      	b.n	800f368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	ee07 3a90 	vmov	s15, r3
 800f32a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f32e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800f424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f336:	4b37      	ldr	r3, [pc, #220]	@ (800f414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f33a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f33e:	ee07 3a90 	vmov	s15, r3
 800f342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f346:	ed97 6a03 	vldr	s12, [r7, #12]
 800f34a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800f41c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f34e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f356:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f35a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f35e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f362:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f366:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800f368:	4b2a      	ldr	r3, [pc, #168]	@ (800f414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f36a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f36c:	0a5b      	lsrs	r3, r3, #9
 800f36e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f372:	ee07 3a90 	vmov	s15, r3
 800f376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f37a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f37e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f382:	edd7 6a07 	vldr	s13, [r7, #28]
 800f386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f38a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f38e:	ee17 2a90 	vmov	r2, s15
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800f396:	4b1f      	ldr	r3, [pc, #124]	@ (800f414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f39a:	0c1b      	lsrs	r3, r3, #16
 800f39c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f3a0:	ee07 3a90 	vmov	s15, r3
 800f3a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f3a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f3ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f3b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800f3b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f3b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f3bc:	ee17 2a90 	vmov	r2, s15
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800f3c4:	4b13      	ldr	r3, [pc, #76]	@ (800f414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f3c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f3c8:	0e1b      	lsrs	r3, r3, #24
 800f3ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f3ce:	ee07 3a90 	vmov	s15, r3
 800f3d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f3d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f3da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f3de:	edd7 6a07 	vldr	s13, [r7, #28]
 800f3e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f3e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f3ea:	ee17 2a90 	vmov	r2, s15
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800f3f2:	e008      	b.n	800f406 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2200      	movs	r2, #0
 800f404:	609a      	str	r2, [r3, #8]
}
 800f406:	bf00      	nop
 800f408:	3724      	adds	r7, #36	@ 0x24
 800f40a:	46bd      	mov	sp, r7
 800f40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f410:	4770      	bx	lr
 800f412:	bf00      	nop
 800f414:	58024400 	.word	0x58024400
 800f418:	03d09000 	.word	0x03d09000
 800f41c:	46000000 	.word	0x46000000
 800f420:	4c742400 	.word	0x4c742400
 800f424:	4a742400 	.word	0x4a742400
 800f428:	4bbebc20 	.word	0x4bbebc20

0800f42c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800f42c:	b480      	push	{r7}
 800f42e:	b089      	sub	sp, #36	@ 0x24
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f434:	4ba1      	ldr	r3, [pc, #644]	@ (800f6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f438:	f003 0303 	and.w	r3, r3, #3
 800f43c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800f43e:	4b9f      	ldr	r3, [pc, #636]	@ (800f6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f442:	0d1b      	lsrs	r3, r3, #20
 800f444:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f448:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800f44a:	4b9c      	ldr	r3, [pc, #624]	@ (800f6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f44c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f44e:	0a1b      	lsrs	r3, r3, #8
 800f450:	f003 0301 	and.w	r3, r3, #1
 800f454:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800f456:	4b99      	ldr	r3, [pc, #612]	@ (800f6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f45a:	08db      	lsrs	r3, r3, #3
 800f45c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f460:	693a      	ldr	r2, [r7, #16]
 800f462:	fb02 f303 	mul.w	r3, r2, r3
 800f466:	ee07 3a90 	vmov	s15, r3
 800f46a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f46e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800f472:	697b      	ldr	r3, [r7, #20]
 800f474:	2b00      	cmp	r3, #0
 800f476:	f000 8111 	beq.w	800f69c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800f47a:	69bb      	ldr	r3, [r7, #24]
 800f47c:	2b02      	cmp	r3, #2
 800f47e:	f000 8083 	beq.w	800f588 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800f482:	69bb      	ldr	r3, [r7, #24]
 800f484:	2b02      	cmp	r3, #2
 800f486:	f200 80a1 	bhi.w	800f5cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800f48a:	69bb      	ldr	r3, [r7, #24]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d003      	beq.n	800f498 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800f490:	69bb      	ldr	r3, [r7, #24]
 800f492:	2b01      	cmp	r3, #1
 800f494:	d056      	beq.n	800f544 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800f496:	e099      	b.n	800f5cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f498:	4b88      	ldr	r3, [pc, #544]	@ (800f6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	f003 0320 	and.w	r3, r3, #32
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d02d      	beq.n	800f500 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f4a4:	4b85      	ldr	r3, [pc, #532]	@ (800f6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	08db      	lsrs	r3, r3, #3
 800f4aa:	f003 0303 	and.w	r3, r3, #3
 800f4ae:	4a84      	ldr	r2, [pc, #528]	@ (800f6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800f4b0:	fa22 f303 	lsr.w	r3, r2, r3
 800f4b4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	ee07 3a90 	vmov	s15, r3
 800f4bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f4c0:	697b      	ldr	r3, [r7, #20]
 800f4c2:	ee07 3a90 	vmov	s15, r3
 800f4c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f4ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f4ce:	4b7b      	ldr	r3, [pc, #492]	@ (800f6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f4d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f4d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f4d6:	ee07 3a90 	vmov	s15, r3
 800f4da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f4de:	ed97 6a03 	vldr	s12, [r7, #12]
 800f4e2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800f6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f4e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f4ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f4ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f4f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f4f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f4fe:	e087      	b.n	800f610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f500:	697b      	ldr	r3, [r7, #20]
 800f502:	ee07 3a90 	vmov	s15, r3
 800f506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f50a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800f6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800f50e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f512:	4b6a      	ldr	r3, [pc, #424]	@ (800f6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f51a:	ee07 3a90 	vmov	s15, r3
 800f51e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f522:	ed97 6a03 	vldr	s12, [r7, #12]
 800f526:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800f6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f52a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f52e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f532:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f53a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f53e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f542:	e065      	b.n	800f610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f544:	697b      	ldr	r3, [r7, #20]
 800f546:	ee07 3a90 	vmov	s15, r3
 800f54a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f54e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800f6cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f556:	4b59      	ldr	r3, [pc, #356]	@ (800f6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f55a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f55e:	ee07 3a90 	vmov	s15, r3
 800f562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f566:	ed97 6a03 	vldr	s12, [r7, #12]
 800f56a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800f6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f56e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f576:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f57a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f57e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f582:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f586:	e043      	b.n	800f610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f588:	697b      	ldr	r3, [r7, #20]
 800f58a:	ee07 3a90 	vmov	s15, r3
 800f58e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f592:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800f6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800f596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f59a:	4b48      	ldr	r3, [pc, #288]	@ (800f6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f59c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f59e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5a2:	ee07 3a90 	vmov	s15, r3
 800f5a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f5aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800f5ae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800f6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f5b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f5b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f5ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f5be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f5c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f5c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f5ca:	e021      	b.n	800f610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f5cc:	697b      	ldr	r3, [r7, #20]
 800f5ce:	ee07 3a90 	vmov	s15, r3
 800f5d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f5d6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800f6cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f5da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f5de:	4b37      	ldr	r3, [pc, #220]	@ (800f6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f5e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5e6:	ee07 3a90 	vmov	s15, r3
 800f5ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f5ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800f5f2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800f6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f5f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f5fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f5fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f60a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f60e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800f610:	4b2a      	ldr	r3, [pc, #168]	@ (800f6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f614:	0a5b      	lsrs	r3, r3, #9
 800f616:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f61a:	ee07 3a90 	vmov	s15, r3
 800f61e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f622:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f626:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f62a:	edd7 6a07 	vldr	s13, [r7, #28]
 800f62e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f636:	ee17 2a90 	vmov	r2, s15
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800f63e:	4b1f      	ldr	r3, [pc, #124]	@ (800f6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f642:	0c1b      	lsrs	r3, r3, #16
 800f644:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f648:	ee07 3a90 	vmov	s15, r3
 800f64c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f650:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f654:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f658:	edd7 6a07 	vldr	s13, [r7, #28]
 800f65c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f664:	ee17 2a90 	vmov	r2, s15
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800f66c:	4b13      	ldr	r3, [pc, #76]	@ (800f6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f66e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f670:	0e1b      	lsrs	r3, r3, #24
 800f672:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f676:	ee07 3a90 	vmov	s15, r3
 800f67a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f67e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f682:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f686:	edd7 6a07 	vldr	s13, [r7, #28]
 800f68a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f68e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f692:	ee17 2a90 	vmov	r2, s15
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800f69a:	e008      	b.n	800f6ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2200      	movs	r2, #0
 800f6a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	609a      	str	r2, [r3, #8]
}
 800f6ae:	bf00      	nop
 800f6b0:	3724      	adds	r7, #36	@ 0x24
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b8:	4770      	bx	lr
 800f6ba:	bf00      	nop
 800f6bc:	58024400 	.word	0x58024400
 800f6c0:	03d09000 	.word	0x03d09000
 800f6c4:	46000000 	.word	0x46000000
 800f6c8:	4c742400 	.word	0x4c742400
 800f6cc:	4a742400 	.word	0x4a742400
 800f6d0:	4bbebc20 	.word	0x4bbebc20

0800f6d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b084      	sub	sp, #16
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
 800f6dc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f6de:	2300      	movs	r3, #0
 800f6e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f6e2:	4b53      	ldr	r3, [pc, #332]	@ (800f830 <RCCEx_PLL2_Config+0x15c>)
 800f6e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f6e6:	f003 0303 	and.w	r3, r3, #3
 800f6ea:	2b03      	cmp	r3, #3
 800f6ec:	d101      	bne.n	800f6f2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800f6ee:	2301      	movs	r3, #1
 800f6f0:	e099      	b.n	800f826 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800f6f2:	4b4f      	ldr	r3, [pc, #316]	@ (800f830 <RCCEx_PLL2_Config+0x15c>)
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	4a4e      	ldr	r2, [pc, #312]	@ (800f830 <RCCEx_PLL2_Config+0x15c>)
 800f6f8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f6fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f6fe:	f7fa f9c9 	bl	8009a94 <HAL_GetTick>
 800f702:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f704:	e008      	b.n	800f718 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f706:	f7fa f9c5 	bl	8009a94 <HAL_GetTick>
 800f70a:	4602      	mov	r2, r0
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	1ad3      	subs	r3, r2, r3
 800f710:	2b02      	cmp	r3, #2
 800f712:	d901      	bls.n	800f718 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f714:	2303      	movs	r3, #3
 800f716:	e086      	b.n	800f826 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f718:	4b45      	ldr	r3, [pc, #276]	@ (800f830 <RCCEx_PLL2_Config+0x15c>)
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f720:	2b00      	cmp	r3, #0
 800f722:	d1f0      	bne.n	800f706 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800f724:	4b42      	ldr	r3, [pc, #264]	@ (800f830 <RCCEx_PLL2_Config+0x15c>)
 800f726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f728:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	031b      	lsls	r3, r3, #12
 800f732:	493f      	ldr	r1, [pc, #252]	@ (800f830 <RCCEx_PLL2_Config+0x15c>)
 800f734:	4313      	orrs	r3, r2
 800f736:	628b      	str	r3, [r1, #40]	@ 0x28
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	685b      	ldr	r3, [r3, #4]
 800f73c:	3b01      	subs	r3, #1
 800f73e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	689b      	ldr	r3, [r3, #8]
 800f746:	3b01      	subs	r3, #1
 800f748:	025b      	lsls	r3, r3, #9
 800f74a:	b29b      	uxth	r3, r3
 800f74c:	431a      	orrs	r2, r3
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	68db      	ldr	r3, [r3, #12]
 800f752:	3b01      	subs	r3, #1
 800f754:	041b      	lsls	r3, r3, #16
 800f756:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800f75a:	431a      	orrs	r2, r3
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	691b      	ldr	r3, [r3, #16]
 800f760:	3b01      	subs	r3, #1
 800f762:	061b      	lsls	r3, r3, #24
 800f764:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800f768:	4931      	ldr	r1, [pc, #196]	@ (800f830 <RCCEx_PLL2_Config+0x15c>)
 800f76a:	4313      	orrs	r3, r2
 800f76c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800f76e:	4b30      	ldr	r3, [pc, #192]	@ (800f830 <RCCEx_PLL2_Config+0x15c>)
 800f770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f772:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	695b      	ldr	r3, [r3, #20]
 800f77a:	492d      	ldr	r1, [pc, #180]	@ (800f830 <RCCEx_PLL2_Config+0x15c>)
 800f77c:	4313      	orrs	r3, r2
 800f77e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800f780:	4b2b      	ldr	r3, [pc, #172]	@ (800f830 <RCCEx_PLL2_Config+0x15c>)
 800f782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f784:	f023 0220 	bic.w	r2, r3, #32
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	699b      	ldr	r3, [r3, #24]
 800f78c:	4928      	ldr	r1, [pc, #160]	@ (800f830 <RCCEx_PLL2_Config+0x15c>)
 800f78e:	4313      	orrs	r3, r2
 800f790:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800f792:	4b27      	ldr	r3, [pc, #156]	@ (800f830 <RCCEx_PLL2_Config+0x15c>)
 800f794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f796:	4a26      	ldr	r2, [pc, #152]	@ (800f830 <RCCEx_PLL2_Config+0x15c>)
 800f798:	f023 0310 	bic.w	r3, r3, #16
 800f79c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800f79e:	4b24      	ldr	r3, [pc, #144]	@ (800f830 <RCCEx_PLL2_Config+0x15c>)
 800f7a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f7a2:	4b24      	ldr	r3, [pc, #144]	@ (800f834 <RCCEx_PLL2_Config+0x160>)
 800f7a4:	4013      	ands	r3, r2
 800f7a6:	687a      	ldr	r2, [r7, #4]
 800f7a8:	69d2      	ldr	r2, [r2, #28]
 800f7aa:	00d2      	lsls	r2, r2, #3
 800f7ac:	4920      	ldr	r1, [pc, #128]	@ (800f830 <RCCEx_PLL2_Config+0x15c>)
 800f7ae:	4313      	orrs	r3, r2
 800f7b0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800f7b2:	4b1f      	ldr	r3, [pc, #124]	@ (800f830 <RCCEx_PLL2_Config+0x15c>)
 800f7b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7b6:	4a1e      	ldr	r2, [pc, #120]	@ (800f830 <RCCEx_PLL2_Config+0x15c>)
 800f7b8:	f043 0310 	orr.w	r3, r3, #16
 800f7bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d106      	bne.n	800f7d2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800f7c4:	4b1a      	ldr	r3, [pc, #104]	@ (800f830 <RCCEx_PLL2_Config+0x15c>)
 800f7c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7c8:	4a19      	ldr	r2, [pc, #100]	@ (800f830 <RCCEx_PLL2_Config+0x15c>)
 800f7ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f7ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f7d0:	e00f      	b.n	800f7f2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f7d2:	683b      	ldr	r3, [r7, #0]
 800f7d4:	2b01      	cmp	r3, #1
 800f7d6:	d106      	bne.n	800f7e6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800f7d8:	4b15      	ldr	r3, [pc, #84]	@ (800f830 <RCCEx_PLL2_Config+0x15c>)
 800f7da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7dc:	4a14      	ldr	r2, [pc, #80]	@ (800f830 <RCCEx_PLL2_Config+0x15c>)
 800f7de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f7e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f7e4:	e005      	b.n	800f7f2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800f7e6:	4b12      	ldr	r3, [pc, #72]	@ (800f830 <RCCEx_PLL2_Config+0x15c>)
 800f7e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7ea:	4a11      	ldr	r2, [pc, #68]	@ (800f830 <RCCEx_PLL2_Config+0x15c>)
 800f7ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f7f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800f7f2:	4b0f      	ldr	r3, [pc, #60]	@ (800f830 <RCCEx_PLL2_Config+0x15c>)
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	4a0e      	ldr	r2, [pc, #56]	@ (800f830 <RCCEx_PLL2_Config+0x15c>)
 800f7f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f7fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f7fe:	f7fa f949 	bl	8009a94 <HAL_GetTick>
 800f802:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f804:	e008      	b.n	800f818 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f806:	f7fa f945 	bl	8009a94 <HAL_GetTick>
 800f80a:	4602      	mov	r2, r0
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	1ad3      	subs	r3, r2, r3
 800f810:	2b02      	cmp	r3, #2
 800f812:	d901      	bls.n	800f818 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f814:	2303      	movs	r3, #3
 800f816:	e006      	b.n	800f826 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f818:	4b05      	ldr	r3, [pc, #20]	@ (800f830 <RCCEx_PLL2_Config+0x15c>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f820:	2b00      	cmp	r3, #0
 800f822:	d0f0      	beq.n	800f806 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800f824:	7bfb      	ldrb	r3, [r7, #15]
}
 800f826:	4618      	mov	r0, r3
 800f828:	3710      	adds	r7, #16
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd80      	pop	{r7, pc}
 800f82e:	bf00      	nop
 800f830:	58024400 	.word	0x58024400
 800f834:	ffff0007 	.word	0xffff0007

0800f838 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b084      	sub	sp, #16
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
 800f840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f842:	2300      	movs	r3, #0
 800f844:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f846:	4b53      	ldr	r3, [pc, #332]	@ (800f994 <RCCEx_PLL3_Config+0x15c>)
 800f848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f84a:	f003 0303 	and.w	r3, r3, #3
 800f84e:	2b03      	cmp	r3, #3
 800f850:	d101      	bne.n	800f856 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800f852:	2301      	movs	r3, #1
 800f854:	e099      	b.n	800f98a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800f856:	4b4f      	ldr	r3, [pc, #316]	@ (800f994 <RCCEx_PLL3_Config+0x15c>)
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	4a4e      	ldr	r2, [pc, #312]	@ (800f994 <RCCEx_PLL3_Config+0x15c>)
 800f85c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f860:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f862:	f7fa f917 	bl	8009a94 <HAL_GetTick>
 800f866:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f868:	e008      	b.n	800f87c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f86a:	f7fa f913 	bl	8009a94 <HAL_GetTick>
 800f86e:	4602      	mov	r2, r0
 800f870:	68bb      	ldr	r3, [r7, #8]
 800f872:	1ad3      	subs	r3, r2, r3
 800f874:	2b02      	cmp	r3, #2
 800f876:	d901      	bls.n	800f87c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f878:	2303      	movs	r3, #3
 800f87a:	e086      	b.n	800f98a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f87c:	4b45      	ldr	r3, [pc, #276]	@ (800f994 <RCCEx_PLL3_Config+0x15c>)
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f884:	2b00      	cmp	r3, #0
 800f886:	d1f0      	bne.n	800f86a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800f888:	4b42      	ldr	r3, [pc, #264]	@ (800f994 <RCCEx_PLL3_Config+0x15c>)
 800f88a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f88c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	051b      	lsls	r3, r3, #20
 800f896:	493f      	ldr	r1, [pc, #252]	@ (800f994 <RCCEx_PLL3_Config+0x15c>)
 800f898:	4313      	orrs	r3, r2
 800f89a:	628b      	str	r3, [r1, #40]	@ 0x28
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	685b      	ldr	r3, [r3, #4]
 800f8a0:	3b01      	subs	r3, #1
 800f8a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	689b      	ldr	r3, [r3, #8]
 800f8aa:	3b01      	subs	r3, #1
 800f8ac:	025b      	lsls	r3, r3, #9
 800f8ae:	b29b      	uxth	r3, r3
 800f8b0:	431a      	orrs	r2, r3
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	68db      	ldr	r3, [r3, #12]
 800f8b6:	3b01      	subs	r3, #1
 800f8b8:	041b      	lsls	r3, r3, #16
 800f8ba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800f8be:	431a      	orrs	r2, r3
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	691b      	ldr	r3, [r3, #16]
 800f8c4:	3b01      	subs	r3, #1
 800f8c6:	061b      	lsls	r3, r3, #24
 800f8c8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800f8cc:	4931      	ldr	r1, [pc, #196]	@ (800f994 <RCCEx_PLL3_Config+0x15c>)
 800f8ce:	4313      	orrs	r3, r2
 800f8d0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800f8d2:	4b30      	ldr	r3, [pc, #192]	@ (800f994 <RCCEx_PLL3_Config+0x15c>)
 800f8d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8d6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	695b      	ldr	r3, [r3, #20]
 800f8de:	492d      	ldr	r1, [pc, #180]	@ (800f994 <RCCEx_PLL3_Config+0x15c>)
 800f8e0:	4313      	orrs	r3, r2
 800f8e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800f8e4:	4b2b      	ldr	r3, [pc, #172]	@ (800f994 <RCCEx_PLL3_Config+0x15c>)
 800f8e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8e8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	699b      	ldr	r3, [r3, #24]
 800f8f0:	4928      	ldr	r1, [pc, #160]	@ (800f994 <RCCEx_PLL3_Config+0x15c>)
 800f8f2:	4313      	orrs	r3, r2
 800f8f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800f8f6:	4b27      	ldr	r3, [pc, #156]	@ (800f994 <RCCEx_PLL3_Config+0x15c>)
 800f8f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8fa:	4a26      	ldr	r2, [pc, #152]	@ (800f994 <RCCEx_PLL3_Config+0x15c>)
 800f8fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f900:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800f902:	4b24      	ldr	r3, [pc, #144]	@ (800f994 <RCCEx_PLL3_Config+0x15c>)
 800f904:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f906:	4b24      	ldr	r3, [pc, #144]	@ (800f998 <RCCEx_PLL3_Config+0x160>)
 800f908:	4013      	ands	r3, r2
 800f90a:	687a      	ldr	r2, [r7, #4]
 800f90c:	69d2      	ldr	r2, [r2, #28]
 800f90e:	00d2      	lsls	r2, r2, #3
 800f910:	4920      	ldr	r1, [pc, #128]	@ (800f994 <RCCEx_PLL3_Config+0x15c>)
 800f912:	4313      	orrs	r3, r2
 800f914:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800f916:	4b1f      	ldr	r3, [pc, #124]	@ (800f994 <RCCEx_PLL3_Config+0x15c>)
 800f918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f91a:	4a1e      	ldr	r2, [pc, #120]	@ (800f994 <RCCEx_PLL3_Config+0x15c>)
 800f91c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f920:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f922:	683b      	ldr	r3, [r7, #0]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d106      	bne.n	800f936 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800f928:	4b1a      	ldr	r3, [pc, #104]	@ (800f994 <RCCEx_PLL3_Config+0x15c>)
 800f92a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f92c:	4a19      	ldr	r2, [pc, #100]	@ (800f994 <RCCEx_PLL3_Config+0x15c>)
 800f92e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800f932:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f934:	e00f      	b.n	800f956 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f936:	683b      	ldr	r3, [r7, #0]
 800f938:	2b01      	cmp	r3, #1
 800f93a:	d106      	bne.n	800f94a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800f93c:	4b15      	ldr	r3, [pc, #84]	@ (800f994 <RCCEx_PLL3_Config+0x15c>)
 800f93e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f940:	4a14      	ldr	r2, [pc, #80]	@ (800f994 <RCCEx_PLL3_Config+0x15c>)
 800f942:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800f946:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f948:	e005      	b.n	800f956 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800f94a:	4b12      	ldr	r3, [pc, #72]	@ (800f994 <RCCEx_PLL3_Config+0x15c>)
 800f94c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f94e:	4a11      	ldr	r2, [pc, #68]	@ (800f994 <RCCEx_PLL3_Config+0x15c>)
 800f950:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f954:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800f956:	4b0f      	ldr	r3, [pc, #60]	@ (800f994 <RCCEx_PLL3_Config+0x15c>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	4a0e      	ldr	r2, [pc, #56]	@ (800f994 <RCCEx_PLL3_Config+0x15c>)
 800f95c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f960:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f962:	f7fa f897 	bl	8009a94 <HAL_GetTick>
 800f966:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f968:	e008      	b.n	800f97c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f96a:	f7fa f893 	bl	8009a94 <HAL_GetTick>
 800f96e:	4602      	mov	r2, r0
 800f970:	68bb      	ldr	r3, [r7, #8]
 800f972:	1ad3      	subs	r3, r2, r3
 800f974:	2b02      	cmp	r3, #2
 800f976:	d901      	bls.n	800f97c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f978:	2303      	movs	r3, #3
 800f97a:	e006      	b.n	800f98a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f97c:	4b05      	ldr	r3, [pc, #20]	@ (800f994 <RCCEx_PLL3_Config+0x15c>)
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f984:	2b00      	cmp	r3, #0
 800f986:	d0f0      	beq.n	800f96a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800f988:	7bfb      	ldrb	r3, [r7, #15]
}
 800f98a:	4618      	mov	r0, r3
 800f98c:	3710      	adds	r7, #16
 800f98e:	46bd      	mov	sp, r7
 800f990:	bd80      	pop	{r7, pc}
 800f992:	bf00      	nop
 800f994:	58024400 	.word	0x58024400
 800f998:	ffff0007 	.word	0xffff0007

0800f99c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b084      	sub	sp, #16
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d101      	bne.n	800f9ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f9aa:	2301      	movs	r3, #1
 800f9ac:	e10f      	b.n	800fbce <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	4a87      	ldr	r2, [pc, #540]	@ (800fbd8 <HAL_SPI_Init+0x23c>)
 800f9ba:	4293      	cmp	r3, r2
 800f9bc:	d00f      	beq.n	800f9de <HAL_SPI_Init+0x42>
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	4a86      	ldr	r2, [pc, #536]	@ (800fbdc <HAL_SPI_Init+0x240>)
 800f9c4:	4293      	cmp	r3, r2
 800f9c6:	d00a      	beq.n	800f9de <HAL_SPI_Init+0x42>
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	4a84      	ldr	r2, [pc, #528]	@ (800fbe0 <HAL_SPI_Init+0x244>)
 800f9ce:	4293      	cmp	r3, r2
 800f9d0:	d005      	beq.n	800f9de <HAL_SPI_Init+0x42>
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	68db      	ldr	r3, [r3, #12]
 800f9d6:	2b0f      	cmp	r3, #15
 800f9d8:	d901      	bls.n	800f9de <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800f9da:	2301      	movs	r3, #1
 800f9dc:	e0f7      	b.n	800fbce <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800f9de:	6878      	ldr	r0, [r7, #4]
 800f9e0:	f001 f870 	bl	8010ac4 <SPI_GetPacketSize>
 800f9e4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	4a7b      	ldr	r2, [pc, #492]	@ (800fbd8 <HAL_SPI_Init+0x23c>)
 800f9ec:	4293      	cmp	r3, r2
 800f9ee:	d00c      	beq.n	800fa0a <HAL_SPI_Init+0x6e>
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	4a79      	ldr	r2, [pc, #484]	@ (800fbdc <HAL_SPI_Init+0x240>)
 800f9f6:	4293      	cmp	r3, r2
 800f9f8:	d007      	beq.n	800fa0a <HAL_SPI_Init+0x6e>
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	4a78      	ldr	r2, [pc, #480]	@ (800fbe0 <HAL_SPI_Init+0x244>)
 800fa00:	4293      	cmp	r3, r2
 800fa02:	d002      	beq.n	800fa0a <HAL_SPI_Init+0x6e>
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	2b08      	cmp	r3, #8
 800fa08:	d811      	bhi.n	800fa2e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800fa0e:	4a72      	ldr	r2, [pc, #456]	@ (800fbd8 <HAL_SPI_Init+0x23c>)
 800fa10:	4293      	cmp	r3, r2
 800fa12:	d009      	beq.n	800fa28 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	4a70      	ldr	r2, [pc, #448]	@ (800fbdc <HAL_SPI_Init+0x240>)
 800fa1a:	4293      	cmp	r3, r2
 800fa1c:	d004      	beq.n	800fa28 <HAL_SPI_Init+0x8c>
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	4a6f      	ldr	r2, [pc, #444]	@ (800fbe0 <HAL_SPI_Init+0x244>)
 800fa24:	4293      	cmp	r3, r2
 800fa26:	d104      	bne.n	800fa32 <HAL_SPI_Init+0x96>
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	2b10      	cmp	r3, #16
 800fa2c:	d901      	bls.n	800fa32 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800fa2e:	2301      	movs	r3, #1
 800fa30:	e0cd      	b.n	800fbce <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800fa38:	b2db      	uxtb	r3, r3
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d106      	bne.n	800fa4c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	2200      	movs	r2, #0
 800fa42:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800fa46:	6878      	ldr	r0, [r7, #4]
 800fa48:	f7f9 fad6 	bl	8008ff8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2202      	movs	r2, #2
 800fa50:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	681a      	ldr	r2, [r3, #0]
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	f022 0201 	bic.w	r2, r2, #1
 800fa62:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	689b      	ldr	r3, [r3, #8]
 800fa6a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800fa6e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	699b      	ldr	r3, [r3, #24]
 800fa74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800fa78:	d119      	bne.n	800faae <HAL_SPI_Init+0x112>
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	685b      	ldr	r3, [r3, #4]
 800fa7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fa82:	d103      	bne.n	800fa8c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d008      	beq.n	800fa9e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d10c      	bne.n	800faae <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800fa98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fa9c:	d107      	bne.n	800faae <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	681a      	ldr	r2, [r3, #0]
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800faac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	685b      	ldr	r3, [r3, #4]
 800fab2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d00f      	beq.n	800fada <HAL_SPI_Init+0x13e>
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	68db      	ldr	r3, [r3, #12]
 800fabe:	2b06      	cmp	r3, #6
 800fac0:	d90b      	bls.n	800fada <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	430a      	orrs	r2, r1
 800fad6:	601a      	str	r2, [r3, #0]
 800fad8:	e007      	b.n	800faea <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	681a      	ldr	r2, [r3, #0]
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800fae8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	69da      	ldr	r2, [r3, #28]
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800faf2:	431a      	orrs	r2, r3
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	431a      	orrs	r2, r3
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fafc:	ea42 0103 	orr.w	r1, r2, r3
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	68da      	ldr	r2, [r3, #12]
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	430a      	orrs	r2, r1
 800fb0a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb14:	431a      	orrs	r2, r3
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb1a:	431a      	orrs	r2, r3
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	699b      	ldr	r3, [r3, #24]
 800fb20:	431a      	orrs	r2, r3
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	691b      	ldr	r3, [r3, #16]
 800fb26:	431a      	orrs	r2, r3
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	695b      	ldr	r3, [r3, #20]
 800fb2c:	431a      	orrs	r2, r3
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	6a1b      	ldr	r3, [r3, #32]
 800fb32:	431a      	orrs	r2, r3
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	685b      	ldr	r3, [r3, #4]
 800fb38:	431a      	orrs	r2, r3
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fb3e:	431a      	orrs	r2, r3
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	689b      	ldr	r3, [r3, #8]
 800fb44:	431a      	orrs	r2, r3
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fb4a:	ea42 0103 	orr.w	r1, r2, r3
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	430a      	orrs	r2, r1
 800fb58:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	685b      	ldr	r3, [r3, #4]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d113      	bne.n	800fb8a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	689b      	ldr	r3, [r3, #8]
 800fb68:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fb74:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	689b      	ldr	r3, [r3, #8]
 800fb7c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800fb88:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	f022 0201 	bic.w	r2, r2, #1
 800fb98:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	685b      	ldr	r3, [r3, #4]
 800fb9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d00a      	beq.n	800fbbc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	68db      	ldr	r3, [r3, #12]
 800fbac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	430a      	orrs	r2, r1
 800fbba:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2201      	movs	r2, #1
 800fbc8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800fbcc:	2300      	movs	r3, #0
}
 800fbce:	4618      	mov	r0, r3
 800fbd0:	3710      	adds	r7, #16
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	bd80      	pop	{r7, pc}
 800fbd6:	bf00      	nop
 800fbd8:	40013000 	.word	0x40013000
 800fbdc:	40003800 	.word	0x40003800
 800fbe0:	40003c00 	.word	0x40003c00

0800fbe4 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b084      	sub	sp, #16
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	60f8      	str	r0, [r7, #12]
 800fbec:	60b9      	str	r1, [r7, #8]
 800fbee:	4613      	mov	r3, r2
 800fbf0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800fbf8:	b2db      	uxtb	r3, r3
 800fbfa:	2b01      	cmp	r3, #1
 800fbfc:	d001      	beq.n	800fc02 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800fbfe:	2302      	movs	r3, #2
 800fc00:	e126      	b.n	800fe50 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800fc02:	68bb      	ldr	r3, [r7, #8]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d002      	beq.n	800fc0e <HAL_SPI_Transmit_DMA+0x2a>
 800fc08:	88fb      	ldrh	r3, [r7, #6]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d101      	bne.n	800fc12 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800fc0e:	2301      	movs	r3, #1
 800fc10:	e11e      	b.n	800fe50 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800fc18:	2b01      	cmp	r3, #1
 800fc1a:	d101      	bne.n	800fc20 <HAL_SPI_Transmit_DMA+0x3c>
 800fc1c:	2302      	movs	r3, #2
 800fc1e:	e117      	b.n	800fe50 <HAL_SPI_Transmit_DMA+0x26c>
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	2201      	movs	r2, #1
 800fc24:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	2203      	movs	r2, #3
 800fc2c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	2200      	movs	r2, #0
 800fc34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	68ba      	ldr	r2, [r7, #8]
 800fc3c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	88fa      	ldrh	r2, [r7, #6]
 800fc42:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	88fa      	ldrh	r2, [r7, #6]
 800fc4a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	2200      	movs	r2, #0
 800fc52:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	2200      	movs	r2, #0
 800fc58:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	2200      	movs	r2, #0
 800fc64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	689b      	ldr	r3, [r3, #8]
 800fc74:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800fc78:	d108      	bne.n	800fc8c <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	681a      	ldr	r2, [r3, #0]
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fc88:	601a      	str	r2, [r3, #0]
 800fc8a:	e009      	b.n	800fca0 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	68db      	ldr	r3, [r3, #12]
 800fc92:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800fc9e:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	68db      	ldr	r3, [r3, #12]
 800fca4:	2b0f      	cmp	r3, #15
 800fca6:	d905      	bls.n	800fcb4 <HAL_SPI_Transmit_DMA+0xd0>
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fcac:	699b      	ldr	r3, [r3, #24]
 800fcae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fcb2:	d10f      	bne.n	800fcd4 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800fcb8:	2b07      	cmp	r3, #7
 800fcba:	d911      	bls.n	800fce0 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fcc0:	699b      	ldr	r3, [r3, #24]
 800fcc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fcc6:	d00b      	beq.n	800fce0 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fccc:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800fcce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fcd2:	d005      	beq.n	800fce0 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800fcdc:	2301      	movs	r3, #1
 800fcde:	e0b7      	b.n	800fe50 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	68db      	ldr	r3, [r3, #12]
 800fce4:	2b07      	cmp	r3, #7
 800fce6:	d820      	bhi.n	800fd2a <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fcec:	699b      	ldr	r3, [r3, #24]
 800fcee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fcf2:	d109      	bne.n	800fd08 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fcfa:	b29b      	uxth	r3, r3
 800fcfc:	3301      	adds	r3, #1
 800fcfe:	105b      	asrs	r3, r3, #1
 800fd00:	b29a      	uxth	r2, r3
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fd0c:	699b      	ldr	r3, [r3, #24]
 800fd0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fd12:	d11e      	bne.n	800fd52 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fd1a:	b29b      	uxth	r3, r3
 800fd1c:	3303      	adds	r3, #3
 800fd1e:	109b      	asrs	r3, r3, #2
 800fd20:	b29a      	uxth	r2, r3
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800fd28:	e013      	b.n	800fd52 <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	68db      	ldr	r3, [r3, #12]
 800fd2e:	2b0f      	cmp	r3, #15
 800fd30:	d80f      	bhi.n	800fd52 <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fd36:	699b      	ldr	r3, [r3, #24]
 800fd38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fd3c:	d109      	bne.n	800fd52 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fd44:	b29b      	uxth	r3, r3
 800fd46:	3301      	adds	r3, #1
 800fd48:	105b      	asrs	r3, r3, #1
 800fd4a:	b29a      	uxth	r2, r3
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fd56:	4a40      	ldr	r2, [pc, #256]	@ (800fe58 <HAL_SPI_Transmit_DMA+0x274>)
 800fd58:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fd5e:	4a3f      	ldr	r2, [pc, #252]	@ (800fe5c <HAL_SPI_Transmit_DMA+0x278>)
 800fd60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fd66:	4a3e      	ldr	r2, [pc, #248]	@ (800fe60 <HAL_SPI_Transmit_DMA+0x27c>)
 800fd68:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fd6e:	2200      	movs	r2, #0
 800fd70:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	689a      	ldr	r2, [r3, #8]
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800fd80:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fd8a:	4619      	mov	r1, r3
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	3320      	adds	r3, #32
 800fd92:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fd9a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800fd9c:	f7fa fbbc 	bl	800a518 <HAL_DMA_Start_IT>
 800fda0:	4603      	mov	r3, r0
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d011      	beq.n	800fdca <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fdac:	f043 0210 	orr.w	r2, r3, #16
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	2201      	movs	r2, #1
 800fdba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800fdc6:	2301      	movs	r3, #1
 800fdc8:	e042      	b.n	800fe50 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fdce:	69db      	ldr	r3, [r3, #28]
 800fdd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fdd4:	d108      	bne.n	800fde8 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	6859      	ldr	r1, [r3, #4]
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	681a      	ldr	r2, [r3, #0]
 800fde0:	4b20      	ldr	r3, [pc, #128]	@ (800fe64 <HAL_SPI_Transmit_DMA+0x280>)
 800fde2:	400b      	ands	r3, r1
 800fde4:	6053      	str	r3, [r2, #4]
 800fde6:	e009      	b.n	800fdfc <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	685a      	ldr	r2, [r3, #4]
 800fdee:	4b1d      	ldr	r3, [pc, #116]	@ (800fe64 <HAL_SPI_Transmit_DMA+0x280>)
 800fdf0:	4013      	ands	r3, r2
 800fdf2:	88f9      	ldrh	r1, [r7, #6]
 800fdf4:	68fa      	ldr	r2, [r7, #12]
 800fdf6:	6812      	ldr	r2, [r2, #0]
 800fdf8:	430b      	orrs	r3, r1
 800fdfa:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	689a      	ldr	r2, [r3, #8]
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800fe0a:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	691a      	ldr	r2, [r3, #16]
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 800fe1a:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	681a      	ldr	r2, [r3, #0]
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	f042 0201 	orr.w	r2, r2, #1
 800fe2a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	685b      	ldr	r3, [r3, #4]
 800fe30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fe34:	d107      	bne.n	800fe46 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	681a      	ldr	r2, [r3, #0]
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800fe44:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	2200      	movs	r2, #0
 800fe4a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800fe4e:	2300      	movs	r3, #0
}
 800fe50:	4618      	mov	r0, r3
 800fe52:	3710      	adds	r7, #16
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}
 800fe58:	08010809 	.word	0x08010809
 800fe5c:	0801077d 	.word	0x0801077d
 800fe60:	08010841 	.word	0x08010841
 800fe64:	ffff0000 	.word	0xffff0000

0800fe68 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b084      	sub	sp, #16
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	60f8      	str	r0, [r7, #12]
 800fe70:	60b9      	str	r1, [r7, #8]
 800fe72:	607a      	str	r2, [r7, #4]
 800fe74:	807b      	strh	r3, [r7, #2]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800fe7c:	b2db      	uxtb	r3, r3
 800fe7e:	2b01      	cmp	r3, #1
 800fe80:	d001      	beq.n	800fe86 <HAL_SPI_TransmitReceive_DMA+0x1e>
  {
    return HAL_BUSY;
 800fe82:	2302      	movs	r3, #2
 800fe84:	e18a      	b.n	801019c <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800fe86:	68bb      	ldr	r3, [r7, #8]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d005      	beq.n	800fe98 <HAL_SPI_TransmitReceive_DMA+0x30>
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d002      	beq.n	800fe98 <HAL_SPI_TransmitReceive_DMA+0x30>
 800fe92:	887b      	ldrh	r3, [r7, #2]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d101      	bne.n	800fe9c <HAL_SPI_TransmitReceive_DMA+0x34>
  {
    return HAL_ERROR;
 800fe98:	2301      	movs	r3, #1
 800fe9a:	e17f      	b.n	801019c <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800fea2:	2b01      	cmp	r3, #1
 800fea4:	d101      	bne.n	800feaa <HAL_SPI_TransmitReceive_DMA+0x42>
 800fea6:	2302      	movs	r3, #2
 800fea8:	e178      	b.n	801019c <HAL_SPI_TransmitReceive_DMA+0x334>
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	2201      	movs	r2, #1
 800feae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	2205      	movs	r2, #5
 800feb6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	2200      	movs	r2, #0
 800febe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	68ba      	ldr	r2, [r7, #8]
 800fec6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	887a      	ldrh	r2, [r7, #2]
 800fecc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	887a      	ldrh	r2, [r7, #2]
 800fed4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	687a      	ldr	r2, [r7, #4]
 800fedc:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	887a      	ldrh	r2, [r7, #2]
 800fee2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	887a      	ldrh	r2, [r7, #2]
 800feea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	2200      	movs	r2, #0
 800fef2:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	2200      	movs	r2, #0
 800fef8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	68da      	ldr	r2, [r3, #12]
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800ff08:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	689a      	ldr	r2, [r3, #8]
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800ff18:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	68db      	ldr	r3, [r3, #12]
 800ff1e:	2b0f      	cmp	r3, #15
 800ff20:	d905      	bls.n	800ff2e <HAL_SPI_TransmitReceive_DMA+0xc6>
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff26:	699b      	ldr	r3, [r3, #24]
 800ff28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ff2c:	d10f      	bne.n	800ff4e <HAL_SPI_TransmitReceive_DMA+0xe6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800ff32:	2b07      	cmp	r3, #7
 800ff34:	d911      	bls.n	800ff5a <HAL_SPI_TransmitReceive_DMA+0xf2>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff3a:	699b      	ldr	r3, [r3, #24]
 800ff3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ff40:	d00b      	beq.n	800ff5a <HAL_SPI_TransmitReceive_DMA+0xf2>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff46:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800ff48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ff4c:	d005      	beq.n	800ff5a <HAL_SPI_TransmitReceive_DMA+0xf2>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	2200      	movs	r2, #0
 800ff52:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800ff56:	2301      	movs	r3, #1
 800ff58:	e120      	b.n	801019c <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	68db      	ldr	r3, [r3, #12]
 800ff5e:	2b07      	cmp	r3, #7
 800ff60:	d840      	bhi.n	800ffe4 <HAL_SPI_TransmitReceive_DMA+0x17c>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ff66:	699b      	ldr	r3, [r3, #24]
 800ff68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ff6c:	d109      	bne.n	800ff82 <HAL_SPI_TransmitReceive_DMA+0x11a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ff74:	b29b      	uxth	r3, r3
 800ff76:	3301      	adds	r3, #1
 800ff78:	105b      	asrs	r3, r3, #1
 800ff7a:	b29a      	uxth	r2, r3
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ff86:	699b      	ldr	r3, [r3, #24]
 800ff88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ff8c:	d109      	bne.n	800ffa2 <HAL_SPI_TransmitReceive_DMA+0x13a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ff94:	b29b      	uxth	r3, r3
 800ff96:	3303      	adds	r3, #3
 800ff98:	109b      	asrs	r3, r3, #2
 800ff9a:	b29a      	uxth	r2, r3
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ffa6:	699b      	ldr	r3, [r3, #24]
 800ffa8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ffac:	d109      	bne.n	800ffc2 <HAL_SPI_TransmitReceive_DMA+0x15a>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ffb4:	b29b      	uxth	r3, r3
 800ffb6:	3301      	adds	r3, #1
 800ffb8:	105b      	asrs	r3, r3, #1
 800ffba:	b29a      	uxth	r2, r3
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ffc6:	699b      	ldr	r3, [r3, #24]
 800ffc8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ffcc:	d12e      	bne.n	801002c <HAL_SPI_TransmitReceive_DMA+0x1c4>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ffd4:	b29b      	uxth	r3, r3
 800ffd6:	3303      	adds	r3, #3
 800ffd8:	109b      	asrs	r3, r3, #2
 800ffda:	b29a      	uxth	r2, r3
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ffe2:	e023      	b.n	801002c <HAL_SPI_TransmitReceive_DMA+0x1c4>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	68db      	ldr	r3, [r3, #12]
 800ffe8:	2b0f      	cmp	r3, #15
 800ffea:	d81f      	bhi.n	801002c <HAL_SPI_TransmitReceive_DMA+0x1c4>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fff0:	699b      	ldr	r3, [r3, #24]
 800fff2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fff6:	d109      	bne.n	801000c <HAL_SPI_TransmitReceive_DMA+0x1a4>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fffe:	b29b      	uxth	r3, r3
 8010000:	3301      	adds	r3, #1
 8010002:	105b      	asrs	r3, r3, #1
 8010004:	b29a      	uxth	r2, r3
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010010:	699b      	ldr	r3, [r3, #24]
 8010012:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010016:	d109      	bne.n	801002c <HAL_SPI_TransmitReceive_DMA+0x1c4>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801001e:	b29b      	uxth	r3, r3
 8010020:	3301      	adds	r3, #1
 8010022:	105b      	asrs	r3, r3, #1
 8010024:	b29a      	uxth	r2, r3
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010030:	4a5c      	ldr	r2, [pc, #368]	@ (80101a4 <HAL_SPI_TransmitReceive_DMA+0x33c>)
 8010032:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010038:	4a5b      	ldr	r2, [pc, #364]	@ (80101a8 <HAL_SPI_TransmitReceive_DMA+0x340>)
 801003a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010040:	4a5a      	ldr	r2, [pc, #360]	@ (80101ac <HAL_SPI_TransmitReceive_DMA+0x344>)
 8010042:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010048:	2200      	movs	r2, #0
 801004a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	3330      	adds	r3, #48	@ 0x30
 8010056:	4619      	mov	r1, r3
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801005c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010064:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8010066:	f7fa fa57 	bl	800a518 <HAL_DMA_Start_IT>
 801006a:	4603      	mov	r3, r0
 801006c:	2b00      	cmp	r3, #0
 801006e:	d011      	beq.n	8010094 <HAL_SPI_TransmitReceive_DMA+0x22c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010076:	f043 0210 	orr.w	r2, r3, #16
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	2201      	movs	r2, #1
 8010084:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	2200      	movs	r2, #0
 801008c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8010090:	2301      	movs	r3, #1
 8010092:	e083      	b.n	801019c <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	689a      	ldr	r2, [r3, #8]
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80100a2:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80100a8:	2200      	movs	r2, #0
 80100aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80100b0:	2200      	movs	r2, #0
 80100b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80100b8:	2200      	movs	r2, #0
 80100ba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80100c0:	4a3a      	ldr	r2, [pc, #232]	@ (80101ac <HAL_SPI_TransmitReceive_DMA+0x344>)
 80100c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80100cc:	4619      	mov	r1, r3
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	3320      	adds	r3, #32
 80100d4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80100dc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80100de:	f7fa fa1b 	bl	800a518 <HAL_DMA_Start_IT>
 80100e2:	4603      	mov	r3, r0
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d016      	beq.n	8010116 <HAL_SPI_TransmitReceive_DMA+0x2ae>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80100ec:	4618      	mov	r0, r3
 80100ee:	f7fa fc7d 	bl	800a9ec <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80100f8:	f043 0210 	orr.w	r2, r3, #16
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	2201      	movs	r2, #1
 8010106:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	2200      	movs	r2, #0
 801010e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8010112:	2301      	movs	r3, #1
 8010114:	e042      	b.n	801019c <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801011a:	69db      	ldr	r3, [r3, #28]
 801011c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010120:	d108      	bne.n	8010134 <HAL_SPI_TransmitReceive_DMA+0x2cc>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	6859      	ldr	r1, [r3, #4]
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	681a      	ldr	r2, [r3, #0]
 801012c:	4b20      	ldr	r3, [pc, #128]	@ (80101b0 <HAL_SPI_TransmitReceive_DMA+0x348>)
 801012e:	400b      	ands	r3, r1
 8010130:	6053      	str	r3, [r2, #4]
 8010132:	e009      	b.n	8010148 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	685a      	ldr	r2, [r3, #4]
 801013a:	4b1d      	ldr	r3, [pc, #116]	@ (80101b0 <HAL_SPI_TransmitReceive_DMA+0x348>)
 801013c:	4013      	ands	r3, r2
 801013e:	8879      	ldrh	r1, [r7, #2]
 8010140:	68fa      	ldr	r2, [r7, #12]
 8010142:	6812      	ldr	r2, [r2, #0]
 8010144:	430b      	orrs	r3, r1
 8010146:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	689a      	ldr	r2, [r3, #8]
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8010156:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	691a      	ldr	r2, [r3, #16]
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 8010166:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	681a      	ldr	r2, [r3, #0]
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	f042 0201 	orr.w	r2, r2, #1
 8010176:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	685b      	ldr	r3, [r3, #4]
 801017c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010180:	d107      	bne.n	8010192 <HAL_SPI_TransmitReceive_DMA+0x32a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	681a      	ldr	r2, [r3, #0]
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010190:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	2200      	movs	r2, #0
 8010196:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 801019a:	2300      	movs	r3, #0
}
 801019c:	4618      	mov	r0, r3
 801019e:	3710      	adds	r7, #16
 80101a0:	46bd      	mov	sp, r7
 80101a2:	bd80      	pop	{r7, pc}
 80101a4:	08010825 	.word	0x08010825
 80101a8:	080107c3 	.word	0x080107c3
 80101ac:	08010841 	.word	0x08010841
 80101b0:	ffff0000 	.word	0xffff0000

080101b4 <HAL_SPI_Abort>:
  *          + Set handle State to READY.
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b084      	sub	sp, #16
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;

  __IO uint32_t count;

  /* Lock the process */
  __HAL_LOCK(hspi);
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80101c2:	2b01      	cmp	r3, #1
 80101c4:	d101      	bne.n	80101ca <HAL_SPI_Abort+0x16>
 80101c6:	2302      	movs	r3, #2
 80101c8:	e0d9      	b.n	801037e <HAL_SPI_Abort+0x1ca>
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	2201      	movs	r2, #1
 80101ce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set hspi->state to aborting to avoid any interaction */
  hspi->State = HAL_SPI_STATE_ABORT;
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	2207      	movs	r2, #7
 80101d6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Initialized local variable  */
  errorcode = HAL_OK;
 80101da:	2300      	movs	r3, #0
 80101dc:	73fb      	strb	r3, [r7, #15]
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 80101de:	4b6a      	ldr	r3, [pc, #424]	@ (8010388 <HAL_SPI_Abort+0x1d4>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	4a6a      	ldr	r2, [pc, #424]	@ (801038c <HAL_SPI_Abort+0x1d8>)
 80101e4:	fba2 2303 	umull	r2, r3, r2, r3
 80101e8:	0a5b      	lsrs	r3, r3, #9
 80101ea:	2264      	movs	r2, #100	@ 0x64
 80101ec:	fb02 f303 	mul.w	r3, r2, r3
 80101f0:	60bb      	str	r3, [r7, #8]

  /* If master communication on going, make sure current frame is done before closing the connection */
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80101fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010200:	d15b      	bne.n	80102ba <HAL_SPI_Abort+0x106>
  {
    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	691a      	ldr	r2, [r3, #16]
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	f022 0208 	bic.w	r2, r2, #8
 8010210:	611a      	str	r2, [r3, #16]
    do
    {
      count--;
 8010212:	68bb      	ldr	r3, [r7, #8]
 8010214:	3b01      	subs	r3, #1
 8010216:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d108      	bne.n	8010230 <HAL_SPI_Abort+0x7c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010224:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 801022e:	e006      	b.n	801023e <HAL_SPI_Abort+0x8a>
      }
    } while (HAL_IS_BIT_SET(hspi->Instance->IER, SPI_IT_EOT));
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	691b      	ldr	r3, [r3, #16]
 8010236:	f003 0308 	and.w	r3, r3, #8
 801023a:	2b08      	cmp	r3, #8
 801023c:	d0e9      	beq.n	8010212 <HAL_SPI_Abort+0x5e>

    /* Request a Suspend transfer */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSUSP);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	681a      	ldr	r2, [r3, #0]
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801024c:	601a      	str	r2, [r3, #0]
    do
    {
      count--;
 801024e:	68bb      	ldr	r3, [r7, #8]
 8010250:	3b01      	subs	r3, #1
 8010252:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 8010254:	68bb      	ldr	r3, [r7, #8]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d108      	bne.n	801026c <HAL_SPI_Abort+0xb8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010260:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 801026a:	e007      	b.n	801027c <HAL_SPI_Abort+0xc8>
      }
    } while (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART));
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010276:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801027a:	d0e8      	beq.n	801024e <HAL_SPI_Abort+0x9a>

    /* Clear SUSP flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	699a      	ldr	r2, [r3, #24]
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801028a:	619a      	str	r2, [r3, #24]
    do
    {
      count--;
 801028c:	68bb      	ldr	r3, [r7, #8]
 801028e:	3b01      	subs	r3, #1
 8010290:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 8010292:	68bb      	ldr	r3, [r7, #8]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d108      	bne.n	80102aa <HAL_SPI_Abort+0xf6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801029e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 80102a8:	e007      	b.n	80102ba <HAL_SPI_Abort+0x106>
      }
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_SUSP));
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	695b      	ldr	r3, [r3, #20]
 80102b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80102b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80102b8:	d0e8      	beq.n	801028c <HAL_SPI_Abort+0xd8>
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN))
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	689b      	ldr	r3, [r3, #8]
 80102c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80102c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80102c8:	d11b      	bne.n	8010302 <HAL_SPI_Abort+0x14e>
  {
    if (hspi->hdmatx != NULL)
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d017      	beq.n	8010302 <HAL_SPI_Abort+0x14e>
    {
      /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
      hspi->hdmatx->XferAbortCallback = NULL;
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80102d6:	2200      	movs	r2, #0
 80102d8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80102de:	4618      	mov	r0, r3
 80102e0:	f7fa fb84 	bl	800a9ec <HAL_DMA_Abort>
 80102e4:	4603      	mov	r3, r0
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d00b      	beq.n	8010302 <HAL_SPI_Abort+0x14e>
      {
        if (HAL_DMA_GetError(hspi->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80102ee:	4618      	mov	r0, r3
 80102f0:	f7fc f80a 	bl	800c308 <HAL_DMA_GetError>
 80102f4:	4603      	mov	r3, r0
 80102f6:	2b20      	cmp	r3, #32
 80102f8:	d103      	bne.n	8010302 <HAL_SPI_Abort+0x14e>
        {
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	2240      	movs	r2, #64	@ 0x40
 80102fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	689b      	ldr	r3, [r3, #8]
 8010308:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801030c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010310:	d11b      	bne.n	801034a <HAL_SPI_Abort+0x196>
  {
    if (hspi->hdmarx != NULL)
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010316:	2b00      	cmp	r3, #0
 8010318:	d017      	beq.n	801034a <HAL_SPI_Abort+0x196>
    {
      /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
      hspi->hdmarx->XferAbortCallback = NULL;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801031e:	2200      	movs	r2, #0
 8010320:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010326:	4618      	mov	r0, r3
 8010328:	f7fa fb60 	bl	800a9ec <HAL_DMA_Abort>
 801032c:	4603      	mov	r3, r0
 801032e:	2b00      	cmp	r3, #0
 8010330:	d00b      	beq.n	801034a <HAL_SPI_Abort+0x196>
      {
        if (HAL_DMA_GetError(hspi->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010336:	4618      	mov	r0, r3
 8010338:	f7fb ffe6 	bl	800c308 <HAL_DMA_GetError>
 801033c:	4603      	mov	r3, r0
 801033e:	2b20      	cmp	r3, #32
 8010340:	d103      	bne.n	801034a <HAL_SPI_Abort+0x196>
        {
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	2240      	movs	r2, #64	@ 0x40
 8010346:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
  }

  /* Proceed with abort procedure */
  SPI_AbortTransfer(hspi);
 801034a:	6878      	ldr	r0, [r7, #4]
 801034c:	f000 fab6 	bl	80108bc <SPI_AbortTransfer>

  /* Check error during Abort procedure */
  if (HAL_IS_BIT_SET(hspi->ErrorCode, HAL_SPI_ERROR_ABORT))
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801035a:	2b40      	cmp	r3, #64	@ 0x40
 801035c:	d102      	bne.n	8010364 <HAL_SPI_Abort+0x1b0>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 801035e:	2301      	movs	r3, #1
 8010360:	73fb      	strb	r3, [r7, #15]
 8010362:	e003      	b.n	801036c <HAL_SPI_Abort+0x1b8>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	2200      	movs	r2, #0
 8010368:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	2201      	movs	r2, #1
 8010370:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	2200      	movs	r2, #0
 8010378:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return errorcode;
 801037c:	7bfb      	ldrb	r3, [r7, #15]
}
 801037e:	4618      	mov	r0, r3
 8010380:	3710      	adds	r7, #16
 8010382:	46bd      	mov	sp, r7
 8010384:	bd80      	pop	{r7, pc}
 8010386:	bf00      	nop
 8010388:	24000058 	.word	0x24000058
 801038c:	057619f1 	.word	0x057619f1

08010390 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b08a      	sub	sp, #40	@ 0x28
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	691b      	ldr	r3, [r3, #16]
 801039e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	695b      	ldr	r3, [r3, #20]
 80103a6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80103a8:	6a3a      	ldr	r2, [r7, #32]
 80103aa:	69fb      	ldr	r3, [r7, #28]
 80103ac:	4013      	ands	r3, r2
 80103ae:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	689b      	ldr	r3, [r3, #8]
 80103b6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80103b8:	2300      	movs	r3, #0
 80103ba:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80103c2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	3330      	adds	r3, #48	@ 0x30
 80103ca:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80103cc:	69fb      	ldr	r3, [r7, #28]
 80103ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d010      	beq.n	80103f8 <HAL_SPI_IRQHandler+0x68>
 80103d6:	6a3b      	ldr	r3, [r7, #32]
 80103d8:	f003 0308 	and.w	r3, r3, #8
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d00b      	beq.n	80103f8 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	699a      	ldr	r2, [r3, #24]
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80103ee:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80103f0:	6878      	ldr	r0, [r7, #4]
 80103f2:	f000 f9b9 	bl	8010768 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80103f6:	e192      	b.n	801071e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80103f8:	69bb      	ldr	r3, [r7, #24]
 80103fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d113      	bne.n	801042a <HAL_SPI_IRQHandler+0x9a>
 8010402:	69bb      	ldr	r3, [r7, #24]
 8010404:	f003 0320 	and.w	r3, r3, #32
 8010408:	2b00      	cmp	r3, #0
 801040a:	d10e      	bne.n	801042a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 801040c:	69bb      	ldr	r3, [r7, #24]
 801040e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8010412:	2b00      	cmp	r3, #0
 8010414:	d009      	beq.n	801042a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801041a:	6878      	ldr	r0, [r7, #4]
 801041c:	4798      	blx	r3
    hspi->RxISR(hspi);
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010422:	6878      	ldr	r0, [r7, #4]
 8010424:	4798      	blx	r3
    handled = 1UL;
 8010426:	2301      	movs	r3, #1
 8010428:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801042a:	69bb      	ldr	r3, [r7, #24]
 801042c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010430:	2b00      	cmp	r3, #0
 8010432:	d10f      	bne.n	8010454 <HAL_SPI_IRQHandler+0xc4>
 8010434:	69bb      	ldr	r3, [r7, #24]
 8010436:	f003 0301 	and.w	r3, r3, #1
 801043a:	2b00      	cmp	r3, #0
 801043c:	d00a      	beq.n	8010454 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801043e:	69bb      	ldr	r3, [r7, #24]
 8010440:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8010444:	2b00      	cmp	r3, #0
 8010446:	d105      	bne.n	8010454 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801044c:	6878      	ldr	r0, [r7, #4]
 801044e:	4798      	blx	r3
    handled = 1UL;
 8010450:	2301      	movs	r3, #1
 8010452:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8010454:	69bb      	ldr	r3, [r7, #24]
 8010456:	f003 0320 	and.w	r3, r3, #32
 801045a:	2b00      	cmp	r3, #0
 801045c:	d10f      	bne.n	801047e <HAL_SPI_IRQHandler+0xee>
 801045e:	69bb      	ldr	r3, [r7, #24]
 8010460:	f003 0302 	and.w	r3, r3, #2
 8010464:	2b00      	cmp	r3, #0
 8010466:	d00a      	beq.n	801047e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8010468:	69bb      	ldr	r3, [r7, #24]
 801046a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801046e:	2b00      	cmp	r3, #0
 8010470:	d105      	bne.n	801047e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010476:	6878      	ldr	r0, [r7, #4]
 8010478:	4798      	blx	r3
    handled = 1UL;
 801047a:	2301      	movs	r3, #1
 801047c:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 801047e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010480:	2b00      	cmp	r3, #0
 8010482:	f040 8147 	bne.w	8010714 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8010486:	69bb      	ldr	r3, [r7, #24]
 8010488:	f003 0308 	and.w	r3, r3, #8
 801048c:	2b00      	cmp	r3, #0
 801048e:	f000 808b 	beq.w	80105a8 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	699a      	ldr	r2, [r3, #24]
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	f042 0208 	orr.w	r2, r2, #8
 80104a0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	699a      	ldr	r2, [r3, #24]
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	f042 0210 	orr.w	r2, r2, #16
 80104b0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	699a      	ldr	r2, [r3, #24]
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80104c0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	691a      	ldr	r2, [r3, #16]
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	f022 0208 	bic.w	r2, r2, #8
 80104d0:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	689b      	ldr	r3, [r3, #8]
 80104d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d13d      	bne.n	801055c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80104e0:	e036      	b.n	8010550 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	68db      	ldr	r3, [r3, #12]
 80104e6:	2b0f      	cmp	r3, #15
 80104e8:	d90b      	bls.n	8010502 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	681a      	ldr	r2, [r3, #0]
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80104f2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80104f4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80104fa:	1d1a      	adds	r2, r3, #4
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	665a      	str	r2, [r3, #100]	@ 0x64
 8010500:	e01d      	b.n	801053e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	68db      	ldr	r3, [r3, #12]
 8010506:	2b07      	cmp	r3, #7
 8010508:	d90b      	bls.n	8010522 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801050e:	68fa      	ldr	r2, [r7, #12]
 8010510:	8812      	ldrh	r2, [r2, #0]
 8010512:	b292      	uxth	r2, r2
 8010514:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801051a:	1c9a      	adds	r2, r3, #2
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	665a      	str	r2, [r3, #100]	@ 0x64
 8010520:	e00d      	b.n	801053e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801052e:	7812      	ldrb	r2, [r2, #0]
 8010530:	b2d2      	uxtb	r2, r2
 8010532:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010538:	1c5a      	adds	r2, r3, #1
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010544:	b29b      	uxth	r3, r3
 8010546:	3b01      	subs	r3, #1
 8010548:	b29a      	uxth	r2, r3
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010556:	b29b      	uxth	r3, r3
 8010558:	2b00      	cmp	r3, #0
 801055a:	d1c2      	bne.n	80104e2 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 801055c:	6878      	ldr	r0, [r7, #4]
 801055e:	f000 fa11 	bl	8010984 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	2201      	movs	r2, #1
 8010566:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010570:	2b00      	cmp	r3, #0
 8010572:	d003      	beq.n	801057c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8010574:	6878      	ldr	r0, [r7, #4]
 8010576:	f7f6 fd79 	bl	800706c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801057a:	e0d0      	b.n	801071e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 801057c:	7cfb      	ldrb	r3, [r7, #19]
 801057e:	2b05      	cmp	r3, #5
 8010580:	d103      	bne.n	801058a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8010582:	6878      	ldr	r0, [r7, #4]
 8010584:	f7f6 fcfe 	bl	8006f84 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8010588:	e0c6      	b.n	8010718 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 801058a:	7cfb      	ldrb	r3, [r7, #19]
 801058c:	2b04      	cmp	r3, #4
 801058e:	d103      	bne.n	8010598 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8010590:	6878      	ldr	r0, [r7, #4]
 8010592:	f000 f8cb 	bl	801072c <HAL_SPI_RxCpltCallback>
    return;
 8010596:	e0bf      	b.n	8010718 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8010598:	7cfb      	ldrb	r3, [r7, #19]
 801059a:	2b03      	cmp	r3, #3
 801059c:	f040 80bc 	bne.w	8010718 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f7f6 fcd5 	bl	8006f50 <HAL_SPI_TxCpltCallback>
    return;
 80105a6:	e0b7      	b.n	8010718 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80105a8:	69bb      	ldr	r3, [r7, #24]
 80105aa:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	f000 80b5 	beq.w	801071e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80105b4:	69bb      	ldr	r3, [r7, #24]
 80105b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d00f      	beq.n	80105de <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80105c4:	f043 0204 	orr.w	r2, r3, #4
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	699a      	ldr	r2, [r3, #24]
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80105dc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80105de:	69bb      	ldr	r3, [r7, #24]
 80105e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d00f      	beq.n	8010608 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80105ee:	f043 0201 	orr.w	r2, r3, #1
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	699a      	ldr	r2, [r3, #24]
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010606:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8010608:	69bb      	ldr	r3, [r7, #24]
 801060a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801060e:	2b00      	cmp	r3, #0
 8010610:	d00f      	beq.n	8010632 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010618:	f043 0208 	orr.w	r2, r3, #8
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	699a      	ldr	r2, [r3, #24]
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010630:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8010632:	69bb      	ldr	r3, [r7, #24]
 8010634:	f003 0320 	and.w	r3, r3, #32
 8010638:	2b00      	cmp	r3, #0
 801063a:	d00f      	beq.n	801065c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010642:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	699a      	ldr	r2, [r3, #24]
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	f042 0220 	orr.w	r2, r2, #32
 801065a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010662:	2b00      	cmp	r3, #0
 8010664:	d05a      	beq.n	801071c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	681a      	ldr	r2, [r3, #0]
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	f022 0201 	bic.w	r2, r2, #1
 8010674:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	6919      	ldr	r1, [r3, #16]
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	681a      	ldr	r2, [r3, #0]
 8010680:	4b28      	ldr	r3, [pc, #160]	@ (8010724 <HAL_SPI_IRQHandler+0x394>)
 8010682:	400b      	ands	r3, r1
 8010684:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8010686:	697b      	ldr	r3, [r7, #20]
 8010688:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801068c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8010690:	d138      	bne.n	8010704 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	689a      	ldr	r2, [r3, #8]
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80106a0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d013      	beq.n	80106d2 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80106ae:	4a1e      	ldr	r2, [pc, #120]	@ (8010728 <HAL_SPI_IRQHandler+0x398>)
 80106b0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80106b6:	4618      	mov	r0, r3
 80106b8:	f7fa fcb6 	bl	800b028 <HAL_DMA_Abort_IT>
 80106bc:	4603      	mov	r3, r0
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d007      	beq.n	80106d2 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80106c8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d020      	beq.n	801071c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80106de:	4a12      	ldr	r2, [pc, #72]	@ (8010728 <HAL_SPI_IRQHandler+0x398>)
 80106e0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80106e6:	4618      	mov	r0, r3
 80106e8:	f7fa fc9e 	bl	800b028 <HAL_DMA_Abort_IT>
 80106ec:	4603      	mov	r3, r0
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d014      	beq.n	801071c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80106f8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8010702:	e00b      	b.n	801071c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	2201      	movs	r2, #1
 8010708:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 801070c:	6878      	ldr	r0, [r7, #4]
 801070e:	f7f6 fcad 	bl	800706c <HAL_SPI_ErrorCallback>
    return;
 8010712:	e003      	b.n	801071c <HAL_SPI_IRQHandler+0x38c>
    return;
 8010714:	bf00      	nop
 8010716:	e002      	b.n	801071e <HAL_SPI_IRQHandler+0x38e>
    return;
 8010718:	bf00      	nop
 801071a:	e000      	b.n	801071e <HAL_SPI_IRQHandler+0x38e>
    return;
 801071c:	bf00      	nop
  }
}
 801071e:	3728      	adds	r7, #40	@ 0x28
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}
 8010724:	fffffc94 	.word	0xfffffc94
 8010728:	08010887 	.word	0x08010887

0801072c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801072c:	b480      	push	{r7}
 801072e:	b083      	sub	sp, #12
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8010734:	bf00      	nop
 8010736:	370c      	adds	r7, #12
 8010738:	46bd      	mov	sp, r7
 801073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073e:	4770      	bx	lr

08010740 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010740:	b480      	push	{r7}
 8010742:	b083      	sub	sp, #12
 8010744:	af00      	add	r7, sp, #0
 8010746:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8010748:	bf00      	nop
 801074a:	370c      	adds	r7, #12
 801074c:	46bd      	mov	sp, r7
 801074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010752:	4770      	bx	lr

08010754 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010754:	b480      	push	{r7}
 8010756:	b083      	sub	sp, #12
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 801075c:	bf00      	nop
 801075e:	370c      	adds	r7, #12
 8010760:	46bd      	mov	sp, r7
 8010762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010766:	4770      	bx	lr

08010768 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010768:	b480      	push	{r7}
 801076a:	b083      	sub	sp, #12
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8010770:	bf00      	nop
 8010772:	370c      	adds	r7, #12
 8010774:	46bd      	mov	sp, r7
 8010776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077a:	4770      	bx	lr

0801077c <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b084      	sub	sp, #16
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010788:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010790:	b2db      	uxtb	r3, r3
 8010792:	2b07      	cmp	r3, #7
 8010794:	d011      	beq.n	80107ba <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801079a:	69db      	ldr	r3, [r3, #28]
 801079c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80107a0:	d103      	bne.n	80107aa <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 80107a2:	68f8      	ldr	r0, [r7, #12]
 80107a4:	f7f6 fbd4 	bl	8006f50 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80107a8:	e007      	b.n	80107ba <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	691a      	ldr	r2, [r3, #16]
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	f042 0208 	orr.w	r2, r2, #8
 80107b8:	611a      	str	r2, [r3, #16]
}
 80107ba:	bf00      	nop
 80107bc:	3710      	adds	r7, #16
 80107be:	46bd      	mov	sp, r7
 80107c0:	bd80      	pop	{r7, pc}

080107c2 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80107c2:	b580      	push	{r7, lr}
 80107c4:	b084      	sub	sp, #16
 80107c6:	af00      	add	r7, sp, #0
 80107c8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107ce:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80107d6:	b2db      	uxtb	r3, r3
 80107d8:	2b07      	cmp	r3, #7
 80107da:	d011      	beq.n	8010800 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80107e0:	69db      	ldr	r3, [r3, #28]
 80107e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80107e6:	d103      	bne.n	80107f0 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 80107e8:	68f8      	ldr	r0, [r7, #12]
 80107ea:	f7f6 fbcb 	bl	8006f84 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80107ee:	e007      	b.n	8010800 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	691a      	ldr	r2, [r3, #16]
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	f042 0208 	orr.w	r2, r2, #8
 80107fe:	611a      	str	r2, [r3, #16]
}
 8010800:	bf00      	nop
 8010802:	3710      	adds	r7, #16
 8010804:	46bd      	mov	sp, r7
 8010806:	bd80      	pop	{r7, pc}

08010808 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b084      	sub	sp, #16
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010814:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8010816:	68f8      	ldr	r0, [r7, #12]
 8010818:	f7ff ff92 	bl	8010740 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801081c:	bf00      	nop
 801081e:	3710      	adds	r7, #16
 8010820:	46bd      	mov	sp, r7
 8010822:	bd80      	pop	{r7, pc}

08010824 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b084      	sub	sp, #16
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010830:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8010832:	68f8      	ldr	r0, [r7, #12]
 8010834:	f7ff ff8e 	bl	8010754 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010838:	bf00      	nop
 801083a:	3710      	adds	r7, #16
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}

08010840 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b084      	sub	sp, #16
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801084c:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 801084e:	6878      	ldr	r0, [r7, #4]
 8010850:	f7fb fd5a 	bl	800c308 <HAL_DMA_GetError>
 8010854:	4603      	mov	r3, r0
 8010856:	2b02      	cmp	r3, #2
 8010858:	d011      	beq.n	801087e <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 801085a:	68f8      	ldr	r0, [r7, #12]
 801085c:	f000 f892 	bl	8010984 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010866:	f043 0210 	orr.w	r2, r3, #16
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	2201      	movs	r2, #1
 8010874:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8010878:	68f8      	ldr	r0, [r7, #12]
 801087a:	f7f6 fbf7 	bl	800706c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 801087e:	bf00      	nop
 8010880:	3710      	adds	r7, #16
 8010882:	46bd      	mov	sp, r7
 8010884:	bd80      	pop	{r7, pc}

08010886 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010886:	b580      	push	{r7, lr}
 8010888:	b084      	sub	sp, #16
 801088a:	af00      	add	r7, sp, #0
 801088c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010892:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	2200      	movs	r2, #0
 8010898:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	2200      	movs	r2, #0
 80108a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	2201      	movs	r2, #1
 80108a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80108ac:	68f8      	ldr	r0, [r7, #12]
 80108ae:	f7f6 fbdd 	bl	800706c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80108b2:	bf00      	nop
 80108b4:	3710      	adds	r7, #16
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd80      	pop	{r7, pc}
	...

080108bc <SPI_AbortTransfer>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTransfer(SPI_HandleTypeDef *hspi)
{
 80108bc:	b480      	push	{r7}
 80108be:	b083      	sub	sp, #12
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	681a      	ldr	r2, [r3, #0]
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	f022 0201 	bic.w	r2, r2, #1
 80108d2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	6919      	ldr	r1, [r3, #16]
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	681a      	ldr	r2, [r3, #0]
 80108de:	4b28      	ldr	r3, [pc, #160]	@ (8010980 <SPI_AbortTransfer+0xc4>)
 80108e0:	400b      	ands	r3, r1
 80108e2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Clear the Status flags in the SR register */
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	699a      	ldr	r2, [r3, #24]
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	f042 0208 	orr.w	r2, r2, #8
 80108f2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	699a      	ldr	r2, [r3, #24]
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	f042 0210 	orr.w	r2, r2, #16
 8010902:	619a      	str	r2, [r3, #24]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	689a      	ldr	r2, [r3, #8]
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8010912:	609a      	str	r2, [r3, #8]

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	699a      	ldr	r2, [r3, #24]
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010922:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	699a      	ldr	r2, [r3, #24]
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	f042 0220 	orr.w	r2, r2, #32
 8010932:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	699a      	ldr	r2, [r3, #24]
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010942:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	699a      	ldr	r2, [r3, #24]
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010952:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	699a      	ldr	r2, [r3, #24]
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010962:	619a      	str	r2, [r3, #24]

#if (USE_SPI_CRC != 0U)
  __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
#endif /* USE_SPI_CRC */

  hspi->TxXferCount = (uint16_t)0UL;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	2200      	movs	r2, #0
 8010968:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	2200      	movs	r2, #0
 8010970:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8010974:	bf00      	nop
 8010976:	370c      	adds	r7, #12
 8010978:	46bd      	mov	sp, r7
 801097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097e:	4770      	bx	lr
 8010980:	fffffc90 	.word	0xfffffc90

08010984 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8010984:	b480      	push	{r7}
 8010986:	b085      	sub	sp, #20
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	695b      	ldr	r3, [r3, #20]
 8010992:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	699a      	ldr	r2, [r3, #24]
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	f042 0208 	orr.w	r2, r2, #8
 80109a2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	699a      	ldr	r2, [r3, #24]
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	f042 0210 	orr.w	r2, r2, #16
 80109b2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	681a      	ldr	r2, [r3, #0]
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	f022 0201 	bic.w	r2, r2, #1
 80109c2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	6919      	ldr	r1, [r3, #16]
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681a      	ldr	r2, [r3, #0]
 80109ce:	4b3c      	ldr	r3, [pc, #240]	@ (8010ac0 <SPI_CloseTransfer+0x13c>)
 80109d0:	400b      	ands	r3, r1
 80109d2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	689a      	ldr	r2, [r3, #8]
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80109e2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80109ea:	b2db      	uxtb	r3, r3
 80109ec:	2b04      	cmp	r3, #4
 80109ee:	d014      	beq.n	8010a1a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	f003 0320 	and.w	r3, r3, #32
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d00f      	beq.n	8010a1a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010a00:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	699a      	ldr	r2, [r3, #24]
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	f042 0220 	orr.w	r2, r2, #32
 8010a18:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010a20:	b2db      	uxtb	r3, r3
 8010a22:	2b03      	cmp	r3, #3
 8010a24:	d014      	beq.n	8010a50 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d00f      	beq.n	8010a50 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010a36:	f043 0204 	orr.w	r2, r3, #4
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	699a      	ldr	r2, [r3, #24]
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010a4e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d00f      	beq.n	8010a7a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010a60:	f043 0201 	orr.w	r2, r3, #1
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	699a      	ldr	r2, [r3, #24]
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010a78:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d00f      	beq.n	8010aa4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010a8a:	f043 0208 	orr.w	r2, r3, #8
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	699a      	ldr	r2, [r3, #24]
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010aa2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2200      	movs	r2, #0
 8010ab0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8010ab4:	bf00      	nop
 8010ab6:	3714      	adds	r7, #20
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010abe:	4770      	bx	lr
 8010ac0:	fffffc90 	.word	0xfffffc90

08010ac4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8010ac4:	b480      	push	{r7}
 8010ac6:	b085      	sub	sp, #20
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010ad0:	095b      	lsrs	r3, r3, #5
 8010ad2:	3301      	adds	r3, #1
 8010ad4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	68db      	ldr	r3, [r3, #12]
 8010ada:	3301      	adds	r3, #1
 8010adc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8010ade:	68bb      	ldr	r3, [r7, #8]
 8010ae0:	3307      	adds	r3, #7
 8010ae2:	08db      	lsrs	r3, r3, #3
 8010ae4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8010ae6:	68bb      	ldr	r3, [r7, #8]
 8010ae8:	68fa      	ldr	r2, [r7, #12]
 8010aea:	fb02 f303 	mul.w	r3, r2, r3
}
 8010aee:	4618      	mov	r0, r3
 8010af0:	3714      	adds	r7, #20
 8010af2:	46bd      	mov	sp, r7
 8010af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af8:	4770      	bx	lr

08010afa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010afa:	b580      	push	{r7, lr}
 8010afc:	b082      	sub	sp, #8
 8010afe:	af00      	add	r7, sp, #0
 8010b00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d101      	bne.n	8010b0c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010b08:	2301      	movs	r3, #1
 8010b0a:	e049      	b.n	8010ba0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010b12:	b2db      	uxtb	r3, r3
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d106      	bne.n	8010b26 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010b20:	6878      	ldr	r0, [r7, #4]
 8010b22:	f7f8 fd9d 	bl	8009660 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	2202      	movs	r2, #2
 8010b2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681a      	ldr	r2, [r3, #0]
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	3304      	adds	r3, #4
 8010b36:	4619      	mov	r1, r3
 8010b38:	4610      	mov	r0, r2
 8010b3a:	f000 fbb7 	bl	80112ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	2201      	movs	r2, #1
 8010b42:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	2201      	movs	r2, #1
 8010b4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	2201      	movs	r2, #1
 8010b52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	2201      	movs	r2, #1
 8010b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	2201      	movs	r2, #1
 8010b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	2201      	movs	r2, #1
 8010b6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	2201      	movs	r2, #1
 8010b72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	2201      	movs	r2, #1
 8010b7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	2201      	movs	r2, #1
 8010b82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	2201      	movs	r2, #1
 8010b8a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	2201      	movs	r2, #1
 8010b92:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	2201      	movs	r2, #1
 8010b9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010b9e:	2300      	movs	r3, #0
}
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	3708      	adds	r7, #8
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	bd80      	pop	{r7, pc}

08010ba8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8010ba8:	b480      	push	{r7}
 8010baa:	b085      	sub	sp, #20
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010bb6:	b2db      	uxtb	r3, r3
 8010bb8:	2b01      	cmp	r3, #1
 8010bba:	d001      	beq.n	8010bc0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8010bbc:	2301      	movs	r3, #1
 8010bbe:	e056      	b.n	8010c6e <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	2202      	movs	r2, #2
 8010bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	4a2b      	ldr	r2, [pc, #172]	@ (8010c7c <HAL_TIM_Base_Start+0xd4>)
 8010bce:	4293      	cmp	r3, r2
 8010bd0:	d02c      	beq.n	8010c2c <HAL_TIM_Base_Start+0x84>
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010bda:	d027      	beq.n	8010c2c <HAL_TIM_Base_Start+0x84>
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	4a27      	ldr	r2, [pc, #156]	@ (8010c80 <HAL_TIM_Base_Start+0xd8>)
 8010be2:	4293      	cmp	r3, r2
 8010be4:	d022      	beq.n	8010c2c <HAL_TIM_Base_Start+0x84>
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	4a26      	ldr	r2, [pc, #152]	@ (8010c84 <HAL_TIM_Base_Start+0xdc>)
 8010bec:	4293      	cmp	r3, r2
 8010bee:	d01d      	beq.n	8010c2c <HAL_TIM_Base_Start+0x84>
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	4a24      	ldr	r2, [pc, #144]	@ (8010c88 <HAL_TIM_Base_Start+0xe0>)
 8010bf6:	4293      	cmp	r3, r2
 8010bf8:	d018      	beq.n	8010c2c <HAL_TIM_Base_Start+0x84>
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	4a23      	ldr	r2, [pc, #140]	@ (8010c8c <HAL_TIM_Base_Start+0xe4>)
 8010c00:	4293      	cmp	r3, r2
 8010c02:	d013      	beq.n	8010c2c <HAL_TIM_Base_Start+0x84>
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	4a21      	ldr	r2, [pc, #132]	@ (8010c90 <HAL_TIM_Base_Start+0xe8>)
 8010c0a:	4293      	cmp	r3, r2
 8010c0c:	d00e      	beq.n	8010c2c <HAL_TIM_Base_Start+0x84>
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	4a20      	ldr	r2, [pc, #128]	@ (8010c94 <HAL_TIM_Base_Start+0xec>)
 8010c14:	4293      	cmp	r3, r2
 8010c16:	d009      	beq.n	8010c2c <HAL_TIM_Base_Start+0x84>
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	4a1e      	ldr	r2, [pc, #120]	@ (8010c98 <HAL_TIM_Base_Start+0xf0>)
 8010c1e:	4293      	cmp	r3, r2
 8010c20:	d004      	beq.n	8010c2c <HAL_TIM_Base_Start+0x84>
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	4a1d      	ldr	r2, [pc, #116]	@ (8010c9c <HAL_TIM_Base_Start+0xf4>)
 8010c28:	4293      	cmp	r3, r2
 8010c2a:	d115      	bne.n	8010c58 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	689a      	ldr	r2, [r3, #8]
 8010c32:	4b1b      	ldr	r3, [pc, #108]	@ (8010ca0 <HAL_TIM_Base_Start+0xf8>)
 8010c34:	4013      	ands	r3, r2
 8010c36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	2b06      	cmp	r3, #6
 8010c3c:	d015      	beq.n	8010c6a <HAL_TIM_Base_Start+0xc2>
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010c44:	d011      	beq.n	8010c6a <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	681a      	ldr	r2, [r3, #0]
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	f042 0201 	orr.w	r2, r2, #1
 8010c54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c56:	e008      	b.n	8010c6a <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	681a      	ldr	r2, [r3, #0]
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	f042 0201 	orr.w	r2, r2, #1
 8010c66:	601a      	str	r2, [r3, #0]
 8010c68:	e000      	b.n	8010c6c <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010c6c:	2300      	movs	r3, #0
}
 8010c6e:	4618      	mov	r0, r3
 8010c70:	3714      	adds	r7, #20
 8010c72:	46bd      	mov	sp, r7
 8010c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c78:	4770      	bx	lr
 8010c7a:	bf00      	nop
 8010c7c:	40010000 	.word	0x40010000
 8010c80:	40000400 	.word	0x40000400
 8010c84:	40000800 	.word	0x40000800
 8010c88:	40000c00 	.word	0x40000c00
 8010c8c:	40010400 	.word	0x40010400
 8010c90:	40001800 	.word	0x40001800
 8010c94:	40014000 	.word	0x40014000
 8010c98:	4000e000 	.word	0x4000e000
 8010c9c:	4000e400 	.word	0x4000e400
 8010ca0:	00010007 	.word	0x00010007

08010ca4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010ca4:	b480      	push	{r7}
 8010ca6:	b085      	sub	sp, #20
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010cb2:	b2db      	uxtb	r3, r3
 8010cb4:	2b01      	cmp	r3, #1
 8010cb6:	d001      	beq.n	8010cbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010cb8:	2301      	movs	r3, #1
 8010cba:	e05e      	b.n	8010d7a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	2202      	movs	r2, #2
 8010cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	68da      	ldr	r2, [r3, #12]
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	f042 0201 	orr.w	r2, r2, #1
 8010cd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	4a2b      	ldr	r2, [pc, #172]	@ (8010d88 <HAL_TIM_Base_Start_IT+0xe4>)
 8010cda:	4293      	cmp	r3, r2
 8010cdc:	d02c      	beq.n	8010d38 <HAL_TIM_Base_Start_IT+0x94>
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010ce6:	d027      	beq.n	8010d38 <HAL_TIM_Base_Start_IT+0x94>
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	4a27      	ldr	r2, [pc, #156]	@ (8010d8c <HAL_TIM_Base_Start_IT+0xe8>)
 8010cee:	4293      	cmp	r3, r2
 8010cf0:	d022      	beq.n	8010d38 <HAL_TIM_Base_Start_IT+0x94>
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	4a26      	ldr	r2, [pc, #152]	@ (8010d90 <HAL_TIM_Base_Start_IT+0xec>)
 8010cf8:	4293      	cmp	r3, r2
 8010cfa:	d01d      	beq.n	8010d38 <HAL_TIM_Base_Start_IT+0x94>
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	4a24      	ldr	r2, [pc, #144]	@ (8010d94 <HAL_TIM_Base_Start_IT+0xf0>)
 8010d02:	4293      	cmp	r3, r2
 8010d04:	d018      	beq.n	8010d38 <HAL_TIM_Base_Start_IT+0x94>
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	4a23      	ldr	r2, [pc, #140]	@ (8010d98 <HAL_TIM_Base_Start_IT+0xf4>)
 8010d0c:	4293      	cmp	r3, r2
 8010d0e:	d013      	beq.n	8010d38 <HAL_TIM_Base_Start_IT+0x94>
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	4a21      	ldr	r2, [pc, #132]	@ (8010d9c <HAL_TIM_Base_Start_IT+0xf8>)
 8010d16:	4293      	cmp	r3, r2
 8010d18:	d00e      	beq.n	8010d38 <HAL_TIM_Base_Start_IT+0x94>
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	4a20      	ldr	r2, [pc, #128]	@ (8010da0 <HAL_TIM_Base_Start_IT+0xfc>)
 8010d20:	4293      	cmp	r3, r2
 8010d22:	d009      	beq.n	8010d38 <HAL_TIM_Base_Start_IT+0x94>
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	4a1e      	ldr	r2, [pc, #120]	@ (8010da4 <HAL_TIM_Base_Start_IT+0x100>)
 8010d2a:	4293      	cmp	r3, r2
 8010d2c:	d004      	beq.n	8010d38 <HAL_TIM_Base_Start_IT+0x94>
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	4a1d      	ldr	r2, [pc, #116]	@ (8010da8 <HAL_TIM_Base_Start_IT+0x104>)
 8010d34:	4293      	cmp	r3, r2
 8010d36:	d115      	bne.n	8010d64 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	689a      	ldr	r2, [r3, #8]
 8010d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8010dac <HAL_TIM_Base_Start_IT+0x108>)
 8010d40:	4013      	ands	r3, r2
 8010d42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	2b06      	cmp	r3, #6
 8010d48:	d015      	beq.n	8010d76 <HAL_TIM_Base_Start_IT+0xd2>
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010d50:	d011      	beq.n	8010d76 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	681a      	ldr	r2, [r3, #0]
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	f042 0201 	orr.w	r2, r2, #1
 8010d60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010d62:	e008      	b.n	8010d76 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	681a      	ldr	r2, [r3, #0]
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	f042 0201 	orr.w	r2, r2, #1
 8010d72:	601a      	str	r2, [r3, #0]
 8010d74:	e000      	b.n	8010d78 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010d76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010d78:	2300      	movs	r3, #0
}
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	3714      	adds	r7, #20
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d84:	4770      	bx	lr
 8010d86:	bf00      	nop
 8010d88:	40010000 	.word	0x40010000
 8010d8c:	40000400 	.word	0x40000400
 8010d90:	40000800 	.word	0x40000800
 8010d94:	40000c00 	.word	0x40000c00
 8010d98:	40010400 	.word	0x40010400
 8010d9c:	40001800 	.word	0x40001800
 8010da0:	40014000 	.word	0x40014000
 8010da4:	4000e000 	.word	0x4000e000
 8010da8:	4000e400 	.word	0x4000e400
 8010dac:	00010007 	.word	0x00010007

08010db0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8010db0:	b480      	push	{r7}
 8010db2:	b083      	sub	sp, #12
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	68da      	ldr	r2, [r3, #12]
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	f022 0201 	bic.w	r2, r2, #1
 8010dc6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	6a1a      	ldr	r2, [r3, #32]
 8010dce:	f241 1311 	movw	r3, #4369	@ 0x1111
 8010dd2:	4013      	ands	r3, r2
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d10f      	bne.n	8010df8 <HAL_TIM_Base_Stop_IT+0x48>
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	6a1a      	ldr	r2, [r3, #32]
 8010dde:	f240 4344 	movw	r3, #1092	@ 0x444
 8010de2:	4013      	ands	r3, r2
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d107      	bne.n	8010df8 <HAL_TIM_Base_Stop_IT+0x48>
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	681a      	ldr	r2, [r3, #0]
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	f022 0201 	bic.w	r2, r2, #1
 8010df6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	2201      	movs	r2, #1
 8010dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8010e00:	2300      	movs	r3, #0
}
 8010e02:	4618      	mov	r0, r3
 8010e04:	370c      	adds	r7, #12
 8010e06:	46bd      	mov	sp, r7
 8010e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e0c:	4770      	bx	lr

08010e0e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010e0e:	b580      	push	{r7, lr}
 8010e10:	b084      	sub	sp, #16
 8010e12:	af00      	add	r7, sp, #0
 8010e14:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	68db      	ldr	r3, [r3, #12]
 8010e1c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	691b      	ldr	r3, [r3, #16]
 8010e24:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8010e26:	68bb      	ldr	r3, [r7, #8]
 8010e28:	f003 0302 	and.w	r3, r3, #2
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d020      	beq.n	8010e72 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	f003 0302 	and.w	r3, r3, #2
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d01b      	beq.n	8010e72 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	f06f 0202 	mvn.w	r2, #2
 8010e42:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	2201      	movs	r2, #1
 8010e48:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	699b      	ldr	r3, [r3, #24]
 8010e50:	f003 0303 	and.w	r3, r3, #3
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d003      	beq.n	8010e60 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010e58:	6878      	ldr	r0, [r7, #4]
 8010e5a:	f000 fa09 	bl	8011270 <HAL_TIM_IC_CaptureCallback>
 8010e5e:	e005      	b.n	8010e6c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010e60:	6878      	ldr	r0, [r7, #4]
 8010e62:	f000 f9fb 	bl	801125c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010e66:	6878      	ldr	r0, [r7, #4]
 8010e68:	f000 fa0c 	bl	8011284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	2200      	movs	r2, #0
 8010e70:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8010e72:	68bb      	ldr	r3, [r7, #8]
 8010e74:	f003 0304 	and.w	r3, r3, #4
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d020      	beq.n	8010ebe <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	f003 0304 	and.w	r3, r3, #4
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d01b      	beq.n	8010ebe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	f06f 0204 	mvn.w	r2, #4
 8010e8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	2202      	movs	r2, #2
 8010e94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	699b      	ldr	r3, [r3, #24]
 8010e9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d003      	beq.n	8010eac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010ea4:	6878      	ldr	r0, [r7, #4]
 8010ea6:	f000 f9e3 	bl	8011270 <HAL_TIM_IC_CaptureCallback>
 8010eaa:	e005      	b.n	8010eb8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010eac:	6878      	ldr	r0, [r7, #4]
 8010eae:	f000 f9d5 	bl	801125c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010eb2:	6878      	ldr	r0, [r7, #4]
 8010eb4:	f000 f9e6 	bl	8011284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	2200      	movs	r2, #0
 8010ebc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8010ebe:	68bb      	ldr	r3, [r7, #8]
 8010ec0:	f003 0308 	and.w	r3, r3, #8
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d020      	beq.n	8010f0a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	f003 0308 	and.w	r3, r3, #8
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d01b      	beq.n	8010f0a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	f06f 0208 	mvn.w	r2, #8
 8010eda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	2204      	movs	r2, #4
 8010ee0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	69db      	ldr	r3, [r3, #28]
 8010ee8:	f003 0303 	and.w	r3, r3, #3
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d003      	beq.n	8010ef8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010ef0:	6878      	ldr	r0, [r7, #4]
 8010ef2:	f000 f9bd 	bl	8011270 <HAL_TIM_IC_CaptureCallback>
 8010ef6:	e005      	b.n	8010f04 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010ef8:	6878      	ldr	r0, [r7, #4]
 8010efa:	f000 f9af 	bl	801125c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010efe:	6878      	ldr	r0, [r7, #4]
 8010f00:	f000 f9c0 	bl	8011284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	2200      	movs	r2, #0
 8010f08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8010f0a:	68bb      	ldr	r3, [r7, #8]
 8010f0c:	f003 0310 	and.w	r3, r3, #16
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d020      	beq.n	8010f56 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	f003 0310 	and.w	r3, r3, #16
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d01b      	beq.n	8010f56 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	f06f 0210 	mvn.w	r2, #16
 8010f26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	2208      	movs	r2, #8
 8010f2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	69db      	ldr	r3, [r3, #28]
 8010f34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d003      	beq.n	8010f44 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010f3c:	6878      	ldr	r0, [r7, #4]
 8010f3e:	f000 f997 	bl	8011270 <HAL_TIM_IC_CaptureCallback>
 8010f42:	e005      	b.n	8010f50 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010f44:	6878      	ldr	r0, [r7, #4]
 8010f46:	f000 f989 	bl	801125c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010f4a:	6878      	ldr	r0, [r7, #4]
 8010f4c:	f000 f99a 	bl	8011284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	2200      	movs	r2, #0
 8010f54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8010f56:	68bb      	ldr	r3, [r7, #8]
 8010f58:	f003 0301 	and.w	r3, r3, #1
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d00c      	beq.n	8010f7a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	f003 0301 	and.w	r3, r3, #1
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d007      	beq.n	8010f7a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	f06f 0201 	mvn.w	r2, #1
 8010f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010f74:	6878      	ldr	r0, [r7, #4]
 8010f76:	f7f6 f9bb 	bl	80072f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8010f7a:	68bb      	ldr	r3, [r7, #8]
 8010f7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d104      	bne.n	8010f8e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8010f84:	68bb      	ldr	r3, [r7, #8]
 8010f86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d00c      	beq.n	8010fa8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d007      	beq.n	8010fa8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8010fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010fa2:	6878      	ldr	r0, [r7, #4]
 8010fa4:	f000 fb78 	bl	8011698 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8010fa8:	68bb      	ldr	r3, [r7, #8]
 8010faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d00c      	beq.n	8010fcc <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d007      	beq.n	8010fcc <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8010fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	f000 fb70 	bl	80116ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8010fcc:	68bb      	ldr	r3, [r7, #8]
 8010fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d00c      	beq.n	8010ff0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d007      	beq.n	8010ff0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8010fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010fea:	6878      	ldr	r0, [r7, #4]
 8010fec:	f000 f954 	bl	8011298 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8010ff0:	68bb      	ldr	r3, [r7, #8]
 8010ff2:	f003 0320 	and.w	r3, r3, #32
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d00c      	beq.n	8011014 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	f003 0320 	and.w	r3, r3, #32
 8011000:	2b00      	cmp	r3, #0
 8011002:	d007      	beq.n	8011014 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	f06f 0220 	mvn.w	r2, #32
 801100c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801100e:	6878      	ldr	r0, [r7, #4]
 8011010:	f000 fb38 	bl	8011684 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011014:	bf00      	nop
 8011016:	3710      	adds	r7, #16
 8011018:	46bd      	mov	sp, r7
 801101a:	bd80      	pop	{r7, pc}

0801101c <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 801101c:	b480      	push	{r7}
 801101e:	b083      	sub	sp, #12
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
 8011024:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801102c:	2b01      	cmp	r3, #1
 801102e:	d101      	bne.n	8011034 <HAL_TIM_GenerateEvent+0x18>
 8011030:	2302      	movs	r3, #2
 8011032:	e014      	b.n	801105e <HAL_TIM_GenerateEvent+0x42>
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2201      	movs	r2, #1
 8011038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	2202      	movs	r2, #2
 8011040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	683a      	ldr	r2, [r7, #0]
 801104a:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	2201      	movs	r2, #1
 8011050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	2200      	movs	r2, #0
 8011058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 801105c:	2300      	movs	r3, #0
}
 801105e:	4618      	mov	r0, r3
 8011060:	370c      	adds	r7, #12
 8011062:	46bd      	mov	sp, r7
 8011064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011068:	4770      	bx	lr
	...

0801106c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b084      	sub	sp, #16
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
 8011074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011076:	2300      	movs	r3, #0
 8011078:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011080:	2b01      	cmp	r3, #1
 8011082:	d101      	bne.n	8011088 <HAL_TIM_ConfigClockSource+0x1c>
 8011084:	2302      	movs	r3, #2
 8011086:	e0dc      	b.n	8011242 <HAL_TIM_ConfigClockSource+0x1d6>
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	2201      	movs	r2, #1
 801108c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	2202      	movs	r2, #2
 8011094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	689b      	ldr	r3, [r3, #8]
 801109e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80110a0:	68ba      	ldr	r2, [r7, #8]
 80110a2:	4b6a      	ldr	r3, [pc, #424]	@ (801124c <HAL_TIM_ConfigClockSource+0x1e0>)
 80110a4:	4013      	ands	r3, r2
 80110a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80110a8:	68bb      	ldr	r3, [r7, #8]
 80110aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80110ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	68ba      	ldr	r2, [r7, #8]
 80110b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80110b8:	683b      	ldr	r3, [r7, #0]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	4a64      	ldr	r2, [pc, #400]	@ (8011250 <HAL_TIM_ConfigClockSource+0x1e4>)
 80110be:	4293      	cmp	r3, r2
 80110c0:	f000 80a9 	beq.w	8011216 <HAL_TIM_ConfigClockSource+0x1aa>
 80110c4:	4a62      	ldr	r2, [pc, #392]	@ (8011250 <HAL_TIM_ConfigClockSource+0x1e4>)
 80110c6:	4293      	cmp	r3, r2
 80110c8:	f200 80ae 	bhi.w	8011228 <HAL_TIM_ConfigClockSource+0x1bc>
 80110cc:	4a61      	ldr	r2, [pc, #388]	@ (8011254 <HAL_TIM_ConfigClockSource+0x1e8>)
 80110ce:	4293      	cmp	r3, r2
 80110d0:	f000 80a1 	beq.w	8011216 <HAL_TIM_ConfigClockSource+0x1aa>
 80110d4:	4a5f      	ldr	r2, [pc, #380]	@ (8011254 <HAL_TIM_ConfigClockSource+0x1e8>)
 80110d6:	4293      	cmp	r3, r2
 80110d8:	f200 80a6 	bhi.w	8011228 <HAL_TIM_ConfigClockSource+0x1bc>
 80110dc:	4a5e      	ldr	r2, [pc, #376]	@ (8011258 <HAL_TIM_ConfigClockSource+0x1ec>)
 80110de:	4293      	cmp	r3, r2
 80110e0:	f000 8099 	beq.w	8011216 <HAL_TIM_ConfigClockSource+0x1aa>
 80110e4:	4a5c      	ldr	r2, [pc, #368]	@ (8011258 <HAL_TIM_ConfigClockSource+0x1ec>)
 80110e6:	4293      	cmp	r3, r2
 80110e8:	f200 809e 	bhi.w	8011228 <HAL_TIM_ConfigClockSource+0x1bc>
 80110ec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80110f0:	f000 8091 	beq.w	8011216 <HAL_TIM_ConfigClockSource+0x1aa>
 80110f4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80110f8:	f200 8096 	bhi.w	8011228 <HAL_TIM_ConfigClockSource+0x1bc>
 80110fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011100:	f000 8089 	beq.w	8011216 <HAL_TIM_ConfigClockSource+0x1aa>
 8011104:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011108:	f200 808e 	bhi.w	8011228 <HAL_TIM_ConfigClockSource+0x1bc>
 801110c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011110:	d03e      	beq.n	8011190 <HAL_TIM_ConfigClockSource+0x124>
 8011112:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011116:	f200 8087 	bhi.w	8011228 <HAL_TIM_ConfigClockSource+0x1bc>
 801111a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801111e:	f000 8086 	beq.w	801122e <HAL_TIM_ConfigClockSource+0x1c2>
 8011122:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011126:	d87f      	bhi.n	8011228 <HAL_TIM_ConfigClockSource+0x1bc>
 8011128:	2b70      	cmp	r3, #112	@ 0x70
 801112a:	d01a      	beq.n	8011162 <HAL_TIM_ConfigClockSource+0xf6>
 801112c:	2b70      	cmp	r3, #112	@ 0x70
 801112e:	d87b      	bhi.n	8011228 <HAL_TIM_ConfigClockSource+0x1bc>
 8011130:	2b60      	cmp	r3, #96	@ 0x60
 8011132:	d050      	beq.n	80111d6 <HAL_TIM_ConfigClockSource+0x16a>
 8011134:	2b60      	cmp	r3, #96	@ 0x60
 8011136:	d877      	bhi.n	8011228 <HAL_TIM_ConfigClockSource+0x1bc>
 8011138:	2b50      	cmp	r3, #80	@ 0x50
 801113a:	d03c      	beq.n	80111b6 <HAL_TIM_ConfigClockSource+0x14a>
 801113c:	2b50      	cmp	r3, #80	@ 0x50
 801113e:	d873      	bhi.n	8011228 <HAL_TIM_ConfigClockSource+0x1bc>
 8011140:	2b40      	cmp	r3, #64	@ 0x40
 8011142:	d058      	beq.n	80111f6 <HAL_TIM_ConfigClockSource+0x18a>
 8011144:	2b40      	cmp	r3, #64	@ 0x40
 8011146:	d86f      	bhi.n	8011228 <HAL_TIM_ConfigClockSource+0x1bc>
 8011148:	2b30      	cmp	r3, #48	@ 0x30
 801114a:	d064      	beq.n	8011216 <HAL_TIM_ConfigClockSource+0x1aa>
 801114c:	2b30      	cmp	r3, #48	@ 0x30
 801114e:	d86b      	bhi.n	8011228 <HAL_TIM_ConfigClockSource+0x1bc>
 8011150:	2b20      	cmp	r3, #32
 8011152:	d060      	beq.n	8011216 <HAL_TIM_ConfigClockSource+0x1aa>
 8011154:	2b20      	cmp	r3, #32
 8011156:	d867      	bhi.n	8011228 <HAL_TIM_ConfigClockSource+0x1bc>
 8011158:	2b00      	cmp	r3, #0
 801115a:	d05c      	beq.n	8011216 <HAL_TIM_ConfigClockSource+0x1aa>
 801115c:	2b10      	cmp	r3, #16
 801115e:	d05a      	beq.n	8011216 <HAL_TIM_ConfigClockSource+0x1aa>
 8011160:	e062      	b.n	8011228 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8011166:	683b      	ldr	r3, [r7, #0]
 8011168:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801116a:	683b      	ldr	r3, [r7, #0]
 801116c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801116e:	683b      	ldr	r3, [r7, #0]
 8011170:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8011172:	f000 f9cb 	bl	801150c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	689b      	ldr	r3, [r3, #8]
 801117c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801117e:	68bb      	ldr	r3, [r7, #8]
 8011180:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8011184:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	68ba      	ldr	r2, [r7, #8]
 801118c:	609a      	str	r2, [r3, #8]
      break;
 801118e:	e04f      	b.n	8011230 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8011194:	683b      	ldr	r3, [r7, #0]
 8011196:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801119c:	683b      	ldr	r3, [r7, #0]
 801119e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80111a0:	f000 f9b4 	bl	801150c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	689a      	ldr	r2, [r3, #8]
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80111b2:	609a      	str	r2, [r3, #8]
      break;
 80111b4:	e03c      	b.n	8011230 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80111ba:	683b      	ldr	r3, [r7, #0]
 80111bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80111be:	683b      	ldr	r3, [r7, #0]
 80111c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80111c2:	461a      	mov	r2, r3
 80111c4:	f000 f924 	bl	8011410 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	2150      	movs	r1, #80	@ 0x50
 80111ce:	4618      	mov	r0, r3
 80111d0:	f000 f97e 	bl	80114d0 <TIM_ITRx_SetConfig>
      break;
 80111d4:	e02c      	b.n	8011230 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80111da:	683b      	ldr	r3, [r7, #0]
 80111dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80111de:	683b      	ldr	r3, [r7, #0]
 80111e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80111e2:	461a      	mov	r2, r3
 80111e4:	f000 f943 	bl	801146e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	2160      	movs	r1, #96	@ 0x60
 80111ee:	4618      	mov	r0, r3
 80111f0:	f000 f96e 	bl	80114d0 <TIM_ITRx_SetConfig>
      break;
 80111f4:	e01c      	b.n	8011230 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80111fa:	683b      	ldr	r3, [r7, #0]
 80111fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80111fe:	683b      	ldr	r3, [r7, #0]
 8011200:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011202:	461a      	mov	r2, r3
 8011204:	f000 f904 	bl	8011410 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	2140      	movs	r1, #64	@ 0x40
 801120e:	4618      	mov	r0, r3
 8011210:	f000 f95e 	bl	80114d0 <TIM_ITRx_SetConfig>
      break;
 8011214:	e00c      	b.n	8011230 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	681a      	ldr	r2, [r3, #0]
 801121a:	683b      	ldr	r3, [r7, #0]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	4619      	mov	r1, r3
 8011220:	4610      	mov	r0, r2
 8011222:	f000 f955 	bl	80114d0 <TIM_ITRx_SetConfig>
      break;
 8011226:	e003      	b.n	8011230 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8011228:	2301      	movs	r3, #1
 801122a:	73fb      	strb	r3, [r7, #15]
      break;
 801122c:	e000      	b.n	8011230 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801122e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	2201      	movs	r2, #1
 8011234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	2200      	movs	r2, #0
 801123c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8011240:	7bfb      	ldrb	r3, [r7, #15]
}
 8011242:	4618      	mov	r0, r3
 8011244:	3710      	adds	r7, #16
 8011246:	46bd      	mov	sp, r7
 8011248:	bd80      	pop	{r7, pc}
 801124a:	bf00      	nop
 801124c:	ffceff88 	.word	0xffceff88
 8011250:	00100040 	.word	0x00100040
 8011254:	00100030 	.word	0x00100030
 8011258:	00100020 	.word	0x00100020

0801125c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801125c:	b480      	push	{r7}
 801125e:	b083      	sub	sp, #12
 8011260:	af00      	add	r7, sp, #0
 8011262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011264:	bf00      	nop
 8011266:	370c      	adds	r7, #12
 8011268:	46bd      	mov	sp, r7
 801126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126e:	4770      	bx	lr

08011270 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011270:	b480      	push	{r7}
 8011272:	b083      	sub	sp, #12
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8011278:	bf00      	nop
 801127a:	370c      	adds	r7, #12
 801127c:	46bd      	mov	sp, r7
 801127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011282:	4770      	bx	lr

08011284 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8011284:	b480      	push	{r7}
 8011286:	b083      	sub	sp, #12
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801128c:	bf00      	nop
 801128e:	370c      	adds	r7, #12
 8011290:	46bd      	mov	sp, r7
 8011292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011296:	4770      	bx	lr

08011298 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011298:	b480      	push	{r7}
 801129a:	b083      	sub	sp, #12
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80112a0:	bf00      	nop
 80112a2:	370c      	adds	r7, #12
 80112a4:	46bd      	mov	sp, r7
 80112a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112aa:	4770      	bx	lr

080112ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80112ac:	b480      	push	{r7}
 80112ae:	b085      	sub	sp, #20
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
 80112b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	4a4a      	ldr	r2, [pc, #296]	@ (80113e8 <TIM_Base_SetConfig+0x13c>)
 80112c0:	4293      	cmp	r3, r2
 80112c2:	d013      	beq.n	80112ec <TIM_Base_SetConfig+0x40>
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80112ca:	d00f      	beq.n	80112ec <TIM_Base_SetConfig+0x40>
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	4a47      	ldr	r2, [pc, #284]	@ (80113ec <TIM_Base_SetConfig+0x140>)
 80112d0:	4293      	cmp	r3, r2
 80112d2:	d00b      	beq.n	80112ec <TIM_Base_SetConfig+0x40>
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	4a46      	ldr	r2, [pc, #280]	@ (80113f0 <TIM_Base_SetConfig+0x144>)
 80112d8:	4293      	cmp	r3, r2
 80112da:	d007      	beq.n	80112ec <TIM_Base_SetConfig+0x40>
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	4a45      	ldr	r2, [pc, #276]	@ (80113f4 <TIM_Base_SetConfig+0x148>)
 80112e0:	4293      	cmp	r3, r2
 80112e2:	d003      	beq.n	80112ec <TIM_Base_SetConfig+0x40>
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	4a44      	ldr	r2, [pc, #272]	@ (80113f8 <TIM_Base_SetConfig+0x14c>)
 80112e8:	4293      	cmp	r3, r2
 80112ea:	d108      	bne.n	80112fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80112f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80112f4:	683b      	ldr	r3, [r7, #0]
 80112f6:	685b      	ldr	r3, [r3, #4]
 80112f8:	68fa      	ldr	r2, [r7, #12]
 80112fa:	4313      	orrs	r3, r2
 80112fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	4a39      	ldr	r2, [pc, #228]	@ (80113e8 <TIM_Base_SetConfig+0x13c>)
 8011302:	4293      	cmp	r3, r2
 8011304:	d027      	beq.n	8011356 <TIM_Base_SetConfig+0xaa>
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801130c:	d023      	beq.n	8011356 <TIM_Base_SetConfig+0xaa>
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	4a36      	ldr	r2, [pc, #216]	@ (80113ec <TIM_Base_SetConfig+0x140>)
 8011312:	4293      	cmp	r3, r2
 8011314:	d01f      	beq.n	8011356 <TIM_Base_SetConfig+0xaa>
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	4a35      	ldr	r2, [pc, #212]	@ (80113f0 <TIM_Base_SetConfig+0x144>)
 801131a:	4293      	cmp	r3, r2
 801131c:	d01b      	beq.n	8011356 <TIM_Base_SetConfig+0xaa>
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	4a34      	ldr	r2, [pc, #208]	@ (80113f4 <TIM_Base_SetConfig+0x148>)
 8011322:	4293      	cmp	r3, r2
 8011324:	d017      	beq.n	8011356 <TIM_Base_SetConfig+0xaa>
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	4a33      	ldr	r2, [pc, #204]	@ (80113f8 <TIM_Base_SetConfig+0x14c>)
 801132a:	4293      	cmp	r3, r2
 801132c:	d013      	beq.n	8011356 <TIM_Base_SetConfig+0xaa>
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	4a32      	ldr	r2, [pc, #200]	@ (80113fc <TIM_Base_SetConfig+0x150>)
 8011332:	4293      	cmp	r3, r2
 8011334:	d00f      	beq.n	8011356 <TIM_Base_SetConfig+0xaa>
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	4a31      	ldr	r2, [pc, #196]	@ (8011400 <TIM_Base_SetConfig+0x154>)
 801133a:	4293      	cmp	r3, r2
 801133c:	d00b      	beq.n	8011356 <TIM_Base_SetConfig+0xaa>
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	4a30      	ldr	r2, [pc, #192]	@ (8011404 <TIM_Base_SetConfig+0x158>)
 8011342:	4293      	cmp	r3, r2
 8011344:	d007      	beq.n	8011356 <TIM_Base_SetConfig+0xaa>
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	4a2f      	ldr	r2, [pc, #188]	@ (8011408 <TIM_Base_SetConfig+0x15c>)
 801134a:	4293      	cmp	r3, r2
 801134c:	d003      	beq.n	8011356 <TIM_Base_SetConfig+0xaa>
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	4a2e      	ldr	r2, [pc, #184]	@ (801140c <TIM_Base_SetConfig+0x160>)
 8011352:	4293      	cmp	r3, r2
 8011354:	d108      	bne.n	8011368 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801135c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801135e:	683b      	ldr	r3, [r7, #0]
 8011360:	68db      	ldr	r3, [r3, #12]
 8011362:	68fa      	ldr	r2, [r7, #12]
 8011364:	4313      	orrs	r3, r2
 8011366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801136e:	683b      	ldr	r3, [r7, #0]
 8011370:	695b      	ldr	r3, [r3, #20]
 8011372:	4313      	orrs	r3, r2
 8011374:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	68fa      	ldr	r2, [r7, #12]
 801137a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801137c:	683b      	ldr	r3, [r7, #0]
 801137e:	689a      	ldr	r2, [r3, #8]
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011384:	683b      	ldr	r3, [r7, #0]
 8011386:	681a      	ldr	r2, [r3, #0]
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	4a16      	ldr	r2, [pc, #88]	@ (80113e8 <TIM_Base_SetConfig+0x13c>)
 8011390:	4293      	cmp	r3, r2
 8011392:	d00f      	beq.n	80113b4 <TIM_Base_SetConfig+0x108>
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	4a18      	ldr	r2, [pc, #96]	@ (80113f8 <TIM_Base_SetConfig+0x14c>)
 8011398:	4293      	cmp	r3, r2
 801139a:	d00b      	beq.n	80113b4 <TIM_Base_SetConfig+0x108>
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	4a17      	ldr	r2, [pc, #92]	@ (80113fc <TIM_Base_SetConfig+0x150>)
 80113a0:	4293      	cmp	r3, r2
 80113a2:	d007      	beq.n	80113b4 <TIM_Base_SetConfig+0x108>
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	4a16      	ldr	r2, [pc, #88]	@ (8011400 <TIM_Base_SetConfig+0x154>)
 80113a8:	4293      	cmp	r3, r2
 80113aa:	d003      	beq.n	80113b4 <TIM_Base_SetConfig+0x108>
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	4a15      	ldr	r2, [pc, #84]	@ (8011404 <TIM_Base_SetConfig+0x158>)
 80113b0:	4293      	cmp	r3, r2
 80113b2:	d103      	bne.n	80113bc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80113b4:	683b      	ldr	r3, [r7, #0]
 80113b6:	691a      	ldr	r2, [r3, #16]
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	2201      	movs	r2, #1
 80113c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	691b      	ldr	r3, [r3, #16]
 80113c6:	f003 0301 	and.w	r3, r3, #1
 80113ca:	2b01      	cmp	r3, #1
 80113cc:	d105      	bne.n	80113da <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	691b      	ldr	r3, [r3, #16]
 80113d2:	f023 0201 	bic.w	r2, r3, #1
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	611a      	str	r2, [r3, #16]
  }
}
 80113da:	bf00      	nop
 80113dc:	3714      	adds	r7, #20
 80113de:	46bd      	mov	sp, r7
 80113e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e4:	4770      	bx	lr
 80113e6:	bf00      	nop
 80113e8:	40010000 	.word	0x40010000
 80113ec:	40000400 	.word	0x40000400
 80113f0:	40000800 	.word	0x40000800
 80113f4:	40000c00 	.word	0x40000c00
 80113f8:	40010400 	.word	0x40010400
 80113fc:	40014000 	.word	0x40014000
 8011400:	40014400 	.word	0x40014400
 8011404:	40014800 	.word	0x40014800
 8011408:	4000e000 	.word	0x4000e000
 801140c:	4000e400 	.word	0x4000e400

08011410 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011410:	b480      	push	{r7}
 8011412:	b087      	sub	sp, #28
 8011414:	af00      	add	r7, sp, #0
 8011416:	60f8      	str	r0, [r7, #12]
 8011418:	60b9      	str	r1, [r7, #8]
 801141a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	6a1b      	ldr	r3, [r3, #32]
 8011420:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	6a1b      	ldr	r3, [r3, #32]
 8011426:	f023 0201 	bic.w	r2, r3, #1
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	699b      	ldr	r3, [r3, #24]
 8011432:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011434:	693b      	ldr	r3, [r7, #16]
 8011436:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801143a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	011b      	lsls	r3, r3, #4
 8011440:	693a      	ldr	r2, [r7, #16]
 8011442:	4313      	orrs	r3, r2
 8011444:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011446:	697b      	ldr	r3, [r7, #20]
 8011448:	f023 030a 	bic.w	r3, r3, #10
 801144c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801144e:	697a      	ldr	r2, [r7, #20]
 8011450:	68bb      	ldr	r3, [r7, #8]
 8011452:	4313      	orrs	r3, r2
 8011454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	693a      	ldr	r2, [r7, #16]
 801145a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	697a      	ldr	r2, [r7, #20]
 8011460:	621a      	str	r2, [r3, #32]
}
 8011462:	bf00      	nop
 8011464:	371c      	adds	r7, #28
 8011466:	46bd      	mov	sp, r7
 8011468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146c:	4770      	bx	lr

0801146e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801146e:	b480      	push	{r7}
 8011470:	b087      	sub	sp, #28
 8011472:	af00      	add	r7, sp, #0
 8011474:	60f8      	str	r0, [r7, #12]
 8011476:	60b9      	str	r1, [r7, #8]
 8011478:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	6a1b      	ldr	r3, [r3, #32]
 801147e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	6a1b      	ldr	r3, [r3, #32]
 8011484:	f023 0210 	bic.w	r2, r3, #16
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	699b      	ldr	r3, [r3, #24]
 8011490:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011492:	693b      	ldr	r3, [r7, #16]
 8011494:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8011498:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	031b      	lsls	r3, r3, #12
 801149e:	693a      	ldr	r2, [r7, #16]
 80114a0:	4313      	orrs	r3, r2
 80114a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80114a4:	697b      	ldr	r3, [r7, #20]
 80114a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80114aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80114ac:	68bb      	ldr	r3, [r7, #8]
 80114ae:	011b      	lsls	r3, r3, #4
 80114b0:	697a      	ldr	r2, [r7, #20]
 80114b2:	4313      	orrs	r3, r2
 80114b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	693a      	ldr	r2, [r7, #16]
 80114ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	697a      	ldr	r2, [r7, #20]
 80114c0:	621a      	str	r2, [r3, #32]
}
 80114c2:	bf00      	nop
 80114c4:	371c      	adds	r7, #28
 80114c6:	46bd      	mov	sp, r7
 80114c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114cc:	4770      	bx	lr
	...

080114d0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80114d0:	b480      	push	{r7}
 80114d2:	b085      	sub	sp, #20
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
 80114d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	689b      	ldr	r3, [r3, #8]
 80114de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80114e0:	68fa      	ldr	r2, [r7, #12]
 80114e2:	4b09      	ldr	r3, [pc, #36]	@ (8011508 <TIM_ITRx_SetConfig+0x38>)
 80114e4:	4013      	ands	r3, r2
 80114e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80114e8:	683a      	ldr	r2, [r7, #0]
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	4313      	orrs	r3, r2
 80114ee:	f043 0307 	orr.w	r3, r3, #7
 80114f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	68fa      	ldr	r2, [r7, #12]
 80114f8:	609a      	str	r2, [r3, #8]
}
 80114fa:	bf00      	nop
 80114fc:	3714      	adds	r7, #20
 80114fe:	46bd      	mov	sp, r7
 8011500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011504:	4770      	bx	lr
 8011506:	bf00      	nop
 8011508:	ffcfff8f 	.word	0xffcfff8f

0801150c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801150c:	b480      	push	{r7}
 801150e:	b087      	sub	sp, #28
 8011510:	af00      	add	r7, sp, #0
 8011512:	60f8      	str	r0, [r7, #12]
 8011514:	60b9      	str	r1, [r7, #8]
 8011516:	607a      	str	r2, [r7, #4]
 8011518:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	689b      	ldr	r3, [r3, #8]
 801151e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011520:	697b      	ldr	r3, [r7, #20]
 8011522:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8011526:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011528:	683b      	ldr	r3, [r7, #0]
 801152a:	021a      	lsls	r2, r3, #8
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	431a      	orrs	r2, r3
 8011530:	68bb      	ldr	r3, [r7, #8]
 8011532:	4313      	orrs	r3, r2
 8011534:	697a      	ldr	r2, [r7, #20]
 8011536:	4313      	orrs	r3, r2
 8011538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	697a      	ldr	r2, [r7, #20]
 801153e:	609a      	str	r2, [r3, #8]
}
 8011540:	bf00      	nop
 8011542:	371c      	adds	r7, #28
 8011544:	46bd      	mov	sp, r7
 8011546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154a:	4770      	bx	lr

0801154c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801154c:	b480      	push	{r7}
 801154e:	b085      	sub	sp, #20
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
 8011554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801155c:	2b01      	cmp	r3, #1
 801155e:	d101      	bne.n	8011564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011560:	2302      	movs	r3, #2
 8011562:	e077      	b.n	8011654 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	2201      	movs	r2, #1
 8011568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	2202      	movs	r2, #2
 8011570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	685b      	ldr	r3, [r3, #4]
 801157a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	689b      	ldr	r3, [r3, #8]
 8011582:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	4a35      	ldr	r2, [pc, #212]	@ (8011660 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801158a:	4293      	cmp	r3, r2
 801158c:	d004      	beq.n	8011598 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	4a34      	ldr	r2, [pc, #208]	@ (8011664 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011594:	4293      	cmp	r3, r2
 8011596:	d108      	bne.n	80115aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801159e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80115a0:	683b      	ldr	r3, [r7, #0]
 80115a2:	685b      	ldr	r3, [r3, #4]
 80115a4:	68fa      	ldr	r2, [r7, #12]
 80115a6:	4313      	orrs	r3, r2
 80115a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80115b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80115b2:	683b      	ldr	r3, [r7, #0]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	68fa      	ldr	r2, [r7, #12]
 80115b8:	4313      	orrs	r3, r2
 80115ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	68fa      	ldr	r2, [r7, #12]
 80115c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	4a25      	ldr	r2, [pc, #148]	@ (8011660 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80115ca:	4293      	cmp	r3, r2
 80115cc:	d02c      	beq.n	8011628 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80115d6:	d027      	beq.n	8011628 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	4a22      	ldr	r2, [pc, #136]	@ (8011668 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80115de:	4293      	cmp	r3, r2
 80115e0:	d022      	beq.n	8011628 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	4a21      	ldr	r2, [pc, #132]	@ (801166c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80115e8:	4293      	cmp	r3, r2
 80115ea:	d01d      	beq.n	8011628 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	4a1f      	ldr	r2, [pc, #124]	@ (8011670 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80115f2:	4293      	cmp	r3, r2
 80115f4:	d018      	beq.n	8011628 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	4a1a      	ldr	r2, [pc, #104]	@ (8011664 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80115fc:	4293      	cmp	r3, r2
 80115fe:	d013      	beq.n	8011628 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	4a1b      	ldr	r2, [pc, #108]	@ (8011674 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8011606:	4293      	cmp	r3, r2
 8011608:	d00e      	beq.n	8011628 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	4a1a      	ldr	r2, [pc, #104]	@ (8011678 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8011610:	4293      	cmp	r3, r2
 8011612:	d009      	beq.n	8011628 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	4a18      	ldr	r2, [pc, #96]	@ (801167c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 801161a:	4293      	cmp	r3, r2
 801161c:	d004      	beq.n	8011628 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	4a17      	ldr	r2, [pc, #92]	@ (8011680 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8011624:	4293      	cmp	r3, r2
 8011626:	d10c      	bne.n	8011642 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011628:	68bb      	ldr	r3, [r7, #8]
 801162a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801162e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	689b      	ldr	r3, [r3, #8]
 8011634:	68ba      	ldr	r2, [r7, #8]
 8011636:	4313      	orrs	r3, r2
 8011638:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	68ba      	ldr	r2, [r7, #8]
 8011640:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	2201      	movs	r2, #1
 8011646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	2200      	movs	r2, #0
 801164e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8011652:	2300      	movs	r3, #0
}
 8011654:	4618      	mov	r0, r3
 8011656:	3714      	adds	r7, #20
 8011658:	46bd      	mov	sp, r7
 801165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801165e:	4770      	bx	lr
 8011660:	40010000 	.word	0x40010000
 8011664:	40010400 	.word	0x40010400
 8011668:	40000400 	.word	0x40000400
 801166c:	40000800 	.word	0x40000800
 8011670:	40000c00 	.word	0x40000c00
 8011674:	40001800 	.word	0x40001800
 8011678:	40014000 	.word	0x40014000
 801167c:	4000e000 	.word	0x4000e000
 8011680:	4000e400 	.word	0x4000e400

08011684 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011684:	b480      	push	{r7}
 8011686:	b083      	sub	sp, #12
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801168c:	bf00      	nop
 801168e:	370c      	adds	r7, #12
 8011690:	46bd      	mov	sp, r7
 8011692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011696:	4770      	bx	lr

08011698 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011698:	b480      	push	{r7}
 801169a:	b083      	sub	sp, #12
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80116a0:	bf00      	nop
 80116a2:	370c      	adds	r7, #12
 80116a4:	46bd      	mov	sp, r7
 80116a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116aa:	4770      	bx	lr

080116ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80116ac:	b480      	push	{r7}
 80116ae:	b083      	sub	sp, #12
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80116b4:	bf00      	nop
 80116b6:	370c      	adds	r7, #12
 80116b8:	46bd      	mov	sp, r7
 80116ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116be:	4770      	bx	lr

080116c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b082      	sub	sp, #8
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d101      	bne.n	80116d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80116ce:	2301      	movs	r3, #1
 80116d0:	e042      	b.n	8011758 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d106      	bne.n	80116ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	2200      	movs	r2, #0
 80116e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80116e4:	6878      	ldr	r0, [r7, #4]
 80116e6:	f7f8 f84f 	bl	8009788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	2224      	movs	r2, #36	@ 0x24
 80116ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	681a      	ldr	r2, [r3, #0]
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	f022 0201 	bic.w	r2, r2, #1
 8011700:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011706:	2b00      	cmp	r3, #0
 8011708:	d002      	beq.n	8011710 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801170a:	6878      	ldr	r0, [r7, #4]
 801170c:	f001 fbf0 	bl	8012ef0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011710:	6878      	ldr	r0, [r7, #4]
 8011712:	f000 fd81 	bl	8012218 <UART_SetConfig>
 8011716:	4603      	mov	r3, r0
 8011718:	2b01      	cmp	r3, #1
 801171a:	d101      	bne.n	8011720 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801171c:	2301      	movs	r3, #1
 801171e:	e01b      	b.n	8011758 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	685a      	ldr	r2, [r3, #4]
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801172e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	689a      	ldr	r2, [r3, #8]
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801173e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	681a      	ldr	r2, [r3, #0]
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	f042 0201 	orr.w	r2, r2, #1
 801174e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011750:	6878      	ldr	r0, [r7, #4]
 8011752:	f001 fc6f 	bl	8013034 <UART_CheckIdleState>
 8011756:	4603      	mov	r3, r0
}
 8011758:	4618      	mov	r0, r3
 801175a:	3708      	adds	r7, #8
 801175c:	46bd      	mov	sp, r7
 801175e:	bd80      	pop	{r7, pc}

08011760 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b08a      	sub	sp, #40	@ 0x28
 8011764:	af00      	add	r7, sp, #0
 8011766:	60f8      	str	r0, [r7, #12]
 8011768:	60b9      	str	r1, [r7, #8]
 801176a:	4613      	mov	r3, r2
 801176c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011774:	2b20      	cmp	r3, #32
 8011776:	d167      	bne.n	8011848 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8011778:	68bb      	ldr	r3, [r7, #8]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d002      	beq.n	8011784 <HAL_UART_Transmit_DMA+0x24>
 801177e:	88fb      	ldrh	r3, [r7, #6]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d101      	bne.n	8011788 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8011784:	2301      	movs	r3, #1
 8011786:	e060      	b.n	801184a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	68ba      	ldr	r2, [r7, #8]
 801178c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	88fa      	ldrh	r2, [r7, #6]
 8011792:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	88fa      	ldrh	r2, [r7, #6]
 801179a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	2200      	movs	r2, #0
 80117a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	2221      	movs	r2, #33	@ 0x21
 80117aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d028      	beq.n	8011808 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80117ba:	4a26      	ldr	r2, [pc, #152]	@ (8011854 <HAL_UART_Transmit_DMA+0xf4>)
 80117bc:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80117c2:	4a25      	ldr	r2, [pc, #148]	@ (8011858 <HAL_UART_Transmit_DMA+0xf8>)
 80117c4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80117ca:	4a24      	ldr	r2, [pc, #144]	@ (801185c <HAL_UART_Transmit_DMA+0xfc>)
 80117cc:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80117d2:	2200      	movs	r2, #0
 80117d4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80117de:	4619      	mov	r1, r3
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	3328      	adds	r3, #40	@ 0x28
 80117e6:	461a      	mov	r2, r3
 80117e8:	88fb      	ldrh	r3, [r7, #6]
 80117ea:	f7f8 fe95 	bl	800a518 <HAL_DMA_Start_IT>
 80117ee:	4603      	mov	r3, r0
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d009      	beq.n	8011808 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	2210      	movs	r2, #16
 80117f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	2220      	movs	r2, #32
 8011800:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8011804:	2301      	movs	r3, #1
 8011806:	e020      	b.n	801184a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	2240      	movs	r2, #64	@ 0x40
 801180e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	3308      	adds	r3, #8
 8011816:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011818:	697b      	ldr	r3, [r7, #20]
 801181a:	e853 3f00 	ldrex	r3, [r3]
 801181e:	613b      	str	r3, [r7, #16]
   return(result);
 8011820:	693b      	ldr	r3, [r7, #16]
 8011822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011826:	627b      	str	r3, [r7, #36]	@ 0x24
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	3308      	adds	r3, #8
 801182e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011830:	623a      	str	r2, [r7, #32]
 8011832:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011834:	69f9      	ldr	r1, [r7, #28]
 8011836:	6a3a      	ldr	r2, [r7, #32]
 8011838:	e841 2300 	strex	r3, r2, [r1]
 801183c:	61bb      	str	r3, [r7, #24]
   return(result);
 801183e:	69bb      	ldr	r3, [r7, #24]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d1e5      	bne.n	8011810 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8011844:	2300      	movs	r3, #0
 8011846:	e000      	b.n	801184a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8011848:	2302      	movs	r3, #2
  }
}
 801184a:	4618      	mov	r0, r3
 801184c:	3728      	adds	r7, #40	@ 0x28
 801184e:	46bd      	mov	sp, r7
 8011850:	bd80      	pop	{r7, pc}
 8011852:	bf00      	nop
 8011854:	08013501 	.word	0x08013501
 8011858:	08013597 	.word	0x08013597
 801185c:	08013719 	.word	0x08013719

08011860 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b08a      	sub	sp, #40	@ 0x28
 8011864:	af00      	add	r7, sp, #0
 8011866:	60f8      	str	r0, [r7, #12]
 8011868:	60b9      	str	r1, [r7, #8]
 801186a:	4613      	mov	r3, r2
 801186c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011874:	2b20      	cmp	r3, #32
 8011876:	d137      	bne.n	80118e8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8011878:	68bb      	ldr	r3, [r7, #8]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d002      	beq.n	8011884 <HAL_UART_Receive_DMA+0x24>
 801187e:	88fb      	ldrh	r3, [r7, #6]
 8011880:	2b00      	cmp	r3, #0
 8011882:	d101      	bne.n	8011888 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8011884:	2301      	movs	r3, #1
 8011886:	e030      	b.n	80118ea <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	2200      	movs	r2, #0
 801188c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	4a18      	ldr	r2, [pc, #96]	@ (80118f4 <HAL_UART_Receive_DMA+0x94>)
 8011894:	4293      	cmp	r3, r2
 8011896:	d01f      	beq.n	80118d8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	685b      	ldr	r3, [r3, #4]
 801189e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d018      	beq.n	80118d8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118ac:	697b      	ldr	r3, [r7, #20]
 80118ae:	e853 3f00 	ldrex	r3, [r3]
 80118b2:	613b      	str	r3, [r7, #16]
   return(result);
 80118b4:	693b      	ldr	r3, [r7, #16]
 80118b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80118ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	461a      	mov	r2, r3
 80118c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118c4:	623b      	str	r3, [r7, #32]
 80118c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118c8:	69f9      	ldr	r1, [r7, #28]
 80118ca:	6a3a      	ldr	r2, [r7, #32]
 80118cc:	e841 2300 	strex	r3, r2, [r1]
 80118d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80118d2:	69bb      	ldr	r3, [r7, #24]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d1e6      	bne.n	80118a6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80118d8:	88fb      	ldrh	r3, [r7, #6]
 80118da:	461a      	mov	r2, r3
 80118dc:	68b9      	ldr	r1, [r7, #8]
 80118de:	68f8      	ldr	r0, [r7, #12]
 80118e0:	f001 fcc0 	bl	8013264 <UART_Start_Receive_DMA>
 80118e4:	4603      	mov	r3, r0
 80118e6:	e000      	b.n	80118ea <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80118e8:	2302      	movs	r3, #2
  }
}
 80118ea:	4618      	mov	r0, r3
 80118ec:	3728      	adds	r7, #40	@ 0x28
 80118ee:	46bd      	mov	sp, r7
 80118f0:	bd80      	pop	{r7, pc}
 80118f2:	bf00      	nop
 80118f4:	58000c00 	.word	0x58000c00

080118f8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b09a      	sub	sp, #104	@ 0x68
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011906:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011908:	e853 3f00 	ldrex	r3, [r3]
 801190c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801190e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011910:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011914:	667b      	str	r3, [r7, #100]	@ 0x64
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	461a      	mov	r2, r3
 801191c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801191e:	657b      	str	r3, [r7, #84]	@ 0x54
 8011920:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011922:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011924:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011926:	e841 2300 	strex	r3, r2, [r1]
 801192a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801192c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801192e:	2b00      	cmp	r3, #0
 8011930:	d1e6      	bne.n	8011900 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	3308      	adds	r3, #8
 8011938:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801193a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801193c:	e853 3f00 	ldrex	r3, [r3]
 8011940:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011942:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011944:	4b46      	ldr	r3, [pc, #280]	@ (8011a60 <HAL_UART_AbortReceive+0x168>)
 8011946:	4013      	ands	r3, r2
 8011948:	663b      	str	r3, [r7, #96]	@ 0x60
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	3308      	adds	r3, #8
 8011950:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011952:	643a      	str	r2, [r7, #64]	@ 0x40
 8011954:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011956:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011958:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801195a:	e841 2300 	strex	r3, r2, [r1]
 801195e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011962:	2b00      	cmp	r3, #0
 8011964:	d1e5      	bne.n	8011932 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801196a:	2b01      	cmp	r3, #1
 801196c:	d118      	bne.n	80119a0 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011974:	6a3b      	ldr	r3, [r7, #32]
 8011976:	e853 3f00 	ldrex	r3, [r3]
 801197a:	61fb      	str	r3, [r7, #28]
   return(result);
 801197c:	69fb      	ldr	r3, [r7, #28]
 801197e:	f023 0310 	bic.w	r3, r3, #16
 8011982:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	461a      	mov	r2, r3
 801198a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801198c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801198e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011990:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011992:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011994:	e841 2300 	strex	r3, r2, [r1]
 8011998:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801199a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801199c:	2b00      	cmp	r3, #0
 801199e:	d1e6      	bne.n	801196e <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	689b      	ldr	r3, [r3, #8]
 80119a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80119aa:	2b40      	cmp	r3, #64	@ 0x40
 80119ac:	d13b      	bne.n	8011a26 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	3308      	adds	r3, #8
 80119b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	e853 3f00 	ldrex	r3, [r3]
 80119bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80119be:	68bb      	ldr	r3, [r7, #8]
 80119c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80119c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	3308      	adds	r3, #8
 80119cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80119ce:	61ba      	str	r2, [r7, #24]
 80119d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119d2:	6979      	ldr	r1, [r7, #20]
 80119d4:	69ba      	ldr	r2, [r7, #24]
 80119d6:	e841 2300 	strex	r3, r2, [r1]
 80119da:	613b      	str	r3, [r7, #16]
   return(result);
 80119dc:	693b      	ldr	r3, [r7, #16]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d1e5      	bne.n	80119ae <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d01c      	beq.n	8011a26 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80119f2:	2200      	movs	r2, #0
 80119f4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80119fc:	4618      	mov	r0, r3
 80119fe:	f7f8 fff5 	bl	800a9ec <HAL_DMA_Abort>
 8011a02:	4603      	mov	r3, r0
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d00e      	beq.n	8011a26 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011a0e:	4618      	mov	r0, r3
 8011a10:	f7fa fc7a 	bl	800c308 <HAL_DMA_GetError>
 8011a14:	4603      	mov	r3, r0
 8011a16:	2b20      	cmp	r3, #32
 8011a18:	d105      	bne.n	8011a26 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	2210      	movs	r2, #16
 8011a1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8011a22:	2303      	movs	r3, #3
 8011a24:	e017      	b.n	8011a56 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	2200      	movs	r2, #0
 8011a2a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	220f      	movs	r2, #15
 8011a34:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	699a      	ldr	r2, [r3, #24]
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	f042 0208 	orr.w	r2, r2, #8
 8011a44:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	2220      	movs	r2, #32
 8011a4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	2200      	movs	r2, #0
 8011a52:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8011a54:	2300      	movs	r3, #0
}
 8011a56:	4618      	mov	r0, r3
 8011a58:	3768      	adds	r7, #104	@ 0x68
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	bd80      	pop	{r7, pc}
 8011a5e:	bf00      	nop
 8011a60:	effffffe 	.word	0xeffffffe

08011a64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b0ba      	sub	sp, #232	@ 0xe8
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	69db      	ldr	r3, [r3, #28]
 8011a72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	689b      	ldr	r3, [r3, #8]
 8011a86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8011a8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8011a8e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8011a92:	4013      	ands	r3, r2
 8011a94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8011a98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d11b      	bne.n	8011ad8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011aa4:	f003 0320 	and.w	r3, r3, #32
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d015      	beq.n	8011ad8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8011aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011ab0:	f003 0320 	and.w	r3, r3, #32
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d105      	bne.n	8011ac4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8011ab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011abc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d009      	beq.n	8011ad8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	f000 8377 	beq.w	80121bc <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011ad2:	6878      	ldr	r0, [r7, #4]
 8011ad4:	4798      	blx	r3
      }
      return;
 8011ad6:	e371      	b.n	80121bc <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8011ad8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	f000 8123 	beq.w	8011d28 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8011ae2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8011ae6:	4b8d      	ldr	r3, [pc, #564]	@ (8011d1c <HAL_UART_IRQHandler+0x2b8>)
 8011ae8:	4013      	ands	r3, r2
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d106      	bne.n	8011afc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8011aee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8011af2:	4b8b      	ldr	r3, [pc, #556]	@ (8011d20 <HAL_UART_IRQHandler+0x2bc>)
 8011af4:	4013      	ands	r3, r2
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	f000 8116 	beq.w	8011d28 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011b00:	f003 0301 	and.w	r3, r3, #1
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d011      	beq.n	8011b2c <HAL_UART_IRQHandler+0xc8>
 8011b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d00b      	beq.n	8011b2c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	2201      	movs	r2, #1
 8011b1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011b22:	f043 0201 	orr.w	r2, r3, #1
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011b30:	f003 0302 	and.w	r3, r3, #2
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d011      	beq.n	8011b5c <HAL_UART_IRQHandler+0xf8>
 8011b38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011b3c:	f003 0301 	and.w	r3, r3, #1
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d00b      	beq.n	8011b5c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	2202      	movs	r2, #2
 8011b4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011b52:	f043 0204 	orr.w	r2, r3, #4
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011b60:	f003 0304 	and.w	r3, r3, #4
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d011      	beq.n	8011b8c <HAL_UART_IRQHandler+0x128>
 8011b68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011b6c:	f003 0301 	and.w	r3, r3, #1
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d00b      	beq.n	8011b8c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	2204      	movs	r2, #4
 8011b7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011b82:	f043 0202 	orr.w	r2, r3, #2
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8011b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011b90:	f003 0308 	and.w	r3, r3, #8
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d017      	beq.n	8011bc8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011b9c:	f003 0320 	and.w	r3, r3, #32
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d105      	bne.n	8011bb0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8011ba4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8011ba8:	4b5c      	ldr	r3, [pc, #368]	@ (8011d1c <HAL_UART_IRQHandler+0x2b8>)
 8011baa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d00b      	beq.n	8011bc8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	2208      	movs	r2, #8
 8011bb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011bbe:	f043 0208 	orr.w	r2, r3, #8
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8011bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011bcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d012      	beq.n	8011bfa <HAL_UART_IRQHandler+0x196>
 8011bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011bd8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d00c      	beq.n	8011bfa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011be8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011bf0:	f043 0220 	orr.w	r2, r3, #32
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	f000 82dd 	beq.w	80121c0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011c0a:	f003 0320 	and.w	r3, r3, #32
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d013      	beq.n	8011c3a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8011c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011c16:	f003 0320 	and.w	r3, r3, #32
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d105      	bne.n	8011c2a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8011c1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d007      	beq.n	8011c3a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d003      	beq.n	8011c3a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011c36:	6878      	ldr	r0, [r7, #4]
 8011c38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011c40:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	689b      	ldr	r3, [r3, #8]
 8011c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011c4e:	2b40      	cmp	r3, #64	@ 0x40
 8011c50:	d005      	beq.n	8011c5e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8011c52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011c56:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d054      	beq.n	8011d08 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8011c5e:	6878      	ldr	r0, [r7, #4]
 8011c60:	f001 fbe8 	bl	8013434 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	689b      	ldr	r3, [r3, #8]
 8011c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011c6e:	2b40      	cmp	r3, #64	@ 0x40
 8011c70:	d146      	bne.n	8011d00 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	3308      	adds	r3, #8
 8011c78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011c80:	e853 3f00 	ldrex	r3, [r3]
 8011c84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8011c88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011c8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011c90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	3308      	adds	r3, #8
 8011c9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8011c9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8011ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ca6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8011caa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8011cae:	e841 2300 	strex	r3, r2, [r1]
 8011cb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8011cb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d1d9      	bne.n	8011c72 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d017      	beq.n	8011cf8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011cce:	4a15      	ldr	r2, [pc, #84]	@ (8011d24 <HAL_UART_IRQHandler+0x2c0>)
 8011cd0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011cd8:	4618      	mov	r0, r3
 8011cda:	f7f9 f9a5 	bl	800b028 <HAL_DMA_Abort_IT>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d019      	beq.n	8011d18 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011cea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011cec:	687a      	ldr	r2, [r7, #4]
 8011cee:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8011cf2:	4610      	mov	r0, r2
 8011cf4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011cf6:	e00f      	b.n	8011d18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8011cf8:	6878      	ldr	r0, [r7, #4]
 8011cfa:	f7f5 fd63 	bl	80077c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011cfe:	e00b      	b.n	8011d18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011d00:	6878      	ldr	r0, [r7, #4]
 8011d02:	f7f5 fd5f 	bl	80077c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011d06:	e007      	b.n	8011d18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8011d08:	6878      	ldr	r0, [r7, #4]
 8011d0a:	f7f5 fd5b 	bl	80077c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	2200      	movs	r2, #0
 8011d12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8011d16:	e253      	b.n	80121c0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011d18:	bf00      	nop
    return;
 8011d1a:	e251      	b.n	80121c0 <HAL_UART_IRQHandler+0x75c>
 8011d1c:	10000001 	.word	0x10000001
 8011d20:	04000120 	.word	0x04000120
 8011d24:	08013799 	.word	0x08013799

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011d2c:	2b01      	cmp	r3, #1
 8011d2e:	f040 81e7 	bne.w	8012100 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8011d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011d36:	f003 0310 	and.w	r3, r3, #16
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	f000 81e0 	beq.w	8012100 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8011d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011d44:	f003 0310 	and.w	r3, r3, #16
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	f000 81d9 	beq.w	8012100 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	2210      	movs	r2, #16
 8011d54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	689b      	ldr	r3, [r3, #8]
 8011d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011d60:	2b40      	cmp	r3, #64	@ 0x40
 8011d62:	f040 8151 	bne.w	8012008 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	4a96      	ldr	r2, [pc, #600]	@ (8011fc8 <HAL_UART_IRQHandler+0x564>)
 8011d70:	4293      	cmp	r3, r2
 8011d72:	d068      	beq.n	8011e46 <HAL_UART_IRQHandler+0x3e2>
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	4a93      	ldr	r2, [pc, #588]	@ (8011fcc <HAL_UART_IRQHandler+0x568>)
 8011d7e:	4293      	cmp	r3, r2
 8011d80:	d061      	beq.n	8011e46 <HAL_UART_IRQHandler+0x3e2>
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	4a91      	ldr	r2, [pc, #580]	@ (8011fd0 <HAL_UART_IRQHandler+0x56c>)
 8011d8c:	4293      	cmp	r3, r2
 8011d8e:	d05a      	beq.n	8011e46 <HAL_UART_IRQHandler+0x3e2>
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	4a8e      	ldr	r2, [pc, #568]	@ (8011fd4 <HAL_UART_IRQHandler+0x570>)
 8011d9a:	4293      	cmp	r3, r2
 8011d9c:	d053      	beq.n	8011e46 <HAL_UART_IRQHandler+0x3e2>
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	4a8c      	ldr	r2, [pc, #560]	@ (8011fd8 <HAL_UART_IRQHandler+0x574>)
 8011da8:	4293      	cmp	r3, r2
 8011daa:	d04c      	beq.n	8011e46 <HAL_UART_IRQHandler+0x3e2>
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	4a89      	ldr	r2, [pc, #548]	@ (8011fdc <HAL_UART_IRQHandler+0x578>)
 8011db6:	4293      	cmp	r3, r2
 8011db8:	d045      	beq.n	8011e46 <HAL_UART_IRQHandler+0x3e2>
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	4a87      	ldr	r2, [pc, #540]	@ (8011fe0 <HAL_UART_IRQHandler+0x57c>)
 8011dc4:	4293      	cmp	r3, r2
 8011dc6:	d03e      	beq.n	8011e46 <HAL_UART_IRQHandler+0x3e2>
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	4a84      	ldr	r2, [pc, #528]	@ (8011fe4 <HAL_UART_IRQHandler+0x580>)
 8011dd2:	4293      	cmp	r3, r2
 8011dd4:	d037      	beq.n	8011e46 <HAL_UART_IRQHandler+0x3e2>
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	4a82      	ldr	r2, [pc, #520]	@ (8011fe8 <HAL_UART_IRQHandler+0x584>)
 8011de0:	4293      	cmp	r3, r2
 8011de2:	d030      	beq.n	8011e46 <HAL_UART_IRQHandler+0x3e2>
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	4a7f      	ldr	r2, [pc, #508]	@ (8011fec <HAL_UART_IRQHandler+0x588>)
 8011dee:	4293      	cmp	r3, r2
 8011df0:	d029      	beq.n	8011e46 <HAL_UART_IRQHandler+0x3e2>
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	4a7d      	ldr	r2, [pc, #500]	@ (8011ff0 <HAL_UART_IRQHandler+0x58c>)
 8011dfc:	4293      	cmp	r3, r2
 8011dfe:	d022      	beq.n	8011e46 <HAL_UART_IRQHandler+0x3e2>
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	4a7a      	ldr	r2, [pc, #488]	@ (8011ff4 <HAL_UART_IRQHandler+0x590>)
 8011e0a:	4293      	cmp	r3, r2
 8011e0c:	d01b      	beq.n	8011e46 <HAL_UART_IRQHandler+0x3e2>
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	4a78      	ldr	r2, [pc, #480]	@ (8011ff8 <HAL_UART_IRQHandler+0x594>)
 8011e18:	4293      	cmp	r3, r2
 8011e1a:	d014      	beq.n	8011e46 <HAL_UART_IRQHandler+0x3e2>
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	4a75      	ldr	r2, [pc, #468]	@ (8011ffc <HAL_UART_IRQHandler+0x598>)
 8011e26:	4293      	cmp	r3, r2
 8011e28:	d00d      	beq.n	8011e46 <HAL_UART_IRQHandler+0x3e2>
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	4a73      	ldr	r2, [pc, #460]	@ (8012000 <HAL_UART_IRQHandler+0x59c>)
 8011e34:	4293      	cmp	r3, r2
 8011e36:	d006      	beq.n	8011e46 <HAL_UART_IRQHandler+0x3e2>
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	4a70      	ldr	r2, [pc, #448]	@ (8012004 <HAL_UART_IRQHandler+0x5a0>)
 8011e42:	4293      	cmp	r3, r2
 8011e44:	d106      	bne.n	8011e54 <HAL_UART_IRQHandler+0x3f0>
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	685b      	ldr	r3, [r3, #4]
 8011e50:	b29b      	uxth	r3, r3
 8011e52:	e005      	b.n	8011e60 <HAL_UART_IRQHandler+0x3fc>
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	685b      	ldr	r3, [r3, #4]
 8011e5e:	b29b      	uxth	r3, r3
 8011e60:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8011e64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	f000 81ab 	beq.w	80121c4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011e74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8011e78:	429a      	cmp	r2, r3
 8011e7a:	f080 81a3 	bcs.w	80121c4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8011e84:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011e8e:	69db      	ldr	r3, [r3, #28]
 8011e90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011e94:	f000 8087 	beq.w	8011fa6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ea0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011ea4:	e853 3f00 	ldrex	r3, [r3]
 8011ea8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8011eac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011eb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011eb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	461a      	mov	r2, r3
 8011ebe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8011ec2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011ec6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011eca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8011ece:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011ed2:	e841 2300 	strex	r3, r2, [r1]
 8011ed6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8011eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d1da      	bne.n	8011e98 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	3308      	adds	r3, #8
 8011ee8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011eea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011eec:	e853 3f00 	ldrex	r3, [r3]
 8011ef0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8011ef2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011ef4:	f023 0301 	bic.w	r3, r3, #1
 8011ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	3308      	adds	r3, #8
 8011f02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8011f06:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8011f0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f0c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8011f0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011f12:	e841 2300 	strex	r3, r2, [r1]
 8011f16:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8011f18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d1e1      	bne.n	8011ee2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	3308      	adds	r3, #8
 8011f24:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011f28:	e853 3f00 	ldrex	r3, [r3]
 8011f2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8011f2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011f30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011f34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	3308      	adds	r3, #8
 8011f3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8011f42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011f44:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f46:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8011f48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011f4a:	e841 2300 	strex	r3, r2, [r1]
 8011f4e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8011f50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d1e3      	bne.n	8011f1e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	2220      	movs	r2, #32
 8011f5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	2200      	movs	r2, #0
 8011f62:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f6c:	e853 3f00 	ldrex	r3, [r3]
 8011f70:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011f72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011f74:	f023 0310 	bic.w	r3, r3, #16
 8011f78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	461a      	mov	r2, r3
 8011f82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011f86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011f88:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011f8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011f8e:	e841 2300 	strex	r3, r2, [r1]
 8011f92:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011f94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d1e4      	bne.n	8011f64 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	f7f8 fd23 	bl	800a9ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	2202      	movs	r2, #2
 8011faa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011fb8:	b29b      	uxth	r3, r3
 8011fba:	1ad3      	subs	r3, r2, r3
 8011fbc:	b29b      	uxth	r3, r3
 8011fbe:	4619      	mov	r1, r3
 8011fc0:	6878      	ldr	r0, [r7, #4]
 8011fc2:	f000 f91d 	bl	8012200 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011fc6:	e0fd      	b.n	80121c4 <HAL_UART_IRQHandler+0x760>
 8011fc8:	40020010 	.word	0x40020010
 8011fcc:	40020028 	.word	0x40020028
 8011fd0:	40020040 	.word	0x40020040
 8011fd4:	40020058 	.word	0x40020058
 8011fd8:	40020070 	.word	0x40020070
 8011fdc:	40020088 	.word	0x40020088
 8011fe0:	400200a0 	.word	0x400200a0
 8011fe4:	400200b8 	.word	0x400200b8
 8011fe8:	40020410 	.word	0x40020410
 8011fec:	40020428 	.word	0x40020428
 8011ff0:	40020440 	.word	0x40020440
 8011ff4:	40020458 	.word	0x40020458
 8011ff8:	40020470 	.word	0x40020470
 8011ffc:	40020488 	.word	0x40020488
 8012000:	400204a0 	.word	0x400204a0
 8012004:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012014:	b29b      	uxth	r3, r3
 8012016:	1ad3      	subs	r3, r2, r3
 8012018:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012022:	b29b      	uxth	r3, r3
 8012024:	2b00      	cmp	r3, #0
 8012026:	f000 80cf 	beq.w	80121c8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 801202a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801202e:	2b00      	cmp	r3, #0
 8012030:	f000 80ca 	beq.w	80121c8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801203a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801203c:	e853 3f00 	ldrex	r3, [r3]
 8012040:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012044:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012048:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	461a      	mov	r2, r3
 8012052:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8012056:	647b      	str	r3, [r7, #68]	@ 0x44
 8012058:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801205a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801205c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801205e:	e841 2300 	strex	r3, r2, [r1]
 8012062:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012066:	2b00      	cmp	r3, #0
 8012068:	d1e4      	bne.n	8012034 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	3308      	adds	r3, #8
 8012070:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012074:	e853 3f00 	ldrex	r3, [r3]
 8012078:	623b      	str	r3, [r7, #32]
   return(result);
 801207a:	6a3a      	ldr	r2, [r7, #32]
 801207c:	4b55      	ldr	r3, [pc, #340]	@ (80121d4 <HAL_UART_IRQHandler+0x770>)
 801207e:	4013      	ands	r3, r2
 8012080:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	3308      	adds	r3, #8
 801208a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801208e:	633a      	str	r2, [r7, #48]	@ 0x30
 8012090:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012092:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012094:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012096:	e841 2300 	strex	r3, r2, [r1]
 801209a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801209c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d1e3      	bne.n	801206a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	2220      	movs	r2, #32
 80120a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	2200      	movs	r2, #0
 80120ae:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	2200      	movs	r2, #0
 80120b4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120bc:	693b      	ldr	r3, [r7, #16]
 80120be:	e853 3f00 	ldrex	r3, [r3]
 80120c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	f023 0310 	bic.w	r3, r3, #16
 80120ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	461a      	mov	r2, r3
 80120d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80120d8:	61fb      	str	r3, [r7, #28]
 80120da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120dc:	69b9      	ldr	r1, [r7, #24]
 80120de:	69fa      	ldr	r2, [r7, #28]
 80120e0:	e841 2300 	strex	r3, r2, [r1]
 80120e4:	617b      	str	r3, [r7, #20]
   return(result);
 80120e6:	697b      	ldr	r3, [r7, #20]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d1e4      	bne.n	80120b6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	2202      	movs	r2, #2
 80120f0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80120f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80120f6:	4619      	mov	r1, r3
 80120f8:	6878      	ldr	r0, [r7, #4]
 80120fa:	f000 f881 	bl	8012200 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80120fe:	e063      	b.n	80121c8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012104:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012108:	2b00      	cmp	r3, #0
 801210a:	d00e      	beq.n	801212a <HAL_UART_IRQHandler+0x6c6>
 801210c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012110:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8012114:	2b00      	cmp	r3, #0
 8012116:	d008      	beq.n	801212a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8012120:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8012122:	6878      	ldr	r0, [r7, #4]
 8012124:	f001 fb79 	bl	801381a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012128:	e051      	b.n	80121ce <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801212a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801212e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012132:	2b00      	cmp	r3, #0
 8012134:	d014      	beq.n	8012160 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8012136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801213a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801213e:	2b00      	cmp	r3, #0
 8012140:	d105      	bne.n	801214e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8012142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012146:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801214a:	2b00      	cmp	r3, #0
 801214c:	d008      	beq.n	8012160 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012152:	2b00      	cmp	r3, #0
 8012154:	d03a      	beq.n	80121cc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801215a:	6878      	ldr	r0, [r7, #4]
 801215c:	4798      	blx	r3
    }
    return;
 801215e:	e035      	b.n	80121cc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8012160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012168:	2b00      	cmp	r3, #0
 801216a:	d009      	beq.n	8012180 <HAL_UART_IRQHandler+0x71c>
 801216c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012174:	2b00      	cmp	r3, #0
 8012176:	d003      	beq.n	8012180 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8012178:	6878      	ldr	r0, [r7, #4]
 801217a:	f001 fb23 	bl	80137c4 <UART_EndTransmit_IT>
    return;
 801217e:	e026      	b.n	80121ce <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8012180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012184:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012188:	2b00      	cmp	r3, #0
 801218a:	d009      	beq.n	80121a0 <HAL_UART_IRQHandler+0x73c>
 801218c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012190:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8012194:	2b00      	cmp	r3, #0
 8012196:	d003      	beq.n	80121a0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8012198:	6878      	ldr	r0, [r7, #4]
 801219a:	f001 fb52 	bl	8013842 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801219e:	e016      	b.n	80121ce <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80121a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80121a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d010      	beq.n	80121ce <HAL_UART_IRQHandler+0x76a>
 80121ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	da0c      	bge.n	80121ce <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80121b4:	6878      	ldr	r0, [r7, #4]
 80121b6:	f001 fb3a 	bl	801382e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80121ba:	e008      	b.n	80121ce <HAL_UART_IRQHandler+0x76a>
      return;
 80121bc:	bf00      	nop
 80121be:	e006      	b.n	80121ce <HAL_UART_IRQHandler+0x76a>
    return;
 80121c0:	bf00      	nop
 80121c2:	e004      	b.n	80121ce <HAL_UART_IRQHandler+0x76a>
      return;
 80121c4:	bf00      	nop
 80121c6:	e002      	b.n	80121ce <HAL_UART_IRQHandler+0x76a>
      return;
 80121c8:	bf00      	nop
 80121ca:	e000      	b.n	80121ce <HAL_UART_IRQHandler+0x76a>
    return;
 80121cc:	bf00      	nop
  }
}
 80121ce:	37e8      	adds	r7, #232	@ 0xe8
 80121d0:	46bd      	mov	sp, r7
 80121d2:	bd80      	pop	{r7, pc}
 80121d4:	effffffe 	.word	0xeffffffe

080121d8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80121d8:	b480      	push	{r7}
 80121da:	b083      	sub	sp, #12
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80121e0:	bf00      	nop
 80121e2:	370c      	adds	r7, #12
 80121e4:	46bd      	mov	sp, r7
 80121e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ea:	4770      	bx	lr

080121ec <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80121ec:	b480      	push	{r7}
 80121ee:	b083      	sub	sp, #12
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80121f4:	bf00      	nop
 80121f6:	370c      	adds	r7, #12
 80121f8:	46bd      	mov	sp, r7
 80121fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121fe:	4770      	bx	lr

08012200 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8012200:	b480      	push	{r7}
 8012202:	b083      	sub	sp, #12
 8012204:	af00      	add	r7, sp, #0
 8012206:	6078      	str	r0, [r7, #4]
 8012208:	460b      	mov	r3, r1
 801220a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801220c:	bf00      	nop
 801220e:	370c      	adds	r7, #12
 8012210:	46bd      	mov	sp, r7
 8012212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012216:	4770      	bx	lr

08012218 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801221c:	b092      	sub	sp, #72	@ 0x48
 801221e:	af00      	add	r7, sp, #0
 8012220:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012222:	2300      	movs	r3, #0
 8012224:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012228:	697b      	ldr	r3, [r7, #20]
 801222a:	689a      	ldr	r2, [r3, #8]
 801222c:	697b      	ldr	r3, [r7, #20]
 801222e:	691b      	ldr	r3, [r3, #16]
 8012230:	431a      	orrs	r2, r3
 8012232:	697b      	ldr	r3, [r7, #20]
 8012234:	695b      	ldr	r3, [r3, #20]
 8012236:	431a      	orrs	r2, r3
 8012238:	697b      	ldr	r3, [r7, #20]
 801223a:	69db      	ldr	r3, [r3, #28]
 801223c:	4313      	orrs	r3, r2
 801223e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012240:	697b      	ldr	r3, [r7, #20]
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	681a      	ldr	r2, [r3, #0]
 8012246:	4bbe      	ldr	r3, [pc, #760]	@ (8012540 <UART_SetConfig+0x328>)
 8012248:	4013      	ands	r3, r2
 801224a:	697a      	ldr	r2, [r7, #20]
 801224c:	6812      	ldr	r2, [r2, #0]
 801224e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012250:	430b      	orrs	r3, r1
 8012252:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012254:	697b      	ldr	r3, [r7, #20]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	685b      	ldr	r3, [r3, #4]
 801225a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801225e:	697b      	ldr	r3, [r7, #20]
 8012260:	68da      	ldr	r2, [r3, #12]
 8012262:	697b      	ldr	r3, [r7, #20]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	430a      	orrs	r2, r1
 8012268:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801226a:	697b      	ldr	r3, [r7, #20]
 801226c:	699b      	ldr	r3, [r3, #24]
 801226e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012270:	697b      	ldr	r3, [r7, #20]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	4ab3      	ldr	r2, [pc, #716]	@ (8012544 <UART_SetConfig+0x32c>)
 8012276:	4293      	cmp	r3, r2
 8012278:	d004      	beq.n	8012284 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801227a:	697b      	ldr	r3, [r7, #20]
 801227c:	6a1b      	ldr	r3, [r3, #32]
 801227e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012280:	4313      	orrs	r3, r2
 8012282:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012284:	697b      	ldr	r3, [r7, #20]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	689a      	ldr	r2, [r3, #8]
 801228a:	4baf      	ldr	r3, [pc, #700]	@ (8012548 <UART_SetConfig+0x330>)
 801228c:	4013      	ands	r3, r2
 801228e:	697a      	ldr	r2, [r7, #20]
 8012290:	6812      	ldr	r2, [r2, #0]
 8012292:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012294:	430b      	orrs	r3, r1
 8012296:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012298:	697b      	ldr	r3, [r7, #20]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801229e:	f023 010f 	bic.w	r1, r3, #15
 80122a2:	697b      	ldr	r3, [r7, #20]
 80122a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80122a6:	697b      	ldr	r3, [r7, #20]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	430a      	orrs	r2, r1
 80122ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80122ae:	697b      	ldr	r3, [r7, #20]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	4aa6      	ldr	r2, [pc, #664]	@ (801254c <UART_SetConfig+0x334>)
 80122b4:	4293      	cmp	r3, r2
 80122b6:	d177      	bne.n	80123a8 <UART_SetConfig+0x190>
 80122b8:	4ba5      	ldr	r3, [pc, #660]	@ (8012550 <UART_SetConfig+0x338>)
 80122ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80122bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80122c0:	2b28      	cmp	r3, #40	@ 0x28
 80122c2:	d86d      	bhi.n	80123a0 <UART_SetConfig+0x188>
 80122c4:	a201      	add	r2, pc, #4	@ (adr r2, 80122cc <UART_SetConfig+0xb4>)
 80122c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122ca:	bf00      	nop
 80122cc:	08012371 	.word	0x08012371
 80122d0:	080123a1 	.word	0x080123a1
 80122d4:	080123a1 	.word	0x080123a1
 80122d8:	080123a1 	.word	0x080123a1
 80122dc:	080123a1 	.word	0x080123a1
 80122e0:	080123a1 	.word	0x080123a1
 80122e4:	080123a1 	.word	0x080123a1
 80122e8:	080123a1 	.word	0x080123a1
 80122ec:	08012379 	.word	0x08012379
 80122f0:	080123a1 	.word	0x080123a1
 80122f4:	080123a1 	.word	0x080123a1
 80122f8:	080123a1 	.word	0x080123a1
 80122fc:	080123a1 	.word	0x080123a1
 8012300:	080123a1 	.word	0x080123a1
 8012304:	080123a1 	.word	0x080123a1
 8012308:	080123a1 	.word	0x080123a1
 801230c:	08012381 	.word	0x08012381
 8012310:	080123a1 	.word	0x080123a1
 8012314:	080123a1 	.word	0x080123a1
 8012318:	080123a1 	.word	0x080123a1
 801231c:	080123a1 	.word	0x080123a1
 8012320:	080123a1 	.word	0x080123a1
 8012324:	080123a1 	.word	0x080123a1
 8012328:	080123a1 	.word	0x080123a1
 801232c:	08012389 	.word	0x08012389
 8012330:	080123a1 	.word	0x080123a1
 8012334:	080123a1 	.word	0x080123a1
 8012338:	080123a1 	.word	0x080123a1
 801233c:	080123a1 	.word	0x080123a1
 8012340:	080123a1 	.word	0x080123a1
 8012344:	080123a1 	.word	0x080123a1
 8012348:	080123a1 	.word	0x080123a1
 801234c:	08012391 	.word	0x08012391
 8012350:	080123a1 	.word	0x080123a1
 8012354:	080123a1 	.word	0x080123a1
 8012358:	080123a1 	.word	0x080123a1
 801235c:	080123a1 	.word	0x080123a1
 8012360:	080123a1 	.word	0x080123a1
 8012364:	080123a1 	.word	0x080123a1
 8012368:	080123a1 	.word	0x080123a1
 801236c:	08012399 	.word	0x08012399
 8012370:	2301      	movs	r3, #1
 8012372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012376:	e326      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012378:	2304      	movs	r3, #4
 801237a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801237e:	e322      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012380:	2308      	movs	r3, #8
 8012382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012386:	e31e      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012388:	2310      	movs	r3, #16
 801238a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801238e:	e31a      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012390:	2320      	movs	r3, #32
 8012392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012396:	e316      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012398:	2340      	movs	r3, #64	@ 0x40
 801239a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801239e:	e312      	b.n	80129c6 <UART_SetConfig+0x7ae>
 80123a0:	2380      	movs	r3, #128	@ 0x80
 80123a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80123a6:	e30e      	b.n	80129c6 <UART_SetConfig+0x7ae>
 80123a8:	697b      	ldr	r3, [r7, #20]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	4a69      	ldr	r2, [pc, #420]	@ (8012554 <UART_SetConfig+0x33c>)
 80123ae:	4293      	cmp	r3, r2
 80123b0:	d130      	bne.n	8012414 <UART_SetConfig+0x1fc>
 80123b2:	4b67      	ldr	r3, [pc, #412]	@ (8012550 <UART_SetConfig+0x338>)
 80123b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80123b6:	f003 0307 	and.w	r3, r3, #7
 80123ba:	2b05      	cmp	r3, #5
 80123bc:	d826      	bhi.n	801240c <UART_SetConfig+0x1f4>
 80123be:	a201      	add	r2, pc, #4	@ (adr r2, 80123c4 <UART_SetConfig+0x1ac>)
 80123c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123c4:	080123dd 	.word	0x080123dd
 80123c8:	080123e5 	.word	0x080123e5
 80123cc:	080123ed 	.word	0x080123ed
 80123d0:	080123f5 	.word	0x080123f5
 80123d4:	080123fd 	.word	0x080123fd
 80123d8:	08012405 	.word	0x08012405
 80123dc:	2300      	movs	r3, #0
 80123de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80123e2:	e2f0      	b.n	80129c6 <UART_SetConfig+0x7ae>
 80123e4:	2304      	movs	r3, #4
 80123e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80123ea:	e2ec      	b.n	80129c6 <UART_SetConfig+0x7ae>
 80123ec:	2308      	movs	r3, #8
 80123ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80123f2:	e2e8      	b.n	80129c6 <UART_SetConfig+0x7ae>
 80123f4:	2310      	movs	r3, #16
 80123f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80123fa:	e2e4      	b.n	80129c6 <UART_SetConfig+0x7ae>
 80123fc:	2320      	movs	r3, #32
 80123fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012402:	e2e0      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012404:	2340      	movs	r3, #64	@ 0x40
 8012406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801240a:	e2dc      	b.n	80129c6 <UART_SetConfig+0x7ae>
 801240c:	2380      	movs	r3, #128	@ 0x80
 801240e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012412:	e2d8      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012414:	697b      	ldr	r3, [r7, #20]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	4a4f      	ldr	r2, [pc, #316]	@ (8012558 <UART_SetConfig+0x340>)
 801241a:	4293      	cmp	r3, r2
 801241c:	d130      	bne.n	8012480 <UART_SetConfig+0x268>
 801241e:	4b4c      	ldr	r3, [pc, #304]	@ (8012550 <UART_SetConfig+0x338>)
 8012420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012422:	f003 0307 	and.w	r3, r3, #7
 8012426:	2b05      	cmp	r3, #5
 8012428:	d826      	bhi.n	8012478 <UART_SetConfig+0x260>
 801242a:	a201      	add	r2, pc, #4	@ (adr r2, 8012430 <UART_SetConfig+0x218>)
 801242c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012430:	08012449 	.word	0x08012449
 8012434:	08012451 	.word	0x08012451
 8012438:	08012459 	.word	0x08012459
 801243c:	08012461 	.word	0x08012461
 8012440:	08012469 	.word	0x08012469
 8012444:	08012471 	.word	0x08012471
 8012448:	2300      	movs	r3, #0
 801244a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801244e:	e2ba      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012450:	2304      	movs	r3, #4
 8012452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012456:	e2b6      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012458:	2308      	movs	r3, #8
 801245a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801245e:	e2b2      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012460:	2310      	movs	r3, #16
 8012462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012466:	e2ae      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012468:	2320      	movs	r3, #32
 801246a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801246e:	e2aa      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012470:	2340      	movs	r3, #64	@ 0x40
 8012472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012476:	e2a6      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012478:	2380      	movs	r3, #128	@ 0x80
 801247a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801247e:	e2a2      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012480:	697b      	ldr	r3, [r7, #20]
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	4a35      	ldr	r2, [pc, #212]	@ (801255c <UART_SetConfig+0x344>)
 8012486:	4293      	cmp	r3, r2
 8012488:	d130      	bne.n	80124ec <UART_SetConfig+0x2d4>
 801248a:	4b31      	ldr	r3, [pc, #196]	@ (8012550 <UART_SetConfig+0x338>)
 801248c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801248e:	f003 0307 	and.w	r3, r3, #7
 8012492:	2b05      	cmp	r3, #5
 8012494:	d826      	bhi.n	80124e4 <UART_SetConfig+0x2cc>
 8012496:	a201      	add	r2, pc, #4	@ (adr r2, 801249c <UART_SetConfig+0x284>)
 8012498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801249c:	080124b5 	.word	0x080124b5
 80124a0:	080124bd 	.word	0x080124bd
 80124a4:	080124c5 	.word	0x080124c5
 80124a8:	080124cd 	.word	0x080124cd
 80124ac:	080124d5 	.word	0x080124d5
 80124b0:	080124dd 	.word	0x080124dd
 80124b4:	2300      	movs	r3, #0
 80124b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80124ba:	e284      	b.n	80129c6 <UART_SetConfig+0x7ae>
 80124bc:	2304      	movs	r3, #4
 80124be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80124c2:	e280      	b.n	80129c6 <UART_SetConfig+0x7ae>
 80124c4:	2308      	movs	r3, #8
 80124c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80124ca:	e27c      	b.n	80129c6 <UART_SetConfig+0x7ae>
 80124cc:	2310      	movs	r3, #16
 80124ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80124d2:	e278      	b.n	80129c6 <UART_SetConfig+0x7ae>
 80124d4:	2320      	movs	r3, #32
 80124d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80124da:	e274      	b.n	80129c6 <UART_SetConfig+0x7ae>
 80124dc:	2340      	movs	r3, #64	@ 0x40
 80124de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80124e2:	e270      	b.n	80129c6 <UART_SetConfig+0x7ae>
 80124e4:	2380      	movs	r3, #128	@ 0x80
 80124e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80124ea:	e26c      	b.n	80129c6 <UART_SetConfig+0x7ae>
 80124ec:	697b      	ldr	r3, [r7, #20]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	4a1b      	ldr	r2, [pc, #108]	@ (8012560 <UART_SetConfig+0x348>)
 80124f2:	4293      	cmp	r3, r2
 80124f4:	d142      	bne.n	801257c <UART_SetConfig+0x364>
 80124f6:	4b16      	ldr	r3, [pc, #88]	@ (8012550 <UART_SetConfig+0x338>)
 80124f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80124fa:	f003 0307 	and.w	r3, r3, #7
 80124fe:	2b05      	cmp	r3, #5
 8012500:	d838      	bhi.n	8012574 <UART_SetConfig+0x35c>
 8012502:	a201      	add	r2, pc, #4	@ (adr r2, 8012508 <UART_SetConfig+0x2f0>)
 8012504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012508:	08012521 	.word	0x08012521
 801250c:	08012529 	.word	0x08012529
 8012510:	08012531 	.word	0x08012531
 8012514:	08012539 	.word	0x08012539
 8012518:	08012565 	.word	0x08012565
 801251c:	0801256d 	.word	0x0801256d
 8012520:	2300      	movs	r3, #0
 8012522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012526:	e24e      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012528:	2304      	movs	r3, #4
 801252a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801252e:	e24a      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012530:	2308      	movs	r3, #8
 8012532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012536:	e246      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012538:	2310      	movs	r3, #16
 801253a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801253e:	e242      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012540:	cfff69f3 	.word	0xcfff69f3
 8012544:	58000c00 	.word	0x58000c00
 8012548:	11fff4ff 	.word	0x11fff4ff
 801254c:	40011000 	.word	0x40011000
 8012550:	58024400 	.word	0x58024400
 8012554:	40004400 	.word	0x40004400
 8012558:	40004800 	.word	0x40004800
 801255c:	40004c00 	.word	0x40004c00
 8012560:	40005000 	.word	0x40005000
 8012564:	2320      	movs	r3, #32
 8012566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801256a:	e22c      	b.n	80129c6 <UART_SetConfig+0x7ae>
 801256c:	2340      	movs	r3, #64	@ 0x40
 801256e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012572:	e228      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012574:	2380      	movs	r3, #128	@ 0x80
 8012576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801257a:	e224      	b.n	80129c6 <UART_SetConfig+0x7ae>
 801257c:	697b      	ldr	r3, [r7, #20]
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	4ab1      	ldr	r2, [pc, #708]	@ (8012848 <UART_SetConfig+0x630>)
 8012582:	4293      	cmp	r3, r2
 8012584:	d176      	bne.n	8012674 <UART_SetConfig+0x45c>
 8012586:	4bb1      	ldr	r3, [pc, #708]	@ (801284c <UART_SetConfig+0x634>)
 8012588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801258a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801258e:	2b28      	cmp	r3, #40	@ 0x28
 8012590:	d86c      	bhi.n	801266c <UART_SetConfig+0x454>
 8012592:	a201      	add	r2, pc, #4	@ (adr r2, 8012598 <UART_SetConfig+0x380>)
 8012594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012598:	0801263d 	.word	0x0801263d
 801259c:	0801266d 	.word	0x0801266d
 80125a0:	0801266d 	.word	0x0801266d
 80125a4:	0801266d 	.word	0x0801266d
 80125a8:	0801266d 	.word	0x0801266d
 80125ac:	0801266d 	.word	0x0801266d
 80125b0:	0801266d 	.word	0x0801266d
 80125b4:	0801266d 	.word	0x0801266d
 80125b8:	08012645 	.word	0x08012645
 80125bc:	0801266d 	.word	0x0801266d
 80125c0:	0801266d 	.word	0x0801266d
 80125c4:	0801266d 	.word	0x0801266d
 80125c8:	0801266d 	.word	0x0801266d
 80125cc:	0801266d 	.word	0x0801266d
 80125d0:	0801266d 	.word	0x0801266d
 80125d4:	0801266d 	.word	0x0801266d
 80125d8:	0801264d 	.word	0x0801264d
 80125dc:	0801266d 	.word	0x0801266d
 80125e0:	0801266d 	.word	0x0801266d
 80125e4:	0801266d 	.word	0x0801266d
 80125e8:	0801266d 	.word	0x0801266d
 80125ec:	0801266d 	.word	0x0801266d
 80125f0:	0801266d 	.word	0x0801266d
 80125f4:	0801266d 	.word	0x0801266d
 80125f8:	08012655 	.word	0x08012655
 80125fc:	0801266d 	.word	0x0801266d
 8012600:	0801266d 	.word	0x0801266d
 8012604:	0801266d 	.word	0x0801266d
 8012608:	0801266d 	.word	0x0801266d
 801260c:	0801266d 	.word	0x0801266d
 8012610:	0801266d 	.word	0x0801266d
 8012614:	0801266d 	.word	0x0801266d
 8012618:	0801265d 	.word	0x0801265d
 801261c:	0801266d 	.word	0x0801266d
 8012620:	0801266d 	.word	0x0801266d
 8012624:	0801266d 	.word	0x0801266d
 8012628:	0801266d 	.word	0x0801266d
 801262c:	0801266d 	.word	0x0801266d
 8012630:	0801266d 	.word	0x0801266d
 8012634:	0801266d 	.word	0x0801266d
 8012638:	08012665 	.word	0x08012665
 801263c:	2301      	movs	r3, #1
 801263e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012642:	e1c0      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012644:	2304      	movs	r3, #4
 8012646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801264a:	e1bc      	b.n	80129c6 <UART_SetConfig+0x7ae>
 801264c:	2308      	movs	r3, #8
 801264e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012652:	e1b8      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012654:	2310      	movs	r3, #16
 8012656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801265a:	e1b4      	b.n	80129c6 <UART_SetConfig+0x7ae>
 801265c:	2320      	movs	r3, #32
 801265e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012662:	e1b0      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012664:	2340      	movs	r3, #64	@ 0x40
 8012666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801266a:	e1ac      	b.n	80129c6 <UART_SetConfig+0x7ae>
 801266c:	2380      	movs	r3, #128	@ 0x80
 801266e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012672:	e1a8      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012674:	697b      	ldr	r3, [r7, #20]
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	4a75      	ldr	r2, [pc, #468]	@ (8012850 <UART_SetConfig+0x638>)
 801267a:	4293      	cmp	r3, r2
 801267c:	d130      	bne.n	80126e0 <UART_SetConfig+0x4c8>
 801267e:	4b73      	ldr	r3, [pc, #460]	@ (801284c <UART_SetConfig+0x634>)
 8012680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012682:	f003 0307 	and.w	r3, r3, #7
 8012686:	2b05      	cmp	r3, #5
 8012688:	d826      	bhi.n	80126d8 <UART_SetConfig+0x4c0>
 801268a:	a201      	add	r2, pc, #4	@ (adr r2, 8012690 <UART_SetConfig+0x478>)
 801268c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012690:	080126a9 	.word	0x080126a9
 8012694:	080126b1 	.word	0x080126b1
 8012698:	080126b9 	.word	0x080126b9
 801269c:	080126c1 	.word	0x080126c1
 80126a0:	080126c9 	.word	0x080126c9
 80126a4:	080126d1 	.word	0x080126d1
 80126a8:	2300      	movs	r3, #0
 80126aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126ae:	e18a      	b.n	80129c6 <UART_SetConfig+0x7ae>
 80126b0:	2304      	movs	r3, #4
 80126b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126b6:	e186      	b.n	80129c6 <UART_SetConfig+0x7ae>
 80126b8:	2308      	movs	r3, #8
 80126ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126be:	e182      	b.n	80129c6 <UART_SetConfig+0x7ae>
 80126c0:	2310      	movs	r3, #16
 80126c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126c6:	e17e      	b.n	80129c6 <UART_SetConfig+0x7ae>
 80126c8:	2320      	movs	r3, #32
 80126ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126ce:	e17a      	b.n	80129c6 <UART_SetConfig+0x7ae>
 80126d0:	2340      	movs	r3, #64	@ 0x40
 80126d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126d6:	e176      	b.n	80129c6 <UART_SetConfig+0x7ae>
 80126d8:	2380      	movs	r3, #128	@ 0x80
 80126da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126de:	e172      	b.n	80129c6 <UART_SetConfig+0x7ae>
 80126e0:	697b      	ldr	r3, [r7, #20]
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	4a5b      	ldr	r2, [pc, #364]	@ (8012854 <UART_SetConfig+0x63c>)
 80126e6:	4293      	cmp	r3, r2
 80126e8:	d130      	bne.n	801274c <UART_SetConfig+0x534>
 80126ea:	4b58      	ldr	r3, [pc, #352]	@ (801284c <UART_SetConfig+0x634>)
 80126ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80126ee:	f003 0307 	and.w	r3, r3, #7
 80126f2:	2b05      	cmp	r3, #5
 80126f4:	d826      	bhi.n	8012744 <UART_SetConfig+0x52c>
 80126f6:	a201      	add	r2, pc, #4	@ (adr r2, 80126fc <UART_SetConfig+0x4e4>)
 80126f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126fc:	08012715 	.word	0x08012715
 8012700:	0801271d 	.word	0x0801271d
 8012704:	08012725 	.word	0x08012725
 8012708:	0801272d 	.word	0x0801272d
 801270c:	08012735 	.word	0x08012735
 8012710:	0801273d 	.word	0x0801273d
 8012714:	2300      	movs	r3, #0
 8012716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801271a:	e154      	b.n	80129c6 <UART_SetConfig+0x7ae>
 801271c:	2304      	movs	r3, #4
 801271e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012722:	e150      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012724:	2308      	movs	r3, #8
 8012726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801272a:	e14c      	b.n	80129c6 <UART_SetConfig+0x7ae>
 801272c:	2310      	movs	r3, #16
 801272e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012732:	e148      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012734:	2320      	movs	r3, #32
 8012736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801273a:	e144      	b.n	80129c6 <UART_SetConfig+0x7ae>
 801273c:	2340      	movs	r3, #64	@ 0x40
 801273e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012742:	e140      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012744:	2380      	movs	r3, #128	@ 0x80
 8012746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801274a:	e13c      	b.n	80129c6 <UART_SetConfig+0x7ae>
 801274c:	697b      	ldr	r3, [r7, #20]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	4a41      	ldr	r2, [pc, #260]	@ (8012858 <UART_SetConfig+0x640>)
 8012752:	4293      	cmp	r3, r2
 8012754:	f040 8082 	bne.w	801285c <UART_SetConfig+0x644>
 8012758:	4b3c      	ldr	r3, [pc, #240]	@ (801284c <UART_SetConfig+0x634>)
 801275a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801275c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012760:	2b28      	cmp	r3, #40	@ 0x28
 8012762:	d86d      	bhi.n	8012840 <UART_SetConfig+0x628>
 8012764:	a201      	add	r2, pc, #4	@ (adr r2, 801276c <UART_SetConfig+0x554>)
 8012766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801276a:	bf00      	nop
 801276c:	08012811 	.word	0x08012811
 8012770:	08012841 	.word	0x08012841
 8012774:	08012841 	.word	0x08012841
 8012778:	08012841 	.word	0x08012841
 801277c:	08012841 	.word	0x08012841
 8012780:	08012841 	.word	0x08012841
 8012784:	08012841 	.word	0x08012841
 8012788:	08012841 	.word	0x08012841
 801278c:	08012819 	.word	0x08012819
 8012790:	08012841 	.word	0x08012841
 8012794:	08012841 	.word	0x08012841
 8012798:	08012841 	.word	0x08012841
 801279c:	08012841 	.word	0x08012841
 80127a0:	08012841 	.word	0x08012841
 80127a4:	08012841 	.word	0x08012841
 80127a8:	08012841 	.word	0x08012841
 80127ac:	08012821 	.word	0x08012821
 80127b0:	08012841 	.word	0x08012841
 80127b4:	08012841 	.word	0x08012841
 80127b8:	08012841 	.word	0x08012841
 80127bc:	08012841 	.word	0x08012841
 80127c0:	08012841 	.word	0x08012841
 80127c4:	08012841 	.word	0x08012841
 80127c8:	08012841 	.word	0x08012841
 80127cc:	08012829 	.word	0x08012829
 80127d0:	08012841 	.word	0x08012841
 80127d4:	08012841 	.word	0x08012841
 80127d8:	08012841 	.word	0x08012841
 80127dc:	08012841 	.word	0x08012841
 80127e0:	08012841 	.word	0x08012841
 80127e4:	08012841 	.word	0x08012841
 80127e8:	08012841 	.word	0x08012841
 80127ec:	08012831 	.word	0x08012831
 80127f0:	08012841 	.word	0x08012841
 80127f4:	08012841 	.word	0x08012841
 80127f8:	08012841 	.word	0x08012841
 80127fc:	08012841 	.word	0x08012841
 8012800:	08012841 	.word	0x08012841
 8012804:	08012841 	.word	0x08012841
 8012808:	08012841 	.word	0x08012841
 801280c:	08012839 	.word	0x08012839
 8012810:	2301      	movs	r3, #1
 8012812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012816:	e0d6      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012818:	2304      	movs	r3, #4
 801281a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801281e:	e0d2      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012820:	2308      	movs	r3, #8
 8012822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012826:	e0ce      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012828:	2310      	movs	r3, #16
 801282a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801282e:	e0ca      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012830:	2320      	movs	r3, #32
 8012832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012836:	e0c6      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012838:	2340      	movs	r3, #64	@ 0x40
 801283a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801283e:	e0c2      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012840:	2380      	movs	r3, #128	@ 0x80
 8012842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012846:	e0be      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012848:	40011400 	.word	0x40011400
 801284c:	58024400 	.word	0x58024400
 8012850:	40007800 	.word	0x40007800
 8012854:	40007c00 	.word	0x40007c00
 8012858:	40011800 	.word	0x40011800
 801285c:	697b      	ldr	r3, [r7, #20]
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	4aad      	ldr	r2, [pc, #692]	@ (8012b18 <UART_SetConfig+0x900>)
 8012862:	4293      	cmp	r3, r2
 8012864:	d176      	bne.n	8012954 <UART_SetConfig+0x73c>
 8012866:	4bad      	ldr	r3, [pc, #692]	@ (8012b1c <UART_SetConfig+0x904>)
 8012868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801286a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801286e:	2b28      	cmp	r3, #40	@ 0x28
 8012870:	d86c      	bhi.n	801294c <UART_SetConfig+0x734>
 8012872:	a201      	add	r2, pc, #4	@ (adr r2, 8012878 <UART_SetConfig+0x660>)
 8012874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012878:	0801291d 	.word	0x0801291d
 801287c:	0801294d 	.word	0x0801294d
 8012880:	0801294d 	.word	0x0801294d
 8012884:	0801294d 	.word	0x0801294d
 8012888:	0801294d 	.word	0x0801294d
 801288c:	0801294d 	.word	0x0801294d
 8012890:	0801294d 	.word	0x0801294d
 8012894:	0801294d 	.word	0x0801294d
 8012898:	08012925 	.word	0x08012925
 801289c:	0801294d 	.word	0x0801294d
 80128a0:	0801294d 	.word	0x0801294d
 80128a4:	0801294d 	.word	0x0801294d
 80128a8:	0801294d 	.word	0x0801294d
 80128ac:	0801294d 	.word	0x0801294d
 80128b0:	0801294d 	.word	0x0801294d
 80128b4:	0801294d 	.word	0x0801294d
 80128b8:	0801292d 	.word	0x0801292d
 80128bc:	0801294d 	.word	0x0801294d
 80128c0:	0801294d 	.word	0x0801294d
 80128c4:	0801294d 	.word	0x0801294d
 80128c8:	0801294d 	.word	0x0801294d
 80128cc:	0801294d 	.word	0x0801294d
 80128d0:	0801294d 	.word	0x0801294d
 80128d4:	0801294d 	.word	0x0801294d
 80128d8:	08012935 	.word	0x08012935
 80128dc:	0801294d 	.word	0x0801294d
 80128e0:	0801294d 	.word	0x0801294d
 80128e4:	0801294d 	.word	0x0801294d
 80128e8:	0801294d 	.word	0x0801294d
 80128ec:	0801294d 	.word	0x0801294d
 80128f0:	0801294d 	.word	0x0801294d
 80128f4:	0801294d 	.word	0x0801294d
 80128f8:	0801293d 	.word	0x0801293d
 80128fc:	0801294d 	.word	0x0801294d
 8012900:	0801294d 	.word	0x0801294d
 8012904:	0801294d 	.word	0x0801294d
 8012908:	0801294d 	.word	0x0801294d
 801290c:	0801294d 	.word	0x0801294d
 8012910:	0801294d 	.word	0x0801294d
 8012914:	0801294d 	.word	0x0801294d
 8012918:	08012945 	.word	0x08012945
 801291c:	2301      	movs	r3, #1
 801291e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012922:	e050      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012924:	2304      	movs	r3, #4
 8012926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801292a:	e04c      	b.n	80129c6 <UART_SetConfig+0x7ae>
 801292c:	2308      	movs	r3, #8
 801292e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012932:	e048      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012934:	2310      	movs	r3, #16
 8012936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801293a:	e044      	b.n	80129c6 <UART_SetConfig+0x7ae>
 801293c:	2320      	movs	r3, #32
 801293e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012942:	e040      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012944:	2340      	movs	r3, #64	@ 0x40
 8012946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801294a:	e03c      	b.n	80129c6 <UART_SetConfig+0x7ae>
 801294c:	2380      	movs	r3, #128	@ 0x80
 801294e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012952:	e038      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012954:	697b      	ldr	r3, [r7, #20]
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	4a71      	ldr	r2, [pc, #452]	@ (8012b20 <UART_SetConfig+0x908>)
 801295a:	4293      	cmp	r3, r2
 801295c:	d130      	bne.n	80129c0 <UART_SetConfig+0x7a8>
 801295e:	4b6f      	ldr	r3, [pc, #444]	@ (8012b1c <UART_SetConfig+0x904>)
 8012960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012962:	f003 0307 	and.w	r3, r3, #7
 8012966:	2b05      	cmp	r3, #5
 8012968:	d826      	bhi.n	80129b8 <UART_SetConfig+0x7a0>
 801296a:	a201      	add	r2, pc, #4	@ (adr r2, 8012970 <UART_SetConfig+0x758>)
 801296c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012970:	08012989 	.word	0x08012989
 8012974:	08012991 	.word	0x08012991
 8012978:	08012999 	.word	0x08012999
 801297c:	080129a1 	.word	0x080129a1
 8012980:	080129a9 	.word	0x080129a9
 8012984:	080129b1 	.word	0x080129b1
 8012988:	2302      	movs	r3, #2
 801298a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801298e:	e01a      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012990:	2304      	movs	r3, #4
 8012992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012996:	e016      	b.n	80129c6 <UART_SetConfig+0x7ae>
 8012998:	2308      	movs	r3, #8
 801299a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801299e:	e012      	b.n	80129c6 <UART_SetConfig+0x7ae>
 80129a0:	2310      	movs	r3, #16
 80129a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80129a6:	e00e      	b.n	80129c6 <UART_SetConfig+0x7ae>
 80129a8:	2320      	movs	r3, #32
 80129aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80129ae:	e00a      	b.n	80129c6 <UART_SetConfig+0x7ae>
 80129b0:	2340      	movs	r3, #64	@ 0x40
 80129b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80129b6:	e006      	b.n	80129c6 <UART_SetConfig+0x7ae>
 80129b8:	2380      	movs	r3, #128	@ 0x80
 80129ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80129be:	e002      	b.n	80129c6 <UART_SetConfig+0x7ae>
 80129c0:	2380      	movs	r3, #128	@ 0x80
 80129c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80129c6:	697b      	ldr	r3, [r7, #20]
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	4a55      	ldr	r2, [pc, #340]	@ (8012b20 <UART_SetConfig+0x908>)
 80129cc:	4293      	cmp	r3, r2
 80129ce:	f040 80f8 	bne.w	8012bc2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80129d2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80129d6:	2b20      	cmp	r3, #32
 80129d8:	dc46      	bgt.n	8012a68 <UART_SetConfig+0x850>
 80129da:	2b02      	cmp	r3, #2
 80129dc:	db75      	blt.n	8012aca <UART_SetConfig+0x8b2>
 80129de:	3b02      	subs	r3, #2
 80129e0:	2b1e      	cmp	r3, #30
 80129e2:	d872      	bhi.n	8012aca <UART_SetConfig+0x8b2>
 80129e4:	a201      	add	r2, pc, #4	@ (adr r2, 80129ec <UART_SetConfig+0x7d4>)
 80129e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129ea:	bf00      	nop
 80129ec:	08012a6f 	.word	0x08012a6f
 80129f0:	08012acb 	.word	0x08012acb
 80129f4:	08012a77 	.word	0x08012a77
 80129f8:	08012acb 	.word	0x08012acb
 80129fc:	08012acb 	.word	0x08012acb
 8012a00:	08012acb 	.word	0x08012acb
 8012a04:	08012a87 	.word	0x08012a87
 8012a08:	08012acb 	.word	0x08012acb
 8012a0c:	08012acb 	.word	0x08012acb
 8012a10:	08012acb 	.word	0x08012acb
 8012a14:	08012acb 	.word	0x08012acb
 8012a18:	08012acb 	.word	0x08012acb
 8012a1c:	08012acb 	.word	0x08012acb
 8012a20:	08012acb 	.word	0x08012acb
 8012a24:	08012a97 	.word	0x08012a97
 8012a28:	08012acb 	.word	0x08012acb
 8012a2c:	08012acb 	.word	0x08012acb
 8012a30:	08012acb 	.word	0x08012acb
 8012a34:	08012acb 	.word	0x08012acb
 8012a38:	08012acb 	.word	0x08012acb
 8012a3c:	08012acb 	.word	0x08012acb
 8012a40:	08012acb 	.word	0x08012acb
 8012a44:	08012acb 	.word	0x08012acb
 8012a48:	08012acb 	.word	0x08012acb
 8012a4c:	08012acb 	.word	0x08012acb
 8012a50:	08012acb 	.word	0x08012acb
 8012a54:	08012acb 	.word	0x08012acb
 8012a58:	08012acb 	.word	0x08012acb
 8012a5c:	08012acb 	.word	0x08012acb
 8012a60:	08012acb 	.word	0x08012acb
 8012a64:	08012abd 	.word	0x08012abd
 8012a68:	2b40      	cmp	r3, #64	@ 0x40
 8012a6a:	d02a      	beq.n	8012ac2 <UART_SetConfig+0x8aa>
 8012a6c:	e02d      	b.n	8012aca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8012a6e:	f7fc fb73 	bl	800f158 <HAL_RCCEx_GetD3PCLK1Freq>
 8012a72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012a74:	e02f      	b.n	8012ad6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012a76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	f7fc fb82 	bl	800f184 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012a84:	e027      	b.n	8012ad6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012a86:	f107 0318 	add.w	r3, r7, #24
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	f7fc fcce 	bl	800f42c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012a90:	69fb      	ldr	r3, [r7, #28]
 8012a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012a94:	e01f      	b.n	8012ad6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012a96:	4b21      	ldr	r3, [pc, #132]	@ (8012b1c <UART_SetConfig+0x904>)
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	f003 0320 	and.w	r3, r3, #32
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d009      	beq.n	8012ab6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8012b1c <UART_SetConfig+0x904>)
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	08db      	lsrs	r3, r3, #3
 8012aa8:	f003 0303 	and.w	r3, r3, #3
 8012aac:	4a1d      	ldr	r2, [pc, #116]	@ (8012b24 <UART_SetConfig+0x90c>)
 8012aae:	fa22 f303 	lsr.w	r3, r2, r3
 8012ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012ab4:	e00f      	b.n	8012ad6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8012ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8012b24 <UART_SetConfig+0x90c>)
 8012ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012aba:	e00c      	b.n	8012ad6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012abc:	4b1a      	ldr	r3, [pc, #104]	@ (8012b28 <UART_SetConfig+0x910>)
 8012abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012ac0:	e009      	b.n	8012ad6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012ac2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012ac8:	e005      	b.n	8012ad6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8012aca:	2300      	movs	r3, #0
 8012acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8012ace:	2301      	movs	r3, #1
 8012ad0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8012ad4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8012ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	f000 81ee 	beq.w	8012eba <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8012ade:	697b      	ldr	r3, [r7, #20]
 8012ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ae2:	4a12      	ldr	r2, [pc, #72]	@ (8012b2c <UART_SetConfig+0x914>)
 8012ae4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012ae8:	461a      	mov	r2, r3
 8012aea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012aec:	fbb3 f3f2 	udiv	r3, r3, r2
 8012af0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012af2:	697b      	ldr	r3, [r7, #20]
 8012af4:	685a      	ldr	r2, [r3, #4]
 8012af6:	4613      	mov	r3, r2
 8012af8:	005b      	lsls	r3, r3, #1
 8012afa:	4413      	add	r3, r2
 8012afc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012afe:	429a      	cmp	r2, r3
 8012b00:	d305      	bcc.n	8012b0e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8012b02:	697b      	ldr	r3, [r7, #20]
 8012b04:	685b      	ldr	r3, [r3, #4]
 8012b06:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012b08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012b0a:	429a      	cmp	r2, r3
 8012b0c:	d910      	bls.n	8012b30 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8012b0e:	2301      	movs	r3, #1
 8012b10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012b14:	e1d1      	b.n	8012eba <UART_SetConfig+0xca2>
 8012b16:	bf00      	nop
 8012b18:	40011c00 	.word	0x40011c00
 8012b1c:	58024400 	.word	0x58024400
 8012b20:	58000c00 	.word	0x58000c00
 8012b24:	03d09000 	.word	0x03d09000
 8012b28:	003d0900 	.word	0x003d0900
 8012b2c:	0802e328 	.word	0x0802e328
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012b30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012b32:	2200      	movs	r2, #0
 8012b34:	60bb      	str	r3, [r7, #8]
 8012b36:	60fa      	str	r2, [r7, #12]
 8012b38:	697b      	ldr	r3, [r7, #20]
 8012b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b3c:	4ac0      	ldr	r2, [pc, #768]	@ (8012e40 <UART_SetConfig+0xc28>)
 8012b3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012b42:	b29b      	uxth	r3, r3
 8012b44:	2200      	movs	r2, #0
 8012b46:	603b      	str	r3, [r7, #0]
 8012b48:	607a      	str	r2, [r7, #4]
 8012b4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012b4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8012b52:	f7ed fe41 	bl	80007d8 <__aeabi_uldivmod>
 8012b56:	4602      	mov	r2, r0
 8012b58:	460b      	mov	r3, r1
 8012b5a:	4610      	mov	r0, r2
 8012b5c:	4619      	mov	r1, r3
 8012b5e:	f04f 0200 	mov.w	r2, #0
 8012b62:	f04f 0300 	mov.w	r3, #0
 8012b66:	020b      	lsls	r3, r1, #8
 8012b68:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8012b6c:	0202      	lsls	r2, r0, #8
 8012b6e:	6979      	ldr	r1, [r7, #20]
 8012b70:	6849      	ldr	r1, [r1, #4]
 8012b72:	0849      	lsrs	r1, r1, #1
 8012b74:	2000      	movs	r0, #0
 8012b76:	460c      	mov	r4, r1
 8012b78:	4605      	mov	r5, r0
 8012b7a:	eb12 0804 	adds.w	r8, r2, r4
 8012b7e:	eb43 0905 	adc.w	r9, r3, r5
 8012b82:	697b      	ldr	r3, [r7, #20]
 8012b84:	685b      	ldr	r3, [r3, #4]
 8012b86:	2200      	movs	r2, #0
 8012b88:	469a      	mov	sl, r3
 8012b8a:	4693      	mov	fp, r2
 8012b8c:	4652      	mov	r2, sl
 8012b8e:	465b      	mov	r3, fp
 8012b90:	4640      	mov	r0, r8
 8012b92:	4649      	mov	r1, r9
 8012b94:	f7ed fe20 	bl	80007d8 <__aeabi_uldivmod>
 8012b98:	4602      	mov	r2, r0
 8012b9a:	460b      	mov	r3, r1
 8012b9c:	4613      	mov	r3, r2
 8012b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8012ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ba2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012ba6:	d308      	bcc.n	8012bba <UART_SetConfig+0x9a2>
 8012ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012baa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012bae:	d204      	bcs.n	8012bba <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8012bb0:	697b      	ldr	r3, [r7, #20]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012bb6:	60da      	str	r2, [r3, #12]
 8012bb8:	e17f      	b.n	8012eba <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8012bba:	2301      	movs	r3, #1
 8012bbc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012bc0:	e17b      	b.n	8012eba <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012bc2:	697b      	ldr	r3, [r7, #20]
 8012bc4:	69db      	ldr	r3, [r3, #28]
 8012bc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012bca:	f040 80bd 	bne.w	8012d48 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8012bce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012bd2:	2b20      	cmp	r3, #32
 8012bd4:	dc48      	bgt.n	8012c68 <UART_SetConfig+0xa50>
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	db7b      	blt.n	8012cd2 <UART_SetConfig+0xaba>
 8012bda:	2b20      	cmp	r3, #32
 8012bdc:	d879      	bhi.n	8012cd2 <UART_SetConfig+0xaba>
 8012bde:	a201      	add	r2, pc, #4	@ (adr r2, 8012be4 <UART_SetConfig+0x9cc>)
 8012be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012be4:	08012c6f 	.word	0x08012c6f
 8012be8:	08012c77 	.word	0x08012c77
 8012bec:	08012cd3 	.word	0x08012cd3
 8012bf0:	08012cd3 	.word	0x08012cd3
 8012bf4:	08012c7f 	.word	0x08012c7f
 8012bf8:	08012cd3 	.word	0x08012cd3
 8012bfc:	08012cd3 	.word	0x08012cd3
 8012c00:	08012cd3 	.word	0x08012cd3
 8012c04:	08012c8f 	.word	0x08012c8f
 8012c08:	08012cd3 	.word	0x08012cd3
 8012c0c:	08012cd3 	.word	0x08012cd3
 8012c10:	08012cd3 	.word	0x08012cd3
 8012c14:	08012cd3 	.word	0x08012cd3
 8012c18:	08012cd3 	.word	0x08012cd3
 8012c1c:	08012cd3 	.word	0x08012cd3
 8012c20:	08012cd3 	.word	0x08012cd3
 8012c24:	08012c9f 	.word	0x08012c9f
 8012c28:	08012cd3 	.word	0x08012cd3
 8012c2c:	08012cd3 	.word	0x08012cd3
 8012c30:	08012cd3 	.word	0x08012cd3
 8012c34:	08012cd3 	.word	0x08012cd3
 8012c38:	08012cd3 	.word	0x08012cd3
 8012c3c:	08012cd3 	.word	0x08012cd3
 8012c40:	08012cd3 	.word	0x08012cd3
 8012c44:	08012cd3 	.word	0x08012cd3
 8012c48:	08012cd3 	.word	0x08012cd3
 8012c4c:	08012cd3 	.word	0x08012cd3
 8012c50:	08012cd3 	.word	0x08012cd3
 8012c54:	08012cd3 	.word	0x08012cd3
 8012c58:	08012cd3 	.word	0x08012cd3
 8012c5c:	08012cd3 	.word	0x08012cd3
 8012c60:	08012cd3 	.word	0x08012cd3
 8012c64:	08012cc5 	.word	0x08012cc5
 8012c68:	2b40      	cmp	r3, #64	@ 0x40
 8012c6a:	d02e      	beq.n	8012cca <UART_SetConfig+0xab2>
 8012c6c:	e031      	b.n	8012cd2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012c6e:	f7fb f8a7 	bl	800ddc0 <HAL_RCC_GetPCLK1Freq>
 8012c72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012c74:	e033      	b.n	8012cde <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012c76:	f7fb f8b9 	bl	800ddec <HAL_RCC_GetPCLK2Freq>
 8012c7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012c7c:	e02f      	b.n	8012cde <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012c7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012c82:	4618      	mov	r0, r3
 8012c84:	f7fc fa7e 	bl	800f184 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012c8c:	e027      	b.n	8012cde <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012c8e:	f107 0318 	add.w	r3, r7, #24
 8012c92:	4618      	mov	r0, r3
 8012c94:	f7fc fbca 	bl	800f42c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012c98:	69fb      	ldr	r3, [r7, #28]
 8012c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012c9c:	e01f      	b.n	8012cde <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012c9e:	4b69      	ldr	r3, [pc, #420]	@ (8012e44 <UART_SetConfig+0xc2c>)
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	f003 0320 	and.w	r3, r3, #32
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d009      	beq.n	8012cbe <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012caa:	4b66      	ldr	r3, [pc, #408]	@ (8012e44 <UART_SetConfig+0xc2c>)
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	08db      	lsrs	r3, r3, #3
 8012cb0:	f003 0303 	and.w	r3, r3, #3
 8012cb4:	4a64      	ldr	r2, [pc, #400]	@ (8012e48 <UART_SetConfig+0xc30>)
 8012cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8012cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012cbc:	e00f      	b.n	8012cde <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8012cbe:	4b62      	ldr	r3, [pc, #392]	@ (8012e48 <UART_SetConfig+0xc30>)
 8012cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012cc2:	e00c      	b.n	8012cde <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012cc4:	4b61      	ldr	r3, [pc, #388]	@ (8012e4c <UART_SetConfig+0xc34>)
 8012cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012cc8:	e009      	b.n	8012cde <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012cca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012cd0:	e005      	b.n	8012cde <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8012cd6:	2301      	movs	r3, #1
 8012cd8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8012cdc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012cde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	f000 80ea 	beq.w	8012eba <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012ce6:	697b      	ldr	r3, [r7, #20]
 8012ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012cea:	4a55      	ldr	r2, [pc, #340]	@ (8012e40 <UART_SetConfig+0xc28>)
 8012cec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012cf0:	461a      	mov	r2, r3
 8012cf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012cf4:	fbb3 f3f2 	udiv	r3, r3, r2
 8012cf8:	005a      	lsls	r2, r3, #1
 8012cfa:	697b      	ldr	r3, [r7, #20]
 8012cfc:	685b      	ldr	r3, [r3, #4]
 8012cfe:	085b      	lsrs	r3, r3, #1
 8012d00:	441a      	add	r2, r3
 8012d02:	697b      	ldr	r3, [r7, #20]
 8012d04:	685b      	ldr	r3, [r3, #4]
 8012d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8012d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d0e:	2b0f      	cmp	r3, #15
 8012d10:	d916      	bls.n	8012d40 <UART_SetConfig+0xb28>
 8012d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012d18:	d212      	bcs.n	8012d40 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d1c:	b29b      	uxth	r3, r3
 8012d1e:	f023 030f 	bic.w	r3, r3, #15
 8012d22:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d26:	085b      	lsrs	r3, r3, #1
 8012d28:	b29b      	uxth	r3, r3
 8012d2a:	f003 0307 	and.w	r3, r3, #7
 8012d2e:	b29a      	uxth	r2, r3
 8012d30:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012d32:	4313      	orrs	r3, r2
 8012d34:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8012d36:	697b      	ldr	r3, [r7, #20]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8012d3c:	60da      	str	r2, [r3, #12]
 8012d3e:	e0bc      	b.n	8012eba <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8012d40:	2301      	movs	r3, #1
 8012d42:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012d46:	e0b8      	b.n	8012eba <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012d48:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012d4c:	2b20      	cmp	r3, #32
 8012d4e:	dc4b      	bgt.n	8012de8 <UART_SetConfig+0xbd0>
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	f2c0 8087 	blt.w	8012e64 <UART_SetConfig+0xc4c>
 8012d56:	2b20      	cmp	r3, #32
 8012d58:	f200 8084 	bhi.w	8012e64 <UART_SetConfig+0xc4c>
 8012d5c:	a201      	add	r2, pc, #4	@ (adr r2, 8012d64 <UART_SetConfig+0xb4c>)
 8012d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d62:	bf00      	nop
 8012d64:	08012def 	.word	0x08012def
 8012d68:	08012df7 	.word	0x08012df7
 8012d6c:	08012e65 	.word	0x08012e65
 8012d70:	08012e65 	.word	0x08012e65
 8012d74:	08012dff 	.word	0x08012dff
 8012d78:	08012e65 	.word	0x08012e65
 8012d7c:	08012e65 	.word	0x08012e65
 8012d80:	08012e65 	.word	0x08012e65
 8012d84:	08012e0f 	.word	0x08012e0f
 8012d88:	08012e65 	.word	0x08012e65
 8012d8c:	08012e65 	.word	0x08012e65
 8012d90:	08012e65 	.word	0x08012e65
 8012d94:	08012e65 	.word	0x08012e65
 8012d98:	08012e65 	.word	0x08012e65
 8012d9c:	08012e65 	.word	0x08012e65
 8012da0:	08012e65 	.word	0x08012e65
 8012da4:	08012e1f 	.word	0x08012e1f
 8012da8:	08012e65 	.word	0x08012e65
 8012dac:	08012e65 	.word	0x08012e65
 8012db0:	08012e65 	.word	0x08012e65
 8012db4:	08012e65 	.word	0x08012e65
 8012db8:	08012e65 	.word	0x08012e65
 8012dbc:	08012e65 	.word	0x08012e65
 8012dc0:	08012e65 	.word	0x08012e65
 8012dc4:	08012e65 	.word	0x08012e65
 8012dc8:	08012e65 	.word	0x08012e65
 8012dcc:	08012e65 	.word	0x08012e65
 8012dd0:	08012e65 	.word	0x08012e65
 8012dd4:	08012e65 	.word	0x08012e65
 8012dd8:	08012e65 	.word	0x08012e65
 8012ddc:	08012e65 	.word	0x08012e65
 8012de0:	08012e65 	.word	0x08012e65
 8012de4:	08012e57 	.word	0x08012e57
 8012de8:	2b40      	cmp	r3, #64	@ 0x40
 8012dea:	d037      	beq.n	8012e5c <UART_SetConfig+0xc44>
 8012dec:	e03a      	b.n	8012e64 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012dee:	f7fa ffe7 	bl	800ddc0 <HAL_RCC_GetPCLK1Freq>
 8012df2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012df4:	e03c      	b.n	8012e70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012df6:	f7fa fff9 	bl	800ddec <HAL_RCC_GetPCLK2Freq>
 8012dfa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012dfc:	e038      	b.n	8012e70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012dfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012e02:	4618      	mov	r0, r3
 8012e04:	f7fc f9be 	bl	800f184 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012e0c:	e030      	b.n	8012e70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012e0e:	f107 0318 	add.w	r3, r7, #24
 8012e12:	4618      	mov	r0, r3
 8012e14:	f7fc fb0a 	bl	800f42c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012e18:	69fb      	ldr	r3, [r7, #28]
 8012e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012e1c:	e028      	b.n	8012e70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012e1e:	4b09      	ldr	r3, [pc, #36]	@ (8012e44 <UART_SetConfig+0xc2c>)
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	f003 0320 	and.w	r3, r3, #32
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d012      	beq.n	8012e50 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012e2a:	4b06      	ldr	r3, [pc, #24]	@ (8012e44 <UART_SetConfig+0xc2c>)
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	08db      	lsrs	r3, r3, #3
 8012e30:	f003 0303 	and.w	r3, r3, #3
 8012e34:	4a04      	ldr	r2, [pc, #16]	@ (8012e48 <UART_SetConfig+0xc30>)
 8012e36:	fa22 f303 	lsr.w	r3, r2, r3
 8012e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012e3c:	e018      	b.n	8012e70 <UART_SetConfig+0xc58>
 8012e3e:	bf00      	nop
 8012e40:	0802e328 	.word	0x0802e328
 8012e44:	58024400 	.word	0x58024400
 8012e48:	03d09000 	.word	0x03d09000
 8012e4c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8012e50:	4b24      	ldr	r3, [pc, #144]	@ (8012ee4 <UART_SetConfig+0xccc>)
 8012e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012e54:	e00c      	b.n	8012e70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012e56:	4b24      	ldr	r3, [pc, #144]	@ (8012ee8 <UART_SetConfig+0xcd0>)
 8012e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012e5a:	e009      	b.n	8012e70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012e5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012e62:	e005      	b.n	8012e70 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8012e64:	2300      	movs	r3, #0
 8012e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8012e68:	2301      	movs	r3, #1
 8012e6a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8012e6e:	bf00      	nop
    }

    if (pclk != 0U)
 8012e70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d021      	beq.n	8012eba <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012e76:	697b      	ldr	r3, [r7, #20]
 8012e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e7a:	4a1c      	ldr	r2, [pc, #112]	@ (8012eec <UART_SetConfig+0xcd4>)
 8012e7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012e80:	461a      	mov	r2, r3
 8012e82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012e84:	fbb3 f2f2 	udiv	r2, r3, r2
 8012e88:	697b      	ldr	r3, [r7, #20]
 8012e8a:	685b      	ldr	r3, [r3, #4]
 8012e8c:	085b      	lsrs	r3, r3, #1
 8012e8e:	441a      	add	r2, r3
 8012e90:	697b      	ldr	r3, [r7, #20]
 8012e92:	685b      	ldr	r3, [r3, #4]
 8012e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8012e98:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e9c:	2b0f      	cmp	r3, #15
 8012e9e:	d909      	bls.n	8012eb4 <UART_SetConfig+0xc9c>
 8012ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ea2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012ea6:	d205      	bcs.n	8012eb4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012eaa:	b29a      	uxth	r2, r3
 8012eac:	697b      	ldr	r3, [r7, #20]
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	60da      	str	r2, [r3, #12]
 8012eb2:	e002      	b.n	8012eba <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8012eb4:	2301      	movs	r3, #1
 8012eb6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8012eba:	697b      	ldr	r3, [r7, #20]
 8012ebc:	2201      	movs	r2, #1
 8012ebe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8012ec2:	697b      	ldr	r3, [r7, #20]
 8012ec4:	2201      	movs	r2, #1
 8012ec6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012eca:	697b      	ldr	r3, [r7, #20]
 8012ecc:	2200      	movs	r2, #0
 8012ece:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8012ed0:	697b      	ldr	r3, [r7, #20]
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8012ed6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8012eda:	4618      	mov	r0, r3
 8012edc:	3748      	adds	r7, #72	@ 0x48
 8012ede:	46bd      	mov	sp, r7
 8012ee0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012ee4:	03d09000 	.word	0x03d09000
 8012ee8:	003d0900 	.word	0x003d0900
 8012eec:	0802e328 	.word	0x0802e328

08012ef0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012ef0:	b480      	push	{r7}
 8012ef2:	b083      	sub	sp, #12
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012efc:	f003 0308 	and.w	r3, r3, #8
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d00a      	beq.n	8012f1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	685b      	ldr	r3, [r3, #4]
 8012f0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	430a      	orrs	r2, r1
 8012f18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012f1e:	f003 0301 	and.w	r3, r3, #1
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d00a      	beq.n	8012f3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	685b      	ldr	r3, [r3, #4]
 8012f2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	430a      	orrs	r2, r1
 8012f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012f40:	f003 0302 	and.w	r3, r3, #2
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d00a      	beq.n	8012f5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	685b      	ldr	r3, [r3, #4]
 8012f4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	430a      	orrs	r2, r1
 8012f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012f62:	f003 0304 	and.w	r3, r3, #4
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d00a      	beq.n	8012f80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	685b      	ldr	r3, [r3, #4]
 8012f70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	430a      	orrs	r2, r1
 8012f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012f84:	f003 0310 	and.w	r3, r3, #16
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d00a      	beq.n	8012fa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	689b      	ldr	r3, [r3, #8]
 8012f92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	430a      	orrs	r2, r1
 8012fa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012fa6:	f003 0320 	and.w	r3, r3, #32
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d00a      	beq.n	8012fc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	689b      	ldr	r3, [r3, #8]
 8012fb4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	430a      	orrs	r2, r1
 8012fc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d01a      	beq.n	8013006 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	685b      	ldr	r3, [r3, #4]
 8012fd6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	430a      	orrs	r2, r1
 8012fe4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012fea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012fee:	d10a      	bne.n	8013006 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	685b      	ldr	r3, [r3, #4]
 8012ff6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	430a      	orrs	r2, r1
 8013004:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801300a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801300e:	2b00      	cmp	r3, #0
 8013010:	d00a      	beq.n	8013028 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	685b      	ldr	r3, [r3, #4]
 8013018:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	430a      	orrs	r2, r1
 8013026:	605a      	str	r2, [r3, #4]
  }
}
 8013028:	bf00      	nop
 801302a:	370c      	adds	r7, #12
 801302c:	46bd      	mov	sp, r7
 801302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013032:	4770      	bx	lr

08013034 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013034:	b580      	push	{r7, lr}
 8013036:	b098      	sub	sp, #96	@ 0x60
 8013038:	af02      	add	r7, sp, #8
 801303a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	2200      	movs	r2, #0
 8013040:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013044:	f7f6 fd26 	bl	8009a94 <HAL_GetTick>
 8013048:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	f003 0308 	and.w	r3, r3, #8
 8013054:	2b08      	cmp	r3, #8
 8013056:	d12f      	bne.n	80130b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013058:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801305c:	9300      	str	r3, [sp, #0]
 801305e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013060:	2200      	movs	r2, #0
 8013062:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8013066:	6878      	ldr	r0, [r7, #4]
 8013068:	f000 f88e 	bl	8013188 <UART_WaitOnFlagUntilTimeout>
 801306c:	4603      	mov	r3, r0
 801306e:	2b00      	cmp	r3, #0
 8013070:	d022      	beq.n	80130b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801307a:	e853 3f00 	ldrex	r3, [r3]
 801307e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013082:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013086:	653b      	str	r3, [r7, #80]	@ 0x50
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	461a      	mov	r2, r3
 801308e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013090:	647b      	str	r3, [r7, #68]	@ 0x44
 8013092:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013094:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013096:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013098:	e841 2300 	strex	r3, r2, [r1]
 801309c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801309e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d1e6      	bne.n	8013072 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	2220      	movs	r2, #32
 80130a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	2200      	movs	r2, #0
 80130b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80130b4:	2303      	movs	r3, #3
 80130b6:	e063      	b.n	8013180 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	f003 0304 	and.w	r3, r3, #4
 80130c2:	2b04      	cmp	r3, #4
 80130c4:	d149      	bne.n	801315a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80130c6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80130ca:	9300      	str	r3, [sp, #0]
 80130cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130ce:	2200      	movs	r2, #0
 80130d0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80130d4:	6878      	ldr	r0, [r7, #4]
 80130d6:	f000 f857 	bl	8013188 <UART_WaitOnFlagUntilTimeout>
 80130da:	4603      	mov	r3, r0
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d03c      	beq.n	801315a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80130e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130e8:	e853 3f00 	ldrex	r3, [r3]
 80130ec:	623b      	str	r3, [r7, #32]
   return(result);
 80130ee:	6a3b      	ldr	r3, [r7, #32]
 80130f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80130f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	461a      	mov	r2, r3
 80130fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80130fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8013100:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013102:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013106:	e841 2300 	strex	r3, r2, [r1]
 801310a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801310c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801310e:	2b00      	cmp	r3, #0
 8013110:	d1e6      	bne.n	80130e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	3308      	adds	r3, #8
 8013118:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801311a:	693b      	ldr	r3, [r7, #16]
 801311c:	e853 3f00 	ldrex	r3, [r3]
 8013120:	60fb      	str	r3, [r7, #12]
   return(result);
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	f023 0301 	bic.w	r3, r3, #1
 8013128:	64bb      	str	r3, [r7, #72]	@ 0x48
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	3308      	adds	r3, #8
 8013130:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013132:	61fa      	str	r2, [r7, #28]
 8013134:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013136:	69b9      	ldr	r1, [r7, #24]
 8013138:	69fa      	ldr	r2, [r7, #28]
 801313a:	e841 2300 	strex	r3, r2, [r1]
 801313e:	617b      	str	r3, [r7, #20]
   return(result);
 8013140:	697b      	ldr	r3, [r7, #20]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d1e5      	bne.n	8013112 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	2220      	movs	r2, #32
 801314a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	2200      	movs	r2, #0
 8013152:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013156:	2303      	movs	r3, #3
 8013158:	e012      	b.n	8013180 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	2220      	movs	r2, #32
 801315e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	2220      	movs	r2, #32
 8013166:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	2200      	movs	r2, #0
 801316e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	2200      	movs	r2, #0
 8013174:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	2200      	movs	r2, #0
 801317a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801317e:	2300      	movs	r3, #0
}
 8013180:	4618      	mov	r0, r3
 8013182:	3758      	adds	r7, #88	@ 0x58
 8013184:	46bd      	mov	sp, r7
 8013186:	bd80      	pop	{r7, pc}

08013188 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013188:	b580      	push	{r7, lr}
 801318a:	b084      	sub	sp, #16
 801318c:	af00      	add	r7, sp, #0
 801318e:	60f8      	str	r0, [r7, #12]
 8013190:	60b9      	str	r1, [r7, #8]
 8013192:	603b      	str	r3, [r7, #0]
 8013194:	4613      	mov	r3, r2
 8013196:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013198:	e04f      	b.n	801323a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801319a:	69bb      	ldr	r3, [r7, #24]
 801319c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131a0:	d04b      	beq.n	801323a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80131a2:	f7f6 fc77 	bl	8009a94 <HAL_GetTick>
 80131a6:	4602      	mov	r2, r0
 80131a8:	683b      	ldr	r3, [r7, #0]
 80131aa:	1ad3      	subs	r3, r2, r3
 80131ac:	69ba      	ldr	r2, [r7, #24]
 80131ae:	429a      	cmp	r2, r3
 80131b0:	d302      	bcc.n	80131b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80131b2:	69bb      	ldr	r3, [r7, #24]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d101      	bne.n	80131bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80131b8:	2303      	movs	r3, #3
 80131ba:	e04e      	b.n	801325a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	f003 0304 	and.w	r3, r3, #4
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d037      	beq.n	801323a <UART_WaitOnFlagUntilTimeout+0xb2>
 80131ca:	68bb      	ldr	r3, [r7, #8]
 80131cc:	2b80      	cmp	r3, #128	@ 0x80
 80131ce:	d034      	beq.n	801323a <UART_WaitOnFlagUntilTimeout+0xb2>
 80131d0:	68bb      	ldr	r3, [r7, #8]
 80131d2:	2b40      	cmp	r3, #64	@ 0x40
 80131d4:	d031      	beq.n	801323a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	69db      	ldr	r3, [r3, #28]
 80131dc:	f003 0308 	and.w	r3, r3, #8
 80131e0:	2b08      	cmp	r3, #8
 80131e2:	d110      	bne.n	8013206 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	2208      	movs	r2, #8
 80131ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80131ec:	68f8      	ldr	r0, [r7, #12]
 80131ee:	f000 f921 	bl	8013434 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	2208      	movs	r2, #8
 80131f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	2200      	movs	r2, #0
 80131fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8013202:	2301      	movs	r3, #1
 8013204:	e029      	b.n	801325a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	69db      	ldr	r3, [r3, #28]
 801320c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013210:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013214:	d111      	bne.n	801323a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801321e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013220:	68f8      	ldr	r0, [r7, #12]
 8013222:	f000 f907 	bl	8013434 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	2220      	movs	r2, #32
 801322a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	2200      	movs	r2, #0
 8013232:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8013236:	2303      	movs	r3, #3
 8013238:	e00f      	b.n	801325a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	69da      	ldr	r2, [r3, #28]
 8013240:	68bb      	ldr	r3, [r7, #8]
 8013242:	4013      	ands	r3, r2
 8013244:	68ba      	ldr	r2, [r7, #8]
 8013246:	429a      	cmp	r2, r3
 8013248:	bf0c      	ite	eq
 801324a:	2301      	moveq	r3, #1
 801324c:	2300      	movne	r3, #0
 801324e:	b2db      	uxtb	r3, r3
 8013250:	461a      	mov	r2, r3
 8013252:	79fb      	ldrb	r3, [r7, #7]
 8013254:	429a      	cmp	r2, r3
 8013256:	d0a0      	beq.n	801319a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013258:	2300      	movs	r3, #0
}
 801325a:	4618      	mov	r0, r3
 801325c:	3710      	adds	r7, #16
 801325e:	46bd      	mov	sp, r7
 8013260:	bd80      	pop	{r7, pc}
	...

08013264 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013264:	b580      	push	{r7, lr}
 8013266:	b096      	sub	sp, #88	@ 0x58
 8013268:	af00      	add	r7, sp, #0
 801326a:	60f8      	str	r0, [r7, #12]
 801326c:	60b9      	str	r1, [r7, #8]
 801326e:	4613      	mov	r3, r2
 8013270:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	68ba      	ldr	r2, [r7, #8]
 8013276:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	88fa      	ldrh	r2, [r7, #6]
 801327c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	2200      	movs	r2, #0
 8013284:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	2222      	movs	r2, #34	@ 0x22
 801328c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013296:	2b00      	cmp	r3, #0
 8013298:	d02d      	beq.n	80132f6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80132a0:	4a40      	ldr	r2, [pc, #256]	@ (80133a4 <UART_Start_Receive_DMA+0x140>)
 80132a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80132aa:	4a3f      	ldr	r2, [pc, #252]	@ (80133a8 <UART_Start_Receive_DMA+0x144>)
 80132ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80132b4:	4a3d      	ldr	r2, [pc, #244]	@ (80133ac <UART_Start_Receive_DMA+0x148>)
 80132b6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80132be:	2200      	movs	r2, #0
 80132c0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	3324      	adds	r3, #36	@ 0x24
 80132ce:	4619      	mov	r1, r3
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80132d4:	461a      	mov	r2, r3
 80132d6:	88fb      	ldrh	r3, [r7, #6]
 80132d8:	f7f7 f91e 	bl	800a518 <HAL_DMA_Start_IT>
 80132dc:	4603      	mov	r3, r0
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d009      	beq.n	80132f6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	2210      	movs	r2, #16
 80132e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	2220      	movs	r2, #32
 80132ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80132f2:	2301      	movs	r3, #1
 80132f4:	e051      	b.n	801339a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	691b      	ldr	r3, [r3, #16]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d018      	beq.n	8013330 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013306:	e853 3f00 	ldrex	r3, [r3]
 801330a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801330c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801330e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013312:	657b      	str	r3, [r7, #84]	@ 0x54
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	461a      	mov	r2, r3
 801331a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801331c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801331e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013320:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013322:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013324:	e841 2300 	strex	r3, r2, [r1]
 8013328:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801332a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801332c:	2b00      	cmp	r3, #0
 801332e:	d1e6      	bne.n	80132fe <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	3308      	adds	r3, #8
 8013336:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801333a:	e853 3f00 	ldrex	r3, [r3]
 801333e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013342:	f043 0301 	orr.w	r3, r3, #1
 8013346:	653b      	str	r3, [r7, #80]	@ 0x50
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	3308      	adds	r3, #8
 801334e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013350:	637a      	str	r2, [r7, #52]	@ 0x34
 8013352:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013354:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013356:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013358:	e841 2300 	strex	r3, r2, [r1]
 801335c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801335e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013360:	2b00      	cmp	r3, #0
 8013362:	d1e5      	bne.n	8013330 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	3308      	adds	r3, #8
 801336a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801336c:	697b      	ldr	r3, [r7, #20]
 801336e:	e853 3f00 	ldrex	r3, [r3]
 8013372:	613b      	str	r3, [r7, #16]
   return(result);
 8013374:	693b      	ldr	r3, [r7, #16]
 8013376:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801337a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	3308      	adds	r3, #8
 8013382:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013384:	623a      	str	r2, [r7, #32]
 8013386:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013388:	69f9      	ldr	r1, [r7, #28]
 801338a:	6a3a      	ldr	r2, [r7, #32]
 801338c:	e841 2300 	strex	r3, r2, [r1]
 8013390:	61bb      	str	r3, [r7, #24]
   return(result);
 8013392:	69bb      	ldr	r3, [r7, #24]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d1e5      	bne.n	8013364 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8013398:	2300      	movs	r3, #0
}
 801339a:	4618      	mov	r0, r3
 801339c:	3758      	adds	r7, #88	@ 0x58
 801339e:	46bd      	mov	sp, r7
 80133a0:	bd80      	pop	{r7, pc}
 80133a2:	bf00      	nop
 80133a4:	080135b3 	.word	0x080135b3
 80133a8:	080136db 	.word	0x080136db
 80133ac:	08013719 	.word	0x08013719

080133b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80133b0:	b480      	push	{r7}
 80133b2:	b08f      	sub	sp, #60	@ 0x3c
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80133be:	6a3b      	ldr	r3, [r7, #32]
 80133c0:	e853 3f00 	ldrex	r3, [r3]
 80133c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80133c6:	69fb      	ldr	r3, [r7, #28]
 80133c8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80133cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	461a      	mov	r2, r3
 80133d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80133d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80133d8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80133da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80133dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80133de:	e841 2300 	strex	r3, r2, [r1]
 80133e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80133e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d1e6      	bne.n	80133b8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	3308      	adds	r3, #8
 80133f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	e853 3f00 	ldrex	r3, [r3]
 80133f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80133fa:	68bb      	ldr	r3, [r7, #8]
 80133fc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8013400:	633b      	str	r3, [r7, #48]	@ 0x30
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	3308      	adds	r3, #8
 8013408:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801340a:	61ba      	str	r2, [r7, #24]
 801340c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801340e:	6979      	ldr	r1, [r7, #20]
 8013410:	69ba      	ldr	r2, [r7, #24]
 8013412:	e841 2300 	strex	r3, r2, [r1]
 8013416:	613b      	str	r3, [r7, #16]
   return(result);
 8013418:	693b      	ldr	r3, [r7, #16]
 801341a:	2b00      	cmp	r3, #0
 801341c:	d1e5      	bne.n	80133ea <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	2220      	movs	r2, #32
 8013422:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8013426:	bf00      	nop
 8013428:	373c      	adds	r7, #60	@ 0x3c
 801342a:	46bd      	mov	sp, r7
 801342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013430:	4770      	bx	lr
	...

08013434 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013434:	b480      	push	{r7}
 8013436:	b095      	sub	sp, #84	@ 0x54
 8013438:	af00      	add	r7, sp, #0
 801343a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013444:	e853 3f00 	ldrex	r3, [r3]
 8013448:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801344a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801344c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013450:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	461a      	mov	r2, r3
 8013458:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801345a:	643b      	str	r3, [r7, #64]	@ 0x40
 801345c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801345e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013460:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013462:	e841 2300 	strex	r3, r2, [r1]
 8013466:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8013468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801346a:	2b00      	cmp	r3, #0
 801346c:	d1e6      	bne.n	801343c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	3308      	adds	r3, #8
 8013474:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013476:	6a3b      	ldr	r3, [r7, #32]
 8013478:	e853 3f00 	ldrex	r3, [r3]
 801347c:	61fb      	str	r3, [r7, #28]
   return(result);
 801347e:	69fa      	ldr	r2, [r7, #28]
 8013480:	4b1e      	ldr	r3, [pc, #120]	@ (80134fc <UART_EndRxTransfer+0xc8>)
 8013482:	4013      	ands	r3, r2
 8013484:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	3308      	adds	r3, #8
 801348c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801348e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013490:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013492:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013494:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013496:	e841 2300 	strex	r3, r2, [r1]
 801349a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801349c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d1e5      	bne.n	801346e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80134a6:	2b01      	cmp	r3, #1
 80134a8:	d118      	bne.n	80134dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	e853 3f00 	ldrex	r3, [r3]
 80134b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80134b8:	68bb      	ldr	r3, [r7, #8]
 80134ba:	f023 0310 	bic.w	r3, r3, #16
 80134be:	647b      	str	r3, [r7, #68]	@ 0x44
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	461a      	mov	r2, r3
 80134c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80134c8:	61bb      	str	r3, [r7, #24]
 80134ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80134cc:	6979      	ldr	r1, [r7, #20]
 80134ce:	69ba      	ldr	r2, [r7, #24]
 80134d0:	e841 2300 	strex	r3, r2, [r1]
 80134d4:	613b      	str	r3, [r7, #16]
   return(result);
 80134d6:	693b      	ldr	r3, [r7, #16]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d1e6      	bne.n	80134aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	2220      	movs	r2, #32
 80134e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	2200      	movs	r2, #0
 80134e8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	2200      	movs	r2, #0
 80134ee:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80134f0:	bf00      	nop
 80134f2:	3754      	adds	r7, #84	@ 0x54
 80134f4:	46bd      	mov	sp, r7
 80134f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134fa:	4770      	bx	lr
 80134fc:	effffffe 	.word	0xeffffffe

08013500 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8013500:	b580      	push	{r7, lr}
 8013502:	b090      	sub	sp, #64	@ 0x40
 8013504:	af00      	add	r7, sp, #0
 8013506:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801350c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	69db      	ldr	r3, [r3, #28]
 8013512:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013516:	d037      	beq.n	8013588 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8013518:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801351a:	2200      	movs	r2, #0
 801351c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	3308      	adds	r3, #8
 8013526:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801352a:	e853 3f00 	ldrex	r3, [r3]
 801352e:	623b      	str	r3, [r7, #32]
   return(result);
 8013530:	6a3b      	ldr	r3, [r7, #32]
 8013532:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013536:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013538:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	3308      	adds	r3, #8
 801353e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013540:	633a      	str	r2, [r7, #48]	@ 0x30
 8013542:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013544:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013546:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013548:	e841 2300 	strex	r3, r2, [r1]
 801354c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801354e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013550:	2b00      	cmp	r3, #0
 8013552:	d1e5      	bne.n	8013520 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801355a:	693b      	ldr	r3, [r7, #16]
 801355c:	e853 3f00 	ldrex	r3, [r3]
 8013560:	60fb      	str	r3, [r7, #12]
   return(result);
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013568:	637b      	str	r3, [r7, #52]	@ 0x34
 801356a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	461a      	mov	r2, r3
 8013570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013572:	61fb      	str	r3, [r7, #28]
 8013574:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013576:	69b9      	ldr	r1, [r7, #24]
 8013578:	69fa      	ldr	r2, [r7, #28]
 801357a:	e841 2300 	strex	r3, r2, [r1]
 801357e:	617b      	str	r3, [r7, #20]
   return(result);
 8013580:	697b      	ldr	r3, [r7, #20]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d1e6      	bne.n	8013554 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013586:	e002      	b.n	801358e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8013588:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801358a:	f7f3 ffad 	bl	80074e8 <HAL_UART_TxCpltCallback>
}
 801358e:	bf00      	nop
 8013590:	3740      	adds	r7, #64	@ 0x40
 8013592:	46bd      	mov	sp, r7
 8013594:	bd80      	pop	{r7, pc}

08013596 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013596:	b580      	push	{r7, lr}
 8013598:	b084      	sub	sp, #16
 801359a:	af00      	add	r7, sp, #0
 801359c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80135a2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80135a4:	68f8      	ldr	r0, [r7, #12]
 80135a6:	f7fe fe17 	bl	80121d8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80135aa:	bf00      	nop
 80135ac:	3710      	adds	r7, #16
 80135ae:	46bd      	mov	sp, r7
 80135b0:	bd80      	pop	{r7, pc}

080135b2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80135b2:	b580      	push	{r7, lr}
 80135b4:	b09c      	sub	sp, #112	@ 0x70
 80135b6:	af00      	add	r7, sp, #0
 80135b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80135be:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	69db      	ldr	r3, [r3, #28]
 80135c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80135c8:	d071      	beq.n	80136ae <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80135ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80135cc:	2200      	movs	r2, #0
 80135ce:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80135d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80135d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80135da:	e853 3f00 	ldrex	r3, [r3]
 80135de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80135e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80135e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80135e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80135e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	461a      	mov	r2, r3
 80135ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80135f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80135f2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80135f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80135f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80135f8:	e841 2300 	strex	r3, r2, [r1]
 80135fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80135fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013600:	2b00      	cmp	r3, #0
 8013602:	d1e6      	bne.n	80135d2 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013604:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	3308      	adds	r3, #8
 801360a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801360c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801360e:	e853 3f00 	ldrex	r3, [r3]
 8013612:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013616:	f023 0301 	bic.w	r3, r3, #1
 801361a:	667b      	str	r3, [r7, #100]	@ 0x64
 801361c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	3308      	adds	r3, #8
 8013622:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013624:	647a      	str	r2, [r7, #68]	@ 0x44
 8013626:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013628:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801362a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801362c:	e841 2300 	strex	r3, r2, [r1]
 8013630:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8013632:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013634:	2b00      	cmp	r3, #0
 8013636:	d1e5      	bne.n	8013604 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013638:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	3308      	adds	r3, #8
 801363e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013642:	e853 3f00 	ldrex	r3, [r3]
 8013646:	623b      	str	r3, [r7, #32]
   return(result);
 8013648:	6a3b      	ldr	r3, [r7, #32]
 801364a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801364e:	663b      	str	r3, [r7, #96]	@ 0x60
 8013650:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	3308      	adds	r3, #8
 8013656:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8013658:	633a      	str	r2, [r7, #48]	@ 0x30
 801365a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801365c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801365e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013660:	e841 2300 	strex	r3, r2, [r1]
 8013664:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8013666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013668:	2b00      	cmp	r3, #0
 801366a:	d1e5      	bne.n	8013638 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801366c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801366e:	2220      	movs	r2, #32
 8013670:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013674:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013676:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013678:	2b01      	cmp	r3, #1
 801367a:	d118      	bne.n	80136ae <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801367c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013682:	693b      	ldr	r3, [r7, #16]
 8013684:	e853 3f00 	ldrex	r3, [r3]
 8013688:	60fb      	str	r3, [r7, #12]
   return(result);
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	f023 0310 	bic.w	r3, r3, #16
 8013690:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013692:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	461a      	mov	r2, r3
 8013698:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801369a:	61fb      	str	r3, [r7, #28]
 801369c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801369e:	69b9      	ldr	r1, [r7, #24]
 80136a0:	69fa      	ldr	r2, [r7, #28]
 80136a2:	e841 2300 	strex	r3, r2, [r1]
 80136a6:	617b      	str	r3, [r7, #20]
   return(result);
 80136a8:	697b      	ldr	r3, [r7, #20]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d1e6      	bne.n	801367c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80136ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80136b0:	2200      	movs	r2, #0
 80136b2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80136b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80136b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80136b8:	2b01      	cmp	r3, #1
 80136ba:	d107      	bne.n	80136cc <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80136bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80136be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80136c2:	4619      	mov	r1, r3
 80136c4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80136c6:	f7fe fd9b 	bl	8012200 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80136ca:	e002      	b.n	80136d2 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80136cc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80136ce:	f7f3 ff8d 	bl	80075ec <HAL_UART_RxCpltCallback>
}
 80136d2:	bf00      	nop
 80136d4:	3770      	adds	r7, #112	@ 0x70
 80136d6:	46bd      	mov	sp, r7
 80136d8:	bd80      	pop	{r7, pc}

080136da <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80136da:	b580      	push	{r7, lr}
 80136dc:	b084      	sub	sp, #16
 80136de:	af00      	add	r7, sp, #0
 80136e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80136e6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	2201      	movs	r2, #1
 80136ec:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80136f2:	2b01      	cmp	r3, #1
 80136f4:	d109      	bne.n	801370a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80136fc:	085b      	lsrs	r3, r3, #1
 80136fe:	b29b      	uxth	r3, r3
 8013700:	4619      	mov	r1, r3
 8013702:	68f8      	ldr	r0, [r7, #12]
 8013704:	f7fe fd7c 	bl	8012200 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013708:	e002      	b.n	8013710 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 801370a:	68f8      	ldr	r0, [r7, #12]
 801370c:	f7fe fd6e 	bl	80121ec <HAL_UART_RxHalfCpltCallback>
}
 8013710:	bf00      	nop
 8013712:	3710      	adds	r7, #16
 8013714:	46bd      	mov	sp, r7
 8013716:	bd80      	pop	{r7, pc}

08013718 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8013718:	b580      	push	{r7, lr}
 801371a:	b086      	sub	sp, #24
 801371c:	af00      	add	r7, sp, #0
 801371e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013724:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8013726:	697b      	ldr	r3, [r7, #20]
 8013728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801372c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801372e:	697b      	ldr	r3, [r7, #20]
 8013730:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013734:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8013736:	697b      	ldr	r3, [r7, #20]
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	689b      	ldr	r3, [r3, #8]
 801373c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013740:	2b80      	cmp	r3, #128	@ 0x80
 8013742:	d109      	bne.n	8013758 <UART_DMAError+0x40>
 8013744:	693b      	ldr	r3, [r7, #16]
 8013746:	2b21      	cmp	r3, #33	@ 0x21
 8013748:	d106      	bne.n	8013758 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801374a:	697b      	ldr	r3, [r7, #20]
 801374c:	2200      	movs	r2, #0
 801374e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8013752:	6978      	ldr	r0, [r7, #20]
 8013754:	f7ff fe2c 	bl	80133b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8013758:	697b      	ldr	r3, [r7, #20]
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	689b      	ldr	r3, [r3, #8]
 801375e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013762:	2b40      	cmp	r3, #64	@ 0x40
 8013764:	d109      	bne.n	801377a <UART_DMAError+0x62>
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	2b22      	cmp	r3, #34	@ 0x22
 801376a:	d106      	bne.n	801377a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801376c:	697b      	ldr	r3, [r7, #20]
 801376e:	2200      	movs	r2, #0
 8013770:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8013774:	6978      	ldr	r0, [r7, #20]
 8013776:	f7ff fe5d 	bl	8013434 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801377a:	697b      	ldr	r3, [r7, #20]
 801377c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013780:	f043 0210 	orr.w	r2, r3, #16
 8013784:	697b      	ldr	r3, [r7, #20]
 8013786:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801378a:	6978      	ldr	r0, [r7, #20]
 801378c:	f7f4 f81a 	bl	80077c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013790:	bf00      	nop
 8013792:	3718      	adds	r7, #24
 8013794:	46bd      	mov	sp, r7
 8013796:	bd80      	pop	{r7, pc}

08013798 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013798:	b580      	push	{r7, lr}
 801379a:	b084      	sub	sp, #16
 801379c:	af00      	add	r7, sp, #0
 801379e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80137a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	2200      	movs	r2, #0
 80137aa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	2200      	movs	r2, #0
 80137b2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80137b6:	68f8      	ldr	r0, [r7, #12]
 80137b8:	f7f4 f804 	bl	80077c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80137bc:	bf00      	nop
 80137be:	3710      	adds	r7, #16
 80137c0:	46bd      	mov	sp, r7
 80137c2:	bd80      	pop	{r7, pc}

080137c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80137c4:	b580      	push	{r7, lr}
 80137c6:	b088      	sub	sp, #32
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	e853 3f00 	ldrex	r3, [r3]
 80137d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80137da:	68bb      	ldr	r3, [r7, #8]
 80137dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80137e0:	61fb      	str	r3, [r7, #28]
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	461a      	mov	r2, r3
 80137e8:	69fb      	ldr	r3, [r7, #28]
 80137ea:	61bb      	str	r3, [r7, #24]
 80137ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137ee:	6979      	ldr	r1, [r7, #20]
 80137f0:	69ba      	ldr	r2, [r7, #24]
 80137f2:	e841 2300 	strex	r3, r2, [r1]
 80137f6:	613b      	str	r3, [r7, #16]
   return(result);
 80137f8:	693b      	ldr	r3, [r7, #16]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d1e6      	bne.n	80137cc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	2220      	movs	r2, #32
 8013802:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	2200      	movs	r2, #0
 801380a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801380c:	6878      	ldr	r0, [r7, #4]
 801380e:	f7f3 fe6b 	bl	80074e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013812:	bf00      	nop
 8013814:	3720      	adds	r7, #32
 8013816:	46bd      	mov	sp, r7
 8013818:	bd80      	pop	{r7, pc}

0801381a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801381a:	b480      	push	{r7}
 801381c:	b083      	sub	sp, #12
 801381e:	af00      	add	r7, sp, #0
 8013820:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8013822:	bf00      	nop
 8013824:	370c      	adds	r7, #12
 8013826:	46bd      	mov	sp, r7
 8013828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801382c:	4770      	bx	lr

0801382e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801382e:	b480      	push	{r7}
 8013830:	b083      	sub	sp, #12
 8013832:	af00      	add	r7, sp, #0
 8013834:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8013836:	bf00      	nop
 8013838:	370c      	adds	r7, #12
 801383a:	46bd      	mov	sp, r7
 801383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013840:	4770      	bx	lr

08013842 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8013842:	b480      	push	{r7}
 8013844:	b083      	sub	sp, #12
 8013846:	af00      	add	r7, sp, #0
 8013848:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801384a:	bf00      	nop
 801384c:	370c      	adds	r7, #12
 801384e:	46bd      	mov	sp, r7
 8013850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013854:	4770      	bx	lr

08013856 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8013856:	b480      	push	{r7}
 8013858:	b085      	sub	sp, #20
 801385a:	af00      	add	r7, sp, #0
 801385c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013864:	2b01      	cmp	r3, #1
 8013866:	d101      	bne.n	801386c <HAL_UARTEx_DisableFifoMode+0x16>
 8013868:	2302      	movs	r3, #2
 801386a:	e027      	b.n	80138bc <HAL_UARTEx_DisableFifoMode+0x66>
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	2201      	movs	r2, #1
 8013870:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	2224      	movs	r2, #36	@ 0x24
 8013878:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	681a      	ldr	r2, [r3, #0]
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	f022 0201 	bic.w	r2, r2, #1
 8013892:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801389a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	2200      	movs	r2, #0
 80138a0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	68fa      	ldr	r2, [r7, #12]
 80138a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	2220      	movs	r2, #32
 80138ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	2200      	movs	r2, #0
 80138b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80138ba:	2300      	movs	r3, #0
}
 80138bc:	4618      	mov	r0, r3
 80138be:	3714      	adds	r7, #20
 80138c0:	46bd      	mov	sp, r7
 80138c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c6:	4770      	bx	lr

080138c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80138c8:	b580      	push	{r7, lr}
 80138ca:	b084      	sub	sp, #16
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	6078      	str	r0, [r7, #4]
 80138d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80138d8:	2b01      	cmp	r3, #1
 80138da:	d101      	bne.n	80138e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80138dc:	2302      	movs	r3, #2
 80138de:	e02d      	b.n	801393c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	2201      	movs	r2, #1
 80138e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	2224      	movs	r2, #36	@ 0x24
 80138ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	681a      	ldr	r2, [r3, #0]
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	f022 0201 	bic.w	r2, r2, #1
 8013906:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	689b      	ldr	r3, [r3, #8]
 801390e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	683a      	ldr	r2, [r7, #0]
 8013918:	430a      	orrs	r2, r1
 801391a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801391c:	6878      	ldr	r0, [r7, #4]
 801391e:	f000 f84f 	bl	80139c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	68fa      	ldr	r2, [r7, #12]
 8013928:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	2220      	movs	r2, #32
 801392e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	2200      	movs	r2, #0
 8013936:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801393a:	2300      	movs	r3, #0
}
 801393c:	4618      	mov	r0, r3
 801393e:	3710      	adds	r7, #16
 8013940:	46bd      	mov	sp, r7
 8013942:	bd80      	pop	{r7, pc}

08013944 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013944:	b580      	push	{r7, lr}
 8013946:	b084      	sub	sp, #16
 8013948:	af00      	add	r7, sp, #0
 801394a:	6078      	str	r0, [r7, #4]
 801394c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013954:	2b01      	cmp	r3, #1
 8013956:	d101      	bne.n	801395c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8013958:	2302      	movs	r3, #2
 801395a:	e02d      	b.n	80139b8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	2201      	movs	r2, #1
 8013960:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	2224      	movs	r2, #36	@ 0x24
 8013968:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	681a      	ldr	r2, [r3, #0]
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	f022 0201 	bic.w	r2, r2, #1
 8013982:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	689b      	ldr	r3, [r3, #8]
 801398a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	683a      	ldr	r2, [r7, #0]
 8013994:	430a      	orrs	r2, r1
 8013996:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013998:	6878      	ldr	r0, [r7, #4]
 801399a:	f000 f811 	bl	80139c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	68fa      	ldr	r2, [r7, #12]
 80139a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	2220      	movs	r2, #32
 80139aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	2200      	movs	r2, #0
 80139b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80139b6:	2300      	movs	r3, #0
}
 80139b8:	4618      	mov	r0, r3
 80139ba:	3710      	adds	r7, #16
 80139bc:	46bd      	mov	sp, r7
 80139be:	bd80      	pop	{r7, pc}

080139c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80139c0:	b480      	push	{r7}
 80139c2:	b085      	sub	sp, #20
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d108      	bne.n	80139e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	2201      	movs	r2, #1
 80139d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	2201      	movs	r2, #1
 80139dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80139e0:	e031      	b.n	8013a46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80139e2:	2310      	movs	r3, #16
 80139e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80139e6:	2310      	movs	r3, #16
 80139e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	689b      	ldr	r3, [r3, #8]
 80139f0:	0e5b      	lsrs	r3, r3, #25
 80139f2:	b2db      	uxtb	r3, r3
 80139f4:	f003 0307 	and.w	r3, r3, #7
 80139f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	689b      	ldr	r3, [r3, #8]
 8013a00:	0f5b      	lsrs	r3, r3, #29
 8013a02:	b2db      	uxtb	r3, r3
 8013a04:	f003 0307 	and.w	r3, r3, #7
 8013a08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013a0a:	7bbb      	ldrb	r3, [r7, #14]
 8013a0c:	7b3a      	ldrb	r2, [r7, #12]
 8013a0e:	4911      	ldr	r1, [pc, #68]	@ (8013a54 <UARTEx_SetNbDataToProcess+0x94>)
 8013a10:	5c8a      	ldrb	r2, [r1, r2]
 8013a12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8013a16:	7b3a      	ldrb	r2, [r7, #12]
 8013a18:	490f      	ldr	r1, [pc, #60]	@ (8013a58 <UARTEx_SetNbDataToProcess+0x98>)
 8013a1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013a1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8013a20:	b29a      	uxth	r2, r3
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013a28:	7bfb      	ldrb	r3, [r7, #15]
 8013a2a:	7b7a      	ldrb	r2, [r7, #13]
 8013a2c:	4909      	ldr	r1, [pc, #36]	@ (8013a54 <UARTEx_SetNbDataToProcess+0x94>)
 8013a2e:	5c8a      	ldrb	r2, [r1, r2]
 8013a30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8013a34:	7b7a      	ldrb	r2, [r7, #13]
 8013a36:	4908      	ldr	r1, [pc, #32]	@ (8013a58 <UARTEx_SetNbDataToProcess+0x98>)
 8013a38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013a3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8013a3e:	b29a      	uxth	r2, r3
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8013a46:	bf00      	nop
 8013a48:	3714      	adds	r7, #20
 8013a4a:	46bd      	mov	sp, r7
 8013a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a50:	4770      	bx	lr
 8013a52:	bf00      	nop
 8013a54:	0802e340 	.word	0x0802e340
 8013a58:	0802e348 	.word	0x0802e348

08013a5c <app_main>:
#include "argus_example_app.h"
#include "argus_explorer_app.h"


void app_main(void)
{
 8013a5c:	b580      	push	{r7, lr}
 8013a5e:	af00      	add	r7, sp, #0

	//argus_example_app();
	argus_explorer_app();
 8013a60:	f7ef fd74 	bl	800354c <argus_explorer_app>

	while(1) {
 8013a64:	bf00      	nop
 8013a66:	e7fd      	b.n	8013a64 <app_main+0x8>

08013a68 <_ZN13TimingManager7proceedEv>:
public:
	TimingManager();
	TimingManager(const uint32_t delay);
	~TimingManager();

    static inline void proceed() {
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b084      	sub	sp, #16
 8013a6c:	af00      	add	r7, sp, #0
        for (TimingManager* const timer : m_timers) {
 8013a6e:	4b17      	ldr	r3, [pc, #92]	@ (8013acc <_ZN13TimingManager7proceedEv+0x64>)
 8013a70:	60fb      	str	r3, [r7, #12]
 8013a72:	68f8      	ldr	r0, [r7, #12]
 8013a74:	f000 f858 	bl	8013b28 <_ZNSt6vectorIP13TimingManagerSaIS1_EE5beginEv>
 8013a78:	4603      	mov	r3, r0
 8013a7a:	607b      	str	r3, [r7, #4]
 8013a7c:	68f8      	ldr	r0, [r7, #12]
 8013a7e:	f000 f863 	bl	8013b48 <_ZNSt6vectorIP13TimingManagerSaIS1_EE3endEv>
 8013a82:	4603      	mov	r3, r0
 8013a84:	603b      	str	r3, [r7, #0]
 8013a86:	e013      	b.n	8013ab0 <_ZN13TimingManager7proceedEv+0x48>
 8013a88:	1d3b      	adds	r3, r7, #4
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	f000 f895 	bl	8013bba <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEdeEv>
 8013a90:	4603      	mov	r3, r0
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	60bb      	str	r3, [r7, #8]
            if (timer->m_counter) {
 8013a96:	68bb      	ldr	r3, [r7, #8]
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d004      	beq.n	8013aa8 <_ZN13TimingManager7proceedEv+0x40>
                --timer->m_counter;
 8013a9e:	68bb      	ldr	r3, [r7, #8]
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	1e5a      	subs	r2, r3, #1
 8013aa4:	68bb      	ldr	r3, [r7, #8]
 8013aa6:	601a      	str	r2, [r3, #0]
        for (TimingManager* const timer : m_timers) {
 8013aa8:	1d3b      	adds	r3, r7, #4
 8013aaa:	4618      	mov	r0, r3
 8013aac:	f000 f875 	bl	8013b9a <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEppEv>
 8013ab0:	463a      	mov	r2, r7
 8013ab2:	1d3b      	adds	r3, r7, #4
 8013ab4:	4611      	mov	r1, r2
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f000 f857 	bl	8013b6a <_ZN9__gnu_cxxneIPP13TimingManagerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8013abc:	4603      	mov	r3, r0
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d1e2      	bne.n	8013a88 <_ZN13TimingManager7proceedEv+0x20>
            }
        }
    }
 8013ac2:	bf00      	nop
 8013ac4:	bf00      	nop
 8013ac6:	3710      	adds	r7, #16
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	bd80      	pop	{r7, pc}
 8013acc:	2400368c 	.word	0x2400368c

08013ad0 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	b082      	sub	sp, #8
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	6078      	str	r0, [r7, #4]
 8013ad8:	6878      	ldr	r0, [r7, #4]
 8013ada:	f000 f88a 	bl	8013bf2 <_ZNSaIP13TimingManagerED1Ev>
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	3708      	adds	r7, #8
 8013ae4:	46bd      	mov	sp, r7
 8013ae6:	bd80      	pop	{r7, pc}

08013ae8 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8013ae8:	b580      	push	{r7, lr}
 8013aea:	b082      	sub	sp, #8
 8013aec:	af00      	add	r7, sp, #0
 8013aee:	6078      	str	r0, [r7, #4]
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	4618      	mov	r0, r3
 8013af4:	f000 f86d 	bl	8013bd2 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE12_Vector_implC1Ev>
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	4618      	mov	r0, r3
 8013afc:	3708      	adds	r7, #8
 8013afe:	46bd      	mov	sp, r7
 8013b00:	bd80      	pop	{r7, pc}

08013b02 <_ZNSt6vectorIP13TimingManagerSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8013b02:	b580      	push	{r7, lr}
 8013b04:	b082      	sub	sp, #8
 8013b06:	af00      	add	r7, sp, #0
 8013b08:	6078      	str	r0, [r7, #4]
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	f7ff ffeb 	bl	8013ae8 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EEC1Ev>
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	4618      	mov	r0, r3
 8013b16:	3708      	adds	r7, #8
 8013b18:	46bd      	mov	sp, r7
 8013b1a:	bd80      	pop	{r7, pc}

08013b1c <HAL_SYSTICK_Callback>:



//----------------------------------------------------------------------------------------------------------
void HAL_SYSTICK_Callback(void)
{
 8013b1c:	b580      	push	{r7, lr}
 8013b1e:	af00      	add	r7, sp, #0
	TimingManager::proceed();
 8013b20:	f7ff ffa2 	bl	8013a68 <_ZN13TimingManager7proceedEv>
}
 8013b24:	bf00      	nop
 8013b26:	bd80      	pop	{r7, pc}

08013b28 <_ZNSt6vectorIP13TimingManagerSaIS1_EE5beginEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	b084      	sub	sp, #16
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8013b30:	687a      	ldr	r2, [r7, #4]
 8013b32:	f107 030c 	add.w	r3, r7, #12
 8013b36:	4611      	mov	r1, r2
 8013b38:	4618      	mov	r0, r3
 8013b3a:	f000 f87f 	bl	8013c3c <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	4618      	mov	r0, r3
 8013b42:	3710      	adds	r7, #16
 8013b44:	46bd      	mov	sp, r7
 8013b46:	bd80      	pop	{r7, pc}

08013b48 <_ZNSt6vectorIP13TimingManagerSaIS1_EE3endEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      end() _GLIBCXX_NOEXCEPT
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b084      	sub	sp, #16
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	1d1a      	adds	r2, r3, #4
 8013b54:	f107 030c 	add.w	r3, r7, #12
 8013b58:	4611      	mov	r1, r2
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	f000 f86e 	bl	8013c3c <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	4618      	mov	r0, r3
 8013b64:	3710      	adds	r7, #16
 8013b66:	46bd      	mov	sp, r7
 8013b68:	bd80      	pop	{r7, pc}

08013b6a <_ZN9__gnu_cxxneIPP13TimingManagerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8013b6a:	b590      	push	{r4, r7, lr}
 8013b6c:	b083      	sub	sp, #12
 8013b6e:	af00      	add	r7, sp, #0
 8013b70:	6078      	str	r0, [r7, #4]
 8013b72:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8013b74:	6878      	ldr	r0, [r7, #4]
 8013b76:	f000 f871 	bl	8013c5c <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 8013b7a:	4603      	mov	r3, r0
 8013b7c:	681c      	ldr	r4, [r3, #0]
 8013b7e:	6838      	ldr	r0, [r7, #0]
 8013b80:	f000 f86c 	bl	8013c5c <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 8013b84:	4603      	mov	r3, r0
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	429c      	cmp	r4, r3
 8013b8a:	bf14      	ite	ne
 8013b8c:	2301      	movne	r3, #1
 8013b8e:	2300      	moveq	r3, #0
 8013b90:	b2db      	uxtb	r3, r3
 8013b92:	4618      	mov	r0, r3
 8013b94:	370c      	adds	r7, #12
 8013b96:	46bd      	mov	sp, r7
 8013b98:	bd90      	pop	{r4, r7, pc}

08013b9a <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8013b9a:	b480      	push	{r7}
 8013b9c:	b083      	sub	sp, #12
 8013b9e:	af00      	add	r7, sp, #0
 8013ba0:	6078      	str	r0, [r7, #4]
	++_M_current;
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	1d1a      	adds	r2, r3, #4
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	601a      	str	r2, [r3, #0]
	return *this;
 8013bac:	687b      	ldr	r3, [r7, #4]
      }
 8013bae:	4618      	mov	r0, r3
 8013bb0:	370c      	adds	r7, #12
 8013bb2:	46bd      	mov	sp, r7
 8013bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bb8:	4770      	bx	lr

08013bba <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8013bba:	b480      	push	{r7}
 8013bbc:	b083      	sub	sp, #12
 8013bbe:	af00      	add	r7, sp, #0
 8013bc0:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	370c      	adds	r7, #12
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd0:	4770      	bx	lr

08013bd2 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8013bd2:	b580      	push	{r7, lr}
 8013bd4:	b082      	sub	sp, #8
 8013bd6:	af00      	add	r7, sp, #0
 8013bd8:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8013bda:	6878      	ldr	r0, [r7, #4]
 8013bdc:	f000 f849 	bl	8013c72 <_ZNSaIP13TimingManagerEC1Ev>
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	4618      	mov	r0, r3
 8013be4:	f000 f851 	bl	8013c8a <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	4618      	mov	r0, r3
 8013bec:	3708      	adds	r7, #8
 8013bee:	46bd      	mov	sp, r7
 8013bf0:	bd80      	pop	{r7, pc}

08013bf2 <_ZNSaIP13TimingManagerED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8013bf2:	b580      	push	{r7, lr}
 8013bf4:	b082      	sub	sp, #8
 8013bf6:	af00      	add	r7, sp, #0
 8013bf8:	6078      	str	r0, [r7, #4]
 8013bfa:	6878      	ldr	r0, [r7, #4]
 8013bfc:	f000 f859 	bl	8013cb2 <_ZNSt15__new_allocatorIP13TimingManagerED1Ev>
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	4618      	mov	r0, r3
 8013c04:	3708      	adds	r7, #8
 8013c06:	46bd      	mov	sp, r7
 8013c08:	bd80      	pop	{r7, pc}

08013c0a <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8013c0a:	b580      	push	{r7, lr}
 8013c0c:	b082      	sub	sp, #8
 8013c0e:	af00      	add	r7, sp, #0
 8013c10:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	689a      	ldr	r2, [r3, #8]
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	1ad3      	subs	r3, r2, r3
 8013c20:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8013c22:	461a      	mov	r2, r3
 8013c24:	6878      	ldr	r0, [r7, #4]
 8013c26:	f000 f84f 	bl	8013cc8 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE13_M_deallocateEPS1_j>
      }
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	f7ff ff4f 	bl	8013ad0 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE12_Vector_implD1Ev>
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	4618      	mov	r0, r3
 8013c36:	3708      	adds	r7, #8
 8013c38:	46bd      	mov	sp, r7
 8013c3a:	bd80      	pop	{r7, pc}

08013c3c <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8013c3c:	b480      	push	{r7}
 8013c3e:	b083      	sub	sp, #12
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
 8013c44:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8013c46:	683b      	ldr	r3, [r7, #0]
 8013c48:	681a      	ldr	r2, [r3, #0]
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	601a      	str	r2, [r3, #0]
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	4618      	mov	r0, r3
 8013c52:	370c      	adds	r7, #12
 8013c54:	46bd      	mov	sp, r7
 8013c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c5a:	4770      	bx	lr

08013c5c <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8013c5c:	b480      	push	{r7}
 8013c5e:	b083      	sub	sp, #12
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	4618      	mov	r0, r3
 8013c68:	370c      	adds	r7, #12
 8013c6a:	46bd      	mov	sp, r7
 8013c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c70:	4770      	bx	lr

08013c72 <_ZNSaIP13TimingManagerEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8013c72:	b580      	push	{r7, lr}
 8013c74:	b082      	sub	sp, #8
 8013c76:	af00      	add	r7, sp, #0
 8013c78:	6078      	str	r0, [r7, #4]
 8013c7a:	6878      	ldr	r0, [r7, #4]
 8013c7c:	f000 f837 	bl	8013cee <_ZNSt15__new_allocatorIP13TimingManagerEC1Ev>
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	4618      	mov	r0, r3
 8013c84:	3708      	adds	r7, #8
 8013c86:	46bd      	mov	sp, r7
 8013c88:	bd80      	pop	{r7, pc}

08013c8a <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8013c8a:	b480      	push	{r7}
 8013c8c:	b083      	sub	sp, #12
 8013c8e:	af00      	add	r7, sp, #0
 8013c90:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	2200      	movs	r2, #0
 8013c96:	601a      	str	r2, [r3, #0]
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	2200      	movs	r2, #0
 8013c9c:	605a      	str	r2, [r3, #4]
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	2200      	movs	r2, #0
 8013ca2:	609a      	str	r2, [r3, #8]
	{ }
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	370c      	adds	r7, #12
 8013caa:	46bd      	mov	sp, r7
 8013cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb0:	4770      	bx	lr

08013cb2 <_ZNSt15__new_allocatorIP13TimingManagerED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8013cb2:	b480      	push	{r7}
 8013cb4:	b083      	sub	sp, #12
 8013cb6:	af00      	add	r7, sp, #0
 8013cb8:	6078      	str	r0, [r7, #4]
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	370c      	adds	r7, #12
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc6:	4770      	bx	lr

08013cc8 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b084      	sub	sp, #16
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	60f8      	str	r0, [r7, #12]
 8013cd0:	60b9      	str	r1, [r7, #8]
 8013cd2:	607a      	str	r2, [r7, #4]
	if (__p)
 8013cd4:	68bb      	ldr	r3, [r7, #8]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d005      	beq.n	8013ce6 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	687a      	ldr	r2, [r7, #4]
 8013cde:	68b9      	ldr	r1, [r7, #8]
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	f000 f80f 	bl	8013d04 <_ZNSt16allocator_traitsISaIP13TimingManagerEE10deallocateERS2_PS1_j>
      }
 8013ce6:	bf00      	nop
 8013ce8:	3710      	adds	r7, #16
 8013cea:	46bd      	mov	sp, r7
 8013cec:	bd80      	pop	{r7, pc}

08013cee <_ZNSt15__new_allocatorIP13TimingManagerEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8013cee:	b480      	push	{r7}
 8013cf0:	b083      	sub	sp, #12
 8013cf2:	af00      	add	r7, sp, #0
 8013cf4:	6078      	str	r0, [r7, #4]
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	370c      	adds	r7, #12
 8013cfc:	46bd      	mov	sp, r7
 8013cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d02:	4770      	bx	lr

08013d04 <_ZNSt16allocator_traitsISaIP13TimingManagerEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b084      	sub	sp, #16
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	60f8      	str	r0, [r7, #12]
 8013d0c:	60b9      	str	r1, [r7, #8]
 8013d0e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8013d10:	687a      	ldr	r2, [r7, #4]
 8013d12:	68b9      	ldr	r1, [r7, #8]
 8013d14:	68f8      	ldr	r0, [r7, #12]
 8013d16:	f000 f804 	bl	8013d22 <_ZNSt15__new_allocatorIP13TimingManagerE10deallocateEPS1_j>
 8013d1a:	bf00      	nop
 8013d1c:	3710      	adds	r7, #16
 8013d1e:	46bd      	mov	sp, r7
 8013d20:	bd80      	pop	{r7, pc}

08013d22 <_ZNSt15__new_allocatorIP13TimingManagerE10deallocateEPS1_j>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8013d22:	b580      	push	{r7, lr}
 8013d24:	b084      	sub	sp, #16
 8013d26:	af00      	add	r7, sp, #0
 8013d28:	60f8      	str	r0, [r7, #12]
 8013d2a:	60b9      	str	r1, [r7, #8]
 8013d2c:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	009b      	lsls	r3, r3, #2
 8013d32:	4619      	mov	r1, r3
 8013d34:	68b8      	ldr	r0, [r7, #8]
 8013d36:	f016 fb0f 	bl	802a358 <_ZdlPvj>
      }
 8013d3a:	bf00      	nop
 8013d3c:	3710      	adds	r7, #16
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	bd80      	pop	{r7, pc}

08013d42 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8013d42:	b480      	push	{r7}
 8013d44:	b083      	sub	sp, #12
 8013d46:	af00      	add	r7, sp, #0
 8013d48:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	370c      	adds	r7, #12
 8013d50:	46bd      	mov	sp, r7
 8013d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d56:	4770      	bx	lr

08013d58 <_ZSt8_DestroyIPP13TimingManagerS1_EvT_S3_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8013d58:	b580      	push	{r7, lr}
 8013d5a:	b084      	sub	sp, #16
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	60f8      	str	r0, [r7, #12]
 8013d60:	60b9      	str	r1, [r7, #8]
 8013d62:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8013d64:	68b9      	ldr	r1, [r7, #8]
 8013d66:	68f8      	ldr	r0, [r7, #12]
 8013d68:	f000 f804 	bl	8013d74 <_ZSt8_DestroyIPP13TimingManagerEvT_S3_>
    }
 8013d6c:	bf00      	nop
 8013d6e:	3710      	adds	r7, #16
 8013d70:	46bd      	mov	sp, r7
 8013d72:	bd80      	pop	{r7, pc}

08013d74 <_ZSt8_DestroyIPP13TimingManagerEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8013d74:	b580      	push	{r7, lr}
 8013d76:	b082      	sub	sp, #8
 8013d78:	af00      	add	r7, sp, #0
 8013d7a:	6078      	str	r0, [r7, #4]
 8013d7c:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8013d7e:	6839      	ldr	r1, [r7, #0]
 8013d80:	6878      	ldr	r0, [r7, #4]
 8013d82:	f000 f804 	bl	8013d8e <_ZNSt12_Destroy_auxILb1EE9__destroyIPP13TimingManagerEEvT_S5_>
    }
 8013d86:	bf00      	nop
 8013d88:	3708      	adds	r7, #8
 8013d8a:	46bd      	mov	sp, r7
 8013d8c:	bd80      	pop	{r7, pc}

08013d8e <_ZNSt12_Destroy_auxILb1EE9__destroyIPP13TimingManagerEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8013d8e:	b480      	push	{r7}
 8013d90:	b083      	sub	sp, #12
 8013d92:	af00      	add	r7, sp, #0
 8013d94:	6078      	str	r0, [r7, #4]
 8013d96:	6039      	str	r1, [r7, #0]
 8013d98:	bf00      	nop
 8013d9a:	370c      	adds	r7, #12
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da2:	4770      	bx	lr

08013da4 <_Z41__static_initialization_and_destruction_0ii>:
 8013da4:	b580      	push	{r7, lr}
 8013da6:	b082      	sub	sp, #8
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	6078      	str	r0, [r7, #4]
 8013dac:	6039      	str	r1, [r7, #0]
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	2b01      	cmp	r3, #1
 8013db2:	d107      	bne.n	8013dc4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8013db4:	683b      	ldr	r3, [r7, #0]
 8013db6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013dba:	4293      	cmp	r3, r2
 8013dbc:	d102      	bne.n	8013dc4 <_Z41__static_initialization_and_destruction_0ii+0x20>
std::vector<TimingManager*> TimingManager::m_timers;
 8013dbe:	4809      	ldr	r0, [pc, #36]	@ (8013de4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8013dc0:	f7ff fe9f 	bl	8013b02 <_ZNSt6vectorIP13TimingManagerSaIS1_EEC1Ev>
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d107      	bne.n	8013dda <_Z41__static_initialization_and_destruction_0ii+0x36>
 8013dca:	683b      	ldr	r3, [r7, #0]
 8013dcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013dd0:	4293      	cmp	r3, r2
 8013dd2:	d102      	bne.n	8013dda <_Z41__static_initialization_and_destruction_0ii+0x36>
 8013dd4:	4803      	ldr	r0, [pc, #12]	@ (8013de4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8013dd6:	f000 f807 	bl	8013de8 <_ZNSt6vectorIP13TimingManagerSaIS1_EED1Ev>
}
 8013dda:	bf00      	nop
 8013ddc:	3708      	adds	r7, #8
 8013dde:	46bd      	mov	sp, r7
 8013de0:	bd80      	pop	{r7, pc}
 8013de2:	bf00      	nop
 8013de4:	2400368c 	.word	0x2400368c

08013de8 <_ZNSt6vectorIP13TimingManagerSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8013de8:	b5b0      	push	{r4, r5, r7, lr}
 8013dea:	b082      	sub	sp, #8
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	681c      	ldr	r4, [r3, #0]
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	f7ff ffa1 	bl	8013d42 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>
 8013e00:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8013e02:	461a      	mov	r2, r3
 8013e04:	4629      	mov	r1, r5
 8013e06:	4620      	mov	r0, r4
 8013e08:	f7ff ffa6 	bl	8013d58 <_ZSt8_DestroyIPP13TimingManagerS1_EvT_S3_RSaIT0_E>
      }
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	4618      	mov	r0, r3
 8013e10:	f7ff fefb 	bl	8013c0a <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EED1Ev>
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	4618      	mov	r0, r3
 8013e18:	3708      	adds	r7, #8
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	bdb0      	pop	{r4, r5, r7, pc}

08013e1e <_GLOBAL__sub_I__ZN13TimingManager8m_timersE>:
 8013e1e:	b580      	push	{r7, lr}
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8013e26:	2001      	movs	r0, #1
 8013e28:	f7ff ffbc 	bl	8013da4 <_Z41__static_initialization_and_destruction_0ii>
 8013e2c:	bd80      	pop	{r7, pc}

08013e2e <_GLOBAL__sub_D__ZN13TimingManager8m_timersE>:
 8013e2e:	b580      	push	{r7, lr}
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8013e36:	2000      	movs	r0, #0
 8013e38:	f7ff ffb4 	bl	8013da4 <_Z41__static_initialization_and_destruction_0ii>
 8013e3c:	bd80      	pop	{r7, pc}
	...

08013e40 <fp_rnds>:
 8013e40:	2800      	cmp	r0, #0
 8013e42:	db09      	blt.n	8013e58 <fp_rnds+0x18>
 8013e44:	b169      	cbz	r1, 8013e62 <fp_rnds+0x22>
 8013e46:	2920      	cmp	r1, #32
 8013e48:	d80a      	bhi.n	8013e60 <fp_rnds+0x20>
 8013e4a:	3901      	subs	r1, #1
 8013e4c:	40c8      	lsrs	r0, r1
 8013e4e:	f000 0301 	and.w	r3, r0, #1
 8013e52:	eb03 0050 	add.w	r0, r3, r0, lsr #1
 8013e56:	4770      	bx	lr
 8013e58:	4243      	negs	r3, r0
 8013e5a:	b111      	cbz	r1, 8013e62 <fp_rnds+0x22>
 8013e5c:	2920      	cmp	r1, #32
 8013e5e:	d901      	bls.n	8013e64 <fp_rnds+0x24>
 8013e60:	2000      	movs	r0, #0
 8013e62:	4770      	bx	lr
 8013e64:	3901      	subs	r1, #1
 8013e66:	fa23 f101 	lsr.w	r1, r3, r1
 8013e6a:	f001 0001 	and.w	r0, r1, #1
 8013e6e:	eb00 0051 	add.w	r0, r0, r1, lsr #1
 8013e72:	4240      	negs	r0, r0
 8013e74:	4770      	bx	lr
 8013e76:	bf00      	nop

08013e78 <InsertParityBits>:
 8013e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e7c:	2700      	movs	r7, #0
 8013e7e:	f04f 0901 	mov.w	r9, #1
 8013e82:	fa09 f407 	lsl.w	r4, r9, r7
 8013e86:	1e66      	subs	r6, r4, #1
 8013e88:	ea4f 08d6 	mov.w	r8, r6, lsr #3
 8013e8c:	f006 0607 	and.w	r6, r6, #7
 8013e90:	f810 5008 	ldrb.w	r5, [r0, r8]
 8013e94:	fa09 f206 	lsl.w	r2, r9, r6
 8013e98:	b2e3      	uxtb	r3, r4
 8013e9a:	ea25 0502 	bic.w	r5, r5, r2
 8013e9e:	f103 3cff 	add.w	ip, r3, #4294967295
 8013ea2:	f800 5008 	strb.w	r5, [r0, r8]
 8013ea6:	005b      	lsls	r3, r3, #1
 8013ea8:	fa5f fc8c 	uxtb.w	ip, ip
 8013eac:	fa5f fe83 	uxtb.w	lr, r3
 8013eb0:	f04f 0a00 	mov.w	sl, #0
 8013eb4:	eb04 010c 	add.w	r1, r4, ip
 8013eb8:	4561      	cmp	r1, ip
 8013eba:	46e3      	mov	fp, ip
 8013ebc:	bfc8      	it	gt
 8013ebe:	4662      	movgt	r2, ip
 8013ec0:	dd10      	ble.n	8013ee4 <InsertParityBits+0x6c>
 8013ec2:	f3c2 03c7 	ubfx	r3, r2, #3, #8
 8013ec6:	ebab 0bc3 	sub.w	fp, fp, r3, lsl #3
 8013eca:	5cc3      	ldrb	r3, [r0, r3]
 8013ecc:	3201      	adds	r2, #1
 8013ece:	fa43 f30b 	asr.w	r3, r3, fp
 8013ed2:	b2d2      	uxtb	r2, r2
 8013ed4:	f003 0301 	and.w	r3, r3, #1
 8013ed8:	4453      	add	r3, sl
 8013eda:	428a      	cmp	r2, r1
 8013edc:	fa5f fa83 	uxtb.w	sl, r3
 8013ee0:	4693      	mov	fp, r2
 8013ee2:	dbee      	blt.n	8013ec2 <InsertParityBits+0x4a>
 8013ee4:	44f4      	add	ip, lr
 8013ee6:	fa5f fc8c 	uxtb.w	ip, ip
 8013eea:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8013eee:	d9e1      	bls.n	8013eb4 <InsertParityBits+0x3c>
 8013ef0:	f00a 0301 	and.w	r3, sl, #1
 8013ef4:	fa03 f606 	lsl.w	r6, r3, r6
 8013ef8:	3701      	adds	r7, #1
 8013efa:	432e      	orrs	r6, r5
 8013efc:	2f07      	cmp	r7, #7
 8013efe:	f800 6008 	strb.w	r6, [r0, r8]
 8013f02:	d1be      	bne.n	8013e82 <InsertParityBits+0xa>
 8013f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013f08 <hamming_decode>:
 8013f08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013f0c:	4605      	mov	r5, r0
 8013f0e:	b085      	sub	sp, #20
 8013f10:	6800      	ldr	r0, [r0, #0]
 8013f12:	68aa      	ldr	r2, [r5, #8]
 8013f14:	68eb      	ldr	r3, [r5, #12]
 8013f16:	460c      	mov	r4, r1
 8013f18:	6869      	ldr	r1, [r5, #4]
 8013f1a:	466e      	mov	r6, sp
 8013f1c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013f1e:	4668      	mov	r0, sp
 8013f20:	f7ff ffaa 	bl	8013e78 <InsertParityBits>
 8013f24:	782a      	ldrb	r2, [r5, #0]
 8013f26:	f89d 3000 	ldrb.w	r3, [sp]
 8013f2a:	f002 0101 	and.w	r1, r2, #1
 8013f2e:	f003 0001 	and.w	r0, r3, #1
 8013f32:	1a40      	subs	r0, r0, r1
 8013f34:	f3c2 0640 	ubfx	r6, r2, #1, #1
 8013f38:	f3c3 0140 	ubfx	r1, r3, #1, #1
 8013f3c:	bf18      	it	ne
 8013f3e:	2001      	movne	r0, #1
 8013f40:	428e      	cmp	r6, r1
 8013f42:	f3c2 01c0 	ubfx	r1, r2, #3, #1
 8013f46:	f3c3 06c0 	ubfx	r6, r3, #3, #1
 8013f4a:	bf18      	it	ne
 8013f4c:	3002      	addne	r0, #2
 8013f4e:	42b1      	cmp	r1, r6
 8013f50:	bf18      	it	ne
 8013f52:	3004      	addne	r0, #4
 8013f54:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8013f58:	bf18      	it	ne
 8013f5a:	b2c0      	uxtbne	r0, r0
 8013f5c:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
 8013f60:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8013f64:	786a      	ldrb	r2, [r5, #1]
 8013f66:	bf18      	it	ne
 8013f68:	3008      	addne	r0, #8
 8013f6a:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8013f6e:	bf18      	it	ne
 8013f70:	b2c0      	uxtbne	r0, r0
 8013f72:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
 8013f76:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8013f7a:	78ea      	ldrb	r2, [r5, #3]
 8013f7c:	bf18      	it	ne
 8013f7e:	3010      	addne	r0, #16
 8013f80:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8013f84:	bf18      	it	ne
 8013f86:	b2c0      	uxtbne	r0, r0
 8013f88:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
 8013f8c:	d054      	beq.n	8014038 <hamming_decode+0x130>
 8013f8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013f92:	79ea      	ldrb	r2, [r5, #7]
 8013f94:	09db      	lsrs	r3, r3, #7
 8013f96:	3020      	adds	r0, #32
 8013f98:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
 8013f9c:	b2c0      	uxtb	r0, r0
 8013f9e:	d001      	beq.n	8013fa4 <hamming_decode+0x9c>
 8013fa0:	3040      	adds	r0, #64	@ 0x40
 8013fa2:	b2c0      	uxtb	r0, r0
 8013fa4:	1e42      	subs	r2, r0, #1
 8013fa6:	f3c2 03c4 	ubfx	r3, r2, #3, #5
 8013faa:	b2d1      	uxtb	r1, r2
 8013fac:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 8013fb0:	3310      	adds	r3, #16
 8013fb2:	446b      	add	r3, sp
 8013fb4:	08d6      	lsrs	r6, r2, #3
 8013fb6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8013fba:	410b      	asrs	r3, r1
 8013fbc:	f003 0301 	and.w	r3, r3, #1
 8013fc0:	f81d 1006 	ldrb.w	r1, [sp, r6]
 8013fc4:	f002 0207 	and.w	r2, r2, #7
 8013fc8:	f1c3 0301 	rsb	r3, r3, #1
 8013fcc:	2501      	movs	r5, #1
 8013fce:	4093      	lsls	r3, r2
 8013fd0:	fa05 f202 	lsl.w	r2, r5, r2
 8013fd4:	ea21 0202 	bic.w	r2, r1, r2
 8013fd8:	4313      	orrs	r3, r2
 8013fda:	f80d 3006 	strb.w	r3, [sp, r6]
 8013fde:	2201      	movs	r2, #1
 8013fe0:	2100      	movs	r1, #0
 8013fe2:	4616      	mov	r6, r2
 8013fe4:	fa5f fc82 	uxtb.w	ip, r2
 8013fe8:	ab04      	add	r3, sp, #16
 8013fea:	eb03 09dc 	add.w	r9, r3, ip, lsr #3
 8013fee:	f00c 03f8 	and.w	r3, ip, #248	@ 0xf8
 8013ff2:	eba2 0e03 	sub.w	lr, r2, r3
 8013ff6:	f10c 0301 	add.w	r3, ip, #1
 8013ffa:	f001 0707 	and.w	r7, r1, #7
 8013ffe:	ea1c 0f03 	tst.w	ip, r3
 8014002:	ea4f 05d1 	mov.w	r5, r1, lsr #3
 8014006:	f102 0201 	add.w	r2, r2, #1
 801400a:	fa06 f807 	lsl.w	r8, r6, r7
 801400e:	d00e      	beq.n	801402e <hamming_decode+0x126>
 8014010:	f819 3c10 	ldrb.w	r3, [r9, #-16]
 8014014:	f814 c005 	ldrb.w	ip, [r4, r5]
 8014018:	fa43 f30e 	asr.w	r3, r3, lr
 801401c:	f003 0301 	and.w	r3, r3, #1
 8014020:	40bb      	lsls	r3, r7
 8014022:	ea2c 0708 	bic.w	r7, ip, r8
 8014026:	433b      	orrs	r3, r7
 8014028:	3101      	adds	r1, #1
 801402a:	5563      	strb	r3, [r4, r5]
 801402c:	b2c9      	uxtb	r1, r1
 801402e:	2a7f      	cmp	r2, #127	@ 0x7f
 8014030:	d1d8      	bne.n	8013fe4 <hamming_decode+0xdc>
 8014032:	b005      	add	sp, #20
 8014034:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014038:	79eb      	ldrb	r3, [r5, #7]
 801403a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801403e:	09db      	lsrs	r3, r3, #7
 8014040:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
 8014044:	d1ac      	bne.n	8013fa0 <hamming_decode+0x98>
 8014046:	2800      	cmp	r0, #0
 8014048:	d0c9      	beq.n	8013fde <hamming_decode+0xd6>
 801404a:	e7ab      	b.n	8013fa4 <hamming_decode+0x9c>

0801404c <Time_GetNow>:
 801404c:	1d01      	adds	r1, r0, #4
 801404e:	f7f3 b8a3 	b.w	8007198 <Timer_GetCounterValue>
 8014052:	bf00      	nop

08014054 <Time_Now>:
 8014054:	b530      	push	{r4, r5, lr}
 8014056:	b083      	sub	sp, #12
 8014058:	466d      	mov	r5, sp
 801405a:	4604      	mov	r4, r0
 801405c:	a901      	add	r1, sp, #4
 801405e:	4628      	mov	r0, r5
 8014060:	f7f3 f89a 	bl	8007198 <Timer_GetCounterValue>
 8014064:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014068:	e884 0003 	stmia.w	r4, {r0, r1}
 801406c:	4620      	mov	r0, r4
 801406e:	b003      	add	sp, #12
 8014070:	bd30      	pop	{r4, r5, pc}
 8014072:	bf00      	nop

08014074 <Time_GetElapsedUSec>:
 8014074:	b510      	push	{r4, lr}
 8014076:	4604      	mov	r4, r0
 8014078:	b082      	sub	sp, #8
 801407a:	a901      	add	r1, sp, #4
 801407c:	4668      	mov	r0, sp
 801407e:	f7f3 f88b 	bl	8007198 <Timer_GetCounterValue>
 8014082:	9901      	ldr	r1, [sp, #4]
 8014084:	6863      	ldr	r3, [r4, #4]
 8014086:	9a00      	ldr	r2, [sp, #0]
 8014088:	428b      	cmp	r3, r1
 801408a:	d816      	bhi.n	80140ba <Time_GetElapsedUSec+0x46>
 801408c:	6820      	ldr	r0, [r4, #0]
 801408e:	1acb      	subs	r3, r1, r3
 8014090:	1a10      	subs	r0, r2, r0
 8014092:	f241 02c5 	movw	r2, #4293	@ 0x10c5
 8014096:	4290      	cmp	r0, r2
 8014098:	d90a      	bls.n	80140b0 <Time_GetElapsedUSec+0x3c>
 801409a:	f241 02c6 	movw	r2, #4294	@ 0x10c6
 801409e:	4290      	cmp	r0, r2
 80140a0:	d003      	beq.n	80140aa <Time_GetElapsedUSec+0x36>
 80140a2:	f04f 30ff 	mov.w	r0, #4294967295
 80140a6:	b002      	add	sp, #8
 80140a8:	bd10      	pop	{r4, pc}
 80140aa:	4a08      	ldr	r2, [pc, #32]	@ (80140cc <Time_GetElapsedUSec+0x58>)
 80140ac:	4293      	cmp	r3, r2
 80140ae:	d8f8      	bhi.n	80140a2 <Time_GetElapsedUSec+0x2e>
 80140b0:	4a07      	ldr	r2, [pc, #28]	@ (80140d0 <Time_GetElapsedUSec+0x5c>)
 80140b2:	fb02 3000 	mla	r0, r2, r0, r3
 80140b6:	b002      	add	sp, #8
 80140b8:	bd10      	pop	{r4, pc}
 80140ba:	6824      	ldr	r4, [r4, #0]
 80140bc:	f501 2174 	add.w	r1, r1, #999424	@ 0xf4000
 80140c0:	1e50      	subs	r0, r2, #1
 80140c2:	f501 7110 	add.w	r1, r1, #576	@ 0x240
 80140c6:	1b00      	subs	r0, r0, r4
 80140c8:	1acb      	subs	r3, r1, r3
 80140ca:	e7e2      	b.n	8014092 <Time_GetElapsedUSec+0x1e>
 80140cc:	000ec27e 	.word	0x000ec27e
 80140d0:	000f4240 	.word	0x000f4240

080140d4 <Time_CheckTimeoutMSec>:
 80140d4:	b570      	push	{r4, r5, r6, lr}
 80140d6:	b082      	sub	sp, #8
 80140d8:	4605      	mov	r5, r0
 80140da:	460c      	mov	r4, r1
 80140dc:	4668      	mov	r0, sp
 80140de:	a901      	add	r1, sp, #4
 80140e0:	f7f3 f85a 	bl	8007198 <Timer_GetCounterValue>
 80140e4:	4b21      	ldr	r3, [pc, #132]	@ (801416c <Time_CheckTimeoutMSec+0x98>)
 80140e6:	686a      	ldr	r2, [r5, #4]
 80140e8:	682e      	ldr	r6, [r5, #0]
 80140ea:	9d00      	ldr	r5, [sp, #0]
 80140ec:	fba3 1304 	umull	r1, r3, r3, r4
 80140f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80140f4:	0999      	lsrs	r1, r3, #6
 80140f6:	fb00 4111 	mls	r1, r0, r1, r4
 80140fa:	fb00 2101 	mla	r1, r0, r1, r2
 80140fe:	481c      	ldr	r0, [pc, #112]	@ (8014170 <Time_CheckTimeoutMSec+0x9c>)
 8014100:	9c01      	ldr	r4, [sp, #4]
 8014102:	4281      	cmp	r1, r0
 8014104:	eb06 1393 	add.w	r3, r6, r3, lsr #6
 8014108:	d904      	bls.n	8014114 <Time_CheckTimeoutMSec+0x40>
 801410a:	f5a1 2174 	sub.w	r1, r1, #999424	@ 0xf4000
 801410e:	3301      	adds	r3, #1
 8014110:	f5a1 7110 	sub.w	r1, r1, #576	@ 0x240
 8014114:	429e      	cmp	r6, r3
 8014116:	d015      	beq.n	8014144 <Time_CheckTimeoutMSec+0x70>
 8014118:	bf34      	ite	cc
 801411a:	2001      	movcc	r0, #1
 801411c:	2000      	movcs	r0, #0
 801411e:	b160      	cbz	r0, 801413a <Time_CheckTimeoutMSec+0x66>
 8014120:	42ae      	cmp	r6, r5
 8014122:	d017      	beq.n	8014154 <Time_CheckTimeoutMSec+0x80>
 8014124:	bf34      	ite	cc
 8014126:	2201      	movcc	r2, #1
 8014128:	2200      	movcs	r2, #0
 801412a:	b122      	cbz	r2, 8014136 <Time_CheckTimeoutMSec+0x62>
 801412c:	429d      	cmp	r5, r3
 801412e:	d016      	beq.n	801415e <Time_CheckTimeoutMSec+0x8a>
 8014130:	bf8c      	ite	hi
 8014132:	2001      	movhi	r0, #1
 8014134:	2000      	movls	r0, #0
 8014136:	b002      	add	sp, #8
 8014138:	bd70      	pop	{r4, r5, r6, pc}
 801413a:	42ae      	cmp	r6, r5
 801413c:	d007      	beq.n	801414e <Time_CheckTimeoutMSec+0x7a>
 801413e:	d2f5      	bcs.n	801412c <Time_CheckTimeoutMSec+0x58>
 8014140:	b002      	add	sp, #8
 8014142:	bd70      	pop	{r4, r5, r6, pc}
 8014144:	428a      	cmp	r2, r1
 8014146:	bf8c      	ite	hi
 8014148:	2000      	movhi	r0, #0
 801414a:	2001      	movls	r0, #1
 801414c:	e7e7      	b.n	801411e <Time_CheckTimeoutMSec+0x4a>
 801414e:	42a2      	cmp	r2, r4
 8014150:	d9f1      	bls.n	8014136 <Time_CheckTimeoutMSec+0x62>
 8014152:	e7eb      	b.n	801412c <Time_CheckTimeoutMSec+0x58>
 8014154:	42a2      	cmp	r2, r4
 8014156:	bf8c      	ite	hi
 8014158:	2200      	movhi	r2, #0
 801415a:	2201      	movls	r2, #1
 801415c:	e7e5      	b.n	801412a <Time_CheckTimeoutMSec+0x56>
 801415e:	428c      	cmp	r4, r1
 8014160:	bf34      	ite	cc
 8014162:	2000      	movcc	r0, #0
 8014164:	2001      	movcs	r0, #1
 8014166:	b002      	add	sp, #8
 8014168:	bd70      	pop	{r4, r5, r6, pc}
 801416a:	bf00      	nop
 801416c:	10624dd3 	.word	0x10624dd3
 8014170:	000f423f 	.word	0x000f423f

08014174 <Time_DelayUSec>:
 8014174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014176:	b083      	sub	sp, #12
 8014178:	4604      	mov	r4, r0
 801417a:	a901      	add	r1, sp, #4
 801417c:	4668      	mov	r0, sp
 801417e:	f7f3 f80b 	bl	8007198 <Timer_GetCounterValue>
 8014182:	4b28      	ldr	r3, [pc, #160]	@ (8014224 <Time_DelayUSec+0xb0>)
 8014184:	9e00      	ldr	r6, [sp, #0]
 8014186:	9f01      	ldr	r7, [sp, #4]
 8014188:	fba3 2304 	umull	r2, r3, r3, r4
 801418c:	4a26      	ldr	r2, [pc, #152]	@ (8014228 <Time_DelayUSec+0xb4>)
 801418e:	0c98      	lsrs	r0, r3, #18
 8014190:	fb02 4010 	mls	r0, r2, r0, r4
 8014194:	eb06 4493 	add.w	r4, r6, r3, lsr #18
 8014198:	4b24      	ldr	r3, [pc, #144]	@ (801422c <Time_DelayUSec+0xb8>)
 801419a:	4438      	add	r0, r7
 801419c:	4298      	cmp	r0, r3
 801419e:	f5a0 2574 	sub.w	r5, r0, #999424	@ 0xf4000
 80141a2:	f104 0301 	add.w	r3, r4, #1
 80141a6:	f5a5 7510 	sub.w	r5, r5, #576	@ 0x240
 80141aa:	bf94      	ite	ls
 80141ac:	4605      	movls	r5, r0
 80141ae:	461c      	movhi	r4, r3
 80141b0:	42af      	cmp	r7, r5
 80141b2:	bf8c      	ite	hi
 80141b4:	2300      	movhi	r3, #0
 80141b6:	2301      	movls	r3, #1
 80141b8:	42b4      	cmp	r4, r6
 80141ba:	bf8c      	ite	hi
 80141bc:	2201      	movhi	r2, #1
 80141be:	2200      	movls	r2, #0
 80141c0:	bf18      	it	ne
 80141c2:	4613      	movne	r3, r2
 80141c4:	b9a3      	cbnz	r3, 80141f0 <Time_DelayUSec+0x7c>
 80141c6:	a901      	add	r1, sp, #4
 80141c8:	4668      	mov	r0, sp
 80141ca:	f7f2 ffe5 	bl	8007198 <Timer_GetCounterValue>
 80141ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 80141d2:	42b3      	cmp	r3, r6
 80141d4:	d017      	beq.n	8014206 <Time_DelayUSec+0x92>
 80141d6:	d8f6      	bhi.n	80141c6 <Time_DelayUSec+0x52>
 80141d8:	42a3      	cmp	r3, r4
 80141da:	d018      	beq.n	801420e <Time_DelayUSec+0x9a>
 80141dc:	d811      	bhi.n	8014202 <Time_DelayUSec+0x8e>
 80141de:	e7f2      	b.n	80141c6 <Time_DelayUSec+0x52>
 80141e0:	42bb      	cmp	r3, r7
 80141e2:	d30e      	bcc.n	8014202 <Time_DelayUSec+0x8e>
 80141e4:	4294      	cmp	r4, r2
 80141e6:	d016      	beq.n	8014216 <Time_DelayUSec+0xa2>
 80141e8:	bf34      	ite	cc
 80141ea:	2301      	movcc	r3, #1
 80141ec:	2300      	movcs	r3, #0
 80141ee:	b943      	cbnz	r3, 8014202 <Time_DelayUSec+0x8e>
 80141f0:	a901      	add	r1, sp, #4
 80141f2:	4668      	mov	r0, sp
 80141f4:	f7f2 ffd0 	bl	8007198 <Timer_GetCounterValue>
 80141f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80141fc:	42b2      	cmp	r2, r6
 80141fe:	d0ef      	beq.n	80141e0 <Time_DelayUSec+0x6c>
 8014200:	d8f0      	bhi.n	80141e4 <Time_DelayUSec+0x70>
 8014202:	b003      	add	sp, #12
 8014204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014206:	4297      	cmp	r7, r2
 8014208:	d9dd      	bls.n	80141c6 <Time_DelayUSec+0x52>
 801420a:	42a3      	cmp	r3, r4
 801420c:	d1e6      	bne.n	80141dc <Time_DelayUSec+0x68>
 801420e:	42aa      	cmp	r2, r5
 8014210:	d3d9      	bcc.n	80141c6 <Time_DelayUSec+0x52>
 8014212:	b003      	add	sp, #12
 8014214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014216:	42ab      	cmp	r3, r5
 8014218:	bf34      	ite	cc
 801421a:	2300      	movcc	r3, #0
 801421c:	2301      	movcs	r3, #1
 801421e:	2b00      	cmp	r3, #0
 8014220:	d0e6      	beq.n	80141f0 <Time_DelayUSec+0x7c>
 8014222:	e7ee      	b.n	8014202 <Time_DelayUSec+0x8e>
 8014224:	431bde83 	.word	0x431bde83
 8014228:	000f4240 	.word	0x000f4240
 801422c:	000f423f 	.word	0x000f423f

08014230 <Time_DelayMSec>:
 8014230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014232:	b083      	sub	sp, #12
 8014234:	4604      	mov	r4, r0
 8014236:	a901      	add	r1, sp, #4
 8014238:	4668      	mov	r0, sp
 801423a:	f7f2 ffad 	bl	8007198 <Timer_GetCounterValue>
 801423e:	4b29      	ldr	r3, [pc, #164]	@ (80142e4 <Time_DelayMSec+0xb4>)
 8014240:	9e00      	ldr	r6, [sp, #0]
 8014242:	9f01      	ldr	r7, [sp, #4]
 8014244:	fba3 2304 	umull	r2, r3, r3, r4
 8014248:	0998      	lsrs	r0, r3, #6
 801424a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801424e:	fb02 4010 	mls	r0, r2, r0, r4
 8014252:	eb06 1493 	add.w	r4, r6, r3, lsr #6
 8014256:	4b24      	ldr	r3, [pc, #144]	@ (80142e8 <Time_DelayMSec+0xb8>)
 8014258:	fb02 7000 	mla	r0, r2, r0, r7
 801425c:	4298      	cmp	r0, r3
 801425e:	f5a0 2574 	sub.w	r5, r0, #999424	@ 0xf4000
 8014262:	f104 0301 	add.w	r3, r4, #1
 8014266:	f5a5 7510 	sub.w	r5, r5, #576	@ 0x240
 801426a:	bf94      	ite	ls
 801426c:	4605      	movls	r5, r0
 801426e:	461c      	movhi	r4, r3
 8014270:	42af      	cmp	r7, r5
 8014272:	bf8c      	ite	hi
 8014274:	2300      	movhi	r3, #0
 8014276:	2301      	movls	r3, #1
 8014278:	42b4      	cmp	r4, r6
 801427a:	bf8c      	ite	hi
 801427c:	2201      	movhi	r2, #1
 801427e:	2200      	movls	r2, #0
 8014280:	bf18      	it	ne
 8014282:	4613      	movne	r3, r2
 8014284:	b9a3      	cbnz	r3, 80142b0 <Time_DelayMSec+0x80>
 8014286:	a901      	add	r1, sp, #4
 8014288:	4668      	mov	r0, sp
 801428a:	f7f2 ff85 	bl	8007198 <Timer_GetCounterValue>
 801428e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014292:	42b3      	cmp	r3, r6
 8014294:	d017      	beq.n	80142c6 <Time_DelayMSec+0x96>
 8014296:	d8f6      	bhi.n	8014286 <Time_DelayMSec+0x56>
 8014298:	42a3      	cmp	r3, r4
 801429a:	d018      	beq.n	80142ce <Time_DelayMSec+0x9e>
 801429c:	d811      	bhi.n	80142c2 <Time_DelayMSec+0x92>
 801429e:	e7f2      	b.n	8014286 <Time_DelayMSec+0x56>
 80142a0:	42bb      	cmp	r3, r7
 80142a2:	d30e      	bcc.n	80142c2 <Time_DelayMSec+0x92>
 80142a4:	4294      	cmp	r4, r2
 80142a6:	d016      	beq.n	80142d6 <Time_DelayMSec+0xa6>
 80142a8:	bf34      	ite	cc
 80142aa:	2301      	movcc	r3, #1
 80142ac:	2300      	movcs	r3, #0
 80142ae:	b943      	cbnz	r3, 80142c2 <Time_DelayMSec+0x92>
 80142b0:	a901      	add	r1, sp, #4
 80142b2:	4668      	mov	r0, sp
 80142b4:	f7f2 ff70 	bl	8007198 <Timer_GetCounterValue>
 80142b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80142bc:	42b2      	cmp	r2, r6
 80142be:	d0ef      	beq.n	80142a0 <Time_DelayMSec+0x70>
 80142c0:	d8f0      	bhi.n	80142a4 <Time_DelayMSec+0x74>
 80142c2:	b003      	add	sp, #12
 80142c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142c6:	4297      	cmp	r7, r2
 80142c8:	d9dd      	bls.n	8014286 <Time_DelayMSec+0x56>
 80142ca:	42a3      	cmp	r3, r4
 80142cc:	d1e6      	bne.n	801429c <Time_DelayMSec+0x6c>
 80142ce:	42aa      	cmp	r2, r5
 80142d0:	d3d9      	bcc.n	8014286 <Time_DelayMSec+0x56>
 80142d2:	b003      	add	sp, #12
 80142d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142d6:	42ab      	cmp	r3, r5
 80142d8:	bf34      	ite	cc
 80142da:	2300      	movcc	r3, #0
 80142dc:	2301      	movcs	r3, #1
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d0e6      	beq.n	80142b0 <Time_DelayMSec+0x80>
 80142e2:	e7ee      	b.n	80142c2 <Time_DelayMSec+0x92>
 80142e4:	10624dd3 	.word	0x10624dd3
 80142e8:	000f423f 	.word	0x000f423f

080142ec <eeprom_place_command>:
 80142ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142ee:	b083      	sub	sp, #12
 80142f0:	2500      	movs	r5, #0
 80142f2:	460e      	mov	r6, r1
 80142f4:	4617      	mov	r7, r2
 80142f6:	2102      	movs	r1, #2
 80142f8:	2201      	movs	r2, #1
 80142fa:	4604      	mov	r4, r0
 80142fc:	9501      	str	r5, [sp, #4]
 80142fe:	f7f2 fccd 	bl	8006c9c <S2PI_WriteGpioPin>
 8014302:	2800      	cmp	r0, #0
 8014304:	f2c0 80f1 	blt.w	80144ea <eeprom_place_command+0x1fe>
 8014308:	2201      	movs	r2, #1
 801430a:	4629      	mov	r1, r5
 801430c:	4620      	mov	r0, r4
 801430e:	f7f2 fcc5 	bl	8006c9c <S2PI_WriteGpioPin>
 8014312:	2800      	cmp	r0, #0
 8014314:	f2c0 80e9 	blt.w	80144ea <eeprom_place_command+0x1fe>
 8014318:	aa01      	add	r2, sp, #4
 801431a:	2103      	movs	r1, #3
 801431c:	4620      	mov	r0, r4
 801431e:	f7f2 fd09 	bl	8006d34 <S2PI_ReadGpioPin>
 8014322:	2800      	cmp	r0, #0
 8014324:	f2c0 80e1 	blt.w	80144ea <eeprom_place_command+0x1fe>
 8014328:	462a      	mov	r2, r5
 801432a:	4629      	mov	r1, r5
 801432c:	4620      	mov	r0, r4
 801432e:	f7f2 fcb5 	bl	8006c9c <S2PI_WriteGpioPin>
 8014332:	2800      	cmp	r0, #0
 8014334:	f2c0 80d9 	blt.w	80144ea <eeprom_place_command+0x1fe>
 8014338:	4632      	mov	r2, r6
 801433a:	2102      	movs	r1, #2
 801433c:	4620      	mov	r0, r4
 801433e:	f7f2 fcad 	bl	8006c9c <S2PI_WriteGpioPin>
 8014342:	2800      	cmp	r0, #0
 8014344:	f2c0 80d1 	blt.w	80144ea <eeprom_place_command+0x1fe>
 8014348:	2201      	movs	r2, #1
 801434a:	4629      	mov	r1, r5
 801434c:	4620      	mov	r0, r4
 801434e:	f7f2 fca5 	bl	8006c9c <S2PI_WriteGpioPin>
 8014352:	2800      	cmp	r0, #0
 8014354:	f2c0 80c9 	blt.w	80144ea <eeprom_place_command+0x1fe>
 8014358:	aa01      	add	r2, sp, #4
 801435a:	2103      	movs	r1, #3
 801435c:	4620      	mov	r0, r4
 801435e:	f7f2 fce9 	bl	8006d34 <S2PI_ReadGpioPin>
 8014362:	2800      	cmp	r0, #0
 8014364:	f2c0 80c1 	blt.w	80144ea <eeprom_place_command+0x1fe>
 8014368:	462a      	mov	r2, r5
 801436a:	4629      	mov	r1, r5
 801436c:	4620      	mov	r0, r4
 801436e:	f7f2 fc95 	bl	8006c9c <S2PI_WriteGpioPin>
 8014372:	2800      	cmp	r0, #0
 8014374:	f2c0 80b9 	blt.w	80144ea <eeprom_place_command+0x1fe>
 8014378:	9b01      	ldr	r3, [sp, #4]
 801437a:	2b01      	cmp	r3, #1
 801437c:	f040 80b7 	bne.w	80144ee <eeprom_place_command+0x202>
 8014380:	f086 0501 	eor.w	r5, r6, #1
 8014384:	462a      	mov	r2, r5
 8014386:	2102      	movs	r1, #2
 8014388:	4620      	mov	r0, r4
 801438a:	f7f2 fc87 	bl	8006c9c <S2PI_WriteGpioPin>
 801438e:	2800      	cmp	r0, #0
 8014390:	f2c0 80ab 	blt.w	80144ea <eeprom_place_command+0x1fe>
 8014394:	2201      	movs	r2, #1
 8014396:	2100      	movs	r1, #0
 8014398:	4620      	mov	r0, r4
 801439a:	f7f2 fc7f 	bl	8006c9c <S2PI_WriteGpioPin>
 801439e:	2800      	cmp	r0, #0
 80143a0:	f2c0 80a3 	blt.w	80144ea <eeprom_place_command+0x1fe>
 80143a4:	aa01      	add	r2, sp, #4
 80143a6:	2103      	movs	r1, #3
 80143a8:	4620      	mov	r0, r4
 80143aa:	f7f2 fcc3 	bl	8006d34 <S2PI_ReadGpioPin>
 80143ae:	2800      	cmp	r0, #0
 80143b0:	f2c0 809b 	blt.w	80144ea <eeprom_place_command+0x1fe>
 80143b4:	2200      	movs	r2, #0
 80143b6:	4611      	mov	r1, r2
 80143b8:	4620      	mov	r0, r4
 80143ba:	f7f2 fc6f 	bl	8006c9c <S2PI_WriteGpioPin>
 80143be:	2800      	cmp	r0, #0
 80143c0:	f2c0 8093 	blt.w	80144ea <eeprom_place_command+0x1fe>
 80143c4:	9b01      	ldr	r3, [sp, #4]
 80143c6:	429e      	cmp	r6, r3
 80143c8:	f040 8091 	bne.w	80144ee <eeprom_place_command+0x202>
 80143cc:	08fe      	lsrs	r6, r7, #3
 80143ce:	4632      	mov	r2, r6
 80143d0:	2102      	movs	r1, #2
 80143d2:	4620      	mov	r0, r4
 80143d4:	f7f2 fc62 	bl	8006c9c <S2PI_WriteGpioPin>
 80143d8:	2800      	cmp	r0, #0
 80143da:	f2c0 8086 	blt.w	80144ea <eeprom_place_command+0x1fe>
 80143de:	2201      	movs	r2, #1
 80143e0:	2100      	movs	r1, #0
 80143e2:	4620      	mov	r0, r4
 80143e4:	f7f2 fc5a 	bl	8006c9c <S2PI_WriteGpioPin>
 80143e8:	2800      	cmp	r0, #0
 80143ea:	db7e      	blt.n	80144ea <eeprom_place_command+0x1fe>
 80143ec:	aa01      	add	r2, sp, #4
 80143ee:	2103      	movs	r1, #3
 80143f0:	4620      	mov	r0, r4
 80143f2:	f7f2 fc9f 	bl	8006d34 <S2PI_ReadGpioPin>
 80143f6:	2800      	cmp	r0, #0
 80143f8:	db77      	blt.n	80144ea <eeprom_place_command+0x1fe>
 80143fa:	2200      	movs	r2, #0
 80143fc:	4611      	mov	r1, r2
 80143fe:	4620      	mov	r0, r4
 8014400:	f7f2 fc4c 	bl	8006c9c <S2PI_WriteGpioPin>
 8014404:	2800      	cmp	r0, #0
 8014406:	db70      	blt.n	80144ea <eeprom_place_command+0x1fe>
 8014408:	9b01      	ldr	r3, [sp, #4]
 801440a:	429d      	cmp	r5, r3
 801440c:	d16f      	bne.n	80144ee <eeprom_place_command+0x202>
 801440e:	f3c7 0580 	ubfx	r5, r7, #2, #1
 8014412:	462a      	mov	r2, r5
 8014414:	2102      	movs	r1, #2
 8014416:	4620      	mov	r0, r4
 8014418:	f7f2 fc40 	bl	8006c9c <S2PI_WriteGpioPin>
 801441c:	2800      	cmp	r0, #0
 801441e:	db64      	blt.n	80144ea <eeprom_place_command+0x1fe>
 8014420:	2201      	movs	r2, #1
 8014422:	2100      	movs	r1, #0
 8014424:	4620      	mov	r0, r4
 8014426:	f7f2 fc39 	bl	8006c9c <S2PI_WriteGpioPin>
 801442a:	2800      	cmp	r0, #0
 801442c:	db5d      	blt.n	80144ea <eeprom_place_command+0x1fe>
 801442e:	aa01      	add	r2, sp, #4
 8014430:	2103      	movs	r1, #3
 8014432:	4620      	mov	r0, r4
 8014434:	f7f2 fc7e 	bl	8006d34 <S2PI_ReadGpioPin>
 8014438:	2800      	cmp	r0, #0
 801443a:	db56      	blt.n	80144ea <eeprom_place_command+0x1fe>
 801443c:	2200      	movs	r2, #0
 801443e:	4611      	mov	r1, r2
 8014440:	4620      	mov	r0, r4
 8014442:	f7f2 fc2b 	bl	8006c9c <S2PI_WriteGpioPin>
 8014446:	2800      	cmp	r0, #0
 8014448:	db4f      	blt.n	80144ea <eeprom_place_command+0x1fe>
 801444a:	9b01      	ldr	r3, [sp, #4]
 801444c:	429e      	cmp	r6, r3
 801444e:	d14e      	bne.n	80144ee <eeprom_place_command+0x202>
 8014450:	f3c7 0640 	ubfx	r6, r7, #1, #1
 8014454:	4632      	mov	r2, r6
 8014456:	2102      	movs	r1, #2
 8014458:	4620      	mov	r0, r4
 801445a:	f7f2 fc1f 	bl	8006c9c <S2PI_WriteGpioPin>
 801445e:	2800      	cmp	r0, #0
 8014460:	db43      	blt.n	80144ea <eeprom_place_command+0x1fe>
 8014462:	2201      	movs	r2, #1
 8014464:	2100      	movs	r1, #0
 8014466:	4620      	mov	r0, r4
 8014468:	f7f2 fc18 	bl	8006c9c <S2PI_WriteGpioPin>
 801446c:	2800      	cmp	r0, #0
 801446e:	db3c      	blt.n	80144ea <eeprom_place_command+0x1fe>
 8014470:	aa01      	add	r2, sp, #4
 8014472:	2103      	movs	r1, #3
 8014474:	4620      	mov	r0, r4
 8014476:	f7f2 fc5d 	bl	8006d34 <S2PI_ReadGpioPin>
 801447a:	2800      	cmp	r0, #0
 801447c:	db35      	blt.n	80144ea <eeprom_place_command+0x1fe>
 801447e:	2200      	movs	r2, #0
 8014480:	4611      	mov	r1, r2
 8014482:	4620      	mov	r0, r4
 8014484:	f7f2 fc0a 	bl	8006c9c <S2PI_WriteGpioPin>
 8014488:	2800      	cmp	r0, #0
 801448a:	db2e      	blt.n	80144ea <eeprom_place_command+0x1fe>
 801448c:	9b01      	ldr	r3, [sp, #4]
 801448e:	429d      	cmp	r5, r3
 8014490:	d12d      	bne.n	80144ee <eeprom_place_command+0x202>
 8014492:	f007 0201 	and.w	r2, r7, #1
 8014496:	2102      	movs	r1, #2
 8014498:	4620      	mov	r0, r4
 801449a:	f7f2 fbff 	bl	8006c9c <S2PI_WriteGpioPin>
 801449e:	2800      	cmp	r0, #0
 80144a0:	db23      	blt.n	80144ea <eeprom_place_command+0x1fe>
 80144a2:	2201      	movs	r2, #1
 80144a4:	2100      	movs	r1, #0
 80144a6:	4620      	mov	r0, r4
 80144a8:	f7f2 fbf8 	bl	8006c9c <S2PI_WriteGpioPin>
 80144ac:	2800      	cmp	r0, #0
 80144ae:	db1c      	blt.n	80144ea <eeprom_place_command+0x1fe>
 80144b0:	aa01      	add	r2, sp, #4
 80144b2:	2103      	movs	r1, #3
 80144b4:	4620      	mov	r0, r4
 80144b6:	f7f2 fc3d 	bl	8006d34 <S2PI_ReadGpioPin>
 80144ba:	2800      	cmp	r0, #0
 80144bc:	db15      	blt.n	80144ea <eeprom_place_command+0x1fe>
 80144be:	2200      	movs	r2, #0
 80144c0:	4611      	mov	r1, r2
 80144c2:	4620      	mov	r0, r4
 80144c4:	f7f2 fbea 	bl	8006c9c <S2PI_WriteGpioPin>
 80144c8:	2800      	cmp	r0, #0
 80144ca:	db0e      	blt.n	80144ea <eeprom_place_command+0x1fe>
 80144cc:	9b01      	ldr	r3, [sp, #4]
 80144ce:	429e      	cmp	r6, r3
 80144d0:	d10d      	bne.n	80144ee <eeprom_place_command+0x202>
 80144d2:	2201      	movs	r2, #1
 80144d4:	4611      	mov	r1, r2
 80144d6:	4620      	mov	r0, r4
 80144d8:	f7f2 fbe0 	bl	8006c9c <S2PI_WriteGpioPin>
 80144dc:	2800      	cmp	r0, #0
 80144de:	db04      	blt.n	80144ea <eeprom_place_command+0x1fe>
 80144e0:	2201      	movs	r2, #1
 80144e2:	2100      	movs	r1, #0
 80144e4:	4620      	mov	r0, r4
 80144e6:	f7f2 fbd9 	bl	8006c9c <S2PI_WriteGpioPin>
 80144ea:	b003      	add	sp, #12
 80144ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144ee:	f06f 006c 	mvn.w	r0, #108	@ 0x6c
 80144f2:	e7fa      	b.n	80144ea <eeprom_place_command+0x1fe>

080144f4 <eeprom_write_ce>:
 80144f4:	b570      	push	{r4, r5, r6, lr}
 80144f6:	4616      	mov	r6, r2
 80144f8:	460d      	mov	r5, r1
 80144fa:	2200      	movs	r2, #0
 80144fc:	2101      	movs	r1, #1
 80144fe:	4604      	mov	r4, r0
 8014500:	f7f2 fbcc 	bl	8006c9c <S2PI_WriteGpioPin>
 8014504:	2800      	cmp	r0, #0
 8014506:	f2c0 80be 	blt.w	8014686 <eeprom_write_ce+0x192>
 801450a:	2200      	movs	r2, #0
 801450c:	2102      	movs	r1, #2
 801450e:	4620      	mov	r0, r4
 8014510:	f7f2 fbc4 	bl	8006c9c <S2PI_WriteGpioPin>
 8014514:	2800      	cmp	r0, #0
 8014516:	f2c0 80b6 	blt.w	8014686 <eeprom_write_ce+0x192>
 801451a:	2200      	movs	r2, #0
 801451c:	4611      	mov	r1, r2
 801451e:	4620      	mov	r0, r4
 8014520:	f7f2 fbbc 	bl	8006c9c <S2PI_WriteGpioPin>
 8014524:	2800      	cmp	r0, #0
 8014526:	f2c0 80ae 	blt.w	8014686 <eeprom_write_ce+0x192>
 801452a:	2201      	movs	r2, #1
 801452c:	2100      	movs	r1, #0
 801452e:	4620      	mov	r0, r4
 8014530:	f7f2 fbb4 	bl	8006c9c <S2PI_WriteGpioPin>
 8014534:	2800      	cmp	r0, #0
 8014536:	f2c0 80a6 	blt.w	8014686 <eeprom_write_ce+0x192>
 801453a:	2200      	movs	r2, #0
 801453c:	2102      	movs	r1, #2
 801453e:	4620      	mov	r0, r4
 8014540:	f7f2 fbac 	bl	8006c9c <S2PI_WriteGpioPin>
 8014544:	2800      	cmp	r0, #0
 8014546:	f2c0 809e 	blt.w	8014686 <eeprom_write_ce+0x192>
 801454a:	2200      	movs	r2, #0
 801454c:	4611      	mov	r1, r2
 801454e:	4620      	mov	r0, r4
 8014550:	f7f2 fba4 	bl	8006c9c <S2PI_WriteGpioPin>
 8014554:	2800      	cmp	r0, #0
 8014556:	f2c0 8096 	blt.w	8014686 <eeprom_write_ce+0x192>
 801455a:	2201      	movs	r2, #1
 801455c:	2100      	movs	r1, #0
 801455e:	4620      	mov	r0, r4
 8014560:	f7f2 fb9c 	bl	8006c9c <S2PI_WriteGpioPin>
 8014564:	2800      	cmp	r0, #0
 8014566:	f2c0 808e 	blt.w	8014686 <eeprom_write_ce+0x192>
 801456a:	2201      	movs	r2, #1
 801456c:	2102      	movs	r1, #2
 801456e:	4620      	mov	r0, r4
 8014570:	f7f2 fb94 	bl	8006c9c <S2PI_WriteGpioPin>
 8014574:	2800      	cmp	r0, #0
 8014576:	f2c0 8086 	blt.w	8014686 <eeprom_write_ce+0x192>
 801457a:	2200      	movs	r2, #0
 801457c:	4611      	mov	r1, r2
 801457e:	4620      	mov	r0, r4
 8014580:	f7f2 fb8c 	bl	8006c9c <S2PI_WriteGpioPin>
 8014584:	2800      	cmp	r0, #0
 8014586:	db7e      	blt.n	8014686 <eeprom_write_ce+0x192>
 8014588:	2201      	movs	r2, #1
 801458a:	2100      	movs	r1, #0
 801458c:	4620      	mov	r0, r4
 801458e:	f7f2 fb85 	bl	8006c9c <S2PI_WriteGpioPin>
 8014592:	2800      	cmp	r0, #0
 8014594:	db77      	blt.n	8014686 <eeprom_write_ce+0x192>
 8014596:	2200      	movs	r2, #0
 8014598:	2102      	movs	r1, #2
 801459a:	4620      	mov	r0, r4
 801459c:	f7f2 fb7e 	bl	8006c9c <S2PI_WriteGpioPin>
 80145a0:	2800      	cmp	r0, #0
 80145a2:	db70      	blt.n	8014686 <eeprom_write_ce+0x192>
 80145a4:	2200      	movs	r2, #0
 80145a6:	4611      	mov	r1, r2
 80145a8:	4620      	mov	r0, r4
 80145aa:	f7f2 fb77 	bl	8006c9c <S2PI_WriteGpioPin>
 80145ae:	2800      	cmp	r0, #0
 80145b0:	db69      	blt.n	8014686 <eeprom_write_ce+0x192>
 80145b2:	2201      	movs	r2, #1
 80145b4:	2100      	movs	r1, #0
 80145b6:	4620      	mov	r0, r4
 80145b8:	f7f2 fb70 	bl	8006c9c <S2PI_WriteGpioPin>
 80145bc:	2800      	cmp	r0, #0
 80145be:	db62      	blt.n	8014686 <eeprom_write_ce+0x192>
 80145c0:	2201      	movs	r2, #1
 80145c2:	2102      	movs	r1, #2
 80145c4:	4620      	mov	r0, r4
 80145c6:	f7f2 fb69 	bl	8006c9c <S2PI_WriteGpioPin>
 80145ca:	2800      	cmp	r0, #0
 80145cc:	db5b      	blt.n	8014686 <eeprom_write_ce+0x192>
 80145ce:	2200      	movs	r2, #0
 80145d0:	4611      	mov	r1, r2
 80145d2:	4620      	mov	r0, r4
 80145d4:	f7f2 fb62 	bl	8006c9c <S2PI_WriteGpioPin>
 80145d8:	2800      	cmp	r0, #0
 80145da:	db54      	blt.n	8014686 <eeprom_write_ce+0x192>
 80145dc:	2201      	movs	r2, #1
 80145de:	2100      	movs	r1, #0
 80145e0:	4620      	mov	r0, r4
 80145e2:	f7f2 fb5b 	bl	8006c9c <S2PI_WriteGpioPin>
 80145e6:	2800      	cmp	r0, #0
 80145e8:	db4d      	blt.n	8014686 <eeprom_write_ce+0x192>
 80145ea:	2201      	movs	r2, #1
 80145ec:	2102      	movs	r1, #2
 80145ee:	4620      	mov	r0, r4
 80145f0:	f7f2 fb54 	bl	8006c9c <S2PI_WriteGpioPin>
 80145f4:	2800      	cmp	r0, #0
 80145f6:	db46      	blt.n	8014686 <eeprom_write_ce+0x192>
 80145f8:	2200      	movs	r2, #0
 80145fa:	4611      	mov	r1, r2
 80145fc:	4620      	mov	r0, r4
 80145fe:	f7f2 fb4d 	bl	8006c9c <S2PI_WriteGpioPin>
 8014602:	2800      	cmp	r0, #0
 8014604:	db3f      	blt.n	8014686 <eeprom_write_ce+0x192>
 8014606:	2201      	movs	r2, #1
 8014608:	2100      	movs	r1, #0
 801460a:	4620      	mov	r0, r4
 801460c:	f7f2 fb46 	bl	8006c9c <S2PI_WriteGpioPin>
 8014610:	2800      	cmp	r0, #0
 8014612:	db38      	blt.n	8014686 <eeprom_write_ce+0x192>
 8014614:	f085 0201 	eor.w	r2, r5, #1
 8014618:	2102      	movs	r1, #2
 801461a:	4620      	mov	r0, r4
 801461c:	f7f2 fb3e 	bl	8006c9c <S2PI_WriteGpioPin>
 8014620:	2800      	cmp	r0, #0
 8014622:	db30      	blt.n	8014686 <eeprom_write_ce+0x192>
 8014624:	2200      	movs	r2, #0
 8014626:	4611      	mov	r1, r2
 8014628:	4620      	mov	r0, r4
 801462a:	f7f2 fb37 	bl	8006c9c <S2PI_WriteGpioPin>
 801462e:	2800      	cmp	r0, #0
 8014630:	db29      	blt.n	8014686 <eeprom_write_ce+0x192>
 8014632:	2201      	movs	r2, #1
 8014634:	2100      	movs	r1, #0
 8014636:	4620      	mov	r0, r4
 8014638:	f7f2 fb30 	bl	8006c9c <S2PI_WriteGpioPin>
 801463c:	2800      	cmp	r0, #0
 801463e:	db22      	blt.n	8014686 <eeprom_write_ce+0x192>
 8014640:	4632      	mov	r2, r6
 8014642:	2102      	movs	r1, #2
 8014644:	4620      	mov	r0, r4
 8014646:	f7f2 fb29 	bl	8006c9c <S2PI_WriteGpioPin>
 801464a:	2800      	cmp	r0, #0
 801464c:	db1b      	blt.n	8014686 <eeprom_write_ce+0x192>
 801464e:	2200      	movs	r2, #0
 8014650:	4611      	mov	r1, r2
 8014652:	4620      	mov	r0, r4
 8014654:	f7f2 fb22 	bl	8006c9c <S2PI_WriteGpioPin>
 8014658:	2800      	cmp	r0, #0
 801465a:	db14      	blt.n	8014686 <eeprom_write_ce+0x192>
 801465c:	2201      	movs	r2, #1
 801465e:	2100      	movs	r1, #0
 8014660:	4620      	mov	r0, r4
 8014662:	f7f2 fb1b 	bl	8006c9c <S2PI_WriteGpioPin>
 8014666:	2800      	cmp	r0, #0
 8014668:	db0d      	blt.n	8014686 <eeprom_write_ce+0x192>
 801466a:	2200      	movs	r2, #0
 801466c:	2102      	movs	r1, #2
 801466e:	4620      	mov	r0, r4
 8014670:	f7f2 fb14 	bl	8006c9c <S2PI_WriteGpioPin>
 8014674:	2800      	cmp	r0, #0
 8014676:	db06      	blt.n	8014686 <eeprom_write_ce+0x192>
 8014678:	2200      	movs	r2, #0
 801467a:	4620      	mov	r0, r4
 801467c:	4611      	mov	r1, r2
 801467e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014682:	f7f2 bb0b 	b.w	8006c9c <S2PI_WriteGpioPin>
 8014686:	bd70      	pop	{r4, r5, r6, pc}

08014688 <EEPROM_Read>:
 8014688:	b5f0      	push	{r4, r5, r6, r7, lr}
 801468a:	b083      	sub	sp, #12
 801468c:	4605      	mov	r5, r0
 801468e:	460e      	mov	r6, r1
 8014690:	4617      	mov	r7, r2
 8014692:	f7f2 fabb 	bl	8006c0c <S2PI_CaptureGpioControl>
 8014696:	1e04      	subs	r4, r0, #0
 8014698:	db70      	blt.n	801477c <EEPROM_Read+0xf4>
 801469a:	2201      	movs	r2, #1
 801469c:	4611      	mov	r1, r2
 801469e:	4628      	mov	r0, r5
 80146a0:	f7f2 fafc 	bl	8006c9c <S2PI_WriteGpioPin>
 80146a4:	1e04      	subs	r4, r0, #0
 80146a6:	db66      	blt.n	8014776 <EEPROM_Read+0xee>
 80146a8:	2201      	movs	r2, #1
 80146aa:	2102      	movs	r1, #2
 80146ac:	4628      	mov	r0, r5
 80146ae:	f7f2 faf5 	bl	8006c9c <S2PI_WriteGpioPin>
 80146b2:	1e04      	subs	r4, r0, #0
 80146b4:	db5f      	blt.n	8014776 <EEPROM_Read+0xee>
 80146b6:	2201      	movs	r2, #1
 80146b8:	2100      	movs	r1, #0
 80146ba:	4628      	mov	r0, r5
 80146bc:	f7f2 faee 	bl	8006c9c <S2PI_WriteGpioPin>
 80146c0:	1e04      	subs	r4, r0, #0
 80146c2:	db58      	blt.n	8014776 <EEPROM_Read+0xee>
 80146c4:	2200      	movs	r2, #0
 80146c6:	2101      	movs	r1, #1
 80146c8:	4628      	mov	r0, r5
 80146ca:	f7ff ff13 	bl	80144f4 <eeprom_write_ce>
 80146ce:	1e04      	subs	r4, r0, #0
 80146d0:	db51      	blt.n	8014776 <EEPROM_Read+0xee>
 80146d2:	f006 020f 	and.w	r2, r6, #15
 80146d6:	2101      	movs	r1, #1
 80146d8:	4628      	mov	r0, r5
 80146da:	f7ff fe07 	bl	80142ec <eeprom_place_command>
 80146de:	1e04      	subs	r4, r0, #0
 80146e0:	db49      	blt.n	8014776 <EEPROM_Read+0xee>
 80146e2:	2200      	movs	r2, #0
 80146e4:	2101      	movs	r1, #1
 80146e6:	4628      	mov	r0, r5
 80146e8:	f7ff ff04 	bl	80144f4 <eeprom_write_ce>
 80146ec:	1e04      	subs	r4, r0, #0
 80146ee:	db42      	blt.n	8014776 <EEPROM_Read+0xee>
 80146f0:	2201      	movs	r2, #1
 80146f2:	4611      	mov	r1, r2
 80146f4:	4628      	mov	r0, r5
 80146f6:	f7f2 fad1 	bl	8006c9c <S2PI_WriteGpioPin>
 80146fa:	1e04      	subs	r4, r0, #0
 80146fc:	db3b      	blt.n	8014776 <EEPROM_Read+0xee>
 80146fe:	2201      	movs	r2, #1
 8014700:	2100      	movs	r1, #0
 8014702:	4628      	mov	r0, r5
 8014704:	f7f2 faca 	bl	8006c9c <S2PI_WriteGpioPin>
 8014708:	1e04      	subs	r4, r0, #0
 801470a:	db34      	blt.n	8014776 <EEPROM_Read+0xee>
 801470c:	2201      	movs	r2, #1
 801470e:	2100      	movs	r1, #0
 8014710:	4628      	mov	r0, r5
 8014712:	f7ff feef 	bl	80144f4 <eeprom_write_ce>
 8014716:	1e04      	subs	r4, r0, #0
 8014718:	db2d      	blt.n	8014776 <EEPROM_Read+0xee>
 801471a:	2300      	movs	r3, #0
 801471c:	9301      	str	r3, [sp, #4]
 801471e:	703b      	strb	r3, [r7, #0]
 8014720:	2607      	movs	r6, #7
 8014722:	e01d      	b.n	8014760 <EEPROM_Read+0xd8>
 8014724:	4628      	mov	r0, r5
 8014726:	f7f2 fab9 	bl	8006c9c <S2PI_WriteGpioPin>
 801472a:	1e04      	subs	r4, r0, #0
 801472c:	aa01      	add	r2, sp, #4
 801472e:	db22      	blt.n	8014776 <EEPROM_Read+0xee>
 8014730:	2103      	movs	r1, #3
 8014732:	4628      	mov	r0, r5
 8014734:	f7f2 fafe 	bl	8006d34 <S2PI_ReadGpioPin>
 8014738:	1e04      	subs	r4, r0, #0
 801473a:	f04f 0200 	mov.w	r2, #0
 801473e:	db1a      	blt.n	8014776 <EEPROM_Read+0xee>
 8014740:	4611      	mov	r1, r2
 8014742:	4628      	mov	r0, r5
 8014744:	f7f2 faaa 	bl	8006c9c <S2PI_WriteGpioPin>
 8014748:	1e04      	subs	r4, r0, #0
 801474a:	db14      	blt.n	8014776 <EEPROM_Read+0xee>
 801474c:	9b01      	ldr	r3, [sp, #4]
 801474e:	783a      	ldrb	r2, [r7, #0]
 8014750:	f003 0301 	and.w	r3, r3, #1
 8014754:	40b3      	lsls	r3, r6
 8014756:	4313      	orrs	r3, r2
 8014758:	3e01      	subs	r6, #1
 801475a:	703b      	strb	r3, [r7, #0]
 801475c:	1c73      	adds	r3, r6, #1
 801475e:	d010      	beq.n	8014782 <EEPROM_Read+0xfa>
 8014760:	2200      	movs	r2, #0
 8014762:	2102      	movs	r1, #2
 8014764:	4628      	mov	r0, r5
 8014766:	f7f2 fa99 	bl	8006c9c <S2PI_WriteGpioPin>
 801476a:	1e04      	subs	r4, r0, #0
 801476c:	f04f 0201 	mov.w	r2, #1
 8014770:	f04f 0100 	mov.w	r1, #0
 8014774:	dad6      	bge.n	8014724 <EEPROM_Read+0x9c>
 8014776:	4628      	mov	r0, r5
 8014778:	f7f2 fa70 	bl	8006c5c <S2PI_ReleaseGpioControl>
 801477c:	4620      	mov	r0, r4
 801477e:	b003      	add	sp, #12
 8014780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014782:	2201      	movs	r2, #1
 8014784:	4611      	mov	r1, r2
 8014786:	4628      	mov	r0, r5
 8014788:	f7f2 fa88 	bl	8006c9c <S2PI_WriteGpioPin>
 801478c:	1e04      	subs	r4, r0, #0
 801478e:	dbf2      	blt.n	8014776 <EEPROM_Read+0xee>
 8014790:	2201      	movs	r2, #1
 8014792:	2100      	movs	r1, #0
 8014794:	4628      	mov	r0, r5
 8014796:	f7f2 fa81 	bl	8006c9c <S2PI_WriteGpioPin>
 801479a:	1e04      	subs	r4, r0, #0
 801479c:	dbeb      	blt.n	8014776 <EEPROM_Read+0xee>
 801479e:	2200      	movs	r2, #0
 80147a0:	2101      	movs	r1, #1
 80147a2:	4628      	mov	r0, r5
 80147a4:	f7ff fea6 	bl	80144f4 <eeprom_write_ce>
 80147a8:	1e04      	subs	r4, r0, #0
 80147aa:	dbe4      	blt.n	8014776 <EEPROM_Read+0xee>
 80147ac:	2201      	movs	r2, #1
 80147ae:	4611      	mov	r1, r2
 80147b0:	4628      	mov	r0, r5
 80147b2:	f7f2 fa73 	bl	8006c9c <S2PI_WriteGpioPin>
 80147b6:	1e04      	subs	r4, r0, #0
 80147b8:	dbdd      	blt.n	8014776 <EEPROM_Read+0xee>
 80147ba:	2201      	movs	r2, #1
 80147bc:	2102      	movs	r1, #2
 80147be:	4628      	mov	r0, r5
 80147c0:	f7f2 fa6c 	bl	8006c9c <S2PI_WriteGpioPin>
 80147c4:	1e04      	subs	r4, r0, #0
 80147c6:	dbd6      	blt.n	8014776 <EEPROM_Read+0xee>
 80147c8:	2201      	movs	r2, #1
 80147ca:	2100      	movs	r1, #0
 80147cc:	4628      	mov	r0, r5
 80147ce:	f7f2 fa65 	bl	8006c9c <S2PI_WriteGpioPin>
 80147d2:	4603      	mov	r3, r0
 80147d4:	4628      	mov	r0, r5
 80147d6:	461d      	mov	r5, r3
 80147d8:	f7f2 fa40 	bl	8006c5c <S2PI_ReleaseGpioControl>
 80147dc:	ea15 0425 	ands.w	r4, r5, r5, asr #32
 80147e0:	bf38      	it	cc
 80147e2:	4604      	movcc	r4, r0
 80147e4:	4620      	mov	r0, r4
 80147e6:	b003      	add	sp, #12
 80147e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147ea:	bf00      	nop

080147ec <EEPROM_ReadChipId>:
 80147ec:	7b43      	ldrb	r3, [r0, #13]
 80147ee:	7b01      	ldrb	r1, [r0, #12]
 80147f0:	7b82      	ldrb	r2, [r0, #14]
 80147f2:	7bc0      	ldrb	r0, [r0, #15]
 80147f4:	021b      	lsls	r3, r3, #8
 80147f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80147fa:	4313      	orrs	r3, r2
 80147fc:	f3c3 0314 	ubfx	r3, r3, #0, #21
 8014800:	09c0      	lsrs	r0, r0, #7
 8014802:	ea43 5040 	orr.w	r0, r3, r0, lsl #21
 8014806:	4770      	bx	lr

08014808 <EEPROM_ReadModule>:
 8014808:	b500      	push	{lr}
 801480a:	f8b0 200b 	ldrh.w	r2, [r0, #11]
 801480e:	f890 e00c 	ldrb.w	lr, [r0, #12]
 8014812:	7bc1      	ldrb	r1, [r0, #15]
 8014814:	7b43      	ldrb	r3, [r0, #13]
 8014816:	f890 c00e 	ldrb.w	ip, [r0, #14]
 801481a:	ba52      	rev16	r2, r2
 801481c:	f412 6ffc 	tst.w	r2, #2016	@ 0x7e0
 8014820:	f3c2 1045 	ubfx	r0, r2, #5, #6
 8014824:	d002      	beq.n	801482c <EEPROM_ReadModule+0x24>
 8014826:	b2c0      	uxtb	r0, r0
 8014828:	f85d fb04 	ldr.w	pc, [sp], #4
 801482c:	021b      	lsls	r3, r3, #8
 801482e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8014832:	ea40 000c 	orr.w	r0, r0, ip
 8014836:	09c9      	lsrs	r1, r1, #7
 8014838:	f3c0 0014 	ubfx	r0, r0, #0, #21
 801483c:	ea40 5041 	orr.w	r0, r0, r1, lsl #21
 8014840:	f2a0 3003 	subw	r0, r0, #771	@ 0x303
 8014844:	f5b0 7fe3 	cmp.w	r0, #454	@ 0x1c6
 8014848:	bf8c      	ite	hi
 801484a:	2000      	movhi	r0, #0
 801484c:	2001      	movls	r0, #1
 801484e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014852:	bf00      	nop

08014854 <EEPROM_Decode>:
 8014854:	2300      	movs	r3, #0
 8014856:	6003      	str	r3, [r0, #0]
 8014858:	6043      	str	r3, [r0, #4]
 801485a:	6083      	str	r3, [r0, #8]
 801485c:	60c3      	str	r3, [r0, #12]
 801485e:	6103      	str	r3, [r0, #16]
 8014860:	8283      	strh	r3, [r0, #20]
 8014862:	f8b1 300b 	ldrh.w	r3, [r1, #11]
 8014866:	ba5b      	rev16	r3, r3
 8014868:	f413 6ffc 	tst.w	r3, #2016	@ 0x7e0
 801486c:	f3c3 1245 	ubfx	r2, r3, #5, #6
 8014870:	f040 808d 	bne.w	801498e <EEPROM_Decode+0x13a>
 8014874:	7b4b      	ldrb	r3, [r1, #13]
 8014876:	f891 c00c 	ldrb.w	ip, [r1, #12]
 801487a:	021b      	lsls	r3, r3, #8
 801487c:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8014880:	f891 c00e 	ldrb.w	ip, [r1, #14]
 8014884:	ea43 030c 	orr.w	r3, r3, ip
 8014888:	f891 c00f 	ldrb.w	ip, [r1, #15]
 801488c:	f3c3 0314 	ubfx	r3, r3, #0, #21
 8014890:	ea4f 1cdc 	mov.w	ip, ip, lsr #7
 8014894:	ea43 534c 	orr.w	r3, r3, ip, lsl #21
 8014898:	f2a3 3303 	subw	r3, r3, #771	@ 0x303
 801489c:	f5b3 7fe3 	cmp.w	r3, #454	@ 0x1c6
 80148a0:	f200 8129 	bhi.w	8014af6 <EEPROM_Decode+0x2a2>
 80148a4:	2301      	movs	r3, #1
 80148a6:	7003      	strb	r3, [r0, #0]
 80148a8:	780a      	ldrb	r2, [r1, #0]
 80148aa:	08d3      	lsrs	r3, r2, #3
 80148ac:	09d2      	lsrs	r2, r2, #7
 80148ae:	bf18      	it	ne
 80148b0:	f043 03e0 	orrne.w	r3, r3, #224	@ 0xe0
 80148b4:	7043      	strb	r3, [r0, #1]
 80148b6:	880b      	ldrh	r3, [r1, #0]
 80148b8:	ba5b      	rev16	r3, r3
 80148ba:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80148be:	bf14      	ite	ne
 80148c0:	22f0      	movne	r2, #240	@ 0xf0
 80148c2:	2200      	moveq	r2, #0
 80148c4:	f3c3 13c3 	ubfx	r3, r3, #7, #4
 80148c8:	4313      	orrs	r3, r2
 80148ca:	7083      	strb	r3, [r0, #2]
 80148cc:	784b      	ldrb	r3, [r1, #1]
 80148ce:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80148d2:	bf14      	ite	ne
 80148d4:	22e0      	movne	r2, #224	@ 0xe0
 80148d6:	2200      	moveq	r2, #0
 80148d8:	f3c3 0384 	ubfx	r3, r3, #2, #5
 80148dc:	4313      	orrs	r3, r2
 80148de:	70c3      	strb	r3, [r0, #3]
 80148e0:	f8b1 3001 	ldrh.w	r3, [r1, #1]
 80148e4:	ba5b      	rev16	r3, r3
 80148e6:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80148ea:	bf14      	ite	ne
 80148ec:	f44f 427e 	movne.w	r2, #65024	@ 0xfe00
 80148f0:	2200      	moveq	r2, #0
 80148f2:	f3c3 0348 	ubfx	r3, r3, #1, #9
 80148f6:	4313      	orrs	r3, r2
 80148f8:	8083      	strh	r3, [r0, #4]
 80148fa:	884b      	ldrh	r3, [r1, #2]
 80148fc:	ba5b      	rev16	r3, r3
 80148fe:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8014902:	7183      	strb	r3, [r0, #6]
 8014904:	f8b1 3003 	ldrh.w	r3, [r1, #3]
 8014908:	ba5b      	rev16	r3, r3
 801490a:	f3c3 1389 	ubfx	r3, r3, #6, #10
 801490e:	71c3      	strb	r3, [r0, #7]
 8014910:	794b      	ldrb	r3, [r1, #5]
 8014912:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8014916:	bf14      	ite	ne
 8014918:	22f8      	movne	r2, #248	@ 0xf8
 801491a:	2200      	moveq	r2, #0
 801491c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8014920:	4313      	orrs	r3, r2
 8014922:	7243      	strb	r3, [r0, #9]
 8014924:	f8b1 3005 	ldrh.w	r3, [r1, #5]
 8014928:	ba5b      	rev16	r3, r3
 801492a:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 801492e:	bf14      	ite	ne
 8014930:	22e0      	movne	r2, #224	@ 0xe0
 8014932:	2200      	moveq	r2, #0
 8014934:	f3c3 13c4 	ubfx	r3, r3, #7, #5
 8014938:	4313      	orrs	r3, r2
 801493a:	7283      	strb	r3, [r0, #10]
 801493c:	798b      	ldrb	r3, [r1, #6]
 801493e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8014942:	bf14      	ite	ne
 8014944:	22f0      	movne	r2, #240	@ 0xf0
 8014946:	2200      	moveq	r2, #0
 8014948:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 801494c:	4313      	orrs	r3, r2
 801494e:	72c3      	strb	r3, [r0, #11]
 8014950:	88cb      	ldrh	r3, [r1, #6]
 8014952:	ba5b      	rev16	r3, r3
 8014954:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8014958:	7303      	strb	r3, [r0, #12]
 801495a:	f8b1 3007 	ldrh.w	r3, [r1, #7]
 801495e:	ba5b      	rev16	r3, r3
 8014960:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8014964:	bf14      	ite	ne
 8014966:	22e0      	movne	r2, #224	@ 0xe0
 8014968:	2200      	moveq	r2, #0
 801496a:	f3c3 1384 	ubfx	r3, r3, #6, #5
 801496e:	4313      	orrs	r3, r2
 8014970:	7343      	strb	r3, [r0, #13]
 8014972:	890a      	ldrh	r2, [r1, #8]
 8014974:	ba52      	rev16	r2, r2
 8014976:	f3c2 12c7 	ubfx	r2, r2, #7, #8
 801497a:	0051      	lsls	r1, r2, #1
 801497c:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 8014980:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8014984:	2300      	movs	r3, #0
 8014986:	430a      	orrs	r2, r1
 8014988:	7402      	strb	r2, [r0, #16]
 801498a:	4618      	mov	r0, r3
 801498c:	4770      	bx	lr
 801498e:	b2d3      	uxtb	r3, r2
 8014990:	2a02      	cmp	r2, #2
 8014992:	7003      	strb	r3, [r0, #0]
 8014994:	f000 80b8 	beq.w	8014b08 <EEPROM_Decode+0x2b4>
 8014998:	2b02      	cmp	r3, #2
 801499a:	f240 80af 	bls.w	8014afc <EEPROM_Decode+0x2a8>
 801499e:	3b03      	subs	r3, #3
 80149a0:	2b04      	cmp	r3, #4
 80149a2:	f200 80ae 	bhi.w	8014b02 <EEPROM_Decode+0x2ae>
 80149a6:	780a      	ldrb	r2, [r1, #0]
 80149a8:	08d3      	lsrs	r3, r2, #3
 80149aa:	09d2      	lsrs	r2, r2, #7
 80149ac:	bf18      	it	ne
 80149ae:	f043 03e0 	orrne.w	r3, r3, #224	@ 0xe0
 80149b2:	7043      	strb	r3, [r0, #1]
 80149b4:	880b      	ldrh	r3, [r1, #0]
 80149b6:	ba5b      	rev16	r3, r3
 80149b8:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80149bc:	bf14      	ite	ne
 80149be:	22f0      	movne	r2, #240	@ 0xf0
 80149c0:	2200      	moveq	r2, #0
 80149c2:	f3c3 13c3 	ubfx	r3, r3, #7, #4
 80149c6:	4313      	orrs	r3, r2
 80149c8:	7083      	strb	r3, [r0, #2]
 80149ca:	784b      	ldrb	r3, [r1, #1]
 80149cc:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80149d0:	bf14      	ite	ne
 80149d2:	22e0      	movne	r2, #224	@ 0xe0
 80149d4:	2200      	moveq	r2, #0
 80149d6:	f3c3 0384 	ubfx	r3, r3, #2, #5
 80149da:	4313      	orrs	r3, r2
 80149dc:	70c3      	strb	r3, [r0, #3]
 80149de:	f8b1 3001 	ldrh.w	r3, [r1, #1]
 80149e2:	ba5b      	rev16	r3, r3
 80149e4:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80149e8:	bf14      	ite	ne
 80149ea:	f44f 427e 	movne.w	r2, #65024	@ 0xfe00
 80149ee:	2200      	moveq	r2, #0
 80149f0:	f3c3 0348 	ubfx	r3, r3, #1, #9
 80149f4:	4313      	orrs	r3, r2
 80149f6:	8083      	strh	r3, [r0, #4]
 80149f8:	884b      	ldrh	r3, [r1, #2]
 80149fa:	ba5b      	rev16	r3, r3
 80149fc:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8014a00:	7183      	strb	r3, [r0, #6]
 8014a02:	f8b1 3003 	ldrh.w	r3, [r1, #3]
 8014a06:	ba5b      	rev16	r3, r3
 8014a08:	f3c3 1389 	ubfx	r3, r3, #6, #10
 8014a0c:	71c3      	strb	r3, [r0, #7]
 8014a0e:	790b      	ldrb	r3, [r1, #4]
 8014a10:	f013 0f20 	tst.w	r3, #32
 8014a14:	bf14      	ite	ne
 8014a16:	22f8      	movne	r2, #248	@ 0xf8
 8014a18:	2200      	moveq	r2, #0
 8014a1a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8014a1e:	4313      	orrs	r3, r2
 8014a20:	7203      	strb	r3, [r0, #8]
 8014a22:	888b      	ldrh	r3, [r1, #4]
 8014a24:	ba5b      	rev16	r3, r3
 8014a26:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8014a2a:	bf14      	ite	ne
 8014a2c:	22e0      	movne	r2, #224	@ 0xe0
 8014a2e:	2200      	moveq	r2, #0
 8014a30:	f3c3 1384 	ubfx	r3, r3, #6, #5
 8014a34:	4313      	orrs	r3, r2
 8014a36:	73c3      	strb	r3, [r0, #15]
 8014a38:	794b      	ldrb	r3, [r1, #5]
 8014a3a:	f013 0f20 	tst.w	r3, #32
 8014a3e:	bf14      	ite	ne
 8014a40:	22f8      	movne	r2, #248	@ 0xf8
 8014a42:	2200      	moveq	r2, #0
 8014a44:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8014a48:	4313      	orrs	r3, r2
 8014a4a:	7243      	strb	r3, [r0, #9]
 8014a4c:	f8b1 3005 	ldrh.w	r3, [r1, #5]
 8014a50:	ba5b      	rev16	r3, r3
 8014a52:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8014a56:	bf14      	ite	ne
 8014a58:	22e0      	movne	r2, #224	@ 0xe0
 8014a5a:	2200      	moveq	r2, #0
 8014a5c:	f3c3 1384 	ubfx	r3, r3, #6, #5
 8014a60:	4313      	orrs	r3, r2
 8014a62:	7283      	strb	r3, [r0, #10]
 8014a64:	798b      	ldrb	r3, [r1, #6]
 8014a66:	f013 0f20 	tst.w	r3, #32
 8014a6a:	bf14      	ite	ne
 8014a6c:	22f0      	movne	r2, #240	@ 0xf0
 8014a6e:	2200      	moveq	r2, #0
 8014a70:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8014a74:	4313      	orrs	r3, r2
 8014a76:	72c3      	strb	r3, [r0, #11]
 8014a78:	88cb      	ldrh	r3, [r1, #6]
 8014a7a:	ba5b      	rev16	r3, r3
 8014a7c:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8014a80:	bf14      	ite	ne
 8014a82:	22c0      	movne	r2, #192	@ 0xc0
 8014a84:	2200      	moveq	r2, #0
 8014a86:	f3c3 1305 	ubfx	r3, r3, #4, #6
 8014a8a:	4313      	orrs	r3, r2
 8014a8c:	7303      	strb	r3, [r0, #12]
 8014a8e:	f8b1 3007 	ldrh.w	r3, [r1, #7]
 8014a92:	ba5b      	rev16	r3, r3
 8014a94:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8014a98:	bf14      	ite	ne
 8014a9a:	22c0      	movne	r2, #192	@ 0xc0
 8014a9c:	2200      	moveq	r2, #0
 8014a9e:	f3c3 1385 	ubfx	r3, r3, #6, #6
 8014aa2:	4313      	orrs	r3, r2
 8014aa4:	7343      	strb	r3, [r0, #13]
 8014aa6:	890b      	ldrh	r3, [r1, #8]
 8014aa8:	ba5b      	rev16	r3, r3
 8014aaa:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 8014aae:	005a      	lsls	r2, r3, #1
 8014ab0:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8014ab4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014ab8:	4313      	orrs	r3, r2
 8014aba:	7403      	strb	r3, [r0, #16]
 8014abc:	f8b1 3009 	ldrh.w	r3, [r1, #9]
 8014ac0:	ba5b      	rev16	r3, r3
 8014ac2:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8014ac6:	7383      	strb	r3, [r0, #14]
 8014ac8:	7a8a      	ldrb	r2, [r1, #10]
 8014aca:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8014ace:	bf14      	ite	ne
 8014ad0:	23c0      	movne	r3, #192	@ 0xc0
 8014ad2:	2300      	moveq	r3, #0
 8014ad4:	f3c2 0245 	ubfx	r2, r2, #1, #6
 8014ad8:	4313      	orrs	r3, r2
 8014ada:	b25b      	sxtb	r3, r3
 8014adc:	8243      	strh	r3, [r0, #18]
 8014ade:	894b      	ldrh	r3, [r1, #10]
 8014ae0:	ba5b      	rev16	r3, r3
 8014ae2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8014ae6:	f64f 72c0 	movw	r2, #65472	@ 0xffc0
 8014aea:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8014aee:	bf08      	it	eq
 8014af0:	2200      	moveq	r2, #0
 8014af2:	4313      	orrs	r3, r2
 8014af4:	8283      	strh	r3, [r0, #20]
 8014af6:	2300      	movs	r3, #0
 8014af8:	4618      	mov	r0, r3
 8014afa:	4770      	bx	lr
 8014afc:	2b01      	cmp	r3, #1
 8014afe:	f43f aed3 	beq.w	80148a8 <EEPROM_Decode+0x54>
 8014b02:	236e      	movs	r3, #110	@ 0x6e
 8014b04:	4618      	mov	r0, r3
 8014b06:	4770      	bx	lr
 8014b08:	780a      	ldrb	r2, [r1, #0]
 8014b0a:	08d3      	lsrs	r3, r2, #3
 8014b0c:	09d2      	lsrs	r2, r2, #7
 8014b0e:	bf18      	it	ne
 8014b10:	f043 03e0 	orrne.w	r3, r3, #224	@ 0xe0
 8014b14:	7043      	strb	r3, [r0, #1]
 8014b16:	880b      	ldrh	r3, [r1, #0]
 8014b18:	ba5b      	rev16	r3, r3
 8014b1a:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8014b1e:	bf14      	ite	ne
 8014b20:	22f0      	movne	r2, #240	@ 0xf0
 8014b22:	2200      	moveq	r2, #0
 8014b24:	f3c3 13c3 	ubfx	r3, r3, #7, #4
 8014b28:	4313      	orrs	r3, r2
 8014b2a:	7083      	strb	r3, [r0, #2]
 8014b2c:	784b      	ldrb	r3, [r1, #1]
 8014b2e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8014b32:	bf14      	ite	ne
 8014b34:	22e0      	movne	r2, #224	@ 0xe0
 8014b36:	2200      	moveq	r2, #0
 8014b38:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8014b3c:	4313      	orrs	r3, r2
 8014b3e:	70c3      	strb	r3, [r0, #3]
 8014b40:	f8b1 3001 	ldrh.w	r3, [r1, #1]
 8014b44:	ba5b      	rev16	r3, r3
 8014b46:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8014b4a:	bf14      	ite	ne
 8014b4c:	f44f 427e 	movne.w	r2, #65024	@ 0xfe00
 8014b50:	2200      	moveq	r2, #0
 8014b52:	f3c3 0348 	ubfx	r3, r3, #1, #9
 8014b56:	4313      	orrs	r3, r2
 8014b58:	8083      	strh	r3, [r0, #4]
 8014b5a:	884b      	ldrh	r3, [r1, #2]
 8014b5c:	ba5b      	rev16	r3, r3
 8014b5e:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8014b62:	7183      	strb	r3, [r0, #6]
 8014b64:	f8b1 3003 	ldrh.w	r3, [r1, #3]
 8014b68:	ba5b      	rev16	r3, r3
 8014b6a:	f3c3 1389 	ubfx	r3, r3, #6, #10
 8014b6e:	71c3      	strb	r3, [r0, #7]
 8014b70:	888b      	ldrh	r3, [r1, #4]
 8014b72:	ba5b      	rev16	r3, r3
 8014b74:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8014b78:	bf14      	ite	ne
 8014b7a:	22e0      	movne	r2, #224	@ 0xe0
 8014b7c:	2200      	moveq	r2, #0
 8014b7e:	f3c3 1384 	ubfx	r3, r3, #6, #5
 8014b82:	4313      	orrs	r3, r2
 8014b84:	73c3      	strb	r3, [r0, #15]
 8014b86:	794b      	ldrb	r3, [r1, #5]
 8014b88:	f013 0f20 	tst.w	r3, #32
 8014b8c:	bf14      	ite	ne
 8014b8e:	22f8      	movne	r2, #248	@ 0xf8
 8014b90:	2200      	moveq	r2, #0
 8014b92:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8014b96:	4313      	orrs	r3, r2
 8014b98:	7243      	strb	r3, [r0, #9]
 8014b9a:	f8b1 3005 	ldrh.w	r3, [r1, #5]
 8014b9e:	ba5b      	rev16	r3, r3
 8014ba0:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8014ba4:	bf14      	ite	ne
 8014ba6:	22e0      	movne	r2, #224	@ 0xe0
 8014ba8:	2200      	moveq	r2, #0
 8014baa:	f3c3 1384 	ubfx	r3, r3, #6, #5
 8014bae:	4313      	orrs	r3, r2
 8014bb0:	7283      	strb	r3, [r0, #10]
 8014bb2:	798b      	ldrb	r3, [r1, #6]
 8014bb4:	f013 0f20 	tst.w	r3, #32
 8014bb8:	bf14      	ite	ne
 8014bba:	22f0      	movne	r2, #240	@ 0xf0
 8014bbc:	2200      	moveq	r2, #0
 8014bbe:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8014bc2:	4313      	orrs	r3, r2
 8014bc4:	72c3      	strb	r3, [r0, #11]
 8014bc6:	88cb      	ldrh	r3, [r1, #6]
 8014bc8:	ba5b      	rev16	r3, r3
 8014bca:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8014bce:	bf14      	ite	ne
 8014bd0:	22c0      	movne	r2, #192	@ 0xc0
 8014bd2:	2200      	moveq	r2, #0
 8014bd4:	f3c3 1305 	ubfx	r3, r3, #4, #6
 8014bd8:	4313      	orrs	r3, r2
 8014bda:	7303      	strb	r3, [r0, #12]
 8014bdc:	f8b1 3007 	ldrh.w	r3, [r1, #7]
 8014be0:	ba5b      	rev16	r3, r3
 8014be2:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8014be6:	bf14      	ite	ne
 8014be8:	22c0      	movne	r2, #192	@ 0xc0
 8014bea:	2200      	moveq	r2, #0
 8014bec:	f3c3 1385 	ubfx	r3, r3, #6, #6
 8014bf0:	4313      	orrs	r3, r2
 8014bf2:	7343      	strb	r3, [r0, #13]
 8014bf4:	890b      	ldrh	r3, [r1, #8]
 8014bf6:	ba5b      	rev16	r3, r3
 8014bf8:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 8014bfc:	005a      	lsls	r2, r3, #1
 8014bfe:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8014c02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014c06:	4313      	orrs	r3, r2
 8014c08:	7403      	strb	r3, [r0, #16]
 8014c0a:	f8b1 2009 	ldrh.w	r2, [r1, #9]
 8014c0e:	ba52      	rev16	r2, r2
 8014c10:	2300      	movs	r3, #0
 8014c12:	f3c2 12c8 	ubfx	r2, r2, #7, #9
 8014c16:	7382      	strb	r2, [r0, #14]
 8014c18:	4618      	mov	r0, r3
 8014c1a:	4770      	bx	lr

08014c1c <CheckStateAndRecoverError>:
 8014c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c20:	2800      	cmp	r0, #0
 8014c22:	d04f      	beq.n	8014cc4 <CheckStateAndRecoverError+0xa8>
 8014c24:	4b2e      	ldr	r3, [pc, #184]	@ (8014ce0 <CheckStateAndRecoverError+0xc4>)
 8014c26:	4617      	mov	r7, r2
 8014c28:	6802      	ldr	r2, [r0, #0]
 8014c2a:	429a      	cmp	r2, r3
 8014c2c:	4604      	mov	r4, r0
 8014c2e:	d143      	bne.n	8014cb8 <CheckStateAndRecoverError+0x9c>
 8014c30:	1d05      	adds	r5, r0, #4
 8014c32:	4628      	mov	r0, r5
 8014c34:	4688      	mov	r8, r1
 8014c36:	f00c f99d 	bl	8020f74 <Argus_Dev_GetStatus>
 8014c3a:	1e06      	subs	r6, r0, #0
 8014c3c:	db0f      	blt.n	8014c5e <CheckStateAndRecoverError+0x42>
 8014c3e:	f204 79cc 	addw	r9, r4, #1996	@ 0x7cc
 8014c42:	4648      	mov	r0, r9
 8014c44:	f003 fede 	bl	8018a04 <Argus_Measurement_CheckTimeout>
 8014c48:	2800      	cmp	r0, #0
 8014c4a:	db1f      	blt.n	8014c8c <CheckStateAndRecoverError+0x70>
 8014c4c:	f1b8 0f00 	cmp.w	r8, #0
 8014c50:	d000      	beq.n	8014c54 <CheckStateAndRecoverError+0x38>
 8014c52:	bb2e      	cbnz	r6, 8014ca0 <CheckStateAndRecoverError+0x84>
 8014c54:	b977      	cbnz	r7, 8014c74 <CheckStateAndRecoverError+0x58>
 8014c56:	2500      	movs	r5, #0
 8014c58:	4628      	mov	r0, r5
 8014c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c5e:	4628      	mov	r0, r5
 8014c60:	f00d f9de 	bl	8022020 <Argus_Dev_RecoverFromError>
 8014c64:	1e05      	subs	r5, r0, #0
 8014c66:	daf5      	bge.n	8014c54 <CheckStateAndRecoverError+0x38>
 8014c68:	462a      	mov	r2, r5
 8014c6a:	4631      	mov	r1, r6
 8014c6c:	481d      	ldr	r0, [pc, #116]	@ (8014ce4 <CheckStateAndRecoverError+0xc8>)
 8014c6e:	f7f1 fc4d 	bl	800650c <print>
 8014c72:	e7f1      	b.n	8014c58 <CheckStateAndRecoverError+0x3c>
 8014c74:	f204 70cc 	addw	r0, r4, #1996	@ 0x7cc
 8014c78:	f003 fe1c 	bl	80188b4 <Argus_Measurement_IsActive>
 8014c7c:	2800      	cmp	r0, #0
 8014c7e:	d0ea      	beq.n	8014c56 <CheckStateAndRecoverError+0x3a>
 8014c80:	4819      	ldr	r0, [pc, #100]	@ (8014ce8 <CheckStateAndRecoverError+0xcc>)
 8014c82:	f7f1 fc43 	bl	800650c <print>
 8014c86:	f06f 05be 	mvn.w	r5, #190	@ 0xbe
 8014c8a:	e7e5      	b.n	8014c58 <CheckStateAndRecoverError+0x3c>
 8014c8c:	4648      	mov	r0, r9
 8014c8e:	f003 fdeb 	bl	8018868 <Argus_Measurement_Abort>
 8014c92:	1e05      	subs	r5, r0, #0
 8014c94:	dade      	bge.n	8014c54 <CheckStateAndRecoverError+0x38>
 8014c96:	4629      	mov	r1, r5
 8014c98:	4814      	ldr	r0, [pc, #80]	@ (8014cec <CheckStateAndRecoverError+0xd0>)
 8014c9a:	f7f1 fc37 	bl	800650c <print>
 8014c9e:	e7db      	b.n	8014c58 <CheckStateAndRecoverError+0x3c>
 8014ca0:	b9b7      	cbnz	r7, 8014cd0 <CheckStateAndRecoverError+0xb4>
 8014ca2:	4628      	mov	r0, r5
 8014ca4:	4639      	mov	r1, r7
 8014ca6:	f00b ffd7 	bl	8020c58 <Argus_Dev_AwaitStatus>
 8014caa:	1e05      	subs	r5, r0, #0
 8014cac:	dad3      	bge.n	8014c56 <CheckStateAndRecoverError+0x3a>
 8014cae:	4629      	mov	r1, r5
 8014cb0:	480f      	ldr	r0, [pc, #60]	@ (8014cf0 <CheckStateAndRecoverError+0xd4>)
 8014cb2:	f7f1 fc2b 	bl	800650c <print>
 8014cb6:	e7cf      	b.n	8014c58 <CheckStateAndRecoverError+0x3c>
 8014cb8:	480e      	ldr	r0, [pc, #56]	@ (8014cf4 <CheckStateAndRecoverError+0xd8>)
 8014cba:	f7f1 fc27 	bl	800650c <print>
 8014cbe:	f06f 0506 	mvn.w	r5, #6
 8014cc2:	e7c9      	b.n	8014c58 <CheckStateAndRecoverError+0x3c>
 8014cc4:	480c      	ldr	r0, [pc, #48]	@ (8014cf8 <CheckStateAndRecoverError+0xdc>)
 8014cc6:	f7f1 fc21 	bl	800650c <print>
 8014cca:	f06f 0504 	mvn.w	r5, #4
 8014cce:	e7c3      	b.n	8014c58 <CheckStateAndRecoverError+0x3c>
 8014cd0:	480a      	ldr	r0, [pc, #40]	@ (8014cfc <CheckStateAndRecoverError+0xe0>)
 8014cd2:	4631      	mov	r1, r6
 8014cd4:	f7f1 fc1a 	bl	800650c <print>
 8014cd8:	f06f 05be 	mvn.w	r5, #190	@ 0xbe
 8014cdc:	e7bc      	b.n	8014c58 <CheckStateAndRecoverError+0x3c>
 8014cde:	bf00      	nop
 8014ce0:	0afb8550 	.word	0x0afb8550
 8014ce4:	0802e3a0 	.word	0x0802e3a0
 8014ce8:	0802e47c 	.word	0x0802e47c
 8014cec:	0802e3dc 	.word	0x0802e3dc
 8014cf0:	0802e43c 	.word	0x0802e43c
 8014cf4:	0802e378 	.word	0x0802e378
 8014cf8:	0802e350 	.word	0x0802e350
 8014cfc:	0802e414 	.word	0x0802e414

08014d00 <Argus_SetMeasurementMode.part.0>:
 8014d00:	b570      	push	{r4, r5, r6, lr}
 8014d02:	f5ad 7d7c 	sub.w	sp, sp, #1008	@ 0x3f0
 8014d06:	460a      	mov	r2, r1
 8014d08:	9101      	str	r1, [sp, #4]
 8014d0a:	4605      	mov	r5, r0
 8014d0c:	a94d      	add	r1, sp, #308	@ 0x134
 8014d0e:	f500 7042 	add.w	r0, r0, #776	@ 0x308
 8014d12:	f013 ff25 	bl	8028b60 <Argus_Cal_GetCurrentDefaultCalibration>
 8014d16:	4604      	mov	r4, r0
 8014d18:	b118      	cbz	r0, 8014d22 <Argus_SetMeasurementMode.part.0+0x22>
 8014d1a:	4620      	mov	r0, r4
 8014d1c:	f50d 7d7c 	add.w	sp, sp, #1008	@ 0x3f0
 8014d20:	bd70      	pop	{r4, r5, r6, pc}
 8014d22:	9a01      	ldr	r2, [sp, #4]
 8014d24:	a903      	add	r1, sp, #12
 8014d26:	f505 70ee 	add.w	r0, r5, #476	@ 0x1dc
 8014d2a:	f00f fbed 	bl	8024508 <Argus_Cfg_GetCurrentDefaultConfiguration>
 8014d2e:	4604      	mov	r4, r0
 8014d30:	2800      	cmp	r0, #0
 8014d32:	d1f2      	bne.n	8014d1a <Argus_SetMeasurementMode.part.0+0x1a>
 8014d34:	1d2e      	adds	r6, r5, #4
 8014d36:	21c0      	movs	r1, #192	@ 0xc0
 8014d38:	4630      	mov	r0, r6
 8014d3a:	f00c f835 	bl	8020da8 <Argus_Dev_SetStatusSync>
 8014d3e:	4604      	mov	r4, r0
 8014d40:	2800      	cmp	r0, #0
 8014d42:	d1ea      	bne.n	8014d1a <Argus_SetMeasurementMode.part.0+0x1a>
 8014d44:	a903      	add	r1, sp, #12
 8014d46:	aa4d      	add	r2, sp, #308	@ 0x134
 8014d48:	4628      	mov	r0, r5
 8014d4a:	f001 fe0d 	bl	8016968 <Argus_Core_SetSettingsSync>
 8014d4e:	21c0      	movs	r1, #192	@ 0xc0
 8014d50:	4604      	mov	r4, r0
 8014d52:	4630      	mov	r0, r6
 8014d54:	f00c f8fa 	bl	8020f4c <Argus_Dev_ClearStatus>
 8014d58:	4620      	mov	r0, r4
 8014d5a:	f50d 7d7c 	add.w	sp, sp, #1008	@ 0x3f0
 8014d5e:	bd70      	pop	{r4, r5, r6, pc}

08014d60 <Argus_InitMode>:
 8014d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d64:	f5ad 7d7f 	sub.w	sp, sp, #1020	@ 0x3fc
 8014d68:	9203      	str	r2, [sp, #12]
 8014d6a:	2800      	cmp	r0, #0
 8014d6c:	f000 8114 	beq.w	8014f98 <Argus_InitMode+0x238>
 8014d70:	4b8c      	ldr	r3, [pc, #560]	@ (8014fa4 <Argus_InitMode+0x244>)
 8014d72:	6802      	ldr	r2, [r0, #0]
 8014d74:	429a      	cmp	r2, r3
 8014d76:	4604      	mov	r4, r0
 8014d78:	f000 8108 	beq.w	8014f8c <Argus_InitMode+0x22c>
 8014d7c:	1d05      	adds	r5, r0, #4
 8014d7e:	f640 62ec 	movw	r2, #3820	@ 0xeec
 8014d82:	4688      	mov	r8, r1
 8014d84:	f06f 0a06 	mvn.w	sl, #6
 8014d88:	2100      	movs	r1, #0
 8014d8a:	f204 79cc 	addw	r9, r4, #1996	@ 0x7cc
 8014d8e:	f016 f90c 	bl	802afaa <memset>
 8014d92:	4629      	mov	r1, r5
 8014d94:	4648      	mov	r0, r9
 8014d96:	f8c4 a004 	str.w	sl, [r4, #4]
 8014d9a:	f003 fd53 	bl	8018844 <Argus_Measurement_Init>
 8014d9e:	f504 7742 	add.w	r7, r4, #776	@ 0x308
 8014da2:	f604 367c 	addw	r6, r4, #2940	@ 0xb7c
 8014da6:	f504 723a 	add.w	r2, r4, #744	@ 0x2e8
 8014daa:	f504 73f0 	add.w	r3, r4, #480	@ 0x1e0
 8014dae:	4630      	mov	r0, r6
 8014db0:	9200      	str	r2, [sp, #0]
 8014db2:	f504 71b6 	add.w	r1, r4, #364	@ 0x16c
 8014db6:	463a      	mov	r2, r7
 8014db8:	f504 7bee 	add.w	fp, r4, #476	@ 0x1dc
 8014dbc:	9302      	str	r3, [sp, #8]
 8014dbe:	f004 ffd3 	bl	8019d68 <Argus_Eval_Init>
 8014dc2:	4629      	mov	r1, r5
 8014dc4:	4658      	mov	r0, fp
 8014dc6:	f00e fa5b 	bl	8023280 <Argus_Cfg_Init>
 8014dca:	4629      	mov	r1, r5
 8014dcc:	4638      	mov	r0, r7
 8014dce:	f00f fd0b 	bl	80247e8 <Argus_Cal_Init>
 8014dd2:	f504 7134 	add.w	r1, r4, #720	@ 0x2d0
 8014dd6:	4632      	mov	r2, r6
 8014dd8:	9100      	str	r1, [sp, #0]
 8014dda:	9b02      	ldr	r3, [sp, #8]
 8014ddc:	f8cd 8004 	str.w	r8, [sp, #4]
 8014de0:	4639      	mov	r1, r7
 8014de2:	4628      	mov	r0, r5
 8014de4:	f00b fdf6 	bl	80209d4 <Argus_Dev_Init>
 8014de8:	1e06      	subs	r6, r0, #0
 8014dea:	db63      	blt.n	8014eb4 <Argus_InitMode+0x154>
 8014dec:	f04f 0800 	mov.w	r8, #0
 8014df0:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8014df4:	4641      	mov	r1, r8
 8014df6:	a84f      	add	r0, sp, #316	@ 0x13c
 8014df8:	f016 f8d7 	bl	802afaa <memset>
 8014dfc:	f8cd 8000 	str.w	r8, [sp]
 8014e00:	4643      	mov	r3, r8
 8014e02:	4642      	mov	r2, r8
 8014e04:	2101      	movs	r1, #1
 8014e06:	a84f      	add	r0, sp, #316	@ 0x13c
 8014e08:	f012 f8e6 	bl	8026fd8 <Argus_Cal_GetDefaultCalibration>
 8014e0c:	1e06      	subs	r6, r0, #0
 8014e0e:	f2c0 8088 	blt.w	8014f22 <Argus_InitMode+0x1c2>
 8014e12:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8014e16:	4641      	mov	r1, r8
 8014e18:	a805      	add	r0, sp, #20
 8014e1a:	f016 f8c6 	bl	802afaa <memset>
 8014e1e:	f8cd 8000 	str.w	r8, [sp]
 8014e22:	4643      	mov	r3, r8
 8014e24:	4642      	mov	r2, r8
 8014e26:	2101      	movs	r1, #1
 8014e28:	a805      	add	r0, sp, #20
 8014e2a:	f00f faf5 	bl	8024418 <Argus_Cfg_GetDefaultConfiguration>
 8014e2e:	1e06      	subs	r6, r0, #0
 8014e30:	db54      	blt.n	8014edc <Argus_InitMode+0x17c>
 8014e32:	aa4f      	add	r2, sp, #316	@ 0x13c
 8014e34:	a905      	add	r1, sp, #20
 8014e36:	4620      	mov	r0, r4
 8014e38:	f001 fd96 	bl	8016968 <Argus_Core_SetSettingsSync>
 8014e3c:	1e06      	subs	r6, r0, #0
 8014e3e:	db73      	blt.n	8014f28 <Argus_InitMode+0x1c8>
 8014e40:	4638      	mov	r0, r7
 8014e42:	f00f fcdf 	bl	8024804 <Argus_Cal_ReadEEPROMData>
 8014e46:	1e06      	subs	r6, r0, #0
 8014e48:	f2c0 8093 	blt.w	8014f72 <Argus_InitMode+0x212>
 8014e4c:	9b03      	ldr	r3, [sp, #12]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d047      	beq.n	8014ee2 <Argus_InitMode+0x182>
 8014e52:	9a03      	ldr	r2, [sp, #12]
 8014e54:	4658      	mov	r0, fp
 8014e56:	a905      	add	r1, sp, #20
 8014e58:	f00f fb56 	bl	8024508 <Argus_Cfg_GetCurrentDefaultConfiguration>
 8014e5c:	1e06      	subs	r6, r0, #0
 8014e5e:	db4b      	blt.n	8014ef8 <Argus_InitMode+0x198>
 8014e60:	9a03      	ldr	r2, [sp, #12]
 8014e62:	a94f      	add	r1, sp, #316	@ 0x13c
 8014e64:	4638      	mov	r0, r7
 8014e66:	f013 fe7b 	bl	8028b60 <Argus_Cal_GetCurrentDefaultCalibration>
 8014e6a:	1e06      	subs	r6, r0, #0
 8014e6c:	db7c      	blt.n	8014f68 <Argus_InitMode+0x208>
 8014e6e:	a94f      	add	r1, sp, #316	@ 0x13c
 8014e70:	4638      	mov	r0, r7
 8014e72:	f00f fccd 	bl	8024810 <Argus_Cal_ReadNVMData>
 8014e76:	1e06      	subs	r6, r0, #0
 8014e78:	db7e      	blt.n	8014f78 <Argus_InitMode+0x218>
 8014e7a:	aa4f      	add	r2, sp, #316	@ 0x13c
 8014e7c:	a905      	add	r1, sp, #20
 8014e7e:	4620      	mov	r0, r4
 8014e80:	f001 fd72 	bl	8016968 <Argus_Core_SetSettingsSync>
 8014e84:	1e06      	subs	r6, r0, #0
 8014e86:	db7c      	blt.n	8014f82 <Argus_InitMode+0x222>
 8014e88:	21c0      	movs	r1, #192	@ 0xc0
 8014e8a:	4628      	mov	r0, r5
 8014e8c:	f00c f85e 	bl	8020f4c <Argus_Dev_ClearStatus>
 8014e90:	4628      	mov	r0, r5
 8014e92:	f00c ff51 	bl	8021d38 <Argus_Dev_GetModule>
 8014e96:	2800      	cmp	r0, #0
 8014e98:	d049      	beq.n	8014f2e <Argus_InitMode+0x1ce>
 8014e9a:	2801      	cmp	r0, #1
 8014e9c:	d04a      	beq.n	8014f34 <Argus_InitMode+0x1d4>
 8014e9e:	2600      	movs	r6, #0
 8014ea0:	4628      	mov	r0, r5
 8014ea2:	f00c ff49 	bl	8021d38 <Argus_Dev_GetModule>
 8014ea6:	4b3f      	ldr	r3, [pc, #252]	@ (8014fa4 <Argus_InitMode+0x244>)
 8014ea8:	6023      	str	r3, [r4, #0]
 8014eaa:	2800      	cmp	r0, #0
 8014eac:	bf08      	it	eq
 8014eae:	f06f 06c6 	mvneq.w	r6, #198	@ 0xc6
 8014eb2:	e00e      	b.n	8014ed2 <Argus_InitMode+0x172>
 8014eb4:	483c      	ldr	r0, [pc, #240]	@ (8014fa8 <Argus_InitMode+0x248>)
 8014eb6:	4631      	mov	r1, r6
 8014eb8:	f7f1 fb28 	bl	800650c <print>
 8014ebc:	4648      	mov	r0, r9
 8014ebe:	f003 fcd1 	bl	8018864 <Argus_Measurement_Deinit>
 8014ec2:	f640 62ec 	movw	r2, #3820	@ 0xeec
 8014ec6:	2100      	movs	r1, #0
 8014ec8:	4620      	mov	r0, r4
 8014eca:	f016 f86e 	bl	802afaa <memset>
 8014ece:	f8c4 a004 	str.w	sl, [r4, #4]
 8014ed2:	4630      	mov	r0, r6
 8014ed4:	f50d 7d7f 	add.w	sp, sp, #1020	@ 0x3fc
 8014ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014edc:	4833      	ldr	r0, [pc, #204]	@ (8014fac <Argus_InitMode+0x24c>)
 8014ede:	4631      	mov	r1, r6
 8014ee0:	e7ea      	b.n	8014eb8 <Argus_InitMode+0x158>
 8014ee2:	4628      	mov	r0, r5
 8014ee4:	f00c ff28 	bl	8021d38 <Argus_Dev_GetModule>
 8014ee8:	f000 00bf 	and.w	r0, r0, #191	@ 0xbf
 8014eec:	2803      	cmp	r0, #3
 8014eee:	bf14      	ite	ne
 8014ef0:	2301      	movne	r3, #1
 8014ef2:	2302      	moveq	r3, #2
 8014ef4:	9303      	str	r3, [sp, #12]
 8014ef6:	e7ac      	b.n	8014e52 <Argus_InitMode+0xf2>
 8014ef8:	482d      	ldr	r0, [pc, #180]	@ (8014fb0 <Argus_InitMode+0x250>)
 8014efa:	4631      	mov	r1, r6
 8014efc:	f7f1 fb06 	bl	800650c <print>
 8014f00:	4648      	mov	r0, r9
 8014f02:	f003 fcaf 	bl	8018864 <Argus_Measurement_Deinit>
 8014f06:	f640 62ec 	movw	r2, #3820	@ 0xeec
 8014f0a:	2100      	movs	r1, #0
 8014f0c:	4620      	mov	r0, r4
 8014f0e:	f016 f84c 	bl	802afaa <memset>
 8014f12:	f06f 0306 	mvn.w	r3, #6
 8014f16:	4630      	mov	r0, r6
 8014f18:	6063      	str	r3, [r4, #4]
 8014f1a:	f50d 7d7f 	add.w	sp, sp, #1020	@ 0x3fc
 8014f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f22:	4824      	ldr	r0, [pc, #144]	@ (8014fb4 <Argus_InitMode+0x254>)
 8014f24:	4631      	mov	r1, r6
 8014f26:	e7c7      	b.n	8014eb8 <Argus_InitMode+0x158>
 8014f28:	4823      	ldr	r0, [pc, #140]	@ (8014fb8 <Argus_InitMode+0x258>)
 8014f2a:	4631      	mov	r1, r6
 8014f2c:	e7c4      	b.n	8014eb8 <Argus_InitMode+0x158>
 8014f2e:	4823      	ldr	r0, [pc, #140]	@ (8014fbc <Argus_InitMode+0x25c>)
 8014f30:	f7f1 faec 	bl	800650c <print>
 8014f34:	4638      	mov	r0, r7
 8014f36:	f00f fc89 	bl	802484c <Argus_Cal_GetCalibrationPtr>
 8014f3a:	f8d0 3288 	ldr.w	r3, [r0, #648]	@ 0x288
 8014f3e:	f003 0303 	and.w	r3, r3, #3
 8014f42:	2b03      	cmp	r3, #3
 8014f44:	d0ab      	beq.n	8014e9e <Argus_InitMode+0x13e>
 8014f46:	4620      	mov	r0, r4
 8014f48:	f003 fa54 	bl	80183f4 <Argus_Core_ExecuteVsubCalibrationSequence>
 8014f4c:	2800      	cmp	r0, #0
 8014f4e:	ea00 76e0 	and.w	r6, r0, r0, asr #31
 8014f52:	daa4      	bge.n	8014e9e <Argus_InitMode+0x13e>
 8014f54:	481a      	ldr	r0, [pc, #104]	@ (8014fc0 <Argus_InitMode+0x260>)
 8014f56:	4631      	mov	r1, r6
 8014f58:	f7f1 fad8 	bl	800650c <print>
 8014f5c:	4628      	mov	r0, r5
 8014f5e:	f00c feeb 	bl	8021d38 <Argus_Dev_GetModule>
 8014f62:	2800      	cmp	r0, #0
 8014f64:	d09c      	beq.n	8014ea0 <Argus_InitMode+0x140>
 8014f66:	e7cb      	b.n	8014f00 <Argus_InitMode+0x1a0>
 8014f68:	4631      	mov	r1, r6
 8014f6a:	4816      	ldr	r0, [pc, #88]	@ (8014fc4 <Argus_InitMode+0x264>)
 8014f6c:	f7f1 face 	bl	800650c <print>
 8014f70:	e7c6      	b.n	8014f00 <Argus_InitMode+0x1a0>
 8014f72:	4815      	ldr	r0, [pc, #84]	@ (8014fc8 <Argus_InitMode+0x268>)
 8014f74:	4631      	mov	r1, r6
 8014f76:	e79f      	b.n	8014eb8 <Argus_InitMode+0x158>
 8014f78:	4631      	mov	r1, r6
 8014f7a:	4814      	ldr	r0, [pc, #80]	@ (8014fcc <Argus_InitMode+0x26c>)
 8014f7c:	f7f1 fac6 	bl	800650c <print>
 8014f80:	e7be      	b.n	8014f00 <Argus_InitMode+0x1a0>
 8014f82:	4631      	mov	r1, r6
 8014f84:	4812      	ldr	r0, [pc, #72]	@ (8014fd0 <Argus_InitMode+0x270>)
 8014f86:	f7f1 fac1 	bl	800650c <print>
 8014f8a:	e7b9      	b.n	8014f00 <Argus_InitMode+0x1a0>
 8014f8c:	4811      	ldr	r0, [pc, #68]	@ (8014fd4 <Argus_InitMode+0x274>)
 8014f8e:	f7f1 fabd 	bl	800650c <print>
 8014f92:	f06f 0604 	mvn.w	r6, #4
 8014f96:	e79c      	b.n	8014ed2 <Argus_InitMode+0x172>
 8014f98:	480f      	ldr	r0, [pc, #60]	@ (8014fd8 <Argus_InitMode+0x278>)
 8014f9a:	f7f1 fab7 	bl	800650c <print>
 8014f9e:	f06f 0604 	mvn.w	r6, #4
 8014fa2:	e796      	b.n	8014ed2 <Argus_InitMode+0x172>
 8014fa4:	0afb8550 	.word	0x0afb8550
 8014fa8:	0802e4f0 	.word	0x0802e4f0
 8014fac:	0802e564 	.word	0x0802e564
 8014fb0:	0802e618 	.word	0x0802e618
 8014fb4:	0802e52c 	.word	0x0802e52c
 8014fb8:	0802e5a0 	.word	0x0802e5a0
 8014fbc:	0802e710 	.word	0x0802e710
 8014fc0:	0802e794 	.word	0x0802e794
 8014fc4:	0802e65c 	.word	0x0802e65c
 8014fc8:	0802e5e4 	.word	0x0802e5e4
 8014fcc:	0802e69c 	.word	0x0802e69c
 8014fd0:	0802e6cc 	.word	0x0802e6cc
 8014fd4:	0802e4c4 	.word	0x0802e4c4
 8014fd8:	0802e350 	.word	0x0802e350

08014fdc <Argus_Deinit>:
 8014fdc:	b570      	push	{r4, r5, r6, lr}
 8014fde:	b330      	cbz	r0, 801502e <Argus_Deinit+0x52>
 8014fe0:	4b16      	ldr	r3, [pc, #88]	@ (801503c <Argus_Deinit+0x60>)
 8014fe2:	6802      	ldr	r2, [r0, #0]
 8014fe4:	429a      	cmp	r2, r3
 8014fe6:	4604      	mov	r4, r0
 8014fe8:	d11b      	bne.n	8015022 <Argus_Deinit+0x46>
 8014fea:	f200 76cc 	addw	r6, r0, #1996	@ 0x7cc
 8014fee:	4630      	mov	r0, r6
 8014ff0:	f003 fc3a 	bl	8018868 <Argus_Measurement_Abort>
 8014ff4:	1e05      	subs	r5, r0, #0
 8014ff6:	db0e      	blt.n	8015016 <Argus_Deinit+0x3a>
 8014ff8:	4630      	mov	r0, r6
 8014ffa:	f003 fc33 	bl	8018864 <Argus_Measurement_Deinit>
 8014ffe:	f640 62ec 	movw	r2, #3820	@ 0xeec
 8015002:	2100      	movs	r1, #0
 8015004:	4620      	mov	r0, r4
 8015006:	f015 ffd0 	bl	802afaa <memset>
 801500a:	f06f 0306 	mvn.w	r3, #6
 801500e:	6063      	str	r3, [r4, #4]
 8015010:	2500      	movs	r5, #0
 8015012:	4628      	mov	r0, r5
 8015014:	bd70      	pop	{r4, r5, r6, pc}
 8015016:	4629      	mov	r1, r5
 8015018:	4809      	ldr	r0, [pc, #36]	@ (8015040 <Argus_Deinit+0x64>)
 801501a:	f7f1 fa77 	bl	800650c <print>
 801501e:	4628      	mov	r0, r5
 8015020:	bd70      	pop	{r4, r5, r6, pc}
 8015022:	4808      	ldr	r0, [pc, #32]	@ (8015044 <Argus_Deinit+0x68>)
 8015024:	f7f1 fa72 	bl	800650c <print>
 8015028:	f06f 0506 	mvn.w	r5, #6
 801502c:	e7f1      	b.n	8015012 <Argus_Deinit+0x36>
 801502e:	4806      	ldr	r0, [pc, #24]	@ (8015048 <Argus_Deinit+0x6c>)
 8015030:	f7f1 fa6c 	bl	800650c <print>
 8015034:	f06f 0504 	mvn.w	r5, #4
 8015038:	e7eb      	b.n	8015012 <Argus_Deinit+0x36>
 801503a:	bf00      	nop
 801503c:	0afb8550 	.word	0x0afb8550
 8015040:	0802e7cc 	.word	0x0802e7cc
 8015044:	0802e378 	.word	0x0802e378
 8015048:	0802e350 	.word	0x0802e350

0801504c <Argus_Malloc>:
 801504c:	f015 b988 	b.w	802a360 <malloc>

08015050 <Argus_Free>:
 8015050:	f015 b98e 	b.w	802a370 <free>

08015054 <Argus_DestroyHandle>:
 8015054:	b510      	push	{r4, lr}
 8015056:	6804      	ldr	r4, [r0, #0]
 8015058:	b91c      	cbnz	r4, 8015062 <Argus_DestroyHandle+0xe>
 801505a:	f7ff fff9 	bl	8015050 <Argus_Free>
 801505e:	4620      	mov	r0, r4
 8015060:	bd10      	pop	{r4, pc}
 8015062:	f04f 30ff 	mov.w	r0, #4294967295
 8015066:	bd10      	pop	{r4, pc}

08015068 <Argus_CreateHandle>:
 8015068:	b510      	push	{r4, lr}
 801506a:	f640 60ec 	movw	r0, #3820	@ 0xeec
 801506e:	f7ff ffed 	bl	801504c <Argus_Malloc>
 8015072:	4604      	mov	r4, r0
 8015074:	b138      	cbz	r0, 8015086 <Argus_CreateHandle+0x1e>
 8015076:	f640 62ec 	movw	r2, #3820	@ 0xeec
 801507a:	2100      	movs	r1, #0
 801507c:	f015 ff95 	bl	802afaa <memset>
 8015080:	f06f 0306 	mvn.w	r3, #6
 8015084:	6063      	str	r3, [r4, #4]
 8015086:	4620      	mov	r0, r4
 8015088:	bd10      	pop	{r4, pc}
 801508a:	bf00      	nop

0801508c <Argus_GetStatus>:
 801508c:	b510      	push	{r4, lr}
 801508e:	b1a8      	cbz	r0, 80150bc <Argus_GetStatus+0x30>
 8015090:	4b0d      	ldr	r3, [pc, #52]	@ (80150c8 <Argus_GetStatus+0x3c>)
 8015092:	6802      	ldr	r2, [r0, #0]
 8015094:	429a      	cmp	r2, r3
 8015096:	4604      	mov	r4, r0
 8015098:	d10a      	bne.n	80150b0 <Argus_GetStatus+0x24>
 801509a:	f200 70cc 	addw	r0, r0, #1996	@ 0x7cc
 801509e:	f003 fcb1 	bl	8018a04 <Argus_Measurement_CheckTimeout>
 80150a2:	2800      	cmp	r0, #0
 80150a4:	db09      	blt.n	80150ba <Argus_GetStatus+0x2e>
 80150a6:	1d20      	adds	r0, r4, #4
 80150a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80150ac:	f00b bf62 	b.w	8020f74 <Argus_Dev_GetStatus>
 80150b0:	4806      	ldr	r0, [pc, #24]	@ (80150cc <Argus_GetStatus+0x40>)
 80150b2:	f7f1 fa2b 	bl	800650c <print>
 80150b6:	f06f 0006 	mvn.w	r0, #6
 80150ba:	bd10      	pop	{r4, pc}
 80150bc:	4804      	ldr	r0, [pc, #16]	@ (80150d0 <Argus_GetStatus+0x44>)
 80150be:	f7f1 fa25 	bl	800650c <print>
 80150c2:	f06f 0004 	mvn.w	r0, #4
 80150c6:	bd10      	pop	{r4, pc}
 80150c8:	0afb8550 	.word	0x0afb8550
 80150cc:	0802e378 	.word	0x0802e378
 80150d0:	0802e350 	.word	0x0802e350

080150d4 <Argus_IsDataEvaluationPending>:
 80150d4:	b538      	push	{r3, r4, r5, lr}
 80150d6:	b1d0      	cbz	r0, 801510e <Argus_IsDataEvaluationPending+0x3a>
 80150d8:	4b0f      	ldr	r3, [pc, #60]	@ (8015118 <Argus_IsDataEvaluationPending+0x44>)
 80150da:	6802      	ldr	r2, [r0, #0]
 80150dc:	429a      	cmp	r2, r3
 80150de:	4604      	mov	r4, r0
 80150e0:	d110      	bne.n	8015104 <Argus_IsDataEvaluationPending+0x30>
 80150e2:	f200 75cc 	addw	r5, r0, #1996	@ 0x7cc
 80150e6:	4628      	mov	r0, r5
 80150e8:	f003 fc8c 	bl	8018a04 <Argus_Measurement_CheckTimeout>
 80150ec:	2800      	cmp	r0, #0
 80150ee:	db0c      	blt.n	801510a <Argus_IsDataEvaluationPending+0x36>
 80150f0:	1d20      	adds	r0, r4, #4
 80150f2:	f00b ff3f 	bl	8020f74 <Argus_Dev_GetStatus>
 80150f6:	2800      	cmp	r0, #0
 80150f8:	db07      	blt.n	801510a <Argus_IsDataEvaluationPending+0x36>
 80150fa:	4628      	mov	r0, r5
 80150fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015100:	f003 bbcc 	b.w	801889c <Argus_Measurement_IsBufferBusy>
 8015104:	4805      	ldr	r0, [pc, #20]	@ (801511c <Argus_IsDataEvaluationPending+0x48>)
 8015106:	f7f1 fa01 	bl	800650c <print>
 801510a:	2000      	movs	r0, #0
 801510c:	bd38      	pop	{r3, r4, r5, pc}
 801510e:	4804      	ldr	r0, [pc, #16]	@ (8015120 <Argus_IsDataEvaluationPending+0x4c>)
 8015110:	f7f1 f9fc 	bl	800650c <print>
 8015114:	e7f9      	b.n	801510a <Argus_IsDataEvaluationPending+0x36>
 8015116:	bf00      	nop
 8015118:	0afb8550 	.word	0x0afb8550
 801511c:	0802e378 	.word	0x0802e378
 8015120:	0802e350 	.word	0x0802e350

08015124 <Argus_IsTimerMeasurementActive>:
 8015124:	b538      	push	{r3, r4, r5, lr}
 8015126:	b1d0      	cbz	r0, 801515e <Argus_IsTimerMeasurementActive+0x3a>
 8015128:	4b0f      	ldr	r3, [pc, #60]	@ (8015168 <Argus_IsTimerMeasurementActive+0x44>)
 801512a:	6802      	ldr	r2, [r0, #0]
 801512c:	429a      	cmp	r2, r3
 801512e:	4604      	mov	r4, r0
 8015130:	d110      	bne.n	8015154 <Argus_IsTimerMeasurementActive+0x30>
 8015132:	f200 75cc 	addw	r5, r0, #1996	@ 0x7cc
 8015136:	4628      	mov	r0, r5
 8015138:	f003 fc64 	bl	8018a04 <Argus_Measurement_CheckTimeout>
 801513c:	2800      	cmp	r0, #0
 801513e:	db0c      	blt.n	801515a <Argus_IsTimerMeasurementActive+0x36>
 8015140:	1d20      	adds	r0, r4, #4
 8015142:	f00b ff17 	bl	8020f74 <Argus_Dev_GetStatus>
 8015146:	2800      	cmp	r0, #0
 8015148:	db07      	blt.n	801515a <Argus_IsTimerMeasurementActive+0x36>
 801514a:	4628      	mov	r0, r5
 801514c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015150:	f003 bb9c 	b.w	801888c <Argus_Measurement_IsTimerActive>
 8015154:	4805      	ldr	r0, [pc, #20]	@ (801516c <Argus_IsTimerMeasurementActive+0x48>)
 8015156:	f7f1 f9d9 	bl	800650c <print>
 801515a:	2000      	movs	r0, #0
 801515c:	bd38      	pop	{r3, r4, r5, pc}
 801515e:	4804      	ldr	r0, [pc, #16]	@ (8015170 <Argus_IsTimerMeasurementActive+0x4c>)
 8015160:	f7f1 f9d4 	bl	800650c <print>
 8015164:	e7f9      	b.n	801515a <Argus_IsTimerMeasurementActive+0x36>
 8015166:	bf00      	nop
 8015168:	0afb8550 	.word	0x0afb8550
 801516c:	0802e378 	.word	0x0802e378
 8015170:	0802e350 	.word	0x0802e350

08015174 <Argus_StartMeasurementTimer>:
 8015174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015176:	b3d0      	cbz	r0, 80151ee <Argus_StartMeasurementTimer+0x7a>
 8015178:	4b20      	ldr	r3, [pc, #128]	@ (80151fc <Argus_StartMeasurementTimer+0x88>)
 801517a:	6802      	ldr	r2, [r0, #0]
 801517c:	429a      	cmp	r2, r3
 801517e:	4604      	mov	r4, r0
 8015180:	d12c      	bne.n	80151dc <Argus_StartMeasurementTimer+0x68>
 8015182:	1d07      	adds	r7, r0, #4
 8015184:	4638      	mov	r0, r7
 8015186:	460d      	mov	r5, r1
 8015188:	f00b fef4 	bl	8020f74 <Argus_Dev_GetStatus>
 801518c:	1e06      	subs	r6, r0, #0
 801518e:	db0f      	blt.n	80151b0 <Argus_StartMeasurementTimer+0x3c>
 8015190:	f204 76cc 	addw	r6, r4, #1996	@ 0x7cc
 8015194:	4630      	mov	r0, r6
 8015196:	f003 fc35 	bl	8018a04 <Argus_Measurement_CheckTimeout>
 801519a:	2800      	cmp	r0, #0
 801519c:	db14      	blt.n	80151c8 <Argus_StartMeasurementTimer+0x54>
 801519e:	b31d      	cbz	r5, 80151e8 <Argus_StartMeasurementTimer+0x74>
 80151a0:	4622      	mov	r2, r4
 80151a2:	4629      	mov	r1, r5
 80151a4:	f204 70cc 	addw	r0, r4, #1996	@ 0x7cc
 80151a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80151ac:	f003 bd7e 	b.w	8018cac <Argus_Measurement_StartTimer>
 80151b0:	4638      	mov	r0, r7
 80151b2:	f00c ff35 	bl	8022020 <Argus_Dev_RecoverFromError>
 80151b6:	1e07      	subs	r7, r0, #0
 80151b8:	daf1      	bge.n	801519e <Argus_StartMeasurementTimer+0x2a>
 80151ba:	4811      	ldr	r0, [pc, #68]	@ (8015200 <Argus_StartMeasurementTimer+0x8c>)
 80151bc:	463a      	mov	r2, r7
 80151be:	4631      	mov	r1, r6
 80151c0:	f7f1 f9a4 	bl	800650c <print>
 80151c4:	4638      	mov	r0, r7
 80151c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151c8:	4630      	mov	r0, r6
 80151ca:	f003 fb4d 	bl	8018868 <Argus_Measurement_Abort>
 80151ce:	1e07      	subs	r7, r0, #0
 80151d0:	dae5      	bge.n	801519e <Argus_StartMeasurementTimer+0x2a>
 80151d2:	4639      	mov	r1, r7
 80151d4:	480b      	ldr	r0, [pc, #44]	@ (8015204 <Argus_StartMeasurementTimer+0x90>)
 80151d6:	f7f1 f999 	bl	800650c <print>
 80151da:	e7f3      	b.n	80151c4 <Argus_StartMeasurementTimer+0x50>
 80151dc:	480a      	ldr	r0, [pc, #40]	@ (8015208 <Argus_StartMeasurementTimer+0x94>)
 80151de:	f7f1 f995 	bl	800650c <print>
 80151e2:	f06f 0706 	mvn.w	r7, #6
 80151e6:	e7ed      	b.n	80151c4 <Argus_StartMeasurementTimer+0x50>
 80151e8:	f06f 0704 	mvn.w	r7, #4
 80151ec:	e7ea      	b.n	80151c4 <Argus_StartMeasurementTimer+0x50>
 80151ee:	4807      	ldr	r0, [pc, #28]	@ (801520c <Argus_StartMeasurementTimer+0x98>)
 80151f0:	f7f1 f98c 	bl	800650c <print>
 80151f4:	f06f 0704 	mvn.w	r7, #4
 80151f8:	e7e4      	b.n	80151c4 <Argus_StartMeasurementTimer+0x50>
 80151fa:	bf00      	nop
 80151fc:	0afb8550 	.word	0x0afb8550
 8015200:	0802e3a0 	.word	0x0802e3a0
 8015204:	0802e3dc 	.word	0x0802e3dc
 8015208:	0802e378 	.word	0x0802e378
 801520c:	0802e350 	.word	0x0802e350

08015210 <Argus_StopMeasurementTimer>:
 8015210:	b570      	push	{r4, r5, r6, lr}
 8015212:	b3c8      	cbz	r0, 8015288 <Argus_StopMeasurementTimer+0x78>
 8015214:	4b1f      	ldr	r3, [pc, #124]	@ (8015294 <Argus_StopMeasurementTimer+0x84>)
 8015216:	6802      	ldr	r2, [r0, #0]
 8015218:	429a      	cmp	r2, r3
 801521a:	4604      	mov	r4, r0
 801521c:	d12e      	bne.n	801527c <Argus_StopMeasurementTimer+0x6c>
 801521e:	1d06      	adds	r6, r0, #4
 8015220:	4630      	mov	r0, r6
 8015222:	f00b fea7 	bl	8020f74 <Argus_Dev_GetStatus>
 8015226:	1e05      	subs	r5, r0, #0
 8015228:	db0b      	blt.n	8015242 <Argus_StopMeasurementTimer+0x32>
 801522a:	f204 74cc 	addw	r4, r4, #1996	@ 0x7cc
 801522e:	4620      	mov	r0, r4
 8015230:	f003 fbe8 	bl	8018a04 <Argus_Measurement_CheckTimeout>
 8015234:	2800      	cmp	r0, #0
 8015236:	db10      	blt.n	801525a <Argus_StopMeasurementTimer+0x4a>
 8015238:	4620      	mov	r0, r4
 801523a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801523e:	f003 bd4f 	b.w	8018ce0 <Argus_Measurement_StopTimer>
 8015242:	4630      	mov	r0, r6
 8015244:	f00c feec 	bl	8022020 <Argus_Dev_RecoverFromError>
 8015248:	1e06      	subs	r6, r0, #0
 801524a:	db10      	blt.n	801526e <Argus_StopMeasurementTimer+0x5e>
 801524c:	f204 74cc 	addw	r4, r4, #1996	@ 0x7cc
 8015250:	4620      	mov	r0, r4
 8015252:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015256:	f003 bd43 	b.w	8018ce0 <Argus_Measurement_StopTimer>
 801525a:	4620      	mov	r0, r4
 801525c:	f003 fb04 	bl	8018868 <Argus_Measurement_Abort>
 8015260:	1e06      	subs	r6, r0, #0
 8015262:	dae9      	bge.n	8015238 <Argus_StopMeasurementTimer+0x28>
 8015264:	4631      	mov	r1, r6
 8015266:	480c      	ldr	r0, [pc, #48]	@ (8015298 <Argus_StopMeasurementTimer+0x88>)
 8015268:	f7f1 f950 	bl	800650c <print>
 801526c:	e004      	b.n	8015278 <Argus_StopMeasurementTimer+0x68>
 801526e:	480b      	ldr	r0, [pc, #44]	@ (801529c <Argus_StopMeasurementTimer+0x8c>)
 8015270:	4632      	mov	r2, r6
 8015272:	4629      	mov	r1, r5
 8015274:	f7f1 f94a 	bl	800650c <print>
 8015278:	4630      	mov	r0, r6
 801527a:	bd70      	pop	{r4, r5, r6, pc}
 801527c:	4808      	ldr	r0, [pc, #32]	@ (80152a0 <Argus_StopMeasurementTimer+0x90>)
 801527e:	f7f1 f945 	bl	800650c <print>
 8015282:	f06f 0606 	mvn.w	r6, #6
 8015286:	e7f7      	b.n	8015278 <Argus_StopMeasurementTimer+0x68>
 8015288:	4806      	ldr	r0, [pc, #24]	@ (80152a4 <Argus_StopMeasurementTimer+0x94>)
 801528a:	f7f1 f93f 	bl	800650c <print>
 801528e:	f06f 0604 	mvn.w	r6, #4
 8015292:	e7f1      	b.n	8015278 <Argus_StopMeasurementTimer+0x68>
 8015294:	0afb8550 	.word	0x0afb8550
 8015298:	0802e3dc 	.word	0x0802e3dc
 801529c:	0802e3a0 	.word	0x0802e3a0
 80152a0:	0802e378 	.word	0x0802e378
 80152a4:	0802e350 	.word	0x0802e350

080152a8 <Argus_TriggerMeasurement>:
 80152a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152aa:	2800      	cmp	r0, #0
 80152ac:	d03e      	beq.n	801532c <Argus_TriggerMeasurement+0x84>
 80152ae:	4b22      	ldr	r3, [pc, #136]	@ (8015338 <Argus_TriggerMeasurement+0x90>)
 80152b0:	6802      	ldr	r2, [r0, #0]
 80152b2:	429a      	cmp	r2, r3
 80152b4:	4604      	mov	r4, r0
 80152b6:	d133      	bne.n	8015320 <Argus_TriggerMeasurement+0x78>
 80152b8:	1d07      	adds	r7, r0, #4
 80152ba:	4638      	mov	r0, r7
 80152bc:	460e      	mov	r6, r1
 80152be:	f00b fe59 	bl	8020f74 <Argus_Dev_GetStatus>
 80152c2:	1e05      	subs	r5, r0, #0
 80152c4:	db0d      	blt.n	80152e2 <Argus_TriggerMeasurement+0x3a>
 80152c6:	f204 75cc 	addw	r5, r4, #1996	@ 0x7cc
 80152ca:	4628      	mov	r0, r5
 80152cc:	f003 fb9a 	bl	8018a04 <Argus_Measurement_CheckTimeout>
 80152d0:	2800      	cmp	r0, #0
 80152d2:	db14      	blt.n	80152fe <Argus_TriggerMeasurement+0x56>
 80152d4:	4622      	mov	r2, r4
 80152d6:	4631      	mov	r1, r6
 80152d8:	4628      	mov	r0, r5
 80152da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80152de:	f003 baf7 	b.w	80188d0 <Argus_Measurement_Trigger>
 80152e2:	4638      	mov	r0, r7
 80152e4:	f00c fe9c 	bl	8022020 <Argus_Dev_RecoverFromError>
 80152e8:	1e07      	subs	r7, r0, #0
 80152ea:	db12      	blt.n	8015312 <Argus_TriggerMeasurement+0x6a>
 80152ec:	f204 75cc 	addw	r5, r4, #1996	@ 0x7cc
 80152f0:	4622      	mov	r2, r4
 80152f2:	4631      	mov	r1, r6
 80152f4:	4628      	mov	r0, r5
 80152f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80152fa:	f003 bae9 	b.w	80188d0 <Argus_Measurement_Trigger>
 80152fe:	4628      	mov	r0, r5
 8015300:	f003 fab2 	bl	8018868 <Argus_Measurement_Abort>
 8015304:	1e07      	subs	r7, r0, #0
 8015306:	dae5      	bge.n	80152d4 <Argus_TriggerMeasurement+0x2c>
 8015308:	4639      	mov	r1, r7
 801530a:	480c      	ldr	r0, [pc, #48]	@ (801533c <Argus_TriggerMeasurement+0x94>)
 801530c:	f7f1 f8fe 	bl	800650c <print>
 8015310:	e004      	b.n	801531c <Argus_TriggerMeasurement+0x74>
 8015312:	480b      	ldr	r0, [pc, #44]	@ (8015340 <Argus_TriggerMeasurement+0x98>)
 8015314:	463a      	mov	r2, r7
 8015316:	4629      	mov	r1, r5
 8015318:	f7f1 f8f8 	bl	800650c <print>
 801531c:	4638      	mov	r0, r7
 801531e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015320:	4808      	ldr	r0, [pc, #32]	@ (8015344 <Argus_TriggerMeasurement+0x9c>)
 8015322:	f7f1 f8f3 	bl	800650c <print>
 8015326:	f06f 0706 	mvn.w	r7, #6
 801532a:	e7f7      	b.n	801531c <Argus_TriggerMeasurement+0x74>
 801532c:	4806      	ldr	r0, [pc, #24]	@ (8015348 <Argus_TriggerMeasurement+0xa0>)
 801532e:	f7f1 f8ed 	bl	800650c <print>
 8015332:	f06f 0704 	mvn.w	r7, #4
 8015336:	e7f1      	b.n	801531c <Argus_TriggerMeasurement+0x74>
 8015338:	0afb8550 	.word	0x0afb8550
 801533c:	0802e3dc 	.word	0x0802e3dc
 8015340:	0802e3a0 	.word	0x0802e3a0
 8015344:	0802e378 	.word	0x0802e378
 8015348:	0802e350 	.word	0x0802e350

0801534c <Argus_ExecuteXtalkCalibrationSequence>:
 801534c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801534e:	2800      	cmp	r0, #0
 8015350:	d046      	beq.n	80153e0 <Argus_ExecuteXtalkCalibrationSequence+0x94>
 8015352:	4b26      	ldr	r3, [pc, #152]	@ (80153ec <Argus_ExecuteXtalkCalibrationSequence+0xa0>)
 8015354:	6802      	ldr	r2, [r0, #0]
 8015356:	429a      	cmp	r2, r3
 8015358:	4604      	mov	r4, r0
 801535a:	d135      	bne.n	80153c8 <Argus_ExecuteXtalkCalibrationSequence+0x7c>
 801535c:	1d06      	adds	r6, r0, #4
 801535e:	4630      	mov	r0, r6
 8015360:	f00b fe08 	bl	8020f74 <Argus_Dev_GetStatus>
 8015364:	1e05      	subs	r5, r0, #0
 8015366:	db0f      	blt.n	8015388 <Argus_ExecuteXtalkCalibrationSequence+0x3c>
 8015368:	f204 77cc 	addw	r7, r4, #1996	@ 0x7cc
 801536c:	4638      	mov	r0, r7
 801536e:	f003 fb49 	bl	8018a04 <Argus_Measurement_CheckTimeout>
 8015372:	2800      	cmp	r0, #0
 8015374:	db18      	blt.n	80153a8 <Argus_ExecuteXtalkCalibrationSequence+0x5c>
 8015376:	b175      	cbz	r5, 8015396 <Argus_ExecuteXtalkCalibrationSequence+0x4a>
 8015378:	481d      	ldr	r0, [pc, #116]	@ (80153f0 <Argus_ExecuteXtalkCalibrationSequence+0xa4>)
 801537a:	4629      	mov	r1, r5
 801537c:	f7f1 f8c6 	bl	800650c <print>
 8015380:	f06f 06be 	mvn.w	r6, #190	@ 0xbe
 8015384:	4630      	mov	r0, r6
 8015386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015388:	4630      	mov	r0, r6
 801538a:	f00c fe49 	bl	8022020 <Argus_Dev_RecoverFromError>
 801538e:	1e06      	subs	r6, r0, #0
 8015390:	db14      	blt.n	80153bc <Argus_ExecuteXtalkCalibrationSequence+0x70>
 8015392:	f204 77cc 	addw	r7, r4, #1996	@ 0x7cc
 8015396:	4638      	mov	r0, r7
 8015398:	f003 fa8c 	bl	80188b4 <Argus_Measurement_IsActive>
 801539c:	b9d0      	cbnz	r0, 80153d4 <Argus_ExecuteXtalkCalibrationSequence+0x88>
 801539e:	4620      	mov	r0, r4
 80153a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80153a4:	f003 b83e 	b.w	8018424 <Argus_Core_ExecuteXtalkCalibrationSequence>
 80153a8:	4638      	mov	r0, r7
 80153aa:	f003 fa5d 	bl	8018868 <Argus_Measurement_Abort>
 80153ae:	1e06      	subs	r6, r0, #0
 80153b0:	daf1      	bge.n	8015396 <Argus_ExecuteXtalkCalibrationSequence+0x4a>
 80153b2:	4631      	mov	r1, r6
 80153b4:	480f      	ldr	r0, [pc, #60]	@ (80153f4 <Argus_ExecuteXtalkCalibrationSequence+0xa8>)
 80153b6:	f7f1 f8a9 	bl	800650c <print>
 80153ba:	e7e3      	b.n	8015384 <Argus_ExecuteXtalkCalibrationSequence+0x38>
 80153bc:	4632      	mov	r2, r6
 80153be:	4629      	mov	r1, r5
 80153c0:	480d      	ldr	r0, [pc, #52]	@ (80153f8 <Argus_ExecuteXtalkCalibrationSequence+0xac>)
 80153c2:	f7f1 f8a3 	bl	800650c <print>
 80153c6:	e7dd      	b.n	8015384 <Argus_ExecuteXtalkCalibrationSequence+0x38>
 80153c8:	480c      	ldr	r0, [pc, #48]	@ (80153fc <Argus_ExecuteXtalkCalibrationSequence+0xb0>)
 80153ca:	f7f1 f89f 	bl	800650c <print>
 80153ce:	f06f 0606 	mvn.w	r6, #6
 80153d2:	e7d7      	b.n	8015384 <Argus_ExecuteXtalkCalibrationSequence+0x38>
 80153d4:	480a      	ldr	r0, [pc, #40]	@ (8015400 <Argus_ExecuteXtalkCalibrationSequence+0xb4>)
 80153d6:	f7f1 f899 	bl	800650c <print>
 80153da:	f06f 06be 	mvn.w	r6, #190	@ 0xbe
 80153de:	e7d1      	b.n	8015384 <Argus_ExecuteXtalkCalibrationSequence+0x38>
 80153e0:	4808      	ldr	r0, [pc, #32]	@ (8015404 <Argus_ExecuteXtalkCalibrationSequence+0xb8>)
 80153e2:	f7f1 f893 	bl	800650c <print>
 80153e6:	f06f 0604 	mvn.w	r6, #4
 80153ea:	e7cb      	b.n	8015384 <Argus_ExecuteXtalkCalibrationSequence+0x38>
 80153ec:	0afb8550 	.word	0x0afb8550
 80153f0:	0802e414 	.word	0x0802e414
 80153f4:	0802e3dc 	.word	0x0802e3dc
 80153f8:	0802e3a0 	.word	0x0802e3a0
 80153fc:	0802e378 	.word	0x0802e378
 8015400:	0802e47c 	.word	0x0802e47c
 8015404:	0802e350 	.word	0x0802e350

08015408 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence>:
 8015408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801540a:	2800      	cmp	r0, #0
 801540c:	d048      	beq.n	80154a0 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0x98>
 801540e:	4b27      	ldr	r3, [pc, #156]	@ (80154ac <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0xa4>)
 8015410:	6802      	ldr	r2, [r0, #0]
 8015412:	429a      	cmp	r2, r3
 8015414:	4604      	mov	r4, r0
 8015416:	d137      	bne.n	8015488 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0x80>
 8015418:	1d06      	adds	r6, r0, #4
 801541a:	4630      	mov	r0, r6
 801541c:	f00b fdaa 	bl	8020f74 <Argus_Dev_GetStatus>
 8015420:	1e05      	subs	r5, r0, #0
 8015422:	db0f      	blt.n	8015444 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0x3c>
 8015424:	f204 77cc 	addw	r7, r4, #1996	@ 0x7cc
 8015428:	4638      	mov	r0, r7
 801542a:	f003 faeb 	bl	8018a04 <Argus_Measurement_CheckTimeout>
 801542e:	2800      	cmp	r0, #0
 8015430:	db1a      	blt.n	8015468 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0x60>
 8015432:	b175      	cbz	r5, 8015452 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0x4a>
 8015434:	481e      	ldr	r0, [pc, #120]	@ (80154b0 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0xa8>)
 8015436:	4629      	mov	r1, r5
 8015438:	f7f1 f868 	bl	800650c <print>
 801543c:	f06f 06be 	mvn.w	r6, #190	@ 0xbe
 8015440:	4630      	mov	r0, r6
 8015442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015444:	4630      	mov	r0, r6
 8015446:	f00c fdeb 	bl	8022020 <Argus_Dev_RecoverFromError>
 801544a:	1e06      	subs	r6, r0, #0
 801544c:	db16      	blt.n	801547c <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0x74>
 801544e:	f204 77cc 	addw	r7, r4, #1996	@ 0x7cc
 8015452:	4638      	mov	r0, r7
 8015454:	f003 fa2e 	bl	80188b4 <Argus_Measurement_IsActive>
 8015458:	b9e0      	cbnz	r0, 8015494 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0x8c>
 801545a:	4620      	mov	r0, r4
 801545c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8015460:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015464:	f002 bfe8 	b.w	8018438 <Argus_Core_ExecuteRangeOffsetCalibrationSequence>
 8015468:	4638      	mov	r0, r7
 801546a:	f003 f9fd 	bl	8018868 <Argus_Measurement_Abort>
 801546e:	1e06      	subs	r6, r0, #0
 8015470:	daef      	bge.n	8015452 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0x4a>
 8015472:	4631      	mov	r1, r6
 8015474:	480f      	ldr	r0, [pc, #60]	@ (80154b4 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0xac>)
 8015476:	f7f1 f849 	bl	800650c <print>
 801547a:	e7e1      	b.n	8015440 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0x38>
 801547c:	4632      	mov	r2, r6
 801547e:	4629      	mov	r1, r5
 8015480:	480d      	ldr	r0, [pc, #52]	@ (80154b8 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0xb0>)
 8015482:	f7f1 f843 	bl	800650c <print>
 8015486:	e7db      	b.n	8015440 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0x38>
 8015488:	480c      	ldr	r0, [pc, #48]	@ (80154bc <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0xb4>)
 801548a:	f7f1 f83f 	bl	800650c <print>
 801548e:	f06f 0606 	mvn.w	r6, #6
 8015492:	e7d5      	b.n	8015440 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0x38>
 8015494:	480a      	ldr	r0, [pc, #40]	@ (80154c0 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0xb8>)
 8015496:	f7f1 f839 	bl	800650c <print>
 801549a:	f06f 06be 	mvn.w	r6, #190	@ 0xbe
 801549e:	e7cf      	b.n	8015440 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0x38>
 80154a0:	4808      	ldr	r0, [pc, #32]	@ (80154c4 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0xbc>)
 80154a2:	f7f1 f833 	bl	800650c <print>
 80154a6:	f06f 0604 	mvn.w	r6, #4
 80154aa:	e7c9      	b.n	8015440 <Argus_ExecuteRelativeRangeOffsetCalibrationSequence+0x38>
 80154ac:	0afb8550 	.word	0x0afb8550
 80154b0:	0802e414 	.word	0x0802e414
 80154b4:	0802e3dc 	.word	0x0802e3dc
 80154b8:	0802e3a0 	.word	0x0802e3a0
 80154bc:	0802e378 	.word	0x0802e378
 80154c0:	0802e47c 	.word	0x0802e47c
 80154c4:	0802e350 	.word	0x0802e350

080154c8 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence>:
 80154c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154cc:	2800      	cmp	r0, #0
 80154ce:	d049      	beq.n	8015564 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0x9c>
 80154d0:	4b27      	ldr	r3, [pc, #156]	@ (8015570 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0xa8>)
 80154d2:	6802      	ldr	r2, [r0, #0]
 80154d4:	429a      	cmp	r2, r3
 80154d6:	4604      	mov	r4, r0
 80154d8:	d138      	bne.n	801554c <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0x84>
 80154da:	1d07      	adds	r7, r0, #4
 80154dc:	4638      	mov	r0, r7
 80154de:	460e      	mov	r6, r1
 80154e0:	f00b fd48 	bl	8020f74 <Argus_Dev_GetStatus>
 80154e4:	1e05      	subs	r5, r0, #0
 80154e6:	db10      	blt.n	801550a <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0x42>
 80154e8:	f204 78cc 	addw	r8, r4, #1996	@ 0x7cc
 80154ec:	4640      	mov	r0, r8
 80154ee:	f003 fa89 	bl	8018a04 <Argus_Measurement_CheckTimeout>
 80154f2:	2800      	cmp	r0, #0
 80154f4:	db1a      	blt.n	801552c <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0x64>
 80154f6:	b17d      	cbz	r5, 8015518 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0x50>
 80154f8:	481e      	ldr	r0, [pc, #120]	@ (8015574 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0xac>)
 80154fa:	4629      	mov	r1, r5
 80154fc:	f7f1 f806 	bl	800650c <print>
 8015500:	f06f 07be 	mvn.w	r7, #190	@ 0xbe
 8015504:	4638      	mov	r0, r7
 8015506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801550a:	4638      	mov	r0, r7
 801550c:	f00c fd88 	bl	8022020 <Argus_Dev_RecoverFromError>
 8015510:	1e07      	subs	r7, r0, #0
 8015512:	db15      	blt.n	8015540 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0x78>
 8015514:	f204 78cc 	addw	r8, r4, #1996	@ 0x7cc
 8015518:	4640      	mov	r0, r8
 801551a:	f003 f9cb 	bl	80188b4 <Argus_Measurement_IsActive>
 801551e:	b9d8      	cbnz	r0, 8015558 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0x90>
 8015520:	4631      	mov	r1, r6
 8015522:	4620      	mov	r0, r4
 8015524:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015528:	f002 bf86 	b.w	8018438 <Argus_Core_ExecuteRangeOffsetCalibrationSequence>
 801552c:	4640      	mov	r0, r8
 801552e:	f003 f99b 	bl	8018868 <Argus_Measurement_Abort>
 8015532:	1e07      	subs	r7, r0, #0
 8015534:	daf0      	bge.n	8015518 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0x50>
 8015536:	4639      	mov	r1, r7
 8015538:	480f      	ldr	r0, [pc, #60]	@ (8015578 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0xb0>)
 801553a:	f7f0 ffe7 	bl	800650c <print>
 801553e:	e7e1      	b.n	8015504 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0x3c>
 8015540:	463a      	mov	r2, r7
 8015542:	4629      	mov	r1, r5
 8015544:	480d      	ldr	r0, [pc, #52]	@ (801557c <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0xb4>)
 8015546:	f7f0 ffe1 	bl	800650c <print>
 801554a:	e7db      	b.n	8015504 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0x3c>
 801554c:	480c      	ldr	r0, [pc, #48]	@ (8015580 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0xb8>)
 801554e:	f7f0 ffdd 	bl	800650c <print>
 8015552:	f06f 0706 	mvn.w	r7, #6
 8015556:	e7d5      	b.n	8015504 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0x3c>
 8015558:	480a      	ldr	r0, [pc, #40]	@ (8015584 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0xbc>)
 801555a:	f7f0 ffd7 	bl	800650c <print>
 801555e:	f06f 07be 	mvn.w	r7, #190	@ 0xbe
 8015562:	e7cf      	b.n	8015504 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0x3c>
 8015564:	4808      	ldr	r0, [pc, #32]	@ (8015588 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0xc0>)
 8015566:	f7f0 ffd1 	bl	800650c <print>
 801556a:	f06f 0704 	mvn.w	r7, #4
 801556e:	e7c9      	b.n	8015504 <Argus_ExecuteAbsoluteRangeOffsetCalibrationSequence+0x3c>
 8015570:	0afb8550 	.word	0x0afb8550
 8015574:	0802e414 	.word	0x0802e414
 8015578:	0802e3dc 	.word	0x0802e3dc
 801557c:	0802e3a0 	.word	0x0802e3a0
 8015580:	0802e378 	.word	0x0802e378
 8015584:	0802e47c 	.word	0x0802e47c
 8015588:	0802e350 	.word	0x0802e350

0801558c <Argus_Abort>:
 801558c:	b508      	push	{r3, lr}
 801558e:	b178      	cbz	r0, 80155b0 <Argus_Abort+0x24>
 8015590:	4b0a      	ldr	r3, [pc, #40]	@ (80155bc <Argus_Abort+0x30>)
 8015592:	6802      	ldr	r2, [r0, #0]
 8015594:	429a      	cmp	r2, r3
 8015596:	d105      	bne.n	80155a4 <Argus_Abort+0x18>
 8015598:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801559c:	f200 70cc 	addw	r0, r0, #1996	@ 0x7cc
 80155a0:	f003 b962 	b.w	8018868 <Argus_Measurement_Abort>
 80155a4:	4806      	ldr	r0, [pc, #24]	@ (80155c0 <Argus_Abort+0x34>)
 80155a6:	f7f0 ffb1 	bl	800650c <print>
 80155aa:	f06f 0006 	mvn.w	r0, #6
 80155ae:	bd08      	pop	{r3, pc}
 80155b0:	4804      	ldr	r0, [pc, #16]	@ (80155c4 <Argus_Abort+0x38>)
 80155b2:	f7f0 ffab 	bl	800650c <print>
 80155b6:	f06f 0004 	mvn.w	r0, #4
 80155ba:	bd08      	pop	{r3, pc}
 80155bc:	0afb8550 	.word	0x0afb8550
 80155c0:	0802e378 	.word	0x0802e378
 80155c4:	0802e350 	.word	0x0802e350

080155c8 <Argus_EvaluateDataDebug>:
 80155c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155cc:	b358      	cbz	r0, 8015626 <Argus_EvaluateDataDebug+0x5e>
 80155ce:	4b19      	ldr	r3, [pc, #100]	@ (8015634 <Argus_EvaluateDataDebug+0x6c>)
 80155d0:	4617      	mov	r7, r2
 80155d2:	6802      	ldr	r2, [r0, #0]
 80155d4:	429a      	cmp	r2, r3
 80155d6:	4604      	mov	r4, r0
 80155d8:	d118      	bne.n	801560c <Argus_EvaluateDataDebug+0x44>
 80155da:	460e      	mov	r6, r1
 80155dc:	b1e1      	cbz	r1, 8015618 <Argus_EvaluateDataDebug+0x50>
 80155de:	f200 78cc 	addw	r8, r0, #1996	@ 0x7cc
 80155e2:	4640      	mov	r0, r8
 80155e4:	f003 fbc2 	bl	8018d6c <Argus_Measurement_GetRawDataBuffer>
 80155e8:	4605      	mov	r5, r0
 80155ea:	b1c0      	cbz	r0, 801561e <Argus_EvaluateDataDebug+0x56>
 80155ec:	f604 307c 	addw	r0, r4, #2940	@ 0xb7c
 80155f0:	463b      	mov	r3, r7
 80155f2:	4632      	mov	r2, r6
 80155f4:	4629      	mov	r1, r5
 80155f6:	2400      	movs	r4, #0
 80155f8:	f005 f9d4 	bl	801a9a4 <Argus_Eval_Apply>
 80155fc:	f885 41c5 	strb.w	r4, [r5, #453]	@ 0x1c5
 8015600:	4640      	mov	r0, r8
 8015602:	f003 fbdd 	bl	8018dc0 <Argus_Measurement_Start>
 8015606:	4620      	mov	r0, r4
 8015608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801560c:	480a      	ldr	r0, [pc, #40]	@ (8015638 <Argus_EvaluateDataDebug+0x70>)
 801560e:	f7f0 ff7d 	bl	800650c <print>
 8015612:	f06f 0006 	mvn.w	r0, #6
 8015616:	e7f7      	b.n	8015608 <Argus_EvaluateDataDebug+0x40>
 8015618:	f06f 0004 	mvn.w	r0, #4
 801561c:	e7f4      	b.n	8015608 <Argus_EvaluateDataDebug+0x40>
 801561e:	f06f 0066 	mvn.w	r0, #102	@ 0x66
 8015622:	6030      	str	r0, [r6, #0]
 8015624:	e7f0      	b.n	8015608 <Argus_EvaluateDataDebug+0x40>
 8015626:	4805      	ldr	r0, [pc, #20]	@ (801563c <Argus_EvaluateDataDebug+0x74>)
 8015628:	f7f0 ff70 	bl	800650c <print>
 801562c:	f06f 0004 	mvn.w	r0, #4
 8015630:	e7ea      	b.n	8015608 <Argus_EvaluateDataDebug+0x40>
 8015632:	bf00      	nop
 8015634:	0afb8550 	.word	0x0afb8550
 8015638:	0802e378 	.word	0x0802e378
 801563c:	0802e350 	.word	0x0802e350

08015640 <Argus_Ping>:
 8015640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015642:	2800      	cmp	r0, #0
 8015644:	d03f      	beq.n	80156c6 <Argus_Ping+0x86>
 8015646:	4b23      	ldr	r3, [pc, #140]	@ (80156d4 <Argus_Ping+0x94>)
 8015648:	6802      	ldr	r2, [r0, #0]
 801564a:	429a      	cmp	r2, r3
 801564c:	4604      	mov	r4, r0
 801564e:	d134      	bne.n	80156ba <Argus_Ping+0x7a>
 8015650:	1d06      	adds	r6, r0, #4
 8015652:	4630      	mov	r0, r6
 8015654:	f00b fc8e 	bl	8020f74 <Argus_Dev_GetStatus>
 8015658:	1e05      	subs	r5, r0, #0
 801565a:	db13      	blt.n	8015684 <Argus_Ping+0x44>
 801565c:	f204 77cc 	addw	r7, r4, #1996	@ 0x7cc
 8015660:	4638      	mov	r0, r7
 8015662:	f003 f9cf 	bl	8018a04 <Argus_Measurement_CheckTimeout>
 8015666:	2800      	cmp	r0, #0
 8015668:	db18      	blt.n	801569c <Argus_Ping+0x5c>
 801566a:	b12d      	cbz	r5, 8015678 <Argus_Ping+0x38>
 801566c:	4630      	mov	r0, r6
 801566e:	2100      	movs	r1, #0
 8015670:	f00b faf2 	bl	8020c58 <Argus_Dev_AwaitStatus>
 8015674:	1e06      	subs	r6, r0, #0
 8015676:	db1b      	blt.n	80156b0 <Argus_Ping+0x70>
 8015678:	f504 70ee 	add.w	r0, r4, #476	@ 0x1dc
 801567c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015680:	f00d be58 	b.w	8023334 <Argus_Cfg_TestConnection>
 8015684:	4630      	mov	r0, r6
 8015686:	f00c fccb 	bl	8022020 <Argus_Dev_RecoverFromError>
 801568a:	1e06      	subs	r6, r0, #0
 801568c:	daf4      	bge.n	8015678 <Argus_Ping+0x38>
 801568e:	4812      	ldr	r0, [pc, #72]	@ (80156d8 <Argus_Ping+0x98>)
 8015690:	4632      	mov	r2, r6
 8015692:	4629      	mov	r1, r5
 8015694:	f7f0 ff3a 	bl	800650c <print>
 8015698:	4630      	mov	r0, r6
 801569a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801569c:	4638      	mov	r0, r7
 801569e:	f003 f8e3 	bl	8018868 <Argus_Measurement_Abort>
 80156a2:	1e06      	subs	r6, r0, #0
 80156a4:	dae8      	bge.n	8015678 <Argus_Ping+0x38>
 80156a6:	4631      	mov	r1, r6
 80156a8:	480c      	ldr	r0, [pc, #48]	@ (80156dc <Argus_Ping+0x9c>)
 80156aa:	f7f0 ff2f 	bl	800650c <print>
 80156ae:	e7f3      	b.n	8015698 <Argus_Ping+0x58>
 80156b0:	4631      	mov	r1, r6
 80156b2:	480b      	ldr	r0, [pc, #44]	@ (80156e0 <Argus_Ping+0xa0>)
 80156b4:	f7f0 ff2a 	bl	800650c <print>
 80156b8:	e7ee      	b.n	8015698 <Argus_Ping+0x58>
 80156ba:	480a      	ldr	r0, [pc, #40]	@ (80156e4 <Argus_Ping+0xa4>)
 80156bc:	f7f0 ff26 	bl	800650c <print>
 80156c0:	f06f 0606 	mvn.w	r6, #6
 80156c4:	e7e8      	b.n	8015698 <Argus_Ping+0x58>
 80156c6:	4808      	ldr	r0, [pc, #32]	@ (80156e8 <Argus_Ping+0xa8>)
 80156c8:	f7f0 ff20 	bl	800650c <print>
 80156cc:	f06f 0604 	mvn.w	r6, #4
 80156d0:	e7e2      	b.n	8015698 <Argus_Ping+0x58>
 80156d2:	bf00      	nop
 80156d4:	0afb8550 	.word	0x0afb8550
 80156d8:	0802e3a0 	.word	0x0802e3a0
 80156dc:	0802e3dc 	.word	0x0802e3dc
 80156e0:	0802e43c 	.word	0x0802e43c
 80156e4:	0802e378 	.word	0x0802e378
 80156e8:	0802e350 	.word	0x0802e350

080156ec <Argus_GetAPIVersion>:
 80156ec:	4800      	ldr	r0, [pc, #0]	@ (80156f0 <Argus_GetAPIVersion+0x4>)
 80156ee:	4770      	bx	lr
 80156f0:	01050006 	.word	0x01050006

080156f4 <Argus_GetBuildNumber>:
 80156f4:	4800      	ldr	r0, [pc, #0]	@ (80156f8 <Argus_GetBuildNumber+0x4>)
 80156f6:	4770      	bx	lr
 80156f8:	0802e810 	.word	0x0802e810

080156fc <Argus_GetModuleVersion>:
 80156fc:	b1d0      	cbz	r0, 8015734 <Argus_GetModuleVersion+0x38>
 80156fe:	4b0e      	ldr	r3, [pc, #56]	@ (8015738 <Argus_GetModuleVersion+0x3c>)
 8015700:	6802      	ldr	r2, [r0, #0]
 8015702:	429a      	cmp	r2, r3
 8015704:	b510      	push	{r4, lr}
 8015706:	4604      	mov	r4, r0
 8015708:	d001      	beq.n	801570e <Argus_GetModuleVersion+0x12>
 801570a:	2000      	movs	r0, #0
 801570c:	bd10      	pop	{r4, pc}
 801570e:	f200 70cc 	addw	r0, r0, #1996	@ 0x7cc
 8015712:	f003 f977 	bl	8018a04 <Argus_Measurement_CheckTimeout>
 8015716:	2800      	cmp	r0, #0
 8015718:	db02      	blt.n	8015720 <Argus_GetModuleVersion+0x24>
 801571a:	1d20      	adds	r0, r4, #4
 801571c:	f00b fc2a 	bl	8020f74 <Argus_Dev_GetStatus>
 8015720:	f110 0f65 	cmn.w	r0, #101	@ 0x65
 8015724:	d0f1      	beq.n	801570a <Argus_GetModuleVersion+0xe>
 8015726:	3007      	adds	r0, #7
 8015728:	d0ef      	beq.n	801570a <Argus_GetModuleVersion+0xe>
 801572a:	1d20      	adds	r0, r4, #4
 801572c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015730:	f00c bb02 	b.w	8021d38 <Argus_Dev_GetModule>
 8015734:	2000      	movs	r0, #0
 8015736:	4770      	bx	lr
 8015738:	0afb8550 	.word	0x0afb8550

0801573c <Argus_GetChipVersion>:
 801573c:	b1d0      	cbz	r0, 8015774 <Argus_GetChipVersion+0x38>
 801573e:	4b0e      	ldr	r3, [pc, #56]	@ (8015778 <Argus_GetChipVersion+0x3c>)
 8015740:	6802      	ldr	r2, [r0, #0]
 8015742:	429a      	cmp	r2, r3
 8015744:	b510      	push	{r4, lr}
 8015746:	4604      	mov	r4, r0
 8015748:	d001      	beq.n	801574e <Argus_GetChipVersion+0x12>
 801574a:	2000      	movs	r0, #0
 801574c:	bd10      	pop	{r4, pc}
 801574e:	f200 70cc 	addw	r0, r0, #1996	@ 0x7cc
 8015752:	f003 f957 	bl	8018a04 <Argus_Measurement_CheckTimeout>
 8015756:	2800      	cmp	r0, #0
 8015758:	db02      	blt.n	8015760 <Argus_GetChipVersion+0x24>
 801575a:	1d20      	adds	r0, r4, #4
 801575c:	f00b fc0a 	bl	8020f74 <Argus_Dev_GetStatus>
 8015760:	f110 0f65 	cmn.w	r0, #101	@ 0x65
 8015764:	d0f1      	beq.n	801574a <Argus_GetChipVersion+0xe>
 8015766:	3007      	adds	r0, #7
 8015768:	d0ef      	beq.n	801574a <Argus_GetChipVersion+0xe>
 801576a:	1d20      	adds	r0, r4, #4
 801576c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015770:	f00c bae6 	b.w	8021d40 <Argus_Dev_GetChipVersion>
 8015774:	2000      	movs	r0, #0
 8015776:	4770      	bx	lr
 8015778:	0afb8550 	.word	0x0afb8550

0801577c <Argus_GetLaserType>:
 801577c:	b1d0      	cbz	r0, 80157b4 <Argus_GetLaserType+0x38>
 801577e:	4b0e      	ldr	r3, [pc, #56]	@ (80157b8 <Argus_GetLaserType+0x3c>)
 8015780:	6802      	ldr	r2, [r0, #0]
 8015782:	429a      	cmp	r2, r3
 8015784:	b510      	push	{r4, lr}
 8015786:	4604      	mov	r4, r0
 8015788:	d001      	beq.n	801578e <Argus_GetLaserType+0x12>
 801578a:	2000      	movs	r0, #0
 801578c:	bd10      	pop	{r4, pc}
 801578e:	f200 70cc 	addw	r0, r0, #1996	@ 0x7cc
 8015792:	f003 f937 	bl	8018a04 <Argus_Measurement_CheckTimeout>
 8015796:	2800      	cmp	r0, #0
 8015798:	db02      	blt.n	80157a0 <Argus_GetLaserType+0x24>
 801579a:	1d20      	adds	r0, r4, #4
 801579c:	f00b fbea 	bl	8020f74 <Argus_Dev_GetStatus>
 80157a0:	f110 0f65 	cmn.w	r0, #101	@ 0x65
 80157a4:	d0f1      	beq.n	801578a <Argus_GetLaserType+0xe>
 80157a6:	3007      	adds	r0, #7
 80157a8:	d0ef      	beq.n	801578a <Argus_GetLaserType+0xe>
 80157aa:	1d20      	adds	r0, r4, #4
 80157ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80157b0:	f00c bac8 	b.w	8021d44 <Argus_Dev_GetLaserType>
 80157b4:	2000      	movs	r0, #0
 80157b6:	4770      	bx	lr
 80157b8:	0afb8550 	.word	0x0afb8550

080157bc <Argus_GetChipID>:
 80157bc:	b1d0      	cbz	r0, 80157f4 <Argus_GetChipID+0x38>
 80157be:	4b0e      	ldr	r3, [pc, #56]	@ (80157f8 <Argus_GetChipID+0x3c>)
 80157c0:	6802      	ldr	r2, [r0, #0]
 80157c2:	429a      	cmp	r2, r3
 80157c4:	b510      	push	{r4, lr}
 80157c6:	4604      	mov	r4, r0
 80157c8:	d001      	beq.n	80157ce <Argus_GetChipID+0x12>
 80157ca:	2000      	movs	r0, #0
 80157cc:	bd10      	pop	{r4, pc}
 80157ce:	f200 70cc 	addw	r0, r0, #1996	@ 0x7cc
 80157d2:	f003 f917 	bl	8018a04 <Argus_Measurement_CheckTimeout>
 80157d6:	2800      	cmp	r0, #0
 80157d8:	db02      	blt.n	80157e0 <Argus_GetChipID+0x24>
 80157da:	1d20      	adds	r0, r4, #4
 80157dc:	f00b fbca 	bl	8020f74 <Argus_Dev_GetStatus>
 80157e0:	f110 0f65 	cmn.w	r0, #101	@ 0x65
 80157e4:	d0f1      	beq.n	80157ca <Argus_GetChipID+0xe>
 80157e6:	3007      	adds	r0, #7
 80157e8:	d0ef      	beq.n	80157ca <Argus_GetChipID+0xe>
 80157ea:	1d20      	adds	r0, r4, #4
 80157ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80157f0:	f00c baa4 	b.w	8021d3c <Argus_Dev_GetChipID>
 80157f4:	2000      	movs	r0, #0
 80157f6:	4770      	bx	lr
 80157f8:	0afb8550 	.word	0x0afb8550

080157fc <Argus_GetSPISlave>:
 80157fc:	b120      	cbz	r0, 8015808 <Argus_GetSPISlave+0xc>
 80157fe:	4b04      	ldr	r3, [pc, #16]	@ (8015810 <Argus_GetSPISlave+0x14>)
 8015800:	6802      	ldr	r2, [r0, #0]
 8015802:	429a      	cmp	r2, r3
 8015804:	d001      	beq.n	801580a <Argus_GetSPISlave+0xe>
 8015806:	2000      	movs	r0, #0
 8015808:	4770      	bx	lr
 801580a:	f8d0 0150 	ldr.w	r0, [r0, #336]	@ 0x150
 801580e:	4770      	bx	lr
 8015810:	0afb8550 	.word	0x0afb8550

08015814 <Argus_SetMeasurementMode>:
 8015814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015818:	2800      	cmp	r0, #0
 801581a:	d049      	beq.n	80158b0 <Argus_SetMeasurementMode+0x9c>
 801581c:	4b27      	ldr	r3, [pc, #156]	@ (80158bc <Argus_SetMeasurementMode+0xa8>)
 801581e:	6802      	ldr	r2, [r0, #0]
 8015820:	429a      	cmp	r2, r3
 8015822:	4604      	mov	r4, r0
 8015824:	d138      	bne.n	8015898 <Argus_SetMeasurementMode+0x84>
 8015826:	1d07      	adds	r7, r0, #4
 8015828:	4638      	mov	r0, r7
 801582a:	460e      	mov	r6, r1
 801582c:	f00b fba2 	bl	8020f74 <Argus_Dev_GetStatus>
 8015830:	1e05      	subs	r5, r0, #0
 8015832:	db10      	blt.n	8015856 <Argus_SetMeasurementMode+0x42>
 8015834:	f204 78cc 	addw	r8, r4, #1996	@ 0x7cc
 8015838:	4640      	mov	r0, r8
 801583a:	f003 f8e3 	bl	8018a04 <Argus_Measurement_CheckTimeout>
 801583e:	2800      	cmp	r0, #0
 8015840:	db1a      	blt.n	8015878 <Argus_SetMeasurementMode+0x64>
 8015842:	b17d      	cbz	r5, 8015864 <Argus_SetMeasurementMode+0x50>
 8015844:	481e      	ldr	r0, [pc, #120]	@ (80158c0 <Argus_SetMeasurementMode+0xac>)
 8015846:	4629      	mov	r1, r5
 8015848:	f7f0 fe60 	bl	800650c <print>
 801584c:	f06f 07be 	mvn.w	r7, #190	@ 0xbe
 8015850:	4638      	mov	r0, r7
 8015852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015856:	4638      	mov	r0, r7
 8015858:	f00c fbe2 	bl	8022020 <Argus_Dev_RecoverFromError>
 801585c:	1e07      	subs	r7, r0, #0
 801585e:	db15      	blt.n	801588c <Argus_SetMeasurementMode+0x78>
 8015860:	f204 78cc 	addw	r8, r4, #1996	@ 0x7cc
 8015864:	4640      	mov	r0, r8
 8015866:	f003 f825 	bl	80188b4 <Argus_Measurement_IsActive>
 801586a:	b9d8      	cbnz	r0, 80158a4 <Argus_SetMeasurementMode+0x90>
 801586c:	4631      	mov	r1, r6
 801586e:	4620      	mov	r0, r4
 8015870:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015874:	f7ff ba44 	b.w	8014d00 <Argus_SetMeasurementMode.part.0>
 8015878:	4640      	mov	r0, r8
 801587a:	f002 fff5 	bl	8018868 <Argus_Measurement_Abort>
 801587e:	1e07      	subs	r7, r0, #0
 8015880:	daf0      	bge.n	8015864 <Argus_SetMeasurementMode+0x50>
 8015882:	4639      	mov	r1, r7
 8015884:	480f      	ldr	r0, [pc, #60]	@ (80158c4 <Argus_SetMeasurementMode+0xb0>)
 8015886:	f7f0 fe41 	bl	800650c <print>
 801588a:	e7e1      	b.n	8015850 <Argus_SetMeasurementMode+0x3c>
 801588c:	463a      	mov	r2, r7
 801588e:	4629      	mov	r1, r5
 8015890:	480d      	ldr	r0, [pc, #52]	@ (80158c8 <Argus_SetMeasurementMode+0xb4>)
 8015892:	f7f0 fe3b 	bl	800650c <print>
 8015896:	e7db      	b.n	8015850 <Argus_SetMeasurementMode+0x3c>
 8015898:	480c      	ldr	r0, [pc, #48]	@ (80158cc <Argus_SetMeasurementMode+0xb8>)
 801589a:	f7f0 fe37 	bl	800650c <print>
 801589e:	f06f 0706 	mvn.w	r7, #6
 80158a2:	e7d5      	b.n	8015850 <Argus_SetMeasurementMode+0x3c>
 80158a4:	480a      	ldr	r0, [pc, #40]	@ (80158d0 <Argus_SetMeasurementMode+0xbc>)
 80158a6:	f7f0 fe31 	bl	800650c <print>
 80158aa:	f06f 07be 	mvn.w	r7, #190	@ 0xbe
 80158ae:	e7cf      	b.n	8015850 <Argus_SetMeasurementMode+0x3c>
 80158b0:	4808      	ldr	r0, [pc, #32]	@ (80158d4 <Argus_SetMeasurementMode+0xc0>)
 80158b2:	f7f0 fe2b 	bl	800650c <print>
 80158b6:	f06f 0704 	mvn.w	r7, #4
 80158ba:	e7c9      	b.n	8015850 <Argus_SetMeasurementMode+0x3c>
 80158bc:	0afb8550 	.word	0x0afb8550
 80158c0:	0802e414 	.word	0x0802e414
 80158c4:	0802e3dc 	.word	0x0802e3dc
 80158c8:	0802e3a0 	.word	0x0802e3a0
 80158cc:	0802e378 	.word	0x0802e378
 80158d0:	0802e47c 	.word	0x0802e47c
 80158d4:	0802e350 	.word	0x0802e350

080158d8 <Argus_GetMeasurementMode>:
 80158d8:	b510      	push	{r4, lr}
 80158da:	b1a8      	cbz	r0, 8015908 <Argus_GetMeasurementMode+0x30>
 80158dc:	4b0d      	ldr	r3, [pc, #52]	@ (8015914 <Argus_GetMeasurementMode+0x3c>)
 80158de:	6802      	ldr	r2, [r0, #0]
 80158e0:	429a      	cmp	r2, r3
 80158e2:	d108      	bne.n	80158f6 <Argus_GetMeasurementMode+0x1e>
 80158e4:	460c      	mov	r4, r1
 80158e6:	b161      	cbz	r1, 8015902 <Argus_GetMeasurementMode+0x2a>
 80158e8:	f500 70ee 	add.w	r0, r0, #476	@ 0x1dc
 80158ec:	f00d fd20 	bl	8023330 <Argus_Cfg_GetMeasurementMode>
 80158f0:	7020      	strb	r0, [r4, #0]
 80158f2:	2000      	movs	r0, #0
 80158f4:	bd10      	pop	{r4, pc}
 80158f6:	4808      	ldr	r0, [pc, #32]	@ (8015918 <Argus_GetMeasurementMode+0x40>)
 80158f8:	f7f0 fe08 	bl	800650c <print>
 80158fc:	f06f 0006 	mvn.w	r0, #6
 8015900:	bd10      	pop	{r4, pc}
 8015902:	f06f 0004 	mvn.w	r0, #4
 8015906:	bd10      	pop	{r4, pc}
 8015908:	4804      	ldr	r0, [pc, #16]	@ (801591c <Argus_GetMeasurementMode+0x44>)
 801590a:	f7f0 fdff 	bl	800650c <print>
 801590e:	f06f 0004 	mvn.w	r0, #4
 8015912:	bd10      	pop	{r4, pc}
 8015914:	0afb8550 	.word	0x0afb8550
 8015918:	0802e378 	.word	0x0802e378
 801591c:	0802e350 	.word	0x0802e350

08015920 <Argus_SetConfigurationFrameTime>:
 8015920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015922:	b0cb      	sub	sp, #300	@ 0x12c
 8015924:	b3c0      	cbz	r0, 8015998 <Argus_SetConfigurationFrameTime+0x78>
 8015926:	4b1f      	ldr	r3, [pc, #124]	@ (80159a4 <Argus_SetConfigurationFrameTime+0x84>)
 8015928:	6802      	ldr	r2, [r0, #0]
 801592a:	429a      	cmp	r2, r3
 801592c:	4604      	mov	r4, r0
 801592e:	d12d      	bne.n	801598c <Argus_SetConfigurationFrameTime+0x6c>
 8015930:	460d      	mov	r5, r1
 8015932:	f500 70ee 	add.w	r0, r0, #476	@ 0x1dc
 8015936:	4669      	mov	r1, sp
 8015938:	f00d fcae 	bl	8023298 <Argus_Cfg_GetConfiguration>
 801593c:	2201      	movs	r2, #1
 801593e:	4611      	mov	r1, r2
 8015940:	4620      	mov	r0, r4
 8015942:	9501      	str	r5, [sp, #4]
 8015944:	f7ff f96a 	bl	8014c1c <CheckStateAndRecoverError>
 8015948:	4605      	mov	r5, r0
 801594a:	b960      	cbnz	r0, 8015966 <Argus_SetConfigurationFrameTime+0x46>
 801594c:	f504 7042 	add.w	r0, r4, #776	@ 0x308
 8015950:	f00e ff7c 	bl	802484c <Argus_Cal_GetCalibrationPtr>
 8015954:	4606      	mov	r6, r0
 8015956:	b1b0      	cbz	r0, 8015986 <Argus_SetConfigurationFrameTime+0x66>
 8015958:	1d27      	adds	r7, r4, #4
 801595a:	21c0      	movs	r1, #192	@ 0xc0
 801595c:	4638      	mov	r0, r7
 801595e:	f00b fa23 	bl	8020da8 <Argus_Dev_SetStatusSync>
 8015962:	4605      	mov	r5, r0
 8015964:	b110      	cbz	r0, 801596c <Argus_SetConfigurationFrameTime+0x4c>
 8015966:	4628      	mov	r0, r5
 8015968:	b04b      	add	sp, #300	@ 0x12c
 801596a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801596c:	4669      	mov	r1, sp
 801596e:	4632      	mov	r2, r6
 8015970:	4620      	mov	r0, r4
 8015972:	f000 fff9 	bl	8016968 <Argus_Core_SetSettingsSync>
 8015976:	21c0      	movs	r1, #192	@ 0xc0
 8015978:	4605      	mov	r5, r0
 801597a:	4638      	mov	r0, r7
 801597c:	f00b fae6 	bl	8020f4c <Argus_Dev_ClearStatus>
 8015980:	4628      	mov	r0, r5
 8015982:	b04b      	add	sp, #300	@ 0x12c
 8015984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015986:	f06f 0504 	mvn.w	r5, #4
 801598a:	e7ec      	b.n	8015966 <Argus_SetConfigurationFrameTime+0x46>
 801598c:	4806      	ldr	r0, [pc, #24]	@ (80159a8 <Argus_SetConfigurationFrameTime+0x88>)
 801598e:	f7f0 fdbd 	bl	800650c <print>
 8015992:	f06f 0506 	mvn.w	r5, #6
 8015996:	e7e6      	b.n	8015966 <Argus_SetConfigurationFrameTime+0x46>
 8015998:	4804      	ldr	r0, [pc, #16]	@ (80159ac <Argus_SetConfigurationFrameTime+0x8c>)
 801599a:	f7f0 fdb7 	bl	800650c <print>
 801599e:	f06f 0504 	mvn.w	r5, #4
 80159a2:	e7e0      	b.n	8015966 <Argus_SetConfigurationFrameTime+0x46>
 80159a4:	0afb8550 	.word	0x0afb8550
 80159a8:	0802e378 	.word	0x0802e378
 80159ac:	0802e350 	.word	0x0802e350

080159b0 <Argus_GetConfigurationFrameTime>:
 80159b0:	b510      	push	{r4, lr}
 80159b2:	b1b8      	cbz	r0, 80159e4 <Argus_GetConfigurationFrameTime+0x34>
 80159b4:	4b0e      	ldr	r3, [pc, #56]	@ (80159f0 <Argus_GetConfigurationFrameTime+0x40>)
 80159b6:	6802      	ldr	r2, [r0, #0]
 80159b8:	429a      	cmp	r2, r3
 80159ba:	d10a      	bne.n	80159d2 <Argus_GetConfigurationFrameTime+0x22>
 80159bc:	460c      	mov	r4, r1
 80159be:	b171      	cbz	r1, 80159de <Argus_GetConfigurationFrameTime+0x2e>
 80159c0:	f500 70ee 	add.w	r0, r0, #476	@ 0x1dc
 80159c4:	f00d fc70 	bl	80232a8 <Argus_Cfg_GetConfigurationPtr>
 80159c8:	4603      	mov	r3, r0
 80159ca:	2000      	movs	r0, #0
 80159cc:	685b      	ldr	r3, [r3, #4]
 80159ce:	6023      	str	r3, [r4, #0]
 80159d0:	bd10      	pop	{r4, pc}
 80159d2:	4808      	ldr	r0, [pc, #32]	@ (80159f4 <Argus_GetConfigurationFrameTime+0x44>)
 80159d4:	f7f0 fd9a 	bl	800650c <print>
 80159d8:	f06f 0006 	mvn.w	r0, #6
 80159dc:	bd10      	pop	{r4, pc}
 80159de:	f06f 0004 	mvn.w	r0, #4
 80159e2:	bd10      	pop	{r4, pc}
 80159e4:	4804      	ldr	r0, [pc, #16]	@ (80159f8 <Argus_GetConfigurationFrameTime+0x48>)
 80159e6:	f7f0 fd91 	bl	800650c <print>
 80159ea:	f06f 0004 	mvn.w	r0, #4
 80159ee:	bd10      	pop	{r4, pc}
 80159f0:	0afb8550 	.word	0x0afb8550
 80159f4:	0802e378 	.word	0x0802e378
 80159f8:	0802e350 	.word	0x0802e350

080159fc <Argus_SetConfigurationDFMMode>:
 80159fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80159fe:	b0cb      	sub	sp, #300	@ 0x12c
 8015a00:	b3c8      	cbz	r0, 8015a76 <Argus_SetConfigurationDFMMode+0x7a>
 8015a02:	4b20      	ldr	r3, [pc, #128]	@ (8015a84 <Argus_SetConfigurationDFMMode+0x88>)
 8015a04:	6802      	ldr	r2, [r0, #0]
 8015a06:	429a      	cmp	r2, r3
 8015a08:	4604      	mov	r4, r0
 8015a0a:	d12e      	bne.n	8015a6a <Argus_SetConfigurationDFMMode+0x6e>
 8015a0c:	460d      	mov	r5, r1
 8015a0e:	f500 70ee 	add.w	r0, r0, #476	@ 0x1dc
 8015a12:	4669      	mov	r1, sp
 8015a14:	f00d fc40 	bl	8023298 <Argus_Cfg_GetConfiguration>
 8015a18:	2201      	movs	r2, #1
 8015a1a:	4611      	mov	r1, r2
 8015a1c:	4620      	mov	r0, r4
 8015a1e:	f88d 50ac 	strb.w	r5, [sp, #172]	@ 0xac
 8015a22:	f7ff f8fb 	bl	8014c1c <CheckStateAndRecoverError>
 8015a26:	4605      	mov	r5, r0
 8015a28:	b960      	cbnz	r0, 8015a44 <Argus_SetConfigurationDFMMode+0x48>
 8015a2a:	f504 7042 	add.w	r0, r4, #776	@ 0x308
 8015a2e:	f00e ff0d 	bl	802484c <Argus_Cal_GetCalibrationPtr>
 8015a32:	4606      	mov	r6, r0
 8015a34:	b1b0      	cbz	r0, 8015a64 <Argus_SetConfigurationDFMMode+0x68>
 8015a36:	1d27      	adds	r7, r4, #4
 8015a38:	21c0      	movs	r1, #192	@ 0xc0
 8015a3a:	4638      	mov	r0, r7
 8015a3c:	f00b f9b4 	bl	8020da8 <Argus_Dev_SetStatusSync>
 8015a40:	4605      	mov	r5, r0
 8015a42:	b110      	cbz	r0, 8015a4a <Argus_SetConfigurationDFMMode+0x4e>
 8015a44:	4628      	mov	r0, r5
 8015a46:	b04b      	add	sp, #300	@ 0x12c
 8015a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a4a:	4669      	mov	r1, sp
 8015a4c:	4632      	mov	r2, r6
 8015a4e:	4620      	mov	r0, r4
 8015a50:	f000 ff8a 	bl	8016968 <Argus_Core_SetSettingsSync>
 8015a54:	21c0      	movs	r1, #192	@ 0xc0
 8015a56:	4605      	mov	r5, r0
 8015a58:	4638      	mov	r0, r7
 8015a5a:	f00b fa77 	bl	8020f4c <Argus_Dev_ClearStatus>
 8015a5e:	4628      	mov	r0, r5
 8015a60:	b04b      	add	sp, #300	@ 0x12c
 8015a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a64:	f06f 0504 	mvn.w	r5, #4
 8015a68:	e7ec      	b.n	8015a44 <Argus_SetConfigurationDFMMode+0x48>
 8015a6a:	4807      	ldr	r0, [pc, #28]	@ (8015a88 <Argus_SetConfigurationDFMMode+0x8c>)
 8015a6c:	f7f0 fd4e 	bl	800650c <print>
 8015a70:	f06f 0506 	mvn.w	r5, #6
 8015a74:	e7e6      	b.n	8015a44 <Argus_SetConfigurationDFMMode+0x48>
 8015a76:	4805      	ldr	r0, [pc, #20]	@ (8015a8c <Argus_SetConfigurationDFMMode+0x90>)
 8015a78:	f7f0 fd48 	bl	800650c <print>
 8015a7c:	f06f 0504 	mvn.w	r5, #4
 8015a80:	e7e0      	b.n	8015a44 <Argus_SetConfigurationDFMMode+0x48>
 8015a82:	bf00      	nop
 8015a84:	0afb8550 	.word	0x0afb8550
 8015a88:	0802e378 	.word	0x0802e378
 8015a8c:	0802e350 	.word	0x0802e350

08015a90 <Argus_GetConfigurationDFMMode>:
 8015a90:	b510      	push	{r4, lr}
 8015a92:	b1c0      	cbz	r0, 8015ac6 <Argus_GetConfigurationDFMMode+0x36>
 8015a94:	4b0f      	ldr	r3, [pc, #60]	@ (8015ad4 <Argus_GetConfigurationDFMMode+0x44>)
 8015a96:	6802      	ldr	r2, [r0, #0]
 8015a98:	429a      	cmp	r2, r3
 8015a9a:	d10b      	bne.n	8015ab4 <Argus_GetConfigurationDFMMode+0x24>
 8015a9c:	460c      	mov	r4, r1
 8015a9e:	b179      	cbz	r1, 8015ac0 <Argus_GetConfigurationDFMMode+0x30>
 8015aa0:	f500 70ee 	add.w	r0, r0, #476	@ 0x1dc
 8015aa4:	f00d fc00 	bl	80232a8 <Argus_Cfg_GetConfigurationPtr>
 8015aa8:	4603      	mov	r3, r0
 8015aaa:	2000      	movs	r0, #0
 8015aac:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8015ab0:	7023      	strb	r3, [r4, #0]
 8015ab2:	bd10      	pop	{r4, pc}
 8015ab4:	4808      	ldr	r0, [pc, #32]	@ (8015ad8 <Argus_GetConfigurationDFMMode+0x48>)
 8015ab6:	f7f0 fd29 	bl	800650c <print>
 8015aba:	f06f 0006 	mvn.w	r0, #6
 8015abe:	bd10      	pop	{r4, pc}
 8015ac0:	f06f 0004 	mvn.w	r0, #4
 8015ac4:	bd10      	pop	{r4, pc}
 8015ac6:	4805      	ldr	r0, [pc, #20]	@ (8015adc <Argus_GetConfigurationDFMMode+0x4c>)
 8015ac8:	f7f0 fd20 	bl	800650c <print>
 8015acc:	f06f 0004 	mvn.w	r0, #4
 8015ad0:	bd10      	pop	{r4, pc}
 8015ad2:	bf00      	nop
 8015ad4:	0afb8550 	.word	0x0afb8550
 8015ad8:	0802e378 	.word	0x0802e378
 8015adc:	0802e350 	.word	0x0802e350

08015ae0 <Argus_SetConfigurationShotNoiseMonitorMode>:
 8015ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ae2:	b0cb      	sub	sp, #300	@ 0x12c
 8015ae4:	b3c8      	cbz	r0, 8015b5a <Argus_SetConfigurationShotNoiseMonitorMode+0x7a>
 8015ae6:	4b20      	ldr	r3, [pc, #128]	@ (8015b68 <Argus_SetConfigurationShotNoiseMonitorMode+0x88>)
 8015ae8:	6802      	ldr	r2, [r0, #0]
 8015aea:	429a      	cmp	r2, r3
 8015aec:	4604      	mov	r4, r0
 8015aee:	d12e      	bne.n	8015b4e <Argus_SetConfigurationShotNoiseMonitorMode+0x6e>
 8015af0:	460d      	mov	r5, r1
 8015af2:	f500 70ee 	add.w	r0, r0, #476	@ 0x1dc
 8015af6:	4669      	mov	r1, sp
 8015af8:	f00d fbce 	bl	8023298 <Argus_Cfg_GetConfiguration>
 8015afc:	2201      	movs	r2, #1
 8015afe:	4611      	mov	r1, r2
 8015b00:	4620      	mov	r0, r4
 8015b02:	f88d 50d8 	strb.w	r5, [sp, #216]	@ 0xd8
 8015b06:	f7ff f889 	bl	8014c1c <CheckStateAndRecoverError>
 8015b0a:	4605      	mov	r5, r0
 8015b0c:	b960      	cbnz	r0, 8015b28 <Argus_SetConfigurationShotNoiseMonitorMode+0x48>
 8015b0e:	f504 7042 	add.w	r0, r4, #776	@ 0x308
 8015b12:	f00e fe9b 	bl	802484c <Argus_Cal_GetCalibrationPtr>
 8015b16:	4606      	mov	r6, r0
 8015b18:	b1b0      	cbz	r0, 8015b48 <Argus_SetConfigurationShotNoiseMonitorMode+0x68>
 8015b1a:	1d27      	adds	r7, r4, #4
 8015b1c:	21c0      	movs	r1, #192	@ 0xc0
 8015b1e:	4638      	mov	r0, r7
 8015b20:	f00b f942 	bl	8020da8 <Argus_Dev_SetStatusSync>
 8015b24:	4605      	mov	r5, r0
 8015b26:	b110      	cbz	r0, 8015b2e <Argus_SetConfigurationShotNoiseMonitorMode+0x4e>
 8015b28:	4628      	mov	r0, r5
 8015b2a:	b04b      	add	sp, #300	@ 0x12c
 8015b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b2e:	4669      	mov	r1, sp
 8015b30:	4632      	mov	r2, r6
 8015b32:	4620      	mov	r0, r4
 8015b34:	f000 ff18 	bl	8016968 <Argus_Core_SetSettingsSync>
 8015b38:	21c0      	movs	r1, #192	@ 0xc0
 8015b3a:	4605      	mov	r5, r0
 8015b3c:	4638      	mov	r0, r7
 8015b3e:	f00b fa05 	bl	8020f4c <Argus_Dev_ClearStatus>
 8015b42:	4628      	mov	r0, r5
 8015b44:	b04b      	add	sp, #300	@ 0x12c
 8015b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b48:	f06f 0504 	mvn.w	r5, #4
 8015b4c:	e7ec      	b.n	8015b28 <Argus_SetConfigurationShotNoiseMonitorMode+0x48>
 8015b4e:	4807      	ldr	r0, [pc, #28]	@ (8015b6c <Argus_SetConfigurationShotNoiseMonitorMode+0x8c>)
 8015b50:	f7f0 fcdc 	bl	800650c <print>
 8015b54:	f06f 0506 	mvn.w	r5, #6
 8015b58:	e7e6      	b.n	8015b28 <Argus_SetConfigurationShotNoiseMonitorMode+0x48>
 8015b5a:	4805      	ldr	r0, [pc, #20]	@ (8015b70 <Argus_SetConfigurationShotNoiseMonitorMode+0x90>)
 8015b5c:	f7f0 fcd6 	bl	800650c <print>
 8015b60:	f06f 0504 	mvn.w	r5, #4
 8015b64:	e7e0      	b.n	8015b28 <Argus_SetConfigurationShotNoiseMonitorMode+0x48>
 8015b66:	bf00      	nop
 8015b68:	0afb8550 	.word	0x0afb8550
 8015b6c:	0802e378 	.word	0x0802e378
 8015b70:	0802e350 	.word	0x0802e350

08015b74 <Argus_GetConfigurationShotNoiseMonitorMode>:
 8015b74:	b510      	push	{r4, lr}
 8015b76:	b1c0      	cbz	r0, 8015baa <Argus_GetConfigurationShotNoiseMonitorMode+0x36>
 8015b78:	4b0f      	ldr	r3, [pc, #60]	@ (8015bb8 <Argus_GetConfigurationShotNoiseMonitorMode+0x44>)
 8015b7a:	6802      	ldr	r2, [r0, #0]
 8015b7c:	429a      	cmp	r2, r3
 8015b7e:	d10b      	bne.n	8015b98 <Argus_GetConfigurationShotNoiseMonitorMode+0x24>
 8015b80:	460c      	mov	r4, r1
 8015b82:	b179      	cbz	r1, 8015ba4 <Argus_GetConfigurationShotNoiseMonitorMode+0x30>
 8015b84:	f500 70ee 	add.w	r0, r0, #476	@ 0x1dc
 8015b88:	f00d fb8e 	bl	80232a8 <Argus_Cfg_GetConfigurationPtr>
 8015b8c:	4603      	mov	r3, r0
 8015b8e:	2000      	movs	r0, #0
 8015b90:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 8015b94:	7023      	strb	r3, [r4, #0]
 8015b96:	bd10      	pop	{r4, pc}
 8015b98:	4808      	ldr	r0, [pc, #32]	@ (8015bbc <Argus_GetConfigurationShotNoiseMonitorMode+0x48>)
 8015b9a:	f7f0 fcb7 	bl	800650c <print>
 8015b9e:	f06f 0006 	mvn.w	r0, #6
 8015ba2:	bd10      	pop	{r4, pc}
 8015ba4:	f06f 0004 	mvn.w	r0, #4
 8015ba8:	bd10      	pop	{r4, pc}
 8015baa:	4805      	ldr	r0, [pc, #20]	@ (8015bc0 <Argus_GetConfigurationShotNoiseMonitorMode+0x4c>)
 8015bac:	f7f0 fcae 	bl	800650c <print>
 8015bb0:	f06f 0004 	mvn.w	r0, #4
 8015bb4:	bd10      	pop	{r4, pc}
 8015bb6:	bf00      	nop
 8015bb8:	0afb8550 	.word	0x0afb8550
 8015bbc:	0802e378 	.word	0x0802e378
 8015bc0:	0802e350 	.word	0x0802e350

08015bc4 <Argus_SetConfigurationCrosstalkMonitorMode>:
 8015bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015bc6:	b0cb      	sub	sp, #300	@ 0x12c
 8015bc8:	b3c8      	cbz	r0, 8015c3e <Argus_SetConfigurationCrosstalkMonitorMode+0x7a>
 8015bca:	4b20      	ldr	r3, [pc, #128]	@ (8015c4c <Argus_SetConfigurationCrosstalkMonitorMode+0x88>)
 8015bcc:	6802      	ldr	r2, [r0, #0]
 8015bce:	429a      	cmp	r2, r3
 8015bd0:	4604      	mov	r4, r0
 8015bd2:	d12e      	bne.n	8015c32 <Argus_SetConfigurationCrosstalkMonitorMode+0x6e>
 8015bd4:	460d      	mov	r5, r1
 8015bd6:	f500 70ee 	add.w	r0, r0, #476	@ 0x1dc
 8015bda:	4669      	mov	r1, sp
 8015bdc:	f00d fb5c 	bl	8023298 <Argus_Cfg_GetConfiguration>
 8015be0:	2201      	movs	r2, #1
 8015be2:	4611      	mov	r1, r2
 8015be4:	4620      	mov	r0, r4
 8015be6:	f88d 50e4 	strb.w	r5, [sp, #228]	@ 0xe4
 8015bea:	f7ff f817 	bl	8014c1c <CheckStateAndRecoverError>
 8015bee:	4605      	mov	r5, r0
 8015bf0:	b960      	cbnz	r0, 8015c0c <Argus_SetConfigurationCrosstalkMonitorMode+0x48>
 8015bf2:	f504 7042 	add.w	r0, r4, #776	@ 0x308
 8015bf6:	f00e fe29 	bl	802484c <Argus_Cal_GetCalibrationPtr>
 8015bfa:	4606      	mov	r6, r0
 8015bfc:	b1b0      	cbz	r0, 8015c2c <Argus_SetConfigurationCrosstalkMonitorMode+0x68>
 8015bfe:	1d27      	adds	r7, r4, #4
 8015c00:	21c0      	movs	r1, #192	@ 0xc0
 8015c02:	4638      	mov	r0, r7
 8015c04:	f00b f8d0 	bl	8020da8 <Argus_Dev_SetStatusSync>
 8015c08:	4605      	mov	r5, r0
 8015c0a:	b110      	cbz	r0, 8015c12 <Argus_SetConfigurationCrosstalkMonitorMode+0x4e>
 8015c0c:	4628      	mov	r0, r5
 8015c0e:	b04b      	add	sp, #300	@ 0x12c
 8015c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c12:	4669      	mov	r1, sp
 8015c14:	4632      	mov	r2, r6
 8015c16:	4620      	mov	r0, r4
 8015c18:	f000 fea6 	bl	8016968 <Argus_Core_SetSettingsSync>
 8015c1c:	21c0      	movs	r1, #192	@ 0xc0
 8015c1e:	4605      	mov	r5, r0
 8015c20:	4638      	mov	r0, r7
 8015c22:	f00b f993 	bl	8020f4c <Argus_Dev_ClearStatus>
 8015c26:	4628      	mov	r0, r5
 8015c28:	b04b      	add	sp, #300	@ 0x12c
 8015c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c2c:	f06f 0504 	mvn.w	r5, #4
 8015c30:	e7ec      	b.n	8015c0c <Argus_SetConfigurationCrosstalkMonitorMode+0x48>
 8015c32:	4807      	ldr	r0, [pc, #28]	@ (8015c50 <Argus_SetConfigurationCrosstalkMonitorMode+0x8c>)
 8015c34:	f7f0 fc6a 	bl	800650c <print>
 8015c38:	f06f 0506 	mvn.w	r5, #6
 8015c3c:	e7e6      	b.n	8015c0c <Argus_SetConfigurationCrosstalkMonitorMode+0x48>
 8015c3e:	4805      	ldr	r0, [pc, #20]	@ (8015c54 <Argus_SetConfigurationCrosstalkMonitorMode+0x90>)
 8015c40:	f7f0 fc64 	bl	800650c <print>
 8015c44:	f06f 0504 	mvn.w	r5, #4
 8015c48:	e7e0      	b.n	8015c0c <Argus_SetConfigurationCrosstalkMonitorMode+0x48>
 8015c4a:	bf00      	nop
 8015c4c:	0afb8550 	.word	0x0afb8550
 8015c50:	0802e378 	.word	0x0802e378
 8015c54:	0802e350 	.word	0x0802e350

08015c58 <Argus_GetConfigurationCrosstalkMonitorMode>:
 8015c58:	b510      	push	{r4, lr}
 8015c5a:	b1c0      	cbz	r0, 8015c8e <Argus_GetConfigurationCrosstalkMonitorMode+0x36>
 8015c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8015c9c <Argus_GetConfigurationCrosstalkMonitorMode+0x44>)
 8015c5e:	6802      	ldr	r2, [r0, #0]
 8015c60:	429a      	cmp	r2, r3
 8015c62:	d10b      	bne.n	8015c7c <Argus_GetConfigurationCrosstalkMonitorMode+0x24>
 8015c64:	460c      	mov	r4, r1
 8015c66:	b179      	cbz	r1, 8015c88 <Argus_GetConfigurationCrosstalkMonitorMode+0x30>
 8015c68:	f500 70ee 	add.w	r0, r0, #476	@ 0x1dc
 8015c6c:	f00d fb1c 	bl	80232a8 <Argus_Cfg_GetConfigurationPtr>
 8015c70:	4603      	mov	r3, r0
 8015c72:	2000      	movs	r0, #0
 8015c74:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8015c78:	7023      	strb	r3, [r4, #0]
 8015c7a:	bd10      	pop	{r4, pc}
 8015c7c:	4808      	ldr	r0, [pc, #32]	@ (8015ca0 <Argus_GetConfigurationCrosstalkMonitorMode+0x48>)
 8015c7e:	f7f0 fc45 	bl	800650c <print>
 8015c82:	f06f 0006 	mvn.w	r0, #6
 8015c86:	bd10      	pop	{r4, pc}
 8015c88:	f06f 0004 	mvn.w	r0, #4
 8015c8c:	bd10      	pop	{r4, pc}
 8015c8e:	4805      	ldr	r0, [pc, #20]	@ (8015ca4 <Argus_GetConfigurationCrosstalkMonitorMode+0x4c>)
 8015c90:	f7f0 fc3c 	bl	800650c <print>
 8015c94:	f06f 0004 	mvn.w	r0, #4
 8015c98:	bd10      	pop	{r4, pc}
 8015c9a:	bf00      	nop
 8015c9c:	0afb8550 	.word	0x0afb8550
 8015ca0:	0802e378 	.word	0x0802e378
 8015ca4:	0802e350 	.word	0x0802e350

08015ca8 <Argus_SetConfigurationSmartPowerSaveEnabled>:
 8015ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015caa:	b0cb      	sub	sp, #300	@ 0x12c
 8015cac:	b3c8      	cbz	r0, 8015d22 <Argus_SetConfigurationSmartPowerSaveEnabled+0x7a>
 8015cae:	4b20      	ldr	r3, [pc, #128]	@ (8015d30 <Argus_SetConfigurationSmartPowerSaveEnabled+0x88>)
 8015cb0:	6802      	ldr	r2, [r0, #0]
 8015cb2:	429a      	cmp	r2, r3
 8015cb4:	4604      	mov	r4, r0
 8015cb6:	d12e      	bne.n	8015d16 <Argus_SetConfigurationSmartPowerSaveEnabled+0x6e>
 8015cb8:	460d      	mov	r5, r1
 8015cba:	f500 70ee 	add.w	r0, r0, #476	@ 0x1dc
 8015cbe:	4669      	mov	r1, sp
 8015cc0:	f00d faea 	bl	8023298 <Argus_Cfg_GetConfiguration>
 8015cc4:	2201      	movs	r2, #1
 8015cc6:	4611      	mov	r1, r2
 8015cc8:	4620      	mov	r0, r4
 8015cca:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8015cce:	f7fe ffa5 	bl	8014c1c <CheckStateAndRecoverError>
 8015cd2:	4605      	mov	r5, r0
 8015cd4:	b960      	cbnz	r0, 8015cf0 <Argus_SetConfigurationSmartPowerSaveEnabled+0x48>
 8015cd6:	f504 7042 	add.w	r0, r4, #776	@ 0x308
 8015cda:	f00e fdb7 	bl	802484c <Argus_Cal_GetCalibrationPtr>
 8015cde:	4606      	mov	r6, r0
 8015ce0:	b1b0      	cbz	r0, 8015d10 <Argus_SetConfigurationSmartPowerSaveEnabled+0x68>
 8015ce2:	1d27      	adds	r7, r4, #4
 8015ce4:	21c0      	movs	r1, #192	@ 0xc0
 8015ce6:	4638      	mov	r0, r7
 8015ce8:	f00b f85e 	bl	8020da8 <Argus_Dev_SetStatusSync>
 8015cec:	4605      	mov	r5, r0
 8015cee:	b110      	cbz	r0, 8015cf6 <Argus_SetConfigurationSmartPowerSaveEnabled+0x4e>
 8015cf0:	4628      	mov	r0, r5
 8015cf2:	b04b      	add	sp, #300	@ 0x12c
 8015cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015cf6:	4669      	mov	r1, sp
 8015cf8:	4632      	mov	r2, r6
 8015cfa:	4620      	mov	r0, r4
 8015cfc:	f000 fe34 	bl	8016968 <Argus_Core_SetSettingsSync>
 8015d00:	21c0      	movs	r1, #192	@ 0xc0
 8015d02:	4605      	mov	r5, r0
 8015d04:	4638      	mov	r0, r7
 8015d06:	f00b f921 	bl	8020f4c <Argus_Dev_ClearStatus>
 8015d0a:	4628      	mov	r0, r5
 8015d0c:	b04b      	add	sp, #300	@ 0x12c
 8015d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d10:	f06f 0504 	mvn.w	r5, #4
 8015d14:	e7ec      	b.n	8015cf0 <Argus_SetConfigurationSmartPowerSaveEnabled+0x48>
 8015d16:	4807      	ldr	r0, [pc, #28]	@ (8015d34 <Argus_SetConfigurationSmartPowerSaveEnabled+0x8c>)
 8015d18:	f7f0 fbf8 	bl	800650c <print>
 8015d1c:	f06f 0506 	mvn.w	r5, #6
 8015d20:	e7e6      	b.n	8015cf0 <Argus_SetConfigurationSmartPowerSaveEnabled+0x48>
 8015d22:	4805      	ldr	r0, [pc, #20]	@ (8015d38 <Argus_SetConfigurationSmartPowerSaveEnabled+0x90>)
 8015d24:	f7f0 fbf2 	bl	800650c <print>
 8015d28:	f06f 0504 	mvn.w	r5, #4
 8015d2c:	e7e0      	b.n	8015cf0 <Argus_SetConfigurationSmartPowerSaveEnabled+0x48>
 8015d2e:	bf00      	nop
 8015d30:	0afb8550 	.word	0x0afb8550
 8015d34:	0802e378 	.word	0x0802e378
 8015d38:	0802e350 	.word	0x0802e350

08015d3c <Argus_GetConfigurationSmartPowerSaveEnabled>:
 8015d3c:	b510      	push	{r4, lr}
 8015d3e:	b1d8      	cbz	r0, 8015d78 <Argus_GetConfigurationSmartPowerSaveEnabled+0x3c>
 8015d40:	4b10      	ldr	r3, [pc, #64]	@ (8015d84 <Argus_GetConfigurationSmartPowerSaveEnabled+0x48>)
 8015d42:	6802      	ldr	r2, [r0, #0]
 8015d44:	429a      	cmp	r2, r3
 8015d46:	d10e      	bne.n	8015d66 <Argus_GetConfigurationSmartPowerSaveEnabled+0x2a>
 8015d48:	460c      	mov	r4, r1
 8015d4a:	b191      	cbz	r1, 8015d72 <Argus_GetConfigurationSmartPowerSaveEnabled+0x36>
 8015d4c:	f500 70ee 	add.w	r0, r0, #476	@ 0x1dc
 8015d50:	f00d faaa 	bl	80232a8 <Argus_Cfg_GetConfigurationPtr>
 8015d54:	4603      	mov	r3, r0
 8015d56:	2000      	movs	r0, #0
 8015d58:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8015d5c:	1a1b      	subs	r3, r3, r0
 8015d5e:	bf18      	it	ne
 8015d60:	2301      	movne	r3, #1
 8015d62:	7023      	strb	r3, [r4, #0]
 8015d64:	bd10      	pop	{r4, pc}
 8015d66:	4808      	ldr	r0, [pc, #32]	@ (8015d88 <Argus_GetConfigurationSmartPowerSaveEnabled+0x4c>)
 8015d68:	f7f0 fbd0 	bl	800650c <print>
 8015d6c:	f06f 0006 	mvn.w	r0, #6
 8015d70:	bd10      	pop	{r4, pc}
 8015d72:	f06f 0004 	mvn.w	r0, #4
 8015d76:	bd10      	pop	{r4, pc}
 8015d78:	4804      	ldr	r0, [pc, #16]	@ (8015d8c <Argus_GetConfigurationSmartPowerSaveEnabled+0x50>)
 8015d7a:	f7f0 fbc7 	bl	800650c <print>
 8015d7e:	f06f 0004 	mvn.w	r0, #4
 8015d82:	bd10      	pop	{r4, pc}
 8015d84:	0afb8550 	.word	0x0afb8550
 8015d88:	0802e378 	.word	0x0802e378
 8015d8c:	0802e350 	.word	0x0802e350

08015d90 <Argus_SetConfigurationDynamicAdaption>:
 8015d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d92:	f991 3000 	ldrsb.w	r3, [r1]
 8015d96:	b0cb      	sub	sp, #300	@ 0x12c
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d041      	beq.n	8015e20 <Argus_SetConfigurationDynamicAdaption+0x90>
 8015d9c:	4605      	mov	r5, r0
 8015d9e:	2800      	cmp	r0, #0
 8015da0:	d047      	beq.n	8015e32 <Argus_SetConfigurationDynamicAdaption+0xa2>
 8015da2:	4b27      	ldr	r3, [pc, #156]	@ (8015e40 <Argus_SetConfigurationDynamicAdaption+0xb0>)
 8015da4:	6802      	ldr	r2, [r0, #0]
 8015da6:	429a      	cmp	r2, r3
 8015da8:	d13d      	bne.n	8015e26 <Argus_SetConfigurationDynamicAdaption+0x96>
 8015daa:	460c      	mov	r4, r1
 8015dac:	f500 70ee 	add.w	r0, r0, #476	@ 0x1dc
 8015db0:	4669      	mov	r1, sp
 8015db2:	f00d fa71 	bl	8023298 <Argus_Cfg_GetConfiguration>
 8015db6:	6820      	ldr	r0, [r4, #0]
 8015db8:	6861      	ldr	r1, [r4, #4]
 8015dba:	68a2      	ldr	r2, [r4, #8]
 8015dbc:	68e3      	ldr	r3, [r4, #12]
 8015dbe:	f10d 0cf4 	add.w	ip, sp, #244	@ 0xf4
 8015dc2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015dc6:	6920      	ldr	r0, [r4, #16]
 8015dc8:	8aa3      	ldrh	r3, [r4, #20]
 8015dca:	f8cc 0000 	str.w	r0, [ip]
 8015dce:	2201      	movs	r2, #1
 8015dd0:	f8ac 3004 	strh.w	r3, [ip, #4]
 8015dd4:	4611      	mov	r1, r2
 8015dd6:	4628      	mov	r0, r5
 8015dd8:	f7fe ff20 	bl	8014c1c <CheckStateAndRecoverError>
 8015ddc:	4604      	mov	r4, r0
 8015dde:	b960      	cbnz	r0, 8015dfa <Argus_SetConfigurationDynamicAdaption+0x6a>
 8015de0:	f505 7042 	add.w	r0, r5, #776	@ 0x308
 8015de4:	f00e fd32 	bl	802484c <Argus_Cal_GetCalibrationPtr>
 8015de8:	4606      	mov	r6, r0
 8015dea:	b1b0      	cbz	r0, 8015e1a <Argus_SetConfigurationDynamicAdaption+0x8a>
 8015dec:	1d2f      	adds	r7, r5, #4
 8015dee:	21c0      	movs	r1, #192	@ 0xc0
 8015df0:	4638      	mov	r0, r7
 8015df2:	f00a ffd9 	bl	8020da8 <Argus_Dev_SetStatusSync>
 8015df6:	4604      	mov	r4, r0
 8015df8:	b110      	cbz	r0, 8015e00 <Argus_SetConfigurationDynamicAdaption+0x70>
 8015dfa:	4620      	mov	r0, r4
 8015dfc:	b04b      	add	sp, #300	@ 0x12c
 8015dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e00:	4669      	mov	r1, sp
 8015e02:	4632      	mov	r2, r6
 8015e04:	4628      	mov	r0, r5
 8015e06:	f000 fdaf 	bl	8016968 <Argus_Core_SetSettingsSync>
 8015e0a:	21c0      	movs	r1, #192	@ 0xc0
 8015e0c:	4604      	mov	r4, r0
 8015e0e:	4638      	mov	r0, r7
 8015e10:	f00b f89c 	bl	8020f4c <Argus_Dev_ClearStatus>
 8015e14:	4620      	mov	r0, r4
 8015e16:	b04b      	add	sp, #300	@ 0x12c
 8015e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e1a:	f06f 0404 	mvn.w	r4, #4
 8015e1e:	e7ec      	b.n	8015dfa <Argus_SetConfigurationDynamicAdaption+0x6a>
 8015e20:	f06f 0465 	mvn.w	r4, #101	@ 0x65
 8015e24:	e7e9      	b.n	8015dfa <Argus_SetConfigurationDynamicAdaption+0x6a>
 8015e26:	4807      	ldr	r0, [pc, #28]	@ (8015e44 <Argus_SetConfigurationDynamicAdaption+0xb4>)
 8015e28:	f7f0 fb70 	bl	800650c <print>
 8015e2c:	f06f 0406 	mvn.w	r4, #6
 8015e30:	e7e3      	b.n	8015dfa <Argus_SetConfigurationDynamicAdaption+0x6a>
 8015e32:	4805      	ldr	r0, [pc, #20]	@ (8015e48 <Argus_SetConfigurationDynamicAdaption+0xb8>)
 8015e34:	f7f0 fb6a 	bl	800650c <print>
 8015e38:	f06f 0404 	mvn.w	r4, #4
 8015e3c:	e7dd      	b.n	8015dfa <Argus_SetConfigurationDynamicAdaption+0x6a>
 8015e3e:	bf00      	nop
 8015e40:	0afb8550 	.word	0x0afb8550
 8015e44:	0802e378 	.word	0x0802e378
 8015e48:	0802e350 	.word	0x0802e350

08015e4c <Argus_GetConfigurationDynamicAdaption>:
 8015e4c:	b510      	push	{r4, lr}
 8015e4e:	b338      	cbz	r0, 8015ea0 <Argus_GetConfigurationDynamicAdaption+0x54>
 8015e50:	4b16      	ldr	r3, [pc, #88]	@ (8015eac <Argus_GetConfigurationDynamicAdaption+0x60>)
 8015e52:	6802      	ldr	r2, [r0, #0]
 8015e54:	429a      	cmp	r2, r3
 8015e56:	d11a      	bne.n	8015e8e <Argus_GetConfigurationDynamicAdaption+0x42>
 8015e58:	460c      	mov	r4, r1
 8015e5a:	b1f1      	cbz	r1, 8015e9a <Argus_GetConfigurationDynamicAdaption+0x4e>
 8015e5c:	f500 70ee 	add.w	r0, r0, #476	@ 0x1dc
 8015e60:	f00d fa22 	bl	80232a8 <Argus_Cfg_GetConfigurationPtr>
 8015e64:	f8d0 30f4 	ldr.w	r3, [r0, #244]	@ 0xf4
 8015e68:	f8d0 10f8 	ldr.w	r1, [r0, #248]	@ 0xf8
 8015e6c:	f8d0 20fc 	ldr.w	r2, [r0, #252]	@ 0xfc
 8015e70:	f8d0 c100 	ldr.w	ip, [r0, #256]	@ 0x100
 8015e74:	f8c4 c00c 	str.w	ip, [r4, #12]
 8015e78:	6023      	str	r3, [r4, #0]
 8015e7a:	6061      	str	r1, [r4, #4]
 8015e7c:	60a2      	str	r2, [r4, #8]
 8015e7e:	f8d0 3104 	ldr.w	r3, [r0, #260]	@ 0x104
 8015e82:	6123      	str	r3, [r4, #16]
 8015e84:	f8b0 3108 	ldrh.w	r3, [r0, #264]	@ 0x108
 8015e88:	82a3      	strh	r3, [r4, #20]
 8015e8a:	2000      	movs	r0, #0
 8015e8c:	bd10      	pop	{r4, pc}
 8015e8e:	4808      	ldr	r0, [pc, #32]	@ (8015eb0 <Argus_GetConfigurationDynamicAdaption+0x64>)
 8015e90:	f7f0 fb3c 	bl	800650c <print>
 8015e94:	f06f 0006 	mvn.w	r0, #6
 8015e98:	bd10      	pop	{r4, pc}
 8015e9a:	f06f 0004 	mvn.w	r0, #4
 8015e9e:	bd10      	pop	{r4, pc}
 8015ea0:	4804      	ldr	r0, [pc, #16]	@ (8015eb4 <Argus_GetConfigurationDynamicAdaption+0x68>)
 8015ea2:	f7f0 fb33 	bl	800650c <print>
 8015ea6:	f06f 0004 	mvn.w	r0, #4
 8015eaa:	bd10      	pop	{r4, pc}
 8015eac:	0afb8550 	.word	0x0afb8550
 8015eb0:	0802e378 	.word	0x0802e378
 8015eb4:	0802e350 	.word	0x0802e350

08015eb8 <Argus_SetConfigurationPixelBinning>:
 8015eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015eba:	b0cb      	sub	sp, #300	@ 0x12c
 8015ebc:	2800      	cmp	r0, #0
 8015ebe:	d044      	beq.n	8015f4a <Argus_SetConfigurationPixelBinning+0x92>
 8015ec0:	4b25      	ldr	r3, [pc, #148]	@ (8015f58 <Argus_SetConfigurationPixelBinning+0xa0>)
 8015ec2:	6802      	ldr	r2, [r0, #0]
 8015ec4:	429a      	cmp	r2, r3
 8015ec6:	4605      	mov	r5, r0
 8015ec8:	d139      	bne.n	8015f3e <Argus_SetConfigurationPixelBinning+0x86>
 8015eca:	460c      	mov	r4, r1
 8015ecc:	f500 70ee 	add.w	r0, r0, #476	@ 0x1dc
 8015ed0:	4669      	mov	r1, sp
 8015ed2:	f00d f9e1 	bl	8023298 <Argus_Cfg_GetConfiguration>
 8015ed6:	6820      	ldr	r0, [r4, #0]
 8015ed8:	6861      	ldr	r1, [r4, #4]
 8015eda:	68a2      	ldr	r2, [r4, #8]
 8015edc:	68e3      	ldr	r3, [r4, #12]
 8015ede:	f50d 7c86 	add.w	ip, sp, #268	@ 0x10c
 8015ee2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015ee6:	6920      	ldr	r0, [r4, #16]
 8015ee8:	6961      	ldr	r1, [r4, #20]
 8015eea:	69a2      	ldr	r2, [r4, #24]
 8015eec:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8015ef0:	2201      	movs	r2, #1
 8015ef2:	4611      	mov	r1, r2
 8015ef4:	4628      	mov	r0, r5
 8015ef6:	f7fe fe91 	bl	8014c1c <CheckStateAndRecoverError>
 8015efa:	4604      	mov	r4, r0
 8015efc:	b960      	cbnz	r0, 8015f18 <Argus_SetConfigurationPixelBinning+0x60>
 8015efe:	f505 7042 	add.w	r0, r5, #776	@ 0x308
 8015f02:	f00e fca3 	bl	802484c <Argus_Cal_GetCalibrationPtr>
 8015f06:	4606      	mov	r6, r0
 8015f08:	b1b0      	cbz	r0, 8015f38 <Argus_SetConfigurationPixelBinning+0x80>
 8015f0a:	1d2f      	adds	r7, r5, #4
 8015f0c:	21c0      	movs	r1, #192	@ 0xc0
 8015f0e:	4638      	mov	r0, r7
 8015f10:	f00a ff4a 	bl	8020da8 <Argus_Dev_SetStatusSync>
 8015f14:	4604      	mov	r4, r0
 8015f16:	b110      	cbz	r0, 8015f1e <Argus_SetConfigurationPixelBinning+0x66>
 8015f18:	4620      	mov	r0, r4
 8015f1a:	b04b      	add	sp, #300	@ 0x12c
 8015f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f1e:	4669      	mov	r1, sp
 8015f20:	4632      	mov	r2, r6
 8015f22:	4628      	mov	r0, r5
 8015f24:	f000 fd20 	bl	8016968 <Argus_Core_SetSettingsSync>
 8015f28:	21c0      	movs	r1, #192	@ 0xc0
 8015f2a:	4604      	mov	r4, r0
 8015f2c:	4638      	mov	r0, r7
 8015f2e:	f00b f80d 	bl	8020f4c <Argus_Dev_ClearStatus>
 8015f32:	4620      	mov	r0, r4
 8015f34:	b04b      	add	sp, #300	@ 0x12c
 8015f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f38:	f06f 0404 	mvn.w	r4, #4
 8015f3c:	e7ec      	b.n	8015f18 <Argus_SetConfigurationPixelBinning+0x60>
 8015f3e:	4807      	ldr	r0, [pc, #28]	@ (8015f5c <Argus_SetConfigurationPixelBinning+0xa4>)
 8015f40:	f7f0 fae4 	bl	800650c <print>
 8015f44:	f06f 0406 	mvn.w	r4, #6
 8015f48:	e7e6      	b.n	8015f18 <Argus_SetConfigurationPixelBinning+0x60>
 8015f4a:	4805      	ldr	r0, [pc, #20]	@ (8015f60 <Argus_SetConfigurationPixelBinning+0xa8>)
 8015f4c:	f7f0 fade 	bl	800650c <print>
 8015f50:	f06f 0404 	mvn.w	r4, #4
 8015f54:	e7e0      	b.n	8015f18 <Argus_SetConfigurationPixelBinning+0x60>
 8015f56:	bf00      	nop
 8015f58:	0afb8550 	.word	0x0afb8550
 8015f5c:	0802e378 	.word	0x0802e378
 8015f60:	0802e350 	.word	0x0802e350

08015f64 <Argus_GetConfigurationPixelBinning>:
 8015f64:	b510      	push	{r4, lr}
 8015f66:	b350      	cbz	r0, 8015fbe <Argus_GetConfigurationPixelBinning+0x5a>
 8015f68:	4b18      	ldr	r3, [pc, #96]	@ (8015fcc <Argus_GetConfigurationPixelBinning+0x68>)
 8015f6a:	6802      	ldr	r2, [r0, #0]
 8015f6c:	429a      	cmp	r2, r3
 8015f6e:	d11d      	bne.n	8015fac <Argus_GetConfigurationPixelBinning+0x48>
 8015f70:	460c      	mov	r4, r1
 8015f72:	b309      	cbz	r1, 8015fb8 <Argus_GetConfigurationPixelBinning+0x54>
 8015f74:	f500 70ee 	add.w	r0, r0, #476	@ 0x1dc
 8015f78:	f00d f996 	bl	80232a8 <Argus_Cfg_GetConfigurationPtr>
 8015f7c:	f8d0 210c 	ldr.w	r2, [r0, #268]	@ 0x10c
 8015f80:	f8d0 3110 	ldr.w	r3, [r0, #272]	@ 0x110
 8015f84:	f8d0 1114 	ldr.w	r1, [r0, #276]	@ 0x114
 8015f88:	f8d0 c118 	ldr.w	ip, [r0, #280]	@ 0x118
 8015f8c:	f8c4 c00c 	str.w	ip, [r4, #12]
 8015f90:	6022      	str	r2, [r4, #0]
 8015f92:	6063      	str	r3, [r4, #4]
 8015f94:	60a1      	str	r1, [r4, #8]
 8015f96:	f8d0 211c 	ldr.w	r2, [r0, #284]	@ 0x11c
 8015f9a:	f8d0 3120 	ldr.w	r3, [r0, #288]	@ 0x120
 8015f9e:	f8d0 1124 	ldr.w	r1, [r0, #292]	@ 0x124
 8015fa2:	61a1      	str	r1, [r4, #24]
 8015fa4:	6122      	str	r2, [r4, #16]
 8015fa6:	6163      	str	r3, [r4, #20]
 8015fa8:	2000      	movs	r0, #0
 8015faa:	bd10      	pop	{r4, pc}
 8015fac:	4808      	ldr	r0, [pc, #32]	@ (8015fd0 <Argus_GetConfigurationPixelBinning+0x6c>)
 8015fae:	f7f0 faad 	bl	800650c <print>
 8015fb2:	f06f 0006 	mvn.w	r0, #6
 8015fb6:	bd10      	pop	{r4, pc}
 8015fb8:	f06f 0004 	mvn.w	r0, #4
 8015fbc:	bd10      	pop	{r4, pc}
 8015fbe:	4805      	ldr	r0, [pc, #20]	@ (8015fd4 <Argus_GetConfigurationPixelBinning+0x70>)
 8015fc0:	f7f0 faa4 	bl	800650c <print>
 8015fc4:	f06f 0004 	mvn.w	r0, #4
 8015fc8:	bd10      	pop	{r4, pc}
 8015fca:	bf00      	nop
 8015fcc:	0afb8550 	.word	0x0afb8550
 8015fd0:	0802e378 	.word	0x0802e378
 8015fd4:	0802e350 	.word	0x0802e350

08015fd8 <Argus_SetCalibrationGlobalRangeOffsets>:
 8015fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015fda:	f5ad 7d31 	sub.w	sp, sp, #708	@ 0x2c4
 8015fde:	2800      	cmp	r0, #0
 8015fe0:	d03e      	beq.n	8016060 <Argus_SetCalibrationGlobalRangeOffsets+0x88>
 8015fe2:	4b22      	ldr	r3, [pc, #136]	@ (801606c <Argus_SetCalibrationGlobalRangeOffsets+0x94>)
 8015fe4:	4615      	mov	r5, r2
 8015fe6:	6802      	ldr	r2, [r0, #0]
 8015fe8:	429a      	cmp	r2, r3
 8015fea:	4604      	mov	r4, r0
 8015fec:	d132      	bne.n	8016054 <Argus_SetCalibrationGlobalRangeOffsets+0x7c>
 8015fee:	460e      	mov	r6, r1
 8015ff0:	f500 7042 	add.w	r0, r0, #776	@ 0x308
 8015ff4:	a901      	add	r1, sp, #4
 8015ff6:	f00e fc21 	bl	802483c <Argus_Cal_GetCalibration>
 8015ffa:	2201      	movs	r2, #1
 8015ffc:	4611      	mov	r1, r2
 8015ffe:	4620      	mov	r0, r4
 8016000:	f8ad 50a4 	strh.w	r5, [sp, #164]	@ 0xa4
 8016004:	f8ad 60a2 	strh.w	r6, [sp, #162]	@ 0xa2
 8016008:	f7fe fe08 	bl	8014c1c <CheckStateAndRecoverError>
 801600c:	4605      	mov	r5, r0
 801600e:	b960      	cbnz	r0, 801602a <Argus_SetCalibrationGlobalRangeOffsets+0x52>
 8016010:	f504 70ee 	add.w	r0, r4, #476	@ 0x1dc
 8016014:	f00d f948 	bl	80232a8 <Argus_Cfg_GetConfigurationPtr>
 8016018:	4606      	mov	r6, r0
 801601a:	b1c0      	cbz	r0, 801604e <Argus_SetCalibrationGlobalRangeOffsets+0x76>
 801601c:	1d27      	adds	r7, r4, #4
 801601e:	21c0      	movs	r1, #192	@ 0xc0
 8016020:	4638      	mov	r0, r7
 8016022:	f00a fec1 	bl	8020da8 <Argus_Dev_SetStatusSync>
 8016026:	4605      	mov	r5, r0
 8016028:	b118      	cbz	r0, 8016032 <Argus_SetCalibrationGlobalRangeOffsets+0x5a>
 801602a:	4628      	mov	r0, r5
 801602c:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 8016030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016032:	4631      	mov	r1, r6
 8016034:	aa01      	add	r2, sp, #4
 8016036:	4620      	mov	r0, r4
 8016038:	f000 fc96 	bl	8016968 <Argus_Core_SetSettingsSync>
 801603c:	21c0      	movs	r1, #192	@ 0xc0
 801603e:	4605      	mov	r5, r0
 8016040:	4638      	mov	r0, r7
 8016042:	f00a ff83 	bl	8020f4c <Argus_Dev_ClearStatus>
 8016046:	4628      	mov	r0, r5
 8016048:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 801604c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801604e:	f06f 0504 	mvn.w	r5, #4
 8016052:	e7ea      	b.n	801602a <Argus_SetCalibrationGlobalRangeOffsets+0x52>
 8016054:	4806      	ldr	r0, [pc, #24]	@ (8016070 <Argus_SetCalibrationGlobalRangeOffsets+0x98>)
 8016056:	f7f0 fa59 	bl	800650c <print>
 801605a:	f06f 0506 	mvn.w	r5, #6
 801605e:	e7e4      	b.n	801602a <Argus_SetCalibrationGlobalRangeOffsets+0x52>
 8016060:	4804      	ldr	r0, [pc, #16]	@ (8016074 <Argus_SetCalibrationGlobalRangeOffsets+0x9c>)
 8016062:	f7f0 fa53 	bl	800650c <print>
 8016066:	f06f 0504 	mvn.w	r5, #4
 801606a:	e7de      	b.n	801602a <Argus_SetCalibrationGlobalRangeOffsets+0x52>
 801606c:	0afb8550 	.word	0x0afb8550
 8016070:	0802e378 	.word	0x0802e378
 8016074:	0802e350 	.word	0x0802e350

08016078 <Argus_GetCalibrationGlobalRangeOffsets>:
 8016078:	b570      	push	{r4, r5, r6, lr}
 801607a:	b310      	cbz	r0, 80160c2 <Argus_GetCalibrationGlobalRangeOffsets+0x4a>
 801607c:	4b14      	ldr	r3, [pc, #80]	@ (80160d0 <Argus_GetCalibrationGlobalRangeOffsets+0x58>)
 801607e:	4616      	mov	r6, r2
 8016080:	6802      	ldr	r2, [r0, #0]
 8016082:	429a      	cmp	r2, r3
 8016084:	d117      	bne.n	80160b6 <Argus_GetCalibrationGlobalRangeOffsets+0x3e>
 8016086:	460d      	mov	r5, r1
 8016088:	b191      	cbz	r1, 80160b0 <Argus_GetCalibrationGlobalRangeOffsets+0x38>
 801608a:	b18e      	cbz	r6, 80160b0 <Argus_GetCalibrationGlobalRangeOffsets+0x38>
 801608c:	f500 7442 	add.w	r4, r0, #776	@ 0x308
 8016090:	4620      	mov	r0, r4
 8016092:	f00e fbdb 	bl	802484c <Argus_Cal_GetCalibrationPtr>
 8016096:	4603      	mov	r3, r0
 8016098:	4620      	mov	r0, r4
 801609a:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	@ 0x9e
 801609e:	802b      	strh	r3, [r5, #0]
 80160a0:	f00e fbd4 	bl	802484c <Argus_Cal_GetCalibrationPtr>
 80160a4:	4603      	mov	r3, r0
 80160a6:	2000      	movs	r0, #0
 80160a8:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	@ 0xa0
 80160ac:	8033      	strh	r3, [r6, #0]
 80160ae:	bd70      	pop	{r4, r5, r6, pc}
 80160b0:	f06f 0004 	mvn.w	r0, #4
 80160b4:	bd70      	pop	{r4, r5, r6, pc}
 80160b6:	4807      	ldr	r0, [pc, #28]	@ (80160d4 <Argus_GetCalibrationGlobalRangeOffsets+0x5c>)
 80160b8:	f7f0 fa28 	bl	800650c <print>
 80160bc:	f06f 0006 	mvn.w	r0, #6
 80160c0:	bd70      	pop	{r4, r5, r6, pc}
 80160c2:	4805      	ldr	r0, [pc, #20]	@ (80160d8 <Argus_GetCalibrationGlobalRangeOffsets+0x60>)
 80160c4:	f7f0 fa22 	bl	800650c <print>
 80160c8:	f06f 0004 	mvn.w	r0, #4
 80160cc:	bd70      	pop	{r4, r5, r6, pc}
 80160ce:	bf00      	nop
 80160d0:	0afb8550 	.word	0x0afb8550
 80160d4:	0802e378 	.word	0x0802e378
 80160d8:	0802e350 	.word	0x0802e350

080160dc <Argus_SetCalibrationPixelRangeOffsets>:
 80160dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80160de:	f5ad 7d31 	sub.w	sp, sp, #708	@ 0x2c4
 80160e2:	2800      	cmp	r0, #0
 80160e4:	d042      	beq.n	801616c <Argus_SetCalibrationPixelRangeOffsets+0x90>
 80160e6:	4b24      	ldr	r3, [pc, #144]	@ (8016178 <Argus_SetCalibrationPixelRangeOffsets+0x9c>)
 80160e8:	6802      	ldr	r2, [r0, #0]
 80160ea:	429a      	cmp	r2, r3
 80160ec:	4604      	mov	r4, r0
 80160ee:	d137      	bne.n	8016160 <Argus_SetCalibrationPixelRangeOffsets+0x84>
 80160f0:	460d      	mov	r5, r1
 80160f2:	f500 7042 	add.w	r0, r0, #776	@ 0x308
 80160f6:	a901      	add	r1, sp, #4
 80160f8:	f00e fba0 	bl	802483c <Argus_Cal_GetCalibration>
 80160fc:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 80160fe:	4629      	mov	r1, r5
 8016100:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8016104:	2280      	movs	r2, #128	@ 0x80
 8016106:	a808      	add	r0, sp, #32
 8016108:	93a3      	str	r3, [sp, #652]	@ 0x28c
 801610a:	f014 ffe6 	bl	802b0da <memcpy>
 801610e:	2201      	movs	r2, #1
 8016110:	4611      	mov	r1, r2
 8016112:	4620      	mov	r0, r4
 8016114:	f7fe fd82 	bl	8014c1c <CheckStateAndRecoverError>
 8016118:	4605      	mov	r5, r0
 801611a:	b960      	cbnz	r0, 8016136 <Argus_SetCalibrationPixelRangeOffsets+0x5a>
 801611c:	f504 70ee 	add.w	r0, r4, #476	@ 0x1dc
 8016120:	f00d f8c2 	bl	80232a8 <Argus_Cfg_GetConfigurationPtr>
 8016124:	4606      	mov	r6, r0
 8016126:	b1c0      	cbz	r0, 801615a <Argus_SetCalibrationPixelRangeOffsets+0x7e>
 8016128:	1d27      	adds	r7, r4, #4
 801612a:	21c0      	movs	r1, #192	@ 0xc0
 801612c:	4638      	mov	r0, r7
 801612e:	f00a fe3b 	bl	8020da8 <Argus_Dev_SetStatusSync>
 8016132:	4605      	mov	r5, r0
 8016134:	b118      	cbz	r0, 801613e <Argus_SetCalibrationPixelRangeOffsets+0x62>
 8016136:	4628      	mov	r0, r5
 8016138:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 801613c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801613e:	4631      	mov	r1, r6
 8016140:	aa01      	add	r2, sp, #4
 8016142:	4620      	mov	r0, r4
 8016144:	f000 fc10 	bl	8016968 <Argus_Core_SetSettingsSync>
 8016148:	21c0      	movs	r1, #192	@ 0xc0
 801614a:	4605      	mov	r5, r0
 801614c:	4638      	mov	r0, r7
 801614e:	f00a fefd 	bl	8020f4c <Argus_Dev_ClearStatus>
 8016152:	4628      	mov	r0, r5
 8016154:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 8016158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801615a:	f06f 0504 	mvn.w	r5, #4
 801615e:	e7ea      	b.n	8016136 <Argus_SetCalibrationPixelRangeOffsets+0x5a>
 8016160:	4806      	ldr	r0, [pc, #24]	@ (801617c <Argus_SetCalibrationPixelRangeOffsets+0xa0>)
 8016162:	f7f0 f9d3 	bl	800650c <print>
 8016166:	f06f 0506 	mvn.w	r5, #6
 801616a:	e7e4      	b.n	8016136 <Argus_SetCalibrationPixelRangeOffsets+0x5a>
 801616c:	4804      	ldr	r0, [pc, #16]	@ (8016180 <Argus_SetCalibrationPixelRangeOffsets+0xa4>)
 801616e:	f7f0 f9cd 	bl	800650c <print>
 8016172:	f06f 0504 	mvn.w	r5, #4
 8016176:	e7de      	b.n	8016136 <Argus_SetCalibrationPixelRangeOffsets+0x5a>
 8016178:	0afb8550 	.word	0x0afb8550
 801617c:	0802e378 	.word	0x0802e378
 8016180:	0802e350 	.word	0x0802e350

08016184 <Argus_GetCalibrationPixelRangeOffsets>:
 8016184:	b510      	push	{r4, lr}
 8016186:	b1d0      	cbz	r0, 80161be <Argus_GetCalibrationPixelRangeOffsets+0x3a>
 8016188:	4b10      	ldr	r3, [pc, #64]	@ (80161cc <Argus_GetCalibrationPixelRangeOffsets+0x48>)
 801618a:	6802      	ldr	r2, [r0, #0]
 801618c:	429a      	cmp	r2, r3
 801618e:	d10d      	bne.n	80161ac <Argus_GetCalibrationPixelRangeOffsets+0x28>
 8016190:	460c      	mov	r4, r1
 8016192:	b189      	cbz	r1, 80161b8 <Argus_GetCalibrationPixelRangeOffsets+0x34>
 8016194:	f500 7042 	add.w	r0, r0, #776	@ 0x308
 8016198:	f00e fb58 	bl	802484c <Argus_Cal_GetCalibrationPtr>
 801619c:	2280      	movs	r2, #128	@ 0x80
 801619e:	f100 011c 	add.w	r1, r0, #28
 80161a2:	4620      	mov	r0, r4
 80161a4:	f014 ff99 	bl	802b0da <memcpy>
 80161a8:	2000      	movs	r0, #0
 80161aa:	bd10      	pop	{r4, pc}
 80161ac:	4808      	ldr	r0, [pc, #32]	@ (80161d0 <Argus_GetCalibrationPixelRangeOffsets+0x4c>)
 80161ae:	f7f0 f9ad 	bl	800650c <print>
 80161b2:	f06f 0006 	mvn.w	r0, #6
 80161b6:	bd10      	pop	{r4, pc}
 80161b8:	f06f 0004 	mvn.w	r0, #4
 80161bc:	bd10      	pop	{r4, pc}
 80161be:	4805      	ldr	r0, [pc, #20]	@ (80161d4 <Argus_GetCalibrationPixelRangeOffsets+0x50>)
 80161c0:	f7f0 f9a4 	bl	800650c <print>
 80161c4:	f06f 0004 	mvn.w	r0, #4
 80161c8:	bd10      	pop	{r4, pc}
 80161ca:	bf00      	nop
 80161cc:	0afb8550 	.word	0x0afb8550
 80161d0:	0802e378 	.word	0x0802e378
 80161d4:	0802e350 	.word	0x0802e350

080161d8 <Argus_ResetCalibrationPixelRangeOffsets>:
 80161d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161da:	f5ad 7d31 	sub.w	sp, sp, #708	@ 0x2c4
 80161de:	2800      	cmp	r0, #0
 80161e0:	d044      	beq.n	801626c <Argus_ResetCalibrationPixelRangeOffsets+0x94>
 80161e2:	4b25      	ldr	r3, [pc, #148]	@ (8016278 <Argus_ResetCalibrationPixelRangeOffsets+0xa0>)
 80161e4:	6802      	ldr	r2, [r0, #0]
 80161e6:	429a      	cmp	r2, r3
 80161e8:	4604      	mov	r4, r0
 80161ea:	d139      	bne.n	8016260 <Argus_ResetCalibrationPixelRangeOffsets+0x88>
 80161ec:	a901      	add	r1, sp, #4
 80161ee:	f500 7042 	add.w	r0, r0, #776	@ 0x308
 80161f2:	f504 76ee 	add.w	r6, r4, #476	@ 0x1dc
 80161f6:	f00e fb21 	bl	802483c <Argus_Cal_GetCalibration>
 80161fa:	4630      	mov	r0, r6
 80161fc:	f00d f898 	bl	8023330 <Argus_Cfg_GetMeasurementMode>
 8016200:	4601      	mov	r1, r0
 8016202:	a808      	add	r0, sp, #32
 8016204:	f010 fc9e 	bl	8026b44 <Argus_GetPixelRangeOffsets_Callback>
 8016208:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 801620a:	2201      	movs	r2, #1
 801620c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8016210:	4611      	mov	r1, r2
 8016212:	4620      	mov	r0, r4
 8016214:	93a3      	str	r3, [sp, #652]	@ 0x28c
 8016216:	f7fe fd01 	bl	8014c1c <CheckStateAndRecoverError>
 801621a:	4605      	mov	r5, r0
 801621c:	b958      	cbnz	r0, 8016236 <Argus_ResetCalibrationPixelRangeOffsets+0x5e>
 801621e:	4630      	mov	r0, r6
 8016220:	f00d f842 	bl	80232a8 <Argus_Cfg_GetConfigurationPtr>
 8016224:	4606      	mov	r6, r0
 8016226:	b1c0      	cbz	r0, 801625a <Argus_ResetCalibrationPixelRangeOffsets+0x82>
 8016228:	1d27      	adds	r7, r4, #4
 801622a:	21c0      	movs	r1, #192	@ 0xc0
 801622c:	4638      	mov	r0, r7
 801622e:	f00a fdbb 	bl	8020da8 <Argus_Dev_SetStatusSync>
 8016232:	4605      	mov	r5, r0
 8016234:	b118      	cbz	r0, 801623e <Argus_ResetCalibrationPixelRangeOffsets+0x66>
 8016236:	4628      	mov	r0, r5
 8016238:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 801623c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801623e:	4631      	mov	r1, r6
 8016240:	aa01      	add	r2, sp, #4
 8016242:	4620      	mov	r0, r4
 8016244:	f000 fb90 	bl	8016968 <Argus_Core_SetSettingsSync>
 8016248:	21c0      	movs	r1, #192	@ 0xc0
 801624a:	4605      	mov	r5, r0
 801624c:	4638      	mov	r0, r7
 801624e:	f00a fe7d 	bl	8020f4c <Argus_Dev_ClearStatus>
 8016252:	4628      	mov	r0, r5
 8016254:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 8016258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801625a:	f06f 0504 	mvn.w	r5, #4
 801625e:	e7ea      	b.n	8016236 <Argus_ResetCalibrationPixelRangeOffsets+0x5e>
 8016260:	4806      	ldr	r0, [pc, #24]	@ (801627c <Argus_ResetCalibrationPixelRangeOffsets+0xa4>)
 8016262:	f7f0 f953 	bl	800650c <print>
 8016266:	f06f 0506 	mvn.w	r5, #6
 801626a:	e7e4      	b.n	8016236 <Argus_ResetCalibrationPixelRangeOffsets+0x5e>
 801626c:	4804      	ldr	r0, [pc, #16]	@ (8016280 <Argus_ResetCalibrationPixelRangeOffsets+0xa8>)
 801626e:	f7f0 f94d 	bl	800650c <print>
 8016272:	f06f 0504 	mvn.w	r5, #4
 8016276:	e7de      	b.n	8016236 <Argus_ResetCalibrationPixelRangeOffsets+0x5e>
 8016278:	0afb8550 	.word	0x0afb8550
 801627c:	0802e378 	.word	0x0802e378
 8016280:	0802e350 	.word	0x0802e350

08016284 <Argus_SetCalibrationRangeOffsetSequenceSampleTime>:
 8016284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016286:	f5ad 7d31 	sub.w	sp, sp, #708	@ 0x2c4
 801628a:	2800      	cmp	r0, #0
 801628c:	d03b      	beq.n	8016306 <Argus_SetCalibrationRangeOffsetSequenceSampleTime+0x82>
 801628e:	4b21      	ldr	r3, [pc, #132]	@ (8016314 <Argus_SetCalibrationRangeOffsetSequenceSampleTime+0x90>)
 8016290:	6802      	ldr	r2, [r0, #0]
 8016292:	429a      	cmp	r2, r3
 8016294:	4604      	mov	r4, r0
 8016296:	d130      	bne.n	80162fa <Argus_SetCalibrationRangeOffsetSequenceSampleTime+0x76>
 8016298:	460d      	mov	r5, r1
 801629a:	f500 7042 	add.w	r0, r0, #776	@ 0x308
 801629e:	a901      	add	r1, sp, #4
 80162a0:	f00e facc 	bl	802483c <Argus_Cal_GetCalibration>
 80162a4:	2201      	movs	r2, #1
 80162a6:	4611      	mov	r1, r2
 80162a8:	4620      	mov	r0, r4
 80162aa:	f8ad 52be 	strh.w	r5, [sp, #702]	@ 0x2be
 80162ae:	f7fe fcb5 	bl	8014c1c <CheckStateAndRecoverError>
 80162b2:	4605      	mov	r5, r0
 80162b4:	b960      	cbnz	r0, 80162d0 <Argus_SetCalibrationRangeOffsetSequenceSampleTime+0x4c>
 80162b6:	f504 70ee 	add.w	r0, r4, #476	@ 0x1dc
 80162ba:	f00c fff5 	bl	80232a8 <Argus_Cfg_GetConfigurationPtr>
 80162be:	4606      	mov	r6, r0
 80162c0:	b1c0      	cbz	r0, 80162f4 <Argus_SetCalibrationRangeOffsetSequenceSampleTime+0x70>
 80162c2:	1d27      	adds	r7, r4, #4
 80162c4:	21c0      	movs	r1, #192	@ 0xc0
 80162c6:	4638      	mov	r0, r7
 80162c8:	f00a fd6e 	bl	8020da8 <Argus_Dev_SetStatusSync>
 80162cc:	4605      	mov	r5, r0
 80162ce:	b118      	cbz	r0, 80162d8 <Argus_SetCalibrationRangeOffsetSequenceSampleTime+0x54>
 80162d0:	4628      	mov	r0, r5
 80162d2:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 80162d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162d8:	4631      	mov	r1, r6
 80162da:	aa01      	add	r2, sp, #4
 80162dc:	4620      	mov	r0, r4
 80162de:	f000 fb43 	bl	8016968 <Argus_Core_SetSettingsSync>
 80162e2:	21c0      	movs	r1, #192	@ 0xc0
 80162e4:	4605      	mov	r5, r0
 80162e6:	4638      	mov	r0, r7
 80162e8:	f00a fe30 	bl	8020f4c <Argus_Dev_ClearStatus>
 80162ec:	4628      	mov	r0, r5
 80162ee:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 80162f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162f4:	f06f 0504 	mvn.w	r5, #4
 80162f8:	e7ea      	b.n	80162d0 <Argus_SetCalibrationRangeOffsetSequenceSampleTime+0x4c>
 80162fa:	4807      	ldr	r0, [pc, #28]	@ (8016318 <Argus_SetCalibrationRangeOffsetSequenceSampleTime+0x94>)
 80162fc:	f7f0 f906 	bl	800650c <print>
 8016300:	f06f 0506 	mvn.w	r5, #6
 8016304:	e7e4      	b.n	80162d0 <Argus_SetCalibrationRangeOffsetSequenceSampleTime+0x4c>
 8016306:	4805      	ldr	r0, [pc, #20]	@ (801631c <Argus_SetCalibrationRangeOffsetSequenceSampleTime+0x98>)
 8016308:	f7f0 f900 	bl	800650c <print>
 801630c:	f06f 0504 	mvn.w	r5, #4
 8016310:	e7de      	b.n	80162d0 <Argus_SetCalibrationRangeOffsetSequenceSampleTime+0x4c>
 8016312:	bf00      	nop
 8016314:	0afb8550 	.word	0x0afb8550
 8016318:	0802e378 	.word	0x0802e378
 801631c:	0802e350 	.word	0x0802e350

08016320 <Argus_GetCalibrationRangeOffsetSequenceSampleTime>:
 8016320:	b510      	push	{r4, lr}
 8016322:	b1c0      	cbz	r0, 8016356 <Argus_GetCalibrationRangeOffsetSequenceSampleTime+0x36>
 8016324:	4b0f      	ldr	r3, [pc, #60]	@ (8016364 <Argus_GetCalibrationRangeOffsetSequenceSampleTime+0x44>)
 8016326:	6802      	ldr	r2, [r0, #0]
 8016328:	429a      	cmp	r2, r3
 801632a:	d10b      	bne.n	8016344 <Argus_GetCalibrationRangeOffsetSequenceSampleTime+0x24>
 801632c:	460c      	mov	r4, r1
 801632e:	b179      	cbz	r1, 8016350 <Argus_GetCalibrationRangeOffsetSequenceSampleTime+0x30>
 8016330:	f500 7042 	add.w	r0, r0, #776	@ 0x308
 8016334:	f00e fa8a 	bl	802484c <Argus_Cal_GetCalibrationPtr>
 8016338:	4603      	mov	r3, r0
 801633a:	2000      	movs	r0, #0
 801633c:	f8b3 32ba 	ldrh.w	r3, [r3, #698]	@ 0x2ba
 8016340:	8023      	strh	r3, [r4, #0]
 8016342:	bd10      	pop	{r4, pc}
 8016344:	4808      	ldr	r0, [pc, #32]	@ (8016368 <Argus_GetCalibrationRangeOffsetSequenceSampleTime+0x48>)
 8016346:	f7f0 f8e1 	bl	800650c <print>
 801634a:	f06f 0006 	mvn.w	r0, #6
 801634e:	bd10      	pop	{r4, pc}
 8016350:	f06f 0004 	mvn.w	r0, #4
 8016354:	bd10      	pop	{r4, pc}
 8016356:	4805      	ldr	r0, [pc, #20]	@ (801636c <Argus_GetCalibrationRangeOffsetSequenceSampleTime+0x4c>)
 8016358:	f7f0 f8d8 	bl	800650c <print>
 801635c:	f06f 0004 	mvn.w	r0, #4
 8016360:	bd10      	pop	{r4, pc}
 8016362:	bf00      	nop
 8016364:	0afb8550 	.word	0x0afb8550
 8016368:	0802e378 	.word	0x0802e378
 801636c:	0802e350 	.word	0x0802e350

08016370 <Argus_SetCalibrationCrosstalkVectorTable>:
 8016370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016372:	f5ad 7d31 	sub.w	sp, sp, #708	@ 0x2c4
 8016376:	2800      	cmp	r0, #0
 8016378:	d044      	beq.n	8016404 <Argus_SetCalibrationCrosstalkVectorTable+0x94>
 801637a:	4b25      	ldr	r3, [pc, #148]	@ (8016410 <Argus_SetCalibrationCrosstalkVectorTable+0xa0>)
 801637c:	6802      	ldr	r2, [r0, #0]
 801637e:	429a      	cmp	r2, r3
 8016380:	4604      	mov	r4, r0
 8016382:	d139      	bne.n	80163f8 <Argus_SetCalibrationCrosstalkVectorTable+0x88>
 8016384:	460d      	mov	r5, r1
 8016386:	f500 7042 	add.w	r0, r0, #776	@ 0x308
 801638a:	a901      	add	r1, sp, #4
 801638c:	f00e fa56 	bl	802483c <Argus_Cal_GetCalibration>
 8016390:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8016392:	4629      	mov	r1, r5
 8016394:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8016398:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801639c:	f50d 7093 	add.w	r0, sp, #294	@ 0x126
 80163a0:	93a3      	str	r3, [sp, #652]	@ 0x28c
 80163a2:	f014 fe9a 	bl	802b0da <memcpy>
 80163a6:	2201      	movs	r2, #1
 80163a8:	4611      	mov	r1, r2
 80163aa:	4620      	mov	r0, r4
 80163ac:	f7fe fc36 	bl	8014c1c <CheckStateAndRecoverError>
 80163b0:	4605      	mov	r5, r0
 80163b2:	b960      	cbnz	r0, 80163ce <Argus_SetCalibrationCrosstalkVectorTable+0x5e>
 80163b4:	f504 70ee 	add.w	r0, r4, #476	@ 0x1dc
 80163b8:	f00c ff76 	bl	80232a8 <Argus_Cfg_GetConfigurationPtr>
 80163bc:	4606      	mov	r6, r0
 80163be:	b1c0      	cbz	r0, 80163f2 <Argus_SetCalibrationCrosstalkVectorTable+0x82>
 80163c0:	1d27      	adds	r7, r4, #4
 80163c2:	21c0      	movs	r1, #192	@ 0xc0
 80163c4:	4638      	mov	r0, r7
 80163c6:	f00a fcef 	bl	8020da8 <Argus_Dev_SetStatusSync>
 80163ca:	4605      	mov	r5, r0
 80163cc:	b118      	cbz	r0, 80163d6 <Argus_SetCalibrationCrosstalkVectorTable+0x66>
 80163ce:	4628      	mov	r0, r5
 80163d0:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 80163d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163d6:	4631      	mov	r1, r6
 80163d8:	aa01      	add	r2, sp, #4
 80163da:	4620      	mov	r0, r4
 80163dc:	f000 fac4 	bl	8016968 <Argus_Core_SetSettingsSync>
 80163e0:	21c0      	movs	r1, #192	@ 0xc0
 80163e2:	4605      	mov	r5, r0
 80163e4:	4638      	mov	r0, r7
 80163e6:	f00a fdb1 	bl	8020f4c <Argus_Dev_ClearStatus>
 80163ea:	4628      	mov	r0, r5
 80163ec:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 80163f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163f2:	f06f 0504 	mvn.w	r5, #4
 80163f6:	e7ea      	b.n	80163ce <Argus_SetCalibrationCrosstalkVectorTable+0x5e>
 80163f8:	4806      	ldr	r0, [pc, #24]	@ (8016414 <Argus_SetCalibrationCrosstalkVectorTable+0xa4>)
 80163fa:	f7f0 f887 	bl	800650c <print>
 80163fe:	f06f 0506 	mvn.w	r5, #6
 8016402:	e7e4      	b.n	80163ce <Argus_SetCalibrationCrosstalkVectorTable+0x5e>
 8016404:	4804      	ldr	r0, [pc, #16]	@ (8016418 <Argus_SetCalibrationCrosstalkVectorTable+0xa8>)
 8016406:	f7f0 f881 	bl	800650c <print>
 801640a:	f06f 0504 	mvn.w	r5, #4
 801640e:	e7de      	b.n	80163ce <Argus_SetCalibrationCrosstalkVectorTable+0x5e>
 8016410:	0afb8550 	.word	0x0afb8550
 8016414:	0802e378 	.word	0x0802e378
 8016418:	0802e350 	.word	0x0802e350

0801641c <Argus_GetCalibrationCrosstalkVectorTable>:
 801641c:	b510      	push	{r4, lr}
 801641e:	b1d8      	cbz	r0, 8016458 <Argus_GetCalibrationCrosstalkVectorTable+0x3c>
 8016420:	4b10      	ldr	r3, [pc, #64]	@ (8016464 <Argus_GetCalibrationCrosstalkVectorTable+0x48>)
 8016422:	6802      	ldr	r2, [r0, #0]
 8016424:	429a      	cmp	r2, r3
 8016426:	d10e      	bne.n	8016446 <Argus_GetCalibrationCrosstalkVectorTable+0x2a>
 8016428:	460c      	mov	r4, r1
 801642a:	b191      	cbz	r1, 8016452 <Argus_GetCalibrationCrosstalkVectorTable+0x36>
 801642c:	f500 7042 	add.w	r0, r0, #776	@ 0x308
 8016430:	f00e fa0c 	bl	802484c <Argus_Cal_GetCalibrationPtr>
 8016434:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016438:	f500 7191 	add.w	r1, r0, #290	@ 0x122
 801643c:	4620      	mov	r0, r4
 801643e:	f014 fe4c 	bl	802b0da <memcpy>
 8016442:	2000      	movs	r0, #0
 8016444:	bd10      	pop	{r4, pc}
 8016446:	4808      	ldr	r0, [pc, #32]	@ (8016468 <Argus_GetCalibrationCrosstalkVectorTable+0x4c>)
 8016448:	f7f0 f860 	bl	800650c <print>
 801644c:	f06f 0006 	mvn.w	r0, #6
 8016450:	bd10      	pop	{r4, pc}
 8016452:	f06f 0004 	mvn.w	r0, #4
 8016456:	bd10      	pop	{r4, pc}
 8016458:	4804      	ldr	r0, [pc, #16]	@ (801646c <Argus_GetCalibrationCrosstalkVectorTable+0x50>)
 801645a:	f7f0 f857 	bl	800650c <print>
 801645e:	f06f 0004 	mvn.w	r0, #4
 8016462:	bd10      	pop	{r4, pc}
 8016464:	0afb8550 	.word	0x0afb8550
 8016468:	0802e378 	.word	0x0802e378
 801646c:	0802e350 	.word	0x0802e350

08016470 <Argus_ResetCalibrationCrosstalkVectorTable>:
 8016470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016472:	f5ad 7d31 	sub.w	sp, sp, #708	@ 0x2c4
 8016476:	2800      	cmp	r0, #0
 8016478:	d045      	beq.n	8016506 <Argus_ResetCalibrationCrosstalkVectorTable+0x96>
 801647a:	4b26      	ldr	r3, [pc, #152]	@ (8016514 <Argus_ResetCalibrationCrosstalkVectorTable+0xa4>)
 801647c:	6802      	ldr	r2, [r0, #0]
 801647e:	429a      	cmp	r2, r3
 8016480:	4604      	mov	r4, r0
 8016482:	d13a      	bne.n	80164fa <Argus_ResetCalibrationCrosstalkVectorTable+0x8a>
 8016484:	a901      	add	r1, sp, #4
 8016486:	f500 7042 	add.w	r0, r0, #776	@ 0x308
 801648a:	f504 76ee 	add.w	r6, r4, #476	@ 0x1dc
 801648e:	f00e f9d5 	bl	802483c <Argus_Cal_GetCalibration>
 8016492:	4630      	mov	r0, r6
 8016494:	f00c ff4c 	bl	8023330 <Argus_Cfg_GetMeasurementMode>
 8016498:	4601      	mov	r1, r0
 801649a:	f50d 7093 	add.w	r0, sp, #294	@ 0x126
 801649e:	f010 fccd 	bl	8026e3c <Argus_GetCrosstalkVectorTable_Callback>
 80164a2:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 80164a4:	2201      	movs	r2, #1
 80164a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80164aa:	4611      	mov	r1, r2
 80164ac:	4620      	mov	r0, r4
 80164ae:	93a3      	str	r3, [sp, #652]	@ 0x28c
 80164b0:	f7fe fbb4 	bl	8014c1c <CheckStateAndRecoverError>
 80164b4:	4605      	mov	r5, r0
 80164b6:	b958      	cbnz	r0, 80164d0 <Argus_ResetCalibrationCrosstalkVectorTable+0x60>
 80164b8:	4630      	mov	r0, r6
 80164ba:	f00c fef5 	bl	80232a8 <Argus_Cfg_GetConfigurationPtr>
 80164be:	4606      	mov	r6, r0
 80164c0:	b1c0      	cbz	r0, 80164f4 <Argus_ResetCalibrationCrosstalkVectorTable+0x84>
 80164c2:	1d27      	adds	r7, r4, #4
 80164c4:	21c0      	movs	r1, #192	@ 0xc0
 80164c6:	4638      	mov	r0, r7
 80164c8:	f00a fc6e 	bl	8020da8 <Argus_Dev_SetStatusSync>
 80164cc:	4605      	mov	r5, r0
 80164ce:	b118      	cbz	r0, 80164d8 <Argus_ResetCalibrationCrosstalkVectorTable+0x68>
 80164d0:	4628      	mov	r0, r5
 80164d2:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 80164d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164d8:	4631      	mov	r1, r6
 80164da:	aa01      	add	r2, sp, #4
 80164dc:	4620      	mov	r0, r4
 80164de:	f000 fa43 	bl	8016968 <Argus_Core_SetSettingsSync>
 80164e2:	21c0      	movs	r1, #192	@ 0xc0
 80164e4:	4605      	mov	r5, r0
 80164e6:	4638      	mov	r0, r7
 80164e8:	f00a fd30 	bl	8020f4c <Argus_Dev_ClearStatus>
 80164ec:	4628      	mov	r0, r5
 80164ee:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 80164f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164f4:	f06f 0504 	mvn.w	r5, #4
 80164f8:	e7ea      	b.n	80164d0 <Argus_ResetCalibrationCrosstalkVectorTable+0x60>
 80164fa:	4807      	ldr	r0, [pc, #28]	@ (8016518 <Argus_ResetCalibrationCrosstalkVectorTable+0xa8>)
 80164fc:	f7f0 f806 	bl	800650c <print>
 8016500:	f06f 0506 	mvn.w	r5, #6
 8016504:	e7e4      	b.n	80164d0 <Argus_ResetCalibrationCrosstalkVectorTable+0x60>
 8016506:	4805      	ldr	r0, [pc, #20]	@ (801651c <Argus_ResetCalibrationCrosstalkVectorTable+0xac>)
 8016508:	f7f0 f800 	bl	800650c <print>
 801650c:	f06f 0504 	mvn.w	r5, #4
 8016510:	e7de      	b.n	80164d0 <Argus_ResetCalibrationCrosstalkVectorTable+0x60>
 8016512:	bf00      	nop
 8016514:	0afb8550 	.word	0x0afb8550
 8016518:	0802e378 	.word	0x0802e378
 801651c:	0802e350 	.word	0x0802e350

08016520 <Argus_SetCalibrationCrosstalkSequenceSampleTime>:
 8016520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016522:	f5ad 7d31 	sub.w	sp, sp, #708	@ 0x2c4
 8016526:	2800      	cmp	r0, #0
 8016528:	d03b      	beq.n	80165a2 <Argus_SetCalibrationCrosstalkSequenceSampleTime+0x82>
 801652a:	4b21      	ldr	r3, [pc, #132]	@ (80165b0 <Argus_SetCalibrationCrosstalkSequenceSampleTime+0x90>)
 801652c:	6802      	ldr	r2, [r0, #0]
 801652e:	429a      	cmp	r2, r3
 8016530:	4604      	mov	r4, r0
 8016532:	d130      	bne.n	8016596 <Argus_SetCalibrationCrosstalkSequenceSampleTime+0x76>
 8016534:	460d      	mov	r5, r1
 8016536:	f500 7042 	add.w	r0, r0, #776	@ 0x308
 801653a:	a901      	add	r1, sp, #4
 801653c:	f00e f97e 	bl	802483c <Argus_Cal_GetCalibration>
 8016540:	2201      	movs	r2, #1
 8016542:	4611      	mov	r1, r2
 8016544:	4620      	mov	r0, r4
 8016546:	f8ad 52b4 	strh.w	r5, [sp, #692]	@ 0x2b4
 801654a:	f7fe fb67 	bl	8014c1c <CheckStateAndRecoverError>
 801654e:	4605      	mov	r5, r0
 8016550:	b960      	cbnz	r0, 801656c <Argus_SetCalibrationCrosstalkSequenceSampleTime+0x4c>
 8016552:	f504 70ee 	add.w	r0, r4, #476	@ 0x1dc
 8016556:	f00c fea7 	bl	80232a8 <Argus_Cfg_GetConfigurationPtr>
 801655a:	4606      	mov	r6, r0
 801655c:	b1c0      	cbz	r0, 8016590 <Argus_SetCalibrationCrosstalkSequenceSampleTime+0x70>
 801655e:	1d27      	adds	r7, r4, #4
 8016560:	21c0      	movs	r1, #192	@ 0xc0
 8016562:	4638      	mov	r0, r7
 8016564:	f00a fc20 	bl	8020da8 <Argus_Dev_SetStatusSync>
 8016568:	4605      	mov	r5, r0
 801656a:	b118      	cbz	r0, 8016574 <Argus_SetCalibrationCrosstalkSequenceSampleTime+0x54>
 801656c:	4628      	mov	r0, r5
 801656e:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 8016572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016574:	4631      	mov	r1, r6
 8016576:	aa01      	add	r2, sp, #4
 8016578:	4620      	mov	r0, r4
 801657a:	f000 f9f5 	bl	8016968 <Argus_Core_SetSettingsSync>
 801657e:	21c0      	movs	r1, #192	@ 0xc0
 8016580:	4605      	mov	r5, r0
 8016582:	4638      	mov	r0, r7
 8016584:	f00a fce2 	bl	8020f4c <Argus_Dev_ClearStatus>
 8016588:	4628      	mov	r0, r5
 801658a:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 801658e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016590:	f06f 0504 	mvn.w	r5, #4
 8016594:	e7ea      	b.n	801656c <Argus_SetCalibrationCrosstalkSequenceSampleTime+0x4c>
 8016596:	4807      	ldr	r0, [pc, #28]	@ (80165b4 <Argus_SetCalibrationCrosstalkSequenceSampleTime+0x94>)
 8016598:	f7ef ffb8 	bl	800650c <print>
 801659c:	f06f 0506 	mvn.w	r5, #6
 80165a0:	e7e4      	b.n	801656c <Argus_SetCalibrationCrosstalkSequenceSampleTime+0x4c>
 80165a2:	4805      	ldr	r0, [pc, #20]	@ (80165b8 <Argus_SetCalibrationCrosstalkSequenceSampleTime+0x98>)
 80165a4:	f7ef ffb2 	bl	800650c <print>
 80165a8:	f06f 0504 	mvn.w	r5, #4
 80165ac:	e7de      	b.n	801656c <Argus_SetCalibrationCrosstalkSequenceSampleTime+0x4c>
 80165ae:	bf00      	nop
 80165b0:	0afb8550 	.word	0x0afb8550
 80165b4:	0802e378 	.word	0x0802e378
 80165b8:	0802e350 	.word	0x0802e350

080165bc <Argus_GetCalibrationCrosstalkSequenceSampleTime>:
 80165bc:	b510      	push	{r4, lr}
 80165be:	b1c0      	cbz	r0, 80165f2 <Argus_GetCalibrationCrosstalkSequenceSampleTime+0x36>
 80165c0:	4b0f      	ldr	r3, [pc, #60]	@ (8016600 <Argus_GetCalibrationCrosstalkSequenceSampleTime+0x44>)
 80165c2:	6802      	ldr	r2, [r0, #0]
 80165c4:	429a      	cmp	r2, r3
 80165c6:	d10b      	bne.n	80165e0 <Argus_GetCalibrationCrosstalkSequenceSampleTime+0x24>
 80165c8:	460c      	mov	r4, r1
 80165ca:	b179      	cbz	r1, 80165ec <Argus_GetCalibrationCrosstalkSequenceSampleTime+0x30>
 80165cc:	f500 7042 	add.w	r0, r0, #776	@ 0x308
 80165d0:	f00e f93c 	bl	802484c <Argus_Cal_GetCalibrationPtr>
 80165d4:	4603      	mov	r3, r0
 80165d6:	2000      	movs	r0, #0
 80165d8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80165dc:	8023      	strh	r3, [r4, #0]
 80165de:	bd10      	pop	{r4, pc}
 80165e0:	4808      	ldr	r0, [pc, #32]	@ (8016604 <Argus_GetCalibrationCrosstalkSequenceSampleTime+0x48>)
 80165e2:	f7ef ff93 	bl	800650c <print>
 80165e6:	f06f 0006 	mvn.w	r0, #6
 80165ea:	bd10      	pop	{r4, pc}
 80165ec:	f06f 0004 	mvn.w	r0, #4
 80165f0:	bd10      	pop	{r4, pc}
 80165f2:	4805      	ldr	r0, [pc, #20]	@ (8016608 <Argus_GetCalibrationCrosstalkSequenceSampleTime+0x4c>)
 80165f4:	f7ef ff8a 	bl	800650c <print>
 80165f8:	f06f 0004 	mvn.w	r0, #4
 80165fc:	bd10      	pop	{r4, pc}
 80165fe:	bf00      	nop
 8016600:	0afb8550 	.word	0x0afb8550
 8016604:	0802e378 	.word	0x0802e378
 8016608:	0802e350 	.word	0x0802e350

0801660c <Argus_SetCalibrationCrosstalkSequenceAmplitudeThreshold>:
 801660c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801660e:	f5ad 7d31 	sub.w	sp, sp, #708	@ 0x2c4
 8016612:	2800      	cmp	r0, #0
 8016614:	d03b      	beq.n	801668e <Argus_SetCalibrationCrosstalkSequenceAmplitudeThreshold+0x82>
 8016616:	4b21      	ldr	r3, [pc, #132]	@ (801669c <Argus_SetCalibrationCrosstalkSequenceAmplitudeThreshold+0x90>)
 8016618:	6802      	ldr	r2, [r0, #0]
 801661a:	429a      	cmp	r2, r3
 801661c:	4604      	mov	r4, r0
 801661e:	d130      	bne.n	8016682 <Argus_SetCalibrationCrosstalkSequenceAmplitudeThreshold+0x76>
 8016620:	460d      	mov	r5, r1
 8016622:	f500 7042 	add.w	r0, r0, #776	@ 0x308
 8016626:	a901      	add	r1, sp, #4
 8016628:	f00e f908 	bl	802483c <Argus_Cal_GetCalibration>
 801662c:	2201      	movs	r2, #1
 801662e:	4611      	mov	r1, r2
 8016630:	4620      	mov	r0, r4
 8016632:	f8ad 52b6 	strh.w	r5, [sp, #694]	@ 0x2b6
 8016636:	f7fe faf1 	bl	8014c1c <CheckStateAndRecoverError>
 801663a:	4605      	mov	r5, r0
 801663c:	b960      	cbnz	r0, 8016658 <Argus_SetCalibrationCrosstalkSequenceAmplitudeThreshold+0x4c>
 801663e:	f504 70ee 	add.w	r0, r4, #476	@ 0x1dc
 8016642:	f00c fe31 	bl	80232a8 <Argus_Cfg_GetConfigurationPtr>
 8016646:	4606      	mov	r6, r0
 8016648:	b1c0      	cbz	r0, 801667c <Argus_SetCalibrationCrosstalkSequenceAmplitudeThreshold+0x70>
 801664a:	1d27      	adds	r7, r4, #4
 801664c:	21c0      	movs	r1, #192	@ 0xc0
 801664e:	4638      	mov	r0, r7
 8016650:	f00a fbaa 	bl	8020da8 <Argus_Dev_SetStatusSync>
 8016654:	4605      	mov	r5, r0
 8016656:	b118      	cbz	r0, 8016660 <Argus_SetCalibrationCrosstalkSequenceAmplitudeThreshold+0x54>
 8016658:	4628      	mov	r0, r5
 801665a:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 801665e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016660:	4631      	mov	r1, r6
 8016662:	aa01      	add	r2, sp, #4
 8016664:	4620      	mov	r0, r4
 8016666:	f000 f97f 	bl	8016968 <Argus_Core_SetSettingsSync>
 801666a:	21c0      	movs	r1, #192	@ 0xc0
 801666c:	4605      	mov	r5, r0
 801666e:	4638      	mov	r0, r7
 8016670:	f00a fc6c 	bl	8020f4c <Argus_Dev_ClearStatus>
 8016674:	4628      	mov	r0, r5
 8016676:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 801667a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801667c:	f06f 0504 	mvn.w	r5, #4
 8016680:	e7ea      	b.n	8016658 <Argus_SetCalibrationCrosstalkSequenceAmplitudeThreshold+0x4c>
 8016682:	4807      	ldr	r0, [pc, #28]	@ (80166a0 <Argus_SetCalibrationCrosstalkSequenceAmplitudeThreshold+0x94>)
 8016684:	f7ef ff42 	bl	800650c <print>
 8016688:	f06f 0506 	mvn.w	r5, #6
 801668c:	e7e4      	b.n	8016658 <Argus_SetCalibrationCrosstalkSequenceAmplitudeThreshold+0x4c>
 801668e:	4805      	ldr	r0, [pc, #20]	@ (80166a4 <Argus_SetCalibrationCrosstalkSequenceAmplitudeThreshold+0x98>)
 8016690:	f7ef ff3c 	bl	800650c <print>
 8016694:	f06f 0504 	mvn.w	r5, #4
 8016698:	e7de      	b.n	8016658 <Argus_SetCalibrationCrosstalkSequenceAmplitudeThreshold+0x4c>
 801669a:	bf00      	nop
 801669c:	0afb8550 	.word	0x0afb8550
 80166a0:	0802e378 	.word	0x0802e378
 80166a4:	0802e350 	.word	0x0802e350

080166a8 <Argus_GetCalibrationCrosstalkSequenceAmplitudeThreshold>:
 80166a8:	b510      	push	{r4, lr}
 80166aa:	b1c0      	cbz	r0, 80166de <Argus_GetCalibrationCrosstalkSequenceAmplitudeThreshold+0x36>
 80166ac:	4b0f      	ldr	r3, [pc, #60]	@ (80166ec <Argus_GetCalibrationCrosstalkSequenceAmplitudeThreshold+0x44>)
 80166ae:	6802      	ldr	r2, [r0, #0]
 80166b0:	429a      	cmp	r2, r3
 80166b2:	d10b      	bne.n	80166cc <Argus_GetCalibrationCrosstalkSequenceAmplitudeThreshold+0x24>
 80166b4:	460c      	mov	r4, r1
 80166b6:	b179      	cbz	r1, 80166d8 <Argus_GetCalibrationCrosstalkSequenceAmplitudeThreshold+0x30>
 80166b8:	f500 7042 	add.w	r0, r0, #776	@ 0x308
 80166bc:	f00e f8c6 	bl	802484c <Argus_Cal_GetCalibrationPtr>
 80166c0:	4603      	mov	r3, r0
 80166c2:	2000      	movs	r0, #0
 80166c4:	f8b3 32b2 	ldrh.w	r3, [r3, #690]	@ 0x2b2
 80166c8:	8023      	strh	r3, [r4, #0]
 80166ca:	bd10      	pop	{r4, pc}
 80166cc:	4808      	ldr	r0, [pc, #32]	@ (80166f0 <Argus_GetCalibrationCrosstalkSequenceAmplitudeThreshold+0x48>)
 80166ce:	f7ef ff1d 	bl	800650c <print>
 80166d2:	f06f 0006 	mvn.w	r0, #6
 80166d6:	bd10      	pop	{r4, pc}
 80166d8:	f06f 0004 	mvn.w	r0, #4
 80166dc:	bd10      	pop	{r4, pc}
 80166de:	4805      	ldr	r0, [pc, #20]	@ (80166f4 <Argus_GetCalibrationCrosstalkSequenceAmplitudeThreshold+0x4c>)
 80166e0:	f7ef ff14 	bl	800650c <print>
 80166e4:	f06f 0004 	mvn.w	r0, #4
 80166e8:	bd10      	pop	{r4, pc}
 80166ea:	bf00      	nop
 80166ec:	0afb8550 	.word	0x0afb8550
 80166f0:	0802e378 	.word	0x0802e378
 80166f4:	0802e350 	.word	0x0802e350

080166f8 <Argus_SetCalibrationCrosstalkPixel2Pixel>:
 80166f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166fa:	f5ad 7d31 	sub.w	sp, sp, #708	@ 0x2c4
 80166fe:	2800      	cmp	r0, #0
 8016700:	d044      	beq.n	801678c <Argus_SetCalibrationCrosstalkPixel2Pixel+0x94>
 8016702:	4b25      	ldr	r3, [pc, #148]	@ (8016798 <Argus_SetCalibrationCrosstalkPixel2Pixel+0xa0>)
 8016704:	6802      	ldr	r2, [r0, #0]
 8016706:	429a      	cmp	r2, r3
 8016708:	4605      	mov	r5, r0
 801670a:	d139      	bne.n	8016780 <Argus_SetCalibrationCrosstalkPixel2Pixel+0x88>
 801670c:	460c      	mov	r4, r1
 801670e:	f500 7042 	add.w	r0, r0, #776	@ 0x308
 8016712:	a901      	add	r1, sp, #4
 8016714:	f00e f892 	bl	802483c <Argus_Cal_GetCalibration>
 8016718:	6820      	ldr	r0, [r4, #0]
 801671a:	6861      	ldr	r1, [r4, #4]
 801671c:	68a2      	ldr	r2, [r4, #8]
 801671e:	68e3      	ldr	r3, [r4, #12]
 8016720:	f50d 7c14 	add.w	ip, sp, #592	@ 0x250
 8016724:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016728:	8a23      	ldrh	r3, [r4, #16]
 801672a:	f8ac 3000 	strh.w	r3, [ip]
 801672e:	2201      	movs	r2, #1
 8016730:	4611      	mov	r1, r2
 8016732:	4628      	mov	r0, r5
 8016734:	f7fe fa72 	bl	8014c1c <CheckStateAndRecoverError>
 8016738:	4604      	mov	r4, r0
 801673a:	b960      	cbnz	r0, 8016756 <Argus_SetCalibrationCrosstalkPixel2Pixel+0x5e>
 801673c:	f505 70ee 	add.w	r0, r5, #476	@ 0x1dc
 8016740:	f00c fdb2 	bl	80232a8 <Argus_Cfg_GetConfigurationPtr>
 8016744:	4606      	mov	r6, r0
 8016746:	b1c0      	cbz	r0, 801677a <Argus_SetCalibrationCrosstalkPixel2Pixel+0x82>
 8016748:	1d2f      	adds	r7, r5, #4
 801674a:	21c0      	movs	r1, #192	@ 0xc0
 801674c:	4638      	mov	r0, r7
 801674e:	f00a fb2b 	bl	8020da8 <Argus_Dev_SetStatusSync>
 8016752:	4604      	mov	r4, r0
 8016754:	b118      	cbz	r0, 801675e <Argus_SetCalibrationCrosstalkPixel2Pixel+0x66>
 8016756:	4620      	mov	r0, r4
 8016758:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 801675c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801675e:	4631      	mov	r1, r6
 8016760:	aa01      	add	r2, sp, #4
 8016762:	4628      	mov	r0, r5
 8016764:	f000 f900 	bl	8016968 <Argus_Core_SetSettingsSync>
 8016768:	21c0      	movs	r1, #192	@ 0xc0
 801676a:	4604      	mov	r4, r0
 801676c:	4638      	mov	r0, r7
 801676e:	f00a fbed 	bl	8020f4c <Argus_Dev_ClearStatus>
 8016772:	4620      	mov	r0, r4
 8016774:	f50d 7d31 	add.w	sp, sp, #708	@ 0x2c4
 8016778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801677a:	f06f 0404 	mvn.w	r4, #4
 801677e:	e7ea      	b.n	8016756 <Argus_SetCalibrationCrosstalkPixel2Pixel+0x5e>
 8016780:	4806      	ldr	r0, [pc, #24]	@ (801679c <Argus_SetCalibrationCrosstalkPixel2Pixel+0xa4>)
 8016782:	f7ef fec3 	bl	800650c <print>
 8016786:	f06f 0406 	mvn.w	r4, #6
 801678a:	e7e4      	b.n	8016756 <Argus_SetCalibrationCrosstalkPixel2Pixel+0x5e>
 801678c:	4804      	ldr	r0, [pc, #16]	@ (80167a0 <Argus_SetCalibrationCrosstalkPixel2Pixel+0xa8>)
 801678e:	f7ef febd 	bl	800650c <print>
 8016792:	f06f 0404 	mvn.w	r4, #4
 8016796:	e7de      	b.n	8016756 <Argus_SetCalibrationCrosstalkPixel2Pixel+0x5e>
 8016798:	0afb8550 	.word	0x0afb8550
 801679c:	0802e378 	.word	0x0802e378
 80167a0:	0802e350 	.word	0x0802e350

080167a4 <Argus_GetCalibrationCrosstalkPixel2Pixel>:
 80167a4:	b510      	push	{r4, lr}
 80167a6:	b320      	cbz	r0, 80167f2 <Argus_GetCalibrationCrosstalkPixel2Pixel+0x4e>
 80167a8:	4b15      	ldr	r3, [pc, #84]	@ (8016800 <Argus_GetCalibrationCrosstalkPixel2Pixel+0x5c>)
 80167aa:	6802      	ldr	r2, [r0, #0]
 80167ac:	429a      	cmp	r2, r3
 80167ae:	d117      	bne.n	80167e0 <Argus_GetCalibrationCrosstalkPixel2Pixel+0x3c>
 80167b0:	460c      	mov	r4, r1
 80167b2:	b1d9      	cbz	r1, 80167ec <Argus_GetCalibrationCrosstalkPixel2Pixel+0x48>
 80167b4:	f500 7042 	add.w	r0, r0, #776	@ 0x308
 80167b8:	f00e f848 	bl	802484c <Argus_Cal_GetCalibrationPtr>
 80167bc:	f8d0 3254 	ldr.w	r3, [r0, #596]	@ 0x254
 80167c0:	f8d0 124c 	ldr.w	r1, [r0, #588]	@ 0x24c
 80167c4:	f8d0 2250 	ldr.w	r2, [r0, #592]	@ 0x250
 80167c8:	f8d0 c258 	ldr.w	ip, [r0, #600]	@ 0x258
 80167cc:	f8c4 c00c 	str.w	ip, [r4, #12]
 80167d0:	6021      	str	r1, [r4, #0]
 80167d2:	6062      	str	r2, [r4, #4]
 80167d4:	60a3      	str	r3, [r4, #8]
 80167d6:	f8b0 325c 	ldrh.w	r3, [r0, #604]	@ 0x25c
 80167da:	8223      	strh	r3, [r4, #16]
 80167dc:	2000      	movs	r0, #0
 80167de:	bd10      	pop	{r4, pc}
 80167e0:	4808      	ldr	r0, [pc, #32]	@ (8016804 <Argus_GetCalibrationCrosstalkPixel2Pixel+0x60>)
 80167e2:	f7ef fe93 	bl	800650c <print>
 80167e6:	f06f 0006 	mvn.w	r0, #6
 80167ea:	bd10      	pop	{r4, pc}
 80167ec:	f06f 0004 	mvn.w	r0, #4
 80167f0:	bd10      	pop	{r4, pc}
 80167f2:	4805      	ldr	r0, [pc, #20]	@ (8016808 <Argus_GetCalibrationCrosstalkPixel2Pixel+0x64>)
 80167f4:	f7ef fe8a 	bl	800650c <print>
 80167f8:	f06f 0004 	mvn.w	r0, #4
 80167fc:	bd10      	pop	{r4, pc}
 80167fe:	bf00      	nop
 8016800:	0afb8550 	.word	0x0afb8550
 8016804:	0802e378 	.word	0x0802e378
 8016808:	0802e350 	.word	0x0802e350

0801680c <ClearStatusCallback>:
 801680c:	1d08      	adds	r0, r1, #4
 801680e:	21c0      	movs	r1, #192	@ 0xc0
 8016810:	f00a bb9c 	b.w	8020f4c <Argus_Dev_ClearStatus>

08016814 <SetSettings>:
 8016814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016818:	4606      	mov	r6, r0
 801681a:	f5ad 7d33 	sub.w	sp, sp, #716	@ 0x2cc
 801681e:	460f      	mov	r7, r1
 8016820:	a803      	add	r0, sp, #12
 8016822:	4611      	mov	r1, r2
 8016824:	f506 7842 	add.w	r8, r6, #776	@ 0x308
 8016828:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 801682c:	461d      	mov	r5, r3
 801682e:	f014 fc54 	bl	802b0da <memcpy>
 8016832:	a903      	add	r1, sp, #12
 8016834:	4640      	mov	r0, r8
 8016836:	f00e f80d 	bl	8024854 <Argus_Cal_ComposeCalibrationData>
 801683a:	4604      	mov	r4, r0
 801683c:	b120      	cbz	r0, 8016848 <SetSettings+0x34>
 801683e:	4620      	mov	r0, r4
 8016840:	f50d 7d33 	add.w	sp, sp, #716	@ 0x2cc
 8016844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016848:	4638      	mov	r0, r7
 801684a:	f00c fd2f 	bl	80232ac <Argus_Cfg_CheckConfiguration>
 801684e:	4604      	mov	r4, r0
 8016850:	2800      	cmp	r0, #0
 8016852:	d1f4      	bne.n	801683e <SetSettings+0x2a>
 8016854:	a803      	add	r0, sp, #12
 8016856:	f00e f915 	bl	8024a84 <Argus_Cal_CheckCalibration>
 801685a:	4604      	mov	r4, r0
 801685c:	2800      	cmp	r0, #0
 801685e:	d1ee      	bne.n	801683e <SetSettings+0x2a>
 8016860:	2d00      	cmp	r5, #0
 8016862:	d143      	bne.n	80168ec <SetSettings+0xd8>
 8016864:	1d35      	adds	r5, r6, #4
 8016866:	21c0      	movs	r1, #192	@ 0xc0
 8016868:	4628      	mov	r0, r5
 801686a:	f00a fa9d 	bl	8020da8 <Argus_Dev_SetStatusSync>
 801686e:	4604      	mov	r4, r0
 8016870:	2800      	cmp	r0, #0
 8016872:	d1e4      	bne.n	801683e <SetSettings+0x2a>
 8016874:	4639      	mov	r1, r7
 8016876:	f506 70ee 	add.w	r0, r6, #476	@ 0x1dc
 801687a:	f00c fd4d 	bl	8023318 <Argus_Cfg_CopyConfiguration>
 801687e:	a903      	add	r1, sp, #12
 8016880:	4681      	mov	r9, r0
 8016882:	4640      	mov	r0, r8
 8016884:	f00e f9be 	bl	8024c04 <Argus_Cal_CopyCalibration>
 8016888:	4649      	mov	r1, r9
 801688a:	4602      	mov	r2, r0
 801688c:	4640      	mov	r0, r8
 801688e:	9201      	str	r2, [sp, #4]
 8016890:	f00e fce8 	bl	8025264 <Argus_Cal_Update>
 8016894:	1e07      	subs	r7, r0, #0
 8016896:	db5e      	blt.n	8016956 <SetSettings+0x142>
 8016898:	9a01      	ldr	r2, [sp, #4]
 801689a:	4649      	mov	r1, r9
 801689c:	4628      	mov	r0, r5
 801689e:	f00a fdf9 	bl	8021494 <Argus_Dev_Update>
 80168a2:	1e07      	subs	r7, r0, #0
 80168a4:	9a01      	ldr	r2, [sp, #4]
 80168a6:	db56      	blt.n	8016956 <SetSettings+0x142>
 80168a8:	4649      	mov	r1, r9
 80168aa:	f606 307c 	addw	r0, r6, #2940	@ 0xb7c
 80168ae:	9201      	str	r2, [sp, #4]
 80168b0:	f003 fa7e 	bl	8019db0 <Argus_Eval_Update>
 80168b4:	4628      	mov	r0, r5
 80168b6:	f00b fa3f 	bl	8021d38 <Argus_Dev_GetModule>
 80168ba:	4607      	mov	r7, r0
 80168bc:	4628      	mov	r0, r5
 80168be:	f00b fa3d 	bl	8021d3c <Argus_Dev_GetChipID>
 80168c2:	9a01      	ldr	r2, [sp, #4]
 80168c4:	4601      	mov	r1, r0
 80168c6:	4638      	mov	r0, r7
 80168c8:	f012 f9e4 	bl	8028c94 <Argus_Cal_WriteCalibrationToNVM>
 80168cc:	1e07      	subs	r7, r0, #0
 80168ce:	db42      	blt.n	8016956 <SetSettings+0x142>
 80168d0:	4633      	mov	r3, r6
 80168d2:	4a24      	ldr	r2, [pc, #144]	@ (8016964 <SetSettings+0x150>)
 80168d4:	2101      	movs	r1, #1
 80168d6:	4628      	mov	r0, r5
 80168d8:	f00b fa36 	bl	8021d48 <Argus_Dev_Apply>
 80168dc:	1e06      	subs	r6, r0, #0
 80168de:	daae      	bge.n	801683e <SetSettings+0x2a>
 80168e0:	21c0      	movs	r1, #192	@ 0xc0
 80168e2:	4628      	mov	r0, r5
 80168e4:	f00a fb32 	bl	8020f4c <Argus_Dev_ClearStatus>
 80168e8:	4634      	mov	r4, r6
 80168ea:	e7a8      	b.n	801683e <SetSettings+0x2a>
 80168ec:	4639      	mov	r1, r7
 80168ee:	f506 70ee 	add.w	r0, r6, #476	@ 0x1dc
 80168f2:	f00c fd11 	bl	8023318 <Argus_Cfg_CopyConfiguration>
 80168f6:	a903      	add	r1, sp, #12
 80168f8:	4681      	mov	r9, r0
 80168fa:	4640      	mov	r0, r8
 80168fc:	f00e f982 	bl	8024c04 <Argus_Cal_CopyCalibration>
 8016900:	4649      	mov	r1, r9
 8016902:	4602      	mov	r2, r0
 8016904:	4607      	mov	r7, r0
 8016906:	4640      	mov	r0, r8
 8016908:	f00e fcac 	bl	8025264 <Argus_Cal_Update>
 801690c:	1e04      	subs	r4, r0, #0
 801690e:	db96      	blt.n	801683e <SetSettings+0x2a>
 8016910:	1d35      	adds	r5, r6, #4
 8016912:	463a      	mov	r2, r7
 8016914:	4649      	mov	r1, r9
 8016916:	4628      	mov	r0, r5
 8016918:	f00a fdbc 	bl	8021494 <Argus_Dev_Update>
 801691c:	1e04      	subs	r4, r0, #0
 801691e:	db8e      	blt.n	801683e <SetSettings+0x2a>
 8016920:	463a      	mov	r2, r7
 8016922:	4649      	mov	r1, r9
 8016924:	f606 307c 	addw	r0, r6, #2940	@ 0xb7c
 8016928:	f003 fa42 	bl	8019db0 <Argus_Eval_Update>
 801692c:	4628      	mov	r0, r5
 801692e:	f00b fa03 	bl	8021d38 <Argus_Dev_GetModule>
 8016932:	4604      	mov	r4, r0
 8016934:	4628      	mov	r0, r5
 8016936:	f00b fa01 	bl	8021d3c <Argus_Dev_GetChipID>
 801693a:	463a      	mov	r2, r7
 801693c:	4601      	mov	r1, r0
 801693e:	4620      	mov	r0, r4
 8016940:	f012 f9a8 	bl	8028c94 <Argus_Cal_WriteCalibrationToNVM>
 8016944:	1e07      	subs	r7, r0, #0
 8016946:	db06      	blt.n	8016956 <SetSettings+0x142>
 8016948:	2101      	movs	r1, #1
 801694a:	4628      	mov	r0, r5
 801694c:	f00b fafc 	bl	8021f48 <Argus_Dev_ApplySync>
 8016950:	ea00 74e0 	and.w	r4, r0, r0, asr #31
 8016954:	e773      	b.n	801683e <SetSettings+0x2a>
 8016956:	21c0      	movs	r1, #192	@ 0xc0
 8016958:	4628      	mov	r0, r5
 801695a:	f00a faf7 	bl	8020f4c <Argus_Dev_ClearStatus>
 801695e:	463c      	mov	r4, r7
 8016960:	e76d      	b.n	801683e <SetSettings+0x2a>
 8016962:	bf00      	nop
 8016964:	0801680d 	.word	0x0801680d

08016968 <Argus_Core_SetSettingsSync>:
 8016968:	2301      	movs	r3, #1
 801696a:	f7ff bf53 	b.w	8016814 <SetSettings>
 801696e:	bf00      	nop

08016970 <RunSequence>:
 8016970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016974:	1d07      	adds	r7, r0, #4
 8016976:	f5ad 7d7b 	sub.w	sp, sp, #1004	@ 0x3ec
 801697a:	4604      	mov	r4, r0
 801697c:	4688      	mov	r8, r1
 801697e:	4638      	mov	r0, r7
 8016980:	21c3      	movs	r1, #195	@ 0xc3
 8016982:	4616      	mov	r6, r2
 8016984:	4699      	mov	r9, r3
 8016986:	f00a fa0f 	bl	8020da8 <Argus_Dev_SetStatusSync>
 801698a:	bb18      	cbnz	r0, 80169d4 <RunSequence+0x64>
 801698c:	a901      	add	r1, sp, #4
 801698e:	f504 70ee 	add.w	r0, r4, #476	@ 0x1dc
 8016992:	f00c fc81 	bl	8023298 <Argus_Cfg_GetConfiguration>
 8016996:	a94b      	add	r1, sp, #300	@ 0x12c
 8016998:	f504 7042 	add.w	r0, r4, #776	@ 0x308
 801699c:	f00d ff4e 	bl	802483c <Argus_Cal_GetCalibration>
 80169a0:	464b      	mov	r3, r9
 80169a2:	aa4b      	add	r2, sp, #300	@ 0x12c
 80169a4:	a901      	add	r1, sp, #4
 80169a6:	4620      	mov	r0, r4
 80169a8:	47c0      	blx	r8
 80169aa:	1e05      	subs	r5, r0, #0
 80169ac:	db23      	blt.n	80169f6 <RunSequence+0x86>
 80169ae:	4620      	mov	r0, r4
 80169b0:	aa4b      	add	r2, sp, #300	@ 0x12c
 80169b2:	a901      	add	r1, sp, #4
 80169b4:	f7ff ffd8 	bl	8016968 <Argus_Core_SetSettingsSync>
 80169b8:	1e04      	subs	r4, r0, #0
 80169ba:	db16      	blt.n	80169ea <RunSequence+0x7a>
 80169bc:	21c3      	movs	r1, #195	@ 0xc3
 80169be:	4638      	mov	r0, r7
 80169c0:	f00a fac4 	bl	8020f4c <Argus_Dev_ClearStatus>
 80169c4:	2d00      	cmp	r5, #0
 80169c6:	bf08      	it	eq
 80169c8:	4625      	moveq	r5, r4
 80169ca:	4628      	mov	r0, r5
 80169cc:	f50d 7d7b 	add.w	sp, sp, #1004	@ 0x3ec
 80169d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80169d4:	4602      	mov	r2, r0
 80169d6:	4631      	mov	r1, r6
 80169d8:	4811      	ldr	r0, [pc, #68]	@ (8016a20 <RunSequence+0xb0>)
 80169da:	f7ef fd97 	bl	800650c <print>
 80169de:	2502      	movs	r5, #2
 80169e0:	4628      	mov	r0, r5
 80169e2:	f50d 7d7b 	add.w	sp, sp, #1004	@ 0x3ec
 80169e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80169ea:	4622      	mov	r2, r4
 80169ec:	4631      	mov	r1, r6
 80169ee:	480d      	ldr	r0, [pc, #52]	@ (8016a24 <RunSequence+0xb4>)
 80169f0:	f7ef fd8c 	bl	800650c <print>
 80169f4:	e7e2      	b.n	80169bc <RunSequence+0x4c>
 80169f6:	462a      	mov	r2, r5
 80169f8:	4631      	mov	r1, r6
 80169fa:	480b      	ldr	r0, [pc, #44]	@ (8016a28 <RunSequence+0xb8>)
 80169fc:	f7ef fd86 	bl	800650c <print>
 8016a00:	4620      	mov	r0, r4
 8016a02:	aa4b      	add	r2, sp, #300	@ 0x12c
 8016a04:	a901      	add	r1, sp, #4
 8016a06:	f7ff ffaf 	bl	8016968 <Argus_Core_SetSettingsSync>
 8016a0a:	1e04      	subs	r4, r0, #0
 8016a0c:	dbed      	blt.n	80169ea <RunSequence+0x7a>
 8016a0e:	21c3      	movs	r1, #195	@ 0xc3
 8016a10:	4638      	mov	r0, r7
 8016a12:	f00a fa9b 	bl	8020f4c <Argus_Dev_ClearStatus>
 8016a16:	4628      	mov	r0, r5
 8016a18:	f50d 7d7b 	add.w	sp, sp, #1004	@ 0x3ec
 8016a1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a20:	0802e820 	.word	0x0802e820
 8016a24:	0802e878 	.word	0x0802e878
 8016a28:	0802e854 	.word	0x0802e854

08016a2c <XtalkCal_Sequence>:
 8016a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a30:	ed2d 8b02 	vpush	{d8}
 8016a34:	f2ad 5d9c 	subw	sp, sp, #1436	@ 0x59c
 8016a38:	9008      	str	r0, [sp, #32]
 8016a3a:	920f      	str	r2, [sp, #60]	@ 0x3c
 8016a3c:	a8aa      	add	r0, sp, #680	@ 0x2a8
 8016a3e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8016a42:	910c      	str	r1, [sp, #48]	@ 0x30
 8016a44:	f014 fb49 	bl	802b0da <memcpy>
 8016a48:	2300      	movs	r3, #0
 8016a4a:	f88d 3354 	strb.w	r3, [sp, #852]	@ 0x354
 8016a4e:	23ff      	movs	r3, #255	@ 0xff
 8016a50:	f88d 339c 	strb.w	r3, [sp, #924]	@ 0x39c
 8016a54:	f89d 33b0 	ldrb.w	r3, [sp, #944]	@ 0x3b0
 8016a58:	f88d 33ae 	strb.w	r3, [sp, #942]	@ 0x3ae
 8016a5c:	f89d 3380 	ldrb.w	r3, [sp, #896]	@ 0x380
 8016a60:	2b01      	cmp	r3, #1
 8016a62:	bf1c      	itt	ne
 8016a64:	f8bd 33ac 	ldrhne.w	r3, [sp, #940]	@ 0x3ac
 8016a68:	f8ad 33a8 	strhne.w	r3, [sp, #936]	@ 0x3a8
 8016a6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016a70:	2100      	movs	r1, #0
 8016a72:	a82a      	add	r0, sp, #168	@ 0xa8
 8016a74:	f014 fa99 	bl	802afaa <memset>
 8016a78:	9b08      	ldr	r3, [sp, #32]
 8016a7a:	3304      	adds	r3, #4
 8016a7c:	4618      	mov	r0, r3
 8016a7e:	ee08 3a90 	vmov	s17, r3
 8016a82:	f00b f95f 	bl	8021d44 <Argus_Dev_GetLaserType>
 8016a86:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8016a88:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016a8a:	4603      	mov	r3, r0
 8016a8c:	4622      	mov	r2, r4
 8016a8e:	4631      	mov	r1, r6
 8016a90:	a82a      	add	r0, sp, #168	@ 0xa8
 8016a92:	f010 f9d9 	bl	8026e48 <Argus_Cal_GetInternalXtalkVectorTable>
 8016a96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016a9a:	2100      	movs	r1, #0
 8016a9c:	a86a      	add	r0, sp, #424	@ 0x1a8
 8016a9e:	f014 fa84 	bl	802afaa <memset>
 8016aa2:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 8016aa6:	49c3      	ldr	r1, [pc, #780]	@ (8016db4 <XtalkCal_Sequence+0x388>)
 8016aa8:	f896 40ac 	ldrb.w	r4, [r6, #172]	@ 0xac
 8016aac:	9410      	str	r4, [sp, #64]	@ 0x40
 8016aae:	4625      	mov	r5, r4
 8016ab0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016ab4:	fba3 1401 	umull	r1, r4, r3, r1
 8016ab8:	fb03 f202 	mul.w	r2, r3, r2
 8016abc:	0c08      	lsrs	r0, r1, #16
 8016abe:	f3c1 33c0 	ubfx	r3, r1, #15, #1
 8016ac2:	6871      	ldr	r1, [r6, #4]
 8016ac4:	fbb2 f2f1 	udiv	r2, r2, r1
 8016ac8:	1e69      	subs	r1, r5, #1
 8016aca:	b2c9      	uxtb	r1, r1
 8016acc:	2a01      	cmp	r2, #1
 8016ace:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8016ad2:	910d      	str	r1, [sp, #52]	@ 0x34
 8016ad4:	4611      	mov	r1, r2
 8016ad6:	bf38      	it	cc
 8016ad8:	2101      	movcc	r1, #1
 8016ada:	4403      	add	r3, r0
 8016adc:	4608      	mov	r0, r1
 8016ade:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8016ae2:	4288      	cmp	r0, r1
 8016ae4:	bf28      	it	cs
 8016ae6:	4608      	movcs	r0, r1
 8016ae8:	9007      	str	r0, [sp, #28]
 8016aea:	2d00      	cmp	r5, #0
 8016aec:	f040 83ae 	bne.w	801724c <XtalkCal_Sequence+0x820>
 8016af0:	0402      	lsls	r2, r0, #16
 8016af2:	4251      	negs	r1, r2
 8016af4:	9204      	str	r2, [sp, #16]
 8016af6:	9105      	str	r1, [sp, #20]
 8016af8:	9200      	str	r2, [sp, #0]
 8016afa:	4aaf      	ldr	r2, [pc, #700]	@ (8016db8 <XtalkCal_Sequence+0x38c>)
 8016afc:	fba2 1203 	umull	r1, r2, r2, r3
 8016b00:	0992      	lsrs	r2, r2, #6
 8016b02:	4611      	mov	r1, r2
 8016b04:	9214      	str	r2, [sp, #80]	@ 0x50
 8016b06:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016b0a:	fb02 3311 	mls	r3, r2, r1, r3
 8016b0e:	fb02 f303 	mul.w	r3, r2, r3
 8016b12:	9315      	str	r3, [sp, #84]	@ 0x54
 8016b14:	9b00      	ldr	r3, [sp, #0]
 8016b16:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8016b1a:	43d2      	mvns	r2, r2
 8016b1c:	9203      	str	r2, [sp, #12]
 8016b1e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8016b22:	ea32 0223 	bics.w	r2, r2, r3, asr #32
 8016b26:	bf28      	it	cs
 8016b28:	460a      	movcs	r2, r1
 8016b2a:	2300      	movs	r3, #0
 8016b2c:	930e      	str	r3, [sp, #56]	@ 0x38
 8016b2e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016b30:	9202      	str	r2, [sp, #8]
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	f040 8476 	bne.w	8017424 <XtalkCal_Sequence+0x9f8>
 8016b38:	9e08      	ldr	r6, [sp, #32]
 8016b3a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016b3c:	a9aa      	add	r1, sp, #680	@ 0x2a8
 8016b3e:	4630      	mov	r0, r6
 8016b40:	f7ff ff12 	bl	8016968 <Argus_Core_SetSettingsSync>
 8016b44:	2800      	cmp	r0, #0
 8016b46:	f2c0 81ad 	blt.w	8016ea4 <XtalkCal_Sequence+0x478>
 8016b4a:	f44f 72e4 	mov.w	r2, #456	@ 0x1c8
 8016b4e:	2100      	movs	r1, #0
 8016b50:	a8f4      	add	r0, sp, #976	@ 0x3d0
 8016b52:	f014 fa2a 	bl	802afaa <memset>
 8016b56:	ee18 0a90 	vmov	r0, s17
 8016b5a:	a9f7      	add	r1, sp, #988	@ 0x3dc
 8016b5c:	f00b f804 	bl	8021b68 <Argus_Dev_GetFrameConfig>
 8016b60:	2240      	movs	r2, #64	@ 0x40
 8016b62:	2100      	movs	r1, #0
 8016b64:	a81a      	add	r0, sp, #104	@ 0x68
 8016b66:	f014 fa20 	bl	802afaa <memset>
 8016b6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016b6e:	2100      	movs	r1, #0
 8016b70:	a86a      	add	r0, sp, #424	@ 0x1a8
 8016b72:	f014 fa1a 	bl	802afaa <memset>
 8016b76:	a917      	add	r1, sp, #92	@ 0x5c
 8016b78:	a816      	add	r0, sp, #88	@ 0x58
 8016b7a:	f7f0 fb0d 	bl	8007198 <Timer_GetCounterValue>
 8016b7e:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8016b80:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016b82:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8016b84:	9412      	str	r4, [sp, #72]	@ 0x48
 8016b86:	191a      	adds	r2, r3, r4
 8016b88:	4b8c      	ldr	r3, [pc, #560]	@ (8016dbc <XtalkCal_Sequence+0x390>)
 8016b8a:	950a      	str	r5, [sp, #40]	@ 0x28
 8016b8c:	429a      	cmp	r2, r3
 8016b8e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8016b90:	eb03 0105 	add.w	r1, r3, r5
 8016b94:	f5a2 2374 	sub.w	r3, r2, #999424	@ 0xf4000
 8016b98:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8016b9c:	bf88      	it	hi
 8016b9e:	461a      	movhi	r2, r3
 8016ba0:	f101 0301 	add.w	r3, r1, #1
 8016ba4:	bf98      	it	ls
 8016ba6:	460b      	movls	r3, r1
 8016ba8:	4294      	cmp	r4, r2
 8016baa:	9213      	str	r2, [sp, #76]	@ 0x4c
 8016bac:	bf8c      	ite	hi
 8016bae:	2200      	movhi	r2, #0
 8016bb0:	2201      	movls	r2, #1
 8016bb2:	42ab      	cmp	r3, r5
 8016bb4:	9311      	str	r3, [sp, #68]	@ 0x44
 8016bb6:	bf8c      	ite	hi
 8016bb8:	2301      	movhi	r3, #1
 8016bba:	2300      	movls	r3, #0
 8016bbc:	bf08      	it	eq
 8016bbe:	4613      	moveq	r3, r2
 8016bc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8016bc2:	f206 73cc 	addw	r3, r6, #1996	@ 0x7cc
 8016bc6:	ee08 3a10 	vmov	s16, r3
 8016bca:	2300      	movs	r3, #0
 8016bcc:	9306      	str	r3, [sp, #24]
 8016bce:	ee18 0a10 	vmov	r0, s16
 8016bd2:	a9f4      	add	r1, sp, #976	@ 0x3d0
 8016bd4:	f001 ff94 	bl	8018b00 <Argus_Measurement_TriggerSync>
 8016bd8:	2800      	cmp	r0, #0
 8016bda:	f2c0 8163 	blt.w	8016ea4 <XtalkCal_Sequence+0x478>
 8016bde:	f8bd 33ec 	ldrh.w	r3, [sp, #1004]	@ 0x3ec
 8016be2:	f8bd 73ee 	ldrh.w	r7, [sp, #1006]	@ 0x3ee
 8016be6:	9a08      	ldr	r2, [sp, #32]
 8016be8:	fb03 f707 	mul.w	r7, r3, r7
 8016bec:	099b      	lsrs	r3, r3, #6
 8016bee:	2b01      	cmp	r3, #1
 8016bf0:	bf38      	it	cc
 8016bf2:	2301      	movcc	r3, #1
 8016bf4:	2b20      	cmp	r3, #32
 8016bf6:	bf94      	ite	ls
 8016bf8:	18d2      	addls	r2, r2, r3
 8016bfa:	3220      	addhi	r2, #32
 8016bfc:	2400      	movs	r4, #0
 8016bfe:	f892 3307 	ldrb.w	r3, [r2, #775]	@ 0x307
 8016c02:	9301      	str	r3, [sp, #4]
 8016c04:	ab6a      	add	r3, sp, #424	@ 0x1a8
 8016c06:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016c08:	461d      	mov	r5, r3
 8016c0a:	4626      	mov	r6, r4
 8016c0c:	e9cd 6616 	strd	r6, r6, [sp, #88]	@ 0x58
 8016c10:	e9cd 6618 	strd	r6, r6, [sp, #96]	@ 0x60
 8016c14:	f04f 0a00 	mov.w	sl, #0
 8016c18:	fa5f f884 	uxtb.w	r8, r4
 8016c1c:	f10d 0b58 	add.w	fp, sp, #88	@ 0x58
 8016c20:	46d1      	mov	r9, sl
 8016c22:	fa5f f289 	uxtb.w	r2, r9
 8016c26:	4641      	mov	r1, r8
 8016c28:	a8f4      	add	r0, sp, #976	@ 0x3d0
 8016c2a:	f004 fc13 	bl	801b454 <Argus_Eval_GetPixelSample>
 8016c2e:	f109 0901 	add.w	r9, r9, #1
 8016c32:	f410 0f40 	tst.w	r0, #12582912	@ 0xc00000
 8016c36:	bf18      	it	ne
 8016c38:	f04f 0a01 	movne.w	sl, #1
 8016c3c:	f1b9 0f04 	cmp.w	r9, #4
 8016c40:	f84b 0b04 	str.w	r0, [fp], #4
 8016c44:	d1ed      	bne.n	8016c22 <XtalkCal_Sequence+0x1f6>
 8016c46:	f1ba 0f00 	cmp.w	sl, #0
 8016c4a:	f040 8098 	bne.w	8016d7e <XtalkCal_Sequence+0x352>
 8016c4e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016c50:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016c52:	eba3 0c02 	sub.w	ip, r3, r2
 8016c56:	9b01      	ldr	r3, [sp, #4]
 8016c58:	fb03 fc0c 	mul.w	ip, r3, ip
 8016c5c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8016c60:	2f00      	cmp	r7, #0
 8016c62:	f000 8125 	beq.w	8016eb0 <XtalkCal_Sequence+0x484>
 8016c66:	ea8c 70ec 	eor.w	r0, ip, ip, asr #31
 8016c6a:	eba0 70ec 	sub.w	r0, r0, ip, asr #31
 8016c6e:	42b8      	cmp	r0, r7
 8016c70:	f240 8204 	bls.w	801707c <XtalkCal_Sequence+0x650>
 8016c74:	4639      	mov	r1, r7
 8016c76:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8016c7a:	468e      	mov	lr, r1
 8016c7c:	0049      	lsls	r1, r1, #1
 8016c7e:	4281      	cmp	r1, r0
 8016c80:	4613      	mov	r3, r2
 8016c82:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8016c86:	d3f8      	bcc.n	8016c7a <XtalkCal_Sequence+0x24e>
 8016c88:	2a00      	cmp	r2, #0
 8016c8a:	f040 81a4 	bne.w	8016fd6 <XtalkCal_Sequence+0x5aa>
 8016c8e:	ea9c 0f07 	teq	ip, r7
 8016c92:	f100 829b 	bmi.w	80171cc <XtalkCal_Sequence+0x7a0>
 8016c96:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016c9a:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8016c9e:	4699      	mov	r9, r3
 8016ca0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8016ca2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016ca4:	eba2 0c01 	sub.w	ip, r2, r1
 8016ca8:	9a01      	ldr	r2, [sp, #4]
 8016caa:	fb02 fc0c 	mul.w	ip, r2, ip
 8016cae:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8016cb2:	ea8c 70ec 	eor.w	r0, ip, ip, asr #31
 8016cb6:	eba0 70ec 	sub.w	r0, r0, ip, asr #31
 8016cba:	42b8      	cmp	r0, r7
 8016cbc:	f240 81e5 	bls.w	801708a <XtalkCal_Sequence+0x65e>
 8016cc0:	4639      	mov	r1, r7
 8016cc2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8016cc6:	468b      	mov	fp, r1
 8016cc8:	0049      	lsls	r1, r1, #1
 8016cca:	4281      	cmp	r1, r0
 8016ccc:	4692      	mov	sl, r2
 8016cce:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8016cd2:	d3f8      	bcc.n	8016cc6 <XtalkCal_Sequence+0x29a>
 8016cd4:	2a00      	cmp	r2, #0
 8016cd6:	f040 8157 	bne.w	8016f88 <XtalkCal_Sequence+0x55c>
 8016cda:	ea97 0f0c 	teq	r7, ip
 8016cde:	f100 827c 	bmi.w	80171da <XtalkCal_Sequence+0x7ae>
 8016ce2:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 8016ce6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8016cea:	4650      	mov	r0, sl
 8016cec:	f1b9 0f00 	cmp.w	r9, #0
 8016cf0:	da00      	bge.n	8016cf4 <XtalkCal_Sequence+0x2c8>
 8016cf2:	425b      	negs	r3, r3
 8016cf4:	9a00      	ldr	r2, [sp, #0]
 8016cf6:	2a00      	cmp	r2, #0
 8016cf8:	f2c0 8122 	blt.w	8016f40 <XtalkCal_Sequence+0x514>
 8016cfc:	9a04      	ldr	r2, [sp, #16]
 8016cfe:	4293      	cmp	r3, r2
 8016d00:	f240 81db 	bls.w	80170ba <XtalkCal_Sequence+0x68e>
 8016d04:	9902      	ldr	r1, [sp, #8]
 8016d06:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8016d0a:	0049      	lsls	r1, r1, #1
 8016d0c:	4299      	cmp	r1, r3
 8016d0e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8016d12:	d3fa      	bcc.n	8016d0a <XtalkCal_Sequence+0x2de>
 8016d14:	2a00      	cmp	r2, #0
 8016d16:	f040 811a 	bne.w	8016f4e <XtalkCal_Sequence+0x522>
 8016d1a:	f1be 0f00 	cmp.w	lr, #0
 8016d1e:	bfac      	ite	ge
 8016d20:	f06f 4900 	mvnge.w	r9, #2147483648	@ 0x80000000
 8016d24:	f04f 4900 	movlt.w	r9, #2147483648	@ 0x80000000
 8016d28:	686b      	ldr	r3, [r5, #4]
 8016d2a:	2800      	cmp	r0, #0
 8016d2c:	444b      	add	r3, r9
 8016d2e:	606b      	str	r3, [r5, #4]
 8016d30:	da01      	bge.n	8016d36 <XtalkCal_Sequence+0x30a>
 8016d32:	f1ca 0a00 	rsb	sl, sl, #0
 8016d36:	9b00      	ldr	r3, [sp, #0]
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	f2c0 80d2 	blt.w	8016ee2 <XtalkCal_Sequence+0x4b6>
 8016d3e:	9b04      	ldr	r3, [sp, #16]
 8016d40:	459a      	cmp	sl, r3
 8016d42:	f240 81c4 	bls.w	80170ce <XtalkCal_Sequence+0x6a2>
 8016d46:	9a02      	ldr	r2, [sp, #8]
 8016d48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8016d4c:	0052      	lsls	r2, r2, #1
 8016d4e:	4552      	cmp	r2, sl
 8016d50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016d54:	d3fa      	bcc.n	8016d4c <XtalkCal_Sequence+0x320>
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	f040 80ca 	bne.w	8016ef0 <XtalkCal_Sequence+0x4c4>
 8016d5c:	f1bc 0f00 	cmp.w	ip, #0
 8016d60:	bfac      	ite	ge
 8016d62:	f06f 4100 	mvnge.w	r1, #2147483648	@ 0x80000000
 8016d66:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8016d6a:	ab1a      	add	r3, sp, #104	@ 0x68
 8016d6c:	aa1a      	add	r2, sp, #104	@ 0x68
 8016d6e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8016d72:	3301      	adds	r3, #1
 8016d74:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
 8016d78:	682b      	ldr	r3, [r5, #0]
 8016d7a:	4419      	add	r1, r3
 8016d7c:	6029      	str	r1, [r5, #0]
 8016d7e:	3401      	adds	r4, #1
 8016d80:	2c20      	cmp	r4, #32
 8016d82:	f105 0508 	add.w	r5, r5, #8
 8016d86:	f47f af41 	bne.w	8016c0c <XtalkCal_Sequence+0x1e0>
 8016d8a:	a917      	add	r1, sp, #92	@ 0x5c
 8016d8c:	a816      	add	r0, sp, #88	@ 0x58
 8016d8e:	f7f0 fa03 	bl	8007198 <Timer_GetCounterValue>
 8016d92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016d94:	e9dd 1316 	ldrd	r1, r3, [sp, #88]	@ 0x58
 8016d98:	2a00      	cmp	r2, #0
 8016d9a:	f000 81a1 	beq.w	80170e0 <XtalkCal_Sequence+0x6b4>
 8016d9e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016da0:	4291      	cmp	r1, r2
 8016da2:	f000 8221 	beq.w	80171e8 <XtalkCal_Sequence+0x7bc>
 8016da6:	bf8c      	ite	hi
 8016da8:	2201      	movhi	r2, #1
 8016daa:	2200      	movls	r2, #0
 8016dac:	2a00      	cmp	r2, #0
 8016dae:	f040 819e 	bne.w	80170ee <XtalkCal_Sequence+0x6c2>
 8016db2:	e005      	b.n	8016dc0 <XtalkCal_Sequence+0x394>
 8016db4:	0001199a 	.word	0x0001199a
 8016db8:	10624dd3 	.word	0x10624dd3
 8016dbc:	000f423f 	.word	0x000f423f
 8016dc0:	9e07      	ldr	r6, [sp, #28]
 8016dc2:	f8dd e000 	ldr.w	lr, [sp]
 8016dc6:	9d02      	ldr	r5, [sp, #8]
 8016dc8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8016dca:	f10d 0266 	add.w	r2, sp, #102	@ 0x66
 8016dce:	af6b      	add	r7, sp, #428	@ 0x1ac
 8016dd0:	f10d 0ca6 	add.w	ip, sp, #166	@ 0xa6
 8016dd4:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	d043      	beq.n	8016e64 <XtalkCal_Sequence+0x438>
 8016ddc:	429e      	cmp	r6, r3
 8016dde:	d041      	beq.n	8016e64 <XtalkCal_Sequence+0x438>
 8016de0:	ea5f 4803 	movs.w	r8, r3, lsl #16
 8016de4:	f100 81af 	bmi.w	8017146 <XtalkCal_Sequence+0x71a>
 8016de8:	45a8      	cmp	r8, r5
 8016dea:	4641      	mov	r1, r8
 8016dec:	f080 8305 	bcs.w	80173fa <XtalkCal_Sequence+0x9ce>
 8016df0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8016df4:	4689      	mov	r9, r1
 8016df6:	0049      	lsls	r1, r1, #1
 8016df8:	42a9      	cmp	r1, r5
 8016dfa:	4618      	mov	r0, r3
 8016dfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016e00:	d3f8      	bcc.n	8016df4 <XtalkCal_Sequence+0x3c8>
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	f040 81af 	bne.w	8017166 <XtalkCal_Sequence+0x73a>
 8016e08:	ea98 0f0e 	teq	r8, lr
 8016e0c:	6863      	ldr	r3, [r4, #4]
 8016e0e:	f100 83cb 	bmi.w	80175a8 <XtalkCal_Sequence+0xb7c>
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	f2c0 81f4 	blt.w	8017200 <XtalkCal_Sequence+0x7d4>
 8016e18:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8016e1c:	4698      	mov	r8, r3
 8016e1e:	4681      	mov	r9, r0
 8016e20:	fba8 3809 	umull	r3, r8, r8, r9
 8016e24:	0c19      	lsrs	r1, r3, #16
 8016e26:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8016e2a:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8016e2e:	440b      	add	r3, r1
 8016e30:	2100      	movs	r1, #0
 8016e32:	6063      	str	r3, [r4, #4]
 8016e34:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	f2c0 816f 	blt.w	801711c <XtalkCal_Sequence+0x6f0>
 8016e3e:	2800      	cmp	r0, #0
 8016e40:	f2c0 8171 	blt.w	8017126 <XtalkCal_Sequence+0x6fa>
 8016e44:	17d8      	asrs	r0, r3, #31
 8016e46:	fb03 f101 	mul.w	r1, r3, r1
 8016e4a:	fb09 1100 	mla	r1, r9, r0, r1
 8016e4e:	fba3 3909 	umull	r3, r9, r3, r9
 8016e52:	0c18      	lsrs	r0, r3, #16
 8016e54:	4449      	add	r1, r9
 8016e56:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8016e5a:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8016e5e:	4403      	add	r3, r0
 8016e60:	f847 3c04 	str.w	r3, [r7, #-4]
 8016e64:	4562      	cmp	r2, ip
 8016e66:	f104 0408 	add.w	r4, r4, #8
 8016e6a:	f107 0708 	add.w	r7, r7, #8
 8016e6e:	d1b1      	bne.n	8016dd4 <XtalkCal_Sequence+0x3a8>
 8016e70:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	@ 0x38
 8016e74:	2400      	movs	r4, #0
 8016e76:	f50d 7ad4 	add.w	sl, sp, #424	@ 0x1a8
 8016e7a:	4627      	mov	r7, r4
 8016e7c:	ea4f 06c8 	mov.w	r6, r8, lsl #3
 8016e80:	f8b9 52b2 	ldrh.w	r5, [r9, #690]	@ 0x2b2
 8016e84:	2d00      	cmp	r5, #0
 8016e86:	f000 81fe 	beq.w	8017286 <XtalkCal_Sequence+0x85a>
 8016e8a:	f89d 32b9 	ldrb.w	r3, [sp, #697]	@ 0x2b9
 8016e8e:	97f6      	str	r7, [sp, #984]	@ 0x3d8
 8016e90:	2b01      	cmp	r3, #1
 8016e92:	e9cd 77f4 	strd	r7, r7, [sp, #976]	@ 0x3d0
 8016e96:	f000 81ed 	beq.w	8017274 <XtalkCal_Sequence+0x848>
 8016e9a:	2b02      	cmp	r3, #2
 8016e9c:	f000 8282 	beq.w	80173a4 <XtalkCal_Sequence+0x978>
 8016ea0:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8016ea4:	f20d 5d9c 	addw	sp, sp, #1436	@ 0x59c
 8016ea8:	ecbd 8b02 	vpop	{d8}
 8016eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016eb0:	f1bc 0f00 	cmp.w	ip, #0
 8016eb4:	f2c0 80b1 	blt.w	801701a <XtalkCal_Sequence+0x5ee>
 8016eb8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016eba:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8016ebc:	1a9b      	subs	r3, r3, r2
 8016ebe:	9a01      	ldr	r2, [sp, #4]
 8016ec0:	fb02 f303 	mul.w	r3, r2, r3
 8016ec4:	011b      	lsls	r3, r3, #4
 8016ec6:	f100 80ce 	bmi.w	8017066 <XtalkCal_Sequence+0x63a>
 8016eca:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016ece:	4699      	mov	r9, r3
 8016ed0:	9a00      	ldr	r2, [sp, #0]
 8016ed2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8016ed6:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 8016eda:	ea89 0e02 	eor.w	lr, r9, r2
 8016ede:	4650      	mov	r0, sl
 8016ee0:	e704      	b.n	8016cec <XtalkCal_Sequence+0x2c0>
 8016ee2:	9b05      	ldr	r3, [sp, #20]
 8016ee4:	459a      	cmp	sl, r3
 8016ee6:	f63f af2e 	bhi.w	8016d46 <XtalkCal_Sequence+0x31a>
 8016eea:	461a      	mov	r2, r3
 8016eec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8016ef0:	2a00      	cmp	r2, #0
 8016ef2:	db1c      	blt.n	8016f2e <XtalkCal_Sequence+0x502>
 8016ef4:	f1ba 0f00 	cmp.w	sl, #0
 8016ef8:	f000 80f0 	beq.w	80170dc <XtalkCal_Sequence+0x6b0>
 8016efc:	2100      	movs	r1, #0
 8016efe:	4650      	mov	r0, sl
 8016f00:	e000      	b.n	8016f04 <XtalkCal_Sequence+0x4d8>
 8016f02:	b158      	cbz	r0, 8016f1c <XtalkCal_Sequence+0x4f0>
 8016f04:	4290      	cmp	r0, r2
 8016f06:	bf24      	itt	cs
 8016f08:	1a80      	subcs	r0, r0, r2
 8016f0a:	4319      	orrcs	r1, r3
 8016f0c:	085b      	lsrs	r3, r3, #1
 8016f0e:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8016f12:	d1f6      	bne.n	8016f02 <XtalkCal_Sequence+0x4d6>
 8016f14:	4682      	mov	sl, r0
 8016f16:	4552      	cmp	r2, sl
 8016f18:	d800      	bhi.n	8016f1c <XtalkCal_Sequence+0x4f0>
 8016f1a:	3101      	adds	r1, #1
 8016f1c:	f1bc 0f00 	cmp.w	ip, #0
 8016f20:	f2c0 8092 	blt.w	8017048 <XtalkCal_Sequence+0x61c>
 8016f24:	2900      	cmp	r1, #0
 8016f26:	bfb8      	it	lt
 8016f28:	f06f 4100 	mvnlt.w	r1, #2147483648	@ 0x80000000
 8016f2c:	e71d      	b.n	8016d6a <XtalkCal_Sequence+0x33e>
 8016f2e:	4592      	cmp	sl, r2
 8016f30:	f080 80b8 	bcs.w	80170a4 <XtalkCal_Sequence+0x678>
 8016f34:	085b      	lsrs	r3, r3, #1
 8016f36:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8016f3a:	d1db      	bne.n	8016ef4 <XtalkCal_Sequence+0x4c8>
 8016f3c:	4619      	mov	r1, r3
 8016f3e:	e7ea      	b.n	8016f16 <XtalkCal_Sequence+0x4ea>
 8016f40:	9a05      	ldr	r2, [sp, #20]
 8016f42:	4293      	cmp	r3, r2
 8016f44:	f63f aede 	bhi.w	8016d04 <XtalkCal_Sequence+0x2d8>
 8016f48:	4611      	mov	r1, r2
 8016f4a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8016f4e:	2900      	cmp	r1, #0
 8016f50:	db6f      	blt.n	8017032 <XtalkCal_Sequence+0x606>
 8016f52:	f04f 0900 	mov.w	r9, #0
 8016f56:	b90b      	cbnz	r3, 8016f5c <XtalkCal_Sequence+0x530>
 8016f58:	e0b7      	b.n	80170ca <XtalkCal_Sequence+0x69e>
 8016f5a:	b163      	cbz	r3, 8016f76 <XtalkCal_Sequence+0x54a>
 8016f5c:	4299      	cmp	r1, r3
 8016f5e:	bf9c      	itt	ls
 8016f60:	1a5b      	subls	r3, r3, r1
 8016f62:	ea49 0902 	orrls.w	r9, r9, r2
 8016f66:	0852      	lsrs	r2, r2, #1
 8016f68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016f6c:	d1f5      	bne.n	8016f5a <XtalkCal_Sequence+0x52e>
 8016f6e:	4299      	cmp	r1, r3
 8016f70:	d801      	bhi.n	8016f76 <XtalkCal_Sequence+0x54a>
 8016f72:	f109 0901 	add.w	r9, r9, #1
 8016f76:	f1be 0f00 	cmp.w	lr, #0
 8016f7a:	db62      	blt.n	8017042 <XtalkCal_Sequence+0x616>
 8016f7c:	f1b9 0f00 	cmp.w	r9, #0
 8016f80:	bfb8      	it	lt
 8016f82:	f06f 4900 	mvnlt.w	r9, #2147483648	@ 0x80000000
 8016f86:	e6cf      	b.n	8016d28 <XtalkCal_Sequence+0x2fc>
 8016f88:	2900      	cmp	r1, #0
 8016f8a:	da07      	bge.n	8016f9c <XtalkCal_Sequence+0x570>
 8016f8c:	4281      	cmp	r1, r0
 8016f8e:	f000 8087 	beq.w	80170a0 <XtalkCal_Sequence+0x674>
 8016f92:	f03a 4200 	bics.w	r2, sl, #2147483648	@ 0x80000000
 8016f96:	4659      	mov	r1, fp
 8016f98:	f000 80be 	beq.w	8017118 <XtalkCal_Sequence+0x6ec>
 8016f9c:	f04f 0a00 	mov.w	sl, #0
 8016fa0:	e000      	b.n	8016fa4 <XtalkCal_Sequence+0x578>
 8016fa2:	b160      	cbz	r0, 8016fbe <XtalkCal_Sequence+0x592>
 8016fa4:	4288      	cmp	r0, r1
 8016fa6:	bf24      	itt	cs
 8016fa8:	1a40      	subcs	r0, r0, r1
 8016faa:	ea4a 0a02 	orrcs.w	sl, sl, r2
 8016fae:	0852      	lsrs	r2, r2, #1
 8016fb0:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8016fb4:	d1f5      	bne.n	8016fa2 <XtalkCal_Sequence+0x576>
 8016fb6:	4288      	cmp	r0, r1
 8016fb8:	d301      	bcc.n	8016fbe <XtalkCal_Sequence+0x592>
 8016fba:	f10a 0a01 	add.w	sl, sl, #1
 8016fbe:	ea97 0f0c 	teq	r7, ip
 8016fc2:	d443      	bmi.n	801704c <XtalkCal_Sequence+0x620>
 8016fc4:	f1ba 0f00 	cmp.w	sl, #0
 8016fc8:	4650      	mov	r0, sl
 8016fca:	f6ff ae8a 	blt.w	8016ce2 <XtalkCal_Sequence+0x2b6>
 8016fce:	9a00      	ldr	r2, [sp, #0]
 8016fd0:	ea8a 0c02 	eor.w	ip, sl, r2
 8016fd4:	e68a      	b.n	8016cec <XtalkCal_Sequence+0x2c0>
 8016fd6:	2900      	cmp	r1, #0
 8016fd8:	da06      	bge.n	8016fe8 <XtalkCal_Sequence+0x5bc>
 8016fda:	4281      	cmp	r1, r0
 8016fdc:	d05e      	beq.n	801709c <XtalkCal_Sequence+0x670>
 8016fde:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8016fe2:	4671      	mov	r1, lr
 8016fe4:	f000 8096 	beq.w	8017114 <XtalkCal_Sequence+0x6e8>
 8016fe8:	2300      	movs	r3, #0
 8016fea:	e000      	b.n	8016fee <XtalkCal_Sequence+0x5c2>
 8016fec:	b150      	cbz	r0, 8017004 <XtalkCal_Sequence+0x5d8>
 8016fee:	4281      	cmp	r1, r0
 8016ff0:	bf9c      	itt	ls
 8016ff2:	1a40      	subls	r0, r0, r1
 8016ff4:	4313      	orrls	r3, r2
 8016ff6:	0852      	lsrs	r2, r2, #1
 8016ff8:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8016ffc:	d1f6      	bne.n	8016fec <XtalkCal_Sequence+0x5c0>
 8016ffe:	4281      	cmp	r1, r0
 8017000:	d800      	bhi.n	8017004 <XtalkCal_Sequence+0x5d8>
 8017002:	3301      	adds	r3, #1
 8017004:	ea9c 0f07 	teq	ip, r7
 8017008:	d427      	bmi.n	801705a <XtalkCal_Sequence+0x62e>
 801700a:	2b00      	cmp	r3, #0
 801700c:	4699      	mov	r9, r3
 801700e:	f6ff ae42 	blt.w	8016c96 <XtalkCal_Sequence+0x26a>
 8017012:	9a00      	ldr	r2, [sp, #0]
 8017014:	ea83 0e02 	eor.w	lr, r3, r2
 8017018:	e642      	b.n	8016ca0 <XtalkCal_Sequence+0x274>
 801701a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801701c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801701e:	1a9b      	subs	r3, r3, r2
 8017020:	9a01      	ldr	r2, [sp, #4]
 8017022:	fb02 f303 	mul.w	r3, r2, r3
 8017026:	011a      	lsls	r2, r3, #4
 8017028:	d43e      	bmi.n	80170a8 <XtalkCal_Sequence+0x67c>
 801702a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801702e:	4699      	mov	r9, r3
 8017030:	e74e      	b.n	8016ed0 <XtalkCal_Sequence+0x4a4>
 8017032:	428b      	cmp	r3, r1
 8017034:	d230      	bcs.n	8017098 <XtalkCal_Sequence+0x66c>
 8017036:	0852      	lsrs	r2, r2, #1
 8017038:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801703c:	d189      	bne.n	8016f52 <XtalkCal_Sequence+0x526>
 801703e:	4691      	mov	r9, r2
 8017040:	e795      	b.n	8016f6e <XtalkCal_Sequence+0x542>
 8017042:	f1c9 0900 	rsb	r9, r9, #0
 8017046:	e66f      	b.n	8016d28 <XtalkCal_Sequence+0x2fc>
 8017048:	4249      	negs	r1, r1
 801704a:	e68e      	b.n	8016d6a <XtalkCal_Sequence+0x33e>
 801704c:	9a00      	ldr	r2, [sp, #0]
 801704e:	f1ca 0a00 	rsb	sl, sl, #0
 8017052:	4650      	mov	r0, sl
 8017054:	ea82 0c0a 	eor.w	ip, r2, sl
 8017058:	e648      	b.n	8016cec <XtalkCal_Sequence+0x2c0>
 801705a:	9a00      	ldr	r2, [sp, #0]
 801705c:	425b      	negs	r3, r3
 801705e:	4699      	mov	r9, r3
 8017060:	ea82 0e03 	eor.w	lr, r2, r3
 8017064:	e61c      	b.n	8016ca0 <XtalkCal_Sequence+0x274>
 8017066:	9b00      	ldr	r3, [sp, #0]
 8017068:	f8dd e00c 	ldr.w	lr, [sp, #12]
 801706c:	f04f 4a00 	mov.w	sl, #2147483648	@ 0x80000000
 8017070:	eb03 0c0a 	add.w	ip, r3, sl
 8017074:	4650      	mov	r0, sl
 8017076:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801707a:	e63b      	b.n	8016cf4 <XtalkCal_Sequence+0x2c8>
 801707c:	2800      	cmp	r0, #0
 801707e:	f000 81b0 	beq.w	80173e2 <XtalkCal_Sequence+0x9b6>
 8017082:	4639      	mov	r1, r7
 8017084:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8017088:	e7ae      	b.n	8016fe8 <XtalkCal_Sequence+0x5bc>
 801708a:	2800      	cmp	r0, #0
 801708c:	f000 81a5 	beq.w	80173da <XtalkCal_Sequence+0x9ae>
 8017090:	4639      	mov	r1, r7
 8017092:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8017096:	e781      	b.n	8016f9c <XtalkCal_Sequence+0x570>
 8017098:	4691      	mov	r9, r2
 801709a:	e76c      	b.n	8016f76 <XtalkCal_Sequence+0x54a>
 801709c:	4613      	mov	r3, r2
 801709e:	e7b1      	b.n	8017004 <XtalkCal_Sequence+0x5d8>
 80170a0:	4692      	mov	sl, r2
 80170a2:	e78c      	b.n	8016fbe <XtalkCal_Sequence+0x592>
 80170a4:	4619      	mov	r1, r3
 80170a6:	e739      	b.n	8016f1c <XtalkCal_Sequence+0x4f0>
 80170a8:	9b00      	ldr	r3, [sp, #0]
 80170aa:	f04f 4a00 	mov.w	sl, #2147483648	@ 0x80000000
 80170ae:	eb03 0c0a 	add.w	ip, r3, sl
 80170b2:	46e6      	mov	lr, ip
 80170b4:	4653      	mov	r3, sl
 80170b6:	4650      	mov	r0, sl
 80170b8:	e61c      	b.n	8016cf4 <XtalkCal_Sequence+0x2c8>
 80170ba:	4611      	mov	r1, r2
 80170bc:	f04f 0900 	mov.w	r9, #0
 80170c0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	f47f af49 	bne.w	8016f5c <XtalkCal_Sequence+0x530>
 80170ca:	4699      	mov	r9, r3
 80170cc:	e62c      	b.n	8016d28 <XtalkCal_Sequence+0x2fc>
 80170ce:	461a      	mov	r2, r3
 80170d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80170d4:	f1ba 0f00 	cmp.w	sl, #0
 80170d8:	f47f af10 	bne.w	8016efc <XtalkCal_Sequence+0x4d0>
 80170dc:	4651      	mov	r1, sl
 80170de:	e644      	b.n	8016d6a <XtalkCal_Sequence+0x33e>
 80170e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80170e2:	4291      	cmp	r1, r2
 80170e4:	d06c      	beq.n	80171c0 <XtalkCal_Sequence+0x794>
 80170e6:	bf8c      	ite	hi
 80170e8:	2201      	movhi	r2, #1
 80170ea:	2200      	movls	r2, #0
 80170ec:	b952      	cbnz	r2, 8017104 <XtalkCal_Sequence+0x6d8>
 80170ee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80170f0:	428a      	cmp	r2, r1
 80170f2:	d07f      	beq.n	80171f4 <XtalkCal_Sequence+0x7c8>
 80170f4:	bf34      	ite	cc
 80170f6:	2301      	movcc	r3, #1
 80170f8:	2300      	movcs	r3, #0
 80170fa:	f083 0301 	eor.w	r3, r3, #1
 80170fe:	2b00      	cmp	r3, #0
 8017100:	f43f ae5e 	beq.w	8016dc0 <XtalkCal_Sequence+0x394>
 8017104:	9b06      	ldr	r3, [sp, #24]
 8017106:	9a07      	ldr	r2, [sp, #28]
 8017108:	3301      	adds	r3, #1
 801710a:	429a      	cmp	r2, r3
 801710c:	9306      	str	r3, [sp, #24]
 801710e:	f47f ad5e 	bne.w	8016bce <XtalkCal_Sequence+0x1a2>
 8017112:	e655      	b.n	8016dc0 <XtalkCal_Sequence+0x394>
 8017114:	4613      	mov	r3, r2
 8017116:	e772      	b.n	8016ffe <XtalkCal_Sequence+0x5d2>
 8017118:	4692      	mov	sl, r2
 801711a:	e74c      	b.n	8016fb6 <XtalkCal_Sequence+0x58a>
 801711c:	2800      	cmp	r0, #0
 801711e:	f1c3 0300 	rsb	r3, r3, #0
 8017122:	f6ff ae8f 	blt.w	8016e44 <XtalkCal_Sequence+0x418>
 8017126:	17d8      	asrs	r0, r3, #31
 8017128:	fb03 f101 	mul.w	r1, r3, r1
 801712c:	fb09 1100 	mla	r1, r9, r0, r1
 8017130:	fba3 3909 	umull	r3, r9, r3, r9
 8017134:	0c18      	lsrs	r0, r3, #16
 8017136:	4449      	add	r1, r9
 8017138:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801713c:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8017140:	4403      	add	r3, r0
 8017142:	425b      	negs	r3, r3
 8017144:	e68c      	b.n	8016e60 <XtalkCal_Sequence+0x434>
 8017146:	f1c8 0100 	rsb	r1, r8, #0
 801714a:	42a9      	cmp	r1, r5
 801714c:	f4ff ae50 	bcc.w	8016df0 <XtalkCal_Sequence+0x3c4>
 8017150:	2900      	cmp	r1, #0
 8017152:	f280 8152 	bge.w	80173fa <XtalkCal_Sequence+0x9ce>
 8017156:	2d00      	cmp	r5, #0
 8017158:	f2c0 8161 	blt.w	801741e <XtalkCal_Sequence+0x9f2>
 801715c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017160:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8017164:	e001      	b.n	801716a <XtalkCal_Sequence+0x73e>
 8017166:	2900      	cmp	r1, #0
 8017168:	db4f      	blt.n	801720a <XtalkCal_Sequence+0x7de>
 801716a:	4628      	mov	r0, r5
 801716c:	f04f 0900 	mov.w	r9, #0
 8017170:	e000      	b.n	8017174 <XtalkCal_Sequence+0x748>
 8017172:	b160      	cbz	r0, 801718e <XtalkCal_Sequence+0x762>
 8017174:	4281      	cmp	r1, r0
 8017176:	bf9c      	itt	ls
 8017178:	1a40      	subls	r0, r0, r1
 801717a:	ea49 0903 	orrls.w	r9, r9, r3
 801717e:	085b      	lsrs	r3, r3, #1
 8017180:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8017184:	d1f5      	bne.n	8017172 <XtalkCal_Sequence+0x746>
 8017186:	4281      	cmp	r1, r0
 8017188:	d801      	bhi.n	801718e <XtalkCal_Sequence+0x762>
 801718a:	f109 0901 	add.w	r9, r9, #1
 801718e:	ea98 0f0e 	teq	r8, lr
 8017192:	d440      	bmi.n	8017216 <XtalkCal_Sequence+0x7ea>
 8017194:	f1b9 0f00 	cmp.w	r9, #0
 8017198:	6863      	ldr	r3, [r4, #4]
 801719a:	4648      	mov	r0, r9
 801719c:	f2c0 8126 	blt.w	80173ec <XtalkCal_Sequence+0x9c0>
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	bfb8      	it	lt
 80171a4:	425b      	neglt	r3, r3
 80171a6:	f280 8205 	bge.w	80175b4 <XtalkCal_Sequence+0xb88>
 80171aa:	fba3 3809 	umull	r3, r8, r3, r9
 80171ae:	0c19      	lsrs	r1, r3, #16
 80171b0:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80171b4:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 80171b8:	440b      	add	r3, r1
 80171ba:	2100      	movs	r1, #0
 80171bc:	425b      	negs	r3, r3
 80171be:	e638      	b.n	8016e32 <XtalkCal_Sequence+0x406>
 80171c0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80171c2:	4293      	cmp	r3, r2
 80171c4:	bf34      	ite	cc
 80171c6:	2200      	movcc	r2, #0
 80171c8:	2201      	movcs	r2, #1
 80171ca:	e78f      	b.n	80170ec <XtalkCal_Sequence+0x6c0>
 80171cc:	9a00      	ldr	r2, [sp, #0]
 80171ce:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80171d2:	eb02 0e03 	add.w	lr, r2, r3
 80171d6:	4699      	mov	r9, r3
 80171d8:	e562      	b.n	8016ca0 <XtalkCal_Sequence+0x274>
 80171da:	9a00      	ldr	r2, [sp, #0]
 80171dc:	f04f 4a00 	mov.w	sl, #2147483648	@ 0x80000000
 80171e0:	eb02 0c0a 	add.w	ip, r2, sl
 80171e4:	4650      	mov	r0, sl
 80171e6:	e581      	b.n	8016cec <XtalkCal_Sequence+0x2c0>
 80171e8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80171ea:	4293      	cmp	r3, r2
 80171ec:	bf34      	ite	cc
 80171ee:	2200      	movcc	r2, #0
 80171f0:	2201      	movcs	r2, #1
 80171f2:	e5db      	b.n	8016dac <XtalkCal_Sequence+0x380>
 80171f4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80171f6:	4293      	cmp	r3, r2
 80171f8:	bf34      	ite	cc
 80171fa:	2300      	movcc	r3, #0
 80171fc:	2301      	movcs	r3, #1
 80171fe:	e77c      	b.n	80170fa <XtalkCal_Sequence+0x6ce>
 8017200:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8017204:	425b      	negs	r3, r3
 8017206:	4681      	mov	r9, r0
 8017208:	e7cf      	b.n	80171aa <XtalkCal_Sequence+0x77e>
 801720a:	42a9      	cmp	r1, r5
 801720c:	d829      	bhi.n	8017262 <XtalkCal_Sequence+0x836>
 801720e:	ea98 0f0e 	teq	r8, lr
 8017212:	4699      	mov	r9, r3
 8017214:	d5be      	bpl.n	8017194 <XtalkCal_Sequence+0x768>
 8017216:	6863      	ldr	r3, [r4, #4]
 8017218:	f1c9 0900 	rsb	r9, r9, #0
 801721c:	2b00      	cmp	r3, #0
 801721e:	4648      	mov	r0, r9
 8017220:	f2c0 80c5 	blt.w	80173ae <XtalkCal_Sequence+0x982>
 8017224:	f1b9 0f00 	cmp.w	r9, #0
 8017228:	4698      	mov	r8, r3
 801722a:	f6bf adf9 	bge.w	8016e20 <XtalkCal_Sequence+0x3f4>
 801722e:	4243      	negs	r3, r0
 8017230:	17d9      	asrs	r1, r3, #31
 8017232:	4699      	mov	r9, r3
 8017234:	fba8 3a03 	umull	r3, sl, r8, r3
 8017238:	fb08 aa01 	mla	sl, r8, r1, sl
 801723c:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8017240:	ea48 480a 	orr.w	r8, r8, sl, lsl #16
 8017244:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8017248:	4443      	add	r3, r8
 801724a:	e7b7      	b.n	80171bc <XtalkCal_Sequence+0x790>
 801724c:	2a01      	cmp	r2, #1
 801724e:	f240 80dc 	bls.w	801740a <XtalkCal_Sequence+0x9de>
 8017252:	0842      	lsrs	r2, r0, #1
 8017254:	9207      	str	r2, [sp, #28]
 8017256:	0412      	lsls	r2, r2, #16
 8017258:	4251      	negs	r1, r2
 801725a:	9204      	str	r2, [sp, #16]
 801725c:	9105      	str	r1, [sp, #20]
 801725e:	9200      	str	r2, [sp, #0]
 8017260:	e44b      	b.n	8016afa <XtalkCal_Sequence+0xce>
 8017262:	f030 4300 	bics.w	r3, r0, #2147483648	@ 0x80000000
 8017266:	f029 4100 	bic.w	r1, r9, #2147483648	@ 0x80000000
 801726a:	f47f af7e 	bne.w	801716a <XtalkCal_Sequence+0x73e>
 801726e:	4699      	mov	r9, r3
 8017270:	4628      	mov	r0, r5
 8017272:	e788      	b.n	8017186 <XtalkCal_Sequence+0x75a>
 8017274:	4651      	mov	r1, sl
 8017276:	a8f4      	add	r0, sp, #976	@ 0x3d0
 8017278:	f005 f84c 	bl	801c314 <Argus_Eval_Trapezoidal>
 801727c:	f8bd 33d6 	ldrh.w	r3, [sp, #982]	@ 0x3d6
 8017280:	42ab      	cmp	r3, r5
 8017282:	f200 8199 	bhi.w	80175b8 <XtalkCal_Sequence+0xb8c>
 8017286:	f8da 0000 	ldr.w	r0, [sl]
 801728a:	2800      	cmp	r0, #0
 801728c:	ea4f 0194 	mov.w	r1, r4, lsr #2
 8017290:	f004 0303 	and.w	r3, r4, #3
 8017294:	db77      	blt.n	8017386 <XtalkCal_Sequence+0x95a>
 8017296:	f3c0 22c0 	ubfx	r2, r0, #11, #1
 801729a:	eb02 3210 	add.w	r2, r2, r0, lsr #12
 801729e:	1870      	adds	r0, r6, r1
 80172a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80172a4:	f10d 0ea8 	add.w	lr, sp, #168	@ 0xa8
 80172a8:	f8da c004 	ldr.w	ip, [sl, #4]
 80172ac:	f83e e020 	ldrh.w	lr, [lr, r0, lsl #2]
 80172b0:	eba2 020e 	sub.w	r2, r2, lr
 80172b4:	f10d 0ea8 	add.w	lr, sp, #168	@ 0xa8
 80172b8:	f1bc 0f00 	cmp.w	ip, #0
 80172bc:	f82e 2020 	strh.w	r2, [lr, r0, lsl #2]
 80172c0:	db68      	blt.n	8017394 <XtalkCal_Sequence+0x968>
 80172c2:	f3cc 22c0 	ubfx	r2, ip, #11, #1
 80172c6:	eb02 321c 	add.w	r2, r2, ip, lsr #12
 80172ca:	4431      	add	r1, r6
 80172cc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80172d0:	a92a      	add	r1, sp, #168	@ 0xa8
 80172d2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80172d6:	3401      	adds	r4, #1
 80172d8:	8859      	ldrh	r1, [r3, #2]
 80172da:	2c20      	cmp	r4, #32
 80172dc:	eba2 0201 	sub.w	r2, r2, r1
 80172e0:	805a      	strh	r2, [r3, #2]
 80172e2:	d038      	beq.n	8017356 <XtalkCal_Sequence+0x92a>
 80172e4:	f10a 0a08 	add.w	sl, sl, #8
 80172e8:	2d00      	cmp	r5, #0
 80172ea:	f47f adc9 	bne.w	8016e80 <XtalkCal_Sequence+0x454>
 80172ee:	ab6a      	add	r3, sp, #424	@ 0x1a8
 80172f0:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 80172f4:	6810      	ldr	r0, [r2, #0]
 80172f6:	4243      	negs	r3, r0
 80172f8:	08a5      	lsrs	r5, r4, #2
 80172fa:	f3c0 21c0 	ubfx	r1, r0, #11, #1
 80172fe:	f3c3 27c0 	ubfx	r7, r3, #11, #1
 8017302:	eb01 3110 	add.w	r1, r1, r0, lsr #12
 8017306:	eb07 3713 	add.w	r7, r7, r3, lsr #12
 801730a:	2800      	cmp	r0, #0
 801730c:	f004 0303 	and.w	r3, r4, #3
 8017310:	eb06 0005 	add.w	r0, r6, r5
 8017314:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8017318:	bfb8      	it	lt
 801731a:	4279      	neglt	r1, r7
 801731c:	af2a      	add	r7, sp, #168	@ 0xa8
 801731e:	a82a      	add	r0, sp, #168	@ 0xa8
 8017320:	f837 7023 	ldrh.w	r7, [r7, r3, lsl #2]
 8017324:	1bc9      	subs	r1, r1, r7
 8017326:	af2a      	add	r7, sp, #168	@ 0xa8
 8017328:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 801732c:	f827 1023 	strh.w	r1, [r7, r3, lsl #2]
 8017330:	6851      	ldr	r1, [r2, #4]
 8017332:	2900      	cmp	r1, #0
 8017334:	f104 0401 	add.w	r4, r4, #1
 8017338:	f102 0208 	add.w	r2, r2, #8
 801733c:	f1c1 0700 	rsb	r7, r1, #0
 8017340:	f2c0 8159 	blt.w	80175f6 <XtalkCal_Sequence+0xbca>
 8017344:	8868      	ldrh	r0, [r5, #2]
 8017346:	f3c1 23c0 	ubfx	r3, r1, #11, #1
 801734a:	eb03 3311 	add.w	r3, r3, r1, lsr #12
 801734e:	1a1b      	subs	r3, r3, r0
 8017350:	2c20      	cmp	r4, #32
 8017352:	806b      	strh	r3, [r5, #2]
 8017354:	d1ce      	bne.n	80172f4 <XtalkCal_Sequence+0x8c8>
 8017356:	f1b8 0f00 	cmp.w	r8, #0
 801735a:	f000 8133 	beq.w	80175c4 <XtalkCal_Sequence+0xb98>
 801735e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8017362:	a92a      	add	r1, sp, #168	@ 0xa8
 8017364:	f509 7091 	add.w	r0, r9, #290	@ 0x122
 8017368:	f013 feb7 	bl	802b0da <memcpy>
 801736c:	f8d9 3288 	ldr.w	r3, [r9, #648]	@ 0x288
 8017370:	2000      	movs	r0, #0
 8017372:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8017376:	f8c9 3288 	str.w	r3, [r9, #648]	@ 0x288
 801737a:	f20d 5d9c 	addw	sp, sp, #1436	@ 0x59c
 801737e:	ecbd 8b02 	vpop	{d8}
 8017382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017386:	4240      	negs	r0, r0
 8017388:	f3c0 22c0 	ubfx	r2, r0, #11, #1
 801738c:	eb02 3210 	add.w	r2, r2, r0, lsr #12
 8017390:	4252      	negs	r2, r2
 8017392:	e784      	b.n	801729e <XtalkCal_Sequence+0x872>
 8017394:	f1cc 0c00 	rsb	ip, ip, #0
 8017398:	f3cc 22c0 	ubfx	r2, ip, #11, #1
 801739c:	eb02 321c 	add.w	r2, r2, ip, lsr #12
 80173a0:	4252      	negs	r2, r2
 80173a2:	e792      	b.n	80172ca <XtalkCal_Sequence+0x89e>
 80173a4:	4651      	mov	r1, sl
 80173a6:	a8f4      	add	r0, sp, #976	@ 0x3d0
 80173a8:	f005 f86a 	bl	801c480 <Argus_Eval_Triangular>
 80173ac:	e766      	b.n	801727c <XtalkCal_Sequence+0x850>
 80173ae:	f1b9 0f00 	cmp.w	r9, #0
 80173b2:	f1c3 0300 	rsb	r3, r3, #0
 80173b6:	f6bf aef8 	bge.w	80171aa <XtalkCal_Sequence+0x77e>
 80173ba:	f1c0 0900 	rsb	r9, r0, #0
 80173be:	fba3 8a09 	umull	r8, sl, r3, r9
 80173c2:	ea4f 71e9 	mov.w	r1, r9, asr #31
 80173c6:	fb03 a301 	mla	r3, r3, r1, sl
 80173ca:	ea4f 4a18 	mov.w	sl, r8, lsr #16
 80173ce:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 80173d2:	f3c8 33c0 	ubfx	r3, r8, #15, #1
 80173d6:	4453      	add	r3, sl
 80173d8:	e52b      	b.n	8016e32 <XtalkCal_Sequence+0x406>
 80173da:	f8dd c000 	ldr.w	ip, [sp]
 80173de:	4682      	mov	sl, r0
 80173e0:	e484      	b.n	8016cec <XtalkCal_Sequence+0x2c0>
 80173e2:	f8dd e000 	ldr.w	lr, [sp]
 80173e6:	4653      	mov	r3, sl
 80173e8:	46d1      	mov	r9, sl
 80173ea:	e459      	b.n	8016ca0 <XtalkCal_Sequence+0x274>
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	db07      	blt.n	8017400 <XtalkCal_Sequence+0x9d4>
 80173f0:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 80173f4:	4698      	mov	r8, r3
 80173f6:	4648      	mov	r0, r9
 80173f8:	e512      	b.n	8016e20 <XtalkCal_Sequence+0x3f4>
 80173fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80173fe:	e6b4      	b.n	801716a <XtalkCal_Sequence+0x73e>
 8017400:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 8017404:	425b      	negs	r3, r3
 8017406:	4648      	mov	r0, r9
 8017408:	e6cf      	b.n	80171aa <XtalkCal_Sequence+0x77e>
 801740a:	4981      	ldr	r1, [pc, #516]	@ (8017610 <XtalkCal_Sequence+0xbe4>)
 801740c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8017410:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8017414:	9200      	str	r2, [sp, #0]
 8017416:	2201      	movs	r2, #1
 8017418:	9207      	str	r2, [sp, #28]
 801741a:	f7ff bb6e 	b.w	8016afa <XtalkCal_Sequence+0xce>
 801741e:	f44f 3980 	mov.w	r9, #65536	@ 0x10000
 8017422:	e6b4      	b.n	801718e <XtalkCal_Sequence+0x762>
 8017424:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017426:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8017428:	689a      	ldr	r2, [r3, #8]
 801742a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801742e:	4610      	mov	r0, r2
 8017430:	f8d3 10bc 	ldr.w	r1, [r3, #188]	@ 0xbc
 8017434:	2a00      	cmp	r2, #0
 8017436:	f000 80b0 	beq.w	801759a <XtalkCal_Sequence+0xb6e>
 801743a:	0849      	lsrs	r1, r1, #1
 801743c:	2a00      	cmp	r2, #0
 801743e:	460e      	mov	r6, r1
 8017440:	db49      	blt.n	80174d6 <XtalkCal_Sequence+0xaaa>
 8017442:	428a      	cmp	r2, r1
 8017444:	d24c      	bcs.n	80174e0 <XtalkCal_Sequence+0xab4>
 8017446:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801744a:	4614      	mov	r4, r2
 801744c:	0052      	lsls	r2, r2, #1
 801744e:	428a      	cmp	r2, r1
 8017450:	461d      	mov	r5, r3
 8017452:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8017456:	d3f8      	bcc.n	801744a <XtalkCal_Sequence+0xa1e>
 8017458:	2b00      	cmp	r3, #0
 801745a:	f040 808e 	bne.w	801757a <XtalkCal_Sequence+0xb4e>
 801745e:	ea91 0f00 	teq	r1, r0
 8017462:	bf54      	ite	pl
 8017464:	f06f 4300 	mvnpl.w	r3, #2147483648	@ 0x80000000
 8017468:	f04f 4300 	movmi.w	r3, #2147483648	@ 0x80000000
 801746c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801746e:	2a00      	cmp	r2, #0
 8017470:	d151      	bne.n	8017516 <XtalkCal_Sequence+0xaea>
 8017472:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8017476:	4615      	mov	r5, r2
 8017478:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801747a:	f8b4 109c 	ldrh.w	r1, [r4, #156]	@ 0x9c
 801747e:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8017482:	fba1 1203 	umull	r1, r2, r1, r3
 8017486:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017488:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 801748c:	f8b2 40b4 	ldrh.w	r4, [r2, #180]	@ 0xb4
 8017490:	fba0 2303 	umull	r2, r3, r0, r3
 8017494:	fb00 3305 	mla	r3, r0, r5, r3
 8017498:	f89d 0326 	ldrb.w	r0, [sp, #806]	@ 0x326
 801749c:	f000 001f 	and.w	r0, r0, #31
 80174a0:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
 80174a4:	08e4      	lsrs	r4, r4, #3
 80174a6:	f88d 4325 	strb.w	r4, [sp, #805]	@ 0x325
 80174aa:	9c08      	ldr	r4, [sp, #32]
 80174ac:	f88d 0326 	strb.w	r0, [sp, #806]	@ 0x326
 80174b0:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 80174b2:	f040 7080 	orr.w	r0, r0, #16777216	@ 0x1000000
 80174b6:	67e0      	str	r0, [r4, #124]	@ 0x7c
 80174b8:	0c10      	lsrs	r0, r2, #16
 80174ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80174be:	f3c2 33c0 	ubfx	r3, r2, #15, #1
 80174c2:	4403      	add	r3, r0
 80174c4:	93cf      	str	r3, [sp, #828]	@ 0x33c
 80174c6:	f3c1 33c0 	ubfx	r3, r1, #15, #1
 80174ca:	eb03 4111 	add.w	r1, r3, r1, lsr #16
 80174ce:	f8ad 1344 	strh.w	r1, [sp, #836]	@ 0x344
 80174d2:	f7ff bb31 	b.w	8016b38 <XtalkCal_Sequence+0x10c>
 80174d6:	4252      	negs	r2, r2
 80174d8:	428a      	cmp	r2, r1
 80174da:	d3b4      	bcc.n	8017446 <XtalkCal_Sequence+0xa1a>
 80174dc:	2a00      	cmp	r2, #0
 80174de:	db5f      	blt.n	80175a0 <XtalkCal_Sequence+0xb74>
 80174e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80174e4:	2900      	cmp	r1, #0
 80174e6:	d056      	beq.n	8017596 <XtalkCal_Sequence+0xb6a>
 80174e8:	461c      	mov	r4, r3
 80174ea:	2300      	movs	r3, #0
 80174ec:	e000      	b.n	80174f0 <XtalkCal_Sequence+0xac4>
 80174ee:	b139      	cbz	r1, 8017500 <XtalkCal_Sequence+0xad4>
 80174f0:	428a      	cmp	r2, r1
 80174f2:	bf9c      	itt	ls
 80174f4:	1a89      	subls	r1, r1, r2
 80174f6:	4323      	orrls	r3, r4
 80174f8:	0864      	lsrs	r4, r4, #1
 80174fa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80174fe:	d1f6      	bne.n	80174ee <XtalkCal_Sequence+0xac2>
 8017500:	4291      	cmp	r1, r2
 8017502:	bf28      	it	cs
 8017504:	3301      	addcs	r3, #1
 8017506:	ea96 0f00 	teq	r6, r0
 801750a:	d442      	bmi.n	8017592 <XtalkCal_Sequence+0xb66>
 801750c:	2b00      	cmp	r3, #0
 801750e:	bfb8      	it	lt
 8017510:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8017514:	e7aa      	b.n	801746c <XtalkCal_Sequence+0xa40>
 8017516:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 801751a:	2200      	movs	r2, #0
 801751c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801751e:	f8b4 009c 	ldrh.w	r0, [r4, #156]	@ 0x9c
 8017522:	f8d4 5094 	ldr.w	r5, [r4, #148]	@ 0x94
 8017526:	fba0 0103 	umull	r0, r1, r0, r3
 801752a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801752c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8017530:	f8b1 40b8 	ldrh.w	r4, [r1, #184]	@ 0xb8
 8017534:	fba5 1303 	umull	r1, r3, r5, r3
 8017538:	fb05 3302 	mla	r3, r5, r2, r3
 801753c:	f89d 2326 	ldrb.w	r2, [sp, #806]	@ 0x326
 8017540:	f002 021f 	and.w	r2, r2, #31
 8017544:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
 8017548:	08e4      	lsrs	r4, r4, #3
 801754a:	f88d 4325 	strb.w	r4, [sp, #805]	@ 0x325
 801754e:	9c08      	ldr	r4, [sp, #32]
 8017550:	f88d 2326 	strb.w	r2, [sp, #806]	@ 0x326
 8017554:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8017556:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 801755a:	67e2      	str	r2, [r4, #124]	@ 0x7c
 801755c:	0c0a      	lsrs	r2, r1, #16
 801755e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8017562:	f3c1 33c0 	ubfx	r3, r1, #15, #1
 8017566:	4413      	add	r3, r2
 8017568:	93cf      	str	r3, [sp, #828]	@ 0x33c
 801756a:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 801756e:	eb03 4010 	add.w	r0, r3, r0, lsr #16
 8017572:	f8ad 0344 	strh.w	r0, [sp, #836]	@ 0x344
 8017576:	f7ff badf 	b.w	8016b38 <XtalkCal_Sequence+0x10c>
 801757a:	2a00      	cmp	r2, #0
 801757c:	dab2      	bge.n	80174e4 <XtalkCal_Sequence+0xab8>
 801757e:	f035 4300 	bics.w	r3, r5, #2147483648	@ 0x80000000
 8017582:	4622      	mov	r2, r4
 8017584:	d0bc      	beq.n	8017500 <XtalkCal_Sequence+0xad4>
 8017586:	2900      	cmp	r1, #0
 8017588:	d1ae      	bne.n	80174e8 <XtalkCal_Sequence+0xabc>
 801758a:	2800      	cmp	r0, #0
 801758c:	460b      	mov	r3, r1
 801758e:	f6bf af6d 	bge.w	801746c <XtalkCal_Sequence+0xa40>
 8017592:	425b      	negs	r3, r3
 8017594:	e76a      	b.n	801746c <XtalkCal_Sequence+0xa40>
 8017596:	460b      	mov	r3, r1
 8017598:	e7b2      	b.n	8017500 <XtalkCal_Sequence+0xad4>
 801759a:	4b1e      	ldr	r3, [pc, #120]	@ (8017614 <XtalkCal_Sequence+0xbe8>)
 801759c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801759e:	e76b      	b.n	8017478 <XtalkCal_Sequence+0xa4c>
 80175a0:	0852      	lsrs	r2, r2, #1
 80175a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80175a6:	e7ee      	b.n	8017586 <XtalkCal_Sequence+0xb5a>
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	db20      	blt.n	80175ee <XtalkCal_Sequence+0xbc2>
 80175ac:	4698      	mov	r8, r3
 80175ae:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80175b2:	e63c      	b.n	801722e <XtalkCal_Sequence+0x802>
 80175b4:	4698      	mov	r8, r3
 80175b6:	e433      	b.n	8016e20 <XtalkCal_Sequence+0x3f4>
 80175b8:	4817      	ldr	r0, [pc, #92]	@ (8017618 <XtalkCal_Sequence+0xbec>)
 80175ba:	f7ee ffa7 	bl	800650c <print>
 80175be:	f06f 006f 	mvn.w	r0, #111	@ 0x6f
 80175c2:	e46f      	b.n	8016ea4 <XtalkCal_Sequence+0x478>
 80175c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80175c6:	f04f 0801 	mov.w	r8, #1
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	f43f ac52 	beq.w	8016e74 <XtalkCal_Sequence+0x448>
 80175d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80175d2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80175d4:	689a      	ldr	r2, [r3, #8]
 80175d6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80175da:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
 80175de:	f8d3 10bc 	ldr.w	r1, [r3, #188]	@ 0xbc
 80175e2:	4610      	mov	r0, r2
 80175e4:	2a00      	cmp	r2, #0
 80175e6:	f47f af28 	bne.w	801743a <XtalkCal_Sequence+0xa0e>
 80175ea:	4b0c      	ldr	r3, [pc, #48]	@ (801761c <XtalkCal_Sequence+0xbf0>)
 80175ec:	e796      	b.n	801751c <XtalkCal_Sequence+0xaf0>
 80175ee:	425b      	negs	r3, r3
 80175f0:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80175f4:	e6e1      	b.n	80173ba <XtalkCal_Sequence+0x98e>
 80175f6:	f3c7 23c0 	ubfx	r3, r7, #11, #1
 80175fa:	8869      	ldrh	r1, [r5, #2]
 80175fc:	eb03 3317 	add.w	r3, r3, r7, lsr #12
 8017600:	425b      	negs	r3, r3
 8017602:	1a5b      	subs	r3, r3, r1
 8017604:	2c20      	cmp	r4, #32
 8017606:	806b      	strh	r3, [r5, #2]
 8017608:	f47f ae74 	bne.w	80172f4 <XtalkCal_Sequence+0x8c8>
 801760c:	e6a3      	b.n	8017356 <XtalkCal_Sequence+0x92a>
 801760e:	bf00      	nop
 8017610:	ffff0000 	.word	0xffff0000
 8017614:	8000ffff 	.word	0x8000ffff
 8017618:	0802e8b4 	.word	0x0802e8b4
 801761c:	80010001 	.word	0x80010001

08017620 <RangeOffsetCal_Sequence>:
 8017620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017624:	ed2d 8b02 	vpush	{d8}
 8017628:	f2ad 6d5c 	subw	sp, sp, #1628	@ 0x65c
 801762c:	e9cd 1012 	strd	r1, r0, [sp, #72]	@ 0x48
 8017630:	920a      	str	r2, [sp, #40]	@ 0x28
 8017632:	2b00      	cmp	r3, #0
 8017634:	f000 84c6 	beq.w	8017fc4 <RangeOffsetCal_Sequence+0x9a4>
 8017638:	681b      	ldr	r3, [r3, #0]
 801763a:	930d      	str	r3, [sp, #52]	@ 0x34
 801763c:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8017640:	a866      	add	r0, sp, #408	@ 0x198
 8017642:	f013 fd4a 	bl	802b0da <memcpy>
 8017646:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 801764a:	2280      	movs	r2, #128	@ 0x80
 801764c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017650:	2100      	movs	r1, #0
 8017652:	a826      	add	r0, sp, #152	@ 0x98
 8017654:	f88d 32a4 	strb.w	r3, [sp, #676]	@ 0x2a4
 8017658:	f013 fca7 	bl	802afaa <memset>
 801765c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801765e:	339e      	adds	r3, #158	@ 0x9e
 8017660:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017662:	ab26      	add	r3, sp, #152	@ 0x98
 8017664:	930e      	str	r3, [sp, #56]	@ 0x38
 8017666:	2300      	movs	r3, #0
 8017668:	930c      	str	r3, [sp, #48]	@ 0x30
 801766a:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801766c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801766e:	f88d 3297 	strb.w	r3, [sp, #663]	@ 0x297
 8017672:	a966      	add	r1, sp, #408	@ 0x198
 8017674:	4630      	mov	r0, r6
 8017676:	f7ff f977 	bl	8016968 <Argus_Core_SetSettingsSync>
 801767a:	1e02      	subs	r2, r0, #0
 801767c:	9206      	str	r2, [sp, #24]
 801767e:	f2c0 831f 	blt.w	8017cc0 <RangeOffsetCal_Sequence+0x6a0>
 8017682:	f44f 72e4 	mov.w	r2, #456	@ 0x1c8
 8017686:	2100      	movs	r1, #0
 8017688:	a8b0      	add	r0, sp, #704	@ 0x2c0
 801768a:	f013 fc8e 	bl	802afaa <memset>
 801768e:	2240      	movs	r2, #64	@ 0x40
 8017690:	2100      	movs	r1, #0
 8017692:	a816      	add	r0, sp, #88	@ 0x58
 8017694:	f013 fc89 	bl	802afaa <memset>
 8017698:	2280      	movs	r2, #128	@ 0x80
 801769a:	2100      	movs	r1, #0
 801769c:	a846      	add	r0, sp, #280	@ 0x118
 801769e:	f013 fc84 	bl	802afaa <memset>
 80176a2:	f20d 418c 	addw	r1, sp, #1164	@ 0x48c
 80176a6:	f50d 6091 	add.w	r0, sp, #1160	@ 0x488
 80176aa:	f7ef fd75 	bl	8007198 <Timer_GetCounterValue>
 80176ae:	f8dd 148c 	ldr.w	r1, [sp, #1164]	@ 0x48c
 80176b2:	4bb6      	ldr	r3, [pc, #728]	@ (801798c <RangeOffsetCal_Sequence+0x36c>)
 80176b4:	f8dd 4488 	ldr.w	r4, [sp, #1160]	@ 0x488
 80176b8:	9106      	str	r1, [sp, #24]
 80176ba:	4299      	cmp	r1, r3
 80176bc:	f5a1 2374 	sub.w	r3, r1, #999424	@ 0xf4000
 80176c0:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80176c4:	f104 0201 	add.w	r2, r4, #1
 80176c8:	bf8c      	ite	hi
 80176ca:	461d      	movhi	r5, r3
 80176cc:	460d      	movls	r5, r1
 80176ce:	f104 0302 	add.w	r3, r4, #2
 80176d2:	bf98      	it	ls
 80176d4:	4613      	movls	r3, r2
 80176d6:	428d      	cmp	r5, r1
 80176d8:	bf34      	ite	cc
 80176da:	2200      	movcc	r2, #0
 80176dc:	2201      	movcs	r2, #1
 80176de:	42a3      	cmp	r3, r4
 80176e0:	9304      	str	r3, [sp, #16]
 80176e2:	bf8c      	ite	hi
 80176e4:	2301      	movhi	r3, #1
 80176e6:	2300      	movls	r3, #0
 80176e8:	bf18      	it	ne
 80176ea:	461a      	movne	r2, r3
 80176ec:	9203      	str	r2, [sp, #12]
 80176ee:	f206 72cc 	addw	r2, r6, #1996	@ 0x7cc
 80176f2:	ee08 2a10 	vmov	s16, r2
 80176f6:	f606 337c 	addw	r3, r6, #2940	@ 0xb7c
 80176fa:	2208      	movs	r2, #8
 80176fc:	ee18 0a10 	vmov	r0, s16
 8017700:	a9b0      	add	r1, sp, #704	@ 0x2c0
 8017702:	ee08 3a90 	vmov	s17, r3
 8017706:	9401      	str	r4, [sp, #4]
 8017708:	9505      	str	r5, [sp, #20]
 801770a:	9200      	str	r2, [sp, #0]
 801770c:	f001 f9f8 	bl	8018b00 <Argus_Measurement_TriggerSync>
 8017710:	2800      	cmp	r0, #0
 8017712:	ae6a      	add	r6, sp, #424	@ 0x1a8
 8017714:	f2c0 82d3 	blt.w	8017cbe <RangeOffsetCal_Sequence+0x69e>
 8017718:	2300      	movs	r3, #0
 801771a:	f50d 6291 	add.w	r2, sp, #1160	@ 0x488
 801771e:	ee18 0a90 	vmov	r0, s17
 8017722:	a9b0      	add	r1, sp, #704	@ 0x2c0
 8017724:	f003 f93e 	bl	801a9a4 <Argus_Eval_Apply>
 8017728:	f10d 0b58 	add.w	fp, sp, #88	@ 0x58
 801772c:	ab4a      	add	r3, sp, #296	@ 0x128
 801772e:	aa46      	add	r2, sp, #280	@ 0x118
 8017730:	9302      	str	r3, [sp, #8]
 8017732:	9208      	str	r2, [sp, #32]
 8017734:	f50d 6991 	add.w	r9, sp, #1160	@ 0x488
 8017738:	46d8      	mov	r8, fp
 801773a:	469e      	mov	lr, r3
 801773c:	f1ae 0010 	sub.w	r0, lr, #16
 8017740:	4645      	mov	r5, r8
 8017742:	464c      	mov	r4, r9
 8017744:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8017748:	bb23      	cbnz	r3, 8017794 <RangeOffsetCal_Sequence+0x174>
 801774a:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 801774e:	882b      	ldrh	r3, [r5, #0]
 8017750:	ea8c 71ec 	eor.w	r1, ip, ip, asr #31
 8017754:	eba1 71ec 	sub.w	r1, r1, ip, asr #31
 8017758:	3301      	adds	r3, #1
 801775a:	f5b1 2f00 	cmp.w	r1, #524288	@ 0x80000
 801775e:	802b      	strh	r3, [r5, #0]
 8017760:	f240 8284 	bls.w	8017c6c <RangeOffsetCal_Sequence+0x64c>
 8017764:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8017768:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 801776c:	4692      	mov	sl, r2
 801776e:	0052      	lsls	r2, r2, #1
 8017770:	428a      	cmp	r2, r1
 8017772:	461f      	mov	r7, r3
 8017774:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8017778:	d3f8      	bcc.n	801776c <RangeOffsetCal_Sequence+0x14c>
 801777a:	2b00      	cmp	r3, #0
 801777c:	f040 8255 	bne.w	8017c2a <RangeOffsetCal_Sequence+0x60a>
 8017780:	f1bc 0f00 	cmp.w	ip, #0
 8017784:	bfac      	ite	ge
 8017786:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801778a:	f04f 4700 	movlt.w	r7, #2147483648	@ 0x80000000
 801778e:	6801      	ldr	r1, [r0, #0]
 8017790:	4439      	add	r1, r7
 8017792:	6001      	str	r1, [r0, #0]
 8017794:	3004      	adds	r0, #4
 8017796:	4586      	cmp	lr, r0
 8017798:	f104 040c 	add.w	r4, r4, #12
 801779c:	f105 0502 	add.w	r5, r5, #2
 80177a0:	d1d0      	bne.n	8017744 <RangeOffsetCal_Sequence+0x124>
 80177a2:	f10e 0e10 	add.w	lr, lr, #16
 80177a6:	45b6      	cmp	lr, r6
 80177a8:	f109 0930 	add.w	r9, r9, #48	@ 0x30
 80177ac:	f108 0808 	add.w	r8, r8, #8
 80177b0:	d1c4      	bne.n	801773c <RangeOffsetCal_Sequence+0x11c>
 80177b2:	a915      	add	r1, sp, #84	@ 0x54
 80177b4:	a814      	add	r0, sp, #80	@ 0x50
 80177b6:	f7ef fcef 	bl	8007198 <Timer_GetCounterValue>
 80177ba:	9a03      	ldr	r2, [sp, #12]
 80177bc:	e9dd 1314 	ldrd	r1, r3, [sp, #80]	@ 0x50
 80177c0:	2a00      	cmp	r2, #0
 80177c2:	f000 825d 	beq.w	8017c80 <RangeOffsetCal_Sequence+0x660>
 80177c6:	9a01      	ldr	r2, [sp, #4]
 80177c8:	4291      	cmp	r1, r2
 80177ca:	f000 82af 	beq.w	8017d2c <RangeOffsetCal_Sequence+0x70c>
 80177ce:	bf8c      	ite	hi
 80177d0:	2201      	movhi	r2, #1
 80177d2:	2200      	movls	r2, #0
 80177d4:	2a00      	cmp	r2, #0
 80177d6:	f040 825a 	bne.w	8017c8e <RangeOffsetCal_Sequence+0x66e>
 80177da:	9f02      	ldr	r7, [sp, #8]
 80177dc:	f1a7 0010 	sub.w	r0, r7, #16
 80177e0:	465c      	mov	r4, fp
 80177e2:	f834 3b02 	ldrh.w	r3, [r4], #2
 80177e6:	f023 0208 	bic.w	r2, r3, #8
 80177ea:	b322      	cbz	r2, 8017836 <RangeOffsetCal_Sequence+0x216>
 80177ec:	041d      	lsls	r5, r3, #16
 80177ee:	f100 8291 	bmi.w	8017d14 <RangeOffsetCal_Sequence+0x6f4>
 80177f2:	f5b5 2f00 	cmp.w	r5, #524288	@ 0x80000
 80177f6:	462a      	mov	r2, r5
 80177f8:	f280 826b 	bge.w	8017cd2 <RangeOffsetCal_Sequence+0x6b2>
 80177fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8017800:	0052      	lsls	r2, r2, #1
 8017802:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 8017806:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801780a:	d3f9      	bcc.n	8017800 <RangeOffsetCal_Sequence+0x1e0>
 801780c:	2b00      	cmp	r3, #0
 801780e:	f040 8262 	bne.w	8017cd6 <RangeOffsetCal_Sequence+0x6b6>
 8017812:	2d00      	cmp	r5, #0
 8017814:	6803      	ldr	r3, [r0, #0]
 8017816:	f2c0 8441 	blt.w	801809c <RangeOffsetCal_Sequence+0xa7c>
 801781a:	2b00      	cmp	r3, #0
 801781c:	f2c0 8298 	blt.w	8017d50 <RangeOffsetCal_Sequence+0x730>
 8017820:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8017824:	fba3 3c0c 	umull	r3, ip, r3, ip
 8017828:	0c1a      	lsrs	r2, r3, #16
 801782a:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 801782e:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8017832:	4413      	add	r3, r2
 8017834:	6003      	str	r3, [r0, #0]
 8017836:	3004      	adds	r0, #4
 8017838:	4287      	cmp	r7, r0
 801783a:	d1d2      	bne.n	80177e2 <RangeOffsetCal_Sequence+0x1c2>
 801783c:	3710      	adds	r7, #16
 801783e:	42b7      	cmp	r7, r6
 8017840:	f10b 0b08 	add.w	fp, fp, #8
 8017844:	d1ca      	bne.n	80177dc <RangeOffsetCal_Sequence+0x1bc>
 8017846:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017848:	4951      	ldr	r1, [pc, #324]	@ (8017990 <RangeOffsetCal_Sequence+0x370>)
 801784a:	f8b3 22ba 	ldrh.w	r2, [r3, #698]	@ 0x2ba
 801784e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8017850:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017854:	6840      	ldr	r0, [r0, #4]
 8017856:	fb02 f303 	mul.w	r3, r2, r3
 801785a:	fbb3 f3f0 	udiv	r3, r3, r0
 801785e:	428b      	cmp	r3, r1
 8017860:	f240 82ac 	bls.w	8017dbc <RangeOffsetCal_Sequence+0x79c>
 8017864:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8017868:	4d4a      	ldr	r5, [pc, #296]	@ (8017994 <RangeOffsetCal_Sequence+0x374>)
 801786a:	9301      	str	r3, [sp, #4]
 801786c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017870:	9500      	str	r5, [sp, #0]
 8017872:	9305      	str	r3, [sp, #20]
 8017874:	4b48      	ldr	r3, [pc, #288]	@ (8017998 <RangeOffsetCal_Sequence+0x378>)
 8017876:	fba2 3203 	umull	r3, r2, r2, r3
 801787a:	0c1c      	lsrs	r4, r3, #16
 801787c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8017880:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8017884:	f44f 72e4 	mov.w	r2, #456	@ 0x1c8
 8017888:	2100      	movs	r1, #0
 801788a:	a8b0      	add	r0, sp, #704	@ 0x2c0
 801788c:	441c      	add	r4, r3
 801788e:	f013 fb8c 	bl	802afaa <memset>
 8017892:	2240      	movs	r2, #64	@ 0x40
 8017894:	2100      	movs	r1, #0
 8017896:	a816      	add	r0, sp, #88	@ 0x58
 8017898:	f013 fb87 	bl	802afaa <memset>
 801789c:	2280      	movs	r2, #128	@ 0x80
 801789e:	2100      	movs	r1, #0
 80178a0:	a846      	add	r0, sp, #280	@ 0x118
 80178a2:	f013 fb82 	bl	802afaa <memset>
 80178a6:	f20d 418c 	addw	r1, sp, #1164	@ 0x48c
 80178aa:	f50d 6091 	add.w	r0, sp, #1160	@ 0x488
 80178ae:	f7ef fc73 	bl	8007198 <Timer_GetCounterValue>
 80178b2:	4b3a      	ldr	r3, [pc, #232]	@ (801799c <RangeOffsetCal_Sequence+0x37c>)
 80178b4:	f8dd 048c 	ldr.w	r0, [sp, #1164]	@ 0x48c
 80178b8:	9011      	str	r0, [sp, #68]	@ 0x44
 80178ba:	fba3 3204 	umull	r3, r2, r3, r4
 80178be:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80178c2:	0993      	lsrs	r3, r2, #6
 80178c4:	fb01 4313 	mls	r3, r1, r3, r4
 80178c8:	fb01 0303 	mla	r3, r1, r3, r0
 80178cc:	4604      	mov	r4, r0
 80178ce:	e9dd 0700 	ldrd	r0, r7, [sp]
 80178d2:	f8dd 1488 	ldr.w	r1, [sp, #1160]	@ 0x488
 80178d6:	f8df c0b4 	ldr.w	ip, [pc, #180]	@ 801798c <RangeOffsetCal_Sequence+0x36c>
 80178da:	9107      	str	r1, [sp, #28]
 80178dc:	eb01 1292 	add.w	r2, r1, r2, lsr #6
 80178e0:	ea17 0725 	ands.w	r7, r7, r5, asr #32
 80178e4:	bf38      	it	cc
 80178e6:	4607      	movcc	r7, r0
 80178e8:	f5a3 2174 	sub.w	r1, r3, #999424	@ 0xf4000
 80178ec:	4563      	cmp	r3, ip
 80178ee:	bf98      	it	ls
 80178f0:	4618      	movls	r0, r3
 80178f2:	f5a1 7110 	sub.w	r1, r1, #576	@ 0x240
 80178f6:	f102 0301 	add.w	r3, r2, #1
 80178fa:	bf84      	itt	hi
 80178fc:	461a      	movhi	r2, r3
 80178fe:	4608      	movhi	r0, r1
 8017900:	9b07      	ldr	r3, [sp, #28]
 8017902:	920b      	str	r2, [sp, #44]	@ 0x2c
 8017904:	4611      	mov	r1, r2
 8017906:	42a0      	cmp	r0, r4
 8017908:	bf34      	ite	cc
 801790a:	2200      	movcc	r2, #0
 801790c:	2201      	movcs	r2, #1
 801790e:	428b      	cmp	r3, r1
 8017910:	bf34      	ite	cc
 8017912:	2301      	movcc	r3, #1
 8017914:	2300      	movcs	r3, #0
 8017916:	bf08      	it	eq
 8017918:	4613      	moveq	r3, r2
 801791a:	9309      	str	r3, [sp, #36]	@ 0x24
 801791c:	2300      	movs	r3, #0
 801791e:	9010      	str	r0, [sp, #64]	@ 0x40
 8017920:	9304      	str	r3, [sp, #16]
 8017922:	ee18 0a10 	vmov	r0, s16
 8017926:	a9b0      	add	r1, sp, #704	@ 0x2c0
 8017928:	f001 f8ea 	bl	8018b00 <Argus_Measurement_TriggerSync>
 801792c:	1e03      	subs	r3, r0, #0
 801792e:	9306      	str	r3, [sp, #24]
 8017930:	f2c0 81c6 	blt.w	8017cc0 <RangeOffsetCal_Sequence+0x6a0>
 8017934:	2300      	movs	r3, #0
 8017936:	ee18 0a90 	vmov	r0, s17
 801793a:	f50d 6291 	add.w	r2, sp, #1160	@ 0x488
 801793e:	a9b0      	add	r1, sp, #704	@ 0x2c0
 8017940:	f003 f830 	bl	801a9a4 <Argus_Eval_Apply>
 8017944:	ab16      	add	r3, sp, #88	@ 0x58
 8017946:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801794a:	9303      	str	r3, [sp, #12]
 801794c:	f50d 6a91 	add.w	sl, sp, #1160	@ 0x488
 8017950:	4699      	mov	r9, r3
 8017952:	f1a8 0010 	sub.w	r0, r8, #16
 8017956:	46cc      	mov	ip, r9
 8017958:	4654      	mov	r4, sl
 801795a:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 801795e:	bba3      	cbnz	r3, 80179ca <RangeOffsetCal_Sequence+0x3aa>
 8017960:	f8bc 3000 	ldrh.w	r3, [ip]
 8017964:	f8d4 b028 	ldr.w	fp, [r4, #40]	@ 0x28
 8017968:	3301      	adds	r3, #1
 801796a:	f8ac 3000 	strh.w	r3, [ip]
 801796e:	2d00      	cmp	r5, #0
 8017970:	f000 822f 	beq.w	8017dd2 <RangeOffsetCal_Sequence+0x7b2>
 8017974:	ea8b 71eb 	eor.w	r1, fp, fp, asr #31
 8017978:	2d00      	cmp	r5, #0
 801797a:	eba1 71eb 	sub.w	r1, r1, fp, asr #31
 801797e:	f2c0 8230 	blt.w	8017de2 <RangeOffsetCal_Sequence+0x7c2>
 8017982:	9b00      	ldr	r3, [sp, #0]
 8017984:	4299      	cmp	r1, r3
 8017986:	f240 8265 	bls.w	8017e54 <RangeOffsetCal_Sequence+0x834>
 801798a:	e009      	b.n	80179a0 <RangeOffsetCal_Sequence+0x380>
 801798c:	000f423f 	.word	0x000f423f
 8017990:	0001fffd 	.word	0x0001fffd
 8017994:	ffff0000 	.word	0xffff0000
 8017998:	0001199a 	.word	0x0001199a
 801799c:	10624dd3 	.word	0x10624dd3
 80179a0:	463a      	mov	r2, r7
 80179a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80179a6:	0052      	lsls	r2, r2, #1
 80179a8:	428a      	cmp	r2, r1
 80179aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80179ae:	d3fa      	bcc.n	80179a6 <RangeOffsetCal_Sequence+0x386>
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	f040 821d 	bne.w	8017df0 <RangeOffsetCal_Sequence+0x7d0>
 80179b6:	ea9b 0f05 	teq	fp, r5
 80179ba:	bf54      	ite	pl
 80179bc:	f06f 4e00 	mvnpl.w	lr, #2147483648	@ 0x80000000
 80179c0:	f04f 4e00 	movmi.w	lr, #2147483648	@ 0x80000000
 80179c4:	6801      	ldr	r1, [r0, #0]
 80179c6:	4471      	add	r1, lr
 80179c8:	6001      	str	r1, [r0, #0]
 80179ca:	3004      	adds	r0, #4
 80179cc:	4580      	cmp	r8, r0
 80179ce:	f104 040c 	add.w	r4, r4, #12
 80179d2:	f10c 0c02 	add.w	ip, ip, #2
 80179d6:	d1c0      	bne.n	801795a <RangeOffsetCal_Sequence+0x33a>
 80179d8:	f108 0810 	add.w	r8, r8, #16
 80179dc:	45b0      	cmp	r8, r6
 80179de:	f10a 0a30 	add.w	sl, sl, #48	@ 0x30
 80179e2:	f109 0908 	add.w	r9, r9, #8
 80179e6:	d1b4      	bne.n	8017952 <RangeOffsetCal_Sequence+0x332>
 80179e8:	a915      	add	r1, sp, #84	@ 0x54
 80179ea:	a814      	add	r0, sp, #80	@ 0x50
 80179ec:	f7ef fbd4 	bl	8007198 <Timer_GetCounterValue>
 80179f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80179f2:	e9dd 1314 	ldrd	r1, r3, [sp, #80]	@ 0x50
 80179f6:	2a00      	cmp	r2, #0
 80179f8:	f000 8232 	beq.w	8017e60 <RangeOffsetCal_Sequence+0x840>
 80179fc:	9a07      	ldr	r2, [sp, #28]
 80179fe:	428a      	cmp	r2, r1
 8017a00:	f000 8265 	beq.w	8017ece <RangeOffsetCal_Sequence+0x8ae>
 8017a04:	bf34      	ite	cc
 8017a06:	2201      	movcc	r2, #1
 8017a08:	2200      	movcs	r2, #0
 8017a0a:	b182      	cbz	r2, 8017a2e <RangeOffsetCal_Sequence+0x40e>
 8017a0c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8017a0e:	428a      	cmp	r2, r1
 8017a10:	f000 822f 	beq.w	8017e72 <RangeOffsetCal_Sequence+0x852>
 8017a14:	bf34      	ite	cc
 8017a16:	2301      	movcc	r3, #1
 8017a18:	2300      	movcs	r3, #0
 8017a1a:	f083 0301 	eor.w	r3, r3, #1
 8017a1e:	b133      	cbz	r3, 8017a2e <RangeOffsetCal_Sequence+0x40e>
 8017a20:	9b04      	ldr	r3, [sp, #16]
 8017a22:	9a05      	ldr	r2, [sp, #20]
 8017a24:	3301      	adds	r3, #1
 8017a26:	429a      	cmp	r2, r3
 8017a28:	9304      	str	r3, [sp, #16]
 8017a2a:	f47f af7a 	bne.w	8017922 <RangeOffsetCal_Sequence+0x302>
 8017a2e:	9b02      	ldr	r3, [sp, #8]
 8017a30:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8017a34:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8017a38:	f1a3 0410 	sub.w	r4, r3, #16
 8017a3c:	469e      	mov	lr, r3
 8017a3e:	f83c 0b02 	ldrh.w	r0, [ip], #2
 8017a42:	b328      	cbz	r0, 8017a90 <RangeOffsetCal_Sequence+0x470>
 8017a44:	4580      	cmp	r8, r0
 8017a46:	d023      	beq.n	8017a90 <RangeOffsetCal_Sequence+0x470>
 8017a48:	0400      	lsls	r0, r0, #16
 8017a4a:	f100 8218 	bmi.w	8017e7e <RangeOffsetCal_Sequence+0x85e>
 8017a4e:	42b8      	cmp	r0, r7
 8017a50:	4602      	mov	r2, r0
 8017a52:	f080 82b4 	bcs.w	8017fbe <RangeOffsetCal_Sequence+0x99e>
 8017a56:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8017a5a:	0052      	lsls	r2, r2, #1
 8017a5c:	42ba      	cmp	r2, r7
 8017a5e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8017a62:	d3fa      	bcc.n	8017a5a <RangeOffsetCal_Sequence+0x43a>
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	f040 8211 	bne.w	8017e8c <RangeOffsetCal_Sequence+0x86c>
 8017a6a:	ea90 0f05 	teq	r0, r5
 8017a6e:	6823      	ldr	r3, [r4, #0]
 8017a70:	f100 830f 	bmi.w	8018092 <RangeOffsetCal_Sequence+0xa72>
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	f2c0 8235 	blt.w	8017ee4 <RangeOffsetCal_Sequence+0x8c4>
 8017a7a:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 8017a7e:	fba3 3909 	umull	r3, r9, r3, r9
 8017a82:	0c1a      	lsrs	r2, r3, #16
 8017a84:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8017a88:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8017a8c:	4413      	add	r3, r2
 8017a8e:	6023      	str	r3, [r4, #0]
 8017a90:	3404      	adds	r4, #4
 8017a92:	45a6      	cmp	lr, r4
 8017a94:	d1d3      	bne.n	8017a3e <RangeOffsetCal_Sequence+0x41e>
 8017a96:	9b02      	ldr	r3, [sp, #8]
 8017a98:	9a03      	ldr	r2, [sp, #12]
 8017a9a:	3310      	adds	r3, #16
 8017a9c:	3208      	adds	r2, #8
 8017a9e:	42b3      	cmp	r3, r6
 8017aa0:	9302      	str	r3, [sp, #8]
 8017aa2:	9203      	str	r2, [sp, #12]
 8017aa4:	d1c3      	bne.n	8017a2e <RangeOffsetCal_Sequence+0x40e>
 8017aa6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017aa8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017aaa:	2100      	movs	r1, #0
 8017aac:	eb03 1082 	add.w	r0, r3, r2, lsl #6
 8017ab0:	ad66      	add	r5, sp, #408	@ 0x198
 8017ab2:	ab46      	add	r3, sp, #280	@ 0x118
 8017ab4:	460a      	mov	r2, r1
 8017ab6:	681c      	ldr	r4, [r3, #0]
 8017ab8:	1c56      	adds	r6, r2, #1
 8017aba:	b13c      	cbz	r4, 8017acc <RangeOffsetCal_Sequence+0x4ac>
 8017abc:	f9b0 701c 	ldrsh.w	r7, [r0, #28]
 8017ac0:	eb04 14c7 	add.w	r4, r4, r7, lsl #7
 8017ac4:	b2f2      	uxtb	r2, r6
 8017ac6:	601c      	str	r4, [r3, #0]
 8017ac8:	eb01 1164 	add.w	r1, r1, r4, asr #5
 8017acc:	685c      	ldr	r4, [r3, #4]
 8017ace:	1c56      	adds	r6, r2, #1
 8017ad0:	b13c      	cbz	r4, 8017ae2 <RangeOffsetCal_Sequence+0x4c2>
 8017ad2:	f9b0 701e 	ldrsh.w	r7, [r0, #30]
 8017ad6:	eb04 14c7 	add.w	r4, r4, r7, lsl #7
 8017ada:	b2f2      	uxtb	r2, r6
 8017adc:	605c      	str	r4, [r3, #4]
 8017ade:	eb01 1164 	add.w	r1, r1, r4, asr #5
 8017ae2:	689c      	ldr	r4, [r3, #8]
 8017ae4:	1c56      	adds	r6, r2, #1
 8017ae6:	b13c      	cbz	r4, 8017af8 <RangeOffsetCal_Sequence+0x4d8>
 8017ae8:	f9b0 7020 	ldrsh.w	r7, [r0, #32]
 8017aec:	eb04 14c7 	add.w	r4, r4, r7, lsl #7
 8017af0:	b2f2      	uxtb	r2, r6
 8017af2:	609c      	str	r4, [r3, #8]
 8017af4:	eb01 1164 	add.w	r1, r1, r4, asr #5
 8017af8:	68dc      	ldr	r4, [r3, #12]
 8017afa:	1c56      	adds	r6, r2, #1
 8017afc:	b13c      	cbz	r4, 8017b0e <RangeOffsetCal_Sequence+0x4ee>
 8017afe:	f9b0 7022 	ldrsh.w	r7, [r0, #34]	@ 0x22
 8017b02:	eb04 14c7 	add.w	r4, r4, r7, lsl #7
 8017b06:	b2f2      	uxtb	r2, r6
 8017b08:	60dc      	str	r4, [r3, #12]
 8017b0a:	eb01 1164 	add.w	r1, r1, r4, asr #5
 8017b0e:	3310      	adds	r3, #16
 8017b10:	429d      	cmp	r5, r3
 8017b12:	f100 0008 	add.w	r0, r0, #8
 8017b16:	d1ce      	bne.n	8017ab6 <RangeOffsetCal_Sequence+0x496>
 8017b18:	2a00      	cmp	r2, #0
 8017b1a:	f000 82ca 	beq.w	80180b2 <RangeOffsetCal_Sequence+0xa92>
 8017b1e:	2a01      	cmp	r2, #1
 8017b20:	f000 8255 	beq.w	8017fce <RangeOffsetCal_Sequence+0x9ae>
 8017b24:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 8017b28:	02d2      	lsls	r2, r2, #11
 8017b2a:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 8017b2e:	42a2      	cmp	r2, r4
 8017b30:	4610      	mov	r0, r2
 8017b32:	bf38      	it	cc
 8017b34:	f44f 3380 	movcc.w	r3, #65536	@ 0x10000
 8017b38:	f080 82a0 	bcs.w	801807c <RangeOffsetCal_Sequence+0xa5c>
 8017b3c:	4607      	mov	r7, r0
 8017b3e:	0040      	lsls	r0, r0, #1
 8017b40:	42a0      	cmp	r0, r4
 8017b42:	461e      	mov	r6, r3
 8017b44:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8017b48:	d3f8      	bcc.n	8017b3c <RangeOffsetCal_Sequence+0x51c>
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	f040 824b 	bne.w	8017fe6 <RangeOffsetCal_Sequence+0x9c6>
 8017b50:	ea91 0f02 	teq	r1, r2
 8017b54:	bf54      	ite	pl
 8017b56:	f06f 4600 	mvnpl.w	r6, #2147483648	@ 0x80000000
 8017b5a:	f04f 4600 	movmi.w	r6, #2147483648	@ 0x80000000
 8017b5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017b60:	9a08      	ldr	r2, [sp, #32]
 8017b62:	6811      	ldr	r1, [r2, #0]
 8017b64:	b169      	cbz	r1, 8017b82 <RangeOffsetCal_Sequence+0x562>
 8017b66:	1b88      	subs	r0, r1, r6
 8017b68:	f500 0480 	add.w	r4, r0, #4194304	@ 0x400000
 8017b6c:	f5b4 0f00 	cmp.w	r4, #8388608	@ 0x800000
 8017b70:	f080 8218 	bcs.w	8017fa4 <RangeOffsetCal_Sequence+0x984>
 8017b74:	2800      	cmp	r0, #0
 8017b76:	f2c0 81cb 	blt.w	8017f10 <RangeOffsetCal_Sequence+0x8f0>
 8017b7a:	f3c0 1180 	ubfx	r1, r0, #6, #1
 8017b7e:	eb01 11d0 	add.w	r1, r1, r0, lsr #7
 8017b82:	8019      	strh	r1, [r3, #0]
 8017b84:	6851      	ldr	r1, [r2, #4]
 8017b86:	b169      	cbz	r1, 8017ba4 <RangeOffsetCal_Sequence+0x584>
 8017b88:	1b88      	subs	r0, r1, r6
 8017b8a:	f500 0480 	add.w	r4, r0, #4194304	@ 0x400000
 8017b8e:	f5b4 0f00 	cmp.w	r4, #8388608	@ 0x800000
 8017b92:	f080 8207 	bcs.w	8017fa4 <RangeOffsetCal_Sequence+0x984>
 8017b96:	2800      	cmp	r0, #0
 8017b98:	f2c0 81c1 	blt.w	8017f1e <RangeOffsetCal_Sequence+0x8fe>
 8017b9c:	f3c0 1180 	ubfx	r1, r0, #6, #1
 8017ba0:	eb01 11d0 	add.w	r1, r1, r0, lsr #7
 8017ba4:	8059      	strh	r1, [r3, #2]
 8017ba6:	6891      	ldr	r1, [r2, #8]
 8017ba8:	b169      	cbz	r1, 8017bc6 <RangeOffsetCal_Sequence+0x5a6>
 8017baa:	1b88      	subs	r0, r1, r6
 8017bac:	f500 0480 	add.w	r4, r0, #4194304	@ 0x400000
 8017bb0:	f5b4 0f00 	cmp.w	r4, #8388608	@ 0x800000
 8017bb4:	f080 81f6 	bcs.w	8017fa4 <RangeOffsetCal_Sequence+0x984>
 8017bb8:	2800      	cmp	r0, #0
 8017bba:	f2c0 81b7 	blt.w	8017f2c <RangeOffsetCal_Sequence+0x90c>
 8017bbe:	f3c0 1180 	ubfx	r1, r0, #6, #1
 8017bc2:	eb01 11d0 	add.w	r1, r1, r0, lsr #7
 8017bc6:	8099      	strh	r1, [r3, #4]
 8017bc8:	68d1      	ldr	r1, [r2, #12]
 8017bca:	b169      	cbz	r1, 8017be8 <RangeOffsetCal_Sequence+0x5c8>
 8017bcc:	1b88      	subs	r0, r1, r6
 8017bce:	f500 0480 	add.w	r4, r0, #4194304	@ 0x400000
 8017bd2:	f5b4 0f00 	cmp.w	r4, #8388608	@ 0x800000
 8017bd6:	f080 81e5 	bcs.w	8017fa4 <RangeOffsetCal_Sequence+0x984>
 8017bda:	2800      	cmp	r0, #0
 8017bdc:	f2c0 81ad 	blt.w	8017f3a <RangeOffsetCal_Sequence+0x91a>
 8017be0:	f3c0 1180 	ubfx	r1, r0, #6, #1
 8017be4:	eb01 11d0 	add.w	r1, r1, r0, lsr #7
 8017be8:	3210      	adds	r2, #16
 8017bea:	42aa      	cmp	r2, r5
 8017bec:	80d9      	strh	r1, [r3, #6]
 8017bee:	f103 0308 	add.w	r3, r3, #8
 8017bf2:	d1b6      	bne.n	8017b62 <RangeOffsetCal_Sequence+0x542>
 8017bf4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017bf6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8017bfa:	f000 823b 	beq.w	8018074 <RangeOffsetCal_Sequence+0xa54>
 8017bfe:	1af2      	subs	r2, r6, r3
 8017c00:	f100 8231 	bmi.w	8018066 <RangeOffsetCal_Sequence+0xa46>
 8017c04:	f3c2 1380 	ubfx	r3, r2, #6, #1
 8017c08:	eb03 12d2 	add.w	r2, r3, r2, lsr #7
 8017c0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017c0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017c12:	4413      	add	r3, r2
 8017c14:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8017c18:	4293      	cmp	r3, r2
 8017c1a:	f300 8203 	bgt.w	8018024 <RangeOffsetCal_Sequence+0xa04>
 8017c1e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8017c22:	f340 821e 	ble.w	8018062 <RangeOffsetCal_Sequence+0xa42>
 8017c26:	b21b      	sxth	r3, r3
 8017c28:	e1fe      	b.n	8018028 <RangeOffsetCal_Sequence+0xa08>
 8017c2a:	2a00      	cmp	r2, #0
 8017c2c:	da06      	bge.n	8017c3c <RangeOffsetCal_Sequence+0x61c>
 8017c2e:	428a      	cmp	r2, r1
 8017c30:	d024      	beq.n	8017c7c <RangeOffsetCal_Sequence+0x65c>
 8017c32:	f037 4300 	bics.w	r3, r7, #2147483648	@ 0x80000000
 8017c36:	f02a 4200 	bic.w	r2, sl, #2147483648	@ 0x80000000
 8017c3a:	d048      	beq.n	8017cce <RangeOffsetCal_Sequence+0x6ae>
 8017c3c:	2700      	movs	r7, #0
 8017c3e:	e000      	b.n	8017c42 <RangeOffsetCal_Sequence+0x622>
 8017c40:	b151      	cbz	r1, 8017c58 <RangeOffsetCal_Sequence+0x638>
 8017c42:	4291      	cmp	r1, r2
 8017c44:	bf24      	itt	cs
 8017c46:	1a89      	subcs	r1, r1, r2
 8017c48:	431f      	orrcs	r7, r3
 8017c4a:	085b      	lsrs	r3, r3, #1
 8017c4c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8017c50:	d1f6      	bne.n	8017c40 <RangeOffsetCal_Sequence+0x620>
 8017c52:	4291      	cmp	r1, r2
 8017c54:	d300      	bcc.n	8017c58 <RangeOffsetCal_Sequence+0x638>
 8017c56:	3701      	adds	r7, #1
 8017c58:	f1bc 0f00 	cmp.w	ip, #0
 8017c5c:	db04      	blt.n	8017c68 <RangeOffsetCal_Sequence+0x648>
 8017c5e:	2f00      	cmp	r7, #0
 8017c60:	bfb8      	it	lt
 8017c62:	f06f 4700 	mvnlt.w	r7, #2147483648	@ 0x80000000
 8017c66:	e592      	b.n	801778e <RangeOffsetCal_Sequence+0x16e>
 8017c68:	427f      	negs	r7, r7
 8017c6a:	e590      	b.n	801778e <RangeOffsetCal_Sequence+0x16e>
 8017c6c:	2900      	cmp	r1, #0
 8017c6e:	f000 8194 	beq.w	8017f9a <RangeOffsetCal_Sequence+0x97a>
 8017c72:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8017c76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8017c7a:	e7df      	b.n	8017c3c <RangeOffsetCal_Sequence+0x61c>
 8017c7c:	461f      	mov	r7, r3
 8017c7e:	e7eb      	b.n	8017c58 <RangeOffsetCal_Sequence+0x638>
 8017c80:	9a01      	ldr	r2, [sp, #4]
 8017c82:	4291      	cmp	r1, r2
 8017c84:	d05e      	beq.n	8017d44 <RangeOffsetCal_Sequence+0x724>
 8017c86:	bf8c      	ite	hi
 8017c88:	2201      	movhi	r2, #1
 8017c8a:	2200      	movls	r2, #0
 8017c8c:	b952      	cbnz	r2, 8017ca4 <RangeOffsetCal_Sequence+0x684>
 8017c8e:	9a04      	ldr	r2, [sp, #16]
 8017c90:	428a      	cmp	r2, r1
 8017c92:	d051      	beq.n	8017d38 <RangeOffsetCal_Sequence+0x718>
 8017c94:	bf34      	ite	cc
 8017c96:	2301      	movcc	r3, #1
 8017c98:	2300      	movcs	r3, #0
 8017c9a:	f083 0301 	eor.w	r3, r3, #1
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	f43f ad9b 	beq.w	80177da <RangeOffsetCal_Sequence+0x1ba>
 8017ca4:	9b00      	ldr	r3, [sp, #0]
 8017ca6:	3b01      	subs	r3, #1
 8017ca8:	9300      	str	r3, [sp, #0]
 8017caa:	f43f ad96 	beq.w	80177da <RangeOffsetCal_Sequence+0x1ba>
 8017cae:	ee18 0a10 	vmov	r0, s16
 8017cb2:	a9b0      	add	r1, sp, #704	@ 0x2c0
 8017cb4:	f000 ff24 	bl	8018b00 <Argus_Measurement_TriggerSync>
 8017cb8:	2800      	cmp	r0, #0
 8017cba:	f6bf ad2d 	bge.w	8017718 <RangeOffsetCal_Sequence+0xf8>
 8017cbe:	9006      	str	r0, [sp, #24]
 8017cc0:	9806      	ldr	r0, [sp, #24]
 8017cc2:	f20d 6d5c 	addw	sp, sp, #1628	@ 0x65c
 8017cc6:	ecbd 8b02 	vpop	{d8}
 8017cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cce:	461f      	mov	r7, r3
 8017cd0:	e7bf      	b.n	8017c52 <RangeOffsetCal_Sequence+0x632>
 8017cd2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8017cd6:	f04f 0c00 	mov.w	ip, #0
 8017cda:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8017cde:	e000      	b.n	8017ce2 <RangeOffsetCal_Sequence+0x6c2>
 8017ce0:	b161      	cbz	r1, 8017cfc <RangeOffsetCal_Sequence+0x6dc>
 8017ce2:	428a      	cmp	r2, r1
 8017ce4:	bf9c      	itt	ls
 8017ce6:	1a89      	subls	r1, r1, r2
 8017ce8:	ea4c 0c03 	orrls.w	ip, ip, r3
 8017cec:	085b      	lsrs	r3, r3, #1
 8017cee:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8017cf2:	d1f5      	bne.n	8017ce0 <RangeOffsetCal_Sequence+0x6c0>
 8017cf4:	4291      	cmp	r1, r2
 8017cf6:	bf28      	it	cs
 8017cf8:	f10c 0c01 	addcs.w	ip, ip, #1
 8017cfc:	2d00      	cmp	r5, #0
 8017cfe:	db34      	blt.n	8017d6a <RangeOffsetCal_Sequence+0x74a>
 8017d00:	f1bc 0f00 	cmp.w	ip, #0
 8017d04:	6803      	ldr	r3, [r0, #0]
 8017d06:	f6ff ad88 	blt.w	801781a <RangeOffsetCal_Sequence+0x1fa>
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	f6bf ad8a 	bge.w	8017824 <RangeOffsetCal_Sequence+0x204>
 8017d10:	425b      	negs	r3, r3
 8017d12:	e020      	b.n	8017d56 <RangeOffsetCal_Sequence+0x736>
 8017d14:	426a      	negs	r2, r5
 8017d16:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 8017d1a:	f4ff ad6f 	bcc.w	80177fc <RangeOffsetCal_Sequence+0x1dc>
 8017d1e:	2a00      	cmp	r2, #0
 8017d20:	dad7      	bge.n	8017cd2 <RangeOffsetCal_Sequence+0x6b2>
 8017d22:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8017d26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017d2a:	e7d4      	b.n	8017cd6 <RangeOffsetCal_Sequence+0x6b6>
 8017d2c:	9a06      	ldr	r2, [sp, #24]
 8017d2e:	4293      	cmp	r3, r2
 8017d30:	bf34      	ite	cc
 8017d32:	2200      	movcc	r2, #0
 8017d34:	2201      	movcs	r2, #1
 8017d36:	e54d      	b.n	80177d4 <RangeOffsetCal_Sequence+0x1b4>
 8017d38:	9a05      	ldr	r2, [sp, #20]
 8017d3a:	429a      	cmp	r2, r3
 8017d3c:	bf8c      	ite	hi
 8017d3e:	2300      	movhi	r3, #0
 8017d40:	2301      	movls	r3, #1
 8017d42:	e7aa      	b.n	8017c9a <RangeOffsetCal_Sequence+0x67a>
 8017d44:	9a06      	ldr	r2, [sp, #24]
 8017d46:	4293      	cmp	r3, r2
 8017d48:	bf34      	ite	cc
 8017d4a:	2200      	movcc	r2, #0
 8017d4c:	2201      	movcs	r2, #1
 8017d4e:	e79d      	b.n	8017c8c <RangeOffsetCal_Sequence+0x66c>
 8017d50:	425b      	negs	r3, r3
 8017d52:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8017d56:	fbac 3c03 	umull	r3, ip, ip, r3
 8017d5a:	0c1a      	lsrs	r2, r3, #16
 8017d5c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8017d60:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8017d64:	4413      	add	r3, r2
 8017d66:	425b      	negs	r3, r3
 8017d68:	e564      	b.n	8017834 <RangeOffsetCal_Sequence+0x214>
 8017d6a:	6803      	ldr	r3, [r0, #0]
 8017d6c:	f1cc 0c00 	rsb	ip, ip, #0
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	4662      	mov	r2, ip
 8017d74:	da11      	bge.n	8017d9a <RangeOffsetCal_Sequence+0x77a>
 8017d76:	f1bc 0f00 	cmp.w	ip, #0
 8017d7a:	f1c3 0300 	rsb	r3, r3, #0
 8017d7e:	daea      	bge.n	8017d56 <RangeOffsetCal_Sequence+0x736>
 8017d80:	4252      	negs	r2, r2
 8017d82:	17d5      	asrs	r5, r2, #31
 8017d84:	fba2 2103 	umull	r2, r1, r2, r3
 8017d88:	fb03 1105 	mla	r1, r3, r5, r1
 8017d8c:	0c13      	lsrs	r3, r2, #16
 8017d8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8017d92:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8017d96:	4413      	add	r3, r2
 8017d98:	e54c      	b.n	8017834 <RangeOffsetCal_Sequence+0x214>
 8017d9a:	f1bc 0f00 	cmp.w	ip, #0
 8017d9e:	f6bf ad41 	bge.w	8017824 <RangeOffsetCal_Sequence+0x204>
 8017da2:	4252      	negs	r2, r2
 8017da4:	17d5      	asrs	r5, r2, #31
 8017da6:	fba2 2103 	umull	r2, r1, r2, r3
 8017daa:	fb03 1105 	mla	r1, r3, r5, r1
 8017dae:	0c13      	lsrs	r3, r2, #16
 8017db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8017db4:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8017db8:	4413      	add	r3, r2
 8017dba:	e7d4      	b.n	8017d66 <RangeOffsetCal_Sequence+0x746>
 8017dbc:	085b      	lsrs	r3, r3, #1
 8017dbe:	2b01      	cmp	r3, #1
 8017dc0:	bf38      	it	cc
 8017dc2:	2301      	movcc	r3, #1
 8017dc4:	9305      	str	r3, [sp, #20]
 8017dc6:	041b      	lsls	r3, r3, #16
 8017dc8:	9300      	str	r3, [sp, #0]
 8017dca:	461d      	mov	r5, r3
 8017dcc:	425b      	negs	r3, r3
 8017dce:	9301      	str	r3, [sp, #4]
 8017dd0:	e550      	b.n	8017874 <RangeOffsetCal_Sequence+0x254>
 8017dd2:	f1bb 0f00 	cmp.w	fp, #0
 8017dd6:	bfac      	ite	ge
 8017dd8:	f06f 4e00 	mvnge.w	lr, #2147483648	@ 0x80000000
 8017ddc:	f04f 4e00 	movlt.w	lr, #2147483648	@ 0x80000000
 8017de0:	e5f0      	b.n	80179c4 <RangeOffsetCal_Sequence+0x3a4>
 8017de2:	9b01      	ldr	r3, [sp, #4]
 8017de4:	428b      	cmp	r3, r1
 8017de6:	f4ff addb 	bcc.w	80179a0 <RangeOffsetCal_Sequence+0x380>
 8017dea:	461a      	mov	r2, r3
 8017dec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8017df0:	2a00      	cmp	r2, #0
 8017df2:	db1b      	blt.n	8017e2c <RangeOffsetCal_Sequence+0x80c>
 8017df4:	468e      	mov	lr, r1
 8017df6:	b161      	cbz	r1, 8017e12 <RangeOffsetCal_Sequence+0x7f2>
 8017df8:	f04f 0e00 	mov.w	lr, #0
 8017dfc:	e000      	b.n	8017e00 <RangeOffsetCal_Sequence+0x7e0>
 8017dfe:	b141      	cbz	r1, 8017e12 <RangeOffsetCal_Sequence+0x7f2>
 8017e00:	428a      	cmp	r2, r1
 8017e02:	bf9c      	itt	ls
 8017e04:	1a89      	subls	r1, r1, r2
 8017e06:	ea4e 0e03 	orrls.w	lr, lr, r3
 8017e0a:	085b      	lsrs	r3, r3, #1
 8017e0c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8017e10:	d1f5      	bne.n	8017dfe <RangeOffsetCal_Sequence+0x7de>
 8017e12:	4291      	cmp	r1, r2
 8017e14:	d301      	bcc.n	8017e1a <RangeOffsetCal_Sequence+0x7fa>
 8017e16:	f10e 0e01 	add.w	lr, lr, #1
 8017e1a:	ea9b 0f05 	teq	fp, r5
 8017e1e:	d412      	bmi.n	8017e46 <RangeOffsetCal_Sequence+0x826>
 8017e20:	f1be 0f00 	cmp.w	lr, #0
 8017e24:	bfb8      	it	lt
 8017e26:	f06f 4e00 	mvnlt.w	lr, #2147483648	@ 0x80000000
 8017e2a:	e5cb      	b.n	80179c4 <RangeOffsetCal_Sequence+0x3a4>
 8017e2c:	4291      	cmp	r1, r2
 8017e2e:	d20f      	bcs.n	8017e50 <RangeOffsetCal_Sequence+0x830>
 8017e30:	085b      	lsrs	r3, r3, #1
 8017e32:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8017e36:	d009      	beq.n	8017e4c <RangeOffsetCal_Sequence+0x82c>
 8017e38:	2900      	cmp	r1, #0
 8017e3a:	d1dd      	bne.n	8017df8 <RangeOffsetCal_Sequence+0x7d8>
 8017e3c:	ea9b 0f05 	teq	fp, r5
 8017e40:	468e      	mov	lr, r1
 8017e42:	f57f adbf 	bpl.w	80179c4 <RangeOffsetCal_Sequence+0x3a4>
 8017e46:	f1ce 0e00 	rsb	lr, lr, #0
 8017e4a:	e5bb      	b.n	80179c4 <RangeOffsetCal_Sequence+0x3a4>
 8017e4c:	469e      	mov	lr, r3
 8017e4e:	e7e0      	b.n	8017e12 <RangeOffsetCal_Sequence+0x7f2>
 8017e50:	469e      	mov	lr, r3
 8017e52:	e7e2      	b.n	8017e1a <RangeOffsetCal_Sequence+0x7fa>
 8017e54:	461a      	mov	r2, r3
 8017e56:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8017e5a:	2900      	cmp	r1, #0
 8017e5c:	d1cc      	bne.n	8017df8 <RangeOffsetCal_Sequence+0x7d8>
 8017e5e:	e7ed      	b.n	8017e3c <RangeOffsetCal_Sequence+0x81c>
 8017e60:	9a07      	ldr	r2, [sp, #28]
 8017e62:	428a      	cmp	r2, r1
 8017e64:	d039      	beq.n	8017eda <RangeOffsetCal_Sequence+0x8ba>
 8017e66:	f4ff addb 	bcc.w	8017a20 <RangeOffsetCal_Sequence+0x400>
 8017e6a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8017e6c:	428a      	cmp	r2, r1
 8017e6e:	f47f add1 	bne.w	8017a14 <RangeOffsetCal_Sequence+0x3f4>
 8017e72:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017e74:	429a      	cmp	r2, r3
 8017e76:	bf8c      	ite	hi
 8017e78:	2300      	movhi	r3, #0
 8017e7a:	2301      	movls	r3, #1
 8017e7c:	e5cd      	b.n	8017a1a <RangeOffsetCal_Sequence+0x3fa>
 8017e7e:	4242      	negs	r2, r0
 8017e80:	42ba      	cmp	r2, r7
 8017e82:	bf28      	it	cs
 8017e84:	f44f 3380 	movcs.w	r3, #65536	@ 0x10000
 8017e88:	f4ff ade5 	bcc.w	8017a56 <RangeOffsetCal_Sequence+0x436>
 8017e8c:	2a00      	cmp	r2, #0
 8017e8e:	db36      	blt.n	8017efe <RangeOffsetCal_Sequence+0x8de>
 8017e90:	4639      	mov	r1, r7
 8017e92:	f04f 0900 	mov.w	r9, #0
 8017e96:	e000      	b.n	8017e9a <RangeOffsetCal_Sequence+0x87a>
 8017e98:	b161      	cbz	r1, 8017eb4 <RangeOffsetCal_Sequence+0x894>
 8017e9a:	4291      	cmp	r1, r2
 8017e9c:	bf24      	itt	cs
 8017e9e:	1a89      	subcs	r1, r1, r2
 8017ea0:	ea49 0903 	orrcs.w	r9, r9, r3
 8017ea4:	085b      	lsrs	r3, r3, #1
 8017ea6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8017eaa:	d1f5      	bne.n	8017e98 <RangeOffsetCal_Sequence+0x878>
 8017eac:	4291      	cmp	r1, r2
 8017eae:	d301      	bcc.n	8017eb4 <RangeOffsetCal_Sequence+0x894>
 8017eb0:	f109 0901 	add.w	r9, r9, #1
 8017eb4:	ea90 0f05 	teq	r0, r5
 8017eb8:	d446      	bmi.n	8017f48 <RangeOffsetCal_Sequence+0x928>
 8017eba:	f1b9 0f00 	cmp.w	r9, #0
 8017ebe:	6823      	ldr	r3, [r4, #0]
 8017ec0:	f6ff add8 	blt.w	8017a74 <RangeOffsetCal_Sequence+0x454>
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	f6bf adda 	bge.w	8017a7e <RangeOffsetCal_Sequence+0x45e>
 8017eca:	425b      	negs	r3, r3
 8017ecc:	e00d      	b.n	8017eea <RangeOffsetCal_Sequence+0x8ca>
 8017ece:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017ed0:	429a      	cmp	r2, r3
 8017ed2:	bf8c      	ite	hi
 8017ed4:	2200      	movhi	r2, #0
 8017ed6:	2201      	movls	r2, #1
 8017ed8:	e597      	b.n	8017a0a <RangeOffsetCal_Sequence+0x3ea>
 8017eda:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017edc:	429a      	cmp	r2, r3
 8017ede:	f67f ad9f 	bls.w	8017a20 <RangeOffsetCal_Sequence+0x400>
 8017ee2:	e593      	b.n	8017a0c <RangeOffsetCal_Sequence+0x3ec>
 8017ee4:	425b      	negs	r3, r3
 8017ee6:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 8017eea:	fba9 3903 	umull	r3, r9, r9, r3
 8017eee:	0c1a      	lsrs	r2, r3, #16
 8017ef0:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8017ef4:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8017ef8:	4413      	add	r3, r2
 8017efa:	425b      	negs	r3, r3
 8017efc:	e5c7      	b.n	8017a8e <RangeOffsetCal_Sequence+0x46e>
 8017efe:	4297      	cmp	r7, r2
 8017f00:	d24e      	bcs.n	8017fa0 <RangeOffsetCal_Sequence+0x980>
 8017f02:	085b      	lsrs	r3, r3, #1
 8017f04:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8017f08:	d1c2      	bne.n	8017e90 <RangeOffsetCal_Sequence+0x870>
 8017f0a:	4699      	mov	r9, r3
 8017f0c:	4639      	mov	r1, r7
 8017f0e:	e7cd      	b.n	8017eac <RangeOffsetCal_Sequence+0x88c>
 8017f10:	1a71      	subs	r1, r6, r1
 8017f12:	f3c1 1080 	ubfx	r0, r1, #6, #1
 8017f16:	eb00 11d1 	add.w	r1, r0, r1, lsr #7
 8017f1a:	4249      	negs	r1, r1
 8017f1c:	e631      	b.n	8017b82 <RangeOffsetCal_Sequence+0x562>
 8017f1e:	1a71      	subs	r1, r6, r1
 8017f20:	f3c1 1080 	ubfx	r0, r1, #6, #1
 8017f24:	eb00 11d1 	add.w	r1, r0, r1, lsr #7
 8017f28:	4249      	negs	r1, r1
 8017f2a:	e63b      	b.n	8017ba4 <RangeOffsetCal_Sequence+0x584>
 8017f2c:	1a71      	subs	r1, r6, r1
 8017f2e:	f3c1 1080 	ubfx	r0, r1, #6, #1
 8017f32:	eb00 11d1 	add.w	r1, r0, r1, lsr #7
 8017f36:	4249      	negs	r1, r1
 8017f38:	e645      	b.n	8017bc6 <RangeOffsetCal_Sequence+0x5a6>
 8017f3a:	1a71      	subs	r1, r6, r1
 8017f3c:	f3c1 1080 	ubfx	r0, r1, #6, #1
 8017f40:	eb00 11d1 	add.w	r1, r0, r1, lsr #7
 8017f44:	4249      	negs	r1, r1
 8017f46:	e64f      	b.n	8017be8 <RangeOffsetCal_Sequence+0x5c8>
 8017f48:	6823      	ldr	r3, [r4, #0]
 8017f4a:	f1c9 0900 	rsb	r9, r9, #0
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	464a      	mov	r2, r9
 8017f52:	da11      	bge.n	8017f78 <RangeOffsetCal_Sequence+0x958>
 8017f54:	f1b9 0f00 	cmp.w	r9, #0
 8017f58:	f1c3 0300 	rsb	r3, r3, #0
 8017f5c:	dac5      	bge.n	8017eea <RangeOffsetCal_Sequence+0x8ca>
 8017f5e:	4252      	negs	r2, r2
 8017f60:	17d0      	asrs	r0, r2, #31
 8017f62:	fba2 2103 	umull	r2, r1, r2, r3
 8017f66:	fb03 1100 	mla	r1, r3, r0, r1
 8017f6a:	0c13      	lsrs	r3, r2, #16
 8017f6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8017f70:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8017f74:	4413      	add	r3, r2
 8017f76:	e58a      	b.n	8017a8e <RangeOffsetCal_Sequence+0x46e>
 8017f78:	f1b9 0f00 	cmp.w	r9, #0
 8017f7c:	f6bf ad7f 	bge.w	8017a7e <RangeOffsetCal_Sequence+0x45e>
 8017f80:	4252      	negs	r2, r2
 8017f82:	17d0      	asrs	r0, r2, #31
 8017f84:	fba2 2103 	umull	r2, r1, r2, r3
 8017f88:	fb03 1100 	mla	r1, r3, r0, r1
 8017f8c:	0c13      	lsrs	r3, r2, #16
 8017f8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8017f92:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8017f96:	4413      	add	r3, r2
 8017f98:	e7af      	b.n	8017efa <RangeOffsetCal_Sequence+0x8da>
 8017f9a:	460f      	mov	r7, r1
 8017f9c:	f7ff bbf7 	b.w	801778e <RangeOffsetCal_Sequence+0x16e>
 8017fa0:	4699      	mov	r9, r3
 8017fa2:	e787      	b.n	8017eb4 <RangeOffsetCal_Sequence+0x894>
 8017fa4:	484a      	ldr	r0, [pc, #296]	@ (80180d0 <RangeOffsetCal_Sequence+0xab0>)
 8017fa6:	f7ee fab1 	bl	800650c <print>
 8017faa:	f06f 0372 	mvn.w	r3, #114	@ 0x72
 8017fae:	9306      	str	r3, [sp, #24]
 8017fb0:	9806      	ldr	r0, [sp, #24]
 8017fb2:	f20d 6d5c 	addw	sp, sp, #1628	@ 0x65c
 8017fb6:	ecbd 8b02 	vpop	{d8}
 8017fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fbe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8017fc2:	e765      	b.n	8017e90 <RangeOffsetCal_Sequence+0x870>
 8017fc4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8017fc8:	930d      	str	r3, [sp, #52]	@ 0x34
 8017fca:	f7ff bb37 	b.w	801763c <RangeOffsetCal_Sequence+0x1c>
 8017fce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017fd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8017fd4:	f47f ada6 	bne.w	8017b24 <RangeOffsetCal_Sequence+0x504>
 8017fd8:	483e      	ldr	r0, [pc, #248]	@ (80180d4 <RangeOffsetCal_Sequence+0xab4>)
 8017fda:	f7ee fa97 	bl	800650c <print>
 8017fde:	f06f 0372 	mvn.w	r3, #114	@ 0x72
 8017fe2:	9306      	str	r3, [sp, #24]
 8017fe4:	e66c      	b.n	8017cc0 <RangeOffsetCal_Sequence+0x6a0>
 8017fe6:	2800      	cmp	r0, #0
 8017fe8:	da06      	bge.n	8017ff8 <RangeOffsetCal_Sequence+0x9d8>
 8017fea:	42a0      	cmp	r0, r4
 8017fec:	d044      	beq.n	8018078 <RangeOffsetCal_Sequence+0xa58>
 8017fee:	f036 4300 	bics.w	r3, r6, #2147483648	@ 0x80000000
 8017ff2:	f027 4000 	bic.w	r0, r7, #2147483648	@ 0x80000000
 8017ff6:	d056      	beq.n	80180a6 <RangeOffsetCal_Sequence+0xa86>
 8017ff8:	2600      	movs	r6, #0
 8017ffa:	e000      	b.n	8017ffe <RangeOffsetCal_Sequence+0x9de>
 8017ffc:	b154      	cbz	r4, 8018014 <RangeOffsetCal_Sequence+0x9f4>
 8017ffe:	4284      	cmp	r4, r0
 8018000:	bf24      	itt	cs
 8018002:	1a24      	subcs	r4, r4, r0
 8018004:	431e      	orrcs	r6, r3
 8018006:	085b      	lsrs	r3, r3, #1
 8018008:	ea4f 0444 	mov.w	r4, r4, lsl #1
 801800c:	d1f6      	bne.n	8017ffc <RangeOffsetCal_Sequence+0x9dc>
 801800e:	4284      	cmp	r4, r0
 8018010:	d300      	bcc.n	8018014 <RangeOffsetCal_Sequence+0x9f4>
 8018012:	3601      	adds	r6, #1
 8018014:	ea91 0f02 	teq	r1, r2
 8018018:	d439      	bmi.n	801808e <RangeOffsetCal_Sequence+0xa6e>
 801801a:	2e00      	cmp	r6, #0
 801801c:	bfb8      	it	lt
 801801e:	f06f 4600 	mvnlt.w	r6, #2147483648	@ 0x80000000
 8018022:	e59c      	b.n	8017b5e <RangeOffsetCal_Sequence+0x53e>
 8018024:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8018028:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801802a:	f822 3b02 	strh.w	r3, [r2], #2
 801802e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018030:	920f      	str	r2, [sp, #60]	@ 0x3c
 8018032:	3340      	adds	r3, #64	@ 0x40
 8018034:	930e      	str	r3, [sp, #56]	@ 0x38
 8018036:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018038:	b3bb      	cbz	r3, 80180aa <RangeOffsetCal_Sequence+0xa8a>
 801803a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801803c:	2280      	movs	r2, #128	@ 0x80
 801803e:	a926      	add	r1, sp, #152	@ 0x98
 8018040:	f104 001c 	add.w	r0, r4, #28
 8018044:	f013 f849 	bl	802b0da <memcpy>
 8018048:	f8d4 3288 	ldr.w	r3, [r4, #648]	@ 0x288
 801804c:	9806      	ldr	r0, [sp, #24]
 801804e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8018052:	f8c4 3288 	str.w	r3, [r4, #648]	@ 0x288
 8018056:	f20d 6d5c 	addw	sp, sp, #1628	@ 0x65c
 801805a:	ecbd 8b02 	vpop	{d8}
 801805e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018062:	4b1d      	ldr	r3, [pc, #116]	@ (80180d8 <RangeOffsetCal_Sequence+0xab8>)
 8018064:	e7e0      	b.n	8018028 <RangeOffsetCal_Sequence+0xa08>
 8018066:	1b9e      	subs	r6, r3, r6
 8018068:	f3c6 1380 	ubfx	r3, r6, #6, #1
 801806c:	eb03 13d6 	add.w	r3, r3, r6, lsr #7
 8018070:	425a      	negs	r2, r3
 8018072:	e5cb      	b.n	8017c0c <RangeOffsetCal_Sequence+0x5ec>
 8018074:	2200      	movs	r2, #0
 8018076:	e5c9      	b.n	8017c0c <RangeOffsetCal_Sequence+0x5ec>
 8018078:	461e      	mov	r6, r3
 801807a:	e7cb      	b.n	8018014 <RangeOffsetCal_Sequence+0x9f4>
 801807c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8018080:	2c00      	cmp	r4, #0
 8018082:	d1b9      	bne.n	8017ff8 <RangeOffsetCal_Sequence+0x9d8>
 8018084:	ea91 0f02 	teq	r1, r2
 8018088:	4626      	mov	r6, r4
 801808a:	f57f ad68 	bpl.w	8017b5e <RangeOffsetCal_Sequence+0x53e>
 801808e:	4276      	negs	r6, r6
 8018090:	e565      	b.n	8017b5e <RangeOffsetCal_Sequence+0x53e>
 8018092:	2b00      	cmp	r3, #0
 8018094:	db18      	blt.n	80180c8 <RangeOffsetCal_Sequence+0xaa8>
 8018096:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801809a:	e771      	b.n	8017f80 <RangeOffsetCal_Sequence+0x960>
 801809c:	2b00      	cmp	r3, #0
 801809e:	db0f      	blt.n	80180c0 <RangeOffsetCal_Sequence+0xaa0>
 80180a0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80180a4:	e67d      	b.n	8017da2 <RangeOffsetCal_Sequence+0x782>
 80180a6:	461e      	mov	r6, r3
 80180a8:	e7b1      	b.n	801800e <RangeOffsetCal_Sequence+0x9ee>
 80180aa:	2301      	movs	r3, #1
 80180ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80180ae:	f7ff badc 	b.w	801766a <RangeOffsetCal_Sequence+0x4a>
 80180b2:	480a      	ldr	r0, [pc, #40]	@ (80180dc <RangeOffsetCal_Sequence+0xabc>)
 80180b4:	f7ee fa2a 	bl	800650c <print>
 80180b8:	f06f 0372 	mvn.w	r3, #114	@ 0x72
 80180bc:	9306      	str	r3, [sp, #24]
 80180be:	e5ff      	b.n	8017cc0 <RangeOffsetCal_Sequence+0x6a0>
 80180c0:	425b      	negs	r3, r3
 80180c2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80180c6:	e65b      	b.n	8017d80 <RangeOffsetCal_Sequence+0x760>
 80180c8:	425b      	negs	r3, r3
 80180ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80180ce:	e746      	b.n	8017f5e <RangeOffsetCal_Sequence+0x93e>
 80180d0:	0802ea84 	.word	0x0802ea84
 80180d4:	0802ea40 	.word	0x0802ea40
 80180d8:	ffff8000 	.word	0xffff8000
 80180dc:	0802e994 	.word	0x0802e994

080180e0 <VsubCal_Sequence>:
 80180e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180e4:	4680      	mov	r8, r0
 80180e6:	b0cc      	sub	sp, #304	@ 0x130
 80180e8:	4615      	mov	r5, r2
 80180ea:	a802      	add	r0, sp, #8
 80180ec:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80180f0:	f012 fff3 	bl	802b0da <memcpy>
 80180f4:	f8d8 307c 	ldr.w	r3, [r8, #124]	@ 0x7c
 80180f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80180fc:	2600      	movs	r6, #0
 80180fe:	f8c8 307c 	str.w	r3, [r8, #124]	@ 0x7c
 8018102:	462a      	mov	r2, r5
 8018104:	a902      	add	r1, sp, #8
 8018106:	4640      	mov	r0, r8
 8018108:	f88d 60b4 	strb.w	r6, [sp, #180]	@ 0xb4
 801810c:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8018110:	f7fe fc2a 	bl	8016968 <Argus_Core_SetSettingsSync>
 8018114:	1e04      	subs	r4, r0, #0
 8018116:	db60      	blt.n	80181da <VsubCal_Sequence+0xfa>
 8018118:	f9b8 3330 	ldrsh.w	r3, [r8, #816]	@ 0x330
 801811c:	f8ad 6002 	strh.w	r6, [sp, #2]
 8018120:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8018124:	4293      	cmp	r3, r2
 8018126:	f8ad 6004 	strh.w	r6, [sp, #4]
 801812a:	f8ad 6006 	strh.w	r6, [sp, #6]
 801812e:	d058      	beq.n	80181e2 <VsubCal_Sequence+0x102>
 8018130:	111f      	asrs	r7, r3, #4
 8018132:	f895 3267 	ldrb.w	r3, [r5, #615]	@ 0x267
 8018136:	f895 6290 	ldrb.w	r6, [r5, #656]	@ 0x290
 801813a:	fb13 f307 	smulbb	r3, r3, r7
 801813e:	2b00      	cmp	r3, #0
 8018140:	f895 7291 	ldrb.w	r7, [r5, #657]	@ 0x291
 8018144:	f280 8126 	bge.w	8018394 <VsubCal_Sequence+0x2b4>
 8018148:	425b      	negs	r3, r3
 801814a:	f3c3 2280 	ubfx	r2, r3, #10, #1
 801814e:	eb02 23d3 	add.w	r3, r2, r3, lsr #11
 8018152:	1aff      	subs	r7, r7, r3
 8018154:	b2ff      	uxtb	r7, r7
 8018156:	42b7      	cmp	r7, r6
 8018158:	f895 3266 	ldrb.w	r3, [r5, #614]	@ 0x266
 801815c:	bf38      	it	cc
 801815e:	4637      	movcc	r7, r6
 8018160:	429f      	cmp	r7, r3
 8018162:	bf28      	it	cs
 8018164:	461f      	movcs	r7, r3
 8018166:	42b7      	cmp	r7, r6
 8018168:	f240 80e1 	bls.w	801832e <VsubCal_Sequence+0x24e>
 801816c:	f108 0804 	add.w	r8, r8, #4
 8018170:	f10d 0102 	add.w	r1, sp, #2
 8018174:	4640      	mov	r0, r8
 8018176:	f00a fc03 	bl	8022980 <Argus_Dev_BglMeasurement>
 801817a:	1e04      	subs	r4, r0, #0
 801817c:	f2c0 8111 	blt.w	80183a2 <VsubCal_Sequence+0x2c2>
 8018180:	f8b5 22b6 	ldrh.w	r2, [r5, #694]	@ 0x2b6
 8018184:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018188:	429a      	cmp	r2, r3
 801818a:	f0c0 80d7 	bcc.w	801833c <VsubCal_Sequence+0x25c>
 801818e:	f8b5 32b4 	ldrh.w	r3, [r5, #692]	@ 0x2b4
 8018192:	4632      	mov	r2, r6
 8018194:	a901      	add	r1, sp, #4
 8018196:	4640      	mov	r0, r8
 8018198:	f00a fd5c 	bl	8022c54 <Argus_Dev_VsubMeasurement>
 801819c:	1e04      	subs	r4, r0, #0
 801819e:	f2c0 80d9 	blt.w	8018354 <VsubCal_Sequence+0x274>
 80181a2:	42b7      	cmp	r7, r6
 80181a4:	d809      	bhi.n	80181ba <VsubCal_Sequence+0xda>
 80181a6:	e02c      	b.n	8018202 <VsubCal_Sequence+0x122>
 80181a8:	f8b5 1262 	ldrh.w	r1, [r5, #610]	@ 0x262
 80181ac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80181b0:	4291      	cmp	r1, r2
 80181b2:	d21b      	bcs.n	80181ec <VsubCal_Sequence+0x10c>
 80181b4:	b2df      	uxtb	r7, r3
 80181b6:	42b7      	cmp	r7, r6
 80181b8:	d923      	bls.n	8018202 <VsubCal_Sequence+0x122>
 80181ba:	2301      	movs	r3, #1
 80181bc:	463a      	mov	r2, r7
 80181be:	f10d 0106 	add.w	r1, sp, #6
 80181c2:	4640      	mov	r0, r8
 80181c4:	f00a fd46 	bl	8022c54 <Argus_Dev_VsubMeasurement>
 80181c8:	1e04      	subs	r4, r0, #0
 80181ca:	f107 33ff 	add.w	r3, r7, #4294967295
 80181ce:	daeb      	bge.n	80181a8 <VsubCal_Sequence+0xc8>
 80181d0:	4881      	ldr	r0, [pc, #516]	@ (80183d8 <VsubCal_Sequence+0x2f8>)
 80181d2:	4622      	mov	r2, r4
 80181d4:	4631      	mov	r1, r6
 80181d6:	f7ee f999 	bl	800650c <print>
 80181da:	4620      	mov	r0, r4
 80181dc:	b04c      	add	sp, #304	@ 0x130
 80181de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181e2:	f895 6290 	ldrb.w	r6, [r5, #656]	@ 0x290
 80181e6:	f895 7291 	ldrb.w	r7, [r5, #657]	@ 0x291
 80181ea:	e7b4      	b.n	8018156 <VsubCal_Sequence+0x76>
 80181ec:	f8b5 32b4 	ldrh.w	r3, [r5, #692]	@ 0x2b4
 80181f0:	4640      	mov	r0, r8
 80181f2:	463a      	mov	r2, r7
 80181f4:	f10d 0106 	add.w	r1, sp, #6
 80181f8:	f00a fd2c 	bl	8022c54 <Argus_Dev_VsubMeasurement>
 80181fc:	1e04      	subs	r4, r0, #0
 80181fe:	f2c0 80dc 	blt.w	80183ba <VsubCal_Sequence+0x2da>
 8018202:	2f00      	cmp	r7, #0
 8018204:	f000 80ac 	beq.w	8018360 <VsubCal_Sequence+0x280>
 8018208:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801820c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018210:	1bbe      	subs	r6, r7, r6
 8018212:	2e00      	cmp	r6, #0
 8018214:	eba3 0002 	sub.w	r0, r3, r2
 8018218:	f340 80d8 	ble.w	80183cc <VsubCal_Sequence+0x2ec>
 801821c:	2800      	cmp	r0, #0
 801821e:	f340 80d5 	ble.w	80183cc <VsubCal_Sequence+0x2ec>
 8018222:	0043      	lsls	r3, r0, #1
 8018224:	ebb3 4f06 	cmp.w	r3, r6, lsl #16
 8018228:	ea4f 4106 	mov.w	r1, r6, lsl #16
 801822c:	f0c0 80cb 	bcc.w	80183c6 <VsubCal_Sequence+0x2e6>
 8018230:	1a5b      	subs	r3, r3, r1
 8018232:	005b      	lsls	r3, r3, #1
 8018234:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8018238:	d06a      	beq.n	8018310 <VsubCal_Sequence+0x230>
 801823a:	4299      	cmp	r1, r3
 801823c:	bf9c      	itt	ls
 801823e:	1a5b      	subls	r3, r3, r1
 8018240:	f440 4080 	orrls.w	r0, r0, #16384	@ 0x4000
 8018244:	005b      	lsls	r3, r3, #1
 8018246:	d063      	beq.n	8018310 <VsubCal_Sequence+0x230>
 8018248:	4299      	cmp	r1, r3
 801824a:	bf9c      	itt	ls
 801824c:	1a5b      	subls	r3, r3, r1
 801824e:	f440 5000 	orrls.w	r0, r0, #8192	@ 0x2000
 8018252:	005b      	lsls	r3, r3, #1
 8018254:	d05c      	beq.n	8018310 <VsubCal_Sequence+0x230>
 8018256:	4299      	cmp	r1, r3
 8018258:	bf9c      	itt	ls
 801825a:	1a5b      	subls	r3, r3, r1
 801825c:	f440 5080 	orrls.w	r0, r0, #4096	@ 0x1000
 8018260:	005b      	lsls	r3, r3, #1
 8018262:	d055      	beq.n	8018310 <VsubCal_Sequence+0x230>
 8018264:	4299      	cmp	r1, r3
 8018266:	bf9c      	itt	ls
 8018268:	1a5b      	subls	r3, r3, r1
 801826a:	f440 6000 	orrls.w	r0, r0, #2048	@ 0x800
 801826e:	005b      	lsls	r3, r3, #1
 8018270:	d04e      	beq.n	8018310 <VsubCal_Sequence+0x230>
 8018272:	4299      	cmp	r1, r3
 8018274:	bf9c      	itt	ls
 8018276:	1a5b      	subls	r3, r3, r1
 8018278:	f440 6080 	orrls.w	r0, r0, #1024	@ 0x400
 801827c:	005b      	lsls	r3, r3, #1
 801827e:	d047      	beq.n	8018310 <VsubCal_Sequence+0x230>
 8018280:	428b      	cmp	r3, r1
 8018282:	bf24      	itt	cs
 8018284:	1a5b      	subcs	r3, r3, r1
 8018286:	f440 7000 	orrcs.w	r0, r0, #512	@ 0x200
 801828a:	005b      	lsls	r3, r3, #1
 801828c:	d040      	beq.n	8018310 <VsubCal_Sequence+0x230>
 801828e:	4299      	cmp	r1, r3
 8018290:	bf9c      	itt	ls
 8018292:	1a5b      	subls	r3, r3, r1
 8018294:	f440 7080 	orrls.w	r0, r0, #256	@ 0x100
 8018298:	005b      	lsls	r3, r3, #1
 801829a:	d039      	beq.n	8018310 <VsubCal_Sequence+0x230>
 801829c:	428b      	cmp	r3, r1
 801829e:	bf24      	itt	cs
 80182a0:	1a5b      	subcs	r3, r3, r1
 80182a2:	f040 0080 	orrcs.w	r0, r0, #128	@ 0x80
 80182a6:	005b      	lsls	r3, r3, #1
 80182a8:	d032      	beq.n	8018310 <VsubCal_Sequence+0x230>
 80182aa:	4299      	cmp	r1, r3
 80182ac:	bf9c      	itt	ls
 80182ae:	1a5b      	subls	r3, r3, r1
 80182b0:	f040 0040 	orrls.w	r0, r0, #64	@ 0x40
 80182b4:	005b      	lsls	r3, r3, #1
 80182b6:	d02b      	beq.n	8018310 <VsubCal_Sequence+0x230>
 80182b8:	4299      	cmp	r1, r3
 80182ba:	bf9c      	itt	ls
 80182bc:	1a5b      	subls	r3, r3, r1
 80182be:	f040 0020 	orrls.w	r0, r0, #32
 80182c2:	005b      	lsls	r3, r3, #1
 80182c4:	d024      	beq.n	8018310 <VsubCal_Sequence+0x230>
 80182c6:	4299      	cmp	r1, r3
 80182c8:	bf9c      	itt	ls
 80182ca:	1a5b      	subls	r3, r3, r1
 80182cc:	f040 0010 	orrls.w	r0, r0, #16
 80182d0:	005b      	lsls	r3, r3, #1
 80182d2:	d01d      	beq.n	8018310 <VsubCal_Sequence+0x230>
 80182d4:	4299      	cmp	r1, r3
 80182d6:	bf9c      	itt	ls
 80182d8:	1a5b      	subls	r3, r3, r1
 80182da:	f040 0008 	orrls.w	r0, r0, #8
 80182de:	005b      	lsls	r3, r3, #1
 80182e0:	d016      	beq.n	8018310 <VsubCal_Sequence+0x230>
 80182e2:	4299      	cmp	r1, r3
 80182e4:	bf9c      	itt	ls
 80182e6:	1a5b      	subls	r3, r3, r1
 80182e8:	f040 0004 	orrls.w	r0, r0, #4
 80182ec:	005b      	lsls	r3, r3, #1
 80182ee:	d00f      	beq.n	8018310 <VsubCal_Sequence+0x230>
 80182f0:	4299      	cmp	r1, r3
 80182f2:	bf9c      	itt	ls
 80182f4:	1a5b      	subls	r3, r3, r1
 80182f6:	f040 0002 	orrls.w	r0, r0, #2
 80182fa:	005b      	lsls	r3, r3, #1
 80182fc:	d008      	beq.n	8018310 <VsubCal_Sequence+0x230>
 80182fe:	4299      	cmp	r1, r3
 8018300:	bf9c      	itt	ls
 8018302:	1a5b      	subls	r3, r3, r1
 8018304:	f040 0001 	orrls.w	r0, r0, #1
 8018308:	ebb1 0f43 	cmp.w	r1, r3, lsl #1
 801830c:	bf98      	it	ls
 801830e:	3001      	addls	r0, #1
 8018310:	f8d5 3288 	ldr.w	r3, [r5, #648]	@ 0x288
 8018314:	f8a5 028e 	strh.w	r0, [r5, #654]	@ 0x28e
 8018318:	2400      	movs	r4, #0
 801831a:	f043 0303 	orr.w	r3, r3, #3
 801831e:	4620      	mov	r0, r4
 8018320:	f8a5 228c 	strh.w	r2, [r5, #652]	@ 0x28c
 8018324:	f8c5 3288 	str.w	r3, [r5, #648]	@ 0x288
 8018328:	b04c      	add	sp, #304	@ 0x130
 801832a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801832e:	4639      	mov	r1, r7
 8018330:	482a      	ldr	r0, [pc, #168]	@ (80183dc <VsubCal_Sequence+0x2fc>)
 8018332:	4632      	mov	r2, r6
 8018334:	f7ee f8ea 	bl	800650c <print>
 8018338:	2700      	movs	r7, #0
 801833a:	e717      	b.n	801816c <VsubCal_Sequence+0x8c>
 801833c:	4828      	ldr	r0, [pc, #160]	@ (80183e0 <VsubCal_Sequence+0x300>)
 801833e:	f7ee f8e5 	bl	800650c <print>
 8018342:	f8b5 32b4 	ldrh.w	r3, [r5, #692]	@ 0x2b4
 8018346:	4640      	mov	r0, r8
 8018348:	4632      	mov	r2, r6
 801834a:	a901      	add	r1, sp, #4
 801834c:	f00a fc82 	bl	8022c54 <Argus_Dev_VsubMeasurement>
 8018350:	1e04      	subs	r4, r0, #0
 8018352:	da05      	bge.n	8018360 <VsubCal_Sequence+0x280>
 8018354:	4622      	mov	r2, r4
 8018356:	4631      	mov	r1, r6
 8018358:	4822      	ldr	r0, [pc, #136]	@ (80183e4 <VsubCal_Sequence+0x304>)
 801835a:	f7ee f8d7 	bl	800650c <print>
 801835e:	e73c      	b.n	80181da <VsubCal_Sequence+0xfa>
 8018360:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018364:	f895 22b8 	ldrb.w	r2, [r5, #696]	@ 0x2b8
 8018368:	f8d5 1288 	ldr.w	r1, [r5, #648]	@ 0x288
 801836c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8018370:	fb03 f202 	mul.w	r2, r3, r2
 8018374:	f3c2 13c0 	ubfx	r3, r2, #7, #1
 8018378:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801837c:	2400      	movs	r4, #0
 801837e:	4403      	add	r3, r0
 8018380:	f041 0101 	orr.w	r1, r1, #1
 8018384:	4620      	mov	r0, r4
 8018386:	f8a5 328c 	strh.w	r3, [r5, #652]	@ 0x28c
 801838a:	f8c5 1288 	str.w	r1, [r5, #648]	@ 0x288
 801838e:	b04c      	add	sp, #304	@ 0x130
 8018390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018394:	f3c3 2280 	ubfx	r2, r3, #10, #1
 8018398:	eb02 23d3 	add.w	r3, r2, r3, lsr #11
 801839c:	441f      	add	r7, r3
 801839e:	b2ff      	uxtb	r7, r7
 80183a0:	e6d9      	b.n	8018156 <VsubCal_Sequence+0x76>
 80183a2:	4621      	mov	r1, r4
 80183a4:	4810      	ldr	r0, [pc, #64]	@ (80183e8 <VsubCal_Sequence+0x308>)
 80183a6:	f7ee f8b1 	bl	800650c <print>
 80183aa:	21c3      	movs	r1, #195	@ 0xc3
 80183ac:	4640      	mov	r0, r8
 80183ae:	f008 fdcd 	bl	8020f4c <Argus_Dev_ClearStatus>
 80183b2:	4620      	mov	r0, r4
 80183b4:	b04c      	add	sp, #304	@ 0x130
 80183b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183ba:	4622      	mov	r2, r4
 80183bc:	4639      	mov	r1, r7
 80183be:	480b      	ldr	r0, [pc, #44]	@ (80183ec <VsubCal_Sequence+0x30c>)
 80183c0:	f7ee f8a4 	bl	800650c <print>
 80183c4:	e709      	b.n	80181da <VsubCal_Sequence+0xfa>
 80183c6:	0083      	lsls	r3, r0, #2
 80183c8:	2000      	movs	r0, #0
 80183ca:	e736      	b.n	801823a <VsubCal_Sequence+0x15a>
 80183cc:	4808      	ldr	r0, [pc, #32]	@ (80183f0 <VsubCal_Sequence+0x310>)
 80183ce:	f7ee f89d 	bl	800650c <print>
 80183d2:	f06f 0473 	mvn.w	r4, #115	@ 0x73
 80183d6:	e700      	b.n	80181da <VsubCal_Sequence+0xfa>
 80183d8:	0802ecd4 	.word	0x0802ecd4
 80183dc:	0802eb64 	.word	0x0802eb64
 80183e0:	0802ec2c 	.word	0x0802ec2c
 80183e4:	0802ec80 	.word	0x0802ec80
 80183e8:	0802ebe0 	.word	0x0802ebe0
 80183ec:	0802ed30 	.word	0x0802ed30
 80183f0:	0802ed84 	.word	0x0802ed84

080183f4 <Argus_Core_ExecuteVsubCalibrationSequence>:
 80183f4:	f8d0 3120 	ldr.w	r3, [r0, #288]	@ 0x120
 80183f8:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80183fc:	b123      	cbz	r3, 8018408 <Argus_Core_ExecuteVsubCalibrationSequence+0x14>
 80183fe:	4a06      	ldr	r2, [pc, #24]	@ (8018418 <Argus_Core_ExecuteVsubCalibrationSequence+0x24>)
 8018400:	4906      	ldr	r1, [pc, #24]	@ (801841c <Argus_Core_ExecuteVsubCalibrationSequence+0x28>)
 8018402:	2300      	movs	r3, #0
 8018404:	f7fe bab4 	b.w	8016970 <RunSequence>
 8018408:	b510      	push	{r4, lr}
 801840a:	4805      	ldr	r0, [pc, #20]	@ (8018420 <Argus_Core_ExecuteVsubCalibrationSequence+0x2c>)
 801840c:	f7ee f87e 	bl	800650c <print>
 8018410:	f06f 0004 	mvn.w	r0, #4
 8018414:	bd10      	pop	{r4, pc}
 8018416:	bf00      	nop
 8018418:	0802ee10 	.word	0x0802ee10
 801841c:	080180e1 	.word	0x080180e1
 8018420:	0802edd4 	.word	0x0802edd4

08018424 <Argus_Core_ExecuteXtalkCalibrationSequence>:
 8018424:	4a02      	ldr	r2, [pc, #8]	@ (8018430 <Argus_Core_ExecuteXtalkCalibrationSequence+0xc>)
 8018426:	4903      	ldr	r1, [pc, #12]	@ (8018434 <Argus_Core_ExecuteXtalkCalibrationSequence+0x10>)
 8018428:	2300      	movs	r3, #0
 801842a:	f7fe baa1 	b.w	8016970 <RunSequence>
 801842e:	bf00      	nop
 8018430:	0802ee30 	.word	0x0802ee30
 8018434:	08016a2d 	.word	0x08016a2d

08018438 <Argus_Core_ExecuteRangeOffsetCalibrationSequence>:
 8018438:	b500      	push	{lr}
 801843a:	b083      	sub	sp, #12
 801843c:	4a04      	ldr	r2, [pc, #16]	@ (8018450 <Argus_Core_ExecuteRangeOffsetCalibrationSequence+0x18>)
 801843e:	9101      	str	r1, [sp, #4]
 8018440:	ab01      	add	r3, sp, #4
 8018442:	4904      	ldr	r1, [pc, #16]	@ (8018454 <Argus_Core_ExecuteRangeOffsetCalibrationSequence+0x1c>)
 8018444:	f7fe fa94 	bl	8016970 <RunSequence>
 8018448:	b003      	add	sp, #12
 801844a:	f85d fb04 	ldr.w	pc, [sp], #4
 801844e:	bf00      	nop
 8018450:	0802ee50 	.word	0x0802ee50
 8018454:	08017621 	.word	0x08017621

08018458 <GetStatusCallback>:
 8018458:	6008      	str	r0, [r1, #0]
 801845a:	4770      	bx	lr

0801845c <MeasurementFinish>:
 801845c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018460:	2300      	movs	r3, #0
 8018462:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8018466:	610b      	str	r3, [r1, #16]
 8018468:	460c      	mov	r4, r1
 801846a:	4605      	mov	r5, r0
 801846c:	b082      	sub	sp, #8
 801846e:	f8d1 03ac 	ldr.w	r0, [r1, #940]	@ 0x3ac
 8018472:	21c4      	movs	r1, #196	@ 0xc4
 8018474:	e9d4 67e9 	ldrd	r6, r7, [r4, #932]	@ 0x3a4
 8018478:	f008 fd68 	bl	8020f4c <Argus_Dev_ClearStatus>
 801847c:	2302      	movs	r3, #2
 801847e:	f115 0f72 	cmn.w	r5, #114	@ 0x72
 8018482:	f888 31c5 	strb.w	r3, [r8, #453]	@ 0x1c5
 8018486:	d04c      	beq.n	8018522 <MeasurementFinish+0xc6>
 8018488:	f025 0304 	bic.w	r3, r5, #4
 801848c:	3306      	adds	r3, #6
 801848e:	d048      	beq.n	8018522 <MeasurementFinish+0xc6>
 8018490:	2d00      	cmp	r5, #0
 8018492:	db56      	blt.n	8018542 <MeasurementFinish+0xe6>
 8018494:	a901      	add	r1, sp, #4
 8018496:	4668      	mov	r0, sp
 8018498:	e9d8 a901 	ldrd	sl, r9, [r8, #4]
 801849c:	f7ee fe7c 	bl	8007198 <Timer_GetCounterValue>
 80184a0:	e9dd 1300 	ldrd	r1, r3, [sp]
 80184a4:	4599      	cmp	r9, r3
 80184a6:	d85d      	bhi.n	8018564 <MeasurementFinish+0x108>
 80184a8:	eba1 010a 	sub.w	r1, r1, sl
 80184ac:	eba3 0909 	sub.w	r9, r3, r9
 80184b0:	f241 03c5 	movw	r3, #4293	@ 0x10c5
 80184b4:	4299      	cmp	r1, r3
 80184b6:	d951      	bls.n	801855c <MeasurementFinish+0x100>
 80184b8:	f241 03c6 	movw	r3, #4294	@ 0x10c6
 80184bc:	4299      	cmp	r1, r3
 80184be:	d04a      	beq.n	8018556 <MeasurementFinish+0xfa>
 80184c0:	f04f 39ff 	mov.w	r9, #4294967295
 80184c4:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80184c8:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 80184cc:	eba9 0101 	sub.w	r1, r9, r1
 80184d0:	f500 70b4 	add.w	r0, r0, #360	@ 0x168
 80184d4:	f005 fe9a 	bl	801e20c <Argus_Dca_UpdateTimings>
 80184d8:	b9dd      	cbnz	r5, 8018512 <MeasurementFinish+0xb6>
 80184da:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 80184de:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 80184e2:	f011 f96b 	bl	80297bc <ADS_CheckTimeout>
 80184e6:	f7ee fa75 	bl	80069d4 <IRQ_LOCK>
 80184ea:	7923      	ldrb	r3, [r4, #4]
 80184ec:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 80184f0:	b373      	cbz	r3, 8018550 <MeasurementFinish+0xf4>
 80184f2:	f04f 0800 	mov.w	r8, #0
 80184f6:	f884 8004 	strb.w	r8, [r4, #4]
 80184fa:	f7ee fa49 	bl	8006990 <IRQ_UNLOCK>
 80184fe:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 8018502:	21c4      	movs	r1, #196	@ 0xc4
 8018504:	f008 fcec 	bl	8020ee0 <Argus_Dev_SetStatus>
 8018508:	4605      	mov	r5, r0
 801850a:	b188      	cbz	r0, 8018530 <MeasurementFinish+0xd4>
 801850c:	2301      	movs	r3, #1
 801850e:	7123      	strb	r3, [r4, #4]
 8018510:	4645      	mov	r5, r8
 8018512:	b196      	cbz	r6, 801853a <MeasurementFinish+0xde>
 8018514:	4639      	mov	r1, r7
 8018516:	4628      	mov	r0, r5
 8018518:	4633      	mov	r3, r6
 801851a:	b002      	add	sp, #8
 801851c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018520:	4718      	bx	r3
 8018522:	f8d8 3000 	ldr.w	r3, [r8]
 8018526:	2b00      	cmp	r3, #0
 8018528:	dbd7      	blt.n	80184da <MeasurementFinish+0x7e>
 801852a:	f8c8 5000 	str.w	r5, [r8]
 801852e:	e7d4      	b.n	80184da <MeasurementFinish+0x7e>
 8018530:	4620      	mov	r0, r4
 8018532:	f000 f921 	bl	8018778 <Argus_Measurement_Start.part.0>
 8018536:	2e00      	cmp	r6, #0
 8018538:	d1ec      	bne.n	8018514 <MeasurementFinish+0xb8>
 801853a:	4628      	mov	r0, r5
 801853c:	b002      	add	sp, #8
 801853e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018542:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 8018546:	f8c8 5000 	str.w	r5, [r8]
 801854a:	f008 fd33 	bl	8020fb4 <Argus_Dev_Abort>
 801854e:	e7e0      	b.n	8018512 <MeasurementFinish+0xb6>
 8018550:	f7ee fa1e 	bl	8006990 <IRQ_UNLOCK>
 8018554:	e7dd      	b.n	8018512 <MeasurementFinish+0xb6>
 8018556:	4b08      	ldr	r3, [pc, #32]	@ (8018578 <MeasurementFinish+0x11c>)
 8018558:	4599      	cmp	r9, r3
 801855a:	d8b1      	bhi.n	80184c0 <MeasurementFinish+0x64>
 801855c:	4b07      	ldr	r3, [pc, #28]	@ (801857c <MeasurementFinish+0x120>)
 801855e:	fb03 9901 	mla	r9, r3, r1, r9
 8018562:	e7af      	b.n	80184c4 <MeasurementFinish+0x68>
 8018564:	f503 2374 	add.w	r3, r3, #999424	@ 0xf4000
 8018568:	3901      	subs	r1, #1
 801856a:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 801856e:	eba1 010a 	sub.w	r1, r1, sl
 8018572:	eba3 0909 	sub.w	r9, r3, r9
 8018576:	e79b      	b.n	80184b0 <MeasurementFinish+0x54>
 8018578:	000ec27e 	.word	0x000ec27e
 801857c:	000f4240 	.word	0x000f4240

08018580 <MeasurementStartIntegration>:
 8018580:	2800      	cmp	r0, #0
 8018582:	b510      	push	{r4, lr}
 8018584:	460c      	mov	r4, r1
 8018586:	da04      	bge.n	8018592 <MeasurementStartIntegration+0x12>
 8018588:	4621      	mov	r1, r4
 801858a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801858e:	f7ff bf65 	b.w	801845c <MeasurementFinish>
 8018592:	4905      	ldr	r1, [pc, #20]	@ (80185a8 <MeasurementStartIntegration+0x28>)
 8018594:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 8018598:	4622      	mov	r2, r4
 801859a:	f009 fe79 	bl	8022290 <Argus_Dev_StartIntegration>
 801859e:	1e03      	subs	r3, r0, #0
 80185a0:	db00      	blt.n	80185a4 <MeasurementStartIntegration+0x24>
 80185a2:	bd10      	pop	{r4, pc}
 80185a4:	4618      	mov	r0, r3
 80185a6:	e7ef      	b.n	8018588 <MeasurementStartIntegration+0x8>
 80185a8:	080186ad 	.word	0x080186ad

080185ac <MeasurementReadDataFinished>:
 80185ac:	b510      	push	{r4, lr}
 80185ae:	460c      	mov	r4, r1
 80185b0:	b950      	cbnz	r0, 80185c8 <MeasurementReadDataFinished+0x1c>
 80185b2:	690a      	ldr	r2, [r1, #16]
 80185b4:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 80185b8:	6993      	ldr	r3, [r2, #24]
 80185ba:	4907      	ldr	r1, [pc, #28]	@ (80185d8 <MeasurementReadDataFinished+0x2c>)
 80185bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80185c0:	6193      	str	r3, [r2, #24]
 80185c2:	4622      	mov	r2, r4
 80185c4:	f00a fd5a 	bl	802307c <Argus_Dev_StartAuxMeasurement>
 80185c8:	2800      	cmp	r0, #0
 80185ca:	db00      	blt.n	80185ce <MeasurementReadDataFinished+0x22>
 80185cc:	bd10      	pop	{r4, pc}
 80185ce:	4621      	mov	r1, r4
 80185d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80185d4:	f7ff bf42 	b.w	801845c <MeasurementFinish>
 80185d8:	0801863d 	.word	0x0801863d

080185dc <MeasurementReadAuxChannelsFinished>:
 80185dc:	b510      	push	{r4, lr}
 80185de:	460c      	mov	r4, r1
 80185e0:	b950      	cbnz	r0, 80185f8 <MeasurementReadAuxChannelsFinished+0x1c>
 80185e2:	690a      	ldr	r2, [r1, #16]
 80185e4:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 80185e8:	6993      	ldr	r3, [r2, #24]
 80185ea:	4907      	ldr	r1, [pc, #28]	@ (8018608 <MeasurementReadAuxChannelsFinished+0x2c>)
 80185ec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80185f0:	6193      	str	r3, [r2, #24]
 80185f2:	4622      	mov	r2, r4
 80185f4:	f009 ff08 	bl	8022408 <Argus_Dev_DetuneClock>
 80185f8:	2800      	cmp	r0, #0
 80185fa:	db00      	blt.n	80185fe <MeasurementReadAuxChannelsFinished+0x22>
 80185fc:	bd10      	pop	{r4, pc}
 80185fe:	4621      	mov	r1, r4
 8018600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018604:	f7ff bf2a 	b.w	801845c <MeasurementFinish>
 8018608:	0801860d 	.word	0x0801860d

0801860c <MeasurementUpdateConfig>:
 801860c:	2800      	cmp	r0, #0
 801860e:	b510      	push	{r4, lr}
 8018610:	460c      	mov	r4, r1
 8018612:	da04      	bge.n	801861e <MeasurementUpdateConfig+0x12>
 8018614:	4621      	mov	r1, r4
 8018616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801861a:	f7ff bf1f 	b.w	801845c <MeasurementFinish>
 801861e:	4a06      	ldr	r2, [pc, #24]	@ (8018638 <MeasurementUpdateConfig+0x2c>)
 8018620:	f8d1 03ac 	ldr.w	r0, [r1, #940]	@ 0x3ac
 8018624:	460b      	mov	r3, r1
 8018626:	2101      	movs	r1, #1
 8018628:	f009 fb8e 	bl	8021d48 <Argus_Dev_Apply>
 801862c:	1e02      	subs	r2, r0, #0
 801862e:	db00      	blt.n	8018632 <MeasurementUpdateConfig+0x26>
 8018630:	bd10      	pop	{r4, pc}
 8018632:	4610      	mov	r0, r2
 8018634:	e7ee      	b.n	8018614 <MeasurementUpdateConfig+0x8>
 8018636:	bf00      	nop
 8018638:	0801845d 	.word	0x0801845d

0801863c <MeasurementReadAuxChannels>:
 801863c:	b510      	push	{r4, lr}
 801863e:	460c      	mov	r4, r1
 8018640:	b082      	sub	sp, #8
 8018642:	b1d0      	cbz	r0, 801867a <MeasurementReadAuxChannels+0x3e>
 8018644:	f110 0f72 	cmn.w	r0, #114	@ 0x72
 8018648:	d007      	beq.n	801865a <MeasurementReadAuxChannels+0x1e>
 801864a:	1d83      	adds	r3, r0, #6
 801864c:	d005      	beq.n	801865a <MeasurementReadAuxChannels+0x1e>
 801864e:	4602      	mov	r2, r0
 8018650:	2a00      	cmp	r2, #0
 8018652:	db1f      	blt.n	8018694 <MeasurementReadAuxChannels+0x58>
 8018654:	4610      	mov	r0, r2
 8018656:	b002      	add	sp, #8
 8018658:	bd10      	pop	{r4, pc}
 801865a:	6923      	ldr	r3, [r4, #16]
 801865c:	4a11      	ldr	r2, [pc, #68]	@ (80186a4 <MeasurementReadAuxChannels+0x68>)
 801865e:	6018      	str	r0, [r3, #0]
 8018660:	2101      	movs	r1, #1
 8018662:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 8018666:	4623      	mov	r3, r4
 8018668:	f009 fb6e 	bl	8021d48 <Argus_Dev_Apply>
 801866c:	1e02      	subs	r2, r0, #0
 801866e:	daf1      	bge.n	8018654 <MeasurementReadAuxChannels+0x18>
 8018670:	4621      	mov	r1, r4
 8018672:	f7ff fef3 	bl	801845c <MeasurementFinish>
 8018676:	4602      	mov	r2, r0
 8018678:	e7ea      	b.n	8018650 <MeasurementReadAuxChannels+0x14>
 801867a:	6909      	ldr	r1, [r1, #16]
 801867c:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 8018680:	4b09      	ldr	r3, [pc, #36]	@ (80186a8 <MeasurementReadAuxChannels+0x6c>)
 8018682:	9400      	str	r4, [sp, #0]
 8018684:	2205      	movs	r2, #5
 8018686:	f201 11b5 	addw	r1, r1, #437	@ 0x1b5
 801868a:	f008 fc99 	bl	8020fc0 <Argus_Dev_ReadData>
 801868e:	4602      	mov	r2, r0
 8018690:	2a00      	cmp	r2, #0
 8018692:	dadf      	bge.n	8018654 <MeasurementReadAuxChannels+0x18>
 8018694:	4621      	mov	r1, r4
 8018696:	4610      	mov	r0, r2
 8018698:	b002      	add	sp, #8
 801869a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801869e:	f7ff bedd 	b.w	801845c <MeasurementFinish>
 80186a2:	bf00      	nop
 80186a4:	0801845d 	.word	0x0801845d
 80186a8:	080185dd 	.word	0x080185dd

080186ac <MeasurementReadData>:
 80186ac:	b530      	push	{r4, r5, lr}
 80186ae:	460d      	mov	r5, r1
 80186b0:	6909      	ldr	r1, [r1, #16]
 80186b2:	4604      	mov	r4, r0
 80186b4:	b083      	sub	sp, #12
 80186b6:	f8d5 03ac 	ldr.w	r0, [r5, #940]	@ 0x3ac
 80186ba:	310c      	adds	r1, #12
 80186bc:	f009 fa54 	bl	8021b68 <Argus_Dev_GetFrameConfig>
 80186c0:	b1cc      	cbz	r4, 80186f6 <MeasurementReadData+0x4a>
 80186c2:	f114 0f72 	cmn.w	r4, #114	@ 0x72
 80186c6:	d006      	beq.n	80186d6 <MeasurementReadData+0x2a>
 80186c8:	1da3      	adds	r3, r4, #6
 80186ca:	d004      	beq.n	80186d6 <MeasurementReadData+0x2a>
 80186cc:	2c00      	cmp	r4, #0
 80186ce:	db47      	blt.n	8018760 <MeasurementReadData+0xb4>
 80186d0:	4620      	mov	r0, r4
 80186d2:	b003      	add	sp, #12
 80186d4:	bd30      	pop	{r4, r5, pc}
 80186d6:	692b      	ldr	r3, [r5, #16]
 80186d8:	4a25      	ldr	r2, [pc, #148]	@ (8018770 <MeasurementReadData+0xc4>)
 80186da:	601c      	str	r4, [r3, #0]
 80186dc:	f8d5 03ac 	ldr.w	r0, [r5, #940]	@ 0x3ac
 80186e0:	462b      	mov	r3, r5
 80186e2:	2101      	movs	r1, #1
 80186e4:	f009 fb30 	bl	8021d48 <Argus_Dev_Apply>
 80186e8:	1e04      	subs	r4, r0, #0
 80186ea:	daf1      	bge.n	80186d0 <MeasurementReadData+0x24>
 80186ec:	4629      	mov	r1, r5
 80186ee:	f7ff feb5 	bl	801845c <MeasurementFinish>
 80186f2:	4604      	mov	r4, r0
 80186f4:	e7ea      	b.n	80186cc <MeasurementReadData+0x20>
 80186f6:	6929      	ldr	r1, [r5, #16]
 80186f8:	690a      	ldr	r2, [r1, #16]
 80186fa:	0853      	lsrs	r3, r2, #1
 80186fc:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8018700:	1ad2      	subs	r2, r2, r3
 8018702:	0890      	lsrs	r0, r2, #2
 8018704:	694b      	ldr	r3, [r1, #20]
 8018706:	9500      	str	r5, [sp, #0]
 8018708:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 801870c:	f002 3233 	and.w	r2, r2, #858993459	@ 0x33333333
 8018710:	4402      	add	r2, r0
 8018712:	0858      	lsrs	r0, r3, #1
 8018714:	f000 3055 	and.w	r0, r0, #1431655765	@ 0x55555555
 8018718:	1a18      	subs	r0, r3, r0
 801871a:	f000 3333 	and.w	r3, r0, #858993459	@ 0x33333333
 801871e:	0880      	lsrs	r0, r0, #2
 8018720:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 8018724:	4403      	add	r3, r0
 8018726:	eb02 1212 	add.w	r2, r2, r2, lsr #4
 801872a:	f002 320f 	and.w	r2, r2, #252645135	@ 0xf0f0f0f
 801872e:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 8018732:	eb02 2202 	add.w	r2, r2, r2, lsl #8
 8018736:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 801873a:	eb02 4202 	add.w	r2, r2, r2, lsl #16
 801873e:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 8018742:	eb03 4303 	add.w	r3, r3, r3, lsl #16
 8018746:	0e12      	lsrs	r2, r2, #24
 8018748:	eb02 6213 	add.w	r2, r2, r3, lsr #24
 801874c:	f8d5 03ac 	ldr.w	r0, [r5, #940]	@ 0x3ac
 8018750:	4b08      	ldr	r3, [pc, #32]	@ (8018774 <MeasurementReadData+0xc8>)
 8018752:	3128      	adds	r1, #40	@ 0x28
 8018754:	0092      	lsls	r2, r2, #2
 8018756:	f008 fc33 	bl	8020fc0 <Argus_Dev_ReadData>
 801875a:	4604      	mov	r4, r0
 801875c:	2c00      	cmp	r4, #0
 801875e:	dab7      	bge.n	80186d0 <MeasurementReadData+0x24>
 8018760:	4629      	mov	r1, r5
 8018762:	4620      	mov	r0, r4
 8018764:	b003      	add	sp, #12
 8018766:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801876a:	f7ff be77 	b.w	801845c <MeasurementFinish>
 801876e:	bf00      	nop
 8018770:	0801845d 	.word	0x0801845d
 8018774:	080185ad 	.word	0x080185ad

08018778 <Argus_Measurement_Start.part.0>:
 8018778:	b530      	push	{r4, r5, lr}
 801877a:	6903      	ldr	r3, [r0, #16]
 801877c:	b083      	sub	sp, #12
 801877e:	4604      	mov	r4, r0
 8018780:	2b00      	cmp	r3, #0
 8018782:	d143      	bne.n	801880c <Argus_Measurement_Start.part.0+0x94>
 8018784:	f890 31d9 	ldrb.w	r3, [r0, #473]	@ 0x1d9
 8018788:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 801878c:	b36b      	cbz	r3, 80187ea <Argus_Measurement_Start.part.0+0x72>
 801878e:	f890 33a1 	ldrb.w	r3, [r0, #929]	@ 0x3a1
 8018792:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8018796:	2b00      	cmp	r3, #0
 8018798:	d143      	bne.n	8018822 <Argus_Measurement_Start.part.0+0xaa>
 801879a:	f500 70f0 	add.w	r0, r0, #480	@ 0x1e0
 801879e:	f504 71f2 	add.w	r1, r4, #484	@ 0x1e4
 80187a2:	e9cd 0100 	strd	r0, r1, [sp]
 80187a6:	f7ee fcf7 	bl	8007198 <Timer_GetCounterValue>
 80187aa:	f504 73ee 	add.w	r3, r4, #476	@ 0x1dc
 80187ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80187b2:	6123      	str	r3, [r4, #16]
 80187b4:	2301      	movs	r3, #1
 80187b6:	f8c4 51dc 	str.w	r5, [r4, #476]	@ 0x1dc
 80187ba:	f884 33a1 	strb.w	r3, [r4, #929]	@ 0x3a1
 80187be:	f7ee fceb 	bl	8007198 <Timer_GetCounterValue>
 80187c2:	6923      	ldr	r3, [r4, #16]
 80187c4:	4a1d      	ldr	r2, [pc, #116]	@ (801883c <Argus_Measurement_Start.part.0+0xc4>)
 80187c6:	3304      	adds	r3, #4
 80187c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80187cc:	f104 0508 	add.w	r5, r4, #8
 80187d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80187d4:	4623      	mov	r3, r4
 80187d6:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 80187da:	2100      	movs	r1, #0
 80187dc:	f009 fab4 	bl	8021d48 <Argus_Dev_Apply>
 80187e0:	1e05      	subs	r5, r0, #0
 80187e2:	db20      	blt.n	8018826 <Argus_Measurement_Start.part.0+0xae>
 80187e4:	4628      	mov	r0, r5
 80187e6:	b003      	add	sp, #12
 80187e8:	bd30      	pop	{r4, r5, pc}
 80187ea:	3018      	adds	r0, #24
 80187ec:	f104 011c 	add.w	r1, r4, #28
 80187f0:	e9cd 0100 	strd	r0, r1, [sp]
 80187f4:	f7ee fcd0 	bl	8007198 <Timer_GetCounterValue>
 80187f8:	f104 0314 	add.w	r3, r4, #20
 80187fc:	6123      	str	r3, [r4, #16]
 80187fe:	2301      	movs	r3, #1
 8018800:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018804:	6165      	str	r5, [r4, #20]
 8018806:	f884 31d9 	strb.w	r3, [r4, #473]	@ 0x1d9
 801880a:	e7d8      	b.n	80187be <Argus_Measurement_Start.part.0+0x46>
 801880c:	2502      	movs	r5, #2
 801880e:	2301      	movs	r3, #1
 8018810:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 8018814:	7123      	strb	r3, [r4, #4]
 8018816:	21c4      	movs	r1, #196	@ 0xc4
 8018818:	f008 fb98 	bl	8020f4c <Argus_Dev_ClearStatus>
 801881c:	4628      	mov	r0, r5
 801881e:	b003      	add	sp, #12
 8018820:	bd30      	pop	{r4, r5, pc}
 8018822:	2568      	movs	r5, #104	@ 0x68
 8018824:	e7f3      	b.n	801880e <Argus_Measurement_Start.part.0+0x96>
 8018826:	4629      	mov	r1, r5
 8018828:	4805      	ldr	r0, [pc, #20]	@ (8018840 <Argus_Measurement_Start.part.0+0xc8>)
 801882a:	f7ed fe6f 	bl	800650c <print>
 801882e:	4621      	mov	r1, r4
 8018830:	4628      	mov	r0, r5
 8018832:	b003      	add	sp, #12
 8018834:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018838:	f7ff be10 	b.w	801845c <MeasurementFinish>
 801883c:	08018581 	.word	0x08018581
 8018840:	0802ee6c 	.word	0x0802ee6c

08018844 <Argus_Measurement_Init>:
 8018844:	b538      	push	{r3, r4, r5, lr}
 8018846:	4604      	mov	r4, r0
 8018848:	460d      	mov	r5, r1
 801884a:	f44f 726c 	mov.w	r2, #944	@ 0x3b0
 801884e:	2100      	movs	r1, #0
 8018850:	f012 fbab 	bl	802afaa <memset>
 8018854:	f8c4 53ac 	str.w	r5, [r4, #940]	@ 0x3ac
 8018858:	4620      	mov	r0, r4
 801885a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801885e:	f000 bb57 	b.w	8018f10 <TimerMngr_subscribeArgus>
 8018862:	bf00      	nop

08018864 <Argus_Measurement_Deinit>:
 8018864:	f000 bb78 	b.w	8018f58 <TimerMngr_unsubscribeArgus>

08018868 <Argus_Measurement_Abort>:
 8018868:	b538      	push	{r3, r4, r5, lr}
 801886a:	4604      	mov	r4, r0
 801886c:	2500      	movs	r5, #0
 801886e:	f8c0 53a4 	str.w	r5, [r0, #932]	@ 0x3a4
 8018872:	6005      	str	r5, [r0, #0]
 8018874:	f000 fade 	bl	8018e34 <TimerMngr_UpdateTimings>
 8018878:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 801887c:	7125      	strb	r5, [r4, #4]
 801887e:	f008 fb99 	bl	8020fb4 <Argus_Dev_Abort>
 8018882:	f884 51d9 	strb.w	r5, [r4, #473]	@ 0x1d9
 8018886:	f884 53a1 	strb.w	r5, [r4, #929]	@ 0x3a1
 801888a:	bd38      	pop	{r3, r4, r5, pc}

0801888c <Argus_Measurement_IsTimerActive>:
 801888c:	6800      	ldr	r0, [r0, #0]
 801888e:	3800      	subs	r0, #0
 8018890:	bf18      	it	ne
 8018892:	2001      	movne	r0, #1
 8018894:	4770      	bx	lr
 8018896:	bf00      	nop

08018898 <Argus_Measurement_GetTimerInterval>:
 8018898:	6800      	ldr	r0, [r0, #0]
 801889a:	4770      	bx	lr

0801889c <Argus_Measurement_IsBufferBusy>:
 801889c:	f890 31d9 	ldrb.w	r3, [r0, #473]	@ 0x1d9
 80188a0:	b92b      	cbnz	r3, 80188ae <Argus_Measurement_IsBufferBusy+0x12>
 80188a2:	f890 03a1 	ldrb.w	r0, [r0, #929]	@ 0x3a1
 80188a6:	3800      	subs	r0, #0
 80188a8:	bf18      	it	ne
 80188aa:	2001      	movne	r0, #1
 80188ac:	4770      	bx	lr
 80188ae:	2001      	movs	r0, #1
 80188b0:	4770      	bx	lr
 80188b2:	bf00      	nop

080188b4 <Argus_Measurement_IsActive>:
 80188b4:	6803      	ldr	r3, [r0, #0]
 80188b6:	b913      	cbnz	r3, 80188be <Argus_Measurement_IsActive+0xa>
 80188b8:	f890 31d9 	ldrb.w	r3, [r0, #473]	@ 0x1d9
 80188bc:	b10b      	cbz	r3, 80188c2 <Argus_Measurement_IsActive+0xe>
 80188be:	2001      	movs	r0, #1
 80188c0:	4770      	bx	lr
 80188c2:	f890 03a1 	ldrb.w	r0, [r0, #929]	@ 0x3a1
 80188c6:	3800      	subs	r0, #0
 80188c8:	bf18      	it	ne
 80188ca:	2001      	movne	r0, #1
 80188cc:	4770      	bx	lr
 80188ce:	bf00      	nop

080188d0 <Argus_Measurement_Trigger>:
 80188d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80188d2:	4604      	mov	r4, r0
 80188d4:	b085      	sub	sp, #20
 80188d6:	460f      	mov	r7, r1
 80188d8:	4616      	mov	r6, r2
 80188da:	f7ee f87b 	bl	80069d4 <IRQ_LOCK>
 80188de:	6825      	ldr	r5, [r4, #0]
 80188e0:	2d00      	cmp	r5, #0
 80188e2:	d15a      	bne.n	801899a <Argus_Measurement_Trigger+0xca>
 80188e4:	f7ee f854 	bl	8006990 <IRQ_UNLOCK>
 80188e8:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 80188ec:	4629      	mov	r1, r5
 80188ee:	f008 f9b3 	bl	8020c58 <Argus_Dev_AwaitStatus>
 80188f2:	b108      	cbz	r0, 80188f8 <Argus_Measurement_Trigger+0x28>
 80188f4:	b005      	add	sp, #20
 80188f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80188f8:	f104 0308 	add.w	r3, r4, #8
 80188fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018900:	466b      	mov	r3, sp
 8018902:	e883 0003 	stmia.w	r3, {r0, r1}
 8018906:	f8d4 33ac 	ldr.w	r3, [r4, #940]	@ 0x3ac
 801890a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801890e:	e9c4 76e9 	strd	r7, r6, [r4, #932]	@ 0x3a4
 8018912:	a903      	add	r1, sp, #12
 8018914:	4607      	mov	r7, r0
 8018916:	a802      	add	r0, sp, #8
 8018918:	681d      	ldr	r5, [r3, #0]
 801891a:	9e01      	ldr	r6, [sp, #4]
 801891c:	f7ee fc3c 	bl	8007198 <Timer_GetCounterValue>
 8018920:	4a36      	ldr	r2, [pc, #216]	@ (80189fc <Argus_Measurement_Trigger+0x12c>)
 8018922:	4937      	ldr	r1, [pc, #220]	@ (8018a00 <Argus_Measurement_Trigger+0x130>)
 8018924:	f8dd c008 	ldr.w	ip, [sp, #8]
 8018928:	fba2 3205 	umull	r3, r2, r2, r5
 801892c:	0c93      	lsrs	r3, r2, #18
 801892e:	fb01 5313 	mls	r3, r1, r3, r5
 8018932:	4433      	add	r3, r6
 8018934:	3901      	subs	r1, #1
 8018936:	428b      	cmp	r3, r1
 8018938:	9d03      	ldr	r5, [sp, #12]
 801893a:	eb07 4292 	add.w	r2, r7, r2, lsr #18
 801893e:	d835      	bhi.n	80189ac <Argus_Measurement_Trigger+0xdc>
 8018940:	4297      	cmp	r7, r2
 8018942:	d03a      	beq.n	80189ba <Argus_Measurement_Trigger+0xea>
 8018944:	bf34      	ite	cc
 8018946:	2101      	movcc	r1, #1
 8018948:	2100      	movcs	r1, #0
 801894a:	2900      	cmp	r1, #0
 801894c:	d03f      	beq.n	80189ce <Argus_Measurement_Trigger+0xfe>
 801894e:	45bc      	cmp	ip, r7
 8018950:	d038      	beq.n	80189c4 <Argus_Measurement_Trigger+0xf4>
 8018952:	bf8c      	ite	hi
 8018954:	2601      	movhi	r6, #1
 8018956:	2600      	movls	r6, #0
 8018958:	b126      	cbz	r6, 8018964 <Argus_Measurement_Trigger+0x94>
 801895a:	4594      	cmp	ip, r2
 801895c:	d045      	beq.n	80189ea <Argus_Measurement_Trigger+0x11a>
 801895e:	bf8c      	ite	hi
 8018960:	2101      	movhi	r1, #1
 8018962:	2100      	movls	r1, #0
 8018964:	7923      	ldrb	r3, [r4, #4]
 8018966:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 801896a:	4319      	orrs	r1, r3
 801896c:	7121      	strb	r1, [r4, #4]
 801896e:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 8018972:	f010 ff23 	bl	80297bc <ADS_CheckTimeout>
 8018976:	f7ee f82d 	bl	80069d4 <IRQ_LOCK>
 801897a:	7923      	ldrb	r3, [r4, #4]
 801897c:	b38b      	cbz	r3, 80189e2 <Argus_Measurement_Trigger+0x112>
 801897e:	2300      	movs	r3, #0
 8018980:	7123      	strb	r3, [r4, #4]
 8018982:	f7ee f805 	bl	8006990 <IRQ_UNLOCK>
 8018986:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 801898a:	21c4      	movs	r1, #196	@ 0xc4
 801898c:	f008 faa8 	bl	8020ee0 <Argus_Dev_SetStatus>
 8018990:	b308      	cbz	r0, 80189d6 <Argus_Measurement_Trigger+0x106>
 8018992:	2301      	movs	r3, #1
 8018994:	7123      	strb	r3, [r4, #4]
 8018996:	b005      	add	sp, #20
 8018998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801899a:	2500      	movs	r5, #0
 801899c:	e9c4 76e9 	strd	r7, r6, [r4, #932]	@ 0x3a4
 80189a0:	6025      	str	r5, [r4, #0]
 80189a2:	f7ed fff5 	bl	8006990 <IRQ_UNLOCK>
 80189a6:	4628      	mov	r0, r5
 80189a8:	b005      	add	sp, #20
 80189aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80189ac:	3201      	adds	r2, #1
 80189ae:	f5a3 2374 	sub.w	r3, r3, #999424	@ 0xf4000
 80189b2:	4297      	cmp	r7, r2
 80189b4:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80189b8:	d1c4      	bne.n	8018944 <Argus_Measurement_Trigger+0x74>
 80189ba:	429e      	cmp	r6, r3
 80189bc:	bf8c      	ite	hi
 80189be:	2100      	movhi	r1, #0
 80189c0:	2101      	movls	r1, #1
 80189c2:	e7c2      	b.n	801894a <Argus_Measurement_Trigger+0x7a>
 80189c4:	42b5      	cmp	r5, r6
 80189c6:	bf34      	ite	cc
 80189c8:	2600      	movcc	r6, #0
 80189ca:	2601      	movcs	r6, #1
 80189cc:	e7c4      	b.n	8018958 <Argus_Measurement_Trigger+0x88>
 80189ce:	45bc      	cmp	ip, r7
 80189d0:	d010      	beq.n	80189f4 <Argus_Measurement_Trigger+0x124>
 80189d2:	d8c7      	bhi.n	8018964 <Argus_Measurement_Trigger+0x94>
 80189d4:	e7c1      	b.n	801895a <Argus_Measurement_Trigger+0x8a>
 80189d6:	4620      	mov	r0, r4
 80189d8:	b005      	add	sp, #20
 80189da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80189de:	f7ff becb 	b.w	8018778 <Argus_Measurement_Start.part.0>
 80189e2:	f7ed ffd5 	bl	8006990 <IRQ_UNLOCK>
 80189e6:	2069      	movs	r0, #105	@ 0x69
 80189e8:	e784      	b.n	80188f4 <Argus_Measurement_Trigger+0x24>
 80189ea:	429d      	cmp	r5, r3
 80189ec:	bf34      	ite	cc
 80189ee:	2100      	movcc	r1, #0
 80189f0:	2101      	movcs	r1, #1
 80189f2:	e7b7      	b.n	8018964 <Argus_Measurement_Trigger+0x94>
 80189f4:	42b5      	cmp	r5, r6
 80189f6:	d2b5      	bcs.n	8018964 <Argus_Measurement_Trigger+0x94>
 80189f8:	e7af      	b.n	801895a <Argus_Measurement_Trigger+0x8a>
 80189fa:	bf00      	nop
 80189fc:	431bde83 	.word	0x431bde83
 8018a00:	000f4240 	.word	0x000f4240

08018a04 <Argus_Measurement_CheckTimeout>:
 8018a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a06:	6905      	ldr	r5, [r0, #16]
 8018a08:	b083      	sub	sp, #12
 8018a0a:	b11d      	cbz	r5, 8018a14 <Argus_Measurement_CheckTimeout+0x10>
 8018a0c:	f895 31c5 	ldrb.w	r3, [r5, #453]	@ 0x1c5
 8018a10:	2b01      	cmp	r3, #1
 8018a12:	d003      	beq.n	8018a1c <Argus_Measurement_CheckTimeout+0x18>
 8018a14:	2400      	movs	r4, #0
 8018a16:	4620      	mov	r0, r4
 8018a18:	b003      	add	sp, #12
 8018a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a1c:	f8d0 33ac 	ldr.w	r3, [r0, #940]	@ 0x3ac
 8018a20:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8018a24:	681e      	ldr	r6, [r3, #0]
 8018a26:	a901      	add	r1, sp, #4
 8018a28:	4604      	mov	r4, r0
 8018a2a:	0076      	lsls	r6, r6, #1
 8018a2c:	4668      	mov	r0, sp
 8018a2e:	f7ee fbb3 	bl	8007198 <Timer_GetCounterValue>
 8018a32:	f506 36c3 	add.w	r6, r6, #99840	@ 0x18600
 8018a36:	4a2e      	ldr	r2, [pc, #184]	@ (8018af0 <Argus_Measurement_CheckTimeout+0xec>)
 8018a38:	492e      	ldr	r1, [pc, #184]	@ (8018af4 <Argus_Measurement_CheckTimeout+0xf0>)
 8018a3a:	68a8      	ldr	r0, [r5, #8]
 8018a3c:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8018a40:	36a0      	adds	r6, #160	@ 0xa0
 8018a42:	fba2 3206 	umull	r3, r2, r2, r6
 8018a46:	0c93      	lsrs	r3, r2, #18
 8018a48:	fb01 6313 	mls	r3, r1, r3, r6
 8018a4c:	4403      	add	r3, r0
 8018a4e:	3901      	subs	r1, #1
 8018a50:	428b      	cmp	r3, r1
 8018a52:	e9dd 7c00 	ldrd	r7, ip, [sp]
 8018a56:	eb0e 4292 	add.w	r2, lr, r2, lsr #18
 8018a5a:	d904      	bls.n	8018a66 <Argus_Measurement_CheckTimeout+0x62>
 8018a5c:	f5a3 2374 	sub.w	r3, r3, #999424	@ 0xf4000
 8018a60:	3201      	adds	r2, #1
 8018a62:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8018a66:	4596      	cmp	lr, r2
 8018a68:	d022      	beq.n	8018ab0 <Argus_Measurement_CheckTimeout+0xac>
 8018a6a:	bf34      	ite	cc
 8018a6c:	2101      	movcc	r1, #1
 8018a6e:	2100      	movcs	r1, #0
 8018a70:	b319      	cbz	r1, 8018aba <Argus_Measurement_CheckTimeout+0xb6>
 8018a72:	45be      	cmp	lr, r7
 8018a74:	d035      	beq.n	8018ae2 <Argus_Measurement_CheckTimeout+0xde>
 8018a76:	bf34      	ite	cc
 8018a78:	2001      	movcc	r0, #1
 8018a7a:	2000      	movcs	r0, #0
 8018a7c:	b130      	cbz	r0, 8018a8c <Argus_Measurement_CheckTimeout+0x88>
 8018a7e:	42ba      	cmp	r2, r7
 8018a80:	d022      	beq.n	8018ac8 <Argus_Measurement_CheckTimeout+0xc4>
 8018a82:	bf34      	ite	cc
 8018a84:	2301      	movcc	r3, #1
 8018a86:	2300      	movcs	r3, #0
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	d0c3      	beq.n	8018a14 <Argus_Measurement_CheckTimeout+0x10>
 8018a8c:	f06f 0705 	mvn.w	r7, #5
 8018a90:	4631      	mov	r1, r6
 8018a92:	4819      	ldr	r0, [pc, #100]	@ (8018af8 <Argus_Measurement_CheckTimeout+0xf4>)
 8018a94:	602f      	str	r7, [r5, #0]
 8018a96:	f7ed fd39 	bl	800650c <print>
 8018a9a:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 8018a9e:	f008 fa89 	bl	8020fb4 <Argus_Dev_Abort>
 8018aa2:	1e04      	subs	r4, r0, #0
 8018aa4:	da22      	bge.n	8018aec <Argus_Measurement_CheckTimeout+0xe8>
 8018aa6:	4621      	mov	r1, r4
 8018aa8:	4814      	ldr	r0, [pc, #80]	@ (8018afc <Argus_Measurement_CheckTimeout+0xf8>)
 8018aaa:	f7ed fd2f 	bl	800650c <print>
 8018aae:	e7b2      	b.n	8018a16 <Argus_Measurement_CheckTimeout+0x12>
 8018ab0:	4298      	cmp	r0, r3
 8018ab2:	bf8c      	ite	hi
 8018ab4:	2100      	movhi	r1, #0
 8018ab6:	2101      	movls	r1, #1
 8018ab8:	e7da      	b.n	8018a70 <Argus_Measurement_CheckTimeout+0x6c>
 8018aba:	45be      	cmp	lr, r7
 8018abc:	d00e      	beq.n	8018adc <Argus_Measurement_CheckTimeout+0xd8>
 8018abe:	d3a9      	bcc.n	8018a14 <Argus_Measurement_CheckTimeout+0x10>
 8018ac0:	42ba      	cmp	r2, r7
 8018ac2:	d008      	beq.n	8018ad6 <Argus_Measurement_CheckTimeout+0xd2>
 8018ac4:	d2a6      	bcs.n	8018a14 <Argus_Measurement_CheckTimeout+0x10>
 8018ac6:	e7e1      	b.n	8018a8c <Argus_Measurement_CheckTimeout+0x88>
 8018ac8:	459c      	cmp	ip, r3
 8018aca:	bf34      	ite	cc
 8018acc:	2300      	movcc	r3, #0
 8018ace:	2301      	movcs	r3, #1
 8018ad0:	2b00      	cmp	r3, #0
 8018ad2:	d09f      	beq.n	8018a14 <Argus_Measurement_CheckTimeout+0x10>
 8018ad4:	e7da      	b.n	8018a8c <Argus_Measurement_CheckTimeout+0x88>
 8018ad6:	459c      	cmp	ip, r3
 8018ad8:	d2d8      	bcs.n	8018a8c <Argus_Measurement_CheckTimeout+0x88>
 8018ada:	e79b      	b.n	8018a14 <Argus_Measurement_CheckTimeout+0x10>
 8018adc:	4560      	cmp	r0, ip
 8018ade:	d999      	bls.n	8018a14 <Argus_Measurement_CheckTimeout+0x10>
 8018ae0:	e7ee      	b.n	8018ac0 <Argus_Measurement_CheckTimeout+0xbc>
 8018ae2:	4560      	cmp	r0, ip
 8018ae4:	bf8c      	ite	hi
 8018ae6:	2000      	movhi	r0, #0
 8018ae8:	2001      	movls	r0, #1
 8018aea:	e7c7      	b.n	8018a7c <Argus_Measurement_CheckTimeout+0x78>
 8018aec:	463c      	mov	r4, r7
 8018aee:	e792      	b.n	8018a16 <Argus_Measurement_CheckTimeout+0x12>
 8018af0:	431bde83 	.word	0x431bde83
 8018af4:	000f4240 	.word	0x000f4240
 8018af8:	0802eeb4 	.word	0x0802eeb4
 8018afc:	0802eedc 	.word	0x0802eedc

08018b00 <Argus_Measurement_TriggerSync>:
 8018b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b04:	7903      	ldrb	r3, [r0, #4]
 8018b06:	b089      	sub	sp, #36	@ 0x24
 8018b08:	4604      	mov	r4, r0
 8018b0a:	9102      	str	r1, [sp, #8]
 8018b0c:	2b00      	cmp	r3, #0
 8018b0e:	d143      	bne.n	8018b98 <Argus_Measurement_TriggerSync+0x98>
 8018b10:	f100 0308 	add.w	r3, r0, #8
 8018b14:	f8df 918c 	ldr.w	r9, [pc, #396]	@ 8018ca4 <Argus_Measurement_TriggerSync+0x1a4>
 8018b18:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 8018ca8 <Argus_Measurement_TriggerSync+0x1a8>
 8018b1c:	4f5d      	ldr	r7, [pc, #372]	@ (8018c94 <Argus_Measurement_TriggerSync+0x194>)
 8018b1e:	9301      	str	r3, [sp, #4]
 8018b20:	ae04      	add	r6, sp, #16
 8018b22:	9b01      	ldr	r3, [sp, #4]
 8018b24:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018b28:	f8d4 33ac 	ldr.w	r3, [r4, #940]	@ 0x3ac
 8018b2c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8018b30:	e886 0003 	stmia.w	r6, {r0, r1}
 8018b34:	681d      	ldr	r5, [r3, #0]
 8018b36:	a907      	add	r1, sp, #28
 8018b38:	a806      	add	r0, sp, #24
 8018b3a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8018b3e:	f7ee fb2b 	bl	8007198 <Timer_GetCounterValue>
 8018b42:	fba9 3c05 	umull	r3, ip, r9, r5
 8018b46:	ea4f 419c 	mov.w	r1, ip, lsr #18
 8018b4a:	fb08 5211 	mls	r2, r8, r1, r5
 8018b4e:	445a      	add	r2, fp
 8018b50:	42ba      	cmp	r2, r7
 8018b52:	9806      	ldr	r0, [sp, #24]
 8018b54:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8018b58:	eb0a 4c9c 	add.w	ip, sl, ip, lsr #18
 8018b5c:	d905      	bls.n	8018b6a <Argus_Measurement_TriggerSync+0x6a>
 8018b5e:	f5a2 2274 	sub.w	r2, r2, #999424	@ 0xf4000
 8018b62:	f10c 0c01 	add.w	ip, ip, #1
 8018b66:	f5a2 7210 	sub.w	r2, r2, #576	@ 0x240
 8018b6a:	45d4      	cmp	ip, sl
 8018b6c:	d025      	beq.n	8018bba <Argus_Measurement_TriggerSync+0xba>
 8018b6e:	bf8c      	ite	hi
 8018b70:	2101      	movhi	r1, #1
 8018b72:	2100      	movls	r1, #0
 8018b74:	b1b9      	cbz	r1, 8018ba6 <Argus_Measurement_TriggerSync+0xa6>
 8018b76:	4550      	cmp	r0, sl
 8018b78:	d024      	beq.n	8018bc4 <Argus_Measurement_TriggerSync+0xc4>
 8018b7a:	bf8c      	ite	hi
 8018b7c:	2301      	movhi	r3, #1
 8018b7e:	2300      	movls	r3, #0
 8018b80:	b123      	cbz	r3, 8018b8c <Argus_Measurement_TriggerSync+0x8c>
 8018b82:	4584      	cmp	ip, r0
 8018b84:	d014      	beq.n	8018bb0 <Argus_Measurement_TriggerSync+0xb0>
 8018b86:	bf34      	ite	cc
 8018b88:	2101      	movcc	r1, #1
 8018b8a:	2100      	movcs	r1, #0
 8018b8c:	7923      	ldrb	r3, [r4, #4]
 8018b8e:	430b      	orrs	r3, r1
 8018b90:	7123      	strb	r3, [r4, #4]
 8018b92:	7923      	ldrb	r3, [r4, #4]
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d0c4      	beq.n	8018b22 <Argus_Measurement_TriggerSync+0x22>
 8018b98:	6925      	ldr	r5, [r4, #16]
 8018b9a:	b1dd      	cbz	r5, 8018bd4 <Argus_Measurement_TriggerSync+0xd4>
 8018b9c:	2502      	movs	r5, #2
 8018b9e:	4628      	mov	r0, r5
 8018ba0:	b009      	add	sp, #36	@ 0x24
 8018ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ba6:	4550      	cmp	r0, sl
 8018ba8:	d011      	beq.n	8018bce <Argus_Measurement_TriggerSync+0xce>
 8018baa:	d8ef      	bhi.n	8018b8c <Argus_Measurement_TriggerSync+0x8c>
 8018bac:	4584      	cmp	ip, r0
 8018bae:	d1ea      	bne.n	8018b86 <Argus_Measurement_TriggerSync+0x86>
 8018bb0:	4596      	cmp	lr, r2
 8018bb2:	bf34      	ite	cc
 8018bb4:	2100      	movcc	r1, #0
 8018bb6:	2101      	movcs	r1, #1
 8018bb8:	e7e8      	b.n	8018b8c <Argus_Measurement_TriggerSync+0x8c>
 8018bba:	455a      	cmp	r2, fp
 8018bbc:	bf34      	ite	cc
 8018bbe:	2100      	movcc	r1, #0
 8018bc0:	2101      	movcs	r1, #1
 8018bc2:	e7d7      	b.n	8018b74 <Argus_Measurement_TriggerSync+0x74>
 8018bc4:	45de      	cmp	lr, fp
 8018bc6:	bf34      	ite	cc
 8018bc8:	2300      	movcc	r3, #0
 8018bca:	2301      	movcs	r3, #1
 8018bcc:	e7d8      	b.n	8018b80 <Argus_Measurement_TriggerSync+0x80>
 8018bce:	45de      	cmp	lr, fp
 8018bd0:	d2dc      	bcs.n	8018b8c <Argus_Measurement_TriggerSync+0x8c>
 8018bd2:	e7d6      	b.n	8018b82 <Argus_Measurement_TriggerSync+0x82>
 8018bd4:	9e02      	ldr	r6, [sp, #8]
 8018bd6:	1d30      	adds	r0, r6, #4
 8018bd8:	f106 0108 	add.w	r1, r6, #8
 8018bdc:	9103      	str	r1, [sp, #12]
 8018bde:	9001      	str	r0, [sp, #4]
 8018be0:	f7ee fada 	bl	8007198 <Timer_GetCounterValue>
 8018be4:	4b2c      	ldr	r3, [pc, #176]	@ (8018c98 <Argus_Measurement_TriggerSync+0x198>)
 8018be6:	6126      	str	r6, [r4, #16]
 8018be8:	2201      	movs	r2, #1
 8018bea:	6035      	str	r5, [r6, #0]
 8018bec:	f886 21c5 	strb.w	r2, [r6, #453]	@ 0x1c5
 8018bf0:	9903      	ldr	r1, [sp, #12]
 8018bf2:	9801      	ldr	r0, [sp, #4]
 8018bf4:	f8c4 33a4 	str.w	r3, [r4, #932]	@ 0x3a4
 8018bf8:	7125      	strb	r5, [r4, #4]
 8018bfa:	f8c4 63a8 	str.w	r6, [r4, #936]	@ 0x3a8
 8018bfe:	f7ee facb 	bl	8007198 <Timer_GetCounterValue>
 8018c02:	6922      	ldr	r2, [r4, #16]
 8018c04:	3204      	adds	r2, #4
 8018c06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018c0a:	f104 0308 	add.w	r3, r4, #8
 8018c0e:	e883 0003 	stmia.w	r3, {r0, r1}
 8018c12:	4a22      	ldr	r2, [pc, #136]	@ (8018c9c <Argus_Measurement_TriggerSync+0x19c>)
 8018c14:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 8018c18:	4629      	mov	r1, r5
 8018c1a:	4623      	mov	r3, r4
 8018c1c:	f009 f894 	bl	8021d48 <Argus_Dev_Apply>
 8018c20:	1e05      	subs	r5, r0, #0
 8018c22:	db15      	blt.n	8018c50 <Argus_Measurement_TriggerSync+0x150>
 8018c24:	b125      	cbz	r5, 8018c30 <Argus_Measurement_TriggerSync+0x130>
 8018c26:	e01e      	b.n	8018c66 <Argus_Measurement_TriggerSync+0x166>
 8018c28:	f7ff feec 	bl	8018a04 <Argus_Measurement_CheckTimeout>
 8018c2c:	1e05      	subs	r5, r0, #0
 8018c2e:	d126      	bne.n	8018c7e <Argus_Measurement_TriggerSync+0x17e>
 8018c30:	9b02      	ldr	r3, [sp, #8]
 8018c32:	f893 31c5 	ldrb.w	r3, [r3, #453]	@ 0x1c5
 8018c36:	2b01      	cmp	r3, #1
 8018c38:	4620      	mov	r0, r4
 8018c3a:	d0f5      	beq.n	8018c28 <Argus_Measurement_TriggerSync+0x128>
 8018c3c:	2300      	movs	r3, #0
 8018c3e:	e9c4 33e9 	strd	r3, r3, [r4, #932]	@ 0x3a4
 8018c42:	6123      	str	r3, [r4, #16]
 8018c44:	9b02      	ldr	r3, [sp, #8]
 8018c46:	681d      	ldr	r5, [r3, #0]
 8018c48:	4628      	mov	r0, r5
 8018c4a:	b009      	add	sp, #36	@ 0x24
 8018c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c50:	4629      	mov	r1, r5
 8018c52:	4813      	ldr	r0, [pc, #76]	@ (8018ca0 <Argus_Measurement_TriggerSync+0x1a0>)
 8018c54:	f7ed fc5a 	bl	800650c <print>
 8018c58:	4628      	mov	r0, r5
 8018c5a:	4621      	mov	r1, r4
 8018c5c:	f7ff fbfe 	bl	801845c <MeasurementFinish>
 8018c60:	4605      	mov	r5, r0
 8018c62:	2d00      	cmp	r5, #0
 8018c64:	d0e4      	beq.n	8018c30 <Argus_Measurement_TriggerSync+0x130>
 8018c66:	9a02      	ldr	r2, [sp, #8]
 8018c68:	2300      	movs	r3, #0
 8018c6a:	4628      	mov	r0, r5
 8018c6c:	6015      	str	r5, [r2, #0]
 8018c6e:	f882 31c5 	strb.w	r3, [r2, #453]	@ 0x1c5
 8018c72:	e9c4 33e9 	strd	r3, r3, [r4, #932]	@ 0x3a4
 8018c76:	6123      	str	r3, [r4, #16]
 8018c78:	b009      	add	sp, #36	@ 0x24
 8018c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c7e:	f04f 0300 	mov.w	r3, #0
 8018c82:	e9c4 33e9 	strd	r3, r3, [r4, #932]	@ 0x3a4
 8018c86:	6123      	str	r3, [r4, #16]
 8018c88:	dadc      	bge.n	8018c44 <Argus_Measurement_TriggerSync+0x144>
 8018c8a:	4628      	mov	r0, r5
 8018c8c:	b009      	add	sp, #36	@ 0x24
 8018c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c92:	bf00      	nop
 8018c94:	000f423f 	.word	0x000f423f
 8018c98:	08018459 	.word	0x08018459
 8018c9c:	08018581 	.word	0x08018581
 8018ca0:	0802ee6c 	.word	0x0802ee6c
 8018ca4:	431bde83 	.word	0x431bde83
 8018ca8:	000f4240 	.word	0x000f4240

08018cac <Argus_Measurement_StartTimer>:
 8018cac:	b510      	push	{r4, lr}
 8018cae:	4604      	mov	r4, r0
 8018cb0:	f8d0 03ac 	ldr.w	r0, [r0, #940]	@ 0x3ac
 8018cb4:	e9c4 12e9 	strd	r1, r2, [r4, #932]	@ 0x3a4
 8018cb8:	f008 f95c 	bl	8020f74 <Argus_Dev_GetStatus>
 8018cbc:	2800      	cmp	r0, #0
 8018cbe:	db09      	blt.n	8018cd4 <Argus_Measurement_StartTimer+0x28>
 8018cc0:	f8d4 33ac 	ldr.w	r3, [r4, #940]	@ 0x3ac
 8018cc4:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8018cc8:	681b      	ldr	r3, [r3, #0]
 8018cca:	6023      	str	r3, [r4, #0]
 8018ccc:	f000 f8b2 	bl	8018e34 <TimerMngr_UpdateTimings>
 8018cd0:	2800      	cmp	r0, #0
 8018cd2:	db00      	blt.n	8018cd6 <Argus_Measurement_StartTimer+0x2a>
 8018cd4:	bd10      	pop	{r4, pc}
 8018cd6:	2300      	movs	r3, #0
 8018cd8:	e9c4 33e9 	strd	r3, r3, [r4, #932]	@ 0x3a4
 8018cdc:	6023      	str	r3, [r4, #0]
 8018cde:	bd10      	pop	{r4, pc}

08018ce0 <Argus_Measurement_StopTimer>:
 8018ce0:	b570      	push	{r4, r5, r6, lr}
 8018ce2:	4604      	mov	r4, r0
 8018ce4:	2600      	movs	r6, #0
 8018ce6:	6006      	str	r6, [r0, #0]
 8018ce8:	f000 f8a4 	bl	8018e34 <TimerMngr_UpdateTimings>
 8018cec:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 8018cf0:	4631      	mov	r1, r6
 8018cf2:	f007 ffb1 	bl	8020c58 <Argus_Dev_AwaitStatus>
 8018cf6:	1e05      	subs	r5, r0, #0
 8018cf8:	db01      	blt.n	8018cfe <Argus_Measurement_StopTimer+0x1e>
 8018cfa:	4628      	mov	r0, r5
 8018cfc:	bd70      	pop	{r4, r5, r6, pc}
 8018cfe:	f8c4 63a4 	str.w	r6, [r4, #932]	@ 0x3a4
 8018d02:	6026      	str	r6, [r4, #0]
 8018d04:	f000 f896 	bl	8018e34 <TimerMngr_UpdateTimings>
 8018d08:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 8018d0c:	7126      	strb	r6, [r4, #4]
 8018d0e:	f008 f951 	bl	8020fb4 <Argus_Dev_Abort>
 8018d12:	f884 61d9 	strb.w	r6, [r4, #473]	@ 0x1d9
 8018d16:	f884 63a1 	strb.w	r6, [r4, #929]	@ 0x3a1
 8018d1a:	4628      	mov	r0, r5
 8018d1c:	bd70      	pop	{r4, r5, r6, pc}
 8018d1e:	bf00      	nop

08018d20 <Argus_Measurement_TimerTick>:
 8018d20:	b538      	push	{r3, r4, r5, lr}
 8018d22:	6803      	ldr	r3, [r0, #0]
 8018d24:	b903      	cbnz	r3, 8018d28 <Argus_Measurement_TimerTick+0x8>
 8018d26:	bd38      	pop	{r3, r4, r5, pc}
 8018d28:	4604      	mov	r4, r0
 8018d2a:	f8d0 03ac 	ldr.w	r0, [r0, #940]	@ 0x3ac
 8018d2e:	2501      	movs	r5, #1
 8018d30:	7125      	strb	r5, [r4, #4]
 8018d32:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 8018d36:	f010 fd41 	bl	80297bc <ADS_CheckTimeout>
 8018d3a:	f7ed fe4b 	bl	80069d4 <IRQ_LOCK>
 8018d3e:	7923      	ldrb	r3, [r4, #4]
 8018d40:	b183      	cbz	r3, 8018d64 <Argus_Measurement_TimerTick+0x44>
 8018d42:	2300      	movs	r3, #0
 8018d44:	7123      	strb	r3, [r4, #4]
 8018d46:	f7ed fe23 	bl	8006990 <IRQ_UNLOCK>
 8018d4a:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 8018d4e:	21c4      	movs	r1, #196	@ 0xc4
 8018d50:	f008 f8c6 	bl	8020ee0 <Argus_Dev_SetStatus>
 8018d54:	b108      	cbz	r0, 8018d5a <Argus_Measurement_TimerTick+0x3a>
 8018d56:	7125      	strb	r5, [r4, #4]
 8018d58:	bd38      	pop	{r3, r4, r5, pc}
 8018d5a:	4620      	mov	r0, r4
 8018d5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018d60:	f7ff bd0a 	b.w	8018778 <Argus_Measurement_Start.part.0>
 8018d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018d68:	f7ed be12 	b.w	8006990 <IRQ_UNLOCK>

08018d6c <Argus_Measurement_GetRawDataBuffer>:
 8018d6c:	f890 31d9 	ldrb.w	r3, [r0, #473]	@ 0x1d9
 8018d70:	2b02      	cmp	r3, #2
 8018d72:	d00d      	beq.n	8018d90 <Argus_Measurement_GetRawDataBuffer+0x24>
 8018d74:	f890 31d9 	ldrb.w	r3, [r0, #473]	@ 0x1d9
 8018d78:	2b02      	cmp	r3, #2
 8018d7a:	d013      	beq.n	8018da4 <Argus_Measurement_GetRawDataBuffer+0x38>
 8018d7c:	f890 33a1 	ldrb.w	r3, [r0, #929]	@ 0x3a1
 8018d80:	2b02      	cmp	r3, #2
 8018d82:	d114      	bne.n	8018dae <Argus_Measurement_GetRawDataBuffer+0x42>
 8018d84:	f500 70ee 	add.w	r0, r0, #476	@ 0x1dc
 8018d88:	2301      	movs	r3, #1
 8018d8a:	f880 31c5 	strb.w	r3, [r0, #453]	@ 0x1c5
 8018d8e:	4770      	bx	lr
 8018d90:	f890 33a1 	ldrb.w	r3, [r0, #929]	@ 0x3a1
 8018d94:	2b02      	cmp	r3, #2
 8018d96:	d1ed      	bne.n	8018d74 <Argus_Measurement_GetRawDataBuffer+0x8>
 8018d98:	6982      	ldr	r2, [r0, #24]
 8018d9a:	f8d0 31e0 	ldr.w	r3, [r0, #480]	@ 0x1e0
 8018d9e:	429a      	cmp	r2, r3
 8018da0:	d007      	beq.n	8018db2 <Argus_Measurement_GetRawDataBuffer+0x46>
 8018da2:	d8ef      	bhi.n	8018d84 <Argus_Measurement_GetRawDataBuffer+0x18>
 8018da4:	3014      	adds	r0, #20
 8018da6:	2301      	movs	r3, #1
 8018da8:	f880 31c5 	strb.w	r3, [r0, #453]	@ 0x1c5
 8018dac:	4770      	bx	lr
 8018dae:	2000      	movs	r0, #0
 8018db0:	4770      	bx	lr
 8018db2:	69c2      	ldr	r2, [r0, #28]
 8018db4:	f8d0 31e4 	ldr.w	r3, [r0, #484]	@ 0x1e4
 8018db8:	429a      	cmp	r2, r3
 8018dba:	d2e3      	bcs.n	8018d84 <Argus_Measurement_GetRawDataBuffer+0x18>
 8018dbc:	e7f2      	b.n	8018da4 <Argus_Measurement_GetRawDataBuffer+0x38>
 8018dbe:	bf00      	nop

08018dc0 <Argus_Measurement_Start>:
 8018dc0:	b510      	push	{r4, lr}
 8018dc2:	4604      	mov	r4, r0
 8018dc4:	f8d0 03ac 	ldr.w	r0, [r0, #940]	@ 0x3ac
 8018dc8:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 8018dcc:	f010 fcf6 	bl	80297bc <ADS_CheckTimeout>
 8018dd0:	f7ed fe00 	bl	80069d4 <IRQ_LOCK>
 8018dd4:	7923      	ldrb	r3, [r4, #4]
 8018dd6:	b18b      	cbz	r3, 8018dfc <Argus_Measurement_Start+0x3c>
 8018dd8:	2300      	movs	r3, #0
 8018dda:	7123      	strb	r3, [r4, #4]
 8018ddc:	f7ed fdd8 	bl	8006990 <IRQ_UNLOCK>
 8018de0:	f8d4 03ac 	ldr.w	r0, [r4, #940]	@ 0x3ac
 8018de4:	21c4      	movs	r1, #196	@ 0xc4
 8018de6:	f008 f87b 	bl	8020ee0 <Argus_Dev_SetStatus>
 8018dea:	b110      	cbz	r0, 8018df2 <Argus_Measurement_Start+0x32>
 8018dec:	2301      	movs	r3, #1
 8018dee:	7123      	strb	r3, [r4, #4]
 8018df0:	bd10      	pop	{r4, pc}
 8018df2:	4620      	mov	r0, r4
 8018df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018df8:	f7ff bcbe 	b.w	8018778 <Argus_Measurement_Start.part.0>
 8018dfc:	f7ed fdc8 	bl	8006990 <IRQ_UNLOCK>
 8018e00:	2069      	movs	r0, #105	@ 0x69
 8018e02:	bd10      	pop	{r4, pc}

08018e04 <TimerCallback>:
 8018e04:	4b08      	ldr	r3, [pc, #32]	@ (8018e28 <TimerCallback+0x24>)
 8018e06:	4a09      	ldr	r2, [pc, #36]	@ (8018e2c <TimerCallback+0x28>)
 8018e08:	6819      	ldr	r1, [r3, #0]
 8018e0a:	4809      	ldr	r0, [pc, #36]	@ (8018e30 <TimerCallback+0x2c>)
 8018e0c:	b410      	push	{r4}
 8018e0e:	6814      	ldr	r4, [r2, #0]
 8018e10:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8018e14:	1c4a      	adds	r2, r1, #1
 8018e16:	42a2      	cmp	r2, r4
 8018e18:	601a      	str	r2, [r3, #0]
 8018e1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018e1e:	bf24      	itt	cs
 8018e20:	2200      	movcs	r2, #0
 8018e22:	601a      	strcs	r2, [r3, #0]
 8018e24:	f7ff bf7c 	b.w	8018d20 <Argus_Measurement_TimerTick>
 8018e28:	240036ac 	.word	0x240036ac
 8018e2c:	240036a8 	.word	0x240036a8
 8018e30:	24003698 	.word	0x24003698

08018e34 <TimerMngr_UpdateTimings>:
 8018e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e38:	f8df a0cc 	ldr.w	sl, [pc, #204]	@ 8018f08 <TimerMngr_UpdateTimings+0xd4>
 8018e3c:	4e2d      	ldr	r6, [pc, #180]	@ (8018ef4 <TimerMngr_UpdateTimings+0xc0>)
 8018e3e:	f8da 3000 	ldr.w	r3, [sl]
 8018e42:	2400      	movs	r4, #0
 8018e44:	6034      	str	r4, [r6, #0]
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d046      	beq.n	8018ed8 <TimerMngr_UpdateTimings+0xa4>
 8018e4a:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 8018f0c <TimerMngr_UpdateTimings+0xd8>
 8018e4e:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 8018ef8 <TimerMngr_UpdateTimings+0xc4>
 8018e52:	4627      	mov	r7, r4
 8018e54:	f858 5b04 	ldr.w	r5, [r8], #4
 8018e58:	4628      	mov	r0, r5
 8018e5a:	f7ff fd1d 	bl	8018898 <Argus_Measurement_GetTimerInterval>
 8018e5e:	b188      	cbz	r0, 8018e84 <TimerMngr_UpdateTimings+0x50>
 8018e60:	6833      	ldr	r3, [r6, #0]
 8018e62:	1c5a      	adds	r2, r3, #1
 8018e64:	f849 5023 	str.w	r5, [r9, r3, lsl #2]
 8018e68:	f8da 3000 	ldr.w	r3, [sl]
 8018e6c:	6032      	str	r2, [r6, #0]
 8018e6e:	3401      	adds	r4, #1
 8018e70:	429c      	cmp	r4, r3
 8018e72:	d23b      	bcs.n	8018eec <TimerMngr_UpdateTimings+0xb8>
 8018e74:	f858 5b04 	ldr.w	r5, [r8], #4
 8018e78:	4607      	mov	r7, r0
 8018e7a:	4628      	mov	r0, r5
 8018e7c:	f7ff fd0c 	bl	8018898 <Argus_Measurement_GetTimerInterval>
 8018e80:	2800      	cmp	r0, #0
 8018e82:	d1ed      	bne.n	8018e60 <TimerMngr_UpdateTimings+0x2c>
 8018e84:	f8da 3000 	ldr.w	r3, [sl]
 8018e88:	3401      	adds	r4, #1
 8018e8a:	42a3      	cmp	r3, r4
 8018e8c:	d8e2      	bhi.n	8018e54 <TimerMngr_UpdateTimings+0x20>
 8018e8e:	6833      	ldr	r3, [r6, #0]
 8018e90:	b1a3      	cbz	r3, 8018ebc <TimerMngr_UpdateTimings+0x88>
 8018e92:	4d19      	ldr	r5, [pc, #100]	@ (8018ef8 <TimerMngr_UpdateTimings+0xc4>)
 8018e94:	2400      	movs	r4, #0
 8018e96:	e002      	b.n	8018e9e <TimerMngr_UpdateTimings+0x6a>
 8018e98:	6833      	ldr	r3, [r6, #0]
 8018e9a:	42a3      	cmp	r3, r4
 8018e9c:	d90e      	bls.n	8018ebc <TimerMngr_UpdateTimings+0x88>
 8018e9e:	f855 0b04 	ldr.w	r0, [r5], #4
 8018ea2:	f7ff fcf9 	bl	8018898 <Argus_Measurement_GetTimerInterval>
 8018ea6:	42b8      	cmp	r0, r7
 8018ea8:	f104 0401 	add.w	r4, r4, #1
 8018eac:	d0f4      	beq.n	8018e98 <TimerMngr_UpdateTimings+0x64>
 8018eae:	4813      	ldr	r0, [pc, #76]	@ (8018efc <TimerMngr_UpdateTimings+0xc8>)
 8018eb0:	f7ed fb2c 	bl	800650c <print>
 8018eb4:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8018eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ebc:	b167      	cbz	r7, 8018ed8 <TimerMngr_UpdateTimings+0xa4>
 8018ebe:	4810      	ldr	r0, [pc, #64]	@ (8018f00 <TimerMngr_UpdateTimings+0xcc>)
 8018ec0:	f7ee fa06 	bl	80072d0 <Timer_SetCallback>
 8018ec4:	2800      	cmp	r0, #0
 8018ec6:	d1f7      	bne.n	8018eb8 <TimerMngr_UpdateTimings+0x84>
 8018ec8:	6833      	ldr	r3, [r6, #0]
 8018eca:	4601      	mov	r1, r0
 8018ecc:	fbb7 f0f3 	udiv	r0, r7, r3
 8018ed0:	f7ee f98a 	bl	80071e8 <Timer_SetInterval>
 8018ed4:	b128      	cbz	r0, 8018ee2 <TimerMngr_UpdateTimings+0xae>
 8018ed6:	e7ef      	b.n	8018eb8 <TimerMngr_UpdateTimings+0x84>
 8018ed8:	2000      	movs	r0, #0
 8018eda:	f7ee f9f9 	bl	80072d0 <Timer_SetCallback>
 8018ede:	2800      	cmp	r0, #0
 8018ee0:	d1ea      	bne.n	8018eb8 <TimerMngr_UpdateTimings+0x84>
 8018ee2:	4b08      	ldr	r3, [pc, #32]	@ (8018f04 <TimerMngr_UpdateTimings+0xd0>)
 8018ee4:	2000      	movs	r0, #0
 8018ee6:	6018      	str	r0, [r3, #0]
 8018ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018eec:	4607      	mov	r7, r0
 8018eee:	2a00      	cmp	r2, #0
 8018ef0:	d1cf      	bne.n	8018e92 <TimerMngr_UpdateTimings+0x5e>
 8018ef2:	e7e4      	b.n	8018ebe <TimerMngr_UpdateTimings+0x8a>
 8018ef4:	240036a8 	.word	0x240036a8
 8018ef8:	24003698 	.word	0x24003698
 8018efc:	0802ef08 	.word	0x0802ef08
 8018f00:	08018e05 	.word	0x08018e05
 8018f04:	240036ac 	.word	0x240036ac
 8018f08:	240036c0 	.word	0x240036c0
 8018f0c:	240036b0 	.word	0x240036b0

08018f10 <TimerMngr_subscribeArgus>:
 8018f10:	490f      	ldr	r1, [pc, #60]	@ (8018f50 <TimerMngr_subscribeArgus+0x40>)
 8018f12:	4a10      	ldr	r2, [pc, #64]	@ (8018f54 <TimerMngr_subscribeArgus+0x44>)
 8018f14:	680b      	ldr	r3, [r1, #0]
 8018f16:	b410      	push	{r4}
 8018f18:	b1c3      	cbz	r3, 8018f4c <TimerMngr_subscribeArgus+0x3c>
 8018f1a:	6814      	ldr	r4, [r2, #0]
 8018f1c:	4284      	cmp	r4, r0
 8018f1e:	d012      	beq.n	8018f46 <TimerMngr_subscribeArgus+0x36>
 8018f20:	2b01      	cmp	r3, #1
 8018f22:	d00c      	beq.n	8018f3e <TimerMngr_subscribeArgus+0x2e>
 8018f24:	6854      	ldr	r4, [r2, #4]
 8018f26:	42a0      	cmp	r0, r4
 8018f28:	d00d      	beq.n	8018f46 <TimerMngr_subscribeArgus+0x36>
 8018f2a:	2b02      	cmp	r3, #2
 8018f2c:	d007      	beq.n	8018f3e <TimerMngr_subscribeArgus+0x2e>
 8018f2e:	6894      	ldr	r4, [r2, #8]
 8018f30:	42a0      	cmp	r0, r4
 8018f32:	d008      	beq.n	8018f46 <TimerMngr_subscribeArgus+0x36>
 8018f34:	2b03      	cmp	r3, #3
 8018f36:	d002      	beq.n	8018f3e <TimerMngr_subscribeArgus+0x2e>
 8018f38:	68d4      	ldr	r4, [r2, #12]
 8018f3a:	4284      	cmp	r4, r0
 8018f3c:	d003      	beq.n	8018f46 <TimerMngr_subscribeArgus+0x36>
 8018f3e:	1c5c      	adds	r4, r3, #1
 8018f40:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8018f44:	600c      	str	r4, [r1, #0]
 8018f46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018f4a:	4770      	bx	lr
 8018f4c:	2401      	movs	r4, #1
 8018f4e:	e7f7      	b.n	8018f40 <TimerMngr_subscribeArgus+0x30>
 8018f50:	240036c0 	.word	0x240036c0
 8018f54:	240036b0 	.word	0x240036b0

08018f58 <TimerMngr_unsubscribeArgus>:
 8018f58:	b538      	push	{r3, r4, r5, lr}
 8018f5a:	4d19      	ldr	r5, [pc, #100]	@ (8018fc0 <TimerMngr_unsubscribeArgus+0x68>)
 8018f5c:	682c      	ldr	r4, [r5, #0]
 8018f5e:	b1ac      	cbz	r4, 8018f8c <TimerMngr_unsubscribeArgus+0x34>
 8018f60:	4a18      	ldr	r2, [pc, #96]	@ (8018fc4 <TimerMngr_unsubscribeArgus+0x6c>)
 8018f62:	6811      	ldr	r1, [r2, #0]
 8018f64:	4288      	cmp	r0, r1
 8018f66:	d012      	beq.n	8018f8e <TimerMngr_unsubscribeArgus+0x36>
 8018f68:	2c01      	cmp	r4, #1
 8018f6a:	d00f      	beq.n	8018f8c <TimerMngr_unsubscribeArgus+0x34>
 8018f6c:	6851      	ldr	r1, [r2, #4]
 8018f6e:	4288      	cmp	r0, r1
 8018f70:	d020      	beq.n	8018fb4 <TimerMngr_unsubscribeArgus+0x5c>
 8018f72:	2c02      	cmp	r4, #2
 8018f74:	d00a      	beq.n	8018f8c <TimerMngr_unsubscribeArgus+0x34>
 8018f76:	6891      	ldr	r1, [r2, #8]
 8018f78:	4288      	cmp	r0, r1
 8018f7a:	d01e      	beq.n	8018fba <TimerMngr_unsubscribeArgus+0x62>
 8018f7c:	2c03      	cmp	r4, #3
 8018f7e:	d005      	beq.n	8018f8c <TimerMngr_unsubscribeArgus+0x34>
 8018f80:	68d1      	ldr	r1, [r2, #12]
 8018f82:	4281      	cmp	r1, r0
 8018f84:	bf08      	it	eq
 8018f86:	f04f 0c03 	moveq.w	ip, #3
 8018f8a:	d002      	beq.n	8018f92 <TimerMngr_unsubscribeArgus+0x3a>
 8018f8c:	bd38      	pop	{r3, r4, r5, pc}
 8018f8e:	f04f 0c00 	mov.w	ip, #0
 8018f92:	f10c 0101 	add.w	r1, ip, #1
 8018f96:	42a1      	cmp	r1, r4
 8018f98:	f104 34ff 	add.w	r4, r4, #4294967295
 8018f9c:	d208      	bcs.n	8018fb0 <TimerMngr_unsubscribeArgus+0x58>
 8018f9e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8018fa2:	eb02 008c 	add.w	r0, r2, ip, lsl #2
 8018fa6:	eba4 020c 	sub.w	r2, r4, ip
 8018faa:	0092      	lsls	r2, r2, #2
 8018fac:	f011 ffe3 	bl	802af76 <memmove>
 8018fb0:	602c      	str	r4, [r5, #0]
 8018fb2:	bd38      	pop	{r3, r4, r5, pc}
 8018fb4:	f04f 0c01 	mov.w	ip, #1
 8018fb8:	e7eb      	b.n	8018f92 <TimerMngr_unsubscribeArgus+0x3a>
 8018fba:	f04f 0c02 	mov.w	ip, #2
 8018fbe:	e7e8      	b.n	8018f92 <TimerMngr_unsubscribeArgus+0x3a>
 8018fc0:	240036c0 	.word	0x240036c0
 8018fc4:	240036b0 	.word	0x240036b0

08018fc8 <ApplyPhaseEvaluation>:
 8018fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fcc:	460c      	mov	r4, r1
 8018fce:	f5ad 7d15 	sub.w	sp, sp, #596	@ 0x254
 8018fd2:	f8d0 3354 	ldr.w	r3, [r0, #852]	@ 0x354
 8018fd6:	920d      	str	r2, [sp, #52]	@ 0x34
 8018fd8:	8ba2      	ldrh	r2, [r4, #28]
 8018fda:	9005      	str	r0, [sp, #20]
 8018fdc:	0992      	lsrs	r2, r2, #6
 8018fde:	2a01      	cmp	r2, #1
 8018fe0:	f8d0 036c 	ldr.w	r0, [r0, #876]	@ 0x36c
 8018fe4:	900f      	str	r0, [sp, #60]	@ 0x3c
 8018fe6:	bf38      	it	cc
 8018fe8:	2201      	movcc	r2, #1
 8018fea:	2a20      	cmp	r2, #32
 8018fec:	bf94      	ite	ls
 8018fee:	1880      	addls	r0, r0, r2
 8018ff0:	3020      	addhi	r0, #32
 8018ff2:	7b1b      	ldrb	r3, [r3, #12]
 8018ff4:	910c      	str	r1, [sp, #48]	@ 0x30
 8018ff6:	8bc9      	ldrh	r1, [r1, #30]
 8018ff8:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 8018ffc:	9209      	str	r2, [sp, #36]	@ 0x24
 8018ffe:	fb01 f303 	mul.w	r3, r1, r3
 8019002:	030a      	lsls	r2, r1, #12
 8019004:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8019008:	00db      	lsls	r3, r3, #3
 801900a:	f8d4 01cc 	ldr.w	r0, [r4, #460]	@ 0x1cc
 801900e:	9304      	str	r3, [sp, #16]
 8019010:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8019014:	fbb3 f3f1 	udiv	r3, r3, r1
 8019018:	3301      	adds	r3, #1
 801901a:	085b      	lsrs	r3, r3, #1
 801901c:	9006      	str	r0, [sp, #24]
 801901e:	920a      	str	r2, [sp, #40]	@ 0x28
 8019020:	9308      	str	r3, [sp, #32]
 8019022:	2800      	cmp	r0, #0
 8019024:	f000 863a 	beq.w	8019c9c <ApplyPhaseEvaluation+0xcd4>
 8019028:	ab12      	add	r3, sp, #72	@ 0x48
 801902a:	1d05      	adds	r5, r0, #4
 801902c:	930e      	str	r3, [sp, #56]	@ 0x38
 801902e:	4620      	mov	r0, r4
 8019030:	e9d0 b204 	ldrd	fp, r2, [r0, #16]
 8019034:	0853      	lsrs	r3, r2, #1
 8019036:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 801903a:	1ad3      	subs	r3, r2, r3
 801903c:	0899      	lsrs	r1, r3, #2
 801903e:	f001 3133 	and.w	r1, r1, #858993459	@ 0x33333333
 8019042:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8019046:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 801904a:	440b      	add	r3, r1
 801904c:	f002 3255 	and.w	r2, r2, #1431655765	@ 0x55555555
 8019050:	ebab 0202 	sub.w	r2, fp, r2
 8019054:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 8019058:	f003 340f 	and.w	r4, r3, #252645135	@ 0xf0f0f0f
 801905c:	0893      	lsrs	r3, r2, #2
 801905e:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8019062:	f002 3233 	and.w	r2, r2, #858993459	@ 0x33333333
 8019066:	4413      	add	r3, r2
 8019068:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 801906c:	eb04 2404 	add.w	r4, r4, r4, lsl #8
 8019070:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8019074:	eb04 4404 	add.w	r4, r4, r4, lsl #16
 8019078:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 801907c:	eb03 4303 	add.w	r3, r3, r3, lsl #16
 8019080:	0e24      	lsrs	r4, r4, #24
 8019082:	eb04 6413 	add.w	r4, r4, r3, lsr #24
 8019086:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019088:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801908c:	691a      	ldr	r2, [r3, #16]
 801908e:	9207      	str	r2, [sp, #28]
 8019090:	3028      	adds	r0, #40	@ 0x28
 8019092:	3329      	adds	r3, #41	@ 0x29
 8019094:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 8019098:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 80190b0 <ApplyPhaseEvaluation+0xe8>
 801909c:	9010      	str	r0, [sp, #64]	@ 0x40
 801909e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80190a0:	aa54      	add	r2, sp, #336	@ 0x150
 80190a2:	f50d 7a14 	add.w	sl, sp, #592	@ 0x250
 80190a6:	2100      	movs	r1, #0
 80190a8:	9403      	str	r4, [sp, #12]
 80190aa:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
 80190ae:	e010      	b.n	80190d2 <ApplyPhaseEvaluation+0x10a>
	...
 80190b8:	ed02 7b02 	vstr	d7, [r2, #-8]
 80190bc:	3208      	adds	r2, #8
 80190be:	f04f 0301 	mov.w	r3, #1
 80190c2:	4592      	cmp	sl, r2
 80190c4:	7203      	strb	r3, [r0, #8]
 80190c6:	f101 0101 	add.w	r1, r1, #1
 80190ca:	f100 000c 	add.w	r0, r0, #12
 80190ce:	f000 80cc 	beq.w	801926a <ApplyPhaseEvaluation+0x2a2>
 80190d2:	fa2b f301 	lsr.w	r3, fp, r1
 80190d6:	07dc      	lsls	r4, r3, #31
 80190d8:	d5ee      	bpl.n	80190b8 <ApplyPhaseEvaluation+0xf0>
 80190da:	ea6f 0351 	mvn.w	r3, r1, lsr #1
 80190de:	f003 060e 	and.w	r6, r3, #14
 80190e2:	00cb      	lsls	r3, r1, #3
 80190e4:	f003 0310 	and.w	r3, r3, #16
 80190e8:	4333      	orrs	r3, r6
 80190ea:	f001 0601 	and.w	r6, r1, #1
 80190ee:	4333      	orrs	r3, r6
 80190f0:	f04f 34ff 	mov.w	r4, #4294967295
 80190f4:	9e07      	ldr	r6, [sp, #28]
 80190f6:	fa04 f303 	lsl.w	r3, r4, r3
 80190fa:	ea26 0603 	bic.w	r6, r6, r3
 80190fe:	0873      	lsrs	r3, r6, #1
 8019100:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8019104:	1af3      	subs	r3, r6, r3
 8019106:	089e      	lsrs	r6, r3, #2
 8019108:	f006 3633 	and.w	r6, r6, #858993459	@ 0x33333333
 801910c:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8019110:	4433      	add	r3, r6
 8019112:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 8019116:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 801911a:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 801911e:	eb03 4303 	add.w	r3, r3, r3, lsl #16
 8019122:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8019124:	9c03      	ldr	r4, [sp, #12]
 8019126:	0e1b      	lsrs	r3, r3, #24
 8019128:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801912c:	18f7      	adds	r7, r6, r3
 801912e:	5cf6      	ldrb	r6, [r6, r3]
 8019130:	787b      	ldrb	r3, [r7, #1]
 8019132:	021b      	lsls	r3, r3, #8
 8019134:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8019138:	78be      	ldrb	r6, [r7, #2]
 801913a:	4333      	orrs	r3, r6
 801913c:	f413 0f40 	tst.w	r3, #12582912	@ 0xc00000
 8019140:	eb07 0e04 	add.w	lr, r7, r4
 8019144:	f3c3 0915 	ubfx	r9, r3, #0, #22
 8019148:	f040 8210 	bne.w	801956c <ApplyPhaseEvaluation+0x5a4>
 801914c:	9e04      	ldr	r6, [sp, #16]
 801914e:	454e      	cmp	r6, r9
 8019150:	f200 820c 	bhi.w	801956c <ApplyPhaseEvaluation+0x5a4>
 8019154:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8019156:	454c      	cmp	r4, r9
 8019158:	bf34      	ite	cc
 801915a:	f04f 0c02 	movcc.w	ip, #2
 801915e:	f04f 0c00 	movcs.w	ip, #0
 8019162:	9c03      	ldr	r4, [sp, #12]
 8019164:	602b      	str	r3, [r5, #0]
 8019166:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801916a:	5d3b      	ldrb	r3, [r7, r4]
 801916c:	f89e 8002 	ldrb.w	r8, [lr, #2]
 8019170:	0236      	lsls	r6, r6, #8
 8019172:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8019176:	f416 0f40 	tst.w	r6, #12582912	@ 0xc00000
 801917a:	ea46 0808 	orr.w	r8, r6, r8
 801917e:	eb0e 0304 	add.w	r3, lr, r4
 8019182:	f040 81f0 	bne.w	8019566 <ApplyPhaseEvaluation+0x59e>
 8019186:	9c04      	ldr	r4, [sp, #16]
 8019188:	f3c8 0615 	ubfx	r6, r8, #0, #22
 801918c:	42b4      	cmp	r4, r6
 801918e:	f200 81ea 	bhi.w	8019566 <ApplyPhaseEvaluation+0x59e>
 8019192:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8019194:	42b4      	cmp	r4, r6
 8019196:	bf38      	it	cc
 8019198:	f04f 0c02 	movcc.w	ip, #2
 801919c:	9c03      	ldr	r4, [sp, #12]
 801919e:	f8c5 8004 	str.w	r8, [r5, #4]
 80191a2:	f817 6014 	ldrb.w	r6, [r7, r4, lsl #1]
 80191a6:	785f      	ldrb	r7, [r3, #1]
 80191a8:	023f      	lsls	r7, r7, #8
 80191aa:	ea47 4706 	orr.w	r7, r7, r6, lsl #16
 80191ae:	789e      	ldrb	r6, [r3, #2]
 80191b0:	4337      	orrs	r7, r6
 80191b2:	f417 0f40 	tst.w	r7, #12582912	@ 0xc00000
 80191b6:	4423      	add	r3, r4
 80191b8:	f3c7 0615 	ubfx	r6, r7, #0, #22
 80191bc:	f040 81d0 	bne.w	8019560 <ApplyPhaseEvaluation+0x598>
 80191c0:	9c04      	ldr	r4, [sp, #16]
 80191c2:	42b4      	cmp	r4, r6
 80191c4:	f200 81cc 	bhi.w	8019560 <ApplyPhaseEvaluation+0x598>
 80191c8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80191ca:	42b4      	cmp	r4, r6
 80191cc:	bf38      	it	cc
 80191ce:	f04f 0c02 	movcc.w	ip, #2
 80191d2:	60af      	str	r7, [r5, #8]
 80191d4:	9c03      	ldr	r4, [sp, #12]
 80191d6:	785f      	ldrb	r7, [r3, #1]
 80191d8:	f81e e014 	ldrb.w	lr, [lr, r4, lsl #1]
 80191dc:	789b      	ldrb	r3, [r3, #2]
 80191de:	023f      	lsls	r7, r7, #8
 80191e0:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 80191e4:	f417 0f40 	tst.w	r7, #12582912	@ 0xc00000
 80191e8:	ea43 0307 	orr.w	r3, r3, r7
 80191ec:	f040 81b5 	bne.w	801955a <ApplyPhaseEvaluation+0x592>
 80191f0:	9c04      	ldr	r4, [sp, #16]
 80191f2:	f3c3 0715 	ubfx	r7, r3, #0, #22
 80191f6:	42bc      	cmp	r4, r7
 80191f8:	f200 81af 	bhi.w	801955a <ApplyPhaseEvaluation+0x592>
 80191fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80191fe:	42bc      	cmp	r4, r7
 8019200:	bf38      	it	cc
 8019202:	f04f 0c02 	movcc.w	ip, #2
 8019206:	9c08      	ldr	r4, [sp, #32]
 8019208:	60eb      	str	r3, [r5, #12]
 801920a:	eba6 0609 	sub.w	r6, r6, r9
 801920e:	fb04 f606 	mul.w	r6, r4, r6
 8019212:	f842 6c08 	str.w	r6, [r2, #-8]
 8019216:	68eb      	ldr	r3, [r5, #12]
 8019218:	686f      	ldr	r7, [r5, #4]
 801921a:	f880 c008 	strb.w	ip, [r0, #8]
 801921e:	f3c7 0715 	ubfx	r7, r7, #0, #22
 8019222:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8019226:	1bdb      	subs	r3, r3, r7
 8019228:	9f06      	ldr	r7, [sp, #24]
 801922a:	fb04 f303 	mul.w	r3, r4, r3
 801922e:	b107      	cbz	r7, 8019232 <ApplyPhaseEvaluation+0x26a>
 8019230:	3510      	adds	r5, #16
 8019232:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8019234:	11b6      	asrs	r6, r6, #6
 8019236:	fb07 f606 	mul.w	r6, r7, r6
 801923a:	119b      	asrs	r3, r3, #6
 801923c:	fb07 f303 	mul.w	r3, r7, r3
 8019240:	2e00      	cmp	r6, #0
 8019242:	f842 6c08 	str.w	r6, [r2, #-8]
 8019246:	bfb8      	it	lt
 8019248:	4276      	neglt	r6, r6
 801924a:	2b00      	cmp	r3, #0
 801924c:	f842 3c04 	str.w	r3, [r2, #-4]
 8019250:	bfb8      	it	lt
 8019252:	425b      	neglt	r3, r3
 8019254:	4433      	add	r3, r6
 8019256:	3208      	adds	r2, #8
 8019258:	0b5b      	lsrs	r3, r3, #13
 801925a:	4592      	cmp	sl, r2
 801925c:	8143      	strh	r3, [r0, #10]
 801925e:	f101 0101 	add.w	r1, r1, #1
 8019262:	f100 000c 	add.w	r0, r0, #12
 8019266:	f47f af34 	bne.w	80190d2 <ApplyPhaseEvaluation+0x10a>
 801926a:	9a07      	ldr	r2, [sp, #28]
 801926c:	9c03      	ldr	r4, [sp, #12]
 801926e:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 8019272:	0853      	lsrs	r3, r2, #1
 8019274:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8019278:	1ad3      	subs	r3, r2, r3
 801927a:	089a      	lsrs	r2, r3, #2
 801927c:	f002 3233 	and.w	r2, r2, #858993459	@ 0x33333333
 8019280:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8019284:	4413      	add	r3, r2
 8019286:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 801928a:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 801928e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019290:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 8019294:	eb03 4303 	add.w	r3, r3, r3, lsl #16
 8019298:	6957      	ldr	r7, [r2, #20]
 801929a:	0e1b      	lsrs	r3, r3, #24
 801929c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80192a0:	3301      	adds	r3, #1
 80192a2:	f102 0128 	add.w	r1, r2, #40	@ 0x28
 80192a6:	07f8      	lsls	r0, r7, #31
 80192a8:	eb01 0203 	add.w	r2, r1, r3
 80192ac:	f100 8402 	bmi.w	8019ab4 <ApplyPhaseEvaluation+0xaec>
 80192b0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80192b2:	2301      	movs	r3, #1
 80192b4:	f881 31b0 	strb.w	r3, [r1, #432]	@ 0x1b0
 80192b8:	2000      	movs	r0, #0
 80192ba:	2100      	movs	r1, #0
 80192bc:	e9cd 0192 	strd	r0, r1, [sp, #584]	@ 0x248
 80192c0:	9b06      	ldr	r3, [sp, #24]
 80192c2:	b373      	cbz	r3, 8019322 <ApplyPhaseEvaluation+0x35a>
 80192c4:	087f      	lsrs	r7, r7, #1
 80192c6:	d02c      	beq.n	8019322 <ApplyPhaseEvaluation+0x35a>
 80192c8:	07f9      	lsls	r1, r7, #31
 80192ca:	d5fb      	bpl.n	80192c4 <ApplyPhaseEvaluation+0x2fc>
 80192cc:	7813      	ldrb	r3, [r2, #0]
 80192ce:	7851      	ldrb	r1, [r2, #1]
 80192d0:	7890      	ldrb	r0, [r2, #2]
 80192d2:	041b      	lsls	r3, r3, #16
 80192d4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80192d8:	4303      	orrs	r3, r0
 80192da:	1911      	adds	r1, r2, r4
 80192dc:	602b      	str	r3, [r5, #0]
 80192de:	784b      	ldrb	r3, [r1, #1]
 80192e0:	5d10      	ldrb	r0, [r2, r4]
 80192e2:	788e      	ldrb	r6, [r1, #2]
 80192e4:	021b      	lsls	r3, r3, #8
 80192e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80192ea:	4333      	orrs	r3, r6
 80192ec:	1908      	adds	r0, r1, r4
 80192ee:	606b      	str	r3, [r5, #4]
 80192f0:	7843      	ldrb	r3, [r0, #1]
 80192f2:	f812 c014 	ldrb.w	ip, [r2, r4, lsl #1]
 80192f6:	7886      	ldrb	r6, [r0, #2]
 80192f8:	021b      	lsls	r3, r3, #8
 80192fa:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80192fe:	4333      	orrs	r3, r6
 8019300:	4420      	add	r0, r4
 8019302:	60ab      	str	r3, [r5, #8]
 8019304:	7843      	ldrb	r3, [r0, #1]
 8019306:	f811 6014 	ldrb.w	r6, [r1, r4, lsl #1]
 801930a:	7881      	ldrb	r1, [r0, #2]
 801930c:	021b      	lsls	r3, r3, #8
 801930e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8019312:	430b      	orrs	r3, r1
 8019314:	087f      	lsrs	r7, r7, #1
 8019316:	60eb      	str	r3, [r5, #12]
 8019318:	f102 0203 	add.w	r2, r2, #3
 801931c:	f105 0510 	add.w	r5, r5, #16
 8019320:	d1d2      	bne.n	80192c8 <ApplyPhaseEvaluation+0x300>
 8019322:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8019324:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8019326:	aa52      	add	r2, sp, #328	@ 0x148
 8019328:	4629      	mov	r1, r5
 801932a:	f00c ff77 	bl	802621c <Argus_Cal_UpdateLddXtalkVectors>
 801932e:	9b05      	ldr	r3, [sp, #20]
 8019330:	8baa      	ldrh	r2, [r5, #28]
 8019332:	f8d3 3368 	ldr.w	r3, [r3, #872]	@ 0x368
 8019336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019338:	8a1c      	ldrh	r4, [r3, #16]
 801933a:	69ab      	ldr	r3, [r5, #24]
 801933c:	f003 0106 	and.w	r1, r3, #6
 8019340:	f1a1 0106 	sub.w	r1, r1, #6
 8019344:	fab1 f181 	clz	r1, r1
 8019348:	0949      	lsrs	r1, r1, #5
 801934a:	f403 5000 	and.w	r0, r3, #8192	@ 0x2000
 801934e:	f3c3 3340 	ubfx	r3, r3, #13, #1
 8019352:	930a      	str	r3, [sp, #40]	@ 0x28
 8019354:	9109      	str	r1, [sp, #36]	@ 0x24
 8019356:	0293      	lsls	r3, r2, #10
 8019358:	b17a      	cbz	r2, 801937a <ApplyPhaseEvaluation+0x3b2>
 801935a:	ebb3 2f84 	cmp.w	r3, r4, lsl #10
 801935e:	ea4f 2184 	mov.w	r1, r4, lsl #10
 8019362:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8019366:	f080 8335 	bcs.w	80199d4 <ApplyPhaseEvaluation+0xa0c>
 801936a:	005b      	lsls	r3, r3, #1
 801936c:	4299      	cmp	r1, r3
 801936e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8019372:	d8fa      	bhi.n	801936a <ApplyPhaseEvaluation+0x3a2>
 8019374:	2a00      	cmp	r2, #0
 8019376:	f040 832d 	bne.w	80199d4 <ApplyPhaseEvaluation+0xa0c>
 801937a:	221f      	movs	r2, #31
 801937c:	fab0 f380 	clz	r3, r0
 8019380:	095b      	lsrs	r3, r3, #5
 8019382:	3b10      	subs	r3, #16
 8019384:	4413      	add	r3, r2
 8019386:	b2dc      	uxtb	r4, r3
 8019388:	9b05      	ldr	r3, [sp, #20]
 801938a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801938c:	f8d3 136c 	ldr.w	r1, [r3, #876]	@ 0x36c
 8019390:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8019392:	940f      	str	r4, [sp, #60]	@ 0x3c
 8019394:	eb06 1846 	add.w	r8, r6, r6, lsl #5
 8019398:	eb01 0888 	add.w	r8, r1, r8, lsl #2
 801939c:	aa53      	add	r2, sp, #332	@ 0x14c
 801939e:	00b6      	lsls	r6, r6, #2
 80193a0:	e9cd 9203 	strd	r9, r2, [sp, #12]
 80193a4:	f108 0a32 	add.w	sl, r8, #50	@ 0x32
 80193a8:	9107      	str	r1, [sp, #28]
 80193aa:	f108 0834 	add.w	r8, r8, #52	@ 0x34
 80193ae:	4615      	mov	r5, r2
 80193b0:	2300      	movs	r3, #0
 80193b2:	f1c4 0e0c 	rsb	lr, r4, #12
 80193b6:	468c      	mov	ip, r1
 80193b8:	46b1      	mov	r9, r6
 80193ba:	e004      	b.n	80193c6 <ApplyPhaseEvaluation+0x3fe>
 80193bc:	3301      	adds	r3, #1
 80193be:	2b21      	cmp	r3, #33	@ 0x21
 80193c0:	f105 0508 	add.w	r5, r5, #8
 80193c4:	d032      	beq.n	801942c <ApplyPhaseEvaluation+0x464>
 80193c6:	f890 2030 	ldrb.w	r2, [r0, #48]	@ 0x30
 80193ca:	07d2      	lsls	r2, r2, #31
 80193cc:	f100 000c 	add.w	r0, r0, #12
 80193d0:	d4f4      	bmi.n	80193bc <ApplyPhaseEvaluation+0x3f4>
 80193d2:	f3c3 0240 	ubfx	r2, r3, #1, #1
 80193d6:	f003 0103 	and.w	r1, r3, #3
 80193da:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 80193de:	4449      	add	r1, r9
 80193e0:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 80193e4:	f93a 6023 	ldrsh.w	r6, [sl, r3, lsl #2]
 80193e8:	f9b2 413a 	ldrsh.w	r4, [r2, #314]	@ 0x13a
 80193ec:	f9b1 7142 	ldrsh.w	r7, [r1, #322]	@ 0x142
 80193f0:	f938 b023 	ldrsh.w	fp, [r8, r3, lsl #2]
 80193f4:	f9b2 213c 	ldrsh.w	r2, [r2, #316]	@ 0x13c
 80193f8:	4434      	add	r4, r6
 80193fa:	443c      	add	r4, r7
 80193fc:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8019400:	fa04 f40e 	lsl.w	r4, r4, lr
 8019404:	af52      	add	r7, sp, #328	@ 0x148
 8019406:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
 801940a:	445a      	add	r2, fp
 801940c:	4434      	add	r4, r6
 801940e:	f9b1 b144 	ldrsh.w	fp, [r1, #324]	@ 0x144
 8019412:	f845 4c04 	str.w	r4, [r5, #-4]
 8019416:	6879      	ldr	r1, [r7, #4]
 8019418:	4493      	add	fp, r2
 801941a:	fa0b fb0e 	lsl.w	fp, fp, lr
 801941e:	3301      	adds	r3, #1
 8019420:	4459      	add	r1, fp
 8019422:	2b21      	cmp	r3, #33	@ 0x21
 8019424:	6079      	str	r1, [r7, #4]
 8019426:	f105 0508 	add.w	r5, r5, #8
 801942a:	d1cc      	bne.n	80193c6 <ApplyPhaseEvaluation+0x3fe>
 801942c:	9b07      	ldr	r3, [sp, #28]
 801942e:	f893 345c 	ldrb.w	r3, [r3, #1116]	@ 0x45c
 8019432:	e9dd 9203 	ldrd	r9, r2, [sp, #12]
 8019436:	2b00      	cmp	r3, #0
 8019438:	f000 81b2 	beq.w	80197a0 <ApplyPhaseEvaluation+0x7d8>
 801943c:	9b05      	ldr	r3, [sp, #20]
 801943e:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 8019442:	f8d3 1348 	ldr.w	r1, [r3, #840]	@ 0x348
 8019446:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 801944a:	9103      	str	r1, [sp, #12]
 801944c:	ea81 70e1 	eor.w	r0, r1, r1, asr #31
 8019450:	eba0 70e1 	sub.w	r0, r0, r1, asr #31
 8019454:	4601      	mov	r1, r0
 8019456:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 801945a:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 801945e:	f04f 0a00 	mov.w	sl, #0
 8019462:	9006      	str	r0, [sp, #24]
 8019464:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8019466:	f8dd b030 	ldr.w	fp, [sp, #48]	@ 0x30
 801946a:	9304      	str	r3, [sp, #16]
 801946c:	ac13      	add	r4, sp, #76	@ 0x4c
 801946e:	4650      	mov	r0, sl
 8019470:	4689      	mov	r9, r1
 8019472:	9211      	str	r2, [sp, #68]	@ 0x44
 8019474:	e009      	b.n	801948a <ApplyPhaseEvaluation+0x4c2>
 8019476:	3001      	adds	r0, #1
 8019478:	2820      	cmp	r0, #32
 801947a:	f105 0508 	add.w	r5, r5, #8
 801947e:	f10b 0b0c 	add.w	fp, fp, #12
 8019482:	f104 0408 	add.w	r4, r4, #8
 8019486:	f000 8188 	beq.w	801979a <ApplyPhaseEvaluation+0x7d2>
 801948a:	f89b 3030 	ldrb.w	r3, [fp, #48]	@ 0x30
 801948e:	f844 ac04 	str.w	sl, [r4, #-4]
 8019492:	07db      	lsls	r3, r3, #31
 8019494:	f8c5 a004 	str.w	sl, [r5, #4]
 8019498:	d4ed      	bmi.n	8019476 <ApplyPhaseEvaluation+0x4ae>
 801949a:	07c7      	lsls	r7, r0, #31
 801949c:	ea4f 0190 	mov.w	r1, r0, lsr #2
 80194a0:	f000 0603 	and.w	r6, r0, #3
 80194a4:	f100 80c8 	bmi.w	8019638 <ApplyPhaseEvaluation+0x670>
 80194a8:	2e00      	cmp	r6, #0
 80194aa:	d062      	beq.n	8019572 <ApplyPhaseEvaluation+0x5aa>
 80194ac:	f020 0e03 	bic.w	lr, r0, #3
 80194b0:	f106 3cff 	add.w	ip, r6, #4294967295
 80194b4:	ea4e 030c 	orr.w	r3, lr, ip
 80194b8:	aa52      	add	r2, sp, #328	@ 0x148
 80194ba:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80194be:	af52      	add	r7, sp, #328	@ 0x148
 80194c0:	6852      	ldr	r2, [r2, #4]
 80194c2:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
 80194c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80194ca:	2907      	cmp	r1, #7
 80194cc:	606a      	str	r2, [r5, #4]
 80194ce:	f000 82e7 	beq.w	8019aa0 <ApplyPhaseEvaluation+0xad8>
 80194d2:	1c4f      	adds	r7, r1, #1
 80194d4:	ea4c 0c87 	orr.w	ip, ip, r7, lsl #2
 80194d8:	ea46 0887 	orr.w	r8, r6, r7, lsl #2
 80194dc:	00bf      	lsls	r7, r7, #2
 80194de:	9708      	str	r7, [sp, #32]
 80194e0:	af52      	add	r7, sp, #328	@ 0x148
 80194e2:	eb07 07cc 	add.w	r7, r7, ip, lsl #3
 80194e6:	970b      	str	r7, [sp, #44]	@ 0x2c
 80194e8:	af52      	add	r7, sp, #328	@ 0x148
 80194ea:	2e03      	cmp	r6, #3
 80194ec:	f857 c03c 	ldr.w	ip, [r7, ip, lsl #3]
 80194f0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80194f2:	4463      	add	r3, ip
 80194f4:	f8d7 c004 	ldr.w	ip, [r7, #4]
 80194f8:	af52      	add	r7, sp, #328	@ 0x148
 80194fa:	4462      	add	r2, ip
 80194fc:	eb07 0cc8 	add.w	ip, r7, r8, lsl #3
 8019500:	f857 8038 	ldr.w	r8, [r7, r8, lsl #3]
 8019504:	f8dc c004 	ldr.w	ip, [ip, #4]
 8019508:	4443      	add	r3, r8
 801950a:	4462      	add	r2, ip
 801950c:	f844 3c04 	str.w	r3, [r4, #-4]
 8019510:	606a      	str	r2, [r5, #4]
 8019512:	d13c      	bne.n	801958e <ApplyPhaseEvaluation+0x5c6>
 8019514:	2900      	cmp	r1, #0
 8019516:	d15d      	bne.n	80195d4 <ApplyPhaseEvaluation+0x60c>
 8019518:	2b00      	cmp	r3, #0
 801951a:	db69      	blt.n	80195f0 <ApplyPhaseEvaluation+0x628>
 801951c:	9903      	ldr	r1, [sp, #12]
 801951e:	2900      	cmp	r1, #0
 8019520:	f2c0 8108 	blt.w	8019734 <ApplyPhaseEvaluation+0x76c>
 8019524:	fba9 3603 	umull	r3, r6, r9, r3
 8019528:	0c19      	lsrs	r1, r3, #16
 801952a:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 801952e:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8019532:	4419      	add	r1, r3
 8019534:	2a00      	cmp	r2, #0
 8019536:	f844 1c04 	str.w	r1, [r4, #-4]
 801953a:	db6c      	blt.n	8019616 <ApplyPhaseEvaluation+0x64e>
 801953c:	9b04      	ldr	r3, [sp, #16]
 801953e:	2b00      	cmp	r3, #0
 8019540:	f2c0 8104 	blt.w	801974c <ApplyPhaseEvaluation+0x784>
 8019544:	9b06      	ldr	r3, [sp, #24]
 8019546:	fba3 2102 	umull	r2, r1, r3, r2
 801954a:	0c13      	lsrs	r3, r2, #16
 801954c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8019550:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8019554:	4413      	add	r3, r2
 8019556:	606b      	str	r3, [r5, #4]
 8019558:	e78d      	b.n	8019476 <ApplyPhaseEvaluation+0x4ae>
 801955a:	f04f 0c02 	mov.w	ip, #2
 801955e:	e652      	b.n	8019206 <ApplyPhaseEvaluation+0x23e>
 8019560:	f04f 0c02 	mov.w	ip, #2
 8019564:	e635      	b.n	80191d2 <ApplyPhaseEvaluation+0x20a>
 8019566:	f04f 0c02 	mov.w	ip, #2
 801956a:	e617      	b.n	801919c <ApplyPhaseEvaluation+0x1d4>
 801956c:	f04f 0c02 	mov.w	ip, #2
 8019570:	e5f8      	b.n	8019164 <ApplyPhaseEvaluation+0x19c>
 8019572:	2907      	cmp	r1, #7
 8019574:	f000 828d 	beq.w	8019a92 <ApplyPhaseEvaluation+0xaca>
 8019578:	1c4f      	adds	r7, r1, #1
 801957a:	017b      	lsls	r3, r7, #5
 801957c:	aa52      	add	r2, sp, #328	@ 0x148
 801957e:	f020 0e03 	bic.w	lr, r0, #3
 8019582:	58d3      	ldr	r3, [r2, r3]
 8019584:	eb02 1247 	add.w	r2, r2, r7, lsl #5
 8019588:	00bf      	lsls	r7, r7, #2
 801958a:	6852      	ldr	r2, [r2, #4]
 801958c:	9708      	str	r7, [sp, #32]
 801958e:	9f08      	ldr	r7, [sp, #32]
 8019590:	f106 0c01 	add.w	ip, r6, #1
 8019594:	ea47 070c 	orr.w	r7, r7, ip
 8019598:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 801959c:	9708      	str	r7, [sp, #32]
 801959e:	eb08 07c7 	add.w	r7, r8, r7, lsl #3
 80195a2:	970b      	str	r7, [sp, #44]	@ 0x2c
 80195a4:	9f08      	ldr	r7, [sp, #32]
 80195a6:	f858 7037 	ldr.w	r7, [r8, r7, lsl #3]
 80195aa:	443b      	add	r3, r7
 80195ac:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80195ae:	687f      	ldr	r7, [r7, #4]
 80195b0:	443a      	add	r2, r7
 80195b2:	ea4e 0c0c 	orr.w	ip, lr, ip
 80195b6:	af52      	add	r7, sp, #328	@ 0x148
 80195b8:	eb07 07cc 	add.w	r7, r7, ip, lsl #3
 80195bc:	f50d 7ea4 	add.w	lr, sp, #328	@ 0x148
 80195c0:	687f      	ldr	r7, [r7, #4]
 80195c2:	f85e c03c 	ldr.w	ip, [lr, ip, lsl #3]
 80195c6:	443a      	add	r2, r7
 80195c8:	4463      	add	r3, ip
 80195ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80195ce:	606a      	str	r2, [r5, #4]
 80195d0:	2900      	cmp	r1, #0
 80195d2:	d0a1      	beq.n	8019518 <ApplyPhaseEvaluation+0x550>
 80195d4:	3901      	subs	r1, #1
 80195d6:	ea46 0681 	orr.w	r6, r6, r1, lsl #2
 80195da:	af52      	add	r7, sp, #328	@ 0x148
 80195dc:	a952      	add	r1, sp, #328	@ 0x148
 80195de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80195e2:	f857 6036 	ldr.w	r6, [r7, r6, lsl #3]
 80195e6:	6849      	ldr	r1, [r1, #4]
 80195e8:	4433      	add	r3, r6
 80195ea:	2b00      	cmp	r3, #0
 80195ec:	440a      	add	r2, r1
 80195ee:	da95      	bge.n	801951c <ApplyPhaseEvaluation+0x554>
 80195f0:	9903      	ldr	r1, [sp, #12]
 80195f2:	2900      	cmp	r1, #0
 80195f4:	f1c3 0300 	rsb	r3, r3, #0
 80195f8:	f2c0 81d6 	blt.w	80199a8 <ApplyPhaseEvaluation+0x9e0>
 80195fc:	fba9 3603 	umull	r3, r6, r9, r3
 8019600:	0c19      	lsrs	r1, r3, #16
 8019602:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 8019606:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 801960a:	4419      	add	r1, r3
 801960c:	4249      	negs	r1, r1
 801960e:	2a00      	cmp	r2, #0
 8019610:	f844 1c04 	str.w	r1, [r4, #-4]
 8019614:	da92      	bge.n	801953c <ApplyPhaseEvaluation+0x574>
 8019616:	9b04      	ldr	r3, [sp, #16]
 8019618:	2b00      	cmp	r3, #0
 801961a:	f1c2 0200 	rsb	r2, r2, #0
 801961e:	f2c0 81b6 	blt.w	801998e <ApplyPhaseEvaluation+0x9c6>
 8019622:	9b06      	ldr	r3, [sp, #24]
 8019624:	fba2 2103 	umull	r2, r1, r2, r3
 8019628:	0c13      	lsrs	r3, r2, #16
 801962a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801962e:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8019632:	4413      	add	r3, r2
 8019634:	425b      	negs	r3, r3
 8019636:	e78e      	b.n	8019556 <ApplyPhaseEvaluation+0x58e>
 8019638:	2900      	cmp	r1, #0
 801963a:	d053      	beq.n	80196e4 <ApplyPhaseEvaluation+0x71c>
 801963c:	b326      	cbz	r6, 8019688 <ApplyPhaseEvaluation+0x6c0>
 801963e:	f106 3eff 	add.w	lr, r6, #4294967295
 8019642:	1e4f      	subs	r7, r1, #1
 8019644:	ea4e 0387 	orr.w	r3, lr, r7, lsl #2
 8019648:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 801964c:	aa52      	add	r2, sp, #328	@ 0x148
 801964e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8019652:	f020 0c03 	bic.w	ip, r0, #3
 8019656:	f858 3033 	ldr.w	r3, [r8, r3, lsl #3]
 801965a:	9308      	str	r3, [sp, #32]
 801965c:	ea4c 0e0e 	orr.w	lr, ip, lr
 8019660:	ab52      	add	r3, sp, #328	@ 0x148
 8019662:	eb08 08ce 	add.w	r8, r8, lr, lsl #3
 8019666:	f853 e03e 	ldr.w	lr, [r3, lr, lsl #3]
 801966a:	9b08      	ldr	r3, [sp, #32]
 801966c:	6852      	ldr	r2, [r2, #4]
 801966e:	4473      	add	r3, lr
 8019670:	f8d8 e004 	ldr.w	lr, [r8, #4]
 8019674:	f844 3c04 	str.w	r3, [r4, #-4]
 8019678:	4472      	add	r2, lr
 801967a:	2907      	cmp	r1, #7
 801967c:	606a      	str	r2, [r5, #4]
 801967e:	d13f      	bne.n	8019700 <ApplyPhaseEvaluation+0x738>
 8019680:	2e03      	cmp	r6, #3
 8019682:	d107      	bne.n	8019694 <ApplyPhaseEvaluation+0x6cc>
 8019684:	00bf      	lsls	r7, r7, #2
 8019686:	e022      	b.n	80196ce <ApplyPhaseEvaluation+0x706>
 8019688:	2907      	cmp	r1, #7
 801968a:	f040 8199 	bne.w	80199c0 <ApplyPhaseEvaluation+0x9f8>
 801968e:	4633      	mov	r3, r6
 8019690:	4632      	mov	r2, r6
 8019692:	2706      	movs	r7, #6
 8019694:	f106 0e01 	add.w	lr, r6, #1
 8019698:	f04e 011c 	orr.w	r1, lr, #28
 801969c:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 80196a0:	f50d 7ca4 	add.w	ip, sp, #328	@ 0x148
 80196a4:	eb0c 0cc1 	add.w	ip, ip, r1, lsl #3
 80196a8:	f858 1031 	ldr.w	r1, [r8, r1, lsl #3]
 80196ac:	440b      	add	r3, r1
 80196ae:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80196b2:	440a      	add	r2, r1
 80196b4:	ea4e 0e87 	orr.w	lr, lr, r7, lsl #2
 80196b8:	a952      	add	r1, sp, #328	@ 0x148
 80196ba:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 80196be:	f50d 7ca4 	add.w	ip, sp, #328	@ 0x148
 80196c2:	6849      	ldr	r1, [r1, #4]
 80196c4:	f85c c03e 	ldr.w	ip, [ip, lr, lsl #3]
 80196c8:	00bf      	lsls	r7, r7, #2
 80196ca:	4463      	add	r3, ip
 80196cc:	440a      	add	r2, r1
 80196ce:	4337      	orrs	r7, r6
 80196d0:	a952      	add	r1, sp, #328	@ 0x148
 80196d2:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 80196d6:	ae52      	add	r6, sp, #328	@ 0x148
 80196d8:	6849      	ldr	r1, [r1, #4]
 80196da:	f856 6037 	ldr.w	r6, [r6, r7, lsl #3]
 80196de:	440a      	add	r2, r1
 80196e0:	4433      	add	r3, r6
 80196e2:	e719      	b.n	8019518 <ApplyPhaseEvaluation+0x550>
 80196e4:	2e00      	cmp	r6, #0
 80196e6:	d03e      	beq.n	8019766 <ApplyPhaseEvaluation+0x79e>
 80196e8:	f020 0c03 	bic.w	ip, r0, #3
 80196ec:	1e73      	subs	r3, r6, #1
 80196ee:	ea4c 0303 	orr.w	r3, ip, r3
 80196f2:	aa52      	add	r2, sp, #328	@ 0x148
 80196f4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80196f8:	af52      	add	r7, sp, #328	@ 0x148
 80196fa:	6852      	ldr	r2, [r2, #4]
 80196fc:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
 8019700:	1c4f      	adds	r7, r1, #1
 8019702:	ea46 0787 	orr.w	r7, r6, r7, lsl #2
 8019706:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 801970a:	f50d 7ea4 	add.w	lr, sp, #328	@ 0x148
 801970e:	eb0e 0ec7 	add.w	lr, lr, r7, lsl #3
 8019712:	f858 7037 	ldr.w	r7, [r8, r7, lsl #3]
 8019716:	443b      	add	r3, r7
 8019718:	f8de 7004 	ldr.w	r7, [lr, #4]
 801971c:	f844 3c04 	str.w	r3, [r4, #-4]
 8019720:	443a      	add	r2, r7
 8019722:	2e03      	cmp	r6, #3
 8019724:	606a      	str	r2, [r5, #4]
 8019726:	d122      	bne.n	801976e <ApplyPhaseEvaluation+0x7a6>
 8019728:	2900      	cmp	r1, #0
 801972a:	f43f aef5 	beq.w	8019518 <ApplyPhaseEvaluation+0x550>
 801972e:	1e4f      	subs	r7, r1, #1
 8019730:	00bf      	lsls	r7, r7, #2
 8019732:	e7cc      	b.n	80196ce <ApplyPhaseEvaluation+0x706>
 8019734:	17d9      	asrs	r1, r3, #31
 8019736:	fba3 3609 	umull	r3, r6, r3, r9
 801973a:	fb09 6601 	mla	r6, r9, r1, r6
 801973e:	0c19      	lsrs	r1, r3, #16
 8019740:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 8019744:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8019748:	4419      	add	r1, r3
 801974a:	e75f      	b.n	801960c <ApplyPhaseEvaluation+0x644>
 801974c:	9e06      	ldr	r6, [sp, #24]
 801974e:	17d3      	asrs	r3, r2, #31
 8019750:	fba2 2106 	umull	r2, r1, r2, r6
 8019754:	fb06 1103 	mla	r1, r6, r3, r1
 8019758:	0c13      	lsrs	r3, r2, #16
 801975a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801975e:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8019762:	4413      	add	r3, r2
 8019764:	e766      	b.n	8019634 <ApplyPhaseEvaluation+0x66c>
 8019766:	e9dd 325a 	ldrd	r3, r2, [sp, #360]	@ 0x168
 801976a:	f020 0c03 	bic.w	ip, r0, #3
 801976e:	f106 0e01 	add.w	lr, r6, #1
 8019772:	ea4c 0c0e 	orr.w	ip, ip, lr
 8019776:	af52      	add	r7, sp, #328	@ 0x148
 8019778:	eb07 07cc 	add.w	r7, r7, ip, lsl #3
 801977c:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 8019780:	687f      	ldr	r7, [r7, #4]
 8019782:	f858 c03c 	ldr.w	ip, [r8, ip, lsl #3]
 8019786:	443a      	add	r2, r7
 8019788:	4463      	add	r3, ip
 801978a:	f844 3c04 	str.w	r3, [r4, #-4]
 801978e:	606a      	str	r2, [r5, #4]
 8019790:	2900      	cmp	r1, #0
 8019792:	f43f aec1 	beq.w	8019518 <ApplyPhaseEvaluation+0x550>
 8019796:	1e4f      	subs	r7, r1, #1
 8019798:	e78c      	b.n	80196b4 <ApplyPhaseEvaluation+0x6ec>
 801979a:	f8dd 9034 	ldr.w	r9, [sp, #52]	@ 0x34
 801979e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80197a0:	9b07      	ldr	r3, [sp, #28]
 80197a2:	f8b3 4204 	ldrh.w	r4, [r3, #516]	@ 0x204
 80197a6:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 80197aa:	d02c      	beq.n	8019806 <ApplyPhaseEvaluation+0x83e>
 80197ac:	b35c      	cbz	r4, 8019806 <ApplyPhaseEvaluation+0x83e>
 80197ae:	f04f 0800 	mov.w	r8, #0
 80197b2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80197b4:	ae95      	add	r6, sp, #596	@ 0x254
 80197b6:	46c2      	mov	sl, r8
 80197b8:	e011      	b.n	80197de <ApplyPhaseEvaluation+0x816>
 80197ba:	0bcb      	lsrs	r3, r1, #15
 80197bc:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
 80197c0:	f3c1 3180 	ubfx	r1, r1, #14, #1
 80197c4:	440b      	add	r3, r1
 80197c6:	6811      	ldr	r1, [r2, #0]
 80197c8:	f842 3c04 	str.w	r3, [r2, #-4]
 80197cc:	eb0a 0a63 	add.w	sl, sl, r3, asr #1
 80197d0:	eb08 0861 	add.w	r8, r8, r1, asr #1
 80197d4:	3208      	adds	r2, #8
 80197d6:	4296      	cmp	r6, r2
 80197d8:	f100 000c 	add.w	r0, r0, #12
 80197dc:	d027      	beq.n	801982e <ApplyPhaseEvaluation+0x866>
 80197de:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80197e2:	07dd      	lsls	r5, r3, #31
 80197e4:	d4f6      	bmi.n	80197d4 <ApplyPhaseEvaluation+0x80c>
 80197e6:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80197ea:	424b      	negs	r3, r1
 80197ec:	fb83 3c04 	smull	r3, ip, r3, r4
 80197f0:	0bdd      	lsrs	r5, r3, #15
 80197f2:	2900      	cmp	r1, #0
 80197f4:	ea45 454c 	orr.w	r5, r5, ip, lsl #17
 80197f8:	fb84 1701 	smull	r1, r7, r4, r1
 80197fc:	f343 3380 	sbfx	r3, r3, #14, #1
 8019800:	dadb      	bge.n	80197ba <ApplyPhaseEvaluation+0x7f2>
 8019802:	1b5b      	subs	r3, r3, r5
 8019804:	e7df      	b.n	80197c6 <ApplyPhaseEvaluation+0x7fe>
 8019806:	f04f 0800 	mov.w	r8, #0
 801980a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801980c:	ac95      	add	r4, sp, #596	@ 0x254
 801980e:	46c2      	mov	sl, r8
 8019810:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8019814:	07de      	lsls	r6, r3, #31
 8019816:	f100 000c 	add.w	r0, r0, #12
 801981a:	d405      	bmi.n	8019828 <ApplyPhaseEvaluation+0x860>
 801981c:	e952 1301 	ldrd	r1, r3, [r2, #-4]
 8019820:	eb0a 0a61 	add.w	sl, sl, r1, asr #1
 8019824:	eb08 0863 	add.w	r8, r8, r3, asr #1
 8019828:	3208      	adds	r2, #8
 801982a:	4294      	cmp	r4, r2
 801982c:	d1f0      	bne.n	8019810 <ApplyPhaseEvaluation+0x848>
 801982e:	9807      	ldr	r0, [sp, #28]
 8019830:	f00b f80c 	bl	802484c <Argus_Cal_GetCalibrationPtr>
 8019834:	f890 324c 	ldrb.w	r3, [r0, #588]	@ 0x24c
 8019838:	2b00      	cmp	r3, #0
 801983a:	f040 81d1 	bne.w	8019be0 <ApplyPhaseEvaluation+0xc18>
 801983e:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8019842:	461d      	mov	r5, r3
 8019844:	9a05      	ldr	r2, [sp, #20]
 8019846:	4e99      	ldr	r6, [pc, #612]	@ (8019aac <ApplyPhaseEvaluation+0xae4>)
 8019848:	f8d2 3354 	ldr.w	r3, [r2, #852]	@ 0x354
 801984c:	f8d2 036c 	ldr.w	r0, [r2, #876]	@ 0x36c
 8019850:	7b5a      	ldrb	r2, [r3, #13]
 8019852:	89db      	ldrh	r3, [r3, #14]
 8019854:	9306      	str	r3, [sp, #24]
 8019856:	4b96      	ldr	r3, [pc, #600]	@ (8019ab0 <ApplyPhaseEvaluation+0xae8>)
 8019858:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 801985c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801985e:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 8019862:	2a02      	cmp	r2, #2
 8019864:	bf18      	it	ne
 8019866:	461e      	movne	r6, r3
 8019868:	f890 345c 	ldrb.w	r3, [r0, #1116]	@ 0x45c
 801986c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801986e:	9303      	str	r3, [sp, #12]
 8019870:	f8b0 3208 	ldrh.w	r3, [r0, #520]	@ 0x208
 8019874:	9304      	str	r3, [sp, #16]
 8019876:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019878:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 801987c:	0152      	lsls	r2, r2, #5
 801987e:	f503 77d4 	add.w	r7, r3, #424	@ 0x1a8
 8019882:	469a      	mov	sl, r3
 8019884:	4690      	mov	r8, r2
 8019886:	f89b 3008 	ldrb.w	r3, [fp, #8]
 801988a:	07d9      	lsls	r1, r3, #31
 801988c:	d43c      	bmi.n	8019908 <ApplyPhaseEvaluation+0x940>
 801988e:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 8019892:	42ab      	cmp	r3, r5
 8019894:	d20e      	bcs.n	80198b4 <ApplyPhaseEvaluation+0x8ec>
 8019896:	9a06      	ldr	r2, [sp, #24]
 8019898:	429a      	cmp	r2, r3
 801989a:	d80b      	bhi.n	80198b4 <ApplyPhaseEvaluation+0x8ec>
 801989c:	f8d9 3000 	ldr.w	r3, [r9]
 80198a0:	9a08      	ldr	r2, [sp, #32]
 80198a2:	4413      	add	r3, r2
 80198a4:	f8c9 3000 	str.w	r3, [r9]
 80198a8:	9a07      	ldr	r2, [sp, #28]
 80198aa:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80198ae:	4413      	add	r3, r2
 80198b0:	f8c9 3004 	str.w	r3, [r9, #4]
 80198b4:	9b03      	ldr	r3, [sp, #12]
 80198b6:	4649      	mov	r1, r9
 80198b8:	b14b      	cbz	r3, 80198ce <ApplyPhaseEvaluation+0x906>
 80198ba:	e9d9 3000 	ldrd	r3, r0, [r9]
 80198be:	6822      	ldr	r2, [r4, #0]
 80198c0:	4413      	add	r3, r2
 80198c2:	f8c9 3000 	str.w	r3, [r9]
 80198c6:	6863      	ldr	r3, [r4, #4]
 80198c8:	4403      	add	r3, r0
 80198ca:	f8c9 3004 	str.w	r3, [r9, #4]
 80198ce:	4658      	mov	r0, fp
 80198d0:	47b0      	blx	r6
 80198d2:	f89b 3008 	ldrb.w	r3, [fp, #8]
 80198d6:	079a      	lsls	r2, r3, #30
 80198d8:	d505      	bpl.n	80198e6 <ApplyPhaseEvaluation+0x91e>
 80198da:	f8da 3018 	ldr.w	r3, [sl, #24]
 80198de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80198e2:	f8ca 3018 	str.w	r3, [sl, #24]
 80198e6:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 80198ea:	9a05      	ldr	r2, [sp, #20]
 80198ec:	9904      	ldr	r1, [sp, #16]
 80198ee:	f8d2 036c 	ldr.w	r0, [r2, #876]	@ 0x36c
 80198f2:	f3c3 2244 	ubfx	r2, r3, #9, #5
 80198f6:	4442      	add	r2, r8
 80198f8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80198fc:	1a5b      	subs	r3, r3, r1
 80198fe:	f8b2 22a6 	ldrh.w	r2, [r2, #678]	@ 0x2a6
 8019902:	1a9b      	subs	r3, r3, r2
 8019904:	f8ab 3004 	strh.w	r3, [fp, #4]
 8019908:	f10b 0b0c 	add.w	fp, fp, #12
 801990c:	455f      	cmp	r7, fp
 801990e:	f109 0908 	add.w	r9, r9, #8
 8019912:	f104 0408 	add.w	r4, r4, #8
 8019916:	d1b6      	bne.n	8019886 <ApplyPhaseEvaluation+0x8be>
 8019918:	e9dd 2a0c 	ldrd	r2, sl, [sp, #48]	@ 0x30
 801991c:	f892 31b0 	ldrb.w	r3, [r2, #432]	@ 0x1b0
 8019920:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 8019924:	07db      	lsls	r3, r3, #31
 8019926:	d421      	bmi.n	801996c <ApplyPhaseEvaluation+0x9a4>
 8019928:	f8b2 31b2 	ldrh.w	r3, [r2, #434]	@ 0x1b2
 801992c:	42ab      	cmp	r3, r5
 801992e:	d36d      	bcc.n	8019a0c <ApplyPhaseEvaluation+0xa44>
 8019930:	4638      	mov	r0, r7
 8019932:	a992      	add	r1, sp, #584	@ 0x248
 8019934:	47b0      	blx	r6
 8019936:	9b05      	ldr	r3, [sp, #20]
 8019938:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801993a:	f8d3 036c 	ldr.w	r0, [r3, #876]	@ 0x36c
 801993e:	f8b1 31ac 	ldrh.w	r3, [r1, #428]	@ 0x1ac
 8019942:	f8b0 220a 	ldrh.w	r2, [r0, #522]	@ 0x20a
 8019946:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8019948:	1a9a      	subs	r2, r3, r2
 801994a:	f3c3 2344 	ubfx	r3, r3, #9, #5
 801994e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8019952:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019956:	f8b3 32a6 	ldrh.w	r3, [r3, #678]	@ 0x2a6
 801995a:	1ad3      	subs	r3, r2, r3
 801995c:	f8a1 31ac 	strh.w	r3, [r1, #428]	@ 0x1ac
 8019960:	f891 31b0 	ldrb.w	r3, [r1, #432]	@ 0x1b0
 8019964:	f043 0304 	orr.w	r3, r3, #4
 8019968:	f881 31b0 	strb.w	r3, [r1, #432]	@ 0x1b0
 801996c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801996e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 8019972:	b143      	cbz	r3, 8019986 <ApplyPhaseEvaluation+0x9be>
 8019974:	f503 7207 	add.w	r2, r3, #540	@ 0x21c
 8019978:	9200      	str	r2, [sp, #0]
 801997a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801997c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801997e:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8019982:	f00c feeb 	bl	802675c <Argus_Cal_GetXtalkVectors>
 8019986:	f50d 7d15 	add.w	sp, sp, #596	@ 0x254
 801998a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801998e:	9e06      	ldr	r6, [sp, #24]
 8019990:	17d3      	asrs	r3, r2, #31
 8019992:	fba2 1206 	umull	r1, r2, r2, r6
 8019996:	fb06 2203 	mla	r2, r6, r3, r2
 801999a:	0c0b      	lsrs	r3, r1, #16
 801999c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80199a0:	f3c1 32c0 	ubfx	r2, r1, #15, #1
 80199a4:	4413      	add	r3, r2
 80199a6:	e5d6      	b.n	8019556 <ApplyPhaseEvaluation+0x58e>
 80199a8:	17d9      	asrs	r1, r3, #31
 80199aa:	fba3 3609 	umull	r3, r6, r3, r9
 80199ae:	fb09 6601 	mla	r6, r9, r1, r6
 80199b2:	0c19      	lsrs	r1, r3, #16
 80199b4:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 80199b8:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 80199bc:	4419      	add	r1, r3
 80199be:	e5b9      	b.n	8019534 <ApplyPhaseEvaluation+0x56c>
 80199c0:	1c4a      	adds	r2, r1, #1
 80199c2:	af52      	add	r7, sp, #328	@ 0x148
 80199c4:	0153      	lsls	r3, r2, #5
 80199c6:	eb07 1242 	add.w	r2, r7, r2, lsl #5
 80199ca:	58fb      	ldr	r3, [r7, r3]
 80199cc:	6852      	ldr	r2, [r2, #4]
 80199ce:	f020 0c03 	bic.w	ip, r0, #3
 80199d2:	e6cc      	b.n	801976e <ApplyPhaseEvaluation+0x7a6>
 80199d4:	2400      	movs	r4, #0
 80199d6:	1acd      	subs	r5, r1, r3
 80199d8:	b149      	cbz	r1, 80199ee <ApplyPhaseEvaluation+0xa26>
 80199da:	428b      	cmp	r3, r1
 80199dc:	d854      	bhi.n	8019a88 <ApplyPhaseEvaluation+0xac0>
 80199de:	4314      	orrs	r4, r2
 80199e0:	0852      	lsrs	r2, r2, #1
 80199e2:	ea4f 0145 	mov.w	r1, r5, lsl #1
 80199e6:	d1f6      	bne.n	80199d6 <ApplyPhaseEvaluation+0xa0e>
 80199e8:	428b      	cmp	r3, r1
 80199ea:	d800      	bhi.n	80199ee <ApplyPhaseEvaluation+0xa26>
 80199ec:	3401      	adds	r4, #1
 80199ee:	2c00      	cmp	r4, #0
 80199f0:	f6ff acc3 	blt.w	801937a <ApplyPhaseEvaluation+0x3b2>
 80199f4:	fab4 f384 	clz	r3, r4
 80199f8:	f1c3 021e 	rsb	r2, r3, #30
 80199fc:	40d4      	lsrs	r4, r2
 80199fe:	f1c3 031f 	rsb	r3, r3, #31
 8019a02:	2c03      	cmp	r4, #3
 8019a04:	bf08      	it	eq
 8019a06:	3301      	addeq	r3, #1
 8019a08:	b2da      	uxtb	r2, r3
 8019a0a:	e4b7      	b.n	801937c <ApplyPhaseEvaluation+0x3b4>
 8019a0c:	9a06      	ldr	r2, [sp, #24]
 8019a0e:	429a      	cmp	r2, r3
 8019a10:	d88e      	bhi.n	8019930 <ApplyPhaseEvaluation+0x968>
 8019a12:	9b05      	ldr	r3, [sp, #20]
 8019a14:	f1ba 0f00 	cmp.w	sl, #0
 8019a18:	e9d3 10d0 	ldrd	r1, r0, [r3, #832]	@ 0x340
 8019a1c:	f2c0 8181 	blt.w	8019d22 <ApplyPhaseEvaluation+0xd5a>
 8019a20:	4653      	mov	r3, sl
 8019a22:	f04f 34ff 	mov.w	r4, #4294967295
 8019a26:	2201      	movs	r2, #1
 8019a28:	2900      	cmp	r1, #0
 8019a2a:	bfb8      	it	lt
 8019a2c:	4249      	neglt	r1, r1
 8019a2e:	fba3 3101 	umull	r3, r1, r3, r1
 8019a32:	bfb8      	it	lt
 8019a34:	4622      	movlt	r2, r4
 8019a36:	0bdc      	lsrs	r4, r3, #15
 8019a38:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
 8019a3c:	f3c3 3180 	ubfx	r1, r3, #14, #1
 8019a40:	2a01      	cmp	r2, #1
 8019a42:	4421      	add	r1, r4
 8019a44:	bf18      	it	ne
 8019a46:	4249      	negne	r1, r1
 8019a48:	f1b8 0f00 	cmp.w	r8, #0
 8019a4c:	f2c0 8186 	blt.w	8019d5c <ApplyPhaseEvaluation+0xd94>
 8019a50:	4643      	mov	r3, r8
 8019a52:	f04f 34ff 	mov.w	r4, #4294967295
 8019a56:	2201      	movs	r2, #1
 8019a58:	2800      	cmp	r0, #0
 8019a5a:	bfbc      	itt	lt
 8019a5c:	4622      	movlt	r2, r4
 8019a5e:	4240      	neglt	r0, r0
 8019a60:	fba3 3000 	umull	r3, r0, r3, r0
 8019a64:	2a01      	cmp	r2, #1
 8019a66:	9a92      	ldr	r2, [sp, #584]	@ 0x248
 8019a68:	ea4f 34d3 	mov.w	r4, r3, lsr #15
 8019a6c:	eba2 0201 	sub.w	r2, r2, r1
 8019a70:	ea44 4440 	orr.w	r4, r4, r0, lsl #17
 8019a74:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8019a78:	4423      	add	r3, r4
 8019a7a:	9292      	str	r2, [sp, #584]	@ 0x248
 8019a7c:	9a93      	ldr	r2, [sp, #588]	@ 0x24c
 8019a7e:	bf18      	it	ne
 8019a80:	425b      	negne	r3, r3
 8019a82:	1ad3      	subs	r3, r2, r3
 8019a84:	9393      	str	r3, [sp, #588]	@ 0x24c
 8019a86:	e753      	b.n	8019930 <ApplyPhaseEvaluation+0x968>
 8019a88:	0852      	lsrs	r2, r2, #1
 8019a8a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019a8e:	d1a2      	bne.n	80199d6 <ApplyPhaseEvaluation+0xa0e>
 8019a90:	e7aa      	b.n	80199e8 <ApplyPhaseEvaluation+0xa20>
 8019a92:	f04f 0c01 	mov.w	ip, #1
 8019a96:	f04f 0e1c 	mov.w	lr, #28
 8019a9a:	4632      	mov	r2, r6
 8019a9c:	4633      	mov	r3, r6
 8019a9e:	e588      	b.n	80195b2 <ApplyPhaseEvaluation+0x5ea>
 8019aa0:	2e03      	cmp	r6, #3
 8019aa2:	f43f ad97 	beq.w	80195d4 <ApplyPhaseEvaluation+0x60c>
 8019aa6:	f106 0c01 	add.w	ip, r6, #1
 8019aaa:	e582      	b.n	80195b2 <ApplyPhaseEvaluation+0x5ea>
 8019aac:	0801c481 	.word	0x0801c481
 8019ab0:	0801c315 	.word	0x0801c315
 8019ab4:	5cc9      	ldrb	r1, [r1, r3]
 8019ab6:	7853      	ldrb	r3, [r2, #1]
 8019ab8:	021b      	lsls	r3, r3, #8
 8019aba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8019abe:	7891      	ldrb	r1, [r2, #2]
 8019ac0:	f413 0f40 	tst.w	r3, #12582912	@ 0xc00000
 8019ac4:	ea41 0103 	orr.w	r1, r1, r3
 8019ac8:	eb02 0604 	add.w	r6, r2, r4
 8019acc:	f040 80ec 	bne.w	8019ca8 <ApplyPhaseEvaluation+0xce0>
 8019ad0:	9b04      	ldr	r3, [sp, #16]
 8019ad2:	f3c1 0815 	ubfx	r8, r1, #0, #22
 8019ad6:	4543      	cmp	r3, r8
 8019ad8:	f200 810f 	bhi.w	8019cfa <ApplyPhaseEvaluation+0xd32>
 8019adc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019ade:	4543      	cmp	r3, r8
 8019ae0:	bf34      	ite	cc
 8019ae2:	f04f 0e02 	movcc.w	lr, #2
 8019ae6:	f04f 0e00 	movcs.w	lr, #0
 8019aea:	6029      	str	r1, [r5, #0]
 8019aec:	7873      	ldrb	r3, [r6, #1]
 8019aee:	7831      	ldrb	r1, [r6, #0]
 8019af0:	78b0      	ldrb	r0, [r6, #2]
 8019af2:	021b      	lsls	r3, r3, #8
 8019af4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8019af8:	f413 0f40 	tst.w	r3, #12582912	@ 0xc00000
 8019afc:	ea40 0c03 	orr.w	ip, r0, r3
 8019b00:	eb06 0104 	add.w	r1, r6, r4
 8019b04:	f040 80de 	bne.w	8019cc4 <ApplyPhaseEvaluation+0xcfc>
 8019b08:	9804      	ldr	r0, [sp, #16]
 8019b0a:	f3cc 0315 	ubfx	r3, ip, #0, #22
 8019b0e:	4298      	cmp	r0, r3
 8019b10:	f200 80d8 	bhi.w	8019cc4 <ApplyPhaseEvaluation+0xcfc>
 8019b14:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8019b16:	4298      	cmp	r0, r3
 8019b18:	bf38      	it	cc
 8019b1a:	f04f 0e02 	movcc.w	lr, #2
 8019b1e:	f8c5 c004 	str.w	ip, [r5, #4]
 8019b22:	784b      	ldrb	r3, [r1, #1]
 8019b24:	5d30      	ldrb	r0, [r6, r4]
 8019b26:	021b      	lsls	r3, r3, #8
 8019b28:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8019b2c:	7888      	ldrb	r0, [r1, #2]
 8019b2e:	f413 0f40 	tst.w	r3, #12582912	@ 0xc00000
 8019b32:	4421      	add	r1, r4
 8019b34:	ea40 0003 	orr.w	r0, r0, r3
 8019b38:	f040 80c7 	bne.w	8019cca <ApplyPhaseEvaluation+0xd02>
 8019b3c:	9b04      	ldr	r3, [sp, #16]
 8019b3e:	f3c0 0c15 	ubfx	ip, r0, #0, #22
 8019b42:	4563      	cmp	r3, ip
 8019b44:	f200 80d6 	bhi.w	8019cf4 <ApplyPhaseEvaluation+0xd2c>
 8019b48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019b4a:	4563      	cmp	r3, ip
 8019b4c:	bf38      	it	cc
 8019b4e:	f04f 0e02 	movcc.w	lr, #2
 8019b52:	60a8      	str	r0, [r5, #8]
 8019b54:	f816 3014 	ldrb.w	r3, [r6, r4, lsl #1]
 8019b58:	7848      	ldrb	r0, [r1, #1]
 8019b5a:	7889      	ldrb	r1, [r1, #2]
 8019b5c:	041b      	lsls	r3, r3, #16
 8019b5e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8019b62:	f413 0f40 	tst.w	r3, #12582912	@ 0xc00000
 8019b66:	ea41 0103 	orr.w	r1, r1, r3
 8019b6a:	f040 80a8 	bne.w	8019cbe <ApplyPhaseEvaluation+0xcf6>
 8019b6e:	9804      	ldr	r0, [sp, #16]
 8019b70:	f3c1 0315 	ubfx	r3, r1, #0, #22
 8019b74:	4298      	cmp	r0, r3
 8019b76:	f200 80a2 	bhi.w	8019cbe <ApplyPhaseEvaluation+0xcf6>
 8019b7a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8019b7c:	4298      	cmp	r0, r3
 8019b7e:	bf38      	it	cc
 8019b80:	f04f 0e02 	movcc.w	lr, #2
 8019b84:	9e08      	ldr	r6, [sp, #32]
 8019b86:	60e9      	str	r1, [r5, #12]
 8019b88:	ebac 0c08 	sub.w	ip, ip, r8
 8019b8c:	fb06 f10c 	mul.w	r1, r6, ip
 8019b90:	9192      	str	r1, [sp, #584]	@ 0x248
 8019b92:	68eb      	ldr	r3, [r5, #12]
 8019b94:	6868      	ldr	r0, [r5, #4]
 8019b96:	f3c3 0c15 	ubfx	ip, r3, #0, #22
 8019b9a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019b9c:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8019ba0:	f883 e1b0 	strb.w	lr, [r3, #432]	@ 0x1b0
 8019ba4:	ebac 0300 	sub.w	r3, ip, r0
 8019ba8:	9806      	ldr	r0, [sp, #24]
 8019baa:	3203      	adds	r2, #3
 8019bac:	fb06 f303 	mul.w	r3, r6, r3
 8019bb0:	b100      	cbz	r0, 8019bb4 <ApplyPhaseEvaluation+0xbec>
 8019bb2:	3510      	adds	r5, #16
 8019bb4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019bb6:	1189      	asrs	r1, r1, #6
 8019bb8:	fb00 f101 	mul.w	r1, r0, r1
 8019bbc:	119b      	asrs	r3, r3, #6
 8019bbe:	fb00 f303 	mul.w	r3, r0, r3
 8019bc2:	2900      	cmp	r1, #0
 8019bc4:	9192      	str	r1, [sp, #584]	@ 0x248
 8019bc6:	bfb8      	it	lt
 8019bc8:	4249      	neglt	r1, r1
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	9393      	str	r3, [sp, #588]	@ 0x24c
 8019bce:	bfb8      	it	lt
 8019bd0:	425b      	neglt	r3, r3
 8019bd2:	440b      	add	r3, r1
 8019bd4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019bd6:	0b5b      	lsrs	r3, r3, #13
 8019bd8:	f8a1 31b2 	strh.w	r3, [r1, #434]	@ 0x1b2
 8019bdc:	f7ff bb70 	b.w	80192c0 <ApplyPhaseEvaluation+0x2f8>
 8019be0:	9b05      	ldr	r3, [sp, #20]
 8019be2:	f8b0 724e 	ldrh.w	r7, [r0, #590]	@ 0x24e
 8019be6:	f890 c24d 	ldrb.w	ip, [r0, #589]	@ 0x24d
 8019bea:	f1ba 0f00 	cmp.w	sl, #0
 8019bee:	e9d3 62cd 	ldrd	r6, r2, [r3, #820]	@ 0x334
 8019bf2:	ea4f 3747 	mov.w	r7, r7, lsl #13
 8019bf6:	f8d3 333c 	ldr.w	r3, [r3, #828]	@ 0x33c
 8019bfa:	db5a      	blt.n	8019cb2 <ApplyPhaseEvaluation+0xcea>
 8019bfc:	4650      	mov	r0, sl
 8019bfe:	f04f 34ff 	mov.w	r4, #4294967295
 8019c02:	2101      	movs	r1, #1
 8019c04:	2a00      	cmp	r2, #0
 8019c06:	bfb8      	it	lt
 8019c08:	4252      	neglt	r2, r2
 8019c0a:	fba0 2002 	umull	r2, r0, r0, r2
 8019c0e:	bfb8      	it	lt
 8019c10:	4621      	movlt	r1, r4
 8019c12:	0bd4      	lsrs	r4, r2, #15
 8019c14:	ea44 4440 	orr.w	r4, r4, r0, lsl #17
 8019c18:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8019c1c:	2901      	cmp	r1, #1
 8019c1e:	4422      	add	r2, r4
 8019c20:	d060      	beq.n	8019ce4 <ApplyPhaseEvaluation+0xd1c>
 8019c22:	9208      	str	r2, [sp, #32]
 8019c24:	4250      	negs	r0, r2
 8019c26:	f1b8 0f00 	cmp.w	r8, #0
 8019c2a:	db55      	blt.n	8019cd8 <ApplyPhaseEvaluation+0xd10>
 8019c2c:	4641      	mov	r1, r8
 8019c2e:	f04f 35ff 	mov.w	r5, #4294967295
 8019c32:	2401      	movs	r4, #1
 8019c34:	2b00      	cmp	r3, #0
 8019c36:	bfb8      	it	lt
 8019c38:	425b      	neglt	r3, r3
 8019c3a:	fba1 3103 	umull	r3, r1, r1, r3
 8019c3e:	bfb8      	it	lt
 8019c40:	462c      	movlt	r4, r5
 8019c42:	0bdd      	lsrs	r5, r3, #15
 8019c44:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
 8019c48:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8019c4c:	2c01      	cmp	r4, #1
 8019c4e:	442b      	add	r3, r5
 8019c50:	d04c      	beq.n	8019cec <ApplyPhaseEvaluation+0xd24>
 8019c52:	9307      	str	r3, [sp, #28]
 8019c54:	4259      	negs	r1, r3
 8019c56:	2800      	cmp	r0, #0
 8019c58:	bfc8      	it	gt
 8019c5a:	4602      	movgt	r2, r0
 8019c5c:	2900      	cmp	r1, #0
 8019c5e:	bfc8      	it	gt
 8019c60:	460b      	movgt	r3, r1
 8019c62:	4413      	add	r3, r2
 8019c64:	429f      	cmp	r7, r3
 8019c66:	d235      	bcs.n	8019cd4 <ApplyPhaseEvaluation+0xd0c>
 8019c68:	ea8a 73ea 	eor.w	r3, sl, sl, asr #31
 8019c6c:	ea88 72e8 	eor.w	r2, r8, r8, asr #31
 8019c70:	eba3 73ea 	sub.w	r3, r3, sl, asr #31
 8019c74:	eba2 72e8 	sub.w	r2, r2, r8, asr #31
 8019c78:	18d2      	adds	r2, r2, r3
 8019c7a:	d441      	bmi.n	8019d00 <ApplyPhaseEvaluation+0xd38>
 8019c7c:	2e00      	cmp	r6, #0
 8019c7e:	db60      	blt.n	8019d42 <ApplyPhaseEvaluation+0xd7a>
 8019c80:	fba6 6202 	umull	r6, r2, r6, r2
 8019c84:	0bf3      	lsrs	r3, r6, #15
 8019c86:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8019c8a:	f3c6 3580 	ubfx	r5, r6, #14, #1
 8019c8e:	441d      	add	r5, r3
 8019c90:	122d      	asrs	r5, r5, #8
 8019c92:	fb0c f505 	mul.w	r5, ip, r5
 8019c96:	f3c5 354f 	ubfx	r5, r5, #13, #16
 8019c9a:	e5d3      	b.n	8019844 <ApplyPhaseEvaluation+0x87c>
 8019c9c:	ab12      	add	r3, sp, #72	@ 0x48
 8019c9e:	930e      	str	r3, [sp, #56]	@ 0x38
 8019ca0:	461d      	mov	r5, r3
 8019ca2:	4620      	mov	r0, r4
 8019ca4:	f7ff b9c4 	b.w	8019030 <ApplyPhaseEvaluation+0x68>
 8019ca8:	f04f 0e02 	mov.w	lr, #2
 8019cac:	f3c1 0815 	ubfx	r8, r1, #0, #22
 8019cb0:	e71b      	b.n	8019aea <ApplyPhaseEvaluation+0xb22>
 8019cb2:	f1ca 0000 	rsb	r0, sl, #0
 8019cb6:	2401      	movs	r4, #1
 8019cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8019cbc:	e7a2      	b.n	8019c04 <ApplyPhaseEvaluation+0xc3c>
 8019cbe:	f04f 0e02 	mov.w	lr, #2
 8019cc2:	e75f      	b.n	8019b84 <ApplyPhaseEvaluation+0xbbc>
 8019cc4:	f04f 0e02 	mov.w	lr, #2
 8019cc8:	e729      	b.n	8019b1e <ApplyPhaseEvaluation+0xb56>
 8019cca:	f04f 0e02 	mov.w	lr, #2
 8019cce:	f3c0 0c15 	ubfx	ip, r0, #0, #22
 8019cd2:	e73e      	b.n	8019b52 <ApplyPhaseEvaluation+0xb8a>
 8019cd4:	2500      	movs	r5, #0
 8019cd6:	e5b5      	b.n	8019844 <ApplyPhaseEvaluation+0x87c>
 8019cd8:	f1c8 0100 	rsb	r1, r8, #0
 8019cdc:	2501      	movs	r5, #1
 8019cde:	f04f 34ff 	mov.w	r4, #4294967295
 8019ce2:	e7a7      	b.n	8019c34 <ApplyPhaseEvaluation+0xc6c>
 8019ce4:	4610      	mov	r0, r2
 8019ce6:	4252      	negs	r2, r2
 8019ce8:	9208      	str	r2, [sp, #32]
 8019cea:	e79c      	b.n	8019c26 <ApplyPhaseEvaluation+0xc5e>
 8019cec:	4619      	mov	r1, r3
 8019cee:	425b      	negs	r3, r3
 8019cf0:	9307      	str	r3, [sp, #28]
 8019cf2:	e7b0      	b.n	8019c56 <ApplyPhaseEvaluation+0xc8e>
 8019cf4:	f04f 0e02 	mov.w	lr, #2
 8019cf8:	e72b      	b.n	8019b52 <ApplyPhaseEvaluation+0xb8a>
 8019cfa:	f04f 0e02 	mov.w	lr, #2
 8019cfe:	e6f4      	b.n	8019aea <ApplyPhaseEvaluation+0xb22>
 8019d00:	2e00      	cmp	r6, #0
 8019d02:	f1c2 0200 	rsb	r2, r2, #0
 8019d06:	db12      	blt.n	8019d2e <ApplyPhaseEvaluation+0xd66>
 8019d08:	17d1      	asrs	r1, r2, #31
 8019d0a:	fba6 3202 	umull	r3, r2, r6, r2
 8019d0e:	fb06 2201 	mla	r2, r6, r1, r2
 8019d12:	0bd9      	lsrs	r1, r3, #15
 8019d14:	ea41 4142 	orr.w	r1, r1, r2, lsl #17
 8019d18:	f3c3 3580 	ubfx	r5, r3, #14, #1
 8019d1c:	440d      	add	r5, r1
 8019d1e:	426d      	negs	r5, r5
 8019d20:	e7b6      	b.n	8019c90 <ApplyPhaseEvaluation+0xcc8>
 8019d22:	f1ca 0300 	rsb	r3, sl, #0
 8019d26:	2401      	movs	r4, #1
 8019d28:	f04f 32ff 	mov.w	r2, #4294967295
 8019d2c:	e67c      	b.n	8019a28 <ApplyPhaseEvaluation+0xa60>
 8019d2e:	4273      	negs	r3, r6
 8019d30:	fb83 3202 	smull	r3, r2, r3, r2
 8019d34:	0bd9      	lsrs	r1, r3, #15
 8019d36:	ea41 4142 	orr.w	r1, r1, r2, lsl #17
 8019d3a:	f3c3 3580 	ubfx	r5, r3, #14, #1
 8019d3e:	440d      	add	r5, r1
 8019d40:	e7a6      	b.n	8019c90 <ApplyPhaseEvaluation+0xcc8>
 8019d42:	4273      	negs	r3, r6
 8019d44:	17d8      	asrs	r0, r3, #31
 8019d46:	fba3 3102 	umull	r3, r1, r3, r2
 8019d4a:	fb02 1100 	mla	r1, r2, r0, r1
 8019d4e:	0bda      	lsrs	r2, r3, #15
 8019d50:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8019d54:	f3c3 3580 	ubfx	r5, r3, #14, #1
 8019d58:	4415      	add	r5, r2
 8019d5a:	e7e0      	b.n	8019d1e <ApplyPhaseEvaluation+0xd56>
 8019d5c:	f1c8 0300 	rsb	r3, r8, #0
 8019d60:	2401      	movs	r4, #1
 8019d62:	f04f 32ff 	mov.w	r2, #4294967295
 8019d66:	e677      	b.n	8019a58 <ApplyPhaseEvaluation+0xa90>

08019d68 <Argus_Eval_Init>:
 8019d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d6a:	4604      	mov	r4, r0
 8019d6c:	461d      	mov	r5, r3
 8019d6e:	460e      	mov	r6, r1
 8019d70:	4617      	mov	r7, r2
 8019d72:	2100      	movs	r1, #0
 8019d74:	f44f 725c 	mov.w	r2, #880	@ 0x370
 8019d78:	f011 f917 	bl	802afaa <memset>
 8019d7c:	9906      	ldr	r1, [sp, #24]
 8019d7e:	f8c4 5354 	str.w	r5, [r4, #852]	@ 0x354
 8019d82:	f504 7056 	add.w	r0, r4, #856	@ 0x358
 8019d86:	e9c4 67da 	strd	r6, r7, [r4, #872]	@ 0x368
 8019d8a:	f001 fc25 	bl	801b5d8 <Argus_Pba_Init>
 8019d8e:	4620      	mov	r0, r4
 8019d90:	f504 71c6 	add.w	r1, r4, #396	@ 0x18c
 8019d94:	7a02      	ldrb	r2, [r0, #8]
 8019d96:	f890 319c 	ldrb.w	r3, [r0, #412]	@ 0x19c
 8019d9a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8019d9e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8019da2:	7202      	strb	r2, [r0, #8]
 8019da4:	f880 319c 	strb.w	r3, [r0, #412]	@ 0x19c
 8019da8:	300c      	adds	r0, #12
 8019daa:	4288      	cmp	r0, r1
 8019dac:	d1f2      	bne.n	8019d94 <Argus_Eval_Init+0x2c>
 8019dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019db0 <Argus_Eval_Update>:
 8019db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019db4:	f891 30ac 	ldrb.w	r3, [r1, #172]	@ 0xac
 8019db8:	f992 4297 	ldrsb.w	r4, [r2, #663]	@ 0x297
 8019dbc:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8019dc0:	460f      	mov	r7, r1
 8019dc2:	4690      	mov	r8, r2
 8019dc4:	4606      	mov	r6, r0
 8019dc6:	2b00      	cmp	r3, #0
 8019dc8:	f000 81dd 	beq.w	801a186 <Argus_Eval_Update+0x3d6>
 8019dcc:	3b01      	subs	r3, #1
 8019dce:	b2db      	uxtb	r3, r3
 8019dd0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8019dd4:	2c00      	cmp	r4, #0
 8019dd6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8019dda:	eb0c 0053 	add.w	r0, ip, r3, lsr #1
 8019dde:	ebac 0c53 	sub.w	ip, ip, r3, lsr #1
 8019de2:	f2c0 81d4 	blt.w	801a18e <Argus_Eval_Update+0x3de>
 8019de6:	f1bc 0f00 	cmp.w	ip, #0
 8019dea:	4621      	mov	r1, r4
 8019dec:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8019df0:	f2c0 81df 	blt.w	801a1b2 <Argus_Eval_Update+0x402>
 8019df4:	fbac 3204 	umull	r3, r2, ip, r4
 8019df8:	fb0c 2205 	mla	r2, ip, r5, r2
 8019dfc:	ea4f 2e93 	mov.w	lr, r3, lsr #10
 8019e00:	ea4e 5e82 	orr.w	lr, lr, r2, lsl #22
 8019e04:	f3c3 2240 	ubfx	r2, r3, #9, #1
 8019e08:	4472      	add	r2, lr
 8019e0a:	2800      	cmp	r0, #0
 8019e0c:	4462      	add	r2, ip
 8019e0e:	f2c0 81df 	blt.w	801a1d0 <Argus_Eval_Update+0x420>
 8019e12:	2c00      	cmp	r4, #0
 8019e14:	f2c0 83e1 	blt.w	801a5da <Argus_Eval_Update+0x82a>
 8019e18:	fba0 3101 	umull	r3, r1, r0, r1
 8019e1c:	0a9c      	lsrs	r4, r3, #10
 8019e1e:	fb00 1505 	mla	r5, r0, r5, r1
 8019e22:	ea44 5485 	orr.w	r4, r4, r5, lsl #22
 8019e26:	f3c3 2340 	ubfx	r3, r3, #9, #1
 8019e2a:	4423      	add	r3, r4
 8019e2c:	f897 e07b 	ldrb.w	lr, [r7, #123]	@ 0x7b
 8019e30:	ea4f 1e9e 	mov.w	lr, lr, lsr #6
 8019e34:	4418      	add	r0, r3
 8019e36:	f1ce 0e04 	rsb	lr, lr, #4
 8019e3a:	7bbb      	ldrb	r3, [r7, #14]
 8019e3c:	fa02 f20e 	lsl.w	r2, r2, lr
 8019e40:	4692      	mov	sl, r2
 8019e42:	041d      	lsls	r5, r3, #16
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	f000 81d8 	beq.w	801a1fa <Argus_Eval_Update+0x44a>
 8019e4a:	2a00      	cmp	r2, #0
 8019e4c:	bfb8      	it	lt
 8019e4e:	4252      	neglt	r2, r2
 8019e50:	4295      	cmp	r5, r2
 8019e52:	4629      	mov	r1, r5
 8019e54:	f080 84a5 	bcs.w	801a7a2 <Argus_Eval_Update+0x9f2>
 8019e58:	462b      	mov	r3, r5
 8019e5a:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8019e5e:	4699      	mov	r9, r3
 8019e60:	005b      	lsls	r3, r3, #1
 8019e62:	4293      	cmp	r3, r2
 8019e64:	46a4      	mov	ip, r4
 8019e66:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8019e6a:	d3f8      	bcc.n	8019e5e <Argus_Eval_Update+0xae>
 8019e6c:	2c00      	cmp	r4, #0
 8019e6e:	f040 838d 	bne.w	801a58c <Argus_Eval_Update+0x7dc>
 8019e72:	ea9a 0f05 	teq	sl, r5
 8019e76:	f100 84cf 	bmi.w	801a818 <Argus_Eval_Update+0xa68>
 8019e7a:	f06f 0401 	mvn.w	r4, #1
 8019e7e:	46a4      	mov	ip, r4
 8019e80:	fa00 f20e 	lsl.w	r2, r0, lr
 8019e84:	2a00      	cmp	r2, #0
 8019e86:	4691      	mov	r9, r2
 8019e88:	bfb8      	it	lt
 8019e8a:	4252      	neglt	r2, r2
 8019e8c:	4295      	cmp	r5, r2
 8019e8e:	bf38      	it	cc
 8019e90:	f44f 3380 	movcc.w	r3, #65536	@ 0x10000
 8019e94:	f080 8451 	bcs.w	801a73a <Argus_Eval_Update+0x98a>
 8019e98:	468e      	mov	lr, r1
 8019e9a:	0049      	lsls	r1, r1, #1
 8019e9c:	4291      	cmp	r1, r2
 8019e9e:	4618      	mov	r0, r3
 8019ea0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019ea4:	d3f8      	bcc.n	8019e98 <Argus_Eval_Update+0xe8>
 8019ea6:	2b00      	cmp	r3, #0
 8019ea8:	f040 834a 	bne.w	801a540 <Argus_Eval_Update+0x790>
 8019eac:	ea95 0f09 	teq	r5, r9
 8019eb0:	f100 8498 	bmi.w	801a7e4 <Argus_Eval_Update+0xa34>
 8019eb4:	f1bc 0f00 	cmp.w	ip, #0
 8019eb8:	f000 83ff 	beq.w	801a6ba <Argus_Eval_Update+0x90a>
 8019ebc:	f06f 0501 	mvn.w	r5, #1
 8019ec0:	4629      	mov	r1, r5
 8019ec2:	f1bc 0f00 	cmp.w	ip, #0
 8019ec6:	f2c0 8471 	blt.w	801a7ac <Argus_Eval_Update+0x9fc>
 8019eca:	4bd3      	ldr	r3, [pc, #844]	@ (801a218 <Argus_Eval_Update+0x468>)
 8019ecc:	429c      	cmp	r4, r3
 8019ece:	f200 847d 	bhi.w	801a7cc <Argus_Eval_Update+0xa1c>
 8019ed2:	48d1      	ldr	r0, [pc, #836]	@ (801a218 <Argus_Eval_Update+0x468>)
 8019ed4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8019ed8:	46a6      	mov	lr, r4
 8019eda:	0064      	lsls	r4, r4, #1
 8019edc:	4284      	cmp	r4, r0
 8019ede:	461a      	mov	r2, r3
 8019ee0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019ee4:	d9f8      	bls.n	8019ed8 <Argus_Eval_Update+0x128>
 8019ee6:	2b00      	cmp	r3, #0
 8019ee8:	f040 8308 	bne.w	801a4fc <Argus_Eval_Update+0x74c>
 8019eec:	f1bc 0f00 	cmp.w	ip, #0
 8019ef0:	f2c0 849e 	blt.w	801a830 <Argus_Eval_Update+0xa80>
 8019ef4:	f06f 0307 	mvn.w	r3, #7
 8019ef8:	f8c6 3328 	str.w	r3, [r6, #808]	@ 0x328
 8019efc:	2d00      	cmp	r5, #0
 8019efe:	f000 837e 	beq.w	801a5fe <Argus_Eval_Update+0x84e>
 8019f02:	f06f 0307 	mvn.w	r3, #7
 8019f06:	2d00      	cmp	r5, #0
 8019f08:	f2c0 83f0 	blt.w	801a6ec <Argus_Eval_Update+0x93c>
 8019f0c:	4ac2      	ldr	r2, [pc, #776]	@ (801a218 <Argus_Eval_Update+0x468>)
 8019f0e:	f8df e30c 	ldr.w	lr, [pc, #780]	@ 801a21c <Argus_Eval_Update+0x46c>
 8019f12:	4291      	cmp	r1, r2
 8019f14:	ea85 0e0e 	eor.w	lr, r5, lr
 8019f18:	f200 845b 	bhi.w	801a7d2 <Argus_Eval_Update+0xa22>
 8019f1c:	48be      	ldr	r0, [pc, #760]	@ (801a218 <Argus_Eval_Update+0x468>)
 8019f1e:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8019f22:	460a      	mov	r2, r1
 8019f24:	ebb0 0f42 	cmp.w	r0, r2, lsl #1
 8019f28:	46a4      	mov	ip, r4
 8019f2a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019f2e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8019f32:	d2f6      	bcs.n	8019f22 <Argus_Eval_Update+0x172>
 8019f34:	2c00      	cmp	r4, #0
 8019f36:	f040 826b 	bne.w	801a410 <Argus_Eval_Update+0x660>
 8019f3a:	f1be 0f00 	cmp.w	lr, #0
 8019f3e:	f2c0 846e 	blt.w	801a81e <Argus_Eval_Update+0xa6e>
 8019f42:	f06f 0207 	mvn.w	r2, #7
 8019f46:	f9b8 52a8 	ldrsh.w	r5, [r8, #680]	@ 0x2a8
 8019f4a:	f8c6 232c 	str.w	r2, [r6, #812]	@ 0x32c
 8019f4e:	4293      	cmp	r3, r2
 8019f50:	ea4f 1585 	mov.w	r5, r5, lsl #6
 8019f54:	d049      	beq.n	8019fea <Argus_Eval_Update+0x23a>
 8019f56:	f8df c2c8 	ldr.w	ip, [pc, #712]	@ 801a220 <Argus_Eval_Update+0x470>
 8019f5a:	2408      	movs	r4, #8
 8019f5c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8019f60:	0064      	lsls	r4, r4, #1
 8019f62:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 8019f66:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8019f6a:	d3f9      	bcc.n	8019f60 <Argus_Eval_Update+0x1b0>
 8019f6c:	2a00      	cmp	r2, #0
 8019f6e:	f040 8282 	bne.w	801a476 <Argus_Eval_Update+0x6c6>
 8019f72:	f1bc 0f00 	cmp.w	ip, #0
 8019f76:	f2c0 8474 	blt.w	801a862 <Argus_Eval_Update+0xab2>
 8019f7a:	469c      	mov	ip, r3
 8019f7c:	b39b      	cbz	r3, 8019fe6 <Argus_Eval_Update+0x236>
 8019f7e:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8019f82:	2b00      	cmp	r3, #0
 8019f84:	f2c0 8295 	blt.w	801a4b2 <Argus_Eval_Update+0x702>
 8019f88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8019f8c:	f080 8432 	bcs.w	801a7f4 <Argus_Eval_Update+0xa44>
 8019f90:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8019f94:	005b      	lsls	r3, r3, #1
 8019f96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8019f9a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8019f9e:	d3f9      	bcc.n	8019f94 <Argus_Eval_Update+0x1e4>
 8019fa0:	2a00      	cmp	r2, #0
 8019fa2:	f040 8292 	bne.w	801a4ca <Argus_Eval_Update+0x71a>
 8019fa6:	f1bc 0f00 	cmp.w	ip, #0
 8019faa:	f2c0 8454 	blt.w	801a856 <Argus_Eval_Update+0xaa6>
 8019fae:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8019fb2:	1b00      	subs	r0, r0, r4
 8019fb4:	2800      	cmp	r0, #0
 8019fb6:	d016      	beq.n	8019fe6 <Argus_Eval_Update+0x236>
 8019fb8:	f2c0 8377 	blt.w	801a6aa <Argus_Eval_Update+0x8fa>
 8019fbc:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 8019fc0:	4602      	mov	r2, r0
 8019fc2:	f080 5480 	eor.w	r4, r0, #268435456	@ 0x10000000
 8019fc6:	f280 8325 	bge.w	801a614 <Argus_Eval_Update+0x864>
 8019fca:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8019fce:	0052      	lsls	r2, r2, #1
 8019fd0:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 8019fd4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019fd8:	d3f9      	bcc.n	8019fce <Argus_Eval_Update+0x21e>
 8019fda:	2900      	cmp	r1, #0
 8019fdc:	f040 831c 	bne.w	801a618 <Argus_Eval_Update+0x868>
 8019fe0:	2c00      	cmp	r4, #0
 8019fe2:	f2c0 8433 	blt.w	801a84c <Argus_Eval_Update+0xa9c>
 8019fe6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8019fea:	4618      	mov	r0, r3
 8019fec:	ea85 71e5 	eor.w	r1, r5, r5, asr #31
 8019ff0:	2800      	cmp	r0, #0
 8019ff2:	eba1 71e5 	sub.w	r1, r1, r5, asr #31
 8019ff6:	f2c0 81e7 	blt.w	801a3c8 <Argus_Eval_Update+0x618>
 8019ffa:	428b      	cmp	r3, r1
 8019ffc:	bf28      	it	cs
 8019ffe:	f44f 3280 	movcs.w	r2, #65536	@ 0x10000
 801a002:	f080 8134 	bcs.w	801a26e <Argus_Eval_Update+0x4be>
 801a006:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801a00a:	005b      	lsls	r3, r3, #1
 801a00c:	428b      	cmp	r3, r1
 801a00e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801a012:	d3fa      	bcc.n	801a00a <Argus_Eval_Update+0x25a>
 801a014:	2a00      	cmp	r2, #0
 801a016:	f040 812a 	bne.w	801a26e <Argus_Eval_Update+0x4be>
 801a01a:	ea85 0100 	eor.w	r1, r5, r0
 801a01e:	43c9      	mvns	r1, r1
 801a020:	0fc9      	lsrs	r1, r1, #31
 801a022:	4249      	negs	r1, r1
 801a024:	b289      	uxth	r1, r1
 801a026:	f8a6 1350 	strh.w	r1, [r6, #848]	@ 0x350
 801a02a:	4638      	mov	r0, r7
 801a02c:	f007 fd74 	bl	8021b18 <Argus_Dev_GetPixelCount>
 801a030:	f9b8 c250 	ldrsh.w	ip, [r8, #592]	@ 0x250
 801a034:	0402      	lsls	r2, r0, #16
 801a036:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801a03a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801a03e:	fbb3 f0f0 	udiv	r0, r3, r0
 801a042:	4614      	mov	r4, r2
 801a044:	f8c6 0334 	str.w	r0, [r6, #820]	@ 0x334
 801a048:	2a00      	cmp	r2, #0
 801a04a:	f000 80eb 	beq.w	801a224 <Argus_Eval_Update+0x474>
 801a04e:	ea8c 70ec 	eor.w	r0, ip, ip, asr #31
 801a052:	2a00      	cmp	r2, #0
 801a054:	eba0 70ec 	sub.w	r0, r0, ip, asr #31
 801a058:	f2c0 81a7 	blt.w	801a3aa <Argus_Eval_Update+0x5fa>
 801a05c:	4282      	cmp	r2, r0
 801a05e:	4611      	mov	r1, r2
 801a060:	f080 813c 	bcs.w	801a2dc <Argus_Eval_Update+0x52c>
 801a064:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801a068:	0049      	lsls	r1, r1, #1
 801a06a:	4281      	cmp	r1, r0
 801a06c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a070:	d3fa      	bcc.n	801a068 <Argus_Eval_Update+0x2b8>
 801a072:	2b00      	cmp	r3, #0
 801a074:	f040 8132 	bne.w	801a2dc <Argus_Eval_Update+0x52c>
 801a078:	ea9c 0f02 	teq	ip, r2
 801a07c:	bf4c      	ite	mi
 801a07e:	f04f 4500 	movmi.w	r5, #2147483648	@ 0x80000000
 801a082:	f06f 4500 	mvnpl.w	r5, #2147483648	@ 0x80000000
 801a086:	f9b8 c252 	ldrsh.w	ip, [r8, #594]	@ 0x252
 801a08a:	f8c6 5338 	str.w	r5, [r6, #824]	@ 0x338
 801a08e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801a092:	ea8c 70ec 	eor.w	r0, ip, ip, asr #31
 801a096:	2a00      	cmp	r2, #0
 801a098:	eba0 70ec 	sub.w	r0, r0, ip, asr #31
 801a09c:	f2c0 8176 	blt.w	801a38c <Argus_Eval_Update+0x5dc>
 801a0a0:	4282      	cmp	r2, r0
 801a0a2:	4611      	mov	r1, r2
 801a0a4:	bf28      	it	cs
 801a0a6:	f44f 3380 	movcs.w	r3, #65536	@ 0x10000
 801a0aa:	f080 80fe 	bcs.w	801a2aa <Argus_Eval_Update+0x4fa>
 801a0ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801a0b2:	0049      	lsls	r1, r1, #1
 801a0b4:	4281      	cmp	r1, r0
 801a0b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a0ba:	d3fa      	bcc.n	801a0b2 <Argus_Eval_Update+0x302>
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	f040 80f4 	bne.w	801a2aa <Argus_Eval_Update+0x4fa>
 801a0c2:	ea92 0f0c 	teq	r2, ip
 801a0c6:	bf4c      	ite	mi
 801a0c8:	f04f 4500 	movmi.w	r5, #2147483648	@ 0x80000000
 801a0cc:	f06f 4500 	mvnpl.w	r5, #2147483648	@ 0x80000000
 801a0d0:	f9b8 c254 	ldrsh.w	ip, [r8, #596]	@ 0x254
 801a0d4:	f8c6 533c 	str.w	r5, [r6, #828]	@ 0x33c
 801a0d8:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801a0dc:	ea8c 70ec 	eor.w	r0, ip, ip, asr #31
 801a0e0:	2a00      	cmp	r2, #0
 801a0e2:	eba0 70ec 	sub.w	r0, r0, ip, asr #31
 801a0e6:	f2c0 8142 	blt.w	801a36e <Argus_Eval_Update+0x5be>
 801a0ea:	4282      	cmp	r2, r0
 801a0ec:	4611      	mov	r1, r2
 801a0ee:	bf28      	it	cs
 801a0f0:	f44f 3380 	movcs.w	r3, #65536	@ 0x10000
 801a0f4:	f080 8122 	bcs.w	801a33c <Argus_Eval_Update+0x58c>
 801a0f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801a0fc:	0049      	lsls	r1, r1, #1
 801a0fe:	4281      	cmp	r1, r0
 801a100:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a104:	d3fa      	bcc.n	801a0fc <Argus_Eval_Update+0x34c>
 801a106:	2b00      	cmp	r3, #0
 801a108:	f040 8118 	bne.w	801a33c <Argus_Eval_Update+0x58c>
 801a10c:	ea92 0f0c 	teq	r2, ip
 801a110:	bf4c      	ite	mi
 801a112:	f04f 4500 	movmi.w	r5, #2147483648	@ 0x80000000
 801a116:	f06f 4500 	mvnpl.w	r5, #2147483648	@ 0x80000000
 801a11a:	f8c6 5340 	str.w	r5, [r6, #832]	@ 0x340
 801a11e:	f9b8 5256 	ldrsh.w	r5, [r8, #598]	@ 0x256
 801a122:	012d      	lsls	r5, r5, #4
 801a124:	ea85 71e5 	eor.w	r1, r5, r5, asr #31
 801a128:	2a00      	cmp	r2, #0
 801a12a:	eba1 71e5 	sub.w	r1, r1, r5, asr #31
 801a12e:	f2c0 815b 	blt.w	801a3e8 <Argus_Eval_Update+0x638>
 801a132:	428a      	cmp	r2, r1
 801a134:	bf28      	it	cs
 801a136:	f44f 3380 	movcs.w	r3, #65536	@ 0x10000
 801a13a:	f080 80e8 	bcs.w	801a30e <Argus_Eval_Update+0x55e>
 801a13e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801a142:	0052      	lsls	r2, r2, #1
 801a144:	428a      	cmp	r2, r1
 801a146:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a14a:	d3fa      	bcc.n	801a142 <Argus_Eval_Update+0x392>
 801a14c:	2b00      	cmp	r3, #0
 801a14e:	f040 80de 	bne.w	801a30e <Argus_Eval_Update+0x55e>
 801a152:	ea94 0f05 	teq	r4, r5
 801a156:	f100 8087 	bmi.w	801a268 <Argus_Eval_Update+0x4b8>
 801a15a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801a15e:	f9b8 325a 	ldrsh.w	r3, [r8, #602]	@ 0x25a
 801a162:	f8c6 0344 	str.w	r0, [r6, #836]	@ 0x344
 801a166:	011b      	lsls	r3, r3, #4
 801a168:	f8c6 3348 	str.w	r3, [r6, #840]	@ 0x348
 801a16c:	f9b8 325c 	ldrsh.w	r3, [r8, #604]	@ 0x25c
 801a170:	011b      	lsls	r3, r3, #4
 801a172:	4642      	mov	r2, r8
 801a174:	f8c6 334c 	str.w	r3, [r6, #844]	@ 0x34c
 801a178:	4639      	mov	r1, r7
 801a17a:	f506 7056 	add.w	r0, r6, #856	@ 0x358
 801a17e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a182:	f001 ba95 	b.w	801b6b0 <Argus_Pba_UpdateConfig>
 801a186:	2c00      	cmp	r4, #0
 801a188:	4660      	mov	r0, ip
 801a18a:	f6bf ae2c 	bge.w	8019de6 <Argus_Eval_Update+0x36>
 801a18e:	4261      	negs	r1, r4
 801a190:	f1bc 0f00 	cmp.w	ip, #0
 801a194:	ea4f 75e1 	mov.w	r5, r1, asr #31
 801a198:	f2c0 8297 	blt.w	801a6ca <Argus_Eval_Update+0x91a>
 801a19c:	fbac 3e01 	umull	r3, lr, ip, r1
 801a1a0:	0a9a      	lsrs	r2, r3, #10
 801a1a2:	fb0c ee05 	mla	lr, ip, r5, lr
 801a1a6:	ea42 528e 	orr.w	r2, r2, lr, lsl #22
 801a1aa:	f3c3 2340 	ubfx	r3, r3, #9, #1
 801a1ae:	4413      	add	r3, r2
 801a1b0:	e009      	b.n	801a1c6 <Argus_Eval_Update+0x416>
 801a1b2:	f1cc 0300 	rsb	r3, ip, #0
 801a1b6:	fb83 3e04 	smull	r3, lr, r3, r4
 801a1ba:	0a9a      	lsrs	r2, r3, #10
 801a1bc:	ea42 528e 	orr.w	r2, r2, lr, lsl #22
 801a1c0:	f3c3 2340 	ubfx	r3, r3, #9, #1
 801a1c4:	4413      	add	r3, r2
 801a1c6:	425a      	negs	r2, r3
 801a1c8:	2800      	cmp	r0, #0
 801a1ca:	4462      	add	r2, ip
 801a1cc:	f6bf ae21 	bge.w	8019e12 <Argus_Eval_Update+0x62>
 801a1d0:	2c00      	cmp	r4, #0
 801a1d2:	f1c0 0300 	rsb	r3, r0, #0
 801a1d6:	f2c0 8351 	blt.w	801a87c <Argus_Eval_Update+0xacc>
 801a1da:	17dc      	asrs	r4, r3, #31
 801a1dc:	fb03 f505 	mul.w	r5, r3, r5
 801a1e0:	fb01 5504 	mla	r5, r1, r4, r5
 801a1e4:	fba3 3101 	umull	r3, r1, r3, r1
 801a1e8:	0a9c      	lsrs	r4, r3, #10
 801a1ea:	4429      	add	r1, r5
 801a1ec:	ea44 5481 	orr.w	r4, r4, r1, lsl #22
 801a1f0:	f3c3 2340 	ubfx	r3, r3, #9, #1
 801a1f4:	4423      	add	r3, r4
 801a1f6:	425b      	negs	r3, r3
 801a1f8:	e618      	b.n	8019e2c <Argus_Eval_Update+0x7c>
 801a1fa:	2a00      	cmp	r2, #0
 801a1fc:	f2c0 81f8 	blt.w	801a5f0 <Argus_Eval_Update+0x840>
 801a200:	fa10 f30e 	lsls.w	r3, r0, lr
 801a204:	f100 8237 	bmi.w	801a676 <Argus_Eval_Update+0x8c6>
 801a208:	f06f 0501 	mvn.w	r5, #1
 801a20c:	4629      	mov	r1, r5
 801a20e:	f06f 0c01 	mvn.w	ip, #1
 801a212:	2402      	movs	r4, #2
 801a214:	e65d      	b.n	8019ed2 <Argus_Eval_Update+0x122>
 801a216:	bf00      	nop
 801a218:	4779e127 	.word	0x4779e127
 801a21c:	4779e128 	.word	0x4779e128
 801a220:	effffff8 	.word	0xeffffff8
 801a224:	f9b8 3252 	ldrsh.w	r3, [r8, #594]	@ 0x252
 801a228:	f1bc 0f00 	cmp.w	ip, #0
 801a22c:	bfb4      	ite	lt
 801a22e:	f04f 4200 	movlt.w	r2, #2147483648	@ 0x80000000
 801a232:	f06f 4200 	mvnge.w	r2, #2147483648	@ 0x80000000
 801a236:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 801a23a:	bf14      	ite	ne
 801a23c:	f04f 4300 	movne.w	r3, #2147483648	@ 0x80000000
 801a240:	f06f 4300 	mvneq.w	r3, #2147483648	@ 0x80000000
 801a244:	e9c6 23ce 	strd	r2, r3, [r6, #824]	@ 0x338
 801a248:	f9b8 2254 	ldrsh.w	r2, [r8, #596]	@ 0x254
 801a24c:	f9b8 3256 	ldrsh.w	r3, [r8, #598]	@ 0x256
 801a250:	f012 6f00 	tst.w	r2, #134217728	@ 0x8000000
 801a254:	bf14      	ite	ne
 801a256:	f04f 4200 	movne.w	r2, #2147483648	@ 0x80000000
 801a25a:	f06f 4200 	mvneq.w	r2, #2147483648	@ 0x80000000
 801a25e:	011b      	lsls	r3, r3, #4
 801a260:	f8c6 2340 	str.w	r2, [r6, #832]	@ 0x340
 801a264:	f57f af79 	bpl.w	801a15a <Argus_Eval_Update+0x3aa>
 801a268:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 801a26c:	e777      	b.n	801a15e <Argus_Eval_Update+0x3ae>
 801a26e:	460c      	mov	r4, r1
 801a270:	b151      	cbz	r1, 801a288 <Argus_Eval_Update+0x4d8>
 801a272:	2400      	movs	r4, #0
 801a274:	e000      	b.n	801a278 <Argus_Eval_Update+0x4c8>
 801a276:	b139      	cbz	r1, 801a288 <Argus_Eval_Update+0x4d8>
 801a278:	428b      	cmp	r3, r1
 801a27a:	bf9c      	itt	ls
 801a27c:	1ac9      	subls	r1, r1, r3
 801a27e:	4314      	orrls	r4, r2
 801a280:	0852      	lsrs	r2, r2, #1
 801a282:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a286:	d1f6      	bne.n	801a276 <Argus_Eval_Update+0x4c6>
 801a288:	428b      	cmp	r3, r1
 801a28a:	bf98      	it	ls
 801a28c:	3401      	addls	r4, #1
 801a28e:	ea95 0f00 	teq	r5, r0
 801a292:	f100 826e 	bmi.w	801a772 <Argus_Eval_Update+0x9c2>
 801a296:	2c00      	cmp	r4, #0
 801a298:	db04      	blt.n	801a2a4 <Argus_Eval_Update+0x4f4>
 801a29a:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 801a29e:	429c      	cmp	r4, r3
 801a2a0:	f340 81d8 	ble.w	801a654 <Argus_Eval_Update+0x8a4>
 801a2a4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801a2a8:	e6bd      	b.n	801a026 <Argus_Eval_Update+0x276>
 801a2aa:	4605      	mov	r5, r0
 801a2ac:	b150      	cbz	r0, 801a2c4 <Argus_Eval_Update+0x514>
 801a2ae:	2500      	movs	r5, #0
 801a2b0:	e000      	b.n	801a2b4 <Argus_Eval_Update+0x504>
 801a2b2:	b138      	cbz	r0, 801a2c4 <Argus_Eval_Update+0x514>
 801a2b4:	4281      	cmp	r1, r0
 801a2b6:	bf9c      	itt	ls
 801a2b8:	1a40      	subls	r0, r0, r1
 801a2ba:	431d      	orrls	r5, r3
 801a2bc:	085b      	lsrs	r3, r3, #1
 801a2be:	ea4f 0040 	mov.w	r0, r0, lsl #1
 801a2c2:	d1f6      	bne.n	801a2b2 <Argus_Eval_Update+0x502>
 801a2c4:	4281      	cmp	r1, r0
 801a2c6:	bf98      	it	ls
 801a2c8:	3501      	addls	r5, #1
 801a2ca:	ea92 0f0c 	teq	r2, ip
 801a2ce:	f100 8266 	bmi.w	801a79e <Argus_Eval_Update+0x9ee>
 801a2d2:	2d00      	cmp	r5, #0
 801a2d4:	bfb8      	it	lt
 801a2d6:	f06f 4500 	mvnlt.w	r5, #2147483648	@ 0x80000000
 801a2da:	e6f9      	b.n	801a0d0 <Argus_Eval_Update+0x320>
 801a2dc:	4605      	mov	r5, r0
 801a2de:	b150      	cbz	r0, 801a2f6 <Argus_Eval_Update+0x546>
 801a2e0:	2500      	movs	r5, #0
 801a2e2:	e000      	b.n	801a2e6 <Argus_Eval_Update+0x536>
 801a2e4:	b138      	cbz	r0, 801a2f6 <Argus_Eval_Update+0x546>
 801a2e6:	4281      	cmp	r1, r0
 801a2e8:	bf9c      	itt	ls
 801a2ea:	1a40      	subls	r0, r0, r1
 801a2ec:	431d      	orrls	r5, r3
 801a2ee:	085b      	lsrs	r3, r3, #1
 801a2f0:	ea4f 0040 	mov.w	r0, r0, lsl #1
 801a2f4:	d1f6      	bne.n	801a2e4 <Argus_Eval_Update+0x534>
 801a2f6:	4281      	cmp	r1, r0
 801a2f8:	bf98      	it	ls
 801a2fa:	3501      	addls	r5, #1
 801a2fc:	ea9c 0f02 	teq	ip, r2
 801a300:	f100 8241 	bmi.w	801a786 <Argus_Eval_Update+0x9d6>
 801a304:	2d00      	cmp	r5, #0
 801a306:	bfb8      	it	lt
 801a308:	f06f 4500 	mvnlt.w	r5, #2147483648	@ 0x80000000
 801a30c:	e6bb      	b.n	801a086 <Argus_Eval_Update+0x2d6>
 801a30e:	4608      	mov	r0, r1
 801a310:	b151      	cbz	r1, 801a328 <Argus_Eval_Update+0x578>
 801a312:	2000      	movs	r0, #0
 801a314:	e000      	b.n	801a318 <Argus_Eval_Update+0x568>
 801a316:	b139      	cbz	r1, 801a328 <Argus_Eval_Update+0x578>
 801a318:	428a      	cmp	r2, r1
 801a31a:	bf9c      	itt	ls
 801a31c:	1a89      	subls	r1, r1, r2
 801a31e:	4318      	orrls	r0, r3
 801a320:	085b      	lsrs	r3, r3, #1
 801a322:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a326:	d1f6      	bne.n	801a316 <Argus_Eval_Update+0x566>
 801a328:	428a      	cmp	r2, r1
 801a32a:	bf98      	it	ls
 801a32c:	3001      	addls	r0, #1
 801a32e:	ea94 0f05 	teq	r4, r5
 801a332:	d46b      	bmi.n	801a40c <Argus_Eval_Update+0x65c>
 801a334:	2800      	cmp	r0, #0
 801a336:	f6bf af12 	bge.w	801a15e <Argus_Eval_Update+0x3ae>
 801a33a:	e70e      	b.n	801a15a <Argus_Eval_Update+0x3aa>
 801a33c:	4605      	mov	r5, r0
 801a33e:	b150      	cbz	r0, 801a356 <Argus_Eval_Update+0x5a6>
 801a340:	2500      	movs	r5, #0
 801a342:	e000      	b.n	801a346 <Argus_Eval_Update+0x596>
 801a344:	b138      	cbz	r0, 801a356 <Argus_Eval_Update+0x5a6>
 801a346:	4281      	cmp	r1, r0
 801a348:	bf9c      	itt	ls
 801a34a:	1a40      	subls	r0, r0, r1
 801a34c:	431d      	orrls	r5, r3
 801a34e:	085b      	lsrs	r3, r3, #1
 801a350:	ea4f 0040 	mov.w	r0, r0, lsl #1
 801a354:	d1f6      	bne.n	801a344 <Argus_Eval_Update+0x594>
 801a356:	4281      	cmp	r1, r0
 801a358:	bf98      	it	ls
 801a35a:	3501      	addls	r5, #1
 801a35c:	ea92 0f0c 	teq	r2, ip
 801a360:	f100 81e9 	bmi.w	801a736 <Argus_Eval_Update+0x986>
 801a364:	2d00      	cmp	r5, #0
 801a366:	bfb8      	it	lt
 801a368:	f06f 4500 	mvnlt.w	r5, #2147483648	@ 0x80000000
 801a36c:	e6d5      	b.n	801a11a <Argus_Eval_Update+0x36a>
 801a36e:	4251      	negs	r1, r2
 801a370:	4281      	cmp	r1, r0
 801a372:	f4ff aec1 	bcc.w	801a0f8 <Argus_Eval_Update+0x348>
 801a376:	2900      	cmp	r1, #0
 801a378:	f280 81d3 	bge.w	801a722 <Argus_Eval_Update+0x972>
 801a37c:	4605      	mov	r5, r0
 801a37e:	2800      	cmp	r0, #0
 801a380:	d0ec      	beq.n	801a35c <Argus_Eval_Update+0x5ac>
 801a382:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801a386:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 801a38a:	e7d9      	b.n	801a340 <Argus_Eval_Update+0x590>
 801a38c:	4251      	negs	r1, r2
 801a38e:	4281      	cmp	r1, r0
 801a390:	f4ff ae8d 	bcc.w	801a0ae <Argus_Eval_Update+0x2fe>
 801a394:	2900      	cmp	r1, #0
 801a396:	f280 81f8 	bge.w	801a78a <Argus_Eval_Update+0x9da>
 801a39a:	4605      	mov	r5, r0
 801a39c:	2800      	cmp	r0, #0
 801a39e:	d094      	beq.n	801a2ca <Argus_Eval_Update+0x51a>
 801a3a0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 801a3a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801a3a8:	e781      	b.n	801a2ae <Argus_Eval_Update+0x4fe>
 801a3aa:	4251      	negs	r1, r2
 801a3ac:	4281      	cmp	r1, r0
 801a3ae:	f4ff ae59 	bcc.w	801a064 <Argus_Eval_Update+0x2b4>
 801a3b2:	2900      	cmp	r1, #0
 801a3b4:	f280 81df 	bge.w	801a776 <Argus_Eval_Update+0x9c6>
 801a3b8:	4605      	mov	r5, r0
 801a3ba:	2800      	cmp	r0, #0
 801a3bc:	d09e      	beq.n	801a2fc <Argus_Eval_Update+0x54c>
 801a3be:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 801a3c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801a3c6:	e78b      	b.n	801a2e0 <Argus_Eval_Update+0x530>
 801a3c8:	425b      	negs	r3, r3
 801a3ca:	428b      	cmp	r3, r1
 801a3cc:	f4ff ae1b 	bcc.w	801a006 <Argus_Eval_Update+0x256>
 801a3d0:	2b00      	cmp	r3, #0
 801a3d2:	f280 81c4 	bge.w	801a75e <Argus_Eval_Update+0x9ae>
 801a3d6:	460c      	mov	r4, r1
 801a3d8:	2900      	cmp	r1, #0
 801a3da:	f43f af58 	beq.w	801a28e <Argus_Eval_Update+0x4de>
 801a3de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801a3e2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 801a3e6:	e744      	b.n	801a272 <Argus_Eval_Update+0x4c2>
 801a3e8:	4252      	negs	r2, r2
 801a3ea:	428a      	cmp	r2, r1
 801a3ec:	f4ff aea7 	bcc.w	801a13e <Argus_Eval_Update+0x38e>
 801a3f0:	2a00      	cmp	r2, #0
 801a3f2:	f280 8240 	bge.w	801a876 <Argus_Eval_Update+0xac6>
 801a3f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801a3fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 801a3fe:	2900      	cmp	r1, #0
 801a400:	d187      	bne.n	801a312 <Argus_Eval_Update+0x562>
 801a402:	ea94 0f05 	teq	r4, r5
 801a406:	4608      	mov	r0, r1
 801a408:	f57f aea9 	bpl.w	801a15e <Argus_Eval_Update+0x3ae>
 801a40c:	4240      	negs	r0, r0
 801a40e:	e6a6      	b.n	801a15e <Argus_Eval_Update+0x3ae>
 801a410:	2900      	cmp	r1, #0
 801a412:	f02c 4500 	bic.w	r5, ip, #2147483648	@ 0x80000000
 801a416:	f2c0 8122 	blt.w	801a65e <Argus_Eval_Update+0x8ae>
 801a41a:	4ab2      	ldr	r2, [pc, #712]	@ (801a6e4 <Argus_Eval_Update+0x934>)
 801a41c:	2500      	movs	r5, #0
 801a41e:	e000      	b.n	801a422 <Argus_Eval_Update+0x672>
 801a420:	b152      	cbz	r2, 801a438 <Argus_Eval_Update+0x688>
 801a422:	428a      	cmp	r2, r1
 801a424:	bf24      	itt	cs
 801a426:	1a52      	subcs	r2, r2, r1
 801a428:	4325      	orrcs	r5, r4
 801a42a:	0864      	lsrs	r4, r4, #1
 801a42c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801a430:	d1f6      	bne.n	801a420 <Argus_Eval_Update+0x670>
 801a432:	428a      	cmp	r2, r1
 801a434:	d300      	bcc.n	801a438 <Argus_Eval_Update+0x688>
 801a436:	3501      	adds	r5, #1
 801a438:	f1be 0f00 	cmp.w	lr, #0
 801a43c:	f2c0 816c 	blt.w	801a718 <Argus_Eval_Update+0x968>
 801a440:	2d00      	cmp	r5, #0
 801a442:	f6ff ad7e 	blt.w	8019f42 <Argus_Eval_Update+0x192>
 801a446:	00ec      	lsls	r4, r5, #3
 801a448:	f9b8 52a8 	ldrsh.w	r5, [r8, #680]	@ 0x2a8
 801a44c:	f8c6 432c 	str.w	r4, [r6, #812]	@ 0x32c
 801a450:	429c      	cmp	r4, r3
 801a452:	ea4f 1585 	mov.w	r5, r5, lsl #6
 801a456:	f000 8126 	beq.w	801a6a6 <Argus_Eval_Update+0x8f6>
 801a45a:	2c00      	cmp	r4, #0
 801a45c:	46a4      	mov	ip, r4
 801a45e:	f43f ad8c 	beq.w	8019f7a <Argus_Eval_Update+0x1ca>
 801a462:	f2c0 821b 	blt.w	801a89c <Argus_Eval_Update+0xaec>
 801a466:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 801a46a:	f084 5c80 	eor.w	ip, r4, #268435456	@ 0x10000000
 801a46e:	f4ff ad75 	bcc.w	8019f5c <Argus_Eval_Update+0x1ac>
 801a472:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801a476:	2000      	movs	r0, #0
 801a478:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 801a47c:	e000      	b.n	801a480 <Argus_Eval_Update+0x6d0>
 801a47e:	b151      	cbz	r1, 801a496 <Argus_Eval_Update+0x6e6>
 801a480:	42a1      	cmp	r1, r4
 801a482:	bf24      	itt	cs
 801a484:	1b09      	subcs	r1, r1, r4
 801a486:	4310      	orrcs	r0, r2
 801a488:	0852      	lsrs	r2, r2, #1
 801a48a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a48e:	d1f6      	bne.n	801a47e <Argus_Eval_Update+0x6ce>
 801a490:	42a1      	cmp	r1, r4
 801a492:	bf28      	it	cs
 801a494:	3001      	addcs	r0, #1
 801a496:	f1bc 0f00 	cmp.w	ip, #0
 801a49a:	f2c0 80ff 	blt.w	801a69c <Argus_Eval_Update+0x8ec>
 801a49e:	2800      	cmp	r0, #0
 801a4a0:	f6ff ad6b 	blt.w	8019f7a <Argus_Eval_Update+0x1ca>
 801a4a4:	469c      	mov	ip, r3
 801a4a6:	2b00      	cmp	r3, #0
 801a4a8:	f43f ad81 	beq.w	8019fae <Argus_Eval_Update+0x1fe>
 801a4ac:	2b00      	cmp	r3, #0
 801a4ae:	f6bf ad6b 	bge.w	8019f88 <Argus_Eval_Update+0x1d8>
 801a4b2:	425b      	negs	r3, r3
 801a4b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801a4b8:	f4ff ad6a 	bcc.w	8019f90 <Argus_Eval_Update+0x1e0>
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	f280 8199 	bge.w	801a7f4 <Argus_Eval_Update+0xa44>
 801a4c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801a4c6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 801a4ca:	2400      	movs	r4, #0
 801a4cc:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 801a4d0:	e000      	b.n	801a4d4 <Argus_Eval_Update+0x724>
 801a4d2:	b151      	cbz	r1, 801a4ea <Argus_Eval_Update+0x73a>
 801a4d4:	428b      	cmp	r3, r1
 801a4d6:	bf9c      	itt	ls
 801a4d8:	1ac9      	subls	r1, r1, r3
 801a4da:	4314      	orrls	r4, r2
 801a4dc:	0852      	lsrs	r2, r2, #1
 801a4de:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a4e2:	d1f6      	bne.n	801a4d2 <Argus_Eval_Update+0x722>
 801a4e4:	428b      	cmp	r3, r1
 801a4e6:	bf98      	it	ls
 801a4e8:	3401      	addls	r4, #1
 801a4ea:	f1bc 0f00 	cmp.w	ip, #0
 801a4ee:	f2c0 80d7 	blt.w	801a6a0 <Argus_Eval_Update+0x8f0>
 801a4f2:	2c00      	cmp	r4, #0
 801a4f4:	bfb8      	it	lt
 801a4f6:	f06f 4400 	mvnlt.w	r4, #2147483648	@ 0x80000000
 801a4fa:	e55a      	b.n	8019fb2 <Argus_Eval_Update+0x202>
 801a4fc:	2c00      	cmp	r4, #0
 801a4fe:	f022 4000 	bic.w	r0, r2, #2147483648	@ 0x80000000
 801a502:	f2c0 80b2 	blt.w	801a66a <Argus_Eval_Update+0x8ba>
 801a506:	4a77      	ldr	r2, [pc, #476]	@ (801a6e4 <Argus_Eval_Update+0x934>)
 801a508:	2000      	movs	r0, #0
 801a50a:	e000      	b.n	801a50e <Argus_Eval_Update+0x75e>
 801a50c:	b152      	cbz	r2, 801a524 <Argus_Eval_Update+0x774>
 801a50e:	42a2      	cmp	r2, r4
 801a510:	bf24      	itt	cs
 801a512:	1b12      	subcs	r2, r2, r4
 801a514:	4318      	orrcs	r0, r3
 801a516:	085b      	lsrs	r3, r3, #1
 801a518:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801a51c:	d1f6      	bne.n	801a50c <Argus_Eval_Update+0x75c>
 801a51e:	42a2      	cmp	r2, r4
 801a520:	d300      	bcc.n	801a524 <Argus_Eval_Update+0x774>
 801a522:	3001      	adds	r0, #1
 801a524:	f1bc 0f00 	cmp.w	ip, #0
 801a528:	f2c0 80f8 	blt.w	801a71c <Argus_Eval_Update+0x96c>
 801a52c:	2800      	cmp	r0, #0
 801a52e:	f6ff ace1 	blt.w	8019ef4 <Argus_Eval_Update+0x144>
 801a532:	00c3      	lsls	r3, r0, #3
 801a534:	f8c6 3328 	str.w	r3, [r6, #808]	@ 0x328
 801a538:	2d00      	cmp	r5, #0
 801a53a:	f47f ace4 	bne.w	8019f06 <Argus_Eval_Update+0x156>
 801a53e:	e500      	b.n	8019f42 <Argus_Eval_Update+0x192>
 801a540:	2900      	cmp	r1, #0
 801a542:	da08      	bge.n	801a556 <Argus_Eval_Update+0x7a6>
 801a544:	4291      	cmp	r1, r2
 801a546:	f000 813f 	beq.w	801a7c8 <Argus_Eval_Update+0xa18>
 801a54a:	f030 4300 	bics.w	r3, r0, #2147483648	@ 0x80000000
 801a54e:	f02e 4100 	bic.w	r1, lr, #2147483648	@ 0x80000000
 801a552:	f000 8145 	beq.w	801a7e0 <Argus_Eval_Update+0xa30>
 801a556:	2000      	movs	r0, #0
 801a558:	e000      	b.n	801a55c <Argus_Eval_Update+0x7ac>
 801a55a:	b152      	cbz	r2, 801a572 <Argus_Eval_Update+0x7c2>
 801a55c:	428a      	cmp	r2, r1
 801a55e:	bf24      	itt	cs
 801a560:	1a52      	subcs	r2, r2, r1
 801a562:	4318      	orrcs	r0, r3
 801a564:	085b      	lsrs	r3, r3, #1
 801a566:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801a56a:	d1f6      	bne.n	801a55a <Argus_Eval_Update+0x7aa>
 801a56c:	4291      	cmp	r1, r2
 801a56e:	d800      	bhi.n	801a572 <Argus_Eval_Update+0x7c2>
 801a570:	3001      	adds	r0, #1
 801a572:	ea95 0f09 	teq	r5, r9
 801a576:	f100 80e9 	bmi.w	801a74c <Argus_Eval_Update+0x99c>
 801a57a:	2800      	cmp	r0, #0
 801a57c:	db7d      	blt.n	801a67a <Argus_Eval_Update+0x8ca>
 801a57e:	0045      	lsls	r5, r0, #1
 801a580:	4629      	mov	r1, r5
 801a582:	f1bc 0f00 	cmp.w	ip, #0
 801a586:	f47f ac9c 	bne.w	8019ec2 <Argus_Eval_Update+0x112>
 801a58a:	e4b3      	b.n	8019ef4 <Argus_Eval_Update+0x144>
 801a58c:	2b00      	cmp	r3, #0
 801a58e:	da08      	bge.n	801a5a2 <Argus_Eval_Update+0x7f2>
 801a590:	4293      	cmp	r3, r2
 801a592:	f000 8117 	beq.w	801a7c4 <Argus_Eval_Update+0xa14>
 801a596:	f03c 4400 	bics.w	r4, ip, #2147483648	@ 0x80000000
 801a59a:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801a59e:	f000 811d 	beq.w	801a7dc <Argus_Eval_Update+0xa2c>
 801a5a2:	f04f 0c00 	mov.w	ip, #0
 801a5a6:	e000      	b.n	801a5aa <Argus_Eval_Update+0x7fa>
 801a5a8:	b162      	cbz	r2, 801a5c4 <Argus_Eval_Update+0x814>
 801a5aa:	4293      	cmp	r3, r2
 801a5ac:	bf9c      	itt	ls
 801a5ae:	1ad2      	subls	r2, r2, r3
 801a5b0:	ea4c 0c04 	orrls.w	ip, ip, r4
 801a5b4:	0864      	lsrs	r4, r4, #1
 801a5b6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801a5ba:	d1f5      	bne.n	801a5a8 <Argus_Eval_Update+0x7f8>
 801a5bc:	4293      	cmp	r3, r2
 801a5be:	d801      	bhi.n	801a5c4 <Argus_Eval_Update+0x814>
 801a5c0:	f10c 0c01 	add.w	ip, ip, #1
 801a5c4:	ea9a 0f05 	teq	sl, r5
 801a5c8:	f100 80a0 	bmi.w	801a70c <Argus_Eval_Update+0x95c>
 801a5cc:	f1bc 0f00 	cmp.w	ip, #0
 801a5d0:	db5f      	blt.n	801a692 <Argus_Eval_Update+0x8e2>
 801a5d2:	ea4f 044c 	mov.w	r4, ip, lsl #1
 801a5d6:	46a4      	mov	ip, r4
 801a5d8:	e452      	b.n	8019e80 <Argus_Eval_Update+0xd0>
 801a5da:	fba0 3101 	umull	r3, r1, r0, r1
 801a5de:	0a9c      	lsrs	r4, r3, #10
 801a5e0:	fb00 1505 	mla	r5, r0, r5, r1
 801a5e4:	ea44 5485 	orr.w	r4, r4, r5, lsl #22
 801a5e8:	f3c3 2340 	ubfx	r3, r3, #9, #1
 801a5ec:	4423      	add	r3, r4
 801a5ee:	e602      	b.n	801a1f6 <Argus_Eval_Update+0x446>
 801a5f0:	fa10 f30e 	lsls.w	r3, r0, lr
 801a5f4:	d561      	bpl.n	801a6ba <Argus_Eval_Update+0x90a>
 801a5f6:	f06f 0307 	mvn.w	r3, #7
 801a5fa:	f8c6 3328 	str.w	r3, [r6, #808]	@ 0x328
 801a5fe:	f9b8 52a8 	ldrsh.w	r5, [r8, #680]	@ 0x2a8
 801a602:	f06f 0307 	mvn.w	r3, #7
 801a606:	f8c6 332c 	str.w	r3, [r6, #812]	@ 0x32c
 801a60a:	01ad      	lsls	r5, r5, #6
 801a60c:	4618      	mov	r0, r3
 801a60e:	e4ed      	b.n	8019fec <Argus_Eval_Update+0x23c>
 801a610:	f080 5480 	eor.w	r4, r0, #268435456	@ 0x10000000
 801a614:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 801a618:	2300      	movs	r3, #0
 801a61a:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 801a61e:	e000      	b.n	801a622 <Argus_Eval_Update+0x872>
 801a620:	b150      	cbz	r0, 801a638 <Argus_Eval_Update+0x888>
 801a622:	4282      	cmp	r2, r0
 801a624:	bf9c      	itt	ls
 801a626:	1a80      	subls	r0, r0, r2
 801a628:	430b      	orrls	r3, r1
 801a62a:	0849      	lsrs	r1, r1, #1
 801a62c:	ea4f 0040 	mov.w	r0, r0, lsl #1
 801a630:	d1f6      	bne.n	801a620 <Argus_Eval_Update+0x870>
 801a632:	4282      	cmp	r2, r0
 801a634:	bf98      	it	ls
 801a636:	3301      	addls	r3, #1
 801a638:	2c00      	cmp	r4, #0
 801a63a:	db33      	blt.n	801a6a4 <Argus_Eval_Update+0x8f4>
 801a63c:	2b00      	cmp	r3, #0
 801a63e:	4618      	mov	r0, r3
 801a640:	f6ff acd1 	blt.w	8019fe6 <Argus_Eval_Update+0x236>
 801a644:	2b00      	cmp	r3, #0
 801a646:	f47f acd1 	bne.w	8019fec <Argus_Eval_Update+0x23c>
 801a64a:	43e9      	mvns	r1, r5
 801a64c:	0fc9      	lsrs	r1, r1, #31
 801a64e:	4249      	negs	r1, r1
 801a650:	b289      	uxth	r1, r1
 801a652:	e4e8      	b.n	801a026 <Argus_Eval_Update+0x276>
 801a654:	2c00      	cmp	r4, #0
 801a656:	f340 80bf 	ble.w	801a7d8 <Argus_Eval_Update+0xa28>
 801a65a:	b2a1      	uxth	r1, r4
 801a65c:	e4e3      	b.n	801a026 <Argus_Eval_Update+0x276>
 801a65e:	2d00      	cmp	r5, #0
 801a660:	f43f aee9 	beq.w	801a436 <Argus_Eval_Update+0x686>
 801a664:	4611      	mov	r1, r2
 801a666:	462c      	mov	r4, r5
 801a668:	e6d7      	b.n	801a41a <Argus_Eval_Update+0x66a>
 801a66a:	2800      	cmp	r0, #0
 801a66c:	f43f af59 	beq.w	801a522 <Argus_Eval_Update+0x772>
 801a670:	4674      	mov	r4, lr
 801a672:	4603      	mov	r3, r0
 801a674:	e747      	b.n	801a506 <Argus_Eval_Update+0x756>
 801a676:	4629      	mov	r1, r5
 801a678:	e5c9      	b.n	801a20e <Argus_Eval_Update+0x45e>
 801a67a:	f1bc 0f00 	cmp.w	ip, #0
 801a67e:	f47f ac1d 	bne.w	8019ebc <Argus_Eval_Update+0x10c>
 801a682:	f06f 0307 	mvn.w	r3, #7
 801a686:	f06f 0501 	mvn.w	r5, #1
 801a68a:	f8c6 3328 	str.w	r3, [r6, #808]	@ 0x328
 801a68e:	4629      	mov	r1, r5
 801a690:	e437      	b.n	8019f02 <Argus_Eval_Update+0x152>
 801a692:	f06f 0c01 	mvn.w	ip, #1
 801a696:	4664      	mov	r4, ip
 801a698:	f7ff bbf2 	b.w	8019e80 <Argus_Eval_Update+0xd0>
 801a69c:	4240      	negs	r0, r0
 801a69e:	e701      	b.n	801a4a4 <Argus_Eval_Update+0x6f4>
 801a6a0:	4264      	negs	r4, r4
 801a6a2:	e486      	b.n	8019fb2 <Argus_Eval_Update+0x202>
 801a6a4:	425b      	negs	r3, r3
 801a6a6:	4618      	mov	r0, r3
 801a6a8:	e7cc      	b.n	801a644 <Argus_Eval_Update+0x894>
 801a6aa:	4242      	negs	r2, r0
 801a6ac:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 801a6b0:	f080 80a3 	bcs.w	801a7fa <Argus_Eval_Update+0xa4a>
 801a6b4:	f080 5480 	eor.w	r4, r0, #268435456	@ 0x10000000
 801a6b8:	e487      	b.n	8019fca <Argus_Eval_Update+0x21a>
 801a6ba:	f06f 0307 	mvn.w	r3, #7
 801a6be:	f8df e028 	ldr.w	lr, [pc, #40]	@ 801a6e8 <Argus_Eval_Update+0x938>
 801a6c2:	f8c6 3328 	str.w	r3, [r6, #808]	@ 0x328
 801a6c6:	2102      	movs	r1, #2
 801a6c8:	e428      	b.n	8019f1c <Argus_Eval_Update+0x16c>
 801a6ca:	f1cc 0300 	rsb	r3, ip, #0
 801a6ce:	fb83 3201 	smull	r3, r2, r3, r1
 801a6d2:	ea4f 2e93 	mov.w	lr, r3, lsr #10
 801a6d6:	ea4e 5e82 	orr.w	lr, lr, r2, lsl #22
 801a6da:	f3c3 2240 	ubfx	r2, r3, #9, #1
 801a6de:	4472      	add	r2, lr
 801a6e0:	f7ff bb93 	b.w	8019e0a <Argus_Eval_Update+0x5a>
 801a6e4:	4779e128 	.word	0x4779e128
 801a6e8:	b8861ed6 	.word	0xb8861ed6
 801a6ec:	4a73      	ldr	r2, [pc, #460]	@ (801a8bc <Argus_Eval_Update+0xb0c>)
 801a6ee:	f8df e1d4 	ldr.w	lr, [pc, #468]	@ 801a8c4 <Argus_Eval_Update+0xb14>
 801a6f2:	4249      	negs	r1, r1
 801a6f4:	4291      	cmp	r1, r2
 801a6f6:	ea85 0e0e 	eor.w	lr, r5, lr
 801a6fa:	f67f ac0f 	bls.w	8019f1c <Argus_Eval_Update+0x16c>
 801a6fe:	2900      	cmp	r1, #0
 801a700:	da67      	bge.n	801a7d2 <Argus_Eval_Update+0xa22>
 801a702:	084a      	lsrs	r2, r1, #1
 801a704:	f44f 4500 	mov.w	r5, #32768	@ 0x8000
 801a708:	e7ac      	b.n	801a664 <Argus_Eval_Update+0x8b4>
 801a70a:	4694      	mov	ip, r2
 801a70c:	f1cc 0400 	rsb	r4, ip, #0
 801a710:	0064      	lsls	r4, r4, #1
 801a712:	46a4      	mov	ip, r4
 801a714:	f7ff bbb4 	b.w	8019e80 <Argus_Eval_Update+0xd0>
 801a718:	426d      	negs	r5, r5
 801a71a:	e694      	b.n	801a446 <Argus_Eval_Update+0x696>
 801a71c:	4243      	negs	r3, r0
 801a71e:	00db      	lsls	r3, r3, #3
 801a720:	e708      	b.n	801a534 <Argus_Eval_Update+0x784>
 801a722:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801a726:	2800      	cmp	r0, #0
 801a728:	f47f ae0a 	bne.w	801a340 <Argus_Eval_Update+0x590>
 801a72c:	ea92 0f0c 	teq	r2, ip
 801a730:	4605      	mov	r5, r0
 801a732:	f57f acf2 	bpl.w	801a11a <Argus_Eval_Update+0x36a>
 801a736:	426d      	negs	r5, r5
 801a738:	e4ef      	b.n	801a11a <Argus_Eval_Update+0x36a>
 801a73a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801a73e:	2a00      	cmp	r2, #0
 801a740:	f47f af09 	bne.w	801a556 <Argus_Eval_Update+0x7a6>
 801a744:	ea95 0f09 	teq	r5, r9
 801a748:	d54c      	bpl.n	801a7e4 <Argus_Eval_Update+0xa34>
 801a74a:	4610      	mov	r0, r2
 801a74c:	4241      	negs	r1, r0
 801a74e:	0049      	lsls	r1, r1, #1
 801a750:	460d      	mov	r5, r1
 801a752:	f1bc 0f00 	cmp.w	ip, #0
 801a756:	f47f abb4 	bne.w	8019ec2 <Argus_Eval_Update+0x112>
 801a75a:	f7ff bbcb 	b.w	8019ef4 <Argus_Eval_Update+0x144>
 801a75e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801a762:	2900      	cmp	r1, #0
 801a764:	f47f ad85 	bne.w	801a272 <Argus_Eval_Update+0x4c2>
 801a768:	ea95 0f00 	teq	r5, r0
 801a76c:	460c      	mov	r4, r1
 801a76e:	f57f ad94 	bpl.w	801a29a <Argus_Eval_Update+0x4ea>
 801a772:	4264      	negs	r4, r4
 801a774:	e591      	b.n	801a29a <Argus_Eval_Update+0x4ea>
 801a776:	2800      	cmp	r0, #0
 801a778:	f47f adb2 	bne.w	801a2e0 <Argus_Eval_Update+0x530>
 801a77c:	ea9c 0f02 	teq	ip, r2
 801a780:	4605      	mov	r5, r0
 801a782:	f57f ac80 	bpl.w	801a086 <Argus_Eval_Update+0x2d6>
 801a786:	426d      	negs	r5, r5
 801a788:	e47d      	b.n	801a086 <Argus_Eval_Update+0x2d6>
 801a78a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801a78e:	2800      	cmp	r0, #0
 801a790:	f47f ad8d 	bne.w	801a2ae <Argus_Eval_Update+0x4fe>
 801a794:	ea92 0f0c 	teq	r2, ip
 801a798:	4605      	mov	r5, r0
 801a79a:	f57f ac99 	bpl.w	801a0d0 <Argus_Eval_Update+0x320>
 801a79e:	426d      	negs	r5, r5
 801a7a0:	e496      	b.n	801a0d0 <Argus_Eval_Update+0x320>
 801a7a2:	b3a2      	cbz	r2, 801a80e <Argus_Eval_Update+0xa5e>
 801a7a4:	462b      	mov	r3, r5
 801a7a6:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 801a7aa:	e6fa      	b.n	801a5a2 <Argus_Eval_Update+0x7f2>
 801a7ac:	4b43      	ldr	r3, [pc, #268]	@ (801a8bc <Argus_Eval_Update+0xb0c>)
 801a7ae:	4264      	negs	r4, r4
 801a7b0:	429c      	cmp	r4, r3
 801a7b2:	f67f ab8e 	bls.w	8019ed2 <Argus_Eval_Update+0x122>
 801a7b6:	2c00      	cmp	r4, #0
 801a7b8:	da08      	bge.n	801a7cc <Argus_Eval_Update+0xa1c>
 801a7ba:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 801a7be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801a7c2:	e6a0      	b.n	801a506 <Argus_Eval_Update+0x756>
 801a7c4:	46a4      	mov	ip, r4
 801a7c6:	e6fd      	b.n	801a5c4 <Argus_Eval_Update+0x814>
 801a7c8:	4618      	mov	r0, r3
 801a7ca:	e6d2      	b.n	801a572 <Argus_Eval_Update+0x7c2>
 801a7cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801a7d0:	e699      	b.n	801a506 <Argus_Eval_Update+0x756>
 801a7d2:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 801a7d6:	e620      	b.n	801a41a <Argus_Eval_Update+0x66a>
 801a7d8:	2100      	movs	r1, #0
 801a7da:	e424      	b.n	801a026 <Argus_Eval_Update+0x276>
 801a7dc:	46a4      	mov	ip, r4
 801a7de:	e6ed      	b.n	801a5bc <Argus_Eval_Update+0x80c>
 801a7e0:	4618      	mov	r0, r3
 801a7e2:	e6c3      	b.n	801a56c <Argus_Eval_Update+0x7bc>
 801a7e4:	f1bc 0f00 	cmp.w	ip, #0
 801a7e8:	f43f af05 	beq.w	801a5f6 <Argus_Eval_Update+0x846>
 801a7ec:	2500      	movs	r5, #0
 801a7ee:	4629      	mov	r1, r5
 801a7f0:	f7ff bb67 	b.w	8019ec2 <Argus_Eval_Update+0x112>
 801a7f4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801a7f8:	e667      	b.n	801a4ca <Argus_Eval_Update+0x71a>
 801a7fa:	2a00      	cmp	r2, #0
 801a7fc:	f6bf af08 	bge.w	801a610 <Argus_Eval_Update+0x860>
 801a800:	f080 5480 	eor.w	r4, r0, #268435456	@ 0x10000000
 801a804:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 801a808:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801a80c:	e704      	b.n	801a618 <Argus_Eval_Update+0x868>
 801a80e:	ea9a 0f05 	teq	sl, r5
 801a812:	f53f af7a 	bmi.w	801a70a <Argus_Eval_Update+0x95a>
 801a816:	4614      	mov	r4, r2
 801a818:	46a4      	mov	ip, r4
 801a81a:	f7ff bb31 	b.w	8019e80 <Argus_Eval_Update+0xd0>
 801a81e:	f9b8 52a8 	ldrsh.w	r5, [r8, #680]	@ 0x2a8
 801a822:	f8c6 432c 	str.w	r4, [r6, #812]	@ 0x32c
 801a826:	01ad      	lsls	r5, r5, #6
 801a828:	2b00      	cmp	r3, #0
 801a82a:	f47f aba6 	bne.w	8019f7a <Argus_Eval_Update+0x1ca>
 801a82e:	e70c      	b.n	801a64a <Argus_Eval_Update+0x89a>
 801a830:	f8c6 3328 	str.w	r3, [r6, #808]	@ 0x328
 801a834:	2d00      	cmp	r5, #0
 801a836:	f47f ab66 	bne.w	8019f06 <Argus_Eval_Update+0x156>
 801a83a:	f9b8 52a8 	ldrsh.w	r5, [r8, #680]	@ 0x2a8
 801a83e:	f06f 0207 	mvn.w	r2, #7
 801a842:	f8c6 232c 	str.w	r2, [r6, #812]	@ 0x32c
 801a846:	01ad      	lsls	r5, r5, #6
 801a848:	f7ff bb85 	b.w	8019f56 <Argus_Eval_Update+0x1a6>
 801a84c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801a850:	4618      	mov	r0, r3
 801a852:	f7ff bbcb 	b.w	8019fec <Argus_Eval_Update+0x23c>
 801a856:	f1b0 4000 	subs.w	r0, r0, #2147483648	@ 0x80000000
 801a85a:	f47f abaf 	bne.w	8019fbc <Argus_Eval_Update+0x20c>
 801a85e:	f7ff bbc2 	b.w	8019fe6 <Argus_Eval_Update+0x236>
 801a862:	469c      	mov	ip, r3
 801a864:	b11b      	cbz	r3, 801a86e <Argus_Eval_Update+0xabe>
 801a866:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 801a86a:	f7ff bb8a 	b.w	8019f82 <Argus_Eval_Update+0x1d2>
 801a86e:	4c14      	ldr	r4, [pc, #80]	@ (801a8c0 <Argus_Eval_Update+0xb10>)
 801a870:	2201      	movs	r2, #1
 801a872:	f7ff bbaa 	b.w	8019fca <Argus_Eval_Update+0x21a>
 801a876:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801a87a:	e5c0      	b.n	801a3fe <Argus_Eval_Update+0x64e>
 801a87c:	fb03 f405 	mul.w	r4, r3, r5
 801a880:	17dd      	asrs	r5, r3, #31
 801a882:	fb01 4405 	mla	r4, r1, r5, r4
 801a886:	fba3 3101 	umull	r3, r1, r3, r1
 801a88a:	4421      	add	r1, r4
 801a88c:	0a9c      	lsrs	r4, r3, #10
 801a88e:	ea44 5481 	orr.w	r4, r4, r1, lsl #22
 801a892:	f3c3 2340 	ubfx	r3, r3, #9, #1
 801a896:	4423      	add	r3, r4
 801a898:	f7ff bac8 	b.w	8019e2c <Argus_Eval_Update+0x7c>
 801a89c:	4264      	negs	r4, r4
 801a89e:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 801a8a2:	f08c 5c80 	eor.w	ip, ip, #268435456	@ 0x10000000
 801a8a6:	f4ff ab59 	bcc.w	8019f5c <Argus_Eval_Update+0x1ac>
 801a8aa:	2c00      	cmp	r4, #0
 801a8ac:	f6bf ade1 	bge.w	801a472 <Argus_Eval_Update+0x6c2>
 801a8b0:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 801a8b4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 801a8b8:	e5dd      	b.n	801a476 <Argus_Eval_Update+0x6c6>
 801a8ba:	bf00      	nop
 801a8bc:	4779e127 	.word	0x4779e127
 801a8c0:	10000001 	.word	0x10000001
 801a8c4:	4779e128 	.word	0x4779e128

0801a8c8 <Argus_Eval_ApplyAuxEvaluation>:
 801a8c8:	2a00      	cmp	r2, #0
 801a8ca:	d05c      	beq.n	801a986 <Argus_Eval_ApplyAuxEvaluation+0xbe>
 801a8cc:	b500      	push	{lr}
 801a8ce:	788b      	ldrb	r3, [r1, #2]
 801a8d0:	f891 c001 	ldrb.w	ip, [r1, #1]
 801a8d4:	f891 e003 	ldrb.w	lr, [r1, #3]
 801a8d8:	021b      	lsls	r3, r3, #8
 801a8da:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 801a8de:	ea43 030e 	orr.w	r3, r3, lr
 801a8e2:	f44f 3c00 	mov.w	ip, #131072	@ 0x20000
 801a8e6:	fbbc f2f2 	udiv	r2, ip, r2
 801a8ea:	3201      	adds	r2, #1
 801a8ec:	1052      	asrs	r2, r2, #1
 801a8ee:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801a8f2:	fb02 f303 	mul.w	r3, r2, r3
 801a8f6:	0b1b      	lsrs	r3, r3, #12
 801a8f8:	8003      	strh	r3, [r0, #0]
 801a8fa:	794b      	ldrb	r3, [r1, #5]
 801a8fc:	f891 c004 	ldrb.w	ip, [r1, #4]
 801a900:	021b      	lsls	r3, r3, #8
 801a902:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 801a906:	f891 c006 	ldrb.w	ip, [r1, #6]
 801a90a:	ea43 030c 	orr.w	r3, r3, ip
 801a90e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801a912:	fb02 f303 	mul.w	r3, r2, r3
 801a916:	0b1b      	lsrs	r3, r3, #12
 801a918:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 801a91c:	8043      	strh	r3, [r0, #2]
 801a91e:	7a0b      	ldrb	r3, [r1, #8]
 801a920:	f891 c007 	ldrb.w	ip, [r1, #7]
 801a924:	021b      	lsls	r3, r3, #8
 801a926:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 801a92a:	f891 c009 	ldrb.w	ip, [r1, #9]
 801a92e:	ea43 030c 	orr.w	r3, r3, ip
 801a932:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801a936:	fb02 f303 	mul.w	r3, r2, r3
 801a93a:	0b1b      	lsrs	r3, r3, #12
 801a93c:	8083      	strh	r3, [r0, #4]
 801a93e:	7acb      	ldrb	r3, [r1, #11]
 801a940:	f891 c00a 	ldrb.w	ip, [r1, #10]
 801a944:	021b      	lsls	r3, r3, #8
 801a946:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 801a94a:	f891 c00c 	ldrb.w	ip, [r1, #12]
 801a94e:	ea43 030c 	orr.w	r3, r3, ip
 801a952:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801a956:	fb02 f303 	mul.w	r3, r2, r3
 801a95a:	0b1b      	lsrs	r3, r3, #12
 801a95c:	80c3      	strh	r3, [r0, #6]
 801a95e:	7b8b      	ldrb	r3, [r1, #14]
 801a960:	f891 c00d 	ldrb.w	ip, [r1, #13]
 801a964:	7bc9      	ldrb	r1, [r1, #15]
 801a966:	021b      	lsls	r3, r3, #8
 801a968:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 801a96c:	430b      	orrs	r3, r1
 801a96e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801a972:	fb02 f303 	mul.w	r3, r2, r3
 801a976:	0b1b      	lsrs	r3, r3, #12
 801a978:	8103      	strh	r3, [r0, #8]
 801a97a:	f04f 33ff 	mov.w	r3, #4294967295
 801a97e:	f8c0 300a 	str.w	r3, [r0, #10]
 801a982:	f85d fb04 	ldr.w	pc, [sp], #4
 801a986:	f04f 33ff 	mov.w	r3, #4294967295
 801a98a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801a98e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801a992:	6043      	str	r3, [r0, #4]
 801a994:	8103      	strh	r3, [r0, #8]
 801a996:	f04f 33ff 	mov.w	r3, #4294967295
 801a99a:	8001      	strh	r1, [r0, #0]
 801a99c:	8042      	strh	r2, [r0, #2]
 801a99e:	f8c0 300a 	str.w	r3, [r0, #10]
 801a9a2:	4770      	bx	lr

0801a9a4 <Argus_Eval_Apply>:
 801a9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9a8:	f8c2 31cc 	str.w	r3, [r2, #460]	@ 0x1cc
 801a9ac:	690b      	ldr	r3, [r1, #16]
 801a9ae:	4617      	mov	r7, r2
 801a9b0:	f3c3 3e81 	ubfx	lr, r3, #14, #2
 801a9b4:	f102 050c 	add.w	r5, r2, #12
 801a9b8:	0f9a      	lsrs	r2, r3, #30
 801a9ba:	ea4e 0282 	orr.w	r2, lr, r2, lsl #2
 801a9be:	ea4f 2e13 	mov.w	lr, r3, lsr #8
 801a9c2:	f00e 0e30 	and.w	lr, lr, #48	@ 0x30
 801a9c6:	ea4e 0e02 	orr.w	lr, lr, r2
 801a9ca:	0d9a      	lsrs	r2, r3, #22
 801a9cc:	f002 02c0 	and.w	r2, r2, #192	@ 0xc0
 801a9d0:	ea42 0e0e 	orr.w	lr, r2, lr
 801a9d4:	089a      	lsrs	r2, r3, #2
 801a9d6:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 801a9da:	ea42 020e 	orr.w	r2, r2, lr
 801a9de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801a9e2:	f40e 6e40 	and.w	lr, lr, #3072	@ 0xc00
 801a9e6:	ea4e 0202 	orr.w	r2, lr, r2
 801a9ea:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 801a9ee:	f40e 5e40 	and.w	lr, lr, #12288	@ 0x3000
 801a9f2:	ea4e 0e02 	orr.w	lr, lr, r2
 801a9f6:	0a9a      	lsrs	r2, r3, #10
 801a9f8:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 801a9fc:	ea42 0e0e 	orr.w	lr, r2, lr
 801aa00:	029a      	lsls	r2, r3, #10
 801aa02:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
 801aa06:	ea42 020e 	orr.w	r2, r2, lr
 801aa0a:	ea4f 1e13 	mov.w	lr, r3, lsr #4
 801aa0e:	f40e 2e40 	and.w	lr, lr, #786432	@ 0xc0000
 801aa12:	ea4e 0202 	orr.w	r2, lr, r2
 801aa16:	ea4f 4e03 	mov.w	lr, r3, lsl #16
 801aa1a:	f40e 1e40 	and.w	lr, lr, #3145728	@ 0x300000
 801aa1e:	ea4e 0e02 	orr.w	lr, lr, r2
 801aa22:	009a      	lsls	r2, r3, #2
 801aa24:	f402 0240 	and.w	r2, r2, #12582912	@ 0xc00000
 801aa28:	ea42 0e0e 	orr.w	lr, r2, lr
 801aa2c:	059a      	lsls	r2, r3, #22
 801aa2e:	f002 7240 	and.w	r2, r2, #50331648	@ 0x3000000
 801aa32:	ea42 020e 	orr.w	r2, r2, lr
 801aa36:	ea4f 2e03 	mov.w	lr, r3, lsl #8
 801aa3a:	f00e 6e40 	and.w	lr, lr, #201326592	@ 0xc000000
 801aa3e:	ea4e 0202 	orr.w	r2, lr, r2
 801aa42:	ea4f 7e03 	mov.w	lr, r3, lsl #28
 801aa46:	f00e 5e40 	and.w	lr, lr, #805306368	@ 0x30000000
 801aa4a:	ea4e 0e02 	orr.w	lr, lr, r2
 801aa4e:	0c1b      	lsrs	r3, r3, #16
 801aa50:	ea4e 7e83 	orr.w	lr, lr, r3, lsl #30
 801aa54:	680b      	ldr	r3, [r1, #0]
 801aa56:	f101 0c0c 	add.w	ip, r1, #12
 801aa5a:	4604      	mov	r4, r0
 801aa5c:	4688      	mov	r8, r1
 801aa5e:	f101 0904 	add.w	r9, r1, #4
 801aa62:	ea03 7ae3 	and.w	sl, r3, r3, asr #31
 801aa66:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801aa6a:	462e      	mov	r6, r5
 801aa6c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801aa6e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801aa72:	69bb      	ldr	r3, [r7, #24]
 801aa74:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 801aa78:	f413 6200 	ands.w	r2, r3, #2048	@ 0x800
 801aa7c:	e899 0003 	ldmia.w	r9, {r0, r1}
 801aa80:	bf18      	it	ne
 801aa82:	f8d4 3354 	ldrne.w	r3, [r4, #852]	@ 0x354
 801aa86:	f107 0b04 	add.w	fp, r7, #4
 801aa8a:	e88b 0003 	stmia.w	fp, {r0, r1}
 801aa8e:	bf18      	it	ne
 801aa90:	f8b3 20a0 	ldrhne.w	r2, [r3, #160]	@ 0xa0
 801aa94:	f8c7 e010 	str.w	lr, [r7, #16]
 801aa98:	b08f      	sub	sp, #60	@ 0x3c
 801aa9a:	f507 70de 	add.w	r0, r7, #444	@ 0x1bc
 801aa9e:	f208 11b5 	addw	r1, r8, #437	@ 0x1b5
 801aaa2:	f8c7 a000 	str.w	sl, [r7]
 801aaa6:	f7ff ff0f 	bl	801a8c8 <Argus_Eval_ApplyAuxEvaluation>
 801aaaa:	4601      	mov	r1, r0
 801aaac:	69ba      	ldr	r2, [r7, #24]
 801aaae:	f8d4 036c 	ldr.w	r0, [r4, #876]	@ 0x36c
 801aab2:	f00b fa85 	bl	8025fc0 <Argus_Cal_ApplyAuxCalibration>
 801aab6:	f8d4 036c 	ldr.w	r0, [r4, #876]	@ 0x36c
 801aaba:	f00b fa33 	bl	8025f24 <Argus_Cal_ApplyTempCalibration>
 801aabe:	69b9      	ldr	r1, [r7, #24]
 801aac0:	f411 6180 	ands.w	r1, r1, #1024	@ 0x400
 801aac4:	d14a      	bne.n	801ab5c <Argus_Eval_Apply+0x1b8>
 801aac6:	f8d7 01cc 	ldr.w	r0, [r7, #460]	@ 0x1cc
 801aaca:	b120      	cbz	r0, 801aad6 <Argus_Eval_Apply+0x132>
 801aacc:	f44f 7204 	mov.w	r2, #528	@ 0x210
 801aad0:	3004      	adds	r0, #4
 801aad2:	f010 fa6a 	bl	802afaa <memset>
 801aad6:	f8d4 0368 	ldr.w	r0, [r4, #872]	@ 0x368
 801aada:	4639      	mov	r1, r7
 801aadc:	f003 fbbc 	bl	801e258 <Argus_Dca_Evaluate>
 801aae0:	6838      	ldr	r0, [r7, #0]
 801aae2:	1d81      	adds	r1, r0, #6
 801aae4:	d019      	beq.n	801ab1a <Argus_Eval_Apply+0x176>
 801aae6:	f110 0f6b 	cmn.w	r0, #107	@ 0x6b
 801aaea:	d016      	beq.n	801ab1a <Argus_Eval_Apply+0x176>
 801aaec:	f100 0372 	add.w	r3, r0, #114	@ 0x72
 801aaf0:	2b01      	cmp	r3, #1
 801aaf2:	d912      	bls.n	801ab1a <Argus_Eval_Apply+0x176>
 801aaf4:	2800      	cmp	r0, #0
 801aaf6:	db05      	blt.n	801ab04 <Argus_Eval_Apply+0x160>
 801aaf8:	d02b      	beq.n	801ab52 <Argus_Eval_Apply+0x1ae>
 801aafa:	2332      	movs	r3, #50	@ 0x32
 801aafc:	286c      	cmp	r0, #108	@ 0x6c
 801aafe:	f887 31ba 	strb.w	r3, [r7, #442]	@ 0x1ba
 801ab02:	d102      	bne.n	801ab0a <Argus_Eval_Apply+0x166>
 801ab04:	2301      	movs	r3, #1
 801ab06:	f887 31ba 	strb.w	r3, [r7, #442]	@ 0x1ba
 801ab0a:	69ba      	ldr	r2, [r7, #24]
 801ab0c:	06d2      	lsls	r2, r2, #27
 801ab0e:	d501      	bpl.n	801ab14 <Argus_Eval_Apply+0x170>
 801ab10:	f887 31ba 	strb.w	r3, [r7, #442]	@ 0x1ba
 801ab14:	b00f      	add	sp, #60	@ 0x3c
 801ab16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801ab1e:	f507 71da 	add.w	r1, r7, #436	@ 0x1b4
 801ab22:	7a1a      	ldrb	r2, [r3, #8]
 801ab24:	330c      	adds	r3, #12
 801ab26:	f062 021b 	orn	r2, r2, #27
 801ab2a:	428b      	cmp	r3, r1
 801ab2c:	f803 2c04 	strb.w	r2, [r3, #-4]
 801ab30:	d1f7      	bne.n	801ab22 <Argus_Eval_Apply+0x17e>
 801ab32:	f504 71c6 	add.w	r1, r4, #396	@ 0x18c
 801ab36:	7a22      	ldrb	r2, [r4, #8]
 801ab38:	f894 319c 	ldrb.w	r3, [r4, #412]	@ 0x19c
 801ab3c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 801ab40:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 801ab44:	7222      	strb	r2, [r4, #8]
 801ab46:	f884 319c 	strb.w	r3, [r4, #412]	@ 0x19c
 801ab4a:	340c      	adds	r4, #12
 801ab4c:	428c      	cmp	r4, r1
 801ab4e:	d1f2      	bne.n	801ab36 <Argus_Eval_Apply+0x192>
 801ab50:	e7d0      	b.n	801aaf4 <Argus_Eval_Apply+0x150>
 801ab52:	2364      	movs	r3, #100	@ 0x64
 801ab54:	f887 31ba 	strb.w	r3, [r7, #442]	@ 0x1ba
 801ab58:	2332      	movs	r3, #50	@ 0x32
 801ab5a:	e7d6      	b.n	801ab0a <Argus_Eval_Apply+0x166>
 801ab5c:	4642      	mov	r2, r8
 801ab5e:	4639      	mov	r1, r7
 801ab60:	4620      	mov	r0, r4
 801ab62:	f7fe fa31 	bl	8018fc8 <ApplyPhaseEvaluation>
 801ab66:	f8d4 c354 	ldr.w	ip, [r4, #852]	@ 0x354
 801ab6a:	f89c 30d4 	ldrb.w	r3, [ip, #212]	@ 0xd4
 801ab6e:	2b02      	cmp	r3, #2
 801ab70:	f000 81f0 	beq.w	801af54 <Argus_Eval_Apply+0x5b0>
 801ab74:	2300      	movs	r3, #0
 801ab76:	f8c4 3330 	str.w	r3, [r4, #816]	@ 0x330
 801ab7a:	69bb      	ldr	r3, [r7, #24]
 801ab7c:	f8b7 801c 	ldrh.w	r8, [r7, #28]
 801ab80:	f003 0202 	and.w	r2, r3, #2
 801ab84:	9201      	str	r2, [sp, #4]
 801ab86:	f107 0a28 	add.w	sl, r7, #40	@ 0x28
 801ab8a:	f8b4 2190 	ldrh.w	r2, [r4, #400]	@ 0x190
 801ab8e:	f8a4 2324 	strh.w	r2, [r4, #804]	@ 0x324
 801ab92:	f8d4 218c 	ldr.w	r2, [r4, #396]	@ 0x18c
 801ab96:	f8c4 318c 	str.w	r3, [r4, #396]	@ 0x18c
 801ab9a:	f013 0304 	ands.w	r3, r3, #4
 801ab9e:	f8a4 8190 	strh.w	r8, [r4, #400]	@ 0x190
 801aba2:	f8c4 2320 	str.w	r2, [r4, #800]	@ 0x320
 801aba6:	930c      	str	r3, [sp, #48]	@ 0x30
 801aba8:	f040 8156 	bne.w	801ae58 <Argus_Eval_Apply+0x4b4>
 801abac:	9b01      	ldr	r3, [sp, #4]
 801abae:	f8d4 2328 	ldr.w	r2, [r4, #808]	@ 0x328
 801abb2:	2b00      	cmp	r3, #0
 801abb4:	f000 81c6 	beq.w	801af44 <Argus_Eval_Apply+0x5a0>
 801abb8:	f8d4 332c 	ldr.w	r3, [r4, #812]	@ 0x32c
 801abbc:	4610      	mov	r0, r2
 801abbe:	461e      	mov	r6, r3
 801abc0:	1b81      	subs	r1, r0, r6
 801abc2:	469e      	mov	lr, r3
 801abc4:	4688      	mov	r8, r1
 801abc6:	2900      	cmp	r1, #0
 801abc8:	f000 81ee 	beq.w	801afa8 <Argus_Eval_Apply+0x604>
 801abcc:	2b00      	cmp	r3, #0
 801abce:	bfb8      	it	lt
 801abd0:	425b      	neglt	r3, r3
 801abd2:	2900      	cmp	r1, #0
 801abd4:	f2c0 82c1 	blt.w	801b15a <Argus_Eval_Apply+0x7b6>
 801abd8:	4299      	cmp	r1, r3
 801abda:	f080 838d 	bcs.w	801b2f8 <Argus_Eval_Apply+0x954>
 801abde:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 801abe2:	0049      	lsls	r1, r1, #1
 801abe4:	4299      	cmp	r1, r3
 801abe6:	ea4f 0040 	mov.w	r0, r0, lsl #1
 801abea:	d3fa      	bcc.n	801abe2 <Argus_Eval_Apply+0x23e>
 801abec:	2800      	cmp	r0, #0
 801abee:	f040 82bb 	bne.w	801b168 <Argus_Eval_Apply+0x7c4>
 801abf2:	ea9e 0f08 	teq	lr, r8
 801abf6:	4bc8      	ldr	r3, [pc, #800]	@ (801af18 <Argus_Eval_Apply+0x574>)
 801abf8:	bf58      	it	pl
 801abfa:	f44f 0300 	movpl.w	r3, #8388608	@ 0x800000
 801abfe:	9301      	str	r3, [sp, #4]
 801ac00:	f89c 30a9 	ldrb.w	r3, [ip, #169]	@ 0xa9
 801ac04:	f89c 10aa 	ldrb.w	r1, [ip, #170]	@ 0xaa
 801ac08:	f89c 00ac 	ldrb.w	r0, [ip, #172]	@ 0xac
 801ac0c:	019b      	lsls	r3, r3, #6
 801ac0e:	9308      	str	r3, [sp, #32]
 801ac10:	f89c 30ad 	ldrb.w	r3, [ip, #173]	@ 0xad
 801ac14:	03db      	lsls	r3, r3, #15
 801ac16:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ac18:	0a13      	lsrs	r3, r2, #8
 801ac1a:	fb01 f303 	mul.w	r3, r1, r3
 801ac1e:	03c0      	lsls	r0, r0, #15
 801ac20:	9305      	str	r3, [sp, #20]
 801ac22:	f8b4 3350 	ldrh.w	r3, [r4, #848]	@ 0x350
 801ac26:	900a      	str	r0, [sp, #40]	@ 0x28
 801ac28:	9309      	str	r3, [sp, #36]	@ 0x24
 801ac2a:	4629      	mov	r1, r5
 801ac2c:	f8d4 036c 	ldr.w	r0, [r4, #876]	@ 0x36c
 801ac30:	f00b f828 	bl	8025c84 <Argus_Cal_ApplyFrequencyTemperatureCompensation>
 801ac34:	f8b7 21c0 	ldrh.w	r2, [r7, #448]	@ 0x1c0
 801ac38:	69b9      	ldr	r1, [r7, #24]
 801ac3a:	4605      	mov	r5, r0
 801ac3c:	f8d4 036c 	ldr.w	r0, [r4, #876]	@ 0x36c
 801ac40:	f00b f8cc 	bl	8025ddc <Argus_Cal_GetGlobalRangeOffset>
 801ac44:	69ba      	ldr	r2, [r7, #24]
 801ac46:	970d      	str	r7, [sp, #52]	@ 0x34
 801ac48:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 801ac4c:	f002 0208 	and.w	r2, r2, #8
 801ac50:	9204      	str	r2, [sp, #16]
 801ac52:	ea4f 32d5 	mov.w	r2, r5, lsr #15
 801ac56:	9202      	str	r2, [sp, #8]
 801ac58:	bf0c      	ite	eq
 801ac5a:	2228      	moveq	r2, #40	@ 0x28
 801ac5c:	222a      	movne	r2, #42	@ 0x2a
 801ac5e:	9207      	str	r2, [sp, #28]
 801ac60:	006a      	lsls	r2, r5, #1
 801ac62:	9206      	str	r2, [sp, #24]
 801ac64:	f3c5 020e 	ubfx	r2, r5, #0, #15
 801ac68:	f10a 030c 	add.w	r3, sl, #12
 801ac6c:	f04f 0e00 	mov.w	lr, #0
 801ac70:	9203      	str	r2, [sp, #12]
 801ac72:	f104 0c0c 	add.w	ip, r4, #12
 801ac76:	4682      	mov	sl, r0
 801ac78:	46a3      	mov	fp, r4
 801ac7a:	e020      	b.n	801acbe <Argus_Eval_Apply+0x31a>
 801ac7c:	f042 0220 	orr.w	r2, r2, #32
 801ac80:	f803 2c04 	strb.w	r2, [r3, #-4]
 801ac84:	f81c 2c04 	ldrb.w	r2, [ip, #-4]
 801ac88:	f042 0220 	orr.w	r2, r2, #32
 801ac8c:	f80c 2c04 	strb.w	r2, [ip, #-4]
 801ac90:	f89c 2190 	ldrb.w	r2, [ip, #400]	@ 0x190
 801ac94:	f012 0f20 	tst.w	r2, #32
 801ac98:	9a04      	ldr	r2, [sp, #16]
 801ac9a:	f000 8118 	beq.w	801aece <Argus_Eval_Apply+0x52a>
 801ac9e:	2a00      	cmp	r2, #0
 801aca0:	bf08      	it	eq
 801aca2:	f06f 4500 	mvneq.w	r5, #2147483648	@ 0x80000000
 801aca6:	f843 5c0c 	str.w	r5, [r3, #-12]
 801acaa:	f10e 0e01 	add.w	lr, lr, #1
 801acae:	f1be 0f21 	cmp.w	lr, #33	@ 0x21
 801acb2:	f103 030c 	add.w	r3, r3, #12
 801acb6:	f10c 0c0c 	add.w	ip, ip, #12
 801acba:	f000 8116 	beq.w	801aeea <Argus_Eval_Apply+0x546>
 801acbe:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 801acc2:	07d4      	lsls	r4, r2, #31
 801acc4:	f100 80e3 	bmi.w	801ae8e <Argus_Eval_Apply+0x4ea>
 801acc8:	f833 1c08 	ldrh.w	r1, [r3, #-8]
 801accc:	9803      	ldr	r0, [sp, #12]
 801acce:	9c02      	ldr	r4, [sp, #8]
 801acd0:	fb01 f000 	mul.w	r0, r1, r0
 801acd4:	0bc5      	lsrs	r5, r0, #15
 801acd6:	fb01 5504 	mla	r5, r1, r4, r5
 801acda:	f3c0 3080 	ubfx	r0, r0, #14, #1
 801acde:	4405      	add	r5, r0
 801ace0:	9801      	ldr	r0, [sp, #4]
 801ace2:	eba5 050a 	sub.w	r5, r5, sl
 801ace6:	2800      	cmp	r0, #0
 801ace8:	f000 80c0 	beq.w	801ae6c <Argus_Eval_Apply+0x4c8>
 801acec:	f1be 0f20 	cmp.w	lr, #32
 801acf0:	f000 80f9 	beq.w	801aee6 <Argus_Eval_Apply+0x542>
 801acf4:	f91c 0c03 	ldrsb.w	r0, [ip, #-3]
 801acf8:	f803 0c03 	strb.w	r0, [r3, #-3]
 801acfc:	f81c 4c04 	ldrb.w	r4, [ip, #-4]
 801ad00:	4314      	orrs	r4, r2
 801ad02:	f014 0f2a 	tst.w	r4, #42	@ 0x2a
 801ad06:	f040 80d9 	bne.w	801aebc <Argus_Eval_Apply+0x518>
 801ad0a:	f89c 6190 	ldrb.w	r6, [ip, #400]	@ 0x190
 801ad0e:	9c07      	ldr	r4, [sp, #28]
 801ad10:	4034      	ands	r4, r6
 801ad12:	f040 80d3 	bne.w	801aebc <Argus_Eval_Apply+0x518>
 801ad16:	f016 0f2a 	tst.w	r6, #42	@ 0x2a
 801ad1a:	f000 80c2 	beq.w	801aea2 <Argus_Eval_Apply+0x4fe>
 801ad1e:	9e08      	ldr	r6, [sp, #32]
 801ad20:	2e00      	cmp	r6, #0
 801ad22:	f040 80fb 	bne.w	801af1c <Argus_Eval_Apply+0x578>
 801ad26:	4634      	mov	r4, r6
 801ad28:	f83c 6c08 	ldrh.w	r6, [ip, #-8]
 801ad2c:	4434      	add	r4, r6
 801ad2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801ad30:	b2a4      	uxth	r4, r4
 801ad32:	2e00      	cmp	r6, #0
 801ad34:	f000 80fc 	beq.w	801af30 <Argus_Eval_Apply+0x58c>
 801ad38:	1b0c      	subs	r4, r1, r4
 801ad3a:	b2a4      	uxth	r4, r4
 801ad3c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801ad3e:	4434      	add	r4, r6
 801ad40:	b2a4      	uxth	r4, r4
 801ad42:	1ba4      	subs	r4, r4, r6
 801ad44:	9e01      	ldr	r6, [sp, #4]
 801ad46:	fb06 f404 	mul.w	r4, r6, r4
 801ad4a:	ebb4 2101 	subs.w	r1, r4, r1, lsl #8
 801ad4e:	f100 80f2 	bmi.w	801af36 <Argus_Eval_Apply+0x592>
 801ad52:	f3c1 54c0 	ubfx	r4, r1, #23, #1
 801ad56:	eb04 6411 	add.w	r4, r4, r1, lsr #24
 801ad5a:	9f01      	ldr	r7, [sp, #4]
 801ad5c:	b264      	sxtb	r4, r4
 801ad5e:	1c66      	adds	r6, r4, #1
 801ad60:	ebb7 2f06 	cmp.w	r7, r6, lsl #8
 801ad64:	e9dd 760a 	ldrd	r7, r6, [sp, #40]	@ 0x28
 801ad68:	bf88      	it	hi
 801ad6a:	463e      	movhi	r6, r7
 801ad6c:	4627      	mov	r7, r4
 801ad6e:	b13e      	cbz	r6, 801ad80 <Argus_Eval_Apply+0x3dc>
 801ad70:	eba1 6104 	sub.w	r1, r1, r4, lsl #24
 801ad74:	2900      	cmp	r1, #0
 801ad76:	bfb8      	it	lt
 801ad78:	4249      	neglt	r1, r1
 801ad7a:	428e      	cmp	r6, r1
 801ad7c:	f0c0 809e 	bcc.w	801aebc <Argus_Eval_Apply+0x518>
 801ad80:	f803 7c03 	strb.w	r7, [r3, #-3]
 801ad84:	9906      	ldr	r1, [sp, #24]
 801ad86:	fb04 5401 	mla	r4, r4, r1, r5
 801ad8a:	f012 0f6a 	tst.w	r2, #106	@ 0x6a
 801ad8e:	f040 8086 	bne.w	801ae9e <Argus_Eval_Apply+0x4fa>
 801ad92:	9905      	ldr	r1, [sp, #20]
 801ad94:	2900      	cmp	r1, #0
 801ad96:	f000 8082 	beq.w	801ae9e <Argus_Eval_Apply+0x4fa>
 801ad9a:	f89c 1190 	ldrb.w	r1, [ip, #400]	@ 0x190
 801ad9e:	f85c 5c0c 	ldr.w	r5, [ip, #-12]
 801ada2:	9805      	ldr	r0, [sp, #20]
 801ada4:	f011 0f2a 	tst.w	r1, #42	@ 0x2a
 801ada8:	bf03      	ittte	eq
 801adaa:	f8dc 1188 	ldreq.w	r1, [ip, #392]	@ 0x188
 801adae:	1909      	addeq	r1, r1, r4
 801adb0:	1049      	asreq	r1, r1, #1
 801adb2:	4621      	movne	r1, r4
 801adb4:	1a6d      	subs	r5, r5, r1
 801adb6:	ea85 71e5 	eor.w	r1, r5, r5, asr #31
 801adba:	eba1 71e5 	sub.w	r1, r1, r5, asr #31
 801adbe:	4281      	cmp	r1, r0
 801adc0:	bf83      	ittte	hi
 801adc2:	f042 0240 	orrhi.w	r2, r2, #64	@ 0x40
 801adc6:	f803 2c04 	strbhi.w	r2, [r3, #-4]
 801adca:	4625      	movhi	r5, r4
 801adcc:	eb04 0565 	addls.w	r5, r4, r5, asr #1
 801add0:	f833 2c06 	ldrh.w	r2, [r3, #-6]
 801add4:	f83c 0c06 	ldrh.w	r0, [ip, #-6]
 801add8:	f8db 8354 	ldr.w	r8, [fp, #852]	@ 0x354
 801addc:	4282      	cmp	r2, r0
 801adde:	f898 10ab 	ldrb.w	r1, [r8, #171]	@ 0xab
 801ade2:	eba2 0900 	sub.w	r9, r2, r0
 801ade6:	bf38      	it	cc
 801ade8:	4602      	movcc	r2, r0
 801adea:	fb01 f202 	mul.w	r2, r1, r2
 801adee:	ea89 71e9 	eor.w	r1, r9, r9, asr #31
 801adf2:	eba1 71e9 	sub.w	r1, r1, r9, asr #31
 801adf6:	f1ac 060c 	sub.w	r6, ip, #12
 801adfa:	ebb1 2f12 	cmp.w	r1, r2, lsr #8
 801adfe:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801ae02:	f50c 77c4 	add.w	r7, ip, #392	@ 0x188
 801ae06:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 801ae0a:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801ae0e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 801ae12:	f833 2c06 	ldrh.w	r2, [r3, #-6]
 801ae16:	f84c 4c0c 	str.w	r4, [ip, #-12]
 801ae1a:	bf94      	ite	ls
 801ae1c:	f3c9 094f 	ubfxls	r9, r9, #1, #16
 801ae20:	f04f 0900 	movhi.w	r9, #0
 801ae24:	eba2 0909 	sub.w	r9, r2, r9
 801ae28:	fa1f f989 	uxth.w	r9, r9
 801ae2c:	f823 9c06 	strh.w	r9, [r3, #-6]
 801ae30:	f8b8 200e 	ldrh.w	r2, [r8, #14]
 801ae34:	454a      	cmp	r2, r9
 801ae36:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 801ae3a:	f63f af1f 	bhi.w	801ac7c <Argus_Eval_Apply+0x2d8>
 801ae3e:	0650      	lsls	r0, r2, #25
 801ae40:	d542      	bpl.n	801aec8 <Argus_Eval_Apply+0x524>
 801ae42:	9904      	ldr	r1, [sp, #16]
 801ae44:	b909      	cbnz	r1, 801ae4a <Argus_Eval_Apply+0x4a6>
 801ae46:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 801ae4a:	f843 5c0c 	str.w	r5, [r3, #-12]
 801ae4e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 801ae52:	f803 2c04 	strb.w	r2, [r3, #-4]
 801ae56:	e728      	b.n	801acaa <Argus_Eval_Apply+0x306>
 801ae58:	9b01      	ldr	r3, [sp, #4]
 801ae5a:	f8d4 232c 	ldr.w	r2, [r4, #812]	@ 0x32c
 801ae5e:	2b00      	cmp	r3, #0
 801ae60:	d070      	beq.n	801af44 <Argus_Eval_Apply+0x5a0>
 801ae62:	f8d4 3328 	ldr.w	r3, [r4, #808]	@ 0x328
 801ae66:	4616      	mov	r6, r2
 801ae68:	4618      	mov	r0, r3
 801ae6a:	e6a9      	b.n	801abc0 <Argus_Eval_Apply+0x21c>
 801ae6c:	f1ac 040c 	sub.w	r4, ip, #12
 801ae70:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801ae74:	f50c 76c4 	add.w	r6, ip, #392	@ 0x188
 801ae78:	f8db 8354 	ldr.w	r8, [fp, #852]	@ 0x354
 801ae7c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 801ae80:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801ae84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801ae88:	f833 9c06 	ldrh.w	r9, [r3, #-6]
 801ae8c:	e7d0      	b.n	801ae30 <Argus_Eval_Apply+0x48c>
 801ae8e:	f04f 0200 	mov.w	r2, #0
 801ae92:	f823 2c08 	strh.w	r2, [r3, #-8]
 801ae96:	2200      	movs	r2, #0
 801ae98:	f843 2c0c 	str.w	r2, [r3, #-12]
 801ae9c:	e705      	b.n	801acaa <Argus_Eval_Apply+0x306>
 801ae9e:	4625      	mov	r5, r4
 801aea0:	e796      	b.n	801add0 <Argus_Eval_Apply+0x42c>
 801aea2:	f8bc 418c 	ldrh.w	r4, [ip, #396]	@ 0x18c
 801aea6:	9e08      	ldr	r6, [sp, #32]
 801aea8:	1b0c      	subs	r4, r1, r4
 801aeaa:	b224      	sxth	r4, r4
 801aeac:	b3b6      	cbz	r6, 801af1c <Argus_Eval_Apply+0x578>
 801aeae:	4637      	mov	r7, r6
 801aeb0:	ea84 76e4 	eor.w	r6, r4, r4, asr #31
 801aeb4:	eba6 76e4 	sub.w	r6, r6, r4, asr #31
 801aeb8:	42b7      	cmp	r7, r6
 801aeba:	d22f      	bcs.n	801af1c <Argus_Eval_Apply+0x578>
 801aebc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801aec0:	f803 2c04 	strb.w	r2, [r3, #-4]
 801aec4:	4604      	mov	r4, r0
 801aec6:	e75d      	b.n	801ad84 <Argus_Eval_Apply+0x3e0>
 801aec8:	f843 5c0c 	str.w	r5, [r3, #-12]
 801aecc:	e6ed      	b.n	801acaa <Argus_Eval_Apply+0x306>
 801aece:	b90a      	cbnz	r2, 801aed4 <Argus_Eval_Apply+0x530>
 801aed0:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 801aed4:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 801aed8:	f843 5c0c 	str.w	r5, [r3, #-12]
 801aedc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 801aee0:	f803 2c04 	strb.w	r2, [r3, #-4]
 801aee4:	e6e1      	b.n	801acaa <Argus_Eval_Apply+0x306>
 801aee6:	462c      	mov	r4, r5
 801aee8:	e74f      	b.n	801ad8a <Argus_Eval_Apply+0x3e6>
 801aeea:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801aeec:	f8db 036c 	ldr.w	r0, [fp, #876]	@ 0x36c
 801aef0:	4639      	mov	r1, r7
 801aef2:	f50b 7556 	add.w	r5, fp, #856	@ 0x358
 801aef6:	f00a ffdd 	bl	8025eb4 <Argus_Cal_ApplyPixelOffsetCompensation>
 801aefa:	4628      	mov	r0, r5
 801aefc:	4639      	mov	r1, r7
 801aefe:	f001 f9eb 	bl	801c2d8 <Argus_Pba_ApplyPreFilter>
 801af02:	f8db 0368 	ldr.w	r0, [fp, #872]	@ 0x368
 801af06:	4639      	mov	r1, r7
 801af08:	f003 f9a6 	bl	801e258 <Argus_Dca_Evaluate>
 801af0c:	4639      	mov	r1, r7
 801af0e:	4628      	mov	r0, r5
 801af10:	465c      	mov	r4, fp
 801af12:	f000 fbd1 	bl	801b6b8 <Argus_Pba_Apply>
 801af16:	e5e3      	b.n	801aae0 <Argus_Eval_Apply+0x13c>
 801af18:	ff800000 	.word	0xff800000
 801af1c:	f83c 6c08 	ldrh.w	r6, [ip, #-8]
 801af20:	f3c4 044f 	ubfx	r4, r4, #1, #16
 801af24:	4434      	add	r4, r6
 801af26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801af28:	b2a4      	uxth	r4, r4
 801af2a:	2e00      	cmp	r6, #0
 801af2c:	f47f af04 	bne.w	801ad38 <Argus_Eval_Apply+0x394>
 801af30:	1a64      	subs	r4, r4, r1
 801af32:	b2a4      	uxth	r4, r4
 801af34:	e702      	b.n	801ad3c <Argus_Eval_Apply+0x398>
 801af36:	424e      	negs	r6, r1
 801af38:	f3c6 54c0 	ubfx	r4, r6, #23, #1
 801af3c:	eb04 6416 	add.w	r4, r4, r6, lsr #24
 801af40:	4264      	negs	r4, r4
 801af42:	e70a      	b.n	801ad5a <Argus_Eval_Apply+0x3b6>
 801af44:	2300      	movs	r3, #0
 801af46:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801af4a:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 801af4e:	9305      	str	r3, [sp, #20]
 801af50:	9301      	str	r3, [sp, #4]
 801af52:	e66a      	b.n	801ac2a <Argus_Eval_Apply+0x286>
 801af54:	69bb      	ldr	r3, [r7, #24]
 801af56:	f8b7 801c 	ldrh.w	r8, [r7, #28]
 801af5a:	f44f 72ca 	mov.w	r2, #404	@ 0x194
 801af5e:	f3c3 0140 	ubfx	r1, r3, #1, #1
 801af62:	fb02 4101 	mla	r1, r2, r1, r4
 801af66:	f242 0003 	movw	r0, #8195	@ 0x2003
 801af6a:	f8d1 218c 	ldr.w	r2, [r1, #396]	@ 0x18c
 801af6e:	405a      	eors	r2, r3
 801af70:	f003 0602 	and.w	r6, r3, #2
 801af74:	4002      	ands	r2, r0
 801af76:	9601      	str	r6, [sp, #4]
 801af78:	d103      	bne.n	801af82 <Argus_Eval_Apply+0x5de>
 801af7a:	f8b1 e190 	ldrh.w	lr, [r1, #400]	@ 0x190
 801af7e:	45f0      	cmp	r8, lr
 801af80:	d01e      	beq.n	801afc0 <Argus_Eval_Apply+0x61c>
 801af82:	f8d4 2330 	ldr.w	r2, [r4, #816]	@ 0x330
 801af86:	f107 0a28 	add.w	sl, r7, #40	@ 0x28
 801af8a:	2a00      	cmp	r2, #0
 801af8c:	f2c0 80e3 	blt.w	801b156 <Argus_Eval_Apply+0x7b2>
 801af90:	f3c2 21c0 	ubfx	r1, r2, #11, #1
 801af94:	eb01 3212 	add.w	r2, r1, r2, lsr #12
 801af98:	f64f 71fd 	movw	r1, #65533	@ 0xfffd
 801af9c:	428a      	cmp	r2, r1
 801af9e:	d80c      	bhi.n	801afba <Argus_Eval_Apply+0x616>
 801afa0:	b292      	uxth	r2, r2
 801afa2:	f8a7 21c8 	strh.w	r2, [r7, #456]	@ 0x1c8
 801afa6:	e5f0      	b.n	801ab8a <Argus_Eval_Apply+0x1e6>
 801afa8:	2b00      	cmp	r3, #0
 801afaa:	4b8d      	ldr	r3, [pc, #564]	@ (801b1e0 <Argus_Eval_Apply+0x83c>)
 801afac:	bfa8      	it	ge
 801afae:	f44f 0300 	movge.w	r3, #8388608	@ 0x800000
 801afb2:	9301      	str	r3, [sp, #4]
 801afb4:	e624      	b.n	801ac00 <Argus_Eval_Apply+0x25c>
 801afb6:	f8c4 2330 	str.w	r2, [r4, #816]	@ 0x330
 801afba:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801afbe:	e7f0      	b.n	801afa2 <Argus_Eval_Apply+0x5fe>
 801afc0:	f107 0a28 	add.w	sl, r7, #40	@ 0x28
 801afc4:	ea4f 2688 	mov.w	r6, r8, lsl #10
 801afc8:	f1b8 0f00 	cmp.w	r8, #0
 801afcc:	f000 81c9 	beq.w	801b362 <Argus_Eval_Apply+0x9be>
 801afd0:	2eff      	cmp	r6, #255	@ 0xff
 801afd2:	dc00      	bgt.n	801afd6 <Argus_Eval_Apply+0x632>
 801afd4:	e7fe      	b.n	801afd4 <Argus_Eval_Apply+0x630>
 801afd6:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 801afda:	f240 8224 	bls.w	801b426 <Argus_Eval_Apply+0xa82>
 801afde:	4610      	mov	r0, r2
 801afe0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801afe4:	4296      	cmp	r6, r2
 801afe6:	bf9c      	itt	ls
 801afe8:	1b92      	subls	r2, r2, r6
 801afea:	f440 4080 	orrls.w	r0, r0, #16384	@ 0x4000
 801afee:	0052      	lsls	r2, r2, #1
 801aff0:	d063      	beq.n	801b0ba <Argus_Eval_Apply+0x716>
 801aff2:	42b2      	cmp	r2, r6
 801aff4:	bf24      	itt	cs
 801aff6:	1b92      	subcs	r2, r2, r6
 801aff8:	f440 5000 	orrcs.w	r0, r0, #8192	@ 0x2000
 801affc:	0052      	lsls	r2, r2, #1
 801affe:	d05c      	beq.n	801b0ba <Argus_Eval_Apply+0x716>
 801b000:	42b2      	cmp	r2, r6
 801b002:	bf24      	itt	cs
 801b004:	1b92      	subcs	r2, r2, r6
 801b006:	f440 5080 	orrcs.w	r0, r0, #4096	@ 0x1000
 801b00a:	0052      	lsls	r2, r2, #1
 801b00c:	d055      	beq.n	801b0ba <Argus_Eval_Apply+0x716>
 801b00e:	4296      	cmp	r6, r2
 801b010:	bf9c      	itt	ls
 801b012:	1b92      	subls	r2, r2, r6
 801b014:	f440 6000 	orrls.w	r0, r0, #2048	@ 0x800
 801b018:	0052      	lsls	r2, r2, #1
 801b01a:	d04e      	beq.n	801b0ba <Argus_Eval_Apply+0x716>
 801b01c:	4296      	cmp	r6, r2
 801b01e:	bf9c      	itt	ls
 801b020:	1b92      	subls	r2, r2, r6
 801b022:	f440 6080 	orrls.w	r0, r0, #1024	@ 0x400
 801b026:	0052      	lsls	r2, r2, #1
 801b028:	d047      	beq.n	801b0ba <Argus_Eval_Apply+0x716>
 801b02a:	4296      	cmp	r6, r2
 801b02c:	bf9c      	itt	ls
 801b02e:	1b92      	subls	r2, r2, r6
 801b030:	f440 7000 	orrls.w	r0, r0, #512	@ 0x200
 801b034:	0052      	lsls	r2, r2, #1
 801b036:	d040      	beq.n	801b0ba <Argus_Eval_Apply+0x716>
 801b038:	42b2      	cmp	r2, r6
 801b03a:	bf24      	itt	cs
 801b03c:	1b92      	subcs	r2, r2, r6
 801b03e:	f440 7080 	orrcs.w	r0, r0, #256	@ 0x100
 801b042:	0052      	lsls	r2, r2, #1
 801b044:	d039      	beq.n	801b0ba <Argus_Eval_Apply+0x716>
 801b046:	4296      	cmp	r6, r2
 801b048:	bf9c      	itt	ls
 801b04a:	1b92      	subls	r2, r2, r6
 801b04c:	f040 0080 	orrls.w	r0, r0, #128	@ 0x80
 801b050:	0052      	lsls	r2, r2, #1
 801b052:	d032      	beq.n	801b0ba <Argus_Eval_Apply+0x716>
 801b054:	42b2      	cmp	r2, r6
 801b056:	bf24      	itt	cs
 801b058:	1b92      	subcs	r2, r2, r6
 801b05a:	f040 0040 	orrcs.w	r0, r0, #64	@ 0x40
 801b05e:	0052      	lsls	r2, r2, #1
 801b060:	d02b      	beq.n	801b0ba <Argus_Eval_Apply+0x716>
 801b062:	42b2      	cmp	r2, r6
 801b064:	bf24      	itt	cs
 801b066:	1b92      	subcs	r2, r2, r6
 801b068:	f040 0020 	orrcs.w	r0, r0, #32
 801b06c:	0052      	lsls	r2, r2, #1
 801b06e:	d024      	beq.n	801b0ba <Argus_Eval_Apply+0x716>
 801b070:	4296      	cmp	r6, r2
 801b072:	bf9c      	itt	ls
 801b074:	1b92      	subls	r2, r2, r6
 801b076:	f040 0010 	orrls.w	r0, r0, #16
 801b07a:	0052      	lsls	r2, r2, #1
 801b07c:	d01d      	beq.n	801b0ba <Argus_Eval_Apply+0x716>
 801b07e:	4296      	cmp	r6, r2
 801b080:	bf9c      	itt	ls
 801b082:	1b92      	subls	r2, r2, r6
 801b084:	f040 0008 	orrls.w	r0, r0, #8
 801b088:	0052      	lsls	r2, r2, #1
 801b08a:	d016      	beq.n	801b0ba <Argus_Eval_Apply+0x716>
 801b08c:	4296      	cmp	r6, r2
 801b08e:	bf9c      	itt	ls
 801b090:	1b92      	subls	r2, r2, r6
 801b092:	f040 0004 	orrls.w	r0, r0, #4
 801b096:	0052      	lsls	r2, r2, #1
 801b098:	d00f      	beq.n	801b0ba <Argus_Eval_Apply+0x716>
 801b09a:	4296      	cmp	r6, r2
 801b09c:	bf9c      	itt	ls
 801b09e:	1b92      	subls	r2, r2, r6
 801b0a0:	f040 0002 	orrls.w	r0, r0, #2
 801b0a4:	0052      	lsls	r2, r2, #1
 801b0a6:	d008      	beq.n	801b0ba <Argus_Eval_Apply+0x716>
 801b0a8:	4296      	cmp	r6, r2
 801b0aa:	bf9c      	itt	ls
 801b0ac:	1b92      	subls	r2, r2, r6
 801b0ae:	f040 0001 	orrls.w	r0, r0, #1
 801b0b2:	ebb6 0f42 	cmp.w	r6, r2, lsl #1
 801b0b6:	d800      	bhi.n	801b0ba <Argus_Eval_Apply+0x716>
 801b0b8:	3001      	adds	r0, #1
 801b0ba:	ea4f 268e 	mov.w	r6, lr, lsl #10
 801b0be:	f1be 0f00 	cmp.w	lr, #0
 801b0c2:	f040 808a 	bne.w	801b1da <Argus_Eval_Apply+0x836>
 801b0c6:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 801b0ca:	f8dc 60dc 	ldr.w	r6, [ip, #220]	@ 0xdc
 801b0ce:	9603      	str	r6, [sp, #12]
 801b0d0:	2200      	movs	r2, #0
 801b0d2:	e9cd c304 	strd	ip, r3, [sp, #16]
 801b0d6:	9202      	str	r2, [sp, #8]
 801b0d8:	9b03      	ldr	r3, [sp, #12]
 801b0da:	9406      	str	r4, [sp, #24]
 801b0dc:	4693      	mov	fp, r2
 801b0de:	4656      	mov	r6, sl
 801b0e0:	f8cd a00c 	str.w	sl, [sp, #12]
 801b0e4:	fa23 fc02 	lsr.w	ip, r3, r2
 801b0e8:	f01c 0f01 	tst.w	ip, #1
 801b0ec:	f102 0201 	add.w	r2, r2, #1
 801b0f0:	d01b      	beq.n	801b12a <Argus_Eval_Apply+0x786>
 801b0f2:	f896 c008 	ldrb.w	ip, [r6, #8]
 801b0f6:	f01c 0f03 	tst.w	ip, #3
 801b0fa:	d116      	bne.n	801b12a <Argus_Eval_Apply+0x786>
 801b0fc:	f891 c008 	ldrb.w	ip, [r1, #8]
 801b100:	f01c 0f03 	tst.w	ip, #3
 801b104:	d111      	bne.n	801b12a <Argus_Eval_Apply+0x786>
 801b106:	f8b6 c00a 	ldrh.w	ip, [r6, #10]
 801b10a:	f8b1 900a 	ldrh.w	r9, [r1, #10]
 801b10e:	9c02      	ldr	r4, [sp, #8]
 801b110:	fb00 fc0c 	mul.w	ip, r0, ip
 801b114:	fb0e f909 	mul.w	r9, lr, r9
 801b118:	ebbc 0a09 	subs.w	sl, ip, r9
 801b11c:	f104 0401 	add.w	r4, r4, #1
 801b120:	bf48      	it	mi
 801b122:	eba9 0a0c 	submi.w	sl, r9, ip
 801b126:	9402      	str	r4, [sp, #8]
 801b128:	44d3      	add	fp, sl
 801b12a:	2a20      	cmp	r2, #32
 801b12c:	f106 060c 	add.w	r6, r6, #12
 801b130:	f101 010c 	add.w	r1, r1, #12
 801b134:	d1d6      	bne.n	801b0e4 <Argus_Eval_Apply+0x740>
 801b136:	9a02      	ldr	r2, [sp, #8]
 801b138:	f8dd a00c 	ldr.w	sl, [sp, #12]
 801b13c:	9c06      	ldr	r4, [sp, #24]
 801b13e:	e9dd c304 	ldrd	ip, r3, [sp, #16]
 801b142:	2a00      	cmp	r2, #0
 801b144:	f040 80db 	bne.w	801b2fe <Argus_Eval_Apply+0x95a>
 801b148:	f8d4 2330 	ldr.w	r2, [r4, #816]	@ 0x330
 801b14c:	e71d      	b.n	801af8a <Argus_Eval_Apply+0x5e6>
 801b14e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801b152:	f8c4 2330 	str.w	r2, [r4, #816]	@ 0x330
 801b156:	2200      	movs	r2, #0
 801b158:	e723      	b.n	801afa2 <Argus_Eval_Apply+0x5fe>
 801b15a:	1a31      	subs	r1, r6, r0
 801b15c:	4299      	cmp	r1, r3
 801b15e:	bf28      	it	cs
 801b160:	f44f 3080 	movcs.w	r0, #65536	@ 0x10000
 801b164:	f4ff ad3b 	bcc.w	801abde <Argus_Eval_Apply+0x23a>
 801b168:	2900      	cmp	r1, #0
 801b16a:	db26      	blt.n	801b1ba <Argus_Eval_Apply+0x816>
 801b16c:	461e      	mov	r6, r3
 801b16e:	b153      	cbz	r3, 801b186 <Argus_Eval_Apply+0x7e2>
 801b170:	2600      	movs	r6, #0
 801b172:	e000      	b.n	801b176 <Argus_Eval_Apply+0x7d2>
 801b174:	b13b      	cbz	r3, 801b186 <Argus_Eval_Apply+0x7e2>
 801b176:	428b      	cmp	r3, r1
 801b178:	bf24      	itt	cs
 801b17a:	1a5b      	subcs	r3, r3, r1
 801b17c:	4306      	orrcs	r6, r0
 801b17e:	0840      	lsrs	r0, r0, #1
 801b180:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b184:	d1f6      	bne.n	801b174 <Argus_Eval_Apply+0x7d0>
 801b186:	4299      	cmp	r1, r3
 801b188:	d800      	bhi.n	801b18c <Argus_Eval_Apply+0x7e8>
 801b18a:	3601      	adds	r6, #1
 801b18c:	ea9e 0f08 	teq	lr, r8
 801b190:	d408      	bmi.n	801b1a4 <Argus_Eval_Apply+0x800>
 801b192:	2e00      	cmp	r6, #0
 801b194:	f2c0 80aa 	blt.w	801b2ec <Argus_Eval_Apply+0x948>
 801b198:	f3c6 13c0 	ubfx	r3, r6, #7, #1
 801b19c:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 801b1a0:	9301      	str	r3, [sp, #4]
 801b1a2:	e52d      	b.n	801ac00 <Argus_Eval_Apply+0x25c>
 801b1a4:	4273      	negs	r3, r6
 801b1a6:	2b00      	cmp	r3, #0
 801b1a8:	f280 8120 	bge.w	801b3ec <Argus_Eval_Apply+0xa48>
 801b1ac:	f3c6 13c0 	ubfx	r3, r6, #7, #1
 801b1b0:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801b1b4:	4273      	negs	r3, r6
 801b1b6:	9301      	str	r3, [sp, #4]
 801b1b8:	e522      	b.n	801ac00 <Argus_Eval_Apply+0x25c>
 801b1ba:	428b      	cmp	r3, r1
 801b1bc:	f080 809a 	bcs.w	801b2f4 <Argus_Eval_Apply+0x950>
 801b1c0:	0840      	lsrs	r0, r0, #1
 801b1c2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801b1c6:	f000 80cf 	beq.w	801b368 <Argus_Eval_Apply+0x9c4>
 801b1ca:	2b00      	cmp	r3, #0
 801b1cc:	d1d0      	bne.n	801b170 <Argus_Eval_Apply+0x7cc>
 801b1ce:	ea9e 0f08 	teq	lr, r8
 801b1d2:	f100 810b 	bmi.w	801b3ec <Argus_Eval_Apply+0xa48>
 801b1d6:	461e      	mov	r6, r3
 801b1d8:	e7de      	b.n	801b198 <Argus_Eval_Apply+0x7f4>
 801b1da:	2eff      	cmp	r6, #255	@ 0xff
 801b1dc:	dc02      	bgt.n	801b1e4 <Argus_Eval_Apply+0x840>
 801b1de:	e7fe      	b.n	801b1de <Argus_Eval_Apply+0x83a>
 801b1e0:	ff800000 	.word	0xff800000
 801b1e4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 801b1e8:	f240 8125 	bls.w	801b436 <Argus_Eval_Apply+0xa92>
 801b1ec:	f04f 0e00 	mov.w	lr, #0
 801b1f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801b1f4:	4296      	cmp	r6, r2
 801b1f6:	bf9c      	itt	ls
 801b1f8:	1b92      	subls	r2, r2, r6
 801b1fa:	f44e 4e80 	orrls.w	lr, lr, #16384	@ 0x4000
 801b1fe:	0052      	lsls	r2, r2, #1
 801b200:	f43f af63 	beq.w	801b0ca <Argus_Eval_Apply+0x726>
 801b204:	4296      	cmp	r6, r2
 801b206:	bf9c      	itt	ls
 801b208:	1b92      	subls	r2, r2, r6
 801b20a:	f44e 5e00 	orrls.w	lr, lr, #8192	@ 0x2000
 801b20e:	0052      	lsls	r2, r2, #1
 801b210:	f43f af5b 	beq.w	801b0ca <Argus_Eval_Apply+0x726>
 801b214:	4296      	cmp	r6, r2
 801b216:	bf9c      	itt	ls
 801b218:	1b92      	subls	r2, r2, r6
 801b21a:	f44e 5e80 	orrls.w	lr, lr, #4096	@ 0x1000
 801b21e:	0052      	lsls	r2, r2, #1
 801b220:	f43f af53 	beq.w	801b0ca <Argus_Eval_Apply+0x726>
 801b224:	4296      	cmp	r6, r2
 801b226:	bf9c      	itt	ls
 801b228:	1b92      	subls	r2, r2, r6
 801b22a:	f44e 6e00 	orrls.w	lr, lr, #2048	@ 0x800
 801b22e:	0052      	lsls	r2, r2, #1
 801b230:	f43f af4b 	beq.w	801b0ca <Argus_Eval_Apply+0x726>
 801b234:	4296      	cmp	r6, r2
 801b236:	bf9c      	itt	ls
 801b238:	1b92      	subls	r2, r2, r6
 801b23a:	f44e 6e80 	orrls.w	lr, lr, #1024	@ 0x400
 801b23e:	0052      	lsls	r2, r2, #1
 801b240:	f43f af43 	beq.w	801b0ca <Argus_Eval_Apply+0x726>
 801b244:	4296      	cmp	r6, r2
 801b246:	bf9c      	itt	ls
 801b248:	1b92      	subls	r2, r2, r6
 801b24a:	f44e 7e00 	orrls.w	lr, lr, #512	@ 0x200
 801b24e:	0052      	lsls	r2, r2, #1
 801b250:	f43f af3b 	beq.w	801b0ca <Argus_Eval_Apply+0x726>
 801b254:	4296      	cmp	r6, r2
 801b256:	bf9c      	itt	ls
 801b258:	1b92      	subls	r2, r2, r6
 801b25a:	f44e 7e80 	orrls.w	lr, lr, #256	@ 0x100
 801b25e:	0052      	lsls	r2, r2, #1
 801b260:	f43f af33 	beq.w	801b0ca <Argus_Eval_Apply+0x726>
 801b264:	4296      	cmp	r6, r2
 801b266:	bf9c      	itt	ls
 801b268:	1b92      	subls	r2, r2, r6
 801b26a:	f04e 0e80 	orrls.w	lr, lr, #128	@ 0x80
 801b26e:	0052      	lsls	r2, r2, #1
 801b270:	f43f af2b 	beq.w	801b0ca <Argus_Eval_Apply+0x726>
 801b274:	4296      	cmp	r6, r2
 801b276:	bf9c      	itt	ls
 801b278:	1b92      	subls	r2, r2, r6
 801b27a:	f04e 0e40 	orrls.w	lr, lr, #64	@ 0x40
 801b27e:	0052      	lsls	r2, r2, #1
 801b280:	f43f af23 	beq.w	801b0ca <Argus_Eval_Apply+0x726>
 801b284:	4296      	cmp	r6, r2
 801b286:	bf9c      	itt	ls
 801b288:	1b92      	subls	r2, r2, r6
 801b28a:	f04e 0e20 	orrls.w	lr, lr, #32
 801b28e:	0052      	lsls	r2, r2, #1
 801b290:	f43f af1b 	beq.w	801b0ca <Argus_Eval_Apply+0x726>
 801b294:	4296      	cmp	r6, r2
 801b296:	bf9c      	itt	ls
 801b298:	1b92      	subls	r2, r2, r6
 801b29a:	f04e 0e10 	orrls.w	lr, lr, #16
 801b29e:	0052      	lsls	r2, r2, #1
 801b2a0:	f43f af13 	beq.w	801b0ca <Argus_Eval_Apply+0x726>
 801b2a4:	4296      	cmp	r6, r2
 801b2a6:	bf9c      	itt	ls
 801b2a8:	1b92      	subls	r2, r2, r6
 801b2aa:	f04e 0e08 	orrls.w	lr, lr, #8
 801b2ae:	0052      	lsls	r2, r2, #1
 801b2b0:	f43f af0b 	beq.w	801b0ca <Argus_Eval_Apply+0x726>
 801b2b4:	4296      	cmp	r6, r2
 801b2b6:	bf9c      	itt	ls
 801b2b8:	1b92      	subls	r2, r2, r6
 801b2ba:	f04e 0e04 	orrls.w	lr, lr, #4
 801b2be:	0052      	lsls	r2, r2, #1
 801b2c0:	f43f af03 	beq.w	801b0ca <Argus_Eval_Apply+0x726>
 801b2c4:	4296      	cmp	r6, r2
 801b2c6:	bf9c      	itt	ls
 801b2c8:	1b92      	subls	r2, r2, r6
 801b2ca:	f04e 0e02 	orrls.w	lr, lr, #2
 801b2ce:	0052      	lsls	r2, r2, #1
 801b2d0:	f43f aefb 	beq.w	801b0ca <Argus_Eval_Apply+0x726>
 801b2d4:	4296      	cmp	r6, r2
 801b2d6:	bf9c      	itt	ls
 801b2d8:	1b92      	subls	r2, r2, r6
 801b2da:	f04e 0e01 	orrls.w	lr, lr, #1
 801b2de:	ebb6 0f42 	cmp.w	r6, r2, lsl #1
 801b2e2:	f63f aef2 	bhi.w	801b0ca <Argus_Eval_Apply+0x726>
 801b2e6:	f10e 0e01 	add.w	lr, lr, #1
 801b2ea:	e6ee      	b.n	801b0ca <Argus_Eval_Apply+0x726>
 801b2ec:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 801b2f0:	9301      	str	r3, [sp, #4]
 801b2f2:	e485      	b.n	801ac00 <Argus_Eval_Apply+0x25c>
 801b2f4:	4606      	mov	r6, r0
 801b2f6:	e749      	b.n	801b18c <Argus_Eval_Apply+0x7e8>
 801b2f8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 801b2fc:	e736      	b.n	801b16c <Argus_Eval_Apply+0x7c8>
 801b2fe:	0211      	lsls	r1, r2, #8
 801b300:	465e      	mov	r6, fp
 801b302:	468e      	mov	lr, r1
 801b304:	b391      	cbz	r1, 801b36c <Argus_Eval_Apply+0x9c8>
 801b306:	f1bb 0f00 	cmp.w	fp, #0
 801b30a:	bfb8      	it	lt
 801b30c:	f1cb 0b00 	rsblt	fp, fp, #0
 801b310:	2900      	cmp	r1, #0
 801b312:	db44      	blt.n	801b39e <Argus_Eval_Apply+0x9fa>
 801b314:	4559      	cmp	r1, fp
 801b316:	d271      	bcs.n	801b3fc <Argus_Eval_Apply+0xa58>
 801b318:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801b31c:	0049      	lsls	r1, r1, #1
 801b31e:	4559      	cmp	r1, fp
 801b320:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801b324:	d3fa      	bcc.n	801b31c <Argus_Eval_Apply+0x978>
 801b326:	2a00      	cmp	r2, #0
 801b328:	d13f      	bne.n	801b3aa <Argus_Eval_Apply+0xa06>
 801b32a:	ea96 0f0e 	teq	r6, lr
 801b32e:	f8d4 1330 	ldr.w	r1, [r4, #816]	@ 0x330
 801b332:	d420      	bmi.n	801b376 <Argus_Eval_Apply+0x9d2>
 801b334:	2900      	cmp	r1, #0
 801b336:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 801b33a:	f6ff ae3c 	blt.w	801afb6 <Argus_Eval_Apply+0x612>
 801b33e:	f89c 00d5 	ldrb.w	r0, [ip, #213]	@ 0xd5
 801b342:	b158      	cbz	r0, 801b35c <Argus_Eval_Apply+0x9b8>
 801b344:	4291      	cmp	r1, r2
 801b346:	da1f      	bge.n	801b388 <Argus_Eval_Apply+0x9e4>
 801b348:	1a52      	subs	r2, r2, r1
 801b34a:	fb82 2000 	smull	r2, r0, r2, r0
 801b34e:	0a16      	lsrs	r6, r2, #8
 801b350:	ea46 6600 	orr.w	r6, r6, r0, lsl #24
 801b354:	4431      	add	r1, r6
 801b356:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 801b35a:	440a      	add	r2, r1
 801b35c:	f8c4 2330 	str.w	r2, [r4, #816]	@ 0x330
 801b360:	e613      	b.n	801af8a <Argus_Eval_Apply+0x5e6>
 801b362:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801b366:	e6a8      	b.n	801b0ba <Argus_Eval_Apply+0x716>
 801b368:	4606      	mov	r6, r0
 801b36a:	e70c      	b.n	801b186 <Argus_Eval_Apply+0x7e2>
 801b36c:	f1bb 0f00 	cmp.w	fp, #0
 801b370:	f8d4 1330 	ldr.w	r1, [r4, #816]	@ 0x330
 801b374:	dade      	bge.n	801b334 <Argus_Eval_Apply+0x990>
 801b376:	2900      	cmp	r1, #0
 801b378:	f6ff aee9 	blt.w	801b14e <Argus_Eval_Apply+0x7aa>
 801b37c:	f89c 00d5 	ldrb.w	r0, [ip, #213]	@ 0xd5
 801b380:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801b384:	2800      	cmp	r0, #0
 801b386:	d0e9      	beq.n	801b35c <Argus_Eval_Apply+0x9b8>
 801b388:	1a8a      	subs	r2, r1, r2
 801b38a:	fb82 2000 	smull	r2, r0, r2, r0
 801b38e:	0a16      	lsrs	r6, r2, #8
 801b390:	ea46 6600 	orr.w	r6, r6, r0, lsl #24
 801b394:	1b89      	subs	r1, r1, r6
 801b396:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 801b39a:	1a8a      	subs	r2, r1, r2
 801b39c:	e7de      	b.n	801b35c <Argus_Eval_Apply+0x9b8>
 801b39e:	4249      	negs	r1, r1
 801b3a0:	4559      	cmp	r1, fp
 801b3a2:	bf28      	it	cs
 801b3a4:	f44f 3280 	movcs.w	r2, #65536	@ 0x10000
 801b3a8:	d3b6      	bcc.n	801b318 <Argus_Eval_Apply+0x974>
 801b3aa:	2900      	cmp	r1, #0
 801b3ac:	db2c      	blt.n	801b408 <Argus_Eval_Apply+0xa64>
 801b3ae:	f1bb 0f00 	cmp.w	fp, #0
 801b3b2:	d021      	beq.n	801b3f8 <Argus_Eval_Apply+0xa54>
 801b3b4:	4610      	mov	r0, r2
 801b3b6:	2200      	movs	r2, #0
 801b3b8:	e002      	b.n	801b3c0 <Argus_Eval_Apply+0xa1c>
 801b3ba:	f1bb 0f00 	cmp.w	fp, #0
 801b3be:	d008      	beq.n	801b3d2 <Argus_Eval_Apply+0xa2e>
 801b3c0:	458b      	cmp	fp, r1
 801b3c2:	bf24      	itt	cs
 801b3c4:	ebab 0b01 	subcs.w	fp, fp, r1
 801b3c8:	4302      	orrcs	r2, r0
 801b3ca:	0840      	lsrs	r0, r0, #1
 801b3cc:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 801b3d0:	d1f3      	bne.n	801b3ba <Argus_Eval_Apply+0xa16>
 801b3d2:	4559      	cmp	r1, fp
 801b3d4:	bf98      	it	ls
 801b3d6:	3201      	addls	r2, #1
 801b3d8:	ea96 0f0e 	teq	r6, lr
 801b3dc:	d421      	bmi.n	801b422 <Argus_Eval_Apply+0xa7e>
 801b3de:	2a00      	cmp	r2, #0
 801b3e0:	db0f      	blt.n	801b402 <Argus_Eval_Apply+0xa5e>
 801b3e2:	f8d4 1330 	ldr.w	r1, [r4, #816]	@ 0x330
 801b3e6:	2900      	cmp	r1, #0
 801b3e8:	daa9      	bge.n	801b33e <Argus_Eval_Apply+0x99a>
 801b3ea:	e7b7      	b.n	801b35c <Argus_Eval_Apply+0x9b8>
 801b3ec:	f3c3 11c0 	ubfx	r1, r3, #7, #1
 801b3f0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801b3f4:	9301      	str	r3, [sp, #4]
 801b3f6:	e403      	b.n	801ac00 <Argus_Eval_Apply+0x25c>
 801b3f8:	465a      	mov	r2, fp
 801b3fa:	e7ea      	b.n	801b3d2 <Argus_Eval_Apply+0xa2e>
 801b3fc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801b400:	e7d5      	b.n	801b3ae <Argus_Eval_Apply+0xa0a>
 801b402:	f8d4 1330 	ldr.w	r1, [r4, #816]	@ 0x330
 801b406:	e795      	b.n	801b334 <Argus_Eval_Apply+0x990>
 801b408:	4559      	cmp	r1, fp
 801b40a:	d9e5      	bls.n	801b3d8 <Argus_Eval_Apply+0xa34>
 801b40c:	0852      	lsrs	r2, r2, #1
 801b40e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801b412:	d0de      	beq.n	801b3d2 <Argus_Eval_Apply+0xa2e>
 801b414:	f1bb 0f00 	cmp.w	fp, #0
 801b418:	d1cc      	bne.n	801b3b4 <Argus_Eval_Apply+0xa10>
 801b41a:	ea96 0f0e 	teq	r6, lr
 801b41e:	465a      	mov	r2, fp
 801b420:	d5df      	bpl.n	801b3e2 <Argus_Eval_Apply+0xa3e>
 801b422:	4252      	negs	r2, r2
 801b424:	e7dd      	b.n	801b3e2 <Argus_Eval_Apply+0xa3e>
 801b426:	f5c6 7200 	rsb	r2, r6, #512	@ 0x200
 801b42a:	0052      	lsls	r2, r2, #1
 801b42c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 801b430:	f47f add8 	bne.w	801afe4 <Argus_Eval_Apply+0x640>
 801b434:	e641      	b.n	801b0ba <Argus_Eval_Apply+0x716>
 801b436:	f5c6 7200 	rsb	r2, r6, #512	@ 0x200
 801b43a:	0052      	lsls	r2, r2, #1
 801b43c:	f44f 4e00 	mov.w	lr, #32768	@ 0x8000
 801b440:	f47f aed8 	bne.w	801b1f4 <Argus_Eval_Apply+0x850>
 801b444:	e641      	b.n	801b0ca <Argus_Eval_Apply+0x726>
 801b446:	bf00      	nop

0801b448 <Argus_Eval_ResetShotNoiseAmplitude>:
 801b448:	f04f 33ff 	mov.w	r3, #4294967295
 801b44c:	f8c0 3330 	str.w	r3, [r0, #816]	@ 0x330
 801b450:	4770      	bx	lr
 801b452:	bf00      	nop

0801b454 <Argus_Eval_GetPixelSample>:
 801b454:	291f      	cmp	r1, #31
 801b456:	f200 80bd 	bhi.w	801b5d4 <Argus_Eval_GetPixelSample+0x180>
 801b45a:	2a03      	cmp	r2, #3
 801b45c:	f200 80ba 	bhi.w	801b5d4 <Argus_Eval_GetPixelSample+0x180>
 801b460:	6903      	ldr	r3, [r0, #16]
 801b462:	b510      	push	{r4, lr}
 801b464:	f3c3 3c81 	ubfx	ip, r3, #14, #2
 801b468:	4686      	mov	lr, r0
 801b46a:	0f98      	lsrs	r0, r3, #30
 801b46c:	ea4c 0080 	orr.w	r0, ip, r0, lsl #2
 801b470:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 801b474:	f00c 0c30 	and.w	ip, ip, #48	@ 0x30
 801b478:	ea4c 0c00 	orr.w	ip, ip, r0
 801b47c:	0d98      	lsrs	r0, r3, #22
 801b47e:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
 801b482:	ea40 0c0c 	orr.w	ip, r0, ip
 801b486:	0898      	lsrs	r0, r3, #2
 801b488:	f400 7040 	and.w	r0, r0, #768	@ 0x300
 801b48c:	ea40 000c 	orr.w	r0, r0, ip
 801b490:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 801b494:	f40c 6c40 	and.w	ip, ip, #3072	@ 0xc00
 801b498:	ea4c 0000 	orr.w	r0, ip, r0
 801b49c:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 801b4a0:	f40c 5c40 	and.w	ip, ip, #12288	@ 0x3000
 801b4a4:	ea4c 0c00 	orr.w	ip, ip, r0
 801b4a8:	0a98      	lsrs	r0, r3, #10
 801b4aa:	f400 4040 	and.w	r0, r0, #49152	@ 0xc000
 801b4ae:	ea40 0c0c 	orr.w	ip, r0, ip
 801b4b2:	0298      	lsls	r0, r3, #10
 801b4b4:	f400 3040 	and.w	r0, r0, #196608	@ 0x30000
 801b4b8:	ea40 000c 	orr.w	r0, r0, ip
 801b4bc:	ea4f 1c13 	mov.w	ip, r3, lsr #4
 801b4c0:	f40c 2c40 	and.w	ip, ip, #786432	@ 0xc0000
 801b4c4:	ea4c 0000 	orr.w	r0, ip, r0
 801b4c8:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801b4cc:	f40c 1c40 	and.w	ip, ip, #3145728	@ 0x300000
 801b4d0:	ea4c 0c00 	orr.w	ip, ip, r0
 801b4d4:	0098      	lsls	r0, r3, #2
 801b4d6:	f400 0040 	and.w	r0, r0, #12582912	@ 0xc00000
 801b4da:	ea40 0c0c 	orr.w	ip, r0, ip
 801b4de:	0598      	lsls	r0, r3, #22
 801b4e0:	f000 7040 	and.w	r0, r0, #50331648	@ 0x3000000
 801b4e4:	ea40 000c 	orr.w	r0, r0, ip
 801b4e8:	ea4f 2c03 	mov.w	ip, r3, lsl #8
 801b4ec:	f00c 6c40 	and.w	ip, ip, #201326592	@ 0xc000000
 801b4f0:	ea4c 0000 	orr.w	r0, ip, r0
 801b4f4:	ea4f 7c03 	mov.w	ip, r3, lsl #28
 801b4f8:	f00c 5c40 	and.w	ip, ip, #805306368	@ 0x30000000
 801b4fc:	ea4c 0c00 	orr.w	ip, ip, r0
 801b500:	0c18      	lsrs	r0, r3, #16
 801b502:	ea4c 7c80 	orr.w	ip, ip, r0, lsl #30
 801b506:	fa2c fc01 	lsr.w	ip, ip, r1
 801b50a:	f01c 0001 	ands.w	r0, ip, #1
 801b50e:	d060      	beq.n	801b5d2 <Argus_Eval_GetPixelSample+0x17e>
 801b510:	ea6f 0051 	mvn.w	r0, r1, lsr #1
 801b514:	00cc      	lsls	r4, r1, #3
 801b516:	f004 0410 	and.w	r4, r4, #16
 801b51a:	f000 000e 	and.w	r0, r0, #14
 801b51e:	4320      	orrs	r0, r4
 801b520:	f001 0101 	and.w	r1, r1, #1
 801b524:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801b528:	4301      	orrs	r1, r0
 801b52a:	f04f 30ff 	mov.w	r0, #4294967295
 801b52e:	fa00 f101 	lsl.w	r1, r0, r1
 801b532:	f00c 3c55 	and.w	ip, ip, #1431655765	@ 0x55555555
 801b536:	eba3 0c0c 	sub.w	ip, r3, ip
 801b53a:	ea23 0301 	bic.w	r3, r3, r1
 801b53e:	0859      	lsrs	r1, r3, #1
 801b540:	f001 3155 	and.w	r1, r1, #1431655765	@ 0x55555555
 801b544:	1a5b      	subs	r3, r3, r1
 801b546:	f003 3133 	and.w	r1, r3, #858993459	@ 0x33333333
 801b54a:	089b      	lsrs	r3, r3, #2
 801b54c:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 801b550:	f8de 0014 	ldr.w	r0, [lr, #20]
 801b554:	440b      	add	r3, r1
 801b556:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 801b55a:	f003 310f 	and.w	r1, r3, #252645135	@ 0xf0f0f0f
 801b55e:	0843      	lsrs	r3, r0, #1
 801b560:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 801b564:	ea4f 049c 	mov.w	r4, ip, lsr #2
 801b568:	1ac0      	subs	r0, r0, r3
 801b56a:	f00c 3333 	and.w	r3, ip, #858993459	@ 0x33333333
 801b56e:	f004 3c33 	and.w	ip, r4, #858993459	@ 0x33333333
 801b572:	4463      	add	r3, ip
 801b574:	ea4f 0c90 	mov.w	ip, r0, lsr #2
 801b578:	f00c 3c33 	and.w	ip, ip, #858993459	@ 0x33333333
 801b57c:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 801b580:	4484      	add	ip, r0
 801b582:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 801b586:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 801b58a:	eb0c 1c1c 	add.w	ip, ip, ip, lsr #4
 801b58e:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 801b592:	f00c 3c0f 	and.w	ip, ip, #252645135	@ 0xf0f0f0f
 801b596:	eb01 2101 	add.w	r1, r1, r1, lsl #8
 801b59a:	eb03 4303 	add.w	r3, r3, r3, lsl #16
 801b59e:	eb0c 2c0c 	add.w	ip, ip, ip, lsl #8
 801b5a2:	eb01 4101 	add.w	r1, r1, r1, lsl #16
 801b5a6:	0e1b      	lsrs	r3, r3, #24
 801b5a8:	eb0c 4c0c 	add.w	ip, ip, ip, lsl #16
 801b5ac:	0e09      	lsrs	r1, r1, #24
 801b5ae:	eb03 631c 	add.w	r3, r3, ip, lsr #24
 801b5b2:	fb02 1303 	mla	r3, r2, r3, r1
 801b5b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b5ba:	f10e 0e29 	add.w	lr, lr, #41	@ 0x29
 801b5be:	eb0e 0203 	add.w	r2, lr, r3
 801b5c2:	f81e 1003 	ldrb.w	r1, [lr, r3]
 801b5c6:	7850      	ldrb	r0, [r2, #1]
 801b5c8:	7893      	ldrb	r3, [r2, #2]
 801b5ca:	0200      	lsls	r0, r0, #8
 801b5cc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801b5d0:	4318      	orrs	r0, r3
 801b5d2:	bd10      	pop	{r4, pc}
 801b5d4:	2000      	movs	r0, #0
 801b5d6:	4770      	bx	lr

0801b5d8 <Argus_Pba_Init>:
 801b5d8:	2300      	movs	r3, #0
 801b5da:	6003      	str	r3, [r0, #0]
 801b5dc:	6043      	str	r3, [r0, #4]
 801b5de:	6083      	str	r3, [r0, #8]
 801b5e0:	60c1      	str	r1, [r0, #12]
 801b5e2:	4770      	bx	lr

0801b5e4 <Argus_Pba_CheckCfg>:
 801b5e4:	b508      	push	{r3, lr}
 801b5e6:	7802      	ldrb	r2, [r0, #0]
 801b5e8:	4603      	mov	r3, r0
 801b5ea:	f012 0001 	ands.w	r0, r2, #1
 801b5ee:	d01d      	beq.n	801b62c <Argus_Pba_CheckCfg+0x48>
 801b5f0:	f032 0071 	bics.w	r0, r2, #113	@ 0x71
 801b5f4:	d11b      	bne.n	801b62e <Argus_Pba_CheckCfg+0x4a>
 801b5f6:	7859      	ldrb	r1, [r3, #1]
 801b5f8:	1e4a      	subs	r2, r1, #1
 801b5fa:	2a01      	cmp	r2, #1
 801b5fc:	d823      	bhi.n	801b646 <Argus_Pba_CheckCfg+0x62>
 801b5fe:	78d9      	ldrb	r1, [r3, #3]
 801b600:	789a      	ldrb	r2, [r3, #2]
 801b602:	4291      	cmp	r1, r2
 801b604:	d82b      	bhi.n	801b65e <Argus_Pba_CheckCfg+0x7a>
 801b606:	88d9      	ldrh	r1, [r3, #6]
 801b608:	889a      	ldrh	r2, [r3, #4]
 801b60a:	4291      	cmp	r1, r2
 801b60c:	d821      	bhi.n	801b652 <Argus_Pba_CheckCfg+0x6e>
 801b60e:	8959      	ldrh	r1, [r3, #10]
 801b610:	891a      	ldrh	r2, [r3, #8]
 801b612:	4291      	cmp	r1, r2
 801b614:	d835      	bhi.n	801b682 <Argus_Pba_CheckCfg+0x9e>
 801b616:	7b5a      	ldrb	r2, [r3, #13]
 801b618:	7b19      	ldrb	r1, [r3, #12]
 801b61a:	428a      	cmp	r2, r1
 801b61c:	d325      	bcc.n	801b66a <Argus_Pba_CheckCfg+0x86>
 801b61e:	8a1a      	ldrh	r2, [r3, #16]
 801b620:	89d9      	ldrh	r1, [r3, #14]
 801b622:	428a      	cmp	r2, r1
 801b624:	d327      	bcc.n	801b676 <Argus_Pba_CheckCfg+0x92>
 801b626:	699b      	ldr	r3, [r3, #24]
 801b628:	3301      	adds	r3, #1
 801b62a:	d006      	beq.n	801b63a <Argus_Pba_CheckCfg+0x56>
 801b62c:	bd08      	pop	{r3, pc}
 801b62e:	4818      	ldr	r0, [pc, #96]	@ (801b690 <Argus_Pba_CheckCfg+0xac>)
 801b630:	f7ea ff6c 	bl	800650c <print>
 801b634:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801b638:	bd08      	pop	{r3, pc}
 801b63a:	4816      	ldr	r0, [pc, #88]	@ (801b694 <Argus_Pba_CheckCfg+0xb0>)
 801b63c:	f7ea ff66 	bl	800650c <print>
 801b640:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801b644:	bd08      	pop	{r3, pc}
 801b646:	4814      	ldr	r0, [pc, #80]	@ (801b698 <Argus_Pba_CheckCfg+0xb4>)
 801b648:	f7ea ff60 	bl	800650c <print>
 801b64c:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801b650:	bd08      	pop	{r3, pc}
 801b652:	4812      	ldr	r0, [pc, #72]	@ (801b69c <Argus_Pba_CheckCfg+0xb8>)
 801b654:	f7ea ff5a 	bl	800650c <print>
 801b658:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801b65c:	bd08      	pop	{r3, pc}
 801b65e:	4810      	ldr	r0, [pc, #64]	@ (801b6a0 <Argus_Pba_CheckCfg+0xbc>)
 801b660:	f7ea ff54 	bl	800650c <print>
 801b664:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801b668:	bd08      	pop	{r3, pc}
 801b66a:	480e      	ldr	r0, [pc, #56]	@ (801b6a4 <Argus_Pba_CheckCfg+0xc0>)
 801b66c:	f7ea ff4e 	bl	800650c <print>
 801b670:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801b674:	bd08      	pop	{r3, pc}
 801b676:	480c      	ldr	r0, [pc, #48]	@ (801b6a8 <Argus_Pba_CheckCfg+0xc4>)
 801b678:	f7ea ff48 	bl	800650c <print>
 801b67c:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801b680:	bd08      	pop	{r3, pc}
 801b682:	480a      	ldr	r0, [pc, #40]	@ (801b6ac <Argus_Pba_CheckCfg+0xc8>)
 801b684:	f7ea ff42 	bl	800650c <print>
 801b688:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801b68c:	bd08      	pop	{r3, pc}
 801b68e:	bf00      	nop
 801b690:	0802ef50 	.word	0x0802ef50
 801b694:	0802f174 	.word	0x0802f174
 801b698:	0802ef84 	.word	0x0802ef84
 801b69c:	0802f010 	.word	0x0802f010
 801b6a0:	0802efbc 	.word	0x0802efbc
 801b6a4:	0802f0c4 	.word	0x0802f0c4
 801b6a8:	0802f11c 	.word	0x0802f11c
 801b6ac:	0802f064 	.word	0x0802f064

0801b6b0 <Argus_Pba_UpdateConfig>:
 801b6b0:	f8b2 329d 	ldrh.w	r3, [r2, #669]	@ 0x29d
 801b6b4:	8143      	strh	r3, [r0, #10]
 801b6b6:	4770      	bx	lr

0801b6b8 <Argus_Pba_Apply>:
 801b6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6bc:	68c7      	ldr	r7, [r0, #12]
 801b6be:	783b      	ldrb	r3, [r7, #0]
 801b6c0:	b09b      	sub	sp, #108	@ 0x6c
 801b6c2:	f013 0301 	ands.w	r3, r3, #1
 801b6c6:	4683      	mov	fp, r0
 801b6c8:	9301      	str	r3, [sp, #4]
 801b6ca:	f000 8201 	beq.w	801bad0 <Argus_Pba_Apply+0x418>
 801b6ce:	680b      	ldr	r3, [r1, #0]
 801b6d0:	9308      	str	r3, [sp, #32]
 801b6d2:	2b00      	cmp	r3, #0
 801b6d4:	f2c0 8204 	blt.w	801bae0 <Argus_Pba_Apply+0x428>
 801b6d8:	698b      	ldr	r3, [r1, #24]
 801b6da:	7a82      	ldrb	r2, [r0, #10]
 801b6dc:	9203      	str	r2, [sp, #12]
 801b6de:	f101 0e34 	add.w	lr, r1, #52	@ 0x34
 801b6e2:	7ac2      	ldrb	r2, [r0, #11]
 801b6e4:	697e      	ldr	r6, [r7, #20]
 801b6e6:	9306      	str	r3, [sp, #24]
 801b6e8:	9202      	str	r2, [sp, #8]
 801b6ea:	f403 3880 	and.w	r8, r3, #65536	@ 0x10000
 801b6ee:	f403 2980 	and.w	r9, r3, #262144	@ 0x40000
 801b6f2:	f501 72d4 	add.w	r2, r1, #424	@ 0x1a8
 801b6f6:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 801b6fa:	f501 7cda 	add.w	ip, r1, #436	@ 0x1b4
 801b6fe:	4674      	mov	r4, lr
 801b700:	f814 0c04 	ldrb.w	r0, [r4, #-4]
 801b704:	f010 0ffb 	tst.w	r0, #251	@ 0xfb
 801b708:	d107      	bne.n	801b71a <Argus_Pba_Apply+0x62>
 801b70a:	f854 5c0c 	ldr.w	r5, [r4, #-12]
 801b70e:	f040 0008 	orr.w	r0, r0, #8
 801b712:	42ae      	cmp	r6, r5
 801b714:	bfc8      	it	gt
 801b716:	f804 0c04 	strbgt.w	r0, [r4, #-4]
 801b71a:	340c      	adds	r4, #12
 801b71c:	45a4      	cmp	ip, r4
 801b71e:	d1ef      	bne.n	801b700 <Argus_Pba_Apply+0x48>
 801b720:	7838      	ldrb	r0, [r7, #0]
 801b722:	9004      	str	r0, [sp, #16]
 801b724:	f010 0f30 	tst.w	r0, #48	@ 0x30
 801b728:	d01d      	beq.n	801b766 <Argus_Pba_Apply+0xae>
 801b72a:	7cbd      	ldrb	r5, [r7, #18]
 801b72c:	b1dd      	cbz	r5, 801b766 <Argus_Pba_Apply+0xae>
 801b72e:	9802      	ldr	r0, [sp, #8]
 801b730:	9e03      	ldr	r6, [sp, #12]
 801b732:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 801b736:	00a4      	lsls	r4, r4, #2
 801b738:	2030      	movs	r0, #48	@ 0x30
 801b73a:	fb10 4606 	smlabb	r6, r0, r6, r4
 801b73e:	3628      	adds	r6, #40	@ 0x28
 801b740:	440e      	add	r6, r1
 801b742:	4618      	mov	r0, r3
 801b744:	7a04      	ldrb	r4, [r0, #8]
 801b746:	f014 0f10 	tst.w	r4, #16
 801b74a:	d109      	bne.n	801b760 <Argus_Pba_Apply+0xa8>
 801b74c:	07a4      	lsls	r4, r4, #30
 801b74e:	d507      	bpl.n	801b760 <Argus_Pba_Apply+0xa8>
 801b750:	4286      	cmp	r6, r0
 801b752:	f105 34ff 	add.w	r4, r5, #4294967295
 801b756:	d003      	beq.n	801b760 <Argus_Pba_Apply+0xa8>
 801b758:	f014 05ff 	ands.w	r5, r4, #255	@ 0xff
 801b75c:	f000 8275 	beq.w	801bc4a <Argus_Pba_Apply+0x592>
 801b760:	300c      	adds	r0, #12
 801b762:	4290      	cmp	r0, r2
 801b764:	d9ee      	bls.n	801b744 <Argus_Pba_Apply+0x8c>
 801b766:	7cfc      	ldrb	r4, [r7, #19]
 801b768:	b18c      	cbz	r4, 801b78e <Argus_Pba_Apply+0xd6>
 801b76a:	9803      	ldr	r0, [sp, #12]
 801b76c:	9d02      	ldr	r5, [sp, #8]
 801b76e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b772:	0100      	lsls	r0, r0, #4
 801b774:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b778:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 801b77c:	4408      	add	r0, r1
 801b77e:	f890 0030 	ldrb.w	r0, [r0, #48]	@ 0x30
 801b782:	f010 0040 	ands.w	r0, r0, #64	@ 0x40
 801b786:	f040 81ca 	bne.w	801bb1e <Argus_Pba_Apply+0x466>
 801b78a:	f88b 0009 	strb.w	r0, [fp, #9]
 801b78e:	f1b8 0f00 	cmp.w	r8, #0
 801b792:	bf14      	ite	ne
 801b794:	26df      	movne	r6, #223	@ 0xdf
 801b796:	2610      	moveq	r6, #16
 801b798:	4618      	mov	r0, r3
 801b79a:	2500      	movs	r5, #0
 801b79c:	7a04      	ldrb	r4, [r0, #8]
 801b79e:	4226      	tst	r6, r4
 801b7a0:	d103      	bne.n	801b7aa <Argus_Pba_Apply+0xf2>
 801b7a2:	88c4      	ldrh	r4, [r0, #6]
 801b7a4:	42a5      	cmp	r5, r4
 801b7a6:	bf38      	it	cc
 801b7a8:	4625      	movcc	r5, r4
 801b7aa:	300c      	adds	r0, #12
 801b7ac:	4282      	cmp	r2, r0
 801b7ae:	d1f5      	bne.n	801b79c <Argus_Pba_Apply+0xe4>
 801b7b0:	9804      	ldr	r0, [sp, #16]
 801b7b2:	f8a1 51b8 	strh.w	r5, [r1, #440]	@ 0x1b8
 801b7b6:	f010 0010 	ands.w	r0, r0, #16
 801b7ba:	9007      	str	r0, [sp, #28]
 801b7bc:	f000 81dd 	beq.w	801bb7a <Argus_Pba_Apply+0x4c2>
 801b7c0:	9e03      	ldr	r6, [sp, #12]
 801b7c2:	9c02      	ldr	r4, [sp, #8]
 801b7c4:	f8b7 a00a 	ldrh.w	sl, [r7, #10]
 801b7c8:	f8cd a01c 	str.w	sl, [sp, #28]
 801b7cc:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 801b7d0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b7d4:	0100      	lsls	r0, r0, #4
 801b7d6:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 801b7da:	4408      	add	r0, r1
 801b7dc:	9c02      	ldr	r4, [sp, #8]
 801b7de:	f890 a030 	ldrb.w	sl, [r0, #48]	@ 0x30
 801b7e2:	8dc0      	ldrh	r0, [r0, #46]	@ 0x2e
 801b7e4:	9005      	str	r0, [sp, #20]
 801b7e6:	8938      	ldrh	r0, [r7, #8]
 801b7e8:	900b      	str	r0, [sp, #44]	@ 0x2c
 801b7ea:	0060      	lsls	r0, r4, #1
 801b7ec:	900a      	str	r0, [sp, #40]	@ 0x28
 801b7ee:	0070      	lsls	r0, r6, #1
 801b7f0:	9009      	str	r0, [sp, #36]	@ 0x24
 801b7f2:	2600      	movs	r6, #0
 801b7f4:	4618      	mov	r0, r3
 801b7f6:	7a04      	ldrb	r4, [r0, #8]
 801b7f8:	300c      	adds	r0, #12
 801b7fa:	07a4      	lsls	r4, r4, #30
 801b7fc:	bf48      	it	mi
 801b7fe:	3601      	addmi	r6, #1
 801b800:	4282      	cmp	r2, r0
 801b802:	d1f8      	bne.n	801b7f6 <Argus_Pba_Apply+0x13e>
 801b804:	f1b8 0f00 	cmp.w	r8, #0
 801b808:	f000 8124 	beq.w	801ba54 <Argus_Pba_Apply+0x39c>
 801b80c:	2e00      	cmp	r6, #0
 801b80e:	f000 8121 	beq.w	801ba54 <Argus_Pba_Apply+0x39c>
 801b812:	2000      	movs	r0, #0
 801b814:	9007      	str	r0, [sp, #28]
 801b816:	4618      	mov	r0, r3
 801b818:	266c      	movs	r6, #108	@ 0x6c
 801b81a:	e009      	b.n	801b830 <Argus_Pba_Apply+0x178>
 801b81c:	2e6c      	cmp	r6, #108	@ 0x6c
 801b81e:	d104      	bne.n	801b82a <Argus_Pba_Apply+0x172>
 801b820:	f014 0fdf 	tst.w	r4, #223	@ 0xdf
 801b824:	bf18      	it	ne
 801b826:	f06f 066d 	mvnne.w	r6, #109	@ 0x6d
 801b82a:	4290      	cmp	r0, r2
 801b82c:	f080 81ae 	bcs.w	801bb8c <Argus_Pba_Apply+0x4d4>
 801b830:	7a04      	ldrb	r4, [r0, #8]
 801b832:	f014 0f15 	tst.w	r4, #21
 801b836:	f100 000c 	add.w	r0, r0, #12
 801b83a:	d1f6      	bne.n	801b82a <Argus_Pba_Apply+0x172>
 801b83c:	2c00      	cmp	r4, #0
 801b83e:	d1ed      	bne.n	801b81c <Argus_Pba_Apply+0x164>
 801b840:	f8db 0004 	ldr.w	r0, [fp, #4]
 801b844:	900b      	str	r0, [sp, #44]	@ 0x2c
 801b846:	4604      	mov	r4, r0
 801b848:	69b8      	ldr	r0, [r7, #24]
 801b84a:	4320      	orrs	r0, r4
 801b84c:	43c4      	mvns	r4, r0
 801b84e:	4618      	mov	r0, r3
 801b850:	f014 0f01 	tst.w	r4, #1
 801b854:	7a06      	ldrb	r6, [r0, #8]
 801b856:	f100 000c 	add.w	r0, r0, #12
 801b85a:	f000 817b 	beq.w	801bb54 <Argus_Pba_Apply+0x49c>
 801b85e:	f046 0604 	orr.w	r6, r6, #4
 801b862:	4282      	cmp	r2, r0
 801b864:	f800 6c04 	strb.w	r6, [r0, #-4]
 801b868:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801b86c:	d1f0      	bne.n	801b850 <Argus_Pba_Apply+0x198>
 801b86e:	78bc      	ldrb	r4, [r7, #2]
 801b870:	78f8      	ldrb	r0, [r7, #3]
 801b872:	fb05 f404 	mul.w	r4, r5, r4
 801b876:	fb05 f000 	mul.w	r0, r5, r0
 801b87a:	f3c4 16c0 	ubfx	r6, r4, #7, #1
 801b87e:	eb06 2a14 	add.w	sl, r6, r4, lsr #8
 801b882:	f3c0 14c0 	ubfx	r4, r0, #7, #1
 801b886:	eb04 2910 	add.w	r9, r4, r0, lsr #8
 801b88a:	88b8      	ldrh	r0, [r7, #4]
 801b88c:	fa1f fa8a 	uxth.w	sl, sl
 801b890:	4582      	cmp	sl, r0
 801b892:	bf38      	it	cc
 801b894:	4682      	movcc	sl, r0
 801b896:	88f8      	ldrh	r0, [r7, #6]
 801b898:	9005      	str	r0, [sp, #20]
 801b89a:	fa1f f989 	uxth.w	r9, r9
 801b89e:	4581      	cmp	r9, r0
 801b8a0:	bf38      	it	cc
 801b8a2:	4681      	movcc	r9, r0
 801b8a4:	461c      	mov	r4, r3
 801b8a6:	e009      	b.n	801b8bc <Argus_Pba_Apply+0x204>
 801b8a8:	f8b4 8006 	ldrh.w	r8, [r4, #6]
 801b8ac:	45c8      	cmp	r8, r9
 801b8ae:	d30b      	bcc.n	801b8c8 <Argus_Pba_Apply+0x210>
 801b8b0:	45d0      	cmp	r8, sl
 801b8b2:	bf28      	it	cs
 801b8b4:	7226      	strbcs	r6, [r4, #8]
 801b8b6:	340c      	adds	r4, #12
 801b8b8:	4294      	cmp	r4, r2
 801b8ba:	d009      	beq.n	801b8d0 <Argus_Pba_Apply+0x218>
 801b8bc:	7a20      	ldrb	r0, [r4, #8]
 801b8be:	f030 0604 	bics.w	r6, r0, #4
 801b8c2:	f040 0004 	orr.w	r0, r0, #4
 801b8c6:	d0ef      	beq.n	801b8a8 <Argus_Pba_Apply+0x1f0>
 801b8c8:	7220      	strb	r0, [r4, #8]
 801b8ca:	340c      	adds	r4, #12
 801b8cc:	4294      	cmp	r4, r2
 801b8ce:	d1f5      	bne.n	801b8bc <Argus_Pba_Apply+0x204>
 801b8d0:	9807      	ldr	r0, [sp, #28]
 801b8d2:	2801      	cmp	r0, #1
 801b8d4:	f000 8314 	beq.w	801bf00 <Argus_Pba_Apply+0x848>
 801b8d8:	9804      	ldr	r0, [sp, #16]
 801b8da:	0640      	lsls	r0, r0, #25
 801b8dc:	d560      	bpl.n	801b9a0 <Argus_Pba_Apply+0x2e8>
 801b8de:	4674      	mov	r4, lr
 801b8e0:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 801b8e4:	f814 0c04 	ldrb.w	r0, [r4, #-4]
 801b8e8:	0740      	lsls	r0, r0, #29
 801b8ea:	d404      	bmi.n	801b8f6 <Argus_Pba_Apply+0x23e>
 801b8ec:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 801b8f0:	4286      	cmp	r6, r0
 801b8f2:	bfa8      	it	ge
 801b8f4:	4606      	movge	r6, r0
 801b8f6:	340c      	adds	r4, #12
 801b8f8:	4564      	cmp	r4, ip
 801b8fa:	d1f3      	bne.n	801b8e4 <Argus_Pba_Apply+0x22c>
 801b8fc:	2e00      	cmp	r6, #0
 801b8fe:	f897 a00c 	ldrb.w	sl, [r7, #12]
 801b902:	f897 900d 	ldrb.w	r9, [r7, #13]
 801b906:	f2c0 8214 	blt.w	801bd32 <Argus_Pba_Apply+0x67a>
 801b90a:	f8b7 800e 	ldrh.w	r8, [r7, #14]
 801b90e:	b2f4      	uxtb	r4, r6
 801b910:	fb04 f00a 	mul.w	r0, r4, sl
 801b914:	9007      	str	r0, [sp, #28]
 801b916:	ea4f 10c8 	mov.w	r0, r8, lsl #7
 801b91a:	900c      	str	r0, [sp, #48]	@ 0x30
 801b91c:	9807      	ldr	r0, [sp, #28]
 801b91e:	fb09 f404 	mul.w	r4, r9, r4
 801b922:	9409      	str	r4, [sp, #36]	@ 0x24
 801b924:	ea4f 2810 	mov.w	r8, r0, lsr #8
 801b928:	0a34      	lsrs	r4, r6, #8
 801b92a:	940a      	str	r4, [sp, #40]	@ 0x28
 801b92c:	fb0a 8804 	mla	r8, sl, r4, r8
 801b930:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 801b934:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801b936:	4440      	add	r0, r8
 801b938:	42a0      	cmp	r0, r4
 801b93a:	bfac      	ite	ge
 801b93c:	1830      	addge	r0, r6, r0
 801b93e:	1930      	addlt	r0, r6, r4
 801b940:	9007      	str	r0, [sp, #28]
 801b942:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b944:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801b946:	0a00      	lsrs	r0, r0, #8
 801b948:	fb09 0004 	mla	r0, r9, r4, r0
 801b94c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801b94e:	f3c4 14c0 	ubfx	r4, r4, #7, #1
 801b952:	4420      	add	r0, r4
 801b954:	8a3c      	ldrh	r4, [r7, #16]
 801b956:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 801b95a:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801b95e:	e9cd 7309 	strd	r7, r3, [sp, #36]	@ 0x24
 801b962:	01e4      	lsls	r4, r4, #7
 801b964:	4284      	cmp	r4, r0
 801b966:	bfac      	ite	ge
 801b968:	1936      	addge	r6, r6, r4
 801b96a:	1836      	addlt	r6, r6, r0
 801b96c:	f04f 0a04 	mov.w	sl, #4
 801b970:	4670      	mov	r0, lr
 801b972:	2400      	movs	r4, #0
 801b974:	f810 3c04 	ldrb.w	r3, [r0, #-4]
 801b978:	b95b      	cbnz	r3, 801b992 <Argus_Pba_Apply+0x2da>
 801b97a:	f850 3c0c 	ldr.w	r3, [r0, #-12]
 801b97e:	42b3      	cmp	r3, r6
 801b980:	dc05      	bgt.n	801b98e <Argus_Pba_Apply+0x2d6>
 801b982:	454b      	cmp	r3, r9
 801b984:	fa28 f704 	lsr.w	r7, r8, r4
 801b988:	dd03      	ble.n	801b992 <Argus_Pba_Apply+0x2da>
 801b98a:	07ff      	lsls	r7, r7, #31
 801b98c:	d401      	bmi.n	801b992 <Argus_Pba_Apply+0x2da>
 801b98e:	f800 ac04 	strb.w	sl, [r0, #-4]
 801b992:	300c      	adds	r0, #12
 801b994:	4560      	cmp	r0, ip
 801b996:	f104 0401 	add.w	r4, r4, #1
 801b99a:	d1eb      	bne.n	801b974 <Argus_Pba_Apply+0x2bc>
 801b99c:	e9dd 7309 	ldrd	r7, r3, [sp, #36]	@ 0x24
 801b9a0:	7878      	ldrb	r0, [r7, #1]
 801b9a2:	2802      	cmp	r0, #2
 801b9a4:	f000 820a 	beq.w	801bdbc <Argus_Pba_Apply+0x704>
 801b9a8:	2600      	movs	r6, #0
 801b9aa:	4637      	mov	r7, r6
 801b9ac:	f81e 0c04 	ldrb.w	r0, [lr, #-4]
 801b9b0:	b978      	cbnz	r0, 801b9d2 <Argus_Pba_Apply+0x31a>
 801b9b2:	f85e 4c0c 	ldr.w	r4, [lr, #-12]
 801b9b6:	4265      	negs	r5, r4
 801b9b8:	2c00      	cmp	r4, #0
 801b9ba:	f3c5 1040 	ubfx	r0, r5, #5, #1
 801b9be:	eb00 1095 	add.w	r0, r0, r5, lsr #6
 801b9c2:	bfaa      	itet	ge
 801b9c4:	f3c4 1040 	ubfxge	r0, r4, #5, #1
 801b9c8:	4240      	neglt	r0, r0
 801b9ca:	eb00 1094 	addge.w	r0, r0, r4, lsr #6
 801b9ce:	4407      	add	r7, r0
 801b9d0:	3601      	adds	r6, #1
 801b9d2:	f10e 0e0c 	add.w	lr, lr, #12
 801b9d6:	45e6      	cmp	lr, ip
 801b9d8:	d1e8      	bne.n	801b9ac <Argus_Pba_Apply+0x2f4>
 801b9da:	02b6      	lsls	r6, r6, #10
 801b9dc:	f000 8289 	beq.w	801bef2 <Argus_Pba_Apply+0x83a>
 801b9e0:	ea87 70e7 	eor.w	r0, r7, r7, asr #31
 801b9e4:	2e00      	cmp	r6, #0
 801b9e6:	eba0 70e7 	sub.w	r0, r0, r7, asr #31
 801b9ea:	f2c0 81b6 	blt.w	801bd5a <Argus_Pba_Apply+0x6a2>
 801b9ee:	4286      	cmp	r6, r0
 801b9f0:	4635      	mov	r5, r6
 801b9f2:	f080 8442 	bcs.w	801c27a <Argus_Pba_Apply+0xbc2>
 801b9f6:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 801b9fa:	006d      	lsls	r5, r5, #1
 801b9fc:	4285      	cmp	r5, r0
 801b9fe:	ea4f 0444 	mov.w	r4, r4, lsl #1
 801ba02:	d3fa      	bcc.n	801b9fa <Argus_Pba_Apply+0x342>
 801ba04:	2c00      	cmp	r4, #0
 801ba06:	f040 81af 	bne.w	801bd68 <Argus_Pba_Apply+0x6b0>
 801ba0a:	ea97 0f06 	teq	r7, r6
 801ba0e:	bf54      	ite	pl
 801ba10:	f06f 4c00 	mvnpl.w	ip, #2147483648	@ 0x80000000
 801ba14:	f04f 4c00 	movmi.w	ip, #2147483648	@ 0x80000000
 801ba18:	2000      	movs	r0, #0
 801ba1a:	f8c1 c1b4 	str.w	ip, [r1, #436]	@ 0x1b4
 801ba1e:	461c      	mov	r4, r3
 801ba20:	4606      	mov	r6, r0
 801ba22:	2701      	movs	r7, #1
 801ba24:	7a25      	ldrb	r5, [r4, #8]
 801ba26:	076d      	lsls	r5, r5, #29
 801ba28:	bf48      	it	mi
 801ba2a:	fa07 f500 	lslmi.w	r5, r7, r0
 801ba2e:	f100 0001 	add.w	r0, r0, #1
 801ba32:	bf48      	it	mi
 801ba34:	432e      	orrmi	r6, r5
 801ba36:	2820      	cmp	r0, #32
 801ba38:	f104 040c 	add.w	r4, r4, #12
 801ba3c:	d1f2      	bne.n	801ba24 <Argus_Pba_Apply+0x36c>
 801ba3e:	43f6      	mvns	r6, r6
 801ba40:	f8cb 6004 	str.w	r6, [fp, #4]
 801ba44:	2e00      	cmp	r6, #0
 801ba46:	f000 81ae 	beq.w	801bda6 <Argus_Pba_Apply+0x6ee>
 801ba4a:	2300      	movs	r3, #0
 801ba4c:	f8b1 21b8 	ldrh.w	r2, [r1, #440]	@ 0x1b8
 801ba50:	9301      	str	r3, [sp, #4]
 801ba52:	e02e      	b.n	801bab2 <Argus_Pba_Apply+0x3fa>
 801ba54:	9807      	ldr	r0, [sp, #28]
 801ba56:	9c05      	ldr	r4, [sp, #20]
 801ba58:	42a0      	cmp	r0, r4
 801ba5a:	d867      	bhi.n	801bb2c <Argus_Pba_Apply+0x474>
 801ba5c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801ba5e:	42a0      	cmp	r0, r4
 801ba60:	d803      	bhi.n	801ba6a <Argus_Pba_Apply+0x3b2>
 801ba62:	f01a 0ffb 	tst.w	sl, #251	@ 0xfb
 801ba66:	f000 8154 	beq.w	801bd12 <Argus_Pba_Apply+0x65a>
 801ba6a:	f1b9 0f00 	cmp.w	r9, #0
 801ba6e:	d065      	beq.n	801bb3c <Argus_Pba_Apply+0x484>
 801ba70:	f1b8 0f00 	cmp.w	r8, #0
 801ba74:	d162      	bne.n	801bb3c <Argus_Pba_Apply+0x484>
 801ba76:	f04f 30ff 	mov.w	r0, #4294967295
 801ba7a:	07c5      	lsls	r5, r0, #31
 801ba7c:	7a1c      	ldrb	r4, [r3, #8]
 801ba7e:	f103 030c 	add.w	r3, r3, #12
 801ba82:	d471      	bmi.n	801bb68 <Argus_Pba_Apply+0x4b0>
 801ba84:	f024 0404 	bic.w	r4, r4, #4
 801ba88:	429a      	cmp	r2, r3
 801ba8a:	f803 4c04 	strb.w	r4, [r3, #-4]
 801ba8e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 801ba92:	d8f2      	bhi.n	801ba7a <Argus_Pba_Apply+0x3c2>
 801ba94:	88fa      	ldrh	r2, [r7, #6]
 801ba96:	9205      	str	r2, [sp, #20]
 801ba98:	2300      	movs	r3, #0
 801ba9a:	f8db c000 	ldr.w	ip, [fp]
 801ba9e:	f8b1 21b8 	ldrh.w	r2, [r1, #440]	@ 0x1b8
 801baa2:	f8cb 3004 	str.w	r3, [fp, #4]
 801baa6:	9301      	str	r3, [sp, #4]
 801baa8:	f06f 036d 	mvn.w	r3, #109	@ 0x6d
 801baac:	f8c1 c1b4 	str.w	ip, [r1, #436]	@ 0x1b4
 801bab0:	600b      	str	r3, [r1, #0]
 801bab2:	9b05      	ldr	r3, [sp, #20]
 801bab4:	429a      	cmp	r2, r3
 801bab6:	d203      	bcs.n	801bac0 <Argus_Pba_Apply+0x408>
 801bab8:	9b06      	ldr	r3, [sp, #24]
 801baba:	f043 0310 	orr.w	r3, r3, #16
 801babe:	618b      	str	r3, [r1, #24]
 801bac0:	9b01      	ldr	r3, [sp, #4]
 801bac2:	f88b 3008 	strb.w	r3, [fp, #8]
 801bac6:	f8cb c000 	str.w	ip, [fp]
 801baca:	b01b      	add	sp, #108	@ 0x6c
 801bacc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bad0:	f8a1 31b8 	strh.w	r3, [r1, #440]	@ 0x1b8
 801bad4:	f8c1 31b4 	str.w	r3, [r1, #436]	@ 0x1b4
 801bad8:	6043      	str	r3, [r0, #4]
 801bada:	b01b      	add	sp, #108	@ 0x6c
 801badc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bae0:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 801bae4:	f501 74d4 	add.w	r4, r1, #424	@ 0x1a8
 801bae8:	f04f 32ff 	mov.w	r2, #4294967295
 801baec:	07d5      	lsls	r5, r2, #31
 801baee:	7a18      	ldrb	r0, [r3, #8]
 801baf0:	f103 030c 	add.w	r3, r3, #12
 801baf4:	d525      	bpl.n	801bb42 <Argus_Pba_Apply+0x48a>
 801baf6:	f040 0004 	orr.w	r0, r0, #4
 801bafa:	429c      	cmp	r4, r3
 801bafc:	f803 0c04 	strb.w	r0, [r3, #-4]
 801bb00:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801bb04:	d1f2      	bne.n	801baec <Argus_Pba_Apply+0x434>
 801bb06:	f8db 2000 	ldr.w	r2, [fp]
 801bb0a:	2300      	movs	r3, #0
 801bb0c:	f8cb 3004 	str.w	r3, [fp, #4]
 801bb10:	f8a1 31b8 	strh.w	r3, [r1, #440]	@ 0x1b8
 801bb14:	f8c1 21b4 	str.w	r2, [r1, #436]	@ 0x1b4
 801bb18:	b01b      	add	sp, #108	@ 0x6c
 801bb1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb1e:	f89b 0009 	ldrb.w	r0, [fp, #9]
 801bb22:	4284      	cmp	r4, r0
 801bb24:	f67f ae33 	bls.w	801b78e <Argus_Pba_Apply+0xd6>
 801bb28:	3001      	adds	r0, #1
 801bb2a:	e62e      	b.n	801b78a <Argus_Pba_Apply+0xd2>
 801bb2c:	f1b9 0f00 	cmp.w	r9, #0
 801bb30:	f000 80ec 	beq.w	801bd0c <Argus_Pba_Apply+0x654>
 801bb34:	f1b8 0f00 	cmp.w	r8, #0
 801bb38:	d09d      	beq.n	801ba76 <Argus_Pba_Apply+0x3be>
 801bb3a:	e66a      	b.n	801b812 <Argus_Pba_Apply+0x15a>
 801bb3c:	9801      	ldr	r0, [sp, #4]
 801bb3e:	9007      	str	r0, [sp, #28]
 801bb40:	e669      	b.n	801b816 <Argus_Pba_Apply+0x15e>
 801bb42:	f020 0004 	bic.w	r0, r0, #4
 801bb46:	42a3      	cmp	r3, r4
 801bb48:	f803 0c04 	strb.w	r0, [r3, #-4]
 801bb4c:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801bb50:	d1cc      	bne.n	801baec <Argus_Pba_Apply+0x434>
 801bb52:	e7d8      	b.n	801bb06 <Argus_Pba_Apply+0x44e>
 801bb54:	f026 0604 	bic.w	r6, r6, #4
 801bb58:	4290      	cmp	r0, r2
 801bb5a:	f800 6c04 	strb.w	r6, [r0, #-4]
 801bb5e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801bb62:	f47f ae75 	bne.w	801b850 <Argus_Pba_Apply+0x198>
 801bb66:	e682      	b.n	801b86e <Argus_Pba_Apply+0x1b6>
 801bb68:	f044 0404 	orr.w	r4, r4, #4
 801bb6c:	429a      	cmp	r2, r3
 801bb6e:	f803 4c04 	strb.w	r4, [r3, #-4]
 801bb72:	ea4f 0050 	mov.w	r0, r0, lsr #1
 801bb76:	d880      	bhi.n	801ba7a <Argus_Pba_Apply+0x3c2>
 801bb78:	e78c      	b.n	801ba94 <Argus_Pba_Apply+0x3dc>
 801bb7a:	f1b9 0f00 	cmp.w	r9, #0
 801bb7e:	f43f ae4a 	beq.w	801b816 <Argus_Pba_Apply+0x15e>
 801bb82:	f1b8 0f00 	cmp.w	r8, #0
 801bb86:	f43f af76 	beq.w	801ba76 <Argus_Pba_Apply+0x3be>
 801bb8a:	e644      	b.n	801b816 <Argus_Pba_Apply+0x15e>
 801bb8c:	2e00      	cmp	r6, #0
 801bb8e:	f43f ae57 	beq.w	801b840 <Argus_Pba_Apply+0x188>
 801bb92:	9804      	ldr	r0, [sp, #16]
 801bb94:	f010 0020 	ands.w	r0, r0, #32
 801bb98:	d068      	beq.n	801bc6c <Argus_Pba_Apply+0x5b4>
 801bb9a:	88f8      	ldrh	r0, [r7, #6]
 801bb9c:	9005      	str	r0, [sp, #20]
 801bb9e:	9d03      	ldr	r5, [sp, #12]
 801bba0:	9e02      	ldr	r6, [sp, #8]
 801bba2:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 801bba6:	0100      	lsls	r0, r0, #4
 801bba8:	eb06 0446 	add.w	r4, r6, r6, lsl #1
 801bbac:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 801bbb0:	4408      	add	r0, r1
 801bbb2:	f890 a030 	ldrb.w	sl, [r0, #48]	@ 0x30
 801bbb6:	0070      	lsls	r0, r6, #1
 801bbb8:	900a      	str	r0, [sp, #40]	@ 0x28
 801bbba:	0068      	lsls	r0, r5, #1
 801bbbc:	9009      	str	r0, [sp, #36]	@ 0x24
 801bbbe:	f02a 0004 	bic.w	r0, sl, #4
 801bbc2:	900c      	str	r0, [sp, #48]	@ 0x30
 801bbc4:	2003      	movs	r0, #3
 801bbc6:	f01a 0720 	ands.w	r7, sl, #32
 801bbca:	f040 8091 	bne.w	801bcf0 <Argus_Pba_Apply+0x638>
 801bbce:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801bbd0:	2c00      	cmp	r4, #0
 801bbd2:	f040 834d 	bne.w	801c270 <Argus_Pba_Apply+0xbb8>
 801bbd6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801bbda:	2701      	movs	r7, #1
 801bbdc:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 801bbe0:	40a7      	lsls	r7, r4
 801bbe2:	43fc      	mvns	r4, r7
 801bbe4:	2600      	movs	r6, #0
 801bbe6:	f014 0f01 	tst.w	r4, #1
 801bbea:	7a1d      	ldrb	r5, [r3, #8]
 801bbec:	f103 030c 	add.w	r3, r3, #12
 801bbf0:	d022      	beq.n	801bc38 <Argus_Pba_Apply+0x580>
 801bbf2:	f045 0504 	orr.w	r5, r5, #4
 801bbf6:	4293      	cmp	r3, r2
 801bbf8:	f803 5c04 	strb.w	r5, [r3, #-4]
 801bbfc:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801bc00:	d1f1      	bne.n	801bbe6 <Argus_Pba_Apply+0x52e>
 801bc02:	9a03      	ldr	r2, [sp, #12]
 801bc04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bc06:	9c02      	ldr	r4, [sp, #8]
 801bc08:	f8cb 7004 	str.w	r7, [fp, #4]
 801bc0c:	4413      	add	r3, r2
 801bc0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801bc10:	011b      	lsls	r3, r3, #4
 801bc12:	4422      	add	r2, r4
 801bc14:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801bc18:	440b      	add	r3, r1
 801bc1a:	2e6c      	cmp	r6, #108	@ 0x6c
 801bc1c:	8dda      	ldrh	r2, [r3, #46]	@ 0x2e
 801bc1e:	f8a1 21b8 	strh.w	r2, [r1, #440]	@ 0x1b8
 801bc22:	f8d3 c028 	ldr.w	ip, [r3, #40]	@ 0x28
 801bc26:	f8c1 c1b4 	str.w	ip, [r1, #436]	@ 0x1b4
 801bc2a:	d066      	beq.n	801bcfa <Argus_Pba_Apply+0x642>
 801bc2c:	366e      	adds	r6, #110	@ 0x6e
 801bc2e:	f040 824f 	bne.w	801c0d0 <Argus_Pba_Apply+0xa18>
 801bc32:	f8db c000 	ldr.w	ip, [fp]
 801bc36:	e737      	b.n	801baa8 <Argus_Pba_Apply+0x3f0>
 801bc38:	f025 0504 	bic.w	r5, r5, #4
 801bc3c:	4293      	cmp	r3, r2
 801bc3e:	f803 5c04 	strb.w	r5, [r3, #-4]
 801bc42:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801bc46:	d1ce      	bne.n	801bbe6 <Argus_Pba_Apply+0x52e>
 801bc48:	e7db      	b.n	801bc02 <Argus_Pba_Apply+0x54a>
 801bc4a:	9803      	ldr	r0, [sp, #12]
 801bc4c:	9c02      	ldr	r4, [sp, #8]
 801bc4e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bc52:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bc56:	0100      	lsls	r0, r0, #4
 801bc58:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 801bc5c:	4408      	add	r0, r1
 801bc5e:	f890 4030 	ldrb.w	r4, [r0, #48]	@ 0x30
 801bc62:	f044 0408 	orr.w	r4, r4, #8
 801bc66:	f880 4030 	strb.w	r4, [r0, #48]	@ 0x30
 801bc6a:	e57c      	b.n	801b766 <Argus_Pba_Apply+0xae>
 801bc6c:	f04f 34ff 	mov.w	r4, #4294967295
 801bc70:	f014 0f01 	tst.w	r4, #1
 801bc74:	7a1d      	ldrb	r5, [r3, #8]
 801bc76:	f103 030c 	add.w	r3, r3, #12
 801bc7a:	d028      	beq.n	801bcce <Argus_Pba_Apply+0x616>
 801bc7c:	f045 0504 	orr.w	r5, r5, #4
 801bc80:	429a      	cmp	r2, r3
 801bc82:	f803 5c04 	strb.w	r5, [r3, #-4]
 801bc86:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801bc8a:	d1f1      	bne.n	801bc70 <Argus_Pba_Apply+0x5b8>
 801bc8c:	9a06      	ldr	r2, [sp, #24]
 801bc8e:	f8db c000 	ldr.w	ip, [fp]
 801bc92:	2300      	movs	r3, #0
 801bc94:	f116 0f6e 	cmn.w	r6, #110	@ 0x6e
 801bc98:	f8cb 3004 	str.w	r3, [fp, #4]
 801bc9c:	f402 3400 	and.w	r4, r2, #131072	@ 0x20000
 801bca0:	f000 8311 	beq.w	801c2c6 <Argus_Pba_Apply+0xc0e>
 801bca4:	2e6c      	cmp	r6, #108	@ 0x6c
 801bca6:	f040 820d 	bne.w	801c0c4 <Argus_Pba_Apply+0xa0c>
 801bcaa:	88fa      	ldrh	r2, [r7, #6]
 801bcac:	9205      	str	r2, [sp, #20]
 801bcae:	f8b1 21b8 	ldrh.w	r2, [r1, #440]	@ 0x1b8
 801bcb2:	9301      	str	r3, [sp, #4]
 801bcb4:	2c00      	cmp	r4, #0
 801bcb6:	f43f aef7 	beq.w	801baa8 <Argus_Pba_Apply+0x3f0>
 801bcba:	9b08      	ldr	r3, [sp, #32]
 801bcbc:	b90b      	cbnz	r3, 801bcc2 <Argus_Pba_Apply+0x60a>
 801bcbe:	236c      	movs	r3, #108	@ 0x6c
 801bcc0:	600b      	str	r3, [r1, #0]
 801bcc2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801bcc6:	f8c1 31b4 	str.w	r3, [r1, #436]	@ 0x1b4
 801bcca:	469c      	mov	ip, r3
 801bccc:	e6f1      	b.n	801bab2 <Argus_Pba_Apply+0x3fa>
 801bcce:	f025 0504 	bic.w	r5, r5, #4
 801bcd2:	4293      	cmp	r3, r2
 801bcd4:	f803 5c04 	strb.w	r5, [r3, #-4]
 801bcd8:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801bcdc:	d1c8      	bne.n	801bc70 <Argus_Pba_Apply+0x5b8>
 801bcde:	e7d5      	b.n	801bc8c <Argus_Pba_Apply+0x5d4>
 801bce0:	88f8      	ldrh	r0, [r7, #6]
 801bce2:	9005      	str	r0, [sp, #20]
 801bce4:	f01a 0f20 	tst.w	sl, #32
 801bce8:	f04f 0002 	mov.w	r0, #2
 801bcec:	f43f af73 	beq.w	801bbd6 <Argus_Pba_Apply+0x51e>
 801bcf0:	266c      	movs	r6, #108	@ 0x6c
 801bcf2:	f04f 34ff 	mov.w	r4, #4294967295
 801bcf6:	2700      	movs	r7, #0
 801bcf8:	e775      	b.n	801bbe6 <Argus_Pba_Apply+0x52e>
 801bcfa:	2802      	cmp	r0, #2
 801bcfc:	f8db c000 	ldr.w	ip, [fp]
 801bd00:	f43f aed2 	beq.w	801baa8 <Argus_Pba_Apply+0x3f0>
 801bd04:	9b06      	ldr	r3, [sp, #24]
 801bd06:	f403 3400 	and.w	r4, r3, #131072	@ 0x20000
 801bd0a:	e7d3      	b.n	801bcb4 <Argus_Pba_Apply+0x5fc>
 801bd0c:	f8cd 901c 	str.w	r9, [sp, #28]
 801bd10:	e581      	b.n	801b816 <Argus_Pba_Apply+0x15e>
 801bd12:	f1b9 0f00 	cmp.w	r9, #0
 801bd16:	d0e3      	beq.n	801bce0 <Argus_Pba_Apply+0x628>
 801bd18:	f1b8 0f00 	cmp.w	r8, #0
 801bd1c:	f43f aeab 	beq.w	801ba76 <Argus_Pba_Apply+0x3be>
 801bd20:	88f8      	ldrh	r0, [r7, #6]
 801bd22:	9005      	str	r0, [sp, #20]
 801bd24:	f01a 0f20 	tst.w	sl, #32
 801bd28:	f04f 0002 	mov.w	r0, #2
 801bd2c:	f43f af53 	beq.w	801bbd6 <Argus_Pba_Apply+0x51e>
 801bd30:	e7de      	b.n	801bcf0 <Argus_Pba_Apply+0x638>
 801bd32:	f1c6 0800 	rsb	r8, r6, #0
 801bd36:	fa5f f488 	uxtb.w	r4, r8
 801bd3a:	fb09 f404 	mul.w	r4, r9, r4
 801bd3e:	0a20      	lsrs	r0, r4, #8
 801bd40:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801bd44:	f3c4 14c0 	ubfx	r4, r4, #7, #1
 801bd48:	fb09 0008 	mla	r0, r9, r8, r0
 801bd4c:	4420      	add	r0, r4
 801bd4e:	89fc      	ldrh	r4, [r7, #14]
 801bd50:	eb06 14c4 	add.w	r4, r6, r4, lsl #7
 801bd54:	4240      	negs	r0, r0
 801bd56:	9407      	str	r4, [sp, #28]
 801bd58:	e5fc      	b.n	801b954 <Argus_Pba_Apply+0x29c>
 801bd5a:	4275      	negs	r5, r6
 801bd5c:	4285      	cmp	r5, r0
 801bd5e:	bf28      	it	cs
 801bd60:	f44f 3480 	movcs.w	r4, #65536	@ 0x10000
 801bd64:	f4ff ae47 	bcc.w	801b9f6 <Argus_Pba_Apply+0x33e>
 801bd68:	2d00      	cmp	r5, #0
 801bd6a:	f2c0 81ff 	blt.w	801c16c <Argus_Pba_Apply+0xab4>
 801bd6e:	f04f 0c00 	mov.w	ip, #0
 801bd72:	b908      	cbnz	r0, 801bd78 <Argus_Pba_Apply+0x6c0>
 801bd74:	e228      	b.n	801c1c8 <Argus_Pba_Apply+0xb10>
 801bd76:	b160      	cbz	r0, 801bd92 <Argus_Pba_Apply+0x6da>
 801bd78:	4285      	cmp	r5, r0
 801bd7a:	bf9c      	itt	ls
 801bd7c:	1b40      	subls	r0, r0, r5
 801bd7e:	ea4c 0c04 	orrls.w	ip, ip, r4
 801bd82:	0864      	lsrs	r4, r4, #1
 801bd84:	ea4f 0040 	mov.w	r0, r0, lsl #1
 801bd88:	d1f5      	bne.n	801bd76 <Argus_Pba_Apply+0x6be>
 801bd8a:	42a8      	cmp	r0, r5
 801bd8c:	d301      	bcc.n	801bd92 <Argus_Pba_Apply+0x6da>
 801bd8e:	f10c 0c01 	add.w	ip, ip, #1
 801bd92:	ea97 0f06 	teq	r7, r6
 801bd96:	f100 821c 	bmi.w	801c1d2 <Argus_Pba_Apply+0xb1a>
 801bd9a:	f1bc 0f00 	cmp.w	ip, #0
 801bd9e:	bfb8      	it	lt
 801bda0:	f06f 4c00 	mvnlt.w	ip, #2147483648	@ 0x80000000
 801bda4:	e638      	b.n	801ba18 <Argus_Pba_Apply+0x360>
 801bda6:	9804      	ldr	r0, [sp, #16]
 801bda8:	f010 0020 	ands.w	r0, r0, #32
 801bdac:	f47f aef7 	bne.w	801bb9e <Argus_Pba_Apply+0x4e6>
 801bdb0:	f8db c000 	ldr.w	ip, [fp]
 801bdb4:	f8b1 21b8 	ldrh.w	r2, [r1, #440]	@ 0x1b8
 801bdb8:	9001      	str	r0, [sp, #4]
 801bdba:	e675      	b.n	801baa8 <Argus_Pba_Apply+0x3f0>
 801bdbc:	fab5 f485 	clz	r4, r5
 801bdc0:	f1c4 0726 	rsb	r7, r4, #38	@ 0x26
 801bdc4:	f04f 30ff 	mov.w	r0, #4294967295
 801bdc8:	40b8      	lsls	r0, r7
 801bdca:	43c0      	mvns	r0, r0
 801bdcc:	9009      	str	r0, [sp, #36]	@ 0x24
 801bdce:	2600      	movs	r6, #0
 801bdd0:	f1c4 0015 	rsb	r0, r4, #21
 801bdd4:	9407      	str	r4, [sp, #28]
 801bdd6:	f1c4 0825 	rsb	r8, r4, #37	@ 0x25
 801bdda:	4635      	mov	r5, r6
 801bddc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801bdde:	930a      	str	r3, [sp, #40]	@ 0x28
 801bde0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801bde4:	4681      	mov	r9, r0
 801bde6:	e01b      	b.n	801be20 <Argus_Pba_Apply+0x768>
 801bde8:	2f10      	cmp	r7, #16
 801bdea:	dd3d      	ble.n	801be68 <Argus_Pba_Apply+0x7b0>
 801bdec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801bdf0:	fb00 fa0a 	mul.w	sl, r0, sl
 801bdf4:	fa2a fa09 	lsr.w	sl, sl, r9
 801bdf8:	b29b      	uxth	r3, r3
 801bdfa:	fb00 f303 	mul.w	r3, r0, r3
 801bdfe:	f00a 0b01 	and.w	fp, sl, #1
 801be02:	fa23 f308 	lsr.w	r3, r3, r8
 801be06:	eb0b 0a5a 	add.w	sl, fp, sl, lsr #1
 801be0a:	eb0a 0a53 	add.w	sl, sl, r3, lsr #1
 801be0e:	f003 0301 	and.w	r3, r3, #1
 801be12:	4453      	add	r3, sl
 801be14:	441d      	add	r5, r3
 801be16:	4406      	add	r6, r0
 801be18:	f10e 0e0c 	add.w	lr, lr, #12
 801be1c:	45e6      	cmp	lr, ip
 801be1e:	d03f      	beq.n	801bea0 <Argus_Pba_Apply+0x7e8>
 801be20:	f81e 3c04 	ldrb.w	r3, [lr, #-4]
 801be24:	2b00      	cmp	r3, #0
 801be26:	d1f7      	bne.n	801be18 <Argus_Pba_Apply+0x760>
 801be28:	f85e 3c0c 	ldr.w	r3, [lr, #-12]
 801be2c:	f83e 0c06 	ldrh.w	r0, [lr, #-6]
 801be30:	2b00      	cmp	r3, #0
 801be32:	dad9      	bge.n	801bde8 <Argus_Pba_Apply+0x730>
 801be34:	2f10      	cmp	r7, #16
 801be36:	f1c3 0300 	rsb	r3, r3, #0
 801be3a:	dd23      	ble.n	801be84 <Argus_Pba_Apply+0x7cc>
 801be3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801be40:	fb00 fa0a 	mul.w	sl, r0, sl
 801be44:	fa2a fa09 	lsr.w	sl, sl, r9
 801be48:	b29b      	uxth	r3, r3
 801be4a:	fb00 f303 	mul.w	r3, r0, r3
 801be4e:	f00a 0b01 	and.w	fp, sl, #1
 801be52:	fa23 f308 	lsr.w	r3, r3, r8
 801be56:	eb0b 0a5a 	add.w	sl, fp, sl, lsr #1
 801be5a:	eb0a 0a53 	add.w	sl, sl, r3, lsr #1
 801be5e:	f003 0301 	and.w	r3, r3, #1
 801be62:	4453      	add	r3, sl
 801be64:	425b      	negs	r3, r3
 801be66:	e7d5      	b.n	801be14 <Argus_Pba_Apply+0x75c>
 801be68:	ea03 0a04 	and.w	sl, r3, r4
 801be6c:	fb00 fa0a 	mul.w	sl, r0, sl
 801be70:	fa2a fa08 	lsr.w	sl, sl, r8
 801be74:	f00a 0b01 	and.w	fp, sl, #1
 801be78:	40fb      	lsrs	r3, r7
 801be7a:	eb0b 0a5a 	add.w	sl, fp, sl, lsr #1
 801be7e:	fb00 a303 	mla	r3, r0, r3, sl
 801be82:	e7c7      	b.n	801be14 <Argus_Pba_Apply+0x75c>
 801be84:	ea03 0a04 	and.w	sl, r3, r4
 801be88:	fb00 fa0a 	mul.w	sl, r0, sl
 801be8c:	fa2a fa08 	lsr.w	sl, sl, r8
 801be90:	f00a 0b01 	and.w	fp, sl, #1
 801be94:	40fb      	lsrs	r3, r7
 801be96:	eb0b 0a5a 	add.w	sl, fp, sl, lsr #1
 801be9a:	fb00 a303 	mla	r3, r0, r3, sl
 801be9e:	e7e1      	b.n	801be64 <Argus_Pba_Apply+0x7ac>
 801bea0:	2f0f      	cmp	r7, #15
 801bea2:	e9dd b309 	ldrd	fp, r3, [sp, #36]	@ 0x24
 801bea6:	f340 8118 	ble.w	801c0da <Argus_Pba_Apply+0xa22>
 801beaa:	2e00      	cmp	r6, #0
 801beac:	f000 8185 	beq.w	801c1ba <Argus_Pba_Apply+0xb02>
 801beb0:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 801beb4:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 801beb8:	42b7      	cmp	r7, r6
 801beba:	4630      	mov	r0, r6
 801bebc:	f240 81ed 	bls.w	801c29a <Argus_Pba_Apply+0xbe2>
 801bec0:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 801bec4:	4686      	mov	lr, r0
 801bec6:	0040      	lsls	r0, r0, #1
 801bec8:	4287      	cmp	r7, r0
 801beca:	46a4      	mov	ip, r4
 801becc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 801bed0:	d8f8      	bhi.n	801bec4 <Argus_Pba_Apply+0x80c>
 801bed2:	2c00      	cmp	r4, #0
 801bed4:	f040 81a9 	bne.w	801c22a <Argus_Pba_Apply+0xb72>
 801bed8:	ea96 0f05 	teq	r6, r5
 801bedc:	bf54      	ite	pl
 801bede:	f06f 4c00 	mvnpl.w	ip, #2147483648	@ 0x80000000
 801bee2:	f04f 4c00 	movmi.w	ip, #2147483648	@ 0x80000000
 801bee6:	9807      	ldr	r0, [sp, #28]
 801bee8:	f1c0 0516 	rsb	r5, r0, #22
 801beec:	fa0c fc05 	lsl.w	ip, ip, r5
 801bef0:	e592      	b.n	801ba18 <Argus_Pba_Apply+0x360>
 801bef2:	2f00      	cmp	r7, #0
 801bef4:	bfac      	ite	ge
 801bef6:	f06f 4c00 	mvnge.w	ip, #2147483648	@ 0x80000000
 801befa:	f04f 4c00 	movlt.w	ip, #2147483648	@ 0x80000000
 801befe:	e58b      	b.n	801ba18 <Argus_Pba_Apply+0x360>
 801bf00:	9803      	ldr	r0, [sp, #12]
 801bf02:	9e02      	ldr	r6, [sp, #8]
 801bf04:	f89b 8008 	ldrb.w	r8, [fp, #8]
 801bf08:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
 801bf0c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bf10:	eb06 0446 	add.w	r4, r6, r6, lsl #1
 801bf14:	0100      	lsls	r0, r0, #4
 801bf16:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 801bf1a:	f89b 4009 	ldrb.w	r4, [fp, #9]
 801bf1e:	940f      	str	r4, [sp, #60]	@ 0x3c
 801bf20:	9c02      	ldr	r4, [sp, #8]
 801bf22:	f897 800c 	ldrb.w	r8, [r7, #12]
 801bf26:	f8cd 804c 	str.w	r8, [sp, #76]	@ 0x4c
 801bf2a:	0064      	lsls	r4, r4, #1
 801bf2c:	940a      	str	r4, [sp, #40]	@ 0x28
 801bf2e:	9c03      	ldr	r4, [sp, #12]
 801bf30:	f897 800d 	ldrb.w	r8, [r7, #13]
 801bf34:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 801bf38:	4408      	add	r0, r1
 801bf3a:	0064      	lsls	r4, r4, #1
 801bf3c:	f890 a030 	ldrb.w	sl, [r0, #48]	@ 0x30
 801bf40:	9409      	str	r4, [sp, #36]	@ 0x24
 801bf42:	7cf8      	ldrb	r0, [r7, #19]
 801bf44:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801bf46:	f8b7 8010 	ldrh.w	r8, [r7, #16]
 801bf4a:	f8b7 900e 	ldrh.w	r9, [r7, #14]
 801bf4e:	f8cd 805c 	str.w	r8, [sp, #92]	@ 0x5c
 801bf52:	f02a 0604 	bic.w	r6, sl, #4
 801bf56:	4284      	cmp	r4, r0
 801bf58:	960d      	str	r6, [sp, #52]	@ 0x34
 801bf5a:	960c      	str	r6, [sp, #48]	@ 0x30
 801bf5c:	f0c0 80df 	bcc.w	801c11e <Argus_Pba_Apply+0xa66>
 801bf60:	2e00      	cmp	r6, #0
 801bf62:	f040 810f 	bne.w	801c184 <Argus_Pba_Apply+0xacc>
 801bf66:	9607      	str	r6, [sp, #28]
 801bf68:	9c03      	ldr	r4, [sp, #12]
 801bf6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bf6c:	9e02      	ldr	r6, [sp, #8]
 801bf6e:	4420      	add	r0, r4
 801bf70:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801bf72:	0100      	lsls	r0, r0, #4
 801bf74:	4434      	add	r4, r6
 801bf76:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 801bf7a:	4408      	add	r0, r1
 801bf7c:	f06f 4800 	mvn.w	r8, #2147483648	@ 0x80000000
 801bf80:	6a86      	ldr	r6, [r0, #40]	@ 0x28
 801bf82:	9615      	str	r6, [sp, #84]	@ 0x54
 801bf84:	f00a 0404 	and.w	r4, sl, #4
 801bf88:	4546      	cmp	r6, r8
 801bf8a:	9411      	str	r4, [sp, #68]	@ 0x44
 801bf8c:	f000 8149 	beq.w	801c222 <Argus_Pba_Apply+0xb6a>
 801bf90:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801bf92:	f880 4030 	strb.w	r4, [r0, #48]	@ 0x30
 801bf96:	2000      	movs	r0, #0
 801bf98:	900f      	str	r0, [sp, #60]	@ 0x3c
 801bf9a:	2001      	movs	r0, #1
 801bf9c:	9012      	str	r0, [sp, #72]	@ 0x48
 801bf9e:	4618      	mov	r0, r3
 801bfa0:	2600      	movs	r6, #0
 801bfa2:	7a04      	ldrb	r4, [r0, #8]
 801bfa4:	300c      	adds	r0, #12
 801bfa6:	0764      	lsls	r4, r4, #29
 801bfa8:	bf48      	it	mi
 801bfaa:	3601      	addmi	r6, #1
 801bfac:	4282      	cmp	r2, r0
 801bfae:	d1f8      	bne.n	801bfa2 <Argus_Pba_Apply+0x8ea>
 801bfb0:	f1c6 0620 	rsb	r6, r6, #32
 801bfb4:	b2f0      	uxtb	r0, r6
 801bfb6:	9018      	str	r0, [sp, #96]	@ 0x60
 801bfb8:	4676      	mov	r6, lr
 801bfba:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 801bfbe:	f816 0c04 	ldrb.w	r0, [r6, #-4]
 801bfc2:	0740      	lsls	r0, r0, #29
 801bfc4:	d404      	bmi.n	801bfd0 <Argus_Pba_Apply+0x918>
 801bfc6:	f856 0c0c 	ldr.w	r0, [r6, #-12]
 801bfca:	4284      	cmp	r4, r0
 801bfcc:	bfa8      	it	ge
 801bfce:	4604      	movge	r4, r0
 801bfd0:	360c      	adds	r6, #12
 801bfd2:	45b4      	cmp	ip, r6
 801bfd4:	d1f3      	bne.n	801bfbe <Argus_Pba_Apply+0x906>
 801bfd6:	46f0      	mov	r8, lr
 801bfd8:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 801bfdc:	f818 0c04 	ldrb.w	r0, [r8, #-4]
 801bfe0:	0740      	lsls	r0, r0, #29
 801bfe2:	d404      	bmi.n	801bfee <Argus_Pba_Apply+0x936>
 801bfe4:	f858 0c0c 	ldr.w	r0, [r8, #-12]
 801bfe8:	4286      	cmp	r6, r0
 801bfea:	bfb8      	it	lt
 801bfec:	4606      	movlt	r6, r0
 801bfee:	f108 080c 	add.w	r8, r8, #12
 801bff2:	45e0      	cmp	r8, ip
 801bff4:	d1f2      	bne.n	801bfdc <Argus_Pba_Apply+0x924>
 801bff6:	2c00      	cmp	r4, #0
 801bff8:	9610      	str	r6, [sp, #64]	@ 0x40
 801bffa:	f2c0 80a1 	blt.w	801c140 <Argus_Pba_Apply+0xa88>
 801bffe:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801c000:	ea4f 10c9 	mov.w	r0, r9, lsl #7
 801c004:	9019      	str	r0, [sp, #100]	@ 0x64
 801c006:	b2e0      	uxtb	r0, r4
 801c008:	fb00 f906 	mul.w	r9, r0, r6
 801c00c:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801c00e:	fb06 f800 	mul.w	r8, r6, r0
 801c012:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801c014:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801c018:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801c01c:	ea4f 2814 	mov.w	r8, r4, lsr #8
 801c020:	fb06 0008 	mla	r0, r6, r8, r0
 801c024:	f3c9 19c0 	ubfx	r9, r9, #7, #1
 801c028:	4481      	add	r9, r0
 801c02a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801c02c:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801c02e:	4581      	cmp	r9, r0
 801c030:	bfac      	ite	ge
 801c032:	44a1      	addge	r9, r4
 801c034:	eb04 0900 	addlt.w	r9, r4, r0
 801c038:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801c03a:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 801c03e:	0a00      	lsrs	r0, r0, #8
 801c040:	fb06 0808 	mla	r8, r6, r8, r0
 801c044:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801c046:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 801c04a:	eb08 0900 	add.w	r9, r8, r0
 801c04e:	9e03      	ldr	r6, [sp, #12]
 801c050:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c052:	4430      	add	r0, r6
 801c054:	0100      	lsls	r0, r0, #4
 801c056:	900e      	str	r0, [sp, #56]	@ 0x38
 801c058:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801c05a:	9802      	ldr	r0, [sp, #8]
 801c05c:	eb06 0800 	add.w	r8, r6, r0
 801c060:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801c062:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 801c066:	4408      	add	r0, r1
 801c068:	f880 a030 	strb.w	sl, [r0, #48]	@ 0x30
 801c06c:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801c06e:	2801      	cmp	r0, #1
 801c070:	d95d      	bls.n	801c12e <Argus_Pba_Apply+0xa76>
 801c072:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801c074:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801c076:	4286      	cmp	r6, r0
 801c078:	dc07      	bgt.n	801c08a <Argus_Pba_Apply+0x9d2>
 801c07a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801c07c:	2800      	cmp	r0, #0
 801c07e:	f47f ac2b 	bne.w	801b8d8 <Argus_Pba_Apply+0x220>
 801c082:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801c084:	2800      	cmp	r0, #0
 801c086:	f43f ac27 	beq.w	801b8d8 <Argus_Pba_Apply+0x220>
 801c08a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801c08c:	2800      	cmp	r0, #0
 801c08e:	f43f ac23 	beq.w	801b8d8 <Argus_Pba_Apply+0x220>
 801c092:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801c094:	01c0      	lsls	r0, r0, #7
 801c096:	4548      	cmp	r0, r9
 801c098:	bfac      	ite	ge
 801c09a:	1824      	addge	r4, r4, r0
 801c09c:	444c      	addlt	r4, r9
 801c09e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801c0a0:	4284      	cmp	r4, r0
 801c0a2:	da01      	bge.n	801c0a8 <Argus_Pba_Apply+0x9f0>
 801c0a4:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801c0a6:	b158      	cbz	r0, 801c0c0 <Argus_Pba_Apply+0xa08>
 801c0a8:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801c0aa:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801c0ac:	4284      	cmp	r4, r0
 801c0ae:	d003      	beq.n	801c0b8 <Argus_Pba_Apply+0xa00>
 801c0b0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801c0b2:	2800      	cmp	r0, #0
 801c0b4:	f43f ac10 	beq.w	801b8d8 <Argus_Pba_Apply+0x220>
 801c0b8:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801c0ba:	2800      	cmp	r0, #0
 801c0bc:	f43f ac0c 	beq.w	801b8d8 <Argus_Pba_Apply+0x220>
 801c0c0:	2002      	movs	r0, #2
 801c0c2:	e580      	b.n	801bbc6 <Argus_Pba_Apply+0x50e>
 801c0c4:	88fb      	ldrh	r3, [r7, #6]
 801c0c6:	f8b1 21b8 	ldrh.w	r2, [r1, #440]	@ 0x1b8
 801c0ca:	f8d1 c1b4 	ldr.w	ip, [r1, #436]	@ 0x1b4
 801c0ce:	9305      	str	r3, [sp, #20]
 801c0d0:	1e03      	subs	r3, r0, #0
 801c0d2:	bf18      	it	ne
 801c0d4:	2301      	movne	r3, #1
 801c0d6:	9301      	str	r3, [sp, #4]
 801c0d8:	e4eb      	b.n	801bab2 <Argus_Pba_Apply+0x3fa>
 801c0da:	0277      	lsls	r7, r6, #9
 801c0dc:	d066      	beq.n	801c1ac <Argus_Pba_Apply+0xaf4>
 801c0de:	ea85 76e5 	eor.w	r6, r5, r5, asr #31
 801c0e2:	2f00      	cmp	r7, #0
 801c0e4:	eba6 76e5 	sub.w	r6, r6, r5, asr #31
 801c0e8:	db76      	blt.n	801c1d8 <Argus_Pba_Apply+0xb20>
 801c0ea:	42b7      	cmp	r7, r6
 801c0ec:	4638      	mov	r0, r7
 801c0ee:	f080 80cf 	bcs.w	801c290 <Argus_Pba_Apply+0xbd8>
 801c0f2:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 801c0f6:	0040      	lsls	r0, r0, #1
 801c0f8:	42b0      	cmp	r0, r6
 801c0fa:	ea4f 0444 	mov.w	r4, r4, lsl #1
 801c0fe:	d3fa      	bcc.n	801c0f6 <Argus_Pba_Apply+0xa3e>
 801c100:	2c00      	cmp	r4, #0
 801c102:	d16f      	bne.n	801c1e4 <Argus_Pba_Apply+0xb2c>
 801c104:	ea97 0f05 	teq	r7, r5
 801c108:	bf54      	ite	pl
 801c10a:	f06f 4c00 	mvnpl.w	ip, #2147483648	@ 0x80000000
 801c10e:	f04f 4c00 	movmi.w	ip, #2147483648	@ 0x80000000
 801c112:	9807      	ldr	r0, [sp, #28]
 801c114:	f1c0 051f 	rsb	r5, r0, #31
 801c118:	fa0c fc05 	lsl.w	ip, ip, r5
 801c11c:	e47c      	b.n	801ba18 <Argus_Pba_Apply+0x360>
 801c11e:	f00a 0040 	and.w	r0, sl, #64	@ 0x40
 801c122:	bb66      	cbnz	r6, 801c17e <Argus_Pba_Apply+0xac6>
 801c124:	3800      	subs	r0, #0
 801c126:	bf18      	it	ne
 801c128:	2001      	movne	r0, #1
 801c12a:	9007      	str	r0, [sp, #28]
 801c12c:	e71c      	b.n	801bf68 <Argus_Pba_Apply+0x8b0>
 801c12e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801c130:	2800      	cmp	r0, #0
 801c132:	f43f add7 	beq.w	801bce4 <Argus_Pba_Apply+0x62c>
 801c136:	9807      	ldr	r0, [sp, #28]
 801c138:	2800      	cmp	r0, #0
 801c13a:	d1bd      	bne.n	801c0b8 <Argus_Pba_Apply+0xa00>
 801c13c:	f7ff bbcc 	b.w	801b8d8 <Argus_Pba_Apply+0x220>
 801c140:	eb04 10c9 	add.w	r0, r4, r9, lsl #7
 801c144:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801c146:	9013      	str	r0, [sp, #76]	@ 0x4c
 801c148:	f1c4 0900 	rsb	r9, r4, #0
 801c14c:	fa5f f089 	uxtb.w	r0, r9
 801c150:	fb06 f000 	mul.w	r0, r6, r0
 801c154:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801c158:	ea4f 2810 	mov.w	r8, r0, lsr #8
 801c15c:	fb06 8809 	mla	r8, r6, r9, r8
 801c160:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 801c164:	4440      	add	r0, r8
 801c166:	f1c0 0900 	rsb	r9, r0, #0
 801c16a:	e770      	b.n	801c04e <Argus_Pba_Apply+0x996>
 801c16c:	4285      	cmp	r5, r0
 801c16e:	d956      	bls.n	801c21e <Argus_Pba_Apply+0xb66>
 801c170:	0864      	lsrs	r4, r4, #1
 801c172:	ea4f 0555 	mov.w	r5, r5, lsr #1
 801c176:	f47f adfa 	bne.w	801bd6e <Argus_Pba_Apply+0x6b6>
 801c17a:	46a4      	mov	ip, r4
 801c17c:	e605      	b.n	801bd8a <Argus_Pba_Apply+0x6d2>
 801c17e:	2800      	cmp	r0, #0
 801c180:	f47f aef2 	bne.w	801bf68 <Argus_Pba_Apply+0x8b0>
 801c184:	9c03      	ldr	r4, [sp, #12]
 801c186:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c188:	9e02      	ldr	r6, [sp, #8]
 801c18a:	4420      	add	r0, r4
 801c18c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801c18e:	0100      	lsls	r0, r0, #4
 801c190:	4434      	add	r4, r6
 801c192:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 801c196:	4408      	add	r0, r1
 801c198:	2400      	movs	r4, #0
 801c19a:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 801c19c:	9015      	str	r0, [sp, #84]	@ 0x54
 801c19e:	f00a 0004 	and.w	r0, sl, #4
 801c1a2:	9011      	str	r0, [sp, #68]	@ 0x44
 801c1a4:	9407      	str	r4, [sp, #28]
 801c1a6:	900f      	str	r0, [sp, #60]	@ 0x3c
 801c1a8:	9412      	str	r4, [sp, #72]	@ 0x48
 801c1aa:	e6f8      	b.n	801bf9e <Argus_Pba_Apply+0x8e6>
 801c1ac:	2d00      	cmp	r5, #0
 801c1ae:	bfac      	ite	ge
 801c1b0:	f06f 4c00 	mvnge.w	ip, #2147483648	@ 0x80000000
 801c1b4:	f04f 4c00 	movlt.w	ip, #2147483648	@ 0x80000000
 801c1b8:	e7ab      	b.n	801c112 <Argus_Pba_Apply+0xa5a>
 801c1ba:	2d00      	cmp	r5, #0
 801c1bc:	bfac      	ite	ge
 801c1be:	f06f 4c00 	mvnge.w	ip, #2147483648	@ 0x80000000
 801c1c2:	f04f 4c00 	movlt.w	ip, #2147483648	@ 0x80000000
 801c1c6:	e68e      	b.n	801bee6 <Argus_Pba_Apply+0x82e>
 801c1c8:	ea97 0f06 	teq	r7, r6
 801c1cc:	4684      	mov	ip, r0
 801c1ce:	f57f ac23 	bpl.w	801ba18 <Argus_Pba_Apply+0x360>
 801c1d2:	f1cc 0c00 	rsb	ip, ip, #0
 801c1d6:	e41f      	b.n	801ba18 <Argus_Pba_Apply+0x360>
 801c1d8:	4278      	negs	r0, r7
 801c1da:	42b0      	cmp	r0, r6
 801c1dc:	bf28      	it	cs
 801c1de:	f44f 3480 	movcs.w	r4, #65536	@ 0x10000
 801c1e2:	d386      	bcc.n	801c0f2 <Argus_Pba_Apply+0xa3a>
 801c1e4:	2800      	cmp	r0, #0
 801c1e6:	db4b      	blt.n	801c280 <Argus_Pba_Apply+0xbc8>
 801c1e8:	f04f 0c00 	mov.w	ip, #0
 801c1ec:	b90e      	cbnz	r6, 801c1f2 <Argus_Pba_Apply+0xb3a>
 801c1ee:	e060      	b.n	801c2b2 <Argus_Pba_Apply+0xbfa>
 801c1f0:	b166      	cbz	r6, 801c20c <Argus_Pba_Apply+0xb54>
 801c1f2:	4286      	cmp	r6, r0
 801c1f4:	bf24      	itt	cs
 801c1f6:	1a36      	subcs	r6, r6, r0
 801c1f8:	ea4c 0c04 	orrcs.w	ip, ip, r4
 801c1fc:	0864      	lsrs	r4, r4, #1
 801c1fe:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801c202:	d1f5      	bne.n	801c1f0 <Argus_Pba_Apply+0xb38>
 801c204:	42b0      	cmp	r0, r6
 801c206:	d801      	bhi.n	801c20c <Argus_Pba_Apply+0xb54>
 801c208:	f10c 0c01 	add.w	ip, ip, #1
 801c20c:	ea97 0f05 	teq	r7, r5
 801c210:	d454      	bmi.n	801c2bc <Argus_Pba_Apply+0xc04>
 801c212:	f1bc 0f00 	cmp.w	ip, #0
 801c216:	bfb8      	it	lt
 801c218:	f06f 4c00 	mvnlt.w	ip, #2147483648	@ 0x80000000
 801c21c:	e779      	b.n	801c112 <Argus_Pba_Apply+0xa5a>
 801c21e:	46a4      	mov	ip, r4
 801c220:	e5b7      	b.n	801bd92 <Argus_Pba_Apply+0x6da>
 801c222:	2001      	movs	r0, #1
 801c224:	940f      	str	r4, [sp, #60]	@ 0x3c
 801c226:	9012      	str	r0, [sp, #72]	@ 0x48
 801c228:	e6b9      	b.n	801bf9e <Argus_Pba_Apply+0x8e6>
 801c22a:	2800      	cmp	r0, #0
 801c22c:	da06      	bge.n	801c23c <Argus_Pba_Apply+0xb84>
 801c22e:	4287      	cmp	r7, r0
 801c230:	d031      	beq.n	801c296 <Argus_Pba_Apply+0xbde>
 801c232:	f03c 4400 	bics.w	r4, ip, #2147483648	@ 0x80000000
 801c236:	f02e 4000 	bic.w	r0, lr, #2147483648	@ 0x80000000
 801c23a:	d04b      	beq.n	801c2d4 <Argus_Pba_Apply+0xc1c>
 801c23c:	f04f 0c00 	mov.w	ip, #0
 801c240:	e000      	b.n	801c244 <Argus_Pba_Apply+0xb8c>
 801c242:	b167      	cbz	r7, 801c25e <Argus_Pba_Apply+0xba6>
 801c244:	4287      	cmp	r7, r0
 801c246:	bf24      	itt	cs
 801c248:	1a3f      	subcs	r7, r7, r0
 801c24a:	ea4c 0c04 	orrcs.w	ip, ip, r4
 801c24e:	0864      	lsrs	r4, r4, #1
 801c250:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801c254:	d1f5      	bne.n	801c242 <Argus_Pba_Apply+0xb8a>
 801c256:	42b8      	cmp	r0, r7
 801c258:	d801      	bhi.n	801c25e <Argus_Pba_Apply+0xba6>
 801c25a:	f10c 0c01 	add.w	ip, ip, #1
 801c25e:	ea96 0f05 	teq	r6, r5
 801c262:	d423      	bmi.n	801c2ac <Argus_Pba_Apply+0xbf4>
 801c264:	f1bc 0f00 	cmp.w	ip, #0
 801c268:	bfb8      	it	lt
 801c26a:	f06f 4c00 	mvnlt.w	ip, #2147483648	@ 0x80000000
 801c26e:	e63a      	b.n	801bee6 <Argus_Pba_Apply+0x82e>
 801c270:	f04f 34ff 	mov.w	r4, #4294967295
 801c274:	f06f 066d 	mvn.w	r6, #109	@ 0x6d
 801c278:	e4b5      	b.n	801bbe6 <Argus_Pba_Apply+0x52e>
 801c27a:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 801c27e:	e576      	b.n	801bd6e <Argus_Pba_Apply+0x6b6>
 801c280:	42b0      	cmp	r0, r6
 801c282:	d91e      	bls.n	801c2c2 <Argus_Pba_Apply+0xc0a>
 801c284:	0864      	lsrs	r4, r4, #1
 801c286:	ea4f 0050 	mov.w	r0, r0, lsr #1
 801c28a:	d1ad      	bne.n	801c1e8 <Argus_Pba_Apply+0xb30>
 801c28c:	46a4      	mov	ip, r4
 801c28e:	e7b9      	b.n	801c204 <Argus_Pba_Apply+0xb4c>
 801c290:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 801c294:	e7a8      	b.n	801c1e8 <Argus_Pba_Apply+0xb30>
 801c296:	46a4      	mov	ip, r4
 801c298:	e7e1      	b.n	801c25e <Argus_Pba_Apply+0xba6>
 801c29a:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 801c29e:	2f00      	cmp	r7, #0
 801c2a0:	d1cc      	bne.n	801c23c <Argus_Pba_Apply+0xb84>
 801c2a2:	ea96 0f05 	teq	r6, r5
 801c2a6:	46bc      	mov	ip, r7
 801c2a8:	f57f ae1d 	bpl.w	801bee6 <Argus_Pba_Apply+0x82e>
 801c2ac:	f1cc 0c00 	rsb	ip, ip, #0
 801c2b0:	e619      	b.n	801bee6 <Argus_Pba_Apply+0x82e>
 801c2b2:	ea97 0f05 	teq	r7, r5
 801c2b6:	46b4      	mov	ip, r6
 801c2b8:	f57f af2b 	bpl.w	801c112 <Argus_Pba_Apply+0xa5a>
 801c2bc:	f1cc 0c00 	rsb	ip, ip, #0
 801c2c0:	e727      	b.n	801c112 <Argus_Pba_Apply+0xa5a>
 801c2c2:	46a4      	mov	ip, r4
 801c2c4:	e7a2      	b.n	801c20c <Argus_Pba_Apply+0xb54>
 801c2c6:	88fa      	ldrh	r2, [r7, #6]
 801c2c8:	9205      	str	r2, [sp, #20]
 801c2ca:	9301      	str	r3, [sp, #4]
 801c2cc:	f8b1 21b8 	ldrh.w	r2, [r1, #440]	@ 0x1b8
 801c2d0:	f7ff bbea 	b.w	801baa8 <Argus_Pba_Apply+0x3f0>
 801c2d4:	46a4      	mov	ip, r4
 801c2d6:	e7be      	b.n	801c256 <Argus_Pba_Apply+0xb9e>

0801c2d8 <Argus_Pba_ApplyPreFilter>:
 801c2d8:	68c3      	ldr	r3, [r0, #12]
 801c2da:	f501 70d4 	add.w	r0, r1, #424	@ 0x1a8
 801c2de:	699a      	ldr	r2, [r3, #24]
 801c2e0:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 801c2e4:	f012 0f01 	tst.w	r2, #1
 801c2e8:	7a19      	ldrb	r1, [r3, #8]
 801c2ea:	f103 030c 	add.w	r3, r3, #12
 801c2ee:	d008      	beq.n	801c302 <Argus_Pba_ApplyPreFilter+0x2a>
 801c2f0:	f041 0110 	orr.w	r1, r1, #16
 801c2f4:	4283      	cmp	r3, r0
 801c2f6:	f803 1c04 	strb.w	r1, [r3, #-4]
 801c2fa:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801c2fe:	d1f1      	bne.n	801c2e4 <Argus_Pba_ApplyPreFilter+0xc>
 801c300:	4770      	bx	lr
 801c302:	f021 0110 	bic.w	r1, r1, #16
 801c306:	4283      	cmp	r3, r0
 801c308:	f803 1c04 	strb.w	r1, [r3, #-4]
 801c30c:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801c310:	d1e8      	bne.n	801c2e4 <Argus_Pba_ApplyPreFilter+0xc>
 801c312:	4770      	bx	lr

0801c314 <Argus_Eval_Trapezoidal>:
 801c314:	684a      	ldr	r2, [r1, #4]
 801c316:	2a00      	cmp	r2, #0
 801c318:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c31a:	dd41      	ble.n	801c3a0 <Argus_Eval_Trapezoidal+0x8c>
 801c31c:	680c      	ldr	r4, [r1, #0]
 801c31e:	2c00      	cmp	r4, #0
 801c320:	db2a      	blt.n	801c378 <Argus_Eval_Trapezoidal+0x64>
 801c322:	42a2      	cmp	r2, r4
 801c324:	4616      	mov	r6, r2
 801c326:	bfb8      	it	lt
 801c328:	4626      	movlt	r6, r4
 801c32a:	4635      	mov	r5, r6
 801c32c:	1aa4      	subs	r4, r4, r2
 801c32e:	f44f 3740 	mov.w	r7, #196608	@ 0x30000
 801c332:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
 801c336:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 801c33a:	428d      	cmp	r5, r1
 801c33c:	f080 8087 	bcs.w	801c44e <Argus_Eval_Trapezoidal+0x13a>
 801c340:	462a      	mov	r2, r5
 801c342:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801c346:	4696      	mov	lr, r2
 801c348:	0052      	lsls	r2, r2, #1
 801c34a:	428a      	cmp	r2, r1
 801c34c:	469c      	mov	ip, r3
 801c34e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801c352:	d3f8      	bcc.n	801c346 <Argus_Eval_Trapezoidal+0x32>
 801c354:	bb8b      	cbnz	r3, 801c3ba <Argus_Eval_Trapezoidal+0xa6>
 801c356:	ea94 0f06 	teq	r4, r6
 801c35a:	f100 8082 	bmi.w	801c462 <Argus_Eval_Trapezoidal+0x14e>
 801c35e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801c362:	f3c5 23c0 	ubfx	r3, r5, #11, #1
 801c366:	eb13 3315 	adds.w	r3, r3, r5, lsr #12
 801c36a:	d10e      	bne.n	801c38a <Argus_Eval_Trapezoidal+0x76>
 801c36c:	7a02      	ldrb	r2, [r0, #8]
 801c36e:	6043      	str	r3, [r0, #4]
 801c370:	f042 0308 	orr.w	r3, r2, #8
 801c374:	7203      	strb	r3, [r0, #8]
 801c376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c378:	4266      	negs	r6, r4
 801c37a:	4296      	cmp	r6, r2
 801c37c:	bfb8      	it	lt
 801c37e:	4616      	movlt	r6, r2
 801c380:	4635      	mov	r5, r6
 801c382:	4414      	add	r4, r2
 801c384:	f44f 3780 	mov.w	r7, #65536	@ 0x10000
 801c388:	e7d3      	b.n	801c332 <Argus_Eval_Trapezoidal+0x1e>
 801c38a:	f64f 71f0 	movw	r1, #65520	@ 0xfff0
 801c38e:	428b      	cmp	r3, r1
 801c390:	d946      	bls.n	801c420 <Argus_Eval_Trapezoidal+0x10c>
 801c392:	7a03      	ldrb	r3, [r0, #8]
 801c394:	8082      	strh	r2, [r0, #4]
 801c396:	f043 0302 	orr.w	r3, r3, #2
 801c39a:	80c1      	strh	r1, [r0, #6]
 801c39c:	7203      	strb	r3, [r0, #8]
 801c39e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c3a0:	680b      	ldr	r3, [r1, #0]
 801c3a2:	2b00      	cmp	r3, #0
 801c3a4:	dd3f      	ble.n	801c426 <Argus_Eval_Trapezoidal+0x112>
 801c3a6:	4252      	negs	r2, r2
 801c3a8:	4293      	cmp	r3, r2
 801c3aa:	461e      	mov	r6, r3
 801c3ac:	bfb8      	it	lt
 801c3ae:	4616      	movlt	r6, r2
 801c3b0:	4635      	mov	r5, r6
 801c3b2:	1ad4      	subs	r4, r2, r3
 801c3b4:	f44f 27a0 	mov.w	r7, #327680	@ 0x50000
 801c3b8:	e7bb      	b.n	801c332 <Argus_Eval_Trapezoidal+0x1e>
 801c3ba:	2a00      	cmp	r2, #0
 801c3bc:	da05      	bge.n	801c3ca <Argus_Eval_Trapezoidal+0xb6>
 801c3be:	428a      	cmp	r2, r1
 801c3c0:	d04b      	beq.n	801c45a <Argus_Eval_Trapezoidal+0x146>
 801c3c2:	f03c 4300 	bics.w	r3, ip, #2147483648	@ 0x80000000
 801c3c6:	4672      	mov	r2, lr
 801c3c8:	d049      	beq.n	801c45e <Argus_Eval_Trapezoidal+0x14a>
 801c3ca:	f04f 0c00 	mov.w	ip, #0
 801c3ce:	e000      	b.n	801c3d2 <Argus_Eval_Trapezoidal+0xbe>
 801c3d0:	b161      	cbz	r1, 801c3ec <Argus_Eval_Trapezoidal+0xd8>
 801c3d2:	4291      	cmp	r1, r2
 801c3d4:	bf24      	itt	cs
 801c3d6:	1a89      	subcs	r1, r1, r2
 801c3d8:	ea4c 0c03 	orrcs.w	ip, ip, r3
 801c3dc:	085b      	lsrs	r3, r3, #1
 801c3de:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801c3e2:	d1f5      	bne.n	801c3d0 <Argus_Eval_Trapezoidal+0xbc>
 801c3e4:	428a      	cmp	r2, r1
 801c3e6:	d801      	bhi.n	801c3ec <Argus_Eval_Trapezoidal+0xd8>
 801c3e8:	f10c 0c01 	add.w	ip, ip, #1
 801c3ec:	ea94 0f06 	teq	r4, r6
 801c3f0:	d40c      	bmi.n	801c40c <Argus_Eval_Trapezoidal+0xf8>
 801c3f2:	f1bc 0f00 	cmp.w	ip, #0
 801c3f6:	dbb2      	blt.n	801c35e <Argus_Eval_Trapezoidal+0x4a>
 801c3f8:	4467      	add	r7, ip
 801c3fa:	f3c7 0380 	ubfx	r3, r7, #2, #1
 801c3fe:	eb03 02d7 	add.w	r2, r3, r7, lsr #3
 801c402:	e7ae      	b.n	801c362 <Argus_Eval_Trapezoidal+0x4e>
 801c404:	ea94 0f06 	teq	r4, r6
 801c408:	d5f7      	bpl.n	801c3fa <Argus_Eval_Trapezoidal+0xe6>
 801c40a:	468c      	mov	ip, r1
 801c40c:	ebb7 070c 	subs.w	r7, r7, ip
 801c410:	d5f3      	bpl.n	801c3fa <Argus_Eval_Trapezoidal+0xe6>
 801c412:	427f      	negs	r7, r7
 801c414:	f3c7 0280 	ubfx	r2, r7, #2, #1
 801c418:	eb02 02d7 	add.w	r2, r2, r7, lsr #3
 801c41c:	4252      	negs	r2, r2
 801c41e:	e7a0      	b.n	801c362 <Argus_Eval_Trapezoidal+0x4e>
 801c420:	8082      	strh	r2, [r0, #4]
 801c422:	80c3      	strh	r3, [r0, #6]
 801c424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c426:	429a      	cmp	r2, r3
 801c428:	da05      	bge.n	801c436 <Argus_Eval_Trapezoidal+0x122>
 801c42a:	4256      	negs	r6, r2
 801c42c:	4635      	mov	r5, r6
 801c42e:	1ad4      	subs	r4, r2, r3
 801c430:	f44f 27e0 	mov.w	r7, #458752	@ 0x70000
 801c434:	e77d      	b.n	801c332 <Argus_Eval_Trapezoidal+0x1e>
 801c436:	425d      	negs	r5, r3
 801c438:	462e      	mov	r6, r5
 801c43a:	1ad4      	subs	r4, r2, r3
 801c43c:	b9cb      	cbnz	r3, 801c472 <Argus_Eval_Trapezoidal+0x15e>
 801c43e:	4a0e      	ldr	r2, [pc, #56]	@ (801c478 <Argus_Eval_Trapezoidal+0x164>)
 801c440:	490e      	ldr	r1, [pc, #56]	@ (801c47c <Argus_Eval_Trapezoidal+0x168>)
 801c442:	461d      	mov	r5, r3
 801c444:	ea12 0224 	ands.w	r2, r2, r4, asr #32
 801c448:	bf38      	it	cc
 801c44a:	460a      	movcc	r2, r1
 801c44c:	e789      	b.n	801c362 <Argus_Eval_Trapezoidal+0x4e>
 801c44e:	2900      	cmp	r1, #0
 801c450:	d0d8      	beq.n	801c404 <Argus_Eval_Trapezoidal+0xf0>
 801c452:	462a      	mov	r2, r5
 801c454:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801c458:	e7b7      	b.n	801c3ca <Argus_Eval_Trapezoidal+0xb6>
 801c45a:	469c      	mov	ip, r3
 801c45c:	e7c6      	b.n	801c3ec <Argus_Eval_Trapezoidal+0xd8>
 801c45e:	469c      	mov	ip, r3
 801c460:	e7c0      	b.n	801c3e4 <Argus_Eval_Trapezoidal+0xd0>
 801c462:	f1c7 4700 	rsb	r7, r7, #2147483648	@ 0x80000000
 801c466:	f3c7 0280 	ubfx	r2, r7, #2, #1
 801c46a:	eb02 02d7 	add.w	r2, r2, r7, lsr #3
 801c46e:	4252      	negs	r2, r2
 801c470:	e777      	b.n	801c362 <Argus_Eval_Trapezoidal+0x4e>
 801c472:	f44f 27e0 	mov.w	r7, #458752	@ 0x70000
 801c476:	e75c      	b.n	801c332 <Argus_Eval_Trapezoidal+0x1e>
 801c478:	f000e000 	.word	0xf000e000
 801c47c:	1000e000 	.word	0x1000e000

0801c480 <Argus_Eval_Triangular>:
 801c480:	e9d1 2300 	ldrd	r2, r3, [r1]
 801c484:	2b00      	cmp	r3, #0
 801c486:	b530      	push	{r4, r5, lr}
 801c488:	dd6f      	ble.n	801c56a <Argus_Eval_Triangular+0xea>
 801c48a:	2a00      	cmp	r2, #0
 801c48c:	db29      	blt.n	801c4e2 <Argus_Eval_Triangular+0x62>
 801c48e:	eb02 0c03 	add.w	ip, r2, r3
 801c492:	eba2 0e03 	sub.w	lr, r2, r3
 801c496:	f44f 3540 	mov.w	r5, #196608	@ 0x30000
 801c49a:	ea8e 71ee 	eor.w	r1, lr, lr, asr #31
 801c49e:	f1bc 0f00 	cmp.w	ip, #0
 801c4a2:	eba1 71ee 	sub.w	r1, r1, lr, asr #31
 801c4a6:	db29      	blt.n	801c4fc <Argus_Eval_Triangular+0x7c>
 801c4a8:	4561      	cmp	r1, ip
 801c4aa:	4663      	mov	r3, ip
 801c4ac:	f240 808b 	bls.w	801c5c6 <Argus_Eval_Triangular+0x146>
 801c4b0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801c4b4:	005b      	lsls	r3, r3, #1
 801c4b6:	428b      	cmp	r3, r1
 801c4b8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801c4bc:	d3fa      	bcc.n	801c4b4 <Argus_Eval_Triangular+0x34>
 801c4be:	bb22      	cbnz	r2, 801c50a <Argus_Eval_Triangular+0x8a>
 801c4c0:	ea9e 0f0c 	teq	lr, ip
 801c4c4:	f100 8082 	bmi.w	801c5cc <Argus_Eval_Triangular+0x14c>
 801c4c8:	f04f 5480 	mov.w	r4, #268435456	@ 0x10000000
 801c4cc:	f3cc 3300 	ubfx	r3, ip, #12, #1
 801c4d0:	eb13 335c 	adds.w	r3, r3, ip, lsr #13
 801c4d4:	d13e      	bne.n	801c554 <Argus_Eval_Triangular+0xd4>
 801c4d6:	7a02      	ldrb	r2, [r0, #8]
 801c4d8:	6043      	str	r3, [r0, #4]
 801c4da:	f042 0308 	orr.w	r3, r2, #8
 801c4de:	7203      	strb	r3, [r0, #8]
 801c4e0:	bd30      	pop	{r4, r5, pc}
 801c4e2:	eb03 0e02 	add.w	lr, r3, r2
 801c4e6:	eba3 0c02 	sub.w	ip, r3, r2
 801c4ea:	ea8e 71ee 	eor.w	r1, lr, lr, asr #31
 801c4ee:	f1bc 0f00 	cmp.w	ip, #0
 801c4f2:	f44f 3580 	mov.w	r5, #65536	@ 0x10000
 801c4f6:	eba1 71ee 	sub.w	r1, r1, lr, asr #31
 801c4fa:	dad5      	bge.n	801c4a8 <Argus_Eval_Triangular+0x28>
 801c4fc:	f1cc 0300 	rsb	r3, ip, #0
 801c500:	428b      	cmp	r3, r1
 801c502:	bf28      	it	cs
 801c504:	f44f 3280 	movcs.w	r2, #65536	@ 0x10000
 801c508:	d3d2      	bcc.n	801c4b0 <Argus_Eval_Triangular+0x30>
 801c50a:	2b00      	cmp	r3, #0
 801c50c:	db49      	blt.n	801c5a2 <Argus_Eval_Triangular+0x122>
 801c50e:	460c      	mov	r4, r1
 801c510:	b151      	cbz	r1, 801c528 <Argus_Eval_Triangular+0xa8>
 801c512:	2400      	movs	r4, #0
 801c514:	e000      	b.n	801c518 <Argus_Eval_Triangular+0x98>
 801c516:	b139      	cbz	r1, 801c528 <Argus_Eval_Triangular+0xa8>
 801c518:	4299      	cmp	r1, r3
 801c51a:	bf24      	itt	cs
 801c51c:	1ac9      	subcs	r1, r1, r3
 801c51e:	4314      	orrcs	r4, r2
 801c520:	0852      	lsrs	r2, r2, #1
 801c522:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801c526:	d1f6      	bne.n	801c516 <Argus_Eval_Triangular+0x96>
 801c528:	4299      	cmp	r1, r3
 801c52a:	d300      	bcc.n	801c52e <Argus_Eval_Triangular+0xae>
 801c52c:	3401      	adds	r4, #1
 801c52e:	ea9e 0f0c 	teq	lr, ip
 801c532:	d442      	bmi.n	801c5ba <Argus_Eval_Triangular+0x13a>
 801c534:	2c00      	cmp	r4, #0
 801c536:	dbc7      	blt.n	801c4c8 <Argus_Eval_Triangular+0x48>
 801c538:	1964      	adds	r4, r4, r5
 801c53a:	d54c      	bpl.n	801c5d6 <Argus_Eval_Triangular+0x156>
 801c53c:	4264      	negs	r4, r4
 801c53e:	f3c4 0380 	ubfx	r3, r4, #2, #1
 801c542:	eb03 04d4 	add.w	r4, r3, r4, lsr #3
 801c546:	f3cc 3300 	ubfx	r3, ip, #12, #1
 801c54a:	eb13 335c 	adds.w	r3, r3, ip, lsr #13
 801c54e:	f1c4 0400 	rsb	r4, r4, #0
 801c552:	d0c0      	beq.n	801c4d6 <Argus_Eval_Triangular+0x56>
 801c554:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 801c558:	4293      	cmp	r3, r2
 801c55a:	d91f      	bls.n	801c59c <Argus_Eval_Triangular+0x11c>
 801c55c:	7a03      	ldrb	r3, [r0, #8]
 801c55e:	8084      	strh	r4, [r0, #4]
 801c560:	f043 0302 	orr.w	r3, r3, #2
 801c564:	80c2      	strh	r2, [r0, #6]
 801c566:	7203      	strb	r3, [r0, #8]
 801c568:	bd30      	pop	{r4, r5, pc}
 801c56a:	2a00      	cmp	r2, #0
 801c56c:	dd08      	ble.n	801c580 <Argus_Eval_Triangular+0x100>
 801c56e:	f1c3 0e00 	rsb	lr, r3, #0
 801c572:	eba2 0c03 	sub.w	ip, r2, r3
 801c576:	ebae 0e02 	sub.w	lr, lr, r2
 801c57a:	f44f 25a0 	mov.w	r5, #327680	@ 0x50000
 801c57e:	e78c      	b.n	801c49a <Argus_Eval_Triangular+0x1a>
 801c580:	f1c3 0c00 	rsb	ip, r3, #0
 801c584:	ebbc 0c02 	subs.w	ip, ip, r2
 801c588:	eba3 0e02 	sub.w	lr, r3, r2
 801c58c:	d128      	bne.n	801c5e0 <Argus_Eval_Triangular+0x160>
 801c58e:	4c16      	ldr	r4, [pc, #88]	@ (801c5e8 <Argus_Eval_Triangular+0x168>)
 801c590:	4b16      	ldr	r3, [pc, #88]	@ (801c5ec <Argus_Eval_Triangular+0x16c>)
 801c592:	ea14 042e 	ands.w	r4, r4, lr, asr #32
 801c596:	bf38      	it	cc
 801c598:	461c      	movcc	r4, r3
 801c59a:	e797      	b.n	801c4cc <Argus_Eval_Triangular+0x4c>
 801c59c:	8084      	strh	r4, [r0, #4]
 801c59e:	80c3      	strh	r3, [r0, #6]
 801c5a0:	bd30      	pop	{r4, r5, pc}
 801c5a2:	4299      	cmp	r1, r3
 801c5a4:	d20b      	bcs.n	801c5be <Argus_Eval_Triangular+0x13e>
 801c5a6:	0852      	lsrs	r2, r2, #1
 801c5a8:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801c5ac:	d009      	beq.n	801c5c2 <Argus_Eval_Triangular+0x142>
 801c5ae:	2900      	cmp	r1, #0
 801c5b0:	d1af      	bne.n	801c512 <Argus_Eval_Triangular+0x92>
 801c5b2:	ea9e 0f0c 	teq	lr, ip
 801c5b6:	460c      	mov	r4, r1
 801c5b8:	d5be      	bpl.n	801c538 <Argus_Eval_Triangular+0xb8>
 801c5ba:	4264      	negs	r4, r4
 801c5bc:	e7bc      	b.n	801c538 <Argus_Eval_Triangular+0xb8>
 801c5be:	4614      	mov	r4, r2
 801c5c0:	e7b5      	b.n	801c52e <Argus_Eval_Triangular+0xae>
 801c5c2:	4614      	mov	r4, r2
 801c5c4:	e7b0      	b.n	801c528 <Argus_Eval_Triangular+0xa8>
 801c5c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801c5ca:	e7a0      	b.n	801c50e <Argus_Eval_Triangular+0x8e>
 801c5cc:	f1c5 4400 	rsb	r4, r5, #2147483648	@ 0x80000000
 801c5d0:	08e4      	lsrs	r4, r4, #3
 801c5d2:	4264      	negs	r4, r4
 801c5d4:	e77a      	b.n	801c4cc <Argus_Eval_Triangular+0x4c>
 801c5d6:	f3c4 0380 	ubfx	r3, r4, #2, #1
 801c5da:	eb03 04d4 	add.w	r4, r3, r4, lsr #3
 801c5de:	e775      	b.n	801c4cc <Argus_Eval_Triangular+0x4c>
 801c5e0:	f44f 25e0 	mov.w	r5, #458752	@ 0x70000
 801c5e4:	e759      	b.n	801c49a <Argus_Eval_Triangular+0x1a>
 801c5e6:	bf00      	nop
 801c5e8:	f000e000 	.word	0xf000e000
 801c5ec:	1000e000 	.word	0x1000e000

0801c5f0 <fp_div16.part.0>:
 801c5f0:	b410      	push	{r4}
 801c5f2:	2900      	cmp	r1, #0
 801c5f4:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
 801c5f8:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
 801c5fc:	db14      	blt.n	801c628 <fp_div16.part.0+0x38>
 801c5fe:	42a1      	cmp	r1, r4
 801c600:	460a      	mov	r2, r1
 801c602:	d248      	bcs.n	801c696 <fp_div16.part.0+0xa6>
 801c604:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801c608:	0052      	lsls	r2, r2, #1
 801c60a:	42a2      	cmp	r2, r4
 801c60c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801c610:	d3fa      	bcc.n	801c608 <fp_div16.part.0+0x18>
 801c612:	b97b      	cbnz	r3, 801c634 <fp_div16.part.0+0x44>
 801c614:	ea90 0f01 	teq	r0, r1
 801c618:	bf54      	ite	pl
 801c61a:	f06f 4000 	mvnpl.w	r0, #2147483648	@ 0x80000000
 801c61e:	f04f 4000 	movmi.w	r0, #2147483648	@ 0x80000000
 801c622:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c626:	4770      	bx	lr
 801c628:	424a      	negs	r2, r1
 801c62a:	42a2      	cmp	r2, r4
 801c62c:	bf28      	it	cs
 801c62e:	f44f 3380 	movcs.w	r3, #65536	@ 0x10000
 801c632:	d3e7      	bcc.n	801c604 <fp_div16.part.0+0x14>
 801c634:	2a00      	cmp	r2, #0
 801c636:	db1d      	blt.n	801c674 <fp_div16.part.0+0x84>
 801c638:	f04f 0c00 	mov.w	ip, #0
 801c63c:	b90c      	cbnz	r4, 801c642 <fp_div16.part.0+0x52>
 801c63e:	e02d      	b.n	801c69c <fp_div16.part.0+0xac>
 801c640:	b164      	cbz	r4, 801c65c <fp_div16.part.0+0x6c>
 801c642:	4294      	cmp	r4, r2
 801c644:	bf24      	itt	cs
 801c646:	1aa4      	subcs	r4, r4, r2
 801c648:	ea4c 0c03 	orrcs.w	ip, ip, r3
 801c64c:	085b      	lsrs	r3, r3, #1
 801c64e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 801c652:	d1f5      	bne.n	801c640 <fp_div16.part.0+0x50>
 801c654:	42a2      	cmp	r2, r4
 801c656:	d801      	bhi.n	801c65c <fp_div16.part.0+0x6c>
 801c658:	f10c 0c01 	add.w	ip, ip, #1
 801c65c:	ea90 0f01 	teq	r0, r1
 801c660:	d40e      	bmi.n	801c680 <fp_div16.part.0+0x90>
 801c662:	f1bc 0f00 	cmp.w	ip, #0
 801c666:	bfac      	ite	ge
 801c668:	4660      	movge	r0, ip
 801c66a:	f06f 4000 	mvnlt.w	r0, #2147483648	@ 0x80000000
 801c66e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c672:	4770      	bx	lr
 801c674:	4294      	cmp	r4, r2
 801c676:	d308      	bcc.n	801c68a <fp_div16.part.0+0x9a>
 801c678:	ea90 0f01 	teq	r0, r1
 801c67c:	469c      	mov	ip, r3
 801c67e:	d5f0      	bpl.n	801c662 <fp_div16.part.0+0x72>
 801c680:	f1cc 0000 	rsb	r0, ip, #0
 801c684:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c688:	4770      	bx	lr
 801c68a:	085b      	lsrs	r3, r3, #1
 801c68c:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801c690:	d1d2      	bne.n	801c638 <fp_div16.part.0+0x48>
 801c692:	469c      	mov	ip, r3
 801c694:	e7de      	b.n	801c654 <fp_div16.part.0+0x64>
 801c696:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801c69a:	e7cd      	b.n	801c638 <fp_div16.part.0+0x48>
 801c69c:	4620      	mov	r0, r4
 801c69e:	e7c0      	b.n	801c622 <fp_div16.part.0+0x32>

0801c6a0 <Argus_Dca_Init>:
 801c6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c6a2:	460f      	mov	r7, r1
 801c6a4:	b083      	sub	sp, #12
 801c6a6:	4616      	mov	r6, r2
 801c6a8:	2100      	movs	r1, #0
 801c6aa:	226c      	movs	r2, #108	@ 0x6c
 801c6ac:	4604      	mov	r4, r0
 801c6ae:	461d      	mov	r5, r3
 801c6b0:	f00e fc7b 	bl	802afaa <memset>
 801c6b4:	a10e      	add	r1, pc, #56	@ (adr r1, 801c6f0 <Argus_Dca_Init+0x50>)
 801c6b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c6ba:	e9cd 0100 	strd	r0, r1, [sp]
 801c6be:	4b0a      	ldr	r3, [pc, #40]	@ (801c6e8 <Argus_Dca_Init+0x48>)
 801c6c0:	f8c4 303f 	str.w	r3, [r4, #63]	@ 0x3f
 801c6c4:	46ec      	mov	ip, sp
 801c6c6:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 801c6ca:	9b08      	ldr	r3, [sp, #32]
 801c6cc:	65e3      	str	r3, [r4, #92]	@ 0x5c
 801c6ce:	4b07      	ldr	r3, [pc, #28]	@ (801c6ec <Argus_Dca_Init+0x4c>)
 801c6d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c6d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801c6d6:	6667      	str	r7, [r4, #100]	@ 0x64
 801c6d8:	66a6      	str	r6, [r4, #104]	@ 0x68
 801c6da:	6625      	str	r5, [r4, #96]	@ 0x60
 801c6dc:	83a3      	strh	r3, [r4, #28]
 801c6de:	6460      	str	r0, [r4, #68]	@ 0x44
 801c6e0:	64a1      	str	r1, [r4, #72]	@ 0x48
 801c6e2:	b003      	add	sp, #12
 801c6e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c6e6:	bf00      	nop
 801c6e8:	28221c0e 	.word	0x28221c0e
 801c6ec:	0001ffff 	.word	0x0001ffff
 801c6f0:	d2a0b860 	.word	0xd2a0b860
 801c6f4:	e920dde0 	.word	0xe920dde0

0801c6f8 <Argus_Dca_CheckCfg>:
 801c6f8:	b508      	push	{r3, lr}
 801c6fa:	f990 2000 	ldrsb.w	r2, [r0]
 801c6fe:	1c53      	adds	r3, r2, #1
 801c700:	b2db      	uxtb	r3, r3
 801c702:	2b02      	cmp	r3, #2
 801c704:	f200 8107 	bhi.w	801c916 <Argus_Dca_CheckCfg+0x21e>
 801c708:	f891 c00a 	ldrb.w	ip, [r1, #10]
 801c70c:	7a0b      	ldrb	r3, [r1, #8]
 801c70e:	f1ac 0e02 	sub.w	lr, ip, #2
 801c712:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 801c716:	f200 80f7 	bhi.w	801c908 <Argus_Dca_CheckCfg+0x210>
 801c71a:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 801c71e:	029b      	lsls	r3, r3, #10
 801c720:	2b00      	cmp	r3, #0
 801c722:	d006      	beq.n	801c732 <Argus_Dca_CheckCfg+0x3a>
 801c724:	db02      	blt.n	801c72c <Argus_Dca_CheckCfg+0x34>
 801c726:	459c      	cmp	ip, r3
 801c728:	d903      	bls.n	801c732 <Argus_Dca_CheckCfg+0x3a>
 801c72a:	e7fe      	b.n	801c72a <Argus_Dca_CheckCfg+0x32>
 801c72c:	425b      	negs	r3, r3
 801c72e:	459c      	cmp	ip, r3
 801c730:	d8fb      	bhi.n	801c72a <Argus_Dca_CheckCfg+0x32>
 801c732:	2a01      	cmp	r2, #1
 801c734:	d026      	beq.n	801c784 <Argus_Dca_CheckCfg+0x8c>
 801c736:	3201      	adds	r2, #1
 801c738:	d001      	beq.n	801c73e <Argus_Dca_CheckCfg+0x46>
 801c73a:	2000      	movs	r0, #0
 801c73c:	bd08      	pop	{r3, pc}
 801c73e:	8983      	ldrh	r3, [r0, #12]
 801c740:	2b40      	cmp	r3, #64	@ 0x40
 801c742:	f200 808a 	bhi.w	801c85a <Argus_Dca_CheckCfg+0x162>
 801c746:	3b01      	subs	r3, #1
 801c748:	b29b      	uxth	r3, r3
 801c74a:	f64f 72bf 	movw	r2, #65471	@ 0xffbf
 801c74e:	4293      	cmp	r3, r2
 801c750:	f200 8110 	bhi.w	801c974 <Argus_Dca_CheckCfg+0x27c>
 801c754:	7ac3      	ldrb	r3, [r0, #11]
 801c756:	2b02      	cmp	r3, #2
 801c758:	f200 80b7 	bhi.w	801c8ca <Argus_Dca_CheckCfg+0x1d2>
 801c75c:	7d03      	ldrb	r3, [r0, #20]
 801c75e:	2b03      	cmp	r3, #3
 801c760:	f200 8120 	bhi.w	801c9a4 <Argus_Dca_CheckCfg+0x2ac>
 801c764:	f891 308e 	ldrb.w	r3, [r1, #142]	@ 0x8e
 801c768:	2b02      	cmp	r3, #2
 801c76a:	f000 80a9 	beq.w	801c8c0 <Argus_Dca_CheckCfg+0x1c8>
 801c76e:	2b03      	cmp	r3, #3
 801c770:	f000 8094 	beq.w	801c89c <Argus_Dca_CheckCfg+0x1a4>
 801c774:	2b01      	cmp	r3, #1
 801c776:	d073      	beq.n	801c860 <Argus_Dca_CheckCfg+0x168>
 801c778:	4894      	ldr	r0, [pc, #592]	@ (801c9cc <Argus_Dca_CheckCfg+0x2d4>)
 801c77a:	f7e9 fec7 	bl	800650c <print>
 801c77e:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801c782:	bd08      	pop	{r3, pc}
 801c784:	7843      	ldrb	r3, [r0, #1]
 801c786:	2b00      	cmp	r3, #0
 801c788:	f000 80b2 	beq.w	801c8f0 <Argus_Dca_CheckCfg+0x1f8>
 801c78c:	7882      	ldrb	r2, [r0, #2]
 801c78e:	4293      	cmp	r3, r2
 801c790:	f200 80ae 	bhi.w	801c8f0 <Argus_Dca_CheckCfg+0x1f8>
 801c794:	78c3      	ldrb	r3, [r0, #3]
 801c796:	429a      	cmp	r2, r3
 801c798:	f200 80aa 	bhi.w	801c8f0 <Argus_Dca_CheckCfg+0x1f8>
 801c79c:	2b21      	cmp	r3, #33	@ 0x21
 801c79e:	f200 80a7 	bhi.w	801c8f0 <Argus_Dca_CheckCfg+0x1f8>
 801c7a2:	7a83      	ldrb	r3, [r0, #10]
 801c7a4:	1e5a      	subs	r2, r3, #1
 801c7a6:	2a01      	cmp	r2, #1
 801c7a8:	f200 80c2 	bhi.w	801c930 <Argus_Dca_CheckCfg+0x238>
 801c7ac:	88c3      	ldrh	r3, [r0, #6]
 801c7ae:	2b3f      	cmp	r3, #63	@ 0x3f
 801c7b0:	f240 80ff 	bls.w	801c9b2 <Argus_Dca_CheckCfg+0x2ba>
 801c7b4:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801c7b8:	4563      	cmp	r3, ip
 801c7ba:	f200 80ed 	bhi.w	801c998 <Argus_Dca_CheckCfg+0x2a0>
 801c7be:	8882      	ldrh	r2, [r0, #4]
 801c7c0:	4293      	cmp	r3, r2
 801c7c2:	f200 809b 	bhi.w	801c8fc <Argus_Dca_CheckCfg+0x204>
 801c7c6:	4594      	cmp	ip, r2
 801c7c8:	f0c0 8098 	bcc.w	801c8fc <Argus_Dca_CheckCfg+0x204>
 801c7cc:	89c3      	ldrh	r3, [r0, #14]
 801c7ce:	2b40      	cmp	r3, #64	@ 0x40
 801c7d0:	d902      	bls.n	801c7d8 <Argus_Dca_CheckCfg+0xe0>
 801c7d2:	069a      	lsls	r2, r3, #26
 801c7d4:	f040 8086 	bne.w	801c8e4 <Argus_Dca_CheckCfg+0x1ec>
 801c7d8:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 801c7dc:	f1bc 0f40 	cmp.w	ip, #64	@ 0x40
 801c7e0:	d902      	bls.n	801c7e8 <Argus_Dca_CheckCfg+0xf0>
 801c7e2:	f01c 0f3f 	tst.w	ip, #63	@ 0x3f
 801c7e6:	d177      	bne.n	801c8d8 <Argus_Dca_CheckCfg+0x1e0>
 801c7e8:	8a02      	ldrh	r2, [r0, #16]
 801c7ea:	2a40      	cmp	r2, #64	@ 0x40
 801c7ec:	d82c      	bhi.n	801c848 <Argus_Dca_CheckCfg+0x150>
 801c7ee:	2b00      	cmp	r3, #0
 801c7f0:	f000 80c6 	beq.w	801c980 <Argus_Dca_CheckCfg+0x288>
 801c7f4:	f64f 7ec0 	movw	lr, #65472	@ 0xffc0
 801c7f8:	4572      	cmp	r2, lr
 801c7fa:	f200 80c7 	bhi.w	801c98c <Argus_Dca_CheckCfg+0x294>
 801c7fe:	4293      	cmp	r3, r2
 801c800:	f200 80de 	bhi.w	801c9c0 <Argus_Dca_CheckCfg+0x2c8>
 801c804:	4563      	cmp	r3, ip
 801c806:	f200 808d 	bhi.w	801c924 <Argus_Dca_CheckCfg+0x22c>
 801c80a:	4594      	cmp	ip, r2
 801c80c:	f200 808a 	bhi.w	801c924 <Argus_Dca_CheckCfg+0x22c>
 801c810:	7ac3      	ldrb	r3, [r0, #11]
 801c812:	2b02      	cmp	r3, #2
 801c814:	d859      	bhi.n	801c8ca <Argus_Dca_CheckCfg+0x1d2>
 801c816:	f890 c013 	ldrb.w	ip, [r0, #19]
 801c81a:	f1bc 0f03 	cmp.w	ip, #3
 801c81e:	f200 8094 	bhi.w	801c94a <Argus_Dca_CheckCfg+0x252>
 801c822:	7c82      	ldrb	r2, [r0, #18]
 801c824:	2a03      	cmp	r2, #3
 801c826:	f200 8097 	bhi.w	801c958 <Argus_Dca_CheckCfg+0x260>
 801c82a:	7d03      	ldrb	r3, [r0, #20]
 801c82c:	2b03      	cmp	r3, #3
 801c82e:	f200 809a 	bhi.w	801c966 <Argus_Dca_CheckCfg+0x26e>
 801c832:	429a      	cmp	r2, r3
 801c834:	d801      	bhi.n	801c83a <Argus_Dca_CheckCfg+0x142>
 801c836:	4594      	cmp	ip, r2
 801c838:	d994      	bls.n	801c764 <Argus_Dca_CheckCfg+0x6c>
 801c83a:	4661      	mov	r1, ip
 801c83c:	4864      	ldr	r0, [pc, #400]	@ (801c9d0 <Argus_Dca_CheckCfg+0x2d8>)
 801c83e:	f7e9 fe65 	bl	800650c <print>
 801c842:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801c846:	bd08      	pop	{r3, pc}
 801c848:	f012 0f3f 	tst.w	r2, #63	@ 0x3f
 801c84c:	d0cf      	beq.n	801c7ee <Argus_Dca_CheckCfg+0xf6>
 801c84e:	4861      	ldr	r0, [pc, #388]	@ (801c9d4 <Argus_Dca_CheckCfg+0x2dc>)
 801c850:	f7e9 fe5c 	bl	800650c <print>
 801c854:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801c858:	bd08      	pop	{r3, pc}
 801c85a:	069a      	lsls	r2, r3, #26
 801c85c:	d1f7      	bne.n	801c84e <Argus_Dca_CheckCfg+0x156>
 801c85e:	e772      	b.n	801c746 <Argus_Dca_CheckCfg+0x4e>
 801c860:	f891 2067 	ldrb.w	r2, [r1, #103]	@ 0x67
 801c864:	08d2      	lsrs	r2, r2, #3
 801c866:	f8b1 305f 	ldrh.w	r3, [r1, #95]	@ 0x5f
 801c86a:	f8b1 0080 	ldrh.w	r0, [r1, #128]	@ 0x80
 801c86e:	ba59      	rev16	r1, r3
 801c870:	ba40      	rev16	r0, r0
 801c872:	f3c0 1049 	ubfx	r0, r0, #5, #10
 801c876:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801c87a:	1c43      	adds	r3, r0, #1
 801c87c:	fb00 1001 	mla	r0, r0, r1, r1
 801c880:	fb02 f000 	mul.w	r0, r2, r0
 801c884:	2800      	cmp	r0, #0
 801c886:	d05a      	beq.n	801c93e <Argus_Dca_CheckCfg+0x246>
 801c888:	f5b0 0ffa 	cmp.w	r0, #8192000	@ 0x7d0000
 801c88c:	f67f af55 	bls.w	801c73a <Argus_Dca_CheckCfg+0x42>
 801c890:	4851      	ldr	r0, [pc, #324]	@ (801c9d8 <Argus_Dca_CheckCfg+0x2e0>)
 801c892:	f7e9 fe3b 	bl	800650c <print>
 801c896:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801c89a:	bd08      	pop	{r3, pc}
 801c89c:	f891 3068 	ldrb.w	r3, [r1, #104]	@ 0x68
 801c8a0:	f891 0067 	ldrb.w	r0, [r1, #103]	@ 0x67
 801c8a4:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801c8a8:	08c2      	lsrs	r2, r0, #3
 801c8aa:	ebb3 0fd0 	cmp.w	r3, r0, lsr #3
 801c8ae:	bf08      	it	eq
 801c8b0:	0052      	lsleq	r2, r2, #1
 801c8b2:	d0d8      	beq.n	801c866 <Argus_Dca_CheckCfg+0x16e>
 801c8b4:	4849      	ldr	r0, [pc, #292]	@ (801c9dc <Argus_Dca_CheckCfg+0x2e4>)
 801c8b6:	f7e9 fe29 	bl	800650c <print>
 801c8ba:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801c8be:	bd08      	pop	{r3, pc}
 801c8c0:	f891 2068 	ldrb.w	r2, [r1, #104]	@ 0x68
 801c8c4:	f3c2 0244 	ubfx	r2, r2, #1, #5
 801c8c8:	e7cd      	b.n	801c866 <Argus_Dca_CheckCfg+0x16e>
 801c8ca:	4619      	mov	r1, r3
 801c8cc:	4844      	ldr	r0, [pc, #272]	@ (801c9e0 <Argus_Dca_CheckCfg+0x2e8>)
 801c8ce:	f7e9 fe1d 	bl	800650c <print>
 801c8d2:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801c8d6:	bd08      	pop	{r3, pc}
 801c8d8:	4842      	ldr	r0, [pc, #264]	@ (801c9e4 <Argus_Dca_CheckCfg+0x2ec>)
 801c8da:	f7e9 fe17 	bl	800650c <print>
 801c8de:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801c8e2:	bd08      	pop	{r3, pc}
 801c8e4:	4840      	ldr	r0, [pc, #256]	@ (801c9e8 <Argus_Dca_CheckCfg+0x2f0>)
 801c8e6:	f7e9 fe11 	bl	800650c <print>
 801c8ea:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801c8ee:	bd08      	pop	{r3, pc}
 801c8f0:	483e      	ldr	r0, [pc, #248]	@ (801c9ec <Argus_Dca_CheckCfg+0x2f4>)
 801c8f2:	f7e9 fe0b 	bl	800650c <print>
 801c8f6:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801c8fa:	bd08      	pop	{r3, pc}
 801c8fc:	483c      	ldr	r0, [pc, #240]	@ (801c9f0 <Argus_Dca_CheckCfg+0x2f8>)
 801c8fe:	f7e9 fe05 	bl	800650c <print>
 801c902:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801c906:	bd08      	pop	{r3, pc}
 801c908:	4661      	mov	r1, ip
 801c90a:	483a      	ldr	r0, [pc, #232]	@ (801c9f4 <Argus_Dca_CheckCfg+0x2fc>)
 801c90c:	f7e9 fdfe 	bl	800650c <print>
 801c910:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801c914:	bd08      	pop	{r3, pc}
 801c916:	4611      	mov	r1, r2
 801c918:	4837      	ldr	r0, [pc, #220]	@ (801c9f8 <Argus_Dca_CheckCfg+0x300>)
 801c91a:	f7e9 fdf7 	bl	800650c <print>
 801c91e:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801c922:	bd08      	pop	{r3, pc}
 801c924:	4835      	ldr	r0, [pc, #212]	@ (801c9fc <Argus_Dca_CheckCfg+0x304>)
 801c926:	f7e9 fdf1 	bl	800650c <print>
 801c92a:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801c92e:	bd08      	pop	{r3, pc}
 801c930:	4619      	mov	r1, r3
 801c932:	4833      	ldr	r0, [pc, #204]	@ (801ca00 <Argus_Dca_CheckCfg+0x308>)
 801c934:	f7e9 fdea 	bl	800650c <print>
 801c938:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801c93c:	bd08      	pop	{r3, pc}
 801c93e:	4831      	ldr	r0, [pc, #196]	@ (801ca04 <Argus_Dca_CheckCfg+0x30c>)
 801c940:	f7e9 fde4 	bl	800650c <print>
 801c944:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801c948:	bd08      	pop	{r3, pc}
 801c94a:	4661      	mov	r1, ip
 801c94c:	482e      	ldr	r0, [pc, #184]	@ (801ca08 <Argus_Dca_CheckCfg+0x310>)
 801c94e:	f7e9 fddd 	bl	800650c <print>
 801c952:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801c956:	bd08      	pop	{r3, pc}
 801c958:	4611      	mov	r1, r2
 801c95a:	482c      	ldr	r0, [pc, #176]	@ (801ca0c <Argus_Dca_CheckCfg+0x314>)
 801c95c:	f7e9 fdd6 	bl	800650c <print>
 801c960:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801c964:	bd08      	pop	{r3, pc}
 801c966:	4619      	mov	r1, r3
 801c968:	4829      	ldr	r0, [pc, #164]	@ (801ca10 <Argus_Dca_CheckCfg+0x318>)
 801c96a:	f7e9 fdcf 	bl	800650c <print>
 801c96e:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801c972:	bd08      	pop	{r3, pc}
 801c974:	4827      	ldr	r0, [pc, #156]	@ (801ca14 <Argus_Dca_CheckCfg+0x31c>)
 801c976:	f7e9 fdc9 	bl	800650c <print>
 801c97a:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801c97e:	bd08      	pop	{r3, pc}
 801c980:	4825      	ldr	r0, [pc, #148]	@ (801ca18 <Argus_Dca_CheckCfg+0x320>)
 801c982:	f7e9 fdc3 	bl	800650c <print>
 801c986:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801c98a:	bd08      	pop	{r3, pc}
 801c98c:	4823      	ldr	r0, [pc, #140]	@ (801ca1c <Argus_Dca_CheckCfg+0x324>)
 801c98e:	f7e9 fdbd 	bl	800650c <print>
 801c992:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801c996:	bd08      	pop	{r3, pc}
 801c998:	4821      	ldr	r0, [pc, #132]	@ (801ca20 <Argus_Dca_CheckCfg+0x328>)
 801c99a:	f7e9 fdb7 	bl	800650c <print>
 801c99e:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801c9a2:	bd08      	pop	{r3, pc}
 801c9a4:	7c81      	ldrb	r1, [r0, #18]
 801c9a6:	481f      	ldr	r0, [pc, #124]	@ (801ca24 <Argus_Dca_CheckCfg+0x32c>)
 801c9a8:	f7e9 fdb0 	bl	800650c <print>
 801c9ac:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801c9b0:	bd08      	pop	{r3, pc}
 801c9b2:	2104      	movs	r1, #4
 801c9b4:	481c      	ldr	r0, [pc, #112]	@ (801ca28 <Argus_Dca_CheckCfg+0x330>)
 801c9b6:	f7e9 fda9 	bl	800650c <print>
 801c9ba:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801c9be:	bd08      	pop	{r3, pc}
 801c9c0:	481a      	ldr	r0, [pc, #104]	@ (801ca2c <Argus_Dca_CheckCfg+0x334>)
 801c9c2:	f7e9 fda3 	bl	800650c <print>
 801c9c6:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 801c9ca:	bd08      	pop	{r3, pc}
 801c9cc:	0802f7e8 	.word	0x0802f7e8
 801c9d0:	0802f6fc 	.word	0x0802f6fc
 801c9d4:	0802f484 	.word	0x0802f484
 801c9d8:	0802f88c 	.word	0x0802f88c
 801c9dc:	0802f780 	.word	0x0802f780
 801c9e0:	0802f640 	.word	0x0802f640
 801c9e4:	0802f430 	.word	0x0802f430
 801c9e8:	0802f3dc 	.word	0x0802f3dc
 801c9ec:	0802f230 	.word	0x0802f230
 801c9f0:	0802f378 	.word	0x0802f378
 801c9f4:	0802f1ec 	.word	0x0802f1ec
 801c9f8:	0802f1bc 	.word	0x0802f1bc
 801c9fc:	0802f58c 	.word	0x0802f58c
 801ca00:	0802f2b8 	.word	0x0802f2b8
 801ca04:	0802f80c 	.word	0x0802f80c
 801ca08:	0802f66c 	.word	0x0802f66c
 801ca0c:	0802f69c 	.word	0x0802f69c
 801ca10:	0802f6cc 	.word	0x0802f6cc
 801ca14:	0802f5e4 	.word	0x0802f5e4
 801ca18:	0802f4d8 	.word	0x0802f4d8
 801ca1c:	0802f508 	.word	0x0802f508
 801ca20:	0802f320 	.word	0x0802f320
 801ca24:	0802f754 	.word	0x0802f754
 801ca28:	0802f2e4 	.word	0x0802f2e4
 801ca2c:	0802f538 	.word	0x0802f538

0801ca30 <Argus_Dca_PrepareCfg>:
 801ca30:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 801ca34:	f890 1050 	ldrb.w	r1, [r0, #80]	@ 0x50
 801ca38:	f890 2060 	ldrb.w	r2, [r0, #96]	@ 0x60
 801ca3c:	400b      	ands	r3, r1
 801ca3e:	4013      	ands	r3, r2
 801ca40:	2bff      	cmp	r3, #255	@ 0xff
 801ca42:	b500      	push	{lr}
 801ca44:	7b82      	ldrb	r2, [r0, #14]
 801ca46:	f040 80ea 	bne.w	801cc1e <Argus_Dca_PrepareCfg+0x1ee>
 801ca4a:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 801ca4e:	f890 c04f 	ldrb.w	ip, [r0, #79]	@ 0x4f
 801ca52:	f890 105f 	ldrb.w	r1, [r0, #95]	@ 0x5f
 801ca56:	ea03 030c 	and.w	r3, r3, ip
 801ca5a:	400b      	ands	r3, r1
 801ca5c:	2bff      	cmp	r3, #255	@ 0xff
 801ca5e:	f040 8123 	bne.w	801cca8 <Argus_Dca_PrepareCfg+0x278>
 801ca62:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 801ca66:	f890 c04e 	ldrb.w	ip, [r0, #78]	@ 0x4e
 801ca6a:	f890 105e 	ldrb.w	r1, [r0, #94]	@ 0x5e
 801ca6e:	ea03 030c 	and.w	r3, r3, ip
 801ca72:	400b      	ands	r3, r1
 801ca74:	2bff      	cmp	r3, #255	@ 0xff
 801ca76:	f040 811b 	bne.w	801ccb0 <Argus_Dca_PrepareCfg+0x280>
 801ca7a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 801ca7e:	f890 c04d 	ldrb.w	ip, [r0, #77]	@ 0x4d
 801ca82:	f890 105d 	ldrb.w	r1, [r0, #93]	@ 0x5d
 801ca86:	ea03 030c 	and.w	r3, r3, ip
 801ca8a:	400b      	ands	r3, r1
 801ca8c:	2bff      	cmp	r3, #255	@ 0xff
 801ca8e:	f040 8111 	bne.w	801ccb4 <Argus_Dca_PrepareCfg+0x284>
 801ca92:	f890 303b 	ldrb.w	r3, [r0, #59]	@ 0x3b
 801ca96:	f890 c04c 	ldrb.w	ip, [r0, #76]	@ 0x4c
 801ca9a:	f890 105c 	ldrb.w	r1, [r0, #92]	@ 0x5c
 801ca9e:	ea03 030c 	and.w	r3, r3, ip
 801caa2:	400b      	ands	r3, r1
 801caa4:	2bff      	cmp	r3, #255	@ 0xff
 801caa6:	f040 8107 	bne.w	801ccb8 <Argus_Dca_PrepareCfg+0x288>
 801caaa:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 801caae:	f890 c04b 	ldrb.w	ip, [r0, #75]	@ 0x4b
 801cab2:	f890 105b 	ldrb.w	r1, [r0, #91]	@ 0x5b
 801cab6:	ea03 030c 	and.w	r3, r3, ip
 801caba:	400b      	ands	r3, r1
 801cabc:	2bff      	cmp	r3, #255	@ 0xff
 801cabe:	f040 80fd 	bne.w	801ccbc <Argus_Dca_PrepareCfg+0x28c>
 801cac2:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 801cac6:	f890 c04a 	ldrb.w	ip, [r0, #74]	@ 0x4a
 801caca:	f890 105a 	ldrb.w	r1, [r0, #90]	@ 0x5a
 801cace:	ea03 030c 	and.w	r3, r3, ip
 801cad2:	400b      	ands	r3, r1
 801cad4:	2bff      	cmp	r3, #255	@ 0xff
 801cad6:	f040 80f3 	bne.w	801ccc0 <Argus_Dca_PrepareCfg+0x290>
 801cada:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 801cade:	f890 c049 	ldrb.w	ip, [r0, #73]	@ 0x49
 801cae2:	f890 1059 	ldrb.w	r1, [r0, #89]	@ 0x59
 801cae6:	ea03 030c 	and.w	r3, r3, ip
 801caea:	400b      	ands	r3, r1
 801caec:	2bff      	cmp	r3, #255	@ 0xff
 801caee:	f040 80e9 	bne.w	801ccc4 <Argus_Dca_PrepareCfg+0x294>
 801caf2:	f890 3037 	ldrb.w	r3, [r0, #55]	@ 0x37
 801caf6:	f890 c048 	ldrb.w	ip, [r0, #72]	@ 0x48
 801cafa:	f890 1058 	ldrb.w	r1, [r0, #88]	@ 0x58
 801cafe:	ea03 030c 	and.w	r3, r3, ip
 801cb02:	400b      	ands	r3, r1
 801cb04:	2bff      	cmp	r3, #255	@ 0xff
 801cb06:	f040 80f4 	bne.w	801ccf2 <Argus_Dca_PrepareCfg+0x2c2>
 801cb0a:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 801cb0e:	f890 c047 	ldrb.w	ip, [r0, #71]	@ 0x47
 801cb12:	f890 1057 	ldrb.w	r1, [r0, #87]	@ 0x57
 801cb16:	ea03 030c 	and.w	r3, r3, ip
 801cb1a:	400b      	ands	r3, r1
 801cb1c:	2bff      	cmp	r3, #255	@ 0xff
 801cb1e:	f040 8292 	bne.w	801d046 <Argus_Dca_PrepareCfg+0x616>
 801cb22:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 801cb26:	f890 c046 	ldrb.w	ip, [r0, #70]	@ 0x46
 801cb2a:	f890 1056 	ldrb.w	r1, [r0, #86]	@ 0x56
 801cb2e:	ea03 030c 	and.w	r3, r3, ip
 801cb32:	400b      	ands	r3, r1
 801cb34:	2bff      	cmp	r3, #255	@ 0xff
 801cb36:	f040 8288 	bne.w	801d04a <Argus_Dca_PrepareCfg+0x61a>
 801cb3a:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 801cb3e:	f890 c045 	ldrb.w	ip, [r0, #69]	@ 0x45
 801cb42:	f890 1055 	ldrb.w	r1, [r0, #85]	@ 0x55
 801cb46:	ea03 030c 	and.w	r3, r3, ip
 801cb4a:	400b      	ands	r3, r1
 801cb4c:	2bff      	cmp	r3, #255	@ 0xff
 801cb4e:	f040 827e 	bne.w	801d04e <Argus_Dca_PrepareCfg+0x61e>
 801cb52:	f890 3033 	ldrb.w	r3, [r0, #51]	@ 0x33
 801cb56:	f890 c044 	ldrb.w	ip, [r0, #68]	@ 0x44
 801cb5a:	f890 1054 	ldrb.w	r1, [r0, #84]	@ 0x54
 801cb5e:	ea03 030c 	and.w	r3, r3, ip
 801cb62:	400b      	ands	r3, r1
 801cb64:	2bff      	cmp	r3, #255	@ 0xff
 801cb66:	f040 80a1 	bne.w	801ccac <Argus_Dca_PrepareCfg+0x27c>
 801cb6a:	f890 3032 	ldrb.w	r3, [r0, #50]	@ 0x32
 801cb6e:	f890 c043 	ldrb.w	ip, [r0, #67]	@ 0x43
 801cb72:	f890 1053 	ldrb.w	r1, [r0, #83]	@ 0x53
 801cb76:	ea03 030c 	and.w	r3, r3, ip
 801cb7a:	400b      	ands	r3, r1
 801cb7c:	2bff      	cmp	r3, #255	@ 0xff
 801cb7e:	f040 8268 	bne.w	801d052 <Argus_Dca_PrepareCfg+0x622>
 801cb82:	f890 3031 	ldrb.w	r3, [r0, #49]	@ 0x31
 801cb86:	f890 c042 	ldrb.w	ip, [r0, #66]	@ 0x42
 801cb8a:	f890 1052 	ldrb.w	r1, [r0, #82]	@ 0x52
 801cb8e:	ea03 030c 	and.w	r3, r3, ip
 801cb92:	400b      	ands	r3, r1
 801cb94:	2bff      	cmp	r3, #255	@ 0xff
 801cb96:	f040 825e 	bne.w	801d056 <Argus_Dca_PrepareCfg+0x626>
 801cb9a:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 801cb9e:	f890 c041 	ldrb.w	ip, [r0, #65]	@ 0x41
 801cba2:	f890 1051 	ldrb.w	r1, [r0, #81]	@ 0x51
 801cba6:	ea03 030c 	and.w	r3, r3, ip
 801cbaa:	400b      	ands	r3, r1
 801cbac:	2bff      	cmp	r3, #255	@ 0xff
 801cbae:	bf18      	it	ne
 801cbb0:	2178      	movne	r1, #120	@ 0x78
 801cbb2:	d135      	bne.n	801cc20 <Argus_Dca_PrepareCfg+0x1f0>
 801cbb4:	2180      	movs	r1, #128	@ 0x80
 801cbb6:	7b03      	ldrb	r3, [r0, #12]
 801cbb8:	f8b0 c102 	ldrh.w	ip, [r0, #258]	@ 0x102
 801cbbc:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 801cbc0:	1a59      	subs	r1, r3, r1
 801cbc2:	b2c9      	uxtb	r1, r1
 801cbc4:	fbb1 f2f2 	udiv	r2, r1, r2
 801cbc8:	f02c 013f 	bic.w	r1, ip, #63	@ 0x3f
 801cbcc:	fa1f fe81 	uxth.w	lr, r1
 801cbd0:	2900      	cmp	r1, #0
 801cbd2:	d04d      	beq.n	801cc70 <Argus_Dca_PrepareCfg+0x240>
 801cbd4:	f10c 0320 	add.w	r3, ip, #32
 801cbd8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 801cbdc:	b29b      	uxth	r3, r3
 801cbde:	f8b0 1104 	ldrh.w	r1, [r0, #260]	@ 0x104
 801cbe2:	f8a0 3102 	strh.w	r3, [r0, #258]	@ 0x102
 801cbe6:	f021 033f 	bic.w	r3, r1, #63	@ 0x3f
 801cbea:	fa1f fe83 	uxth.w	lr, r3
 801cbee:	b383      	cbz	r3, 801cc52 <Argus_Dca_PrepareCfg+0x222>
 801cbf0:	f101 0320 	add.w	r3, r1, #32
 801cbf4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 801cbf8:	b29b      	uxth	r3, r3
 801cbfa:	f8b0 1100 	ldrh.w	r1, [r0, #256]	@ 0x100
 801cbfe:	f8a0 3104 	strh.w	r3, [r0, #260]	@ 0x104
 801cc02:	f021 033f 	bic.w	r3, r1, #63	@ 0x3f
 801cc06:	fa1f fe83 	uxth.w	lr, r3
 801cc0a:	b19b      	cbz	r3, 801cc34 <Argus_Dca_PrepareCfg+0x204>
 801cc0c:	f101 0320 	add.w	r3, r1, #32
 801cc10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 801cc14:	b29b      	uxth	r3, r3
 801cc16:	f8a0 3100 	strh.w	r3, [r0, #256]	@ 0x100
 801cc1a:	f85d fb04 	ldr.w	pc, [sp], #4
 801cc1e:	2100      	movs	r1, #0
 801cc20:	085b      	lsrs	r3, r3, #1
 801cc22:	d0c8      	beq.n	801cbb6 <Argus_Dca_PrepareCfg+0x186>
 801cc24:	f013 0f01 	tst.w	r3, #1
 801cc28:	d0fa      	beq.n	801cc20 <Argus_Dca_PrepareCfg+0x1f0>
 801cc2a:	3101      	adds	r1, #1
 801cc2c:	085b      	lsrs	r3, r3, #1
 801cc2e:	b2c9      	uxtb	r1, r1
 801cc30:	d1f8      	bne.n	801cc24 <Argus_Dca_PrepareCfg+0x1f4>
 801cc32:	e7c0      	b.n	801cbb6 <Argus_Dca_PrepareCfg+0x186>
 801cc34:	ea4f 2c82 	mov.w	ip, r2, lsl #10
 801cc38:	b382      	cbz	r2, 801cc9c <Argus_Dca_PrepareCfg+0x26c>
 801cc3a:	fb01 f202 	mul.w	r2, r1, r2
 801cc3e:	f3c2 1140 	ubfx	r1, r2, #5, #1
 801cc42:	eb01 1292 	add.w	r2, r1, r2, lsr #6
 801cc46:	2a01      	cmp	r2, #1
 801cc48:	bf38      	it	cc
 801cc4a:	2201      	movcc	r2, #1
 801cc4c:	4562      	cmp	r2, ip
 801cc4e:	d941      	bls.n	801ccd4 <Argus_Dca_PrepareCfg+0x2a4>
 801cc50:	e7fe      	b.n	801cc50 <Argus_Dca_PrepareCfg+0x220>
 801cc52:	ea4f 2c82 	mov.w	ip, r2, lsl #10
 801cc56:	b1f2      	cbz	r2, 801cc96 <Argus_Dca_PrepareCfg+0x266>
 801cc58:	fb02 f101 	mul.w	r1, r2, r1
 801cc5c:	f3c1 1340 	ubfx	r3, r1, #5, #1
 801cc60:	eb03 1191 	add.w	r1, r3, r1, lsr #6
 801cc64:	2901      	cmp	r1, #1
 801cc66:	bf38      	it	cc
 801cc68:	2101      	movcc	r1, #1
 801cc6a:	4561      	cmp	r1, ip
 801cc6c:	d93b      	bls.n	801cce6 <Argus_Dca_PrepareCfg+0x2b6>
 801cc6e:	e7fe      	b.n	801cc6e <Argus_Dca_PrepareCfg+0x23e>
 801cc70:	0291      	lsls	r1, r2, #10
 801cc72:	b16a      	cbz	r2, 801cc90 <Argus_Dca_PrepareCfg+0x260>
 801cc74:	fb02 fc0c 	mul.w	ip, r2, ip
 801cc78:	f3cc 1340 	ubfx	r3, ip, #5, #1
 801cc7c:	eb03 1c9c 	add.w	ip, r3, ip, lsr #6
 801cc80:	f1bc 0f01 	cmp.w	ip, #1
 801cc84:	bf38      	it	cc
 801cc86:	f04f 0c01 	movcc.w	ip, #1
 801cc8a:	458c      	cmp	ip, r1
 801cc8c:	d91c      	bls.n	801ccc8 <Argus_Dca_PrepareCfg+0x298>
 801cc8e:	e7fe      	b.n	801cc8e <Argus_Dca_PrepareCfg+0x25e>
 801cc90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801cc94:	e7a3      	b.n	801cbde <Argus_Dca_PrepareCfg+0x1ae>
 801cc96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801cc9a:	e7ae      	b.n	801cbfa <Argus_Dca_PrepareCfg+0x1ca>
 801cc9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801cca0:	f8a0 3100 	strh.w	r3, [r0, #256]	@ 0x100
 801cca4:	f85d fb04 	ldr.w	pc, [sp], #4
 801cca8:	2108      	movs	r1, #8
 801ccaa:	e7b9      	b.n	801cc20 <Argus_Dca_PrepareCfg+0x1f0>
 801ccac:	2160      	movs	r1, #96	@ 0x60
 801ccae:	e7b7      	b.n	801cc20 <Argus_Dca_PrepareCfg+0x1f0>
 801ccb0:	2110      	movs	r1, #16
 801ccb2:	e7b5      	b.n	801cc20 <Argus_Dca_PrepareCfg+0x1f0>
 801ccb4:	2118      	movs	r1, #24
 801ccb6:	e7b3      	b.n	801cc20 <Argus_Dca_PrepareCfg+0x1f0>
 801ccb8:	2120      	movs	r1, #32
 801ccba:	e7b1      	b.n	801cc20 <Argus_Dca_PrepareCfg+0x1f0>
 801ccbc:	2128      	movs	r1, #40	@ 0x28
 801ccbe:	e7af      	b.n	801cc20 <Argus_Dca_PrepareCfg+0x1f0>
 801ccc0:	2130      	movs	r1, #48	@ 0x30
 801ccc2:	e7ad      	b.n	801cc20 <Argus_Dca_PrepareCfg+0x1f0>
 801ccc4:	2138      	movs	r1, #56	@ 0x38
 801ccc6:	e7ab      	b.n	801cc20 <Argus_Dca_PrepareCfg+0x1f0>
 801ccc8:	d115      	bne.n	801ccf6 <Argus_Dca_PrepareCfg+0x2c6>
 801ccca:	f44f 3c80 	mov.w	ip, #65536	@ 0x10000
 801ccce:	fa1f f38c 	uxth.w	r3, ip
 801ccd2:	e784      	b.n	801cbde <Argus_Dca_PrepareCfg+0x1ae>
 801ccd4:	f040 8089 	bne.w	801cdea <Argus_Dca_PrepareCfg+0x3ba>
 801ccd8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801ccdc:	b293      	uxth	r3, r2
 801ccde:	f8a0 3100 	strh.w	r3, [r0, #256]	@ 0x100
 801cce2:	f85d fb04 	ldr.w	pc, [sp], #4
 801cce6:	f040 8117 	bne.w	801cf18 <Argus_Dca_PrepareCfg+0x4e8>
 801ccea:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 801ccee:	b28b      	uxth	r3, r1
 801ccf0:	e783      	b.n	801cbfa <Argus_Dca_PrepareCfg+0x1ca>
 801ccf2:	2140      	movs	r1, #64	@ 0x40
 801ccf4:	e794      	b.n	801cc20 <Argus_Dca_PrepareCfg+0x1f0>
 801ccf6:	ebb1 0f4c 	cmp.w	r1, ip, lsl #1
 801ccfa:	ea4f 034c 	mov.w	r3, ip, lsl #1
 801ccfe:	f200 81af 	bhi.w	801d060 <Argus_Dca_PrepareCfg+0x630>
 801cd02:	1a5b      	subs	r3, r3, r1
 801cd04:	005b      	lsls	r3, r3, #1
 801cd06:	f44f 4c00 	mov.w	ip, #32768	@ 0x8000
 801cd0a:	d0e0      	beq.n	801ccce <Argus_Dca_PrepareCfg+0x29e>
 801cd0c:	4299      	cmp	r1, r3
 801cd0e:	bf9c      	itt	ls
 801cd10:	1a5b      	subls	r3, r3, r1
 801cd12:	f44c 4c80 	orrls.w	ip, ip, #16384	@ 0x4000
 801cd16:	005b      	lsls	r3, r3, #1
 801cd18:	d0d9      	beq.n	801ccce <Argus_Dca_PrepareCfg+0x29e>
 801cd1a:	4299      	cmp	r1, r3
 801cd1c:	bf9c      	itt	ls
 801cd1e:	1a5b      	subls	r3, r3, r1
 801cd20:	f44c 5c00 	orrls.w	ip, ip, #8192	@ 0x2000
 801cd24:	005b      	lsls	r3, r3, #1
 801cd26:	d0d2      	beq.n	801ccce <Argus_Dca_PrepareCfg+0x29e>
 801cd28:	4299      	cmp	r1, r3
 801cd2a:	bf9c      	itt	ls
 801cd2c:	1a5b      	subls	r3, r3, r1
 801cd2e:	f44c 5c80 	orrls.w	ip, ip, #4096	@ 0x1000
 801cd32:	005b      	lsls	r3, r3, #1
 801cd34:	d0cb      	beq.n	801ccce <Argus_Dca_PrepareCfg+0x29e>
 801cd36:	4299      	cmp	r1, r3
 801cd38:	bf9c      	itt	ls
 801cd3a:	1a5b      	subls	r3, r3, r1
 801cd3c:	f44c 6c00 	orrls.w	ip, ip, #2048	@ 0x800
 801cd40:	005b      	lsls	r3, r3, #1
 801cd42:	d0c4      	beq.n	801ccce <Argus_Dca_PrepareCfg+0x29e>
 801cd44:	4299      	cmp	r1, r3
 801cd46:	bf9c      	itt	ls
 801cd48:	1a5b      	subls	r3, r3, r1
 801cd4a:	f44c 6c80 	orrls.w	ip, ip, #1024	@ 0x400
 801cd4e:	005b      	lsls	r3, r3, #1
 801cd50:	d0bd      	beq.n	801ccce <Argus_Dca_PrepareCfg+0x29e>
 801cd52:	4299      	cmp	r1, r3
 801cd54:	bf9c      	itt	ls
 801cd56:	1a5b      	subls	r3, r3, r1
 801cd58:	f44c 7c00 	orrls.w	ip, ip, #512	@ 0x200
 801cd5c:	005b      	lsls	r3, r3, #1
 801cd5e:	d0b6      	beq.n	801ccce <Argus_Dca_PrepareCfg+0x29e>
 801cd60:	4299      	cmp	r1, r3
 801cd62:	bf9c      	itt	ls
 801cd64:	1a5b      	subls	r3, r3, r1
 801cd66:	f44c 7c80 	orrls.w	ip, ip, #256	@ 0x100
 801cd6a:	005b      	lsls	r3, r3, #1
 801cd6c:	d0af      	beq.n	801ccce <Argus_Dca_PrepareCfg+0x29e>
 801cd6e:	4299      	cmp	r1, r3
 801cd70:	bf9c      	itt	ls
 801cd72:	1a5b      	subls	r3, r3, r1
 801cd74:	f04c 0c80 	orrls.w	ip, ip, #128	@ 0x80
 801cd78:	005b      	lsls	r3, r3, #1
 801cd7a:	d0a8      	beq.n	801ccce <Argus_Dca_PrepareCfg+0x29e>
 801cd7c:	4299      	cmp	r1, r3
 801cd7e:	bf9c      	itt	ls
 801cd80:	1a5b      	subls	r3, r3, r1
 801cd82:	f04c 0c40 	orrls.w	ip, ip, #64	@ 0x40
 801cd86:	005b      	lsls	r3, r3, #1
 801cd88:	d0a1      	beq.n	801ccce <Argus_Dca_PrepareCfg+0x29e>
 801cd8a:	4299      	cmp	r1, r3
 801cd8c:	bf9c      	itt	ls
 801cd8e:	1a5b      	subls	r3, r3, r1
 801cd90:	f04c 0c20 	orrls.w	ip, ip, #32
 801cd94:	005b      	lsls	r3, r3, #1
 801cd96:	d09a      	beq.n	801ccce <Argus_Dca_PrepareCfg+0x29e>
 801cd98:	4299      	cmp	r1, r3
 801cd9a:	bf9c      	itt	ls
 801cd9c:	1a5b      	subls	r3, r3, r1
 801cd9e:	f04c 0c10 	orrls.w	ip, ip, #16
 801cda2:	005b      	lsls	r3, r3, #1
 801cda4:	d093      	beq.n	801ccce <Argus_Dca_PrepareCfg+0x29e>
 801cda6:	4299      	cmp	r1, r3
 801cda8:	bf9c      	itt	ls
 801cdaa:	1a5b      	subls	r3, r3, r1
 801cdac:	f04c 0c08 	orrls.w	ip, ip, #8
 801cdb0:	005b      	lsls	r3, r3, #1
 801cdb2:	d08c      	beq.n	801ccce <Argus_Dca_PrepareCfg+0x29e>
 801cdb4:	4299      	cmp	r1, r3
 801cdb6:	bf9c      	itt	ls
 801cdb8:	1a5b      	subls	r3, r3, r1
 801cdba:	f04c 0c04 	orrls.w	ip, ip, #4
 801cdbe:	005b      	lsls	r3, r3, #1
 801cdc0:	d085      	beq.n	801ccce <Argus_Dca_PrepareCfg+0x29e>
 801cdc2:	4299      	cmp	r1, r3
 801cdc4:	bf9c      	itt	ls
 801cdc6:	1a5b      	subls	r3, r3, r1
 801cdc8:	f04c 0c02 	orrls.w	ip, ip, #2
 801cdcc:	005b      	lsls	r3, r3, #1
 801cdce:	f43f af7e 	beq.w	801ccce <Argus_Dca_PrepareCfg+0x29e>
 801cdd2:	4299      	cmp	r1, r3
 801cdd4:	bf9c      	itt	ls
 801cdd6:	1a5b      	subls	r3, r3, r1
 801cdd8:	f04c 0c01 	orrls.w	ip, ip, #1
 801cddc:	ebb1 0f43 	cmp.w	r1, r3, lsl #1
 801cde0:	f63f af75 	bhi.w	801ccce <Argus_Dca_PrepareCfg+0x29e>
 801cde4:	f10c 0c01 	add.w	ip, ip, #1
 801cde8:	e771      	b.n	801ccce <Argus_Dca_PrepareCfg+0x29e>
 801cdea:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 801cdee:	ea4f 0342 	mov.w	r3, r2, lsl #1
 801cdf2:	f200 8139 	bhi.w	801d068 <Argus_Dca_PrepareCfg+0x638>
 801cdf6:	eba3 030c 	sub.w	r3, r3, ip
 801cdfa:	005b      	lsls	r3, r3, #1
 801cdfc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 801ce00:	f43f af6c 	beq.w	801ccdc <Argus_Dca_PrepareCfg+0x2ac>
 801ce04:	459c      	cmp	ip, r3
 801ce06:	bf9c      	itt	ls
 801ce08:	eba3 030c 	subls.w	r3, r3, ip
 801ce0c:	f442 4280 	orrls.w	r2, r2, #16384	@ 0x4000
 801ce10:	005b      	lsls	r3, r3, #1
 801ce12:	f43f af63 	beq.w	801ccdc <Argus_Dca_PrepareCfg+0x2ac>
 801ce16:	4563      	cmp	r3, ip
 801ce18:	bf24      	itt	cs
 801ce1a:	eba3 030c 	subcs.w	r3, r3, ip
 801ce1e:	f442 5200 	orrcs.w	r2, r2, #8192	@ 0x2000
 801ce22:	005b      	lsls	r3, r3, #1
 801ce24:	f43f af5a 	beq.w	801ccdc <Argus_Dca_PrepareCfg+0x2ac>
 801ce28:	459c      	cmp	ip, r3
 801ce2a:	bf9c      	itt	ls
 801ce2c:	eba3 030c 	subls.w	r3, r3, ip
 801ce30:	f442 5280 	orrls.w	r2, r2, #4096	@ 0x1000
 801ce34:	005b      	lsls	r3, r3, #1
 801ce36:	f43f af51 	beq.w	801ccdc <Argus_Dca_PrepareCfg+0x2ac>
 801ce3a:	4563      	cmp	r3, ip
 801ce3c:	bf24      	itt	cs
 801ce3e:	eba3 030c 	subcs.w	r3, r3, ip
 801ce42:	f442 6200 	orrcs.w	r2, r2, #2048	@ 0x800
 801ce46:	005b      	lsls	r3, r3, #1
 801ce48:	f43f af48 	beq.w	801ccdc <Argus_Dca_PrepareCfg+0x2ac>
 801ce4c:	459c      	cmp	ip, r3
 801ce4e:	bf9c      	itt	ls
 801ce50:	eba3 030c 	subls.w	r3, r3, ip
 801ce54:	f442 6280 	orrls.w	r2, r2, #1024	@ 0x400
 801ce58:	005b      	lsls	r3, r3, #1
 801ce5a:	f43f af3f 	beq.w	801ccdc <Argus_Dca_PrepareCfg+0x2ac>
 801ce5e:	459c      	cmp	ip, r3
 801ce60:	bf9c      	itt	ls
 801ce62:	eba3 030c 	subls.w	r3, r3, ip
 801ce66:	f442 7200 	orrls.w	r2, r2, #512	@ 0x200
 801ce6a:	005b      	lsls	r3, r3, #1
 801ce6c:	f43f af36 	beq.w	801ccdc <Argus_Dca_PrepareCfg+0x2ac>
 801ce70:	4563      	cmp	r3, ip
 801ce72:	bf24      	itt	cs
 801ce74:	eba3 030c 	subcs.w	r3, r3, ip
 801ce78:	f442 7280 	orrcs.w	r2, r2, #256	@ 0x100
 801ce7c:	005b      	lsls	r3, r3, #1
 801ce7e:	f43f af2d 	beq.w	801ccdc <Argus_Dca_PrepareCfg+0x2ac>
 801ce82:	4563      	cmp	r3, ip
 801ce84:	bf24      	itt	cs
 801ce86:	eba3 030c 	subcs.w	r3, r3, ip
 801ce8a:	f042 0280 	orrcs.w	r2, r2, #128	@ 0x80
 801ce8e:	005b      	lsls	r3, r3, #1
 801ce90:	f43f af24 	beq.w	801ccdc <Argus_Dca_PrepareCfg+0x2ac>
 801ce94:	459c      	cmp	ip, r3
 801ce96:	bf9c      	itt	ls
 801ce98:	eba3 030c 	subls.w	r3, r3, ip
 801ce9c:	f042 0240 	orrls.w	r2, r2, #64	@ 0x40
 801cea0:	005b      	lsls	r3, r3, #1
 801cea2:	f43f af1b 	beq.w	801ccdc <Argus_Dca_PrepareCfg+0x2ac>
 801cea6:	459c      	cmp	ip, r3
 801cea8:	bf9c      	itt	ls
 801ceaa:	eba3 030c 	subls.w	r3, r3, ip
 801ceae:	f042 0220 	orrls.w	r2, r2, #32
 801ceb2:	005b      	lsls	r3, r3, #1
 801ceb4:	f43f af12 	beq.w	801ccdc <Argus_Dca_PrepareCfg+0x2ac>
 801ceb8:	459c      	cmp	ip, r3
 801ceba:	bf9c      	itt	ls
 801cebc:	eba3 030c 	subls.w	r3, r3, ip
 801cec0:	f042 0210 	orrls.w	r2, r2, #16
 801cec4:	005b      	lsls	r3, r3, #1
 801cec6:	f43f af09 	beq.w	801ccdc <Argus_Dca_PrepareCfg+0x2ac>
 801ceca:	459c      	cmp	ip, r3
 801cecc:	bf9c      	itt	ls
 801cece:	eba3 030c 	subls.w	r3, r3, ip
 801ced2:	f042 0208 	orrls.w	r2, r2, #8
 801ced6:	005b      	lsls	r3, r3, #1
 801ced8:	f43f af00 	beq.w	801ccdc <Argus_Dca_PrepareCfg+0x2ac>
 801cedc:	459c      	cmp	ip, r3
 801cede:	bf9c      	itt	ls
 801cee0:	eba3 030c 	subls.w	r3, r3, ip
 801cee4:	f042 0204 	orrls.w	r2, r2, #4
 801cee8:	005b      	lsls	r3, r3, #1
 801ceea:	f43f aef7 	beq.w	801ccdc <Argus_Dca_PrepareCfg+0x2ac>
 801ceee:	459c      	cmp	ip, r3
 801cef0:	bf9c      	itt	ls
 801cef2:	eba3 030c 	subls.w	r3, r3, ip
 801cef6:	f042 0202 	orrls.w	r2, r2, #2
 801cefa:	005b      	lsls	r3, r3, #1
 801cefc:	f43f aeee 	beq.w	801ccdc <Argus_Dca_PrepareCfg+0x2ac>
 801cf00:	4563      	cmp	r3, ip
 801cf02:	bf24      	itt	cs
 801cf04:	eba3 030c 	subcs.w	r3, r3, ip
 801cf08:	f042 0201 	orrcs.w	r2, r2, #1
 801cf0c:	ebbc 0f43 	cmp.w	ip, r3, lsl #1
 801cf10:	f63f aee4 	bhi.w	801ccdc <Argus_Dca_PrepareCfg+0x2ac>
 801cf14:	3201      	adds	r2, #1
 801cf16:	e6e1      	b.n	801ccdc <Argus_Dca_PrepareCfg+0x2ac>
 801cf18:	ebbc 0f41 	cmp.w	ip, r1, lsl #1
 801cf1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 801cf20:	f200 809b 	bhi.w	801d05a <Argus_Dca_PrepareCfg+0x62a>
 801cf24:	eba3 030c 	sub.w	r3, r3, ip
 801cf28:	005b      	lsls	r3, r3, #1
 801cf2a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801cf2e:	f43f aede 	beq.w	801ccee <Argus_Dca_PrepareCfg+0x2be>
 801cf32:	459c      	cmp	ip, r3
 801cf34:	bf9c      	itt	ls
 801cf36:	eba3 030c 	subls.w	r3, r3, ip
 801cf3a:	f441 4180 	orrls.w	r1, r1, #16384	@ 0x4000
 801cf3e:	005b      	lsls	r3, r3, #1
 801cf40:	f43f aed5 	beq.w	801ccee <Argus_Dca_PrepareCfg+0x2be>
 801cf44:	459c      	cmp	ip, r3
 801cf46:	bf9c      	itt	ls
 801cf48:	eba3 030c 	subls.w	r3, r3, ip
 801cf4c:	f441 5100 	orrls.w	r1, r1, #8192	@ 0x2000
 801cf50:	005b      	lsls	r3, r3, #1
 801cf52:	f43f aecc 	beq.w	801ccee <Argus_Dca_PrepareCfg+0x2be>
 801cf56:	459c      	cmp	ip, r3
 801cf58:	bf9c      	itt	ls
 801cf5a:	eba3 030c 	subls.w	r3, r3, ip
 801cf5e:	f441 5180 	orrls.w	r1, r1, #4096	@ 0x1000
 801cf62:	005b      	lsls	r3, r3, #1
 801cf64:	f43f aec3 	beq.w	801ccee <Argus_Dca_PrepareCfg+0x2be>
 801cf68:	459c      	cmp	ip, r3
 801cf6a:	bf9c      	itt	ls
 801cf6c:	eba3 030c 	subls.w	r3, r3, ip
 801cf70:	f441 6100 	orrls.w	r1, r1, #2048	@ 0x800
 801cf74:	005b      	lsls	r3, r3, #1
 801cf76:	f43f aeba 	beq.w	801ccee <Argus_Dca_PrepareCfg+0x2be>
 801cf7a:	459c      	cmp	ip, r3
 801cf7c:	bf9c      	itt	ls
 801cf7e:	eba3 030c 	subls.w	r3, r3, ip
 801cf82:	f441 6180 	orrls.w	r1, r1, #1024	@ 0x400
 801cf86:	005b      	lsls	r3, r3, #1
 801cf88:	f43f aeb1 	beq.w	801ccee <Argus_Dca_PrepareCfg+0x2be>
 801cf8c:	459c      	cmp	ip, r3
 801cf8e:	bf9c      	itt	ls
 801cf90:	eba3 030c 	subls.w	r3, r3, ip
 801cf94:	f441 7100 	orrls.w	r1, r1, #512	@ 0x200
 801cf98:	005b      	lsls	r3, r3, #1
 801cf9a:	f43f aea8 	beq.w	801ccee <Argus_Dca_PrepareCfg+0x2be>
 801cf9e:	459c      	cmp	ip, r3
 801cfa0:	bf9c      	itt	ls
 801cfa2:	eba3 030c 	subls.w	r3, r3, ip
 801cfa6:	f441 7180 	orrls.w	r1, r1, #256	@ 0x100
 801cfaa:	005b      	lsls	r3, r3, #1
 801cfac:	f43f ae9f 	beq.w	801ccee <Argus_Dca_PrepareCfg+0x2be>
 801cfb0:	459c      	cmp	ip, r3
 801cfb2:	bf9c      	itt	ls
 801cfb4:	eba3 030c 	subls.w	r3, r3, ip
 801cfb8:	f041 0180 	orrls.w	r1, r1, #128	@ 0x80
 801cfbc:	005b      	lsls	r3, r3, #1
 801cfbe:	f43f ae96 	beq.w	801ccee <Argus_Dca_PrepareCfg+0x2be>
 801cfc2:	459c      	cmp	ip, r3
 801cfc4:	bf9c      	itt	ls
 801cfc6:	eba3 030c 	subls.w	r3, r3, ip
 801cfca:	f041 0140 	orrls.w	r1, r1, #64	@ 0x40
 801cfce:	005b      	lsls	r3, r3, #1
 801cfd0:	f43f ae8d 	beq.w	801ccee <Argus_Dca_PrepareCfg+0x2be>
 801cfd4:	459c      	cmp	ip, r3
 801cfd6:	bf9c      	itt	ls
 801cfd8:	eba3 030c 	subls.w	r3, r3, ip
 801cfdc:	f041 0120 	orrls.w	r1, r1, #32
 801cfe0:	005b      	lsls	r3, r3, #1
 801cfe2:	f43f ae84 	beq.w	801ccee <Argus_Dca_PrepareCfg+0x2be>
 801cfe6:	459c      	cmp	ip, r3
 801cfe8:	bf9c      	itt	ls
 801cfea:	eba3 030c 	subls.w	r3, r3, ip
 801cfee:	f041 0110 	orrls.w	r1, r1, #16
 801cff2:	005b      	lsls	r3, r3, #1
 801cff4:	f43f ae7b 	beq.w	801ccee <Argus_Dca_PrepareCfg+0x2be>
 801cff8:	459c      	cmp	ip, r3
 801cffa:	bf9c      	itt	ls
 801cffc:	eba3 030c 	subls.w	r3, r3, ip
 801d000:	f041 0108 	orrls.w	r1, r1, #8
 801d004:	005b      	lsls	r3, r3, #1
 801d006:	f43f ae72 	beq.w	801ccee <Argus_Dca_PrepareCfg+0x2be>
 801d00a:	459c      	cmp	ip, r3
 801d00c:	bf9c      	itt	ls
 801d00e:	eba3 030c 	subls.w	r3, r3, ip
 801d012:	f041 0104 	orrls.w	r1, r1, #4
 801d016:	005b      	lsls	r3, r3, #1
 801d018:	f43f ae69 	beq.w	801ccee <Argus_Dca_PrepareCfg+0x2be>
 801d01c:	459c      	cmp	ip, r3
 801d01e:	bf9c      	itt	ls
 801d020:	eba3 030c 	subls.w	r3, r3, ip
 801d024:	f041 0102 	orrls.w	r1, r1, #2
 801d028:	005b      	lsls	r3, r3, #1
 801d02a:	f43f ae60 	beq.w	801ccee <Argus_Dca_PrepareCfg+0x2be>
 801d02e:	459c      	cmp	ip, r3
 801d030:	bf9c      	itt	ls
 801d032:	eba3 030c 	subls.w	r3, r3, ip
 801d036:	f041 0101 	orrls.w	r1, r1, #1
 801d03a:	ebbc 0f43 	cmp.w	ip, r3, lsl #1
 801d03e:	f63f ae56 	bhi.w	801ccee <Argus_Dca_PrepareCfg+0x2be>
 801d042:	3101      	adds	r1, #1
 801d044:	e653      	b.n	801ccee <Argus_Dca_PrepareCfg+0x2be>
 801d046:	2148      	movs	r1, #72	@ 0x48
 801d048:	e5ea      	b.n	801cc20 <Argus_Dca_PrepareCfg+0x1f0>
 801d04a:	2150      	movs	r1, #80	@ 0x50
 801d04c:	e5e8      	b.n	801cc20 <Argus_Dca_PrepareCfg+0x1f0>
 801d04e:	2158      	movs	r1, #88	@ 0x58
 801d050:	e5e6      	b.n	801cc20 <Argus_Dca_PrepareCfg+0x1f0>
 801d052:	2168      	movs	r1, #104	@ 0x68
 801d054:	e5e4      	b.n	801cc20 <Argus_Dca_PrepareCfg+0x1f0>
 801d056:	2170      	movs	r1, #112	@ 0x70
 801d058:	e5e2      	b.n	801cc20 <Argus_Dca_PrepareCfg+0x1f0>
 801d05a:	008b      	lsls	r3, r1, #2
 801d05c:	4671      	mov	r1, lr
 801d05e:	e768      	b.n	801cf32 <Argus_Dca_PrepareCfg+0x502>
 801d060:	ea4f 038c 	mov.w	r3, ip, lsl #2
 801d064:	46f4      	mov	ip, lr
 801d066:	e651      	b.n	801cd0c <Argus_Dca_PrepareCfg+0x2dc>
 801d068:	0093      	lsls	r3, r2, #2
 801d06a:	4672      	mov	r2, lr
 801d06c:	e6ca      	b.n	801ce04 <Argus_Dca_PrepareCfg+0x3d4>
 801d06e:	bf00      	nop

0801d070 <Argus_Dca_Update>:
 801d070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d074:	460e      	mov	r6, r1
 801d076:	f891 1050 	ldrb.w	r1, [r1, #80]	@ 0x50
 801d07a:	f896 303f 	ldrb.w	r3, [r6, #63]	@ 0x3f
 801d07e:	7bb4      	ldrb	r4, [r6, #14]
 801d080:	4019      	ands	r1, r3
 801d082:	f896 3060 	ldrb.w	r3, [r6, #96]	@ 0x60
 801d086:	4019      	ands	r1, r3
 801d088:	29ff      	cmp	r1, #255	@ 0xff
 801d08a:	b085      	sub	sp, #20
 801d08c:	4607      	mov	r7, r0
 801d08e:	4615      	mov	r5, r2
 801d090:	f040 8527 	bne.w	801dae2 <Argus_Dca_Update+0xa72>
 801d094:	f896 203e 	ldrb.w	r2, [r6, #62]	@ 0x3e
 801d098:	f896 304f 	ldrb.w	r3, [r6, #79]	@ 0x4f
 801d09c:	4013      	ands	r3, r2
 801d09e:	f896 205f 	ldrb.w	r2, [r6, #95]	@ 0x5f
 801d0a2:	4013      	ands	r3, r2
 801d0a4:	2bff      	cmp	r3, #255	@ 0xff
 801d0a6:	f040 8155 	bne.w	801d354 <Argus_Dca_Update+0x2e4>
 801d0aa:	f896 203d 	ldrb.w	r2, [r6, #61]	@ 0x3d
 801d0ae:	f896 304e 	ldrb.w	r3, [r6, #78]	@ 0x4e
 801d0b2:	4013      	ands	r3, r2
 801d0b4:	f896 205e 	ldrb.w	r2, [r6, #94]	@ 0x5e
 801d0b8:	4013      	ands	r3, r2
 801d0ba:	2bff      	cmp	r3, #255	@ 0xff
 801d0bc:	f040 8548 	bne.w	801db50 <Argus_Dca_Update+0xae0>
 801d0c0:	f896 203c 	ldrb.w	r2, [r6, #60]	@ 0x3c
 801d0c4:	f896 304d 	ldrb.w	r3, [r6, #77]	@ 0x4d
 801d0c8:	4013      	ands	r3, r2
 801d0ca:	f896 205d 	ldrb.w	r2, [r6, #93]	@ 0x5d
 801d0ce:	4013      	ands	r3, r2
 801d0d0:	2bff      	cmp	r3, #255	@ 0xff
 801d0d2:	f040 853f 	bne.w	801db54 <Argus_Dca_Update+0xae4>
 801d0d6:	f896 203b 	ldrb.w	r2, [r6, #59]	@ 0x3b
 801d0da:	f896 304c 	ldrb.w	r3, [r6, #76]	@ 0x4c
 801d0de:	4013      	ands	r3, r2
 801d0e0:	f896 205c 	ldrb.w	r2, [r6, #92]	@ 0x5c
 801d0e4:	4013      	ands	r3, r2
 801d0e6:	2bff      	cmp	r3, #255	@ 0xff
 801d0e8:	f040 853a 	bne.w	801db60 <Argus_Dca_Update+0xaf0>
 801d0ec:	f896 203a 	ldrb.w	r2, [r6, #58]	@ 0x3a
 801d0f0:	f896 304b 	ldrb.w	r3, [r6, #75]	@ 0x4b
 801d0f4:	4013      	ands	r3, r2
 801d0f6:	f896 205b 	ldrb.w	r2, [r6, #91]	@ 0x5b
 801d0fa:	4013      	ands	r3, r2
 801d0fc:	2bff      	cmp	r3, #255	@ 0xff
 801d0fe:	f040 8538 	bne.w	801db72 <Argus_Dca_Update+0xb02>
 801d102:	f896 2039 	ldrb.w	r2, [r6, #57]	@ 0x39
 801d106:	f896 304a 	ldrb.w	r3, [r6, #74]	@ 0x4a
 801d10a:	4013      	ands	r3, r2
 801d10c:	f896 205a 	ldrb.w	r2, [r6, #90]	@ 0x5a
 801d110:	4013      	ands	r3, r2
 801d112:	2bff      	cmp	r3, #255	@ 0xff
 801d114:	f040 8533 	bne.w	801db7e <Argus_Dca_Update+0xb0e>
 801d118:	f896 2038 	ldrb.w	r2, [r6, #56]	@ 0x38
 801d11c:	f896 3049 	ldrb.w	r3, [r6, #73]	@ 0x49
 801d120:	4013      	ands	r3, r2
 801d122:	f896 2059 	ldrb.w	r2, [r6, #89]	@ 0x59
 801d126:	4013      	ands	r3, r2
 801d128:	2bff      	cmp	r3, #255	@ 0xff
 801d12a:	f040 8532 	bne.w	801db92 <Argus_Dca_Update+0xb22>
 801d12e:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 801d132:	f896 3037 	ldrb.w	r3, [r6, #55]	@ 0x37
 801d136:	4013      	ands	r3, r2
 801d138:	f896 2058 	ldrb.w	r2, [r6, #88]	@ 0x58
 801d13c:	4013      	ands	r3, r2
 801d13e:	2bff      	cmp	r3, #255	@ 0xff
 801d140:	f040 8524 	bne.w	801db8c <Argus_Dca_Update+0xb1c>
 801d144:	f896 2047 	ldrb.w	r2, [r6, #71]	@ 0x47
 801d148:	f896 3036 	ldrb.w	r3, [r6, #54]	@ 0x36
 801d14c:	4013      	ands	r3, r2
 801d14e:	f896 2057 	ldrb.w	r2, [r6, #87]	@ 0x57
 801d152:	4013      	ands	r3, r2
 801d154:	2bff      	cmp	r3, #255	@ 0xff
 801d156:	f040 8527 	bne.w	801dba8 <Argus_Dca_Update+0xb38>
 801d15a:	f896 2046 	ldrb.w	r2, [r6, #70]	@ 0x46
 801d15e:	f896 3035 	ldrb.w	r3, [r6, #53]	@ 0x35
 801d162:	4013      	ands	r3, r2
 801d164:	f896 2056 	ldrb.w	r2, [r6, #86]	@ 0x56
 801d168:	4013      	ands	r3, r2
 801d16a:	2bff      	cmp	r3, #255	@ 0xff
 801d16c:	f040 8527 	bne.w	801dbbe <Argus_Dca_Update+0xb4e>
 801d170:	f896 2045 	ldrb.w	r2, [r6, #69]	@ 0x45
 801d174:	f896 3034 	ldrb.w	r3, [r6, #52]	@ 0x34
 801d178:	4013      	ands	r3, r2
 801d17a:	f896 2055 	ldrb.w	r2, [r6, #85]	@ 0x55
 801d17e:	4013      	ands	r3, r2
 801d180:	2bff      	cmp	r3, #255	@ 0xff
 801d182:	f040 8527 	bne.w	801dbd4 <Argus_Dca_Update+0xb64>
 801d186:	f896 2044 	ldrb.w	r2, [r6, #68]	@ 0x44
 801d18a:	f896 3033 	ldrb.w	r3, [r6, #51]	@ 0x33
 801d18e:	4013      	ands	r3, r2
 801d190:	f896 2054 	ldrb.w	r2, [r6, #84]	@ 0x54
 801d194:	4013      	ands	r3, r2
 801d196:	2bff      	cmp	r3, #255	@ 0xff
 801d198:	f040 84b6 	bne.w	801db08 <Argus_Dca_Update+0xa98>
 801d19c:	f896 2043 	ldrb.w	r2, [r6, #67]	@ 0x43
 801d1a0:	f896 3032 	ldrb.w	r3, [r6, #50]	@ 0x32
 801d1a4:	4013      	ands	r3, r2
 801d1a6:	f896 2053 	ldrb.w	r2, [r6, #83]	@ 0x53
 801d1aa:	4013      	ands	r3, r2
 801d1ac:	2bff      	cmp	r3, #255	@ 0xff
 801d1ae:	f040 8514 	bne.w	801dbda <Argus_Dca_Update+0xb6a>
 801d1b2:	f896 2042 	ldrb.w	r2, [r6, #66]	@ 0x42
 801d1b6:	f896 3031 	ldrb.w	r3, [r6, #49]	@ 0x31
 801d1ba:	4013      	ands	r3, r2
 801d1bc:	f896 2052 	ldrb.w	r2, [r6, #82]	@ 0x52
 801d1c0:	4013      	ands	r3, r2
 801d1c2:	2bff      	cmp	r3, #255	@ 0xff
 801d1c4:	f040 852d 	bne.w	801dc22 <Argus_Dca_Update+0xbb2>
 801d1c8:	f896 2041 	ldrb.w	r2, [r6, #65]	@ 0x41
 801d1cc:	f896 3030 	ldrb.w	r3, [r6, #48]	@ 0x30
 801d1d0:	4013      	ands	r3, r2
 801d1d2:	f896 2051 	ldrb.w	r2, [r6, #81]	@ 0x51
 801d1d6:	4013      	ands	r3, r2
 801d1d8:	2bff      	cmp	r3, #255	@ 0xff
 801d1da:	bf18      	it	ne
 801d1dc:	2278      	movne	r2, #120	@ 0x78
 801d1de:	f040 80ba 	bne.w	801d356 <Argus_Dca_Update+0x2e6>
 801d1e2:	7b33      	ldrb	r3, [r6, #12]
 801d1e4:	f1c3 0080 	rsb	r0, r3, #128	@ 0x80
 801d1e8:	425b      	negs	r3, r3
 801d1ea:	b2db      	uxtb	r3, r3
 801d1ec:	b2c0      	uxtb	r0, r0
 801d1ee:	fbb3 f3f4 	udiv	r3, r3, r4
 801d1f2:	f887 3020 	strb.w	r3, [r7, #32]
 801d1f6:	f896 303e 	ldrb.w	r3, [r6, #62]	@ 0x3e
 801d1fa:	f896 104f 	ldrb.w	r1, [r6, #79]	@ 0x4f
 801d1fe:	4019      	ands	r1, r3
 801d200:	f896 305f 	ldrb.w	r3, [r6, #95]	@ 0x5f
 801d204:	4019      	ands	r1, r3
 801d206:	29ff      	cmp	r1, #255	@ 0xff
 801d208:	f040 847b 	bne.w	801db02 <Argus_Dca_Update+0xa92>
 801d20c:	f896 303d 	ldrb.w	r3, [r6, #61]	@ 0x3d
 801d210:	f896 104e 	ldrb.w	r1, [r6, #78]	@ 0x4e
 801d214:	4019      	ands	r1, r3
 801d216:	f896 305e 	ldrb.w	r3, [r6, #94]	@ 0x5e
 801d21a:	4019      	ands	r1, r3
 801d21c:	29ff      	cmp	r1, #255	@ 0xff
 801d21e:	f040 8488 	bne.w	801db32 <Argus_Dca_Update+0xac2>
 801d222:	f896 303c 	ldrb.w	r3, [r6, #60]	@ 0x3c
 801d226:	f896 104d 	ldrb.w	r1, [r6, #77]	@ 0x4d
 801d22a:	4019      	ands	r1, r3
 801d22c:	f896 305d 	ldrb.w	r3, [r6, #93]	@ 0x5d
 801d230:	4019      	ands	r1, r3
 801d232:	29ff      	cmp	r1, #255	@ 0xff
 801d234:	f040 8491 	bne.w	801db5a <Argus_Dca_Update+0xaea>
 801d238:	f896 303b 	ldrb.w	r3, [r6, #59]	@ 0x3b
 801d23c:	f896 104c 	ldrb.w	r1, [r6, #76]	@ 0x4c
 801d240:	4019      	ands	r1, r3
 801d242:	f896 305c 	ldrb.w	r3, [r6, #92]	@ 0x5c
 801d246:	4019      	ands	r1, r3
 801d248:	29ff      	cmp	r1, #255	@ 0xff
 801d24a:	f040 848c 	bne.w	801db66 <Argus_Dca_Update+0xaf6>
 801d24e:	f896 303a 	ldrb.w	r3, [r6, #58]	@ 0x3a
 801d252:	f896 104b 	ldrb.w	r1, [r6, #75]	@ 0x4b
 801d256:	4019      	ands	r1, r3
 801d258:	f896 305b 	ldrb.w	r3, [r6, #91]	@ 0x5b
 801d25c:	4019      	ands	r1, r3
 801d25e:	29ff      	cmp	r1, #255	@ 0xff
 801d260:	f040 8484 	bne.w	801db6c <Argus_Dca_Update+0xafc>
 801d264:	f896 3039 	ldrb.w	r3, [r6, #57]	@ 0x39
 801d268:	f896 104a 	ldrb.w	r1, [r6, #74]	@ 0x4a
 801d26c:	4019      	ands	r1, r3
 801d26e:	f896 305a 	ldrb.w	r3, [r6, #90]	@ 0x5a
 801d272:	4019      	ands	r1, r3
 801d274:	29ff      	cmp	r1, #255	@ 0xff
 801d276:	f040 847f 	bne.w	801db78 <Argus_Dca_Update+0xb08>
 801d27a:	f896 3038 	ldrb.w	r3, [r6, #56]	@ 0x38
 801d27e:	f896 1049 	ldrb.w	r1, [r6, #73]	@ 0x49
 801d282:	4019      	ands	r1, r3
 801d284:	f896 3059 	ldrb.w	r3, [r6, #89]	@ 0x59
 801d288:	4019      	ands	r1, r3
 801d28a:	29ff      	cmp	r1, #255	@ 0xff
 801d28c:	f040 847a 	bne.w	801db84 <Argus_Dca_Update+0xb14>
 801d290:	f896 3037 	ldrb.w	r3, [r6, #55]	@ 0x37
 801d294:	f896 1048 	ldrb.w	r1, [r6, #72]	@ 0x48
 801d298:	4019      	ands	r1, r3
 801d29a:	f896 3058 	ldrb.w	r3, [r6, #88]	@ 0x58
 801d29e:	4019      	ands	r1, r3
 801d2a0:	29ff      	cmp	r1, #255	@ 0xff
 801d2a2:	f040 8479 	bne.w	801db98 <Argus_Dca_Update+0xb28>
 801d2a6:	f896 3036 	ldrb.w	r3, [r6, #54]	@ 0x36
 801d2aa:	f896 1047 	ldrb.w	r1, [r6, #71]	@ 0x47
 801d2ae:	4019      	ands	r1, r3
 801d2b0:	f896 3057 	ldrb.w	r3, [r6, #87]	@ 0x57
 801d2b4:	4019      	ands	r1, r3
 801d2b6:	29ff      	cmp	r1, #255	@ 0xff
 801d2b8:	f040 8472 	bne.w	801dba0 <Argus_Dca_Update+0xb30>
 801d2bc:	f896 3035 	ldrb.w	r3, [r6, #53]	@ 0x35
 801d2c0:	f896 1046 	ldrb.w	r1, [r6, #70]	@ 0x46
 801d2c4:	4019      	ands	r1, r3
 801d2c6:	f896 3056 	ldrb.w	r3, [r6, #86]	@ 0x56
 801d2ca:	4019      	ands	r1, r3
 801d2cc:	29ff      	cmp	r1, #255	@ 0xff
 801d2ce:	f040 8472 	bne.w	801dbb6 <Argus_Dca_Update+0xb46>
 801d2d2:	f896 3034 	ldrb.w	r3, [r6, #52]	@ 0x34
 801d2d6:	f896 1045 	ldrb.w	r1, [r6, #69]	@ 0x45
 801d2da:	4019      	ands	r1, r3
 801d2dc:	f896 3055 	ldrb.w	r3, [r6, #85]	@ 0x55
 801d2e0:	4019      	ands	r1, r3
 801d2e2:	29ff      	cmp	r1, #255	@ 0xff
 801d2e4:	f040 846e 	bne.w	801dbc4 <Argus_Dca_Update+0xb54>
 801d2e8:	f896 3033 	ldrb.w	r3, [r6, #51]	@ 0x33
 801d2ec:	f896 1044 	ldrb.w	r1, [r6, #68]	@ 0x44
 801d2f0:	4019      	ands	r1, r3
 801d2f2:	f896 3054 	ldrb.w	r3, [r6, #84]	@ 0x54
 801d2f6:	4019      	ands	r1, r3
 801d2f8:	29ff      	cmp	r1, #255	@ 0xff
 801d2fa:	f040 8467 	bne.w	801dbcc <Argus_Dca_Update+0xb5c>
 801d2fe:	f896 3032 	ldrb.w	r3, [r6, #50]	@ 0x32
 801d302:	f896 1043 	ldrb.w	r1, [r6, #67]	@ 0x43
 801d306:	4019      	ands	r1, r3
 801d308:	f896 3053 	ldrb.w	r3, [r6, #83]	@ 0x53
 801d30c:	4019      	ands	r1, r3
 801d30e:	29ff      	cmp	r1, #255	@ 0xff
 801d310:	f040 8466 	bne.w	801dbe0 <Argus_Dca_Update+0xb70>
 801d314:	f896 3031 	ldrb.w	r3, [r6, #49]	@ 0x31
 801d318:	f896 1042 	ldrb.w	r1, [r6, #66]	@ 0x42
 801d31c:	4019      	ands	r1, r3
 801d31e:	f896 3052 	ldrb.w	r3, [r6, #82]	@ 0x52
 801d322:	4019      	ands	r1, r3
 801d324:	29ff      	cmp	r1, #255	@ 0xff
 801d326:	f040 8478 	bne.w	801dc1a <Argus_Dca_Update+0xbaa>
 801d32a:	f896 3041 	ldrb.w	r3, [r6, #65]	@ 0x41
 801d32e:	f896 1030 	ldrb.w	r1, [r6, #48]	@ 0x30
 801d332:	4019      	ands	r1, r3
 801d334:	f896 3051 	ldrb.w	r3, [r6, #81]	@ 0x51
 801d338:	4019      	ands	r1, r3
 801d33a:	29ff      	cmp	r1, #255	@ 0xff
 801d33c:	bf08      	it	eq
 801d33e:	2380      	moveq	r3, #128	@ 0x80
 801d340:	f040 8467 	bne.w	801dc12 <Argus_Dca_Update+0xba2>
 801d344:	1ac3      	subs	r3, r0, r3
 801d346:	b2db      	uxtb	r3, r3
 801d348:	029a      	lsls	r2, r3, #10
 801d34a:	b353      	cbz	r3, 801d3a2 <Argus_Dca_Update+0x332>
 801d34c:	4294      	cmp	r4, r2
 801d34e:	f240 8313 	bls.w	801d978 <Argus_Dca_Update+0x908>
 801d352:	e7fe      	b.n	801d352 <Argus_Dca_Update+0x2e2>
 801d354:	2208      	movs	r2, #8
 801d356:	085b      	lsrs	r3, r3, #1
 801d358:	f000 83ee 	beq.w	801db38 <Argus_Dca_Update+0xac8>
 801d35c:	07d8      	lsls	r0, r3, #31
 801d35e:	bf44      	itt	mi
 801d360:	3201      	addmi	r2, #1
 801d362:	b2d2      	uxtbmi	r2, r2
 801d364:	085b      	lsrs	r3, r3, #1
 801d366:	d1f9      	bne.n	801d35c <Argus_Dca_Update+0x2ec>
 801d368:	7b30      	ldrb	r0, [r6, #12]
 801d36a:	f1c0 0080 	rsb	r0, r0, #128	@ 0x80
 801d36e:	b2c0      	uxtb	r0, r0
 801d370:	1a82      	subs	r2, r0, r2
 801d372:	29ff      	cmp	r1, #255	@ 0xff
 801d374:	b2d2      	uxtb	r2, r2
 801d376:	fbb2 f2f4 	udiv	r2, r2, r4
 801d37a:	f887 2020 	strb.w	r2, [r7, #32]
 801d37e:	bf18      	it	ne
 801d380:	084a      	lsrne	r2, r1, #1
 801d382:	f43f af38 	beq.w	801d1f6 <Argus_Dca_Update+0x186>
 801d386:	f012 02ff 	ands.w	r2, r2, #255	@ 0xff
 801d38a:	d0db      	beq.n	801d344 <Argus_Dca_Update+0x2d4>
 801d38c:	07d1      	lsls	r1, r2, #31
 801d38e:	bf44      	itt	mi
 801d390:	3301      	addmi	r3, #1
 801d392:	b2db      	uxtbmi	r3, r3
 801d394:	0852      	lsrs	r2, r2, #1
 801d396:	d1f9      	bne.n	801d38c <Argus_Dca_Update+0x31c>
 801d398:	1ac3      	subs	r3, r0, r3
 801d39a:	b2db      	uxtb	r3, r3
 801d39c:	029a      	lsls	r2, r3, #10
 801d39e:	2b00      	cmp	r3, #0
 801d3a0:	d1d4      	bne.n	801d34c <Argus_Dca_Update+0x2dc>
 801d3a2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801d3a6:	f8b6 2100 	ldrh.w	r2, [r6, #256]	@ 0x100
 801d3aa:	f8b6 c104 	ldrh.w	ip, [r6, #260]	@ 0x104
 801d3ae:	83f9      	strh	r1, [r7, #30]
 801d3b0:	0293      	lsls	r3, r2, #10
 801d3b2:	b17a      	cbz	r2, 801d3d4 <Argus_Dca_Update+0x364>
 801d3b4:	ebb3 2f8c 	cmp.w	r3, ip, lsl #10
 801d3b8:	ea4f 218c 	mov.w	r1, ip, lsl #10
 801d3bc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801d3c0:	f080 8237 	bcs.w	801d832 <Argus_Dca_Update+0x7c2>
 801d3c4:	005b      	lsls	r3, r3, #1
 801d3c6:	4299      	cmp	r1, r3
 801d3c8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801d3cc:	d8fa      	bhi.n	801d3c4 <Argus_Dca_Update+0x354>
 801d3ce:	2a00      	cmp	r2, #0
 801d3d0:	f040 822f 	bne.w	801d832 <Argus_Dca_Update+0x7c2>
 801d3d4:	230f      	movs	r3, #15
 801d3d6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 801d3da:	6873      	ldr	r3, [r6, #4]
 801d3dc:	2200      	movs	r2, #0
 801d3de:	f36c 020f 	bfi	r2, ip, #0, #16
 801d3e2:	f36c 421f 	bfi	r2, ip, #16, #16
 801d3e6:	2b00      	cmp	r3, #0
 801d3e8:	f8c7 2022 	str.w	r2, [r7, #34]	@ 0x22
 801d3ec:	461c      	mov	r4, r3
 801d3ee:	f000 81f7 	beq.w	801d7e0 <Argus_Dca_Update+0x770>
 801d3f2:	f2c0 8261 	blt.w	801d8b8 <Argus_Dca_Update+0x848>
 801d3f6:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 801d3fa:	4293      	cmp	r3, r2
 801d3fc:	f200 823b 	bhi.w	801d876 <Argus_Dca_Update+0x806>
 801d400:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801d404:	f649 413f 	movw	r1, #39999	@ 0x9c3f
 801d408:	005b      	lsls	r3, r3, #1
 801d40a:	428b      	cmp	r3, r1
 801d40c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801d410:	d9fa      	bls.n	801d408 <Argus_Dca_Update+0x398>
 801d412:	2a00      	cmp	r2, #0
 801d414:	f040 8231 	bne.w	801d87a <Argus_Dca_Update+0x80a>
 801d418:	2c00      	cmp	r4, #0
 801d41a:	bfac      	ite	ge
 801d41c:	f06f 4000 	mvnge.w	r0, #2147483648	@ 0x80000000
 801d420:	f04f 4000 	movlt.w	r0, #2147483648	@ 0x80000000
 801d424:	f00c fee6 	bl	802a1f4 <fp_log16>
 801d428:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
 801d42c:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
 801d430:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 801d434:	f240 81a9 	bls.w	801d78a <Argus_Dca_Update+0x71a>
 801d438:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801d43c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 801d440:	4694      	mov	ip, r2
 801d442:	0052      	lsls	r2, r2, #1
 801d444:	428a      	cmp	r2, r1
 801d446:	461c      	mov	r4, r3
 801d448:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d44c:	d3f8      	bcc.n	801d440 <Argus_Dca_Update+0x3d0>
 801d44e:	2b00      	cmp	r3, #0
 801d450:	f040 8191 	bne.w	801d776 <Argus_Dca_Update+0x706>
 801d454:	2800      	cmp	r0, #0
 801d456:	bfac      	ite	ge
 801d458:	f06f 4000 	mvnge.w	r0, #2147483648	@ 0x80000000
 801d45c:	f04f 4000 	movlt.w	r0, #2147483648	@ 0x80000000
 801d460:	f00c fe16 	bl	802a090 <fp_exp16>
 801d464:	f8b6 30de 	ldrh.w	r3, [r6, #222]	@ 0xde
 801d468:	f8b6 20dc 	ldrh.w	r2, [r6, #220]	@ 0xdc
 801d46c:	fba3 3400 	umull	r3, r4, r3, r0
 801d470:	fba2 1000 	umull	r1, r0, r2, r0
 801d474:	0c1a      	lsrs	r2, r3, #16
 801d476:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801d47a:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 801d47e:	4413      	add	r3, r2
 801d480:	2b01      	cmp	r3, #1
 801d482:	bf38      	it	cc
 801d484:	2301      	movcc	r3, #1
 801d486:	0c0c      	lsrs	r4, r1, #16
 801d488:	f3c1 32c0 	ubfx	r2, r1, #15, #1
 801d48c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801d490:	428b      	cmp	r3, r1
 801d492:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 801d496:	4422      	add	r2, r4
 801d498:	bf28      	it	cs
 801d49a:	460b      	movcs	r3, r1
 801d49c:	429a      	cmp	r2, r3
 801d49e:	bf38      	it	cc
 801d4a0:	461a      	movcc	r2, r3
 801d4a2:	428a      	cmp	r2, r1
 801d4a4:	bf28      	it	cs
 801d4a6:	460a      	movcs	r2, r1
 801d4a8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 801d4aa:	853a      	strh	r2, [r7, #40]	@ 0x28
 801d4ac:	f896 3092 	ldrb.w	r3, [r6, #146]	@ 0x92
 801d4b0:	2b02      	cmp	r3, #2
 801d4b2:	f000 821f 	beq.w	801d8f4 <Argus_Dca_Update+0x884>
 801d4b6:	2b03      	cmp	r3, #3
 801d4b8:	f000 8211 	beq.w	801d8de <Argus_Dca_Update+0x86e>
 801d4bc:	2b01      	cmp	r3, #1
 801d4be:	f000 8208 	beq.w	801d8d2 <Argus_Dca_Update+0x862>
 801d4c2:	f8b5 228e 	ldrh.w	r2, [r5, #654]	@ 0x28e
 801d4c6:	877a      	strh	r2, [r7, #58]	@ 0x3a
 801d4c8:	f896 30c5 	ldrb.w	r3, [r6, #197]	@ 0xc5
 801d4cc:	fb02 f303 	mul.w	r3, r2, r3
 801d4d0:	f3c3 11c0 	ubfx	r1, r3, #7, #1
 801d4d4:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801d4d8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 801d4da:	0313      	lsls	r3, r2, #12
 801d4dc:	b172      	cbz	r2, 801d4fc <Argus_Dca_Update+0x48c>
 801d4de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d4e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801d4e6:	f280 818f 	bge.w	801d808 <Argus_Dca_Update+0x798>
 801d4ea:	005b      	lsls	r3, r3, #1
 801d4ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d4f0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801d4f4:	d3f9      	bcc.n	801d4ea <Argus_Dca_Update+0x47a>
 801d4f6:	2a00      	cmp	r2, #0
 801d4f8:	f040 8186 	bne.w	801d808 <Argus_Dca_Update+0x798>
 801d4fc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801d500:	8738      	strh	r0, [r7, #56]	@ 0x38
 801d502:	f895 1292 	ldrb.w	r1, [r5, #658]	@ 0x292
 801d506:	4668      	mov	r0, sp
 801d508:	0389      	lsls	r1, r1, #14
 801d50a:	f007 fb85 	bl	8024c18 <Argus_Cal_GetGainValues>
 801d50e:	f107 0854 	add.w	r8, r7, #84	@ 0x54
 801d512:	46ee      	mov	lr, sp
 801d514:	f107 0c4c 	add.w	ip, r7, #76	@ 0x4c
 801d518:	f85e 3b04 	ldr.w	r3, [lr], #4
 801d51c:	2b00      	cmp	r3, #0
 801d51e:	4619      	mov	r1, r3
 801d520:	f000 80f3 	beq.w	801d70a <Argus_Dca_Update+0x69a>
 801d524:	f2c0 810c 	blt.w	801d740 <Argus_Dca_Update+0x6d0>
 801d528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d52c:	f080 80f0 	bcs.w	801d710 <Argus_Dca_Update+0x6a0>
 801d530:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 801d534:	005b      	lsls	r3, r3, #1
 801d536:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d53a:	ea4f 0444 	mov.w	r4, r4, lsl #1
 801d53e:	d3f9      	bcc.n	801d534 <Argus_Dca_Update+0x4c4>
 801d540:	2c00      	cmp	r4, #0
 801d542:	f040 80e7 	bne.w	801d714 <Argus_Dca_Update+0x6a4>
 801d546:	43cb      	mvns	r3, r1
 801d548:	0fdb      	lsrs	r3, r3, #31
 801d54a:	425b      	negs	r3, r3
 801d54c:	b29b      	uxth	r3, r3
 801d54e:	f82c 3b02 	strh.w	r3, [ip], #2
 801d552:	45c4      	cmp	ip, r8
 801d554:	d1e0      	bne.n	801d518 <Argus_Dca_Update+0x4a8>
 801d556:	f996 40f4 	ldrsb.w	r4, [r6, #244]	@ 0xf4
 801d55a:	2c00      	cmp	r4, #0
 801d55c:	f040 8143 	bne.w	801d7e6 <Argus_Dca_Update+0x776>
 801d560:	f04f 33ff 	mov.w	r3, #4294967295
 801d564:	61bb      	str	r3, [r7, #24]
 801d566:	e9d7 1017 	ldrd	r1, r0, [r7, #92]	@ 0x5c
 801d56a:	7d4b      	ldrb	r3, [r1, #21]
 801d56c:	6805      	ldr	r5, [r0, #0]
 801d56e:	f8b0 2098 	ldrh.w	r2, [r0, #152]	@ 0x98
 801d572:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 801d576:	b29b      	uxth	r3, r3
 801d578:	fba3 3605 	umull	r3, r6, r3, r5
 801d57c:	1aaa      	subs	r2, r5, r2
 801d57e:	633a      	str	r2, [r7, #48]	@ 0x30
 801d580:	0a1a      	lsrs	r2, r3, #8
 801d582:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
 801d586:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801d58a:	189e      	adds	r6, r3, r2
 801d58c:	62fe      	str	r6, [r7, #44]	@ 0x2c
 801d58e:	f890 30a8 	ldrb.w	r3, [r0, #168]	@ 0xa8
 801d592:	b3b3      	cbz	r3, 801d602 <Argus_Dca_Update+0x592>
 801d594:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801d598:	f8b0 80ae 	ldrh.w	r8, [r0, #174]	@ 0xae
 801d59c:	332d      	adds	r3, #45	@ 0x2d
 801d59e:	f1b9 0f00 	cmp.w	r9, #0
 801d5a2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801d5a6:	464a      	mov	r2, r9
 801d5a8:	f000 81ff 	beq.w	801d9aa <Argus_Dca_Update+0x93a>
 801d5ac:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801d5b0:	46e2      	mov	sl, ip
 801d5b2:	f2c0 81ae 	blt.w	801d912 <Argus_Dca_Update+0x8a2>
 801d5b6:	45cc      	cmp	ip, r9
 801d5b8:	f240 8336 	bls.w	801dc28 <Argus_Dca_Update+0xbb8>
 801d5bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801d5c0:	4696      	mov	lr, r2
 801d5c2:	0052      	lsls	r2, r2, #1
 801d5c4:	4594      	cmp	ip, r2
 801d5c6:	469b      	mov	fp, r3
 801d5c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d5cc:	d8f8      	bhi.n	801d5c0 <Argus_Dca_Update+0x550>
 801d5ce:	2b00      	cmp	r3, #0
 801d5d0:	f040 81ed 	bne.w	801d9ae <Argus_Dca_Update+0x93e>
 801d5d4:	ea9c 0f09 	teq	ip, r9
 801d5d8:	4699      	mov	r9, r3
 801d5da:	4baa      	ldr	r3, [pc, #680]	@ (801d884 <Argus_Dca_Update+0x814>)
 801d5dc:	4aaa      	ldr	r2, [pc, #680]	@ (801d888 <Argus_Dca_Update+0x818>)
 801d5de:	bf48      	it	mi
 801d5e0:	461a      	movmi	r2, r3
 801d5e2:	eba5 0808 	sub.w	r8, r5, r8
 801d5e6:	fba8 2502 	umull	r2, r5, r8, r2
 801d5ea:	0c13      	lsrs	r3, r2, #16
 801d5ec:	fb08 5509 	mla	r5, r8, r9, r5
 801d5f0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 801d5f4:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 801d5f8:	4413      	add	r3, r2
 801d5fa:	42b3      	cmp	r3, r6
 801d5fc:	bf28      	it	cs
 801d5fe:	4633      	movcs	r3, r6
 801d600:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d602:	7d0b      	ldrb	r3, [r1, #20]
 801d604:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 801d608:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d60c:	803b      	strh	r3, [r7, #0]
 801d60e:	713b      	strb	r3, [r7, #4]
 801d610:	898d      	ldrh	r5, [r1, #12]
 801d612:	813d      	strh	r5, [r7, #8]
 801d614:	2200      	movs	r2, #0
 801d616:	807a      	strh	r2, [r7, #2]
 801d618:	7acb      	ldrb	r3, [r1, #11]
 801d61a:	1a9b      	subs	r3, r3, r2
 801d61c:	bf18      	it	ne
 801d61e:	2301      	movne	r3, #1
 801d620:	733b      	strb	r3, [r7, #12]
 801d622:	7c8b      	ldrb	r3, [r1, #18]
 801d624:	737b      	strb	r3, [r7, #13]
 801d626:	73ba      	strb	r2, [r7, #14]
 801d628:	f991 3000 	ldrsb.w	r3, [r1]
 801d62c:	4293      	cmp	r3, r2
 801d62e:	dd07      	ble.n	801d640 <Argus_Dca_Update+0x5d0>
 801d630:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d632:	737a      	strb	r2, [r7, #13]
 801d634:	f890 20c0 	ldrb.w	r2, [r0, #192]	@ 0xc0
 801d638:	73ba      	strb	r2, [r7, #14]
 801d63a:	429d      	cmp	r5, r3
 801d63c:	bf88      	it	hi
 801d63e:	813b      	strhhi	r3, [r7, #8]
 801d640:	2500      	movs	r5, #0
 801d642:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 801d644:	84fd      	strh	r5, [r7, #38]	@ 0x26
 801d646:	f7fd feff 	bl	801b448 <Argus_Eval_ResetShotNoiseAmplitude>
 801d64a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d64c:	893e      	ldrh	r6, [r7, #8]
 801d64e:	f887 5035 	strb.w	r5, [r7, #53]	@ 0x35
 801d652:	e9d3 2124 	ldrd	r2, r1, [r3, #144]	@ 0x90
 801d656:	09b0      	lsrs	r0, r6, #6
 801d658:	2801      	cmp	r0, #1
 801d65a:	bf38      	it	cc
 801d65c:	2001      	movcc	r0, #1
 801d65e:	fb01 2200 	mla	r2, r1, r0, r2
 801d662:	e9d7 130b 	ldrd	r1, r3, [r7, #44]	@ 0x2c
 801d666:	428b      	cmp	r3, r1
 801d668:	bf28      	it	cs
 801d66a:	460b      	movcs	r3, r1
 801d66c:	f3c2 3140 	ubfx	r1, r2, #13, #1
 801d670:	eb01 3292 	add.w	r2, r1, r2, lsr #14
 801d674:	fbb3 f1f2 	udiv	r1, r3, r2
 801d678:	2901      	cmp	r1, #1
 801d67a:	bf38      	it	cc
 801d67c:	2101      	movcc	r1, #1
 801d67e:	86fd      	strh	r5, [r7, #54]	@ 0x36
 801d680:	69bd      	ldr	r5, [r7, #24]
 801d682:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801d686:	bf28      	it	cs
 801d688:	f44f 6180 	movcs.w	r1, #1024	@ 0x400
 801d68c:	1c6b      	adds	r3, r5, #1
 801d68e:	8179      	strh	r1, [r7, #10]
 801d690:	d024      	beq.n	801d6dc <Argus_Dca_Update+0x66c>
 801d692:	7b3b      	ldrb	r3, [r7, #12]
 801d694:	2b01      	cmp	r3, #1
 801d696:	d15f      	bne.n	801d758 <Argus_Dca_Update+0x6e8>
 801d698:	f897 c03e 	ldrb.w	ip, [r7, #62]	@ 0x3e
 801d69c:	f1bc 0f01 	cmp.w	ip, #1
 801d6a0:	bf38      	it	cc
 801d6a2:	f04f 0c01 	movcc.w	ip, #1
 801d6a6:	8bbb      	ldrh	r3, [r7, #28]
 801d6a8:	fb00 fe0c 	mul.w	lr, r0, ip
 801d6ac:	f3c5 000e 	ubfx	r0, r5, #0, #15
 801d6b0:	fb03 f000 	mul.w	r0, r3, r0
 801d6b4:	0bc2      	lsrs	r2, r0, #15
 801d6b6:	0bed      	lsrs	r5, r5, #15
 801d6b8:	fb03 2205 	mla	r2, r3, r5, r2
 801d6bc:	f3c0 3080 	ubfx	r0, r0, #14, #1
 801d6c0:	1813      	adds	r3, r2, r0
 801d6c2:	4573      	cmp	r3, lr
 801d6c4:	d34b      	bcc.n	801d75e <Argus_Dca_Update+0x6ee>
 801d6c6:	fbb3 f3fe 	udiv	r3, r3, lr
 801d6ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801d6ce:	bf28      	it	cs
 801d6d0:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 801d6d4:	428b      	cmp	r3, r1
 801d6d6:	bf28      	it	cs
 801d6d8:	460b      	movcs	r3, r1
 801d6da:	817b      	strh	r3, [r7, #10]
 801d6dc:	7b7b      	ldrb	r3, [r7, #13]
 801d6de:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 801d6e2:	2100      	movs	r1, #0
 801d6e4:	429a      	cmp	r2, r3
 801d6e6:	73f9      	strb	r1, [r7, #15]
 801d6e8:	d06f      	beq.n	801d7ca <Argus_Dca_Update+0x75a>
 801d6ea:	2001      	movs	r0, #1
 801d6ec:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d6ee:	7cd1      	ldrb	r1, [r2, #19]
 801d6f0:	4299      	cmp	r1, r3
 801d6f2:	d306      	bcc.n	801d702 <Argus_Dca_Update+0x692>
 801d6f4:	8939      	ldrh	r1, [r7, #8]
 801d6f6:	89d3      	ldrh	r3, [r2, #14]
 801d6f8:	4299      	cmp	r1, r3
 801d6fa:	d802      	bhi.n	801d702 <Argus_Dca_Update+0x692>
 801d6fc:	7b3b      	ldrb	r3, [r7, #12]
 801d6fe:	b903      	cbnz	r3, 801d702 <Argus_Dca_Update+0x692>
 801d700:	73f8      	strb	r0, [r7, #15]
 801d702:	4620      	mov	r0, r4
 801d704:	b005      	add	sp, #20
 801d706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d70a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d70e:	e71e      	b.n	801d54e <Argus_Dca_Update+0x4de>
 801d710:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 801d714:	2000      	movs	r0, #0
 801d716:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801d71a:	e000      	b.n	801d71e <Argus_Dca_Update+0x6ae>
 801d71c:	b152      	cbz	r2, 801d734 <Argus_Dca_Update+0x6c4>
 801d71e:	4293      	cmp	r3, r2
 801d720:	bf9c      	itt	ls
 801d722:	1ad2      	subls	r2, r2, r3
 801d724:	4320      	orrls	r0, r4
 801d726:	0864      	lsrs	r4, r4, #1
 801d728:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801d72c:	d1f6      	bne.n	801d71c <Argus_Dca_Update+0x6ac>
 801d72e:	4293      	cmp	r3, r2
 801d730:	bf98      	it	ls
 801d732:	3001      	addls	r0, #1
 801d734:	2900      	cmp	r1, #0
 801d736:	db45      	blt.n	801d7c4 <Argus_Dca_Update+0x754>
 801d738:	2800      	cmp	r0, #0
 801d73a:	dbe6      	blt.n	801d70a <Argus_Dca_Update+0x69a>
 801d73c:	b283      	uxth	r3, r0
 801d73e:	e706      	b.n	801d54e <Argus_Dca_Update+0x4de>
 801d740:	425b      	negs	r3, r3
 801d742:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d746:	f4ff aef3 	bcc.w	801d530 <Argus_Dca_Update+0x4c0>
 801d74a:	2b00      	cmp	r3, #0
 801d74c:	dae0      	bge.n	801d710 <Argus_Dca_Update+0x6a0>
 801d74e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801d752:	f44f 4400 	mov.w	r4, #32768	@ 0x8000
 801d756:	e7dd      	b.n	801d714 <Argus_Dca_Update+0x6a4>
 801d758:	f04f 0c04 	mov.w	ip, #4
 801d75c:	e7a3      	b.n	801d6a6 <Argus_Dca_Update+0x636>
 801d75e:	459c      	cmp	ip, r3
 801d760:	f200 80cf 	bhi.w	801d902 <Argus_Dca_Update+0x892>
 801d764:	fbb3 f2fc 	udiv	r2, r3, ip
 801d768:	0192      	lsls	r2, r2, #6
 801d76a:	42b2      	cmp	r2, r6
 801d76c:	bf28      	it	cs
 801d76e:	4632      	movcs	r2, r6
 801d770:	813a      	strh	r2, [r7, #8]
 801d772:	2301      	movs	r3, #1
 801d774:	e7ae      	b.n	801d6d4 <Argus_Dca_Update+0x664>
 801d776:	2a00      	cmp	r2, #0
 801d778:	da0e      	bge.n	801d798 <Argus_Dca_Update+0x728>
 801d77a:	428a      	cmp	r2, r1
 801d77c:	f040 80f4 	bne.w	801d968 <Argus_Dca_Update+0x8f8>
 801d780:	2800      	cmp	r0, #0
 801d782:	461c      	mov	r4, r3
 801d784:	da18      	bge.n	801d7b8 <Argus_Dca_Update+0x748>
 801d786:	4260      	negs	r0, r4
 801d788:	e66a      	b.n	801d460 <Argus_Dca_Update+0x3f0>
 801d78a:	2900      	cmp	r1, #0
 801d78c:	f000 8259 	beq.w	801dc42 <Argus_Dca_Update+0xbd2>
 801d790:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 801d794:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801d798:	2400      	movs	r4, #0
 801d79a:	e000      	b.n	801d79e <Argus_Dca_Update+0x72e>
 801d79c:	b151      	cbz	r1, 801d7b4 <Argus_Dca_Update+0x744>
 801d79e:	428a      	cmp	r2, r1
 801d7a0:	bf9c      	itt	ls
 801d7a2:	1a89      	subls	r1, r1, r2
 801d7a4:	431c      	orrls	r4, r3
 801d7a6:	085b      	lsrs	r3, r3, #1
 801d7a8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801d7ac:	d1f6      	bne.n	801d79c <Argus_Dca_Update+0x72c>
 801d7ae:	4291      	cmp	r1, r2
 801d7b0:	d300      	bcc.n	801d7b4 <Argus_Dca_Update+0x744>
 801d7b2:	3401      	adds	r4, #1
 801d7b4:	2800      	cmp	r0, #0
 801d7b6:	dbe6      	blt.n	801d786 <Argus_Dca_Update+0x716>
 801d7b8:	2c00      	cmp	r4, #0
 801d7ba:	bfac      	ite	ge
 801d7bc:	4620      	movge	r0, r4
 801d7be:	f06f 4000 	mvnlt.w	r0, #2147483648	@ 0x80000000
 801d7c2:	e64d      	b.n	801d460 <Argus_Dca_Update+0x3f0>
 801d7c4:	4243      	negs	r3, r0
 801d7c6:	b29b      	uxth	r3, r3
 801d7c8:	e6c1      	b.n	801d54e <Argus_Dca_Update+0x4de>
 801d7ca:	8939      	ldrh	r1, [r7, #8]
 801d7cc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801d7ce:	4291      	cmp	r1, r2
 801d7d0:	d18b      	bne.n	801d6ea <Argus_Dca_Update+0x67a>
 801d7d2:	7b3a      	ldrb	r2, [r7, #12]
 801d7d4:	2a01      	cmp	r2, #1
 801d7d6:	d188      	bne.n	801d6ea <Argus_Dca_Update+0x67a>
 801d7d8:	2202      	movs	r2, #2
 801d7da:	73fa      	strb	r2, [r7, #15]
 801d7dc:	2003      	movs	r0, #3
 801d7de:	e785      	b.n	801d6ec <Argus_Dca_Update+0x67c>
 801d7e0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801d7e4:	e61e      	b.n	801d424 <Argus_Dca_Update+0x3b4>
 801d7e6:	f896 3092 	ldrb.w	r3, [r6, #146]	@ 0x92
 801d7ea:	2b02      	cmp	r3, #2
 801d7ec:	f000 8174 	beq.w	801dad8 <Argus_Dca_Update+0xa68>
 801d7f0:	2b03      	cmp	r3, #3
 801d7f2:	f000 8168 	beq.w	801dac6 <Argus_Dca_Update+0xa56>
 801d7f6:	2b01      	cmp	r3, #1
 801d7f8:	f000 80ed 	beq.w	801d9d6 <Argus_Dca_Update+0x966>
 801d7fc:	4823      	ldr	r0, [pc, #140]	@ (801d88c <Argus_Dca_Update+0x81c>)
 801d7fe:	f7e8 fe85 	bl	800650c <print>
 801d802:	2300      	movs	r3, #0
 801d804:	61bb      	str	r3, [r7, #24]
 801d806:	e158      	b.n	801daba <Argus_Dca_Update+0xa4a>
 801d808:	2000      	movs	r0, #0
 801d80a:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 801d80e:	e000      	b.n	801d812 <Argus_Dca_Update+0x7a2>
 801d810:	b151      	cbz	r1, 801d828 <Argus_Dca_Update+0x7b8>
 801d812:	4299      	cmp	r1, r3
 801d814:	bf24      	itt	cs
 801d816:	1ac9      	subcs	r1, r1, r3
 801d818:	4310      	orrcs	r0, r2
 801d81a:	0852      	lsrs	r2, r2, #1
 801d81c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801d820:	d1f6      	bne.n	801d810 <Argus_Dca_Update+0x7a0>
 801d822:	4299      	cmp	r1, r3
 801d824:	d300      	bcc.n	801d828 <Argus_Dca_Update+0x7b8>
 801d826:	3001      	adds	r0, #1
 801d828:	2800      	cmp	r0, #0
 801d82a:	f6ff ae67 	blt.w	801d4fc <Argus_Dca_Update+0x48c>
 801d82e:	b280      	uxth	r0, r0
 801d830:	e666      	b.n	801d500 <Argus_Dca_Update+0x490>
 801d832:	2400      	movs	r4, #0
 801d834:	1ac8      	subs	r0, r1, r3
 801d836:	b149      	cbz	r1, 801d84c <Argus_Dca_Update+0x7dc>
 801d838:	428b      	cmp	r3, r1
 801d83a:	d817      	bhi.n	801d86c <Argus_Dca_Update+0x7fc>
 801d83c:	4314      	orrs	r4, r2
 801d83e:	0852      	lsrs	r2, r2, #1
 801d840:	ea4f 0140 	mov.w	r1, r0, lsl #1
 801d844:	d1f6      	bne.n	801d834 <Argus_Dca_Update+0x7c4>
 801d846:	428b      	cmp	r3, r1
 801d848:	d800      	bhi.n	801d84c <Argus_Dca_Update+0x7dc>
 801d84a:	3401      	adds	r4, #1
 801d84c:	2c00      	cmp	r4, #0
 801d84e:	f6ff adc1 	blt.w	801d3d4 <Argus_Dca_Update+0x364>
 801d852:	fab4 f384 	clz	r3, r4
 801d856:	f1c3 021e 	rsb	r2, r3, #30
 801d85a:	40d4      	lsrs	r4, r2
 801d85c:	f1c3 031f 	rsb	r3, r3, #31
 801d860:	2c03      	cmp	r4, #3
 801d862:	bf08      	it	eq
 801d864:	3301      	addeq	r3, #1
 801d866:	3b10      	subs	r3, #16
 801d868:	b2db      	uxtb	r3, r3
 801d86a:	e5b4      	b.n	801d3d6 <Argus_Dca_Update+0x366>
 801d86c:	0852      	lsrs	r2, r2, #1
 801d86e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801d872:	d1df      	bne.n	801d834 <Argus_Dca_Update+0x7c4>
 801d874:	e7e7      	b.n	801d846 <Argus_Dca_Update+0x7d6>
 801d876:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801d87a:	2000      	movs	r0, #0
 801d87c:	f649 4140 	movw	r1, #40000	@ 0x9c40
 801d880:	e007      	b.n	801d892 <Argus_Dca_Update+0x822>
 801d882:	bf00      	nop
 801d884:	80010000 	.word	0x80010000
 801d888:	80010001 	.word	0x80010001
 801d88c:	0802f90c 	.word	0x0802f90c
 801d890:	b151      	cbz	r1, 801d8a8 <Argus_Dca_Update+0x838>
 801d892:	428b      	cmp	r3, r1
 801d894:	bf9c      	itt	ls
 801d896:	1ac9      	subls	r1, r1, r3
 801d898:	4310      	orrls	r0, r2
 801d89a:	0852      	lsrs	r2, r2, #1
 801d89c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801d8a0:	d1f6      	bne.n	801d890 <Argus_Dca_Update+0x820>
 801d8a2:	4299      	cmp	r1, r3
 801d8a4:	bf28      	it	cs
 801d8a6:	3001      	addcs	r0, #1
 801d8a8:	2c00      	cmp	r4, #0
 801d8aa:	f2c0 8092 	blt.w	801d9d2 <Argus_Dca_Update+0x962>
 801d8ae:	2800      	cmp	r0, #0
 801d8b0:	bfb8      	it	lt
 801d8b2:	f06f 4000 	mvnlt.w	r0, #2147483648	@ 0x80000000
 801d8b6:	e5b5      	b.n	801d424 <Argus_Dca_Update+0x3b4>
 801d8b8:	425b      	negs	r3, r3
 801d8ba:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 801d8be:	4293      	cmp	r3, r2
 801d8c0:	f67f ad9e 	bls.w	801d400 <Argus_Dca_Update+0x390>
 801d8c4:	2b00      	cmp	r3, #0
 801d8c6:	dad6      	bge.n	801d876 <Argus_Dca_Update+0x806>
 801d8c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801d8cc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 801d8d0:	e7d3      	b.n	801d87a <Argus_Dca_Update+0x80a>
 801d8d2:	f896 306b 	ldrb.w	r3, [r6, #107]	@ 0x6b
 801d8d6:	08db      	lsrs	r3, r3, #3
 801d8d8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 801d8dc:	e5f1      	b.n	801d4c2 <Argus_Dca_Update+0x452>
 801d8de:	f896 306c 	ldrb.w	r3, [r6, #108]	@ 0x6c
 801d8e2:	f896 206b 	ldrb.w	r2, [r6, #107]	@ 0x6b
 801d8e6:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801d8ea:	eb03 03d2 	add.w	r3, r3, r2, lsr #3
 801d8ee:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 801d8f2:	e5e6      	b.n	801d4c2 <Argus_Dca_Update+0x452>
 801d8f4:	f896 306c 	ldrb.w	r3, [r6, #108]	@ 0x6c
 801d8f8:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801d8fc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 801d900:	e5df      	b.n	801d4c2 <Argus_Dca_Update+0x452>
 801d902:	2200      	movs	r2, #0
 801d904:	2b03      	cmp	r3, #3
 801d906:	733a      	strb	r2, [r7, #12]
 801d908:	bf86      	itte	hi
 801d90a:	089a      	lsrhi	r2, r3, #2
 801d90c:	0192      	lslhi	r2, r2, #6
 801d90e:	2240      	movls	r2, #64	@ 0x40
 801d910:	e72b      	b.n	801d76a <Argus_Dca_Update+0x6fa>
 801d912:	f1c9 0200 	rsb	r2, r9, #0
 801d916:	4594      	cmp	ip, r2
 801d918:	f63f ae50 	bhi.w	801d5bc <Argus_Dca_Update+0x54c>
 801d91c:	2a00      	cmp	r2, #0
 801d91e:	f2c0 8187 	blt.w	801dc30 <Argus_Dca_Update+0xbc0>
 801d922:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801d926:	4696      	mov	lr, r2
 801d928:	4662      	mov	r2, ip
 801d92a:	f1bc 0f00 	cmp.w	ip, #0
 801d92e:	d00d      	beq.n	801d94c <Argus_Dca_Update+0x8dc>
 801d930:	2200      	movs	r2, #0
 801d932:	e002      	b.n	801d93a <Argus_Dca_Update+0x8ca>
 801d934:	f1bc 0f00 	cmp.w	ip, #0
 801d938:	d008      	beq.n	801d94c <Argus_Dca_Update+0x8dc>
 801d93a:	45e6      	cmp	lr, ip
 801d93c:	bf9c      	itt	ls
 801d93e:	ebac 0c0e 	subls.w	ip, ip, lr
 801d942:	431a      	orrls	r2, r3
 801d944:	085b      	lsrs	r3, r3, #1
 801d946:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 801d94a:	d1f3      	bne.n	801d934 <Argus_Dca_Update+0x8c4>
 801d94c:	45e6      	cmp	lr, ip
 801d94e:	bf98      	it	ls
 801d950:	3201      	addls	r2, #1
 801d952:	ea9a 0f09 	teq	sl, r9
 801d956:	d437      	bmi.n	801d9c8 <Argus_Dca_Update+0x958>
 801d958:	2a00      	cmp	r2, #0
 801d95a:	f2c0 8128 	blt.w	801dbae <Argus_Dca_Update+0xb3e>
 801d95e:	f5c2 3280 	rsb	r2, r2, #65536	@ 0x10000
 801d962:	f04f 0900 	mov.w	r9, #0
 801d966:	e63c      	b.n	801d5e2 <Argus_Dca_Update+0x572>
 801d968:	f034 4300 	bics.w	r3, r4, #2147483648	@ 0x80000000
 801d96c:	f02c 4200 	bic.w	r2, ip, #2147483648	@ 0x80000000
 801d970:	f47f af12 	bne.w	801d798 <Argus_Dca_Update+0x728>
 801d974:	461c      	mov	r4, r3
 801d976:	e71a      	b.n	801d7ae <Argus_Dca_Update+0x73e>
 801d978:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801d97c:	2100      	movs	r1, #0
 801d97e:	1aa0      	subs	r0, r4, r2
 801d980:	b14c      	cbz	r4, 801d996 <Argus_Dca_Update+0x926>
 801d982:	42a2      	cmp	r2, r4
 801d984:	d80c      	bhi.n	801d9a0 <Argus_Dca_Update+0x930>
 801d986:	4319      	orrs	r1, r3
 801d988:	085b      	lsrs	r3, r3, #1
 801d98a:	ea4f 0440 	mov.w	r4, r0, lsl #1
 801d98e:	d1f6      	bne.n	801d97e <Argus_Dca_Update+0x90e>
 801d990:	42a2      	cmp	r2, r4
 801d992:	d800      	bhi.n	801d996 <Argus_Dca_Update+0x926>
 801d994:	3101      	adds	r1, #1
 801d996:	2900      	cmp	r1, #0
 801d998:	f6ff ad03 	blt.w	801d3a2 <Argus_Dca_Update+0x332>
 801d99c:	b289      	uxth	r1, r1
 801d99e:	e502      	b.n	801d3a6 <Argus_Dca_Update+0x336>
 801d9a0:	085b      	lsrs	r3, r3, #1
 801d9a2:	ea4f 0444 	mov.w	r4, r4, lsl #1
 801d9a6:	d1ea      	bne.n	801d97e <Argus_Dca_Update+0x90e>
 801d9a8:	e7f2      	b.n	801d990 <Argus_Dca_Update+0x920>
 801d9aa:	4aac      	ldr	r2, [pc, #688]	@ (801dc5c <Argus_Dca_Update+0xbec>)
 801d9ac:	e619      	b.n	801d5e2 <Argus_Dca_Update+0x572>
 801d9ae:	2a00      	cmp	r2, #0
 801d9b0:	dab9      	bge.n	801d926 <Argus_Dca_Update+0x8b6>
 801d9b2:	f03b 4300 	bics.w	r3, fp, #2147483648	@ 0x80000000
 801d9b6:	f000 80a9 	beq.w	801db0c <Argus_Dca_Update+0xa9c>
 801d9ba:	f1bc 0f00 	cmp.w	ip, #0
 801d9be:	d1b7      	bne.n	801d930 <Argus_Dca_Update+0x8c0>
 801d9c0:	f1b9 0f00 	cmp.w	r9, #0
 801d9c4:	4662      	mov	r2, ip
 801d9c6:	daca      	bge.n	801d95e <Argus_Dca_Update+0x8ee>
 801d9c8:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 801d9cc:	f04f 0900 	mov.w	r9, #0
 801d9d0:	e607      	b.n	801d5e2 <Argus_Dca_Update+0x572>
 801d9d2:	4240      	negs	r0, r0
 801d9d4:	e526      	b.n	801d424 <Argus_Dca_Update+0x3b4>
 801d9d6:	f896 306b 	ldrb.w	r3, [r6, #107]	@ 0x6b
 801d9da:	08d9      	lsrs	r1, r3, #3
 801d9dc:	6972      	ldr	r2, [r6, #20]
 801d9de:	4ba0      	ldr	r3, [pc, #640]	@ (801dc60 <Argus_Dca_Update+0xbf0>)
 801d9e0:	f1a2 00fa 	sub.w	r0, r2, #250	@ 0xfa
 801d9e4:	4298      	cmp	r0, r3
 801d9e6:	d866      	bhi.n	801dab6 <Argus_Dca_Update+0xa46>
 801d9e8:	6874      	ldr	r4, [r6, #4]
 801d9ea:	2cf9      	cmp	r4, #249	@ 0xf9
 801d9ec:	d963      	bls.n	801dab6 <Argus_Dca_Update+0xa46>
 801d9ee:	f8b6 3084 	ldrh.w	r3, [r6, #132]	@ 0x84
 801d9f2:	ba5b      	rev16	r3, r3
 801d9f4:	f3c3 1049 	ubfx	r0, r3, #5, #10
 801d9f8:	f8b6 3063 	ldrh.w	r3, [r6, #99]	@ 0x63
 801d9fc:	ba5b      	rev16	r3, r3
 801d9fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801da02:	fb00 3303 	mla	r3, r0, r3, r3
 801da06:	fb01 f303 	mul.w	r3, r1, r3
 801da0a:	f5b3 0ffa 	cmp.w	r3, #8192000	@ 0x7d0000
 801da0e:	d852      	bhi.n	801dab6 <Argus_Dca_Update+0xa46>
 801da10:	429a      	cmp	r2, r3
 801da12:	d27d      	bcs.n	801db10 <Argus_Dca_Update+0xaa0>
 801da14:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 801da18:	0052      	lsls	r2, r2, #1
 801da1a:	4293      	cmp	r3, r2
 801da1c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801da20:	d8fa      	bhi.n	801da18 <Argus_Dca_Update+0x9a8>
 801da22:	2900      	cmp	r1, #0
 801da24:	f040 80e2 	bne.w	801dbec <Argus_Dca_Update+0xb7c>
 801da28:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801da2c:	f8b5 0298 	ldrh.w	r0, [r5, #664]	@ 0x298
 801da30:	fba0 3203 	umull	r3, r2, r0, r3
 801da34:	fb00 2101 	mla	r1, r0, r1, r2
 801da38:	0bda      	lsrs	r2, r3, #15
 801da3a:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 801da3e:	f3c3 3380 	ubfx	r3, r3, #14, #1
 801da42:	4413      	add	r3, r2
 801da44:	0c1a      	lsrs	r2, r3, #16
 801da46:	fba4 1202 	umull	r1, r2, r4, r2
 801da4a:	2a00      	cmp	r2, #0
 801da4c:	f040 80ff 	bne.w	801dc4e <Argus_Dca_Update+0xbde>
 801da50:	fba3 3404 	umull	r3, r4, r3, r4
 801da54:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 801da58:	0c1b      	lsrs	r3, r3, #16
 801da5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801da5e:	4413      	add	r3, r2
 801da60:	f06f 0201 	mvn.w	r2, #1
 801da64:	429a      	cmp	r2, r3
 801da66:	bf28      	it	cs
 801da68:	461a      	movcs	r2, r3
 801da6a:	61ba      	str	r2, [r7, #24]
 801da6c:	b32b      	cbz	r3, 801daba <Argus_Dca_Update+0xa4a>
 801da6e:	0bd5      	lsrs	r5, r2, #15
 801da70:	f3c2 020e 	ubfx	r2, r2, #0, #15
 801da74:	8bbc      	ldrh	r4, [r7, #28]
 801da76:	f897 003e 	ldrb.w	r0, [r7, #62]	@ 0x3e
 801da7a:	f8b6 1104 	ldrh.w	r1, [r6, #260]	@ 0x104
 801da7e:	fb04 f202 	mul.w	r2, r4, r2
 801da82:	0bd3      	lsrs	r3, r2, #15
 801da84:	fb04 3305 	mla	r3, r4, r5, r3
 801da88:	f3c2 3280 	ubfx	r2, r2, #14, #1
 801da8c:	2801      	cmp	r0, #1
 801da8e:	4413      	add	r3, r2
 801da90:	ea4f 1291 	mov.w	r2, r1, lsr #6
 801da94:	bf38      	it	cc
 801da96:	2001      	movcc	r0, #1
 801da98:	2a01      	cmp	r2, #1
 801da9a:	bf38      	it	cc
 801da9c:	2201      	movcc	r2, #1
 801da9e:	fb00 f202 	mul.w	r2, r0, r2
 801daa2:	4293      	cmp	r3, r2
 801daa4:	d242      	bcs.n	801db2c <Argus_Dca_Update+0xabc>
 801daa6:	4298      	cmp	r0, r3
 801daa8:	d936      	bls.n	801db18 <Argus_Dca_Update+0xaa8>
 801daaa:	486e      	ldr	r0, [pc, #440]	@ (801dc64 <Argus_Dca_Update+0xbf4>)
 801daac:	f7e8 fd2e 	bl	800650c <print>
 801dab0:	f06f 0465 	mvn.w	r4, #101	@ 0x65
 801dab4:	e557      	b.n	801d566 <Argus_Dca_Update+0x4f6>
 801dab6:	2300      	movs	r3, #0
 801dab8:	61bb      	str	r3, [r7, #24]
 801daba:	486b      	ldr	r0, [pc, #428]	@ (801dc68 <Argus_Dca_Update+0xbf8>)
 801dabc:	f7e8 fd26 	bl	800650c <print>
 801dac0:	f06f 0465 	mvn.w	r4, #101	@ 0x65
 801dac4:	e54f      	b.n	801d566 <Argus_Dca_Update+0x4f6>
 801dac6:	f896 306c 	ldrb.w	r3, [r6, #108]	@ 0x6c
 801daca:	f896 106b 	ldrb.w	r1, [r6, #107]	@ 0x6b
 801dace:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801dad2:	eb03 01d1 	add.w	r1, r3, r1, lsr #3
 801dad6:	e781      	b.n	801d9dc <Argus_Dca_Update+0x96c>
 801dad8:	f896 306c 	ldrb.w	r3, [r6, #108]	@ 0x6c
 801dadc:	f3c3 0144 	ubfx	r1, r3, #1, #5
 801dae0:	e77c      	b.n	801d9dc <Argus_Dca_Update+0x96c>
 801dae2:	084b      	lsrs	r3, r1, #1
 801dae4:	ea4f 0251 	mov.w	r2, r1, lsr #1
 801dae8:	bf18      	it	ne
 801daea:	2200      	movne	r2, #0
 801daec:	f47f ac36 	bne.w	801d35c <Argus_Dca_Update+0x2ec>
 801daf0:	7b30      	ldrb	r0, [r6, #12]
 801daf2:	f1c0 0080 	rsb	r0, r0, #128	@ 0x80
 801daf6:	b2c0      	uxtb	r0, r0
 801daf8:	fbb0 f1f4 	udiv	r1, r0, r4
 801dafc:	f887 1020 	strb.w	r1, [r7, #32]
 801db00:	e441      	b.n	801d386 <Argus_Dca_Update+0x316>
 801db02:	084a      	lsrs	r2, r1, #1
 801db04:	2308      	movs	r3, #8
 801db06:	e43e      	b.n	801d386 <Argus_Dca_Update+0x316>
 801db08:	2260      	movs	r2, #96	@ 0x60
 801db0a:	e424      	b.n	801d356 <Argus_Dca_Update+0x2e6>
 801db0c:	461a      	mov	r2, r3
 801db0e:	e71d      	b.n	801d94c <Argus_Dca_Update+0x8dc>
 801db10:	2b00      	cmp	r3, #0
 801db12:	d169      	bne.n	801dbe8 <Argus_Dca_Update+0xb78>
 801db14:	61bb      	str	r3, [r7, #24]
 801db16:	e7d0      	b.n	801daba <Argus_Dca_Update+0xa4a>
 801db18:	fbb3 f3f0 	udiv	r3, r3, r0
 801db1c:	019b      	lsls	r3, r3, #6
 801db1e:	428b      	cmp	r3, r1
 801db20:	bf28      	it	cs
 801db22:	460b      	movcs	r3, r1
 801db24:	b29b      	uxth	r3, r3
 801db26:	4299      	cmp	r1, r3
 801db28:	bf28      	it	cs
 801db2a:	4619      	movcs	r1, r3
 801db2c:	84b9      	strh	r1, [r7, #36]	@ 0x24
 801db2e:	2400      	movs	r4, #0
 801db30:	e519      	b.n	801d566 <Argus_Dca_Update+0x4f6>
 801db32:	084a      	lsrs	r2, r1, #1
 801db34:	2310      	movs	r3, #16
 801db36:	e426      	b.n	801d386 <Argus_Dca_Update+0x316>
 801db38:	7b30      	ldrb	r0, [r6, #12]
 801db3a:	f1c0 0080 	rsb	r0, r0, #128	@ 0x80
 801db3e:	b2c0      	uxtb	r0, r0
 801db40:	1a83      	subs	r3, r0, r2
 801db42:	b2db      	uxtb	r3, r3
 801db44:	fbb3 f3f4 	udiv	r3, r3, r4
 801db48:	f887 3020 	strb.w	r3, [r7, #32]
 801db4c:	f7ff bb53 	b.w	801d1f6 <Argus_Dca_Update+0x186>
 801db50:	2210      	movs	r2, #16
 801db52:	e400      	b.n	801d356 <Argus_Dca_Update+0x2e6>
 801db54:	2218      	movs	r2, #24
 801db56:	f7ff bbfe 	b.w	801d356 <Argus_Dca_Update+0x2e6>
 801db5a:	084a      	lsrs	r2, r1, #1
 801db5c:	2318      	movs	r3, #24
 801db5e:	e412      	b.n	801d386 <Argus_Dca_Update+0x316>
 801db60:	2220      	movs	r2, #32
 801db62:	f7ff bbf8 	b.w	801d356 <Argus_Dca_Update+0x2e6>
 801db66:	084a      	lsrs	r2, r1, #1
 801db68:	2320      	movs	r3, #32
 801db6a:	e40c      	b.n	801d386 <Argus_Dca_Update+0x316>
 801db6c:	084a      	lsrs	r2, r1, #1
 801db6e:	2328      	movs	r3, #40	@ 0x28
 801db70:	e409      	b.n	801d386 <Argus_Dca_Update+0x316>
 801db72:	2228      	movs	r2, #40	@ 0x28
 801db74:	f7ff bbef 	b.w	801d356 <Argus_Dca_Update+0x2e6>
 801db78:	084a      	lsrs	r2, r1, #1
 801db7a:	2330      	movs	r3, #48	@ 0x30
 801db7c:	e403      	b.n	801d386 <Argus_Dca_Update+0x316>
 801db7e:	2230      	movs	r2, #48	@ 0x30
 801db80:	f7ff bbe9 	b.w	801d356 <Argus_Dca_Update+0x2e6>
 801db84:	084a      	lsrs	r2, r1, #1
 801db86:	2338      	movs	r3, #56	@ 0x38
 801db88:	f7ff bbfd 	b.w	801d386 <Argus_Dca_Update+0x316>
 801db8c:	2240      	movs	r2, #64	@ 0x40
 801db8e:	f7ff bbe2 	b.w	801d356 <Argus_Dca_Update+0x2e6>
 801db92:	2238      	movs	r2, #56	@ 0x38
 801db94:	f7ff bbdf 	b.w	801d356 <Argus_Dca_Update+0x2e6>
 801db98:	084a      	lsrs	r2, r1, #1
 801db9a:	2340      	movs	r3, #64	@ 0x40
 801db9c:	f7ff bbf3 	b.w	801d386 <Argus_Dca_Update+0x316>
 801dba0:	084a      	lsrs	r2, r1, #1
 801dba2:	2348      	movs	r3, #72	@ 0x48
 801dba4:	f7ff bbef 	b.w	801d386 <Argus_Dca_Update+0x316>
 801dba8:	2248      	movs	r2, #72	@ 0x48
 801dbaa:	f7ff bbd4 	b.w	801d356 <Argus_Dca_Update+0x2e6>
 801dbae:	4a2b      	ldr	r2, [pc, #172]	@ (801dc5c <Argus_Dca_Update+0xbec>)
 801dbb0:	f04f 0900 	mov.w	r9, #0
 801dbb4:	e515      	b.n	801d5e2 <Argus_Dca_Update+0x572>
 801dbb6:	084a      	lsrs	r2, r1, #1
 801dbb8:	2350      	movs	r3, #80	@ 0x50
 801dbba:	f7ff bbe4 	b.w	801d386 <Argus_Dca_Update+0x316>
 801dbbe:	2250      	movs	r2, #80	@ 0x50
 801dbc0:	f7ff bbc9 	b.w	801d356 <Argus_Dca_Update+0x2e6>
 801dbc4:	084a      	lsrs	r2, r1, #1
 801dbc6:	2358      	movs	r3, #88	@ 0x58
 801dbc8:	f7ff bbdd 	b.w	801d386 <Argus_Dca_Update+0x316>
 801dbcc:	084a      	lsrs	r2, r1, #1
 801dbce:	2360      	movs	r3, #96	@ 0x60
 801dbd0:	f7ff bbd9 	b.w	801d386 <Argus_Dca_Update+0x316>
 801dbd4:	2258      	movs	r2, #88	@ 0x58
 801dbd6:	f7ff bbbe 	b.w	801d356 <Argus_Dca_Update+0x2e6>
 801dbda:	2268      	movs	r2, #104	@ 0x68
 801dbdc:	f7ff bbbb 	b.w	801d356 <Argus_Dca_Update+0x2e6>
 801dbe0:	084a      	lsrs	r2, r1, #1
 801dbe2:	2368      	movs	r3, #104	@ 0x68
 801dbe4:	f7ff bbcf 	b.w	801d386 <Argus_Dca_Update+0x316>
 801dbe8:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 801dbec:	2000      	movs	r0, #0
 801dbee:	e000      	b.n	801dbf2 <Argus_Dca_Update+0xb82>
 801dbf0:	b153      	cbz	r3, 801dc08 <Argus_Dca_Update+0xb98>
 801dbf2:	4293      	cmp	r3, r2
 801dbf4:	bf24      	itt	cs
 801dbf6:	1a9b      	subcs	r3, r3, r2
 801dbf8:	4308      	orrcs	r0, r1
 801dbfa:	0849      	lsrs	r1, r1, #1
 801dbfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801dc00:	d1f6      	bne.n	801dbf0 <Argus_Dca_Update+0xb80>
 801dc02:	429a      	cmp	r2, r3
 801dc04:	d800      	bhi.n	801dc08 <Argus_Dca_Update+0xb98>
 801dc06:	3001      	adds	r0, #1
 801dc08:	2800      	cmp	r0, #0
 801dc0a:	db1c      	blt.n	801dc46 <Argus_Dca_Update+0xbd6>
 801dc0c:	4603      	mov	r3, r0
 801dc0e:	17c1      	asrs	r1, r0, #31
 801dc10:	e70c      	b.n	801da2c <Argus_Dca_Update+0x9bc>
 801dc12:	084a      	lsrs	r2, r1, #1
 801dc14:	2378      	movs	r3, #120	@ 0x78
 801dc16:	f7ff bbb6 	b.w	801d386 <Argus_Dca_Update+0x316>
 801dc1a:	084a      	lsrs	r2, r1, #1
 801dc1c:	2370      	movs	r3, #112	@ 0x70
 801dc1e:	f7ff bbb2 	b.w	801d386 <Argus_Dca_Update+0x316>
 801dc22:	2270      	movs	r2, #112	@ 0x70
 801dc24:	f7ff bb97 	b.w	801d356 <Argus_Dca_Update+0x2e6>
 801dc28:	46ce      	mov	lr, r9
 801dc2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801dc2e:	e67b      	b.n	801d928 <Argus_Dca_Update+0x8b8>
 801dc30:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 801dc34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801dc38:	f1bc 0f00 	cmp.w	ip, #0
 801dc3c:	f47f ae78 	bne.w	801d930 <Argus_Dca_Update+0x8c0>
 801dc40:	e6be      	b.n	801d9c0 <Argus_Dca_Update+0x950>
 801dc42:	4608      	mov	r0, r1
 801dc44:	e40c      	b.n	801d460 <Argus_Dca_Update+0x3f0>
 801dc46:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801dc4a:	2100      	movs	r1, #0
 801dc4c:	e6ee      	b.n	801da2c <Argus_Dca_Update+0x9bc>
 801dc4e:	f06f 0301 	mvn.w	r3, #1
 801dc52:	4d06      	ldr	r5, [pc, #24]	@ (801dc6c <Argus_Dca_Update+0xbfc>)
 801dc54:	61bb      	str	r3, [r7, #24]
 801dc56:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801dc5a:	e70b      	b.n	801da74 <Argus_Dca_Update+0xa04>
 801dc5c:	80010001 	.word	0x80010001
 801dc60:	000185a6 	.word	0x000185a6
 801dc64:	0802f960 	.word	0x0802f960
 801dc68:	0802f930 	.word	0x0802f930
 801dc6c:	0001ffff 	.word	0x0001ffff

0801dc70 <Argus_Dca_Apply>:
 801dc70:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 801dc72:	f993 3000 	ldrsb.w	r3, [r3]
 801dc76:	b903      	cbnz	r3, 801dc7a <Argus_Dca_Apply+0xa>
 801dc78:	4770      	bx	lr
 801dc7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc7e:	8803      	ldrh	r3, [r0, #0]
 801dc80:	460d      	mov	r5, r1
 801dc82:	8901      	ldrh	r1, [r0, #8]
 801dc84:	b29b      	uxth	r3, r3
 801dc86:	428b      	cmp	r3, r1
 801dc88:	b083      	sub	sp, #12
 801dc8a:	4604      	mov	r4, r0
 801dc8c:	d05e      	beq.n	801dd4c <Argus_Dca_Apply+0xdc>
 801dc8e:	8803      	ldrh	r3, [r0, #0]
 801dc90:	8802      	ldrh	r2, [r0, #0]
 801dc92:	8826      	ldrh	r6, [r4, #0]
 801dc94:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801dc98:	b2b6      	uxth	r6, r6
 801dc9a:	b290      	uxth	r0, r2
 801dc9c:	42be      	cmp	r6, r7
 801dc9e:	ea4f 0241 	mov.w	r2, r1, lsl #1
 801dca2:	b29b      	uxth	r3, r3
 801dca4:	f002 027e 	and.w	r2, r2, #126	@ 0x7e
 801dca8:	ea4f 1191 	mov.w	r1, r1, lsr #6
 801dcac:	f000 80c8 	beq.w	801de40 <Argus_Dca_Apply+0x1d0>
 801dcb0:	005b      	lsls	r3, r3, #1
 801dcb2:	f013 037e 	ands.w	r3, r3, #126	@ 0x7e
 801dcb6:	f000 80b5 	beq.w	801de24 <Argus_Dca_Apply+0x1b4>
 801dcba:	2a00      	cmp	r2, #0
 801dcbc:	f040 819a 	bne.w	801dff4 <Argus_Dca_Apply+0x384>
 801dcc0:	2001      	movs	r0, #1
 801dcc2:	4281      	cmp	r1, r0
 801dcc4:	f04f 0280 	mov.w	r2, #128	@ 0x80
 801dcc8:	d00e      	beq.n	801dce8 <Argus_Dca_Apply+0x78>
 801dcca:	f895 003d 	ldrb.w	r0, [r5, #61]	@ 0x3d
 801dcce:	f885 103e 	strb.w	r1, [r5, #62]	@ 0x3e
 801dcd2:	f020 0003 	bic.w	r0, r0, #3
 801dcd6:	ea40 2111 	orr.w	r1, r0, r1, lsr #8
 801dcda:	f885 103d 	strb.w	r1, [r5, #61]	@ 0x3d
 801dcde:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801dce0:	6f81      	ldr	r1, [r0, #120]	@ 0x78
 801dce2:	f041 0110 	orr.w	r1, r1, #16
 801dce6:	6781      	str	r1, [r0, #120]	@ 0x78
 801dce8:	429a      	cmp	r2, r3
 801dcea:	d02f      	beq.n	801dd4c <Argus_Dca_Apply+0xdc>
 801dcec:	2a80      	cmp	r2, #128	@ 0x80
 801dcee:	6e26      	ldr	r6, [r4, #96]	@ 0x60
 801dcf0:	f000 818b 	beq.w	801e00a <Argus_Dca_Apply+0x39a>
 801dcf4:	f896 800a 	ldrb.w	r8, [r6, #10]
 801dcf8:	f894 7020 	ldrb.w	r7, [r4, #32]
 801dcfc:	fb17 f708 	smulbb	r7, r7, r8
 801dd00:	b2ff      	uxtb	r7, r7
 801dd02:	ea4f 51c8 	mov.w	r1, r8, lsl #23
 801dd06:	f1b8 0f00 	cmp.w	r8, #0
 801dd0a:	f000 80a4 	beq.w	801de56 <Argus_Dca_Apply+0x1e6>
 801dd0e:	fb02 f307 	mul.w	r3, r2, r7
 801dd12:	428b      	cmp	r3, r1
 801dd14:	f240 81e8 	bls.w	801e0e8 <Argus_Dca_Apply+0x478>
 801dd18:	e7fe      	b.n	801dd18 <Argus_Dca_Apply+0xa8>
 801dd1a:	f8d6 104d 	ldr.w	r1, [r6, #77]	@ 0x4d
 801dd1e:	f8d6 2051 	ldr.w	r2, [r6, #81]	@ 0x51
 801dd22:	f8d6 3055 	ldr.w	r3, [r6, #85]	@ 0x55
 801dd26:	f8d6 0059 	ldr.w	r0, [r6, #89]	@ 0x59
 801dd2a:	f8c5 0037 	str.w	r0, [r5, #55]	@ 0x37
 801dd2e:	f8c5 102b 	str.w	r1, [r5, #43]	@ 0x2b
 801dd32:	f8c5 202f 	str.w	r2, [r5, #47]	@ 0x2f
 801dd36:	f8c5 3033 	str.w	r3, [r5, #51]	@ 0x33
 801dd3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801dd3c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 801dd3e:	f042 0204 	orr.w	r2, r2, #4
 801dd42:	679a      	str	r2, [r3, #120]	@ 0x78
 801dd44:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 801dd46:	f042 0208 	orr.w	r2, r2, #8
 801dd4a:	679a      	str	r2, [r3, #120]	@ 0x78
 801dd4c:	7923      	ldrb	r3, [r4, #4]
 801dd4e:	7b21      	ldrb	r1, [r4, #12]
 801dd50:	428b      	cmp	r3, r1
 801dd52:	d025      	beq.n	801dda0 <Argus_Dca_Apply+0x130>
 801dd54:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801dd56:	2901      	cmp	r1, #1
 801dd58:	bf08      	it	eq
 801dd5a:	f894 303e 	ldrbeq.w	r3, [r4, #62]	@ 0x3e
 801dd5e:	f892 208e 	ldrb.w	r2, [r2, #142]	@ 0x8e
 801dd62:	bf16      	itet	ne
 801dd64:	2004      	movne	r0, #4
 801dd66:	4618      	moveq	r0, r3
 801dd68:	4603      	movne	r3, r0
 801dd6a:	2a02      	cmp	r2, #2
 801dd6c:	d063      	beq.n	801de36 <Argus_Dca_Apply+0x1c6>
 801dd6e:	2a03      	cmp	r2, #3
 801dd70:	d05e      	beq.n	801de30 <Argus_Dca_Apply+0x1c0>
 801dd72:	2a01      	cmp	r2, #1
 801dd74:	d06b      	beq.n	801de4e <Argus_Dca_Apply+0x1de>
 801dd76:	2300      	movs	r3, #0
 801dd78:	461a      	mov	r2, r3
 801dd7a:	f895 1045 	ldrb.w	r1, [r5, #69]	@ 0x45
 801dd7e:	f001 0107 	and.w	r1, r1, #7
 801dd82:	430a      	orrs	r2, r1
 801dd84:	f895 1046 	ldrb.w	r1, [r5, #70]	@ 0x46
 801dd88:	f885 2045 	strb.w	r2, [r5, #69]	@ 0x45
 801dd8c:	f021 023e 	bic.w	r2, r1, #62	@ 0x3e
 801dd90:	4313      	orrs	r3, r2
 801dd92:	f885 3046 	strb.w	r3, [r5, #70]	@ 0x46
 801dd96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801dd98:	6f93      	ldr	r3, [r2, #120]	@ 0x78
 801dd9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dd9e:	6793      	str	r3, [r2, #120]	@ 0x78
 801dda0:	7b61      	ldrb	r1, [r4, #13]
 801dda2:	7ba0      	ldrb	r0, [r4, #14]
 801dda4:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
 801dda8:	4421      	add	r1, r4
 801ddaa:	f891 303f 	ldrb.w	r3, [r1, #63]	@ 0x3f
 801ddae:	4403      	add	r3, r0
 801ddb0:	b2db      	uxtb	r3, r3
 801ddb2:	f002 013f 	and.w	r1, r2, #63	@ 0x3f
 801ddb6:	428b      	cmp	r3, r1
 801ddb8:	d00b      	beq.n	801ddd2 <Argus_Dca_Apply+0x162>
 801ddba:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 801ddbe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ddc2:	4313      	orrs	r3, r2
 801ddc4:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
 801ddc8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ddca:	6f93      	ldr	r3, [r2, #120]	@ 0x78
 801ddcc:	f043 0320 	orr.w	r3, r3, #32
 801ddd0:	6793      	str	r3, [r2, #120]	@ 0x78
 801ddd2:	8862      	ldrh	r2, [r4, #2]
 801ddd4:	8963      	ldrh	r3, [r4, #10]
 801ddd6:	b292      	uxth	r2, r2
 801ddd8:	429a      	cmp	r2, r3
 801ddda:	d016      	beq.n	801de0a <Argus_Dca_Apply+0x19a>
 801dddc:	f895 005e 	ldrb.w	r0, [r5, #94]	@ 0x5e
 801dde0:	f895 205f 	ldrb.w	r2, [r5, #95]	@ 0x5f
 801dde4:	3b01      	subs	r3, #1
 801dde6:	f3c3 01c6 	ubfx	r1, r3, #3, #7
 801ddea:	f002 021f 	and.w	r2, r2, #31
 801ddee:	f020 007f 	bic.w	r0, r0, #127	@ 0x7f
 801ddf2:	ea42 1343 	orr.w	r3, r2, r3, lsl #5
 801ddf6:	4301      	orrs	r1, r0
 801ddf8:	f885 105e 	strb.w	r1, [r5, #94]	@ 0x5e
 801ddfc:	f885 305f 	strb.w	r3, [r5, #95]	@ 0x5f
 801de00:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801de02:	6f93      	ldr	r3, [r2, #120]	@ 0x78
 801de04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801de08:	6793      	str	r3, [r2, #120]	@ 0x78
 801de0a:	f7e8 fde3 	bl	80069d4 <IRQ_LOCK>
 801de0e:	f104 0308 	add.w	r3, r4, #8
 801de12:	e893 0003 	ldmia.w	r3, {r0, r1}
 801de16:	e884 0003 	stmia.w	r4, {r0, r1}
 801de1a:	b003      	add	sp, #12
 801de1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de20:	f7e8 bdb6 	b.w	8006990 <IRQ_UNLOCK>
 801de24:	0980      	lsrs	r0, r0, #6
 801de26:	2a00      	cmp	r2, #0
 801de28:	f040 80e9 	bne.w	801dffe <Argus_Dca_Apply+0x38e>
 801de2c:	2380      	movs	r3, #128	@ 0x80
 801de2e:	e748      	b.n	801dcc2 <Argus_Dca_Apply+0x52>
 801de30:	2901      	cmp	r1, #1
 801de32:	f000 8152 	beq.w	801e0da <Argus_Dca_Apply+0x46a>
 801de36:	005b      	lsls	r3, r3, #1
 801de38:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801de3c:	2200      	movs	r2, #0
 801de3e:	e79c      	b.n	801dd7a <Argus_Dca_Apply+0x10a>
 801de40:	2a00      	cmp	r2, #0
 801de42:	f040 80d3 	bne.w	801dfec <Argus_Dca_Apply+0x37c>
 801de46:	2280      	movs	r2, #128	@ 0x80
 801de48:	f04f 33ff 	mov.w	r3, #4294967295
 801de4c:	e73d      	b.n	801dcca <Argus_Dca_Apply+0x5a>
 801de4e:	00db      	lsls	r3, r3, #3
 801de50:	b25a      	sxtb	r2, r3
 801de52:	2300      	movs	r3, #0
 801de54:	e791      	b.n	801dd7a <Argus_Dca_Apply+0x10a>
 801de56:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 801de5a:	f896 b008 	ldrb.w	fp, [r6, #8]
 801de5e:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 801de60:	6af1      	ldr	r1, [r6, #44]	@ 0x2c
 801de62:	6b32      	ldr	r2, [r6, #48]	@ 0x30
 801de64:	6bb0      	ldr	r0, [r6, #56]	@ 0x38
 801de66:	f8c5 0016 	str.w	r0, [r5, #22]
 801de6a:	fb0a 7718 	mls	r7, sl, r8, r7
 801de6e:	44bb      	add	fp, r7
 801de70:	fa4f f98b 	sxtb.w	r9, fp
 801de74:	f1b9 0f00 	cmp.w	r9, #0
 801de78:	f8c5 3012 	str.w	r3, [r5, #18]
 801de7c:	f8c5 100a 	str.w	r1, [r5, #10]
 801de80:	f8c5 200e 	str.w	r2, [r5, #14]
 801de84:	f105 030a 	add.w	r3, r5, #10
 801de88:	dc6c      	bgt.n	801df64 <Argus_Dca_Apply+0x2f4>
 801de8a:	d00e      	beq.n	801deaa <Argus_Dca_Apply+0x23a>
 801de8c:	f109 0087 	add.w	r0, r9, #135	@ 0x87
 801de90:	10c2      	asrs	r2, r0, #3
 801de92:	f1c2 0210 	rsb	r2, r2, #16
 801de96:	eb03 00e0 	add.w	r0, r3, r0, asr #3
 801de9a:	21ff      	movs	r1, #255	@ 0xff
 801de9c:	9301      	str	r3, [sp, #4]
 801de9e:	f00d f884 	bl	802afaa <memset>
 801dea2:	f01b 0f07 	tst.w	fp, #7
 801dea6:	f040 8108 	bne.w	801e0ba <Argus_Dca_Apply+0x44a>
 801deaa:	f996 2009 	ldrsb.w	r2, [r6, #9]
 801deae:	7af3      	ldrb	r3, [r6, #11]
 801deb0:	eb07 0902 	add.w	r9, r7, r2
 801deb4:	b11b      	cbz	r3, 801debe <Argus_Dca_Apply+0x24e>
 801deb6:	f1ba 0f01 	cmp.w	sl, #1
 801deba:	f000 8130 	beq.w	801e11e <Argus_Dca_Apply+0x4ae>
 801debe:	f8d6 2041 	ldr.w	r2, [r6, #65]	@ 0x41
 801dec2:	f8d6 103d 	ldr.w	r1, [r6, #61]	@ 0x3d
 801dec6:	f8d6 3045 	ldr.w	r3, [r6, #69]	@ 0x45
 801deca:	f8d6 0049 	ldr.w	r0, [r6, #73]	@ 0x49
 801dece:	f8c5 201f 	str.w	r2, [r5, #31]
 801ded2:	fa4f f289 	sxtb.w	r2, r9
 801ded6:	2a00      	cmp	r2, #0
 801ded8:	f105 081b 	add.w	r8, r5, #27
 801dedc:	f8c5 0027 	str.w	r0, [r5, #39]	@ 0x27
 801dee0:	f8c5 101b 	str.w	r1, [r5, #27]
 801dee4:	f8c5 3023 	str.w	r3, [r5, #35]	@ 0x23
 801dee8:	dc50      	bgt.n	801df8c <Argus_Dca_Apply+0x31c>
 801deea:	f43f af16 	beq.w	801dd1a <Argus_Dca_Apply+0xaa>
 801deee:	f102 0a87 	add.w	sl, r2, #135	@ 0x87
 801def2:	ea4f 0aea 	mov.w	sl, sl, asr #3
 801def6:	f102 0780 	add.w	r7, r2, #128	@ 0x80
 801defa:	21ff      	movs	r1, #255	@ 0xff
 801defc:	f1ca 0210 	rsb	r2, sl, #16
 801df00:	eb08 000a 	add.w	r0, r8, sl
 801df04:	9201      	str	r2, [sp, #4]
 801df06:	f00d f850 	bl	802afaa <memset>
 801df0a:	f019 0f07 	tst.w	r9, #7
 801df0e:	9a01      	ldr	r2, [sp, #4]
 801df10:	f000 80bc 	beq.w	801e08c <Argus_Dca_Apply+0x41c>
 801df14:	ea4f 09e7 	mov.w	r9, r7, asr #3
 801df18:	21ff      	movs	r1, #255	@ 0xff
 801df1a:	f818 3009 	ldrb.w	r3, [r8, r9]
 801df1e:	f007 0707 	and.w	r7, r7, #7
 801df22:	fa21 f707 	lsr.w	r7, r1, r7
 801df26:	433b      	orrs	r3, r7
 801df28:	f808 3009 	strb.w	r3, [r8, r9]
 801df2c:	f8d6 0051 	ldr.w	r0, [r6, #81]	@ 0x51
 801df30:	f8d6 3055 	ldr.w	r3, [r6, #85]	@ 0x55
 801df34:	f8d6 c04d 	ldr.w	ip, [r6, #77]	@ 0x4d
 801df38:	f8d6 6059 	ldr.w	r6, [r6, #89]	@ 0x59
 801df3c:	f8c5 6037 	str.w	r6, [r5, #55]	@ 0x37
 801df40:	f105 062b 	add.w	r6, r5, #43	@ 0x2b
 801df44:	f8c5 002f 	str.w	r0, [r5, #47]	@ 0x2f
 801df48:	f8c5 3033 	str.w	r3, [r5, #51]	@ 0x33
 801df4c:	f8c5 c02b 	str.w	ip, [r5, #43]	@ 0x2b
 801df50:	eb06 000a 	add.w	r0, r6, sl
 801df54:	f00d f829 	bl	802afaa <memset>
 801df58:	f816 3009 	ldrb.w	r3, [r6, r9]
 801df5c:	431f      	orrs	r7, r3
 801df5e:	f806 7009 	strb.w	r7, [r6, r9]
 801df62:	e6ea      	b.n	801dd3a <Argus_Dca_Apply+0xca>
 801df64:	ea4f 09e9 	mov.w	r9, r9, asr #3
 801df68:	464a      	mov	r2, r9
 801df6a:	21ff      	movs	r1, #255	@ 0xff
 801df6c:	4618      	mov	r0, r3
 801df6e:	f00d f81c 	bl	802afaa <memset>
 801df72:	f01b 0b07 	ands.w	fp, fp, #7
 801df76:	d098      	beq.n	801deaa <Argus_Dca_Apply+0x23a>
 801df78:	f810 2009 	ldrb.w	r2, [r0, r9]
 801df7c:	21ff      	movs	r1, #255	@ 0xff
 801df7e:	fa21 fb0b 	lsr.w	fp, r1, fp
 801df82:	ea62 020b 	orn	r2, r2, fp
 801df86:	f800 2009 	strb.w	r2, [r0, r9]
 801df8a:	e78e      	b.n	801deaa <Argus_Dca_Apply+0x23a>
 801df8c:	10d7      	asrs	r7, r2, #3
 801df8e:	463a      	mov	r2, r7
 801df90:	21ff      	movs	r1, #255	@ 0xff
 801df92:	4640      	mov	r0, r8
 801df94:	f00d f809 	bl	802afaa <memset>
 801df98:	f019 0907 	ands.w	r9, r9, #7
 801df9c:	d05f      	beq.n	801e05e <Argus_Dca_Apply+0x3ee>
 801df9e:	f818 3007 	ldrb.w	r3, [r8, r7]
 801dfa2:	21ff      	movs	r1, #255	@ 0xff
 801dfa4:	fa21 f909 	lsr.w	r9, r1, r9
 801dfa8:	ea63 0309 	orn	r3, r3, r9
 801dfac:	f808 3007 	strb.w	r3, [r8, r7]
 801dfb0:	f8d6 3055 	ldr.w	r3, [r6, #85]	@ 0x55
 801dfb4:	f8d6 004d 	ldr.w	r0, [r6, #77]	@ 0x4d
 801dfb8:	f8d6 2051 	ldr.w	r2, [r6, #81]	@ 0x51
 801dfbc:	f8d6 6059 	ldr.w	r6, [r6, #89]	@ 0x59
 801dfc0:	f8c5 3033 	str.w	r3, [r5, #51]	@ 0x33
 801dfc4:	f105 032b 	add.w	r3, r5, #43	@ 0x2b
 801dfc8:	f8c5 002b 	str.w	r0, [r5, #43]	@ 0x2b
 801dfcc:	f8c5 202f 	str.w	r2, [r5, #47]	@ 0x2f
 801dfd0:	f8c5 6037 	str.w	r6, [r5, #55]	@ 0x37
 801dfd4:	463a      	mov	r2, r7
 801dfd6:	4618      	mov	r0, r3
 801dfd8:	f00c ffe7 	bl	802afaa <memset>
 801dfdc:	5dc2      	ldrb	r2, [r0, r7]
 801dfde:	ea6f 0909 	mvn.w	r9, r9
 801dfe2:	ea49 0902 	orr.w	r9, r9, r2
 801dfe6:	f800 9007 	strb.w	r9, [r0, r7]
 801dfea:	e6a6      	b.n	801dd3a <Argus_Dca_Apply+0xca>
 801dfec:	f04f 33ff 	mov.w	r3, #4294967295
 801dff0:	2101      	movs	r1, #1
 801dff2:	e66a      	b.n	801dcca <Argus_Dca_Apply+0x5a>
 801dff4:	4293      	cmp	r3, r2
 801dff6:	f43f aea9 	beq.w	801dd4c <Argus_Dca_Apply+0xdc>
 801dffa:	6e26      	ldr	r6, [r4, #96]	@ 0x60
 801dffc:	e67a      	b.n	801dcf4 <Argus_Dca_Apply+0x84>
 801dffe:	2801      	cmp	r0, #1
 801e000:	f43f ae74 	beq.w	801dcec <Argus_Dca_Apply+0x7c>
 801e004:	2380      	movs	r3, #128	@ 0x80
 801e006:	2101      	movs	r1, #1
 801e008:	e65f      	b.n	801dcca <Argus_Dca_Apply+0x5a>
 801e00a:	f8d6 202f 	ldr.w	r2, [r6, #47]	@ 0x2f
 801e00e:	f8d6 3033 	ldr.w	r3, [r6, #51]	@ 0x33
 801e012:	f8d6 102b 	ldr.w	r1, [r6, #43]	@ 0x2b
 801e016:	f8d6 0037 	ldr.w	r0, [r6, #55]	@ 0x37
 801e01a:	f8c5 0015 	str.w	r0, [r5, #21]
 801e01e:	f8c5 200d 	str.w	r2, [r5, #13]
 801e022:	f8c5 1009 	str.w	r1, [r5, #9]
 801e026:	f8c5 3011 	str.w	r3, [r5, #17]
 801e02a:	f896 303b 	ldrb.w	r3, [r6, #59]	@ 0x3b
 801e02e:	766b      	strb	r3, [r5, #25]
 801e030:	f105 021a 	add.w	r2, r5, #26
 801e034:	f106 033c 	add.w	r3, r6, #60	@ 0x3c
 801e038:	365c      	adds	r6, #92	@ 0x5c
 801e03a:	681f      	ldr	r7, [r3, #0]
 801e03c:	6858      	ldr	r0, [r3, #4]
 801e03e:	6899      	ldr	r1, [r3, #8]
 801e040:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 801e044:	f8c2 c00c 	str.w	ip, [r2, #12]
 801e048:	3310      	adds	r3, #16
 801e04a:	42b3      	cmp	r3, r6
 801e04c:	6017      	str	r7, [r2, #0]
 801e04e:	6050      	str	r0, [r2, #4]
 801e050:	6091      	str	r1, [r2, #8]
 801e052:	f102 0210 	add.w	r2, r2, #16
 801e056:	d1f0      	bne.n	801e03a <Argus_Dca_Apply+0x3ca>
 801e058:	781b      	ldrb	r3, [r3, #0]
 801e05a:	7013      	strb	r3, [r2, #0]
 801e05c:	e66d      	b.n	801dd3a <Argus_Dca_Apply+0xca>
 801e05e:	f8d6 004d 	ldr.w	r0, [r6, #77]	@ 0x4d
 801e062:	f8d6 1051 	ldr.w	r1, [r6, #81]	@ 0x51
 801e066:	f8d6 3055 	ldr.w	r3, [r6, #85]	@ 0x55
 801e06a:	f8d6 6059 	ldr.w	r6, [r6, #89]	@ 0x59
 801e06e:	f8c5 6037 	str.w	r6, [r5, #55]	@ 0x37
 801e072:	f8c5 002b 	str.w	r0, [r5, #43]	@ 0x2b
 801e076:	f8c5 102f 	str.w	r1, [r5, #47]	@ 0x2f
 801e07a:	463a      	mov	r2, r7
 801e07c:	f8c5 3033 	str.w	r3, [r5, #51]	@ 0x33
 801e080:	21ff      	movs	r1, #255	@ 0xff
 801e082:	f105 002b 	add.w	r0, r5, #43	@ 0x2b
 801e086:	f00c ff90 	bl	802afaa <memset>
 801e08a:	e656      	b.n	801dd3a <Argus_Dca_Apply+0xca>
 801e08c:	f8d6 004d 	ldr.w	r0, [r6, #77]	@ 0x4d
 801e090:	f8d6 1051 	ldr.w	r1, [r6, #81]	@ 0x51
 801e094:	f8d6 3055 	ldr.w	r3, [r6, #85]	@ 0x55
 801e098:	f8d6 6059 	ldr.w	r6, [r6, #89]	@ 0x59
 801e09c:	f8c5 002b 	str.w	r0, [r5, #43]	@ 0x2b
 801e0a0:	f105 002b 	add.w	r0, r5, #43	@ 0x2b
 801e0a4:	f8c5 102f 	str.w	r1, [r5, #47]	@ 0x2f
 801e0a8:	f8c5 6037 	str.w	r6, [r5, #55]	@ 0x37
 801e0ac:	f8c5 3033 	str.w	r3, [r5, #51]	@ 0x33
 801e0b0:	21ff      	movs	r1, #255	@ 0xff
 801e0b2:	4450      	add	r0, sl
 801e0b4:	f00c ff79 	bl	802afaa <memset>
 801e0b8:	e63f      	b.n	801dd3a <Argus_Dca_Apply+0xca>
 801e0ba:	f109 0980 	add.w	r9, r9, #128	@ 0x80
 801e0be:	ea4f 01e9 	mov.w	r1, r9, asr #3
 801e0c2:	9b01      	ldr	r3, [sp, #4]
 801e0c4:	f009 0907 	and.w	r9, r9, #7
 801e0c8:	5c58      	ldrb	r0, [r3, r1]
 801e0ca:	22ff      	movs	r2, #255	@ 0xff
 801e0cc:	fa22 f909 	lsr.w	r9, r2, r9
 801e0d0:	ea49 0900 	orr.w	r9, r9, r0
 801e0d4:	f803 9001 	strb.w	r9, [r3, r1]
 801e0d8:	e6e7      	b.n	801deaa <Argus_Dca_Apply+0x23a>
 801e0da:	0840      	lsrs	r0, r0, #1
 801e0dc:	00c3      	lsls	r3, r0, #3
 801e0de:	0040      	lsls	r0, r0, #1
 801e0e0:	b25a      	sxtb	r2, r3
 801e0e2:	f000 033e 	and.w	r3, r0, #62	@ 0x3e
 801e0e6:	e648      	b.n	801dd7a <Argus_Dca_Apply+0x10a>
 801e0e8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801e0ec:	2000      	movs	r0, #0
 801e0ee:	eba3 0c01 	sub.w	ip, r3, r1
 801e0f2:	b14b      	cbz	r3, 801e108 <Argus_Dca_Apply+0x498>
 801e0f4:	4299      	cmp	r1, r3
 801e0f6:	d80d      	bhi.n	801e114 <Argus_Dca_Apply+0x4a4>
 801e0f8:	4310      	orrs	r0, r2
 801e0fa:	0852      	lsrs	r2, r2, #1
 801e0fc:	ea4f 034c 	mov.w	r3, ip, lsl #1
 801e100:	d1f5      	bne.n	801e0ee <Argus_Dca_Apply+0x47e>
 801e102:	428b      	cmp	r3, r1
 801e104:	d300      	bcc.n	801e108 <Argus_Dca_Apply+0x498>
 801e106:	3001      	adds	r0, #1
 801e108:	2800      	cmp	r0, #0
 801e10a:	bfac      	ite	ge
 801e10c:	4682      	movge	sl, r0
 801e10e:	f06f 4a00 	mvnlt.w	sl, #2147483648	@ 0x80000000
 801e112:	e6a2      	b.n	801de5a <Argus_Dca_Apply+0x1ea>
 801e114:	0852      	lsrs	r2, r2, #1
 801e116:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801e11a:	d1e8      	bne.n	801e0ee <Argus_Dca_Apply+0x47e>
 801e11c:	e7f1      	b.n	801e102 <Argus_Dca_Apply+0x492>
 801e11e:	7a33      	ldrb	r3, [r6, #8]
 801e120:	1a9a      	subs	r2, r3, r2
 801e122:	4590      	cmp	r8, r2
 801e124:	443b      	add	r3, r7
 801e126:	f73f aeca 	bgt.w	801debe <Argus_Dca_Apply+0x24e>
 801e12a:	eb08 0209 	add.w	r2, r8, r9
 801e12e:	1a9b      	subs	r3, r3, r2
 801e130:	e000      	b.n	801e134 <Argus_Dca_Apply+0x4c4>
 801e132:	4442      	add	r2, r8
 801e134:	ebb3 0308 	subs.w	r3, r3, r8
 801e138:	4691      	mov	r9, r2
 801e13a:	dafa      	bge.n	801e132 <Argus_Dca_Apply+0x4c2>
 801e13c:	e6bf      	b.n	801debe <Argus_Dca_Apply+0x24e>
 801e13e:	bf00      	nop

0801e140 <Argus_Dca_RecoverLaserFailure>:
 801e140:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e142:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 801e144:	8b5c      	ldrh	r4, [r3, #26]
 801e146:	b083      	sub	sp, #12
 801e148:	b914      	cbnz	r4, 801e150 <Argus_Dca_RecoverLaserFailure+0x10>
 801e14a:	2000      	movs	r0, #0
 801e14c:	b003      	add	sp, #12
 801e14e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e150:	4605      	mov	r5, r0
 801e152:	a901      	add	r1, sp, #4
 801e154:	4668      	mov	r0, sp
 801e156:	f7e9 f81f 	bl	8007198 <Timer_GetCounterValue>
 801e15a:	4b2a      	ldr	r3, [pc, #168]	@ (801e204 <Argus_Dca_RecoverLaserFailure+0xc4>)
 801e15c:	6928      	ldr	r0, [r5, #16]
 801e15e:	9e00      	ldr	r6, [sp, #0]
 801e160:	fba3 2304 	umull	r2, r3, r3, r4
 801e164:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801e168:	099f      	lsrs	r7, r3, #6
 801e16a:	696a      	ldr	r2, [r5, #20]
 801e16c:	fb01 4417 	mls	r4, r1, r7, r4
 801e170:	fb01 2404 	mla	r4, r1, r4, r2
 801e174:	4924      	ldr	r1, [pc, #144]	@ (801e208 <Argus_Dca_RecoverLaserFailure+0xc8>)
 801e176:	9f01      	ldr	r7, [sp, #4]
 801e178:	428c      	cmp	r4, r1
 801e17a:	eb00 1393 	add.w	r3, r0, r3, lsr #6
 801e17e:	d813      	bhi.n	801e1a8 <Argus_Dca_RecoverLaserFailure+0x68>
 801e180:	4298      	cmp	r0, r3
 801e182:	d018      	beq.n	801e1b6 <Argus_Dca_RecoverLaserFailure+0x76>
 801e184:	bf34      	ite	cc
 801e186:	2101      	movcc	r1, #1
 801e188:	2100      	movcs	r1, #0
 801e18a:	b1f1      	cbz	r1, 801e1ca <Argus_Dca_RecoverLaserFailure+0x8a>
 801e18c:	42b0      	cmp	r0, r6
 801e18e:	d017      	beq.n	801e1c0 <Argus_Dca_RecoverLaserFailure+0x80>
 801e190:	bf34      	ite	cc
 801e192:	2201      	movcc	r2, #1
 801e194:	2200      	movcs	r2, #0
 801e196:	b9fa      	cbnz	r2, 801e1d8 <Argus_Dca_RecoverLaserFailure+0x98>
 801e198:	f105 0010 	add.w	r0, r5, #16
 801e19c:	f105 0114 	add.w	r1, r5, #20
 801e1a0:	f7e8 fffa 	bl	8007198 <Timer_GetCounterValue>
 801e1a4:	2001      	movs	r0, #1
 801e1a6:	e7d1      	b.n	801e14c <Argus_Dca_RecoverLaserFailure+0xc>
 801e1a8:	3301      	adds	r3, #1
 801e1aa:	f5a4 2474 	sub.w	r4, r4, #999424	@ 0xf4000
 801e1ae:	4298      	cmp	r0, r3
 801e1b0:	f5a4 7410 	sub.w	r4, r4, #576	@ 0x240
 801e1b4:	d1e6      	bne.n	801e184 <Argus_Dca_RecoverLaserFailure+0x44>
 801e1b6:	42a2      	cmp	r2, r4
 801e1b8:	bf8c      	ite	hi
 801e1ba:	2100      	movhi	r1, #0
 801e1bc:	2101      	movls	r1, #1
 801e1be:	e7e4      	b.n	801e18a <Argus_Dca_RecoverLaserFailure+0x4a>
 801e1c0:	42ba      	cmp	r2, r7
 801e1c2:	bf8c      	ite	hi
 801e1c4:	2200      	movhi	r2, #0
 801e1c6:	2201      	movls	r2, #1
 801e1c8:	e7e5      	b.n	801e196 <Argus_Dca_RecoverLaserFailure+0x56>
 801e1ca:	42b0      	cmp	r0, r6
 801e1cc:	d00c      	beq.n	801e1e8 <Argus_Dca_RecoverLaserFailure+0xa8>
 801e1ce:	d3bc      	bcc.n	801e14a <Argus_Dca_RecoverLaserFailure+0xa>
 801e1d0:	42b3      	cmp	r3, r6
 801e1d2:	d00c      	beq.n	801e1ee <Argus_Dca_RecoverLaserFailure+0xae>
 801e1d4:	d2b9      	bcs.n	801e14a <Argus_Dca_RecoverLaserFailure+0xa>
 801e1d6:	e7df      	b.n	801e198 <Argus_Dca_RecoverLaserFailure+0x58>
 801e1d8:	42b3      	cmp	r3, r6
 801e1da:	d00b      	beq.n	801e1f4 <Argus_Dca_RecoverLaserFailure+0xb4>
 801e1dc:	bf34      	ite	cc
 801e1de:	2401      	movcc	r4, #1
 801e1e0:	2400      	movcs	r4, #0
 801e1e2:	2c00      	cmp	r4, #0
 801e1e4:	d0b1      	beq.n	801e14a <Argus_Dca_RecoverLaserFailure+0xa>
 801e1e6:	e7d7      	b.n	801e198 <Argus_Dca_RecoverLaserFailure+0x58>
 801e1e8:	42ba      	cmp	r2, r7
 801e1ea:	d9ae      	bls.n	801e14a <Argus_Dca_RecoverLaserFailure+0xa>
 801e1ec:	e7f0      	b.n	801e1d0 <Argus_Dca_RecoverLaserFailure+0x90>
 801e1ee:	42a7      	cmp	r7, r4
 801e1f0:	d2d2      	bcs.n	801e198 <Argus_Dca_RecoverLaserFailure+0x58>
 801e1f2:	e7aa      	b.n	801e14a <Argus_Dca_RecoverLaserFailure+0xa>
 801e1f4:	42a7      	cmp	r7, r4
 801e1f6:	bf34      	ite	cc
 801e1f8:	2400      	movcc	r4, #0
 801e1fa:	2401      	movcs	r4, #1
 801e1fc:	2c00      	cmp	r4, #0
 801e1fe:	d0a4      	beq.n	801e14a <Argus_Dca_RecoverLaserFailure+0xa>
 801e200:	e7ca      	b.n	801e198 <Argus_Dca_RecoverLaserFailure+0x58>
 801e202:	bf00      	nop
 801e204:	10624dd3 	.word	0x10624dd3
 801e208:	000f423f 	.word	0x000f423f

0801e20c <Argus_Dca_UpdateTimings>:
 801e20c:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 801e20e:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 801e210:	681b      	ldr	r3, [r3, #0]
 801e212:	1a59      	subs	r1, r3, r1
 801e214:	428a      	cmp	r2, r1
 801e216:	da0e      	bge.n	801e236 <Argus_Dca_UpdateTimings+0x2a>
 801e218:	1a89      	subs	r1, r1, r2
 801e21a:	17cb      	asrs	r3, r1, #31
 801e21c:	019b      	lsls	r3, r3, #6
 801e21e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801e222:	f3c1 0c40 	ubfx	ip, r1, #1, #1
 801e226:	f3c1 0197 	ubfx	r1, r1, #2, #24
 801e22a:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
 801e22e:	4411      	add	r1, r2
 801e230:	4461      	add	r1, ip
 801e232:	6301      	str	r1, [r0, #48]	@ 0x30
 801e234:	4770      	bx	lr
 801e236:	1a51      	subs	r1, r2, r1
 801e238:	17cb      	asrs	r3, r1, #31
 801e23a:	019b      	lsls	r3, r3, #6
 801e23c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801e240:	f3c1 0c97 	ubfx	ip, r1, #2, #24
 801e244:	ea4c 6c03 	orr.w	ip, ip, r3, lsl #24
 801e248:	eba2 020c 	sub.w	r2, r2, ip
 801e24c:	f3c1 0140 	ubfx	r1, r1, #1, #1
 801e250:	1a51      	subs	r1, r2, r1
 801e252:	6301      	str	r1, [r0, #48]	@ 0x30
 801e254:	4770      	bx	lr
 801e256:	bf00      	nop

0801e258 <Argus_Dca_Evaluate>:
 801e258:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 801e25a:	f993 3000 	ldrsb.w	r3, [r3]
 801e25e:	b903      	cbnz	r3, 801e262 <Argus_Dca_Evaluate+0xa>
 801e260:	4770      	bx	lr
 801e262:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e266:	4604      	mov	r4, r0
 801e268:	b08f      	sub	sp, #60	@ 0x3c
 801e26a:	460d      	mov	r5, r1
 801e26c:	f7e8 fbb2 	bl	80069d4 <IRQ_LOCK>
 801e270:	e894 0003 	ldmia.w	r4, {r0, r1}
 801e274:	ab0a      	add	r3, sp, #40	@ 0x28
 801e276:	e883 0003 	stmia.w	r3, {r0, r1}
 801e27a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801e27e:	9303      	str	r3, [sp, #12]
 801e280:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801e284:	9306      	str	r3, [sp, #24]
 801e286:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 801e28a:	9305      	str	r3, [sp, #20]
 801e28c:	f99d 302e 	ldrsb.w	r3, [sp, #46]	@ 0x2e
 801e290:	9304      	str	r3, [sp, #16]
 801e292:	8923      	ldrh	r3, [r4, #8]
 801e294:	9300      	str	r3, [sp, #0]
 801e296:	7b23      	ldrb	r3, [r4, #12]
 801e298:	9301      	str	r3, [sp, #4]
 801e29a:	7be3      	ldrb	r3, [r4, #15]
 801e29c:	9302      	str	r3, [sp, #8]
 801e29e:	f89d 802d 	ldrb.w	r8, [sp, #45]	@ 0x2d
 801e2a2:	8967      	ldrh	r7, [r4, #10]
 801e2a4:	f894 b00d 	ldrb.w	fp, [r4, #13]
 801e2a8:	f994 600e 	ldrsb.w	r6, [r4, #14]
 801e2ac:	f7e8 fb70 	bl	8006990 <IRQ_UNLOCK>
 801e2b0:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 801e2b2:	f990 3000 	ldrsb.w	r3, [r0]
 801e2b6:	2b00      	cmp	r3, #0
 801e2b8:	dd7e      	ble.n	801e3b8 <Argus_Dca_Evaluate+0x160>
 801e2ba:	f895 31b0 	ldrb.w	r3, [r5, #432]	@ 0x1b0
 801e2be:	9307      	str	r3, [sp, #28]
 801e2c0:	07db      	lsls	r3, r3, #31
 801e2c2:	f140 80d0 	bpl.w	801e466 <Argus_Dca_Evaluate+0x20e>
 801e2c6:	f8b5 c01c 	ldrh.w	ip, [r5, #28]
 801e2ca:	69aa      	ldr	r2, [r5, #24]
 801e2cc:	f8d4 e060 	ldr.w	lr, [r4, #96]	@ 0x60
 801e2d0:	f1bc 0f40 	cmp.w	ip, #64	@ 0x40
 801e2d4:	bf38      	it	cc
 801e2d6:	f04f 0c40 	movcc.w	ip, #64	@ 0x40
 801e2da:	f402 5900 	and.w	r9, r2, #8192	@ 0x2000
 801e2de:	2300      	movs	r3, #0
 801e2e0:	f8be 1014 	ldrh.w	r1, [lr, #20]
 801e2e4:	fb0c fc01 	mul.w	ip, ip, r1
 801e2e8:	ea4f 2cac 	mov.w	ip, ip, asr #10
 801e2ec:	f1b9 0f00 	cmp.w	r9, #0
 801e2f0:	d107      	bne.n	801e302 <Argus_Dca_Evaluate+0xaa>
 801e2f2:	fa1f fc8c 	uxth.w	ip, ip
 801e2f6:	ea4f 018c 	mov.w	r1, ip, lsl #2
 801e2fa:	f894 c03e 	ldrb.w	ip, [r4, #62]	@ 0x3e
 801e2fe:	fbb1 fcfc 	udiv	ip, r1, ip
 801e302:	fa1f fc8c 	uxth.w	ip, ip
 801e306:	f105 0128 	add.w	r1, r5, #40	@ 0x28
 801e30a:	f505 7ad4 	add.w	sl, r5, #424	@ 0x1a8
 801e30e:	e007      	b.n	801e320 <Argus_Dca_Evaluate+0xc8>
 801e310:	f010 0f02 	tst.w	r0, #2
 801e314:	bf18      	it	ne
 801e316:	2301      	movne	r3, #1
 801e318:	310c      	adds	r1, #12
 801e31a:	4551      	cmp	r1, sl
 801e31c:	f000 80c6 	beq.w	801e4ac <Argus_Dca_Evaluate+0x254>
 801e320:	7a08      	ldrb	r0, [r1, #8]
 801e322:	f010 0f01 	tst.w	r0, #1
 801e326:	d1f7      	bne.n	801e318 <Argus_Dca_Evaluate+0xc0>
 801e328:	f8b1 9006 	ldrh.w	r9, [r1, #6]
 801e32c:	45e1      	cmp	r9, ip
 801e32e:	d9ef      	bls.n	801e310 <Argus_Dca_Evaluate+0xb8>
 801e330:	6963      	ldr	r3, [r4, #20]
 801e332:	2b00      	cmp	r3, #0
 801e334:	f000 8198 	beq.w	801e668 <Argus_Dca_Evaluate+0x410>
 801e338:	a90d      	add	r1, sp, #52	@ 0x34
 801e33a:	a80c      	add	r0, sp, #48	@ 0x30
 801e33c:	f8be 9018 	ldrh.w	r9, [lr, #24]
 801e340:	f7e8 ff2a 	bl	8007198 <Timer_GetCounterValue>
 801e344:	4b85      	ldr	r3, [pc, #532]	@ (801e55c <Argus_Dca_Evaluate+0x304>)
 801e346:	4986      	ldr	r1, [pc, #536]	@ (801e560 <Argus_Dca_Evaluate+0x308>)
 801e348:	f8d4 e010 	ldr.w	lr, [r4, #16]
 801e34c:	fba3 3c09 	umull	r3, ip, r3, r9
 801e350:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801e354:	ea4f 109c 	mov.w	r0, ip, lsr #6
 801e358:	6963      	ldr	r3, [r4, #20]
 801e35a:	fb02 9010 	mls	r0, r2, r0, r9
 801e35e:	fb02 3000 	mla	r0, r2, r0, r3
 801e362:	4288      	cmp	r0, r1
 801e364:	e9dd 920c 	ldrd	r9, r2, [sp, #48]	@ 0x30
 801e368:	eb0e 1c9c 	add.w	ip, lr, ip, lsr #6
 801e36c:	d905      	bls.n	801e37a <Argus_Dca_Evaluate+0x122>
 801e36e:	f5a0 2074 	sub.w	r0, r0, #999424	@ 0xf4000
 801e372:	f10c 0c01 	add.w	ip, ip, #1
 801e376:	f5a0 7010 	sub.w	r0, r0, #576	@ 0x240
 801e37a:	45e6      	cmp	lr, ip
 801e37c:	f000 8179 	beq.w	801e672 <Argus_Dca_Evaluate+0x41a>
 801e380:	bf34      	ite	cc
 801e382:	2101      	movcc	r1, #1
 801e384:	2100      	movcs	r1, #0
 801e386:	2900      	cmp	r1, #0
 801e388:	f000 81b0 	beq.w	801e6ec <Argus_Dca_Evaluate+0x494>
 801e38c:	45ce      	cmp	lr, r9
 801e38e:	f000 820e 	beq.w	801e7ae <Argus_Dca_Evaluate+0x556>
 801e392:	bf34      	ite	cc
 801e394:	2301      	movcc	r3, #1
 801e396:	2300      	movcs	r3, #0
 801e398:	b153      	cbz	r3, 801e3b0 <Argus_Dca_Evaluate+0x158>
 801e39a:	45cc      	cmp	ip, r9
 801e39c:	f000 820c 	beq.w	801e7b8 <Argus_Dca_Evaluate+0x560>
 801e3a0:	bf34      	ite	cc
 801e3a2:	2201      	movcc	r2, #1
 801e3a4:	2200      	movcs	r2, #0
 801e3a6:	f082 0201 	eor.w	r2, r2, #1
 801e3aa:	2a00      	cmp	r2, #0
 801e3ac:	f040 80c0 	bne.w	801e530 <Argus_Dca_Evaluate+0x2d8>
 801e3b0:	69aa      	ldr	r2, [r5, #24]
 801e3b2:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 801e3b6:	e000      	b.n	801e3ba <Argus_Dca_Evaluate+0x162>
 801e3b8:	69aa      	ldr	r2, [r5, #24]
 801e3ba:	f8b5 31c4 	ldrh.w	r3, [r5, #452]	@ 0x1c4
 801e3be:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801e3c2:	428b      	cmp	r3, r1
 801e3c4:	d005      	beq.n	801e3d2 <Argus_Dca_Evaluate+0x17a>
 801e3c6:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 801e3c8:	f8b1 00c2 	ldrh.w	r0, [r1, #194]	@ 0xc2
 801e3cc:	4298      	cmp	r0, r3
 801e3ce:	f0c0 816b 	bcc.w	801e6a8 <Argus_Dca_Evaluate+0x450>
 801e3d2:	0593      	lsls	r3, r2, #22
 801e3d4:	61aa      	str	r2, [r5, #24]
 801e3d6:	f100 80af 	bmi.w	801e538 <Argus_Dca_Evaluate+0x2e0>
 801e3da:	f012 0240 	ands.w	r2, r2, #64	@ 0x40
 801e3de:	f040 8214 	bne.w	801e80a <Argus_Dca_Evaluate+0x5b2>
 801e3e2:	682b      	ldr	r3, [r5, #0]
 801e3e4:	1d99      	adds	r1, r3, #6
 801e3e6:	d02a      	beq.n	801e43e <Argus_Dca_Evaluate+0x1e6>
 801e3e8:	3372      	adds	r3, #114	@ 0x72
 801e3ea:	f000 8174 	beq.w	801e6d6 <Argus_Dca_Evaluate+0x47e>
 801e3ee:	f8b5 31c0 	ldrh.w	r3, [r5, #448]	@ 0x1c0
 801e3f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801e3f6:	4293      	cmp	r3, r2
 801e3f8:	f000 8169 	beq.w	801e6ce <Argus_Dca_Evaluate+0x476>
 801e3fc:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
 801e3fe:	9804      	ldr	r0, [sp, #16]
 801e400:	eb04 0148 	add.w	r1, r4, r8, lsl #1
 801e404:	fb00 f002 	mul.w	r0, r0, r2
 801e408:	f8b1 2044 	ldrh.w	r2, [r1, #68]	@ 0x44
 801e40c:	1ad2      	subs	r2, r2, r3
 801e40e:	fa00 f282 	sxtah	r2, r0, r2
 801e412:	2a00      	cmp	r2, #0
 801e414:	f340 811e 	ble.w	801e654 <Argus_Dca_Evaluate+0x3fc>
 801e418:	f8b1 e04c 	ldrh.w	lr, [r1, #76]	@ 0x4c
 801e41c:	b292      	uxth	r2, r2
 801e41e:	fb0e f202 	mul.w	r2, lr, r2
 801e422:	f3c2 3ec0 	ubfx	lr, r2, #15, #1
 801e426:	eb0e 4212 	add.w	r2, lr, r2, lsr #16
 801e42a:	fa1f fe82 	uxth.w	lr, r2
 801e42e:	f8a5 e1c6 	strh.w	lr, [r5, #454]	@ 0x1c6
 801e432:	f8b5 c01c 	ldrh.w	ip, [r5, #28]
 801e436:	9a03      	ldr	r2, [sp, #12]
 801e438:	4594      	cmp	ip, r2
 801e43a:	f000 8097 	beq.w	801e56c <Argus_Dca_Evaluate+0x314>
 801e43e:	f7e8 fac9 	bl	80069d4 <IRQ_LOCK>
 801e442:	8863      	ldrh	r3, [r4, #2]
 801e444:	b29b      	uxth	r3, r3
 801e446:	b14b      	cbz	r3, 801e45c <Argus_Dca_Evaluate+0x204>
 801e448:	9b00      	ldr	r3, [sp, #0]
 801e44a:	8123      	strh	r3, [r4, #8]
 801e44c:	9b01      	ldr	r3, [sp, #4]
 801e44e:	7323      	strb	r3, [r4, #12]
 801e450:	9b02      	ldr	r3, [sp, #8]
 801e452:	8167      	strh	r7, [r4, #10]
 801e454:	f884 b00d 	strb.w	fp, [r4, #13]
 801e458:	73a6      	strb	r6, [r4, #14]
 801e45a:	73e3      	strb	r3, [r4, #15]
 801e45c:	b00f      	add	sp, #60	@ 0x3c
 801e45e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e462:	f7e8 ba95 	b.w	8006990 <IRQ_UNLOCK>
 801e466:	f8b5 a01c 	ldrh.w	sl, [r5, #28]
 801e46a:	f8d4 e060 	ldr.w	lr, [r4, #96]	@ 0x60
 801e46e:	69aa      	ldr	r2, [r5, #24]
 801e470:	f8be 1016 	ldrh.w	r1, [lr, #22]
 801e474:	f1ba 0f40 	cmp.w	sl, #64	@ 0x40
 801e478:	46d4      	mov	ip, sl
 801e47a:	bf38      	it	cc
 801e47c:	f04f 0c40 	movcc.w	ip, #64	@ 0x40
 801e480:	fb0c f101 	mul.w	r1, ip, r1
 801e484:	f412 5900 	ands.w	r9, r2, #8192	@ 0x2000
 801e488:	ea4f 21a1 	mov.w	r1, r1, asr #10
 801e48c:	f000 80e5 	beq.w	801e65a <Argus_Dca_Evaluate+0x402>
 801e490:	f8b5 31ae 	ldrh.w	r3, [r5, #430]	@ 0x1ae
 801e494:	b289      	uxth	r1, r1
 801e496:	428b      	cmp	r3, r1
 801e498:	f200 8177 	bhi.w	801e78a <Argus_Dca_Evaluate+0x532>
 801e49c:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 801e49e:	4551      	cmp	r1, sl
 801e4a0:	f000 812d 	beq.w	801e6fe <Argus_Dca_Evaluate+0x4a6>
 801e4a4:	9b07      	ldr	r3, [sp, #28]
 801e4a6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801e4aa:	e719      	b.n	801e2e0 <Argus_Dca_Evaluate+0x88>
 801e4ac:	6961      	ldr	r1, [r4, #20]
 801e4ae:	b969      	cbnz	r1, 801e4cc <Argus_Dca_Evaluate+0x274>
 801e4b0:	6921      	ldr	r1, [r4, #16]
 801e4b2:	b959      	cbnz	r1, 801e4cc <Argus_Dca_Evaluate+0x274>
 801e4b4:	2b00      	cmp	r3, #0
 801e4b6:	d080      	beq.n	801e3ba <Argus_Dca_Evaluate+0x162>
 801e4b8:	f104 0114 	add.w	r1, r4, #20
 801e4bc:	f104 0010 	add.w	r0, r4, #16
 801e4c0:	f7e8 fe6a 	bl	8007198 <Timer_GetCounterValue>
 801e4c4:	69aa      	ldr	r2, [r5, #24]
 801e4c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801e4ca:	e776      	b.n	801e3ba <Argus_Dca_Evaluate+0x162>
 801e4cc:	a90d      	add	r1, sp, #52	@ 0x34
 801e4ce:	a80c      	add	r0, sp, #48	@ 0x30
 801e4d0:	f8be 9018 	ldrh.w	r9, [lr, #24]
 801e4d4:	f7e8 fe60 	bl	8007198 <Timer_GetCounterValue>
 801e4d8:	4920      	ldr	r1, [pc, #128]	@ (801e55c <Argus_Dca_Evaluate+0x304>)
 801e4da:	fba1 3109 	umull	r3, r1, r1, r9
 801e4de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801e4e2:	098a      	lsrs	r2, r1, #6
 801e4e4:	6963      	ldr	r3, [r4, #20]
 801e4e6:	fb00 9212 	mls	r2, r0, r2, r9
 801e4ea:	f8df 9074 	ldr.w	r9, [pc, #116]	@ 801e560 <Argus_Dca_Evaluate+0x308>
 801e4ee:	fb00 3202 	mla	r2, r0, r2, r3
 801e4f2:	6920      	ldr	r0, [r4, #16]
 801e4f4:	454a      	cmp	r2, r9
 801e4f6:	e9dd ce0c 	ldrd	ip, lr, [sp, #48]	@ 0x30
 801e4fa:	eb00 1191 	add.w	r1, r0, r1, lsr #6
 801e4fe:	d904      	bls.n	801e50a <Argus_Dca_Evaluate+0x2b2>
 801e500:	f5a2 2274 	sub.w	r2, r2, #999424	@ 0xf4000
 801e504:	3101      	adds	r1, #1
 801e506:	f5a2 7210 	sub.w	r2, r2, #576	@ 0x240
 801e50a:	4288      	cmp	r0, r1
 801e50c:	f000 80b6 	beq.w	801e67c <Argus_Dca_Evaluate+0x424>
 801e510:	f080 80b7 	bcs.w	801e682 <Argus_Dca_Evaluate+0x42a>
 801e514:	4560      	cmp	r0, ip
 801e516:	f000 8154 	beq.w	801e7c2 <Argus_Dca_Evaluate+0x56a>
 801e51a:	bf34      	ite	cc
 801e51c:	2301      	movcc	r3, #1
 801e51e:	2300      	movcs	r3, #0
 801e520:	2b00      	cmp	r3, #0
 801e522:	f43f af45 	beq.w	801e3b0 <Argus_Dca_Evaluate+0x158>
 801e526:	458c      	cmp	ip, r1
 801e528:	f000 815d 	beq.w	801e7e6 <Argus_Dca_Evaluate+0x58e>
 801e52c:	f63f af40 	bhi.w	801e3b0 <Argus_Dca_Evaluate+0x158>
 801e530:	69aa      	ldr	r2, [r5, #24]
 801e532:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801e536:	e740      	b.n	801e3ba <Argus_Dca_Evaluate+0x162>
 801e538:	f06f 0170 	mvn.w	r1, #112	@ 0x70
 801e53c:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801e53e:	6029      	str	r1, [r5, #0]
 801e540:	f002 fcfe 	bl	8020f40 <Argus_Dev_SetError>
 801e544:	69ab      	ldr	r3, [r5, #24]
 801e546:	0658      	lsls	r0, r3, #25
 801e548:	bf4c      	ite	mi
 801e54a:	4806      	ldrmi	r0, [pc, #24]	@ (801e564 <Argus_Dca_Evaluate+0x30c>)
 801e54c:	4806      	ldrpl	r0, [pc, #24]	@ (801e568 <Argus_Dca_Evaluate+0x310>)
 801e54e:	f7e7 ffdd 	bl	800650c <print>
 801e552:	682b      	ldr	r3, [r5, #0]
 801e554:	2b00      	cmp	r3, #0
 801e556:	f47f af72 	bne.w	801e43e <Argus_Dca_Evaluate+0x1e6>
 801e55a:	e748      	b.n	801e3ee <Argus_Dca_Evaluate+0x196>
 801e55c:	10624dd3 	.word	0x10624dd3
 801e560:	000f423f 	.word	0x000f423f
 801e564:	0802f99c 	.word	0x0802f99c
 801e568:	0802fa30 	.word	0x0802fa30
 801e56c:	69aa      	ldr	r2, [r5, #24]
 801e56e:	f3c2 3181 	ubfx	r1, r2, #14, #2
 801e572:	4588      	cmp	r8, r1
 801e574:	f47f af63 	bne.w	801e43e <Argus_Dca_Evaluate+0x1e6>
 801e578:	9805      	ldr	r0, [sp, #20]
 801e57a:	f3c2 3140 	ubfx	r1, r2, #13, #1
 801e57e:	4281      	cmp	r1, r0
 801e580:	f47f af5d 	bne.w	801e43e <Argus_Dca_Evaluate+0x1e6>
 801e584:	8be9      	ldrh	r1, [r5, #30]
 801e586:	9806      	ldr	r0, [sp, #24]
 801e588:	4281      	cmp	r1, r0
 801e58a:	f47f af58 	bne.w	801e43e <Argus_Dca_Evaluate+0x1e6>
 801e58e:	eb04 0108 	add.w	r1, r4, r8
 801e592:	f895 9023 	ldrb.w	r9, [r5, #35]	@ 0x23
 801e596:	f891 103f 	ldrb.w	r1, [r1, #63]	@ 0x3f
 801e59a:	9108      	str	r1, [sp, #32]
 801e59c:	4608      	mov	r0, r1
 801e59e:	9904      	ldr	r1, [sp, #16]
 801e5a0:	1808      	adds	r0, r1, r0
 801e5a2:	4548      	cmp	r0, r9
 801e5a4:	f47f af4b 	bne.w	801e43e <Argus_Dca_Evaluate+0x1e6>
 801e5a8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801e5ac:	428b      	cmp	r3, r1
 801e5ae:	e9d4 a717 	ldrd	sl, r7, [r4, #92]	@ 0x5c
 801e5b2:	f000 83e6 	beq.w	801ed82 <Argus_Dca_Evaluate+0xb2a>
 801e5b6:	eb04 0148 	add.w	r1, r4, r8, lsl #1
 801e5ba:	9e04      	ldr	r6, [sp, #16]
 801e5bc:	f8b1 1044 	ldrh.w	r1, [r1, #68]	@ 0x44
 801e5c0:	9808      	ldr	r0, [sp, #32]
 801e5c2:	1a59      	subs	r1, r3, r1
 801e5c4:	b209      	sxth	r1, r1
 801e5c6:	9107      	str	r1, [sp, #28]
 801e5c8:	eb07 0148 	add.w	r1, r7, r8, lsl #1
 801e5cc:	fa50 f086 	uxtab	r0, r0, r6
 801e5d0:	f8b1 10ca 	ldrh.w	r1, [r1, #202]	@ 0xca
 801e5d4:	9106      	str	r1, [sp, #24]
 801e5d6:	f99a 1000 	ldrsb.w	r1, [sl]
 801e5da:	fa4f f980 	sxtb.w	r9, r0
 801e5de:	2900      	cmp	r1, #0
 801e5e0:	b2f0      	uxtb	r0, r6
 801e5e2:	9002      	str	r0, [sp, #8]
 801e5e4:	f340 8127 	ble.w	801e836 <Argus_Dca_Evaluate+0x5de>
 801e5e8:	f994 0035 	ldrsb.w	r0, [r4, #53]	@ 0x35
 801e5ec:	eba0 0109 	sub.w	r1, r0, r9
 801e5f0:	2901      	cmp	r1, #1
 801e5f2:	9109      	str	r1, [sp, #36]	@ 0x24
 801e5f4:	f340 841e 	ble.w	801ee34 <Argus_Dca_Evaluate+0xbdc>
 801e5f8:	4581      	cmp	r9, r0
 801e5fa:	f340 83f7 	ble.w	801edec <Argus_Dca_Evaluate+0xb94>
 801e5fe:	eba9 0100 	sub.w	r1, r9, r0
 801e602:	8fa6      	ldrh	r6, [r4, #60]	@ 0x3c
 801e604:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 801e606:	fb06 f101 	mul.w	r1, r6, r1
 801e60a:	1a18      	subs	r0, r3, r0
 801e60c:	4288      	cmp	r0, r1
 801e60e:	f2c0 83f8 	blt.w	801ee02 <Argus_Dca_Evaluate+0xbaa>
 801e612:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801e616:	428a      	cmp	r2, r1
 801e618:	f340 839c 	ble.w	801ed54 <Argus_Dca_Evaluate+0xafc>
 801e61c:	f1b8 0f02 	cmp.w	r8, #2
 801e620:	f200 838f 	bhi.w	801ed42 <Argus_Dca_Evaluate+0xaea>
 801e624:	eb07 0208 	add.w	r2, r7, r8
 801e628:	9904      	ldr	r1, [sp, #16]
 801e62a:	f892 20c6 	ldrb.w	r2, [r2, #198]	@ 0xc6
 801e62e:	4291      	cmp	r1, r2
 801e630:	f280 8387 	bge.w	801ed42 <Argus_Dca_Evaluate+0xaea>
 801e634:	f89a 2014 	ldrb.w	r2, [sl, #20]
 801e638:	4542      	cmp	r2, r8
 801e63a:	bf84      	itt	hi
 801e63c:	f108 0201 	addhi.w	r2, r8, #1
 801e640:	b2d2      	uxtbhi	r2, r2
 801e642:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
 801e646:	9a02      	ldr	r2, [sp, #8]
 801e648:	1e51      	subs	r1, r2, #1
 801e64a:	b24a      	sxtb	r2, r1
 801e64c:	9204      	str	r2, [sp, #16]
 801e64e:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 801e652:	e100      	b.n	801e856 <Argus_Dca_Evaluate+0x5fe>
 801e654:	f04f 0e00 	mov.w	lr, #0
 801e658:	e6e9      	b.n	801e42e <Argus_Dca_Evaluate+0x1d6>
 801e65a:	b289      	uxth	r1, r1
 801e65c:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 801e660:	0089      	lsls	r1, r1, #2
 801e662:	fbb1 f1f3 	udiv	r1, r1, r3
 801e666:	e713      	b.n	801e490 <Argus_Dca_Evaluate+0x238>
 801e668:	6923      	ldr	r3, [r4, #16]
 801e66a:	2b00      	cmp	r3, #0
 801e66c:	f43f aea5 	beq.w	801e3ba <Argus_Dca_Evaluate+0x162>
 801e670:	e662      	b.n	801e338 <Argus_Dca_Evaluate+0xe0>
 801e672:	4283      	cmp	r3, r0
 801e674:	bf8c      	ite	hi
 801e676:	2100      	movhi	r1, #0
 801e678:	2101      	movls	r1, #1
 801e67a:	e684      	b.n	801e386 <Argus_Dca_Evaluate+0x12e>
 801e67c:	4293      	cmp	r3, r2
 801e67e:	f67f af49 	bls.w	801e514 <Argus_Dca_Evaluate+0x2bc>
 801e682:	4560      	cmp	r0, ip
 801e684:	f000 80a2 	beq.w	801e7cc <Argus_Dca_Evaluate+0x574>
 801e688:	bf34      	ite	cc
 801e68a:	2301      	movcc	r3, #1
 801e68c:	2300      	movcs	r3, #0
 801e68e:	2b00      	cmp	r3, #0
 801e690:	f47f af4e 	bne.w	801e530 <Argus_Dca_Evaluate+0x2d8>
 801e694:	458c      	cmp	ip, r1
 801e696:	f000 809e 	beq.w	801e7d6 <Argus_Dca_Evaluate+0x57e>
 801e69a:	bf8c      	ite	hi
 801e69c:	2201      	movhi	r2, #1
 801e69e:	2200      	movls	r2, #0
 801e6a0:	2a00      	cmp	r2, #0
 801e6a2:	f47f ae85 	bne.w	801e3b0 <Argus_Dca_Evaluate+0x158>
 801e6a6:	e743      	b.n	801e530 <Argus_Dca_Evaluate+0x2d8>
 801e6a8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801e6aa:	f993 3000 	ldrsb.w	r3, [r3]
 801e6ae:	2b00      	cmp	r3, #0
 801e6b0:	bfc8      	it	gt
 801e6b2:	f991 60c0 	ldrsbgt.w	r6, [r1, #192]	@ 0xc0
 801e6b6:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 801e6b8:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801e6ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801e6be:	bfcc      	ite	gt
 801e6c0:	f04f 0b00 	movgt.w	fp, #0
 801e6c4:	2600      	movle	r6, #0
 801e6c6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 801e6ca:	678b      	str	r3, [r1, #120]	@ 0x78
 801e6cc:	e681      	b.n	801e3d2 <Argus_Dca_Evaluate+0x17a>
 801e6ce:	f8a5 31c6 	strh.w	r3, [r5, #454]	@ 0x1c6
 801e6d2:	469e      	mov	lr, r3
 801e6d4:	e6ad      	b.n	801e432 <Argus_Dca_Evaluate+0x1da>
 801e6d6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801e6d8:	f993 3000 	ldrsb.w	r3, [r3]
 801e6dc:	2b00      	cmp	r3, #0
 801e6de:	f77f aeae 	ble.w	801e43e <Argus_Dca_Evaluate+0x1e6>
 801e6e2:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 801e6e4:	4693      	mov	fp, r2
 801e6e6:	f993 60c0 	ldrsb.w	r6, [r3, #192]	@ 0xc0
 801e6ea:	e6a8      	b.n	801e43e <Argus_Dca_Evaluate+0x1e6>
 801e6ec:	45ce      	cmp	lr, r9
 801e6ee:	d056      	beq.n	801e79e <Argus_Dca_Evaluate+0x546>
 801e6f0:	bf34      	ite	cc
 801e6f2:	2301      	movcc	r3, #1
 801e6f4:	2300      	movcs	r3, #0
 801e6f6:	2b00      	cmp	r3, #0
 801e6f8:	f47f af1a 	bne.w	801e530 <Argus_Dca_Evaluate+0x2d8>
 801e6fc:	e64d      	b.n	801e39a <Argus_Dca_Evaluate+0x142>
 801e6fe:	f1b9 0f00 	cmp.w	r9, #0
 801e702:	d103      	bne.n	801e70c <Argus_Dca_Evaluate+0x4b4>
 801e704:	7ac1      	ldrb	r1, [r0, #11]
 801e706:	2900      	cmp	r1, #0
 801e708:	f47f aecc 	bne.w	801e4a4 <Argus_Dca_Evaluate+0x24c>
 801e70c:	6963      	ldr	r3, [r4, #20]
 801e70e:	b91b      	cbnz	r3, 801e718 <Argus_Dca_Evaluate+0x4c0>
 801e710:	6923      	ldr	r3, [r4, #16]
 801e712:	2b00      	cmp	r3, #0
 801e714:	f43f aed0 	beq.w	801e4b8 <Argus_Dca_Evaluate+0x260>
 801e718:	a90d      	add	r1, sp, #52	@ 0x34
 801e71a:	a80c      	add	r0, sp, #48	@ 0x30
 801e71c:	f8be 9018 	ldrh.w	r9, [lr, #24]
 801e720:	f7e8 fd3a 	bl	8007198 <Timer_GetCounterValue>
 801e724:	49a7      	ldr	r1, [pc, #668]	@ (801e9c4 <Argus_Dca_Evaluate+0x76c>)
 801e726:	f8d4 c014 	ldr.w	ip, [r4, #20]
 801e72a:	6920      	ldr	r0, [r4, #16]
 801e72c:	fba1 3109 	umull	r3, r1, r1, r9
 801e730:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801e734:	098b      	lsrs	r3, r1, #6
 801e736:	fb02 9313 	mls	r3, r2, r3, r9
 801e73a:	fb02 c303 	mla	r3, r2, r3, ip
 801e73e:	4aa2      	ldr	r2, [pc, #648]	@ (801e9c8 <Argus_Dca_Evaluate+0x770>)
 801e740:	4293      	cmp	r3, r2
 801e742:	e9dd 9e0c 	ldrd	r9, lr, [sp, #48]	@ 0x30
 801e746:	eb00 1191 	add.w	r1, r0, r1, lsr #6
 801e74a:	d904      	bls.n	801e756 <Argus_Dca_Evaluate+0x4fe>
 801e74c:	f5a3 2374 	sub.w	r3, r3, #999424	@ 0xf4000
 801e750:	3101      	adds	r1, #1
 801e752:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 801e756:	4288      	cmp	r0, r1
 801e758:	d052      	beq.n	801e800 <Argus_Dca_Evaluate+0x5a8>
 801e75a:	bf34      	ite	cc
 801e75c:	2201      	movcc	r2, #1
 801e75e:	2200      	movcs	r2, #0
 801e760:	2a00      	cmp	r2, #0
 801e762:	d044      	beq.n	801e7ee <Argus_Dca_Evaluate+0x596>
 801e764:	4548      	cmp	r0, r9
 801e766:	d054      	beq.n	801e812 <Argus_Dca_Evaluate+0x5ba>
 801e768:	bf34      	ite	cc
 801e76a:	2201      	movcc	r2, #1
 801e76c:	2200      	movcs	r2, #0
 801e76e:	2a00      	cmp	r2, #0
 801e770:	f43f ae1e 	beq.w	801e3b0 <Argus_Dca_Evaluate+0x158>
 801e774:	4589      	cmp	r9, r1
 801e776:	d059      	beq.n	801e82c <Argus_Dca_Evaluate+0x5d4>
 801e778:	bf8c      	ite	hi
 801e77a:	2301      	movhi	r3, #1
 801e77c:	2300      	movls	r3, #0
 801e77e:	f083 0301 	eor.w	r3, r3, #1
 801e782:	2b00      	cmp	r3, #0
 801e784:	f43f ae14 	beq.w	801e3b0 <Argus_Dca_Evaluate+0x158>
 801e788:	e6d2      	b.n	801e530 <Argus_Dca_Evaluate+0x2d8>
 801e78a:	6963      	ldr	r3, [r4, #20]
 801e78c:	b91b      	cbnz	r3, 801e796 <Argus_Dca_Evaluate+0x53e>
 801e78e:	6923      	ldr	r3, [r4, #16]
 801e790:	2b00      	cmp	r3, #0
 801e792:	f43f ae12 	beq.w	801e3ba <Argus_Dca_Evaluate+0x162>
 801e796:	2300      	movs	r3, #0
 801e798:	e9c4 3304 	strd	r3, r3, [r4, #16]
 801e79c:	e60d      	b.n	801e3ba <Argus_Dca_Evaluate+0x162>
 801e79e:	4293      	cmp	r3, r2
 801e7a0:	bf8c      	ite	hi
 801e7a2:	2300      	movhi	r3, #0
 801e7a4:	2301      	movls	r3, #1
 801e7a6:	2b00      	cmp	r3, #0
 801e7a8:	f47f aec2 	bne.w	801e530 <Argus_Dca_Evaluate+0x2d8>
 801e7ac:	e5f5      	b.n	801e39a <Argus_Dca_Evaluate+0x142>
 801e7ae:	4293      	cmp	r3, r2
 801e7b0:	bf8c      	ite	hi
 801e7b2:	2300      	movhi	r3, #0
 801e7b4:	2301      	movls	r3, #1
 801e7b6:	e5ef      	b.n	801e398 <Argus_Dca_Evaluate+0x140>
 801e7b8:	4282      	cmp	r2, r0
 801e7ba:	bf34      	ite	cc
 801e7bc:	2200      	movcc	r2, #0
 801e7be:	2201      	movcs	r2, #1
 801e7c0:	e5f1      	b.n	801e3a6 <Argus_Dca_Evaluate+0x14e>
 801e7c2:	4573      	cmp	r3, lr
 801e7c4:	bf8c      	ite	hi
 801e7c6:	2300      	movhi	r3, #0
 801e7c8:	2301      	movls	r3, #1
 801e7ca:	e6a9      	b.n	801e520 <Argus_Dca_Evaluate+0x2c8>
 801e7cc:	4573      	cmp	r3, lr
 801e7ce:	bf8c      	ite	hi
 801e7d0:	2300      	movhi	r3, #0
 801e7d2:	2301      	movls	r3, #1
 801e7d4:	e75b      	b.n	801e68e <Argus_Dca_Evaluate+0x436>
 801e7d6:	4596      	cmp	lr, r2
 801e7d8:	bf34      	ite	cc
 801e7da:	2200      	movcc	r2, #0
 801e7dc:	2201      	movcs	r2, #1
 801e7de:	2a00      	cmp	r2, #0
 801e7e0:	f47f ade6 	bne.w	801e3b0 <Argus_Dca_Evaluate+0x158>
 801e7e4:	e6a4      	b.n	801e530 <Argus_Dca_Evaluate+0x2d8>
 801e7e6:	4596      	cmp	lr, r2
 801e7e8:	f4bf ade2 	bcs.w	801e3b0 <Argus_Dca_Evaluate+0x158>
 801e7ec:	e6a0      	b.n	801e530 <Argus_Dca_Evaluate+0x2d8>
 801e7ee:	4548      	cmp	r0, r9
 801e7f0:	d014      	beq.n	801e81c <Argus_Dca_Evaluate+0x5c4>
 801e7f2:	bf34      	ite	cc
 801e7f4:	2201      	movcc	r2, #1
 801e7f6:	2200      	movcs	r2, #0
 801e7f8:	2a00      	cmp	r2, #0
 801e7fa:	f47f ae99 	bne.w	801e530 <Argus_Dca_Evaluate+0x2d8>
 801e7fe:	e7b9      	b.n	801e774 <Argus_Dca_Evaluate+0x51c>
 801e800:	459c      	cmp	ip, r3
 801e802:	bf8c      	ite	hi
 801e804:	2200      	movhi	r2, #0
 801e806:	2201      	movls	r2, #1
 801e808:	e7aa      	b.n	801e760 <Argus_Dca_Evaluate+0x508>
 801e80a:	f06f 036a 	mvn.w	r3, #106	@ 0x6a
 801e80e:	602b      	str	r3, [r5, #0]
 801e810:	e615      	b.n	801e43e <Argus_Dca_Evaluate+0x1e6>
 801e812:	45f4      	cmp	ip, lr
 801e814:	bf8c      	ite	hi
 801e816:	2200      	movhi	r2, #0
 801e818:	2201      	movls	r2, #1
 801e81a:	e7a8      	b.n	801e76e <Argus_Dca_Evaluate+0x516>
 801e81c:	45f4      	cmp	ip, lr
 801e81e:	bf8c      	ite	hi
 801e820:	2200      	movhi	r2, #0
 801e822:	2201      	movls	r2, #1
 801e824:	2a00      	cmp	r2, #0
 801e826:	f47f ae83 	bne.w	801e530 <Argus_Dca_Evaluate+0x2d8>
 801e82a:	e7a3      	b.n	801e774 <Argus_Dca_Evaluate+0x51c>
 801e82c:	4573      	cmp	r3, lr
 801e82e:	bf8c      	ite	hi
 801e830:	2300      	movhi	r3, #0
 801e832:	2301      	movls	r3, #1
 801e834:	e7a3      	b.n	801e77e <Argus_Dca_Evaluate+0x526>
 801e836:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801e83a:	428a      	cmp	r2, r1
 801e83c:	f73f af03 	bgt.w	801e646 <Argus_Dca_Evaluate+0x3ee>
 801e840:	9a06      	ldr	r2, [sp, #24]
 801e842:	9907      	ldr	r1, [sp, #28]
 801e844:	4252      	negs	r2, r2
 801e846:	4291      	cmp	r1, r2
 801e848:	da03      	bge.n	801e852 <Argus_Dca_Evaluate+0x5fa>
 801e84a:	9902      	ldr	r1, [sp, #8]
 801e84c:	3101      	adds	r1, #1
 801e84e:	b24a      	sxtb	r2, r1
 801e850:	9204      	str	r2, [sp, #16]
 801e852:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 801e856:	86e3      	strh	r3, [r4, #54]	@ 0x36
 801e858:	9b08      	ldr	r3, [sp, #32]
 801e85a:	9904      	ldr	r1, [sp, #16]
 801e85c:	f884 9035 	strb.w	r9, [r4, #53]	@ 0x35
 801e860:	1ad2      	subs	r2, r2, r3
 801e862:	f1c3 0301 	rsb	r3, r3, #1
 801e866:	428b      	cmp	r3, r1
 801e868:	bfb8      	it	lt
 801e86a:	460b      	movlt	r3, r1
 801e86c:	429a      	cmp	r2, r3
 801e86e:	bfa8      	it	ge
 801e870:	461a      	movge	r2, r3
 801e872:	b256      	sxtb	r6, r2
 801e874:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 801e876:	8460      	strh	r0, [r4, #34]	@ 0x22
 801e878:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 801e87c:	2b02      	cmp	r3, #2
 801e87e:	f000 814e 	beq.w	801eb1e <Argus_Dca_Evaluate+0x8c6>
 801e882:	2b01      	cmp	r3, #1
 801e884:	d104      	bne.n	801e890 <Argus_Dca_Evaluate+0x638>
 801e886:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801e88a:	4298      	cmp	r0, r3
 801e88c:	bf88      	it	hi
 801e88e:	8463      	strhhi	r3, [r4, #34]	@ 0x22
 801e890:	f99a 3000 	ldrsb.w	r3, [sl]
 801e894:	2b00      	cmp	r3, #0
 801e896:	dc62      	bgt.n	801e95e <Argus_Dca_Evaluate+0x706>
 801e898:	f89a 1013 	ldrb.w	r1, [sl, #19]
 801e89c:	f894 5034 	ldrb.w	r5, [r4, #52]	@ 0x34
 801e8a0:	9a00      	ldr	r2, [sp, #0]
 801e8a2:	e9d7 0324 	ldrd	r0, r3, [r7, #144]	@ 0x90
 801e8a6:	f3c2 128f 	ubfx	r2, r2, #6, #16
 801e8aa:	2a01      	cmp	r2, #1
 801e8ac:	bf38      	it	cc
 801e8ae:	2201      	movcc	r2, #1
 801e8b0:	fb03 0002 	mla	r0, r3, r2, r0
 801e8b4:	4694      	mov	ip, r2
 801e8b6:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	@ 0x2c
 801e8ba:	4293      	cmp	r3, r2
 801e8bc:	bf28      	it	cs
 801e8be:	4613      	movcs	r3, r2
 801e8c0:	f3c0 3240 	ubfx	r2, r0, #13, #1
 801e8c4:	eb02 3090 	add.w	r0, r2, r0, lsr #14
 801e8c8:	fbb3 f7f0 	udiv	r7, r3, r0
 801e8cc:	2f01      	cmp	r7, #1
 801e8ce:	69a3      	ldr	r3, [r4, #24]
 801e8d0:	bf38      	it	cc
 801e8d2:	2701      	movcc	r7, #1
 801e8d4:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 801e8d8:	bf28      	it	cs
 801e8da:	f44f 6780 	movcs.w	r7, #1024	@ 0x400
 801e8de:	1c5a      	adds	r2, r3, #1
 801e8e0:	d026      	beq.n	801e930 <Argus_Dca_Evaluate+0x6d8>
 801e8e2:	9a01      	ldr	r2, [sp, #4]
 801e8e4:	f8b4 801c 	ldrh.w	r8, [r4, #28]
 801e8e8:	2a01      	cmp	r2, #1
 801e8ea:	bf0c      	ite	eq
 801e8ec:	f894 003e 	ldrbeq.w	r0, [r4, #62]	@ 0x3e
 801e8f0:	2004      	movne	r0, #4
 801e8f2:	2801      	cmp	r0, #1
 801e8f4:	bf38      	it	cc
 801e8f6:	2001      	movcc	r0, #1
 801e8f8:	fb0c f200 	mul.w	r2, ip, r0
 801e8fc:	f3c3 0c0e 	ubfx	ip, r3, #0, #15
 801e900:	fb08 fc0c 	mul.w	ip, r8, ip
 801e904:	ea4f 3ed3 	mov.w	lr, r3, lsr #15
 801e908:	ea4f 33dc 	mov.w	r3, ip, lsr #15
 801e90c:	fb08 330e 	mla	r3, r8, lr, r3
 801e910:	f3cc 3c80 	ubfx	ip, ip, #14, #1
 801e914:	4463      	add	r3, ip
 801e916:	4293      	cmp	r3, r2
 801e918:	f0c0 8159 	bcc.w	801ebce <Argus_Dca_Evaluate+0x976>
 801e91c:	fbb3 f3f2 	udiv	r3, r3, r2
 801e920:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e924:	bf28      	it	cs
 801e926:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 801e92a:	429f      	cmp	r7, r3
 801e92c:	bf28      	it	cs
 801e92e:	461f      	movcs	r7, r3
 801e930:	455d      	cmp	r5, fp
 801e932:	b2bf      	uxth	r7, r7
 801e934:	d03b      	beq.n	801e9ae <Argus_Dca_Evaluate+0x756>
 801e936:	2300      	movs	r3, #0
 801e938:	9302      	str	r3, [sp, #8]
 801e93a:	4559      	cmp	r1, fp
 801e93c:	f4ff ad7f 	bcc.w	801e43e <Argus_Dca_Evaluate+0x1e6>
 801e940:	f8ba 300e 	ldrh.w	r3, [sl, #14]
 801e944:	9a00      	ldr	r2, [sp, #0]
 801e946:	4293      	cmp	r3, r2
 801e948:	f4ff ad79 	bcc.w	801e43e <Argus_Dca_Evaluate+0x1e6>
 801e94c:	9b01      	ldr	r3, [sp, #4]
 801e94e:	2b00      	cmp	r3, #0
 801e950:	f47f ad75 	bne.w	801e43e <Argus_Dca_Evaluate+0x1e6>
 801e954:	9b02      	ldr	r3, [sp, #8]
 801e956:	f043 0301 	orr.w	r3, r3, #1
 801e95a:	9302      	str	r3, [sp, #8]
 801e95c:	e56f      	b.n	801e43e <Argus_Dca_Evaluate+0x1e6>
 801e95e:	7b39      	ldrb	r1, [r7, #12]
 801e960:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 801e964:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801e968:	fb03 f101 	mul.w	r1, r3, r1
 801e96c:	f89a 300a 	ldrb.w	r3, [sl, #10]
 801e970:	2b02      	cmp	r3, #2
 801e972:	ea4f 2111 	mov.w	r1, r1, lsr #8
 801e976:	f105 0228 	add.w	r2, r5, #40	@ 0x28
 801e97a:	f04f 0b00 	mov.w	fp, #0
 801e97e:	d025      	beq.n	801e9cc <Argus_Dca_Evaluate+0x774>
 801e980:	f505 70d4 	add.w	r0, r5, #424	@ 0x1a8
 801e984:	465b      	mov	r3, fp
 801e986:	e006      	b.n	801e996 <Argus_Dca_Evaluate+0x73e>
 801e988:	88d1      	ldrh	r1, [r2, #6]
 801e98a:	428b      	cmp	r3, r1
 801e98c:	bf38      	it	cc
 801e98e:	460b      	movcc	r3, r1
 801e990:	320c      	adds	r2, #12
 801e992:	4290      	cmp	r0, r2
 801e994:	d032      	beq.n	801e9fc <Argus_Dca_Evaluate+0x7a4>
 801e996:	7a11      	ldrb	r1, [r2, #8]
 801e998:	f011 0f11 	tst.w	r1, #17
 801e99c:	d1f8      	bne.n	801e990 <Argus_Dca_Evaluate+0x738>
 801e99e:	f011 0f02 	tst.w	r1, #2
 801e9a2:	f10b 0101 	add.w	r1, fp, #1
 801e9a6:	d0ef      	beq.n	801e988 <Argus_Dca_Evaluate+0x730>
 801e9a8:	fa5f fb81 	uxtb.w	fp, r1
 801e9ac:	e7f0      	b.n	801e990 <Argus_Dca_Evaluate+0x738>
 801e9ae:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 801e9b0:	9a00      	ldr	r2, [sp, #0]
 801e9b2:	4293      	cmp	r3, r2
 801e9b4:	d1bf      	bne.n	801e936 <Argus_Dca_Evaluate+0x6de>
 801e9b6:	9b01      	ldr	r3, [sp, #4]
 801e9b8:	2b01      	cmp	r3, #1
 801e9ba:	bf0c      	ite	eq
 801e9bc:	2302      	moveq	r3, #2
 801e9be:	2300      	movne	r3, #0
 801e9c0:	9302      	str	r3, [sp, #8]
 801e9c2:	e7ba      	b.n	801e93a <Argus_Dca_Evaluate+0x6e2>
 801e9c4:	10624dd3 	.word	0x10624dd3
 801e9c8:	000f423f 	.word	0x000f423f
 801e9cc:	f505 7cd4 	add.w	ip, r5, #424	@ 0x1a8
 801e9d0:	4658      	mov	r0, fp
 801e9d2:	465b      	mov	r3, fp
 801e9d4:	7a17      	ldrb	r7, [r2, #8]
 801e9d6:	f017 0f11 	tst.w	r7, #17
 801e9da:	d10a      	bne.n	801e9f2 <Argus_Dca_Evaluate+0x79a>
 801e9dc:	f017 0f02 	tst.w	r7, #2
 801e9e0:	f10b 0701 	add.w	r7, fp, #1
 801e9e4:	bf0d      	iteet	eq
 801e9e6:	88d7      	ldrheq	r7, [r2, #6]
 801e9e8:	fa5f fb87 	uxtbne.w	fp, r7
 801e9ec:	185b      	addne	r3, r3, r1
 801e9ee:	19db      	addeq	r3, r3, r7
 801e9f0:	3001      	adds	r0, #1
 801e9f2:	320c      	adds	r2, #12
 801e9f4:	4594      	cmp	ip, r2
 801e9f6:	d1ed      	bne.n	801e9d4 <Argus_Dca_Evaluate+0x77c>
 801e9f8:	fbb3 f3f0 	udiv	r3, r3, r0
 801e9fc:	f8d5 21cc 	ldr.w	r2, [r5, #460]	@ 0x1cc
 801ea00:	b29b      	uxth	r3, r3
 801ea02:	b102      	cbz	r2, 801ea06 <Argus_Dca_Evaluate+0x7ae>
 801ea04:	8013      	strh	r3, [r2, #0]
 801ea06:	9a05      	ldr	r2, [sp, #20]
 801ea08:	f89a 9003 	ldrb.w	r9, [sl, #3]
 801ea0c:	2a01      	cmp	r2, #1
 801ea0e:	bf08      	it	eq
 801ea10:	f894 c03e 	ldrbeq.w	ip, [r4, #62]	@ 0x3e
 801ea14:	9a03      	ldr	r2, [sp, #12]
 801ea16:	bf18      	it	ne
 801ea18:	f04f 0c04 	movne.w	ip, #4
 801ea1c:	fb0c f702 	mul.w	r7, ip, r2
 801ea20:	45cb      	cmp	fp, r9
 801ea22:	fa07 f708 	lsl.w	r7, r7, r8
 801ea26:	f0c0 810e 	bcc.w	801ec46 <Argus_Dca_Evaluate+0x9ee>
 801ea2a:	f8ba 200e 	ldrh.w	r2, [sl, #14]
 801ea2e:	f89a 1012 	ldrb.w	r1, [sl, #18]
 801ea32:	0093      	lsls	r3, r2, #2
 801ea34:	408b      	lsls	r3, r1
 801ea36:	429f      	cmp	r7, r3
 801ea38:	f200 8214 	bhi.w	801ee64 <Argus_Dca_Evaluate+0xc0c>
 801ea3c:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 801ea3e:	8be0      	ldrh	r0, [r4, #30]
 801ea40:	2701      	movs	r7, #1
 801ea42:	45d9      	cmp	r9, fp
 801ea44:	d803      	bhi.n	801ea4e <Argus_Dca_Evaluate+0x7f6>
 801ea46:	69ab      	ldr	r3, [r5, #24]
 801ea48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801ea4c:	61ab      	str	r3, [r5, #24]
 801ea4e:	0043      	lsls	r3, r0, #1
 801ea50:	4293      	cmp	r3, r2
 801ea52:	f89a 0012 	ldrb.w	r0, [sl, #18]
 801ea56:	f894 5034 	ldrb.w	r5, [r4, #52]	@ 0x34
 801ea5a:	f89a e00b 	ldrb.w	lr, [sl, #11]
 801ea5e:	bfb8      	it	lt
 801ea60:	4613      	movlt	r3, r2
 801ea62:	428b      	cmp	r3, r1
 801ea64:	bfa8      	it	ge
 801ea66:	460b      	movge	r3, r1
 801ea68:	42a8      	cmp	r0, r5
 801ea6a:	bf28      	it	cs
 801ea6c:	4628      	movcs	r0, r5
 801ea6e:	f10e 3cff 	add.w	ip, lr, #4294967295
 801ea72:	f1be 0800 	subs.w	r8, lr, #0
 801ea76:	4683      	mov	fp, r0
 801ea78:	bf18      	it	ne
 801ea7a:	f04f 0801 	movne.w	r8, #1
 801ea7e:	f1dc 0000 	rsbs	r0, ip, #0
 801ea82:	eb40 000c 	adc.w	r0, r0, ip
 801ea86:	9001      	str	r0, [sp, #4]
 801ea88:	f1be 0f00 	cmp.w	lr, #0
 801ea8c:	f000 81fb 	beq.w	801ee86 <Argus_Dca_Evaluate+0xc2e>
 801ea90:	f894 003e 	ldrb.w	r0, [r4, #62]	@ 0x3e
 801ea94:	fb00 f903 	mul.w	r9, r0, r3
 801ea98:	fa09 f90b 	lsl.w	r9, r9, fp
 801ea9c:	454f      	cmp	r7, r9
 801ea9e:	4684      	mov	ip, r0
 801eaa0:	f080 81f9 	bcs.w	801ee96 <Argus_Dca_Evaluate+0xc3e>
 801eaa4:	428a      	cmp	r2, r1
 801eaa6:	4613      	mov	r3, r2
 801eaa8:	bf28      	it	cs
 801eaaa:	460b      	movcs	r3, r1
 801eaac:	f1be 0f01 	cmp.w	lr, #1
 801eab0:	9300      	str	r3, [sp, #0]
 801eab2:	bf18      	it	ne
 801eab4:	2004      	movne	r0, #4
 801eab6:	9b00      	ldr	r3, [sp, #0]
 801eab8:	fb00 f303 	mul.w	r3, r0, r3
 801eabc:	fa03 f20b 	lsl.w	r2, r3, fp
 801eac0:	4297      	cmp	r7, r2
 801eac2:	f080 8242 	bcs.w	801ef4a <Argus_Dca_Evaluate+0xcf2>
 801eac6:	fbb7 f3f3 	udiv	r3, r7, r3
 801eaca:	2b01      	cmp	r3, #1
 801eacc:	bf38      	it	cc
 801eace:	2301      	movcc	r3, #1
 801ead0:	461a      	mov	r2, r3
 801ead2:	fab3 f383 	clz	r3, r3
 801ead6:	f1c3 011e 	rsb	r1, r3, #30
 801eada:	40ca      	lsrs	r2, r1
 801eadc:	f1c3 031f 	rsb	r3, r3, #31
 801eae0:	f89a 1013 	ldrb.w	r1, [sl, #19]
 801eae4:	2a03      	cmp	r2, #3
 801eae6:	bf08      	it	eq
 801eae8:	3301      	addeq	r3, #1
 801eaea:	428b      	cmp	r3, r1
 801eaec:	bf38      	it	cc
 801eaee:	460b      	movcc	r3, r1
 801eaf0:	455b      	cmp	r3, fp
 801eaf2:	bf28      	it	cs
 801eaf4:	465b      	movcs	r3, fp
 801eaf6:	fa5f fb83 	uxtb.w	fp, r3
 801eafa:	eb04 030b 	add.w	r3, r4, fp
 801eafe:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 801eb02:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 801eb06:	6e27      	ldr	r7, [r4, #96]	@ 0x60
 801eb08:	1ad2      	subs	r2, r2, r3
 801eb0a:	f1c3 0301 	rsb	r3, r3, #1
 801eb0e:	429e      	cmp	r6, r3
 801eb10:	bfb8      	it	lt
 801eb12:	461e      	movlt	r6, r3
 801eb14:	4296      	cmp	r6, r2
 801eb16:	bfa8      	it	ge
 801eb18:	4616      	movge	r6, r2
 801eb1a:	b276      	sxtb	r6, r6
 801eb1c:	e6c0      	b.n	801e8a0 <Argus_Dca_Evaluate+0x648>
 801eb1e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 801eb22:	2b00      	cmp	r3, #0
 801eb24:	f000 81a4 	beq.w	801ee70 <Argus_Dca_Evaluate+0xc18>
 801eb28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801eb2c:	4596      	cmp	lr, r2
 801eb2e:	f000 819f 	beq.w	801ee70 <Argus_Dca_Evaluate+0xc18>
 801eb32:	fb03 f20e 	mul.w	r2, r3, lr
 801eb36:	0192      	lsls	r2, r2, #6
 801eb38:	f5c2 3280 	rsb	r2, r2, #65536	@ 0x10000
 801eb3c:	2a01      	cmp	r2, #1
 801eb3e:	bfb8      	it	lt
 801eb40:	2201      	movlt	r2, #1
 801eb42:	fab2 f382 	clz	r3, r2
 801eb46:	f1c3 011e 	rsb	r1, r3, #30
 801eb4a:	40ca      	lsrs	r2, r1
 801eb4c:	f1c3 031f 	rsb	r3, r3, #31
 801eb50:	2a03      	cmp	r2, #3
 801eb52:	bf08      	it	eq
 801eb54:	3301      	addeq	r3, #1
 801eb56:	f1c3 0310 	rsb	r3, r3, #16
 801eb5a:	b25b      	sxtb	r3, r3
 801eb5c:	f8ba 2010 	ldrh.w	r2, [sl, #16]
 801eb60:	b14b      	cbz	r3, 801eb76 <Argus_Dca_Evaluate+0x91e>
 801eb62:	2b20      	cmp	r3, #32
 801eb64:	f200 8182 	bhi.w	801ee6c <Argus_Dca_Evaluate+0xc14>
 801eb68:	3b01      	subs	r3, #1
 801eb6a:	fa22 f303 	lsr.w	r3, r2, r3
 801eb6e:	f003 0201 	and.w	r2, r3, #1
 801eb72:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 801eb76:	f8ba 100c 	ldrh.w	r1, [sl, #12]
 801eb7a:	b293      	uxth	r3, r2
 801eb7c:	428b      	cmp	r3, r1
 801eb7e:	bf38      	it	cc
 801eb80:	460b      	movcc	r3, r1
 801eb82:	4298      	cmp	r0, r3
 801eb84:	bf88      	it	hi
 801eb86:	8463      	strhhi	r3, [r4, #34]	@ 0x22
 801eb88:	4561      	cmp	r1, ip
 801eb8a:	d838      	bhi.n	801ebfe <Argus_Dca_Evaluate+0x9a6>
 801eb8c:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
 801eb90:	b353      	cbz	r3, 801ebe8 <Argus_Dca_Evaluate+0x990>
 801eb92:	3b01      	subs	r3, #1
 801eb94:	f884 3027 	strb.w	r3, [r4, #39]	@ 0x27
 801eb98:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 801eb9c:	f8ba 2010 	ldrh.w	r2, [sl, #16]
 801eba0:	b14b      	cbz	r3, 801ebb6 <Argus_Dca_Evaluate+0x95e>
 801eba2:	2b20      	cmp	r3, #32
 801eba4:	f200 8167 	bhi.w	801ee76 <Argus_Dca_Evaluate+0xc1e>
 801eba8:	3b01      	subs	r3, #1
 801ebaa:	fa22 f303 	lsr.w	r3, r2, r3
 801ebae:	f003 0201 	and.w	r2, r3, #1
 801ebb2:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 801ebb6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801ebba:	b292      	uxth	r2, r2
 801ebbc:	429a      	cmp	r2, r3
 801ebbe:	f240 815c 	bls.w	801ee7a <Argus_Dca_Evaluate+0xc22>
 801ebc2:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 801ebc4:	4291      	cmp	r1, r2
 801ebc6:	f67f ae63 	bls.w	801e890 <Argus_Dca_Evaluate+0x638>
 801ebca:	8462      	strh	r2, [r4, #34]	@ 0x22
 801ebcc:	e660      	b.n	801e890 <Argus_Dca_Evaluate+0x638>
 801ebce:	4298      	cmp	r0, r3
 801ebd0:	d824      	bhi.n	801ec1c <Argus_Dca_Evaluate+0x9c4>
 801ebd2:	fbb3 f3f0 	udiv	r3, r3, r0
 801ebd6:	9a00      	ldr	r2, [sp, #0]
 801ebd8:	019b      	lsls	r3, r3, #6
 801ebda:	4293      	cmp	r3, r2
 801ebdc:	bf28      	it	cs
 801ebde:	4613      	movcs	r3, r2
 801ebe0:	b29b      	uxth	r3, r3
 801ebe2:	9300      	str	r3, [sp, #0]
 801ebe4:	2301      	movs	r3, #1
 801ebe6:	e6a0      	b.n	801e92a <Argus_Dca_Evaluate+0x6d2>
 801ebe8:	f8b5 21c8 	ldrh.w	r2, [r5, #456]	@ 0x1c8
 801ebec:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 801ebee:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 801ebf2:	4291      	cmp	r1, r2
 801ebf4:	d91a      	bls.n	801ec2c <Argus_Dca_Evaluate+0x9d4>
 801ebf6:	b9bb      	cbnz	r3, 801ec28 <Argus_Dca_Evaluate+0x9d0>
 801ebf8:	f8ba 2010 	ldrh.w	r2, [sl, #16]
 801ebfc:	e7db      	b.n	801ebb6 <Argus_Dca_Evaluate+0x95e>
 801ebfe:	2300      	movs	r3, #0
 801ec00:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
 801ec04:	f897 30d6 	ldrb.w	r3, [r7, #214]	@ 0xd6
 801ec08:	f884 3027 	strb.w	r3, [r4, #39]	@ 0x27
 801ec0c:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801ec0e:	f7fc fc1b 	bl	801b448 <Argus_Eval_ResetShotNoiseAmplitude>
 801ec12:	e9d4 a717 	ldrd	sl, r7, [r4, #92]	@ 0x5c
 801ec16:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 801ec1a:	e7bf      	b.n	801eb9c <Argus_Dca_Evaluate+0x944>
 801ec1c:	2b03      	cmp	r3, #3
 801ec1e:	d90e      	bls.n	801ec3e <Argus_Dca_Evaluate+0x9e6>
 801ec20:	2200      	movs	r2, #0
 801ec22:	089b      	lsrs	r3, r3, #2
 801ec24:	9201      	str	r2, [sp, #4]
 801ec26:	e7d6      	b.n	801ebd6 <Argus_Dca_Evaluate+0x97e>
 801ec28:	3b01      	subs	r3, #1
 801ec2a:	e7e9      	b.n	801ec00 <Argus_Dca_Evaluate+0x9a8>
 801ec2c:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 801ec2e:	4291      	cmp	r1, r2
 801ec30:	d2b4      	bcs.n	801eb9c <Argus_Dca_Evaluate+0x944>
 801ec32:	f894 2021 	ldrb.w	r2, [r4, #33]	@ 0x21
 801ec36:	429a      	cmp	r2, r3
 801ec38:	d9b0      	bls.n	801eb9c <Argus_Dca_Evaluate+0x944>
 801ec3a:	3301      	adds	r3, #1
 801ec3c:	e7e0      	b.n	801ec00 <Argus_Dca_Evaluate+0x9a8>
 801ec3e:	2300      	movs	r3, #0
 801ec40:	9301      	str	r3, [sp, #4]
 801ec42:	2301      	movs	r3, #1
 801ec44:	e7c7      	b.n	801ebd6 <Argus_Dca_Evaluate+0x97e>
 801ec46:	f89a 2002 	ldrb.w	r2, [sl, #2]
 801ec4a:	4593      	cmp	fp, r2
 801ec4c:	d305      	bcc.n	801ec5a <Argus_Dca_Evaluate+0xa02>
 801ec4e:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 801ec50:	f8ba 200e 	ldrh.w	r2, [sl, #14]
 801ec54:	8be0      	ldrh	r0, [r4, #30]
 801ec56:	08bf      	lsrs	r7, r7, #2
 801ec58:	e6f3      	b.n	801ea42 <Argus_Dca_Evaluate+0x7ea>
 801ec5a:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801ec5e:	4593      	cmp	fp, r2
 801ec60:	d240      	bcs.n	801ece4 <Argus_Dca_Evaluate+0xa8c>
 801ec62:	f8ba 0008 	ldrh.w	r0, [sl, #8]
 801ec66:	4283      	cmp	r3, r0
 801ec68:	d83c      	bhi.n	801ece4 <Argus_Dca_Evaluate+0xa8c>
 801ec6a:	f1bb 0f00 	cmp.w	fp, #0
 801ec6e:	d134      	bne.n	801ecda <Argus_Dca_Evaluate+0xa82>
 801ec70:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801ec74:	4293      	cmp	r3, r2
 801ec76:	d830      	bhi.n	801ecda <Argus_Dca_Evaluate+0xa82>
 801ec78:	f8ba 1006 	ldrh.w	r1, [sl, #6]
 801ec7c:	4299      	cmp	r1, r3
 801ec7e:	d920      	bls.n	801ecc2 <Argus_Dca_Evaluate+0xa6a>
 801ec80:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 801ec82:	9a03      	ldr	r2, [sp, #12]
 801ec84:	4291      	cmp	r1, r2
 801ec86:	d808      	bhi.n	801ec9a <Argus_Dca_Evaluate+0xa42>
 801ec88:	9a05      	ldr	r2, [sp, #20]
 801ec8a:	2a00      	cmp	r2, #0
 801ec8c:	f040 80c8 	bne.w	801ee20 <Argus_Dca_Evaluate+0xbc8>
 801ec90:	f89a 200b 	ldrb.w	r2, [sl, #11]
 801ec94:	2a00      	cmp	r2, #0
 801ec96:	f000 80c3 	beq.w	801ee20 <Argus_Dca_Evaluate+0xbc8>
 801ec9a:	2b02      	cmp	r3, #2
 801ec9c:	bf38      	it	cc
 801ec9e:	2302      	movcc	r3, #2
 801eca0:	0319      	lsls	r1, r3, #12
 801eca2:	0300      	lsls	r0, r0, #12
 801eca4:	f7fd fca4 	bl	801c5f0 <fp_div16.part.0>
 801eca8:	fba0 3007 	umull	r3, r0, r0, r7
 801ecac:	0c1a      	lsrs	r2, r3, #16
 801ecae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 801ecb2:	f3c3 37c0 	ubfx	r7, r3, #15, #1
 801ecb6:	4417      	add	r7, r2
 801ecb8:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 801ecba:	f8ba 200e 	ldrh.w	r2, [sl, #14]
 801ecbe:	8be0      	ldrh	r0, [r4, #30]
 801ecc0:	e6bf      	b.n	801ea42 <Argus_Dca_Evaluate+0x7ea>
 801ecc2:	4293      	cmp	r3, r2
 801ecc4:	d209      	bcs.n	801ecda <Argus_Dca_Evaluate+0xa82>
 801ecc6:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 801ecca:	f89a 2012 	ldrb.w	r2, [sl, #18]
 801ecce:	4293      	cmp	r3, r2
 801ecd0:	bf28      	it	cs
 801ecd2:	4613      	movcs	r3, r2
 801ecd4:	4543      	cmp	r3, r8
 801ecd6:	d90f      	bls.n	801ecf8 <Argus_Dca_Evaluate+0xaa0>
 801ecd8:	007f      	lsls	r7, r7, #1
 801ecda:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 801ecdc:	f8ba 200e 	ldrh.w	r2, [sl, #14]
 801ece0:	8be0      	ldrh	r0, [r4, #30]
 801ece2:	e6ae      	b.n	801ea42 <Argus_Dca_Evaluate+0x7ea>
 801ece4:	f89a 3012 	ldrb.w	r3, [sl, #18]
 801ece8:	4543      	cmp	r3, r8
 801ecea:	d217      	bcs.n	801ed1c <Argus_Dca_Evaluate+0xac4>
 801ecec:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 801ecee:	f8ba 200e 	ldrh.w	r2, [sl, #14]
 801ecf2:	8be0      	ldrh	r0, [r4, #30]
 801ecf4:	087f      	lsrs	r7, r7, #1
 801ecf6:	e6a4      	b.n	801ea42 <Argus_Dca_Evaluate+0x7ea>
 801ecf8:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 801ecfa:	9b03      	ldr	r3, [sp, #12]
 801ecfc:	4299      	cmp	r1, r3
 801ecfe:	d9ed      	bls.n	801ecdc <Argus_Dca_Evaluate+0xa84>
 801ed00:	9b03      	ldr	r3, [sp, #12]
 801ed02:	8be0      	ldrh	r0, [r4, #30]
 801ed04:	f8ba 200e 	ldrh.w	r2, [sl, #14]
 801ed08:	2b3f      	cmp	r3, #63	@ 0x3f
 801ed0a:	bf94      	ite	ls
 801ed0c:	4603      	movls	r3, r0
 801ed0e:	2340      	movhi	r3, #64	@ 0x40
 801ed10:	fb0c f303 	mul.w	r3, ip, r3
 801ed14:	fa03 f308 	lsl.w	r3, r3, r8
 801ed18:	441f      	add	r7, r3
 801ed1a:	e692      	b.n	801ea42 <Argus_Dca_Evaluate+0x7ea>
 801ed1c:	f8ba 200e 	ldrh.w	r2, [sl, #14]
 801ed20:	9b03      	ldr	r3, [sp, #12]
 801ed22:	429a      	cmp	r2, r3
 801ed24:	f0c0 8132 	bcc.w	801ef8c <Argus_Dca_Evaluate+0xd34>
 801ed28:	9b05      	ldr	r3, [sp, #20]
 801ed2a:	2b01      	cmp	r3, #1
 801ed2c:	f000 8129 	beq.w	801ef82 <Argus_Dca_Evaluate+0xd2a>
 801ed30:	f89a 1013 	ldrb.w	r1, [sl, #19]
 801ed34:	4541      	cmp	r1, r8
 801ed36:	f080 8096 	bcs.w	801ee66 <Argus_Dca_Evaluate+0xc0e>
 801ed3a:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 801ed3c:	8be0      	ldrh	r0, [r4, #30]
 801ed3e:	087f      	lsrs	r7, r7, #1
 801ed40:	e67f      	b.n	801ea42 <Argus_Dca_Evaluate+0x7ea>
 801ed42:	9a02      	ldr	r2, [sp, #8]
 801ed44:	f884 8034 	strb.w	r8, [r4, #52]	@ 0x34
 801ed48:	1e51      	subs	r1, r2, #1
 801ed4a:	b24a      	sxtb	r2, r1
 801ed4c:	9204      	str	r2, [sp, #16]
 801ed4e:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 801ed52:	e580      	b.n	801e856 <Argus_Dca_Evaluate+0x5fe>
 801ed54:	9a06      	ldr	r2, [sp, #24]
 801ed56:	9907      	ldr	r1, [sp, #28]
 801ed58:	4252      	negs	r2, r2
 801ed5a:	4291      	cmp	r1, r2
 801ed5c:	da30      	bge.n	801edc0 <Argus_Dca_Evaluate+0xb68>
 801ed5e:	f1b8 0f02 	cmp.w	r8, #2
 801ed62:	d81b      	bhi.n	801ed9c <Argus_Dca_Evaluate+0xb44>
 801ed64:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 801ed68:	f897 10c8 	ldrb.w	r1, [r7, #200]	@ 0xc8
 801ed6c:	4411      	add	r1, r2
 801ed6e:	b249      	sxtb	r1, r1
 801ed70:	4589      	cmp	r9, r1
 801ed72:	da08      	bge.n	801ed86 <Argus_Dca_Evaluate+0xb2e>
 801ed74:	9902      	ldr	r1, [sp, #8]
 801ed76:	f884 8034 	strb.w	r8, [r4, #52]	@ 0x34
 801ed7a:	3101      	adds	r1, #1
 801ed7c:	b249      	sxtb	r1, r1
 801ed7e:	9104      	str	r1, [sp, #16]
 801ed80:	e569      	b.n	801e856 <Argus_Dca_Evaluate+0x5fe>
 801ed82:	2600      	movs	r6, #0
 801ed84:	e576      	b.n	801e874 <Argus_Dca_Evaluate+0x61c>
 801ed86:	f89a 1013 	ldrb.w	r1, [sl, #19]
 801ed8a:	4588      	cmp	r8, r1
 801ed8c:	d10c      	bne.n	801eda8 <Argus_Dca_Evaluate+0xb50>
 801ed8e:	9902      	ldr	r1, [sp, #8]
 801ed90:	f884 8034 	strb.w	r8, [r4, #52]	@ 0x34
 801ed94:	3901      	subs	r1, #1
 801ed96:	b249      	sxtb	r1, r1
 801ed98:	9104      	str	r1, [sp, #16]
 801ed9a:	e55c      	b.n	801e856 <Argus_Dca_Evaluate+0x5fe>
 801ed9c:	f89a 1013 	ldrb.w	r1, [sl, #19]
 801eda0:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 801eda4:	4588      	cmp	r8, r1
 801eda6:	d004      	beq.n	801edb2 <Argus_Dca_Evaluate+0xb5a>
 801eda8:	4588      	cmp	r8, r1
 801edaa:	bf84      	itt	hi
 801edac:	f108 31ff 	addhi.w	r1, r8, #4294967295
 801edb0:	b2c9      	uxtbhi	r1, r1
 801edb2:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
 801edb6:	9902      	ldr	r1, [sp, #8]
 801edb8:	3101      	adds	r1, #1
 801edba:	b249      	sxtb	r1, r1
 801edbc:	9104      	str	r1, [sp, #16]
 801edbe:	e54a      	b.n	801e856 <Argus_Dca_Evaluate+0x5fe>
 801edc0:	f1b8 0f02 	cmp.w	r8, #2
 801edc4:	d849      	bhi.n	801ee5a <Argus_Dca_Evaluate+0xc02>
 801edc6:	eb07 0208 	add.w	r2, r7, r8
 801edca:	9904      	ldr	r1, [sp, #16]
 801edcc:	f892 20c6 	ldrb.w	r2, [r2, #198]	@ 0xc6
 801edd0:	4291      	cmp	r1, r2
 801edd2:	da42      	bge.n	801ee5a <Argus_Dca_Evaluate+0xc02>
 801edd4:	f89a 2014 	ldrb.w	r2, [sl, #20]
 801edd8:	4542      	cmp	r2, r8
 801edda:	bf84      	itt	hi
 801eddc:	f108 0201 	addhi.w	r2, r8, #1
 801ede0:	b2d2      	uxtbhi	r2, r2
 801ede2:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
 801ede6:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 801edea:	e534      	b.n	801e856 <Argus_Dca_Evaluate+0x5fe>
 801edec:	f6bf ac11 	bge.w	801e612 <Argus_Dca_Evaluate+0x3ba>
 801edf0:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 801edf2:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 801edf4:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801edf6:	1ac0      	subs	r0, r0, r3
 801edf8:	fb06 f101 	mul.w	r1, r6, r1
 801edfc:	4288      	cmp	r0, r1
 801edfe:	f6bf ac08 	bge.w	801e612 <Argus_Dca_Evaluate+0x3ba>
 801ee02:	f1b8 0f00 	cmp.w	r8, #0
 801ee06:	f040 8082 	bne.w	801ef0e <Argus_Dca_Evaluate+0xcb6>
 801ee0a:	f884 8034 	strb.w	r8, [r4, #52]	@ 0x34
 801ee0e:	f042 0220 	orr.w	r2, r2, #32
 801ee12:	f997 10c0 	ldrsb.w	r1, [r7, #192]	@ 0xc0
 801ee16:	61aa      	str	r2, [r5, #24]
 801ee18:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 801ee1c:	9104      	str	r1, [sp, #16]
 801ee1e:	e51a      	b.n	801e856 <Argus_Dca_Evaluate+0x5fe>
 801ee20:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 801ee24:	4543      	cmp	r3, r8
 801ee26:	f67f af59 	bls.w	801ecdc <Argus_Dca_Evaluate+0xa84>
 801ee2a:	f8ba 200e 	ldrh.w	r2, [sl, #14]
 801ee2e:	8be0      	ldrh	r0, [r4, #30]
 801ee30:	007f      	lsls	r7, r7, #1
 801ee32:	e606      	b.n	801ea42 <Argus_Dca_Evaluate+0x7ea>
 801ee34:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 801ee36:	f8b7 60c4 	ldrh.w	r6, [r7, #196]	@ 0xc4
 801ee3a:	1ac9      	subs	r1, r1, r3
 801ee3c:	42b1      	cmp	r1, r6
 801ee3e:	f77f abdb 	ble.w	801e5f8 <Argus_Dca_Evaluate+0x3a0>
 801ee42:	2100      	movs	r1, #0
 801ee44:	f042 0220 	orr.w	r2, r2, #32
 801ee48:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
 801ee4c:	f997 10c0 	ldrsb.w	r1, [r7, #192]	@ 0xc0
 801ee50:	61aa      	str	r2, [r5, #24]
 801ee52:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 801ee56:	9104      	str	r1, [sp, #16]
 801ee58:	e4fd      	b.n	801e856 <Argus_Dca_Evaluate+0x5fe>
 801ee5a:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 801ee5e:	f884 8034 	strb.w	r8, [r4, #52]	@ 0x34
 801ee62:	e4f8      	b.n	801e856 <Argus_Dca_Evaluate+0x5fe>
 801ee64:	461f      	mov	r7, r3
 801ee66:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 801ee68:	8be0      	ldrh	r0, [r4, #30]
 801ee6a:	e5ea      	b.n	801ea42 <Argus_Dca_Evaluate+0x7ea>
 801ee6c:	2200      	movs	r2, #0
 801ee6e:	e682      	b.n	801eb76 <Argus_Dca_Evaluate+0x91e>
 801ee70:	f8ba 100c 	ldrh.w	r1, [sl, #12]
 801ee74:	e688      	b.n	801eb88 <Argus_Dca_Evaluate+0x930>
 801ee76:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801ee7a:	461a      	mov	r2, r3
 801ee7c:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 801ee80:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
 801ee84:	e69d      	b.n	801ebc2 <Argus_Dca_Evaluate+0x96a>
 801ee86:	0098      	lsls	r0, r3, #2
 801ee88:	fa00 f00b 	lsl.w	r0, r0, fp
 801ee8c:	4287      	cmp	r7, r0
 801ee8e:	f0c0 80a5 	bcc.w	801efdc <Argus_Dca_Evaluate+0xd84>
 801ee92:	f04f 0c04 	mov.w	ip, #4
 801ee96:	fb0c f201 	mul.w	r2, ip, r1
 801ee9a:	fa02 f00b 	lsl.w	r0, r2, fp
 801ee9e:	4287      	cmp	r7, r0
 801eea0:	d918      	bls.n	801eed4 <Argus_Dca_Evaluate+0xc7c>
 801eea2:	fbb7 f7f2 	udiv	r7, r7, r2
 801eea6:	fab7 f387 	clz	r3, r7
 801eeaa:	f1c3 021e 	rsb	r2, r3, #30
 801eeae:	40d7      	lsrs	r7, r2
 801eeb0:	f1c3 031f 	rsb	r3, r3, #31
 801eeb4:	2f03      	cmp	r7, #3
 801eeb6:	bf08      	it	eq
 801eeb8:	3301      	addeq	r3, #1
 801eeba:	455b      	cmp	r3, fp
 801eebc:	bf38      	it	cc
 801eebe:	465b      	movcc	r3, fp
 801eec0:	42ab      	cmp	r3, r5
 801eec2:	bf28      	it	cs
 801eec4:	462b      	movcs	r3, r5
 801eec6:	e9cd 1800 	strd	r1, r8, [sp]
 801eeca:	fa5f fb83 	uxtb.w	fp, r3
 801eece:	f89a 1013 	ldrb.w	r1, [sl, #19]
 801eed2:	e612      	b.n	801eafa <Argus_Dca_Evaluate+0x8a2>
 801eed4:	fa0c fc0b 	lsl.w	ip, ip, fp
 801eed8:	eb07 025c 	add.w	r2, r7, ip, lsr #1
 801eedc:	fbb2 f2fc 	udiv	r2, r2, ip
 801eee0:	4293      	cmp	r3, r2
 801eee2:	bf38      	it	cc
 801eee4:	4613      	movcc	r3, r2
 801eee6:	428b      	cmp	r3, r1
 801eee8:	bf28      	it	cs
 801eeea:	460b      	movcs	r3, r1
 801eeec:	b29a      	uxth	r2, r3
 801eeee:	f022 013f 	bic.w	r1, r2, #63	@ 0x3f
 801eef2:	f894 0020 	ldrb.w	r0, [r4, #32]
 801eef6:	b1a1      	cbz	r1, 801ef22 <Argus_Dca_Evaluate+0xcca>
 801eef8:	f102 0320 	add.w	r3, r2, #32
 801eefc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 801ef00:	b29b      	uxth	r3, r3
 801ef02:	9300      	str	r3, [sp, #0]
 801ef04:	f89a 1013 	ldrb.w	r1, [sl, #19]
 801ef08:	f8cd 8004 	str.w	r8, [sp, #4]
 801ef0c:	e5f5      	b.n	801eafa <Argus_Dca_Evaluate+0x8a2>
 801ef0e:	f89a 2013 	ldrb.w	r2, [sl, #19]
 801ef12:	4542      	cmp	r2, r8
 801ef14:	bf3c      	itt	cc
 801ef16:	f108 32ff 	addcc.w	r2, r8, #4294967295
 801ef1a:	b2d2      	uxtbcc	r2, r2
 801ef1c:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
 801ef20:	e493      	b.n	801e84a <Argus_Dca_Evaluate+0x5f2>
 801ef22:	0281      	lsls	r1, r0, #10
 801ef24:	2800      	cmp	r0, #0
 801ef26:	d053      	beq.n	801efd0 <Argus_Dca_Evaluate+0xd78>
 801ef28:	fb00 f303 	mul.w	r3, r0, r3
 801ef2c:	f3c3 1240 	ubfx	r2, r3, #5, #1
 801ef30:	eb02 1393 	add.w	r3, r2, r3, lsr #6
 801ef34:	2b01      	cmp	r3, #1
 801ef36:	bf38      	it	cc
 801ef38:	2301      	movcc	r3, #1
 801ef3a:	4618      	mov	r0, r3
 801ef3c:	f7fd fb58 	bl	801c5f0 <fp_div16.part.0>
 801ef40:	f894 5034 	ldrb.w	r5, [r4, #52]	@ 0x34
 801ef44:	b283      	uxth	r3, r0
 801ef46:	9300      	str	r3, [sp, #0]
 801ef48:	e7dc      	b.n	801ef04 <Argus_Dca_Evaluate+0xcac>
 801ef4a:	9a00      	ldr	r2, [sp, #0]
 801ef4c:	fa00 f00b 	lsl.w	r0, r0, fp
 801ef50:	eb07 0350 	add.w	r3, r7, r0, lsr #1
 801ef54:	fbb3 f3f0 	udiv	r3, r3, r0
 801ef58:	4293      	cmp	r3, r2
 801ef5a:	bf38      	it	cc
 801ef5c:	4613      	movcc	r3, r2
 801ef5e:	428b      	cmp	r3, r1
 801ef60:	bf28      	it	cs
 801ef62:	460b      	movcs	r3, r1
 801ef64:	b29a      	uxth	r2, r3
 801ef66:	f022 013f 	bic.w	r1, r2, #63	@ 0x3f
 801ef6a:	f894 0020 	ldrb.w	r0, [r4, #32]
 801ef6e:	b1d1      	cbz	r1, 801efa6 <Argus_Dca_Evaluate+0xd4e>
 801ef70:	f102 0320 	add.w	r3, r2, #32
 801ef74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 801ef78:	b29b      	uxth	r3, r3
 801ef7a:	f89a 1013 	ldrb.w	r1, [sl, #19]
 801ef7e:	9300      	str	r3, [sp, #0]
 801ef80:	e5bb      	b.n	801eafa <Argus_Dca_Evaluate+0x8a2>
 801ef82:	f89a 300b 	ldrb.w	r3, [sl, #11]
 801ef86:	2b01      	cmp	r3, #1
 801ef88:	f43f aed2 	beq.w	801ed30 <Argus_Dca_Evaluate+0xad8>
 801ef8c:	9b03      	ldr	r3, [sp, #12]
 801ef8e:	8be0      	ldrh	r0, [r4, #30]
 801ef90:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 801ef92:	2b40      	cmp	r3, #64	@ 0x40
 801ef94:	bf94      	ite	ls
 801ef96:	4603      	movls	r3, r0
 801ef98:	2340      	movhi	r3, #64	@ 0x40
 801ef9a:	fb0c f303 	mul.w	r3, ip, r3
 801ef9e:	fa03 f308 	lsl.w	r3, r3, r8
 801efa2:	1aff      	subs	r7, r7, r3
 801efa4:	e54d      	b.n	801ea42 <Argus_Dca_Evaluate+0x7ea>
 801efa6:	0281      	lsls	r1, r0, #10
 801efa8:	b1a8      	cbz	r0, 801efd6 <Argus_Dca_Evaluate+0xd7e>
 801efaa:	fb00 f303 	mul.w	r3, r0, r3
 801efae:	f3c3 1240 	ubfx	r2, r3, #5, #1
 801efb2:	eb02 1393 	add.w	r3, r2, r3, lsr #6
 801efb6:	2b01      	cmp	r3, #1
 801efb8:	bf38      	it	cc
 801efba:	2301      	movcc	r3, #1
 801efbc:	4618      	mov	r0, r3
 801efbe:	f7fd fb17 	bl	801c5f0 <fp_div16.part.0>
 801efc2:	f894 5034 	ldrb.w	r5, [r4, #52]	@ 0x34
 801efc6:	f89a 1013 	ldrb.w	r1, [sl, #19]
 801efca:	b283      	uxth	r3, r0
 801efcc:	9300      	str	r3, [sp, #0]
 801efce:	e594      	b.n	801eafa <Argus_Dca_Evaluate+0x8a2>
 801efd0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801efd4:	e7b6      	b.n	801ef44 <Argus_Dca_Evaluate+0xcec>
 801efd6:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801efda:	e7f4      	b.n	801efc6 <Argus_Dca_Evaluate+0xd6e>
 801efdc:	428a      	cmp	r2, r1
 801efde:	4613      	mov	r3, r2
 801efe0:	bf28      	it	cs
 801efe2:	460b      	movcs	r3, r1
 801efe4:	9300      	str	r3, [sp, #0]
 801efe6:	2004      	movs	r0, #4
 801efe8:	e565      	b.n	801eab6 <Argus_Dca_Evaluate+0x85e>
 801efea:	bf00      	nop

0801efec <GetStatusCallback>:
 801efec:	6008      	str	r0, [r1, #0]
 801efee:	4770      	bx	lr

0801eff0 <FinishDetuneClock>:
 801eff0:	2800      	cmp	r0, #0
 801eff2:	db06      	blt.n	801f002 <FinishDetuneClock+0x12>
 801eff4:	f8d1 3104 	ldr.w	r3, [r1, #260]	@ 0x104
 801eff8:	b113      	cbz	r3, 801f000 <FinishDetuneClock+0x10>
 801effa:	f8d1 1108 	ldr.w	r1, [r1, #264]	@ 0x108
 801effe:	4718      	bx	r3
 801f000:	4770      	bx	lr
 801f002:	b410      	push	{r4}
 801f004:	f891 30fd 	ldrb.w	r3, [r1, #253]	@ 0xfd
 801f008:	6f8c      	ldr	r4, [r1, #120]	@ 0x78
 801f00a:	4a09      	ldr	r2, [pc, #36]	@ (801f030 <FinishDetuneClock+0x40>)
 801f00c:	f043 0302 	orr.w	r3, r3, #2
 801f010:	f881 30fd 	strb.w	r3, [r1, #253]	@ 0xfd
 801f014:	f8d1 3104 	ldr.w	r3, [r1, #260]	@ 0x104
 801f018:	4322      	orrs	r2, r4
 801f01a:	678a      	str	r2, [r1, #120]	@ 0x78
 801f01c:	b123      	cbz	r3, 801f028 <FinishDetuneClock+0x38>
 801f01e:	f8d1 1108 	ldr.w	r1, [r1, #264]	@ 0x108
 801f022:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f026:	4718      	bx	r3
 801f028:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f02c:	4770      	bx	lr
 801f02e:	bf00      	nop
 801f030:	0003dffe 	.word	0x0003dffe

0801f034 <ChargePumpRamp>:
 801f034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f038:	1e06      	subs	r6, r0, #0
 801f03a:	b084      	sub	sp, #16
 801f03c:	460c      	mov	r4, r1
 801f03e:	db07      	blt.n	801f050 <ChargePumpRamp+0x1c>
 801f040:	6f8f      	ldr	r7, [r1, #120]	@ 0x78
 801f042:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801f044:	f007 7700 	and.w	r7, r7, #33554432	@ 0x2000000
 801f048:	f003 0320 	and.w	r3, r3, #32
 801f04c:	433b      	orrs	r3, r7
 801f04e:	d105      	bne.n	801f05c <ChargePumpRamp+0x28>
 801f050:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 801f054:	b004      	add	sp, #16
 801f056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f05a:	4718      	bx	r3
 801f05c:	f891 80fb 	ldrb.w	r8, [r1, #251]	@ 0xfb
 801f060:	f8d1 311c 	ldr.w	r3, [r1, #284]	@ 0x11c
 801f064:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801f068:	f1b8 0f09 	cmp.w	r8, #9
 801f06c:	a903      	add	r1, sp, #12
 801f06e:	a802      	add	r0, sp, #8
 801f070:	bf94      	ite	ls
 801f072:	8bdd      	ldrhls	r5, [r3, #30]
 801f074:	8c1d      	ldrhhi	r5, [r3, #32]
 801f076:	f7e8 f88f 	bl	8007198 <Timer_GetCounterValue>
 801f07a:	f8d4 2118 	ldr.w	r2, [r4, #280]	@ 0x118
 801f07e:	f8df c138 	ldr.w	ip, [pc, #312]	@ 801f1b8 <ChargePumpRamp+0x184>
 801f082:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
 801f086:	18ab      	adds	r3, r5, r2
 801f088:	bf2c      	ite	cs
 801f08a:	2101      	movcs	r1, #1
 801f08c:	2100      	movcc	r1, #0
 801f08e:	4563      	cmp	r3, ip
 801f090:	e9dd 5e02 	ldrd	r5, lr, [sp, #8]
 801f094:	d94b      	bls.n	801f12e <ChargePumpRamp+0xfa>
 801f096:	f100 0c01 	add.w	ip, r0, #1
 801f09a:	4560      	cmp	r0, ip
 801f09c:	f5a3 2374 	sub.w	r3, r3, #999424	@ 0xf4000
 801f0a0:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 801f0a4:	bf2c      	ite	cs
 801f0a6:	2100      	movcs	r1, #0
 801f0a8:	2101      	movcc	r1, #1
 801f0aa:	2900      	cmp	r1, #0
 801f0ac:	d043      	beq.n	801f136 <ChargePumpRamp+0x102>
 801f0ae:	42a8      	cmp	r0, r5
 801f0b0:	d06d      	beq.n	801f18e <ChargePumpRamp+0x15a>
 801f0b2:	bf34      	ite	cc
 801f0b4:	2201      	movcc	r2, #1
 801f0b6:	2200      	movcs	r2, #0
 801f0b8:	b12a      	cbz	r2, 801f0c6 <ChargePumpRamp+0x92>
 801f0ba:	45ac      	cmp	ip, r5
 801f0bc:	d05d      	beq.n	801f17a <ChargePumpRamp+0x146>
 801f0be:	bf34      	ite	cc
 801f0c0:	2301      	movcc	r3, #1
 801f0c2:	2300      	movcs	r3, #0
 801f0c4:	b30b      	cbz	r3, 801f10a <ChargePumpRamp+0xd6>
 801f0c6:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	@ 0xfa
 801f0ca:	f894 10fa 	ldrb.w	r1, [r4, #250]	@ 0xfa
 801f0ce:	ba5b      	rev16	r3, r3
 801f0d0:	f3c3 1383 	ubfx	r3, r3, #6, #4
 801f0d4:	b3b7      	cbz	r7, 801f144 <ChargePumpRamp+0x110>
 801f0d6:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f0d8:	f042 0220 	orr.w	r2, r2, #32
 801f0dc:	67a2      	str	r2, [r4, #120]	@ 0x78
 801f0de:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f0e0:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 801f0e4:	2700      	movs	r7, #0
 801f0e6:	67a2      	str	r2, [r4, #120]	@ 0x78
 801f0e8:	f3c3 0297 	ubfx	r2, r3, #2, #24
 801f0ec:	f021 0103 	bic.w	r1, r1, #3
 801f0f0:	4311      	orrs	r1, r2
 801f0f2:	ea47 1383 	orr.w	r3, r7, r3, lsl #6
 801f0f6:	f884 10fa 	strb.w	r1, [r4, #250]	@ 0xfa
 801f0fa:	f884 30fb 	strb.w	r3, [r4, #251]	@ 0xfb
 801f0fe:	f504 718c 	add.w	r1, r4, #280	@ 0x118
 801f102:	f504 708a 	add.w	r0, r4, #276	@ 0x114
 801f106:	f7e8 f847 	bl	8007198 <Timer_GetCounterValue>
 801f10a:	4621      	mov	r1, r4
 801f10c:	230a      	movs	r3, #10
 801f10e:	f801 3ff8 	strb.w	r3, [r1, #248]!
 801f112:	4b28      	ldr	r3, [pc, #160]	@ (801f1b4 <ChargePumpRamp+0x180>)
 801f114:	2200      	movs	r2, #0
 801f116:	e9cd 3400 	strd	r3, r4, [sp]
 801f11a:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801f11e:	2305      	movs	r3, #5
 801f120:	f00a fcd2 	bl	8029ac8 <ADS_Transfer>
 801f124:	2800      	cmp	r0, #0
 801f126:	db93      	blt.n	801f050 <ChargePumpRamp+0x1c>
 801f128:	b004      	add	sp, #16
 801f12a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f12e:	f081 0101 	eor.w	r1, r1, #1
 801f132:	4684      	mov	ip, r0
 801f134:	e7b9      	b.n	801f0aa <ChargePumpRamp+0x76>
 801f136:	42a8      	cmp	r0, r5
 801f138:	d026      	beq.n	801f188 <ChargePumpRamp+0x154>
 801f13a:	d3e6      	bcc.n	801f10a <ChargePumpRamp+0xd6>
 801f13c:	45ac      	cmp	ip, r5
 801f13e:	d02b      	beq.n	801f198 <ChargePumpRamp+0x164>
 801f140:	d2e3      	bcs.n	801f10a <ChargePumpRamp+0xd6>
 801f142:	e7c0      	b.n	801f0c6 <ChargePumpRamp+0x92>
 801f144:	f8b4 204d 	ldrh.w	r2, [r4, #77]	@ 0x4d
 801f148:	ba52      	rev16	r2, r2
 801f14a:	f3c2 1283 	ubfx	r2, r2, #6, #4
 801f14e:	4293      	cmp	r3, r2
 801f150:	d004      	beq.n	801f15c <ChargePumpRamp+0x128>
 801f152:	f1b8 0f00 	cmp.w	r8, #0
 801f156:	bf08      	it	eq
 801f158:	4613      	moveq	r3, r2
 801f15a:	e7c5      	b.n	801f0e8 <ChargePumpRamp+0xb4>
 801f15c:	f894 204e 	ldrb.w	r2, [r4, #78]	@ 0x4e
 801f160:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801f164:	4590      	cmp	r8, r2
 801f166:	d020      	beq.n	801f1aa <ChargePumpRamp+0x176>
 801f168:	db19      	blt.n	801f19e <ChargePumpRamp+0x16a>
 801f16a:	b10a      	cbz	r2, 801f170 <ChargePumpRamp+0x13c>
 801f16c:	f108 37ff 	add.w	r7, r8, #4294967295
 801f170:	42ba      	cmp	r2, r7
 801f172:	bfb8      	it	lt
 801f174:	463a      	movlt	r2, r7
 801f176:	b257      	sxtb	r7, r2
 801f178:	e7b6      	b.n	801f0e8 <ChargePumpRamp+0xb4>
 801f17a:	4573      	cmp	r3, lr
 801f17c:	bf8c      	ite	hi
 801f17e:	2300      	movhi	r3, #0
 801f180:	2301      	movls	r3, #1
 801f182:	2b00      	cmp	r3, #0
 801f184:	d0c1      	beq.n	801f10a <ChargePumpRamp+0xd6>
 801f186:	e79e      	b.n	801f0c6 <ChargePumpRamp+0x92>
 801f188:	4572      	cmp	r2, lr
 801f18a:	d9be      	bls.n	801f10a <ChargePumpRamp+0xd6>
 801f18c:	e7d6      	b.n	801f13c <ChargePumpRamp+0x108>
 801f18e:	4572      	cmp	r2, lr
 801f190:	bf8c      	ite	hi
 801f192:	2200      	movhi	r2, #0
 801f194:	2201      	movls	r2, #1
 801f196:	e78f      	b.n	801f0b8 <ChargePumpRamp+0x84>
 801f198:	4573      	cmp	r3, lr
 801f19a:	d994      	bls.n	801f0c6 <ChargePumpRamp+0x92>
 801f19c:	e7b5      	b.n	801f10a <ChargePumpRamp+0xd6>
 801f19e:	f108 0701 	add.w	r7, r8, #1
 801f1a2:	42ba      	cmp	r2, r7
 801f1a4:	bfa8      	it	ge
 801f1a6:	463a      	movge	r2, r7
 801f1a8:	e7e5      	b.n	801f176 <ChargePumpRamp+0x142>
 801f1aa:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 801f1ae:	4630      	mov	r0, r6
 801f1b0:	e750      	b.n	801f054 <ChargePumpRamp+0x20>
 801f1b2:	bf00      	nop
 801f1b4:	0801f035 	.word	0x0801f035
 801f1b8:	000f423f 	.word	0x000f423f

0801f1bc <FinishIntegration>:
 801f1bc:	1d83      	adds	r3, r0, #6
 801f1be:	b510      	push	{r4, lr}
 801f1c0:	4614      	mov	r4, r2
 801f1c2:	d10d      	bne.n	801f1e0 <FinishIntegration+0x24>
 801f1c4:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801f1c6:	4b1f      	ldr	r3, [pc, #124]	@ (801f244 <FinishIntegration+0x88>)
 801f1c8:	4313      	orrs	r3, r2
 801f1ca:	67a3      	str	r3, [r4, #120]	@ 0x78
 801f1cc:	f894 20fd 	ldrb.w	r2, [r4, #253]	@ 0xfd
 801f1d0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801f1d2:	f042 0202 	orr.w	r2, r2, #2
 801f1d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801f1da:	f884 20fd 	strb.w	r2, [r4, #253]	@ 0xfd
 801f1de:	67a3      	str	r3, [r4, #120]	@ 0x78
 801f1e0:	22ab      	movs	r2, #171	@ 0xab
 801f1e2:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 801f1e6:	f884 2088 	strb.w	r2, [r4, #136]	@ 0x88
 801f1ea:	0c0a      	lsrs	r2, r1, #16
 801f1ec:	ba49      	rev16	r1, r1
 801f1ee:	f884 2089 	strb.w	r2, [r4, #137]	@ 0x89
 801f1f2:	f8a4 108a 	strh.w	r1, [r4, #138]	@ 0x8a
 801f1f6:	b12b      	cbz	r3, 801f204 <FinishIntegration+0x48>
 801f1f8:	2200      	movs	r2, #0
 801f1fa:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 801f1fe:	f8c4 2104 	str.w	r2, [r4, #260]	@ 0x104
 801f202:	4798      	blx	r3
 801f204:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
 801f208:	f003 0382 	and.w	r3, r3, #130	@ 0x82
 801f20c:	2b02      	cmp	r3, #2
 801f20e:	d000      	beq.n	801f212 <FinishIntegration+0x56>
 801f210:	bd10      	pop	{r4, pc}
 801f212:	f894 3064 	ldrb.w	r3, [r4, #100]	@ 0x64
 801f216:	f894 10fd 	ldrb.w	r1, [r4, #253]	@ 0xfd
 801f21a:	f003 0203 	and.w	r2, r3, #3
 801f21e:	3201      	adds	r2, #1
 801f220:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 801f224:	f023 0303 	bic.w	r3, r3, #3
 801f228:	f002 0203 	and.w	r2, r2, #3
 801f22c:	4313      	orrs	r3, r2
 801f22e:	f021 010c 	bic.w	r1, r1, #12
 801f232:	f00c 020c 	and.w	r2, ip, #12
 801f236:	430a      	orrs	r2, r1
 801f238:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 801f23c:	f884 20fd 	strb.w	r2, [r4, #253]	@ 0xfd
 801f240:	bd10      	pop	{r4, pc}
 801f242:	bf00      	nop
 801f244:	0003dffe 	.word	0x0003dffe

0801f248 <FinishStartIntegration>:
 801f248:	b508      	push	{r3, lr}
 801f24a:	460b      	mov	r3, r1
 801f24c:	1e01      	subs	r1, r0, #0
 801f24e:	db10      	blt.n	801f272 <FinishStartIntegration+0x2a>
 801f250:	f893 108a 	ldrb.w	r1, [r3, #138]	@ 0x8a
 801f254:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 801f258:	0648      	lsls	r0, r1, #25
 801f25a:	bf4c      	ite	mi
 801f25c:	f042 0280 	orrmi.w	r2, r2, #128	@ 0x80
 801f260:	f022 0280 	bicpl.w	r2, r2, #128	@ 0x80
 801f264:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 801f268:	068a      	lsls	r2, r1, #26
 801f26a:	bf48      	it	mi
 801f26c:	2000      	movmi	r0, #0
 801f26e:	d510      	bpl.n	801f292 <FinishStartIntegration+0x4a>
 801f270:	bd08      	pop	{r3, pc}
 801f272:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 801f274:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 801f278:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 801f27c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801f280:	6798      	str	r0, [r3, #120]	@ 0x78
 801f282:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 801f286:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 801f28a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801f28e:	f00a ba7d 	b.w	802978c <ADS_Abort>
 801f292:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 801f294:	4a0a      	ldr	r2, [pc, #40]	@ (801f2c0 <FinishStartIntegration+0x78>)
 801f296:	f893 10fd 	ldrb.w	r1, [r3, #253]	@ 0xfd
 801f29a:	4302      	orrs	r2, r0
 801f29c:	679a      	str	r2, [r3, #120]	@ 0x78
 801f29e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 801f2a0:	f041 0102 	orr.w	r1, r1, #2
 801f2a4:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 801f2a8:	f883 10fd 	strb.w	r1, [r3, #253]	@ 0xfd
 801f2ac:	679a      	str	r2, [r3, #120]	@ 0x78
 801f2ae:	f06f 0171 	mvn.w	r1, #113	@ 0x71
 801f2b2:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 801f2b6:	f00a fa69 	bl	802978c <ADS_Abort>
 801f2ba:	f06f 0071 	mvn.w	r0, #113	@ 0x71
 801f2be:	bd08      	pop	{r3, pc}
 801f2c0:	0003dffe 	.word	0x0003dffe

0801f2c4 <DisableClock2>:
 801f2c4:	b510      	push	{r4, lr}
 801f2c6:	2800      	cmp	r0, #0
 801f2c8:	b082      	sub	sp, #8
 801f2ca:	460c      	mov	r4, r1
 801f2cc:	db17      	blt.n	801f2fe <DisableClock2+0x3a>
 801f2ce:	f891 3058 	ldrb.w	r3, [r1, #88]	@ 0x58
 801f2d2:	4a13      	ldr	r2, [pc, #76]	@ (801f320 <DisableClock2+0x5c>)
 801f2d4:	f023 0311 	bic.w	r3, r3, #17
 801f2d8:	2110      	movs	r1, #16
 801f2da:	f884 1088 	strb.w	r1, [r4, #136]	@ 0x88
 801f2de:	f884 3089 	strb.w	r3, [r4, #137]	@ 0x89
 801f2e2:	f104 0188 	add.w	r1, r4, #136	@ 0x88
 801f2e6:	e9cd 2400 	strd	r2, r4, [sp]
 801f2ea:	2302      	movs	r3, #2
 801f2ec:	2200      	movs	r2, #0
 801f2ee:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801f2f2:	f00a fbe9 	bl	8029ac8 <ADS_Transfer>
 801f2f6:	2800      	cmp	r0, #0
 801f2f8:	db01      	blt.n	801f2fe <DisableClock2+0x3a>
 801f2fa:	b002      	add	sp, #8
 801f2fc:	bd10      	pop	{r4, pc}
 801f2fe:	6823      	ldr	r3, [r4, #0]
 801f300:	3371      	adds	r3, #113	@ 0x71
 801f302:	bf1c      	itt	ne
 801f304:	f06f 0371 	mvnne.w	r3, #113	@ 0x71
 801f308:	6023      	strne	r3, [r4, #0]
 801f30a:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 801f30e:	2b00      	cmp	r3, #0
 801f310:	d0f3      	beq.n	801f2fa <DisableClock2+0x36>
 801f312:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 801f316:	b002      	add	sp, #8
 801f318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f31c:	4718      	bx	r3
 801f31e:	bf00      	nop
 801f320:	0801f3a5 	.word	0x0801f3a5

0801f324 <WriteBlockEnable2>:
 801f324:	b510      	push	{r4, lr}
 801f326:	2800      	cmp	r0, #0
 801f328:	b082      	sub	sp, #8
 801f32a:	460c      	mov	r4, r1
 801f32c:	db27      	blt.n	801f37e <WriteBlockEnable2+0x5a>
 801f32e:	f891 3089 	ldrb.w	r3, [r1, #137]	@ 0x89
 801f332:	06da      	lsls	r2, r3, #27
 801f334:	d41c      	bmi.n	801f370 <WriteBlockEnable2+0x4c>
 801f336:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 801f33a:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 801f33e:	4918      	ldr	r1, [pc, #96]	@ (801f3a0 <WriteBlockEnable2+0x7c>)
 801f340:	f894 0058 	ldrb.w	r0, [r4, #88]	@ 0x58
 801f344:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 801f348:	f104 0288 	add.w	r2, r4, #136	@ 0x88
 801f34c:	f04f 0c10 	mov.w	ip, #16
 801f350:	f884 0089 	strb.w	r0, [r4, #137]	@ 0x89
 801f354:	f884 c088 	strb.w	ip, [r4, #136]	@ 0x88
 801f358:	2302      	movs	r3, #2
 801f35a:	e9cd 1400 	strd	r1, r4, [sp]
 801f35e:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801f362:	4611      	mov	r1, r2
 801f364:	f00a fbb0 	bl	8029ac8 <ADS_Transfer>
 801f368:	2800      	cmp	r0, #0
 801f36a:	db08      	blt.n	801f37e <WriteBlockEnable2+0x5a>
 801f36c:	b002      	add	sp, #8
 801f36e:	bd10      	pop	{r4, pc}
 801f370:	07db      	lsls	r3, r3, #31
 801f372:	d4e0      	bmi.n	801f336 <WriteBlockEnable2+0x12>
 801f374:	f891 30fd 	ldrb.w	r3, [r1, #253]	@ 0xfd
 801f378:	f043 0310 	orr.w	r3, r3, #16
 801f37c:	e7df      	b.n	801f33e <WriteBlockEnable2+0x1a>
 801f37e:	6823      	ldr	r3, [r4, #0]
 801f380:	3371      	adds	r3, #113	@ 0x71
 801f382:	bf1c      	itt	ne
 801f384:	f06f 0371 	mvnne.w	r3, #113	@ 0x71
 801f388:	6023      	strne	r3, [r4, #0]
 801f38a:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 801f38e:	2b00      	cmp	r3, #0
 801f390:	d0ec      	beq.n	801f36c <WriteBlockEnable2+0x48>
 801f392:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 801f396:	b002      	add	sp, #8
 801f398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f39c:	4718      	bx	r3
 801f39e:	bf00      	nop
 801f3a0:	0802043d 	.word	0x0802043d

0801f3a4 <ResetInternalClockDivider>:
 801f3a4:	b510      	push	{r4, lr}
 801f3a6:	2800      	cmp	r0, #0
 801f3a8:	b082      	sub	sp, #8
 801f3aa:	460c      	mov	r4, r1
 801f3ac:	db20      	blt.n	801f3f0 <ResetInternalClockDivider+0x4c>
 801f3ae:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801f3b0:	f891 205b 	ldrb.w	r2, [r1, #91]	@ 0x5b
 801f3b4:	f891 005a 	ldrb.w	r0, [r1, #90]	@ 0x5a
 801f3b8:	4915      	ldr	r1, [pc, #84]	@ (801f410 <ResetInternalClockDivider+0x6c>)
 801f3ba:	f884 0089 	strb.w	r0, [r4, #137]	@ 0x89
 801f3be:	f022 0218 	bic.w	r2, r2, #24
 801f3c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801f3c6:	f04f 0c12 	mov.w	ip, #18
 801f3ca:	f884 208a 	strb.w	r2, [r4, #138]	@ 0x8a
 801f3ce:	67a3      	str	r3, [r4, #120]	@ 0x78
 801f3d0:	f884 c088 	strb.w	ip, [r4, #136]	@ 0x88
 801f3d4:	2303      	movs	r3, #3
 801f3d6:	e9cd 1400 	strd	r1, r4, [sp]
 801f3da:	2200      	movs	r2, #0
 801f3dc:	f104 0188 	add.w	r1, r4, #136	@ 0x88
 801f3e0:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801f3e4:	f00a fb70 	bl	8029ac8 <ADS_Transfer>
 801f3e8:	2800      	cmp	r0, #0
 801f3ea:	db01      	blt.n	801f3f0 <ResetInternalClockDivider+0x4c>
 801f3ec:	b002      	add	sp, #8
 801f3ee:	bd10      	pop	{r4, pc}
 801f3f0:	6823      	ldr	r3, [r4, #0]
 801f3f2:	3371      	adds	r3, #113	@ 0x71
 801f3f4:	bf1c      	itt	ne
 801f3f6:	f06f 0371 	mvnne.w	r3, #113	@ 0x71
 801f3fa:	6023      	strne	r3, [r4, #0]
 801f3fc:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 801f400:	2b00      	cmp	r3, #0
 801f402:	d0f3      	beq.n	801f3ec <ResetInternalClockDivider+0x48>
 801f404:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 801f408:	b002      	add	sp, #8
 801f40a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f40e:	4718      	bx	r3
 801f410:	0801fc69 	.word	0x0801fc69

0801f414 <WriteRegisterConfiguration>:
 801f414:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f416:	2800      	cmp	r0, #0
 801f418:	b083      	sub	sp, #12
 801f41a:	460c      	mov	r4, r1
 801f41c:	f2c0 82dc 	blt.w	801f9d8 <WriteRegisterConfiguration+0x5c4>
 801f420:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801f422:	f413 7300 	ands.w	r3, r3, #512	@ 0x200
 801f426:	f040 824e 	bne.w	801f8c6 <WriteRegisterConfiguration+0x4b2>
 801f42a:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f42c:	4d75      	ldr	r5, [pc, #468]	@ (801f604 <WriteRegisterConfiguration+0x1f0>)
 801f42e:	0796      	lsls	r6, r2, #30
 801f430:	f04f 0188 	mov.w	r1, #136	@ 0x88
 801f434:	f04f 0c09 	mov.w	ip, #9
 801f438:	f100 825b 	bmi.w	801f8f2 <WriteRegisterConfiguration+0x4de>
 801f43c:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f43e:	0691      	lsls	r1, r2, #26
 801f440:	f100 826d 	bmi.w	801f91e <WriteRegisterConfiguration+0x50a>
 801f444:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f446:	0652      	lsls	r2, r2, #25
 801f448:	f100 8200 	bmi.w	801f84c <WriteRegisterConfiguration+0x438>
 801f44c:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f44e:	0617      	lsls	r7, r2, #24
 801f450:	f100 820d 	bmi.w	801f86e <WriteRegisterConfiguration+0x45a>
 801f454:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f456:	0456      	lsls	r6, r2, #17
 801f458:	f100 8221 	bmi.w	801f89e <WriteRegisterConfiguration+0x48a>
 801f45c:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f45e:	0411      	lsls	r1, r2, #16
 801f460:	d50b      	bpl.n	801f47a <WriteRegisterConfiguration+0x66>
 801f462:	18e2      	adds	r2, r4, r3
 801f464:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 801f466:	f8c2 1088 	str.w	r1, [r2, #136]	@ 0x88
 801f46a:	211e      	movs	r1, #30
 801f46c:	f882 1088 	strb.w	r1, [r2, #136]	@ 0x88
 801f470:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f472:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801f476:	3304      	adds	r3, #4
 801f478:	67a2      	str	r2, [r4, #120]	@ 0x78
 801f47a:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f47c:	03d2      	lsls	r2, r2, #15
 801f47e:	d50b      	bpl.n	801f498 <WriteRegisterConfiguration+0x84>
 801f480:	18e2      	adds	r2, r4, r3
 801f482:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801f484:	f8c2 1088 	str.w	r1, [r2, #136]	@ 0x88
 801f488:	2120      	movs	r1, #32
 801f48a:	f882 1088 	strb.w	r1, [r2, #136]	@ 0x88
 801f48e:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f490:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 801f494:	3304      	adds	r3, #4
 801f496:	67a2      	str	r2, [r4, #120]	@ 0x78
 801f498:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f49a:	0397      	lsls	r7, r2, #14
 801f49c:	d50b      	bpl.n	801f4b6 <WriteRegisterConfiguration+0xa2>
 801f49e:	18e2      	adds	r2, r4, r3
 801f4a0:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801f4a2:	f8c2 1088 	str.w	r1, [r2, #136]	@ 0x88
 801f4a6:	2122      	movs	r1, #34	@ 0x22
 801f4a8:	f882 1088 	strb.w	r1, [r2, #136]	@ 0x88
 801f4ac:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f4ae:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 801f4b2:	3304      	adds	r3, #4
 801f4b4:	67a2      	str	r2, [r4, #120]	@ 0x78
 801f4b6:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f4b8:	0756      	lsls	r6, r2, #29
 801f4ba:	f140 8094 	bpl.w	801f5e6 <WriteRegisterConfiguration+0x1d2>
 801f4be:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f4c0:	0711      	lsls	r1, r2, #28
 801f4c2:	d403      	bmi.n	801f4cc <WriteRegisterConfiguration+0xb8>
 801f4c4:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f4c6:	06d2      	lsls	r2, r2, #27
 801f4c8:	f140 8244 	bpl.w	801f954 <WriteRegisterConfiguration+0x540>
 801f4cc:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
 801f4d0:	f011 0203 	ands.w	r2, r1, #3
 801f4d4:	f040 8236 	bne.w	801f944 <WriteRegisterConfiguration+0x530>
 801f4d8:	f894 c016 	ldrb.w	ip, [r4, #22]
 801f4dc:	7d66      	ldrb	r6, [r4, #21]
 801f4de:	18e2      	adds	r2, r4, r3
 801f4e0:	ea4f 0e5c 	mov.w	lr, ip, lsr #1
 801f4e4:	ea4e 1ec6 	orr.w	lr, lr, r6, lsl #7
 801f4e8:	f882 e089 	strb.w	lr, [r2, #137]	@ 0x89
 801f4ec:	ea4f 1ecc 	mov.w	lr, ip, lsl #7
 801f4f0:	f894 c017 	ldrb.w	ip, [r4, #23]
 801f4f4:	ea4e 0e5c 	orr.w	lr, lr, ip, lsr #1
 801f4f8:	f882 e08a 	strb.w	lr, [r2, #138]	@ 0x8a
 801f4fc:	ea4f 1ecc 	mov.w	lr, ip, lsl #7
 801f500:	f894 c018 	ldrb.w	ip, [r4, #24]
 801f504:	ea4e 0e5c 	orr.w	lr, lr, ip, lsr #1
 801f508:	f882 e08b 	strb.w	lr, [r2, #139]	@ 0x8b
 801f50c:	ea4f 1ecc 	mov.w	lr, ip, lsl #7
 801f510:	f894 c019 	ldrb.w	ip, [r4, #25]
 801f514:	ea4e 0e5c 	orr.w	lr, lr, ip, lsr #1
 801f518:	f882 e08c 	strb.w	lr, [r2, #140]	@ 0x8c
 801f51c:	ea4f 1ecc 	mov.w	lr, ip, lsl #7
 801f520:	f894 c01a 	ldrb.w	ip, [r4, #26]
 801f524:	ea4e 0e5c 	orr.w	lr, lr, ip, lsr #1
 801f528:	f882 e08d 	strb.w	lr, [r2, #141]	@ 0x8d
 801f52c:	ea4f 1ecc 	mov.w	lr, ip, lsl #7
 801f530:	f894 c01b 	ldrb.w	ip, [r4, #27]
 801f534:	ea4e 0e5c 	orr.w	lr, lr, ip, lsr #1
 801f538:	f882 e08e 	strb.w	lr, [r2, #142]	@ 0x8e
 801f53c:	ea4f 1ecc 	mov.w	lr, ip, lsl #7
 801f540:	f894 c01c 	ldrb.w	ip, [r4, #28]
 801f544:	ea4e 0e5c 	orr.w	lr, lr, ip, lsr #1
 801f548:	f882 e08f 	strb.w	lr, [r2, #143]	@ 0x8f
 801f54c:	ea4f 1ecc 	mov.w	lr, ip, lsl #7
 801f550:	f894 c01d 	ldrb.w	ip, [r4, #29]
 801f554:	ea4e 0e5c 	orr.w	lr, lr, ip, lsr #1
 801f558:	f882 e090 	strb.w	lr, [r2, #144]	@ 0x90
 801f55c:	ea4f 1ecc 	mov.w	lr, ip, lsl #7
 801f560:	f894 c01e 	ldrb.w	ip, [r4, #30]
 801f564:	ea4e 0e5c 	orr.w	lr, lr, ip, lsr #1
 801f568:	f882 e091 	strb.w	lr, [r2, #145]	@ 0x91
 801f56c:	ea4f 1ecc 	mov.w	lr, ip, lsl #7
 801f570:	f894 c01f 	ldrb.w	ip, [r4, #31]
 801f574:	ea4e 0e5c 	orr.w	lr, lr, ip, lsr #1
 801f578:	f882 e092 	strb.w	lr, [r2, #146]	@ 0x92
 801f57c:	ea4f 1ecc 	mov.w	lr, ip, lsl #7
 801f580:	f894 c020 	ldrb.w	ip, [r4, #32]
 801f584:	ea4e 0e5c 	orr.w	lr, lr, ip, lsr #1
 801f588:	f882 e093 	strb.w	lr, [r2, #147]	@ 0x93
 801f58c:	ea4f 1ecc 	mov.w	lr, ip, lsl #7
 801f590:	f894 c021 	ldrb.w	ip, [r4, #33]	@ 0x21
 801f594:	ea4e 0e5c 	orr.w	lr, lr, ip, lsr #1
 801f598:	f882 e094 	strb.w	lr, [r2, #148]	@ 0x94
 801f59c:	f894 6022 	ldrb.w	r6, [r4, #34]	@ 0x22
 801f5a0:	ea4f 1ccc 	mov.w	ip, ip, lsl #7
 801f5a4:	ea4c 0c56 	orr.w	ip, ip, r6, lsr #1
 801f5a8:	f882 c095 	strb.w	ip, [r2, #149]	@ 0x95
 801f5ac:	f894 c023 	ldrb.w	ip, [r4, #35]	@ 0x23
 801f5b0:	ea4f 0e5c 	mov.w	lr, ip, lsr #1
 801f5b4:	ea4e 1ec6 	orr.w	lr, lr, r6, lsl #7
 801f5b8:	f882 e096 	strb.w	lr, [r2, #150]	@ 0x96
 801f5bc:	f894 6024 	ldrb.w	r6, [r4, #36]	@ 0x24
 801f5c0:	0849      	lsrs	r1, r1, #1
 801f5c2:	ea4f 1ccc 	mov.w	ip, ip, lsl #7
 801f5c6:	2704      	movs	r7, #4
 801f5c8:	ea4c 0c56 	orr.w	ip, ip, r6, lsr #1
 801f5cc:	ea41 11c6 	orr.w	r1, r1, r6, lsl #7
 801f5d0:	f882 c097 	strb.w	ip, [r2, #151]	@ 0x97
 801f5d4:	f882 1098 	strb.w	r1, [r2, #152]	@ 0x98
 801f5d8:	f882 7088 	strb.w	r7, [r2, #136]	@ 0x88
 801f5dc:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f5de:	f022 0204 	bic.w	r2, r2, #4
 801f5e2:	3311      	adds	r3, #17
 801f5e4:	67a2      	str	r2, [r4, #120]	@ 0x78
 801f5e6:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f5e8:	0717      	lsls	r7, r2, #28
 801f5ea:	f140 8118 	bpl.w	801f81e <WriteRegisterConfiguration+0x40a>
 801f5ee:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f5f0:	06d6      	lsls	r6, r2, #27
 801f5f2:	f140 81cd 	bpl.w	801f990 <WriteRegisterConfiguration+0x57c>
 801f5f6:	f894 e046 	ldrb.w	lr, [r4, #70]	@ 0x46
 801f5fa:	f01e 0203 	ands.w	r2, lr, #3
 801f5fe:	f040 810b 	bne.w	801f818 <WriteRegisterConfiguration+0x404>
 801f602:	e001      	b.n	801f608 <WriteRegisterConfiguration+0x1f4>
 801f604:	0801f415 	.word	0x0801f415
 801f608:	f894 1027 	ldrb.w	r1, [r4, #39]	@ 0x27
 801f60c:	f894 6026 	ldrb.w	r6, [r4, #38]	@ 0x26
 801f610:	18e2      	adds	r2, r4, r3
 801f612:	0848      	lsrs	r0, r1, #1
 801f614:	ea40 10c6 	orr.w	r0, r0, r6, lsl #7
 801f618:	f882 0089 	strb.w	r0, [r2, #137]	@ 0x89
 801f61c:	01c8      	lsls	r0, r1, #7
 801f61e:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801f622:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801f626:	f882 008a 	strb.w	r0, [r2, #138]	@ 0x8a
 801f62a:	01c8      	lsls	r0, r1, #7
 801f62c:	f894 1029 	ldrb.w	r1, [r4, #41]	@ 0x29
 801f630:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801f634:	f882 008b 	strb.w	r0, [r2, #139]	@ 0x8b
 801f638:	01c8      	lsls	r0, r1, #7
 801f63a:	f894 102a 	ldrb.w	r1, [r4, #42]	@ 0x2a
 801f63e:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801f642:	f882 008c 	strb.w	r0, [r2, #140]	@ 0x8c
 801f646:	01c8      	lsls	r0, r1, #7
 801f648:	f894 102b 	ldrb.w	r1, [r4, #43]	@ 0x2b
 801f64c:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801f650:	f882 008d 	strb.w	r0, [r2, #141]	@ 0x8d
 801f654:	01c8      	lsls	r0, r1, #7
 801f656:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801f65a:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801f65e:	f882 008e 	strb.w	r0, [r2, #142]	@ 0x8e
 801f662:	01c8      	lsls	r0, r1, #7
 801f664:	f894 102d 	ldrb.w	r1, [r4, #45]	@ 0x2d
 801f668:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801f66c:	f882 008f 	strb.w	r0, [r2, #143]	@ 0x8f
 801f670:	01c8      	lsls	r0, r1, #7
 801f672:	f894 102e 	ldrb.w	r1, [r4, #46]	@ 0x2e
 801f676:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801f67a:	f882 0090 	strb.w	r0, [r2, #144]	@ 0x90
 801f67e:	01c8      	lsls	r0, r1, #7
 801f680:	f894 102f 	ldrb.w	r1, [r4, #47]	@ 0x2f
 801f684:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801f688:	f882 0091 	strb.w	r0, [r2, #145]	@ 0x91
 801f68c:	01c8      	lsls	r0, r1, #7
 801f68e:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 801f692:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801f696:	f882 0092 	strb.w	r0, [r2, #146]	@ 0x92
 801f69a:	01c8      	lsls	r0, r1, #7
 801f69c:	f894 1031 	ldrb.w	r1, [r4, #49]	@ 0x31
 801f6a0:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801f6a4:	f882 0093 	strb.w	r0, [r2, #147]	@ 0x93
 801f6a8:	01c8      	lsls	r0, r1, #7
 801f6aa:	f894 1032 	ldrb.w	r1, [r4, #50]	@ 0x32
 801f6ae:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801f6b2:	f882 0094 	strb.w	r0, [r2, #148]	@ 0x94
 801f6b6:	01c8      	lsls	r0, r1, #7
 801f6b8:	f894 1033 	ldrb.w	r1, [r4, #51]	@ 0x33
 801f6bc:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801f6c0:	f882 0095 	strb.w	r0, [r2, #149]	@ 0x95
 801f6c4:	01c8      	lsls	r0, r1, #7
 801f6c6:	f894 1034 	ldrb.w	r1, [r4, #52]	@ 0x34
 801f6ca:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801f6ce:	f882 0096 	strb.w	r0, [r2, #150]	@ 0x96
 801f6d2:	01c8      	lsls	r0, r1, #7
 801f6d4:	f894 1035 	ldrb.w	r1, [r4, #53]	@ 0x35
 801f6d8:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801f6dc:	f882 0097 	strb.w	r0, [r2, #151]	@ 0x97
 801f6e0:	01c8      	lsls	r0, r1, #7
 801f6e2:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
 801f6e6:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801f6ea:	f882 0098 	strb.w	r0, [r2, #152]	@ 0x98
 801f6ee:	01c8      	lsls	r0, r1, #7
 801f6f0:	f894 1037 	ldrb.w	r1, [r4, #55]	@ 0x37
 801f6f4:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801f6f8:	f882 0099 	strb.w	r0, [r2, #153]	@ 0x99
 801f6fc:	01c8      	lsls	r0, r1, #7
 801f6fe:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 801f702:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801f706:	f882 009a 	strb.w	r0, [r2, #154]	@ 0x9a
 801f70a:	01c8      	lsls	r0, r1, #7
 801f70c:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 801f710:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801f714:	f882 009b 	strb.w	r0, [r2, #155]	@ 0x9b
 801f718:	01c8      	lsls	r0, r1, #7
 801f71a:	f894 103a 	ldrb.w	r1, [r4, #58]	@ 0x3a
 801f71e:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801f722:	f882 009c 	strb.w	r0, [r2, #156]	@ 0x9c
 801f726:	01c8      	lsls	r0, r1, #7
 801f728:	f894 103b 	ldrb.w	r1, [r4, #59]	@ 0x3b
 801f72c:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801f730:	f882 009d 	strb.w	r0, [r2, #157]	@ 0x9d
 801f734:	01c8      	lsls	r0, r1, #7
 801f736:	f894 103c 	ldrb.w	r1, [r4, #60]	@ 0x3c
 801f73a:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801f73e:	f882 009e 	strb.w	r0, [r2, #158]	@ 0x9e
 801f742:	01c8      	lsls	r0, r1, #7
 801f744:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
 801f748:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801f74c:	f882 009f 	strb.w	r0, [r2, #159]	@ 0x9f
 801f750:	01c8      	lsls	r0, r1, #7
 801f752:	f894 103e 	ldrb.w	r1, [r4, #62]	@ 0x3e
 801f756:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801f75a:	f882 00a0 	strb.w	r0, [r2, #160]	@ 0xa0
 801f75e:	01c8      	lsls	r0, r1, #7
 801f760:	f894 103f 	ldrb.w	r1, [r4, #63]	@ 0x3f
 801f764:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801f768:	f882 00a1 	strb.w	r0, [r2, #161]	@ 0xa1
 801f76c:	01c8      	lsls	r0, r1, #7
 801f76e:	f894 1040 	ldrb.w	r1, [r4, #64]	@ 0x40
 801f772:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801f776:	f882 00a2 	strb.w	r0, [r2, #162]	@ 0xa2
 801f77a:	01c8      	lsls	r0, r1, #7
 801f77c:	f894 1041 	ldrb.w	r1, [r4, #65]	@ 0x41
 801f780:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801f784:	f882 00a3 	strb.w	r0, [r2, #163]	@ 0xa3
 801f788:	01c8      	lsls	r0, r1, #7
 801f78a:	f894 1042 	ldrb.w	r1, [r4, #66]	@ 0x42
 801f78e:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801f792:	f882 00a4 	strb.w	r0, [r2, #164]	@ 0xa4
 801f796:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 801f79a:	01c9      	lsls	r1, r1, #7
 801f79c:	ea41 0150 	orr.w	r1, r1, r0, lsr #1
 801f7a0:	f882 10a5 	strb.w	r1, [r2, #165]	@ 0xa5
 801f7a4:	ea4f 1cc0 	mov.w	ip, r0, lsl #7
 801f7a8:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 801f7ac:	ea4c 0c50 	orr.w	ip, ip, r0, lsr #1
 801f7b0:	f882 c0a6 	strb.w	ip, [r2, #166]	@ 0xa6
 801f7b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801f7b8:	01c0      	lsls	r0, r0, #7
 801f7ba:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 801f7be:	01c9      	lsls	r1, r1, #7
 801f7c0:	ea41 015e 	orr.w	r1, r1, lr, lsr #1
 801f7c4:	f882 10a8 	strb.w	r1, [r2, #168]	@ 0xa8
 801f7c8:	2106      	movs	r1, #6
 801f7ca:	f882 00a7 	strb.w	r0, [r2, #167]	@ 0xa7
 801f7ce:	f882 1088 	strb.w	r1, [r2, #136]	@ 0x88
 801f7d2:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f7d4:	f022 0208 	bic.w	r2, r2, #8
 801f7d8:	3321      	adds	r3, #33	@ 0x21
 801f7da:	67a2      	str	r2, [r4, #120]	@ 0x78
 801f7dc:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f7de:	06d2      	lsls	r2, r2, #27
 801f7e0:	d50c      	bpl.n	801f7fc <WriteRegisterConfiguration+0x3e8>
 801f7e2:	18e2      	adds	r2, r4, r3
 801f7e4:	f8d4 1047 	ldr.w	r1, [r4, #71]	@ 0x47
 801f7e8:	f8c2 1088 	str.w	r1, [r2, #136]	@ 0x88
 801f7ec:	2108      	movs	r1, #8
 801f7ee:	f882 1088 	strb.w	r1, [r2, #136]	@ 0x88
 801f7f2:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f7f4:	f022 0210 	bic.w	r2, r2, #16
 801f7f8:	3304      	adds	r3, #4
 801f7fa:	67a2      	str	r2, [r4, #120]	@ 0x78
 801f7fc:	f104 0288 	add.w	r2, r4, #136	@ 0x88
 801f800:	e9cd 5400 	strd	r5, r4, [sp]
 801f804:	4611      	mov	r1, r2
 801f806:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801f80a:	f00a f95d 	bl	8029ac8 <ADS_Transfer>
 801f80e:	2800      	cmp	r0, #0
 801f810:	f2c0 80e2 	blt.w	801f9d8 <WriteRegisterConfiguration+0x5c4>
 801f814:	b003      	add	sp, #12
 801f816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f818:	2a03      	cmp	r2, #3
 801f81a:	f43f aef5 	beq.w	801f608 <WriteRegisterConfiguration+0x1f4>
 801f81e:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f820:	06d1      	lsls	r1, r2, #27
 801f822:	d4de      	bmi.n	801f7e2 <WriteRegisterConfiguration+0x3ce>
 801f824:	2b00      	cmp	r3, #0
 801f826:	d1e9      	bne.n	801f7fc <WriteRegisterConfiguration+0x3e8>
 801f828:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 801f82c:	f8d4 104b 	ldr.w	r1, [r4, #75]	@ 0x4b
 801f830:	f894 204f 	ldrb.w	r2, [r4, #79]	@ 0x4f
 801f834:	f8c4 10f8 	str.w	r1, [r4, #248]	@ 0xf8
 801f838:	f884 20fc 	strb.w	r2, [r4, #252]	@ 0xfc
 801f83c:	2b00      	cmp	r3, #0
 801f83e:	d0e9      	beq.n	801f814 <WriteRegisterConfiguration+0x400>
 801f840:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 801f844:	b003      	add	sp, #12
 801f846:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801f84a:	4718      	bx	r3
 801f84c:	18e2      	adds	r2, r4, r3
 801f84e:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 801f850:	f8c2 1088 	str.w	r1, [r2, #136]	@ 0x88
 801f854:	210c      	movs	r1, #12
 801f856:	f882 1088 	strb.w	r1, [r2, #136]	@ 0x88
 801f85a:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f85c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801f860:	67a2      	str	r2, [r4, #120]	@ 0x78
 801f862:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f864:	0617      	lsls	r7, r2, #24
 801f866:	f103 0304 	add.w	r3, r3, #4
 801f86a:	f57f adf3 	bpl.w	801f454 <WriteRegisterConfiguration+0x40>
 801f86e:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 801f872:	18a6      	adds	r6, r4, r2
 801f874:	f8b4 c054 	ldrh.w	ip, [r4, #84]	@ 0x54
 801f878:	f894 7056 	ldrb.w	r7, [r4, #86]	@ 0x56
 801f87c:	f824 c002 	strh.w	ip, [r4, r2]
 801f880:	18e1      	adds	r1, r4, r3
 801f882:	70b7      	strb	r7, [r6, #2]
 801f884:	260e      	movs	r6, #14
 801f886:	f881 6088 	strb.w	r6, [r1, #136]	@ 0x88
 801f88a:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f88c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801f890:	67a2      	str	r2, [r4, #120]	@ 0x78
 801f892:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f894:	0456      	lsls	r6, r2, #17
 801f896:	f103 0303 	add.w	r3, r3, #3
 801f89a:	f57f addf 	bpl.w	801f45c <WriteRegisterConfiguration+0x48>
 801f89e:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 801f8a2:	18a6      	adds	r6, r4, r2
 801f8a4:	f8b4 c069 	ldrh.w	ip, [r4, #105]	@ 0x69
 801f8a8:	f894 706b 	ldrb.w	r7, [r4, #107]	@ 0x6b
 801f8ac:	f824 c002 	strh.w	ip, [r4, r2]
 801f8b0:	18e1      	adds	r1, r4, r3
 801f8b2:	70b7      	strb	r7, [r6, #2]
 801f8b4:	261c      	movs	r6, #28
 801f8b6:	f881 6088 	strb.w	r6, [r1, #136]	@ 0x88
 801f8ba:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f8bc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 801f8c0:	3303      	adds	r3, #3
 801f8c2:	67a2      	str	r2, [r4, #120]	@ 0x78
 801f8c4:	e5ca      	b.n	801f45c <WriteRegisterConfiguration+0x48>
 801f8c6:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801f8c8:	f8b1 105a 	ldrh.w	r1, [r1, #90]	@ 0x5a
 801f8cc:	f8a4 1089 	strh.w	r1, [r4, #137]	@ 0x89
 801f8d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801f8d4:	2212      	movs	r2, #18
 801f8d6:	67a3      	str	r3, [r4, #120]	@ 0x78
 801f8d8:	f884 2088 	strb.w	r2, [r4, #136]	@ 0x88
 801f8dc:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f8de:	4d44      	ldr	r5, [pc, #272]	@ (801f9f0 <WriteRegisterConfiguration+0x5dc>)
 801f8e0:	0796      	lsls	r6, r2, #30
 801f8e2:	f04f 018b 	mov.w	r1, #139	@ 0x8b
 801f8e6:	f04f 0c0c 	mov.w	ip, #12
 801f8ea:	f04f 0303 	mov.w	r3, #3
 801f8ee:	f57f ada5 	bpl.w	801f43c <WriteRegisterConfiguration+0x28>
 801f8f2:	1862      	adds	r2, r4, r1
 801f8f4:	18e6      	adds	r6, r4, r3
 801f8f6:	4663      	mov	r3, ip
 801f8f8:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801f8fc:	6927      	ldr	r7, [r4, #16]
 801f8fe:	f844 c001 	str.w	ip, [r4, r1]
 801f902:	6057      	str	r7, [r2, #4]
 801f904:	7d21      	ldrb	r1, [r4, #20]
 801f906:	7211      	strb	r1, [r2, #8]
 801f908:	2202      	movs	r2, #2
 801f90a:	f886 2088 	strb.w	r2, [r6, #136]	@ 0x88
 801f90e:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f910:	f022 0202 	bic.w	r2, r2, #2
 801f914:	67a2      	str	r2, [r4, #120]	@ 0x78
 801f916:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f918:	0691      	lsls	r1, r2, #26
 801f91a:	f57f ad93 	bpl.w	801f444 <WriteRegisterConfiguration+0x30>
 801f91e:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 801f922:	f8d4 104b 	ldr.w	r1, [r4, #75]	@ 0x4b
 801f926:	50a1      	str	r1, [r4, r2]
 801f928:	4422      	add	r2, r4
 801f92a:	f894 604f 	ldrb.w	r6, [r4, #79]	@ 0x4f
 801f92e:	7116      	strb	r6, [r2, #4]
 801f930:	18e1      	adds	r1, r4, r3
 801f932:	260a      	movs	r6, #10
 801f934:	f881 6088 	strb.w	r6, [r1, #136]	@ 0x88
 801f938:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f93a:	f022 0220 	bic.w	r2, r2, #32
 801f93e:	3305      	adds	r3, #5
 801f940:	67a2      	str	r2, [r4, #120]	@ 0x78
 801f942:	e57f      	b.n	801f444 <WriteRegisterConfiguration+0x30>
 801f944:	2a03      	cmp	r2, #3
 801f946:	f43f adc7 	beq.w	801f4d8 <WriteRegisterConfiguration+0xc4>
 801f94a:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f94c:	0717      	lsls	r7, r2, #28
 801f94e:	f57f af66 	bpl.w	801f81e <WriteRegisterConfiguration+0x40a>
 801f952:	e64c      	b.n	801f5ee <WriteRegisterConfiguration+0x1da>
 801f954:	f103 0188 	add.w	r1, r3, #136	@ 0x88
 801f958:	f8d4 e015 	ldr.w	lr, [r4, #21]
 801f95c:	f8d4 6021 	ldr.w	r6, [r4, #33]	@ 0x21
 801f960:	f8d4 c019 	ldr.w	ip, [r4, #25]
 801f964:	f8d4 701d 	ldr.w	r7, [r4, #29]
 801f968:	f844 e001 	str.w	lr, [r4, r1]
 801f96c:	1862      	adds	r2, r4, r1
 801f96e:	18e1      	adds	r1, r4, r3
 801f970:	f8c2 c004 	str.w	ip, [r2, #4]
 801f974:	6097      	str	r7, [r2, #8]
 801f976:	60d6      	str	r6, [r2, #12]
 801f978:	f894 6025 	ldrb.w	r6, [r4, #37]	@ 0x25
 801f97c:	7416      	strb	r6, [r2, #16]
 801f97e:	2604      	movs	r6, #4
 801f980:	f881 6088 	strb.w	r6, [r1, #136]	@ 0x88
 801f984:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f986:	f022 0204 	bic.w	r2, r2, #4
 801f98a:	3311      	adds	r3, #17
 801f98c:	67a2      	str	r2, [r4, #120]	@ 0x78
 801f98e:	e62a      	b.n	801f5e6 <WriteRegisterConfiguration+0x1d2>
 801f990:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 801f994:	f104 0126 	add.w	r1, r4, #38	@ 0x26
 801f998:	4422      	add	r2, r4
 801f99a:	f104 0746 	add.w	r7, r4, #70	@ 0x46
 801f99e:	f8d1 e000 	ldr.w	lr, [r1]
 801f9a2:	f8d1 c004 	ldr.w	ip, [r1, #4]
 801f9a6:	6888      	ldr	r0, [r1, #8]
 801f9a8:	68ce      	ldr	r6, [r1, #12]
 801f9aa:	60d6      	str	r6, [r2, #12]
 801f9ac:	3110      	adds	r1, #16
 801f9ae:	42b9      	cmp	r1, r7
 801f9b0:	f8c2 e000 	str.w	lr, [r2]
 801f9b4:	f8c2 c004 	str.w	ip, [r2, #4]
 801f9b8:	6090      	str	r0, [r2, #8]
 801f9ba:	f102 0210 	add.w	r2, r2, #16
 801f9be:	d1ee      	bne.n	801f99e <WriteRegisterConfiguration+0x58a>
 801f9c0:	7809      	ldrb	r1, [r1, #0]
 801f9c2:	7011      	strb	r1, [r2, #0]
 801f9c4:	18e2      	adds	r2, r4, r3
 801f9c6:	2106      	movs	r1, #6
 801f9c8:	f882 1088 	strb.w	r1, [r2, #136]	@ 0x88
 801f9cc:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801f9ce:	f022 0208 	bic.w	r2, r2, #8
 801f9d2:	3321      	adds	r3, #33	@ 0x21
 801f9d4:	67a2      	str	r2, [r4, #120]	@ 0x78
 801f9d6:	e701      	b.n	801f7dc <WriteRegisterConfiguration+0x3c8>
 801f9d8:	6823      	ldr	r3, [r4, #0]
 801f9da:	3371      	adds	r3, #113	@ 0x71
 801f9dc:	bf1c      	itt	ne
 801f9de:	f06f 0371 	mvnne.w	r3, #113	@ 0x71
 801f9e2:	6023      	strne	r3, [r4, #0]
 801f9e4:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 801f9e8:	2b00      	cmp	r3, #0
 801f9ea:	f47f af29 	bne.w	801f840 <WriteRegisterConfiguration+0x42c>
 801f9ee:	e711      	b.n	801f814 <WriteRegisterConfiguration+0x400>
 801f9f0:	0801f9f5 	.word	0x0801f9f5

0801f9f4 <WriteRegisterConfigurationCheckDeviceConfig>:
 801f9f4:	2800      	cmp	r0, #0
 801f9f6:	db11      	blt.n	801fa1c <WriteRegisterConfigurationCheckDeviceConfig+0x28>
 801f9f8:	f891 208a 	ldrb.w	r2, [r1, #138]	@ 0x8a
 801f9fc:	f8d1 3100 	ldr.w	r3, [r1, #256]	@ 0x100
 801fa00:	0650      	lsls	r0, r2, #25
 801fa02:	bf4c      	ite	mi
 801fa04:	f043 0380 	orrmi.w	r3, r3, #128	@ 0x80
 801fa08:	f023 0380 	bicpl.w	r3, r3, #128	@ 0x80
 801fa0c:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
 801fa10:	0693      	lsls	r3, r2, #26
 801fa12:	bf48      	it	mi
 801fa14:	2000      	movmi	r0, #0
 801fa16:	d50e      	bpl.n	801fa36 <WriteRegisterConfigurationCheckDeviceConfig+0x42>
 801fa18:	f7ff bcfc 	b.w	801f414 <WriteRegisterConfiguration>
 801fa1c:	680b      	ldr	r3, [r1, #0]
 801fa1e:	3371      	adds	r3, #113	@ 0x71
 801fa20:	bf1c      	itt	ne
 801fa22:	f06f 0371 	mvnne.w	r3, #113	@ 0x71
 801fa26:	600b      	strne	r3, [r1, #0]
 801fa28:	f8d1 3104 	ldr.w	r3, [r1, #260]	@ 0x104
 801fa2c:	b113      	cbz	r3, 801fa34 <WriteRegisterConfigurationCheckDeviceConfig+0x40>
 801fa2e:	f8d1 1108 	ldr.w	r1, [r1, #264]	@ 0x108
 801fa32:	4718      	bx	r3
 801fa34:	4770      	bx	lr
 801fa36:	6f88      	ldr	r0, [r1, #120]	@ 0x78
 801fa38:	4b07      	ldr	r3, [pc, #28]	@ (801fa58 <WriteRegisterConfigurationCheckDeviceConfig+0x64>)
 801fa3a:	f891 20fd 	ldrb.w	r2, [r1, #253]	@ 0xfd
 801fa3e:	4303      	orrs	r3, r0
 801fa40:	678b      	str	r3, [r1, #120]	@ 0x78
 801fa42:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801fa44:	f042 0202 	orr.w	r2, r2, #2
 801fa48:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801fa4c:	f881 20fd 	strb.w	r2, [r1, #253]	@ 0xfd
 801fa50:	678b      	str	r3, [r1, #120]	@ 0x78
 801fa52:	f06f 0071 	mvn.w	r0, #113	@ 0x71
 801fa56:	e7df      	b.n	801fa18 <WriteRegisterConfigurationCheckDeviceConfig+0x24>
 801fa58:	0003dffe 	.word	0x0003dffe

0801fa5c <WriteBlockEnable>:
 801fa5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fa5e:	2800      	cmp	r0, #0
 801fa60:	b085      	sub	sp, #20
 801fa62:	460c      	mov	r4, r1
 801fa64:	f2c0 809f 	blt.w	801fba6 <WriteBlockEnable+0x14a>
 801fa68:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801fa6a:	05db      	lsls	r3, r3, #23
 801fa6c:	d517      	bpl.n	801fa9e <WriteBlockEnable+0x42>
 801fa6e:	4b7a      	ldr	r3, [pc, #488]	@ (801fc58 <WriteBlockEnable+0x1fc>)
 801fa70:	f891 1058 	ldrb.w	r1, [r1, #88]	@ 0x58
 801fa74:	f884 1089 	strb.w	r1, [r4, #137]	@ 0x89
 801fa78:	f104 0288 	add.w	r2, r4, #136	@ 0x88
 801fa7c:	2010      	movs	r0, #16
 801fa7e:	f884 0088 	strb.w	r0, [r4, #136]	@ 0x88
 801fa82:	4611      	mov	r1, r2
 801fa84:	e9cd 3400 	strd	r3, r4, [sp]
 801fa88:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801fa8c:	2302      	movs	r3, #2
 801fa8e:	f00a f81b 	bl	8029ac8 <ADS_Transfer>
 801fa92:	1e03      	subs	r3, r0, #0
 801fa94:	f2c0 80a5 	blt.w	801fbe2 <WriteBlockEnable+0x186>
 801fa98:	4618      	mov	r0, r3
 801fa9a:	b005      	add	sp, #20
 801fa9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fa9e:	6f8e      	ldr	r6, [r1, #120]	@ 0x78
 801faa0:	6f88      	ldr	r0, [r1, #120]	@ 0x78
 801faa2:	4b6e      	ldr	r3, [pc, #440]	@ (801fc5c <WriteBlockEnable+0x200>)
 801faa4:	f006 7600 	and.w	r6, r6, #33554432	@ 0x2000000
 801faa8:	f000 0020 	and.w	r0, r0, #32
 801faac:	4330      	orrs	r0, r6
 801faae:	e9c1 3143 	strd	r3, r1, [r1, #268]	@ 0x10c
 801fab2:	f000 8091 	beq.w	801fbd8 <WriteBlockEnable+0x17c>
 801fab6:	f891 70fb 	ldrb.w	r7, [r1, #251]	@ 0xfb
 801faba:	f8d1 311c 	ldr.w	r3, [r1, #284]	@ 0x11c
 801fabe:	f007 073f 	and.w	r7, r7, #63	@ 0x3f
 801fac2:	2f09      	cmp	r7, #9
 801fac4:	a903      	add	r1, sp, #12
 801fac6:	a802      	add	r0, sp, #8
 801fac8:	bf94      	ite	ls
 801faca:	8bdd      	ldrhls	r5, [r3, #30]
 801facc:	8c1d      	ldrhhi	r5, [r3, #32]
 801face:	f7e7 fb63 	bl	8007198 <Timer_GetCounterValue>
 801fad2:	f8d4 2118 	ldr.w	r2, [r4, #280]	@ 0x118
 801fad6:	f8dd c008 	ldr.w	ip, [sp, #8]
 801fada:	f8dd e00c 	ldr.w	lr, [sp, #12]
 801fade:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
 801fae2:	18ab      	adds	r3, r5, r2
 801fae4:	4d5e      	ldr	r5, [pc, #376]	@ (801fc60 <WriteBlockEnable+0x204>)
 801fae6:	bf2c      	ite	cs
 801fae8:	2101      	movcs	r1, #1
 801faea:	2100      	movcc	r1, #0
 801faec:	42ab      	cmp	r3, r5
 801faee:	d94f      	bls.n	801fb90 <WriteBlockEnable+0x134>
 801faf0:	1c45      	adds	r5, r0, #1
 801faf2:	42a8      	cmp	r0, r5
 801faf4:	f5a3 2374 	sub.w	r3, r3, #999424	@ 0xf4000
 801faf8:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 801fafc:	bf2c      	ite	cs
 801fafe:	2100      	movcs	r1, #0
 801fb00:	2101      	movcc	r1, #1
 801fb02:	2900      	cmp	r1, #0
 801fb04:	d048      	beq.n	801fb98 <WriteBlockEnable+0x13c>
 801fb06:	4560      	cmp	r0, ip
 801fb08:	f000 808a 	beq.w	801fc20 <WriteBlockEnable+0x1c4>
 801fb0c:	bf34      	ite	cc
 801fb0e:	2201      	movcc	r2, #1
 801fb10:	2200      	movcs	r2, #0
 801fb12:	b12a      	cbz	r2, 801fb20 <WriteBlockEnable+0xc4>
 801fb14:	4565      	cmp	r5, ip
 801fb16:	d076      	beq.n	801fc06 <WriteBlockEnable+0x1aa>
 801fb18:	bf34      	ite	cc
 801fb1a:	2301      	movcc	r3, #1
 801fb1c:	2300      	movcs	r3, #0
 801fb1e:	b313      	cbz	r3, 801fb66 <WriteBlockEnable+0x10a>
 801fb20:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	@ 0xfa
 801fb24:	f894 10fa 	ldrb.w	r1, [r4, #250]	@ 0xfa
 801fb28:	ba5b      	rev16	r3, r3
 801fb2a:	f3c3 1383 	ubfx	r3, r3, #6, #4
 801fb2e:	2e00      	cmp	r6, #0
 801fb30:	d047      	beq.n	801fbc2 <WriteBlockEnable+0x166>
 801fb32:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801fb34:	f042 0220 	orr.w	r2, r2, #32
 801fb38:	67a2      	str	r2, [r4, #120]	@ 0x78
 801fb3a:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801fb3c:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 801fb40:	2600      	movs	r6, #0
 801fb42:	67a2      	str	r2, [r4, #120]	@ 0x78
 801fb44:	f3c3 0297 	ubfx	r2, r3, #2, #24
 801fb48:	f021 0103 	bic.w	r1, r1, #3
 801fb4c:	4311      	orrs	r1, r2
 801fb4e:	ea46 1383 	orr.w	r3, r6, r3, lsl #6
 801fb52:	f884 10fa 	strb.w	r1, [r4, #250]	@ 0xfa
 801fb56:	f884 30fb 	strb.w	r3, [r4, #251]	@ 0xfb
 801fb5a:	f504 718c 	add.w	r1, r4, #280	@ 0x118
 801fb5e:	f504 708a 	add.w	r0, r4, #276	@ 0x114
 801fb62:	f7e7 fb19 	bl	8007198 <Timer_GetCounterValue>
 801fb66:	4621      	mov	r1, r4
 801fb68:	230a      	movs	r3, #10
 801fb6a:	f801 3ff8 	strb.w	r3, [r1, #248]!
 801fb6e:	4b3d      	ldr	r3, [pc, #244]	@ (801fc64 <WriteBlockEnable+0x208>)
 801fb70:	2200      	movs	r2, #0
 801fb72:	e9cd 3400 	strd	r3, r4, [sp]
 801fb76:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801fb7a:	2305      	movs	r3, #5
 801fb7c:	f009 ffa4 	bl	8029ac8 <ADS_Transfer>
 801fb80:	1e03      	subs	r3, r0, #0
 801fb82:	da89      	bge.n	801fa98 <WriteBlockEnable+0x3c>
 801fb84:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 801fb88:	b005      	add	sp, #20
 801fb8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801fb8e:	4718      	bx	r3
 801fb90:	f081 0101 	eor.w	r1, r1, #1
 801fb94:	4605      	mov	r5, r0
 801fb96:	e7b4      	b.n	801fb02 <WriteBlockEnable+0xa6>
 801fb98:	4560      	cmp	r0, ip
 801fb9a:	d03e      	beq.n	801fc1a <WriteBlockEnable+0x1be>
 801fb9c:	d3e3      	bcc.n	801fb66 <WriteBlockEnable+0x10a>
 801fb9e:	4565      	cmp	r5, ip
 801fba0:	d038      	beq.n	801fc14 <WriteBlockEnable+0x1b8>
 801fba2:	d3bd      	bcc.n	801fb20 <WriteBlockEnable+0xc4>
 801fba4:	e7df      	b.n	801fb66 <WriteBlockEnable+0x10a>
 801fba6:	680b      	ldr	r3, [r1, #0]
 801fba8:	3371      	adds	r3, #113	@ 0x71
 801fbaa:	bf1c      	itt	ne
 801fbac:	f06f 0371 	mvnne.w	r3, #113	@ 0x71
 801fbb0:	600b      	strne	r3, [r1, #0]
 801fbb2:	f8d1 3104 	ldr.w	r3, [r1, #260]	@ 0x104
 801fbb6:	b113      	cbz	r3, 801fbbe <WriteBlockEnable+0x162>
 801fbb8:	f8d1 1108 	ldr.w	r1, [r1, #264]	@ 0x108
 801fbbc:	e7e4      	b.n	801fb88 <WriteBlockEnable+0x12c>
 801fbbe:	4603      	mov	r3, r0
 801fbc0:	e76a      	b.n	801fa98 <WriteBlockEnable+0x3c>
 801fbc2:	f8b4 204d 	ldrh.w	r2, [r4, #77]	@ 0x4d
 801fbc6:	ba52      	rev16	r2, r2
 801fbc8:	f3c2 1283 	ubfx	r2, r2, #6, #4
 801fbcc:	4293      	cmp	r3, r2
 801fbce:	d02c      	beq.n	801fc2a <WriteBlockEnable+0x1ce>
 801fbd0:	2f00      	cmp	r7, #0
 801fbd2:	bf08      	it	eq
 801fbd4:	4613      	moveq	r3, r2
 801fbd6:	e7b5      	b.n	801fb44 <WriteBlockEnable+0xe8>
 801fbd8:	b005      	add	sp, #20
 801fbda:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801fbde:	f7ff bc19 	b.w	801f414 <WriteRegisterConfiguration>
 801fbe2:	6822      	ldr	r2, [r4, #0]
 801fbe4:	3271      	adds	r2, #113	@ 0x71
 801fbe6:	bf1c      	itt	ne
 801fbe8:	f06f 0271 	mvnne.w	r2, #113	@ 0x71
 801fbec:	6022      	strne	r2, [r4, #0]
 801fbee:	f8d4 2104 	ldr.w	r2, [r4, #260]	@ 0x104
 801fbf2:	2a00      	cmp	r2, #0
 801fbf4:	f43f af50 	beq.w	801fa98 <WriteBlockEnable+0x3c>
 801fbf8:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 801fbfc:	4618      	mov	r0, r3
 801fbfe:	b005      	add	sp, #20
 801fc00:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801fc04:	4710      	bx	r2
 801fc06:	4573      	cmp	r3, lr
 801fc08:	bf8c      	ite	hi
 801fc0a:	2300      	movhi	r3, #0
 801fc0c:	2301      	movls	r3, #1
 801fc0e:	2b00      	cmp	r3, #0
 801fc10:	d0a9      	beq.n	801fb66 <WriteBlockEnable+0x10a>
 801fc12:	e785      	b.n	801fb20 <WriteBlockEnable+0xc4>
 801fc14:	4573      	cmp	r3, lr
 801fc16:	d983      	bls.n	801fb20 <WriteBlockEnable+0xc4>
 801fc18:	e7a5      	b.n	801fb66 <WriteBlockEnable+0x10a>
 801fc1a:	4572      	cmp	r2, lr
 801fc1c:	d9a3      	bls.n	801fb66 <WriteBlockEnable+0x10a>
 801fc1e:	e7be      	b.n	801fb9e <WriteBlockEnable+0x142>
 801fc20:	4572      	cmp	r2, lr
 801fc22:	bf8c      	ite	hi
 801fc24:	2200      	movhi	r2, #0
 801fc26:	2201      	movls	r2, #1
 801fc28:	e773      	b.n	801fb12 <WriteBlockEnable+0xb6>
 801fc2a:	f894 204e 	ldrb.w	r2, [r4, #78]	@ 0x4e
 801fc2e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801fc32:	4297      	cmp	r7, r2
 801fc34:	d00c      	beq.n	801fc50 <WriteBlockEnable+0x1f4>
 801fc36:	da05      	bge.n	801fc44 <WriteBlockEnable+0x1e8>
 801fc38:	1c7e      	adds	r6, r7, #1
 801fc3a:	42b2      	cmp	r2, r6
 801fc3c:	bfa8      	it	ge
 801fc3e:	4632      	movge	r2, r6
 801fc40:	b256      	sxtb	r6, r2
 801fc42:	e77f      	b.n	801fb44 <WriteBlockEnable+0xe8>
 801fc44:	b102      	cbz	r2, 801fc48 <WriteBlockEnable+0x1ec>
 801fc46:	1e7e      	subs	r6, r7, #1
 801fc48:	42b2      	cmp	r2, r6
 801fc4a:	bfb8      	it	lt
 801fc4c:	4632      	movlt	r2, r6
 801fc4e:	e7f7      	b.n	801fc40 <WriteBlockEnable+0x1e4>
 801fc50:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 801fc54:	4630      	mov	r0, r6
 801fc56:	e797      	b.n	801fb88 <WriteBlockEnable+0x12c>
 801fc58:	0801f325 	.word	0x0801f325
 801fc5c:	0801f415 	.word	0x0801f415
 801fc60:	000f423f 	.word	0x000f423f
 801fc64:	0801f035 	.word	0x0801f035

0801fc68 <WriteClockConfiguration>:
 801fc68:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fc6a:	2800      	cmp	r0, #0
 801fc6c:	b085      	sub	sp, #20
 801fc6e:	460c      	mov	r4, r1
 801fc70:	f2c0 80da 	blt.w	801fe28 <WriteClockConfiguration+0x1c0>
 801fc74:	6f88      	ldr	r0, [r1, #120]	@ 0x78
 801fc76:	f410 6080 	ands.w	r0, r0, #1024	@ 0x400
 801fc7a:	d13a      	bne.n	801fcf2 <WriteClockConfiguration+0x8a>
 801fc7c:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 801fc7e:	0509      	lsls	r1, r1, #20
 801fc80:	f04f 0609 	mov.w	r6, #9
 801fc84:	f04f 078d 	mov.w	r7, #141	@ 0x8d
 801fc88:	f04f 0304 	mov.w	r3, #4
 801fc8c:	f04f 0288 	mov.w	r2, #136	@ 0x88
 801fc90:	f04f 0505 	mov.w	r5, #5
 801fc94:	d446      	bmi.n	801fd24 <WriteClockConfiguration+0xbc>
 801fc96:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 801fc98:	04c9      	lsls	r1, r1, #19
 801fc9a:	d457      	bmi.n	801fd4c <WriteClockConfiguration+0xe4>
 801fc9c:	2800      	cmp	r0, #0
 801fc9e:	f040 8139 	bne.w	801ff14 <WriteClockConfiguration+0x2ac>
 801fca2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801fca4:	05db      	lsls	r3, r3, #23
 801fca6:	d56d      	bpl.n	801fd84 <WriteClockConfiguration+0x11c>
 801fca8:	4b9b      	ldr	r3, [pc, #620]	@ (801ff18 <WriteClockConfiguration+0x2b0>)
 801fcaa:	f894 1058 	ldrb.w	r1, [r4, #88]	@ 0x58
 801fcae:	f884 1089 	strb.w	r1, [r4, #137]	@ 0x89
 801fcb2:	f104 0288 	add.w	r2, r4, #136	@ 0x88
 801fcb6:	2010      	movs	r0, #16
 801fcb8:	f884 0088 	strb.w	r0, [r4, #136]	@ 0x88
 801fcbc:	4611      	mov	r1, r2
 801fcbe:	e9cd 3400 	strd	r3, r4, [sp]
 801fcc2:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801fcc6:	2302      	movs	r3, #2
 801fcc8:	f009 fefe 	bl	8029ac8 <ADS_Transfer>
 801fccc:	1e03      	subs	r3, r0, #0
 801fcce:	da54      	bge.n	801fd7a <WriteClockConfiguration+0x112>
 801fcd0:	6822      	ldr	r2, [r4, #0]
 801fcd2:	3271      	adds	r2, #113	@ 0x71
 801fcd4:	bf1c      	itt	ne
 801fcd6:	f06f 0271 	mvnne.w	r2, #113	@ 0x71
 801fcda:	6022      	strne	r2, [r4, #0]
 801fcdc:	f8d4 2104 	ldr.w	r2, [r4, #260]	@ 0x104
 801fce0:	2a00      	cmp	r2, #0
 801fce2:	d04a      	beq.n	801fd7a <WriteClockConfiguration+0x112>
 801fce4:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 801fce8:	4618      	mov	r0, r3
 801fcea:	b005      	add	sp, #20
 801fcec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801fcf0:	4710      	bx	r2
 801fcf2:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801fcf4:	6dc9      	ldr	r1, [r1, #92]	@ 0x5c
 801fcf6:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88
 801fcfa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801fcfe:	67a3      	str	r3, [r4, #120]	@ 0x78
 801fd00:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 801fd02:	2214      	movs	r2, #20
 801fd04:	0509      	lsls	r1, r1, #20
 801fd06:	f884 2088 	strb.w	r2, [r4, #136]	@ 0x88
 801fd0a:	f04f 060d 	mov.w	r6, #13
 801fd0e:	f04f 0791 	mov.w	r7, #145	@ 0x91
 801fd12:	f04f 0308 	mov.w	r3, #8
 801fd16:	f04f 028c 	mov.w	r2, #140	@ 0x8c
 801fd1a:	f04f 0509 	mov.w	r5, #9
 801fd1e:	f04f 0004 	mov.w	r0, #4
 801fd22:	d5b8      	bpl.n	801fc96 <WriteClockConfiguration+0x2e>
 801fd24:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 801fd26:	50a3      	str	r3, [r4, r2]
 801fd28:	4422      	add	r2, r4
 801fd2a:	f894 3064 	ldrb.w	r3, [r4, #100]	@ 0x64
 801fd2e:	7113      	strb	r3, [r2, #4]
 801fd30:	4420      	add	r0, r4
 801fd32:	2316      	movs	r3, #22
 801fd34:	f880 3088 	strb.w	r3, [r0, #136]	@ 0x88
 801fd38:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801fd3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801fd3e:	67a3      	str	r3, [r4, #120]	@ 0x78
 801fd40:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801fd42:	04d8      	lsls	r0, r3, #19
 801fd44:	d51c      	bpl.n	801fd80 <WriteClockConfiguration+0x118>
 801fd46:	463a      	mov	r2, r7
 801fd48:	4633      	mov	r3, r6
 801fd4a:	4628      	mov	r0, r5
 801fd4c:	f8d4 1065 	ldr.w	r1, [r4, #101]	@ 0x65
 801fd50:	50a1      	str	r1, [r4, r2]
 801fd52:	4420      	add	r0, r4
 801fd54:	2218      	movs	r2, #24
 801fd56:	f880 2088 	strb.w	r2, [r0, #136]	@ 0x88
 801fd5a:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801fd5c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 801fd60:	67a2      	str	r2, [r4, #120]	@ 0x78
 801fd62:	496e      	ldr	r1, [pc, #440]	@ (801ff1c <WriteClockConfiguration+0x2b4>)
 801fd64:	f104 0288 	add.w	r2, r4, #136	@ 0x88
 801fd68:	e9cd 1400 	strd	r1, r4, [sp]
 801fd6c:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801fd70:	4611      	mov	r1, r2
 801fd72:	f009 fea9 	bl	8029ac8 <ADS_Transfer>
 801fd76:	1e03      	subs	r3, r0, #0
 801fd78:	dbaa      	blt.n	801fcd0 <WriteClockConfiguration+0x68>
 801fd7a:	4618      	mov	r0, r3
 801fd7c:	b005      	add	sp, #20
 801fd7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fd80:	462b      	mov	r3, r5
 801fd82:	e7ee      	b.n	801fd62 <WriteClockConfiguration+0xfa>
 801fd84:	6fa6      	ldr	r6, [r4, #120]	@ 0x78
 801fd86:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801fd88:	4a65      	ldr	r2, [pc, #404]	@ (801ff20 <WriteClockConfiguration+0x2b8>)
 801fd8a:	f006 7600 	and.w	r6, r6, #33554432	@ 0x2000000
 801fd8e:	f003 0320 	and.w	r3, r3, #32
 801fd92:	4333      	orrs	r3, r6
 801fd94:	e9c4 2443 	strd	r2, r4, [r4, #268]	@ 0x10c
 801fd98:	d057      	beq.n	801fe4a <WriteClockConfiguration+0x1e2>
 801fd9a:	f894 70fb 	ldrb.w	r7, [r4, #251]	@ 0xfb
 801fd9e:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
 801fda2:	f007 073f 	and.w	r7, r7, #63	@ 0x3f
 801fda6:	2f09      	cmp	r7, #9
 801fda8:	a903      	add	r1, sp, #12
 801fdaa:	a802      	add	r0, sp, #8
 801fdac:	bf94      	ite	ls
 801fdae:	8bdd      	ldrhls	r5, [r3, #30]
 801fdb0:	8c1d      	ldrhhi	r5, [r3, #32]
 801fdb2:	f7e7 f9f1 	bl	8007198 <Timer_GetCounterValue>
 801fdb6:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
 801fdba:	f8dd c008 	ldr.w	ip, [sp, #8]
 801fdbe:	f8dd e00c 	ldr.w	lr, [sp, #12]
 801fdc2:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
 801fdc6:	18e9      	adds	r1, r5, r3
 801fdc8:	4d56      	ldr	r5, [pc, #344]	@ (801ff24 <WriteClockConfiguration+0x2bc>)
 801fdca:	bf2c      	ite	cs
 801fdcc:	2201      	movcs	r2, #1
 801fdce:	2200      	movcc	r2, #0
 801fdd0:	42a9      	cmp	r1, r5
 801fdd2:	d940      	bls.n	801fe56 <WriteClockConfiguration+0x1ee>
 801fdd4:	1c45      	adds	r5, r0, #1
 801fdd6:	42a8      	cmp	r0, r5
 801fdd8:	f5a1 2174 	sub.w	r1, r1, #999424	@ 0xf4000
 801fddc:	f5a1 7110 	sub.w	r1, r1, #576	@ 0x240
 801fde0:	bf2c      	ite	cs
 801fde2:	2200      	movcs	r2, #0
 801fde4:	2201      	movcc	r2, #1
 801fde6:	2a00      	cmp	r2, #0
 801fde8:	d039      	beq.n	801fe5e <WriteClockConfiguration+0x1f6>
 801fdea:	4584      	cmp	ip, r0
 801fdec:	d06b      	beq.n	801fec6 <WriteClockConfiguration+0x25e>
 801fdee:	bf8c      	ite	hi
 801fdf0:	2301      	movhi	r3, #1
 801fdf2:	2300      	movls	r3, #0
 801fdf4:	2b00      	cmp	r3, #0
 801fdf6:	d038      	beq.n	801fe6a <WriteClockConfiguration+0x202>
 801fdf8:	45ac      	cmp	ip, r5
 801fdfa:	d07c      	beq.n	801fef6 <WriteClockConfiguration+0x28e>
 801fdfc:	bf8c      	ite	hi
 801fdfe:	2101      	movhi	r1, #1
 801fe00:	2100      	movls	r1, #0
 801fe02:	bb91      	cbnz	r1, 801fe6a <WriteClockConfiguration+0x202>
 801fe04:	4621      	mov	r1, r4
 801fe06:	230a      	movs	r3, #10
 801fe08:	f801 3ff8 	strb.w	r3, [r1, #248]!
 801fe0c:	4b46      	ldr	r3, [pc, #280]	@ (801ff28 <WriteClockConfiguration+0x2c0>)
 801fe0e:	2200      	movs	r2, #0
 801fe10:	e9cd 3400 	strd	r3, r4, [sp]
 801fe14:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801fe18:	2305      	movs	r3, #5
 801fe1a:	f009 fe55 	bl	8029ac8 <ADS_Transfer>
 801fe1e:	1e03      	subs	r3, r0, #0
 801fe20:	daab      	bge.n	801fd7a <WriteClockConfiguration+0x112>
 801fe22:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 801fe26:	e00a      	b.n	801fe3e <WriteClockConfiguration+0x1d6>
 801fe28:	680b      	ldr	r3, [r1, #0]
 801fe2a:	3371      	adds	r3, #113	@ 0x71
 801fe2c:	bf1c      	itt	ne
 801fe2e:	f06f 0371 	mvnne.w	r3, #113	@ 0x71
 801fe32:	600b      	strne	r3, [r1, #0]
 801fe34:	f8d1 3104 	ldr.w	r3, [r1, #260]	@ 0x104
 801fe38:	b12b      	cbz	r3, 801fe46 <WriteClockConfiguration+0x1de>
 801fe3a:	f8d1 1108 	ldr.w	r1, [r1, #264]	@ 0x108
 801fe3e:	b005      	add	sp, #20
 801fe40:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801fe44:	4718      	bx	r3
 801fe46:	4603      	mov	r3, r0
 801fe48:	e797      	b.n	801fd7a <WriteClockConfiguration+0x112>
 801fe4a:	4621      	mov	r1, r4
 801fe4c:	b005      	add	sp, #20
 801fe4e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801fe52:	f7ff badf 	b.w	801f414 <WriteRegisterConfiguration>
 801fe56:	f082 0201 	eor.w	r2, r2, #1
 801fe5a:	4605      	mov	r5, r0
 801fe5c:	e7c3      	b.n	801fde6 <WriteClockConfiguration+0x17e>
 801fe5e:	4584      	cmp	ip, r0
 801fe60:	d036      	beq.n	801fed0 <WriteClockConfiguration+0x268>
 801fe62:	d8cf      	bhi.n	801fe04 <WriteClockConfiguration+0x19c>
 801fe64:	45ac      	cmp	ip, r5
 801fe66:	d043      	beq.n	801fef0 <WriteClockConfiguration+0x288>
 801fe68:	d9cc      	bls.n	801fe04 <WriteClockConfiguration+0x19c>
 801fe6a:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	@ 0xfa
 801fe6e:	f894 10fa 	ldrb.w	r1, [r4, #250]	@ 0xfa
 801fe72:	ba5b      	rev16	r3, r3
 801fe74:	f3c3 1383 	ubfx	r3, r3, #6, #4
 801fe78:	b1d6      	cbz	r6, 801feb0 <WriteClockConfiguration+0x248>
 801fe7a:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801fe7c:	f042 0220 	orr.w	r2, r2, #32
 801fe80:	67a2      	str	r2, [r4, #120]	@ 0x78
 801fe82:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801fe84:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 801fe88:	2600      	movs	r6, #0
 801fe8a:	67a2      	str	r2, [r4, #120]	@ 0x78
 801fe8c:	f3c3 0297 	ubfx	r2, r3, #2, #24
 801fe90:	f021 0103 	bic.w	r1, r1, #3
 801fe94:	4311      	orrs	r1, r2
 801fe96:	ea46 1383 	orr.w	r3, r6, r3, lsl #6
 801fe9a:	f884 10fa 	strb.w	r1, [r4, #250]	@ 0xfa
 801fe9e:	f884 30fb 	strb.w	r3, [r4, #251]	@ 0xfb
 801fea2:	f504 718c 	add.w	r1, r4, #280	@ 0x118
 801fea6:	f504 708a 	add.w	r0, r4, #276	@ 0x114
 801feaa:	f7e7 f975 	bl	8007198 <Timer_GetCounterValue>
 801feae:	e7a9      	b.n	801fe04 <WriteClockConfiguration+0x19c>
 801feb0:	f8b4 204d 	ldrh.w	r2, [r4, #77]	@ 0x4d
 801feb4:	ba52      	rev16	r2, r2
 801feb6:	f3c2 1283 	ubfx	r2, r2, #6, #4
 801feba:	4293      	cmp	r3, r2
 801febc:	d00b      	beq.n	801fed6 <WriteClockConfiguration+0x26e>
 801febe:	2f00      	cmp	r7, #0
 801fec0:	bf08      	it	eq
 801fec2:	4613      	moveq	r3, r2
 801fec4:	e7e2      	b.n	801fe8c <WriteClockConfiguration+0x224>
 801fec6:	459e      	cmp	lr, r3
 801fec8:	bf34      	ite	cc
 801feca:	2300      	movcc	r3, #0
 801fecc:	2301      	movcs	r3, #1
 801fece:	e791      	b.n	801fdf4 <WriteClockConfiguration+0x18c>
 801fed0:	459e      	cmp	lr, r3
 801fed2:	d297      	bcs.n	801fe04 <WriteClockConfiguration+0x19c>
 801fed4:	e7c6      	b.n	801fe64 <WriteClockConfiguration+0x1fc>
 801fed6:	f894 204e 	ldrb.w	r2, [r4, #78]	@ 0x4e
 801feda:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801fede:	4297      	cmp	r7, r2
 801fee0:	d014      	beq.n	801ff0c <WriteClockConfiguration+0x2a4>
 801fee2:	da0d      	bge.n	801ff00 <WriteClockConfiguration+0x298>
 801fee4:	1c7e      	adds	r6, r7, #1
 801fee6:	42b2      	cmp	r2, r6
 801fee8:	bfa8      	it	ge
 801feea:	4632      	movge	r2, r6
 801feec:	b256      	sxtb	r6, r2
 801feee:	e7cd      	b.n	801fe8c <WriteClockConfiguration+0x224>
 801fef0:	4571      	cmp	r1, lr
 801fef2:	d9ba      	bls.n	801fe6a <WriteClockConfiguration+0x202>
 801fef4:	e786      	b.n	801fe04 <WriteClockConfiguration+0x19c>
 801fef6:	4571      	cmp	r1, lr
 801fef8:	bf8c      	ite	hi
 801fefa:	2100      	movhi	r1, #0
 801fefc:	2101      	movls	r1, #1
 801fefe:	e780      	b.n	801fe02 <WriteClockConfiguration+0x19a>
 801ff00:	b102      	cbz	r2, 801ff04 <WriteClockConfiguration+0x29c>
 801ff02:	1e7e      	subs	r6, r7, #1
 801ff04:	42b2      	cmp	r2, r6
 801ff06:	bfb8      	it	lt
 801ff08:	4632      	movlt	r2, r6
 801ff0a:	e7ef      	b.n	801feec <WriteClockConfiguration+0x284>
 801ff0c:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 801ff10:	4630      	mov	r0, r6
 801ff12:	e794      	b.n	801fe3e <WriteClockConfiguration+0x1d6>
 801ff14:	4603      	mov	r3, r0
 801ff16:	e724      	b.n	801fd62 <WriteClockConfiguration+0xfa>
 801ff18:	0801f325 	.word	0x0801f325
 801ff1c:	0801fa5d 	.word	0x0801fa5d
 801ff20:	0801f415 	.word	0x0801f415
 801ff24:	000f423f 	.word	0x000f423f
 801ff28:	0801f035 	.word	0x0801f035

0801ff2c <DisableClock.constprop.0>:
 801ff2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ff2e:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 801ff30:	4604      	mov	r4, r0
 801ff32:	0558      	lsls	r0, r3, #21
 801ff34:	b085      	sub	sp, #20
 801ff36:	d402      	bmi.n	801ff3e <DisableClock.constprop.0+0x12>
 801ff38:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801ff3a:	0519      	lsls	r1, r3, #20
 801ff3c:	d520      	bpl.n	801ff80 <DisableClock.constprop.0+0x54>
 801ff3e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801ff40:	f894 2058 	ldrb.w	r2, [r4, #88]	@ 0x58
 801ff44:	4980      	ldr	r1, [pc, #512]	@ (8020148 <DisableClock.constprop.0+0x21c>)
 801ff46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801ff4a:	67a3      	str	r3, [r4, #120]	@ 0x78
 801ff4c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801ff4e:	f022 0201 	bic.w	r2, r2, #1
 801ff52:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801ff56:	2010      	movs	r0, #16
 801ff58:	f884 0088 	strb.w	r0, [r4, #136]	@ 0x88
 801ff5c:	f884 2089 	strb.w	r2, [r4, #137]	@ 0x89
 801ff60:	67a3      	str	r3, [r4, #120]	@ 0x78
 801ff62:	2200      	movs	r2, #0
 801ff64:	e9cd 1400 	strd	r1, r4, [sp]
 801ff68:	2302      	movs	r3, #2
 801ff6a:	f104 0188 	add.w	r1, r4, #136	@ 0x88
 801ff6e:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801ff72:	f009 fda9 	bl	8029ac8 <ADS_Transfer>
 801ff76:	1e03      	subs	r3, r0, #0
 801ff78:	db1c      	blt.n	801ffb4 <DisableClock.constprop.0+0x88>
 801ff7a:	4618      	mov	r0, r3
 801ff7c:	b005      	add	sp, #20
 801ff7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ff80:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801ff82:	04da      	lsls	r2, r3, #19
 801ff84:	d4db      	bmi.n	801ff3e <DisableClock.constprop.0+0x12>
 801ff86:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801ff88:	05db      	lsls	r3, r3, #23
 801ff8a:	d524      	bpl.n	801ffd6 <DisableClock.constprop.0+0xaa>
 801ff8c:	4b6f      	ldr	r3, [pc, #444]	@ (802014c <DisableClock.constprop.0+0x220>)
 801ff8e:	f894 1058 	ldrb.w	r1, [r4, #88]	@ 0x58
 801ff92:	f884 1089 	strb.w	r1, [r4, #137]	@ 0x89
 801ff96:	f104 0288 	add.w	r2, r4, #136	@ 0x88
 801ff9a:	2010      	movs	r0, #16
 801ff9c:	f884 0088 	strb.w	r0, [r4, #136]	@ 0x88
 801ffa0:	4611      	mov	r1, r2
 801ffa2:	e9cd 3400 	strd	r3, r4, [sp]
 801ffa6:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 801ffaa:	2302      	movs	r3, #2
 801ffac:	f009 fd8c 	bl	8029ac8 <ADS_Transfer>
 801ffb0:	1e03      	subs	r3, r0, #0
 801ffb2:	dae2      	bge.n	801ff7a <DisableClock.constprop.0+0x4e>
 801ffb4:	6822      	ldr	r2, [r4, #0]
 801ffb6:	3271      	adds	r2, #113	@ 0x71
 801ffb8:	bf1c      	itt	ne
 801ffba:	f06f 0271 	mvnne.w	r2, #113	@ 0x71
 801ffbe:	6022      	strne	r2, [r4, #0]
 801ffc0:	f8d4 2104 	ldr.w	r2, [r4, #260]	@ 0x104
 801ffc4:	2a00      	cmp	r2, #0
 801ffc6:	d0d8      	beq.n	801ff7a <DisableClock.constprop.0+0x4e>
 801ffc8:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 801ffcc:	4618      	mov	r0, r3
 801ffce:	b005      	add	sp, #20
 801ffd0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ffd4:	4710      	bx	r2
 801ffd6:	6fa6      	ldr	r6, [r4, #120]	@ 0x78
 801ffd8:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 801ffda:	4b5d      	ldr	r3, [pc, #372]	@ (8020150 <DisableClock.constprop.0+0x224>)
 801ffdc:	f006 7600 	and.w	r6, r6, #33554432	@ 0x2000000
 801ffe0:	f000 0020 	and.w	r0, r0, #32
 801ffe4:	4330      	orrs	r0, r6
 801ffe6:	e9c4 3443 	strd	r3, r4, [r4, #268]	@ 0x10c
 801ffea:	d105      	bne.n	801fff8 <DisableClock.constprop.0+0xcc>
 801ffec:	4621      	mov	r1, r4
 801ffee:	b005      	add	sp, #20
 801fff0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801fff4:	f7ff ba0e 	b.w	801f414 <WriteRegisterConfiguration>
 801fff8:	f894 70fb 	ldrb.w	r7, [r4, #251]	@ 0xfb
 801fffc:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
 8020000:	f007 073f 	and.w	r7, r7, #63	@ 0x3f
 8020004:	2f09      	cmp	r7, #9
 8020006:	a903      	add	r1, sp, #12
 8020008:	a802      	add	r0, sp, #8
 802000a:	bf94      	ite	ls
 802000c:	8bdd      	ldrhls	r5, [r3, #30]
 802000e:	8c1d      	ldrhhi	r5, [r3, #32]
 8020010:	f7e7 f8c2 	bl	8007198 <Timer_GetCounterValue>
 8020014:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
 8020018:	f8dd c008 	ldr.w	ip, [sp, #8]
 802001c:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8020020:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
 8020024:	18e9      	adds	r1, r5, r3
 8020026:	4d4b      	ldr	r5, [pc, #300]	@ (8020154 <DisableClock.constprop.0+0x228>)
 8020028:	bf2c      	ite	cs
 802002a:	2201      	movcs	r2, #1
 802002c:	2200      	movcc	r2, #0
 802002e:	42a9      	cmp	r1, r5
 8020030:	d84d      	bhi.n	80200ce <DisableClock.constprop.0+0x1a2>
 8020032:	f082 0201 	eor.w	r2, r2, #1
 8020036:	4605      	mov	r5, r0
 8020038:	b302      	cbz	r2, 802007c <DisableClock.constprop.0+0x150>
 802003a:	4560      	cmp	r0, ip
 802003c:	d05f      	beq.n	80200fe <DisableClock.constprop.0+0x1d2>
 802003e:	bf34      	ite	cc
 8020040:	2301      	movcc	r3, #1
 8020042:	2300      	movcs	r3, #0
 8020044:	b303      	cbz	r3, 8020088 <DisableClock.constprop.0+0x15c>
 8020046:	4565      	cmp	r5, ip
 8020048:	d06b      	beq.n	8020122 <DisableClock.constprop.0+0x1f6>
 802004a:	bf34      	ite	cc
 802004c:	2101      	movcc	r1, #1
 802004e:	2100      	movcs	r1, #0
 8020050:	b9d1      	cbnz	r1, 8020088 <DisableClock.constprop.0+0x15c>
 8020052:	4621      	mov	r1, r4
 8020054:	230a      	movs	r3, #10
 8020056:	f801 3ff8 	strb.w	r3, [r1, #248]!
 802005a:	4b3f      	ldr	r3, [pc, #252]	@ (8020158 <DisableClock.constprop.0+0x22c>)
 802005c:	2200      	movs	r2, #0
 802005e:	e9cd 3400 	strd	r3, r4, [sp]
 8020062:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 8020066:	2305      	movs	r3, #5
 8020068:	f009 fd2e 	bl	8029ac8 <ADS_Transfer>
 802006c:	1e03      	subs	r3, r0, #0
 802006e:	da84      	bge.n	801ff7a <DisableClock.constprop.0+0x4e>
 8020070:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 8020074:	b005      	add	sp, #20
 8020076:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 802007a:	4718      	bx	r3
 802007c:	4560      	cmp	r0, ip
 802007e:	d03b      	beq.n	80200f8 <DisableClock.constprop.0+0x1cc>
 8020080:	d3e7      	bcc.n	8020052 <DisableClock.constprop.0+0x126>
 8020082:	4565      	cmp	r5, ip
 8020084:	d052      	beq.n	802012c <DisableClock.constprop.0+0x200>
 8020086:	d2e4      	bcs.n	8020052 <DisableClock.constprop.0+0x126>
 8020088:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	@ 0xfa
 802008c:	f894 10fa 	ldrb.w	r1, [r4, #250]	@ 0xfa
 8020090:	ba5b      	rev16	r3, r3
 8020092:	f3c3 1383 	ubfx	r3, r3, #6, #4
 8020096:	b326      	cbz	r6, 80200e2 <DisableClock.constprop.0+0x1b6>
 8020098:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 802009a:	f042 0220 	orr.w	r2, r2, #32
 802009e:	67a2      	str	r2, [r4, #120]	@ 0x78
 80200a0:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80200a2:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80200a6:	2600      	movs	r6, #0
 80200a8:	67a2      	str	r2, [r4, #120]	@ 0x78
 80200aa:	f3c3 0297 	ubfx	r2, r3, #2, #24
 80200ae:	f021 0103 	bic.w	r1, r1, #3
 80200b2:	430a      	orrs	r2, r1
 80200b4:	ea46 1383 	orr.w	r3, r6, r3, lsl #6
 80200b8:	f884 20fa 	strb.w	r2, [r4, #250]	@ 0xfa
 80200bc:	f884 30fb 	strb.w	r3, [r4, #251]	@ 0xfb
 80200c0:	f504 718c 	add.w	r1, r4, #280	@ 0x118
 80200c4:	f504 708a 	add.w	r0, r4, #276	@ 0x114
 80200c8:	f7e7 f866 	bl	8007198 <Timer_GetCounterValue>
 80200cc:	e7c1      	b.n	8020052 <DisableClock.constprop.0+0x126>
 80200ce:	1c45      	adds	r5, r0, #1
 80200d0:	42a8      	cmp	r0, r5
 80200d2:	f5a1 2174 	sub.w	r1, r1, #999424	@ 0xf4000
 80200d6:	f5a1 7110 	sub.w	r1, r1, #576	@ 0x240
 80200da:	bf2c      	ite	cs
 80200dc:	2200      	movcs	r2, #0
 80200de:	2201      	movcc	r2, #1
 80200e0:	e7aa      	b.n	8020038 <DisableClock.constprop.0+0x10c>
 80200e2:	f8b4 204d 	ldrh.w	r2, [r4, #77]	@ 0x4d
 80200e6:	ba52      	rev16	r2, r2
 80200e8:	f3c2 1283 	ubfx	r2, r2, #6, #4
 80200ec:	4293      	cmp	r3, r2
 80200ee:	d00b      	beq.n	8020108 <DisableClock.constprop.0+0x1dc>
 80200f0:	2f00      	cmp	r7, #0
 80200f2:	bf08      	it	eq
 80200f4:	4613      	moveq	r3, r2
 80200f6:	e7d8      	b.n	80200aa <DisableClock.constprop.0+0x17e>
 80200f8:	4573      	cmp	r3, lr
 80200fa:	d9aa      	bls.n	8020052 <DisableClock.constprop.0+0x126>
 80200fc:	e7c1      	b.n	8020082 <DisableClock.constprop.0+0x156>
 80200fe:	4573      	cmp	r3, lr
 8020100:	bf8c      	ite	hi
 8020102:	2300      	movhi	r3, #0
 8020104:	2301      	movls	r3, #1
 8020106:	e79d      	b.n	8020044 <DisableClock.constprop.0+0x118>
 8020108:	f894 204e 	ldrb.w	r2, [r4, #78]	@ 0x4e
 802010c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8020110:	4297      	cmp	r7, r2
 8020112:	d014      	beq.n	802013e <DisableClock.constprop.0+0x212>
 8020114:	da0d      	bge.n	8020132 <DisableClock.constprop.0+0x206>
 8020116:	1c7e      	adds	r6, r7, #1
 8020118:	4296      	cmp	r6, r2
 802011a:	bfa8      	it	ge
 802011c:	4616      	movge	r6, r2
 802011e:	b276      	sxtb	r6, r6
 8020120:	e7c3      	b.n	80200aa <DisableClock.constprop.0+0x17e>
 8020122:	4571      	cmp	r1, lr
 8020124:	bf8c      	ite	hi
 8020126:	2100      	movhi	r1, #0
 8020128:	2101      	movls	r1, #1
 802012a:	e791      	b.n	8020050 <DisableClock.constprop.0+0x124>
 802012c:	4571      	cmp	r1, lr
 802012e:	d9ab      	bls.n	8020088 <DisableClock.constprop.0+0x15c>
 8020130:	e78f      	b.n	8020052 <DisableClock.constprop.0+0x126>
 8020132:	b102      	cbz	r2, 8020136 <DisableClock.constprop.0+0x20a>
 8020134:	1e7e      	subs	r6, r7, #1
 8020136:	4296      	cmp	r6, r2
 8020138:	bfb8      	it	lt
 802013a:	4616      	movlt	r6, r2
 802013c:	e7ef      	b.n	802011e <DisableClock.constprop.0+0x1f2>
 802013e:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 8020142:	4630      	mov	r0, r6
 8020144:	e796      	b.n	8020074 <DisableClock.constprop.0+0x148>
 8020146:	bf00      	nop
 8020148:	0801f2c5 	.word	0x0801f2c5
 802014c:	0801f325 	.word	0x0801f325
 8020150:	0801f415 	.word	0x0801f415
 8020154:	000f423f 	.word	0x000f423f
 8020158:	0801f035 	.word	0x0801f035

0802015c <PollPllLocked>:
 802015c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802015e:	4604      	mov	r4, r0
 8020160:	b085      	sub	sp, #20
 8020162:	a903      	add	r1, sp, #12
 8020164:	a802      	add	r0, sp, #8
 8020166:	f7e7 f817 	bl	8007198 <Timer_GetCounterValue>
 802016a:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 802016e:	4fae      	ldr	r7, [pc, #696]	@ (8020428 <PollPllLocked+0x2cc>)
 8020170:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8020174:	f242 7310 	movw	r3, #10000	@ 0x2710
 8020178:	18d3      	adds	r3, r2, r3
 802017a:	bf2c      	ite	cs
 802017c:	2501      	movcs	r5, #1
 802017e:	2500      	movcc	r5, #0
 8020180:	42bb      	cmp	r3, r7
 8020182:	e9dd 6102 	ldrd	r6, r1, [sp, #8]
 8020186:	d831      	bhi.n	80201ec <PollPllLocked+0x90>
 8020188:	f085 0501 	eor.w	r5, r5, #1
 802018c:	4684      	mov	ip, r0
 802018e:	2d00      	cmp	r5, #0
 8020190:	d053      	beq.n	802023a <PollPllLocked+0xde>
 8020192:	42b0      	cmp	r0, r6
 8020194:	d035      	beq.n	8020202 <PollPllLocked+0xa6>
 8020196:	d236      	bcs.n	8020206 <PollPllLocked+0xaa>
 8020198:	4566      	cmp	r6, ip
 802019a:	d058      	beq.n	802024e <PollPllLocked+0xf2>
 802019c:	bf8c      	ite	hi
 802019e:	2301      	movhi	r3, #1
 80201a0:	2300      	movls	r3, #0
 80201a2:	f083 0301 	eor.w	r3, r3, #1
 80201a6:	b373      	cbz	r3, 8020206 <PollPllLocked+0xaa>
 80201a8:	f894 105b 	ldrb.w	r1, [r4, #91]	@ 0x5b
 80201ac:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80201ae:	f8b4 0059 	ldrh.w	r0, [r4, #89]	@ 0x59
 80201b2:	f8a4 0088 	strh.w	r0, [r4, #136]	@ 0x88
 80201b6:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 80201ba:	f884 108a 	strb.w	r1, [r4, #138]	@ 0x8a
 80201be:	499b      	ldr	r1, [pc, #620]	@ (802042c <PollPllLocked+0x2d0>)
 80201c0:	f104 0288 	add.w	r2, r4, #136	@ 0x88
 80201c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80201c8:	2012      	movs	r0, #18
 80201ca:	f884 0088 	strb.w	r0, [r4, #136]	@ 0x88
 80201ce:	67a3      	str	r3, [r4, #120]	@ 0x78
 80201d0:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 80201d4:	e9cd 1400 	strd	r1, r4, [sp]
 80201d8:	2303      	movs	r3, #3
 80201da:	4611      	mov	r1, r2
 80201dc:	f009 fc74 	bl	8029ac8 <ADS_Transfer>
 80201e0:	1e03      	subs	r3, r0, #0
 80201e2:	f2c0 80fb 	blt.w	80203dc <PollPllLocked+0x280>
 80201e6:	4618      	mov	r0, r3
 80201e8:	b005      	add	sp, #20
 80201ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80201ec:	f100 0c01 	add.w	ip, r0, #1
 80201f0:	4560      	cmp	r0, ip
 80201f2:	f5a2 2371 	sub.w	r3, r2, #987136	@ 0xf1000
 80201f6:	f5a3 6333 	sub.w	r3, r3, #2864	@ 0xb30
 80201fa:	bf2c      	ite	cs
 80201fc:	2500      	movcs	r5, #0
 80201fe:	2501      	movcc	r5, #1
 8020200:	e7c5      	b.n	802018e <PollPllLocked+0x32>
 8020202:	428a      	cmp	r2, r1
 8020204:	d9c8      	bls.n	8020198 <PollPllLocked+0x3c>
 8020206:	f894 3064 	ldrb.w	r3, [r4, #100]	@ 0x64
 802020a:	f894 10fd 	ldrb.w	r1, [r4, #253]	@ 0xfd
 802020e:	1c5a      	adds	r2, r3, #1
 8020210:	f002 0203 	and.w	r2, r2, #3
 8020214:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8020218:	4291      	cmp	r1, r2
 802021a:	d01d      	beq.n	8020258 <PollPllLocked+0xfc>
 802021c:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 802021e:	f023 0303 	bic.w	r3, r3, #3
 8020222:	4313      	orrs	r3, r2
 8020224:	f441 6100 	orr.w	r1, r1, #2048	@ 0x800
 8020228:	4620      	mov	r0, r4
 802022a:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 802022e:	67a1      	str	r1, [r4, #120]	@ 0x78
 8020230:	b005      	add	sp, #20
 8020232:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8020236:	f7ff be79 	b.w	801ff2c <DisableClock.constprop.0>
 802023a:	42b0      	cmp	r0, r6
 802023c:	f000 809e 	beq.w	802037c <PollPllLocked+0x220>
 8020240:	bf34      	ite	cc
 8020242:	2201      	movcc	r2, #1
 8020244:	2200      	movcs	r2, #0
 8020246:	2a00      	cmp	r2, #0
 8020248:	d1ae      	bne.n	80201a8 <PollPllLocked+0x4c>
 802024a:	4566      	cmp	r6, ip
 802024c:	d1a6      	bne.n	802019c <PollPllLocked+0x40>
 802024e:	4299      	cmp	r1, r3
 8020250:	bf34      	ite	cc
 8020252:	2300      	movcc	r3, #0
 8020254:	2301      	movcs	r3, #1
 8020256:	e7a4      	b.n	80201a2 <PollPllLocked+0x46>
 8020258:	4875      	ldr	r0, [pc, #468]	@ (8020430 <PollPllLocked+0x2d4>)
 802025a:	f242 7110 	movw	r1, #10000	@ 0x2710
 802025e:	f7e6 f955 	bl	800650c <print>
 8020262:	6fa5      	ldr	r5, [r4, #120]	@ 0x78
 8020264:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8020266:	4b73      	ldr	r3, [pc, #460]	@ (8020434 <PollPllLocked+0x2d8>)
 8020268:	f8c4 310c 	str.w	r3, [r4, #268]	@ 0x10c
 802026c:	f005 7500 	and.w	r5, r5, #33554432	@ 0x2000000
 8020270:	f000 0020 	and.w	r0, r0, #32
 8020274:	4328      	orrs	r0, r5
 8020276:	f8c4 4110 	str.w	r4, [r4, #272]	@ 0x110
 802027a:	f000 8092 	beq.w	80203a2 <PollPllLocked+0x246>
 802027e:	f894 60fb 	ldrb.w	r6, [r4, #251]	@ 0xfb
 8020282:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
 8020286:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 802028a:	2e09      	cmp	r6, #9
 802028c:	a903      	add	r1, sp, #12
 802028e:	a802      	add	r0, sp, #8
 8020290:	bf94      	ite	ls
 8020292:	8bdf      	ldrhls	r7, [r3, #30]
 8020294:	8c1f      	ldrhhi	r7, [r3, #32]
 8020296:	f7e6 ff7f 	bl	8007198 <Timer_GetCounterValue>
 802029a:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
 802029e:	f8dd c008 	ldr.w	ip, [sp, #8]
 80202a2:	9a03      	ldr	r2, [sp, #12]
 80202a4:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
 80202a8:	18f9      	adds	r1, r7, r3
 80202aa:	4f5f      	ldr	r7, [pc, #380]	@ (8020428 <PollPllLocked+0x2cc>)
 80202ac:	bf2c      	ite	cs
 80202ae:	f04f 0e01 	movcs.w	lr, #1
 80202b2:	f04f 0e00 	movcc.w	lr, #0
 80202b6:	42b9      	cmp	r1, r7
 80202b8:	d84b      	bhi.n	8020352 <PollPllLocked+0x1f6>
 80202ba:	4607      	mov	r7, r0
 80202bc:	f1be 0f00 	cmp.w	lr, #0
 80202c0:	d14f      	bne.n	8020362 <PollPllLocked+0x206>
 80202c2:	4560      	cmp	r0, ip
 80202c4:	f000 80a1 	beq.w	802040a <PollPllLocked+0x2ae>
 80202c8:	bf34      	ite	cc
 80202ca:	2301      	movcc	r3, #1
 80202cc:	2300      	movcs	r3, #0
 80202ce:	b13b      	cbz	r3, 80202e0 <PollPllLocked+0x184>
 80202d0:	4567      	cmp	r7, ip
 80202d2:	d079      	beq.n	80203c8 <PollPllLocked+0x26c>
 80202d4:	bf34      	ite	cc
 80202d6:	2301      	movcc	r3, #1
 80202d8:	2300      	movcs	r3, #0
 80202da:	f083 0301 	eor.w	r3, r3, #1
 80202de:	bb13      	cbnz	r3, 8020326 <PollPllLocked+0x1ca>
 80202e0:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	@ 0xfa
 80202e4:	f894 10fa 	ldrb.w	r1, [r4, #250]	@ 0xfa
 80202e8:	ba5b      	rev16	r3, r3
 80202ea:	f3c3 1383 	ubfx	r3, r3, #6, #4
 80202ee:	2d00      	cmp	r5, #0
 80202f0:	d04c      	beq.n	802038c <PollPllLocked+0x230>
 80202f2:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80202f4:	f042 0220 	orr.w	r2, r2, #32
 80202f8:	67a2      	str	r2, [r4, #120]	@ 0x78
 80202fa:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80202fc:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8020300:	2500      	movs	r5, #0
 8020302:	67a2      	str	r2, [r4, #120]	@ 0x78
 8020304:	f3c3 0297 	ubfx	r2, r3, #2, #24
 8020308:	f021 0103 	bic.w	r1, r1, #3
 802030c:	4311      	orrs	r1, r2
 802030e:	ea45 1383 	orr.w	r3, r5, r3, lsl #6
 8020312:	f884 10fa 	strb.w	r1, [r4, #250]	@ 0xfa
 8020316:	f884 30fb 	strb.w	r3, [r4, #251]	@ 0xfb
 802031a:	f504 718c 	add.w	r1, r4, #280	@ 0x118
 802031e:	f504 708a 	add.w	r0, r4, #276	@ 0x114
 8020322:	f7e6 ff39 	bl	8007198 <Timer_GetCounterValue>
 8020326:	4621      	mov	r1, r4
 8020328:	230a      	movs	r3, #10
 802032a:	f801 3ff8 	strb.w	r3, [r1, #248]!
 802032e:	4b42      	ldr	r3, [pc, #264]	@ (8020438 <PollPllLocked+0x2dc>)
 8020330:	2200      	movs	r2, #0
 8020332:	e9cd 3400 	strd	r3, r4, [sp]
 8020336:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 802033a:	2305      	movs	r3, #5
 802033c:	f009 fbc4 	bl	8029ac8 <ADS_Transfer>
 8020340:	1e03      	subs	r3, r0, #0
 8020342:	f6bf af50 	bge.w	80201e6 <PollPllLocked+0x8a>
 8020346:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 802034a:	b005      	add	sp, #20
 802034c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8020350:	4718      	bx	r3
 8020352:	1c47      	adds	r7, r0, #1
 8020354:	f5a1 2174 	sub.w	r1, r1, #999424	@ 0xf4000
 8020358:	42b8      	cmp	r0, r7
 802035a:	f5a1 7110 	sub.w	r1, r1, #576	@ 0x240
 802035e:	d3b0      	bcc.n	80202c2 <PollPllLocked+0x166>
 8020360:	2700      	movs	r7, #0
 8020362:	4560      	cmp	r0, ip
 8020364:	d04c      	beq.n	8020400 <PollPllLocked+0x2a4>
 8020366:	bf34      	ite	cc
 8020368:	2301      	movcc	r3, #1
 802036a:	2300      	movcs	r3, #0
 802036c:	2b00      	cmp	r3, #0
 802036e:	d1da      	bne.n	8020326 <PollPllLocked+0x1ca>
 8020370:	45bc      	cmp	ip, r7
 8020372:	d02e      	beq.n	80203d2 <PollPllLocked+0x276>
 8020374:	bf8c      	ite	hi
 8020376:	2301      	movhi	r3, #1
 8020378:	2300      	movls	r3, #0
 802037a:	e7ae      	b.n	80202da <PollPllLocked+0x17e>
 802037c:	428a      	cmp	r2, r1
 802037e:	bf8c      	ite	hi
 8020380:	2200      	movhi	r2, #0
 8020382:	2201      	movls	r2, #1
 8020384:	2a00      	cmp	r2, #0
 8020386:	f47f af0f 	bne.w	80201a8 <PollPllLocked+0x4c>
 802038a:	e75e      	b.n	802024a <PollPllLocked+0xee>
 802038c:	f8b4 204d 	ldrh.w	r2, [r4, #77]	@ 0x4d
 8020390:	ba52      	rev16	r2, r2
 8020392:	f3c2 1283 	ubfx	r2, r2, #6, #4
 8020396:	4293      	cmp	r3, r2
 8020398:	d009      	beq.n	80203ae <PollPllLocked+0x252>
 802039a:	2e00      	cmp	r6, #0
 802039c:	bf08      	it	eq
 802039e:	4613      	moveq	r3, r2
 80203a0:	e7b0      	b.n	8020304 <PollPllLocked+0x1a8>
 80203a2:	4621      	mov	r1, r4
 80203a4:	b005      	add	sp, #20
 80203a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80203aa:	f7ff b833 	b.w	801f414 <WriteRegisterConfiguration>
 80203ae:	f894 204e 	ldrb.w	r2, [r4, #78]	@ 0x4e
 80203b2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80203b6:	4296      	cmp	r6, r2
 80203b8:	d032      	beq.n	8020420 <PollPllLocked+0x2c4>
 80203ba:	da2b      	bge.n	8020414 <PollPllLocked+0x2b8>
 80203bc:	1c75      	adds	r5, r6, #1
 80203be:	42aa      	cmp	r2, r5
 80203c0:	bfa8      	it	ge
 80203c2:	462a      	movge	r2, r5
 80203c4:	b255      	sxtb	r5, r2
 80203c6:	e79d      	b.n	8020304 <PollPllLocked+0x1a8>
 80203c8:	4291      	cmp	r1, r2
 80203ca:	bf8c      	ite	hi
 80203cc:	2300      	movhi	r3, #0
 80203ce:	2301      	movls	r3, #1
 80203d0:	e783      	b.n	80202da <PollPllLocked+0x17e>
 80203d2:	428a      	cmp	r2, r1
 80203d4:	bf34      	ite	cc
 80203d6:	2300      	movcc	r3, #0
 80203d8:	2301      	movcs	r3, #1
 80203da:	e77e      	b.n	80202da <PollPllLocked+0x17e>
 80203dc:	6822      	ldr	r2, [r4, #0]
 80203de:	3271      	adds	r2, #113	@ 0x71
 80203e0:	bf1c      	itt	ne
 80203e2:	f06f 0271 	mvnne.w	r2, #113	@ 0x71
 80203e6:	6022      	strne	r2, [r4, #0]
 80203e8:	f8d4 2104 	ldr.w	r2, [r4, #260]	@ 0x104
 80203ec:	2a00      	cmp	r2, #0
 80203ee:	f43f aefa 	beq.w	80201e6 <PollPllLocked+0x8a>
 80203f2:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 80203f6:	4618      	mov	r0, r3
 80203f8:	b005      	add	sp, #20
 80203fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80203fe:	4710      	bx	r2
 8020400:	4293      	cmp	r3, r2
 8020402:	bf8c      	ite	hi
 8020404:	2300      	movhi	r3, #0
 8020406:	2301      	movls	r3, #1
 8020408:	e7b0      	b.n	802036c <PollPllLocked+0x210>
 802040a:	4293      	cmp	r3, r2
 802040c:	bf8c      	ite	hi
 802040e:	2300      	movhi	r3, #0
 8020410:	2301      	movls	r3, #1
 8020412:	e75c      	b.n	80202ce <PollPllLocked+0x172>
 8020414:	b102      	cbz	r2, 8020418 <PollPllLocked+0x2bc>
 8020416:	1e75      	subs	r5, r6, #1
 8020418:	42aa      	cmp	r2, r5
 802041a:	bfb8      	it	lt
 802041c:	462a      	movlt	r2, r5
 802041e:	e7d1      	b.n	80203c4 <PollPllLocked+0x268>
 8020420:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 8020424:	4628      	mov	r0, r5
 8020426:	e790      	b.n	802034a <PollPllLocked+0x1ee>
 8020428:	000f423f 	.word	0x000f423f
 802042c:	080206b1 	.word	0x080206b1
 8020430:	0802fa90 	.word	0x0802fa90
 8020434:	0801f415 	.word	0x0801f415
 8020438:	0801f035 	.word	0x0801f035

0802043c <VerifyBlockEnable>:
 802043c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802043e:	2800      	cmp	r0, #0
 8020440:	b085      	sub	sp, #20
 8020442:	460c      	mov	r4, r1
 8020444:	f2c0 80f7 	blt.w	8020636 <VerifyBlockEnable+0x1fa>
 8020448:	f891 2089 	ldrb.w	r2, [r1, #137]	@ 0x89
 802044c:	f891 3058 	ldrb.w	r3, [r1, #88]	@ 0x58
 8020450:	f012 0001 	ands.w	r0, r2, #1
 8020454:	d058      	beq.n	8020508 <VerifyBlockEnable+0xcc>
 8020456:	07d9      	lsls	r1, r3, #31
 8020458:	d556      	bpl.n	8020508 <VerifyBlockEnable+0xcc>
 802045a:	4053      	eors	r3, r2
 802045c:	f013 0fef 	tst.w	r3, #239	@ 0xef
 8020460:	bf0c      	ite	eq
 8020462:	2301      	moveq	r3, #1
 8020464:	2300      	movne	r3, #0
 8020466:	2b00      	cmp	r3, #0
 8020468:	f000 80bb 	beq.w	80205e2 <VerifyBlockEnable+0x1a6>
 802046c:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 802046e:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 8020472:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8020476:	06d2      	lsls	r2, r2, #27
 8020478:	67a1      	str	r1, [r4, #120]	@ 0x78
 802047a:	f003 0110 	and.w	r1, r3, #16
 802047e:	d448      	bmi.n	8020512 <VerifyBlockEnable+0xd6>
 8020480:	f023 0310 	bic.w	r3, r3, #16
 8020484:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8020486:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 802048a:	6fa6      	ldr	r6, [r4, #120]	@ 0x78
 802048c:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 802048e:	4b84      	ldr	r3, [pc, #528]	@ (80206a0 <VerifyBlockEnable+0x264>)
 8020490:	f006 7600 	and.w	r6, r6, #33554432	@ 0x2000000
 8020494:	f000 0020 	and.w	r0, r0, #32
 8020498:	4330      	orrs	r0, r6
 802049a:	e9c4 3443 	strd	r3, r4, [r4, #268]	@ 0x10c
 802049e:	d052      	beq.n	8020546 <VerifyBlockEnable+0x10a>
 80204a0:	f894 70fb 	ldrb.w	r7, [r4, #251]	@ 0xfb
 80204a4:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
 80204a8:	f007 073f 	and.w	r7, r7, #63	@ 0x3f
 80204ac:	2f09      	cmp	r7, #9
 80204ae:	a903      	add	r1, sp, #12
 80204b0:	a802      	add	r0, sp, #8
 80204b2:	bf94      	ite	ls
 80204b4:	8bdd      	ldrhls	r5, [r3, #30]
 80204b6:	8c1d      	ldrhhi	r5, [r3, #32]
 80204b8:	f7e6 fe6e 	bl	8007198 <Timer_GetCounterValue>
 80204bc:	f8d4 1118 	ldr.w	r1, [r4, #280]	@ 0x118
 80204c0:	f8dd c008 	ldr.w	ip, [sp, #8]
 80204c4:	9a03      	ldr	r2, [sp, #12]
 80204c6:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
 80204ca:	186b      	adds	r3, r5, r1
 80204cc:	4d75      	ldr	r5, [pc, #468]	@ (80206a4 <VerifyBlockEnable+0x268>)
 80204ce:	bf2c      	ite	cs
 80204d0:	f04f 0e01 	movcs.w	lr, #1
 80204d4:	f04f 0e00 	movcc.w	lr, #0
 80204d8:	42ab      	cmp	r3, r5
 80204da:	d93a      	bls.n	8020552 <VerifyBlockEnable+0x116>
 80204dc:	1c45      	adds	r5, r0, #1
 80204de:	f5a3 2374 	sub.w	r3, r3, #999424	@ 0xf4000
 80204e2:	42a8      	cmp	r0, r5
 80204e4:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80204e8:	d237      	bcs.n	802055a <VerifyBlockEnable+0x11e>
 80204ea:	4560      	cmp	r0, ip
 80204ec:	f000 80bc 	beq.w	8020668 <VerifyBlockEnable+0x22c>
 80204f0:	bf34      	ite	cc
 80204f2:	2101      	movcc	r1, #1
 80204f4:	2100      	movcs	r1, #0
 80204f6:	2900      	cmp	r1, #0
 80204f8:	d04f      	beq.n	802059a <VerifyBlockEnable+0x15e>
 80204fa:	4565      	cmp	r5, ip
 80204fc:	f000 80af 	beq.w	802065e <VerifyBlockEnable+0x222>
 8020500:	bf34      	ite	cc
 8020502:	2301      	movcc	r3, #1
 8020504:	2300      	movcs	r3, #0
 8020506:	e044      	b.n	8020592 <VerifyBlockEnable+0x156>
 8020508:	1ad3      	subs	r3, r2, r3
 802050a:	fab3 f383 	clz	r3, r3
 802050e:	095b      	lsrs	r3, r3, #5
 8020510:	e7a9      	b.n	8020466 <VerifyBlockEnable+0x2a>
 8020512:	2800      	cmp	r0, #0
 8020514:	d1b4      	bne.n	8020480 <VerifyBlockEnable+0x44>
 8020516:	f043 0310 	orr.w	r3, r3, #16
 802051a:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 802051c:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 8020520:	b109      	cbz	r1, 8020526 <VerifyBlockEnable+0xea>
 8020522:	0153      	lsls	r3, r2, #5
 8020524:	d5b1      	bpl.n	802048a <VerifyBlockEnable+0x4e>
 8020526:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8020528:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 802052c:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 8020530:	f104 0184 	add.w	r1, r4, #132	@ 0x84
 8020534:	67a3      	str	r3, [r4, #120]	@ 0x78
 8020536:	f7e6 fe2f 	bl	8007198 <Timer_GetCounterValue>
 802053a:	4620      	mov	r0, r4
 802053c:	b005      	add	sp, #20
 802053e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8020542:	f7ff be0b 	b.w	802015c <PollPllLocked>
 8020546:	4621      	mov	r1, r4
 8020548:	b005      	add	sp, #20
 802054a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 802054e:	f7fe bf61 	b.w	801f414 <WriteRegisterConfiguration>
 8020552:	4605      	mov	r5, r0
 8020554:	f1be 0f00 	cmp.w	lr, #0
 8020558:	d0c7      	beq.n	80204ea <VerifyBlockEnable+0xae>
 802055a:	4560      	cmp	r0, ip
 802055c:	d012      	beq.n	8020584 <VerifyBlockEnable+0x148>
 802055e:	d213      	bcs.n	8020588 <VerifyBlockEnable+0x14c>
 8020560:	4621      	mov	r1, r4
 8020562:	230a      	movs	r3, #10
 8020564:	f801 3ff8 	strb.w	r3, [r1, #248]!
 8020568:	4b4f      	ldr	r3, [pc, #316]	@ (80206a8 <VerifyBlockEnable+0x26c>)
 802056a:	2200      	movs	r2, #0
 802056c:	e9cd 3400 	strd	r3, r4, [sp]
 8020570:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 8020574:	2305      	movs	r3, #5
 8020576:	f009 faa7 	bl	8029ac8 <ADS_Transfer>
 802057a:	1e03      	subs	r3, r0, #0
 802057c:	db6c      	blt.n	8020658 <VerifyBlockEnable+0x21c>
 802057e:	4618      	mov	r0, r3
 8020580:	b005      	add	sp, #20
 8020582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020584:	428a      	cmp	r2, r1
 8020586:	d2eb      	bcs.n	8020560 <VerifyBlockEnable+0x124>
 8020588:	45ac      	cmp	ip, r5
 802058a:	d068      	beq.n	802065e <VerifyBlockEnable+0x222>
 802058c:	bf8c      	ite	hi
 802058e:	2301      	movhi	r3, #1
 8020590:	2300      	movls	r3, #0
 8020592:	f083 0301 	eor.w	r3, r3, #1
 8020596:	2b00      	cmp	r3, #0
 8020598:	d1e2      	bne.n	8020560 <VerifyBlockEnable+0x124>
 802059a:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	@ 0xfa
 802059e:	f894 10fa 	ldrb.w	r1, [r4, #250]	@ 0xfa
 80205a2:	ba5b      	rev16	r3, r3
 80205a4:	f3c3 1383 	ubfx	r3, r3, #6, #4
 80205a8:	2e00      	cmp	r6, #0
 80205aa:	d039      	beq.n	8020620 <VerifyBlockEnable+0x1e4>
 80205ac:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80205ae:	f042 0220 	orr.w	r2, r2, #32
 80205b2:	67a2      	str	r2, [r4, #120]	@ 0x78
 80205b4:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80205b6:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80205ba:	2600      	movs	r6, #0
 80205bc:	67a2      	str	r2, [r4, #120]	@ 0x78
 80205be:	f3c3 0297 	ubfx	r2, r3, #2, #24
 80205c2:	f021 0103 	bic.w	r1, r1, #3
 80205c6:	4311      	orrs	r1, r2
 80205c8:	ea46 1383 	orr.w	r3, r6, r3, lsl #6
 80205cc:	f884 10fa 	strb.w	r1, [r4, #250]	@ 0xfa
 80205d0:	f884 30fb 	strb.w	r3, [r4, #251]	@ 0xfb
 80205d4:	f504 718c 	add.w	r1, r4, #280	@ 0x118
 80205d8:	f504 708a 	add.w	r0, r4, #276	@ 0x114
 80205dc:	f7e6 fddc 	bl	8007198 <Timer_GetCounterValue>
 80205e0:	e7be      	b.n	8020560 <VerifyBlockEnable+0x124>
 80205e2:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 80205e4:	4a31      	ldr	r2, [pc, #196]	@ (80206ac <VerifyBlockEnable+0x270>)
 80205e6:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 80205ea:	430a      	orrs	r2, r1
 80205ec:	67a2      	str	r2, [r4, #120]	@ 0x78
 80205ee:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80205f0:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80205f4:	67a2      	str	r2, [r4, #120]	@ 0x78
 80205f6:	6822      	ldr	r2, [r4, #0]
 80205f8:	f043 0302 	orr.w	r3, r3, #2
 80205fc:	3271      	adds	r2, #113	@ 0x71
 80205fe:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 8020602:	bf1c      	itt	ne
 8020604:	f06f 0371 	mvnne.w	r3, #113	@ 0x71
 8020608:	6023      	strne	r3, [r4, #0]
 802060a:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 802060e:	b303      	cbz	r3, 8020652 <VerifyBlockEnable+0x216>
 8020610:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 8020614:	f06f 0071 	mvn.w	r0, #113	@ 0x71
 8020618:	b005      	add	sp, #20
 802061a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 802061e:	4718      	bx	r3
 8020620:	f8b4 204d 	ldrh.w	r2, [r4, #77]	@ 0x4d
 8020624:	ba52      	rev16	r2, r2
 8020626:	f3c2 1283 	ubfx	r2, r2, #6, #4
 802062a:	4293      	cmp	r3, r2
 802062c:	d021      	beq.n	8020672 <VerifyBlockEnable+0x236>
 802062e:	2f00      	cmp	r7, #0
 8020630:	bf08      	it	eq
 8020632:	4613      	moveq	r3, r2
 8020634:	e7c3      	b.n	80205be <VerifyBlockEnable+0x182>
 8020636:	680b      	ldr	r3, [r1, #0]
 8020638:	3371      	adds	r3, #113	@ 0x71
 802063a:	bf1c      	itt	ne
 802063c:	f06f 0371 	mvnne.w	r3, #113	@ 0x71
 8020640:	600b      	strne	r3, [r1, #0]
 8020642:	f8d1 3104 	ldr.w	r3, [r1, #260]	@ 0x104
 8020646:	b113      	cbz	r3, 802064e <VerifyBlockEnable+0x212>
 8020648:	f8d1 1108 	ldr.w	r1, [r1, #264]	@ 0x108
 802064c:	e7e4      	b.n	8020618 <VerifyBlockEnable+0x1dc>
 802064e:	4603      	mov	r3, r0
 8020650:	e795      	b.n	802057e <VerifyBlockEnable+0x142>
 8020652:	f06f 0371 	mvn.w	r3, #113	@ 0x71
 8020656:	e792      	b.n	802057e <VerifyBlockEnable+0x142>
 8020658:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 802065c:	e7dc      	b.n	8020618 <VerifyBlockEnable+0x1dc>
 802065e:	429a      	cmp	r2, r3
 8020660:	bf34      	ite	cc
 8020662:	2300      	movcc	r3, #0
 8020664:	2301      	movcs	r3, #1
 8020666:	e794      	b.n	8020592 <VerifyBlockEnable+0x156>
 8020668:	428a      	cmp	r2, r1
 802066a:	bf34      	ite	cc
 802066c:	2100      	movcc	r1, #0
 802066e:	2101      	movcs	r1, #1
 8020670:	e741      	b.n	80204f6 <VerifyBlockEnable+0xba>
 8020672:	f894 204e 	ldrb.w	r2, [r4, #78]	@ 0x4e
 8020676:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 802067a:	4297      	cmp	r7, r2
 802067c:	d00c      	beq.n	8020698 <VerifyBlockEnable+0x25c>
 802067e:	da05      	bge.n	802068c <VerifyBlockEnable+0x250>
 8020680:	1c7e      	adds	r6, r7, #1
 8020682:	42b2      	cmp	r2, r6
 8020684:	bfa8      	it	ge
 8020686:	4632      	movge	r2, r6
 8020688:	b256      	sxtb	r6, r2
 802068a:	e798      	b.n	80205be <VerifyBlockEnable+0x182>
 802068c:	b102      	cbz	r2, 8020690 <VerifyBlockEnable+0x254>
 802068e:	1e7e      	subs	r6, r7, #1
 8020690:	42b2      	cmp	r2, r6
 8020692:	bfb8      	it	lt
 8020694:	4632      	movlt	r2, r6
 8020696:	e7f7      	b.n	8020688 <VerifyBlockEnable+0x24c>
 8020698:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 802069c:	4630      	mov	r0, r6
 802069e:	e7bb      	b.n	8020618 <VerifyBlockEnable+0x1dc>
 80206a0:	0801f415 	.word	0x0801f415
 80206a4:	000f423f 	.word	0x000f423f
 80206a8:	0801f035 	.word	0x0801f035
 80206ac:	0003dffe 	.word	0x0003dffe

080206b0 <CheckPllLocked>:
 80206b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80206b2:	2800      	cmp	r0, #0
 80206b4:	b085      	sub	sp, #20
 80206b6:	460c      	mov	r4, r1
 80206b8:	f2c0 8099 	blt.w	80207ee <CheckPllLocked+0x13e>
 80206bc:	f891 308a 	ldrb.w	r3, [r1, #138]	@ 0x8a
 80206c0:	f8d1 2100 	ldr.w	r2, [r1, #256]	@ 0x100
 80206c4:	0658      	lsls	r0, r3, #25
 80206c6:	f140 8086 	bpl.w	80207d6 <CheckPllLocked+0x126>
 80206ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80206ce:	f8c1 2100 	str.w	r2, [r1, #256]	@ 0x100
 80206d2:	069a      	lsls	r2, r3, #26
 80206d4:	f140 80af 	bpl.w	8020836 <CheckPllLocked+0x186>
 80206d8:	4886      	ldr	r0, [pc, #536]	@ (80208f4 <CheckPllLocked+0x244>)
 80206da:	f891 30fd 	ldrb.w	r3, [r1, #253]	@ 0xfd
 80206de:	6f8e      	ldr	r6, [r1, #120]	@ 0x78
 80206e0:	f891 2064 	ldrb.w	r2, [r1, #100]	@ 0x64
 80206e4:	f8c1 010c 	str.w	r0, [r1, #268]	@ 0x10c
 80206e8:	6f88      	ldr	r0, [r1, #120]	@ 0x78
 80206ea:	f002 0203 	and.w	r2, r2, #3
 80206ee:	f023 030c 	bic.w	r3, r3, #12
 80206f2:	f006 7600 	and.w	r6, r6, #33554432	@ 0x2000000
 80206f6:	f000 0020 	and.w	r0, r0, #32
 80206fa:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 80206fe:	4330      	orrs	r0, r6
 8020700:	f881 30fd 	strb.w	r3, [r1, #253]	@ 0xfd
 8020704:	f8c4 1110 	str.w	r1, [r4, #272]	@ 0x110
 8020708:	f000 80bc 	beq.w	8020884 <CheckPllLocked+0x1d4>
 802070c:	f891 70fb 	ldrb.w	r7, [r1, #251]	@ 0xfb
 8020710:	f8d1 311c 	ldr.w	r3, [r1, #284]	@ 0x11c
 8020714:	f007 073f 	and.w	r7, r7, #63	@ 0x3f
 8020718:	2f09      	cmp	r7, #9
 802071a:	a903      	add	r1, sp, #12
 802071c:	a802      	add	r0, sp, #8
 802071e:	bf94      	ite	ls
 8020720:	8bdd      	ldrhls	r5, [r3, #30]
 8020722:	8c1d      	ldrhhi	r5, [r3, #32]
 8020724:	f7e6 fd38 	bl	8007198 <Timer_GetCounterValue>
 8020728:	f8d4 2118 	ldr.w	r2, [r4, #280]	@ 0x118
 802072c:	f8dd c008 	ldr.w	ip, [sp, #8]
 8020730:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8020734:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
 8020738:	18ab      	adds	r3, r5, r2
 802073a:	4d6f      	ldr	r5, [pc, #444]	@ (80208f8 <CheckPllLocked+0x248>)
 802073c:	bf2c      	ite	cs
 802073e:	2101      	movcs	r1, #1
 8020740:	2100      	movcc	r1, #0
 8020742:	42ab      	cmp	r3, r5
 8020744:	d862      	bhi.n	802080c <CheckPllLocked+0x15c>
 8020746:	f081 0101 	eor.w	r1, r1, #1
 802074a:	4605      	mov	r5, r0
 802074c:	2900      	cmp	r1, #0
 802074e:	d06b      	beq.n	8020828 <CheckPllLocked+0x178>
 8020750:	4560      	cmp	r0, ip
 8020752:	f000 80bb 	beq.w	80208cc <CheckPllLocked+0x21c>
 8020756:	bf34      	ite	cc
 8020758:	2201      	movcc	r2, #1
 802075a:	2200      	movcs	r2, #0
 802075c:	b132      	cbz	r2, 802076c <CheckPllLocked+0xbc>
 802075e:	4565      	cmp	r5, ip
 8020760:	f000 80a5 	beq.w	80208ae <CheckPllLocked+0x1fe>
 8020764:	bf34      	ite	cc
 8020766:	2301      	movcc	r3, #1
 8020768:	2300      	movcs	r3, #0
 802076a:	b313      	cbz	r3, 80207b2 <CheckPllLocked+0x102>
 802076c:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	@ 0xfa
 8020770:	f894 10fa 	ldrb.w	r1, [r4, #250]	@ 0xfa
 8020774:	ba5b      	rev16	r3, r3
 8020776:	f3c3 1383 	ubfx	r3, r3, #6, #4
 802077a:	2e00      	cmp	r6, #0
 802077c:	d077      	beq.n	802086e <CheckPllLocked+0x1be>
 802077e:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8020780:	f042 0220 	orr.w	r2, r2, #32
 8020784:	67a2      	str	r2, [r4, #120]	@ 0x78
 8020786:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8020788:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 802078c:	2600      	movs	r6, #0
 802078e:	67a2      	str	r2, [r4, #120]	@ 0x78
 8020790:	f3c3 0297 	ubfx	r2, r3, #2, #24
 8020794:	f021 0103 	bic.w	r1, r1, #3
 8020798:	4311      	orrs	r1, r2
 802079a:	ea46 1383 	orr.w	r3, r6, r3, lsl #6
 802079e:	f884 10fa 	strb.w	r1, [r4, #250]	@ 0xfa
 80207a2:	f884 30fb 	strb.w	r3, [r4, #251]	@ 0xfb
 80207a6:	f504 718c 	add.w	r1, r4, #280	@ 0x118
 80207aa:	f504 708a 	add.w	r0, r4, #276	@ 0x114
 80207ae:	f7e6 fcf3 	bl	8007198 <Timer_GetCounterValue>
 80207b2:	4621      	mov	r1, r4
 80207b4:	230a      	movs	r3, #10
 80207b6:	f801 3ff8 	strb.w	r3, [r1, #248]!
 80207ba:	4b50      	ldr	r3, [pc, #320]	@ (80208fc <CheckPllLocked+0x24c>)
 80207bc:	2200      	movs	r2, #0
 80207be:	e9cd 3400 	strd	r3, r4, [sp]
 80207c2:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 80207c6:	2305      	movs	r3, #5
 80207c8:	f009 f97e 	bl	8029ac8 <ADS_Transfer>
 80207cc:	1e03      	subs	r3, r0, #0
 80207ce:	db76      	blt.n	80208be <CheckPllLocked+0x20e>
 80207d0:	4618      	mov	r0, r3
 80207d2:	b005      	add	sp, #20
 80207d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80207d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80207da:	069b      	lsls	r3, r3, #26
 80207dc:	f8c1 2100 	str.w	r2, [r1, #256]	@ 0x100
 80207e0:	d529      	bpl.n	8020836 <CheckPllLocked+0x186>
 80207e2:	4608      	mov	r0, r1
 80207e4:	b005      	add	sp, #20
 80207e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80207ea:	f7ff bcb7 	b.w	802015c <PollPllLocked>
 80207ee:	680b      	ldr	r3, [r1, #0]
 80207f0:	3371      	adds	r3, #113	@ 0x71
 80207f2:	bf1c      	itt	ne
 80207f4:	f06f 0371 	mvnne.w	r3, #113	@ 0x71
 80207f8:	600b      	strne	r3, [r1, #0]
 80207fa:	f8d1 3104 	ldr.w	r3, [r1, #260]	@ 0x104
 80207fe:	b17b      	cbz	r3, 8020820 <CheckPllLocked+0x170>
 8020800:	f8d1 1108 	ldr.w	r1, [r1, #264]	@ 0x108
 8020804:	b005      	add	sp, #20
 8020806:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 802080a:	4718      	bx	r3
 802080c:	1c45      	adds	r5, r0, #1
 802080e:	42a8      	cmp	r0, r5
 8020810:	f5a3 2374 	sub.w	r3, r3, #999424	@ 0xf4000
 8020814:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8020818:	bf2c      	ite	cs
 802081a:	2100      	movcs	r1, #0
 802081c:	2101      	movcc	r1, #1
 802081e:	e795      	b.n	802074c <CheckPllLocked+0x9c>
 8020820:	4603      	mov	r3, r0
 8020822:	4618      	mov	r0, r3
 8020824:	b005      	add	sp, #20
 8020826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020828:	4560      	cmp	r0, ip
 802082a:	d04b      	beq.n	80208c4 <CheckPllLocked+0x214>
 802082c:	d3c1      	bcc.n	80207b2 <CheckPllLocked+0x102>
 802082e:	4565      	cmp	r5, ip
 8020830:	d051      	beq.n	80208d6 <CheckPllLocked+0x226>
 8020832:	d2be      	bcs.n	80207b2 <CheckPllLocked+0x102>
 8020834:	e79a      	b.n	802076c <CheckPllLocked+0xbc>
 8020836:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8020838:	4a31      	ldr	r2, [pc, #196]	@ (8020900 <CheckPllLocked+0x250>)
 802083a:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 802083e:	430a      	orrs	r2, r1
 8020840:	67a2      	str	r2, [r4, #120]	@ 0x78
 8020842:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8020844:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8020848:	67a2      	str	r2, [r4, #120]	@ 0x78
 802084a:	6822      	ldr	r2, [r4, #0]
 802084c:	f043 0302 	orr.w	r3, r3, #2
 8020850:	3271      	adds	r2, #113	@ 0x71
 8020852:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 8020856:	bf1c      	itt	ne
 8020858:	f06f 0371 	mvnne.w	r3, #113	@ 0x71
 802085c:	6023      	strne	r3, [r4, #0]
 802085e:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 8020862:	b1a3      	cbz	r3, 802088e <CheckPllLocked+0x1de>
 8020864:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 8020868:	f06f 0071 	mvn.w	r0, #113	@ 0x71
 802086c:	e7ca      	b.n	8020804 <CheckPllLocked+0x154>
 802086e:	f8b4 204d 	ldrh.w	r2, [r4, #77]	@ 0x4d
 8020872:	ba52      	rev16	r2, r2
 8020874:	f3c2 1283 	ubfx	r2, r2, #6, #4
 8020878:	4293      	cmp	r3, r2
 802087a:	d00b      	beq.n	8020894 <CheckPllLocked+0x1e4>
 802087c:	2f00      	cmp	r7, #0
 802087e:	bf08      	it	eq
 8020880:	4613      	moveq	r3, r2
 8020882:	e785      	b.n	8020790 <CheckPllLocked+0xe0>
 8020884:	b005      	add	sp, #20
 8020886:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 802088a:	f7fe bdc3 	b.w	801f414 <WriteRegisterConfiguration>
 802088e:	f06f 0371 	mvn.w	r3, #113	@ 0x71
 8020892:	e79d      	b.n	80207d0 <CheckPllLocked+0x120>
 8020894:	f894 204e 	ldrb.w	r2, [r4, #78]	@ 0x4e
 8020898:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 802089c:	4297      	cmp	r7, r2
 802089e:	d024      	beq.n	80208ea <CheckPllLocked+0x23a>
 80208a0:	da1d      	bge.n	80208de <CheckPllLocked+0x22e>
 80208a2:	1c7e      	adds	r6, r7, #1
 80208a4:	42b2      	cmp	r2, r6
 80208a6:	bfa8      	it	ge
 80208a8:	4632      	movge	r2, r6
 80208aa:	b256      	sxtb	r6, r2
 80208ac:	e770      	b.n	8020790 <CheckPllLocked+0xe0>
 80208ae:	4573      	cmp	r3, lr
 80208b0:	bf8c      	ite	hi
 80208b2:	2300      	movhi	r3, #0
 80208b4:	2301      	movls	r3, #1
 80208b6:	2b00      	cmp	r3, #0
 80208b8:	f47f af58 	bne.w	802076c <CheckPllLocked+0xbc>
 80208bc:	e779      	b.n	80207b2 <CheckPllLocked+0x102>
 80208be:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 80208c2:	e79f      	b.n	8020804 <CheckPllLocked+0x154>
 80208c4:	4572      	cmp	r2, lr
 80208c6:	f67f af74 	bls.w	80207b2 <CheckPllLocked+0x102>
 80208ca:	e7b0      	b.n	802082e <CheckPllLocked+0x17e>
 80208cc:	4572      	cmp	r2, lr
 80208ce:	bf8c      	ite	hi
 80208d0:	2200      	movhi	r2, #0
 80208d2:	2201      	movls	r2, #1
 80208d4:	e742      	b.n	802075c <CheckPllLocked+0xac>
 80208d6:	4573      	cmp	r3, lr
 80208d8:	f67f af48 	bls.w	802076c <CheckPllLocked+0xbc>
 80208dc:	e769      	b.n	80207b2 <CheckPllLocked+0x102>
 80208de:	b102      	cbz	r2, 80208e2 <CheckPllLocked+0x232>
 80208e0:	1e7e      	subs	r6, r7, #1
 80208e2:	42b2      	cmp	r2, r6
 80208e4:	bfb8      	it	lt
 80208e6:	4632      	movlt	r2, r6
 80208e8:	e7df      	b.n	80208aa <CheckPllLocked+0x1fa>
 80208ea:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 80208ee:	4630      	mov	r0, r6
 80208f0:	e788      	b.n	8020804 <CheckPllLocked+0x154>
 80208f2:	bf00      	nop
 80208f4:	0801f415 	.word	0x0801f415
 80208f8:	000f423f 	.word	0x000f423f
 80208fc:	0801f035 	.word	0x0801f035
 8020900:	0003dffe 	.word	0x0003dffe

08020904 <Argus_Dev_TestConnection>:
 8020904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020908:	2300      	movs	r3, #0
 802090a:	f8b0 1055 	ldrh.w	r1, [r0, #85]	@ 0x55
 802090e:	f8a0 1089 	strh.w	r1, [r0, #137]	@ 0x89
 8020912:	f100 0588 	add.w	r5, r0, #136	@ 0x88
 8020916:	b082      	sub	sp, #8
 8020918:	220e      	movs	r2, #14
 802091a:	f500 7690 	add.w	r6, r0, #288	@ 0x120
 802091e:	f880 2088 	strb.w	r2, [r0, #136]	@ 0x88
 8020922:	4604      	mov	r4, r0
 8020924:	e9cd 3300 	strd	r3, r3, [sp]
 8020928:	462a      	mov	r2, r5
 802092a:	2303      	movs	r3, #3
 802092c:	4629      	mov	r1, r5
 802092e:	4630      	mov	r0, r6
 8020930:	f009 f8ca 	bl	8029ac8 <ADS_Transfer>
 8020934:	2800      	cmp	r0, #0
 8020936:	db3c      	blt.n	80209b2 <Argus_Dev_TestConnection+0xae>
 8020938:	2164      	movs	r1, #100	@ 0x64
 802093a:	4630      	mov	r0, r6
 802093c:	f008 ffa8 	bl	8029890 <ADS_AwaitIdle>
 8020940:	2800      	cmp	r0, #0
 8020942:	db36      	blt.n	80209b2 <Argus_Dev_TestConnection+0xae>
 8020944:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 8020948:	f894 2089 	ldrb.w	r2, [r4, #137]	@ 0x89
 802094c:	f003 031f 	and.w	r3, r3, #31
 8020950:	f022 011f 	bic.w	r1, r2, #31
 8020954:	430b      	orrs	r3, r1
 8020956:	429a      	cmp	r2, r3
 8020958:	f104 0789 	add.w	r7, r4, #137	@ 0x89
 802095c:	f104 0855 	add.w	r8, r4, #85	@ 0x55
 8020960:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 8020964:	d028      	beq.n	80209b8 <Argus_Dev_TestConnection+0xb4>
 8020966:	2300      	movs	r3, #0
 8020968:	e9cd 3300 	strd	r3, r3, [sp]
 802096c:	230e      	movs	r3, #14
 802096e:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
 8020972:	462a      	mov	r2, r5
 8020974:	2303      	movs	r3, #3
 8020976:	4629      	mov	r1, r5
 8020978:	4630      	mov	r0, r6
 802097a:	f009 f8a5 	bl	8029ac8 <ADS_Transfer>
 802097e:	2800      	cmp	r0, #0
 8020980:	db17      	blt.n	80209b2 <Argus_Dev_TestConnection+0xae>
 8020982:	2164      	movs	r1, #100	@ 0x64
 8020984:	4630      	mov	r0, r6
 8020986:	f008 ff83 	bl	8029890 <ADS_AwaitIdle>
 802098a:	2800      	cmp	r0, #0
 802098c:	db11      	blt.n	80209b2 <Argus_Dev_TestConnection+0xae>
 802098e:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 8020992:	f894 2089 	ldrb.w	r2, [r4, #137]	@ 0x89
 8020996:	f003 031f 	and.w	r3, r3, #31
 802099a:	f022 011f 	bic.w	r1, r2, #31
 802099e:	430b      	orrs	r3, r1
 80209a0:	429a      	cmp	r2, r3
 80209a2:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 80209a6:	d00d      	beq.n	80209c4 <Argus_Dev_TestConnection+0xc0>
 80209a8:	4809      	ldr	r0, [pc, #36]	@ (80209d0 <Argus_Dev_TestConnection+0xcc>)
 80209aa:	f7e5 fdaf 	bl	800650c <print>
 80209ae:	f06f 0064 	mvn.w	r0, #100	@ 0x64
 80209b2:	b002      	add	sp, #8
 80209b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80209b8:	787a      	ldrb	r2, [r7, #1]
 80209ba:	f898 3001 	ldrb.w	r3, [r8, #1]
 80209be:	429a      	cmp	r2, r3
 80209c0:	d1d1      	bne.n	8020966 <Argus_Dev_TestConnection+0x62>
 80209c2:	e7f6      	b.n	80209b2 <Argus_Dev_TestConnection+0xae>
 80209c4:	787a      	ldrb	r2, [r7, #1]
 80209c6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80209ca:	429a      	cmp	r2, r3
 80209cc:	d1ec      	bne.n	80209a8 <Argus_Dev_TestConnection+0xa4>
 80209ce:	e7f0      	b.n	80209b2 <Argus_Dev_TestConnection+0xae>
 80209d0:	0802fae0 	.word	0x0802fae0

080209d4 <Argus_Dev_Init>:
 80209d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80209d8:	4604      	mov	r4, r0
 80209da:	b084      	sub	sp, #16
 80209dc:	460d      	mov	r5, r1
 80209de:	4616      	mov	r6, r2
 80209e0:	2100      	movs	r1, #0
 80209e2:	f44f 72ec 	mov.w	r2, #472	@ 0x1d8
 80209e6:	461f      	mov	r7, r3
 80209e8:	f504 7890 	add.w	r8, r4, #288	@ 0x120
 80209ec:	f00a fadd 	bl	802afaa <memset>
 80209f0:	2303      	movs	r3, #3
 80209f2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80209f4:	6023      	str	r3, [r4, #0]
 80209f6:	f8c4 51d4 	str.w	r5, [r4, #468]	@ 0x1d4
 80209fa:	f8c4 711c 	str.w	r7, [r4, #284]	@ 0x11c
 80209fe:	4640      	mov	r0, r8
 8020a00:	f008 fc5a 	bl	80292b8 <ADS_Init>
 8020a04:	2800      	cmp	r0, #0
 8020a06:	db3e      	blt.n	8020a86 <Argus_Dev_Init+0xb2>
 8020a08:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020a0a:	9000      	str	r0, [sp, #0]
 8020a0c:	463b      	mov	r3, r7
 8020a0e:	4632      	mov	r2, r6
 8020a10:	4621      	mov	r1, r4
 8020a12:	f504 70b4 	add.w	r0, r4, #360	@ 0x168
 8020a16:	f7fb fe43 	bl	801c6a0 <Argus_Dca_Init>
 8020a1a:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8020a1c:	4a89      	ldr	r2, [pc, #548]	@ (8020c44 <Argus_Dev_Init+0x270>)
 8020a1e:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 8020a22:	430a      	orrs	r2, r1
 8020a24:	67a2      	str	r2, [r4, #120]	@ 0x78
 8020a26:	f043 0302 	orr.w	r3, r3, #2
 8020a2a:	22bf      	movs	r2, #191	@ 0xbf
 8020a2c:	6825      	ldr	r5, [r4, #0]
 8020a2e:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 8020a32:	6022      	str	r2, [r4, #0]
 8020a34:	4620      	mov	r0, r4
 8020a36:	f7ff ff65 	bl	8020904 <Argus_Dev_TestConnection>
 8020a3a:	2800      	cmp	r0, #0
 8020a3c:	6025      	str	r5, [r4, #0]
 8020a3e:	f000 80a5 	beq.w	8020b8c <Argus_Dev_Init+0x1b8>
 8020a42:	da0e      	bge.n	8020a62 <Argus_Dev_Init+0x8e>
 8020a44:	f06f 0364 	mvn.w	r3, #100	@ 0x64
 8020a48:	6023      	str	r3, [r4, #0]
 8020a4a:	b004      	add	sp, #16
 8020a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020a50:	7aa3      	ldrb	r3, [r4, #10]
 8020a52:	2202      	movs	r2, #2
 8020a54:	2b07      	cmp	r3, #7
 8020a56:	7222      	strb	r2, [r4, #8]
 8020a58:	f200 80aa 	bhi.w	8020bb0 <Argus_Dev_Init+0x1dc>
 8020a5c:	2b01      	cmp	r3, #1
 8020a5e:	f200 80ab 	bhi.w	8020bb8 <Argus_Dev_Init+0x1e4>
 8020a62:	4b79      	ldr	r3, [pc, #484]	@ (8020c48 <Argus_Dev_Init+0x274>)
 8020a64:	681b      	ldr	r3, [r3, #0]
 8020a66:	f8ad 3008 	strh.w	r3, [sp, #8]
 8020a6a:	0c1a      	lsrs	r2, r3, #16
 8020a6c:	f88d 200a 	strb.w	r2, [sp, #10]
 8020a70:	2500      	movs	r5, #0
 8020a72:	aa02      	add	r2, sp, #8
 8020a74:	e9cd 5500 	strd	r5, r5, [sp]
 8020a78:	2303      	movs	r3, #3
 8020a7a:	4611      	mov	r1, r2
 8020a7c:	4640      	mov	r0, r8
 8020a7e:	f009 f823 	bl	8029ac8 <ADS_Transfer>
 8020a82:	2800      	cmp	r0, #0
 8020a84:	da05      	bge.n	8020a92 <Argus_Dev_Init+0xbe>
 8020a86:	f06f 0306 	mvn.w	r3, #6
 8020a8a:	6023      	str	r3, [r4, #0]
 8020a8c:	b004      	add	sp, #16
 8020a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020a92:	2164      	movs	r1, #100	@ 0x64
 8020a94:	4640      	mov	r0, r8
 8020a96:	f008 fefb 	bl	8029890 <ADS_AwaitIdle>
 8020a9a:	2800      	cmp	r0, #0
 8020a9c:	dbf3      	blt.n	8020a86 <Argus_Dev_Init+0xb2>
 8020a9e:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8020aa2:	9501      	str	r5, [sp, #4]
 8020aa4:	f043 0320 	orr.w	r3, r3, #32
 8020aa8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8020aac:	f88d 300a 	strb.w	r3, [sp, #10]
 8020ab0:	aa02      	add	r2, sp, #8
 8020ab2:	2312      	movs	r3, #18
 8020ab4:	f88d 3008 	strb.w	r3, [sp, #8]
 8020ab8:	9500      	str	r5, [sp, #0]
 8020aba:	2303      	movs	r3, #3
 8020abc:	4611      	mov	r1, r2
 8020abe:	4640      	mov	r0, r8
 8020ac0:	f009 f802 	bl	8029ac8 <ADS_Transfer>
 8020ac4:	2800      	cmp	r0, #0
 8020ac6:	dbde      	blt.n	8020a86 <Argus_Dev_Init+0xb2>
 8020ac8:	2164      	movs	r1, #100	@ 0x64
 8020aca:	4640      	mov	r0, r8
 8020acc:	f008 fee0 	bl	8029890 <ADS_AwaitIdle>
 8020ad0:	2800      	cmp	r0, #0
 8020ad2:	dbd8      	blt.n	8020a86 <Argus_Dev_Init+0xb2>
 8020ad4:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8020ad8:	0698      	lsls	r0, r3, #26
 8020ada:	f140 80a9 	bpl.w	8020c30 <Argus_Dev_Init+0x25c>
 8020ade:	f240 7301 	movw	r3, #1793	@ 0x701
 8020ae2:	aa02      	add	r2, sp, #8
 8020ae4:	9502      	str	r5, [sp, #8]
 8020ae6:	e9cd 5500 	strd	r5, r5, [sp]
 8020aea:	f8ad 300a 	strh.w	r3, [sp, #10]
 8020aee:	260a      	movs	r6, #10
 8020af0:	2305      	movs	r3, #5
 8020af2:	4611      	mov	r1, r2
 8020af4:	4640      	mov	r0, r8
 8020af6:	f88d 500c 	strb.w	r5, [sp, #12]
 8020afa:	f88d 6008 	strb.w	r6, [sp, #8]
 8020afe:	f008 ffe3 	bl	8029ac8 <ADS_Transfer>
 8020b02:	2800      	cmp	r0, #0
 8020b04:	dbbf      	blt.n	8020a86 <Argus_Dev_Init+0xb2>
 8020b06:	2164      	movs	r1, #100	@ 0x64
 8020b08:	4640      	mov	r0, r8
 8020b0a:	f008 fec1 	bl	8029890 <ADS_AwaitIdle>
 8020b0e:	2800      	cmp	r0, #0
 8020b10:	dbb9      	blt.n	8020a86 <Argus_Dev_Init+0xb2>
 8020b12:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8020b16:	f88d 6008 	strb.w	r6, [sp, #8]
 8020b1a:	f022 0203 	bic.w	r2, r2, #3
 8020b1e:	f88d 200a 	strb.w	r2, [sp, #10]
 8020b22:	aa02      	add	r2, sp, #8
 8020b24:	e9cd 5500 	strd	r5, r5, [sp]
 8020b28:	2305      	movs	r3, #5
 8020b2a:	4611      	mov	r1, r2
 8020b2c:	4640      	mov	r0, r8
 8020b2e:	f88d 500b 	strb.w	r5, [sp, #11]
 8020b32:	f008 ffc9 	bl	8029ac8 <ADS_Transfer>
 8020b36:	2800      	cmp	r0, #0
 8020b38:	dba5      	blt.n	8020a86 <Argus_Dev_Init+0xb2>
 8020b3a:	2164      	movs	r1, #100	@ 0x64
 8020b3c:	4640      	mov	r0, r8
 8020b3e:	f008 fea7 	bl	8029890 <ADS_AwaitIdle>
 8020b42:	2800      	cmp	r0, #0
 8020b44:	db9f      	blt.n	8020a86 <Argus_Dev_Init+0xb2>
 8020b46:	f104 0688 	add.w	r6, r4, #136	@ 0x88
 8020b4a:	f64c 7310 	movw	r3, #53008	@ 0xcf10
 8020b4e:	f8a4 3088 	strh.w	r3, [r4, #136]	@ 0x88
 8020b52:	4632      	mov	r2, r6
 8020b54:	e9cd 5500 	strd	r5, r5, [sp]
 8020b58:	2302      	movs	r3, #2
 8020b5a:	4631      	mov	r1, r6
 8020b5c:	4640      	mov	r0, r8
 8020b5e:	f008 ffb3 	bl	8029ac8 <ADS_Transfer>
 8020b62:	2800      	cmp	r0, #0
 8020b64:	db8f      	blt.n	8020a86 <Argus_Dev_Init+0xb2>
 8020b66:	2164      	movs	r1, #100	@ 0x64
 8020b68:	4640      	mov	r0, r8
 8020b6a:	f008 fe91 	bl	8029890 <ADS_AwaitIdle>
 8020b6e:	2800      	cmp	r0, #0
 8020b70:	db89      	blt.n	8020a86 <Argus_Dev_Init+0xb2>
 8020b72:	f894 3089 	ldrb.w	r3, [r4, #137]	@ 0x89
 8020b76:	07d9      	lsls	r1, r3, #31
 8020b78:	bf48      	it	mi
 8020b7a:	f023 0310 	bicmi.w	r3, r3, #16
 8020b7e:	3bcf      	subs	r3, #207	@ 0xcf
 8020b80:	bf18      	it	ne
 8020b82:	2301      	movne	r3, #1
 8020b84:	bb63      	cbnz	r3, 8020be0 <Argus_Dev_Init+0x20c>
 8020b86:	23c0      	movs	r3, #192	@ 0xc0
 8020b88:	6023      	str	r3, [r4, #0]
 8020b8a:	e77f      	b.n	8020a8c <Argus_Dev_Init+0xb8>
 8020b8c:	f894 3089 	ldrb.w	r3, [r4, #137]	@ 0x89
 8020b90:	095b      	lsrs	r3, r3, #5
 8020b92:	2b04      	cmp	r3, #4
 8020b94:	d852      	bhi.n	8020c3c <Argus_Dev_Init+0x268>
 8020b96:	a201      	add	r2, pc, #4	@ (adr r2, 8020b9c <Argus_Dev_Init+0x1c8>)
 8020b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020b9c:	08020bdb 	.word	0x08020bdb
 8020ba0:	08020a51 	.word	0x08020a51
 8020ba4:	08020bd5 	.word	0x08020bd5
 8020ba8:	08020bcf 	.word	0x08020bcf
 8020bac:	08020bc9 	.word	0x08020bc9
 8020bb0:	3b43      	subs	r3, #67	@ 0x43
 8020bb2:	2b04      	cmp	r3, #4
 8020bb4:	f63f af55 	bhi.w	8020a62 <Argus_Dev_Init+0x8e>
 8020bb8:	4a24      	ldr	r2, [pc, #144]	@ (8020c4c <Argus_Dev_Init+0x278>)
 8020bba:	6863      	ldr	r3, [r4, #4]
 8020bbc:	4293      	cmp	r3, r2
 8020bbe:	bf8c      	ite	hi
 8020bc0:	2305      	movhi	r3, #5
 8020bc2:	2303      	movls	r3, #3
 8020bc4:	7223      	strb	r3, [r4, #8]
 8020bc6:	e74c      	b.n	8020a62 <Argus_Dev_Init+0x8e>
 8020bc8:	2305      	movs	r3, #5
 8020bca:	7223      	strb	r3, [r4, #8]
 8020bcc:	e749      	b.n	8020a62 <Argus_Dev_Init+0x8e>
 8020bce:	2304      	movs	r3, #4
 8020bd0:	7223      	strb	r3, [r4, #8]
 8020bd2:	e746      	b.n	8020a62 <Argus_Dev_Init+0x8e>
 8020bd4:	2303      	movs	r3, #3
 8020bd6:	7223      	strb	r3, [r4, #8]
 8020bd8:	e743      	b.n	8020a62 <Argus_Dev_Init+0x8e>
 8020bda:	2301      	movs	r3, #1
 8020bdc:	7223      	strb	r3, [r4, #8]
 8020bde:	e740      	b.n	8020a62 <Argus_Dev_Init+0x8e>
 8020be0:	2300      	movs	r3, #0
 8020be2:	f64c 7210 	movw	r2, #53008	@ 0xcf10
 8020be6:	f8a4 2088 	strh.w	r2, [r4, #136]	@ 0x88
 8020bea:	4631      	mov	r1, r6
 8020bec:	e9cd 3300 	strd	r3, r3, [sp]
 8020bf0:	4632      	mov	r2, r6
 8020bf2:	2302      	movs	r3, #2
 8020bf4:	4640      	mov	r0, r8
 8020bf6:	f008 ff67 	bl	8029ac8 <ADS_Transfer>
 8020bfa:	2800      	cmp	r0, #0
 8020bfc:	f6ff af43 	blt.w	8020a86 <Argus_Dev_Init+0xb2>
 8020c00:	2164      	movs	r1, #100	@ 0x64
 8020c02:	4640      	mov	r0, r8
 8020c04:	f008 fe44 	bl	8029890 <ADS_AwaitIdle>
 8020c08:	2800      	cmp	r0, #0
 8020c0a:	f6ff af3c 	blt.w	8020a86 <Argus_Dev_Init+0xb2>
 8020c0e:	f894 3089 	ldrb.w	r3, [r4, #137]	@ 0x89
 8020c12:	07da      	lsls	r2, r3, #31
 8020c14:	bf48      	it	mi
 8020c16:	f023 0310 	bicmi.w	r3, r3, #16
 8020c1a:	3bcf      	subs	r3, #207	@ 0xcf
 8020c1c:	bf18      	it	ne
 8020c1e:	2301      	movne	r3, #1
 8020c20:	2b00      	cmp	r3, #0
 8020c22:	d0b0      	beq.n	8020b86 <Argus_Dev_Init+0x1b2>
 8020c24:	480a      	ldr	r0, [pc, #40]	@ (8020c50 <Argus_Dev_Init+0x27c>)
 8020c26:	f7e5 fc71 	bl	800650c <print>
 8020c2a:	f06f 0064 	mvn.w	r0, #100	@ 0x64
 8020c2e:	e72a      	b.n	8020a86 <Argus_Dev_Init+0xb2>
 8020c30:	4808      	ldr	r0, [pc, #32]	@ (8020c54 <Argus_Dev_Init+0x280>)
 8020c32:	f7e5 fc6b 	bl	800650c <print>
 8020c36:	f06f 0071 	mvn.w	r0, #113	@ 0x71
 8020c3a:	e724      	b.n	8020a86 <Argus_Dev_Init+0xb2>
 8020c3c:	2300      	movs	r3, #0
 8020c3e:	7223      	strb	r3, [r4, #8]
 8020c40:	e70f      	b.n	8020a62 <Argus_Dev_Init+0x8e>
 8020c42:	bf00      	nop
 8020c44:	0003dffe 	.word	0x0003dffe
 8020c48:	0802db84 	.word	0x0802db84
 8020c4c:	000493e0 	.word	0x000493e0
 8020c50:	0802fb5c 	.word	0x0802fb5c
 8020c54:	0802fb1c 	.word	0x0802fb1c

08020c58 <Argus_Dev_AwaitStatus>:
 8020c58:	6803      	ldr	r3, [r0, #0]
 8020c5a:	428b      	cmp	r3, r1
 8020c5c:	f000 809b 	beq.w	8020d96 <Argus_Dev_AwaitStatus+0x13e>
 8020c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c64:	f8d0 311c 	ldr.w	r3, [r0, #284]	@ 0x11c
 8020c68:	4e4c      	ldr	r6, [pc, #304]	@ (8020d9c <Argus_Dev_AwaitStatus+0x144>)
 8020c6a:	681b      	ldr	r3, [r3, #0]
 8020c6c:	f8df 9134 	ldr.w	r9, [pc, #308]	@ 8020da4 <Argus_Dev_AwaitStatus+0x14c>
 8020c70:	ea4f 2a53 	mov.w	sl, r3, lsr #9
 8020c74:	b085      	sub	sp, #20
 8020c76:	f50a 7a96 	add.w	sl, sl, #300	@ 0x12c
 8020c7a:	4604      	mov	r4, r0
 8020c7c:	460d      	mov	r5, r1
 8020c7e:	4668      	mov	r0, sp
 8020c80:	a901      	add	r1, sp, #4
 8020c82:	fba6 260a 	umull	r2, r6, r6, sl
 8020c86:	f7e6 fa87 	bl	8007198 <Timer_GetCounterValue>
 8020c8a:	09b6      	lsrs	r6, r6, #6
 8020c8c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8020c90:	fb03 a816 	mls	r8, r3, r6, sl
 8020c94:	fb03 f808 	mul.w	r8, r3, r8
 8020c98:	f504 7790 	add.w	r7, r4, #288	@ 0x120
 8020c9c:	4638      	mov	r0, r7
 8020c9e:	f008 fd8d 	bl	80297bc <ADS_CheckTimeout>
 8020ca2:	2800      	cmp	r0, #0
 8020ca4:	db39      	blt.n	8020d1a <Argus_Dev_AwaitStatus+0xc2>
 8020ca6:	6823      	ldr	r3, [r4, #0]
 8020ca8:	2b64      	cmp	r3, #100	@ 0x64
 8020caa:	d007      	beq.n	8020cbc <Argus_Dev_AwaitStatus+0x64>
 8020cac:	dc38      	bgt.n	8020d20 <Argus_Dev_AwaitStatus+0xc8>
 8020cae:	2b00      	cmp	r3, #0
 8020cb0:	d13c      	bne.n	8020d2c <Argus_Dev_AwaitStatus+0xd4>
 8020cb2:	4638      	mov	r0, r7
 8020cb4:	f008 fd72 	bl	802979c <ADS_GetStatus>
 8020cb8:	2800      	cmp	r0, #0
 8020cba:	db2e      	blt.n	8020d1a <Argus_Dev_AwaitStatus+0xc2>
 8020cbc:	6823      	ldr	r3, [r4, #0]
 8020cbe:	42ab      	cmp	r3, r5
 8020cc0:	d03c      	beq.n	8020d3c <Argus_Dev_AwaitStatus+0xe4>
 8020cc2:	a903      	add	r1, sp, #12
 8020cc4:	a802      	add	r0, sp, #8
 8020cc6:	f7e6 fa67 	bl	8007198 <Timer_GetCounterValue>
 8020cca:	e9dd 1200 	ldrd	r1, r2, [sp]
 8020cce:	eb08 0302 	add.w	r3, r8, r2
 8020cd2:	454b      	cmp	r3, r9
 8020cd4:	f8dd c008 	ldr.w	ip, [sp, #8]
 8020cd8:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8020cdc:	eb06 0001 	add.w	r0, r6, r1
 8020ce0:	d904      	bls.n	8020cec <Argus_Dev_AwaitStatus+0x94>
 8020ce2:	f5a3 2374 	sub.w	r3, r3, #999424	@ 0xf4000
 8020ce6:	3001      	adds	r0, #1
 8020ce8:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8020cec:	4281      	cmp	r1, r0
 8020cee:	d030      	beq.n	8020d52 <Argus_Dev_AwaitStatus+0xfa>
 8020cf0:	bf34      	ite	cc
 8020cf2:	f04f 0b01 	movcc.w	fp, #1
 8020cf6:	f04f 0b00 	movcs.w	fp, #0
 8020cfa:	f1bb 0f00 	cmp.w	fp, #0
 8020cfe:	d021      	beq.n	8020d44 <Argus_Dev_AwaitStatus+0xec>
 8020d00:	4561      	cmp	r1, ip
 8020d02:	d035      	beq.n	8020d70 <Argus_Dev_AwaitStatus+0x118>
 8020d04:	bf34      	ite	cc
 8020d06:	2201      	movcc	r2, #1
 8020d08:	2200      	movcs	r2, #0
 8020d0a:	bb4a      	cbnz	r2, 8020d60 <Argus_Dev_AwaitStatus+0x108>
 8020d0c:	4824      	ldr	r0, [pc, #144]	@ (8020da0 <Argus_Dev_AwaitStatus+0x148>)
 8020d0e:	4652      	mov	r2, sl
 8020d10:	4629      	mov	r1, r5
 8020d12:	f7e5 fbfb 	bl	800650c <print>
 8020d16:	f06f 0005 	mvn.w	r0, #5
 8020d1a:	b005      	add	sp, #20
 8020d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d20:	2bc0      	cmp	r3, #192	@ 0xc0
 8020d22:	dc05      	bgt.n	8020d30 <Argus_Dev_AwaitStatus+0xd8>
 8020d24:	2bbe      	cmp	r3, #190	@ 0xbe
 8020d26:	dcc9      	bgt.n	8020cbc <Argus_Dev_AwaitStatus+0x64>
 8020d28:	2b67      	cmp	r3, #103	@ 0x67
 8020d2a:	d0c7      	beq.n	8020cbc <Argus_Dev_AwaitStatus+0x64>
 8020d2c:	6820      	ldr	r0, [r4, #0]
 8020d2e:	e7c3      	b.n	8020cb8 <Argus_Dev_AwaitStatus+0x60>
 8020d30:	3bc3      	subs	r3, #195	@ 0xc3
 8020d32:	2b01      	cmp	r3, #1
 8020d34:	d8fa      	bhi.n	8020d2c <Argus_Dev_AwaitStatus+0xd4>
 8020d36:	6823      	ldr	r3, [r4, #0]
 8020d38:	42ab      	cmp	r3, r5
 8020d3a:	d1c2      	bne.n	8020cc2 <Argus_Dev_AwaitStatus+0x6a>
 8020d3c:	2000      	movs	r0, #0
 8020d3e:	b005      	add	sp, #20
 8020d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d44:	4561      	cmp	r1, ip
 8020d46:	d018      	beq.n	8020d7a <Argus_Dev_AwaitStatus+0x122>
 8020d48:	d3a8      	bcc.n	8020c9c <Argus_Dev_AwaitStatus+0x44>
 8020d4a:	4584      	cmp	ip, r0
 8020d4c:	d019      	beq.n	8020d82 <Argus_Dev_AwaitStatus+0x12a>
 8020d4e:	d9a5      	bls.n	8020c9c <Argus_Dev_AwaitStatus+0x44>
 8020d50:	e7dc      	b.n	8020d0c <Argus_Dev_AwaitStatus+0xb4>
 8020d52:	429a      	cmp	r2, r3
 8020d54:	bf8c      	ite	hi
 8020d56:	f04f 0b00 	movhi.w	fp, #0
 8020d5a:	f04f 0b01 	movls.w	fp, #1
 8020d5e:	e7cc      	b.n	8020cfa <Argus_Dev_AwaitStatus+0xa2>
 8020d60:	4584      	cmp	ip, r0
 8020d62:	d011      	beq.n	8020d88 <Argus_Dev_AwaitStatus+0x130>
 8020d64:	bf8c      	ite	hi
 8020d66:	2301      	movhi	r3, #1
 8020d68:	2300      	movls	r3, #0
 8020d6a:	2b00      	cmp	r3, #0
 8020d6c:	d096      	beq.n	8020c9c <Argus_Dev_AwaitStatus+0x44>
 8020d6e:	e7cd      	b.n	8020d0c <Argus_Dev_AwaitStatus+0xb4>
 8020d70:	4596      	cmp	lr, r2
 8020d72:	bf34      	ite	cc
 8020d74:	2200      	movcc	r2, #0
 8020d76:	2201      	movcs	r2, #1
 8020d78:	e7c7      	b.n	8020d0a <Argus_Dev_AwaitStatus+0xb2>
 8020d7a:	4596      	cmp	lr, r2
 8020d7c:	d28e      	bcs.n	8020c9c <Argus_Dev_AwaitStatus+0x44>
 8020d7e:	4584      	cmp	ip, r0
 8020d80:	d1e5      	bne.n	8020d4e <Argus_Dev_AwaitStatus+0xf6>
 8020d82:	459e      	cmp	lr, r3
 8020d84:	d2c2      	bcs.n	8020d0c <Argus_Dev_AwaitStatus+0xb4>
 8020d86:	e789      	b.n	8020c9c <Argus_Dev_AwaitStatus+0x44>
 8020d88:	459e      	cmp	lr, r3
 8020d8a:	bf34      	ite	cc
 8020d8c:	2300      	movcc	r3, #0
 8020d8e:	2301      	movcs	r3, #1
 8020d90:	2b00      	cmp	r3, #0
 8020d92:	d083      	beq.n	8020c9c <Argus_Dev_AwaitStatus+0x44>
 8020d94:	e7ba      	b.n	8020d0c <Argus_Dev_AwaitStatus+0xb4>
 8020d96:	2000      	movs	r0, #0
 8020d98:	4770      	bx	lr
 8020d9a:	bf00      	nop
 8020d9c:	10624dd3 	.word	0x10624dd3
 8020da0:	0802fb90 	.word	0x0802fb90
 8020da4:	000f423f 	.word	0x000f423f

08020da8 <Argus_Dev_SetStatusSync>:
 8020da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dac:	f8d0 311c 	ldr.w	r3, [r0, #284]	@ 0x11c
 8020db0:	4e48      	ldr	r6, [pc, #288]	@ (8020ed4 <Argus_Dev_SetStatusSync+0x12c>)
 8020db2:	681b      	ldr	r3, [r3, #0]
 8020db4:	f8df 9124 	ldr.w	r9, [pc, #292]	@ 8020edc <Argus_Dev_SetStatusSync+0x134>
 8020db8:	ea4f 2a53 	mov.w	sl, r3, lsr #9
 8020dbc:	b085      	sub	sp, #20
 8020dbe:	f50a 7a96 	add.w	sl, sl, #300	@ 0x12c
 8020dc2:	4605      	mov	r5, r0
 8020dc4:	468b      	mov	fp, r1
 8020dc6:	4668      	mov	r0, sp
 8020dc8:	a901      	add	r1, sp, #4
 8020dca:	fba6 260a 	umull	r2, r6, r6, sl
 8020dce:	f7e6 f9e3 	bl	8007198 <Timer_GetCounterValue>
 8020dd2:	09b6      	lsrs	r6, r6, #6
 8020dd4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8020dd8:	fb03 a716 	mls	r7, r3, r6, sl
 8020ddc:	fb03 f707 	mul.w	r7, r3, r7
 8020de0:	f505 7890 	add.w	r8, r5, #288	@ 0x120
 8020de4:	f7e5 fdf6 	bl	80069d4 <IRQ_LOCK>
 8020de8:	682c      	ldr	r4, [r5, #0]
 8020dea:	2c00      	cmp	r4, #0
 8020dec:	d041      	beq.n	8020e72 <Argus_Dev_SetStatusSync+0xca>
 8020dee:	682b      	ldr	r3, [r5, #0]
 8020df0:	2b00      	cmp	r3, #0
 8020df2:	db68      	blt.n	8020ec6 <Argus_Dev_SetStatusSync+0x11e>
 8020df4:	f7e5 fdcc 	bl	8006990 <IRQ_UNLOCK>
 8020df8:	4640      	mov	r0, r8
 8020dfa:	f008 fcdf 	bl	80297bc <ADS_CheckTimeout>
 8020dfe:	1e04      	subs	r4, r0, #0
 8020e00:	db28      	blt.n	8020e54 <Argus_Dev_SetStatusSync+0xac>
 8020e02:	a903      	add	r1, sp, #12
 8020e04:	a802      	add	r0, sp, #8
 8020e06:	f7e6 f9c7 	bl	8007198 <Timer_GetCounterValue>
 8020e0a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8020e0e:	18bb      	adds	r3, r7, r2
 8020e10:	454b      	cmp	r3, r9
 8020e12:	e9dd 4c02 	ldrd	r4, ip, [sp, #8]
 8020e16:	eb06 0001 	add.w	r0, r6, r1
 8020e1a:	d904      	bls.n	8020e26 <Argus_Dev_SetStatusSync+0x7e>
 8020e1c:	f5a3 2374 	sub.w	r3, r3, #999424	@ 0xf4000
 8020e20:	3001      	adds	r0, #1
 8020e22:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8020e26:	4281      	cmp	r1, r0
 8020e28:	d02b      	beq.n	8020e82 <Argus_Dev_SetStatusSync+0xda>
 8020e2a:	bf34      	ite	cc
 8020e2c:	f04f 0e01 	movcc.w	lr, #1
 8020e30:	f04f 0e00 	movcs.w	lr, #0
 8020e34:	f1be 0f00 	cmp.w	lr, #0
 8020e38:	d010      	beq.n	8020e5c <Argus_Dev_SetStatusSync+0xb4>
 8020e3a:	42a1      	cmp	r1, r4
 8020e3c:	d030      	beq.n	8020ea0 <Argus_Dev_SetStatusSync+0xf8>
 8020e3e:	bf34      	ite	cc
 8020e40:	2201      	movcc	r2, #1
 8020e42:	2200      	movcs	r2, #0
 8020e44:	bb22      	cbnz	r2, 8020e90 <Argus_Dev_SetStatusSync+0xe8>
 8020e46:	4824      	ldr	r0, [pc, #144]	@ (8020ed8 <Argus_Dev_SetStatusSync+0x130>)
 8020e48:	4652      	mov	r2, sl
 8020e4a:	4659      	mov	r1, fp
 8020e4c:	f7e5 fb5e 	bl	800650c <print>
 8020e50:	f06f 0405 	mvn.w	r4, #5
 8020e54:	4620      	mov	r0, r4
 8020e56:	b005      	add	sp, #20
 8020e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e5c:	42a1      	cmp	r1, r4
 8020e5e:	d024      	beq.n	8020eaa <Argus_Dev_SetStatusSync+0x102>
 8020e60:	d3c0      	bcc.n	8020de4 <Argus_Dev_SetStatusSync+0x3c>
 8020e62:	42a0      	cmp	r0, r4
 8020e64:	d025      	beq.n	8020eb2 <Argus_Dev_SetStatusSync+0x10a>
 8020e66:	d3ee      	bcc.n	8020e46 <Argus_Dev_SetStatusSync+0x9e>
 8020e68:	f7e5 fdb4 	bl	80069d4 <IRQ_LOCK>
 8020e6c:	682c      	ldr	r4, [r5, #0]
 8020e6e:	2c00      	cmp	r4, #0
 8020e70:	d1bd      	bne.n	8020dee <Argus_Dev_SetStatusSync+0x46>
 8020e72:	f8c5 b000 	str.w	fp, [r5]
 8020e76:	f7e5 fd8b 	bl	8006990 <IRQ_UNLOCK>
 8020e7a:	4620      	mov	r0, r4
 8020e7c:	b005      	add	sp, #20
 8020e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e82:	429a      	cmp	r2, r3
 8020e84:	bf8c      	ite	hi
 8020e86:	f04f 0e00 	movhi.w	lr, #0
 8020e8a:	f04f 0e01 	movls.w	lr, #1
 8020e8e:	e7d1      	b.n	8020e34 <Argus_Dev_SetStatusSync+0x8c>
 8020e90:	42a0      	cmp	r0, r4
 8020e92:	d011      	beq.n	8020eb8 <Argus_Dev_SetStatusSync+0x110>
 8020e94:	bf34      	ite	cc
 8020e96:	2301      	movcc	r3, #1
 8020e98:	2300      	movcs	r3, #0
 8020e9a:	2b00      	cmp	r3, #0
 8020e9c:	d0a2      	beq.n	8020de4 <Argus_Dev_SetStatusSync+0x3c>
 8020e9e:	e7d2      	b.n	8020e46 <Argus_Dev_SetStatusSync+0x9e>
 8020ea0:	4562      	cmp	r2, ip
 8020ea2:	bf8c      	ite	hi
 8020ea4:	2200      	movhi	r2, #0
 8020ea6:	2201      	movls	r2, #1
 8020ea8:	e7cc      	b.n	8020e44 <Argus_Dev_SetStatusSync+0x9c>
 8020eaa:	4562      	cmp	r2, ip
 8020eac:	d99a      	bls.n	8020de4 <Argus_Dev_SetStatusSync+0x3c>
 8020eae:	42a0      	cmp	r0, r4
 8020eb0:	d1d9      	bne.n	8020e66 <Argus_Dev_SetStatusSync+0xbe>
 8020eb2:	459c      	cmp	ip, r3
 8020eb4:	d2c7      	bcs.n	8020e46 <Argus_Dev_SetStatusSync+0x9e>
 8020eb6:	e795      	b.n	8020de4 <Argus_Dev_SetStatusSync+0x3c>
 8020eb8:	459c      	cmp	ip, r3
 8020eba:	bf34      	ite	cc
 8020ebc:	2300      	movcc	r3, #0
 8020ebe:	2301      	movcs	r3, #1
 8020ec0:	2b00      	cmp	r3, #0
 8020ec2:	d08f      	beq.n	8020de4 <Argus_Dev_SetStatusSync+0x3c>
 8020ec4:	e7bf      	b.n	8020e46 <Argus_Dev_SetStatusSync+0x9e>
 8020ec6:	682c      	ldr	r4, [r5, #0]
 8020ec8:	f7e5 fd62 	bl	8006990 <IRQ_UNLOCK>
 8020ecc:	4620      	mov	r0, r4
 8020ece:	b005      	add	sp, #20
 8020ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ed4:	10624dd3 	.word	0x10624dd3
 8020ed8:	0802fbe8 	.word	0x0802fbe8
 8020edc:	000f423f 	.word	0x000f423f

08020ee0 <Argus_Dev_SetStatus>:
 8020ee0:	b570      	push	{r4, r5, r6, lr}
 8020ee2:	4604      	mov	r4, r0
 8020ee4:	460e      	mov	r6, r1
 8020ee6:	f7e5 fd75 	bl	80069d4 <IRQ_LOCK>
 8020eea:	6825      	ldr	r5, [r4, #0]
 8020eec:	b925      	cbnz	r5, 8020ef8 <Argus_Dev_SetStatus+0x18>
 8020eee:	6026      	str	r6, [r4, #0]
 8020ef0:	f7e5 fd4e 	bl	8006990 <IRQ_UNLOCK>
 8020ef4:	4628      	mov	r0, r5
 8020ef6:	bd70      	pop	{r4, r5, r6, pc}
 8020ef8:	6823      	ldr	r3, [r4, #0]
 8020efa:	3371      	adds	r3, #113	@ 0x71
 8020efc:	d007      	beq.n	8020f0e <Argus_Dev_SetStatus+0x2e>
 8020efe:	6823      	ldr	r3, [r4, #0]
 8020f00:	3372      	adds	r3, #114	@ 0x72
 8020f02:	d00a      	beq.n	8020f1a <Argus_Dev_SetStatus+0x3a>
 8020f04:	6825      	ldr	r5, [r4, #0]
 8020f06:	f7e5 fd43 	bl	8006990 <IRQ_UNLOCK>
 8020f0a:	4628      	mov	r0, r5
 8020f0c:	bd70      	pop	{r4, r5, r6, pc}
 8020f0e:	f504 70b4 	add.w	r0, r4, #360	@ 0x168
 8020f12:	f7fd f915 	bl	801e140 <Argus_Dca_RecoverLaserFailure>
 8020f16:	2800      	cmp	r0, #0
 8020f18:	d0f1      	beq.n	8020efe <Argus_Dev_SetStatus+0x1e>
 8020f1a:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8020f1c:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 8020f20:	4a06      	ldr	r2, [pc, #24]	@ (8020f3c <Argus_Dev_SetStatus+0x5c>)
 8020f22:	f043 0302 	orr.w	r3, r3, #2
 8020f26:	430a      	orrs	r2, r1
 8020f28:	67a2      	str	r2, [r4, #120]	@ 0x78
 8020f2a:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 8020f2e:	6026      	str	r6, [r4, #0]
 8020f30:	2500      	movs	r5, #0
 8020f32:	f7e5 fd2d 	bl	8006990 <IRQ_UNLOCK>
 8020f36:	4628      	mov	r0, r5
 8020f38:	bd70      	pop	{r4, r5, r6, pc}
 8020f3a:	bf00      	nop
 8020f3c:	0003dffe 	.word	0x0003dffe

08020f40 <Argus_Dev_SetError>:
 8020f40:	6803      	ldr	r3, [r0, #0]
 8020f42:	3371      	adds	r3, #113	@ 0x71
 8020f44:	bf18      	it	ne
 8020f46:	6001      	strne	r1, [r0, #0]
 8020f48:	4770      	bx	lr
 8020f4a:	bf00      	nop

08020f4c <Argus_Dev_ClearStatus>:
 8020f4c:	b538      	push	{r3, r4, r5, lr}
 8020f4e:	4604      	mov	r4, r0
 8020f50:	460d      	mov	r5, r1
 8020f52:	f7e5 fd3f 	bl	80069d4 <IRQ_LOCK>
 8020f56:	6823      	ldr	r3, [r4, #0]
 8020f58:	42ab      	cmp	r3, r5
 8020f5a:	d105      	bne.n	8020f68 <Argus_Dev_ClearStatus+0x1c>
 8020f5c:	2500      	movs	r5, #0
 8020f5e:	6025      	str	r5, [r4, #0]
 8020f60:	f7e5 fd16 	bl	8006990 <IRQ_UNLOCK>
 8020f64:	4628      	mov	r0, r5
 8020f66:	bd38      	pop	{r3, r4, r5, pc}
 8020f68:	f7e5 fd12 	bl	8006990 <IRQ_UNLOCK>
 8020f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8020f70:	bd38      	pop	{r3, r4, r5, pc}
 8020f72:	bf00      	nop

08020f74 <Argus_Dev_GetStatus>:
 8020f74:	b538      	push	{r3, r4, r5, lr}
 8020f76:	f500 7590 	add.w	r5, r0, #288	@ 0x120
 8020f7a:	4604      	mov	r4, r0
 8020f7c:	4628      	mov	r0, r5
 8020f7e:	f008 fc1d 	bl	80297bc <ADS_CheckTimeout>
 8020f82:	2800      	cmp	r0, #0
 8020f84:	db10      	blt.n	8020fa8 <Argus_Dev_GetStatus+0x34>
 8020f86:	6823      	ldr	r3, [r4, #0]
 8020f88:	2b64      	cmp	r3, #100	@ 0x64
 8020f8a:	d011      	beq.n	8020fb0 <Argus_Dev_GetStatus+0x3c>
 8020f8c:	dc05      	bgt.n	8020f9a <Argus_Dev_GetStatus+0x26>
 8020f8e:	b953      	cbnz	r3, 8020fa6 <Argus_Dev_GetStatus+0x32>
 8020f90:	4628      	mov	r0, r5
 8020f92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020f96:	f008 bc01 	b.w	802979c <ADS_GetStatus>
 8020f9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8020f9c:	dc05      	bgt.n	8020faa <Argus_Dev_GetStatus+0x36>
 8020f9e:	2bbe      	cmp	r3, #190	@ 0xbe
 8020fa0:	dc06      	bgt.n	8020fb0 <Argus_Dev_GetStatus+0x3c>
 8020fa2:	2b67      	cmp	r3, #103	@ 0x67
 8020fa4:	d004      	beq.n	8020fb0 <Argus_Dev_GetStatus+0x3c>
 8020fa6:	6820      	ldr	r0, [r4, #0]
 8020fa8:	bd38      	pop	{r3, r4, r5, pc}
 8020faa:	3bc3      	subs	r3, #195	@ 0xc3
 8020fac:	2b01      	cmp	r3, #1
 8020fae:	d8fa      	bhi.n	8020fa6 <Argus_Dev_GetStatus+0x32>
 8020fb0:	2002      	movs	r0, #2
 8020fb2:	bd38      	pop	{r3, r4, r5, pc}

08020fb4 <Argus_Dev_Abort>:
 8020fb4:	f06f 0101 	mvn.w	r1, #1
 8020fb8:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 8020fbc:	f008 bbe6 	b.w	802978c <ADS_Abort>

08020fc0 <Argus_Dev_ReadData>:
 8020fc0:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 8020fc4:	f008 be66 	b.w	8029c94 <ADS_ReadData>

08020fc8 <Argus_Dev_CheckCfg>:
 8020fc8:	b510      	push	{r4, lr}
 8020fca:	7b41      	ldrb	r1, [r0, #13]
 8020fcc:	1e4b      	subs	r3, r1, #1
 8020fce:	2b01      	cmp	r3, #1
 8020fd0:	f200 815e 	bhi.w	8021290 <Argus_Dev_CheckCfg+0x2c8>
 8020fd4:	6801      	ldr	r1, [r0, #0]
 8020fd6:	4bce      	ldr	r3, [pc, #824]	@ (8021310 <Argus_Dev_CheckCfg+0x348>)
 8020fd8:	f1a1 02fa 	sub.w	r2, r1, #250	@ 0xfa
 8020fdc:	429a      	cmp	r2, r3
 8020fde:	f200 815d 	bhi.w	802129c <Argus_Dev_CheckCfg+0x2d4>
 8020fe2:	6901      	ldr	r1, [r0, #16]
 8020fe4:	4bcb      	ldr	r3, [pc, #812]	@ (8021314 <Argus_Dev_CheckCfg+0x34c>)
 8020fe6:	f1a1 02fa 	sub.w	r2, r1, #250	@ 0xfa
 8020fea:	429a      	cmp	r2, r3
 8020fec:	f200 815e 	bhi.w	80212ac <Argus_Dev_CheckCfg+0x2e4>
 8020ff0:	7a81      	ldrb	r1, [r0, #10]
 8020ff2:	1e8b      	subs	r3, r1, #2
 8020ff4:	2b7e      	cmp	r3, #126	@ 0x7e
 8020ff6:	f200 8173 	bhi.w	80212e0 <Argus_Dev_CheckCfg+0x318>
 8020ffa:	7a01      	ldrb	r1, [r0, #8]
 8020ffc:	2980      	cmp	r1, #128	@ 0x80
 8020ffe:	f200 81b5 	bhi.w	802136c <Argus_Dev_CheckCfg+0x3a4>
 8021002:	6844      	ldr	r4, [r0, #4]
 8021004:	4bc4      	ldr	r3, [pc, #784]	@ (8021318 <Argus_Dev_CheckCfg+0x350>)
 8021006:	4ac5      	ldr	r2, [pc, #788]	@ (802131c <Argus_Dev_CheckCfg+0x354>)
 8021008:	4423      	add	r3, r4
 802100a:	4293      	cmp	r3, r2
 802100c:	f200 8176 	bhi.w	80212fc <Argus_Dev_CheckCfg+0x334>
 8021010:	f890 3071 	ldrb.w	r3, [r0, #113]	@ 0x71
 8021014:	065a      	lsls	r2, r3, #25
 8021016:	f100 816b 	bmi.w	80212f0 <Argus_Dev_CheckCfg+0x328>
 802101a:	f990 2080 	ldrsb.w	r2, [r0, #128]	@ 0x80
 802101e:	2a00      	cmp	r2, #0
 8021020:	f2c0 81e8 	blt.w	80213f4 <Argus_Dev_CheckCfg+0x42c>
 8021024:	069b      	lsls	r3, r3, #26
 8021026:	f140 8155 	bpl.w	80212d4 <Argus_Dev_CheckCfg+0x30c>
 802102a:	f890 308e 	ldrb.w	r3, [r0, #142]	@ 0x8e
 802102e:	3b01      	subs	r3, #1
 8021030:	2b02      	cmp	r3, #2
 8021032:	f200 8149 	bhi.w	80212c8 <Argus_Dev_CheckCfg+0x300>
 8021036:	f8b0 305f 	ldrh.w	r3, [r0, #95]	@ 0x5f
 802103a:	ba5b      	rev16	r3, r3
 802103c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8021040:	2b00      	cmp	r3, #0
 8021042:	f000 813b 	beq.w	80212bc <Argus_Dev_CheckCfg+0x2f4>
 8021046:	f890 3081 	ldrb.w	r3, [r0, #129]	@ 0x81
 802104a:	f3c3 0343 	ubfx	r3, r3, #1, #4
 802104e:	2b03      	cmp	r3, #3
 8021050:	f040 8117 	bne.w	8021282 <Argus_Dev_CheckCfg+0x2ba>
 8021054:	f8b0 208b 	ldrh.w	r2, [r0, #139]	@ 0x8b
 8021058:	f890 c087 	ldrb.w	ip, [r0, #135]	@ 0x87
 802105c:	ba52      	rev16	r2, r2
 802105e:	f3c2 034e 	ubfx	r3, r2, #1, #15
 8021062:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8021066:	b292      	uxth	r2, r2
 8021068:	1ad2      	subs	r2, r2, r3
 802106a:	0891      	lsrs	r1, r2, #2
 802106c:	f890 3088 	ldrb.w	r3, [r0, #136]	@ 0x88
 8021070:	f001 3133 	and.w	r1, r1, #858993459	@ 0x33333333
 8021074:	f002 3233 	and.w	r2, r2, #858993459	@ 0x33333333
 8021078:	440a      	add	r2, r1
 802107a:	021b      	lsls	r3, r3, #8
 802107c:	f890 1089 	ldrb.w	r1, [r0, #137]	@ 0x89
 8021080:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8021084:	430b      	orrs	r3, r1
 8021086:	0859      	lsrs	r1, r3, #1
 8021088:	f001 3155 	and.w	r1, r1, #1431655765	@ 0x55555555
 802108c:	1a5b      	subs	r3, r3, r1
 802108e:	f003 3133 	and.w	r1, r3, #858993459	@ 0x33333333
 8021092:	089b      	lsrs	r3, r3, #2
 8021094:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8021098:	4419      	add	r1, r3
 802109a:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 802109e:	f890 c083 	ldrb.w	ip, [r0, #131]	@ 0x83
 80210a2:	021b      	lsls	r3, r3, #8
 80210a4:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80210a8:	f890 c085 	ldrb.w	ip, [r0, #133]	@ 0x85
 80210ac:	ea43 030c 	orr.w	r3, r3, ip
 80210b0:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80210b4:	f00c 3c55 	and.w	ip, ip, #1431655765	@ 0x55555555
 80210b8:	eba3 030c 	sub.w	r3, r3, ip
 80210bc:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80210c0:	f00c 3c33 	and.w	ip, ip, #858993459	@ 0x33333333
 80210c4:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 80210c8:	eb01 1111 	add.w	r1, r1, r1, lsr #4
 80210cc:	4463      	add	r3, ip
 80210ce:	f001 310f 	and.w	r1, r1, #252645135	@ 0xf0f0f0f
 80210d2:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 80210d6:	eb02 1212 	add.w	r2, r2, r2, lsr #4
 80210da:	eb01 2101 	add.w	r1, r1, r1, lsl #8
 80210de:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 80210e2:	f002 320f 	and.w	r2, r2, #252645135	@ 0xf0f0f0f
 80210e6:	eb01 4101 	add.w	r1, r1, r1, lsl #16
 80210ea:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 80210ee:	eb02 2202 	add.w	r2, r2, r2, lsl #8
 80210f2:	0e09      	lsrs	r1, r1, #24
 80210f4:	eb03 4303 	add.w	r3, r3, r3, lsl #16
 80210f8:	eb02 4202 	add.w	r2, r2, r2, lsl #16
 80210fc:	eb01 6313 	add.w	r3, r1, r3, lsr #24
 8021100:	eb03 6212 	add.w	r2, r3, r2, lsr #24
 8021104:	0092      	lsls	r2, r2, #2
 8021106:	2a84      	cmp	r2, #132	@ 0x84
 8021108:	f200 814a 	bhi.w	80213a0 <Argus_Dev_CheckCfg+0x3d8>
 802110c:	f8d0 1094 	ldr.w	r1, [r0, #148]	@ 0x94
 8021110:	2963      	cmp	r1, #99	@ 0x63
 8021112:	f240 813f 	bls.w	8021394 <Argus_Dev_CheckCfg+0x3cc>
 8021116:	f8d0 1090 	ldr.w	r1, [r0, #144]	@ 0x90
 802111a:	2900      	cmp	r1, #0
 802111c:	f000 8158 	beq.w	80213d0 <Argus_Dev_CheckCfg+0x408>
 8021120:	f8b0 1098 	ldrh.w	r1, [r0, #152]	@ 0x98
 8021124:	2900      	cmp	r1, #0
 8021126:	f000 814d 	beq.w	80213c4 <Argus_Dev_CheckCfg+0x3fc>
 802112a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 802112e:	2b00      	cmp	r3, #0
 8021130:	f000 812a 	beq.w	8021388 <Argus_Dev_CheckCfg+0x3c0>
 8021134:	f890 109d 	ldrb.w	r1, [r0, #157]	@ 0x9d
 8021138:	2907      	cmp	r1, #7
 802113a:	f200 811f 	bhi.w	802137c <Argus_Dev_CheckCfg+0x3b4>
 802113e:	f890 109e 	ldrb.w	r1, [r0, #158]	@ 0x9e
 8021142:	2907      	cmp	r1, #7
 8021144:	f200 8138 	bhi.w	80213b8 <Argus_Dev_CheckCfg+0x3f0>
 8021148:	f890 109f 	ldrb.w	r1, [r0, #159]	@ 0x9f
 802114c:	2903      	cmp	r1, #3
 802114e:	f200 812d 	bhi.w	80213ac <Argus_Dev_CheckCfg+0x3e4>
 8021152:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	@ 0xa0
 8021156:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 802115a:	4299      	cmp	r1, r3
 802115c:	f200 8144 	bhi.w	80213e8 <Argus_Dev_CheckCfg+0x420>
 8021160:	f890 10a8 	ldrb.w	r1, [r0, #168]	@ 0xa8
 8021164:	2902      	cmp	r1, #2
 8021166:	f200 8139 	bhi.w	80213dc <Argus_Dev_CheckCfg+0x414>
 802116a:	f3c4 1380 	ubfx	r3, r4, #6, #1
 802116e:	f8d0 20b8 	ldr.w	r2, [r0, #184]	@ 0xb8
 8021172:	eb03 13d4 	add.w	r3, r3, r4, lsr #7
 8021176:	f004 0101 	and.w	r1, r4, #1
 802117a:	429a      	cmp	r2, r3
 802117c:	eb01 0454 	add.w	r4, r1, r4, lsr #1
 8021180:	d360      	bcc.n	8021244 <Argus_Dev_CheckCfg+0x27c>
 8021182:	42a2      	cmp	r2, r4
 8021184:	d85e      	bhi.n	8021244 <Argus_Dev_CheckCfg+0x27c>
 8021186:	f8b0 20b0 	ldrh.w	r2, [r0, #176]	@ 0xb0
 802118a:	f102 3cff 	add.w	ip, r2, #4294967295
 802118e:	fa1f fc8c 	uxth.w	ip, ip
 8021192:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8021196:	458c      	cmp	ip, r1
 8021198:	d85d      	bhi.n	8021256 <Argus_Dev_CheckCfg+0x28e>
 802119a:	f8b0 20b4 	ldrh.w	r2, [r0, #180]	@ 0xb4
 802119e:	f102 3cff 	add.w	ip, r2, #4294967295
 80211a2:	fa1f fc8c 	uxth.w	ip, ip
 80211a6:	458c      	cmp	ip, r1
 80211a8:	d85e      	bhi.n	8021268 <Argus_Dev_CheckCfg+0x2a0>
 80211aa:	f8d0 20bc 	ldr.w	r2, [r0, #188]	@ 0xbc
 80211ae:	429a      	cmp	r2, r3
 80211b0:	d34f      	bcc.n	8021252 <Argus_Dev_CheckCfg+0x28a>
 80211b2:	42a2      	cmp	r2, r4
 80211b4:	d84d      	bhi.n	8021252 <Argus_Dev_CheckCfg+0x28a>
 80211b6:	f8b0 20b2 	ldrh.w	r2, [r0, #178]	@ 0xb2
 80211ba:	1e53      	subs	r3, r2, #1
 80211bc:	b29b      	uxth	r3, r3
 80211be:	428b      	cmp	r3, r1
 80211c0:	d85b      	bhi.n	802127a <Argus_Dev_CheckCfg+0x2b2>
 80211c2:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	@ 0xb6
 80211c6:	1e53      	subs	r3, r2, #1
 80211c8:	b29b      	uxth	r3, r3
 80211ca:	428b      	cmp	r3, r1
 80211cc:	d857      	bhi.n	802127e <Argus_Dev_CheckCfg+0x2b6>
 80211ce:	f890 30d4 	ldrb.w	r3, [r0, #212]	@ 0xd4
 80211d2:	2b02      	cmp	r3, #2
 80211d4:	d01c      	beq.n	8021210 <Argus_Dev_CheckCfg+0x248>
 80211d6:	f890 30e0 	ldrb.w	r3, [r0, #224]	@ 0xe0
 80211da:	b1bb      	cbz	r3, 802120c <Argus_Dev_CheckCfg+0x244>
 80211dc:	f8d0 30ec 	ldr.w	r3, [r0, #236]	@ 0xec
 80211e0:	2b00      	cmp	r3, #0
 80211e2:	f000 810d 	beq.w	8021400 <Argus_Dev_CheckCfg+0x438>
 80211e6:	f990 30e2 	ldrsb.w	r3, [r0, #226]	@ 0xe2
 80211ea:	2b00      	cmp	r3, #0
 80211ec:	f2c0 8126 	blt.w	802143c <Argus_Dev_CheckCfg+0x474>
 80211f0:	f8b0 30e8 	ldrh.w	r3, [r0, #232]	@ 0xe8
 80211f4:	2b00      	cmp	r3, #0
 80211f6:	f000 8109 	beq.w	802140c <Argus_Dev_CheckCfg+0x444>
 80211fa:	f8b0 20e6 	ldrh.w	r2, [r0, #230]	@ 0xe6
 80211fe:	4293      	cmp	r3, r2
 8021200:	f200 810a 	bhi.w	8021418 <Argus_Dev_CheckCfg+0x450>
 8021204:	f8b0 30e4 	ldrh.w	r3, [r0, #228]	@ 0xe4
 8021208:	4293      	cmp	r3, r2
 802120a:	d315      	bcc.n	8021238 <Argus_Dev_CheckCfg+0x270>
 802120c:	2000      	movs	r0, #0
 802120e:	bd10      	pop	{r4, pc}
 8021210:	f8d0 30dc 	ldr.w	r3, [r0, #220]	@ 0xdc
 8021214:	2b00      	cmp	r3, #0
 8021216:	f000 8105 	beq.w	8021424 <Argus_Dev_CheckCfg+0x45c>
 802121a:	f8b0 30da 	ldrh.w	r3, [r0, #218]	@ 0xda
 802121e:	2b00      	cmp	r3, #0
 8021220:	f000 8106 	beq.w	8021430 <Argus_Dev_CheckCfg+0x468>
 8021224:	f8b0 20d8 	ldrh.w	r2, [r0, #216]	@ 0xd8
 8021228:	429a      	cmp	r2, r3
 802122a:	d2d4      	bcs.n	80211d6 <Argus_Dev_CheckCfg+0x20e>
 802122c:	483c      	ldr	r0, [pc, #240]	@ (8021320 <Argus_Dev_CheckCfg+0x358>)
 802122e:	f7e5 f96d 	bl	800650c <print>
 8021232:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8021236:	bd10      	pop	{r4, pc}
 8021238:	483a      	ldr	r0, [pc, #232]	@ (8021324 <Argus_Dev_CheckCfg+0x35c>)
 802123a:	f7e5 f967 	bl	800650c <print>
 802123e:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8021242:	bd10      	pop	{r4, pc}
 8021244:	4938      	ldr	r1, [pc, #224]	@ (8021328 <Argus_Dev_CheckCfg+0x360>)
 8021246:	4839      	ldr	r0, [pc, #228]	@ (802132c <Argus_Dev_CheckCfg+0x364>)
 8021248:	f7e5 f960 	bl	800650c <print>
 802124c:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8021250:	bd10      	pop	{r4, pc}
 8021252:	4937      	ldr	r1, [pc, #220]	@ (8021330 <Argus_Dev_CheckCfg+0x368>)
 8021254:	e7f7      	b.n	8021246 <Argus_Dev_CheckCfg+0x27e>
 8021256:	4934      	ldr	r1, [pc, #208]	@ (8021328 <Argus_Dev_CheckCfg+0x360>)
 8021258:	4836      	ldr	r0, [pc, #216]	@ (8021334 <Argus_Dev_CheckCfg+0x36c>)
 802125a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 802125e:	f7e5 f955 	bl	800650c <print>
 8021262:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8021266:	bd10      	pop	{r4, pc}
 8021268:	492f      	ldr	r1, [pc, #188]	@ (8021328 <Argus_Dev_CheckCfg+0x360>)
 802126a:	4833      	ldr	r0, [pc, #204]	@ (8021338 <Argus_Dev_CheckCfg+0x370>)
 802126c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8021270:	f7e5 f94c 	bl	800650c <print>
 8021274:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8021278:	bd10      	pop	{r4, pc}
 802127a:	492d      	ldr	r1, [pc, #180]	@ (8021330 <Argus_Dev_CheckCfg+0x368>)
 802127c:	e7ec      	b.n	8021258 <Argus_Dev_CheckCfg+0x290>
 802127e:	492c      	ldr	r1, [pc, #176]	@ (8021330 <Argus_Dev_CheckCfg+0x368>)
 8021280:	e7f3      	b.n	802126a <Argus_Dev_CheckCfg+0x2a2>
 8021282:	2104      	movs	r1, #4
 8021284:	482d      	ldr	r0, [pc, #180]	@ (802133c <Argus_Dev_CheckCfg+0x374>)
 8021286:	f7e5 f941 	bl	800650c <print>
 802128a:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 802128e:	bd10      	pop	{r4, pc}
 8021290:	482b      	ldr	r0, [pc, #172]	@ (8021340 <Argus_Dev_CheckCfg+0x378>)
 8021292:	f7e5 f93b 	bl	800650c <print>
 8021296:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 802129a:	bd10      	pop	{r4, pc}
 802129c:	33fa      	adds	r3, #250	@ 0xfa
 802129e:	22fa      	movs	r2, #250	@ 0xfa
 80212a0:	4828      	ldr	r0, [pc, #160]	@ (8021344 <Argus_Dev_CheckCfg+0x37c>)
 80212a2:	f7e5 f933 	bl	800650c <print>
 80212a6:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 80212aa:	bd10      	pop	{r4, pc}
 80212ac:	33fa      	adds	r3, #250	@ 0xfa
 80212ae:	22fa      	movs	r2, #250	@ 0xfa
 80212b0:	4825      	ldr	r0, [pc, #148]	@ (8021348 <Argus_Dev_CheckCfg+0x380>)
 80212b2:	f7e5 f92b 	bl	800650c <print>
 80212b6:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 80212ba:	bd10      	pop	{r4, pc}
 80212bc:	4823      	ldr	r0, [pc, #140]	@ (802134c <Argus_Dev_CheckCfg+0x384>)
 80212be:	f7e5 f925 	bl	800650c <print>
 80212c2:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 80212c6:	bd10      	pop	{r4, pc}
 80212c8:	4821      	ldr	r0, [pc, #132]	@ (8021350 <Argus_Dev_CheckCfg+0x388>)
 80212ca:	f7e5 f91f 	bl	800650c <print>
 80212ce:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 80212d2:	bd10      	pop	{r4, pc}
 80212d4:	481f      	ldr	r0, [pc, #124]	@ (8021354 <Argus_Dev_CheckCfg+0x38c>)
 80212d6:	f7e5 f919 	bl	800650c <print>
 80212da:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 80212de:	bd10      	pop	{r4, pc}
 80212e0:	2380      	movs	r3, #128	@ 0x80
 80212e2:	2202      	movs	r2, #2
 80212e4:	481c      	ldr	r0, [pc, #112]	@ (8021358 <Argus_Dev_CheckCfg+0x390>)
 80212e6:	f7e5 f911 	bl	800650c <print>
 80212ea:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 80212ee:	bd10      	pop	{r4, pc}
 80212f0:	481a      	ldr	r0, [pc, #104]	@ (802135c <Argus_Dev_CheckCfg+0x394>)
 80212f2:	f7e5 f90b 	bl	800650c <print>
 80212f6:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 80212fa:	bd10      	pop	{r4, pc}
 80212fc:	4b18      	ldr	r3, [pc, #96]	@ (8021360 <Argus_Dev_CheckCfg+0x398>)
 80212fe:	4a19      	ldr	r2, [pc, #100]	@ (8021364 <Argus_Dev_CheckCfg+0x39c>)
 8021300:	4819      	ldr	r0, [pc, #100]	@ (8021368 <Argus_Dev_CheckCfg+0x3a0>)
 8021302:	4621      	mov	r1, r4
 8021304:	f7e5 f902 	bl	800650c <print>
 8021308:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 802130c:	bd10      	pop	{r4, pc}
 802130e:	bf00      	nop
 8021310:	00030c46 	.word	0x00030c46
 8021314:	000185a6 	.word	0x000185a6
 8021318:	feced300 	.word	0xfeced300
 802131c:	00989680 	.word	0x00989680
 8021320:	08030334 	.word	0x08030334
 8021324:	080304d8 	.word	0x080304d8
 8021328:	0802fc48 	.word	0x0802fc48
 802132c:	0803018c 	.word	0x0803018c
 8021330:	0802fc44 	.word	0x0802fc44
 8021334:	080301ec 	.word	0x080301ec
 8021338:	0803024c 	.word	0x0803024c
 802133c:	0802fedc 	.word	0x0802fedc
 8021340:	0802fc4c 	.word	0x0802fc4c
 8021344:	0802fc78 	.word	0x0802fc78
 8021348:	0802fcb8 	.word	0x0802fcb8
 802134c:	0802fe9c 	.word	0x0802fe9c
 8021350:	0802fe78 	.word	0x0802fe78
 8021354:	0802fe44 	.word	0x0802fe44
 8021358:	0802fcfc 	.word	0x0802fcfc
 802135c:	0802fde0 	.word	0x0802fde0
 8021360:	01c9c380 	.word	0x01c9c380
 8021364:	01312d00 	.word	0x01312d00
 8021368:	0802fd84 	.word	0x0802fd84
 802136c:	2380      	movs	r3, #128	@ 0x80
 802136e:	2200      	movs	r2, #0
 8021370:	4835      	ldr	r0, [pc, #212]	@ (8021448 <Argus_Dev_CheckCfg+0x480>)
 8021372:	f7e5 f8cb 	bl	800650c <print>
 8021376:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 802137a:	bd10      	pop	{r4, pc}
 802137c:	4833      	ldr	r0, [pc, #204]	@ (802144c <Argus_Dev_CheckCfg+0x484>)
 802137e:	f7e5 f8c5 	bl	800650c <print>
 8021382:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8021386:	bd10      	pop	{r4, pc}
 8021388:	4831      	ldr	r0, [pc, #196]	@ (8021450 <Argus_Dev_CheckCfg+0x488>)
 802138a:	f7e5 f8bf 	bl	800650c <print>
 802138e:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8021392:	bd10      	pop	{r4, pc}
 8021394:	482f      	ldr	r0, [pc, #188]	@ (8021454 <Argus_Dev_CheckCfg+0x48c>)
 8021396:	f7e5 f8b9 	bl	800650c <print>
 802139a:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 802139e:	bd10      	pop	{r4, pc}
 80213a0:	482d      	ldr	r0, [pc, #180]	@ (8021458 <Argus_Dev_CheckCfg+0x490>)
 80213a2:	f7e5 f8b3 	bl	800650c <print>
 80213a6:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 80213aa:	bd10      	pop	{r4, pc}
 80213ac:	482b      	ldr	r0, [pc, #172]	@ (802145c <Argus_Dev_CheckCfg+0x494>)
 80213ae:	f7e5 f8ad 	bl	800650c <print>
 80213b2:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 80213b6:	bd10      	pop	{r4, pc}
 80213b8:	4829      	ldr	r0, [pc, #164]	@ (8021460 <Argus_Dev_CheckCfg+0x498>)
 80213ba:	f7e5 f8a7 	bl	800650c <print>
 80213be:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 80213c2:	bd10      	pop	{r4, pc}
 80213c4:	4827      	ldr	r0, [pc, #156]	@ (8021464 <Argus_Dev_CheckCfg+0x49c>)
 80213c6:	f7e5 f8a1 	bl	800650c <print>
 80213ca:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 80213ce:	bd10      	pop	{r4, pc}
 80213d0:	4825      	ldr	r0, [pc, #148]	@ (8021468 <Argus_Dev_CheckCfg+0x4a0>)
 80213d2:	f7e5 f89b 	bl	800650c <print>
 80213d6:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 80213da:	bd10      	pop	{r4, pc}
 80213dc:	4823      	ldr	r0, [pc, #140]	@ (802146c <Argus_Dev_CheckCfg+0x4a4>)
 80213de:	f7e5 f895 	bl	800650c <print>
 80213e2:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 80213e6:	bd10      	pop	{r4, pc}
 80213e8:	4821      	ldr	r0, [pc, #132]	@ (8021470 <Argus_Dev_CheckCfg+0x4a8>)
 80213ea:	f7e5 f88f 	bl	800650c <print>
 80213ee:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 80213f2:	bd10      	pop	{r4, pc}
 80213f4:	481f      	ldr	r0, [pc, #124]	@ (8021474 <Argus_Dev_CheckCfg+0x4ac>)
 80213f6:	f7e5 f889 	bl	800650c <print>
 80213fa:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 80213fe:	bd10      	pop	{r4, pc}
 8021400:	481d      	ldr	r0, [pc, #116]	@ (8021478 <Argus_Dev_CheckCfg+0x4b0>)
 8021402:	f7e5 f883 	bl	800650c <print>
 8021406:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 802140a:	bd10      	pop	{r4, pc}
 802140c:	481b      	ldr	r0, [pc, #108]	@ (802147c <Argus_Dev_CheckCfg+0x4b4>)
 802140e:	f7e5 f87d 	bl	800650c <print>
 8021412:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8021416:	bd10      	pop	{r4, pc}
 8021418:	4819      	ldr	r0, [pc, #100]	@ (8021480 <Argus_Dev_CheckCfg+0x4b8>)
 802141a:	f7e5 f877 	bl	800650c <print>
 802141e:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8021422:	bd10      	pop	{r4, pc}
 8021424:	4817      	ldr	r0, [pc, #92]	@ (8021484 <Argus_Dev_CheckCfg+0x4bc>)
 8021426:	f7e5 f871 	bl	800650c <print>
 802142a:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 802142e:	bd10      	pop	{r4, pc}
 8021430:	4815      	ldr	r0, [pc, #84]	@ (8021488 <Argus_Dev_CheckCfg+0x4c0>)
 8021432:	f7e5 f86b 	bl	800650c <print>
 8021436:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 802143a:	bd10      	pop	{r4, pc}
 802143c:	4813      	ldr	r0, [pc, #76]	@ (802148c <Argus_Dev_CheckCfg+0x4c4>)
 802143e:	f7e5 f865 	bl	800650c <print>
 8021442:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8021446:	bd10      	pop	{r4, pc}
 8021448:	0802fd40 	.word	0x0802fd40
 802144c:	08030044 	.word	0x08030044
 8021450:	08030004 	.word	0x08030004
 8021454:	0802ff34 	.word	0x0802ff34
 8021458:	0802ff04 	.word	0x0802ff04
 802145c:	080300cc 	.word	0x080300cc
 8021460:	08030084 	.word	0x08030084
 8021464:	0802ffb8 	.word	0x0802ffb8
 8021468:	0802ff74 	.word	0x0802ff74
 802146c:	0803015c 	.word	0x0803015c
 8021470:	08030114 	.word	0x08030114
 8021474:	0802fe14 	.word	0x0802fe14
 8021478:	08030388 	.word	0x08030388
 802147c:	08030420 	.word	0x08030420
 8021480:	0803046c 	.word	0x0803046c
 8021484:	080302ac 	.word	0x080302ac
 8021488:	080302f4 	.word	0x080302f4
 802148c:	080303cc 	.word	0x080303cc

08021490 <Argus_Dev_PrepareCfg>:
 8021490:	f7fb bace 	b.w	801ca30 <Argus_Dca_PrepareCfg>

08021494 <Argus_Dev_Update>:
 8021494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021498:	4683      	mov	fp, r0
 802149a:	4608      	mov	r0, r1
 802149c:	f8db 111c 	ldr.w	r1, [fp, #284]	@ 0x11c
 80214a0:	4613      	mov	r3, r2
 80214a2:	b091      	sub	sp, #68	@ 0x44
 80214a4:	e9cd 3002 	strd	r3, r0, [sp, #8]
 80214a8:	3122      	adds	r1, #34	@ 0x22
 80214aa:	226c      	movs	r2, #108	@ 0x6c
 80214ac:	4604      	mov	r4, r0
 80214ae:	f10b 000c 	add.w	r0, fp, #12
 80214b2:	f009 fe12 	bl	802b0da <memcpy>
 80214b6:	f8db 2078 	ldr.w	r2, [fp, #120]	@ 0x78
 80214ba:	4bbc      	ldr	r3, [pc, #752]	@ (80217ac <Argus_Dev_Update+0x318>)
 80214bc:	f89b 10fd 	ldrb.w	r1, [fp, #253]	@ 0xfd
 80214c0:	4313      	orrs	r3, r2
 80214c2:	f8cb 3078 	str.w	r3, [fp, #120]	@ 0x78
 80214c6:	f8db 2078 	ldr.w	r2, [fp, #120]	@ 0x78
 80214ca:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80214ce:	f8cb 2078 	str.w	r2, [fp, #120]	@ 0x78
 80214d2:	f894 2021 	ldrb.w	r2, [r4, #33]	@ 0x21
 80214d6:	2a00      	cmp	r2, #0
 80214d8:	f000 81df 	beq.w	802189a <Argus_Dev_Update+0x406>
 80214dc:	f021 0301 	bic.w	r3, r1, #1
 80214e0:	f043 0302 	orr.w	r3, r3, #2
 80214e4:	f89b 2064 	ldrb.w	r2, [fp, #100]	@ 0x64
 80214e8:	9802      	ldr	r0, [sp, #8]
 80214ea:	f023 030c 	bic.w	r3, r3, #12
 80214ee:	f002 0203 	and.w	r2, r2, #3
 80214f2:	ea43 0282 	orr.w	r2, r3, r2, lsl #2
 80214f6:	f8bb 305d 	ldrh.w	r3, [fp, #93]	@ 0x5d
 80214fa:	f88b 20fd 	strb.w	r2, [fp, #253]	@ 0xfd
 80214fe:	f990 1296 	ldrsb.w	r1, [r0, #662]	@ 0x296
 8021502:	f89b 205e 	ldrb.w	r2, [fp, #94]	@ 0x5e
 8021506:	ba5b      	rev16	r3, r3
 8021508:	f3c3 1385 	ubfx	r3, r3, #6, #6
 802150c:	440b      	add	r3, r1
 802150e:	f383 0306 	usat	r3, #6, r3
 8021512:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8021516:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 802151a:	f88b 205e 	strb.w	r2, [fp, #94]	@ 0x5e
 802151e:	f89b 205d 	ldrb.w	r2, [fp, #93]	@ 0x5d
 8021522:	f3c3 0397 	ubfx	r3, r3, #2, #24
 8021526:	f022 020f 	bic.w	r2, r2, #15
 802152a:	4313      	orrs	r3, r2
 802152c:	f88b 305d 	strb.w	r3, [fp, #93]	@ 0x5d
 8021530:	f990 129c 	ldrsb.w	r1, [r0, #668]	@ 0x29c
 8021534:	f89b 204f 	ldrb.w	r2, [fp, #79]	@ 0x4f
 8021538:	1d0e      	adds	r6, r1, #4
 802153a:	f000 8272 	beq.w	8021a22 <Argus_Dev_Update+0x58e>
 802153e:	f3c2 0343 	ubfx	r3, r2, #1, #4
 8021542:	440b      	add	r3, r1
 8021544:	2b0e      	cmp	r3, #14
 8021546:	bfdd      	ittte	le
 8021548:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 802154c:	005b      	lslle	r3, r3, #1
 802154e:	b25b      	sxtble	r3, r3
 8021550:	231e      	movgt	r3, #30
 8021552:	f022 021e 	bic.w	r2, r2, #30
 8021556:	4313      	orrs	r3, r2
 8021558:	f88b 304f 	strb.w	r3, [fp, #79]	@ 0x4f
 802155c:	9b03      	ldr	r3, [sp, #12]
 802155e:	781b      	ldrb	r3, [r3, #0]
 8021560:	075d      	lsls	r5, r3, #29
 8021562:	f140 8191 	bpl.w	8021888 <Argus_Dev_Update+0x3f4>
 8021566:	f89b 3072 	ldrb.w	r3, [fp, #114]	@ 0x72
 802156a:	f89b 2071 	ldrb.w	r2, [fp, #113]	@ 0x71
 802156e:	9802      	ldr	r0, [sp, #8]
 8021570:	021b      	lsls	r3, r3, #8
 8021572:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021576:	f89b 2073 	ldrb.w	r2, [fp, #115]	@ 0x73
 802157a:	f890 429e 	ldrb.w	r4, [r0, #670]	@ 0x29e
 802157e:	f890 e01b 	ldrb.w	lr, [r0, #27]
 8021582:	f890 529d 	ldrb.w	r5, [r0, #669]	@ 0x29d
 8021586:	940b      	str	r4, [sp, #44]	@ 0x2c
 8021588:	4313      	orrs	r3, r2
 802158a:	f8bb 2075 	ldrh.w	r2, [fp, #117]	@ 0x75
 802158e:	9309      	str	r3, [sp, #36]	@ 0x24
 8021590:	ba52      	rev16	r2, r2
 8021592:	b292      	uxth	r2, r2
 8021594:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8021598:	0a13      	lsrs	r3, r2, #8
 802159a:	0f91      	lsrs	r1, r2, #30
 802159c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80215a0:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 80215a4:	0d91      	lsrs	r1, r2, #22
 80215a6:	f001 01c0 	and.w	r1, r1, #192	@ 0xc0
 80215aa:	430b      	orrs	r3, r1
 80215ac:	0891      	lsrs	r1, r2, #2
 80215ae:	f401 7140 	and.w	r1, r1, #768	@ 0x300
 80215b2:	430b      	orrs	r3, r1
 80215b4:	0c11      	lsrs	r1, r2, #16
 80215b6:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 80215ba:	430b      	orrs	r3, r1
 80215bc:	0111      	lsls	r1, r2, #4
 80215be:	f401 5140 	and.w	r1, r1, #12288	@ 0x3000
 80215c2:	430b      	orrs	r3, r1
 80215c4:	0a91      	lsrs	r1, r2, #10
 80215c6:	f401 4140 	and.w	r1, r1, #49152	@ 0xc000
 80215ca:	430b      	orrs	r3, r1
 80215cc:	0291      	lsls	r1, r2, #10
 80215ce:	f401 3140 	and.w	r1, r1, #196608	@ 0x30000
 80215d2:	430b      	orrs	r3, r1
 80215d4:	0911      	lsrs	r1, r2, #4
 80215d6:	f401 2140 	and.w	r1, r1, #786432	@ 0xc0000
 80215da:	430b      	orrs	r3, r1
 80215dc:	0411      	lsls	r1, r2, #16
 80215de:	f401 1140 	and.w	r1, r1, #3145728	@ 0x300000
 80215e2:	430b      	orrs	r3, r1
 80215e4:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 80215e8:	f3c2 3181 	ubfx	r1, r2, #14, #2
 80215ec:	430b      	orrs	r3, r1
 80215ee:	f40a 0a40 	and.w	sl, sl, #12582912	@ 0xc00000
 80215f2:	ea4a 0a03 	orr.w	sl, sl, r3
 80215f6:	0593      	lsls	r3, r2, #22
 80215f8:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80215fc:	ea43 0a0a 	orr.w	sl, r3, sl
 8021600:	0213      	lsls	r3, r2, #8
 8021602:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8021606:	ea43 030a 	orr.w	r3, r3, sl
 802160a:	7e81      	ldrb	r1, [r0, #26]
 802160c:	950a      	str	r5, [sp, #40]	@ 0x28
 802160e:	ea4f 7a02 	mov.w	sl, r2, lsl #28
 8021612:	eba4 070e 	sub.w	r7, r4, lr
 8021616:	f00a 5a40 	and.w	sl, sl, #805306368	@ 0x30000000
 802161a:	ea4a 0a03 	orr.w	sl, sl, r3
 802161e:	b2ff      	uxtb	r7, r7
 8021620:	1a6b      	subs	r3, r5, r1
 8021622:	433b      	orrs	r3, r7
 8021624:	0c10      	lsrs	r0, r2, #16
 8021626:	b2db      	uxtb	r3, r3
 8021628:	ea4a 7a80 	orr.w	sl, sl, r0, lsl #30
 802162c:	2b00      	cmp	r3, #0
 802162e:	f000 81fa 	beq.w	8021a26 <Argus_Dev_Update+0x592>
 8021632:	1b4b      	subs	r3, r1, r5
 8021634:	ebae 0104 	sub.w	r1, lr, r4
 8021638:	b2c8      	uxtb	r0, r1
 802163a:	b2db      	uxtb	r3, r3
 802163c:	f100 0901 	add.w	r9, r0, #1
 8021640:	f100 0c02 	add.w	ip, r0, #2
 8021644:	1cc4      	adds	r4, r0, #3
 8021646:	b249      	sxtb	r1, r1
 8021648:	9004      	str	r0, [sp, #16]
 802164a:	1e58      	subs	r0, r3, #1
 802164c:	9108      	str	r1, [sp, #32]
 802164e:	b2c1      	uxtb	r1, r0
 8021650:	fa5f f089 	uxtb.w	r0, r9
 8021654:	900c      	str	r0, [sp, #48]	@ 0x30
 8021656:	fa4f f089 	sxtb.w	r0, r9
 802165a:	9005      	str	r0, [sp, #20]
 802165c:	fa5f f08c 	uxtb.w	r0, ip
 8021660:	9001      	str	r0, [sp, #4]
 8021662:	fa4f f08c 	sxtb.w	r0, ip
 8021666:	9006      	str	r0, [sp, #24]
 8021668:	b2e0      	uxtb	r0, r4
 802166a:	f00e 0e01 	and.w	lr, lr, #1
 802166e:	9100      	str	r1, [sp, #0]
 8021670:	900d      	str	r0, [sp, #52]	@ 0x34
 8021672:	f103 0801 	add.w	r8, r3, #1
 8021676:	2600      	movs	r6, #0
 8021678:	b264      	sxtb	r4, r4
 802167a:	f007 0701 	and.w	r7, r7, #1
 802167e:	9800      	ldr	r0, [sp, #0]
 8021680:	920e      	str	r2, [sp, #56]	@ 0x38
 8021682:	f8cd e000 	str.w	lr, [sp]
 8021686:	fa5f f588 	uxtb.w	r5, r8
 802168a:	e9dd e90c 	ldrd	lr, r9, [sp, #48]	@ 0x30
 802168e:	9407      	str	r4, [sp, #28]
 8021690:	46b4      	mov	ip, r6
 8021692:	f8cd b03c 	str.w	fp, [sp, #60]	@ 0x3c
 8021696:	b25a      	sxtb	r2, r3
 8021698:	2f00      	cmp	r7, #0
 802169a:	d073      	beq.n	8021784 <Argus_Dev_Update+0x2f0>
 802169c:	9900      	ldr	r1, [sp, #0]
 802169e:	2900      	cmp	r1, #0
 80216a0:	f040 810d 	bne.w	80218be <Argus_Dev_Update+0x42a>
 80216a4:	b26c      	sxtb	r4, r5
 80216a6:	46ab      	mov	fp, r5
 80216a8:	f1bb 0f07 	cmp.w	fp, #7
 80216ac:	d80d      	bhi.n	80216ca <Argus_Dev_Update+0x236>
 80216ae:	9904      	ldr	r1, [sp, #16]
 80216b0:	2903      	cmp	r1, #3
 80216b2:	d80a      	bhi.n	80216ca <Argus_Dev_Update+0x236>
 80216b4:	9908      	ldr	r1, [sp, #32]
 80216b6:	ea41 0484 	orr.w	r4, r1, r4, lsl #2
 80216ba:	fa2a f404 	lsr.w	r4, sl, r4
 80216be:	07e1      	lsls	r1, r4, #31
 80216c0:	d503      	bpl.n	80216ca <Argus_Dev_Update+0x236>
 80216c2:	2401      	movs	r4, #1
 80216c4:	40b4      	lsls	r4, r6
 80216c6:	ea4c 0c04 	orr.w	ip, ip, r4
 80216ca:	9900      	ldr	r1, [sp, #0]
 80216cc:	2900      	cmp	r1, #0
 80216ce:	f000 80f0 	beq.w	80218b2 <Argus_Dev_Update+0x41e>
 80216d2:	b244      	sxtb	r4, r0
 80216d4:	4683      	mov	fp, r0
 80216d6:	f1bb 0f07 	cmp.w	fp, #7
 80216da:	d813      	bhi.n	8021704 <Argus_Dev_Update+0x270>
 80216dc:	f1be 0f03 	cmp.w	lr, #3
 80216e0:	d80d      	bhi.n	80216fe <Argus_Dev_Update+0x26a>
 80216e2:	9905      	ldr	r1, [sp, #20]
 80216e4:	ea41 0484 	orr.w	r4, r1, r4, lsl #2
 80216e8:	fa2a f404 	lsr.w	r4, sl, r4
 80216ec:	07e4      	lsls	r4, r4, #31
 80216ee:	d506      	bpl.n	80216fe <Argus_Dev_Update+0x26a>
 80216f0:	f046 0b01 	orr.w	fp, r6, #1
 80216f4:	2401      	movs	r4, #1
 80216f6:	fa04 f40b 	lsl.w	r4, r4, fp
 80216fa:	ea4c 0c04 	orr.w	ip, ip, r4
 80216fe:	2f00      	cmp	r7, #0
 8021700:	f000 80ce 	beq.w	80218a0 <Argus_Dev_Update+0x40c>
 8021704:	9900      	ldr	r1, [sp, #0]
 8021706:	2900      	cmp	r1, #0
 8021708:	f040 80d6 	bne.w	80218b8 <Argus_Dev_Update+0x424>
 802170c:	b26c      	sxtb	r4, r5
 802170e:	46ab      	mov	fp, r5
 8021710:	f1bb 0f07 	cmp.w	fp, #7
 8021714:	d811      	bhi.n	802173a <Argus_Dev_Update+0x2a6>
 8021716:	9901      	ldr	r1, [sp, #4]
 8021718:	2903      	cmp	r1, #3
 802171a:	d80d      	bhi.n	8021738 <Argus_Dev_Update+0x2a4>
 802171c:	9906      	ldr	r1, [sp, #24]
 802171e:	ea41 0484 	orr.w	r4, r1, r4, lsl #2
 8021722:	fa2a f404 	lsr.w	r4, sl, r4
 8021726:	07e1      	lsls	r1, r4, #31
 8021728:	d506      	bpl.n	8021738 <Argus_Dev_Update+0x2a4>
 802172a:	f046 0b02 	orr.w	fp, r6, #2
 802172e:	2401      	movs	r4, #1
 8021730:	fa04 f40b 	lsl.w	r4, r4, fp
 8021734:	ea4c 0c04 	orr.w	ip, ip, r4
 8021738:	b11f      	cbz	r7, 8021742 <Argus_Dev_Update+0x2ae>
 802173a:	9900      	ldr	r1, [sp, #0]
 802173c:	b109      	cbz	r1, 8021742 <Argus_Dev_Update+0x2ae>
 802173e:	b242      	sxtb	r2, r0
 8021740:	4603      	mov	r3, r0
 8021742:	2b07      	cmp	r3, #7
 8021744:	d80f      	bhi.n	8021766 <Argus_Dev_Update+0x2d2>
 8021746:	f1b9 0f03 	cmp.w	r9, #3
 802174a:	d80c      	bhi.n	8021766 <Argus_Dev_Update+0x2d2>
 802174c:	9b07      	ldr	r3, [sp, #28]
 802174e:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8021752:	fa2a f303 	lsr.w	r3, sl, r3
 8021756:	07db      	lsls	r3, r3, #31
 8021758:	d505      	bpl.n	8021766 <Argus_Dev_Update+0x2d2>
 802175a:	f046 0203 	orr.w	r2, r6, #3
 802175e:	2301      	movs	r3, #1
 8021760:	4093      	lsls	r3, r2
 8021762:	ea4c 0c03 	orr.w	ip, ip, r3
 8021766:	3604      	adds	r6, #4
 8021768:	3001      	adds	r0, #1
 802176a:	3501      	adds	r5, #1
 802176c:	2e20      	cmp	r6, #32
 802176e:	fa5f f388 	uxtb.w	r3, r8
 8021772:	b2c0      	uxtb	r0, r0
 8021774:	b2ed      	uxtb	r5, r5
 8021776:	f000 80a5 	beq.w	80218c4 <Argus_Dev_Update+0x430>
 802177a:	f103 0801 	add.w	r8, r3, #1
 802177e:	b25a      	sxtb	r2, r3
 8021780:	2f00      	cmp	r7, #0
 8021782:	d18b      	bne.n	802169c <Argus_Dev_Update+0x208>
 8021784:	2b07      	cmp	r3, #7
 8021786:	d8ee      	bhi.n	8021766 <Argus_Dev_Update+0x2d2>
 8021788:	9904      	ldr	r1, [sp, #16]
 802178a:	2903      	cmp	r1, #3
 802178c:	f200 8143 	bhi.w	8021a16 <Argus_Dev_Update+0x582>
 8021790:	9908      	ldr	r1, [sp, #32]
 8021792:	ea41 0482 	orr.w	r4, r1, r2, lsl #2
 8021796:	fa2a f404 	lsr.w	r4, sl, r4
 802179a:	07e4      	lsls	r4, r4, #31
 802179c:	d503      	bpl.n	80217a6 <Argus_Dev_Update+0x312>
 802179e:	2401      	movs	r4, #1
 80217a0:	40b4      	lsls	r4, r6
 80217a2:	ea4c 0c04 	orr.w	ip, ip, r4
 80217a6:	4614      	mov	r4, r2
 80217a8:	e798      	b.n	80216dc <Argus_Dev_Update+0x248>
 80217aa:	bf00      	nop
 80217ac:	0003dffe 	.word	0x0003dffe
 80217b0:	2301      	movs	r3, #1
 80217b2:	ea4c 0c8e 	orr.w	ip, ip, lr, lsl #2
 80217b6:	fa03 fc0c 	lsl.w	ip, r3, ip
 80217ba:	ea41 010c 	orr.w	r1, r1, ip
 80217be:	fa21 f203 	lsr.w	r2, r1, r3
 80217c2:	f002 3255 	and.w	r2, r2, #1431655765	@ 0x55555555
 80217c6:	1a8a      	subs	r2, r1, r2
 80217c8:	0893      	lsrs	r3, r2, #2
 80217ca:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 80217ce:	f002 3233 	and.w	r2, r2, #858993459	@ 0x33333333
 80217d2:	4413      	add	r3, r2
 80217d4:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 80217d8:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 80217dc:	9a00      	ldr	r2, [sp, #0]
 80217de:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 80217e2:	eb03 4303 	add.w	r3, r3, r3, lsl #16
 80217e6:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
 80217ea:	f200 80bc 	bhi.w	8021966 <Argus_Dev_Update+0x4d2>
 80217ee:	f8dd b010 	ldr.w	fp, [sp, #16]
 80217f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80217f4:	0c1b      	lsrs	r3, r3, #16
 80217f6:	f88b 3071 	strb.w	r3, [fp, #113]	@ 0x71
 80217fa:	0c0a      	lsrs	r2, r1, #16
 80217fc:	0d8b      	lsrs	r3, r1, #22
 80217fe:	f003 030c 	and.w	r3, r3, #12
 8021802:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8021806:	431a      	orrs	r2, r3
 8021808:	0a8b      	lsrs	r3, r1, #10
 802180a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 802180e:	431a      	orrs	r2, r3
 8021810:	090b      	lsrs	r3, r1, #4
 8021812:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8021816:	431a      	orrs	r2, r3
 8021818:	008b      	lsls	r3, r1, #2
 802181a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 802181e:	431a      	orrs	r2, r3
 8021820:	020b      	lsls	r3, r1, #8
 8021822:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8021826:	431a      	orrs	r2, r3
 8021828:	038b      	lsls	r3, r1, #14
 802182a:	b29b      	uxth	r3, r3
 802182c:	431a      	orrs	r2, r3
 802182e:	0f8b      	lsrs	r3, r1, #30
 8021830:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8021834:	0a0b      	lsrs	r3, r1, #8
 8021836:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 802183a:	431a      	orrs	r2, r3
 802183c:	088b      	lsrs	r3, r1, #2
 802183e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8021842:	431a      	orrs	r2, r3
 8021844:	010b      	lsls	r3, r1, #4
 8021846:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 802184a:	431a      	orrs	r2, r3
 802184c:	028b      	lsls	r3, r1, #10
 802184e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8021852:	431a      	orrs	r2, r3
 8021854:	040b      	lsls	r3, r1, #16
 8021856:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 802185a:	431a      	orrs	r2, r3
 802185c:	058b      	lsls	r3, r1, #22
 802185e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8021862:	431a      	orrs	r2, r3
 8021864:	088b      	lsrs	r3, r1, #2
 8021866:	ea42 7283 	orr.w	r2, r2, r3, lsl #30
 802186a:	f3c1 7301 	ubfx	r3, r1, #28, #2
 802186e:	4313      	orrs	r3, r2
 8021870:	0a12      	lsrs	r2, r2, #8
 8021872:	f88b 2075 	strb.w	r2, [fp, #117]	@ 0x75
 8021876:	f88b 3076 	strb.w	r3, [fp, #118]	@ 0x76
 802187a:	0c1a      	lsrs	r2, r3, #16
 802187c:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8021880:	f88b 2073 	strb.w	r2, [fp, #115]	@ 0x73
 8021884:	f88b 3072 	strb.w	r3, [fp, #114]	@ 0x72
 8021888:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 802188c:	f50b 70b4 	add.w	r0, fp, #360	@ 0x168
 8021890:	b011      	add	sp, #68	@ 0x44
 8021892:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021896:	f7fb bbeb 	b.w	801d070 <Argus_Dca_Update>
 802189a:	f041 0302 	orr.w	r3, r1, #2
 802189e:	e621      	b.n	80214e4 <Argus_Dev_Update+0x50>
 80218a0:	2b07      	cmp	r3, #7
 80218a2:	f63f af60 	bhi.w	8021766 <Argus_Dev_Update+0x2d2>
 80218a6:	9901      	ldr	r1, [sp, #4]
 80218a8:	2903      	cmp	r1, #3
 80218aa:	f63f af4c 	bhi.w	8021746 <Argus_Dev_Update+0x2b2>
 80218ae:	4614      	mov	r4, r2
 80218b0:	e734      	b.n	802171c <Argus_Dev_Update+0x288>
 80218b2:	469b      	mov	fp, r3
 80218b4:	4614      	mov	r4, r2
 80218b6:	e70e      	b.n	80216d6 <Argus_Dev_Update+0x242>
 80218b8:	469b      	mov	fp, r3
 80218ba:	4614      	mov	r4, r2
 80218bc:	e728      	b.n	8021710 <Argus_Dev_Update+0x27c>
 80218be:	469b      	mov	fp, r3
 80218c0:	4614      	mov	r4, r2
 80218c2:	e6f1      	b.n	80216a8 <Argus_Dev_Update+0x214>
 80218c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80218c6:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 80218ca:	4661      	mov	r1, ip
 80218cc:	0853      	lsrs	r3, r2, #1
 80218ce:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 80218d2:	1ad2      	subs	r2, r2, r3
 80218d4:	0893      	lsrs	r3, r2, #2
 80218d6:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 80218da:	f002 3233 	and.w	r2, r2, #858993459	@ 0x33333333
 80218de:	4413      	add	r3, r2
 80218e0:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 80218e4:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 80218e8:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 80218ec:	eb03 4303 	add.w	r3, r3, r3, lsl #16
 80218f0:	0e18      	lsrs	r0, r3, #24
 80218f2:	2820      	cmp	r0, #32
 80218f4:	9000      	str	r0, [sp, #0]
 80218f6:	f000 8098 	beq.w	8021a2a <Argus_Dev_Update+0x596>
 80218fa:	084b      	lsrs	r3, r1, #1
 80218fc:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8021900:	1acb      	subs	r3, r1, r3
 8021902:	089a      	lsrs	r2, r3, #2
 8021904:	f002 3233 	and.w	r2, r2, #858993459	@ 0x33333333
 8021908:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 802190c:	4413      	add	r3, r2
 802190e:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 8021912:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8021916:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 802191a:	eb03 4303 	add.w	r3, r3, r3, lsl #16
 802191e:	ebb0 6f13 	cmp.w	r0, r3, lsr #24
 8021922:	f67f af66 	bls.w	80217f2 <Argus_Dev_Update+0x35e>
 8021926:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021928:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802192a:	f8cd b010 	str.w	fp, [sp, #16]
 802192e:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
 8021932:	005b      	lsls	r3, r3, #1
 8021934:	9301      	str	r3, [sp, #4]
 8021936:	f1c2 0a01 	rsb	sl, r2, #1
 802193a:	f1c2 0902 	rsb	r9, r2, #2
 802193e:	f1c2 0803 	rsb	r8, r2, #3
 8021942:	0053      	lsls	r3, r2, #1
 8021944:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8021948:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802194c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8021950:	fb03 f303 	mul.w	r3, r3, r3
 8021954:	fb0a fa0a 	mul.w	sl, sl, sl
 8021958:	fb09 f909 	mul.w	r9, r9, r9
 802195c:	fb08 f808 	mul.w	r8, r8, r8
 8021960:	f002 0401 	and.w	r4, r2, #1
 8021964:	469b      	mov	fp, r3
 8021966:	f04f 3cff 	mov.w	ip, #4294967295
 802196a:	9801      	ldr	r0, [sp, #4]
 802196c:	2200      	movs	r2, #0
 802196e:	46e6      	mov	lr, ip
 8021970:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 8021974:	e03f      	b.n	80219f6 <Argus_Dev_Update+0x562>
 8021976:	1c47      	adds	r7, r0, #1
 8021978:	fb07 b707 	mla	r7, r7, r7, fp
 802197c:	42b7      	cmp	r7, r6
 802197e:	da03      	bge.n	8021988 <Argus_Dev_Update+0x4f4>
 8021980:	463e      	mov	r6, r7
 8021982:	46ae      	mov	lr, r5
 8021984:	f04f 0c00 	mov.w	ip, #0
 8021988:	f043 0701 	orr.w	r7, r3, #1
 802198c:	fa21 f707 	lsr.w	r7, r1, r7
 8021990:	07ff      	lsls	r7, r7, #31
 8021992:	d40a      	bmi.n	80219aa <Argus_Dev_Update+0x516>
 8021994:	2c00      	cmp	r4, #0
 8021996:	d13a      	bne.n	8021a0e <Argus_Dev_Update+0x57a>
 8021998:	1e47      	subs	r7, r0, #1
 802199a:	fb07 a707 	mla	r7, r7, r7, sl
 802199e:	42b7      	cmp	r7, r6
 80219a0:	da03      	bge.n	80219aa <Argus_Dev_Update+0x516>
 80219a2:	463e      	mov	r6, r7
 80219a4:	46ae      	mov	lr, r5
 80219a6:	f04f 0c01 	mov.w	ip, #1
 80219aa:	f043 0702 	orr.w	r7, r3, #2
 80219ae:	fa21 f707 	lsr.w	r7, r1, r7
 80219b2:	07ff      	lsls	r7, r7, #31
 80219b4:	d409      	bmi.n	80219ca <Argus_Dev_Update+0x536>
 80219b6:	b364      	cbz	r4, 8021a12 <Argus_Dev_Update+0x57e>
 80219b8:	1c47      	adds	r7, r0, #1
 80219ba:	fb07 9707 	mla	r7, r7, r7, r9
 80219be:	42b7      	cmp	r7, r6
 80219c0:	da03      	bge.n	80219ca <Argus_Dev_Update+0x536>
 80219c2:	463e      	mov	r6, r7
 80219c4:	46ae      	mov	lr, r5
 80219c6:	f04f 0c02 	mov.w	ip, #2
 80219ca:	f043 0303 	orr.w	r3, r3, #3
 80219ce:	fa21 f303 	lsr.w	r3, r1, r3
 80219d2:	07df      	lsls	r7, r3, #31
 80219d4:	d409      	bmi.n	80219ea <Argus_Dev_Update+0x556>
 80219d6:	b9c4      	cbnz	r4, 8021a0a <Argus_Dev_Update+0x576>
 80219d8:	1e43      	subs	r3, r0, #1
 80219da:	fb03 8303 	mla	r3, r3, r3, r8
 80219de:	42b3      	cmp	r3, r6
 80219e0:	da03      	bge.n	80219ea <Argus_Dev_Update+0x556>
 80219e2:	46ae      	mov	lr, r5
 80219e4:	461e      	mov	r6, r3
 80219e6:	f04f 0c03 	mov.w	ip, #3
 80219ea:	3201      	adds	r2, #1
 80219ec:	2a08      	cmp	r2, #8
 80219ee:	f100 0002 	add.w	r0, r0, #2
 80219f2:	f43f aedd 	beq.w	80217b0 <Argus_Dev_Update+0x31c>
 80219f6:	0093      	lsls	r3, r2, #2
 80219f8:	fa21 f703 	lsr.w	r7, r1, r3
 80219fc:	07ff      	lsls	r7, r7, #31
 80219fe:	b255      	sxtb	r5, r2
 8021a00:	d4c2      	bmi.n	8021988 <Argus_Dev_Update+0x4f4>
 8021a02:	2c00      	cmp	r4, #0
 8021a04:	d1b7      	bne.n	8021976 <Argus_Dev_Update+0x4e2>
 8021a06:	4607      	mov	r7, r0
 8021a08:	e7b6      	b.n	8021978 <Argus_Dev_Update+0x4e4>
 8021a0a:	4603      	mov	r3, r0
 8021a0c:	e7e5      	b.n	80219da <Argus_Dev_Update+0x546>
 8021a0e:	4607      	mov	r7, r0
 8021a10:	e7c3      	b.n	802199a <Argus_Dev_Update+0x506>
 8021a12:	4607      	mov	r7, r0
 8021a14:	e7d1      	b.n	80219ba <Argus_Dev_Update+0x526>
 8021a16:	f1be 0f03 	cmp.w	lr, #3
 8021a1a:	f63f af41 	bhi.w	80218a0 <Argus_Dev_Update+0x40c>
 8021a1e:	4614      	mov	r4, r2
 8021a20:	e65f      	b.n	80216e2 <Argus_Dev_Update+0x24e>
 8021a22:	2300      	movs	r3, #0
 8021a24:	e595      	b.n	8021552 <Argus_Dev_Update+0xbe>
 8021a26:	4651      	mov	r1, sl
 8021a28:	e750      	b.n	80218cc <Argus_Dev_Update+0x438>
 8021a2a:	f04f 31ff 	mov.w	r1, #4294967295
 8021a2e:	e6e0      	b.n	80217f2 <Argus_Dev_Update+0x35e>

08021a30 <Argus_Dev_UpdateLaserTemperatureCompensation>:
 8021a30:	b530      	push	{r4, r5, lr}
 8021a32:	f8d0 411c 	ldr.w	r4, [r0, #284]	@ 0x11c
 8021a36:	f8b4 c067 	ldrh.w	ip, [r4, #103]	@ 0x67
 8021a3a:	f894 e068 	ldrb.w	lr, [r4, #104]	@ 0x68
 8021a3e:	fa9c fc9c 	rev16.w	ip, ip
 8021a42:	f41c 6ff8 	tst.w	ip, #1984	@ 0x7c0
 8021a46:	f3cc 1384 	ubfx	r3, ip, #6, #5
 8021a4a:	d028      	beq.n	8021a9e <Argus_Dev_UpdateLaserTemperatureCompensation+0x6e>
 8021a4c:	fb01 f503 	mul.w	r5, r1, r3
 8021a50:	f3c5 33c0 	ubfx	r3, r5, #15, #1
 8021a54:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 8021a58:	2b01      	cmp	r3, #1
 8021a5a:	f8b0 c051 	ldrh.w	ip, [r0, #81]	@ 0x51
 8021a5e:	bf38      	it	cc
 8021a60:	2301      	movcc	r3, #1
 8021a62:	2b1f      	cmp	r3, #31
 8021a64:	fa9c fc9c 	rev16.w	ip, ip
 8021a68:	f3cc 1c84 	ubfx	ip, ip, #6, #5
 8021a6c:	bf28      	it	cs
 8021a6e:	231f      	movcs	r3, #31
 8021a70:	4563      	cmp	r3, ip
 8021a72:	d014      	beq.n	8021a9e <Argus_Dev_UpdateLaserTemperatureCompensation+0x6e>
 8021a74:	f890 5052 	ldrb.w	r5, [r0, #82]	@ 0x52
 8021a78:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 8021a7c:	ea45 1583 	orr.w	r5, r5, r3, lsl #6
 8021a80:	f880 5052 	strb.w	r5, [r0, #82]	@ 0x52
 8021a84:	f890 5051 	ldrb.w	r5, [r0, #81]	@ 0x51
 8021a88:	f3c3 0397 	ubfx	r3, r3, #2, #24
 8021a8c:	f025 0507 	bic.w	r5, r5, #7
 8021a90:	432b      	orrs	r3, r5
 8021a92:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
 8021a96:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8021a98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021a9c:	6783      	str	r3, [r0, #120]	@ 0x78
 8021a9e:	f894 3069 	ldrb.w	r3, [r4, #105]	@ 0x69
 8021aa2:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 8021aa6:	f413 7ff8 	tst.w	r3, #496	@ 0x1f0
 8021aaa:	f3c3 1404 	ubfx	r4, r3, #4, #5
 8021aae:	d027      	beq.n	8021b00 <Argus_Dev_UpdateLaserTemperatureCompensation+0xd0>
 8021ab0:	fb01 f404 	mul.w	r4, r1, r4
 8021ab4:	f3c4 31c0 	ubfx	r1, r4, #15, #1
 8021ab8:	eb01 4114 	add.w	r1, r1, r4, lsr #16
 8021abc:	2901      	cmp	r1, #1
 8021abe:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
 8021ac2:	bf38      	it	cc
 8021ac4:	2101      	movcc	r1, #1
 8021ac6:	291f      	cmp	r1, #31
 8021ac8:	ba5b      	rev16	r3, r3
 8021aca:	bf28      	it	cs
 8021acc:	211f      	movcs	r1, #31
 8021ace:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8021ad2:	4299      	cmp	r1, r3
 8021ad4:	d014      	beq.n	8021b00 <Argus_Dev_UpdateLaserTemperatureCompensation+0xd0>
 8021ad6:	f890 4053 	ldrb.w	r4, [r0, #83]	@ 0x53
 8021ada:	f890 3052 	ldrb.w	r3, [r0, #82]	@ 0x52
 8021ade:	f004 040f 	and.w	r4, r4, #15
 8021ae2:	ea44 1401 	orr.w	r4, r4, r1, lsl #4
 8021ae6:	f880 4053 	strb.w	r4, [r0, #83]	@ 0x53
 8021aea:	6f84      	ldr	r4, [r0, #120]	@ 0x78
 8021aec:	f023 0301 	bic.w	r3, r3, #1
 8021af0:	f3c1 1117 	ubfx	r1, r1, #4, #24
 8021af4:	4319      	orrs	r1, r3
 8021af6:	f044 0440 	orr.w	r4, r4, #64	@ 0x40
 8021afa:	f880 1052 	strb.w	r1, [r0, #82]	@ 0x52
 8021afe:	6784      	str	r4, [r0, #120]	@ 0x78
 8021b00:	0852      	lsrs	r2, r2, #1
 8021b02:	2a01      	cmp	r2, #1
 8021b04:	bf38      	it	cc
 8021b06:	2201      	movcc	r2, #1
 8021b08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8021b0c:	429a      	cmp	r2, r3
 8021b0e:	bf28      	it	cs
 8021b10:	461a      	movcs	r2, r3
 8021b12:	f8a0 2184 	strh.w	r2, [r0, #388]	@ 0x184
 8021b16:	bd30      	pop	{r4, r5, pc}

08021b18 <Argus_Dev_GetPixelCount>:
 8021b18:	f890 208c 	ldrb.w	r2, [r0, #140]	@ 0x8c
 8021b1c:	f890 c08b 	ldrb.w	ip, [r0, #139]	@ 0x8b
 8021b20:	f8b0 308f 	ldrh.w	r3, [r0, #143]	@ 0x8f
 8021b24:	f890 108d 	ldrb.w	r1, [r0, #141]	@ 0x8d
 8021b28:	0210      	lsls	r0, r2, #8
 8021b2a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8021b2e:	ba5b      	rev16	r3, r3
 8021b30:	4308      	orrs	r0, r1
 8021b32:	b29b      	uxth	r3, r3
 8021b34:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8021b38:	085a      	lsrs	r2, r3, #1
 8021b3a:	f002 3255 	and.w	r2, r2, #1431655765	@ 0x55555555
 8021b3e:	1a9b      	subs	r3, r3, r2
 8021b40:	089a      	lsrs	r2, r3, #2
 8021b42:	f002 3233 	and.w	r2, r2, #858993459	@ 0x33333333
 8021b46:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8021b4a:	4413      	add	r3, r2
 8021b4c:	eb03 1313 	add.w	r3, r3, r3, lsr #4
 8021b50:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8021b54:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 8021b58:	eb03 4303 	add.w	r3, r3, r3, lsl #16
 8021b5c:	f3c0 4000 	ubfx	r0, r0, #16, #1
 8021b60:	eb00 6013 	add.w	r0, r0, r3, lsr #24
 8021b64:	4770      	bx	lr
 8021b66:	bf00      	nop

08021b68 <Argus_Dev_GetFrameConfig>:
 8021b68:	f890 3072 	ldrb.w	r3, [r0, #114]	@ 0x72
 8021b6c:	f890 c071 	ldrb.w	ip, [r0, #113]	@ 0x71
 8021b70:	f8b0 2075 	ldrh.w	r2, [r0, #117]	@ 0x75
 8021b74:	b570      	push	{r4, r5, r6, lr}
 8021b76:	021b      	lsls	r3, r3, #8
 8021b78:	f890 4073 	ldrb.w	r4, [r0, #115]	@ 0x73
 8021b7c:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8021b80:	ba52      	rev16	r2, r2
 8021b82:	4323      	orrs	r3, r4
 8021b84:	b292      	uxth	r2, r2
 8021b86:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8021b8a:	f8d0 41c4 	ldr.w	r4, [r0, #452]	@ 0x1c4
 8021b8e:	604a      	str	r2, [r1, #4]
 8021b90:	f890 206e 	ldrb.w	r2, [r0, #110]	@ 0x6e
 8021b94:	f890 c06d 	ldrb.w	ip, [r0, #109]	@ 0x6d
 8021b98:	0212      	lsls	r2, r2, #8
 8021b9a:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8021b9e:	f890 c06f 	ldrb.w	ip, [r0, #111]	@ 0x6f
 8021ba2:	0c1b      	lsrs	r3, r3, #16
 8021ba4:	ea42 020c 	orr.w	r2, r2, ip
 8021ba8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8021bac:	608b      	str	r3, [r1, #8]
 8021bae:	f8b0 306a 	ldrh.w	r3, [r0, #106]	@ 0x6a
 8021bb2:	ba5b      	rev16	r3, r3
 8021bb4:	f3c3 1349 	ubfx	r3, r3, #5, #10
 8021bb8:	3301      	adds	r3, #1
 8021bba:	824b      	strh	r3, [r1, #18]
 8021bbc:	f994 4000 	ldrsb.w	r4, [r4]
 8021bc0:	2c00      	cmp	r4, #0
 8021bc2:	d05b      	beq.n	8021c7c <Argus_Dev_GetFrameConfig+0x114>
 8021bc4:	f8b0 3168 	ldrh.w	r3, [r0, #360]	@ 0x168
 8021bc8:	b29b      	uxth	r3, r3
 8021bca:	820b      	strh	r3, [r1, #16]
 8021bcc:	f890 304e 	ldrb.w	r3, [r0, #78]	@ 0x4e
 8021bd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021bd4:	75cb      	strb	r3, [r1, #23]
 8021bd6:	f8d0 211c 	ldr.w	r2, [r0, #284]	@ 0x11c
 8021bda:	f892 308e 	ldrb.w	r3, [r2, #142]	@ 0x8e
 8021bde:	2b02      	cmp	r3, #2
 8021be0:	f000 8093 	beq.w	8021d0a <Argus_Dev_GetFrameConfig+0x1a2>
 8021be4:	2b03      	cmp	r3, #3
 8021be6:	d071      	beq.n	8021ccc <Argus_Dev_GetFrameConfig+0x164>
 8021be8:	2b01      	cmp	r3, #1
 8021bea:	d05a      	beq.n	8021ca2 <Argus_Dev_GetFrameConfig+0x13a>
 8021bec:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8021bf0:	079e      	lsls	r6, r3, #30
 8021bf2:	d53d      	bpl.n	8021c70 <Argus_Dev_GetFrameConfig+0x108>
 8021bf4:	f892 c0a8 	ldrb.w	ip, [r2, #168]	@ 0xa8
 8021bf8:	075d      	lsls	r5, r3, #29
 8021bfa:	bf4b      	itete	mi
 8021bfc:	eb02 024c 	addmi.w	r2, r2, ip, lsl #1
 8021c00:	f10c 0c57 	addpl.w	ip, ip, #87	@ 0x57
 8021c04:	f8b2 c0b2 	ldrhmi.w	ip, [r2, #178]	@ 0xb2
 8021c08:	f832 c01c 	ldrhpl.w	ip, [r2, ip, lsl #1]
 8021c0c:	f8b0 2063 	ldrh.w	r2, [r0, #99]	@ 0x63
 8021c10:	ba52      	rev16	r2, r2
 8021c12:	f3c2 124a 	ubfx	r2, r2, #5, #11
 8021c16:	eba2 020c 	sub.w	r2, r2, ip
 8021c1a:	f890 c064 	ldrb.w	ip, [r0, #100]	@ 0x64
 8021c1e:	760a      	strb	r2, [r1, #24]
 8021c20:	f00c 0203 	and.w	r2, ip, #3
 8021c24:	764a      	strb	r2, [r1, #25]
 8021c26:	60cb      	str	r3, [r1, #12]
 8021c28:	b1ec      	cbz	r4, 8021c66 <Argus_Dev_GetFrameConfig+0xfe>
 8021c2a:	f890 216f 	ldrb.w	r2, [r0, #367]	@ 0x16f
 8021c2e:	07d4      	lsls	r4, r2, #31
 8021c30:	f890 216f 	ldrb.w	r2, [r0, #367]	@ 0x16f
 8021c34:	f890 416d 	ldrb.w	r4, [r0, #365]	@ 0x16d
 8021c38:	bf4c      	ite	mi
 8021c3a:	f443 3380 	orrmi.w	r3, r3, #65536	@ 0x10000
 8021c3e:	f423 3380 	bicpl.w	r3, r3, #65536	@ 0x10000
 8021c42:	0792      	lsls	r2, r2, #30
 8021c44:	f890 216c 	ldrb.w	r2, [r0, #364]	@ 0x16c
 8021c48:	bf4c      	ite	mi
 8021c4a:	f443 3300 	orrmi.w	r3, r3, #131072	@ 0x20000
 8021c4e:	f423 3300 	bicpl.w	r3, r3, #131072	@ 0x20000
 8021c52:	03a4      	lsls	r4, r4, #14
 8021c54:	b2a4      	uxth	r4, r4
 8021c56:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8021c5a:	0352      	lsls	r2, r2, #13
 8021c5c:	4323      	orrs	r3, r4
 8021c5e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8021c62:	4313      	orrs	r3, r2
 8021c64:	60cb      	str	r3, [r1, #12]
 8021c66:	f890 3088 	ldrb.w	r3, [r0, #136]	@ 0x88
 8021c6a:	2bab      	cmp	r3, #171	@ 0xab
 8021c6c:	d00d      	beq.n	8021c8a <Argus_Dev_GetFrameConfig+0x122>
 8021c6e:	bd70      	pop	{r4, r5, r6, pc}
 8021c70:	f8b2 2079 	ldrh.w	r2, [r2, #121]	@ 0x79
 8021c74:	ba52      	rev16	r2, r2
 8021c76:	f3c2 1c4a 	ubfx	ip, r2, #5, #11
 8021c7a:	e7c7      	b.n	8021c0c <Argus_Dev_GetFrameConfig+0xa4>
 8021c7c:	f8b0 3049 	ldrh.w	r3, [r0, #73]	@ 0x49
 8021c80:	ba5b      	rev16	r3, r3
 8021c82:	b29b      	uxth	r3, r3
 8021c84:	019b      	lsls	r3, r3, #6
 8021c86:	b29b      	uxth	r3, r3
 8021c88:	e79f      	b.n	8021bca <Argus_Dev_GetFrameConfig+0x62>
 8021c8a:	f890 308a 	ldrb.w	r3, [r0, #138]	@ 0x8a
 8021c8e:	f890 4089 	ldrb.w	r4, [r0, #137]	@ 0x89
 8021c92:	f890 208b 	ldrb.w	r2, [r0, #139]	@ 0x8b
 8021c96:	021b      	lsls	r3, r3, #8
 8021c98:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8021c9c:	4313      	orrs	r3, r2
 8021c9e:	600b      	str	r3, [r1, #0]
 8021ca0:	bd70      	pop	{r4, r5, r6, pc}
 8021ca2:	f890 6051 	ldrb.w	r6, [r0, #81]	@ 0x51
 8021ca6:	4b23      	ldr	r3, [pc, #140]	@ (8021d34 <Argus_Dev_GetFrameConfig+0x1cc>)
 8021ca8:	ea4f 0cd6 	mov.w	ip, r6, lsr #3
 8021cac:	fb03 fc0c 	mul.w	ip, r3, ip
 8021cb0:	f3cc 25c0 	ubfx	r5, ip, #11, #1
 8021cb4:	eb05 3c1c 	add.w	ip, r5, ip, lsr #12
 8021cb8:	f8a1 c014 	strh.w	ip, [r1, #20]
 8021cbc:	f890 3052 	ldrb.w	r3, [r0, #82]	@ 0x52
 8021cc0:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8021cc4:	f3c3 1384 	ubfx	r3, r3, #6, #5
 8021cc8:	758b      	strb	r3, [r1, #22]
 8021cca:	e78f      	b.n	8021bec <Argus_Dev_GetFrameConfig+0x84>
 8021ccc:	f8b0 3051 	ldrh.w	r3, [r0, #81]	@ 0x51
 8021cd0:	f890 6052 	ldrb.w	r6, [r0, #82]	@ 0x52
 8021cd4:	f890 5051 	ldrb.w	r5, [r0, #81]	@ 0x51
 8021cd8:	ba5b      	rev16	r3, r3
 8021cda:	f3c3 1e84 	ubfx	lr, r3, #6, #5
 8021cde:	f3c6 0c44 	ubfx	ip, r6, #1, #5
 8021ce2:	4b14      	ldr	r3, [pc, #80]	@ (8021d34 <Argus_Dev_GetFrameConfig+0x1cc>)
 8021ce4:	eb0c 0cd5 	add.w	ip, ip, r5, lsr #3
 8021ce8:	fb03 fc0c 	mul.w	ip, r3, ip
 8021cec:	f3cc 25c0 	ubfx	r5, ip, #11, #1
 8021cf0:	eb05 3c1c 	add.w	ip, r5, ip, lsr #12
 8021cf4:	f8a1 c014 	strh.w	ip, [r1, #20]
 8021cf8:	f890 3053 	ldrb.w	r3, [r0, #83]	@ 0x53
 8021cfc:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8021d00:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8021d04:	4473      	add	r3, lr
 8021d06:	758b      	strb	r3, [r1, #22]
 8021d08:	e770      	b.n	8021bec <Argus_Dev_GetFrameConfig+0x84>
 8021d0a:	f890 6052 	ldrb.w	r6, [r0, #82]	@ 0x52
 8021d0e:	4b09      	ldr	r3, [pc, #36]	@ (8021d34 <Argus_Dev_GetFrameConfig+0x1cc>)
 8021d10:	f3c6 0c44 	ubfx	ip, r6, #1, #5
 8021d14:	fb03 fc0c 	mul.w	ip, r3, ip
 8021d18:	f3cc 25c0 	ubfx	r5, ip, #11, #1
 8021d1c:	eb05 3c1c 	add.w	ip, r5, ip, lsr #12
 8021d20:	f8a1 c014 	strh.w	ip, [r1, #20]
 8021d24:	f890 3053 	ldrb.w	r3, [r0, #83]	@ 0x53
 8021d28:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8021d2c:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8021d30:	758b      	strb	r3, [r1, #22]
 8021d32:	e75b      	b.n	8021bec <Argus_Dev_GetFrameConfig+0x84>
 8021d34:	0001c28f 	.word	0x0001c28f

08021d38 <Argus_Dev_GetModule>:
 8021d38:	7a80      	ldrb	r0, [r0, #10]
 8021d3a:	4770      	bx	lr

08021d3c <Argus_Dev_GetChipID>:
 8021d3c:	6840      	ldr	r0, [r0, #4]
 8021d3e:	4770      	bx	lr

08021d40 <Argus_Dev_GetChipVersion>:
 8021d40:	7a00      	ldrb	r0, [r0, #8]
 8021d42:	4770      	bx	lr

08021d44 <Argus_Dev_GetLaserType>:
 8021d44:	7a40      	ldrb	r0, [r0, #9]
 8021d46:	4770      	bx	lr

08021d48 <Argus_Dev_Apply>:
 8021d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021d4c:	4604      	mov	r4, r0
 8021d4e:	f8d0 011c 	ldr.w	r0, [r0, #284]	@ 0x11c
 8021d52:	e9c4 2341 	strd	r2, r3, [r4, #260]	@ 0x104
 8021d56:	7f43      	ldrb	r3, [r0, #29]
 8021d58:	b1a3      	cbz	r3, 8021d84 <Argus_Dev_Apply+0x3c>
 8021d5a:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 8021d5e:	f003 0201 	and.w	r2, r3, #1
 8021d62:	4291      	cmp	r1, r2
 8021d64:	d025      	beq.n	8021db2 <Argus_Dev_Apply+0x6a>
 8021d66:	f890 206e 	ldrb.w	r2, [r0, #110]	@ 0x6e
 8021d6a:	b9d9      	cbnz	r1, 8021da4 <Argus_Dev_Apply+0x5c>
 8021d6c:	f884 2058 	strb.w	r2, [r4, #88]	@ 0x58
 8021d70:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8021d74:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8021d76:	f023 0302 	bic.w	r3, r3, #2
 8021d7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8021d7e:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 8021d82:	67a2      	str	r2, [r4, #120]	@ 0x78
 8021d84:	f504 70b4 	add.w	r0, r4, #360	@ 0x168
 8021d88:	f104 010c 	add.w	r1, r4, #12
 8021d8c:	f7fb ff70 	bl	801dc70 <Argus_Dca_Apply>
 8021d90:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8021d92:	b9a8      	cbnz	r0, 8021dc0 <Argus_Dev_Apply+0x78>
 8021d94:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 8021d98:	b1d3      	cbz	r3, 8021dd0 <Argus_Dev_Apply+0x88>
 8021d9a:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 8021d9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021da2:	4718      	bx	r3
 8021da4:	f062 0277 	orn	r2, r2, #119	@ 0x77
 8021da8:	f884 2058 	strb.w	r2, [r4, #88]	@ 0x58
 8021dac:	f043 0301 	orr.w	r3, r3, #1
 8021db0:	e7e0      	b.n	8021d74 <Argus_Dev_Apply+0x2c>
 8021db2:	079d      	lsls	r5, r3, #30
 8021db4:	d5e6      	bpl.n	8021d84 <Argus_Dev_Apply+0x3c>
 8021db6:	f890 206e 	ldrb.w	r2, [r0, #110]	@ 0x6e
 8021dba:	2900      	cmp	r1, #0
 8021dbc:	d0d6      	beq.n	8021d6c <Argus_Dev_Apply+0x24>
 8021dbe:	e7f1      	b.n	8021da4 <Argus_Dev_Apply+0x5c>
 8021dc0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8021dc2:	01da      	lsls	r2, r3, #7
 8021dc4:	d407      	bmi.n	8021dd6 <Argus_Dev_Apply+0x8e>
 8021dc6:	4620      	mov	r0, r4
 8021dc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021dcc:	f7fe b8ae 	b.w	801ff2c <DisableClock.constprop.0>
 8021dd0:	4618      	mov	r0, r3
 8021dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021dd6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8021dd8:	f8d4 511c 	ldr.w	r5, [r4, #284]	@ 0x11c
 8021ddc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8021de0:	67a3      	str	r3, [r4, #120]	@ 0x78
 8021de2:	f895 30a8 	ldrb.w	r3, [r5, #168]	@ 0xa8
 8021de6:	2b00      	cmp	r3, #0
 8021de8:	d060      	beq.n	8021eac <Argus_Dev_Apply+0x164>
 8021dea:	f8d4 7100 	ldr.w	r7, [r4, #256]	@ 0x100
 8021dee:	686e      	ldr	r6, [r5, #4]
 8021df0:	f103 3eff 	add.w	lr, r3, #4294967295
 8021df4:	332d      	adds	r3, #45	@ 0x2d
 8021df6:	f047 0202 	orr.w	r2, r7, #2
 8021dfa:	2e00      	cmp	r6, #0
 8021dfc:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
 8021e00:	4631      	mov	r1, r6
 8021e02:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8021e06:	d059      	beq.n	8021ebc <Argus_Dev_Apply+0x174>
 8021e08:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8021e0c:	4690      	mov	r8, r2
 8021e0e:	db5d      	blt.n	8021ecc <Argus_Dev_Apply+0x184>
 8021e10:	42b2      	cmp	r2, r6
 8021e12:	f240 8091 	bls.w	8021f38 <Argus_Dev_Apply+0x1f0>
 8021e16:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8021e1a:	4608      	mov	r0, r1
 8021e1c:	0049      	lsls	r1, r1, #1
 8021e1e:	428a      	cmp	r2, r1
 8021e20:	469c      	mov	ip, r3
 8021e22:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8021e26:	d8f8      	bhi.n	8021e1a <Argus_Dev_Apply+0xd2>
 8021e28:	2b00      	cmp	r3, #0
 8021e2a:	d16f      	bne.n	8021f0c <Argus_Dev_Apply+0x1c4>
 8021e2c:	ea92 0f06 	teq	r2, r6
 8021e30:	bf54      	ite	pl
 8021e32:	f06f 4100 	mvnpl.w	r1, #2147483648	@ 0x80000000
 8021e36:	f04f 4100 	movmi.w	r1, #2147483648	@ 0x80000000
 8021e3a:	f8d4 01d4 	ldr.w	r0, [r4, #468]	@ 0x1d4
 8021e3e:	67e1      	str	r1, [r4, #124]	@ 0x7c
 8021e40:	077b      	lsls	r3, r7, #29
 8021e42:	bf4c      	ite	mi
 8021e44:	eb05 054e 	addmi.w	r5, r5, lr, lsl #1
 8021e48:	f10e 0e58 	addpl.w	lr, lr, #88	@ 0x58
 8021e4c:	f9b0 6028 	ldrsh.w	r6, [r0, #40]	@ 0x28
 8021e50:	bf4c      	ite	mi
 8021e52:	f8b5 50b4 	ldrhmi.w	r5, [r5, #180]	@ 0xb4
 8021e56:	f835 501e 	ldrhpl.w	r5, [r5, lr, lsl #1]
 8021e5a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8021e5e:	429e      	cmp	r6, r3
 8021e60:	d02f      	beq.n	8021ec2 <Argus_Dev_Apply+0x17a>
 8021e62:	f002 fcf3 	bl	802484c <Argus_Cal_GetCalibrationPtr>
 8021e66:	7e02      	ldrb	r2, [r0, #24]
 8021e68:	fb12 f206 	smulbb	r2, r2, r6
 8021e6c:	10d2      	asrs	r2, r2, #3
 8021e6e:	fb05 f102 	mul.w	r1, r5, r2
 8021e72:	2900      	cmp	r1, #0
 8021e74:	da58      	bge.n	8021f28 <Argus_Dev_Apply+0x1e0>
 8021e76:	4249      	negs	r1, r1
 8021e78:	f3c1 5280 	ubfx	r2, r1, #22, #1
 8021e7c:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 8021e80:	4252      	negs	r2, r2
 8021e82:	b251      	sxtb	r1, r2
 8021e84:	1a69      	subs	r1, r5, r1
 8021e86:	b2d3      	uxtb	r3, r2
 8021e88:	f894 2064 	ldrb.w	r2, [r4, #100]	@ 0x64
 8021e8c:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8021e8e:	1aeb      	subs	r3, r5, r3
 8021e90:	f002 021f 	and.w	r2, r2, #31
 8021e94:	f3c1 01d7 	ubfx	r1, r1, #3, #24
 8021e98:	ea42 1343 	orr.w	r3, r2, r3, lsl #5
 8021e9c:	f440 6000 	orr.w	r0, r0, #2048	@ 0x800
 8021ea0:	f884 1063 	strb.w	r1, [r4, #99]	@ 0x63
 8021ea4:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 8021ea8:	67a0      	str	r0, [r4, #120]	@ 0x78
 8021eaa:	e78c      	b.n	8021dc6 <Argus_Dev_Apply+0x7e>
 8021eac:	f8d4 2100 	ldr.w	r2, [r4, #256]	@ 0x100
 8021eb0:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8021eb2:	f022 0206 	bic.w	r2, r2, #6
 8021eb6:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
 8021eba:	e784      	b.n	8021dc6 <Argus_Dev_Apply+0x7e>
 8021ebc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8021ec0:	e7bb      	b.n	8021e3a <Argus_Dev_Apply+0xf2>
 8021ec2:	f002 fcc3 	bl	802484c <Argus_Cal_GetCalibrationPtr>
 8021ec6:	4629      	mov	r1, r5
 8021ec8:	2300      	movs	r3, #0
 8021eca:	e7dd      	b.n	8021e88 <Argus_Dev_Apply+0x140>
 8021ecc:	4271      	negs	r1, r6
 8021ece:	428a      	cmp	r2, r1
 8021ed0:	d8a1      	bhi.n	8021e16 <Argus_Dev_Apply+0xce>
 8021ed2:	2900      	cmp	r1, #0
 8021ed4:	db34      	blt.n	8021f40 <Argus_Dev_Apply+0x1f8>
 8021ed6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8021eda:	4608      	mov	r0, r1
 8021edc:	4611      	mov	r1, r2
 8021ede:	b152      	cbz	r2, 8021ef6 <Argus_Dev_Apply+0x1ae>
 8021ee0:	2100      	movs	r1, #0
 8021ee2:	e000      	b.n	8021ee6 <Argus_Dev_Apply+0x19e>
 8021ee4:	b13a      	cbz	r2, 8021ef6 <Argus_Dev_Apply+0x1ae>
 8021ee6:	4282      	cmp	r2, r0
 8021ee8:	bf24      	itt	cs
 8021eea:	1a12      	subcs	r2, r2, r0
 8021eec:	4319      	orrcs	r1, r3
 8021eee:	085b      	lsrs	r3, r3, #1
 8021ef0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8021ef4:	d1f6      	bne.n	8021ee4 <Argus_Dev_Apply+0x19c>
 8021ef6:	4282      	cmp	r2, r0
 8021ef8:	bf28      	it	cs
 8021efa:	3101      	addcs	r1, #1
 8021efc:	ea98 0f06 	teq	r8, r6
 8021f00:	d40e      	bmi.n	8021f20 <Argus_Dev_Apply+0x1d8>
 8021f02:	2900      	cmp	r1, #0
 8021f04:	bfb8      	it	lt
 8021f06:	f06f 4100 	mvnlt.w	r1, #2147483648	@ 0x80000000
 8021f0a:	e796      	b.n	8021e3a <Argus_Dev_Apply+0xf2>
 8021f0c:	2900      	cmp	r1, #0
 8021f0e:	dae4      	bge.n	8021eda <Argus_Dev_Apply+0x192>
 8021f10:	f03c 4300 	bics.w	r3, ip, #2147483648	@ 0x80000000
 8021f14:	d006      	beq.n	8021f24 <Argus_Dev_Apply+0x1dc>
 8021f16:	2a00      	cmp	r2, #0
 8021f18:	d1e2      	bne.n	8021ee0 <Argus_Dev_Apply+0x198>
 8021f1a:	2e00      	cmp	r6, #0
 8021f1c:	4611      	mov	r1, r2
 8021f1e:	da8c      	bge.n	8021e3a <Argus_Dev_Apply+0xf2>
 8021f20:	4249      	negs	r1, r1
 8021f22:	e78a      	b.n	8021e3a <Argus_Dev_Apply+0xf2>
 8021f24:	4619      	mov	r1, r3
 8021f26:	e7e6      	b.n	8021ef6 <Argus_Dev_Apply+0x1ae>
 8021f28:	f3c1 5280 	ubfx	r2, r1, #22, #1
 8021f2c:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 8021f30:	b251      	sxtb	r1, r2
 8021f32:	1a69      	subs	r1, r5, r1
 8021f34:	b2d3      	uxtb	r3, r2
 8021f36:	e7a7      	b.n	8021e88 <Argus_Dev_Apply+0x140>
 8021f38:	4630      	mov	r0, r6
 8021f3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8021f3e:	e7cd      	b.n	8021edc <Argus_Dev_Apply+0x194>
 8021f40:	0848      	lsrs	r0, r1, #1
 8021f42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8021f46:	e7e6      	b.n	8021f16 <Argus_Dev_Apply+0x1ce>

08021f48 <Argus_Dev_ApplySync>:
 8021f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021f4a:	b087      	sub	sp, #28
 8021f4c:	2302      	movs	r3, #2
 8021f4e:	4604      	mov	r4, r0
 8021f50:	460d      	mov	r5, r1
 8021f52:	a802      	add	r0, sp, #8
 8021f54:	a903      	add	r1, sp, #12
 8021f56:	9301      	str	r3, [sp, #4]
 8021f58:	f7e5 f91e 	bl	8007198 <Timer_GetCounterValue>
 8021f5c:	4a2d      	ldr	r2, [pc, #180]	@ (8022014 <Argus_Dev_ApplySync+0xcc>)
 8021f5e:	ab01      	add	r3, sp, #4
 8021f60:	4629      	mov	r1, r5
 8021f62:	4620      	mov	r0, r4
 8021f64:	f7ff fef0 	bl	8021d48 <Argus_Dev_Apply>
 8021f68:	2800      	cmp	r0, #0
 8021f6a:	db1f      	blt.n	8021fac <Argus_Dev_ApplySync+0x64>
 8021f6c:	4d2a      	ldr	r5, [pc, #168]	@ (8022018 <Argus_Dev_ApplySync+0xd0>)
 8021f6e:	a905      	add	r1, sp, #20
 8021f70:	a804      	add	r0, sp, #16
 8021f72:	f7e5 f911 	bl	8007198 <Timer_GetCounterValue>
 8021f76:	e9dd 3403 	ldrd	r3, r4, [sp, #12]
 8021f7a:	42ab      	cmp	r3, r5
 8021f7c:	9e05      	ldr	r6, [sp, #20]
 8021f7e:	9a02      	ldr	r2, [sp, #8]
 8021f80:	d820      	bhi.n	8021fc4 <Argus_Dev_ApplySync+0x7c>
 8021f82:	1c50      	adds	r0, r2, #1
 8021f84:	4282      	cmp	r2, r0
 8021f86:	4619      	mov	r1, r3
 8021f88:	d023      	beq.n	8021fd2 <Argus_Dev_ApplySync+0x8a>
 8021f8a:	bf34      	ite	cc
 8021f8c:	2701      	movcc	r7, #1
 8021f8e:	2700      	movcs	r7, #0
 8021f90:	b177      	cbz	r7, 8021fb0 <Argus_Dev_ApplySync+0x68>
 8021f92:	42a2      	cmp	r2, r4
 8021f94:	d02a      	beq.n	8021fec <Argus_Dev_ApplySync+0xa4>
 8021f96:	bf34      	ite	cc
 8021f98:	2301      	movcc	r3, #1
 8021f9a:	2300      	movcs	r3, #0
 8021f9c:	b9f3      	cbnz	r3, 8021fdc <Argus_Dev_ApplySync+0x94>
 8021f9e:	481f      	ldr	r0, [pc, #124]	@ (802201c <Argus_Dev_ApplySync+0xd4>)
 8021fa0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8021fa4:	f7e4 fab2 	bl	800650c <print>
 8021fa8:	f06f 0005 	mvn.w	r0, #5
 8021fac:	b007      	add	sp, #28
 8021fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021fb0:	42a2      	cmp	r2, r4
 8021fb2:	d020      	beq.n	8021ff6 <Argus_Dev_ApplySync+0xae>
 8021fb4:	d302      	bcc.n	8021fbc <Argus_Dev_ApplySync+0x74>
 8021fb6:	42a0      	cmp	r0, r4
 8021fb8:	d021      	beq.n	8021ffe <Argus_Dev_ApplySync+0xb6>
 8021fba:	d3f0      	bcc.n	8021f9e <Argus_Dev_ApplySync+0x56>
 8021fbc:	9801      	ldr	r0, [sp, #4]
 8021fbe:	2802      	cmp	r0, #2
 8021fc0:	d0d5      	beq.n	8021f6e <Argus_Dev_ApplySync+0x26>
 8021fc2:	e7f3      	b.n	8021fac <Argus_Dev_ApplySync+0x64>
 8021fc4:	1c90      	adds	r0, r2, #2
 8021fc6:	f5a3 2174 	sub.w	r1, r3, #999424	@ 0xf4000
 8021fca:	4282      	cmp	r2, r0
 8021fcc:	f5a1 7110 	sub.w	r1, r1, #576	@ 0x240
 8021fd0:	d1db      	bne.n	8021f8a <Argus_Dev_ApplySync+0x42>
 8021fd2:	428b      	cmp	r3, r1
 8021fd4:	bf8c      	ite	hi
 8021fd6:	2700      	movhi	r7, #0
 8021fd8:	2701      	movls	r7, #1
 8021fda:	e7d9      	b.n	8021f90 <Argus_Dev_ApplySync+0x48>
 8021fdc:	42a0      	cmp	r0, r4
 8021fde:	d011      	beq.n	8022004 <Argus_Dev_ApplySync+0xbc>
 8021fe0:	bf34      	ite	cc
 8021fe2:	2101      	movcc	r1, #1
 8021fe4:	2100      	movcs	r1, #0
 8021fe6:	2900      	cmp	r1, #0
 8021fe8:	d0e8      	beq.n	8021fbc <Argus_Dev_ApplySync+0x74>
 8021fea:	e7d8      	b.n	8021f9e <Argus_Dev_ApplySync+0x56>
 8021fec:	42b3      	cmp	r3, r6
 8021fee:	bf8c      	ite	hi
 8021ff0:	2300      	movhi	r3, #0
 8021ff2:	2301      	movls	r3, #1
 8021ff4:	e7d2      	b.n	8021f9c <Argus_Dev_ApplySync+0x54>
 8021ff6:	42b3      	cmp	r3, r6
 8021ff8:	d9e0      	bls.n	8021fbc <Argus_Dev_ApplySync+0x74>
 8021ffa:	42a0      	cmp	r0, r4
 8021ffc:	d1dd      	bne.n	8021fba <Argus_Dev_ApplySync+0x72>
 8021ffe:	428e      	cmp	r6, r1
 8022000:	d2cd      	bcs.n	8021f9e <Argus_Dev_ApplySync+0x56>
 8022002:	e7db      	b.n	8021fbc <Argus_Dev_ApplySync+0x74>
 8022004:	428e      	cmp	r6, r1
 8022006:	bf34      	ite	cc
 8022008:	2100      	movcc	r1, #0
 802200a:	2101      	movcs	r1, #1
 802200c:	2900      	cmp	r1, #0
 802200e:	d0d5      	beq.n	8021fbc <Argus_Dev_ApplySync+0x74>
 8022010:	e7c5      	b.n	8021f9e <Argus_Dev_ApplySync+0x56>
 8022012:	bf00      	nop
 8022014:	0801efed 	.word	0x0801efed
 8022018:	000f423f 	.word	0x000f423f
 802201c:	08030544 	.word	0x08030544

08022020 <Argus_Dev_RecoverFromError>:
 8022020:	b570      	push	{r4, r5, r6, lr}
 8022022:	f500 7690 	add.w	r6, r0, #288	@ 0x120
 8022026:	4604      	mov	r4, r0
 8022028:	f7e4 fcd4 	bl	80069d4 <IRQ_LOCK>
 802202c:	4630      	mov	r0, r6
 802202e:	f007 fbc5 	bl	80297bc <ADS_CheckTimeout>
 8022032:	1e05      	subs	r5, r0, #0
 8022034:	db08      	blt.n	8022048 <Argus_Dev_RecoverFromError+0x28>
 8022036:	6823      	ldr	r3, [r4, #0]
 8022038:	2b64      	cmp	r3, #100	@ 0x64
 802203a:	d042      	beq.n	80220c2 <Argus_Dev_RecoverFromError+0xa2>
 802203c:	dc31      	bgt.n	80220a2 <Argus_Dev_RecoverFromError+0x82>
 802203e:	bbb3      	cbnz	r3, 80220ae <Argus_Dev_RecoverFromError+0x8e>
 8022040:	4630      	mov	r0, r6
 8022042:	f007 fbab 	bl	802979c <ADS_GetStatus>
 8022046:	4605      	mov	r5, r0
 8022048:	1deb      	adds	r3, r5, #7
 802204a:	d033      	beq.n	80220b4 <Argus_Dev_RecoverFromError+0x94>
 802204c:	f115 0f65 	cmn.w	r5, #101	@ 0x65
 8022050:	d030      	beq.n	80220b4 <Argus_Dev_RecoverFromError+0x94>
 8022052:	2d00      	cmp	r5, #0
 8022054:	da35      	bge.n	80220c2 <Argus_Dev_RecoverFromError+0xa2>
 8022056:	2300      	movs	r3, #0
 8022058:	6023      	str	r3, [r4, #0]
 802205a:	f7e4 fcbb 	bl	80069d4 <IRQ_LOCK>
 802205e:	6823      	ldr	r3, [r4, #0]
 8022060:	bba3      	cbnz	r3, 80220cc <Argus_Dev_RecoverFromError+0xac>
 8022062:	23c0      	movs	r3, #192	@ 0xc0
 8022064:	6023      	str	r3, [r4, #0]
 8022066:	f7e4 fc93 	bl	8006990 <IRQ_UNLOCK>
 802206a:	f7e4 fc91 	bl	8006990 <IRQ_UNLOCK>
 802206e:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8022070:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 8022074:	4a23      	ldr	r2, [pc, #140]	@ (8022104 <Argus_Dev_RecoverFromError+0xe4>)
 8022076:	f043 0302 	orr.w	r3, r3, #2
 802207a:	430a      	orrs	r2, r1
 802207c:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 8022080:	2101      	movs	r1, #1
 8022082:	67a2      	str	r2, [r4, #120]	@ 0x78
 8022084:	4620      	mov	r0, r4
 8022086:	f7ff ff5f 	bl	8021f48 <Argus_Dev_ApplySync>
 802208a:	4605      	mov	r5, r0
 802208c:	f7e4 fca2 	bl	80069d4 <IRQ_LOCK>
 8022090:	6823      	ldr	r3, [r4, #0]
 8022092:	2bc0      	cmp	r3, #192	@ 0xc0
 8022094:	d10e      	bne.n	80220b4 <Argus_Dev_RecoverFromError+0x94>
 8022096:	2300      	movs	r3, #0
 8022098:	6023      	str	r3, [r4, #0]
 802209a:	f7e4 fc79 	bl	8006990 <IRQ_UNLOCK>
 802209e:	4628      	mov	r0, r5
 80220a0:	bd70      	pop	{r4, r5, r6, pc}
 80220a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80220a4:	dc0a      	bgt.n	80220bc <Argus_Dev_RecoverFromError+0x9c>
 80220a6:	2bbe      	cmp	r3, #190	@ 0xbe
 80220a8:	dc0b      	bgt.n	80220c2 <Argus_Dev_RecoverFromError+0xa2>
 80220aa:	2b67      	cmp	r3, #103	@ 0x67
 80220ac:	d009      	beq.n	80220c2 <Argus_Dev_RecoverFromError+0xa2>
 80220ae:	6825      	ldr	r5, [r4, #0]
 80220b0:	1deb      	adds	r3, r5, #7
 80220b2:	d1cb      	bne.n	802204c <Argus_Dev_RecoverFromError+0x2c>
 80220b4:	f7e4 fc6c 	bl	8006990 <IRQ_UNLOCK>
 80220b8:	4628      	mov	r0, r5
 80220ba:	bd70      	pop	{r4, r5, r6, pc}
 80220bc:	3bc3      	subs	r3, #195	@ 0xc3
 80220be:	2b01      	cmp	r3, #1
 80220c0:	d8f5      	bhi.n	80220ae <Argus_Dev_RecoverFromError+0x8e>
 80220c2:	2500      	movs	r5, #0
 80220c4:	f7e4 fc64 	bl	8006990 <IRQ_UNLOCK>
 80220c8:	4628      	mov	r0, r5
 80220ca:	bd70      	pop	{r4, r5, r6, pc}
 80220cc:	6823      	ldr	r3, [r4, #0]
 80220ce:	3371      	adds	r3, #113	@ 0x71
 80220d0:	d004      	beq.n	80220dc <Argus_Dev_RecoverFromError+0xbc>
 80220d2:	6823      	ldr	r3, [r4, #0]
 80220d4:	3372      	adds	r3, #114	@ 0x72
 80220d6:	d007      	beq.n	80220e8 <Argus_Dev_RecoverFromError+0xc8>
 80220d8:	6823      	ldr	r3, [r4, #0]
 80220da:	e7c4      	b.n	8022066 <Argus_Dev_RecoverFromError+0x46>
 80220dc:	f504 70b4 	add.w	r0, r4, #360	@ 0x168
 80220e0:	f7fc f82e 	bl	801e140 <Argus_Dca_RecoverLaserFailure>
 80220e4:	2800      	cmp	r0, #0
 80220e6:	d0f4      	beq.n	80220d2 <Argus_Dev_RecoverFromError+0xb2>
 80220e8:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 80220ea:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 80220ee:	4a05      	ldr	r2, [pc, #20]	@ (8022104 <Argus_Dev_RecoverFromError+0xe4>)
 80220f0:	f043 0302 	orr.w	r3, r3, #2
 80220f4:	430a      	orrs	r2, r1
 80220f6:	21c0      	movs	r1, #192	@ 0xc0
 80220f8:	67a2      	str	r2, [r4, #120]	@ 0x78
 80220fa:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 80220fe:	6021      	str	r1, [r4, #0]
 8022100:	e7b1      	b.n	8022066 <Argus_Dev_RecoverFromError+0x46>
 8022102:	bf00      	nop
 8022104:	0003dffe 	.word	0x0003dffe

08022108 <Argus_Dev_ChargePumpRamp>:
 8022108:	b5f0      	push	{r4, r5, r6, r7, lr}
 802210a:	6f86      	ldr	r6, [r0, #120]	@ 0x78
 802210c:	4604      	mov	r4, r0
 802210e:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 8022110:	f006 7600 	and.w	r6, r6, #33554432	@ 0x2000000
 8022114:	f000 0020 	and.w	r0, r0, #32
 8022118:	4330      	orrs	r0, r6
 802211a:	e9c4 1243 	strd	r1, r2, [r4, #268]	@ 0x10c
 802211e:	b085      	sub	sp, #20
 8022120:	d105      	bne.n	802212e <Argus_Dev_ChargePumpRamp+0x26>
 8022122:	460b      	mov	r3, r1
 8022124:	4611      	mov	r1, r2
 8022126:	b005      	add	sp, #20
 8022128:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 802212c:	4718      	bx	r3
 802212e:	f894 70fb 	ldrb.w	r7, [r4, #251]	@ 0xfb
 8022132:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
 8022136:	f007 073f 	and.w	r7, r7, #63	@ 0x3f
 802213a:	2f09      	cmp	r7, #9
 802213c:	a802      	add	r0, sp, #8
 802213e:	a903      	add	r1, sp, #12
 8022140:	bf94      	ite	ls
 8022142:	8bdd      	ldrhls	r5, [r3, #30]
 8022144:	8c1d      	ldrhhi	r5, [r3, #32]
 8022146:	f7e5 f827 	bl	8007198 <Timer_GetCounterValue>
 802214a:	f8d4 2118 	ldr.w	r2, [r4, #280]	@ 0x118
 802214e:	f8dd c008 	ldr.w	ip, [sp, #8]
 8022152:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8022156:	f8d4 1114 	ldr.w	r1, [r4, #276]	@ 0x114
 802215a:	18ab      	adds	r3, r5, r2
 802215c:	4d4a      	ldr	r5, [pc, #296]	@ (8022288 <Argus_Dev_ChargePumpRamp+0x180>)
 802215e:	bf2c      	ite	cs
 8022160:	2001      	movcs	r0, #1
 8022162:	2000      	movcc	r0, #0
 8022164:	42ab      	cmp	r3, r5
 8022166:	d949      	bls.n	80221fc <Argus_Dev_ChargePumpRamp+0xf4>
 8022168:	1c4d      	adds	r5, r1, #1
 802216a:	42a9      	cmp	r1, r5
 802216c:	f5a3 2374 	sub.w	r3, r3, #999424	@ 0xf4000
 8022170:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8022174:	bf2c      	ite	cs
 8022176:	2000      	movcs	r0, #0
 8022178:	2001      	movcc	r0, #1
 802217a:	2800      	cmp	r0, #0
 802217c:	d042      	beq.n	8022204 <Argus_Dev_ChargePumpRamp+0xfc>
 802217e:	4561      	cmp	r1, ip
 8022180:	d058      	beq.n	8022234 <Argus_Dev_ChargePumpRamp+0x12c>
 8022182:	bf34      	ite	cc
 8022184:	2201      	movcc	r2, #1
 8022186:	2200      	movcs	r2, #0
 8022188:	b12a      	cbz	r2, 8022196 <Argus_Dev_ChargePumpRamp+0x8e>
 802218a:	4565      	cmp	r5, ip
 802218c:	d065      	beq.n	802225a <Argus_Dev_ChargePumpRamp+0x152>
 802218e:	bf34      	ite	cc
 8022190:	2301      	movcc	r3, #1
 8022192:	2300      	movcs	r3, #0
 8022194:	b30b      	cbz	r3, 80221da <Argus_Dev_ChargePumpRamp+0xd2>
 8022196:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	@ 0xfa
 802219a:	f894 10fa 	ldrb.w	r1, [r4, #250]	@ 0xfa
 802219e:	ba5b      	rev16	r3, r3
 80221a0:	f3c3 1383 	ubfx	r3, r3, #6, #4
 80221a4:	b3ae      	cbz	r6, 8022212 <Argus_Dev_ChargePumpRamp+0x10a>
 80221a6:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80221a8:	f042 0220 	orr.w	r2, r2, #32
 80221ac:	67a2      	str	r2, [r4, #120]	@ 0x78
 80221ae:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80221b0:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80221b4:	2600      	movs	r6, #0
 80221b6:	67a2      	str	r2, [r4, #120]	@ 0x78
 80221b8:	f3c3 0297 	ubfx	r2, r3, #2, #24
 80221bc:	f021 0103 	bic.w	r1, r1, #3
 80221c0:	4311      	orrs	r1, r2
 80221c2:	ea46 1383 	orr.w	r3, r6, r3, lsl #6
 80221c6:	f884 10fa 	strb.w	r1, [r4, #250]	@ 0xfa
 80221ca:	f884 30fb 	strb.w	r3, [r4, #251]	@ 0xfb
 80221ce:	f504 718c 	add.w	r1, r4, #280	@ 0x118
 80221d2:	f504 708a 	add.w	r0, r4, #276	@ 0x114
 80221d6:	f7e4 ffdf 	bl	8007198 <Timer_GetCounterValue>
 80221da:	4621      	mov	r1, r4
 80221dc:	230a      	movs	r3, #10
 80221de:	f801 3ff8 	strb.w	r3, [r1, #248]!
 80221e2:	4b2a      	ldr	r3, [pc, #168]	@ (802228c <Argus_Dev_ChargePumpRamp+0x184>)
 80221e4:	2200      	movs	r2, #0
 80221e6:	e9cd 3400 	strd	r3, r4, [sp]
 80221ea:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 80221ee:	2305      	movs	r3, #5
 80221f0:	f007 fc6a 	bl	8029ac8 <ADS_Transfer>
 80221f4:	2800      	cmp	r0, #0
 80221f6:	db17      	blt.n	8022228 <Argus_Dev_ChargePumpRamp+0x120>
 80221f8:	b005      	add	sp, #20
 80221fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80221fc:	f080 0001 	eor.w	r0, r0, #1
 8022200:	460d      	mov	r5, r1
 8022202:	e7ba      	b.n	802217a <Argus_Dev_ChargePumpRamp+0x72>
 8022204:	4561      	cmp	r1, ip
 8022206:	d032      	beq.n	802226e <Argus_Dev_ChargePumpRamp+0x166>
 8022208:	d3e7      	bcc.n	80221da <Argus_Dev_ChargePumpRamp+0xd2>
 802220a:	4565      	cmp	r5, ip
 802220c:	d02c      	beq.n	8022268 <Argus_Dev_ChargePumpRamp+0x160>
 802220e:	d2e4      	bcs.n	80221da <Argus_Dev_ChargePumpRamp+0xd2>
 8022210:	e7c1      	b.n	8022196 <Argus_Dev_ChargePumpRamp+0x8e>
 8022212:	f8b4 204d 	ldrh.w	r2, [r4, #77]	@ 0x4d
 8022216:	ba52      	rev16	r2, r2
 8022218:	f3c2 1283 	ubfx	r2, r2, #6, #4
 802221c:	4293      	cmp	r3, r2
 802221e:	d00e      	beq.n	802223e <Argus_Dev_ChargePumpRamp+0x136>
 8022220:	2f00      	cmp	r7, #0
 8022222:	bf08      	it	eq
 8022224:	4613      	moveq	r3, r2
 8022226:	e7c7      	b.n	80221b8 <Argus_Dev_ChargePumpRamp+0xb0>
 8022228:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 802222c:	b005      	add	sp, #20
 802222e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8022232:	4718      	bx	r3
 8022234:	4572      	cmp	r2, lr
 8022236:	bf8c      	ite	hi
 8022238:	2200      	movhi	r2, #0
 802223a:	2201      	movls	r2, #1
 802223c:	e7a4      	b.n	8022188 <Argus_Dev_ChargePumpRamp+0x80>
 802223e:	f894 204e 	ldrb.w	r2, [r4, #78]	@ 0x4e
 8022242:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8022246:	4297      	cmp	r7, r2
 8022248:	d019      	beq.n	802227e <Argus_Dev_ChargePumpRamp+0x176>
 802224a:	db13      	blt.n	8022274 <Argus_Dev_ChargePumpRamp+0x16c>
 802224c:	b102      	cbz	r2, 8022250 <Argus_Dev_ChargePumpRamp+0x148>
 802224e:	1e7e      	subs	r6, r7, #1
 8022250:	42b2      	cmp	r2, r6
 8022252:	bfb8      	it	lt
 8022254:	4632      	movlt	r2, r6
 8022256:	b256      	sxtb	r6, r2
 8022258:	e7ae      	b.n	80221b8 <Argus_Dev_ChargePumpRamp+0xb0>
 802225a:	4573      	cmp	r3, lr
 802225c:	bf8c      	ite	hi
 802225e:	2300      	movhi	r3, #0
 8022260:	2301      	movls	r3, #1
 8022262:	2b00      	cmp	r3, #0
 8022264:	d197      	bne.n	8022196 <Argus_Dev_ChargePumpRamp+0x8e>
 8022266:	e7b8      	b.n	80221da <Argus_Dev_ChargePumpRamp+0xd2>
 8022268:	4573      	cmp	r3, lr
 802226a:	d994      	bls.n	8022196 <Argus_Dev_ChargePumpRamp+0x8e>
 802226c:	e7b5      	b.n	80221da <Argus_Dev_ChargePumpRamp+0xd2>
 802226e:	4572      	cmp	r2, lr
 8022270:	d9b3      	bls.n	80221da <Argus_Dev_ChargePumpRamp+0xd2>
 8022272:	e7ca      	b.n	802220a <Argus_Dev_ChargePumpRamp+0x102>
 8022274:	1c7e      	adds	r6, r7, #1
 8022276:	42b2      	cmp	r2, r6
 8022278:	bfa8      	it	ge
 802227a:	4632      	movge	r2, r6
 802227c:	e7eb      	b.n	8022256 <Argus_Dev_ChargePumpRamp+0x14e>
 802227e:	e9d4 3143 	ldrd	r3, r1, [r4, #268]	@ 0x10c
 8022282:	4630      	mov	r0, r6
 8022284:	e74f      	b.n	8022126 <Argus_Dev_ChargePumpRamp+0x1e>
 8022286:	bf00      	nop
 8022288:	000f423f 	.word	0x000f423f
 802228c:	0801f035 	.word	0x0801f035

08022290 <Argus_Dev_StartIntegration>:
 8022290:	b530      	push	{r4, r5, lr}
 8022292:	e9c0 1241 	strd	r1, r2, [r0, #260]	@ 0x104
 8022296:	f8d0 511c 	ldr.w	r5, [r0, #284]	@ 0x11c
 802229a:	7f2b      	ldrb	r3, [r5, #28]
 802229c:	b085      	sub	sp, #20
 802229e:	4604      	mov	r4, r0
 80222a0:	2b00      	cmp	r3, #0
 80222a2:	d04a      	beq.n	802233a <Argus_Dev_StartIntegration+0xaa>
 80222a4:	f8b0 006a 	ldrh.w	r0, [r0, #106]	@ 0x6a
 80222a8:	f8b4 2049 	ldrh.w	r2, [r4, #73]	@ 0x49
 80222ac:	ba40      	rev16	r0, r0
 80222ae:	ba52      	rev16	r2, r2
 80222b0:	f3c0 1049 	ubfx	r0, r0, #5, #10
 80222b4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80222b8:	f3c2 0109 	ubfx	r1, r2, #0, #10
 80222bc:	fb00 3303 	mla	r3, r0, r3, r3
 80222c0:	e9d5 2024 	ldrd	r2, r0, [r5, #144]	@ 0x90
 80222c4:	fb00 2201 	mla	r2, r0, r1, r2
 80222c8:	fba3 3202 	umull	r3, r2, r3, r2
 80222cc:	f8d4 0100 	ldr.w	r0, [r4, #256]	@ 0x100
 80222d0:	0d99      	lsrs	r1, r3, #22
 80222d2:	ea41 2182 	orr.w	r1, r1, r2, lsl #10
 80222d6:	f3c3 5340 	ubfx	r3, r3, #21, #1
 80222da:	0785      	lsls	r5, r0, #30
 80222dc:	440b      	add	r3, r1
 80222de:	d41c      	bmi.n	802231a <Argus_Dev_StartIntegration+0x8a>
 80222e0:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 80222e2:	f8b4 005a 	ldrh.w	r0, [r4, #90]	@ 0x5a
 80222e6:	f8a4 0089 	strh.w	r0, [r4, #137]	@ 0x89
 80222ea:	f421 7100 	bic.w	r1, r1, #512	@ 0x200
 80222ee:	67a1      	str	r1, [r4, #120]	@ 0x78
 80222f0:	4830      	ldr	r0, [pc, #192]	@ (80223b4 <Argus_Dev_StartIntegration+0x124>)
 80222f2:	4931      	ldr	r1, [pc, #196]	@ (80223b8 <Argus_Dev_StartIntegration+0x128>)
 80222f4:	f104 0288 	add.w	r2, r4, #136	@ 0x88
 80222f8:	2513      	movs	r5, #19
 80222fa:	f884 5088 	strb.w	r5, [r4, #136]	@ 0x88
 80222fe:	e9cd 3100 	strd	r3, r1, [sp]
 8022302:	e9cd 0402 	strd	r0, r4, [sp, #8]
 8022306:	2303      	movs	r3, #3
 8022308:	4611      	mov	r1, r2
 802230a:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 802230e:	f007 fb5b 	bl	80299c8 <ADS_TransferWithStart>
 8022312:	2800      	cmp	r0, #0
 8022314:	db14      	blt.n	8022340 <Argus_Dev_StartIntegration+0xb0>
 8022316:	b005      	add	sp, #20
 8022318:	bd30      	pop	{r4, r5, pc}
 802231a:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 802231c:	0741      	lsls	r1, r0, #29
 802231e:	bf4c      	ite	mi
 8022320:	f5c2 3280 	rsbmi	r2, r2, #65536	@ 0x10000
 8022324:	f502 3280 	addpl.w	r2, r2, #65536	@ 0x10000
 8022328:	fba2 3203 	umull	r3, r2, r2, r3
 802232c:	0c19      	lsrs	r1, r3, #16
 802232e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8022332:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8022336:	440b      	add	r3, r1
 8022338:	e7d2      	b.n	80222e0 <Argus_Dev_StartIntegration+0x50>
 802233a:	f04f 33ff 	mov.w	r3, #4294967295
 802233e:	e7cf      	b.n	80222e0 <Argus_Dev_StartIntegration+0x50>
 8022340:	1d83      	adds	r3, r0, #6
 8022342:	d10d      	bne.n	8022360 <Argus_Dev_StartIntegration+0xd0>
 8022344:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8022346:	4b1d      	ldr	r3, [pc, #116]	@ (80223bc <Argus_Dev_StartIntegration+0x12c>)
 8022348:	f894 20fd 	ldrb.w	r2, [r4, #253]	@ 0xfd
 802234c:	430b      	orrs	r3, r1
 802234e:	67a3      	str	r3, [r4, #120]	@ 0x78
 8022350:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8022352:	f042 0202 	orr.w	r2, r2, #2
 8022356:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 802235a:	f884 20fd 	strb.w	r2, [r4, #253]	@ 0xfd
 802235e:	67a3      	str	r3, [r4, #120]	@ 0x78
 8022360:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 8022364:	22ab      	movs	r2, #171	@ 0xab
 8022366:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
 802236a:	b12b      	cbz	r3, 8022378 <Argus_Dev_StartIntegration+0xe8>
 802236c:	2200      	movs	r2, #0
 802236e:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 8022372:	f8c4 2104 	str.w	r2, [r4, #260]	@ 0x104
 8022376:	4798      	blx	r3
 8022378:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
 802237c:	f003 0382 	and.w	r3, r3, #130	@ 0x82
 8022380:	2b02      	cmp	r3, #2
 8022382:	d1c8      	bne.n	8022316 <Argus_Dev_StartIntegration+0x86>
 8022384:	f894 3064 	ldrb.w	r3, [r4, #100]	@ 0x64
 8022388:	f894 10fd 	ldrb.w	r1, [r4, #253]	@ 0xfd
 802238c:	f003 0203 	and.w	r2, r3, #3
 8022390:	3201      	adds	r2, #1
 8022392:	0095      	lsls	r5, r2, #2
 8022394:	f023 0303 	bic.w	r3, r3, #3
 8022398:	f002 0203 	and.w	r2, r2, #3
 802239c:	4313      	orrs	r3, r2
 802239e:	f021 010c 	bic.w	r1, r1, #12
 80223a2:	f005 020c 	and.w	r2, r5, #12
 80223a6:	430a      	orrs	r2, r1
 80223a8:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 80223ac:	f884 20fd 	strb.w	r2, [r4, #253]	@ 0xfd
 80223b0:	e7b1      	b.n	8022316 <Argus_Dev_StartIntegration+0x86>
 80223b2:	bf00      	nop
 80223b4:	0801f1bd 	.word	0x0801f1bd
 80223b8:	0801f249 	.word	0x0801f249
 80223bc:	0003dffe 	.word	0x0003dffe

080223c0 <Argus_Dev_CheckDeviceConfigRegister>:
 80223c0:	788b      	ldrb	r3, [r1, #2]
 80223c2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80223c6:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 80223ca:	bf14      	ite	ne
 80223cc:	f043 0380 	orrne.w	r3, r3, #128	@ 0x80
 80223d0:	f023 0380 	biceq.w	r3, r3, #128	@ 0x80
 80223d4:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 80223d8:	788b      	ldrb	r3, [r1, #2]
 80223da:	069b      	lsls	r3, r3, #26
 80223dc:	d501      	bpl.n	80223e2 <Argus_Dev_CheckDeviceConfigRegister+0x22>
 80223de:	2000      	movs	r0, #0
 80223e0:	4770      	bx	lr
 80223e2:	6f81      	ldr	r1, [r0, #120]	@ 0x78
 80223e4:	4b07      	ldr	r3, [pc, #28]	@ (8022404 <Argus_Dev_CheckDeviceConfigRegister+0x44>)
 80223e6:	f890 20fd 	ldrb.w	r2, [r0, #253]	@ 0xfd
 80223ea:	430b      	orrs	r3, r1
 80223ec:	6783      	str	r3, [r0, #120]	@ 0x78
 80223ee:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 80223f0:	f042 0202 	orr.w	r2, r2, #2
 80223f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80223f8:	f880 20fd 	strb.w	r2, [r0, #253]	@ 0xfd
 80223fc:	6783      	str	r3, [r0, #120]	@ 0x78
 80223fe:	f06f 0071 	mvn.w	r0, #113	@ 0x71
 8022402:	4770      	bx	lr
 8022404:	0003dffe 	.word	0x0003dffe

08022408 <Argus_Dev_DetuneClock>:
 8022408:	b570      	push	{r4, r5, r6, lr}
 802240a:	f8d0 5100 	ldr.w	r5, [r0, #256]	@ 0x100
 802240e:	f8c0 1104 	str.w	r1, [r0, #260]	@ 0x104
 8022412:	4604      	mov	r4, r0
 8022414:	f8c0 2108 	str.w	r2, [r0, #264]	@ 0x108
 8022418:	f015 0002 	ands.w	r0, r5, #2
 802241c:	b082      	sub	sp, #8
 802241e:	d107      	bne.n	8022430 <Argus_Dev_DetuneClock+0x28>
 8022420:	460b      	mov	r3, r1
 8022422:	2900      	cmp	r1, #0
 8022424:	d071      	beq.n	802250a <Argus_Dev_DetuneClock+0x102>
 8022426:	4611      	mov	r1, r2
 8022428:	b002      	add	sp, #8
 802242a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802242e:	4718      	bx	r3
 8022430:	f085 0504 	eor.w	r5, r5, #4
 8022434:	07a8      	lsls	r0, r5, #30
 8022436:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
 802243a:	f8c4 5100 	str.w	r5, [r4, #256]	@ 0x100
 802243e:	d567      	bpl.n	8022510 <Argus_Dev_DetuneClock+0x108>
 8022440:	f893 20a8 	ldrb.w	r2, [r3, #168]	@ 0xa8
 8022444:	f8d4 01d4 	ldr.w	r0, [r4, #468]	@ 0x1d4
 8022448:	0769      	lsls	r1, r5, #29
 802244a:	bf4c      	ite	mi
 802244c:	eb03 0342 	addmi.w	r3, r3, r2, lsl #1
 8022450:	3257      	addpl	r2, #87	@ 0x57
 8022452:	f9b0 6028 	ldrsh.w	r6, [r0, #40]	@ 0x28
 8022456:	bf4c      	ite	mi
 8022458:	f8b3 50b2 	ldrhmi.w	r5, [r3, #178]	@ 0xb2
 802245c:	f833 5012 	ldrhpl.w	r5, [r3, r2, lsl #1]
 8022460:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8022464:	429e      	cmp	r6, r3
 8022466:	d060      	beq.n	802252a <Argus_Dev_DetuneClock+0x122>
 8022468:	f002 f9f0 	bl	802484c <Argus_Cal_GetCalibrationPtr>
 802246c:	7e02      	ldrb	r2, [r0, #24]
 802246e:	fb12 f206 	smulbb	r2, r2, r6
 8022472:	10d2      	asrs	r2, r2, #3
 8022474:	fb05 f202 	mul.w	r2, r5, r2
 8022478:	2a00      	cmp	r2, #0
 802247a:	da61      	bge.n	8022540 <Argus_Dev_DetuneClock+0x138>
 802247c:	4253      	negs	r3, r2
 802247e:	f3c3 5280 	ubfx	r2, r3, #22, #1
 8022482:	eb02 52d3 	add.w	r2, r2, r3, lsr #23
 8022486:	4252      	negs	r2, r2
 8022488:	b251      	sxtb	r1, r2
 802248a:	1a69      	subs	r1, r5, r1
 802248c:	b2d3      	uxtb	r3, r2
 802248e:	f894 2064 	ldrb.w	r2, [r4, #100]	@ 0x64
 8022492:	f3c1 01d7 	ubfx	r1, r1, #3, #24
 8022496:	f884 1063 	strb.w	r1, [r4, #99]	@ 0x63
 802249a:	f8b4 1057 	ldrh.w	r1, [r4, #87]	@ 0x57
 802249e:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80224a0:	f8c4 008a 	str.w	r0, [r4, #138]	@ 0x8a
 80224a4:	f002 021f 	and.w	r2, r2, #31
 80224a8:	1aeb      	subs	r3, r5, r3
 80224aa:	ea42 1343 	orr.w	r3, r2, r3, lsl #5
 80224ae:	4828      	ldr	r0, [pc, #160]	@ (8022550 <Argus_Dev_DetuneClock+0x148>)
 80224b0:	f8a4 108f 	strh.w	r1, [r4, #143]	@ 0x8f
 80224b4:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80224b8:	f022 0210 	bic.w	r2, r2, #16
 80224bc:	2110      	movs	r1, #16
 80224be:	2516      	movs	r5, #22
 80224c0:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 80224c4:	f884 308e 	strb.w	r3, [r4, #142]	@ 0x8e
 80224c8:	f884 2089 	strb.w	r2, [r4, #137]	@ 0x89
 80224cc:	f884 1088 	strb.w	r1, [r4, #136]	@ 0x88
 80224d0:	f884 108f 	strb.w	r1, [r4, #143]	@ 0x8f
 80224d4:	f884 508a 	strb.w	r5, [r4, #138]	@ 0x8a
 80224d8:	2309      	movs	r3, #9
 80224da:	e9cd 0400 	strd	r0, r4, [sp]
 80224de:	2200      	movs	r2, #0
 80224e0:	f104 0188 	add.w	r1, r4, #136	@ 0x88
 80224e4:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 80224e8:	f007 faee 	bl	8029ac8 <ADS_Transfer>
 80224ec:	1e03      	subs	r3, r0, #0
 80224ee:	da0c      	bge.n	802250a <Argus_Dev_DetuneClock+0x102>
 80224f0:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80224f2:	4918      	ldr	r1, [pc, #96]	@ (8022554 <Argus_Dev_DetuneClock+0x14c>)
 80224f4:	4311      	orrs	r1, r2
 80224f6:	f894 20fd 	ldrb.w	r2, [r4, #253]	@ 0xfd
 80224fa:	67a1      	str	r1, [r4, #120]	@ 0x78
 80224fc:	f042 0202 	orr.w	r2, r2, #2
 8022500:	f884 20fd 	strb.w	r2, [r4, #253]	@ 0xfd
 8022504:	f8d4 2104 	ldr.w	r2, [r4, #260]	@ 0x104
 8022508:	b9a2      	cbnz	r2, 8022534 <Argus_Dev_DetuneClock+0x12c>
 802250a:	4618      	mov	r0, r3
 802250c:	b002      	add	sp, #8
 802250e:	bd70      	pop	{r4, r5, r6, pc}
 8022510:	f8b3 3079 	ldrh.w	r3, [r3, #121]	@ 0x79
 8022514:	f8d4 01d4 	ldr.w	r0, [r4, #468]	@ 0x1d4
 8022518:	ba5b      	rev16	r3, r3
 802251a:	f9b0 6028 	ldrsh.w	r6, [r0, #40]	@ 0x28
 802251e:	f3c3 154a 	ubfx	r5, r3, #5, #11
 8022522:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8022526:	429e      	cmp	r6, r3
 8022528:	d19e      	bne.n	8022468 <Argus_Dev_DetuneClock+0x60>
 802252a:	f002 f98f 	bl	802484c <Argus_Cal_GetCalibrationPtr>
 802252e:	4629      	mov	r1, r5
 8022530:	2300      	movs	r3, #0
 8022532:	e7ac      	b.n	802248e <Argus_Dev_DetuneClock+0x86>
 8022534:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 8022538:	b002      	add	sp, #8
 802253a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802253e:	4710      	bx	r2
 8022540:	f3c2 5180 	ubfx	r1, r2, #22, #1
 8022544:	eb01 52d2 	add.w	r2, r1, r2, lsr #23
 8022548:	b251      	sxtb	r1, r2
 802254a:	1a69      	subs	r1, r5, r1
 802254c:	b2d3      	uxtb	r3, r2
 802254e:	e79e      	b.n	802248e <Argus_Dev_DetuneClock+0x86>
 8022550:	0801eff1 	.word	0x0801eff1
 8022554:	0003dffe 	.word	0x0003dffe

08022558 <Argus_Dev_ReadEEPROM>:
 8022558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802255c:	2300      	movs	r3, #0
 802255e:	b095      	sub	sp, #84	@ 0x54
 8022560:	600b      	str	r3, [r1, #0]
 8022562:	604b      	str	r3, [r1, #4]
 8022564:	608b      	str	r3, [r1, #8]
 8022566:	60cb      	str	r3, [r1, #12]
 8022568:	e9cd 3300 	strd	r3, r3, [sp]
 802256c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8022570:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8022574:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8022578:	e9cd 3304 	strd	r3, r3, [sp, #16]
 802257c:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8022580:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
 8022584:	f890 305b 	ldrb.w	r3, [r0, #91]	@ 0x5b
 8022588:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 802258a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802258e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8022592:	f023 0320 	bic.w	r3, r3, #32
 8022596:	6782      	str	r2, [r0, #120]	@ 0x78
 8022598:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 802259c:	aa0e      	add	r2, sp, #56	@ 0x38
 802259e:	2312      	movs	r3, #18
 80225a0:	460e      	mov	r6, r1
 80225a2:	f500 7790 	add.w	r7, r0, #288	@ 0x120
 80225a6:	f8b0 1059 	ldrh.w	r1, [r0, #89]	@ 0x59
 80225aa:	f8ad 1038 	strh.w	r1, [sp, #56]	@ 0x38
 80225ae:	4604      	mov	r4, r0
 80225b0:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
 80225b4:	f100 0b59 	add.w	fp, r0, #89	@ 0x59
 80225b8:	2303      	movs	r3, #3
 80225ba:	4611      	mov	r1, r2
 80225bc:	4638      	mov	r0, r7
 80225be:	f007 fa83 	bl	8029ac8 <ADS_Transfer>
 80225c2:	1e05      	subs	r5, r0, #0
 80225c4:	db4d      	blt.n	8022662 <Argus_Dev_ReadEEPROM+0x10a>
 80225c6:	2164      	movs	r1, #100	@ 0x64
 80225c8:	4638      	mov	r0, r7
 80225ca:	f007 f961 	bl	8029890 <ADS_AwaitIdle>
 80225ce:	1e05      	subs	r5, r0, #0
 80225d0:	db4b      	blt.n	802266a <Argus_Dev_ReadEEPROM+0x112>
 80225d2:	f89d 203a 	ldrb.w	r2, [sp, #58]	@ 0x3a
 80225d6:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
 80225da:	0651      	lsls	r1, r2, #25
 80225dc:	bf4c      	ite	mi
 80225de:	f043 0380 	orrmi.w	r3, r3, #128	@ 0x80
 80225e2:	f023 0380 	bicpl.w	r3, r3, #128	@ 0x80
 80225e6:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
 80225ea:	0693      	lsls	r3, r2, #26
 80225ec:	f140 8119 	bpl.w	8022822 <Argus_Dev_ReadEEPROM+0x2ca>
 80225f0:	a902      	add	r1, sp, #8
 80225f2:	4638      	mov	r0, r7
 80225f4:	f007 fbc2 	bl	8029d7c <ADS_ReadEEPROM>
 80225f8:	a906      	add	r1, sp, #24
 80225fa:	4682      	mov	sl, r0
 80225fc:	4638      	mov	r0, r7
 80225fe:	f007 fbbd 	bl	8029d7c <ADS_ReadEEPROM>
 8022602:	a90a      	add	r1, sp, #40	@ 0x28
 8022604:	4680      	mov	r8, r0
 8022606:	4638      	mov	r0, r7
 8022608:	f007 fbb8 	bl	8029d7c <ADS_ReadEEPROM>
 802260c:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8022610:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8022614:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8022618:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 802261a:	2200      	movs	r2, #0
 802261c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8022620:	67a3      	str	r3, [r4, #120]	@ 0x78
 8022622:	e9cd 2200 	strd	r2, r2, [sp]
 8022626:	f8b4 3059 	ldrh.w	r3, [r4, #89]	@ 0x59
 802262a:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 802262e:	2312      	movs	r3, #18
 8022630:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
 8022634:	4681      	mov	r9, r0
 8022636:	2303      	movs	r3, #3
 8022638:	a90e      	add	r1, sp, #56	@ 0x38
 802263a:	4638      	mov	r0, r7
 802263c:	f007 fa44 	bl	8029ac8 <ADS_Transfer>
 8022640:	1e05      	subs	r5, r0, #0
 8022642:	db05      	blt.n	8022650 <Argus_Dev_ReadEEPROM+0xf8>
 8022644:	4638      	mov	r0, r7
 8022646:	2164      	movs	r1, #100	@ 0x64
 8022648:	f007 f922 	bl	8029890 <ADS_AwaitIdle>
 802264c:	1e05      	subs	r5, r0, #0
 802264e:	db61      	blt.n	8022714 <Argus_Dev_ReadEEPROM+0x1bc>
 8022650:	9b02      	ldr	r3, [sp, #8]
 8022652:	9a06      	ldr	r2, [sp, #24]
 8022654:	4293      	cmp	r3, r2
 8022656:	d010      	beq.n	802267a <Argus_Dev_ReadEEPROM+0x122>
 8022658:	487a      	ldr	r0, [pc, #488]	@ (8022844 <Argus_Dev_ReadEEPROM+0x2ec>)
 802265a:	f7e3 ff57 	bl	800650c <print>
 802265e:	f06f 056c 	mvn.w	r5, #108	@ 0x6c
 8022662:	4628      	mov	r0, r5
 8022664:	b015      	add	sp, #84	@ 0x54
 8022666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802266a:	4629      	mov	r1, r5
 802266c:	4876      	ldr	r0, [pc, #472]	@ (8022848 <Argus_Dev_ReadEEPROM+0x2f0>)
 802266e:	f7e3 ff4d 	bl	800650c <print>
 8022672:	4628      	mov	r0, r5
 8022674:	b015      	add	sp, #84	@ 0x54
 8022676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802267a:	9a03      	ldr	r2, [sp, #12]
 802267c:	9907      	ldr	r1, [sp, #28]
 802267e:	428a      	cmp	r2, r1
 8022680:	d1ea      	bne.n	8022658 <Argus_Dev_ReadEEPROM+0x100>
 8022682:	9904      	ldr	r1, [sp, #16]
 8022684:	9808      	ldr	r0, [sp, #32]
 8022686:	4281      	cmp	r1, r0
 8022688:	d1e6      	bne.n	8022658 <Argus_Dev_ReadEEPROM+0x100>
 802268a:	9f05      	ldr	r7, [sp, #20]
 802268c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802268e:	4287      	cmp	r7, r0
 8022690:	d1e2      	bne.n	8022658 <Argus_Dev_ReadEEPROM+0x100>
 8022692:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8022694:	4283      	cmp	r3, r0
 8022696:	d1df      	bne.n	8022658 <Argus_Dev_ReadEEPROM+0x100>
 8022698:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802269a:	429a      	cmp	r2, r3
 802269c:	d1dc      	bne.n	8022658 <Argus_Dev_ReadEEPROM+0x100>
 802269e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80226a0:	4299      	cmp	r1, r3
 80226a2:	d1d9      	bne.n	8022658 <Argus_Dev_ReadEEPROM+0x100>
 80226a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80226a6:	429f      	cmp	r7, r3
 80226a8:	d1d6      	bne.n	8022658 <Argus_Dev_ReadEEPROM+0x100>
 80226aa:	f1ba 0f6d 	cmp.w	sl, #109	@ 0x6d
 80226ae:	f04f 0300 	mov.w	r3, #0
 80226b2:	d04c      	beq.n	802274e <Argus_Dev_ReadEEPROM+0x1f6>
 80226b4:	f1b8 0f6d 	cmp.w	r8, #109	@ 0x6d
 80226b8:	d049      	beq.n	802274e <Argus_Dev_ReadEEPROM+0x1f6>
 80226ba:	f1b9 0f6d 	cmp.w	r9, #109	@ 0x6d
 80226be:	d046      	beq.n	802274e <Argus_Dev_ReadEEPROM+0x1f6>
 80226c0:	af02      	add	r7, sp, #8
 80226c2:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
 80226c6:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
 80226ca:	9312      	str	r3, [sp, #72]	@ 0x48
 80226cc:	f8ad 304c 	strh.w	r3, [sp, #76]	@ 0x4c
 80226d0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80226d2:	6030      	str	r0, [r6, #0]
 80226d4:	6071      	str	r1, [r6, #4]
 80226d6:	60f3      	str	r3, [r6, #12]
 80226d8:	60b2      	str	r2, [r6, #8]
 80226da:	4631      	mov	r1, r6
 80226dc:	a80e      	add	r0, sp, #56	@ 0x38
 80226de:	f7f2 f8b9 	bl	8014854 <EEPROM_Decode>
 80226e2:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	@ 0x4a
 80226e6:	2b01      	cmp	r3, #1
 80226e8:	d059      	beq.n	802279e <Argus_Dev_ReadEEPROM+0x246>
 80226ea:	2b00      	cmp	r3, #0
 80226ec:	d137      	bne.n	802275e <Argus_Dev_ReadEEPROM+0x206>
 80226ee:	4630      	mov	r0, r6
 80226f0:	f9bd 704c 	ldrsh.w	r7, [sp, #76]	@ 0x4c
 80226f4:	f7f2 f87a 	bl	80147ec <EEPROM_ReadChipId>
 80226f8:	6060      	str	r0, [r4, #4]
 80226fa:	4630      	mov	r0, r6
 80226fc:	f7f2 f884 	bl	8014808 <EEPROM_ReadModule>
 8022700:	1e43      	subs	r3, r0, #1
 8022702:	72a0      	strb	r0, [r4, #10]
 8022704:	2b06      	cmp	r3, #6
 8022706:	d80e      	bhi.n	8022726 <Argus_Dev_ReadEEPROM+0x1ce>
 8022708:	e8df f003 	tbb	[pc, r3]
 802270c:	1709090b 	.word	0x1709090b
 8022710:	0909      	.short	0x0909
 8022712:	09          	.byte	0x09
 8022713:	00          	.byte	0x00
 8022714:	4629      	mov	r1, r5
 8022716:	484d      	ldr	r0, [pc, #308]	@ (802284c <Argus_Dev_ReadEEPROM+0x2f4>)
 8022718:	f7e3 fef8 	bl	800650c <print>
 802271c:	e798      	b.n	8022650 <Argus_Dev_ReadEEPROM+0xf8>
 802271e:	2f00      	cmp	r7, #0
 8022720:	d13a      	bne.n	8022798 <Argus_Dev_ReadEEPROM+0x240>
 8022722:	2301      	movs	r3, #1
 8022724:	7263      	strb	r3, [r4, #9]
 8022726:	7a23      	ldrb	r3, [r4, #8]
 8022728:	2b02      	cmp	r3, #2
 802272a:	d073      	beq.n	8022814 <Argus_Dev_ReadEEPROM+0x2bc>
 802272c:	2b02      	cmp	r3, #2
 802272e:	d807      	bhi.n	8022740 <Argus_Dev_ReadEEPROM+0x1e8>
 8022730:	2b01      	cmp	r3, #1
 8022732:	d096      	beq.n	8022662 <Argus_Dev_ReadEEPROM+0x10a>
 8022734:	2300      	movs	r3, #0
 8022736:	7223      	strb	r3, [r4, #8]
 8022738:	e793      	b.n	8022662 <Argus_Dev_ReadEEPROM+0x10a>
 802273a:	2303      	movs	r3, #3
 802273c:	7263      	strb	r3, [r4, #9]
 802273e:	e7f2      	b.n	8022726 <Argus_Dev_ReadEEPROM+0x1ce>
 8022740:	3b03      	subs	r3, #3
 8022742:	2b02      	cmp	r3, #2
 8022744:	d8f6      	bhi.n	8022734 <Argus_Dev_ReadEEPROM+0x1dc>
 8022746:	4628      	mov	r0, r5
 8022748:	b015      	add	sp, #84	@ 0x54
 802274a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802274e:	4840      	ldr	r0, [pc, #256]	@ (8022850 <Argus_Dev_ReadEEPROM+0x2f8>)
 8022750:	f7e3 fedc 	bl	800650c <print>
 8022754:	256d      	movs	r5, #109	@ 0x6d
 8022756:	4628      	mov	r0, r5
 8022758:	b015      	add	sp, #84	@ 0x54
 802275a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802275e:	4630      	mov	r0, r6
 8022760:	f7f2 f844 	bl	80147ec <EEPROM_ReadChipId>
 8022764:	6060      	str	r0, [r4, #4]
 8022766:	4630      	mov	r0, r6
 8022768:	f7f2 f84e 	bl	8014808 <EEPROM_ReadModule>
 802276c:	1e43      	subs	r3, r0, #1
 802276e:	72a0      	strb	r0, [r4, #10]
 8022770:	2b06      	cmp	r3, #6
 8022772:	d8d8      	bhi.n	8022726 <Argus_Dev_ReadEEPROM+0x1ce>
 8022774:	a201      	add	r2, pc, #4	@ (adr r2, 802277c <Argus_Dev_ReadEEPROM+0x224>)
 8022776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802277a:	bf00      	nop
 802277c:	08022723 	.word	0x08022723
 8022780:	08022799 	.word	0x08022799
 8022784:	08022799 	.word	0x08022799
 8022788:	0802273b 	.word	0x0802273b
 802278c:	08022799 	.word	0x08022799
 8022790:	08022799 	.word	0x08022799
 8022794:	08022799 	.word	0x08022799
 8022798:	2302      	movs	r3, #2
 802279a:	7263      	strb	r3, [r4, #9]
 802279c:	e7c3      	b.n	8022726 <Argus_Dev_ReadEEPROM+0x1ce>
 802279e:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	@ 0x4c
 80227a2:	2b03      	cmp	r3, #3
 80227a4:	d1db      	bne.n	802275e <Argus_Dev_ReadEEPROM+0x206>
 80227a6:	4630      	mov	r0, r6
 80227a8:	f7f2 f820 	bl	80147ec <EEPROM_ReadChipId>
 80227ac:	6060      	str	r0, [r4, #4]
 80227ae:	4630      	mov	r0, r6
 80227b0:	f7f2 f82a 	bl	8014808 <EEPROM_ReadModule>
 80227b4:	1e43      	subs	r3, r0, #1
 80227b6:	72a0      	strb	r0, [r4, #10]
 80227b8:	2b06      	cmp	r3, #6
 80227ba:	d8b4      	bhi.n	8022726 <Argus_Dev_ReadEEPROM+0x1ce>
 80227bc:	a201      	add	r2, pc, #4	@ (adr r2, 80227c4 <Argus_Dev_ReadEEPROM+0x26c>)
 80227be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80227c2:	bf00      	nop
 80227c4:	08022723 	.word	0x08022723
 80227c8:	080227e1 	.word	0x080227e1
 80227cc:	080227e1 	.word	0x080227e1
 80227d0:	0802280b 	.word	0x0802280b
 80227d4:	080227e1 	.word	0x080227e1
 80227d8:	080227e1 	.word	0x080227e1
 80227dc:	080227e1 	.word	0x080227e1
 80227e0:	7a23      	ldrb	r3, [r4, #8]
 80227e2:	2204      	movs	r2, #4
 80227e4:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 80227e8:	2b02      	cmp	r3, #2
 80227ea:	7262      	strb	r2, [r4, #9]
 80227ec:	72a0      	strb	r0, [r4, #10]
 80227ee:	d19d      	bne.n	802272c <Argus_Dev_ReadEEPROM+0x1d4>
 80227f0:	7aa3      	ldrb	r3, [r4, #10]
 80227f2:	3b43      	subs	r3, #67	@ 0x43
 80227f4:	2b04      	cmp	r3, #4
 80227f6:	f63f af34 	bhi.w	8022662 <Argus_Dev_ReadEEPROM+0x10a>
 80227fa:	4a16      	ldr	r2, [pc, #88]	@ (8022854 <Argus_Dev_ReadEEPROM+0x2fc>)
 80227fc:	6863      	ldr	r3, [r4, #4]
 80227fe:	4293      	cmp	r3, r2
 8022800:	bf8c      	ite	hi
 8022802:	2305      	movhi	r3, #5
 8022804:	2303      	movls	r3, #3
 8022806:	7223      	strb	r3, [r4, #8]
 8022808:	e72b      	b.n	8022662 <Argus_Dev_ReadEEPROM+0x10a>
 802280a:	f244 4305 	movw	r3, #17413	@ 0x4405
 802280e:	f8a4 3009 	strh.w	r3, [r4, #9]
 8022812:	e788      	b.n	8022726 <Argus_Dev_ReadEEPROM+0x1ce>
 8022814:	7aa3      	ldrb	r3, [r4, #10]
 8022816:	2b07      	cmp	r3, #7
 8022818:	d8eb      	bhi.n	80227f2 <Argus_Dev_ReadEEPROM+0x29a>
 802281a:	2b01      	cmp	r3, #1
 802281c:	f67f af21 	bls.w	8022662 <Argus_Dev_ReadEEPROM+0x10a>
 8022820:	e7eb      	b.n	80227fa <Argus_Dev_ReadEEPROM+0x2a2>
 8022822:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8022824:	4b0c      	ldr	r3, [pc, #48]	@ (8022858 <Argus_Dev_ReadEEPROM+0x300>)
 8022826:	f894 20fd 	ldrb.w	r2, [r4, #253]	@ 0xfd
 802282a:	430b      	orrs	r3, r1
 802282c:	67a3      	str	r3, [r4, #120]	@ 0x78
 802282e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8022830:	f042 0202 	orr.w	r2, r2, #2
 8022834:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8022838:	f884 20fd 	strb.w	r2, [r4, #253]	@ 0xfd
 802283c:	67a3      	str	r3, [r4, #120]	@ 0x78
 802283e:	f06f 0571 	mvn.w	r5, #113	@ 0x71
 8022842:	e70e      	b.n	8022662 <Argus_Dev_ReadEEPROM+0x10a>
 8022844:	080305f8 	.word	0x080305f8
 8022848:	08030584 	.word	0x08030584
 802284c:	080305bc 	.word	0x080305bc
 8022850:	080306d4 	.word	0x080306d4
 8022854:	000493e0 	.word	0x000493e0
 8022858:	0003dffe 	.word	0x0003dffe

0802285c <GetStatusCallback>:
 802285c:	6008      	str	r0, [r1, #0]
 802285e:	4770      	bx	lr

08022860 <AuxMeasurementFinish>:
 8022860:	f8d2 3104 	ldr.w	r3, [r2, #260]	@ 0x104
 8022864:	b143      	cbz	r3, 8022878 <AuxMeasurementFinish+0x18>
 8022866:	b410      	push	{r4}
 8022868:	2400      	movs	r4, #0
 802286a:	f8c2 4104 	str.w	r4, [r2, #260]	@ 0x104
 802286e:	f8d2 1108 	ldr.w	r1, [r2, #264]	@ 0x108
 8022872:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022876:	4718      	bx	r3
 8022878:	4770      	bx	lr
 802287a:	bf00      	nop

0802287c <AuxMeasurementStarted>:
 802287c:	2800      	cmp	r0, #0
 802287e:	b508      	push	{r3, lr}
 8022880:	460b      	mov	r3, r1
 8022882:	da09      	bge.n	8022898 <AuxMeasurementStarted+0x1c>
 8022884:	6f88      	ldr	r0, [r1, #120]	@ 0x78
 8022886:	f891 20fd 	ldrb.w	r2, [r1, #253]	@ 0xfd
 802288a:	4909      	ldr	r1, [pc, #36]	@ (80228b0 <AuxMeasurementStarted+0x34>)
 802288c:	f042 0202 	orr.w	r2, r2, #2
 8022890:	4301      	orrs	r1, r0
 8022892:	6799      	str	r1, [r3, #120]	@ 0x78
 8022894:	f883 20fd 	strb.w	r2, [r3, #253]	@ 0xfd
 8022898:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 802289a:	0592      	lsls	r2, r2, #22
 802289c:	d401      	bmi.n	80228a2 <AuxMeasurementStarted+0x26>
 802289e:	2000      	movs	r0, #0
 80228a0:	bd08      	pop	{r3, pc}
 80228a2:	f103 0188 	add.w	r1, r3, #136	@ 0x88
 80228a6:	4618      	mov	r0, r3
 80228a8:	f7ff fd8a 	bl	80223c0 <Argus_Dev_CheckDeviceConfigRegister>
 80228ac:	2000      	movs	r0, #0
 80228ae:	bd08      	pop	{r3, pc}
 80228b0:	0003dffe 	.word	0x0003dffe

080228b4 <ChargePumpRampSync.constprop.0>:
 80228b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80228b6:	b087      	sub	sp, #28
 80228b8:	2300      	movs	r3, #0
 80228ba:	2202      	movs	r2, #2
 80228bc:	4604      	mov	r4, r0
 80228be:	a903      	add	r1, sp, #12
 80228c0:	a802      	add	r0, sp, #8
 80228c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80228c6:	9201      	str	r2, [sp, #4]
 80228c8:	f7e4 fc66 	bl	8007198 <Timer_GetCounterValue>
 80228cc:	4929      	ldr	r1, [pc, #164]	@ (8022974 <ChargePumpRampSync.constprop.0+0xc0>)
 80228ce:	aa01      	add	r2, sp, #4
 80228d0:	4620      	mov	r0, r4
 80228d2:	f7ff fc19 	bl	8022108 <Argus_Dev_ChargePumpRamp>
 80228d6:	2800      	cmp	r0, #0
 80228d8:	db22      	blt.n	8022920 <ChargePumpRampSync.constprop.0+0x6c>
 80228da:	4c27      	ldr	r4, [pc, #156]	@ (8022978 <ChargePumpRampSync.constprop.0+0xc4>)
 80228dc:	4d27      	ldr	r5, [pc, #156]	@ (802297c <ChargePumpRampSync.constprop.0+0xc8>)
 80228de:	a804      	add	r0, sp, #16
 80228e0:	a905      	add	r1, sp, #20
 80228e2:	f7e4 fc59 	bl	8007198 <Timer_GetCounterValue>
 80228e6:	e9dd 2603 	ldrd	r2, r6, [sp, #12]
 80228ea:	1913      	adds	r3, r2, r4
 80228ec:	bf2c      	ite	cs
 80228ee:	2001      	movcs	r0, #1
 80228f0:	2000      	movcc	r0, #0
 80228f2:	42ab      	cmp	r3, r5
 80228f4:	9f05      	ldr	r7, [sp, #20]
 80228f6:	9902      	ldr	r1, [sp, #8]
 80228f8:	d814      	bhi.n	8022924 <ChargePumpRampSync.constprop.0+0x70>
 80228fa:	f080 0001 	eor.w	r0, r0, #1
 80228fe:	468c      	mov	ip, r1
 8022900:	b1d8      	cbz	r0, 802293a <ChargePumpRampSync.constprop.0+0x86>
 8022902:	42b1      	cmp	r1, r6
 8022904:	d023      	beq.n	802294e <ChargePumpRampSync.constprop.0+0x9a>
 8022906:	bf34      	ite	cc
 8022908:	2201      	movcc	r2, #1
 802290a:	2200      	movcs	r2, #0
 802290c:	b1da      	cbz	r2, 8022946 <ChargePumpRampSync.constprop.0+0x92>
 802290e:	45b4      	cmp	ip, r6
 8022910:	d02b      	beq.n	802296a <ChargePumpRampSync.constprop.0+0xb6>
 8022912:	bf34      	ite	cc
 8022914:	2301      	movcc	r3, #1
 8022916:	2300      	movcs	r3, #0
 8022918:	b9ab      	cbnz	r3, 8022946 <ChargePumpRampSync.constprop.0+0x92>
 802291a:	9801      	ldr	r0, [sp, #4]
 802291c:	2802      	cmp	r0, #2
 802291e:	d0de      	beq.n	80228de <ChargePumpRampSync.constprop.0+0x2a>
 8022920:	b007      	add	sp, #28
 8022922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022924:	f101 0c01 	add.w	ip, r1, #1
 8022928:	4561      	cmp	r1, ip
 802292a:	f5a2 235b 	sub.w	r3, r2, #897024	@ 0xdb000
 802292e:	f5a3 633a 	sub.w	r3, r3, #2976	@ 0xba0
 8022932:	bf2c      	ite	cs
 8022934:	2000      	movcs	r0, #0
 8022936:	2001      	movcc	r0, #1
 8022938:	e7e2      	b.n	8022900 <ChargePumpRampSync.constprop.0+0x4c>
 802293a:	42b1      	cmp	r1, r6
 802293c:	d00c      	beq.n	8022958 <ChargePumpRampSync.constprop.0+0xa4>
 802293e:	d3ec      	bcc.n	802291a <ChargePumpRampSync.constprop.0+0x66>
 8022940:	45b4      	cmp	ip, r6
 8022942:	d00d      	beq.n	8022960 <ChargePumpRampSync.constprop.0+0xac>
 8022944:	d2e9      	bcs.n	802291a <ChargePumpRampSync.constprop.0+0x66>
 8022946:	f06f 0005 	mvn.w	r0, #5
 802294a:	b007      	add	sp, #28
 802294c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802294e:	42ba      	cmp	r2, r7
 8022950:	bf8c      	ite	hi
 8022952:	2200      	movhi	r2, #0
 8022954:	2201      	movls	r2, #1
 8022956:	e7d9      	b.n	802290c <ChargePumpRampSync.constprop.0+0x58>
 8022958:	42ba      	cmp	r2, r7
 802295a:	d9de      	bls.n	802291a <ChargePumpRampSync.constprop.0+0x66>
 802295c:	45b4      	cmp	ip, r6
 802295e:	d1f1      	bne.n	8022944 <ChargePumpRampSync.constprop.0+0x90>
 8022960:	42bb      	cmp	r3, r7
 8022962:	d8da      	bhi.n	802291a <ChargePumpRampSync.constprop.0+0x66>
 8022964:	f06f 0005 	mvn.w	r0, #5
 8022968:	e7ef      	b.n	802294a <ChargePumpRampSync.constprop.0+0x96>
 802296a:	42bb      	cmp	r3, r7
 802296c:	bf8c      	ite	hi
 802296e:	2300      	movhi	r3, #0
 8022970:	2301      	movls	r3, #1
 8022972:	e7d1      	b.n	8022918 <ChargePumpRampSync.constprop.0+0x64>
 8022974:	0802285d 	.word	0x0802285d
 8022978:	000186a0 	.word	0x000186a0
 802297c:	000f423f 	.word	0x000f423f

08022980 <Argus_Dev_BglMeasurement>:
 8022980:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8022982:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022986:	f043 0310 	orr.w	r3, r3, #16
 802298a:	2500      	movs	r5, #0
 802298c:	800d      	strh	r5, [r1, #0]
 802298e:	6783      	str	r3, [r0, #120]	@ 0x78
 8022990:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8022992:	f890 904e 	ldrb.w	r9, [r0, #78]	@ 0x4e
 8022996:	f880 509c 	strb.w	r5, [r0, #156]	@ 0x9c
 802299a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 802299e:	6783      	str	r3, [r0, #120]	@ 0x78
 80229a0:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 80229a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80229a6:	6783      	str	r3, [r0, #120]	@ 0x78
 80229a8:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 80229aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80229ae:	6783      	str	r3, [r0, #120]	@ 0x78
 80229b0:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 80229b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80229b6:	6783      	str	r3, [r0, #120]	@ 0x78
 80229b8:	f8d0 3047 	ldr.w	r3, [r0, #71]	@ 0x47
 80229bc:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
 80229c0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80229c4:	f023 0303 	bic.w	r3, r3, #3
 80229c8:	f880 308a 	strb.w	r3, [r0, #138]	@ 0x8a
 80229cc:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 80229ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80229d2:	6783      	str	r3, [r0, #120]	@ 0x78
 80229d4:	f890 3056 	ldrb.w	r3, [r0, #86]	@ 0x56
 80229d8:	f023 0301 	bic.w	r3, r3, #1
 80229dc:	f880 309a 	strb.w	r3, [r0, #154]	@ 0x9a
 80229e0:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 80229e2:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
 80229e6:	f8b0 3054 	ldrh.w	r3, [r0, #84]	@ 0x54
 80229ea:	f8a0 3098 	strh.w	r3, [r0, #152]	@ 0x98
 80229ee:	4b96      	ldr	r3, [pc, #600]	@ (8022c48 <Argus_Dev_BglMeasurement+0x2c8>)
 80229f0:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
 80229f4:	2301      	movs	r3, #1
 80229f6:	f880 308b 	strb.w	r3, [r0, #139]	@ 0x8b
 80229fa:	2308      	movs	r3, #8
 80229fc:	f880 3088 	strb.w	r3, [r0, #136]	@ 0x88
 8022a00:	231e      	movs	r3, #30
 8022a02:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
 8022a06:	f64f 7322 	movw	r3, #65314	@ 0xff22
 8022a0a:	f8a0 3094 	strh.w	r3, [r0, #148]	@ 0x94
 8022a0e:	460e      	mov	r6, r1
 8022a10:	230e      	movs	r3, #14
 8022a12:	21ff      	movs	r1, #255	@ 0xff
 8022a14:	f880 1096 	strb.w	r1, [r0, #150]	@ 0x96
 8022a18:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
 8022a1c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8022a1e:	f880 509d 	strb.w	r5, [r0, #157]	@ 0x9d
 8022a22:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8022a26:	f880 309e 	strb.w	r3, [r0, #158]	@ 0x9e
 8022a2a:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8022a2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8022a30:	6783      	str	r3, [r0, #120]	@ 0x78
 8022a32:	f8b0 3069 	ldrh.w	r3, [r0, #105]	@ 0x69
 8022a36:	f8a0 309f 	strh.w	r3, [r0, #159]	@ 0x9f
 8022a3a:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 8022a3e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8022a42:	f043 0301 	orr.w	r3, r3, #1
 8022a46:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8022a4a:	f890 306b 	ldrb.w	r3, [r0, #107]	@ 0x6b
 8022a4e:	f003 03e1 	and.w	r3, r3, #225	@ 0xe1
 8022a52:	f063 031f 	orn	r3, r3, #31
 8022a56:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
 8022a5a:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8022a5c:	f043 0308 	orr.w	r3, r3, #8
 8022a60:	6783      	str	r3, [r0, #120]	@ 0x78
 8022a62:	230c      	movs	r3, #12
 8022a64:	f880 309b 	strb.w	r3, [r0, #155]	@ 0x9b
 8022a68:	231c      	movs	r3, #28
 8022a6a:	4604      	mov	r4, r0
 8022a6c:	b083      	sub	sp, #12
 8022a6e:	f100 0788 	add.w	r7, r0, #136	@ 0x88
 8022a72:	f880 309f 	strb.w	r3, [r0, #159]	@ 0x9f
 8022a76:	2221      	movs	r2, #33	@ 0x21
 8022a78:	30a2      	adds	r0, #162	@ 0xa2
 8022a7a:	f008 fa96 	bl	802afaa <memset>
 8022a7e:	e9cd 5500 	strd	r5, r5, [sp]
 8022a82:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8022a84:	f043 0320 	orr.w	r3, r3, #32
 8022a88:	67a3      	str	r3, [r4, #120]	@ 0x78
 8022a8a:	f029 033f 	bic.w	r3, r9, #63	@ 0x3f
 8022a8e:	f043 030f 	orr.w	r3, r3, #15
 8022a92:	f884 304e 	strb.w	r3, [r4, #78]	@ 0x4e
 8022a96:	2306      	movs	r3, #6
 8022a98:	f884 30a2 	strb.w	r3, [r4, #162]	@ 0xa2
 8022a9c:	f504 7890 	add.w	r8, r4, #288	@ 0x120
 8022aa0:	f104 03c3 	add.w	r3, r4, #195	@ 0xc3
 8022aa4:	1bdb      	subs	r3, r3, r7
 8022aa6:	462a      	mov	r2, r5
 8022aa8:	4639      	mov	r1, r7
 8022aaa:	4640      	mov	r0, r8
 8022aac:	f007 f80c 	bl	8029ac8 <ADS_Transfer>
 8022ab0:	2800      	cmp	r0, #0
 8022ab2:	f2c0 80ba 	blt.w	8022c2a <Argus_Dev_BglMeasurement+0x2aa>
 8022ab6:	2164      	movs	r1, #100	@ 0x64
 8022ab8:	4640      	mov	r0, r8
 8022aba:	f006 fee9 	bl	8029890 <ADS_AwaitIdle>
 8022abe:	2800      	cmp	r0, #0
 8022ac0:	f2c0 80b3 	blt.w	8022c2a <Argus_Dev_BglMeasurement+0x2aa>
 8022ac4:	4620      	mov	r0, r4
 8022ac6:	f7ff fef5 	bl	80228b4 <ChargePumpRampSync.constprop.0>
 8022aca:	2800      	cmp	r0, #0
 8022acc:	f2c0 80ad 	blt.w	8022c2a <Argus_Dev_BglMeasurement+0x2aa>
 8022ad0:	495e      	ldr	r1, [pc, #376]	@ (8022c4c <Argus_Dev_BglMeasurement+0x2cc>)
 8022ad2:	9500      	str	r5, [sp, #0]
 8022ad4:	462b      	mov	r3, r5
 8022ad6:	462a      	mov	r2, r5
 8022ad8:	4640      	mov	r0, r8
 8022ada:	f007 f85f 	bl	8029b9c <ADS_Start>
 8022ade:	2800      	cmp	r0, #0
 8022ae0:	f2c0 80a3 	blt.w	8022c2a <Argus_Dev_BglMeasurement+0x2aa>
 8022ae4:	2164      	movs	r1, #100	@ 0x64
 8022ae6:	4640      	mov	r0, r8
 8022ae8:	f006 fed2 	bl	8029890 <ADS_AwaitIdle>
 8022aec:	2800      	cmp	r0, #0
 8022aee:	f2c0 809c 	blt.w	8022c2a <Argus_Dev_BglMeasurement+0x2aa>
 8022af2:	9500      	str	r5, [sp, #0]
 8022af4:	462b      	mov	r3, r5
 8022af6:	2221      	movs	r2, #33	@ 0x21
 8022af8:	4639      	mov	r1, r7
 8022afa:	4640      	mov	r0, r8
 8022afc:	f007 f8ca 	bl	8029c94 <ADS_ReadData>
 8022b00:	2800      	cmp	r0, #0
 8022b02:	f2c0 8092 	blt.w	8022c2a <Argus_Dev_BglMeasurement+0x2aa>
 8022b06:	2164      	movs	r1, #100	@ 0x64
 8022b08:	4640      	mov	r0, r8
 8022b0a:	f006 fec1 	bl	8029890 <ADS_AwaitIdle>
 8022b0e:	2800      	cmp	r0, #0
 8022b10:	f2c0 808b 	blt.w	8022c2a <Argus_Dev_BglMeasurement+0x2aa>
 8022b14:	46a3      	mov	fp, r4
 8022b16:	f104 0a63 	add.w	sl, r4, #99	@ 0x63
 8022b1a:	4622      	mov	r2, r4
 8022b1c:	f892 308a 	ldrb.w	r3, [r2, #138]	@ 0x8a
 8022b20:	f892 1089 	ldrb.w	r1, [r2, #137]	@ 0x89
 8022b24:	021b      	lsls	r3, r3, #8
 8022b26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8022b2a:	f892 108b 	ldrb.w	r1, [r2, #139]	@ 0x8b
 8022b2e:	3203      	adds	r2, #3
 8022b30:	430b      	orrs	r3, r1
 8022b32:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8022b36:	4552      	cmp	r2, sl
 8022b38:	eba5 0503 	sub.w	r5, r5, r3
 8022b3c:	d1ee      	bne.n	8022b1c <Argus_Dev_BglMeasurement+0x19c>
 8022b3e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8022b40:	f043 0308 	orr.w	r3, r3, #8
 8022b44:	2200      	movs	r2, #0
 8022b46:	67a3      	str	r3, [r4, #120]	@ 0x78
 8022b48:	f04f 33ff 	mov.w	r3, #4294967295
 8022b4c:	f8c4 2099 	str.w	r2, [r4, #153]	@ 0x99
 8022b50:	f8c4 209d 	str.w	r2, [r4, #157]	@ 0x9d
 8022b54:	f8c4 20a1 	str.w	r2, [r4, #161]	@ 0xa1
 8022b58:	f8c4 20a5 	str.w	r2, [r4, #165]	@ 0xa5
 8022b5c:	e9cd 2200 	strd	r2, r2, [sp]
 8022b60:	f8c4 3089 	str.w	r3, [r4, #137]	@ 0x89
 8022b64:	f8c4 308d 	str.w	r3, [r4, #141]	@ 0x8d
 8022b68:	f8c4 3091 	str.w	r3, [r4, #145]	@ 0x91
 8022b6c:	f8c4 3095 	str.w	r3, [r4, #149]	@ 0x95
 8022b70:	2306      	movs	r3, #6
 8022b72:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
 8022b76:	f104 03a9 	add.w	r3, r4, #169	@ 0xa9
 8022b7a:	1bdb      	subs	r3, r3, r7
 8022b7c:	4639      	mov	r1, r7
 8022b7e:	4640      	mov	r0, r8
 8022b80:	f006 ffa2 	bl	8029ac8 <ADS_Transfer>
 8022b84:	2800      	cmp	r0, #0
 8022b86:	db50      	blt.n	8022c2a <Argus_Dev_BglMeasurement+0x2aa>
 8022b88:	2164      	movs	r1, #100	@ 0x64
 8022b8a:	4640      	mov	r0, r8
 8022b8c:	f006 fe80 	bl	8029890 <ADS_AwaitIdle>
 8022b90:	2800      	cmp	r0, #0
 8022b92:	f04f 0200 	mov.w	r2, #0
 8022b96:	db48      	blt.n	8022c2a <Argus_Dev_BglMeasurement+0x2aa>
 8022b98:	492c      	ldr	r1, [pc, #176]	@ (8022c4c <Argus_Dev_BglMeasurement+0x2cc>)
 8022b9a:	9200      	str	r2, [sp, #0]
 8022b9c:	4613      	mov	r3, r2
 8022b9e:	4640      	mov	r0, r8
 8022ba0:	f006 fffc 	bl	8029b9c <ADS_Start>
 8022ba4:	2800      	cmp	r0, #0
 8022ba6:	db40      	blt.n	8022c2a <Argus_Dev_BglMeasurement+0x2aa>
 8022ba8:	2164      	movs	r1, #100	@ 0x64
 8022baa:	4640      	mov	r0, r8
 8022bac:	f006 fe70 	bl	8029890 <ADS_AwaitIdle>
 8022bb0:	2800      	cmp	r0, #0
 8022bb2:	f04f 0200 	mov.w	r2, #0
 8022bb6:	db38      	blt.n	8022c2a <Argus_Dev_BglMeasurement+0x2aa>
 8022bb8:	9200      	str	r2, [sp, #0]
 8022bba:	4613      	mov	r3, r2
 8022bbc:	4639      	mov	r1, r7
 8022bbe:	2221      	movs	r2, #33	@ 0x21
 8022bc0:	4640      	mov	r0, r8
 8022bc2:	f007 f867 	bl	8029c94 <ADS_ReadData>
 8022bc6:	2800      	cmp	r0, #0
 8022bc8:	db2f      	blt.n	8022c2a <Argus_Dev_BglMeasurement+0x2aa>
 8022bca:	4640      	mov	r0, r8
 8022bcc:	2164      	movs	r1, #100	@ 0x64
 8022bce:	f006 fe5f 	bl	8029890 <ADS_AwaitIdle>
 8022bd2:	2800      	cmp	r0, #0
 8022bd4:	db29      	blt.n	8022c2a <Argus_Dev_BglMeasurement+0x2aa>
 8022bd6:	f89b 308a 	ldrb.w	r3, [fp, #138]	@ 0x8a
 8022bda:	f89b 2089 	ldrb.w	r2, [fp, #137]	@ 0x89
 8022bde:	021b      	lsls	r3, r3, #8
 8022be0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8022be4:	f89b 208b 	ldrb.w	r2, [fp, #139]	@ 0x8b
 8022be8:	f10b 0b03 	add.w	fp, fp, #3
 8022bec:	4313      	orrs	r3, r2
 8022bee:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8022bf2:	45d3      	cmp	fp, sl
 8022bf4:	441d      	add	r5, r3
 8022bf6:	d1ee      	bne.n	8022bd6 <Argus_Dev_BglMeasurement+0x256>
 8022bf8:	2d00      	cmp	r5, #0
 8022bfa:	db23      	blt.n	8022c44 <Argus_Dev_BglMeasurement+0x2c4>
 8022bfc:	012b      	lsls	r3, r5, #4
 8022bfe:	f44f 7204 	mov.w	r2, #528	@ 0x210
 8022c02:	fbb3 f3f2 	udiv	r3, r3, r2
 8022c06:	b29b      	uxth	r3, r3
 8022c08:	8033      	strh	r3, [r6, #0]
 8022c0a:	f894 304e 	ldrb.w	r3, [r4, #78]	@ 0x4e
 8022c0e:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8022c10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8022c14:	f009 093f 	and.w	r9, r9, #63	@ 0x3f
 8022c18:	f042 0220 	orr.w	r2, r2, #32
 8022c1c:	ea43 0909 	orr.w	r9, r3, r9
 8022c20:	67a2      	str	r2, [r4, #120]	@ 0x78
 8022c22:	f884 904e 	strb.w	r9, [r4, #78]	@ 0x4e
 8022c26:	2000      	movs	r0, #0
 8022c28:	e009      	b.n	8022c3e <Argus_Dev_BglMeasurement+0x2be>
 8022c2a:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8022c2c:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 8022c30:	4a07      	ldr	r2, [pc, #28]	@ (8022c50 <Argus_Dev_BglMeasurement+0x2d0>)
 8022c32:	f043 0302 	orr.w	r3, r3, #2
 8022c36:	430a      	orrs	r2, r1
 8022c38:	67a2      	str	r2, [r4, #120]	@ 0x78
 8022c3a:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 8022c3e:	b003      	add	sp, #12
 8022c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c44:	2300      	movs	r3, #0
 8022c46:	e7df      	b.n	8022c08 <Argus_Dev_BglMeasurement+0x288>
 8022c48:	ffff0120 	.word	0xffff0120
 8022c4c:	000186a0 	.word	0x000186a0
 8022c50:	0003dffe 	.word	0x0003dffe

08022c54 <Argus_Dev_VsubMeasurement>:
 8022c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c58:	b08b      	sub	sp, #44	@ 0x2c
 8022c5a:	460d      	mov	r5, r1
 8022c5c:	9105      	str	r1, [sp, #20]
 8022c5e:	2100      	movs	r1, #0
 8022c60:	8029      	strh	r1, [r5, #0]
 8022c62:	f890 104e 	ldrb.w	r1, [r0, #78]	@ 0x4e
 8022c66:	4699      	mov	r9, r3
 8022c68:	f001 033f 	and.w	r3, r1, #63	@ 0x3f
 8022c6c:	4293      	cmp	r3, r2
 8022c6e:	4604      	mov	r4, r0
 8022c70:	9304      	str	r3, [sp, #16]
 8022c72:	d00a      	beq.n	8022c8a <Argus_Dev_VsubMeasurement+0x36>
 8022c74:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8022c76:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8022c7a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8022c7e:	430a      	orrs	r2, r1
 8022c80:	f043 0320 	orr.w	r3, r3, #32
 8022c84:	f880 204e 	strb.w	r2, [r0, #78]	@ 0x4e
 8022c88:	6783      	str	r3, [r0, #120]	@ 0x78
 8022c8a:	4620      	mov	r0, r4
 8022c8c:	f7ff fe12 	bl	80228b4 <ChargePumpRampSync.constprop.0>
 8022c90:	2800      	cmp	r0, #0
 8022c92:	f2c0 8181 	blt.w	8022f98 <Argus_Dev_VsubMeasurement+0x344>
 8022c96:	f1b9 0f00 	cmp.w	r9, #0
 8022c9a:	f000 809b 	beq.w	8022dd4 <Argus_Dev_VsubMeasurement+0x180>
 8022c9e:	2700      	movs	r7, #0
 8022ca0:	f8d4 211c 	ldr.w	r2, [r4, #284]	@ 0x11c
 8022ca4:	f8df b3d0 	ldr.w	fp, [pc, #976]	@ 8023078 <Argus_Dev_VsubMeasurement+0x424>
 8022ca8:	46b8      	mov	r8, r7
 8022caa:	f104 0588 	add.w	r5, r4, #136	@ 0x88
 8022cae:	f104 0a59 	add.w	sl, r4, #89	@ 0x59
 8022cb2:	f8b2 00a0 	ldrh.w	r0, [r2, #160]	@ 0xa0
 8022cb6:	2800      	cmp	r0, #0
 8022cb8:	f040 80a0 	bne.w	8022dfc <Argus_Dev_VsubMeasurement+0x1a8>
 8022cbc:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
 8022cc0:	b13b      	cbz	r3, 8022cd2 <Argus_Dev_VsubMeasurement+0x7e>
 8022cc2:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 8022cc6:	f8c4 0104 	str.w	r0, [r4, #260]	@ 0x104
 8022cca:	4798      	blx	r3
 8022ccc:	2800      	cmp	r0, #0
 8022cce:	f2c0 8163 	blt.w	8022f98 <Argus_Dev_VsubMeasurement+0x344>
 8022cd2:	f504 7690 	add.w	r6, r4, #288	@ 0x120
 8022cd6:	2164      	movs	r1, #100	@ 0x64
 8022cd8:	4630      	mov	r0, r6
 8022cda:	f006 fdd9 	bl	8029890 <ADS_AwaitIdle>
 8022cde:	2800      	cmp	r0, #0
 8022ce0:	f2c0 815a 	blt.w	8022f98 <Argus_Dev_VsubMeasurement+0x344>
 8022ce4:	2300      	movs	r3, #0
 8022ce6:	9300      	str	r3, [sp, #0]
 8022ce8:	2205      	movs	r2, #5
 8022cea:	4629      	mov	r1, r5
 8022cec:	4630      	mov	r0, r6
 8022cee:	f006 ffd1 	bl	8029c94 <ADS_ReadData>
 8022cf2:	2800      	cmp	r0, #0
 8022cf4:	f2c0 8150 	blt.w	8022f98 <Argus_Dev_VsubMeasurement+0x344>
 8022cf8:	2164      	movs	r1, #100	@ 0x64
 8022cfa:	4630      	mov	r0, r6
 8022cfc:	f006 fdc8 	bl	8029890 <ADS_AwaitIdle>
 8022d00:	2800      	cmp	r0, #0
 8022d02:	f2c0 8149 	blt.w	8022f98 <Argus_Dev_VsubMeasurement+0x344>
 8022d06:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
 8022d0a:	4629      	mov	r1, r5
 8022d0c:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	@ 0xa0
 8022d10:	a806      	add	r0, sp, #24
 8022d12:	f7f7 fdd9 	bl	801a8c8 <Argus_Eval_ApplyAuxEvaluation>
 8022d16:	f8d4 31c4 	ldr.w	r3, [r4, #452]	@ 0x1c4
 8022d1a:	f993 2000 	ldrsb.w	r2, [r3]
 8022d1e:	b302      	cbz	r2, 8022d62 <Argus_Dev_VsubMeasurement+0x10e>
 8022d20:	f894 316f 	ldrb.w	r3, [r4, #367]	@ 0x16f
 8022d24:	f894 016f 	ldrb.w	r0, [r4, #367]	@ 0x16f
 8022d28:	f894 216d 	ldrb.w	r2, [r4, #365]	@ 0x16d
 8022d2c:	f003 0301 	and.w	r3, r3, #1
 8022d30:	2b00      	cmp	r3, #0
 8022d32:	f894 316c 	ldrb.w	r3, [r4, #364]	@ 0x16c
 8022d36:	ea4f 3282 	mov.w	r2, r2, lsl #14
 8022d3a:	ea4f 3343 	mov.w	r3, r3, lsl #13
 8022d3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8022d42:	b292      	uxth	r2, r2
 8022d44:	ea42 0203 	orr.w	r2, r2, r3
 8022d48:	bf19      	ittee	ne
 8022d4a:	f44f 3140 	movne.w	r1, #196608	@ 0x30000
 8022d4e:	f44f 3380 	movne.w	r3, #65536	@ 0x10000
 8022d52:	2300      	moveq	r3, #0
 8022d54:	f44f 3100 	moveq.w	r1, #131072	@ 0x20000
 8022d58:	f010 0f02 	tst.w	r0, #2
 8022d5c:	bf18      	it	ne
 8022d5e:	460b      	movne	r3, r1
 8022d60:	431a      	orrs	r2, r3
 8022d62:	a906      	add	r1, sp, #24
 8022d64:	f8d4 01d4 	ldr.w	r0, [r4, #468]	@ 0x1d4
 8022d68:	f003 f92a 	bl	8025fc0 <Argus_Cal_ApplyAuxCalibration>
 8022d6c:	f8d4 211c 	ldr.w	r2, [r4, #284]	@ 0x11c
 8022d70:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8022d74:	f8b2 30c2 	ldrh.w	r3, [r2, #194]	@ 0xc2
 8022d78:	4299      	cmp	r1, r3
 8022d7a:	f200 8129 	bhi.w	8022fd0 <Argus_Dev_VsubMeasurement+0x37c>
 8022d7e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8022d82:	2f00      	cmp	r7, #0
 8022d84:	f040 8115 	bne.w	8022fb2 <Argus_Dev_VsubMeasurement+0x35e>
 8022d88:	eba3 0108 	sub.w	r1, r3, r8
 8022d8c:	2920      	cmp	r1, #32
 8022d8e:	f300 8113 	bgt.w	8022fb8 <Argus_Dev_VsubMeasurement+0x364>
 8022d92:	eba8 0703 	sub.w	r7, r8, r3
 8022d96:	2f20      	cmp	r7, #32
 8022d98:	bfcc      	ite	gt
 8022d9a:	2700      	movgt	r7, #0
 8022d9c:	2701      	movle	r7, #1
 8022d9e:	4698      	mov	r8, r3
 8022da0:	454f      	cmp	r7, r9
 8022da2:	d386      	bcc.n	8022cb2 <Argus_Dev_VsubMeasurement+0x5e>
 8022da4:	ea5f 4909 	movs.w	r9, r9, lsl #16
 8022da8:	4641      	mov	r1, r8
 8022daa:	f100 814a 	bmi.w	8023042 <Argus_Dev_VsubMeasurement+0x3ee>
 8022dae:	45c8      	cmp	r8, r9
 8022db0:	464a      	mov	r2, r9
 8022db2:	f240 813d 	bls.w	8023030 <Argus_Dev_VsubMeasurement+0x3dc>
 8022db6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8022dba:	4610      	mov	r0, r2
 8022dbc:	0052      	lsls	r2, r2, #1
 8022dbe:	4590      	cmp	r8, r2
 8022dc0:	461d      	mov	r5, r3
 8022dc2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8022dc6:	d8f8      	bhi.n	8022dba <Argus_Dev_VsubMeasurement+0x166>
 8022dc8:	2b00      	cmp	r3, #0
 8022dca:	f040 8109 	bne.w	8022fe0 <Argus_Dev_VsubMeasurement+0x38c>
 8022dce:	ea98 0f09 	teq	r8, r9
 8022dd2:	d401      	bmi.n	8022dd8 <Argus_Dev_VsubMeasurement+0x184>
 8022dd4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8022dd8:	9a05      	ldr	r2, [sp, #20]
 8022dda:	9904      	ldr	r1, [sp, #16]
 8022ddc:	8013      	strh	r3, [r2, #0]
 8022dde:	f894 304e 	ldrb.w	r3, [r4, #78]	@ 0x4e
 8022de2:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8022de4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8022de8:	f042 0220 	orr.w	r2, r2, #32
 8022dec:	430b      	orrs	r3, r1
 8022dee:	2000      	movs	r0, #0
 8022df0:	67a2      	str	r2, [r4, #120]	@ 0x78
 8022df2:	f884 304e 	strb.w	r3, [r4, #78]	@ 0x4e
 8022df6:	b00b      	add	sp, #44	@ 0x2c
 8022df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022dfc:	f8ba 3000 	ldrh.w	r3, [sl]
 8022e00:	f89a 1002 	ldrb.w	r1, [sl, #2]
 8022e04:	802b      	strh	r3, [r5, #0]
 8022e06:	2312      	movs	r3, #18
 8022e08:	70a9      	strb	r1, [r5, #2]
 8022e0a:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
 8022e0e:	f892 109e 	ldrb.w	r1, [r2, #158]	@ 0x9e
 8022e12:	f894 308a 	ldrb.w	r3, [r4, #138]	@ 0x8a
 8022e16:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8022e18:	f001 0107 	and.w	r1, r1, #7
 8022e1c:	f023 0307 	bic.w	r3, r3, #7
 8022e20:	430b      	orrs	r3, r1
 8022e22:	b25b      	sxtb	r3, r3
 8022e24:	f884 308a 	strb.w	r3, [r4, #138]	@ 0x8a
 8022e28:	f892 109f 	ldrb.w	r1, [r2, #159]	@ 0x9f
 8022e2c:	00c9      	lsls	r1, r1, #3
 8022e2e:	f023 0318 	bic.w	r3, r3, #24
 8022e32:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 8022e36:	f001 0118 	and.w	r1, r1, #24
 8022e3a:	430b      	orrs	r3, r1
 8022e3c:	67a0      	str	r0, [r4, #120]	@ 0x78
 8022e3e:	f884 308a 	strb.w	r3, [r4, #138]	@ 0x8a
 8022e42:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8022e44:	069e      	lsls	r6, r3, #26
 8022e46:	d404      	bmi.n	8022e52 <Argus_Dev_VsubMeasurement+0x1fe>
 8022e48:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 8022e4c:	09d9      	lsrs	r1, r3, #7
 8022e4e:	f040 80b5 	bne.w	8022fbc <Argus_Dev_VsubMeasurement+0x368>
 8022e52:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8022e54:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 8022e58:	210a      	movs	r1, #10
 8022e5a:	f884 108b 	strb.w	r1, [r4, #139]	@ 0x8b
 8022e5e:	f892 109c 	ldrb.w	r1, [r2, #156]	@ 0x9c
 8022e62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8022e66:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 8022e6a:	b25b      	sxtb	r3, r3
 8022e6c:	f884 308c 	strb.w	r3, [r4, #140]	@ 0x8c
 8022e70:	f892 209d 	ldrb.w	r2, [r2, #157]	@ 0x9d
 8022e74:	0112      	lsls	r2, r2, #4
 8022e76:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8022e7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8022e7e:	4313      	orrs	r3, r2
 8022e80:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8022e82:	f884 308c 	strb.w	r3, [r4, #140]	@ 0x8c
 8022e86:	f042 0220 	orr.w	r2, r2, #32
 8022e8a:	67a2      	str	r2, [r4, #120]	@ 0x78
 8022e8c:	f104 0390 	add.w	r3, r4, #144	@ 0x90
 8022e90:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8022e92:	0410      	lsls	r0, r2, #16
 8022e94:	d40a      	bmi.n	8022eac <Argus_Dev_VsubMeasurement+0x258>
 8022e96:	f894 206e 	ldrb.w	r2, [r4, #110]	@ 0x6e
 8022e9a:	f894 106d 	ldrb.w	r1, [r4, #109]	@ 0x6d
 8022e9e:	0212      	lsls	r2, r2, #8
 8022ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8022ea4:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8022ea8:	430a      	orrs	r2, r1
 8022eaa:	d006      	beq.n	8022eba <Argus_Dev_VsubMeasurement+0x266>
 8022eac:	221e      	movs	r2, #30
 8022eae:	f843 2b04 	str.w	r2, [r3], #4
 8022eb2:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8022eb4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8022eb8:	67a2      	str	r2, [r4, #120]	@ 0x78
 8022eba:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8022ebc:	03d1      	lsls	r1, r2, #15
 8022ebe:	d40c      	bmi.n	8022eda <Argus_Dev_VsubMeasurement+0x286>
 8022ec0:	f894 2072 	ldrb.w	r2, [r4, #114]	@ 0x72
 8022ec4:	f894 1071 	ldrb.w	r1, [r4, #113]	@ 0x71
 8022ec8:	0212      	lsls	r2, r2, #8
 8022eca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8022ece:	f894 1073 	ldrb.w	r1, [r4, #115]	@ 0x73
 8022ed2:	430a      	orrs	r2, r1
 8022ed4:	f5b2 0f66 	cmp.w	r2, #15073280	@ 0xe60000
 8022ed8:	d007      	beq.n	8022eea <Argus_Dev_VsubMeasurement+0x296>
 8022eda:	f24e 6220 	movw	r2, #58912	@ 0xe620
 8022ede:	f843 2b04 	str.w	r2, [r3], #4
 8022ee2:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8022ee4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8022ee8:	67a2      	str	r2, [r4, #120]	@ 0x78
 8022eea:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8022eec:	0392      	lsls	r2, r2, #14
 8022eee:	d402      	bmi.n	8022ef6 <Argus_Dev_VsubMeasurement+0x2a2>
 8022ef0:	f8b4 2075 	ldrh.w	r2, [r4, #117]	@ 0x75
 8022ef4:	b152      	cbz	r2, 8022f0c <Argus_Dev_VsubMeasurement+0x2b8>
 8022ef6:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8022ef8:	601a      	str	r2, [r3, #0]
 8022efa:	2222      	movs	r2, #34	@ 0x22
 8022efc:	801a      	strh	r2, [r3, #0]
 8022efe:	2200      	movs	r2, #0
 8022f00:	709a      	strb	r2, [r3, #2]
 8022f02:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8022f04:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8022f08:	3304      	adds	r3, #4
 8022f0a:	67a2      	str	r2, [r4, #120]	@ 0x78
 8022f0c:	2600      	movs	r6, #0
 8022f0e:	2208      	movs	r2, #8
 8022f10:	f8a3 6001 	strh.w	r6, [r3, #1]
 8022f14:	70de      	strb	r6, [r3, #3]
 8022f16:	701a      	strb	r2, [r3, #0]
 8022f18:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8022f1a:	f894 106b 	ldrb.w	r1, [r4, #107]	@ 0x6b
 8022f1e:	f042 0210 	orr.w	r2, r2, #16
 8022f22:	67a2      	str	r2, [r4, #120]	@ 0x78
 8022f24:	f8b4 2069 	ldrh.w	r2, [r4, #105]	@ 0x69
 8022f28:	809a      	strh	r2, [r3, #4]
 8022f2a:	f001 01e1 	and.w	r1, r1, #225	@ 0xe1
 8022f2e:	221c      	movs	r2, #28
 8022f30:	7199      	strb	r1, [r3, #6]
 8022f32:	711a      	strb	r2, [r3, #4]
 8022f34:	f8d4 211c 	ldr.w	r2, [r4, #284]	@ 0x11c
 8022f38:	7958      	ldrb	r0, [r3, #5]
 8022f3a:	f8b2 20a0 	ldrh.w	r2, [r2, #160]	@ 0xa0
 8022f3e:	3a01      	subs	r2, #1
 8022f40:	f020 007f 	bic.w	r0, r0, #127	@ 0x7f
 8022f44:	f3c2 02c6 	ubfx	r2, r2, #3, #7
 8022f48:	4302      	orrs	r2, r0
 8022f4a:	b252      	sxtb	r2, r2
 8022f4c:	715a      	strb	r2, [r3, #5]
 8022f4e:	f8d4 011c 	ldr.w	r0, [r4, #284]	@ 0x11c
 8022f52:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	@ 0xa0
 8022f56:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8022f5a:	715a      	strb	r2, [r3, #5]
 8022f5c:	f001 011f 	and.w	r1, r1, #31
 8022f60:	1e42      	subs	r2, r0, #1
 8022f62:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
 8022f66:	9602      	str	r6, [sp, #8]
 8022f68:	7199      	strb	r1, [r3, #6]
 8022f6a:	9403      	str	r4, [sp, #12]
 8022f6c:	f8cd b004 	str.w	fp, [sp, #4]
 8022f70:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8022f72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8022f76:	67a2      	str	r2, [r4, #120]	@ 0x78
 8022f78:	f8d4 211c 	ldr.w	r2, [r4, #284]	@ 0x11c
 8022f7c:	3307      	adds	r3, #7
 8022f7e:	f8d2 20a4 	ldr.w	r2, [r2, #164]	@ 0xa4
 8022f82:	9200      	str	r2, [sp, #0]
 8022f84:	1b5b      	subs	r3, r3, r5
 8022f86:	462a      	mov	r2, r5
 8022f88:	4629      	mov	r1, r5
 8022f8a:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 8022f8e:	f006 fd1b 	bl	80299c8 <ADS_TransferWithStart>
 8022f92:	2800      	cmp	r0, #0
 8022f94:	f6bf ae9d 	bge.w	8022cd2 <Argus_Dev_VsubMeasurement+0x7e>
 8022f98:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8022f9a:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 8022f9e:	4a34      	ldr	r2, [pc, #208]	@ (8023070 <Argus_Dev_VsubMeasurement+0x41c>)
 8022fa0:	f043 0302 	orr.w	r3, r3, #2
 8022fa4:	430a      	orrs	r2, r1
 8022fa6:	67a2      	str	r2, [r4, #120]	@ 0x78
 8022fa8:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
 8022fac:	b00b      	add	sp, #44	@ 0x2c
 8022fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022fb2:	3701      	adds	r7, #1
 8022fb4:	4498      	add	r8, r3
 8022fb6:	e6f3      	b.n	8022da0 <Argus_Dev_VsubMeasurement+0x14c>
 8022fb8:	4698      	mov	r8, r3
 8022fba:	e67a      	b.n	8022cb2 <Argus_Dev_VsubMeasurement+0x5e>
 8022fbc:	f892 109d 	ldrb.w	r1, [r2, #157]	@ 0x9d
 8022fc0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8022fc4:	4299      	cmp	r1, r3
 8022fc6:	f47f af44 	bne.w	8022e52 <Argus_Dev_VsubMeasurement+0x1fe>
 8022fca:	f104 038b 	add.w	r3, r4, #139	@ 0x8b
 8022fce:	e75f      	b.n	8022e90 <Argus_Dev_VsubMeasurement+0x23c>
 8022fd0:	4828      	ldr	r0, [pc, #160]	@ (8023074 <Argus_Dev_VsubMeasurement+0x420>)
 8022fd2:	f7e3 fa9b 	bl	800650c <print>
 8022fd6:	f06f 006e 	mvn.w	r0, #110	@ 0x6e
 8022fda:	b00b      	add	sp, #44	@ 0x2c
 8022fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022fe0:	2a00      	cmp	r2, #0
 8022fe2:	db20      	blt.n	8023026 <Argus_Dev_VsubMeasurement+0x3d2>
 8022fe4:	f1b8 0f00 	cmp.w	r8, #0
 8022fe8:	d035      	beq.n	8023056 <Argus_Dev_VsubMeasurement+0x402>
 8022fea:	2000      	movs	r0, #0
 8022fec:	e000      	b.n	8022ff0 <Argus_Dev_VsubMeasurement+0x39c>
 8022fee:	b151      	cbz	r1, 8023006 <Argus_Dev_VsubMeasurement+0x3b2>
 8022ff0:	428a      	cmp	r2, r1
 8022ff2:	bf9c      	itt	ls
 8022ff4:	1a89      	subls	r1, r1, r2
 8022ff6:	4318      	orrls	r0, r3
 8022ff8:	085b      	lsrs	r3, r3, #1
 8022ffa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8022ffe:	d1f6      	bne.n	8022fee <Argus_Dev_VsubMeasurement+0x39a>
 8023000:	4291      	cmp	r1, r2
 8023002:	bf28      	it	cs
 8023004:	3001      	addcs	r0, #1
 8023006:	ea98 0f09 	teq	r8, r9
 802300a:	d428      	bmi.n	802305e <Argus_Dev_VsubMeasurement+0x40a>
 802300c:	f1b0 0800 	subs.w	r8, r0, #0
 8023010:	f6ff aee0 	blt.w	8022dd4 <Argus_Dev_VsubMeasurement+0x180>
 8023014:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8023018:	4598      	cmp	r8, r3
 802301a:	f73f aedb 	bgt.w	8022dd4 <Argus_Dev_VsubMeasurement+0x180>
 802301e:	ea28 73e8 	bic.w	r3, r8, r8, asr #31
 8023022:	b29b      	uxth	r3, r3
 8023024:	e6d8      	b.n	8022dd8 <Argus_Dev_VsubMeasurement+0x184>
 8023026:	f035 4300 	bics.w	r3, r5, #2147483648	@ 0x80000000
 802302a:	d007      	beq.n	802303c <Argus_Dev_VsubMeasurement+0x3e8>
 802302c:	4602      	mov	r2, r0
 802302e:	e7d9      	b.n	8022fe4 <Argus_Dev_VsubMeasurement+0x390>
 8023030:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8023034:	f1b8 0f00 	cmp.w	r8, #0
 8023038:	d1d7      	bne.n	8022fea <Argus_Dev_VsubMeasurement+0x396>
 802303a:	e7f0      	b.n	802301e <Argus_Dev_VsubMeasurement+0x3ca>
 802303c:	4602      	mov	r2, r0
 802303e:	4618      	mov	r0, r3
 8023040:	e7de      	b.n	8023000 <Argus_Dev_VsubMeasurement+0x3ac>
 8023042:	f1c9 0200 	rsb	r2, r9, #0
 8023046:	4590      	cmp	r8, r2
 8023048:	f63f aeb5 	bhi.w	8022db6 <Argus_Dev_VsubMeasurement+0x162>
 802304c:	2a00      	cmp	r2, #0
 802304e:	db09      	blt.n	8023064 <Argus_Dev_VsubMeasurement+0x410>
 8023050:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8023054:	e7c6      	b.n	8022fe4 <Argus_Dev_VsubMeasurement+0x390>
 8023056:	f1b9 0f00 	cmp.w	r9, #0
 802305a:	dae0      	bge.n	802301e <Argus_Dev_VsubMeasurement+0x3ca>
 802305c:	4640      	mov	r0, r8
 802305e:	f1c0 0800 	rsb	r8, r0, #0
 8023062:	e7d7      	b.n	8023014 <Argus_Dev_VsubMeasurement+0x3c0>
 8023064:	0850      	lsrs	r0, r2, #1
 8023066:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 802306a:	4602      	mov	r2, r0
 802306c:	e7ba      	b.n	8022fe4 <Argus_Dev_VsubMeasurement+0x390>
 802306e:	bf00      	nop
 8023070:	0003dffe 	.word	0x0003dffe
 8023074:	0803076c 	.word	0x0803076c
 8023078:	0802287d 	.word	0x0802287d

0802307c <Argus_Dev_StartAuxMeasurement>:
 802307c:	b570      	push	{r4, r5, r6, lr}
 802307e:	f8d0 511c 	ldr.w	r5, [r0, #284]	@ 0x11c
 8023082:	4604      	mov	r4, r0
 8023084:	f8b5 00a0 	ldrh.w	r0, [r5, #160]	@ 0xa0
 8023088:	b084      	sub	sp, #16
 802308a:	e9c4 1241 	strd	r1, r2, [r4, #260]	@ 0x104
 802308e:	b950      	cbnz	r0, 80230a6 <Argus_Dev_StartAuxMeasurement+0x2a>
 8023090:	460b      	mov	r3, r1
 8023092:	2900      	cmp	r1, #0
 8023094:	f000 80db 	beq.w	802324e <Argus_Dev_StartAuxMeasurement+0x1d2>
 8023098:	4611      	mov	r1, r2
 802309a:	f8c4 0104 	str.w	r0, [r4, #260]	@ 0x104
 802309e:	b004      	add	sp, #16
 80230a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80230a4:	4718      	bx	r3
 80230a6:	f8b4 1059 	ldrh.w	r1, [r4, #89]	@ 0x59
 80230aa:	f8a4 1088 	strh.w	r1, [r4, #136]	@ 0x88
 80230ae:	f104 0288 	add.w	r2, r4, #136	@ 0x88
 80230b2:	f894 305b 	ldrb.w	r3, [r4, #91]	@ 0x5b
 80230b6:	7093      	strb	r3, [r2, #2]
 80230b8:	2112      	movs	r1, #18
 80230ba:	f884 1088 	strb.w	r1, [r4, #136]	@ 0x88
 80230be:	f895 109e 	ldrb.w	r1, [r5, #158]	@ 0x9e
 80230c2:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80230c6:	f001 0107 	and.w	r1, r1, #7
 80230ca:	430b      	orrs	r3, r1
 80230cc:	b25b      	sxtb	r3, r3
 80230ce:	f884 308a 	strb.w	r3, [r4, #138]	@ 0x8a
 80230d2:	f895 109f 	ldrb.w	r1, [r5, #159]	@ 0x9f
 80230d6:	00c9      	lsls	r1, r1, #3
 80230d8:	f001 0118 	and.w	r1, r1, #24
 80230dc:	f023 0318 	bic.w	r3, r3, #24
 80230e0:	430b      	orrs	r3, r1
 80230e2:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 80230e4:	f884 308a 	strb.w	r3, [r4, #138]	@ 0x8a
 80230e8:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 80230ec:	67a1      	str	r1, [r4, #120]	@ 0x78
 80230ee:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80230f0:	069e      	lsls	r6, r3, #26
 80230f2:	d404      	bmi.n	80230fe <Argus_Dev_StartAuxMeasurement+0x82>
 80230f4:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 80230f8:	09d9      	lsrs	r1, r3, #7
 80230fa:	f040 80b3 	bne.w	8023264 <Argus_Dev_StartAuxMeasurement+0x1e8>
 80230fe:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8023100:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
 8023104:	230a      	movs	r3, #10
 8023106:	f884 308b 	strb.w	r3, [r4, #139]	@ 0x8b
 802310a:	f895 009c 	ldrb.w	r0, [r5, #156]	@ 0x9c
 802310e:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 8023112:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
 8023116:	b25b      	sxtb	r3, r3
 8023118:	f884 308c 	strb.w	r3, [r4, #140]	@ 0x8c
 802311c:	f895 109d 	ldrb.w	r1, [r5, #157]	@ 0x9d
 8023120:	0109      	lsls	r1, r1, #4
 8023122:	f001 0170 	and.w	r1, r1, #112	@ 0x70
 8023126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 802312a:	430b      	orrs	r3, r1
 802312c:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 802312e:	f884 308c 	strb.w	r3, [r4, #140]	@ 0x8c
 8023132:	f041 0120 	orr.w	r1, r1, #32
 8023136:	67a1      	str	r1, [r4, #120]	@ 0x78
 8023138:	f104 0390 	add.w	r3, r4, #144	@ 0x90
 802313c:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 802313e:	040d      	lsls	r5, r1, #16
 8023140:	d40a      	bmi.n	8023158 <Argus_Dev_StartAuxMeasurement+0xdc>
 8023142:	f894 106e 	ldrb.w	r1, [r4, #110]	@ 0x6e
 8023146:	f894 006d 	ldrb.w	r0, [r4, #109]	@ 0x6d
 802314a:	0209      	lsls	r1, r1, #8
 802314c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8023150:	f894 006f 	ldrb.w	r0, [r4, #111]	@ 0x6f
 8023154:	4301      	orrs	r1, r0
 8023156:	d006      	beq.n	8023166 <Argus_Dev_StartAuxMeasurement+0xea>
 8023158:	211e      	movs	r1, #30
 802315a:	f843 1b04 	str.w	r1, [r3], #4
 802315e:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8023160:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8023164:	67a1      	str	r1, [r4, #120]	@ 0x78
 8023166:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8023168:	03c8      	lsls	r0, r1, #15
 802316a:	d40c      	bmi.n	8023186 <Argus_Dev_StartAuxMeasurement+0x10a>
 802316c:	f894 1072 	ldrb.w	r1, [r4, #114]	@ 0x72
 8023170:	f894 0071 	ldrb.w	r0, [r4, #113]	@ 0x71
 8023174:	0209      	lsls	r1, r1, #8
 8023176:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 802317a:	f894 0073 	ldrb.w	r0, [r4, #115]	@ 0x73
 802317e:	4301      	orrs	r1, r0
 8023180:	f5b1 0f66 	cmp.w	r1, #15073280	@ 0xe60000
 8023184:	d007      	beq.n	8023196 <Argus_Dev_StartAuxMeasurement+0x11a>
 8023186:	f24e 6120 	movw	r1, #58912	@ 0xe620
 802318a:	f843 1b04 	str.w	r1, [r3], #4
 802318e:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8023190:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8023194:	67a1      	str	r1, [r4, #120]	@ 0x78
 8023196:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8023198:	0389      	lsls	r1, r1, #14
 802319a:	d402      	bmi.n	80231a2 <Argus_Dev_StartAuxMeasurement+0x126>
 802319c:	f8b4 1075 	ldrh.w	r1, [r4, #117]	@ 0x75
 80231a0:	b151      	cbz	r1, 80231b8 <Argus_Dev_StartAuxMeasurement+0x13c>
 80231a2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80231a4:	6018      	str	r0, [r3, #0]
 80231a6:	2122      	movs	r1, #34	@ 0x22
 80231a8:	8019      	strh	r1, [r3, #0]
 80231aa:	2100      	movs	r1, #0
 80231ac:	7099      	strb	r1, [r3, #2]
 80231ae:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 80231b0:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80231b4:	3304      	adds	r3, #4
 80231b6:	67a1      	str	r1, [r4, #120]	@ 0x78
 80231b8:	2500      	movs	r5, #0
 80231ba:	2108      	movs	r1, #8
 80231bc:	f8a3 5001 	strh.w	r5, [r3, #1]
 80231c0:	70dd      	strb	r5, [r3, #3]
 80231c2:	7019      	strb	r1, [r3, #0]
 80231c4:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 80231c6:	f8b4 0069 	ldrh.w	r0, [r4, #105]	@ 0x69
 80231ca:	f041 0110 	orr.w	r1, r1, #16
 80231ce:	67a1      	str	r1, [r4, #120]	@ 0x78
 80231d0:	f894 106b 	ldrb.w	r1, [r4, #107]	@ 0x6b
 80231d4:	8098      	strh	r0, [r3, #4]
 80231d6:	f001 01e1 	and.w	r1, r1, #225	@ 0xe1
 80231da:	7199      	strb	r1, [r3, #6]
 80231dc:	f001 001f 	and.w	r0, r1, #31
 80231e0:	211c      	movs	r1, #28
 80231e2:	7119      	strb	r1, [r3, #4]
 80231e4:	f8d4 111c 	ldr.w	r1, [r4, #284]	@ 0x11c
 80231e8:	f893 c005 	ldrb.w	ip, [r3, #5]
 80231ec:	f8b1 10a0 	ldrh.w	r1, [r1, #160]	@ 0xa0
 80231f0:	3901      	subs	r1, #1
 80231f2:	f02c 0c7f 	bic.w	ip, ip, #127	@ 0x7f
 80231f6:	f3c1 01c6 	ubfx	r1, r1, #3, #7
 80231fa:	ea41 010c 	orr.w	r1, r1, ip
 80231fe:	b249      	sxtb	r1, r1
 8023200:	7159      	strb	r1, [r3, #5]
 8023202:	f8d4 611c 	ldr.w	r6, [r4, #284]	@ 0x11c
 8023206:	f8b6 c0a0 	ldrh.w	ip, [r6, #160]	@ 0xa0
 802320a:	f061 017f 	orn	r1, r1, #127	@ 0x7f
 802320e:	7159      	strb	r1, [r3, #5]
 8023210:	f10c 31ff 	add.w	r1, ip, #4294967295
 8023214:	ea40 1141 	orr.w	r1, r0, r1, lsl #5
 8023218:	7199      	strb	r1, [r3, #6]
 802321a:	9403      	str	r4, [sp, #12]
 802321c:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 802321e:	4816      	ldr	r0, [pc, #88]	@ (8023278 <Argus_Dev_StartAuxMeasurement+0x1fc>)
 8023220:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8023224:	67a1      	str	r1, [r4, #120]	@ 0x78
 8023226:	f8d4 111c 	ldr.w	r1, [r4, #284]	@ 0x11c
 802322a:	9002      	str	r0, [sp, #8]
 802322c:	4813      	ldr	r0, [pc, #76]	@ (802327c <Argus_Dev_StartAuxMeasurement+0x200>)
 802322e:	9001      	str	r0, [sp, #4]
 8023230:	f8d1 10a4 	ldr.w	r1, [r1, #164]	@ 0xa4
 8023234:	9100      	str	r1, [sp, #0]
 8023236:	3307      	adds	r3, #7
 8023238:	1a9b      	subs	r3, r3, r2
 802323a:	4611      	mov	r1, r2
 802323c:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 8023240:	f006 fbc2 	bl	80299c8 <ADS_TransferWithStart>
 8023244:	1e03      	subs	r3, r0, #0
 8023246:	da02      	bge.n	802324e <Argus_Dev_StartAuxMeasurement+0x1d2>
 8023248:	f8d4 2104 	ldr.w	r2, [r4, #260]	@ 0x104
 802324c:	b912      	cbnz	r2, 8023254 <Argus_Dev_StartAuxMeasurement+0x1d8>
 802324e:	4618      	mov	r0, r3
 8023250:	b004      	add	sp, #16
 8023252:	bd70      	pop	{r4, r5, r6, pc}
 8023254:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
 8023258:	f8c4 5104 	str.w	r5, [r4, #260]	@ 0x104
 802325c:	b004      	add	sp, #16
 802325e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023262:	4710      	bx	r2
 8023264:	f895 109d 	ldrb.w	r1, [r5, #157]	@ 0x9d
 8023268:	f3c3 1302 	ubfx	r3, r3, #4, #3
 802326c:	4299      	cmp	r1, r3
 802326e:	f47f af46 	bne.w	80230fe <Argus_Dev_StartAuxMeasurement+0x82>
 8023272:	f104 038b 	add.w	r3, r4, #139	@ 0x8b
 8023276:	e761      	b.n	802313c <Argus_Dev_StartAuxMeasurement+0xc0>
 8023278:	08022861 	.word	0x08022861
 802327c:	0802287d 	.word	0x0802287d

08023280 <Argus_Cfg_Init>:
 8023280:	b538      	push	{r3, r4, r5, lr}
 8023282:	4604      	mov	r4, r0
 8023284:	460d      	mov	r5, r1
 8023286:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 802328a:	2100      	movs	r1, #0
 802328c:	f007 fe8d 	bl	802afaa <memset>
 8023290:	f8c4 5128 	str.w	r5, [r4, #296]	@ 0x128
 8023294:	bd38      	pop	{r3, r4, r5, pc}
 8023296:	bf00      	nop

08023298 <Argus_Cfg_GetConfiguration>:
 8023298:	460b      	mov	r3, r1
 802329a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 802329e:	4601      	mov	r1, r0
 80232a0:	4618      	mov	r0, r3
 80232a2:	f007 bf1a 	b.w	802b0da <memcpy>
 80232a6:	bf00      	nop

080232a8 <Argus_Cfg_GetConfigurationPtr>:
 80232a8:	4770      	bx	lr
 80232aa:	bf00      	nop

080232ac <Argus_Cfg_CheckConfiguration>:
 80232ac:	b538      	push	{r3, r4, r5, lr}
 80232ae:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 80232b2:	4604      	mov	r4, r0
 80232b4:	b1b3      	cbz	r3, 80232e4 <Argus_Cfg_CheckConfiguration+0x38>
 80232b6:	f8b0 1104 	ldrh.w	r1, [r0, #260]	@ 0x104
 80232ba:	f8b0 509c 	ldrh.w	r5, [r0, #156]	@ 0x9c
 80232be:	e9d0 2325 	ldrd	r2, r3, [r0, #148]	@ 0x94
 80232c2:	0989      	lsrs	r1, r1, #6
 80232c4:	2901      	cmp	r1, #1
 80232c6:	bf38      	it	cc
 80232c8:	2101      	movcc	r1, #1
 80232ca:	fb03 2101 	mla	r1, r3, r1, r2
 80232ce:	6843      	ldr	r3, [r0, #4]
 80232d0:	1b5a      	subs	r2, r3, r5
 80232d2:	f3c1 3040 	ubfx	r0, r1, #13, #1
 80232d6:	eba2 3291 	sub.w	r2, r2, r1, lsr #14
 80232da:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 80232de:	1a12      	subs	r2, r2, r0
 80232e0:	4291      	cmp	r1, r2
 80232e2:	dc13      	bgt.n	802330c <Argus_Cfg_CheckConfiguration+0x60>
 80232e4:	1d25      	adds	r5, r4, #4
 80232e6:	4628      	mov	r0, r5
 80232e8:	f7fd fe6e 	bl	8020fc8 <Argus_Dev_CheckCfg>
 80232ec:	2800      	cmp	r0, #0
 80232ee:	db0c      	blt.n	802330a <Argus_Cfg_CheckConfiguration+0x5e>
 80232f0:	4629      	mov	r1, r5
 80232f2:	f104 00f4 	add.w	r0, r4, #244	@ 0xf4
 80232f6:	f7f9 f9ff 	bl	801c6f8 <Argus_Dca_CheckCfg>
 80232fa:	2800      	cmp	r0, #0
 80232fc:	db05      	blt.n	802330a <Argus_Cfg_CheckConfiguration+0x5e>
 80232fe:	f504 7086 	add.w	r0, r4, #268	@ 0x10c
 8023302:	f7f8 f96f 	bl	801b5e4 <Argus_Pba_CheckCfg>
 8023306:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 802330a:	bd38      	pop	{r3, r4, r5, pc}
 802330c:	4801      	ldr	r0, [pc, #4]	@ (8023314 <Argus_Cfg_CheckConfiguration+0x68>)
 802330e:	f7e3 f8fd 	bl	800650c <print>
 8023312:	e7e7      	b.n	80232e4 <Argus_Cfg_CheckConfiguration+0x38>
 8023314:	080307b4 	.word	0x080307b4

08023318 <Argus_Cfg_CopyConfiguration>:
 8023318:	b510      	push	{r4, lr}
 802331a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 802331e:	4604      	mov	r4, r0
 8023320:	f007 fedb 	bl	802b0da <memcpy>
 8023324:	4620      	mov	r0, r4
 8023326:	f7fe f8b3 	bl	8021490 <Argus_Dev_PrepareCfg>
 802332a:	4620      	mov	r0, r4
 802332c:	bd10      	pop	{r4, pc}
 802332e:	bf00      	nop

08023330 <Argus_Cfg_GetMeasurementMode>:
 8023330:	7800      	ldrb	r0, [r0, #0]
 8023332:	4770      	bx	lr

08023334 <Argus_Cfg_TestConnection>:
 8023334:	b538      	push	{r3, r4, r5, lr}
 8023336:	21bf      	movs	r1, #191	@ 0xbf
 8023338:	4604      	mov	r4, r0
 802333a:	f8d0 0128 	ldr.w	r0, [r0, #296]	@ 0x128
 802333e:	f7fd fd33 	bl	8020da8 <Argus_Dev_SetStatusSync>
 8023342:	b970      	cbnz	r0, 8023362 <Argus_Cfg_TestConnection+0x2e>
 8023344:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 8023348:	f7fd fadc 	bl	8020904 <Argus_Dev_TestConnection>
 802334c:	1e05      	subs	r5, r0, #0
 802334e:	bfb8      	it	lt
 8023350:	f06f 0564 	mvnlt.w	r5, #100	@ 0x64
 8023354:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 8023358:	21bf      	movs	r1, #191	@ 0xbf
 802335a:	f7fd fdf7 	bl	8020f4c <Argus_Dev_ClearStatus>
 802335e:	4628      	mov	r0, r5
 8023360:	bd38      	pop	{r3, r4, r5, pc}
 8023362:	2502      	movs	r5, #2
 8023364:	4628      	mov	r0, r5
 8023366:	bd38      	pop	{r3, r4, r5, pc}

08023368 <Argus_GetDefaultCfg>:
 8023368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802336c:	f649 4440 	movw	r4, #40000	@ 0x9c40
 8023370:	f890 e10c 	ldrb.w	lr, [r0, #268]	@ 0x10c
 8023374:	6044      	str	r4, [r0, #4]
 8023376:	2a05      	cmp	r2, #5
 8023378:	f04f 0402 	mov.w	r4, #2
 802337c:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 8023380:	f880 410d 	strb.w	r4, [r0, #269]	@ 0x10d
 8023384:	f04e 0e01 	orr.w	lr, lr, #1
 8023388:	f000 8457 	beq.w	8023c3a <Argus_GetDefaultCfg+0x8d2>
 802338c:	2a04      	cmp	r2, #4
 802338e:	f000 8250 	beq.w	8023832 <Argus_GetDefaultCfg+0x4ca>
 8023392:	4cd6      	ldr	r4, [pc, #856]	@ (80236ec <Argus_GetDefaultCfg+0x384>)
 8023394:	4dd6      	ldr	r5, [pc, #856]	@ (80236f0 <Argus_GetDefaultCfg+0x388>)
 8023396:	2a03      	cmp	r2, #3
 8023398:	bf18      	it	ne
 802339a:	462c      	movne	r4, r5
 802339c:	f8c0 4124 	str.w	r4, [r0, #292]	@ 0x124
 80233a0:	f011 0401 	ands.w	r4, r1, #1
 80233a4:	f000 8565 	beq.w	8023e72 <Argus_GetDefaultCfg+0xb0a>
 80233a8:	2580      	movs	r5, #128	@ 0x80
 80233aa:	f8a0 5110 	strh.w	r5, [r0, #272]	@ 0x110
 80233ae:	2a03      	cmp	r2, #3
 80233b0:	f04f 0550 	mov.w	r5, #80	@ 0x50
 80233b4:	f8a0 5112 	strh.w	r5, [r0, #274]	@ 0x112
 80233b8:	f000 8565 	beq.w	8023e86 <Argus_GetDefaultCfg+0xb1e>
 80233bc:	f243 353d 	movw	r5, #13117	@ 0x333d
 80233c0:	fa4f fe8e 	sxtb.w	lr, lr
 80233c4:	f8a0 510e 	strh.w	r5, [r0, #270]	@ 0x10e
 80233c8:	2c00      	cmp	r4, #0
 80233ca:	f000 8249 	beq.w	8023860 <Argus_GetDefaultCfg+0x4f8>
 80233ce:	4dc9      	ldr	r5, [pc, #804]	@ (80236f4 <Argus_GetDefaultCfg+0x38c>)
 80233d0:	f8c0 511a 	str.w	r5, [r0, #282]	@ 0x11a
 80233d4:	2514      	movs	r5, #20
 80233d6:	f880 5118 	strb.w	r5, [r0, #280]	@ 0x118
 80233da:	251f      	movs	r5, #31
 80233dc:	f880 5119 	strb.w	r5, [r0, #281]	@ 0x119
 80233e0:	4dc5      	ldr	r5, [pc, #788]	@ (80236f8 <Argus_GetDefaultCfg+0x390>)
 80233e2:	f8c0 5120 	str.w	r5, [r0, #288]	@ 0x120
 80233e6:	2a05      	cmp	r2, #5
 80233e8:	f04f 0503 	mov.w	r5, #3
 80233ec:	f880 511f 	strb.w	r5, [r0, #287]	@ 0x11f
 80233f0:	f000 83e4 	beq.w	8023bbc <Argus_GetDefaultCfg+0x854>
 80233f4:	2502      	movs	r5, #2
 80233f6:	2a04      	cmp	r2, #4
 80233f8:	f880 511e 	strb.w	r5, [r0, #286]	@ 0x11e
 80233fc:	f000 844d 	beq.w	8023c9a <Argus_GetDefaultCfg+0x932>
 8023400:	2a03      	cmp	r2, #3
 8023402:	f040 86cc 	bne.w	802419e <Argus_GetDefaultCfg+0xe36>
 8023406:	f04e 0e30 	orr.w	lr, lr, #48	@ 0x30
 802340a:	f44f 557a 	mov.w	r5, #16000	@ 0x3e80
 802340e:	f880 e10c 	strb.w	lr, [r0, #268]	@ 0x10c
 8023412:	f8a0 5114 	strh.w	r5, [r0, #276]	@ 0x114
 8023416:	2c00      	cmp	r4, #0
 8023418:	f040 87d6 	bne.w	80243c8 <Argus_GetDefaultCfg+0x1060>
 802341c:	2560      	movs	r5, #96	@ 0x60
 802341e:	f8a0 5116 	strh.w	r5, [r0, #278]	@ 0x116
 8023422:	2a00      	cmp	r2, #0
 8023424:	f040 8447 	bne.w	8023cb6 <Argus_GetDefaultCfg+0x94e>
 8023428:	f240 15ff 	movw	r5, #511	@ 0x1ff
 802342c:	f8a0 50f4 	strh.w	r5, [r0, #244]	@ 0xf4
 8023430:	2503      	movs	r5, #3
 8023432:	f880 50f6 	strb.w	r5, [r0, #246]	@ 0xf6
 8023436:	2510      	movs	r5, #16
 8023438:	f880 50f7 	strb.w	r5, [r0, #247]	@ 0xf7
 802343c:	4daf      	ldr	r5, [pc, #700]	@ (80236fc <Argus_GetDefaultCfg+0x394>)
 802343e:	f8c0 50f8 	str.w	r5, [r0, #248]	@ 0xf8
 8023442:	f44f 5548 	mov.w	r5, #12800	@ 0x3200
 8023446:	f8a0 50fc 	strh.w	r5, [r0, #252]	@ 0xfc
 802344a:	f44f 7680 	mov.w	r6, #256	@ 0x100
 802344e:	2501      	movs	r5, #1
 8023450:	f880 50fe 	strb.w	r5, [r0, #254]	@ 0xfe
 8023454:	f8a0 6100 	strh.w	r6, [r0, #256]	@ 0x100
 8023458:	2c00      	cmp	r4, #0
 802345a:	f000 84a2 	beq.w	8023da2 <Argus_GetDefaultCfg+0xa3a>
 802345e:	260d      	movs	r6, #13
 8023460:	f8a0 6102 	strh.w	r6, [r0, #258]	@ 0x102
 8023464:	f44f 6680 	mov.w	r6, #1024	@ 0x400
 8023468:	f8a0 6104 	strh.w	r6, [r0, #260]	@ 0x104
 802346c:	2602      	movs	r6, #2
 802346e:	f880 60ff 	strb.w	r6, [r0, #255]	@ 0xff
 8023472:	2a00      	cmp	r2, #0
 8023474:	f040 8463 	bne.w	8023d3e <Argus_GetDefaultCfg+0x9d6>
 8023478:	f880 5021 	strb.w	r5, [r0, #33]	@ 0x21
 802347c:	2508      	movs	r5, #8
 802347e:	7305      	strb	r5, [r0, #12]
 8023480:	81c5      	strh	r5, [r0, #14]
 8023482:	4d9f      	ldr	r5, [pc, #636]	@ (8023700 <Argus_GetDefaultCfg+0x398>)
 8023484:	6085      	str	r5, [r0, #8]
 8023486:	4d9f      	ldr	r5, [pc, #636]	@ (8023704 <Argus_GetDefaultCfg+0x39c>)
 8023488:	f8c0 5022 	str.w	r5, [r0, #34]	@ 0x22
 802348c:	f04f 554c 	mov.w	r5, #855638016	@ 0x33000000
 8023490:	f8c0 5106 	str.w	r5, [r0, #262]	@ 0x106
 8023494:	f240 2566 	movw	r5, #614	@ 0x266
 8023498:	8205      	strh	r5, [r0, #16]
 802349a:	2550      	movs	r5, #80	@ 0x50
 802349c:	f880 6092 	strb.w	r6, [r0, #146]	@ 0x92
 80234a0:	8245      	strh	r5, [r0, #18]
 80234a2:	f04f 0c02 	mov.w	ip, #2
 80234a6:	4d98      	ldr	r5, [pc, #608]	@ (8023708 <Argus_GetDefaultCfg+0x3a0>)
 80234a8:	f8df a278 	ldr.w	sl, [pc, #632]	@ 8023724 <Argus_GetDefaultCfg+0x3bc>
 80234ac:	e9c0 a506 	strd	sl, r5, [r0, #24]
 80234b0:	2500      	movs	r5, #0
 80234b2:	7345      	strb	r5, [r0, #13]
 80234b4:	f649 4540 	movw	r5, #40000	@ 0x9c40
 80234b8:	6145      	str	r5, [r0, #20]
 80234ba:	2540      	movs	r5, #64	@ 0x40
 80234bc:	f880 5020 	strb.w	r5, [r0, #32]
 80234c0:	4e92      	ldr	r6, [pc, #584]	@ (802370c <Argus_GetDefaultCfg+0x3a4>)
 80234c2:	4d93      	ldr	r5, [pc, #588]	@ (8023710 <Argus_GetDefaultCfg+0x3a8>)
 80234c4:	e9c0 6525 	strd	r6, r5, [r0, #148]	@ 0x94
 80234c8:	f44f 7616 	mov.w	r6, #600	@ 0x258
 80234cc:	f8a0 609c 	strh.w	r6, [r0, #156]	@ 0x9c
 80234d0:	f240 7601 	movw	r6, #1793	@ 0x701
 80234d4:	f8a0 60a0 	strh.w	r6, [r0, #160]	@ 0xa0
 80234d8:	2603      	movs	r6, #3
 80234da:	f880 60a2 	strb.w	r6, [r0, #162]	@ 0xa2
 80234de:	4e8d      	ldr	r6, [pc, #564]	@ (8023714 <Argus_GetDefaultCfg+0x3ac>)
 80234e0:	f880 c0d8 	strb.w	ip, [r0, #216]	@ 0xd8
 80234e4:	f8c0 60d0 	str.w	r6, [r0, #208]	@ 0xd0
 80234e8:	f8df c23c 	ldr.w	ip, [pc, #572]	@ 8023728 <Argus_GetDefaultCfg+0x3c0>
 80234ec:	4e8a      	ldr	r6, [pc, #552]	@ (8023718 <Argus_GetDefaultCfg+0x3b0>)
 80234ee:	f880 40a3 	strb.w	r4, [r0, #163]	@ 0xa3
 80234f2:	e9c0 c631 	strd	ip, r6, [r0, #196]	@ 0xc4
 80234f6:	f44f 7c96 	mov.w	ip, #300	@ 0x12c
 80234fa:	f8c0 c0a8 	str.w	ip, [r0, #168]	@ 0xa8
 80234fe:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8023502:	f8a0 c0ce 	strh.w	ip, [r0, #206]	@ 0xce
 8023506:	f44f 6c16 	mov.w	ip, #2400	@ 0x960
 802350a:	f8a0 c0d4 	strh.w	ip, [r0, #212]	@ 0xd4
 802350e:	f04f 0c03 	mov.w	ip, #3
 8023512:	f880 c0cc 	strb.w	ip, [r0, #204]	@ 0xcc
 8023516:	f04f 0c33 	mov.w	ip, #51	@ 0x33
 802351a:	2c00      	cmp	r4, #0
 802351c:	f880 c0d9 	strb.w	ip, [r0, #217]	@ 0xd9
 8023520:	f04f 0c05 	mov.w	ip, #5
 8023524:	f880 c0da 	strb.w	ip, [r0, #218]	@ 0xda
 8023528:	bf14      	ite	ne
 802352a:	f04f 0c18 	movne.w	ip, #24
 802352e:	f04f 0c20 	moveq.w	ip, #32
 8023532:	f8a0 c0de 	strh.w	ip, [r0, #222]	@ 0xde
 8023536:	f04f 0604 	mov.w	r6, #4
 802353a:	bf14      	ite	ne
 802353c:	f04f 0c30 	movne.w	ip, #48	@ 0x30
 8023540:	f04f 0c40 	moveq.w	ip, #64	@ 0x40
 8023544:	2a05      	cmp	r2, #5
 8023546:	f8a0 60a4 	strh.w	r6, [r0, #164]	@ 0xa4
 802354a:	f8a0 c0dc 	strh.w	ip, [r0, #220]	@ 0xdc
 802354e:	f000 838a 	beq.w	8023c66 <Argus_GetDefaultCfg+0x8fe>
 8023552:	2a04      	cmp	r2, #4
 8023554:	f880 60db 	strb.w	r6, [r0, #219]	@ 0xdb
 8023558:	f000 8613 	beq.w	8024182 <Argus_GetDefaultCfg+0xe1a>
 802355c:	2a03      	cmp	r2, #3
 802355e:	f000 8512 	beq.w	8023f86 <Argus_GetDefaultCfg+0xc1e>
 8023562:	4e6e      	ldr	r6, [pc, #440]	@ (802371c <Argus_GetDefaultCfg+0x3b4>)
 8023564:	f8c0 60e0 	str.w	r6, [r0, #224]	@ 0xe0
 8023568:	f8c0 60f0 	str.w	r6, [r0, #240]	@ 0xf0
 802356c:	4e6c      	ldr	r6, [pc, #432]	@ (8023720 <Argus_GetDefaultCfg+0x3b8>)
 802356e:	f8c0 60e8 	str.w	r6, [r0, #232]	@ 0xe8
 8023572:	f44f 7ca0 	mov.w	ip, #320	@ 0x140
 8023576:	2601      	movs	r6, #1
 8023578:	f8a0 c0ec 	strh.w	ip, [r0, #236]	@ 0xec
 802357c:	42b2      	cmp	r2, r6
 802357e:	f241 4c0d 	movw	ip, #5133	@ 0x140d
 8023582:	f880 60e4 	strb.w	r6, [r0, #228]	@ 0xe4
 8023586:	f8a0 c0e5 	strh.w	ip, [r0, #229]	@ 0xe5
 802358a:	f040 8721 	bne.w	80243d0 <Argus_GetDefaultCfg+0x1068>
 802358e:	4616      	mov	r6, r2
 8023590:	46a4      	mov	ip, r4
 8023592:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 802372c <Argus_GetDefaultCfg+0x3c4>
 8023596:	f880 c0ac 	strb.w	ip, [r0, #172]	@ 0xac
 802359a:	f8df c194 	ldr.w	ip, [pc, #404]	@ 8023730 <Argus_GetDefaultCfg+0x3c8>
 802359e:	f8df 9194 	ldr.w	r9, [pc, #404]	@ 8023734 <Argus_GetDefaultCfg+0x3cc>
 80235a2:	e9c0 8c2c 	strd	r8, ip, [r0, #176]	@ 0xb0
 80235a6:	f5ac 0c00 	sub.w	ip, ip, #8388608	@ 0x800000
 80235aa:	f5ac 7c82 	sub.w	ip, ip, #260	@ 0x104
 80235ae:	f8c0 c0b8 	str.w	ip, [r0, #184]	@ 0xb8
 80235b2:	f8df c184 	ldr.w	ip, [pc, #388]	@ 8023738 <Argus_GetDefaultCfg+0x3d0>
 80235b6:	e9c0 9c2f 	strd	r9, ip, [r0, #188]	@ 0xbc
 80235ba:	f8df c180 	ldr.w	ip, [pc, #384]	@ 802373c <Argus_GetDefaultCfg+0x3d4>
 80235be:	f8c0 c02b 	str.w	ip, [r0, #43]	@ 0x2b
 80235c2:	f04f 0c55 	mov.w	ip, #85	@ 0x55
 80235c6:	f880 c0ad 	strb.w	ip, [r0, #173]	@ 0xad
 80235ca:	f64a 2c55 	movw	ip, #43605	@ 0xaa55
 80235ce:	f8a0 c0ae 	strh.w	ip, [r0, #174]	@ 0xae
 80235d2:	f04f 0c00 	mov.w	ip, #0
 80235d6:	f8c0 c027 	str.w	ip, [r0, #39]	@ 0x27
 80235da:	2a01      	cmp	r2, #1
 80235dc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80235e0:	f880 c030 	strb.w	ip, [r0, #48]	@ 0x30
 80235e4:	f000 81ca 	beq.w	802397c <Argus_GetDefaultCfg+0x614>
 80235e8:	2c00      	cmp	r4, #0
 80235ea:	bf18      	it	ne
 80235ec:	f04f 0cf0 	movne.w	ip, #240	@ 0xf0
 80235f0:	f04f 38f0 	mov.w	r8, #4042322160	@ 0xf0f0f0f0
 80235f4:	2a03      	cmp	r2, #3
 80235f6:	e9c0 880d 	strd	r8, r8, [r0, #52]	@ 0x34
 80235fa:	f880 c031 	strb.w	ip, [r0, #49]	@ 0x31
 80235fe:	f880 c032 	strb.w	ip, [r0, #50]	@ 0x32
 8023602:	f880 c033 	strb.w	ip, [r0, #51]	@ 0x33
 8023606:	f8c0 803c 	str.w	r8, [r0, #60]	@ 0x3c
 802360a:	f000 81ba 	beq.w	8023982 <Argus_GetDefaultCfg+0x61a>
 802360e:	2a01      	cmp	r2, #1
 8023610:	f000 81ad 	beq.w	802396e <Argus_GetDefaultCfg+0x606>
 8023614:	2c00      	cmp	r4, #0
 8023616:	f040 81aa 	bne.w	802396e <Argus_GetDefaultCfg+0x606>
 802361a:	f64f 78ff 	movw	r8, #65535	@ 0xffff
 802361e:	f8a0 8041 	strh.w	r8, [r0, #65]	@ 0x41
 8023622:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 8023626:	f880 c051 	strb.w	ip, [r0, #81]	@ 0x51
 802362a:	f880 c052 	strb.w	ip, [r0, #82]	@ 0x52
 802362e:	f880 c053 	strb.w	ip, [r0, #83]	@ 0x53
 8023632:	f04f 3c0f 	mov.w	ip, #252645135	@ 0xf0f0f0f
 8023636:	e9c0 cc11 	strd	ip, ip, [r0, #68]	@ 0x44
 802363a:	f8c0 c04c 	str.w	ip, [r0, #76]	@ 0x4c
 802363e:	f04f 3cf0 	mov.w	ip, #4042322160	@ 0xf0f0f0f0
 8023642:	e9c0 cc15 	strd	ip, ip, [r0, #84]	@ 0x54
 8023646:	f880 8043 	strb.w	r8, [r0, #67]	@ 0x43
 802364a:	f8c0 c05c 	str.w	ip, [r0, #92]	@ 0x5c
 802364e:	f04f 08f0 	mov.w	r8, #240	@ 0xf0
 8023652:	f04f 0c0f 	mov.w	ip, #15
 8023656:	2a01      	cmp	r2, #1
 8023658:	f880 c050 	strb.w	ip, [r0, #80]	@ 0x50
 802365c:	f880 8060 	strb.w	r8, [r0, #96]	@ 0x60
 8023660:	f040 815c 	bne.w	802391c <Argus_GetDefaultCfg+0x5b4>
 8023664:	fa4f f981 	sxtb.w	r9, r1
 8023668:	f880 c068 	strb.w	ip, [r0, #104]	@ 0x68
 802366c:	ea4f 0c49 	mov.w	ip, r9, lsl #1
 8023670:	f00c 0c02 	and.w	ip, ip, #2
 8023674:	f04c 0c01 	orr.w	ip, ip, #1
 8023678:	f880 c069 	strb.w	ip, [r0, #105]	@ 0x69
 802367c:	ea4f 1cc9 	mov.w	ip, r9, lsl #7
 8023680:	2c00      	cmp	r4, #0
 8023682:	f04c 0c04 	orr.w	ip, ip, #4
 8023686:	f880 c063 	strb.w	ip, [r0, #99]	@ 0x63
 802368a:	bf14      	ite	ne
 802368c:	f06f 0c07 	mvnne.w	ip, #7
 8023690:	f06f 0c7f 	mvneq.w	ip, #127	@ 0x7f
 8023694:	f04c 0c02 	orr.w	ip, ip, #2
 8023698:	f880 c06b 	strb.w	ip, [r0, #107]	@ 0x6b
 802369c:	bf14      	ite	ne
 802369e:	f04f 0c04 	movne.w	ip, #4
 80236a2:	f04f 0c02 	moveq.w	ip, #2
 80236a6:	f890 806d 	ldrb.w	r8, [r0, #109]	@ 0x6d
 80236aa:	f880 c062 	strb.w	ip, [r0, #98]	@ 0x62
 80236ae:	f04f 0c10 	mov.w	ip, #16
 80236b2:	f04f 0b00 	mov.w	fp, #0
 80236b6:	f880 c064 	strb.w	ip, [r0, #100]	@ 0x64
 80236ba:	f245 1cfe 	movw	ip, #20990	@ 0x51fe
 80236be:	f008 080f 	and.w	r8, r8, #15
 80236c2:	f880 b06c 	strb.w	fp, [r0, #108]	@ 0x6c
 80236c6:	f8a0 c066 	strh.w	ip, [r0, #102]	@ 0x66
 80236ca:	f04f 0a02 	mov.w	sl, #2
 80236ce:	fa5f fc88 	uxtb.w	ip, r8
 80236d2:	2f01      	cmp	r7, #1
 80236d4:	f880 c06d 	strb.w	ip, [r0, #109]	@ 0x6d
 80236d8:	d132      	bne.n	8023740 <Argus_GetDefaultCfg+0x3d8>
 80236da:	f02b 0b01 	bic.w	fp, fp, #1
 80236de:	f008 080f 	and.w	r8, r8, #15
 80236e2:	f880 b06c 	strb.w	fp, [r0, #108]	@ 0x6c
 80236e6:	f048 0ca0 	orr.w	ip, r8, #160	@ 0xa0
 80236ea:	e029      	b.n	8023740 <Argus_GetDefaultCfg+0x3d8>
 80236ec:	f000999f 	.word	0xf000999f
 80236f0:	50009999 	.word	0x50009999
 80236f4:	20000ccd 	.word	0x20000ccd
 80236f8:	fffccccd 	.word	0xfffccccd
 80236fc:	12c01680 	.word	0x12c01680
 8023700:	016e3600 	.word	0x016e3600
 8023704:	003201f4 	.word	0x003201f4
 8023708:	13880064 	.word	0x13880064
 802370c:	0043199a 	.word	0x0043199a
 8023710:	00022b85 	.word	0x00022b85
 8023714:	06400190 	.word	0x06400190
 8023718:	04060c80 	.word	0x04060c80
 802371c:	50009fff 	.word	0x50009fff
 8023720:	10e014a0 	.word	0x10e014a0
 8023724:	00800140 	.word	0x00800140
 8023728:	dac0b305 	.word	0xdac0b305
 802372c:	0fa080c0 	.word	0x0fa080c0
 8023730:	04430491 	.word	0x04430491
 8023734:	005b8d80 	.word	0x005b8d80
 8023738:	002dc6c0 	.word	0x002dc6c0
 802373c:	20640000 	.word	0x20640000
 8023740:	f890 806f 	ldrb.w	r8, [r0, #111]	@ 0x6f
 8023744:	f048 081e 	orr.w	r8, r8, #30
 8023748:	f028 0801 	bic.w	r8, r8, #1
 802374c:	2c00      	cmp	r4, #0
 802374e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8023752:	f880 806f 	strb.w	r8, [r0, #111]	@ 0x6f
 8023756:	f009 0908 	and.w	r9, r9, #8
 802375a:	bf14      	ite	ne
 802375c:	f04f 0803 	movne.w	r8, #3
 8023760:	f04f 0806 	moveq.w	r8, #6
 8023764:	ea49 0908 	orr.w	r9, r9, r8
 8023768:	f02c 0c0a 	bic.w	ip, ip, #10
 802376c:	f04f 080f 	mov.w	r8, #15
 8023770:	ea4a 0c0c 	orr.w	ip, sl, ip
 8023774:	f880 8070 	strb.w	r8, [r0, #112]	@ 0x70
 8023778:	f890 a078 	ldrb.w	sl, [r0, #120]	@ 0x78
 802377c:	f04f 0812 	mov.w	r8, #18
 8023780:	f880 8072 	strb.w	r8, [r0, #114]	@ 0x72
 8023784:	f084 0801 	eor.w	r8, r4, #1
 8023788:	f04c 0c04 	orr.w	ip, ip, #4
 802378c:	f00a 0a3f 	and.w	sl, sl, #63	@ 0x3f
 8023790:	f880 8074 	strb.w	r8, [r0, #116]	@ 0x74
 8023794:	f04f 0808 	mov.w	r8, #8
 8023798:	f00c 0cf6 	and.w	ip, ip, #246	@ 0xf6
 802379c:	f049 0920 	orr.w	r9, r9, #32
 80237a0:	f880 8077 	strb.w	r8, [r0, #119]	@ 0x77
 80237a4:	2b01      	cmp	r3, #1
 80237a6:	f04a 0880 	orr.w	r8, sl, #128	@ 0x80
 80237aa:	f880 c06d 	strb.w	ip, [r0, #109]	@ 0x6d
 80237ae:	f880 9075 	strb.w	r9, [r0, #117]	@ 0x75
 80237b2:	f880 8078 	strb.w	r8, [r0, #120]	@ 0x78
 80237b6:	d104      	bne.n	80237c2 <Argus_GetDefaultCfg+0x45a>
 80237b8:	230c      	movs	r3, #12
 80237ba:	f04a 08c0 	orr.w	r8, sl, #192	@ 0xc0
 80237be:	f880 3077 	strb.w	r3, [r0, #119]	@ 0x77
 80237c2:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 80237c6:	2c00      	cmp	r4, #0
 80237c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80237cc:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
 80237d0:	bf14      	ite	ne
 80237d2:	2340      	movne	r3, #64	@ 0x40
 80237d4:	f06f 037f 	mvneq.w	r3, #127	@ 0x7f
 80237d8:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 80237dc:	f880 307b 	strb.w	r3, [r0, #123]	@ 0x7b
 80237e0:	2321      	movs	r3, #33	@ 0x21
 80237e2:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
 80237e6:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80237ea:	f8a0 307c 	strh.w	r3, [r0, #124]	@ 0x7c
 80237ee:	23e9      	movs	r3, #233	@ 0xe9
 80237f0:	f008 08d0 	and.w	r8, r8, #208	@ 0xd0
 80237f4:	f880 307e 	strb.w	r3, [r0, #126]	@ 0x7e
 80237f8:	2300      	movs	r3, #0
 80237fa:	f048 0810 	orr.w	r8, r8, #16
 80237fe:	f880 3081 	strb.w	r3, [r0, #129]	@ 0x81
 8023802:	2a04      	cmp	r2, #4
 8023804:	f04f 0303 	mov.w	r3, #3
 8023808:	f880 8078 	strb.w	r8, [r0, #120]	@ 0x78
 802380c:	f880 3082 	strb.w	r3, [r0, #130]	@ 0x82
 8023810:	d02e      	beq.n	8023870 <Argus_GetDefaultCfg+0x508>
 8023812:	2a01      	cmp	r2, #1
 8023814:	f000 830c 	beq.w	8023e30 <Argus_GetDefaultCfg+0xac8>
 8023818:	b352      	cbz	r2, 8023870 <Argus_GetDefaultCfg+0x508>
 802381a:	2c00      	cmp	r4, #0
 802381c:	f000 8362 	beq.w	8023ee4 <Argus_GetDefaultCfg+0xb7c>
 8023820:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
 8023824:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 8023828:	f003 031f 	and.w	r3, r3, #31
 802382c:	f043 0320 	orr.w	r3, r3, #32
 8023830:	e029      	b.n	8023886 <Argus_GetDefaultCfg+0x51e>
 8023832:	4cd8      	ldr	r4, [pc, #864]	@ (8023b94 <Argus_GetDefaultCfg+0x82c>)
 8023834:	f8c0 4124 	str.w	r4, [r0, #292]	@ 0x124
 8023838:	4cd7      	ldr	r4, [pc, #860]	@ (8023b98 <Argus_GetDefaultCfg+0x830>)
 802383a:	f8c0 4110 	str.w	r4, [r0, #272]	@ 0x110
 802383e:	f011 0401 	ands.w	r4, r1, #1
 8023842:	f040 834a 	bne.w	8023eda <Argus_GetDefaultCfg+0xb72>
 8023846:	2580      	movs	r5, #128	@ 0x80
 8023848:	f880 510e 	strb.w	r5, [r0, #270]	@ 0x10e
 802384c:	2566      	movs	r5, #102	@ 0x66
 802384e:	f04e 0e40 	orr.w	lr, lr, #64	@ 0x40
 8023852:	f880 510f 	strb.w	r5, [r0, #271]	@ 0x10f
 8023856:	fa4f fe8e 	sxtb.w	lr, lr
 802385a:	2c00      	cmp	r4, #0
 802385c:	f47f adb7 	bne.w	80233ce <Argus_GetDefaultCfg+0x66>
 8023860:	4dce      	ldr	r5, [pc, #824]	@ (8023b9c <Argus_GetDefaultCfg+0x834>)
 8023862:	f8c0 511a 	str.w	r5, [r0, #282]	@ 0x11a
 8023866:	251f      	movs	r5, #31
 8023868:	f880 5118 	strb.w	r5, [r0, #280]	@ 0x118
 802386c:	2529      	movs	r5, #41	@ 0x29
 802386e:	e5b5      	b.n	80233dc <Argus_GetDefaultCfg+0x74>
 8023870:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 8023874:	f04f 0802 	mov.w	r8, #2
 8023878:	f003 031f 	and.w	r3, r3, #31
 802387c:	f880 8084 	strb.w	r8, [r0, #132]	@ 0x84
 8023880:	b10c      	cbz	r4, 8023886 <Argus_GetDefaultCfg+0x51e>
 8023882:	f063 031f 	orn	r3, r3, #31
 8023886:	f04f 0800 	mov.w	r8, #0
 802388a:	f023 031e 	bic.w	r3, r3, #30
 802388e:	f8a0 8087 	strh.w	r8, [r0, #135]	@ 0x87
 8023892:	f880 8089 	strb.w	r8, [r0, #137]	@ 0x89
 8023896:	f043 0806 	orr.w	r8, r3, #6
 802389a:	f880 8085 	strb.w	r8, [r0, #133]	@ 0x85
 802389e:	f64f 7801 	movw	r8, #65281	@ 0xff01
 80238a2:	f8a0 808b 	strh.w	r8, [r0, #139]	@ 0x8b
 80238a6:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 80238aa:	f880 808d 	strb.w	r8, [r0, #141]	@ 0x8d
 80238ae:	f64f 78ff 	movw	r8, #65535	@ 0xffff
 80238b2:	f8a0 808f 	strh.w	r8, [r0, #143]	@ 0x8f
 80238b6:	f04f 0804 	mov.w	r8, #4
 80238ba:	4547      	cmp	r7, r8
 80238bc:	f880 8091 	strb.w	r8, [r0, #145]	@ 0x91
 80238c0:	f000 80ab 	beq.w	8023a1a <Argus_GetDefaultCfg+0x6b2>
 80238c4:	074b      	lsls	r3, r1, #29
 80238c6:	d527      	bpl.n	8023918 <Argus_GetDefaultCfg+0x5b0>
 80238c8:	2300      	movs	r3, #0
 80238ca:	f880 3109 	strb.w	r3, [r0, #265]	@ 0x109
 80238ce:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 80238d2:	f880 30e4 	strb.w	r3, [r0, #228]	@ 0xe4
 80238d6:	f880 30ac 	strb.w	r3, [r0, #172]	@ 0xac
 80238da:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80238de:	4ab0      	ldr	r2, [pc, #704]	@ (8023ba0 <Argus_GetDefaultCfg+0x838>)
 80238e0:	f8a0 308f 	strh.w	r3, [r0, #143]	@ 0x8f
 80238e4:	f240 114d 	movw	r1, #333	@ 0x14d
 80238e8:	4bae      	ldr	r3, [pc, #696]	@ (8023ba4 <Argus_GetDefaultCfg+0x83c>)
 80238ea:	6041      	str	r1, [r0, #4]
 80238ec:	f44f 41f8 	mov.w	r1, #31744	@ 0x7c00
 80238f0:	2c00      	cmp	r4, #0
 80238f2:	bf18      	it	ne
 80238f4:	4613      	movne	r3, r2
 80238f6:	f8c0 5098 	str.w	r5, [r0, #152]	@ 0x98
 80238fa:	f8a0 108c 	strh.w	r1, [r0, #140]	@ 0x8c
 80238fe:	2501      	movs	r5, #1
 8023900:	21fa      	movs	r1, #250	@ 0xfa
 8023902:	2202      	movs	r2, #2
 8023904:	f880 60d8 	strb.w	r6, [r0, #216]	@ 0xd8
 8023908:	f880 510d 	strb.w	r5, [r0, #269]	@ 0x10d
 802390c:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
 8023910:	f8a0 109c 	strh.w	r1, [r0, #156]	@ 0x9c
 8023914:	f8a0 20a4 	strh.w	r2, [r0, #164]	@ 0xa4
 8023918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802391c:	f8df c298 	ldr.w	ip, [pc, #664]	@ 8023bb8 <Argus_GetDefaultCfg+0x850>
 8023920:	f8c0 c066 	str.w	ip, [r0, #102]	@ 0x66
 8023924:	f104 0c03 	add.w	ip, r4, #3
 8023928:	f880 c062 	strb.w	ip, [r0, #98]	@ 0x62
 802392c:	f04f 0c84 	mov.w	ip, #132	@ 0x84
 8023930:	f880 c063 	strb.w	ip, [r0, #99]	@ 0x63
 8023934:	f04f 0c10 	mov.w	ip, #16
 8023938:	f880 c064 	strb.w	ip, [r0, #100]	@ 0x64
 802393c:	2a04      	cmp	r2, #4
 802393e:	f04f 0c00 	mov.w	ip, #0
 8023942:	f880 c06b 	strb.w	ip, [r0, #107]	@ 0x6b
 8023946:	f040 827f 	bne.w	8023e48 <Argus_GetDefaultCfg+0xae0>
 802394a:	f890 806d 	ldrb.w	r8, [r0, #109]	@ 0x6d
 802394e:	4564      	cmp	r4, ip
 8023950:	f008 080f 	and.w	r8, r8, #15
 8023954:	bf14      	ite	ne
 8023956:	f04f 0b20 	movne.w	fp, #32
 802395a:	f04f 0b1c 	moveq.w	fp, #28
 802395e:	46e2      	mov	sl, ip
 8023960:	f048 0850 	orr.w	r8, r8, #80	@ 0x50
 8023964:	f880 b06c 	strb.w	fp, [r0, #108]	@ 0x6c
 8023968:	fa4f f981 	sxtb.w	r9, r1
 802396c:	e6af      	b.n	80236ce <Argus_GetDefaultCfg+0x366>
 802396e:	f640 780f 	movw	r8, #3855	@ 0xf0f
 8023972:	f8a0 8041 	strh.w	r8, [r0, #65]	@ 0x41
 8023976:	f04f 080f 	mov.w	r8, #15
 802397a:	e654      	b.n	8023626 <Argus_GetDefaultCfg+0x2be>
 802397c:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8023980:	e636      	b.n	80235f0 <Argus_GetDefaultCfg+0x288>
 8023982:	f04f 3c0f 	mov.w	ip, #252645135	@ 0xf0f0f0f
 8023986:	2c00      	cmp	r4, #0
 8023988:	e9c0 cc11 	strd	ip, ip, [r0, #68]	@ 0x44
 802398c:	f8c0 c04c 	str.w	ip, [r0, #76]	@ 0x4c
 8023990:	bf14      	ite	ne
 8023992:	f04f 0c0f 	movne.w	ip, #15
 8023996:	f04f 0cff 	moveq.w	ip, #255	@ 0xff
 802399a:	f880 c041 	strb.w	ip, [r0, #65]	@ 0x41
 802399e:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
 80239a2:	f04f 0c0f 	mov.w	ip, #15
 80239a6:	f880 c043 	strb.w	ip, [r0, #67]	@ 0x43
 80239aa:	f880 c050 	strb.w	ip, [r0, #80]	@ 0x50
 80239ae:	bf14      	ite	ne
 80239b0:	f04f 0cf0 	movne.w	ip, #240	@ 0xf0
 80239b4:	f04f 0cff 	moveq.w	ip, #255	@ 0xff
 80239b8:	f880 c051 	strb.w	ip, [r0, #81]	@ 0x51
 80239bc:	f880 c052 	strb.w	ip, [r0, #82]	@ 0x52
 80239c0:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 80239c4:	f880 c053 	strb.w	ip, [r0, #83]	@ 0x53
 80239c8:	f880 c060 	strb.w	ip, [r0, #96]	@ 0x60
 80239cc:	f8df c1e8 	ldr.w	ip, [pc, #488]	@ 8023bb8 <Argus_GetDefaultCfg+0x850>
 80239d0:	f8c0 c066 	str.w	ip, [r0, #102]	@ 0x66
 80239d4:	f104 0c03 	add.w	ip, r4, #3
 80239d8:	f880 c062 	strb.w	ip, [r0, #98]	@ 0x62
 80239dc:	f04f 0c84 	mov.w	ip, #132	@ 0x84
 80239e0:	f880 c063 	strb.w	ip, [r0, #99]	@ 0x63
 80239e4:	e9c0 8815 	strd	r8, r8, [r0, #84]	@ 0x54
 80239e8:	f04f 0c10 	mov.w	ip, #16
 80239ec:	f880 c064 	strb.w	ip, [r0, #100]	@ 0x64
 80239f0:	f04f 0c00 	mov.w	ip, #0
 80239f4:	f8c0 805c 	str.w	r8, [r0, #92]	@ 0x5c
 80239f8:	f880 c06b 	strb.w	ip, [r0, #107]	@ 0x6b
 80239fc:	fa4f f981 	sxtb.w	r9, r1
 8023a00:	f890 806d 	ldrb.w	r8, [r0, #109]	@ 0x6d
 8023a04:	f04f 0b3f 	mov.w	fp, #63	@ 0x3f
 8023a08:	f008 080f 	and.w	r8, r8, #15
 8023a0c:	f048 0840 	orr.w	r8, r8, #64	@ 0x40
 8023a10:	f880 b06c 	strb.w	fp, [r0, #108]	@ 0x6c
 8023a14:	f04f 0a00 	mov.w	sl, #0
 8023a18:	e659      	b.n	80236ce <Argus_GetDefaultCfg+0x366>
 8023a1a:	2a05      	cmp	r2, #5
 8023a1c:	f000 82cb 	beq.w	8023fb6 <Argus_GetDefaultCfg+0xc4e>
 8023a20:	2a04      	cmp	r2, #4
 8023a22:	f000 8289 	beq.w	8023f38 <Argus_GetDefaultCfg+0xbd0>
 8023a26:	2a03      	cmp	r2, #3
 8023a28:	f000 83e7 	beq.w	80241fa <Argus_GetDefaultCfg+0xe92>
 8023a2c:	2c00      	cmp	r4, #0
 8023a2e:	f000 8405 	beq.w	802423c <Argus_GetDefaultCfg+0xed4>
 8023a32:	4f5d      	ldr	r7, [pc, #372]	@ (8023ba8 <Argus_GetDefaultCfg+0x840>)
 8023a34:	f8c0 7110 	str.w	r7, [r0, #272]	@ 0x110
 8023a38:	f507 4795 	add.w	r7, r7, #19072	@ 0x4a80
 8023a3c:	f8c0 7114 	str.w	r7, [r0, #276]	@ 0x114
 8023a40:	2702      	movs	r7, #2
 8023a42:	7447      	strb	r7, [r0, #17]
 8023a44:	2a01      	cmp	r2, #1
 8023a46:	f04f 0703 	mov.w	r7, #3
 8023a4a:	f880 e10c 	strb.w	lr, [r0, #268]	@ 0x10c
 8023a4e:	f880 7092 	strb.w	r7, [r0, #146]	@ 0x92
 8023a52:	f000 827f 	beq.w	8023f54 <Argus_GetDefaultCfg+0xbec>
 8023a56:	2750      	movs	r7, #80	@ 0x50
 8023a58:	2a03      	cmp	r2, #3
 8023a5a:	8247      	strh	r7, [r0, #18]
 8023a5c:	f040 82bb 	bne.w	8023fd6 <Argus_GetDefaultCfg+0xc6e>
 8023a60:	010a      	lsls	r2, r1, #4
 8023a62:	f002 0210 	and.w	r2, r2, #16
 8023a66:	7342      	strb	r2, [r0, #13]
 8023a68:	2208      	movs	r2, #8
 8023a6a:	7382      	strb	r2, [r0, #14]
 8023a6c:	2220      	movs	r2, #32
 8023a6e:	7302      	strb	r2, [r0, #12]
 8023a70:	4a4e      	ldr	r2, [pc, #312]	@ (8023bac <Argus_GetDefaultCfg+0x844>)
 8023a72:	f8c0 2098 	str.w	r2, [r0, #152]	@ 0x98
 8023a76:	4a4e      	ldr	r2, [pc, #312]	@ (8023bb0 <Argus_GetDefaultCfg+0x848>)
 8023a78:	6182      	str	r2, [r0, #24]
 8023a7a:	2720      	movs	r7, #32
 8023a7c:	2240      	movs	r2, #64	@ 0x40
 8023a7e:	f8a0 20dc 	strh.w	r2, [r0, #220]	@ 0xdc
 8023a82:	2202      	movs	r2, #2
 8023a84:	f8a0 70de 	strh.w	r7, [r0, #222]	@ 0xde
 8023a88:	f880 20ac 	strb.w	r2, [r0, #172]	@ 0xac
 8023a8c:	2c00      	cmp	r4, #0
 8023a8e:	f000 8468 	beq.w	8024362 <Argus_GetDefaultCfg+0xffa>
 8023a92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8023a96:	f8a0 2031 	strh.w	r2, [r0, #49]	@ 0x31
 8023a9a:	f880 2033 	strb.w	r2, [r0, #51]	@ 0x33
 8023a9e:	4a45      	ldr	r2, [pc, #276]	@ (8023bb4 <Argus_GetDefaultCfg+0x84c>)
 8023aa0:	f8c0 20f8 	str.w	r2, [r0, #248]	@ 0xf8
 8023aa4:	f44f 5261 	mov.w	r2, #14400	@ 0x3840
 8023aa8:	f8a0 20fc 	strh.w	r2, [r0, #252]	@ 0xfc
 8023aac:	2210      	movs	r2, #16
 8023aae:	f8a0 2102 	strh.w	r2, [r0, #258]	@ 0x102
 8023ab2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8023ab6:	f8a0 2104 	strh.w	r2, [r0, #260]	@ 0x104
 8023aba:	f242 0264 	movw	r2, #8292	@ 0x2064
 8023abe:	f8a0 202d 	strh.w	r2, [r0, #45]	@ 0x2d
 8023ac2:	f04f 0ef0 	mov.w	lr, #240	@ 0xf0
 8023ac6:	4267      	negs	r7, r4
 8023ac8:	22f0      	movs	r2, #240	@ 0xf0
 8023aca:	b2ff      	uxtb	r7, r7
 8023acc:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 8023ad0:	f880 e034 	strb.w	lr, [r0, #52]	@ 0x34
 8023ad4:	f880 e036 	strb.w	lr, [r0, #54]	@ 0x36
 8023ad8:	f880 e038 	strb.w	lr, [r0, #56]	@ 0x38
 8023adc:	f880 e03a 	strb.w	lr, [r0, #58]	@ 0x3a
 8023ae0:	f880 e03c 	strb.w	lr, [r0, #60]	@ 0x3c
 8023ae4:	f880 e03e 	strb.w	lr, [r0, #62]	@ 0x3e
 8023ae8:	f880 7041 	strb.w	r7, [r0, #65]	@ 0x41
 8023aec:	f880 2035 	strb.w	r2, [r0, #53]	@ 0x35
 8023af0:	f880 2037 	strb.w	r2, [r0, #55]	@ 0x37
 8023af4:	f880 2039 	strb.w	r2, [r0, #57]	@ 0x39
 8023af8:	f880 8042 	strb.w	r8, [r0, #66]	@ 0x42
 8023afc:	2c00      	cmp	r4, #0
 8023afe:	f000 8407 	beq.w	8024310 <Argus_GetDefaultCfg+0xfa8>
 8023b02:	f880 7052 	strb.w	r7, [r0, #82]	@ 0x52
 8023b06:	f640 770f 	movw	r7, #3855	@ 0xf0f
 8023b0a:	f8a0 7043 	strh.w	r7, [r0, #67]	@ 0x43
 8023b0e:	f8a0 704a 	strh.w	r7, [r0, #74]	@ 0x4a
 8023b12:	f04f 370f 	mov.w	r7, #252645135	@ 0xf0f0f0f
 8023b16:	f8c0 7045 	str.w	r7, [r0, #69]	@ 0x45
 8023b1a:	64c7      	str	r7, [r0, #76]	@ 0x4c
 8023b1c:	270f      	movs	r7, #15
 8023b1e:	f880 7049 	strb.w	r7, [r0, #73]	@ 0x49
 8023b22:	f64f 770f 	movw	r7, #65295	@ 0xff0f
 8023b26:	f880 e053 	strb.w	lr, [r0, #83]	@ 0x53
 8023b2a:	f880 2054 	strb.w	r2, [r0, #84]	@ 0x54
 8023b2e:	f880 e055 	strb.w	lr, [r0, #85]	@ 0x55
 8023b32:	f880 2056 	strb.w	r2, [r0, #86]	@ 0x56
 8023b36:	f880 e057 	strb.w	lr, [r0, #87]	@ 0x57
 8023b3a:	f880 2058 	strb.w	r2, [r0, #88]	@ 0x58
 8023b3e:	f880 e059 	strb.w	lr, [r0, #89]	@ 0x59
 8023b42:	f8a0 7050 	strh.w	r7, [r0, #80]	@ 0x50
 8023b46:	f880 205a 	strb.w	r2, [r0, #90]	@ 0x5a
 8023b4a:	f880 205c 	strb.w	r2, [r0, #92]	@ 0x5c
 8023b4e:	f880 205e 	strb.w	r2, [r0, #94]	@ 0x5e
 8023b52:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
 8023b56:	f1c4 0206 	rsb	r2, r4, #6
 8023b5a:	f880 2062 	strb.w	r2, [r0, #98]	@ 0x62
 8023b5e:	2284      	movs	r2, #132	@ 0x84
 8023b60:	f00c 0c0f 	and.w	ip, ip, #15
 8023b64:	f880 2063 	strb.w	r2, [r0, #99]	@ 0x63
 8023b68:	22fa      	movs	r2, #250	@ 0xfa
 8023b6a:	2c00      	cmp	r4, #0
 8023b6c:	f06c 0c5f 	orn	ip, ip, #95	@ 0x5f
 8023b70:	f880 206b 	strb.w	r2, [r0, #107]	@ 0x6b
 8023b74:	f04f 02be 	mov.w	r2, #190	@ 0xbe
 8023b78:	f880 206c 	strb.w	r2, [r0, #108]	@ 0x6c
 8023b7c:	f880 c06d 	strb.w	ip, [r0, #109]	@ 0x6d
 8023b80:	f880 e05b 	strb.w	lr, [r0, #91]	@ 0x5b
 8023b84:	f880 e05d 	strb.w	lr, [r0, #93]	@ 0x5d
 8023b88:	f880 e05f 	strb.w	lr, [r0, #95]	@ 0x5f
 8023b8c:	bf14      	ite	ne
 8023b8e:	220f      	movne	r2, #15
 8023b90:	2215      	moveq	r2, #21
 8023b92:	e2eb      	b.n	802416c <Argus_GetDefaultCfg+0xe04>
 8023b94:	f0009999 	.word	0xf0009999
 8023b98:	01e00280 	.word	0x01e00280
 8023b9c:	20000f5c 	.word	0x20000f5c
 8023ba0:	0016e666 	.word	0x0016e666
 8023ba4:	001c4ccd 	.word	0x001c4ccd
 8023ba8:	00500080 	.word	0x00500080
 8023bac:	0002828f 	.word	0x0002828f
 8023bb0:	00c001e0 	.word	0x00c001e0
 8023bb4:	12c01680 	.word	0x12c01680
 8023bb8:	010f51fe 	.word	0x010f51fe
 8023bbc:	2500      	movs	r5, #0
 8023bbe:	f880 511e 	strb.w	r5, [r0, #286]	@ 0x11e
 8023bc2:	46ac      	mov	ip, r5
 8023bc4:	2502      	movs	r5, #2
 8023bc6:	f880 50ff 	strb.w	r5, [r0, #255]	@ 0xff
 8023bca:	f880 5092 	strb.w	r5, [r0, #146]	@ 0x92
 8023bce:	4dcf      	ldr	r5, [pc, #828]	@ (8023f0c <Argus_GetDefaultCfg+0xba4>)
 8023bd0:	f8df 8358 	ldr.w	r8, [pc, #856]	@ 8023f2c <Argus_GetDefaultCfg+0xbc4>
 8023bd4:	f8c0 5114 	str.w	r5, [r0, #276]	@ 0x114
 8023bd8:	4dcd      	ldr	r5, [pc, #820]	@ (8023f10 <Argus_GetDefaultCfg+0xba8>)
 8023bda:	f880 e10c 	strb.w	lr, [r0, #268]	@ 0x10c
 8023bde:	e9c0 853d 	strd	r8, r5, [r0, #244]	@ 0xf4
 8023be2:	4dcc      	ldr	r5, [pc, #816]	@ (8023f14 <Argus_GetDefaultCfg+0xbac>)
 8023be4:	f8c0 5106 	str.w	r5, [r0, #262]	@ 0x106
 8023be8:	4dcb      	ldr	r5, [pc, #812]	@ (8023f18 <Argus_GetDefaultCfg+0xbb0>)
 8023bea:	6085      	str	r5, [r0, #8]
 8023bec:	f44f 5548 	mov.w	r5, #12800	@ 0x3200
 8023bf0:	f8a0 50fc 	strh.w	r5, [r0, #252]	@ 0xfc
 8023bf4:	2501      	movs	r5, #1
 8023bf6:	2c00      	cmp	r4, #0
 8023bf8:	f880 50fe 	strb.w	r5, [r0, #254]	@ 0xfe
 8023bfc:	f44f 7580 	mov.w	r5, #256	@ 0x100
 8023c00:	f8a0 5100 	strh.w	r5, [r0, #256]	@ 0x100
 8023c04:	bf14      	ite	ne
 8023c06:	2509      	movne	r5, #9
 8023c08:	250b      	moveq	r5, #11
 8023c0a:	f8a0 5102 	strh.w	r5, [r0, #258]	@ 0x102
 8023c0e:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 8023c12:	f8a0 5104 	strh.w	r5, [r0, #260]	@ 0x104
 8023c16:	f240 2566 	movw	r5, #614	@ 0x266
 8023c1a:	8205      	strh	r5, [r0, #16]
 8023c1c:	2c00      	cmp	r4, #0
 8023c1e:	f000 8141 	beq.w	8023ea4 <Argus_GetDefaultCfg+0xb3c>
 8023c22:	2508      	movs	r5, #8
 8023c24:	7305      	strb	r5, [r0, #12]
 8023c26:	81c5      	strh	r5, [r0, #14]
 8023c28:	4dbc      	ldr	r5, [pc, #752]	@ (8023f1c <Argus_GetDefaultCfg+0xbb4>)
 8023c2a:	f8c0 5022 	str.w	r5, [r0, #34]	@ 0x22
 8023c2e:	2540      	movs	r5, #64	@ 0x40
 8023c30:	8245      	strh	r5, [r0, #18]
 8023c32:	2501      	movs	r5, #1
 8023c34:	f880 5021 	strb.w	r5, [r0, #33]	@ 0x21
 8023c38:	e435      	b.n	80234a6 <Argus_GetDefaultCfg+0x13e>
 8023c3a:	2400      	movs	r4, #0
 8023c3c:	f8c0 4124 	str.w	r4, [r0, #292]	@ 0x124
 8023c40:	f011 0401 	ands.w	r4, r1, #1
 8023c44:	f040 8129 	bne.w	8023e9a <Argus_GetDefaultCfg+0xb32>
 8023c48:	2580      	movs	r5, #128	@ 0x80
 8023c4a:	f8a0 5110 	strh.w	r5, [r0, #272]	@ 0x110
 8023c4e:	2560      	movs	r5, #96	@ 0x60
 8023c50:	f8a0 5112 	strh.w	r5, [r0, #274]	@ 0x112
 8023c54:	f04e 0e40 	orr.w	lr, lr, #64	@ 0x40
 8023c58:	2500      	movs	r5, #0
 8023c5a:	fa4f fe8e 	sxtb.w	lr, lr
 8023c5e:	f8a0 510e 	strh.w	r5, [r0, #270]	@ 0x10e
 8023c62:	f7ff bbb1 	b.w	80233c8 <Argus_GetDefaultCfg+0x60>
 8023c66:	f8df c2c8 	ldr.w	ip, [pc, #712]	@ 8023f30 <Argus_GetDefaultCfg+0xbc8>
 8023c6a:	f8c0 c0e8 	str.w	ip, [r0, #232]	@ 0xe8
 8023c6e:	2600      	movs	r6, #0
 8023c70:	f04f 0c06 	mov.w	ip, #6
 8023c74:	f8c0 60e0 	str.w	r6, [r0, #224]	@ 0xe0
 8023c78:	f880 60e4 	strb.w	r6, [r0, #228]	@ 0xe4
 8023c7c:	f8c0 60f0 	str.w	r6, [r0, #240]	@ 0xf0
 8023c80:	f880 c0db 	strb.w	ip, [r0, #219]	@ 0xdb
 8023c84:	f44f 7ca0 	mov.w	ip, #320	@ 0x140
 8023c88:	f8a0 c0ec 	strh.w	ip, [r0, #236]	@ 0xec
 8023c8c:	f241 4c0d 	movw	ip, #5133	@ 0x140d
 8023c90:	f8a0 c0e5 	strh.w	ip, [r0, #229]	@ 0xe5
 8023c94:	f04f 0c01 	mov.w	ip, #1
 8023c98:	e47b      	b.n	8023592 <Argus_GetDefaultCfg+0x22a>
 8023c9a:	f04e 0e30 	orr.w	lr, lr, #48	@ 0x30
 8023c9e:	f44f 557a 	mov.w	r5, #16000	@ 0x3e80
 8023ca2:	f880 e10c 	strb.w	lr, [r0, #268]	@ 0x10c
 8023ca6:	f8a0 5114 	strh.w	r5, [r0, #276]	@ 0x114
 8023caa:	2c00      	cmp	r4, #0
 8023cac:	f040 8108 	bne.w	8023ec0 <Argus_GetDefaultCfg+0xb58>
 8023cb0:	2560      	movs	r5, #96	@ 0x60
 8023cb2:	f8a0 5116 	strh.w	r5, [r0, #278]	@ 0x116
 8023cb6:	f240 1501 	movw	r5, #257	@ 0x101
 8023cba:	2a04      	cmp	r2, #4
 8023cbc:	f8a0 50f4 	strh.w	r5, [r0, #244]	@ 0xf4
 8023cc0:	f000 8105 	beq.w	8023ece <Argus_GetDefaultCfg+0xb66>
 8023cc4:	2a03      	cmp	r2, #3
 8023cc6:	f040 8389 	bne.w	80243dc <Argus_GetDefaultCfg+0x1074>
 8023cca:	4d91      	ldr	r5, [pc, #580]	@ (8023f10 <Argus_GetDefaultCfg+0xba8>)
 8023ccc:	f8c0 50f8 	str.w	r5, [r0, #248]	@ 0xf8
 8023cd0:	f240 3501 	movw	r5, #769	@ 0x301
 8023cd4:	f8a0 50f6 	strh.w	r5, [r0, #246]	@ 0xf6
 8023cd8:	f44f 5548 	mov.w	r5, #12800	@ 0x3200
 8023cdc:	f8a0 50fc 	strh.w	r5, [r0, #252]	@ 0xfc
 8023ce0:	2501      	movs	r5, #1
 8023ce2:	f880 50fe 	strb.w	r5, [r0, #254]	@ 0xfe
 8023ce6:	f44f 7580 	mov.w	r5, #256	@ 0x100
 8023cea:	f8a0 5100 	strh.w	r5, [r0, #256]	@ 0x100
 8023cee:	2c00      	cmp	r4, #0
 8023cf0:	f000 8263 	beq.w	80241ba <Argus_GetDefaultCfg+0xe52>
 8023cf4:	2502      	movs	r5, #2
 8023cf6:	f880 50ff 	strb.w	r5, [r0, #255]	@ 0xff
 8023cfa:	f880 5092 	strb.w	r5, [r0, #146]	@ 0x92
 8023cfe:	4d88      	ldr	r5, [pc, #544]	@ (8023f20 <Argus_GetDefaultCfg+0xbb8>)
 8023d00:	f8c0 5102 	str.w	r5, [r0, #258]	@ 0x102
 8023d04:	4d83      	ldr	r5, [pc, #524]	@ (8023f14 <Argus_GetDefaultCfg+0xbac>)
 8023d06:	f8c0 5106 	str.w	r5, [r0, #262]	@ 0x106
 8023d0a:	4d83      	ldr	r5, [pc, #524]	@ (8023f18 <Argus_GetDefaultCfg+0xbb0>)
 8023d0c:	6085      	str	r5, [r0, #8]
 8023d0e:	f240 2566 	movw	r5, #614	@ 0x266
 8023d12:	8205      	strh	r5, [r0, #16]
 8023d14:	2c00      	cmp	r4, #0
 8023d16:	f000 8367 	beq.w	80243e8 <Argus_GetDefaultCfg+0x1080>
 8023d1a:	4d80      	ldr	r5, [pc, #512]	@ (8023f1c <Argus_GetDefaultCfg+0xbb4>)
 8023d1c:	f8c0 5022 	str.w	r5, [r0, #34]	@ 0x22
 8023d20:	2550      	movs	r5, #80	@ 0x50
 8023d22:	8245      	strh	r5, [r0, #18]
 8023d24:	2501      	movs	r5, #1
 8023d26:	f880 5021 	strb.w	r5, [r0, #33]	@ 0x21
 8023d2a:	2a01      	cmp	r2, #1
 8023d2c:	f04f 0508 	mov.w	r5, #8
 8023d30:	7385      	strb	r5, [r0, #14]
 8023d32:	d020      	beq.n	8023d76 <Argus_GetDefaultCfg+0xa0e>
 8023d34:	7305      	strb	r5, [r0, #12]
 8023d36:	2500      	movs	r5, #0
 8023d38:	73c5      	strb	r5, [r0, #15]
 8023d3a:	f7ff bbb2 	b.w	80234a2 <Argus_GetDefaultCfg+0x13a>
 8023d3e:	4d75      	ldr	r5, [pc, #468]	@ (8023f14 <Argus_GetDefaultCfg+0xbac>)
 8023d40:	f8c0 5106 	str.w	r5, [r0, #262]	@ 0x106
 8023d44:	2a01      	cmp	r2, #1
 8023d46:	f04f 0502 	mov.w	r5, #2
 8023d4a:	7445      	strb	r5, [r0, #17]
 8023d4c:	f040 8246 	bne.w	80241dc <Argus_GetDefaultCfg+0xe74>
 8023d50:	4d71      	ldr	r5, [pc, #452]	@ (8023f18 <Argus_GetDefaultCfg+0xbb0>)
 8023d52:	6085      	str	r5, [r0, #8]
 8023d54:	2566      	movs	r5, #102	@ 0x66
 8023d56:	f880 2092 	strb.w	r2, [r0, #146]	@ 0x92
 8023d5a:	7405      	strb	r5, [r0, #16]
 8023d5c:	2c00      	cmp	r4, #0
 8023d5e:	f000 80ca 	beq.w	8023ef6 <Argus_GetDefaultCfg+0xb8e>
 8023d62:	4d6e      	ldr	r5, [pc, #440]	@ (8023f1c <Argus_GetDefaultCfg+0xbb4>)
 8023d64:	f8c0 5022 	str.w	r5, [r0, #34]	@ 0x22
 8023d68:	2550      	movs	r5, #80	@ 0x50
 8023d6a:	8245      	strh	r5, [r0, #18]
 8023d6c:	2508      	movs	r5, #8
 8023d6e:	f880 2021 	strb.w	r2, [r0, #33]	@ 0x21
 8023d72:	7385      	strb	r5, [r0, #14]
 8023d74:	2508      	movs	r5, #8
 8023d76:	7305      	strb	r5, [r0, #12]
 8023d78:	2500      	movs	r5, #0
 8023d7a:	f8df 81b8 	ldr.w	r8, [pc, #440]	@ 8023f34 <Argus_GetDefaultCfg+0xbcc>
 8023d7e:	73c5      	strb	r5, [r0, #15]
 8023d80:	4d68      	ldr	r5, [pc, #416]	@ (8023f24 <Argus_GetDefaultCfg+0xbbc>)
 8023d82:	e9c0 8506 	strd	r8, r5, [r0, #24]
 8023d86:	2500      	movs	r5, #0
 8023d88:	7345      	strb	r5, [r0, #13]
 8023d8a:	f649 4540 	movw	r5, #40000	@ 0x9c40
 8023d8e:	6145      	str	r5, [r0, #20]
 8023d90:	2540      	movs	r5, #64	@ 0x40
 8023d92:	f880 5020 	strb.w	r5, [r0, #32]
 8023d96:	f04f 0c02 	mov.w	ip, #2
 8023d9a:	2c00      	cmp	r4, #0
 8023d9c:	d038      	beq.n	8023e10 <Argus_GetDefaultCfg+0xaa8>
 8023d9e:	f7ff bb8f 	b.w	80234c0 <Argus_GetDefaultCfg+0x158>
 8023da2:	260b      	movs	r6, #11
 8023da4:	f8a0 6102 	strh.w	r6, [r0, #258]	@ 0x102
 8023da8:	f44f 6680 	mov.w	r6, #1024	@ 0x400
 8023dac:	f8a0 6104 	strh.w	r6, [r0, #260]	@ 0x104
 8023db0:	2602      	movs	r6, #2
 8023db2:	f880 60ff 	strb.w	r6, [r0, #255]	@ 0xff
 8023db6:	2a00      	cmp	r2, #0
 8023db8:	d1c1      	bne.n	8023d3e <Argus_GetDefaultCfg+0x9d6>
 8023dba:	f880 5021 	strb.w	r5, [r0, #33]	@ 0x21
 8023dbe:	4d56      	ldr	r5, [pc, #344]	@ (8023f18 <Argus_GetDefaultCfg+0xbb0>)
 8023dc0:	6085      	str	r5, [r0, #8]
 8023dc2:	4d56      	ldr	r5, [pc, #344]	@ (8023f1c <Argus_GetDefaultCfg+0xbb4>)
 8023dc4:	f8c0 5022 	str.w	r5, [r0, #34]	@ 0x22
 8023dc8:	f04f 554c 	mov.w	r5, #855638016	@ 0x33000000
 8023dcc:	f8c0 5106 	str.w	r5, [r0, #262]	@ 0x106
 8023dd0:	f240 2566 	movw	r5, #614	@ 0x266
 8023dd4:	8205      	strh	r5, [r0, #16]
 8023dd6:	2560      	movs	r5, #96	@ 0x60
 8023dd8:	8245      	strh	r5, [r0, #18]
 8023dda:	2508      	movs	r5, #8
 8023ddc:	f880 6092 	strb.w	r6, [r0, #146]	@ 0x92
 8023de0:	7385      	strb	r5, [r0, #14]
 8023de2:	2520      	movs	r5, #32
 8023de4:	2a03      	cmp	r2, #3
 8023de6:	7305      	strb	r5, [r0, #12]
 8023de8:	f04f 0500 	mov.w	r5, #0
 8023dec:	73c5      	strb	r5, [r0, #15]
 8023dee:	f04f 0c02 	mov.w	ip, #2
 8023df2:	bf0c      	ite	eq
 8023df4:	2510      	moveq	r5, #16
 8023df6:	2518      	movne	r5, #24
 8023df8:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8023f34 <Argus_GetDefaultCfg+0xbcc>
 8023dfc:	7345      	strb	r5, [r0, #13]
 8023dfe:	4d49      	ldr	r5, [pc, #292]	@ (8023f24 <Argus_GetDefaultCfg+0xbbc>)
 8023e00:	e9c0 9506 	strd	r9, r5, [r0, #24]
 8023e04:	f649 4540 	movw	r5, #40000	@ 0x9c40
 8023e08:	6145      	str	r5, [r0, #20]
 8023e0a:	2540      	movs	r5, #64	@ 0x40
 8023e0c:	f880 5020 	strb.w	r5, [r0, #32]
 8023e10:	4d45      	ldr	r5, [pc, #276]	@ (8023f28 <Argus_GetDefaultCfg+0xbc0>)
 8023e12:	f44f 06a6 	mov.w	r6, #5439488	@ 0x530000
 8023e16:	e9c0 6525 	strd	r6, r5, [r0, #148]	@ 0x94
 8023e1a:	f44f 7616 	mov.w	r6, #600	@ 0x258
 8023e1e:	f8a0 609c 	strh.w	r6, [r0, #156]	@ 0x9c
 8023e22:	f240 7601 	movw	r6, #1793	@ 0x701
 8023e26:	f8a0 60a0 	strh.w	r6, [r0, #160]	@ 0xa0
 8023e2a:	2606      	movs	r6, #6
 8023e2c:	f7ff bb55 	b.w	80234da <Argus_GetDefaultCfg+0x172>
 8023e30:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
 8023e34:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 8023e38:	f003 031f 	and.w	r3, r3, #31
 8023e3c:	2c00      	cmp	r4, #0
 8023e3e:	f47f acf5 	bne.w	802382c <Argus_GetDefaultCfg+0x4c4>
 8023e42:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8023e46:	e51e      	b.n	8023886 <Argus_GetDefaultCfg+0x51e>
 8023e48:	2a00      	cmp	r2, #0
 8023e4a:	f040 82a6 	bne.w	802439a <Argus_GetDefaultCfg+0x1032>
 8023e4e:	2c00      	cmp	r4, #0
 8023e50:	f890 806d 	ldrb.w	r8, [r0, #109]	@ 0x6d
 8023e54:	bf14      	ite	ne
 8023e56:	f04f 0b20 	movne.w	fp, #32
 8023e5a:	f04f 0b1c 	moveq.w	fp, #28
 8023e5e:	f008 080f 	and.w	r8, r8, #15
 8023e62:	f880 b06c 	strb.w	fp, [r0, #108]	@ 0x6c
 8023e66:	fa4f f981 	sxtb.w	r9, r1
 8023e6a:	4692      	mov	sl, r2
 8023e6c:	f048 0850 	orr.w	r8, r8, #80	@ 0x50
 8023e70:	e42d      	b.n	80236ce <Argus_GetDefaultCfg+0x366>
 8023e72:	25a0      	movs	r5, #160	@ 0xa0
 8023e74:	f8a0 5110 	strh.w	r5, [r0, #272]	@ 0x110
 8023e78:	2a03      	cmp	r2, #3
 8023e7a:	f04f 0560 	mov.w	r5, #96	@ 0x60
 8023e7e:	f8a0 5112 	strh.w	r5, [r0, #274]	@ 0x112
 8023e82:	f47f aa9b 	bne.w	80233bc <Argus_GetDefaultCfg+0x54>
 8023e86:	f04e 0e40 	orr.w	lr, lr, #64	@ 0x40
 8023e8a:	f44f 45cd 	mov.w	r5, #26240	@ 0x6680
 8023e8e:	fa4f fe8e 	sxtb.w	lr, lr
 8023e92:	f8a0 510e 	strh.w	r5, [r0, #270]	@ 0x10e
 8023e96:	f7ff ba97 	b.w	80233c8 <Argus_GetDefaultCfg+0x60>
 8023e9a:	2560      	movs	r5, #96	@ 0x60
 8023e9c:	f8a0 5110 	strh.w	r5, [r0, #272]	@ 0x110
 8023ea0:	2540      	movs	r5, #64	@ 0x40
 8023ea2:	e6d5      	b.n	8023c50 <Argus_GetDefaultCfg+0x8e8>
 8023ea4:	4d1d      	ldr	r5, [pc, #116]	@ (8023f1c <Argus_GetDefaultCfg+0xbb4>)
 8023ea6:	f8c0 5022 	str.w	r5, [r0, #34]	@ 0x22
 8023eaa:	2560      	movs	r5, #96	@ 0x60
 8023eac:	8245      	strh	r5, [r0, #18]
 8023eae:	2501      	movs	r5, #1
 8023eb0:	f880 5021 	strb.w	r5, [r0, #33]	@ 0x21
 8023eb4:	2520      	movs	r5, #32
 8023eb6:	7305      	strb	r5, [r0, #12]
 8023eb8:	2508      	movs	r5, #8
 8023eba:	81c5      	strh	r5, [r0, #14]
 8023ebc:	2518      	movs	r5, #24
 8023ebe:	e79b      	b.n	8023df8 <Argus_GetDefaultCfg+0xa90>
 8023ec0:	2550      	movs	r5, #80	@ 0x50
 8023ec2:	f8a0 5116 	strh.w	r5, [r0, #278]	@ 0x116
 8023ec6:	f240 1501 	movw	r5, #257	@ 0x101
 8023eca:	f8a0 50f4 	strh.w	r5, [r0, #244]	@ 0xf4
 8023ece:	2501      	movs	r5, #1
 8023ed0:	f880 50f6 	strb.w	r5, [r0, #246]	@ 0xf6
 8023ed4:	2503      	movs	r5, #3
 8023ed6:	f7ff baaf 	b.w	8023438 <Argus_GetDefaultCfg+0xd0>
 8023eda:	253d      	movs	r5, #61	@ 0x3d
 8023edc:	f880 510e 	strb.w	r5, [r0, #270]	@ 0x10e
 8023ee0:	2533      	movs	r5, #51	@ 0x33
 8023ee2:	e4b4      	b.n	802384e <Argus_GetDefaultCfg+0x4e6>
 8023ee4:	f990 3085 	ldrsb.w	r3, [r0, #133]	@ 0x85
 8023ee8:	f04f 0801 	mov.w	r8, #1
 8023eec:	f063 031f 	orn	r3, r3, #31
 8023ef0:	f880 8084 	strb.w	r8, [r0, #132]	@ 0x84
 8023ef4:	e4c7      	b.n	8023886 <Argus_GetDefaultCfg+0x51e>
 8023ef6:	4d09      	ldr	r5, [pc, #36]	@ (8023f1c <Argus_GetDefaultCfg+0xbb4>)
 8023ef8:	f8c0 5022 	str.w	r5, [r0, #34]	@ 0x22
 8023efc:	2560      	movs	r5, #96	@ 0x60
 8023efe:	8245      	strh	r5, [r0, #18]
 8023f00:	2508      	movs	r5, #8
 8023f02:	f880 2021 	strb.w	r2, [r0, #33]	@ 0x21
 8023f06:	7385      	strb	r5, [r0, #14]
 8023f08:	e734      	b.n	8023d74 <Argus_GetDefaultCfg+0xa0c>
 8023f0a:	bf00      	nop
 8023f0c:	00503e80 	.word	0x00503e80
 8023f10:	12c01680 	.word	0x12c01680
 8023f14:	33030002 	.word	0x33030002
 8023f18:	016e3600 	.word	0x016e3600
 8023f1c:	003201f4 	.word	0x003201f4
 8023f20:	0400000d 	.word	0x0400000d
 8023f24:	13880064 	.word	0x13880064
 8023f28:	0002828f 	.word	0x0002828f
 8023f2c:	1f030101 	.word	0x1f030101
 8023f30:	10e014a0 	.word	0x10e014a0
 8023f34:	00800140 	.word	0x00800140
 8023f38:	4fd0      	ldr	r7, [pc, #832]	@ (802427c <Argus_GetDefaultCfg+0xf14>)
 8023f3a:	f8c0 7110 	str.w	r7, [r0, #272]	@ 0x110
 8023f3e:	f507 4795 	add.w	r7, r7, #19072	@ 0x4a80
 8023f42:	f8c0 7114 	str.w	r7, [r0, #276]	@ 0x114
 8023f46:	2702      	movs	r7, #2
 8023f48:	7447      	strb	r7, [r0, #17]
 8023f4a:	2703      	movs	r7, #3
 8023f4c:	f880 e10c 	strb.w	lr, [r0, #268]	@ 0x10c
 8023f50:	f880 7092 	strb.w	r7, [r0, #146]	@ 0x92
 8023f54:	2750      	movs	r7, #80	@ 0x50
 8023f56:	8247      	strh	r7, [r0, #18]
 8023f58:	2708      	movs	r7, #8
 8023f5a:	7387      	strb	r7, [r0, #14]
 8023f5c:	2c00      	cmp	r4, #0
 8023f5e:	f000 808d 	beq.w	802407c <Argus_GetDefaultCfg+0xd14>
 8023f62:	4fc7      	ldr	r7, [pc, #796]	@ (8024280 <Argus_GetDefaultCfg+0xf18>)
 8023f64:	f8c0 7098 	str.w	r7, [r0, #152]	@ 0x98
 8023f68:	4fc6      	ldr	r7, [pc, #792]	@ (8024284 <Argus_GetDefaultCfg+0xf1c>)
 8023f6a:	6187      	str	r7, [r0, #24]
 8023f6c:	4fc6      	ldr	r7, [pc, #792]	@ (8024288 <Argus_GetDefaultCfg+0xf20>)
 8023f6e:	f8c0 70dc 	str.w	r7, [r0, #220]	@ 0xdc
 8023f72:	2a03      	cmp	r2, #3
 8023f74:	f44f 57c1 	mov.w	r7, #6176	@ 0x1820
 8023f78:	8187      	strh	r7, [r0, #12]
 8023f7a:	f040 8173 	bne.w	8024264 <Argus_GetDefaultCfg+0xefc>
 8023f7e:	2202      	movs	r2, #2
 8023f80:	f880 20ac 	strb.w	r2, [r0, #172]	@ 0xac
 8023f84:	e585      	b.n	8023a92 <Argus_GetDefaultCfg+0x72a>
 8023f86:	f8df c330 	ldr.w	ip, [pc, #816]	@ 80242b8 <Argus_GetDefaultCfg+0xf50>
 8023f8a:	4ec0      	ldr	r6, [pc, #768]	@ (802428c <Argus_GetDefaultCfg+0xf24>)
 8023f8c:	f8c0 c0e8 	str.w	ip, [r0, #232]	@ 0xe8
 8023f90:	f44f 7ca0 	mov.w	ip, #320	@ 0x140
 8023f94:	f8c0 60e0 	str.w	r6, [r0, #224]	@ 0xe0
 8023f98:	f8c0 60f0 	str.w	r6, [r0, #240]	@ 0xf0
 8023f9c:	f8a0 c0ec 	strh.w	ip, [r0, #236]	@ 0xec
 8023fa0:	2601      	movs	r6, #1
 8023fa2:	f241 4c0d 	movw	ip, #5133	@ 0x140d
 8023fa6:	f8a0 c0e5 	strh.w	ip, [r0, #229]	@ 0xe5
 8023faa:	f880 60e4 	strb.w	r6, [r0, #228]	@ 0xe4
 8023fae:	f04f 0c02 	mov.w	ip, #2
 8023fb2:	f7ff baee 	b.w	8023592 <Argus_GetDefaultCfg+0x22a>
 8023fb6:	2c00      	cmp	r4, #0
 8023fb8:	d04b      	beq.n	8024052 <Argus_GetDefaultCfg+0xcea>
 8023fba:	4ab5      	ldr	r2, [pc, #724]	@ (8024290 <Argus_GetDefaultCfg+0xf28>)
 8023fbc:	f8df 82fc 	ldr.w	r8, [pc, #764]	@ 80242bc <Argus_GetDefaultCfg+0xf54>
 8023fc0:	f880 e10c 	strb.w	lr, [r0, #268]	@ 0x10c
 8023fc4:	e9c0 8244 	strd	r8, r2, [r0, #272]	@ 0x110
 8023fc8:	2202      	movs	r2, #2
 8023fca:	7442      	strb	r2, [r0, #17]
 8023fcc:	2203      	movs	r2, #3
 8023fce:	f880 2092 	strb.w	r2, [r0, #146]	@ 0x92
 8023fd2:	2250      	movs	r2, #80	@ 0x50
 8023fd4:	8242      	strh	r2, [r0, #18]
 8023fd6:	4aaa      	ldr	r2, [pc, #680]	@ (8024280 <Argus_GetDefaultCfg+0xf18>)
 8023fd8:	f8c0 2098 	str.w	r2, [r0, #152]	@ 0x98
 8023fdc:	4aa9      	ldr	r2, [pc, #676]	@ (8024284 <Argus_GetDefaultCfg+0xf1c>)
 8023fde:	6182      	str	r2, [r0, #24]
 8023fe0:	4aa9      	ldr	r2, [pc, #676]	@ (8024288 <Argus_GetDefaultCfg+0xf20>)
 8023fe2:	f8c0 20dc 	str.w	r2, [r0, #220]	@ 0xdc
 8023fe6:	4aab      	ldr	r2, [pc, #684]	@ (8024294 <Argus_GetDefaultCfg+0xf2c>)
 8023fe8:	f8c0 20f8 	str.w	r2, [r0, #248]	@ 0xf8
 8023fec:	f44f 52c1 	mov.w	r2, #6176	@ 0x1820
 8023ff0:	8182      	strh	r2, [r0, #12]
 8023ff2:	2208      	movs	r2, #8
 8023ff4:	7382      	strb	r2, [r0, #14]
 8023ff6:	2201      	movs	r2, #1
 8023ff8:	f880 20ac 	strb.w	r2, [r0, #172]	@ 0xac
 8023ffc:	f44f 5261 	mov.w	r2, #14400	@ 0x3840
 8024000:	f8a0 20fc 	strh.w	r2, [r0, #252]	@ 0xfc
 8024004:	2c00      	cmp	r4, #0
 8024006:	d051      	beq.n	80240ac <Argus_GetDefaultCfg+0xd44>
 8024008:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 802400c:	f8a0 2031 	strh.w	r2, [r0, #49]	@ 0x31
 8024010:	f880 2033 	strb.w	r2, [r0, #51]	@ 0x33
 8024014:	f8a0 2041 	strh.w	r2, [r0, #65]	@ 0x41
 8024018:	f880 2043 	strb.w	r2, [r0, #67]	@ 0x43
 802401c:	22f0      	movs	r2, #240	@ 0xf0
 802401e:	270f      	movs	r7, #15
 8024020:	f880 203a 	strb.w	r2, [r0, #58]	@ 0x3a
 8024024:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
 8024028:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
 802402c:	4696      	mov	lr, r2
 802402e:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 8024032:	6342      	str	r2, [r0, #52]	@ 0x34
 8024034:	4690      	mov	r8, r2
 8024036:	f880 7044 	strb.w	r7, [r0, #68]	@ 0x44
 802403a:	463a      	mov	r2, r7
 802403c:	4f96      	ldr	r7, [pc, #600]	@ (8024298 <Argus_GetDefaultCfg+0xf30>)
 802403e:	f8c0 7102 	str.w	r7, [r0, #258]	@ 0x102
 8024042:	f242 0764 	movw	r7, #8292	@ 0x2064
 8024046:	f8a0 702d 	strh.w	r7, [r0, #45]	@ 0x2d
 802404a:	f24f 07f0 	movw	r7, #61680	@ 0xf0f0
 802404e:	8707      	strh	r7, [r0, #56]	@ 0x38
 8024050:	e04e      	b.n	80240f0 <Argus_GetDefaultCfg+0xd88>
 8024052:	4f92      	ldr	r7, [pc, #584]	@ (802429c <Argus_GetDefaultCfg+0xf34>)
 8024054:	f8c0 7110 	str.w	r7, [r0, #272]	@ 0x110
 8024058:	f507 4795 	add.w	r7, r7, #19072	@ 0x4a80
 802405c:	f8c0 7114 	str.w	r7, [r0, #276]	@ 0x114
 8024060:	2702      	movs	r7, #2
 8024062:	7447      	strb	r7, [r0, #17]
 8024064:	2703      	movs	r7, #3
 8024066:	f880 e10c 	strb.w	lr, [r0, #268]	@ 0x10c
 802406a:	f880 7092 	strb.w	r7, [r0, #146]	@ 0x92
 802406e:	2760      	movs	r7, #96	@ 0x60
 8024070:	2a03      	cmp	r2, #3
 8024072:	8247      	strh	r7, [r0, #18]
 8024074:	f000 8143 	beq.w	80242fe <Argus_GetDefaultCfg+0xf96>
 8024078:	2708      	movs	r7, #8
 802407a:	7387      	strb	r7, [r0, #14]
 802407c:	4f80      	ldr	r7, [pc, #512]	@ (8024280 <Argus_GetDefaultCfg+0xf18>)
 802407e:	f8c0 7098 	str.w	r7, [r0, #152]	@ 0x98
 8024082:	4f80      	ldr	r7, [pc, #512]	@ (8024284 <Argus_GetDefaultCfg+0xf1c>)
 8024084:	6187      	str	r7, [r0, #24]
 8024086:	4f86      	ldr	r7, [pc, #536]	@ (80242a0 <Argus_GetDefaultCfg+0xf38>)
 8024088:	f8c0 70dc 	str.w	r7, [r0, #220]	@ 0xdc
 802408c:	2a03      	cmp	r2, #3
 802408e:	f644 0750 	movw	r7, #18512	@ 0x4850
 8024092:	8187      	strh	r7, [r0, #12]
 8024094:	f000 8162 	beq.w	802435c <Argus_GetDefaultCfg+0xff4>
 8024098:	4a7e      	ldr	r2, [pc, #504]	@ (8024294 <Argus_GetDefaultCfg+0xf2c>)
 802409a:	f8c0 20f8 	str.w	r2, [r0, #248]	@ 0xf8
 802409e:	2201      	movs	r2, #1
 80240a0:	f880 20ac 	strb.w	r2, [r0, #172]	@ 0xac
 80240a4:	f44f 5261 	mov.w	r2, #14400	@ 0x3840
 80240a8:	f8a0 20fc 	strh.w	r2, [r0, #252]	@ 0xfc
 80240ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80240b0:	f8a0 2031 	strh.w	r2, [r0, #49]	@ 0x31
 80240b4:	f880 2033 	strb.w	r2, [r0, #51]	@ 0x33
 80240b8:	8702      	strh	r2, [r0, #56]	@ 0x38
 80240ba:	f8a0 2041 	strh.w	r2, [r0, #65]	@ 0x41
 80240be:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 80240c2:	f04f 32ff 	mov.w	r2, #4294967295
 80240c6:	6342      	str	r2, [r0, #52]	@ 0x34
 80240c8:	f880 2043 	strb.w	r2, [r0, #67]	@ 0x43
 80240cc:	4690      	mov	r8, r2
 80240ce:	22f0      	movs	r2, #240	@ 0xf0
 80240d0:	f880 203a 	strb.w	r2, [r0, #58]	@ 0x3a
 80240d4:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
 80240d8:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
 80240dc:	4a71      	ldr	r2, [pc, #452]	@ (80242a4 <Argus_GetDefaultCfg+0xf3c>)
 80240de:	f8c0 2102 	str.w	r2, [r0, #258]	@ 0x102
 80240e2:	f04f 0eff 	mov.w	lr, #255	@ 0xff
 80240e6:	f242 0264 	movw	r2, #8292	@ 0x2064
 80240ea:	f8a0 202d 	strh.w	r2, [r0, #45]	@ 0x2d
 80240ee:	4672      	mov	r2, lr
 80240f0:	2700      	movs	r7, #0
 80240f2:	f362 0707 	bfi	r7, r2, #0, #8
 80240f6:	f362 270f 	bfi	r7, r2, #8, #8
 80240fa:	f362 4717 	bfi	r7, r2, #16, #8
 80240fe:	f362 671f 	bfi	r7, r2, #24, #8
 8024102:	f880 2049 	strb.w	r2, [r0, #73]	@ 0x49
 8024106:	f640 720f 	movw	r2, #3855	@ 0xf0f
 802410a:	f8c0 7045 	str.w	r7, [r0, #69]	@ 0x45
 802410e:	f8a0 204a 	strh.w	r2, [r0, #74]	@ 0x4a
 8024112:	f04f 370f 	mov.w	r7, #252645135	@ 0xf0f0f0f
 8024116:	f06f 02f0 	mvn.w	r2, #240	@ 0xf0
 802411a:	e9c0 7213 	strd	r7, r2, [r0, #76]	@ 0x4c
 802411e:	f24f 02f0 	movw	r2, #61680	@ 0xf0f0
 8024122:	f8a0 205a 	strh.w	r2, [r0, #90]	@ 0x5a
 8024126:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 802412a:	2c00      	cmp	r4, #0
 802412c:	65c2      	str	r2, [r0, #92]	@ 0x5c
 802412e:	f04f 02f0 	mov.w	r2, #240	@ 0xf0
 8024132:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
 8024136:	bf14      	ite	ne
 8024138:	2205      	movne	r2, #5
 802413a:	2203      	moveq	r2, #3
 802413c:	f880 2062 	strb.w	r2, [r0, #98]	@ 0x62
 8024140:	2284      	movs	r2, #132	@ 0x84
 8024142:	f00c 0c0f 	and.w	ip, ip, #15
 8024146:	f880 2063 	strb.w	r2, [r0, #99]	@ 0x63
 802414a:	22fa      	movs	r2, #250	@ 0xfa
 802414c:	f06c 0c5f 	orn	ip, ip, #95	@ 0x5f
 8024150:	f880 206b 	strb.w	r2, [r0, #107]	@ 0x6b
 8024154:	22be      	movs	r2, #190	@ 0xbe
 8024156:	f880 206c 	strb.w	r2, [r0, #108]	@ 0x6c
 802415a:	f8c0 8055 	str.w	r8, [r0, #85]	@ 0x55
 802415e:	f880 c06d 	strb.w	ip, [r0, #109]	@ 0x6d
 8024162:	f880 e054 	strb.w	lr, [r0, #84]	@ 0x54
 8024166:	f880 e059 	strb.w	lr, [r0, #89]	@ 0x59
 802416a:	220f      	movs	r2, #15
 802416c:	f063 0319 	orn	r3, r3, #25
 8024170:	f880 3085 	strb.w	r3, [r0, #133]	@ 0x85
 8024174:	2301      	movs	r3, #1
 8024176:	f880 2070 	strb.w	r2, [r0, #112]	@ 0x70
 802417a:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
 802417e:	f7ff bba1 	b.w	80238c4 <Argus_GetDefaultCfg+0x55c>
 8024182:	f8df c108 	ldr.w	ip, [pc, #264]	@ 802428c <Argus_GetDefaultCfg+0xf24>
 8024186:	f8c0 c0e0 	str.w	ip, [r0, #224]	@ 0xe0
 802418a:	2601      	movs	r6, #1
 802418c:	f8c0 c0f0 	str.w	ip, [r0, #240]	@ 0xf0
 8024190:	f8df c124 	ldr.w	ip, [pc, #292]	@ 80242b8 <Argus_GetDefaultCfg+0xf50>
 8024194:	f880 60e4 	strb.w	r6, [r0, #228]	@ 0xe4
 8024198:	f8c0 c0e8 	str.w	ip, [r0, #232]	@ 0xe8
 802419c:	e572      	b.n	8023c84 <Argus_GetDefaultCfg+0x91c>
 802419e:	f44f 557a 	mov.w	r5, #16000	@ 0x3e80
 80241a2:	f04e 0e20 	orr.w	lr, lr, #32
 80241a6:	f8a0 5114 	strh.w	r5, [r0, #276]	@ 0x114
 80241aa:	f880 e10c 	strb.w	lr, [r0, #268]	@ 0x10c
 80241ae:	2550      	movs	r5, #80	@ 0x50
 80241b0:	2c00      	cmp	r4, #0
 80241b2:	f47f a934 	bne.w	802341e <Argus_GetDefaultCfg+0xb6>
 80241b6:	f7ff b931 	b.w	802341c <Argus_GetDefaultCfg+0xb4>
 80241ba:	2502      	movs	r5, #2
 80241bc:	f880 50ff 	strb.w	r5, [r0, #255]	@ 0xff
 80241c0:	7445      	strb	r5, [r0, #17]
 80241c2:	f105 554c 	add.w	r5, r5, #855638016	@ 0x33000000
 80241c6:	f505 3540 	add.w	r5, r5, #196608	@ 0x30000
 80241ca:	f8c0 5106 	str.w	r5, [r0, #262]	@ 0x106
 80241ce:	250b      	movs	r5, #11
 80241d0:	f8a0 5102 	strh.w	r5, [r0, #258]	@ 0x102
 80241d4:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 80241d8:	f8a0 5104 	strh.w	r5, [r0, #260]	@ 0x104
 80241dc:	4d32      	ldr	r5, [pc, #200]	@ (80242a8 <Argus_GetDefaultCfg+0xf40>)
 80241de:	6085      	str	r5, [r0, #8]
 80241e0:	2666      	movs	r6, #102	@ 0x66
 80241e2:	2502      	movs	r5, #2
 80241e4:	2a05      	cmp	r2, #5
 80241e6:	f880 5092 	strb.w	r5, [r0, #146]	@ 0x92
 80241ea:	7406      	strb	r6, [r0, #16]
 80241ec:	f47f ad92 	bne.w	8023d14 <Argus_GetDefaultCfg+0x9ac>
 80241f0:	46ac      	mov	ip, r5
 80241f2:	2c00      	cmp	r4, #0
 80241f4:	f47f ad15 	bne.w	8023c22 <Argus_GetDefaultCfg+0x8ba>
 80241f8:	e654      	b.n	8023ea4 <Argus_GetDefaultCfg+0xb3c>
 80241fa:	2c00      	cmp	r4, #0
 80241fc:	d164      	bne.n	80242c8 <Argus_GetDefaultCfg+0xf60>
 80241fe:	f880 2092 	strb.w	r2, [r0, #146]	@ 0x92
 8024202:	010a      	lsls	r2, r1, #4
 8024204:	f002 0210 	and.w	r2, r2, #16
 8024208:	ea42 0e0e 	orr.w	lr, r2, lr
 802420c:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 80242c0 <Argus_GetDefaultCfg+0xf58>
 8024210:	7342      	strb	r2, [r0, #13]
 8024212:	4a26      	ldr	r2, [pc, #152]	@ (80242ac <Argus_GetDefaultCfg+0xf44>)
 8024214:	f880 e10c 	strb.w	lr, [r0, #268]	@ 0x10c
 8024218:	e9c0 8244 	strd	r8, r2, [r0, #272]	@ 0x110
 802421c:	2201      	movs	r2, #1
 802421e:	7442      	strb	r2, [r0, #17]
 8024220:	2280      	movs	r2, #128	@ 0x80
 8024222:	8242      	strh	r2, [r0, #18]
 8024224:	2210      	movs	r2, #16
 8024226:	7382      	strb	r2, [r0, #14]
 8024228:	2220      	movs	r2, #32
 802422a:	7302      	strb	r2, [r0, #12]
 802422c:	4a20      	ldr	r2, [pc, #128]	@ (80242b0 <Argus_GetDefaultCfg+0xf48>)
 802422e:	f8c0 2098 	str.w	r2, [r0, #152]	@ 0x98
 8024232:	4a14      	ldr	r2, [pc, #80]	@ (8024284 <Argus_GetDefaultCfg+0xf1c>)
 8024234:	6182      	str	r2, [r0, #24]
 8024236:	2730      	movs	r7, #48	@ 0x30
 8024238:	2260      	movs	r2, #96	@ 0x60
 802423a:	e420      	b.n	8023a7e <Argus_GetDefaultCfg+0x716>
 802423c:	4f1d      	ldr	r7, [pc, #116]	@ (80242b4 <Argus_GetDefaultCfg+0xf4c>)
 802423e:	f880 e10c 	strb.w	lr, [r0, #268]	@ 0x10c
 8024242:	f8df e080 	ldr.w	lr, [pc, #128]	@ 80242c4 <Argus_GetDefaultCfg+0xf5c>
 8024246:	e9c0 e744 	strd	lr, r7, [r0, #272]	@ 0x110
 802424a:	2702      	movs	r7, #2
 802424c:	7447      	strb	r7, [r0, #17]
 802424e:	2a04      	cmp	r2, #4
 8024250:	f04f 0703 	mov.w	r7, #3
 8024254:	f880 7092 	strb.w	r7, [r0, #146]	@ 0x92
 8024258:	f000 80bd 	beq.w	80243d6 <Argus_GetDefaultCfg+0x106e>
 802425c:	2a01      	cmp	r2, #1
 802425e:	f47f af06 	bne.w	802406e <Argus_GetDefaultCfg+0xd06>
 8024262:	e677      	b.n	8023f54 <Argus_GetDefaultCfg+0xbec>
 8024264:	4a0b      	ldr	r2, [pc, #44]	@ (8024294 <Argus_GetDefaultCfg+0xf2c>)
 8024266:	f8c0 20f8 	str.w	r2, [r0, #248]	@ 0xf8
 802426a:	2201      	movs	r2, #1
 802426c:	f880 20ac 	strb.w	r2, [r0, #172]	@ 0xac
 8024270:	f44f 5261 	mov.w	r2, #14400	@ 0x3840
 8024274:	f8a0 20fc 	strh.w	r2, [r0, #252]	@ 0xfc
 8024278:	e6c6      	b.n	8024008 <Argus_GetDefaultCfg+0xca0>
 802427a:	bf00      	nop
 802427c:	00500080 	.word	0x00500080
 8024280:	0002828f 	.word	0x0002828f
 8024284:	00c001e0 	.word	0x00c001e0
 8024288:	00200040 	.word	0x00200040
 802428c:	f000ffff 	.word	0xf000ffff
 8024290:	00504b00 	.word	0x00504b00
 8024294:	12c01680 	.word	0x12c01680
 8024298:	04000010 	.word	0x04000010
 802429c:	00600080 	.word	0x00600080
 80242a0:	00300060 	.word	0x00300060
 80242a4:	0800000b 	.word	0x0800000b
 80242a8:	016e3600 	.word	0x016e3600
 80242ac:	00804b00 	.word	0x00804b00
 80242b0:	0003828f 	.word	0x0003828f
 80242b4:	00604b00 	.word	0x00604b00
 80242b8:	10e014a0 	.word	0x10e014a0
 80242bc:	00500070 	.word	0x00500070
 80242c0:	008000c0 	.word	0x008000c0
 80242c4:	006000a0 	.word	0x006000a0
 80242c8:	f880 2092 	strb.w	r2, [r0, #146]	@ 0x92
 80242cc:	010a      	lsls	r2, r1, #4
 80242ce:	f002 0210 	and.w	r2, r2, #16
 80242d2:	ea42 0e0e 	orr.w	lr, r2, lr
 80242d6:	7342      	strb	r2, [r0, #13]
 80242d8:	4a4b      	ldr	r2, [pc, #300]	@ (8024408 <Argus_GetDefaultCfg+0x10a0>)
 80242da:	f8c0 2110 	str.w	r2, [r0, #272]	@ 0x110
 80242de:	f502 4295 	add.w	r2, r2, #19072	@ 0x4a80
 80242e2:	f8c0 2114 	str.w	r2, [r0, #276]	@ 0x114
 80242e6:	2202      	movs	r2, #2
 80242e8:	7442      	strb	r2, [r0, #17]
 80242ea:	2250      	movs	r2, #80	@ 0x50
 80242ec:	8242      	strh	r2, [r0, #18]
 80242ee:	2208      	movs	r2, #8
 80242f0:	7382      	strb	r2, [r0, #14]
 80242f2:	2220      	movs	r2, #32
 80242f4:	f880 e10c 	strb.w	lr, [r0, #268]	@ 0x10c
 80242f8:	7302      	strb	r2, [r0, #12]
 80242fa:	f7ff bbb9 	b.w	8023a70 <Argus_GetDefaultCfg+0x708>
 80242fe:	010a      	lsls	r2, r1, #4
 8024300:	f002 0210 	and.w	r2, r2, #16
 8024304:	7342      	strb	r2, [r0, #13]
 8024306:	2210      	movs	r2, #16
 8024308:	7382      	strb	r2, [r0, #14]
 802430a:	2220      	movs	r2, #32
 802430c:	7302      	strb	r2, [r0, #12]
 802430e:	e78d      	b.n	802422c <Argus_GetDefaultCfg+0xec4>
 8024310:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 8024314:	f8a0 2043 	strh.w	r2, [r0, #67]	@ 0x43
 8024318:	f04f 22ff 	mov.w	r2, #4278255360	@ 0xff00ff00
 802431c:	f8c0 2045 	str.w	r2, [r0, #69]	@ 0x45
 8024320:	f04f 12ff 	mov.w	r2, #16711935	@ 0xff00ff
 8024324:	64c2      	str	r2, [r0, #76]	@ 0x4c
 8024326:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 802432a:	f8a0 2050 	strh.w	r2, [r0, #80]	@ 0x50
 802432e:	f8a0 804a 	strh.w	r8, [r0, #74]	@ 0x4a
 8024332:	f880 7052 	strb.w	r7, [r0, #82]	@ 0x52
 8024336:	f880 4049 	strb.w	r4, [r0, #73]	@ 0x49
 802433a:	f880 e053 	strb.w	lr, [r0, #83]	@ 0x53
 802433e:	f880 4054 	strb.w	r4, [r0, #84]	@ 0x54
 8024342:	f880 e055 	strb.w	lr, [r0, #85]	@ 0x55
 8024346:	f880 4056 	strb.w	r4, [r0, #86]	@ 0x56
 802434a:	f880 e057 	strb.w	lr, [r0, #87]	@ 0x57
 802434e:	f880 4058 	strb.w	r4, [r0, #88]	@ 0x58
 8024352:	f880 e059 	strb.w	lr, [r0, #89]	@ 0x59
 8024356:	4622      	mov	r2, r4
 8024358:	f7ff bbf5 	b.w	8023b46 <Argus_GetDefaultCfg+0x7de>
 802435c:	2202      	movs	r2, #2
 802435e:	f880 20ac 	strb.w	r2, [r0, #172]	@ 0xac
 8024362:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8024366:	f8a0 2031 	strh.w	r2, [r0, #49]	@ 0x31
 802436a:	f880 2033 	strb.w	r2, [r0, #51]	@ 0x33
 802436e:	4a27      	ldr	r2, [pc, #156]	@ (802440c <Argus_GetDefaultCfg+0x10a4>)
 8024370:	f8c0 20f8 	str.w	r2, [r0, #248]	@ 0xf8
 8024374:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8024378:	f8a0 20fc 	strh.w	r2, [r0, #252]	@ 0xfc
 802437c:	220b      	movs	r2, #11
 802437e:	f8a0 2102 	strh.w	r2, [r0, #258]	@ 0x102
 8024382:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8024386:	f8a0 2104 	strh.w	r2, [r0, #260]	@ 0x104
 802438a:	f244 02c8 	movw	r2, #16584	@ 0x40c8
 802438e:	f8a0 202d 	strh.w	r2, [r0, #45]	@ 0x2d
 8024392:	f04f 0eff 	mov.w	lr, #255	@ 0xff
 8024396:	f7ff bb96 	b.w	8023ac6 <Argus_GetDefaultCfg+0x75e>
 802439a:	2a01      	cmp	r2, #1
 802439c:	fa4f f981 	sxtb.w	r9, r1
 80243a0:	f63f ab2e 	bhi.w	8023a00 <Argus_GetDefaultCfg+0x698>
 80243a4:	f890 806d 	ldrb.w	r8, [r0, #109]	@ 0x6d
 80243a8:	f04f 0b3e 	mov.w	fp, #62	@ 0x3e
 80243ac:	46e2      	mov	sl, ip
 80243ae:	f008 080f 	and.w	r8, r8, #15
 80243b2:	f880 b06c 	strb.w	fp, [r0, #108]	@ 0x6c
 80243b6:	f43f a98a 	beq.w	80236ce <Argus_GetDefaultCfg+0x366>
 80243ba:	2a00      	cmp	r2, #0
 80243bc:	f43f ad56 	beq.w	8023e6c <Argus_GetDefaultCfg+0xb04>
 80243c0:	f048 0840 	orr.w	r8, r8, #64	@ 0x40
 80243c4:	f7ff b983 	b.w	80236ce <Argus_GetDefaultCfg+0x366>
 80243c8:	2550      	movs	r5, #80	@ 0x50
 80243ca:	f8a0 5116 	strh.w	r5, [r0, #278]	@ 0x116
 80243ce:	e472      	b.n	8023cb6 <Argus_GetDefaultCfg+0x94e>
 80243d0:	46b4      	mov	ip, r6
 80243d2:	f7ff b8de 	b.w	8023592 <Argus_GetDefaultCfg+0x22a>
 80243d6:	2750      	movs	r7, #80	@ 0x50
 80243d8:	8247      	strh	r7, [r0, #18]
 80243da:	e64d      	b.n	8024078 <Argus_GetDefaultCfg+0xd10>
 80243dc:	2503      	movs	r5, #3
 80243de:	f880 50f6 	strb.w	r5, [r0, #246]	@ 0xf6
 80243e2:	2510      	movs	r5, #16
 80243e4:	f7ff b828 	b.w	8023438 <Argus_GetDefaultCfg+0xd0>
 80243e8:	4d09      	ldr	r5, [pc, #36]	@ (8024410 <Argus_GetDefaultCfg+0x10a8>)
 80243ea:	f8c0 5022 	str.w	r5, [r0, #34]	@ 0x22
 80243ee:	2560      	movs	r5, #96	@ 0x60
 80243f0:	8245      	strh	r5, [r0, #18]
 80243f2:	2501      	movs	r5, #1
 80243f4:	f880 5021 	strb.w	r5, [r0, #33]	@ 0x21
 80243f8:	2a01      	cmp	r2, #1
 80243fa:	f04f 0508 	mov.w	r5, #8
 80243fe:	7385      	strb	r5, [r0, #14]
 8024400:	f47f acef 	bne.w	8023de2 <Argus_GetDefaultCfg+0xa7a>
 8024404:	e4b6      	b.n	8023d74 <Argus_GetDefaultCfg+0xa0c>
 8024406:	bf00      	nop
 8024408:	00500080 	.word	0x00500080
 802440c:	1c2021c0 	.word	0x1c2021c0
 8024410:	003201f4 	.word	0x003201f4

08024414 <Argus_OnGetDefaultConfiguration>:
 8024414:	4770      	bx	lr
 8024416:	bf00      	nop

08024418 <Argus_Cfg_GetDefaultConfiguration>:
 8024418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802441c:	b082      	sub	sp, #8
 802441e:	2902      	cmp	r1, #2
 8024420:	f89d 8020 	ldrb.w	r8, [sp, #32]
 8024424:	460c      	mov	r4, r1
 8024426:	4607      	mov	r7, r0
 8024428:	4615      	mov	r5, r2
 802442a:	461e      	mov	r6, r3
 802442c:	d92f      	bls.n	802448e <Argus_Cfg_GetDefaultConfiguration+0x76>
 802442e:	1f4b      	subs	r3, r1, #5
 8024430:	2b01      	cmp	r3, #1
 8024432:	d82e      	bhi.n	8024492 <Argus_Cfg_GetDefaultConfiguration+0x7a>
 8024434:	2d07      	cmp	r5, #7
 8024436:	d903      	bls.n	8024440 <Argus_Cfg_GetDefaultConfiguration+0x28>
 8024438:	f1a5 0343 	sub.w	r3, r5, #67	@ 0x43
 802443c:	2b04      	cmp	r3, #4
 802443e:	d860      	bhi.n	8024502 <Argus_Cfg_GetDefaultConfiguration+0xea>
 8024440:	2e00      	cmp	r6, #0
 8024442:	d053      	beq.n	80244ec <Argus_Cfg_GetDefaultConfiguration+0xd4>
 8024444:	1e73      	subs	r3, r6, #1
 8024446:	2b04      	cmp	r3, #4
 8024448:	d828      	bhi.n	802449c <Argus_Cfg_GetDefaultConfiguration+0x84>
 802444a:	f1b8 0f00 	cmp.w	r8, #0
 802444e:	d02a      	beq.n	80244a6 <Argus_Cfg_GetDefaultConfiguration+0x8e>
 8024450:	f108 33ff 	add.w	r3, r8, #4294967295
 8024454:	2b04      	cmp	r3, #4
 8024456:	d832      	bhi.n	80244be <Argus_Cfg_GetDefaultConfiguration+0xa6>
 8024458:	f44f 7294 	mov.w	r2, #296	@ 0x128
 802445c:	2100      	movs	r1, #0
 802445e:	4638      	mov	r0, r7
 8024460:	f006 fda3 	bl	802afaa <memset>
 8024464:	4638      	mov	r0, r7
 8024466:	703c      	strb	r4, [r7, #0]
 8024468:	4633      	mov	r3, r6
 802446a:	f005 023f 	and.w	r2, r5, #63	@ 0x3f
 802446e:	4621      	mov	r1, r4
 8024470:	f8cd 8000 	str.w	r8, [sp]
 8024474:	f7fe ff78 	bl	8023368 <Argus_GetDefaultCfg>
 8024478:	f8cd 8000 	str.w	r8, [sp]
 802447c:	4633      	mov	r3, r6
 802447e:	462a      	mov	r2, r5
 8024480:	4621      	mov	r1, r4
 8024482:	f7ff ffc7 	bl	8024414 <Argus_OnGetDefaultConfiguration>
 8024486:	2000      	movs	r0, #0
 8024488:	b002      	add	sp, #8
 802448a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802448e:	2900      	cmp	r1, #0
 8024490:	d1d0      	bne.n	8024434 <Argus_Cfg_GetDefaultConfiguration+0x1c>
 8024492:	f06f 0068 	mvn.w	r0, #104	@ 0x68
 8024496:	b002      	add	sp, #8
 8024498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802449c:	f06f 00c5 	mvn.w	r0, #197	@ 0xc5
 80244a0:	b002      	add	sp, #8
 80244a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80244a6:	2d43      	cmp	r5, #67	@ 0x43
 80244a8:	d028      	beq.n	80244fc <Argus_Cfg_GetDefaultConfiguration+0xe4>
 80244aa:	d814      	bhi.n	80244d6 <Argus_Cfg_GetDefaultConfiguration+0xbe>
 80244ac:	2d02      	cmp	r5, #2
 80244ae:	d90b      	bls.n	80244c8 <Argus_Cfg_GetDefaultConfiguration+0xb0>
 80244b0:	2d04      	cmp	r5, #4
 80244b2:	bf0c      	ite	eq
 80244b4:	f04f 0803 	moveq.w	r8, #3
 80244b8:	f04f 0802 	movne.w	r8, #2
 80244bc:	e7cc      	b.n	8024458 <Argus_Cfg_GetDefaultConfiguration+0x40>
 80244be:	f06f 00c4 	mvn.w	r0, #196	@ 0xc4
 80244c2:	b002      	add	sp, #8
 80244c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80244c8:	2d00      	cmp	r5, #0
 80244ca:	bf14      	ite	ne
 80244cc:	f04f 0801 	movne.w	r8, #1
 80244d0:	f04f 0802 	moveq.w	r8, #2
 80244d4:	e7c0      	b.n	8024458 <Argus_Cfg_GetDefaultConfiguration+0x40>
 80244d6:	2d44      	cmp	r5, #68	@ 0x44
 80244d8:	d00d      	beq.n	80244f6 <Argus_Cfg_GetDefaultConfiguration+0xde>
 80244da:	f1a5 0345 	sub.w	r3, r5, #69	@ 0x45
 80244de:	2b02      	cmp	r3, #2
 80244e0:	bf94      	ite	ls
 80244e2:	f04f 0804 	movls.w	r8, #4
 80244e6:	f04f 0802 	movhi.w	r8, #2
 80244ea:	e7b5      	b.n	8024458 <Argus_Cfg_GetDefaultConfiguration+0x40>
 80244ec:	2603      	movs	r6, #3
 80244ee:	f1b8 0f00 	cmp.w	r8, #0
 80244f2:	d1ad      	bne.n	8024450 <Argus_Cfg_GetDefaultConfiguration+0x38>
 80244f4:	e7d7      	b.n	80244a6 <Argus_Cfg_GetDefaultConfiguration+0x8e>
 80244f6:	f04f 0805 	mov.w	r8, #5
 80244fa:	e7ad      	b.n	8024458 <Argus_Cfg_GetDefaultConfiguration+0x40>
 80244fc:	f04f 0804 	mov.w	r8, #4
 8024500:	e7aa      	b.n	8024458 <Argus_Cfg_GetDefaultConfiguration+0x40>
 8024502:	f06f 00c6 	mvn.w	r0, #198	@ 0xc6
 8024506:	e7c6      	b.n	8024496 <Argus_Cfg_GetDefaultConfiguration+0x7e>

08024508 <Argus_Cfg_GetCurrentDefaultConfiguration>:
 8024508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802450c:	4605      	mov	r5, r0
 802450e:	b083      	sub	sp, #12
 8024510:	f8d0 0128 	ldr.w	r0, [r0, #296]	@ 0x128
 8024514:	4688      	mov	r8, r1
 8024516:	4616      	mov	r6, r2
 8024518:	f7fd fc12 	bl	8021d40 <Argus_Dev_GetChipVersion>
 802451c:	2800      	cmp	r0, #0
 802451e:	d072      	beq.n	8024606 <Argus_Cfg_GetCurrentDefaultConfiguration+0xfe>
 8024520:	4607      	mov	r7, r0
 8024522:	f8d5 0128 	ldr.w	r0, [r5, #296]	@ 0x128
 8024526:	f7fd fc0d 	bl	8021d44 <Argus_Dev_GetLaserType>
 802452a:	4604      	mov	r4, r0
 802452c:	f8d5 0128 	ldr.w	r0, [r5, #296]	@ 0x128
 8024530:	f7fd fc02 	bl	8021d38 <Argus_Dev_GetModule>
 8024534:	2e02      	cmp	r6, #2
 8024536:	4605      	mov	r5, r0
 8024538:	46a1      	mov	r9, r4
 802453a:	d912      	bls.n	8024562 <Argus_Cfg_GetCurrentDefaultConfiguration+0x5a>
 802453c:	1f73      	subs	r3, r6, #5
 802453e:	2b01      	cmp	r3, #1
 8024540:	d811      	bhi.n	8024566 <Argus_Cfg_GetCurrentDefaultConfiguration+0x5e>
 8024542:	2d07      	cmp	r5, #7
 8024544:	d904      	bls.n	8024550 <Argus_Cfg_GetCurrentDefaultConfiguration+0x48>
 8024546:	f1a5 0343 	sub.w	r3, r5, #67	@ 0x43
 802454a:	b2db      	uxtb	r3, r3
 802454c:	2b04      	cmp	r3, #4
 802454e:	d85d      	bhi.n	802460c <Argus_Cfg_GetCurrentDefaultConfiguration+0x104>
 8024550:	1e7b      	subs	r3, r7, #1
 8024552:	b2db      	uxtb	r3, r3
 8024554:	2b04      	cmp	r3, #4
 8024556:	d90b      	bls.n	8024570 <Argus_Cfg_GetCurrentDefaultConfiguration+0x68>
 8024558:	f06f 00c5 	mvn.w	r0, #197	@ 0xc5
 802455c:	b003      	add	sp, #12
 802455e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024562:	2e00      	cmp	r6, #0
 8024564:	d1ed      	bne.n	8024542 <Argus_Cfg_GetCurrentDefaultConfiguration+0x3a>
 8024566:	f06f 0068 	mvn.w	r0, #104	@ 0x68
 802456a:	b003      	add	sp, #12
 802456c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024570:	b1fc      	cbz	r4, 80245b2 <Argus_Cfg_GetCurrentDefaultConfiguration+0xaa>
 8024572:	3c01      	subs	r4, #1
 8024574:	b2e4      	uxtb	r4, r4
 8024576:	2c04      	cmp	r4, #4
 8024578:	d827      	bhi.n	80245ca <Argus_Cfg_GetCurrentDefaultConfiguration+0xc2>
 802457a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 802457e:	2100      	movs	r1, #0
 8024580:	4640      	mov	r0, r8
 8024582:	f006 fd12 	bl	802afaa <memset>
 8024586:	4640      	mov	r0, r8
 8024588:	f888 6000 	strb.w	r6, [r8]
 802458c:	463b      	mov	r3, r7
 802458e:	f005 023f 	and.w	r2, r5, #63	@ 0x3f
 8024592:	4631      	mov	r1, r6
 8024594:	f8cd 9000 	str.w	r9, [sp]
 8024598:	f7fe fee6 	bl	8023368 <Argus_GetDefaultCfg>
 802459c:	f8cd 9000 	str.w	r9, [sp]
 80245a0:	463b      	mov	r3, r7
 80245a2:	462a      	mov	r2, r5
 80245a4:	4631      	mov	r1, r6
 80245a6:	f7ff ff35 	bl	8024414 <Argus_OnGetDefaultConfiguration>
 80245aa:	2000      	movs	r0, #0
 80245ac:	b003      	add	sp, #12
 80245ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80245b2:	2d43      	cmp	r5, #67	@ 0x43
 80245b4:	d024      	beq.n	8024600 <Argus_Cfg_GetCurrentDefaultConfiguration+0xf8>
 80245b6:	d814      	bhi.n	80245e2 <Argus_Cfg_GetCurrentDefaultConfiguration+0xda>
 80245b8:	2d02      	cmp	r5, #2
 80245ba:	d90b      	bls.n	80245d4 <Argus_Cfg_GetCurrentDefaultConfiguration+0xcc>
 80245bc:	2d04      	cmp	r5, #4
 80245be:	bf0c      	ite	eq
 80245c0:	f04f 0903 	moveq.w	r9, #3
 80245c4:	f04f 0902 	movne.w	r9, #2
 80245c8:	e7d7      	b.n	802457a <Argus_Cfg_GetCurrentDefaultConfiguration+0x72>
 80245ca:	f06f 00c4 	mvn.w	r0, #196	@ 0xc4
 80245ce:	b003      	add	sp, #12
 80245d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80245d4:	2d00      	cmp	r5, #0
 80245d6:	bf14      	ite	ne
 80245d8:	f04f 0901 	movne.w	r9, #1
 80245dc:	f04f 0902 	moveq.w	r9, #2
 80245e0:	e7cb      	b.n	802457a <Argus_Cfg_GetCurrentDefaultConfiguration+0x72>
 80245e2:	2d44      	cmp	r5, #68	@ 0x44
 80245e4:	d009      	beq.n	80245fa <Argus_Cfg_GetCurrentDefaultConfiguration+0xf2>
 80245e6:	f1a5 0345 	sub.w	r3, r5, #69	@ 0x45
 80245ea:	b2db      	uxtb	r3, r3
 80245ec:	2b03      	cmp	r3, #3
 80245ee:	bf34      	ite	cc
 80245f0:	f04f 0904 	movcc.w	r9, #4
 80245f4:	f04f 0902 	movcs.w	r9, #2
 80245f8:	e7bf      	b.n	802457a <Argus_Cfg_GetCurrentDefaultConfiguration+0x72>
 80245fa:	f04f 0905 	mov.w	r9, #5
 80245fe:	e7bc      	b.n	802457a <Argus_Cfg_GetCurrentDefaultConfiguration+0x72>
 8024600:	f04f 0904 	mov.w	r9, #4
 8024604:	e7b9      	b.n	802457a <Argus_Cfg_GetCurrentDefaultConfiguration+0x72>
 8024606:	f06f 0064 	mvn.w	r0, #100	@ 0x64
 802460a:	e7ae      	b.n	802456a <Argus_Cfg_GetCurrentDefaultConfiguration+0x62>
 802460c:	f06f 00c6 	mvn.w	r0, #198	@ 0xc6
 8024610:	e7ab      	b.n	802456a <Argus_Cfg_GetCurrentDefaultConfiguration+0x62>
 8024612:	bf00      	nop

08024614 <UpdateAPDVoltage>:
 8024614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024616:	f9b0 2028 	ldrsh.w	r2, [r0, #40]	@ 0x28
 802461a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 802461e:	429a      	cmp	r2, r3
 8024620:	b085      	sub	sp, #20
 8024622:	4684      	mov	ip, r0
 8024624:	f000 80a3 	beq.w	802476e <UpdateAPDVoltage+0x15a>
 8024628:	1110      	asrs	r0, r2, #4
 802462a:	f891 2267 	ldrb.w	r2, [r1, #615]	@ 0x267
 802462e:	f891 e290 	ldrb.w	lr, [r1, #656]	@ 0x290
 8024632:	f891 3291 	ldrb.w	r3, [r1, #657]	@ 0x291
 8024636:	fb12 f200 	smulbb	r2, r2, r0
 802463a:	2a00      	cmp	r2, #0
 802463c:	f280 8090 	bge.w	8024760 <UpdateAPDVoltage+0x14c>
 8024640:	4252      	negs	r2, r2
 8024642:	f3c2 2080 	ubfx	r0, r2, #10, #1
 8024646:	eb00 22d2 	add.w	r2, r0, r2, lsr #11
 802464a:	1a9b      	subs	r3, r3, r2
 802464c:	b2db      	uxtb	r3, r3
 802464e:	4573      	cmp	r3, lr
 8024650:	f89c 202b 	ldrb.w	r2, [ip, #43]	@ 0x2b
 8024654:	bf38      	it	cc
 8024656:	4673      	movcc	r3, lr
 8024658:	429a      	cmp	r2, r3
 802465a:	d07f      	beq.n	802475c <UpdateAPDVoltage+0x148>
 802465c:	f8dc 2020 	ldr.w	r2, [ip, #32]
 8024660:	f88c 302b 	strb.w	r3, [ip, #43]	@ 0x2b
 8024664:	ebae 0003 	sub.w	r0, lr, r3
 8024668:	fb02 f400 	mul.w	r4, r2, r0
 802466c:	2c00      	cmp	r4, #0
 802466e:	f8b1 628e 	ldrh.w	r6, [r1, #654]	@ 0x28e
 8024672:	f88d e004 	strb.w	lr, [sp, #4]
 8024676:	f88d 3007 	strb.w	r3, [sp, #7]
 802467a:	f2c0 8084 	blt.w	8024786 <UpdateAPDVoltage+0x172>
 802467e:	f3c4 32c0 	ubfx	r2, r4, #15, #1
 8024682:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 8024686:	f8dc 4024 	ldr.w	r4, [ip, #36]	@ 0x24
 802468a:	441a      	add	r2, r3
 802468c:	fb00 f404 	mul.w	r4, r0, r4
 8024690:	b2d2      	uxtb	r2, r2
 8024692:	2c00      	cmp	r4, #0
 8024694:	f88d 2005 	strb.w	r2, [sp, #5]
 8024698:	db6e      	blt.n	8024778 <UpdateAPDVoltage+0x164>
 802469a:	f3c4 30c0 	ubfx	r0, r4, #15, #1
 802469e:	eb00 4014 	add.w	r0, r0, r4, lsr #16
 80246a2:	f8b1 428c 	ldrh.w	r4, [r1, #652]	@ 0x28c
 80246a6:	f8b1 5262 	ldrh.w	r5, [r1, #610]	@ 0x262
 80246aa:	f891 7266 	ldrb.w	r7, [r1, #614]	@ 0x266
 80246ae:	f8ad 4008 	strh.w	r4, [sp, #8]
 80246b2:	1b2d      	subs	r5, r5, r4
 80246b4:	fb95 f5f6 	sdiv	r5, r5, r6
 80246b8:	4475      	add	r5, lr
 80246ba:	42bd      	cmp	r5, r7
 80246bc:	bfa8      	it	ge
 80246be:	463d      	movge	r5, r7
 80246c0:	4418      	add	r0, r3
 80246c2:	b2c0      	uxtb	r0, r0
 80246c4:	42ab      	cmp	r3, r5
 80246c6:	bfc8      	it	gt
 80246c8:	f88d 5007 	strbgt.w	r5, [sp, #7]
 80246cc:	42a8      	cmp	r0, r5
 80246ce:	f88d 0006 	strb.w	r0, [sp, #6]
 80246d2:	bfc8      	it	gt
 80246d4:	f88d 5006 	strbgt.w	r5, [sp, #6]
 80246d8:	42aa      	cmp	r2, r5
 80246da:	bfc8      	it	gt
 80246dc:	f88d 5005 	strbgt.w	r5, [sp, #5]
 80246e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80246e4:	f891 0293 	ldrb.w	r0, [r1, #659]	@ 0x293
 80246e8:	eba3 030e 	sub.w	r3, r3, lr
 80246ec:	fb06 4303 	mla	r3, r6, r3, r4
 80246f0:	f8ad 300a 	strh.w	r3, [sp, #10]
 80246f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80246f8:	eba3 030e 	sub.w	r3, r3, lr
 80246fc:	fb06 4303 	mla	r3, r6, r3, r4
 8024700:	f8ad 300c 	strh.w	r3, [sp, #12]
 8024704:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8024708:	fb06 f000 	mul.w	r0, r6, r0
 802470c:	0280      	lsls	r0, r0, #10
 802470e:	eba3 0e0e 	sub.w	lr, r3, lr
 8024712:	fb06 440e 	mla	r4, r6, lr, r4
 8024716:	2800      	cmp	r0, #0
 8024718:	f8ad 400e 	strh.w	r4, [sp, #14]
 802471c:	d03a      	beq.n	8024794 <UpdateAPDVoltage+0x180>
 802471e:	db54      	blt.n	80247ca <UpdateAPDVoltage+0x1b6>
 8024720:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8024724:	4602      	mov	r2, r0
 8024726:	da38      	bge.n	802479a <UpdateAPDVoltage+0x186>
 8024728:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 802472c:	0052      	lsls	r2, r2, #1
 802472e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8024732:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8024736:	d3f9      	bcc.n	802472c <UpdateAPDVoltage+0x118>
 8024738:	bb8b      	cbnz	r3, 802479e <UpdateAPDVoltage+0x18a>
 802473a:	43c4      	mvns	r4, r0
 802473c:	0fe4      	lsrs	r4, r4, #31
 802473e:	4264      	negs	r4, r4
 8024740:	b2a4      	uxth	r4, r4
 8024742:	ab02      	add	r3, sp, #8
 8024744:	cb03      	ldmia	r3!, {r0, r1}
 8024746:	f8dc 34c0 	ldr.w	r3, [ip, #1216]	@ 0x4c0
 802474a:	9a01      	ldr	r2, [sp, #4]
 802474c:	f8ac 402c 	strh.w	r4, [ip, #44]	@ 0x2c
 8024750:	f8c3 21a7 	str.w	r2, [r3, #423]	@ 0x1a7
 8024754:	f8c3 01ac 	str.w	r0, [r3, #428]	@ 0x1ac
 8024758:	f8c3 11b0 	str.w	r1, [r3, #432]	@ 0x1b0
 802475c:	b005      	add	sp, #20
 802475e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024760:	f3c2 2080 	ubfx	r0, r2, #10, #1
 8024764:	eb00 22d2 	add.w	r2, r0, r2, lsr #11
 8024768:	4413      	add	r3, r2
 802476a:	b2db      	uxtb	r3, r3
 802476c:	e76f      	b.n	802464e <UpdateAPDVoltage+0x3a>
 802476e:	f891 e290 	ldrb.w	lr, [r1, #656]	@ 0x290
 8024772:	f891 3291 	ldrb.w	r3, [r1, #657]	@ 0x291
 8024776:	e76a      	b.n	802464e <UpdateAPDVoltage+0x3a>
 8024778:	4264      	negs	r4, r4
 802477a:	f3c4 30c0 	ubfx	r0, r4, #15, #1
 802477e:	eb00 4014 	add.w	r0, r0, r4, lsr #16
 8024782:	4240      	negs	r0, r0
 8024784:	e78d      	b.n	80246a2 <UpdateAPDVoltage+0x8e>
 8024786:	4264      	negs	r4, r4
 8024788:	f3c4 32c0 	ubfx	r2, r4, #15, #1
 802478c:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 8024790:	4252      	negs	r2, r2
 8024792:	e778      	b.n	8024686 <UpdateAPDVoltage+0x72>
 8024794:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8024798:	e7d3      	b.n	8024742 <UpdateAPDVoltage+0x12e>
 802479a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 802479e:	2400      	movs	r4, #0
 80247a0:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 80247a4:	e000      	b.n	80247a8 <UpdateAPDVoltage+0x194>
 80247a6:	b151      	cbz	r1, 80247be <UpdateAPDVoltage+0x1aa>
 80247a8:	4291      	cmp	r1, r2
 80247aa:	bf24      	itt	cs
 80247ac:	1a89      	subcs	r1, r1, r2
 80247ae:	431c      	orrcs	r4, r3
 80247b0:	085b      	lsrs	r3, r3, #1
 80247b2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80247b6:	d1f6      	bne.n	80247a6 <UpdateAPDVoltage+0x192>
 80247b8:	428a      	cmp	r2, r1
 80247ba:	bf98      	it	ls
 80247bc:	3401      	addls	r4, #1
 80247be:	2800      	cmp	r0, #0
 80247c0:	db0e      	blt.n	80247e0 <UpdateAPDVoltage+0x1cc>
 80247c2:	2c00      	cmp	r4, #0
 80247c4:	dbe6      	blt.n	8024794 <UpdateAPDVoltage+0x180>
 80247c6:	b2a4      	uxth	r4, r4
 80247c8:	e7bb      	b.n	8024742 <UpdateAPDVoltage+0x12e>
 80247ca:	4242      	negs	r2, r0
 80247cc:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80247d0:	d3aa      	bcc.n	8024728 <UpdateAPDVoltage+0x114>
 80247d2:	2a00      	cmp	r2, #0
 80247d4:	dae1      	bge.n	802479a <UpdateAPDVoltage+0x186>
 80247d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80247da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80247de:	e7de      	b.n	802479e <UpdateAPDVoltage+0x18a>
 80247e0:	4264      	negs	r4, r4
 80247e2:	b2a4      	uxth	r4, r4
 80247e4:	e7ad      	b.n	8024742 <UpdateAPDVoltage+0x12e>
 80247e6:	bf00      	nop

080247e8 <Argus_Cal_Init>:
 80247e8:	b538      	push	{r3, r4, r5, lr}
 80247ea:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 80247ee:	4604      	mov	r4, r0
 80247f0:	460d      	mov	r5, r1
 80247f2:	2100      	movs	r1, #0
 80247f4:	f006 fbd9 	bl	802afaa <memset>
 80247f8:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80247fc:	f8c4 54c0 	str.w	r5, [r4, #1216]	@ 0x4c0
 8024800:	8523      	strh	r3, [r4, #40]	@ 0x28
 8024802:	bd38      	pop	{r3, r4, r5, pc}

08024804 <Argus_Cal_ReadEEPROMData>:
 8024804:	f500 71fa 	add.w	r1, r0, #500	@ 0x1f4
 8024808:	f8d0 04c0 	ldr.w	r0, [r0, #1216]	@ 0x4c0
 802480c:	f7fd bea4 	b.w	8022558 <Argus_Dev_ReadEEPROM>

08024810 <Argus_Cal_ReadNVMData>:
 8024810:	b530      	push	{r4, r5, lr}
 8024812:	b083      	sub	sp, #12
 8024814:	4604      	mov	r4, r0
 8024816:	f8d0 04c0 	ldr.w	r0, [r0, #1216]	@ 0x4c0
 802481a:	9101      	str	r1, [sp, #4]
 802481c:	f7fd fa8c 	bl	8021d38 <Argus_Dev_GetModule>
 8024820:	4605      	mov	r5, r0
 8024822:	f8d4 04c0 	ldr.w	r0, [r4, #1216]	@ 0x4c0
 8024826:	f7fd fa89 	bl	8021d3c <Argus_Dev_GetChipID>
 802482a:	9a01      	ldr	r2, [sp, #4]
 802482c:	4601      	mov	r1, r0
 802482e:	4628      	mov	r0, r5
 8024830:	b003      	add	sp, #12
 8024832:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024836:	f004 b9b5 	b.w	8028ba4 <Argus_Cal_ReadCalibrationFromNVM>
 802483a:	bf00      	nop

0802483c <Argus_Cal_GetCalibration>:
 802483c:	460b      	mov	r3, r1
 802483e:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8024842:	f500 7101 	add.w	r1, r0, #516	@ 0x204
 8024846:	4618      	mov	r0, r3
 8024848:	f006 bc47 	b.w	802b0da <memcpy>

0802484c <Argus_Cal_GetCalibrationPtr>:
 802484c:	f500 7001 	add.w	r0, r0, #516	@ 0x204
 8024850:	4770      	bx	lr
 8024852:	bf00      	nop

08024854 <Argus_Cal_ComposeCalibrationData>:
 8024854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024856:	4603      	mov	r3, r0
 8024858:	b087      	sub	sp, #28
 802485a:	460c      	mov	r4, r1
 802485c:	4668      	mov	r0, sp
 802485e:	f503 71fa 	add.w	r1, r3, #500	@ 0x1f4
 8024862:	f7ef fff7 	bl	8014854 <EEPROM_Decode>
 8024866:	2800      	cmp	r0, #0
 8024868:	f2c0 80c8 	blt.w	80249fc <Argus_Cal_ComposeCalibrationData+0x1a8>
 802486c:	f8d4 3288 	ldr.w	r3, [r4, #648]	@ 0x288
 8024870:	07de      	lsls	r6, r3, #31
 8024872:	d407      	bmi.n	8024884 <Argus_Cal_ComposeCalibrationData+0x30>
 8024874:	f99d 100e 	ldrsb.w	r1, [sp, #14]
 8024878:	f8b4 225e 	ldrh.w	r2, [r4, #606]	@ 0x25e
 802487c:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 8024880:	f8a4 228c 	strh.w	r2, [r4, #652]	@ 0x28c
 8024884:	079d      	lsls	r5, r3, #30
 8024886:	d407      	bmi.n	8024898 <Argus_Cal_ComposeCalibrationData+0x44>
 8024888:	f99d 100f 	ldrsb.w	r1, [sp, #15]
 802488c:	f8b4 2260 	ldrh.w	r2, [r4, #608]	@ 0x260
 8024890:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8024894:	f8a4 228e 	strh.w	r2, [r4, #654]	@ 0x28e
 8024898:	0759      	lsls	r1, r3, #29
 802489a:	d406      	bmi.n	80248aa <Argus_Cal_ComposeCalibrationData+0x56>
 802489c:	f894 2264 	ldrb.w	r2, [r4, #612]	@ 0x264
 80248a0:	f89d 1009 	ldrb.w	r1, [sp, #9]
 80248a4:	440a      	add	r2, r1
 80248a6:	f884 2290 	strb.w	r2, [r4, #656]	@ 0x290
 80248aa:	071a      	lsls	r2, r3, #28
 80248ac:	d406      	bmi.n	80248bc <Argus_Cal_ComposeCalibrationData+0x68>
 80248ae:	f894 2265 	ldrb.w	r2, [r4, #613]	@ 0x265
 80248b2:	f89d 100a 	ldrb.w	r1, [sp, #10]
 80248b6:	440a      	add	r2, r1
 80248b8:	f884 2291 	strb.w	r2, [r4, #657]	@ 0x291
 80248bc:	06df      	lsls	r7, r3, #27
 80248be:	d40b      	bmi.n	80248d8 <Argus_Cal_ComposeCalibrationData+0x84>
 80248c0:	f89d 2000 	ldrb.w	r2, [sp]
 80248c4:	2a01      	cmp	r2, #1
 80248c6:	f000 809b 	beq.w	8024a00 <Argus_Cal_ComposeCalibrationData+0x1ac>
 80248ca:	f894 2268 	ldrb.w	r2, [r4, #616]	@ 0x268
 80248ce:	f89d 100b 	ldrb.w	r1, [sp, #11]
 80248d2:	440a      	add	r2, r1
 80248d4:	f884 2292 	strb.w	r2, [r4, #658]	@ 0x292
 80248d8:	069e      	lsls	r6, r3, #26
 80248da:	d406      	bmi.n	80248ea <Argus_Cal_ComposeCalibrationData+0x96>
 80248dc:	f894 2269 	ldrb.w	r2, [r4, #617]	@ 0x269
 80248e0:	f89d 100d 	ldrb.w	r1, [sp, #13]
 80248e4:	440a      	add	r2, r1
 80248e6:	f884 2293 	strb.w	r2, [r4, #659]	@ 0x293
 80248ea:	065d      	lsls	r5, r3, #25
 80248ec:	d408      	bmi.n	8024900 <Argus_Cal_ComposeCalibrationData+0xac>
 80248ee:	f99d 200c 	ldrsb.w	r2, [sp, #12]
 80248f2:	f8b4 126a 	ldrh.w	r1, [r4, #618]	@ 0x26a
 80248f6:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 80248fa:	440a      	add	r2, r1
 80248fc:	f8a4 2294 	strh.w	r2, [r4, #660]	@ 0x294
 8024900:	0559      	lsls	r1, r3, #21
 8024902:	d420      	bmi.n	8024946 <Argus_Cal_ComposeCalibrationData+0xf2>
 8024904:	f99d 1010 	ldrsb.w	r1, [sp, #16]
 8024908:	f504 721d 	add.w	r2, r4, #628	@ 0x274
 802490c:	4322      	orrs	r2, r4
 802490e:	eb01 1141 	add.w	r1, r1, r1, lsl #5
 8024912:	f012 0207 	ands.w	r2, r2, #7
 8024916:	b289      	uxth	r1, r1
 8024918:	d17e      	bne.n	8024a18 <Argus_Cal_ComposeCalibrationData+0x1c4>
 802491a:	e9d4 659d 	ldrd	r6, r5, [r4, #628]	@ 0x274
 802491e:	eb01 0c06 	add.w	ip, r1, r6
 8024922:	4617      	mov	r7, r2
 8024924:	eb01 4616 	add.w	r6, r1, r6, lsr #16
 8024928:	f36c 020f 	bfi	r2, ip, #0, #16
 802492c:	f366 421f 	bfi	r2, r6, #16, #16
 8024930:	f8c4 22a0 	str.w	r2, [r4, #672]	@ 0x2a0
 8024934:	194a      	adds	r2, r1, r5
 8024936:	f362 070f 	bfi	r7, r2, #0, #16
 802493a:	eb01 4115 	add.w	r1, r1, r5, lsr #16
 802493e:	f361 471f 	bfi	r7, r1, #16, #16
 8024942:	f8c4 72a4 	str.w	r7, [r4, #676]	@ 0x2a4
 8024946:	041a      	lsls	r2, r3, #16
 8024948:	d407      	bmi.n	802495a <Argus_Cal_ComposeCalibrationData+0x106>
 802494a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 802494e:	f8b4 227c 	ldrh.w	r2, [r4, #636]	@ 0x27c
 8024952:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8024956:	f8a4 229a 	strh.w	r2, [r4, #666]	@ 0x29a
 802495a:	051f      	lsls	r7, r3, #20
 802495c:	bf5c      	itt	pl
 802495e:	f89d 2001 	ldrbpl.w	r2, [sp, #1]
 8024962:	f884 2296 	strbpl.w	r2, [r4, #662]	@ 0x296
 8024966:	04de      	lsls	r6, r3, #19
 8024968:	bf5c      	itt	pl
 802496a:	f89d 2002 	ldrbpl.w	r2, [sp, #2]
 802496e:	f884 2297 	strbpl.w	r2, [r4, #663]	@ 0x297
 8024972:	049d      	lsls	r5, r3, #18
 8024974:	d40b      	bmi.n	802498e <Argus_Cal_ComposeCalibrationData+0x13a>
 8024976:	f99d 2003 	ldrsb.w	r2, [sp, #3]
 802497a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 802497e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8024982:	ebc2 1282 	rsb	r2, r2, r2, lsl #6
 8024986:	f5a2 4200 	sub.w	r2, r2, #32768	@ 0x8000
 802498a:	f8a4 2298 	strh.w	r2, [r4, #664]	@ 0x298
 802498e:	2b00      	cmp	r3, #0
 8024990:	db07      	blt.n	80249a2 <Argus_Cal_ComposeCalibrationData+0x14e>
 8024992:	f99d 2007 	ldrsb.w	r2, [sp, #7]
 8024996:	8861      	ldrh	r1, [r4, #2]
 8024998:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 802499c:	440a      	add	r2, r1
 802499e:	f8a4 22a8 	strh.w	r2, [r4, #680]	@ 0x2a8
 80249a2:	03d9      	lsls	r1, r3, #15
 80249a4:	bf5c      	itt	pl
 80249a6:	f89d 2008 	ldrbpl.w	r2, [sp, #8]
 80249aa:	f884 229c 	strbpl.w	r2, [r4, #668]	@ 0x29c
 80249ae:	045a      	lsls	r2, r3, #17
 80249b0:	d412      	bmi.n	80249d8 <Argus_Cal_ComposeCalibrationData+0x184>
 80249b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80249b6:	8b66      	ldrh	r6, [r4, #26]
 80249b8:	7ea1      	ldrb	r1, [r4, #26]
 80249ba:	7ee5      	ldrb	r5, [r4, #27]
 80249bc:	f8a4 629d 	strh.w	r6, [r4, #669]	@ 0x29d
 80249c0:	3a01      	subs	r2, #1
 80249c2:	2a06      	cmp	r2, #6
 80249c4:	d808      	bhi.n	80249d8 <Argus_Cal_ComposeCalibrationData+0x184>
 80249c6:	e8df f002 	tbb	[pc, r2]
 80249ca:	4004      	.short	0x4004
 80249cc:	564f4b44 	.word	0x564f4b44
 80249d0:	3c          	.byte	0x3c
 80249d1:	00          	.byte	0x00
 80249d2:	3d01      	subs	r5, #1
 80249d4:	f884 529e 	strb.w	r5, [r4, #670]	@ 0x29e
 80249d8:	039b      	lsls	r3, r3, #14
 80249da:	d40f      	bmi.n	80249fc <Argus_Cal_ComposeCalibrationData+0x1a8>
 80249dc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80249e0:	f8b4 2226 	ldrh.w	r2, [r4, #550]	@ 0x226
 80249e4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80249e8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80249ec:	f8b4 3228 	ldrh.w	r3, [r4, #552]	@ 0x228
 80249f0:	f8a4 22aa 	strh.w	r2, [r4, #682]	@ 0x2aa
 80249f4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80249f8:	f8a4 32ac 	strh.w	r3, [r4, #684]	@ 0x2ac
 80249fc:	b007      	add	sp, #28
 80249fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024a00:	f89d 100b 	ldrb.w	r1, [sp, #11]
 8024a04:	f894 2268 	ldrb.w	r2, [r4, #616]	@ 0x268
 8024a08:	069e      	lsls	r6, r3, #26
 8024a0a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8024a0e:	f884 2292 	strb.w	r2, [r4, #658]	@ 0x292
 8024a12:	f53f af6a 	bmi.w	80248ea <Argus_Cal_ComposeCalibrationData+0x96>
 8024a16:	e761      	b.n	80248dc <Argus_Cal_ComposeCalibrationData+0x88>
 8024a18:	f8b4 2274 	ldrh.w	r2, [r4, #628]	@ 0x274
 8024a1c:	440a      	add	r2, r1
 8024a1e:	f8a4 22a0 	strh.w	r2, [r4, #672]	@ 0x2a0
 8024a22:	f8b4 2276 	ldrh.w	r2, [r4, #630]	@ 0x276
 8024a26:	440a      	add	r2, r1
 8024a28:	f8a4 22a2 	strh.w	r2, [r4, #674]	@ 0x2a2
 8024a2c:	f8b4 2278 	ldrh.w	r2, [r4, #632]	@ 0x278
 8024a30:	440a      	add	r2, r1
 8024a32:	f8a4 22a4 	strh.w	r2, [r4, #676]	@ 0x2a4
 8024a36:	f8b4 227a 	ldrh.w	r2, [r4, #634]	@ 0x27a
 8024a3a:	4411      	add	r1, r2
 8024a3c:	f8a4 12a6 	strh.w	r1, [r4, #678]	@ 0x2a6
 8024a40:	e781      	b.n	8024946 <Argus_Cal_ComposeCalibrationData+0xf2>
 8024a42:	3901      	subs	r1, #1
 8024a44:	f884 129d 	strb.w	r1, [r4, #669]	@ 0x29d
 8024a48:	e7c6      	b.n	80249d8 <Argus_Cal_ComposeCalibrationData+0x184>
 8024a4a:	3501      	adds	r5, #1
 8024a4c:	f884 529e 	strb.w	r5, [r4, #670]	@ 0x29e
 8024a50:	e7c2      	b.n	80249d8 <Argus_Cal_ComposeCalibrationData+0x184>
 8024a52:	3101      	adds	r1, #1
 8024a54:	3d01      	subs	r5, #1
 8024a56:	f884 129d 	strb.w	r1, [r4, #669]	@ 0x29d
 8024a5a:	f884 529e 	strb.w	r5, [r4, #670]	@ 0x29e
 8024a5e:	e7bb      	b.n	80249d8 <Argus_Cal_ComposeCalibrationData+0x184>
 8024a60:	3101      	adds	r1, #1
 8024a62:	f884 129d 	strb.w	r1, [r4, #669]	@ 0x29d
 8024a66:	e7b7      	b.n	80249d8 <Argus_Cal_ComposeCalibrationData+0x184>
 8024a68:	3101      	adds	r1, #1
 8024a6a:	3501      	adds	r5, #1
 8024a6c:	f884 129d 	strb.w	r1, [r4, #669]	@ 0x29d
 8024a70:	f884 529e 	strb.w	r5, [r4, #670]	@ 0x29e
 8024a74:	e7b0      	b.n	80249d8 <Argus_Cal_ComposeCalibrationData+0x184>
 8024a76:	3901      	subs	r1, #1
 8024a78:	3d01      	subs	r5, #1
 8024a7a:	f884 129d 	strb.w	r1, [r4, #669]	@ 0x29d
 8024a7e:	f884 529e 	strb.w	r5, [r4, #670]	@ 0x29e
 8024a82:	e7a9      	b.n	80249d8 <Argus_Cal_ComposeCalibrationData+0x184>

08024a84 <Argus_Cal_CheckCalibration>:
 8024a84:	b508      	push	{r3, lr}
 8024a86:	f890 129d 	ldrb.w	r1, [r0, #669]	@ 0x29d
 8024a8a:	2907      	cmp	r1, #7
 8024a8c:	d857      	bhi.n	8024b3e <Argus_Cal_CheckCalibration+0xba>
 8024a8e:	f890 129e 	ldrb.w	r1, [r0, #670]	@ 0x29e
 8024a92:	2903      	cmp	r1, #3
 8024a94:	d84d      	bhi.n	8024b32 <Argus_Cal_CheckCalibration+0xae>
 8024a96:	f890 3292 	ldrb.w	r3, [r0, #658]	@ 0x292
 8024a9a:	2b00      	cmp	r3, #0
 8024a9c:	d05b      	beq.n	8024b56 <Argus_Cal_CheckCalibration+0xd2>
 8024a9e:	f890 3293 	ldrb.w	r3, [r0, #659]	@ 0x293
 8024aa2:	2b00      	cmp	r3, #0
 8024aa4:	d051      	beq.n	8024b4a <Argus_Cal_CheckCalibration+0xc6>
 8024aa6:	f890 1266 	ldrb.w	r1, [r0, #614]	@ 0x266
 8024aaa:	293f      	cmp	r1, #63	@ 0x3f
 8024aac:	d85f      	bhi.n	8024b6e <Argus_Cal_CheckCalibration+0xea>
 8024aae:	f990 1272 	ldrsb.w	r1, [r0, #626]	@ 0x272
 8024ab2:	f990 2273 	ldrsb.w	r2, [r0, #627]	@ 0x273
 8024ab6:	4291      	cmp	r1, r2
 8024ab8:	da53      	bge.n	8024b62 <Argus_Cal_CheckCalibration+0xde>
 8024aba:	f890 2265 	ldrb.w	r2, [r0, #613]	@ 0x265
 8024abe:	2a3f      	cmp	r2, #63	@ 0x3f
 8024ac0:	d861      	bhi.n	8024b86 <Argus_Cal_CheckCalibration+0x102>
 8024ac2:	f890 1264 	ldrb.w	r1, [r0, #612]	@ 0x264
 8024ac6:	428a      	cmp	r2, r1
 8024ac8:	d957      	bls.n	8024b7a <Argus_Cal_CheckCalibration+0xf6>
 8024aca:	f9b0 325e 	ldrsh.w	r3, [r0, #606]	@ 0x25e
 8024ace:	f8b0 125e 	ldrh.w	r1, [r0, #606]	@ 0x25e
 8024ad2:	2b00      	cmp	r3, #0
 8024ad4:	da1f      	bge.n	8024b16 <Argus_Cal_CheckCalibration+0x92>
 8024ad6:	f890 2291 	ldrb.w	r2, [r0, #657]	@ 0x291
 8024ada:	2a3f      	cmp	r2, #63	@ 0x3f
 8024adc:	d85a      	bhi.n	8024b94 <Argus_Cal_CheckCalibration+0x110>
 8024ade:	f890 1290 	ldrb.w	r1, [r0, #656]	@ 0x290
 8024ae2:	428a      	cmp	r2, r1
 8024ae4:	d95d      	bls.n	8024ba2 <Argus_Cal_CheckCalibration+0x11e>
 8024ae6:	f9b0 328c 	ldrsh.w	r3, [r0, #652]	@ 0x28c
 8024aea:	f8b0 128c 	ldrh.w	r1, [r0, #652]	@ 0x28c
 8024aee:	2b00      	cmp	r3, #0
 8024af0:	da18      	bge.n	8024b24 <Argus_Cal_CheckCalibration+0xa0>
 8024af2:	f8b0 328e 	ldrh.w	r3, [r0, #654]	@ 0x28e
 8024af6:	2b00      	cmp	r3, #0
 8024af8:	d059      	beq.n	8024bae <Argus_Cal_CheckCalibration+0x12a>
 8024afa:	f8b0 3282 	ldrh.w	r3, [r0, #642]	@ 0x282
 8024afe:	2b00      	cmp	r3, #0
 8024b00:	d05b      	beq.n	8024bba <Argus_Cal_CheckCalibration+0x136>
 8024b02:	7e43      	ldrb	r3, [r0, #25]
 8024b04:	2000      	movs	r0, #0
 8024b06:	b103      	cbz	r3, 8024b0a <Argus_Cal_CheckCalibration+0x86>
 8024b08:	bd08      	pop	{r3, pc}
 8024b0a:	482f      	ldr	r0, [pc, #188]	@ (8024bc8 <Argus_Cal_CheckCalibration+0x144>)
 8024b0c:	f7e1 fcfe 	bl	800650c <print>
 8024b10:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8024b14:	bd08      	pop	{r3, pc}
 8024b16:	0909      	lsrs	r1, r1, #4
 8024b18:	482c      	ldr	r0, [pc, #176]	@ (8024bcc <Argus_Cal_CheckCalibration+0x148>)
 8024b1a:	f7e1 fcf7 	bl	800650c <print>
 8024b1e:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8024b22:	bd08      	pop	{r3, pc}
 8024b24:	0909      	lsrs	r1, r1, #4
 8024b26:	482a      	ldr	r0, [pc, #168]	@ (8024bd0 <Argus_Cal_CheckCalibration+0x14c>)
 8024b28:	f7e1 fcf0 	bl	800650c <print>
 8024b2c:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8024b30:	bd08      	pop	{r3, pc}
 8024b32:	4828      	ldr	r0, [pc, #160]	@ (8024bd4 <Argus_Cal_CheckCalibration+0x150>)
 8024b34:	f7e1 fcea 	bl	800650c <print>
 8024b38:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8024b3c:	bd08      	pop	{r3, pc}
 8024b3e:	4826      	ldr	r0, [pc, #152]	@ (8024bd8 <Argus_Cal_CheckCalibration+0x154>)
 8024b40:	f7e1 fce4 	bl	800650c <print>
 8024b44:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8024b48:	bd08      	pop	{r3, pc}
 8024b4a:	4824      	ldr	r0, [pc, #144]	@ (8024bdc <Argus_Cal_CheckCalibration+0x158>)
 8024b4c:	f7e1 fcde 	bl	800650c <print>
 8024b50:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8024b54:	bd08      	pop	{r3, pc}
 8024b56:	4822      	ldr	r0, [pc, #136]	@ (8024be0 <Argus_Cal_CheckCalibration+0x15c>)
 8024b58:	f7e1 fcd8 	bl	800650c <print>
 8024b5c:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8024b60:	bd08      	pop	{r3, pc}
 8024b62:	4820      	ldr	r0, [pc, #128]	@ (8024be4 <Argus_Cal_CheckCalibration+0x160>)
 8024b64:	f7e1 fcd2 	bl	800650c <print>
 8024b68:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8024b6c:	bd08      	pop	{r3, pc}
 8024b6e:	481e      	ldr	r0, [pc, #120]	@ (8024be8 <Argus_Cal_CheckCalibration+0x164>)
 8024b70:	f7e1 fccc 	bl	800650c <print>
 8024b74:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8024b78:	bd08      	pop	{r3, pc}
 8024b7a:	481c      	ldr	r0, [pc, #112]	@ (8024bec <Argus_Cal_CheckCalibration+0x168>)
 8024b7c:	f7e1 fcc6 	bl	800650c <print>
 8024b80:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8024b84:	bd08      	pop	{r3, pc}
 8024b86:	4611      	mov	r1, r2
 8024b88:	4819      	ldr	r0, [pc, #100]	@ (8024bf0 <Argus_Cal_CheckCalibration+0x16c>)
 8024b8a:	f7e1 fcbf 	bl	800650c <print>
 8024b8e:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8024b92:	bd08      	pop	{r3, pc}
 8024b94:	4611      	mov	r1, r2
 8024b96:	4817      	ldr	r0, [pc, #92]	@ (8024bf4 <Argus_Cal_CheckCalibration+0x170>)
 8024b98:	f7e1 fcb8 	bl	800650c <print>
 8024b9c:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8024ba0:	bd08      	pop	{r3, pc}
 8024ba2:	4815      	ldr	r0, [pc, #84]	@ (8024bf8 <Argus_Cal_CheckCalibration+0x174>)
 8024ba4:	f7e1 fcb2 	bl	800650c <print>
 8024ba8:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8024bac:	bd08      	pop	{r3, pc}
 8024bae:	4813      	ldr	r0, [pc, #76]	@ (8024bfc <Argus_Cal_CheckCalibration+0x178>)
 8024bb0:	f7e1 fcac 	bl	800650c <print>
 8024bb4:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8024bb8:	bd08      	pop	{r3, pc}
 8024bba:	4811      	ldr	r0, [pc, #68]	@ (8024c00 <Argus_Cal_CheckCalibration+0x17c>)
 8024bbc:	f7e1 fca6 	bl	800650c <print>
 8024bc0:	f06f 0065 	mvn.w	r0, #101	@ 0x65
 8024bc4:	bd08      	pop	{r3, pc}
 8024bc6:	bf00      	nop
 8024bc8:	08030bec 	.word	0x08030bec
 8024bcc:	08030aa8 	.word	0x08030aa8
 8024bd0:	08030b50 	.word	0x08030b50
 8024bd4:	0803090c 	.word	0x0803090c
 8024bd8:	080308dc 	.word	0x080308dc
 8024bdc:	0803096c 	.word	0x0803096c
 8024be0:	0803093c 	.word	0x0803093c
 8024be4:	080309d0 	.word	0x080309d0
 8024be8:	0803099c 	.word	0x0803099c
 8024bec:	08030a70 	.word	0x08030a70
 8024bf0:	08030a38 	.word	0x08030a38
 8024bf4:	08030ae0 	.word	0x08030ae0
 8024bf8:	08030b18 	.word	0x08030b18
 8024bfc:	08030b88 	.word	0x08030b88
 8024c00:	08030bbc 	.word	0x08030bbc

08024c04 <Argus_Cal_CopyCalibration>:
 8024c04:	b508      	push	{r3, lr}
 8024c06:	f500 7301 	add.w	r3, r0, #516	@ 0x204
 8024c0a:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8024c0e:	4618      	mov	r0, r3
 8024c10:	f006 fa63 	bl	802b0da <memcpy>
 8024c14:	bd08      	pop	{r3, pc}
 8024c16:	bf00      	nop

08024c18 <Argus_Cal_GetGainValues>:
 8024c18:	b570      	push	{r4, r5, r6, lr}
 8024c1a:	4605      	mov	r5, r0
 8024c1c:	4608      	mov	r0, r1
 8024c1e:	f005 fae9 	bl	802a1f4 <fp_log16>
 8024c22:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
 8024c26:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
 8024c2a:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 8024c2e:	f240 8093 	bls.w	8024d58 <Argus_Cal_GetGainValues+0x140>
 8024c32:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8024c36:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8024c3a:	4694      	mov	ip, r2
 8024c3c:	0052      	lsls	r2, r2, #1
 8024c3e:	428a      	cmp	r2, r1
 8024c40:	461c      	mov	r4, r3
 8024c42:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8024c46:	d3f8      	bcc.n	8024c3a <Argus_Cal_GetGainValues+0x22>
 8024c48:	2b00      	cmp	r3, #0
 8024c4a:	d17b      	bne.n	8024d44 <Argus_Cal_GetGainValues+0x12c>
 8024c4c:	2800      	cmp	r0, #0
 8024c4e:	bfac      	ite	ge
 8024c50:	f06f 4000 	mvnge.w	r0, #2147483648	@ 0x80000000
 8024c54:	f04f 4000 	movlt.w	r0, #2147483648	@ 0x80000000
 8024c58:	f005 fa1a 	bl	802a090 <fp_exp16>
 8024c5c:	f44f 03c8 	mov.w	r3, #6553600	@ 0x640000
 8024c60:	2800      	cmp	r0, #0
 8024c62:	60eb      	str	r3, [r5, #12]
 8024c64:	4684      	mov	ip, r0
 8024c66:	f000 8094 	beq.w	8024d92 <Argus_Cal_GetGainValues+0x17a>
 8024c6a:	db48      	blt.n	8024cfe <Argus_Cal_GetGainValues+0xe6>
 8024c6c:	f5b0 0fc8 	cmp.w	r0, #6553600	@ 0x640000
 8024c70:	4601      	mov	r1, r0
 8024c72:	f080 8114 	bcs.w	8024e9e <Argus_Cal_GetGainValues+0x286>
 8024c76:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8024c7a:	0049      	lsls	r1, r1, #1
 8024c7c:	f5b1 0fc8 	cmp.w	r1, #6553600	@ 0x640000
 8024c80:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8024c84:	d3f9      	bcc.n	8024c7a <Argus_Cal_GetGainValues+0x62>
 8024c86:	2a00      	cmp	r2, #0
 8024c88:	d144      	bne.n	8024d14 <Argus_Cal_GetGainValues+0xfc>
 8024c8a:	2800      	cmp	r0, #0
 8024c8c:	f2c0 810f 	blt.w	8024eae <Argus_Cal_GetGainValues+0x296>
 8024c90:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8024c94:	461e      	mov	r6, r3
 8024c96:	60ab      	str	r3, [r5, #8]
 8024c98:	2800      	cmp	r0, #0
 8024c9a:	f280 80eb 	bge.w	8024e74 <Argus_Cal_GetGainValues+0x25c>
 8024c9e:	4241      	negs	r1, r0
 8024ca0:	4299      	cmp	r1, r3
 8024ca2:	bf28      	it	cs
 8024ca4:	f44f 3480 	movcs.w	r4, #65536	@ 0x10000
 8024ca8:	d279      	bcs.n	8024d9e <Argus_Cal_GetGainValues+0x186>
 8024caa:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8024cae:	0049      	lsls	r1, r1, #1
 8024cb0:	4299      	cmp	r1, r3
 8024cb2:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8024cb6:	d3fa      	bcc.n	8024cae <Argus_Cal_GetGainValues+0x96>
 8024cb8:	2c00      	cmp	r4, #0
 8024cba:	d170      	bne.n	8024d9e <Argus_Cal_GetGainValues+0x186>
 8024cbc:	ea90 0f06 	teq	r0, r6
 8024cc0:	f100 80fb 	bmi.w	8024eba <Argus_Cal_GetGainValues+0x2a2>
 8024cc4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8024cc8:	461c      	mov	r4, r3
 8024cca:	606b      	str	r3, [r5, #4]
 8024ccc:	461a      	mov	r2, r3
 8024cce:	2800      	cmp	r0, #0
 8024cd0:	f2c0 8082 	blt.w	8024dd8 <Argus_Cal_GetGainValues+0x1c0>
 8024cd4:	4290      	cmp	r0, r2
 8024cd6:	f080 80e5 	bcs.w	8024ea4 <Argus_Cal_GetGainValues+0x28c>
 8024cda:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8024cde:	0040      	lsls	r0, r0, #1
 8024ce0:	4290      	cmp	r0, r2
 8024ce2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8024ce6:	d3fa      	bcc.n	8024cde <Argus_Cal_GetGainValues+0xc6>
 8024ce8:	2b00      	cmp	r3, #0
 8024cea:	d17c      	bne.n	8024de6 <Argus_Cal_GetGainValues+0x1ce>
 8024cec:	ea9c 0f04 	teq	ip, r4
 8024cf0:	bf54      	ite	pl
 8024cf2:	f06f 4100 	mvnpl.w	r1, #2147483648	@ 0x80000000
 8024cf6:	f04f 4100 	movmi.w	r1, #2147483648	@ 0x80000000
 8024cfa:	6029      	str	r1, [r5, #0]
 8024cfc:	bd70      	pop	{r4, r5, r6, pc}
 8024cfe:	4241      	negs	r1, r0
 8024d00:	f5b1 0fc8 	cmp.w	r1, #6553600	@ 0x640000
 8024d04:	d3b7      	bcc.n	8024c76 <Argus_Cal_GetGainValues+0x5e>
 8024d06:	2900      	cmp	r1, #0
 8024d08:	f280 80c9 	bge.w	8024e9e <Argus_Cal_GetGainValues+0x286>
 8024d0c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8024d10:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8024d14:	2300      	movs	r3, #0
 8024d16:	f44f 04c8 	mov.w	r4, #6553600	@ 0x640000
 8024d1a:	e000      	b.n	8024d1e <Argus_Cal_GetGainValues+0x106>
 8024d1c:	b154      	cbz	r4, 8024d34 <Argus_Cal_GetGainValues+0x11c>
 8024d1e:	428c      	cmp	r4, r1
 8024d20:	bf24      	itt	cs
 8024d22:	1a64      	subcs	r4, r4, r1
 8024d24:	4313      	orrcs	r3, r2
 8024d26:	0852      	lsrs	r2, r2, #1
 8024d28:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8024d2c:	d1f6      	bne.n	8024d1c <Argus_Cal_GetGainValues+0x104>
 8024d2e:	428c      	cmp	r4, r1
 8024d30:	bf28      	it	cs
 8024d32:	3301      	addcs	r3, #1
 8024d34:	2800      	cmp	r0, #0
 8024d36:	f2c0 8094 	blt.w	8024e62 <Argus_Cal_GetGainValues+0x24a>
 8024d3a:	2b00      	cmp	r3, #0
 8024d3c:	461e      	mov	r6, r3
 8024d3e:	dba7      	blt.n	8024c90 <Argus_Cal_GetGainValues+0x78>
 8024d40:	60ab      	str	r3, [r5, #8]
 8024d42:	e7a9      	b.n	8024c98 <Argus_Cal_GetGainValues+0x80>
 8024d44:	2a00      	cmp	r2, #0
 8024d46:	da0e      	bge.n	8024d66 <Argus_Cal_GetGainValues+0x14e>
 8024d48:	428a      	cmp	r2, r1
 8024d4a:	f040 8083 	bne.w	8024e54 <Argus_Cal_GetGainValues+0x23c>
 8024d4e:	2800      	cmp	r0, #0
 8024d50:	461c      	mov	r4, r3
 8024d52:	da18      	bge.n	8024d86 <Argus_Cal_GetGainValues+0x16e>
 8024d54:	4260      	negs	r0, r4
 8024d56:	e77f      	b.n	8024c58 <Argus_Cal_GetGainValues+0x40>
 8024d58:	2900      	cmp	r1, #0
 8024d5a:	f000 80b4 	beq.w	8024ec6 <Argus_Cal_GetGainValues+0x2ae>
 8024d5e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8024d62:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8024d66:	2400      	movs	r4, #0
 8024d68:	e000      	b.n	8024d6c <Argus_Cal_GetGainValues+0x154>
 8024d6a:	b151      	cbz	r1, 8024d82 <Argus_Cal_GetGainValues+0x16a>
 8024d6c:	428a      	cmp	r2, r1
 8024d6e:	bf9c      	itt	ls
 8024d70:	1a89      	subls	r1, r1, r2
 8024d72:	431c      	orrls	r4, r3
 8024d74:	085b      	lsrs	r3, r3, #1
 8024d76:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8024d7a:	d1f6      	bne.n	8024d6a <Argus_Cal_GetGainValues+0x152>
 8024d7c:	428a      	cmp	r2, r1
 8024d7e:	d800      	bhi.n	8024d82 <Argus_Cal_GetGainValues+0x16a>
 8024d80:	3401      	adds	r4, #1
 8024d82:	2800      	cmp	r0, #0
 8024d84:	dbe6      	blt.n	8024d54 <Argus_Cal_GetGainValues+0x13c>
 8024d86:	2c00      	cmp	r4, #0
 8024d88:	bfac      	ite	ge
 8024d8a:	4620      	movge	r0, r4
 8024d8c:	f06f 4000 	mvnlt.w	r0, #2147483648	@ 0x80000000
 8024d90:	e762      	b.n	8024c58 <Argus_Cal_GetGainValues+0x40>
 8024d92:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8024d96:	e9c5 1101 	strd	r1, r1, [r5, #4]
 8024d9a:	6029      	str	r1, [r5, #0]
 8024d9c:	bd70      	pop	{r4, r5, r6, pc}
 8024d9e:	2900      	cmp	r1, #0
 8024da0:	db3c      	blt.n	8024e1c <Argus_Cal_GetGainValues+0x204>
 8024da2:	461a      	mov	r2, r3
 8024da4:	b153      	cbz	r3, 8024dbc <Argus_Cal_GetGainValues+0x1a4>
 8024da6:	2200      	movs	r2, #0
 8024da8:	e000      	b.n	8024dac <Argus_Cal_GetGainValues+0x194>
 8024daa:	b13b      	cbz	r3, 8024dbc <Argus_Cal_GetGainValues+0x1a4>
 8024dac:	4299      	cmp	r1, r3
 8024dae:	bf9c      	itt	ls
 8024db0:	1a5b      	subls	r3, r3, r1
 8024db2:	4322      	orrls	r2, r4
 8024db4:	0864      	lsrs	r4, r4, #1
 8024db6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8024dba:	d1f6      	bne.n	8024daa <Argus_Cal_GetGainValues+0x192>
 8024dbc:	428b      	cmp	r3, r1
 8024dbe:	d300      	bcc.n	8024dc2 <Argus_Cal_GetGainValues+0x1aa>
 8024dc0:	3201      	adds	r2, #1
 8024dc2:	ea90 0f06 	teq	r0, r6
 8024dc6:	d45c      	bmi.n	8024e82 <Argus_Cal_GetGainValues+0x26a>
 8024dc8:	2a00      	cmp	r2, #0
 8024dca:	4614      	mov	r4, r2
 8024dcc:	f6ff af7a 	blt.w	8024cc4 <Argus_Cal_GetGainValues+0xac>
 8024dd0:	2800      	cmp	r0, #0
 8024dd2:	606a      	str	r2, [r5, #4]
 8024dd4:	f6bf af7e 	bge.w	8024cd4 <Argus_Cal_GetGainValues+0xbc>
 8024dd8:	4240      	negs	r0, r0
 8024dda:	4290      	cmp	r0, r2
 8024ddc:	bf28      	it	cs
 8024dde:	f44f 3380 	movcs.w	r3, #65536	@ 0x10000
 8024de2:	f4ff af7a 	bcc.w	8024cda <Argus_Cal_GetGainValues+0xc2>
 8024de6:	2800      	cmp	r0, #0
 8024de8:	db25      	blt.n	8024e36 <Argus_Cal_GetGainValues+0x21e>
 8024dea:	4611      	mov	r1, r2
 8024dec:	b152      	cbz	r2, 8024e04 <Argus_Cal_GetGainValues+0x1ec>
 8024dee:	2100      	movs	r1, #0
 8024df0:	e000      	b.n	8024df4 <Argus_Cal_GetGainValues+0x1dc>
 8024df2:	b13a      	cbz	r2, 8024e04 <Argus_Cal_GetGainValues+0x1ec>
 8024df4:	4290      	cmp	r0, r2
 8024df6:	bf9c      	itt	ls
 8024df8:	1a12      	subls	r2, r2, r0
 8024dfa:	4319      	orrls	r1, r3
 8024dfc:	085b      	lsrs	r3, r3, #1
 8024dfe:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8024e02:	d1f6      	bne.n	8024df2 <Argus_Cal_GetGainValues+0x1da>
 8024e04:	4282      	cmp	r2, r0
 8024e06:	d300      	bcc.n	8024e0a <Argus_Cal_GetGainValues+0x1f2>
 8024e08:	3101      	adds	r1, #1
 8024e0a:	ea9c 0f04 	teq	ip, r4
 8024e0e:	d41f      	bmi.n	8024e50 <Argus_Cal_GetGainValues+0x238>
 8024e10:	2900      	cmp	r1, #0
 8024e12:	bfb8      	it	lt
 8024e14:	f06f 4100 	mvnlt.w	r1, #2147483648	@ 0x80000000
 8024e18:	6029      	str	r1, [r5, #0]
 8024e1a:	bd70      	pop	{r4, r5, r6, pc}
 8024e1c:	428b      	cmp	r3, r1
 8024e1e:	d23a      	bcs.n	8024e96 <Argus_Cal_GetGainValues+0x27e>
 8024e20:	0864      	lsrs	r4, r4, #1
 8024e22:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8024e26:	d040      	beq.n	8024eaa <Argus_Cal_GetGainValues+0x292>
 8024e28:	2b00      	cmp	r3, #0
 8024e2a:	d1bc      	bne.n	8024da6 <Argus_Cal_GetGainValues+0x18e>
 8024e2c:	ea90 0f06 	teq	r0, r6
 8024e30:	d44b      	bmi.n	8024eca <Argus_Cal_GetGainValues+0x2b2>
 8024e32:	461a      	mov	r2, r3
 8024e34:	e7c8      	b.n	8024dc8 <Argus_Cal_GetGainValues+0x1b0>
 8024e36:	4290      	cmp	r0, r2
 8024e38:	d92b      	bls.n	8024e92 <Argus_Cal_GetGainValues+0x27a>
 8024e3a:	085b      	lsrs	r3, r3, #1
 8024e3c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8024e40:	d02b      	beq.n	8024e9a <Argus_Cal_GetGainValues+0x282>
 8024e42:	2a00      	cmp	r2, #0
 8024e44:	d1d3      	bne.n	8024dee <Argus_Cal_GetGainValues+0x1d6>
 8024e46:	ea9c 0f04 	teq	ip, r4
 8024e4a:	4611      	mov	r1, r2
 8024e4c:	f57f af55 	bpl.w	8024cfa <Argus_Cal_GetGainValues+0xe2>
 8024e50:	4249      	negs	r1, r1
 8024e52:	e752      	b.n	8024cfa <Argus_Cal_GetGainValues+0xe2>
 8024e54:	f034 4300 	bics.w	r3, r4, #2147483648	@ 0x80000000
 8024e58:	f02c 4200 	bic.w	r2, ip, #2147483648	@ 0x80000000
 8024e5c:	d183      	bne.n	8024d66 <Argus_Cal_GetGainValues+0x14e>
 8024e5e:	461c      	mov	r4, r3
 8024e60:	e78c      	b.n	8024d7c <Argus_Cal_GetGainValues+0x164>
 8024e62:	425e      	negs	r6, r3
 8024e64:	ea13 0326 	ands.w	r3, r3, r6, asr #32
 8024e68:	bf38      	it	cc
 8024e6a:	4633      	movcc	r3, r6
 8024e6c:	2800      	cmp	r0, #0
 8024e6e:	60ae      	str	r6, [r5, #8]
 8024e70:	f6ff af15 	blt.w	8024c9e <Argus_Cal_GetGainValues+0x86>
 8024e74:	4298      	cmp	r0, r3
 8024e76:	4601      	mov	r1, r0
 8024e78:	f4ff af17 	bcc.w	8024caa <Argus_Cal_GetGainValues+0x92>
 8024e7c:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8024e80:	e78f      	b.n	8024da2 <Argus_Cal_GetGainValues+0x18a>
 8024e82:	4253      	negs	r3, r2
 8024e84:	2b00      	cmp	r3, #0
 8024e86:	606b      	str	r3, [r5, #4]
 8024e88:	461c      	mov	r4, r3
 8024e8a:	f6ff af20 	blt.w	8024cce <Argus_Cal_GetGainValues+0xb6>
 8024e8e:	461a      	mov	r2, r3
 8024e90:	e71d      	b.n	8024cce <Argus_Cal_GetGainValues+0xb6>
 8024e92:	4619      	mov	r1, r3
 8024e94:	e7b9      	b.n	8024e0a <Argus_Cal_GetGainValues+0x1f2>
 8024e96:	4622      	mov	r2, r4
 8024e98:	e793      	b.n	8024dc2 <Argus_Cal_GetGainValues+0x1aa>
 8024e9a:	4619      	mov	r1, r3
 8024e9c:	e7b2      	b.n	8024e04 <Argus_Cal_GetGainValues+0x1ec>
 8024e9e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8024ea2:	e737      	b.n	8024d14 <Argus_Cal_GetGainValues+0xfc>
 8024ea4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8024ea8:	e79f      	b.n	8024dea <Argus_Cal_GetGainValues+0x1d2>
 8024eaa:	4622      	mov	r2, r4
 8024eac:	e786      	b.n	8024dbc <Argus_Cal_GetGainValues+0x1a4>
 8024eae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8024eb2:	4613      	mov	r3, r2
 8024eb4:	60aa      	str	r2, [r5, #8]
 8024eb6:	4616      	mov	r6, r2
 8024eb8:	e6ee      	b.n	8024c98 <Argus_Cal_GetGainValues+0x80>
 8024eba:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8024ebe:	461a      	mov	r2, r3
 8024ec0:	606b      	str	r3, [r5, #4]
 8024ec2:	461c      	mov	r4, r3
 8024ec4:	e703      	b.n	8024cce <Argus_Cal_GetGainValues+0xb6>
 8024ec6:	4608      	mov	r0, r1
 8024ec8:	e6c6      	b.n	8024c58 <Argus_Cal_GetGainValues+0x40>
 8024eca:	606b      	str	r3, [r5, #4]
 8024ecc:	461c      	mov	r4, r3
 8024ece:	461a      	mov	r2, r3
 8024ed0:	e6fd      	b.n	8024cce <Argus_Cal_GetGainValues+0xb6>
 8024ed2:	bf00      	nop

08024ed4 <Argus_Cal_GetTotalXtalkVectorTable>:
 8024ed4:	b538      	push	{r3, r4, r5, lr}
 8024ed6:	4605      	mov	r5, r0
 8024ed8:	4614      	mov	r4, r2
 8024eda:	f001 ffb5 	bl	8026e48 <Argus_Cal_GetInternalXtalkVectorTable>
 8024ede:	2800      	cmp	r0, #0
 8024ee0:	f2c0 81be 	blt.w	8025260 <Argus_Cal_GetTotalXtalkVectorTable+0x38c>
 8024ee4:	462b      	mov	r3, r5
 8024ee6:	4622      	mov	r2, r4
 8024ee8:	f505 7e80 	add.w	lr, r5, #256	@ 0x100
 8024eec:	8819      	ldrh	r1, [r3, #0]
 8024eee:	f8b2 4122 	ldrh.w	r4, [r2, #290]	@ 0x122
 8024ef2:	f8b3 c002 	ldrh.w	ip, [r3, #2]
 8024ef6:	4421      	add	r1, r4
 8024ef8:	8019      	strh	r1, [r3, #0]
 8024efa:	f8b2 4124 	ldrh.w	r4, [r2, #292]	@ 0x124
 8024efe:	8899      	ldrh	r1, [r3, #4]
 8024f00:	44a4      	add	ip, r4
 8024f02:	f8a3 c002 	strh.w	ip, [r3, #2]
 8024f06:	f8b2 4126 	ldrh.w	r4, [r2, #294]	@ 0x126
 8024f0a:	f8b3 c006 	ldrh.w	ip, [r3, #6]
 8024f0e:	4421      	add	r1, r4
 8024f10:	8099      	strh	r1, [r3, #4]
 8024f12:	f8b2 4128 	ldrh.w	r4, [r2, #296]	@ 0x128
 8024f16:	8919      	ldrh	r1, [r3, #8]
 8024f18:	44a4      	add	ip, r4
 8024f1a:	f8a3 c006 	strh.w	ip, [r3, #6]
 8024f1e:	f8b2 412a 	ldrh.w	r4, [r2, #298]	@ 0x12a
 8024f22:	f8b3 c00a 	ldrh.w	ip, [r3, #10]
 8024f26:	4421      	add	r1, r4
 8024f28:	8119      	strh	r1, [r3, #8]
 8024f2a:	f8b2 412c 	ldrh.w	r4, [r2, #300]	@ 0x12c
 8024f2e:	8999      	ldrh	r1, [r3, #12]
 8024f30:	44a4      	add	ip, r4
 8024f32:	f8a3 c00a 	strh.w	ip, [r3, #10]
 8024f36:	f8b2 412e 	ldrh.w	r4, [r2, #302]	@ 0x12e
 8024f3a:	f8b3 c00e 	ldrh.w	ip, [r3, #14]
 8024f3e:	4421      	add	r1, r4
 8024f40:	8199      	strh	r1, [r3, #12]
 8024f42:	f8b2 4130 	ldrh.w	r4, [r2, #304]	@ 0x130
 8024f46:	8a19      	ldrh	r1, [r3, #16]
 8024f48:	44a4      	add	ip, r4
 8024f4a:	f8a3 c00e 	strh.w	ip, [r3, #14]
 8024f4e:	f8b2 4132 	ldrh.w	r4, [r2, #306]	@ 0x132
 8024f52:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 8024f56:	4421      	add	r1, r4
 8024f58:	8219      	strh	r1, [r3, #16]
 8024f5a:	f8b2 4134 	ldrh.w	r4, [r2, #308]	@ 0x134
 8024f5e:	8a99      	ldrh	r1, [r3, #20]
 8024f60:	44a4      	add	ip, r4
 8024f62:	f8a3 c012 	strh.w	ip, [r3, #18]
 8024f66:	f8b2 4136 	ldrh.w	r4, [r2, #310]	@ 0x136
 8024f6a:	3380      	adds	r3, #128	@ 0x80
 8024f6c:	4421      	add	r1, r4
 8024f6e:	f823 1c6c 	strh.w	r1, [r3, #-108]
 8024f72:	f8b2 4138 	ldrh.w	r4, [r2, #312]	@ 0x138
 8024f76:	f833 1c6a 	ldrh.w	r1, [r3, #-106]
 8024f7a:	f833 cc68 	ldrh.w	ip, [r3, #-104]
 8024f7e:	4421      	add	r1, r4
 8024f80:	f823 1c6a 	strh.w	r1, [r3, #-106]
 8024f84:	f8b2 413a 	ldrh.w	r4, [r2, #314]	@ 0x13a
 8024f88:	f833 1c66 	ldrh.w	r1, [r3, #-102]
 8024f8c:	44a4      	add	ip, r4
 8024f8e:	f823 cc68 	strh.w	ip, [r3, #-104]
 8024f92:	f8b2 413c 	ldrh.w	r4, [r2, #316]	@ 0x13c
 8024f96:	f833 cc64 	ldrh.w	ip, [r3, #-100]
 8024f9a:	4421      	add	r1, r4
 8024f9c:	f823 1c66 	strh.w	r1, [r3, #-102]
 8024fa0:	f8b2 413e 	ldrh.w	r4, [r2, #318]	@ 0x13e
 8024fa4:	f833 1c62 	ldrh.w	r1, [r3, #-98]
 8024fa8:	44a4      	add	ip, r4
 8024faa:	f823 cc64 	strh.w	ip, [r3, #-100]
 8024fae:	f8b2 4140 	ldrh.w	r4, [r2, #320]	@ 0x140
 8024fb2:	f833 cc60 	ldrh.w	ip, [r3, #-96]
 8024fb6:	4421      	add	r1, r4
 8024fb8:	f823 1c62 	strh.w	r1, [r3, #-98]
 8024fbc:	f8b2 4142 	ldrh.w	r4, [r2, #322]	@ 0x142
 8024fc0:	f833 1c5e 	ldrh.w	r1, [r3, #-94]
 8024fc4:	44a4      	add	ip, r4
 8024fc6:	f823 cc60 	strh.w	ip, [r3, #-96]
 8024fca:	f8b2 4144 	ldrh.w	r4, [r2, #324]	@ 0x144
 8024fce:	f833 cc5c 	ldrh.w	ip, [r3, #-92]
 8024fd2:	4421      	add	r1, r4
 8024fd4:	f823 1c5e 	strh.w	r1, [r3, #-94]
 8024fd8:	f8b2 4146 	ldrh.w	r4, [r2, #326]	@ 0x146
 8024fdc:	f833 1c5a 	ldrh.w	r1, [r3, #-90]
 8024fe0:	44a4      	add	ip, r4
 8024fe2:	f823 cc5c 	strh.w	ip, [r3, #-92]
 8024fe6:	f8b2 4148 	ldrh.w	r4, [r2, #328]	@ 0x148
 8024fea:	f833 cc58 	ldrh.w	ip, [r3, #-88]
 8024fee:	4421      	add	r1, r4
 8024ff0:	f823 1c5a 	strh.w	r1, [r3, #-90]
 8024ff4:	f8b2 414a 	ldrh.w	r4, [r2, #330]	@ 0x14a
 8024ff8:	f833 1c56 	ldrh.w	r1, [r3, #-86]
 8024ffc:	44a4      	add	ip, r4
 8024ffe:	f823 cc58 	strh.w	ip, [r3, #-88]
 8025002:	f8b2 414c 	ldrh.w	r4, [r2, #332]	@ 0x14c
 8025006:	3280      	adds	r2, #128	@ 0x80
 8025008:	4421      	add	r1, r4
 802500a:	f823 1c56 	strh.w	r1, [r3, #-86]
 802500e:	f8b2 40ce 	ldrh.w	r4, [r2, #206]	@ 0xce
 8025012:	f833 1c54 	ldrh.w	r1, [r3, #-84]
 8025016:	f833 cc52 	ldrh.w	ip, [r3, #-82]
 802501a:	4421      	add	r1, r4
 802501c:	f823 1c54 	strh.w	r1, [r3, #-84]
 8025020:	f8b2 40d0 	ldrh.w	r4, [r2, #208]	@ 0xd0
 8025024:	f833 1c50 	ldrh.w	r1, [r3, #-80]
 8025028:	44a4      	add	ip, r4
 802502a:	f823 cc52 	strh.w	ip, [r3, #-82]
 802502e:	f8b2 40d2 	ldrh.w	r4, [r2, #210]	@ 0xd2
 8025032:	f833 cc4e 	ldrh.w	ip, [r3, #-78]
 8025036:	4421      	add	r1, r4
 8025038:	f823 1c50 	strh.w	r1, [r3, #-80]
 802503c:	f8b2 40d4 	ldrh.w	r4, [r2, #212]	@ 0xd4
 8025040:	f833 1c4c 	ldrh.w	r1, [r3, #-76]
 8025044:	44a4      	add	ip, r4
 8025046:	f823 cc4e 	strh.w	ip, [r3, #-78]
 802504a:	f8b2 40d6 	ldrh.w	r4, [r2, #214]	@ 0xd6
 802504e:	f833 cc4a 	ldrh.w	ip, [r3, #-74]
 8025052:	4421      	add	r1, r4
 8025054:	f823 1c4c 	strh.w	r1, [r3, #-76]
 8025058:	f8b2 40d8 	ldrh.w	r4, [r2, #216]	@ 0xd8
 802505c:	f833 1c48 	ldrh.w	r1, [r3, #-72]
 8025060:	44a4      	add	ip, r4
 8025062:	f823 cc4a 	strh.w	ip, [r3, #-74]
 8025066:	f8b2 40da 	ldrh.w	r4, [r2, #218]	@ 0xda
 802506a:	f833 cc46 	ldrh.w	ip, [r3, #-70]
 802506e:	4421      	add	r1, r4
 8025070:	f823 1c48 	strh.w	r1, [r3, #-72]
 8025074:	f8b2 40dc 	ldrh.w	r4, [r2, #220]	@ 0xdc
 8025078:	f833 1c44 	ldrh.w	r1, [r3, #-68]
 802507c:	44a4      	add	ip, r4
 802507e:	f823 cc46 	strh.w	ip, [r3, #-70]
 8025082:	f8b2 40de 	ldrh.w	r4, [r2, #222]	@ 0xde
 8025086:	f833 cc42 	ldrh.w	ip, [r3, #-66]
 802508a:	4421      	add	r1, r4
 802508c:	f823 1c44 	strh.w	r1, [r3, #-68]
 8025090:	f8b2 40e0 	ldrh.w	r4, [r2, #224]	@ 0xe0
 8025094:	f833 1c40 	ldrh.w	r1, [r3, #-64]
 8025098:	44a4      	add	ip, r4
 802509a:	f823 cc42 	strh.w	ip, [r3, #-66]
 802509e:	f8b2 40e2 	ldrh.w	r4, [r2, #226]	@ 0xe2
 80250a2:	4421      	add	r1, r4
 80250a4:	f823 1c40 	strh.w	r1, [r3, #-64]
 80250a8:	f8b2 40e4 	ldrh.w	r4, [r2, #228]	@ 0xe4
 80250ac:	f833 1c3e 	ldrh.w	r1, [r3, #-62]
 80250b0:	f833 cc3c 	ldrh.w	ip, [r3, #-60]
 80250b4:	4421      	add	r1, r4
 80250b6:	f823 1c3e 	strh.w	r1, [r3, #-62]
 80250ba:	f8b2 40e6 	ldrh.w	r4, [r2, #230]	@ 0xe6
 80250be:	f833 1c3a 	ldrh.w	r1, [r3, #-58]
 80250c2:	44a4      	add	ip, r4
 80250c4:	f823 cc3c 	strh.w	ip, [r3, #-60]
 80250c8:	f8b2 40e8 	ldrh.w	r4, [r2, #232]	@ 0xe8
 80250cc:	f833 cc38 	ldrh.w	ip, [r3, #-56]
 80250d0:	4421      	add	r1, r4
 80250d2:	f823 1c3a 	strh.w	r1, [r3, #-58]
 80250d6:	f8b2 40ea 	ldrh.w	r4, [r2, #234]	@ 0xea
 80250da:	f833 1c36 	ldrh.w	r1, [r3, #-54]
 80250de:	44a4      	add	ip, r4
 80250e0:	f823 cc38 	strh.w	ip, [r3, #-56]
 80250e4:	f8b2 40ec 	ldrh.w	r4, [r2, #236]	@ 0xec
 80250e8:	f833 cc34 	ldrh.w	ip, [r3, #-52]
 80250ec:	4421      	add	r1, r4
 80250ee:	f823 1c36 	strh.w	r1, [r3, #-54]
 80250f2:	f8b2 40ee 	ldrh.w	r4, [r2, #238]	@ 0xee
 80250f6:	f833 1c32 	ldrh.w	r1, [r3, #-50]
 80250fa:	44a4      	add	ip, r4
 80250fc:	f823 cc34 	strh.w	ip, [r3, #-52]
 8025100:	f8b2 40f0 	ldrh.w	r4, [r2, #240]	@ 0xf0
 8025104:	f833 cc30 	ldrh.w	ip, [r3, #-48]
 8025108:	4421      	add	r1, r4
 802510a:	f823 1c32 	strh.w	r1, [r3, #-50]
 802510e:	f8b2 40f2 	ldrh.w	r4, [r2, #242]	@ 0xf2
 8025112:	f833 1c2e 	ldrh.w	r1, [r3, #-46]
 8025116:	44a4      	add	ip, r4
 8025118:	f823 cc30 	strh.w	ip, [r3, #-48]
 802511c:	f8b2 40f4 	ldrh.w	r4, [r2, #244]	@ 0xf4
 8025120:	f833 cc2c 	ldrh.w	ip, [r3, #-44]
 8025124:	4421      	add	r1, r4
 8025126:	f823 1c2e 	strh.w	r1, [r3, #-46]
 802512a:	f8b2 40f6 	ldrh.w	r4, [r2, #246]	@ 0xf6
 802512e:	f833 1c2a 	ldrh.w	r1, [r3, #-42]
 8025132:	44a4      	add	ip, r4
 8025134:	f823 cc2c 	strh.w	ip, [r3, #-44]
 8025138:	f8b2 40f8 	ldrh.w	r4, [r2, #248]	@ 0xf8
 802513c:	4421      	add	r1, r4
 802513e:	f823 1c2a 	strh.w	r1, [r3, #-42]
 8025142:	f8b2 40fa 	ldrh.w	r4, [r2, #250]	@ 0xfa
 8025146:	f833 1c28 	ldrh.w	r1, [r3, #-40]
 802514a:	f833 cc26 	ldrh.w	ip, [r3, #-38]
 802514e:	4421      	add	r1, r4
 8025150:	f823 1c28 	strh.w	r1, [r3, #-40]
 8025154:	f8b2 40fc 	ldrh.w	r4, [r2, #252]	@ 0xfc
 8025158:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 802515c:	44a4      	add	ip, r4
 802515e:	f823 cc26 	strh.w	ip, [r3, #-38]
 8025162:	f8b2 40fe 	ldrh.w	r4, [r2, #254]	@ 0xfe
 8025166:	f833 cc22 	ldrh.w	ip, [r3, #-34]
 802516a:	4421      	add	r1, r4
 802516c:	f823 1c24 	strh.w	r1, [r3, #-36]
 8025170:	f8b2 4100 	ldrh.w	r4, [r2, #256]	@ 0x100
 8025174:	f833 1c20 	ldrh.w	r1, [r3, #-32]
 8025178:	44a4      	add	ip, r4
 802517a:	f823 cc22 	strh.w	ip, [r3, #-34]
 802517e:	f8b2 4102 	ldrh.w	r4, [r2, #258]	@ 0x102
 8025182:	f833 cc1e 	ldrh.w	ip, [r3, #-30]
 8025186:	4421      	add	r1, r4
 8025188:	f823 1c20 	strh.w	r1, [r3, #-32]
 802518c:	f8b2 4104 	ldrh.w	r4, [r2, #260]	@ 0x104
 8025190:	f833 1c1c 	ldrh.w	r1, [r3, #-28]
 8025194:	44a4      	add	ip, r4
 8025196:	f823 cc1e 	strh.w	ip, [r3, #-30]
 802519a:	f8b2 4106 	ldrh.w	r4, [r2, #262]	@ 0x106
 802519e:	f833 cc1a 	ldrh.w	ip, [r3, #-26]
 80251a2:	4421      	add	r1, r4
 80251a4:	f823 1c1c 	strh.w	r1, [r3, #-28]
 80251a8:	f8b2 4108 	ldrh.w	r4, [r2, #264]	@ 0x108
 80251ac:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 80251b0:	44a4      	add	ip, r4
 80251b2:	f823 cc1a 	strh.w	ip, [r3, #-26]
 80251b6:	f8b2 410a 	ldrh.w	r4, [r2, #266]	@ 0x10a
 80251ba:	f833 cc16 	ldrh.w	ip, [r3, #-22]
 80251be:	4421      	add	r1, r4
 80251c0:	f823 1c18 	strh.w	r1, [r3, #-24]
 80251c4:	f8b2 410c 	ldrh.w	r4, [r2, #268]	@ 0x10c
 80251c8:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 80251cc:	44a4      	add	ip, r4
 80251ce:	f823 cc16 	strh.w	ip, [r3, #-22]
 80251d2:	f8b2 410e 	ldrh.w	r4, [r2, #270]	@ 0x10e
 80251d6:	4421      	add	r1, r4
 80251d8:	f823 1c14 	strh.w	r1, [r3, #-20]
 80251dc:	f8b2 4110 	ldrh.w	r4, [r2, #272]	@ 0x110
 80251e0:	f833 1c12 	ldrh.w	r1, [r3, #-18]
 80251e4:	f833 cc10 	ldrh.w	ip, [r3, #-16]
 80251e8:	4421      	add	r1, r4
 80251ea:	f823 1c12 	strh.w	r1, [r3, #-18]
 80251ee:	f8b2 4112 	ldrh.w	r4, [r2, #274]	@ 0x112
 80251f2:	f833 1c0e 	ldrh.w	r1, [r3, #-14]
 80251f6:	44a4      	add	ip, r4
 80251f8:	f823 cc10 	strh.w	ip, [r3, #-16]
 80251fc:	f8b2 4114 	ldrh.w	r4, [r2, #276]	@ 0x114
 8025200:	f833 cc0c 	ldrh.w	ip, [r3, #-12]
 8025204:	4421      	add	r1, r4
 8025206:	f823 1c0e 	strh.w	r1, [r3, #-14]
 802520a:	f8b2 4116 	ldrh.w	r4, [r2, #278]	@ 0x116
 802520e:	f833 1c0a 	ldrh.w	r1, [r3, #-10]
 8025212:	44a4      	add	ip, r4
 8025214:	f823 cc0c 	strh.w	ip, [r3, #-12]
 8025218:	f8b2 4118 	ldrh.w	r4, [r2, #280]	@ 0x118
 802521c:	f833 cc08 	ldrh.w	ip, [r3, #-8]
 8025220:	4421      	add	r1, r4
 8025222:	f823 1c0a 	strh.w	r1, [r3, #-10]
 8025226:	f8b2 411a 	ldrh.w	r4, [r2, #282]	@ 0x11a
 802522a:	f833 1c06 	ldrh.w	r1, [r3, #-6]
 802522e:	44a4      	add	ip, r4
 8025230:	f823 cc08 	strh.w	ip, [r3, #-8]
 8025234:	f8b2 411c 	ldrh.w	r4, [r2, #284]	@ 0x11c
 8025238:	f833 cc04 	ldrh.w	ip, [r3, #-4]
 802523c:	4421      	add	r1, r4
 802523e:	f823 1c06 	strh.w	r1, [r3, #-6]
 8025242:	f8b2 411e 	ldrh.w	r4, [r2, #286]	@ 0x11e
 8025246:	f833 1c02 	ldrh.w	r1, [r3, #-2]
 802524a:	44a4      	add	ip, r4
 802524c:	f823 cc04 	strh.w	ip, [r3, #-4]
 8025250:	f8b2 4120 	ldrh.w	r4, [r2, #288]	@ 0x120
 8025254:	4573      	cmp	r3, lr
 8025256:	4421      	add	r1, r4
 8025258:	f823 1c02 	strh.w	r1, [r3, #-2]
 802525c:	f47f ae46 	bne.w	8024eec <Argus_Cal_GetTotalXtalkVectorTable+0x18>
 8025260:	bd38      	pop	{r3, r4, r5, pc}
 8025262:	bf00      	nop

08025264 <Argus_Cal_Update>:
 8025264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025268:	b0c7      	sub	sp, #284	@ 0x11c
 802526a:	4607      	mov	r7, r0
 802526c:	f8d0 04c0 	ldr.w	r0, [r0, #1216]	@ 0x4c0
 8025270:	9100      	str	r1, [sp, #0]
 8025272:	4688      	mov	r8, r1
 8025274:	4616      	mov	r6, r2
 8025276:	f7fc fd65 	bl	8021d44 <Argus_Dev_GetLaserType>
 802527a:	ac06      	add	r4, sp, #24
 802527c:	4603      	mov	r3, r0
 802527e:	4632      	mov	r2, r6
 8025280:	4641      	mov	r1, r8
 8025282:	4620      	mov	r0, r4
 8025284:	f7ff fe26 	bl	8024ed4 <Argus_Cal_GetTotalXtalkVectorTable>
 8025288:	4605      	mov	r5, r0
 802528a:	2800      	cmp	r0, #0
 802528c:	f040 834a 	bne.w	8025924 <Argus_Cal_Update+0x6c0>
 8025290:	f8b8 0104 	ldrh.w	r0, [r8, #260]	@ 0x104
 8025294:	4639      	mov	r1, r7
 8025296:	e039      	b.n	802530c <Argus_Cal_Update+0xa8>
 8025298:	f3c2 2e40 	ubfx	lr, r2, #9, #1
 802529c:	eb0e 2292 	add.w	r2, lr, r2, lsr #10
 80252a0:	eb03 0e0c 	add.w	lr, r3, ip
 80252a4:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 80252a8:	864a      	strh	r2, [r1, #50]	@ 0x32
 80252aa:	f9be 2002 	ldrsh.w	r2, [lr, #2]
 80252ae:	fb00 f202 	mul.w	r2, r0, r2
 80252b2:	2a00      	cmp	r2, #0
 80252b4:	f2c0 8341 	blt.w	802593a <Argus_Cal_Update+0x6d6>
 80252b8:	f3c2 2e40 	ubfx	lr, r2, #9, #1
 80252bc:	eb0e 2292 	add.w	r2, lr, r2, lsr #10
 80252c0:	eb03 0e0c 	add.w	lr, r3, ip
 80252c4:	f10e 0e20 	add.w	lr, lr, #32
 80252c8:	868a      	strh	r2, [r1, #52]	@ 0x34
 80252ca:	f934 202e 	ldrsh.w	r2, [r4, lr, lsl #2]
 80252ce:	fb00 f202 	mul.w	r2, r0, r2
 80252d2:	2a00      	cmp	r2, #0
 80252d4:	f2c0 832a 	blt.w	802592c <Argus_Cal_Update+0x6c8>
 80252d8:	f3c2 2e40 	ubfx	lr, r2, #9, #1
 80252dc:	eb0e 2292 	add.w	r2, lr, r2, lsr #10
 80252e0:	4463      	add	r3, ip
 80252e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80252e6:	f8a1 20b6 	strh.w	r2, [r1, #182]	@ 0xb6
 80252ea:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	@ 0x82
 80252ee:	fb00 f303 	mul.w	r3, r0, r3
 80252f2:	2b00      	cmp	r3, #0
 80252f4:	db1d      	blt.n	8025332 <Argus_Cal_Update+0xce>
 80252f6:	f3c3 2240 	ubfx	r2, r3, #9, #1
 80252fa:	3501      	adds	r5, #1
 80252fc:	eb02 2393 	add.w	r3, r2, r3, lsr #10
 8025300:	2d20      	cmp	r5, #32
 8025302:	f8a1 30b8 	strh.w	r3, [r1, #184]	@ 0xb8
 8025306:	f101 0104 	add.w	r1, r1, #4
 802530a:	d01f      	beq.n	802534c <Argus_Cal_Update+0xe8>
 802530c:	f005 0c03 	and.w	ip, r5, #3
 8025310:	f025 0303 	bic.w	r3, r5, #3
 8025314:	eb03 020c 	add.w	r2, r3, ip
 8025318:	f934 2022 	ldrsh.w	r2, [r4, r2, lsl #2]
 802531c:	fb00 f202 	mul.w	r2, r0, r2
 8025320:	2a00      	cmp	r2, #0
 8025322:	dab9      	bge.n	8025298 <Argus_Cal_Update+0x34>
 8025324:	4252      	negs	r2, r2
 8025326:	f3c2 2e40 	ubfx	lr, r2, #9, #1
 802532a:	eb0e 2292 	add.w	r2, lr, r2, lsr #10
 802532e:	4252      	negs	r2, r2
 8025330:	e7b6      	b.n	80252a0 <Argus_Cal_Update+0x3c>
 8025332:	425b      	negs	r3, r3
 8025334:	f3c3 2240 	ubfx	r2, r3, #9, #1
 8025338:	eb02 2393 	add.w	r3, r2, r3, lsr #10
 802533c:	3501      	adds	r5, #1
 802533e:	425b      	negs	r3, r3
 8025340:	2d20      	cmp	r5, #32
 8025342:	f8a1 30b8 	strh.w	r3, [r1, #184]	@ 0xb8
 8025346:	f101 0104 	add.w	r1, r1, #4
 802534a:	d1df      	bne.n	802530c <Argus_Cal_Update+0xa8>
 802534c:	f9b6 2222 	ldrsh.w	r2, [r6, #546]	@ 0x222
 8025350:	fb00 f302 	mul.w	r3, r0, r2
 8025354:	2b00      	cmp	r3, #0
 8025356:	f2c0 82f7 	blt.w	8025948 <Argus_Cal_Update+0x6e4>
 802535a:	f3c3 2240 	ubfx	r2, r3, #9, #1
 802535e:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 8025362:	f9b6 3224 	ldrsh.w	r3, [r6, #548]	@ 0x224
 8025366:	fb03 f000 	mul.w	r0, r3, r0
 802536a:	b212      	sxth	r2, r2
 802536c:	2800      	cmp	r0, #0
 802536e:	f8a7 20b2 	strh.w	r2, [r7, #178]	@ 0xb2
 8025372:	f2c0 82f0 	blt.w	8025956 <Argus_Cal_Update+0x6f2>
 8025376:	f3c0 2340 	ubfx	r3, r0, #9, #1
 802537a:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 802537e:	b21b      	sxth	r3, r3
 8025380:	2100      	movs	r1, #0
 8025382:	f8a7 2136 	strh.w	r2, [r7, #310]	@ 0x136
 8025386:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
 802538a:	2220      	movs	r2, #32
 802538c:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
 8025390:	f507 70a1 	add.w	r0, r7, #322	@ 0x142
 8025394:	f005 fe09 	bl	802afaa <memset>
 8025398:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 802539c:	f8a7 3162 	strh.w	r3, [r7, #354]	@ 0x162
 80253a0:	2300      	movs	r3, #0
 80253a2:	f887 3164 	strb.w	r3, [r7, #356]	@ 0x164
 80253a6:	f8d7 04c0 	ldr.w	r0, [r7, #1216]	@ 0x4c0
 80253aa:	f7fc fcc5 	bl	8021d38 <Argus_Dev_GetModule>
 80253ae:	9900      	ldr	r1, [sp, #0]
 80253b0:	4603      	mov	r3, r0
 80253b2:	4632      	mov	r2, r6
 80253b4:	4620      	mov	r0, r4
 80253b6:	f001 fbc9 	bl	8026b4c <Argus_Cal_GetInternalPixelRangeOffsets>
 80253ba:	1e05      	subs	r5, r0, #0
 80253bc:	f2c0 82b2 	blt.w	8025924 <Argus_Cal_Update+0x6c0>
 80253c0:	f8b4 a012 	ldrh.w	sl, [r4, #18]
 80253c4:	f8b4 e000 	ldrh.w	lr, [r4]
 80253c8:	f8ad a004 	strh.w	sl, [sp, #4]
 80253cc:	f8b6 a01c 	ldrh.w	sl, [r6, #28]
 80253d0:	f8b4 c002 	ldrh.w	ip, [r4, #2]
 80253d4:	88a0      	ldrh	r0, [r4, #4]
 80253d6:	f8b4 9006 	ldrh.w	r9, [r4, #6]
 80253da:	8921      	ldrh	r1, [r4, #8]
 80253dc:	8962      	ldrh	r2, [r4, #10]
 80253de:	89a3      	ldrh	r3, [r4, #12]
 80253e0:	f8b4 800e 	ldrh.w	r8, [r4, #14]
 80253e4:	f8b4 b010 	ldrh.w	fp, [r4, #16]
 80253e8:	44d6      	add	lr, sl
 80253ea:	f8a4 e000 	strh.w	lr, [r4]
 80253ee:	f8b6 e01e 	ldrh.w	lr, [r6, #30]
 80253f2:	44f4      	add	ip, lr
 80253f4:	f8a4 c002 	strh.w	ip, [r4, #2]
 80253f8:	f8b6 c020 	ldrh.w	ip, [r6, #32]
 80253fc:	4460      	add	r0, ip
 80253fe:	80a0      	strh	r0, [r4, #4]
 8025400:	8c70      	ldrh	r0, [r6, #34]	@ 0x22
 8025402:	4481      	add	r9, r0
 8025404:	8cb0      	ldrh	r0, [r6, #36]	@ 0x24
 8025406:	f8a4 9006 	strh.w	r9, [r4, #6]
 802540a:	4401      	add	r1, r0
 802540c:	8121      	strh	r1, [r4, #8]
 802540e:	8cf1      	ldrh	r1, [r6, #38]	@ 0x26
 8025410:	440a      	add	r2, r1
 8025412:	8162      	strh	r2, [r4, #10]
 8025414:	8d32      	ldrh	r2, [r6, #40]	@ 0x28
 8025416:	4413      	add	r3, r2
 8025418:	81a3      	strh	r3, [r4, #12]
 802541a:	8d73      	ldrh	r3, [r6, #42]	@ 0x2a
 802541c:	9a01      	ldr	r2, [sp, #4]
 802541e:	4498      	add	r8, r3
 8025420:	8db3      	ldrh	r3, [r6, #44]	@ 0x2c
 8025422:	f8a4 800e 	strh.w	r8, [r4, #14]
 8025426:	449b      	add	fp, r3
 8025428:	8df3      	ldrh	r3, [r6, #46]	@ 0x2e
 802542a:	f8a4 b010 	strh.w	fp, [r4, #16]
 802542e:	4413      	add	r3, r2
 8025430:	8263      	strh	r3, [r4, #18]
 8025432:	8e33      	ldrh	r3, [r6, #48]	@ 0x30
 8025434:	8aa2      	ldrh	r2, [r4, #20]
 8025436:	f8b4 a016 	ldrh.w	sl, [r4, #22]
 802543a:	f8b4 9018 	ldrh.w	r9, [r4, #24]
 802543e:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8025442:	f8b4 e01c 	ldrh.w	lr, [r4, #28]
 8025446:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
 802544a:	8c20      	ldrh	r0, [r4, #32]
 802544c:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 802544e:	f8b4 b026 	ldrh.w	fp, [r4, #38]	@ 0x26
 8025452:	4413      	add	r3, r2
 8025454:	82a3      	strh	r3, [r4, #20]
 8025456:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8025458:	f8ad 3004 	strh.w	r3, [sp, #4]
 802545c:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 802545e:	8ca2      	ldrh	r2, [r4, #36]	@ 0x24
 8025460:	4453      	add	r3, sl
 8025462:	82e3      	strh	r3, [r4, #22]
 8025464:	8eb3      	ldrh	r3, [r6, #52]	@ 0x34
 8025466:	444b      	add	r3, r9
 8025468:	8323      	strh	r3, [r4, #24]
 802546a:	8ef3      	ldrh	r3, [r6, #54]	@ 0x36
 802546c:	4498      	add	r8, r3
 802546e:	8f33      	ldrh	r3, [r6, #56]	@ 0x38
 8025470:	f8a4 801a 	strh.w	r8, [r4, #26]
 8025474:	449e      	add	lr, r3
 8025476:	8f73      	ldrh	r3, [r6, #58]	@ 0x3a
 8025478:	f8a4 e01c 	strh.w	lr, [r4, #28]
 802547c:	449c      	add	ip, r3
 802547e:	8fb3      	ldrh	r3, [r6, #60]	@ 0x3c
 8025480:	f8a4 c01e 	strh.w	ip, [r4, #30]
 8025484:	4418      	add	r0, r3
 8025486:	8ff3      	ldrh	r3, [r6, #62]	@ 0x3e
 8025488:	8420      	strh	r0, [r4, #32]
 802548a:	4419      	add	r1, r3
 802548c:	f8b6 3040 	ldrh.w	r3, [r6, #64]	@ 0x40
 8025490:	8461      	strh	r1, [r4, #34]	@ 0x22
 8025492:	441a      	add	r2, r3
 8025494:	f8b6 3042 	ldrh.w	r3, [r6, #66]	@ 0x42
 8025498:	84a2      	strh	r2, [r4, #36]	@ 0x24
 802549a:	449b      	add	fp, r3
 802549c:	f8a4 b026 	strh.w	fp, [r4, #38]	@ 0x26
 80254a0:	f8b6 3044 	ldrh.w	r3, [r6, #68]	@ 0x44
 80254a4:	9a01      	ldr	r2, [sp, #4]
 80254a6:	f8b4 a02c 	ldrh.w	sl, [r4, #44]	@ 0x2c
 80254aa:	f8b4 902e 	ldrh.w	r9, [r4, #46]	@ 0x2e
 80254ae:	f8b4 8030 	ldrh.w	r8, [r4, #48]	@ 0x30
 80254b2:	f8b4 e032 	ldrh.w	lr, [r4, #50]	@ 0x32
 80254b6:	f8b4 c034 	ldrh.w	ip, [r4, #52]	@ 0x34
 80254ba:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 80254bc:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 80254be:	f8b4 b03c 	ldrh.w	fp, [r4, #60]	@ 0x3c
 80254c2:	4413      	add	r3, r2
 80254c4:	8523      	strh	r3, [r4, #40]	@ 0x28
 80254c6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80254c8:	f8b6 3046 	ldrh.w	r3, [r6, #70]	@ 0x46
 80254cc:	4413      	add	r3, r2
 80254ce:	8563      	strh	r3, [r4, #42]	@ 0x2a
 80254d0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80254d2:	f8ad 3004 	strh.w	r3, [sp, #4]
 80254d6:	f8b6 3048 	ldrh.w	r3, [r6, #72]	@ 0x48
 80254da:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
 80254dc:	4453      	add	r3, sl
 80254de:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 80254e0:	f8b6 304a 	ldrh.w	r3, [r6, #74]	@ 0x4a
 80254e4:	444b      	add	r3, r9
 80254e6:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 80254e8:	f8b6 304c 	ldrh.w	r3, [r6, #76]	@ 0x4c
 80254ec:	4498      	add	r8, r3
 80254ee:	f8b6 304e 	ldrh.w	r3, [r6, #78]	@ 0x4e
 80254f2:	f8a4 8030 	strh.w	r8, [r4, #48]	@ 0x30
 80254f6:	449e      	add	lr, r3
 80254f8:	f8b6 3050 	ldrh.w	r3, [r6, #80]	@ 0x50
 80254fc:	f8a4 e032 	strh.w	lr, [r4, #50]	@ 0x32
 8025500:	449c      	add	ip, r3
 8025502:	f8b6 3052 	ldrh.w	r3, [r6, #82]	@ 0x52
 8025506:	f8a4 c034 	strh.w	ip, [r4, #52]	@ 0x34
 802550a:	4418      	add	r0, r3
 802550c:	f8b6 3054 	ldrh.w	r3, [r6, #84]	@ 0x54
 8025510:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8025512:	4419      	add	r1, r3
 8025514:	f8b6 3056 	ldrh.w	r3, [r6, #86]	@ 0x56
 8025518:	8721      	strh	r1, [r4, #56]	@ 0x38
 802551a:	441a      	add	r2, r3
 802551c:	8762      	strh	r2, [r4, #58]	@ 0x3a
 802551e:	f8b4 8054 	ldrh.w	r8, [r4, #84]	@ 0x54
 8025522:	9a01      	ldr	r2, [sp, #4]
 8025524:	f8b4 a042 	ldrh.w	sl, [r4, #66]	@ 0x42
 8025528:	f8ad 8004 	strh.w	r8, [sp, #4]
 802552c:	f8b6 805e 	ldrh.w	r8, [r6, #94]	@ 0x5e
 8025530:	f8b4 9044 	ldrh.w	r9, [r4, #68]	@ 0x44
 8025534:	f8b4 e046 	ldrh.w	lr, [r4, #70]	@ 0x46
 8025538:	f8b4 c048 	ldrh.w	ip, [r4, #72]	@ 0x48
 802553c:	f8b6 3058 	ldrh.w	r3, [r6, #88]	@ 0x58
 8025540:	f8b4 004a 	ldrh.w	r0, [r4, #74]	@ 0x4a
 8025544:	f8b4 104c 	ldrh.w	r1, [r4, #76]	@ 0x4c
 8025548:	44d0      	add	r8, sl
 802554a:	f8a4 8042 	strh.w	r8, [r4, #66]	@ 0x42
 802554e:	f8b6 8060 	ldrh.w	r8, [r6, #96]	@ 0x60
 8025552:	44c8      	add	r8, r9
 8025554:	f8a4 8044 	strh.w	r8, [r4, #68]	@ 0x44
 8025558:	f8b6 8062 	ldrh.w	r8, [r6, #98]	@ 0x62
 802555c:	44c6      	add	lr, r8
 802555e:	f8a4 e046 	strh.w	lr, [r4, #70]	@ 0x46
 8025562:	f8b6 e064 	ldrh.w	lr, [r6, #100]	@ 0x64
 8025566:	44f4      	add	ip, lr
 8025568:	f8a4 c048 	strh.w	ip, [r4, #72]	@ 0x48
 802556c:	f8b6 c066 	ldrh.w	ip, [r6, #102]	@ 0x66
 8025570:	449b      	add	fp, r3
 8025572:	f8b6 305a 	ldrh.w	r3, [r6, #90]	@ 0x5a
 8025576:	f8a4 b03c 	strh.w	fp, [r4, #60]	@ 0x3c
 802557a:	4460      	add	r0, ip
 802557c:	4413      	add	r3, r2
 802557e:	f8a4 004a 	strh.w	r0, [r4, #74]	@ 0x4a
 8025582:	f8b6 0068 	ldrh.w	r0, [r6, #104]	@ 0x68
 8025586:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 802558a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 802558c:	f8b6 305c 	ldrh.w	r3, [r6, #92]	@ 0x5c
 8025590:	f8b4 b052 	ldrh.w	fp, [r4, #82]	@ 0x52
 8025594:	4401      	add	r1, r0
 8025596:	4413      	add	r3, r2
 8025598:	f8a4 104c 	strh.w	r1, [r4, #76]	@ 0x4c
 802559c:	f8b4 204e 	ldrh.w	r2, [r4, #78]	@ 0x4e
 80255a0:	f8b6 106a 	ldrh.w	r1, [r6, #106]	@ 0x6a
 80255a4:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
 80255a8:	440a      	add	r2, r1
 80255aa:	f8b4 3050 	ldrh.w	r3, [r4, #80]	@ 0x50
 80255ae:	f8a4 204e 	strh.w	r2, [r4, #78]	@ 0x4e
 80255b2:	f8b6 206c 	ldrh.w	r2, [r6, #108]	@ 0x6c
 80255b6:	f8b4 a06a 	ldrh.w	sl, [r4, #106]	@ 0x6a
 80255ba:	f8b4 9058 	ldrh.w	r9, [r4, #88]	@ 0x58
 80255be:	f8b4 805a 	ldrh.w	r8, [r4, #90]	@ 0x5a
 80255c2:	f8b4 e05c 	ldrh.w	lr, [r4, #92]	@ 0x5c
 80255c6:	f8b4 c05e 	ldrh.w	ip, [r4, #94]	@ 0x5e
 80255ca:	f8b4 0060 	ldrh.w	r0, [r4, #96]	@ 0x60
 80255ce:	f8b4 1062 	ldrh.w	r1, [r4, #98]	@ 0x62
 80255d2:	4413      	add	r3, r2
 80255d4:	9a01      	ldr	r2, [sp, #4]
 80255d6:	f8ad a004 	strh.w	sl, [sp, #4]
 80255da:	f8b6 a074 	ldrh.w	sl, [r6, #116]	@ 0x74
 80255de:	f8a4 3050 	strh.w	r3, [r4, #80]	@ 0x50
 80255e2:	44d1      	add	r9, sl
 80255e4:	f8a4 9058 	strh.w	r9, [r4, #88]	@ 0x58
 80255e8:	f8b6 9076 	ldrh.w	r9, [r6, #118]	@ 0x76
 80255ec:	f8b6 306e 	ldrh.w	r3, [r6, #110]	@ 0x6e
 80255f0:	44c8      	add	r8, r9
 80255f2:	f8a4 805a 	strh.w	r8, [r4, #90]	@ 0x5a
 80255f6:	f8b6 8078 	ldrh.w	r8, [r6, #120]	@ 0x78
 80255fa:	44c6      	add	lr, r8
 80255fc:	f8a4 e05c 	strh.w	lr, [r4, #92]	@ 0x5c
 8025600:	f8b6 e07a 	ldrh.w	lr, [r6, #122]	@ 0x7a
 8025604:	44f4      	add	ip, lr
 8025606:	449b      	add	fp, r3
 8025608:	f8a4 c05e 	strh.w	ip, [r4, #94]	@ 0x5e
 802560c:	f8b6 3070 	ldrh.w	r3, [r6, #112]	@ 0x70
 8025610:	f8b6 c07c 	ldrh.w	ip, [r6, #124]	@ 0x7c
 8025614:	f8a4 b052 	strh.w	fp, [r4, #82]	@ 0x52
 8025618:	4413      	add	r3, r2
 802561a:	4460      	add	r0, ip
 802561c:	f8b6 2072 	ldrh.w	r2, [r6, #114]	@ 0x72
 8025620:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 8025624:	f8a4 0060 	strh.w	r0, [r4, #96]	@ 0x60
 8025628:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 802562c:	f8b6 007e 	ldrh.w	r0, [r6, #126]	@ 0x7e
 8025630:	f8b4 b068 	ldrh.w	fp, [r4, #104]	@ 0x68
 8025634:	4413      	add	r3, r2
 8025636:	4401      	add	r1, r0
 8025638:	f8b4 2064 	ldrh.w	r2, [r4, #100]	@ 0x64
 802563c:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
 8025640:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 8025644:	f8a4 1062 	strh.w	r1, [r4, #98]	@ 0x62
 8025648:	f8b6 1080 	ldrh.w	r1, [r6, #128]	@ 0x80
 802564c:	f8b4 a06e 	ldrh.w	sl, [r4, #110]	@ 0x6e
 8025650:	f8b4 9070 	ldrh.w	r9, [r4, #112]	@ 0x70
 8025654:	f8b4 8072 	ldrh.w	r8, [r4, #114]	@ 0x72
 8025658:	f8b4 e074 	ldrh.w	lr, [r4, #116]	@ 0x74
 802565c:	f8b4 c076 	ldrh.w	ip, [r4, #118]	@ 0x76
 8025660:	f8b4 0078 	ldrh.w	r0, [r4, #120]	@ 0x78
 8025664:	440a      	add	r2, r1
 8025666:	f8a4 2064 	strh.w	r2, [r4, #100]	@ 0x64
 802566a:	f8b6 2082 	ldrh.w	r2, [r6, #130]	@ 0x82
 802566e:	f8b4 107a 	ldrh.w	r1, [r4, #122]	@ 0x7a
 8025672:	4413      	add	r3, r2
 8025674:	f8a4 3066 	strh.w	r3, [r4, #102]	@ 0x66
 8025678:	f8b6 3084 	ldrh.w	r3, [r6, #132]	@ 0x84
 802567c:	9a01      	ldr	r2, [sp, #4]
 802567e:	449b      	add	fp, r3
 8025680:	f8a4 b068 	strh.w	fp, [r4, #104]	@ 0x68
 8025684:	f8b6 b08a 	ldrh.w	fp, [r6, #138]	@ 0x8a
 8025688:	f8b6 3086 	ldrh.w	r3, [r6, #134]	@ 0x86
 802568c:	44da      	add	sl, fp
 802568e:	f8a4 a06e 	strh.w	sl, [r4, #110]	@ 0x6e
 8025692:	f8b6 a08c 	ldrh.w	sl, [r6, #140]	@ 0x8c
 8025696:	44d1      	add	r9, sl
 8025698:	f8a4 9070 	strh.w	r9, [r4, #112]	@ 0x70
 802569c:	f8b6 908e 	ldrh.w	r9, [r6, #142]	@ 0x8e
 80256a0:	44c8      	add	r8, r9
 80256a2:	f8a4 8072 	strh.w	r8, [r4, #114]	@ 0x72
 80256a6:	f8b6 8090 	ldrh.w	r8, [r6, #144]	@ 0x90
 80256aa:	44c6      	add	lr, r8
 80256ac:	f8a4 e074 	strh.w	lr, [r4, #116]	@ 0x74
 80256b0:	f8b6 e092 	ldrh.w	lr, [r6, #146]	@ 0x92
 80256b4:	4413      	add	r3, r2
 80256b6:	44f4      	add	ip, lr
 80256b8:	f8b6 2088 	ldrh.w	r2, [r6, #136]	@ 0x88
 80256bc:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
 80256c0:	f8a4 c076 	strh.w	ip, [r4, #118]	@ 0x76
 80256c4:	f8b4 306c 	ldrh.w	r3, [r4, #108]	@ 0x6c
 80256c8:	f8b6 c094 	ldrh.w	ip, [r6, #148]	@ 0x94
 80256cc:	4413      	add	r3, r2
 80256ce:	4460      	add	r0, ip
 80256d0:	f8b4 207c 	ldrh.w	r2, [r4, #124]	@ 0x7c
 80256d4:	f8a4 306c 	strh.w	r3, [r4, #108]	@ 0x6c
 80256d8:	f8b4 307e 	ldrh.w	r3, [r4, #126]	@ 0x7e
 80256dc:	f8a4 0078 	strh.w	r0, [r4, #120]	@ 0x78
 80256e0:	f8b6 0096 	ldrh.w	r0, [r6, #150]	@ 0x96
 80256e4:	4401      	add	r1, r0
 80256e6:	f8a4 107a 	strh.w	r1, [r4, #122]	@ 0x7a
 80256ea:	f8b6 1098 	ldrh.w	r1, [r6, #152]	@ 0x98
 80256ee:	440a      	add	r2, r1
 80256f0:	f8a4 207c 	strh.w	r2, [r4, #124]	@ 0x7c
 80256f4:	f8b6 209a 	ldrh.w	r2, [r6, #154]	@ 0x9a
 80256f8:	4413      	add	r3, r2
 80256fa:	f8a4 307e 	strh.w	r3, [r4, #126]	@ 0x7e
 80256fe:	f040 8111 	bne.w	8025924 <Argus_Cal_Update+0x6c0>
 8025702:	f507 72b2 	add.w	r2, r7, #356	@ 0x164
 8025706:	462b      	mov	r3, r5
 8025708:	f834 1013 	ldrh.w	r1, [r4, r3, lsl #1]
 802570c:	f822 1f02 	strh.w	r1, [r2, #2]!
 8025710:	3301      	adds	r3, #1
 8025712:	2b20      	cmp	r3, #32
 8025714:	d1f8      	bne.n	8025708 <Argus_Cal_Update+0x4a4>
 8025716:	f9b7 02a0 	ldrsh.w	r0, [r7, #672]	@ 0x2a0
 802571a:	f8a7 01a6 	strh.w	r0, [r7, #422]	@ 0x1a6
 802571e:	f507 72d3 	add.w	r2, r7, #422	@ 0x1a6
 8025722:	2300      	movs	r3, #0
 8025724:	f103 0120 	add.w	r1, r3, #32
 8025728:	3301      	adds	r3, #1
 802572a:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 802572e:	f822 1f02 	strh.w	r1, [r2, #2]!
 8025732:	2b20      	cmp	r3, #32
 8025734:	d1f6      	bne.n	8025724 <Argus_Cal_Update+0x4c0>
 8025736:	f8a7 01e8 	strh.w	r0, [r7, #488]	@ 0x1e8
 802573a:	f896 1292 	ldrb.w	r1, [r6, #658]	@ 0x292
 802573e:	a802      	add	r0, sp, #8
 8025740:	0389      	lsls	r1, r1, #14
 8025742:	f7ff fa69 	bl	8024c18 <Argus_Cal_GetGainValues>
 8025746:	f10d 0808 	add.w	r8, sp, #8
 802574a:	46a1      	mov	r9, r4
 802574c:	9802      	ldr	r0, [sp, #8]
 802574e:	f858 3b04 	ldr.w	r3, [r8], #4
 8025752:	f5c0 3040 	rsb	r0, r0, #196608	@ 0x30000
 8025756:	4418      	add	r0, r3
 8025758:	f004 fd4c 	bl	802a1f4 <fp_log16>
 802575c:	4544      	cmp	r4, r8
 802575e:	f849 0b04 	str.w	r0, [r9], #4
 8025762:	d1f3      	bne.n	802574c <Argus_Cal_Update+0x4e8>
 8025764:	e9d4 9100 	ldrd	r9, r1, [r4]
 8025768:	f8d4 800c 	ldr.w	r8, [r4, #12]
 802576c:	eba1 0208 	sub.w	r2, r1, r8
 8025770:	eba9 0308 	sub.w	r3, r9, r8
 8025774:	4692      	mov	sl, r2
 8025776:	469e      	mov	lr, r3
 8025778:	2b00      	cmp	r3, #0
 802577a:	f000 80f3 	beq.w	8025964 <Argus_Cal_Update+0x700>
 802577e:	2a00      	cmp	r2, #0
 8025780:	bfb8      	it	lt
 8025782:	eba8 0201 	sublt.w	r2, r8, r1
 8025786:	2b00      	cmp	r3, #0
 8025788:	f2c0 816d 	blt.w	8025a66 <Argus_Cal_Update+0x802>
 802578c:	4293      	cmp	r3, r2
 802578e:	4618      	mov	r0, r3
 8025790:	bf28      	it	cs
 8025792:	f44f 3180 	movcs.w	r1, #65536	@ 0x10000
 8025796:	f080 816f 	bcs.w	8025a78 <Argus_Cal_Update+0x814>
 802579a:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 802579e:	0040      	lsls	r0, r0, #1
 80257a0:	4290      	cmp	r0, r2
 80257a2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80257a6:	d3fa      	bcc.n	802579e <Argus_Cal_Update+0x53a>
 80257a8:	2900      	cmp	r1, #0
 80257aa:	f040 8163 	bne.w	8025a74 <Argus_Cal_Update+0x810>
 80257ae:	ea9a 0f03 	teq	sl, r3
 80257b2:	bf4c      	ite	mi
 80257b4:	f04f 4c00 	movmi.w	ip, #2147483648	@ 0x80000000
 80257b8:	f06f 4c00 	mvnpl.w	ip, #2147483648	@ 0x80000000
 80257bc:	68a1      	ldr	r1, [r4, #8]
 80257be:	f8c7 c020 	str.w	ip, [r7, #32]
 80257c2:	eba1 0208 	sub.w	r2, r1, r8
 80257c6:	2a00      	cmp	r2, #0
 80257c8:	4614      	mov	r4, r2
 80257ca:	da01      	bge.n	80257d0 <Argus_Cal_Update+0x56c>
 80257cc:	eba8 0201 	sub.w	r2, r8, r1
 80257d0:	2b00      	cmp	r3, #0
 80257d2:	f2c0 8127 	blt.w	8025a24 <Argus_Cal_Update+0x7c0>
 80257d6:	4293      	cmp	r3, r2
 80257d8:	f080 820b 	bcs.w	8025bf2 <Argus_Cal_Update+0x98e>
 80257dc:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 80257e0:	005b      	lsls	r3, r3, #1
 80257e2:	4293      	cmp	r3, r2
 80257e4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80257e8:	d3fa      	bcc.n	80257e0 <Argus_Cal_Update+0x57c>
 80257ea:	2900      	cmp	r1, #0
 80257ec:	f040 8122 	bne.w	8025a34 <Argus_Cal_Update+0x7d0>
 80257f0:	ea9e 0f04 	teq	lr, r4
 80257f4:	f100 80c4 	bmi.w	8025980 <Argus_Cal_Update+0x71c>
 80257f8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80257fc:	9b00      	ldr	r3, [sp, #0]
 80257fe:	6278      	str	r0, [r7, #36]	@ 0x24
 8025800:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8025804:	2b00      	cmp	r3, #0
 8025806:	f040 80c6 	bne.w	8025996 <Argus_Cal_Update+0x732>
 802580a:	f8c7 302e 	str.w	r3, [r7, #46]	@ 0x2e
 802580e:	4631      	mov	r1, r6
 8025810:	4638      	mov	r0, r7
 8025812:	f7fe feff 	bl	8024614 <UpdateAPDVoltage>
 8025816:	f9b7 e028 	ldrsh.w	lr, [r7, #40]	@ 0x28
 802581a:	f996 3272 	ldrsb.w	r3, [r6, #626]	@ 0x272
 802581e:	f996 8273 	ldrsb.w	r8, [r6, #627]	@ 0x273
 8025822:	f896 426e 	ldrb.w	r4, [r6, #622]	@ 0x26e
 8025826:	f896 c271 	ldrb.w	ip, [r6, #625]	@ 0x271
 802582a:	f896 226c 	ldrb.w	r2, [r6, #620]	@ 0x26c
 802582e:	f896 126f 	ldrb.w	r1, [r6, #623]	@ 0x26f
 8025832:	f896 926d 	ldrb.w	r9, [r6, #621]	@ 0x26d
 8025836:	f896 a270 	ldrb.w	sl, [r6, #624]	@ 0x270
 802583a:	f8d7 04c0 	ldr.w	r0, [r7, #1216]	@ 0x4c0
 802583e:	f647 7bff 	movw	fp, #32767	@ 0x7fff
 8025842:	45de      	cmp	lr, fp
 8025844:	f1a3 031e 	sub.w	r3, r3, #30
 8025848:	bf14      	ite	ne
 802584a:	ea4f 2e2e 	movne.w	lr, lr, asr #8
 802584e:	46ae      	moveq	lr, r5
 8025850:	4573      	cmp	r3, lr
 8025852:	f1a8 081e 	sub.w	r8, r8, #30
 8025856:	bfb8      	it	lt
 8025858:	4673      	movlt	r3, lr
 802585a:	4598      	cmp	r8, r3
 802585c:	bfa8      	it	ge
 802585e:	4698      	movge	r8, r3
 8025860:	fb08 f30c 	mul.w	r3, r8, ip
 8025864:	fb08 f404 	mul.w	r4, r8, r4
 8025868:	eb03 1aca 	add.w	sl, r3, sl, lsl #7
 802586c:	eb04 19c9 	add.w	r9, r4, r9, lsl #7
 8025870:	02cb      	lsls	r3, r1, #11
 8025872:	02d1      	lsls	r1, r2, #11
 8025874:	fb08 330a 	mla	r3, r8, sl, r3
 8025878:	fb08 1109 	mla	r1, r8, r9, r1
 802587c:	fb08 f203 	mul.w	r2, r8, r3
 8025880:	fb08 f101 	mul.w	r1, r8, r1
 8025884:	f102 7280 	add.w	r2, r2, #16777216	@ 0x1000000
 8025888:	f101 7180 	add.w	r1, r1, #16777216	@ 0x1000000
 802588c:	1212      	asrs	r2, r2, #8
 802588e:	1209      	asrs	r1, r1, #8
 8025890:	f7fc f8ce 	bl	8021a30 <Argus_Dev_UpdateLaserTemperatureCompensation>
 8025894:	9b00      	ldr	r3, [sp, #0]
 8025896:	4ab5      	ldr	r2, [pc, #724]	@ (8025b6c <Argus_Cal_Update+0x908>)
 8025898:	685b      	ldr	r3, [r3, #4]
 802589a:	08db      	lsrs	r3, r3, #3
 802589c:	fba2 2303 	umull	r2, r3, r2, r3
 80258a0:	f3c3 1387 	ubfx	r3, r3, #6, #8
 80258a4:	2b01      	cmp	r3, #1
 80258a6:	bf98      	it	ls
 80258a8:	2303      	movls	r3, #3
 80258aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80258ae:	7e71      	ldrb	r1, [r6, #25]
 80258b0:	2940      	cmp	r1, #64	@ 0x40
 80258b2:	d068      	beq.n	8025986 <Argus_Cal_Update+0x722>
 80258b4:	0288      	lsls	r0, r1, #10
 80258b6:	f004 fc9d 	bl	802a1f4 <fp_log16>
 80258ba:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
 80258be:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
 80258c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80258c6:	f240 8176 	bls.w	8025bb6 <Argus_Cal_Update+0x952>
 80258ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80258ce:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80258d2:	4616      	mov	r6, r2
 80258d4:	0052      	lsls	r2, r2, #1
 80258d6:	428a      	cmp	r2, r1
 80258d8:	461c      	mov	r4, r3
 80258da:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80258de:	d3f8      	bcc.n	80258d2 <Argus_Cal_Update+0x66e>
 80258e0:	2b00      	cmp	r3, #0
 80258e2:	f040 8135 	bne.w	8025b50 <Argus_Cal_Update+0x8ec>
 80258e6:	2800      	cmp	r0, #0
 80258e8:	bfac      	ite	ge
 80258ea:	f06f 4800 	mvnge.w	r8, #2147483648	@ 0x80000000
 80258ee:	f04f 4800 	movlt.w	r8, #2147483648	@ 0x80000000
 80258f2:	1e7e      	subs	r6, r7, #1
 80258f4:	f107 091f 	add.w	r9, r7, #31
 80258f8:	2400      	movs	r4, #0
 80258fa:	4620      	mov	r0, r4
 80258fc:	f004 fbc8 	bl	802a090 <fp_exp16>
 8025900:	f3c0 2340 	ubfx	r3, r0, #9, #1
 8025904:	eb03 2090 	add.w	r0, r3, r0, lsr #10
 8025908:	2801      	cmp	r0, #1
 802590a:	bf38      	it	cc
 802590c:	2001      	movcc	r0, #1
 802590e:	28ff      	cmp	r0, #255	@ 0xff
 8025910:	bf28      	it	cs
 8025912:	20ff      	movcs	r0, #255	@ 0xff
 8025914:	f806 0f01 	strb.w	r0, [r6, #1]!
 8025918:	45b1      	cmp	r9, r6
 802591a:	4444      	add	r4, r8
 802591c:	d1ed      	bne.n	80258fa <Argus_Cal_Update+0x696>
 802591e:	2300      	movs	r3, #0
 8025920:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8025924:	4628      	mov	r0, r5
 8025926:	b047      	add	sp, #284	@ 0x11c
 8025928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802592c:	4252      	negs	r2, r2
 802592e:	f3c2 2e40 	ubfx	lr, r2, #9, #1
 8025932:	eb0e 2292 	add.w	r2, lr, r2, lsr #10
 8025936:	4252      	negs	r2, r2
 8025938:	e4d2      	b.n	80252e0 <Argus_Cal_Update+0x7c>
 802593a:	4252      	negs	r2, r2
 802593c:	f3c2 2e40 	ubfx	lr, r2, #9, #1
 8025940:	eb0e 2292 	add.w	r2, lr, r2, lsr #10
 8025944:	4252      	negs	r2, r2
 8025946:	e4bb      	b.n	80252c0 <Argus_Cal_Update+0x5c>
 8025948:	425b      	negs	r3, r3
 802594a:	f3c3 2240 	ubfx	r2, r3, #9, #1
 802594e:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 8025952:	4252      	negs	r2, r2
 8025954:	e505      	b.n	8025362 <Argus_Cal_Update+0xfe>
 8025956:	4240      	negs	r0, r0
 8025958:	f3c0 2340 	ubfx	r3, r0, #9, #1
 802595c:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 8025960:	425b      	negs	r3, r3
 8025962:	e50c      	b.n	802537e <Argus_Cal_Update+0x11a>
 8025964:	68a3      	ldr	r3, [r4, #8]
 8025966:	2a00      	cmp	r2, #0
 8025968:	eba3 0808 	sub.w	r8, r3, r8
 802596c:	bfb4      	ite	lt
 802596e:	f04f 4300 	movlt.w	r3, #2147483648	@ 0x80000000
 8025972:	f06f 4300 	mvnge.w	r3, #2147483648	@ 0x80000000
 8025976:	f1b8 0f00 	cmp.w	r8, #0
 802597a:	623b      	str	r3, [r7, #32]
 802597c:	f6bf af3c 	bge.w	80257f8 <Argus_Cal_Update+0x594>
 8025980:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8025984:	e73a      	b.n	80257fc <Argus_Cal_Update+0x598>
 8025986:	2220      	movs	r2, #32
 8025988:	4638      	mov	r0, r7
 802598a:	f005 fb0e 	bl	802afaa <memset>
 802598e:	2300      	movs	r3, #0
 8025990:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8025994:	e7c6      	b.n	8025924 <Argus_Cal_Update+0x6c0>
 8025996:	9a00      	ldr	r2, [sp, #0]
 8025998:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802599c:	f8d3 10b8 	ldr.w	r1, [r3, #184]	@ 0xb8
 80259a0:	4b73      	ldr	r3, [pc, #460]	@ (8025b70 <Argus_Cal_Update+0x90c>)
 80259a2:	2900      	cmp	r1, #0
 80259a4:	468c      	mov	ip, r1
 80259a6:	bfb8      	it	lt
 80259a8:	4249      	neglt	r1, r1
 80259aa:	4299      	cmp	r1, r3
 80259ac:	f240 8131 	bls.w	8025c12 <Argus_Cal_Update+0x9ae>
 80259b0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80259b4:	461c      	mov	r4, r3
 80259b6:	005b      	lsls	r3, r3, #1
 80259b8:	428b      	cmp	r3, r1
 80259ba:	4610      	mov	r0, r2
 80259bc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80259c0:	d3f8      	bcc.n	80259b4 <Argus_Cal_Update+0x750>
 80259c2:	2a00      	cmp	r2, #0
 80259c4:	f040 8095 	bne.w	8025af2 <Argus_Cal_Update+0x88e>
 80259c8:	f1bc 0f00 	cmp.w	ip, #0
 80259cc:	f2c0 8155 	blt.w	8025c7a <Argus_Cal_Update+0xa16>
 80259d0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80259d4:	4618      	mov	r0, r3
 80259d6:	469c      	mov	ip, r3
 80259d8:	f8b6 2280 	ldrh.w	r2, [r6, #640]	@ 0x280
 80259dc:	f8b6 4282 	ldrh.w	r4, [r6, #642]	@ 0x282
 80259e0:	fba2 2303 	umull	r2, r3, r2, r3
 80259e4:	f3c2 33c0 	ubfx	r3, r2, #15, #1
 80259e8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80259ec:	f1bc 0f00 	cmp.w	ip, #0
 80259f0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80259f2:	4623      	mov	r3, r4
 80259f4:	f280 812e 	bge.w	8025c54 <Argus_Cal_Update+0x9f0>
 80259f8:	4240      	negs	r0, r0
 80259fa:	4298      	cmp	r0, r3
 80259fc:	f080 8115 	bcs.w	8025c2a <Argus_Cal_Update+0x9c6>
 8025a00:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8025a04:	0040      	lsls	r0, r0, #1
 8025a06:	4298      	cmp	r0, r3
 8025a08:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8025a0c:	d3fa      	bcc.n	8025a04 <Argus_Cal_Update+0x7a0>
 8025a0e:	2a00      	cmp	r2, #0
 8025a10:	f040 80d8 	bne.w	8025bc4 <Argus_Cal_Update+0x960>
 8025a14:	ea84 030c 	eor.w	r3, r4, ip
 8025a18:	43db      	mvns	r3, r3
 8025a1a:	0fdb      	lsrs	r3, r3, #31
 8025a1c:	425b      	negs	r3, r3
 8025a1e:	b29b      	uxth	r3, r3
 8025a20:	863b      	strh	r3, [r7, #48]	@ 0x30
 8025a22:	e6f4      	b.n	802580e <Argus_Cal_Update+0x5aa>
 8025a24:	eba8 0309 	sub.w	r3, r8, r9
 8025a28:	4293      	cmp	r3, r2
 8025a2a:	bf28      	it	cs
 8025a2c:	f44f 3180 	movcs.w	r1, #65536	@ 0x10000
 8025a30:	f4ff aed4 	bcc.w	80257dc <Argus_Cal_Update+0x578>
 8025a34:	2b00      	cmp	r3, #0
 8025a36:	db3b      	blt.n	8025ab0 <Argus_Cal_Update+0x84c>
 8025a38:	4610      	mov	r0, r2
 8025a3a:	b152      	cbz	r2, 8025a52 <Argus_Cal_Update+0x7ee>
 8025a3c:	2000      	movs	r0, #0
 8025a3e:	e000      	b.n	8025a42 <Argus_Cal_Update+0x7de>
 8025a40:	b13a      	cbz	r2, 8025a52 <Argus_Cal_Update+0x7ee>
 8025a42:	4293      	cmp	r3, r2
 8025a44:	bf9c      	itt	ls
 8025a46:	1ad2      	subls	r2, r2, r3
 8025a48:	4308      	orrls	r0, r1
 8025a4a:	0849      	lsrs	r1, r1, #1
 8025a4c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8025a50:	d1f6      	bne.n	8025a40 <Argus_Cal_Update+0x7dc>
 8025a52:	4293      	cmp	r3, r2
 8025a54:	d800      	bhi.n	8025a58 <Argus_Cal_Update+0x7f4>
 8025a56:	3001      	adds	r0, #1
 8025a58:	ea9e 0f04 	teq	lr, r4
 8025a5c:	d436      	bmi.n	8025acc <Argus_Cal_Update+0x868>
 8025a5e:	2800      	cmp	r0, #0
 8025a60:	f6bf aecc 	bge.w	80257fc <Argus_Cal_Update+0x598>
 8025a64:	e6c8      	b.n	80257f8 <Argus_Cal_Update+0x594>
 8025a66:	eba8 0009 	sub.w	r0, r8, r9
 8025a6a:	4290      	cmp	r0, r2
 8025a6c:	f4ff ae95 	bcc.w	802579a <Argus_Cal_Update+0x536>
 8025a70:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8025a74:	2800      	cmp	r0, #0
 8025a76:	db2b      	blt.n	8025ad0 <Argus_Cal_Update+0x86c>
 8025a78:	4694      	mov	ip, r2
 8025a7a:	b162      	cbz	r2, 8025a96 <Argus_Cal_Update+0x832>
 8025a7c:	f04f 0c00 	mov.w	ip, #0
 8025a80:	e000      	b.n	8025a84 <Argus_Cal_Update+0x820>
 8025a82:	b142      	cbz	r2, 8025a96 <Argus_Cal_Update+0x832>
 8025a84:	4290      	cmp	r0, r2
 8025a86:	bf9c      	itt	ls
 8025a88:	1a12      	subls	r2, r2, r0
 8025a8a:	ea4c 0c01 	orrls.w	ip, ip, r1
 8025a8e:	0849      	lsrs	r1, r1, #1
 8025a90:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8025a94:	d1f5      	bne.n	8025a82 <Argus_Cal_Update+0x81e>
 8025a96:	4282      	cmp	r2, r0
 8025a98:	d301      	bcc.n	8025a9e <Argus_Cal_Update+0x83a>
 8025a9a:	f10c 0c01 	add.w	ip, ip, #1
 8025a9e:	ea9a 0f03 	teq	sl, r3
 8025aa2:	d423      	bmi.n	8025aec <Argus_Cal_Update+0x888>
 8025aa4:	f1bc 0f00 	cmp.w	ip, #0
 8025aa8:	bfb8      	it	lt
 8025aaa:	f06f 4c00 	mvnlt.w	ip, #2147483648	@ 0x80000000
 8025aae:	e685      	b.n	80257bc <Argus_Cal_Update+0x558>
 8025ab0:	4293      	cmp	r3, r2
 8025ab2:	d977      	bls.n	8025ba4 <Argus_Cal_Update+0x940>
 8025ab4:	0849      	lsrs	r1, r1, #1
 8025ab6:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8025aba:	f000 80d0 	beq.w	8025c5e <Argus_Cal_Update+0x9fa>
 8025abe:	2a00      	cmp	r2, #0
 8025ac0:	d1bc      	bne.n	8025a3c <Argus_Cal_Update+0x7d8>
 8025ac2:	ea9e 0f04 	teq	lr, r4
 8025ac6:	4610      	mov	r0, r2
 8025ac8:	f57f ae98 	bpl.w	80257fc <Argus_Cal_Update+0x598>
 8025acc:	4240      	negs	r0, r0
 8025ace:	e695      	b.n	80257fc <Argus_Cal_Update+0x598>
 8025ad0:	4282      	cmp	r2, r0
 8025ad2:	d265      	bcs.n	8025ba0 <Argus_Cal_Update+0x93c>
 8025ad4:	0849      	lsrs	r1, r1, #1
 8025ad6:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8025ada:	f000 80c2 	beq.w	8025c62 <Argus_Cal_Update+0x9fe>
 8025ade:	2a00      	cmp	r2, #0
 8025ae0:	d1cc      	bne.n	8025a7c <Argus_Cal_Update+0x818>
 8025ae2:	ea9a 0f03 	teq	sl, r3
 8025ae6:	4694      	mov	ip, r2
 8025ae8:	f57f ae68 	bpl.w	80257bc <Argus_Cal_Update+0x558>
 8025aec:	f1cc 0c00 	rsb	ip, ip, #0
 8025af0:	e664      	b.n	80257bc <Argus_Cal_Update+0x558>
 8025af2:	2b00      	cmp	r3, #0
 8025af4:	da08      	bge.n	8025b08 <Argus_Cal_Update+0x8a4>
 8025af6:	428b      	cmp	r3, r1
 8025af8:	f000 8084 	beq.w	8025c04 <Argus_Cal_Update+0x9a0>
 8025afc:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8025b00:	f024 4300 	bic.w	r3, r4, #2147483648	@ 0x80000000
 8025b04:	f000 80af 	beq.w	8025c66 <Argus_Cal_Update+0xa02>
 8025b08:	2000      	movs	r0, #0
 8025b0a:	e000      	b.n	8025b0e <Argus_Cal_Update+0x8aa>
 8025b0c:	b151      	cbz	r1, 8025b24 <Argus_Cal_Update+0x8c0>
 8025b0e:	4299      	cmp	r1, r3
 8025b10:	bf24      	itt	cs
 8025b12:	1ac9      	subcs	r1, r1, r3
 8025b14:	4310      	orrcs	r0, r2
 8025b16:	0852      	lsrs	r2, r2, #1
 8025b18:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8025b1c:	d1f6      	bne.n	8025b0c <Argus_Cal_Update+0x8a8>
 8025b1e:	4299      	cmp	r1, r3
 8025b20:	d300      	bcc.n	8025b24 <Argus_Cal_Update+0x8c0>
 8025b22:	3001      	adds	r0, #1
 8025b24:	f1bc 0f00 	cmp.w	ip, #0
 8025b28:	db67      	blt.n	8025bfa <Argus_Cal_Update+0x996>
 8025b2a:	2800      	cmp	r0, #0
 8025b2c:	4684      	mov	ip, r0
 8025b2e:	db6b      	blt.n	8025c08 <Argus_Cal_Update+0x9a4>
 8025b30:	f8b6 3280 	ldrh.w	r3, [r6, #640]	@ 0x280
 8025b34:	f8b6 4282 	ldrh.w	r4, [r6, #642]	@ 0x282
 8025b38:	fba3 3200 	umull	r3, r2, r3, r0
 8025b3c:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8025b40:	eb02 4313 	add.w	r3, r2, r3, lsr #16
 8025b44:	2800      	cmp	r0, #0
 8025b46:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8025b48:	d17e      	bne.n	8025c48 <Argus_Cal_Update+0x9e4>
 8025b4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8025b4e:	e767      	b.n	8025a20 <Argus_Cal_Update+0x7bc>
 8025b50:	2a00      	cmp	r2, #0
 8025b52:	da07      	bge.n	8025b64 <Argus_Cal_Update+0x900>
 8025b54:	428a      	cmp	r2, r1
 8025b56:	d053      	beq.n	8025c00 <Argus_Cal_Update+0x99c>
 8025b58:	f034 4300 	bics.w	r3, r4, #2147483648	@ 0x80000000
 8025b5c:	f026 4200 	bic.w	r2, r6, #2147483648	@ 0x80000000
 8025b60:	f000 8083 	beq.w	8025c6a <Argus_Cal_Update+0xa06>
 8025b64:	f04f 0800 	mov.w	r8, #0
 8025b68:	e005      	b.n	8025b76 <Argus_Cal_Update+0x912>
 8025b6a:	bf00      	nop
 8025b6c:	192add01 	.word	0x192add01
 8025b70:	002dc6c0 	.word	0x002dc6c0
 8025b74:	b161      	cbz	r1, 8025b90 <Argus_Cal_Update+0x92c>
 8025b76:	4291      	cmp	r1, r2
 8025b78:	bf24      	itt	cs
 8025b7a:	1a89      	subcs	r1, r1, r2
 8025b7c:	ea48 0803 	orrcs.w	r8, r8, r3
 8025b80:	085b      	lsrs	r3, r3, #1
 8025b82:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8025b86:	d1f5      	bne.n	8025b74 <Argus_Cal_Update+0x910>
 8025b88:	4291      	cmp	r1, r2
 8025b8a:	d301      	bcc.n	8025b90 <Argus_Cal_Update+0x92c>
 8025b8c:	f108 0801 	add.w	r8, r8, #1
 8025b90:	2800      	cmp	r0, #0
 8025b92:	db0d      	blt.n	8025bb0 <Argus_Cal_Update+0x94c>
 8025b94:	f1b8 0f00 	cmp.w	r8, #0
 8025b98:	bfb8      	it	lt
 8025b9a:	f06f 4800 	mvnlt.w	r8, #2147483648	@ 0x80000000
 8025b9e:	e6a8      	b.n	80258f2 <Argus_Cal_Update+0x68e>
 8025ba0:	468c      	mov	ip, r1
 8025ba2:	e77c      	b.n	8025a9e <Argus_Cal_Update+0x83a>
 8025ba4:	4608      	mov	r0, r1
 8025ba6:	e757      	b.n	8025a58 <Argus_Cal_Update+0x7f4>
 8025ba8:	2800      	cmp	r0, #0
 8025baa:	4688      	mov	r8, r1
 8025bac:	f6bf aea1 	bge.w	80258f2 <Argus_Cal_Update+0x68e>
 8025bb0:	f1c8 0800 	rsb	r8, r8, #0
 8025bb4:	e69d      	b.n	80258f2 <Argus_Cal_Update+0x68e>
 8025bb6:	2900      	cmp	r1, #0
 8025bb8:	d0f6      	beq.n	8025ba8 <Argus_Cal_Update+0x944>
 8025bba:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8025bbe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8025bc2:	e7cf      	b.n	8025b64 <Argus_Cal_Update+0x900>
 8025bc4:	2b00      	cmp	r3, #0
 8025bc6:	d052      	beq.n	8025c6e <Argus_Cal_Update+0xa0a>
 8025bc8:	2100      	movs	r1, #0
 8025bca:	e000      	b.n	8025bce <Argus_Cal_Update+0x96a>
 8025bcc:	b153      	cbz	r3, 8025be4 <Argus_Cal_Update+0x980>
 8025bce:	4283      	cmp	r3, r0
 8025bd0:	bf24      	itt	cs
 8025bd2:	1a1b      	subcs	r3, r3, r0
 8025bd4:	4311      	orrcs	r1, r2
 8025bd6:	0852      	lsrs	r2, r2, #1
 8025bd8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8025bdc:	d1f6      	bne.n	8025bcc <Argus_Cal_Update+0x968>
 8025bde:	4283      	cmp	r3, r0
 8025be0:	bf28      	it	cs
 8025be2:	3101      	addcs	r1, #1
 8025be4:	ea94 0f0c 	teq	r4, ip
 8025be8:	d42b      	bmi.n	8025c42 <Argus_Cal_Update+0x9de>
 8025bea:	2900      	cmp	r1, #0
 8025bec:	dbad      	blt.n	8025b4a <Argus_Cal_Update+0x8e6>
 8025bee:	b28b      	uxth	r3, r1
 8025bf0:	e716      	b.n	8025a20 <Argus_Cal_Update+0x7bc>
 8025bf2:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8025bf6:	e71f      	b.n	8025a38 <Argus_Cal_Update+0x7d4>
 8025bf8:	4608      	mov	r0, r1
 8025bfa:	4240      	negs	r0, r0
 8025bfc:	4684      	mov	ip, r0
 8025bfe:	e797      	b.n	8025b30 <Argus_Cal_Update+0x8cc>
 8025c00:	4698      	mov	r8, r3
 8025c02:	e7c5      	b.n	8025b90 <Argus_Cal_Update+0x92c>
 8025c04:	4610      	mov	r0, r2
 8025c06:	e78d      	b.n	8025b24 <Argus_Cal_Update+0x8c0>
 8025c08:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8025c0c:	4618      	mov	r0, r3
 8025c0e:	469c      	mov	ip, r3
 8025c10:	e6e2      	b.n	80259d8 <Argus_Cal_Update+0x774>
 8025c12:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8025c16:	2900      	cmp	r1, #0
 8025c18:	f47f af76 	bne.w	8025b08 <Argus_Cal_Update+0x8a4>
 8025c1c:	ea9c 0f03 	teq	ip, r3
 8025c20:	d4ea      	bmi.n	8025bf8 <Argus_Cal_Update+0x994>
 8025c22:	85f9      	strh	r1, [r7, #46]	@ 0x2e
 8025c24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8025c28:	e6fa      	b.n	8025a20 <Argus_Cal_Update+0x7bc>
 8025c2a:	2800      	cmp	r0, #0
 8025c2c:	bfa8      	it	ge
 8025c2e:	f44f 3280 	movge.w	r2, #65536	@ 0x10000
 8025c32:	da03      	bge.n	8025c3c <Argus_Cal_Update+0x9d8>
 8025c34:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8025c38:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8025c3c:	2b00      	cmp	r3, #0
 8025c3e:	d1c3      	bne.n	8025bc8 <Argus_Cal_Update+0x964>
 8025c40:	4619      	mov	r1, r3
 8025c42:	424b      	negs	r3, r1
 8025c44:	b29b      	uxth	r3, r3
 8025c46:	e6eb      	b.n	8025a20 <Argus_Cal_Update+0x7bc>
 8025c48:	4623      	mov	r3, r4
 8025c4a:	f6ff aed5 	blt.w	80259f8 <Argus_Cal_Update+0x794>
 8025c4e:	4284      	cmp	r4, r0
 8025c50:	f63f aed6 	bhi.w	8025a00 <Argus_Cal_Update+0x79c>
 8025c54:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8025c58:	2b00      	cmp	r3, #0
 8025c5a:	d1b5      	bne.n	8025bc8 <Argus_Cal_Update+0x964>
 8025c5c:	e6e0      	b.n	8025a20 <Argus_Cal_Update+0x7bc>
 8025c5e:	4608      	mov	r0, r1
 8025c60:	e6f7      	b.n	8025a52 <Argus_Cal_Update+0x7ee>
 8025c62:	468c      	mov	ip, r1
 8025c64:	e717      	b.n	8025a96 <Argus_Cal_Update+0x832>
 8025c66:	4610      	mov	r0, r2
 8025c68:	e759      	b.n	8025b1e <Argus_Cal_Update+0x8ba>
 8025c6a:	4698      	mov	r8, r3
 8025c6c:	e78c      	b.n	8025b88 <Argus_Cal_Update+0x924>
 8025c6e:	f1bc 0f00 	cmp.w	ip, #0
 8025c72:	f6bf aed5 	bge.w	8025a20 <Argus_Cal_Update+0x7bc>
 8025c76:	4619      	mov	r1, r3
 8025c78:	e7e3      	b.n	8025c42 <Argus_Cal_Update+0x9de>
 8025c7a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8025c7e:	4618      	mov	r0, r3
 8025c80:	469c      	mov	ip, r3
 8025c82:	e6a9      	b.n	80259d8 <Argus_Cal_Update+0x774>

08025c84 <Argus_Cal_ApplyFrequencyTemperatureCompensation>:
 8025c84:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	@ 0x28
 8025c88:	b530      	push	{r4, r5, lr}
 8025c8a:	f647 74ff 	movw	r4, #32767	@ 0x7fff
 8025c8e:	42a3      	cmp	r3, r4
 8025c90:	d05c      	beq.n	8025d4c <Argus_Cal_ApplyFrequencyTemperatureCompensation+0xc8>
 8025c92:	f890 421c 	ldrb.w	r4, [r0, #540]	@ 0x21c
 8025c96:	2c00      	cmp	r4, #0
 8025c98:	d058      	beq.n	8025d4c <Argus_Cal_ApplyFrequencyTemperatureCompensation+0xc8>
 8025c9a:	f8d0 54c0 	ldr.w	r5, [r0, #1216]	@ 0x4c0
 8025c9e:	68c8      	ldr	r0, [r1, #12]
 8025ca0:	f010 0f02 	tst.w	r0, #2
 8025ca4:	d138      	bne.n	8025d18 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x94>
 8025ca6:	f8d5 011c 	ldr.w	r0, [r5, #284]	@ 0x11c
 8025caa:	f8b0 0079 	ldrh.w	r0, [r0, #121]	@ 0x79
 8025cae:	fb14 f303 	smulbb	r3, r4, r3
 8025cb2:	ba40      	rev16	r0, r0
 8025cb4:	2b00      	cmp	r3, #0
 8025cb6:	f3c0 104a 	ubfx	r0, r0, #5, #11
 8025cba:	db40      	blt.n	8025d3e <Argus_Cal_ApplyFrequencyTemperatureCompensation+0xba>
 8025cbc:	f3c3 2440 	ubfx	r4, r3, #9, #1
 8025cc0:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8025cc4:	f991 c018 	ldrsb.w	ip, [r1, #24]
 8025cc8:	f5c4 3480 	rsb	r4, r4, #65536	@ 0x10000
 8025ccc:	4484      	add	ip, r0
 8025cce:	fb00 f404 	mul.w	r4, r0, r4
 8025cd2:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8025cd6:	2c00      	cmp	r4, #0
 8025cd8:	d057      	beq.n	8025d8a <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x106>
 8025cda:	ea8c 70ec 	eor.w	r0, ip, ip, asr #31
 8025cde:	eba0 70ec 	sub.w	r0, r0, ip, asr #31
 8025ce2:	4284      	cmp	r4, r0
 8025ce4:	4621      	mov	r1, r4
 8025ce6:	d266      	bcs.n	8025db6 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x132>
 8025ce8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8025cec:	460d      	mov	r5, r1
 8025cee:	0049      	lsls	r1, r1, #1
 8025cf0:	4281      	cmp	r1, r0
 8025cf2:	469e      	mov	lr, r3
 8025cf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8025cf8:	d3f8      	bcc.n	8025cec <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x68>
 8025cfa:	bb4b      	cbnz	r3, 8025d50 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0xcc>
 8025cfc:	ea9c 0f04 	teq	ip, r4
 8025d00:	d446      	bmi.n	8025d90 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x10c>
 8025d02:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8025d06:	fba2 2303 	umull	r2, r3, r2, r3
 8025d0a:	0c11      	lsrs	r1, r2, #16
 8025d0c:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 8025d10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8025d14:	4408      	add	r0, r1
 8025d16:	bd30      	pop	{r4, r5, pc}
 8025d18:	f8d5 511c 	ldr.w	r5, [r5, #284]	@ 0x11c
 8025d1c:	f895 c0a8 	ldrb.w	ip, [r5, #168]	@ 0xa8
 8025d20:	0740      	lsls	r0, r0, #29
 8025d22:	bf4c      	ite	mi
 8025d24:	eb05 054c 	addmi.w	r5, r5, ip, lsl #1
 8025d28:	f10c 0c57 	addpl.w	ip, ip, #87	@ 0x57
 8025d2c:	fb14 f303 	smulbb	r3, r4, r3
 8025d30:	bf4c      	ite	mi
 8025d32:	f8b5 00b2 	ldrhmi.w	r0, [r5, #178]	@ 0xb2
 8025d36:	f835 001c 	ldrhpl.w	r0, [r5, ip, lsl #1]
 8025d3a:	2b00      	cmp	r3, #0
 8025d3c:	dabe      	bge.n	8025cbc <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x38>
 8025d3e:	425b      	negs	r3, r3
 8025d40:	f3c3 2440 	ubfx	r4, r3, #9, #1
 8025d44:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8025d48:	4264      	negs	r4, r4
 8025d4a:	e7bb      	b.n	8025cc4 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x40>
 8025d4c:	4610      	mov	r0, r2
 8025d4e:	bd30      	pop	{r4, r5, pc}
 8025d50:	2900      	cmp	r1, #0
 8025d52:	da1f      	bge.n	8025d94 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x110>
 8025d54:	4281      	cmp	r1, r0
 8025d56:	d02c      	beq.n	8025db2 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x12e>
 8025d58:	f03e 4300 	bics.w	r3, lr, #2147483648	@ 0x80000000
 8025d5c:	4629      	mov	r1, r5
 8025d5e:	d119      	bne.n	8025d94 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x110>
 8025d60:	469e      	mov	lr, r3
 8025d62:	4281      	cmp	r1, r0
 8025d64:	d801      	bhi.n	8025d6a <Argus_Cal_ApplyFrequencyTemperatureCompensation+0xe6>
 8025d66:	f10e 0e01 	add.w	lr, lr, #1
 8025d6a:	ea9c 0f04 	teq	ip, r4
 8025d6e:	d42a      	bmi.n	8025dc6 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x142>
 8025d70:	f1be 0f00 	cmp.w	lr, #0
 8025d74:	dbc5      	blt.n	8025d02 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x7e>
 8025d76:	fba2 e20e 	umull	lr, r2, r2, lr
 8025d7a:	ea4f 401e 	mov.w	r0, lr, lsr #16
 8025d7e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8025d82:	f3ce 3ec0 	ubfx	lr, lr, #15, #1
 8025d86:	4470      	add	r0, lr
 8025d88:	bd30      	pop	{r4, r5, pc}
 8025d8a:	f1bc 0f00 	cmp.w	ip, #0
 8025d8e:	dab8      	bge.n	8025d02 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x7e>
 8025d90:	03d0      	lsls	r0, r2, #15
 8025d92:	bd30      	pop	{r4, r5, pc}
 8025d94:	f04f 0e00 	mov.w	lr, #0
 8025d98:	e001      	b.n	8025d9e <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x11a>
 8025d9a:	2800      	cmp	r0, #0
 8025d9c:	d0e5      	beq.n	8025d6a <Argus_Cal_ApplyFrequencyTemperatureCompensation+0xe6>
 8025d9e:	4288      	cmp	r0, r1
 8025da0:	bf24      	itt	cs
 8025da2:	1a40      	subcs	r0, r0, r1
 8025da4:	ea4e 0e03 	orrcs.w	lr, lr, r3
 8025da8:	085b      	lsrs	r3, r3, #1
 8025daa:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8025dae:	d1f4      	bne.n	8025d9a <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x116>
 8025db0:	e7d7      	b.n	8025d62 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0xde>
 8025db2:	469e      	mov	lr, r3
 8025db4:	e7d9      	b.n	8025d6a <Argus_Cal_ApplyFrequencyTemperatureCompensation+0xe6>
 8025db6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8025dba:	2800      	cmp	r0, #0
 8025dbc:	d1ea      	bne.n	8025d94 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x110>
 8025dbe:	ea9c 0f04 	teq	ip, r4
 8025dc2:	d5a8      	bpl.n	8025d16 <Argus_Cal_ApplyFrequencyTemperatureCompensation+0x92>
 8025dc4:	4686      	mov	lr, r0
 8025dc6:	f1ce 0300 	rsb	r3, lr, #0
 8025dca:	fba3 3202 	umull	r3, r2, r3, r2
 8025dce:	0c18      	lsrs	r0, r3, #16
 8025dd0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8025dd4:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8025dd8:	4418      	add	r0, r3
 8025dda:	bd30      	pop	{r4, r5, pc}

08025ddc <Argus_Cal_GetGlobalRangeOffset>:
 8025ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025dde:	f9b0 7028 	ldrsh.w	r7, [r0, #40]	@ 0x28
 8025de2:	f9b0 54ac 	ldrsh.w	r5, [r0, #1196]	@ 0x4ac
 8025de6:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8025dea:	429f      	cmp	r7, r3
 8025dec:	4604      	mov	r4, r0
 8025dee:	460e      	mov	r6, r1
 8025df0:	d05d      	beq.n	8025eae <Argus_Cal_GetGlobalRangeOffset+0xd2>
 8025df2:	f3c1 3142 	ubfx	r1, r1, #13, #3
 8025df6:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8025dfa:	2f00      	cmp	r7, #0
 8025dfc:	bfc8      	it	gt
 8025dfe:	3101      	addgt	r1, #1
 8025e00:	f991 320c 	ldrsb.w	r3, [r1, #524]	@ 0x20c
 8025e04:	fb13 f307 	smulbb	r3, r3, r7
 8025e08:	2b00      	cmp	r3, #0
 8025e0a:	ea4f 3796 	mov.w	r7, r6, lsr #14
 8025e0e:	da2f      	bge.n	8025e70 <Argus_Cal_GetGlobalRangeOffset+0x94>
 8025e10:	425b      	negs	r3, r3
 8025e12:	f3c3 2100 	ubfx	r1, r3, #8, #1
 8025e16:	eb01 2353 	add.w	r3, r1, r3, lsr #9
 8025e1a:	1aed      	subs	r5, r5, r3
 8025e1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8025e20:	429a      	cmp	r2, r3
 8025e22:	d01e      	beq.n	8025e62 <Argus_Cal_GetGlobalRangeOffset+0x86>
 8025e24:	f8b4 0490 	ldrh.w	r0, [r4, #1168]	@ 0x490
 8025e28:	1a82      	subs	r2, r0, r2
 8025e2a:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
 8025e2c:	fb02 f000 	mul.w	r0, r2, r0
 8025e30:	1100      	asrs	r0, r0, #4
 8025e32:	f004 f92d 	bl	802a090 <fp_exp16>
 8025e36:	f9b4 3498 	ldrsh.w	r3, [r4, #1176]	@ 0x498
 8025e3a:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 8025e3e:	bf28      	it	cs
 8025e40:	f44f 3000 	movcs.w	r0, #131072	@ 0x20000
 8025e44:	2b00      	cmp	r3, #0
 8025e46:	db25      	blt.n	8025e94 <Argus_Cal_GetGlobalRangeOffset+0xb8>
 8025e48:	17d9      	asrs	r1, r3, #31
 8025e4a:	fba3 3200 	umull	r3, r2, r3, r0
 8025e4e:	fb00 2001 	mla	r0, r0, r1, r2
 8025e52:	0c1a      	lsrs	r2, r3, #16
 8025e54:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8025e58:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8025e5c:	4413      	add	r3, r2
 8025e5e:	fa05 f583 	sxtah	r5, r5, r3
 8025e62:	04b3      	lsls	r3, r6, #18
 8025e64:	d50a      	bpl.n	8025e7c <Argus_Cal_GetGlobalRangeOffset+0xa0>
 8025e66:	f9b4 02a4 	ldrsh.w	r0, [r4, #676]	@ 0x2a4
 8025e6a:	4428      	add	r0, r5
 8025e6c:	01c0      	lsls	r0, r0, #7
 8025e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025e70:	f3c3 2100 	ubfx	r1, r3, #8, #1
 8025e74:	eb01 2353 	add.w	r3, r1, r3, lsr #9
 8025e78:	441d      	add	r5, r3
 8025e7a:	e7cf      	b.n	8025e1c <Argus_Cal_GetGlobalRangeOffset+0x40>
 8025e7c:	f007 0703 	and.w	r7, r7, #3
 8025e80:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 8025e84:	f9b4 32a2 	ldrsh.w	r3, [r4, #674]	@ 0x2a2
 8025e88:	f9b7 04a4 	ldrsh.w	r0, [r7, #1188]	@ 0x4a4
 8025e8c:	441d      	add	r5, r3
 8025e8e:	4428      	add	r0, r5
 8025e90:	01c0      	lsls	r0, r0, #7
 8025e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025e94:	425b      	negs	r3, r3
 8025e96:	17d9      	asrs	r1, r3, #31
 8025e98:	fba3 3200 	umull	r3, r2, r3, r0
 8025e9c:	fb00 2001 	mla	r0, r0, r1, r2
 8025ea0:	0c1a      	lsrs	r2, r3, #16
 8025ea2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8025ea6:	f343 33c0 	sbfx	r3, r3, #15, #1
 8025eaa:	1a9b      	subs	r3, r3, r2
 8025eac:	e7d7      	b.n	8025e5e <Argus_Cal_GetGlobalRangeOffset+0x82>
 8025eae:	0b8f      	lsrs	r7, r1, #14
 8025eb0:	e7b4      	b.n	8025e1c <Argus_Cal_GetGlobalRangeOffset+0x40>
 8025eb2:	bf00      	nop

08025eb4 <Argus_Cal_ApplyPixelOffsetCompensation>:
 8025eb4:	698b      	ldr	r3, [r1, #24]
 8025eb6:	f013 0f08 	tst.w	r3, #8
 8025eba:	bf14      	ite	ne
 8025ebc:	f04f 0c09 	movne.w	ip, #9
 8025ec0:	f04f 0ca1 	moveq.w	ip, #161	@ 0xa1
 8025ec4:	049b      	lsls	r3, r3, #18
 8025ec6:	bf4c      	ite	mi
 8025ec8:	f500 72d4 	addmi.w	r2, r0, #424	@ 0x1a8
 8025ecc:	f500 72b3 	addpl.w	r2, r0, #358	@ 0x166
 8025ed0:	f101 0334 	add.w	r3, r1, #52	@ 0x34
 8025ed4:	f501 70e0 	add.w	r0, r1, #448	@ 0x1c0
 8025ed8:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8025edc:	ea1c 0f01 	tst.w	ip, r1
 8025ee0:	d119      	bne.n	8025f16 <Argus_Cal_ApplyPixelOffsetCompensation+0x62>
 8025ee2:	b500      	push	{lr}
 8025ee4:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 8025ee8:	f9b2 e000 	ldrsh.w	lr, [r2]
 8025eec:	eba1 11ce 	sub.w	r1, r1, lr, lsl #7
 8025ef0:	f843 1c0c 	str.w	r1, [r3, #-12]
 8025ef4:	330c      	adds	r3, #12
 8025ef6:	4283      	cmp	r3, r0
 8025ef8:	f102 0202 	add.w	r2, r2, #2
 8025efc:	d009      	beq.n	8025f12 <Argus_Cal_ApplyPixelOffsetCompensation+0x5e>
 8025efe:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8025f02:	ea1c 0f01 	tst.w	ip, r1
 8025f06:	d0ed      	beq.n	8025ee4 <Argus_Cal_ApplyPixelOffsetCompensation+0x30>
 8025f08:	330c      	adds	r3, #12
 8025f0a:	4283      	cmp	r3, r0
 8025f0c:	f102 0202 	add.w	r2, r2, #2
 8025f10:	d1f5      	bne.n	8025efe <Argus_Cal_ApplyPixelOffsetCompensation+0x4a>
 8025f12:	f85d fb04 	ldr.w	pc, [sp], #4
 8025f16:	330c      	adds	r3, #12
 8025f18:	4283      	cmp	r3, r0
 8025f1a:	f102 0202 	add.w	r2, r2, #2
 8025f1e:	d1db      	bne.n	8025ed8 <Argus_Cal_ApplyPixelOffsetCompensation+0x24>
 8025f20:	4770      	bx	lr
 8025f22:	bf00      	nop

08025f24 <Argus_Cal_ApplyTempCalibration>:
 8025f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025f28:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	@ 0x28
 8025f2c:	f647 77ff 	movw	r7, #32767	@ 0x7fff
 8025f30:	42bb      	cmp	r3, r7
 8025f32:	d042      	beq.n	8025fba <Argus_Cal_ApplyTempCalibration+0x96>
 8025f34:	4604      	mov	r4, r0
 8025f36:	f500 7101 	add.w	r1, r0, #516	@ 0x204
 8025f3a:	f7fe fb6b 	bl	8024614 <UpdateAPDVoltage>
 8025f3e:	f9b4 1028 	ldrsh.w	r1, [r4, #40]	@ 0x28
 8025f42:	f994 5476 	ldrsb.w	r5, [r4, #1142]	@ 0x476
 8025f46:	f894 6471 	ldrb.w	r6, [r4, #1137]	@ 0x471
 8025f4a:	f894 8474 	ldrb.w	r8, [r4, #1140]	@ 0x474
 8025f4e:	f894 3470 	ldrb.w	r3, [r4, #1136]	@ 0x470
 8025f52:	f894 c472 	ldrb.w	ip, [r4, #1138]	@ 0x472
 8025f56:	f894 2473 	ldrb.w	r2, [r4, #1139]	@ 0x473
 8025f5a:	f894 e475 	ldrb.w	lr, [r4, #1141]	@ 0x475
 8025f5e:	f994 9477 	ldrsb.w	r9, [r4, #1143]	@ 0x477
 8025f62:	f8d4 04c0 	ldr.w	r0, [r4, #1216]	@ 0x4c0
 8025f66:	42b9      	cmp	r1, r7
 8025f68:	bf14      	ite	ne
 8025f6a:	120c      	asrne	r4, r1, #8
 8025f6c:	2400      	moveq	r4, #0
 8025f6e:	f1a5 011e 	sub.w	r1, r5, #30
 8025f72:	42a1      	cmp	r1, r4
 8025f74:	bfb8      	it	lt
 8025f76:	4621      	movlt	r1, r4
 8025f78:	f1a9 041e 	sub.w	r4, r9, #30
 8025f7c:	42a1      	cmp	r1, r4
 8025f7e:	bfa8      	it	ge
 8025f80:	4621      	movge	r1, r4
 8025f82:	fb01 fe0e 	mul.w	lr, r1, lr
 8025f86:	fb01 f40c 	mul.w	r4, r1, ip
 8025f8a:	eb0e 1ec8 	add.w	lr, lr, r8, lsl #7
 8025f8e:	eb04 14c6 	add.w	r4, r4, r6, lsl #7
 8025f92:	02d2      	lsls	r2, r2, #11
 8025f94:	02db      	lsls	r3, r3, #11
 8025f96:	fb01 220e 	mla	r2, r1, lr, r2
 8025f9a:	fb01 3304 	mla	r3, r1, r4, r3
 8025f9e:	fb01 f202 	mul.w	r2, r1, r2
 8025fa2:	fb03 f101 	mul.w	r1, r3, r1
 8025fa6:	f102 7280 	add.w	r2, r2, #16777216	@ 0x1000000
 8025faa:	f101 7180 	add.w	r1, r1, #16777216	@ 0x1000000
 8025fae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025fb2:	1212      	asrs	r2, r2, #8
 8025fb4:	1209      	asrs	r1, r1, #8
 8025fb6:	f7fb bd3b 	b.w	8021a30 <Argus_Dev_UpdateLaserTemperatureCompensation>
 8025fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025fbe:	bf00      	nop

08025fc0 <Argus_Cal_ApplyAuxCalibration>:
 8025fc0:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8025fc4:	b570      	push	{r4, r5, r6, lr}
 8025fc6:	f647 74ff 	movw	r4, #32767	@ 0x7fff
 8025fca:	42a3      	cmp	r3, r4
 8025fcc:	f000 80d1 	beq.w	8026172 <Argus_Cal_ApplyAuxCalibration+0x1b2>
 8025fd0:	f8b0 c49e 	ldrh.w	ip, [r0, #1182]	@ 0x49e
 8025fd4:	f8b0 4482 	ldrh.w	r4, [r0, #1154]	@ 0x482
 8025fd8:	f5ac 4c00 	sub.w	ip, ip, #32768	@ 0x8000
 8025fdc:	eba3 030c 	sub.w	r3, r3, ip
 8025fe0:	fb04 f303 	mul.w	r3, r4, r3
 8025fe4:	2b00      	cmp	r3, #0
 8025fe6:	f2c0 80bd 	blt.w	8026164 <Argus_Cal_ApplyAuxCalibration+0x1a4>
 8025fea:	f3c3 2c80 	ubfx	ip, r3, #10, #1
 8025fee:	eb0c 23d3 	add.w	r3, ip, r3, lsr #11
 8025ff2:	4c89      	ldr	r4, [pc, #548]	@ (8026218 <Argus_Cal_ApplyAuxCalibration+0x258>)
 8025ff4:	42a3      	cmp	r3, r4
 8025ff6:	f647 75ff 	movw	r5, #32767	@ 0x7fff
 8025ffa:	bfb8      	it	lt
 8025ffc:	4623      	movlt	r3, r4
 8025ffe:	f9b0 4028 	ldrsh.w	r4, [r0, #40]	@ 0x28
 8026002:	42ab      	cmp	r3, r5
 8026004:	bfa8      	it	ge
 8026006:	462b      	movge	r3, r5
 8026008:	42ac      	cmp	r4, r5
 802600a:	d00d      	beq.n	8026028 <Argus_Cal_ApplyAuxCalibration+0x68>
 802600c:	f890 502a 	ldrb.w	r5, [r0, #42]	@ 0x2a
 8026010:	b155      	cbz	r5, 8026028 <Argus_Cal_ApplyAuxCalibration+0x68>
 8026012:	1b1b      	subs	r3, r3, r4
 8026014:	0224      	lsls	r4, r4, #8
 8026016:	fb05 4303 	mla	r3, r5, r3, r4
 802601a:	2b00      	cmp	r3, #0
 802601c:	f2c0 80e6 	blt.w	80261ec <Argus_Cal_ApplyAuxCalibration+0x22c>
 8026020:	f3c3 14c0 	ubfx	r4, r3, #7, #1
 8026024:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8026028:	b21b      	sxth	r3, r3
 802602a:	111c      	asrs	r4, r3, #4
 802602c:	f504 74f0 	add.w	r4, r4, #480	@ 0x1e0
 8026030:	8503      	strh	r3, [r0, #40]	@ 0x28
 8026032:	804c      	strh	r4, [r1, #2]
 8026034:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8026038:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 802603c:	45a6      	cmp	lr, r4
 802603e:	d043      	beq.n	80260c8 <Argus_Cal_ApplyAuxCalibration+0x108>
 8026040:	f5ae 4c00 	sub.w	ip, lr, #32768	@ 0x8000
 8026044:	fb03 fc0c 	mul.w	ip, r3, ip
 8026048:	f1bc 0f00 	cmp.w	ip, #0
 802604c:	f890 4488 	ldrb.w	r4, [r0, #1160]	@ 0x488
 8026050:	f2c0 8091 	blt.w	8026176 <Argus_Cal_ApplyAuxCalibration+0x1b6>
 8026054:	fa1f f58c 	uxth.w	r5, ip
 8026058:	fb04 f505 	mul.w	r5, r4, r5
 802605c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8026060:	fb04 fc0c 	mul.w	ip, r4, ip
 8026064:	0d2c      	lsrs	r4, r5, #20
 8026066:	eb04 141c 	add.w	r4, r4, ip, lsr #4
 802606a:	f3cc 0cc0 	ubfx	ip, ip, #3, #1
 802606e:	44a4      	add	ip, r4
 8026070:	f3c5 45c0 	ubfx	r5, r5, #19, #1
 8026074:	44ac      	add	ip, r5
 8026076:	44f4      	add	ip, lr
 8026078:	ea2c 7eec 	bic.w	lr, ip, ip, asr #31
 802607c:	f64f 74fe 	movw	r4, #65534	@ 0xfffe
 8026080:	45a6      	cmp	lr, r4
 8026082:	8dc6      	ldrh	r6, [r0, #46]	@ 0x2e
 8026084:	bfa8      	it	ge
 8026086:	46a6      	movge	lr, r4
 8026088:	f8a1 e004 	strh.w	lr, [r1, #4]
 802608c:	b1e6      	cbz	r6, 80260c8 <Argus_Cal_ApplyAuxCalibration+0x108>
 802608e:	f64f 74fd 	movw	r4, #65533	@ 0xfffd
 8026092:	45a4      	cmp	ip, r4
 8026094:	dc18      	bgt.n	80260c8 <Argus_Cal_ApplyAuxCalibration+0x108>
 8026096:	0752      	lsls	r2, r2, #29
 8026098:	f8b0 c490 	ldrh.w	ip, [r0, #1168]	@ 0x490
 802609c:	8e05      	ldrh	r5, [r0, #48]	@ 0x30
 802609e:	f100 80ac 	bmi.w	80261fa <Argus_Cal_ApplyAuxCalibration+0x23a>
 80260a2:	f1a5 0210 	sub.w	r2, r5, #16
 80260a6:	fb0e f202 	mul.w	r2, lr, r2
 80260aa:	f105 0410 	add.w	r4, r5, #16
 80260ae:	fb06 2214 	mls	r2, r6, r4, r2
 80260b2:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 80260b6:	fb92 f2f5 	sdiv	r2, r2, r5
 80260ba:	b292      	uxth	r2, r2
 80260bc:	f64f 74fe 	movw	r4, #65534	@ 0xfffe
 80260c0:	42a2      	cmp	r2, r4
 80260c2:	bf28      	it	cs
 80260c4:	4622      	movcs	r2, r4
 80260c6:	808a      	strh	r2, [r1, #4]
 80260c8:	f8b1 c000 	ldrh.w	ip, [r1]
 80260cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80260d0:	4594      	cmp	ip, r2
 80260d2:	d020      	beq.n	8026116 <Argus_Cal_ApplyAuxCalibration+0x156>
 80260d4:	f5ac 4200 	sub.w	r2, ip, #32768	@ 0x8000
 80260d8:	fb03 f202 	mul.w	r2, r3, r2
 80260dc:	2a00      	cmp	r2, #0
 80260de:	f890 5488 	ldrb.w	r5, [r0, #1160]	@ 0x488
 80260e2:	db5e      	blt.n	80261a2 <Argus_Cal_ApplyAuxCalibration+0x1e2>
 80260e4:	b294      	uxth	r4, r2
 80260e6:	fb05 f404 	mul.w	r4, r5, r4
 80260ea:	0c12      	lsrs	r2, r2, #16
 80260ec:	fb05 f202 	mul.w	r2, r5, r2
 80260f0:	ea4f 5e14 	mov.w	lr, r4, lsr #20
 80260f4:	eb0e 1e12 	add.w	lr, lr, r2, lsr #4
 80260f8:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 80260fc:	4472      	add	r2, lr
 80260fe:	f3c4 44c0 	ubfx	r4, r4, #19, #1
 8026102:	4422      	add	r2, r4
 8026104:	4462      	add	r2, ip
 8026106:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802610a:	f64f 74fe 	movw	r4, #65534	@ 0xfffe
 802610e:	42a2      	cmp	r2, r4
 8026110:	bfa8      	it	ge
 8026112:	4622      	movge	r2, r4
 8026114:	800a      	strh	r2, [r1, #0]
 8026116:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 802611a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 802611e:	4594      	cmp	ip, r2
 8026120:	d01f      	beq.n	8026162 <Argus_Cal_ApplyAuxCalibration+0x1a2>
 8026122:	f5ac 4200 	sub.w	r2, ip, #32768	@ 0x8000
 8026126:	fb02 f303 	mul.w	r3, r2, r3
 802612a:	2b00      	cmp	r3, #0
 802612c:	f890 2488 	ldrb.w	r2, [r0, #1160]	@ 0x488
 8026130:	db4a      	blt.n	80261c8 <Argus_Cal_ApplyAuxCalibration+0x208>
 8026132:	0c18      	lsrs	r0, r3, #16
 8026134:	b29b      	uxth	r3, r3
 8026136:	fb02 f303 	mul.w	r3, r2, r3
 802613a:	fb02 f000 	mul.w	r0, r2, r0
 802613e:	0d1a      	lsrs	r2, r3, #20
 8026140:	eb02 1210 	add.w	r2, r2, r0, lsr #4
 8026144:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8026148:	4402      	add	r2, r0
 802614a:	f3c3 43c0 	ubfx	r3, r3, #19, #1
 802614e:	4413      	add	r3, r2
 8026150:	4463      	add	r3, ip
 8026152:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8026156:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 802615a:	4293      	cmp	r3, r2
 802615c:	bfa8      	it	ge
 802615e:	4613      	movge	r3, r2
 8026160:	80cb      	strh	r3, [r1, #6]
 8026162:	bd70      	pop	{r4, r5, r6, pc}
 8026164:	425b      	negs	r3, r3
 8026166:	f3c3 2c80 	ubfx	ip, r3, #10, #1
 802616a:	eb0c 23d3 	add.w	r3, ip, r3, lsr #11
 802616e:	425b      	negs	r3, r3
 8026170:	e73f      	b.n	8025ff2 <Argus_Cal_ApplyAuxCalibration+0x32>
 8026172:	8503      	strh	r3, [r0, #40]	@ 0x28
 8026174:	e75e      	b.n	8026034 <Argus_Cal_ApplyAuxCalibration+0x74>
 8026176:	f1cc 0c00 	rsb	ip, ip, #0
 802617a:	fa1f f58c 	uxth.w	r5, ip
 802617e:	fb04 f505 	mul.w	r5, r4, r5
 8026182:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8026186:	fb04 fc0c 	mul.w	ip, r4, ip
 802618a:	0d2c      	lsrs	r4, r5, #20
 802618c:	eb04 141c 	add.w	r4, r4, ip, lsr #4
 8026190:	f3cc 0cc0 	ubfx	ip, ip, #3, #1
 8026194:	44a4      	add	ip, r4
 8026196:	f3c5 45c0 	ubfx	r5, r5, #19, #1
 802619a:	44ac      	add	ip, r5
 802619c:	f1cc 0c00 	rsb	ip, ip, #0
 80261a0:	e769      	b.n	8026076 <Argus_Cal_ApplyAuxCalibration+0xb6>
 80261a2:	4252      	negs	r2, r2
 80261a4:	b294      	uxth	r4, r2
 80261a6:	fb05 f404 	mul.w	r4, r5, r4
 80261aa:	0c12      	lsrs	r2, r2, #16
 80261ac:	fb05 f202 	mul.w	r2, r5, r2
 80261b0:	ea4f 5e14 	mov.w	lr, r4, lsr #20
 80261b4:	eb0e 1e12 	add.w	lr, lr, r2, lsr #4
 80261b8:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 80261bc:	4472      	add	r2, lr
 80261be:	f3c4 44c0 	ubfx	r4, r4, #19, #1
 80261c2:	4422      	add	r2, r4
 80261c4:	4252      	negs	r2, r2
 80261c6:	e79d      	b.n	8026104 <Argus_Cal_ApplyAuxCalibration+0x144>
 80261c8:	425b      	negs	r3, r3
 80261ca:	0c18      	lsrs	r0, r3, #16
 80261cc:	b29b      	uxth	r3, r3
 80261ce:	fb02 f303 	mul.w	r3, r2, r3
 80261d2:	fb02 f000 	mul.w	r0, r2, r0
 80261d6:	0d1a      	lsrs	r2, r3, #20
 80261d8:	eb02 1210 	add.w	r2, r2, r0, lsr #4
 80261dc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 80261e0:	4402      	add	r2, r0
 80261e2:	f3c3 43c0 	ubfx	r3, r3, #19, #1
 80261e6:	4413      	add	r3, r2
 80261e8:	425b      	negs	r3, r3
 80261ea:	e7b1      	b.n	8026150 <Argus_Cal_ApplyAuxCalibration+0x190>
 80261ec:	425b      	negs	r3, r3
 80261ee:	f3c3 14c0 	ubfx	r4, r3, #7, #1
 80261f2:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 80261f6:	425b      	negs	r3, r3
 80261f8:	e716      	b.n	8026028 <Argus_Cal_ApplyAuxCalibration+0x68>
 80261fa:	f1a5 0410 	sub.w	r4, r5, #16
 80261fe:	fb06 f404 	mul.w	r4, r6, r4
 8026202:	f105 0210 	add.w	r2, r5, #16
 8026206:	fb0e 4202 	mla	r2, lr, r2, r4
 802620a:	eba2 120c 	sub.w	r2, r2, ip, lsl #4
 802620e:	fb92 f2f5 	sdiv	r2, r2, r5
 8026212:	b292      	uxth	r2, r2
 8026214:	e752      	b.n	80260bc <Argus_Cal_ApplyAuxCalibration+0xfc>
 8026216:	bf00      	nop
 8026218:	ffff8000 	.word	0xffff8000

0802621c <Argus_Cal_UpdateLddXtalkVectors>:
 802621c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026220:	b089      	sub	sp, #36	@ 0x24
 8026222:	460c      	mov	r4, r1
 8026224:	9105      	str	r1, [sp, #20]
 8026226:	f9b0 1028 	ldrsh.w	r1, [r0, #40]	@ 0x28
 802622a:	69a4      	ldr	r4, [r4, #24]
 802622c:	9107      	str	r1, [sp, #28]
 802622e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8026232:	4299      	cmp	r1, r3
 8026234:	9404      	str	r4, [sp, #16]
 8026236:	4691      	mov	r9, r2
 8026238:	f000 813f 	beq.w	80264ba <Argus_Cal_UpdateLddXtalkVectors+0x29e>
 802623c:	f8d0 54c0 	ldr.w	r5, [r0, #1216]	@ 0x4c0
 8026240:	f8d5 21c4 	ldr.w	r2, [r5, #452]	@ 0x1c4
 8026244:	f3c4 0380 	ubfx	r3, r4, #2, #1
 8026248:	8a14      	ldrh	r4, [r2, #16]
 802624a:	2900      	cmp	r1, #0
 802624c:	fb04 f201 	mul.w	r2, r4, r1
 8026250:	bfd4      	ite	le
 8026252:	2600      	movle	r6, #0
 8026254:	2601      	movgt	r6, #1
 8026256:	2a00      	cmp	r2, #0
 8026258:	f280 8129 	bge.w	80264ae <Argus_Cal_UpdateLddXtalkVectors+0x292>
 802625c:	4252      	negs	r2, r2
 802625e:	f3c2 2140 	ubfx	r1, r2, #9, #1
 8026262:	eb01 2292 	add.w	r2, r1, r2, lsr #10
 8026266:	4252      	negs	r2, r2
 8026268:	b212      	sxth	r2, r2
 802626a:	eb06 0743 	add.w	r7, r6, r3, lsl #1
 802626e:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 8026272:	005b      	lsls	r3, r3, #1
 8026274:	f9b7 1430 	ldrsh.w	r1, [r7, #1072]	@ 0x430
 8026278:	fb02 fc01 	mul.w	ip, r2, r1
 802627c:	f1bc 0f00 	cmp.w	ip, #0
 8026280:	f280 8128 	bge.w	80264d4 <Argus_Cal_UpdateLddXtalkVectors+0x2b8>
 8026284:	f1cc 0c00 	rsb	ip, ip, #0
 8026288:	f3cc 4180 	ubfx	r1, ip, #18, #1
 802628c:	eb01 41dc 	add.w	r1, r1, ip, lsr #19
 8026290:	4249      	negs	r1, r1
 8026292:	4249      	negs	r1, r1
 8026294:	f8a0 113a 	strh.w	r1, [r0, #314]	@ 0x13a
 8026298:	f9b7 1432 	ldrsh.w	r1, [r7, #1074]	@ 0x432
 802629c:	fb02 f101 	mul.w	r1, r2, r1
 80262a0:	2900      	cmp	r1, #0
 80262a2:	f2c0 812a 	blt.w	80264fa <Argus_Cal_UpdateLddXtalkVectors+0x2de>
 80262a6:	f3c1 4780 	ubfx	r7, r1, #18, #1
 80262aa:	eb07 41d1 	add.w	r1, r7, r1, lsr #19
 80262ae:	4249      	negs	r1, r1
 80262b0:	f8a0 113c 	strh.w	r1, [r0, #316]	@ 0x13c
 80262b4:	1999      	adds	r1, r3, r6
 80262b6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80262ba:	f9b1 1434 	ldrsh.w	r1, [r1, #1076]	@ 0x434
 80262be:	fb02 f101 	mul.w	r1, r2, r1
 80262c2:	2900      	cmp	r1, #0
 80262c4:	f2c0 8112 	blt.w	80264ec <Argus_Cal_UpdateLddXtalkVectors+0x2d0>
 80262c8:	f3c1 4780 	ubfx	r7, r1, #18, #1
 80262cc:	eb07 41d1 	add.w	r1, r7, r1, lsr #19
 80262d0:	4433      	add	r3, r6
 80262d2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80262d6:	4249      	negs	r1, r1
 80262d8:	f9b3 3436 	ldrsh.w	r3, [r3, #1078]	@ 0x436
 80262dc:	f8a0 113e 	strh.w	r1, [r0, #318]	@ 0x13e
 80262e0:	fb03 f202 	mul.w	r2, r3, r2
 80262e4:	2a00      	cmp	r2, #0
 80262e6:	f2c0 80fa 	blt.w	80264de <Argus_Cal_UpdateLddXtalkVectors+0x2c2>
 80262ea:	f3c2 4380 	ubfx	r3, r2, #18, #1
 80262ee:	eb03 42d2 	add.w	r2, r3, r2, lsr #19
 80262f2:	f8d5 511c 	ldr.w	r5, [r5, #284]	@ 0x11c
 80262f6:	f895 30e0 	ldrb.w	r3, [r5, #224]	@ 0xe0
 80262fa:	4252      	negs	r2, r2
 80262fc:	f8a0 2140 	strh.w	r2, [r0, #320]	@ 0x140
 8026300:	2b00      	cmp	r3, #0
 8026302:	f000 8101 	beq.w	8026508 <Argus_Cal_UpdateLddXtalkVectors+0x2ec>
 8026306:	2700      	movs	r7, #0
 8026308:	9b05      	ldr	r3, [sp, #20]
 802630a:	463e      	mov	r6, r7
 802630c:	463a      	mov	r2, r7
 802630e:	f893 1030 	ldrb.w	r1, [r3, #48]	@ 0x30
 8026312:	f011 0f01 	tst.w	r1, #1
 8026316:	d110      	bne.n	802633a <Argus_Cal_UpdateLddXtalkVectors+0x11e>
 8026318:	0789      	lsls	r1, r1, #30
 802631a:	f100 8191 	bmi.w	8026640 <Argus_Cal_UpdateLddXtalkVectors+0x424>
 802631e:	f8b3 c032 	ldrh.w	ip, [r3, #50]	@ 0x32
 8026322:	f8d5 10ec 	ldr.w	r1, [r5, #236]	@ 0xec
 8026326:	4566      	cmp	r6, ip
 8026328:	fa21 f102 	lsr.w	r1, r1, r2
 802632c:	bf38      	it	cc
 802632e:	4666      	movcc	r6, ip
 8026330:	07c9      	lsls	r1, r1, #31
 8026332:	d502      	bpl.n	802633a <Argus_Cal_UpdateLddXtalkVectors+0x11e>
 8026334:	4567      	cmp	r7, ip
 8026336:	bf38      	it	cc
 8026338:	4667      	movcc	r7, ip
 802633a:	3201      	adds	r2, #1
 802633c:	2a20      	cmp	r2, #32
 802633e:	f103 030c 	add.w	r3, r3, #12
 8026342:	d1e4      	bne.n	802630e <Argus_Cal_UpdateLddXtalkVectors+0xf2>
 8026344:	9b05      	ldr	r3, [sp, #20]
 8026346:	8b9a      	ldrh	r2, [r3, #28]
 8026348:	0293      	lsls	r3, r2, #10
 802634a:	b16a      	cbz	r2, 8026368 <Argus_Cal_UpdateLddXtalkVectors+0x14c>
 802634c:	429c      	cmp	r4, r3
 802634e:	4621      	mov	r1, r4
 8026350:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8026354:	f240 8177 	bls.w	8026646 <Argus_Cal_UpdateLddXtalkVectors+0x42a>
 8026358:	005b      	lsls	r3, r3, #1
 802635a:	429c      	cmp	r4, r3
 802635c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8026360:	d8fa      	bhi.n	8026358 <Argus_Cal_UpdateLddXtalkVectors+0x13c>
 8026362:	2a00      	cmp	r2, #0
 8026364:	f040 816f 	bne.w	8026646 <Argus_Cal_UpdateLddXtalkVectors+0x42a>
 8026368:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 802636c:	f890 3164 	ldrb.w	r3, [r0, #356]	@ 0x164
 8026370:	fb04 f606 	mul.w	r6, r4, r6
 8026374:	09b6      	lsrs	r6, r6, #6
 8026376:	2b00      	cmp	r3, #0
 8026378:	f000 80d2 	beq.w	8026520 <Argus_Cal_UpdateLddXtalkVectors+0x304>
 802637c:	9b04      	ldr	r3, [sp, #16]
 802637e:	039a      	lsls	r2, r3, #14
 8026380:	f100 8179 	bmi.w	8026676 <Argus_Cal_UpdateLddXtalkVectors+0x45a>
 8026384:	2300      	movs	r3, #0
 8026386:	f880 3164 	strb.w	r3, [r0, #356]	@ 0x164
 802638a:	9b07      	ldr	r3, [sp, #28]
 802638c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8026390:	4293      	cmp	r3, r2
 8026392:	f000 8089 	beq.w	80264a8 <Argus_Cal_UpdateLddXtalkVectors+0x28c>
 8026396:	f9b0 3162 	ldrsh.w	r3, [r0, #354]	@ 0x162
 802639a:	4293      	cmp	r3, r2
 802639c:	f000 8084 	beq.w	80264a8 <Argus_Cal_UpdateLddXtalkVectors+0x28c>
 80263a0:	9a07      	ldr	r2, [sp, #28]
 80263a2:	1ad3      	subs	r3, r2, r3
 80263a4:	2b00      	cmp	r3, #0
 80263a6:	bfb8      	it	lt
 80263a8:	425b      	neglt	r3, r3
 80263aa:	f995 20e2 	ldrsb.w	r2, [r5, #226]	@ 0xe2
 80263ae:	b21b      	sxth	r3, r3
 80263b0:	ebb3 2f02 	cmp.w	r3, r2, lsl #8
 80263b4:	dd78      	ble.n	80264a8 <Argus_Cal_UpdateLddXtalkVectors+0x28c>
 80263b6:	9b04      	ldr	r3, [sp, #16]
 80263b8:	f895 20e1 	ldrb.w	r2, [r5, #225]	@ 0xe1
 80263bc:	f003 0306 	and.w	r3, r3, #6
 80263c0:	f1a3 0306 	sub.w	r3, r3, #6
 80263c4:	fab3 f383 	clz	r3, r3
 80263c8:	095b      	lsrs	r3, r3, #5
 80263ca:	eb00 1403 	add.w	r4, r0, r3, lsl #4
 80263ce:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80263d2:	f9b4 1142 	ldrsh.w	r1, [r4, #322]	@ 0x142
 80263d6:	b292      	uxth	r2, r2
 80263d8:	fb02 f101 	mul.w	r1, r2, r1
 80263dc:	2900      	cmp	r1, #0
 80263de:	bfbb      	ittet	lt
 80263e0:	4249      	neglt	r1, r1
 80263e2:	0a09      	lsrlt	r1, r1, #8
 80263e4:	0a09      	lsrge	r1, r1, #8
 80263e6:	4249      	neglt	r1, r1
 80263e8:	f8a4 1142 	strh.w	r1, [r4, #322]	@ 0x142
 80263ec:	f9b4 1144 	ldrsh.w	r1, [r4, #324]	@ 0x144
 80263f0:	fb02 f101 	mul.w	r1, r2, r1
 80263f4:	2900      	cmp	r1, #0
 80263f6:	bfbb      	ittet	lt
 80263f8:	4249      	neglt	r1, r1
 80263fa:	0a09      	lsrlt	r1, r1, #8
 80263fc:	0a09      	lsrge	r1, r1, #8
 80263fe:	4249      	neglt	r1, r1
 8026400:	009b      	lsls	r3, r3, #2
 8026402:	f8a4 1144 	strh.w	r1, [r4, #324]	@ 0x144
 8026406:	1c5c      	adds	r4, r3, #1
 8026408:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 802640c:	f9b4 1142 	ldrsh.w	r1, [r4, #322]	@ 0x142
 8026410:	fb02 f101 	mul.w	r1, r2, r1
 8026414:	2900      	cmp	r1, #0
 8026416:	bfbb      	ittet	lt
 8026418:	4249      	neglt	r1, r1
 802641a:	0a09      	lsrlt	r1, r1, #8
 802641c:	0a09      	lsrge	r1, r1, #8
 802641e:	4249      	neglt	r1, r1
 8026420:	f8a4 1142 	strh.w	r1, [r4, #322]	@ 0x142
 8026424:	f9b4 1144 	ldrsh.w	r1, [r4, #324]	@ 0x144
 8026428:	fb02 f101 	mul.w	r1, r2, r1
 802642c:	2900      	cmp	r1, #0
 802642e:	bfbb      	ittet	lt
 8026430:	4249      	neglt	r1, r1
 8026432:	0a09      	lsrlt	r1, r1, #8
 8026434:	0a09      	lsrge	r1, r1, #8
 8026436:	4249      	neglt	r1, r1
 8026438:	f8a4 1144 	strh.w	r1, [r4, #324]	@ 0x144
 802643c:	1c9c      	adds	r4, r3, #2
 802643e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8026442:	3303      	adds	r3, #3
 8026444:	f9b4 1142 	ldrsh.w	r1, [r4, #322]	@ 0x142
 8026448:	fb02 f101 	mul.w	r1, r2, r1
 802644c:	2900      	cmp	r1, #0
 802644e:	bfbb      	ittet	lt
 8026450:	4249      	neglt	r1, r1
 8026452:	0a09      	lsrlt	r1, r1, #8
 8026454:	0a09      	lsrge	r1, r1, #8
 8026456:	4249      	neglt	r1, r1
 8026458:	f8a4 1142 	strh.w	r1, [r4, #322]	@ 0x142
 802645c:	f9b4 1144 	ldrsh.w	r1, [r4, #324]	@ 0x144
 8026460:	fb02 f101 	mul.w	r1, r2, r1
 8026464:	2900      	cmp	r1, #0
 8026466:	bfbb      	ittet	lt
 8026468:	4249      	neglt	r1, r1
 802646a:	0a09      	lsrlt	r1, r1, #8
 802646c:	0a09      	lsrge	r1, r1, #8
 802646e:	4249      	neglt	r1, r1
 8026470:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8026474:	f8a4 1144 	strh.w	r1, [r4, #324]	@ 0x144
 8026478:	f9b0 3142 	ldrsh.w	r3, [r0, #322]	@ 0x142
 802647c:	fb02 f303 	mul.w	r3, r2, r3
 8026480:	2b00      	cmp	r3, #0
 8026482:	bfbd      	ittte	lt
 8026484:	425b      	neglt	r3, r3
 8026486:	0a1b      	lsrlt	r3, r3, #8
 8026488:	4259      	neglt	r1, r3
 802648a:	0a19      	lsrge	r1, r3, #8
 802648c:	f9b0 3144 	ldrsh.w	r3, [r0, #324]	@ 0x144
 8026490:	f8a0 1142 	strh.w	r1, [r0, #322]	@ 0x142
 8026494:	fb03 f202 	mul.w	r2, r3, r2
 8026498:	2a00      	cmp	r2, #0
 802649a:	bfbd      	ittte	lt
 802649c:	4252      	neglt	r2, r2
 802649e:	0a12      	lsrlt	r2, r2, #8
 80264a0:	4252      	neglt	r2, r2
 80264a2:	0a12      	lsrge	r2, r2, #8
 80264a4:	f8a0 2144 	strh.w	r2, [r0, #324]	@ 0x144
 80264a8:	b009      	add	sp, #36	@ 0x24
 80264aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80264ae:	f3c2 2140 	ubfx	r1, r2, #9, #1
 80264b2:	eb01 2292 	add.w	r2, r1, r2, lsr #10
 80264b6:	b212      	sxth	r2, r2
 80264b8:	e6d7      	b.n	802626a <Argus_Cal_UpdateLddXtalkVectors+0x4e>
 80264ba:	f8d0 54c0 	ldr.w	r5, [r0, #1216]	@ 0x4c0
 80264be:	f8d5 21c4 	ldr.w	r2, [r5, #452]	@ 0x1c4
 80264c2:	f3c4 0380 	ubfx	r3, r4, #2, #1
 80264c6:	8a14      	ldrh	r4, [r2, #16]
 80264c8:	2200      	movs	r2, #0
 80264ca:	eb00 1703 	add.w	r7, r0, r3, lsl #4
 80264ce:	4616      	mov	r6, r2
 80264d0:	005b      	lsls	r3, r3, #1
 80264d2:	4694      	mov	ip, r2
 80264d4:	f3cc 4180 	ubfx	r1, ip, #18, #1
 80264d8:	eb01 41dc 	add.w	r1, r1, ip, lsr #19
 80264dc:	e6d9      	b.n	8026292 <Argus_Cal_UpdateLddXtalkVectors+0x76>
 80264de:	4252      	negs	r2, r2
 80264e0:	f3c2 4380 	ubfx	r3, r2, #18, #1
 80264e4:	eb03 42d2 	add.w	r2, r3, r2, lsr #19
 80264e8:	4252      	negs	r2, r2
 80264ea:	e702      	b.n	80262f2 <Argus_Cal_UpdateLddXtalkVectors+0xd6>
 80264ec:	4249      	negs	r1, r1
 80264ee:	f3c1 4780 	ubfx	r7, r1, #18, #1
 80264f2:	eb07 41d1 	add.w	r1, r7, r1, lsr #19
 80264f6:	4249      	negs	r1, r1
 80264f8:	e6ea      	b.n	80262d0 <Argus_Cal_UpdateLddXtalkVectors+0xb4>
 80264fa:	4249      	negs	r1, r1
 80264fc:	f3c1 4780 	ubfx	r7, r1, #18, #1
 8026500:	eb07 41d1 	add.w	r1, r7, r1, lsr #19
 8026504:	4249      	negs	r1, r1
 8026506:	e6d2      	b.n	80262ae <Argus_Cal_UpdateLddXtalkVectors+0x92>
 8026508:	f890 3164 	ldrb.w	r3, [r0, #356]	@ 0x164
 802650c:	2b00      	cmp	r3, #0
 802650e:	d0cb      	beq.n	80264a8 <Argus_Cal_UpdateLddXtalkVectors+0x28c>
 8026510:	9b04      	ldr	r3, [sp, #16]
 8026512:	9a05      	ldr	r2, [sp, #20]
 8026514:	f043 0301 	orr.w	r3, r3, #1
 8026518:	6193      	str	r3, [r2, #24]
 802651a:	b009      	add	sp, #36	@ 0x24
 802651c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026520:	9b04      	ldr	r3, [sp, #16]
 8026522:	039b      	lsls	r3, r3, #14
 8026524:	f57f af31 	bpl.w	802638a <Argus_Cal_UpdateLddXtalkVectors+0x16e>
 8026528:	f8b5 30e6 	ldrh.w	r3, [r5, #230]	@ 0xe6
 802652c:	429e      	cmp	r6, r3
 802652e:	f4bf af2c 	bcs.w	802638a <Argus_Cal_UpdateLddXtalkVectors+0x16e>
 8026532:	f8b5 30e8 	ldrh.w	r3, [r5, #232]	@ 0xe8
 8026536:	429f      	cmp	r7, r3
 8026538:	f4bf af27 	bcs.w	802638a <Argus_Cal_UpdateLddXtalkVectors+0x16e>
 802653c:	2301      	movs	r3, #1
 802653e:	f880 3164 	strb.w	r3, [r0, #356]	@ 0x164
 8026542:	9b04      	ldr	r3, [sp, #16]
 8026544:	f003 0306 	and.w	r3, r3, #6
 8026548:	f1a3 0306 	sub.w	r3, r3, #6
 802654c:	fab3 f383 	clz	r3, r3
 8026550:	095b      	lsrs	r3, r3, #5
 8026552:	eb03 1243 	add.w	r2, r3, r3, lsl #5
 8026556:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 802655a:	0092      	lsls	r2, r2, #2
 802655c:	9303      	str	r3, [sp, #12]
 802655e:	f8d5 30ec 	ldr.w	r3, [r5, #236]	@ 0xec
 8026562:	9300      	str	r3, [sp, #0]
 8026564:	3232      	adds	r2, #50	@ 0x32
 8026566:	f895 30e1 	ldrb.w	r3, [r5, #225]	@ 0xe1
 802656a:	9202      	str	r2, [sp, #8]
 802656c:	9306      	str	r3, [sp, #24]
 802656e:	f04f 0b00 	mov.w	fp, #0
 8026572:	4682      	mov	sl, r0
 8026574:	f00b 0301 	and.w	r3, fp, #1
 8026578:	2100      	movs	r1, #0
 802657a:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 802657e:	9301      	str	r3, [sp, #4]
 8026580:	4688      	mov	r8, r1
 8026582:	468e      	mov	lr, r1
 8026584:	468c      	mov	ip, r1
 8026586:	e035      	b.n	80265f4 <Argus_Cal_UpdateLddXtalkVectors+0x3d8>
 8026588:	0cbd      	lsrs	r5, r7, #18
 802658a:	eb05 0590 	add.w	r5, r5, r0, lsr #2
 802658e:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8026592:	4428      	add	r0, r5
 8026594:	f3c7 4340 	ubfx	r3, r7, #17, #1
 8026598:	4403      	add	r3, r0
 802659a:	6877      	ldr	r7, [r6, #4]
 802659c:	b2be      	uxth	r6, r7
 802659e:	0c38      	lsrs	r0, r7, #16
 80265a0:	2f00      	cmp	r7, #0
 80265a2:	f1c7 0500 	rsb	r5, r7, #0
 80265a6:	fb04 f606 	mul.w	r6, r4, r6
 80265aa:	fb04 f000 	mul.w	r0, r4, r0
 80265ae:	db6d      	blt.n	802668c <Argus_Cal_UpdateLddXtalkVectors+0x470>
 80265b0:	0cb5      	lsrs	r5, r6, #18
 80265b2:	eb05 0590 	add.w	r5, r5, r0, lsr #2
 80265b6:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80265ba:	4428      	add	r0, r5
 80265bc:	f3c6 4640 	ubfx	r6, r6, #17, #1
 80265c0:	4406      	add	r6, r0
 80265c2:	9802      	ldr	r0, [sp, #8]
 80265c4:	9f01      	ldr	r7, [sp, #4]
 80265c6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80265ca:	eb0a 0502 	add.w	r5, sl, r2
 80265ce:	f93a 0002 	ldrsh.w	r0, [sl, r2]
 80265d2:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80265d6:	f9b7 513a 	ldrsh.w	r5, [r7, #314]	@ 0x13a
 80265da:	4428      	add	r0, r5
 80265dc:	4418      	add	r0, r3
 80265de:	f9b7 313c 	ldrsh.w	r3, [r7, #316]	@ 0x13c
 80265e2:	441a      	add	r2, r3
 80265e4:	4416      	add	r6, r2
 80265e6:	f10c 0c01 	add.w	ip, ip, #1
 80265ea:	4486      	add	lr, r0
 80265ec:	44b0      	add	r8, r6
 80265ee:	3104      	adds	r1, #4
 80265f0:	2920      	cmp	r1, #32
 80265f2:	d05c      	beq.n	80266ae <Argus_Cal_UpdateLddXtalkVectors+0x492>
 80265f4:	9b00      	ldr	r3, [sp, #0]
 80265f6:	ea4b 0201 	orr.w	r2, fp, r1
 80265fa:	40d3      	lsrs	r3, r2
 80265fc:	f013 0f01 	tst.w	r3, #1
 8026600:	eb09 06c2 	add.w	r6, r9, r2, lsl #3
 8026604:	d0f3      	beq.n	80265ee <Argus_Cal_UpdateLddXtalkVectors+0x3d2>
 8026606:	f859 0032 	ldr.w	r0, [r9, r2, lsl #3]
 802660a:	b287      	uxth	r7, r0
 802660c:	4245      	negs	r5, r0
 802660e:	2800      	cmp	r0, #0
 8026610:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8026614:	fb04 f707 	mul.w	r7, r4, r7
 8026618:	fb04 f000 	mul.w	r0, r4, r0
 802661c:	dab4      	bge.n	8026588 <Argus_Cal_UpdateLddXtalkVectors+0x36c>
 802661e:	b2a8      	uxth	r0, r5
 8026620:	fb04 f000 	mul.w	r0, r4, r0
 8026624:	0c2d      	lsrs	r5, r5, #16
 8026626:	fb04 f505 	mul.w	r5, r4, r5
 802662a:	0c83      	lsrs	r3, r0, #18
 802662c:	eb03 0395 	add.w	r3, r3, r5, lsr #2
 8026630:	f3c5 0540 	ubfx	r5, r5, #1, #1
 8026634:	441d      	add	r5, r3
 8026636:	f3c0 4040 	ubfx	r0, r0, #17, #1
 802663a:	4405      	add	r5, r0
 802663c:	426b      	negs	r3, r5
 802663e:	e7ac      	b.n	802659a <Argus_Cal_UpdateLddXtalkVectors+0x37e>
 8026640:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8026644:	e67e      	b.n	8026344 <Argus_Cal_UpdateLddXtalkVectors+0x128>
 8026646:	2400      	movs	r4, #0
 8026648:	eba1 0c03 	sub.w	ip, r1, r3
 802664c:	b149      	cbz	r1, 8026662 <Argus_Cal_UpdateLddXtalkVectors+0x446>
 802664e:	428b      	cmp	r3, r1
 8026650:	d80c      	bhi.n	802666c <Argus_Cal_UpdateLddXtalkVectors+0x450>
 8026652:	4314      	orrs	r4, r2
 8026654:	0852      	lsrs	r2, r2, #1
 8026656:	ea4f 014c 	mov.w	r1, ip, lsl #1
 802665a:	d1f5      	bne.n	8026648 <Argus_Cal_UpdateLddXtalkVectors+0x42c>
 802665c:	428b      	cmp	r3, r1
 802665e:	d800      	bhi.n	8026662 <Argus_Cal_UpdateLddXtalkVectors+0x446>
 8026660:	3401      	adds	r4, #1
 8026662:	2c00      	cmp	r4, #0
 8026664:	f6ff ae80 	blt.w	8026368 <Argus_Cal_UpdateLddXtalkVectors+0x14c>
 8026668:	b2a4      	uxth	r4, r4
 802666a:	e67f      	b.n	802636c <Argus_Cal_UpdateLddXtalkVectors+0x150>
 802666c:	0852      	lsrs	r2, r2, #1
 802666e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8026672:	d1e9      	bne.n	8026648 <Argus_Cal_UpdateLddXtalkVectors+0x42c>
 8026674:	e7f2      	b.n	802665c <Argus_Cal_UpdateLddXtalkVectors+0x440>
 8026676:	f8b5 30e4 	ldrh.w	r3, [r5, #228]	@ 0xe4
 802667a:	429e      	cmp	r6, r3
 802667c:	f63f ae82 	bhi.w	8026384 <Argus_Cal_UpdateLddXtalkVectors+0x168>
 8026680:	f8b5 30e8 	ldrh.w	r3, [r5, #232]	@ 0xe8
 8026684:	429f      	cmp	r7, r3
 8026686:	f67f af5c 	bls.w	8026542 <Argus_Cal_UpdateLddXtalkVectors+0x326>
 802668a:	e67b      	b.n	8026384 <Argus_Cal_UpdateLddXtalkVectors+0x168>
 802668c:	b2a8      	uxth	r0, r5
 802668e:	fb04 f000 	mul.w	r0, r4, r0
 8026692:	0c2d      	lsrs	r5, r5, #16
 8026694:	fb04 f505 	mul.w	r5, r4, r5
 8026698:	0c86      	lsrs	r6, r0, #18
 802669a:	eb06 0695 	add.w	r6, r6, r5, lsr #2
 802669e:	f3c5 0540 	ubfx	r5, r5, #1, #1
 80266a2:	4435      	add	r5, r6
 80266a4:	f3c0 4040 	ubfx	r0, r0, #17, #1
 80266a8:	182e      	adds	r6, r5, r0
 80266aa:	4276      	negs	r6, r6
 80266ac:	e789      	b.n	80265c2 <Argus_Cal_UpdateLddXtalkVectors+0x3a6>
 80266ae:	9a06      	ldr	r2, [sp, #24]
 80266b0:	fb9e fefc 	sdiv	lr, lr, ip
 80266b4:	f1ce 0e00 	rsb	lr, lr, #0
 80266b8:	9b03      	ldr	r3, [sp, #12]
 80266ba:	fb98 f7fc 	sdiv	r7, r8, ip
 80266be:	fa0f fe8e 	sxth.w	lr, lr
 80266c2:	b3aa      	cbz	r2, 8026730 <Argus_Cal_UpdateLddXtalkVectors+0x514>
 80266c4:	f9b3 3142 	ldrsh.w	r3, [r3, #322]	@ 0x142
 80266c8:	ebae 0e03 	sub.w	lr, lr, r3
 80266cc:	021b      	lsls	r3, r3, #8
 80266ce:	fb02 3e0e 	mla	lr, r2, lr, r3
 80266d2:	f1be 0f00 	cmp.w	lr, #0
 80266d6:	db37      	blt.n	8026748 <Argus_Cal_UpdateLddXtalkVectors+0x52c>
 80266d8:	f3ce 13c0 	ubfx	r3, lr, #7, #1
 80266dc:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 80266e0:	9b03      	ldr	r3, [sp, #12]
 80266e2:	427a      	negs	r2, r7
 80266e4:	f9b3 1144 	ldrsh.w	r1, [r3, #324]	@ 0x144
 80266e8:	f8a3 e142 	strh.w	lr, [r3, #322]	@ 0x142
 80266ec:	b212      	sxth	r2, r2
 80266ee:	1a52      	subs	r2, r2, r1
 80266f0:	020b      	lsls	r3, r1, #8
 80266f2:	9906      	ldr	r1, [sp, #24]
 80266f4:	fb01 3202 	mla	r2, r1, r2, r3
 80266f8:	2a00      	cmp	r2, #0
 80266fa:	db1e      	blt.n	802673a <Argus_Cal_UpdateLddXtalkVectors+0x51e>
 80266fc:	f3c2 13c0 	ubfx	r3, r2, #7, #1
 8026700:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026704:	b21b      	sxth	r3, r3
 8026706:	9a03      	ldr	r2, [sp, #12]
 8026708:	f10b 0b01 	add.w	fp, fp, #1
 802670c:	f8a2 3144 	strh.w	r3, [r2, #324]	@ 0x144
 8026710:	f1bb 0f04 	cmp.w	fp, #4
 8026714:	f102 0304 	add.w	r3, r2, #4
 8026718:	9303      	str	r3, [sp, #12]
 802671a:	f47f af2b 	bne.w	8026574 <Argus_Cal_UpdateLddXtalkVectors+0x358>
 802671e:	9b07      	ldr	r3, [sp, #28]
 8026720:	f8aa 3162 	strh.w	r3, [sl, #354]	@ 0x162
 8026724:	9b04      	ldr	r3, [sp, #16]
 8026726:	9a05      	ldr	r2, [sp, #20]
 8026728:	f043 0301 	orr.w	r3, r3, #1
 802672c:	6193      	str	r3, [r2, #24]
 802672e:	e6f4      	b.n	802651a <Argus_Cal_UpdateLddXtalkVectors+0x2fe>
 8026730:	427f      	negs	r7, r7
 8026732:	f8a3 e142 	strh.w	lr, [r3, #322]	@ 0x142
 8026736:	b23b      	sxth	r3, r7
 8026738:	e7e5      	b.n	8026706 <Argus_Cal_UpdateLddXtalkVectors+0x4ea>
 802673a:	4252      	negs	r2, r2
 802673c:	f3c2 13c0 	ubfx	r3, r2, #7, #1
 8026740:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026744:	425b      	negs	r3, r3
 8026746:	e7dd      	b.n	8026704 <Argus_Cal_UpdateLddXtalkVectors+0x4e8>
 8026748:	f1ce 0e00 	rsb	lr, lr, #0
 802674c:	f3ce 13c0 	ubfx	r3, lr, #7, #1
 8026750:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8026754:	f1ce 0e00 	rsb	lr, lr, #0
 8026758:	e7c2      	b.n	80266e0 <Argus_Cal_UpdateLddXtalkVectors+0x4c4>
 802675a:	bf00      	nop

0802675c <Argus_Cal_GetXtalkVectors>:
 802675c:	f9b0 c13a 	ldrsh.w	ip, [r0, #314]	@ 0x13a
 8026760:	b510      	push	{r4, lr}
 8026762:	f1bc 0f00 	cmp.w	ip, #0
 8026766:	9c02      	ldr	r4, [sp, #8]
 8026768:	f2c0 81d3 	blt.w	8026b12 <Argus_Cal_GetXtalkVectors+0x3b6>
 802676c:	b161      	cbz	r1, 8026788 <Argus_Cal_GetXtalkVectors+0x2c>
 802676e:	2920      	cmp	r1, #32
 8026770:	f200 81e3 	bhi.w	8026b3a <Argus_Cal_GetXtalkVectors+0x3de>
 8026774:	f101 3eff 	add.w	lr, r1, #4294967295
 8026778:	fa2c fc0e 	lsr.w	ip, ip, lr
 802677c:	f00c 0e01 	and.w	lr, ip, #1
 8026780:	eb0e 0c5c 	add.w	ip, lr, ip, lsr #1
 8026784:	fa0f fc8c 	sxth.w	ip, ip
 8026788:	f8a3 c000 	strh.w	ip, [r3]
 802678c:	f9b0 c13c 	ldrsh.w	ip, [r0, #316]	@ 0x13c
 8026790:	f1bc 0f00 	cmp.w	ip, #0
 8026794:	f2c0 81a6 	blt.w	8026ae4 <Argus_Cal_GetXtalkVectors+0x388>
 8026798:	b161      	cbz	r1, 80267b4 <Argus_Cal_GetXtalkVectors+0x58>
 802679a:	2920      	cmp	r1, #32
 802679c:	f200 81b6 	bhi.w	8026b0c <Argus_Cal_GetXtalkVectors+0x3b0>
 80267a0:	f101 3eff 	add.w	lr, r1, #4294967295
 80267a4:	fa2c fc0e 	lsr.w	ip, ip, lr
 80267a8:	f00c 0e01 	and.w	lr, ip, #1
 80267ac:	eb0e 0c5c 	add.w	ip, lr, ip, lsr #1
 80267b0:	fa0f fc8c 	sxth.w	ip, ip
 80267b4:	f8a3 c002 	strh.w	ip, [r3, #2]
 80267b8:	f9b0 c13e 	ldrsh.w	ip, [r0, #318]	@ 0x13e
 80267bc:	f1bc 0f00 	cmp.w	ip, #0
 80267c0:	f2c0 8175 	blt.w	8026aae <Argus_Cal_GetXtalkVectors+0x352>
 80267c4:	b161      	cbz	r1, 80267e0 <Argus_Cal_GetXtalkVectors+0x84>
 80267c6:	2920      	cmp	r1, #32
 80267c8:	f200 8185 	bhi.w	8026ad6 <Argus_Cal_GetXtalkVectors+0x37a>
 80267cc:	f101 3eff 	add.w	lr, r1, #4294967295
 80267d0:	fa2c fc0e 	lsr.w	ip, ip, lr
 80267d4:	f00c 0e01 	and.w	lr, ip, #1
 80267d8:	eb0e 0c5c 	add.w	ip, lr, ip, lsr #1
 80267dc:	fa0f fc8c 	sxth.w	ip, ip
 80267e0:	f8a3 c004 	strh.w	ip, [r3, #4]
 80267e4:	f9b0 c140 	ldrsh.w	ip, [r0, #320]	@ 0x140
 80267e8:	f1bc 0f00 	cmp.w	ip, #0
 80267ec:	f2c0 8119 	blt.w	8026a22 <Argus_Cal_GetXtalkVectors+0x2c6>
 80267f0:	b161      	cbz	r1, 802680c <Argus_Cal_GetXtalkVectors+0xb0>
 80267f2:	2920      	cmp	r1, #32
 80267f4:	f200 8158 	bhi.w	8026aa8 <Argus_Cal_GetXtalkVectors+0x34c>
 80267f8:	f101 3eff 	add.w	lr, r1, #4294967295
 80267fc:	fa2c fc0e 	lsr.w	ip, ip, lr
 8026800:	f00c 0e01 	and.w	lr, ip, #1
 8026804:	eb0e 0c5c 	add.w	ip, lr, ip, lsr #1
 8026808:	fa0f fc8c 	sxth.w	ip, ip
 802680c:	f8a3 c006 	strh.w	ip, [r3, #6]
 8026810:	eb00 1c02 	add.w	ip, r0, r2, lsl #4
 8026814:	f9bc 3142 	ldrsh.w	r3, [ip, #322]	@ 0x142
 8026818:	2b00      	cmp	r3, #0
 802681a:	f2c0 811e 	blt.w	8026a5a <Argus_Cal_GetXtalkVectors+0x2fe>
 802681e:	b159      	cbz	r1, 8026838 <Argus_Cal_GetXtalkVectors+0xdc>
 8026820:	2920      	cmp	r1, #32
 8026822:	f200 815d 	bhi.w	8026ae0 <Argus_Cal_GetXtalkVectors+0x384>
 8026826:	f101 3eff 	add.w	lr, r1, #4294967295
 802682a:	fa23 f30e 	lsr.w	r3, r3, lr
 802682e:	f003 0e01 	and.w	lr, r3, #1
 8026832:	eb0e 0353 	add.w	r3, lr, r3, lsr #1
 8026836:	b21b      	sxth	r3, r3
 8026838:	8023      	strh	r3, [r4, #0]
 802683a:	f9bc 3144 	ldrsh.w	r3, [ip, #324]	@ 0x144
 802683e:	2b00      	cmp	r3, #0
 8026840:	f2c0 8121 	blt.w	8026a86 <Argus_Cal_GetXtalkVectors+0x32a>
 8026844:	b159      	cbz	r1, 802685e <Argus_Cal_GetXtalkVectors+0x102>
 8026846:	2920      	cmp	r1, #32
 8026848:	f200 8148 	bhi.w	8026adc <Argus_Cal_GetXtalkVectors+0x380>
 802684c:	f101 3cff 	add.w	ip, r1, #4294967295
 8026850:	fa23 f30c 	lsr.w	r3, r3, ip
 8026854:	f003 0c01 	and.w	ip, r3, #1
 8026858:	eb0c 0353 	add.w	r3, ip, r3, lsr #1
 802685c:	b21b      	sxth	r3, r3
 802685e:	0092      	lsls	r2, r2, #2
 8026860:	f102 0c01 	add.w	ip, r2, #1
 8026864:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8026868:	8063      	strh	r3, [r4, #2]
 802686a:	f9bc 3142 	ldrsh.w	r3, [ip, #322]	@ 0x142
 802686e:	2b00      	cmp	r3, #0
 8026870:	f2c0 80c4 	blt.w	80269fc <Argus_Cal_GetXtalkVectors+0x2a0>
 8026874:	b159      	cbz	r1, 802688e <Argus_Cal_GetXtalkVectors+0x132>
 8026876:	2920      	cmp	r1, #32
 8026878:	f200 80d1 	bhi.w	8026a1e <Argus_Cal_GetXtalkVectors+0x2c2>
 802687c:	f101 3eff 	add.w	lr, r1, #4294967295
 8026880:	fa23 f30e 	lsr.w	r3, r3, lr
 8026884:	f003 0e01 	and.w	lr, r3, #1
 8026888:	eb0e 0353 	add.w	r3, lr, r3, lsr #1
 802688c:	b21b      	sxth	r3, r3
 802688e:	80a3      	strh	r3, [r4, #4]
 8026890:	f9bc 3144 	ldrsh.w	r3, [ip, #324]	@ 0x144
 8026894:	2b00      	cmp	r3, #0
 8026896:	f2c0 809e 	blt.w	80269d6 <Argus_Cal_GetXtalkVectors+0x27a>
 802689a:	b159      	cbz	r1, 80268b4 <Argus_Cal_GetXtalkVectors+0x158>
 802689c:	2920      	cmp	r1, #32
 802689e:	f200 80ab 	bhi.w	80269f8 <Argus_Cal_GetXtalkVectors+0x29c>
 80268a2:	f101 3cff 	add.w	ip, r1, #4294967295
 80268a6:	fa23 f30c 	lsr.w	r3, r3, ip
 80268aa:	f003 0c01 	and.w	ip, r3, #1
 80268ae:	eb0c 0353 	add.w	r3, ip, r3, lsr #1
 80268b2:	b21b      	sxth	r3, r3
 80268b4:	f102 0c02 	add.w	ip, r2, #2
 80268b8:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80268bc:	80e3      	strh	r3, [r4, #6]
 80268be:	f9bc 3142 	ldrsh.w	r3, [ip, #322]	@ 0x142
 80268c2:	2b00      	cmp	r3, #0
 80268c4:	db75      	blt.n	80269b2 <Argus_Cal_GetXtalkVectors+0x256>
 80268c6:	b159      	cbz	r1, 80268e0 <Argus_Cal_GetXtalkVectors+0x184>
 80268c8:	2920      	cmp	r1, #32
 80268ca:	f200 8082 	bhi.w	80269d2 <Argus_Cal_GetXtalkVectors+0x276>
 80268ce:	f101 3eff 	add.w	lr, r1, #4294967295
 80268d2:	fa23 f30e 	lsr.w	r3, r3, lr
 80268d6:	f003 0e01 	and.w	lr, r3, #1
 80268da:	eb0e 0353 	add.w	r3, lr, r3, lsr #1
 80268de:	b21b      	sxth	r3, r3
 80268e0:	8123      	strh	r3, [r4, #8]
 80268e2:	f9bc 3144 	ldrsh.w	r3, [ip, #324]	@ 0x144
 80268e6:	2b00      	cmp	r3, #0
 80268e8:	db51      	blt.n	802698e <Argus_Cal_GetXtalkVectors+0x232>
 80268ea:	b151      	cbz	r1, 8026902 <Argus_Cal_GetXtalkVectors+0x1a6>
 80268ec:	2920      	cmp	r1, #32
 80268ee:	d85e      	bhi.n	80269ae <Argus_Cal_GetXtalkVectors+0x252>
 80268f0:	f101 3cff 	add.w	ip, r1, #4294967295
 80268f4:	fa23 f30c 	lsr.w	r3, r3, ip
 80268f8:	f003 0c01 	and.w	ip, r3, #1
 80268fc:	eb0c 0353 	add.w	r3, ip, r3, lsr #1
 8026900:	b21b      	sxth	r3, r3
 8026902:	3203      	adds	r2, #3
 8026904:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8026908:	8163      	strh	r3, [r4, #10]
 802690a:	f9b2 3142 	ldrsh.w	r3, [r2, #322]	@ 0x142
 802690e:	2b00      	cmp	r3, #0
 8026910:	db2d      	blt.n	802696e <Argus_Cal_GetXtalkVectors+0x212>
 8026912:	b141      	cbz	r1, 8026926 <Argus_Cal_GetXtalkVectors+0x1ca>
 8026914:	2920      	cmp	r1, #32
 8026916:	d838      	bhi.n	802698a <Argus_Cal_GetXtalkVectors+0x22e>
 8026918:	1e48      	subs	r0, r1, #1
 802691a:	40c3      	lsrs	r3, r0
 802691c:	f003 0001 	and.w	r0, r3, #1
 8026920:	eb00 0353 	add.w	r3, r0, r3, lsr #1
 8026924:	b21b      	sxth	r3, r3
 8026926:	81a3      	strh	r3, [r4, #12]
 8026928:	f9b2 3144 	ldrsh.w	r3, [r2, #324]	@ 0x144
 802692c:	2b00      	cmp	r3, #0
 802692e:	db0c      	blt.n	802694a <Argus_Cal_GetXtalkVectors+0x1ee>
 8026930:	b149      	cbz	r1, 8026946 <Argus_Cal_GetXtalkVectors+0x1ea>
 8026932:	2920      	cmp	r1, #32
 8026934:	d818      	bhi.n	8026968 <Argus_Cal_GetXtalkVectors+0x20c>
 8026936:	3901      	subs	r1, #1
 8026938:	fa23 f101 	lsr.w	r1, r3, r1
 802693c:	f001 0301 	and.w	r3, r1, #1
 8026940:	eb03 0151 	add.w	r1, r3, r1, lsr #1
 8026944:	b20b      	sxth	r3, r1
 8026946:	81e3      	strh	r3, [r4, #14]
 8026948:	bd10      	pop	{r4, pc}
 802694a:	425a      	negs	r2, r3
 802694c:	2900      	cmp	r1, #0
 802694e:	d0fa      	beq.n	8026946 <Argus_Cal_GetXtalkVectors+0x1ea>
 8026950:	2920      	cmp	r1, #32
 8026952:	d809      	bhi.n	8026968 <Argus_Cal_GetXtalkVectors+0x20c>
 8026954:	1e4b      	subs	r3, r1, #1
 8026956:	40da      	lsrs	r2, r3
 8026958:	f002 0301 	and.w	r3, r2, #1
 802695c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8026960:	425b      	negs	r3, r3
 8026962:	b21b      	sxth	r3, r3
 8026964:	81e3      	strh	r3, [r4, #14]
 8026966:	bd10      	pop	{r4, pc}
 8026968:	2300      	movs	r3, #0
 802696a:	81e3      	strh	r3, [r4, #14]
 802696c:	bd10      	pop	{r4, pc}
 802696e:	4258      	negs	r0, r3
 8026970:	2900      	cmp	r1, #0
 8026972:	d0d8      	beq.n	8026926 <Argus_Cal_GetXtalkVectors+0x1ca>
 8026974:	2920      	cmp	r1, #32
 8026976:	d808      	bhi.n	802698a <Argus_Cal_GetXtalkVectors+0x22e>
 8026978:	1e4b      	subs	r3, r1, #1
 802697a:	40d8      	lsrs	r0, r3
 802697c:	f000 0301 	and.w	r3, r0, #1
 8026980:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8026984:	425b      	negs	r3, r3
 8026986:	b21b      	sxth	r3, r3
 8026988:	e7cd      	b.n	8026926 <Argus_Cal_GetXtalkVectors+0x1ca>
 802698a:	2300      	movs	r3, #0
 802698c:	e7cb      	b.n	8026926 <Argus_Cal_GetXtalkVectors+0x1ca>
 802698e:	f1c3 0c00 	rsb	ip, r3, #0
 8026992:	2900      	cmp	r1, #0
 8026994:	d0b5      	beq.n	8026902 <Argus_Cal_GetXtalkVectors+0x1a6>
 8026996:	2920      	cmp	r1, #32
 8026998:	d809      	bhi.n	80269ae <Argus_Cal_GetXtalkVectors+0x252>
 802699a:	1e4b      	subs	r3, r1, #1
 802699c:	fa2c fc03 	lsr.w	ip, ip, r3
 80269a0:	f00c 0301 	and.w	r3, ip, #1
 80269a4:	eb03 035c 	add.w	r3, r3, ip, lsr #1
 80269a8:	425b      	negs	r3, r3
 80269aa:	b21b      	sxth	r3, r3
 80269ac:	e7a9      	b.n	8026902 <Argus_Cal_GetXtalkVectors+0x1a6>
 80269ae:	2300      	movs	r3, #0
 80269b0:	e7a7      	b.n	8026902 <Argus_Cal_GetXtalkVectors+0x1a6>
 80269b2:	f1c3 0e00 	rsb	lr, r3, #0
 80269b6:	2900      	cmp	r1, #0
 80269b8:	d092      	beq.n	80268e0 <Argus_Cal_GetXtalkVectors+0x184>
 80269ba:	2920      	cmp	r1, #32
 80269bc:	d809      	bhi.n	80269d2 <Argus_Cal_GetXtalkVectors+0x276>
 80269be:	1e4b      	subs	r3, r1, #1
 80269c0:	fa2e fe03 	lsr.w	lr, lr, r3
 80269c4:	f00e 0301 	and.w	r3, lr, #1
 80269c8:	eb03 035e 	add.w	r3, r3, lr, lsr #1
 80269cc:	425b      	negs	r3, r3
 80269ce:	b21b      	sxth	r3, r3
 80269d0:	e786      	b.n	80268e0 <Argus_Cal_GetXtalkVectors+0x184>
 80269d2:	2300      	movs	r3, #0
 80269d4:	e784      	b.n	80268e0 <Argus_Cal_GetXtalkVectors+0x184>
 80269d6:	f1c3 0c00 	rsb	ip, r3, #0
 80269da:	2900      	cmp	r1, #0
 80269dc:	f43f af6a 	beq.w	80268b4 <Argus_Cal_GetXtalkVectors+0x158>
 80269e0:	2920      	cmp	r1, #32
 80269e2:	d809      	bhi.n	80269f8 <Argus_Cal_GetXtalkVectors+0x29c>
 80269e4:	1e4b      	subs	r3, r1, #1
 80269e6:	fa2c fc03 	lsr.w	ip, ip, r3
 80269ea:	f00c 0301 	and.w	r3, ip, #1
 80269ee:	eb03 035c 	add.w	r3, r3, ip, lsr #1
 80269f2:	425b      	negs	r3, r3
 80269f4:	b21b      	sxth	r3, r3
 80269f6:	e75d      	b.n	80268b4 <Argus_Cal_GetXtalkVectors+0x158>
 80269f8:	2300      	movs	r3, #0
 80269fa:	e75b      	b.n	80268b4 <Argus_Cal_GetXtalkVectors+0x158>
 80269fc:	f1c3 0e00 	rsb	lr, r3, #0
 8026a00:	2900      	cmp	r1, #0
 8026a02:	f43f af44 	beq.w	802688e <Argus_Cal_GetXtalkVectors+0x132>
 8026a06:	2920      	cmp	r1, #32
 8026a08:	d809      	bhi.n	8026a1e <Argus_Cal_GetXtalkVectors+0x2c2>
 8026a0a:	1e4b      	subs	r3, r1, #1
 8026a0c:	fa2e fe03 	lsr.w	lr, lr, r3
 8026a10:	f00e 0301 	and.w	r3, lr, #1
 8026a14:	eb03 035e 	add.w	r3, r3, lr, lsr #1
 8026a18:	425b      	negs	r3, r3
 8026a1a:	b21b      	sxth	r3, r3
 8026a1c:	e737      	b.n	802688e <Argus_Cal_GetXtalkVectors+0x132>
 8026a1e:	2300      	movs	r3, #0
 8026a20:	e735      	b.n	802688e <Argus_Cal_GetXtalkVectors+0x132>
 8026a22:	f1cc 0e00 	rsb	lr, ip, #0
 8026a26:	2900      	cmp	r1, #0
 8026a28:	f43f aef0 	beq.w	802680c <Argus_Cal_GetXtalkVectors+0xb0>
 8026a2c:	2920      	cmp	r1, #32
 8026a2e:	d83b      	bhi.n	8026aa8 <Argus_Cal_GetXtalkVectors+0x34c>
 8026a30:	f101 3cff 	add.w	ip, r1, #4294967295
 8026a34:	fa2e fe0c 	lsr.w	lr, lr, ip
 8026a38:	f00e 0c01 	and.w	ip, lr, #1
 8026a3c:	eb0c 0c5e 	add.w	ip, ip, lr, lsr #1
 8026a40:	f1cc 0c00 	rsb	ip, ip, #0
 8026a44:	fa0f fc8c 	sxth.w	ip, ip
 8026a48:	f8a3 c006 	strh.w	ip, [r3, #6]
 8026a4c:	eb00 1c02 	add.w	ip, r0, r2, lsl #4
 8026a50:	f9bc 3142 	ldrsh.w	r3, [ip, #322]	@ 0x142
 8026a54:	2b00      	cmp	r3, #0
 8026a56:	f6bf aee2 	bge.w	802681e <Argus_Cal_GetXtalkVectors+0xc2>
 8026a5a:	f1c3 0e00 	rsb	lr, r3, #0
 8026a5e:	2900      	cmp	r1, #0
 8026a60:	f43f aeea 	beq.w	8026838 <Argus_Cal_GetXtalkVectors+0xdc>
 8026a64:	2920      	cmp	r1, #32
 8026a66:	d83b      	bhi.n	8026ae0 <Argus_Cal_GetXtalkVectors+0x384>
 8026a68:	1e4b      	subs	r3, r1, #1
 8026a6a:	fa2e fe03 	lsr.w	lr, lr, r3
 8026a6e:	f00e 0301 	and.w	r3, lr, #1
 8026a72:	eb03 035e 	add.w	r3, r3, lr, lsr #1
 8026a76:	425b      	negs	r3, r3
 8026a78:	b21b      	sxth	r3, r3
 8026a7a:	8023      	strh	r3, [r4, #0]
 8026a7c:	f9bc 3144 	ldrsh.w	r3, [ip, #324]	@ 0x144
 8026a80:	2b00      	cmp	r3, #0
 8026a82:	f6bf aedf 	bge.w	8026844 <Argus_Cal_GetXtalkVectors+0xe8>
 8026a86:	f1c3 0c00 	rsb	ip, r3, #0
 8026a8a:	2900      	cmp	r1, #0
 8026a8c:	f43f aee7 	beq.w	802685e <Argus_Cal_GetXtalkVectors+0x102>
 8026a90:	2920      	cmp	r1, #32
 8026a92:	d823      	bhi.n	8026adc <Argus_Cal_GetXtalkVectors+0x380>
 8026a94:	1e4b      	subs	r3, r1, #1
 8026a96:	fa2c fc03 	lsr.w	ip, ip, r3
 8026a9a:	f00c 0301 	and.w	r3, ip, #1
 8026a9e:	eb03 035c 	add.w	r3, r3, ip, lsr #1
 8026aa2:	425b      	negs	r3, r3
 8026aa4:	b21b      	sxth	r3, r3
 8026aa6:	e6da      	b.n	802685e <Argus_Cal_GetXtalkVectors+0x102>
 8026aa8:	f04f 0c00 	mov.w	ip, #0
 8026aac:	e6ae      	b.n	802680c <Argus_Cal_GetXtalkVectors+0xb0>
 8026aae:	f1cc 0e00 	rsb	lr, ip, #0
 8026ab2:	2900      	cmp	r1, #0
 8026ab4:	f43f ae94 	beq.w	80267e0 <Argus_Cal_GetXtalkVectors+0x84>
 8026ab8:	2920      	cmp	r1, #32
 8026aba:	d80c      	bhi.n	8026ad6 <Argus_Cal_GetXtalkVectors+0x37a>
 8026abc:	f101 3cff 	add.w	ip, r1, #4294967295
 8026ac0:	fa2e fe0c 	lsr.w	lr, lr, ip
 8026ac4:	f00e 0c01 	and.w	ip, lr, #1
 8026ac8:	eb0c 0c5e 	add.w	ip, ip, lr, lsr #1
 8026acc:	f1cc 0c00 	rsb	ip, ip, #0
 8026ad0:	fa0f fc8c 	sxth.w	ip, ip
 8026ad4:	e684      	b.n	80267e0 <Argus_Cal_GetXtalkVectors+0x84>
 8026ad6:	f04f 0c00 	mov.w	ip, #0
 8026ada:	e681      	b.n	80267e0 <Argus_Cal_GetXtalkVectors+0x84>
 8026adc:	2300      	movs	r3, #0
 8026ade:	e6be      	b.n	802685e <Argus_Cal_GetXtalkVectors+0x102>
 8026ae0:	2300      	movs	r3, #0
 8026ae2:	e6a9      	b.n	8026838 <Argus_Cal_GetXtalkVectors+0xdc>
 8026ae4:	f1cc 0e00 	rsb	lr, ip, #0
 8026ae8:	2900      	cmp	r1, #0
 8026aea:	f43f ae63 	beq.w	80267b4 <Argus_Cal_GetXtalkVectors+0x58>
 8026aee:	2920      	cmp	r1, #32
 8026af0:	d80c      	bhi.n	8026b0c <Argus_Cal_GetXtalkVectors+0x3b0>
 8026af2:	f101 3cff 	add.w	ip, r1, #4294967295
 8026af6:	fa2e fe0c 	lsr.w	lr, lr, ip
 8026afa:	f00e 0c01 	and.w	ip, lr, #1
 8026afe:	eb0c 0c5e 	add.w	ip, ip, lr, lsr #1
 8026b02:	f1cc 0c00 	rsb	ip, ip, #0
 8026b06:	fa0f fc8c 	sxth.w	ip, ip
 8026b0a:	e653      	b.n	80267b4 <Argus_Cal_GetXtalkVectors+0x58>
 8026b0c:	f04f 0c00 	mov.w	ip, #0
 8026b10:	e650      	b.n	80267b4 <Argus_Cal_GetXtalkVectors+0x58>
 8026b12:	f1cc 0e00 	rsb	lr, ip, #0
 8026b16:	2900      	cmp	r1, #0
 8026b18:	f43f ae36 	beq.w	8026788 <Argus_Cal_GetXtalkVectors+0x2c>
 8026b1c:	2920      	cmp	r1, #32
 8026b1e:	d80c      	bhi.n	8026b3a <Argus_Cal_GetXtalkVectors+0x3de>
 8026b20:	f101 3cff 	add.w	ip, r1, #4294967295
 8026b24:	fa2e fe0c 	lsr.w	lr, lr, ip
 8026b28:	f00e 0c01 	and.w	ip, lr, #1
 8026b2c:	eb0c 0c5e 	add.w	ip, ip, lr, lsr #1
 8026b30:	f1cc 0c00 	rsb	ip, ip, #0
 8026b34:	fa0f fc8c 	sxth.w	ip, ip
 8026b38:	e626      	b.n	8026788 <Argus_Cal_GetXtalkVectors+0x2c>
 8026b3a:	f04f 0c00 	mov.w	ip, #0
 8026b3e:	e623      	b.n	8026788 <Argus_Cal_GetXtalkVectors+0x2c>

08026b40 <Argus_OnGetDefaultCalibration>:
 8026b40:	4770      	bx	lr
 8026b42:	bf00      	nop

08026b44 <Argus_GetPixelRangeOffsets_Callback>:
 8026b44:	2280      	movs	r2, #128	@ 0x80
 8026b46:	2100      	movs	r1, #0
 8026b48:	f004 ba2f 	b.w	802afaa <memset>

08026b4c <Argus_Cal_GetInternalPixelRangeOffsets>:
 8026b4c:	b570      	push	{r4, r5, r6, lr}
 8026b4e:	4604      	mov	r4, r0
 8026b50:	2b47      	cmp	r3, #71	@ 0x47
 8026b52:	d849      	bhi.n	8026be8 <Argus_Cal_GetInternalPixelRangeOffsets+0x9c>
 8026b54:	e8df f013 	tbh	[pc, r3, lsl #1]
 8026b58:	004b0151 	.word	0x004b0151
 8026b5c:	004b004b 	.word	0x004b004b
 8026b60:	004b0148 	.word	0x004b0148
 8026b64:	004b004b 	.word	0x004b004b
 8026b68:	00480048 	.word	0x00480048
 8026b6c:	00480048 	.word	0x00480048
 8026b70:	00480048 	.word	0x00480048
 8026b74:	00480048 	.word	0x00480048
 8026b78:	00480048 	.word	0x00480048
 8026b7c:	00480048 	.word	0x00480048
 8026b80:	00480048 	.word	0x00480048
 8026b84:	00480048 	.word	0x00480048
 8026b88:	00480048 	.word	0x00480048
 8026b8c:	00480048 	.word	0x00480048
 8026b90:	00480048 	.word	0x00480048
 8026b94:	00480048 	.word	0x00480048
 8026b98:	00480048 	.word	0x00480048
 8026b9c:	00480048 	.word	0x00480048
 8026ba0:	00480048 	.word	0x00480048
 8026ba4:	00480048 	.word	0x00480048
 8026ba8:	00480048 	.word	0x00480048
 8026bac:	00480048 	.word	0x00480048
 8026bb0:	00480048 	.word	0x00480048
 8026bb4:	00480048 	.word	0x00480048
 8026bb8:	00480048 	.word	0x00480048
 8026bbc:	00480048 	.word	0x00480048
 8026bc0:	00480048 	.word	0x00480048
 8026bc4:	00480048 	.word	0x00480048
 8026bc8:	00480048 	.word	0x00480048
 8026bcc:	00480048 	.word	0x00480048
 8026bd0:	00480048 	.word	0x00480048
 8026bd4:	00480048 	.word	0x00480048
 8026bd8:	00480048 	.word	0x00480048
 8026bdc:	004b0048 	.word	0x004b0048
 8026be0:	004b0148 	.word	0x004b0148
 8026be4:	004b004b 	.word	0x004b004b
 8026be8:	f06f 00c6 	mvn.w	r0, #198	@ 0xc6
 8026bec:	bd70      	pop	{r4, r5, r6, pc}
 8026bee:	f891 107b 	ldrb.w	r1, [r1, #123]	@ 0x7b
 8026bf2:	0989      	lsrs	r1, r1, #6
 8026bf4:	2902      	cmp	r1, #2
 8026bf6:	f000 8110 	beq.w	8026e1a <Argus_Cal_GetInternalPixelRangeOffsets+0x2ce>
 8026bfa:	4e8e      	ldr	r6, [pc, #568]	@ (8026e34 <Argus_Cal_GetInternalPixelRangeOffsets+0x2e8>)
 8026bfc:	2903      	cmp	r1, #3
 8026bfe:	f000 8106 	beq.w	8026e0e <Argus_Cal_GetInternalPixelRangeOffsets+0x2c2>
 8026c02:	2900      	cmp	r1, #0
 8026c04:	f000 8111 	beq.w	8026e2a <Argus_Cal_GetInternalPixelRangeOffsets+0x2de>
 8026c08:	2500      	movs	r5, #0
 8026c0a:	2280      	movs	r2, #128	@ 0x80
 8026c0c:	2100      	movs	r1, #0
 8026c0e:	4620      	mov	r0, r4
 8026c10:	f004 f9cb 	bl	802afaa <memset>
 8026c14:	2e00      	cmp	r6, #0
 8026c16:	f000 80e5 	beq.w	8026de4 <Argus_Cal_GetInternalPixelRangeOffsets+0x298>
 8026c1a:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8026c1e:	f936 3015 	ldrsh.w	r3, [r6, r5, lsl #1]
 8026c22:	8023      	strh	r3, [r4, #0]
 8026c24:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8026c28:	8063      	strh	r3, [r4, #2]
 8026c2a:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 8026c2e:	80a3      	strh	r3, [r4, #4]
 8026c30:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8026c34:	80e3      	strh	r3, [r4, #6]
 8026c36:	f9b2 3010 	ldrsh.w	r3, [r2, #16]
 8026c3a:	8123      	strh	r3, [r4, #8]
 8026c3c:	f9b2 3014 	ldrsh.w	r3, [r2, #20]
 8026c40:	8163      	strh	r3, [r4, #10]
 8026c42:	f9b2 3018 	ldrsh.w	r3, [r2, #24]
 8026c46:	81a3      	strh	r3, [r4, #12]
 8026c48:	f9b2 301c 	ldrsh.w	r3, [r2, #28]
 8026c4c:	81e3      	strh	r3, [r4, #14]
 8026c4e:	f9b2 3020 	ldrsh.w	r3, [r2, #32]
 8026c52:	8223      	strh	r3, [r4, #16]
 8026c54:	f9b2 3024 	ldrsh.w	r3, [r2, #36]	@ 0x24
 8026c58:	8263      	strh	r3, [r4, #18]
 8026c5a:	f9b2 3028 	ldrsh.w	r3, [r2, #40]	@ 0x28
 8026c5e:	82a3      	strh	r3, [r4, #20]
 8026c60:	f9b2 302c 	ldrsh.w	r3, [r2, #44]	@ 0x2c
 8026c64:	82e3      	strh	r3, [r4, #22]
 8026c66:	f9b2 3030 	ldrsh.w	r3, [r2, #48]	@ 0x30
 8026c6a:	8323      	strh	r3, [r4, #24]
 8026c6c:	f9b2 3034 	ldrsh.w	r3, [r2, #52]	@ 0x34
 8026c70:	8363      	strh	r3, [r4, #26]
 8026c72:	f9b2 3038 	ldrsh.w	r3, [r2, #56]	@ 0x38
 8026c76:	83a3      	strh	r3, [r4, #28]
 8026c78:	f9b2 303c 	ldrsh.w	r3, [r2, #60]	@ 0x3c
 8026c7c:	83e3      	strh	r3, [r4, #30]
 8026c7e:	f9b2 3040 	ldrsh.w	r3, [r2, #64]	@ 0x40
 8026c82:	8423      	strh	r3, [r4, #32]
 8026c84:	f9b2 3044 	ldrsh.w	r3, [r2, #68]	@ 0x44
 8026c88:	8463      	strh	r3, [r4, #34]	@ 0x22
 8026c8a:	f9b2 3048 	ldrsh.w	r3, [r2, #72]	@ 0x48
 8026c8e:	84a3      	strh	r3, [r4, #36]	@ 0x24
 8026c90:	f9b2 304c 	ldrsh.w	r3, [r2, #76]	@ 0x4c
 8026c94:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8026c96:	f9b2 3050 	ldrsh.w	r3, [r2, #80]	@ 0x50
 8026c9a:	8523      	strh	r3, [r4, #40]	@ 0x28
 8026c9c:	f9b2 3054 	ldrsh.w	r3, [r2, #84]	@ 0x54
 8026ca0:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8026ca2:	f9b2 3058 	ldrsh.w	r3, [r2, #88]	@ 0x58
 8026ca6:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8026ca8:	f9b2 305c 	ldrsh.w	r3, [r2, #92]	@ 0x5c
 8026cac:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 8026cae:	f9b2 3060 	ldrsh.w	r3, [r2, #96]	@ 0x60
 8026cb2:	8623      	strh	r3, [r4, #48]	@ 0x30
 8026cb4:	f9b2 3064 	ldrsh.w	r3, [r2, #100]	@ 0x64
 8026cb8:	8663      	strh	r3, [r4, #50]	@ 0x32
 8026cba:	f9b2 3068 	ldrsh.w	r3, [r2, #104]	@ 0x68
 8026cbe:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8026cc0:	f9b2 306c 	ldrsh.w	r3, [r2, #108]	@ 0x6c
 8026cc4:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8026cc6:	f9b2 3070 	ldrsh.w	r3, [r2, #112]	@ 0x70
 8026cca:	8723      	strh	r3, [r4, #56]	@ 0x38
 8026ccc:	f9b2 3074 	ldrsh.w	r3, [r2, #116]	@ 0x74
 8026cd0:	8763      	strh	r3, [r4, #58]	@ 0x3a
 8026cd2:	f9b2 3078 	ldrsh.w	r3, [r2, #120]	@ 0x78
 8026cd6:	87a3      	strh	r3, [r4, #60]	@ 0x3c
 8026cd8:	f9b2 307c 	ldrsh.w	r3, [r2, #124]	@ 0x7c
 8026cdc:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8026cde:	3540      	adds	r5, #64	@ 0x40
 8026ce0:	eb06 0345 	add.w	r3, r6, r5, lsl #1
 8026ce4:	f936 2015 	ldrsh.w	r2, [r6, r5, lsl #1]
 8026ce8:	f8a4 2040 	strh.w	r2, [r4, #64]	@ 0x40
 8026cec:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8026cf0:	f8a4 2042 	strh.w	r2, [r4, #66]	@ 0x42
 8026cf4:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8026cf8:	f8a4 2044 	strh.w	r2, [r4, #68]	@ 0x44
 8026cfc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026d00:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 8026d04:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8026d08:	f8a4 2048 	strh.w	r2, [r4, #72]	@ 0x48
 8026d0c:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8026d10:	f8a4 204a 	strh.w	r2, [r4, #74]	@ 0x4a
 8026d14:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8026d18:	f8a4 204c 	strh.w	r2, [r4, #76]	@ 0x4c
 8026d1c:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8026d20:	f8a4 204e 	strh.w	r2, [r4, #78]	@ 0x4e
 8026d24:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8026d28:	f8a4 2050 	strh.w	r2, [r4, #80]	@ 0x50
 8026d2c:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 8026d30:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
 8026d34:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	@ 0x28
 8026d38:	f8a4 2054 	strh.w	r2, [r4, #84]	@ 0x54
 8026d3c:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	@ 0x2c
 8026d40:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
 8026d44:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8026d48:	f8a4 2058 	strh.w	r2, [r4, #88]	@ 0x58
 8026d4c:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	@ 0x34
 8026d50:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 8026d54:	f9b3 2038 	ldrsh.w	r2, [r3, #56]	@ 0x38
 8026d58:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8026d5c:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	@ 0x3c
 8026d60:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 8026d64:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	@ 0x40
 8026d68:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
 8026d6c:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	@ 0x44
 8026d70:	f8a4 2062 	strh.w	r2, [r4, #98]	@ 0x62
 8026d74:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	@ 0x48
 8026d78:	f8a4 2064 	strh.w	r2, [r4, #100]	@ 0x64
 8026d7c:	f9b3 204c 	ldrsh.w	r2, [r3, #76]	@ 0x4c
 8026d80:	f8a4 2066 	strh.w	r2, [r4, #102]	@ 0x66
 8026d84:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	@ 0x50
 8026d88:	f8a4 2068 	strh.w	r2, [r4, #104]	@ 0x68
 8026d8c:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	@ 0x54
 8026d90:	f8a4 206a 	strh.w	r2, [r4, #106]	@ 0x6a
 8026d94:	f9b3 2058 	ldrsh.w	r2, [r3, #88]	@ 0x58
 8026d98:	f8a4 206c 	strh.w	r2, [r4, #108]	@ 0x6c
 8026d9c:	f9b3 205c 	ldrsh.w	r2, [r3, #92]	@ 0x5c
 8026da0:	f8a4 206e 	strh.w	r2, [r4, #110]	@ 0x6e
 8026da4:	f9b3 2060 	ldrsh.w	r2, [r3, #96]	@ 0x60
 8026da8:	f8a4 2070 	strh.w	r2, [r4, #112]	@ 0x70
 8026dac:	f9b3 2064 	ldrsh.w	r2, [r3, #100]	@ 0x64
 8026db0:	f8a4 2072 	strh.w	r2, [r4, #114]	@ 0x72
 8026db4:	f9b3 2068 	ldrsh.w	r2, [r3, #104]	@ 0x68
 8026db8:	f8a4 2074 	strh.w	r2, [r4, #116]	@ 0x74
 8026dbc:	f9b3 206c 	ldrsh.w	r2, [r3, #108]	@ 0x6c
 8026dc0:	f8a4 2076 	strh.w	r2, [r4, #118]	@ 0x76
 8026dc4:	f9b3 2070 	ldrsh.w	r2, [r3, #112]	@ 0x70
 8026dc8:	f8a4 2078 	strh.w	r2, [r4, #120]	@ 0x78
 8026dcc:	f9b3 2074 	ldrsh.w	r2, [r3, #116]	@ 0x74
 8026dd0:	f8a4 207a 	strh.w	r2, [r4, #122]	@ 0x7a
 8026dd4:	f9b3 2078 	ldrsh.w	r2, [r3, #120]	@ 0x78
 8026dd8:	f8a4 207c 	strh.w	r2, [r4, #124]	@ 0x7c
 8026ddc:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	@ 0x7c
 8026de0:	f8a4 307e 	strh.w	r3, [r4, #126]	@ 0x7e
 8026de4:	2000      	movs	r0, #0
 8026de6:	bd70      	pop	{r4, r5, r6, pc}
 8026de8:	f891 107b 	ldrb.w	r1, [r1, #123]	@ 0x7b
 8026dec:	4e12      	ldr	r6, [pc, #72]	@ (8026e38 <Argus_Cal_GetInternalPixelRangeOffsets+0x2ec>)
 8026dee:	0989      	lsrs	r1, r1, #6
 8026df0:	2902      	cmp	r1, #2
 8026df2:	f47f af03 	bne.w	8026bfc <Argus_Cal_GetInternalPixelRangeOffsets+0xb0>
 8026df6:	2501      	movs	r5, #1
 8026df8:	e707      	b.n	8026c0a <Argus_Cal_GetInternalPixelRangeOffsets+0xbe>
 8026dfa:	f891 107b 	ldrb.w	r1, [r1, #123]	@ 0x7b
 8026dfe:	0989      	lsrs	r1, r1, #6
 8026e00:	2902      	cmp	r1, #2
 8026e02:	d004      	beq.n	8026e0e <Argus_Cal_GetInternalPixelRangeOffsets+0x2c2>
 8026e04:	2903      	cmp	r1, #3
 8026e06:	f04f 0600 	mov.w	r6, #0
 8026e0a:	f47f aefa 	bne.w	8026c02 <Argus_Cal_GetInternalPixelRangeOffsets+0xb6>
 8026e0e:	2280      	movs	r2, #128	@ 0x80
 8026e10:	2100      	movs	r1, #0
 8026e12:	4620      	mov	r0, r4
 8026e14:	f004 f8c9 	bl	802afaa <memset>
 8026e18:	e7e4      	b.n	8026de4 <Argus_Cal_GetInternalPixelRangeOffsets+0x298>
 8026e1a:	2280      	movs	r2, #128	@ 0x80
 8026e1c:	2100      	movs	r1, #0
 8026e1e:	4620      	mov	r0, r4
 8026e20:	f004 f8c3 	bl	802afaa <memset>
 8026e24:	4e03      	ldr	r6, [pc, #12]	@ (8026e34 <Argus_Cal_GetInternalPixelRangeOffsets+0x2e8>)
 8026e26:	2501      	movs	r5, #1
 8026e28:	e6f7      	b.n	8026c1a <Argus_Cal_GetInternalPixelRangeOffsets+0xce>
 8026e2a:	2280      	movs	r2, #128	@ 0x80
 8026e2c:	4620      	mov	r0, r4
 8026e2e:	f004 f8bc 	bl	802afaa <memset>
 8026e32:	e7d7      	b.n	8026de4 <Argus_Cal_GetInternalPixelRangeOffsets+0x298>
 8026e34:	08030c44 	.word	0x08030c44
 8026e38:	08030d44 	.word	0x08030d44

08026e3c <Argus_GetCrosstalkVectorTable_Callback>:
 8026e3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8026e40:	2100      	movs	r1, #0
 8026e42:	f004 b8b2 	b.w	802afaa <memset>
 8026e46:	bf00      	nop

08026e48 <Argus_Cal_GetInternalXtalkVectorTable>:
 8026e48:	2b05      	cmp	r3, #5
 8026e4a:	f200 80c0 	bhi.w	8026fce <Argus_Cal_GetInternalXtalkVectorTable+0x186>
 8026e4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026e52:	4615      	mov	r5, r2
 8026e54:	4a5f      	ldr	r2, [pc, #380]	@ (8026fd4 <Argus_Cal_GetInternalXtalkVectorTable+0x18c>)
 8026e56:	f891 80ac 	ldrb.w	r8, [r1, #172]	@ 0xac
 8026e5a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8026e5e:	f891 307b 	ldrb.w	r3, [r1, #123]	@ 0x7b
 8026e62:	099e      	lsrs	r6, r3, #6
 8026e64:	2e02      	cmp	r6, #2
 8026e66:	b083      	sub	sp, #12
 8026e68:	4607      	mov	r7, r0
 8026e6a:	f000 80ae 	beq.w	8026fca <Argus_Cal_GetInternalXtalkVectorTable+0x182>
 8026e6e:	2e03      	cmp	r6, #3
 8026e70:	f000 80a8 	beq.w	8026fc4 <Argus_Cal_GetInternalXtalkVectorTable+0x17c>
 8026e74:	2e00      	cmp	r6, #0
 8026e76:	f000 80a6 	beq.w	8026fc6 <Argus_Cal_GetInternalXtalkVectorTable+0x17e>
 8026e7a:	2600      	movs	r6, #0
 8026e7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8026e80:	2100      	movs	r1, #0
 8026e82:	4638      	mov	r0, r7
 8026e84:	f004 f891 	bl	802afaa <memset>
 8026e88:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8026e8c:	eb03 0c08 	add.w	ip, r3, r8
 8026e90:	f9b5 62ac 	ldrsh.w	r6, [r5, #684]	@ 0x2ac
 8026e94:	f895 222a 	ldrb.w	r2, [r5, #554]	@ 0x22a
 8026e98:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8026e9c:	f507 79c0 	add.w	r9, r7, #384	@ 0x180
 8026ea0:	f9b5 72aa 	ldrsh.w	r7, [r5, #682]	@ 0x2aa
 8026ea4:	9300      	str	r3, [sp, #0]
 8026ea6:	f895 322b 	ldrb.w	r3, [r5, #555]	@ 0x22b
 8026eaa:	4279      	negs	r1, r7
 8026eac:	f1c6 0e00 	rsb	lr, r6, #0
 8026eb0:	fb8e e003 	smull	lr, r0, lr, r3
 8026eb4:	fb81 1a02 	smull	r1, sl, r1, r2
 8026eb8:	fb86 3803 	smull	r3, r8, r6, r3
 8026ebc:	fb87 2b02 	smull	r2, fp, r7, r2
 8026ec0:	9001      	str	r0, [sp, #4]
 8026ec2:	4640      	mov	r0, r8
 8026ec4:	ea4f 18d2 	mov.w	r8, r2, lsr #7
 8026ec8:	ea48 684b 	orr.w	r8, r8, fp, lsl #25
 8026ecc:	f3c2 1280 	ubfx	r2, r2, #6, #1
 8026ed0:	4490      	add	r8, r2
 8026ed2:	09ca      	lsrs	r2, r1, #7
 8026ed4:	ea42 624a 	orr.w	r2, r2, sl, lsl #25
 8026ed8:	f341 1180 	sbfx	r1, r1, #6, #1
 8026edc:	1a8a      	subs	r2, r1, r2
 8026ede:	ea38 0827 	bics.w	r8, r8, r7, asr #32
 8026ee2:	bf28      	it	cs
 8026ee4:	4690      	movcs	r8, r2
 8026ee6:	09da      	lsrs	r2, r3, #7
 8026ee8:	ea42 6240 	orr.w	r2, r2, r0, lsl #25
 8026eec:	f3c3 1780 	ubfx	r7, r3, #6, #1
 8026ef0:	9801      	ldr	r0, [sp, #4]
 8026ef2:	4417      	add	r7, r2
 8026ef4:	ea4f 12de 	mov.w	r2, lr, lsr #7
 8026ef8:	ea42 6240 	orr.w	r2, r2, r0, lsl #25
 8026efc:	f34e 1380 	sbfx	r3, lr, #6, #1
 8026f00:	1a9b      	subs	r3, r3, r2
 8026f02:	ea37 0726 	bics.w	r7, r7, r6, asr #32
 8026f06:	bf28      	it	cs
 8026f08:	461f      	movcs	r7, r3
 8026f0a:	9800      	ldr	r0, [sp, #0]
 8026f0c:	b239      	sxth	r1, r7
 8026f0e:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 8026f12:	fa0f f688 	sxth.w	r6, r8
 8026f16:	fa1f fe88 	uxth.w	lr, r8
 8026f1a:	b2bf      	uxth	r7, r7
 8026f1c:	f1a0 0380 	sub.w	r3, r0, #128	@ 0x80
 8026f20:	4662      	mov	r2, ip
 8026f22:	e037      	b.n	8026f94 <Argus_Cal_GetInternalXtalkVectorTable+0x14c>
 8026f24:	f995 829c 	ldrsb.w	r8, [r5, #668]	@ 0x29c
 8026f28:	f118 0f04 	cmn.w	r8, #4
 8026f2c:	d036      	beq.n	8026f9c <Argus_Cal_GetInternalXtalkVectorTable+0x154>
 8026f2e:	f8b2 8000 	ldrh.w	r8, [r2]
 8026f32:	44f0      	add	r8, lr
 8026f34:	f8a3 8000 	strh.w	r8, [r3]
 8026f38:	f8b2 8002 	ldrh.w	r8, [r2, #2]
 8026f3c:	809e      	strh	r6, [r3, #4]
 8026f3e:	44b8      	add	r8, r7
 8026f40:	80d9      	strh	r1, [r3, #6]
 8026f42:	f8a3 8002 	strh.w	r8, [r3, #2]
 8026f46:	f8b2 8018 	ldrh.w	r8, [r2, #24]
 8026f4a:	44f0      	add	r8, lr
 8026f4c:	f8a3 8004 	strh.w	r8, [r3, #4]
 8026f50:	f8b2 801a 	ldrh.w	r8, [r2, #26]
 8026f54:	811e      	strh	r6, [r3, #8]
 8026f56:	44b8      	add	r8, r7
 8026f58:	8159      	strh	r1, [r3, #10]
 8026f5a:	f8a3 8006 	strh.w	r8, [r3, #6]
 8026f5e:	f8b2 8030 	ldrh.w	r8, [r2, #48]	@ 0x30
 8026f62:	44f0      	add	r8, lr
 8026f64:	f8a3 8008 	strh.w	r8, [r3, #8]
 8026f68:	f8b2 8032 	ldrh.w	r8, [r2, #50]	@ 0x32
 8026f6c:	819e      	strh	r6, [r3, #12]
 8026f6e:	44b8      	add	r8, r7
 8026f70:	81d9      	strh	r1, [r3, #14]
 8026f72:	f8a3 800a 	strh.w	r8, [r3, #10]
 8026f76:	f8b2 8048 	ldrh.w	r8, [r2, #72]	@ 0x48
 8026f7a:	44f0      	add	r8, lr
 8026f7c:	f8a3 800c 	strh.w	r8, [r3, #12]
 8026f80:	f8b2 804a 	ldrh.w	r8, [r2, #74]	@ 0x4a
 8026f84:	44b8      	add	r8, r7
 8026f86:	f8a3 800e 	strh.w	r8, [r3, #14]
 8026f8a:	3310      	adds	r3, #16
 8026f8c:	4298      	cmp	r0, r3
 8026f8e:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8026f92:	d00e      	beq.n	8026fb2 <Argus_Cal_GetInternalXtalkVectorTable+0x16a>
 8026f94:	801e      	strh	r6, [r3, #0]
 8026f96:	8059      	strh	r1, [r3, #2]
 8026f98:	2c00      	cmp	r4, #0
 8026f9a:	d1c3      	bne.n	8026f24 <Argus_Cal_GetInternalXtalkVectorTable+0xdc>
 8026f9c:	809e      	strh	r6, [r3, #4]
 8026f9e:	80d9      	strh	r1, [r3, #6]
 8026fa0:	811e      	strh	r6, [r3, #8]
 8026fa2:	8159      	strh	r1, [r3, #10]
 8026fa4:	819e      	strh	r6, [r3, #12]
 8026fa6:	81d9      	strh	r1, [r3, #14]
 8026fa8:	3310      	adds	r3, #16
 8026faa:	4298      	cmp	r0, r3
 8026fac:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8026fb0:	d1f0      	bne.n	8026f94 <Argus_Cal_GetInternalXtalkVectorTable+0x14c>
 8026fb2:	3080      	adds	r0, #128	@ 0x80
 8026fb4:	4581      	cmp	r9, r0
 8026fb6:	f50c 7c40 	add.w	ip, ip, #768	@ 0x300
 8026fba:	d1af      	bne.n	8026f1c <Argus_Cal_GetInternalXtalkVectorTable+0xd4>
 8026fbc:	2000      	movs	r0, #0
 8026fbe:	b003      	add	sp, #12
 8026fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026fc4:	2600      	movs	r6, #0
 8026fc6:	4634      	mov	r4, r6
 8026fc8:	e758      	b.n	8026e7c <Argus_Cal_GetInternalXtalkVectorTable+0x34>
 8026fca:	2601      	movs	r6, #1
 8026fcc:	e756      	b.n	8026e7c <Argus_Cal_GetInternalXtalkVectorTable+0x34>
 8026fce:	f06f 00c6 	mvn.w	r0, #198	@ 0xc6
 8026fd2:	4770      	bx	lr
 8026fd4:	08030c2c 	.word	0x08030c2c

08026fd8 <Argus_Cal_GetDefaultCalibration>:
 8026fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026fdc:	b082      	sub	sp, #8
 8026fde:	2902      	cmp	r1, #2
 8026fe0:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 8026fe4:	460e      	mov	r6, r1
 8026fe6:	4604      	mov	r4, r0
 8026fe8:	4617      	mov	r7, r2
 8026fea:	4698      	mov	r8, r3
 8026fec:	d96c      	bls.n	80270c8 <Argus_Cal_GetDefaultCalibration+0xf0>
 8026fee:	1f4b      	subs	r3, r1, #5
 8026ff0:	2b01      	cmp	r3, #1
 8026ff2:	d86b      	bhi.n	80270cc <Argus_Cal_GetDefaultCalibration+0xf4>
 8026ff4:	2f07      	cmp	r7, #7
 8026ff6:	d904      	bls.n	8027002 <Argus_Cal_GetDefaultCalibration+0x2a>
 8026ff8:	f1a7 0343 	sub.w	r3, r7, #67	@ 0x43
 8026ffc:	2b04      	cmp	r3, #4
 8026ffe:	f200 83ac 	bhi.w	802775a <Argus_Cal_GetDefaultCalibration+0x782>
 8027002:	f1b8 0f00 	cmp.w	r8, #0
 8027006:	f000 83a2 	beq.w	802774e <Argus_Cal_GetDefaultCalibration+0x776>
 802700a:	f108 33ff 	add.w	r3, r8, #4294967295
 802700e:	2b04      	cmp	r3, #4
 8027010:	d861      	bhi.n	80270d6 <Argus_Cal_GetDefaultCalibration+0xfe>
 8027012:	2d00      	cmp	r5, #0
 8027014:	d064      	beq.n	80270e0 <Argus_Cal_GetDefaultCalibration+0x108>
 8027016:	1e6b      	subs	r3, r5, #1
 8027018:	2b04      	cmp	r3, #4
 802701a:	f200 82e7 	bhi.w	80275ec <Argus_Cal_GetDefaultCalibration+0x614>
 802701e:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8027022:	2100      	movs	r1, #0
 8027024:	4620      	mov	r0, r4
 8027026:	f003 ffc0 	bl	802afaa <memset>
 802702a:	f104 00a2 	add.w	r0, r4, #162	@ 0xa2
 802702e:	2f47      	cmp	r7, #71	@ 0x47
 8027030:	f200 8393 	bhi.w	802775a <Argus_Cal_GetDefaultCalibration+0x782>
 8027034:	e8df f017 	tbh	[pc, r7, lsl #1]
 8027038:	03a502eb 	.word	0x03a502eb
 802703c:	03a503a5 	.word	0x03a503a5
 8027040:	03a50068 	.word	0x03a50068
 8027044:	03a503a5 	.word	0x03a503a5
 8027048:	03910391 	.word	0x03910391
 802704c:	03910391 	.word	0x03910391
 8027050:	03910391 	.word	0x03910391
 8027054:	03910391 	.word	0x03910391
 8027058:	03910391 	.word	0x03910391
 802705c:	03910391 	.word	0x03910391
 8027060:	03910391 	.word	0x03910391
 8027064:	03910391 	.word	0x03910391
 8027068:	03910391 	.word	0x03910391
 802706c:	03910391 	.word	0x03910391
 8027070:	03910391 	.word	0x03910391
 8027074:	03910391 	.word	0x03910391
 8027078:	03910391 	.word	0x03910391
 802707c:	03910391 	.word	0x03910391
 8027080:	03910391 	.word	0x03910391
 8027084:	03910391 	.word	0x03910391
 8027088:	03910391 	.word	0x03910391
 802708c:	03910391 	.word	0x03910391
 8027090:	03910391 	.word	0x03910391
 8027094:	03910391 	.word	0x03910391
 8027098:	03910391 	.word	0x03910391
 802709c:	03910391 	.word	0x03910391
 80270a0:	03910391 	.word	0x03910391
 80270a4:	03910391 	.word	0x03910391
 80270a8:	03910391 	.word	0x03910391
 80270ac:	03910391 	.word	0x03910391
 80270b0:	03910391 	.word	0x03910391
 80270b4:	03910391 	.word	0x03910391
 80270b8:	03910391 	.word	0x03910391
 80270bc:	03a50391 	.word	0x03a50391
 80270c0:	03a50068 	.word	0x03a50068
 80270c4:	03a503a5 	.word	0x03a503a5
 80270c8:	2900      	cmp	r1, #0
 80270ca:	d193      	bne.n	8026ff4 <Argus_Cal_GetDefaultCalibration+0x1c>
 80270cc:	f06f 0068 	mvn.w	r0, #104	@ 0x68
 80270d0:	b002      	add	sp, #8
 80270d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80270d6:	f06f 00c5 	mvn.w	r0, #197	@ 0xc5
 80270da:	b002      	add	sp, #8
 80270dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80270e0:	2f43      	cmp	r7, #67	@ 0x43
 80270e2:	f000 8343 	beq.w	802776c <Argus_Cal_GetDefaultCalibration+0x794>
 80270e6:	f200 8329 	bhi.w	802773c <Argus_Cal_GetDefaultCalibration+0x764>
 80270ea:	2f02      	cmp	r7, #2
 80270ec:	f240 8283 	bls.w	80275f6 <Argus_Cal_GetDefaultCalibration+0x61e>
 80270f0:	2f04      	cmp	r7, #4
 80270f2:	f040 834e 	bne.w	8027792 <Argus_Cal_GetDefaultCalibration+0x7ba>
 80270f6:	2503      	movs	r5, #3
 80270f8:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 80270fc:	2100      	movs	r1, #0
 80270fe:	4620      	mov	r0, r4
 8027100:	f003 ff53 	bl	802afaa <memset>
 8027104:	f104 00a2 	add.w	r0, r4, #162	@ 0xa2
 8027108:	2100      	movs	r1, #0
 802710a:	2280      	movs	r2, #128	@ 0x80
 802710c:	f003 ff4d 	bl	802afaa <memset>
 8027110:	48c1      	ldr	r0, [pc, #772]	@ (8027418 <Argus_Cal_GetDefaultCalibration+0x440>)
 8027112:	f3c6 0140 	ubfx	r1, r6, #1, #1
 8027116:	ea4f 0e41 	mov.w	lr, r1, lsl #1
 802711a:	f104 03a0 	add.w	r3, r4, #160	@ 0xa0
 802711e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8027122:	f04f 0c00 	mov.w	ip, #0
 8027126:	f931 203c 	ldrsh.w	r2, [r1, ip, lsl #3]
 802712a:	f823 2f02 	strh.w	r2, [r3, #2]!
 802712e:	f10c 0c01 	add.w	ip, ip, #1
 8027132:	f1bc 0f20 	cmp.w	ip, #32
 8027136:	d1f6      	bne.n	8027126 <Argus_Cal_GetDefaultCalibration+0x14e>
 8027138:	4470      	add	r0, lr
 802713a:	f104 0ce0 	add.w	ip, r4, #224	@ 0xe0
 802713e:	f504 7290 	add.w	r2, r4, #288	@ 0x120
 8027142:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8027146:	f82c 3f02 	strh.w	r3, [ip, #2]!
 802714a:	4562      	cmp	r2, ip
 802714c:	f100 0008 	add.w	r0, r0, #8
 8027150:	d1f7      	bne.n	8027142 <Argus_Cal_GetDefaultCalibration+0x16a>
 8027152:	f016 0201 	ands.w	r2, r6, #1
 8027156:	f007 033f 	and.w	r3, r7, #63	@ 0x3f
 802715a:	f000 8262 	beq.w	8027622 <Argus_Cal_GetDefaultCalibration+0x64a>
 802715e:	f44f 4060 	mov.w	r0, #57344	@ 0xe000
 8027162:	2b05      	cmp	r3, #5
 8027164:	80e0      	strh	r0, [r4, #6]
 8027166:	f000 879b 	beq.w	80280a0 <Argus_Cal_GetDefaultCalibration+0x10c8>
 802716a:	2b04      	cmp	r3, #4
 802716c:	f000 83be 	beq.w	80278ec <Argus_Cal_GetDefaultCalibration+0x914>
 8027170:	2b03      	cmp	r3, #3
 8027172:	f001 80a3 	beq.w	80282bc <Argus_Cal_GetDefaultCalibration+0x12e4>
 8027176:	2a00      	cmp	r2, #0
 8027178:	f000 831c 	beq.w	80277b4 <Argus_Cal_GetDefaultCalibration+0x7dc>
 802717c:	f244 610b 	movw	r1, #17931	@ 0x460b
 8027180:	2d01      	cmp	r5, #1
 8027182:	8061      	strh	r1, [r4, #2]
 8027184:	f040 831c 	bne.w	80277c0 <Argus_Cal_GetDefaultCalibration+0x7e8>
 8027188:	f244 6176 	movw	r1, #18038	@ 0x4676
 802718c:	2b05      	cmp	r3, #5
 802718e:	8061      	strh	r1, [r4, #2]
 8027190:	f040 8316 	bne.w	80277c0 <Argus_Cal_GetDefaultCalibration+0x7e8>
 8027194:	2a00      	cmp	r2, #0
 8027196:	bf14      	ite	ne
 8027198:	2133      	movne	r1, #51	@ 0x33
 802719a:	2138      	moveq	r1, #56	@ 0x38
 802719c:	2d01      	cmp	r5, #1
 802719e:	7221      	strb	r1, [r4, #8]
 80271a0:	f000 8479 	beq.w	8027a96 <Argus_Cal_GetDefaultCalibration+0xabe>
 80271a4:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80271a8:	7261      	strb	r1, [r4, #9]
 80271aa:	2a00      	cmp	r2, #0
 80271ac:	bf14      	ite	ne
 80271ae:	2135      	movne	r1, #53	@ 0x35
 80271b0:	213d      	moveq	r1, #61	@ 0x3d
 80271b2:	2d01      	cmp	r5, #1
 80271b4:	72a1      	strb	r1, [r4, #10]
 80271b6:	d101      	bne.n	80271bc <Argus_Cal_GetDefaultCalibration+0x1e4>
 80271b8:	212e      	movs	r1, #46	@ 0x2e
 80271ba:	72a1      	strb	r1, [r4, #10]
 80271bc:	2a00      	cmp	r2, #0
 80271be:	bf14      	ite	ne
 80271c0:	2158      	movne	r1, #88	@ 0x58
 80271c2:	2152      	moveq	r1, #82	@ 0x52
 80271c4:	2d01      	cmp	r5, #1
 80271c6:	72e1      	strb	r1, [r4, #11]
 80271c8:	f001 801b 	beq.w	8028202 <Argus_Cal_GetDefaultCalibration+0x122a>
 80271cc:	2a00      	cmp	r2, #0
 80271ce:	bf14      	ite	ne
 80271d0:	2121      	movne	r1, #33	@ 0x21
 80271d2:	2129      	moveq	r1, #41	@ 0x29
 80271d4:	2d01      	cmp	r5, #1
 80271d6:	7321      	strb	r1, [r4, #12]
 80271d8:	f001 8023 	beq.w	8028222 <Argus_Cal_GetDefaultCalibration+0x124a>
 80271dc:	f102 014f 	add.w	r1, r2, #79	@ 0x4f
 80271e0:	7361      	strb	r1, [r4, #13]
 80271e2:	2a00      	cmp	r2, #0
 80271e4:	bf14      	ite	ne
 80271e6:	2122      	movne	r1, #34	@ 0x22
 80271e8:	2129      	moveq	r1, #41	@ 0x29
 80271ea:	2d01      	cmp	r5, #1
 80271ec:	73a1      	strb	r1, [r4, #14]
 80271ee:	d101      	bne.n	80271f4 <Argus_Cal_GetDefaultCalibration+0x21c>
 80271f0:	2118      	movs	r1, #24
 80271f2:	73a1      	strb	r1, [r4, #14]
 80271f4:	2a00      	cmp	r2, #0
 80271f6:	bf14      	ite	ne
 80271f8:	2127      	movne	r1, #39	@ 0x27
 80271fa:	212b      	moveq	r1, #43	@ 0x2b
 80271fc:	2d01      	cmp	r5, #1
 80271fe:	73e1      	strb	r1, [r4, #15]
 8027200:	d101      	bne.n	8027206 <Argus_Cal_GetDefaultCalibration+0x22e>
 8027202:	211d      	movs	r1, #29
 8027204:	73e1      	strb	r1, [r4, #15]
 8027206:	2a00      	cmp	r2, #0
 8027208:	bf14      	ite	ne
 802720a:	2115      	movne	r1, #21
 802720c:	2120      	moveq	r1, #32
 802720e:	2d01      	cmp	r5, #1
 8027210:	7421      	strb	r1, [r4, #16]
 8027212:	f000 87c8 	beq.w	80281a6 <Argus_Cal_GetDefaultCalibration+0x11ce>
 8027216:	2a00      	cmp	r2, #0
 8027218:	bf14      	ite	ne
 802721a:	2151      	movne	r1, #81	@ 0x51
 802721c:	2149      	moveq	r1, #73	@ 0x49
 802721e:	2d01      	cmp	r5, #1
 8027220:	7461      	strb	r1, [r4, #17]
 8027222:	f000 87d0 	beq.w	80281c6 <Argus_Cal_GetDefaultCalibration+0x11ee>
 8027226:	2a00      	cmp	r2, #0
 8027228:	bf14      	ite	ne
 802722a:	2117      	movne	r1, #23
 802722c:	2120      	moveq	r1, #32
 802722e:	2d01      	cmp	r5, #1
 8027230:	74a1      	strb	r1, [r4, #18]
 8027232:	f000 8789 	beq.w	8028148 <Argus_Cal_GetDefaultCalibration+0x1170>
 8027236:	2a00      	cmp	r2, #0
 8027238:	bf14      	ite	ne
 802723a:	2126      	movne	r1, #38	@ 0x26
 802723c:	212b      	moveq	r1, #43	@ 0x2b
 802723e:	2d01      	cmp	r5, #1
 8027240:	74e1      	strb	r1, [r4, #19]
 8027242:	f000 8791 	beq.w	8028168 <Argus_Cal_GetDefaultCalibration+0x1190>
 8027246:	2a00      	cmp	r2, #0
 8027248:	bf14      	ite	ne
 802724a:	2114      	movne	r1, #20
 802724c:	211f      	moveq	r1, #31
 802724e:	2d01      	cmp	r5, #1
 8027250:	7521      	strb	r1, [r4, #20]
 8027252:	f000 876a 	beq.w	802812a <Argus_Cal_GetDefaultCalibration+0x1152>
 8027256:	2a00      	cmp	r2, #0
 8027258:	f001 8052 	beq.w	8028300 <Argus_Cal_GetDefaultCalibration+0x1328>
 802725c:	2151      	movs	r1, #81	@ 0x51
 802725e:	7561      	strb	r1, [r4, #21]
 8027260:	2115      	movs	r1, #21
 8027262:	2d01      	cmp	r5, #1
 8027264:	75a1      	strb	r1, [r4, #22]
 8027266:	f001 8282 	beq.w	802876e <Argus_Cal_GetDefaultCalibration+0x1796>
 802726a:	2a00      	cmp	r2, #0
 802726c:	f001 8259 	beq.w	8028722 <Argus_Cal_GetDefaultCalibration+0x174a>
 8027270:	496a      	ldr	r1, [pc, #424]	@ (802741c <Argus_Cal_GetDefaultCalibration+0x444>)
 8027272:	61a1      	str	r1, [r4, #24]
 8027274:	2128      	movs	r1, #40	@ 0x28
 8027276:	75e1      	strb	r1, [r4, #23]
 8027278:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 802727c:	8021      	strh	r1, [r4, #0]
 802727e:	1e19      	subs	r1, r3, #0
 8027280:	bf18      	it	ne
 8027282:	2101      	movne	r1, #1
 8027284:	f884 124c 	strb.w	r1, [r4, #588]	@ 0x24c
 8027288:	f884 1258 	strb.w	r1, [r4, #600]	@ 0x258
 802728c:	4964      	ldr	r1, [pc, #400]	@ (8027420 <Argus_Cal_GetDefaultCalibration+0x448>)
 802728e:	e9c4 1194 	strd	r1, r1, [r4, #592]	@ 0x250
 8027292:	2110      	movs	r1, #16
 8027294:	f8a4 124e 	strh.w	r1, [r4, #590]	@ 0x24e
 8027298:	219a      	movs	r1, #154	@ 0x9a
 802729a:	f884 124d 	strb.w	r1, [r4, #589]	@ 0x24d
 802729e:	f06f 113c 	mvn.w	r1, #3932220	@ 0x3c003c
 80272a2:	f8c4 125a 	str.w	r1, [r4, #602]	@ 0x25a
 80272a6:	f644 41cd 	movw	r1, #19661	@ 0x4ccd
 80272aa:	f8a4 109c 	strh.w	r1, [r4, #156]	@ 0x9c
 80272ae:	2b05      	cmp	r3, #5
 80272b0:	f248 0180 	movw	r1, #32896	@ 0x8080
 80272b4:	f8a4 122a 	strh.w	r1, [r4, #554]	@ 0x22a
 80272b8:	f000 83a7 	beq.w	8027a0a <Argus_Cal_GetDefaultCalibration+0xa32>
 80272bc:	f06f 09a3 	mvn.w	r9, #163	@ 0xa3
 80272c0:	f06f 0ef5 	mvn.w	lr, #245	@ 0xf5
 80272c4:	2b04      	cmp	r3, #4
 80272c6:	f000 8586 	beq.w	8027dd6 <Argus_Cal_GetDefaultCalibration+0xdfe>
 80272ca:	2a00      	cmp	r2, #0
 80272cc:	f000 85c9 	beq.w	8027e62 <Argus_Cal_GetDefaultCalibration+0xe8a>
 80272d0:	f44f 7135 	mov.w	r1, #724	@ 0x2d4
 80272d4:	2d01      	cmp	r5, #1
 80272d6:	f8a4 1234 	strh.w	r1, [r4, #564]	@ 0x234
 80272da:	f001 819a 	beq.w	8028612 <Argus_Cal_GetDefaultCalibration+0x163a>
 80272de:	2b04      	cmp	r3, #4
 80272e0:	f001 8122 	beq.w	8028528 <Argus_Cal_GetDefaultCalibration+0x1550>
 80272e4:	2a00      	cmp	r2, #0
 80272e6:	f040 85da 	bne.w	8027e9e <Argus_Cal_GetDefaultCalibration+0xec6>
 80272ea:	f240 2189 	movw	r1, #649	@ 0x289
 80272ee:	2d01      	cmp	r5, #1
 80272f0:	f8a4 1236 	strh.w	r1, [r4, #566]	@ 0x236
 80272f4:	f001 8103 	beq.w	80284fe <Argus_Cal_GetDefaultCalibration+0x1526>
 80272f8:	2b05      	cmp	r3, #5
 80272fa:	f000 8398 	beq.w	8027a2e <Argus_Cal_GetDefaultCalibration+0xa56>
 80272fe:	2b04      	cmp	r3, #4
 8027300:	f001 811d 	beq.w	802853e <Argus_Cal_GetDefaultCalibration+0x1566>
 8027304:	2a00      	cmp	r2, #0
 8027306:	f040 85cd 	bne.w	8027ea4 <Argus_Cal_GetDefaultCalibration+0xecc>
 802730a:	f240 115b 	movw	r1, #347	@ 0x15b
 802730e:	2d01      	cmp	r5, #1
 8027310:	f8a4 1238 	strh.w	r1, [r4, #568]	@ 0x238
 8027314:	f001 8227 	beq.w	8028766 <Argus_Cal_GetDefaultCalibration+0x178e>
 8027318:	2b05      	cmp	r3, #5
 802731a:	f000 8370 	beq.w	80279fe <Argus_Cal_GetDefaultCalibration+0xa26>
 802731e:	2b04      	cmp	r3, #4
 8027320:	f001 8151 	beq.w	80285c6 <Argus_Cal_GetDefaultCalibration+0x15ee>
 8027324:	2a00      	cmp	r2, #0
 8027326:	f040 853c 	bne.w	8027da2 <Argus_Cal_GetDefaultCalibration+0xdca>
 802732a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 802732e:	2d01      	cmp	r5, #1
 8027330:	f8a4 123a 	strh.w	r1, [r4, #570]	@ 0x23a
 8027334:	f001 80e0 	beq.w	80284f8 <Argus_Cal_GetDefaultCalibration+0x1520>
 8027338:	2b05      	cmp	r3, #5
 802733a:	f000 838f 	beq.w	8027a5c <Argus_Cal_GetDefaultCalibration+0xa84>
 802733e:	2b04      	cmp	r3, #4
 8027340:	f001 80c9 	beq.w	80284d6 <Argus_Cal_GetDefaultCalibration+0x14fe>
 8027344:	2a00      	cmp	r2, #0
 8027346:	f000 8348 	beq.w	80279da <Argus_Cal_GetDefaultCalibration+0xa02>
 802734a:	f240 31a6 	movw	r1, #934	@ 0x3a6
 802734e:	2d01      	cmp	r5, #1
 8027350:	f8a4 122c 	strh.w	r1, [r4, #556]	@ 0x22c
 8027354:	f001 8212 	beq.w	802877c <Argus_Cal_GetDefaultCalibration+0x17a4>
 8027358:	2b05      	cmp	r3, #5
 802735a:	f000 8390 	beq.w	8027a7e <Argus_Cal_GetDefaultCalibration+0xaa6>
 802735e:	2b04      	cmp	r3, #4
 8027360:	f001 81bb 	beq.w	80286da <Argus_Cal_GetDefaultCalibration+0x1702>
 8027364:	2a00      	cmp	r2, #0
 8027366:	f040 85de 	bne.w	8027f26 <Argus_Cal_GetDefaultCalibration+0xf4e>
 802736a:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 802736e:	2d01      	cmp	r5, #1
 8027370:	f8a4 122e 	strh.w	r1, [r4, #558]	@ 0x22e
 8027374:	f001 8096 	beq.w	80284a4 <Argus_Cal_GetDefaultCalibration+0x14cc>
 8027378:	2b05      	cmp	r3, #5
 802737a:	f000 8364 	beq.w	8027a46 <Argus_Cal_GetDefaultCalibration+0xa6e>
 802737e:	2b04      	cmp	r3, #4
 8027380:	f001 809e 	beq.w	80284c0 <Argus_Cal_GetDefaultCalibration+0x14e8>
 8027384:	2a00      	cmp	r2, #0
 8027386:	f040 85c1 	bne.w	8027f0c <Argus_Cal_GetDefaultCalibration+0xf34>
 802738a:	f240 51a5 	movw	r1, #1445	@ 0x5a5
 802738e:	2d01      	cmp	r5, #1
 8027390:	f8a4 1230 	strh.w	r1, [r4, #560]	@ 0x230
 8027394:	f001 819b 	beq.w	80286ce <Argus_Cal_GetDefaultCalibration+0x16f6>
 8027398:	2b05      	cmp	r3, #5
 802739a:	f000 836a 	beq.w	8027a72 <Argus_Cal_GetDefaultCalibration+0xa9a>
 802739e:	2b04      	cmp	r3, #4
 80273a0:	f001 81b3 	beq.w	802870a <Argus_Cal_GetDefaultCalibration+0x1732>
 80273a4:	2a00      	cmp	r2, #0
 80273a6:	f040 85d8 	bne.w	8027f5a <Argus_Cal_GetDefaultCalibration+0xf82>
 80273aa:	f240 3196 	movw	r1, #918	@ 0x396
 80273ae:	2d01      	cmp	r5, #1
 80273b0:	f8a4 1232 	strh.w	r1, [r4, #562]	@ 0x232
 80273b4:	f001 818e 	beq.w	80286d4 <Argus_Cal_GetDefaultCalibration+0x16fc>
 80273b8:	2b05      	cmp	r3, #5
 80273ba:	f000 834a 	beq.w	8027a52 <Argus_Cal_GetDefaultCalibration+0xa7a>
 80273be:	2b04      	cmp	r3, #4
 80273c0:	f001 8197 	beq.w	80286f2 <Argus_Cal_GetDefaultCalibration+0x171a>
 80273c4:	2a00      	cmp	r2, #0
 80273c6:	f040 85bb 	bne.w	8027f40 <Argus_Cal_GetDefaultCalibration+0xf68>
 80273ca:	2145      	movs	r1, #69	@ 0x45
 80273cc:	2d01      	cmp	r5, #1
 80273ce:	f8a4 1244 	strh.w	r1, [r4, #580]	@ 0x244
 80273d2:	f001 80c8 	beq.w	8028566 <Argus_Cal_GetDefaultCalibration+0x158e>
 80273d6:	2b05      	cmp	r3, #5
 80273d8:	f000 8345 	beq.w	8027a66 <Argus_Cal_GetDefaultCalibration+0xa8e>
 80273dc:	2b04      	cmp	r3, #4
 80273de:	f001 80d1 	beq.w	8028584 <Argus_Cal_GetDefaultCalibration+0x15ac>
 80273e2:	2a00      	cmp	r2, #0
 80273e4:	f040 84c3 	bne.w	8027d6e <Argus_Cal_GetDefaultCalibration+0xd96>
 80273e8:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 80273ec:	2d01      	cmp	r5, #1
 80273ee:	f8a4 1246 	strh.w	r1, [r4, #582]	@ 0x246
 80273f2:	f001 81a8 	beq.w	8028746 <Argus_Cal_GetDefaultCalibration+0x176e>
 80273f6:	2b05      	cmp	r3, #5
 80273f8:	f000 831f 	beq.w	8027a3a <Argus_Cal_GetDefaultCalibration+0xa62>
 80273fc:	2b04      	cmp	r3, #4
 80273fe:	f001 81a6 	beq.w	802874e <Argus_Cal_GetDefaultCalibration+0x1776>
 8027402:	2a00      	cmp	r2, #0
 8027404:	f040 85b6 	bne.w	8027f74 <Argus_Cal_GetDefaultCalibration+0xf9c>
 8027408:	f240 2147 	movw	r1, #583	@ 0x247
 802740c:	2d01      	cmp	r5, #1
 802740e:	f8a4 1248 	strh.w	r1, [r4, #584]	@ 0x248
 8027412:	f001 8044 	beq.w	802849e <Argus_Cal_GetDefaultCalibration+0x14c6>
 8027416:	e005      	b.n	8027424 <Argus_Cal_GetDefaultCalibration+0x44c>
 8027418:	08032744 	.word	0x08032744
 802741c:	0205711a 	.word	0x0205711a
 8027420:	ff5cff0a 	.word	0xff5cff0a
 8027424:	2b05      	cmp	r3, #5
 8027426:	f000 8341 	beq.w	8027aac <Argus_Cal_GetDefaultCalibration+0xad4>
 802742a:	2b04      	cmp	r3, #4
 802742c:	f001 80d6 	beq.w	80285dc <Argus_Cal_GetDefaultCalibration+0x1604>
 8027430:	2a00      	cmp	r2, #0
 8027432:	f040 8551 	bne.w	8027ed8 <Argus_Cal_GetDefaultCalibration+0xf00>
 8027436:	f240 51d3 	movw	r1, #1491	@ 0x5d3
 802743a:	2d01      	cmp	r5, #1
 802743c:	f8a4 124a 	strh.w	r1, [r4, #586]	@ 0x24a
 8027440:	f001 8097 	beq.w	8028572 <Argus_Cal_GetDefaultCalibration+0x159a>
 8027444:	2b05      	cmp	r3, #5
 8027446:	f000 832b 	beq.w	8027aa0 <Argus_Cal_GetDefaultCalibration+0xac8>
 802744a:	2b04      	cmp	r3, #4
 802744c:	f001 80b0 	beq.w	80285b0 <Argus_Cal_GetDefaultCalibration+0x15d8>
 8027450:	2a00      	cmp	r2, #0
 8027452:	f040 8534 	bne.w	8027ebe <Argus_Cal_GetDefaultCalibration+0xee6>
 8027456:	f240 4171 	movw	r1, #1137	@ 0x471
 802745a:	2d01      	cmp	r5, #1
 802745c:	f8a4 123c 	strh.w	r1, [r4, #572]	@ 0x23c
 8027460:	f001 8084 	beq.w	802856c <Argus_Cal_GetDefaultCalibration+0x1594>
 8027464:	2b05      	cmp	r3, #5
 8027466:	f000 838e 	beq.w	8027b86 <Argus_Cal_GetDefaultCalibration+0xbae>
 802746a:	2b04      	cmp	r3, #4
 802746c:	f001 801d 	beq.w	80284aa <Argus_Cal_GetDefaultCalibration+0x14d2>
 8027470:	2a00      	cmp	r2, #0
 8027472:	f040 853e 	bne.w	8027ef2 <Argus_Cal_GetDefaultCalibration+0xf1a>
 8027476:	f240 3151 	movw	r1, #849	@ 0x351
 802747a:	2d01      	cmp	r5, #1
 802747c:	f8a4 123e 	strh.w	r1, [r4, #574]	@ 0x23e
 8027480:	f001 807d 	beq.w	802857e <Argus_Cal_GetDefaultCalibration+0x15a6>
 8027484:	2b05      	cmp	r3, #5
 8027486:	f000 8300 	beq.w	8027a8a <Argus_Cal_GetDefaultCalibration+0xab2>
 802748a:	2b04      	cmp	r3, #4
 802748c:	f001 8085 	beq.w	802859a <Argus_Cal_GetDefaultCalibration+0x15c2>
 8027490:	2a00      	cmp	r2, #0
 8027492:	f040 8479 	bne.w	8027d88 <Argus_Cal_GetDefaultCalibration+0xdb0>
 8027496:	f240 511f 	movw	r1, #1311	@ 0x51f
 802749a:	2d01      	cmp	r5, #1
 802749c:	f8a4 1240 	strh.w	r1, [r4, #576]	@ 0x240
 80274a0:	f001 806a 	beq.w	8028578 <Argus_Cal_GetDefaultCalibration+0x15a0>
 80274a4:	2b05      	cmp	r3, #5
 80274a6:	f000 82a4 	beq.w	80279f2 <Argus_Cal_GetDefaultCalibration+0xa1a>
 80274aa:	2b04      	cmp	r3, #4
 80274ac:	f001 80a1 	beq.w	80285f2 <Argus_Cal_GetDefaultCalibration+0x161a>
 80274b0:	2a00      	cmp	r2, #0
 80274b2:	f040 8483 	bne.w	8027dbc <Argus_Cal_GetDefaultCalibration+0xde4>
 80274b6:	f240 31f1 	movw	r1, #1009	@ 0x3f1
 80274ba:	2d01      	cmp	r5, #1
 80274bc:	f8a4 1242 	strh.w	r1, [r4, #578]	@ 0x242
 80274c0:	f001 813d 	beq.w	802873e <Argus_Cal_GetDefaultCalibration+0x1766>
 80274c4:	2b04      	cmp	r3, #4
 80274c6:	f000 83e7 	beq.w	8027c98 <Argus_Cal_GetDefaultCalibration+0xcc0>
 80274ca:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 80274ce:	2b01      	cmp	r3, #1
 80274d0:	f8c4 1222 	str.w	r1, [r4, #546]	@ 0x222
 80274d4:	f040 8370 	bne.w	8027bb8 <Argus_Cal_GetDefaultCalibration+0xbe0>
 80274d8:	f640 4ccd 	movw	ip, #3277	@ 0xccd
 80274dc:	f1a8 0104 	sub.w	r1, r8, #4
 80274e0:	f8a4 c26a 	strh.w	ip, [r4, #618]	@ 0x26a
 80274e4:	f04f 0c18 	mov.w	ip, #24
 80274e8:	b2c9      	uxtb	r1, r1
 80274ea:	f884 c269 	strb.w	ip, [r4, #617]	@ 0x269
 80274ee:	f44f 5cc2 	mov.w	ip, #6208	@ 0x1840
 80274f2:	f8a4 c267 	strh.w	ip, [r4, #615]	@ 0x267
 80274f6:	2901      	cmp	r1, #1
 80274f8:	f04f 0c0d 	mov.w	ip, #13
 80274fc:	f884 c264 	strb.w	ip, [r4, #612]	@ 0x264
 8027500:	f240 8236 	bls.w	8027970 <Argus_Cal_GetDefaultCalibration+0x998>
 8027504:	f8df c29c 	ldr.w	ip, [pc, #668]	@ 80277a4 <Argus_Cal_GetDefaultCalibration+0x7cc>
 8027508:	f8c4 c25e 	str.w	ip, [r4, #606]	@ 0x25e
 802750c:	f243 0c28 	movw	ip, #12328	@ 0x3028
 8027510:	f8a4 c265 	strh.w	ip, [r4, #613]	@ 0x265
 8027514:	f44f 4c7a 	mov.w	ip, #64000	@ 0xfa00
 8027518:	f8a4 c262 	strh.w	ip, [r4, #610]	@ 0x262
 802751c:	2a00      	cmp	r2, #0
 802751e:	f000 873b 	beq.w	8028398 <Argus_Cal_GetDefaultCalibration+0x13c0>
 8027522:	f241 3c0c 	movw	ip, #4876	@ 0x130c
 8027526:	2d01      	cmp	r5, #1
 8027528:	f8a4 c274 	strh.w	ip, [r4, #628]	@ 0x274
 802752c:	f001 82e5 	beq.w	8028afa <Argus_Cal_GetDefaultCalibration+0x1b22>
 8027530:	2b04      	cmp	r3, #4
 8027532:	f000 83e8 	beq.w	8027d06 <Argus_Cal_GetDefaultCalibration+0xd2e>
 8027536:	2b03      	cmp	r3, #3
 8027538:	f000 8372 	beq.w	8027c20 <Argus_Cal_GetDefaultCalibration+0xc48>
 802753c:	2a00      	cmp	r2, #0
 802753e:	f000 8755 	beq.w	80283ec <Argus_Cal_GetDefaultCalibration+0x1414>
 8027542:	f241 2cca 	movw	ip, #4810	@ 0x12ca
 8027546:	2d01      	cmp	r5, #1
 8027548:	f8a4 c276 	strh.w	ip, [r4, #630]	@ 0x276
 802754c:	f000 8732 	beq.w	80283b4 <Argus_Cal_GetDefaultCalibration+0x13dc>
 8027550:	f241 2c43 	movw	ip, #4675	@ 0x1243
 8027554:	f8a4 c278 	strh.w	ip, [r4, #632]	@ 0x278
 8027558:	f241 1c65 	movw	ip, #4453	@ 0x1165
 802755c:	f8a4 c27a 	strh.w	ip, [r4, #634]	@ 0x27a
 8027560:	f8df c244 	ldr.w	ip, [pc, #580]	@ 80277a8 <Argus_Cal_GetDefaultCalibration+0x7d0>
 8027564:	f8c4 c26c 	str.w	ip, [r4, #620]	@ 0x26c
 8027568:	f04f 0c04 	mov.w	ip, #4
 802756c:	f884 c270 	strb.w	ip, [r4, #624]	@ 0x270
 8027570:	f04f 0c02 	mov.w	ip, #2
 8027574:	2901      	cmp	r1, #1
 8027576:	bf8c      	ite	hi
 8027578:	2109      	movhi	r1, #9
 802757a:	2100      	movls	r1, #0
 802757c:	f884 1284 	strb.w	r1, [r4, #644]	@ 0x284
 8027580:	4985      	ldr	r1, [pc, #532]	@ (8027798 <Argus_Cal_GetDefaultCalibration+0x7c0>)
 8027582:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80277ac <Argus_Cal_GetDefaultCalibration+0x7d4>
 8027586:	f8c4 1280 	str.w	r1, [r4, #640]	@ 0x280
 802758a:	4984      	ldr	r1, [pc, #528]	@ (802779c <Argus_Cal_GetDefaultCalibration+0x7c4>)
 802758c:	f884 c271 	strb.w	ip, [r4, #625]	@ 0x271
 8027590:	e9c4 a1ac 	strd	sl, r1, [r4, #688]	@ 0x2b0
 8027594:	f8df c218 	ldr.w	ip, [pc, #536]	@ 80277b0 <Argus_Cal_GetDefaultCalibration+0x7d8>
 8027598:	f8c4 c27c 	str.w	ip, [r4, #636]	@ 0x27c
 802759c:	2125      	movs	r1, #37	@ 0x25
 802759e:	f244 1cf1 	movw	ip, #16881	@ 0x41f1
 80275a2:	f884 12b8 	strb.w	r1, [r4, #696]	@ 0x2b8
 80275a6:	2d04      	cmp	r5, #4
 80275a8:	f241 3188 	movw	r1, #5000	@ 0x1388
 80275ac:	f8a4 c272 	strh.w	ip, [r4, #626]	@ 0x272
 80275b0:	f8a4 12ba 	strh.w	r1, [r4, #698]	@ 0x2ba
 80275b4:	f000 8280 	beq.w	8027ab8 <Argus_Cal_GetDefaultCalibration+0xae0>
 80275b8:	0773      	lsls	r3, r6, #29
 80275ba:	bf44      	itt	mi
 80275bc:	2300      	movmi	r3, #0
 80275be:	f884 3258 	strbmi.w	r3, [r4, #600]	@ 0x258
 80275c2:	f104 001c 	add.w	r0, r4, #28
 80275c6:	4631      	mov	r1, r6
 80275c8:	f7ff fabc 	bl	8026b44 <Argus_GetPixelRangeOffsets_Callback>
 80275cc:	4631      	mov	r1, r6
 80275ce:	f504 7091 	add.w	r0, r4, #290	@ 0x122
 80275d2:	f7ff fc33 	bl	8026e3c <Argus_GetCrosstalkVectorTable_Callback>
 80275d6:	4620      	mov	r0, r4
 80275d8:	9500      	str	r5, [sp, #0]
 80275da:	4643      	mov	r3, r8
 80275dc:	463a      	mov	r2, r7
 80275de:	4631      	mov	r1, r6
 80275e0:	f7ff faae 	bl	8026b40 <Argus_OnGetDefaultCalibration>
 80275e4:	2000      	movs	r0, #0
 80275e6:	b002      	add	sp, #8
 80275e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80275ec:	f06f 00c4 	mvn.w	r0, #196	@ 0xc4
 80275f0:	b002      	add	sp, #8
 80275f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80275f6:	2f00      	cmp	r7, #0
 80275f8:	f040 80b6 	bne.w	8027768 <Argus_Cal_GetDefaultCalibration+0x790>
 80275fc:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8027600:	4639      	mov	r1, r7
 8027602:	4620      	mov	r0, r4
 8027604:	f003 fcd1 	bl	802afaa <memset>
 8027608:	2502      	movs	r5, #2
 802760a:	f104 00a2 	add.w	r0, r4, #162	@ 0xa2
 802760e:	2280      	movs	r2, #128	@ 0x80
 8027610:	2100      	movs	r1, #0
 8027612:	f003 fcca 	bl	802afaa <memset>
 8027616:	f016 0201 	ands.w	r2, r6, #1
 802761a:	f007 033f 	and.w	r3, r7, #63	@ 0x3f
 802761e:	f47f ad9e 	bne.w	802715e <Argus_Cal_GetDefaultCalibration+0x186>
 8027622:	f64e 40cd 	movw	r0, #60621	@ 0xeccd
 8027626:	2b05      	cmp	r3, #5
 8027628:	80e0      	strh	r0, [r4, #6]
 802762a:	f000 8557 	beq.w	80280dc <Argus_Cal_GetDefaultCalibration+0x1104>
 802762e:	2b04      	cmp	r3, #4
 8027630:	f47f ad9e 	bne.w	8027170 <Argus_Cal_GetDefaultCalibration+0x198>
 8027634:	f644 41d8 	movw	r1, #19672	@ 0x4cd8
 8027638:	2d01      	cmp	r5, #1
 802763a:	8061      	strh	r1, [r4, #2]
 802763c:	f43f ada4 	beq.w	8027188 <Argus_Cal_GetDefaultCalibration+0x1b0>
 8027640:	2113      	movs	r1, #19
 8027642:	7221      	strb	r1, [r4, #8]
 8027644:	2a00      	cmp	r2, #0
 8027646:	f000 8766 	beq.w	8028516 <Argus_Cal_GetDefaultCalibration+0x153e>
 802764a:	2137      	movs	r1, #55	@ 0x37
 802764c:	2d01      	cmp	r5, #1
 802764e:	7261      	strb	r1, [r4, #9]
 8027650:	f000 8223 	beq.w	8027a9a <Argus_Cal_GetDefaultCalibration+0xac2>
 8027654:	210c      	movs	r1, #12
 8027656:	72a1      	strb	r1, [r4, #10]
 8027658:	2a00      	cmp	r2, #0
 802765a:	bf14      	ite	ne
 802765c:	212e      	movne	r1, #46	@ 0x2e
 802765e:	f06f 0107 	mvneq.w	r1, #7
 8027662:	2d01      	cmp	r5, #1
 8027664:	72e1      	strb	r1, [r4, #11]
 8027666:	f000 8648 	beq.w	80282fa <Argus_Cal_GetDefaultCalibration+0x1322>
 802766a:	2a00      	cmp	r2, #0
 802766c:	bf14      	ite	ne
 802766e:	f06f 010b 	mvnne.w	r1, #11
 8027672:	f06f 010f 	mvneq.w	r1, #15
 8027676:	2d01      	cmp	r5, #1
 8027678:	7321      	strb	r1, [r4, #12]
 802767a:	f000 8144 	beq.w	8027906 <Argus_Cal_GetDefaultCalibration+0x92e>
 802767e:	2a00      	cmp	r2, #0
 8027680:	f000 8768 	beq.w	8028554 <Argus_Cal_GetDefaultCalibration+0x157c>
 8027684:	2104      	movs	r1, #4
 8027686:	2d01      	cmp	r5, #1
 8027688:	7361      	strb	r1, [r4, #13]
 802768a:	f000 86d9 	beq.w	8028440 <Argus_Cal_GetDefaultCalibration+0x1468>
 802768e:	f06f 0115 	mvn.w	r1, #21
 8027692:	73a1      	strb	r1, [r4, #14]
 8027694:	2a00      	cmp	r2, #0
 8027696:	bf14      	ite	ne
 8027698:	f06f 0107 	mvnne.w	r1, #7
 802769c:	f06f 0128 	mvneq.w	r1, #40	@ 0x28
 80276a0:	2d01      	cmp	r5, #1
 80276a2:	73e1      	strb	r1, [r4, #15]
 80276a4:	f000 86bf 	beq.w	8028426 <Argus_Cal_GetDefaultCalibration+0x144e>
 80276a8:	2a00      	cmp	r2, #0
 80276aa:	bf14      	ite	ne
 80276ac:	f06f 011f 	mvnne.w	r1, #31
 80276b0:	f06f 012c 	mvneq.w	r1, #44	@ 0x2c
 80276b4:	2d01      	cmp	r5, #1
 80276b6:	7421      	strb	r1, [r4, #16]
 80276b8:	f000 86b2 	beq.w	8028420 <Argus_Cal_GetDefaultCalibration+0x1448>
 80276bc:	2a00      	cmp	r2, #0
 80276be:	bf14      	ite	ne
 80276c0:	f06f 0103 	mvnne.w	r1, #3
 80276c4:	f06f 0110 	mvneq.w	r1, #16
 80276c8:	2d01      	cmp	r5, #1
 80276ca:	7461      	strb	r1, [r4, #17]
 80276cc:	f000 86d9 	beq.w	8028482 <Argus_Cal_GetDefaultCalibration+0x14aa>
 80276d0:	2a00      	cmp	r2, #0
 80276d2:	bf14      	ite	ne
 80276d4:	f06f 0130 	mvnne.w	r1, #48	@ 0x30
 80276d8:	f06f 0145 	mvneq.w	r1, #69	@ 0x45
 80276dc:	2d01      	cmp	r5, #1
 80276de:	74a1      	strb	r1, [r4, #18]
 80276e0:	f000 85e9 	beq.w	80282b6 <Argus_Cal_GetDefaultCalibration+0x12de>
 80276e4:	2a00      	cmp	r2, #0
 80276e6:	bf14      	ite	ne
 80276e8:	f06f 0106 	mvnne.w	r1, #6
 80276ec:	f06f 0134 	mvneq.w	r1, #52	@ 0x34
 80276f0:	2d01      	cmp	r5, #1
 80276f2:	74e1      	strb	r1, [r4, #19]
 80276f4:	f000 8691 	beq.w	802841a <Argus_Cal_GetDefaultCalibration+0x1442>
 80276f8:	2a00      	cmp	r2, #0
 80276fa:	bf14      	ite	ne
 80276fc:	f06f 0125 	mvnne.w	r1, #37	@ 0x25
 8027700:	f06f 012c 	mvneq.w	r1, #44	@ 0x2c
 8027704:	2d01      	cmp	r5, #1
 8027706:	7521      	strb	r1, [r4, #20]
 8027708:	f000 8112 	beq.w	8027930 <Argus_Cal_GetDefaultCalibration+0x958>
 802770c:	2a00      	cmp	r2, #0
 802770e:	f000 86f9 	beq.w	8028504 <Argus_Cal_GetDefaultCalibration+0x152c>
 8027712:	21f7      	movs	r1, #247	@ 0xf7
 8027714:	2d01      	cmp	r5, #1
 8027716:	7561      	strb	r1, [r4, #21]
 8027718:	f000 8114 	beq.w	8027944 <Argus_Cal_GetDefaultCalibration+0x96c>
 802771c:	f06f 0130 	mvn.w	r1, #48	@ 0x30
 8027720:	75a1      	strb	r1, [r4, #22]
 8027722:	2a00      	cmp	r2, #0
 8027724:	bf14      	ite	ne
 8027726:	f06f 010f 	mvnne.w	r1, #15
 802772a:	f06f 0140 	mvneq.w	r1, #64	@ 0x40
 802772e:	2d01      	cmp	r5, #1
 8027730:	75e1      	strb	r1, [r4, #23]
 8027732:	f040 80af 	bne.w	8027894 <Argus_Cal_GetDefaultCalibration+0x8bc>
 8027736:	2122      	movs	r1, #34	@ 0x22
 8027738:	75e1      	strb	r1, [r4, #23]
 802773a:	e0ab      	b.n	8027894 <Argus_Cal_GetDefaultCalibration+0x8bc>
 802773c:	2f44      	cmp	r7, #68	@ 0x44
 802773e:	d011      	beq.n	8027764 <Argus_Cal_GetDefaultCalibration+0x78c>
 8027740:	f1a7 0345 	sub.w	r3, r7, #69	@ 0x45
 8027744:	2b02      	cmp	r3, #2
 8027746:	bf94      	ite	ls
 8027748:	2504      	movls	r5, #4
 802774a:	2502      	movhi	r5, #2
 802774c:	e467      	b.n	802701e <Argus_Cal_GetDefaultCalibration+0x46>
 802774e:	f04f 0803 	mov.w	r8, #3
 8027752:	2d00      	cmp	r5, #0
 8027754:	f47f ac5f 	bne.w	8027016 <Argus_Cal_GetDefaultCalibration+0x3e>
 8027758:	e4c2      	b.n	80270e0 <Argus_Cal_GetDefaultCalibration+0x108>
 802775a:	f06f 00c6 	mvn.w	r0, #198	@ 0xc6
 802775e:	b002      	add	sp, #8
 8027760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027764:	2505      	movs	r5, #5
 8027766:	e4c7      	b.n	80270f8 <Argus_Cal_GetDefaultCalibration+0x120>
 8027768:	2501      	movs	r5, #1
 802776a:	e458      	b.n	802701e <Argus_Cal_GetDefaultCalibration+0x46>
 802776c:	4629      	mov	r1, r5
 802776e:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8027772:	4620      	mov	r0, r4
 8027774:	f003 fc19 	bl	802afaa <memset>
 8027778:	2504      	movs	r5, #4
 802777a:	4809      	ldr	r0, [pc, #36]	@ (80277a0 <Argus_Cal_GetDefaultCalibration+0x7c8>)
 802777c:	f3c6 0140 	ubfx	r1, r6, #1, #1
 8027780:	e4c9      	b.n	8027116 <Argus_Cal_GetDefaultCalibration+0x13e>
 8027782:	2100      	movs	r1, #0
 8027784:	2280      	movs	r2, #128	@ 0x80
 8027786:	f003 fc10 	bl	802afaa <memset>
 802778a:	4805      	ldr	r0, [pc, #20]	@ (80277a0 <Argus_Cal_GetDefaultCalibration+0x7c8>)
 802778c:	f3c6 0140 	ubfx	r1, r6, #1, #1
 8027790:	e4c1      	b.n	8027116 <Argus_Cal_GetDefaultCalibration+0x13e>
 8027792:	2502      	movs	r5, #2
 8027794:	e443      	b.n	802701e <Argus_Cal_GetDefaultCalibration+0x46>
 8027796:	bf00      	nop
 8027798:	06400040 	.word	0x06400040
 802779c:	02300100 	.word	0x02300100
 80277a0:	08032644 	.word	0x08032644
 80277a4:	01e0b860 	.word	0x01e0b860
 80277a8:	11030c30 	.word	0x11030c30
 80277ac:	01401388 	.word	0x01401388
 80277b0:	60009560 	.word	0x60009560
 80277b4:	f244 71e5 	movw	r1, #18405	@ 0x47e5
 80277b8:	2d01      	cmp	r5, #1
 80277ba:	8061      	strh	r1, [r4, #2]
 80277bc:	f001 818d 	beq.w	8028ada <Argus_Cal_GetDefaultCalibration+0x1b02>
 80277c0:	2b04      	cmp	r3, #4
 80277c2:	f000 8478 	beq.w	80280b6 <Argus_Cal_GetDefaultCalibration+0x10de>
 80277c6:	2b03      	cmp	r3, #3
 80277c8:	f001 8180 	beq.w	8028acc <Argus_Cal_GetDefaultCalibration+0x1af4>
 80277cc:	2a00      	cmp	r2, #0
 80277ce:	f000 861c 	beq.w	802840a <Argus_Cal_GetDefaultCalibration+0x1432>
 80277d2:	212d      	movs	r1, #45	@ 0x2d
 80277d4:	2d01      	cmp	r5, #1
 80277d6:	7221      	strb	r1, [r4, #8]
 80277d8:	f000 8472 	beq.w	80280c0 <Argus_Cal_GetDefaultCalibration+0x10e8>
 80277dc:	216c      	movs	r1, #108	@ 0x6c
 80277de:	7261      	strb	r1, [r4, #9]
 80277e0:	2b05      	cmp	r3, #5
 80277e2:	f43f ace2 	beq.w	80271aa <Argus_Cal_GetDefaultCalibration+0x1d2>
 80277e6:	2b04      	cmp	r3, #4
 80277e8:	f000 87d1 	beq.w	802878e <Argus_Cal_GetDefaultCalibration+0x17b6>
 80277ec:	2b03      	cmp	r3, #3
 80277ee:	f001 8160 	beq.w	8028ab2 <Argus_Cal_GetDefaultCalibration+0x1ada>
 80277f2:	2a00      	cmp	r2, #0
 80277f4:	bf14      	ite	ne
 80277f6:	213e      	movne	r1, #62	@ 0x3e
 80277f8:	213b      	moveq	r1, #59	@ 0x3b
 80277fa:	2d01      	cmp	r5, #1
 80277fc:	72a1      	strb	r1, [r4, #10]
 80277fe:	f000 84f3 	beq.w	80281e8 <Argus_Cal_GetDefaultCalibration+0x1210>
 8027802:	2a00      	cmp	r2, #0
 8027804:	f000 85a1 	beq.w	802834a <Argus_Cal_GetDefaultCalibration+0x1372>
 8027808:	2166      	movs	r1, #102	@ 0x66
 802780a:	72e1      	strb	r1, [r4, #11]
 802780c:	211b      	movs	r1, #27
 802780e:	7321      	strb	r1, [r4, #12]
 8027810:	2b04      	cmp	r3, #4
 8027812:	f43f af34 	beq.w	802767e <Argus_Cal_GetDefaultCalibration+0x6a6>
 8027816:	2b03      	cmp	r3, #3
 8027818:	f000 8520 	beq.w	802825c <Argus_Cal_GetDefaultCalibration+0x1284>
 802781c:	2a00      	cmp	r2, #0
 802781e:	bf14      	ite	ne
 8027820:	2147      	movne	r1, #71	@ 0x47
 8027822:	2149      	moveq	r1, #73	@ 0x49
 8027824:	2d01      	cmp	r5, #1
 8027826:	7361      	strb	r1, [r4, #13]
 8027828:	f000 861f 	beq.w	802846a <Argus_Cal_GetDefaultCalibration+0x1492>
 802782c:	f1c2 0127 	rsb	r1, r2, #39	@ 0x27
 8027830:	73a1      	strb	r1, [r4, #14]
 8027832:	2b03      	cmp	r3, #3
 8027834:	f000 851c 	beq.w	8028270 <Argus_Cal_GetDefaultCalibration+0x1298>
 8027838:	2a00      	cmp	r2, #0
 802783a:	bf14      	ite	ne
 802783c:	2133      	movne	r1, #51	@ 0x33
 802783e:	2135      	moveq	r1, #53	@ 0x35
 8027840:	2d01      	cmp	r5, #1
 8027842:	73e1      	strb	r1, [r4, #15]
 8027844:	f000 84a6 	beq.w	8028194 <Argus_Cal_GetDefaultCalibration+0x11bc>
 8027848:	2a00      	cmp	r2, #0
 802784a:	f000 8595 	beq.w	8028378 <Argus_Cal_GetDefaultCalibration+0x13a0>
 802784e:	210e      	movs	r1, #14
 8027850:	7421      	strb	r1, [r4, #16]
 8027852:	2146      	movs	r1, #70	@ 0x46
 8027854:	7461      	strb	r1, [r4, #17]
 8027856:	f1c2 0116 	rsb	r1, r2, #22
 802785a:	74a1      	strb	r1, [r4, #18]
 802785c:	2a00      	cmp	r2, #0
 802785e:	f000 8594 	beq.w	802838a <Argus_Cal_GetDefaultCalibration+0x13b2>
 8027862:	2133      	movs	r1, #51	@ 0x33
 8027864:	74e1      	strb	r1, [r4, #19]
 8027866:	210e      	movs	r1, #14
 8027868:	7521      	strb	r1, [r4, #20]
 802786a:	2148      	movs	r1, #72	@ 0x48
 802786c:	7561      	strb	r1, [r4, #21]
 802786e:	2a00      	cmp	r2, #0
 8027870:	f000 8574 	beq.w	802835c <Argus_Cal_GetDefaultCalibration+0x1384>
 8027874:	2114      	movs	r1, #20
 8027876:	75a1      	strb	r1, [r4, #22]
 8027878:	2b04      	cmp	r3, #4
 802787a:	f43f af52 	beq.w	8027722 <Argus_Cal_GetDefaultCalibration+0x74a>
 802787e:	2b03      	cmp	r3, #3
 8027880:	f000 84e2 	beq.w	8028248 <Argus_Cal_GetDefaultCalibration+0x1270>
 8027884:	2a00      	cmp	r2, #0
 8027886:	bf14      	ite	ne
 8027888:	2133      	movne	r1, #51	@ 0x33
 802788a:	2138      	moveq	r1, #56	@ 0x38
 802788c:	2d01      	cmp	r5, #1
 802788e:	75e1      	strb	r1, [r4, #23]
 8027890:	f000 8778 	beq.w	8028784 <Argus_Cal_GetDefaultCalibration+0x17ac>
 8027894:	49bf      	ldr	r1, [pc, #764]	@ (8027b94 <Argus_Cal_GetDefaultCalibration+0xbbc>)
 8027896:	61a1      	str	r1, [r4, #24]
 8027898:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 802789c:	8021      	strh	r1, [r4, #0]
 802789e:	1e19      	subs	r1, r3, #0
 80278a0:	bf18      	it	ne
 80278a2:	2101      	movne	r1, #1
 80278a4:	f884 124c 	strb.w	r1, [r4, #588]	@ 0x24c
 80278a8:	2a00      	cmp	r2, #0
 80278aa:	f47f aced 	bne.w	8027288 <Argus_Cal_GetDefaultCalibration+0x2b0>
 80278ae:	f884 1258 	strb.w	r1, [r4, #600]	@ 0x258
 80278b2:	49b9      	ldr	r1, [pc, #740]	@ (8027b98 <Argus_Cal_GetDefaultCalibration+0xbc0>)
 80278b4:	e9c4 1194 	strd	r1, r1, [r4, #592]	@ 0x250
 80278b8:	2110      	movs	r1, #16
 80278ba:	f8a4 124e 	strh.w	r1, [r4, #590]	@ 0x24e
 80278be:	219a      	movs	r1, #154	@ 0x9a
 80278c0:	f884 124d 	strb.w	r1, [r4, #589]	@ 0x24d
 80278c4:	f06f 1128 	mvn.w	r1, #2621480	@ 0x280028
 80278c8:	f8c4 125a 	str.w	r1, [r4, #602]	@ 0x25a
 80278cc:	f246 6166 	movw	r1, #26214	@ 0x6666
 80278d0:	f8a4 109c 	strh.w	r1, [r4, #156]	@ 0x9c
 80278d4:	2b05      	cmp	r3, #5
 80278d6:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 80278da:	f8a4 122a 	strh.w	r1, [r4, #554]	@ 0x22a
 80278de:	f000 8403 	beq.w	80280e8 <Argus_Cal_GetDefaultCalibration+0x1110>
 80278e2:	f06f 0938 	mvn.w	r9, #56	@ 0x38
 80278e6:	f06f 0ecc 	mvn.w	lr, #204	@ 0xcc
 80278ea:	e4eb      	b.n	80272c4 <Argus_Cal_GetDefaultCalibration+0x2ec>
 80278ec:	f644 118a 	movw	r1, #18826	@ 0x498a
 80278f0:	e6a2      	b.n	8027638 <Argus_Cal_GetDefaultCalibration+0x660>
 80278f2:	2a00      	cmp	r2, #0
 80278f4:	bf14      	ite	ne
 80278f6:	f06f 0115 	mvnne.w	r1, #21
 80278fa:	f06f 011e 	mvneq.w	r1, #30
 80278fe:	2d01      	cmp	r5, #1
 8027900:	7321      	strb	r1, [r4, #12]
 8027902:	f040 84ab 	bne.w	802825c <Argus_Cal_GetDefaultCalibration+0x1284>
 8027906:	21fe      	movs	r1, #254	@ 0xfe
 8027908:	7321      	strb	r1, [r4, #12]
 802790a:	e781      	b.n	8027810 <Argus_Cal_GetDefaultCalibration+0x838>
 802790c:	2a00      	cmp	r2, #0
 802790e:	bf14      	ite	ne
 8027910:	212d      	movne	r1, #45	@ 0x2d
 8027912:	2130      	moveq	r1, #48	@ 0x30
 8027914:	2d01      	cmp	r5, #1
 8027916:	74e1      	strb	r1, [r4, #19]
 8027918:	f000 857f 	beq.w	802841a <Argus_Cal_GetDefaultCalibration+0x1442>
 802791c:	2a00      	cmp	r2, #0
 802791e:	bf14      	ite	ne
 8027920:	f06f 0125 	mvnne.w	r1, #37	@ 0x25
 8027924:	f06f 0130 	mvneq.w	r1, #48	@ 0x30
 8027928:	2d01      	cmp	r5, #1
 802792a:	7521      	strb	r1, [r4, #20]
 802792c:	f040 8482 	bne.w	8028234 <Argus_Cal_GetDefaultCalibration+0x125c>
 8027930:	21f2      	movs	r1, #242	@ 0xf2
 8027932:	7521      	strb	r1, [r4, #20]
 8027934:	2b04      	cmp	r3, #4
 8027936:	f43f aee9 	beq.w	802770c <Argus_Cal_GetDefaultCalibration+0x734>
 802793a:	2b03      	cmp	r3, #3
 802793c:	f000 847a 	beq.w	8028234 <Argus_Cal_GetDefaultCalibration+0x125c>
 8027940:	2148      	movs	r1, #72	@ 0x48
 8027942:	7561      	strb	r1, [r4, #21]
 8027944:	211f      	movs	r1, #31
 8027946:	2b05      	cmp	r3, #5
 8027948:	7561      	strb	r1, [r4, #21]
 802794a:	d104      	bne.n	8027956 <Argus_Cal_GetDefaultCalibration+0x97e>
 802794c:	2a00      	cmp	r2, #0
 802794e:	f47f ac87 	bne.w	8027260 <Argus_Cal_GetDefaultCalibration+0x288>
 8027952:	211e      	movs	r1, #30
 8027954:	e485      	b.n	8027262 <Argus_Cal_GetDefaultCalibration+0x28a>
 8027956:	2b04      	cmp	r3, #4
 8027958:	f000 8725 	beq.w	80287a6 <Argus_Cal_GetDefaultCalibration+0x17ce>
 802795c:	2b03      	cmp	r3, #3
 802795e:	f001 80c0 	beq.w	8028ae2 <Argus_Cal_GetDefaultCalibration+0x1b0a>
 8027962:	2a00      	cmp	r2, #0
 8027964:	f000 84fa 	beq.w	802835c <Argus_Cal_GetDefaultCalibration+0x1384>
 8027968:	f1c2 010e 	rsb	r1, r2, #14
 802796c:	75a1      	strb	r1, [r4, #22]
 802796e:	e783      	b.n	8027878 <Argus_Cal_GetDefaultCalibration+0x8a0>
 8027970:	f8df c23c 	ldr.w	ip, [pc, #572]	@ 8027bb0 <Argus_Cal_GetDefaultCalibration+0xbd8>
 8027974:	f8c4 c25e 	str.w	ip, [r4, #606]	@ 0x25e
 8027978:	f04f 0c07 	mov.w	ip, #7
 802797c:	f884 c264 	strb.w	ip, [r4, #612]	@ 0x264
 8027980:	f243 0c28 	movw	ip, #12328	@ 0x3028
 8027984:	f8a4 c265 	strh.w	ip, [r4, #613]	@ 0x265
 8027988:	2b05      	cmp	r3, #5
 802798a:	f44f 4c7a 	mov.w	ip, #64000	@ 0xfa00
 802798e:	f8a4 c262 	strh.w	ip, [r4, #610]	@ 0x262
 8027992:	f040 832a 	bne.w	8027fea <Argus_Cal_GetDefaultCalibration+0x1012>
 8027996:	f241 3c5e 	movw	ip, #4958	@ 0x135e
 802799a:	f241 2aa3 	movw	sl, #4771	@ 0x12a3
 802799e:	2a00      	cmp	r2, #0
 80279a0:	bf08      	it	eq
 80279a2:	46d4      	moveq	ip, sl
 80279a4:	2d01      	cmp	r5, #1
 80279a6:	f8a4 c274 	strh.w	ip, [r4, #628]	@ 0x274
 80279aa:	f000 830a 	beq.w	8027fc2 <Argus_Cal_GetDefaultCalibration+0xfea>
 80279ae:	2a00      	cmp	r2, #0
 80279b0:	f000 830e 	beq.w	8027fd0 <Argus_Cal_GetDefaultCalibration+0xff8>
 80279b4:	f241 3c3b 	movw	ip, #4923	@ 0x133b
 80279b8:	f8a4 c276 	strh.w	ip, [r4, #630]	@ 0x276
 80279bc:	f241 3c4d 	movw	ip, #4941	@ 0x134d
 80279c0:	2d01      	cmp	r5, #1
 80279c2:	f8a4 c278 	strh.w	ip, [r4, #632]	@ 0x278
 80279c6:	f000 82e9 	beq.w	8027f9c <Argus_Cal_GetDefaultCalibration+0xfc4>
 80279ca:	2a00      	cmp	r2, #0
 80279cc:	f000 858e 	beq.w	80284ec <Argus_Cal_GetDefaultCalibration+0x1514>
 80279d0:	f241 3c44 	movw	ip, #4932	@ 0x1344
 80279d4:	f8a4 c27a 	strh.w	ip, [r4, #634]	@ 0x27a
 80279d8:	e5c2      	b.n	8027560 <Argus_Cal_GetDefaultCalibration+0x588>
 80279da:	f240 4133 	movw	r1, #1075	@ 0x433
 80279de:	2d01      	cmp	r5, #1
 80279e0:	f8a4 122c 	strh.w	r1, [r4, #556]	@ 0x22c
 80279e4:	f47f acb8 	bne.w	8027358 <Argus_Cal_GetDefaultCalibration+0x380>
 80279e8:	f44f 7150 	mov.w	r1, #832	@ 0x340
 80279ec:	f8a4 122c 	strh.w	r1, [r4, #556]	@ 0x22c
 80279f0:	e4b2      	b.n	8027358 <Argus_Cal_GetDefaultCalibration+0x380>
 80279f2:	2a00      	cmp	r2, #0
 80279f4:	f040 838d 	bne.w	8028112 <Argus_Cal_GetDefaultCalibration+0x113a>
 80279f8:	f44f 7162 	mov.w	r1, #904	@ 0x388
 80279fc:	e55d      	b.n	80274ba <Argus_Cal_GetDefaultCalibration+0x4e2>
 80279fe:	2a00      	cmp	r2, #0
 8027a00:	f040 8381 	bne.w	8028106 <Argus_Cal_GetDefaultCalibration+0x112e>
 8027a04:	f240 31a9 	movw	r1, #937	@ 0x3a9
 8027a08:	e491      	b.n	802732e <Argus_Cal_GetDefaultCalibration+0x356>
 8027a0a:	f240 21a3 	movw	r1, #675	@ 0x2a3
 8027a0e:	2d01      	cmp	r5, #1
 8027a10:	f8a4 1234 	strh.w	r1, [r4, #564]	@ 0x234
 8027a14:	f000 85f9 	beq.w	802860a <Argus_Cal_GetDefaultCalibration+0x1632>
 8027a18:	f06f 0ef5 	mvn.w	lr, #245	@ 0xf5
 8027a1c:	f06f 09a3 	mvn.w	r9, #163	@ 0xa3
 8027a20:	2a00      	cmp	r2, #0
 8027a22:	f000 836c 	beq.w	80280fe <Argus_Cal_GetDefaultCalibration+0x1126>
 8027a26:	f640 0138 	movw	r1, #2104	@ 0x838
 8027a2a:	f8a4 1236 	strh.w	r1, [r4, #566]	@ 0x236
 8027a2e:	2a00      	cmp	r2, #0
 8027a30:	f040 836c 	bne.w	802810c <Argus_Cal_GetDefaultCalibration+0x1134>
 8027a34:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8027a38:	e469      	b.n	802730e <Argus_Cal_GetDefaultCalibration+0x336>
 8027a3a:	2a00      	cmp	r2, #0
 8027a3c:	f040 82df 	bne.w	8027ffe <Argus_Cal_GetDefaultCalibration+0x1026>
 8027a40:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8027a44:	e4e2      	b.n	802740c <Argus_Cal_GetDefaultCalibration+0x434>
 8027a46:	2a00      	cmp	r2, #0
 8027a48:	f040 836c 	bne.w	8028124 <Argus_Cal_GetDefaultCalibration+0x114c>
 8027a4c:	f240 5125 	movw	r1, #1317	@ 0x525
 8027a50:	e49d      	b.n	802738e <Argus_Cal_GetDefaultCalibration+0x3b6>
 8027a52:	2a00      	cmp	r2, #0
 8027a54:	f040 82cd 	bne.w	8027ff2 <Argus_Cal_GetDefaultCalibration+0x101a>
 8027a58:	21a7      	movs	r1, #167	@ 0xa7
 8027a5a:	e4b7      	b.n	80273cc <Argus_Cal_GetDefaultCalibration+0x3f4>
 8027a5c:	2a00      	cmp	r2, #0
 8027a5e:	d0bc      	beq.n	80279da <Argus_Cal_GetDefaultCalibration+0xa02>
 8027a60:	f240 314a 	movw	r1, #842	@ 0x34a
 8027a64:	e473      	b.n	802734e <Argus_Cal_GetDefaultCalibration+0x376>
 8027a66:	2a00      	cmp	r2, #0
 8027a68:	f040 8359 	bne.w	802811e <Argus_Cal_GetDefaultCalibration+0x1146>
 8027a6c:	f240 31b3 	movw	r1, #947	@ 0x3b3
 8027a70:	e4bc      	b.n	80273ec <Argus_Cal_GetDefaultCalibration+0x414>
 8027a72:	2a00      	cmp	r2, #0
 8027a74:	f040 8350 	bne.w	8028118 <Argus_Cal_GetDefaultCalibration+0x1140>
 8027a78:	f240 21c7 	movw	r1, #711	@ 0x2c7
 8027a7c:	e497      	b.n	80273ae <Argus_Cal_GetDefaultCalibration+0x3d6>
 8027a7e:	2a00      	cmp	r2, #0
 8027a80:	f040 82c3 	bne.w	802800a <Argus_Cal_GetDefaultCalibration+0x1032>
 8027a84:	f44f 7127 	mov.w	r1, #668	@ 0x29c
 8027a88:	e471      	b.n	802736e <Argus_Cal_GetDefaultCalibration+0x396>
 8027a8a:	2a00      	cmp	r2, #0
 8027a8c:	f040 8329 	bne.w	80280e2 <Argus_Cal_GetDefaultCalibration+0x110a>
 8027a90:	f240 4192 	movw	r1, #1170	@ 0x492
 8027a94:	e501      	b.n	802749a <Argus_Cal_GetDefaultCalibration+0x4c2>
 8027a96:	2117      	movs	r1, #23
 8027a98:	7221      	strb	r1, [r4, #8]
 8027a9a:	214a      	movs	r1, #74	@ 0x4a
 8027a9c:	7261      	strb	r1, [r4, #9]
 8027a9e:	e69f      	b.n	80277e0 <Argus_Cal_GetDefaultCalibration+0x808>
 8027aa0:	2a00      	cmp	r2, #0
 8027aa2:	f040 82a9 	bne.w	8027ff8 <Argus_Cal_GetDefaultCalibration+0x1020>
 8027aa6:	f240 31de 	movw	r1, #990	@ 0x3de
 8027aaa:	e4d6      	b.n	802745a <Argus_Cal_GetDefaultCalibration+0x482>
 8027aac:	2a00      	cmp	r2, #0
 8027aae:	f040 82ff 	bne.w	80280b0 <Argus_Cal_GetDefaultCalibration+0x10d8>
 8027ab2:	f240 5181 	movw	r1, #1409	@ 0x581
 8027ab6:	e4c0      	b.n	802743a <Argus_Cal_GetDefaultCalibration+0x462>
 8027ab8:	2b03      	cmp	r3, #3
 8027aba:	f000 85bd 	beq.w	8028638 <Argus_Cal_GetDefaultCalibration+0x1660>
 8027abe:	2100      	movs	r1, #0
 8027ac0:	2b05      	cmp	r3, #5
 8027ac2:	80e0      	strh	r0, [r4, #6]
 8027ac4:	80a1      	strh	r1, [r4, #4]
 8027ac6:	f040 841d 	bne.w	8028304 <Argus_Cal_GetDefaultCalibration+0x132c>
 8027aca:	2a00      	cmp	r2, #0
 8027acc:	f000 8743 	beq.w	8028956 <Argus_Cal_GetDefaultCalibration+0x197e>
 8027ad0:	4932      	ldr	r1, [pc, #200]	@ (8027b9c <Argus_Cal_GetDefaultCalibration+0xbc4>)
 8027ad2:	f8df c0e0 	ldr.w	ip, [pc, #224]	@ 8027bb4 <Argus_Cal_GetDefaultCalibration+0xbdc>
 8027ad6:	75a3      	strb	r3, [r4, #22]
 8027ad8:	e9c4 c102 	strd	ip, r1, [r4, #8]
 8027adc:	4930      	ldr	r1, [pc, #192]	@ (8027ba0 <Argus_Cal_GetDefaultCalibration+0xbc8>)
 8027ade:	6121      	str	r1, [r4, #16]
 8027ae0:	f244 1141 	movw	r1, #16705	@ 0x4141
 8027ae4:	8061      	strh	r1, [r4, #2]
 8027ae6:	f645 41f2 	movw	r1, #23794	@ 0x5cf2
 8027aea:	82a1      	strh	r1, [r4, #20]
 8027aec:	2120      	movs	r1, #32
 8027aee:	75e1      	strb	r1, [r4, #23]
 8027af0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8027af4:	8021      	strh	r1, [r4, #0]
 8027af6:	f8a4 e250 	strh.w	lr, [r4, #592]	@ 0x250
 8027afa:	f8a4 e254 	strh.w	lr, [r4, #596]	@ 0x254
 8027afe:	f8a4 9252 	strh.w	r9, [r4, #594]	@ 0x252
 8027b02:	f8a4 9256 	strh.w	r9, [r4, #598]	@ 0x256
 8027b06:	2a00      	cmp	r2, #0
 8027b08:	f000 8664 	beq.w	80287d4 <Argus_Cal_GetDefaultCalibration+0x17fc>
 8027b0c:	f243 3233 	movw	r2, #13107	@ 0x3333
 8027b10:	2b05      	cmp	r3, #5
 8027b12:	f8a4 209c 	strh.w	r2, [r4, #156]	@ 0x9c
 8027b16:	f040 8412 	bne.w	802833e <Argus_Cal_GetDefaultCalibration+0x1366>
 8027b1a:	4b22      	ldr	r3, [pc, #136]	@ (8027ba4 <Argus_Cal_GetDefaultCalibration+0xbcc>)
 8027b1c:	f8c4 3274 	str.w	r3, [r4, #628]	@ 0x274
 8027b20:	f46f 71a0 	mvn.w	r1, #320	@ 0x140
 8027b24:	f5a3 0326 	sub.w	r3, r3, #10878976	@ 0xa60000
 8027b28:	440b      	add	r3, r1
 8027b2a:	f8c4 3278 	str.w	r3, [r4, #632]	@ 0x278
 8027b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8027ba8 <Argus_Cal_GetDefaultCalibration+0xbd0>)
 8027b30:	491e      	ldr	r1, [pc, #120]	@ (8027bac <Argus_Cal_GetDefaultCalibration+0xbd4>)
 8027b32:	f46f 7096 	mvn.w	r0, #300	@ 0x12c
 8027b36:	e9c4 1391 	strd	r1, r3, [r4, #580]	@ 0x244
 8027b3a:	f5a3 13b8 	sub.w	r3, r3, #1507328	@ 0x170000
 8027b3e:	4403      	add	r3, r0
 8027b40:	f8c4 322c 	str.w	r3, [r4, #556]	@ 0x22c
 8027b44:	f503 03f8 	add.w	r3, r3, #8126464	@ 0x7c0000
 8027b48:	f503 73f1 	add.w	r3, r3, #482	@ 0x1e2
 8027b4c:	f8c4 3230 	str.w	r3, [r4, #560]	@ 0x230
 8027b50:	f46f 7c34 	mvn.w	ip, #720	@ 0x2d0
 8027b54:	f1a3 732c 	sub.w	r3, r3, #45088768	@ 0x2b00000
 8027b58:	4463      	add	r3, ip
 8027b5a:	f8c4 3234 	str.w	r3, [r4, #564]	@ 0x234
 8027b5e:	f103 73d5 	add.w	r3, r3, #27918336	@ 0x1aa0000
 8027b62:	f203 139d 	addw	r3, r3, #413	@ 0x19d
 8027b66:	f8c4 3238 	str.w	r3, [r4, #568]	@ 0x238
 8027b6a:	f103 63de 	add.w	r3, r3, #116391936	@ 0x6f00000
 8027b6e:	3358      	adds	r3, #88	@ 0x58
 8027b70:	f8c4 323c 	str.w	r3, [r4, #572]	@ 0x23c
 8027b74:	f240 73ae 	movw	r3, #1966	@ 0x7ae
 8027b78:	f8a4 3240 	strh.w	r3, [r4, #576]	@ 0x240
 8027b7c:	f241 637d 	movw	r3, #5757	@ 0x167d
 8027b80:	f8a4 3242 	strh.w	r3, [r4, #578]	@ 0x242
 8027b84:	e518      	b.n	80275b8 <Argus_Cal_GetDefaultCalibration+0x5e0>
 8027b86:	2a00      	cmp	r2, #0
 8027b88:	f040 823c 	bne.w	8028004 <Argus_Cal_GetDefaultCalibration+0x102c>
 8027b8c:	f240 21c1 	movw	r1, #705	@ 0x2c1
 8027b90:	e473      	b.n	802747a <Argus_Cal_GetDefaultCalibration+0x4a2>
 8027b92:	bf00      	nop
 8027b94:	0205711a 	.word	0x0205711a
 8027b98:	ffc7ff33 	.word	0xffc7ff33
 8027b9c:	1d114f06 	.word	0x1d114f06
 8027ba0:	21065ef4 	.word	0x21065ef4
 8027ba4:	08ae0997 	.word	0x08ae0997
 8027ba8:	0fe306e9 	.word	0x0fe306e9
 8027bac:	10620635 	.word	0x10620635
 8027bb0:	01e0b860 	.word	0x01e0b860
 8027bb4:	5c39992e 	.word	0x5c39992e
 8027bb8:	f240 4c19 	movw	ip, #1049	@ 0x419
 8027bbc:	f1a8 0104 	sub.w	r1, r8, #4
 8027bc0:	f8a4 c26a 	strh.w	ip, [r4, #618]	@ 0x26a
 8027bc4:	f04f 0c28 	mov.w	ip, #40	@ 0x28
 8027bc8:	b2c9      	uxtb	r1, r1
 8027bca:	f884 c269 	strb.w	ip, [r4, #617]	@ 0x269
 8027bce:	f44f 5caa 	mov.w	ip, #5440	@ 0x1540
 8027bd2:	f8a4 c267 	strh.w	ip, [r4, #615]	@ 0x267
 8027bd6:	2901      	cmp	r1, #1
 8027bd8:	f04f 0c0e 	mov.w	ip, #14
 8027bdc:	f884 c264 	strb.w	ip, [r4, #612]	@ 0x264
 8027be0:	f67f aec6 	bls.w	8027970 <Argus_Cal_GetDefaultCalibration+0x998>
 8027be4:	f8df ca44 	ldr.w	ip, [pc, #2628]	@ 802862c <Argus_Cal_GetDefaultCalibration+0x1654>
 8027be8:	f8c4 c25e 	str.w	ip, [r4, #606]	@ 0x25e
 8027bec:	f243 0c28 	movw	ip, #12328	@ 0x3028
 8027bf0:	f8a4 c265 	strh.w	ip, [r4, #613]	@ 0x265
 8027bf4:	2b05      	cmp	r3, #5
 8027bf6:	f44f 4c7a 	mov.w	ip, #64000	@ 0xfa00
 8027bfa:	f8a4 c262 	strh.w	ip, [r4, #610]	@ 0x262
 8027bfe:	f43f aeca 	beq.w	8027996 <Argus_Cal_GetDefaultCalibration+0x9be>
 8027c02:	2b03      	cmp	r3, #3
 8027c04:	f47f ac8a 	bne.w	802751c <Argus_Cal_GetDefaultCalibration+0x544>
 8027c08:	f241 6cb5 	movw	ip, #5813	@ 0x16b5
 8027c0c:	f641 2a5a 	movw	sl, #6746	@ 0x1a5a
 8027c10:	2a00      	cmp	r2, #0
 8027c12:	bf08      	it	eq
 8027c14:	46d4      	moveq	ip, sl
 8027c16:	2d01      	cmp	r5, #1
 8027c18:	f8a4 c274 	strh.w	ip, [r4, #628]	@ 0x274
 8027c1c:	f000 8439 	beq.w	8028492 <Argus_Cal_GetDefaultCalibration+0x14ba>
 8027c20:	f241 6cba 	movw	ip, #5818	@ 0x16ba
 8027c24:	f641 2a56 	movw	sl, #6742	@ 0x1a56
 8027c28:	2a00      	cmp	r2, #0
 8027c2a:	bf08      	it	eq
 8027c2c:	46d4      	moveq	ip, sl
 8027c2e:	2d01      	cmp	r5, #1
 8027c30:	f8a4 c276 	strh.w	ip, [r4, #630]	@ 0x276
 8027c34:	f000 8428 	beq.w	8028488 <Argus_Cal_GetDefaultCalibration+0x14b0>
 8027c38:	2a00      	cmp	r2, #0
 8027c3a:	f000 85bf 	beq.w	80287bc <Argus_Cal_GetDefaultCalibration+0x17e4>
 8027c3e:	f241 6c6b 	movw	ip, #5739	@ 0x166b
 8027c42:	f8a4 c278 	strh.w	ip, [r4, #632]	@ 0x278
 8027c46:	f241 6c5f 	movw	ip, #5727	@ 0x165f
 8027c4a:	f641 1aed 	movw	sl, #6637	@ 0x19ed
 8027c4e:	2a00      	cmp	r2, #0
 8027c50:	bf08      	it	eq
 8027c52:	46d4      	moveq	ip, sl
 8027c54:	2d01      	cmp	r5, #1
 8027c56:	f8a4 c27a 	strh.w	ip, [r4, #634]	@ 0x27a
 8027c5a:	f47f ac81 	bne.w	8027560 <Argus_Cal_GetDefaultCalibration+0x588>
 8027c5e:	f1a3 0c03 	sub.w	ip, r3, #3
 8027c62:	f1bc 0f01 	cmp.w	ip, #1
 8027c66:	f240 8775 	bls.w	8028b54 <Argus_Cal_GetDefaultCalibration+0x1b7c>
 8027c6a:	f241 0c85 	movw	ip, #4229	@ 0x1085
 8027c6e:	f640 7aff 	movw	sl, #4095	@ 0xfff
 8027c72:	2a00      	cmp	r2, #0
 8027c74:	bf08      	it	eq
 8027c76:	46d4      	moveq	ip, sl
 8027c78:	2b04      	cmp	r3, #4
 8027c7a:	f8a4 c27a 	strh.w	ip, [r4, #634]	@ 0x27a
 8027c7e:	f47f ac6f 	bne.w	8027560 <Argus_Cal_GetDefaultCalibration+0x588>
 8027c82:	f8df c9ac 	ldr.w	ip, [pc, #2476]	@ 8028630 <Argus_Cal_GetDefaultCalibration+0x1658>
 8027c86:	f8c4 c26c 	str.w	ip, [r4, #620]	@ 0x26c
 8027c8a:	f04f 0c1d 	mov.w	ip, #29
 8027c8e:	f884 c270 	strb.w	ip, [r4, #624]	@ 0x270
 8027c92:	f04f 0c2f 	mov.w	ip, #47	@ 0x2f
 8027c96:	e46d      	b.n	8027574 <Argus_Cal_GetDefaultCalibration+0x59c>
 8027c98:	2a00      	cmp	r2, #0
 8027c9a:	f000 81fc 	beq.w	8028096 <Argus_Cal_GetDefaultCalibration+0x10be>
 8027c9e:	2118      	movs	r1, #24
 8027ca0:	f8a4 1222 	strh.w	r1, [r4, #546]	@ 0x222
 8027ca4:	2168      	movs	r1, #104	@ 0x68
 8027ca6:	f240 4c19 	movw	ip, #1049	@ 0x419
 8027caa:	f8a4 1224 	strh.w	r1, [r4, #548]	@ 0x224
 8027cae:	f8a4 c26a 	strh.w	ip, [r4, #618]	@ 0x26a
 8027cb2:	f1a8 0104 	sub.w	r1, r8, #4
 8027cb6:	f04f 0c28 	mov.w	ip, #40	@ 0x28
 8027cba:	b2c9      	uxtb	r1, r1
 8027cbc:	f884 c269 	strb.w	ip, [r4, #617]	@ 0x269
 8027cc0:	f44f 5caa 	mov.w	ip, #5440	@ 0x1540
 8027cc4:	f8a4 c267 	strh.w	ip, [r4, #615]	@ 0x267
 8027cc8:	2901      	cmp	r1, #1
 8027cca:	f04f 0c0e 	mov.w	ip, #14
 8027cce:	f884 c264 	strb.w	ip, [r4, #612]	@ 0x264
 8027cd2:	f67f ae4d 	bls.w	8027970 <Argus_Cal_GetDefaultCalibration+0x998>
 8027cd6:	f8df c954 	ldr.w	ip, [pc, #2388]	@ 802862c <Argus_Cal_GetDefaultCalibration+0x1654>
 8027cda:	f8c4 c25e 	str.w	ip, [r4, #606]	@ 0x25e
 8027cde:	f243 0c28 	movw	ip, #12328	@ 0x3028
 8027ce2:	f8a4 c265 	strh.w	ip, [r4, #613]	@ 0x265
 8027ce6:	f44f 4c7a 	mov.w	ip, #64000	@ 0xfa00
 8027cea:	f8a4 c262 	strh.w	ip, [r4, #610]	@ 0x262
 8027cee:	f640 7cfb 	movw	ip, #4091	@ 0xffb
 8027cf2:	f640 7a41 	movw	sl, #3905	@ 0xf41
 8027cf6:	2a00      	cmp	r2, #0
 8027cf8:	bf08      	it	eq
 8027cfa:	46d4      	moveq	ip, sl
 8027cfc:	2d01      	cmp	r5, #1
 8027cfe:	f8a4 c274 	strh.w	ip, [r4, #628]	@ 0x274
 8027d02:	f000 83c6 	beq.w	8028492 <Argus_Cal_GetDefaultCalibration+0x14ba>
 8027d06:	f241 0c79 	movw	ip, #4217	@ 0x1079
 8027d0a:	f640 6adf 	movw	sl, #3807	@ 0xedf
 8027d0e:	2a00      	cmp	r2, #0
 8027d10:	bf08      	it	eq
 8027d12:	46d4      	moveq	ip, sl
 8027d14:	2d01      	cmp	r5, #1
 8027d16:	f8a4 c276 	strh.w	ip, [r4, #630]	@ 0x276
 8027d1a:	f000 83b5 	beq.w	8028488 <Argus_Cal_GetDefaultCalibration+0x14b0>
 8027d1e:	f640 7cdd 	movw	ip, #4061	@ 0xfdd
 8027d22:	f640 6a66 	movw	sl, #3686	@ 0xe66
 8027d26:	2a00      	cmp	r2, #0
 8027d28:	bf08      	it	eq
 8027d2a:	46d4      	moveq	ip, sl
 8027d2c:	2d01      	cmp	r5, #1
 8027d2e:	f8a4 c278 	strh.w	ip, [r4, #632]	@ 0x278
 8027d32:	f000 8133 	beq.w	8027f9c <Argus_Cal_GetDefaultCalibration+0xfc4>
 8027d36:	2b04      	cmp	r3, #4
 8027d38:	d10e      	bne.n	8027d58 <Argus_Cal_GetDefaultCalibration+0xd80>
 8027d3a:	2a00      	cmp	r2, #0
 8027d3c:	f640 6c07 	movw	ip, #3591	@ 0xe07
 8027d40:	bf18      	it	ne
 8027d42:	f44f 6c75 	movne.w	ip, #3920	@ 0xf50
 8027d46:	2d01      	cmp	r5, #1
 8027d48:	f8a4 c27a 	strh.w	ip, [r4, #634]	@ 0x27a
 8027d4c:	d199      	bne.n	8027c82 <Argus_Cal_GetDefaultCalibration+0xcaa>
 8027d4e:	f241 0c85 	movw	ip, #4229	@ 0x1085
 8027d52:	f8a4 c27a 	strh.w	ip, [r4, #634]	@ 0x27a
 8027d56:	e794      	b.n	8027c82 <Argus_Cal_GetDefaultCalibration+0xcaa>
 8027d58:	2b03      	cmp	r3, #3
 8027d5a:	f43f af74 	beq.w	8027c46 <Argus_Cal_GetDefaultCalibration+0xc6e>
 8027d5e:	f241 1c65 	movw	ip, #4453	@ 0x1165
 8027d62:	f241 2a7b 	movw	sl, #4731	@ 0x127b
 8027d66:	2a00      	cmp	r2, #0
 8027d68:	bf08      	it	eq
 8027d6a:	46d4      	moveq	ip, sl
 8027d6c:	e772      	b.n	8027c54 <Argus_Cal_GetDefaultCalibration+0xc7c>
 8027d6e:	f640 21eb 	movw	r1, #2795	@ 0xaeb
 8027d72:	2d01      	cmp	r5, #1
 8027d74:	f8a4 1246 	strh.w	r1, [r4, #582]	@ 0x246
 8027d78:	f47f ab3d 	bne.w	80273f6 <Argus_Cal_GetDefaultCalibration+0x41e>
 8027d7c:	f640 3185 	movw	r1, #2949	@ 0xb85
 8027d80:	f8a4 1246 	strh.w	r1, [r4, #582]	@ 0x246
 8027d84:	f7ff bb37 	b.w	80273f6 <Argus_Cal_GetDefaultCalibration+0x41e>
 8027d88:	f240 513f 	movw	r1, #1343	@ 0x53f
 8027d8c:	2d01      	cmp	r5, #1
 8027d8e:	f8a4 1240 	strh.w	r1, [r4, #576]	@ 0x240
 8027d92:	f47f ab87 	bne.w	80274a4 <Argus_Cal_GetDefaultCalibration+0x4cc>
 8027d96:	f44f 61fe 	mov.w	r1, #2032	@ 0x7f0
 8027d9a:	f8a4 1240 	strh.w	r1, [r4, #576]	@ 0x240
 8027d9e:	f7ff bb81 	b.w	80274a4 <Argus_Cal_GetDefaultCalibration+0x4cc>
 8027da2:	f640 3154 	movw	r1, #2900	@ 0xb54
 8027da6:	2d01      	cmp	r5, #1
 8027da8:	f8a4 123a 	strh.w	r1, [r4, #570]	@ 0x23a
 8027dac:	f47f aac4 	bne.w	8027338 <Argus_Cal_GetDefaultCalibration+0x360>
 8027db0:	f44f 6144 	mov.w	r1, #3136	@ 0xc40
 8027db4:	f8a4 123a 	strh.w	r1, [r4, #570]	@ 0x23a
 8027db8:	f7ff babe 	b.w	8027338 <Argus_Cal_GetDefaultCalibration+0x360>
 8027dbc:	f44f 6112 	mov.w	r1, #2336	@ 0x920
 8027dc0:	2d01      	cmp	r5, #1
 8027dc2:	f8a4 1242 	strh.w	r1, [r4, #578]	@ 0x242
 8027dc6:	f47f ab7d 	bne.w	80274c4 <Argus_Cal_GetDefaultCalibration+0x4ec>
 8027dca:	f44f 6144 	mov.w	r1, #3136	@ 0xc40
 8027dce:	f8a4 1242 	strh.w	r1, [r4, #578]	@ 0x242
 8027dd2:	f7ff bb77 	b.w	80274c4 <Argus_Cal_GetDefaultCalibration+0x4ec>
 8027dd6:	2a00      	cmp	r2, #0
 8027dd8:	f000 811a 	beq.w	8028010 <Argus_Cal_GetDefaultCalibration+0x1038>
 8027ddc:	f640 01b4 	movw	r1, #2228	@ 0x8b4
 8027de0:	2d01      	cmp	r5, #1
 8027de2:	f8a4 1234 	strh.w	r1, [r4, #564]	@ 0x234
 8027de6:	d045      	beq.n	8027e74 <Argus_Cal_GetDefaultCalibration+0xe9c>
 8027de8:	f640 717d 	movw	r1, #3965	@ 0xf7d
 8027dec:	f8a4 1236 	strh.w	r1, [r4, #566]	@ 0x236
 8027df0:	f640 113b 	movw	r1, #2363	@ 0x93b
 8027df4:	f8a4 1238 	strh.w	r1, [r4, #568]	@ 0x238
 8027df8:	f640 6107 	movw	r1, #3591	@ 0xe07
 8027dfc:	f8a4 123a 	strh.w	r1, [r4, #570]	@ 0x23a
 8027e00:	f240 2172 	movw	r1, #626	@ 0x272
 8027e04:	f8a4 122c 	strh.w	r1, [r4, #556]	@ 0x22c
 8027e08:	f44f 61d7 	mov.w	r1, #1720	@ 0x6b8
 8027e0c:	f8a4 122e 	strh.w	r1, [r4, #558]	@ 0x22e
 8027e10:	f240 317f 	movw	r1, #895	@ 0x37f
 8027e14:	f8a4 1230 	strh.w	r1, [r4, #560]	@ 0x230
 8027e18:	f240 61ed 	movw	r1, #1773	@ 0x6ed
 8027e1c:	f8a4 1232 	strh.w	r1, [r4, #562]	@ 0x232
 8027e20:	f640 217f 	movw	r1, #2687	@ 0xa7f
 8027e24:	f8a4 1244 	strh.w	r1, [r4, #580]	@ 0x244
 8027e28:	f241 419c 	movw	r1, #5276	@ 0x149c
 8027e2c:	f8a4 1246 	strh.w	r1, [r4, #582]	@ 0x246
 8027e30:	f44f 612a 	mov.w	r1, #2720	@ 0xaa0
 8027e34:	f8a4 1248 	strh.w	r1, [r4, #584]	@ 0x248
 8027e38:	f640 51a8 	movw	r1, #3496	@ 0xda8
 8027e3c:	f8a4 124a 	strh.w	r1, [r4, #586]	@ 0x24a
 8027e40:	f240 4171 	movw	r1, #1137	@ 0x471
 8027e44:	f8a4 123c 	strh.w	r1, [r4, #572]	@ 0x23c
 8027e48:	f640 2196 	movw	r1, #2710	@ 0xa96
 8027e4c:	f8a4 123e 	strh.w	r1, [r4, #574]	@ 0x23e
 8027e50:	f240 31fb 	movw	r1, #1019	@ 0x3fb
 8027e54:	f8a4 1240 	strh.w	r1, [r4, #576]	@ 0x240
 8027e58:	f640 11ff 	movw	r1, #2559	@ 0x9ff
 8027e5c:	f8a4 1242 	strh.w	r1, [r4, #578]	@ 0x242
 8027e60:	e71d      	b.n	8027c9e <Argus_Cal_GetDefaultCalibration+0xcc6>
 8027e62:	f64f 712e 	movw	r1, #65326	@ 0xff2e
 8027e66:	2d01      	cmp	r5, #1
 8027e68:	f8a4 1234 	strh.w	r1, [r4, #564]	@ 0x234
 8027e6c:	f47f aa37 	bne.w	80272de <Argus_Cal_GetDefaultCalibration+0x306>
 8027e70:	f44f 7150 	mov.w	r1, #832	@ 0x340
 8027e74:	2b05      	cmp	r3, #5
 8027e76:	f8a4 1234 	strh.w	r1, [r4, #564]	@ 0x234
 8027e7a:	f47f aa30 	bne.w	80272de <Argus_Cal_GetDefaultCalibration+0x306>
 8027e7e:	2a00      	cmp	r2, #0
 8027e80:	f000 813d 	beq.w	80280fe <Argus_Cal_GetDefaultCalibration+0x1126>
 8027e84:	f640 0138 	movw	r1, #2104	@ 0x838
 8027e88:	2d01      	cmp	r5, #1
 8027e8a:	f8a4 1236 	strh.w	r1, [r4, #566]	@ 0x236
 8027e8e:	f47f aa33 	bne.w	80272f8 <Argus_Cal_GetDefaultCalibration+0x320>
 8027e92:	f640 3185 	movw	r1, #2949	@ 0xb85
 8027e96:	f8a4 1236 	strh.w	r1, [r4, #566]	@ 0x236
 8027e9a:	f7ff ba2d 	b.w	80272f8 <Argus_Cal_GetDefaultCalibration+0x320>
 8027e9e:	f640 016f 	movw	r1, #2159	@ 0x86f
 8027ea2:	e7f1      	b.n	8027e88 <Argus_Cal_GetDefaultCalibration+0xeb0>
 8027ea4:	f44f 61ac 	mov.w	r1, #1376	@ 0x560
 8027ea8:	2d01      	cmp	r5, #1
 8027eaa:	f8a4 1238 	strh.w	r1, [r4, #568]	@ 0x238
 8027eae:	f47f aa33 	bne.w	8027318 <Argus_Cal_GetDefaultCalibration+0x340>
 8027eb2:	f44f 61fe 	mov.w	r1, #2032	@ 0x7f0
 8027eb6:	f8a4 1238 	strh.w	r1, [r4, #568]	@ 0x238
 8027eba:	f7ff ba2d 	b.w	8027318 <Argus_Cal_GetDefaultCalibration+0x340>
 8027ebe:	f44f 7174 	mov.w	r1, #976	@ 0x3d0
 8027ec2:	2d01      	cmp	r5, #1
 8027ec4:	f8a4 123c 	strh.w	r1, [r4, #572]	@ 0x23c
 8027ec8:	f47f aacc 	bne.w	8027464 <Argus_Cal_GetDefaultCalibration+0x48c>
 8027ecc:	f240 5143 	movw	r1, #1347	@ 0x543
 8027ed0:	f8a4 123c 	strh.w	r1, [r4, #572]	@ 0x23c
 8027ed4:	f7ff bac6 	b.w	8027464 <Argus_Cal_GetDefaultCalibration+0x48c>
 8027ed8:	f640 1152 	movw	r1, #2386	@ 0x952
 8027edc:	2d01      	cmp	r5, #1
 8027ede:	f8a4 124a 	strh.w	r1, [r4, #586]	@ 0x24a
 8027ee2:	f47f aaaf 	bne.w	8027444 <Argus_Cal_GetDefaultCalibration+0x46c>
 8027ee6:	f44f 6144 	mov.w	r1, #3136	@ 0xc40
 8027eea:	f8a4 124a 	strh.w	r1, [r4, #586]	@ 0x24a
 8027eee:	f7ff baa9 	b.w	8027444 <Argus_Cal_GetDefaultCalibration+0x46c>
 8027ef2:	f640 31de 	movw	r1, #3038	@ 0xbde
 8027ef6:	2d01      	cmp	r5, #1
 8027ef8:	f8a4 123e 	strh.w	r1, [r4, #574]	@ 0x23e
 8027efc:	f47f aac2 	bne.w	8027484 <Argus_Cal_GetDefaultCalibration+0x4ac>
 8027f00:	f640 3185 	movw	r1, #2949	@ 0xb85
 8027f04:	f8a4 123e 	strh.w	r1, [r4, #574]	@ 0x23e
 8027f08:	f7ff babc 	b.w	8027484 <Argus_Cal_GetDefaultCalibration+0x4ac>
 8027f0c:	f240 416a 	movw	r1, #1130	@ 0x46a
 8027f10:	2d01      	cmp	r5, #1
 8027f12:	f8a4 1230 	strh.w	r1, [r4, #560]	@ 0x230
 8027f16:	f47f aa3f 	bne.w	8027398 <Argus_Cal_GetDefaultCalibration+0x3c0>
 8027f1a:	f44f 61fe 	mov.w	r1, #2032	@ 0x7f0
 8027f1e:	f8a4 1230 	strh.w	r1, [r4, #560]	@ 0x230
 8027f22:	f7ff ba39 	b.w	8027398 <Argus_Cal_GetDefaultCalibration+0x3c0>
 8027f26:	f44f 61f5 	mov.w	r1, #1960	@ 0x7a8
 8027f2a:	2d01      	cmp	r5, #1
 8027f2c:	f8a4 122e 	strh.w	r1, [r4, #558]	@ 0x22e
 8027f30:	f47f aa22 	bne.w	8027378 <Argus_Cal_GetDefaultCalibration+0x3a0>
 8027f34:	f640 3185 	movw	r1, #2949	@ 0xb85
 8027f38:	f8a4 122e 	strh.w	r1, [r4, #558]	@ 0x22e
 8027f3c:	f7ff ba1c 	b.w	8027378 <Argus_Cal_GetDefaultCalibration+0x3a0>
 8027f40:	f44f 7174 	mov.w	r1, #976	@ 0x3d0
 8027f44:	2d01      	cmp	r5, #1
 8027f46:	f8a4 1244 	strh.w	r1, [r4, #580]	@ 0x244
 8027f4a:	f47f aa44 	bne.w	80273d6 <Argus_Cal_GetDefaultCalibration+0x3fe>
 8027f4e:	f240 5143 	movw	r1, #1347	@ 0x543
 8027f52:	f8a4 1244 	strh.w	r1, [r4, #580]	@ 0x244
 8027f56:	f7ff ba3e 	b.w	80273d6 <Argus_Cal_GetDefaultCalibration+0x3fe>
 8027f5a:	f640 11e2 	movw	r1, #2530	@ 0x9e2
 8027f5e:	2d01      	cmp	r5, #1
 8027f60:	f8a4 1232 	strh.w	r1, [r4, #562]	@ 0x232
 8027f64:	f47f aa28 	bne.w	80273b8 <Argus_Cal_GetDefaultCalibration+0x3e0>
 8027f68:	f44f 6144 	mov.w	r1, #3136	@ 0xc40
 8027f6c:	f8a4 1232 	strh.w	r1, [r4, #562]	@ 0x232
 8027f70:	f7ff ba22 	b.w	80273b8 <Argus_Cal_GetDefaultCalibration+0x3e0>
 8027f74:	f240 711e 	movw	r1, #1822	@ 0x71e
 8027f78:	2d01      	cmp	r5, #1
 8027f7a:	f8a4 1248 	strh.w	r1, [r4, #584]	@ 0x248
 8027f7e:	f47f aa51 	bne.w	8027424 <Argus_Cal_GetDefaultCalibration+0x44c>
 8027f82:	f44f 61fe 	mov.w	r1, #2032	@ 0x7f0
 8027f86:	f8a4 1248 	strh.w	r1, [r4, #584]	@ 0x248
 8027f8a:	f7ff ba4b 	b.w	8027424 <Argus_Cal_GetDefaultCalibration+0x44c>
 8027f8e:	f241 0c0f 	movw	ip, #4111	@ 0x100f
 8027f92:	2b05      	cmp	r3, #5
 8027f94:	f8a4 c276 	strh.w	ip, [r4, #630]	@ 0x276
 8027f98:	f040 8215 	bne.w	80283c6 <Argus_Cal_GetDefaultCalibration+0x13ee>
 8027f9c:	f241 0c78 	movw	ip, #4216	@ 0x1078
 8027fa0:	2b05      	cmp	r3, #5
 8027fa2:	f8a4 c278 	strh.w	ip, [r4, #632]	@ 0x278
 8027fa6:	f47f aec6 	bne.w	8027d36 <Argus_Cal_GetDefaultCalibration+0xd5e>
 8027faa:	f241 3c44 	movw	ip, #4932	@ 0x1344
 8027fae:	f241 3af9 	movw	sl, #5113	@ 0x13f9
 8027fb2:	2a00      	cmp	r2, #0
 8027fb4:	bf08      	it	eq
 8027fb6:	46d4      	moveq	ip, sl
 8027fb8:	f8a4 c27a 	strh.w	ip, [r4, #634]	@ 0x27a
 8027fbc:	f241 0c85 	movw	ip, #4229	@ 0x1085
 8027fc0:	e65a      	b.n	8027c78 <Argus_Cal_GetDefaultCalibration+0xca0>
 8027fc2:	f241 0ce6 	movw	ip, #4326	@ 0x10e6
 8027fc6:	f8a4 c274 	strh.w	ip, [r4, #628]	@ 0x274
 8027fca:	2a00      	cmp	r2, #0
 8027fcc:	f040 81f2 	bne.w	80283b4 <Argus_Cal_GetDefaultCalibration+0x13dc>
 8027fd0:	f241 2c79 	movw	ip, #4729	@ 0x1279
 8027fd4:	2d01      	cmp	r5, #1
 8027fd6:	f8a4 c276 	strh.w	ip, [r4, #630]	@ 0x276
 8027fda:	d103      	bne.n	8027fe4 <Argus_Cal_GetDefaultCalibration+0x100c>
 8027fdc:	f241 0cb9 	movw	ip, #4281	@ 0x10b9
 8027fe0:	f8a4 c276 	strh.w	ip, [r4, #630]	@ 0x276
 8027fe4:	f241 3c11 	movw	ip, #4881	@ 0x1311
 8027fe8:	e4ea      	b.n	80279c0 <Argus_Cal_GetDefaultCalibration+0x9e8>
 8027fea:	2b04      	cmp	r3, #4
 8027fec:	f47f ae09 	bne.w	8027c02 <Argus_Cal_GetDefaultCalibration+0xc2a>
 8027ff0:	e67d      	b.n	8027cee <Argus_Cal_GetDefaultCalibration+0xd16>
 8027ff2:	f240 31ca 	movw	r1, #970	@ 0x3ca
 8027ff6:	e7a5      	b.n	8027f44 <Argus_Cal_GetDefaultCalibration+0xf6c>
 8027ff8:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8027ffc:	e761      	b.n	8027ec2 <Argus_Cal_GetDefaultCalibration+0xeea>
 8027ffe:	f240 6166 	movw	r1, #1638	@ 0x666
 8028002:	e7b9      	b.n	8027f78 <Argus_Cal_GetDefaultCalibration+0xfa0>
 8028004:	f640 317b 	movw	r1, #2939	@ 0xb7b
 8028008:	e775      	b.n	8027ef6 <Argus_Cal_GetDefaultCalibration+0xf1e>
 802800a:	f240 718a 	movw	r1, #1930	@ 0x78a
 802800e:	e78c      	b.n	8027f2a <Argus_Cal_GetDefaultCalibration+0xf52>
 8028010:	f240 51c3 	movw	r1, #1475	@ 0x5c3
 8028014:	2d01      	cmp	r5, #1
 8028016:	f8a4 1234 	strh.w	r1, [r4, #564]	@ 0x234
 802801a:	f43f af2b 	beq.w	8027e74 <Argus_Cal_GetDefaultCalibration+0xe9c>
 802801e:	f640 112a 	movw	r1, #2346	@ 0x92a
 8028022:	f8a4 1236 	strh.w	r1, [r4, #566]	@ 0x236
 8028026:	f240 6139 	movw	r1, #1593	@ 0x639
 802802a:	f8a4 1238 	strh.w	r1, [r4, #568]	@ 0x238
 802802e:	f240 61fd 	movw	r1, #1789	@ 0x6fd
 8028032:	f8a4 123a 	strh.w	r1, [r4, #570]	@ 0x23a
 8028036:	f240 4161 	movw	r1, #1121	@ 0x461
 802803a:	f8a4 122c 	strh.w	r1, [r4, #556]	@ 0x22c
 802803e:	f240 1193 	movw	r1, #403	@ 0x193
 8028042:	f8a4 122e 	strh.w	r1, [r4, #558]	@ 0x22e
 8028046:	f240 7117 	movw	r1, #1815	@ 0x717
 802804a:	f8a4 1230 	strh.w	r1, [r4, #560]	@ 0x230
 802804e:	f240 414a 	movw	r1, #1098	@ 0x44a
 8028052:	f8a4 1232 	strh.w	r1, [r4, #562]	@ 0x232
 8028056:	f240 713b 	movw	r1, #1851	@ 0x73b
 802805a:	f8a4 1244 	strh.w	r1, [r4, #580]	@ 0x244
 802805e:	f640 3154 	movw	r1, #2900	@ 0xb54
 8028062:	f8a4 1246 	strh.w	r1, [r4, #582]	@ 0x246
 8028066:	f640 212d 	movw	r1, #2605	@ 0xa2d
 802806a:	f8a4 1248 	strh.w	r1, [r4, #584]	@ 0x248
 802806e:	f640 416e 	movw	r1, #3182	@ 0xc6e
 8028072:	f8a4 124a 	strh.w	r1, [r4, #586]	@ 0x24a
 8028076:	f240 4119 	movw	r1, #1049	@ 0x419
 802807a:	f8a4 123c 	strh.w	r1, [r4, #572]	@ 0x23c
 802807e:	f240 2127 	movw	r1, #551	@ 0x227
 8028082:	f8a4 123e 	strh.w	r1, [r4, #574]	@ 0x23e
 8028086:	f240 51a5 	movw	r1, #1445	@ 0x5a5
 802808a:	f8a4 1240 	strh.w	r1, [r4, #576]	@ 0x240
 802808e:	f240 3129 	movw	r1, #809	@ 0x329
 8028092:	f8a4 1242 	strh.w	r1, [r4, #578]	@ 0x242
 8028096:	2100      	movs	r1, #0
 8028098:	f8a4 1222 	strh.w	r1, [r4, #546]	@ 0x222
 802809c:	2140      	movs	r1, #64	@ 0x40
 802809e:	e602      	b.n	8027ca6 <Argus_Cal_GetDefaultCalibration+0xcce>
 80280a0:	f244 515d 	movw	r1, #17757	@ 0x455d
 80280a4:	2d01      	cmp	r5, #1
 80280a6:	8061      	strh	r1, [r4, #2]
 80280a8:	f47f a874 	bne.w	8027194 <Argus_Cal_GetDefaultCalibration+0x1bc>
 80280ac:	f7ff b86c 	b.w	8027188 <Argus_Cal_GetDefaultCalibration+0x1b0>
 80280b0:	f640 01c1 	movw	r1, #2241	@ 0x8c1
 80280b4:	e712      	b.n	8027edc <Argus_Cal_GetDefaultCalibration+0xf04>
 80280b6:	2113      	movs	r1, #19
 80280b8:	2d01      	cmp	r5, #1
 80280ba:	7221      	strb	r1, [r4, #8]
 80280bc:	f47f aac2 	bne.w	8027644 <Argus_Cal_GetDefaultCalibration+0x66c>
 80280c0:	2117      	movs	r1, #23
 80280c2:	7221      	strb	r1, [r4, #8]
 80280c4:	2b04      	cmp	r3, #4
 80280c6:	f43f aabd 	beq.w	8027644 <Argus_Cal_GetDefaultCalibration+0x66c>
 80280ca:	2b03      	cmp	r3, #3
 80280cc:	f000 8103 	beq.w	80282d6 <Argus_Cal_GetDefaultCalibration+0x12fe>
 80280d0:	2a00      	cmp	r2, #0
 80280d2:	bf14      	ite	ne
 80280d4:	216c      	movne	r1, #108	@ 0x6c
 80280d6:	2172      	moveq	r1, #114	@ 0x72
 80280d8:	7261      	strb	r1, [r4, #9]
 80280da:	e4de      	b.n	8027a9a <Argus_Cal_GetDefaultCalibration+0xac2>
 80280dc:	f644 11b8 	movw	r1, #18872	@ 0x49b8
 80280e0:	e7e0      	b.n	80280a4 <Argus_Cal_GetDefaultCalibration+0x10cc>
 80280e2:	f240 41b6 	movw	r1, #1206	@ 0x4b6
 80280e6:	e651      	b.n	8027d8c <Argus_Cal_GetDefaultCalibration+0xdb4>
 80280e8:	f64f 7124 	movw	r1, #65316	@ 0xff24
 80280ec:	2d01      	cmp	r5, #1
 80280ee:	f8a4 1234 	strh.w	r1, [r4, #564]	@ 0x234
 80280f2:	f000 8510 	beq.w	8028b16 <Argus_Cal_GetDefaultCalibration+0x1b3e>
 80280f6:	f06f 0ecc 	mvn.w	lr, #204	@ 0xcc
 80280fa:	f06f 0938 	mvn.w	r9, #56	@ 0x38
 80280fe:	f44f 7115 	mov.w	r1, #596	@ 0x254
 8028102:	f7ff b8f4 	b.w	80272ee <Argus_Cal_GetDefaultCalibration+0x316>
 8028106:	f640 21eb 	movw	r1, #2795	@ 0xaeb
 802810a:	e64c      	b.n	8027da6 <Argus_Cal_GetDefaultCalibration+0xdce>
 802810c:	f240 41d7 	movw	r1, #1239	@ 0x4d7
 8028110:	e6ca      	b.n	8027ea8 <Argus_Cal_GetDefaultCalibration+0xed0>
 8028112:	f640 01a1 	movw	r1, #2209	@ 0x8a1
 8028116:	e653      	b.n	8027dc0 <Argus_Cal_GetDefaultCalibration+0xde8>
 8028118:	f640 01f6 	movw	r1, #2294	@ 0x8f6
 802811c:	e71f      	b.n	8027f5e <Argus_Cal_GetDefaultCalibration+0xf86>
 802811e:	f640 2189 	movw	r1, #2697	@ 0xa89
 8028122:	e626      	b.n	8027d72 <Argus_Cal_GetDefaultCalibration+0xd9a>
 8028124:	f240 31ee 	movw	r1, #1006	@ 0x3ee
 8028128:	e6f2      	b.n	8027f10 <Argus_Cal_GetDefaultCalibration+0xf38>
 802812a:	21f2      	movs	r1, #242	@ 0xf2
 802812c:	2b05      	cmp	r3, #5
 802812e:	7521      	strb	r1, [r4, #20]
 8028130:	f47f ac00 	bne.w	8027934 <Argus_Cal_GetDefaultCalibration+0x95c>
 8028134:	2a00      	cmp	r2, #0
 8028136:	f000 80e3 	beq.w	8028300 <Argus_Cal_GetDefaultCalibration+0x1328>
 802813a:	2151      	movs	r1, #81	@ 0x51
 802813c:	2d01      	cmp	r5, #1
 802813e:	7561      	strb	r1, [r4, #21]
 8028140:	f47f ac04 	bne.w	802794c <Argus_Cal_GetDefaultCalibration+0x974>
 8028144:	f7ff bbfe 	b.w	8027944 <Argus_Cal_GetDefaultCalibration+0x96c>
 8028148:	2110      	movs	r1, #16
 802814a:	2b05      	cmp	r3, #5
 802814c:	74a1      	strb	r1, [r4, #18]
 802814e:	f43f a872 	beq.w	8027236 <Argus_Cal_GetDefaultCalibration+0x25e>
 8028152:	2b04      	cmp	r3, #4
 8028154:	f43f aac6 	beq.w	80276e4 <Argus_Cal_GetDefaultCalibration+0x70c>
 8028158:	2b03      	cmp	r3, #3
 802815a:	f43f abd7 	beq.w	802790c <Argus_Cal_GetDefaultCalibration+0x934>
 802815e:	2a00      	cmp	r2, #0
 8028160:	f000 8113 	beq.w	802838a <Argus_Cal_GetDefaultCalibration+0x13b2>
 8028164:	2133      	movs	r1, #51	@ 0x33
 8028166:	74e1      	strb	r1, [r4, #19]
 8028168:	2122      	movs	r1, #34	@ 0x22
 802816a:	2b05      	cmp	r3, #5
 802816c:	74e1      	strb	r1, [r4, #19]
 802816e:	f43f a86a 	beq.w	8027246 <Argus_Cal_GetDefaultCalibration+0x26e>
 8028172:	2b04      	cmp	r3, #4
 8028174:	f43f aac0 	beq.w	80276f8 <Argus_Cal_GetDefaultCalibration+0x720>
 8028178:	2b03      	cmp	r3, #3
 802817a:	f43f abcf 	beq.w	802791c <Argus_Cal_GetDefaultCalibration+0x944>
 802817e:	210e      	movs	r1, #14
 8028180:	7521      	strb	r1, [r4, #20]
 8028182:	2a00      	cmp	r2, #0
 8028184:	d1d1      	bne.n	802812a <Argus_Cal_GetDefaultCalibration+0x1152>
 8028186:	21f6      	movs	r1, #246	@ 0xf6
 8028188:	2b05      	cmp	r3, #5
 802818a:	7521      	strb	r1, [r4, #20]
 802818c:	f47f abd2 	bne.w	8027934 <Argus_Cal_GetDefaultCalibration+0x95c>
 8028190:	f7ff bbd8 	b.w	8027944 <Argus_Cal_GetDefaultCalibration+0x96c>
 8028194:	f102 011c 	add.w	r1, r2, #28
 8028198:	2b05      	cmp	r3, #5
 802819a:	73e1      	strb	r1, [r4, #15]
 802819c:	f43f a833 	beq.w	8027206 <Argus_Cal_GetDefaultCalibration+0x22e>
 80281a0:	2a00      	cmp	r2, #0
 80281a2:	f000 80e9 	beq.w	8028378 <Argus_Cal_GetDefaultCalibration+0x13a0>
 80281a6:	f06f 010b 	mvn.w	r1, #11
 80281aa:	2b05      	cmp	r3, #5
 80281ac:	7421      	strb	r1, [r4, #16]
 80281ae:	f43f a832 	beq.w	8027216 <Argus_Cal_GetDefaultCalibration+0x23e>
 80281b2:	2b04      	cmp	r3, #4
 80281b4:	f43f aa82 	beq.w	80276bc <Argus_Cal_GetDefaultCalibration+0x6e4>
 80281b8:	2b03      	cmp	r3, #3
 80281ba:	d06b      	beq.n	8028294 <Argus_Cal_GetDefaultCalibration+0x12bc>
 80281bc:	2a00      	cmp	r2, #0
 80281be:	f000 8497 	beq.w	8028af0 <Argus_Cal_GetDefaultCalibration+0x1b18>
 80281c2:	2146      	movs	r1, #70	@ 0x46
 80281c4:	7461      	strb	r1, [r4, #17]
 80281c6:	211d      	movs	r1, #29
 80281c8:	2b05      	cmp	r3, #5
 80281ca:	7461      	strb	r1, [r4, #17]
 80281cc:	f43f a82b 	beq.w	8027226 <Argus_Cal_GetDefaultCalibration+0x24e>
 80281d0:	2b04      	cmp	r3, #4
 80281d2:	f43f aa7d 	beq.w	80276d0 <Argus_Cal_GetDefaultCalibration+0x6f8>
 80281d6:	2b03      	cmp	r3, #3
 80281d8:	d064      	beq.n	80282a4 <Argus_Cal_GetDefaultCalibration+0x12cc>
 80281da:	f1c2 0116 	rsb	r1, r2, #22
 80281de:	74a1      	strb	r1, [r4, #18]
 80281e0:	2a00      	cmp	r2, #0
 80281e2:	d1b1      	bne.n	8028148 <Argus_Cal_GetDefaultCalibration+0x1170>
 80281e4:	210e      	movs	r1, #14
 80281e6:	e7b0      	b.n	802814a <Argus_Cal_GetDefaultCalibration+0x1172>
 80281e8:	f102 012d 	add.w	r1, r2, #45	@ 0x2d
 80281ec:	72a1      	strb	r1, [r4, #10]
 80281ee:	2b04      	cmp	r3, #4
 80281f0:	f43f aa32 	beq.w	8027658 <Argus_Cal_GetDefaultCalibration+0x680>
 80281f4:	2b03      	cmp	r3, #3
 80281f6:	d078      	beq.n	80282ea <Argus_Cal_GetDefaultCalibration+0x1312>
 80281f8:	2a00      	cmp	r2, #0
 80281fa:	f000 80a6 	beq.w	802834a <Argus_Cal_GetDefaultCalibration+0x1372>
 80281fe:	2166      	movs	r1, #102	@ 0x66
 8028200:	72e1      	strb	r1, [r4, #11]
 8028202:	214f      	movs	r1, #79	@ 0x4f
 8028204:	2b05      	cmp	r3, #5
 8028206:	72e1      	strb	r1, [r4, #11]
 8028208:	f43e afe0 	beq.w	80271cc <Argus_Cal_GetDefaultCalibration+0x1f4>
 802820c:	2b04      	cmp	r3, #4
 802820e:	f43f aa2c 	beq.w	802766a <Argus_Cal_GetDefaultCalibration+0x692>
 8028212:	2b03      	cmp	r3, #3
 8028214:	f43f ab6d 	beq.w	80278f2 <Argus_Cal_GetDefaultCalibration+0x91a>
 8028218:	2a00      	cmp	r2, #0
 802821a:	f000 8476 	beq.w	8028b0a <Argus_Cal_GetDefaultCalibration+0x1b32>
 802821e:	211b      	movs	r1, #27
 8028220:	7321      	strb	r1, [r4, #12]
 8028222:	21fe      	movs	r1, #254	@ 0xfe
 8028224:	2b05      	cmp	r3, #5
 8028226:	7321      	strb	r1, [r4, #12]
 8028228:	f47f aaf2 	bne.w	8027810 <Argus_Cal_GetDefaultCalibration+0x838>
 802822c:	211b      	movs	r1, #27
 802822e:	7361      	strb	r1, [r4, #13]
 8028230:	f7fe bfd7 	b.w	80271e2 <Argus_Cal_GetDefaultCalibration+0x20a>
 8028234:	2a00      	cmp	r2, #0
 8028236:	f000 82c5 	beq.w	80287c4 <Argus_Cal_GetDefaultCalibration+0x17ec>
 802823a:	2130      	movs	r1, #48	@ 0x30
 802823c:	2d01      	cmp	r5, #1
 802823e:	7561      	strb	r1, [r4, #21]
 8028240:	f43f ab80 	beq.w	8027944 <Argus_Cal_GetDefaultCalibration+0x96c>
 8028244:	2100      	movs	r1, #0
 8028246:	75a1      	strb	r1, [r4, #22]
 8028248:	2a00      	cmp	r2, #0
 802824a:	bf14      	ite	ne
 802824c:	212d      	movne	r1, #45	@ 0x2d
 802824e:	2130      	moveq	r1, #48	@ 0x30
 8028250:	2d01      	cmp	r5, #1
 8028252:	75e1      	strb	r1, [r4, #23]
 8028254:	f47f ab1e 	bne.w	8027894 <Argus_Cal_GetDefaultCalibration+0x8bc>
 8028258:	f7ff ba6d 	b.w	8027736 <Argus_Cal_GetDefaultCalibration+0x75e>
 802825c:	2a00      	cmp	r2, #0
 802825e:	f000 82f0 	beq.w	8028842 <Argus_Cal_GetDefaultCalibration+0x186a>
 8028262:	212c      	movs	r1, #44	@ 0x2c
 8028264:	2d01      	cmp	r5, #1
 8028266:	7361      	strb	r1, [r4, #13]
 8028268:	f000 80ea 	beq.w	8028440 <Argus_Cal_GetDefaultCalibration+0x1468>
 802826c:	2114      	movs	r1, #20
 802826e:	73a1      	strb	r1, [r4, #14]
 8028270:	2a00      	cmp	r2, #0
 8028272:	bf14      	ite	ne
 8028274:	2129      	movne	r1, #41	@ 0x29
 8028276:	212b      	moveq	r1, #43	@ 0x2b
 8028278:	2d01      	cmp	r5, #1
 802827a:	73e1      	strb	r1, [r4, #15]
 802827c:	f000 80d3 	beq.w	8028426 <Argus_Cal_GetDefaultCalibration+0x144e>
 8028280:	2a00      	cmp	r2, #0
 8028282:	bf14      	ite	ne
 8028284:	f06f 0124 	mvnne.w	r1, #36	@ 0x24
 8028288:	f06f 012b 	mvneq.w	r1, #43	@ 0x2b
 802828c:	2d01      	cmp	r5, #1
 802828e:	7421      	strb	r1, [r4, #16]
 8028290:	f000 80c6 	beq.w	8028420 <Argus_Cal_GetDefaultCalibration+0x1448>
 8028294:	2a00      	cmp	r2, #0
 8028296:	bf14      	ite	ne
 8028298:	212f      	movne	r1, #47	@ 0x2f
 802829a:	2136      	moveq	r1, #54	@ 0x36
 802829c:	2d01      	cmp	r5, #1
 802829e:	7461      	strb	r1, [r4, #17]
 80282a0:	f000 80ef 	beq.w	8028482 <Argus_Cal_GetDefaultCalibration+0x14aa>
 80282a4:	2a00      	cmp	r2, #0
 80282a6:	bf14      	ite	ne
 80282a8:	2103      	movne	r1, #3
 80282aa:	f06f 0101 	mvneq.w	r1, #1
 80282ae:	2d01      	cmp	r5, #1
 80282b0:	74a1      	strb	r1, [r4, #18]
 80282b2:	f47f ab2b 	bne.w	802790c <Argus_Cal_GetDefaultCalibration+0x934>
 80282b6:	2110      	movs	r1, #16
 80282b8:	74a1      	strb	r1, [r4, #18]
 80282ba:	e74a      	b.n	8028152 <Argus_Cal_GetDefaultCalibration+0x117a>
 80282bc:	f244 5170 	movw	r1, #17776	@ 0x4570
 80282c0:	f244 6c65 	movw	ip, #18021	@ 0x4665
 80282c4:	2a00      	cmp	r2, #0
 80282c6:	bf08      	it	eq
 80282c8:	4661      	moveq	r1, ip
 80282ca:	2d01      	cmp	r5, #1
 80282cc:	8061      	strh	r1, [r4, #2]
 80282ce:	f43e af5b 	beq.w	8027188 <Argus_Cal_GetDefaultCalibration+0x1b0>
 80282d2:	1f51      	subs	r1, r2, #5
 80282d4:	7221      	strb	r1, [r4, #8]
 80282d6:	2a00      	cmp	r2, #0
 80282d8:	f000 82ba 	beq.w	8028850 <Argus_Cal_GetDefaultCalibration+0x1878>
 80282dc:	2154      	movs	r1, #84	@ 0x54
 80282de:	2d01      	cmp	r5, #1
 80282e0:	7261      	strb	r1, [r4, #9]
 80282e2:	f43f abda 	beq.w	8027a9a <Argus_Cal_GetDefaultCalibration+0xac2>
 80282e6:	212c      	movs	r1, #44	@ 0x2c
 80282e8:	72a1      	strb	r1, [r4, #10]
 80282ea:	2a00      	cmp	r2, #0
 80282ec:	bf14      	ite	ne
 80282ee:	2153      	movne	r1, #83	@ 0x53
 80282f0:	2156      	moveq	r1, #86	@ 0x56
 80282f2:	2d01      	cmp	r5, #1
 80282f4:	72e1      	strb	r1, [r4, #11]
 80282f6:	f47f aafc 	bne.w	80278f2 <Argus_Cal_GetDefaultCalibration+0x91a>
 80282fa:	214f      	movs	r1, #79	@ 0x4f
 80282fc:	72e1      	strb	r1, [r4, #11]
 80282fe:	e785      	b.n	802820c <Argus_Cal_GetDefaultCalibration+0x1234>
 8028300:	214a      	movs	r1, #74	@ 0x4a
 8028302:	e71b      	b.n	802813c <Argus_Cal_GetDefaultCalibration+0x1164>
 8028304:	49c4      	ldr	r1, [pc, #784]	@ (8028618 <Argus_Cal_GetDefaultCalibration+0x1640>)
 8028306:	f8df c32c 	ldr.w	ip, [pc, #812]	@ 8028634 <Argus_Cal_GetDefaultCalibration+0x165c>
 802830a:	f46f 7a86 	mvn.w	sl, #268	@ 0x10c
 802830e:	e9c4 c102 	strd	ip, r1, [r4, #8]
 8028312:	f5a1 1188 	sub.w	r1, r1, #1114112	@ 0x110000
 8028316:	4451      	add	r1, sl
 8028318:	6121      	str	r1, [r4, #16]
 802831a:	f5a1 417e 	sub.w	r1, r1, #65024	@ 0xfe00
 802831e:	6161      	str	r1, [r4, #20]
 8028320:	2b04      	cmp	r3, #4
 8028322:	49be      	ldr	r1, [pc, #760]	@ (802861c <Argus_Cal_GetDefaultCalibration+0x1644>)
 8028324:	6021      	str	r1, [r4, #0]
 8028326:	f47f abe6 	bne.w	8027af6 <Argus_Cal_GetDefaultCalibration+0xb1e>
 802832a:	4bbd      	ldr	r3, [pc, #756]	@ (8028620 <Argus_Cal_GetDefaultCalibration+0x1648>)
 802832c:	e9c4 3394 	strd	r3, r3, [r4, #592]	@ 0x250
 8028330:	f243 3333 	movw	r3, #13107	@ 0x3333
 8028334:	f8a4 309c 	strh.w	r3, [r4, #156]	@ 0x9c
 8028338:	2a00      	cmp	r2, #0
 802833a:	f000 8278 	beq.w	802882e <Argus_Cal_GetDefaultCalibration+0x1856>
 802833e:	4ab9      	ldr	r2, [pc, #740]	@ (8028624 <Argus_Cal_GetDefaultCalibration+0x164c>)
 8028340:	4bb9      	ldr	r3, [pc, #740]	@ (8028628 <Argus_Cal_GetDefaultCalibration+0x1650>)
 8028342:	e9c4 239d 	strd	r2, r3, [r4, #628]	@ 0x274
 8028346:	f7ff bbf2 	b.w	8027b2e <Argus_Cal_GetDefaultCalibration+0xb56>
 802834a:	2161      	movs	r1, #97	@ 0x61
 802834c:	2d01      	cmp	r5, #1
 802834e:	72e1      	strb	r1, [r4, #11]
 8028350:	f000 83e7 	beq.w	8028b22 <Argus_Cal_GetDefaultCalibration+0x1b4a>
 8028354:	211d      	movs	r1, #29
 8028356:	7321      	strb	r1, [r4, #12]
 8028358:	f7ff ba5a 	b.w	8027810 <Argus_Cal_GetDefaultCalibration+0x838>
 802835c:	2112      	movs	r1, #18
 802835e:	2d01      	cmp	r5, #1
 8028360:	75a1      	strb	r1, [r4, #22]
 8028362:	f47f aa89 	bne.w	8027878 <Argus_Cal_GetDefaultCalibration+0x8a0>
 8028366:	210e      	movs	r1, #14
 8028368:	2b05      	cmp	r3, #5
 802836a:	75a1      	strb	r1, [r4, #22]
 802836c:	f47f aa84 	bne.w	8027878 <Argus_Cal_GetDefaultCalibration+0x8a0>
 8028370:	212c      	movs	r1, #44	@ 0x2c
 8028372:	75e1      	strb	r1, [r4, #23]
 8028374:	f7ff b9df 	b.w	8027736 <Argus_Cal_GetDefaultCalibration+0x75e>
 8028378:	2110      	movs	r1, #16
 802837a:	2d01      	cmp	r5, #1
 802837c:	7421      	strb	r1, [r4, #16]
 802837e:	f000 83d3 	beq.w	8028b28 <Argus_Cal_GetDefaultCalibration+0x1b50>
 8028382:	2148      	movs	r1, #72	@ 0x48
 8028384:	7461      	strb	r1, [r4, #17]
 8028386:	f7ff ba66 	b.w	8027856 <Argus_Cal_GetDefaultCalibration+0x87e>
 802838a:	2136      	movs	r1, #54	@ 0x36
 802838c:	2d01      	cmp	r5, #1
 802838e:	74e1      	strb	r1, [r4, #19]
 8028390:	f47f aa69 	bne.w	8027866 <Argus_Cal_GetDefaultCalibration+0x88e>
 8028394:	211f      	movs	r1, #31
 8028396:	e6e8      	b.n	802816a <Argus_Cal_GetDefaultCalibration+0x1192>
 8028398:	f241 2c59 	movw	ip, #4697	@ 0x1259
 802839c:	2d01      	cmp	r5, #1
 802839e:	f8a4 c274 	strh.w	ip, [r4, #628]	@ 0x274
 80283a2:	f47f a8c5 	bne.w	8027530 <Argus_Cal_GetDefaultCalibration+0x558>
 80283a6:	f640 7ce5 	movw	ip, #4069	@ 0xfe5
 80283aa:	2b05      	cmp	r3, #5
 80283ac:	f8a4 c274 	strh.w	ip, [r4, #628]	@ 0x274
 80283b0:	f47f a8be 	bne.w	8027530 <Argus_Cal_GetDefaultCalibration+0x558>
 80283b4:	f241 0cb9 	movw	ip, #4281	@ 0x10b9
 80283b8:	2b05      	cmp	r3, #5
 80283ba:	f8a4 c276 	strh.w	ip, [r4, #630]	@ 0x276
 80283be:	d010      	beq.n	80283e2 <Argus_Cal_GetDefaultCalibration+0x140a>
 80283c0:	2b04      	cmp	r3, #4
 80283c2:	f43f acac 	beq.w	8027d1e <Argus_Cal_GetDefaultCalibration+0xd46>
 80283c6:	2b03      	cmp	r3, #3
 80283c8:	f000 83bb 	beq.w	8028b42 <Argus_Cal_GetDefaultCalibration+0x1b6a>
 80283cc:	2a00      	cmp	r2, #0
 80283ce:	f000 83af 	beq.w	8028b30 <Argus_Cal_GetDefaultCalibration+0x1b58>
 80283d2:	f241 0c78 	movw	ip, #4216	@ 0x1078
 80283d6:	2b05      	cmp	r3, #5
 80283d8:	f8a4 c278 	strh.w	ip, [r4, #632]	@ 0x278
 80283dc:	f47f acab 	bne.w	8027d36 <Argus_Cal_GetDefaultCalibration+0xd5e>
 80283e0:	e5ec      	b.n	8027fbc <Argus_Cal_GetDefaultCalibration+0xfe4>
 80283e2:	2a00      	cmp	r2, #0
 80283e4:	f43f adfe 	beq.w	8027fe4 <Argus_Cal_GetDefaultCalibration+0x100c>
 80283e8:	f7ff bae8 	b.w	80279bc <Argus_Cal_GetDefaultCalibration+0x9e4>
 80283ec:	f241 2c8a 	movw	ip, #4746	@ 0x128a
 80283f0:	2d01      	cmp	r5, #1
 80283f2:	f8a4 c276 	strh.w	ip, [r4, #630]	@ 0x276
 80283f6:	f43f adca 	beq.w	8027f8e <Argus_Cal_GetDefaultCalibration+0xfb6>
 80283fa:	f241 2c7e 	movw	ip, #4734	@ 0x127e
 80283fe:	f8a4 c278 	strh.w	ip, [r4, #632]	@ 0x278
 8028402:	f241 2c7b 	movw	ip, #4731	@ 0x127b
 8028406:	f7ff b8a9 	b.w	802755c <Argus_Cal_GetDefaultCalibration+0x584>
 802840a:	212f      	movs	r1, #47	@ 0x2f
 802840c:	2d01      	cmp	r5, #1
 802840e:	7221      	strb	r1, [r4, #8]
 8028410:	f000 8358 	beq.w	8028ac4 <Argus_Cal_GetDefaultCalibration+0x1aec>
 8028414:	2172      	movs	r1, #114	@ 0x72
 8028416:	f7ff b9e2 	b.w	80277de <Argus_Cal_GetDefaultCalibration+0x806>
 802841a:	2122      	movs	r1, #34	@ 0x22
 802841c:	74e1      	strb	r1, [r4, #19]
 802841e:	e6a8      	b.n	8028172 <Argus_Cal_GetDefaultCalibration+0x119a>
 8028420:	21f4      	movs	r1, #244	@ 0xf4
 8028422:	7421      	strb	r1, [r4, #16]
 8028424:	e6c5      	b.n	80281b2 <Argus_Cal_GetDefaultCalibration+0x11da>
 8028426:	211d      	movs	r1, #29
 8028428:	2b04      	cmp	r3, #4
 802842a:	73e1      	strb	r1, [r4, #15]
 802842c:	f43f a93c 	beq.w	80276a8 <Argus_Cal_GetDefaultCalibration+0x6d0>
 8028430:	2b03      	cmp	r3, #3
 8028432:	f43f af25 	beq.w	8028280 <Argus_Cal_GetDefaultCalibration+0x12a8>
 8028436:	2a00      	cmp	r2, #0
 8028438:	d09e      	beq.n	8028378 <Argus_Cal_GetDefaultCalibration+0x13a0>
 802843a:	210e      	movs	r1, #14
 802843c:	7421      	strb	r1, [r4, #16]
 802843e:	e6b2      	b.n	80281a6 <Argus_Cal_GetDefaultCalibration+0x11ce>
 8028440:	211b      	movs	r1, #27
 8028442:	2b05      	cmp	r3, #5
 8028444:	7361      	strb	r1, [r4, #13]
 8028446:	f43e aecc 	beq.w	80271e2 <Argus_Cal_GetDefaultCalibration+0x20a>
 802844a:	2b04      	cmp	r3, #4
 802844c:	d112      	bne.n	8028474 <Argus_Cal_GetDefaultCalibration+0x149c>
 802844e:	2a00      	cmp	r2, #0
 8028450:	bf14      	ite	ne
 8028452:	f06f 0115 	mvnne.w	r1, #21
 8028456:	f06f 013e 	mvneq.w	r1, #62	@ 0x3e
 802845a:	73a1      	strb	r1, [r4, #14]
 802845c:	2118      	movs	r1, #24
 802845e:	73a1      	strb	r1, [r4, #14]
 8028460:	2b04      	cmp	r3, #4
 8028462:	f47f a9e6 	bne.w	8027832 <Argus_Cal_GetDefaultCalibration+0x85a>
 8028466:	f7ff b915 	b.w	8027694 <Argus_Cal_GetDefaultCalibration+0x6bc>
 802846a:	211b      	movs	r1, #27
 802846c:	2b05      	cmp	r3, #5
 802846e:	7361      	strb	r1, [r4, #13]
 8028470:	f43e aeb7 	beq.w	80271e2 <Argus_Cal_GetDefaultCalibration+0x20a>
 8028474:	2b03      	cmp	r3, #3
 8028476:	f000 8316 	beq.w	8028aa6 <Argus_Cal_GetDefaultCalibration+0x1ace>
 802847a:	f1c2 0119 	rsb	r1, r2, #25
 802847e:	73a1      	strb	r1, [r4, #14]
 8028480:	e7ee      	b.n	8028460 <Argus_Cal_GetDefaultCalibration+0x1488>
 8028482:	211d      	movs	r1, #29
 8028484:	7461      	strb	r1, [r4, #17]
 8028486:	e6a3      	b.n	80281d0 <Argus_Cal_GetDefaultCalibration+0x11f8>
 8028488:	f241 0cb9 	movw	ip, #4281	@ 0x10b9
 802848c:	f8a4 c276 	strh.w	ip, [r4, #630]	@ 0x276
 8028490:	e796      	b.n	80283c0 <Argus_Cal_GetDefaultCalibration+0x13e8>
 8028492:	f241 0ce6 	movw	ip, #4326	@ 0x10e6
 8028496:	f8a4 c274 	strh.w	ip, [r4, #628]	@ 0x274
 802849a:	f7ff b849 	b.w	8027530 <Argus_Cal_GetDefaultCalibration+0x558>
 802849e:	f240 6153 	movw	r1, #1619	@ 0x653
 80284a2:	e570      	b.n	8027f86 <Argus_Cal_GetDefaultCalibration+0xfae>
 80284a4:	f240 41c3 	movw	r1, #1219	@ 0x4c3
 80284a8:	e546      	b.n	8027f38 <Argus_Cal_GetDefaultCalibration+0xf60>
 80284aa:	2a00      	cmp	r2, #0
 80284ac:	f000 82f2 	beq.w	8028a94 <Argus_Cal_GetDefaultCalibration+0x1abc>
 80284b0:	f640 2196 	movw	r1, #2710	@ 0xa96
 80284b4:	2d01      	cmp	r5, #1
 80284b6:	f8a4 123e 	strh.w	r1, [r4, #574]	@ 0x23e
 80284ba:	f43f ad23 	beq.w	8027f04 <Argus_Cal_GetDefaultCalibration+0xf2c>
 80284be:	e4c7      	b.n	8027e50 <Argus_Cal_GetDefaultCalibration+0xe78>
 80284c0:	2a00      	cmp	r2, #0
 80284c2:	f000 82de 	beq.w	8028a82 <Argus_Cal_GetDefaultCalibration+0x1aaa>
 80284c6:	f240 317f 	movw	r1, #895	@ 0x37f
 80284ca:	2d01      	cmp	r5, #1
 80284cc:	f8a4 1230 	strh.w	r1, [r4, #560]	@ 0x230
 80284d0:	f43f ad25 	beq.w	8027f1e <Argus_Cal_GetDefaultCalibration+0xf46>
 80284d4:	e4a0      	b.n	8027e18 <Argus_Cal_GetDefaultCalibration+0xe40>
 80284d6:	2a00      	cmp	r2, #0
 80284d8:	f000 82ca 	beq.w	8028a70 <Argus_Cal_GetDefaultCalibration+0x1a98>
 80284dc:	f240 2172 	movw	r1, #626	@ 0x272
 80284e0:	2d01      	cmp	r5, #1
 80284e2:	f8a4 122c 	strh.w	r1, [r4, #556]	@ 0x22c
 80284e6:	f43f aa81 	beq.w	80279ec <Argus_Cal_GetDefaultCalibration+0xa14>
 80284ea:	e48d      	b.n	8027e08 <Argus_Cal_GetDefaultCalibration+0xe30>
 80284ec:	f241 3cf9 	movw	ip, #5113	@ 0x13f9
 80284f0:	f8a4 c27a 	strh.w	ip, [r4, #634]	@ 0x27a
 80284f4:	f7ff b834 	b.w	8027560 <Argus_Cal_GetDefaultCalibration+0x588>
 80284f8:	f240 6125 	movw	r1, #1573	@ 0x625
 80284fc:	e45a      	b.n	8027db4 <Argus_Cal_GetDefaultCalibration+0xddc>
 80284fe:	f240 41c3 	movw	r1, #1219	@ 0x4c3
 8028502:	e4c8      	b.n	8027e96 <Argus_Cal_GetDefaultCalibration+0xebe>
 8028504:	21ed      	movs	r1, #237	@ 0xed
 8028506:	2d01      	cmp	r5, #1
 8028508:	7561      	strb	r1, [r4, #21]
 802850a:	f43f aa1b 	beq.w	8027944 <Argus_Cal_GetDefaultCalibration+0x96c>
 802850e:	f06f 0149 	mvn.w	r1, #73	@ 0x49
 8028512:	f7ff b905 	b.w	8027720 <Argus_Cal_GetDefaultCalibration+0x748>
 8028516:	212a      	movs	r1, #42	@ 0x2a
 8028518:	2d01      	cmp	r5, #1
 802851a:	7261      	strb	r1, [r4, #9]
 802851c:	f43f aabd 	beq.w	8027a9a <Argus_Cal_GetDefaultCalibration+0xac2>
 8028520:	f06f 010d 	mvn.w	r1, #13
 8028524:	f7ff b897 	b.w	8027656 <Argus_Cal_GetDefaultCalibration+0x67e>
 8028528:	2a00      	cmp	r2, #0
 802852a:	f000 828c 	beq.w	8028a46 <Argus_Cal_GetDefaultCalibration+0x1a6e>
 802852e:	f640 717d 	movw	r1, #3965	@ 0xf7d
 8028532:	2d01      	cmp	r5, #1
 8028534:	f8a4 1236 	strh.w	r1, [r4, #566]	@ 0x236
 8028538:	f43f acad 	beq.w	8027e96 <Argus_Cal_GetDefaultCalibration+0xebe>
 802853c:	e458      	b.n	8027df0 <Argus_Cal_GetDefaultCalibration+0xe18>
 802853e:	2a00      	cmp	r2, #0
 8028540:	f000 8266 	beq.w	8028a10 <Argus_Cal_GetDefaultCalibration+0x1a38>
 8028544:	f640 113b 	movw	r1, #2363	@ 0x93b
 8028548:	2d01      	cmp	r5, #1
 802854a:	f8a4 1238 	strh.w	r1, [r4, #568]	@ 0x238
 802854e:	f43f acb2 	beq.w	8027eb6 <Argus_Cal_GetDefaultCalibration+0xede>
 8028552:	e451      	b.n	8027df8 <Argus_Cal_GetDefaultCalibration+0xe20>
 8028554:	21f8      	movs	r1, #248	@ 0xf8
 8028556:	2d01      	cmp	r5, #1
 8028558:	7361      	strb	r1, [r4, #13]
 802855a:	f43f af71 	beq.w	8028440 <Argus_Cal_GetDefaultCalibration+0x1468>
 802855e:	f06f 013e 	mvn.w	r1, #62	@ 0x3e
 8028562:	f7ff b896 	b.w	8027692 <Argus_Cal_GetDefaultCalibration+0x6ba>
 8028566:	f44f 7150 	mov.w	r1, #832	@ 0x340
 802856a:	e4f2      	b.n	8027f52 <Argus_Cal_GetDefaultCalibration+0xf7a>
 802856c:	f44f 7150 	mov.w	r1, #832	@ 0x340
 8028570:	e4ae      	b.n	8027ed0 <Argus_Cal_GetDefaultCalibration+0xef8>
 8028572:	f240 6125 	movw	r1, #1573	@ 0x625
 8028576:	e4b8      	b.n	8027eea <Argus_Cal_GetDefaultCalibration+0xf12>
 8028578:	f240 6153 	movw	r1, #1619	@ 0x653
 802857c:	e40d      	b.n	8027d9a <Argus_Cal_GetDefaultCalibration+0xdc2>
 802857e:	f240 41c3 	movw	r1, #1219	@ 0x4c3
 8028582:	e4bf      	b.n	8027f04 <Argus_Cal_GetDefaultCalibration+0xf2c>
 8028584:	2a00      	cmp	r2, #0
 8028586:	f000 81b9 	beq.w	80288fc <Argus_Cal_GetDefaultCalibration+0x1924>
 802858a:	f241 419c 	movw	r1, #5276	@ 0x149c
 802858e:	2d01      	cmp	r5, #1
 8028590:	f8a4 1246 	strh.w	r1, [r4, #582]	@ 0x246
 8028594:	f43f abf4 	beq.w	8027d80 <Argus_Cal_GetDefaultCalibration+0xda8>
 8028598:	e44a      	b.n	8027e30 <Argus_Cal_GetDefaultCalibration+0xe58>
 802859a:	2a00      	cmp	r2, #0
 802859c:	f000 81b7 	beq.w	802890e <Argus_Cal_GetDefaultCalibration+0x1936>
 80285a0:	f240 31fb 	movw	r1, #1019	@ 0x3fb
 80285a4:	2d01      	cmp	r5, #1
 80285a6:	f8a4 1240 	strh.w	r1, [r4, #576]	@ 0x240
 80285aa:	f43f abf6 	beq.w	8027d9a <Argus_Cal_GetDefaultCalibration+0xdc2>
 80285ae:	e453      	b.n	8027e58 <Argus_Cal_GetDefaultCalibration+0xe80>
 80285b0:	2a00      	cmp	r2, #0
 80285b2:	f000 81be 	beq.w	8028932 <Argus_Cal_GetDefaultCalibration+0x195a>
 80285b6:	f240 4171 	movw	r1, #1137	@ 0x471
 80285ba:	2d01      	cmp	r5, #1
 80285bc:	f8a4 123c 	strh.w	r1, [r4, #572]	@ 0x23c
 80285c0:	f43f ac86 	beq.w	8027ed0 <Argus_Cal_GetDefaultCalibration+0xef8>
 80285c4:	e440      	b.n	8027e48 <Argus_Cal_GetDefaultCalibration+0xe70>
 80285c6:	2a00      	cmp	r2, #0
 80285c8:	f000 81aa 	beq.w	8028920 <Argus_Cal_GetDefaultCalibration+0x1948>
 80285cc:	f640 6107 	movw	r1, #3591	@ 0xe07
 80285d0:	2d01      	cmp	r5, #1
 80285d2:	f8a4 123a 	strh.w	r1, [r4, #570]	@ 0x23a
 80285d6:	f43f abed 	beq.w	8027db4 <Argus_Cal_GetDefaultCalibration+0xddc>
 80285da:	e411      	b.n	8027e00 <Argus_Cal_GetDefaultCalibration+0xe28>
 80285dc:	2a00      	cmp	r2, #0
 80285de:	f000 81b1 	beq.w	8028944 <Argus_Cal_GetDefaultCalibration+0x196c>
 80285e2:	f640 51a8 	movw	r1, #3496	@ 0xda8
 80285e6:	2d01      	cmp	r5, #1
 80285e8:	f8a4 124a 	strh.w	r1, [r4, #586]	@ 0x24a
 80285ec:	f43f ac7d 	beq.w	8027eea <Argus_Cal_GetDefaultCalibration+0xf12>
 80285f0:	e426      	b.n	8027e40 <Argus_Cal_GetDefaultCalibration+0xe68>
 80285f2:	2a00      	cmp	r2, #0
 80285f4:	f000 8230 	beq.w	8028a58 <Argus_Cal_GetDefaultCalibration+0x1a80>
 80285f8:	f640 11ff 	movw	r1, #2559	@ 0x9ff
 80285fc:	2d01      	cmp	r5, #1
 80285fe:	f8a4 1242 	strh.w	r1, [r4, #578]	@ 0x242
 8028602:	f43f abe4 	beq.w	8027dce <Argus_Cal_GetDefaultCalibration+0xdf6>
 8028606:	f7ff bb4a 	b.w	8027c9e <Argus_Cal_GetDefaultCalibration+0xcc6>
 802860a:	f06f 09a3 	mvn.w	r9, #163	@ 0xa3
 802860e:	f06f 0ef5 	mvn.w	lr, #245	@ 0xf5
 8028612:	f240 5143 	movw	r1, #1347	@ 0x543
 8028616:	e42d      	b.n	8027e74 <Argus_Cal_GetDefaultCalibration+0xe9c>
 8028618:	3326471b 	.word	0x3326471b
 802861c:	460b8000 	.word	0x460b8000
 8028620:	ff5cff0a 	.word	0xff5cff0a
 8028624:	12ca130c 	.word	0x12ca130c
 8028628:	11651243 	.word	0x11651243
 802862c:	01e0b860 	.word	0x01e0b860
 8028630:	42433062 	.word	0x42433062
 8028634:	663e6c2d 	.word	0x663e6c2d
 8028638:	2a00      	cmp	r2, #0
 802863a:	f000 8110 	beq.w	802885e <Argus_Cal_GetDefaultCalibration+0x1886>
 802863e:	4bd5      	ldr	r3, [pc, #852]	@ (8028994 <Argus_Cal_GetDefaultCalibration+0x19bc>)
 8028640:	6023      	str	r3, [r4, #0]
 8028642:	f103 53d9 	add.w	r3, r3, #455081984	@ 0x1b200000
 8028646:	f503 13d7 	add.w	r3, r3, #1761280	@ 0x1ae000
 802864a:	f603 3318 	addw	r3, r3, #2840	@ 0xb18
 802864e:	4ad2      	ldr	r2, [pc, #840]	@ (8028998 <Argus_Cal_GetDefaultCalibration+0x19c0>)
 8028650:	60a3      	str	r3, [r4, #8]
 8028652:	4bd2      	ldr	r3, [pc, #840]	@ (802899c <Argus_Cal_GetDefaultCalibration+0x19c4>)
 8028654:	48d2      	ldr	r0, [pc, #840]	@ (80289a0 <Argus_Cal_GetDefaultCalibration+0x19c8>)
 8028656:	f8a4 e250 	strh.w	lr, [r4, #592]	@ 0x250
 802865a:	e9c4 2303 	strd	r2, r3, [r4, #12]
 802865e:	4bd1      	ldr	r3, [pc, #836]	@ (80289a4 <Argus_Cal_GetDefaultCalibration+0x19cc>)
 8028660:	6163      	str	r3, [r4, #20]
 8028662:	4bd1      	ldr	r3, [pc, #836]	@ (80289a8 <Argus_Cal_GetDefaultCalibration+0x19d0>)
 8028664:	f8c4 3274 	str.w	r3, [r4, #628]	@ 0x274
 8028668:	f5a3 0315 	sub.w	r3, r3, #9764864	@ 0x950000
 802866c:	3b1c      	subs	r3, #28
 802866e:	f8c4 3278 	str.w	r3, [r4, #632]	@ 0x278
 8028672:	4bce      	ldr	r3, [pc, #824]	@ (80289ac <Argus_Cal_GetDefaultCalibration+0x19d4>)
 8028674:	f8c4 322c 	str.w	r3, [r4, #556]	@ 0x22c
 8028678:	f503 136c 	add.w	r3, r3, #3866624	@ 0x3b0000
 802867c:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8028680:	f8c4 3230 	str.w	r3, [r4, #560]	@ 0x230
 8028684:	4bca      	ldr	r3, [pc, #808]	@ (80289b0 <Argus_Cal_GetDefaultCalibration+0x19d8>)
 8028686:	f8a4 e254 	strh.w	lr, [r4, #596]	@ 0x254
 802868a:	e9c4 0391 	strd	r0, r3, [r4, #580]	@ 0x244
 802868e:	4bc9      	ldr	r3, [pc, #804]	@ (80289b4 <Argus_Cal_GetDefaultCalibration+0x19dc>)
 8028690:	f8c4 3236 	str.w	r3, [r4, #566]	@ 0x236
 8028694:	f503 03d2 	add.w	r3, r3, #6881280	@ 0x690000
 8028698:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 802869c:	f8c4 323a 	str.w	r3, [r4, #570]	@ 0x23a
 80286a0:	f103 73cf 	add.w	r3, r3, #27131904	@ 0x19e0000
 80286a4:	330f      	adds	r3, #15
 80286a6:	f8c4 323e 	str.w	r3, [r4, #574]	@ 0x23e
 80286aa:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80286ae:	6063      	str	r3, [r4, #4]
 80286b0:	f243 3333 	movw	r3, #13107	@ 0x3333
 80286b4:	f8a4 309c 	strh.w	r3, [r4, #156]	@ 0x9c
 80286b8:	2361      	movs	r3, #97	@ 0x61
 80286ba:	f8a4 3234 	strh.w	r3, [r4, #564]	@ 0x234
 80286be:	f8a4 9252 	strh.w	r9, [r4, #594]	@ 0x252
 80286c2:	f8a4 9256 	strh.w	r9, [r4, #598]	@ 0x256
 80286c6:	f640 73f3 	movw	r3, #4083	@ 0xff3
 80286ca:	f7ff ba59 	b.w	8027b80 <Argus_Cal_GetDefaultCalibration+0xba8>
 80286ce:	f240 6153 	movw	r1, #1619	@ 0x653
 80286d2:	e424      	b.n	8027f1e <Argus_Cal_GetDefaultCalibration+0xf46>
 80286d4:	f240 6125 	movw	r1, #1573	@ 0x625
 80286d8:	e448      	b.n	8027f6c <Argus_Cal_GetDefaultCalibration+0xf94>
 80286da:	2a00      	cmp	r2, #0
 80286dc:	f000 8150 	beq.w	8028980 <Argus_Cal_GetDefaultCalibration+0x19a8>
 80286e0:	f44f 61d7 	mov.w	r1, #1720	@ 0x6b8
 80286e4:	2d01      	cmp	r5, #1
 80286e6:	f8a4 122e 	strh.w	r1, [r4, #558]	@ 0x22e
 80286ea:	f43f ac25 	beq.w	8027f38 <Argus_Cal_GetDefaultCalibration+0xf60>
 80286ee:	f7ff bb8f 	b.w	8027e10 <Argus_Cal_GetDefaultCalibration+0xe38>
 80286f2:	2a00      	cmp	r2, #0
 80286f4:	f000 8195 	beq.w	8028a22 <Argus_Cal_GetDefaultCalibration+0x1a4a>
 80286f8:	f640 217f 	movw	r1, #2687	@ 0xa7f
 80286fc:	2d01      	cmp	r5, #1
 80286fe:	f8a4 1244 	strh.w	r1, [r4, #580]	@ 0x244
 8028702:	f43f ac26 	beq.w	8027f52 <Argus_Cal_GetDefaultCalibration+0xf7a>
 8028706:	f7ff bb8f 	b.w	8027e28 <Argus_Cal_GetDefaultCalibration+0xe50>
 802870a:	2a00      	cmp	r2, #0
 802870c:	f000 8192 	beq.w	8028a34 <Argus_Cal_GetDefaultCalibration+0x1a5c>
 8028710:	f240 61ed 	movw	r1, #1773	@ 0x6ed
 8028714:	2d01      	cmp	r5, #1
 8028716:	f8a4 1232 	strh.w	r1, [r4, #562]	@ 0x232
 802871a:	f43f ac27 	beq.w	8027f6c <Argus_Cal_GetDefaultCalibration+0xf94>
 802871e:	f7ff bb7f 	b.w	8027e20 <Argus_Cal_GetDefaultCalibration+0xe48>
 8028722:	49a5      	ldr	r1, [pc, #660]	@ (80289b8 <Argus_Cal_GetDefaultCalibration+0x19e0>)
 8028724:	61a1      	str	r1, [r4, #24]
 8028726:	212c      	movs	r1, #44	@ 0x2c
 8028728:	75e1      	strb	r1, [r4, #23]
 802872a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 802872e:	8021      	strh	r1, [r4, #0]
 8028730:	1e19      	subs	r1, r3, #0
 8028732:	bf18      	it	ne
 8028734:	2101      	movne	r1, #1
 8028736:	f884 124c 	strb.w	r1, [r4, #588]	@ 0x24c
 802873a:	f7ff b8b8 	b.w	80278ae <Argus_Cal_GetDefaultCalibration+0x8d6>
 802873e:	f240 6125 	movw	r1, #1573	@ 0x625
 8028742:	f7ff bb44 	b.w	8027dce <Argus_Cal_GetDefaultCalibration+0xdf6>
 8028746:	f240 41c3 	movw	r1, #1219	@ 0x4c3
 802874a:	f7ff bb19 	b.w	8027d80 <Argus_Cal_GetDefaultCalibration+0xda8>
 802874e:	2a00      	cmp	r2, #0
 8028750:	f000 80cb 	beq.w	80288ea <Argus_Cal_GetDefaultCalibration+0x1912>
 8028754:	f44f 612a 	mov.w	r1, #2720	@ 0xaa0
 8028758:	2d01      	cmp	r5, #1
 802875a:	f8a4 1248 	strh.w	r1, [r4, #584]	@ 0x248
 802875e:	f43f ac12 	beq.w	8027f86 <Argus_Cal_GetDefaultCalibration+0xfae>
 8028762:	f7ff bb69 	b.w	8027e38 <Argus_Cal_GetDefaultCalibration+0xe60>
 8028766:	f240 6153 	movw	r1, #1619	@ 0x653
 802876a:	f7ff bba4 	b.w	8027eb6 <Argus_Cal_GetDefaultCalibration+0xede>
 802876e:	210d      	movs	r1, #13
 8028770:	75a1      	strb	r1, [r4, #22]
 8028772:	2a00      	cmp	r2, #0
 8028774:	f43f adfc 	beq.w	8028370 <Argus_Cal_GetDefaultCalibration+0x1398>
 8028778:	f7fe bfdd 	b.w	8027736 <Argus_Cal_GetDefaultCalibration+0x75e>
 802877c:	f240 5143 	movw	r1, #1347	@ 0x543
 8028780:	f7ff b934 	b.w	80279ec <Argus_Cal_GetDefaultCalibration+0xa14>
 8028784:	f102 0121 	add.w	r1, r2, #33	@ 0x21
 8028788:	75e1      	strb	r1, [r4, #23]
 802878a:	f7ff b883 	b.w	8027894 <Argus_Cal_GetDefaultCalibration+0x8bc>
 802878e:	2a00      	cmp	r2, #0
 8028790:	bf14      	ite	ne
 8028792:	210c      	movne	r1, #12
 8028794:	f06f 010d 	mvneq.w	r1, #13
 8028798:	2d01      	cmp	r5, #1
 802879a:	72a1      	strb	r1, [r4, #10]
 802879c:	f47e af5c 	bne.w	8027658 <Argus_Cal_GetDefaultCalibration+0x680>
 80287a0:	212e      	movs	r1, #46	@ 0x2e
 80287a2:	72a1      	strb	r1, [r4, #10]
 80287a4:	e523      	b.n	80281ee <Argus_Cal_GetDefaultCalibration+0x1216>
 80287a6:	2a00      	cmp	r2, #0
 80287a8:	bf14      	ite	ne
 80287aa:	f06f 0130 	mvnne.w	r1, #48	@ 0x30
 80287ae:	f06f 0149 	mvneq.w	r1, #73	@ 0x49
 80287b2:	75a1      	strb	r1, [r4, #22]
 80287b4:	210d      	movs	r1, #13
 80287b6:	75a1      	strb	r1, [r4, #22]
 80287b8:	f7ff b85e 	b.w	8027878 <Argus_Cal_GetDefaultCalibration+0x8a0>
 80287bc:	f641 2c0a 	movw	ip, #6666	@ 0x1a0a
 80287c0:	f7ff bab4 	b.w	8027d2c <Argus_Cal_GetDefaultCalibration+0xd54>
 80287c4:	2136      	movs	r1, #54	@ 0x36
 80287c6:	2d01      	cmp	r5, #1
 80287c8:	7561      	strb	r1, [r4, #21]
 80287ca:	f43f a8bb 	beq.w	8027944 <Argus_Cal_GetDefaultCalibration+0x96c>
 80287ce:	f06f 0103 	mvn.w	r1, #3
 80287d2:	e538      	b.n	8028246 <Argus_Cal_GetDefaultCalibration+0x126e>
 80287d4:	f644 42cd 	movw	r2, #19661	@ 0x4ccd
 80287d8:	2b05      	cmp	r3, #5
 80287da:	f8a4 209c 	strh.w	r2, [r4, #156]	@ 0x9c
 80287de:	d126      	bne.n	802882e <Argus_Cal_GetDefaultCalibration+0x1856>
 80287e0:	4b76      	ldr	r3, [pc, #472]	@ (80289bc <Argus_Cal_GetDefaultCalibration+0x19e4>)
 80287e2:	f8c4 3274 	str.w	r3, [r4, #628]	@ 0x274
 80287e6:	f46f 7298 	mvn.w	r2, #304	@ 0x130
 80287ea:	f1a3 73a4 	sub.w	r3, r3, #21495808	@ 0x1480000
 80287ee:	4413      	add	r3, r2
 80287f0:	f8c4 3278 	str.w	r3, [r4, #632]	@ 0x278
 80287f4:	4b72      	ldr	r3, [pc, #456]	@ (80289c0 <Argus_Cal_GetDefaultCalibration+0x19e8>)
 80287f6:	f8c4 3244 	str.w	r3, [r4, #580]	@ 0x244
 80287fa:	f503 033a 	add.w	r3, r3, #12189696	@ 0xba0000
 80287fe:	33cb      	adds	r3, #203	@ 0xcb
 8028800:	f8df e1f8 	ldr.w	lr, [pc, #504]	@ 80289fc <Argus_Cal_GetDefaultCalibration+0x1a24>
 8028804:	f8c4 3248 	str.w	r3, [r4, #584]	@ 0x248
 8028808:	4b6e      	ldr	r3, [pc, #440]	@ (80289c4 <Argus_Cal_GetDefaultCalibration+0x19ec>)
 802880a:	f8df 91f4 	ldr.w	r9, [pc, #500]	@ 8028a00 <Argus_Cal_GetDefaultCalibration+0x1a28>
 802880e:	e9c4 e38b 	strd	lr, r3, [r4, #556]	@ 0x22c
 8028812:	4b6d      	ldr	r3, [pc, #436]	@ (80289c8 <Argus_Cal_GetDefaultCalibration+0x19f0>)
 8028814:	e9c4 938d 	strd	r9, r3, [r4, #564]	@ 0x234
 8028818:	4b6c      	ldr	r3, [pc, #432]	@ (80289cc <Argus_Cal_GetDefaultCalibration+0x19f4>)
 802881a:	f8c4 323c 	str.w	r3, [r4, #572]	@ 0x23c
 802881e:	f240 13b7 	movw	r3, #439	@ 0x1b7
 8028822:	f8a4 3240 	strh.w	r3, [r4, #576]	@ 0x240
 8028826:	f240 73ec 	movw	r3, #2028	@ 0x7ec
 802882a:	f7ff b9a9 	b.w	8027b80 <Argus_Cal_GetDefaultCalibration+0xba8>
 802882e:	4b68      	ldr	r3, [pc, #416]	@ (80289d0 <Argus_Cal_GetDefaultCalibration+0x19f8>)
 8028830:	f8c4 3274 	str.w	r3, [r4, #628]	@ 0x274
 8028834:	f5a3 236f 	sub.w	r3, r3, #978944	@ 0xef000
 8028838:	f6a3 73db 	subw	r3, r3, #4059	@ 0xfdb
 802883c:	f8c4 3278 	str.w	r3, [r4, #632]	@ 0x278
 8028840:	e7d8      	b.n	80287f4 <Argus_Cal_GetDefaultCalibration+0x181c>
 8028842:	2133      	movs	r1, #51	@ 0x33
 8028844:	2d01      	cmp	r5, #1
 8028846:	7361      	strb	r1, [r4, #13]
 8028848:	f43f adfa 	beq.w	8028440 <Argus_Cal_GetDefaultCalibration+0x1468>
 802884c:	2111      	movs	r1, #17
 802884e:	e50e      	b.n	802826e <Argus_Cal_GetDefaultCalibration+0x1296>
 8028850:	215e      	movs	r1, #94	@ 0x5e
 8028852:	2d01      	cmp	r5, #1
 8028854:	7261      	strb	r1, [r4, #9]
 8028856:	f43f a920 	beq.w	8027a9a <Argus_Cal_GetDefaultCalibration+0xac2>
 802885a:	212a      	movs	r1, #42	@ 0x2a
 802885c:	e544      	b.n	80282e8 <Argus_Cal_GetDefaultCalibration+0x1310>
 802885e:	4b5d      	ldr	r3, [pc, #372]	@ (80289d4 <Argus_Cal_GetDefaultCalibration+0x19fc>)
 8028860:	f8a4 e250 	strh.w	lr, [r4, #592]	@ 0x250
 8028864:	f8a4 e254 	strh.w	lr, [r4, #596]	@ 0x254
 8028868:	f8df e198 	ldr.w	lr, [pc, #408]	@ 8028a04 <Argus_Cal_GetDefaultCalibration+0x1a2c>
 802886c:	f8a4 9252 	strh.w	r9, [r4, #594]	@ 0x252
 8028870:	e9c4 e300 	strd	lr, r3, [r4]
 8028874:	f1a3 43d1 	sub.w	r3, r3, #1753219072	@ 0x68800000
 8028878:	f5a3 33b5 	sub.w	r3, r3, #92672	@ 0x16a00
 802887c:	3bda      	subs	r3, #218	@ 0xda
 802887e:	60a3      	str	r3, [r4, #8]
 8028880:	4b55      	ldr	r3, [pc, #340]	@ (80289d8 <Argus_Cal_GetDefaultCalibration+0x1a00>)
 8028882:	60e3      	str	r3, [r4, #12]
 8028884:	f103 2306 	add.w	r3, r3, #100664832	@ 0x6000600
 8028888:	f503 0376 	add.w	r3, r3, #16121856	@ 0xf60000
 802888c:	33fa      	adds	r3, #250	@ 0xfa
 802888e:	6123      	str	r3, [r4, #16]
 8028890:	f1a3 7382 	sub.w	r3, r3, #17039360	@ 0x1040000
 8028894:	3b01      	subs	r3, #1
 8028896:	6163      	str	r3, [r4, #20]
 8028898:	4b50      	ldr	r3, [pc, #320]	@ (80289dc <Argus_Cal_GetDefaultCalibration+0x1a04>)
 802889a:	f8c4 3274 	str.w	r3, [r4, #628]	@ 0x274
 802889e:	f5a3 03d2 	sub.w	r3, r3, #6881280	@ 0x690000
 80288a2:	3b43      	subs	r3, #67	@ 0x43
 80288a4:	f8a4 9256 	strh.w	r9, [r4, #598]	@ 0x256
 80288a8:	f8c4 3278 	str.w	r3, [r4, #632]	@ 0x278
 80288ac:	f8df 9158 	ldr.w	r9, [pc, #344]	@ 8028a08 <Argus_Cal_GetDefaultCalibration+0x1a30>
 80288b0:	4b4b      	ldr	r3, [pc, #300]	@ (80289e0 <Argus_Cal_GetDefaultCalibration+0x1a08>)
 80288b2:	f8df a158 	ldr.w	sl, [pc, #344]	@ 8028a0c <Argus_Cal_GetDefaultCalibration+0x1a34>
 80288b6:	e9c4 938b 	strd	r9, r3, [r4, #556]	@ 0x22c
 80288ba:	4b4a      	ldr	r3, [pc, #296]	@ (80289e4 <Argus_Cal_GetDefaultCalibration+0x1a0c>)
 80288bc:	e9c4 a391 	strd	sl, r3, [r4, #580]	@ 0x244
 80288c0:	4b49      	ldr	r3, [pc, #292]	@ (80289e8 <Argus_Cal_GetDefaultCalibration+0x1a10>)
 80288c2:	f8c4 3236 	str.w	r3, [r4, #566]	@ 0x236
 80288c6:	4b49      	ldr	r3, [pc, #292]	@ (80289ec <Argus_Cal_GetDefaultCalibration+0x1a14>)
 80288c8:	f8c4 323a 	str.w	r3, [r4, #570]	@ 0x23a
 80288cc:	4b48      	ldr	r3, [pc, #288]	@ (80289f0 <Argus_Cal_GetDefaultCalibration+0x1a18>)
 80288ce:	f8c4 323e 	str.w	r3, [r4, #574]	@ 0x23e
 80288d2:	f246 6366 	movw	r3, #26214	@ 0x6666
 80288d6:	f8a4 309c 	strh.w	r3, [r4, #156]	@ 0x9c
 80288da:	f64f 63fc 	movw	r3, #65276	@ 0xfefc
 80288de:	f8a4 3234 	strh.w	r3, [r4, #564]	@ 0x234
 80288e2:	f240 63f6 	movw	r3, #1782	@ 0x6f6
 80288e6:	f7ff b94b 	b.w	8027b80 <Argus_Cal_GetDefaultCalibration+0xba8>
 80288ea:	f640 212d 	movw	r1, #2605	@ 0xa2d
 80288ee:	2d01      	cmp	r5, #1
 80288f0:	f8a4 1248 	strh.w	r1, [r4, #584]	@ 0x248
 80288f4:	f43f ab47 	beq.w	8027f86 <Argus_Cal_GetDefaultCalibration+0xfae>
 80288f8:	f7ff bbb9 	b.w	802806e <Argus_Cal_GetDefaultCalibration+0x1096>
 80288fc:	f640 3154 	movw	r1, #2900	@ 0xb54
 8028900:	2d01      	cmp	r5, #1
 8028902:	f8a4 1246 	strh.w	r1, [r4, #582]	@ 0x246
 8028906:	f43f aa3b 	beq.w	8027d80 <Argus_Cal_GetDefaultCalibration+0xda8>
 802890a:	f7ff bbac 	b.w	8028066 <Argus_Cal_GetDefaultCalibration+0x108e>
 802890e:	f240 51a5 	movw	r1, #1445	@ 0x5a5
 8028912:	2d01      	cmp	r5, #1
 8028914:	f8a4 1240 	strh.w	r1, [r4, #576]	@ 0x240
 8028918:	f43f aa3f 	beq.w	8027d9a <Argus_Cal_GetDefaultCalibration+0xdc2>
 802891c:	f7ff bbb7 	b.w	802808e <Argus_Cal_GetDefaultCalibration+0x10b6>
 8028920:	f240 61fd 	movw	r1, #1789	@ 0x6fd
 8028924:	2d01      	cmp	r5, #1
 8028926:	f8a4 123a 	strh.w	r1, [r4, #570]	@ 0x23a
 802892a:	f43f aa43 	beq.w	8027db4 <Argus_Cal_GetDefaultCalibration+0xddc>
 802892e:	f7ff bb82 	b.w	8028036 <Argus_Cal_GetDefaultCalibration+0x105e>
 8028932:	f240 4119 	movw	r1, #1049	@ 0x419
 8028936:	2d01      	cmp	r5, #1
 8028938:	f8a4 123c 	strh.w	r1, [r4, #572]	@ 0x23c
 802893c:	f43f aac8 	beq.w	8027ed0 <Argus_Cal_GetDefaultCalibration+0xef8>
 8028940:	f7ff bb9d 	b.w	802807e <Argus_Cal_GetDefaultCalibration+0x10a6>
 8028944:	f640 416e 	movw	r1, #3182	@ 0xc6e
 8028948:	2d01      	cmp	r5, #1
 802894a:	f8a4 124a 	strh.w	r1, [r4, #586]	@ 0x24a
 802894e:	f43f aacc 	beq.w	8027eea <Argus_Cal_GetDefaultCalibration+0xf12>
 8028952:	f7ff bb90 	b.w	8028076 <Argus_Cal_GetDefaultCalibration+0x109e>
 8028956:	4927      	ldr	r1, [pc, #156]	@ (80289f4 <Argus_Cal_GetDefaultCalibration+0x1a1c>)
 8028958:	4827      	ldr	r0, [pc, #156]	@ (80289f8 <Argus_Cal_GetDefaultCalibration+0x1a20>)
 802895a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 802895e:	f501 0176 	add.w	r1, r1, #16121856	@ 0xf60000
 8028962:	f501 417b 	add.w	r1, r1, #64256	@ 0xfb00
 8028966:	31f9      	adds	r1, #249	@ 0xf9
 8028968:	6121      	str	r1, [r4, #16]
 802896a:	f244 4175 	movw	r1, #17525	@ 0x4475
 802896e:	8061      	strh	r1, [r4, #2]
 8028970:	f644 6105 	movw	r1, #19973	@ 0x4e05
 8028974:	82a1      	strh	r1, [r4, #20]
 8028976:	2118      	movs	r1, #24
 8028978:	75a1      	strb	r1, [r4, #22]
 802897a:	211d      	movs	r1, #29
 802897c:	f7ff b8b7 	b.w	8027aee <Argus_Cal_GetDefaultCalibration+0xb16>
 8028980:	f240 1193 	movw	r1, #403	@ 0x193
 8028984:	2d01      	cmp	r5, #1
 8028986:	f8a4 122e 	strh.w	r1, [r4, #558]	@ 0x22e
 802898a:	f43f aad5 	beq.w	8027f38 <Argus_Cal_GetDefaultCalibration+0xf60>
 802898e:	f7ff bb5a 	b.w	8028046 <Argus_Cal_GetDefaultCalibration+0x106e>
 8028992:	bf00      	nop
 8028994:	44fa8000 	.word	0x44fa8000
 8028998:	32204308 	.word	0x32204308
 802899c:	30114200 	.word	0x30114200
 80289a0:	0c600178 	.word	0x0c600178
 80289a4:	2f1044fd 	.word	0x2f1044fd
 80289a8:	0f970f79 	.word	0x0f970f79
 80289ac:	09300652 	.word	0x09300652
 80289b0:	0c0f05c9 	.word	0x0c0f05c9
 80289b4:	0432096e 	.word	0x0432096e
 80289b8:	0205711a 	.word	0x0205711a
 80289bc:	077e07ff 	.word	0x077e07ff
 80289c0:	0382ff91 	.word	0x0382ff91
 80289c4:	090d017c 	.word	0x090d017c
 80289c8:	018c00e9 	.word	0x018c00e9
 80289cc:	09db01aa 	.word	0x09db01aa
 80289d0:	128a1259 	.word	0x128a1259
 80289d4:	d5c3e000 	.word	0xd5c3e000
 80289d8:	3d2d5712 	.word	0x3d2d5712
 80289dc:	13db13b7 	.word	0x13db13b7
 80289e0:	065bff1b 	.word	0x065bff1b
 80289e4:	02faff92 	.word	0x02faff92
 80289e8:	ffac009c 	.word	0xffac009c
 80289ec:	00120129 	.word	0x00120129
 80289f0:	ffd60891 	.word	0xffd60891
 80289f4:	1e205508 	.word	0x1e205508
 80289f8:	533c900d 	.word	0x533c900d
 80289fc:	059ffcea 	.word	0x059ffcea
 8028a00:	ffaefe60 	.word	0xffaefe60
 8028a04:	447e8148 	.word	0x447e8148
 8028a08:	06fcfdb4 	.word	0x06fcfdb4
 8028a0c:	025100be 	.word	0x025100be
 8028a10:	f240 6139 	movw	r1, #1593	@ 0x639
 8028a14:	2d01      	cmp	r5, #1
 8028a16:	f8a4 1238 	strh.w	r1, [r4, #568]	@ 0x238
 8028a1a:	f43f aa4c 	beq.w	8027eb6 <Argus_Cal_GetDefaultCalibration+0xede>
 8028a1e:	f7ff bb06 	b.w	802802e <Argus_Cal_GetDefaultCalibration+0x1056>
 8028a22:	f240 713b 	movw	r1, #1851	@ 0x73b
 8028a26:	2d01      	cmp	r5, #1
 8028a28:	f8a4 1244 	strh.w	r1, [r4, #580]	@ 0x244
 8028a2c:	f43f aa91 	beq.w	8027f52 <Argus_Cal_GetDefaultCalibration+0xf7a>
 8028a30:	f7ff bb15 	b.w	802805e <Argus_Cal_GetDefaultCalibration+0x1086>
 8028a34:	f240 414a 	movw	r1, #1098	@ 0x44a
 8028a38:	2d01      	cmp	r5, #1
 8028a3a:	f8a4 1232 	strh.w	r1, [r4, #562]	@ 0x232
 8028a3e:	f43f aa95 	beq.w	8027f6c <Argus_Cal_GetDefaultCalibration+0xf94>
 8028a42:	f7ff bb08 	b.w	8028056 <Argus_Cal_GetDefaultCalibration+0x107e>
 8028a46:	f640 112a 	movw	r1, #2346	@ 0x92a
 8028a4a:	2d01      	cmp	r5, #1
 8028a4c:	f8a4 1236 	strh.w	r1, [r4, #566]	@ 0x236
 8028a50:	f43f aa21 	beq.w	8027e96 <Argus_Cal_GetDefaultCalibration+0xebe>
 8028a54:	f7ff bae7 	b.w	8028026 <Argus_Cal_GetDefaultCalibration+0x104e>
 8028a58:	f240 3129 	movw	r1, #809	@ 0x329
 8028a5c:	2d01      	cmp	r5, #1
 8028a5e:	f8a4 1242 	strh.w	r1, [r4, #578]	@ 0x242
 8028a62:	bf08      	it	eq
 8028a64:	f240 3126 	movweq	r1, #806	@ 0x326
 8028a68:	f43f a9b1 	beq.w	8027dce <Argus_Cal_GetDefaultCalibration+0xdf6>
 8028a6c:	f7ff bb13 	b.w	8028096 <Argus_Cal_GetDefaultCalibration+0x10be>
 8028a70:	f240 4161 	movw	r1, #1121	@ 0x461
 8028a74:	2d01      	cmp	r5, #1
 8028a76:	f8a4 122c 	strh.w	r1, [r4, #556]	@ 0x22c
 8028a7a:	f43e afb7 	beq.w	80279ec <Argus_Cal_GetDefaultCalibration+0xa14>
 8028a7e:	f7ff bade 	b.w	802803e <Argus_Cal_GetDefaultCalibration+0x1066>
 8028a82:	f240 7117 	movw	r1, #1815	@ 0x717
 8028a86:	2d01      	cmp	r5, #1
 8028a88:	f8a4 1230 	strh.w	r1, [r4, #560]	@ 0x230
 8028a8c:	f43f aa47 	beq.w	8027f1e <Argus_Cal_GetDefaultCalibration+0xf46>
 8028a90:	f7ff badd 	b.w	802804e <Argus_Cal_GetDefaultCalibration+0x1076>
 8028a94:	f240 2127 	movw	r1, #551	@ 0x227
 8028a98:	2d01      	cmp	r5, #1
 8028a9a:	f8a4 123e 	strh.w	r1, [r4, #574]	@ 0x23e
 8028a9e:	f43f aa31 	beq.w	8027f04 <Argus_Cal_GetDefaultCalibration+0xf2c>
 8028aa2:	f7ff baf0 	b.w	8028086 <Argus_Cal_GetDefaultCalibration+0x10ae>
 8028aa6:	2a00      	cmp	r2, #0
 8028aa8:	bf14      	ite	ne
 8028aaa:	2114      	movne	r1, #20
 8028aac:	2111      	moveq	r1, #17
 8028aae:	73a1      	strb	r1, [r4, #14]
 8028ab0:	e4d4      	b.n	802845c <Argus_Cal_GetDefaultCalibration+0x1484>
 8028ab2:	2a00      	cmp	r2, #0
 8028ab4:	bf14      	ite	ne
 8028ab6:	212c      	movne	r1, #44	@ 0x2c
 8028ab8:	212a      	moveq	r1, #42	@ 0x2a
 8028aba:	2d01      	cmp	r5, #1
 8028abc:	72a1      	strb	r1, [r4, #10]
 8028abe:	f43f ae6f 	beq.w	80287a0 <Argus_Cal_GetDefaultCalibration+0x17c8>
 8028ac2:	e412      	b.n	80282ea <Argus_Cal_GetDefaultCalibration+0x1312>
 8028ac4:	210f      	movs	r1, #15
 8028ac6:	7221      	strb	r1, [r4, #8]
 8028ac8:	f7ff bafc 	b.w	80280c4 <Argus_Cal_GetDefaultCalibration+0x10ec>
 8028acc:	1f51      	subs	r1, r2, #5
 8028ace:	2d01      	cmp	r5, #1
 8028ad0:	7221      	strb	r1, [r4, #8]
 8028ad2:	f43f aaf5 	beq.w	80280c0 <Argus_Cal_GetDefaultCalibration+0x10e8>
 8028ad6:	f7ff bbfe 	b.w	80282d6 <Argus_Cal_GetDefaultCalibration+0x12fe>
 8028ada:	f644 01bb 	movw	r1, #18619	@ 0x48bb
 8028ade:	f7fe bb55 	b.w	802718c <Argus_Cal_GetDefaultCalibration+0x1b4>
 8028ae2:	2a00      	cmp	r2, #0
 8028ae4:	bf14      	ite	ne
 8028ae6:	2100      	movne	r1, #0
 8028ae8:	f06f 0103 	mvneq.w	r1, #3
 8028aec:	75a1      	strb	r1, [r4, #22]
 8028aee:	e661      	b.n	80287b4 <Argus_Cal_GetDefaultCalibration+0x17dc>
 8028af0:	2148      	movs	r1, #72	@ 0x48
 8028af2:	7461      	strb	r1, [r4, #17]
 8028af4:	211b      	movs	r1, #27
 8028af6:	f7ff bb67 	b.w	80281c8 <Argus_Cal_GetDefaultCalibration+0x11f0>
 8028afa:	f241 0ce6 	movw	ip, #4326	@ 0x10e6
 8028afe:	2b05      	cmp	r3, #5
 8028b00:	f8a4 c274 	strh.w	ip, [r4, #628]	@ 0x274
 8028b04:	f47e ad14 	bne.w	8027530 <Argus_Cal_GetDefaultCalibration+0x558>
 8028b08:	e454      	b.n	80283b4 <Argus_Cal_GetDefaultCalibration+0x13dc>
 8028b0a:	2b05      	cmp	r3, #5
 8028b0c:	7325      	strb	r5, [r4, #12]
 8028b0e:	f47e ae7f 	bne.w	8027810 <Argus_Cal_GetDefaultCalibration+0x838>
 8028b12:	f7ff bb8b 	b.w	802822c <Argus_Cal_GetDefaultCalibration+0x1254>
 8028b16:	f06f 0938 	mvn.w	r9, #56	@ 0x38
 8028b1a:	f06f 0ecc 	mvn.w	lr, #204	@ 0xcc
 8028b1e:	f7ff b9a7 	b.w	8027e70 <Argus_Cal_GetDefaultCalibration+0xe98>
 8028b22:	2143      	movs	r1, #67	@ 0x43
 8028b24:	f7ff bb6e 	b.w	8028204 <Argus_Cal_GetDefaultCalibration+0x122c>
 8028b28:	f06f 0106 	mvn.w	r1, #6
 8028b2c:	f7ff bb3d 	b.w	80281aa <Argus_Cal_GetDefaultCalibration+0x11d2>
 8028b30:	f241 0c1b 	movw	ip, #4123	@ 0x101b
 8028b34:	2b05      	cmp	r3, #5
 8028b36:	f8a4 c278 	strh.w	ip, [r4, #632]	@ 0x278
 8028b3a:	f47f a8fc 	bne.w	8027d36 <Argus_Cal_GetDefaultCalibration+0xd5e>
 8028b3e:	f7ff ba3d 	b.w	8027fbc <Argus_Cal_GetDefaultCalibration+0xfe4>
 8028b42:	2a00      	cmp	r2, #0
 8028b44:	f43f ae3a 	beq.w	80287bc <Argus_Cal_GetDefaultCalibration+0x17e4>
 8028b48:	f241 0c78 	movw	ip, #4216	@ 0x1078
 8028b4c:	f8a4 c278 	strh.w	ip, [r4, #632]	@ 0x278
 8028b50:	f7ff b879 	b.w	8027c46 <Argus_Cal_GetDefaultCalibration+0xc6e>
 8028b54:	f241 0c85 	movw	ip, #4229	@ 0x1085
 8028b58:	f8a4 c27a 	strh.w	ip, [r4, #634]	@ 0x27a
 8028b5c:	f7fe bd00 	b.w	8027560 <Argus_Cal_GetDefaultCalibration+0x588>

08028b60 <Argus_Cal_GetCurrentDefaultCalibration>:
 8028b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028b62:	4604      	mov	r4, r0
 8028b64:	b083      	sub	sp, #12
 8028b66:	f8d0 04c0 	ldr.w	r0, [r0, #1216]	@ 0x4c0
 8028b6a:	460f      	mov	r7, r1
 8028b6c:	4616      	mov	r6, r2
 8028b6e:	f7f9 f8e7 	bl	8021d40 <Argus_Dev_GetChipVersion>
 8028b72:	b198      	cbz	r0, 8028b9c <Argus_Cal_GetCurrentDefaultCalibration+0x3c>
 8028b74:	4605      	mov	r5, r0
 8028b76:	f8d4 04c0 	ldr.w	r0, [r4, #1216]	@ 0x4c0
 8028b7a:	f7f9 f8e3 	bl	8021d44 <Argus_Dev_GetLaserType>
 8028b7e:	4603      	mov	r3, r0
 8028b80:	f8d4 04c0 	ldr.w	r0, [r4, #1216]	@ 0x4c0
 8028b84:	461c      	mov	r4, r3
 8028b86:	f7f9 f8d7 	bl	8021d38 <Argus_Dev_GetModule>
 8028b8a:	9400      	str	r4, [sp, #0]
 8028b8c:	4602      	mov	r2, r0
 8028b8e:	462b      	mov	r3, r5
 8028b90:	4631      	mov	r1, r6
 8028b92:	4638      	mov	r0, r7
 8028b94:	f7fe fa20 	bl	8026fd8 <Argus_Cal_GetDefaultCalibration>
 8028b98:	b003      	add	sp, #12
 8028b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028b9c:	f06f 0064 	mvn.w	r0, #100	@ 0x64
 8028ba0:	e7fa      	b.n	8028b98 <Argus_Cal_GetCurrentDefaultCalibration+0x38>
 8028ba2:	bf00      	nop

08028ba4 <Argus_Cal_ReadCalibrationFromNVM>:
 8028ba4:	2300      	movs	r3, #0
 8028ba6:	f8c2 3288 	str.w	r3, [r2, #648]	@ 0x288
 8028baa:	b338      	cbz	r0, 8028bfc <Argus_Cal_ReadCalibrationFromNVM+0x58>
 8028bac:	b331      	cbz	r1, 8028bfc <Argus_Cal_ReadCalibrationFromNVM+0x58>
 8028bae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8028bb2:	f5ad 7d41 	sub.w	sp, sp, #772	@ 0x304
 8028bb6:	ea41 6480 	orr.w	r4, r1, r0, lsl #26
 8028bba:	4615      	mov	r5, r2
 8028bbc:	4619      	mov	r1, r3
 8028bbe:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8028bc2:	a801      	add	r0, sp, #4
 8028bc4:	9300      	str	r3, [sp, #0]
 8028bc6:	f002 f9f0 	bl	802afaa <memset>
 8028bca:	466a      	mov	r2, sp
 8028bcc:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8028bd0:	4620      	mov	r0, r4
 8028bd2:	f7dd ff1c 	bl	8006a0e <NVM_ReadBlock>
 8028bd6:	f110 0f09 	cmn.w	r0, #9
 8028bda:	d00a      	beq.n	8028bf2 <Argus_Cal_ReadCalibrationFromNVM+0x4e>
 8028bdc:	2800      	cmp	r0, #0
 8028bde:	db54      	blt.n	8028c8a <Argus_Cal_ReadCalibrationFromNVM+0xe6>
 8028be0:	9b00      	ldr	r3, [sp, #0]
 8028be2:	ba1e      	rev	r6, r3
 8028be4:	f7ec fd82 	bl	80156ec <Argus_GetAPIVersion>
 8028be8:	42b0      	cmp	r0, r6
 8028bea:	d009      	beq.n	8028c00 <Argus_Cal_ReadCalibrationFromNVM+0x5c>
 8028bec:	2600      	movs	r6, #0
 8028bee:	f8c5 6288 	str.w	r6, [r5, #648]	@ 0x288
 8028bf2:	2000      	movs	r0, #0
 8028bf4:	f50d 7d41 	add.w	sp, sp, #772	@ 0x304
 8028bf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028bfc:	2000      	movs	r0, #0
 8028bfe:	4770      	bx	lr
 8028c00:	9b01      	ldr	r3, [sp, #4]
 8028c02:	ba1b      	rev	r3, r3
 8028c04:	429c      	cmp	r4, r3
 8028c06:	d1f1      	bne.n	8028bec <Argus_Cal_ReadCalibrationFromNVM+0x48>
 8028c08:	9e02      	ldr	r6, [sp, #8]
 8028c0a:	f026 4380 	bic.w	r3, r6, #1073741824	@ 0x40000000
 8028c0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8028c12:	f006 4980 	and.w	r9, r6, #1073741824	@ 0x40000000
 8028c16:	f406 2880 	and.w	r8, r6, #262144	@ 0x40000
 8028c1a:	b1c3      	cbz	r3, 8028c4e <Argus_Cal_ReadCalibrationFromNVM+0xaa>
 8028c1c:	f10d 0e0c 	add.w	lr, sp, #12
 8028c20:	f505 7c23 	add.w	ip, r5, #652	@ 0x28c
 8028c24:	af0b      	add	r7, sp, #44	@ 0x2c
 8028c26:	4674      	mov	r4, lr
 8028c28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8028c2a:	42bc      	cmp	r4, r7
 8028c2c:	f10c 0c10 	add.w	ip, ip, #16
 8028c30:	f10e 0e10 	add.w	lr, lr, #16
 8028c34:	f84c 0c10 	str.w	r0, [ip, #-16]
 8028c38:	f84c 1c0c 	str.w	r1, [ip, #-12]
 8028c3c:	f84c 2c08 	str.w	r2, [ip, #-8]
 8028c40:	f84c 3c04 	str.w	r3, [ip, #-4]
 8028c44:	d1ef      	bne.n	8028c26 <Argus_Cal_ReadCalibrationFromNVM+0x82>
 8028c46:	f8de 0000 	ldr.w	r0, [lr]
 8028c4a:	f8cc 0000 	str.w	r0, [ip]
 8028c4e:	f1b9 0f00 	cmp.w	r9, #0
 8028c52:	d00a      	beq.n	8028c6a <Argus_Cal_ReadCalibrationFromNVM+0xc6>
 8028c54:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8028c58:	f8a5 309e 	strh.w	r3, [r5, #158]	@ 0x9e
 8028c5c:	2280      	movs	r2, #128	@ 0x80
 8028c5e:	f10d 0132 	add.w	r1, sp, #50	@ 0x32
 8028c62:	f105 001c 	add.w	r0, r5, #28
 8028c66:	f002 fa38 	bl	802b0da <memcpy>
 8028c6a:	f1b8 0f00 	cmp.w	r8, #0
 8028c6e:	d0be      	beq.n	8028bee <Argus_Cal_ReadCalibrationFromNVM+0x4a>
 8028c70:	f8dd 30b2 	ldr.w	r3, [sp, #178]	@ 0xb2
 8028c74:	f8c5 3222 	str.w	r3, [r5, #546]	@ 0x222
 8028c78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8028c7c:	f10d 01b6 	add.w	r1, sp, #182	@ 0xb6
 8028c80:	f505 7091 	add.w	r0, r5, #290	@ 0x122
 8028c84:	f002 fa29 	bl	802b0da <memcpy>
 8028c88:	e7b1      	b.n	8028bee <Argus_Cal_ReadCalibrationFromNVM+0x4a>
 8028c8a:	f110 0f62 	cmn.w	r0, #98	@ 0x62
 8028c8e:	d1b1      	bne.n	8028bf4 <Argus_Cal_ReadCalibrationFromNVM+0x50>
 8028c90:	e7ac      	b.n	8028bec <Argus_Cal_ReadCalibrationFromNVM+0x48>
 8028c92:	bf00      	nop

08028c94 <Argus_Cal_WriteCalibrationToNVM>:
 8028c94:	2800      	cmp	r0, #0
 8028c96:	f000 80a0 	beq.w	8028dda <Argus_Cal_WriteCalibrationToNVM+0x146>
 8028c9a:	b570      	push	{r4, r5, r6, lr}
 8028c9c:	460d      	mov	r5, r1
 8028c9e:	f5ad 7d40 	sub.w	sp, sp, #768	@ 0x300
 8028ca2:	2900      	cmp	r1, #0
 8028ca4:	f000 8095 	beq.w	8028dd2 <Argus_Cal_WriteCalibrationToNVM+0x13e>
 8028ca8:	2100      	movs	r1, #0
 8028caa:	ea45 6580 	orr.w	r5, r5, r0, lsl #26
 8028cae:	4614      	mov	r4, r2
 8028cb0:	a801      	add	r0, sp, #4
 8028cb2:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8028cb6:	9100      	str	r1, [sp, #0]
 8028cb8:	f002 f977 	bl	802afaa <memset>
 8028cbc:	466a      	mov	r2, sp
 8028cbe:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8028cc2:	4628      	mov	r0, r5
 8028cc4:	f7dd fea3 	bl	8006a0e <NVM_ReadBlock>
 8028cc8:	f110 0f09 	cmn.w	r0, #9
 8028ccc:	f000 8081 	beq.w	8028dd2 <Argus_Cal_WriteCalibrationToNVM+0x13e>
 8028cd0:	2800      	cmp	r0, #0
 8028cd2:	f2c0 80da 	blt.w	8028e8a <Argus_Cal_WriteCalibrationToNVM+0x1f6>
 8028cd6:	9b00      	ldr	r3, [sp, #0]
 8028cd8:	ba1e      	rev	r6, r3
 8028cda:	f7ec fd07 	bl	80156ec <Argus_GetAPIVersion>
 8028cde:	42b0      	cmp	r0, r6
 8028ce0:	f000 80c9 	beq.w	8028e76 <Argus_Cal_WriteCalibrationToNVM+0x1e2>
 8028ce4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8028ce8:	2100      	movs	r1, #0
 8028cea:	4668      	mov	r0, sp
 8028cec:	f002 f95d 	bl	802afaa <memset>
 8028cf0:	f8d4 3288 	ldr.w	r3, [r4, #648]	@ 0x288
 8028cf4:	2b00      	cmp	r3, #0
 8028cf6:	d06c      	beq.n	8028dd2 <Argus_Cal_WriteCalibrationToNVM+0x13e>
 8028cf8:	f10d 0307 	add.w	r3, sp, #7
 8028cfc:	f204 2187 	addw	r1, r4, #647	@ 0x287
 8028d00:	f10d 0c2f 	add.w	ip, sp, #47	@ 0x2f
 8028d04:	2600      	movs	r6, #0
 8028d06:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8028d0a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8028d0e:	4290      	cmp	r0, r2
 8028d10:	bf1c      	itt	ne
 8028d12:	701a      	strbne	r2, [r3, #0]
 8028d14:	2601      	movne	r6, #1
 8028d16:	4563      	cmp	r3, ip
 8028d18:	d1f5      	bne.n	8028d06 <Argus_Cal_WriteCalibrationToNVM+0x72>
 8028d1a:	f894 309e 	ldrb.w	r3, [r4, #158]	@ 0x9e
 8028d1e:	f89d 2030 	ldrb.w	r2, [sp, #48]	@ 0x30
 8028d22:	429a      	cmp	r2, r3
 8028d24:	bf18      	it	ne
 8028d26:	f88d 3030 	strbne.w	r3, [sp, #48]	@ 0x30
 8028d2a:	f89d 2031 	ldrb.w	r2, [sp, #49]	@ 0x31
 8028d2e:	f894 309f 	ldrb.w	r3, [r4, #159]	@ 0x9f
 8028d32:	bf18      	it	ne
 8028d34:	2601      	movne	r6, #1
 8028d36:	429a      	cmp	r2, r3
 8028d38:	bf1c      	itt	ne
 8028d3a:	f88d 3031 	strbne.w	r3, [sp, #49]	@ 0x31
 8028d3e:	2601      	movne	r6, #1
 8028d40:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 8028d44:	f104 021b 	add.w	r2, r4, #27
 8028d48:	f10d 0cb1 	add.w	ip, sp, #177	@ 0xb1
 8028d4c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8028d50:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8028d54:	4288      	cmp	r0, r1
 8028d56:	bf1c      	itt	ne
 8028d58:	7019      	strbne	r1, [r3, #0]
 8028d5a:	2601      	movne	r6, #1
 8028d5c:	4563      	cmp	r3, ip
 8028d5e:	d1f5      	bne.n	8028d4c <Argus_Cal_WriteCalibrationToNVM+0xb8>
 8028d60:	f894 3222 	ldrb.w	r3, [r4, #546]	@ 0x222
 8028d64:	f89d 20b2 	ldrb.w	r2, [sp, #178]	@ 0xb2
 8028d68:	429a      	cmp	r2, r3
 8028d6a:	bf18      	it	ne
 8028d6c:	f88d 30b2 	strbne.w	r3, [sp, #178]	@ 0xb2
 8028d70:	f89d 20b3 	ldrb.w	r2, [sp, #179]	@ 0xb3
 8028d74:	f894 3223 	ldrb.w	r3, [r4, #547]	@ 0x223
 8028d78:	bf18      	it	ne
 8028d7a:	2601      	movne	r6, #1
 8028d7c:	429a      	cmp	r2, r3
 8028d7e:	bf18      	it	ne
 8028d80:	f88d 30b3 	strbne.w	r3, [sp, #179]	@ 0xb3
 8028d84:	f89d 20b4 	ldrb.w	r2, [sp, #180]	@ 0xb4
 8028d88:	f894 3224 	ldrb.w	r3, [r4, #548]	@ 0x224
 8028d8c:	bf18      	it	ne
 8028d8e:	2601      	movne	r6, #1
 8028d90:	429a      	cmp	r2, r3
 8028d92:	bf18      	it	ne
 8028d94:	f88d 30b4 	strbne.w	r3, [sp, #180]	@ 0xb4
 8028d98:	f89d 20b5 	ldrb.w	r2, [sp, #181]	@ 0xb5
 8028d9c:	f894 3225 	ldrb.w	r3, [r4, #549]	@ 0x225
 8028da0:	bf18      	it	ne
 8028da2:	2601      	movne	r6, #1
 8028da4:	429a      	cmp	r2, r3
 8028da6:	bf18      	it	ne
 8028da8:	f88d 30b5 	strbne.w	r3, [sp, #181]	@ 0xb5
 8028dac:	f204 1121 	addw	r1, r4, #289	@ 0x121
 8028db0:	bf18      	it	ne
 8028db2:	2601      	movne	r6, #1
 8028db4:	f10d 03b5 	add.w	r3, sp, #181	@ 0xb5
 8028db8:	f20d 14b5 	addw	r4, sp, #437	@ 0x1b5
 8028dbc:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8028dc0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8028dc4:	4290      	cmp	r0, r2
 8028dc6:	bf1c      	itt	ne
 8028dc8:	701a      	strbne	r2, [r3, #0]
 8028dca:	2601      	movne	r6, #1
 8028dcc:	429c      	cmp	r4, r3
 8028dce:	d1f5      	bne.n	8028dbc <Argus_Cal_WriteCalibrationToNVM+0x128>
 8028dd0:	b92e      	cbnz	r6, 8028dde <Argus_Cal_WriteCalibrationToNVM+0x14a>
 8028dd2:	2000      	movs	r0, #0
 8028dd4:	f50d 7d40 	add.w	sp, sp, #768	@ 0x300
 8028dd8:	bd70      	pop	{r4, r5, r6, pc}
 8028dda:	2000      	movs	r0, #0
 8028ddc:	4770      	bx	lr
 8028dde:	f7ec fc85 	bl	80156ec <Argus_GetAPIVersion>
 8028de2:	f89d 3000 	ldrb.w	r3, [sp]
 8028de6:	0e02      	lsrs	r2, r0, #24
 8028de8:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
 8028dec:	bf18      	it	ne
 8028dee:	f88d 2000 	strbne.w	r2, [sp]
 8028df2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8028df6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8028dfa:	429a      	cmp	r2, r3
 8028dfc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8028e00:	bf18      	it	ne
 8028e02:	f88d 3001 	strbne.w	r3, [sp, #1]
 8028e06:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8028e0a:	429a      	cmp	r2, r3
 8028e0c:	bf18      	it	ne
 8028e0e:	f88d 3002 	strbne.w	r3, [sp, #2]
 8028e12:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8028e16:	b2c0      	uxtb	r0, r0
 8028e18:	4283      	cmp	r3, r0
 8028e1a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8028e1e:	bf18      	it	ne
 8028e20:	f88d 0003 	strbne.w	r0, [sp, #3]
 8028e24:	0e2a      	lsrs	r2, r5, #24
 8028e26:	ebb3 6f15 	cmp.w	r3, r5, lsr #24
 8028e2a:	bf18      	it	ne
 8028e2c:	f88d 2004 	strbne.w	r2, [sp, #4]
 8028e30:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8028e34:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8028e38:	429a      	cmp	r2, r3
 8028e3a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8028e3e:	bf18      	it	ne
 8028e40:	f88d 3005 	strbne.w	r3, [sp, #5]
 8028e44:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8028e48:	429a      	cmp	r2, r3
 8028e4a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8028e4e:	bf18      	it	ne
 8028e50:	f88d 3006 	strbne.w	r3, [sp, #6]
 8028e54:	b2eb      	uxtb	r3, r5
 8028e56:	429a      	cmp	r2, r3
 8028e58:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8028e5c:	466a      	mov	r2, sp
 8028e5e:	4628      	mov	r0, r5
 8028e60:	bf18      	it	ne
 8028e62:	f88d 3007 	strbne.w	r3, [sp, #7]
 8028e66:	f7dd fdc5 	bl	80069f4 <NVM_WriteBlock>
 8028e6a:	f110 0f09 	cmn.w	r0, #9
 8028e6e:	d0b0      	beq.n	8028dd2 <Argus_Cal_WriteCalibrationToNVM+0x13e>
 8028e70:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 8028e74:	e7ae      	b.n	8028dd4 <Argus_Cal_WriteCalibrationToNVM+0x140>
 8028e76:	9b01      	ldr	r3, [sp, #4]
 8028e78:	ba1b      	rev	r3, r3
 8028e7a:	429d      	cmp	r5, r3
 8028e7c:	f47f af32 	bne.w	8028ce4 <Argus_Cal_WriteCalibrationToNVM+0x50>
 8028e80:	9b02      	ldr	r3, [sp, #8]
 8028e82:	2b00      	cmp	r3, #0
 8028e84:	f47f af38 	bne.w	8028cf8 <Argus_Cal_WriteCalibrationToNVM+0x64>
 8028e88:	e732      	b.n	8028cf0 <Argus_Cal_WriteCalibrationToNVM+0x5c>
 8028e8a:	f110 0f62 	cmn.w	r0, #98	@ 0x62
 8028e8e:	d1a1      	bne.n	8028dd4 <Argus_Cal_WriteCalibrationToNVM+0x140>
 8028e90:	e728      	b.n	8028ce4 <Argus_Cal_WriteCalibrationToNVM+0x50>
 8028e92:	bf00      	nop

08028e94 <ADS_TriggerNextTransfer.part.0>:
 8028e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028e96:	b083      	sub	sp, #12
 8028e98:	f7dd fd9c 	bl	80069d4 <IRQ_LOCK>
 8028e9c:	4b17      	ldr	r3, [pc, #92]	@ (8028efc <ADS_TriggerNextTransfer.part.0+0x68>)
 8028e9e:	681c      	ldr	r4, [r3, #0]
 8028ea0:	69a2      	ldr	r2, [r4, #24]
 8028ea2:	601a      	str	r2, [r3, #0]
 8028ea4:	f7dd fd74 	bl	8006990 <IRQ_UNLOCK>
 8028ea8:	e9d4 6303 	ldrd	r6, r3, [r4, #12]
 8028eac:	e9d4 0500 	ldrd	r0, r5, [r4]
 8028eb0:	4913      	ldr	r1, [pc, #76]	@ (8028f00 <ADS_TriggerNextTransfer.part.0+0x6c>)
 8028eb2:	68a2      	ldr	r2, [r4, #8]
 8028eb4:	6967      	ldr	r7, [r4, #20]
 8028eb6:	9100      	str	r1, [sp, #0]
 8028eb8:	9501      	str	r5, [sp, #4]
 8028eba:	4631      	mov	r1, r6
 8028ebc:	f7dd ffb8 	bl	8006e30 <S2PI_TransferFrame>
 8028ec0:	b958      	cbnz	r0, 8028eda <ADS_TriggerNextTransfer.part.0+0x46>
 8028ec2:	b90f      	cbnz	r7, 8028ec8 <ADS_TriggerNextTransfer.part.0+0x34>
 8028ec4:	b003      	add	sp, #12
 8028ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028ec8:	f105 010c 	add.w	r1, r5, #12
 8028ecc:	f105 0008 	add.w	r0, r5, #8
 8028ed0:	f7de f962 	bl	8007198 <Timer_GetCounterValue>
 8028ed4:	606f      	str	r7, [r5, #4]
 8028ed6:	b003      	add	sp, #12
 8028ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028eda:	4604      	mov	r4, r0
 8028edc:	7831      	ldrb	r1, [r6, #0]
 8028ede:	4809      	ldr	r0, [pc, #36]	@ (8028f04 <ADS_TriggerNextTransfer.part.0+0x70>)
 8028ee0:	4622      	mov	r2, r4
 8028ee2:	f7dd fb13 	bl	800650c <print>
 8028ee6:	2200      	movs	r2, #0
 8028ee8:	2302      	movs	r3, #2
 8028eea:	4629      	mov	r1, r5
 8028eec:	4620      	mov	r0, r4
 8028eee:	642a      	str	r2, [r5, #64]	@ 0x40
 8028ef0:	602b      	str	r3, [r5, #0]
 8028ef2:	b003      	add	sp, #12
 8028ef4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8028ef8:	f000 b806 	b.w	8028f08 <ADS_SPI_Callback>
 8028efc:	240036c4 	.word	0x240036c4
 8028f00:	08028f09 	.word	0x08028f09
 8028f04:	08032844 	.word	0x08032844

08028f08 <ADS_SPI_Callback>:
 8028f08:	b570      	push	{r4, r5, r6, lr}
 8028f0a:	460c      	mov	r4, r1
 8028f0c:	4605      	mov	r5, r0
 8028f0e:	f7dd fd61 	bl	80069d4 <IRQ_LOCK>
 8028f12:	6823      	ldr	r3, [r4, #0]
 8028f14:	2b02      	cmp	r3, #2
 8028f16:	d02f      	beq.n	8028f78 <ADS_SPI_Callback+0x70>
 8028f18:	6823      	ldr	r3, [r4, #0]
 8028f1a:	2b64      	cmp	r3, #100	@ 0x64
 8028f1c:	bf04      	itt	eq
 8028f1e:	2367      	moveq	r3, #103	@ 0x67
 8028f20:	6023      	streq	r3, [r4, #0]
 8028f22:	1cab      	adds	r3, r5, #2
 8028f24:	bf1d      	ittte	ne
 8028f26:	2300      	movne	r3, #0
 8028f28:	6be6      	ldrne	r6, [r4, #60]	@ 0x3c
 8028f2a:	63e3      	strne	r3, [r4, #60]	@ 0x3c
 8028f2c:	2600      	moveq	r6, #0
 8028f2e:	f7dd fd2f 	bl	8006990 <IRQ_UNLOCK>
 8028f32:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8028f34:	b18b      	cbz	r3, 8028f5a <ADS_SPI_Callback+0x52>
 8028f36:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8028f38:	1e51      	subs	r1, r2, #1
 8028f3a:	6361      	str	r1, [r4, #52]	@ 0x34
 8028f3c:	b152      	cbz	r2, 8028f54 <ADS_SPI_Callback+0x4c>
 8028f3e:	781a      	ldrb	r2, [r3, #0]
 8028f40:	43d2      	mvns	r2, r2
 8028f42:	701a      	strb	r2, [r3, #0]
 8028f44:	e9d4 230d 	ldrd	r2, r3, [r4, #52]	@ 0x34
 8028f48:	3301      	adds	r3, #1
 8028f4a:	1e51      	subs	r1, r2, #1
 8028f4c:	e9c4 130d 	strd	r1, r3, [r4, #52]	@ 0x34
 8028f50:	2a00      	cmp	r2, #0
 8028f52:	d1f4      	bne.n	8028f3e <ADS_SPI_Callback+0x36>
 8028f54:	2300      	movs	r3, #0
 8028f56:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8028f5a:	f7dd fd3b 	bl	80069d4 <IRQ_LOCK>
 8028f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8028f88 <ADS_SPI_Callback+0x80>)
 8028f60:	681b      	ldr	r3, [r3, #0]
 8028f62:	b163      	cbz	r3, 8028f7e <ADS_SPI_Callback+0x76>
 8028f64:	f7ff ff96 	bl	8028e94 <ADS_TriggerNextTransfer.part.0>
 8028f68:	f7dd fd12 	bl	8006990 <IRQ_UNLOCK>
 8028f6c:	b116      	cbz	r6, 8028f74 <ADS_SPI_Callback+0x6c>
 8028f6e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8028f70:	4628      	mov	r0, r5
 8028f72:	47b0      	blx	r6
 8028f74:	4628      	mov	r0, r5
 8028f76:	bd70      	pop	{r4, r5, r6, pc}
 8028f78:	2300      	movs	r3, #0
 8028f7a:	6023      	str	r3, [r4, #0]
 8028f7c:	e7d1      	b.n	8028f22 <ADS_SPI_Callback+0x1a>
 8028f7e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8028f80:	f7de f83a 	bl	8006ff8 <S2PI_ReleaseMutex>
 8028f84:	e7f0      	b.n	8028f68 <ADS_SPI_Callback+0x60>
 8028f86:	bf00      	nop
 8028f88:	240036c4 	.word	0x240036c4

08028f8c <ADS_Abort.part.0>:
 8028f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028f90:	4605      	mov	r5, r0
 8028f92:	f06f 0201 	mvn.w	r2, #1
 8028f96:	2300      	movs	r3, #0
 8028f98:	6002      	str	r2, [r0, #0]
 8028f9a:	b082      	sub	sp, #8
 8028f9c:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8028f9e:	606b      	str	r3, [r5, #4]
 8028fa0:	4689      	mov	r9, r1
 8028fa2:	f7de f839 	bl	8007018 <S2PI_Abort>
 8028fa6:	1e04      	subs	r4, r0, #0
 8028fa8:	f2c0 80a7 	blt.w	80290fa <ADS_Abort.part.0+0x16e>
 8028fac:	a901      	add	r1, sp, #4
 8028fae:	4668      	mov	r0, sp
 8028fb0:	f7de f8f2 	bl	8007198 <Timer_GetCounterValue>
 8028fb4:	e9dd 6700 	ldrd	r6, r7, [sp]
 8028fb8:	4b54      	ldr	r3, [pc, #336]	@ (802910c <ADS_Abort.part.0+0x180>)
 8028fba:	eb17 0803 	adds.w	r8, r7, r3
 8028fbe:	4b54      	ldr	r3, [pc, #336]	@ (8029110 <ADS_Abort.part.0+0x184>)
 8028fc0:	bf2c      	ite	cs
 8028fc2:	f04f 0a01 	movcs.w	sl, #1
 8028fc6:	f04f 0a00 	movcc.w	sl, #0
 8028fca:	4598      	cmp	r8, r3
 8028fcc:	d934      	bls.n	8029038 <ADS_Abort.part.0+0xac>
 8028fce:	f5a7 2a5b 	sub.w	sl, r7, #897024	@ 0xdb000
 8028fd2:	f5aa 6a3a 	sub.w	sl, sl, #2976	@ 0xba0
 8028fd6:	f106 0801 	add.w	r8, r6, #1
 8028fda:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8028fdc:	f7dd fef4 	bl	8006dc8 <S2PI_CycleCsPin>
 8028fe0:	a901      	add	r1, sp, #4
 8028fe2:	4604      	mov	r4, r0
 8028fe4:	4668      	mov	r0, sp
 8028fe6:	f7de f8d7 	bl	8007198 <Timer_GetCounterValue>
 8028fea:	45b0      	cmp	r8, r6
 8028fec:	e9dd 3100 	ldrd	r3, r1, [sp]
 8028ff0:	d948      	bls.n	8029084 <ADS_Abort.part.0+0xf8>
 8028ff2:	42b3      	cmp	r3, r6
 8028ff4:	d052      	beq.n	802909c <ADS_Abort.part.0+0x110>
 8028ff6:	d853      	bhi.n	80290a0 <ADS_Abort.part.0+0x114>
 8028ff8:	2c00      	cmp	r4, #0
 8028ffa:	db3a      	blt.n	8029072 <ADS_Abort.part.0+0xe6>
 8028ffc:	682b      	ldr	r3, [r5, #0]
 8028ffe:	3302      	adds	r3, #2
 8029000:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8029002:	bf18      	it	ne
 8029004:	682c      	ldrne	r4, [r5, #0]
 8029006:	f04f 0100 	mov.w	r1, #0
 802900a:	bf08      	it	eq
 802900c:	2400      	moveq	r4, #0
 802900e:	6029      	str	r1, [r5, #0]
 8029010:	6429      	str	r1, [r5, #64]	@ 0x40
 8029012:	b113      	cbz	r3, 802901a <ADS_Abort.part.0+0x8e>
 8029014:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 8029016:	4648      	mov	r0, r9
 8029018:	4798      	blx	r3
 802901a:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 802901c:	2200      	movs	r2, #0
 802901e:	63ea      	str	r2, [r5, #60]	@ 0x3c
 8029020:	b113      	cbz	r3, 8029028 <ADS_Abort.part.0+0x9c>
 8029022:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 8029024:	4648      	mov	r0, r9
 8029026:	4798      	blx	r3
 8029028:	4620      	mov	r0, r4
 802902a:	b002      	add	sp, #8
 802902c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029030:	42b1      	cmp	r1, r6
 8029032:	d049      	beq.n	80290c8 <ADS_Abort.part.0+0x13c>
 8029034:	2c02      	cmp	r4, #2
 8029036:	d1df      	bne.n	8028ff8 <ADS_Abort.part.0+0x6c>
 8029038:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 802903a:	f7dd fec5 	bl	8006dc8 <S2PI_CycleCsPin>
 802903e:	a901      	add	r1, sp, #4
 8029040:	4604      	mov	r4, r0
 8029042:	4668      	mov	r0, sp
 8029044:	f7de f8a8 	bl	8007198 <Timer_GetCounterValue>
 8029048:	e9dd 1200 	ldrd	r1, r2, [sp]
 802904c:	f1ba 0f00 	cmp.w	sl, #0
 8029050:	d1ee      	bne.n	8029030 <ADS_Abort.part.0+0xa4>
 8029052:	42b1      	cmp	r1, r6
 8029054:	d033      	beq.n	80290be <ADS_Abort.part.0+0x132>
 8029056:	bf8c      	ite	hi
 8029058:	2301      	movhi	r3, #1
 802905a:	2300      	movls	r3, #0
 802905c:	2b00      	cmp	r3, #0
 802905e:	d0cb      	beq.n	8028ff8 <ADS_Abort.part.0+0x6c>
 8029060:	42b1      	cmp	r1, r6
 8029062:	d043      	beq.n	80290ec <ADS_Abort.part.0+0x160>
 8029064:	bf8c      	ite	hi
 8029066:	2201      	movhi	r2, #1
 8029068:	2200      	movls	r2, #0
 802906a:	2a00      	cmp	r2, #0
 802906c:	d0e2      	beq.n	8029034 <ADS_Abort.part.0+0xa8>
 802906e:	2c00      	cmp	r4, #0
 8029070:	dac4      	bge.n	8028ffc <ADS_Abort.part.0+0x70>
 8029072:	4828      	ldr	r0, [pc, #160]	@ (8029114 <ADS_Abort.part.0+0x188>)
 8029074:	4621      	mov	r1, r4
 8029076:	f7dd fa49 	bl	800650c <print>
 802907a:	682b      	ldr	r3, [r5, #0]
 802907c:	3302      	adds	r3, #2
 802907e:	bf08      	it	eq
 8029080:	602c      	streq	r4, [r5, #0]
 8029082:	e7bb      	b.n	8028ffc <ADS_Abort.part.0+0x70>
 8029084:	42b3      	cmp	r3, r6
 8029086:	d015      	beq.n	80290b4 <ADS_Abort.part.0+0x128>
 8029088:	bf8c      	ite	hi
 802908a:	2201      	movhi	r2, #1
 802908c:	2200      	movls	r2, #0
 802908e:	b912      	cbnz	r2, 8029096 <ADS_Abort.part.0+0x10a>
 8029090:	4598      	cmp	r8, r3
 8029092:	d025      	beq.n	80290e0 <ADS_Abort.part.0+0x154>
 8029094:	d3b0      	bcc.n	8028ff8 <ADS_Abort.part.0+0x6c>
 8029096:	2c02      	cmp	r4, #2
 8029098:	d09f      	beq.n	8028fda <ADS_Abort.part.0+0x4e>
 802909a:	e7ad      	b.n	8028ff8 <ADS_Abort.part.0+0x6c>
 802909c:	42b9      	cmp	r1, r7
 802909e:	d3ab      	bcc.n	8028ff8 <ADS_Abort.part.0+0x6c>
 80290a0:	4598      	cmp	r8, r3
 80290a2:	d016      	beq.n	80290d2 <ADS_Abort.part.0+0x146>
 80290a4:	bf34      	ite	cc
 80290a6:	2101      	movcc	r1, #1
 80290a8:	2100      	movcs	r1, #0
 80290aa:	2900      	cmp	r1, #0
 80290ac:	d1a4      	bne.n	8028ff8 <ADS_Abort.part.0+0x6c>
 80290ae:	2c02      	cmp	r4, #2
 80290b0:	d093      	beq.n	8028fda <ADS_Abort.part.0+0x4e>
 80290b2:	e7a1      	b.n	8028ff8 <ADS_Abort.part.0+0x6c>
 80290b4:	42b9      	cmp	r1, r7
 80290b6:	bf34      	ite	cc
 80290b8:	2200      	movcc	r2, #0
 80290ba:	2201      	movcs	r2, #1
 80290bc:	e7e7      	b.n	802908e <ADS_Abort.part.0+0x102>
 80290be:	42ba      	cmp	r2, r7
 80290c0:	bf34      	ite	cc
 80290c2:	2300      	movcc	r3, #0
 80290c4:	2301      	movcs	r3, #1
 80290c6:	e7c9      	b.n	802905c <ADS_Abort.part.0+0xd0>
 80290c8:	42ba      	cmp	r2, r7
 80290ca:	d2b3      	bcs.n	8029034 <ADS_Abort.part.0+0xa8>
 80290cc:	4590      	cmp	r8, r2
 80290ce:	d993      	bls.n	8028ff8 <ADS_Abort.part.0+0x6c>
 80290d0:	e7b0      	b.n	8029034 <ADS_Abort.part.0+0xa8>
 80290d2:	458a      	cmp	sl, r1
 80290d4:	bf8c      	ite	hi
 80290d6:	2100      	movhi	r1, #0
 80290d8:	2101      	movls	r1, #1
 80290da:	2900      	cmp	r1, #0
 80290dc:	d0e7      	beq.n	80290ae <ADS_Abort.part.0+0x122>
 80290de:	e78b      	b.n	8028ff8 <ADS_Abort.part.0+0x6c>
 80290e0:	458a      	cmp	sl, r1
 80290e2:	d989      	bls.n	8028ff8 <ADS_Abort.part.0+0x6c>
 80290e4:	2c02      	cmp	r4, #2
 80290e6:	f43f af78 	beq.w	8028fda <ADS_Abort.part.0+0x4e>
 80290ea:	e785      	b.n	8028ff8 <ADS_Abort.part.0+0x6c>
 80290ec:	4590      	cmp	r8, r2
 80290ee:	bf8c      	ite	hi
 80290f0:	2200      	movhi	r2, #0
 80290f2:	2201      	movls	r2, #1
 80290f4:	2a00      	cmp	r2, #0
 80290f6:	d09d      	beq.n	8029034 <ADS_Abort.part.0+0xa8>
 80290f8:	e7b9      	b.n	802906e <ADS_Abort.part.0+0xe2>
 80290fa:	4807      	ldr	r0, [pc, #28]	@ (8029118 <ADS_Abort.part.0+0x18c>)
 80290fc:	4621      	mov	r1, r4
 80290fe:	f7dd fa05 	bl	800650c <print>
 8029102:	682b      	ldr	r3, [r5, #0]
 8029104:	3302      	adds	r3, #2
 8029106:	bf08      	it	eq
 8029108:	602c      	streq	r4, [r5, #0]
 802910a:	e74f      	b.n	8028fac <ADS_Abort.part.0+0x20>
 802910c:	000186a0 	.word	0x000186a0
 8029110:	000f423f 	.word	0x000f423f
 8029114:	080328c4 	.word	0x080328c4
 8029118:	0803288c 	.word	0x0803288c

0802911c <ADS_AwaitIdle.constprop.0>:
 802911c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029120:	4606      	mov	r6, r0
 8029122:	b084      	sub	sp, #16
 8029124:	a901      	add	r1, sp, #4
 8029126:	4668      	mov	r0, sp
 8029128:	f7de f836 	bl	8007198 <Timer_GetCounterValue>
 802912c:	6833      	ldr	r3, [r6, #0]
 802912e:	4c3a      	ldr	r4, [pc, #232]	@ (8029218 <ADS_AwaitIdle.constprop.0+0xfc>)
 8029130:	4d3a      	ldr	r5, [pc, #232]	@ (802921c <ADS_AwaitIdle.constprop.0+0x100>)
 8029132:	2b00      	cmp	r3, #0
 8029134:	d047      	beq.n	80291c6 <ADS_AwaitIdle.constprop.0+0xaa>
 8029136:	6833      	ldr	r3, [r6, #0]
 8029138:	2b67      	cmp	r3, #103	@ 0x67
 802913a:	d049      	beq.n	80291d0 <ADS_AwaitIdle.constprop.0+0xb4>
 802913c:	6833      	ldr	r3, [r6, #0]
 802913e:	2b64      	cmp	r3, #100	@ 0x64
 8029140:	d046      	beq.n	80291d0 <ADS_AwaitIdle.constprop.0+0xb4>
 8029142:	6837      	ldr	r7, [r6, #0]
 8029144:	a802      	add	r0, sp, #8
 8029146:	a903      	add	r1, sp, #12
 8029148:	f7de f826 	bl	8007198 <Timer_GetCounterValue>
 802914c:	e9dd 2c01 	ldrd	r2, ip, [sp, #4]
 8029150:	1913      	adds	r3, r2, r4
 8029152:	bf2c      	ite	cs
 8029154:	2001      	movcs	r0, #1
 8029156:	2000      	movcc	r0, #0
 8029158:	42ab      	cmp	r3, r5
 802915a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 802915e:	9900      	ldr	r1, [sp, #0]
 8029160:	d81b      	bhi.n	802919a <ADS_AwaitIdle.constprop.0+0x7e>
 8029162:	f080 0001 	eor.w	r0, r0, #1
 8029166:	468e      	mov	lr, r1
 8029168:	b310      	cbz	r0, 80291b0 <ADS_AwaitIdle.constprop.0+0x94>
 802916a:	4561      	cmp	r1, ip
 802916c:	d03a      	beq.n	80291e4 <ADS_AwaitIdle.constprop.0+0xc8>
 802916e:	bf34      	ite	cc
 8029170:	2201      	movcc	r2, #1
 8029172:	2200      	movcs	r2, #0
 8029174:	bb72      	cbnz	r2, 80291d4 <ADS_AwaitIdle.constprop.0+0xb8>
 8029176:	482a      	ldr	r0, [pc, #168]	@ (8029220 <ADS_AwaitIdle.constprop.0+0x104>)
 8029178:	2164      	movs	r1, #100	@ 0x64
 802917a:	f7dd f9c7 	bl	800650c <print>
 802917e:	6833      	ldr	r3, [r6, #0]
 8029180:	3302      	adds	r3, #2
 8029182:	d042      	beq.n	802920a <ADS_AwaitIdle.constprop.0+0xee>
 8029184:	f06f 0105 	mvn.w	r1, #5
 8029188:	4630      	mov	r0, r6
 802918a:	f7ff feff 	bl	8028f8c <ADS_Abort.part.0>
 802918e:	f06f 0705 	mvn.w	r7, #5
 8029192:	4638      	mov	r0, r7
 8029194:	b004      	add	sp, #16
 8029196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802919a:	f101 0e01 	add.w	lr, r1, #1
 802919e:	4571      	cmp	r1, lr
 80291a0:	f5a2 235b 	sub.w	r3, r2, #897024	@ 0xdb000
 80291a4:	f5a3 633a 	sub.w	r3, r3, #2976	@ 0xba0
 80291a8:	bf2c      	ite	cs
 80291aa:	2000      	movcs	r0, #0
 80291ac:	2001      	movcc	r0, #1
 80291ae:	e7db      	b.n	8029168 <ADS_AwaitIdle.constprop.0+0x4c>
 80291b0:	4561      	cmp	r1, ip
 80291b2:	d01c      	beq.n	80291ee <ADS_AwaitIdle.constprop.0+0xd2>
 80291b4:	d302      	bcc.n	80291bc <ADS_AwaitIdle.constprop.0+0xa0>
 80291b6:	45e6      	cmp	lr, ip
 80291b8:	d01d      	beq.n	80291f6 <ADS_AwaitIdle.constprop.0+0xda>
 80291ba:	d3dc      	bcc.n	8029176 <ADS_AwaitIdle.constprop.0+0x5a>
 80291bc:	2f02      	cmp	r7, #2
 80291be:	d1e8      	bne.n	8029192 <ADS_AwaitIdle.constprop.0+0x76>
 80291c0:	6833      	ldr	r3, [r6, #0]
 80291c2:	2b00      	cmp	r3, #0
 80291c4:	d1b7      	bne.n	8029136 <ADS_AwaitIdle.constprop.0+0x1a>
 80291c6:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 80291c8:	f7dd fd12 	bl	8006bf0 <S2PI_GetStatus>
 80291cc:	4607      	mov	r7, r0
 80291ce:	e7b9      	b.n	8029144 <ADS_AwaitIdle.constprop.0+0x28>
 80291d0:	2702      	movs	r7, #2
 80291d2:	e7b7      	b.n	8029144 <ADS_AwaitIdle.constprop.0+0x28>
 80291d4:	45e6      	cmp	lr, ip
 80291d6:	d011      	beq.n	80291fc <ADS_AwaitIdle.constprop.0+0xe0>
 80291d8:	bf34      	ite	cc
 80291da:	2301      	movcc	r3, #1
 80291dc:	2300      	movcs	r3, #0
 80291de:	2b00      	cmp	r3, #0
 80291e0:	d0ec      	beq.n	80291bc <ADS_AwaitIdle.constprop.0+0xa0>
 80291e2:	e7c8      	b.n	8029176 <ADS_AwaitIdle.constprop.0+0x5a>
 80291e4:	4542      	cmp	r2, r8
 80291e6:	bf8c      	ite	hi
 80291e8:	2200      	movhi	r2, #0
 80291ea:	2201      	movls	r2, #1
 80291ec:	e7c2      	b.n	8029174 <ADS_AwaitIdle.constprop.0+0x58>
 80291ee:	4542      	cmp	r2, r8
 80291f0:	d9e4      	bls.n	80291bc <ADS_AwaitIdle.constprop.0+0xa0>
 80291f2:	45e6      	cmp	lr, ip
 80291f4:	d1e1      	bne.n	80291ba <ADS_AwaitIdle.constprop.0+0x9e>
 80291f6:	4543      	cmp	r3, r8
 80291f8:	d9bd      	bls.n	8029176 <ADS_AwaitIdle.constprop.0+0x5a>
 80291fa:	e7df      	b.n	80291bc <ADS_AwaitIdle.constprop.0+0xa0>
 80291fc:	4543      	cmp	r3, r8
 80291fe:	bf8c      	ite	hi
 8029200:	2300      	movhi	r3, #0
 8029202:	2301      	movls	r3, #1
 8029204:	2b00      	cmp	r3, #0
 8029206:	d0d9      	beq.n	80291bc <ADS_AwaitIdle.constprop.0+0xa0>
 8029208:	e7b5      	b.n	8029176 <ADS_AwaitIdle.constprop.0+0x5a>
 802920a:	f06f 0705 	mvn.w	r7, #5
 802920e:	4638      	mov	r0, r7
 8029210:	b004      	add	sp, #16
 8029212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029216:	bf00      	nop
 8029218:	000186a0 	.word	0x000186a0
 802921c:	000f423f 	.word	0x000f423f
 8029220:	080328f8 	.word	0x080328f8

08029224 <ADS_IRQ_Callback>:
 8029224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029226:	4604      	mov	r4, r0
 8029228:	b083      	sub	sp, #12
 802922a:	f7dd fbd3 	bl	80069d4 <IRQ_LOCK>
 802922e:	6823      	ldr	r3, [r4, #0]
 8029230:	2b67      	cmp	r3, #103	@ 0x67
 8029232:	d004      	beq.n	802923e <ADS_IRQ_Callback+0x1a>
 8029234:	b003      	add	sp, #12
 8029236:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 802923a:	f7dd bba9 	b.w	8006990 <IRQ_UNLOCK>
 802923e:	2300      	movs	r3, #0
 8029240:	6023      	str	r3, [r4, #0]
 8029242:	a901      	add	r1, sp, #4
 8029244:	4668      	mov	r0, sp
 8029246:	f7dd ffa7 	bl	8007198 <Timer_GetCounterValue>
 802924a:	9901      	ldr	r1, [sp, #4]
 802924c:	68e3      	ldr	r3, [r4, #12]
 802924e:	9a00      	ldr	r2, [sp, #0]
 8029250:	68a5      	ldr	r5, [r4, #8]
 8029252:	4299      	cmp	r1, r3
 8029254:	bf3c      	itt	cc
 8029256:	f102 32ff 	addcc.w	r2, r2, #4294967295
 802925a:	f501 2174 	addcc.w	r1, r1, #999424	@ 0xf4000
 802925e:	eba2 0505 	sub.w	r5, r2, r5
 8029262:	f241 02c5 	movw	r2, #4293	@ 0x10c5
 8029266:	bf38      	it	cc
 8029268:	f501 7110 	addcc.w	r1, r1, #576	@ 0x240
 802926c:	4295      	cmp	r5, r2
 802926e:	eba1 0303 	sub.w	r3, r1, r3
 8029272:	d811      	bhi.n	8029298 <ADS_IRQ_Callback+0x74>
 8029274:	490e      	ldr	r1, [pc, #56]	@ (80292b0 <ADS_IRQ_Callback+0x8c>)
 8029276:	fb01 3505 	mla	r5, r1, r5, r3
 802927a:	6c27      	ldr	r7, [r4, #64]	@ 0x40
 802927c:	2600      	movs	r6, #0
 802927e:	6426      	str	r6, [r4, #64]	@ 0x40
 8029280:	6066      	str	r6, [r4, #4]
 8029282:	f7dd fb85 	bl	8006990 <IRQ_UNLOCK>
 8029286:	b18f      	cbz	r7, 80292ac <ADS_IRQ_Callback+0x88>
 8029288:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 802928a:	4629      	mov	r1, r5
 802928c:	4630      	mov	r0, r6
 802928e:	463b      	mov	r3, r7
 8029290:	b003      	add	sp, #12
 8029292:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8029296:	4718      	bx	r3
 8029298:	f241 02c6 	movw	r2, #4294	@ 0x10c6
 802929c:	4295      	cmp	r5, r2
 802929e:	d102      	bne.n	80292a6 <ADS_IRQ_Callback+0x82>
 80292a0:	4a04      	ldr	r2, [pc, #16]	@ (80292b4 <ADS_IRQ_Callback+0x90>)
 80292a2:	4293      	cmp	r3, r2
 80292a4:	d9e6      	bls.n	8029274 <ADS_IRQ_Callback+0x50>
 80292a6:	f04f 35ff 	mov.w	r5, #4294967295
 80292aa:	e7e6      	b.n	802927a <ADS_IRQ_Callback+0x56>
 80292ac:	b003      	add	sp, #12
 80292ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80292b0:	000f4240 	.word	0x000f4240
 80292b4:	000ec27e 	.word	0x000ec27e

080292b8 <ADS_Init>:
 80292b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80292ba:	2303      	movs	r3, #3
 80292bc:	b08b      	sub	sp, #44	@ 0x2c
 80292be:	4604      	mov	r4, r0
 80292c0:	6003      	str	r3, [r0, #0]
 80292c2:	2900      	cmp	r1, #0
 80292c4:	f000 822d 	beq.w	8029722 <ADS_Init+0x46a>
 80292c8:	460b      	mov	r3, r1
 80292ca:	4602      	mov	r2, r0
 80292cc:	4906      	ldr	r1, [pc, #24]	@ (80292e8 <ADS_Init+0x30>)
 80292ce:	9303      	str	r3, [sp, #12]
 80292d0:	4618      	mov	r0, r3
 80292d2:	f7dd fed7 	bl	8007084 <S2PI_SetIrqCallback>
 80292d6:	9b03      	ldr	r3, [sp, #12]
 80292d8:	4605      	mov	r5, r0
 80292da:	b138      	cbz	r0, 80292ec <ADS_Init+0x34>
 80292dc:	f06f 0306 	mvn.w	r3, #6
 80292e0:	6023      	str	r3, [r4, #0]
 80292e2:	4628      	mov	r0, r5
 80292e4:	b00b      	add	sp, #44	@ 0x2c
 80292e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80292e8:	08029225 	.word	0x08029225
 80292ec:	48b1      	ldr	r0, [pc, #708]	@ (80295b4 <ADS_Init+0x2fc>)
 80292ee:	4ab2      	ldr	r2, [pc, #712]	@ (80295b8 <ADS_Init+0x300>)
 80292f0:	4fb2      	ldr	r7, [pc, #712]	@ (80295bc <ADS_Init+0x304>)
 80292f2:	4eb3      	ldr	r6, [pc, #716]	@ (80295c0 <ADS_Init+0x308>)
 80292f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80292f6:	6025      	str	r5, [r4, #0]
 80292f8:	2310      	movs	r3, #16
 80292fa:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
 80292fe:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8029302:	e9cd 7605 	strd	r7, r6, [sp, #20]
 8029306:	e9cd 0207 	strd	r0, r2, [sp, #28]
 802930a:	f7dd fb63 	bl	80069d4 <IRQ_LOCK>
 802930e:	6823      	ldr	r3, [r4, #0]
 8029310:	2b00      	cmp	r3, #0
 8029312:	f040 8188 	bne.w	8029626 <ADS_Init+0x36e>
 8029316:	2302      	movs	r3, #2
 8029318:	6023      	str	r3, [r4, #0]
 802931a:	f7dd fb39 	bl	8006990 <IRQ_UNLOCK>
 802931e:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8029322:	6465      	str	r5, [r4, #68]	@ 0x44
 8029324:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 8029328:	2b00      	cmp	r3, #0
 802932a:	f040 814f 	bne.w	80295cc <ADS_Init+0x314>
 802932e:	f7dd fb51 	bl	80069d4 <IRQ_LOCK>
 8029332:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8029334:	f7dd fe3e 	bl	8006fb4 <S2PI_TryGetMutex>
 8029338:	4606      	mov	r6, r0
 802933a:	2800      	cmp	r0, #0
 802933c:	f000 8152 	beq.w	80295e4 <ADS_Init+0x32c>
 8029340:	2200      	movs	r2, #0
 8029342:	ab05      	add	r3, sp, #20
 8029344:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8029348:	499e      	ldr	r1, [pc, #632]	@ (80295c4 <ADS_Init+0x30c>)
 802934a:	6262      	str	r2, [r4, #36]	@ 0x24
 802934c:	2311      	movs	r3, #17
 802934e:	6223      	str	r3, [r4, #32]
 8029350:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8029352:	6123      	str	r3, [r4, #16]
 8029354:	680b      	ldr	r3, [r1, #0]
 8029356:	6164      	str	r4, [r4, #20]
 8029358:	62a2      	str	r2, [r4, #40]	@ 0x28
 802935a:	2b00      	cmp	r3, #0
 802935c:	f000 815f 	beq.w	802961e <ADS_Init+0x366>
 8029360:	461a      	mov	r2, r3
 8029362:	699b      	ldr	r3, [r3, #24]
 8029364:	2b00      	cmp	r3, #0
 8029366:	d1fb      	bne.n	8029360 <ADS_Init+0xa8>
 8029368:	f104 0310 	add.w	r3, r4, #16
 802936c:	6193      	str	r3, [r2, #24]
 802936e:	f7dd fb0f 	bl	8006990 <IRQ_UNLOCK>
 8029372:	4620      	mov	r0, r4
 8029374:	f7ff fed2 	bl	802911c <ADS_AwaitIdle.constprop.0>
 8029378:	2800      	cmp	r0, #0
 802937a:	f2c0 815a 	blt.w	8029632 <ADS_Init+0x37a>
 802937e:	2300      	movs	r3, #0
 8029380:	2204      	movs	r2, #4
 8029382:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8029386:	e9cd 3307 	strd	r3, r3, [sp, #28]
 802938a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 802938e:	f88d 2014 	strb.w	r2, [sp, #20]
 8029392:	f7dd fb1f 	bl	80069d4 <IRQ_LOCK>
 8029396:	6826      	ldr	r6, [r4, #0]
 8029398:	2e00      	cmp	r6, #0
 802939a:	f040 8150 	bne.w	802963e <ADS_Init+0x386>
 802939e:	2302      	movs	r3, #2
 80293a0:	6023      	str	r3, [r4, #0]
 80293a2:	f7dd faf5 	bl	8006990 <IRQ_UNLOCK>
 80293a6:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80293aa:	6466      	str	r6, [r4, #68]	@ 0x44
 80293ac:	e9c4 660f 	strd	r6, r6, [r4, #60]	@ 0x3c
 80293b0:	b11b      	cbz	r3, 80293ba <ADS_Init+0x102>
 80293b2:	2311      	movs	r3, #17
 80293b4:	aa05      	add	r2, sp, #20
 80293b6:	e9c4 320d 	strd	r3, r2, [r4, #52]	@ 0x34
 80293ba:	f7dd fb0b 	bl	80069d4 <IRQ_LOCK>
 80293be:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80293c0:	f7dd fdf8 	bl	8006fb4 <S2PI_TryGetMutex>
 80293c4:	4606      	mov	r6, r0
 80293c6:	2800      	cmp	r0, #0
 80293c8:	f000 8183 	beq.w	80296d2 <ADS_Init+0x41a>
 80293cc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80293ce:	6122      	str	r2, [r4, #16]
 80293d0:	4a7c      	ldr	r2, [pc, #496]	@ (80295c4 <ADS_Init+0x30c>)
 80293d2:	6164      	str	r4, [r4, #20]
 80293d4:	2300      	movs	r3, #0
 80293d6:	2111      	movs	r1, #17
 80293d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80293da:	62a3      	str	r3, [r4, #40]	@ 0x28
 80293dc:	6813      	ldr	r3, [r2, #0]
 80293de:	6221      	str	r1, [r4, #32]
 80293e0:	a905      	add	r1, sp, #20
 80293e2:	e9c4 1106 	strd	r1, r1, [r4, #24]
 80293e6:	2b00      	cmp	r3, #0
 80293e8:	f000 8190 	beq.w	802970c <ADS_Init+0x454>
 80293ec:	461a      	mov	r2, r3
 80293ee:	699b      	ldr	r3, [r3, #24]
 80293f0:	2b00      	cmp	r3, #0
 80293f2:	d1fb      	bne.n	80293ec <ADS_Init+0x134>
 80293f4:	f104 0310 	add.w	r3, r4, #16
 80293f8:	6193      	str	r3, [r2, #24]
 80293fa:	f7dd fac9 	bl	8006990 <IRQ_UNLOCK>
 80293fe:	4620      	mov	r0, r4
 8029400:	f7ff fe8c 	bl	802911c <ADS_AwaitIdle.constprop.0>
 8029404:	2800      	cmp	r0, #0
 8029406:	f2c0 8114 	blt.w	8029632 <ADS_Init+0x37a>
 802940a:	f89d 3015 	ldrb.w	r3, [sp, #21]
 802940e:	2bfe      	cmp	r3, #254	@ 0xfe
 8029410:	bf0c      	ite	eq
 8029412:	2201      	moveq	r2, #1
 8029414:	2200      	movne	r2, #0
 8029416:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 802941a:	f000 8117 	beq.w	802964c <ADS_Init+0x394>
 802941e:	2b01      	cmp	r3, #1
 8029420:	f040 8151 	bne.w	80296c6 <ADS_Init+0x40e>
 8029424:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8029428:	2b02      	cmp	r3, #2
 802942a:	f040 814c 	bne.w	80296c6 <ADS_Init+0x40e>
 802942e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8029432:	2b03      	cmp	r3, #3
 8029434:	f040 8147 	bne.w	80296c6 <ADS_Init+0x40e>
 8029438:	f89d 3018 	ldrb.w	r3, [sp, #24]
 802943c:	2b04      	cmp	r3, #4
 802943e:	f040 8142 	bne.w	80296c6 <ADS_Init+0x40e>
 8029442:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8029446:	2b05      	cmp	r3, #5
 8029448:	f040 813d 	bne.w	80296c6 <ADS_Init+0x40e>
 802944c:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8029450:	2b06      	cmp	r3, #6
 8029452:	f040 8138 	bne.w	80296c6 <ADS_Init+0x40e>
 8029456:	f89d 301b 	ldrb.w	r3, [sp, #27]
 802945a:	2b07      	cmp	r3, #7
 802945c:	f040 8133 	bne.w	80296c6 <ADS_Init+0x40e>
 8029460:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8029464:	2b08      	cmp	r3, #8
 8029466:	f040 812e 	bne.w	80296c6 <ADS_Init+0x40e>
 802946a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 802946e:	2b09      	cmp	r3, #9
 8029470:	f040 8129 	bne.w	80296c6 <ADS_Init+0x40e>
 8029474:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8029478:	2b0a      	cmp	r3, #10
 802947a:	f040 8124 	bne.w	80296c6 <ADS_Init+0x40e>
 802947e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8029482:	2b0b      	cmp	r3, #11
 8029484:	f040 811f 	bne.w	80296c6 <ADS_Init+0x40e>
 8029488:	f89d 3020 	ldrb.w	r3, [sp, #32]
 802948c:	2b0c      	cmp	r3, #12
 802948e:	f040 811a 	bne.w	80296c6 <ADS_Init+0x40e>
 8029492:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8029496:	2b0d      	cmp	r3, #13
 8029498:	f040 8115 	bne.w	80296c6 <ADS_Init+0x40e>
 802949c:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 80294a0:	2b0e      	cmp	r3, #14
 80294a2:	f040 8110 	bne.w	80296c6 <ADS_Init+0x40e>
 80294a6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80294aa:	2b0f      	cmp	r3, #15
 80294ac:	f040 810b 	bne.w	80296c6 <ADS_Init+0x40e>
 80294b0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80294b4:	2b10      	cmp	r3, #16
 80294b6:	f040 8106 	bne.w	80296c6 <ADS_Init+0x40e>
 80294ba:	2300      	movs	r3, #0
 80294bc:	2204      	movs	r2, #4
 80294be:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80294c2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80294c6:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80294ca:	f88d 2014 	strb.w	r2, [sp, #20]
 80294ce:	f7dd fa81 	bl	80069d4 <IRQ_LOCK>
 80294d2:	6826      	ldr	r6, [r4, #0]
 80294d4:	2e00      	cmp	r6, #0
 80294d6:	f040 811d 	bne.w	8029714 <ADS_Init+0x45c>
 80294da:	2302      	movs	r3, #2
 80294dc:	6023      	str	r3, [r4, #0]
 80294de:	f7dd fa57 	bl	8006990 <IRQ_UNLOCK>
 80294e2:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80294e6:	6466      	str	r6, [r4, #68]	@ 0x44
 80294e8:	e9c4 660f 	strd	r6, r6, [r4, #60]	@ 0x3c
 80294ec:	b11b      	cbz	r3, 80294f6 <ADS_Init+0x23e>
 80294ee:	2311      	movs	r3, #17
 80294f0:	aa05      	add	r2, sp, #20
 80294f2:	e9c4 320d 	strd	r3, r2, [r4, #52]	@ 0x34
 80294f6:	f7dd fa6d 	bl	80069d4 <IRQ_LOCK>
 80294fa:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80294fc:	f7dd fd5a 	bl	8006fb4 <S2PI_TryGetMutex>
 8029500:	4606      	mov	r6, r0
 8029502:	2800      	cmp	r0, #0
 8029504:	f000 8116 	beq.w	8029734 <ADS_Init+0x47c>
 8029508:	2111      	movs	r1, #17
 802950a:	6221      	str	r1, [r4, #32]
 802950c:	a905      	add	r1, sp, #20
 802950e:	e9c4 1106 	strd	r1, r1, [r4, #24]
 8029512:	492c      	ldr	r1, [pc, #176]	@ (80295c4 <ADS_Init+0x30c>)
 8029514:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8029516:	6123      	str	r3, [r4, #16]
 8029518:	680b      	ldr	r3, [r1, #0]
 802951a:	6164      	str	r4, [r4, #20]
 802951c:	2200      	movs	r2, #0
 802951e:	6262      	str	r2, [r4, #36]	@ 0x24
 8029520:	62a2      	str	r2, [r4, #40]	@ 0x28
 8029522:	2b00      	cmp	r3, #0
 8029524:	f000 8123 	beq.w	802976e <ADS_Init+0x4b6>
 8029528:	461a      	mov	r2, r3
 802952a:	699b      	ldr	r3, [r3, #24]
 802952c:	2b00      	cmp	r3, #0
 802952e:	d1fb      	bne.n	8029528 <ADS_Init+0x270>
 8029530:	f104 0310 	add.w	r3, r4, #16
 8029534:	6193      	str	r3, [r2, #24]
 8029536:	f7dd fa2b 	bl	8006990 <IRQ_UNLOCK>
 802953a:	4620      	mov	r0, r4
 802953c:	f7ff fdee 	bl	802911c <ADS_AwaitIdle.constprop.0>
 8029540:	2800      	cmp	r0, #0
 8029542:	db76      	blt.n	8029632 <ADS_Init+0x37a>
 8029544:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8029548:	bb73      	cbnz	r3, 80295a8 <ADS_Init+0x2f0>
 802954a:	f89d 3016 	ldrb.w	r3, [sp, #22]
 802954e:	bb5b      	cbnz	r3, 80295a8 <ADS_Init+0x2f0>
 8029550:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8029554:	bb43      	cbnz	r3, 80295a8 <ADS_Init+0x2f0>
 8029556:	f89d 3018 	ldrb.w	r3, [sp, #24]
 802955a:	bb2b      	cbnz	r3, 80295a8 <ADS_Init+0x2f0>
 802955c:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8029560:	bb13      	cbnz	r3, 80295a8 <ADS_Init+0x2f0>
 8029562:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8029566:	b9fb      	cbnz	r3, 80295a8 <ADS_Init+0x2f0>
 8029568:	f89d 301b 	ldrb.w	r3, [sp, #27]
 802956c:	b9e3      	cbnz	r3, 80295a8 <ADS_Init+0x2f0>
 802956e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8029572:	b9cb      	cbnz	r3, 80295a8 <ADS_Init+0x2f0>
 8029574:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8029578:	b9b3      	cbnz	r3, 80295a8 <ADS_Init+0x2f0>
 802957a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 802957e:	b99b      	cbnz	r3, 80295a8 <ADS_Init+0x2f0>
 8029580:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8029584:	b983      	cbnz	r3, 80295a8 <ADS_Init+0x2f0>
 8029586:	f89d 3020 	ldrb.w	r3, [sp, #32]
 802958a:	b96b      	cbnz	r3, 80295a8 <ADS_Init+0x2f0>
 802958c:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8029590:	b953      	cbnz	r3, 80295a8 <ADS_Init+0x2f0>
 8029592:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 8029596:	b93b      	cbnz	r3, 80295a8 <ADS_Init+0x2f0>
 8029598:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 802959c:	b923      	cbnz	r3, 80295a8 <ADS_Init+0x2f0>
 802959e:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80295a2:	2b00      	cmp	r3, #0
 80295a4:	f43f ae9d 	beq.w	80292e2 <ADS_Init+0x2a>
 80295a8:	4807      	ldr	r0, [pc, #28]	@ (80295c8 <ADS_Init+0x310>)
 80295aa:	f7dc ffaf 	bl	800650c <print>
 80295ae:	f06f 0564 	mvn.w	r5, #100	@ 0x64
 80295b2:	e03f      	b.n	8029634 <ADS_Init+0x37c>
 80295b4:	0b0a0908 	.word	0x0b0a0908
 80295b8:	0f0e0d0c 	.word	0x0f0e0d0c
 80295bc:	03020104 	.word	0x03020104
 80295c0:	07060504 	.word	0x07060504
 80295c4:	240036c4 	.word	0x240036c4
 80295c8:	080329e4 	.word	0x080329e4
 80295cc:	2311      	movs	r3, #17
 80295ce:	e9c4 350d 	strd	r3, r5, [r4, #52]	@ 0x34
 80295d2:	f7dd f9ff 	bl	80069d4 <IRQ_LOCK>
 80295d6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80295d8:	f7dd fcec 	bl	8006fb4 <S2PI_TryGetMutex>
 80295dc:	4606      	mov	r6, r0
 80295de:	2800      	cmp	r0, #0
 80295e0:	f47f aeae 	bne.w	8029340 <ADS_Init+0x88>
 80295e4:	f7dd f9d4 	bl	8006990 <IRQ_UNLOCK>
 80295e8:	4b63      	ldr	r3, [pc, #396]	@ (8029778 <ADS_Init+0x4c0>)
 80295ea:	e9cd 3400 	strd	r3, r4, [sp]
 80295ee:	4632      	mov	r2, r6
 80295f0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80295f2:	2311      	movs	r3, #17
 80295f4:	a905      	add	r1, sp, #20
 80295f6:	f7dd fc1b 	bl	8006e30 <S2PI_TransferFrame>
 80295fa:	4607      	mov	r7, r0
 80295fc:	2800      	cmp	r0, #0
 80295fe:	f43f aeb8 	beq.w	8029372 <ADS_Init+0xba>
 8029602:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8029606:	4602      	mov	r2, r0
 8029608:	485c      	ldr	r0, [pc, #368]	@ (802977c <ADS_Init+0x4c4>)
 802960a:	f7dc ff7f 	bl	800650c <print>
 802960e:	2302      	movs	r3, #2
 8029610:	6426      	str	r6, [r4, #64]	@ 0x40
 8029612:	6023      	str	r3, [r4, #0]
 8029614:	4621      	mov	r1, r4
 8029616:	4638      	mov	r0, r7
 8029618:	f7ff fc76 	bl	8028f08 <ADS_SPI_Callback>
 802961c:	e006      	b.n	802962c <ADS_Init+0x374>
 802961e:	f104 0310 	add.w	r3, r4, #16
 8029622:	600b      	str	r3, [r1, #0]
 8029624:	e6a3      	b.n	802936e <ADS_Init+0xb6>
 8029626:	f7dd f9b3 	bl	8006990 <IRQ_UNLOCK>
 802962a:	6820      	ldr	r0, [r4, #0]
 802962c:	2800      	cmp	r0, #0
 802962e:	f6bf aea0 	bge.w	8029372 <ADS_Init+0xba>
 8029632:	4605      	mov	r5, r0
 8029634:	4629      	mov	r1, r5
 8029636:	4852      	ldr	r0, [pc, #328]	@ (8029780 <ADS_Init+0x4c8>)
 8029638:	f7dc ff68 	bl	800650c <print>
 802963c:	e64e      	b.n	80292dc <ADS_Init+0x24>
 802963e:	f7dd f9a7 	bl	8006990 <IRQ_UNLOCK>
 8029642:	6820      	ldr	r0, [r4, #0]
 8029644:	2800      	cmp	r0, #0
 8029646:	f6bf aeda 	bge.w	80293fe <ADS_Init+0x146>
 802964a:	e7f2      	b.n	8029632 <ADS_Init+0x37a>
 802964c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8029650:	2bfd      	cmp	r3, #253	@ 0xfd
 8029652:	d138      	bne.n	80296c6 <ADS_Init+0x40e>
 8029654:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8029658:	2bfc      	cmp	r3, #252	@ 0xfc
 802965a:	d134      	bne.n	80296c6 <ADS_Init+0x40e>
 802965c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8029660:	2bfb      	cmp	r3, #251	@ 0xfb
 8029662:	d130      	bne.n	80296c6 <ADS_Init+0x40e>
 8029664:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8029668:	2bfa      	cmp	r3, #250	@ 0xfa
 802966a:	d12c      	bne.n	80296c6 <ADS_Init+0x40e>
 802966c:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8029670:	2bf9      	cmp	r3, #249	@ 0xf9
 8029672:	d128      	bne.n	80296c6 <ADS_Init+0x40e>
 8029674:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8029678:	2bf8      	cmp	r3, #248	@ 0xf8
 802967a:	d124      	bne.n	80296c6 <ADS_Init+0x40e>
 802967c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8029680:	2bf7      	cmp	r3, #247	@ 0xf7
 8029682:	d120      	bne.n	80296c6 <ADS_Init+0x40e>
 8029684:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8029688:	2bf6      	cmp	r3, #246	@ 0xf6
 802968a:	d11c      	bne.n	80296c6 <ADS_Init+0x40e>
 802968c:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8029690:	2bf5      	cmp	r3, #245	@ 0xf5
 8029692:	d118      	bne.n	80296c6 <ADS_Init+0x40e>
 8029694:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8029698:	2bf4      	cmp	r3, #244	@ 0xf4
 802969a:	d114      	bne.n	80296c6 <ADS_Init+0x40e>
 802969c:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80296a0:	2bf3      	cmp	r3, #243	@ 0xf3
 80296a2:	d110      	bne.n	80296c6 <ADS_Init+0x40e>
 80296a4:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 80296a8:	2bf2      	cmp	r3, #242	@ 0xf2
 80296aa:	d10c      	bne.n	80296c6 <ADS_Init+0x40e>
 80296ac:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 80296b0:	2bf1      	cmp	r3, #241	@ 0xf1
 80296b2:	d108      	bne.n	80296c6 <ADS_Init+0x40e>
 80296b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80296b8:	2bf0      	cmp	r3, #240	@ 0xf0
 80296ba:	d104      	bne.n	80296c6 <ADS_Init+0x40e>
 80296bc:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80296c0:	2bef      	cmp	r3, #239	@ 0xef
 80296c2:	f43f aefa 	beq.w	80294ba <ADS_Init+0x202>
 80296c6:	482f      	ldr	r0, [pc, #188]	@ (8029784 <ADS_Init+0x4cc>)
 80296c8:	f7dc ff20 	bl	800650c <print>
 80296cc:	f06f 0564 	mvn.w	r5, #100	@ 0x64
 80296d0:	e7b0      	b.n	8029634 <ADS_Init+0x37c>
 80296d2:	f7dd f95d 	bl	8006990 <IRQ_UNLOCK>
 80296d6:	4b28      	ldr	r3, [pc, #160]	@ (8029778 <ADS_Init+0x4c0>)
 80296d8:	e9cd 3400 	strd	r3, r4, [sp]
 80296dc:	aa05      	add	r2, sp, #20
 80296de:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80296e0:	2311      	movs	r3, #17
 80296e2:	4611      	mov	r1, r2
 80296e4:	f7dd fba4 	bl	8006e30 <S2PI_TransferFrame>
 80296e8:	4607      	mov	r7, r0
 80296ea:	2800      	cmp	r0, #0
 80296ec:	f43f ae87 	beq.w	80293fe <ADS_Init+0x146>
 80296f0:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80296f4:	4602      	mov	r2, r0
 80296f6:	4821      	ldr	r0, [pc, #132]	@ (802977c <ADS_Init+0x4c4>)
 80296f8:	f7dc ff08 	bl	800650c <print>
 80296fc:	2302      	movs	r3, #2
 80296fe:	6426      	str	r6, [r4, #64]	@ 0x40
 8029700:	6023      	str	r3, [r4, #0]
 8029702:	4621      	mov	r1, r4
 8029704:	4638      	mov	r0, r7
 8029706:	f7ff fbff 	bl	8028f08 <ADS_SPI_Callback>
 802970a:	e79b      	b.n	8029644 <ADS_Init+0x38c>
 802970c:	f104 0310 	add.w	r3, r4, #16
 8029710:	6013      	str	r3, [r2, #0]
 8029712:	e672      	b.n	80293fa <ADS_Init+0x142>
 8029714:	f7dd f93c 	bl	8006990 <IRQ_UNLOCK>
 8029718:	6820      	ldr	r0, [r4, #0]
 802971a:	2800      	cmp	r0, #0
 802971c:	f6bf af0d 	bge.w	802953a <ADS_Init+0x282>
 8029720:	e787      	b.n	8029632 <ADS_Init+0x37a>
 8029722:	4819      	ldr	r0, [pc, #100]	@ (8029788 <ADS_Init+0x4d0>)
 8029724:	f7dc fef2 	bl	800650c <print>
 8029728:	f06f 0306 	mvn.w	r3, #6
 802972c:	6023      	str	r3, [r4, #0]
 802972e:	f06f 0567 	mvn.w	r5, #103	@ 0x67
 8029732:	e5d6      	b.n	80292e2 <ADS_Init+0x2a>
 8029734:	f7dd f92c 	bl	8006990 <IRQ_UNLOCK>
 8029738:	4b0f      	ldr	r3, [pc, #60]	@ (8029778 <ADS_Init+0x4c0>)
 802973a:	e9cd 3400 	strd	r3, r4, [sp]
 802973e:	aa05      	add	r2, sp, #20
 8029740:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8029742:	2311      	movs	r3, #17
 8029744:	4611      	mov	r1, r2
 8029746:	f7dd fb73 	bl	8006e30 <S2PI_TransferFrame>
 802974a:	4607      	mov	r7, r0
 802974c:	2800      	cmp	r0, #0
 802974e:	f43f aef4 	beq.w	802953a <ADS_Init+0x282>
 8029752:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8029756:	4602      	mov	r2, r0
 8029758:	4808      	ldr	r0, [pc, #32]	@ (802977c <ADS_Init+0x4c4>)
 802975a:	f7dc fed7 	bl	800650c <print>
 802975e:	2302      	movs	r3, #2
 8029760:	6426      	str	r6, [r4, #64]	@ 0x40
 8029762:	6023      	str	r3, [r4, #0]
 8029764:	4621      	mov	r1, r4
 8029766:	4638      	mov	r0, r7
 8029768:	f7ff fbce 	bl	8028f08 <ADS_SPI_Callback>
 802976c:	e7d5      	b.n	802971a <ADS_Init+0x462>
 802976e:	f104 0310 	add.w	r3, r4, #16
 8029772:	600b      	str	r3, [r1, #0]
 8029774:	e6df      	b.n	8029536 <ADS_Init+0x27e>
 8029776:	bf00      	nop
 8029778:	08028f09 	.word	0x08028f09
 802977c:	08032844 	.word	0x08032844
 8029780:	08032a68 	.word	0x08032a68
 8029784:	08032968 	.word	0x08032968
 8029788:	08032940 	.word	0x08032940

0802978c <ADS_Abort>:
 802978c:	6803      	ldr	r3, [r0, #0]
 802978e:	3302      	adds	r3, #2
 8029790:	d001      	beq.n	8029796 <ADS_Abort+0xa>
 8029792:	f7ff bbfb 	b.w	8028f8c <ADS_Abort.part.0>
 8029796:	2000      	movs	r0, #0
 8029798:	4770      	bx	lr
 802979a:	bf00      	nop

0802979c <ADS_GetStatus>:
 802979c:	6803      	ldr	r3, [r0, #0]
 802979e:	b14b      	cbz	r3, 80297b4 <ADS_GetStatus+0x18>
 80297a0:	6803      	ldr	r3, [r0, #0]
 80297a2:	2b67      	cmp	r3, #103	@ 0x67
 80297a4:	d004      	beq.n	80297b0 <ADS_GetStatus+0x14>
 80297a6:	6803      	ldr	r3, [r0, #0]
 80297a8:	2b64      	cmp	r3, #100	@ 0x64
 80297aa:	d001      	beq.n	80297b0 <ADS_GetStatus+0x14>
 80297ac:	6800      	ldr	r0, [r0, #0]
 80297ae:	4770      	bx	lr
 80297b0:	2002      	movs	r0, #2
 80297b2:	4770      	bx	lr
 80297b4:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 80297b6:	f7dd ba1b 	b.w	8006bf0 <S2PI_GetStatus>
 80297ba:	bf00      	nop

080297bc <ADS_CheckTimeout>:
 80297bc:	b570      	push	{r4, r5, r6, lr}
 80297be:	4604      	mov	r4, r0
 80297c0:	b084      	sub	sp, #16
 80297c2:	f7dd f907 	bl	80069d4 <IRQ_LOCK>
 80297c6:	6863      	ldr	r3, [r4, #4]
 80297c8:	b31b      	cbz	r3, 8029812 <ADS_CheckTimeout+0x56>
 80297ca:	a903      	add	r1, sp, #12
 80297cc:	a802      	add	r0, sp, #8
 80297ce:	e9d4 6502 	ldrd	r6, r5, [r4, #8]
 80297d2:	f7dd fce1 	bl	8007198 <Timer_GetCounterValue>
 80297d6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80297da:	4295      	cmp	r5, r2
 80297dc:	bf82      	ittt	hi
 80297de:	f502 2274 	addhi.w	r2, r2, #999424	@ 0xf4000
 80297e2:	f502 7210 	addhi.w	r2, r2, #576	@ 0x240
 80297e6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80297ea:	1b9b      	subs	r3, r3, r6
 80297ec:	1b55      	subs	r5, r2, r5
 80297ee:	f241 02c5 	movw	r2, #4293	@ 0x10c5
 80297f2:	4293      	cmp	r3, r2
 80297f4:	d812      	bhi.n	802981c <ADS_CheckTimeout+0x60>
 80297f6:	4923      	ldr	r1, [pc, #140]	@ (8029884 <ADS_CheckTimeout+0xc8>)
 80297f8:	6862      	ldr	r2, [r4, #4]
 80297fa:	fb01 5503 	mla	r5, r1, r3, r5
 80297fe:	42aa      	cmp	r2, r5
 8029800:	d807      	bhi.n	8029812 <ADS_CheckTimeout+0x56>
 8029802:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8029804:	f7dd fc60 	bl	80070c8 <S2PI_ReadIrqPin>
 8029808:	b118      	cbz	r0, 8029812 <ADS_CheckTimeout+0x56>
 802980a:	6863      	ldr	r3, [r4, #4]
 802980c:	ebb5 0f43 	cmp.w	r5, r3, lsl #1
 8029810:	d211      	bcs.n	8029836 <ADS_CheckTimeout+0x7a>
 8029812:	f7dd f8bd 	bl	8006990 <IRQ_UNLOCK>
 8029816:	2000      	movs	r0, #0
 8029818:	b004      	add	sp, #16
 802981a:	bd70      	pop	{r4, r5, r6, pc}
 802981c:	f241 02c6 	movw	r2, #4294	@ 0x10c6
 8029820:	4293      	cmp	r3, r2
 8029822:	d027      	beq.n	8029874 <ADS_CheckTimeout+0xb8>
 8029824:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8029826:	6863      	ldr	r3, [r4, #4]
 8029828:	f7dd fc4e 	bl	80070c8 <S2PI_ReadIrqPin>
 802982c:	2800      	cmp	r0, #0
 802982e:	d0f0      	beq.n	8029812 <ADS_CheckTimeout+0x56>
 8029830:	6863      	ldr	r3, [r4, #4]
 8029832:	f04f 35ff 	mov.w	r5, #4294967295
 8029836:	2300      	movs	r3, #0
 8029838:	6862      	ldr	r2, [r4, #4]
 802983a:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 802983c:	6063      	str	r3, [r4, #4]
 802983e:	6423      	str	r3, [r4, #64]	@ 0x40
 8029840:	9201      	str	r2, [sp, #4]
 8029842:	f7dd f8a5 	bl	8006990 <IRQ_UNLOCK>
 8029846:	9a01      	ldr	r2, [sp, #4]
 8029848:	480f      	ldr	r0, [pc, #60]	@ (8029888 <ADS_CheckTimeout+0xcc>)
 802984a:	4629      	mov	r1, r5
 802984c:	f7dc fe5e 	bl	800650c <print>
 8029850:	6823      	ldr	r3, [r4, #0]
 8029852:	3302      	adds	r3, #2
 8029854:	d004      	beq.n	8029860 <ADS_CheckTimeout+0xa4>
 8029856:	f06f 0105 	mvn.w	r1, #5
 802985a:	4620      	mov	r0, r4
 802985c:	f7ff fb96 	bl	8028f8c <ADS_Abort.part.0>
 8029860:	b166      	cbz	r6, 802987c <ADS_CheckTimeout+0xc0>
 8029862:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8029864:	4629      	mov	r1, r5
 8029866:	f06f 0005 	mvn.w	r0, #5
 802986a:	47b0      	blx	r6
 802986c:	f06f 0005 	mvn.w	r0, #5
 8029870:	b004      	add	sp, #16
 8029872:	bd70      	pop	{r4, r5, r6, pc}
 8029874:	4a05      	ldr	r2, [pc, #20]	@ (802988c <ADS_CheckTimeout+0xd0>)
 8029876:	4295      	cmp	r5, r2
 8029878:	d9bd      	bls.n	80297f6 <ADS_CheckTimeout+0x3a>
 802987a:	e7d3      	b.n	8029824 <ADS_CheckTimeout+0x68>
 802987c:	f06f 0005 	mvn.w	r0, #5
 8029880:	e7ca      	b.n	8029818 <ADS_CheckTimeout+0x5c>
 8029882:	bf00      	nop
 8029884:	000f4240 	.word	0x000f4240
 8029888:	08032aa0 	.word	0x08032aa0
 802988c:	000ec27e 	.word	0x000ec27e

08029890 <ADS_AwaitIdle>:
 8029890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029894:	4d49      	ldr	r5, [pc, #292]	@ (80299bc <ADS_AwaitIdle+0x12c>)
 8029896:	4f4a      	ldr	r7, [pc, #296]	@ (80299c0 <ADS_AwaitIdle+0x130>)
 8029898:	b084      	sub	sp, #16
 802989a:	4688      	mov	r8, r1
 802989c:	4681      	mov	r9, r0
 802989e:	a901      	add	r1, sp, #4
 80298a0:	4668      	mov	r0, sp
 80298a2:	fba5 2508 	umull	r2, r5, r5, r8
 80298a6:	f7dd fc77 	bl	8007198 <Timer_GetCounterValue>
 80298aa:	09ad      	lsrs	r5, r5, #6
 80298ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80298b0:	fb03 8615 	mls	r6, r3, r5, r8
 80298b4:	fb03 f606 	mul.w	r6, r3, r6
 80298b8:	f8d9 3000 	ldr.w	r3, [r9]
 80298bc:	2b00      	cmp	r3, #0
 80298be:	d04b      	beq.n	8029958 <ADS_AwaitIdle+0xc8>
 80298c0:	f8d9 3000 	ldr.w	r3, [r9]
 80298c4:	2b67      	cmp	r3, #103	@ 0x67
 80298c6:	d054      	beq.n	8029972 <ADS_AwaitIdle+0xe2>
 80298c8:	f8d9 3000 	ldr.w	r3, [r9]
 80298cc:	2b64      	cmp	r3, #100	@ 0x64
 80298ce:	d050      	beq.n	8029972 <ADS_AwaitIdle+0xe2>
 80298d0:	f8d9 a000 	ldr.w	sl, [r9]
 80298d4:	a903      	add	r1, sp, #12
 80298d6:	a802      	add	r0, sp, #8
 80298d8:	f7dd fc5e 	bl	8007198 <Timer_GetCounterValue>
 80298dc:	e9dd 4200 	ldrd	r4, r2, [sp]
 80298e0:	18b3      	adds	r3, r6, r2
 80298e2:	42bb      	cmp	r3, r7
 80298e4:	e9dd 0c02 	ldrd	r0, ip, [sp, #8]
 80298e8:	eb05 0104 	add.w	r1, r5, r4
 80298ec:	d904      	bls.n	80298f8 <ADS_AwaitIdle+0x68>
 80298ee:	f5a3 2374 	sub.w	r3, r3, #999424	@ 0xf4000
 80298f2:	3101      	adds	r1, #1
 80298f4:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80298f8:	428c      	cmp	r4, r1
 80298fa:	d033      	beq.n	8029964 <ADS_AwaitIdle+0xd4>
 80298fc:	bf34      	ite	cc
 80298fe:	f04f 0e01 	movcc.w	lr, #1
 8029902:	f04f 0e00 	movcs.w	lr, #0
 8029906:	f1be 0f00 	cmp.w	lr, #0
 802990a:	d018      	beq.n	802993e <ADS_AwaitIdle+0xae>
 802990c:	42a0      	cmp	r0, r4
 802990e:	d042      	beq.n	8029996 <ADS_AwaitIdle+0x106>
 8029910:	bf8c      	ite	hi
 8029912:	2201      	movhi	r2, #1
 8029914:	2200      	movls	r2, #0
 8029916:	bb7a      	cbnz	r2, 8029978 <ADS_AwaitIdle+0xe8>
 8029918:	482a      	ldr	r0, [pc, #168]	@ (80299c4 <ADS_AwaitIdle+0x134>)
 802991a:	4641      	mov	r1, r8
 802991c:	f7dc fdf6 	bl	800650c <print>
 8029920:	f8d9 3000 	ldr.w	r3, [r9]
 8029924:	3302      	adds	r3, #2
 8029926:	d042      	beq.n	80299ae <ADS_AwaitIdle+0x11e>
 8029928:	f06f 0105 	mvn.w	r1, #5
 802992c:	4648      	mov	r0, r9
 802992e:	f7ff fb2d 	bl	8028f8c <ADS_Abort.part.0>
 8029932:	f06f 0a05 	mvn.w	sl, #5
 8029936:	4650      	mov	r0, sl
 8029938:	b004      	add	sp, #16
 802993a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802993e:	42a0      	cmp	r0, r4
 8029940:	d022      	beq.n	8029988 <ADS_AwaitIdle+0xf8>
 8029942:	d802      	bhi.n	802994a <ADS_AwaitIdle+0xba>
 8029944:	4288      	cmp	r0, r1
 8029946:	d023      	beq.n	8029990 <ADS_AwaitIdle+0x100>
 8029948:	d8e6      	bhi.n	8029918 <ADS_AwaitIdle+0x88>
 802994a:	f1ba 0f02 	cmp.w	sl, #2
 802994e:	d1f2      	bne.n	8029936 <ADS_AwaitIdle+0xa6>
 8029950:	f8d9 3000 	ldr.w	r3, [r9]
 8029954:	2b00      	cmp	r3, #0
 8029956:	d1b3      	bne.n	80298c0 <ADS_AwaitIdle+0x30>
 8029958:	f8d9 002c 	ldr.w	r0, [r9, #44]	@ 0x2c
 802995c:	f7dd f948 	bl	8006bf0 <S2PI_GetStatus>
 8029960:	4682      	mov	sl, r0
 8029962:	e7b7      	b.n	80298d4 <ADS_AwaitIdle+0x44>
 8029964:	429a      	cmp	r2, r3
 8029966:	bf8c      	ite	hi
 8029968:	f04f 0e00 	movhi.w	lr, #0
 802996c:	f04f 0e01 	movls.w	lr, #1
 8029970:	e7c9      	b.n	8029906 <ADS_AwaitIdle+0x76>
 8029972:	f04f 0a02 	mov.w	sl, #2
 8029976:	e7ad      	b.n	80298d4 <ADS_AwaitIdle+0x44>
 8029978:	4288      	cmp	r0, r1
 802997a:	d011      	beq.n	80299a0 <ADS_AwaitIdle+0x110>
 802997c:	bf8c      	ite	hi
 802997e:	2301      	movhi	r3, #1
 8029980:	2300      	movls	r3, #0
 8029982:	2b00      	cmp	r3, #0
 8029984:	d0e1      	beq.n	802994a <ADS_AwaitIdle+0xba>
 8029986:	e7c7      	b.n	8029918 <ADS_AwaitIdle+0x88>
 8029988:	4562      	cmp	r2, ip
 802998a:	d9de      	bls.n	802994a <ADS_AwaitIdle+0xba>
 802998c:	4288      	cmp	r0, r1
 802998e:	d1db      	bne.n	8029948 <ADS_AwaitIdle+0xb8>
 8029990:	459c      	cmp	ip, r3
 8029992:	d2c1      	bcs.n	8029918 <ADS_AwaitIdle+0x88>
 8029994:	e7d9      	b.n	802994a <ADS_AwaitIdle+0xba>
 8029996:	4562      	cmp	r2, ip
 8029998:	bf8c      	ite	hi
 802999a:	2200      	movhi	r2, #0
 802999c:	2201      	movls	r2, #1
 802999e:	e7ba      	b.n	8029916 <ADS_AwaitIdle+0x86>
 80299a0:	459c      	cmp	ip, r3
 80299a2:	bf34      	ite	cc
 80299a4:	2300      	movcc	r3, #0
 80299a6:	2301      	movcs	r3, #1
 80299a8:	2b00      	cmp	r3, #0
 80299aa:	d0ce      	beq.n	802994a <ADS_AwaitIdle+0xba>
 80299ac:	e7b4      	b.n	8029918 <ADS_AwaitIdle+0x88>
 80299ae:	f06f 0a05 	mvn.w	sl, #5
 80299b2:	4650      	mov	r0, sl
 80299b4:	b004      	add	sp, #16
 80299b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80299ba:	bf00      	nop
 80299bc:	10624dd3 	.word	0x10624dd3
 80299c0:	000f423f 	.word	0x000f423f
 80299c4:	080328f8 	.word	0x080328f8

080299c8 <ADS_TransferWithStart>:
 80299c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80299cc:	b085      	sub	sp, #20
 80299ce:	4604      	mov	r4, r0
 80299d0:	461d      	mov	r5, r3
 80299d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80299d4:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 80299d8:	9303      	str	r3, [sp, #12]
 80299da:	e9dd b910 	ldrd	fp, r9, [sp, #64]	@ 0x40
 80299de:	468a      	mov	sl, r1
 80299e0:	4616      	mov	r6, r2
 80299e2:	f7dc fff7 	bl	80069d4 <IRQ_LOCK>
 80299e6:	6827      	ldr	r7, [r4, #0]
 80299e8:	2f00      	cmp	r7, #0
 80299ea:	d14b      	bne.n	8029a84 <ADS_TransferWithStart+0xbc>
 80299ec:	2302      	movs	r3, #2
 80299ee:	6023      	str	r3, [r4, #0]
 80299f0:	f7dc ffce 	bl	8006990 <IRQ_UNLOCK>
 80299f4:	9b03      	ldr	r3, [sp, #12]
 80299f6:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80299f8:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80299fc:	f8c4 b040 	str.w	fp, [r4, #64]	@ 0x40
 8029a00:	f8c4 9044 	str.w	r9, [r4, #68]	@ 0x44
 8029a04:	b10b      	cbz	r3, 8029a0a <ADS_TransferWithStart+0x42>
 8029a06:	e9c4 560d 	strd	r5, r6, [r4, #52]	@ 0x34
 8029a0a:	f1b8 0f00 	cmp.w	r8, #0
 8029a0e:	d001      	beq.n	8029a14 <ADS_TransferWithStart+0x4c>
 8029a10:	2364      	movs	r3, #100	@ 0x64
 8029a12:	6023      	str	r3, [r4, #0]
 8029a14:	f7dc ffde 	bl	80069d4 <IRQ_LOCK>
 8029a18:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8029a1a:	f7dd facb 	bl	8006fb4 <S2PI_TryGetMutex>
 8029a1e:	4681      	mov	r9, r0
 8029a20:	b1b8      	cbz	r0, 8029a52 <ADS_TransferWithStart+0x8a>
 8029a22:	4926      	ldr	r1, [pc, #152]	@ (8029abc <ADS_TransferWithStart+0xf4>)
 8029a24:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8029a26:	6123      	str	r3, [r4, #16]
 8029a28:	680b      	ldr	r3, [r1, #0]
 8029a2a:	6164      	str	r4, [r4, #20]
 8029a2c:	2000      	movs	r0, #0
 8029a2e:	e9c4 6a06 	strd	r6, sl, [r4, #24]
 8029a32:	e9c4 5808 	strd	r5, r8, [r4, #32]
 8029a36:	62a0      	str	r0, [r4, #40]	@ 0x28
 8029a38:	b35b      	cbz	r3, 8029a92 <ADS_TransferWithStart+0xca>
 8029a3a:	4619      	mov	r1, r3
 8029a3c:	699b      	ldr	r3, [r3, #24]
 8029a3e:	2b00      	cmp	r3, #0
 8029a40:	d1fb      	bne.n	8029a3a <ADS_TransferWithStart+0x72>
 8029a42:	3410      	adds	r4, #16
 8029a44:	618c      	str	r4, [r1, #24]
 8029a46:	f7dc ffa3 	bl	8006990 <IRQ_UNLOCK>
 8029a4a:	4638      	mov	r0, r7
 8029a4c:	b005      	add	sp, #20
 8029a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029a52:	f7dc ff9d 	bl	8006990 <IRQ_UNLOCK>
 8029a56:	491a      	ldr	r1, [pc, #104]	@ (8029ac0 <ADS_TransferWithStart+0xf8>)
 8029a58:	9100      	str	r1, [sp, #0]
 8029a5a:	9401      	str	r4, [sp, #4]
 8029a5c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8029a5e:	462b      	mov	r3, r5
 8029a60:	4632      	mov	r2, r6
 8029a62:	4651      	mov	r1, sl
 8029a64:	f7dd f9e4 	bl	8006e30 <S2PI_TransferFrame>
 8029a68:	4607      	mov	r7, r0
 8029a6a:	b9a8      	cbnz	r0, 8029a98 <ADS_TransferWithStart+0xd0>
 8029a6c:	f1b8 0f00 	cmp.w	r8, #0
 8029a70:	d0eb      	beq.n	8029a4a <ADS_TransferWithStart+0x82>
 8029a72:	f104 010c 	add.w	r1, r4, #12
 8029a76:	f104 0008 	add.w	r0, r4, #8
 8029a7a:	f7dd fb8d 	bl	8007198 <Timer_GetCounterValue>
 8029a7e:	f8c4 8004 	str.w	r8, [r4, #4]
 8029a82:	e7e2      	b.n	8029a4a <ADS_TransferWithStart+0x82>
 8029a84:	f7dc ff84 	bl	8006990 <IRQ_UNLOCK>
 8029a88:	6827      	ldr	r7, [r4, #0]
 8029a8a:	4638      	mov	r0, r7
 8029a8c:	b005      	add	sp, #20
 8029a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029a92:	3410      	adds	r4, #16
 8029a94:	600c      	str	r4, [r1, #0]
 8029a96:	e7d6      	b.n	8029a46 <ADS_TransferWithStart+0x7e>
 8029a98:	f89a 1000 	ldrb.w	r1, [sl]
 8029a9c:	4602      	mov	r2, r0
 8029a9e:	4809      	ldr	r0, [pc, #36]	@ (8029ac4 <ADS_TransferWithStart+0xfc>)
 8029aa0:	f7dc fd34 	bl	800650c <print>
 8029aa4:	2302      	movs	r3, #2
 8029aa6:	4621      	mov	r1, r4
 8029aa8:	4638      	mov	r0, r7
 8029aaa:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
 8029aae:	6023      	str	r3, [r4, #0]
 8029ab0:	b005      	add	sp, #20
 8029ab2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029ab6:	f7ff ba27 	b.w	8028f08 <ADS_SPI_Callback>
 8029aba:	bf00      	nop
 8029abc:	240036c4 	.word	0x240036c4
 8029ac0:	08028f09 	.word	0x08028f09
 8029ac4:	08032844 	.word	0x08032844

08029ac8 <ADS_Transfer>:
 8029ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029acc:	4604      	mov	r4, r0
 8029ace:	b082      	sub	sp, #8
 8029ad0:	4689      	mov	r9, r1
 8029ad2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8029ad4:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 8029ad8:	4690      	mov	r8, r2
 8029ada:	461f      	mov	r7, r3
 8029adc:	f7dc ff7a 	bl	80069d4 <IRQ_LOCK>
 8029ae0:	6825      	ldr	r5, [r4, #0]
 8029ae2:	2d00      	cmp	r5, #0
 8029ae4:	d14a      	bne.n	8029b7c <ADS_Transfer+0xb4>
 8029ae6:	2302      	movs	r3, #2
 8029ae8:	6023      	str	r3, [r4, #0]
 8029aea:	f7dc ff51 	bl	8006990 <IRQ_UNLOCK>
 8029aee:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8029af2:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8029af4:	e9c4 5a10 	strd	r5, sl, [r4, #64]	@ 0x40
 8029af8:	b10b      	cbz	r3, 8029afe <ADS_Transfer+0x36>
 8029afa:	e9c4 780d 	strd	r7, r8, [r4, #52]	@ 0x34
 8029afe:	f7dc ff69 	bl	80069d4 <IRQ_LOCK>
 8029b02:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8029b04:	f7dd fa56 	bl	8006fb4 <S2PI_TryGetMutex>
 8029b08:	4606      	mov	r6, r0
 8029b0a:	b1c8      	cbz	r0, 8029b40 <ADS_Transfer+0x78>
 8029b0c:	4920      	ldr	r1, [pc, #128]	@ (8029b90 <ADS_Transfer+0xc8>)
 8029b0e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8029b10:	6123      	str	r3, [r4, #16]
 8029b12:	680b      	ldr	r3, [r1, #0]
 8029b14:	f8c4 8018 	str.w	r8, [r4, #24]
 8029b18:	2200      	movs	r2, #0
 8029b1a:	e9c4 9707 	strd	r9, r7, [r4, #28]
 8029b1e:	6262      	str	r2, [r4, #36]	@ 0x24
 8029b20:	6164      	str	r4, [r4, #20]
 8029b22:	62a2      	str	r2, [r4, #40]	@ 0x28
 8029b24:	2b00      	cmp	r3, #0
 8029b26:	d030      	beq.n	8029b8a <ADS_Transfer+0xc2>
 8029b28:	461a      	mov	r2, r3
 8029b2a:	699b      	ldr	r3, [r3, #24]
 8029b2c:	2b00      	cmp	r3, #0
 8029b2e:	d1fb      	bne.n	8029b28 <ADS_Transfer+0x60>
 8029b30:	3410      	adds	r4, #16
 8029b32:	6194      	str	r4, [r2, #24]
 8029b34:	f7dc ff2c 	bl	8006990 <IRQ_UNLOCK>
 8029b38:	4628      	mov	r0, r5
 8029b3a:	b002      	add	sp, #8
 8029b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029b40:	f7dc ff26 	bl	8006990 <IRQ_UNLOCK>
 8029b44:	4913      	ldr	r1, [pc, #76]	@ (8029b94 <ADS_Transfer+0xcc>)
 8029b46:	9100      	str	r1, [sp, #0]
 8029b48:	9401      	str	r4, [sp, #4]
 8029b4a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8029b4c:	463b      	mov	r3, r7
 8029b4e:	4642      	mov	r2, r8
 8029b50:	4649      	mov	r1, r9
 8029b52:	f7dd f96d 	bl	8006e30 <S2PI_TransferFrame>
 8029b56:	4605      	mov	r5, r0
 8029b58:	2800      	cmp	r0, #0
 8029b5a:	d0ed      	beq.n	8029b38 <ADS_Transfer+0x70>
 8029b5c:	f899 1000 	ldrb.w	r1, [r9]
 8029b60:	4602      	mov	r2, r0
 8029b62:	480d      	ldr	r0, [pc, #52]	@ (8029b98 <ADS_Transfer+0xd0>)
 8029b64:	f7dc fcd2 	bl	800650c <print>
 8029b68:	2302      	movs	r3, #2
 8029b6a:	4621      	mov	r1, r4
 8029b6c:	4628      	mov	r0, r5
 8029b6e:	6426      	str	r6, [r4, #64]	@ 0x40
 8029b70:	6023      	str	r3, [r4, #0]
 8029b72:	b002      	add	sp, #8
 8029b74:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029b78:	f7ff b9c6 	b.w	8028f08 <ADS_SPI_Callback>
 8029b7c:	f7dc ff08 	bl	8006990 <IRQ_UNLOCK>
 8029b80:	6825      	ldr	r5, [r4, #0]
 8029b82:	4628      	mov	r0, r5
 8029b84:	b002      	add	sp, #8
 8029b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029b8a:	3410      	adds	r4, #16
 8029b8c:	600c      	str	r4, [r1, #0]
 8029b8e:	e7d1      	b.n	8029b34 <ADS_Transfer+0x6c>
 8029b90:	240036c4 	.word	0x240036c4
 8029b94:	08028f09 	.word	0x08028f09
 8029b98:	08032844 	.word	0x08032844

08029b9c <ADS_Start>:
 8029b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029ba0:	4604      	mov	r4, r0
 8029ba2:	b082      	sub	sp, #8
 8029ba4:	460e      	mov	r6, r1
 8029ba6:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8029baa:	4617      	mov	r7, r2
 8029bac:	4698      	mov	r8, r3
 8029bae:	f7dc ff11 	bl	80069d4 <IRQ_LOCK>
 8029bb2:	6825      	ldr	r5, [r4, #0]
 8029bb4:	2d00      	cmp	r5, #0
 8029bb6:	d14b      	bne.n	8029c50 <ADS_Start+0xb4>
 8029bb8:	f04f 0a02 	mov.w	sl, #2
 8029bbc:	f8c4 a000 	str.w	sl, [r4]
 8029bc0:	f7dc fee6 	bl	8006990 <IRQ_UNLOCK>
 8029bc4:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8029bc8:	f8c4 9044 	str.w	r9, [r4, #68]	@ 0x44
 8029bcc:	e9c4 780f 	strd	r7, r8, [r4, #60]	@ 0x3c
 8029bd0:	b10b      	cbz	r3, 8029bd6 <ADS_Start+0x3a>
 8029bd2:	e9c4 a50d 	strd	sl, r5, [r4, #52]	@ 0x34
 8029bd6:	b10e      	cbz	r6, 8029bdc <ADS_Start+0x40>
 8029bd8:	2364      	movs	r3, #100	@ 0x64
 8029bda:	6023      	str	r3, [r4, #0]
 8029bdc:	f7dc fefa 	bl	80069d4 <IRQ_LOCK>
 8029be0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8029be2:	f7dd f9e7 	bl	8006fb4 <S2PI_TryGetMutex>
 8029be6:	4607      	mov	r7, r0
 8029be8:	b1c8      	cbz	r0, 8029c1e <ADS_Start+0x82>
 8029bea:	4a26      	ldr	r2, [pc, #152]	@ (8029c84 <ADS_Start+0xe8>)
 8029bec:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8029bee:	6121      	str	r1, [r4, #16]
 8029bf0:	2300      	movs	r3, #0
 8029bf2:	e9c4 3206 	strd	r3, r2, [r4, #24]
 8029bf6:	2202      	movs	r2, #2
 8029bf8:	6222      	str	r2, [r4, #32]
 8029bfa:	4a23      	ldr	r2, [pc, #140]	@ (8029c88 <ADS_Start+0xec>)
 8029bfc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8029bfe:	6813      	ldr	r3, [r2, #0]
 8029c00:	6266      	str	r6, [r4, #36]	@ 0x24
 8029c02:	6164      	str	r4, [r4, #20]
 8029c04:	b35b      	cbz	r3, 8029c5e <ADS_Start+0xc2>
 8029c06:	461a      	mov	r2, r3
 8029c08:	699b      	ldr	r3, [r3, #24]
 8029c0a:	2b00      	cmp	r3, #0
 8029c0c:	d1fb      	bne.n	8029c06 <ADS_Start+0x6a>
 8029c0e:	3410      	adds	r4, #16
 8029c10:	6194      	str	r4, [r2, #24]
 8029c12:	f7dc febd 	bl	8006990 <IRQ_UNLOCK>
 8029c16:	4628      	mov	r0, r5
 8029c18:	b002      	add	sp, #8
 8029c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029c1e:	f7dc feb7 	bl	8006990 <IRQ_UNLOCK>
 8029c22:	4b1a      	ldr	r3, [pc, #104]	@ (8029c8c <ADS_Start+0xf0>)
 8029c24:	f8df 805c 	ldr.w	r8, [pc, #92]	@ 8029c84 <ADS_Start+0xe8>
 8029c28:	e9cd 3400 	strd	r3, r4, [sp]
 8029c2c:	463a      	mov	r2, r7
 8029c2e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8029c30:	2302      	movs	r3, #2
 8029c32:	4641      	mov	r1, r8
 8029c34:	f7dd f8fc 	bl	8006e30 <S2PI_TransferFrame>
 8029c38:	4605      	mov	r5, r0
 8029c3a:	b998      	cbnz	r0, 8029c64 <ADS_Start+0xc8>
 8029c3c:	2e00      	cmp	r6, #0
 8029c3e:	d0ea      	beq.n	8029c16 <ADS_Start+0x7a>
 8029c40:	f104 010c 	add.w	r1, r4, #12
 8029c44:	f104 0008 	add.w	r0, r4, #8
 8029c48:	f7dd faa6 	bl	8007198 <Timer_GetCounterValue>
 8029c4c:	6066      	str	r6, [r4, #4]
 8029c4e:	e7e2      	b.n	8029c16 <ADS_Start+0x7a>
 8029c50:	f7dc fe9e 	bl	8006990 <IRQ_UNLOCK>
 8029c54:	6825      	ldr	r5, [r4, #0]
 8029c56:	4628      	mov	r0, r5
 8029c58:	b002      	add	sp, #8
 8029c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029c5e:	3410      	adds	r4, #16
 8029c60:	6014      	str	r4, [r2, #0]
 8029c62:	e7d6      	b.n	8029c12 <ADS_Start+0x76>
 8029c64:	f898 1000 	ldrb.w	r1, [r8]
 8029c68:	4602      	mov	r2, r0
 8029c6a:	4809      	ldr	r0, [pc, #36]	@ (8029c90 <ADS_Start+0xf4>)
 8029c6c:	f7dc fc4e 	bl	800650c <print>
 8029c70:	2302      	movs	r3, #2
 8029c72:	4621      	mov	r1, r4
 8029c74:	4628      	mov	r0, r5
 8029c76:	6427      	str	r7, [r4, #64]	@ 0x40
 8029c78:	6023      	str	r3, [r4, #0]
 8029c7a:	b002      	add	sp, #8
 8029c7c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029c80:	f7ff b942 	b.w	8028f08 <ADS_SPI_Callback>
 8029c84:	24000068 	.word	0x24000068
 8029c88:	240036c4 	.word	0x240036c4
 8029c8c:	08028f09 	.word	0x08028f09
 8029c90:	08032844 	.word	0x08032844

08029c94 <ADS_ReadData>:
 8029c94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8029c98:	4698      	mov	r8, r3
 8029c9a:	b083      	sub	sp, #12
 8029c9c:	1e53      	subs	r3, r2, #1
 8029c9e:	2b83      	cmp	r3, #131	@ 0x83
 8029ca0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8029ca4:	d860      	bhi.n	8029d68 <ADS_ReadData+0xd4>
 8029ca6:	4604      	mov	r4, r0
 8029ca8:	2324      	movs	r3, #36	@ 0x24
 8029caa:	700b      	strb	r3, [r1, #0]
 8029cac:	4615      	mov	r5, r2
 8029cae:	460e      	mov	r6, r1
 8029cb0:	f7dc fe90 	bl	80069d4 <IRQ_LOCK>
 8029cb4:	6827      	ldr	r7, [r4, #0]
 8029cb6:	2f00      	cmp	r7, #0
 8029cb8:	d14c      	bne.n	8029d54 <ADS_ReadData+0xc0>
 8029cba:	2302      	movs	r3, #2
 8029cbc:	6023      	str	r3, [r4, #0]
 8029cbe:	f7dc fe67 	bl	8006990 <IRQ_UNLOCK>
 8029cc2:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8029cc6:	f8c4 9044 	str.w	r9, [r4, #68]	@ 0x44
 8029cca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8029cce:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 8029cd2:	3501      	adds	r5, #1
 8029cd4:	b10b      	cbz	r3, 8029cda <ADS_ReadData+0x46>
 8029cd6:	e9c4 560d 	strd	r5, r6, [r4, #52]	@ 0x34
 8029cda:	f7dc fe7b 	bl	80069d4 <IRQ_LOCK>
 8029cde:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8029ce0:	f7dd f968 	bl	8006fb4 <S2PI_TryGetMutex>
 8029ce4:	4680      	mov	r8, r0
 8029ce6:	b1b8      	cbz	r0, 8029d18 <ADS_ReadData+0x84>
 8029ce8:	4921      	ldr	r1, [pc, #132]	@ (8029d70 <ADS_ReadData+0xdc>)
 8029cea:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8029cec:	6123      	str	r3, [r4, #16]
 8029cee:	680b      	ldr	r3, [r1, #0]
 8029cf0:	6225      	str	r5, [r4, #32]
 8029cf2:	2200      	movs	r2, #0
 8029cf4:	e9c4 6606 	strd	r6, r6, [r4, #24]
 8029cf8:	6262      	str	r2, [r4, #36]	@ 0x24
 8029cfa:	6164      	str	r4, [r4, #20]
 8029cfc:	62a2      	str	r2, [r4, #40]	@ 0x28
 8029cfe:	b383      	cbz	r3, 8029d62 <ADS_ReadData+0xce>
 8029d00:	461a      	mov	r2, r3
 8029d02:	699b      	ldr	r3, [r3, #24]
 8029d04:	2b00      	cmp	r3, #0
 8029d06:	d1fb      	bne.n	8029d00 <ADS_ReadData+0x6c>
 8029d08:	3410      	adds	r4, #16
 8029d0a:	6194      	str	r4, [r2, #24]
 8029d0c:	f7dc fe40 	bl	8006990 <IRQ_UNLOCK>
 8029d10:	4638      	mov	r0, r7
 8029d12:	b003      	add	sp, #12
 8029d14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8029d18:	f7dc fe3a 	bl	8006990 <IRQ_UNLOCK>
 8029d1c:	4b15      	ldr	r3, [pc, #84]	@ (8029d74 <ADS_ReadData+0xe0>)
 8029d1e:	e9cd 3400 	strd	r3, r4, [sp]
 8029d22:	4632      	mov	r2, r6
 8029d24:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8029d26:	462b      	mov	r3, r5
 8029d28:	4631      	mov	r1, r6
 8029d2a:	f7dd f881 	bl	8006e30 <S2PI_TransferFrame>
 8029d2e:	4607      	mov	r7, r0
 8029d30:	2800      	cmp	r0, #0
 8029d32:	d0ed      	beq.n	8029d10 <ADS_ReadData+0x7c>
 8029d34:	7831      	ldrb	r1, [r6, #0]
 8029d36:	4602      	mov	r2, r0
 8029d38:	480f      	ldr	r0, [pc, #60]	@ (8029d78 <ADS_ReadData+0xe4>)
 8029d3a:	f7dc fbe7 	bl	800650c <print>
 8029d3e:	2302      	movs	r3, #2
 8029d40:	4621      	mov	r1, r4
 8029d42:	4638      	mov	r0, r7
 8029d44:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
 8029d48:	6023      	str	r3, [r4, #0]
 8029d4a:	b003      	add	sp, #12
 8029d4c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8029d50:	f7ff b8da 	b.w	8028f08 <ADS_SPI_Callback>
 8029d54:	f7dc fe1c 	bl	8006990 <IRQ_UNLOCK>
 8029d58:	6827      	ldr	r7, [r4, #0]
 8029d5a:	4638      	mov	r0, r7
 8029d5c:	b003      	add	sp, #12
 8029d5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8029d62:	3410      	adds	r4, #16
 8029d64:	600c      	str	r4, [r1, #0]
 8029d66:	e7d1      	b.n	8029d0c <ADS_ReadData+0x78>
 8029d68:	f06f 0704 	mvn.w	r7, #4
 8029d6c:	e7d0      	b.n	8029d10 <ADS_ReadData+0x7c>
 8029d6e:	bf00      	nop
 8029d70:	240036c4 	.word	0x240036c4
 8029d74:	08028f09 	.word	0x08028f09
 8029d78:	08032844 	.word	0x08032844

08029d7c <ADS_ReadEEPROM>:
 8029d7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8029d80:	4604      	mov	r4, r0
 8029d82:	b087      	sub	sp, #28
 8029d84:	4668      	mov	r0, sp
 8029d86:	4688      	mov	r8, r1
 8029d88:	a901      	add	r1, sp, #4
 8029d8a:	f7dd fa05 	bl	8007198 <Timer_GetCounterValue>
 8029d8e:	f7dc fe21 	bl	80069d4 <IRQ_LOCK>
 8029d92:	6823      	ldr	r3, [r4, #0]
 8029d94:	f8df 9150 	ldr.w	r9, [pc, #336]	@ 8029ee8 <ADS_ReadEEPROM+0x16c>
 8029d98:	4f52      	ldr	r7, [pc, #328]	@ (8029ee4 <ADS_ReadEEPROM+0x168>)
 8029d9a:	f241 06c5 	movw	r6, #4293	@ 0x10c5
 8029d9e:	b35b      	cbz	r3, 8029df8 <ADS_ReadEEPROM+0x7c>
 8029da0:	6825      	ldr	r5, [r4, #0]
 8029da2:	f7dc fdf5 	bl	8006990 <IRQ_UNLOCK>
 8029da6:	a903      	add	r1, sp, #12
 8029da8:	a802      	add	r0, sp, #8
 8029daa:	f7dd f9f5 	bl	8007198 <Timer_GetCounterValue>
 8029dae:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8029db2:	9903      	ldr	r1, [sp, #12]
 8029db4:	9b00      	ldr	r3, [sp, #0]
 8029db6:	428a      	cmp	r2, r1
 8029db8:	bf82      	ittt	hi
 8029dba:	f501 2174 	addhi.w	r1, r1, #999424	@ 0xf4000
 8029dbe:	f100 30ff 	addhi.w	r0, r0, #4294967295
 8029dc2:	f501 7110 	addhi.w	r1, r1, #576	@ 0x240
 8029dc6:	1ac3      	subs	r3, r0, r3
 8029dc8:	1a8a      	subs	r2, r1, r2
 8029dca:	42b3      	cmp	r3, r6
 8029dcc:	f242 710f 	movw	r1, #9999	@ 0x270f
 8029dd0:	f241 0cc6 	movw	ip, #4294	@ 0x10c6
 8029dd4:	fb07 2003 	mla	r0, r7, r3, r2
 8029dd8:	d907      	bls.n	8029dea <ADS_ReadEEPROM+0x6e>
 8029dda:	4563      	cmp	r3, ip
 8029ddc:	d003      	beq.n	8029de6 <ADS_ReadEEPROM+0x6a>
 8029dde:	4628      	mov	r0, r5
 8029de0:	b007      	add	sp, #28
 8029de2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8029de6:	454a      	cmp	r2, r9
 8029de8:	d8f9      	bhi.n	8029dde <ADS_ReadEEPROM+0x62>
 8029dea:	4288      	cmp	r0, r1
 8029dec:	d8f7      	bhi.n	8029dde <ADS_ReadEEPROM+0x62>
 8029dee:	f7dc fdf1 	bl	80069d4 <IRQ_LOCK>
 8029df2:	6823      	ldr	r3, [r4, #0]
 8029df4:	2b00      	cmp	r3, #0
 8029df6:	d1d3      	bne.n	8029da0 <ADS_ReadEEPROM+0x24>
 8029df8:	2302      	movs	r3, #2
 8029dfa:	6023      	str	r3, [r4, #0]
 8029dfc:	f7dc fdc8 	bl	8006990 <IRQ_UNLOCK>
 8029e00:	a901      	add	r1, sp, #4
 8029e02:	4668      	mov	r0, sp
 8029e04:	f7dd f9c8 	bl	8007198 <Timer_GetCounterValue>
 8029e08:	4f37      	ldr	r7, [pc, #220]	@ (8029ee8 <ADS_ReadEEPROM+0x16c>)
 8029e0a:	4d36      	ldr	r5, [pc, #216]	@ (8029ee4 <ADS_ReadEEPROM+0x168>)
 8029e0c:	f241 06c5 	movw	r6, #4293	@ 0x10c5
 8029e10:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8029e12:	f7dd f8cf 	bl	8006fb4 <S2PI_TryGetMutex>
 8029e16:	4603      	mov	r3, r0
 8029e18:	a903      	add	r1, sp, #12
 8029e1a:	a802      	add	r0, sp, #8
 8029e1c:	b313      	cbz	r3, 8029e64 <ADS_ReadEEPROM+0xe8>
 8029e1e:	f7dd f9bb 	bl	8007198 <Timer_GetCounterValue>
 8029e22:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8029e26:	9903      	ldr	r1, [sp, #12]
 8029e28:	9b00      	ldr	r3, [sp, #0]
 8029e2a:	4291      	cmp	r1, r2
 8029e2c:	bf3e      	ittt	cc
 8029e2e:	f501 2174 	addcc.w	r1, r1, #999424	@ 0xf4000
 8029e32:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8029e36:	f501 7110 	addcc.w	r1, r1, #576	@ 0x240
 8029e3a:	1ac3      	subs	r3, r0, r3
 8029e3c:	1a8a      	subs	r2, r1, r2
 8029e3e:	42b3      	cmp	r3, r6
 8029e40:	f242 710f 	movw	r1, #9999	@ 0x270f
 8029e44:	f241 0cc6 	movw	ip, #4294	@ 0x10c6
 8029e48:	fb05 2003 	mla	r0, r5, r3, r2
 8029e4c:	d903      	bls.n	8029e56 <ADS_ReadEEPROM+0xda>
 8029e4e:	4563      	cmp	r3, ip
 8029e50:	d103      	bne.n	8029e5a <ADS_ReadEEPROM+0xde>
 8029e52:	42ba      	cmp	r2, r7
 8029e54:	d801      	bhi.n	8029e5a <ADS_ReadEEPROM+0xde>
 8029e56:	4288      	cmp	r0, r1
 8029e58:	d9da      	bls.n	8029e10 <ADS_ReadEEPROM+0x94>
 8029e5a:	2502      	movs	r5, #2
 8029e5c:	4628      	mov	r0, r5
 8029e5e:	b007      	add	sp, #28
 8029e60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8029e64:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8029e68:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8029e6c:	af02      	add	r7, sp, #8
 8029e6e:	461e      	mov	r6, r3
 8029e70:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8029e72:	463a      	mov	r2, r7
 8029e74:	b2f1      	uxtb	r1, r6
 8029e76:	f7ea fc07 	bl	8014688 <EEPROM_Read>
 8029e7a:	4605      	mov	r5, r0
 8029e7c:	bb18      	cbnz	r0, 8029ec6 <ADS_ReadEEPROM+0x14a>
 8029e7e:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8029e82:	3601      	adds	r6, #1
 8029e84:	b113      	cbz	r3, 8029e8c <ADS_ReadEEPROM+0x110>
 8029e86:	783b      	ldrb	r3, [r7, #0]
 8029e88:	43db      	mvns	r3, r3
 8029e8a:	703b      	strb	r3, [r7, #0]
 8029e8c:	2e10      	cmp	r6, #16
 8029e8e:	f107 0701 	add.w	r7, r7, #1
 8029e92:	d1ed      	bne.n	8029e70 <ADS_ReadEEPROM+0xf4>
 8029e94:	4641      	mov	r1, r8
 8029e96:	a802      	add	r0, sp, #8
 8029e98:	f7ea f836 	bl	8013f08 <hamming_decode>
 8029e9c:	2800      	cmp	r0, #0
 8029e9e:	bf18      	it	ne
 8029ea0:	256d      	movne	r5, #109	@ 0x6d
 8029ea2:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8029ea6:	2200      	movs	r2, #0
 8029ea8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8029eac:	f888 300f 	strb.w	r3, [r8, #15]
 8029eb0:	6022      	str	r2, [r4, #0]
 8029eb2:	f7dc fd8f 	bl	80069d4 <IRQ_LOCK>
 8029eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8029eec <ADS_ReadEEPROM+0x170>)
 8029eb8:	681b      	ldr	r3, [r3, #0]
 8029eba:	b173      	cbz	r3, 8029eda <ADS_ReadEEPROM+0x15e>
 8029ebc:	f7fe ffea 	bl	8028e94 <ADS_TriggerNextTransfer.part.0>
 8029ec0:	f7dc fd66 	bl	8006990 <IRQ_UNLOCK>
 8029ec4:	e78b      	b.n	8029dde <ADS_ReadEEPROM+0x62>
 8029ec6:	4631      	mov	r1, r6
 8029ec8:	4602      	mov	r2, r0
 8029eca:	4809      	ldr	r0, [pc, #36]	@ (8029ef0 <ADS_ReadEEPROM+0x174>)
 8029ecc:	f7dc fb1e 	bl	800650c <print>
 8029ed0:	4641      	mov	r1, r8
 8029ed2:	a802      	add	r0, sp, #8
 8029ed4:	f7ea f818 	bl	8013f08 <hamming_decode>
 8029ed8:	e7e3      	b.n	8029ea2 <ADS_ReadEEPROM+0x126>
 8029eda:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8029edc:	f7dd f88c 	bl	8006ff8 <S2PI_ReleaseMutex>
 8029ee0:	e7ee      	b.n	8029ec0 <ADS_ReadEEPROM+0x144>
 8029ee2:	bf00      	nop
 8029ee4:	000f4240 	.word	0x000f4240
 8029ee8:	000ec27e 	.word	0x000ec27e
 8029eec:	240036c4 	.word	0x240036c4
 8029ef0:	08032ae4 	.word	0x08032ae4

08029ef4 <fp_exp24>:
 8029ef4:	4b60      	ldr	r3, [pc, #384]	@ (802a078 <fp_exp24+0x184>)
 8029ef6:	4403      	add	r3, r0
 8029ef8:	2b00      	cmp	r3, #0
 8029efa:	4602      	mov	r2, r0
 8029efc:	f2c0 80b6 	blt.w	802a06c <fp_exp24+0x178>
 8029f00:	2000      	movs	r0, #0
 8029f02:	461a      	mov	r2, r3
 8029f04:	4601      	mov	r1, r0
 8029f06:	4b5d      	ldr	r3, [pc, #372]	@ (802a07c <fp_exp24+0x188>)
 8029f08:	4413      	add	r3, r2
 8029f0a:	2b00      	cmp	r3, #0
 8029f0c:	bfb8      	it	lt
 8029f0e:	4613      	movlt	r3, r2
 8029f10:	4a5b      	ldr	r2, [pc, #364]	@ (802a080 <fp_exp24+0x18c>)
 8029f12:	441a      	add	r2, r3
 8029f14:	bfb8      	it	lt
 8029f16:	4608      	movlt	r0, r1
 8029f18:	2a00      	cmp	r2, #0
 8029f1a:	bfa8      	it	ge
 8029f1c:	4613      	movge	r3, r2
 8029f1e:	4a59      	ldr	r2, [pc, #356]	@ (802a084 <fp_exp24+0x190>)
 8029f20:	441a      	add	r2, r3
 8029f22:	bfa8      	it	ge
 8029f24:	0080      	lslge	r0, r0, #2
 8029f26:	2a00      	cmp	r2, #0
 8029f28:	bfa8      	it	ge
 8029f2a:	4613      	movge	r3, r2
 8029f2c:	4a56      	ldr	r2, [pc, #344]	@ (802a088 <fp_exp24+0x194>)
 8029f2e:	441a      	add	r2, r3
 8029f30:	bfa8      	it	ge
 8029f32:	0040      	lslge	r0, r0, #1
 8029f34:	2a00      	cmp	r2, #0
 8029f36:	bfa8      	it	ge
 8029f38:	4613      	movge	r3, r2
 8029f3a:	4a54      	ldr	r2, [pc, #336]	@ (802a08c <fp_exp24+0x198>)
 8029f3c:	441a      	add	r2, r3
 8029f3e:	bfa8      	it	ge
 8029f40:	eb00 0050 	addge.w	r0, r0, r0, lsr #1
 8029f44:	2a00      	cmp	r2, #0
 8029f46:	bfa8      	it	ge
 8029f48:	4613      	movge	r3, r2
 8029f4a:	f5a3 12f1 	sub.w	r2, r3, #1974272	@ 0x1e2000
 8029f4e:	f2a2 7207 	subw	r2, r2, #1799	@ 0x707
 8029f52:	bfa8      	it	ge
 8029f54:	eb00 0090 	addge.w	r0, r0, r0, lsr #2
 8029f58:	2a00      	cmp	r2, #0
 8029f5a:	bfa8      	it	ge
 8029f5c:	4613      	movge	r3, r2
 8029f5e:	f5a3 2278 	sub.w	r2, r3, #1015808	@ 0xf8000
 8029f62:	f5a2 62a3 	sub.w	r2, r2, #1304	@ 0x518
 8029f66:	bfa8      	it	ge
 8029f68:	eb00 00d0 	addge.w	r0, r0, r0, lsr #3
 8029f6c:	2a00      	cmp	r2, #0
 8029f6e:	bfa8      	it	ge
 8029f70:	4613      	movge	r3, r2
 8029f72:	f5a3 22fc 	sub.w	r2, r3, #516096	@ 0x7e000
 8029f76:	f1a2 02a7 	sub.w	r2, r2, #167	@ 0xa7
 8029f7a:	bfa8      	it	ge
 8029f7c:	eb00 1010 	addge.w	r0, r0, r0, lsr #4
 8029f80:	2a00      	cmp	r2, #0
 8029f82:	bfa8      	it	ge
 8029f84:	4613      	movge	r3, r2
 8029f86:	f5a3 327e 	sub.w	r2, r3, #260096	@ 0x3f800
 8029f8a:	f1a2 0215 	sub.w	r2, r2, #21
 8029f8e:	bfa8      	it	ge
 8029f90:	eb00 1050 	addge.w	r0, r0, r0, lsr #5
 8029f94:	2a00      	cmp	r2, #0
 8029f96:	bfa8      	it	ge
 8029f98:	4613      	movge	r3, r2
 8029f9a:	f5a3 32ff 	sub.w	r2, r3, #130560	@ 0x1fe00
 8029f9e:	f1a2 0203 	sub.w	r2, r2, #3
 8029fa2:	bfa8      	it	ge
 8029fa4:	eb00 1090 	addge.w	r0, r0, r0, lsr #6
 8029fa8:	2a00      	cmp	r2, #0
 8029faa:	bfa8      	it	ge
 8029fac:	4613      	movge	r3, r2
 8029fae:	f5a3 427f 	sub.w	r2, r3, #65280	@ 0xff00
 8029fb2:	f1a2 0280 	sub.w	r2, r2, #128	@ 0x80
 8029fb6:	bfa8      	it	ge
 8029fb8:	eb00 10d0 	addge.w	r0, r0, r0, lsr #7
 8029fbc:	2a00      	cmp	r2, #0
 8029fbe:	bfa8      	it	ge
 8029fc0:	4613      	movge	r3, r2
 8029fc2:	f5a3 42ff 	sub.w	r2, r3, #32640	@ 0x7f80
 8029fc6:	f1a2 0260 	sub.w	r2, r2, #96	@ 0x60
 8029fca:	bfa8      	it	ge
 8029fcc:	eb00 2010 	addge.w	r0, r0, r0, lsr #8
 8029fd0:	2a00      	cmp	r2, #0
 8029fd2:	bfa8      	it	ge
 8029fd4:	4613      	movge	r3, r2
 8029fd6:	f5a3 527f 	sub.w	r2, r3, #16320	@ 0x3fc0
 8029fda:	f1a2 0238 	sub.w	r2, r2, #56	@ 0x38
 8029fde:	bfa8      	it	ge
 8029fe0:	eb00 2050 	addge.w	r0, r0, r0, lsr #9
 8029fe4:	2a00      	cmp	r2, #0
 8029fe6:	bfa8      	it	ge
 8029fe8:	4613      	movge	r3, r2
 8029fea:	f5a3 52ff 	sub.w	r2, r3, #8160	@ 0x1fe0
 8029fee:	f1a2 021e 	sub.w	r2, r2, #30
 8029ff2:	bfa8      	it	ge
 8029ff4:	eb00 2090 	addge.w	r0, r0, r0, lsr #10
 8029ff8:	2a00      	cmp	r2, #0
 8029ffa:	bfa4      	itt	ge
 8029ffc:	4613      	movge	r3, r2
 8029ffe:	eb00 20d0 	addge.w	r0, r0, r0, lsr #11
 802a002:	04d9      	lsls	r1, r3, #19
 802a004:	bf48      	it	mi
 802a006:	eb00 3010 	addmi.w	r0, r0, r0, lsr #12
 802a00a:	051a      	lsls	r2, r3, #20
 802a00c:	bf48      	it	mi
 802a00e:	eb00 3050 	addmi.w	r0, r0, r0, lsr #13
 802a012:	0559      	lsls	r1, r3, #21
 802a014:	bf48      	it	mi
 802a016:	eb00 3090 	addmi.w	r0, r0, r0, lsr #14
 802a01a:	059a      	lsls	r2, r3, #22
 802a01c:	bf48      	it	mi
 802a01e:	eb00 30d0 	addmi.w	r0, r0, r0, lsr #15
 802a022:	05d9      	lsls	r1, r3, #23
 802a024:	bf48      	it	mi
 802a026:	eb00 4010 	addmi.w	r0, r0, r0, lsr #16
 802a02a:	061a      	lsls	r2, r3, #24
 802a02c:	bf48      	it	mi
 802a02e:	eb00 4050 	addmi.w	r0, r0, r0, lsr #17
 802a032:	0659      	lsls	r1, r3, #25
 802a034:	bf48      	it	mi
 802a036:	eb00 4090 	addmi.w	r0, r0, r0, lsr #18
 802a03a:	069a      	lsls	r2, r3, #26
 802a03c:	bf48      	it	mi
 802a03e:	eb00 40d0 	addmi.w	r0, r0, r0, lsr #19
 802a042:	06d9      	lsls	r1, r3, #27
 802a044:	bf48      	it	mi
 802a046:	eb00 5010 	addmi.w	r0, r0, r0, lsr #20
 802a04a:	071a      	lsls	r2, r3, #28
 802a04c:	bf48      	it	mi
 802a04e:	eb00 5050 	addmi.w	r0, r0, r0, lsr #21
 802a052:	0759      	lsls	r1, r3, #29
 802a054:	bf48      	it	mi
 802a056:	eb00 5090 	addmi.w	r0, r0, r0, lsr #22
 802a05a:	079a      	lsls	r2, r3, #30
 802a05c:	bf48      	it	mi
 802a05e:	eb00 50d0 	addmi.w	r0, r0, r0, lsr #23
 802a062:	07db      	lsls	r3, r3, #31
 802a064:	bf48      	it	mi
 802a066:	eb00 6010 	addmi.w	r0, r0, r0, lsr #24
 802a06a:	4770      	bx	lr
 802a06c:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 802a070:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 802a074:	e747      	b.n	8029f06 <fp_exp24+0x12>
 802a076:	bf00      	nop
 802a078:	fa746f40 	.word	0xfa746f40
 802a07c:	fd3a37a0 	.word	0xfd3a37a0
 802a080:	fe9d1bd0 	.word	0xfe9d1bd0
 802a084:	ff4e8de8 	.word	0xff4e8de8
 802a088:	ff983370 	.word	0xff983370
 802a08c:	ffc6e010 	.word	0xffc6e010

0802a090 <fp_exp16>:
 802a090:	b1c8      	cbz	r0, 802a0c6 <fp_exp16+0x36>
 802a092:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 802a096:	d046      	beq.n	802a126 <fp_exp16+0x96>
 802a098:	b508      	push	{r3, lr}
 802a09a:	4b51      	ldr	r3, [pc, #324]	@ (802a1e0 <fp_exp16+0x150>)
 802a09c:	4298      	cmp	r0, r3
 802a09e:	dc1f      	bgt.n	802a0e0 <fp_exp16+0x50>
 802a0a0:	4b50      	ldr	r3, [pc, #320]	@ (802a1e4 <fp_exp16+0x154>)
 802a0a2:	4298      	cmp	r0, r3
 802a0a4:	db12      	blt.n	802a0cc <fp_exp16+0x3c>
 802a0a6:	2800      	cmp	r0, #0
 802a0a8:	dd1d      	ble.n	802a0e6 <fp_exp16+0x56>
 802a0aa:	4b4f      	ldr	r3, [pc, #316]	@ (802a1e8 <fp_exp16+0x158>)
 802a0ac:	ebb3 2f00 	cmp.w	r3, r0, lsl #8
 802a0b0:	ea4f 2200 	mov.w	r2, r0, lsl #8
 802a0b4:	db0c      	blt.n	802a0d0 <fp_exp16+0x40>
 802a0b6:	4610      	mov	r0, r2
 802a0b8:	f7ff ff1c 	bl	8029ef4 <fp_exp24>
 802a0bc:	f3c0 13c0 	ubfx	r3, r0, #7, #1
 802a0c0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802a0c4:	bd08      	pop	{r3, pc}
 802a0c6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 802a0ca:	4770      	bx	lr
 802a0cc:	2000      	movs	r0, #0
 802a0ce:	bd08      	pop	{r3, pc}
 802a0d0:	01c0      	lsls	r0, r0, #7
 802a0d2:	f7ff ff0f 	bl	8029ef4 <fp_exp24>
 802a0d6:	fba0 3000 	umull	r3, r0, r0, r0
 802a0da:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 802a0de:	bd08      	pop	{r3, pc}
 802a0e0:	f04f 30ff 	mov.w	r0, #4294967295
 802a0e4:	bd08      	pop	{r3, pc}
 802a0e6:	4a40      	ldr	r2, [pc, #256]	@ (802a1e8 <fp_exp16+0x158>)
 802a0e8:	4243      	negs	r3, r0
 802a0ea:	ebb2 2f03 	cmp.w	r2, r3, lsl #8
 802a0ee:	ea4f 2003 	mov.w	r0, r3, lsl #8
 802a0f2:	db1a      	blt.n	802a12a <fp_exp16+0x9a>
 802a0f4:	f7ff fefe 	bl	8029ef4 <fp_exp24>
 802a0f8:	f000 0201 	and.w	r2, r0, #1
 802a0fc:	eb02 0350 	add.w	r3, r2, r0, lsr #1
 802a100:	2b00      	cmp	r3, #0
 802a102:	469c      	mov	ip, r3
 802a104:	d00c      	beq.n	802a120 <fp_exp16+0x90>
 802a106:	db29      	blt.n	802a15c <fp_exp16+0xcc>
 802a108:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 802a10c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 802a110:	d228      	bcs.n	802a164 <fp_exp16+0xd4>
 802a112:	005b      	lsls	r3, r3, #1
 802a114:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 802a118:	ea4f 0242 	mov.w	r2, r2, lsl #1
 802a11c:	d3f9      	bcc.n	802a112 <fp_exp16+0x82>
 802a11e:	bb0a      	cbnz	r2, 802a164 <fp_exp16+0xd4>
 802a120:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 802a124:	bd08      	pop	{r3, pc}
 802a126:	4831      	ldr	r0, [pc, #196]	@ (802a1ec <fp_exp16+0x15c>)
 802a128:	4770      	bx	lr
 802a12a:	01d8      	lsls	r0, r3, #7
 802a12c:	f7ff fee2 	bl	8029ef4 <fp_exp24>
 802a130:	f000 0301 	and.w	r3, r0, #1
 802a134:	eb03 0050 	add.w	r0, r3, r0, lsr #1
 802a138:	2800      	cmp	r0, #0
 802a13a:	4684      	mov	ip, r0
 802a13c:	d00c      	beq.n	802a158 <fp_exp16+0xc8>
 802a13e:	db29      	blt.n	802a194 <fp_exp16+0x104>
 802a140:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 802a144:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 802a148:	d228      	bcs.n	802a19c <fp_exp16+0x10c>
 802a14a:	0040      	lsls	r0, r0, #1
 802a14c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 802a150:	ea4f 0242 	mov.w	r2, r2, lsl #1
 802a154:	d3f9      	bcc.n	802a14a <fp_exp16+0xba>
 802a156:	bb0a      	cbnz	r2, 802a19c <fp_exp16+0x10c>
 802a158:	4825      	ldr	r0, [pc, #148]	@ (802a1f0 <fp_exp16+0x160>)
 802a15a:	bd08      	pop	{r3, pc}
 802a15c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 802a160:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 802a164:	2000      	movs	r0, #0
 802a166:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
 802a16a:	e000      	b.n	802a16e <fp_exp16+0xde>
 802a16c:	b151      	cbz	r1, 802a184 <fp_exp16+0xf4>
 802a16e:	428b      	cmp	r3, r1
 802a170:	bf9c      	itt	ls
 802a172:	1ac9      	subls	r1, r1, r3
 802a174:	4310      	orrls	r0, r2
 802a176:	0852      	lsrs	r2, r2, #1
 802a178:	ea4f 0141 	mov.w	r1, r1, lsl #1
 802a17c:	d1f6      	bne.n	802a16c <fp_exp16+0xdc>
 802a17e:	4299      	cmp	r1, r3
 802a180:	bf28      	it	cs
 802a182:	3001      	addcs	r0, #1
 802a184:	f1bc 0f00 	cmp.w	ip, #0
 802a188:	db28      	blt.n	802a1dc <fp_exp16+0x14c>
 802a18a:	2800      	cmp	r0, #0
 802a18c:	bfb8      	it	lt
 802a18e:	f06f 4000 	mvnlt.w	r0, #2147483648	@ 0x80000000
 802a192:	bd08      	pop	{r3, pc}
 802a194:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 802a198:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 802a19c:	2300      	movs	r3, #0
 802a19e:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
 802a1a2:	e000      	b.n	802a1a6 <fp_exp16+0x116>
 802a1a4:	b151      	cbz	r1, 802a1bc <fp_exp16+0x12c>
 802a1a6:	4281      	cmp	r1, r0
 802a1a8:	bf24      	itt	cs
 802a1aa:	1a09      	subcs	r1, r1, r0
 802a1ac:	4313      	orrcs	r3, r2
 802a1ae:	0852      	lsrs	r2, r2, #1
 802a1b0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 802a1b4:	d1f6      	bne.n	802a1a4 <fp_exp16+0x114>
 802a1b6:	4281      	cmp	r1, r0
 802a1b8:	bf28      	it	cs
 802a1ba:	3301      	addcs	r3, #1
 802a1bc:	f1bc 0f00 	cmp.w	ip, #0
 802a1c0:	db0a      	blt.n	802a1d8 <fp_exp16+0x148>
 802a1c2:	2b00      	cmp	r3, #0
 802a1c4:	dbc8      	blt.n	802a158 <fp_exp16+0xc8>
 802a1c6:	fba3 3203 	umull	r3, r2, r3, r3
 802a1ca:	0c18      	lsrs	r0, r3, #16
 802a1cc:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 802a1d0:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 802a1d4:	4418      	add	r0, r3
 802a1d6:	bd08      	pop	{r3, pc}
 802a1d8:	425b      	negs	r3, r3
 802a1da:	e7f4      	b.n	802a1c6 <fp_exp16+0x136>
 802a1dc:	4240      	negs	r0, r0
 802a1de:	bd08      	pop	{r3, pc}
 802a1e0:	000b1721 	.word	0x000b1721
 802a1e4:	fff4e8df 	.word	0xfff4e8df
 802a1e8:	058b90be 	.word	0x058b90be
 802a1ec:	0002b7e1 	.word	0x0002b7e1
 802a1f0:	ffff0000 	.word	0xffff0000

0802a1f4 <fp_log16>:
 802a1f4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 802a1f8:	f000 809a 	beq.w	802a330 <fp_log16+0x13c>
 802a1fc:	4b50      	ldr	r3, [pc, #320]	@ (802a340 <fp_log16+0x14c>)
 802a1fe:	4298      	cmp	r0, r3
 802a200:	f000 8098 	beq.w	802a334 <fp_log16+0x140>
 802a204:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 802a208:	f200 8085 	bhi.w	802a316 <fp_log16+0x122>
 802a20c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 802a210:	f080 8093 	bcs.w	802a33a <fp_log16+0x146>
 802a214:	4b4b      	ldr	r3, [pc, #300]	@ (802a344 <fp_log16+0x150>)
 802a216:	4a4c      	ldr	r2, [pc, #304]	@ (802a348 <fp_log16+0x154>)
 802a218:	0400      	lsls	r0, r0, #16
 802a21a:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 802a21e:	bf34      	ite	cc
 802a220:	0200      	lslcc	r0, r0, #8
 802a222:	4613      	movcs	r3, r2
 802a224:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
 802a228:	d205      	bcs.n	802a236 <fp_log16+0x42>
 802a22a:	f1a3 7331 	sub.w	r3, r3, #46399488	@ 0x2c40000
 802a22e:	f5a3 33e4 	sub.w	r3, r3, #116736	@ 0x1c800
 802a232:	0100      	lsls	r0, r0, #4
 802a234:	3b60      	subs	r3, #96	@ 0x60
 802a236:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 802a23a:	d205      	bcs.n	802a248 <fp_log16+0x54>
 802a23c:	f1a3 73b1 	sub.w	r3, r3, #23199744	@ 0x1620000
 802a240:	f5a3 4364 	sub.w	r3, r3, #58368	@ 0xe400
 802a244:	0080      	lsls	r0, r0, #2
 802a246:	3b30      	subs	r3, #48	@ 0x30
 802a248:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 802a24c:	d206      	bcs.n	802a25c <fp_log16+0x68>
 802a24e:	f103 437f 	add.w	r3, r3, #4278190080	@ 0xff000000
 802a252:	f503 039d 	add.w	r3, r3, #5144576	@ 0x4e8000
 802a256:	0040      	lsls	r0, r0, #1
 802a258:	f603 53e8 	addw	r3, r3, #3560	@ 0xde8
 802a25c:	eb10 0250 	adds.w	r2, r0, r0, lsr #1
 802a260:	d405      	bmi.n	802a26e <fp_log16+0x7a>
 802a262:	f5a3 03cf 	sub.w	r3, r3, #6782976	@ 0x678000
 802a266:	f5a3 4399 	sub.w	r3, r3, #19584	@ 0x4c80
 802a26a:	3b10      	subs	r3, #16
 802a26c:	4610      	mov	r0, r2
 802a26e:	eb10 0290 	adds.w	r2, r0, r0, lsr #2
 802a272:	d405      	bmi.n	802a280 <fp_log16+0x8c>
 802a274:	f5a3 1364 	sub.w	r3, r3, #3735552	@ 0x390000
 802a278:	f5a3 53ff 	sub.w	r3, r3, #8160	@ 0x1fe0
 802a27c:	3b10      	subs	r3, #16
 802a27e:	4610      	mov	r0, r2
 802a280:	eb10 02d0 	adds.w	r2, r0, r0, lsr #3
 802a284:	d404      	bmi.n	802a290 <fp_log16+0x9c>
 802a286:	f5a3 13f1 	sub.w	r3, r3, #1974272	@ 0x1e2000
 802a28a:	f2a3 7307 	subw	r3, r3, #1799	@ 0x707
 802a28e:	4610      	mov	r0, r2
 802a290:	eb10 1210 	adds.w	r2, r0, r0, lsr #4
 802a294:	d404      	bmi.n	802a2a0 <fp_log16+0xac>
 802a296:	f5a3 2378 	sub.w	r3, r3, #1015808	@ 0xf8000
 802a29a:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 802a29e:	4610      	mov	r0, r2
 802a2a0:	eb10 1250 	adds.w	r2, r0, r0, lsr #5
 802a2a4:	d403      	bmi.n	802a2ae <fp_log16+0xba>
 802a2a6:	f5a3 23fc 	sub.w	r3, r3, #516096	@ 0x7e000
 802a2aa:	3ba7      	subs	r3, #167	@ 0xa7
 802a2ac:	4610      	mov	r0, r2
 802a2ae:	eb10 1290 	adds.w	r2, r0, r0, lsr #6
 802a2b2:	d403      	bmi.n	802a2bc <fp_log16+0xc8>
 802a2b4:	f5a3 337e 	sub.w	r3, r3, #260096	@ 0x3f800
 802a2b8:	3b15      	subs	r3, #21
 802a2ba:	4610      	mov	r0, r2
 802a2bc:	eb10 12d0 	adds.w	r2, r0, r0, lsr #7
 802a2c0:	d403      	bmi.n	802a2ca <fp_log16+0xd6>
 802a2c2:	f5a3 33ff 	sub.w	r3, r3, #130560	@ 0x1fe00
 802a2c6:	3b03      	subs	r3, #3
 802a2c8:	4610      	mov	r0, r2
 802a2ca:	eb10 2210 	adds.w	r2, r0, r0, lsr #8
 802a2ce:	d403      	bmi.n	802a2d8 <fp_log16+0xe4>
 802a2d0:	f5a3 437f 	sub.w	r3, r3, #65280	@ 0xff00
 802a2d4:	3b80      	subs	r3, #128	@ 0x80
 802a2d6:	4610      	mov	r0, r2
 802a2d8:	eb10 2250 	adds.w	r2, r0, r0, lsr #9
 802a2dc:	d403      	bmi.n	802a2e6 <fp_log16+0xf2>
 802a2de:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 802a2e2:	3b60      	subs	r3, #96	@ 0x60
 802a2e4:	4610      	mov	r0, r2
 802a2e6:	eb10 2290 	adds.w	r2, r0, r0, lsr #10
 802a2ea:	d403      	bmi.n	802a2f4 <fp_log16+0x100>
 802a2ec:	f5a3 537f 	sub.w	r3, r3, #16320	@ 0x3fc0
 802a2f0:	3b38      	subs	r3, #56	@ 0x38
 802a2f2:	4610      	mov	r0, r2
 802a2f4:	eb10 22d0 	adds.w	r2, r0, r0, lsr #11
 802a2f8:	d403      	bmi.n	802a302 <fp_log16+0x10e>
 802a2fa:	f5a3 53ff 	sub.w	r3, r3, #8160	@ 0x1fe0
 802a2fe:	3b1e      	subs	r3, #30
 802a300:	4610      	mov	r0, r2
 802a302:	f1c0 4000 	rsb	r0, r0, #2147483648	@ 0x80000000
 802a306:	ebb3 10d0 	subs.w	r0, r3, r0, lsr #7
 802a30a:	d40a      	bmi.n	802a322 <fp_log16+0x12e>
 802a30c:	f3c0 13c0 	ubfx	r3, r0, #7, #1
 802a310:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802a314:	4770      	bx	lr
 802a316:	f000 0201 	and.w	r2, r0, #1
 802a31a:	4b0c      	ldr	r3, [pc, #48]	@ (802a34c <fp_log16+0x158>)
 802a31c:	eb02 0050 	add.w	r0, r2, r0, lsr #1
 802a320:	e792      	b.n	802a248 <fp_log16+0x54>
 802a322:	4240      	negs	r0, r0
 802a324:	f3c0 13c0 	ubfx	r3, r0, #7, #1
 802a328:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802a32c:	4240      	negs	r0, r0
 802a32e:	4770      	bx	lr
 802a330:	2000      	movs	r0, #0
 802a332:	4770      	bx	lr
 802a334:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 802a338:	4770      	bx	lr
 802a33a:	4b05      	ldr	r3, [pc, #20]	@ (802a350 <fp_log16+0x15c>)
 802a33c:	4a05      	ldr	r2, [pc, #20]	@ (802a354 <fp_log16+0x160>)
 802a33e:	e76c      	b.n	802a21a <fp_log16+0x26>
 802a340:	0002b7e1 	.word	0x0002b7e1
 802a344:	f9c2fd29 	.word	0xf9c2fd29
 802a348:	ff4e8de9 	.word	0xff4e8de9
 802a34c:	0b172180 	.word	0x0b172180
 802a350:	04da1ea8 	.word	0x04da1ea8
 802a354:	0a65af68 	.word	0x0a65af68

0802a358 <_ZdlPvj>:
 802a358:	f000 b800 	b.w	802a35c <_ZdlPv>

0802a35c <_ZdlPv>:
 802a35c:	f000 b808 	b.w	802a370 <free>

0802a360 <malloc>:
 802a360:	4b02      	ldr	r3, [pc, #8]	@ (802a36c <malloc+0xc>)
 802a362:	4601      	mov	r1, r0
 802a364:	6818      	ldr	r0, [r3, #0]
 802a366:	f000 b82d 	b.w	802a3c4 <_malloc_r>
 802a36a:	bf00      	nop
 802a36c:	24000078 	.word	0x24000078

0802a370 <free>:
 802a370:	4b02      	ldr	r3, [pc, #8]	@ (802a37c <free+0xc>)
 802a372:	4601      	mov	r1, r0
 802a374:	6818      	ldr	r0, [r3, #0]
 802a376:	f001 bc9d 	b.w	802bcb4 <_free_r>
 802a37a:	bf00      	nop
 802a37c:	24000078 	.word	0x24000078

0802a380 <sbrk_aligned>:
 802a380:	b570      	push	{r4, r5, r6, lr}
 802a382:	4e0f      	ldr	r6, [pc, #60]	@ (802a3c0 <sbrk_aligned+0x40>)
 802a384:	460c      	mov	r4, r1
 802a386:	6831      	ldr	r1, [r6, #0]
 802a388:	4605      	mov	r5, r0
 802a38a:	b911      	cbnz	r1, 802a392 <sbrk_aligned+0x12>
 802a38c:	f000 fe4e 	bl	802b02c <_sbrk_r>
 802a390:	6030      	str	r0, [r6, #0]
 802a392:	4621      	mov	r1, r4
 802a394:	4628      	mov	r0, r5
 802a396:	f000 fe49 	bl	802b02c <_sbrk_r>
 802a39a:	1c43      	adds	r3, r0, #1
 802a39c:	d103      	bne.n	802a3a6 <sbrk_aligned+0x26>
 802a39e:	f04f 34ff 	mov.w	r4, #4294967295
 802a3a2:	4620      	mov	r0, r4
 802a3a4:	bd70      	pop	{r4, r5, r6, pc}
 802a3a6:	1cc4      	adds	r4, r0, #3
 802a3a8:	f024 0403 	bic.w	r4, r4, #3
 802a3ac:	42a0      	cmp	r0, r4
 802a3ae:	d0f8      	beq.n	802a3a2 <sbrk_aligned+0x22>
 802a3b0:	1a21      	subs	r1, r4, r0
 802a3b2:	4628      	mov	r0, r5
 802a3b4:	f000 fe3a 	bl	802b02c <_sbrk_r>
 802a3b8:	3001      	adds	r0, #1
 802a3ba:	d1f2      	bne.n	802a3a2 <sbrk_aligned+0x22>
 802a3bc:	e7ef      	b.n	802a39e <sbrk_aligned+0x1e>
 802a3be:	bf00      	nop
 802a3c0:	240036c8 	.word	0x240036c8

0802a3c4 <_malloc_r>:
 802a3c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a3c8:	1ccd      	adds	r5, r1, #3
 802a3ca:	f025 0503 	bic.w	r5, r5, #3
 802a3ce:	3508      	adds	r5, #8
 802a3d0:	2d0c      	cmp	r5, #12
 802a3d2:	bf38      	it	cc
 802a3d4:	250c      	movcc	r5, #12
 802a3d6:	2d00      	cmp	r5, #0
 802a3d8:	4606      	mov	r6, r0
 802a3da:	db01      	blt.n	802a3e0 <_malloc_r+0x1c>
 802a3dc:	42a9      	cmp	r1, r5
 802a3de:	d904      	bls.n	802a3ea <_malloc_r+0x26>
 802a3e0:	230c      	movs	r3, #12
 802a3e2:	6033      	str	r3, [r6, #0]
 802a3e4:	2000      	movs	r0, #0
 802a3e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a3ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802a4c0 <_malloc_r+0xfc>
 802a3ee:	f000 f869 	bl	802a4c4 <__malloc_lock>
 802a3f2:	f8d8 3000 	ldr.w	r3, [r8]
 802a3f6:	461c      	mov	r4, r3
 802a3f8:	bb44      	cbnz	r4, 802a44c <_malloc_r+0x88>
 802a3fa:	4629      	mov	r1, r5
 802a3fc:	4630      	mov	r0, r6
 802a3fe:	f7ff ffbf 	bl	802a380 <sbrk_aligned>
 802a402:	1c43      	adds	r3, r0, #1
 802a404:	4604      	mov	r4, r0
 802a406:	d158      	bne.n	802a4ba <_malloc_r+0xf6>
 802a408:	f8d8 4000 	ldr.w	r4, [r8]
 802a40c:	4627      	mov	r7, r4
 802a40e:	2f00      	cmp	r7, #0
 802a410:	d143      	bne.n	802a49a <_malloc_r+0xd6>
 802a412:	2c00      	cmp	r4, #0
 802a414:	d04b      	beq.n	802a4ae <_malloc_r+0xea>
 802a416:	6823      	ldr	r3, [r4, #0]
 802a418:	4639      	mov	r1, r7
 802a41a:	4630      	mov	r0, r6
 802a41c:	eb04 0903 	add.w	r9, r4, r3
 802a420:	f000 fe04 	bl	802b02c <_sbrk_r>
 802a424:	4581      	cmp	r9, r0
 802a426:	d142      	bne.n	802a4ae <_malloc_r+0xea>
 802a428:	6821      	ldr	r1, [r4, #0]
 802a42a:	1a6d      	subs	r5, r5, r1
 802a42c:	4629      	mov	r1, r5
 802a42e:	4630      	mov	r0, r6
 802a430:	f7ff ffa6 	bl	802a380 <sbrk_aligned>
 802a434:	3001      	adds	r0, #1
 802a436:	d03a      	beq.n	802a4ae <_malloc_r+0xea>
 802a438:	6823      	ldr	r3, [r4, #0]
 802a43a:	442b      	add	r3, r5
 802a43c:	6023      	str	r3, [r4, #0]
 802a43e:	f8d8 3000 	ldr.w	r3, [r8]
 802a442:	685a      	ldr	r2, [r3, #4]
 802a444:	bb62      	cbnz	r2, 802a4a0 <_malloc_r+0xdc>
 802a446:	f8c8 7000 	str.w	r7, [r8]
 802a44a:	e00f      	b.n	802a46c <_malloc_r+0xa8>
 802a44c:	6822      	ldr	r2, [r4, #0]
 802a44e:	1b52      	subs	r2, r2, r5
 802a450:	d420      	bmi.n	802a494 <_malloc_r+0xd0>
 802a452:	2a0b      	cmp	r2, #11
 802a454:	d917      	bls.n	802a486 <_malloc_r+0xc2>
 802a456:	1961      	adds	r1, r4, r5
 802a458:	42a3      	cmp	r3, r4
 802a45a:	6025      	str	r5, [r4, #0]
 802a45c:	bf18      	it	ne
 802a45e:	6059      	strne	r1, [r3, #4]
 802a460:	6863      	ldr	r3, [r4, #4]
 802a462:	bf08      	it	eq
 802a464:	f8c8 1000 	streq.w	r1, [r8]
 802a468:	5162      	str	r2, [r4, r5]
 802a46a:	604b      	str	r3, [r1, #4]
 802a46c:	4630      	mov	r0, r6
 802a46e:	f000 f82f 	bl	802a4d0 <__malloc_unlock>
 802a472:	f104 000b 	add.w	r0, r4, #11
 802a476:	1d23      	adds	r3, r4, #4
 802a478:	f020 0007 	bic.w	r0, r0, #7
 802a47c:	1ac2      	subs	r2, r0, r3
 802a47e:	bf1c      	itt	ne
 802a480:	1a1b      	subne	r3, r3, r0
 802a482:	50a3      	strne	r3, [r4, r2]
 802a484:	e7af      	b.n	802a3e6 <_malloc_r+0x22>
 802a486:	6862      	ldr	r2, [r4, #4]
 802a488:	42a3      	cmp	r3, r4
 802a48a:	bf0c      	ite	eq
 802a48c:	f8c8 2000 	streq.w	r2, [r8]
 802a490:	605a      	strne	r2, [r3, #4]
 802a492:	e7eb      	b.n	802a46c <_malloc_r+0xa8>
 802a494:	4623      	mov	r3, r4
 802a496:	6864      	ldr	r4, [r4, #4]
 802a498:	e7ae      	b.n	802a3f8 <_malloc_r+0x34>
 802a49a:	463c      	mov	r4, r7
 802a49c:	687f      	ldr	r7, [r7, #4]
 802a49e:	e7b6      	b.n	802a40e <_malloc_r+0x4a>
 802a4a0:	461a      	mov	r2, r3
 802a4a2:	685b      	ldr	r3, [r3, #4]
 802a4a4:	42a3      	cmp	r3, r4
 802a4a6:	d1fb      	bne.n	802a4a0 <_malloc_r+0xdc>
 802a4a8:	2300      	movs	r3, #0
 802a4aa:	6053      	str	r3, [r2, #4]
 802a4ac:	e7de      	b.n	802a46c <_malloc_r+0xa8>
 802a4ae:	230c      	movs	r3, #12
 802a4b0:	6033      	str	r3, [r6, #0]
 802a4b2:	4630      	mov	r0, r6
 802a4b4:	f000 f80c 	bl	802a4d0 <__malloc_unlock>
 802a4b8:	e794      	b.n	802a3e4 <_malloc_r+0x20>
 802a4ba:	6005      	str	r5, [r0, #0]
 802a4bc:	e7d6      	b.n	802a46c <_malloc_r+0xa8>
 802a4be:	bf00      	nop
 802a4c0:	240036cc 	.word	0x240036cc

0802a4c4 <__malloc_lock>:
 802a4c4:	4801      	ldr	r0, [pc, #4]	@ (802a4cc <__malloc_lock+0x8>)
 802a4c6:	f000 bdfe 	b.w	802b0c6 <__retarget_lock_acquire_recursive>
 802a4ca:	bf00      	nop
 802a4cc:	24003810 	.word	0x24003810

0802a4d0 <__malloc_unlock>:
 802a4d0:	4801      	ldr	r0, [pc, #4]	@ (802a4d8 <__malloc_unlock+0x8>)
 802a4d2:	f000 bdf9 	b.w	802b0c8 <__retarget_lock_release_recursive>
 802a4d6:	bf00      	nop
 802a4d8:	24003810 	.word	0x24003810

0802a4dc <__cvt>:
 802a4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a4de:	ed2d 8b02 	vpush	{d8}
 802a4e2:	eeb0 8b40 	vmov.f64	d8, d0
 802a4e6:	b085      	sub	sp, #20
 802a4e8:	4617      	mov	r7, r2
 802a4ea:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802a4ec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802a4ee:	ee18 2a90 	vmov	r2, s17
 802a4f2:	f025 0520 	bic.w	r5, r5, #32
 802a4f6:	2a00      	cmp	r2, #0
 802a4f8:	bfb6      	itet	lt
 802a4fa:	222d      	movlt	r2, #45	@ 0x2d
 802a4fc:	2200      	movge	r2, #0
 802a4fe:	eeb1 8b40 	vneglt.f64	d8, d0
 802a502:	2d46      	cmp	r5, #70	@ 0x46
 802a504:	460c      	mov	r4, r1
 802a506:	701a      	strb	r2, [r3, #0]
 802a508:	d004      	beq.n	802a514 <__cvt+0x38>
 802a50a:	2d45      	cmp	r5, #69	@ 0x45
 802a50c:	d100      	bne.n	802a510 <__cvt+0x34>
 802a50e:	3401      	adds	r4, #1
 802a510:	2102      	movs	r1, #2
 802a512:	e000      	b.n	802a516 <__cvt+0x3a>
 802a514:	2103      	movs	r1, #3
 802a516:	ab03      	add	r3, sp, #12
 802a518:	9301      	str	r3, [sp, #4]
 802a51a:	ab02      	add	r3, sp, #8
 802a51c:	9300      	str	r3, [sp, #0]
 802a51e:	4622      	mov	r2, r4
 802a520:	4633      	mov	r3, r6
 802a522:	eeb0 0b48 	vmov.f64	d0, d8
 802a526:	f000 fe6f 	bl	802b208 <_dtoa_r>
 802a52a:	2d47      	cmp	r5, #71	@ 0x47
 802a52c:	d114      	bne.n	802a558 <__cvt+0x7c>
 802a52e:	07fb      	lsls	r3, r7, #31
 802a530:	d50a      	bpl.n	802a548 <__cvt+0x6c>
 802a532:	1902      	adds	r2, r0, r4
 802a534:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802a538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a53c:	bf08      	it	eq
 802a53e:	9203      	streq	r2, [sp, #12]
 802a540:	2130      	movs	r1, #48	@ 0x30
 802a542:	9b03      	ldr	r3, [sp, #12]
 802a544:	4293      	cmp	r3, r2
 802a546:	d319      	bcc.n	802a57c <__cvt+0xa0>
 802a548:	9b03      	ldr	r3, [sp, #12]
 802a54a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802a54c:	1a1b      	subs	r3, r3, r0
 802a54e:	6013      	str	r3, [r2, #0]
 802a550:	b005      	add	sp, #20
 802a552:	ecbd 8b02 	vpop	{d8}
 802a556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a558:	2d46      	cmp	r5, #70	@ 0x46
 802a55a:	eb00 0204 	add.w	r2, r0, r4
 802a55e:	d1e9      	bne.n	802a534 <__cvt+0x58>
 802a560:	7803      	ldrb	r3, [r0, #0]
 802a562:	2b30      	cmp	r3, #48	@ 0x30
 802a564:	d107      	bne.n	802a576 <__cvt+0x9a>
 802a566:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802a56a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a56e:	bf1c      	itt	ne
 802a570:	f1c4 0401 	rsbne	r4, r4, #1
 802a574:	6034      	strne	r4, [r6, #0]
 802a576:	6833      	ldr	r3, [r6, #0]
 802a578:	441a      	add	r2, r3
 802a57a:	e7db      	b.n	802a534 <__cvt+0x58>
 802a57c:	1c5c      	adds	r4, r3, #1
 802a57e:	9403      	str	r4, [sp, #12]
 802a580:	7019      	strb	r1, [r3, #0]
 802a582:	e7de      	b.n	802a542 <__cvt+0x66>

0802a584 <__exponent>:
 802a584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802a586:	2900      	cmp	r1, #0
 802a588:	bfba      	itte	lt
 802a58a:	4249      	neglt	r1, r1
 802a58c:	232d      	movlt	r3, #45	@ 0x2d
 802a58e:	232b      	movge	r3, #43	@ 0x2b
 802a590:	2909      	cmp	r1, #9
 802a592:	7002      	strb	r2, [r0, #0]
 802a594:	7043      	strb	r3, [r0, #1]
 802a596:	dd29      	ble.n	802a5ec <__exponent+0x68>
 802a598:	f10d 0307 	add.w	r3, sp, #7
 802a59c:	461d      	mov	r5, r3
 802a59e:	270a      	movs	r7, #10
 802a5a0:	461a      	mov	r2, r3
 802a5a2:	fbb1 f6f7 	udiv	r6, r1, r7
 802a5a6:	fb07 1416 	mls	r4, r7, r6, r1
 802a5aa:	3430      	adds	r4, #48	@ 0x30
 802a5ac:	f802 4c01 	strb.w	r4, [r2, #-1]
 802a5b0:	460c      	mov	r4, r1
 802a5b2:	2c63      	cmp	r4, #99	@ 0x63
 802a5b4:	f103 33ff 	add.w	r3, r3, #4294967295
 802a5b8:	4631      	mov	r1, r6
 802a5ba:	dcf1      	bgt.n	802a5a0 <__exponent+0x1c>
 802a5bc:	3130      	adds	r1, #48	@ 0x30
 802a5be:	1e94      	subs	r4, r2, #2
 802a5c0:	f803 1c01 	strb.w	r1, [r3, #-1]
 802a5c4:	1c41      	adds	r1, r0, #1
 802a5c6:	4623      	mov	r3, r4
 802a5c8:	42ab      	cmp	r3, r5
 802a5ca:	d30a      	bcc.n	802a5e2 <__exponent+0x5e>
 802a5cc:	f10d 0309 	add.w	r3, sp, #9
 802a5d0:	1a9b      	subs	r3, r3, r2
 802a5d2:	42ac      	cmp	r4, r5
 802a5d4:	bf88      	it	hi
 802a5d6:	2300      	movhi	r3, #0
 802a5d8:	3302      	adds	r3, #2
 802a5da:	4403      	add	r3, r0
 802a5dc:	1a18      	subs	r0, r3, r0
 802a5de:	b003      	add	sp, #12
 802a5e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a5e2:	f813 6b01 	ldrb.w	r6, [r3], #1
 802a5e6:	f801 6f01 	strb.w	r6, [r1, #1]!
 802a5ea:	e7ed      	b.n	802a5c8 <__exponent+0x44>
 802a5ec:	2330      	movs	r3, #48	@ 0x30
 802a5ee:	3130      	adds	r1, #48	@ 0x30
 802a5f0:	7083      	strb	r3, [r0, #2]
 802a5f2:	70c1      	strb	r1, [r0, #3]
 802a5f4:	1d03      	adds	r3, r0, #4
 802a5f6:	e7f1      	b.n	802a5dc <__exponent+0x58>

0802a5f8 <_printf_float>:
 802a5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a5fc:	b08d      	sub	sp, #52	@ 0x34
 802a5fe:	460c      	mov	r4, r1
 802a600:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 802a604:	4616      	mov	r6, r2
 802a606:	461f      	mov	r7, r3
 802a608:	4605      	mov	r5, r0
 802a60a:	f000 fcd7 	bl	802afbc <_localeconv_r>
 802a60e:	f8d0 b000 	ldr.w	fp, [r0]
 802a612:	4658      	mov	r0, fp
 802a614:	f7d5 fecc 	bl	80003b0 <strlen>
 802a618:	2300      	movs	r3, #0
 802a61a:	930a      	str	r3, [sp, #40]	@ 0x28
 802a61c:	f8d8 3000 	ldr.w	r3, [r8]
 802a620:	f894 9018 	ldrb.w	r9, [r4, #24]
 802a624:	6822      	ldr	r2, [r4, #0]
 802a626:	9005      	str	r0, [sp, #20]
 802a628:	3307      	adds	r3, #7
 802a62a:	f023 0307 	bic.w	r3, r3, #7
 802a62e:	f103 0108 	add.w	r1, r3, #8
 802a632:	f8c8 1000 	str.w	r1, [r8]
 802a636:	ed93 0b00 	vldr	d0, [r3]
 802a63a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 802a898 <_printf_float+0x2a0>
 802a63e:	eeb0 7bc0 	vabs.f64	d7, d0
 802a642:	eeb4 7b46 	vcmp.f64	d7, d6
 802a646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a64a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 802a64e:	dd24      	ble.n	802a69a <_printf_float+0xa2>
 802a650:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 802a654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a658:	d502      	bpl.n	802a660 <_printf_float+0x68>
 802a65a:	232d      	movs	r3, #45	@ 0x2d
 802a65c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802a660:	498f      	ldr	r1, [pc, #572]	@ (802a8a0 <_printf_float+0x2a8>)
 802a662:	4b90      	ldr	r3, [pc, #576]	@ (802a8a4 <_printf_float+0x2ac>)
 802a664:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 802a668:	bf94      	ite	ls
 802a66a:	4688      	movls	r8, r1
 802a66c:	4698      	movhi	r8, r3
 802a66e:	f022 0204 	bic.w	r2, r2, #4
 802a672:	2303      	movs	r3, #3
 802a674:	6123      	str	r3, [r4, #16]
 802a676:	6022      	str	r2, [r4, #0]
 802a678:	f04f 0a00 	mov.w	sl, #0
 802a67c:	9700      	str	r7, [sp, #0]
 802a67e:	4633      	mov	r3, r6
 802a680:	aa0b      	add	r2, sp, #44	@ 0x2c
 802a682:	4621      	mov	r1, r4
 802a684:	4628      	mov	r0, r5
 802a686:	f000 f9d1 	bl	802aa2c <_printf_common>
 802a68a:	3001      	adds	r0, #1
 802a68c:	f040 8089 	bne.w	802a7a2 <_printf_float+0x1aa>
 802a690:	f04f 30ff 	mov.w	r0, #4294967295
 802a694:	b00d      	add	sp, #52	@ 0x34
 802a696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a69a:	eeb4 0b40 	vcmp.f64	d0, d0
 802a69e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a6a2:	d709      	bvc.n	802a6b8 <_printf_float+0xc0>
 802a6a4:	ee10 3a90 	vmov	r3, s1
 802a6a8:	2b00      	cmp	r3, #0
 802a6aa:	bfbc      	itt	lt
 802a6ac:	232d      	movlt	r3, #45	@ 0x2d
 802a6ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 802a6b2:	497d      	ldr	r1, [pc, #500]	@ (802a8a8 <_printf_float+0x2b0>)
 802a6b4:	4b7d      	ldr	r3, [pc, #500]	@ (802a8ac <_printf_float+0x2b4>)
 802a6b6:	e7d5      	b.n	802a664 <_printf_float+0x6c>
 802a6b8:	6863      	ldr	r3, [r4, #4]
 802a6ba:	1c59      	adds	r1, r3, #1
 802a6bc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 802a6c0:	d139      	bne.n	802a736 <_printf_float+0x13e>
 802a6c2:	2306      	movs	r3, #6
 802a6c4:	6063      	str	r3, [r4, #4]
 802a6c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 802a6ca:	2300      	movs	r3, #0
 802a6cc:	6022      	str	r2, [r4, #0]
 802a6ce:	9303      	str	r3, [sp, #12]
 802a6d0:	ab0a      	add	r3, sp, #40	@ 0x28
 802a6d2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 802a6d6:	ab09      	add	r3, sp, #36	@ 0x24
 802a6d8:	9300      	str	r3, [sp, #0]
 802a6da:	6861      	ldr	r1, [r4, #4]
 802a6dc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 802a6e0:	4628      	mov	r0, r5
 802a6e2:	f7ff fefb 	bl	802a4dc <__cvt>
 802a6e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 802a6ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802a6ec:	4680      	mov	r8, r0
 802a6ee:	d129      	bne.n	802a744 <_printf_float+0x14c>
 802a6f0:	1cc8      	adds	r0, r1, #3
 802a6f2:	db02      	blt.n	802a6fa <_printf_float+0x102>
 802a6f4:	6863      	ldr	r3, [r4, #4]
 802a6f6:	4299      	cmp	r1, r3
 802a6f8:	dd41      	ble.n	802a77e <_printf_float+0x186>
 802a6fa:	f1a9 0902 	sub.w	r9, r9, #2
 802a6fe:	fa5f f989 	uxtb.w	r9, r9
 802a702:	3901      	subs	r1, #1
 802a704:	464a      	mov	r2, r9
 802a706:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 802a70a:	9109      	str	r1, [sp, #36]	@ 0x24
 802a70c:	f7ff ff3a 	bl	802a584 <__exponent>
 802a710:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802a712:	1813      	adds	r3, r2, r0
 802a714:	2a01      	cmp	r2, #1
 802a716:	4682      	mov	sl, r0
 802a718:	6123      	str	r3, [r4, #16]
 802a71a:	dc02      	bgt.n	802a722 <_printf_float+0x12a>
 802a71c:	6822      	ldr	r2, [r4, #0]
 802a71e:	07d2      	lsls	r2, r2, #31
 802a720:	d501      	bpl.n	802a726 <_printf_float+0x12e>
 802a722:	3301      	adds	r3, #1
 802a724:	6123      	str	r3, [r4, #16]
 802a726:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 802a72a:	2b00      	cmp	r3, #0
 802a72c:	d0a6      	beq.n	802a67c <_printf_float+0x84>
 802a72e:	232d      	movs	r3, #45	@ 0x2d
 802a730:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802a734:	e7a2      	b.n	802a67c <_printf_float+0x84>
 802a736:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 802a73a:	d1c4      	bne.n	802a6c6 <_printf_float+0xce>
 802a73c:	2b00      	cmp	r3, #0
 802a73e:	d1c2      	bne.n	802a6c6 <_printf_float+0xce>
 802a740:	2301      	movs	r3, #1
 802a742:	e7bf      	b.n	802a6c4 <_printf_float+0xcc>
 802a744:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 802a748:	d9db      	bls.n	802a702 <_printf_float+0x10a>
 802a74a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 802a74e:	d118      	bne.n	802a782 <_printf_float+0x18a>
 802a750:	2900      	cmp	r1, #0
 802a752:	6863      	ldr	r3, [r4, #4]
 802a754:	dd0b      	ble.n	802a76e <_printf_float+0x176>
 802a756:	6121      	str	r1, [r4, #16]
 802a758:	b913      	cbnz	r3, 802a760 <_printf_float+0x168>
 802a75a:	6822      	ldr	r2, [r4, #0]
 802a75c:	07d0      	lsls	r0, r2, #31
 802a75e:	d502      	bpl.n	802a766 <_printf_float+0x16e>
 802a760:	3301      	adds	r3, #1
 802a762:	440b      	add	r3, r1
 802a764:	6123      	str	r3, [r4, #16]
 802a766:	65a1      	str	r1, [r4, #88]	@ 0x58
 802a768:	f04f 0a00 	mov.w	sl, #0
 802a76c:	e7db      	b.n	802a726 <_printf_float+0x12e>
 802a76e:	b913      	cbnz	r3, 802a776 <_printf_float+0x17e>
 802a770:	6822      	ldr	r2, [r4, #0]
 802a772:	07d2      	lsls	r2, r2, #31
 802a774:	d501      	bpl.n	802a77a <_printf_float+0x182>
 802a776:	3302      	adds	r3, #2
 802a778:	e7f4      	b.n	802a764 <_printf_float+0x16c>
 802a77a:	2301      	movs	r3, #1
 802a77c:	e7f2      	b.n	802a764 <_printf_float+0x16c>
 802a77e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 802a782:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a784:	4299      	cmp	r1, r3
 802a786:	db05      	blt.n	802a794 <_printf_float+0x19c>
 802a788:	6823      	ldr	r3, [r4, #0]
 802a78a:	6121      	str	r1, [r4, #16]
 802a78c:	07d8      	lsls	r0, r3, #31
 802a78e:	d5ea      	bpl.n	802a766 <_printf_float+0x16e>
 802a790:	1c4b      	adds	r3, r1, #1
 802a792:	e7e7      	b.n	802a764 <_printf_float+0x16c>
 802a794:	2900      	cmp	r1, #0
 802a796:	bfd4      	ite	le
 802a798:	f1c1 0202 	rsble	r2, r1, #2
 802a79c:	2201      	movgt	r2, #1
 802a79e:	4413      	add	r3, r2
 802a7a0:	e7e0      	b.n	802a764 <_printf_float+0x16c>
 802a7a2:	6823      	ldr	r3, [r4, #0]
 802a7a4:	055a      	lsls	r2, r3, #21
 802a7a6:	d407      	bmi.n	802a7b8 <_printf_float+0x1c0>
 802a7a8:	6923      	ldr	r3, [r4, #16]
 802a7aa:	4642      	mov	r2, r8
 802a7ac:	4631      	mov	r1, r6
 802a7ae:	4628      	mov	r0, r5
 802a7b0:	47b8      	blx	r7
 802a7b2:	3001      	adds	r0, #1
 802a7b4:	d12a      	bne.n	802a80c <_printf_float+0x214>
 802a7b6:	e76b      	b.n	802a690 <_printf_float+0x98>
 802a7b8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 802a7bc:	f240 80e0 	bls.w	802a980 <_printf_float+0x388>
 802a7c0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 802a7c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802a7c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a7cc:	d133      	bne.n	802a836 <_printf_float+0x23e>
 802a7ce:	4a38      	ldr	r2, [pc, #224]	@ (802a8b0 <_printf_float+0x2b8>)
 802a7d0:	2301      	movs	r3, #1
 802a7d2:	4631      	mov	r1, r6
 802a7d4:	4628      	mov	r0, r5
 802a7d6:	47b8      	blx	r7
 802a7d8:	3001      	adds	r0, #1
 802a7da:	f43f af59 	beq.w	802a690 <_printf_float+0x98>
 802a7de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 802a7e2:	4543      	cmp	r3, r8
 802a7e4:	db02      	blt.n	802a7ec <_printf_float+0x1f4>
 802a7e6:	6823      	ldr	r3, [r4, #0]
 802a7e8:	07d8      	lsls	r0, r3, #31
 802a7ea:	d50f      	bpl.n	802a80c <_printf_float+0x214>
 802a7ec:	9b05      	ldr	r3, [sp, #20]
 802a7ee:	465a      	mov	r2, fp
 802a7f0:	4631      	mov	r1, r6
 802a7f2:	4628      	mov	r0, r5
 802a7f4:	47b8      	blx	r7
 802a7f6:	3001      	adds	r0, #1
 802a7f8:	f43f af4a 	beq.w	802a690 <_printf_float+0x98>
 802a7fc:	f04f 0900 	mov.w	r9, #0
 802a800:	f108 38ff 	add.w	r8, r8, #4294967295
 802a804:	f104 0a1a 	add.w	sl, r4, #26
 802a808:	45c8      	cmp	r8, r9
 802a80a:	dc09      	bgt.n	802a820 <_printf_float+0x228>
 802a80c:	6823      	ldr	r3, [r4, #0]
 802a80e:	079b      	lsls	r3, r3, #30
 802a810:	f100 8107 	bmi.w	802aa22 <_printf_float+0x42a>
 802a814:	68e0      	ldr	r0, [r4, #12]
 802a816:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a818:	4298      	cmp	r0, r3
 802a81a:	bfb8      	it	lt
 802a81c:	4618      	movlt	r0, r3
 802a81e:	e739      	b.n	802a694 <_printf_float+0x9c>
 802a820:	2301      	movs	r3, #1
 802a822:	4652      	mov	r2, sl
 802a824:	4631      	mov	r1, r6
 802a826:	4628      	mov	r0, r5
 802a828:	47b8      	blx	r7
 802a82a:	3001      	adds	r0, #1
 802a82c:	f43f af30 	beq.w	802a690 <_printf_float+0x98>
 802a830:	f109 0901 	add.w	r9, r9, #1
 802a834:	e7e8      	b.n	802a808 <_printf_float+0x210>
 802a836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a838:	2b00      	cmp	r3, #0
 802a83a:	dc3b      	bgt.n	802a8b4 <_printf_float+0x2bc>
 802a83c:	4a1c      	ldr	r2, [pc, #112]	@ (802a8b0 <_printf_float+0x2b8>)
 802a83e:	2301      	movs	r3, #1
 802a840:	4631      	mov	r1, r6
 802a842:	4628      	mov	r0, r5
 802a844:	47b8      	blx	r7
 802a846:	3001      	adds	r0, #1
 802a848:	f43f af22 	beq.w	802a690 <_printf_float+0x98>
 802a84c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 802a850:	ea59 0303 	orrs.w	r3, r9, r3
 802a854:	d102      	bne.n	802a85c <_printf_float+0x264>
 802a856:	6823      	ldr	r3, [r4, #0]
 802a858:	07d9      	lsls	r1, r3, #31
 802a85a:	d5d7      	bpl.n	802a80c <_printf_float+0x214>
 802a85c:	9b05      	ldr	r3, [sp, #20]
 802a85e:	465a      	mov	r2, fp
 802a860:	4631      	mov	r1, r6
 802a862:	4628      	mov	r0, r5
 802a864:	47b8      	blx	r7
 802a866:	3001      	adds	r0, #1
 802a868:	f43f af12 	beq.w	802a690 <_printf_float+0x98>
 802a86c:	f04f 0a00 	mov.w	sl, #0
 802a870:	f104 0b1a 	add.w	fp, r4, #26
 802a874:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a876:	425b      	negs	r3, r3
 802a878:	4553      	cmp	r3, sl
 802a87a:	dc01      	bgt.n	802a880 <_printf_float+0x288>
 802a87c:	464b      	mov	r3, r9
 802a87e:	e794      	b.n	802a7aa <_printf_float+0x1b2>
 802a880:	2301      	movs	r3, #1
 802a882:	465a      	mov	r2, fp
 802a884:	4631      	mov	r1, r6
 802a886:	4628      	mov	r0, r5
 802a888:	47b8      	blx	r7
 802a88a:	3001      	adds	r0, #1
 802a88c:	f43f af00 	beq.w	802a690 <_printf_float+0x98>
 802a890:	f10a 0a01 	add.w	sl, sl, #1
 802a894:	e7ee      	b.n	802a874 <_printf_float+0x27c>
 802a896:	bf00      	nop
 802a898:	ffffffff 	.word	0xffffffff
 802a89c:	7fefffff 	.word	0x7fefffff
 802a8a0:	08032b25 	.word	0x08032b25
 802a8a4:	08032b29 	.word	0x08032b29
 802a8a8:	08032b2d 	.word	0x08032b2d
 802a8ac:	08032b31 	.word	0x08032b31
 802a8b0:	08032b35 	.word	0x08032b35
 802a8b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802a8b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 802a8ba:	4553      	cmp	r3, sl
 802a8bc:	bfa8      	it	ge
 802a8be:	4653      	movge	r3, sl
 802a8c0:	2b00      	cmp	r3, #0
 802a8c2:	4699      	mov	r9, r3
 802a8c4:	dc37      	bgt.n	802a936 <_printf_float+0x33e>
 802a8c6:	2300      	movs	r3, #0
 802a8c8:	9307      	str	r3, [sp, #28]
 802a8ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802a8ce:	f104 021a 	add.w	r2, r4, #26
 802a8d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802a8d4:	9907      	ldr	r1, [sp, #28]
 802a8d6:	9306      	str	r3, [sp, #24]
 802a8d8:	eba3 0309 	sub.w	r3, r3, r9
 802a8dc:	428b      	cmp	r3, r1
 802a8de:	dc31      	bgt.n	802a944 <_printf_float+0x34c>
 802a8e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a8e2:	459a      	cmp	sl, r3
 802a8e4:	dc3b      	bgt.n	802a95e <_printf_float+0x366>
 802a8e6:	6823      	ldr	r3, [r4, #0]
 802a8e8:	07da      	lsls	r2, r3, #31
 802a8ea:	d438      	bmi.n	802a95e <_printf_float+0x366>
 802a8ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a8ee:	ebaa 0903 	sub.w	r9, sl, r3
 802a8f2:	9b06      	ldr	r3, [sp, #24]
 802a8f4:	ebaa 0303 	sub.w	r3, sl, r3
 802a8f8:	4599      	cmp	r9, r3
 802a8fa:	bfa8      	it	ge
 802a8fc:	4699      	movge	r9, r3
 802a8fe:	f1b9 0f00 	cmp.w	r9, #0
 802a902:	dc34      	bgt.n	802a96e <_printf_float+0x376>
 802a904:	f04f 0800 	mov.w	r8, #0
 802a908:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802a90c:	f104 0b1a 	add.w	fp, r4, #26
 802a910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a912:	ebaa 0303 	sub.w	r3, sl, r3
 802a916:	eba3 0309 	sub.w	r3, r3, r9
 802a91a:	4543      	cmp	r3, r8
 802a91c:	f77f af76 	ble.w	802a80c <_printf_float+0x214>
 802a920:	2301      	movs	r3, #1
 802a922:	465a      	mov	r2, fp
 802a924:	4631      	mov	r1, r6
 802a926:	4628      	mov	r0, r5
 802a928:	47b8      	blx	r7
 802a92a:	3001      	adds	r0, #1
 802a92c:	f43f aeb0 	beq.w	802a690 <_printf_float+0x98>
 802a930:	f108 0801 	add.w	r8, r8, #1
 802a934:	e7ec      	b.n	802a910 <_printf_float+0x318>
 802a936:	4642      	mov	r2, r8
 802a938:	4631      	mov	r1, r6
 802a93a:	4628      	mov	r0, r5
 802a93c:	47b8      	blx	r7
 802a93e:	3001      	adds	r0, #1
 802a940:	d1c1      	bne.n	802a8c6 <_printf_float+0x2ce>
 802a942:	e6a5      	b.n	802a690 <_printf_float+0x98>
 802a944:	2301      	movs	r3, #1
 802a946:	4631      	mov	r1, r6
 802a948:	4628      	mov	r0, r5
 802a94a:	9206      	str	r2, [sp, #24]
 802a94c:	47b8      	blx	r7
 802a94e:	3001      	adds	r0, #1
 802a950:	f43f ae9e 	beq.w	802a690 <_printf_float+0x98>
 802a954:	9b07      	ldr	r3, [sp, #28]
 802a956:	9a06      	ldr	r2, [sp, #24]
 802a958:	3301      	adds	r3, #1
 802a95a:	9307      	str	r3, [sp, #28]
 802a95c:	e7b9      	b.n	802a8d2 <_printf_float+0x2da>
 802a95e:	9b05      	ldr	r3, [sp, #20]
 802a960:	465a      	mov	r2, fp
 802a962:	4631      	mov	r1, r6
 802a964:	4628      	mov	r0, r5
 802a966:	47b8      	blx	r7
 802a968:	3001      	adds	r0, #1
 802a96a:	d1bf      	bne.n	802a8ec <_printf_float+0x2f4>
 802a96c:	e690      	b.n	802a690 <_printf_float+0x98>
 802a96e:	9a06      	ldr	r2, [sp, #24]
 802a970:	464b      	mov	r3, r9
 802a972:	4442      	add	r2, r8
 802a974:	4631      	mov	r1, r6
 802a976:	4628      	mov	r0, r5
 802a978:	47b8      	blx	r7
 802a97a:	3001      	adds	r0, #1
 802a97c:	d1c2      	bne.n	802a904 <_printf_float+0x30c>
 802a97e:	e687      	b.n	802a690 <_printf_float+0x98>
 802a980:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 802a984:	f1b9 0f01 	cmp.w	r9, #1
 802a988:	dc01      	bgt.n	802a98e <_printf_float+0x396>
 802a98a:	07db      	lsls	r3, r3, #31
 802a98c:	d536      	bpl.n	802a9fc <_printf_float+0x404>
 802a98e:	2301      	movs	r3, #1
 802a990:	4642      	mov	r2, r8
 802a992:	4631      	mov	r1, r6
 802a994:	4628      	mov	r0, r5
 802a996:	47b8      	blx	r7
 802a998:	3001      	adds	r0, #1
 802a99a:	f43f ae79 	beq.w	802a690 <_printf_float+0x98>
 802a99e:	9b05      	ldr	r3, [sp, #20]
 802a9a0:	465a      	mov	r2, fp
 802a9a2:	4631      	mov	r1, r6
 802a9a4:	4628      	mov	r0, r5
 802a9a6:	47b8      	blx	r7
 802a9a8:	3001      	adds	r0, #1
 802a9aa:	f43f ae71 	beq.w	802a690 <_printf_float+0x98>
 802a9ae:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 802a9b2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802a9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a9ba:	f109 39ff 	add.w	r9, r9, #4294967295
 802a9be:	d018      	beq.n	802a9f2 <_printf_float+0x3fa>
 802a9c0:	464b      	mov	r3, r9
 802a9c2:	f108 0201 	add.w	r2, r8, #1
 802a9c6:	4631      	mov	r1, r6
 802a9c8:	4628      	mov	r0, r5
 802a9ca:	47b8      	blx	r7
 802a9cc:	3001      	adds	r0, #1
 802a9ce:	d10c      	bne.n	802a9ea <_printf_float+0x3f2>
 802a9d0:	e65e      	b.n	802a690 <_printf_float+0x98>
 802a9d2:	2301      	movs	r3, #1
 802a9d4:	465a      	mov	r2, fp
 802a9d6:	4631      	mov	r1, r6
 802a9d8:	4628      	mov	r0, r5
 802a9da:	47b8      	blx	r7
 802a9dc:	3001      	adds	r0, #1
 802a9de:	f43f ae57 	beq.w	802a690 <_printf_float+0x98>
 802a9e2:	f108 0801 	add.w	r8, r8, #1
 802a9e6:	45c8      	cmp	r8, r9
 802a9e8:	dbf3      	blt.n	802a9d2 <_printf_float+0x3da>
 802a9ea:	4653      	mov	r3, sl
 802a9ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 802a9f0:	e6dc      	b.n	802a7ac <_printf_float+0x1b4>
 802a9f2:	f04f 0800 	mov.w	r8, #0
 802a9f6:	f104 0b1a 	add.w	fp, r4, #26
 802a9fa:	e7f4      	b.n	802a9e6 <_printf_float+0x3ee>
 802a9fc:	2301      	movs	r3, #1
 802a9fe:	4642      	mov	r2, r8
 802aa00:	e7e1      	b.n	802a9c6 <_printf_float+0x3ce>
 802aa02:	2301      	movs	r3, #1
 802aa04:	464a      	mov	r2, r9
 802aa06:	4631      	mov	r1, r6
 802aa08:	4628      	mov	r0, r5
 802aa0a:	47b8      	blx	r7
 802aa0c:	3001      	adds	r0, #1
 802aa0e:	f43f ae3f 	beq.w	802a690 <_printf_float+0x98>
 802aa12:	f108 0801 	add.w	r8, r8, #1
 802aa16:	68e3      	ldr	r3, [r4, #12]
 802aa18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802aa1a:	1a5b      	subs	r3, r3, r1
 802aa1c:	4543      	cmp	r3, r8
 802aa1e:	dcf0      	bgt.n	802aa02 <_printf_float+0x40a>
 802aa20:	e6f8      	b.n	802a814 <_printf_float+0x21c>
 802aa22:	f04f 0800 	mov.w	r8, #0
 802aa26:	f104 0919 	add.w	r9, r4, #25
 802aa2a:	e7f4      	b.n	802aa16 <_printf_float+0x41e>

0802aa2c <_printf_common>:
 802aa2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802aa30:	4616      	mov	r6, r2
 802aa32:	4698      	mov	r8, r3
 802aa34:	688a      	ldr	r2, [r1, #8]
 802aa36:	690b      	ldr	r3, [r1, #16]
 802aa38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802aa3c:	4293      	cmp	r3, r2
 802aa3e:	bfb8      	it	lt
 802aa40:	4613      	movlt	r3, r2
 802aa42:	6033      	str	r3, [r6, #0]
 802aa44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802aa48:	4607      	mov	r7, r0
 802aa4a:	460c      	mov	r4, r1
 802aa4c:	b10a      	cbz	r2, 802aa52 <_printf_common+0x26>
 802aa4e:	3301      	adds	r3, #1
 802aa50:	6033      	str	r3, [r6, #0]
 802aa52:	6823      	ldr	r3, [r4, #0]
 802aa54:	0699      	lsls	r1, r3, #26
 802aa56:	bf42      	ittt	mi
 802aa58:	6833      	ldrmi	r3, [r6, #0]
 802aa5a:	3302      	addmi	r3, #2
 802aa5c:	6033      	strmi	r3, [r6, #0]
 802aa5e:	6825      	ldr	r5, [r4, #0]
 802aa60:	f015 0506 	ands.w	r5, r5, #6
 802aa64:	d106      	bne.n	802aa74 <_printf_common+0x48>
 802aa66:	f104 0a19 	add.w	sl, r4, #25
 802aa6a:	68e3      	ldr	r3, [r4, #12]
 802aa6c:	6832      	ldr	r2, [r6, #0]
 802aa6e:	1a9b      	subs	r3, r3, r2
 802aa70:	42ab      	cmp	r3, r5
 802aa72:	dc26      	bgt.n	802aac2 <_printf_common+0x96>
 802aa74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802aa78:	6822      	ldr	r2, [r4, #0]
 802aa7a:	3b00      	subs	r3, #0
 802aa7c:	bf18      	it	ne
 802aa7e:	2301      	movne	r3, #1
 802aa80:	0692      	lsls	r2, r2, #26
 802aa82:	d42b      	bmi.n	802aadc <_printf_common+0xb0>
 802aa84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802aa88:	4641      	mov	r1, r8
 802aa8a:	4638      	mov	r0, r7
 802aa8c:	47c8      	blx	r9
 802aa8e:	3001      	adds	r0, #1
 802aa90:	d01e      	beq.n	802aad0 <_printf_common+0xa4>
 802aa92:	6823      	ldr	r3, [r4, #0]
 802aa94:	6922      	ldr	r2, [r4, #16]
 802aa96:	f003 0306 	and.w	r3, r3, #6
 802aa9a:	2b04      	cmp	r3, #4
 802aa9c:	bf02      	ittt	eq
 802aa9e:	68e5      	ldreq	r5, [r4, #12]
 802aaa0:	6833      	ldreq	r3, [r6, #0]
 802aaa2:	1aed      	subeq	r5, r5, r3
 802aaa4:	68a3      	ldr	r3, [r4, #8]
 802aaa6:	bf0c      	ite	eq
 802aaa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802aaac:	2500      	movne	r5, #0
 802aaae:	4293      	cmp	r3, r2
 802aab0:	bfc4      	itt	gt
 802aab2:	1a9b      	subgt	r3, r3, r2
 802aab4:	18ed      	addgt	r5, r5, r3
 802aab6:	2600      	movs	r6, #0
 802aab8:	341a      	adds	r4, #26
 802aaba:	42b5      	cmp	r5, r6
 802aabc:	d11a      	bne.n	802aaf4 <_printf_common+0xc8>
 802aabe:	2000      	movs	r0, #0
 802aac0:	e008      	b.n	802aad4 <_printf_common+0xa8>
 802aac2:	2301      	movs	r3, #1
 802aac4:	4652      	mov	r2, sl
 802aac6:	4641      	mov	r1, r8
 802aac8:	4638      	mov	r0, r7
 802aaca:	47c8      	blx	r9
 802aacc:	3001      	adds	r0, #1
 802aace:	d103      	bne.n	802aad8 <_printf_common+0xac>
 802aad0:	f04f 30ff 	mov.w	r0, #4294967295
 802aad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802aad8:	3501      	adds	r5, #1
 802aada:	e7c6      	b.n	802aa6a <_printf_common+0x3e>
 802aadc:	18e1      	adds	r1, r4, r3
 802aade:	1c5a      	adds	r2, r3, #1
 802aae0:	2030      	movs	r0, #48	@ 0x30
 802aae2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802aae6:	4422      	add	r2, r4
 802aae8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802aaec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802aaf0:	3302      	adds	r3, #2
 802aaf2:	e7c7      	b.n	802aa84 <_printf_common+0x58>
 802aaf4:	2301      	movs	r3, #1
 802aaf6:	4622      	mov	r2, r4
 802aaf8:	4641      	mov	r1, r8
 802aafa:	4638      	mov	r0, r7
 802aafc:	47c8      	blx	r9
 802aafe:	3001      	adds	r0, #1
 802ab00:	d0e6      	beq.n	802aad0 <_printf_common+0xa4>
 802ab02:	3601      	adds	r6, #1
 802ab04:	e7d9      	b.n	802aaba <_printf_common+0x8e>
	...

0802ab08 <_printf_i>:
 802ab08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802ab0c:	7e0f      	ldrb	r7, [r1, #24]
 802ab0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802ab10:	2f78      	cmp	r7, #120	@ 0x78
 802ab12:	4691      	mov	r9, r2
 802ab14:	4680      	mov	r8, r0
 802ab16:	460c      	mov	r4, r1
 802ab18:	469a      	mov	sl, r3
 802ab1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802ab1e:	d807      	bhi.n	802ab30 <_printf_i+0x28>
 802ab20:	2f62      	cmp	r7, #98	@ 0x62
 802ab22:	d80a      	bhi.n	802ab3a <_printf_i+0x32>
 802ab24:	2f00      	cmp	r7, #0
 802ab26:	f000 80d2 	beq.w	802acce <_printf_i+0x1c6>
 802ab2a:	2f58      	cmp	r7, #88	@ 0x58
 802ab2c:	f000 80b9 	beq.w	802aca2 <_printf_i+0x19a>
 802ab30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802ab34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802ab38:	e03a      	b.n	802abb0 <_printf_i+0xa8>
 802ab3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802ab3e:	2b15      	cmp	r3, #21
 802ab40:	d8f6      	bhi.n	802ab30 <_printf_i+0x28>
 802ab42:	a101      	add	r1, pc, #4	@ (adr r1, 802ab48 <_printf_i+0x40>)
 802ab44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802ab48:	0802aba1 	.word	0x0802aba1
 802ab4c:	0802abb5 	.word	0x0802abb5
 802ab50:	0802ab31 	.word	0x0802ab31
 802ab54:	0802ab31 	.word	0x0802ab31
 802ab58:	0802ab31 	.word	0x0802ab31
 802ab5c:	0802ab31 	.word	0x0802ab31
 802ab60:	0802abb5 	.word	0x0802abb5
 802ab64:	0802ab31 	.word	0x0802ab31
 802ab68:	0802ab31 	.word	0x0802ab31
 802ab6c:	0802ab31 	.word	0x0802ab31
 802ab70:	0802ab31 	.word	0x0802ab31
 802ab74:	0802acb5 	.word	0x0802acb5
 802ab78:	0802abdf 	.word	0x0802abdf
 802ab7c:	0802ac6f 	.word	0x0802ac6f
 802ab80:	0802ab31 	.word	0x0802ab31
 802ab84:	0802ab31 	.word	0x0802ab31
 802ab88:	0802acd7 	.word	0x0802acd7
 802ab8c:	0802ab31 	.word	0x0802ab31
 802ab90:	0802abdf 	.word	0x0802abdf
 802ab94:	0802ab31 	.word	0x0802ab31
 802ab98:	0802ab31 	.word	0x0802ab31
 802ab9c:	0802ac77 	.word	0x0802ac77
 802aba0:	6833      	ldr	r3, [r6, #0]
 802aba2:	1d1a      	adds	r2, r3, #4
 802aba4:	681b      	ldr	r3, [r3, #0]
 802aba6:	6032      	str	r2, [r6, #0]
 802aba8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802abac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802abb0:	2301      	movs	r3, #1
 802abb2:	e09d      	b.n	802acf0 <_printf_i+0x1e8>
 802abb4:	6833      	ldr	r3, [r6, #0]
 802abb6:	6820      	ldr	r0, [r4, #0]
 802abb8:	1d19      	adds	r1, r3, #4
 802abba:	6031      	str	r1, [r6, #0]
 802abbc:	0606      	lsls	r6, r0, #24
 802abbe:	d501      	bpl.n	802abc4 <_printf_i+0xbc>
 802abc0:	681d      	ldr	r5, [r3, #0]
 802abc2:	e003      	b.n	802abcc <_printf_i+0xc4>
 802abc4:	0645      	lsls	r5, r0, #25
 802abc6:	d5fb      	bpl.n	802abc0 <_printf_i+0xb8>
 802abc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 802abcc:	2d00      	cmp	r5, #0
 802abce:	da03      	bge.n	802abd8 <_printf_i+0xd0>
 802abd0:	232d      	movs	r3, #45	@ 0x2d
 802abd2:	426d      	negs	r5, r5
 802abd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802abd8:	4859      	ldr	r0, [pc, #356]	@ (802ad40 <_printf_i+0x238>)
 802abda:	230a      	movs	r3, #10
 802abdc:	e011      	b.n	802ac02 <_printf_i+0xfa>
 802abde:	6821      	ldr	r1, [r4, #0]
 802abe0:	6833      	ldr	r3, [r6, #0]
 802abe2:	0608      	lsls	r0, r1, #24
 802abe4:	f853 5b04 	ldr.w	r5, [r3], #4
 802abe8:	d402      	bmi.n	802abf0 <_printf_i+0xe8>
 802abea:	0649      	lsls	r1, r1, #25
 802abec:	bf48      	it	mi
 802abee:	b2ad      	uxthmi	r5, r5
 802abf0:	2f6f      	cmp	r7, #111	@ 0x6f
 802abf2:	4853      	ldr	r0, [pc, #332]	@ (802ad40 <_printf_i+0x238>)
 802abf4:	6033      	str	r3, [r6, #0]
 802abf6:	bf14      	ite	ne
 802abf8:	230a      	movne	r3, #10
 802abfa:	2308      	moveq	r3, #8
 802abfc:	2100      	movs	r1, #0
 802abfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802ac02:	6866      	ldr	r6, [r4, #4]
 802ac04:	60a6      	str	r6, [r4, #8]
 802ac06:	2e00      	cmp	r6, #0
 802ac08:	bfa2      	ittt	ge
 802ac0a:	6821      	ldrge	r1, [r4, #0]
 802ac0c:	f021 0104 	bicge.w	r1, r1, #4
 802ac10:	6021      	strge	r1, [r4, #0]
 802ac12:	b90d      	cbnz	r5, 802ac18 <_printf_i+0x110>
 802ac14:	2e00      	cmp	r6, #0
 802ac16:	d04b      	beq.n	802acb0 <_printf_i+0x1a8>
 802ac18:	4616      	mov	r6, r2
 802ac1a:	fbb5 f1f3 	udiv	r1, r5, r3
 802ac1e:	fb03 5711 	mls	r7, r3, r1, r5
 802ac22:	5dc7      	ldrb	r7, [r0, r7]
 802ac24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802ac28:	462f      	mov	r7, r5
 802ac2a:	42bb      	cmp	r3, r7
 802ac2c:	460d      	mov	r5, r1
 802ac2e:	d9f4      	bls.n	802ac1a <_printf_i+0x112>
 802ac30:	2b08      	cmp	r3, #8
 802ac32:	d10b      	bne.n	802ac4c <_printf_i+0x144>
 802ac34:	6823      	ldr	r3, [r4, #0]
 802ac36:	07df      	lsls	r7, r3, #31
 802ac38:	d508      	bpl.n	802ac4c <_printf_i+0x144>
 802ac3a:	6923      	ldr	r3, [r4, #16]
 802ac3c:	6861      	ldr	r1, [r4, #4]
 802ac3e:	4299      	cmp	r1, r3
 802ac40:	bfde      	ittt	le
 802ac42:	2330      	movle	r3, #48	@ 0x30
 802ac44:	f806 3c01 	strble.w	r3, [r6, #-1]
 802ac48:	f106 36ff 	addle.w	r6, r6, #4294967295
 802ac4c:	1b92      	subs	r2, r2, r6
 802ac4e:	6122      	str	r2, [r4, #16]
 802ac50:	f8cd a000 	str.w	sl, [sp]
 802ac54:	464b      	mov	r3, r9
 802ac56:	aa03      	add	r2, sp, #12
 802ac58:	4621      	mov	r1, r4
 802ac5a:	4640      	mov	r0, r8
 802ac5c:	f7ff fee6 	bl	802aa2c <_printf_common>
 802ac60:	3001      	adds	r0, #1
 802ac62:	d14a      	bne.n	802acfa <_printf_i+0x1f2>
 802ac64:	f04f 30ff 	mov.w	r0, #4294967295
 802ac68:	b004      	add	sp, #16
 802ac6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ac6e:	6823      	ldr	r3, [r4, #0]
 802ac70:	f043 0320 	orr.w	r3, r3, #32
 802ac74:	6023      	str	r3, [r4, #0]
 802ac76:	4833      	ldr	r0, [pc, #204]	@ (802ad44 <_printf_i+0x23c>)
 802ac78:	2778      	movs	r7, #120	@ 0x78
 802ac7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802ac7e:	6823      	ldr	r3, [r4, #0]
 802ac80:	6831      	ldr	r1, [r6, #0]
 802ac82:	061f      	lsls	r7, r3, #24
 802ac84:	f851 5b04 	ldr.w	r5, [r1], #4
 802ac88:	d402      	bmi.n	802ac90 <_printf_i+0x188>
 802ac8a:	065f      	lsls	r7, r3, #25
 802ac8c:	bf48      	it	mi
 802ac8e:	b2ad      	uxthmi	r5, r5
 802ac90:	6031      	str	r1, [r6, #0]
 802ac92:	07d9      	lsls	r1, r3, #31
 802ac94:	bf44      	itt	mi
 802ac96:	f043 0320 	orrmi.w	r3, r3, #32
 802ac9a:	6023      	strmi	r3, [r4, #0]
 802ac9c:	b11d      	cbz	r5, 802aca6 <_printf_i+0x19e>
 802ac9e:	2310      	movs	r3, #16
 802aca0:	e7ac      	b.n	802abfc <_printf_i+0xf4>
 802aca2:	4827      	ldr	r0, [pc, #156]	@ (802ad40 <_printf_i+0x238>)
 802aca4:	e7e9      	b.n	802ac7a <_printf_i+0x172>
 802aca6:	6823      	ldr	r3, [r4, #0]
 802aca8:	f023 0320 	bic.w	r3, r3, #32
 802acac:	6023      	str	r3, [r4, #0]
 802acae:	e7f6      	b.n	802ac9e <_printf_i+0x196>
 802acb0:	4616      	mov	r6, r2
 802acb2:	e7bd      	b.n	802ac30 <_printf_i+0x128>
 802acb4:	6833      	ldr	r3, [r6, #0]
 802acb6:	6825      	ldr	r5, [r4, #0]
 802acb8:	6961      	ldr	r1, [r4, #20]
 802acba:	1d18      	adds	r0, r3, #4
 802acbc:	6030      	str	r0, [r6, #0]
 802acbe:	062e      	lsls	r6, r5, #24
 802acc0:	681b      	ldr	r3, [r3, #0]
 802acc2:	d501      	bpl.n	802acc8 <_printf_i+0x1c0>
 802acc4:	6019      	str	r1, [r3, #0]
 802acc6:	e002      	b.n	802acce <_printf_i+0x1c6>
 802acc8:	0668      	lsls	r0, r5, #25
 802acca:	d5fb      	bpl.n	802acc4 <_printf_i+0x1bc>
 802accc:	8019      	strh	r1, [r3, #0]
 802acce:	2300      	movs	r3, #0
 802acd0:	6123      	str	r3, [r4, #16]
 802acd2:	4616      	mov	r6, r2
 802acd4:	e7bc      	b.n	802ac50 <_printf_i+0x148>
 802acd6:	6833      	ldr	r3, [r6, #0]
 802acd8:	1d1a      	adds	r2, r3, #4
 802acda:	6032      	str	r2, [r6, #0]
 802acdc:	681e      	ldr	r6, [r3, #0]
 802acde:	6862      	ldr	r2, [r4, #4]
 802ace0:	2100      	movs	r1, #0
 802ace2:	4630      	mov	r0, r6
 802ace4:	f7d5 fb14 	bl	8000310 <memchr>
 802ace8:	b108      	cbz	r0, 802acee <_printf_i+0x1e6>
 802acea:	1b80      	subs	r0, r0, r6
 802acec:	6060      	str	r0, [r4, #4]
 802acee:	6863      	ldr	r3, [r4, #4]
 802acf0:	6123      	str	r3, [r4, #16]
 802acf2:	2300      	movs	r3, #0
 802acf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802acf8:	e7aa      	b.n	802ac50 <_printf_i+0x148>
 802acfa:	6923      	ldr	r3, [r4, #16]
 802acfc:	4632      	mov	r2, r6
 802acfe:	4649      	mov	r1, r9
 802ad00:	4640      	mov	r0, r8
 802ad02:	47d0      	blx	sl
 802ad04:	3001      	adds	r0, #1
 802ad06:	d0ad      	beq.n	802ac64 <_printf_i+0x15c>
 802ad08:	6823      	ldr	r3, [r4, #0]
 802ad0a:	079b      	lsls	r3, r3, #30
 802ad0c:	d413      	bmi.n	802ad36 <_printf_i+0x22e>
 802ad0e:	68e0      	ldr	r0, [r4, #12]
 802ad10:	9b03      	ldr	r3, [sp, #12]
 802ad12:	4298      	cmp	r0, r3
 802ad14:	bfb8      	it	lt
 802ad16:	4618      	movlt	r0, r3
 802ad18:	e7a6      	b.n	802ac68 <_printf_i+0x160>
 802ad1a:	2301      	movs	r3, #1
 802ad1c:	4632      	mov	r2, r6
 802ad1e:	4649      	mov	r1, r9
 802ad20:	4640      	mov	r0, r8
 802ad22:	47d0      	blx	sl
 802ad24:	3001      	adds	r0, #1
 802ad26:	d09d      	beq.n	802ac64 <_printf_i+0x15c>
 802ad28:	3501      	adds	r5, #1
 802ad2a:	68e3      	ldr	r3, [r4, #12]
 802ad2c:	9903      	ldr	r1, [sp, #12]
 802ad2e:	1a5b      	subs	r3, r3, r1
 802ad30:	42ab      	cmp	r3, r5
 802ad32:	dcf2      	bgt.n	802ad1a <_printf_i+0x212>
 802ad34:	e7eb      	b.n	802ad0e <_printf_i+0x206>
 802ad36:	2500      	movs	r5, #0
 802ad38:	f104 0619 	add.w	r6, r4, #25
 802ad3c:	e7f5      	b.n	802ad2a <_printf_i+0x222>
 802ad3e:	bf00      	nop
 802ad40:	08032b37 	.word	0x08032b37
 802ad44:	08032b48 	.word	0x08032b48

0802ad48 <std>:
 802ad48:	2300      	movs	r3, #0
 802ad4a:	b510      	push	{r4, lr}
 802ad4c:	4604      	mov	r4, r0
 802ad4e:	e9c0 3300 	strd	r3, r3, [r0]
 802ad52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802ad56:	6083      	str	r3, [r0, #8]
 802ad58:	8181      	strh	r1, [r0, #12]
 802ad5a:	6643      	str	r3, [r0, #100]	@ 0x64
 802ad5c:	81c2      	strh	r2, [r0, #14]
 802ad5e:	6183      	str	r3, [r0, #24]
 802ad60:	4619      	mov	r1, r3
 802ad62:	2208      	movs	r2, #8
 802ad64:	305c      	adds	r0, #92	@ 0x5c
 802ad66:	f000 f920 	bl	802afaa <memset>
 802ad6a:	4b0d      	ldr	r3, [pc, #52]	@ (802ada0 <std+0x58>)
 802ad6c:	6263      	str	r3, [r4, #36]	@ 0x24
 802ad6e:	4b0d      	ldr	r3, [pc, #52]	@ (802ada4 <std+0x5c>)
 802ad70:	62a3      	str	r3, [r4, #40]	@ 0x28
 802ad72:	4b0d      	ldr	r3, [pc, #52]	@ (802ada8 <std+0x60>)
 802ad74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802ad76:	4b0d      	ldr	r3, [pc, #52]	@ (802adac <std+0x64>)
 802ad78:	6323      	str	r3, [r4, #48]	@ 0x30
 802ad7a:	4b0d      	ldr	r3, [pc, #52]	@ (802adb0 <std+0x68>)
 802ad7c:	6224      	str	r4, [r4, #32]
 802ad7e:	429c      	cmp	r4, r3
 802ad80:	d006      	beq.n	802ad90 <std+0x48>
 802ad82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802ad86:	4294      	cmp	r4, r2
 802ad88:	d002      	beq.n	802ad90 <std+0x48>
 802ad8a:	33d0      	adds	r3, #208	@ 0xd0
 802ad8c:	429c      	cmp	r4, r3
 802ad8e:	d105      	bne.n	802ad9c <std+0x54>
 802ad90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802ad94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802ad98:	f000 b994 	b.w	802b0c4 <__retarget_lock_init_recursive>
 802ad9c:	bd10      	pop	{r4, pc}
 802ad9e:	bf00      	nop
 802ada0:	0802aef1 	.word	0x0802aef1
 802ada4:	0802af13 	.word	0x0802af13
 802ada8:	0802af4b 	.word	0x0802af4b
 802adac:	0802af6f 	.word	0x0802af6f
 802adb0:	240036d0 	.word	0x240036d0

0802adb4 <stdio_exit_handler>:
 802adb4:	4a02      	ldr	r2, [pc, #8]	@ (802adc0 <stdio_exit_handler+0xc>)
 802adb6:	4903      	ldr	r1, [pc, #12]	@ (802adc4 <stdio_exit_handler+0x10>)
 802adb8:	4803      	ldr	r0, [pc, #12]	@ (802adc8 <stdio_exit_handler+0x14>)
 802adba:	f000 b869 	b.w	802ae90 <_fwalk_sglue>
 802adbe:	bf00      	nop
 802adc0:	2400006c 	.word	0x2400006c
 802adc4:	0802c7d9 	.word	0x0802c7d9
 802adc8:	2400007c 	.word	0x2400007c

0802adcc <cleanup_stdio>:
 802adcc:	6841      	ldr	r1, [r0, #4]
 802adce:	4b0c      	ldr	r3, [pc, #48]	@ (802ae00 <cleanup_stdio+0x34>)
 802add0:	4299      	cmp	r1, r3
 802add2:	b510      	push	{r4, lr}
 802add4:	4604      	mov	r4, r0
 802add6:	d001      	beq.n	802addc <cleanup_stdio+0x10>
 802add8:	f001 fcfe 	bl	802c7d8 <_fflush_r>
 802addc:	68a1      	ldr	r1, [r4, #8]
 802adde:	4b09      	ldr	r3, [pc, #36]	@ (802ae04 <cleanup_stdio+0x38>)
 802ade0:	4299      	cmp	r1, r3
 802ade2:	d002      	beq.n	802adea <cleanup_stdio+0x1e>
 802ade4:	4620      	mov	r0, r4
 802ade6:	f001 fcf7 	bl	802c7d8 <_fflush_r>
 802adea:	68e1      	ldr	r1, [r4, #12]
 802adec:	4b06      	ldr	r3, [pc, #24]	@ (802ae08 <cleanup_stdio+0x3c>)
 802adee:	4299      	cmp	r1, r3
 802adf0:	d004      	beq.n	802adfc <cleanup_stdio+0x30>
 802adf2:	4620      	mov	r0, r4
 802adf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802adf8:	f001 bcee 	b.w	802c7d8 <_fflush_r>
 802adfc:	bd10      	pop	{r4, pc}
 802adfe:	bf00      	nop
 802ae00:	240036d0 	.word	0x240036d0
 802ae04:	24003738 	.word	0x24003738
 802ae08:	240037a0 	.word	0x240037a0

0802ae0c <global_stdio_init.part.0>:
 802ae0c:	b510      	push	{r4, lr}
 802ae0e:	4b0b      	ldr	r3, [pc, #44]	@ (802ae3c <global_stdio_init.part.0+0x30>)
 802ae10:	4c0b      	ldr	r4, [pc, #44]	@ (802ae40 <global_stdio_init.part.0+0x34>)
 802ae12:	4a0c      	ldr	r2, [pc, #48]	@ (802ae44 <global_stdio_init.part.0+0x38>)
 802ae14:	601a      	str	r2, [r3, #0]
 802ae16:	4620      	mov	r0, r4
 802ae18:	2200      	movs	r2, #0
 802ae1a:	2104      	movs	r1, #4
 802ae1c:	f7ff ff94 	bl	802ad48 <std>
 802ae20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802ae24:	2201      	movs	r2, #1
 802ae26:	2109      	movs	r1, #9
 802ae28:	f7ff ff8e 	bl	802ad48 <std>
 802ae2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802ae30:	2202      	movs	r2, #2
 802ae32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802ae36:	2112      	movs	r1, #18
 802ae38:	f7ff bf86 	b.w	802ad48 <std>
 802ae3c:	24003808 	.word	0x24003808
 802ae40:	240036d0 	.word	0x240036d0
 802ae44:	0802adb5 	.word	0x0802adb5

0802ae48 <__sfp_lock_acquire>:
 802ae48:	4801      	ldr	r0, [pc, #4]	@ (802ae50 <__sfp_lock_acquire+0x8>)
 802ae4a:	f000 b93c 	b.w	802b0c6 <__retarget_lock_acquire_recursive>
 802ae4e:	bf00      	nop
 802ae50:	24003811 	.word	0x24003811

0802ae54 <__sfp_lock_release>:
 802ae54:	4801      	ldr	r0, [pc, #4]	@ (802ae5c <__sfp_lock_release+0x8>)
 802ae56:	f000 b937 	b.w	802b0c8 <__retarget_lock_release_recursive>
 802ae5a:	bf00      	nop
 802ae5c:	24003811 	.word	0x24003811

0802ae60 <__sinit>:
 802ae60:	b510      	push	{r4, lr}
 802ae62:	4604      	mov	r4, r0
 802ae64:	f7ff fff0 	bl	802ae48 <__sfp_lock_acquire>
 802ae68:	6a23      	ldr	r3, [r4, #32]
 802ae6a:	b11b      	cbz	r3, 802ae74 <__sinit+0x14>
 802ae6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802ae70:	f7ff bff0 	b.w	802ae54 <__sfp_lock_release>
 802ae74:	4b04      	ldr	r3, [pc, #16]	@ (802ae88 <__sinit+0x28>)
 802ae76:	6223      	str	r3, [r4, #32]
 802ae78:	4b04      	ldr	r3, [pc, #16]	@ (802ae8c <__sinit+0x2c>)
 802ae7a:	681b      	ldr	r3, [r3, #0]
 802ae7c:	2b00      	cmp	r3, #0
 802ae7e:	d1f5      	bne.n	802ae6c <__sinit+0xc>
 802ae80:	f7ff ffc4 	bl	802ae0c <global_stdio_init.part.0>
 802ae84:	e7f2      	b.n	802ae6c <__sinit+0xc>
 802ae86:	bf00      	nop
 802ae88:	0802adcd 	.word	0x0802adcd
 802ae8c:	24003808 	.word	0x24003808

0802ae90 <_fwalk_sglue>:
 802ae90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ae94:	4607      	mov	r7, r0
 802ae96:	4688      	mov	r8, r1
 802ae98:	4614      	mov	r4, r2
 802ae9a:	2600      	movs	r6, #0
 802ae9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802aea0:	f1b9 0901 	subs.w	r9, r9, #1
 802aea4:	d505      	bpl.n	802aeb2 <_fwalk_sglue+0x22>
 802aea6:	6824      	ldr	r4, [r4, #0]
 802aea8:	2c00      	cmp	r4, #0
 802aeaa:	d1f7      	bne.n	802ae9c <_fwalk_sglue+0xc>
 802aeac:	4630      	mov	r0, r6
 802aeae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802aeb2:	89ab      	ldrh	r3, [r5, #12]
 802aeb4:	2b01      	cmp	r3, #1
 802aeb6:	d907      	bls.n	802aec8 <_fwalk_sglue+0x38>
 802aeb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802aebc:	3301      	adds	r3, #1
 802aebe:	d003      	beq.n	802aec8 <_fwalk_sglue+0x38>
 802aec0:	4629      	mov	r1, r5
 802aec2:	4638      	mov	r0, r7
 802aec4:	47c0      	blx	r8
 802aec6:	4306      	orrs	r6, r0
 802aec8:	3568      	adds	r5, #104	@ 0x68
 802aeca:	e7e9      	b.n	802aea0 <_fwalk_sglue+0x10>

0802aecc <iprintf>:
 802aecc:	b40f      	push	{r0, r1, r2, r3}
 802aece:	b507      	push	{r0, r1, r2, lr}
 802aed0:	4906      	ldr	r1, [pc, #24]	@ (802aeec <iprintf+0x20>)
 802aed2:	ab04      	add	r3, sp, #16
 802aed4:	6808      	ldr	r0, [r1, #0]
 802aed6:	f853 2b04 	ldr.w	r2, [r3], #4
 802aeda:	6881      	ldr	r1, [r0, #8]
 802aedc:	9301      	str	r3, [sp, #4]
 802aede:	f001 fadf 	bl	802c4a0 <_vfiprintf_r>
 802aee2:	b003      	add	sp, #12
 802aee4:	f85d eb04 	ldr.w	lr, [sp], #4
 802aee8:	b004      	add	sp, #16
 802aeea:	4770      	bx	lr
 802aeec:	24000078 	.word	0x24000078

0802aef0 <__sread>:
 802aef0:	b510      	push	{r4, lr}
 802aef2:	460c      	mov	r4, r1
 802aef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802aef8:	f000 f886 	bl	802b008 <_read_r>
 802aefc:	2800      	cmp	r0, #0
 802aefe:	bfab      	itete	ge
 802af00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802af02:	89a3      	ldrhlt	r3, [r4, #12]
 802af04:	181b      	addge	r3, r3, r0
 802af06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802af0a:	bfac      	ite	ge
 802af0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 802af0e:	81a3      	strhlt	r3, [r4, #12]
 802af10:	bd10      	pop	{r4, pc}

0802af12 <__swrite>:
 802af12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802af16:	461f      	mov	r7, r3
 802af18:	898b      	ldrh	r3, [r1, #12]
 802af1a:	05db      	lsls	r3, r3, #23
 802af1c:	4605      	mov	r5, r0
 802af1e:	460c      	mov	r4, r1
 802af20:	4616      	mov	r6, r2
 802af22:	d505      	bpl.n	802af30 <__swrite+0x1e>
 802af24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802af28:	2302      	movs	r3, #2
 802af2a:	2200      	movs	r2, #0
 802af2c:	f000 f85a 	bl	802afe4 <_lseek_r>
 802af30:	89a3      	ldrh	r3, [r4, #12]
 802af32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802af36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802af3a:	81a3      	strh	r3, [r4, #12]
 802af3c:	4632      	mov	r2, r6
 802af3e:	463b      	mov	r3, r7
 802af40:	4628      	mov	r0, r5
 802af42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802af46:	f000 b881 	b.w	802b04c <_write_r>

0802af4a <__sseek>:
 802af4a:	b510      	push	{r4, lr}
 802af4c:	460c      	mov	r4, r1
 802af4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802af52:	f000 f847 	bl	802afe4 <_lseek_r>
 802af56:	1c43      	adds	r3, r0, #1
 802af58:	89a3      	ldrh	r3, [r4, #12]
 802af5a:	bf15      	itete	ne
 802af5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 802af5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802af62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802af66:	81a3      	strheq	r3, [r4, #12]
 802af68:	bf18      	it	ne
 802af6a:	81a3      	strhne	r3, [r4, #12]
 802af6c:	bd10      	pop	{r4, pc}

0802af6e <__sclose>:
 802af6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802af72:	f000 b827 	b.w	802afc4 <_close_r>

0802af76 <memmove>:
 802af76:	4288      	cmp	r0, r1
 802af78:	b510      	push	{r4, lr}
 802af7a:	eb01 0402 	add.w	r4, r1, r2
 802af7e:	d902      	bls.n	802af86 <memmove+0x10>
 802af80:	4284      	cmp	r4, r0
 802af82:	4623      	mov	r3, r4
 802af84:	d807      	bhi.n	802af96 <memmove+0x20>
 802af86:	1e43      	subs	r3, r0, #1
 802af88:	42a1      	cmp	r1, r4
 802af8a:	d008      	beq.n	802af9e <memmove+0x28>
 802af8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 802af90:	f803 2f01 	strb.w	r2, [r3, #1]!
 802af94:	e7f8      	b.n	802af88 <memmove+0x12>
 802af96:	4402      	add	r2, r0
 802af98:	4601      	mov	r1, r0
 802af9a:	428a      	cmp	r2, r1
 802af9c:	d100      	bne.n	802afa0 <memmove+0x2a>
 802af9e:	bd10      	pop	{r4, pc}
 802afa0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802afa4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802afa8:	e7f7      	b.n	802af9a <memmove+0x24>

0802afaa <memset>:
 802afaa:	4402      	add	r2, r0
 802afac:	4603      	mov	r3, r0
 802afae:	4293      	cmp	r3, r2
 802afb0:	d100      	bne.n	802afb4 <memset+0xa>
 802afb2:	4770      	bx	lr
 802afb4:	f803 1b01 	strb.w	r1, [r3], #1
 802afb8:	e7f9      	b.n	802afae <memset+0x4>
	...

0802afbc <_localeconv_r>:
 802afbc:	4800      	ldr	r0, [pc, #0]	@ (802afc0 <_localeconv_r+0x4>)
 802afbe:	4770      	bx	lr
 802afc0:	240001b8 	.word	0x240001b8

0802afc4 <_close_r>:
 802afc4:	b538      	push	{r3, r4, r5, lr}
 802afc6:	4d06      	ldr	r5, [pc, #24]	@ (802afe0 <_close_r+0x1c>)
 802afc8:	2300      	movs	r3, #0
 802afca:	4604      	mov	r4, r0
 802afcc:	4608      	mov	r0, r1
 802afce:	602b      	str	r3, [r5, #0]
 802afd0:	f7de f9cb 	bl	800936a <_close>
 802afd4:	1c43      	adds	r3, r0, #1
 802afd6:	d102      	bne.n	802afde <_close_r+0x1a>
 802afd8:	682b      	ldr	r3, [r5, #0]
 802afda:	b103      	cbz	r3, 802afde <_close_r+0x1a>
 802afdc:	6023      	str	r3, [r4, #0]
 802afde:	bd38      	pop	{r3, r4, r5, pc}
 802afe0:	2400380c 	.word	0x2400380c

0802afe4 <_lseek_r>:
 802afe4:	b538      	push	{r3, r4, r5, lr}
 802afe6:	4d07      	ldr	r5, [pc, #28]	@ (802b004 <_lseek_r+0x20>)
 802afe8:	4604      	mov	r4, r0
 802afea:	4608      	mov	r0, r1
 802afec:	4611      	mov	r1, r2
 802afee:	2200      	movs	r2, #0
 802aff0:	602a      	str	r2, [r5, #0]
 802aff2:	461a      	mov	r2, r3
 802aff4:	f7de f9e0 	bl	80093b8 <_lseek>
 802aff8:	1c43      	adds	r3, r0, #1
 802affa:	d102      	bne.n	802b002 <_lseek_r+0x1e>
 802affc:	682b      	ldr	r3, [r5, #0]
 802affe:	b103      	cbz	r3, 802b002 <_lseek_r+0x1e>
 802b000:	6023      	str	r3, [r4, #0]
 802b002:	bd38      	pop	{r3, r4, r5, pc}
 802b004:	2400380c 	.word	0x2400380c

0802b008 <_read_r>:
 802b008:	b538      	push	{r3, r4, r5, lr}
 802b00a:	4d07      	ldr	r5, [pc, #28]	@ (802b028 <_read_r+0x20>)
 802b00c:	4604      	mov	r4, r0
 802b00e:	4608      	mov	r0, r1
 802b010:	4611      	mov	r1, r2
 802b012:	2200      	movs	r2, #0
 802b014:	602a      	str	r2, [r5, #0]
 802b016:	461a      	mov	r2, r3
 802b018:	f7de f96e 	bl	80092f8 <_read>
 802b01c:	1c43      	adds	r3, r0, #1
 802b01e:	d102      	bne.n	802b026 <_read_r+0x1e>
 802b020:	682b      	ldr	r3, [r5, #0]
 802b022:	b103      	cbz	r3, 802b026 <_read_r+0x1e>
 802b024:	6023      	str	r3, [r4, #0]
 802b026:	bd38      	pop	{r3, r4, r5, pc}
 802b028:	2400380c 	.word	0x2400380c

0802b02c <_sbrk_r>:
 802b02c:	b538      	push	{r3, r4, r5, lr}
 802b02e:	4d06      	ldr	r5, [pc, #24]	@ (802b048 <_sbrk_r+0x1c>)
 802b030:	2300      	movs	r3, #0
 802b032:	4604      	mov	r4, r0
 802b034:	4608      	mov	r0, r1
 802b036:	602b      	str	r3, [r5, #0]
 802b038:	f7de f9cc 	bl	80093d4 <_sbrk>
 802b03c:	1c43      	adds	r3, r0, #1
 802b03e:	d102      	bne.n	802b046 <_sbrk_r+0x1a>
 802b040:	682b      	ldr	r3, [r5, #0]
 802b042:	b103      	cbz	r3, 802b046 <_sbrk_r+0x1a>
 802b044:	6023      	str	r3, [r4, #0]
 802b046:	bd38      	pop	{r3, r4, r5, pc}
 802b048:	2400380c 	.word	0x2400380c

0802b04c <_write_r>:
 802b04c:	b538      	push	{r3, r4, r5, lr}
 802b04e:	4d07      	ldr	r5, [pc, #28]	@ (802b06c <_write_r+0x20>)
 802b050:	4604      	mov	r4, r0
 802b052:	4608      	mov	r0, r1
 802b054:	4611      	mov	r1, r2
 802b056:	2200      	movs	r2, #0
 802b058:	602a      	str	r2, [r5, #0]
 802b05a:	461a      	mov	r2, r3
 802b05c:	f7de f969 	bl	8009332 <_write>
 802b060:	1c43      	adds	r3, r0, #1
 802b062:	d102      	bne.n	802b06a <_write_r+0x1e>
 802b064:	682b      	ldr	r3, [r5, #0]
 802b066:	b103      	cbz	r3, 802b06a <_write_r+0x1e>
 802b068:	6023      	str	r3, [r4, #0]
 802b06a:	bd38      	pop	{r3, r4, r5, pc}
 802b06c:	2400380c 	.word	0x2400380c

0802b070 <__errno>:
 802b070:	4b01      	ldr	r3, [pc, #4]	@ (802b078 <__errno+0x8>)
 802b072:	6818      	ldr	r0, [r3, #0]
 802b074:	4770      	bx	lr
 802b076:	bf00      	nop
 802b078:	24000078 	.word	0x24000078

0802b07c <__libc_init_array>:
 802b07c:	b570      	push	{r4, r5, r6, lr}
 802b07e:	4d0d      	ldr	r5, [pc, #52]	@ (802b0b4 <__libc_init_array+0x38>)
 802b080:	4c0d      	ldr	r4, [pc, #52]	@ (802b0b8 <__libc_init_array+0x3c>)
 802b082:	1b64      	subs	r4, r4, r5
 802b084:	10a4      	asrs	r4, r4, #2
 802b086:	2600      	movs	r6, #0
 802b088:	42a6      	cmp	r6, r4
 802b08a:	d109      	bne.n	802b0a0 <__libc_init_array+0x24>
 802b08c:	4d0b      	ldr	r5, [pc, #44]	@ (802b0bc <__libc_init_array+0x40>)
 802b08e:	4c0c      	ldr	r4, [pc, #48]	@ (802b0c0 <__libc_init_array+0x44>)
 802b090:	f001 fd16 	bl	802cac0 <_init>
 802b094:	1b64      	subs	r4, r4, r5
 802b096:	10a4      	asrs	r4, r4, #2
 802b098:	2600      	movs	r6, #0
 802b09a:	42a6      	cmp	r6, r4
 802b09c:	d105      	bne.n	802b0aa <__libc_init_array+0x2e>
 802b09e:	bd70      	pop	{r4, r5, r6, pc}
 802b0a0:	f855 3b04 	ldr.w	r3, [r5], #4
 802b0a4:	4798      	blx	r3
 802b0a6:	3601      	adds	r6, #1
 802b0a8:	e7ee      	b.n	802b088 <__libc_init_array+0xc>
 802b0aa:	f855 3b04 	ldr.w	r3, [r5], #4
 802b0ae:	4798      	blx	r3
 802b0b0:	3601      	adds	r6, #1
 802b0b2:	e7f2      	b.n	802b09a <__libc_init_array+0x1e>
 802b0b4:	08032e64 	.word	0x08032e64
 802b0b8:	08032e64 	.word	0x08032e64
 802b0bc:	08032e64 	.word	0x08032e64
 802b0c0:	08032e6c 	.word	0x08032e6c

0802b0c4 <__retarget_lock_init_recursive>:
 802b0c4:	4770      	bx	lr

0802b0c6 <__retarget_lock_acquire_recursive>:
 802b0c6:	4770      	bx	lr

0802b0c8 <__retarget_lock_release_recursive>:
 802b0c8:	4770      	bx	lr

0802b0ca <strcpy>:
 802b0ca:	4603      	mov	r3, r0
 802b0cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 802b0d0:	f803 2b01 	strb.w	r2, [r3], #1
 802b0d4:	2a00      	cmp	r2, #0
 802b0d6:	d1f9      	bne.n	802b0cc <strcpy+0x2>
 802b0d8:	4770      	bx	lr

0802b0da <memcpy>:
 802b0da:	440a      	add	r2, r1
 802b0dc:	4291      	cmp	r1, r2
 802b0de:	f100 33ff 	add.w	r3, r0, #4294967295
 802b0e2:	d100      	bne.n	802b0e6 <memcpy+0xc>
 802b0e4:	4770      	bx	lr
 802b0e6:	b510      	push	{r4, lr}
 802b0e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 802b0ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 802b0f0:	4291      	cmp	r1, r2
 802b0f2:	d1f9      	bne.n	802b0e8 <memcpy+0xe>
 802b0f4:	bd10      	pop	{r4, pc}

0802b0f6 <quorem>:
 802b0f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b0fa:	6903      	ldr	r3, [r0, #16]
 802b0fc:	690c      	ldr	r4, [r1, #16]
 802b0fe:	42a3      	cmp	r3, r4
 802b100:	4607      	mov	r7, r0
 802b102:	db7e      	blt.n	802b202 <quorem+0x10c>
 802b104:	3c01      	subs	r4, #1
 802b106:	f101 0814 	add.w	r8, r1, #20
 802b10a:	00a3      	lsls	r3, r4, #2
 802b10c:	f100 0514 	add.w	r5, r0, #20
 802b110:	9300      	str	r3, [sp, #0]
 802b112:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802b116:	9301      	str	r3, [sp, #4]
 802b118:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802b11c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802b120:	3301      	adds	r3, #1
 802b122:	429a      	cmp	r2, r3
 802b124:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802b128:	fbb2 f6f3 	udiv	r6, r2, r3
 802b12c:	d32e      	bcc.n	802b18c <quorem+0x96>
 802b12e:	f04f 0a00 	mov.w	sl, #0
 802b132:	46c4      	mov	ip, r8
 802b134:	46ae      	mov	lr, r5
 802b136:	46d3      	mov	fp, sl
 802b138:	f85c 3b04 	ldr.w	r3, [ip], #4
 802b13c:	b298      	uxth	r0, r3
 802b13e:	fb06 a000 	mla	r0, r6, r0, sl
 802b142:	0c02      	lsrs	r2, r0, #16
 802b144:	0c1b      	lsrs	r3, r3, #16
 802b146:	fb06 2303 	mla	r3, r6, r3, r2
 802b14a:	f8de 2000 	ldr.w	r2, [lr]
 802b14e:	b280      	uxth	r0, r0
 802b150:	b292      	uxth	r2, r2
 802b152:	1a12      	subs	r2, r2, r0
 802b154:	445a      	add	r2, fp
 802b156:	f8de 0000 	ldr.w	r0, [lr]
 802b15a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802b15e:	b29b      	uxth	r3, r3
 802b160:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 802b164:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 802b168:	b292      	uxth	r2, r2
 802b16a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 802b16e:	45e1      	cmp	r9, ip
 802b170:	f84e 2b04 	str.w	r2, [lr], #4
 802b174:	ea4f 4b23 	mov.w	fp, r3, asr #16
 802b178:	d2de      	bcs.n	802b138 <quorem+0x42>
 802b17a:	9b00      	ldr	r3, [sp, #0]
 802b17c:	58eb      	ldr	r3, [r5, r3]
 802b17e:	b92b      	cbnz	r3, 802b18c <quorem+0x96>
 802b180:	9b01      	ldr	r3, [sp, #4]
 802b182:	3b04      	subs	r3, #4
 802b184:	429d      	cmp	r5, r3
 802b186:	461a      	mov	r2, r3
 802b188:	d32f      	bcc.n	802b1ea <quorem+0xf4>
 802b18a:	613c      	str	r4, [r7, #16]
 802b18c:	4638      	mov	r0, r7
 802b18e:	f001 f855 	bl	802c23c <__mcmp>
 802b192:	2800      	cmp	r0, #0
 802b194:	db25      	blt.n	802b1e2 <quorem+0xec>
 802b196:	4629      	mov	r1, r5
 802b198:	2000      	movs	r0, #0
 802b19a:	f858 2b04 	ldr.w	r2, [r8], #4
 802b19e:	f8d1 c000 	ldr.w	ip, [r1]
 802b1a2:	fa1f fe82 	uxth.w	lr, r2
 802b1a6:	fa1f f38c 	uxth.w	r3, ip
 802b1aa:	eba3 030e 	sub.w	r3, r3, lr
 802b1ae:	4403      	add	r3, r0
 802b1b0:	0c12      	lsrs	r2, r2, #16
 802b1b2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 802b1b6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 802b1ba:	b29b      	uxth	r3, r3
 802b1bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802b1c0:	45c1      	cmp	r9, r8
 802b1c2:	f841 3b04 	str.w	r3, [r1], #4
 802b1c6:	ea4f 4022 	mov.w	r0, r2, asr #16
 802b1ca:	d2e6      	bcs.n	802b19a <quorem+0xa4>
 802b1cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802b1d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802b1d4:	b922      	cbnz	r2, 802b1e0 <quorem+0xea>
 802b1d6:	3b04      	subs	r3, #4
 802b1d8:	429d      	cmp	r5, r3
 802b1da:	461a      	mov	r2, r3
 802b1dc:	d30b      	bcc.n	802b1f6 <quorem+0x100>
 802b1de:	613c      	str	r4, [r7, #16]
 802b1e0:	3601      	adds	r6, #1
 802b1e2:	4630      	mov	r0, r6
 802b1e4:	b003      	add	sp, #12
 802b1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b1ea:	6812      	ldr	r2, [r2, #0]
 802b1ec:	3b04      	subs	r3, #4
 802b1ee:	2a00      	cmp	r2, #0
 802b1f0:	d1cb      	bne.n	802b18a <quorem+0x94>
 802b1f2:	3c01      	subs	r4, #1
 802b1f4:	e7c6      	b.n	802b184 <quorem+0x8e>
 802b1f6:	6812      	ldr	r2, [r2, #0]
 802b1f8:	3b04      	subs	r3, #4
 802b1fa:	2a00      	cmp	r2, #0
 802b1fc:	d1ef      	bne.n	802b1de <quorem+0xe8>
 802b1fe:	3c01      	subs	r4, #1
 802b200:	e7ea      	b.n	802b1d8 <quorem+0xe2>
 802b202:	2000      	movs	r0, #0
 802b204:	e7ee      	b.n	802b1e4 <quorem+0xee>
	...

0802b208 <_dtoa_r>:
 802b208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b20c:	ed2d 8b02 	vpush	{d8}
 802b210:	69c7      	ldr	r7, [r0, #28]
 802b212:	b091      	sub	sp, #68	@ 0x44
 802b214:	ed8d 0b02 	vstr	d0, [sp, #8]
 802b218:	ec55 4b10 	vmov	r4, r5, d0
 802b21c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 802b21e:	9107      	str	r1, [sp, #28]
 802b220:	4681      	mov	r9, r0
 802b222:	9209      	str	r2, [sp, #36]	@ 0x24
 802b224:	930d      	str	r3, [sp, #52]	@ 0x34
 802b226:	b97f      	cbnz	r7, 802b248 <_dtoa_r+0x40>
 802b228:	2010      	movs	r0, #16
 802b22a:	f7ff f899 	bl	802a360 <malloc>
 802b22e:	4602      	mov	r2, r0
 802b230:	f8c9 001c 	str.w	r0, [r9, #28]
 802b234:	b920      	cbnz	r0, 802b240 <_dtoa_r+0x38>
 802b236:	4ba0      	ldr	r3, [pc, #640]	@ (802b4b8 <_dtoa_r+0x2b0>)
 802b238:	21ef      	movs	r1, #239	@ 0xef
 802b23a:	48a0      	ldr	r0, [pc, #640]	@ (802b4bc <_dtoa_r+0x2b4>)
 802b23c:	f7dc fb34 	bl	80078a8 <__assert_func>
 802b240:	e9c0 7701 	strd	r7, r7, [r0, #4]
 802b244:	6007      	str	r7, [r0, #0]
 802b246:	60c7      	str	r7, [r0, #12]
 802b248:	f8d9 301c 	ldr.w	r3, [r9, #28]
 802b24c:	6819      	ldr	r1, [r3, #0]
 802b24e:	b159      	cbz	r1, 802b268 <_dtoa_r+0x60>
 802b250:	685a      	ldr	r2, [r3, #4]
 802b252:	604a      	str	r2, [r1, #4]
 802b254:	2301      	movs	r3, #1
 802b256:	4093      	lsls	r3, r2
 802b258:	608b      	str	r3, [r1, #8]
 802b25a:	4648      	mov	r0, r9
 802b25c:	f000 fdb4 	bl	802bdc8 <_Bfree>
 802b260:	f8d9 301c 	ldr.w	r3, [r9, #28]
 802b264:	2200      	movs	r2, #0
 802b266:	601a      	str	r2, [r3, #0]
 802b268:	1e2b      	subs	r3, r5, #0
 802b26a:	bfbb      	ittet	lt
 802b26c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 802b270:	9303      	strlt	r3, [sp, #12]
 802b272:	2300      	movge	r3, #0
 802b274:	2201      	movlt	r2, #1
 802b276:	bfac      	ite	ge
 802b278:	6033      	strge	r3, [r6, #0]
 802b27a:	6032      	strlt	r2, [r6, #0]
 802b27c:	4b90      	ldr	r3, [pc, #576]	@ (802b4c0 <_dtoa_r+0x2b8>)
 802b27e:	9e03      	ldr	r6, [sp, #12]
 802b280:	43b3      	bics	r3, r6
 802b282:	d110      	bne.n	802b2a6 <_dtoa_r+0x9e>
 802b284:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802b286:	f242 730f 	movw	r3, #9999	@ 0x270f
 802b28a:	6013      	str	r3, [r2, #0]
 802b28c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 802b290:	4323      	orrs	r3, r4
 802b292:	f000 84de 	beq.w	802bc52 <_dtoa_r+0xa4a>
 802b296:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802b298:	4f8a      	ldr	r7, [pc, #552]	@ (802b4c4 <_dtoa_r+0x2bc>)
 802b29a:	2b00      	cmp	r3, #0
 802b29c:	f000 84e0 	beq.w	802bc60 <_dtoa_r+0xa58>
 802b2a0:	1cfb      	adds	r3, r7, #3
 802b2a2:	f000 bcdb 	b.w	802bc5c <_dtoa_r+0xa54>
 802b2a6:	ed9d 8b02 	vldr	d8, [sp, #8]
 802b2aa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802b2ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b2b2:	d10a      	bne.n	802b2ca <_dtoa_r+0xc2>
 802b2b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802b2b6:	2301      	movs	r3, #1
 802b2b8:	6013      	str	r3, [r2, #0]
 802b2ba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802b2bc:	b113      	cbz	r3, 802b2c4 <_dtoa_r+0xbc>
 802b2be:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 802b2c0:	4b81      	ldr	r3, [pc, #516]	@ (802b4c8 <_dtoa_r+0x2c0>)
 802b2c2:	6013      	str	r3, [r2, #0]
 802b2c4:	4f81      	ldr	r7, [pc, #516]	@ (802b4cc <_dtoa_r+0x2c4>)
 802b2c6:	f000 bccb 	b.w	802bc60 <_dtoa_r+0xa58>
 802b2ca:	aa0e      	add	r2, sp, #56	@ 0x38
 802b2cc:	a90f      	add	r1, sp, #60	@ 0x3c
 802b2ce:	4648      	mov	r0, r9
 802b2d0:	eeb0 0b48 	vmov.f64	d0, d8
 802b2d4:	f001 f862 	bl	802c39c <__d2b>
 802b2d8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 802b2dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802b2de:	9001      	str	r0, [sp, #4]
 802b2e0:	2b00      	cmp	r3, #0
 802b2e2:	d045      	beq.n	802b370 <_dtoa_r+0x168>
 802b2e4:	eeb0 7b48 	vmov.f64	d7, d8
 802b2e8:	ee18 1a90 	vmov	r1, s17
 802b2ec:	f3c1 0113 	ubfx	r1, r1, #0, #20
 802b2f0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 802b2f4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 802b2f8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 802b2fc:	2500      	movs	r5, #0
 802b2fe:	ee07 1a90 	vmov	s15, r1
 802b302:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 802b306:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 802b4a0 <_dtoa_r+0x298>
 802b30a:	ee37 7b46 	vsub.f64	d7, d7, d6
 802b30e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 802b4a8 <_dtoa_r+0x2a0>
 802b312:	eea7 6b05 	vfma.f64	d6, d7, d5
 802b316:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 802b4b0 <_dtoa_r+0x2a8>
 802b31a:	ee07 3a90 	vmov	s15, r3
 802b31e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 802b322:	eeb0 7b46 	vmov.f64	d7, d6
 802b326:	eea4 7b05 	vfma.f64	d7, d4, d5
 802b32a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 802b32e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 802b332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b336:	ee16 8a90 	vmov	r8, s13
 802b33a:	d508      	bpl.n	802b34e <_dtoa_r+0x146>
 802b33c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 802b340:	eeb4 6b47 	vcmp.f64	d6, d7
 802b344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b348:	bf18      	it	ne
 802b34a:	f108 38ff 	addne.w	r8, r8, #4294967295
 802b34e:	f1b8 0f16 	cmp.w	r8, #22
 802b352:	d82b      	bhi.n	802b3ac <_dtoa_r+0x1a4>
 802b354:	495e      	ldr	r1, [pc, #376]	@ (802b4d0 <_dtoa_r+0x2c8>)
 802b356:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 802b35a:	ed91 7b00 	vldr	d7, [r1]
 802b35e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802b362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b366:	d501      	bpl.n	802b36c <_dtoa_r+0x164>
 802b368:	f108 38ff 	add.w	r8, r8, #4294967295
 802b36c:	2100      	movs	r1, #0
 802b36e:	e01e      	b.n	802b3ae <_dtoa_r+0x1a6>
 802b370:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802b372:	4413      	add	r3, r2
 802b374:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 802b378:	2920      	cmp	r1, #32
 802b37a:	bfc1      	itttt	gt
 802b37c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 802b380:	408e      	lslgt	r6, r1
 802b382:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 802b386:	fa24 f101 	lsrgt.w	r1, r4, r1
 802b38a:	bfd6      	itet	le
 802b38c:	f1c1 0120 	rsble	r1, r1, #32
 802b390:	4331      	orrgt	r1, r6
 802b392:	fa04 f101 	lslle.w	r1, r4, r1
 802b396:	ee07 1a90 	vmov	s15, r1
 802b39a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 802b39e:	3b01      	subs	r3, #1
 802b3a0:	ee17 1a90 	vmov	r1, s15
 802b3a4:	2501      	movs	r5, #1
 802b3a6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 802b3aa:	e7a8      	b.n	802b2fe <_dtoa_r+0xf6>
 802b3ac:	2101      	movs	r1, #1
 802b3ae:	1ad2      	subs	r2, r2, r3
 802b3b0:	1e53      	subs	r3, r2, #1
 802b3b2:	9306      	str	r3, [sp, #24]
 802b3b4:	bf45      	ittet	mi
 802b3b6:	f1c2 0301 	rsbmi	r3, r2, #1
 802b3ba:	9305      	strmi	r3, [sp, #20]
 802b3bc:	2300      	movpl	r3, #0
 802b3be:	2300      	movmi	r3, #0
 802b3c0:	bf4c      	ite	mi
 802b3c2:	9306      	strmi	r3, [sp, #24]
 802b3c4:	9305      	strpl	r3, [sp, #20]
 802b3c6:	f1b8 0f00 	cmp.w	r8, #0
 802b3ca:	910c      	str	r1, [sp, #48]	@ 0x30
 802b3cc:	db18      	blt.n	802b400 <_dtoa_r+0x1f8>
 802b3ce:	9b06      	ldr	r3, [sp, #24]
 802b3d0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 802b3d4:	4443      	add	r3, r8
 802b3d6:	9306      	str	r3, [sp, #24]
 802b3d8:	2300      	movs	r3, #0
 802b3da:	9a07      	ldr	r2, [sp, #28]
 802b3dc:	2a09      	cmp	r2, #9
 802b3de:	d849      	bhi.n	802b474 <_dtoa_r+0x26c>
 802b3e0:	2a05      	cmp	r2, #5
 802b3e2:	bfc4      	itt	gt
 802b3e4:	3a04      	subgt	r2, #4
 802b3e6:	9207      	strgt	r2, [sp, #28]
 802b3e8:	9a07      	ldr	r2, [sp, #28]
 802b3ea:	f1a2 0202 	sub.w	r2, r2, #2
 802b3ee:	bfcc      	ite	gt
 802b3f0:	2400      	movgt	r4, #0
 802b3f2:	2401      	movle	r4, #1
 802b3f4:	2a03      	cmp	r2, #3
 802b3f6:	d848      	bhi.n	802b48a <_dtoa_r+0x282>
 802b3f8:	e8df f002 	tbb	[pc, r2]
 802b3fc:	3a2c2e0b 	.word	0x3a2c2e0b
 802b400:	9b05      	ldr	r3, [sp, #20]
 802b402:	2200      	movs	r2, #0
 802b404:	eba3 0308 	sub.w	r3, r3, r8
 802b408:	9305      	str	r3, [sp, #20]
 802b40a:	920a      	str	r2, [sp, #40]	@ 0x28
 802b40c:	f1c8 0300 	rsb	r3, r8, #0
 802b410:	e7e3      	b.n	802b3da <_dtoa_r+0x1d2>
 802b412:	2200      	movs	r2, #0
 802b414:	9208      	str	r2, [sp, #32]
 802b416:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802b418:	2a00      	cmp	r2, #0
 802b41a:	dc39      	bgt.n	802b490 <_dtoa_r+0x288>
 802b41c:	f04f 0b01 	mov.w	fp, #1
 802b420:	46da      	mov	sl, fp
 802b422:	465a      	mov	r2, fp
 802b424:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 802b428:	f8d9 701c 	ldr.w	r7, [r9, #28]
 802b42c:	2100      	movs	r1, #0
 802b42e:	2004      	movs	r0, #4
 802b430:	f100 0614 	add.w	r6, r0, #20
 802b434:	4296      	cmp	r6, r2
 802b436:	d930      	bls.n	802b49a <_dtoa_r+0x292>
 802b438:	6079      	str	r1, [r7, #4]
 802b43a:	4648      	mov	r0, r9
 802b43c:	9304      	str	r3, [sp, #16]
 802b43e:	f000 fc83 	bl	802bd48 <_Balloc>
 802b442:	9b04      	ldr	r3, [sp, #16]
 802b444:	4607      	mov	r7, r0
 802b446:	2800      	cmp	r0, #0
 802b448:	d146      	bne.n	802b4d8 <_dtoa_r+0x2d0>
 802b44a:	4b22      	ldr	r3, [pc, #136]	@ (802b4d4 <_dtoa_r+0x2cc>)
 802b44c:	4602      	mov	r2, r0
 802b44e:	f240 11af 	movw	r1, #431	@ 0x1af
 802b452:	e6f2      	b.n	802b23a <_dtoa_r+0x32>
 802b454:	2201      	movs	r2, #1
 802b456:	e7dd      	b.n	802b414 <_dtoa_r+0x20c>
 802b458:	2200      	movs	r2, #0
 802b45a:	9208      	str	r2, [sp, #32]
 802b45c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802b45e:	eb08 0b02 	add.w	fp, r8, r2
 802b462:	f10b 0a01 	add.w	sl, fp, #1
 802b466:	4652      	mov	r2, sl
 802b468:	2a01      	cmp	r2, #1
 802b46a:	bfb8      	it	lt
 802b46c:	2201      	movlt	r2, #1
 802b46e:	e7db      	b.n	802b428 <_dtoa_r+0x220>
 802b470:	2201      	movs	r2, #1
 802b472:	e7f2      	b.n	802b45a <_dtoa_r+0x252>
 802b474:	2401      	movs	r4, #1
 802b476:	2200      	movs	r2, #0
 802b478:	e9cd 2407 	strd	r2, r4, [sp, #28]
 802b47c:	f04f 3bff 	mov.w	fp, #4294967295
 802b480:	2100      	movs	r1, #0
 802b482:	46da      	mov	sl, fp
 802b484:	2212      	movs	r2, #18
 802b486:	9109      	str	r1, [sp, #36]	@ 0x24
 802b488:	e7ce      	b.n	802b428 <_dtoa_r+0x220>
 802b48a:	2201      	movs	r2, #1
 802b48c:	9208      	str	r2, [sp, #32]
 802b48e:	e7f5      	b.n	802b47c <_dtoa_r+0x274>
 802b490:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 802b494:	46da      	mov	sl, fp
 802b496:	465a      	mov	r2, fp
 802b498:	e7c6      	b.n	802b428 <_dtoa_r+0x220>
 802b49a:	3101      	adds	r1, #1
 802b49c:	0040      	lsls	r0, r0, #1
 802b49e:	e7c7      	b.n	802b430 <_dtoa_r+0x228>
 802b4a0:	636f4361 	.word	0x636f4361
 802b4a4:	3fd287a7 	.word	0x3fd287a7
 802b4a8:	8b60c8b3 	.word	0x8b60c8b3
 802b4ac:	3fc68a28 	.word	0x3fc68a28
 802b4b0:	509f79fb 	.word	0x509f79fb
 802b4b4:	3fd34413 	.word	0x3fd34413
 802b4b8:	08032b66 	.word	0x08032b66
 802b4bc:	08032b7d 	.word	0x08032b7d
 802b4c0:	7ff00000 	.word	0x7ff00000
 802b4c4:	08032b62 	.word	0x08032b62
 802b4c8:	08032b36 	.word	0x08032b36
 802b4cc:	08032b35 	.word	0x08032b35
 802b4d0:	08032c78 	.word	0x08032c78
 802b4d4:	08032bd5 	.word	0x08032bd5
 802b4d8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 802b4dc:	f1ba 0f0e 	cmp.w	sl, #14
 802b4e0:	6010      	str	r0, [r2, #0]
 802b4e2:	d86f      	bhi.n	802b5c4 <_dtoa_r+0x3bc>
 802b4e4:	2c00      	cmp	r4, #0
 802b4e6:	d06d      	beq.n	802b5c4 <_dtoa_r+0x3bc>
 802b4e8:	f1b8 0f00 	cmp.w	r8, #0
 802b4ec:	f340 80c2 	ble.w	802b674 <_dtoa_r+0x46c>
 802b4f0:	4aca      	ldr	r2, [pc, #808]	@ (802b81c <_dtoa_r+0x614>)
 802b4f2:	f008 010f 	and.w	r1, r8, #15
 802b4f6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 802b4fa:	f418 7f80 	tst.w	r8, #256	@ 0x100
 802b4fe:	ed92 7b00 	vldr	d7, [r2]
 802b502:	ea4f 1128 	mov.w	r1, r8, asr #4
 802b506:	f000 80a9 	beq.w	802b65c <_dtoa_r+0x454>
 802b50a:	4ac5      	ldr	r2, [pc, #788]	@ (802b820 <_dtoa_r+0x618>)
 802b50c:	ed92 6b08 	vldr	d6, [r2, #32]
 802b510:	ee88 6b06 	vdiv.f64	d6, d8, d6
 802b514:	ed8d 6b02 	vstr	d6, [sp, #8]
 802b518:	f001 010f 	and.w	r1, r1, #15
 802b51c:	2203      	movs	r2, #3
 802b51e:	48c0      	ldr	r0, [pc, #768]	@ (802b820 <_dtoa_r+0x618>)
 802b520:	2900      	cmp	r1, #0
 802b522:	f040 809d 	bne.w	802b660 <_dtoa_r+0x458>
 802b526:	ed9d 6b02 	vldr	d6, [sp, #8]
 802b52a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 802b52e:	ed8d 7b02 	vstr	d7, [sp, #8]
 802b532:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802b534:	ed9d 7b02 	vldr	d7, [sp, #8]
 802b538:	2900      	cmp	r1, #0
 802b53a:	f000 80c1 	beq.w	802b6c0 <_dtoa_r+0x4b8>
 802b53e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 802b542:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802b546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b54a:	f140 80b9 	bpl.w	802b6c0 <_dtoa_r+0x4b8>
 802b54e:	f1ba 0f00 	cmp.w	sl, #0
 802b552:	f000 80b5 	beq.w	802b6c0 <_dtoa_r+0x4b8>
 802b556:	f1bb 0f00 	cmp.w	fp, #0
 802b55a:	dd31      	ble.n	802b5c0 <_dtoa_r+0x3b8>
 802b55c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 802b560:	ee27 7b06 	vmul.f64	d7, d7, d6
 802b564:	ed8d 7b02 	vstr	d7, [sp, #8]
 802b568:	f108 31ff 	add.w	r1, r8, #4294967295
 802b56c:	9104      	str	r1, [sp, #16]
 802b56e:	3201      	adds	r2, #1
 802b570:	465c      	mov	r4, fp
 802b572:	ed9d 6b02 	vldr	d6, [sp, #8]
 802b576:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 802b57a:	ee07 2a90 	vmov	s15, r2
 802b57e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802b582:	eea7 5b06 	vfma.f64	d5, d7, d6
 802b586:	ee15 2a90 	vmov	r2, s11
 802b58a:	ec51 0b15 	vmov	r0, r1, d5
 802b58e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 802b592:	2c00      	cmp	r4, #0
 802b594:	f040 8098 	bne.w	802b6c8 <_dtoa_r+0x4c0>
 802b598:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 802b59c:	ee36 6b47 	vsub.f64	d6, d6, d7
 802b5a0:	ec41 0b17 	vmov	d7, r0, r1
 802b5a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802b5a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b5ac:	f300 8261 	bgt.w	802ba72 <_dtoa_r+0x86a>
 802b5b0:	eeb1 7b47 	vneg.f64	d7, d7
 802b5b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802b5b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b5bc:	f100 80f5 	bmi.w	802b7aa <_dtoa_r+0x5a2>
 802b5c0:	ed8d 8b02 	vstr	d8, [sp, #8]
 802b5c4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802b5c6:	2a00      	cmp	r2, #0
 802b5c8:	f2c0 812c 	blt.w	802b824 <_dtoa_r+0x61c>
 802b5cc:	f1b8 0f0e 	cmp.w	r8, #14
 802b5d0:	f300 8128 	bgt.w	802b824 <_dtoa_r+0x61c>
 802b5d4:	4b91      	ldr	r3, [pc, #580]	@ (802b81c <_dtoa_r+0x614>)
 802b5d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 802b5da:	ed93 6b00 	vldr	d6, [r3]
 802b5de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b5e0:	2b00      	cmp	r3, #0
 802b5e2:	da03      	bge.n	802b5ec <_dtoa_r+0x3e4>
 802b5e4:	f1ba 0f00 	cmp.w	sl, #0
 802b5e8:	f340 80d2 	ble.w	802b790 <_dtoa_r+0x588>
 802b5ec:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 802b5f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 802b5f4:	463e      	mov	r6, r7
 802b5f6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 802b5fa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 802b5fe:	ee15 3a10 	vmov	r3, s10
 802b602:	3330      	adds	r3, #48	@ 0x30
 802b604:	f806 3b01 	strb.w	r3, [r6], #1
 802b608:	1bf3      	subs	r3, r6, r7
 802b60a:	459a      	cmp	sl, r3
 802b60c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 802b610:	eea3 7b46 	vfms.f64	d7, d3, d6
 802b614:	f040 80f8 	bne.w	802b808 <_dtoa_r+0x600>
 802b618:	ee37 7b07 	vadd.f64	d7, d7, d7
 802b61c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802b620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b624:	f300 80dd 	bgt.w	802b7e2 <_dtoa_r+0x5da>
 802b628:	eeb4 7b46 	vcmp.f64	d7, d6
 802b62c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b630:	d104      	bne.n	802b63c <_dtoa_r+0x434>
 802b632:	ee15 3a10 	vmov	r3, s10
 802b636:	07db      	lsls	r3, r3, #31
 802b638:	f100 80d3 	bmi.w	802b7e2 <_dtoa_r+0x5da>
 802b63c:	9901      	ldr	r1, [sp, #4]
 802b63e:	4648      	mov	r0, r9
 802b640:	f000 fbc2 	bl	802bdc8 <_Bfree>
 802b644:	2300      	movs	r3, #0
 802b646:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802b648:	7033      	strb	r3, [r6, #0]
 802b64a:	f108 0301 	add.w	r3, r8, #1
 802b64e:	6013      	str	r3, [r2, #0]
 802b650:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802b652:	2b00      	cmp	r3, #0
 802b654:	f000 8304 	beq.w	802bc60 <_dtoa_r+0xa58>
 802b658:	601e      	str	r6, [r3, #0]
 802b65a:	e301      	b.n	802bc60 <_dtoa_r+0xa58>
 802b65c:	2202      	movs	r2, #2
 802b65e:	e75e      	b.n	802b51e <_dtoa_r+0x316>
 802b660:	07cc      	lsls	r4, r1, #31
 802b662:	d504      	bpl.n	802b66e <_dtoa_r+0x466>
 802b664:	ed90 6b00 	vldr	d6, [r0]
 802b668:	3201      	adds	r2, #1
 802b66a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802b66e:	1049      	asrs	r1, r1, #1
 802b670:	3008      	adds	r0, #8
 802b672:	e755      	b.n	802b520 <_dtoa_r+0x318>
 802b674:	d022      	beq.n	802b6bc <_dtoa_r+0x4b4>
 802b676:	f1c8 0100 	rsb	r1, r8, #0
 802b67a:	4a68      	ldr	r2, [pc, #416]	@ (802b81c <_dtoa_r+0x614>)
 802b67c:	f001 000f 	and.w	r0, r1, #15
 802b680:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 802b684:	ed92 7b00 	vldr	d7, [r2]
 802b688:	ee28 7b07 	vmul.f64	d7, d8, d7
 802b68c:	ed8d 7b02 	vstr	d7, [sp, #8]
 802b690:	4863      	ldr	r0, [pc, #396]	@ (802b820 <_dtoa_r+0x618>)
 802b692:	1109      	asrs	r1, r1, #4
 802b694:	2400      	movs	r4, #0
 802b696:	2202      	movs	r2, #2
 802b698:	b929      	cbnz	r1, 802b6a6 <_dtoa_r+0x49e>
 802b69a:	2c00      	cmp	r4, #0
 802b69c:	f43f af49 	beq.w	802b532 <_dtoa_r+0x32a>
 802b6a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 802b6a4:	e745      	b.n	802b532 <_dtoa_r+0x32a>
 802b6a6:	07ce      	lsls	r6, r1, #31
 802b6a8:	d505      	bpl.n	802b6b6 <_dtoa_r+0x4ae>
 802b6aa:	ed90 6b00 	vldr	d6, [r0]
 802b6ae:	3201      	adds	r2, #1
 802b6b0:	2401      	movs	r4, #1
 802b6b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 802b6b6:	1049      	asrs	r1, r1, #1
 802b6b8:	3008      	adds	r0, #8
 802b6ba:	e7ed      	b.n	802b698 <_dtoa_r+0x490>
 802b6bc:	2202      	movs	r2, #2
 802b6be:	e738      	b.n	802b532 <_dtoa_r+0x32a>
 802b6c0:	f8cd 8010 	str.w	r8, [sp, #16]
 802b6c4:	4654      	mov	r4, sl
 802b6c6:	e754      	b.n	802b572 <_dtoa_r+0x36a>
 802b6c8:	4a54      	ldr	r2, [pc, #336]	@ (802b81c <_dtoa_r+0x614>)
 802b6ca:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 802b6ce:	ed12 4b02 	vldr	d4, [r2, #-8]
 802b6d2:	9a08      	ldr	r2, [sp, #32]
 802b6d4:	ec41 0b17 	vmov	d7, r0, r1
 802b6d8:	443c      	add	r4, r7
 802b6da:	b34a      	cbz	r2, 802b730 <_dtoa_r+0x528>
 802b6dc:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 802b6e0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 802b6e4:	463e      	mov	r6, r7
 802b6e6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 802b6ea:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 802b6ee:	ee35 7b47 	vsub.f64	d7, d5, d7
 802b6f2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 802b6f6:	ee14 2a90 	vmov	r2, s9
 802b6fa:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 802b6fe:	3230      	adds	r2, #48	@ 0x30
 802b700:	ee36 6b45 	vsub.f64	d6, d6, d5
 802b704:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802b708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b70c:	f806 2b01 	strb.w	r2, [r6], #1
 802b710:	d438      	bmi.n	802b784 <_dtoa_r+0x57c>
 802b712:	ee32 5b46 	vsub.f64	d5, d2, d6
 802b716:	eeb4 5bc7 	vcmpe.f64	d5, d7
 802b71a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b71e:	d462      	bmi.n	802b7e6 <_dtoa_r+0x5de>
 802b720:	42a6      	cmp	r6, r4
 802b722:	f43f af4d 	beq.w	802b5c0 <_dtoa_r+0x3b8>
 802b726:	ee27 7b03 	vmul.f64	d7, d7, d3
 802b72a:	ee26 6b03 	vmul.f64	d6, d6, d3
 802b72e:	e7e0      	b.n	802b6f2 <_dtoa_r+0x4ea>
 802b730:	4621      	mov	r1, r4
 802b732:	463e      	mov	r6, r7
 802b734:	ee27 7b04 	vmul.f64	d7, d7, d4
 802b738:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 802b73c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 802b740:	ee14 2a90 	vmov	r2, s9
 802b744:	3230      	adds	r2, #48	@ 0x30
 802b746:	f806 2b01 	strb.w	r2, [r6], #1
 802b74a:	42a6      	cmp	r6, r4
 802b74c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 802b750:	ee36 6b45 	vsub.f64	d6, d6, d5
 802b754:	d119      	bne.n	802b78a <_dtoa_r+0x582>
 802b756:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 802b75a:	ee37 4b05 	vadd.f64	d4, d7, d5
 802b75e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 802b762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b766:	dc3e      	bgt.n	802b7e6 <_dtoa_r+0x5de>
 802b768:	ee35 5b47 	vsub.f64	d5, d5, d7
 802b76c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 802b770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b774:	f57f af24 	bpl.w	802b5c0 <_dtoa_r+0x3b8>
 802b778:	460e      	mov	r6, r1
 802b77a:	3901      	subs	r1, #1
 802b77c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802b780:	2b30      	cmp	r3, #48	@ 0x30
 802b782:	d0f9      	beq.n	802b778 <_dtoa_r+0x570>
 802b784:	f8dd 8010 	ldr.w	r8, [sp, #16]
 802b788:	e758      	b.n	802b63c <_dtoa_r+0x434>
 802b78a:	ee26 6b03 	vmul.f64	d6, d6, d3
 802b78e:	e7d5      	b.n	802b73c <_dtoa_r+0x534>
 802b790:	d10b      	bne.n	802b7aa <_dtoa_r+0x5a2>
 802b792:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 802b796:	ee26 6b07 	vmul.f64	d6, d6, d7
 802b79a:	ed9d 7b02 	vldr	d7, [sp, #8]
 802b79e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802b7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b7a6:	f2c0 8161 	blt.w	802ba6c <_dtoa_r+0x864>
 802b7aa:	2400      	movs	r4, #0
 802b7ac:	4625      	mov	r5, r4
 802b7ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b7b0:	43db      	mvns	r3, r3
 802b7b2:	9304      	str	r3, [sp, #16]
 802b7b4:	463e      	mov	r6, r7
 802b7b6:	f04f 0800 	mov.w	r8, #0
 802b7ba:	4621      	mov	r1, r4
 802b7bc:	4648      	mov	r0, r9
 802b7be:	f000 fb03 	bl	802bdc8 <_Bfree>
 802b7c2:	2d00      	cmp	r5, #0
 802b7c4:	d0de      	beq.n	802b784 <_dtoa_r+0x57c>
 802b7c6:	f1b8 0f00 	cmp.w	r8, #0
 802b7ca:	d005      	beq.n	802b7d8 <_dtoa_r+0x5d0>
 802b7cc:	45a8      	cmp	r8, r5
 802b7ce:	d003      	beq.n	802b7d8 <_dtoa_r+0x5d0>
 802b7d0:	4641      	mov	r1, r8
 802b7d2:	4648      	mov	r0, r9
 802b7d4:	f000 faf8 	bl	802bdc8 <_Bfree>
 802b7d8:	4629      	mov	r1, r5
 802b7da:	4648      	mov	r0, r9
 802b7dc:	f000 faf4 	bl	802bdc8 <_Bfree>
 802b7e0:	e7d0      	b.n	802b784 <_dtoa_r+0x57c>
 802b7e2:	f8cd 8010 	str.w	r8, [sp, #16]
 802b7e6:	4633      	mov	r3, r6
 802b7e8:	461e      	mov	r6, r3
 802b7ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802b7ee:	2a39      	cmp	r2, #57	@ 0x39
 802b7f0:	d106      	bne.n	802b800 <_dtoa_r+0x5f8>
 802b7f2:	429f      	cmp	r7, r3
 802b7f4:	d1f8      	bne.n	802b7e8 <_dtoa_r+0x5e0>
 802b7f6:	9a04      	ldr	r2, [sp, #16]
 802b7f8:	3201      	adds	r2, #1
 802b7fa:	9204      	str	r2, [sp, #16]
 802b7fc:	2230      	movs	r2, #48	@ 0x30
 802b7fe:	703a      	strb	r2, [r7, #0]
 802b800:	781a      	ldrb	r2, [r3, #0]
 802b802:	3201      	adds	r2, #1
 802b804:	701a      	strb	r2, [r3, #0]
 802b806:	e7bd      	b.n	802b784 <_dtoa_r+0x57c>
 802b808:	ee27 7b04 	vmul.f64	d7, d7, d4
 802b80c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802b810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b814:	f47f aeef 	bne.w	802b5f6 <_dtoa_r+0x3ee>
 802b818:	e710      	b.n	802b63c <_dtoa_r+0x434>
 802b81a:	bf00      	nop
 802b81c:	08032c78 	.word	0x08032c78
 802b820:	08032c50 	.word	0x08032c50
 802b824:	9908      	ldr	r1, [sp, #32]
 802b826:	2900      	cmp	r1, #0
 802b828:	f000 80e3 	beq.w	802b9f2 <_dtoa_r+0x7ea>
 802b82c:	9907      	ldr	r1, [sp, #28]
 802b82e:	2901      	cmp	r1, #1
 802b830:	f300 80c8 	bgt.w	802b9c4 <_dtoa_r+0x7bc>
 802b834:	2d00      	cmp	r5, #0
 802b836:	f000 80c1 	beq.w	802b9bc <_dtoa_r+0x7b4>
 802b83a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 802b83e:	9e05      	ldr	r6, [sp, #20]
 802b840:	461c      	mov	r4, r3
 802b842:	9304      	str	r3, [sp, #16]
 802b844:	9b05      	ldr	r3, [sp, #20]
 802b846:	4413      	add	r3, r2
 802b848:	9305      	str	r3, [sp, #20]
 802b84a:	9b06      	ldr	r3, [sp, #24]
 802b84c:	2101      	movs	r1, #1
 802b84e:	4413      	add	r3, r2
 802b850:	4648      	mov	r0, r9
 802b852:	9306      	str	r3, [sp, #24]
 802b854:	f000 fb6c 	bl	802bf30 <__i2b>
 802b858:	9b04      	ldr	r3, [sp, #16]
 802b85a:	4605      	mov	r5, r0
 802b85c:	b166      	cbz	r6, 802b878 <_dtoa_r+0x670>
 802b85e:	9a06      	ldr	r2, [sp, #24]
 802b860:	2a00      	cmp	r2, #0
 802b862:	dd09      	ble.n	802b878 <_dtoa_r+0x670>
 802b864:	42b2      	cmp	r2, r6
 802b866:	9905      	ldr	r1, [sp, #20]
 802b868:	bfa8      	it	ge
 802b86a:	4632      	movge	r2, r6
 802b86c:	1a89      	subs	r1, r1, r2
 802b86e:	9105      	str	r1, [sp, #20]
 802b870:	9906      	ldr	r1, [sp, #24]
 802b872:	1ab6      	subs	r6, r6, r2
 802b874:	1a8a      	subs	r2, r1, r2
 802b876:	9206      	str	r2, [sp, #24]
 802b878:	b1fb      	cbz	r3, 802b8ba <_dtoa_r+0x6b2>
 802b87a:	9a08      	ldr	r2, [sp, #32]
 802b87c:	2a00      	cmp	r2, #0
 802b87e:	f000 80bc 	beq.w	802b9fa <_dtoa_r+0x7f2>
 802b882:	b19c      	cbz	r4, 802b8ac <_dtoa_r+0x6a4>
 802b884:	4629      	mov	r1, r5
 802b886:	4622      	mov	r2, r4
 802b888:	4648      	mov	r0, r9
 802b88a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802b88c:	f000 fc10 	bl	802c0b0 <__pow5mult>
 802b890:	9a01      	ldr	r2, [sp, #4]
 802b892:	4601      	mov	r1, r0
 802b894:	4605      	mov	r5, r0
 802b896:	4648      	mov	r0, r9
 802b898:	f000 fb60 	bl	802bf5c <__multiply>
 802b89c:	9901      	ldr	r1, [sp, #4]
 802b89e:	9004      	str	r0, [sp, #16]
 802b8a0:	4648      	mov	r0, r9
 802b8a2:	f000 fa91 	bl	802bdc8 <_Bfree>
 802b8a6:	9a04      	ldr	r2, [sp, #16]
 802b8a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802b8aa:	9201      	str	r2, [sp, #4]
 802b8ac:	1b1a      	subs	r2, r3, r4
 802b8ae:	d004      	beq.n	802b8ba <_dtoa_r+0x6b2>
 802b8b0:	9901      	ldr	r1, [sp, #4]
 802b8b2:	4648      	mov	r0, r9
 802b8b4:	f000 fbfc 	bl	802c0b0 <__pow5mult>
 802b8b8:	9001      	str	r0, [sp, #4]
 802b8ba:	2101      	movs	r1, #1
 802b8bc:	4648      	mov	r0, r9
 802b8be:	f000 fb37 	bl	802bf30 <__i2b>
 802b8c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802b8c4:	4604      	mov	r4, r0
 802b8c6:	2b00      	cmp	r3, #0
 802b8c8:	f000 81d0 	beq.w	802bc6c <_dtoa_r+0xa64>
 802b8cc:	461a      	mov	r2, r3
 802b8ce:	4601      	mov	r1, r0
 802b8d0:	4648      	mov	r0, r9
 802b8d2:	f000 fbed 	bl	802c0b0 <__pow5mult>
 802b8d6:	9b07      	ldr	r3, [sp, #28]
 802b8d8:	2b01      	cmp	r3, #1
 802b8da:	4604      	mov	r4, r0
 802b8dc:	f300 8095 	bgt.w	802ba0a <_dtoa_r+0x802>
 802b8e0:	9b02      	ldr	r3, [sp, #8]
 802b8e2:	2b00      	cmp	r3, #0
 802b8e4:	f040 808b 	bne.w	802b9fe <_dtoa_r+0x7f6>
 802b8e8:	9b03      	ldr	r3, [sp, #12]
 802b8ea:	f3c3 0213 	ubfx	r2, r3, #0, #20
 802b8ee:	2a00      	cmp	r2, #0
 802b8f0:	f040 8087 	bne.w	802ba02 <_dtoa_r+0x7fa>
 802b8f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 802b8f8:	0d12      	lsrs	r2, r2, #20
 802b8fa:	0512      	lsls	r2, r2, #20
 802b8fc:	2a00      	cmp	r2, #0
 802b8fe:	f000 8082 	beq.w	802ba06 <_dtoa_r+0x7fe>
 802b902:	9b05      	ldr	r3, [sp, #20]
 802b904:	3301      	adds	r3, #1
 802b906:	9305      	str	r3, [sp, #20]
 802b908:	9b06      	ldr	r3, [sp, #24]
 802b90a:	3301      	adds	r3, #1
 802b90c:	9306      	str	r3, [sp, #24]
 802b90e:	2301      	movs	r3, #1
 802b910:	930b      	str	r3, [sp, #44]	@ 0x2c
 802b912:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802b914:	2b00      	cmp	r3, #0
 802b916:	f000 81af 	beq.w	802bc78 <_dtoa_r+0xa70>
 802b91a:	6922      	ldr	r2, [r4, #16]
 802b91c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 802b920:	6910      	ldr	r0, [r2, #16]
 802b922:	f000 fab9 	bl	802be98 <__hi0bits>
 802b926:	f1c0 0020 	rsb	r0, r0, #32
 802b92a:	9b06      	ldr	r3, [sp, #24]
 802b92c:	4418      	add	r0, r3
 802b92e:	f010 001f 	ands.w	r0, r0, #31
 802b932:	d076      	beq.n	802ba22 <_dtoa_r+0x81a>
 802b934:	f1c0 0220 	rsb	r2, r0, #32
 802b938:	2a04      	cmp	r2, #4
 802b93a:	dd69      	ble.n	802ba10 <_dtoa_r+0x808>
 802b93c:	9b05      	ldr	r3, [sp, #20]
 802b93e:	f1c0 001c 	rsb	r0, r0, #28
 802b942:	4403      	add	r3, r0
 802b944:	9305      	str	r3, [sp, #20]
 802b946:	9b06      	ldr	r3, [sp, #24]
 802b948:	4406      	add	r6, r0
 802b94a:	4403      	add	r3, r0
 802b94c:	9306      	str	r3, [sp, #24]
 802b94e:	9b05      	ldr	r3, [sp, #20]
 802b950:	2b00      	cmp	r3, #0
 802b952:	dd05      	ble.n	802b960 <_dtoa_r+0x758>
 802b954:	9901      	ldr	r1, [sp, #4]
 802b956:	461a      	mov	r2, r3
 802b958:	4648      	mov	r0, r9
 802b95a:	f000 fc03 	bl	802c164 <__lshift>
 802b95e:	9001      	str	r0, [sp, #4]
 802b960:	9b06      	ldr	r3, [sp, #24]
 802b962:	2b00      	cmp	r3, #0
 802b964:	dd05      	ble.n	802b972 <_dtoa_r+0x76a>
 802b966:	4621      	mov	r1, r4
 802b968:	461a      	mov	r2, r3
 802b96a:	4648      	mov	r0, r9
 802b96c:	f000 fbfa 	bl	802c164 <__lshift>
 802b970:	4604      	mov	r4, r0
 802b972:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802b974:	2b00      	cmp	r3, #0
 802b976:	d056      	beq.n	802ba26 <_dtoa_r+0x81e>
 802b978:	9801      	ldr	r0, [sp, #4]
 802b97a:	4621      	mov	r1, r4
 802b97c:	f000 fc5e 	bl	802c23c <__mcmp>
 802b980:	2800      	cmp	r0, #0
 802b982:	da50      	bge.n	802ba26 <_dtoa_r+0x81e>
 802b984:	f108 33ff 	add.w	r3, r8, #4294967295
 802b988:	9304      	str	r3, [sp, #16]
 802b98a:	9901      	ldr	r1, [sp, #4]
 802b98c:	2300      	movs	r3, #0
 802b98e:	220a      	movs	r2, #10
 802b990:	4648      	mov	r0, r9
 802b992:	f000 fa3b 	bl	802be0c <__multadd>
 802b996:	9b08      	ldr	r3, [sp, #32]
 802b998:	9001      	str	r0, [sp, #4]
 802b99a:	2b00      	cmp	r3, #0
 802b99c:	f000 816e 	beq.w	802bc7c <_dtoa_r+0xa74>
 802b9a0:	4629      	mov	r1, r5
 802b9a2:	2300      	movs	r3, #0
 802b9a4:	220a      	movs	r2, #10
 802b9a6:	4648      	mov	r0, r9
 802b9a8:	f000 fa30 	bl	802be0c <__multadd>
 802b9ac:	f1bb 0f00 	cmp.w	fp, #0
 802b9b0:	4605      	mov	r5, r0
 802b9b2:	dc64      	bgt.n	802ba7e <_dtoa_r+0x876>
 802b9b4:	9b07      	ldr	r3, [sp, #28]
 802b9b6:	2b02      	cmp	r3, #2
 802b9b8:	dc3e      	bgt.n	802ba38 <_dtoa_r+0x830>
 802b9ba:	e060      	b.n	802ba7e <_dtoa_r+0x876>
 802b9bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802b9be:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 802b9c2:	e73c      	b.n	802b83e <_dtoa_r+0x636>
 802b9c4:	f10a 34ff 	add.w	r4, sl, #4294967295
 802b9c8:	42a3      	cmp	r3, r4
 802b9ca:	bfbf      	itttt	lt
 802b9cc:	1ae2      	sublt	r2, r4, r3
 802b9ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 802b9d0:	189b      	addlt	r3, r3, r2
 802b9d2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 802b9d4:	bfae      	itee	ge
 802b9d6:	1b1c      	subge	r4, r3, r4
 802b9d8:	4623      	movlt	r3, r4
 802b9da:	2400      	movlt	r4, #0
 802b9dc:	f1ba 0f00 	cmp.w	sl, #0
 802b9e0:	bfb5      	itete	lt
 802b9e2:	9a05      	ldrlt	r2, [sp, #20]
 802b9e4:	9e05      	ldrge	r6, [sp, #20]
 802b9e6:	eba2 060a 	sublt.w	r6, r2, sl
 802b9ea:	4652      	movge	r2, sl
 802b9ec:	bfb8      	it	lt
 802b9ee:	2200      	movlt	r2, #0
 802b9f0:	e727      	b.n	802b842 <_dtoa_r+0x63a>
 802b9f2:	9e05      	ldr	r6, [sp, #20]
 802b9f4:	9d08      	ldr	r5, [sp, #32]
 802b9f6:	461c      	mov	r4, r3
 802b9f8:	e730      	b.n	802b85c <_dtoa_r+0x654>
 802b9fa:	461a      	mov	r2, r3
 802b9fc:	e758      	b.n	802b8b0 <_dtoa_r+0x6a8>
 802b9fe:	2300      	movs	r3, #0
 802ba00:	e786      	b.n	802b910 <_dtoa_r+0x708>
 802ba02:	9b02      	ldr	r3, [sp, #8]
 802ba04:	e784      	b.n	802b910 <_dtoa_r+0x708>
 802ba06:	920b      	str	r2, [sp, #44]	@ 0x2c
 802ba08:	e783      	b.n	802b912 <_dtoa_r+0x70a>
 802ba0a:	2300      	movs	r3, #0
 802ba0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802ba0e:	e784      	b.n	802b91a <_dtoa_r+0x712>
 802ba10:	d09d      	beq.n	802b94e <_dtoa_r+0x746>
 802ba12:	9b05      	ldr	r3, [sp, #20]
 802ba14:	321c      	adds	r2, #28
 802ba16:	4413      	add	r3, r2
 802ba18:	9305      	str	r3, [sp, #20]
 802ba1a:	9b06      	ldr	r3, [sp, #24]
 802ba1c:	4416      	add	r6, r2
 802ba1e:	4413      	add	r3, r2
 802ba20:	e794      	b.n	802b94c <_dtoa_r+0x744>
 802ba22:	4602      	mov	r2, r0
 802ba24:	e7f5      	b.n	802ba12 <_dtoa_r+0x80a>
 802ba26:	f1ba 0f00 	cmp.w	sl, #0
 802ba2a:	f8cd 8010 	str.w	r8, [sp, #16]
 802ba2e:	46d3      	mov	fp, sl
 802ba30:	dc21      	bgt.n	802ba76 <_dtoa_r+0x86e>
 802ba32:	9b07      	ldr	r3, [sp, #28]
 802ba34:	2b02      	cmp	r3, #2
 802ba36:	dd1e      	ble.n	802ba76 <_dtoa_r+0x86e>
 802ba38:	f1bb 0f00 	cmp.w	fp, #0
 802ba3c:	f47f aeb7 	bne.w	802b7ae <_dtoa_r+0x5a6>
 802ba40:	4621      	mov	r1, r4
 802ba42:	465b      	mov	r3, fp
 802ba44:	2205      	movs	r2, #5
 802ba46:	4648      	mov	r0, r9
 802ba48:	f000 f9e0 	bl	802be0c <__multadd>
 802ba4c:	4601      	mov	r1, r0
 802ba4e:	4604      	mov	r4, r0
 802ba50:	9801      	ldr	r0, [sp, #4]
 802ba52:	f000 fbf3 	bl	802c23c <__mcmp>
 802ba56:	2800      	cmp	r0, #0
 802ba58:	f77f aea9 	ble.w	802b7ae <_dtoa_r+0x5a6>
 802ba5c:	463e      	mov	r6, r7
 802ba5e:	2331      	movs	r3, #49	@ 0x31
 802ba60:	f806 3b01 	strb.w	r3, [r6], #1
 802ba64:	9b04      	ldr	r3, [sp, #16]
 802ba66:	3301      	adds	r3, #1
 802ba68:	9304      	str	r3, [sp, #16]
 802ba6a:	e6a4      	b.n	802b7b6 <_dtoa_r+0x5ae>
 802ba6c:	f8cd 8010 	str.w	r8, [sp, #16]
 802ba70:	4654      	mov	r4, sl
 802ba72:	4625      	mov	r5, r4
 802ba74:	e7f2      	b.n	802ba5c <_dtoa_r+0x854>
 802ba76:	9b08      	ldr	r3, [sp, #32]
 802ba78:	2b00      	cmp	r3, #0
 802ba7a:	f000 8103 	beq.w	802bc84 <_dtoa_r+0xa7c>
 802ba7e:	2e00      	cmp	r6, #0
 802ba80:	dd05      	ble.n	802ba8e <_dtoa_r+0x886>
 802ba82:	4629      	mov	r1, r5
 802ba84:	4632      	mov	r2, r6
 802ba86:	4648      	mov	r0, r9
 802ba88:	f000 fb6c 	bl	802c164 <__lshift>
 802ba8c:	4605      	mov	r5, r0
 802ba8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802ba90:	2b00      	cmp	r3, #0
 802ba92:	d058      	beq.n	802bb46 <_dtoa_r+0x93e>
 802ba94:	6869      	ldr	r1, [r5, #4]
 802ba96:	4648      	mov	r0, r9
 802ba98:	f000 f956 	bl	802bd48 <_Balloc>
 802ba9c:	4606      	mov	r6, r0
 802ba9e:	b928      	cbnz	r0, 802baac <_dtoa_r+0x8a4>
 802baa0:	4b82      	ldr	r3, [pc, #520]	@ (802bcac <_dtoa_r+0xaa4>)
 802baa2:	4602      	mov	r2, r0
 802baa4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 802baa8:	f7ff bbc7 	b.w	802b23a <_dtoa_r+0x32>
 802baac:	692a      	ldr	r2, [r5, #16]
 802baae:	3202      	adds	r2, #2
 802bab0:	0092      	lsls	r2, r2, #2
 802bab2:	f105 010c 	add.w	r1, r5, #12
 802bab6:	300c      	adds	r0, #12
 802bab8:	f7ff fb0f 	bl	802b0da <memcpy>
 802babc:	2201      	movs	r2, #1
 802babe:	4631      	mov	r1, r6
 802bac0:	4648      	mov	r0, r9
 802bac2:	f000 fb4f 	bl	802c164 <__lshift>
 802bac6:	1c7b      	adds	r3, r7, #1
 802bac8:	9305      	str	r3, [sp, #20]
 802baca:	eb07 030b 	add.w	r3, r7, fp
 802bace:	9309      	str	r3, [sp, #36]	@ 0x24
 802bad0:	9b02      	ldr	r3, [sp, #8]
 802bad2:	f003 0301 	and.w	r3, r3, #1
 802bad6:	46a8      	mov	r8, r5
 802bad8:	9308      	str	r3, [sp, #32]
 802bada:	4605      	mov	r5, r0
 802badc:	9b05      	ldr	r3, [sp, #20]
 802bade:	9801      	ldr	r0, [sp, #4]
 802bae0:	4621      	mov	r1, r4
 802bae2:	f103 3bff 	add.w	fp, r3, #4294967295
 802bae6:	f7ff fb06 	bl	802b0f6 <quorem>
 802baea:	4641      	mov	r1, r8
 802baec:	9002      	str	r0, [sp, #8]
 802baee:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 802baf2:	9801      	ldr	r0, [sp, #4]
 802baf4:	f000 fba2 	bl	802c23c <__mcmp>
 802baf8:	462a      	mov	r2, r5
 802bafa:	9006      	str	r0, [sp, #24]
 802bafc:	4621      	mov	r1, r4
 802bafe:	4648      	mov	r0, r9
 802bb00:	f000 fbb8 	bl	802c274 <__mdiff>
 802bb04:	68c2      	ldr	r2, [r0, #12]
 802bb06:	4606      	mov	r6, r0
 802bb08:	b9fa      	cbnz	r2, 802bb4a <_dtoa_r+0x942>
 802bb0a:	4601      	mov	r1, r0
 802bb0c:	9801      	ldr	r0, [sp, #4]
 802bb0e:	f000 fb95 	bl	802c23c <__mcmp>
 802bb12:	4602      	mov	r2, r0
 802bb14:	4631      	mov	r1, r6
 802bb16:	4648      	mov	r0, r9
 802bb18:	920a      	str	r2, [sp, #40]	@ 0x28
 802bb1a:	f000 f955 	bl	802bdc8 <_Bfree>
 802bb1e:	9b07      	ldr	r3, [sp, #28]
 802bb20:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802bb22:	9e05      	ldr	r6, [sp, #20]
 802bb24:	ea43 0102 	orr.w	r1, r3, r2
 802bb28:	9b08      	ldr	r3, [sp, #32]
 802bb2a:	4319      	orrs	r1, r3
 802bb2c:	d10f      	bne.n	802bb4e <_dtoa_r+0x946>
 802bb2e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 802bb32:	d028      	beq.n	802bb86 <_dtoa_r+0x97e>
 802bb34:	9b06      	ldr	r3, [sp, #24]
 802bb36:	2b00      	cmp	r3, #0
 802bb38:	dd02      	ble.n	802bb40 <_dtoa_r+0x938>
 802bb3a:	9b02      	ldr	r3, [sp, #8]
 802bb3c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 802bb40:	f88b a000 	strb.w	sl, [fp]
 802bb44:	e639      	b.n	802b7ba <_dtoa_r+0x5b2>
 802bb46:	4628      	mov	r0, r5
 802bb48:	e7bd      	b.n	802bac6 <_dtoa_r+0x8be>
 802bb4a:	2201      	movs	r2, #1
 802bb4c:	e7e2      	b.n	802bb14 <_dtoa_r+0x90c>
 802bb4e:	9b06      	ldr	r3, [sp, #24]
 802bb50:	2b00      	cmp	r3, #0
 802bb52:	db04      	blt.n	802bb5e <_dtoa_r+0x956>
 802bb54:	9907      	ldr	r1, [sp, #28]
 802bb56:	430b      	orrs	r3, r1
 802bb58:	9908      	ldr	r1, [sp, #32]
 802bb5a:	430b      	orrs	r3, r1
 802bb5c:	d120      	bne.n	802bba0 <_dtoa_r+0x998>
 802bb5e:	2a00      	cmp	r2, #0
 802bb60:	ddee      	ble.n	802bb40 <_dtoa_r+0x938>
 802bb62:	9901      	ldr	r1, [sp, #4]
 802bb64:	2201      	movs	r2, #1
 802bb66:	4648      	mov	r0, r9
 802bb68:	f000 fafc 	bl	802c164 <__lshift>
 802bb6c:	4621      	mov	r1, r4
 802bb6e:	9001      	str	r0, [sp, #4]
 802bb70:	f000 fb64 	bl	802c23c <__mcmp>
 802bb74:	2800      	cmp	r0, #0
 802bb76:	dc03      	bgt.n	802bb80 <_dtoa_r+0x978>
 802bb78:	d1e2      	bne.n	802bb40 <_dtoa_r+0x938>
 802bb7a:	f01a 0f01 	tst.w	sl, #1
 802bb7e:	d0df      	beq.n	802bb40 <_dtoa_r+0x938>
 802bb80:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 802bb84:	d1d9      	bne.n	802bb3a <_dtoa_r+0x932>
 802bb86:	2339      	movs	r3, #57	@ 0x39
 802bb88:	f88b 3000 	strb.w	r3, [fp]
 802bb8c:	4633      	mov	r3, r6
 802bb8e:	461e      	mov	r6, r3
 802bb90:	3b01      	subs	r3, #1
 802bb92:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 802bb96:	2a39      	cmp	r2, #57	@ 0x39
 802bb98:	d053      	beq.n	802bc42 <_dtoa_r+0xa3a>
 802bb9a:	3201      	adds	r2, #1
 802bb9c:	701a      	strb	r2, [r3, #0]
 802bb9e:	e60c      	b.n	802b7ba <_dtoa_r+0x5b2>
 802bba0:	2a00      	cmp	r2, #0
 802bba2:	dd07      	ble.n	802bbb4 <_dtoa_r+0x9ac>
 802bba4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 802bba8:	d0ed      	beq.n	802bb86 <_dtoa_r+0x97e>
 802bbaa:	f10a 0301 	add.w	r3, sl, #1
 802bbae:	f88b 3000 	strb.w	r3, [fp]
 802bbb2:	e602      	b.n	802b7ba <_dtoa_r+0x5b2>
 802bbb4:	9b05      	ldr	r3, [sp, #20]
 802bbb6:	9a05      	ldr	r2, [sp, #20]
 802bbb8:	f803 ac01 	strb.w	sl, [r3, #-1]
 802bbbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802bbbe:	4293      	cmp	r3, r2
 802bbc0:	d029      	beq.n	802bc16 <_dtoa_r+0xa0e>
 802bbc2:	9901      	ldr	r1, [sp, #4]
 802bbc4:	2300      	movs	r3, #0
 802bbc6:	220a      	movs	r2, #10
 802bbc8:	4648      	mov	r0, r9
 802bbca:	f000 f91f 	bl	802be0c <__multadd>
 802bbce:	45a8      	cmp	r8, r5
 802bbd0:	9001      	str	r0, [sp, #4]
 802bbd2:	f04f 0300 	mov.w	r3, #0
 802bbd6:	f04f 020a 	mov.w	r2, #10
 802bbda:	4641      	mov	r1, r8
 802bbdc:	4648      	mov	r0, r9
 802bbde:	d107      	bne.n	802bbf0 <_dtoa_r+0x9e8>
 802bbe0:	f000 f914 	bl	802be0c <__multadd>
 802bbe4:	4680      	mov	r8, r0
 802bbe6:	4605      	mov	r5, r0
 802bbe8:	9b05      	ldr	r3, [sp, #20]
 802bbea:	3301      	adds	r3, #1
 802bbec:	9305      	str	r3, [sp, #20]
 802bbee:	e775      	b.n	802badc <_dtoa_r+0x8d4>
 802bbf0:	f000 f90c 	bl	802be0c <__multadd>
 802bbf4:	4629      	mov	r1, r5
 802bbf6:	4680      	mov	r8, r0
 802bbf8:	2300      	movs	r3, #0
 802bbfa:	220a      	movs	r2, #10
 802bbfc:	4648      	mov	r0, r9
 802bbfe:	f000 f905 	bl	802be0c <__multadd>
 802bc02:	4605      	mov	r5, r0
 802bc04:	e7f0      	b.n	802bbe8 <_dtoa_r+0x9e0>
 802bc06:	f1bb 0f00 	cmp.w	fp, #0
 802bc0a:	bfcc      	ite	gt
 802bc0c:	465e      	movgt	r6, fp
 802bc0e:	2601      	movle	r6, #1
 802bc10:	443e      	add	r6, r7
 802bc12:	f04f 0800 	mov.w	r8, #0
 802bc16:	9901      	ldr	r1, [sp, #4]
 802bc18:	2201      	movs	r2, #1
 802bc1a:	4648      	mov	r0, r9
 802bc1c:	f000 faa2 	bl	802c164 <__lshift>
 802bc20:	4621      	mov	r1, r4
 802bc22:	9001      	str	r0, [sp, #4]
 802bc24:	f000 fb0a 	bl	802c23c <__mcmp>
 802bc28:	2800      	cmp	r0, #0
 802bc2a:	dcaf      	bgt.n	802bb8c <_dtoa_r+0x984>
 802bc2c:	d102      	bne.n	802bc34 <_dtoa_r+0xa2c>
 802bc2e:	f01a 0f01 	tst.w	sl, #1
 802bc32:	d1ab      	bne.n	802bb8c <_dtoa_r+0x984>
 802bc34:	4633      	mov	r3, r6
 802bc36:	461e      	mov	r6, r3
 802bc38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802bc3c:	2a30      	cmp	r2, #48	@ 0x30
 802bc3e:	d0fa      	beq.n	802bc36 <_dtoa_r+0xa2e>
 802bc40:	e5bb      	b.n	802b7ba <_dtoa_r+0x5b2>
 802bc42:	429f      	cmp	r7, r3
 802bc44:	d1a3      	bne.n	802bb8e <_dtoa_r+0x986>
 802bc46:	9b04      	ldr	r3, [sp, #16]
 802bc48:	3301      	adds	r3, #1
 802bc4a:	9304      	str	r3, [sp, #16]
 802bc4c:	2331      	movs	r3, #49	@ 0x31
 802bc4e:	703b      	strb	r3, [r7, #0]
 802bc50:	e5b3      	b.n	802b7ba <_dtoa_r+0x5b2>
 802bc52:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802bc54:	4f16      	ldr	r7, [pc, #88]	@ (802bcb0 <_dtoa_r+0xaa8>)
 802bc56:	b11b      	cbz	r3, 802bc60 <_dtoa_r+0xa58>
 802bc58:	f107 0308 	add.w	r3, r7, #8
 802bc5c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 802bc5e:	6013      	str	r3, [r2, #0]
 802bc60:	4638      	mov	r0, r7
 802bc62:	b011      	add	sp, #68	@ 0x44
 802bc64:	ecbd 8b02 	vpop	{d8}
 802bc68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bc6c:	9b07      	ldr	r3, [sp, #28]
 802bc6e:	2b01      	cmp	r3, #1
 802bc70:	f77f ae36 	ble.w	802b8e0 <_dtoa_r+0x6d8>
 802bc74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802bc76:	930b      	str	r3, [sp, #44]	@ 0x2c
 802bc78:	2001      	movs	r0, #1
 802bc7a:	e656      	b.n	802b92a <_dtoa_r+0x722>
 802bc7c:	f1bb 0f00 	cmp.w	fp, #0
 802bc80:	f77f aed7 	ble.w	802ba32 <_dtoa_r+0x82a>
 802bc84:	463e      	mov	r6, r7
 802bc86:	9801      	ldr	r0, [sp, #4]
 802bc88:	4621      	mov	r1, r4
 802bc8a:	f7ff fa34 	bl	802b0f6 <quorem>
 802bc8e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 802bc92:	f806 ab01 	strb.w	sl, [r6], #1
 802bc96:	1bf2      	subs	r2, r6, r7
 802bc98:	4593      	cmp	fp, r2
 802bc9a:	ddb4      	ble.n	802bc06 <_dtoa_r+0x9fe>
 802bc9c:	9901      	ldr	r1, [sp, #4]
 802bc9e:	2300      	movs	r3, #0
 802bca0:	220a      	movs	r2, #10
 802bca2:	4648      	mov	r0, r9
 802bca4:	f000 f8b2 	bl	802be0c <__multadd>
 802bca8:	9001      	str	r0, [sp, #4]
 802bcaa:	e7ec      	b.n	802bc86 <_dtoa_r+0xa7e>
 802bcac:	08032bd5 	.word	0x08032bd5
 802bcb0:	08032b59 	.word	0x08032b59

0802bcb4 <_free_r>:
 802bcb4:	b538      	push	{r3, r4, r5, lr}
 802bcb6:	4605      	mov	r5, r0
 802bcb8:	2900      	cmp	r1, #0
 802bcba:	d041      	beq.n	802bd40 <_free_r+0x8c>
 802bcbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802bcc0:	1f0c      	subs	r4, r1, #4
 802bcc2:	2b00      	cmp	r3, #0
 802bcc4:	bfb8      	it	lt
 802bcc6:	18e4      	addlt	r4, r4, r3
 802bcc8:	f7fe fbfc 	bl	802a4c4 <__malloc_lock>
 802bccc:	4a1d      	ldr	r2, [pc, #116]	@ (802bd44 <_free_r+0x90>)
 802bcce:	6813      	ldr	r3, [r2, #0]
 802bcd0:	b933      	cbnz	r3, 802bce0 <_free_r+0x2c>
 802bcd2:	6063      	str	r3, [r4, #4]
 802bcd4:	6014      	str	r4, [r2, #0]
 802bcd6:	4628      	mov	r0, r5
 802bcd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802bcdc:	f7fe bbf8 	b.w	802a4d0 <__malloc_unlock>
 802bce0:	42a3      	cmp	r3, r4
 802bce2:	d908      	bls.n	802bcf6 <_free_r+0x42>
 802bce4:	6820      	ldr	r0, [r4, #0]
 802bce6:	1821      	adds	r1, r4, r0
 802bce8:	428b      	cmp	r3, r1
 802bcea:	bf01      	itttt	eq
 802bcec:	6819      	ldreq	r1, [r3, #0]
 802bcee:	685b      	ldreq	r3, [r3, #4]
 802bcf0:	1809      	addeq	r1, r1, r0
 802bcf2:	6021      	streq	r1, [r4, #0]
 802bcf4:	e7ed      	b.n	802bcd2 <_free_r+0x1e>
 802bcf6:	461a      	mov	r2, r3
 802bcf8:	685b      	ldr	r3, [r3, #4]
 802bcfa:	b10b      	cbz	r3, 802bd00 <_free_r+0x4c>
 802bcfc:	42a3      	cmp	r3, r4
 802bcfe:	d9fa      	bls.n	802bcf6 <_free_r+0x42>
 802bd00:	6811      	ldr	r1, [r2, #0]
 802bd02:	1850      	adds	r0, r2, r1
 802bd04:	42a0      	cmp	r0, r4
 802bd06:	d10b      	bne.n	802bd20 <_free_r+0x6c>
 802bd08:	6820      	ldr	r0, [r4, #0]
 802bd0a:	4401      	add	r1, r0
 802bd0c:	1850      	adds	r0, r2, r1
 802bd0e:	4283      	cmp	r3, r0
 802bd10:	6011      	str	r1, [r2, #0]
 802bd12:	d1e0      	bne.n	802bcd6 <_free_r+0x22>
 802bd14:	6818      	ldr	r0, [r3, #0]
 802bd16:	685b      	ldr	r3, [r3, #4]
 802bd18:	6053      	str	r3, [r2, #4]
 802bd1a:	4408      	add	r0, r1
 802bd1c:	6010      	str	r0, [r2, #0]
 802bd1e:	e7da      	b.n	802bcd6 <_free_r+0x22>
 802bd20:	d902      	bls.n	802bd28 <_free_r+0x74>
 802bd22:	230c      	movs	r3, #12
 802bd24:	602b      	str	r3, [r5, #0]
 802bd26:	e7d6      	b.n	802bcd6 <_free_r+0x22>
 802bd28:	6820      	ldr	r0, [r4, #0]
 802bd2a:	1821      	adds	r1, r4, r0
 802bd2c:	428b      	cmp	r3, r1
 802bd2e:	bf04      	itt	eq
 802bd30:	6819      	ldreq	r1, [r3, #0]
 802bd32:	685b      	ldreq	r3, [r3, #4]
 802bd34:	6063      	str	r3, [r4, #4]
 802bd36:	bf04      	itt	eq
 802bd38:	1809      	addeq	r1, r1, r0
 802bd3a:	6021      	streq	r1, [r4, #0]
 802bd3c:	6054      	str	r4, [r2, #4]
 802bd3e:	e7ca      	b.n	802bcd6 <_free_r+0x22>
 802bd40:	bd38      	pop	{r3, r4, r5, pc}
 802bd42:	bf00      	nop
 802bd44:	240036cc 	.word	0x240036cc

0802bd48 <_Balloc>:
 802bd48:	b570      	push	{r4, r5, r6, lr}
 802bd4a:	69c6      	ldr	r6, [r0, #28]
 802bd4c:	4604      	mov	r4, r0
 802bd4e:	460d      	mov	r5, r1
 802bd50:	b976      	cbnz	r6, 802bd70 <_Balloc+0x28>
 802bd52:	2010      	movs	r0, #16
 802bd54:	f7fe fb04 	bl	802a360 <malloc>
 802bd58:	4602      	mov	r2, r0
 802bd5a:	61e0      	str	r0, [r4, #28]
 802bd5c:	b920      	cbnz	r0, 802bd68 <_Balloc+0x20>
 802bd5e:	4b18      	ldr	r3, [pc, #96]	@ (802bdc0 <_Balloc+0x78>)
 802bd60:	4818      	ldr	r0, [pc, #96]	@ (802bdc4 <_Balloc+0x7c>)
 802bd62:	216b      	movs	r1, #107	@ 0x6b
 802bd64:	f7db fda0 	bl	80078a8 <__assert_func>
 802bd68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802bd6c:	6006      	str	r6, [r0, #0]
 802bd6e:	60c6      	str	r6, [r0, #12]
 802bd70:	69e6      	ldr	r6, [r4, #28]
 802bd72:	68f3      	ldr	r3, [r6, #12]
 802bd74:	b183      	cbz	r3, 802bd98 <_Balloc+0x50>
 802bd76:	69e3      	ldr	r3, [r4, #28]
 802bd78:	68db      	ldr	r3, [r3, #12]
 802bd7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802bd7e:	b9b8      	cbnz	r0, 802bdb0 <_Balloc+0x68>
 802bd80:	2101      	movs	r1, #1
 802bd82:	fa01 f605 	lsl.w	r6, r1, r5
 802bd86:	1d72      	adds	r2, r6, #5
 802bd88:	0092      	lsls	r2, r2, #2
 802bd8a:	4620      	mov	r0, r4
 802bd8c:	f000 fde0 	bl	802c950 <_calloc_r>
 802bd90:	b160      	cbz	r0, 802bdac <_Balloc+0x64>
 802bd92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802bd96:	e00e      	b.n	802bdb6 <_Balloc+0x6e>
 802bd98:	2221      	movs	r2, #33	@ 0x21
 802bd9a:	2104      	movs	r1, #4
 802bd9c:	4620      	mov	r0, r4
 802bd9e:	f000 fdd7 	bl	802c950 <_calloc_r>
 802bda2:	69e3      	ldr	r3, [r4, #28]
 802bda4:	60f0      	str	r0, [r6, #12]
 802bda6:	68db      	ldr	r3, [r3, #12]
 802bda8:	2b00      	cmp	r3, #0
 802bdaa:	d1e4      	bne.n	802bd76 <_Balloc+0x2e>
 802bdac:	2000      	movs	r0, #0
 802bdae:	bd70      	pop	{r4, r5, r6, pc}
 802bdb0:	6802      	ldr	r2, [r0, #0]
 802bdb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802bdb6:	2300      	movs	r3, #0
 802bdb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802bdbc:	e7f7      	b.n	802bdae <_Balloc+0x66>
 802bdbe:	bf00      	nop
 802bdc0:	08032b66 	.word	0x08032b66
 802bdc4:	08032be6 	.word	0x08032be6

0802bdc8 <_Bfree>:
 802bdc8:	b570      	push	{r4, r5, r6, lr}
 802bdca:	69c6      	ldr	r6, [r0, #28]
 802bdcc:	4605      	mov	r5, r0
 802bdce:	460c      	mov	r4, r1
 802bdd0:	b976      	cbnz	r6, 802bdf0 <_Bfree+0x28>
 802bdd2:	2010      	movs	r0, #16
 802bdd4:	f7fe fac4 	bl	802a360 <malloc>
 802bdd8:	4602      	mov	r2, r0
 802bdda:	61e8      	str	r0, [r5, #28]
 802bddc:	b920      	cbnz	r0, 802bde8 <_Bfree+0x20>
 802bdde:	4b09      	ldr	r3, [pc, #36]	@ (802be04 <_Bfree+0x3c>)
 802bde0:	4809      	ldr	r0, [pc, #36]	@ (802be08 <_Bfree+0x40>)
 802bde2:	218f      	movs	r1, #143	@ 0x8f
 802bde4:	f7db fd60 	bl	80078a8 <__assert_func>
 802bde8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802bdec:	6006      	str	r6, [r0, #0]
 802bdee:	60c6      	str	r6, [r0, #12]
 802bdf0:	b13c      	cbz	r4, 802be02 <_Bfree+0x3a>
 802bdf2:	69eb      	ldr	r3, [r5, #28]
 802bdf4:	6862      	ldr	r2, [r4, #4]
 802bdf6:	68db      	ldr	r3, [r3, #12]
 802bdf8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802bdfc:	6021      	str	r1, [r4, #0]
 802bdfe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802be02:	bd70      	pop	{r4, r5, r6, pc}
 802be04:	08032b66 	.word	0x08032b66
 802be08:	08032be6 	.word	0x08032be6

0802be0c <__multadd>:
 802be0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802be10:	690d      	ldr	r5, [r1, #16]
 802be12:	4607      	mov	r7, r0
 802be14:	460c      	mov	r4, r1
 802be16:	461e      	mov	r6, r3
 802be18:	f101 0c14 	add.w	ip, r1, #20
 802be1c:	2000      	movs	r0, #0
 802be1e:	f8dc 3000 	ldr.w	r3, [ip]
 802be22:	b299      	uxth	r1, r3
 802be24:	fb02 6101 	mla	r1, r2, r1, r6
 802be28:	0c1e      	lsrs	r6, r3, #16
 802be2a:	0c0b      	lsrs	r3, r1, #16
 802be2c:	fb02 3306 	mla	r3, r2, r6, r3
 802be30:	b289      	uxth	r1, r1
 802be32:	3001      	adds	r0, #1
 802be34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802be38:	4285      	cmp	r5, r0
 802be3a:	f84c 1b04 	str.w	r1, [ip], #4
 802be3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802be42:	dcec      	bgt.n	802be1e <__multadd+0x12>
 802be44:	b30e      	cbz	r6, 802be8a <__multadd+0x7e>
 802be46:	68a3      	ldr	r3, [r4, #8]
 802be48:	42ab      	cmp	r3, r5
 802be4a:	dc19      	bgt.n	802be80 <__multadd+0x74>
 802be4c:	6861      	ldr	r1, [r4, #4]
 802be4e:	4638      	mov	r0, r7
 802be50:	3101      	adds	r1, #1
 802be52:	f7ff ff79 	bl	802bd48 <_Balloc>
 802be56:	4680      	mov	r8, r0
 802be58:	b928      	cbnz	r0, 802be66 <__multadd+0x5a>
 802be5a:	4602      	mov	r2, r0
 802be5c:	4b0c      	ldr	r3, [pc, #48]	@ (802be90 <__multadd+0x84>)
 802be5e:	480d      	ldr	r0, [pc, #52]	@ (802be94 <__multadd+0x88>)
 802be60:	21ba      	movs	r1, #186	@ 0xba
 802be62:	f7db fd21 	bl	80078a8 <__assert_func>
 802be66:	6922      	ldr	r2, [r4, #16]
 802be68:	3202      	adds	r2, #2
 802be6a:	f104 010c 	add.w	r1, r4, #12
 802be6e:	0092      	lsls	r2, r2, #2
 802be70:	300c      	adds	r0, #12
 802be72:	f7ff f932 	bl	802b0da <memcpy>
 802be76:	4621      	mov	r1, r4
 802be78:	4638      	mov	r0, r7
 802be7a:	f7ff ffa5 	bl	802bdc8 <_Bfree>
 802be7e:	4644      	mov	r4, r8
 802be80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802be84:	3501      	adds	r5, #1
 802be86:	615e      	str	r6, [r3, #20]
 802be88:	6125      	str	r5, [r4, #16]
 802be8a:	4620      	mov	r0, r4
 802be8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802be90:	08032bd5 	.word	0x08032bd5
 802be94:	08032be6 	.word	0x08032be6

0802be98 <__hi0bits>:
 802be98:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 802be9c:	4603      	mov	r3, r0
 802be9e:	bf36      	itet	cc
 802bea0:	0403      	lslcc	r3, r0, #16
 802bea2:	2000      	movcs	r0, #0
 802bea4:	2010      	movcc	r0, #16
 802bea6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 802beaa:	bf3c      	itt	cc
 802beac:	021b      	lslcc	r3, r3, #8
 802beae:	3008      	addcc	r0, #8
 802beb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 802beb4:	bf3c      	itt	cc
 802beb6:	011b      	lslcc	r3, r3, #4
 802beb8:	3004      	addcc	r0, #4
 802beba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802bebe:	bf3c      	itt	cc
 802bec0:	009b      	lslcc	r3, r3, #2
 802bec2:	3002      	addcc	r0, #2
 802bec4:	2b00      	cmp	r3, #0
 802bec6:	db05      	blt.n	802bed4 <__hi0bits+0x3c>
 802bec8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 802becc:	f100 0001 	add.w	r0, r0, #1
 802bed0:	bf08      	it	eq
 802bed2:	2020      	moveq	r0, #32
 802bed4:	4770      	bx	lr

0802bed6 <__lo0bits>:
 802bed6:	6803      	ldr	r3, [r0, #0]
 802bed8:	4602      	mov	r2, r0
 802beda:	f013 0007 	ands.w	r0, r3, #7
 802bede:	d00b      	beq.n	802bef8 <__lo0bits+0x22>
 802bee0:	07d9      	lsls	r1, r3, #31
 802bee2:	d421      	bmi.n	802bf28 <__lo0bits+0x52>
 802bee4:	0798      	lsls	r0, r3, #30
 802bee6:	bf49      	itett	mi
 802bee8:	085b      	lsrmi	r3, r3, #1
 802beea:	089b      	lsrpl	r3, r3, #2
 802beec:	2001      	movmi	r0, #1
 802beee:	6013      	strmi	r3, [r2, #0]
 802bef0:	bf5c      	itt	pl
 802bef2:	6013      	strpl	r3, [r2, #0]
 802bef4:	2002      	movpl	r0, #2
 802bef6:	4770      	bx	lr
 802bef8:	b299      	uxth	r1, r3
 802befa:	b909      	cbnz	r1, 802bf00 <__lo0bits+0x2a>
 802befc:	0c1b      	lsrs	r3, r3, #16
 802befe:	2010      	movs	r0, #16
 802bf00:	b2d9      	uxtb	r1, r3
 802bf02:	b909      	cbnz	r1, 802bf08 <__lo0bits+0x32>
 802bf04:	3008      	adds	r0, #8
 802bf06:	0a1b      	lsrs	r3, r3, #8
 802bf08:	0719      	lsls	r1, r3, #28
 802bf0a:	bf04      	itt	eq
 802bf0c:	091b      	lsreq	r3, r3, #4
 802bf0e:	3004      	addeq	r0, #4
 802bf10:	0799      	lsls	r1, r3, #30
 802bf12:	bf04      	itt	eq
 802bf14:	089b      	lsreq	r3, r3, #2
 802bf16:	3002      	addeq	r0, #2
 802bf18:	07d9      	lsls	r1, r3, #31
 802bf1a:	d403      	bmi.n	802bf24 <__lo0bits+0x4e>
 802bf1c:	085b      	lsrs	r3, r3, #1
 802bf1e:	f100 0001 	add.w	r0, r0, #1
 802bf22:	d003      	beq.n	802bf2c <__lo0bits+0x56>
 802bf24:	6013      	str	r3, [r2, #0]
 802bf26:	4770      	bx	lr
 802bf28:	2000      	movs	r0, #0
 802bf2a:	4770      	bx	lr
 802bf2c:	2020      	movs	r0, #32
 802bf2e:	4770      	bx	lr

0802bf30 <__i2b>:
 802bf30:	b510      	push	{r4, lr}
 802bf32:	460c      	mov	r4, r1
 802bf34:	2101      	movs	r1, #1
 802bf36:	f7ff ff07 	bl	802bd48 <_Balloc>
 802bf3a:	4602      	mov	r2, r0
 802bf3c:	b928      	cbnz	r0, 802bf4a <__i2b+0x1a>
 802bf3e:	4b05      	ldr	r3, [pc, #20]	@ (802bf54 <__i2b+0x24>)
 802bf40:	4805      	ldr	r0, [pc, #20]	@ (802bf58 <__i2b+0x28>)
 802bf42:	f240 1145 	movw	r1, #325	@ 0x145
 802bf46:	f7db fcaf 	bl	80078a8 <__assert_func>
 802bf4a:	2301      	movs	r3, #1
 802bf4c:	6144      	str	r4, [r0, #20]
 802bf4e:	6103      	str	r3, [r0, #16]
 802bf50:	bd10      	pop	{r4, pc}
 802bf52:	bf00      	nop
 802bf54:	08032bd5 	.word	0x08032bd5
 802bf58:	08032be6 	.word	0x08032be6

0802bf5c <__multiply>:
 802bf5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bf60:	4614      	mov	r4, r2
 802bf62:	690a      	ldr	r2, [r1, #16]
 802bf64:	6923      	ldr	r3, [r4, #16]
 802bf66:	429a      	cmp	r2, r3
 802bf68:	bfa8      	it	ge
 802bf6a:	4623      	movge	r3, r4
 802bf6c:	460f      	mov	r7, r1
 802bf6e:	bfa4      	itt	ge
 802bf70:	460c      	movge	r4, r1
 802bf72:	461f      	movge	r7, r3
 802bf74:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802bf78:	f8d7 9010 	ldr.w	r9, [r7, #16]
 802bf7c:	68a3      	ldr	r3, [r4, #8]
 802bf7e:	6861      	ldr	r1, [r4, #4]
 802bf80:	eb0a 0609 	add.w	r6, sl, r9
 802bf84:	42b3      	cmp	r3, r6
 802bf86:	b085      	sub	sp, #20
 802bf88:	bfb8      	it	lt
 802bf8a:	3101      	addlt	r1, #1
 802bf8c:	f7ff fedc 	bl	802bd48 <_Balloc>
 802bf90:	b930      	cbnz	r0, 802bfa0 <__multiply+0x44>
 802bf92:	4602      	mov	r2, r0
 802bf94:	4b44      	ldr	r3, [pc, #272]	@ (802c0a8 <__multiply+0x14c>)
 802bf96:	4845      	ldr	r0, [pc, #276]	@ (802c0ac <__multiply+0x150>)
 802bf98:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 802bf9c:	f7db fc84 	bl	80078a8 <__assert_func>
 802bfa0:	f100 0514 	add.w	r5, r0, #20
 802bfa4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802bfa8:	462b      	mov	r3, r5
 802bfaa:	2200      	movs	r2, #0
 802bfac:	4543      	cmp	r3, r8
 802bfae:	d321      	bcc.n	802bff4 <__multiply+0x98>
 802bfb0:	f107 0114 	add.w	r1, r7, #20
 802bfb4:	f104 0214 	add.w	r2, r4, #20
 802bfb8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 802bfbc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 802bfc0:	9302      	str	r3, [sp, #8]
 802bfc2:	1b13      	subs	r3, r2, r4
 802bfc4:	3b15      	subs	r3, #21
 802bfc6:	f023 0303 	bic.w	r3, r3, #3
 802bfca:	3304      	adds	r3, #4
 802bfcc:	f104 0715 	add.w	r7, r4, #21
 802bfd0:	42ba      	cmp	r2, r7
 802bfd2:	bf38      	it	cc
 802bfd4:	2304      	movcc	r3, #4
 802bfd6:	9301      	str	r3, [sp, #4]
 802bfd8:	9b02      	ldr	r3, [sp, #8]
 802bfda:	9103      	str	r1, [sp, #12]
 802bfdc:	428b      	cmp	r3, r1
 802bfde:	d80c      	bhi.n	802bffa <__multiply+0x9e>
 802bfe0:	2e00      	cmp	r6, #0
 802bfe2:	dd03      	ble.n	802bfec <__multiply+0x90>
 802bfe4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802bfe8:	2b00      	cmp	r3, #0
 802bfea:	d05b      	beq.n	802c0a4 <__multiply+0x148>
 802bfec:	6106      	str	r6, [r0, #16]
 802bfee:	b005      	add	sp, #20
 802bff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bff4:	f843 2b04 	str.w	r2, [r3], #4
 802bff8:	e7d8      	b.n	802bfac <__multiply+0x50>
 802bffa:	f8b1 a000 	ldrh.w	sl, [r1]
 802bffe:	f1ba 0f00 	cmp.w	sl, #0
 802c002:	d024      	beq.n	802c04e <__multiply+0xf2>
 802c004:	f104 0e14 	add.w	lr, r4, #20
 802c008:	46a9      	mov	r9, r5
 802c00a:	f04f 0c00 	mov.w	ip, #0
 802c00e:	f85e 7b04 	ldr.w	r7, [lr], #4
 802c012:	f8d9 3000 	ldr.w	r3, [r9]
 802c016:	fa1f fb87 	uxth.w	fp, r7
 802c01a:	b29b      	uxth	r3, r3
 802c01c:	fb0a 330b 	mla	r3, sl, fp, r3
 802c020:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 802c024:	f8d9 7000 	ldr.w	r7, [r9]
 802c028:	4463      	add	r3, ip
 802c02a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802c02e:	fb0a c70b 	mla	r7, sl, fp, ip
 802c032:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 802c036:	b29b      	uxth	r3, r3
 802c038:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802c03c:	4572      	cmp	r2, lr
 802c03e:	f849 3b04 	str.w	r3, [r9], #4
 802c042:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802c046:	d8e2      	bhi.n	802c00e <__multiply+0xb2>
 802c048:	9b01      	ldr	r3, [sp, #4]
 802c04a:	f845 c003 	str.w	ip, [r5, r3]
 802c04e:	9b03      	ldr	r3, [sp, #12]
 802c050:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 802c054:	3104      	adds	r1, #4
 802c056:	f1b9 0f00 	cmp.w	r9, #0
 802c05a:	d021      	beq.n	802c0a0 <__multiply+0x144>
 802c05c:	682b      	ldr	r3, [r5, #0]
 802c05e:	f104 0c14 	add.w	ip, r4, #20
 802c062:	46ae      	mov	lr, r5
 802c064:	f04f 0a00 	mov.w	sl, #0
 802c068:	f8bc b000 	ldrh.w	fp, [ip]
 802c06c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 802c070:	fb09 770b 	mla	r7, r9, fp, r7
 802c074:	4457      	add	r7, sl
 802c076:	b29b      	uxth	r3, r3
 802c078:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802c07c:	f84e 3b04 	str.w	r3, [lr], #4
 802c080:	f85c 3b04 	ldr.w	r3, [ip], #4
 802c084:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802c088:	f8be 3000 	ldrh.w	r3, [lr]
 802c08c:	fb09 330a 	mla	r3, r9, sl, r3
 802c090:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 802c094:	4562      	cmp	r2, ip
 802c096:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802c09a:	d8e5      	bhi.n	802c068 <__multiply+0x10c>
 802c09c:	9f01      	ldr	r7, [sp, #4]
 802c09e:	51eb      	str	r3, [r5, r7]
 802c0a0:	3504      	adds	r5, #4
 802c0a2:	e799      	b.n	802bfd8 <__multiply+0x7c>
 802c0a4:	3e01      	subs	r6, #1
 802c0a6:	e79b      	b.n	802bfe0 <__multiply+0x84>
 802c0a8:	08032bd5 	.word	0x08032bd5
 802c0ac:	08032be6 	.word	0x08032be6

0802c0b0 <__pow5mult>:
 802c0b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c0b4:	4615      	mov	r5, r2
 802c0b6:	f012 0203 	ands.w	r2, r2, #3
 802c0ba:	4607      	mov	r7, r0
 802c0bc:	460e      	mov	r6, r1
 802c0be:	d007      	beq.n	802c0d0 <__pow5mult+0x20>
 802c0c0:	4c25      	ldr	r4, [pc, #148]	@ (802c158 <__pow5mult+0xa8>)
 802c0c2:	3a01      	subs	r2, #1
 802c0c4:	2300      	movs	r3, #0
 802c0c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802c0ca:	f7ff fe9f 	bl	802be0c <__multadd>
 802c0ce:	4606      	mov	r6, r0
 802c0d0:	10ad      	asrs	r5, r5, #2
 802c0d2:	d03d      	beq.n	802c150 <__pow5mult+0xa0>
 802c0d4:	69fc      	ldr	r4, [r7, #28]
 802c0d6:	b97c      	cbnz	r4, 802c0f8 <__pow5mult+0x48>
 802c0d8:	2010      	movs	r0, #16
 802c0da:	f7fe f941 	bl	802a360 <malloc>
 802c0de:	4602      	mov	r2, r0
 802c0e0:	61f8      	str	r0, [r7, #28]
 802c0e2:	b928      	cbnz	r0, 802c0f0 <__pow5mult+0x40>
 802c0e4:	4b1d      	ldr	r3, [pc, #116]	@ (802c15c <__pow5mult+0xac>)
 802c0e6:	481e      	ldr	r0, [pc, #120]	@ (802c160 <__pow5mult+0xb0>)
 802c0e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 802c0ec:	f7db fbdc 	bl	80078a8 <__assert_func>
 802c0f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802c0f4:	6004      	str	r4, [r0, #0]
 802c0f6:	60c4      	str	r4, [r0, #12]
 802c0f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 802c0fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802c100:	b94c      	cbnz	r4, 802c116 <__pow5mult+0x66>
 802c102:	f240 2171 	movw	r1, #625	@ 0x271
 802c106:	4638      	mov	r0, r7
 802c108:	f7ff ff12 	bl	802bf30 <__i2b>
 802c10c:	2300      	movs	r3, #0
 802c10e:	f8c8 0008 	str.w	r0, [r8, #8]
 802c112:	4604      	mov	r4, r0
 802c114:	6003      	str	r3, [r0, #0]
 802c116:	f04f 0900 	mov.w	r9, #0
 802c11a:	07eb      	lsls	r3, r5, #31
 802c11c:	d50a      	bpl.n	802c134 <__pow5mult+0x84>
 802c11e:	4631      	mov	r1, r6
 802c120:	4622      	mov	r2, r4
 802c122:	4638      	mov	r0, r7
 802c124:	f7ff ff1a 	bl	802bf5c <__multiply>
 802c128:	4631      	mov	r1, r6
 802c12a:	4680      	mov	r8, r0
 802c12c:	4638      	mov	r0, r7
 802c12e:	f7ff fe4b 	bl	802bdc8 <_Bfree>
 802c132:	4646      	mov	r6, r8
 802c134:	106d      	asrs	r5, r5, #1
 802c136:	d00b      	beq.n	802c150 <__pow5mult+0xa0>
 802c138:	6820      	ldr	r0, [r4, #0]
 802c13a:	b938      	cbnz	r0, 802c14c <__pow5mult+0x9c>
 802c13c:	4622      	mov	r2, r4
 802c13e:	4621      	mov	r1, r4
 802c140:	4638      	mov	r0, r7
 802c142:	f7ff ff0b 	bl	802bf5c <__multiply>
 802c146:	6020      	str	r0, [r4, #0]
 802c148:	f8c0 9000 	str.w	r9, [r0]
 802c14c:	4604      	mov	r4, r0
 802c14e:	e7e4      	b.n	802c11a <__pow5mult+0x6a>
 802c150:	4630      	mov	r0, r6
 802c152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c156:	bf00      	nop
 802c158:	08032c40 	.word	0x08032c40
 802c15c:	08032b66 	.word	0x08032b66
 802c160:	08032be6 	.word	0x08032be6

0802c164 <__lshift>:
 802c164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c168:	460c      	mov	r4, r1
 802c16a:	6849      	ldr	r1, [r1, #4]
 802c16c:	6923      	ldr	r3, [r4, #16]
 802c16e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802c172:	68a3      	ldr	r3, [r4, #8]
 802c174:	4607      	mov	r7, r0
 802c176:	4691      	mov	r9, r2
 802c178:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802c17c:	f108 0601 	add.w	r6, r8, #1
 802c180:	42b3      	cmp	r3, r6
 802c182:	db0b      	blt.n	802c19c <__lshift+0x38>
 802c184:	4638      	mov	r0, r7
 802c186:	f7ff fddf 	bl	802bd48 <_Balloc>
 802c18a:	4605      	mov	r5, r0
 802c18c:	b948      	cbnz	r0, 802c1a2 <__lshift+0x3e>
 802c18e:	4602      	mov	r2, r0
 802c190:	4b28      	ldr	r3, [pc, #160]	@ (802c234 <__lshift+0xd0>)
 802c192:	4829      	ldr	r0, [pc, #164]	@ (802c238 <__lshift+0xd4>)
 802c194:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 802c198:	f7db fb86 	bl	80078a8 <__assert_func>
 802c19c:	3101      	adds	r1, #1
 802c19e:	005b      	lsls	r3, r3, #1
 802c1a0:	e7ee      	b.n	802c180 <__lshift+0x1c>
 802c1a2:	2300      	movs	r3, #0
 802c1a4:	f100 0114 	add.w	r1, r0, #20
 802c1a8:	f100 0210 	add.w	r2, r0, #16
 802c1ac:	4618      	mov	r0, r3
 802c1ae:	4553      	cmp	r3, sl
 802c1b0:	db33      	blt.n	802c21a <__lshift+0xb6>
 802c1b2:	6920      	ldr	r0, [r4, #16]
 802c1b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802c1b8:	f104 0314 	add.w	r3, r4, #20
 802c1bc:	f019 091f 	ands.w	r9, r9, #31
 802c1c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802c1c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802c1c8:	d02b      	beq.n	802c222 <__lshift+0xbe>
 802c1ca:	f1c9 0e20 	rsb	lr, r9, #32
 802c1ce:	468a      	mov	sl, r1
 802c1d0:	2200      	movs	r2, #0
 802c1d2:	6818      	ldr	r0, [r3, #0]
 802c1d4:	fa00 f009 	lsl.w	r0, r0, r9
 802c1d8:	4310      	orrs	r0, r2
 802c1da:	f84a 0b04 	str.w	r0, [sl], #4
 802c1de:	f853 2b04 	ldr.w	r2, [r3], #4
 802c1e2:	459c      	cmp	ip, r3
 802c1e4:	fa22 f20e 	lsr.w	r2, r2, lr
 802c1e8:	d8f3      	bhi.n	802c1d2 <__lshift+0x6e>
 802c1ea:	ebac 0304 	sub.w	r3, ip, r4
 802c1ee:	3b15      	subs	r3, #21
 802c1f0:	f023 0303 	bic.w	r3, r3, #3
 802c1f4:	3304      	adds	r3, #4
 802c1f6:	f104 0015 	add.w	r0, r4, #21
 802c1fa:	4584      	cmp	ip, r0
 802c1fc:	bf38      	it	cc
 802c1fe:	2304      	movcc	r3, #4
 802c200:	50ca      	str	r2, [r1, r3]
 802c202:	b10a      	cbz	r2, 802c208 <__lshift+0xa4>
 802c204:	f108 0602 	add.w	r6, r8, #2
 802c208:	3e01      	subs	r6, #1
 802c20a:	4638      	mov	r0, r7
 802c20c:	612e      	str	r6, [r5, #16]
 802c20e:	4621      	mov	r1, r4
 802c210:	f7ff fdda 	bl	802bdc8 <_Bfree>
 802c214:	4628      	mov	r0, r5
 802c216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c21a:	f842 0f04 	str.w	r0, [r2, #4]!
 802c21e:	3301      	adds	r3, #1
 802c220:	e7c5      	b.n	802c1ae <__lshift+0x4a>
 802c222:	3904      	subs	r1, #4
 802c224:	f853 2b04 	ldr.w	r2, [r3], #4
 802c228:	f841 2f04 	str.w	r2, [r1, #4]!
 802c22c:	459c      	cmp	ip, r3
 802c22e:	d8f9      	bhi.n	802c224 <__lshift+0xc0>
 802c230:	e7ea      	b.n	802c208 <__lshift+0xa4>
 802c232:	bf00      	nop
 802c234:	08032bd5 	.word	0x08032bd5
 802c238:	08032be6 	.word	0x08032be6

0802c23c <__mcmp>:
 802c23c:	690a      	ldr	r2, [r1, #16]
 802c23e:	4603      	mov	r3, r0
 802c240:	6900      	ldr	r0, [r0, #16]
 802c242:	1a80      	subs	r0, r0, r2
 802c244:	b530      	push	{r4, r5, lr}
 802c246:	d10e      	bne.n	802c266 <__mcmp+0x2a>
 802c248:	3314      	adds	r3, #20
 802c24a:	3114      	adds	r1, #20
 802c24c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 802c250:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 802c254:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 802c258:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 802c25c:	4295      	cmp	r5, r2
 802c25e:	d003      	beq.n	802c268 <__mcmp+0x2c>
 802c260:	d205      	bcs.n	802c26e <__mcmp+0x32>
 802c262:	f04f 30ff 	mov.w	r0, #4294967295
 802c266:	bd30      	pop	{r4, r5, pc}
 802c268:	42a3      	cmp	r3, r4
 802c26a:	d3f3      	bcc.n	802c254 <__mcmp+0x18>
 802c26c:	e7fb      	b.n	802c266 <__mcmp+0x2a>
 802c26e:	2001      	movs	r0, #1
 802c270:	e7f9      	b.n	802c266 <__mcmp+0x2a>
	...

0802c274 <__mdiff>:
 802c274:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c278:	4689      	mov	r9, r1
 802c27a:	4606      	mov	r6, r0
 802c27c:	4611      	mov	r1, r2
 802c27e:	4648      	mov	r0, r9
 802c280:	4614      	mov	r4, r2
 802c282:	f7ff ffdb 	bl	802c23c <__mcmp>
 802c286:	1e05      	subs	r5, r0, #0
 802c288:	d112      	bne.n	802c2b0 <__mdiff+0x3c>
 802c28a:	4629      	mov	r1, r5
 802c28c:	4630      	mov	r0, r6
 802c28e:	f7ff fd5b 	bl	802bd48 <_Balloc>
 802c292:	4602      	mov	r2, r0
 802c294:	b928      	cbnz	r0, 802c2a2 <__mdiff+0x2e>
 802c296:	4b3f      	ldr	r3, [pc, #252]	@ (802c394 <__mdiff+0x120>)
 802c298:	f240 2137 	movw	r1, #567	@ 0x237
 802c29c:	483e      	ldr	r0, [pc, #248]	@ (802c398 <__mdiff+0x124>)
 802c29e:	f7db fb03 	bl	80078a8 <__assert_func>
 802c2a2:	2301      	movs	r3, #1
 802c2a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802c2a8:	4610      	mov	r0, r2
 802c2aa:	b003      	add	sp, #12
 802c2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c2b0:	bfbc      	itt	lt
 802c2b2:	464b      	movlt	r3, r9
 802c2b4:	46a1      	movlt	r9, r4
 802c2b6:	4630      	mov	r0, r6
 802c2b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 802c2bc:	bfba      	itte	lt
 802c2be:	461c      	movlt	r4, r3
 802c2c0:	2501      	movlt	r5, #1
 802c2c2:	2500      	movge	r5, #0
 802c2c4:	f7ff fd40 	bl	802bd48 <_Balloc>
 802c2c8:	4602      	mov	r2, r0
 802c2ca:	b918      	cbnz	r0, 802c2d4 <__mdiff+0x60>
 802c2cc:	4b31      	ldr	r3, [pc, #196]	@ (802c394 <__mdiff+0x120>)
 802c2ce:	f240 2145 	movw	r1, #581	@ 0x245
 802c2d2:	e7e3      	b.n	802c29c <__mdiff+0x28>
 802c2d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 802c2d8:	6926      	ldr	r6, [r4, #16]
 802c2da:	60c5      	str	r5, [r0, #12]
 802c2dc:	f109 0310 	add.w	r3, r9, #16
 802c2e0:	f109 0514 	add.w	r5, r9, #20
 802c2e4:	f104 0e14 	add.w	lr, r4, #20
 802c2e8:	f100 0b14 	add.w	fp, r0, #20
 802c2ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 802c2f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 802c2f4:	9301      	str	r3, [sp, #4]
 802c2f6:	46d9      	mov	r9, fp
 802c2f8:	f04f 0c00 	mov.w	ip, #0
 802c2fc:	9b01      	ldr	r3, [sp, #4]
 802c2fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 802c302:	f853 af04 	ldr.w	sl, [r3, #4]!
 802c306:	9301      	str	r3, [sp, #4]
 802c308:	fa1f f38a 	uxth.w	r3, sl
 802c30c:	4619      	mov	r1, r3
 802c30e:	b283      	uxth	r3, r0
 802c310:	1acb      	subs	r3, r1, r3
 802c312:	0c00      	lsrs	r0, r0, #16
 802c314:	4463      	add	r3, ip
 802c316:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 802c31a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 802c31e:	b29b      	uxth	r3, r3
 802c320:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 802c324:	4576      	cmp	r6, lr
 802c326:	f849 3b04 	str.w	r3, [r9], #4
 802c32a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802c32e:	d8e5      	bhi.n	802c2fc <__mdiff+0x88>
 802c330:	1b33      	subs	r3, r6, r4
 802c332:	3b15      	subs	r3, #21
 802c334:	f023 0303 	bic.w	r3, r3, #3
 802c338:	3415      	adds	r4, #21
 802c33a:	3304      	adds	r3, #4
 802c33c:	42a6      	cmp	r6, r4
 802c33e:	bf38      	it	cc
 802c340:	2304      	movcc	r3, #4
 802c342:	441d      	add	r5, r3
 802c344:	445b      	add	r3, fp
 802c346:	461e      	mov	r6, r3
 802c348:	462c      	mov	r4, r5
 802c34a:	4544      	cmp	r4, r8
 802c34c:	d30e      	bcc.n	802c36c <__mdiff+0xf8>
 802c34e:	f108 0103 	add.w	r1, r8, #3
 802c352:	1b49      	subs	r1, r1, r5
 802c354:	f021 0103 	bic.w	r1, r1, #3
 802c358:	3d03      	subs	r5, #3
 802c35a:	45a8      	cmp	r8, r5
 802c35c:	bf38      	it	cc
 802c35e:	2100      	movcc	r1, #0
 802c360:	440b      	add	r3, r1
 802c362:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802c366:	b191      	cbz	r1, 802c38e <__mdiff+0x11a>
 802c368:	6117      	str	r7, [r2, #16]
 802c36a:	e79d      	b.n	802c2a8 <__mdiff+0x34>
 802c36c:	f854 1b04 	ldr.w	r1, [r4], #4
 802c370:	46e6      	mov	lr, ip
 802c372:	0c08      	lsrs	r0, r1, #16
 802c374:	fa1c fc81 	uxtah	ip, ip, r1
 802c378:	4471      	add	r1, lr
 802c37a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 802c37e:	b289      	uxth	r1, r1
 802c380:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 802c384:	f846 1b04 	str.w	r1, [r6], #4
 802c388:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802c38c:	e7dd      	b.n	802c34a <__mdiff+0xd6>
 802c38e:	3f01      	subs	r7, #1
 802c390:	e7e7      	b.n	802c362 <__mdiff+0xee>
 802c392:	bf00      	nop
 802c394:	08032bd5 	.word	0x08032bd5
 802c398:	08032be6 	.word	0x08032be6

0802c39c <__d2b>:
 802c39c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802c3a0:	460f      	mov	r7, r1
 802c3a2:	2101      	movs	r1, #1
 802c3a4:	ec59 8b10 	vmov	r8, r9, d0
 802c3a8:	4616      	mov	r6, r2
 802c3aa:	f7ff fccd 	bl	802bd48 <_Balloc>
 802c3ae:	4604      	mov	r4, r0
 802c3b0:	b930      	cbnz	r0, 802c3c0 <__d2b+0x24>
 802c3b2:	4602      	mov	r2, r0
 802c3b4:	4b23      	ldr	r3, [pc, #140]	@ (802c444 <__d2b+0xa8>)
 802c3b6:	4824      	ldr	r0, [pc, #144]	@ (802c448 <__d2b+0xac>)
 802c3b8:	f240 310f 	movw	r1, #783	@ 0x30f
 802c3bc:	f7db fa74 	bl	80078a8 <__assert_func>
 802c3c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802c3c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802c3c8:	b10d      	cbz	r5, 802c3ce <__d2b+0x32>
 802c3ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802c3ce:	9301      	str	r3, [sp, #4]
 802c3d0:	f1b8 0300 	subs.w	r3, r8, #0
 802c3d4:	d023      	beq.n	802c41e <__d2b+0x82>
 802c3d6:	4668      	mov	r0, sp
 802c3d8:	9300      	str	r3, [sp, #0]
 802c3da:	f7ff fd7c 	bl	802bed6 <__lo0bits>
 802c3de:	e9dd 1200 	ldrd	r1, r2, [sp]
 802c3e2:	b1d0      	cbz	r0, 802c41a <__d2b+0x7e>
 802c3e4:	f1c0 0320 	rsb	r3, r0, #32
 802c3e8:	fa02 f303 	lsl.w	r3, r2, r3
 802c3ec:	430b      	orrs	r3, r1
 802c3ee:	40c2      	lsrs	r2, r0
 802c3f0:	6163      	str	r3, [r4, #20]
 802c3f2:	9201      	str	r2, [sp, #4]
 802c3f4:	9b01      	ldr	r3, [sp, #4]
 802c3f6:	61a3      	str	r3, [r4, #24]
 802c3f8:	2b00      	cmp	r3, #0
 802c3fa:	bf0c      	ite	eq
 802c3fc:	2201      	moveq	r2, #1
 802c3fe:	2202      	movne	r2, #2
 802c400:	6122      	str	r2, [r4, #16]
 802c402:	b1a5      	cbz	r5, 802c42e <__d2b+0x92>
 802c404:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 802c408:	4405      	add	r5, r0
 802c40a:	603d      	str	r5, [r7, #0]
 802c40c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 802c410:	6030      	str	r0, [r6, #0]
 802c412:	4620      	mov	r0, r4
 802c414:	b003      	add	sp, #12
 802c416:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802c41a:	6161      	str	r1, [r4, #20]
 802c41c:	e7ea      	b.n	802c3f4 <__d2b+0x58>
 802c41e:	a801      	add	r0, sp, #4
 802c420:	f7ff fd59 	bl	802bed6 <__lo0bits>
 802c424:	9b01      	ldr	r3, [sp, #4]
 802c426:	6163      	str	r3, [r4, #20]
 802c428:	3020      	adds	r0, #32
 802c42a:	2201      	movs	r2, #1
 802c42c:	e7e8      	b.n	802c400 <__d2b+0x64>
 802c42e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802c432:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 802c436:	6038      	str	r0, [r7, #0]
 802c438:	6918      	ldr	r0, [r3, #16]
 802c43a:	f7ff fd2d 	bl	802be98 <__hi0bits>
 802c43e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802c442:	e7e5      	b.n	802c410 <__d2b+0x74>
 802c444:	08032bd5 	.word	0x08032bd5
 802c448:	08032be6 	.word	0x08032be6

0802c44c <__sfputc_r>:
 802c44c:	6893      	ldr	r3, [r2, #8]
 802c44e:	3b01      	subs	r3, #1
 802c450:	2b00      	cmp	r3, #0
 802c452:	b410      	push	{r4}
 802c454:	6093      	str	r3, [r2, #8]
 802c456:	da08      	bge.n	802c46a <__sfputc_r+0x1e>
 802c458:	6994      	ldr	r4, [r2, #24]
 802c45a:	42a3      	cmp	r3, r4
 802c45c:	db01      	blt.n	802c462 <__sfputc_r+0x16>
 802c45e:	290a      	cmp	r1, #10
 802c460:	d103      	bne.n	802c46a <__sfputc_r+0x1e>
 802c462:	f85d 4b04 	ldr.w	r4, [sp], #4
 802c466:	f000 b9df 	b.w	802c828 <__swbuf_r>
 802c46a:	6813      	ldr	r3, [r2, #0]
 802c46c:	1c58      	adds	r0, r3, #1
 802c46e:	6010      	str	r0, [r2, #0]
 802c470:	7019      	strb	r1, [r3, #0]
 802c472:	4608      	mov	r0, r1
 802c474:	f85d 4b04 	ldr.w	r4, [sp], #4
 802c478:	4770      	bx	lr

0802c47a <__sfputs_r>:
 802c47a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c47c:	4606      	mov	r6, r0
 802c47e:	460f      	mov	r7, r1
 802c480:	4614      	mov	r4, r2
 802c482:	18d5      	adds	r5, r2, r3
 802c484:	42ac      	cmp	r4, r5
 802c486:	d101      	bne.n	802c48c <__sfputs_r+0x12>
 802c488:	2000      	movs	r0, #0
 802c48a:	e007      	b.n	802c49c <__sfputs_r+0x22>
 802c48c:	f814 1b01 	ldrb.w	r1, [r4], #1
 802c490:	463a      	mov	r2, r7
 802c492:	4630      	mov	r0, r6
 802c494:	f7ff ffda 	bl	802c44c <__sfputc_r>
 802c498:	1c43      	adds	r3, r0, #1
 802c49a:	d1f3      	bne.n	802c484 <__sfputs_r+0xa>
 802c49c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802c4a0 <_vfiprintf_r>:
 802c4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c4a4:	460d      	mov	r5, r1
 802c4a6:	b09d      	sub	sp, #116	@ 0x74
 802c4a8:	4614      	mov	r4, r2
 802c4aa:	4698      	mov	r8, r3
 802c4ac:	4606      	mov	r6, r0
 802c4ae:	b118      	cbz	r0, 802c4b8 <_vfiprintf_r+0x18>
 802c4b0:	6a03      	ldr	r3, [r0, #32]
 802c4b2:	b90b      	cbnz	r3, 802c4b8 <_vfiprintf_r+0x18>
 802c4b4:	f7fe fcd4 	bl	802ae60 <__sinit>
 802c4b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802c4ba:	07d9      	lsls	r1, r3, #31
 802c4bc:	d405      	bmi.n	802c4ca <_vfiprintf_r+0x2a>
 802c4be:	89ab      	ldrh	r3, [r5, #12]
 802c4c0:	059a      	lsls	r2, r3, #22
 802c4c2:	d402      	bmi.n	802c4ca <_vfiprintf_r+0x2a>
 802c4c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802c4c6:	f7fe fdfe 	bl	802b0c6 <__retarget_lock_acquire_recursive>
 802c4ca:	89ab      	ldrh	r3, [r5, #12]
 802c4cc:	071b      	lsls	r3, r3, #28
 802c4ce:	d501      	bpl.n	802c4d4 <_vfiprintf_r+0x34>
 802c4d0:	692b      	ldr	r3, [r5, #16]
 802c4d2:	b99b      	cbnz	r3, 802c4fc <_vfiprintf_r+0x5c>
 802c4d4:	4629      	mov	r1, r5
 802c4d6:	4630      	mov	r0, r6
 802c4d8:	f000 f9e4 	bl	802c8a4 <__swsetup_r>
 802c4dc:	b170      	cbz	r0, 802c4fc <_vfiprintf_r+0x5c>
 802c4de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802c4e0:	07dc      	lsls	r4, r3, #31
 802c4e2:	d504      	bpl.n	802c4ee <_vfiprintf_r+0x4e>
 802c4e4:	f04f 30ff 	mov.w	r0, #4294967295
 802c4e8:	b01d      	add	sp, #116	@ 0x74
 802c4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c4ee:	89ab      	ldrh	r3, [r5, #12]
 802c4f0:	0598      	lsls	r0, r3, #22
 802c4f2:	d4f7      	bmi.n	802c4e4 <_vfiprintf_r+0x44>
 802c4f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802c4f6:	f7fe fde7 	bl	802b0c8 <__retarget_lock_release_recursive>
 802c4fa:	e7f3      	b.n	802c4e4 <_vfiprintf_r+0x44>
 802c4fc:	2300      	movs	r3, #0
 802c4fe:	9309      	str	r3, [sp, #36]	@ 0x24
 802c500:	2320      	movs	r3, #32
 802c502:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802c506:	f8cd 800c 	str.w	r8, [sp, #12]
 802c50a:	2330      	movs	r3, #48	@ 0x30
 802c50c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802c6bc <_vfiprintf_r+0x21c>
 802c510:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802c514:	f04f 0901 	mov.w	r9, #1
 802c518:	4623      	mov	r3, r4
 802c51a:	469a      	mov	sl, r3
 802c51c:	f813 2b01 	ldrb.w	r2, [r3], #1
 802c520:	b10a      	cbz	r2, 802c526 <_vfiprintf_r+0x86>
 802c522:	2a25      	cmp	r2, #37	@ 0x25
 802c524:	d1f9      	bne.n	802c51a <_vfiprintf_r+0x7a>
 802c526:	ebba 0b04 	subs.w	fp, sl, r4
 802c52a:	d00b      	beq.n	802c544 <_vfiprintf_r+0xa4>
 802c52c:	465b      	mov	r3, fp
 802c52e:	4622      	mov	r2, r4
 802c530:	4629      	mov	r1, r5
 802c532:	4630      	mov	r0, r6
 802c534:	f7ff ffa1 	bl	802c47a <__sfputs_r>
 802c538:	3001      	adds	r0, #1
 802c53a:	f000 80a7 	beq.w	802c68c <_vfiprintf_r+0x1ec>
 802c53e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802c540:	445a      	add	r2, fp
 802c542:	9209      	str	r2, [sp, #36]	@ 0x24
 802c544:	f89a 3000 	ldrb.w	r3, [sl]
 802c548:	2b00      	cmp	r3, #0
 802c54a:	f000 809f 	beq.w	802c68c <_vfiprintf_r+0x1ec>
 802c54e:	2300      	movs	r3, #0
 802c550:	f04f 32ff 	mov.w	r2, #4294967295
 802c554:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802c558:	f10a 0a01 	add.w	sl, sl, #1
 802c55c:	9304      	str	r3, [sp, #16]
 802c55e:	9307      	str	r3, [sp, #28]
 802c560:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802c564:	931a      	str	r3, [sp, #104]	@ 0x68
 802c566:	4654      	mov	r4, sl
 802c568:	2205      	movs	r2, #5
 802c56a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802c56e:	4853      	ldr	r0, [pc, #332]	@ (802c6bc <_vfiprintf_r+0x21c>)
 802c570:	f7d3 fece 	bl	8000310 <memchr>
 802c574:	9a04      	ldr	r2, [sp, #16]
 802c576:	b9d8      	cbnz	r0, 802c5b0 <_vfiprintf_r+0x110>
 802c578:	06d1      	lsls	r1, r2, #27
 802c57a:	bf44      	itt	mi
 802c57c:	2320      	movmi	r3, #32
 802c57e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802c582:	0713      	lsls	r3, r2, #28
 802c584:	bf44      	itt	mi
 802c586:	232b      	movmi	r3, #43	@ 0x2b
 802c588:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802c58c:	f89a 3000 	ldrb.w	r3, [sl]
 802c590:	2b2a      	cmp	r3, #42	@ 0x2a
 802c592:	d015      	beq.n	802c5c0 <_vfiprintf_r+0x120>
 802c594:	9a07      	ldr	r2, [sp, #28]
 802c596:	4654      	mov	r4, sl
 802c598:	2000      	movs	r0, #0
 802c59a:	f04f 0c0a 	mov.w	ip, #10
 802c59e:	4621      	mov	r1, r4
 802c5a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 802c5a4:	3b30      	subs	r3, #48	@ 0x30
 802c5a6:	2b09      	cmp	r3, #9
 802c5a8:	d94b      	bls.n	802c642 <_vfiprintf_r+0x1a2>
 802c5aa:	b1b0      	cbz	r0, 802c5da <_vfiprintf_r+0x13a>
 802c5ac:	9207      	str	r2, [sp, #28]
 802c5ae:	e014      	b.n	802c5da <_vfiprintf_r+0x13a>
 802c5b0:	eba0 0308 	sub.w	r3, r0, r8
 802c5b4:	fa09 f303 	lsl.w	r3, r9, r3
 802c5b8:	4313      	orrs	r3, r2
 802c5ba:	9304      	str	r3, [sp, #16]
 802c5bc:	46a2      	mov	sl, r4
 802c5be:	e7d2      	b.n	802c566 <_vfiprintf_r+0xc6>
 802c5c0:	9b03      	ldr	r3, [sp, #12]
 802c5c2:	1d19      	adds	r1, r3, #4
 802c5c4:	681b      	ldr	r3, [r3, #0]
 802c5c6:	9103      	str	r1, [sp, #12]
 802c5c8:	2b00      	cmp	r3, #0
 802c5ca:	bfbb      	ittet	lt
 802c5cc:	425b      	neglt	r3, r3
 802c5ce:	f042 0202 	orrlt.w	r2, r2, #2
 802c5d2:	9307      	strge	r3, [sp, #28]
 802c5d4:	9307      	strlt	r3, [sp, #28]
 802c5d6:	bfb8      	it	lt
 802c5d8:	9204      	strlt	r2, [sp, #16]
 802c5da:	7823      	ldrb	r3, [r4, #0]
 802c5dc:	2b2e      	cmp	r3, #46	@ 0x2e
 802c5de:	d10a      	bne.n	802c5f6 <_vfiprintf_r+0x156>
 802c5e0:	7863      	ldrb	r3, [r4, #1]
 802c5e2:	2b2a      	cmp	r3, #42	@ 0x2a
 802c5e4:	d132      	bne.n	802c64c <_vfiprintf_r+0x1ac>
 802c5e6:	9b03      	ldr	r3, [sp, #12]
 802c5e8:	1d1a      	adds	r2, r3, #4
 802c5ea:	681b      	ldr	r3, [r3, #0]
 802c5ec:	9203      	str	r2, [sp, #12]
 802c5ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802c5f2:	3402      	adds	r4, #2
 802c5f4:	9305      	str	r3, [sp, #20]
 802c5f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802c6cc <_vfiprintf_r+0x22c>
 802c5fa:	7821      	ldrb	r1, [r4, #0]
 802c5fc:	2203      	movs	r2, #3
 802c5fe:	4650      	mov	r0, sl
 802c600:	f7d3 fe86 	bl	8000310 <memchr>
 802c604:	b138      	cbz	r0, 802c616 <_vfiprintf_r+0x176>
 802c606:	9b04      	ldr	r3, [sp, #16]
 802c608:	eba0 000a 	sub.w	r0, r0, sl
 802c60c:	2240      	movs	r2, #64	@ 0x40
 802c60e:	4082      	lsls	r2, r0
 802c610:	4313      	orrs	r3, r2
 802c612:	3401      	adds	r4, #1
 802c614:	9304      	str	r3, [sp, #16]
 802c616:	f814 1b01 	ldrb.w	r1, [r4], #1
 802c61a:	4829      	ldr	r0, [pc, #164]	@ (802c6c0 <_vfiprintf_r+0x220>)
 802c61c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802c620:	2206      	movs	r2, #6
 802c622:	f7d3 fe75 	bl	8000310 <memchr>
 802c626:	2800      	cmp	r0, #0
 802c628:	d03f      	beq.n	802c6aa <_vfiprintf_r+0x20a>
 802c62a:	4b26      	ldr	r3, [pc, #152]	@ (802c6c4 <_vfiprintf_r+0x224>)
 802c62c:	bb1b      	cbnz	r3, 802c676 <_vfiprintf_r+0x1d6>
 802c62e:	9b03      	ldr	r3, [sp, #12]
 802c630:	3307      	adds	r3, #7
 802c632:	f023 0307 	bic.w	r3, r3, #7
 802c636:	3308      	adds	r3, #8
 802c638:	9303      	str	r3, [sp, #12]
 802c63a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802c63c:	443b      	add	r3, r7
 802c63e:	9309      	str	r3, [sp, #36]	@ 0x24
 802c640:	e76a      	b.n	802c518 <_vfiprintf_r+0x78>
 802c642:	fb0c 3202 	mla	r2, ip, r2, r3
 802c646:	460c      	mov	r4, r1
 802c648:	2001      	movs	r0, #1
 802c64a:	e7a8      	b.n	802c59e <_vfiprintf_r+0xfe>
 802c64c:	2300      	movs	r3, #0
 802c64e:	3401      	adds	r4, #1
 802c650:	9305      	str	r3, [sp, #20]
 802c652:	4619      	mov	r1, r3
 802c654:	f04f 0c0a 	mov.w	ip, #10
 802c658:	4620      	mov	r0, r4
 802c65a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802c65e:	3a30      	subs	r2, #48	@ 0x30
 802c660:	2a09      	cmp	r2, #9
 802c662:	d903      	bls.n	802c66c <_vfiprintf_r+0x1cc>
 802c664:	2b00      	cmp	r3, #0
 802c666:	d0c6      	beq.n	802c5f6 <_vfiprintf_r+0x156>
 802c668:	9105      	str	r1, [sp, #20]
 802c66a:	e7c4      	b.n	802c5f6 <_vfiprintf_r+0x156>
 802c66c:	fb0c 2101 	mla	r1, ip, r1, r2
 802c670:	4604      	mov	r4, r0
 802c672:	2301      	movs	r3, #1
 802c674:	e7f0      	b.n	802c658 <_vfiprintf_r+0x1b8>
 802c676:	ab03      	add	r3, sp, #12
 802c678:	9300      	str	r3, [sp, #0]
 802c67a:	462a      	mov	r2, r5
 802c67c:	4b12      	ldr	r3, [pc, #72]	@ (802c6c8 <_vfiprintf_r+0x228>)
 802c67e:	a904      	add	r1, sp, #16
 802c680:	4630      	mov	r0, r6
 802c682:	f7fd ffb9 	bl	802a5f8 <_printf_float>
 802c686:	4607      	mov	r7, r0
 802c688:	1c78      	adds	r0, r7, #1
 802c68a:	d1d6      	bne.n	802c63a <_vfiprintf_r+0x19a>
 802c68c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802c68e:	07d9      	lsls	r1, r3, #31
 802c690:	d405      	bmi.n	802c69e <_vfiprintf_r+0x1fe>
 802c692:	89ab      	ldrh	r3, [r5, #12]
 802c694:	059a      	lsls	r2, r3, #22
 802c696:	d402      	bmi.n	802c69e <_vfiprintf_r+0x1fe>
 802c698:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802c69a:	f7fe fd15 	bl	802b0c8 <__retarget_lock_release_recursive>
 802c69e:	89ab      	ldrh	r3, [r5, #12]
 802c6a0:	065b      	lsls	r3, r3, #25
 802c6a2:	f53f af1f 	bmi.w	802c4e4 <_vfiprintf_r+0x44>
 802c6a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802c6a8:	e71e      	b.n	802c4e8 <_vfiprintf_r+0x48>
 802c6aa:	ab03      	add	r3, sp, #12
 802c6ac:	9300      	str	r3, [sp, #0]
 802c6ae:	462a      	mov	r2, r5
 802c6b0:	4b05      	ldr	r3, [pc, #20]	@ (802c6c8 <_vfiprintf_r+0x228>)
 802c6b2:	a904      	add	r1, sp, #16
 802c6b4:	4630      	mov	r0, r6
 802c6b6:	f7fe fa27 	bl	802ab08 <_printf_i>
 802c6ba:	e7e4      	b.n	802c686 <_vfiprintf_r+0x1e6>
 802c6bc:	08032d40 	.word	0x08032d40
 802c6c0:	08032d4a 	.word	0x08032d4a
 802c6c4:	0802a5f9 	.word	0x0802a5f9
 802c6c8:	0802c47b 	.word	0x0802c47b
 802c6cc:	08032d46 	.word	0x08032d46

0802c6d0 <__sflush_r>:
 802c6d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802c6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c6d8:	0716      	lsls	r6, r2, #28
 802c6da:	4605      	mov	r5, r0
 802c6dc:	460c      	mov	r4, r1
 802c6de:	d454      	bmi.n	802c78a <__sflush_r+0xba>
 802c6e0:	684b      	ldr	r3, [r1, #4]
 802c6e2:	2b00      	cmp	r3, #0
 802c6e4:	dc02      	bgt.n	802c6ec <__sflush_r+0x1c>
 802c6e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802c6e8:	2b00      	cmp	r3, #0
 802c6ea:	dd48      	ble.n	802c77e <__sflush_r+0xae>
 802c6ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802c6ee:	2e00      	cmp	r6, #0
 802c6f0:	d045      	beq.n	802c77e <__sflush_r+0xae>
 802c6f2:	2300      	movs	r3, #0
 802c6f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802c6f8:	682f      	ldr	r7, [r5, #0]
 802c6fa:	6a21      	ldr	r1, [r4, #32]
 802c6fc:	602b      	str	r3, [r5, #0]
 802c6fe:	d030      	beq.n	802c762 <__sflush_r+0x92>
 802c700:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802c702:	89a3      	ldrh	r3, [r4, #12]
 802c704:	0759      	lsls	r1, r3, #29
 802c706:	d505      	bpl.n	802c714 <__sflush_r+0x44>
 802c708:	6863      	ldr	r3, [r4, #4]
 802c70a:	1ad2      	subs	r2, r2, r3
 802c70c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802c70e:	b10b      	cbz	r3, 802c714 <__sflush_r+0x44>
 802c710:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802c712:	1ad2      	subs	r2, r2, r3
 802c714:	2300      	movs	r3, #0
 802c716:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802c718:	6a21      	ldr	r1, [r4, #32]
 802c71a:	4628      	mov	r0, r5
 802c71c:	47b0      	blx	r6
 802c71e:	1c43      	adds	r3, r0, #1
 802c720:	89a3      	ldrh	r3, [r4, #12]
 802c722:	d106      	bne.n	802c732 <__sflush_r+0x62>
 802c724:	6829      	ldr	r1, [r5, #0]
 802c726:	291d      	cmp	r1, #29
 802c728:	d82b      	bhi.n	802c782 <__sflush_r+0xb2>
 802c72a:	4a2a      	ldr	r2, [pc, #168]	@ (802c7d4 <__sflush_r+0x104>)
 802c72c:	410a      	asrs	r2, r1
 802c72e:	07d6      	lsls	r6, r2, #31
 802c730:	d427      	bmi.n	802c782 <__sflush_r+0xb2>
 802c732:	2200      	movs	r2, #0
 802c734:	6062      	str	r2, [r4, #4]
 802c736:	04d9      	lsls	r1, r3, #19
 802c738:	6922      	ldr	r2, [r4, #16]
 802c73a:	6022      	str	r2, [r4, #0]
 802c73c:	d504      	bpl.n	802c748 <__sflush_r+0x78>
 802c73e:	1c42      	adds	r2, r0, #1
 802c740:	d101      	bne.n	802c746 <__sflush_r+0x76>
 802c742:	682b      	ldr	r3, [r5, #0]
 802c744:	b903      	cbnz	r3, 802c748 <__sflush_r+0x78>
 802c746:	6560      	str	r0, [r4, #84]	@ 0x54
 802c748:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802c74a:	602f      	str	r7, [r5, #0]
 802c74c:	b1b9      	cbz	r1, 802c77e <__sflush_r+0xae>
 802c74e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802c752:	4299      	cmp	r1, r3
 802c754:	d002      	beq.n	802c75c <__sflush_r+0x8c>
 802c756:	4628      	mov	r0, r5
 802c758:	f7ff faac 	bl	802bcb4 <_free_r>
 802c75c:	2300      	movs	r3, #0
 802c75e:	6363      	str	r3, [r4, #52]	@ 0x34
 802c760:	e00d      	b.n	802c77e <__sflush_r+0xae>
 802c762:	2301      	movs	r3, #1
 802c764:	4628      	mov	r0, r5
 802c766:	47b0      	blx	r6
 802c768:	4602      	mov	r2, r0
 802c76a:	1c50      	adds	r0, r2, #1
 802c76c:	d1c9      	bne.n	802c702 <__sflush_r+0x32>
 802c76e:	682b      	ldr	r3, [r5, #0]
 802c770:	2b00      	cmp	r3, #0
 802c772:	d0c6      	beq.n	802c702 <__sflush_r+0x32>
 802c774:	2b1d      	cmp	r3, #29
 802c776:	d001      	beq.n	802c77c <__sflush_r+0xac>
 802c778:	2b16      	cmp	r3, #22
 802c77a:	d11e      	bne.n	802c7ba <__sflush_r+0xea>
 802c77c:	602f      	str	r7, [r5, #0]
 802c77e:	2000      	movs	r0, #0
 802c780:	e022      	b.n	802c7c8 <__sflush_r+0xf8>
 802c782:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c786:	b21b      	sxth	r3, r3
 802c788:	e01b      	b.n	802c7c2 <__sflush_r+0xf2>
 802c78a:	690f      	ldr	r7, [r1, #16]
 802c78c:	2f00      	cmp	r7, #0
 802c78e:	d0f6      	beq.n	802c77e <__sflush_r+0xae>
 802c790:	0793      	lsls	r3, r2, #30
 802c792:	680e      	ldr	r6, [r1, #0]
 802c794:	bf08      	it	eq
 802c796:	694b      	ldreq	r3, [r1, #20]
 802c798:	600f      	str	r7, [r1, #0]
 802c79a:	bf18      	it	ne
 802c79c:	2300      	movne	r3, #0
 802c79e:	eba6 0807 	sub.w	r8, r6, r7
 802c7a2:	608b      	str	r3, [r1, #8]
 802c7a4:	f1b8 0f00 	cmp.w	r8, #0
 802c7a8:	dde9      	ble.n	802c77e <__sflush_r+0xae>
 802c7aa:	6a21      	ldr	r1, [r4, #32]
 802c7ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802c7ae:	4643      	mov	r3, r8
 802c7b0:	463a      	mov	r2, r7
 802c7b2:	4628      	mov	r0, r5
 802c7b4:	47b0      	blx	r6
 802c7b6:	2800      	cmp	r0, #0
 802c7b8:	dc08      	bgt.n	802c7cc <__sflush_r+0xfc>
 802c7ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c7be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c7c2:	81a3      	strh	r3, [r4, #12]
 802c7c4:	f04f 30ff 	mov.w	r0, #4294967295
 802c7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c7cc:	4407      	add	r7, r0
 802c7ce:	eba8 0800 	sub.w	r8, r8, r0
 802c7d2:	e7e7      	b.n	802c7a4 <__sflush_r+0xd4>
 802c7d4:	dfbffffe 	.word	0xdfbffffe

0802c7d8 <_fflush_r>:
 802c7d8:	b538      	push	{r3, r4, r5, lr}
 802c7da:	690b      	ldr	r3, [r1, #16]
 802c7dc:	4605      	mov	r5, r0
 802c7de:	460c      	mov	r4, r1
 802c7e0:	b913      	cbnz	r3, 802c7e8 <_fflush_r+0x10>
 802c7e2:	2500      	movs	r5, #0
 802c7e4:	4628      	mov	r0, r5
 802c7e6:	bd38      	pop	{r3, r4, r5, pc}
 802c7e8:	b118      	cbz	r0, 802c7f2 <_fflush_r+0x1a>
 802c7ea:	6a03      	ldr	r3, [r0, #32]
 802c7ec:	b90b      	cbnz	r3, 802c7f2 <_fflush_r+0x1a>
 802c7ee:	f7fe fb37 	bl	802ae60 <__sinit>
 802c7f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c7f6:	2b00      	cmp	r3, #0
 802c7f8:	d0f3      	beq.n	802c7e2 <_fflush_r+0xa>
 802c7fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802c7fc:	07d0      	lsls	r0, r2, #31
 802c7fe:	d404      	bmi.n	802c80a <_fflush_r+0x32>
 802c800:	0599      	lsls	r1, r3, #22
 802c802:	d402      	bmi.n	802c80a <_fflush_r+0x32>
 802c804:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c806:	f7fe fc5e 	bl	802b0c6 <__retarget_lock_acquire_recursive>
 802c80a:	4628      	mov	r0, r5
 802c80c:	4621      	mov	r1, r4
 802c80e:	f7ff ff5f 	bl	802c6d0 <__sflush_r>
 802c812:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c814:	07da      	lsls	r2, r3, #31
 802c816:	4605      	mov	r5, r0
 802c818:	d4e4      	bmi.n	802c7e4 <_fflush_r+0xc>
 802c81a:	89a3      	ldrh	r3, [r4, #12]
 802c81c:	059b      	lsls	r3, r3, #22
 802c81e:	d4e1      	bmi.n	802c7e4 <_fflush_r+0xc>
 802c820:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c822:	f7fe fc51 	bl	802b0c8 <__retarget_lock_release_recursive>
 802c826:	e7dd      	b.n	802c7e4 <_fflush_r+0xc>

0802c828 <__swbuf_r>:
 802c828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c82a:	460e      	mov	r6, r1
 802c82c:	4614      	mov	r4, r2
 802c82e:	4605      	mov	r5, r0
 802c830:	b118      	cbz	r0, 802c83a <__swbuf_r+0x12>
 802c832:	6a03      	ldr	r3, [r0, #32]
 802c834:	b90b      	cbnz	r3, 802c83a <__swbuf_r+0x12>
 802c836:	f7fe fb13 	bl	802ae60 <__sinit>
 802c83a:	69a3      	ldr	r3, [r4, #24]
 802c83c:	60a3      	str	r3, [r4, #8]
 802c83e:	89a3      	ldrh	r3, [r4, #12]
 802c840:	071a      	lsls	r2, r3, #28
 802c842:	d501      	bpl.n	802c848 <__swbuf_r+0x20>
 802c844:	6923      	ldr	r3, [r4, #16]
 802c846:	b943      	cbnz	r3, 802c85a <__swbuf_r+0x32>
 802c848:	4621      	mov	r1, r4
 802c84a:	4628      	mov	r0, r5
 802c84c:	f000 f82a 	bl	802c8a4 <__swsetup_r>
 802c850:	b118      	cbz	r0, 802c85a <__swbuf_r+0x32>
 802c852:	f04f 37ff 	mov.w	r7, #4294967295
 802c856:	4638      	mov	r0, r7
 802c858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802c85a:	6823      	ldr	r3, [r4, #0]
 802c85c:	6922      	ldr	r2, [r4, #16]
 802c85e:	1a98      	subs	r0, r3, r2
 802c860:	6963      	ldr	r3, [r4, #20]
 802c862:	b2f6      	uxtb	r6, r6
 802c864:	4283      	cmp	r3, r0
 802c866:	4637      	mov	r7, r6
 802c868:	dc05      	bgt.n	802c876 <__swbuf_r+0x4e>
 802c86a:	4621      	mov	r1, r4
 802c86c:	4628      	mov	r0, r5
 802c86e:	f7ff ffb3 	bl	802c7d8 <_fflush_r>
 802c872:	2800      	cmp	r0, #0
 802c874:	d1ed      	bne.n	802c852 <__swbuf_r+0x2a>
 802c876:	68a3      	ldr	r3, [r4, #8]
 802c878:	3b01      	subs	r3, #1
 802c87a:	60a3      	str	r3, [r4, #8]
 802c87c:	6823      	ldr	r3, [r4, #0]
 802c87e:	1c5a      	adds	r2, r3, #1
 802c880:	6022      	str	r2, [r4, #0]
 802c882:	701e      	strb	r6, [r3, #0]
 802c884:	6962      	ldr	r2, [r4, #20]
 802c886:	1c43      	adds	r3, r0, #1
 802c888:	429a      	cmp	r2, r3
 802c88a:	d004      	beq.n	802c896 <__swbuf_r+0x6e>
 802c88c:	89a3      	ldrh	r3, [r4, #12]
 802c88e:	07db      	lsls	r3, r3, #31
 802c890:	d5e1      	bpl.n	802c856 <__swbuf_r+0x2e>
 802c892:	2e0a      	cmp	r6, #10
 802c894:	d1df      	bne.n	802c856 <__swbuf_r+0x2e>
 802c896:	4621      	mov	r1, r4
 802c898:	4628      	mov	r0, r5
 802c89a:	f7ff ff9d 	bl	802c7d8 <_fflush_r>
 802c89e:	2800      	cmp	r0, #0
 802c8a0:	d0d9      	beq.n	802c856 <__swbuf_r+0x2e>
 802c8a2:	e7d6      	b.n	802c852 <__swbuf_r+0x2a>

0802c8a4 <__swsetup_r>:
 802c8a4:	b538      	push	{r3, r4, r5, lr}
 802c8a6:	4b29      	ldr	r3, [pc, #164]	@ (802c94c <__swsetup_r+0xa8>)
 802c8a8:	4605      	mov	r5, r0
 802c8aa:	6818      	ldr	r0, [r3, #0]
 802c8ac:	460c      	mov	r4, r1
 802c8ae:	b118      	cbz	r0, 802c8b8 <__swsetup_r+0x14>
 802c8b0:	6a03      	ldr	r3, [r0, #32]
 802c8b2:	b90b      	cbnz	r3, 802c8b8 <__swsetup_r+0x14>
 802c8b4:	f7fe fad4 	bl	802ae60 <__sinit>
 802c8b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c8bc:	0719      	lsls	r1, r3, #28
 802c8be:	d422      	bmi.n	802c906 <__swsetup_r+0x62>
 802c8c0:	06da      	lsls	r2, r3, #27
 802c8c2:	d407      	bmi.n	802c8d4 <__swsetup_r+0x30>
 802c8c4:	2209      	movs	r2, #9
 802c8c6:	602a      	str	r2, [r5, #0]
 802c8c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c8cc:	81a3      	strh	r3, [r4, #12]
 802c8ce:	f04f 30ff 	mov.w	r0, #4294967295
 802c8d2:	e033      	b.n	802c93c <__swsetup_r+0x98>
 802c8d4:	0758      	lsls	r0, r3, #29
 802c8d6:	d512      	bpl.n	802c8fe <__swsetup_r+0x5a>
 802c8d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802c8da:	b141      	cbz	r1, 802c8ee <__swsetup_r+0x4a>
 802c8dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802c8e0:	4299      	cmp	r1, r3
 802c8e2:	d002      	beq.n	802c8ea <__swsetup_r+0x46>
 802c8e4:	4628      	mov	r0, r5
 802c8e6:	f7ff f9e5 	bl	802bcb4 <_free_r>
 802c8ea:	2300      	movs	r3, #0
 802c8ec:	6363      	str	r3, [r4, #52]	@ 0x34
 802c8ee:	89a3      	ldrh	r3, [r4, #12]
 802c8f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802c8f4:	81a3      	strh	r3, [r4, #12]
 802c8f6:	2300      	movs	r3, #0
 802c8f8:	6063      	str	r3, [r4, #4]
 802c8fa:	6923      	ldr	r3, [r4, #16]
 802c8fc:	6023      	str	r3, [r4, #0]
 802c8fe:	89a3      	ldrh	r3, [r4, #12]
 802c900:	f043 0308 	orr.w	r3, r3, #8
 802c904:	81a3      	strh	r3, [r4, #12]
 802c906:	6923      	ldr	r3, [r4, #16]
 802c908:	b94b      	cbnz	r3, 802c91e <__swsetup_r+0x7a>
 802c90a:	89a3      	ldrh	r3, [r4, #12]
 802c90c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802c910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802c914:	d003      	beq.n	802c91e <__swsetup_r+0x7a>
 802c916:	4621      	mov	r1, r4
 802c918:	4628      	mov	r0, r5
 802c91a:	f000 f872 	bl	802ca02 <__smakebuf_r>
 802c91e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c922:	f013 0201 	ands.w	r2, r3, #1
 802c926:	d00a      	beq.n	802c93e <__swsetup_r+0x9a>
 802c928:	2200      	movs	r2, #0
 802c92a:	60a2      	str	r2, [r4, #8]
 802c92c:	6962      	ldr	r2, [r4, #20]
 802c92e:	4252      	negs	r2, r2
 802c930:	61a2      	str	r2, [r4, #24]
 802c932:	6922      	ldr	r2, [r4, #16]
 802c934:	b942      	cbnz	r2, 802c948 <__swsetup_r+0xa4>
 802c936:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802c93a:	d1c5      	bne.n	802c8c8 <__swsetup_r+0x24>
 802c93c:	bd38      	pop	{r3, r4, r5, pc}
 802c93e:	0799      	lsls	r1, r3, #30
 802c940:	bf58      	it	pl
 802c942:	6962      	ldrpl	r2, [r4, #20]
 802c944:	60a2      	str	r2, [r4, #8]
 802c946:	e7f4      	b.n	802c932 <__swsetup_r+0x8e>
 802c948:	2000      	movs	r0, #0
 802c94a:	e7f7      	b.n	802c93c <__swsetup_r+0x98>
 802c94c:	24000078 	.word	0x24000078

0802c950 <_calloc_r>:
 802c950:	b570      	push	{r4, r5, r6, lr}
 802c952:	fba1 5402 	umull	r5, r4, r1, r2
 802c956:	b93c      	cbnz	r4, 802c968 <_calloc_r+0x18>
 802c958:	4629      	mov	r1, r5
 802c95a:	f7fd fd33 	bl	802a3c4 <_malloc_r>
 802c95e:	4606      	mov	r6, r0
 802c960:	b928      	cbnz	r0, 802c96e <_calloc_r+0x1e>
 802c962:	2600      	movs	r6, #0
 802c964:	4630      	mov	r0, r6
 802c966:	bd70      	pop	{r4, r5, r6, pc}
 802c968:	220c      	movs	r2, #12
 802c96a:	6002      	str	r2, [r0, #0]
 802c96c:	e7f9      	b.n	802c962 <_calloc_r+0x12>
 802c96e:	462a      	mov	r2, r5
 802c970:	4621      	mov	r1, r4
 802c972:	f7fe fb1a 	bl	802afaa <memset>
 802c976:	e7f5      	b.n	802c964 <_calloc_r+0x14>

0802c978 <__ascii_mbtowc>:
 802c978:	b082      	sub	sp, #8
 802c97a:	b901      	cbnz	r1, 802c97e <__ascii_mbtowc+0x6>
 802c97c:	a901      	add	r1, sp, #4
 802c97e:	b142      	cbz	r2, 802c992 <__ascii_mbtowc+0x1a>
 802c980:	b14b      	cbz	r3, 802c996 <__ascii_mbtowc+0x1e>
 802c982:	7813      	ldrb	r3, [r2, #0]
 802c984:	600b      	str	r3, [r1, #0]
 802c986:	7812      	ldrb	r2, [r2, #0]
 802c988:	1e10      	subs	r0, r2, #0
 802c98a:	bf18      	it	ne
 802c98c:	2001      	movne	r0, #1
 802c98e:	b002      	add	sp, #8
 802c990:	4770      	bx	lr
 802c992:	4610      	mov	r0, r2
 802c994:	e7fb      	b.n	802c98e <__ascii_mbtowc+0x16>
 802c996:	f06f 0001 	mvn.w	r0, #1
 802c99a:	e7f8      	b.n	802c98e <__ascii_mbtowc+0x16>

0802c99c <__ascii_wctomb>:
 802c99c:	4603      	mov	r3, r0
 802c99e:	4608      	mov	r0, r1
 802c9a0:	b141      	cbz	r1, 802c9b4 <__ascii_wctomb+0x18>
 802c9a2:	2aff      	cmp	r2, #255	@ 0xff
 802c9a4:	d904      	bls.n	802c9b0 <__ascii_wctomb+0x14>
 802c9a6:	228a      	movs	r2, #138	@ 0x8a
 802c9a8:	601a      	str	r2, [r3, #0]
 802c9aa:	f04f 30ff 	mov.w	r0, #4294967295
 802c9ae:	4770      	bx	lr
 802c9b0:	700a      	strb	r2, [r1, #0]
 802c9b2:	2001      	movs	r0, #1
 802c9b4:	4770      	bx	lr

0802c9b6 <__swhatbuf_r>:
 802c9b6:	b570      	push	{r4, r5, r6, lr}
 802c9b8:	460c      	mov	r4, r1
 802c9ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c9be:	2900      	cmp	r1, #0
 802c9c0:	b096      	sub	sp, #88	@ 0x58
 802c9c2:	4615      	mov	r5, r2
 802c9c4:	461e      	mov	r6, r3
 802c9c6:	da0d      	bge.n	802c9e4 <__swhatbuf_r+0x2e>
 802c9c8:	89a3      	ldrh	r3, [r4, #12]
 802c9ca:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802c9ce:	f04f 0100 	mov.w	r1, #0
 802c9d2:	bf14      	ite	ne
 802c9d4:	2340      	movne	r3, #64	@ 0x40
 802c9d6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802c9da:	2000      	movs	r0, #0
 802c9dc:	6031      	str	r1, [r6, #0]
 802c9de:	602b      	str	r3, [r5, #0]
 802c9e0:	b016      	add	sp, #88	@ 0x58
 802c9e2:	bd70      	pop	{r4, r5, r6, pc}
 802c9e4:	466a      	mov	r2, sp
 802c9e6:	f000 f849 	bl	802ca7c <_fstat_r>
 802c9ea:	2800      	cmp	r0, #0
 802c9ec:	dbec      	blt.n	802c9c8 <__swhatbuf_r+0x12>
 802c9ee:	9901      	ldr	r1, [sp, #4]
 802c9f0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802c9f4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802c9f8:	4259      	negs	r1, r3
 802c9fa:	4159      	adcs	r1, r3
 802c9fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802ca00:	e7eb      	b.n	802c9da <__swhatbuf_r+0x24>

0802ca02 <__smakebuf_r>:
 802ca02:	898b      	ldrh	r3, [r1, #12]
 802ca04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802ca06:	079d      	lsls	r5, r3, #30
 802ca08:	4606      	mov	r6, r0
 802ca0a:	460c      	mov	r4, r1
 802ca0c:	d507      	bpl.n	802ca1e <__smakebuf_r+0x1c>
 802ca0e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802ca12:	6023      	str	r3, [r4, #0]
 802ca14:	6123      	str	r3, [r4, #16]
 802ca16:	2301      	movs	r3, #1
 802ca18:	6163      	str	r3, [r4, #20]
 802ca1a:	b003      	add	sp, #12
 802ca1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802ca1e:	ab01      	add	r3, sp, #4
 802ca20:	466a      	mov	r2, sp
 802ca22:	f7ff ffc8 	bl	802c9b6 <__swhatbuf_r>
 802ca26:	9f00      	ldr	r7, [sp, #0]
 802ca28:	4605      	mov	r5, r0
 802ca2a:	4639      	mov	r1, r7
 802ca2c:	4630      	mov	r0, r6
 802ca2e:	f7fd fcc9 	bl	802a3c4 <_malloc_r>
 802ca32:	b948      	cbnz	r0, 802ca48 <__smakebuf_r+0x46>
 802ca34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ca38:	059a      	lsls	r2, r3, #22
 802ca3a:	d4ee      	bmi.n	802ca1a <__smakebuf_r+0x18>
 802ca3c:	f023 0303 	bic.w	r3, r3, #3
 802ca40:	f043 0302 	orr.w	r3, r3, #2
 802ca44:	81a3      	strh	r3, [r4, #12]
 802ca46:	e7e2      	b.n	802ca0e <__smakebuf_r+0xc>
 802ca48:	89a3      	ldrh	r3, [r4, #12]
 802ca4a:	6020      	str	r0, [r4, #0]
 802ca4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802ca50:	81a3      	strh	r3, [r4, #12]
 802ca52:	9b01      	ldr	r3, [sp, #4]
 802ca54:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802ca58:	b15b      	cbz	r3, 802ca72 <__smakebuf_r+0x70>
 802ca5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802ca5e:	4630      	mov	r0, r6
 802ca60:	f000 f81e 	bl	802caa0 <_isatty_r>
 802ca64:	b128      	cbz	r0, 802ca72 <__smakebuf_r+0x70>
 802ca66:	89a3      	ldrh	r3, [r4, #12]
 802ca68:	f023 0303 	bic.w	r3, r3, #3
 802ca6c:	f043 0301 	orr.w	r3, r3, #1
 802ca70:	81a3      	strh	r3, [r4, #12]
 802ca72:	89a3      	ldrh	r3, [r4, #12]
 802ca74:	431d      	orrs	r5, r3
 802ca76:	81a5      	strh	r5, [r4, #12]
 802ca78:	e7cf      	b.n	802ca1a <__smakebuf_r+0x18>
	...

0802ca7c <_fstat_r>:
 802ca7c:	b538      	push	{r3, r4, r5, lr}
 802ca7e:	4d07      	ldr	r5, [pc, #28]	@ (802ca9c <_fstat_r+0x20>)
 802ca80:	2300      	movs	r3, #0
 802ca82:	4604      	mov	r4, r0
 802ca84:	4608      	mov	r0, r1
 802ca86:	4611      	mov	r1, r2
 802ca88:	602b      	str	r3, [r5, #0]
 802ca8a:	f7dc fc7a 	bl	8009382 <_fstat>
 802ca8e:	1c43      	adds	r3, r0, #1
 802ca90:	d102      	bne.n	802ca98 <_fstat_r+0x1c>
 802ca92:	682b      	ldr	r3, [r5, #0]
 802ca94:	b103      	cbz	r3, 802ca98 <_fstat_r+0x1c>
 802ca96:	6023      	str	r3, [r4, #0]
 802ca98:	bd38      	pop	{r3, r4, r5, pc}
 802ca9a:	bf00      	nop
 802ca9c:	2400380c 	.word	0x2400380c

0802caa0 <_isatty_r>:
 802caa0:	b538      	push	{r3, r4, r5, lr}
 802caa2:	4d06      	ldr	r5, [pc, #24]	@ (802cabc <_isatty_r+0x1c>)
 802caa4:	2300      	movs	r3, #0
 802caa6:	4604      	mov	r4, r0
 802caa8:	4608      	mov	r0, r1
 802caaa:	602b      	str	r3, [r5, #0]
 802caac:	f7dc fc79 	bl	80093a2 <_isatty>
 802cab0:	1c43      	adds	r3, r0, #1
 802cab2:	d102      	bne.n	802caba <_isatty_r+0x1a>
 802cab4:	682b      	ldr	r3, [r5, #0]
 802cab6:	b103      	cbz	r3, 802caba <_isatty_r+0x1a>
 802cab8:	6023      	str	r3, [r4, #0]
 802caba:	bd38      	pop	{r3, r4, r5, pc}
 802cabc:	2400380c 	.word	0x2400380c

0802cac0 <_init>:
 802cac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cac2:	bf00      	nop
 802cac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802cac6:	bc08      	pop	{r3}
 802cac8:	469e      	mov	lr, r3
 802caca:	4770      	bx	lr

0802cacc <_fini>:
 802cacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cace:	bf00      	nop
 802cad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802cad2:	bc08      	pop	{r3}
 802cad4:	469e      	mov	lr, r3
 802cad6:	4770      	bx	lr
